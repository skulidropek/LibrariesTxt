[ExtensionAttribute]
public static class NGraphics.Conversions : object {
    [ExtensionAttribute]
public static RawColor4 ToColor4(Color color);
    [ExtensionAttribute]
public static RawVector2 ToVector2(Point point);
    [ExtensionAttribute]
public static Size2F ToSize2F(Size size);
    [ExtensionAttribute]
public static Size ToSize(Size2F size);
    [ExtensionAttribute]
public static Size ToSize(Size2 size);
    [ExtensionAttribute]
public static RawRectangleF ToRectangleF(Rect rect);
    [ExtensionAttribute]
public static RawRectangle ToRectangle(Rect rect);
}
public class NGraphics.Direct2DFactories : object {
    public ImagingFactory WICFactory;
    public Factory D2DFactory;
    public Factory DWFactory;
    public static Direct2DFactories Shared;
    private static Direct2DFactories();
}
public class NGraphics.RenderTargetCanvas : object {
    protected RenderTarget renderTarget;
    protected Direct2DFactories factories;
    private Stack`1<DrawingStateBlock> stateStack;
    protected RenderTargetCanvas(Direct2DFactories factories);
    public RenderTargetCanvas(Surface surface, RenderTargetProperties properties, Direct2DFactories factories);
    public RenderTargetCanvas(RenderTarget renderTarget, Direct2DFactories factories);
    protected void Initialize(RenderTarget renderTarget);
    public sealed virtual void SaveState();
    public sealed virtual void Transform(Transform transform);
    public sealed virtual void RestoreState();
    public sealed virtual TextMetrics MeasureText(string text, Font font);
    public sealed virtual void DrawText(string text, Rect frame, Font font, TextAlignment alignment, Pen pen, Brush brush);
    public sealed virtual void DrawPath(IEnumerable`1<PathOp> ops, Pen pen, Brush brush);
    public sealed virtual void DrawRectangle(Rect frame, Size corner, Pen pen, Brush brush);
    public sealed virtual void DrawEllipse(Rect frame, Pen pen, Brush brush);
    public sealed virtual void DrawImage(IImage image, Rect frame, double alpha);
    private Bitmap GetImage(IImage image);
    private StrokeStyle GetStrokeStyle(Pen pen);
    private Brush GetBrush(Pen pen);
    private Brush GetBrush(Rect frame, Brush brush);
    private GradientStopCollection GetStops(List`1<GradientStop> stops);
}
public class NGraphics.SurfaceImageSourceCanvas : RenderTargetCanvas {
    private ISurfaceImageSourceNative sisn;
    public SurfaceImageSourceCanvas(SurfaceImageSource surfaceImageSource, Rect updateRect, Direct2DFactories factories);
}
[ExtensionAttribute]
public static class NGraphics.UWP.GraphicFilesEx : object {
    [AsyncStateMachineAttribute("NGraphics.UWP.GraphicFilesEx/<WriteSvgAsync>d__0")]
[ExtensionAttribute]
public static Task WriteSvgAsync(Graphic g, string path);
}
public static class NGraphics.UWP.Platforms : object {
    private static IPlatform nulll;
    private static IPlatform current;
    public static IPlatform Null { get; }
    public static IPlatform Current { get; }
    private static Platforms();
    public static IPlatform get_Null();
    public static IPlatform get_Current();
}
public class NGraphics.UWP.WinUniversalPlatform : object {
    public string Name { get; }
    public sealed virtual string get_Name();
    public sealed virtual IImageCanvas CreateImageCanvas(Size size, double scale, bool transparency);
    public sealed virtual IImage CreateImage(Color[] colors, int width, double scale);
    public sealed virtual IImage LoadImage(Stream stream);
    public sealed virtual IImage LoadImage(string path);
    [AsyncStateMachineAttribute("NGraphics.UWP.WinUniversalPlatform/<OpenFileStreamForWritingAsync>d__6")]
public sealed virtual Task`1<Stream> OpenFileStreamForWritingAsync(string path);
    public static TextFormat GetTextFormat(Direct2DFactories factories, Font font);
    public static TextMetrics GlobalMeasureText(Direct2DFactories factories, string text, Font font);
    public sealed virtual TextMetrics MeasureText(string text, Font font);
}
public class NGraphics.WICBitmapCanvas : RenderTargetCanvas {
    protected Bitmap Bmp;
    private Size size;
    private double scale;
    public Size Size { get; }
    public double Scale { get; }
    public WICBitmapCanvas(Size size, double scale, bool transparency, Direct2DFactories factories);
    public WICBitmapCanvas(Bitmap bmp, RenderTargetProperties properties, Direct2DFactories factories);
    public sealed virtual IImage GetImage();
    public sealed virtual Size get_Size();
    public sealed virtual double get_Scale();
}
public class NGraphics.WICBitmapSourceImage : object {
    private BitmapSource bmp;
    private Direct2DFactories factories;
    private double scale;
    public BitmapSource Bitmap { get; }
    public Size Size { get; }
    public double Scale { get; }
    public WICBitmapSourceImage(BitmapSource bmp, double scale, Direct2DFactories factories);
    public BitmapSource get_Bitmap();
    public sealed virtual Size get_Size();
    public sealed virtual double get_Scale();
    public sealed virtual void SaveAsPng(string path);
    public sealed virtual void SaveAsPng(Stream stream);
}
