public class Ninject.Extensions.Conventions.BindingBuilder.AssemblyFinder : object {
    private IAssemblyNameRetriever assemblyNameRetriever;
    public AssemblyFinder(IAssemblyNameRetriever assemblyNameRetriever);
    public sealed virtual IEnumerable`1<Assembly> FindAssemblies(IEnumerable`1<string> assemblies, Predicate`1<Assembly> filter);
    public sealed virtual IEnumerable`1<string> FindAssembliesInPath(string path);
    public sealed virtual IEnumerable`1<string> FindAssembliesMatching(IEnumerable`1<string> patterns);
    private static bool IsAssemblyFile(string fileName);
    private static bool HasAssemblyExtension(string extension);
    private static IEnumerable`1<string> GetFilesMatchingPattern(string pattern);
    private static string NormalizePath(string path);
    private static string GetBaseDirectory();
}
public class Ninject.Extensions.Conventions.BindingBuilder.BindingGeneratorFactory : object {
    private IBindableTypeSelector bindableTypeSelector;
    public BindingGeneratorFactory(IBindableTypeSelector bindableTypeSelector);
    public sealed virtual IBindingGenerator CreateRegexBindingGenerator(string pattern);
    public sealed virtual IBindingGenerator CreateRegexBindingGenerator(string pattern, RegexOptions options);
    public sealed virtual IBindingGenerator CreateAllInterfacesBindingGenerator();
    public sealed virtual IBindingGenerator CreateAllBaseClassesBindingGenerator();
    public sealed virtual IBindingGenerator CreateBaseBindingGenerator();
    public sealed virtual IBindingGenerator CreateDefaultInterfaceBindingGenerator();
    public sealed virtual IBindingGenerator CreateDefaultInterfacesBindingGenerator();
    public sealed virtual IBindingGenerator CreateSingleInterfaceBindingGenerator();
    public sealed virtual IBindingGenerator CreateSelfBindingGenerator();
    public sealed virtual IBindingGenerator CreateSelectorBindingGenerator(ServiceSelector selector);
    public sealed virtual IBindingGenerator FactoryBindingGenerator(Func`1<IInstanceProvider> instanceProvider);
    protected virtual IBindingCreator CreateSingleBindingCreator();
}
public class Ninject.Extensions.Conventions.BindingBuilder.ConventionBindingBuilder : object {
    private ITypeSelector typeSelector;
    private IBindingRoot bindingRoot;
    private IDictionary`2<Type, IEnumerable`1<IBindingWhenInNamedWithOrOnSyntax`1<object>>> bindingSyntax;
    private IEnumerable`1<Assembly> selectedAssemblies;
    private IEnumerable`1<Type> allTypes;
    private IEnumerable`1<Type> currentTypes;
    private List`1<Type> types;
    private bool selectionComplete;
    public ConventionBindingBuilder(IBindingRoot bindingRoot, ITypeSelector typeSelector);
    public sealed virtual void SelectAllTypesFrom(IEnumerable`1<Assembly> assemblies);
    public sealed virtual void IncludingNonPublicTypes();
    public sealed virtual void Where(Func`2<Type, bool> filter);
    public sealed virtual void Including(IEnumerable`1<Type> includedTypes);
    public sealed virtual void Excluding(IEnumerable`1<Type> excludedTypes);
    public sealed virtual void BindWith(IBindingGenerator generator);
    public sealed virtual void Configure(ConfigurationAction configuration);
    public sealed virtual void Configure(ConfigurationActionWithService configuration);
    public sealed virtual void ConfigureFor(ConfigurationAction configuration);
    public sealed virtual void ConfigureFor(ConfigurationActionWithService configuration);
    private void UnionTypes();
    private void CreateTypeList();
    private void Reset();
}
public class Ninject.Extensions.Conventions.BindingBuilder.ConventionSyntax : object {
    private IConventionBindingBuilder bindingBuilder;
    private IAssemblyFinder assemblyFinder;
    private ITypeFilter typeFilter;
    private IBindingGeneratorFactory bindingGeneratorFactory;
    public IFromSyntax Join { get; }
    public ConventionSyntax(IConventionBindingBuilder bindingBuilder, IAssemblyFinder assemblyFinder, ITypeFilter typeFilter, IBindingGeneratorFactory bindingGeneratorFactory);
    public sealed virtual IConfigureSyntax BindWith();
    public sealed virtual IConfigureSyntax BindWith(IBindingGenerator generator);
    public sealed virtual IConfigureSyntax BindAllInterfaces();
    public sealed virtual IConfigureSyntax BindAllBaseClasses();
    public sealed virtual IConfigureSyntax BindBase();
    public sealed virtual IConfigureSyntax BindDefaultInterface();
    public sealed virtual IConfigureSyntax BindDefaultInterfaces();
    public sealed virtual IConfigureSyntax BindSingleInterface();
    public sealed virtual IConfigureSyntax BindToSelf();
    public sealed virtual IConfigureSyntax BindSelection(ServiceSelector selector);
    public sealed virtual IConfigureSyntax BindUsingRegex(string pattern);
    public sealed virtual IConfigureSyntax BindUsingRegex(string pattern, RegexOptions options);
    public sealed virtual IConfigureSyntax BindToFactory();
    public sealed virtual IConfigureSyntax BindToFactory(Func`1<IInstanceProvider> instanceProvider);
    public sealed virtual IConfigureForSyntax ConfigureFor(ConfigurationAction configuration);
    public sealed virtual IConfigureForSyntax ConfigureFor(ConfigurationActionWithService configuration);
    public sealed virtual IConfigureForSyntax Configure(ConfigurationAction configuration);
    public sealed virtual IConfigureForSyntax Configure(ConfigurationActionWithService configuration);
    public sealed virtual IFromSyntax get_Join();
    public sealed virtual IJoinExcludeIncludeBindSyntax Where(Func`2<Type, bool> filter);
    public sealed virtual ISelectSyntax IncludingNonPublicTypes();
    private IJoinFilterWhereExcludeIncludeBindSyntax SelectTypes(Func`2<Type, bool> filter);
    public sealed virtual IJoinFilterWhereExcludeIncludeBindSyntax InNamespaces(IEnumerable`1<string> namespaces);
    public sealed virtual IJoinFilterWhereExcludeIncludeBindSyntax InNamespaces(String[] namespaces);
    public sealed virtual IJoinFilterWhereExcludeIncludeBindSyntax InNamespaceOf(Type[] types);
    public sealed virtual IJoinFilterWhereExcludeIncludeBindSyntax InNamespaceOf();
    public sealed virtual IJoinFilterWhereExcludeIncludeBindSyntax NotInNamespaces(IEnumerable`1<string> namespaces);
    public sealed virtual IJoinFilterWhereExcludeIncludeBindSyntax NotInNamespaces(String[] namespaces);
    public sealed virtual IJoinFilterWhereExcludeIncludeBindSyntax NotInNamespaceOf(Type[] types);
    public sealed virtual IJoinFilterWhereExcludeIncludeBindSyntax NotInNamespaceOf();
    public sealed virtual IJoinFilterWhereExcludeIncludeBindSyntax InheritedFromAny(Type[] types);
    public sealed virtual IJoinFilterWhereExcludeIncludeBindSyntax InheritedFromAny(IEnumerable`1<Type> types);
    public sealed virtual IJoinFilterWhereExcludeIncludeBindSyntax InheritedFrom(Type type);
    public sealed virtual IJoinFilterWhereExcludeIncludeBindSyntax InheritedFrom();
    public sealed virtual IJoinFilterWhereExcludeIncludeBindSyntax WithAttribute();
    public sealed virtual IJoinFilterWhereExcludeIncludeBindSyntax WithAttribute(Func`2<T, bool> predicate);
    public sealed virtual IJoinFilterWhereExcludeIncludeBindSyntax WithAttribute(Type attributeType);
    public sealed virtual IJoinFilterWhereExcludeIncludeBindSyntax WithoutAttribute();
    public sealed virtual IJoinFilterWhereExcludeIncludeBindSyntax WithoutAttribute(Func`2<T, bool> predicate);
    public sealed virtual IJoinFilterWhereExcludeIncludeBindSyntax WithoutAttribute(Type attributeType);
    public sealed virtual IJoinFilterWhereExcludeIncludeBindSyntax WhichAreGeneric();
    public sealed virtual IJoinFilterWhereExcludeIncludeBindSyntax WhichAreNotGeneric();
    public sealed virtual IJoinFilterWhereExcludeIncludeBindSyntax EndingWith(string postfix);
    public sealed virtual IJoinFilterWhereExcludeIncludeBindSyntax StartingWith(string prefix);
    public sealed virtual IIncludingNonPublicTypesSelectSyntax From(IEnumerable`1<Assembly> assemblies);
    public sealed virtual IIncludingNonPublicTypesSelectSyntax From(Assembly[] assemblies);
    public sealed virtual IIncludingNonPublicTypesSelectSyntax FromThisAssembly();
    public sealed virtual IIncludingNonPublicTypesSelectSyntax FromAssemblyContaining();
    public sealed virtual IIncludingNonPublicTypesSelectSyntax FromAssemblyContaining(Type[] types);
    public sealed virtual IIncludingNonPublicTypesSelectSyntax FromAssemblyContaining(IEnumerable`1<Type> types);
    public sealed virtual IIncludingNonPublicTypesSelectSyntax From(String[] assemblies);
    public sealed virtual IIncludingNonPublicTypesSelectSyntax From(IEnumerable`1<string> assemblies);
    public sealed virtual IIncludingNonPublicTypesSelectSyntax From(IEnumerable`1<string> assemblies, Predicate`1<Assembly> filter);
    public sealed virtual IIncludingNonPublicTypesSelectSyntax FromAssembliesInPath(string path);
    public sealed virtual IIncludingNonPublicTypesSelectSyntax FromAssembliesInPath(string path, Predicate`1<Assembly> filter);
    public sealed virtual IIncludingNonPublicTypesSelectSyntax FromAssembliesMatching(String[] patterns);
    public sealed virtual IIncludingNonPublicTypesSelectSyntax FromAssembliesMatching(IEnumerable`1<string> patterns);
    public sealed virtual IIncludingNonPublicTypesSelectSyntax FromAssembliesMatching(IEnumerable`1<string> patterns, Predicate`1<Assembly> filter);
    public sealed virtual IExcludeIncludeBindSyntax Including();
    public sealed virtual IExcludeIncludeBindSyntax Including(Type[] types);
    public sealed virtual IExcludeIncludeBindSyntax Including(IEnumerable`1<Type> types);
    public sealed virtual IExcludeIncludeBindSyntax Excluding();
    public sealed virtual IExcludeIncludeBindSyntax Excluding(Type[] types);
    public sealed virtual IExcludeIncludeBindSyntax Excluding(IEnumerable`1<Type> types);
    public sealed virtual IJoinExcludeIncludeBindSyntax Select(Func`2<Type, bool> filter);
    public sealed virtual IJoinFilterWhereExcludeIncludeBindSyntax SelectAllTypes();
    public sealed virtual IJoinFilterWhereExcludeIncludeBindSyntax SelectAllClasses();
    public sealed virtual IJoinFilterWhereExcludeIncludeBindSyntax SelectAllIncludingAbstractClasses();
    public sealed virtual IJoinFilterWhereExcludeIncludeBindSyntax SelectAllAbstractClasses();
    public sealed virtual IJoinFilterWhereExcludeIncludeBindSyntax SelectAllInterfaces();
    private sealed virtual override Type Ninject.Syntax.IFluentSyntax.GetType();
}
public interface Ninject.Extensions.Conventions.BindingBuilder.IAssemblyFinder {
    public abstract virtual IEnumerable`1<Assembly> FindAssemblies(IEnumerable`1<string> assemblies, Predicate`1<Assembly> filter);
    public abstract virtual IEnumerable`1<string> FindAssembliesInPath(string path);
    public abstract virtual IEnumerable`1<string> FindAssembliesMatching(IEnumerable`1<string> patterns);
}
public interface Ninject.Extensions.Conventions.BindingBuilder.IBindingCreator {
    public abstract virtual IEnumerable`1<IBindingWhenInNamedWithOrOnSyntax`1<object>> CreateBindings(IBindingRoot bindingRoot, IEnumerable`1<Type> serviceTypes, Type implementationType);
}
public interface Ninject.Extensions.Conventions.BindingBuilder.IBindingGeneratorFactory {
    public abstract virtual IBindingGenerator CreateRegexBindingGenerator(string pattern);
    public abstract virtual IBindingGenerator CreateRegexBindingGenerator(string pattern, RegexOptions options);
    public abstract virtual IBindingGenerator CreateAllInterfacesBindingGenerator();
    public abstract virtual IBindingGenerator CreateAllBaseClassesBindingGenerator();
    public abstract virtual IBindingGenerator CreateBaseBindingGenerator();
    public abstract virtual IBindingGenerator CreateDefaultInterfaceBindingGenerator();
    public abstract virtual IBindingGenerator CreateDefaultInterfacesBindingGenerator();
    public abstract virtual IBindingGenerator CreateSingleInterfaceBindingGenerator();
    public abstract virtual IBindingGenerator CreateSelfBindingGenerator();
    public abstract virtual IBindingGenerator CreateSelectorBindingGenerator(ServiceSelector selector);
    public abstract virtual IBindingGenerator FactoryBindingGenerator(Func`1<IInstanceProvider> instanceProvider);
}
public interface Ninject.Extensions.Conventions.BindingBuilder.IConventionBindingBuilder {
    public abstract virtual void SelectAllTypesFrom(IEnumerable`1<Assembly> assemblies);
    public abstract virtual void Where(Func`2<Type, bool> filter);
    public abstract virtual void Including(IEnumerable`1<Type> includedTypes);
    public abstract virtual void Excluding(IEnumerable`1<Type> excludedTypes);
    public abstract virtual void BindWith(IBindingGenerator generator);
    public abstract virtual void Configure(ConfigurationAction configuration);
    public abstract virtual void Configure(ConfigurationActionWithService configuration);
    public abstract virtual void IncludingNonPublicTypes();
    public abstract virtual void ConfigureFor(ConfigurationAction configuration);
    public abstract virtual void ConfigureFor(ConfigurationActionWithService configuration);
}
public interface Ninject.Extensions.Conventions.BindingBuilder.ITypeFilter {
    public abstract virtual bool IsTypeInNamespace(Type type, string namespace);
    public abstract virtual bool IsTypeInheritedFromAny(Type type, IEnumerable`1<Type> types);
    public abstract virtual bool HasAttribute(Type type, Type attributeType);
    public abstract virtual bool HasAttribute(Type type, Func`2<TAttribute, bool> predicate);
}
public interface Ninject.Extensions.Conventions.BindingBuilder.ITypeSelector {
    public abstract virtual IEnumerable`1<Type> GetExportedTypes(IEnumerable`1<Assembly> assemblies);
    public abstract virtual IEnumerable`1<Type> GetAllTypes(IEnumerable`1<Assembly> assemblies);
}
public class Ninject.Extensions.Conventions.BindingBuilder.MultipleConfigurationBindingCreator : object {
    public sealed virtual IEnumerable`1<IBindingWhenInNamedWithOrOnSyntax`1<object>> CreateBindings(IBindingRoot bindingRoot, IEnumerable`1<Type> serviceTypes, Type implementationType);
}
public class Ninject.Extensions.Conventions.BindingBuilder.SingleConfigurationBindingCreator : object {
    public sealed virtual IEnumerable`1<IBindingWhenInNamedWithOrOnSyntax`1<object>> CreateBindings(IBindingRoot bindingRoot, IEnumerable`1<Type> serviceTypes, Type implementationType);
}
public class Ninject.Extensions.Conventions.BindingBuilder.TypeFilter : object {
    public sealed virtual bool IsTypeInNamespace(Type type, string namespace);
    public sealed virtual bool IsTypeInheritedFromAny(Type type, IEnumerable`1<Type> types);
    public sealed virtual bool HasAttribute(Type type, Type attributeType);
    public sealed virtual bool HasAttribute(Type type, Func`2<TAttribute, bool> predicate);
    private static bool IsTypeInheritedFrom(Type type, Type baseType);
    private static bool IsTypeInheritedFromGenericTypeDefinition(Type type, Type genericTypeDefinition);
    private static bool IsAssignableToGenericTypeDefinition(Type type, Type genericTypeDefinition);
}
public class Ninject.Extensions.Conventions.BindingBuilder.TypeSelector : object {
    public sealed virtual IEnumerable`1<Type> GetExportedTypes(IEnumerable`1<Assembly> assemblies);
    public sealed virtual IEnumerable`1<Type> GetAllTypes(IEnumerable`1<Assembly> assemblies);
}
public abstract class Ninject.Extensions.Conventions.BindingGenerators.AbstractInterfaceBindingGenerator : object {
    private IBindableTypeSelector bindableTypeSelector;
    private IBindingCreator bindingCreator;
    private Func`3<Type, Type, bool> filter;
    protected AbstractInterfaceBindingGenerator(IBindableTypeSelector bindableTypeSelector, IBindingCreator bindingCreator, Func`3<Type, Type, bool> filter);
    public sealed virtual IEnumerable`1<IBindingWhenInNamedWithOrOnSyntax`1<object>> CreateBindings(Type type, IBindingRoot bindingRoot);
    protected static string GetNameWithoutGenericPart(Type type);
}
public class Ninject.Extensions.Conventions.BindingGenerators.AllBaseClassesBindingGenerator : object {
    public sealed virtual IEnumerable`1<IBindingWhenInNamedWithOrOnSyntax`1<object>> CreateBindings(Type type, IBindingRoot bindingRoot);
    private static bool ShouldBeBound(Type type);
    private IEnumerable`1<IBindingWhenInNamedWithOrOnSyntax`1<object>> RecursivelyBindToBaseTypes(Type type, IBindingRoot bindingRoot);
}
public class Ninject.Extensions.Conventions.BindingGenerators.AllInterfacesBindingGenerator : AbstractInterfaceBindingGenerator {
    public AllInterfacesBindingGenerator(IBindableTypeSelector bindableTypeSelector, IBindingCreator bindingCreator);
}
public class Ninject.Extensions.Conventions.BindingGenerators.BaseBindingGenerator : object {
    public sealed virtual IEnumerable`1<IBindingWhenInNamedWithOrOnSyntax`1<object>> CreateBindings(Type type, IBindingRoot bindingRoot);
}
public class Ninject.Extensions.Conventions.BindingGenerators.BindableTypeSelector : object {
    public sealed virtual IEnumerable`1<Type> GetBindableInterfaces(Type type);
    public sealed virtual IEnumerable`1<Type> GetBindableBaseTypes(Type type);
    private static IEnumerable`1<Type> GetAllBaseClasses(Type type);
    private static bool IsEqualOpenGeneric(Type i, Type type);
    private static IEnumerable`1<Type> GetMatchingGenericBaseClasses(Type type);
}
public class Ninject.Extensions.Conventions.BindingGenerators.DefaultInterfaceBindingGenerator : AbstractInterfaceBindingGenerator {
    public DefaultInterfaceBindingGenerator(IBindableTypeSelector bindableTypeSelector, IBindingCreator bindingCreator);
    private static bool HaveSameName(Type implementationType, Type interfaceType);
}
public class Ninject.Extensions.Conventions.BindingGenerators.DefaultInterfacesBindingGenerator : AbstractInterfaceBindingGenerator {
    public DefaultInterfacesBindingGenerator(IBindableTypeSelector bindableTypeSelector, IBindingCreator bindingCreator);
    private static bool ImplementationTypeContainsinterfaceName(Type implementationType, Type interfaceType);
}
public class Ninject.Extensions.Conventions.BindingGenerators.FactoryBindingGenerator : object {
    private Func`1<IInstanceProvider> instanceProvider;
    public FactoryBindingGenerator(Func`1<IInstanceProvider> instanceProvider);
    public sealed virtual IEnumerable`1<IBindingWhenInNamedWithOrOnSyntax`1<object>> CreateBindings(Type type, IBindingRoot bindingRoot);
}
public interface Ninject.Extensions.Conventions.BindingGenerators.IBindableTypeSelector {
    public abstract virtual IEnumerable`1<Type> GetBindableInterfaces(Type type);
    public abstract virtual IEnumerable`1<Type> GetBindableBaseTypes(Type type);
}
public interface Ninject.Extensions.Conventions.BindingGenerators.IBindingGenerator {
    public abstract virtual IEnumerable`1<IBindingWhenInNamedWithOrOnSyntax`1<object>> CreateBindings(Type type, IBindingRoot bindingRoot);
}
public class Ninject.Extensions.Conventions.BindingGenerators.SelectorBindingGenerator : object {
    private IBindingCreator bindingCreator;
    private IBindableTypeSelector bindableTypeSelector;
    [CompilerGeneratedAttribute]
private ServiceSelector <Selector>k__BackingField;
    public ServiceSelector Selector { get; private set; }
    public SelectorBindingGenerator(IBindingCreator bindingCreator, ServiceSelector selector, IBindableTypeSelector bindableTypeSelector);
    [CompilerGeneratedAttribute]
public ServiceSelector get_Selector();
    [CompilerGeneratedAttribute]
private void set_Selector(ServiceSelector value);
    public sealed virtual IEnumerable`1<IBindingWhenInNamedWithOrOnSyntax`1<object>> CreateBindings(Type type, IBindingRoot bindingRoot);
}
public class Ninject.Extensions.Conventions.BindingGenerators.SelfBindingGenerator : object {
    public sealed virtual IEnumerable`1<IBindingWhenInNamedWithOrOnSyntax`1<object>> CreateBindings(Type type, IBindingRoot bindingRoot);
}
public class Ninject.Extensions.Conventions.BindingGenerators.SingleInterfaceBindingGenerator : object {
    private IBindableTypeSelector bindableTypeSelector;
    public SingleInterfaceBindingGenerator(IBindableTypeSelector bindableTypeSelector);
    public sealed virtual IEnumerable`1<IBindingWhenInNamedWithOrOnSyntax`1<object>> CreateBindings(Type type, IBindingRoot bindingRoot);
}
[ExtensionAttribute]
internal static class Ninject.Extensions.Conventions.Extensions.ExtensionsForAssembly : object {
    [ExtensionAttribute]
public static IEnumerable`1<Type> GetExportedTypesPlatformSafe(Assembly assembly);
}
[ExtensionAttribute]
public static class Ninject.Extensions.Conventions.ExtensionsForIKernel : object {
    [ExtensionAttribute]
public static void Bind(IBindingRoot kernel, Action`1<IFromSyntax> configure);
}
public class Ninject.Extensions.Conventions.Syntax.ConfigurationAction : MulticastDelegate {
    public ConfigurationAction(object object, IntPtr method);
    public virtual void Invoke(IBindingWhenInNamedWithOrOnSyntax`1<object> syntax);
    public virtual IAsyncResult BeginInvoke(IBindingWhenInNamedWithOrOnSyntax`1<object> syntax, AsyncCallback callback, object object);
    public virtual void EndInvoke(IAsyncResult result);
}
public class Ninject.Extensions.Conventions.Syntax.ConfigurationActionWithService : MulticastDelegate {
    public ConfigurationActionWithService(object object, IntPtr method);
    public virtual void Invoke(IBindingWhenInNamedWithOrOnSyntax`1<object> syntax, Type serviceType);
    public virtual IAsyncResult BeginInvoke(IBindingWhenInNamedWithOrOnSyntax`1<object> syntax, Type serviceType, AsyncCallback callback, object object);
    public virtual void EndInvoke(IAsyncResult result);
}
public interface Ninject.Extensions.Conventions.Syntax.IBindSyntax {
    public abstract virtual IConfigureSyntax BindWith();
    public abstract virtual IConfigureSyntax BindWith(IBindingGenerator generator);
    public abstract virtual IConfigureSyntax BindAllInterfaces();
    public abstract virtual IConfigureSyntax BindAllBaseClasses();
    public abstract virtual IConfigureSyntax BindBase();
    public abstract virtual IConfigureSyntax BindDefaultInterface();
    public abstract virtual IConfigureSyntax BindDefaultInterfaces();
    public abstract virtual IConfigureSyntax BindSingleInterface();
    public abstract virtual IConfigureSyntax BindToSelf();
    public abstract virtual IConfigureSyntax BindSelection(ServiceSelector selector);
    public abstract virtual IConfigureSyntax BindUsingRegex(string pattern);
    public abstract virtual IConfigureSyntax BindUsingRegex(string pattern, RegexOptions options);
    public abstract virtual IConfigureSyntax BindToFactory();
    public abstract virtual IConfigureSyntax BindToFactory(Func`1<IInstanceProvider> instanceProvider);
}
public interface Ninject.Extensions.Conventions.Syntax.IConfigureForSyntax {
    public abstract virtual IConfigureForSyntax ConfigureFor(ConfigurationAction configuration);
    public abstract virtual IConfigureForSyntax ConfigureFor(ConfigurationActionWithService configuration);
}
public interface Ninject.Extensions.Conventions.Syntax.IConfigureSyntax {
    public abstract virtual IConfigureForSyntax Configure(ConfigurationAction configuration);
    public abstract virtual IConfigureForSyntax Configure(ConfigurationActionWithService configuration);
}
public interface Ninject.Extensions.Conventions.Syntax.IExcludeIncludeBindSyntax {
}
public interface Ninject.Extensions.Conventions.Syntax.IExcludeSyntax {
    public abstract virtual IExcludeIncludeBindSyntax Excluding();
    public abstract virtual IExcludeIncludeBindSyntax Excluding(Type[] types);
    public abstract virtual IExcludeIncludeBindSyntax Excluding(IEnumerable`1<Type> types);
}
public interface Ninject.Extensions.Conventions.Syntax.IFilterSyntax {
    public abstract virtual IJoinFilterWhereExcludeIncludeBindSyntax InNamespaces(IEnumerable`1<string> namespaces);
    public abstract virtual IJoinFilterWhereExcludeIncludeBindSyntax InNamespaces(String[] namespaces);
    public abstract virtual IJoinFilterWhereExcludeIncludeBindSyntax InNamespaceOf();
    public abstract virtual IJoinFilterWhereExcludeIncludeBindSyntax InNamespaceOf(Type[] types);
    public abstract virtual IJoinFilterWhereExcludeIncludeBindSyntax NotInNamespaces(IEnumerable`1<string> namespaces);
    public abstract virtual IJoinFilterWhereExcludeIncludeBindSyntax NotInNamespaces(String[] namespaces);
    public abstract virtual IJoinFilterWhereExcludeIncludeBindSyntax NotInNamespaceOf();
    public abstract virtual IJoinFilterWhereExcludeIncludeBindSyntax NotInNamespaceOf(Type[] types);
    public abstract virtual IJoinFilterWhereExcludeIncludeBindSyntax InheritedFromAny(IEnumerable`1<Type> types);
    public abstract virtual IJoinFilterWhereExcludeIncludeBindSyntax InheritedFromAny(Type[] types);
    public abstract virtual IJoinFilterWhereExcludeIncludeBindSyntax InheritedFrom(Type type);
    public abstract virtual IJoinFilterWhereExcludeIncludeBindSyntax InheritedFrom();
    public abstract virtual IJoinFilterWhereExcludeIncludeBindSyntax WithAttribute();
    public abstract virtual IJoinFilterWhereExcludeIncludeBindSyntax WithAttribute(Func`2<T, bool> predicate);
    public abstract virtual IJoinFilterWhereExcludeIncludeBindSyntax WithAttribute(Type attributeType);
    public abstract virtual IJoinFilterWhereExcludeIncludeBindSyntax WithoutAttribute();
    public abstract virtual IJoinFilterWhereExcludeIncludeBindSyntax WithoutAttribute(Func`2<T, bool> predicate);
    public abstract virtual IJoinFilterWhereExcludeIncludeBindSyntax WithoutAttribute(Type attributeType);
    public abstract virtual IJoinFilterWhereExcludeIncludeBindSyntax WhichAreGeneric();
    public abstract virtual IJoinFilterWhereExcludeIncludeBindSyntax WhichAreNotGeneric();
    public abstract virtual IJoinFilterWhereExcludeIncludeBindSyntax EndingWith(string postfix);
    public abstract virtual IJoinFilterWhereExcludeIncludeBindSyntax StartingWith(string prefix);
}
public interface Ninject.Extensions.Conventions.Syntax.IFromSyntax {
    public abstract virtual IIncludingNonPublicTypesSelectSyntax From(Assembly[] assemblies);
    public abstract virtual IIncludingNonPublicTypesSelectSyntax From(IEnumerable`1<Assembly> assemblies);
    public abstract virtual IIncludingNonPublicTypesSelectSyntax FromThisAssembly();
    public abstract virtual IIncludingNonPublicTypesSelectSyntax FromAssemblyContaining();
    public abstract virtual IIncludingNonPublicTypesSelectSyntax FromAssemblyContaining(Type[] types);
    public abstract virtual IIncludingNonPublicTypesSelectSyntax FromAssemblyContaining(IEnumerable`1<Type> types);
    public abstract virtual IIncludingNonPublicTypesSelectSyntax From(String[] assemblies);
    public abstract virtual IIncludingNonPublicTypesSelectSyntax From(IEnumerable`1<string> assemblies);
    public abstract virtual IIncludingNonPublicTypesSelectSyntax From(IEnumerable`1<string> assemblies, Predicate`1<Assembly> filter);
    public abstract virtual IIncludingNonPublicTypesSelectSyntax FromAssembliesInPath(string path);
    public abstract virtual IIncludingNonPublicTypesSelectSyntax FromAssembliesInPath(string path, Predicate`1<Assembly> filter);
    public abstract virtual IIncludingNonPublicTypesSelectSyntax FromAssembliesMatching(String[] patterns);
    public abstract virtual IIncludingNonPublicTypesSelectSyntax FromAssembliesMatching(IEnumerable`1<string> patterns);
    public abstract virtual IIncludingNonPublicTypesSelectSyntax FromAssembliesMatching(IEnumerable`1<string> patterns, Predicate`1<Assembly> filter);
}
public interface Ninject.Extensions.Conventions.Syntax.IIncludeSyntax {
    public abstract virtual IExcludeIncludeBindSyntax Including();
    public abstract virtual IExcludeIncludeBindSyntax Including(Type[] types);
    public abstract virtual IExcludeIncludeBindSyntax Including(IEnumerable`1<Type> types);
}
public interface Ninject.Extensions.Conventions.Syntax.IIncludingNonPublicTypesSelectSyntax {
}
public interface Ninject.Extensions.Conventions.Syntax.IIncludingNonPublicTypesSyntax {
    public abstract virtual ISelectSyntax IncludingNonPublicTypes();
}
public interface Ninject.Extensions.Conventions.Syntax.IJoinExcludeIncludeBindSyntax {
}
public interface Ninject.Extensions.Conventions.Syntax.IJoinFilterWhereExcludeIncludeBindSyntax {
}
public interface Ninject.Extensions.Conventions.Syntax.IJoinSyntax {
    public IFromSyntax Join { get; }
    public abstract virtual IFromSyntax get_Join();
}
public interface Ninject.Extensions.Conventions.Syntax.IJoinWhereExcludeIncludeBindSyntax {
}
public interface Ninject.Extensions.Conventions.Syntax.ISelectSyntax {
    public abstract virtual IJoinExcludeIncludeBindSyntax Select(Func`2<Type, bool> filter);
    public abstract virtual IJoinFilterWhereExcludeIncludeBindSyntax SelectAllTypes();
    public abstract virtual IJoinFilterWhereExcludeIncludeBindSyntax SelectAllClasses();
    public abstract virtual IJoinFilterWhereExcludeIncludeBindSyntax SelectAllIncludingAbstractClasses();
    public abstract virtual IJoinFilterWhereExcludeIncludeBindSyntax SelectAllAbstractClasses();
    public abstract virtual IJoinFilterWhereExcludeIncludeBindSyntax SelectAllInterfaces();
}
public interface Ninject.Extensions.Conventions.Syntax.IWhereSyntax {
    public abstract virtual IJoinExcludeIncludeBindSyntax Where(Func`2<Type, bool> filter);
}
public class Ninject.Extensions.Conventions.Syntax.ServiceSelector : MulticastDelegate {
    public ServiceSelector(object object, IntPtr method);
    public virtual IEnumerable`1<Type> Invoke(Type type, IEnumerable`1<Type> baseTypes);
    public virtual IAsyncResult BeginInvoke(Type type, IEnumerable`1<Type> baseTypes, AsyncCallback callback, object object);
    public virtual IEnumerable`1<Type> EndInvoke(IAsyncResult result);
}
