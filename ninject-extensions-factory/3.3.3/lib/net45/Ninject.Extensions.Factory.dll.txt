public class Ninject.Extensions.Factory.ArgumentPositionCalculator : object {
    public sealed virtual int GetPositionOfFuncConstructorArgument(FuncConstructorArgument argument, IContext context, ITarget target);
    public sealed virtual int GetTargetPosition(IContext context, ITarget target);
    private static bool CheckOtherConstructorArgumentApplies(IContext context, ParameterTarget target);
}
[ExtensionAttribute]
public static class Ninject.Extensions.Factory.BindToExtensions : object {
    private static ProxyGenerator Generator;
    private static BindToExtensions();
    [ExtensionAttribute]
public static IBindingWhenInNamedWithOrOnSyntax`1<TInterface> ToFactory(IBindingToSyntax`1<TInterface> syntax);
    [ExtensionAttribute]
public static IBindingWhenInNamedWithOrOnSyntax`1<object> ToFactory(IBindingToSyntax`1<object> syntax, Type factoryType);
    [ExtensionAttribute]
public static IBindingWhenInNamedWithOrOnSyntax`1<TInterface> ToFactory(IBindingToSyntax`1<TInterface> syntax, Func`1<IInstanceProvider> instanceProvider);
    [ExtensionAttribute]
public static IBindingWhenInNamedWithOrOnSyntax`1<object> ToFactory(IBindingToSyntax`1<object> syntax, Func`1<IInstanceProvider> instanceProvider, Type factoryType);
    [ExtensionAttribute]
public static IBindingWithOrOnSyntax`1<TInterface> NamedLikeFactoryMethod(IBindingNamedSyntax`1<TInterface> syntax, Expression`1<Action`1<TFactory>> action);
    [ExtensionAttribute]
public static IBindingInNamedWithOrOnSyntax`1<TInterface> WhenAnyAncestorNamedLikeFactoryMethod(IBindingWhenInNamedWithOrOnSyntax`1<TInterface> syntax, Expression`1<Action`1<TFactory>> action);
    private static IBindingWhenInNamedWithOrOnSyntax`1<TInterface> ToFactory(IBindingToSyntax`1<TInterface> syntax, Func`2<IContext, IInstanceProvider> instanceProvider, Type factoryType);
}
[ExtensionAttribute]
public static class Ninject.Extensions.Factory.ConstructorInfoExtensions : object {
    [ExtensionAttribute]
public static IEnumerable`1<ParameterInfo> GetParametersOfType(ConstructorInfo constructorInfo, Type parameterType);
}
public interface Ninject.Extensions.Factory.Factory.IInstanceResolver {
    public abstract virtual object Get(Type type, string name, Func`2<IBindingMetadata, bool> constraint, IParameter[] parameters, bool fallback);
    public abstract virtual object GetAllAsList(Type type, string name, Func`2<IBindingMetadata, bool> constraint, IParameter[] parameters, bool fallback);
    public abstract virtual object GetAllAsArray(Type type, string name, Func`2<IBindingMetadata, bool> constraint, IParameter[] parameters, bool fallback);
}
public class Ninject.Extensions.Factory.Factory.InstanceResolver : object {
    private IResolutionRoot resolutionRoot;
    public InstanceResolver(IResolutionRoot resolutionRoot);
    public sealed virtual object Get(Type type, string name, Func`2<IBindingMetadata, bool> constraint, IParameter[] parameters, bool fallback);
    public sealed virtual object GetAllAsList(Type type, string name, Func`2<IBindingMetadata, bool> constraint, IParameter[] parameters, bool fallback);
    public sealed virtual object GetAllAsArray(Type type, string name, Func`2<IBindingMetadata, bool> constraint, IParameter[] parameters, bool fallback);
    private IEnumerable`1<object> GetAll(Type type, string name, Func`2<IBindingMetadata, bool> constraint, IParameter[] parameters, bool fallback);
}
public class Ninject.Extensions.Factory.FactoryInterceptor : InstanceResolver {
    private IInstanceProvider instanceProvider;
    public FactoryInterceptor(IResolutionRoot resolutionRoot, IInstanceProvider instanceProvider);
    public sealed virtual void Intercept(IInvocation invocation);
}
public class Ninject.Extensions.Factory.FuncConstructorArgument : object {
    private object value;
    private IArgumentPositionCalculator argumentPositionCalculator;
    [CompilerGeneratedAttribute]
private Type <ArgumentType>k__BackingField;
    public Type ArgumentType { get; private set; }
    public string Name { get; }
    public bool ShouldInherit { get; }
    public FuncConstructorArgument(Type argumentType, object value, IArgumentPositionCalculator argumentPositionCalculator);
    [CompilerGeneratedAttribute]
public Type get_ArgumentType();
    [CompilerGeneratedAttribute]
private void set_ArgumentType(Type value);
    public sealed virtual string get_Name();
    public sealed virtual bool get_ShouldInherit();
    public sealed virtual bool Equals(IParameter other);
    public sealed virtual object GetValue(IContext context, ITarget target);
    public sealed virtual bool AppliesToTarget(IContext context, ITarget target);
}
public static class Ninject.Extensions.Factory.FuncConstructorArgumentFactory : object {
    public static FuncConstructorArgument CreateFuncConstructorArgument(Type typeArgument, object value);
}
public class Ninject.Extensions.Factory.FuncModule : NinjectModule {
    public virtual void Load();
}
public class Ninject.Extensions.Factory.FuncProvider : object {
    private IFunctionFactory functionFactory;
    private Func`2<IContext, IResolutionRoot> resolutionRootRetriever;
    public Type Type { get; }
    public FuncProvider(IFunctionFactory functionFactory, Func`2<IContext, IResolutionRoot> resolutionRootRetriever);
    public sealed virtual Type get_Type();
    public sealed virtual object Create(IContext context);
}
public class Ninject.Extensions.Factory.FunctionFactory : object {
    private MethodInfo[] methodInfos;
    public sealed virtual MethodInfo GetMethodInfo(int genericArgumentCount);
    public sealed virtual Func`1<TService> Create(IResolutionRoot resolutionRoot);
    public sealed virtual Func`2<TArg1, TService> Create(IResolutionRoot resolutionRoot);
    public sealed virtual Func`3<TArg1, TArg2, TService> Create(IResolutionRoot resolutionRoot);
    public sealed virtual Func`4<TArg1, TArg2, TArg3, TService> Create(IResolutionRoot resolutionRoot);
    public sealed virtual Func`5<TArg1, TArg2, TArg3, TArg4, TService> Create(IResolutionRoot resolutionRoot);
    public sealed virtual Func`6<TArg1, TArg2, TArg3, TArg4, TArg5, TService> Create(IResolutionRoot resolutionRoot);
    public sealed virtual Func`7<TArg1, TArg2, TArg3, TArg4, TArg5, TArg6, TService> Create(IResolutionRoot resolutionRoot);
    public sealed virtual Func`8<TArg1, TArg2, TArg3, TArg4, TArg5, TArg6, TArg7, TService> Create(IResolutionRoot resolutionRoot);
    public sealed virtual Func`9<TArg1, TArg2, TArg3, TArg4, TArg5, TArg6, TArg7, TArg8, TService> Create(IResolutionRoot resolutionRoot);
    public sealed virtual Func`10<TArg1, TArg2, TArg3, TArg4, TArg5, TArg6, TArg7, TArg8, TArg9, TService> Create(IResolutionRoot resolutionRoot);
    public sealed virtual Func`11<TArg1, TArg2, TArg3, TArg4, TArg5, TArg6, TArg7, TArg8, TArg9, TArg10, TService> Create(IResolutionRoot resolutionRoot);
    public sealed virtual Func`12<TArg1, TArg2, TArg3, TArg4, TArg5, TArg6, TArg7, TArg8, TArg9, TArg10, TArg11, TService> Create(IResolutionRoot resolutionRoot);
    public sealed virtual Func`13<TArg1, TArg2, TArg3, TArg4, TArg5, TArg6, TArg7, TArg8, TArg9, TArg10, TArg11, TArg12, TService> Create(IResolutionRoot resolutionRoot);
    public sealed virtual Func`14<TArg1, TArg2, TArg3, TArg4, TArg5, TArg6, TArg7, TArg8, TArg9, TArg10, TArg11, TArg12, TArg13, TService> Create(IResolutionRoot resolutionRoot);
    public sealed virtual Func`15<TArg1, TArg2, TArg3, TArg4, TArg5, TArg6, TArg7, TArg8, TArg9, TArg10, TArg11, TArg12, TArg13, TArg14, TService> Create(IResolutionRoot resolutionRoot);
    public sealed virtual Func`16<TArg1, TArg2, TArg3, TArg4, TArg5, TArg6, TArg7, TArg8, TArg9, TArg10, TArg11, TArg12, TArg13, TArg14, TArg15, TService> Create(IResolutionRoot resolutionRoot);
    public sealed virtual Func`17<TArg1, TArg2, TArg3, TArg4, TArg5, TArg6, TArg7, TArg8, TArg9, TArg10, TArg11, TArg12, TArg13, TArg14, TArg15, TArg16, TService> Create(IResolutionRoot resolutionRoot);
    private static TService Get(IResolutionRoot resolutionRoot, Func`2<IEnumerable`1<object>, TService> convertFunction, Type type, IParameter[] parameters);
    private static Func`2<IEnumerable`1<object>, TService> GetConvertionFunction(Type& instanceType);
}
public interface Ninject.Extensions.Factory.IArgumentPositionCalculator {
    public abstract virtual int GetPositionOfFuncConstructorArgument(FuncConstructorArgument argument, IContext context, ITarget target);
    public abstract virtual int GetTargetPosition(IContext context, ITarget target);
}
public interface Ninject.Extensions.Factory.IFactoryProxy {
}
public interface Ninject.Extensions.Factory.IFunctionFactory {
    public abstract virtual MethodInfo GetMethodInfo(int genericArgumentCount);
    public abstract virtual Func`1<TService> Create(IResolutionRoot resolutionRoot);
    public abstract virtual Func`2<TArg1, TService> Create(IResolutionRoot resolutionRoot);
    public abstract virtual Func`3<TArg1, TArg2, TService> Create(IResolutionRoot resolutionRoot);
    public abstract virtual Func`4<TArg1, TArg2, TArg3, TService> Create(IResolutionRoot resolutionRoot);
    public abstract virtual Func`5<TArg1, TArg2, TArg3, TArg4, TService> Create(IResolutionRoot resolutionRoot);
    public abstract virtual Func`6<TArg1, TArg2, TArg3, TArg4, TArg5, TService> Create(IResolutionRoot resolutionRoot);
    public abstract virtual Func`7<TArg1, TArg2, TArg3, TArg4, TArg5, TArg6, TService> Create(IResolutionRoot resolutionRoot);
    public abstract virtual Func`8<TArg1, TArg2, TArg3, TArg4, TArg5, TArg6, TArg7, TService> Create(IResolutionRoot resolutionRoot);
    public abstract virtual Func`9<TArg1, TArg2, TArg3, TArg4, TArg5, TArg6, TArg7, TArg8, TService> Create(IResolutionRoot resolutionRoot);
    public abstract virtual Func`10<TArg1, TArg2, TArg3, TArg4, TArg5, TArg6, TArg7, TArg8, TArg9, TService> Create(IResolutionRoot resolutionRoot);
    public abstract virtual Func`11<TArg1, TArg2, TArg3, TArg4, TArg5, TArg6, TArg7, TArg8, TArg9, TArg10, TService> Create(IResolutionRoot resolutionRoot);
    public abstract virtual Func`12<TArg1, TArg2, TArg3, TArg4, TArg5, TArg6, TArg7, TArg8, TArg9, TArg10, TArg11, TService> Create(IResolutionRoot resolutionRoot);
    public abstract virtual Func`13<TArg1, TArg2, TArg3, TArg4, TArg5, TArg6, TArg7, TArg8, TArg9, TArg10, TArg11, TArg12, TService> Create(IResolutionRoot resolutionRoot);
    public abstract virtual Func`14<TArg1, TArg2, TArg3, TArg4, TArg5, TArg6, TArg7, TArg8, TArg9, TArg10, TArg11, TArg12, TArg13, TService> Create(IResolutionRoot resolutionRoot);
    public abstract virtual Func`15<TArg1, TArg2, TArg3, TArg4, TArg5, TArg6, TArg7, TArg8, TArg9, TArg10, TArg11, TArg12, TArg13, TArg14, TService> Create(IResolutionRoot resolutionRoot);
    public abstract virtual Func`16<TArg1, TArg2, TArg3, TArg4, TArg5, TArg6, TArg7, TArg8, TArg9, TArg10, TArg11, TArg12, TArg13, TArg14, TArg15, TService> Create(IResolutionRoot resolutionRoot);
    public abstract virtual Func`17<TArg1, TArg2, TArg3, TArg4, TArg5, TArg6, TArg7, TArg8, TArg9, TArg10, TArg11, TArg12, TArg13, TArg14, TArg15, TArg16, TService> Create(IResolutionRoot resolutionRoot);
}
public interface Ninject.Extensions.Factory.IInstanceProvider {
    public abstract virtual object GetInstance(IInstanceResolver instanceResolver, MethodInfo methodInfo, Object[] arguments);
}
public class Ninject.Extensions.Factory.LazyConstructorScorer : StandardConstructorScorer {
    public virtual int Score(IContext context, ConstructorInjectionDirective directive);
}
public class Ninject.Extensions.Factory.ProxyTargetParameter : Parameter {
    public sealed virtual bool AppliesToTarget(IContext context, ITarget target);
}
public class Ninject.Extensions.Factory.StandardInstanceProvider : object {
    [CompilerGeneratedAttribute]
private bool <Fallback>k__BackingField;
    public bool Fallback { get; public set; }
    [CompilerGeneratedAttribute]
public bool get_Fallback();
    [CompilerGeneratedAttribute]
public void set_Fallback(bool value);
    public virtual object GetInstance(IInstanceResolver instanceResolver, MethodInfo methodInfo, Object[] arguments);
    protected virtual Func`2<IBindingMetadata, bool> GetConstraint(MethodInfo methodInfo, Object[] arguments);
    protected virtual Type GetType(MethodInfo methodInfo, Object[] arguments);
    protected virtual string GetName(MethodInfo methodInfo, Object[] arguments);
    protected virtual IConstructorArgument[] GetConstructorArguments(MethodInfo methodInfo, Object[] arguments);
}
public class Ninject.Extensions.Factory.TypeMatchingArgumentInheritanceInstanceProvider : StandardInstanceProvider {
    protected virtual IConstructorArgument[] GetConstructorArguments(MethodInfo methodInfo, Object[] arguments);
}
