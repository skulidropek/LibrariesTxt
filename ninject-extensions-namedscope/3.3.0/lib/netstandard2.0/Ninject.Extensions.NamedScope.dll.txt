public class Ninject.Extensions.NamedScope.DisposeNotifyingObject : DisposableObject {
}
public static class Ninject.Extensions.NamedScope.ExceptionFormatter : object {
    public static string CouldNotFindScope(IRequest request, string scopeName);
}
public class Ninject.Extensions.NamedScope.NamedScope : DisposableObject {
    private IResolutionRoot resolutionRoot;
    public NamedScope(IResolutionRoot resolutionRoot);
    public sealed virtual bool CanResolve(IRequest request);
    public sealed virtual bool CanResolve(IRequest request, bool ignoreImplicitBindings);
    public sealed virtual IEnumerable`1<object> Resolve(IRequest request);
    public sealed virtual IRequest CreateRequest(Type service, Func`2<IBindingMetadata, bool> constraint, IEnumerable`1<IParameter> parameters, bool isOptional, bool isUnique);
    public sealed virtual void Inject(object instance, IParameter[] parameters);
    public sealed virtual bool Release(object instance);
    private sealed virtual override Type Ninject.Syntax.IFluentSyntax.GetType();
}
public class Ninject.Extensions.NamedScope.NamedScopeActivationStrategy : ActivationStrategy {
    public virtual void Activate(IContext context, InstanceReference reference);
}
[ExtensionAttribute]
public static class Ninject.Extensions.NamedScope.NamedScopeExtensionMethods : object {
    [ExtensionAttribute]
public static IBindingNamedWithOrOnSyntax`1<T> InNamedScope(IBindingInSyntax`1<T> syntax, string scopeParameterName);
    [ExtensionAttribute]
public static IBindingNamedWithOrOnSyntax`1<T> InParentScope(IBindingInSyntax`1<T> syntax);
    [ExtensionAttribute]
public static IBindingNamedWithOrOnSyntax`1<T> InCallScope(IBindingInSyntax`1<T> syntax);
    [ExtensionAttribute]
public static void DefinesNamedScope(IBindingOnSyntax`1<T> syntax, string scopeName);
    [ExtensionAttribute]
public static object GetNamedScope(IContext context, string scopeParameterName);
    [ExtensionAttribute]
public static object TryGetNamedScope(IContext context, string scopeParameterName);
    [ExtensionAttribute]
public static NamedScope CreateNamedScope(IResolutionRoot resolutionRoot, string scopeName);
    private static bool IsCurrentResolveRoot(IContext context);
    private static NamedScopeParameter GetNamedScopeParameter(IContext context, string scopeParameterName);
    private static object GetOrAddScope(IContext parentContext, string scopeParameterName);
}
public class Ninject.Extensions.NamedScope.NamedScopeModule : NinjectModule {
    public virtual void Load();
    private static object GetNamedScope(IContext context);
}
public class Ninject.Extensions.NamedScope.NamedScopeParameter : Parameter {
    [CompilerGeneratedAttribute]
private IDisposableObject <Scope>k__BackingField;
    public IDisposableObject Scope { get; private set; }
    public NamedScopeParameter(string name);
    [CompilerGeneratedAttribute]
public IDisposableObject get_Scope();
    [CompilerGeneratedAttribute]
private void set_Scope(IDisposableObject value);
}
public class Ninject.Extensions.NamedScope.NamedScopeReference : DisposableObject {
    private IDisposable scope;
    public NamedScopeReference(IDisposable scope);
    public virtual void Dispose(bool disposing);
}
public class Ninject.Extensions.NamedScope.NamedScopeReferenceScopeParameter : Parameter {
    private WeakReference scope;
    public object Scope { get; }
    public NamedScopeReferenceScopeParameter(object scope);
    public object get_Scope();
}
public class Ninject.Extensions.NamedScope.ScopeDisposedException : Exception {
    public ScopeDisposedException(string message);
    public ScopeDisposedException(string message, Exception innerException);
}
public class Ninject.Extensions.NamedScope.UnknownScopeException : Exception {
    public UnknownScopeException(string message);
    public UnknownScopeException(string message, Exception innerException);
}
