public class Ninject.Web.Mvc.Filter.FilterContextParameter : Parameter {
    public static string ParameterName;
    [CompilerGeneratedAttribute]
private int <AttributePosition>k__BackingField;
    [CompilerGeneratedAttribute]
private ControllerContext <ControllerContext>k__BackingField;
    [CompilerGeneratedAttribute]
private ActionDescriptor <ActionDescriptor>k__BackingField;
    public int AttributePosition { get; public set; }
    public ControllerContext ControllerContext { get; private set; }
    public ActionDescriptor ActionDescriptor { get; private set; }
    public FilterContextParameter(ControllerContext controllerContext, ActionDescriptor actionDescriptor);
    [CompilerGeneratedAttribute]
public int get_AttributePosition();
    [CompilerGeneratedAttribute]
public void set_AttributePosition(int value);
    [CompilerGeneratedAttribute]
public ControllerContext get_ControllerContext();
    [CompilerGeneratedAttribute]
private void set_ControllerContext(ControllerContext value);
    [CompilerGeneratedAttribute]
public ActionDescriptor get_ActionDescriptor();
    [CompilerGeneratedAttribute]
private void set_ActionDescriptor(ActionDescriptor value);
}
public interface Ninject.Web.Mvc.Filter.INinjectFilter {
    public abstract virtual IEnumerable`1<Filter> BuildFilters(FilterContextParameter parameter);
}
public class Ninject.Web.Mvc.Filter.NinjectFilter`1 : object {
    private IKernel kernel;
    private FilterScope scope;
    private Nullable`1<int> order;
    private Guid filterId;
    [CompilerGeneratedAttribute]
private int <NumberOfFilters>k__BackingField;
    public int NumberOfFilters { get; public set; }
    public NinjectFilter`1(IKernel kernel, FilterScope scope, Nullable`1<int> order, Guid filterId);
    [CompilerGeneratedAttribute]
public int get_NumberOfFilters();
    [CompilerGeneratedAttribute]
public void set_NumberOfFilters(int value);
    [IteratorStateMachineAttribute("Ninject.Web.Mvc.Filter.NinjectFilter`1/<BuildFilters>d__9")]
public sealed virtual IEnumerable`1<Filter> BuildFilters(FilterContextParameter parameter);
    [CompilerGeneratedAttribute]
private bool <BuildFilters>b__9_0(IBindingMetadata m);
}
public class Ninject.Web.Mvc.Filter.NinjectFilterAttributeFilterProvider : FilterAttributeFilterProvider {
    private IKernel kernel;
    public NinjectFilterAttributeFilterProvider(IKernel kernel);
    protected virtual IEnumerable`1<FilterAttribute> GetControllerAttributes(ControllerContext controllerContext, ActionDescriptor actionDescriptor);
    protected virtual IEnumerable`1<FilterAttribute> GetActionAttributes(ControllerContext controllerContext, ActionDescriptor actionDescriptor);
}
public class Ninject.Web.Mvc.Filter.NinjectFilterProvider : object {
    private IKernel kernel;
    public NinjectFilterProvider(IKernel kernel);
    public sealed virtual IEnumerable`1<Filter> GetFilters(ControllerContext controllerContext, ActionDescriptor actionDescriptor);
}
public class Ninject.Web.Mvc.FilterBindingSyntax.AttributeValueSelector`1 : object {
    private TAttribute attribute;
    public AttributeValueSelector`1(TAttribute attribute);
    public T GetValue(Func`2<TAttribute, T> valueSelector);
}
[ExtensionAttribute]
public static class Ninject.Web.Mvc.FilterBindingSyntax.BindingRootExtensions : object {
    public static string FilterIdMetadataKey;
    [ExtensionAttribute]
public static IFilterBindingWhenInNamedWithOrOnSyntax`1<T> BindFilter(IBindingRoot kernel, FilterScope scope, Nullable`1<int> order);
    [ExtensionAttribute]
public static IFilterBindingWhenInNamedWithOrOnSyntax`1<T> BindFilter(IBindingRoot kernel, Expression`1<Func`2<IConstructorArgumentSyntax, T>> newExpression, FilterScope scope, Nullable`1<int> order);
}
public class Ninject.Web.Mvc.FilterBindingSyntax.FilterFilterBindingBuilder`1 : object {
    private IBindingWhenInNamedWithOrOnSyntax`1<NinjectFilter`1<T>> ninjectFilterBindingSyntax;
    private IBindingWhenInNamedWithOrOnSyntax`1<T> filterBindingSyntax;
    public IBindingConfiguration BindingConfiguration { get; }
    public IKernel Kernel { get; }
    public FilterFilterBindingBuilder`1(IBindingWhenInNamedWithOrOnSyntax`1<NinjectFilter`1<T>> ninjectFilterBindingSyntax, IBindingWhenInNamedWithOrOnSyntax`1<T> filterBindingSyntax);
    public sealed virtual IBindingConfiguration get_BindingConfiguration();
    public sealed virtual IKernel get_Kernel();
    public sealed virtual IFilterBindingWithOrOnSyntax`1<T> Named(string name);
    public sealed virtual IFilterBindingInNamedWithOrOnSyntax`1<T> When(Func`2<IRequest, bool> condition);
    public sealed virtual IFilterBindingInNamedWithOrOnSyntax`1<T> When(Func`3<ControllerContext, ActionDescriptor, bool> condition);
    public sealed virtual IFilterBindingInNamedWithOrOnSyntax`1<T> WhenActionMethodHas(Type attributeType);
    public sealed virtual IFilterBindingInNamedWithOrOnSyntax`1<T> WhenActionMethodHas();
    public sealed virtual IFilterBindingInNamedWithOrOnSyntax`1<T> WhenActionMethodHasNo(Type attributeType);
    public sealed virtual IFilterBindingInNamedWithOrOnSyntax`1<T> WhenActionMethodHasNo();
    public sealed virtual IFilterBindingInNamedWithOrOnSyntax`1<T> WhenControllerHas(Type attributeType);
    public sealed virtual IFilterBindingInNamedWithOrOnSyntax`1<T> WhenControllerHas();
    public sealed virtual IFilterBindingInNamedWithOrOnSyntax`1<T> WhenControllerHasNo(Type attributeType);
    public sealed virtual IFilterBindingInNamedWithOrOnSyntax`1<T> WhenControllerHasNo();
    public sealed virtual IFilterBindingInNamedWithOrOnSyntax`1<T> WhenControllerType(Type controllerType);
    public sealed virtual IFilterBindingInNamedWithOrOnSyntax`1<T> WhenControllerType();
    public sealed virtual IFilterBindingNamedWithOrOnSyntax`1<T> InSingletonScope();
    public sealed virtual IFilterBindingNamedWithOrOnSyntax`1<T> InTransientScope();
    public sealed virtual IFilterBindingNamedWithOrOnSyntax`1<T> InThreadScope();
    public sealed virtual IFilterBindingNamedWithOrOnSyntax`1<T> InRequestScope();
    public sealed virtual IFilterBindingNamedWithOrOnSyntax`1<T> InScope(Func`2<IContext, object> scope);
    public sealed virtual IFilterBindingNamedWithOrOnSyntax`1<T> InScope(Func`4<IContext, ControllerContext, ActionDescriptor, object> scope);
    public sealed virtual IFilterBindingWithOrOnSyntax`1<T> WithConstructorArgument(string name, object value);
    public sealed virtual IFilterBindingWithOrOnSyntax`1<T> WithConstructorArgument(string name, Func`2<IContext, object> callback);
    public sealed virtual IFilterBindingWithOrOnSyntax`1<T> WithPropertyValue(string name, object value);
    public sealed virtual IFilterBindingWithOrOnSyntax`1<T> WithPropertyValue(string name, Func`2<IContext, object> callback);
    public sealed virtual IFilterBindingWithOrOnSyntax`1<T> WithParameter(IParameter parameter);
    public sealed virtual IFilterBindingWithOrOnSyntax`1<T> WithMetadata(string key, object value);
    public sealed virtual IFilterBindingWithOrOnSyntax`1<T> WithConstructorArgument(string name, Func`4<IContext, ControllerContext, ActionDescriptor, object> callback);
    public sealed virtual IFilterBindingWithOrOnSyntax`1<T> WithConstructorArgumentFromActionAttribute(string name, Func`2<TAttribute, object> callback);
    public sealed virtual IFilterBindingWithOrOnSyntax`1<T> WithConstructorArgumentFromControllerAttribute(string name, Func`2<TAttribute, object> callback);
    public sealed virtual IFilterBindingWithOrOnSyntax`1<T> WithPropertyValue(string name, Func`4<IContext, ControllerContext, ActionDescriptor, object> callback);
    public sealed virtual IFilterBindingWithOrOnSyntax`1<T> WithPropertyValueFromActionAttribute(string name, Func`2<TAttribute, object> callback);
    public sealed virtual IFilterBindingWithOrOnSyntax`1<T> WithPropertyValueFromControllerAttribute(string name, Func`2<TAttribute, object> callback);
    public sealed virtual IFilterBindingOnSyntax`1<T> OnActivation(Action`1<T> action);
    public sealed virtual IFilterBindingOnSyntax`1<T> OnActivation(Action`2<IContext, T> action);
    public sealed virtual IFilterBindingOnSyntax`1<T> OnDeactivation(Action`2<IContext, T> action);
    public sealed virtual IFilterBindingOnSyntax`1<T> OnDeactivation(Action`1<T> action);
    public sealed virtual IFilterBindingOnSyntax`1<T> OnActivation(Action`4<IContext, ControllerContext, ActionDescriptor, T> action);
    private static FilterContextParameter GetFilterContextParameter(IContext ctx);
    private sealed virtual override Type Ninject.Syntax.IFluentSyntax.GetType();
}
[ExtensionAttribute]
public static class Ninject.Web.Mvc.FilterBindingSyntax.IConstructorArgumentSyntaxExtensions : object {
    [ExtensionAttribute]
public static AttributeValueSelector`1<TAttribute> FromActionAttribute(IConstructorArgumentSyntax syntax);
    [ExtensionAttribute]
public static AttributeValueSelector`1<TAttribute> FromControllerAttribute(IConstructorArgumentSyntax syntax);
}
public interface Ninject.Web.Mvc.FilterBindingSyntax.IFilterBindingInNamedWithOrOnSyntax`1 {
}
public interface Ninject.Web.Mvc.FilterBindingSyntax.IFilterBindingInSyntax`1 {
    public abstract virtual IFilterBindingNamedWithOrOnSyntax`1<T> InSingletonScope();
    public abstract virtual IFilterBindingNamedWithOrOnSyntax`1<T> InTransientScope();
    public abstract virtual IFilterBindingNamedWithOrOnSyntax`1<T> InThreadScope();
    public abstract virtual IFilterBindingNamedWithOrOnSyntax`1<T> InRequestScope();
    public abstract virtual IFilterBindingNamedWithOrOnSyntax`1<T> InScope(Func`2<IContext, object> scope);
    public abstract virtual IFilterBindingNamedWithOrOnSyntax`1<T> InScope(Func`4<IContext, ControllerContext, ActionDescriptor, object> scope);
}
public interface Ninject.Web.Mvc.FilterBindingSyntax.IFilterBindingNamedSyntax`1 {
    public abstract virtual IFilterBindingWithOrOnSyntax`1<T> Named(string name);
}
public interface Ninject.Web.Mvc.FilterBindingSyntax.IFilterBindingNamedWithOrOnSyntax`1 {
}
public interface Ninject.Web.Mvc.FilterBindingSyntax.IFilterBindingOnSyntax`1 {
    public abstract virtual IFilterBindingOnSyntax`1<T> OnActivation(Action`1<T> action);
    public abstract virtual IFilterBindingOnSyntax`1<T> OnActivation(Action`2<IContext, T> action);
    public abstract virtual IFilterBindingOnSyntax`1<T> OnDeactivation(Action`1<T> action);
    public abstract virtual IFilterBindingOnSyntax`1<T> OnDeactivation(Action`2<IContext, T> action);
    public abstract virtual IFilterBindingOnSyntax`1<T> OnActivation(Action`4<IContext, ControllerContext, ActionDescriptor, T> action);
}
public interface Ninject.Web.Mvc.FilterBindingSyntax.IFilterBindingWhenInNamedWithOrOnSyntax`1 {
}
public interface Ninject.Web.Mvc.FilterBindingSyntax.IFilterBindingWhenSyntax`1 {
    public abstract virtual IFilterBindingInNamedWithOrOnSyntax`1<T> When(Func`2<IRequest, bool> condition);
    public abstract virtual IFilterBindingInNamedWithOrOnSyntax`1<T> When(Func`3<ControllerContext, ActionDescriptor, bool> condition);
    public abstract virtual IFilterBindingInNamedWithOrOnSyntax`1<T> WhenActionMethodHas(Type attributeType);
    public abstract virtual IFilterBindingInNamedWithOrOnSyntax`1<T> WhenActionMethodHas();
    public abstract virtual IFilterBindingInNamedWithOrOnSyntax`1<T> WhenActionMethodHasNo(Type attributeType);
    public abstract virtual IFilterBindingInNamedWithOrOnSyntax`1<T> WhenActionMethodHasNo();
    public abstract virtual IFilterBindingInNamedWithOrOnSyntax`1<T> WhenControllerHas(Type attributeType);
    public abstract virtual IFilterBindingInNamedWithOrOnSyntax`1<T> WhenControllerHas();
    public abstract virtual IFilterBindingInNamedWithOrOnSyntax`1<T> WhenControllerHasNo(Type attributeType);
    public abstract virtual IFilterBindingInNamedWithOrOnSyntax`1<T> WhenControllerHasNo();
    public abstract virtual IFilterBindingInNamedWithOrOnSyntax`1<T> WhenControllerType(Type controllerType);
    public abstract virtual IFilterBindingInNamedWithOrOnSyntax`1<T> WhenControllerType();
}
public interface Ninject.Web.Mvc.FilterBindingSyntax.IFilterBindingWithOrOnSyntax`1 {
}
public interface Ninject.Web.Mvc.FilterBindingSyntax.IFilterBindingWithSyntax`1 {
    public abstract virtual IFilterBindingWithOrOnSyntax`1<T> WithConstructorArgument(string name, object value);
    public abstract virtual IFilterBindingWithOrOnSyntax`1<T> WithConstructorArgument(string name, Func`2<IContext, object> callback);
    public abstract virtual IFilterBindingWithOrOnSyntax`1<T> WithPropertyValue(string name, object value);
    public abstract virtual IFilterBindingWithOrOnSyntax`1<T> WithPropertyValue(string name, Func`2<IContext, object> callback);
    public abstract virtual IFilterBindingWithOrOnSyntax`1<T> WithParameter(IParameter parameter);
    public abstract virtual IFilterBindingWithOrOnSyntax`1<T> WithMetadata(string key, object value);
    public abstract virtual IFilterBindingWithOrOnSyntax`1<T> WithConstructorArgument(string name, Func`4<IContext, ControllerContext, ActionDescriptor, object> callback);
    public abstract virtual IFilterBindingWithOrOnSyntax`1<T> WithConstructorArgumentFromActionAttribute(string name, Func`2<TAttribute, object> callback);
    public abstract virtual IFilterBindingWithOrOnSyntax`1<T> WithConstructorArgumentFromControllerAttribute(string name, Func`2<TAttribute, object> callback);
    public abstract virtual IFilterBindingWithOrOnSyntax`1<T> WithPropertyValue(string name, Func`4<IContext, ControllerContext, ActionDescriptor, object> callback);
    public abstract virtual IFilterBindingWithOrOnSyntax`1<T> WithPropertyValueFromActionAttribute(string name, Func`2<TAttribute, object> callback);
    public abstract virtual IFilterBindingWithOrOnSyntax`1<T> WithPropertyValueFromControllerAttribute(string name, Func`2<TAttribute, object> callback);
}
public class Ninject.Web.Mvc.MvcModule : NinjectModule {
    public virtual void Load();
}
public class Ninject.Web.Mvc.NinjectDependencyResolver : object {
    private IResolutionRoot resolutionRoot;
    public NinjectDependencyResolver(IResolutionRoot resolutionRoot);
    public sealed virtual object GetService(Type serviceType);
    public sealed virtual IEnumerable`1<object> GetServices(Type serviceType);
}
public class Ninject.Web.Mvc.NinjectMvcHttpApplicationPlugin : NinjectComponent {
    private IKernel kernel;
    public NinjectMvcHttpApplicationPlugin(IKernel kernel);
    public sealed virtual void Start();
    public sealed virtual void Stop();
    public sealed virtual object GetRequestScope(IContext context);
    protected IDependencyResolver CreateDependencyResolver();
    private static void RemoveDefaultAttributeFilterProvider();
}
public class Ninject.Web.Mvc.Validation.NinjectDataAnnotationsModelValidatorProvider : DataAnnotationsModelValidatorProvider {
    private IKernel kernel;
    private MethodInfo getAttributeMethodInfo;
    public NinjectDataAnnotationsModelValidatorProvider(IKernel kernel);
    protected virtual IEnumerable`1<ModelValidator> GetValidators(ModelMetadata metadata, ControllerContext context, IEnumerable`1<Attribute> attributes);
}
