public abstract class Ninject.Web.WebApi.Filter.AbstractActionFilter : object {
    private IActionFilter internalFilter;
    public bool AllowMultiple { get; }
    public abstract virtual bool get_AllowMultiple();
    public sealed virtual Task`1<HttpResponseMessage> ExecuteActionFilterAsync(HttpActionContext actionContext, CancellationToken cancellationToken, Func`1<Task`1<HttpResponseMessage>> continuation);
    public virtual void OnActionExecuted(HttpActionExecutedContext actionExecutedContext);
    public virtual void OnActionExecuting(HttpActionContext actionContext);
}
public class Ninject.Web.WebApi.Filter.DefaultFilterProvider : object {
    private IKernel kernel;
    private IEnumerable`1<IFilterProvider> filterProviders;
    public DefaultFilterProvider(IKernel kernel, DefaultFilterProviders filterProviders);
    public sealed virtual IEnumerable`1<FilterInfo> GetFilters(HttpConfiguration configuration, HttpActionDescriptor actionDescriptor);
}
public class Ninject.Web.WebApi.Filter.DefaultFilterProviders : object {
    [CompilerGeneratedAttribute]
private IEnumerable`1<IFilterProvider> <DefaultFilters>k__BackingField;
    public IEnumerable`1<IFilterProvider> DefaultFilters { get; private set; }
    public DefaultFilterProviders(IEnumerable`1<IFilterProvider> defaultFilterProviders);
    [CompilerGeneratedAttribute]
public IEnumerable`1<IFilterProvider> get_DefaultFilters();
    [CompilerGeneratedAttribute]
private void set_DefaultFilters(IEnumerable`1<IFilterProvider> value);
}
public class Ninject.Web.WebApi.Filter.DefaultModelValidatorProviders : object {
    [CompilerGeneratedAttribute]
private IEnumerable`1<ModelValidatorProvider> <DefaultModelValidators>k__BackingField;
    public IEnumerable`1<ModelValidatorProvider> DefaultModelValidators { get; private set; }
    public DefaultModelValidatorProviders(IEnumerable`1<ModelValidatorProvider> defaultModelValidatorProviders);
    [CompilerGeneratedAttribute]
public IEnumerable`1<ModelValidatorProvider> get_DefaultModelValidators();
    [CompilerGeneratedAttribute]
private void set_DefaultModelValidators(IEnumerable`1<ModelValidatorProvider> value);
}
public class Ninject.Web.WebApi.Filter.FilterContextParameter : Parameter {
    public static string ParameterName;
    [CompilerGeneratedAttribute]
private HttpConfiguration <HttpConfiguration>k__BackingField;
    [CompilerGeneratedAttribute]
private HttpActionDescriptor <ActionDescriptor>k__BackingField;
    public HttpConfiguration HttpConfiguration { get; private set; }
    public HttpActionDescriptor ActionDescriptor { get; private set; }
    public FilterContextParameter(HttpConfiguration configuration, HttpActionDescriptor actionDescriptor);
    [CompilerGeneratedAttribute]
public HttpConfiguration get_HttpConfiguration();
    [CompilerGeneratedAttribute]
private void set_HttpConfiguration(HttpConfiguration value);
    [CompilerGeneratedAttribute]
public HttpActionDescriptor get_ActionDescriptor();
    [CompilerGeneratedAttribute]
private void set_ActionDescriptor(HttpActionDescriptor value);
}
public interface Ninject.Web.WebApi.Filter.INinjectFilter {
    public abstract virtual FilterInfo BuildFilter(FilterContextParameter parameter);
}
public class Ninject.Web.WebApi.Filter.NinjectFilter`1 : object {
    private IKernel kernel;
    private FilterScope scope;
    private Guid filterId;
    public NinjectFilter`1(IKernel kernel, FilterScope scope, Guid filterId);
    public sealed virtual FilterInfo BuildFilter(FilterContextParameter parameter);
    [CompilerGeneratedAttribute]
private bool <BuildFilter>b__4_0(IBindingMetadata m);
}
public class Ninject.Web.WebApi.Filter.NinjectFilterProvider : object {
    private IKernel kernel;
    public NinjectFilterProvider(IKernel kernel);
    public sealed virtual IEnumerable`1<FilterInfo> GetFilters(HttpConfiguration configuration, HttpActionDescriptor actionDescriptor);
}
public class Ninject.Web.WebApi.FilterBindingSyntax.AttributeValueSelector`1 : object {
    private TAttribute attribute;
    public AttributeValueSelector`1(TAttribute attribute);
    public T GetValue(Func`2<TAttribute, T> valueSelector);
}
[ExtensionAttribute]
public static class Ninject.Web.WebApi.FilterBindingSyntax.BindingRootExtensions : object {
    public static string FilterIdMetadataKey;
    [ExtensionAttribute]
public static IFilterBindingWhenInNamedWithOrOnSyntax`1<T> BindHttpFilter(IBindingRoot kernel, FilterScope scope);
    [ExtensionAttribute]
public static IFilterBindingWhenInNamedWithOrOnSyntax`1<T> BindHttpFilter(IBindingRoot kernel, Expression`1<Func`2<IConstructorArgumentSyntax, T>> newExpression, FilterScope scope);
}
public class Ninject.Web.WebApi.FilterBindingSyntax.FilterFilterBindingBuilder`1 : object {
    private IBindingWhenInNamedWithOrOnSyntax`1<NinjectFilter`1<T>> ninjectFilterBindingSyntax;
    private IBindingWhenInNamedWithOrOnSyntax`1<T> filterBindingSyntax;
    public IBindingConfiguration BindingConfiguration { get; }
    public IKernel Kernel { get; }
    public FilterFilterBindingBuilder`1(IBindingWhenInNamedWithOrOnSyntax`1<NinjectFilter`1<T>> ninjectFilterBindingSyntax, IBindingWhenInNamedWithOrOnSyntax`1<T> filterBindingSyntax);
    public sealed virtual IBindingConfiguration get_BindingConfiguration();
    public sealed virtual IKernel get_Kernel();
    public sealed virtual IFilterBindingWithOrOnSyntax`1<T> Named(string name);
    public sealed virtual IFilterBindingInNamedWithOrOnSyntax`1<T> When(Func`2<IRequest, bool> condition);
    public sealed virtual IFilterBindingInNamedWithOrOnSyntax`1<T> When(Func`3<HttpConfiguration, HttpActionDescriptor, bool> condition);
    public sealed virtual IFilterBindingInNamedWithOrOnSyntax`1<T> WhenActionMethodHas(Type attributeType);
    public sealed virtual IFilterBindingInNamedWithOrOnSyntax`1<T> WhenActionMethodHas();
    public sealed virtual IFilterBindingInNamedWithOrOnSyntax`1<T> WhenControllerHas(Type attributeType);
    public sealed virtual IFilterBindingInNamedWithOrOnSyntax`1<T> WhenControllerHas();
    public sealed virtual IFilterBindingInNamedWithOrOnSyntax`1<T> WhenControllerType(Type controllerType);
    public sealed virtual IFilterBindingInNamedWithOrOnSyntax`1<T> WhenControllerType();
    public sealed virtual IFilterBindingNamedWithOrOnSyntax`1<T> InSingletonScope();
    public sealed virtual IFilterBindingNamedWithOrOnSyntax`1<T> InTransientScope();
    public sealed virtual IFilterBindingNamedWithOrOnSyntax`1<T> InThreadScope();
    public sealed virtual IFilterBindingNamedWithOrOnSyntax`1<T> InRequestScope();
    public sealed virtual IFilterBindingNamedWithOrOnSyntax`1<T> InScope(Func`2<IContext, object> scope);
    public sealed virtual IFilterBindingNamedWithOrOnSyntax`1<T> InScope(Func`4<IContext, HttpConfiguration, HttpActionDescriptor, object> scope);
    public sealed virtual IFilterBindingWithOrOnSyntax`1<T> WithConstructorArgument(string name, object value);
    public sealed virtual IFilterBindingWithOrOnSyntax`1<T> WithConstructorArgument(string name, Func`2<IContext, object> callback);
    public sealed virtual IFilterBindingWithOrOnSyntax`1<T> WithPropertyValue(string name, object value);
    public sealed virtual IFilterBindingWithOrOnSyntax`1<T> WithPropertyValue(string name, Func`2<IContext, object> callback);
    public sealed virtual IFilterBindingWithOrOnSyntax`1<T> WithParameter(IParameter parameter);
    public sealed virtual IFilterBindingWithOrOnSyntax`1<T> WithMetadata(string key, object value);
    public sealed virtual IFilterBindingWithOrOnSyntax`1<T> WithConstructorArgument(string name, Func`4<IContext, HttpConfiguration, HttpActionDescriptor, object> callback);
    public sealed virtual IFilterBindingWithOrOnSyntax`1<T> WithConstructorArgumentFromActionAttribute(string name, Func`2<TAttribute, object> callback);
    public sealed virtual IFilterBindingWithOrOnSyntax`1<T> WithConstructorArgumentFromControllerAttribute(string name, Func`2<TAttribute, object> callback);
    public sealed virtual IFilterBindingWithOrOnSyntax`1<T> WithPropertyValue(string name, Func`4<IContext, HttpConfiguration, HttpActionDescriptor, object> callback);
    public sealed virtual IFilterBindingWithOrOnSyntax`1<T> WithPropertyValueFromActionAttribute(string name, Func`2<TAttribute, object> callback);
    public sealed virtual IFilterBindingWithOrOnSyntax`1<T> WithPropertyValueFromControllerAttribute(string name, Func`2<TAttribute, object> callback);
    public sealed virtual IFilterBindingOnSyntax`1<T> OnActivation(Action`1<T> action);
    public sealed virtual IFilterBindingOnSyntax`1<T> OnActivation(Action`2<IContext, T> action);
    public sealed virtual IFilterBindingOnSyntax`1<T> OnDeactivation(Action`2<IContext, T> action);
    public sealed virtual IFilterBindingOnSyntax`1<T> OnDeactivation(Action`1<T> action);
    public sealed virtual IFilterBindingOnSyntax`1<T> OnActivation(Action`4<IContext, HttpConfiguration, HttpActionDescriptor, T> action);
    private static FilterContextParameter GetFilterContextParameter(IContext ctx);
    private sealed virtual override Type Ninject.Syntax.IFluentSyntax.GetType();
}
[ExtensionAttribute]
public static class Ninject.Web.WebApi.FilterBindingSyntax.HttpActionDescriptorExtensionMethods : object {
    [ExtensionAttribute]
public static IEnumerable`1<object> GetCustomAttributes(HttpActionDescriptor actionDescriptor, Type type);
    [ExtensionAttribute]
public static IEnumerable`1<object> GetCustomAttributes(HttpControllerDescriptor actionDescriptor, Type type);
}
[ExtensionAttribute]
public static class Ninject.Web.WebApi.FilterBindingSyntax.IConstructorArgumentSyntaxExtensions : object {
    [ExtensionAttribute]
public static AttributeValueSelector`1<TAttribute> FromActionAttribute(IConstructorArgumentSyntax syntax);
    [ExtensionAttribute]
public static AttributeValueSelector`1<TAttribute> FromControllerAttribute(IConstructorArgumentSyntax syntax);
}
public interface Ninject.Web.WebApi.FilterBindingSyntax.IFilterBindingInNamedWithOrOnSyntax`1 {
}
public interface Ninject.Web.WebApi.FilterBindingSyntax.IFilterBindingInSyntax`1 {
    public abstract virtual IFilterBindingNamedWithOrOnSyntax`1<T> InSingletonScope();
    public abstract virtual IFilterBindingNamedWithOrOnSyntax`1<T> InTransientScope();
    public abstract virtual IFilterBindingNamedWithOrOnSyntax`1<T> InThreadScope();
    public abstract virtual IFilterBindingNamedWithOrOnSyntax`1<T> InRequestScope();
    public abstract virtual IFilterBindingNamedWithOrOnSyntax`1<T> InScope(Func`2<IContext, object> scope);
    public abstract virtual IFilterBindingNamedWithOrOnSyntax`1<T> InScope(Func`4<IContext, HttpConfiguration, HttpActionDescriptor, object> scope);
}
public interface Ninject.Web.WebApi.FilterBindingSyntax.IFilterBindingNamedSyntax`1 {
    public abstract virtual IFilterBindingWithOrOnSyntax`1<T> Named(string name);
}
public interface Ninject.Web.WebApi.FilterBindingSyntax.IFilterBindingNamedWithOrOnSyntax`1 {
}
public interface Ninject.Web.WebApi.FilterBindingSyntax.IFilterBindingOnSyntax`1 {
    public abstract virtual IFilterBindingOnSyntax`1<T> OnActivation(Action`1<T> action);
    public abstract virtual IFilterBindingOnSyntax`1<T> OnActivation(Action`2<IContext, T> action);
    public abstract virtual IFilterBindingOnSyntax`1<T> OnDeactivation(Action`1<T> action);
    public abstract virtual IFilterBindingOnSyntax`1<T> OnDeactivation(Action`2<IContext, T> action);
    public abstract virtual IFilterBindingOnSyntax`1<T> OnActivation(Action`4<IContext, HttpConfiguration, HttpActionDescriptor, T> action);
}
public interface Ninject.Web.WebApi.FilterBindingSyntax.IFilterBindingWhenInNamedWithOrOnSyntax`1 {
}
public interface Ninject.Web.WebApi.FilterBindingSyntax.IFilterBindingWhenSyntax`1 {
    public abstract virtual IFilterBindingInNamedWithOrOnSyntax`1<T> When(Func`2<IRequest, bool> condition);
    public abstract virtual IFilterBindingInNamedWithOrOnSyntax`1<T> When(Func`3<HttpConfiguration, HttpActionDescriptor, bool> condition);
    public abstract virtual IFilterBindingInNamedWithOrOnSyntax`1<T> WhenActionMethodHas(Type attributeType);
    public abstract virtual IFilterBindingInNamedWithOrOnSyntax`1<T> WhenActionMethodHas();
    public abstract virtual IFilterBindingInNamedWithOrOnSyntax`1<T> WhenControllerHas(Type attributeType);
    public abstract virtual IFilterBindingInNamedWithOrOnSyntax`1<T> WhenControllerHas();
    public abstract virtual IFilterBindingInNamedWithOrOnSyntax`1<T> WhenControllerType(Type controllerType);
    public abstract virtual IFilterBindingInNamedWithOrOnSyntax`1<T> WhenControllerType();
}
public interface Ninject.Web.WebApi.FilterBindingSyntax.IFilterBindingWithOrOnSyntax`1 {
}
public interface Ninject.Web.WebApi.FilterBindingSyntax.IFilterBindingWithSyntax`1 {
    public abstract virtual IFilterBindingWithOrOnSyntax`1<T> WithConstructorArgument(string name, object value);
    public abstract virtual IFilterBindingWithOrOnSyntax`1<T> WithConstructorArgument(string name, Func`2<IContext, object> callback);
    public abstract virtual IFilterBindingWithOrOnSyntax`1<T> WithPropertyValue(string name, object value);
    public abstract virtual IFilterBindingWithOrOnSyntax`1<T> WithPropertyValue(string name, Func`2<IContext, object> callback);
    public abstract virtual IFilterBindingWithOrOnSyntax`1<T> WithParameter(IParameter parameter);
    public abstract virtual IFilterBindingWithOrOnSyntax`1<T> WithMetadata(string key, object value);
    public abstract virtual IFilterBindingWithOrOnSyntax`1<T> WithConstructorArgument(string name, Func`4<IContext, HttpConfiguration, HttpActionDescriptor, object> callback);
    public abstract virtual IFilterBindingWithOrOnSyntax`1<T> WithConstructorArgumentFromActionAttribute(string name, Func`2<TAttribute, object> callback);
    public abstract virtual IFilterBindingWithOrOnSyntax`1<T> WithConstructorArgumentFromControllerAttribute(string name, Func`2<TAttribute, object> callback);
    public abstract virtual IFilterBindingWithOrOnSyntax`1<T> WithPropertyValue(string name, Func`4<IContext, HttpConfiguration, HttpActionDescriptor, object> callback);
    public abstract virtual IFilterBindingWithOrOnSyntax`1<T> WithPropertyValueFromActionAttribute(string name, Func`2<TAttribute, object> callback);
    public abstract virtual IFilterBindingWithOrOnSyntax`1<T> WithPropertyValueFromControllerAttribute(string name, Func`2<TAttribute, object> callback);
}
public class Ninject.Web.WebApi.NinjectDependencyResolver : NinjectDependencyScope {
    public static string NinjectWebApiRequestScope;
    public NinjectDependencyResolver(IKernel kernel);
    public virtual IDependencyScope BeginScope();
}
public class Ninject.Web.WebApi.NinjectDependencyScope : DisposableObject {
    [CompilerGeneratedAttribute]
private IKernel <Kernel>k__BackingField;
    protected IKernel Kernel { get; private set; }
    public NinjectDependencyScope(IKernel kernel);
    [CompilerGeneratedAttribute]
protected IKernel get_Kernel();
    [CompilerGeneratedAttribute]
private void set_Kernel(IKernel value);
    public sealed virtual object GetService(Type serviceType);
    public sealed virtual IEnumerable`1<object> GetServices(Type serviceType);
    public virtual void Dispose(bool disposing);
}
public class Ninject.Web.WebApi.NinjectWebApiHttpApplicationPlugin : NinjectComponent {
    private IKernel kernel;
    public NinjectWebApiHttpApplicationPlugin(IKernel kernel);
    public sealed virtual object GetRequestScope(IContext context);
    public sealed virtual void Start();
    public sealed virtual void Stop();
    protected IDependencyResolver CreateDependencyResolver();
}
public class Ninject.Web.WebApi.Validation.NinjectDataAnnotationsModelValidatorProvider : DataAnnotationsModelValidatorProvider {
    private IKernel kernel;
    private MethodInfo getAttributeMethodInfo;
    public NinjectDataAnnotationsModelValidatorProvider(IKernel kernel);
    protected virtual IEnumerable`1<ModelValidator> GetValidators(ModelMetadata metadata, IEnumerable`1<ModelValidatorProvider> validatorProviders, IEnumerable`1<Attribute> attributes);
}
public class Ninject.Web.WebApi.Validation.NinjectDefaultModelValidatorProvider : ModelValidatorProvider {
    private IKernel kernel;
    private IEnumerable`1<ModelValidatorProvider> defaultModelValidatorProviders;
    public NinjectDefaultModelValidatorProvider(IKernel kernel, DefaultModelValidatorProviders defaultModelValidatorProviders);
    public virtual IEnumerable`1<ModelValidator> GetValidators(ModelMetadata metadata, IEnumerable`1<ModelValidatorProvider> validatorProviders);
}
public class Ninject.Web.WebApi.WebApiModule : NinjectModule {
    public virtual void Load();
}
