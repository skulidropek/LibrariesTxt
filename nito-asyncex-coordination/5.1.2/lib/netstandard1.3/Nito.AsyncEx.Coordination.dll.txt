[CompilerGeneratedAttribute]
[EmbeddedAttribute]
internal class Microsoft.CodeAnalysis.EmbeddedAttribute : Attribute {
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[DebuggerDisplayAttribute("Id = {Id}, IsSet = {_set}")]
[DebuggerTypeProxyAttribute("Nito.AsyncEx.AsyncAutoResetEvent/DebugView")]
public class Nito.AsyncEx.AsyncAutoResetEvent : object {
    private IAsyncWaitQueue`1<object> _queue;
    private bool _set;
    private int _id;
    private object _mutex;
    public int Id { get; }
    public bool IsSet { get; }
    internal AsyncAutoResetEvent(bool set, IAsyncWaitQueue`1<object> queue);
    public AsyncAutoResetEvent(bool set);
    public int get_Id();
    public bool get_IsSet();
    public Task WaitAsync(CancellationToken cancellationToken);
    public Task WaitAsync();
    public void Wait(CancellationToken cancellationToken);
    public void Wait();
    public void Set();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[DebuggerDisplayAttribute("Count = {_collection.Count}, MaxCount = {_maxCount}")]
[DebuggerTypeProxyAttribute("Nito.AsyncEx.AsyncCollection`1/DebugView")]
public class Nito.AsyncEx.AsyncCollection`1 : object {
    private IProducerConsumerCollection`1<T> _collection;
    private int _maxCount;
    private AsyncLock _mutex;
    private AsyncConditionVariable _completedOrNotFull;
    private AsyncConditionVariable _completedOrNotEmpty;
    private bool _completed;
    private bool Empty { get; }
    private bool Full { get; }
    public AsyncCollection`1(IProducerConsumerCollection`1<T> collection, int maxCount);
    public AsyncCollection`1(IProducerConsumerCollection`1<T> collection);
    public AsyncCollection`1(int maxCount);
    private bool get_Empty();
    private bool get_Full();
    public void CompleteAdding();
    [AsyncStateMachineAttribute("Nito.AsyncEx.AsyncCollection`1/<DoAddAsync>d__15")]
internal Task DoAddAsync(T item, CancellationToken cancellationToken, bool sync);
    public Task AddAsync(T item, CancellationToken cancellationToken);
    public void Add(T item, CancellationToken cancellationToken);
    public Task AddAsync(T item);
    public void Add(T item);
    [AsyncStateMachineAttribute("Nito.AsyncEx.AsyncCollection`1/<DoOutputAvailableAsync>d__20")]
private Task`1<bool> DoOutputAvailableAsync(CancellationToken cancellationToken, bool sync);
    public Task`1<bool> OutputAvailableAsync(CancellationToken cancellationToken);
    public Task`1<bool> OutputAvailableAsync();
    public bool OutputAvailable(CancellationToken cancellationToken);
    public bool OutputAvailable();
    [IteratorStateMachineAttribute("Nito.AsyncEx.AsyncCollection`1/<GetConsumingEnumerable>d__25")]
public IEnumerable`1<T> GetConsumingEnumerable(CancellationToken cancellationToken);
    public IEnumerable`1<T> GetConsumingEnumerable();
    [AsyncStateMachineAttribute("Nito.AsyncEx.AsyncCollection`1/<DoTakeAsync>d__27")]
private Task`1<T> DoTakeAsync(CancellationToken cancellationToken, bool sync);
    public Task`1<T> TakeAsync(CancellationToken cancellationToken);
    public T Take(CancellationToken cancellationToken);
    public Task`1<T> TakeAsync();
    public T Take();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[DebuggerDisplayAttribute("Id = {Id}, AsyncLockId = {_asyncLock.Id}")]
[DebuggerTypeProxyAttribute("Nito.AsyncEx.AsyncConditionVariable/DebugView")]
public class Nito.AsyncEx.AsyncConditionVariable : object {
    private AsyncLock _asyncLock;
    private IAsyncWaitQueue`1<object> _queue;
    private int _id;
    private object _mutex;
    public int Id { get; }
    internal AsyncConditionVariable(AsyncLock asyncLock, IAsyncWaitQueue`1<object> queue);
    public AsyncConditionVariable(AsyncLock asyncLock);
    public int get_Id();
    public void Notify();
    public void NotifyAll();
    public Task WaitAsync(CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Nito.AsyncEx.AsyncConditionVariable/<WaitAndRetakeLockAsync>d__11")]
private static Task WaitAndRetakeLockAsync(Task task, AsyncLock asyncLock);
    public Task WaitAsync();
    public void Wait(CancellationToken cancellationToken);
    public void Wait();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[DebuggerDisplayAttribute("Id = {Id}, CurrentCount = {_count}")]
[DebuggerTypeProxyAttribute("Nito.AsyncEx.AsyncCountdownEvent/DebugView")]
public class Nito.AsyncEx.AsyncCountdownEvent : object {
    private AsyncManualResetEvent _mre;
    private long _count;
    public int Id { get; }
    public long CurrentCount { get; }
    public AsyncCountdownEvent(long count);
    public int get_Id();
    public long get_CurrentCount();
    public Task WaitAsync();
    public Task WaitAsync(CancellationToken cancellationToken);
    public void Wait();
    public void Wait(CancellationToken cancellationToken);
    private void ModifyCount(long difference, bool add);
    public void AddCount(long addCount);
    public void AddCount();
    public void Signal(long signalCount);
    public void Signal();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[DebuggerDisplayAttribute("Id = {Id}, State = {GetStateForDebugger}")]
[DebuggerTypeProxyAttribute("Nito.AsyncEx.AsyncLazy`1/DebugView")]
public class Nito.AsyncEx.AsyncLazy`1 : object {
    private object _mutex;
    private Func`1<Task`1<T>> _factory;
    private Lazy`1<Task`1<T>> _instance;
    private int _id;
    [NullableAttribute("0")]
[DebuggerNonUserCodeAttribute]
internal LazyState<T> GetStateForDebugger { get; }
    public int Id { get; }
    public bool IsStarted { get; }
    public Task`1<T> Task { get; }
    public AsyncLazy`1(Func`1<Task`1<T>> factory, AsyncLazyFlags flags);
    [NullableContextAttribute("0")]
internal LazyState<T> get_GetStateForDebugger();
    public int get_Id();
    public bool get_IsStarted();
    public Task`1<T> get_Task();
    private Func`1<Task`1<T>> RetryOnFailure(Func`1<Task`1<T>> factory);
    private static Func`1<Task`1<T>> RunOnThreadPool(Func`1<Task`1<T>> factory);
    [EditorBrowsableAttribute("1")]
public TaskAwaiter`1<T> GetAwaiter();
    public ConfiguredTaskAwaitable`1<T> ConfigureAwait(bool continueOnCapturedContext);
    public void Start();
}
[FlagsAttribute]
public enum Nito.AsyncEx.AsyncLazyFlags : Enum {
    public int value__;
    public static AsyncLazyFlags None;
    public static AsyncLazyFlags ExecuteOnCallingThread;
    public static AsyncLazyFlags RetryOnFailure;
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[DebuggerDisplayAttribute("Id = {Id}, Taken = {_taken}")]
[DebuggerTypeProxyAttribute("Nito.AsyncEx.AsyncLock/DebugView")]
public class Nito.AsyncEx.AsyncLock : object {
    private bool _taken;
    private IAsyncWaitQueue`1<IDisposable> _queue;
    private int _id;
    private object _mutex;
    public int Id { get; }
    internal AsyncLock(IAsyncWaitQueue`1<IDisposable> queue);
    public int get_Id();
    private Task`1<IDisposable> RequestLockAsync(CancellationToken cancellationToken);
    public AwaitableDisposable`1<IDisposable> LockAsync(CancellationToken cancellationToken);
    public AwaitableDisposable`1<IDisposable> LockAsync();
    public IDisposable Lock(CancellationToken cancellationToken);
    public IDisposable Lock();
    internal void ReleaseLock();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[DebuggerDisplayAttribute("Id = {Id}, IsSet = {GetStateForDebugger}")]
[DebuggerTypeProxyAttribute("Nito.AsyncEx.AsyncManualResetEvent/DebugView")]
public class Nito.AsyncEx.AsyncManualResetEvent : object {
    private object _mutex;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private TaskCompletionSource`1<object> _tcs;
    private int _id;
    [DebuggerNonUserCodeAttribute]
private bool GetStateForDebugger { get; }
    public int Id { get; }
    public bool IsSet { get; }
    public AsyncManualResetEvent(bool set);
    private bool get_GetStateForDebugger();
    public int get_Id();
    public bool get_IsSet();
    public Task WaitAsync();
    public Task WaitAsync(CancellationToken cancellationToken);
    public void Wait();
    public void Wait(CancellationToken cancellationToken);
    public void Set();
    public void Reset();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[DebuggerDisplayAttribute("Id = {Id}, ConditionVariableId = {_conditionVariable.Id}")]
public class Nito.AsyncEx.AsyncMonitor : object {
    private AsyncLock _asyncLock;
    private AsyncConditionVariable _conditionVariable;
    public int Id { get; }
    internal AsyncMonitor(IAsyncWaitQueue`1<IDisposable> lockQueue, IAsyncWaitQueue`1<object> conditionVariableQueue);
    public int get_Id();
    public AwaitableDisposable`1<IDisposable> EnterAsync(CancellationToken cancellationToken);
    public AwaitableDisposable`1<IDisposable> EnterAsync();
    public IDisposable Enter(CancellationToken cancellationToken);
    public IDisposable Enter();
    public Task WaitAsync(CancellationToken cancellationToken);
    public Task WaitAsync();
    public void Wait(CancellationToken cancellationToken);
    public void Wait();
    public void Pulse();
    public void PulseAll();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[DebuggerDisplayAttribute("Count = {_queue.Count}, MaxCount = {_maxCount}")]
[DebuggerTypeProxyAttribute("Nito.AsyncEx.AsyncProducerConsumerQueue`1/DebugView")]
public class Nito.AsyncEx.AsyncProducerConsumerQueue`1 : object {
    private Queue`1<T> _queue;
    private int _maxCount;
    private AsyncLock _mutex;
    private AsyncConditionVariable _completedOrNotFull;
    private AsyncConditionVariable _completedOrNotEmpty;
    private bool _completed;
    private bool Empty { get; }
    private bool Full { get; }
    public AsyncProducerConsumerQueue`1(IEnumerable`1<T> collection, int maxCount);
    public AsyncProducerConsumerQueue`1(IEnumerable`1<T> collection);
    public AsyncProducerConsumerQueue`1(int maxCount);
    private bool get_Empty();
    private bool get_Full();
    public void CompleteAdding();
    [AsyncStateMachineAttribute("Nito.AsyncEx.AsyncProducerConsumerQueue`1/<DoEnqueueAsync>d__15")]
private Task DoEnqueueAsync(T item, CancellationToken cancellationToken, bool sync);
    public Task EnqueueAsync(T item, CancellationToken cancellationToken);
    public Task EnqueueAsync(T item);
    public void Enqueue(T item, CancellationToken cancellationToken);
    public void Enqueue(T item);
    [AsyncStateMachineAttribute("Nito.AsyncEx.AsyncProducerConsumerQueue`1/<DoOutputAvailableAsync>d__20")]
private Task`1<bool> DoOutputAvailableAsync(CancellationToken cancellationToken, bool sync);
    public Task`1<bool> OutputAvailableAsync(CancellationToken cancellationToken);
    public Task`1<bool> OutputAvailableAsync();
    public bool OutputAvailable(CancellationToken cancellationToken);
    public bool OutputAvailable();
    [IteratorStateMachineAttribute("Nito.AsyncEx.AsyncProducerConsumerQueue`1/<GetConsumingEnumerable>d__25")]
public IEnumerable`1<T> GetConsumingEnumerable(CancellationToken cancellationToken);
    public IEnumerable`1<T> GetConsumingEnumerable();
    [AsyncStateMachineAttribute("Nito.AsyncEx.AsyncProducerConsumerQueue`1/<TryDoDequeueAsync>d__27")]
private Task`1<Tuple`2<bool, T>> TryDoDequeueAsync(CancellationToken cancellationToken, bool sync);
    [AsyncStateMachineAttribute("Nito.AsyncEx.AsyncProducerConsumerQueue`1/<DoDequeueAsync>d__28")]
private Task`1<T> DoDequeueAsync(CancellationToken cancellationToken, bool sync);
    public Task`1<T> DequeueAsync(CancellationToken cancellationToken);
    public Task`1<T> DequeueAsync();
    public T Dequeue(CancellationToken cancellationToken);
    public T Dequeue();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[DebuggerDisplayAttribute("Id = {Id}, State = {GetStateForDebugger}, ReaderCount = {GetReaderCountForDebugger}")]
[DebuggerTypeProxyAttribute("Nito.AsyncEx.AsyncReaderWriterLock/DebugView")]
public class Nito.AsyncEx.AsyncReaderWriterLock : object {
    private IAsyncWaitQueue`1<IDisposable> _writerQueue;
    private IAsyncWaitQueue`1<IDisposable> _readerQueue;
    private object _mutex;
    private int _id;
    private int _locksHeld;
    [DebuggerNonUserCodeAttribute]
internal State GetStateForDebugger { get; }
    [DebuggerNonUserCodeAttribute]
internal int GetReaderCountForDebugger { get; }
    public int Id { get; }
    internal AsyncReaderWriterLock(IAsyncWaitQueue`1<IDisposable> writerQueue, IAsyncWaitQueue`1<IDisposable> readerQueue);
    internal State get_GetStateForDebugger();
    internal int get_GetReaderCountForDebugger();
    public int get_Id();
    private void ReleaseWaitersWhenCanceled(Task task);
    private Task`1<IDisposable> RequestReaderLockAsync(CancellationToken cancellationToken);
    public AwaitableDisposable`1<IDisposable> ReaderLockAsync(CancellationToken cancellationToken);
    public AwaitableDisposable`1<IDisposable> ReaderLockAsync();
    public IDisposable ReaderLock(CancellationToken cancellationToken);
    public IDisposable ReaderLock();
    private Task`1<IDisposable> RequestWriterLockAsync(CancellationToken cancellationToken);
    public AwaitableDisposable`1<IDisposable> WriterLockAsync(CancellationToken cancellationToken);
    public AwaitableDisposable`1<IDisposable> WriterLockAsync();
    public IDisposable WriterLock(CancellationToken cancellationToken);
    public IDisposable WriterLock();
    private void ReleaseWaiters();
    internal void ReleaseReaderLock();
    internal void ReleaseWriterLock();
    [NullableContextAttribute("0")]
[CompilerGeneratedAttribute]
private void <ReleaseWaitersWhenCanceled>b__14_0(Task t);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[DebuggerDisplayAttribute("Id = {Id}, CurrentCount = {_count}")]
[DebuggerTypeProxyAttribute("Nito.AsyncEx.AsyncSemaphore/DebugView")]
public class Nito.AsyncEx.AsyncSemaphore : object {
    private IAsyncWaitQueue`1<object> _queue;
    private long _count;
    private int _id;
    private object _mutex;
    public int Id { get; }
    public long CurrentCount { get; }
    internal AsyncSemaphore(long initialCount, IAsyncWaitQueue`1<object> queue);
    public AsyncSemaphore(long initialCount);
    public int get_Id();
    public long get_CurrentCount();
    public Task WaitAsync(CancellationToken cancellationToken);
    public Task WaitAsync();
    public void Wait(CancellationToken cancellationToken);
    public void Wait();
    public void Release(long releaseCount);
    public void Release();
    [AsyncStateMachineAttribute("Nito.AsyncEx.AsyncSemaphore/<DoLockAsync>d__16")]
private Task`1<IDisposable> DoLockAsync(CancellationToken cancellationToken);
    public AwaitableDisposable`1<IDisposable> LockAsync(CancellationToken cancellationToken);
    public AwaitableDisposable`1<IDisposable> LockAsync();
    public IDisposable Lock(CancellationToken cancellationToken);
    public IDisposable Lock();
}
[ExtensionAttribute]
internal static class Nito.AsyncEx.AsyncWaitQueueExtensions : object {
    [NullableContextAttribute("1")]
[ExtensionAttribute]
public static Task`1<T> Enqueue(IAsyncWaitQueue`1<T> this, object mutex, CancellationToken token);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[DebuggerDisplayAttribute("Count = {Count}")]
[DebuggerTypeProxyAttribute("Nito.AsyncEx.DefaultAsyncWaitQueue`1/DebugView")]
internal class Nito.AsyncEx.DefaultAsyncWaitQueue`1 : object {
    private Deque`1<TaskCompletionSource`1<T>> _queue;
    private int Count { get; }
    private bool Nito.AsyncEx.IAsyncWaitQueue<T>.IsEmpty { get; }
    private int get_Count();
    private sealed virtual override bool Nito.AsyncEx.IAsyncWaitQueue<T>.get_IsEmpty();
    private sealed virtual override Task`1<T> Nito.AsyncEx.IAsyncWaitQueue<T>.Enqueue();
    [NullableContextAttribute("2")]
private sealed virtual override void Nito.AsyncEx.IAsyncWaitQueue<T>.Dequeue(T result);
    [NullableContextAttribute("2")]
private sealed virtual override void Nito.AsyncEx.IAsyncWaitQueue<T>.DequeueAll(T result);
    private sealed virtual override bool Nito.AsyncEx.IAsyncWaitQueue<T>.TryCancel(Task task, CancellationToken cancellationToken);
    private sealed virtual override void Nito.AsyncEx.IAsyncWaitQueue<T>.CancelAll(CancellationToken cancellationToken);
}
[NullableContextAttribute("2")]
internal interface Nito.AsyncEx.IAsyncWaitQueue`1 {
    public bool IsEmpty { get; }
    public abstract virtual bool get_IsEmpty();
    [NullableContextAttribute("1")]
public abstract virtual Task`1<T> Enqueue();
    public abstract virtual void Dequeue(T result);
    public abstract virtual void DequeueAll(T result);
    [NullableContextAttribute("1")]
public abstract virtual bool TryCancel(Task task, CancellationToken cancellationToken);
    public abstract virtual void CancelAll(CancellationToken cancellationToken);
}
internal static class Nito.AsyncEx.IdManager`1 : object {
    private static int _lastId;
    public static int GetId(Int32& id);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Nito.AsyncEx.PauseToken : ValueType {
    private AsyncManualResetEvent _mre;
    public bool CanBePaused { get; }
    public bool IsPaused { get; }
    internal PauseToken(AsyncManualResetEvent mre);
    public bool get_CanBePaused();
    public bool get_IsPaused();
    public Task WaitWhilePausedAsync();
    public Task WaitWhilePausedAsync(CancellationToken token);
    public void WaitWhilePaused();
    public void WaitWhilePaused(CancellationToken token);
}
public class Nito.AsyncEx.PauseTokenSource : object {
    [NullableAttribute("1")]
private AsyncManualResetEvent _mre;
    public bool IsPaused { get; public set; }
    public PauseToken Token { get; }
    public bool get_IsPaused();
    public void set_IsPaused(bool value);
    public PauseToken get_Token();
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
[AttributeUsageAttribute("27524")]
internal class System.Runtime.CompilerServices.NullableAttribute : Attribute {
    public Byte[] NullableFlags;
    public NullableAttribute(byte );
    public NullableAttribute(Byte[] );
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
[AttributeUsageAttribute("5196")]
internal class System.Runtime.CompilerServices.NullableContextAttribute : Attribute {
    public byte Flag;
    public NullableContextAttribute(byte );
}
