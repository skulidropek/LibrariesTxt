[CompilerGeneratedAttribute]
[EmbeddedAttribute]
internal class Microsoft.CodeAnalysis.EmbeddedAttribute : Attribute {
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal static class Nito.Collections.CollectionHelpers : object {
    public static IReadOnlyCollection`1<T> ReifyCollection(IEnumerable`1<T> source);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[DefaultMemberAttribute("Item")]
[DebuggerDisplayAttribute("Count = {Count}, Capacity = {Capacity}")]
[DebuggerTypeProxyAttribute("Nito.Collections.Deque`1/DebugView")]
public class Nito.Collections.Deque`1 : object {
    private static int DefaultCapacity;
    private T[] _buffer;
    private int _offset;
    [CompilerGeneratedAttribute]
private int <Count>k__BackingField;
    private bool System.Collections.Generic.ICollection<T>.IsReadOnly { get; }
    public T Item { get; public set; }
    private bool System.Collections.IList.IsFixedSize { get; }
    private bool System.Collections.IList.IsReadOnly { get; }
    [NullableAttribute("2")]
private object System.Collections.IList.Item { get; private set; }
    private bool System.Collections.ICollection.IsSynchronized { get; }
    private object System.Collections.ICollection.SyncRoot { get; }
    private bool IsEmpty { get; }
    private bool IsFull { get; }
    private bool IsSplit { get; }
    public int Capacity { get; public set; }
    public int Count { get; private set; }
    public Deque`1(int capacity);
    public Deque`1(IEnumerable`1<T> collection);
    private sealed virtual override bool System.Collections.Generic.ICollection<T>.get_IsReadOnly();
    public sealed virtual T get_Item(int index);
    public sealed virtual void set_Item(int index, T value);
    public sealed virtual void Insert(int index, T item);
    public sealed virtual void RemoveAt(int index);
    public sealed virtual int IndexOf(T item);
    private sealed virtual override void System.Collections.Generic.ICollection<T>.Add(T item);
    private sealed virtual override bool System.Collections.Generic.ICollection<T>.Contains(T item);
    private sealed virtual override void System.Collections.Generic.ICollection<T>.CopyTo(T[] array, int arrayIndex);
    private void CopyToArray(Array array, int arrayIndex);
    public sealed virtual bool Remove(T item);
    [IteratorStateMachineAttribute("Nito.Collections.Deque`1/<GetEnumerator>d__19")]
public sealed virtual IEnumerator`1<T> GetEnumerator();
    private sealed virtual override IEnumerator System.Collections.IEnumerable.GetEnumerator();
    [NullableContextAttribute("2")]
private static bool IsT(object value);
    [NullableContextAttribute("2")]
private sealed virtual override int System.Collections.IList.Add(object value);
    [NullableContextAttribute("2")]
private sealed virtual override bool System.Collections.IList.Contains(object value);
    [NullableContextAttribute("2")]
private sealed virtual override int System.Collections.IList.IndexOf(object value);
    [NullableContextAttribute("2")]
private sealed virtual override void System.Collections.IList.Insert(int index, object value);
    private sealed virtual override bool System.Collections.IList.get_IsFixedSize();
    private sealed virtual override bool System.Collections.IList.get_IsReadOnly();
    [NullableContextAttribute("2")]
private sealed virtual override void System.Collections.IList.Remove(object value);
    [NullableContextAttribute("2")]
private sealed virtual override object System.Collections.IList.get_Item(int index);
    [NullableContextAttribute("2")]
private sealed virtual override void System.Collections.IList.set_Item(int index, object value);
    private sealed virtual override void System.Collections.ICollection.CopyTo(Array array, int index);
    private sealed virtual override bool System.Collections.ICollection.get_IsSynchronized();
    private sealed virtual override object System.Collections.ICollection.get_SyncRoot();
    private static void CheckNewIndexArgument(int sourceLength, int index);
    private static void CheckExistingIndexArgument(int sourceLength, int index);
    private static void CheckRangeArguments(int sourceLength, int offset, int count);
    private bool get_IsEmpty();
    private bool get_IsFull();
    private bool get_IsSplit();
    public int get_Capacity();
    public void set_Capacity(int value);
    [CompilerGeneratedAttribute]
public sealed virtual int get_Count();
    [CompilerGeneratedAttribute]
private void set_Count(int value);
    private int DequeIndexToBufferIndex(int index);
    private T DoGetItem(int index);
    private void DoSetItem(int index, T item);
    private void DoInsert(int index, T item);
    private void DoRemoveAt(int index);
    private int PostIncrement(int value);
    private int PreDecrement(int value);
    private void DoAddToBack(T value);
    private void DoAddToFront(T value);
    private T DoRemoveFromBack();
    private T DoRemoveFromFront();
    private void DoInsertRange(int index, IReadOnlyCollection`1<T> collection);
    private void DoRemoveRange(int index, int collectionCount);
    private void EnsureCapacityForOneElement();
    public void AddToBack(T value);
    public void AddToFront(T value);
    public void InsertRange(int index, IEnumerable`1<T> collection);
    public void RemoveRange(int offset, int count);
    public T RemoveFromBack();
    public T RemoveFromFront();
    public sealed virtual void Clear();
    public T[] ToArray();
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
[AttributeUsageAttribute("27524")]
internal class System.Runtime.CompilerServices.NullableAttribute : Attribute {
    public Byte[] NullableFlags;
    public NullableAttribute(byte );
    public NullableAttribute(Byte[] );
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
[AttributeUsageAttribute("5196")]
internal class System.Runtime.CompilerServices.NullableContextAttribute : Attribute {
    public byte Flag;
    public NullableContextAttribute(byte );
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
[AttributeUsageAttribute("2")]
internal class System.Runtime.CompilerServices.RefSafetyRulesAttribute : Attribute {
    public int Version;
    public RefSafetyRulesAttribute(int );
}
