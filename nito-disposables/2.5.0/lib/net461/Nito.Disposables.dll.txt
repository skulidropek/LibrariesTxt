[CompilerGeneratedAttribute]
[EmbeddedAttribute]
internal class Microsoft.CodeAnalysis.EmbeddedAttribute : Attribute {
}
[NullableContextAttribute("2")]
[NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public class Nito.Disposables.AnonymousDisposable : SingleDisposable`1<Action> {
    public AnonymousDisposable(Action dispose);
    protected virtual void Dispose(Action context);
    public void Add(Action dispose);
    [NullableContextAttribute("1")]
public static AnonymousDisposable Create(Action dispose);
}
[NullableContextAttribute("1")]
[NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public class Nito.Disposables.CollectionDisposable : SingleDisposable`1<ImmutableQueue`1<IDisposable>> {
    public CollectionDisposable(IDisposable[] disposables);
    public CollectionDisposable(IEnumerable`1<IDisposable> disposables);
    protected virtual void Dispose(ImmutableQueue`1<IDisposable> context);
    [NullableContextAttribute("2")]
public bool TryAdd(IDisposable disposable);
    [NullableContextAttribute("2")]
public void Add(IDisposable disposable);
    public IEnumerable`1<IDisposable> Abandon();
    public static CollectionDisposable Create(IDisposable[] disposables);
    public static CollectionDisposable Create(IEnumerable`1<IDisposable> disposables);
}
[NullableContextAttribute("2")]
[NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public class Nito.Disposables.Disposable : SingleDisposable`1<Action> {
    public Disposable(Action dispose);
    protected virtual void Dispose(Action context);
    public bool TryAdd(Action dispose);
    public void Add(Action dispose);
    public Action Abandon();
    [NullableContextAttribute("1")]
public static Disposable Create(Action dispose);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Nito.Disposables.Internals.BoundActionField`1 : object {
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private BoundAction<T> _field;
    public bool IsEmpty { get; }
    public BoundActionField`1(Action`1<T> action, T context);
    public bool get_IsEmpty();
    public IBoundAction<T> TryGetAndUnset();
    public bool TryUpdateContext(Func`2<T, T> contextUpdater);
}
[ExtensionAttribute]
public static class Nito.Disposables.Internals.EnumerableExtensions : object {
    [NullableContextAttribute("1")]
[ExtensionAttribute]
public static IEnumerable`1<T> WhereNotNull(IEnumerable`1<T> source);
}
[NullableContextAttribute("2")]
public interface Nito.Disposables.Internals.IReferenceCounter {
    public abstract virtual bool TryIncrementCount();
    public abstract virtual object TryDecrementCount();
    public abstract virtual object TryGetTarget();
}
[NullableContextAttribute("1")]
[NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public class Nito.Disposables.Internals.ReferenceCountedDisposable`1 : SingleDisposable`1<IReferenceCounter> {
    [NullableAttribute("2")]
private T Nito.Disposables.IReferenceCountedDisposable<T>.Target { get; }
    private IReferenceCounter ReferenceCounter { get; }
    public ReferenceCountedDisposable`1(IReferenceCounter referenceCounter);
    protected virtual void Dispose(IReferenceCounter context);
    [NullableContextAttribute("2")]
private sealed virtual override T Nito.Disposables.IReferenceCountedDisposable<T>.get_Target();
    private sealed virtual override IReferenceCountedDisposable`1<T> Nito.Disposables.IReferenceCountedDisposable<T>.AddReference();
    private sealed virtual override IWeakReferenceCountedDisposable`1<T> Nito.Disposables.IReferenceCountedDisposable<T>.AddWeakReference();
    private IReferenceCounter get_ReferenceCounter();
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
public class Nito.Disposables.Internals.ReferenceCounter : object {
    private object _target;
    private int _count;
    public ReferenceCounter(object target);
    private sealed virtual override bool Nito.Disposables.Internals.IReferenceCounter.TryIncrementCount();
    private sealed virtual override object Nito.Disposables.Internals.IReferenceCounter.TryDecrementCount();
    private sealed virtual override object Nito.Disposables.Internals.IReferenceCounter.TryGetTarget();
    [NullableContextAttribute("1")]
private Nullable`1<int> TryUpdate(Func`2<int, int> func);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public static class Nito.Disposables.Internals.ReferenceCounterEphemerons : object {
    private static ConditionalWeakTable`2<object, IReferenceCounter> Ephemerons;
    private static ReferenceCounterEphemerons();
    public static IReferenceCounter TryGetAndIncrementOrCreate(object target);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Nito.Disposables.Internals.WeakReferenceCountedDisposable`1 : object {
    private WeakReference`1<IReferenceCounter> _weakReference;
    public WeakReferenceCountedDisposable`1(IReferenceCounter referenceCounter);
    private sealed virtual override IReferenceCountedDisposable`1<T> Nito.Disposables.IWeakReferenceCountedDisposable<T>.TryAddReference();
    [NullableContextAttribute("2")]
private sealed virtual override T Nito.Disposables.IWeakReferenceCountedDisposable<T>.TryGetTarget();
}
[NullableContextAttribute("1")]
public interface Nito.Disposables.IReferenceCountedDisposable`1 {
    [NullableAttribute("2")]
public T Target { get; }
    public bool IsDisposeStarted { get; }
    public bool IsDisposed { get; }
    public bool IsDisposing { get; }
    public abstract virtual IWeakReferenceCountedDisposable`1<T> AddWeakReference();
    public abstract virtual IReferenceCountedDisposable`1<T> AddReference();
    [NullableContextAttribute("2")]
public abstract virtual T get_Target();
    public abstract virtual bool get_IsDisposeStarted();
    public abstract virtual bool get_IsDisposed();
    public abstract virtual bool get_IsDisposing();
}
[NullableContextAttribute("1")]
public interface Nito.Disposables.IWeakReferenceCountedDisposable`1 {
    public abstract virtual IReferenceCountedDisposable`1<T> TryAddReference();
    [NullableContextAttribute("2")]
public abstract virtual T TryGetTarget();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Nito.Disposables.NoopDisposable : object {
    [CompilerGeneratedAttribute]
private static NoopDisposable <Instance>k__BackingField;
    public static NoopDisposable Instance { get; }
    private static NoopDisposable();
    public sealed virtual void Dispose();
    [CompilerGeneratedAttribute]
public static NoopDisposable get_Instance();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public static class Nito.Disposables.ReferenceCountedDisposable : object {
    public static IReferenceCountedDisposable`1<T> Create(T disposable);
    public static IReferenceCountedDisposable`1<T> TryCreate(T disposable);
    public static IReferenceCountedDisposable`1<T> CreateWithNewReferenceCounter(T disposable);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public abstract class Nito.Disposables.SingleDisposable`1 : object {
    private BoundActionField`1<T> _context;
    private TaskCompletionSource`1<object> _tcs;
    public bool IsDisposeStarted { get; }
    public bool IsDisposed { get; }
    public bool IsDisposing { get; }
    protected SingleDisposable`1(T context);
    public sealed virtual bool get_IsDisposeStarted();
    public sealed virtual bool get_IsDisposed();
    public sealed virtual bool get_IsDisposing();
    protected abstract virtual void Dispose(T context);
    public sealed virtual void Dispose();
    protected bool TryUpdateContext(Func`2<T, T> contextUpdater);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public abstract class Nito.Disposables.SingleNonblockingDisposable`1 : object {
    private BoundActionField`1<T> _context;
    public bool IsDisposed { get; }
    protected SingleNonblockingDisposable`1(T context);
    public bool get_IsDisposed();
    protected abstract virtual void Dispose(T context);
    public sealed virtual void Dispose();
    protected bool TryUpdateContext(Func`2<T, T> contextUpdater);
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
[AttributeUsageAttribute("27524")]
internal class System.Runtime.CompilerServices.NullableAttribute : Attribute {
    public Byte[] NullableFlags;
    public NullableAttribute(byte );
    public NullableAttribute(Byte[] );
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
[AttributeUsageAttribute("5196")]
internal class System.Runtime.CompilerServices.NullableContextAttribute : Attribute {
    public byte Flag;
    public NullableContextAttribute(byte );
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
[AttributeUsageAttribute("2")]
internal class System.Runtime.CompilerServices.RefSafetyRulesAttribute : Attribute {
    public int Version;
    public RefSafetyRulesAttribute(int );
}
