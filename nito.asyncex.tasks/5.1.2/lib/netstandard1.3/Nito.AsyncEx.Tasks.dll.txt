internal static class ExceptionHelpers : object {
    [NullableContextAttribute("1")]
public static Exception PrepareForRethrow(Exception exception);
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
internal class Microsoft.CodeAnalysis.EmbeddedAttribute : Attribute {
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[IsReadOnlyAttribute]
public class Nito.AsyncEx.AwaitableDisposable`1 : ValueType {
    private Task`1<T> _task;
    public AwaitableDisposable`1(Task`1<T> task);
    public Task`1<T> AsTask();
    public static Task`1<T> op_Implicit(AwaitableDisposable`1<T> source);
    public TaskAwaiter`1<T> GetAwaiter();
    public ConfiguredTaskAwaitable`1<T> ConfigureAwait(bool continueOnCapturedContext);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Nito.AsyncEx.CancellationTokenTaskSource`1 : object {
    [NullableAttribute("2")]
private IDisposable _registration;
    [CompilerGeneratedAttribute]
private Task`1<T> <Task>k__BackingField;
    public Task`1<T> Task { get; private set; }
    public CancellationTokenTaskSource`1(CancellationToken cancellationToken);
    [CompilerGeneratedAttribute]
public Task`1<T> get_Task();
    [CompilerGeneratedAttribute]
private void set_Task(Task`1<T> value);
    public sealed virtual void Dispose();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public static class Nito.AsyncEx.Interop.ApmAsyncFactory : object {
    public static IAsyncResult ToBegin(Task task, AsyncCallback callback, object state);
    [AsyncStateMachineAttribute("Nito.AsyncEx.Interop.ApmAsyncFactory/<CompleteAsync>d__1")]
private static void CompleteAsync(Task task, AsyncCallback callback, TaskCompletionSource`1<object> tcs);
    public static void ToEnd(IAsyncResult asyncResult);
    public static IAsyncResult ToBegin(Task`1<TResult> task, AsyncCallback callback, object state);
    [AsyncStateMachineAttribute("Nito.AsyncEx.Interop.ApmAsyncFactory/<CompleteAsync>d__4`1")]
private static void CompleteAsync(Task`1<TResult> task, AsyncCallback callback, TaskCompletionSource`1<TResult> tcs);
    public static TResult ToEnd(IAsyncResult asyncResult);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Nito.AsyncEx.Interop.EventArguments`2 : ValueType {
    [CompilerGeneratedAttribute]
private TSender <Sender>k__BackingField;
    [CompilerGeneratedAttribute]
private TEventArgs <EventArgs>k__BackingField;
    public TSender Sender { get; public set; }
    public TEventArgs EventArgs { get; public set; }
    [IsReadOnlyAttribute]
[CompilerGeneratedAttribute]
public TSender get_Sender();
    [CompilerGeneratedAttribute]
public void set_Sender(TSender value);
    [IsReadOnlyAttribute]
[CompilerGeneratedAttribute]
public TEventArgs get_EventArgs();
    [CompilerGeneratedAttribute]
public void set_EventArgs(TEventArgs value);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public static class Nito.AsyncEx.Interop.EventAsyncFactory : object {
    [AsyncStateMachineAttribute("Nito.AsyncEx.Interop.EventAsyncFactory/<FromAnyEvent>d__0`2")]
public static Task`1<TEventArguments> FromAnyEvent(Func`2<Action`1<TEventArguments>, TDelegate> convert, Action`1<TDelegate> subscribe, Action`1<TDelegate> unsubscribe, CancellationToken cancellationToken, bool unsubscribeOnCapturedContext);
    public static Task`1<TEventArguments> FromAnyEvent(Func`2<Action`1<TEventArguments>, TDelegate> convert, Action`1<TDelegate> subscribe, Action`1<TDelegate> unsubscribe, CancellationToken cancellationToken);
    public static Task`1<TEventArguments> FromAnyEvent(Func`2<Action`1<TEventArguments>, TDelegate> convert, Action`1<TDelegate> subscribe, Action`1<TDelegate> unsubscribe);
    public static Task`1<EventArguments`2<object, EventArgs>> FromEvent(Action`1<EventHandler> subscribe, Action`1<EventHandler> unsubscribe, CancellationToken cancellationToken, bool unsubscribeOnCapturedContext);
    public static Task`1<EventArguments`2<object, EventArgs>> FromEvent(Action`1<EventHandler> subscribe, Action`1<EventHandler> unsubscribe, CancellationToken cancellationToken);
    public static Task`1<EventArguments`2<object, EventArgs>> FromEvent(Action`1<EventHandler> subscribe, Action`1<EventHandler> unsubscribe);
    public static Task`1<EventArguments`2<object, TEventArgs>> FromEvent(Action`1<EventHandler`1<TEventArgs>> subscribe, Action`1<EventHandler`1<TEventArgs>> unsubscribe, CancellationToken cancellationToken, bool unsubscribeOnCapturedContext);
    public static Task`1<EventArguments`2<object, TEventArgs>> FromEvent(Action`1<EventHandler`1<TEventArgs>> subscribe, Action`1<EventHandler`1<TEventArgs>> unsubscribe, CancellationToken cancellationToken);
    public static Task`1<EventArguments`2<object, TEventArgs>> FromEvent(Action`1<EventHandler`1<TEventArgs>> subscribe, Action`1<EventHandler`1<TEventArgs>> unsubscribe);
    public static Task`1<EventArguments`2<object, TEventArgs>> FromEvent(Func`2<EventHandler`1<TEventArgs>, TDelegate> convert, Action`1<TDelegate> subscribe, Action`1<TDelegate> unsubscribe, CancellationToken cancellationToken, bool unsubscribeOnCapturedContext);
    public static Task`1<EventArguments`2<object, TEventArgs>> FromEvent(Func`2<EventHandler`1<TEventArgs>, TDelegate> convert, Action`1<TDelegate> subscribe, Action`1<TDelegate> unsubscribe, CancellationToken cancellationToken);
    public static Task`1<EventArguments`2<object, TEventArgs>> FromEvent(Func`2<EventHandler`1<TEventArgs>, TDelegate> convert, Action`1<TDelegate> subscribe, Action`1<TDelegate> unsubscribe);
    public static Task`1<EventArguments`2<TSender, TEventArgs>> FromActionEvent(Action`1<Action`2<TSender, TEventArgs>> subscribe, Action`1<Action`2<TSender, TEventArgs>> unsubscribe, CancellationToken cancellationToken, bool unsubscribeOnCapturedContext);
    public static Task`1<EventArguments`2<TSender, TEventArgs>> FromActionEvent(Action`1<Action`2<TSender, TEventArgs>> subscribe, Action`1<Action`2<TSender, TEventArgs>> unsubscribe, CancellationToken cancellationToken);
    public static Task`1<EventArguments`2<TSender, TEventArgs>> FromActionEvent(Action`1<Action`2<TSender, TEventArgs>> subscribe, Action`1<Action`2<TSender, TEventArgs>> unsubscribe);
    public static Task`1<TEventArgs> FromActionEvent(Action`1<Action`1<TEventArgs>> subscribe, Action`1<Action`1<TEventArgs>> unsubscribe, CancellationToken cancellationToken, bool unsubscribeOnCapturedContext);
    public static Task`1<TEventArgs> FromActionEvent(Action`1<Action`1<TEventArgs>> subscribe, Action`1<Action`1<TEventArgs>> unsubscribe, CancellationToken cancellationToken);
    public static Task`1<TEventArgs> FromActionEvent(Action`1<Action`1<TEventArgs>> subscribe, Action`1<Action`1<TEventArgs>> unsubscribe);
    public static Task FromActionEvent(Action`1<Action> subscribe, Action`1<Action> unsubscribe, CancellationToken cancellationToken, bool unsubscribeOnCapturedContext);
    public static Task FromActionEvent(Action`1<Action> subscribe, Action`1<Action> unsubscribe, CancellationToken cancellationToken);
    public static Task FromActionEvent(Action`1<Action> subscribe, Action`1<Action> unsubscribe);
    private static EventArguments`2<TSender, TEventArgs> CreateEventArguments(TSender sender, TEventArgs eventArgs);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ExtensionAttribute]
public static class Nito.AsyncEx.SemaphoreSlimExtensions : object {
    [AsyncStateMachineAttribute("Nito.AsyncEx.SemaphoreSlimExtensions/<DoLockAsync>d__0")]
private static Task`1<IDisposable> DoLockAsync(SemaphoreSlim this, CancellationToken cancellationToken);
    [ExtensionAttribute]
public static AwaitableDisposable`1<IDisposable> LockAsync(SemaphoreSlim this, CancellationToken cancellationToken);
    [ExtensionAttribute]
public static AwaitableDisposable`1<IDisposable> LockAsync(SemaphoreSlim this);
    [ExtensionAttribute]
public static IDisposable Lock(SemaphoreSlim this, CancellationToken cancellationToken);
    [ExtensionAttribute]
public static IDisposable Lock(SemaphoreSlim this);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ExtensionAttribute]
public static class Nito.AsyncEx.SynchronizationContextExtensions : object {
    [ExtensionAttribute]
public static void Send(SynchronizationContext this, Action action);
    [ExtensionAttribute]
public static T Send(SynchronizationContext this, Func`1<T> action);
    [ExtensionAttribute]
public static Task PostAsync(SynchronizationContext this, Action action);
    [ExtensionAttribute]
public static Task`1<T> PostAsync(SynchronizationContext this, Func`1<T> action);
    [ExtensionAttribute]
public static Task PostAsync(SynchronizationContext this, Func`1<Task> action);
    [ExtensionAttribute]
public static Task`1<T> PostAsync(SynchronizationContext this, Func`1<Task`1<T>> action);
}
[NullableContextAttribute("1")]
[NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public class Nito.AsyncEx.SynchronizationContextSwitcher : SingleDisposable`1<object> {
    [NullableAttribute("2")]
private SynchronizationContext _oldContext;
    [NullableContextAttribute("2")]
private SynchronizationContextSwitcher(SynchronizationContext newContext);
    protected virtual void Dispose(object context);
    public static void NoContext(Action action);
    public static T NoContext(Func`1<T> action);
    public static void ApplyContext(SynchronizationContext context, Action action);
    public static T ApplyContext(SynchronizationContext context, Func`1<T> action);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ExtensionAttribute]
public static class Nito.AsyncEx.Synchronous.TaskExtensions : object {
    [ExtensionAttribute]
public static void WaitAndUnwrapException(Task task);
    [ExtensionAttribute]
public static void WaitAndUnwrapException(Task task, CancellationToken cancellationToken);
    [ExtensionAttribute]
public static TResult WaitAndUnwrapException(Task`1<TResult> task);
    [ExtensionAttribute]
public static TResult WaitAndUnwrapException(Task`1<TResult> task, CancellationToken cancellationToken);
    [ExtensionAttribute]
public static void WaitWithoutException(Task task);
    [ExtensionAttribute]
public static void WaitWithoutException(Task task, CancellationToken cancellationToken);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ExtensionAttribute]
public static class Nito.AsyncEx.TaskCompletionSourceExtensions : object {
    [ExtensionAttribute]
public static bool TryCompleteFromCompletedTask(TaskCompletionSource`1<TResult> this, Task`1<TSourceResult> task);
    [ExtensionAttribute]
public static bool TryCompleteFromCompletedTask(TaskCompletionSource`1<TResult> this, Task task, Func`1<TResult> resultFunc);
    public static TaskCompletionSource`1<TResult> CreateAsyncTaskSource();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public static class Nito.AsyncEx.TaskConstants : object {
    private static Task`1<bool> booleanTrue;
    private static Task`1<int> intNegativeOne;
    public static Task`1<bool> BooleanTrue { get; }
    public static Task`1<bool> BooleanFalse { get; }
    public static Task`1<int> Int32Zero { get; }
    public static Task`1<int> Int32NegativeOne { get; }
    public static Task Completed { get; }
    public static Task Canceled { get; }
    private static TaskConstants();
    public static Task`1<bool> get_BooleanTrue();
    public static Task`1<bool> get_BooleanFalse();
    public static Task`1<int> get_Int32Zero();
    public static Task`1<int> get_Int32NegativeOne();
    public static Task get_Completed();
    public static Task get_Canceled();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public static class Nito.AsyncEx.TaskConstants`1 : object {
    private static Task`1<T> defaultValue;
    private static Task`1<T> canceled;
    public static Task`1<T> Default { get; }
    public static Task`1<T> Canceled { get; }
    private static TaskConstants`1();
    public static Task`1<T> get_Default();
    public static Task`1<T> get_Canceled();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ExtensionAttribute]
public static class Nito.AsyncEx.TaskExtensions : object {
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[CompilerGeneratedAttribute]
private static Func`1<object> <NullResultFunc>k__BackingField;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private static Func`1<object> NullResultFunc { get; }
    private static TaskExtensions();
    [ExtensionAttribute]
public static Task WaitAsync(Task this, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Nito.AsyncEx.TaskExtensions/<DoWaitAsync>d__1")]
private static Task DoWaitAsync(Task task, CancellationToken cancellationToken);
    [ExtensionAttribute]
public static Task`1<TResult> WaitAsync(Task`1<TResult> this, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Nito.AsyncEx.TaskExtensions/<DoWaitAsync>d__3`1")]
private static Task`1<TResult> DoWaitAsync(Task`1<TResult> task, CancellationToken cancellationToken);
    [ExtensionAttribute]
public static Task`1<Task> WhenAny(IEnumerable`1<Task> this, CancellationToken cancellationToken);
    [ExtensionAttribute]
public static Task`1<Task> WhenAny(IEnumerable`1<Task> this);
    [ExtensionAttribute]
public static Task`1<Task`1<TResult>> WhenAny(IEnumerable`1<Task`1<TResult>> this, CancellationToken cancellationToken);
    [ExtensionAttribute]
public static Task`1<Task`1<TResult>> WhenAny(IEnumerable`1<Task`1<TResult>> this);
    [ExtensionAttribute]
public static Task WhenAll(IEnumerable`1<Task> this);
    [ExtensionAttribute]
public static Task`1<TResult[]> WhenAll(IEnumerable`1<Task`1<TResult>> this);
    [AsyncStateMachineAttribute("Nito.AsyncEx.TaskExtensions/<Ignore>d__10")]
[ExtensionAttribute]
[EditorBrowsableAttribute("1")]
public static void Ignore(Task this);
    [AsyncStateMachineAttribute("Nito.AsyncEx.TaskExtensions/<Ignore>d__11`1")]
[ExtensionAttribute]
[EditorBrowsableAttribute("1")]
public static void Ignore(Task`1<T> this);
    [ExtensionAttribute]
public static List`1<Task`1<T>> OrderByCompletion(IEnumerable`1<Task`1<T>> this);
    [ExtensionAttribute]
public static List`1<Task> OrderByCompletion(IEnumerable`1<Task> this);
    [CompilerGeneratedAttribute]
private static Func`1<object> get_NullResultFunc();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ExtensionAttribute]
public static class Nito.AsyncEx.TaskFactoryExtensions : object {
    [ExtensionAttribute]
public static Task Run(TaskFactory this, Action action);
    [ExtensionAttribute]
public static Task`1<TResult> Run(TaskFactory this, Func`1<TResult> action);
    [ExtensionAttribute]
public static Task Run(TaskFactory this, Func`1<Task> action);
    [ExtensionAttribute]
public static Task`1<TResult> Run(TaskFactory this, Func`1<Task`1<TResult>> action);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public static class Nito.AsyncEx.TaskHelper : object {
    [AsyncStateMachineAttribute("Nito.AsyncEx.TaskHelper/<ExecuteAsTask>d__0")]
public static Task ExecuteAsTask(Action func);
    [AsyncStateMachineAttribute("Nito.AsyncEx.TaskHelper/<ExecuteAsTask>d__1`1")]
public static Task`1<T> ExecuteAsTask(Func`1<T> func);
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
internal class System.Runtime.CompilerServices.IsReadOnlyAttribute : Attribute {
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
[AttributeUsageAttribute("27524")]
internal class System.Runtime.CompilerServices.NullableAttribute : Attribute {
    public Byte[] NullableFlags;
    public NullableAttribute(byte );
    public NullableAttribute(Byte[] );
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
[AttributeUsageAttribute("5196")]
internal class System.Runtime.CompilerServices.NullableContextAttribute : Attribute {
    public byte Flag;
    public NullableContextAttribute(byte );
}
