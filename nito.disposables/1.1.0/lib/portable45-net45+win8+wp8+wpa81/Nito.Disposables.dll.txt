public class Nito.Disposables.AnonymousDisposable : SingleDisposable`1<Action> {
    public AnonymousDisposable(Action dispose);
    protected virtual void Dispose(Action context);
    public void Add(Action dispose);
    public static AnonymousDisposable Create(Action dispose);
}
public class Nito.Disposables.CollectionDisposable : SingleDisposable`1<ImmutableQueue`1<IDisposable>> {
    public CollectionDisposable(IDisposable[] disposables);
    public CollectionDisposable(IEnumerable`1<IDisposable> disposables);
    protected virtual void Dispose(ImmutableQueue`1<IDisposable> context);
    public void Add(IDisposable disposable);
    public static CollectionDisposable Create(IDisposable[] disposables);
    public static CollectionDisposable Create(IEnumerable`1<IDisposable> disposables);
}
public class Nito.Disposables.Internals.BoundActionField`1 : object {
    private BoundAction<T> field;
    public bool IsEmpty { get; }
    public BoundActionField`1(Action`1<T> action, T context);
    public bool get_IsEmpty();
    public IBoundAction<T> TryGetAndUnset();
    public bool TryUpdateContext(Func`2<T, T> contextUpdater);
}
public abstract class Nito.Disposables.SingleDisposable`1 : object {
    private BoundActionField`1<T> _context;
    private ManualResetEventSlim _mre;
    public bool IsDisposeStarted { get; }
    public bool IsDispoed { get; }
    public bool IsDisposing { get; }
    protected SingleDisposable`1(T context);
    public bool get_IsDisposeStarted();
    public bool get_IsDispoed();
    public bool get_IsDisposing();
    protected abstract virtual void Dispose(T context);
    public sealed virtual void Dispose();
    protected bool TryUpdateContext(Func`2<T, T> contextUpdater);
}
public abstract class Nito.Disposables.SingleNonblockingDisposable`1 : object {
    private BoundActionField`1<T> _context;
    public bool IsDisposed { get; }
    protected SingleNonblockingDisposable`1(T context);
    public bool get_IsDisposed();
    protected abstract virtual void Dispose(T context);
    public sealed virtual void Dispose();
    protected bool TryUpdateContext(Func`2<T, T> contextUpdater);
}
