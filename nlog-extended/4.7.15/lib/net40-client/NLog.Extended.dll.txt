[LayoutRendererAttribute("appsetting")]
public class NLog.LayoutRenderers.AppSettingLayoutRenderer : LayoutRenderer {
    private IConfigurationManager configurationManager;
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Default>k__BackingField;
    private bool _cachedAppSettingValue;
    private string _appSettingValue;
    [RequiredParameterAttribute]
[DefaultParameterAttribute]
public string Name { get; public set; }
    public string Item { get; public set; }
    public string Default { get; public set; }
    internal IConfigurationManager ConfigurationManager { get; internal set; }
    private string AppSettingValue { get; }
    [CompilerGeneratedAttribute]
public string get_Name();
    [CompilerGeneratedAttribute]
public void set_Name(string value);
    public string get_Item();
    public void set_Item(string value);
    [CompilerGeneratedAttribute]
public string get_Default();
    [CompilerGeneratedAttribute]
public void set_Default(string value);
    internal IConfigurationManager get_ConfigurationManager();
    internal void set_ConfigurationManager(IConfigurationManager value);
    protected virtual void Append(StringBuilder builder, LogEventInfo logEvent);
    private string get_AppSettingValue();
}
internal class NLog.Targets.MessageQueueProxy : object {
    public virtual bool Exists(string queue);
    public virtual void Create(string queue);
    public virtual void Send(string queue, Message message);
}
[TargetAttribute("MSMQ")]
public class NLog.Targets.MessageQueueTarget : TargetWithLayout {
    private MessagePriority messagePriority;
    [CompilerGeneratedAttribute]
private Layout <Queue>k__BackingField;
    [CompilerGeneratedAttribute]
private Layout <Label>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <CreateQueueIfNotExists>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <Recoverable>k__BackingField;
    [CompilerGeneratedAttribute]
private Encoding <Encoding>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <UseXmlEncoding>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <CheckIfQueueExists>k__BackingField;
    [CompilerGeneratedAttribute]
private MessageQueueProxy <MessageQueueProxy>k__BackingField;
    [RequiredParameterAttribute]
public Layout Queue { get; public set; }
    [DefaultValueAttribute("NLog")]
public Layout Label { get; public set; }
    [DefaultValueAttribute("False")]
public bool CreateQueueIfNotExists { get; public set; }
    [DefaultValueAttribute("False")]
public bool Recoverable { get; public set; }
    public Encoding Encoding { get; public set; }
    [DefaultValueAttribute("False")]
public bool UseXmlEncoding { get; public set; }
    [DefaultValueAttribute("True")]
public bool CheckIfQueueExists { get; public set; }
    internal MessageQueueProxy MessageQueueProxy { get; internal set; }
    public MessageQueueTarget(string name);
    [CompilerGeneratedAttribute]
public Layout get_Queue();
    [CompilerGeneratedAttribute]
public void set_Queue(Layout value);
    [CompilerGeneratedAttribute]
public Layout get_Label();
    [CompilerGeneratedAttribute]
public void set_Label(Layout value);
    [CompilerGeneratedAttribute]
public bool get_CreateQueueIfNotExists();
    [CompilerGeneratedAttribute]
public void set_CreateQueueIfNotExists(bool value);
    [CompilerGeneratedAttribute]
public bool get_Recoverable();
    [CompilerGeneratedAttribute]
public void set_Recoverable(bool value);
    [CompilerGeneratedAttribute]
public Encoding get_Encoding();
    [CompilerGeneratedAttribute]
public void set_Encoding(Encoding value);
    [CompilerGeneratedAttribute]
public bool get_UseXmlEncoding();
    [CompilerGeneratedAttribute]
public void set_UseXmlEncoding(bool value);
    [CompilerGeneratedAttribute]
public bool get_CheckIfQueueExists();
    [CompilerGeneratedAttribute]
public void set_CheckIfQueueExists(bool value);
    [CompilerGeneratedAttribute]
internal MessageQueueProxy get_MessageQueueProxy();
    [CompilerGeneratedAttribute]
internal void set_MessageQueueProxy(MessageQueueProxy value);
    protected virtual void Write(LogEventInfo logEvent);
    protected virtual Message PrepareMessage(LogEventInfo logEvent);
    private static bool IsFormatNameSyntax(string queue);
}
