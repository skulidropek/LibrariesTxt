[ExtensionAttribute]
internal static class NLog.Extensions.Logging.ActivityExtensions : object {
    [ExtensionAttribute]
public static string GetSpanId(Activity activity);
    [ExtensionAttribute]
public static string GetTraceId(Activity activity);
    [ExtensionAttribute]
public static string GetParentId(Activity activity);
}
[LayoutRendererAttribute("configsetting")]
[ThreadAgnosticAttribute]
public class NLog.Extensions.Logging.ConfigSettingLayoutRenderer : LayoutRenderer {
    private IConfiguration _serviceConfiguration;
    [CompilerGeneratedAttribute]
private static IConfiguration <DefaultConfiguration>k__BackingField;
    private string _item;
    private string _itemLookup;
    [CompilerGeneratedAttribute]
private string <Default>k__BackingField;
    public static IConfiguration DefaultConfiguration { get; public set; }
    [RequiredParameterAttribute]
[DefaultParameterAttribute]
public string Item { get; public set; }
    [ObsoleteAttribute("Replaced by Item-property")]
public string Name { get; public set; }
    public string Default { get; public set; }
    [CompilerGeneratedAttribute]
public static IConfiguration get_DefaultConfiguration();
    [CompilerGeneratedAttribute]
public static void set_DefaultConfiguration(IConfiguration value);
    public string get_Item();
    public void set_Item(string value);
    public string get_Name();
    public void set_Name(string value);
    [CompilerGeneratedAttribute]
public string get_Default();
    [CompilerGeneratedAttribute]
public void set_Default(string value);
    protected virtual void InitializeLayoutRenderer();
    protected virtual void Append(StringBuilder builder, LogEventInfo logEvent);
}
[ExtensionAttribute]
public static class NLog.Extensions.Logging.ConfigureExtensions : object {
    [ExtensionAttribute]
[ObsoleteAttribute("Instead use ILoggingBuilder.AddNLog() or IHostBuilder.UseNLog()")]
public static ILoggerFactory AddNLog(ILoggerFactory factory);
    [ExtensionAttribute]
[ObsoleteAttribute("Instead use ILoggingBuilder.AddNLog() or IHostBuilder.UseNLog()")]
public static ILoggerFactory AddNLog(ILoggerFactory factory, NLogProviderOptions options);
    [ExtensionAttribute]
[ObsoleteAttribute("Instead use ILoggingBuilder.AddNLog() or IHostBuilder.UseNLog()")]
public static ILoggerFactory AddNLog(ILoggerFactory factory, IConfiguration configuration);
    [ExtensionAttribute]
public static ILoggingBuilder AddNLog(ILoggingBuilder builder);
    [ExtensionAttribute]
public static ILoggingBuilder AddNLog(ILoggingBuilder builder, IConfiguration configuration);
    [ExtensionAttribute]
public static ILoggingBuilder AddNLog(ILoggingBuilder builder, IConfiguration configuration, NLogProviderOptions options);
    [ExtensionAttribute]
public static ILoggingBuilder AddNLog(ILoggingBuilder builder, NLogProviderOptions options);
    [ExtensionAttribute]
public static ILoggingBuilder AddNLog(ILoggingBuilder builder, LoggingConfiguration configuration);
    [ExtensionAttribute]
public static ILoggingBuilder AddNLog(ILoggingBuilder builder, LoggingConfiguration configuration, NLogProviderOptions options);
    [ExtensionAttribute]
public static ILoggingBuilder AddNLog(ILoggingBuilder builder, string configFileRelativePath);
    [ExtensionAttribute]
public static ILoggingBuilder AddNLog(ILoggingBuilder builder, Func`2<IServiceProvider, LogFactory> factoryBuilder);
    [ExtensionAttribute]
public static ILoggingBuilder AddNLog(ILoggingBuilder builder, NLogProviderOptions options, Func`2<IServiceProvider, LogFactory> factoryBuilder);
    private static void AddNLogLoggerProvider(ILoggingBuilder builder, IConfiguration hostConfiguration, NLogProviderOptions options, Func`4<IServiceProvider, IConfiguration, NLogProviderOptions, NLogLoggerProvider> factory);
    [ExtensionAttribute]
[ObsoleteAttribute("Instead use NLog.LogManager.Setup().LoadConfigurationFromFile()")]
public static LoggingConfiguration ConfigureNLog(ILoggerFactory loggerFactory, string configFileRelativePath);
    [ExtensionAttribute]
[ObsoleteAttribute("Instead assign property NLog.LogManager.Configuration")]
public static LoggingConfiguration ConfigureNLog(ILoggerFactory loggerFactory, LoggingConfiguration config);
    [ExtensionAttribute]
public static NLogLoggerProvider Configure(NLogLoggerProvider nlogProvider, IConfigurationSection configurationSection);
    [ExtensionAttribute]
public static NLogProviderOptions Configure(NLogProviderOptions options, IConfigurationSection configurationSection);
    private static NLogLoggerProvider CreateNLogLoggerProvider(IServiceProvider serviceProvider, IConfiguration hostConfiguration, NLogProviderOptions options);
    private static NLogLoggerProvider CreateNLogLoggerProvider(IServiceProvider serviceProvider, IConfiguration hostConfiguration, NLogProviderOptions options, LogFactory logFactory);
}
[FlagsAttribute]
public enum NLog.Extensions.Logging.EventIdCaptureType : Enum {
    public int value__;
    public static EventIdCaptureType None;
    public static EventIdCaptureType EventId;
    public static EventIdCaptureType EventName;
    public static EventIdCaptureType EventIdStruct;
    public static EventIdCaptureType EventId_Id;
    public static EventIdCaptureType EventId_Name;
    public static EventIdCaptureType Legacy;
}
internal static class NLog.Extensions.Logging.Guard : object {
    internal static T ThrowIfNull(T arg, string param);
}
[LayoutAttribute("MicrosoftConsoleJsonLayout")]
[ThreadAgnosticAttribute]
public class NLog.Extensions.Logging.MicrosoftConsoleJsonLayout : JsonLayout {
    private static String[] EventIdMapper;
    [ArrayParameterAttribute("NLog.Layouts.JsonAttribute", "state")]
public IList`1<JsonAttribute> StateAttributes { get; }
    public bool IncludeScopes { get; public set; }
    public string TimestampFormat { get; public set; }
    private static MicrosoftConsoleJsonLayout();
    public IList`1<JsonAttribute> get_StateAttributes();
    public bool get_IncludeScopes();
    public void set_IncludeScopes(bool value);
    public string get_TimestampFormat();
    public void set_TimestampFormat(string value);
    private int LookupNamedAttributeIndex(string attributeName);
    private static string LookupEventId(LogEventInfo logEvent);
    private static string ConvertEventId(int eventId);
    private static string ConvertLogLevel(LogLevel logLevel);
}
[LayoutRendererAttribute("MicrosoftConsoleLayout")]
[ThreadAgnosticAttribute]
internal class NLog.Extensions.Logging.MicrosoftConsoleLayoutRenderer : LayoutRenderer {
    private static String[] EventIdMapper;
    private string _timestampFormat;
    private string _timestampFormatString;
    [CompilerGeneratedAttribute]
private bool <UseUtcTimestamp>k__BackingField;
    public string TimestampFormat { get; public set; }
    public bool UseUtcTimestamp { get; public set; }
    private static MicrosoftConsoleLayoutRenderer();
    public string get_TimestampFormat();
    public void set_TimestampFormat(string value);
    [CompilerGeneratedAttribute]
public bool get_UseUtcTimestamp();
    [CompilerGeneratedAttribute]
public void set_UseUtcTimestamp(bool value);
    protected virtual void Append(StringBuilder builder, LogEventInfo logEvent);
    private static void AppendEventId(int eventId, StringBuilder builder);
    private static int LookupEventId(LogEventInfo logEvent);
    private static string ConvertLogLevel(LogLevel logLevel);
}
[TargetAttribute("MicrosoftILogger")]
public class NLog.Extensions.Logging.MicrosoftILoggerTarget : TargetWithContext {
    private ILoggerFactory _loggerFactory;
    private ILogger _logger;
    private ConcurrentDictionary`2<string, ILogger> _loggers;
    [CompilerGeneratedAttribute]
private Layout <EventId>k__BackingField;
    [CompilerGeneratedAttribute]
private Layout <EventName>k__BackingField;
    [CompilerGeneratedAttribute]
private Layout <LoggerName>k__BackingField;
    public Layout EventId { get; public set; }
    public Layout EventName { get; public set; }
    public Layout LoggerName { get; public set; }
    public MicrosoftILoggerTarget(ILogger logger);
    public MicrosoftILoggerTarget(ILoggerFactory loggerFactory);
    [CompilerGeneratedAttribute]
public Layout get_EventId();
    [CompilerGeneratedAttribute]
public void set_EventId(Layout value);
    [CompilerGeneratedAttribute]
public Layout get_EventName();
    [CompilerGeneratedAttribute]
public void set_EventName(Layout value);
    [CompilerGeneratedAttribute]
public Layout get_LoggerName();
    [CompilerGeneratedAttribute]
public void set_LoggerName(Layout value);
    protected virtual void CloseTarget();
    protected virtual void WriteAsyncThreadSafe(AsyncLogEventInfo logEvent);
    protected virtual void Write(LogEventInfo logEvent);
    private EventId RenderEventId(LogEventInfo logEvent);
    private ILogger CreateFromLoggerFactory(LogEventInfo logEvent);
    private static bool TryGetContextProperty(IDictionary`2<string, object> contextProperties, Int32& index, KeyValuePair`2& contextProperty);
    private static bool TryGetLogEventProperty(IDictionary`2<object, object> logEventProperties, Int32& index, KeyValuePair`2& logEventProperty);
    private static bool TryGetPropertyFromIndex(ICollection`1<KeyValuePair`2<TKey, TValue>> properties, Func`2<KeyValuePair`2<TKey, TValue>, KeyValuePair`2<string, object>> converter, Int32& index, KeyValuePair`2& property);
    private static KeyValuePair`2<string, object> CreateLogEventProperty(KeyValuePair`2<object, object> prop);
    private static string LogStateFormatter(LogState logState);
    private static LogLevel ConvertToLogLevel(LogLevel logLevel);
}
internal class NLog.Extensions.Logging.NLogBeginScopeParser : object {
    private NLogProviderOptions _options;
    private ConcurrentDictionary`2<Type, KeyValuePair`2<Func`2<object, object>, Func`2<object, object>>> _scopeStateExtractors;
    public NLogBeginScopeParser(NLogProviderOptions options);
    public IDisposable ParseBeginScope(T state);
    private IReadOnlyList`1<KeyValuePair`2<string, object>> ParseScopeProperties(IReadOnlyList`1<KeyValuePair`2<string, object>> scopePropertyList);
    private IReadOnlyList`1<KeyValuePair`2<string, object>> IncludeActivityIdsProperties(IReadOnlyList`1<KeyValuePair`2<string, object>> scopePropertyList);
    public static IDisposable CaptureScopeProperties(IEnumerable scopePropertyCollection, ConcurrentDictionary`2<Type, KeyValuePair`2<Func`2<object, object>, Func`2<object, object>>> stateExtractor);
    public static IDisposable CaptureScopeProperty(TState scopeProperty, ConcurrentDictionary`2<Type, KeyValuePair`2<Func`2<object, object>, Func`2<object, object>>> stateExtractor);
    private static Nullable`1<KeyValuePair`2<string, object>> TryParseKeyValueProperty(KeyValuePair`2<Func`2<object, object>, Func`2<object, object>> keyValueExtractor, object property);
    private static bool TryLookupExtractor(ConcurrentDictionary`2<Type, KeyValuePair`2<Func`2<object, object>, Func`2<object, object>>> stateExtractor, Type propertyType, KeyValuePair`2& keyValueExtractor);
    private static bool TryBuildExtractor(Type propertyType, KeyValuePair`2& keyValueExtractor);
    private static bool BuildKeyValueExtractor(ParameterExpression keyValuePairObjParam, MemberExpression propertyKeyAccess, MemberExpression propertyValueAccess, KeyValuePair`2& keyValueExtractor);
}
internal class NLog.Extensions.Logging.NLogLogger : object {
    private Logger _logger;
    private NLogProviderOptions _options;
    private NLogBeginScopeParser _beginScopeParser;
    internal static string OriginalFormatPropertyName;
    private static object ZeroEventId;
    private static Object[] EventIdBoxing;
    private Tuple`3<string, string, string> _eventIdPropertyNames;
    private static Object[] SingleItemArray;
    internal string LoggerName { get; }
    public NLogLogger(Logger logger, NLogProviderOptions options, NLogBeginScopeParser beginScopeParser);
    private static NLogLogger();
    internal string get_LoggerName();
    public sealed virtual void Log(LogLevel logLevel, EventId eventId, TState state, Exception exception, Func`3<TState, Exception, string> formatter);
    private LogEventInfo CreateLogEventInfo(LogLevel nLogLogLevel, EventId eventId, TState state, Exception exception, Func`3<TState, Exception, string> formatter);
    private LogEventInfo TryParseMessageTemplate(LogLevel nLogLogLevel, IReadOnlyList`1<KeyValuePair`2<string, object>> messageProperties, NLogMessageParameterList messageParameters);
    private LogEventInfo TryParsePostionalMessageTemplate(LogLevel nLogLogLevel, IReadOnlyList`1<KeyValuePair`2<string, object>> messageProperties, NLogMessageParameterList messageParameters);
    private LogEventInfo CaptureMessageTemplate(LogLevel nLogLogLevel, string message, IReadOnlyList`1<KeyValuePair`2<string, object>> messageProperties, NLogMessageParameterList messageParameters);
    private LogEventInfo CaputureBasicLogEvent(LogLevel nLogLogLevel, string formattedMessage, IReadOnlyList`1<KeyValuePair`2<string, object>> messageProperties, NLogMessageParameterList messageParameters);
    private static string TryParsePositionalParameters(IReadOnlyList`1<KeyValuePair`2<string, object>> messageProperties, Object[]& parameters);
    private static void CaptureLogEventInfoParameters(LogEventInfo logEvent, NLogMessageParameterList messageParameters, MessageTemplateParameters messageTemplateParameters);
    private static bool AllParameterCorrectlyPositionalMapped(NLogMessageParameterList messageParameters, MessageTemplateParameters messageTemplateParameters);
    private static Object[] CreateStructuredLogEventInfoParameters(NLogMessageParameterList messageParameters, MessageTemplateParameters messageTemplateParameters, List`1& extraProperties);
    private static Object[] CreatePositionalLogEventInfoParameters(NLogMessageParameterList messageParameters, MessageTemplateParameters messageTemplateParameters, List`1& extraProperties);
    private static List`1<KeyValuePair`2<string, object>> AddExtraProperty(List`1<KeyValuePair`2<string, object>> extraProperties, MessageTemplateParameter item);
    private static int FindMaxIndex(MessageTemplateParameters messageTemplateParameters);
    private void CaptureEventIdProperties(LogEventInfo logEvent, EventId eventId);
    private bool IncludeEventIdProperties(EventId eventId);
    private static Tuple`3<string, string, string> CreateEventIdPropertyNames(string eventIdSeparator);
    private static object GetEventId(int eventId);
    private static void CaptureMessageProperties(LogEventInfo logEvent, IEnumerable`1<KeyValuePair`2<string, object>> messageProperties);
    private static void CaptureMessagePropertiesList(LogEventInfo logEvent, IReadOnlyList`1<KeyValuePair`2<string, object>> messageProperties);
    public sealed virtual bool IsEnabled(LogLevel logLevel);
    private bool IsLogLevelEnabled(LogLevel logLevel);
    public virtual string ToString();
    private static LogLevel ConvertLogLevel(LogLevel logLevel);
    public sealed virtual IDisposable BeginScope(TState state);
}
public class NLog.Extensions.Logging.NLogLoggerFactory : object {
    private ConcurrentDictionary`2<string, ILogger> _loggers;
    private NLogLoggerProvider _provider;
    public NLogLoggerFactory(NLogProviderOptions options);
    public NLogLoggerFactory(NLogLoggerProvider provider);
    public sealed virtual void Dispose();
    protected virtual void Dispose(bool disposing);
    public sealed virtual ILogger CreateLogger(string categoryName);
    public sealed virtual void AddProvider(ILoggerProvider provider);
}
[ProviderAliasAttribute("NLog")]
public class NLog.Extensions.Logging.NLogLoggerProvider : object {
    private NLogBeginScopeParser _beginScopeParser;
    [CompilerGeneratedAttribute]
private NLogProviderOptions <Options>k__BackingField;
    [CompilerGeneratedAttribute]
private LogFactory <LogFactory>k__BackingField;
    public NLogProviderOptions Options { get; public set; }
    public LogFactory LogFactory { get; }
    public NLogLoggerProvider(NLogProviderOptions options);
    public NLogLoggerProvider(NLogProviderOptions options, LogFactory logFactory);
    [CompilerGeneratedAttribute]
public NLogProviderOptions get_Options();
    [CompilerGeneratedAttribute]
public void set_Options(NLogProviderOptions value);
    [CompilerGeneratedAttribute]
public LogFactory get_LogFactory();
    public sealed virtual ILogger CreateLogger(string name);
    public sealed virtual void Dispose();
    protected virtual void Dispose(bool disposing);
}
public class NLog.Extensions.Logging.NLogLoggingConfiguration : LoggingConfigurationParser {
    private IConfigurationSection _originalConfigSection;
    private bool _autoReload;
    private IDisposable _registerChangeCallback;
    private static string RootSectionKey;
    public NLogLoggingConfiguration(IConfigurationSection nlogConfig);
    public NLogLoggingConfiguration(IConfigurationSection nlogConfig, LogFactory logFactory);
    private NLogLoggingConfiguration(LogFactory logFactory, IConfigurationSection nlogConfig);
    public virtual LoggingConfiguration Reload();
    protected virtual void OnConfigurationAssigned(LogFactory logFactory);
    private LoggingConfiguration ReloadLoggingConfiguration(IConfigurationSection nlogConfig);
    private void LoadConfigurationSection(IConfigurationSection nlogConfig);
    private void ReloadConfigurationSection(IConfigurationSection nlogConfig);
    private void MonitorForReload(IConfigurationSection nlogConfig);
    public virtual string ToString();
}
[DefaultMemberAttribute("Item")]
internal class NLog.Extensions.Logging.NLogMessageParameterList : object {
    private static NLogMessageParameterList EmptyList;
    private static NLogMessageParameterList PositionalParameterList;
    private static NLogMessageParameterList PositionalComplexParameterList;
    private static NLogMessageParameterList OriginalMessageList;
    private IReadOnlyList`1<KeyValuePair`2<string, object>> _parameterList;
    private Nullable`1<int> _originalMessageIndex;
    private bool _hasComplexParameters;
    private bool _isPositional;
    public bool HasComplexParameters { get; }
    public bool IsPositional { get; }
    public int Count { get; }
    public bool IsReadOnly { get; }
    public MessageTemplateParameter Item { get; public set; }
    private NLogMessageParameterList(IReadOnlyList`1<KeyValuePair`2<string, object>> parameterList, Nullable`1<int> originalMessageIndex, bool hasComplexParameters, bool isPositional);
    private static NLogMessageParameterList();
    public bool get_HasComplexParameters();
    public bool get_IsPositional();
    public sealed virtual int get_Count();
    public sealed virtual bool get_IsReadOnly();
    public static NLogMessageParameterList TryParse(IReadOnlyList`1<KeyValuePair`2<string, object>> parameterList);
    public bool HasMessageTemplateSyntax(bool parseMessageTemplates);
    public string GetOriginalMessage(IReadOnlyList`1<KeyValuePair`2<string, object>> messageProperties);
    private static bool IsValidParameterList(IReadOnlyList`1<KeyValuePair`2<string, object>> parameterList, Nullable`1& originalMessageIndex, Boolean& hasComplexParameters, Boolean& isPositional);
    private static bool TryGetParameterName(IReadOnlyList`1<KeyValuePair`2<string, object>> parameterList, int i, String& parameterKey);
    private static IReadOnlyList`1<KeyValuePair`2<string, object>> CreateValidParameterList(IReadOnlyList`1<KeyValuePair`2<string, object>> parameterList);
    public sealed virtual MessageTemplateParameter get_Item(int index);
    public sealed virtual void set_Item(int index, MessageTemplateParameter value);
    private static MessageTemplateParameter GetMessageTemplateParameter(string parameterName, object parameterValue);
    private static CaptureType GetCaptureType(char firstChar);
    public sealed virtual void Add(MessageTemplateParameter item);
    public sealed virtual void Clear();
    public sealed virtual bool Contains(MessageTemplateParameter item);
    public sealed virtual void CopyTo(MessageTemplateParameter[] array, int arrayIndex);
    [IteratorStateMachineAttribute("NLog.Extensions.Logging.NLogMessageParameterList/<GetEnumerator>d__32")]
public sealed virtual IEnumerator`1<MessageTemplateParameter> GetEnumerator();
    public sealed virtual int IndexOf(MessageTemplateParameter item);
    public sealed virtual void Insert(int index, MessageTemplateParameter item);
    public sealed virtual bool Remove(MessageTemplateParameter item);
    public sealed virtual void RemoveAt(int index);
    private sealed virtual override IEnumerator System.Collections.IEnumerable.GetEnumerator();
}
public class NLog.Extensions.Logging.NLogProviderOptions : object {
    [CompilerGeneratedAttribute]
private EventIdCaptureType <CaptureEventId>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IgnoreEmptyEventId>k__BackingField;
    [CompilerGeneratedAttribute]
private string <EventIdSeparator>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <CaptureMessageTemplates>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <CaptureMessageProperties>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <CaptureMessageParameters>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <ParseMessageTemplates>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IncludeScopes>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <ShutdownOnDispose>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <AutoShutdown>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IncludeActivityIdsWithBeginScope>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <RemoveLoggerFactoryFilter>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <ReplaceLoggerFactory>k__BackingField;
    [CompilerGeneratedAttribute]
private string <LoggingConfigurationSectionName>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <RegisterServiceProvider>k__BackingField;
    internal static NLogProviderOptions Default;
    public EventIdCaptureType CaptureEventId { get; public set; }
    public bool IgnoreEmptyEventId { get; public set; }
    public string EventIdSeparator { get; public set; }
    public bool CaptureMessageTemplates { get; public set; }
    public bool CaptureMessageProperties { get; public set; }
    public bool CaptureMessageParameters { get; public set; }
    public bool ParseMessageTemplates { get; public set; }
    public bool IncludeScopes { get; public set; }
    public bool ShutdownOnDispose { get; public set; }
    public bool AutoShutdown { get; public set; }
    public bool IncludeActivityIdsWithBeginScope { get; public set; }
    [ObsoleteAttribute("Fixed spelling, so use IncludeActivityIdsWithBeginScope instead. Marked obsolete with NLog 5.0")]
public bool IncludeActivtyIdsWithBeginScope { get; public set; }
    public bool RemoveLoggerFactoryFilter { get; public set; }
    public bool ReplaceLoggerFactory { get; public set; }
    public string LoggingConfigurationSectionName { get; public set; }
    public bool RegisterServiceProvider { get; public set; }
    private static NLogProviderOptions();
    [CompilerGeneratedAttribute]
public EventIdCaptureType get_CaptureEventId();
    [CompilerGeneratedAttribute]
public void set_CaptureEventId(EventIdCaptureType value);
    [CompilerGeneratedAttribute]
public bool get_IgnoreEmptyEventId();
    [CompilerGeneratedAttribute]
public void set_IgnoreEmptyEventId(bool value);
    [CompilerGeneratedAttribute]
public string get_EventIdSeparator();
    [CompilerGeneratedAttribute]
public void set_EventIdSeparator(string value);
    [CompilerGeneratedAttribute]
public bool get_CaptureMessageTemplates();
    [CompilerGeneratedAttribute]
public void set_CaptureMessageTemplates(bool value);
    [CompilerGeneratedAttribute]
public bool get_CaptureMessageProperties();
    [CompilerGeneratedAttribute]
public void set_CaptureMessageProperties(bool value);
    [CompilerGeneratedAttribute]
public bool get_CaptureMessageParameters();
    [CompilerGeneratedAttribute]
public void set_CaptureMessageParameters(bool value);
    [CompilerGeneratedAttribute]
public bool get_ParseMessageTemplates();
    [CompilerGeneratedAttribute]
public void set_ParseMessageTemplates(bool value);
    [CompilerGeneratedAttribute]
public bool get_IncludeScopes();
    [CompilerGeneratedAttribute]
public void set_IncludeScopes(bool value);
    [CompilerGeneratedAttribute]
public bool get_ShutdownOnDispose();
    [CompilerGeneratedAttribute]
public void set_ShutdownOnDispose(bool value);
    [CompilerGeneratedAttribute]
public bool get_AutoShutdown();
    [CompilerGeneratedAttribute]
public void set_AutoShutdown(bool value);
    [CompilerGeneratedAttribute]
public bool get_IncludeActivityIdsWithBeginScope();
    [CompilerGeneratedAttribute]
public void set_IncludeActivityIdsWithBeginScope(bool value);
    public bool get_IncludeActivtyIdsWithBeginScope();
    public void set_IncludeActivtyIdsWithBeginScope(bool value);
    [CompilerGeneratedAttribute]
public bool get_RemoveLoggerFactoryFilter();
    [CompilerGeneratedAttribute]
public void set_RemoveLoggerFactoryFilter(bool value);
    [CompilerGeneratedAttribute]
public bool get_ReplaceLoggerFactory();
    [CompilerGeneratedAttribute]
public void set_ReplaceLoggerFactory(bool value);
    [CompilerGeneratedAttribute]
public string get_LoggingConfigurationSectionName();
    [CompilerGeneratedAttribute]
public void set_LoggingConfigurationSectionName(string value);
    [CompilerGeneratedAttribute]
public bool get_RegisterServiceProvider();
    [CompilerGeneratedAttribute]
public void set_RegisterServiceProvider(bool value);
}
[ExtensionAttribute]
internal static class NLog.Extensions.Logging.RegisterNLogLoggingProvider : object {
    [ExtensionAttribute]
internal static void TryAddNLogLoggingProvider(IServiceCollection services, Action`2<IServiceCollection, Action`1<ILoggingBuilder>> addLogging, IConfiguration hostConfiguration, NLogProviderOptions options, Func`4<IServiceProvider, IConfiguration, NLogProviderOptions, NLogLoggerProvider> factory);
    [ExtensionAttribute]
internal static void TryLoadConfigurationFromSection(NLogLoggerProvider loggerProvider, IConfiguration configuration);
    [ExtensionAttribute]
internal static NLogLoggerProvider CreateNLogLoggerProvider(IServiceProvider serviceProvider, IConfiguration hostConfiguration, NLogProviderOptions options, LogFactory logFactory);
    [ExtensionAttribute]
internal static IConfiguration SetupNLogConfigSettings(IServiceProvider serviceProvider, IConfiguration configuration, LogFactory logFactory);
}
[ExtensionAttribute]
public static class NLog.Extensions.Logging.SetupBuilderExtensions : object {
    [ExtensionAttribute]
public static ISetupBuilder LoadConfigurationFromSection(ISetupBuilder setupBuilder, IConfiguration configuration, string configSection);
}
[ExtensionAttribute]
public static class NLog.Extensions.Logging.SetupExtensionsBuilderExtensions : object {
    [ExtensionAttribute]
public static ISetupExtensionsBuilder RegisterConfigSettings(ISetupExtensionsBuilder setupBuilder, IConfiguration configuration);
}
[ExtensionAttribute]
internal static class NLog.Extensions.Logging.StringExtensions : object {
    [ExtensionAttribute]
internal static bool EqualsOrdinalIgnoreCase(string text, string text2);
}
