[CompilerGeneratedAttribute]
[EmbeddedAttribute]
internal class Microsoft.CodeAnalysis.EmbeddedAttribute : Attribute {
}
[ExtensionAttribute]
public static class NLog.Web.AspNetExtensions : object {
    [ExtensionAttribute]
[ObsoleteAttribute("Use UseNLog() on IHostBuilder / IWebHostBuilder, or AddNLogWeb() on ILoggingBuilder")]
public static IServiceProvider SetupNLogServiceLocator(IServiceProvider serviceProvider);
    [ExtensionAttribute]
[ObsoleteAttribute("Use UseNLog() on IHostBuilder / IWebHostBuilder, or AddNLogWeb() on ILoggingBuilder")]
public static LogFactory ConfigureNLog(ILoggingBuilder builder, string configFileName);
    [ExtensionAttribute]
[ObsoleteAttribute("Use UseNLog() on IHostBuilder / IWebHostBuilder, or AddNLogWeb() on ILoggingBuilder")]
public static LogFactory ConfigureNLog(ILoggingBuilder builder, LoggingConfiguration configuration);
    [ExtensionAttribute]
public static ILoggingBuilder AddNLogWeb(ILoggingBuilder builder);
    [ExtensionAttribute]
public static ILoggingBuilder AddNLogWeb(ILoggingBuilder builder, NLogAspNetCoreOptions options);
    [ExtensionAttribute]
public static ILoggingBuilder AddNLogWeb(ILoggingBuilder builder, NLogAspNetCoreOptions options, Func`2<IServiceProvider, LogFactory> factoryBuilder);
    [ExtensionAttribute]
public static ILoggingBuilder AddNLog(ILoggingBuilder builder, string configFileName);
    [ExtensionAttribute]
public static ILoggingBuilder AddNLogWeb(ILoggingBuilder builder, string configFileName);
    [ExtensionAttribute]
public static ILoggingBuilder AddNLog(ILoggingBuilder builder, LoggingConfiguration configuration);
    [ExtensionAttribute]
public static ILoggingBuilder AddNLogWeb(ILoggingBuilder builder, LoggingConfiguration configuration);
    [ExtensionAttribute]
public static ILoggingBuilder AddNLog(ILoggingBuilder builder, LoggingConfiguration configuration, NLogAspNetCoreOptions options);
    [ExtensionAttribute]
public static ILoggingBuilder AddNLogWeb(ILoggingBuilder builder, LoggingConfiguration configuration, NLogAspNetCoreOptions options);
    [ExtensionAttribute]
public static ILoggingBuilder AddNLog(ILoggingBuilder builder, Func`2<IServiceProvider, LogFactory> factoryBuilder);
    [ExtensionAttribute]
public static ILoggingBuilder AddNLogWeb(ILoggingBuilder builder, Func`2<IServiceProvider, LogFactory> factoryBuilder);
    [ExtensionAttribute]
public static ILoggingBuilder AddNLogWeb(ILoggingBuilder builder, LogFactory logFactory, NLogAspNetCoreOptions options);
    [ExtensionAttribute]
public static IWebHostBuilder UseNLog(IWebHostBuilder builder);
    [ExtensionAttribute]
public static IWebHostBuilder UseNLog(IWebHostBuilder builder, NLogAspNetCoreOptions options);
    [ExtensionAttribute]
public static IHostBuilder UseNLog(IHostBuilder builder);
    [ExtensionAttribute]
public static IHostBuilder UseNLog(IHostBuilder builder, NLogAspNetCoreOptions options);
    private static void AddNLogLoggerProvider(IServiceCollection services, IConfiguration hostConfiguration, IHostEnvironment hostEnvironment, NLogAspNetCoreOptions options, Func`5<IServiceProvider, IConfiguration, IHostEnvironment, NLogAspNetCoreOptions, NLogLoggerProvider> factory);
    private static NLogLoggerProvider CreateNLogLoggerProvider(IServiceProvider serviceProvider, IConfiguration hostConfiguration, IHostEnvironment hostEnvironment, NLogAspNetCoreOptions options);
    private static NLogLoggerProvider CreateNLogLoggerProvider(IServiceProvider serviceProvider, IConfiguration hostConfiguration, IHostEnvironment hostEnvironment, NLogAspNetCoreOptions options, LogFactory logFactory);
    private static void TryLoadConfigurationFromContentRootPath(LogFactory logFactory, string contentRootPath, string environmentName);
    private static LoggingConfiguration LoadXmlLoggingConfigurationFromPath(string contentRootPath, string nlogConfigFileName, LogFactory logFactory);
    private static bool IsLoggingConfigurationLoaded(LoggingConfiguration cfg);
    private static IConfiguration SetupNLogConfigSettings(IServiceProvider serviceProvider, IConfiguration configuration, LogFactory logFactory);
    private static void TryLoadConfigurationFromSection(NLogLoggerProvider loggerProvider, IConfiguration configuration);
}
internal static class NLog.Web.DependencyInjection.ServiceLocator : object {
    [CompilerGeneratedAttribute]
private static IServiceProvider <ServiceProvider>k__BackingField;
    public static IServiceProvider ServiceProvider { get; public set; }
    [CompilerGeneratedAttribute]
public static IServiceProvider get_ServiceProvider();
    [CompilerGeneratedAttribute]
public static void set_ServiceProvider(IServiceProvider value);
    internal static TService ResolveService(IServiceProvider serviceProvider, LoggingConfiguration loggingConfiguration);
    internal static TService ResolveServiceFallback(IServiceProvider serviceProvider, Exception exception);
}
public enum NLog.Web.Enums.AspNetRequestLayoutOutputFormat : Enum {
    public int value__;
    public static AspNetRequestLayoutOutputFormat Flat;
    public static AspNetRequestLayoutOutputFormat JsonArray;
    [ObsoleteAttribute("Replaced by JsonArray. Marked obsolete with NLog 5.0")]
public static AspNetRequestLayoutOutputFormat Json;
    public static AspNetRequestLayoutOutputFormat JsonDictionary;
}
[FlagsAttribute]
public enum NLog.Web.Enums.AspNetRequestUrlProperty : Enum {
    public int value__;
    public static AspNetRequestUrlProperty None;
    public static AspNetRequestUrlProperty Scheme;
    public static AspNetRequestUrlProperty Host;
    public static AspNetRequestUrlProperty Port;
    public static AspNetRequestUrlProperty Path;
    public static AspNetRequestUrlProperty Query;
    public static AspNetRequestUrlProperty Default;
}
public enum NLog.Web.Enums.ByteArrayFormatProperty : Enum {
    public int value__;
    public static ByteArrayFormatProperty Base64;
    public static ByteArrayFormatProperty Hex;
}
public enum NLog.Web.Enums.TlsHandshakeProperty : Enum {
    public int value__;
    public static TlsHandshakeProperty CipherAlgorithm;
    public static TlsHandshakeProperty CipherStrength;
    public static TlsHandshakeProperty HashAlgorithm;
    public static TlsHandshakeProperty HashStrength;
    public static TlsHandshakeProperty KeyExchangeAlgorithm;
    public static TlsHandshakeProperty KeyExchangeStrength;
    public static TlsHandshakeProperty Protocol;
}
public enum NLog.Web.Enums.TlsTokenBindingProperty : Enum {
    public int value__;
    public static TlsTokenBindingProperty Provider;
    public static TlsTokenBindingProperty Referrer;
}
public enum NLog.Web.Enums.TrackingConsentProperty : Enum {
    public int value__;
    public static TrackingConsentProperty CanTrack;
    public static TrackingConsentProperty HasConsent;
    public static TrackingConsentProperty IsConsentNeeded;
}
[ExtensionAttribute]
internal static class NLog.Web.Internal.AssemblyExtensionTypes : object {
    [ExtensionAttribute]
public static void RegisterTypes(ISetupExtensionsBuilder setupBuilder);
}
internal static class NLog.Web.Internal.Guard : object {
    internal static T ThrowIfNull(T arg, string param);
}
[ExtensionAttribute]
internal static class NLog.Web.Internal.HttpContextExtensions : object {
    [ExtensionAttribute]
internal static bool HasActiveHttpContext(IHttpContextAccessor httpContextAccessor);
    [ExtensionAttribute]
internal static WebSocketManager TryGetWebSocket(HttpContext context);
    [ExtensionAttribute]
internal static ConnectionInfo TryGetConnection(HttpContext context);
    [ExtensionAttribute]
internal static HttpRequest TryGetRequest(HttpContext context);
    [ExtensionAttribute]
internal static HttpResponse TryGetResponse(HttpContext context);
    [ExtensionAttribute]
internal static T TryGetFeature(HttpContext context);
    [ExtensionAttribute]
internal static ISession TryGetSession(HttpContext context);
    [ExtensionAttribute]
internal static bool HasAllowedContentType(HttpContext context, IList`1<KeyValuePair`2<string, string>> allowContentTypes);
}
internal static class NLog.Web.Internal.HttpHeaderCollectionValues : object {
    [IteratorStateMachineAttribute("NLog.Web.Internal.HttpHeaderCollectionValues/<GetHeaderValues>d__0")]
internal static IEnumerable`1<KeyValuePair`2<string, string>> GetHeaderValues(IHeaderDictionary headers, List`1<string> itemNames, ISet`1<string> excludeNames);
}
internal class NLog.Web.Internal.LogEventInfoBuffer : object {
    private object _lockObject;
    private bool _growAsNeeded;
    private int _growLimit;
    private AsyncLogEventInfo[] _buffer;
    private int _getPointer;
    private int _putPointer;
    private int _count;
    public int Capacity { get; }
    internal int Count { get; }
    public LogEventInfoBuffer(int size, bool growAsNeeded, int growLimit);
    public int get_Capacity();
    internal int get_Count();
    public int Append(AsyncLogEventInfo eventInfo);
    public AsyncLogEventInfo[] GetEventsAndClear();
}
[ObsoleteAttribute("Instead use ObjectPath. Marked obsolete with NLog.Web 5.2")]
internal static class NLog.Web.Internal.PropertyReader : object {
    [ObsoleteAttribute("Instead use ObjectPath. Marked obsolete with NLog.Web 5.2")]
public static object GetValue(string key, T container, Func`3<T, string, object> getVal, bool evaluateAsNestedProperties);
    [ObsoleteAttribute("Instead use ObjectPath. Marked obsolete with NLog.Web 5.2")]
private static object GetValueAsNestedProperties(string key, T container, Func`3<T, string, object> getVal);
    [ObsoleteAttribute("Instead use ObjectPath. Marked obsolete with NLog.Web 5.2")]
private static PropertyInfo GetPropertyInfo(object value, string propertyName);
}
[IsReadOnlyAttribute]
internal class NLog.Web.Internal.ReEntrantScopeLock : ValueType {
    [CompilerGeneratedAttribute]
private bool <IsLockAcquired>k__BackingField;
    private static AsyncLocal`1<bool> ReEntrantLock;
    internal bool IsLockAcquired { get; }
    public ReEntrantScopeLock(bool acquireLock);
    private static ReEntrantScopeLock();
    [CompilerGeneratedAttribute]
internal bool get_IsLockAcquired();
    private static bool TryGetLock();
    public sealed virtual void Dispose();
}
[LayoutRendererAttribute("aspnet-appbasepath")]
[ThreadAgnosticAttribute]
public class NLog.Web.LayoutRenderers.AspNetAppBasePathLayoutRenderer : LayoutRenderer {
    private IHostEnvironment _hostEnvironment;
    private string _contentRootPath;
    private static string _currentAppPath;
    internal IHostEnvironment HostEnvironment { get; internal set; }
    internal IHostEnvironment get_HostEnvironment();
    internal void set_HostEnvironment(IHostEnvironment value);
    protected virtual void Append(StringBuilder builder, LogEventInfo logEvent);
    private IHostEnvironment ResolveHostEnvironment();
    private string ResolveContentRootPath();
    private static string TrimEndDirectorySeparator(string directoryPath);
    private static string ResolveCurrentAppDirectory();
    protected virtual void InitializeLayoutRenderer();
    protected virtual void CloseLayoutRenderer();
    private static string GetAspNetCoreEnvironment(string variableName);
}
[LayoutRendererAttribute("aspnet-environment")]
[ThreadAgnosticAttribute]
public class NLog.Web.LayoutRenderers.AspNetEnvironmentLayoutRenderer : LayoutRenderer {
    private IHostEnvironment _hostEnvironment;
    private string _environmentName;
    internal IHostEnvironment HostEnvironment { get; internal set; }
    internal IHostEnvironment get_HostEnvironment();
    internal void set_HostEnvironment(IHostEnvironment value);
    protected virtual void Append(StringBuilder builder, LogEventInfo logEvent);
    private IHostEnvironment ResolveHostEnvironment();
    private string ResolveEnvironmentName();
    protected virtual void CloseLayoutRenderer();
}
[LayoutRendererAttribute("aspnet-httpcontext-item")]
[LayoutRendererAttribute("aspnet-item")]
public class NLog.Web.LayoutRenderers.AspNetItemValueLayoutRenderer : AspNetLayoutRendererBase {
    private ObjectPathRendererWrapper _objectPathRenderer;
    [CompilerGeneratedAttribute]
private string <Item>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <EvaluateAsNestedProperties>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Format>k__BackingField;
    [CompilerGeneratedAttribute]
private CultureInfo <Culture>k__BackingField;
    [DefaultParameterAttribute]
[RequiredParameterAttribute]
public string Item { get; public set; }
    public string ObjectPath { get; public set; }
    [ObsoleteAttribute("Instead use Item-property. Marked obsolete with NLog.Web 5.3")]
public string Variable { get; public set; }
    [ObsoleteAttribute("Instead use ObjectPath-property. Marked obsolete with NLog.Web 5.2")]
public bool EvaluateAsNestedProperties { get; public set; }
    public string Format { get; public set; }
    public CultureInfo Culture { get; public set; }
    [CompilerGeneratedAttribute]
public string get_Item();
    [CompilerGeneratedAttribute]
public void set_Item(string value);
    public string get_ObjectPath();
    public void set_ObjectPath(string value);
    public string get_Variable();
    public void set_Variable(string value);
    [CompilerGeneratedAttribute]
public bool get_EvaluateAsNestedProperties();
    [CompilerGeneratedAttribute]
public void set_EvaluateAsNestedProperties(bool value);
    [CompilerGeneratedAttribute]
public string get_Format();
    [CompilerGeneratedAttribute]
public void set_Format(string value);
    [CompilerGeneratedAttribute]
public CultureInfo get_Culture();
    [CompilerGeneratedAttribute]
public void set_Culture(CultureInfo value);
    protected virtual void DoAppend(StringBuilder builder, LogEventInfo logEvent);
    private static object LookupItemValue(IDictionary`2<object, object> items, string key);
}
public abstract class NLog.Web.LayoutRenderers.AspNetLayoutMultiValueRendererBase : AspNetLayoutRendererBase {
    private SimpleLayout _itemSeparatorLayout;
    private SimpleLayout _valueSeparatorLayout;
    [CompilerGeneratedAttribute]
private AspNetRequestLayoutOutputFormat <OutputFormat>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <ValuesOnly>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <LowerCaseKeys>k__BackingField;
    public string ItemSeparator { get; public set; }
    public string ValueSeparator { get; public set; }
    [ObsoleteAttribute("Replaced by OutputFormat = JsonArray / JsonDictionary. Marked obsolete with NLog.Web ver. 5.0")]
public bool SingleAsArray { get; public set; }
    public AspNetRequestLayoutOutputFormat OutputFormat { get; public set; }
    public bool ValuesOnly { get; public set; }
    public bool LowerCaseKeys { get; public set; }
    public string get_ItemSeparator();
    public void set_ItemSeparator(string value);
    public string get_ValueSeparator();
    public void set_ValueSeparator(string value);
    public bool get_SingleAsArray();
    public void set_SingleAsArray(bool value);
    [CompilerGeneratedAttribute]
public AspNetRequestLayoutOutputFormat get_OutputFormat();
    [CompilerGeneratedAttribute]
public void set_OutputFormat(AspNetRequestLayoutOutputFormat value);
    [CompilerGeneratedAttribute]
public bool get_ValuesOnly();
    [CompilerGeneratedAttribute]
public void set_ValuesOnly(bool value);
    [CompilerGeneratedAttribute]
public bool get_LowerCaseKeys();
    [CompilerGeneratedAttribute]
public void set_LowerCaseKeys(bool value);
    protected void SerializePairs(IEnumerable`1<KeyValuePair`2<string, string>> pairs, StringBuilder builder, LogEventInfo logEvent);
    private void SerializePairsJson(IEnumerable`1<KeyValuePair`2<string, string>> pairs, StringBuilder builder);
    private void SerializePairJson(StringBuilder builder, KeyValuePair`2<string, string> kpv);
    private void SerializePairsFlat(IEnumerable`1<KeyValuePair`2<string, string>> pairs, StringBuilder builder, LogEventInfo logEvent);
    private void AppendPropertyKey(StringBuilder builder, string key);
    protected void SerializeValues(IEnumerable`1<string> values, StringBuilder builder, LogEventInfo logEvent);
    private static void SerializeValuesJson(IEnumerable`1<string> values, StringBuilder builder);
    private static void SerializeValueJson(StringBuilder builder, string value);
    private void SerializeValuesFlat(IEnumerable`1<string> values, StringBuilder builder, LogEventInfo logEvent);
    protected string GetRenderedItemSeparator(LogEventInfo logEvent);
    protected string GetRenderedValueSeparator(LogEventInfo logEvent);
    internal static void AppendQuoted(StringBuilder builder, string value);
}
public abstract class NLog.Web.LayoutRenderers.AspNetLayoutRendererBase : LayoutRenderer {
    private IHttpContextAccessor _httpContextAccessor;
    [NLogConfigurationIgnorePropertyAttribute]
public IHttpContextAccessor HttpContextAccessor { get; public set; }
    public IHttpContextAccessor get_HttpContextAccessor();
    public void set_HttpContextAccessor(IHttpContextAccessor value);
    internal static IHttpContextAccessor RetrieveHttpContextAccessor(IServiceProvider serviceProvider, LoggingConfiguration loggingConfiguration);
    protected virtual void Append(StringBuilder builder, LogEventInfo logEvent);
    protected abstract virtual void DoAppend(StringBuilder builder, LogEventInfo logEvent);
    protected virtual void CloseLayoutRenderer();
    [ObsoleteAttribute("Instead use LogManager.Setup().SetupExtensions(). Marked obsolete with NLog v5.2")]
public static void Register(string name, Func`4<LogEventInfo, HttpContext, LoggingConfiguration, object> func);
}
[LayoutRendererAttribute("aspnet-mvc-action")]
public class NLog.Web.LayoutRenderers.AspNetMvcActionRenderer : AspNetLayoutRendererBase {
    protected virtual void DoAppend(StringBuilder builder, LogEventInfo logEvent);
}
[LayoutRendererAttribute("aspnet-mvc-controller")]
public class NLog.Web.LayoutRenderers.AspNetMvcControllerRenderer : AspNetLayoutRendererBase {
    protected virtual void DoAppend(StringBuilder builder, LogEventInfo logEvent);
}
[ObsoleteAttribute("Inherit from AspNetLayoutRendererBase instead. Marked obsolete with NLog.Web v5.1")]
public abstract class NLog.Web.LayoutRenderers.AspNetMvcLayoutRendererBase : AspNetLayoutRendererBase {
    protected virtual void DoAppend(StringBuilder builder, LogEventInfo logEvent);
    protected abstract virtual void MvcDoAppend(StringBuilder builder, LogEventInfo logEvent, HttpContext context);
}
[LayoutRendererAttribute("aspnet-request-querystring")]
public class NLog.Web.LayoutRenderers.AspNetQueryStringLayoutRenderer : AspNetLayoutMultiValueRendererBase {
    [CompilerGeneratedAttribute]
private List`1<string> <Items>k__BackingField;
    [CompilerGeneratedAttribute]
private ISet`1<string> <Exclude>k__BackingField;
    [DefaultParameterAttribute]
public List`1<string> Items { get; public set; }
    [ObsoleteAttribute("Instead use Items-property. Marked obsolete with NLog.Web 5.3")]
public List`1<string> QueryStringKeys { get; public set; }
    public ISet`1<string> Exclude { get; public set; }
    [CompilerGeneratedAttribute]
public List`1<string> get_Items();
    [CompilerGeneratedAttribute]
public void set_Items(List`1<string> value);
    public List`1<string> get_QueryStringKeys();
    public void set_QueryStringKeys(List`1<string> value);
    [CompilerGeneratedAttribute]
public ISet`1<string> get_Exclude();
    [CompilerGeneratedAttribute]
public void set_Exclude(ISet`1<string> value);
    protected virtual void DoAppend(StringBuilder builder, LogEventInfo logEvent);
    [IteratorStateMachineAttribute("NLog.Web.LayoutRenderers.AspNetQueryStringLayoutRenderer/<GetQueryStringValues>d__13")]
private static IEnumerable`1<KeyValuePair`2<string, string>> GetQueryStringValues(IQueryCollection queryStrings, IEnumerable`1<string> queryStringKeys, bool checkForExclude, ICollection`1<string> excludeNames);
}
[LayoutRendererAttribute("aspnet-request-bidirectional-stream")]
public class NLog.Web.LayoutRenderers.AspNetRequestBidirectionalStreamLayoutRenderer : AspNetLayoutRendererBase {
    protected virtual void DoAppend(StringBuilder builder, LogEventInfo logEvent);
}
[LayoutRendererAttribute("aspnet-request-client-certificate")]
public class NLog.Web.LayoutRenderers.AspNetRequestClientCertificateLayoutRenderer : AspNetLayoutRendererBase {
    [CompilerGeneratedAttribute]
private bool <Verbose>k__BackingField;
    public bool Verbose { get; public set; }
    [CompilerGeneratedAttribute]
public bool get_Verbose();
    [CompilerGeneratedAttribute]
public void set_Verbose(bool value);
    protected virtual void DoAppend(StringBuilder builder, LogEventInfo logEvent);
}
[LayoutRendererAttribute("aspnet-request-connection-id")]
public class NLog.Web.LayoutRenderers.AspNetRequestConnectionIdLayoutRenderer : AspNetLayoutRendererBase {
    protected virtual void DoAppend(StringBuilder builder, LogEventInfo logEvent);
}
[LayoutRendererAttribute("aspnet-request-contentlength")]
public class NLog.Web.LayoutRenderers.AspNetRequestContentLength : AspNetLayoutRendererBase {
    protected virtual void DoAppend(StringBuilder builder, LogEventInfo logEvent);
}
[LayoutRendererAttribute("aspnet-request-contenttype")]
public class NLog.Web.LayoutRenderers.AspNetRequestContentTypeLayoutRenderer : AspNetLayoutRendererBase {
    protected virtual void DoAppend(StringBuilder builder, LogEventInfo logEvent);
}
[LayoutRendererAttribute("aspnet-request-cookie")]
public class NLog.Web.LayoutRenderers.AspNetRequestCookieLayoutRenderer : AspNetLayoutMultiValueRendererBase {
    [CompilerGeneratedAttribute]
private List`1<string> <Items>k__BackingField;
    [CompilerGeneratedAttribute]
private ISet`1<string> <Exclude>k__BackingField;
    [DefaultParameterAttribute]
public List`1<string> Items { get; public set; }
    [ObsoleteAttribute("Instead use Items-property. Marked obsolete with NLog.Web 5.3")]
public List`1<string> CookieNames { get; public set; }
    public ISet`1<string> Exclude { get; public set; }
    [CompilerGeneratedAttribute]
public List`1<string> get_Items();
    [CompilerGeneratedAttribute]
public void set_Items(List`1<string> value);
    public List`1<string> get_CookieNames();
    public void set_CookieNames(List`1<string> value);
    [CompilerGeneratedAttribute]
public ISet`1<string> get_Exclude();
    [CompilerGeneratedAttribute]
public void set_Exclude(ISet`1<string> value);
    protected virtual void DoAppend(StringBuilder builder, LogEventInfo logEvent);
    [IteratorStateMachineAttribute("NLog.Web.LayoutRenderers.AspNetRequestCookieLayoutRenderer/<GetCookieValues>d__13")]
private IEnumerable`1<KeyValuePair`2<string, string>> GetCookieValues(IRequestCookieCollection cookies);
}
[LayoutRendererAttribute("aspnet-request-duration")]
public class NLog.Web.LayoutRenderers.AspNetRequestDurationLayoutRenderer : AspNetLayoutRendererBase {
    private static String[] DurationMsFormat;
    [CompilerGeneratedAttribute]
private string <Format>k__BackingField;
    [CompilerGeneratedAttribute]
private CultureInfo <Culture>k__BackingField;
    public string Format { get; public set; }
    public CultureInfo Culture { get; public set; }
    [CompilerGeneratedAttribute]
public string get_Format();
    [CompilerGeneratedAttribute]
public void set_Format(string value);
    [CompilerGeneratedAttribute]
public CultureInfo get_Culture();
    [CompilerGeneratedAttribute]
public void set_Culture(CultureInfo value);
    protected virtual void InitializeLayoutRenderer();
    protected virtual void DoAppend(StringBuilder builder, LogEventInfo logEvent);
    private void RenderDurationMs(StringBuilder builder, double durationMs);
    private string FormatDuration(TimeSpan duration);
    private static Nullable`1<TimeSpan> GetDuration(Activity activity);
}
[LayoutRendererAttribute("aspnet-request-endpoint")]
public class NLog.Web.LayoutRenderers.AspNetRequestEndPointLayoutRenderer : AspNetLayoutRendererBase {
    protected virtual void DoAppend(StringBuilder builder, LogEventInfo logEvent);
}
[LayoutRendererAttribute("aspnet-request-form")]
public class NLog.Web.LayoutRenderers.AspNetRequestFormLayoutRenderer : AspNetLayoutMultiValueRendererBase {
    [CompilerGeneratedAttribute]
private ISet`1<string> <Items>k__BackingField;
    [CompilerGeneratedAttribute]
private ISet`1<string> <Exclude>k__BackingField;
    [DefaultParameterAttribute]
public ISet`1<string> Items { get; public set; }
    [ObsoleteAttribute("Instead use Items-property. Marked obsolete with NLog.Web 5.3")]
public ISet`1<string> Include { get; public set; }
    public ISet`1<string> Exclude { get; public set; }
    [CompilerGeneratedAttribute]
public ISet`1<string> get_Items();
    [CompilerGeneratedAttribute]
public void set_Items(ISet`1<string> value);
    public ISet`1<string> get_Include();
    public void set_Include(ISet`1<string> value);
    [CompilerGeneratedAttribute]
public ISet`1<string> get_Exclude();
    [CompilerGeneratedAttribute]
public void set_Exclude(ISet`1<string> value);
    protected virtual void DoAppend(StringBuilder builder, LogEventInfo logEvent);
    [IteratorStateMachineAttribute("NLog.Web.LayoutRenderers.AspNetRequestFormLayoutRenderer/<GetFormDataValues>d__13")]
private IEnumerable`1<KeyValuePair`2<string, string>> GetFormDataValues(ICollection`1<string> formKeys, HttpRequest httpRequest);
}
[LayoutRendererAttribute("aspnet-request-has-posted-body")]
public class NLog.Web.LayoutRenderers.AspNetRequestHasPostedBodyLayoutRenderer : AspNetLayoutRendererBase {
    protected virtual void DoAppend(StringBuilder builder, LogEventInfo logEvent);
    private bool CanHaveBody();
}
[LayoutRendererAttribute("aspnet-request-headers")]
public class NLog.Web.LayoutRenderers.AspNetRequestHeadersLayoutRenderer : AspNetLayoutMultiValueRendererBase {
    [CompilerGeneratedAttribute]
private List`1<string> <Items>k__BackingField;
    [CompilerGeneratedAttribute]
private ISet`1<string> <Exclude>k__BackingField;
    [DefaultParameterAttribute]
public List`1<string> Items { get; public set; }
    [ObsoleteAttribute("Instead use Items-property. Marked obsolete with NLog.Web 5.3")]
public List`1<string> HeaderNames { get; public set; }
    public ISet`1<string> Exclude { get; public set; }
    [CompilerGeneratedAttribute]
public List`1<string> get_Items();
    [CompilerGeneratedAttribute]
public void set_Items(List`1<string> value);
    public List`1<string> get_HeaderNames();
    public void set_HeaderNames(List`1<string> value);
    [CompilerGeneratedAttribute]
public ISet`1<string> get_Exclude();
    [CompilerGeneratedAttribute]
public void set_Exclude(ISet`1<string> value);
    protected virtual void DoAppend(StringBuilder builder, LogEventInfo logEvent);
}
[LayoutRendererAttribute("aspnet-request-host")]
public class NLog.Web.LayoutRenderers.AspNetRequestHostLayoutRenderer : AspNetLayoutRendererBase {
    protected virtual void DoAppend(StringBuilder builder, LogEventInfo logEvent);
}
[LayoutRendererAttribute("aspnet-request-method")]
public class NLog.Web.LayoutRenderers.AspNetRequestHttpMethodRenderer : AspNetLayoutRendererBase {
    protected virtual void DoAppend(StringBuilder builder, LogEventInfo logEvent);
}
[LayoutRendererAttribute("aspnet-request-http-transport-type")]
public class NLog.Web.LayoutRenderers.AspNetRequestHttpTransportTypeLayoutRenderer : AspNetLayoutRendererBase {
    protected virtual void DoAppend(StringBuilder builder, LogEventInfo logEvent);
}
[LayoutRendererAttribute("aspnet-request-inherent-keep-alive")]
public class NLog.Web.LayoutRenderers.AspNetRequestInherentKeepAliveLayoutRenderer : AspNetLayoutRendererBase {
    protected virtual void DoAppend(StringBuilder builder, LogEventInfo logEvent);
}
[LayoutRendererAttribute("aspnet-request-ip")]
public class NLog.Web.LayoutRenderers.AspNetRequestIpLayoutRenderer : AspNetLayoutRendererBase {
    [CompilerGeneratedAttribute]
private Layout <ForwardedForHeader>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <CheckForwardedForHeader>k__BackingField;
    private int _checkForwardedForHeaderOffset;
    [DefaultValueAttribute("X-Forwarded-For")]
public Layout ForwardedForHeader { get; public set; }
    public bool CheckForwardedForHeader { get; public set; }
    public int CheckForwardedForHeaderOffset { get; public set; }
    [CompilerGeneratedAttribute]
public Layout get_ForwardedForHeader();
    [CompilerGeneratedAttribute]
public void set_ForwardedForHeader(Layout value);
    [CompilerGeneratedAttribute]
public bool get_CheckForwardedForHeader();
    [CompilerGeneratedAttribute]
public void set_CheckForwardedForHeader(bool value);
    public int get_CheckForwardedForHeaderOffset();
    public void set_CheckForwardedForHeaderOffset(int value);
    protected virtual void DoAppend(StringBuilder builder, LogEventInfo logEvent);
    private int CalculatePosition(String[] headerContents);
    private string TryLookupForwardHeader(HttpRequest httpRequest, LogEventInfo logEvent);
}
[LayoutRendererAttribute("aspnet-request-is-web-socket")]
public class NLog.Web.LayoutRenderers.AspNetRequestIsWebSocketLayoutRenderer : AspNetLayoutRendererBase {
    protected virtual void DoAppend(StringBuilder builder, LogEventInfo logEvent);
}
[LayoutRendererAttribute("aspnet-request-local-ip")]
public class NLog.Web.LayoutRenderers.AspNetRequestLocalIpLayoutRenderer : AspNetLayoutRendererBase {
    protected virtual void DoAppend(StringBuilder builder, LogEventInfo logEvent);
}
[LayoutRendererAttribute("aspnet-request-local-port")]
public class NLog.Web.LayoutRenderers.AspNetRequestLocalPortLayoutRenderer : AspNetLayoutRendererBase {
    protected virtual void DoAppend(StringBuilder builder, LogEventInfo logEvent);
}
[LayoutRendererAttribute("aspnet-request-posted-body")]
public class NLog.Web.LayoutRenderers.AspNetRequestPostedBodyLayoutRenderer : AspNetLayoutRendererBase {
    [CompilerGeneratedAttribute]
private static bool <MiddlewareInstalled>k__BackingField;
    internal static object NLogPostedRequestBodyKey;
    private bool _verifiedMiddlewareInstalled;
    internal static bool MiddlewareInstalled { get; internal set; }
    private static AspNetRequestPostedBodyLayoutRenderer();
    [CompilerGeneratedAttribute]
internal static bool get_MiddlewareInstalled();
    [CompilerGeneratedAttribute]
internal static void set_MiddlewareInstalled(bool value);
    protected virtual void DoAppend(StringBuilder builder, LogEventInfo logEvent);
}
[LayoutRendererAttribute("aspnet-request-referrer")]
public class NLog.Web.LayoutRenderers.AspNetRequestReferrerRenderer : AspNetLayoutRendererBase {
    protected virtual void DoAppend(StringBuilder builder, LogEventInfo logEvent);
}
[LayoutRendererAttribute("aspnet-request-remote-port")]
public class NLog.Web.LayoutRenderers.AspNetRequestRemotePortLayoutRenderer : AspNetLayoutRendererBase {
    protected virtual void DoAppend(StringBuilder builder, LogEventInfo logEvent);
}
[LayoutRendererAttribute("aspnet-request-routeparameters")]
public class NLog.Web.LayoutRenderers.AspNetRequestRouteParametersRenderer : AspNetLayoutMultiValueRendererBase {
    [CompilerGeneratedAttribute]
private List`1<string> <Items>k__BackingField;
    [DefaultParameterAttribute]
public List`1<string> Items { get; public set; }
    [ObsoleteAttribute("Instead use Items-property. Marked obsolete with NLog.Web 5.3")]
public List`1<string> RouteParameterKeys { get; public set; }
    [CompilerGeneratedAttribute]
public List`1<string> get_Items();
    [CompilerGeneratedAttribute]
public void set_Items(List`1<string> value);
    public List`1<string> get_RouteParameterKeys();
    public void set_RouteParameterKeys(List`1<string> value);
    protected virtual void DoAppend(StringBuilder builder, LogEventInfo logEvent);
    private static IEnumerable`1<KeyValuePair`2<string, string>> GetPairs(HttpContext httpContext, List`1<string> routeParameterKeys);
    [IteratorStateMachineAttribute("NLog.Web.LayoutRenderers.AspNetRequestRouteParametersRenderer/<GetManyPairs>d__9")]
private static IEnumerable`1<KeyValuePair`2<string, string>> GetManyPairs(RouteValueDictionary routeValues, List`1<string> routeParameterKeys);
    [IteratorStateMachineAttribute("NLog.Web.LayoutRenderers.AspNetRequestRouteParametersRenderer/<GetAllPairs>d__10")]
private static IEnumerable`1<KeyValuePair`2<string, string>> GetAllPairs(RouteValueDictionary routeValues);
}
[LayoutRendererAttribute("aspnet-request-servervariable")]
public class NLog.Web.LayoutRenderers.AspNetRequestServerVariableLayoutRenderer : AspNetLayoutRendererBase {
    [CompilerGeneratedAttribute]
private string <Item>k__BackingField;
    [RequiredParameterAttribute]
[DefaultParameterAttribute]
public string Item { get; public set; }
    [CompilerGeneratedAttribute]
public string get_Item();
    [CompilerGeneratedAttribute]
public void set_Item(string value);
    protected virtual void DoAppend(StringBuilder builder, LogEventInfo logEvent);
    private static string LookupItemValue(string key, HttpContext httpContext);
}
[LayoutRendererAttribute("aspnet-request-stream-id")]
public class NLog.Web.LayoutRenderers.AspNetRequestStreamIdLayoutRenderer : AspNetLayoutRendererBase {
    protected virtual void DoAppend(StringBuilder builder, LogEventInfo logEvent);
}
[LayoutRendererAttribute("aspnet-request-tls-handshake")]
public class NLog.Web.LayoutRenderers.AspNetRequestTlsHandshakeLayoutRenderer : AspNetLayoutRendererBase {
    [CompilerGeneratedAttribute]
private TlsHandshakeProperty <Property>k__BackingField;
    [DefaultParameterAttribute]
public TlsHandshakeProperty Property { get; public set; }
    [CompilerGeneratedAttribute]
public TlsHandshakeProperty get_Property();
    [CompilerGeneratedAttribute]
public void set_Property(TlsHandshakeProperty value);
    protected virtual void DoAppend(StringBuilder builder, LogEventInfo logEvent);
}
[LayoutRendererAttribute("aspnet-request-tls-token-binding")]
public class NLog.Web.LayoutRenderers.AspNetRequestTlsTokenBindingLayoutRenderer : AspNetLayoutRendererBase {
    [CompilerGeneratedAttribute]
private TlsTokenBindingProperty <Property>k__BackingField;
    [CompilerGeneratedAttribute]
private ByteArrayFormatProperty <Format>k__BackingField;
    [DefaultParameterAttribute]
public TlsTokenBindingProperty Property { get; public set; }
    public ByteArrayFormatProperty Format { get; public set; }
    [CompilerGeneratedAttribute]
public TlsTokenBindingProperty get_Property();
    [CompilerGeneratedAttribute]
public void set_Property(TlsTokenBindingProperty value);
    [CompilerGeneratedAttribute]
public ByteArrayFormatProperty get_Format();
    [CompilerGeneratedAttribute]
public void set_Format(ByteArrayFormatProperty value);
    protected virtual void DoAppend(StringBuilder builder, LogEventInfo logEvent);
    private string ToFormattedString(Byte[] bytes);
}
[LayoutRendererAttribute("aspnet-request-tracking-consent")]
public class NLog.Web.LayoutRenderers.AspNetRequestTrackingConsentLayoutRenderer : AspNetLayoutRendererBase {
    [CompilerGeneratedAttribute]
private TrackingConsentProperty <Property>k__BackingField;
    [DefaultParameterAttribute]
public TrackingConsentProperty Property { get; public set; }
    [CompilerGeneratedAttribute]
public TrackingConsentProperty get_Property();
    [CompilerGeneratedAttribute]
public void set_Property(TrackingConsentProperty value);
    protected virtual void DoAppend(StringBuilder builder, LogEventInfo logEvent);
}
[LayoutRendererAttribute("aspnet-request-trailers")]
public class NLog.Web.LayoutRenderers.AspNetRequestTrailersLayoutRenderer : AspNetLayoutMultiValueRendererBase {
    [CompilerGeneratedAttribute]
private List`1<string> <Items>k__BackingField;
    [CompilerGeneratedAttribute]
private ISet`1<string> <Exclude>k__BackingField;
    [DefaultParameterAttribute]
public List`1<string> Items { get; public set; }
    [ObsoleteAttribute("Instead use Items-property. Marked obsolete with NLog.Web 5.3")]
public List`1<string> TrailerNames { get; public set; }
    public ISet`1<string> Exclude { get; public set; }
    [CompilerGeneratedAttribute]
public List`1<string> get_Items();
    [CompilerGeneratedAttribute]
public void set_Items(List`1<string> value);
    public List`1<string> get_TrailerNames();
    public void set_TrailerNames(List`1<string> value);
    [CompilerGeneratedAttribute]
public ISet`1<string> get_Exclude();
    [CompilerGeneratedAttribute]
public void set_Exclude(ISet`1<string> value);
    protected virtual void DoAppend(StringBuilder builder, LogEventInfo logEvent);
    [IteratorStateMachineAttribute("NLog.Web.LayoutRenderers.AspNetRequestTrailersLayoutRenderer/<GetTrailerValues>d__12")]
private IEnumerable`1<KeyValuePair`2<string, string>> GetTrailerValues(IHeaderDictionary trailers, bool checkForExclude);
}
[LayoutRendererAttribute("aspnet-request-url")]
public class NLog.Web.LayoutRenderers.AspNetRequestUrlRenderer : AspNetLayoutRendererBase {
    [CompilerGeneratedAttribute]
private AspNetRequestUrlProperty <Properties>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <UseRawTarget>k__BackingField;
    [DefaultParameterAttribute]
public AspNetRequestUrlProperty Properties { get; public set; }
    [ObsoleteAttribute("Please use the Properties flags enumeration instead. Marked obsolete on NLog.Web 5.1")]
public bool IncludeQueryString { get; public set; }
    [ObsoleteAttribute("Please use the Properties flags enumeration instead. Marked obsolete on NLog.Web 5.1")]
public bool IncludePort { get; public set; }
    [ObsoleteAttribute("Please use the Properties flags enumeration instead. Marked obsolete on NLog.Web 5.1")]
public bool IncludeHost { get; public set; }
    [ObsoleteAttribute("Please use the Properties flags enumeration instead. Marked obsolete on NLog.Web 5.1")]
public bool IncludeScheme { get; public set; }
    [ObsoleteAttribute("Please use the Properties flags enumeration instead. Marked obsolete on NLog.Web 5.1")]
public bool IncludePath { get; public set; }
    public bool UseRawTarget { get; public set; }
    [CompilerGeneratedAttribute]
public AspNetRequestUrlProperty get_Properties();
    [CompilerGeneratedAttribute]
public void set_Properties(AspNetRequestUrlProperty value);
    public bool get_IncludeQueryString();
    public void set_IncludeQueryString(bool value);
    public bool get_IncludePort();
    public void set_IncludePort(bool value);
    public bool get_IncludeHost();
    public void set_IncludeHost(bool value);
    public bool get_IncludeScheme();
    public void set_IncludeScheme(bool value);
    public bool get_IncludePath();
    public void set_IncludePath(bool value);
    private void SetPropertiesFlag(AspNetRequestUrlProperty bit, bool flag);
    private bool HasPropertiesFlag(AspNetRequestUrlProperty bit);
    [CompilerGeneratedAttribute]
public bool get_UseRawTarget();
    [CompilerGeneratedAttribute]
public void set_UseRawTarget(bool value);
    protected virtual void DoAppend(StringBuilder builder, LogEventInfo logEvent);
    private void RenderUrl(HttpRequest httpRequest, StringBuilder builder);
}
[LayoutRendererAttribute("aspnet-request-useragent")]
public class NLog.Web.LayoutRenderers.AspNetRequestUserAgent : AspNetLayoutRendererBase {
    protected virtual void DoAppend(StringBuilder builder, LogEventInfo logEvent);
}
[LayoutRendererAttribute("aspnet-request")]
public class NLog.Web.LayoutRenderers.AspNetRequestValueLayoutRenderer : AspNetLayoutRendererBase {
    [CompilerGeneratedAttribute]
private string <Item>k__BackingField;
    [CompilerGeneratedAttribute]
private string <QueryString>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Form>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Cookie>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ServerVariable>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Header>k__BackingField;
    [DefaultParameterAttribute]
public string Item { get; public set; }
    public string QueryString { get; public set; }
    public string Form { get; public set; }
    public string Cookie { get; public set; }
    public string ServerVariable { get; public set; }
    public string Header { get; public set; }
    [CompilerGeneratedAttribute]
public string get_Item();
    [CompilerGeneratedAttribute]
public void set_Item(string value);
    [CompilerGeneratedAttribute]
public string get_QueryString();
    [CompilerGeneratedAttribute]
public void set_QueryString(string value);
    [CompilerGeneratedAttribute]
public string get_Form();
    [CompilerGeneratedAttribute]
public void set_Form(string value);
    [CompilerGeneratedAttribute]
public string get_Cookie();
    [CompilerGeneratedAttribute]
public void set_Cookie(string value);
    [CompilerGeneratedAttribute]
public string get_ServerVariable();
    [CompilerGeneratedAttribute]
public void set_ServerVariable(string value);
    [CompilerGeneratedAttribute]
public string get_Header();
    [CompilerGeneratedAttribute]
public void set_Header(string value);
    protected virtual void DoAppend(StringBuilder builder, LogEventInfo logEvent);
    private static string LookupQueryString(string key, HttpRequest httpRequest);
    private static string LookupFormValue(string key, HttpRequest httpRequest);
    private static string LookupCookieValue(string key, HttpRequest httpRequest);
    private static string LookupHeaderValue(string key, HttpRequest httpRequest);
    private static string LookupItemValue(string key, HttpRequest httpRequest);
    private static string LookupServerVariableValue(string key, HttpRequest httpRequest);
}
[LayoutRendererAttribute("aspnet-request-web-socket-requested-protocols")]
public class NLog.Web.LayoutRenderers.AspNetRequestWebSocketRequestedProtocolsLayoutRenderer : AspNetLayoutMultiValueRendererBase {
    protected virtual void DoAppend(StringBuilder builder, LogEventInfo logEvent);
}
[LayoutRendererAttribute("aspnet-response-contentlength")]
public class NLog.Web.LayoutRenderers.AspNetResponseContentLength : AspNetLayoutRendererBase {
    protected virtual void DoAppend(StringBuilder builder, LogEventInfo logEvent);
}
[LayoutRendererAttribute("aspnet-response-contenttype")]
public class NLog.Web.LayoutRenderers.AspNetResponseContentTypeLayoutRenderer : AspNetLayoutRendererBase {
    protected virtual void DoAppend(StringBuilder builder, LogEventInfo logEvent);
}
[LayoutRendererAttribute("aspnet-response-cookie")]
public class NLog.Web.LayoutRenderers.AspNetResponseCookieLayoutRenderer : AspNetLayoutMultiValueRendererBase {
    private SimpleLayout _objectSeparatorLayout;
    [CompilerGeneratedAttribute]
private List`1<string> <Items>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <Verbose>k__BackingField;
    [CompilerGeneratedAttribute]
private ISet`1<string> <Exclude>k__BackingField;
    public string ObjectSeparator { get; public set; }
    [DefaultParameterAttribute]
public List`1<string> Items { get; public set; }
    [ObsoleteAttribute("Instead use Items-property. Marked obsolete with NLog.Web 5.3")]
public List`1<string> CookieNames { get; public set; }
    public bool Verbose { get; public set; }
    public ISet`1<string> Exclude { get; public set; }
    public string get_ObjectSeparator();
    public void set_ObjectSeparator(string value);
    [CompilerGeneratedAttribute]
public List`1<string> get_Items();
    [CompilerGeneratedAttribute]
public void set_Items(List`1<string> value);
    public List`1<string> get_CookieNames();
    public void set_CookieNames(List`1<string> value);
    [CompilerGeneratedAttribute]
public bool get_Verbose();
    [CompilerGeneratedAttribute]
public void set_Verbose(bool value);
    [CompilerGeneratedAttribute]
public ISet`1<string> get_Exclude();
    [CompilerGeneratedAttribute]
public void set_Exclude(ISet`1<string> value);
    protected virtual void DoAppend(StringBuilder builder, LogEventInfo logEvent);
    private string GetRenderedObjectSeparator(LogEventInfo logEvent);
    private static bool AppendJsonProperty(StringBuilder builder, string name, string value, bool includePropertySeparator);
    private static bool AppendFlatProperty(StringBuilder builder, string name, string value, string valueSeparator, string itemSeparator);
    private static IList`1<SetCookieHeaderValue> GetCookies(HttpResponse response);
    private IEnumerable`1<KeyValuePair`2<string, string>> GetCookieValues(IList`1<SetCookieHeaderValue> cookies);
    private IEnumerable`1<SetCookieHeaderValue> GetVerboseCookieValues(IList`1<SetCookieHeaderValue> cookies);
    [IteratorStateMachineAttribute("NLog.Web.LayoutRenderers.AspNetResponseCookieLayoutRenderer/<GetCookieNameValues>d__27")]
private static IEnumerable`1<KeyValuePair`2<string, string>> GetCookieNameValues(IList`1<SetCookieHeaderValue> cookies, List`1<string> cookieNames);
    [IteratorStateMachineAttribute("NLog.Web.LayoutRenderers.AspNetResponseCookieLayoutRenderer/<GetCookieAllValues>d__28")]
private static IEnumerable`1<KeyValuePair`2<string, string>> GetCookieAllValues(IList`1<SetCookieHeaderValue> cookies, ICollection`1<string> excludeNames);
    [IteratorStateMachineAttribute("NLog.Web.LayoutRenderers.AspNetResponseCookieLayoutRenderer/<GetCookieVerboseValues>d__29")]
private static IEnumerable`1<SetCookieHeaderValue> GetCookieVerboseValues(IList`1<SetCookieHeaderValue> cookies, List`1<string> cookieNames);
    [IteratorStateMachineAttribute("NLog.Web.LayoutRenderers.AspNetResponseCookieLayoutRenderer/<GetCookieVerboseAllValues>d__30")]
private static IEnumerable`1<SetCookieHeaderValue> GetCookieVerboseAllValues(IList`1<SetCookieHeaderValue> cookies, ICollection`1<string> excludeNames);
    private void SerializeAllProperties(IEnumerable`1<SetCookieHeaderValue> verboseCookieValues, StringBuilder builder, LogEventInfo logEvent);
    private void SerializeAllPropertiesJson(IEnumerable`1<SetCookieHeaderValue> verboseCookieValues, StringBuilder builder);
    private void SerializeAllPropertiesFlat(IEnumerable`1<SetCookieHeaderValue> verboseCookieValues, StringBuilder builder, LogEventInfo logEvent);
}
[LayoutRendererAttribute("aspnet-response-has-started")]
public class NLog.Web.LayoutRenderers.AspNetResponseHasStartedLayoutRenderer : AspNetLayoutRendererBase {
    protected virtual void DoAppend(StringBuilder builder, LogEventInfo logEvent);
}
[LayoutRendererAttribute("aspnet-response-headers")]
public class NLog.Web.LayoutRenderers.AspNetResponseHeadersLayoutRenderer : AspNetLayoutMultiValueRendererBase {
    [CompilerGeneratedAttribute]
private List`1<string> <Items>k__BackingField;
    [CompilerGeneratedAttribute]
private ISet`1<string> <Exclude>k__BackingField;
    [DefaultParameterAttribute]
public List`1<string> Items { get; public set; }
    [ObsoleteAttribute("Instead use Items-property. Marked obsolete with NLog.Web 5.3")]
public List`1<string> HeaderNames { get; public set; }
    public ISet`1<string> Exclude { get; public set; }
    [CompilerGeneratedAttribute]
public List`1<string> get_Items();
    [CompilerGeneratedAttribute]
public void set_Items(List`1<string> value);
    public List`1<string> get_HeaderNames();
    public void set_HeaderNames(List`1<string> value);
    [CompilerGeneratedAttribute]
public ISet`1<string> get_Exclude();
    [CompilerGeneratedAttribute]
public void set_Exclude(ISet`1<string> value);
    protected virtual void DoAppend(StringBuilder builder, LogEventInfo logEvent);
}
[LayoutRendererAttribute("aspnet-response-https-compression")]
public class NLog.Web.LayoutRenderers.AspNetResponseHttpsCompressionLayoutRenderer : AspNetLayoutRendererBase {
    protected virtual void DoAppend(StringBuilder builder, LogEventInfo logEvent);
}
[LayoutRendererAttribute("aspnet-response-statuscode")]
public class NLog.Web.LayoutRenderers.AspNetResponseStatusCodeRenderer : AspNetLayoutRendererBase {
    private static int HttpStatusCodeLow;
    private static int HttpStatusCodeHigh;
    private String[] _formatMapper;
    private string _format;
    private String[] FormatMapper { get; }
    public string Format { get; public set; }
    private String[] get_FormatMapper();
    public string get_Format();
    public void set_Format(string value);
    protected virtual void DoAppend(StringBuilder builder, LogEventInfo logEvent);
    private string ConvertToString(int httpStatusCode);
    [CompilerGeneratedAttribute]
private string <get_FormatMapper>b__3_0(int s);
}
[LayoutRendererAttribute("aspnet-response-trailers")]
public class NLog.Web.LayoutRenderers.AspNetResponseTrailersLayoutRenderer : AspNetLayoutMultiValueRendererBase {
    [CompilerGeneratedAttribute]
private List`1<string> <Items>k__BackingField;
    [CompilerGeneratedAttribute]
private ISet`1<string> <Exclude>k__BackingField;
    [DefaultParameterAttribute]
public List`1<string> Items { get; public set; }
    [ObsoleteAttribute("Instead use Items-property. Marked obsolete with NLog.Web 5.3")]
public List`1<string> TrailerNames { get; public set; }
    public ISet`1<string> Exclude { get; public set; }
    [CompilerGeneratedAttribute]
public List`1<string> get_Items();
    [CompilerGeneratedAttribute]
public void set_Items(List`1<string> value);
    public List`1<string> get_TrailerNames();
    public void set_TrailerNames(List`1<string> value);
    [CompilerGeneratedAttribute]
public ISet`1<string> get_Exclude();
    [CompilerGeneratedAttribute]
public void set_Exclude(ISet`1<string> value);
    protected virtual void DoAppend(StringBuilder builder, LogEventInfo logEvent);
    [IteratorStateMachineAttribute("NLog.Web.LayoutRenderers.AspNetResponseTrailersLayoutRenderer/<GetTrailerValues>d__12")]
private IEnumerable`1<KeyValuePair`2<string, string>> GetTrailerValues(IHeaderDictionary trailers, bool checkForExclude);
}
[LayoutRendererAttribute("aspnet-sessionid")]
public class NLog.Web.LayoutRenderers.AspNetSessionIdLayoutRenderer : AspNetLayoutRendererBase {
    protected virtual void DoAppend(StringBuilder builder, LogEventInfo logEvent);
}
[LayoutRendererAttribute("aspnet-session-item")]
[LayoutRendererAttribute("aspnet-session")]
public class NLog.Web.LayoutRenderers.AspNetSessionValueLayoutRenderer : AspNetLayoutRendererBase {
    private ObjectPathRendererWrapper _objectPathRenderer;
    [CompilerGeneratedAttribute]
private string <Item>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <EvaluateAsNestedProperties>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Format>k__BackingField;
    [CompilerGeneratedAttribute]
private CultureInfo <Culture>k__BackingField;
    private SessionValueType _valueType;
    private Func`3<ISession, string, object> _sessionValueLookup;
    [RequiredParameterAttribute]
[DefaultParameterAttribute]
public string Item { get; public set; }
    [ObsoleteAttribute("Instead use Item-property. Marked obsolete with NLog.Web 5.3")]
public string Variable { get; public set; }
    public string ObjectPath { get; public set; }
    [ObsoleteAttribute("Instead use ObjectPath-property. Marked obsolete with NLog.Web 5.2")]
public bool EvaluateAsNestedProperties { get; public set; }
    public string Format { get; public set; }
    public CultureInfo Culture { get; public set; }
    public SessionValueType ValueType { get; public set; }
    [CompilerGeneratedAttribute]
public string get_Item();
    [CompilerGeneratedAttribute]
public void set_Item(string value);
    public string get_Variable();
    public void set_Variable(string value);
    public string get_ObjectPath();
    public void set_ObjectPath(string value);
    [CompilerGeneratedAttribute]
public bool get_EvaluateAsNestedProperties();
    [CompilerGeneratedAttribute]
public void set_EvaluateAsNestedProperties(bool value);
    [CompilerGeneratedAttribute]
public string get_Format();
    [CompilerGeneratedAttribute]
public void set_Format(string value);
    [CompilerGeneratedAttribute]
public CultureInfo get_Culture();
    [CompilerGeneratedAttribute]
public void set_Culture(CultureInfo value);
    public SessionValueType get_ValueType();
    public void set_ValueType(SessionValueType value);
    protected virtual void DoAppend(StringBuilder builder, LogEventInfo logEvent);
    private static object GetSessionIntValue(ISession session, string key);
    private static object GetSessionValue(ISession session, string key);
}
[LayoutRendererAttribute("aspnet-traceidentifier")]
public class NLog.Web.LayoutRenderers.AspNetTraceIdentifierLayoutRenderer : AspNetLayoutRendererBase {
    [CompilerGeneratedAttribute]
private bool <IgnoreActivityId>k__BackingField;
    public bool IgnoreActivityId { get; public set; }
    protected virtual void DoAppend(StringBuilder builder, LogEventInfo logEvent);
    [CompilerGeneratedAttribute]
public bool get_IgnoreActivityId();
    [CompilerGeneratedAttribute]
public void set_IgnoreActivityId(bool value);
    private string LookupTraceIdentifier(HttpContext httpContext);
}
[LayoutRendererAttribute("aspnet-user-authtype")]
public class NLog.Web.LayoutRenderers.AspNetUserAuthTypeLayoutRenderer : AspNetLayoutRendererBase {
    protected virtual void DoAppend(StringBuilder builder, LogEventInfo logEvent);
}
[LayoutRendererAttribute("aspnet-user-claim")]
public class NLog.Web.LayoutRenderers.AspNetUserClaimLayoutRenderer : AspNetLayoutMultiValueRendererBase {
    [CompilerGeneratedAttribute]
private string <ClaimType>k__BackingField;
    [DefaultParameterAttribute]
public string ClaimType { get; public set; }
    [CompilerGeneratedAttribute]
public string get_ClaimType();
    [CompilerGeneratedAttribute]
public void set_ClaimType(string value);
    protected virtual void InitializeLayoutRenderer();
    protected virtual void DoAppend(StringBuilder builder, LogEventInfo logEvent);
    private static IEnumerable`1<KeyValuePair`2<string, string>> GetAllClaims(ClaimsPrincipal claimsPrincipal);
    private static Claim GetClaim(ClaimsPrincipal claimsPrincipal, string claimType);
}
[LayoutRendererAttribute("aspnet-user-identity")]
public class NLog.Web.LayoutRenderers.AspNetUserIdentityLayoutRenderer : AspNetLayoutRendererBase {
    protected virtual void DoAppend(StringBuilder builder, LogEventInfo logEvent);
}
[LayoutRendererAttribute("aspnet-user-isAuthenticated")]
public class NLog.Web.LayoutRenderers.AspNetUserIsAuthenticatedLayoutRenderer : AspNetLayoutRendererBase {
    protected virtual void DoAppend(StringBuilder builder, LogEventInfo logEvent);
}
[LayoutRendererAttribute("aspnet-webrootpath")]
[ThreadAgnosticAttribute]
public class NLog.Web.LayoutRenderers.AspNetWebRootPathLayoutRenderer : LayoutRenderer {
    private IWebHostEnvironment _webHostEnvironment;
    private string _webRootPath;
    internal IWebHostEnvironment WebHostEnvironment { get; internal set; }
    internal IWebHostEnvironment get_WebHostEnvironment();
    internal void set_WebHostEnvironment(IWebHostEnvironment value);
    protected virtual void Append(StringBuilder builder, LogEventInfo logEvent);
    private IWebHostEnvironment ResolveHostEnvironment();
    private string ResolveWebRootPath();
    protected virtual void CloseLayoutRenderer();
}
[LayoutRendererAttribute("assembly-version")]
[ThreadAgnosticAttribute]
public class NLog.Web.LayoutRenderers.AssemblyVersionLayoutRenderer : AssemblyVersionLayoutRenderer {
    protected virtual void InitializeLayoutRenderer();
    protected virtual Assembly GetAssembly();
}
[LayoutRendererAttribute("iis-site-name")]
[ThreadAgnosticAttribute]
public class NLog.Web.LayoutRenderers.IISInstanceNameLayoutRenderer : LayoutRenderer {
    private IHostEnvironment _hostEnvironment;
    private string _instanceName;
    internal IHostEnvironment HostEnvironment { get; internal set; }
    internal IHostEnvironment get_HostEnvironment();
    internal void set_HostEnvironment(IHostEnvironment value);
    protected virtual void Append(StringBuilder builder, LogEventInfo logEvent);
    private IHostEnvironment ResolveHostEnvironment();
    private string ResolveInstanceName();
    protected virtual void CloseLayoutRenderer();
}
internal class NLog.Web.LayoutRenderers.NLogWebFuncLayoutRenderer : FuncLayoutRenderer {
    private Func`4<LogEventInfo, HttpContext, LoggingConfiguration, object> _func;
    private IHttpContextAccessor _httpContextAccessor;
    internal IHttpContextAccessor HttpContextAccessor { get; internal set; }
    public NLogWebFuncLayoutRenderer(string name, Func`4<LogEventInfo, HttpContext, LoggingConfiguration, object> func);
    internal IHttpContextAccessor get_HttpContextAccessor();
    internal void set_HttpContextAccessor(IHttpContextAccessor value);
    protected virtual void CloseLayoutRenderer();
    protected virtual object RenderValue(LogEventInfo logEvent);
}
public enum NLog.Web.LayoutRenderers.SessionValueType : Enum {
    public int value__;
    public static SessionValueType String;
    public static SessionValueType Int32;
}
[NLogConfigurationItemAttribute]
public class NLog.Web.Layouts.W3CExtendedLogField : object {
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    [CompilerGeneratedAttribute]
private Layout <Layout>k__BackingField;
    [RequiredParameterAttribute]
public string Name { get; public set; }
    [RequiredParameterAttribute]
public Layout Layout { get; public set; }
    public W3CExtendedLogField(string name, Layout layout);
    [CompilerGeneratedAttribute]
public string get_Name();
    [CompilerGeneratedAttribute]
public void set_Name(string value);
    [CompilerGeneratedAttribute]
public Layout get_Layout();
    [CompilerGeneratedAttribute]
public void set_Layout(Layout value);
}
[LayoutAttribute("W3CExtendedLogLayout")]
[ThreadAgnosticAttribute]
[AppDomainFixedOutputAttribute]
public class NLog.Web.Layouts.W3CExtendedLogLayout : LayoutWithHeaderAndFooter {
    [CompilerGeneratedAttribute]
private IList`1<W3CExtendedLogField> <Fields>k__BackingField;
    [CompilerGeneratedAttribute]
private IList`1<W3CExtendedLogField> <Directives>k__BackingField;
    [CompilerGeneratedAttribute]
private LineEndingMode <LineEnding>k__BackingField;
    [ArrayParameterAttribute("NLog.Web.Layouts.W3CExtendedLogField", "field")]
public IList`1<W3CExtendedLogField> Fields { get; }
    [ArrayParameterAttribute("NLog.Web.Layouts.W3CExtendedLogField", "directive")]
public IList`1<W3CExtendedLogField> Directives { get; }
    public LineEndingMode LineEnding { get; public set; }
    [CompilerGeneratedAttribute]
public IList`1<W3CExtendedLogField> get_Fields();
    [CompilerGeneratedAttribute]
public IList`1<W3CExtendedLogField> get_Directives();
    [CompilerGeneratedAttribute]
public LineEndingMode get_LineEnding();
    [CompilerGeneratedAttribute]
public void set_LineEnding(LineEndingMode value);
    protected virtual void InitializeLayout();
    private void RenderHeader(LogEventInfo logEvent, StringBuilder sb);
    protected virtual void RenderFormattedMessage(LogEventInfo logEvent, StringBuilder target);
}
public class NLog.Web.NLogAspNetCoreOptions : NLogProviderOptions {
    [CompilerGeneratedAttribute]
private bool <RegisterHttpContextAccessor>k__BackingField;
    [CompilerGeneratedAttribute]
private static NLogAspNetCoreOptions <Default>k__BackingField;
    [DefaultValueAttribute("True")]
public bool RegisterHttpContextAccessor { get; public set; }
    public static NLogAspNetCoreOptions Default { get; }
    private static NLogAspNetCoreOptions();
    [CompilerGeneratedAttribute]
public bool get_RegisterHttpContextAccessor();
    [CompilerGeneratedAttribute]
public void set_RegisterHttpContextAccessor(bool value);
    [CompilerGeneratedAttribute]
public static NLogAspNetCoreOptions get_Default();
}
public class NLog.Web.NLogBufferingTargetWrapperMiddleware : object {
    private RequestDelegate _next;
    public NLogBufferingTargetWrapperMiddleware(RequestDelegate next);
    [AsyncStateMachineAttribute("NLog.Web.NLogBufferingTargetWrapperMiddleware/<Invoke>d__2")]
public Task Invoke(HttpContext context);
}
[ObsoleteAttribute("Use NLog.LogManager.Setup().LoadConfigurationFromAppSettings() instead. Marked obsolete with NLog.Web 5.3")]
public static class NLog.Web.NLogBuilder : object {
    [ObsoleteAttribute("Use NLog.LogManager.Setup().LoadConfigurationFromAppSettings() instead. Marked obsolete with NLog.Web 5.3")]
public static LogFactory ConfigureNLog(string configFileName);
    [ObsoleteAttribute("Use NLog.LogManager.Setup().LoadConfigurationFromAppSettings() instead. Marked obsolete with NLog.Web 5.3")]
public static LogFactory ConfigureNLog(LoggingConfiguration configuration);
}
public class NLog.Web.NLogRequestLoggingMiddleware : object {
    private RequestDelegate _next;
    private NLogRequestLoggingOptions _options;
    private ILogger _logger;
    public NLogRequestLoggingMiddleware(RequestDelegate next, NLogRequestLoggingOptions options, ILoggerFactory loggerFactory);
    [AsyncStateMachineAttribute("NLog.Web.NLogRequestLoggingMiddleware/<Invoke>d__4")]
public Task Invoke(HttpContext httpContext);
    private bool LogHttpRequest(HttpContext httpContext, Exception exception);
}
public class NLog.Web.NLogRequestLoggingOptions : object {
    internal static NLogRequestLoggingOptions Default;
    [CompilerGeneratedAttribute]
private string <LoggerName>k__BackingField;
    private TimeSpan _durationThresholdMs;
    [CompilerGeneratedAttribute]
private ISet`1<string> <ExcludeRequestPaths>k__BackingField;
    [CompilerGeneratedAttribute]
private Func`3<HttpContext, Exception, LogLevel> <ShouldLogRequest>k__BackingField;
    public string LoggerName { get; public set; }
    public int DurationThresholdMs { get; public set; }
    public ISet`1<string> ExcludeRequestPaths { get; }
    public Func`3<HttpContext, Exception, LogLevel> ShouldLogRequest { get; public set; }
    private static NLogRequestLoggingOptions();
    [CompilerGeneratedAttribute]
public string get_LoggerName();
    [CompilerGeneratedAttribute]
public void set_LoggerName(string value);
    public int get_DurationThresholdMs();
    public void set_DurationThresholdMs(int value);
    [CompilerGeneratedAttribute]
public ISet`1<string> get_ExcludeRequestPaths();
    [CompilerGeneratedAttribute]
public Func`3<HttpContext, Exception, LogLevel> get_ShouldLogRequest();
    [CompilerGeneratedAttribute]
public void set_ShouldLogRequest(Func`3<HttpContext, Exception, LogLevel> value);
    private LogLevel ShouldLogRequestDefault(HttpContext httpContext, Exception exception);
    private bool IsSlowHttpRequest();
    private bool IsExcludedHttpRequest(HttpContext httpContext);
}
public class NLog.Web.NLogRequestPostedBodyMiddleware : object {
    private RequestDelegate _next;
    private NLogRequestPostedBodyMiddlewareOptions _options;
    public NLogRequestPostedBodyMiddleware(RequestDelegate next, NLogRequestPostedBodyMiddlewareOptions options);
    [AsyncStateMachineAttribute("NLog.Web.NLogRequestPostedBodyMiddleware/<Invoke>d__3")]
public Task Invoke(HttpContext context);
    private bool ShouldCaptureRequestBody(HttpContext context);
    [AsyncStateMachineAttribute("NLog.Web.NLogRequestPostedBodyMiddleware/<ReadPostedBodyFromStream>d__5")]
private static Task`1<string> ReadPostedBodyFromStream(Stream stream);
}
public class NLog.Web.NLogRequestPostedBodyMiddlewareOptions : object {
    internal static NLogRequestPostedBodyMiddlewareOptions Default;
    [CompilerGeneratedAttribute]
private int <MaxContentLength>k__BackingField;
    [CompilerGeneratedAttribute]
private IList`1<KeyValuePair`2<string, string>> <AllowContentTypes>k__BackingField;
    [CompilerGeneratedAttribute]
private Predicate`1<HttpContext> <ShouldCapture>k__BackingField;
    public int MaxContentLength { get; public set; }
    public IList`1<KeyValuePair`2<string, string>> AllowContentTypes { get; public set; }
    public Predicate`1<HttpContext> ShouldCapture { get; public set; }
    private static NLogRequestPostedBodyMiddlewareOptions();
    [CompilerGeneratedAttribute]
public int get_MaxContentLength();
    [CompilerGeneratedAttribute]
public void set_MaxContentLength(int value);
    [CompilerGeneratedAttribute]
public IList`1<KeyValuePair`2<string, string>> get_AllowContentTypes();
    [CompilerGeneratedAttribute]
public void set_AllowContentTypes(IList`1<KeyValuePair`2<string, string>> value);
    [CompilerGeneratedAttribute]
public Predicate`1<HttpContext> get_ShouldCapture();
    [CompilerGeneratedAttribute]
public void set_ShouldCapture(Predicate`1<HttpContext> value);
    private bool DefaultCapture(HttpContext context);
}
[ExtensionAttribute]
public static class NLog.Web.SetupBuilderExtensions : object {
    [ExtensionAttribute]
public static ISetupBuilder LoadConfigurationFromAppSettings(ISetupBuilder setupBuilder, string basePath, string environment, string nlogConfigSection, bool optional, bool reloadOnChange);
    private static string ResolveCurrentAppDirectory();
    private static bool IsLoggingConfigurationLoaded(LoggingConfiguration cfg);
    private static string GetAspNetCoreEnvironment(string variableName);
    [ExtensionAttribute]
public static ISetupBuilder RegisterNLogWeb(ISetupBuilder setupBuilder, IConfiguration configuration, IServiceProvider serviceProvider);
}
[ExtensionAttribute]
public static class NLog.Web.SetupExtensionsBuilderExtensions : object {
    [ExtensionAttribute]
public static ISetupExtensionsBuilder RegisterNLogWeb(ISetupExtensionsBuilder setupBuilder, IServiceProvider serviceProvider);
    [ExtensionAttribute]
public static ISetupExtensionsBuilder RegisterAspNetLayoutRenderer(ISetupExtensionsBuilder setupBuilder, string name, Func`4<LogEventInfo, HttpContext, LoggingConfiguration, object> layoutMethod);
}
[ExtensionAttribute]
internal static class NLog.Web.StringBuilderExtensions : object {
    private static string FormatAsJson;
    [ExtensionAttribute]
internal static void AppendFormattedValue(StringBuilder destination, object value, string format, IFormatProvider formatProvider, IValueFormatter valueFormatter);
}
[TargetAttribute("AspNetBufferingWrapper")]
public class NLog.Web.Targets.Wrappers.AspNetBufferingTargetWrapper : WrapperTargetBase {
    [CompilerGeneratedAttribute]
private static bool <MiddlewareInstalled>k__BackingField;
    private static object dataSlot;
    private int _bufferGrowLimit;
    [CompilerGeneratedAttribute]
private int <BufferSize>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <GrowBufferAsNeeded>k__BackingField;
    private IHttpContextAccessor _httpContextAccessor;
    private bool _verifiedMiddlewareInstalled;
    internal static bool MiddlewareInstalled { get; internal set; }
    [DefaultValueAttribute("100")]
public int BufferSize { get; public set; }
    [DefaultValueAttribute("False")]
public bool GrowBufferAsNeeded { get; public set; }
    public int BufferGrowLimit { get; public set; }
    internal IHttpContextAccessor HttpContextAccessor { get; internal set; }
    public AspNetBufferingTargetWrapper(Target wrappedTarget);
    public AspNetBufferingTargetWrapper(Target wrappedTarget, int bufferSize);
    private static AspNetBufferingTargetWrapper();
    [CompilerGeneratedAttribute]
internal static bool get_MiddlewareInstalled();
    [CompilerGeneratedAttribute]
internal static void set_MiddlewareInstalled(bool value);
    [CompilerGeneratedAttribute]
public int get_BufferSize();
    [CompilerGeneratedAttribute]
public void set_BufferSize(int value);
    [CompilerGeneratedAttribute]
public bool get_GrowBufferAsNeeded();
    [CompilerGeneratedAttribute]
public void set_GrowBufferAsNeeded(bool value);
    public int get_BufferGrowLimit();
    public void set_BufferGrowLimit(int value);
    internal IHttpContextAccessor get_HttpContextAccessor();
    internal void set_HttpContextAccessor(IHttpContextAccessor value);
    private IHttpContextAccessor RetrieveHttpContextAccessor();
    protected virtual void InitializeTarget();
    protected virtual void CloseTarget();
    protected virtual void WriteAsyncThreadSafe(AsyncLogEventInfo logEvent);
    private LogEventInfoBuffer GetRequestBuffer();
    private static TargetBufferListNode GetTargetBufferList(HttpContext context);
    private static void SetTargetBufferList(HttpContext context, TargetBufferListNode newEmptyList);
    internal static void OnBeginRequest(HttpContext context);
    internal static void OnEndRequest(HttpContext context);
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
[AttributeUsageAttribute("27524")]
internal class System.Runtime.CompilerServices.NullableAttribute : Attribute {
    public Byte[] NullableFlags;
    public NullableAttribute(byte );
    public NullableAttribute(Byte[] );
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
[AttributeUsageAttribute("5196")]
internal class System.Runtime.CompilerServices.NullableContextAttribute : Attribute {
    public byte Flag;
    public NullableContextAttribute(byte );
}
