public abstract class NodaTime.Serialization.JsonNet.DelegatingConverterBase : JsonConverter {
    private JsonConverter original;
    public bool CanRead { get; }
    public bool CanWrite { get; }
    protected DelegatingConverterBase(JsonConverter original);
    public virtual void WriteJson(JsonWriter writer, object value, JsonSerializer serializer);
    public virtual object ReadJson(JsonReader reader, Type objectType, object existingValue, JsonSerializer serializer);
    public virtual bool get_CanRead();
    public virtual bool get_CanWrite();
    public virtual bool CanConvert(Type objectType);
}
[ExtensionAttribute]
public static class NodaTime.Serialization.JsonNet.Extensions : object {
    [ExtensionAttribute]
public static JsonSerializerSettings ConfigureForNodaTime(JsonSerializerSettings settings, IDateTimeZoneProvider provider);
    [ExtensionAttribute]
public static JsonSerializer ConfigureForNodaTime(JsonSerializer serializer, IDateTimeZoneProvider provider);
    [ExtensionAttribute]
public static JsonSerializerSettings ConfigureForNodaTime(JsonSerializerSettings settings, NodaJsonSettings nodaJsonSettings);
    [ExtensionAttribute]
public static JsonSerializer ConfigureForNodaTime(JsonSerializer serializer, NodaJsonSettings nodaJsonSettings);
    [ExtensionAttribute]
public static JsonSerializerSettings WithIsoIntervalConverter(JsonSerializerSettings settings);
    [ExtensionAttribute]
public static JsonSerializer WithIsoIntervalConverter(JsonSerializer serializer);
    [ExtensionAttribute]
public static JsonSerializerSettings WithIsoDateIntervalConverter(JsonSerializerSettings settings);
    [ExtensionAttribute]
public static JsonSerializer WithIsoDateIntervalConverter(JsonSerializer serializer);
    private static void ReplaceExistingConverters(IList`1<JsonConverter> converters, JsonConverter newConverter);
    [ExtensionAttribute]
internal static string ResolvePropertyName(JsonSerializer serializer, string propertyName);
}
public abstract class NodaTime.Serialization.JsonNet.NodaConverterBase`1 : JsonConverter {
    private static bool CheckAssignableFrom;
    private static Type NullableT;
    private static NodaConverterBase`1();
    public virtual bool CanConvert(Type objectType);
    public virtual object ReadJson(JsonReader reader, Type objectType, object existingValue, JsonSerializer serializer);
    protected abstract virtual T ReadJsonImpl(JsonReader reader, JsonSerializer serializer);
    public virtual void WriteJson(JsonWriter writer, object value, JsonSerializer serializer);
    protected abstract virtual void WriteJsonImpl(JsonWriter writer, T value, JsonSerializer serializer);
}
public static class NodaTime.Serialization.JsonNet.NodaConverters : object {
    [CompilerGeneratedAttribute]
private static JsonConverter <InstantConverter>k__BackingField;
    [CompilerGeneratedAttribute]
private static JsonConverter <LocalDateConverter>k__BackingField;
    [CompilerGeneratedAttribute]
private static JsonConverter <LocalDateTimeConverter>k__BackingField;
    [CompilerGeneratedAttribute]
private static JsonConverter <LocalTimeConverter>k__BackingField;
    [CompilerGeneratedAttribute]
private static JsonConverter <AnnualDateConverter>k__BackingField;
    [CompilerGeneratedAttribute]
private static JsonConverter <IntervalConverter>k__BackingField;
    [CompilerGeneratedAttribute]
private static JsonConverter <IsoIntervalConverter>k__BackingField;
    [CompilerGeneratedAttribute]
private static JsonConverter <DateIntervalConverter>k__BackingField;
    [CompilerGeneratedAttribute]
private static JsonConverter <IsoDateIntervalConverter>k__BackingField;
    [CompilerGeneratedAttribute]
private static JsonConverter <OffsetConverter>k__BackingField;
    [CompilerGeneratedAttribute]
private static JsonConverter <OffsetDateTimeConverter>k__BackingField;
    [CompilerGeneratedAttribute]
private static JsonConverter <OffsetDateConverter>k__BackingField;
    [CompilerGeneratedAttribute]
private static JsonConverter <OffsetTimeConverter>k__BackingField;
    [CompilerGeneratedAttribute]
private static JsonConverter <DurationConverter>k__BackingField;
    [CompilerGeneratedAttribute]
private static JsonConverter <RoundtripPeriodConverter>k__BackingField;
    [CompilerGeneratedAttribute]
private static JsonConverter <NormalizingIsoPeriodConverter>k__BackingField;
    public static JsonConverter InstantConverter { get; }
    public static JsonConverter LocalDateConverter { get; }
    public static JsonConverter LocalDateTimeConverter { get; }
    public static JsonConverter LocalTimeConverter { get; }
    public static JsonConverter AnnualDateConverter { get; }
    public static JsonConverter IntervalConverter { get; }
    public static JsonConverter IsoIntervalConverter { get; }
    public static JsonConverter DateIntervalConverter { get; }
    public static JsonConverter IsoDateIntervalConverter { get; }
    public static JsonConverter OffsetConverter { get; }
    public static JsonConverter OffsetDateTimeConverter { get; }
    public static JsonConverter OffsetDateConverter { get; }
    public static JsonConverter OffsetTimeConverter { get; }
    public static JsonConverter DurationConverter { get; }
    public static JsonConverter RoundtripPeriodConverter { get; }
    public static JsonConverter NormalizingIsoPeriodConverter { get; }
    private static NodaConverters();
    [CompilerGeneratedAttribute]
public static JsonConverter get_InstantConverter();
    [CompilerGeneratedAttribute]
public static JsonConverter get_LocalDateConverter();
    [CompilerGeneratedAttribute]
public static JsonConverter get_LocalDateTimeConverter();
    [CompilerGeneratedAttribute]
public static JsonConverter get_LocalTimeConverter();
    [CompilerGeneratedAttribute]
public static JsonConverter get_AnnualDateConverter();
    [CompilerGeneratedAttribute]
public static JsonConverter get_IntervalConverter();
    [CompilerGeneratedAttribute]
public static JsonConverter get_IsoIntervalConverter();
    [CompilerGeneratedAttribute]
public static JsonConverter get_DateIntervalConverter();
    [CompilerGeneratedAttribute]
public static JsonConverter get_IsoDateIntervalConverter();
    [CompilerGeneratedAttribute]
public static JsonConverter get_OffsetConverter();
    [CompilerGeneratedAttribute]
public static JsonConverter get_OffsetDateTimeConverter();
    [CompilerGeneratedAttribute]
public static JsonConverter get_OffsetDateConverter();
    [CompilerGeneratedAttribute]
public static JsonConverter get_OffsetTimeConverter();
    public static JsonConverter CreateZonedDateTimeConverter(IDateTimeZoneProvider provider);
    public static JsonConverter CreateDateTimeZoneConverter(IDateTimeZoneProvider provider);
    [CompilerGeneratedAttribute]
public static JsonConverter get_DurationConverter();
    [CompilerGeneratedAttribute]
public static JsonConverter get_RoundtripPeriodConverter();
    [CompilerGeneratedAttribute]
public static JsonConverter get_NormalizingIsoPeriodConverter();
    private static Action`1<T> CreateIsoValidator(Func`2<T, CalendarSystem> calendarProjection);
}
internal class NodaTime.Serialization.JsonNet.NodaDateIntervalConverter : NodaConverterBase`1<DateInterval> {
    protected virtual DateInterval ReadJsonImpl(JsonReader reader, JsonSerializer serializer);
    protected virtual void WriteJsonImpl(JsonWriter writer, DateInterval value, JsonSerializer serializer);
}
internal class NodaTime.Serialization.JsonNet.NodaDateTimeZoneConverter : NodaConverterBase`1<DateTimeZone> {
    private IDateTimeZoneProvider provider;
    public NodaDateTimeZoneConverter(IDateTimeZoneProvider provider);
    protected virtual DateTimeZone ReadJsonImpl(JsonReader reader, JsonSerializer serializer);
    protected virtual void WriteJsonImpl(JsonWriter writer, DateTimeZone value, JsonSerializer serializer);
}
internal class NodaTime.Serialization.JsonNet.NodaIntervalConverter : NodaConverterBase`1<Interval> {
    protected virtual Interval ReadJsonImpl(JsonReader reader, JsonSerializer serializer);
    protected virtual void WriteJsonImpl(JsonWriter writer, Interval value, JsonSerializer serializer);
}
internal class NodaTime.Serialization.JsonNet.NodaIsoDateIntervalConverter : NodaConverterBase`1<DateInterval> {
    protected virtual DateInterval ReadJsonImpl(JsonReader reader, JsonSerializer serializer);
    protected virtual void WriteJsonImpl(JsonWriter writer, DateInterval value, JsonSerializer serializer);
}
internal class NodaTime.Serialization.JsonNet.NodaIsoIntervalConverter : NodaConverterBase`1<Interval> {
    protected virtual Interval ReadJsonImpl(JsonReader reader, JsonSerializer serializer);
    protected virtual void WriteJsonImpl(JsonWriter writer, Interval value, JsonSerializer serializer);
}
public class NodaTime.Serialization.JsonNet.NodaJsonSettings : object {
    [CompilerGeneratedAttribute]
private JsonConverter <InstantConverter>k__BackingField;
    [CompilerGeneratedAttribute]
private JsonConverter <IntervalConverter>k__BackingField;
    [CompilerGeneratedAttribute]
private JsonConverter <LocalDateConverter>k__BackingField;
    [CompilerGeneratedAttribute]
private JsonConverter <LocalTimeConverter>k__BackingField;
    [CompilerGeneratedAttribute]
private JsonConverter <LocalDateTimeConverter>k__BackingField;
    [CompilerGeneratedAttribute]
private JsonConverter <AnnualDateConverter>k__BackingField;
    [CompilerGeneratedAttribute]
private JsonConverter <DateIntervalConverter>k__BackingField;
    [CompilerGeneratedAttribute]
private JsonConverter <OffsetConverter>k__BackingField;
    [CompilerGeneratedAttribute]
private JsonConverter <DateTimeZoneConverter>k__BackingField;
    [CompilerGeneratedAttribute]
private JsonConverter <DurationConverter>k__BackingField;
    [CompilerGeneratedAttribute]
private JsonConverter <PeriodConverter>k__BackingField;
    [CompilerGeneratedAttribute]
private JsonConverter <OffsetDateConverter>k__BackingField;
    [CompilerGeneratedAttribute]
private JsonConverter <OffsetTimeConverter>k__BackingField;
    [CompilerGeneratedAttribute]
private JsonConverter <OffsetDateTimeConverter>k__BackingField;
    [CompilerGeneratedAttribute]
private JsonConverter <ZonedDateTimeConverter>k__BackingField;
    public JsonConverter InstantConverter { get; public set; }
    public JsonConverter IntervalConverter { get; public set; }
    public JsonConverter LocalDateConverter { get; public set; }
    public JsonConverter LocalTimeConverter { get; public set; }
    public JsonConverter LocalDateTimeConverter { get; public set; }
    public JsonConverter AnnualDateConverter { get; public set; }
    public JsonConverter DateIntervalConverter { get; public set; }
    public JsonConverter OffsetConverter { get; public set; }
    public JsonConverter DateTimeZoneConverter { get; public set; }
    public JsonConverter DurationConverter { get; public set; }
    public JsonConverter PeriodConverter { get; public set; }
    public JsonConverter OffsetDateConverter { get; public set; }
    public JsonConverter OffsetTimeConverter { get; public set; }
    public JsonConverter OffsetDateTimeConverter { get; public set; }
    public JsonConverter ZonedDateTimeConverter { get; public set; }
    public NodaJsonSettings(IDateTimeZoneProvider provider);
    [CompilerGeneratedAttribute]
public JsonConverter get_InstantConverter();
    [CompilerGeneratedAttribute]
public void set_InstantConverter(JsonConverter value);
    [CompilerGeneratedAttribute]
public JsonConverter get_IntervalConverter();
    [CompilerGeneratedAttribute]
public void set_IntervalConverter(JsonConverter value);
    [CompilerGeneratedAttribute]
public JsonConverter get_LocalDateConverter();
    [CompilerGeneratedAttribute]
public void set_LocalDateConverter(JsonConverter value);
    [CompilerGeneratedAttribute]
public JsonConverter get_LocalTimeConverter();
    [CompilerGeneratedAttribute]
public void set_LocalTimeConverter(JsonConverter value);
    [CompilerGeneratedAttribute]
public JsonConverter get_LocalDateTimeConverter();
    [CompilerGeneratedAttribute]
public void set_LocalDateTimeConverter(JsonConverter value);
    [CompilerGeneratedAttribute]
public JsonConverter get_AnnualDateConverter();
    [CompilerGeneratedAttribute]
public void set_AnnualDateConverter(JsonConverter value);
    [CompilerGeneratedAttribute]
public JsonConverter get_DateIntervalConverter();
    [CompilerGeneratedAttribute]
public void set_DateIntervalConverter(JsonConverter value);
    [CompilerGeneratedAttribute]
public JsonConverter get_OffsetConverter();
    [CompilerGeneratedAttribute]
public void set_OffsetConverter(JsonConverter value);
    [CompilerGeneratedAttribute]
public JsonConverter get_DateTimeZoneConverter();
    [CompilerGeneratedAttribute]
public void set_DateTimeZoneConverter(JsonConverter value);
    [CompilerGeneratedAttribute]
public JsonConverter get_DurationConverter();
    [CompilerGeneratedAttribute]
public void set_DurationConverter(JsonConverter value);
    [CompilerGeneratedAttribute]
public JsonConverter get_PeriodConverter();
    [CompilerGeneratedAttribute]
public void set_PeriodConverter(JsonConverter value);
    [CompilerGeneratedAttribute]
public JsonConverter get_OffsetDateConverter();
    [CompilerGeneratedAttribute]
public void set_OffsetDateConverter(JsonConverter value);
    [CompilerGeneratedAttribute]
public JsonConverter get_OffsetTimeConverter();
    [CompilerGeneratedAttribute]
public void set_OffsetTimeConverter(JsonConverter value);
    [CompilerGeneratedAttribute]
public JsonConverter get_OffsetDateTimeConverter();
    [CompilerGeneratedAttribute]
public void set_OffsetDateTimeConverter(JsonConverter value);
    [CompilerGeneratedAttribute]
public JsonConverter get_ZonedDateTimeConverter();
    [CompilerGeneratedAttribute]
public void set_ZonedDateTimeConverter(JsonConverter value);
    internal void AddConverters(IList`1<JsonConverter> converters);
    [CompilerGeneratedAttribute]
internal static void <AddConverters>g__MaybeAdd|62_0(JsonConverter converter, <>c__DisplayClass62_0& );
}
public class NodaTime.Serialization.JsonNet.NodaPatternConverter`1 : NodaConverterBase`1<T> {
    private IPattern`1<T> pattern;
    private Action`1<T> validator;
    public NodaPatternConverter`1(IPattern`1<T> pattern);
    public NodaPatternConverter`1(IPattern`1<T> pattern, Action`1<T> validator);
    protected virtual T ReadJsonImpl(JsonReader reader, JsonSerializer serializer);
    protected virtual void WriteJsonImpl(JsonWriter writer, T value, JsonSerializer serializer);
}
internal static class NodaTime.Serialization.JsonNet.Preconditions : object {
    internal static T CheckNotNull(T argument, string paramName);
    internal static void CheckArgument(bool expression, string parameter, string message);
    internal static void CheckData(bool expression, string messageFormat, T messageArg);
}
