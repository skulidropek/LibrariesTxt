[CompilerGeneratedAttribute]
[EmbeddedAttribute]
internal class Microsoft.CodeAnalysis.EmbeddedAttribute : Attribute {
}
public abstract class NodaTime.Serialization.SystemTextJson.DelegatingConverterBase`1 : JsonConverter`1<T> {
    private JsonConverter`1<T> original;
    protected DelegatingConverterBase`1(JsonConverter`1<T> original);
    public virtual void Write(Utf8JsonWriter writer, T value, JsonSerializerOptions options);
    public virtual T Read(Utf8JsonReader& reader, Type typeToConvert, JsonSerializerOptions options);
    public virtual bool CanConvert(Type objectType);
}
[ExtensionAttribute]
public static class NodaTime.Serialization.SystemTextJson.Extensions : object {
    [ExtensionAttribute]
public static JsonSerializerOptions ConfigureForNodaTime(JsonSerializerOptions options, IDateTimeZoneProvider provider);
    [ExtensionAttribute]
public static JsonSerializerOptions ConfigureForNodaTime(JsonSerializerOptions options, NodaJsonSettings nodaJsonSettings);
    [ExtensionAttribute]
public static JsonSerializerOptions WithIsoIntervalConverter(JsonSerializerOptions options);
    [ExtensionAttribute]
public static JsonSerializerOptions WithIsoDateIntervalConverter(JsonSerializerOptions options);
    private static void ReplaceExistingConverters(IList`1<JsonConverter> converters, JsonConverter newConverter);
    [ExtensionAttribute]
internal static string ResolvePropertyName(JsonSerializerOptions serializerOptions, string propertyName);
    [ExtensionAttribute]
internal static T ReadType(JsonSerializerOptions serializerOptions, Utf8JsonReader& reader);
    [ExtensionAttribute]
internal static void WriteType(JsonSerializerOptions serializerOptions, Utf8JsonWriter writer, T value);
}
public abstract class NodaTime.Serialization.SystemTextJson.NodaConverterBase`1 : JsonConverter`1<T> {
    private static bool CheckAssignableFrom;
    private static NodaConverterBase`1();
    public virtual bool CanConvert(Type objectType);
    public virtual T Read(Utf8JsonReader& reader, Type objectType, JsonSerializerOptions options);
    public virtual T ReadAsPropertyName(Utf8JsonReader& reader, Type typeToConvert, JsonSerializerOptions options);
    protected abstract virtual T ReadJsonImpl(Utf8JsonReader& reader, JsonSerializerOptions options);
    public virtual void Write(Utf8JsonWriter writer, T value, JsonSerializerOptions options);
    public virtual void WriteAsPropertyName(Utf8JsonWriter writer, T value, JsonSerializerOptions options);
    protected abstract virtual void WriteJsonImpl(Utf8JsonWriter writer, T value, JsonSerializerOptions options);
    protected virtual void WriteJsonPropertyNameImpl(Utf8JsonWriter writer, T value, JsonSerializerOptions options);
}
public static class NodaTime.Serialization.SystemTextJson.NodaConverters : object {
    [CompilerGeneratedAttribute]
private static JsonConverter`1<Instant> <InstantConverter>k__BackingField;
    [CompilerGeneratedAttribute]
private static JsonConverter`1<LocalDate> <LocalDateConverter>k__BackingField;
    [CompilerGeneratedAttribute]
private static JsonConverter`1<LocalDateTime> <LocalDateTimeConverter>k__BackingField;
    [CompilerGeneratedAttribute]
private static JsonConverter`1<LocalTime> <LocalTimeConverter>k__BackingField;
    [CompilerGeneratedAttribute]
private static JsonConverter`1<AnnualDate> <AnnualDateConverter>k__BackingField;
    [CompilerGeneratedAttribute]
private static JsonConverter`1<Interval> <IntervalConverter>k__BackingField;
    [CompilerGeneratedAttribute]
private static JsonConverter`1<Interval> <IsoIntervalConverter>k__BackingField;
    [CompilerGeneratedAttribute]
private static JsonConverter`1<DateInterval> <DateIntervalConverter>k__BackingField;
    [CompilerGeneratedAttribute]
private static JsonConverter`1<DateInterval> <IsoDateIntervalConverter>k__BackingField;
    [CompilerGeneratedAttribute]
private static JsonConverter`1<Offset> <OffsetConverter>k__BackingField;
    [CompilerGeneratedAttribute]
private static JsonConverter`1<OffsetDateTime> <OffsetDateTimeConverter>k__BackingField;
    [CompilerGeneratedAttribute]
private static JsonConverter`1<OffsetDate> <OffsetDateConverter>k__BackingField;
    [CompilerGeneratedAttribute]
private static JsonConverter`1<OffsetTime> <OffsetTimeConverter>k__BackingField;
    [CompilerGeneratedAttribute]
private static JsonConverter <DurationConverter>k__BackingField;
    [CompilerGeneratedAttribute]
private static JsonConverter <RoundtripDurationConverter>k__BackingField;
    [CompilerGeneratedAttribute]
private static JsonConverter`1<Period> <RoundtripPeriodConverter>k__BackingField;
    [CompilerGeneratedAttribute]
private static JsonConverter`1<Period> <NormalizingIsoPeriodConverter>k__BackingField;
    public static JsonConverter`1<Instant> InstantConverter { get; }
    public static JsonConverter`1<LocalDate> LocalDateConverter { get; }
    public static JsonConverter`1<LocalDateTime> LocalDateTimeConverter { get; }
    public static JsonConverter`1<LocalTime> LocalTimeConverter { get; }
    public static JsonConverter`1<AnnualDate> AnnualDateConverter { get; }
    public static JsonConverter`1<Interval> IntervalConverter { get; }
    public static JsonConverter`1<Interval> IsoIntervalConverter { get; }
    public static JsonConverter`1<DateInterval> DateIntervalConverter { get; }
    public static JsonConverter`1<DateInterval> IsoDateIntervalConverter { get; }
    public static JsonConverter`1<Offset> OffsetConverter { get; }
    public static JsonConverter`1<OffsetDateTime> OffsetDateTimeConverter { get; }
    public static JsonConverter`1<OffsetDate> OffsetDateConverter { get; }
    public static JsonConverter`1<OffsetTime> OffsetTimeConverter { get; }
    public static JsonConverter DurationConverter { get; }
    public static JsonConverter RoundtripDurationConverter { get; }
    public static JsonConverter`1<Period> RoundtripPeriodConverter { get; }
    public static JsonConverter`1<Period> NormalizingIsoPeriodConverter { get; }
    private static NodaConverters();
    [CompilerGeneratedAttribute]
public static JsonConverter`1<Instant> get_InstantConverter();
    [CompilerGeneratedAttribute]
public static JsonConverter`1<LocalDate> get_LocalDateConverter();
    [CompilerGeneratedAttribute]
public static JsonConverter`1<LocalDateTime> get_LocalDateTimeConverter();
    [CompilerGeneratedAttribute]
public static JsonConverter`1<LocalTime> get_LocalTimeConverter();
    [CompilerGeneratedAttribute]
public static JsonConverter`1<AnnualDate> get_AnnualDateConverter();
    [CompilerGeneratedAttribute]
public static JsonConverter`1<Interval> get_IntervalConverter();
    [CompilerGeneratedAttribute]
public static JsonConverter`1<Interval> get_IsoIntervalConverter();
    [CompilerGeneratedAttribute]
public static JsonConverter`1<DateInterval> get_DateIntervalConverter();
    [CompilerGeneratedAttribute]
public static JsonConverter`1<DateInterval> get_IsoDateIntervalConverter();
    [CompilerGeneratedAttribute]
public static JsonConverter`1<Offset> get_OffsetConverter();
    [CompilerGeneratedAttribute]
public static JsonConverter`1<OffsetDateTime> get_OffsetDateTimeConverter();
    [CompilerGeneratedAttribute]
public static JsonConverter`1<OffsetDate> get_OffsetDateConverter();
    [CompilerGeneratedAttribute]
public static JsonConverter`1<OffsetTime> get_OffsetTimeConverter();
    public static JsonConverter`1<ZonedDateTime> CreateZonedDateTimeConverter(IDateTimeZoneProvider provider);
    public static JsonConverter`1<DateTimeZone> CreateDateTimeZoneConverter(IDateTimeZoneProvider provider);
    [CompilerGeneratedAttribute]
public static JsonConverter get_DurationConverter();
    [CompilerGeneratedAttribute]
public static JsonConverter get_RoundtripDurationConverter();
    [CompilerGeneratedAttribute]
public static JsonConverter`1<Period> get_RoundtripPeriodConverter();
    [CompilerGeneratedAttribute]
public static JsonConverter`1<Period> get_NormalizingIsoPeriodConverter();
    private static Action`1<T> CreateIsoValidator(Func`2<T, CalendarSystem> calendarProjection);
}
internal class NodaTime.Serialization.SystemTextJson.NodaDateIntervalConverter : NodaConverterBase`1<DateInterval> {
    protected virtual DateInterval ReadJsonImpl(Utf8JsonReader& reader, JsonSerializerOptions options);
    protected virtual void WriteJsonImpl(Utf8JsonWriter writer, DateInterval value, JsonSerializerOptions options);
    protected virtual void WriteJsonPropertyNameImpl(Utf8JsonWriter writer, DateInterval value, JsonSerializerOptions options);
}
internal class NodaTime.Serialization.SystemTextJson.NodaDateTimeZoneConverter : NodaConverterBase`1<DateTimeZone> {
    private IDateTimeZoneProvider provider;
    public NodaDateTimeZoneConverter(IDateTimeZoneProvider provider);
    protected virtual DateTimeZone ReadJsonImpl(Utf8JsonReader& reader, JsonSerializerOptions options);
    protected virtual void WriteJsonImpl(Utf8JsonWriter writer, DateTimeZone value, JsonSerializerOptions options);
    protected virtual void WriteJsonPropertyNameImpl(Utf8JsonWriter writer, DateTimeZone value, JsonSerializerOptions options);
}
internal class NodaTime.Serialization.SystemTextJson.NodaIntervalConverter : NodaConverterBase`1<Interval> {
    protected virtual Interval ReadJsonImpl(Utf8JsonReader& reader, JsonSerializerOptions options);
    protected virtual void WriteJsonImpl(Utf8JsonWriter writer, Interval value, JsonSerializerOptions options);
    protected virtual void WriteJsonPropertyNameImpl(Utf8JsonWriter writer, Interval value, JsonSerializerOptions options);
}
internal class NodaTime.Serialization.SystemTextJson.NodaIsoDateIntervalConverter : NodaConverterBase`1<DateInterval> {
    protected virtual DateInterval ReadJsonImpl(Utf8JsonReader& reader, JsonSerializerOptions options);
    protected virtual void WriteJsonImpl(Utf8JsonWriter writer, DateInterval value, JsonSerializerOptions options);
    protected virtual void WriteJsonPropertyNameImpl(Utf8JsonWriter writer, DateInterval value, JsonSerializerOptions options);
}
internal class NodaTime.Serialization.SystemTextJson.NodaIsoIntervalConverter : NodaConverterBase`1<Interval> {
    protected virtual Interval ReadJsonImpl(Utf8JsonReader& reader, JsonSerializerOptions options);
    protected virtual void WriteJsonImpl(Utf8JsonWriter writer, Interval value, JsonSerializerOptions options);
    protected virtual void WriteJsonPropertyNameImpl(Utf8JsonWriter writer, Interval value, JsonSerializerOptions options);
}
public class NodaTime.Serialization.SystemTextJson.NodaJsonSettings : object {
    [CompilerGeneratedAttribute]
private JsonConverter <InstantConverter>k__BackingField;
    [CompilerGeneratedAttribute]
private JsonConverter <IntervalConverter>k__BackingField;
    [CompilerGeneratedAttribute]
private JsonConverter <LocalDateConverter>k__BackingField;
    [CompilerGeneratedAttribute]
private JsonConverter <LocalTimeConverter>k__BackingField;
    [CompilerGeneratedAttribute]
private JsonConverter <LocalDateTimeConverter>k__BackingField;
    [CompilerGeneratedAttribute]
private JsonConverter <AnnualDateConverter>k__BackingField;
    [CompilerGeneratedAttribute]
private JsonConverter <DateIntervalConverter>k__BackingField;
    [CompilerGeneratedAttribute]
private JsonConverter <OffsetConverter>k__BackingField;
    [CompilerGeneratedAttribute]
private JsonConverter <DateTimeZoneConverter>k__BackingField;
    [CompilerGeneratedAttribute]
private JsonConverter <DurationConverter>k__BackingField;
    [CompilerGeneratedAttribute]
private JsonConverter <PeriodConverter>k__BackingField;
    [CompilerGeneratedAttribute]
private JsonConverter <OffsetDateConverter>k__BackingField;
    [CompilerGeneratedAttribute]
private JsonConverter <OffsetTimeConverter>k__BackingField;
    [CompilerGeneratedAttribute]
private JsonConverter <OffsetDateTimeConverter>k__BackingField;
    [CompilerGeneratedAttribute]
private JsonConverter <ZonedDateTimeConverter>k__BackingField;
    public JsonConverter InstantConverter { get; public set; }
    public JsonConverter IntervalConverter { get; public set; }
    public JsonConverter LocalDateConverter { get; public set; }
    public JsonConverter LocalTimeConverter { get; public set; }
    public JsonConverter LocalDateTimeConverter { get; public set; }
    public JsonConverter AnnualDateConverter { get; public set; }
    public JsonConverter DateIntervalConverter { get; public set; }
    public JsonConverter OffsetConverter { get; public set; }
    public JsonConverter DateTimeZoneConverter { get; public set; }
    public JsonConverter DurationConverter { get; public set; }
    public JsonConverter PeriodConverter { get; public set; }
    public JsonConverter OffsetDateConverter { get; public set; }
    public JsonConverter OffsetTimeConverter { get; public set; }
    public JsonConverter OffsetDateTimeConverter { get; public set; }
    public JsonConverter ZonedDateTimeConverter { get; public set; }
    public NodaJsonSettings(IDateTimeZoneProvider provider);
    [CompilerGeneratedAttribute]
public JsonConverter get_InstantConverter();
    [CompilerGeneratedAttribute]
public void set_InstantConverter(JsonConverter value);
    [CompilerGeneratedAttribute]
public JsonConverter get_IntervalConverter();
    [CompilerGeneratedAttribute]
public void set_IntervalConverter(JsonConverter value);
    [CompilerGeneratedAttribute]
public JsonConverter get_LocalDateConverter();
    [CompilerGeneratedAttribute]
public void set_LocalDateConverter(JsonConverter value);
    [CompilerGeneratedAttribute]
public JsonConverter get_LocalTimeConverter();
    [CompilerGeneratedAttribute]
public void set_LocalTimeConverter(JsonConverter value);
    [CompilerGeneratedAttribute]
public JsonConverter get_LocalDateTimeConverter();
    [CompilerGeneratedAttribute]
public void set_LocalDateTimeConverter(JsonConverter value);
    [CompilerGeneratedAttribute]
public JsonConverter get_AnnualDateConverter();
    [CompilerGeneratedAttribute]
public void set_AnnualDateConverter(JsonConverter value);
    [CompilerGeneratedAttribute]
public JsonConverter get_DateIntervalConverter();
    [CompilerGeneratedAttribute]
public void set_DateIntervalConverter(JsonConverter value);
    [CompilerGeneratedAttribute]
public JsonConverter get_OffsetConverter();
    [CompilerGeneratedAttribute]
public void set_OffsetConverter(JsonConverter value);
    [CompilerGeneratedAttribute]
public JsonConverter get_DateTimeZoneConverter();
    [CompilerGeneratedAttribute]
public void set_DateTimeZoneConverter(JsonConverter value);
    [CompilerGeneratedAttribute]
public JsonConverter get_DurationConverter();
    [CompilerGeneratedAttribute]
public void set_DurationConverter(JsonConverter value);
    [CompilerGeneratedAttribute]
public JsonConverter get_PeriodConverter();
    [CompilerGeneratedAttribute]
public void set_PeriodConverter(JsonConverter value);
    [CompilerGeneratedAttribute]
public JsonConverter get_OffsetDateConverter();
    [CompilerGeneratedAttribute]
public void set_OffsetDateConverter(JsonConverter value);
    [CompilerGeneratedAttribute]
public JsonConverter get_OffsetTimeConverter();
    [CompilerGeneratedAttribute]
public void set_OffsetTimeConverter(JsonConverter value);
    [CompilerGeneratedAttribute]
public JsonConverter get_OffsetDateTimeConverter();
    [CompilerGeneratedAttribute]
public void set_OffsetDateTimeConverter(JsonConverter value);
    [CompilerGeneratedAttribute]
public JsonConverter get_ZonedDateTimeConverter();
    [CompilerGeneratedAttribute]
public void set_ZonedDateTimeConverter(JsonConverter value);
    internal void AddConverters(IList`1<JsonConverter> converters);
    [CompilerGeneratedAttribute]
internal static void <AddConverters>g__MaybeAdd|62_0(JsonConverter converter, <>c__DisplayClass62_0& );
}
public class NodaTime.Serialization.SystemTextJson.NodaPatternConverter`1 : NodaConverterBase`1<T> {
    private IPattern`1<T> pattern;
    private Action`1<T> validator;
    public NodaPatternConverter`1(IPattern`1<T> pattern);
    public NodaPatternConverter`1(IPattern`1<T> pattern, Action`1<T> validator);
    protected virtual T ReadJsonImpl(Utf8JsonReader& reader, JsonSerializerOptions options);
    protected virtual void WriteJsonImpl(Utf8JsonWriter writer, T value, JsonSerializerOptions options);
    protected virtual void WriteJsonPropertyNameImpl(Utf8JsonWriter writer, T value, JsonSerializerOptions options);
}
public class NodaTime.Serialization.SystemTextJson.NodaTimeDefaultJsonConverterAttribute : JsonConverterAttribute {
    public virtual JsonConverter CreateConverter(Type typeToConvert);
}
public class NodaTime.Serialization.SystemTextJson.NodaTimeDefaultJsonConverterFactory : JsonConverterFactory {
    private static Dictionary`2<Type, JsonConverter> converters;
    private static NodaTimeDefaultJsonConverterFactory();
    private static Dictionary`2<Type, JsonConverter> CreateConverterDictionary();
    internal static JsonConverter GetConverter(Type typeToConvert);
    public virtual bool CanConvert(Type typeToConvert);
    public virtual JsonConverter CreateConverter(Type typeToConvert, JsonSerializerOptions options);
}
internal static class NodaTime.Serialization.SystemTextJson.Preconditions : object {
    internal static T CheckNotNull(T argument, string paramName);
    internal static void CheckArgument(bool expression, string parameter, string message);
    internal static void CheckData(bool expression, string messageFormat, T messageArg);
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
[AttributeUsageAttribute("2")]
internal class System.Runtime.CompilerServices.RefSafetyRulesAttribute : Attribute {
    public int Version;
    public RefSafetyRulesAttribute(int );
}
