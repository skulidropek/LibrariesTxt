[CompilerGeneratedAttribute]
[EmbeddedAttribute]
internal class Microsoft.CodeAnalysis.EmbeddedAttribute : Attribute {
}
[ExtensionAttribute]
public static class NodaTime.Testing.Extensions.DurationConstruction : object {
    [ExtensionAttribute]
public static Duration Days(double days);
    [ExtensionAttribute]
public static Duration Days(int days);
    [ExtensionAttribute]
public static Duration Hours(double hours);
    [ExtensionAttribute]
public static Duration Hours(int hours);
    [ExtensionAttribute]
public static Duration Minutes(double minutes);
    [ExtensionAttribute]
public static Duration Minutes(int minutes);
    [ExtensionAttribute]
public static Duration Minutes(long minutes);
    [ExtensionAttribute]
public static Duration Seconds(double seconds);
    [ExtensionAttribute]
public static Duration Seconds(int seconds);
    [ExtensionAttribute]
public static Duration Seconds(long seconds);
    [ExtensionAttribute]
public static Duration Milliseconds(double milliseconds);
    [ExtensionAttribute]
public static Duration Milliseconds(int milliseconds);
    [ExtensionAttribute]
public static Duration Milliseconds(long milliseconds);
    [ExtensionAttribute]
public static Duration Ticks(double ticks);
    [ExtensionAttribute]
public static Duration Ticks(int ticks);
    [ExtensionAttribute]
public static Duration Ticks(long ticks);
    [ExtensionAttribute]
public static Duration Nanoseconds(double nanoseconds);
    [ExtensionAttribute]
public static Duration Nanoseconds(int nanoseconds);
    [ExtensionAttribute]
public static Duration Nanoseconds(long nanoseconds);
}
[ExtensionAttribute]
public static class NodaTime.Testing.Extensions.LocalDateConstruction : object {
    [ExtensionAttribute]
public static LocalDate January(int day, int year);
    [ExtensionAttribute]
public static LocalDate February(int day, int year);
    [ExtensionAttribute]
public static LocalDate March(int day, int year);
    [ExtensionAttribute]
public static LocalDate April(int day, int year);
    [ExtensionAttribute]
public static LocalDate May(int day, int year);
    [ExtensionAttribute]
public static LocalDate June(int day, int year);
    [ExtensionAttribute]
public static LocalDate July(int day, int year);
    [ExtensionAttribute]
public static LocalDate August(int day, int year);
    [ExtensionAttribute]
public static LocalDate September(int day, int year);
    [ExtensionAttribute]
public static LocalDate October(int day, int year);
    [ExtensionAttribute]
public static LocalDate November(int day, int year);
    [ExtensionAttribute]
public static LocalDate December(int day, int year);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class NodaTime.Testing.FakeClock : object {
    private object mutex;
    private Instant now;
    private Duration autoAdvance;
    public Duration AutoAdvance { get; public set; }
    public FakeClock(Instant initial);
    public FakeClock(Instant initial, Duration autoAdvance);
    public static FakeClock FromUtc(int year, int monthOfYear, int dayOfMonth);
    public static FakeClock FromUtc(int year, int monthOfYear, int dayOfMonth, int hourOfDay, int minuteOfHour, int secondOfMinute);
    public void Advance(Duration duration);
    public void AdvanceNanoseconds(long nanoseconds);
    public void AdvanceTicks(long ticks);
    public void AdvanceMilliseconds(long milliseconds);
    public void AdvanceSeconds(long seconds);
    public void AdvanceMinutes(long minutes);
    public void AdvanceHours(int hours);
    public void AdvanceDays(int days);
    public void Reset(Instant instant);
    public sealed virtual Instant GetCurrentInstant();
    public Duration get_AutoAdvance();
    public void set_AutoAdvance(Duration value);
}
internal static class NodaTime.Testing.Preconditions : object {
    [NullableContextAttribute("1")]
internal static T CheckNotNull(T argument, string paramName);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class NodaTime.Testing.TimeZones.FakeDateTimeZoneSource : object {
    private Dictionary`2<string, DateTimeZone> zones;
    private Dictionary`2<string, string> bclToZoneIds;
    [CompilerGeneratedAttribute]
private string <VersionId>k__BackingField;
    public string VersionId { get; }
    private FakeDateTimeZoneSource(string versionId, Dictionary`2<string, DateTimeZone> zones, Dictionary`2<string, string> bclToZoneIds);
    public IDateTimeZoneProvider ToProvider();
    public sealed virtual IEnumerable`1<string> GetIds();
    [CompilerGeneratedAttribute]
public sealed virtual string get_VersionId();
    public sealed virtual DateTimeZone ForId(string id);
    [NullableContextAttribute("2")]
public sealed virtual string GetSystemDefaultId();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class NodaTime.Testing.TimeZones.MultiTransitionDateTimeZone : DateTimeZone {
    [CompilerGeneratedAttribute]
private ReadOnlyCollection`1<ZoneInterval> <Intervals>k__BackingField;
    [CompilerGeneratedAttribute]
private ReadOnlyCollection`1<Instant> <Transitions>k__BackingField;
    public ReadOnlyCollection`1<ZoneInterval> Intervals { get; }
    public ReadOnlyCollection`1<Instant> Transitions { get; }
    private MultiTransitionDateTimeZone(string id, IList`1<ZoneInterval> intervals);
    [CompilerGeneratedAttribute]
public ReadOnlyCollection`1<ZoneInterval> get_Intervals();
    [CompilerGeneratedAttribute]
public ReadOnlyCollection`1<Instant> get_Transitions();
    public virtual ZoneInterval GetZoneInterval(Instant instant);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class NodaTime.Testing.TimeZones.SingleTransitionDateTimeZone : DateTimeZone {
    [CompilerGeneratedAttribute]
private ZoneInterval <EarlyInterval>k__BackingField;
    [CompilerGeneratedAttribute]
private ZoneInterval <LateInterval>k__BackingField;
    public ZoneInterval EarlyInterval { get; }
    public ZoneInterval LateInterval { get; }
    public Instant Transition { get; }
    public SingleTransitionDateTimeZone(Instant transitionPoint, int offsetBeforeHours, int offsetAfterHours);
    public SingleTransitionDateTimeZone(Instant transitionPoint, Offset offsetBefore, Offset offsetAfter);
    public SingleTransitionDateTimeZone(Instant transitionPoint, Offset offsetBefore, Offset offsetAfter, string id);
    [CompilerGeneratedAttribute]
public ZoneInterval get_EarlyInterval();
    [CompilerGeneratedAttribute]
public ZoneInterval get_LateInterval();
    public Instant get_Transition();
    public virtual ZoneInterval GetZoneInterval(Instant instant);
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
[AttributeUsageAttribute("27524")]
internal class System.Runtime.CompilerServices.NullableAttribute : Attribute {
    public Byte[] NullableFlags;
    public NullableAttribute(byte );
    public NullableAttribute(Byte[] );
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
[AttributeUsageAttribute("5196")]
internal class System.Runtime.CompilerServices.NullableContextAttribute : Attribute {
    public byte Flag;
    public NullableContextAttribute(byte );
}
