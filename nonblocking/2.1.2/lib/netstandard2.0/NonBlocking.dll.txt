[CompilerGeneratedAttribute]
[EmbeddedAttribute]
internal class Microsoft.CodeAnalysis.EmbeddedAttribute : Attribute {
}
internal class NonBlocking.Boxed`1 : object {
    public int writeStatus;
    public T Value;
    public Boxed`1(T key);
    public virtual bool Equals(object obj);
    public bool TryVolatileWrite(T value);
    public bool TryCompareExchange(T oldValue, T newValue, Boolean& changed);
    internal void Freeze();
}
[DefaultMemberAttribute("Item")]
[DebuggerTypeProxyAttribute("NonBlocking.IDictionaryDebugView`2")]
[DebuggerDisplayAttribute("Count = {Count}")]
public class NonBlocking.ConcurrentDictionary`2 : object {
    private bool _valueIsValueType;
    internal DictionaryImpl`2<TKey, TValue> _table;
    internal UInt32 _lastResizeTickMillis;
    internal object _sweeperInstance;
    internal int _sweepRequests;
    private static int DefaultCapacity;
    private static int DefaultConcurrencyLevel { get; }
    public TValue Item { get; public set; }
    public IEqualityComparer`1<TKey> Comparer { get; }
    public int Count { get; }
    public bool IsEmpty { get; }
    public ICollection`1<TKey> Keys { get; }
    private IEnumerable`1<TKey> System.Collections.Generic.IReadOnlyDictionary<TKey,TValue>.Keys { get; }
    public ICollection`1<TValue> Values { get; }
    private IEnumerable`1<TValue> System.Collections.Generic.IReadOnlyDictionary<TKey,TValue>.Values { get; }
    private bool System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<TKey,TValue>>.IsReadOnly { get; }
    private bool System.Collections.IDictionary.IsFixedSize { get; }
    private bool System.Collections.IDictionary.IsReadOnly { get; }
    private ICollection System.Collections.IDictionary.Keys { get; }
    private ICollection System.Collections.IDictionary.Values { get; }
    [NullableAttribute("2")]
private object System.Collections.IDictionary.Item { get; private set; }
    private bool System.Collections.ICollection.IsSynchronized { get; }
    private object System.Collections.ICollection.SyncRoot { get; }
    public ConcurrentDictionary`2(int concurrencyLevel, int capacity);
    public ConcurrentDictionary`2(IEnumerable`1<KeyValuePair`2<TKey, TValue>> collection);
    public ConcurrentDictionary`2(IEqualityComparer`1<TKey> comparer);
    public ConcurrentDictionary`2(IEnumerable`1<KeyValuePair`2<TKey, TValue>> collection, IEqualityComparer`1<TKey> comparer);
    public ConcurrentDictionary`2(int concurrencyLevel, IEnumerable`1<KeyValuePair`2<TKey, TValue>> collection, IEqualityComparer`1<TKey> comparer);
    public ConcurrentDictionary`2(int concurrencyLevel, int capacity, IEqualityComparer`1<TKey> comparer);
    private static int get_DefaultConcurrencyLevel();
    private void InitializeFromCollection(IEnumerable`1<KeyValuePair`2<TKey, TValue>> collection);
    public bool TryAdd(TKey key, TValue value);
    public sealed virtual bool ContainsKey(TKey key);
    public bool TryRemove(TKey key, TValue& value);
    public bool TryRemove(KeyValuePair`2<TKey, TValue> item);
    private TValue FromObjectValue(object obj);
    public sealed virtual bool TryGetValue(TKey key, TValue& value);
    public bool TryUpdate(TKey key, TValue newValue, TValue comparisonValue);
    public sealed virtual void Clear();
    private sealed virtual override void System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<TKey,TValue>>.CopyTo(KeyValuePair`2[] array, int index);
    public KeyValuePair`2[] ToArray();
    private void CopyToPairs(KeyValuePair`2[] array, int index);
    private void CopyToEntries(DictionaryEntry[] array, int index);
    private void CopyToObjects(Object[] array, int index);
    public sealed virtual IEnumerator`1<KeyValuePair`2<TKey, TValue>> GetEnumerator();
    public sealed virtual TValue get_Item(TKey key);
    public sealed virtual void set_Item(TKey key, TValue value);
    private static TValue ThrowKeyNotFoundException();
    public IEqualityComparer`1<TKey> get_Comparer();
    public sealed virtual int get_Count();
    public TValue GetOrAdd(TKey key, Func`2<TKey, TValue> valueFactory);
    public TValue GetOrAdd(TKey key, Func`3<TKey, TArg, TValue> valueFactory, TArg factoryArgument);
    public TValue GetOrAdd(TKey key, TValue value);
    public TValue AddOrUpdate(TKey key, Func`3<TKey, TArg, TValue> addValueFactory, Func`4<TKey, TValue, TArg, TValue> updateValueFactory, TArg factoryArgument);
    public TValue AddOrUpdate(TKey key, Func`2<TKey, TValue> addValueFactory, Func`3<TKey, TValue, TValue> updateValueFactory);
    public TValue AddOrUpdate(TKey key, TValue addValue, Func`3<TKey, TValue, TValue> updateValueFactory);
    public bool get_IsEmpty();
    private sealed virtual override void System.Collections.Generic.IDictionary<TKey,TValue>.Add(TKey key, TValue value);
    private sealed virtual override bool System.Collections.Generic.IDictionary<TKey,TValue>.Remove(TKey key);
    public sealed virtual ICollection`1<TKey> get_Keys();
    private sealed virtual override IEnumerable`1<TKey> System.Collections.Generic.IReadOnlyDictionary<TKey,TValue>.get_Keys();
    public sealed virtual ICollection`1<TValue> get_Values();
    private sealed virtual override IEnumerable`1<TValue> System.Collections.Generic.IReadOnlyDictionary<TKey,TValue>.get_Values();
    private sealed virtual override void System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<TKey,TValue>>.Add(KeyValuePair`2<TKey, TValue> keyValuePair);
    private sealed virtual override bool System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<TKey,TValue>>.Contains(KeyValuePair`2<TKey, TValue> keyValuePair);
    private sealed virtual override bool System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<TKey,TValue>>.get_IsReadOnly();
    private sealed virtual override bool System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<TKey,TValue>>.Remove(KeyValuePair`2<TKey, TValue> keyValuePair);
    private sealed virtual override IEnumerator System.Collections.IEnumerable.GetEnumerator();
    private sealed virtual override void System.Collections.IDictionary.Add(object key, object value);
    private sealed virtual override bool System.Collections.IDictionary.Contains(object key);
    private sealed virtual override IDictionaryEnumerator System.Collections.IDictionary.GetEnumerator();
    private sealed virtual override bool System.Collections.IDictionary.get_IsFixedSize();
    private sealed virtual override bool System.Collections.IDictionary.get_IsReadOnly();
    private sealed virtual override ICollection System.Collections.IDictionary.get_Keys();
    private sealed virtual override void System.Collections.IDictionary.Remove(object key);
    private sealed virtual override ICollection System.Collections.IDictionary.get_Values();
    private sealed virtual override object System.Collections.IDictionary.get_Item(object key);
    private sealed virtual override void System.Collections.IDictionary.set_Item(object key, object value);
    [NullableContextAttribute("2")]
private static void ThrowIfInvalidObjectValue(object value);
    private sealed virtual override void System.Collections.ICollection.CopyTo(Array array, int index);
    private sealed virtual override bool System.Collections.ICollection.get_IsSynchronized();
    private sealed virtual override object System.Collections.ICollection.get_SyncRoot();
    private ReadOnlyCollection`1<TKey> GetKeys();
    private ReadOnlyCollection`1<TValue> GetValues();
}
public class NonBlocking.Counter32 : CounterBase {
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private Cell[] cells;
    private int count;
    private int lastCount;
    public int Value { get; }
    public int EstimatedValue { get; }
    public int get_Value();
    public int get_EstimatedValue();
    public void Increment();
    public void Decrement();
    public void Add(int value);
    private Int32& GetCountRef(int curCellCount);
    private static int increment(Int32& val);
    private static int add(Int32& val, int inc);
    private static int decrement(Int32& val);
    private void TryAddCell(int curCellCount);
    private void TryAddCellCore(int curCellCount);
}
public class NonBlocking.Counter64 : CounterBase {
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private Cell[] cells;
    private long count;
    private long lastCount;
    public long Value { get; }
    public long EstimatedValue { get; }
    public long get_Value();
    public long get_EstimatedValue();
    public void Increment();
    public void Decrement();
    public void Add(int value);
    private Int64& GetCountRef(int curCellCount);
    private static long increment(Int64& val);
    private static long add(Int64& val, int inc);
    private static long decrement(Int64& val);
    private void TryAddCell(int curCellCount);
    private void TryAddCellCore(int curCellCount);
}
public class NonBlocking.CounterBase : object {
    private protected static int CACHE_LINE;
    private protected static int OBJ_HEADER_SIZE;
    private protected static int s_MaxCellCount;
    private protected int cellCount;
    private protected UInt32 lastCountTicks;
    private static CounterBase();
    private protected static int GetIndex(UInt32 cellCount);
}
internal abstract class NonBlocking.DictionaryImpl : object {
    internal static object TOMBSTONE;
    internal static Prime TOMBPRIME;
    internal static object NULLVALUE;
    protected static int TOMBPRIMEHASH;
    protected static int ZEROHASH;
    protected static int SPECIAL_HASH_BITS;
    protected static int REPROBE_LIMIT;
    protected static int REPROBE_LIMIT_SHIFT;
    private static DictionaryImpl();
    protected static int ReprobeLimit(int lenMask);
    protected static bool EntryValueNullOrDead(object entryValue);
    protected static int ReduceHashToIndex(int fullHash, int lenMask);
    internal static object ToObjectValue(TValue value);
}
internal abstract class NonBlocking.DictionaryImpl`2 : DictionaryImpl {
    private bool _valueIsValueType;
    internal IEqualityComparer`1<TKey> _keyComparer;
    internal int Count { get; }
    internal abstract virtual void Clear();
    internal abstract virtual int get_Count();
    internal abstract virtual object TryGetValue(TKey key);
    internal abstract virtual bool PutIfMatch(TKey key, TValue newVal, TValue& oldValue, ValueMatch match);
    internal abstract virtual bool RemoveIfMatch(TKey key, TValue& oldValue, ValueMatch match);
    internal abstract virtual TValue GetOrAdd(TKey key, Func`2<TKey, TValue> valueFactory);
    internal abstract virtual Snapshot<TKey, TValue> GetSnapshot();
    protected TValue FromObjectValue(object obj);
}
internal abstract class NonBlocking.DictionaryImpl`3 : DictionaryImpl`2<TKey, TValue> {
    private Entry[] _entries;
    internal DictionaryImpl`3<TKey, TKeyStore, TValue> _newTable;
    protected ConcurrentDictionary`2<TKey, TValue> _topDict;
    protected Counter32 allocatedSlotCount;
    private Counter32 _size;
    internal static bool valueIsAtomic;
    private int _resizers;
    private int _claimedChunk;
    private int _copyDone;
    private static int MIN_SIZE;
    private static UInt32 RESIZE_MILLIS_TARGET;
    internal int Count { get; }
    internal int Size { get; }
    internal int EstimatedSlotsUsed { get; }
    internal DictionaryImpl`3(int capacity, ConcurrentDictionary`2<TKey, TValue> topDict);
    protected DictionaryImpl`3(int capacity, DictionaryImpl`3<TKey, TKeyStore, TValue> other);
    private static DictionaryImpl`3();
    internal virtual Snapshot<TKey, TValue> GetSnapshot();
    protected abstract virtual DictionaryImpl`3<TKey, TKeyStore, TValue> CreateNew(int capacity);
    protected abstract virtual TKey keyFromEntry(TKeyStore entryKey);
    protected abstract virtual bool keyEqual(TKey key, TKeyStore entryKey);
    protected abstract virtual bool TryClaimSlotForPut(TKeyStore& entryKey, TKey key);
    protected abstract virtual bool TryClaimSlotForCopy(TKeyStore& entryKey, TKeyStore key);
    private static bool IsValueAtomicPrimitive();
    private static UInt32 CurrentTickMillis();
    protected virtual int hash(TKey key);
    internal sealed virtual int get_Count();
    internal sealed virtual void Clear();
    internal virtual object TryGetValue(TKey key);
    internal sealed virtual bool RemoveIfMatch(TKey key, TValue& oldVal, ValueMatch match);
    internal sealed virtual bool PutIfMatch(TKey key, TValue newVal, TValue& oldVal, ValueMatch match);
    private bool ValueIsAtomicPrimitive();
    internal sealed virtual TValue GetOrAdd(TKey key, Func`2<TKey, TValue> valueFactory);
    private bool PutSlotCopy(TKeyStore key, object value, int fullHash);
    private void ResizeOnReprobeCheck(int reprobeCount);
    private void ReprobeResizeCheckSlow();
    internal int get_Size();
    internal int get_EstimatedSlotsUsed();
    internal bool TableIsCrowded();
    private void HelpCopyIfNeeded();
    internal void HelpCopy(bool copy_all);
    private void PromoteNewTable();
    internal DictionaryImpl`3<TKey, TKeyStore, TValue> CopySlotAndGetNewTable(Entry& entry, bool shouldHelp);
    private static bool CopySlot(Entry& oldEntry, DictionaryImpl`3<TKey, TKeyStore, TValue> newTable);
    private DictionaryImpl`3<TKey, TKeyStore, TValue> Resize(bool isForReprobe);
    private DictionaryImpl`3<TKey, TKeyStore, TValue> ResizeImpl(bool isForReprobe);
    private void SweepCheck();
    [CompilerGeneratedAttribute]
private bool <ResizeImpl>b__46_0();
}
internal class NonBlocking.DictionaryImplBoxed`2 : DictionaryImpl`3<TKey, Boxed`1<TKey>, TValue> {
    internal DictionaryImplBoxed`2(int capacity, ConcurrentDictionary`2<TKey, TValue> topDict);
    internal DictionaryImplBoxed`2(int capacity, DictionaryImplBoxed`2<TKey, TValue> other);
    protected virtual bool TryClaimSlotForPut(Boxed`1& entryKey, TKey key);
    protected virtual bool TryClaimSlotForCopy(Boxed`1& entryKey, Boxed`1<TKey> key);
    protected virtual bool keyEqual(TKey key, Boxed`1<TKey> entryKey);
    protected virtual DictionaryImpl`3<TKey, Boxed`1<TKey>, TValue> CreateNew(int capacity);
    protected virtual TKey keyFromEntry(Boxed`1<TKey> entryKey);
}
[NullableContextAttribute("1")]
[NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
internal class NonBlocking.DictionaryImplInt`1 : DictionaryImpl`3<int, int, TValue> {
    internal DictionaryImplInt`1(int capacity, ConcurrentDictionary`2<int, TValue> topDict);
    internal DictionaryImplInt`1(int capacity, DictionaryImplInt`1<TValue> other);
    protected virtual bool TryClaimSlotForPut(Int32& entryKey, int key);
    protected virtual bool TryClaimSlotForCopy(Int32& entryKey, int key);
    private bool TryClaimSlot(Int32& entryKey, int key);
    protected virtual int hash(int key);
    protected virtual bool keyEqual(int key, int entryKey);
    protected virtual DictionaryImpl`3<int, int, TValue> CreateNew(int capacity);
    protected virtual int keyFromEntry(int entryKey);
}
[NullableContextAttribute("1")]
[NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
internal class NonBlocking.DictionaryImplIntNoComparer`1 : DictionaryImpl`3<int, int, TValue> {
    internal DictionaryImplIntNoComparer`1(int capacity, ConcurrentDictionary`2<int, TValue> topDict);
    internal DictionaryImplIntNoComparer`1(int capacity, DictionaryImplIntNoComparer`1<TValue> other);
    protected virtual bool TryClaimSlotForPut(Int32& entryKey, int key);
    protected virtual bool TryClaimSlotForCopy(Int32& entryKey, int key);
    private bool TryClaimSlot(Int32& entryKey, int key);
    internal virtual object TryGetValue(int key);
    protected virtual int hash(int key);
    protected virtual bool keyEqual(int key, int entryKey);
    protected virtual DictionaryImpl`3<int, int, TValue> CreateNew(int capacity);
    protected virtual int keyFromEntry(int entryKey);
}
[NullableContextAttribute("1")]
[NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
internal class NonBlocking.DictionaryImplLong`1 : DictionaryImpl`3<long, long, TValue> {
    internal DictionaryImplLong`1(int capacity, ConcurrentDictionary`2<long, TValue> topDict);
    internal DictionaryImplLong`1(int capacity, DictionaryImplLong`1<TValue> other);
    protected virtual bool TryClaimSlotForPut(Int64& entryKey, long key);
    protected virtual bool TryClaimSlotForCopy(Int64& entryKey, long key);
    private bool TryClaimSlot(Int64& entryKey, long key);
    protected virtual int hash(long key);
    protected virtual bool keyEqual(long key, long entryKey);
    protected virtual DictionaryImpl`3<long, long, TValue> CreateNew(int capacity);
    protected virtual long keyFromEntry(long entryKey);
}
[NullableContextAttribute("1")]
[NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
internal class NonBlocking.DictionaryImplLongNoComparer`1 : DictionaryImpl`3<long, long, TValue> {
    internal DictionaryImplLongNoComparer`1(int capacity, ConcurrentDictionary`2<long, TValue> topDict);
    internal DictionaryImplLongNoComparer`1(int capacity, DictionaryImplLongNoComparer`1<TValue> other);
    protected virtual bool TryClaimSlotForPut(Int64& entryKey, long key);
    protected virtual bool TryClaimSlotForCopy(Int64& entryKey, long key);
    private bool TryClaimSlot(Int64& entryKey, long key);
    internal virtual object TryGetValue(long key);
    protected virtual int hash(long key);
    protected virtual bool keyEqual(long key, long entryKey);
    protected virtual DictionaryImpl`3<long, long, TValue> CreateNew(int capacity);
    protected virtual long keyFromEntry(long entryKey);
}
[NativeIntegerAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[NullableContextAttribute("1")]
[NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
internal class NonBlocking.DictionaryImplNint`1 : DictionaryImpl`3<IntPtr, IntPtr, TValue> {
    internal DictionaryImplNint`1(int capacity, ConcurrentDictionary`2<IntPtr, TValue> topDict);
    internal DictionaryImplNint`1(int capacity, DictionaryImplNint`1<TValue> other);
    protected virtual bool TryClaimSlotForPut(IntPtr& entryKey, IntPtr key);
    protected virtual bool TryClaimSlotForCopy(IntPtr& entryKey, IntPtr key);
    private bool TryClaimSlot(IntPtr& entryKey, IntPtr key);
    protected virtual int hash(IntPtr key);
    protected virtual bool keyEqual(IntPtr key, IntPtr entryKey);
    protected virtual DictionaryImpl`3<IntPtr, IntPtr, TValue> CreateNew(int capacity);
    protected virtual IntPtr keyFromEntry(IntPtr entryKey);
}
[NativeIntegerAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[NullableContextAttribute("1")]
[NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
internal class NonBlocking.DictionaryImplNintNoComparer`1 : DictionaryImpl`3<IntPtr, IntPtr, TValue> {
    internal DictionaryImplNintNoComparer`1(int capacity, ConcurrentDictionary`2<IntPtr, TValue> topDict);
    internal DictionaryImplNintNoComparer`1(int capacity, DictionaryImplNintNoComparer`1<TValue> other);
    protected virtual bool TryClaimSlotForPut(IntPtr& entryKey, IntPtr key);
    protected virtual bool TryClaimSlotForCopy(IntPtr& entryKey, IntPtr key);
    private bool TryClaimSlot(IntPtr& entryKey, IntPtr key);
    internal virtual object TryGetValue(IntPtr key);
    protected virtual int hash(IntPtr key);
    protected virtual bool keyEqual(IntPtr key, IntPtr entryKey);
    protected virtual DictionaryImpl`3<IntPtr, IntPtr, TValue> CreateNew(int capacity);
    protected virtual IntPtr keyFromEntry(IntPtr entryKey);
}
internal class NonBlocking.DictionaryImplRef`3 : DictionaryImpl`3<TKey, TKey, TValue> {
    internal DictionaryImplRef`3(int capacity, ConcurrentDictionary`2<TKey, TValue> topDict);
    internal DictionaryImplRef`3(int capacity, DictionaryImplRef`3<TKey, TKeyStore, TValue> other);
    protected virtual bool TryClaimSlotForPut(TKey& entryKey, TKey key);
    protected virtual bool TryClaimSlotForCopy(TKey& entryKey, TKey key);
    private bool TryClaimSlot(TKey& entryKey, TKey key);
    internal virtual object TryGetValue(TKey key);
    protected virtual int hash(TKey key);
    protected virtual bool keyEqual(TKey key, TKey entryKey);
    protected virtual DictionaryImpl`3<TKey, TKey, TValue> CreateNew(int capacity);
    protected virtual TKey keyFromEntry(TKey entryKey);
}
internal class NonBlocking.IDictionaryDebugView`2 : object {
    private IDictionary`2<TKey, TValue> _dictionary;
    [DebuggerBrowsableAttribute("3")]
public KeyValuePair`2[] Items { get; }
    public IDictionaryDebugView`2(IDictionary`2<TKey, TValue> dictionary);
    public KeyValuePair`2[] get_Items();
}
internal static class NonBlocking.ThrowHelper : object {
    internal static void ThrowKeyNullException();
    internal static void ThrowArgumentNullException(string name);
    internal static void ThrowArgumentNullException(string name, string message);
    internal static void ThrowValueNullException();
    internal static void ThrowOutOfMemoryException();
}
internal static class NonBlocking.Util : object {
    internal static int AlignToPowerOfTwo(int size);
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
[AttributeUsageAttribute("27524")]
internal class System.Runtime.CompilerServices.NativeIntegerAttribute : Attribute {
    public Boolean[] TransformFlags;
    public NativeIntegerAttribute(Boolean[] );
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
[AttributeUsageAttribute("27524")]
internal class System.Runtime.CompilerServices.NullableAttribute : Attribute {
    public Byte[] NullableFlags;
    public NullableAttribute(byte );
    public NullableAttribute(Byte[] );
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
[AttributeUsageAttribute("5196")]
internal class System.Runtime.CompilerServices.NullableContextAttribute : Attribute {
    public byte Flag;
    public NullableContextAttribute(byte );
}
