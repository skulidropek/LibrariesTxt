[AttributeUsageAttribute("4")]
internal class JetBrains.Annotations.AspChildControlTypeAttribute : Attribute {
    [CompilerGeneratedAttribute]
private string <TagName>k__BackingField;
    [CompilerGeneratedAttribute]
private Type <ControlType>k__BackingField;
    [NotNullAttribute]
public string TagName { get; }
    [NotNullAttribute]
public Type ControlType { get; }
    public AspChildControlTypeAttribute(string tagName, Type controlType);
    [CompilerGeneratedAttribute]
public string get_TagName();
    [CompilerGeneratedAttribute]
public Type get_ControlType();
}
[AttributeUsageAttribute("192")]
internal class JetBrains.Annotations.AspDataFieldAttribute : Attribute {
}
[AttributeUsageAttribute("192")]
internal class JetBrains.Annotations.AspDataFieldsAttribute : Attribute {
}
[AttributeUsageAttribute("128")]
internal class JetBrains.Annotations.AspMethodPropertyAttribute : Attribute {
}
[AttributeUsageAttribute("2496")]
internal class JetBrains.Annotations.AspMvcActionAttribute : Attribute {
    [CompilerGeneratedAttribute]
private string <AnonymousProperty>k__BackingField;
    [CanBeNullAttribute]
public string AnonymousProperty { get; }
    public AspMvcActionAttribute(string anonymousProperty);
    [CompilerGeneratedAttribute]
public string get_AnonymousProperty();
}
[AttributeUsageAttribute("2176")]
internal class JetBrains.Annotations.AspMvcActionSelectorAttribute : Attribute {
}
[AttributeUsageAttribute("2432")]
internal class JetBrains.Annotations.AspMvcAreaAttribute : Attribute {
    [CompilerGeneratedAttribute]
private string <AnonymousProperty>k__BackingField;
    [CanBeNullAttribute]
public string AnonymousProperty { get; }
    public AspMvcAreaAttribute(string anonymousProperty);
    [CompilerGeneratedAttribute]
public string get_AnonymousProperty();
}
[AttributeUsageAttribute("385")]
internal class JetBrains.Annotations.AspMvcAreaMasterLocationFormatAttribute : Attribute {
    [CompilerGeneratedAttribute]
private string <Format>k__BackingField;
    [NotNullAttribute]
public string Format { get; }
    public AspMvcAreaMasterLocationFormatAttribute(string format);
    [CompilerGeneratedAttribute]
public string get_Format();
}
[AttributeUsageAttribute("385")]
internal class JetBrains.Annotations.AspMvcAreaPartialViewLocationFormatAttribute : Attribute {
    [CompilerGeneratedAttribute]
private string <Format>k__BackingField;
    [NotNullAttribute]
public string Format { get; }
    public AspMvcAreaPartialViewLocationFormatAttribute(string format);
    [CompilerGeneratedAttribute]
public string get_Format();
}
[AttributeUsageAttribute("385")]
internal class JetBrains.Annotations.AspMvcAreaViewLocationFormatAttribute : Attribute {
    [CompilerGeneratedAttribute]
private string <Format>k__BackingField;
    [NotNullAttribute]
public string Format { get; }
    public AspMvcAreaViewLocationFormatAttribute(string format);
    [CompilerGeneratedAttribute]
public string get_Format();
}
[AttributeUsageAttribute("2496")]
internal class JetBrains.Annotations.AspMvcControllerAttribute : Attribute {
    [CompilerGeneratedAttribute]
private string <AnonymousProperty>k__BackingField;
    [CanBeNullAttribute]
public string AnonymousProperty { get; }
    public AspMvcControllerAttribute(string anonymousProperty);
    [CompilerGeneratedAttribute]
public string get_AnonymousProperty();
}
[AttributeUsageAttribute("2432")]
internal class JetBrains.Annotations.AspMvcDisplayTemplateAttribute : Attribute {
}
[AttributeUsageAttribute("2432")]
internal class JetBrains.Annotations.AspMvcEditorTemplateAttribute : Attribute {
}
[AttributeUsageAttribute("2432")]
internal class JetBrains.Annotations.AspMvcMasterAttribute : Attribute {
}
[AttributeUsageAttribute("385")]
internal class JetBrains.Annotations.AspMvcMasterLocationFormatAttribute : Attribute {
    [CompilerGeneratedAttribute]
private string <Format>k__BackingField;
    [NotNullAttribute]
public string Format { get; }
    public AspMvcMasterLocationFormatAttribute(string format);
    [CompilerGeneratedAttribute]
public string get_Format();
}
[AttributeUsageAttribute("2048")]
internal class JetBrains.Annotations.AspMvcModelTypeAttribute : Attribute {
}
[AttributeUsageAttribute("2496")]
internal class JetBrains.Annotations.AspMvcPartialViewAttribute : Attribute {
}
[AttributeUsageAttribute("385")]
internal class JetBrains.Annotations.AspMvcPartialViewLocationFormatAttribute : Attribute {
    [CompilerGeneratedAttribute]
private string <Format>k__BackingField;
    [NotNullAttribute]
public string Format { get; }
    public AspMvcPartialViewLocationFormatAttribute(string format);
    [CompilerGeneratedAttribute]
public string get_Format();
}
[AttributeUsageAttribute("68")]
internal class JetBrains.Annotations.AspMvcSuppressViewErrorAttribute : Attribute {
}
[AttributeUsageAttribute("2432")]
internal class JetBrains.Annotations.AspMvcTemplateAttribute : Attribute {
}
[AttributeUsageAttribute("2496")]
internal class JetBrains.Annotations.AspMvcViewAttribute : Attribute {
}
[AttributeUsageAttribute("2432")]
internal class JetBrains.Annotations.AspMvcViewComponentAttribute : Attribute {
}
[AttributeUsageAttribute("2496")]
internal class JetBrains.Annotations.AspMvcViewComponentViewAttribute : Attribute {
}
[AttributeUsageAttribute("385")]
internal class JetBrains.Annotations.AspMvcViewLocationFormatAttribute : Attribute {
    [CompilerGeneratedAttribute]
private string <Format>k__BackingField;
    [NotNullAttribute]
public string Format { get; }
    public AspMvcViewLocationFormatAttribute(string format);
    [CompilerGeneratedAttribute]
public string get_Format();
}
[AttributeUsageAttribute("4")]
internal class JetBrains.Annotations.AspRequiredAttributeAttribute : Attribute {
    [CompilerGeneratedAttribute]
private string <Attribute>k__BackingField;
    [NotNullAttribute]
public string Attribute { get; }
    public AspRequiredAttributeAttribute(string attribute);
    [CompilerGeneratedAttribute]
public string get_Attribute();
}
[AttributeUsageAttribute("128")]
internal class JetBrains.Annotations.AspTypePropertyAttribute : Attribute {
    [CompilerGeneratedAttribute]
private bool <CreateConstructorReferences>k__BackingField;
    public bool CreateConstructorReferences { get; }
    public AspTypePropertyAttribute(bool createConstructorReferences);
    [CompilerGeneratedAttribute]
public bool get_CreateConstructorReferences();
}
[AttributeUsageAttribute("2048")]
internal class JetBrains.Annotations.AssertionConditionAttribute : Attribute {
    [CompilerGeneratedAttribute]
private AssertionConditionType <ConditionType>k__BackingField;
    public AssertionConditionType ConditionType { get; }
    public AssertionConditionAttribute(AssertionConditionType conditionType);
    [CompilerGeneratedAttribute]
public AssertionConditionType get_ConditionType();
}
internal enum JetBrains.Annotations.AssertionConditionType : Enum {
    public int value__;
    public static AssertionConditionType IS_TRUE;
    public static AssertionConditionType IS_FALSE;
    public static AssertionConditionType IS_NULL;
    public static AssertionConditionType IS_NOT_NULL;
}
[AttributeUsageAttribute("64")]
internal class JetBrains.Annotations.AssertionMethodAttribute : Attribute {
}
[AttributeUsageAttribute("4")]
[BaseTypeRequiredAttribute("System.Attribute")]
internal class JetBrains.Annotations.BaseTypeRequiredAttribute : Attribute {
    [CompilerGeneratedAttribute]
private Type <BaseType>k__BackingField;
    [NotNullAttribute]
public Type BaseType { get; }
    public BaseTypeRequiredAttribute(Type baseType);
    [CompilerGeneratedAttribute]
public Type get_BaseType();
}
[AttributeUsageAttribute("24516")]
internal class JetBrains.Annotations.CanBeNullAttribute : Attribute {
}
[AttributeUsageAttribute("1036")]
internal class JetBrains.Annotations.CannotApplyEqualityOperatorAttribute : Attribute {
}
[AttributeUsageAttribute("224")]
internal class JetBrains.Annotations.CollectionAccessAttribute : Attribute {
    [CompilerGeneratedAttribute]
private CollectionAccessType <CollectionAccessType>k__BackingField;
    public CollectionAccessType CollectionAccessType { get; }
    public CollectionAccessAttribute(CollectionAccessType collectionAccessType);
    [CompilerGeneratedAttribute]
public CollectionAccessType get_CollectionAccessType();
}
[FlagsAttribute]
internal enum JetBrains.Annotations.CollectionAccessType : Enum {
    public int value__;
    public static CollectionAccessType None;
    public static CollectionAccessType Read;
    public static CollectionAccessType ModifyExistingContent;
    public static CollectionAccessType UpdatedContent;
}
[AttributeUsageAttribute("64")]
internal class JetBrains.Annotations.ContractAnnotationAttribute : Attribute {
    [CompilerGeneratedAttribute]
private string <Contract>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <ForceFullStates>k__BackingField;
    [NotNullAttribute]
public string Contract { get; }
    public bool ForceFullStates { get; }
    public ContractAnnotationAttribute(string contract);
    public ContractAnnotationAttribute(string contract, bool forceFullStates);
    [CompilerGeneratedAttribute]
public string get_Contract();
    [CompilerGeneratedAttribute]
public bool get_ForceFullStates();
}
[AttributeUsageAttribute("2432")]
internal class JetBrains.Annotations.HtmlAttributeValueAttribute : Attribute {
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    [NotNullAttribute]
public string Name { get; }
    public HtmlAttributeValueAttribute(string name);
    [CompilerGeneratedAttribute]
public string get_Name();
}
[AttributeUsageAttribute("2432")]
internal class JetBrains.Annotations.HtmlElementAttributesAttribute : Attribute {
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    [CanBeNullAttribute]
public string Name { get; }
    public HtmlElementAttributesAttribute(string name);
    [CompilerGeneratedAttribute]
public string get_Name();
}
[FlagsAttribute]
internal enum JetBrains.Annotations.ImplicitUseKindFlags : Enum {
    public int value__;
    public static ImplicitUseKindFlags Default;
    public static ImplicitUseKindFlags Access;
    public static ImplicitUseKindFlags Assign;
    public static ImplicitUseKindFlags InstantiatedWithFixedConstructorSignature;
    public static ImplicitUseKindFlags InstantiatedNoFixedConstructorSignature;
}
[FlagsAttribute]
internal enum JetBrains.Annotations.ImplicitUseTargetFlags : Enum {
    public int value__;
    public static ImplicitUseTargetFlags Default;
    public static ImplicitUseTargetFlags Itself;
    public static ImplicitUseTargetFlags Members;
    public static ImplicitUseTargetFlags WithInheritors;
    public static ImplicitUseTargetFlags WithMembers;
}
[AttributeUsageAttribute("2048")]
internal class JetBrains.Annotations.InstantHandleAttribute : Attribute {
}
[AttributeUsageAttribute("2048")]
internal class JetBrains.Annotations.InvokerParameterNameAttribute : Attribute {
}
[AttributeUsageAttribute("6592")]
internal class JetBrains.Annotations.ItemCanBeNullAttribute : Attribute {
}
[AttributeUsageAttribute("6592")]
internal class JetBrains.Annotations.ItemNotNullAttribute : Attribute {
}
[AttributeUsageAttribute("64")]
internal class JetBrains.Annotations.LinqTunnelAttribute : Attribute {
}
[AttributeUsageAttribute("32767")]
internal class JetBrains.Annotations.LocalizationRequiredAttribute : Attribute {
    [CompilerGeneratedAttribute]
private bool <Required>k__BackingField;
    public bool Required { get; }
    public LocalizationRequiredAttribute(bool required);
    [CompilerGeneratedAttribute]
public bool get_Required();
}
[AttributeUsageAttribute("2112")]
internal class JetBrains.Annotations.MacroAttribute : Attribute {
    [CompilerGeneratedAttribute]
private string <Expression>k__BackingField;
    [CompilerGeneratedAttribute]
private int <Editable>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Target>k__BackingField;
    [CanBeNullAttribute]
public string Expression { get; public set; }
    public int Editable { get; public set; }
    [CanBeNullAttribute]
public string Target { get; public set; }
    [CompilerGeneratedAttribute]
public string get_Expression();
    [CompilerGeneratedAttribute]
public void set_Expression(string value);
    [CompilerGeneratedAttribute]
public int get_Editable();
    [CompilerGeneratedAttribute]
public void set_Editable(int value);
    [CompilerGeneratedAttribute]
public string get_Target();
    [CompilerGeneratedAttribute]
public void set_Target(string value);
}
[AttributeUsageAttribute("18436")]
internal class JetBrains.Annotations.MeansImplicitUseAttribute : Attribute {
    [CompilerGeneratedAttribute]
private ImplicitUseKindFlags <UseKindFlags>k__BackingField;
    [CompilerGeneratedAttribute]
private ImplicitUseTargetFlags <TargetFlags>k__BackingField;
    [UsedImplicitlyAttribute]
public ImplicitUseKindFlags UseKindFlags { get; }
    [UsedImplicitlyAttribute]
public ImplicitUseTargetFlags TargetFlags { get; }
    public MeansImplicitUseAttribute(ImplicitUseKindFlags useKindFlags);
    public MeansImplicitUseAttribute(ImplicitUseTargetFlags targetFlags);
    public MeansImplicitUseAttribute(ImplicitUseKindFlags useKindFlags, ImplicitUseTargetFlags targetFlags);
    [CompilerGeneratedAttribute]
public ImplicitUseKindFlags get_UseKindFlags();
    [CompilerGeneratedAttribute]
public ImplicitUseTargetFlags get_TargetFlags();
}
[AttributeUsageAttribute("64")]
internal class JetBrains.Annotations.MustUseReturnValueAttribute : Attribute {
    [CompilerGeneratedAttribute]
private string <Justification>k__BackingField;
    [CanBeNullAttribute]
public string Justification { get; }
    public MustUseReturnValueAttribute(string justification);
    [CompilerGeneratedAttribute]
public string get_Justification();
}
[AttributeUsageAttribute("2048")]
internal class JetBrains.Annotations.NoEnumerationAttribute : Attribute {
}
[AttributeUsageAttribute("6592")]
internal class JetBrains.Annotations.NonNegativeValueAttribute : Attribute {
}
[AttributeUsageAttribute("1052")]
internal class JetBrains.Annotations.NoReorderAttribute : Attribute {
}
[AttributeUsageAttribute("64")]
internal class JetBrains.Annotations.NotifyPropertyChangedInvocatorAttribute : Attribute {
    [CompilerGeneratedAttribute]
private string <ParameterName>k__BackingField;
    [CanBeNullAttribute]
public string ParameterName { get; }
    public NotifyPropertyChangedInvocatorAttribute(string parameterName);
    [CompilerGeneratedAttribute]
public string get_ParameterName();
}
[AttributeUsageAttribute("24516")]
internal class JetBrains.Annotations.NotNullAttribute : Attribute {
}
[AttributeUsageAttribute("2048")]
internal class JetBrains.Annotations.PathReferenceAttribute : Attribute {
    [CompilerGeneratedAttribute]
private string <BasePath>k__BackingField;
    [CanBeNullAttribute]
public string BasePath { get; }
    public PathReferenceAttribute(string basePath);
    [CompilerGeneratedAttribute]
public string get_BasePath();
}
[AttributeUsageAttribute("19916")]
internal class JetBrains.Annotations.ProvidesContextAttribute : Attribute {
}
[MeansImplicitUseAttribute("3")]
[AttributeUsageAttribute("32767")]
internal class JetBrains.Annotations.PublicAPIAttribute : Attribute {
    [CompilerGeneratedAttribute]
private string <Comment>k__BackingField;
    [CanBeNullAttribute]
public string Comment { get; }
    public PublicAPIAttribute(string comment);
    [CompilerGeneratedAttribute]
public string get_Comment();
}
[AttributeUsageAttribute("64")]
internal class JetBrains.Annotations.PureAttribute : Attribute {
}
[AttributeUsageAttribute("1")]
internal class JetBrains.Annotations.RazorDirectiveAttribute : Attribute {
    [CompilerGeneratedAttribute]
private string <Directive>k__BackingField;
    [NotNullAttribute]
public string Directive { get; }
    public RazorDirectiveAttribute(string directive);
    [CompilerGeneratedAttribute]
public string get_Directive();
}
[AttributeUsageAttribute("64")]
internal class JetBrains.Annotations.RazorHelperCommonAttribute : Attribute {
}
[AttributeUsageAttribute("1")]
internal class JetBrains.Annotations.RazorImportNamespaceAttribute : Attribute {
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    [NotNullAttribute]
public string Name { get; }
    public RazorImportNamespaceAttribute(string name);
    [CompilerGeneratedAttribute]
public string get_Name();
}
[AttributeUsageAttribute("1")]
internal class JetBrains.Annotations.RazorInjectionAttribute : Attribute {
    [CompilerGeneratedAttribute]
private string <Type>k__BackingField;
    [CompilerGeneratedAttribute]
private string <FieldName>k__BackingField;
    [NotNullAttribute]
public string Type { get; }
    [NotNullAttribute]
public string FieldName { get; }
    public RazorInjectionAttribute(string type, string fieldName);
    [CompilerGeneratedAttribute]
public string get_Type();
    [CompilerGeneratedAttribute]
public string get_FieldName();
}
[AttributeUsageAttribute("128")]
internal class JetBrains.Annotations.RazorLayoutAttribute : Attribute {
}
[AttributeUsageAttribute("1")]
internal class JetBrains.Annotations.RazorPageBaseTypeAttribute : Attribute {
    [CompilerGeneratedAttribute]
private string <BaseType>k__BackingField;
    [CompilerGeneratedAttribute]
private string <PageName>k__BackingField;
    [NotNullAttribute]
public string BaseType { get; }
    [CanBeNullAttribute]
public string PageName { get; }
    public RazorPageBaseTypeAttribute(string baseType);
    public RazorPageBaseTypeAttribute(string baseType, string pageName);
    [CompilerGeneratedAttribute]
public string get_BaseType();
    [CompilerGeneratedAttribute]
public string get_PageName();
}
[AttributeUsageAttribute("2112")]
internal class JetBrains.Annotations.RazorSectionAttribute : Attribute {
}
[AttributeUsageAttribute("64")]
internal class JetBrains.Annotations.RazorWriteLiteralMethodAttribute : Attribute {
}
[AttributeUsageAttribute("64")]
internal class JetBrains.Annotations.RazorWriteMethodAttribute : Attribute {
}
[AttributeUsageAttribute("2048")]
internal class JetBrains.Annotations.RazorWriteMethodParameterAttribute : Attribute {
}
[AttributeUsageAttribute("2432")]
internal class JetBrains.Annotations.RegexPatternAttribute : Attribute {
}
[AttributeUsageAttribute("64")]
internal class JetBrains.Annotations.SourceTemplateAttribute : Attribute {
}
[AttributeUsageAttribute("4320")]
internal class JetBrains.Annotations.StringFormatMethodAttribute : Attribute {
    [CompilerGeneratedAttribute]
private string <FormatParameterName>k__BackingField;
    [NotNullAttribute]
public string FormatParameterName { get; }
    public StringFormatMethodAttribute(string formatParameterName);
    [CompilerGeneratedAttribute]
public string get_FormatParameterName();
}
[ObsoleteAttribute("Use [ContractAnnotation('=> halt')] instead")]
[AttributeUsageAttribute("64")]
internal class JetBrains.Annotations.TerminatesProgramAttribute : Attribute {
}
[AttributeUsageAttribute("32767")]
internal class JetBrains.Annotations.UsedImplicitlyAttribute : Attribute {
    [CompilerGeneratedAttribute]
private ImplicitUseKindFlags <UseKindFlags>k__BackingField;
    [CompilerGeneratedAttribute]
private ImplicitUseTargetFlags <TargetFlags>k__BackingField;
    public ImplicitUseKindFlags UseKindFlags { get; }
    public ImplicitUseTargetFlags TargetFlags { get; }
    public UsedImplicitlyAttribute(ImplicitUseKindFlags useKindFlags);
    public UsedImplicitlyAttribute(ImplicitUseTargetFlags targetFlags);
    public UsedImplicitlyAttribute(ImplicitUseKindFlags useKindFlags, ImplicitUseTargetFlags targetFlags);
    [CompilerGeneratedAttribute]
public ImplicitUseKindFlags get_UseKindFlags();
    [CompilerGeneratedAttribute]
public ImplicitUseTargetFlags get_TargetFlags();
}
[AttributeUsageAttribute("2432")]
internal class JetBrains.Annotations.ValueProviderAttribute : Attribute {
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    [NotNullAttribute]
public string Name { get; }
    public ValueProviderAttribute(string name);
    [CompilerGeneratedAttribute]
public string get_Name();
}
[AttributeUsageAttribute("6592")]
internal class JetBrains.Annotations.ValueRangeAttribute : Attribute {
    [CompilerGeneratedAttribute]
private object <From>k__BackingField;
    [CompilerGeneratedAttribute]
private object <To>k__BackingField;
    public object From { get; }
    public object To { get; }
    public ValueRangeAttribute(long from, long to);
    public ValueRangeAttribute(ulong from, ulong to);
    public ValueRangeAttribute(long value);
    public ValueRangeAttribute(ulong value);
    [CompilerGeneratedAttribute]
public object get_From();
    [CompilerGeneratedAttribute]
public object get_To();
}
[AttributeUsageAttribute("128")]
internal class JetBrains.Annotations.XamlItemBindingOfItemsControlAttribute : Attribute {
}
[AttributeUsageAttribute("4")]
internal class JetBrains.Annotations.XamlItemsControlAttribute : Attribute {
}
[AttributeUsageAttribute("128")]
internal class JetBrains.Annotations.XamlItemStyleOfItemsControlAttribute : Attribute {
}
public class Novell.Directory.Ldap.Asn1.Asn1Boolean : Asn1Object {
    public static int Tag;
    private static Asn1Identifier Id;
    private bool _content;
    public Asn1Boolean(bool content);
    public Asn1Boolean(IAsn1Decoder dec, Stream inRenamed, int len);
    private static Asn1Boolean();
    public virtual void Encode(IAsn1Encoder enc, Stream outRenamed);
    public bool BooleanValue();
    public virtual string ToString();
}
public class Novell.Directory.Ldap.Asn1.Asn1Choice : Asn1Object {
    [CompilerGeneratedAttribute]
private Asn1Object <ChoiceValue>k__BackingField;
    protected Asn1Object ChoiceValue { get; protected set; }
    public Asn1Choice(Asn1Object content);
    [CompilerGeneratedAttribute]
protected Asn1Object get_ChoiceValue();
    [CompilerGeneratedAttribute]
protected void set_ChoiceValue(Asn1Object value);
    public virtual void Encode(IAsn1Encoder enc, Stream outRenamed);
    public virtual Asn1Identifier GetIdentifier();
    public virtual void SetIdentifier(Asn1Identifier id);
    public virtual string ToString();
}
public class Novell.Directory.Ldap.Asn1.Asn1Enumerated : Asn1Numeric {
    public static int Tag;
    private static Asn1Identifier Id;
    public Asn1Enumerated(int content);
    public Asn1Enumerated(long content);
    public Asn1Enumerated(IAsn1Decoder dec, Stream inRenamed, int len);
    private static Asn1Enumerated();
    public virtual void Encode(IAsn1Encoder enc, Stream outRenamed);
    public virtual string ToString();
}
public class Novell.Directory.Ldap.Asn1.Asn1Identifier : object {
    public static int Universal;
    public static int Application;
    public static int Context;
    private static int Private;
    [CompilerGeneratedAttribute]
private int <Asn1Class>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <Constructed>k__BackingField;
    [CompilerGeneratedAttribute]
private int <Tag>k__BackingField;
    [CompilerGeneratedAttribute]
private int <EncodedLength>k__BackingField;
    public int Asn1Class { get; private set; }
    public bool Constructed { get; private set; }
    public int Tag { get; private set; }
    public int EncodedLength { get; private set; }
    public bool IsUniversal { get; }
    public bool IsApplication { get; }
    public bool IsContext { get; }
    public bool IsPrivate { get; }
    public Asn1Identifier(int tagClass, bool constructed, int tag);
    public Asn1Identifier(Stream inRenamed);
    [CompilerGeneratedAttribute]
public int get_Asn1Class();
    [CompilerGeneratedAttribute]
private void set_Asn1Class(int value);
    [CompilerGeneratedAttribute]
public bool get_Constructed();
    [CompilerGeneratedAttribute]
private void set_Constructed(bool value);
    [CompilerGeneratedAttribute]
public int get_Tag();
    [CompilerGeneratedAttribute]
private void set_Tag(int value);
    [CompilerGeneratedAttribute]
public int get_EncodedLength();
    [CompilerGeneratedAttribute]
private void set_EncodedLength(int value);
    public bool get_IsUniversal();
    public bool get_IsApplication();
    public bool get_IsContext();
    public bool get_IsPrivate();
    public void Reset(Stream inRenamed);
    private int DecodeTagNumber(Stream inRenamed);
    public object Clone();
}
public class Novell.Directory.Ldap.Asn1.Asn1Integer : Asn1Numeric {
    public static int Tag;
    private static Asn1Identifier Id;
    public Asn1Integer(int content);
    public Asn1Integer(long content);
    public Asn1Integer(IAsn1Decoder dec, Stream inRenamed, int len);
    private static Asn1Integer();
    public virtual void Encode(IAsn1Encoder enc, Stream outRenamed);
    public virtual string ToString();
}
public class Novell.Directory.Ldap.Asn1.Asn1Length : object {
    [CompilerGeneratedAttribute]
private int <Length>k__BackingField;
    [CompilerGeneratedAttribute]
private int <EncodedLength>k__BackingField;
    public int Length { get; private set; }
    public int EncodedLength { get; private set; }
    public Asn1Length(int length);
    public Asn1Length(Stream inRenamed);
    [CompilerGeneratedAttribute]
public int get_Length();
    [CompilerGeneratedAttribute]
private void set_Length(int value);
    [CompilerGeneratedAttribute]
public int get_EncodedLength();
    [CompilerGeneratedAttribute]
private void set_EncodedLength(int value);
    public void Reset(Stream inRenamed);
}
public class Novell.Directory.Ldap.Asn1.Asn1Null : Asn1Object {
    public static int Tag;
    private static Asn1Identifier Id;
    private static Asn1Null();
    public virtual void Encode(IAsn1Encoder enc, Stream outRenamed);
    public virtual string ToString();
}
public abstract class Novell.Directory.Ldap.Asn1.Asn1Numeric : Asn1Object {
    private long _content;
    internal Asn1Numeric(Asn1Identifier id, int valueRenamed);
    internal Asn1Numeric(Asn1Identifier id, long valueRenamed);
    public int IntValue();
    public long LongValue();
}
public abstract class Novell.Directory.Ldap.Asn1.Asn1Object : object {
    private Asn1Identifier _id;
    protected Asn1Object(Asn1Identifier id);
    public abstract virtual void Encode(IAsn1Encoder enc, Stream outRenamed);
    public virtual Asn1Identifier GetIdentifier();
    public virtual void SetIdentifier(Asn1Identifier id);
    public Byte[] GetEncoding(IAsn1Encoder enc);
    public virtual string ToString();
}
public class Novell.Directory.Ldap.Asn1.Asn1OctetString : Asn1Object {
    public static int Tag;
    private static Asn1Identifier Id;
    private Byte[] _content;
    public Asn1OctetString(Byte[] content);
    public Asn1OctetString(string content);
    public Asn1OctetString(IAsn1Decoder dec, Stream inRenamed, int len);
    private static Asn1OctetString();
    public virtual void Encode(IAsn1Encoder enc, Stream outRenamed);
    public Byte[] ByteValue();
    public string StringValue();
    public virtual string ToString();
}
public class Novell.Directory.Ldap.Asn1.Asn1Sequence : Asn1Structured {
    public static int Tag;
    private static Asn1Identifier Id;
    public Asn1Sequence(int size);
    public Asn1Sequence(Asn1Object[] newContent, int size);
    public Asn1Sequence(IAsn1Decoder dec, Stream inRenamed, int len);
    private static Asn1Sequence();
    public virtual string ToString();
}
public class Novell.Directory.Ldap.Asn1.Asn1SequenceOf : Asn1Structured {
    public static int Tag;
    public static Asn1Identifier Id;
    public Asn1SequenceOf(int size);
    public Asn1SequenceOf(Asn1Sequence sequence);
    public Asn1SequenceOf(IAsn1Decoder dec, Stream inRenamed, int len);
    private static Asn1SequenceOf();
    public virtual string ToString();
}
public class Novell.Directory.Ldap.Asn1.Asn1Set : Asn1Structured {
    public static int Tag;
    public static Asn1Identifier Id;
    public Asn1Set(int size);
    public Asn1Set(IAsn1Decoder dec, Stream inRenamed, int len);
    private static Asn1Set();
    public virtual string ToString();
}
public class Novell.Directory.Ldap.Asn1.Asn1SetOf : Asn1Structured {
    public static int Tag;
    public static Asn1Identifier Id;
    public Asn1SetOf(int size);
    public Asn1SetOf(Asn1Set setRenamed);
    private static Asn1SetOf();
    public virtual string ToString();
}
public abstract class Novell.Directory.Ldap.Asn1.Asn1Structured : Asn1Object {
    private Asn1Object[] _content;
    private int _contentIndex;
    public IEnumerable`1<Asn1Object> RenamedEnumerable { get; }
    protected internal Asn1Structured(Asn1Identifier id);
    protected internal Asn1Structured(Asn1Identifier id, int size);
    protected internal Asn1Structured(Asn1Identifier id, Asn1Object[] newContent, int size);
    public virtual void Encode(IAsn1Encoder enc, Stream outRenamed);
    protected internal void DecodeStructured(IAsn1Decoder dec, Stream inRenamed, int len);
    public Asn1Object[] ToArray();
    public void Add(Asn1Object valueRenamed);
    public void set_Renamed(int index, Asn1Object valueRenamed);
    public Asn1Object get_Renamed(int index);
    public int Size();
    public IEnumerable`1<Asn1Object> get_RenamedEnumerable();
    public string ToString(string type);
}
public class Novell.Directory.Ldap.Asn1.Asn1Tagged : Asn1Object {
    private Asn1Object _content;
    [CompilerGeneratedAttribute]
private bool <Explicit>k__BackingField;
    public Asn1Object TaggedValue { get; public set; }
    public bool Explicit { get; }
    public Asn1Tagged(Asn1Identifier identifier, Asn1Object objectRenamed);
    public Asn1Tagged(Asn1Identifier identifier, Asn1Object objectRenamed, bool explicitRenamed);
    public Asn1Tagged(IAsn1Decoder dec, Stream inRenamed, int len, Asn1Identifier identifier);
    public Asn1Object get_TaggedValue();
    public void set_TaggedValue(Asn1Object value);
    [CompilerGeneratedAttribute]
public bool get_Explicit();
    public virtual void Encode(IAsn1Encoder enc, Stream outRenamed);
    public virtual string ToString();
}
public interface Novell.Directory.Ldap.Asn1.IAsn1Decoder {
    public abstract virtual Asn1Object Decode(Byte[] valueRenamed);
    public abstract virtual Asn1Object Decode(Stream inRenamed);
    public abstract virtual Asn1Object Decode(Stream inRenamed, Int32[] length);
    public abstract virtual object DecodeBoolean(Stream inRenamed, int len);
    public abstract virtual object DecodeNumeric(Stream inRenamed, int len);
    public abstract virtual object DecodeOctetString(Stream inRenamed, int len);
    public abstract virtual object DecodeCharacterString(Stream inRenamed, int len);
}
public interface Novell.Directory.Ldap.Asn1.IAsn1Encoder {
    public abstract virtual void Encode(Asn1Boolean b, Stream outRenamed);
    public abstract virtual void Encode(Asn1Numeric n, Stream outRenamed);
    public abstract virtual void Encode(Asn1Null n, Stream outRenamed);
    public abstract virtual void Encode(Asn1OctetString os, Stream outRenamed);
    public abstract virtual void Encode(Asn1Structured c, Stream outRenamed);
    public abstract virtual void Encode(Asn1Tagged t, Stream outRenamed);
    public abstract virtual void Encode(Asn1Identifier id, Stream outRenamed);
}
public class Novell.Directory.Ldap.Asn1.LberDecoder : object {
    private Asn1Identifier _asn1Id;
    private Asn1Length _asn1Len;
    public sealed virtual Asn1Object Decode(Byte[] valueRenamed);
    public sealed virtual Asn1Object Decode(Stream inRenamed);
    public sealed virtual Asn1Object Decode(Stream inRenamed, Int32[] len);
    public sealed virtual object DecodeBoolean(Stream inRenamed, int len);
    public sealed virtual object DecodeNumeric(Stream inRenamed, int len);
    public sealed virtual object DecodeOctetString(Stream inRenamed, int len);
    public sealed virtual object DecodeCharacterString(Stream inRenamed, int len);
    private static int ReadInput(Stream sourceStream, Byte[]& target, int start, int count);
}
public class Novell.Directory.Ldap.Asn1.LberEncoder : object {
    public sealed virtual void Encode(Asn1Boolean b, Stream outRenamed);
    public sealed virtual void Encode(Asn1Numeric n, Stream outRenamed);
    public sealed virtual void Encode(Asn1Null n, Stream outRenamed);
    public sealed virtual void Encode(Asn1OctetString os, Stream outRenamed);
    public sealed virtual void Encode(Asn1Structured c, Stream outRenamed);
    public sealed virtual void Encode(Asn1Tagged t, Stream outRenamed);
    public sealed virtual void Encode(Asn1Identifier id, Stream outRenamed);
    private void EncodeLength(int length, Stream outRenamed);
    private void EncodeTagInteger(int valueRenamed, Stream outRenamed);
}
[ExtensionAttribute]
public static class Novell.Directory.Ldap.AsyncExtensions : object {
    [AsyncStateMachineAttribute("Novell.Directory.Ldap.AsyncExtensions/<TimeoutAfterAsync>d__0")]
[ExtensionAttribute]
public static Task TimeoutAfterAsync(Task task, int timeout);
}
internal class Novell.Directory.Ldap.Connection : object {
    private LdapConnectionOptions _ldapConnectionOptions;
    private static int ContinueReading;
    private static int StopReading;
    internal static string Sdk;
    internal static int Protocol;
    internal static string Security;
    private object _lock;
    private bool _clientActive;
    private int _cloneCount;
    private Thread _deadReader;
    private Exception _deadReaderException;
    private LberDecoder _decoder;
    private LberEncoder _encoder;
    private int _ephemeralId;
    private X509ChainStatus[] _handshakeChainStatus;
    private SslPolicyErrors _handshakePolicyErrors;
    private Stream _inStream;
    private MessageVector _messages;
    private TcpClient _nonTlsBackup;
    private Stream _outStream;
    private Thread _reader;
    private ReaderThread _readerThreadEnclosure;
    private Socket _sock;
    private TcpClient _socket;
    private int _stopReaderMessageId;
    private IList`1<ILdapUnsolicitedNotificationListener> _unsolicitedListeners;
    private bool _unsolSvrShutDnNotification;
    private object _writeSemaphore;
    private int _writeSemaphoreCount;
    private int _writeSemaphoreOwner;
    [CompilerGeneratedAttribute]
private DebugId <DebugId>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Host>k__BackingField;
    [CompilerGeneratedAttribute]
private int <Port>k__BackingField;
    [CompilerGeneratedAttribute]
private int <ConnectionTimeout>k__BackingField;
    [CompilerGeneratedAttribute]
private int <BindSemId>k__BackingField;
    [CompilerGeneratedAttribute]
private BindProperties <BindProperties>k__BackingField;
    [CompilerGeneratedAttribute]
private ReferralInfo <ActiveReferral>k__BackingField;
    [CompilerGeneratedAttribute]
private RemoteCertificateValidationCallback <OnRemoteCertificateValidation>k__BackingField;
    [CompilerGeneratedAttribute]
private LocalCertificateSelectionCallback <OnLocalCertificateSelection>k__BackingField;
    public DebugId DebugId { get; }
    internal bool Cloned { get; }
    internal string Host { get; private set; }
    internal int Port { get; private set; }
    internal int ConnectionTimeout { get; internal set; }
    internal int BindSemId { get; private set; }
    internal bool BindSemIdClear { get; }
    internal bool Bound { get; }
    internal bool Connected { get; }
    internal BindProperties BindProperties { get; internal set; }
    internal ReferralInfo ActiveReferral { get; internal set; }
    internal bool Tls { get; }
    internal RemoteCertificateValidationCallback OnRemoteCertificateValidation { get; internal set; }
    internal LocalCertificateSelectionCallback OnLocalCertificateSelection { get; internal set; }
    internal Connection(LdapConnectionOptions ldapConnectionOptions);
    [CompilerGeneratedAttribute]
public virtual DebugId get_DebugId();
    internal bool get_Cloned();
    [CompilerGeneratedAttribute]
internal string get_Host();
    [CompilerGeneratedAttribute]
private void set_Host(string value);
    [CompilerGeneratedAttribute]
internal int get_Port();
    [CompilerGeneratedAttribute]
private void set_Port(int value);
    [CompilerGeneratedAttribute]
internal int get_ConnectionTimeout();
    [CompilerGeneratedAttribute]
internal void set_ConnectionTimeout(int value);
    [CompilerGeneratedAttribute]
internal int get_BindSemId();
    [CompilerGeneratedAttribute]
private void set_BindSemId(int value);
    internal bool get_BindSemIdClear();
    internal bool get_Bound();
    internal bool get_Connected();
    [CompilerGeneratedAttribute]
internal BindProperties get_BindProperties();
    [CompilerGeneratedAttribute]
internal void set_BindProperties(BindProperties value);
    [CompilerGeneratedAttribute]
internal ReferralInfo get_ActiveReferral();
    [CompilerGeneratedAttribute]
internal void set_ActiveReferral(ReferralInfo value);
    internal bool get_Tls();
    [CompilerGeneratedAttribute]
internal RemoteCertificateValidationCallback get_OnRemoteCertificateValidation();
    [CompilerGeneratedAttribute]
internal void set_OnRemoteCertificateValidation(RemoteCertificateValidationCallback value);
    [CompilerGeneratedAttribute]
internal LocalCertificateSelectionCallback get_OnLocalCertificateSelection();
    [CompilerGeneratedAttribute]
internal void set_OnLocalCertificateSelection(LocalCertificateSelectionCallback value);
    private string GetSslHandshakeErrors();
    private object Copy();
    internal int AcquireWriteSemaphore();
    internal int AcquireWriteSemaphore(int msgId);
    internal void FreeWriteSemaphore(int msgId);
    private void WaitForReader(Thread thread);
    internal Task ConnectAsync(string host, int port);
    internal bool RemoteCertificateValidationCallback(object sender, X509Certificate certificate, X509Chain chain, SslPolicyErrors sslPolicyErrors);
    internal X509Certificate LocalCertificateSelectionCallback(object sender, string targetHost, X509CertificateCollection localCertificates, X509Certificate remoteCertificate, String[] acceptableIssuers);
    private bool DefaultCertificateValidationHandler(X509Certificate certificate, X509Chain chain, SslPolicyErrors sslPolicyErrors);
    [AsyncStateMachineAttribute("Novell.Directory.Ldap.Connection/<ConnectAsync>d__86")]
private Task ConnectAsync(string host, int port, int semaphoreId);
    internal void IncrCloneCount();
    internal Connection DestroyClone();
    internal void ClearBindSemId();
    internal void SetBindSemId(int bindSemId);
    [AsyncStateMachineAttribute("Novell.Directory.Ldap.Connection/<WriteMessageAsync>d__91")]
internal Task WriteMessageAsync(Message info);
    internal void WriteMessage(LdapMessage msg);
    internal MessageAgent GetMessageAgent(int msgId);
    internal void RemoveMessage(Message info);
    private void Destroy(string reason, int semaphoreId, InterThreadException notifyUser);
    private void AbandonMessages(InterThreadException notifyUser);
    internal bool AreMessagesComplete();
    internal void StopReaderOnReply(int messageId);
    private void StartReader();
    [AsyncStateMachineAttribute("Novell.Directory.Ldap.Connection/<StartTlsAsync>d__100")]
internal Task StartTlsAsync();
    internal void StopTls();
    internal void AddUnsolicitedNotificationListener(ILdapUnsolicitedNotificationListener listener);
    internal void RemoveUnsolicitedNotificationListener(ILdapUnsolicitedNotificationListener listener);
    private void NotifyAllUnsolicitedListeners(RfcLdapMessage message);
    [CompilerGeneratedAttribute]
private bool <ConnectAsync>b__86_0(IPAddress x);
}
public class Novell.Directory.Ldap.Controls.ExtendedDnControl : LdapControl {
    private static string ExtendedDnControlOID;
    private LberEncoder _encoder;
    private Asn1Sequence _controlValue;
    public ExtendedDnControl(GuidFormatFlag flag, bool critical);
}
public class Novell.Directory.Ldap.Controls.LdapEntryChangeControl : LdapControl {
    [CompilerGeneratedAttribute]
private bool <HasChangeNumber>k__BackingField;
    [CompilerGeneratedAttribute]
private int <ChangeNumber>k__BackingField;
    [CompilerGeneratedAttribute]
private int <ChangeType>k__BackingField;
    [CompilerGeneratedAttribute]
private string <PreviousDn>k__BackingField;
    public bool HasChangeNumber { get; }
    public int ChangeNumber { get; }
    public int ChangeType { get; }
    public string PreviousDn { get; }
    public LdapEntryChangeControl(string oid, bool critical, Byte[] valueRenamed);
    [CompilerGeneratedAttribute]
public bool get_HasChangeNumber();
    [CompilerGeneratedAttribute]
public int get_ChangeNumber();
    [CompilerGeneratedAttribute]
public int get_ChangeType();
    [CompilerGeneratedAttribute]
public string get_PreviousDn();
}
public class Novell.Directory.Ldap.Controls.LdapPersistSearchControl : LdapControl {
    public static int Add;
    public static int Delete;
    public static int Modify;
    public static int Moddn;
    private static int SequenceSize;
    private static int ChangetypesIndex;
    private static int ChangesonlyIndex;
    private static int ReturncontrolsIndex;
    private static LberEncoder SEncoder;
    private static string RequestOid;
    private static string ResponseOid;
    public static int Any;
    private Asn1Sequence _mSequence;
    private bool _mChangesOnly;
    private int _mChangeTypes;
    private bool _mReturnControls;
    public int ChangeTypes { get; public set; }
    public bool ReturnControls { get; public set; }
    public bool ChangesOnly { get; public set; }
    private static LdapPersistSearchControl();
    public LdapPersistSearchControl(int changeTypes, bool changesOnly, bool returnControls, bool isCritical);
    public int get_ChangeTypes();
    public void set_ChangeTypes(int value);
    public bool get_ReturnControls();
    public void set_ReturnControls(bool value);
    public bool get_ChangesOnly();
    public void set_ChangesOnly(bool value);
    public virtual string ToString();
    private void SetValue();
}
public class Novell.Directory.Ldap.Controls.LdapSortControl : LdapControl {
    private static int OrderingRule;
    private static int ReverseOrder;
    private static string RequestOid;
    private static string ResponseOid;
    private static LdapSortControl();
    public LdapSortControl(LdapSortKey key, bool critical);
    public LdapSortControl(LdapSortKey[] keys, bool critical);
}
public class Novell.Directory.Ldap.Controls.LdapSortKey : object {
    [CompilerGeneratedAttribute]
private string <Key>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <Reverse>k__BackingField;
    [CompilerGeneratedAttribute]
private string <MatchRule>k__BackingField;
    public string Key { get; }
    public bool Reverse { get; }
    public string MatchRule { get; }
    public LdapSortKey(string keyDescription);
    public LdapSortKey(string key, bool reverse);
    public LdapSortKey(string key, bool reverse, string matchRule);
    [CompilerGeneratedAttribute]
public string get_Key();
    [CompilerGeneratedAttribute]
public bool get_Reverse();
    [CompilerGeneratedAttribute]
public string get_MatchRule();
}
public class Novell.Directory.Ldap.Controls.LdapSortResponse : LdapControl {
    [CompilerGeneratedAttribute]
private string <FailedAttribute>k__BackingField;
    [CompilerGeneratedAttribute]
private int <ResultCode>k__BackingField;
    public string FailedAttribute { get; }
    public int ResultCode { get; }
    public LdapSortResponse(string oid, bool critical, Byte[] values);
    [CompilerGeneratedAttribute]
public virtual string get_FailedAttribute();
    [CompilerGeneratedAttribute]
public virtual int get_ResultCode();
}
public class Novell.Directory.Ldap.Controls.LdapVirtualListControl : LdapControl {
    private static int Byoffset;
    private static int Greaterthanorequal;
    private static string RequestOid;
    private static string ResponseOid;
    private int _mAfterCount;
    private int _mBeforeCount;
    private int _mContentCount;
    private string _mContext;
    private string _mJumpTo;
    private int _mStartIndex;
    private Asn1Sequence _mVlvRequest;
    public int AfterCount { get; }
    public int BeforeCount { get; }
    public int ListSize { get; public set; }
    public string Context { get; public set; }
    private static LdapVirtualListControl();
    public LdapVirtualListControl(string jumpTo, int beforeCount, int afterCount);
    public LdapVirtualListControl(string jumpTo, int beforeCount, int afterCount, string context);
    public LdapVirtualListControl(int startIndex, int beforeCount, int afterCount, int contentCount);
    public LdapVirtualListControl(int startIndex, int beforeCount, int afterCount, int contentCount, string context);
    public virtual int get_AfterCount();
    public virtual int get_BeforeCount();
    public virtual int get_ListSize();
    public virtual void set_ListSize(int value);
    public virtual string get_Context();
    public virtual void set_Context(string value);
    private void BuildTypedVlvRequest();
    private void BuildIndexedVlvRequest();
    public virtual void SetRange(int listIndex, int beforeCount, int afterCount);
    public virtual void SetRange(string jumpTo, int beforeCount, int afterCount);
}
public class Novell.Directory.Ldap.Controls.LdapVirtualListResponse : LdapControl {
    [CompilerGeneratedAttribute]
private int <ContentCount>k__BackingField;
    [CompilerGeneratedAttribute]
private int <FirstPosition>k__BackingField;
    [CompilerGeneratedAttribute]
private int <ResultCode>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Context>k__BackingField;
    public int ContentCount { get; }
    public int FirstPosition { get; }
    public int ResultCode { get; }
    public string Context { get; }
    public LdapVirtualListResponse(string oid, bool critical, Byte[] values);
    [CompilerGeneratedAttribute]
public virtual int get_ContentCount();
    [CompilerGeneratedAttribute]
public virtual int get_FirstPosition();
    [CompilerGeneratedAttribute]
public virtual int get_ResultCode();
    [CompilerGeneratedAttribute]
public virtual string get_Context();
}
public class Novell.Directory.Ldap.Controls.SimplePagedResultsControl : LdapControl {
    private static string RequestOid;
    private static string DecodedNotInteger;
    private static string DecodedNotOctetString;
    private static string DecodedNotSequence;
    private Asn1Sequence _request;
    [CompilerGeneratedAttribute]
private int <Size>k__BackingField;
    [CompilerGeneratedAttribute]
private Byte[] <Cookie>k__BackingField;
    public int Size { get; }
    public Byte[] Cookie { get; }
    public static Byte[] GetEmptyCookie { get; }
    private static SimplePagedResultsControl();
    public SimplePagedResultsControl(int size, Byte[] cookie);
    [UsedImplicitlyAttribute]
public SimplePagedResultsControl(string oid, bool critical, Byte[] values);
    [CompilerGeneratedAttribute]
public int get_Size();
    [CompilerGeneratedAttribute]
public Byte[] get_Cookie();
    public bool IsEmptyCookie();
    public static Byte[] get_GetEmptyCookie();
    private void BuildTypedPagedRequest();
}
public class Novell.Directory.Ldap.DebugId : ValueType {
    private static int _id;
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    [CompilerGeneratedAttribute]
private int <Id>k__BackingField;
    private string Name { get; }
    private int Id { get; }
    public DebugId(string name);
    private static int GetNextId();
    [IsReadOnlyAttribute]
[CompilerGeneratedAttribute]
private string get_Name();
    [IsReadOnlyAttribute]
[CompilerGeneratedAttribute]
private int get_Id();
    public virtual string ToString();
    public static DebugId ForType();
}
[ExtensionAttribute]
internal static class Novell.Directory.Ldap.ExtensionMethods : object {
    private static Byte[] HexEncodingTable;
    private static ExtensionMethods();
    [ExtensionAttribute]
internal static string ToHexString(IReadOnlyList`1<byte> bytes, int offset, int length);
    [ExtensionAttribute]
internal static bool IsEmpty(string input);
    [ExtensionAttribute]
internal static bool IsNotEmpty(string input);
    [ExtensionAttribute]
internal static bool IsEmpty(IReadOnlyCollection`1<T> coll);
    [ExtensionAttribute]
internal static bool IsNotEmpty(IReadOnlyCollection`1<T> coll);
    [ExtensionAttribute]
internal static Byte[] ToUtf8Bytes(string input);
    [ExtensionAttribute]
internal static string ToUtf8String(Byte[] input);
    [ExtensionAttribute]
internal static bool EqualsOrdinal(string input, string other);
    [ExtensionAttribute]
internal static bool EqualsOrdinalCI(string input, string other);
}
[ExtensionAttribute]
public static class Novell.Directory.Ldap.ExtensionRegistrations : object {
    private static ExtensionRegistrations();
    [AsyncStateMachineAttribute("Novell.Directory.Ldap.ExtensionRegistrations/<WhoAmIAsync>d__1")]
[ExtensionAttribute]
public static Task`1<LdapWhoAmIResponse> WhoAmIAsync(LdapConnection conn, LdapConstraints cons);
}
public interface Novell.Directory.Ldap.IDebugIdentifier {
    public DebugId DebugId { get; }
    public abstract virtual DebugId get_DebugId();
}
public interface Novell.Directory.Ldap.ILdapAuthHandler {
    public abstract virtual LdapAuthProvider GetAuthProvider(string host, int port);
}
public interface Novell.Directory.Ldap.ILdapBindHandler {
    public abstract virtual LdapConnection Bind(String[] ldapurl, LdapConnection conn);
}
public interface Novell.Directory.Ldap.ILdapConnection {
    public bool Bound { get; }
    public bool Connected { get; }
    public LdapSearchConstraints SearchConstraints { get; }
    public abstract virtual Task StartTlsAsync();
    public abstract virtual Task StopTlsAsync();
    public abstract virtual Task AddAsync(LdapEntry entry);
    public abstract virtual Task AddAsync(LdapEntry entry, LdapConstraints cons);
    public abstract virtual Task BindAsync(string dn, string passwd);
    public abstract virtual Task BindAsync(int version, string dn, string passwd);
    public abstract virtual Task BindAsync(string dn, string passwd, LdapConstraints cons);
    public abstract virtual Task BindAsync(int version, string dn, string passwd, LdapConstraints cons);
    public abstract virtual Task BindAsync(int version, string dn, Byte[] passwd);
    public abstract virtual Task BindAsync(int version, string dn, Byte[] passwd, LdapConstraints cons);
    public abstract virtual Task BindAsync(SaslRequest saslRequest);
    public abstract virtual IReadOnlyCollection`1<ISaslClientFactory> GetRegisteredSaslClientFactories();
    public abstract virtual void RegisterSaslClientFactory(ISaslClientFactory saslClientFactory);
    public abstract virtual bool IsSaslMechanismSupported(string mechanism);
    public abstract virtual Task ConnectAsync(string host, int port);
    public abstract virtual Task DeleteAsync(string dn);
    public abstract virtual Task DeleteAsync(string dn, LdapConstraints cons);
    public abstract virtual void Disconnect();
    public abstract virtual Task`1<LdapExtendedResponse> ExtendedOperationAsync(LdapExtendedOperation op);
    public abstract virtual Task`1<LdapExtendedResponse> ExtendedOperationAsync(LdapExtendedOperation op, LdapConstraints cons);
    public abstract virtual Task ModifyAsync(string dn, LdapModification mod);
    public abstract virtual Task ModifyAsync(string dn, LdapModification mod, LdapConstraints cons);
    public abstract virtual Task ModifyAsync(string dn, LdapModification[] mods);
    public abstract virtual Task ModifyAsync(string dn, LdapModification[] mods, LdapConstraints cons);
    public abstract virtual Task`1<LdapEntry> ReadAsync(string dn);
    public abstract virtual Task`1<LdapEntry> ReadAsync(string dn, LdapSearchConstraints cons);
    public abstract virtual Task`1<LdapEntry> ReadAsync(string dn, String[] attrs);
    public abstract virtual Task`1<LdapEntry> ReadAsync(string dn, String[] attrs, LdapSearchConstraints cons);
    public abstract virtual Task RenameAsync(string dn, string newRdn, bool deleteOldRdn);
    public abstract virtual Task RenameAsync(string dn, string newRdn, bool deleteOldRdn, LdapConstraints cons);
    public abstract virtual Task RenameAsync(string dn, string newRdn, string newParentdn, bool deleteOldRdn);
    public abstract virtual Task RenameAsync(string dn, string newRdn, string newParentdn, bool deleteOldRdn, LdapConstraints cons);
    public abstract virtual Task`1<ILdapSearchResults> SearchAsync(string base, int scope, string filter, String[] attrs, bool typesOnly);
    public abstract virtual Task`1<ILdapSearchResults> SearchAsync(string base, int scope, string filter, String[] attrs, bool typesOnly, LdapSearchConstraints cons);
    public abstract virtual Task`1<bool> CompareAsync(string dn, LdapAttribute attr);
    public abstract virtual Task`1<bool> CompareAsync(string dn, LdapAttribute attr, LdapConstraints cons);
    public abstract virtual bool get_Bound();
    public abstract virtual bool get_Connected();
    public abstract virtual LdapSearchConstraints get_SearchConstraints();
}
public interface Novell.Directory.Ldap.ILdapReferralHandler {
}
public interface Novell.Directory.Ldap.ILdapSearchResults {
    public LdapControl[] ResponseControls { get; }
    public abstract virtual LdapControl[] get_ResponseControls();
    public abstract virtual Task`1<bool> HasMoreAsync();
    public abstract virtual Task`1<LdapEntry> NextAsync();
}
public interface Novell.Directory.Ldap.ILdapUnsolicitedNotificationListener {
    public abstract virtual void MessageReceived(LdapExtendedResponse msg);
}
public class Novell.Directory.Ldap.InterThreadException : LdapException {
    private Message _request;
    internal int MessageId { get; }
    internal int ReplyType { get; }
    internal InterThreadException(string message, Object[] arguments, int resultCode, Exception rootException, Message request);
    internal int get_MessageId();
    internal int get_ReplyType();
}
public class Novell.Directory.Ldap.LdapAbandonRequest : LdapMessage {
    [CompilerGeneratedAttribute]
private DebugId <DebugId>k__BackingField;
    public DebugId DebugId { get; }
    public LdapAbandonRequest(int id, LdapControl[] cont);
    [CompilerGeneratedAttribute]
public virtual DebugId get_DebugId();
}
public class Novell.Directory.Ldap.LdapAddRequest : LdapMessage {
    [CompilerGeneratedAttribute]
private DebugId <DebugId>k__BackingField;
    public DebugId DebugId { get; }
    public LdapEntry Entry { get; }
    public LdapAddRequest(LdapEntry entry, LdapControl[] cont);
    [CompilerGeneratedAttribute]
public virtual DebugId get_DebugId();
    public LdapEntry get_Entry();
    private static RfcAttributeList MakeRfcAttrList(LdapEntry entry);
    public virtual string ToString();
}
public class Novell.Directory.Ldap.LdapAttribute : object {
    private string _baseName;
    private String[] _subTypes;
    private Byte[][] _values;
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    public IEnumerable`1<Byte[]> ByteValues { get; }
    public IEnumerable`1<string> StringValues { get; }
    public Byte[][] ByteValueArray { get; }
    public String[] StringValueArray { get; }
    public string StringValue { get; }
    public Byte[] ByteValue { get; }
    public string LangSubtype { get; }
    public string Name { get; }
    unknown string Value {protected set; }
    public LdapAttribute(LdapAttribute attr);
    public LdapAttribute(string attrName);
    public LdapAttribute(string attrName, Byte[] attrBytes);
    public LdapAttribute(string attrName, string attrString);
    public LdapAttribute(string attrName, String[] attrStrings);
    public IEnumerable`1<Byte[]> get_ByteValues();
    public IEnumerable`1<string> get_StringValues();
    public Byte[][] get_ByteValueArray();
    public String[] get_StringValueArray();
    public string get_StringValue();
    public Byte[] get_ByteValue();
    public string get_LangSubtype();
    [CompilerGeneratedAttribute]
public string get_Name();
    protected void set_Value(string value);
    public virtual int CompareTo(object attribute);
    public LdapAttribute Clone();
    public virtual void AddValue(string attrString);
    public virtual void AddValue(Byte[] attrBytes);
    public void AddBase64Value(string attrString);
    public void AddBase64Value(StringBuilder attrString, int start, int end);
    public void AddBase64Value(Char[] attrChars);
    public string GetBaseName();
    public static string GetBaseName(string attrName);
    public String[] GetSubtypes();
    public static String[] GetSubtypes(string attrName);
    public bool HasSubtype(string subtype);
    public bool HasSubtypes(String[] subtypes);
    public virtual void RemoveValue(string attrString);
    public virtual void RemoveValue(Byte[] attrBytes);
    public int Size();
    private void Add(Byte[] bytes);
    private bool Equals(Byte[] e1, Byte[] e2);
    public virtual string ToString();
}
public class Novell.Directory.Ldap.LdapAttributeSchema : LdapSchemaElement {
    public static int UserApplications;
    public static int DirectoryOperation;
    public static int DistributedOperation;
    public static int DsaOperation;
    [CompilerGeneratedAttribute]
private string <SyntaxString>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Superior>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <SingleValued>k__BackingField;
    [CompilerGeneratedAttribute]
private string <EqualityMatchingRule>k__BackingField;
    [CompilerGeneratedAttribute]
private string <OrderingMatchingRule>k__BackingField;
    [CompilerGeneratedAttribute]
private string <SubstringMatchingRule>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <Collective>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <UserModifiable>k__BackingField;
    [CompilerGeneratedAttribute]
private int <Usage>k__BackingField;
    public string SyntaxString { get; }
    public string Superior { get; }
    public bool SingleValued { get; }
    public string EqualityMatchingRule { get; }
    public string OrderingMatchingRule { get; }
    public string SubstringMatchingRule { get; }
    public bool Collective { get; }
    public bool UserModifiable { get; }
    public int Usage { get; private set; }
    public LdapAttributeSchema(String[] names, string oid, string description, string syntaxString, bool single, string superior, bool obsolete, string equality, string ordering, string substring, bool collective, bool isUserModifiable, int usage);
    public LdapAttributeSchema(string raw);
    [CompilerGeneratedAttribute]
public string get_SyntaxString();
    [CompilerGeneratedAttribute]
public string get_Superior();
    [CompilerGeneratedAttribute]
public bool get_SingleValued();
    [CompilerGeneratedAttribute]
public string get_EqualityMatchingRule();
    [CompilerGeneratedAttribute]
public string get_OrderingMatchingRule();
    [CompilerGeneratedAttribute]
public string get_SubstringMatchingRule();
    [CompilerGeneratedAttribute]
public bool get_Collective();
    [CompilerGeneratedAttribute]
public bool get_UserModifiable();
    [CompilerGeneratedAttribute]
public int get_Usage();
    [CompilerGeneratedAttribute]
private void set_Usage(int value);
    protected virtual string FormatString();
}
public class Novell.Directory.Ldap.LdapAttributeSet : Dictionary`2<string, LdapAttribute> {
    public LdapAttribute GetAttribute(string attrName);
    public LdapAttribute GetAttribute(string attrName, string lang);
    public LdapAttributeSet GetSubset(string subtype);
    public IEnumerator`1<LdapAttribute> GetEnumerator();
    public bool IsEmpty();
    public bool Add(LdapAttribute attribute);
    public virtual string ToString();
}
public class Novell.Directory.Ldap.LdapAuthProvider : object {
    [CompilerGeneratedAttribute]
private string <Dn>k__BackingField;
    [CompilerGeneratedAttribute]
private Byte[] <Password>k__BackingField;
    public string Dn { get; }
    public Byte[] Password { get; }
    public LdapAuthProvider(string dn, Byte[] password);
    [CompilerGeneratedAttribute]
public virtual string get_Dn();
    [CompilerGeneratedAttribute]
public virtual Byte[] get_Password();
}
public class Novell.Directory.Ldap.LdapBindRequest : LdapMessage {
    [CompilerGeneratedAttribute]
private DebugId <DebugId>k__BackingField;
    public DebugId DebugId { get; }
    public string AuthenticationDn { get; }
    public LdapBindRequest(int version, string dn, Byte[] passwd, LdapControl[] cont);
    [CompilerGeneratedAttribute]
public virtual DebugId get_DebugId();
    public string get_AuthenticationDn();
    public virtual string ToString();
}
public class Novell.Directory.Ldap.LdapCompareAttrNames : object {
    private Boolean[] _sortAscending;
    private String[] _sortByNames;
    private CompareInfo _collator;
    private CultureInfo _location;
    public CultureInfo Locale { get; public set; }
    public LdapCompareAttrNames(string attrName);
    public LdapCompareAttrNames(string attrName, bool ascendingFlag);
    public LdapCompareAttrNames(String[] attrNames);
    public LdapCompareAttrNames(String[] attrNames, Boolean[] ascendingFlags);
    public virtual CultureInfo get_Locale();
    public virtual void set_Locale(CultureInfo value);
    public virtual int Compare(object object1, object object2);
    public virtual bool Equals(object comparator);
    public virtual int GetHashCode();
}
public class Novell.Directory.Ldap.LdapCompareRequest : LdapMessage {
    [CompilerGeneratedAttribute]
private DebugId <DebugId>k__BackingField;
    public DebugId DebugId { get; }
    public string AttributeDescription { get; }
    public Byte[] AssertionValue { get; }
    public string Dn { get; }
    public LdapCompareRequest(string dn, string name, Byte[] valueRenamed, LdapControl[] cont);
    [CompilerGeneratedAttribute]
public virtual DebugId get_DebugId();
    public string get_AttributeDescription();
    public Byte[] get_AssertionValue();
    public string get_Dn();
}
public class Novell.Directory.Ldap.LdapConnection : object {
    public static int ScopeBase;
    public static int ScopeOne;
    public static int ScopeSub;
    public static string NoAttrs;
    public static string AllUserAttrs;
    public static int LdapV3;
    public static int DefaultPort;
    public static int DefaultSslPort;
    public static string LdapPropertySdk;
    public static string LdapPropertyProtocol;
    public static string LdapPropertySecurity;
    public static string ServerShutdownOid;
    private static string StartTlsOid;
    [CompilerGeneratedAttribute]
private DebugId <DebugId>k__BackingField;
    private LdapSearchConstraints _defSearchCons;
    private LdapControl[] _responseCtls;
    private LdapConnectionOptions _ldapConnectionOptions;
    private object _responseCtlSemaphore;
    [CompilerGeneratedAttribute]
private Connection <Connection>k__BackingField;
    private ConcurrentDictionary`2<string, ISaslClientFactory> _saslClientFactories;
    public DebugId DebugId { get; }
    public int ProtocolVersion { get; }
    public string AuthenticationDn { get; }
    public string AuthenticationMethod { get; }
    public LdapConstraints Constraints { get; public set; }
    public string Host { get; }
    public int Port { get; }
    public LdapSearchConstraints SearchConstraints { get; }
    public bool SecureSocketLayer { get; public set; }
    public int ConnectionTimeout { get; public set; }
    public bool Bound { get; }
    public bool Connected { get; }
    public bool Tls { get; }
    public LdapControl[] ResponseControls { get; }
    private Connection Connection { get; private set; }
    public IDictionary SaslBindProperties { get; }
    public LdapConnection(LdapConnectionOptions ldapConnectionOptions);
    [CompilerGeneratedAttribute]
public virtual DebugId get_DebugId();
    public int get_ProtocolVersion();
    public string get_AuthenticationDn();
    public string get_AuthenticationMethod();
    public LdapConstraints get_Constraints();
    public void set_Constraints(LdapConstraints value);
    public string get_Host();
    public int get_Port();
    public sealed virtual LdapSearchConstraints get_SearchConstraints();
    public bool get_SecureSocketLayer();
    public void set_SecureSocketLayer(bool value);
    public int get_ConnectionTimeout();
    public void set_ConnectionTimeout(int value);
    public sealed virtual bool get_Bound();
    public sealed virtual bool get_Connected();
    public bool get_Tls();
    public LdapControl[] get_ResponseControls();
    [CompilerGeneratedAttribute]
private Connection get_Connection();
    [CompilerGeneratedAttribute]
private void set_Connection(Connection value);
    public sealed virtual void Dispose();
    [AsyncStateMachineAttribute("Novell.Directory.Ldap.LdapConnection/<StartTlsAsync>d__56")]
public sealed virtual Task StartTlsAsync();
    public sealed virtual Task StopTlsAsync();
    public sealed virtual Task AddAsync(LdapEntry entry);
    [AsyncStateMachineAttribute("Novell.Directory.Ldap.LdapConnection/<AddAsync>d__59")]
public sealed virtual Task AddAsync(LdapEntry entry, LdapConstraints cons);
    public sealed virtual Task BindAsync(string dn, string passwd);
    public sealed virtual Task BindAsync(int version, string dn, string passwd);
    public sealed virtual Task BindAsync(string dn, string passwd, LdapConstraints cons);
    public sealed virtual Task BindAsync(int version, string dn, string passwd, LdapConstraints cons);
    public sealed virtual Task BindAsync(int version, string dn, Byte[] passwd);
    [AsyncStateMachineAttribute("Novell.Directory.Ldap.LdapConnection/<BindAsync>d__65")]
public sealed virtual Task BindAsync(int version, string dn, Byte[] passwd, LdapConstraints cons);
    public sealed virtual Task ConnectAsync(string host, int port);
    public sealed virtual Task DeleteAsync(string dn);
    [AsyncStateMachineAttribute("Novell.Directory.Ldap.LdapConnection/<DeleteAsync>d__68")]
public sealed virtual Task DeleteAsync(string dn, LdapConstraints cons);
    public sealed virtual void Disconnect();
    public sealed virtual Task`1<LdapExtendedResponse> ExtendedOperationAsync(LdapExtendedOperation op);
    [AsyncStateMachineAttribute("Novell.Directory.Ldap.LdapConnection/<ExtendedOperationAsync>d__71")]
public sealed virtual Task`1<LdapExtendedResponse> ExtendedOperationAsync(LdapExtendedOperation op, LdapConstraints cons);
    public sealed virtual Task ModifyAsync(string dn, LdapModification mod);
    public sealed virtual Task ModifyAsync(string dn, LdapModification mod, LdapConstraints cons);
    public sealed virtual Task ModifyAsync(string dn, LdapModification[] mods);
    [AsyncStateMachineAttribute("Novell.Directory.Ldap.LdapConnection/<ModifyAsync>d__75")]
public sealed virtual Task ModifyAsync(string dn, LdapModification[] mods, LdapConstraints cons);
    public sealed virtual Task`1<LdapEntry> ReadAsync(string dn);
    public sealed virtual Task`1<LdapEntry> ReadAsync(string dn, LdapSearchConstraints cons);
    public sealed virtual Task`1<LdapEntry> ReadAsync(string dn, String[] attrs);
    [AsyncStateMachineAttribute("Novell.Directory.Ldap.LdapConnection/<ReadAsync>d__79")]
public sealed virtual Task`1<LdapEntry> ReadAsync(string dn, String[] attrs, LdapSearchConstraints cons);
    public sealed virtual Task RenameAsync(string dn, string newRdn, bool deleteOldRdn);
    public sealed virtual Task RenameAsync(string dn, string newRdn, bool deleteOldRdn, LdapConstraints cons);
    public sealed virtual Task RenameAsync(string dn, string newRdn, string newParentdn, bool deleteOldRdn);
    [AsyncStateMachineAttribute("Novell.Directory.Ldap.LdapConnection/<RenameAsync>d__83")]
public sealed virtual Task RenameAsync(string dn, string newRdn, string newParentdn, bool deleteOldRdn, LdapConstraints cons);
    public sealed virtual Task`1<ILdapSearchResults> SearchAsync(string base, int scope, string filter, String[] attrs, bool typesOnly);
    [AsyncStateMachineAttribute("Novell.Directory.Ldap.LdapConnection/<SearchAsync>d__85")]
public sealed virtual Task`1<ILdapSearchResults> SearchAsync(string base, int scope, string filter, String[] attrs, bool typesOnly, LdapSearchConstraints cons);
    public void add_UserDefinedServerCertValidationDelegate(RemoteCertificateValidationCallback value);
    public void remove_UserDefinedServerCertValidationDelegate(RemoteCertificateValidationCallback value);
    public void add_UserDefinedClientCertSelectionDelegate(LocalCertificateSelectionCallback value);
    public void remove_UserDefinedClientCertSelectionDelegate(LocalCertificateSelectionCallback value);
    public object Clone();
    protected virtual void Dispose(bool isDisposing);
    public object GetProperty(string name);
    public void AddUnsolicitedNotificationListener(ILdapUnsolicitedNotificationListener listener);
    public void RemoveUnsolicitedNotificationListener(ILdapUnsolicitedNotificationListener listener);
    public Task AbandonAsync(LdapSearchResults results);
    public Task AbandonAsync(LdapSearchResults results, LdapConstraints cons);
    public void Abandon(int id);
    public void Abandon(int id, LdapConstraints cons);
    public void Abandon(LdapMessageQueue queue);
    public void Abandon(LdapMessageQueue queue, LdapConstraints cons);
    public Task`1<LdapResponseQueue> AddAsync(LdapEntry entry, LdapResponseQueue queue);
    public Task`1<LdapResponseQueue> AddAsync(LdapEntry entry, LdapResponseQueue queue, LdapConstraints cons);
    public Task`1<LdapResponseQueue> BindAsync(int version, string dn, Byte[] passwd, LdapResponseQueue queue);
    [AsyncStateMachineAttribute("Novell.Directory.Ldap.LdapConnection/<BindAsync>d__106")]
public Task`1<LdapResponseQueue> BindAsync(int version, string dn, Byte[] passwd, LdapResponseQueue queue, LdapConstraints cons);
    public sealed virtual Task`1<bool> CompareAsync(string dn, LdapAttribute attr);
    [AsyncStateMachineAttribute("Novell.Directory.Ldap.LdapConnection/<CompareAsync>d__108")]
public sealed virtual Task`1<bool> CompareAsync(string dn, LdapAttribute attr, LdapConstraints cons);
    public Task`1<LdapResponseQueue> CompareAsync(string dn, LdapAttribute attr, LdapResponseQueue queue);
    public Task`1<LdapResponseQueue> CompareAsync(string dn, LdapAttribute attr, LdapResponseQueue queue, LdapConstraints cons);
    public Task`1<LdapResponseQueue> DeleteAsync(string dn, LdapResponseQueue queue);
    public Task`1<LdapResponseQueue> DeleteAsync(string dn, LdapResponseQueue queue, LdapConstraints cons);
    private void DisconnectImpl();
    public Task`1<LdapResponseQueue> ExtendedOperationAsync(LdapExtendedOperation op, LdapResponseQueue queue);
    public Task`1<LdapResponseQueue> ExtendedOperationAsync(LdapExtendedOperation op, LdapConstraints cons, LdapResponseQueue queue);
    internal LdapMessage MakeExtendedOperation(LdapExtendedOperation op, LdapConstraints cons);
    public Task`1<LdapResponseQueue> ModifyAsync(string dn, LdapModification mod, LdapResponseQueue queue);
    public Task`1<LdapResponseQueue> ModifyAsync(string dn, LdapModification mod, LdapResponseQueue queue, LdapConstraints cons);
    public Task`1<LdapResponseQueue> ModifyAsync(string dn, LdapModification[] mods, LdapResponseQueue queue);
    public Task`1<LdapResponseQueue> ModifyAsync(string dn, LdapModification[] mods, LdapResponseQueue queue, LdapConstraints cons);
    public static Task`1<LdapEntry> ReadAsync(LdapUrl toGet);
    [AsyncStateMachineAttribute("Novell.Directory.Ldap.LdapConnection/<ReadAsync>d__122")]
public static Task`1<LdapEntry> ReadAsync(LdapUrl toGet, LdapSearchConstraints cons);
    public Task`1<LdapResponseQueue> RenameAsync(string dn, string newRdn, bool deleteOldRdn, LdapResponseQueue queue);
    public Task`1<LdapResponseQueue> RenameAsync(string dn, string newRdn, bool deleteOldRdn, LdapResponseQueue queue, LdapConstraints cons);
    public Task`1<LdapResponseQueue> RenameAsync(string dn, string newRdn, string newParentdn, bool deleteOldRdn, LdapResponseQueue queue);
    public Task`1<LdapResponseQueue> RenameAsync(string dn, string newRdn, string newParentdn, bool deleteOldRdn, LdapResponseQueue queue, LdapConstraints cons);
    public Task`1<LdapSearchQueue> SearchAsync(string base, int scope, string filter, String[] attrs, bool typesOnly, LdapSearchQueue queue);
    [AsyncStateMachineAttribute("Novell.Directory.Ldap.LdapConnection/<SearchAsync>d__128")]
public Task`1<LdapSearchQueue> SearchAsync(string base, int scope, string filter, String[] attrs, bool typesOnly, LdapSearchQueue queue, LdapSearchConstraints cons);
    public static Task`1<ILdapSearchResults> SearchAsync(LdapUrl toGet);
    [AsyncStateMachineAttribute("Novell.Directory.Ldap.LdapConnection/<SearchAsync>d__130")]
public static Task`1<ILdapSearchResults> SearchAsync(LdapUrl toGet, LdapSearchConstraints cons);
    public Task`1<LdapMessageQueue> SendRequestAsync(LdapMessage request, LdapMessageQueue queue);
    [AsyncStateMachineAttribute("Novell.Directory.Ldap.LdapConnection/<SendRequestAsync>d__132")]
public Task`1<LdapMessageQueue> SendRequestAsync(LdapMessage request, LdapMessageQueue queue, LdapConstraints cons);
    [AsyncStateMachineAttribute("Novell.Directory.Ldap.LdapConnection/<SendRequestToServerAsync>d__133")]
private Task`1<LdapResponseQueue> SendRequestToServerAsync(LdapMessage msg, int timeout, LdapResponseQueue queue, BindProperties bindProps);
    [AsyncStateMachineAttribute("Novell.Directory.Ldap.LdapConnection/<GetReferralConnectionAsync>d__134")]
private Task`1<ReferralInfo> GetReferralConnectionAsync(String[] referrals);
    [AsyncStateMachineAttribute("Novell.Directory.Ldap.LdapConnection/<ChkResultCodeAsync>d__135")]
private Task ChkResultCodeAsync(LdapMessageQueue queue, LdapConstraints cons, LdapResponse response);
    [AsyncStateMachineAttribute("Novell.Directory.Ldap.LdapConnection/<ChaseReferralAsync>d__136")]
internal Task`1<List`1<object>> ChaseReferralAsync(LdapMessageQueue queue, LdapConstraints cons, LdapMessage msg, String[] initialReferrals, int hopCount, bool searchReference, List`1<object> connectionList);
    private LdapMessage RebuildRequest(LdapMessage msg, LdapUrl url, bool reference);
    internal void ReleaseReferralConnections(List`1<object> list);
    [AsyncStateMachineAttribute("Novell.Directory.Ldap.LdapConnection/<FetchSchemaAsync>d__139")]
public Task`1<LdapSchema> FetchSchemaAsync(string schemaDn);
    public Task`1<string> GetSchemaDnAsync();
    [AsyncStateMachineAttribute("Novell.Directory.Ldap.LdapConnection/<GetSchemaDnAsync>d__141")]
public Task`1<string> GetSchemaDnAsync(string dn);
    public sealed virtual IReadOnlyCollection`1<ISaslClientFactory> GetRegisteredSaslClientFactories();
    public sealed virtual void RegisterSaslClientFactory(ISaslClientFactory saslClientFactory);
    public sealed virtual bool IsSaslMechanismSupported(string mechanism);
    internal ISaslClient CreateClient(SaslRequest saslRequest);
    public virtual IDictionary get_SaslBindProperties();
    [AsyncStateMachineAttribute("Novell.Directory.Ldap.LdapConnection/<BindAsync>d__149")]
public virtual Task BindAsync(SaslRequest saslRequest);
    [AsyncStateMachineAttribute("Novell.Directory.Ldap.LdapConnection/<SendLdapSaslBindRequestAsync>d__150")]
private Task`1<Byte[]> SendLdapSaslBindRequestAsync(Byte[] toWrite, string mechanism, BindProperties bindProps, LdapConstraints constraints);
}
[ExtensionAttribute]
public static class Novell.Directory.Ldap.LdapConnectionExtensionMethods : object {
    [AsyncStateMachineAttribute("Novell.Directory.Ldap.LdapConnectionExtensionMethods/<GetRootDseInfoAsync>d__0")]
[ExtensionAttribute]
public static Task`1<RootDseInfo> GetRootDseInfoAsync(ILdapConnection conn);
}
public class Novell.Directory.Ldap.LdapConnectionOptions : object {
    private List`1<X509Certificate> _clientCertificates;
    [CompilerGeneratedAttribute]
private Func`2<IPAddress, bool> <IpAddressFilter>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <Ssl>k__BackingField;
    [CompilerGeneratedAttribute]
private SslProtocols <SslProtocols>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <CheckCertificateRevocationEnabled>k__BackingField;
    [CompilerGeneratedAttribute]
private RemoteCertificateValidationCallback <RemoteCertificateValidationCallback>k__BackingField;
    [CompilerGeneratedAttribute]
private LocalCertificateSelectionCallback <LocalCertificateSelectionCallback>k__BackingField;
    public Func`2<IPAddress, bool> IpAddressFilter { get; private set; }
    public bool Ssl { get; private set; }
    public IReadOnlyCollection`1<X509Certificate> ClientCertificates { get; }
    public SslProtocols SslProtocols { get; private set; }
    public bool CheckCertificateRevocationEnabled { get; private set; }
    public RemoteCertificateValidationCallback RemoteCertificateValidationCallback { get; private set; }
    public LocalCertificateSelectionCallback LocalCertificateSelectionCallback { get; private set; }
    [CompilerGeneratedAttribute]
public Func`2<IPAddress, bool> get_IpAddressFilter();
    [CompilerGeneratedAttribute]
private void set_IpAddressFilter(Func`2<IPAddress, bool> value);
    [CompilerGeneratedAttribute]
public bool get_Ssl();
    [CompilerGeneratedAttribute]
private void set_Ssl(bool value);
    public IReadOnlyCollection`1<X509Certificate> get_ClientCertificates();
    [CompilerGeneratedAttribute]
public SslProtocols get_SslProtocols();
    [CompilerGeneratedAttribute]
private void set_SslProtocols(SslProtocols value);
    [CompilerGeneratedAttribute]
public bool get_CheckCertificateRevocationEnabled();
    [CompilerGeneratedAttribute]
private void set_CheckCertificateRevocationEnabled(bool value);
    [CompilerGeneratedAttribute]
public RemoteCertificateValidationCallback get_RemoteCertificateValidationCallback();
    [CompilerGeneratedAttribute]
private void set_RemoteCertificateValidationCallback(RemoteCertificateValidationCallback value);
    [CompilerGeneratedAttribute]
public LocalCertificateSelectionCallback get_LocalCertificateSelectionCallback();
    [CompilerGeneratedAttribute]
private void set_LocalCertificateSelectionCallback(LocalCertificateSelectionCallback value);
    public LdapConnectionOptions ConfigureIpAddressFilter(Func`2<IPAddress, bool> ipAddressFilter);
    public LdapConnectionOptions UseSsl();
    public LdapConnectionOptions ConfigureClientCertificates(IEnumerable`1<X509Certificate> clientCertificates);
    public LdapConnectionOptions ConfigureSslProtocols(SslProtocols sslProtocols);
    public LdapConnectionOptions CheckCertificateRevocation();
    public LdapConnectionOptions ConfigureRemoteCertificateValidationCallback(RemoteCertificateValidationCallback remoteCertificateValidationCallback);
    public LdapConnectionOptions ConfigureLocalCertificateSelectionCallback(LocalCertificateSelectionCallback localCertificateSelectionCallback);
    internal void SetSecureSocketLayer(bool ssl);
}
public class Novell.Directory.Ldap.LdapConstraints : object {
    [CompilerGeneratedAttribute]
private DebugId <DebugId>k__BackingField;
    private LdapControl[] _controls;
    private Hashtable _properties;
    private ILdapReferralHandler _refHandler;
    [CompilerGeneratedAttribute]
private int <HopLimit>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <ReferralFollowing>k__BackingField;
    [CompilerGeneratedAttribute]
private int <TimeLimit>k__BackingField;
    public DebugId DebugId { get; }
    public int HopLimit { get; public set; }
    internal Hashtable Properties { get; internal set; }
    public bool ReferralFollowing { get; public set; }
    public int TimeLimit { get; public set; }
    public LdapConstraints(int msLimit, bool doReferrals, ILdapReferralHandler handler, int hopLimit);
    [CompilerGeneratedAttribute]
public virtual DebugId get_DebugId();
    [CompilerGeneratedAttribute]
public int get_HopLimit();
    [CompilerGeneratedAttribute]
public void set_HopLimit(int value);
    internal Hashtable get_Properties();
    internal void set_Properties(Hashtable value);
    [CompilerGeneratedAttribute]
public bool get_ReferralFollowing();
    [CompilerGeneratedAttribute]
public void set_ReferralFollowing(bool value);
    [CompilerGeneratedAttribute]
public int get_TimeLimit();
    [CompilerGeneratedAttribute]
public void set_TimeLimit(int value);
    public LdapControl[] GetControls();
    public object GetProperty(string name);
    internal ILdapReferralHandler getReferralHandler();
    public void SetControls(LdapControl control);
    public void SetControls(LdapControl[] controls);
    public void SetProperty(string name, object valueRenamed);
    public void setReferralHandler(ILdapReferralHandler handler);
    public object Clone();
}
public class Novell.Directory.Ldap.LdapControl : object {
    [CompilerGeneratedAttribute]
private static RespControlVector <RegisteredControls>k__BackingField;
    [CompilerGeneratedAttribute]
private RfcControl <Asn1Object>k__BackingField;
    public string Id { get; }
    public bool Critical { get; }
    internal static RespControlVector RegisteredControls { get; }
    internal RfcControl Asn1Object { get; private set; }
    private static LdapControl();
    public LdapControl(string oid, bool critical, Byte[] values);
    protected internal LdapControl(RfcControl control);
    public string get_Id();
    public bool get_Critical();
    [CompilerGeneratedAttribute]
internal static RespControlVector get_RegisteredControls();
    [CompilerGeneratedAttribute]
internal RfcControl get_Asn1Object();
    [CompilerGeneratedAttribute]
private void set_Asn1Object(RfcControl value);
    public object Clone();
    public Byte[] GetValue();
    protected void SetValue(Byte[] controlValue);
    public static void Register(string oid, Type controlClass);
}
public class Novell.Directory.Ldap.LdapDeleteRequest : LdapMessage {
    [CompilerGeneratedAttribute]
private DebugId <DebugId>k__BackingField;
    public DebugId DebugId { get; }
    public string Dn { get; }
    public LdapDeleteRequest(string dn, LdapControl[] cont);
    [CompilerGeneratedAttribute]
public virtual DebugId get_DebugId();
    public string get_Dn();
    public virtual string ToString();
}
public class Novell.Directory.Ldap.LdapDitContentRuleSchema : LdapSchemaElement {
    [CompilerGeneratedAttribute]
private String[] <AuxiliaryClasses>k__BackingField;
    [CompilerGeneratedAttribute]
private String[] <RequiredAttributes>k__BackingField;
    [CompilerGeneratedAttribute]
private String[] <OptionalAttributes>k__BackingField;
    [CompilerGeneratedAttribute]
private String[] <PrecludedAttributes>k__BackingField;
    public String[] AuxiliaryClasses { get; }
    public String[] RequiredAttributes { get; }
    public String[] OptionalAttributes { get; }
    public String[] PrecludedAttributes { get; }
    public LdapDitContentRuleSchema(String[] names, string oid, string description, bool obsolete, String[] auxiliary, String[] required, String[] optional, String[] precluded);
    public LdapDitContentRuleSchema(string raw);
    [CompilerGeneratedAttribute]
public String[] get_AuxiliaryClasses();
    [CompilerGeneratedAttribute]
public String[] get_RequiredAttributes();
    [CompilerGeneratedAttribute]
public String[] get_OptionalAttributes();
    [CompilerGeneratedAttribute]
public String[] get_PrecludedAttributes();
    protected virtual string FormatString();
}
public class Novell.Directory.Ldap.LdapDitStructureRuleSchema : LdapSchemaElement {
    [CompilerGeneratedAttribute]
private int <RuleId>k__BackingField;
    [CompilerGeneratedAttribute]
private string <NameForm>k__BackingField;
    [CompilerGeneratedAttribute]
private String[] <Superiors>k__BackingField;
    public int RuleId { get; }
    public string NameForm { get; }
    public String[] Superiors { get; }
    public LdapDitStructureRuleSchema(String[] names, int ruleId, string description, bool obsolete, string nameForm, String[] superiorIDs);
    public LdapDitStructureRuleSchema(string raw);
    [CompilerGeneratedAttribute]
public int get_RuleId();
    [CompilerGeneratedAttribute]
public string get_NameForm();
    [CompilerGeneratedAttribute]
public String[] get_Superiors();
    protected virtual string FormatString();
}
public static class Novell.Directory.Ldap.LdapDn : object {
    public static bool Equals(string dn1, string dn2);
    public static string EscapeRdn(string rdn);
    public static String[] ExplodeDn(string dn, bool noTypes);
    public static String[] ExplodeRdn(string rdn, bool noTypes);
    public static bool IsValid(string dn);
    public static string Normalize(string dn);
    public static string UnescapeRdn(string rdn);
}
public class Novell.Directory.Ldap.LdapEntry : object {
    [CompilerGeneratedAttribute]
private LdapAttributeSet <Attrs>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Dn>k__BackingField;
    private LdapAttributeSet Attrs { get; }
    public string Dn { get; }
    public LdapEntry(string dn, LdapAttributeSet attrs);
    [CompilerGeneratedAttribute]
private LdapAttributeSet get_Attrs();
    [CompilerGeneratedAttribute]
public string get_Dn();
    public virtual int CompareTo(object entry);
    public bool Contains(string attrName);
    public LdapAttribute Get(string attrName);
    public LdapAttribute GetOrDefault(string attributeName, LdapAttribute fallback);
    public string GetStringValueOrDefault(string attributeName, string fallback);
    public Byte[] GetBytesValueOrDefault(string attributeName, Byte[] fallback);
    public LdapAttributeSet GetAttributeSet();
    public LdapAttributeSet GetAttributeSet(string subtype);
    public virtual string ToString();
}
public class Novell.Directory.Ldap.LdapException : Exception {
    public static int Success;
    public static int OperationsError;
    public static int ProtocolError;
    public static int TimeLimitExceeded;
    public static int SizeLimitExceeded;
    public static int CompareFalse;
    public static int CompareTrue;
    public static int AuthMethodNotSupported;
    public static int StrongAuthRequired;
    public static int LdapPartialResults;
    public static int Referral;
    public static int AdminLimitExceeded;
    public static int UnavailableCriticalExtension;
    public static int ConfidentialityRequired;
    public static int SaslBindInProgress;
    public static int NoSuchAttribute;
    public static int UndefinedAttributeType;
    public static int InappropriateMatching;
    public static int ConstraintViolation;
    public static int AttributeOrValueExists;
    public static int InvalidAttributeSyntax;
    public static int NoSuchObject;
    public static int AliasProblem;
    public static int InvalidDnSyntax;
    public static int IsLeaf;
    public static int AliasDereferencingProblem;
    public static int InappropriateAuthentication;
    public static int InvalidCredentials;
    public static int InsufficientAccessRights;
    public static int Busy;
    public static int Unavailable;
    public static int UnwillingToPerform;
    public static int LoopDetect;
    public static int NamingViolation;
    public static int ObjectClassViolation;
    public static int NotAllowedOnNonleaf;
    public static int NotAllowedOnRdn;
    public static int EntryAlreadyExists;
    public static int ObjectClassModsProhibited;
    public static int AffectsMultipleDsas;
    public static int Other;
    public static int ServerDown;
    public static int LocalError;
    public static int EncodingError;
    public static int DecodingError;
    public static int LdapTimeout;
    public static int AuthUnknown;
    public static int FilterError;
    public static int UserCancelled;
    public static int NoMemory;
    public static int ConnectError;
    public static int LdapNotSupported;
    public static int ControlNotFound;
    public static int NoResultsReturned;
    public static int MoreResultsToReturn;
    public static int ClientLoop;
    public static int ReferralLimitExceeded;
    public static int InvalidResponse;
    public static int AmbiguousResponse;
    public static int TlsNotSupported;
    public static int SslHandshakeFailed;
    public static int SslProviderNotFound;
    private string _serverMessage;
    private Object[] _arguments;
    private string _messageOrKey;
    [CompilerGeneratedAttribute]
private int <ResultCode>k__BackingField;
    [CompilerGeneratedAttribute]
private string <MatchedDn>k__BackingField;
    public string LdapErrorMessage { get; }
    public int ResultCode { get; }
    public string MatchedDn { get; }
    public string Message { get; }
    public LdapException(string messageOrKey);
    public LdapException(Exception rootException);
    public LdapException(string messageOrKey, int resultCode, string serverMsg);
    public LdapException(string messageOrKey, Object[] arguments, int resultCode, string serverMsg);
    public LdapException(string messageOrKey, int resultCode, string serverMsg, Exception rootException);
    public LdapException(string messageOrKey, Object[] arguments, int resultCode, string serverMsg, Exception rootException);
    public LdapException(string messageOrKey, int resultCode, string serverMsg, string matchedDn);
    public LdapException(string messageOrKey, Object[] arguments, int resultCode, string serverMsg, string matchedDn);
    internal LdapException(string messageOrKey, Object[] arguments, int resultCode, string serverMsg, string matchedDn, Exception rootException);
    public string get_LdapErrorMessage();
    [CompilerGeneratedAttribute]
public int get_ResultCode();
    [CompilerGeneratedAttribute]
public string get_MatchedDn();
    public virtual string get_Message();
    public string ResultCodeToString();
    public static string ResultCodeToString(int code);
    public string ResultCodeToString(CultureInfo locale);
    public static string ResultCodeToString(int code, CultureInfo locale);
    public virtual string ToString();
    internal string GetExceptionString(string exception);
}
public class Novell.Directory.Ldap.LdapExtendedOperation : object {
    [CompilerGeneratedAttribute]
private DebugId <DebugId>k__BackingField;
    private string _oid;
    private Byte[] _vals;
    public DebugId DebugId { get; }
    public LdapExtendedOperation(string oid, Byte[] vals);
    [CompilerGeneratedAttribute]
public virtual DebugId get_DebugId();
    public object Clone();
    public string GetId();
    public Byte[] GetValue();
    protected void SetValue(Byte[] newVals);
    protected void SetId(string newoid);
}
public class Novell.Directory.Ldap.LdapExtendedRequest : LdapMessage {
    [CompilerGeneratedAttribute]
private DebugId <DebugId>k__BackingField;
    public DebugId DebugId { get; }
    public LdapExtendedOperation ExtendedOperation { get; }
    public LdapExtendedRequest(LdapExtendedOperation op, LdapControl[] cont);
    [CompilerGeneratedAttribute]
public virtual DebugId get_DebugId();
    public LdapExtendedOperation get_ExtendedOperation();
}
public class Novell.Directory.Ldap.LdapExtendedResponse : LdapResponse {
    [CompilerGeneratedAttribute]
private DebugId <DebugId>k__BackingField;
    [CompilerGeneratedAttribute]
private static RespExtensionSet <RegisteredResponses>k__BackingField;
    public DebugId DebugId { get; }
    public string Id { get; }
    public static RespExtensionSet RegisteredResponses { get; }
    public Byte[] Value { get; }
    private static LdapExtendedResponse();
    public LdapExtendedResponse(RfcLdapMessage message);
    [CompilerGeneratedAttribute]
public virtual DebugId get_DebugId();
    public string get_Id();
    [CompilerGeneratedAttribute]
public static RespExtensionSet get_RegisteredResponses();
    public Byte[] get_Value();
    public static void Register(string oid, Type extendedResponseClass);
}
public class Novell.Directory.Ldap.LdapIntermediateResponse : LdapResponse {
    [CompilerGeneratedAttribute]
private DebugId <DebugId>k__BackingField;
    private static RespExtensionSet RegisteredResponses;
    public DebugId DebugId { get; }
    public LdapIntermediateResponse(RfcLdapMessage message);
    private static LdapIntermediateResponse();
    [CompilerGeneratedAttribute]
public virtual DebugId get_DebugId();
    public static void Register(string oid, Type extendedResponseClass);
    public static RespExtensionSet GetRegisteredResponses();
    public string GetId();
    public Byte[] GetValue();
}
public static class Novell.Directory.Ldap.LdapKnownOids : object {
    private static IReadOnlyDictionary`2<string, string> _oidNames;
    private static LdapKnownOids();
    public static string GetDisplayNameForOid(string oid);
}
public class Novell.Directory.Ldap.LdapLocalException : LdapException {
    public LdapLocalException(string messageOrKey, int resultCode);
    public LdapLocalException(string messageOrKey, Object[] arguments, int resultCode);
    public LdapLocalException(string messageOrKey, int resultCode, Exception rootException);
    public LdapLocalException(string messageOrKey, Object[] arguments, int resultCode, Exception rootException);
    public virtual string ToString();
}
public class Novell.Directory.Ldap.LdapMatchingRuleSchema : LdapSchemaElement {
    [CompilerGeneratedAttribute]
private String[] <Attributes>k__BackingField;
    [CompilerGeneratedAttribute]
private string <SyntaxString>k__BackingField;
    public String[] Attributes { get; }
    public string SyntaxString { get; }
    public LdapMatchingRuleSchema(String[] names, string oid, string description, String[] attributes, bool obsolete, string syntaxString);
    public LdapMatchingRuleSchema(string rawMatchingRule, string rawMatchingRuleUse);
    [CompilerGeneratedAttribute]
public String[] get_Attributes();
    [CompilerGeneratedAttribute]
public string get_SyntaxString();
    protected virtual string FormatString();
}
public class Novell.Directory.Ldap.LdapMatchingRuleUseSchema : LdapSchemaElement {
    [CompilerGeneratedAttribute]
private String[] <Attributes>k__BackingField;
    public String[] Attributes { get; }
    public LdapMatchingRuleUseSchema(String[] names, string oid, string description, bool obsolete, String[] attributes);
    public LdapMatchingRuleUseSchema(string raw);
    [CompilerGeneratedAttribute]
public String[] get_Attributes();
    protected virtual string FormatString();
}
public class Novell.Directory.Ldap.LdapMessage : object {
    [CompilerGeneratedAttribute]
private DebugId <DebugId>k__BackingField;
    public static int BindRequest;
    public static int BindResponse;
    public static int UnbindRequest;
    public static int SearchRequest;
    public static int SearchResponse;
    public static int SearchResult;
    public static int ModifyRequest;
    public static int ModifyResponse;
    public static int AddRequest;
    public static int AddResponse;
    public static int DelRequest;
    public static int DelResponse;
    public static int ModifyRdnRequest;
    public static int ModifyRdnResponse;
    public static int CompareRequest;
    public static int CompareResponse;
    public static int AbandonRequest;
    public static int SearchResultReference;
    public static int ExtendedRequest;
    public static int ExtendedResponse;
    public static int IntermediateResponse;
    private int _imsgNum;
    private int _messageType;
    private string _stringTag;
    [CompilerGeneratedAttribute]
private RfcLdapMessage <Message>k__BackingField;
    public DebugId DebugId { get; }
    protected internal RfcLdapMessage Message { get; }
    internal LdapMessage RequestingMessage { get; }
    public LdapControl[] Controls { get; }
    public int MessageId { get; }
    public int Type { get; }
    public bool Request { get; }
    internal RfcLdapMessage Asn1Object { get; }
    private string Name { get; }
    public string Tag { get; public set; }
    internal LdapMessage(int type, IRfcRequest op, LdapControl[] controls);
    protected internal LdapMessage(RfcLdapMessage message);
    [CompilerGeneratedAttribute]
public virtual DebugId get_DebugId();
    [CompilerGeneratedAttribute]
protected internal RfcLdapMessage get_Message();
    internal LdapMessage get_RequestingMessage();
    public virtual LdapControl[] get_Controls();
    public virtual int get_MessageId();
    public virtual int get_Type();
    public bool get_Request();
    internal RfcLdapMessage get_Asn1Object();
    private string get_Name();
    public string get_Tag();
    public void set_Tag(string value);
    internal LdapMessage Clone(string dn, string filter, bool reference);
    private LdapControl ControlFactory(string oid, bool critical, Byte[] valueRenamed);
    public virtual string ToString();
}
public abstract class Novell.Directory.Ldap.LdapMessageQueue : object {
    [CompilerGeneratedAttribute]
private DebugId <DebugId>k__BackingField;
    private MessageAgent _agent;
    public DebugId DebugId { get; }
    internal MessageAgent MessageAgent { get; }
    public Int32[] MessageIDs { get; }
    internal LdapMessageQueue(string myname, MessageAgent agent);
    [CompilerGeneratedAttribute]
public virtual DebugId get_DebugId();
    internal MessageAgent get_MessageAgent();
    public Int32[] get_MessageIDs();
    public LdapMessage GetResponse();
    public LdapMessage GetResponse(int msgid);
    private LdapMessage GetResponse(Nullable`1<int> msgid);
    public bool IsResponseReceived();
    public bool IsResponseReceived(int msgid);
    public bool IsComplete(int msgid);
}
public class Novell.Directory.Ldap.LdapModification : object {
    public static int Add;
    public static int Delete;
    public static int Replace;
    [CompilerGeneratedAttribute]
private LdapAttribute <Attribute>k__BackingField;
    [CompilerGeneratedAttribute]
private int <Op>k__BackingField;
    public LdapAttribute Attribute { get; }
    public int Op { get; }
    public LdapModification(int op, LdapAttribute attr);
    [CompilerGeneratedAttribute]
public LdapAttribute get_Attribute();
    [CompilerGeneratedAttribute]
public int get_Op();
}
public class Novell.Directory.Ldap.LdapModifyDnRequest : LdapMessage {
    [CompilerGeneratedAttribute]
private DebugId <DebugId>k__BackingField;
    public DebugId DebugId { get; }
    public string Dn { get; }
    public string NewRdn { get; }
    public bool DeleteOldRdn { get; }
    public string ParentDn { get; }
    public LdapModifyDnRequest(string dn, string newRdn, string newParentdn, bool deleteOldRdn, LdapControl[] cont);
    [CompilerGeneratedAttribute]
public virtual DebugId get_DebugId();
    public string get_Dn();
    public string get_NewRdn();
    public bool get_DeleteOldRdn();
    public string get_ParentDn();
    public virtual string ToString();
}
public class Novell.Directory.Ldap.LdapModifyRequest : LdapMessage {
    [CompilerGeneratedAttribute]
private DebugId <DebugId>k__BackingField;
    public DebugId DebugId { get; }
    public string Dn { get; }
    public LdapModifyRequest(string dn, LdapModification[] mods, LdapControl[] cont);
    [CompilerGeneratedAttribute]
public virtual DebugId get_DebugId();
    public string get_Dn();
    public LdapModification[] GetModifications();
    private static Asn1SequenceOf EncodeModifications(LdapModification[] mods);
    public virtual string ToString();
}
public class Novell.Directory.Ldap.LdapNameFormSchema : LdapSchemaElement {
    [CompilerGeneratedAttribute]
private string <ObjectClass>k__BackingField;
    [CompilerGeneratedAttribute]
private String[] <RequiredNamingAttributes>k__BackingField;
    [CompilerGeneratedAttribute]
private String[] <OptionalNamingAttributes>k__BackingField;
    public string ObjectClass { get; }
    public String[] RequiredNamingAttributes { get; }
    public String[] OptionalNamingAttributes { get; }
    public LdapNameFormSchema(String[] names, string oid, string description, bool obsolete, string objectClass, String[] required, String[] optional);
    public LdapNameFormSchema(string raw);
    [CompilerGeneratedAttribute]
public string get_ObjectClass();
    [CompilerGeneratedAttribute]
public String[] get_RequiredNamingAttributes();
    [CompilerGeneratedAttribute]
public String[] get_OptionalNamingAttributes();
    protected virtual string FormatString();
}
public class Novell.Directory.Ldap.LdapObjectClassSchema : LdapSchemaElement {
    public static int Abstract;
    public static int Structural;
    public static int Auxiliary;
    [CompilerGeneratedAttribute]
private String[] <Superiors>k__BackingField;
    [CompilerGeneratedAttribute]
private String[] <RequiredAttributes>k__BackingField;
    [CompilerGeneratedAttribute]
private String[] <OptionalAttributes>k__BackingField;
    [CompilerGeneratedAttribute]
private int <Type>k__BackingField;
    public String[] Superiors { get; }
    public String[] RequiredAttributes { get; }
    public String[] OptionalAttributes { get; }
    public int Type { get; }
    public LdapObjectClassSchema(String[] names, string oid, String[] superiors, string description, String[] required, String[] optional, int type, bool obsolete);
    public LdapObjectClassSchema(string raw);
    [CompilerGeneratedAttribute]
public String[] get_Superiors();
    [CompilerGeneratedAttribute]
public String[] get_RequiredAttributes();
    [CompilerGeneratedAttribute]
public String[] get_OptionalAttributes();
    [CompilerGeneratedAttribute]
public int get_Type();
    protected virtual string FormatString();
}
public class Novell.Directory.Ldap.LdapReferralException : LdapException {
    private String[] _referrals;
    [CompilerGeneratedAttribute]
private string <FailedReferral>k__BackingField;
    public string FailedReferral { get; public set; }
    public LdapReferralException(string message);
    public LdapReferralException(string message, Object[] arguments);
    public LdapReferralException(string message, Exception rootException);
    public LdapReferralException(string message, Object[] arguments, Exception rootException);
    public LdapReferralException(string message, int resultCode, string serverMessage);
    public LdapReferralException(string message, Object[] arguments, int resultCode, string serverMessage);
    public LdapReferralException(string message, int resultCode, string serverMessage, Exception rootException);
    public LdapReferralException(string message, Object[] arguments, int resultCode, string serverMessage, Exception rootException);
    [CompilerGeneratedAttribute]
public string get_FailedReferral();
    [CompilerGeneratedAttribute]
public void set_FailedReferral(string value);
    public String[] GetReferrals();
    internal void SetReferrals(String[] urls);
    public virtual string ToString();
}
public class Novell.Directory.Ldap.LdapResponse : LdapMessage {
    [CompilerGeneratedAttribute]
private DebugId <DebugId>k__BackingField;
    private InterThreadException _exception;
    [CompilerGeneratedAttribute]
private ReferralInfo <ActiveReferral>k__BackingField;
    public DebugId DebugId { get; }
    public string ErrorMessage { get; }
    public string MatchedDn { get; }
    public String[] Referrals { get; }
    public int ResultCode { get; }
    private LdapException ResultException { get; }
    public LdapControl[] Controls { get; }
    public int MessageId { get; }
    public int Type { get; }
    internal LdapException Exception { get; }
    internal ReferralInfo ActiveReferral { get; }
    public LdapResponse(InterThreadException ex, ReferralInfo activeReferral);
    internal LdapResponse(RfcLdapMessage message);
    public LdapResponse(int type);
    public LdapResponse(int type, int resultCode, string matchedDn, string serverMessage);
    [CompilerGeneratedAttribute]
public virtual DebugId get_DebugId();
    public string get_ErrorMessage();
    public string get_MatchedDn();
    public String[] get_Referrals();
    public int get_ResultCode();
    private LdapException get_ResultException();
    public virtual LdapControl[] get_Controls();
    public virtual int get_MessageId();
    public virtual int get_Type();
    internal LdapException get_Exception();
    [CompilerGeneratedAttribute]
internal ReferralInfo get_ActiveReferral();
    private static Asn1Sequence RfcResultFactory(int type, int resultCode, string matchedDn, string serverMessage);
    internal void ChkResultCode();
    internal bool HasException();
}
public class Novell.Directory.Ldap.LdapResponseQueue : LdapMessageQueue {
    internal LdapResponseQueue(MessageAgent agent);
}
public class Novell.Directory.Ldap.LdapSaslBindRequest : LdapMessage {
    [CompilerGeneratedAttribute]
private DebugId <DebugId>k__BackingField;
    public DebugId DebugId { get; }
    public LdapSaslBindRequest(int version, string mechanism, LdapControl[] cont);
    public LdapSaslBindRequest(int version, string mechanism, LdapControl[] cont, Byte[] credentials);
    [CompilerGeneratedAttribute]
public virtual DebugId get_DebugId();
    public virtual string ToString();
}
public class Novell.Directory.Ldap.LdapSchema : LdapEntry {
    internal static int Attribute;
    internal static int ObjectClass;
    internal static int Syntax;
    internal static int NameForm;
    internal static int Ditcontent;
    internal static int Ditstructure;
    internal static int Matching;
    internal static int MatchingUse;
    internal static String[] SchemaTypeNames;
    private Dictionary`2<string, LdapAttributeSchema> _attributeIdTable;
    private Dictionary`2<string, LdapAttributeSchema> _attributeNameTable;
    private Dictionary`2<string, LdapObjectClassSchema> _objectClassIdTable;
    private Dictionary`2<string, LdapObjectClassSchema> _objectClassNameTable;
    private Dictionary`2<string, LdapSyntaxSchema> _syntaxIdTable;
    private Dictionary`2<string, LdapSyntaxSchema> _syntaxNameTable;
    private Dictionary`2<string, LdapNameFormSchema> _nameFormIdTable;
    private Dictionary`2<string, LdapNameFormSchema> _nameFormNameTable;
    private Dictionary`2<string, LdapDitContentRuleSchema> _ditcontentIdTable;
    private Dictionary`2<string, LdapDitContentRuleSchema> _ditcontentNameTable;
    private Dictionary`2<string, LdapDitStructureRuleSchema> _ditstructureIdTable;
    private Dictionary`2<string, LdapDitStructureRuleSchema> _ditstructureNameTable;
    private Dictionary`2<string, LdapMatchingRuleSchema> _matchingIdTable;
    private Dictionary`2<string, LdapMatchingRuleSchema> _matchingNameTable;
    private Dictionary`2<string, LdapMatchingRuleUseSchema> _matchingUseIdTable;
    private Dictionary`2<string, LdapMatchingRuleUseSchema> _matchingUseNameTable;
    public IEnumerable`1<LdapAttributeSchema> AttributeSchemas { get; }
    public IEnumerable`1<LdapDitContentRuleSchema> DitContentRuleSchemas { get; }
    public IEnumerable`1<LdapDitStructureRuleSchema> DitStructureRuleSchemas { get; }
    public IEnumerable`1<LdapMatchingRuleSchema> MatchingRuleSchemas { get; }
    public IEnumerable`1<LdapMatchingRuleUseSchema> MatchingRuleUseSchemas { get; }
    public IEnumerable`1<LdapNameFormSchema> NameFormSchemas { get; }
    public IEnumerable`1<LdapObjectClassSchema> ObjectClassSchemas { get; }
    public IEnumerable`1<LdapSchemaElement> SyntaxSchemas { get; }
    public IEnumerable`1<string> AttributeNames { get; }
    public IEnumerable`1<string> DitContentRuleNames { get; }
    public IEnumerable`1<string> DitStructureRuleNames { get; }
    public IEnumerable`1<string> MatchingRuleNames { get; }
    public IEnumerable`1<string> MatchingRuleUseNames { get; }
    public IEnumerable`1<string> NameFormNames { get; }
    public IEnumerable`1<string> ObjectClassNames { get; }
    public LdapSchema(LdapEntry ent);
    private static LdapSchema();
    public IEnumerable`1<LdapAttributeSchema> get_AttributeSchemas();
    public IEnumerable`1<LdapDitContentRuleSchema> get_DitContentRuleSchemas();
    public IEnumerable`1<LdapDitStructureRuleSchema> get_DitStructureRuleSchemas();
    public IEnumerable`1<LdapMatchingRuleSchema> get_MatchingRuleSchemas();
    public IEnumerable`1<LdapMatchingRuleUseSchema> get_MatchingRuleUseSchemas();
    public IEnumerable`1<LdapNameFormSchema> get_NameFormSchemas();
    public IEnumerable`1<LdapObjectClassSchema> get_ObjectClassSchemas();
    public IEnumerable`1<LdapSchemaElement> get_SyntaxSchemas();
    public IEnumerable`1<string> get_AttributeNames();
    public IEnumerable`1<string> get_DitContentRuleNames();
    public IEnumerable`1<string> get_DitStructureRuleNames();
    public IEnumerable`1<string> get_MatchingRuleNames();
    public IEnumerable`1<string> get_MatchingRuleUseNames();
    public IEnumerable`1<string> get_NameFormNames();
    public IEnumerable`1<string> get_ObjectClassNames();
    private void AddElement(Dictionary`2<string, T> idTable, Dictionary`2<string, T> nameTable, T element);
    private T GetSchemaElement(Dictionary`2<string, T> idTable, Dictionary`2<string, T> nameTable, string key);
    public LdapAttributeSchema GetAttributeSchema(string name);
    public LdapDitContentRuleSchema GetDitContentRuleSchema(string name);
    public LdapDitStructureRuleSchema GetDitStructureRuleSchema(string name);
    public LdapDitStructureRuleSchema GetDitStructureRuleSchema(int id);
    public LdapMatchingRuleSchema GetMatchingRuleSchema(string name);
    public LdapMatchingRuleUseSchema GetMatchingRuleUseSchema(string name);
    public LdapNameFormSchema GetNameFormSchema(string name);
    public LdapObjectClassSchema GetObjectClassSchema(string name);
    public LdapSyntaxSchema GetSyntaxSchema(string oid);
}
public abstract class Novell.Directory.Ldap.LdapSchemaElement : LdapAttribute {
    private Dictionary`2<string, AttributeQualifier> _hashQualifier;
    [CompilerGeneratedAttribute]
private String[] <Names>k__BackingField;
    private string _oid;
    [CompilerGeneratedAttribute]
private string <Description>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <Obsolete>k__BackingField;
    protected String[] Names { get; protected set; }
    public string Description { get; public set; }
    public string Id { get; public set; }
    public IEnumerable`1<string> QualifierNames { get; }
    public bool Obsolete { get; public set; }
    protected internal LdapSchemaElement(string attrName);
    [CompilerGeneratedAttribute]
protected String[] get_Names();
    [CompilerGeneratedAttribute]
protected void set_Names(String[] value);
    public String[] GetNames();
    [CompilerGeneratedAttribute]
public string get_Description();
    [CompilerGeneratedAttribute]
public void set_Description(string value);
    public string get_Id();
    public void set_Id(string value);
    public IEnumerable`1<string> get_QualifierNames();
    [CompilerGeneratedAttribute]
public bool get_Obsolete();
    [CompilerGeneratedAttribute]
public void set_Obsolete(bool value);
    public String[] GetQualifier(string name);
    public virtual string ToString();
    protected abstract virtual string FormatString();
    public void SetQualifier(string name, String[] values);
    public virtual void AddValue(string attrString);
    public virtual void AddValue(Byte[] attrBytes);
    public virtual void RemoveValue(string valueRenamed);
    public virtual void RemoveValue(Byte[] valueRenamed);
}
public class Novell.Directory.Ldap.LdapSearchConstraints : LdapConstraints {
    public static int DerefNever;
    public static int DerefSearching;
    public static int DerefFinding;
    public static int DerefAlways;
    [CompilerGeneratedAttribute]
private DebugId <DebugId>k__BackingField;
    [CompilerGeneratedAttribute]
private int <BatchSize>k__BackingField;
    [CompilerGeneratedAttribute]
private int <Dereference>k__BackingField;
    [CompilerGeneratedAttribute]
private int <MaxResults>k__BackingField;
    [CompilerGeneratedAttribute]
private int <ServerTimeLimit>k__BackingField;
    public DebugId DebugId { get; }
    public int BatchSize { get; public set; }
    public int Dereference { get; public set; }
    public int MaxResults { get; public set; }
    public int ServerTimeLimit { get; public set; }
    public LdapSearchConstraints(LdapConstraints cons);
    public LdapSearchConstraints(int msLimit, int serverTimeLimit, int dereference, int maxResults, bool doReferrals, int batchSize, ILdapReferralHandler handler, int hopLimit);
    [CompilerGeneratedAttribute]
public virtual DebugId get_DebugId();
    [CompilerGeneratedAttribute]
public int get_BatchSize();
    [CompilerGeneratedAttribute]
public void set_BatchSize(int value);
    [CompilerGeneratedAttribute]
public int get_Dereference();
    [CompilerGeneratedAttribute]
public void set_Dereference(int value);
    [CompilerGeneratedAttribute]
public int get_MaxResults();
    [CompilerGeneratedAttribute]
public void set_MaxResults(int value);
    [CompilerGeneratedAttribute]
public int get_ServerTimeLimit();
    [CompilerGeneratedAttribute]
public void set_ServerTimeLimit(int value);
}
public class Novell.Directory.Ldap.LdapSearchQueue : LdapMessageQueue {
    internal LdapSearchQueue(MessageAgent agent);
}
public class Novell.Directory.Ldap.LdapSearchRequest : LdapMessage {
    [CompilerGeneratedAttribute]
private DebugId <DebugId>k__BackingField;
    public static int And;
    public static int Or;
    public static int Not;
    public static int EqualityMatch;
    public static int Substrings;
    public static int GreaterOrEqual;
    public static int LessOrEqual;
    public static int Present;
    public static int ApproxMatch;
    public static int ExtensibleMatch;
    public static int Initial;
    public static int Any;
    public static int Final;
    public DebugId DebugId { get; }
    public string Dn { get; }
    public int Scope { get; }
    public int Dereference { get; }
    public int MaxResults { get; }
    public int ServerTimeLimit { get; }
    public bool TypesOnly { get; }
    public String[] Attributes { get; }
    public string StringFilter { get; }
    private RfcFilter RfcFilter { get; }
    public IEnumerable`1<object> SearchFilter { get; }
    public LdapSearchRequest(string baseRenamed, int scope, string filter, String[] attrs, int dereference, int maxResults, int serverTimeLimit, bool typesOnly, LdapControl[] cont);
    public LdapSearchRequest(string baseRenamed, int scope, RfcFilter filter, String[] attrs, int dereference, int maxResults, int serverTimeLimit, bool typesOnly, LdapControl[] cont);
    [CompilerGeneratedAttribute]
public virtual DebugId get_DebugId();
    public string get_Dn();
    public int get_Scope();
    public int get_Dereference();
    public int get_MaxResults();
    public int get_ServerTimeLimit();
    public bool get_TypesOnly();
    public String[] get_Attributes();
    public string get_StringFilter();
    private RfcFilter get_RfcFilter();
    public IEnumerable`1<object> get_SearchFilter();
}
public class Novell.Directory.Ldap.LdapSearchResult : LdapMessage {
    [CompilerGeneratedAttribute]
private DebugId <DebugId>k__BackingField;
    private LdapEntry _entry;
    public DebugId DebugId { get; }
    public LdapEntry Entry { get; }
    internal LdapSearchResult(RfcLdapMessage message);
    public LdapSearchResult(LdapEntry entry, LdapControl[] cont);
    [CompilerGeneratedAttribute]
public virtual DebugId get_DebugId();
    public LdapEntry get_Entry();
    public virtual string ToString();
}
public class Novell.Directory.Ldap.LdapSearchResultReference : LdapMessage {
    [CompilerGeneratedAttribute]
private DebugId <DebugId>k__BackingField;
    private String[] _srefs;
    public DebugId DebugId { get; }
    public String[] Referrals { get; }
    internal LdapSearchResultReference(RfcLdapMessage message);
    [CompilerGeneratedAttribute]
public virtual DebugId get_DebugId();
    public String[] get_Referrals();
}
public class Novell.Directory.Ldap.LdapSearchResults : object {
    private int _batchSize;
    private LdapSearchConstraints _cons;
    private List`1<object> _entries;
    private LdapSearchQueue _queue;
    private List`1<String[]> _references;
    private LdapConnection _conn;
    private bool _completed;
    private int _entryCount;
    private int _entryIndex;
    private int _referenceCount;
    private int _referenceIndex;
    private List`1<object> _referralConn;
    [CompilerGeneratedAttribute]
private LdapControl[] <ResponseControls>k__BackingField;
    public LdapControl[] ResponseControls { get; private set; }
    internal LdapSearchResults(LdapConnection conn, LdapSearchQueue queue, LdapSearchConstraints cons);
    [CompilerGeneratedAttribute]
public sealed virtual LdapControl[] get_ResponseControls();
    [CompilerGeneratedAttribute]
private void set_ResponseControls(LdapControl[] value);
    [AsyncStateMachineAttribute("Novell.Directory.Ldap.LdapSearchResults/<HasMoreAsync>d__17")]
public sealed virtual Task`1<bool> HasMoreAsync();
    [AsyncStateMachineAttribute("Novell.Directory.Ldap.LdapSearchResults/<NextAsync>d__18")]
public sealed virtual Task`1<LdapEntry> NextAsync();
    [AsyncIteratorStateMachineAttribute("Novell.Directory.Ldap.LdapSearchResults/<GetAsyncEnumerator>d__19")]
public sealed virtual IAsyncEnumerator`1<LdapEntry> GetAsyncEnumerator(CancellationToken cancellationToken);
    public List`1<object> GetReferralConnections();
    [AsyncStateMachineAttribute("Novell.Directory.Ldap.LdapSearchResults/<AbandonAsync>d__21")]
internal Task AbandonAsync();
    [AsyncStateMachineAttribute("Novell.Directory.Ldap.LdapSearchResults/<GetBatchOfResultsAsync>d__22")]
private Task`1<bool> GetBatchOfResultsAsync();
    [AsyncStateMachineAttribute("Novell.Directory.Ldap.LdapSearchResults/<ResetVectorsAsync>d__23")]
private Task ResetVectorsAsync();
}
public class Novell.Directory.Ldap.LdapSyntaxSchema : LdapSchemaElement {
    public LdapSyntaxSchema(string oid, string description);
    public LdapSyntaxSchema(string raw);
    protected virtual string FormatString();
}
public class Novell.Directory.Ldap.LdapUnbindRequest : LdapMessage {
    [CompilerGeneratedAttribute]
private DebugId <DebugId>k__BackingField;
    public DebugId DebugId { get; }
    public LdapUnbindRequest(LdapControl[] cont);
    [CompilerGeneratedAttribute]
public virtual DebugId get_DebugId();
}
public class Novell.Directory.Ldap.LdapUrl : object {
    private static int DefaultScope;
    private bool _ipV6;
    private string _dn;
    private int _port;
    [CompilerGeneratedAttribute]
private String[] <AttributeArray>k__BackingField;
    [CompilerGeneratedAttribute]
private String[] <Extensions>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Filter>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Host>k__BackingField;
    [CompilerGeneratedAttribute]
private int <Scope>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <Secure>k__BackingField;
    public String[] AttributeArray { get; private set; }
    public IEnumerable`1<string> Attributes { get; }
    public String[] Extensions { get; private set; }
    public string Filter { get; private set; }
    public string Host { get; private set; }
    public int Port { get; }
    public int Scope { get; private set; }
    public bool Secure { get; private set; }
    public LdapUrl(string url);
    public LdapUrl(string host, int port, string dn);
    public LdapUrl(string host, int port, string dn, String[] attrNames, int scope, string filter, String[] extensions);
    public LdapUrl(string host, int port, string dn, String[] attrNames, int scope, string filter, String[] extensions, bool secure);
    [CompilerGeneratedAttribute]
public String[] get_AttributeArray();
    [CompilerGeneratedAttribute]
private void set_AttributeArray(String[] value);
    public IEnumerable`1<string> get_Attributes();
    [CompilerGeneratedAttribute]
public String[] get_Extensions();
    [CompilerGeneratedAttribute]
private void set_Extensions(String[] value);
    [CompilerGeneratedAttribute]
public string get_Filter();
    [CompilerGeneratedAttribute]
private void set_Filter(string value);
    [CompilerGeneratedAttribute]
public string get_Host();
    [CompilerGeneratedAttribute]
private void set_Host(string value);
    public int get_Port();
    [CompilerGeneratedAttribute]
public int get_Scope();
    [CompilerGeneratedAttribute]
private void set_Scope(int value);
    [CompilerGeneratedAttribute]
public bool get_Secure();
    [CompilerGeneratedAttribute]
private void set_Secure(bool value);
    public object Clone();
    public static string Decode(string urlEncoded);
    public static string Encode(string toEncode);
    public string GetDn();
    internal void SetDn(string dn);
    public virtual string ToString();
    private String[] ParseList(string listStr, char delimiter, int listStart, int listEnd);
    private void ParseUrl(string url);
}
public class Novell.Directory.Ldap.LdapWhoAmIOperation : LdapExtendedOperation {
    [CompilerGeneratedAttribute]
private DebugId <DebugId>k__BackingField;
    public DebugId DebugId { get; }
    [CompilerGeneratedAttribute]
public virtual DebugId get_DebugId();
}
public class Novell.Directory.Ldap.LdapWhoAmIResponse : LdapExtendedResponse {
    [CompilerGeneratedAttribute]
private DebugId <DebugId>k__BackingField;
    [CompilerGeneratedAttribute]
private string <AuthzId>k__BackingField;
    [CompilerGeneratedAttribute]
private AuthzType <AuthzIdType>k__BackingField;
    [CompilerGeneratedAttribute]
private string <AuthzIdWithoutType>k__BackingField;
    public DebugId DebugId { get; }
    public string AuthzId { get; }
    public AuthzType AuthzIdType { get; }
    public string AuthzIdWithoutType { get; }
    public LdapWhoAmIResponse(RfcLdapMessage message);
    [CompilerGeneratedAttribute]
public virtual DebugId get_DebugId();
    [CompilerGeneratedAttribute]
public string get_AuthzId();
    [CompilerGeneratedAttribute]
public AuthzType get_AuthzIdType();
    [CompilerGeneratedAttribute]
public string get_AuthzIdWithoutType();
}
public class Novell.Directory.Ldap.LocalCertificateSelectionCallback : MulticastDelegate {
    public LocalCertificateSelectionCallback(object object, IntPtr method);
    public virtual X509Certificate Invoke(object sender, string targetHost, X509CertificateCollection localCertificates, X509Certificate remoteCertificate, String[] acceptableIssuers);
    public virtual IAsyncResult BeginInvoke(object sender, string targetHost, X509CertificateCollection localCertificates, X509Certificate remoteCertificate, String[] acceptableIssuers, AsyncCallback callback, object object);
    public virtual X509Certificate EndInvoke(IAsyncResult result);
}
[ExtensionAttribute]
public static class Novell.Directory.Ldap.Logger : object {
    private static ILoggerFactory _loggerFactory;
    [CompilerGeneratedAttribute]
private static ILogger <Log>k__BackingField;
    public static ILoggerFactory Factory { get; public set; }
    public static ILogger Log { get; private set; }
    private static Logger();
    public static ILoggerFactory get_Factory();
    public static void set_Factory(ILoggerFactory value);
    [CompilerGeneratedAttribute]
public static ILogger get_Log();
    [CompilerGeneratedAttribute]
private static void set_Log(ILogger value);
    [ExtensionAttribute]
public static void LogWarning(ILogger logger, string message, Exception ex);
    private static void Init();
}
internal class Novell.Directory.Ldap.Message : object {
    private string _stackTraceCreation;
    private bool _acceptReplies;
    private BindProperties _bindprops;
    private Connection _conn;
    private int _mslimit;
    private Queue`1<object> _replies;
    private string _stackTraceCleanup;
    private ThreadClass _timer;
    private bool _waitForReplyRenamedField;
    [CompilerGeneratedAttribute]
private int <MessageId>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <Complete>k__BackingField;
    [CompilerGeneratedAttribute]
private LdapMessage <Request>k__BackingField;
    [CompilerGeneratedAttribute]
private MessageAgent <MessageAgent>k__BackingField;
    internal int Count { get; }
    unknown MessageAgent Agent {internal set; }
    internal int MessageType { get; }
    internal int MessageId { get; }
    internal bool Complete { get; private set; }
    internal object Reply { get; }
    internal LdapMessage Request { get; private set; }
    internal bool BindRequest { get; }
    internal MessageAgent MessageAgent { get; private set; }
    internal Message(LdapMessage msg, int mslimit, Connection conn, MessageAgent agent, BindProperties bindprops);
    internal int get_Count();
    internal void set_Agent(MessageAgent value);
    internal int get_MessageType();
    [CompilerGeneratedAttribute]
internal int get_MessageId();
    [CompilerGeneratedAttribute]
internal bool get_Complete();
    [CompilerGeneratedAttribute]
private void set_Complete(bool value);
    internal object get_Reply();
    [CompilerGeneratedAttribute]
internal LdapMessage get_Request();
    [CompilerGeneratedAttribute]
private void set_Request(LdapMessage value);
    internal bool get_BindRequest();
    [CompilerGeneratedAttribute]
internal MessageAgent get_MessageAgent();
    [CompilerGeneratedAttribute]
private void set_MessageAgent(MessageAgent value);
    internal bool HasReplies();
    internal object WaitForReply();
    internal bool AcceptsReplies();
    [AsyncStateMachineAttribute("Novell.Directory.Ldap.Message/<SendMessageAsync>d__38")]
internal Task SendMessageAsync();
    internal void Abandon(LdapConstraints cons, InterThreadException informUserEx);
    private void Cleanup();
    internal void PutReply(RfcLdapMessage message);
    private void StopTimer();
    private void SleepersAwake();
}
internal class Novell.Directory.Ldap.MessageAgent : object {
    [CompilerGeneratedAttribute]
private DebugId <DebugId>k__BackingField;
    private int _indexLastRead;
    private MessageVector _messages;
    public DebugId DebugId { get; }
    internal Int32[] MessageIDs { get; }
    internal int Count { get; }
    [CompilerGeneratedAttribute]
public DebugId get_DebugId();
    internal Int32[] get_MessageIDs();
    internal int get_Count();
    private Object[] RemoveAll();
    internal void SleepersAwake(bool all);
    internal bool IsResponseReceived();
    internal bool IsResponseReceived(int msgId);
    internal void Abandon(int msgId, LdapConstraints cons);
    internal void AbandonAll();
    internal bool IsComplete(int msgid);
    internal Task SendMessageAsync(Connection conn, LdapMessage msg, int timeOut, BindProperties bindProps);
    internal object GetLdapMessage(Nullable`1<int> msgId);
}
[DefaultMemberAttribute("Item")]
internal class Novell.Directory.Ldap.MessageVector : object {
    private ArrayList _arrayList;
    public int Count { get; }
    public object Item { get; }
    internal MessageVector(int cap);
    internal Object[] RemoveAll();
    internal Message FindMessageById(int msgId);
    public int Add(object message);
    public void Remove(object message);
    public int get_Count();
    public object get_Item(int index);
    public void RemoveAt(int index);
    public Object[] ToArray();
    public void Clear();
}
public class Novell.Directory.Ldap.RemoteCertificateValidationCallback : MulticastDelegate {
    public RemoteCertificateValidationCallback(object object, IntPtr method);
    public virtual bool Invoke(object sender, X509Certificate certificate, X509Chain chain, SslPolicyErrors sslPolicyErrors);
    public virtual IAsyncResult BeginInvoke(object sender, X509Certificate certificate, X509Chain chain, SslPolicyErrors sslPolicyErrors, AsyncCallback callback, object object);
    public virtual bool EndInvoke(IAsyncResult result);
}
public interface Novell.Directory.Ldap.Rfc2251.IRfcRequest {
    public abstract virtual IRfcRequest DupRequest(string baseRenamed, string filter, bool reference);
    public abstract virtual string GetRequestDn();
}
public interface Novell.Directory.Ldap.Rfc2251.IRfcResponse {
    public abstract virtual Asn1Enumerated GetResultCode();
    public abstract virtual RfcLdapDn GetMatchedDn();
    public abstract virtual RfcLdapString GetErrorMessage();
    public abstract virtual RfcReferral GetReferral();
}
internal class Novell.Directory.Ldap.Rfc2251.RfcAbandonRequest : RfcMessageId {
    public RfcAbandonRequest(int msgId);
    public sealed virtual IRfcRequest DupRequest(string baseRenamed, string filter, bool reference);
    public sealed virtual string GetRequestDn();
    public virtual Asn1Identifier GetIdentifier();
}
public class Novell.Directory.Ldap.Rfc2251.RfcAddRequest : Asn1Sequence {
    public RfcAttributeList Attributes { get; }
    public RfcAddRequest(RfcLdapDn entry, RfcAttributeList attributes);
    internal RfcAddRequest(Asn1Object[] origRequest, string baseRenamed);
    public RfcAttributeList get_Attributes();
    public sealed virtual IRfcRequest DupRequest(string baseRenamed, string filter, bool request);
    public sealed virtual string GetRequestDn();
    public virtual Asn1Identifier GetIdentifier();
}
public class Novell.Directory.Ldap.Rfc2251.RfcAddResponse : RfcLdapResult {
    public RfcAddResponse(IAsn1Decoder dec, Stream inRenamed, int len);
    public RfcAddResponse(Asn1Enumerated resultCode, RfcLdapDn matchedDn, RfcLdapString errorMessage, RfcReferral referral);
    public virtual Asn1Identifier GetIdentifier();
}
public class Novell.Directory.Ldap.Rfc2251.RfcAssertionValue : Asn1OctetString {
    public RfcAssertionValue(Byte[] valueRenamed);
}
public class Novell.Directory.Ldap.Rfc2251.RfcAttributeDescription : RfcLdapString {
    public RfcAttributeDescription(string s);
    public RfcAttributeDescription(IAsn1Decoder dec, Stream inRenamed, int len);
}
public class Novell.Directory.Ldap.Rfc2251.RfcAttributeDescriptionList : Asn1SequenceOf {
    public RfcAttributeDescriptionList(int size);
    public RfcAttributeDescriptionList(String[] attrs);
}
public class Novell.Directory.Ldap.Rfc2251.RfcAttributeList : Asn1SequenceOf {
    public RfcAttributeList(int size);
}
public class Novell.Directory.Ldap.Rfc2251.RfcAttributeTypeAndValues : Asn1Sequence {
    public RfcAttributeTypeAndValues(RfcAttributeDescription type, Asn1SetOf vals);
}
public class Novell.Directory.Ldap.Rfc2251.RfcAttributeValue : Asn1OctetString {
    public RfcAttributeValue(string valueRenamed);
    public RfcAttributeValue(Byte[] valueRenamed);
}
public class Novell.Directory.Ldap.Rfc2251.RfcAttributeValueAssertion : Asn1Sequence {
    public string AttributeDescription { get; }
    public Byte[] AssertionValue { get; }
    public RfcAttributeValueAssertion(RfcAttributeDescription ad, RfcAssertionValue av);
    public string get_AttributeDescription();
    public Byte[] get_AssertionValue();
}
public class Novell.Directory.Ldap.Rfc2251.RfcAuthenticationChoice : Asn1Choice {
    public RfcAuthenticationChoice(Asn1Tagged choice);
    public RfcAuthenticationChoice(string mechanism, Byte[] credentials);
}
public class Novell.Directory.Ldap.Rfc2251.RfcBindRequest : Asn1Sequence {
    private static Asn1Identifier Id;
    public Asn1Integer Version { get; public set; }
    public RfcLdapDn Name { get; public set; }
    public RfcAuthenticationChoice AuthenticationChoice { get; public set; }
    public RfcBindRequest(Asn1Integer version, RfcLdapDn name, RfcAuthenticationChoice auth);
    public RfcBindRequest(int version, string dn, string mechanism, Byte[] credentials);
    internal RfcBindRequest(Asn1Object[] origRequest, string baseRenamed);
    private static RfcBindRequest();
    public Asn1Integer get_Version();
    public void set_Version(Asn1Integer value);
    public RfcLdapDn get_Name();
    public void set_Name(RfcLdapDn value);
    public RfcAuthenticationChoice get_AuthenticationChoice();
    public void set_AuthenticationChoice(RfcAuthenticationChoice value);
    public sealed virtual IRfcRequest DupRequest(string baseRenamed, string filter, bool request);
    public sealed virtual string GetRequestDn();
    public virtual Asn1Identifier GetIdentifier();
}
public class Novell.Directory.Ldap.Rfc2251.RfcBindResponse : Asn1Sequence {
    public Asn1OctetString ServerSaslCreds { get; }
    public RfcBindResponse(IAsn1Decoder dec, Stream inRenamed, int len);
    public Asn1OctetString get_ServerSaslCreds();
    public sealed virtual Asn1Enumerated GetResultCode();
    public sealed virtual RfcLdapDn GetMatchedDn();
    public sealed virtual RfcLdapString GetErrorMessage();
    public sealed virtual RfcReferral GetReferral();
    public virtual Asn1Identifier GetIdentifier();
}
public class Novell.Directory.Ldap.Rfc2251.RfcCompareRequest : Asn1Sequence {
    public RfcAttributeValueAssertion AttributeValueAssertion { get; }
    public RfcCompareRequest(RfcLdapDn entry, RfcAttributeValueAssertion ava);
    internal RfcCompareRequest(Asn1Object[] origRequest, string baseRenamed);
    public RfcAttributeValueAssertion get_AttributeValueAssertion();
    public sealed virtual IRfcRequest DupRequest(string baseRenamed, string filter, bool request);
    public sealed virtual string GetRequestDn();
    public virtual Asn1Identifier GetIdentifier();
}
public class Novell.Directory.Ldap.Rfc2251.RfcCompareResponse : RfcLdapResult {
    public RfcCompareResponse(IAsn1Decoder dec, Stream inRenamed, int len);
    public RfcCompareResponse(Asn1Enumerated resultCode, RfcLdapDn matchedDn, RfcLdapString errorMessage, RfcReferral referral);
    public virtual Asn1Identifier GetIdentifier();
}
public class Novell.Directory.Ldap.Rfc2251.RfcControl : Asn1Sequence {
    public Asn1OctetString ControlType { get; }
    public Asn1Boolean Criticality { get; }
    public Asn1OctetString ControlValue { get; public set; }
    public RfcControl(RfcLdapOid controlType);
    public RfcControl(RfcLdapOid controlType, Asn1Boolean criticality);
    public RfcControl(RfcLdapOid controlType, Asn1Boolean criticality, Asn1OctetString controlValue);
    public RfcControl(IAsn1Decoder dec, Stream inRenamed, int len);
    public RfcControl(Asn1Sequence seqObj);
    public Asn1OctetString get_ControlType();
    public Asn1Boolean get_Criticality();
    public Asn1OctetString get_ControlValue();
    public void set_ControlValue(Asn1OctetString value);
}
public class Novell.Directory.Ldap.Rfc2251.RfcControls : Asn1SequenceOf {
    public static int Controls;
    public RfcControls(IAsn1Decoder dec, Stream inRenamed, int len);
    public void Add(RfcControl control);
    public void set_Renamed(int index, RfcControl control);
    public virtual Asn1Identifier GetIdentifier();
}
public class Novell.Directory.Ldap.Rfc2251.RfcDelRequest : RfcLdapDn {
    public RfcDelRequest(string dn);
    public RfcDelRequest(Byte[] dn);
    public sealed virtual IRfcRequest DupRequest(string baseRenamed, string filter, bool request);
    public sealed virtual string GetRequestDn();
    public virtual Asn1Identifier GetIdentifier();
}
public class Novell.Directory.Ldap.Rfc2251.RfcDelResponse : RfcLdapResult {
    public RfcDelResponse(IAsn1Decoder dec, Stream inRenamed, int len);
    public RfcDelResponse(Asn1Enumerated resultCode, RfcLdapDn matchedDn, RfcLdapString errorMessage, RfcReferral referral);
    public virtual Asn1Identifier GetIdentifier();
}
public class Novell.Directory.Ldap.Rfc2251.RfcExtendedRequest : Asn1Sequence {
    public static int RequestName;
    public static int RequestValue;
    public RfcExtendedRequest(RfcLdapOid requestName);
    public RfcExtendedRequest(RfcLdapOid requestName, Asn1OctetString requestValue);
    public RfcExtendedRequest(Asn1Object[] origRequest);
    public sealed virtual IRfcRequest DupRequest(string baseRenamed, string filter, bool request);
    public sealed virtual string GetRequestDn();
    public virtual Asn1Identifier GetIdentifier();
}
public class Novell.Directory.Ldap.Rfc2251.RfcExtendedResponse : Asn1Sequence {
    public static int ResponseNameTag;
    public static int ResponseTag;
    private int _referralIndex;
    private int _responseIndex;
    private int _responseNameIndex;
    public RfcLdapOid ResponseName { get; }
    public Asn1OctetString Response { get; }
    public RfcExtendedResponse(IAsn1Decoder dec, Stream inRenamed, int len);
    public RfcLdapOid get_ResponseName();
    public Asn1OctetString get_Response();
    public sealed virtual Asn1Enumerated GetResultCode();
    public sealed virtual RfcLdapDn GetMatchedDn();
    public sealed virtual RfcLdapString GetErrorMessage();
    public sealed virtual RfcReferral GetReferral();
    public virtual Asn1Identifier GetIdentifier();
}
public class Novell.Directory.Ldap.Rfc2251.RfcFilter : Asn1Choice {
    public static int And;
    public static int Or;
    public static int Not;
    public static int EqualityMatch;
    public static int Substrings;
    public static int GreaterOrEqual;
    public static int LessOrEqual;
    public static int Present;
    public static int ApproxMatch;
    public static int ExtensibleMatch;
    public static int Initial;
    public static int Any;
    public static int Final;
    private Stack _filterStack;
    private bool _finalFound;
    private FilterTokenizer _ft;
    public RfcFilter(string filter);
    private Asn1Tagged Parse(string filterExpr);
    private Asn1Tagged ParseFilter();
    private Asn1Tagged ParseFilterComp();
    private Asn1SetOf ParseFilterList();
    internal static int Hex2Int(char c);
    private Byte[] UnescapeString(string stringRenamed);
    private void AddObject(Asn1Object current);
    public void StartSubstrings(string attrName);
    public void AddSubstring(int type, Byte[] valueRenamed);
    public void EndSubstrings();
    public void AddAttributeValueAssertion(int rfcType, string attrName, Byte[] valueRenamed);
    public void AddPresent(string attrName);
    public void AddExtensibleMatch(string matchingRule, string attrName, Byte[] valueRenamed, bool useDnMatching);
    public void StartNestedFilter(int rfcType);
    public void EndNestedFilter(int rfcType);
    public IEnumerable`1<object> GetFilterEnumerable();
    public string FilterToString();
    private static void StringFilter(IEnumerable`1<object> filterEnumerable, StringBuilder filter);
    private static string ByteString(Byte[] valueRenamed);
    [IteratorStateMachineAttribute("Novell.Directory.Ldap.Rfc2251.RfcFilter/<FilterEnumerable>d__37")]
private static IEnumerable`1<object> FilterEnumerable(Asn1Tagged root);
}
public class Novell.Directory.Ldap.Rfc2251.RfcIntermediateResponse : Asn1Sequence {
    public static int TagResponseName;
    public static int TagResponse;
    private int _mResponseNameIndex;
    private int _mResponseValueIndex;
    public RfcIntermediateResponse(IAsn1Decoder dec, Stream inRenamed, int len);
    public sealed virtual Asn1Enumerated GetResultCode();
    public sealed virtual RfcLdapDn GetMatchedDn();
    public sealed virtual RfcLdapString GetErrorMessage();
    public sealed virtual RfcReferral GetReferral();
    public RfcLdapOid GetResponseName();
    public Asn1OctetString GetResponse();
    public virtual Asn1Identifier GetIdentifier();
}
public class Novell.Directory.Ldap.Rfc2251.RfcLdapDn : RfcLdapString {
    public RfcLdapDn(string s);
    public RfcLdapDn(Byte[] s);
}
public class Novell.Directory.Ldap.Rfc2251.RfcLdapMessage : Asn1Sequence {
    private Asn1Object _op;
    private RfcControls _controls;
    [CompilerGeneratedAttribute]
private LdapMessage <RequestingMessage>k__BackingField;
    public int MessageId { get; }
    public int Type { get; }
    public Asn1Object Response { get; }
    public RfcControls Controls { get; }
    public string RequestDn { get; }
    public LdapMessage RequestingMessage { get; public set; }
    internal RfcLdapMessage(Asn1Object[] origContent, IRfcRequest origRequest, string dn, string filter, bool reference);
    public RfcLdapMessage(IRfcRequest op);
    public RfcLdapMessage(IRfcRequest op, RfcControls controls);
    public RfcLdapMessage(Asn1Sequence op);
    public RfcLdapMessage(Asn1Sequence op, RfcControls controls);
    public RfcLdapMessage(IAsn1Decoder dec, Stream inRenamed, int len);
    public int get_MessageId();
    public int get_Type();
    public Asn1Object get_Response();
    public RfcControls get_Controls();
    public string get_RequestDn();
    [CompilerGeneratedAttribute]
public LdapMessage get_RequestingMessage();
    [CompilerGeneratedAttribute]
public void set_RequestingMessage(LdapMessage value);
    public IRfcRequest GetRequest();
    public bool IsRequest();
    public object DupMessage(string dn, string filter, bool reference);
}
public class Novell.Directory.Ldap.Rfc2251.RfcLdapOid : Asn1OctetString {
    public RfcLdapOid(string s);
    public RfcLdapOid(Byte[] s);
}
public class Novell.Directory.Ldap.Rfc2251.RfcLdapResult : Asn1Sequence {
    public static int Referral;
    public RfcLdapResult(Asn1Enumerated resultCode, RfcLdapDn matchedDn, RfcLdapString errorMessage);
    public RfcLdapResult(Asn1Enumerated resultCode, RfcLdapDn matchedDn, RfcLdapString errorMessage, RfcReferral referral);
    public RfcLdapResult(IAsn1Decoder dec, Stream inRenamed, int len);
    public sealed virtual Asn1Enumerated GetResultCode();
    public sealed virtual RfcLdapDn GetMatchedDn();
    public sealed virtual RfcLdapString GetErrorMessage();
    public sealed virtual RfcReferral GetReferral();
}
public class Novell.Directory.Ldap.Rfc2251.RfcLdapString : Asn1OctetString {
    public RfcLdapString(string s);
    public RfcLdapString(Byte[] ba);
    public RfcLdapString(IAsn1Decoder dec, Stream inRenamed, int len);
}
public class Novell.Directory.Ldap.Rfc2251.RfcLdapUrl : RfcLdapString {
    public RfcLdapUrl(string s);
}
public class Novell.Directory.Ldap.Rfc2251.RfcMatchingRuleAssertion : Asn1Sequence {
    public RfcMatchingRuleAssertion(RfcAssertionValue matchValue);
    public RfcMatchingRuleAssertion(RfcMatchingRuleId matchingRule, RfcAttributeDescription type, RfcAssertionValue matchValue, Asn1Boolean dnAttributes);
}
public class Novell.Directory.Ldap.Rfc2251.RfcMatchingRuleId : RfcLdapString {
    public RfcMatchingRuleId(string s);
}
internal class Novell.Directory.Ldap.Rfc2251.RfcMessageId : Asn1Integer {
    private static int _messageId;
    private static object LockRenamed;
    private static int MessageId { get; }
    private static RfcMessageId();
    protected internal RfcMessageId(int i);
    private static int get_MessageId();
}
public class Novell.Directory.Ldap.Rfc2251.RfcModifyDnRequest : Asn1Sequence {
    public RfcModifyDnRequest(RfcLdapDn entry, RfcRelativeLdapDn newrdn, Asn1Boolean deleteoldrdn);
    public RfcModifyDnRequest(RfcLdapDn entry, RfcRelativeLdapDn newrdn, Asn1Boolean deleteoldrdn, RfcLdapDn newSuperior);
    internal RfcModifyDnRequest(Asn1Object[] origRequest, string baseRenamed);
    public sealed virtual IRfcRequest DupRequest(string baseRenamed, string filter, bool request);
    public sealed virtual string GetRequestDn();
    public virtual Asn1Identifier GetIdentifier();
}
public class Novell.Directory.Ldap.Rfc2251.RfcModifyDnResponse : RfcLdapResult {
    public RfcModifyDnResponse(IAsn1Decoder dec, Stream inRenamed, int len);
    public RfcModifyDnResponse(Asn1Enumerated resultCode, RfcLdapDn matchedDn, RfcLdapString errorMessage, RfcReferral referral);
    public virtual Asn1Identifier GetIdentifier();
}
public class Novell.Directory.Ldap.Rfc2251.RfcModifyRequest : Asn1Sequence {
    public Asn1SequenceOf Modifications { get; }
    public RfcModifyRequest(RfcLdapDn objectRenamed, Asn1SequenceOf modification);
    internal RfcModifyRequest(Asn1Object[] origRequest, string baseRenamed);
    public Asn1SequenceOf get_Modifications();
    public sealed virtual IRfcRequest DupRequest(string baseRenamed, string filter, bool request);
    public sealed virtual string GetRequestDn();
    public virtual Asn1Identifier GetIdentifier();
}
public class Novell.Directory.Ldap.Rfc2251.RfcModifyResponse : RfcLdapResult {
    public RfcModifyResponse(IAsn1Decoder dec, Stream inRenamed, int len);
    public RfcModifyResponse(Asn1Enumerated resultCode, RfcLdapDn matchedDn, RfcLdapString errorMessage, RfcReferral referral);
    public virtual Asn1Identifier GetIdentifier();
}
public class Novell.Directory.Ldap.Rfc2251.RfcReferral : Asn1SequenceOf {
    public RfcReferral(IAsn1Decoder dec, Stream inRenamed, int len);
}
public class Novell.Directory.Ldap.Rfc2251.RfcRelativeLdapDn : RfcLdapString {
    public RfcRelativeLdapDn(string s);
}
public class Novell.Directory.Ldap.Rfc2251.RfcSaslCredentials : Asn1Sequence {
    public RfcSaslCredentials(RfcLdapString mechanism);
    public RfcSaslCredentials(RfcLdapString mechanism, Asn1OctetString credentials);
}
public class Novell.Directory.Ldap.Rfc2251.RfcSearchRequest : Asn1Sequence {
    public RfcSearchRequest(RfcLdapDn baseObject, Asn1Enumerated scope, Asn1Enumerated derefAliases, Asn1Integer sizeLimit, Asn1Integer timeLimit, Asn1Boolean typesOnly, RfcFilter filter, RfcAttributeDescriptionList attributes);
    internal RfcSearchRequest(Asn1Object[] origRequest, string baseRenamed, string filter, bool request);
    public sealed virtual IRfcRequest DupRequest(string baseRenamed, string filter, bool request);
    public sealed virtual string GetRequestDn();
    public virtual Asn1Identifier GetIdentifier();
}
public class Novell.Directory.Ldap.Rfc2251.RfcSearchResultDone : RfcLdapResult {
    public RfcSearchResultDone(IAsn1Decoder dec, Stream inRenamed, int len);
    public RfcSearchResultDone(Asn1Enumerated resultCode, RfcLdapDn matchedDn, RfcLdapString errorMessage, RfcReferral referral);
    public virtual Asn1Identifier GetIdentifier();
}
public class Novell.Directory.Ldap.Rfc2251.RfcSearchResultEntry : Asn1Sequence {
    public Asn1OctetString ObjectName { get; }
    public Asn1Sequence Attributes { get; }
    public RfcSearchResultEntry(IAsn1Decoder dec, Stream inRenamed, int len);
    public Asn1OctetString get_ObjectName();
    public Asn1Sequence get_Attributes();
    public virtual Asn1Identifier GetIdentifier();
}
public class Novell.Directory.Ldap.Rfc2251.RfcSearchResultReference : Asn1SequenceOf {
    public RfcSearchResultReference(IAsn1Decoder dec, Stream inRenamed, int len);
    public virtual Asn1Identifier GetIdentifier();
}
public class Novell.Directory.Ldap.Rfc2251.RfcSubstringFilter : Asn1Sequence {
    public RfcSubstringFilter(RfcAttributeDescription type, Asn1SequenceOf substrings);
}
public class Novell.Directory.Ldap.Rfc2251.RfcUnbindRequest : Asn1Null {
    public sealed virtual IRfcRequest DupRequest(string baseRenamed, string filter, bool request);
    public sealed virtual string GetRequestDn();
    public virtual Asn1Identifier GetIdentifier();
}
public class Novell.Directory.Ldap.RootDseInfo : object {
    [CompilerGeneratedAttribute]
private string <ServerName>k__BackingField;
    [CompilerGeneratedAttribute]
private string <DefaultNamingContext>k__BackingField;
    [CompilerGeneratedAttribute]
private IReadOnlyList`1<string> <NamingContexts>k__BackingField;
    [CompilerGeneratedAttribute]
private IReadOnlyList`1<string> <SupportedSaslMechanisms>k__BackingField;
    [CompilerGeneratedAttribute]
private IReadOnlyList`1<string> <SupportedCapabilities>k__BackingField;
    [CompilerGeneratedAttribute]
private IReadOnlyList`1<string> <SupportedControls>k__BackingField;
    [CompilerGeneratedAttribute]
private IReadOnlyList`1<string> <SupportedExtensions>k__BackingField;
    [CompilerGeneratedAttribute]
private IReadOnlyList`1<string> <SupportedLDAPPolicies>k__BackingField;
    [CompilerGeneratedAttribute]
private IReadOnlyDictionary`2<string, IReadOnlyList`1<string>> <OtherAttributes>k__BackingField;
    public string ServerName { get; }
    public string DefaultNamingContext { get; }
    public IReadOnlyList`1<string> NamingContexts { get; }
    public IReadOnlyList`1<string> SupportedSaslMechanisms { get; }
    public IReadOnlyList`1<string> SupportedCapabilities { get; }
    public IReadOnlyList`1<string> SupportedControls { get; }
    public IReadOnlyList`1<string> SupportedExtensions { get; }
    public IReadOnlyList`1<string> SupportedLDAPPolicies { get; }
    public IReadOnlyDictionary`2<string, IReadOnlyList`1<string>> OtherAttributes { get; }
    public RootDseInfo(LdapEntry rootDseEntry);
    [CompilerGeneratedAttribute]
public string get_ServerName();
    [CompilerGeneratedAttribute]
public string get_DefaultNamingContext();
    [CompilerGeneratedAttribute]
public IReadOnlyList`1<string> get_NamingContexts();
    [CompilerGeneratedAttribute]
public IReadOnlyList`1<string> get_SupportedSaslMechanisms();
    [CompilerGeneratedAttribute]
public IReadOnlyList`1<string> get_SupportedCapabilities();
    [CompilerGeneratedAttribute]
public IReadOnlyList`1<string> get_SupportedControls();
    [CompilerGeneratedAttribute]
public IReadOnlyList`1<string> get_SupportedExtensions();
    [CompilerGeneratedAttribute]
public IReadOnlyList`1<string> get_SupportedLDAPPolicies();
    [CompilerGeneratedAttribute]
public IReadOnlyDictionary`2<string, IReadOnlyList`1<string>> get_OtherAttributes();
    public bool SupportsExtension(string oid);
}
public abstract class Novell.Directory.Ldap.Sasl.Clients.BaseSaslClient : object {
    [CompilerGeneratedAttribute]
private Hashtable <Props>k__BackingField;
    [CompilerGeneratedAttribute]
private QualityOfProtection <QualityOfProtection>k__BackingField;
    [CompilerGeneratedAttribute]
private ProtectionStrength <ProtectionStrength>k__BackingField;
    public DebugId DebugId { get; }
    protected Hashtable Props { get; }
    public QualityOfProtection QualityOfProtection { get; }
    public ProtectionStrength ProtectionStrength { get; }
    public string MechanismName { get; }
    public bool HasInitialResponse { get; }
    public bool IsComplete { get; }
    protected BaseSaslClient(SaslRequest saslRequest);
    public abstract virtual DebugId get_DebugId();
    [CompilerGeneratedAttribute]
protected Hashtable get_Props();
    [CompilerGeneratedAttribute]
public QualityOfProtection get_QualityOfProtection();
    [CompilerGeneratedAttribute]
public ProtectionStrength get_ProtectionStrength();
    public abstract virtual string get_MechanismName();
    public abstract virtual bool get_HasInitialResponse();
    public abstract virtual bool get_IsComplete();
    public abstract virtual Byte[] EvaluateChallenge(Byte[] challenge);
    public sealed virtual void Dispose();
    protected virtual void Dispose(bool disposing);
    public static string GetQOPString(QualityOfProtection qop);
}
public class Novell.Directory.Ldap.Sasl.Clients.CramMD5Client : BaseSaslClient {
    [CompilerGeneratedAttribute]
private DebugId <DebugId>k__BackingField;
    private string _username;
    private Byte[] _password;
    private State _currentState;
    public DebugId DebugId { get; }
    public string MechanismName { get; }
    public bool HasInitialResponse { get; }
    public bool IsComplete { get; }
    public CramMD5Client(SaslRequest saslRequest);
    [CompilerGeneratedAttribute]
public virtual DebugId get_DebugId();
    public virtual string get_MechanismName();
    public virtual bool get_HasInitialResponse();
    public virtual bool get_IsComplete();
    protected virtual void Dispose(bool disposing);
    public virtual Byte[] EvaluateChallenge(Byte[] challenge);
    private string CreateCramMd5Response(Byte[] challenge);
    private static bool CheckServerResponseAuth(Byte[] serverResponse);
    private static string HMacMD5(Byte[] key, Byte[] input);
}
public class Novell.Directory.Ldap.Sasl.Clients.DigestMD5Client : BaseSaslClient {
    private static RandomNumberGenerator _rng;
    [CompilerGeneratedAttribute]
private string <RSPAuthValue>k__BackingField;
    [CompilerGeneratedAttribute]
private DebugId <DebugId>k__BackingField;
    private string _username;
    private Byte[] _password;
    private string _realm;
    private string _host;
    private State _currentState;
    private static Byte[] Colon;
    public string RSPAuthValue { get; private set; }
    public DebugId DebugId { get; }
    public string MechanismName { get; }
    public bool HasInitialResponse { get; }
    public bool IsComplete { get; }
    public DigestMD5Client(SaslRequest saslRequest);
    private static DigestMD5Client();
    [CompilerGeneratedAttribute]
public string get_RSPAuthValue();
    [CompilerGeneratedAttribute]
private void set_RSPAuthValue(string value);
    [CompilerGeneratedAttribute]
public virtual DebugId get_DebugId();
    public virtual string get_MechanismName();
    public virtual bool get_HasInitialResponse();
    public virtual bool get_IsComplete();
    protected virtual void Dispose(bool disposing);
    public virtual Byte[] EvaluateChallenge(Byte[] challenge);
    private bool CheckServerResponseAuth(Byte[] serverResponse);
    private Byte[] CreateDigestResponse(ChallengeInfo challenge);
    private Byte[] DigestCalcHa1(DigestResponse result);
    private Byte[] DigestCalcResponse(DigestResponse result, Byte[] ha1);
}
public class Novell.Directory.Ldap.Sasl.Clients.ExternalClient : BaseSaslClient {
    [CompilerGeneratedAttribute]
private DebugId <DebugId>k__BackingField;
    private State _currentState;
    public DebugId DebugId { get; }
    public string MechanismName { get; }
    public bool HasInitialResponse { get; }
    public bool IsComplete { get; }
    public ExternalClient(SaslRequest saslRequest);
    [CompilerGeneratedAttribute]
public virtual DebugId get_DebugId();
    public virtual string get_MechanismName();
    public virtual bool get_HasInitialResponse();
    public virtual bool get_IsComplete();
    public virtual Byte[] EvaluateChallenge(Byte[] challenge);
    protected virtual void Dispose(bool disposing);
}
internal class Novell.Directory.Ldap.Sasl.Clients.MD5Digest : object {
    private static int ByteLength;
    private Byte[] _xBuf;
    private int _xBufOff;
    private long _byteCount;
    private static int DigestLength;
    private UInt32 _h1;
    private UInt32 _h2;
    private UInt32 _h3;
    private UInt32 _h4;
    private UInt32[] _x;
    private int _xOff;
    private static int S11;
    private static int S12;
    private static int S13;
    private static int S14;
    private static int S21;
    private static int S22;
    private static int S23;
    private static int S24;
    private static int S31;
    private static int S32;
    private static int S33;
    private static int S34;
    private static int S41;
    private static int S42;
    private static int S43;
    private static int S44;
    public string AlgorithmName { get; }
    internal MD5Digest(MD5Digest t);
    private void CopyIn(MD5Digest t);
    public void Update(byte input);
    public void BlockUpdate(Byte[] input);
    public void BlockUpdate(Byte[] input, int inOff, int length);
    public void Finish();
    public void Reset();
    public int GetByteLength();
    public string get_AlgorithmName();
    public int GetDigestSize();
    internal void ProcessWord(Byte[] input, int inOff);
    internal void ProcessLength(long bitLength);
    public int DoFinal(Byte[] output);
    public int DoFinal(Byte[] output, int outOff);
    internal static void UInt32_To_LE(UInt32 n, Byte[] bs, int off);
    internal static UInt32 LE_To_UInt32(Byte[] bs, int off);
    private static UInt32 RotateLeft(UInt32 x, int n);
    private static UInt32 F(UInt32 u, UInt32 v, UInt32 w);
    private static UInt32 G(UInt32 u, UInt32 v, UInt32 w);
    private static UInt32 H(UInt32 u, UInt32 v, UInt32 w);
    private static UInt32 K(UInt32 u, UInt32 v, UInt32 w);
    internal void ProcessBlock();
}
public class Novell.Directory.Ldap.Sasl.Clients.PlainClient : BaseSaslClient {
    [CompilerGeneratedAttribute]
private DebugId <DebugId>k__BackingField;
    private Byte[] _username;
    private Byte[] _password;
    private State _currentState;
    public DebugId DebugId { get; }
    public string MechanismName { get; }
    public bool HasInitialResponse { get; }
    public bool IsComplete { get; }
    public PlainClient(SaslRequest saslRequest);
    [CompilerGeneratedAttribute]
public virtual DebugId get_DebugId();
    public virtual string get_MechanismName();
    public virtual bool get_HasInitialResponse();
    public virtual bool get_IsComplete();
    public virtual Byte[] EvaluateChallenge(Byte[] challenge);
    private static bool CheckServerResponseAuth(Byte[] serverResponse);
    protected virtual void Dispose(bool disposing);
}
public static class Novell.Directory.Ldap.Sasl.DefaultSaslClientFactory : object {
    public static ISaslClient CreateClient(SaslRequest saslRequest);
    public static bool IsSaslMechanismSupported(string mechanism);
}
public interface Novell.Directory.Ldap.Sasl.ISaslClient {
    public string MechanismName { get; }
    public bool HasInitialResponse { get; }
    public bool IsComplete { get; }
    public abstract virtual string get_MechanismName();
    public abstract virtual bool get_HasInitialResponse();
    public abstract virtual Byte[] EvaluateChallenge(Byte[] challenge);
    public abstract virtual bool get_IsComplete();
}
public interface Novell.Directory.Ldap.Sasl.ISaslClientFactory {
    public IReadOnlyList`1<string> SupportedMechanisms { get; }
    public abstract virtual IReadOnlyList`1<string> get_SupportedMechanisms();
    public abstract virtual ISaslClient CreateClient(SaslRequest saslRequest);
}
public enum Novell.Directory.Ldap.Sasl.ProtectionStrength : Enum {
    public int value__;
    public static ProtectionStrength High;
    public static ProtectionStrength Medium;
    public static ProtectionStrength Low;
}
[FlagsAttribute]
public enum Novell.Directory.Ldap.Sasl.QualityOfProtection : Enum {
    public int value__;
    public static QualityOfProtection Invalid;
    public static QualityOfProtection AuthenticationOnly;
    public static QualityOfProtection AuthenticationWithIntegrityProtection;
    public static QualityOfProtection AuthenticationWithIntegrityAndPrivacyProtection;
}
public static class Novell.Directory.Ldap.Sasl.SaslConstants : object {
}
public class Novell.Directory.Ldap.Sasl.SaslCramMd5Request : SaslRequest {
    public SaslCramMd5Request(string username, string password);
}
public class Novell.Directory.Ldap.Sasl.SaslDigestMd5Request : SaslRequest {
    [CompilerGeneratedAttribute]
private string <Host>k__BackingField;
    public string Host { get; }
    public SaslDigestMd5Request(string username, string password, string realmName, string host);
    [CompilerGeneratedAttribute]
public string get_Host();
}
public class Novell.Directory.Ldap.Sasl.SaslException : Exception {
    public SaslException(string message);
    public SaslException(string message, Exception innerException);
}
public class Novell.Directory.Ldap.Sasl.SaslExternalRequest : SaslRequest {
}
public class Novell.Directory.Ldap.Sasl.SaslPlainRequest : SaslRequest {
    public SaslPlainRequest(string username, string password);
}
public abstract class Novell.Directory.Ldap.Sasl.SaslRequest : object {
    [CompilerGeneratedAttribute]
private string <SaslMechanism>k__BackingField;
    [CompilerGeneratedAttribute]
private string <AuthorizationId>k__BackingField;
    [CompilerGeneratedAttribute]
private Byte[] <Credentials>k__BackingField;
    [CompilerGeneratedAttribute]
private LdapConstraints <Constraints>k__BackingField;
    [CompilerGeneratedAttribute]
private string <RealmName>k__BackingField;
    [CompilerGeneratedAttribute]
private List`1<LdapControl> <Controls>k__BackingField;
    [CompilerGeneratedAttribute]
private Hashtable <SaslBindProperties>k__BackingField;
    public string SaslMechanism { get; }
    public string AuthorizationId { get; public set; }
    public Byte[] Credentials { get; public set; }
    public LdapConstraints Constraints { get; public set; }
    public string RealmName { get; public set; }
    protected List`1<LdapControl> Controls { get; }
    public QualityOfProtection QualityOfProtection { get; }
    public ProtectionStrength ProtectionStrength { get; }
    public Hashtable SaslBindProperties { get; public set; }
    protected SaslRequest(string saslMechanism);
    [CompilerGeneratedAttribute]
public string get_SaslMechanism();
    [CompilerGeneratedAttribute]
public string get_AuthorizationId();
    [CompilerGeneratedAttribute]
public void set_AuthorizationId(string value);
    [CompilerGeneratedAttribute]
public Byte[] get_Credentials();
    [CompilerGeneratedAttribute]
public void set_Credentials(Byte[] value);
    [CompilerGeneratedAttribute]
public LdapConstraints get_Constraints();
    [CompilerGeneratedAttribute]
public void set_Constraints(LdapConstraints value);
    [CompilerGeneratedAttribute]
public virtual string get_RealmName();
    [CompilerGeneratedAttribute]
public virtual void set_RealmName(string value);
    [CompilerGeneratedAttribute]
protected List`1<LdapControl> get_Controls();
    public void AddControl(LdapControl control);
    public void AddAllControls(IEnumerable`1<LdapControl> controls);
    public IReadOnlyCollection`1<LdapControl> GetAllControls();
    public QualityOfProtection get_QualityOfProtection();
    public ProtectionStrength get_ProtectionStrength();
    [CompilerGeneratedAttribute]
public Hashtable get_SaslBindProperties();
    [CompilerGeneratedAttribute]
public void set_SaslBindProperties(Hashtable value);
}
public class Novell.Directory.Ldap.SearchExtensions.VirtualListViewControlHandler : object {
    [NotNullAttribute]
private ILdapConnection _ldapConnection;
    public VirtualListViewControlHandler(ILdapConnection ldapConnection);
    public Task`1<List`1<LdapEntry>> SearchUsingVlvAsync(LdapSortControl sortControl, SearchOptions options, int pageSize, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Novell.Directory.Ldap.SearchExtensions.VirtualListViewControlHandler/<SearchUsingVlvAsync>d__3`1")]
public Task`1<List`1<T>> SearchUsingVlvAsync(LdapSortControl sortControl, Func`2<LdapEntry, T> converter, SearchOptions options, int pageSize, CancellationToken cancellationToken);
    private static LdapVirtualListControl BuildLdapVirtualListControl(int page, int pageSize);
}
[ExtensionAttribute]
public static class Novell.Directory.Ldap.SearchExtensions.VirtualListViewControlSearchExtensions : object {
    [ExtensionAttribute]
public static Task`1<List`1<LdapEntry>> SearchUsingVlvAsync(ILdapConnection ldapConnection, LdapSortControl sortControl, SearchOptions options, int pageSize, CancellationToken cancellationToken);
    [ExtensionAttribute]
public static Task`1<List`1<T>> SearchUsingVlvAsync(ILdapConnection ldapConnection, LdapSortControl sortControl, Func`2<LdapEntry, T> converter, SearchOptions options, int pageSize, CancellationToken cancellationToken);
}
public class Novell.Directory.Ldap.SearchOptions : object {
    [CompilerGeneratedAttribute]
private string <SearchBase>k__BackingField;
    [CompilerGeneratedAttribute]
private int <Scope>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Filter>k__BackingField;
    [CompilerGeneratedAttribute]
private String[] <TargetAttributes>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <TypesOnly>k__BackingField;
    [CompilerGeneratedAttribute]
private LdapSearchConstraints <SearchConstraints>k__BackingField;
    public string SearchBase { get; }
    public int Scope { get; }
    public string Filter { get; }
    public String[] TargetAttributes { get; }
    public bool TypesOnly { get; }
    public LdapSearchConstraints SearchConstraints { get; }
    public SearchOptions(string searchBase, int scope, string filter, String[] targetAttributes);
    public SearchOptions(string searchBase, int scope, string filter, String[] targetAttributes, bool typesOnly, LdapSearchConstraints searchConstraints);
    [CompilerGeneratedAttribute]
public string get_SearchBase();
    [CompilerGeneratedAttribute]
public int get_Scope();
    [CompilerGeneratedAttribute]
public string get_Filter();
    [CompilerGeneratedAttribute]
public String[] get_TargetAttributes();
    [CompilerGeneratedAttribute]
public bool get_TypesOnly();
    [CompilerGeneratedAttribute]
public LdapSearchConstraints get_SearchConstraints();
}
public class Novell.Directory.Ldap.SimplePagedResultsControlHandler : object {
    [NotNullAttribute]
private ILdapConnection _ldapConnection;
    public SimplePagedResultsControlHandler(ILdapConnection ldapConnection);
    public Task`1<List`1<LdapEntry>> SearchWithSimplePagingAsync(SearchOptions options, int pageSize, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Novell.Directory.Ldap.SimplePagedResultsControlHandler/<SearchWithSimplePagingAsync>d__3`1")]
public Task`1<List`1<T>> SearchWithSimplePagingAsync(Func`2<LdapEntry, T> converter, SearchOptions options, int pageSize, CancellationToken cancellationToken);
    private static bool PrepareForNextPage(LdapControl[] pageResponseControls, int pageSize, bool isInitialCall, LdapSearchConstraints& searchConstraints);
    private static LdapSearchConstraints ApplyPagedResultsControl(LdapSearchConstraints searchConstraints, int pageSize, Byte[] cookie);
    [AsyncStateMachineAttribute("Novell.Directory.Ldap.SimplePagedResultsControlHandler/<RetrievePageAsync>d__6`1")]
private Task`1<LdapControl[]> RetrievePageAsync(SearchOptions options, LdapSearchConstraints searchConstraints, List`1<T> mappedResultsAccumulator, Func`2<LdapEntry, T> converter, CancellationToken cancellationToken);
}
[ExtensionAttribute]
public static class Novell.Directory.Ldap.SimplePagedResultsControlSearchExtensions : object {
    [ExtensionAttribute]
public static Task`1<List`1<LdapEntry>> SearchUsingSimplePagingAsync(ILdapConnection ldapConnection, SearchOptions options, int pageSize, CancellationToken cancellationToken);
    [ExtensionAttribute]
public static Task`1<List`1<T>> SearchUsingSimplePagingAsync(ILdapConnection ldapConnection, Func`2<LdapEntry, T> converter, SearchOptions options, int pageSize, CancellationToken cancellationToken);
}
internal class Novell.Directory.Ldap.ThreadClass : object {
    private Thread _threadField;
    [CompilerGeneratedAttribute]
private bool <IsStopping>k__BackingField;
    unknown bool IsBackground {public set; }
    protected bool IsStopping { get; private set; }
    public void set_IsBackground(bool value);
    [CompilerGeneratedAttribute]
protected bool get_IsStopping();
    [CompilerGeneratedAttribute]
private void set_IsStopping(bool value);
    protected virtual void Run();
    public void Start();
    public void Stop();
}
internal class Novell.Directory.Ldap.Tokenizer : object {
    private List`1<string> _elements;
    public int Count { get; }
    public Tokenizer(string source, string delimiters, bool returnDelimiters);
    public int get_Count();
    private void Tokenize(string tempstr, Char[] delimiters);
    public bool HasMoreTokens();
    public string NextToken();
}
[ExtensionAttribute]
public static class Novell.Directory.Ldap.Utilclass.AsyncEnumerableExtensions : object {
    [AsyncStateMachineAttribute("Novell.Directory.Ldap.Utilclass.AsyncEnumerableExtensions/<ToListAsync>d__0`1")]
[ExtensionAttribute]
internal static Task`1<List`1<T>> ToListAsync(IAsyncEnumerable`1<T> enumerable, CancellationToken cancellationToken);
}
public class Novell.Directory.Ldap.Utilclass.AttributeQualifier : object {
    private String[] _values;
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    public string Name { get; }
    public String[] Values { get; }
    public AttributeQualifier(string name, String[] valueRenamed);
    [CompilerGeneratedAttribute]
public string get_Name();
    public String[] get_Values();
}
public class Novell.Directory.Ldap.Utilclass.Base64 : object {
    private static Char[] Emap;
    private static Byte[] Dmap;
    private static Byte[][] LowerBoundMask;
    private static byte ContinuationMask;
    private static byte ContinuationResult;
    private static Base64();
    public static string Encode(string inputString);
    public static string Encode(Byte[] inputBytes);
    public static Byte[] Decode(string encodedString);
    public static Byte[] Decode(Char[] encodedChars);
    public static Byte[] Decode(StringBuilder encodedSBuf, int start, int end);
    public static bool IsLdifSafe(Byte[] bytes);
    public static bool IsLdifSafe(string str);
    private static int GetByteCount(byte b);
    public static bool IsValidUtf8(Byte[] array, bool isUcs2Only);
    private static void GetCharsFromString(string sourceString, int sourceStart, int sourceEnd, Char[]& destinationArray, int destinationStart);
}
public class Novell.Directory.Ldap.Utilclass.BindProperties : object {
    [CompilerGeneratedAttribute]
private int <ProtocolVersion>k__BackingField;
    [CompilerGeneratedAttribute]
private string <AuthenticationDn>k__BackingField;
    [CompilerGeneratedAttribute]
private string <AuthenticationMethod>k__BackingField;
    [CompilerGeneratedAttribute]
private Hashtable <SaslBindProperties>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <Anonymous>k__BackingField;
    public int ProtocolVersion { get; }
    public string AuthenticationDn { get; }
    public string AuthenticationMethod { get; }
    public Hashtable SaslBindProperties { get; }
    public bool Anonymous { get; }
    public BindProperties(int version, string dn, string method, bool anonymous, Hashtable bindProperties);
    [CompilerGeneratedAttribute]
public int get_ProtocolVersion();
    [CompilerGeneratedAttribute]
public string get_AuthenticationDn();
    [CompilerGeneratedAttribute]
public string get_AuthenticationMethod();
    [CompilerGeneratedAttribute]
public Hashtable get_SaslBindProperties();
    [CompilerGeneratedAttribute]
public bool get_Anonymous();
}
public enum Novell.Directory.Ldap.Utilclass.CharacterTypes : Enum {
    public byte value__;
    public static CharacterTypes Whitespace;
    public static CharacterTypes Numeric;
    public static CharacterTypes Alphabetic;
    public static CharacterTypes Stringquote;
    public static CharacterTypes Commentchar;
}
public class Novell.Directory.Ldap.Utilclass.Dn : object {
    private static int LookForRdnAttrType;
    private static int AlphaAttrType;
    private static int OidAttrType;
    private static int LookForRdnValue;
    private static int QuotedRdnValue;
    private static int HexRdnValue;
    private static int UnquotedRdnValue;
    private List`1<Rdn> _rdnList;
    public IReadOnlyList`1<Rdn> RdNs { get; }
    public Dn Parent { get; }
    public Dn(string dnString);
    public IReadOnlyList`1<Rdn> get_RdNs();
    public Dn get_Parent();
    private bool IsAlpha(char ch);
    private bool IsDigit(char ch);
    private static bool IsHexDigit(char ch);
    private bool NeedsEscape(char ch);
    private static char HexToChar(char hex1, char hex0);
    public virtual string ToString();
    public IReadOnlyList`1<Rdn> GetRdnList();
    public virtual bool Equals(object toDn);
    public bool Equals(Dn toDn);
    public String[] ExplodeDn(bool noTypes);
    public int CountRdNs();
    public bool IsDescendantOf(Dn containerDn);
    public void AddRdn(Rdn rdn);
    public void AddRdnToFront(Rdn rdn);
    public void AddRdnToBack(Rdn rdn);
    public virtual int GetHashCode();
}
public static class Novell.Directory.Ldap.Utilclass.ExceptionMessages : object {
    public static string Tostring;
    public static string ServerMsg;
    public static string MatchedDn;
    public static string FailedReferral;
    public static string ReferralItem;
    public static string ConnectionError;
    public static string ConnectionImpossible;
    public static string ConnectionWait;
    public static string ConnectionFinalized;
    public static string ConnectionClosed;
    public static string ConnectionReader;
    public static string DupError;
    public static string ReferralError;
    public static string ReferralLocal;
    public static string ReferenceError;
    public static string ReferralSend;
    public static string ReferenceNofollow;
    public static string ReferralBind;
    public static string ReferralBindMatch;
    public static string NoDupRequest;
    public static string ServerConnectError;
    public static string NoSupProperty;
    public static string EntryParamError;
    public static string DnParamError;
    public static string RdnParamError;
    public static string OpParamError;
    public static string ParamError;
    public static string DecodingError;
    public static string EncodingError;
    public static string IoException;
    public static string InvalidEscape;
    public static string ShortEscape;
    public static string InvalidCharInFilter;
    public static string InvalidCharInDescr;
    public static string InvalidEscInDescr;
    public static string UnexpectedEnd;
    public static string MissingLeftParen;
    public static string MissingRightParen;
    public static string ExpectingRightParen;
    public static string ExpectingLeftParen;
    public static string NoOption;
    public static string InvalidFilterComparison;
    public static string NoMatchingRule;
    public static string NoAttributeName;
    public static string NoDnNorMatchingRule;
    public static string NotAnAttribute;
    public static string UnequalLengths;
    public static string ImproperReferral;
    public static string NotImplemented;
    public static string NoMemory;
    public static string ServerShutdownReq;
    public static string InvalidAddress;
    public static string UnknownResult;
    public static string OutstandingOperations;
    public static string WrongFactory;
    public static string NoTlsFactory;
    public static string NoStarttls;
    public static string StoptlsError;
    public static string MultipleSchema;
    public static string NoSchema;
    public static string ReadMultiple;
    public static string CannotBind;
    public static string SslProviderMissing;
    internal static Dictionary`2<string, string> MessageMap;
    private static ExceptionMessages();
    public static string GetErrorMessage(string code);
}
public static class Novell.Directory.Ldap.Utilclass.ExtResponseFactory : object {
    public static LdapExtendedResponse ConvertToExtendedResponse(RfcLdapMessage inResponse);
}
public static class Novell.Directory.Ldap.Utilclass.IntermediateResponseFactory : object {
    public static LdapIntermediateResponse ConvertToIntermediateResponse(RfcLdapMessage inResponse);
}
public class Novell.Directory.Ldap.Utilclass.Rdn : object {
    private List`1<string> _types;
    private List`1<string> _values;
    [CompilerGeneratedAttribute]
private string <RawValue>k__BackingField;
    internal string RawValue { get; private set; }
    public string Type { get; }
    public String[] Types { get; }
    public string Value { get; }
    public String[] Values { get; }
    public bool Multivalued { get; }
    public Rdn(string rdn);
    [CompilerGeneratedAttribute]
internal string get_RawValue();
    [CompilerGeneratedAttribute]
private void set_RawValue(string value);
    public string get_Type();
    public String[] get_Types();
    public string get_Value();
    public String[] get_Values();
    public bool get_Multivalued();
    public bool Equals(Rdn rdn);
    private bool EqualAttrType(string attr1, string attr2);
    public void Add(string attrType, string attrValue, string rawValue);
    public virtual string ToString();
    public string ToString(bool noTypes);
    public String[] ExplodeRdn(bool noTypes);
}
public class Novell.Directory.Ldap.Utilclass.ReferralInfo : object {
    [CompilerGeneratedAttribute]
private LdapUrl <ReferralUrl>k__BackingField;
    [CompilerGeneratedAttribute]
private LdapConnection <ReferralConnection>k__BackingField;
    [CompilerGeneratedAttribute]
private String[] <ReferralList>k__BackingField;
    public LdapUrl ReferralUrl { get; }
    public LdapConnection ReferralConnection { get; }
    public String[] ReferralList { get; }
    public ReferralInfo(LdapConnection lc, String[] refList, LdapUrl refUrl);
    [CompilerGeneratedAttribute]
public LdapUrl get_ReferralUrl();
    [CompilerGeneratedAttribute]
public LdapConnection get_ReferralConnection();
    [CompilerGeneratedAttribute]
public String[] get_ReferralList();
}
public class Novell.Directory.Ldap.Utilclass.ResourcesHandler : object {
    private static CultureInfo _defaultLocale;
    private static ResourcesHandler();
    public static string GetMessage(string messageOrKey, Object[] arguments);
    public static string GetMessage(string messageOrKey, Object[] arguments, CultureInfo locale);
    public static string GetResultString(int code);
    public static string GetResultString(int code, CultureInfo locale);
}
public class Novell.Directory.Ldap.Utilclass.RespControlVector : object {
    private object _lockObject;
    private List`1<RegisteredControl> _controls;
    public void RegisterResponseControl(string oid, Type controlClass);
    public Type FindResponseControl(string searchOid);
}
public class Novell.Directory.Ldap.Utilclass.RespExtensionSet : object {
    private ConcurrentDictionary`2<string, Type> _map;
    public int Count { get; }
    public int get_Count();
    public void RegisterResponseExtension(string oid, Type extClass);
    public sealed virtual IEnumerator`1<Type> GetEnumerator();
    private sealed virtual override IEnumerator System.Collections.IEnumerable.GetEnumerator();
    public Type FindResponseExtension(string searchOid);
}
public static class Novell.Directory.Ldap.Utilclass.ResultCodeMessages : object {
    private static Dictionary`2<string, string> ErrorCodes;
    private static ResultCodeMessages();
    public static string GetResultCode(string code);
    public static bool HasResultCode(string code);
}
public class Novell.Directory.Ldap.Utilclass.SchemaParser : object {
    private int _result;
    private string _objectClass;
    private List`1<AttributeQualifier> _qualifiers;
    [CompilerGeneratedAttribute]
private string <RawString>k__BackingField;
    [CompilerGeneratedAttribute]
private String[] <Names>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Id>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Description>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Syntax>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Superior>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <Single>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <Obsolete>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Equality>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Ordering>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Substring>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <Collective>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <UserMod>k__BackingField;
    [CompilerGeneratedAttribute]
private int <Usage>k__BackingField;
    [CompilerGeneratedAttribute]
private int <Type>k__BackingField;
    [CompilerGeneratedAttribute]
private String[] <Superiors>k__BackingField;
    [CompilerGeneratedAttribute]
private String[] <Required>k__BackingField;
    [CompilerGeneratedAttribute]
private String[] <Optional>k__BackingField;
    [CompilerGeneratedAttribute]
private String[] <Auxiliary>k__BackingField;
    [CompilerGeneratedAttribute]
private String[] <Precluded>k__BackingField;
    [CompilerGeneratedAttribute]
private String[] <Applies>k__BackingField;
    [CompilerGeneratedAttribute]
private string <NameForm>k__BackingField;
    public string RawString { get; public set; }
    public String[] Names { get; }
    public IEnumerable`1<AttributeQualifier> Qualifiers { get; }
    public string Id { get; }
    public string Description { get; }
    public string Syntax { get; }
    public string Superior { get; }
    public bool Single { get; }
    public bool Obsolete { get; }
    public string Equality { get; }
    public string Ordering { get; }
    public string Substring { get; }
    public bool Collective { get; }
    public bool UserMod { get; }
    public int Usage { get; private set; }
    public int Type { get; }
    public String[] Superiors { get; }
    public String[] Required { get; }
    public String[] Optional { get; }
    public String[] Auxiliary { get; }
    public String[] Precluded { get; }
    public String[] Applies { get; }
    public string NameForm { get; }
    public string ObjectClass { get; }
    public SchemaParser(string aString);
    [CompilerGeneratedAttribute]
public string get_RawString();
    [CompilerGeneratedAttribute]
public void set_RawString(string value);
    [CompilerGeneratedAttribute]
public String[] get_Names();
    public IEnumerable`1<AttributeQualifier> get_Qualifiers();
    [CompilerGeneratedAttribute]
public string get_Id();
    [CompilerGeneratedAttribute]
public string get_Description();
    [CompilerGeneratedAttribute]
public string get_Syntax();
    [CompilerGeneratedAttribute]
public string get_Superior();
    [CompilerGeneratedAttribute]
public bool get_Single();
    [CompilerGeneratedAttribute]
public bool get_Obsolete();
    [CompilerGeneratedAttribute]
public string get_Equality();
    [CompilerGeneratedAttribute]
public string get_Ordering();
    [CompilerGeneratedAttribute]
public string get_Substring();
    [CompilerGeneratedAttribute]
public bool get_Collective();
    [CompilerGeneratedAttribute]
public bool get_UserMod();
    [CompilerGeneratedAttribute]
public int get_Usage();
    [CompilerGeneratedAttribute]
private void set_Usage(int value);
    [CompilerGeneratedAttribute]
public int get_Type();
    [CompilerGeneratedAttribute]
public String[] get_Superiors();
    [CompilerGeneratedAttribute]
public String[] get_Required();
    [CompilerGeneratedAttribute]
public String[] get_Optional();
    [CompilerGeneratedAttribute]
public String[] get_Auxiliary();
    [CompilerGeneratedAttribute]
public String[] get_Precluded();
    [CompilerGeneratedAttribute]
public String[] get_Applies();
    [CompilerGeneratedAttribute]
public string get_NameForm();
    public string get_ObjectClass();
    private AttributeQualifier ParseQualifier(SchemaTokenCreator st, string name);
}
public class Novell.Directory.Ldap.Utilclass.SchemaTokenCreator : object {
    private bool _ccomments;
    private bool _cppcomments;
    private Stream _input;
    private bool _iseolsig;
    private StreamReader _reader;
    private StringReader _sreader;
    private Char[] _buf;
    private bool _cidtolower;
    private Byte[] _ctype;
    private double _numberValue;
    private int _peekchar;
    private bool _pushedback;
    [CompilerGeneratedAttribute]
private int <LastType>k__BackingField;
    [CompilerGeneratedAttribute]
private string <StringValue>k__BackingField;
    [CompilerGeneratedAttribute]
private int <CurrentLine>k__BackingField;
    public int LastType { get; public set; }
    public string StringValue { get; public set; }
    public int CurrentLine { get; private set; }
    public SchemaTokenCreator(Stream instream);
    public SchemaTokenCreator(StreamReader r);
    public SchemaTokenCreator(StringReader r);
    [CompilerGeneratedAttribute]
public int get_LastType();
    [CompilerGeneratedAttribute]
public void set_LastType(int value);
    [CompilerGeneratedAttribute]
public string get_StringValue();
    [CompilerGeneratedAttribute]
public void set_StringValue(string value);
    [CompilerGeneratedAttribute]
public int get_CurrentLine();
    [CompilerGeneratedAttribute]
private void set_CurrentLine(int value);
    private void Initialise();
    public void PushBack();
    public string ToStringValue();
    public void WordCharacters(int min, int max);
    public void WhitespaceCharacters(int min, int max);
    public void OrdinaryCharacters(int min, int max);
    public void OrdinaryCharacter(int ch);
    public void CommentCharacter(int ch);
    public void InitTable();
    public void QuoteCharacter(int ch);
    public void ParseNumbers();
    private int Read();
    public int NextToken();
}
[ExtensionAttribute]
internal static class Novell.Directory.Ldap.Utilclass.StringExtensions : object {
    [ExtensionAttribute]
internal static bool StartsWithStringAtOffset(string baseString, string value, int offset);
}
public enum Novell.Directory.Ldap.Utilclass.TokenTypes : Enum {
    public int value__;
    public static TokenTypes Eol;
    public static TokenTypes Eof;
    public static TokenTypes Number;
    public static TokenTypes Word;
    public static TokenTypes Real;
    public static TokenTypes String;
}
