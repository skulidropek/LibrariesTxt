public class Microsoft.EntityFrameworkCore.Scaffolding.Internal.NpgsqlDatabaseModelFactory : object {
    private NpgsqlConnection _connection;
    private TableSelectionSet _tableSelectionSet;
    private DatabaseModel _databaseModel;
    private Dictionary`2<string, TableModel> _tables;
    private Dictionary`2<string, ColumnModel> _tableColumns;
    [CompilerGeneratedAttribute]
private ILogger <Logger>k__BackingField;
    private static string GetTablesQuery;
    private static string GetColumnsQuery;
    private static string GetIndexesQuery;
    private static string GetConstraintsQuery;
    private static string GetSequencesQuery;
    public ILogger Logger { get; }
    public NpgsqlDatabaseModelFactory(ILoggerFactory loggerFactory);
    private static string TableKey(TableModel table);
    private static string TableKey(string name, string schema);
    private static string ColumnKey(TableModel table, string columnName);
    [CompilerGeneratedAttribute]
public virtual ILogger get_Logger();
    private void ResetState();
    public sealed virtual DatabaseModel Create(string connectionString, TableSelectionSet tableSelectionSet);
    public sealed virtual DatabaseModel Create(DbConnection connection, TableSelectionSet tableSelectionSet);
    private void GetTables();
    private void GetColumns();
    private void GetIndexes();
    private void GetConstraints();
    private static Nullable`1<ReferentialAction> ConvertToReferentialAction(char onDeleteAction);
    private void GetSequences();
}
public class Microsoft.EntityFrameworkCore.Scaffolding.Internal.NpgsqlDesignTimeServices : object {
    public virtual void ConfigureDesignTimeServices(IServiceCollection serviceCollection);
}
public class Microsoft.EntityFrameworkCore.Scaffolding.Internal.NpgsqlScaffoldingModelFactory : RelationalScaffoldingModelFactory {
    public NpgsqlScaffoldingModelFactory(IInterceptingLogger`1<Scaffolding> logger, IRelationalTypeMapper typeMapper, IDatabaseModelFactory databaseModelFactory, CandidateNamingService candidateNamingService, IPluralizer pluralizer);
    public virtual IModel Create(string connectionString, TableSelectionSet tableSelectionSet);
    [CanBeNullAttribute]
protected virtual KeyBuilder VisitPrimaryKey(EntityTypeBuilder builder, TableModel table);
    [CanBeNullAttribute]
protected virtual IndexBuilder VisitIndex(EntityTypeBuilder builder, IndexModel index);
    [CanBeNullAttribute]
protected virtual RelationalTypeMapping GetTypeMapping(ColumnModel column);
    private NpgsqlArrayTypeMapping GetArrayTypeMapping(ColumnModel column);
}
[ExtensionAttribute]
internal static class Microsoft.EntityFrameworkCore.Scaffolding.Internal.NpgsqlTableSelectionSetExtensions : object {
    [ExtensionAttribute]
public static bool Allows(TableSelectionSet _tableSelectionSet, string schemaName, string tableName);
    private static bool EqualsWithQuotes(string expr, string name);
}
public class Microsoft.EntityFrameworkCore.Scaffolding.Metadata.NpgsqlColumnModelAnnotations : object {
    private ColumnModel _column;
    public bool IsSerial { get; public set; }
    internal PostgresTypeType PostgresTypeType { get; internal set; }
    internal string ElementDataType { get; internal set; }
    public NpgsqlColumnModelAnnotations(ColumnModel column);
    public bool get_IsSerial();
    public void set_IsSerial(bool value);
    internal PostgresTypeType get_PostgresTypeType();
    internal void set_PostgresTypeType(PostgresTypeType value);
    internal string get_ElementDataType();
    internal void set_ElementDataType(string value);
}
internal class Microsoft.EntityFrameworkCore.Scaffolding.Metadata.NpgsqlDatabaseModelAnnotationNames : object {
    public static string Prefix;
    public static string IsSerial;
    public static string Expression;
    internal static string PostgresTypeType;
    internal static string ElementDataType;
}
[ExtensionAttribute]
public static class Microsoft.EntityFrameworkCore.Scaffolding.Metadata.NpgsqlDatabaseModelExtensions : object {
    [ExtensionAttribute]
public static NpgsqlColumnModelAnnotations Npgsql(ColumnModel column);
    [ExtensionAttribute]
public static NpgsqlIndexModelAnnotations Npgsql(IndexModel index);
}
public class Microsoft.EntityFrameworkCore.Scaffolding.Metadata.NpgsqlIndexModelAnnotations : object {
    private IndexModel _index;
    public string Expression { get; public set; }
    public NpgsqlIndexModelAnnotations(IndexModel index);
    public string get_Expression();
    public void set_Expression(string value);
}
[DebuggerStepThroughAttribute]
internal static class Microsoft.EntityFrameworkCore.Utilities.Check : object {
    [ContractAnnotationAttribute("value:null => halt")]
public static T NotNull(T value, string parameterName);
    [ContractAnnotationAttribute("value:null => halt")]
public static T NotNull(T value, string parameterName, string propertyName);
    [ContractAnnotationAttribute("value:null => halt")]
public static IReadOnlyList`1<T> NotEmpty(IReadOnlyList`1<T> value, string parameterName);
    [ContractAnnotationAttribute("value:null => halt")]
public static string NotEmpty(string value, string parameterName);
    public static string NullButNotEmpty(string value, string parameterName);
    public static IReadOnlyList`1<T> HasNoNulls(IReadOnlyList`1<T> value, string parameterName);
    public static Type ValidEntityType(Type value, string parameterName);
}
[ExtensionAttribute]
internal static class Microsoft.Extensions.Logging.LoggingExtensions : object {
    public static string CommandsLoggerName;
    [ExtensionAttribute]
public static ILogger CreateCommandsLogger(ILoggerFactory loggerFactory);
    [ExtensionAttribute]
public static ILogger CreateCommandsLogger(ILoggerProvider loggerProvider);
}
internal enum Npgsql.EntityFrameworkCore.PostgreSQL.Design.Metadata.PostgresTypeType : Enum {
    public int value__;
    public static PostgresTypeType Base;
    public static PostgresTypeType Array;
    public static PostgresTypeType Range;
    public static PostgresTypeType Enum;
    public static PostgresTypeType Composite;
}
[ExtensionAttribute]
[DebuggerStepThroughAttribute]
internal static class System.SharedTypeExtensions : object {
    [ExtensionAttribute]
public static Type UnwrapNullableType(Type type);
    [ExtensionAttribute]
public static bool IsNullableType(Type type);
    [ExtensionAttribute]
public static Type MakeNullable(Type type);
    [ExtensionAttribute]
public static bool IsInteger(Type type);
    [ExtensionAttribute]
public static bool IsIntegerForSerial(Type type);
    [ExtensionAttribute]
public static PropertyInfo GetAnyProperty(Type type, string name);
    [ExtensionAttribute]
private static bool IsNonIntegerPrimitive(Type type);
    [ExtensionAttribute]
public static bool IsPrimitive(Type type);
    [ExtensionAttribute]
public static Type UnwrapEnumType(Type type);
}
