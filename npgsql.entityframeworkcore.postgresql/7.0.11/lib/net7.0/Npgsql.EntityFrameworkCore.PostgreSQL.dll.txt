[NullableContextAttribute("1")]
[NullableAttribute("0")]
[AttributeUsageAttribute("4")]
[BaseTypeRequiredAttribute("System.Attribute")]
internal class JetBrains.Annotations.BaseTypeRequiredAttribute : Attribute {
    [CompilerGeneratedAttribute]
private Type <BaseType>k__BackingField;
    public Type BaseType { get; }
    public BaseTypeRequiredAttribute(Type baseType);
    [CompilerGeneratedAttribute]
public Type get_BaseType();
}
[AttributeUsageAttribute("1036")]
internal class JetBrains.Annotations.CannotApplyEqualityOperatorAttribute : Attribute {
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[AttributeUsageAttribute("64")]
internal class JetBrains.Annotations.ContractAnnotationAttribute : Attribute {
    [CompilerGeneratedAttribute]
private string <Contract>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <ForceFullStates>k__BackingField;
    public string Contract { get; }
    public bool ForceFullStates { get; }
    public ContractAnnotationAttribute(string contract);
    public ContractAnnotationAttribute(string contract, bool forceFullStates);
    [CompilerGeneratedAttribute]
public string get_Contract();
    [CompilerGeneratedAttribute]
public bool get_ForceFullStates();
}
[FlagsAttribute]
internal enum JetBrains.Annotations.ImplicitUseKindFlags : Enum {
    public int value__;
    public static ImplicitUseKindFlags Default;
    public static ImplicitUseKindFlags Access;
    public static ImplicitUseKindFlags Assign;
    public static ImplicitUseKindFlags InstantiatedWithFixedConstructorSignature;
    public static ImplicitUseKindFlags InstantiatedNoFixedConstructorSignature;
}
[FlagsAttribute]
internal enum JetBrains.Annotations.ImplicitUseTargetFlags : Enum {
    public int value__;
    public static ImplicitUseTargetFlags Default;
    public static ImplicitUseTargetFlags Itself;
    public static ImplicitUseTargetFlags Members;
    public static ImplicitUseTargetFlags WithInheritors;
    public static ImplicitUseTargetFlags WithMembers;
}
[AttributeUsageAttribute("2048")]
internal class JetBrains.Annotations.InvokerParameterNameAttribute : Attribute {
}
[AttributeUsageAttribute("32767")]
internal class JetBrains.Annotations.LocalizationRequiredAttribute : Attribute {
    [CompilerGeneratedAttribute]
private bool <Required>k__BackingField;
    public bool Required { get; }
    public LocalizationRequiredAttribute(bool required);
    [CompilerGeneratedAttribute]
public bool get_Required();
}
[AttributeUsageAttribute("18436")]
internal class JetBrains.Annotations.MeansImplicitUseAttribute : Attribute {
    [CompilerGeneratedAttribute]
private ImplicitUseKindFlags <UseKindFlags>k__BackingField;
    [CompilerGeneratedAttribute]
private ImplicitUseTargetFlags <TargetFlags>k__BackingField;
    [UsedImplicitlyAttribute]
public ImplicitUseKindFlags UseKindFlags { get; }
    [UsedImplicitlyAttribute]
public ImplicitUseTargetFlags TargetFlags { get; }
    public MeansImplicitUseAttribute(ImplicitUseKindFlags useKindFlags);
    public MeansImplicitUseAttribute(ImplicitUseTargetFlags targetFlags);
    public MeansImplicitUseAttribute(ImplicitUseKindFlags useKindFlags, ImplicitUseTargetFlags targetFlags);
    [CompilerGeneratedAttribute]
public ImplicitUseKindFlags get_UseKindFlags();
    [CompilerGeneratedAttribute]
public ImplicitUseTargetFlags get_TargetFlags();
}
[AttributeUsageAttribute("2048")]
internal class JetBrains.Annotations.NoEnumerationAttribute : Attribute {
}
[AttributeUsageAttribute("6592")]
internal class JetBrains.Annotations.NonNegativeValueAttribute : Attribute {
}
[AttributeUsageAttribute("2432")]
internal class JetBrains.Annotations.RegexPatternAttribute : Attribute {
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[AttributeUsageAttribute("4320")]
internal class JetBrains.Annotations.StringFormatMethodAttribute : Attribute {
    [CompilerGeneratedAttribute]
private string <FormatParameterName>k__BackingField;
    public string FormatParameterName { get; }
    public StringFormatMethodAttribute(string formatParameterName);
    [CompilerGeneratedAttribute]
public string get_FormatParameterName();
}
[AttributeUsageAttribute("32767")]
internal class JetBrains.Annotations.UsedImplicitlyAttribute : Attribute {
    [CompilerGeneratedAttribute]
private ImplicitUseKindFlags <UseKindFlags>k__BackingField;
    [CompilerGeneratedAttribute]
private ImplicitUseTargetFlags <TargetFlags>k__BackingField;
    public ImplicitUseKindFlags UseKindFlags { get; }
    public ImplicitUseTargetFlags TargetFlags { get; }
    public UsedImplicitlyAttribute(ImplicitUseKindFlags useKindFlags);
    public UsedImplicitlyAttribute(ImplicitUseTargetFlags targetFlags);
    public UsedImplicitlyAttribute(ImplicitUseKindFlags useKindFlags, ImplicitUseTargetFlags targetFlags);
    [CompilerGeneratedAttribute]
public ImplicitUseKindFlags get_UseKindFlags();
    [CompilerGeneratedAttribute]
public ImplicitUseTargetFlags get_TargetFlags();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[AttributeUsageAttribute("2432")]
internal class JetBrains.Annotations.ValueProviderAttribute : Attribute {
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    public string Name { get; }
    public ValueProviderAttribute(string name);
    [CompilerGeneratedAttribute]
public string get_Name();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[AttributeUsageAttribute("6592")]
internal class JetBrains.Annotations.ValueRangeAttribute : Attribute {
    [CompilerGeneratedAttribute]
private object <From>k__BackingField;
    [CompilerGeneratedAttribute]
private object <To>k__BackingField;
    public object From { get; }
    public object To { get; }
    public ValueRangeAttribute(long from, long to);
    public ValueRangeAttribute(ulong from, ulong to);
    public ValueRangeAttribute(long value);
    public ValueRangeAttribute(ulong value);
    [CompilerGeneratedAttribute]
public object get_From();
    [CompilerGeneratedAttribute]
public object get_To();
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
internal class Microsoft.CodeAnalysis.EmbeddedAttribute : Attribute {
}
public static class Microsoft.EntityFrameworkCore.Diagnostics.NpgsqlEfEventId : object {
    [NullableAttribute("1")]
private static string ScaffoldingPrefix;
    public static EventId ColumnFound;
    public static EventId MissingSchemaWarning;
    public static EventId CollationFound;
    public static EventId MissingTableWarning;
    public static EventId ForeignKeyReferencesMissingPrincipalTableWarning;
    public static EventId TableFound;
    public static EventId SequenceFound;
    public static EventId PrimaryKeyFound;
    public static EventId UniqueConstraintFound;
    public static EventId IndexFound;
    public static EventId ForeignKeyFound;
    public static EventId ForeignKeyPrincipalColumnMissingWarning;
    public static EventId EnumColumnSkippedWarning;
    public static EventId ExpressionIndexSkippedWarning;
    public static EventId UnsupportedColumnIndexSkippedWarning;
    public static EventId UnsupportedColumnConstraintSkippedWarning;
    private static NpgsqlEfEventId();
    private static EventId MakeScaffoldingId(Id id);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal static class Microsoft.EntityFrameworkCore.Internal.NonCapturingLazyInitializer : object {
    public static TValue EnsureInitialized(TValue& target, TParam param, Func`2<TParam, TValue> valueFactory);
    public static TValue EnsureInitialized(TValue& target, TParam1 param1, TParam2 param2, Func`3<TParam1, TParam2, TValue> valueFactory);
    public static TValue EnsureInitialized(TValue& target, TParam1 param1, TParam2 param2, TParam3 param3, Func`4<TParam1, TParam2, TParam3, TValue> valueFactory);
    public static TValue EnsureInitialized(TValue& target, Boolean& initialized, TParam param, Func`2<TParam, TValue> valueFactory);
    public static TValue EnsureInitialized(TValue& target, TValue value);
    public static TValue EnsureInitialized(TValue& target, TParam param, Action`1<TParam> valueFactory);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[IsReadOnlyAttribute]
public class Microsoft.EntityFrameworkCore.LTree : ValueType {
    private string _value;
    public int NLevel { get; }
    public LTree(string value);
    public bool IsAncestorOf(LTree other);
    public bool IsDescendantOf(LTree other);
    public bool MatchesLQuery(string lquery);
    public bool MatchesLTxtQuery(string ltxtquery);
    public LTree Subtree(int start, int end);
    public LTree Subpath(int offset, int len);
    public LTree Subpath(int offset);
    public int get_NLevel();
    public int Index(LTree other);
    public int Index(LTree other, int offset);
    public static LTree LongestCommonAncestor(LTree[] others);
    public static LTree op_Implicit(string value);
    public static string op_Implicit(LTree ltree);
    public static bool op_Equality(LTree x, LTree y);
    public static bool op_Inequality(LTree x, LTree y);
    public sealed virtual bool Equals(LTree other);
    [NullableContextAttribute("2")]
public virtual bool Equals(object obj);
    public virtual int GetHashCode();
    public virtual string ToString();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ExtensionAttribute]
public static class Microsoft.EntityFrameworkCore.Metadata.Internal.NpgsqlIndexExtensions : object {
    [ExtensionAttribute]
public static bool AreCompatibleForNpgsql(IReadOnlyIndex index, IReadOnlyIndex duplicateIndex, StoreObjectIdentifier& storeObject, bool shouldThrow);
    private static string FormatInclude(IReadOnlyIndex index, StoreObjectIdentifier storeObject);
    [CompilerGeneratedAttribute]
internal static bool <AreCompatibleForNpgsql>g__SameColumnNames|0_0(IReadOnlyIndex index, IReadOnlyIndex duplicateIndex, StoreObjectIdentifier storeObject);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ExtensionAttribute]
public static class Microsoft.EntityFrameworkCore.NpgsqlAggregateDbFunctionsExtensions : object {
    [ExtensionAttribute]
public static T[] ArrayAgg(DbFunctions _, IEnumerable`1<T> input);
    [ExtensionAttribute]
public static T[] JsonAgg(DbFunctions _, IEnumerable`1<T> input);
    [ExtensionAttribute]
public static T[] JsonbAgg(DbFunctions _, IEnumerable`1<T> input);
    [ExtensionAttribute]
public static Nullable`1<TimeSpan> Sum(DbFunctions _, IEnumerable`1<TimeSpan> input);
    [ExtensionAttribute]
public static Nullable`1<TimeSpan> Average(DbFunctions _, IEnumerable`1<TimeSpan> input);
    [ExtensionAttribute]
public static string JsonObjectAgg(DbFunctions _, IEnumerable`1<ValueTuple`2<T1, T2>> keyValuePairs);
    [NullableContextAttribute("2")]
[ExtensionAttribute]
public static TReturn JsonObjectAgg(DbFunctions _, IEnumerable`1<ValueTuple`2<T1, T2>> keyValuePairs);
    [ExtensionAttribute]
public static string JsonbObjectAgg(DbFunctions _, IEnumerable`1<ValueTuple`2<T1, T2>> keyValuePairs);
    [NullableContextAttribute("2")]
[ExtensionAttribute]
public static TReturn JsonbObjectAgg(DbFunctions _, IEnumerable`1<ValueTuple`2<T1, T2>> keyValuePairs);
    [ExtensionAttribute]
public static Nullable`1<double> StandardDeviationSample(DbFunctions _, IEnumerable`1<byte> values);
    [ExtensionAttribute]
public static Nullable`1<double> StandardDeviationSample(DbFunctions _, IEnumerable`1<short> values);
    [ExtensionAttribute]
public static Nullable`1<double> StandardDeviationSample(DbFunctions _, IEnumerable`1<int> values);
    [ExtensionAttribute]
public static Nullable`1<double> StandardDeviationSample(DbFunctions _, IEnumerable`1<long> values);
    [ExtensionAttribute]
public static Nullable`1<double> StandardDeviationSample(DbFunctions _, IEnumerable`1<float> values);
    [ExtensionAttribute]
public static Nullable`1<double> StandardDeviationSample(DbFunctions _, IEnumerable`1<double> values);
    [ExtensionAttribute]
public static Nullable`1<double> StandardDeviationSample(DbFunctions _, IEnumerable`1<decimal> values);
    [ExtensionAttribute]
public static Nullable`1<double> StandardDeviationPopulation(DbFunctions _, IEnumerable`1<byte> values);
    [ExtensionAttribute]
public static Nullable`1<double> StandardDeviationPopulation(DbFunctions _, IEnumerable`1<short> values);
    [ExtensionAttribute]
public static Nullable`1<double> StandardDeviationPopulation(DbFunctions _, IEnumerable`1<int> values);
    [ExtensionAttribute]
public static Nullable`1<double> StandardDeviationPopulation(DbFunctions _, IEnumerable`1<long> values);
    [ExtensionAttribute]
public static Nullable`1<double> StandardDeviationPopulation(DbFunctions _, IEnumerable`1<float> values);
    [ExtensionAttribute]
public static Nullable`1<double> StandardDeviationPopulation(DbFunctions _, IEnumerable`1<double> values);
    [ExtensionAttribute]
public static Nullable`1<double> StandardDeviationPopulation(DbFunctions _, IEnumerable`1<decimal> values);
    [ExtensionAttribute]
public static Nullable`1<double> VarianceSample(DbFunctions _, IEnumerable`1<byte> values);
    [ExtensionAttribute]
public static Nullable`1<double> VarianceSample(DbFunctions _, IEnumerable`1<short> values);
    [ExtensionAttribute]
public static Nullable`1<double> VarianceSample(DbFunctions _, IEnumerable`1<int> values);
    [ExtensionAttribute]
public static Nullable`1<double> VarianceSample(DbFunctions _, IEnumerable`1<long> values);
    [ExtensionAttribute]
public static Nullable`1<double> VarianceSample(DbFunctions _, IEnumerable`1<float> values);
    [ExtensionAttribute]
public static Nullable`1<double> VarianceSample(DbFunctions _, IEnumerable`1<double> values);
    [ExtensionAttribute]
public static Nullable`1<double> VarianceSample(DbFunctions _, IEnumerable`1<decimal> values);
    [ExtensionAttribute]
public static Nullable`1<double> VariancePopulation(DbFunctions _, IEnumerable`1<byte> values);
    [ExtensionAttribute]
public static Nullable`1<double> VariancePopulation(DbFunctions _, IEnumerable`1<short> values);
    [ExtensionAttribute]
public static Nullable`1<double> VariancePopulation(DbFunctions _, IEnumerable`1<int> values);
    [ExtensionAttribute]
public static Nullable`1<double> VariancePopulation(DbFunctions _, IEnumerable`1<long> values);
    [ExtensionAttribute]
public static Nullable`1<double> VariancePopulation(DbFunctions _, IEnumerable`1<float> values);
    [ExtensionAttribute]
public static Nullable`1<double> VariancePopulation(DbFunctions _, IEnumerable`1<double> values);
    [ExtensionAttribute]
public static Nullable`1<double> VariancePopulation(DbFunctions _, IEnumerable`1<decimal> values);
    [ExtensionAttribute]
public static Nullable`1<double> Correlation(DbFunctions _, IEnumerable`1<ValueTuple`2<double, double>> values);
    [ExtensionAttribute]
public static Nullable`1<double> CovariancePopulation(DbFunctions _, IEnumerable`1<ValueTuple`2<double, double>> values);
    [ExtensionAttribute]
public static Nullable`1<double> CovarianceSample(DbFunctions _, IEnumerable`1<ValueTuple`2<double, double>> values);
    [ExtensionAttribute]
public static Nullable`1<double> RegrAverageX(DbFunctions _, IEnumerable`1<ValueTuple`2<double, double>> values);
    [ExtensionAttribute]
public static Nullable`1<double> RegrAverageY(DbFunctions _, IEnumerable`1<ValueTuple`2<double, double>> values);
    [ExtensionAttribute]
public static Nullable`1<long> RegrCount(DbFunctions _, IEnumerable`1<ValueTuple`2<double, double>> values);
    [ExtensionAttribute]
public static Nullable`1<double> RegrIntercept(DbFunctions _, IEnumerable`1<ValueTuple`2<double, double>> values);
    [ExtensionAttribute]
public static Nullable`1<double> RegrR2(DbFunctions _, IEnumerable`1<ValueTuple`2<double, double>> values);
    [ExtensionAttribute]
public static Nullable`1<double> RegrSlope(DbFunctions _, IEnumerable`1<ValueTuple`2<double, double>> values);
    [ExtensionAttribute]
public static Nullable`1<double> RegrSXX(DbFunctions _, IEnumerable`1<ValueTuple`2<double, double>> values);
    [ExtensionAttribute]
public static Nullable`1<double> RegrSXY(DbFunctions _, IEnumerable`1<ValueTuple`2<double, double>> values);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ExtensionAttribute]
public static class Microsoft.EntityFrameworkCore.NpgsqlAlterDatabaseOperationExtensions : object {
    [ExtensionAttribute]
public static IReadOnlyList`1<PostgresCollation> GetPostgresCollations(AlterDatabaseOperation operation);
    [ExtensionAttribute]
public static IReadOnlyList`1<PostgresCollation> GetOldPostgresCollations(AlterDatabaseOperation operation);
    [ExtensionAttribute]
public static IReadOnlyList`1<PostgresExtension> GetPostgresExtensions(AlterDatabaseOperation operation);
    [ExtensionAttribute]
public static IReadOnlyList`1<PostgresExtension> GetOldPostgresExtensions(AlterDatabaseOperation operation);
    [ExtensionAttribute]
public static IReadOnlyList`1<PostgresEnum> GetPostgresEnums(AlterDatabaseOperation operation);
    [ExtensionAttribute]
public static IReadOnlyList`1<PostgresEnum> GetOldPostgresEnums(AlterDatabaseOperation operation);
    [ExtensionAttribute]
public static IReadOnlyList`1<PostgresRange> GetPostgresRanges(AlterDatabaseOperation operation);
    [ExtensionAttribute]
public static IReadOnlyList`1<PostgresRange> GetOldPostgresRanges(AlterDatabaseOperation operation);
    [ExtensionAttribute]
public static PostgresExtension GetOrAddPostgresExtension(AlterDatabaseOperation operation, string schema, string name, string version);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ExtensionAttribute]
public static class Microsoft.EntityFrameworkCore.NpgsqlDatabaseFacadeExtensions : object {
    [ExtensionAttribute]
public static bool IsNpgsql(DatabaseFacade database);
    [ExtensionAttribute]
public static void SetDbDataSource(DatabaseFacade databaseFacade, DbDataSource dataSource);
    private static IRelationalDatabaseFacadeDependencies GetFacadeDependencies(DatabaseFacade databaseFacade);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ExtensionAttribute]
public static class Microsoft.EntityFrameworkCore.NpgsqlDatabaseModelExtensions : object {
    [ExtensionAttribute]
public static PostgresExtension GetOrAddPostgresExtension(DatabaseModel model, string schema, string name, string version);
    [ExtensionAttribute]
public static IReadOnlyList`1<PostgresExtension> GetPostgresExtensions(DatabaseModel model);
    [ExtensionAttribute]
public static IReadOnlyList`1<PostgresEnum> GetPostgresEnums(DatabaseModel model);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ExtensionAttribute]
public static class Microsoft.EntityFrameworkCore.NpgsqlDbContextOptionsBuilderExtensions : object {
    [ExtensionAttribute]
public static DbContextOptionsBuilder UseNpgsql(DbContextOptionsBuilder optionsBuilder, Action`1<NpgsqlDbContextOptionsBuilder> npgsqlOptionsAction);
    [ExtensionAttribute]
public static DbContextOptionsBuilder UseNpgsql(DbContextOptionsBuilder optionsBuilder, string connectionString, Action`1<NpgsqlDbContextOptionsBuilder> npgsqlOptionsAction);
    [ExtensionAttribute]
public static DbContextOptionsBuilder UseNpgsql(DbContextOptionsBuilder optionsBuilder, DbConnection connection, Action`1<NpgsqlDbContextOptionsBuilder> npgsqlOptionsAction);
    [ExtensionAttribute]
public static DbContextOptionsBuilder UseNpgsql(DbContextOptionsBuilder optionsBuilder, DbDataSource dataSource, Action`1<NpgsqlDbContextOptionsBuilder> npgsqlOptionsAction);
    [ExtensionAttribute]
public static DbContextOptionsBuilder`1<TContext> UseNpgsql(DbContextOptionsBuilder`1<TContext> optionsBuilder, Action`1<NpgsqlDbContextOptionsBuilder> npgsqlOptionsAction);
    [ExtensionAttribute]
public static DbContextOptionsBuilder`1<TContext> UseNpgsql(DbContextOptionsBuilder`1<TContext> optionsBuilder, string connectionString, Action`1<NpgsqlDbContextOptionsBuilder> npgsqlOptionsAction);
    [ExtensionAttribute]
public static DbContextOptionsBuilder`1<TContext> UseNpgsql(DbContextOptionsBuilder`1<TContext> optionsBuilder, DbConnection connection, Action`1<NpgsqlDbContextOptionsBuilder> npgsqlOptionsAction);
    [ExtensionAttribute]
public static DbContextOptionsBuilder`1<TContext> UseNpgsql(DbContextOptionsBuilder`1<TContext> optionsBuilder, DbDataSource dataSource, Action`1<NpgsqlDbContextOptionsBuilder> npgsqlOptionsAction);
    private static NpgsqlOptionsExtension GetOrCreateExtension(DbContextOptionsBuilder optionsBuilder);
    private static void ConfigureWarnings(DbContextOptionsBuilder optionsBuilder);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ExtensionAttribute]
public static class Microsoft.EntityFrameworkCore.NpgsqlDbFunctionsExtensions : object {
    [ExtensionAttribute]
public static bool ILike(DbFunctions _, string matchExpression, string pattern);
    [ExtensionAttribute]
public static bool ILike(DbFunctions _, string matchExpression, string pattern, string escapeCharacter);
    [ExtensionAttribute]
public static string Reverse(DbFunctions _, string value);
    [ExtensionAttribute]
public static bool GreaterThan(DbFunctions _, ITuple a, ITuple b);
    [ExtensionAttribute]
public static bool LessThan(DbFunctions _, ITuple a, ITuple b);
    [ExtensionAttribute]
public static bool GreaterThanOrEqual(DbFunctions _, ITuple a, ITuple b);
    [ExtensionAttribute]
public static bool LessThanOrEqual(DbFunctions _, ITuple a, ITuple b);
    [ExtensionAttribute]
public static int Distance(DbFunctions _, DateOnly a, DateOnly b);
    [ExtensionAttribute]
public static TimeSpan Distance(DbFunctions _, DateTime a, DateTime b);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ExtensionAttribute]
public static class Microsoft.EntityFrameworkCore.NpgsqlEntityTypeBuilderExtensions : object {
    [ExtensionAttribute]
public static EntityTypeBuilder`1<TEntity> HasGeneratedTsVectorColumn(EntityTypeBuilder`1<TEntity> entityTypeBuilder, Expression`1<Func`2<TEntity, NpgsqlTsVector>> tsVectorPropertyExpression, string config, Expression`1<Func`2<TEntity, object>> includeExpression);
    [ExtensionAttribute]
public static EntityTypeBuilder HasStorageParameter(EntityTypeBuilder entityTypeBuilder, string parameterName, object parameterValue);
    [ExtensionAttribute]
public static EntityTypeBuilder`1<TEntity> HasStorageParameter(EntityTypeBuilder`1<TEntity> entityTypeBuilder, string parameterName, object parameterValue);
    [ExtensionAttribute]
public static IConventionEntityTypeBuilder HasStorageParameter(IConventionEntityTypeBuilder entityTypeBuilder, string parameterName, object parameterValue, bool fromDataAnnotation);
    [ExtensionAttribute]
public static bool CanSetStorageParameter(IConventionEntityTypeBuilder entityTypeBuilder, string parameterName, object parameterValue, bool fromDataAnnotation);
    [ExtensionAttribute]
public static EntityTypeBuilder IsUnlogged(EntityTypeBuilder entityTypeBuilder, bool unlogged);
    [ExtensionAttribute]
public static EntityTypeBuilder`1<TEntity> IsUnlogged(EntityTypeBuilder`1<TEntity> entityTypeBuilder, bool unlogged);
    [ExtensionAttribute]
public static IConventionEntityTypeBuilder IsUnlogged(IConventionEntityTypeBuilder entityTypeBuilder, bool unlogged, bool fromDataAnnotation);
    [ExtensionAttribute]
public static bool CanSetIsUnlogged(IConventionEntityTypeBuilder entityTypeBuilder, bool unlogged, bool fromDataAnnotation);
    [ExtensionAttribute]
public static EntityTypeBuilder UseCockroachDbInterleaveInParent(EntityTypeBuilder entityTypeBuilder, Type parentTableType, List`1<string> interleavePrefix);
    [ExtensionAttribute]
public static EntityTypeBuilder`1<TEntity> UseCockroachDbInterleaveInParent(EntityTypeBuilder`1<TEntity> entityTypeBuilder, Type parentTableType, List`1<string> interleavePrefix);
    [ExtensionAttribute]
[ObsoleteAttribute("Use EF Core's standard IsRowVersion() or [Timestamp], see https://learn.microsoft.com/ef/core/saving/concurrency")]
public static EntityTypeBuilder UseXminAsConcurrencyToken(EntityTypeBuilder entityTypeBuilder);
    [ExtensionAttribute]
[ObsoleteAttribute("Use EF Core's standard IsRowVersion() or [Timestamp], see https://learn.microsoft.com/ef/core/saving/concurrency")]
public static EntityTypeBuilder`1<TEntity> UseXminAsConcurrencyToken(EntityTypeBuilder`1<TEntity> entityTypeBuilder);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ExtensionAttribute]
public static class Microsoft.EntityFrameworkCore.NpgsqlEntityTypeExtensions : object {
    [ExtensionAttribute]
public static Dictionary`2<string, object> GetStorageParameters(IReadOnlyEntityType entityType);
    [ExtensionAttribute]
public static string GetStorageParameter(IEntityType entityType, string parameterName);
    [ExtensionAttribute]
public static void SetStorageParameter(IMutableEntityType entityType, string parameterName, object parameterValue);
    [ExtensionAttribute]
public static object SetStorageParameter(IConventionEntityType entityType, string parameterName, object parameterValue, bool fromDataAnnotation);
    [ExtensionAttribute]
public static Nullable`1<ConfigurationSource> GetStorageParameterConfigurationSource(IConventionEntityType index, string parameterName);
    [ExtensionAttribute]
public static bool GetIsUnlogged(IReadOnlyEntityType entityType);
    [ExtensionAttribute]
public static void SetIsUnlogged(IMutableEntityType entityType, bool unlogged);
    [ExtensionAttribute]
public static bool SetIsUnlogged(IConventionEntityType entityType, bool unlogged, bool fromDataAnnotation);
    [ExtensionAttribute]
public static Nullable`1<ConfigurationSource> GetIsUnloggedConfigurationSource(IConventionEntityType index);
    [ExtensionAttribute]
public static CockroachDbInterleaveInParent GetCockroachDbInterleaveInParent(IReadOnlyEntityType entityType);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ExtensionAttribute]
public static class Microsoft.EntityFrameworkCore.NpgsqlFullTextSearchDbFunctionsExtensions : object {
    [ExtensionAttribute]
public static NpgsqlTsVector ArrayToTsVector(DbFunctions _, String[] lexemes);
    [ExtensionAttribute]
public static NpgsqlTsVector ToTsVector(DbFunctions _, string document);
    [ExtensionAttribute]
public static NpgsqlTsVector ToTsVector(DbFunctions _, string config, string document);
    [ExtensionAttribute]
public static NpgsqlTsQuery PlainToTsQuery(DbFunctions _, string query);
    [ExtensionAttribute]
public static NpgsqlTsQuery PlainToTsQuery(DbFunctions _, string config, string query);
    [ExtensionAttribute]
public static NpgsqlTsQuery PhraseToTsQuery(DbFunctions _, string query);
    [ExtensionAttribute]
public static NpgsqlTsQuery PhraseToTsQuery(DbFunctions _, string config, string query);
    [ExtensionAttribute]
public static NpgsqlTsQuery ToTsQuery(DbFunctions _, string query);
    [ExtensionAttribute]
public static NpgsqlTsQuery ToTsQuery(DbFunctions _, string config, string query);
    [ExtensionAttribute]
public static NpgsqlTsQuery WebSearchToTsQuery(DbFunctions _, string query);
    [ExtensionAttribute]
public static NpgsqlTsQuery WebSearchToTsQuery(DbFunctions _, string config, string query);
    [ExtensionAttribute]
public static string Unaccent(DbFunctions _, string regDictionary, string text);
    [ExtensionAttribute]
public static string Unaccent(DbFunctions _, string text);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ExtensionAttribute]
public static class Microsoft.EntityFrameworkCore.NpgsqlFullTextSearchLinqExtensions : object {
    [ExtensionAttribute]
public static NpgsqlTsQuery And(NpgsqlTsQuery query1, NpgsqlTsQuery query2);
    [ExtensionAttribute]
public static NpgsqlTsQuery Or(NpgsqlTsQuery query1, NpgsqlTsQuery query2);
    [ExtensionAttribute]
public static NpgsqlTsQuery ToNegative(NpgsqlTsQuery query);
    [ExtensionAttribute]
public static bool Contains(NpgsqlTsQuery query1, NpgsqlTsQuery query2);
    [ExtensionAttribute]
public static bool IsContainedIn(NpgsqlTsQuery query1, NpgsqlTsQuery query2);
    [ExtensionAttribute]
public static int GetNodeCount(NpgsqlTsQuery query);
    [ExtensionAttribute]
public static string GetQueryTree(NpgsqlTsQuery query);
    [ExtensionAttribute]
public static string GetResultHeadline(NpgsqlTsQuery query, string document);
    [ExtensionAttribute]
public static string GetResultHeadline(NpgsqlTsQuery query, string document, string options);
    [ExtensionAttribute]
public static string GetResultHeadline(NpgsqlTsQuery query, string config, string document, string options);
    [ExtensionAttribute]
public static NpgsqlTsQuery Rewrite(NpgsqlTsQuery query, NpgsqlTsQuery target, NpgsqlTsQuery substitute);
    [ExtensionAttribute]
public static NpgsqlTsQuery ToPhrase(NpgsqlTsQuery query1, NpgsqlTsQuery query2);
    [ExtensionAttribute]
public static NpgsqlTsQuery ToPhrase(NpgsqlTsQuery query1, NpgsqlTsQuery query2, int distance);
    [ExtensionAttribute]
public static bool Matches(NpgsqlTsVector vector, string query);
    [ExtensionAttribute]
public static bool Matches(NpgsqlTsVector vector, NpgsqlTsQuery query);
    [ExtensionAttribute]
public static NpgsqlTsVector Concat(NpgsqlTsVector vector1, NpgsqlTsVector vector2);
    [ExtensionAttribute]
public static NpgsqlTsVector SetWeight(NpgsqlTsVector vector, Weight weight);
    [ExtensionAttribute]
public static NpgsqlTsVector SetWeight(NpgsqlTsVector vector, Weight weight, String[] lexemes);
    [ExtensionAttribute]
public static NpgsqlTsVector SetWeight(NpgsqlTsVector vector, char weight);
    [ExtensionAttribute]
public static NpgsqlTsVector SetWeight(NpgsqlTsVector vector, char weight, String[] lexemes);
    [ExtensionAttribute]
public static NpgsqlTsVector Delete(NpgsqlTsVector vector, string lexeme);
    [ExtensionAttribute]
public static NpgsqlTsVector Delete(NpgsqlTsVector vector, String[] lexemes);
    [ExtensionAttribute]
public static NpgsqlTsVector Filter(NpgsqlTsVector vector, Char[] weights);
    [ExtensionAttribute]
public static int GetLength(NpgsqlTsVector vector);
    [ExtensionAttribute]
public static NpgsqlTsVector ToStripped(NpgsqlTsVector vector);
    [ExtensionAttribute]
public static float Rank(NpgsqlTsVector vector, NpgsqlTsQuery query);
    [ExtensionAttribute]
public static float Rank(NpgsqlTsVector vector, NpgsqlTsQuery query, NpgsqlTsRankingNormalization normalization);
    [ExtensionAttribute]
public static float Rank(NpgsqlTsVector vector, Single[] weights, NpgsqlTsQuery query);
    [ExtensionAttribute]
public static float Rank(NpgsqlTsVector vector, Single[] weights, NpgsqlTsQuery query, NpgsqlTsRankingNormalization normalization);
    [ExtensionAttribute]
public static float RankCoverDensity(NpgsqlTsVector vector, NpgsqlTsQuery query);
    [ExtensionAttribute]
public static float RankCoverDensity(NpgsqlTsVector vector, NpgsqlTsQuery query, NpgsqlTsRankingNormalization normalization);
    [ExtensionAttribute]
public static float RankCoverDensity(NpgsqlTsVector vector, Single[] weights, NpgsqlTsQuery query);
    [ExtensionAttribute]
public static float RankCoverDensity(NpgsqlTsVector vector, Single[] weights, NpgsqlTsQuery query, NpgsqlTsRankingNormalization normalization);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ExtensionAttribute]
public static class Microsoft.EntityFrameworkCore.NpgsqlFuzzyStringMatchDbFunctionsExtensions : object {
    [ExtensionAttribute]
public static string FuzzyStringMatchSoundex(DbFunctions _, string text);
    [ExtensionAttribute]
public static int FuzzyStringMatchDifference(DbFunctions _, string source, string target);
    [ExtensionAttribute]
public static int FuzzyStringMatchLevenshtein(DbFunctions _, string source, string target);
    [ExtensionAttribute]
public static int FuzzyStringMatchLevenshtein(DbFunctions _, string source, string target, int insertionCost, int deletionCost, int substitutionCost);
    [ExtensionAttribute]
public static int FuzzyStringMatchLevenshteinLessEqual(DbFunctions _, string source, string target, int maximumDistance);
    [ExtensionAttribute]
public static int FuzzyStringMatchLevenshteinLessEqual(DbFunctions _, string source, string target, int insertionCost, int deletionCost, int substitutionCost, int maximumDistance);
    [ExtensionAttribute]
public static string FuzzyStringMatchMetaphone(DbFunctions _, string text, int maximumOutputLength);
    [ExtensionAttribute]
public static string FuzzyStringMatchDoubleMetaphone(DbFunctions _, string text);
    [ExtensionAttribute]
public static string FuzzyStringMatchDoubleMetaphoneAlt(DbFunctions _, string text);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ExtensionAttribute]
public static class Microsoft.EntityFrameworkCore.NpgsqlIndexBuilderExtensions : object {
    [ExtensionAttribute]
public static IndexBuilder HasMethod(IndexBuilder indexBuilder, string method);
    [ExtensionAttribute]
public static IndexBuilder`1<TEntity> HasMethod(IndexBuilder`1<TEntity> indexBuilder, string method);
    [NullableContextAttribute("2")]
[ExtensionAttribute]
public static IConventionIndexBuilder HasMethod(IConventionIndexBuilder indexBuilder, string method, bool fromDataAnnotation);
    [ExtensionAttribute]
public static bool CanSetMethod(IConventionIndexBuilder indexBuilder, string method, bool fromDataAnnotation);
    [ExtensionAttribute]
public static IndexBuilder HasOperators(IndexBuilder indexBuilder, String[] operators);
    [ExtensionAttribute]
public static IndexBuilder`1<TEntity> HasOperators(IndexBuilder`1<TEntity> indexBuilder, String[] operators);
    [ExtensionAttribute]
public static IConventionIndexBuilder HasOperators(IConventionIndexBuilder indexBuilder, IReadOnlyList`1<string> operators, bool fromDataAnnotation);
    [ExtensionAttribute]
public static bool CanSetOperators(IConventionIndexBuilder indexBuilder, IReadOnlyList`1<string> operators, bool fromDataAnnotation);
    [ExtensionAttribute]
public static IndexBuilder IsTsVectorExpressionIndex(IndexBuilder indexBuilder, string config);
    [ExtensionAttribute]
public static IndexBuilder`1<TEntity> IsTsVectorExpressionIndex(IndexBuilder`1<TEntity> indexBuilder, string config);
    [NullableContextAttribute("2")]
[ExtensionAttribute]
public static IConventionIndexBuilder IsTsVectorExpressionIndex(IConventionIndexBuilder indexBuilder, string config);
    [ExtensionAttribute]
public static bool CanSetIsTsVectorExpressionIndex(IConventionIndexBuilder indexBuilder, string config, bool fromDataAnnotation);
    [ExtensionAttribute]
public static IndexBuilder UseCollation(IndexBuilder indexBuilder, String[] values);
    [ExtensionAttribute]
public static IndexBuilder`1<TEntity> UseCollation(IndexBuilder`1<TEntity> indexBuilder, String[] values);
    [ExtensionAttribute]
public static IConventionIndexBuilder UseCollation(IConventionIndexBuilder indexBuilder, IReadOnlyList`1<string> values, bool fromDataAnnotation);
    [ExtensionAttribute]
public static bool CanSetCollation(IConventionIndexBuilder indexBuilder, IReadOnlyList`1<string> values, bool fromDataAnnotation);
    [ExtensionAttribute]
public static IndexBuilder HasNullSortOrder(IndexBuilder indexBuilder, NullSortOrder[] values);
    [ExtensionAttribute]
public static IndexBuilder`1<TEntity> HasNullSortOrder(IndexBuilder`1<TEntity> indexBuilder, NullSortOrder[] values);
    [NullableContextAttribute("2")]
[ExtensionAttribute]
public static IConventionIndexBuilder HasNullSortOrder(IConventionIndexBuilder indexBuilder, IReadOnlyList`1<NullSortOrder> values, bool fromDataAnnotation);
    [ExtensionAttribute]
public static bool CanSetNullSortOrder(IConventionIndexBuilder indexBuilder, IReadOnlyList`1<NullSortOrder> values, bool fromDataAnnotation);
    [ExtensionAttribute]
public static IndexBuilder IncludeProperties(IndexBuilder indexBuilder, String[] propertyNames);
    [ExtensionAttribute]
public static IndexBuilder`1<TEntity> IncludeProperties(IndexBuilder`1<TEntity> indexBuilder, String[] propertyNames);
    [ExtensionAttribute]
public static IndexBuilder`1<TEntity> IncludeProperties(IndexBuilder`1<TEntity> indexBuilder, Expression`1<Func`2<TEntity, object>> includeExpression);
    [ExtensionAttribute]
public static IConventionIndexBuilder IncludeProperties(IConventionIndexBuilder indexBuilder, IReadOnlyList`1<string> propertyNames, bool fromDataAnnotation);
    [ExtensionAttribute]
public static bool CanSetIncludeProperties(IConventionIndexBuilder indexBuilder, IReadOnlyList`1<string> propertyNames, bool fromDataAnnotation);
    [ExtensionAttribute]
public static IndexBuilder IsCreatedConcurrently(IndexBuilder indexBuilder, bool createdConcurrently);
    [ExtensionAttribute]
public static IndexBuilder`1<TEntity> IsCreatedConcurrently(IndexBuilder`1<TEntity> indexBuilder, bool createdConcurrently);
    [ExtensionAttribute]
public static IConventionIndexBuilder IsCreatedConcurrently(IConventionIndexBuilder indexBuilder, Nullable`1<bool> createdConcurrently, bool fromDataAnnotation);
    [ExtensionAttribute]
public static bool CanSetIsCreatedConcurrently(IConventionIndexBuilder indexBuilder, Nullable`1<bool> createdConcurrently, bool fromDataAnnotation);
    [ExtensionAttribute]
public static IndexBuilder AreNullsDistinct(IndexBuilder indexBuilder, bool nullsDistinct);
    [ExtensionAttribute]
public static IndexBuilder`1<TEntity> AreNullsDistinct(IndexBuilder`1<TEntity> indexBuilder, bool nullsDistinct);
    [ExtensionAttribute]
public static IConventionIndexBuilder AreNullsDistinct(IConventionIndexBuilder indexBuilder, bool nullsDistinct, bool fromDataAnnotation);
    [ExtensionAttribute]
public static bool CanSetAreNullsDistinct(IConventionIndexBuilder indexBuilder, bool nullsDistinct, bool fromDataAnnotation);
    [ExtensionAttribute]
[ObsoleteAttribute("Use IsDescending instead")]
public static IndexBuilder HasSortOrder(IndexBuilder indexBuilder, SortOrder[] values);
    [ExtensionAttribute]
[ObsoleteAttribute("Use IsDescending instead")]
public static IndexBuilder`1<TEntity> HasSortOrder(IndexBuilder`1<TEntity> indexBuilder, SortOrder[] values);
    [NullableContextAttribute("2")]
[ExtensionAttribute]
[ObsoleteAttribute("Use IsDescending instead")]
public static IConventionIndexBuilder HasSortOrder(IConventionIndexBuilder indexBuilder, IReadOnlyList`1<SortOrder> values, bool fromDataAnnotation);
    [ExtensionAttribute]
[ObsoleteAttribute("Use IsDescending instead")]
public static bool CanSetSortOrder(IConventionIndexBuilder indexBuilder, IReadOnlyList`1<SortOrder> values, bool fromDataAnnotation);
    [ExtensionAttribute]
[ObsoleteAttribute("Use UseCollation")]
public static IndexBuilder HasCollation(IndexBuilder indexBuilder, String[] values);
    [ExtensionAttribute]
[ObsoleteAttribute("Use UseCollation")]
public static IndexBuilder`1<TEntity> HasCollation(IndexBuilder`1<TEntity> indexBuilder, String[] values);
    [ExtensionAttribute]
[ObsoleteAttribute("Use UseCollation")]
public static IConventionIndexBuilder HasCollation(IConventionIndexBuilder indexBuilder, IReadOnlyList`1<string> values, bool fromDataAnnotation);
    [ExtensionAttribute]
[ObsoleteAttribute("Use CanSetHasCollation")]
public static bool CanSetHasCollation(IConventionIndexBuilder indexBuilder, IReadOnlyList`1<string> values, bool fromDataAnnotation);
    [ExtensionAttribute]
[ObsoleteAttribute("Use CanSetMethod")]
public static bool CanSetHasMethod(IConventionIndexBuilder indexBuilder, string method, bool fromDataAnnotation);
    [ExtensionAttribute]
[ObsoleteAttribute("Use CanSetOperators")]
public static bool CanSetHasOperators(IConventionIndexBuilder indexBuilder, IReadOnlyList`1<string> operators, bool fromDataAnnotation);
    [ExtensionAttribute]
[ObsoleteAttribute("Use CanSetIsTsVectorExpressionIndex")]
public static bool CanSetToTsVector(IConventionIndexBuilder indexBuilder, string config, bool fromDataAnnotation);
    [ExtensionAttribute]
[ObsoleteAttribute("Use CanSetSortOrder")]
public static bool CanSetHasSortOrder(IConventionIndexBuilder indexBuilder, IReadOnlyList`1<SortOrder> values, bool fromDataAnnotation);
    [ExtensionAttribute]
[ObsoleteAttribute("Use CanSetNullSortOrder")]
public static bool CanSetHasNullSortOrder(IConventionIndexBuilder indexBuilder, IReadOnlyList`1<NullSortOrder> values, bool fromDataAnnotation);
    [ExtensionAttribute]
[ObsoleteAttribute("Use CanSetIncludeProperties")]
public static bool CanSetInclude(IConventionIndexBuilder indexBuilder, IReadOnlyList`1<string> propertyNames, bool fromDataAnnotation);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ExtensionAttribute]
public static class Microsoft.EntityFrameworkCore.NpgsqlIndexExtensions : object {
    [ExtensionAttribute]
public static string GetMethod(IReadOnlyIndex index);
    [ExtensionAttribute]
public static void SetMethod(IMutableIndex index, string method);
    [NullableContextAttribute("2")]
[ExtensionAttribute]
public static string SetMethod(IConventionIndex index, string method, bool fromDataAnnotation);
    [ExtensionAttribute]
public static Nullable`1<ConfigurationSource> GetMethodConfigurationSource(IConventionIndex index);
    [ExtensionAttribute]
public static IReadOnlyList`1<string> GetOperators(IReadOnlyIndex index);
    [ExtensionAttribute]
public static void SetOperators(IMutableIndex index, IReadOnlyList`1<string> operators);
    [ExtensionAttribute]
public static IReadOnlyList`1<string> SetOperators(IConventionIndex index, IReadOnlyList`1<string> operators, bool fromDataAnnotation);
    [ExtensionAttribute]
public static Nullable`1<ConfigurationSource> GetOperatorsConfigurationSource(IConventionIndex index);
    [ExtensionAttribute]
public static IReadOnlyList`1<string> GetCollation(IReadOnlyIndex index);
    [ExtensionAttribute]
public static void SetCollation(IMutableIndex index, IReadOnlyList`1<string> collations);
    [ExtensionAttribute]
public static IReadOnlyList`1<string> SetCollation(IConventionIndex index, IReadOnlyList`1<string> collations, bool fromDataAnnotation);
    [ExtensionAttribute]
public static Nullable`1<ConfigurationSource> GetCollationConfigurationSource(IConventionIndex index);
    [ExtensionAttribute]
public static IReadOnlyList`1<NullSortOrder> GetNullSortOrder(IReadOnlyIndex index);
    [ExtensionAttribute]
public static void SetNullSortOrder(IMutableIndex index, IReadOnlyList`1<NullSortOrder> nullSortOrder);
    [NullableContextAttribute("2")]
[ExtensionAttribute]
public static IReadOnlyList`1<NullSortOrder> SetNullSortOrder(IConventionIndex index, IReadOnlyList`1<NullSortOrder> nullSortOrder, bool fromDataAnnotation);
    [ExtensionAttribute]
public static Nullable`1<ConfigurationSource> GetNullSortOrderConfigurationSource(IConventionIndex index);
    [ExtensionAttribute]
public static IReadOnlyList`1<string> GetIncludeProperties(IReadOnlyIndex index);
    [ExtensionAttribute]
public static void SetIncludeProperties(IMutableIndex index, IReadOnlyList`1<string> properties);
    [ExtensionAttribute]
public static IReadOnlyList`1<string> SetIncludeProperties(IConventionIndex index, IReadOnlyList`1<string> properties, bool fromDataAnnotation);
    [ExtensionAttribute]
public static Nullable`1<ConfigurationSource> GetIncludePropertiesConfigurationSource(IConventionIndex index);
    [ExtensionAttribute]
public static Nullable`1<bool> IsCreatedConcurrently(IReadOnlyIndex index);
    [ExtensionAttribute]
public static void SetIsCreatedConcurrently(IMutableIndex index, Nullable`1<bool> createdConcurrently);
    [ExtensionAttribute]
public static Nullable`1<bool> SetIsCreatedConcurrently(IConventionIndex index, Nullable`1<bool> createdConcurrently, bool fromDataAnnotation);
    [ExtensionAttribute]
public static Nullable`1<ConfigurationSource> GetIsCreatedConcurrentlyConfigurationSource(IConventionIndex index);
    [ExtensionAttribute]
public static Nullable`1<bool> GetAreNullsDistinct(IReadOnlyIndex index);
    [ExtensionAttribute]
public static void SetAreNullsDistinct(IMutableIndex index, Nullable`1<bool> nullsDistinct);
    [ExtensionAttribute]
public static Nullable`1<bool> SetAreNullsDistinct(IConventionIndex index, Nullable`1<bool> nullsDistinct, bool fromDataAnnotation);
    [ExtensionAttribute]
public static Nullable`1<ConfigurationSource> GetAreNullsDistinctConfigurationSource(IConventionIndex index);
    [ExtensionAttribute]
public static string GetTsVectorConfig(IReadOnlyIndex index);
    [ExtensionAttribute]
public static void SetTsVectorConfig(IMutableIndex index, string config);
    [NullableContextAttribute("2")]
[ExtensionAttribute]
public static string SetTsVectorConfig(IConventionIndex index, string config, bool fromDataAnnotation);
    [ExtensionAttribute]
public static Nullable`1<ConfigurationSource> GetTsVectorConfigConfigurationSource(IConventionIndex index);
    [ExtensionAttribute]
[ObsoleteAttribute("Use IsDescending instead")]
public static IReadOnlyList`1<SortOrder> GetSortOrder(IReadOnlyIndex index);
    [ExtensionAttribute]
[ObsoleteAttribute("Use IsDescending instead")]
public static void SetSortOrder(IMutableIndex index, IReadOnlyList`1<SortOrder> sortOrder);
    [NullableContextAttribute("2")]
[ExtensionAttribute]
[ObsoleteAttribute("Use IsDescending instead")]
public static IReadOnlyList`1<SortOrder> SetSortOrder(IConventionIndex index, IReadOnlyList`1<SortOrder> sortOrder, bool fromDataAnnotation);
    [ExtensionAttribute]
[ObsoleteAttribute("Use IsDescending instead")]
public static Nullable`1<ConfigurationSource> GetSortOrderConfigurationSource(IConventionIndex index);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ExtensionAttribute]
public static class Microsoft.EntityFrameworkCore.NpgsqlJsonDbFunctionsExtensions : object {
    [ExtensionAttribute]
public static bool JsonContains(DbFunctions _, object json, object contained);
    [ExtensionAttribute]
public static bool JsonContained(DbFunctions _, object contained, object json);
    [ExtensionAttribute]
public static bool JsonExists(DbFunctions _, object json, string key);
    [ExtensionAttribute]
public static bool JsonExistAny(DbFunctions _, object json, String[] keys);
    [ExtensionAttribute]
public static bool JsonExistAll(DbFunctions _, object json, String[] keys);
    [ExtensionAttribute]
public static string JsonTypeof(DbFunctions _, object json);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ExtensionAttribute]
public static class Microsoft.EntityFrameworkCore.NpgsqlMigrationBuilderExtensions : object {
    [ExtensionAttribute]
public static bool IsNpgsql(MigrationBuilder builder);
    [ExtensionAttribute]
public static MigrationBuilder EnsurePostgresExtension(MigrationBuilder builder, string name, string schema, string version);
    [ExtensionAttribute]
[ObsoleteAttribute("Use EnsurePostgresExtension instead")]
public static MigrationBuilder CreatePostgresExtension(MigrationBuilder builder, string name, string schema, string version);
    [ExtensionAttribute]
[ObsoleteAttribute("This no longer does anything and should be removed.")]
public static MigrationBuilder DropPostgresExtension(MigrationBuilder builder, string name);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ExtensionAttribute]
public static class Microsoft.EntityFrameworkCore.NpgsqlModelBuilderExtensions : object {
    [ExtensionAttribute]
public static ModelBuilder UseHiLo(ModelBuilder modelBuilder, string name, string schema);
    [NullableContextAttribute("2")]
[ExtensionAttribute]
public static IConventionSequenceBuilder HasHiLoSequence(IConventionModelBuilder modelBuilder, string name, string schema, bool fromDataAnnotation);
    [NullableContextAttribute("2")]
[ExtensionAttribute]
public static bool CanSetHiLoSequence(IConventionModelBuilder modelBuilder, string name, string schema, bool fromDataAnnotation);
    [ExtensionAttribute]
public static ModelBuilder UseSerialColumns(ModelBuilder modelBuilder);
    [ExtensionAttribute]
public static ModelBuilder UseIdentityAlwaysColumns(ModelBuilder modelBuilder);
    [ExtensionAttribute]
public static ModelBuilder UseIdentityByDefaultColumns(ModelBuilder modelBuilder);
    [ExtensionAttribute]
public static ModelBuilder UseIdentityColumns(ModelBuilder modelBuilder);
    [ExtensionAttribute]
public static IConventionModelBuilder HasValueGenerationStrategy(IConventionModelBuilder modelBuilder, Nullable`1<NpgsqlValueGenerationStrategy> valueGenerationStrategy, bool fromDataAnnotation);
    [ExtensionAttribute]
public static bool CanSetValueGenerationStrategy(IConventionModelBuilder modelBuilder, Nullable`1<NpgsqlValueGenerationStrategy> valueGenerationStrategy, bool fromDataAnnotation);
    [ExtensionAttribute]
public static ModelBuilder UseKeySequences(ModelBuilder modelBuilder, string nameSuffix, string schema);
    [ExtensionAttribute]
public static ModelBuilder HasPostgresExtension(ModelBuilder modelBuilder, string schema, string name, string version);
    [ExtensionAttribute]
public static ModelBuilder HasPostgresExtension(ModelBuilder modelBuilder, string name);
    [NullableContextAttribute("2")]
[ExtensionAttribute]
public static IConventionModelBuilder HasPostgresExtension(IConventionModelBuilder modelBuilder, string schema, string name, string version, bool fromDataAnnotation);
    [ExtensionAttribute]
public static IConventionModelBuilder HasPostgresExtension(IConventionModelBuilder modelBuilder, string name, bool fromDataAnnotation);
    [ExtensionAttribute]
public static bool CanSetPostgresExtension(IConventionModelBuilder modelBuilder, string schema, string name, string version, bool fromDataAnnotation);
    [ExtensionAttribute]
public static ModelBuilder HasPostgresEnum(ModelBuilder modelBuilder, string schema, string name, String[] labels);
    [ExtensionAttribute]
public static ModelBuilder HasPostgresEnum(ModelBuilder modelBuilder, string name, String[] labels);
    [ExtensionAttribute]
public static ModelBuilder HasPostgresEnum(ModelBuilder modelBuilder, string schema, string name, INpgsqlNameTranslator nameTranslator);
    [ExtensionAttribute]
public static ModelBuilder UseDatabaseTemplate(ModelBuilder modelBuilder, string templateDatabaseName);
    [NullableContextAttribute("2")]
[ExtensionAttribute]
public static ModelBuilder HasPostgresRange(ModelBuilder modelBuilder, string schema, string name, string subtype, string canonicalFunction, string subtypeOpClass, string collation, string subtypeDiff);
    [ExtensionAttribute]
public static ModelBuilder HasPostgresRange(ModelBuilder modelBuilder, string name, string subtype);
    [ExtensionAttribute]
public static ModelBuilder UseTablespace(ModelBuilder modelBuilder, string tablespace);
    [ExtensionAttribute]
public static ModelBuilder HasCollation(ModelBuilder modelBuilder, string name, string locale, string provider, Nullable`1<bool> deterministic);
    [ExtensionAttribute]
public static ModelBuilder HasCollation(ModelBuilder modelBuilder, string schema, string name, string locale, string provider, Nullable`1<bool> deterministic);
    [ExtensionAttribute]
public static ModelBuilder HasCollation(ModelBuilder modelBuilder, string schema, string name, string lcCollate, string lcCtype, string provider, Nullable`1<bool> deterministic);
    [ExtensionAttribute]
[ObsoleteAttribute("Use EF Core's standard model bulk configuration API")]
public static ModelBuilder UseDefaultColumnCollation(ModelBuilder modelBuilder, string collation);
    [NullableContextAttribute("2")]
[ExtensionAttribute]
[ObsoleteAttribute("Use EF Core's standard model bulk configuration API")]
public static IConventionModelBuilder UseDefaultColumnCollation(IConventionModelBuilder modelBuilder, string collation, bool fromDataAnnotation);
    [ExtensionAttribute]
[ObsoleteAttribute("Use EF Core's standard model bulk configuration API")]
public static bool CanSetDefaultColumnCollation(IConventionModelBuilder modelBuilder, string collation, bool fromDataAnnotation);
    private static string GetTypePgName(INpgsqlNameTranslator nameTranslator);
    private static String[] GetMemberPgNames(INpgsqlNameTranslator nameTranslator);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ExtensionAttribute]
public static class Microsoft.EntityFrameworkCore.NpgsqlModelExtensions : object {
    public static string DefaultHiLoSequenceName;
    public static string DefaultSequenceNameSuffix;
    [ExtensionAttribute]
public static string GetHiLoSequenceName(IReadOnlyModel model);
    [ExtensionAttribute]
public static void SetHiLoSequenceName(IMutableModel model, string name);
    [NullableContextAttribute("2")]
[ExtensionAttribute]
public static string SetHiLoSequenceName(IConventionModel model, string name, bool fromDataAnnotation);
    [ExtensionAttribute]
public static Nullable`1<ConfigurationSource> GetHiLoSequenceNameConfigurationSource(IConventionModel model);
    [ExtensionAttribute]
public static string GetHiLoSequenceSchema(IReadOnlyModel model);
    [ExtensionAttribute]
public static void SetHiLoSequenceSchema(IMutableModel model, string value);
    [NullableContextAttribute("2")]
[ExtensionAttribute]
public static string SetHiLoSequenceSchema(IConventionModel model, string value, bool fromDataAnnotation);
    [ExtensionAttribute]
public static Nullable`1<ConfigurationSource> GetHiLoSequenceSchemaConfigurationSource(IConventionModel model);
    [ExtensionAttribute]
public static string GetSequenceNameSuffix(IReadOnlyModel model);
    [ExtensionAttribute]
public static void SetSequenceNameSuffix(IMutableModel model, string name);
    [NullableContextAttribute("2")]
[ExtensionAttribute]
public static string SetSequenceNameSuffix(IConventionModel model, string name, bool fromDataAnnotation);
    [ExtensionAttribute]
public static Nullable`1<ConfigurationSource> GetSequenceNameSuffixConfigurationSource(IConventionModel model);
    [ExtensionAttribute]
public static string GetSequenceSchema(IReadOnlyModel model);
    [ExtensionAttribute]
public static void SetSequenceSchema(IMutableModel model, string value);
    [NullableContextAttribute("2")]
[ExtensionAttribute]
public static string SetSequenceSchema(IConventionModel model, string value, bool fromDataAnnotation);
    [ExtensionAttribute]
public static Nullable`1<ConfigurationSource> GetSequenceSchemaConfigurationSource(IConventionModel model);
    [ExtensionAttribute]
public static Nullable`1<NpgsqlValueGenerationStrategy> GetValueGenerationStrategy(IReadOnlyModel model);
    [ExtensionAttribute]
public static void SetValueGenerationStrategy(IMutableModel model, Nullable`1<NpgsqlValueGenerationStrategy> value);
    [ExtensionAttribute]
public static Nullable`1<NpgsqlValueGenerationStrategy> SetValueGenerationStrategy(IConventionModel model, Nullable`1<NpgsqlValueGenerationStrategy> value, bool fromDataAnnotation);
    [ExtensionAttribute]
public static Nullable`1<ConfigurationSource> GetValueGenerationStrategyConfigurationSource(IConventionModel model);
    [ExtensionAttribute]
public static PostgresExtension GetOrAddPostgresExtension(IMutableModel model, string schema, string name, string version);
    [ExtensionAttribute]
public static IReadOnlyList`1<PostgresExtension> GetPostgresExtensions(IReadOnlyModel model);
    [ExtensionAttribute]
public static PostgresExtension GetOrAddPostgresExtension(IConventionModel model, string schema, string name, string version);
    [ExtensionAttribute]
public static PostgresEnum GetOrAddPostgresEnum(IMutableModel model, string schema, string name, String[] labels);
    [ExtensionAttribute]
public static IReadOnlyList`1<PostgresEnum> GetPostgresEnums(IReadOnlyModel model);
    [NullableContextAttribute("2")]
[ExtensionAttribute]
public static PostgresRange GetOrAddPostgresRange(IMutableModel model, string schema, string name, string subtype, string canonicalFunction, string subtypeOpClass, string collation, string subtypeDiff);
    [ExtensionAttribute]
public static IReadOnlyList`1<PostgresRange> PostgresRanges(IReadOnlyModel model);
    [ExtensionAttribute]
public static string GetDatabaseTemplate(IReadOnlyModel model);
    [ExtensionAttribute]
public static void SetDatabaseTemplate(IMutableModel model, string template);
    [NullableContextAttribute("2")]
[ExtensionAttribute]
public static string SetDatabaseTemplate(IConventionModel model, string template, bool fromDataAnnotation);
    [ExtensionAttribute]
public static Nullable`1<ConfigurationSource> GetDatabaseTemplateConfigurationSource(IConventionModel model);
    [ExtensionAttribute]
public static string GetTablespace(IReadOnlyModel model);
    [ExtensionAttribute]
public static void SetTablespace(IMutableModel model, string tablespace);
    [NullableContextAttribute("2")]
[ExtensionAttribute]
public static string SetTablespace(IConventionModel model, string tablespace, bool fromDataAnnotation);
    [ExtensionAttribute]
public static Nullable`1<ConfigurationSource> GetTablespaceConfigurationSource(IConventionModel model);
    [ExtensionAttribute]
public static PostgresCollation GetOrAddCollation(IMutableModel model, string schema, string name, string lcCollate, string lcCtype, string provider, Nullable`1<bool> deterministic);
    [ExtensionAttribute]
public static IReadOnlyList`1<PostgresCollation> GetCollations(IReadOnlyModel model);
    [ExtensionAttribute]
[ObsoleteAttribute("Use EF Core's standard model bulk configuration API")]
public static string GetDefaultColumnCollation(IReadOnlyModel model);
    [ExtensionAttribute]
[ObsoleteAttribute("Use EF Core's standard model bulk configuration API")]
public static void SetDefaultColumnCollation(IMutableModel model, string collation);
    [NullableContextAttribute("2")]
[ExtensionAttribute]
[ObsoleteAttribute("Use EF Core's standard model bulk configuration API")]
public static string SetDefaultColumnCollation(IConventionModel model, string collation, bool fromDataAnnotation);
    [ExtensionAttribute]
[ObsoleteAttribute("Use EF Core's standard model bulk configuration API")]
public static Nullable`1<ConfigurationSource> GetDefaultColumnCollationConfigurationSource(IConventionModel model);
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
[ExtensionAttribute]
public static class Microsoft.EntityFrameworkCore.NpgsqlMultirangeDbFunctionsExtensions : object {
    [NullableContextAttribute("1")]
[ExtensionAttribute]
public static bool Contains(NpgsqlRange`1[] multirange, T value);
    [NullableContextAttribute("1")]
[ExtensionAttribute]
public static bool Contains(List`1<NpgsqlRange`1<T>> multirange, T value);
    [ExtensionAttribute]
public static bool Contains(NpgsqlRange`1[] multirange1, NpgsqlRange`1[] multirange2);
    [ExtensionAttribute]
public static bool Contains(List`1<NpgsqlRange`1<T>> multirange1, List`1<NpgsqlRange`1<T>> multirange2);
    [ExtensionAttribute]
public static bool Contains(NpgsqlRange`1[] multirange1, NpgsqlRange`1<T> multirange2);
    [ExtensionAttribute]
public static bool Contains(List`1<NpgsqlRange`1<T>> multirange1, NpgsqlRange`1<T> multirange2);
    [ExtensionAttribute]
public static bool ContainedBy(NpgsqlRange`1[] multirange1, NpgsqlRange`1[] multirange2);
    [ExtensionAttribute]
public static bool ContainedBy(List`1<NpgsqlRange`1<T>> multirange1, List`1<NpgsqlRange`1<T>> multirange2);
    [ExtensionAttribute]
public static bool ContainedBy(NpgsqlRange`1<T> range, NpgsqlRange`1[] multirange);
    [ExtensionAttribute]
public static bool ContainedBy(NpgsqlRange`1<T> range, List`1<NpgsqlRange`1<T>> multirange);
    [ExtensionAttribute]
public static bool Overlaps(NpgsqlRange`1[] multirange1, NpgsqlRange`1[] multirange2);
    [ExtensionAttribute]
public static bool Overlaps(List`1<NpgsqlRange`1<T>> multirange1, List`1<NpgsqlRange`1<T>> multirange2);
    [ExtensionAttribute]
public static bool Overlaps(NpgsqlRange`1[] multirange, NpgsqlRange`1<T> range);
    [ExtensionAttribute]
public static bool Overlaps(List`1<NpgsqlRange`1<T>> multirange, NpgsqlRange`1<T> range);
    [ExtensionAttribute]
public static bool IsStrictlyLeftOf(NpgsqlRange`1[] multirange1, NpgsqlRange`1[] multirange2);
    [ExtensionAttribute]
public static bool IsStrictlyLeftOf(List`1<NpgsqlRange`1<T>> multirange1, List`1<NpgsqlRange`1<T>> multirange2);
    [ExtensionAttribute]
public static bool IsStrictlyLeftOf(NpgsqlRange`1[] multirange, NpgsqlRange`1<T> range);
    [ExtensionAttribute]
public static bool IsStrictlyLeftOf(List`1<NpgsqlRange`1<T>> multirange, NpgsqlRange`1<T> range);
    [ExtensionAttribute]
public static bool IsStrictlyRightOf(NpgsqlRange`1[] multirange1, NpgsqlRange`1[] multirange2);
    [ExtensionAttribute]
public static bool IsStrictlyRightOf(List`1<NpgsqlRange`1<T>> multirange1, List`1<NpgsqlRange`1<T>> multirange2);
    [ExtensionAttribute]
public static bool IsStrictlyRightOf(NpgsqlRange`1[] multirange, NpgsqlRange`1<T> range);
    [ExtensionAttribute]
public static bool IsStrictlyRightOf(List`1<NpgsqlRange`1<T>> multirange, NpgsqlRange`1<T> range);
    [ExtensionAttribute]
public static bool DoesNotExtendLeftOf(NpgsqlRange`1[] multirange1, NpgsqlRange`1[] multirange2);
    [ExtensionAttribute]
public static bool DoesNotExtendLeftOf(List`1<NpgsqlRange`1<T>> multirange1, List`1<NpgsqlRange`1<T>> multirange2);
    [ExtensionAttribute]
public static bool DoesNotExtendLeftOf(NpgsqlRange`1[] multirange, NpgsqlRange`1<T> range);
    [ExtensionAttribute]
public static bool DoesNotExtendLeftOf(List`1<NpgsqlRange`1<T>> multirange, NpgsqlRange`1<T> range);
    [ExtensionAttribute]
public static bool DoesNotExtendRightOf(NpgsqlRange`1[] multirange1, NpgsqlRange`1[] multirange2);
    [ExtensionAttribute]
public static bool DoesNotExtendRightOf(List`1<NpgsqlRange`1<T>> multirange1, List`1<NpgsqlRange`1<T>> multirange2);
    [ExtensionAttribute]
public static bool DoesNotExtendRightOf(NpgsqlRange`1[] multirange, NpgsqlRange`1<T> range);
    [ExtensionAttribute]
public static bool DoesNotExtendRightOf(List`1<NpgsqlRange`1<T>> multirange, NpgsqlRange`1<T> range);
    [ExtensionAttribute]
public static bool IsAdjacentTo(NpgsqlRange`1[] multirange1, NpgsqlRange`1[] multirange2);
    [ExtensionAttribute]
public static bool IsAdjacentTo(List`1<NpgsqlRange`1<T>> multirange1, List`1<NpgsqlRange`1<T>> multirange2);
    [ExtensionAttribute]
public static bool IsAdjacentTo(NpgsqlRange`1[] multirange, NpgsqlRange`1<T> range);
    [ExtensionAttribute]
public static bool IsAdjacentTo(List`1<NpgsqlRange`1<T>> multirange, NpgsqlRange`1<T> range);
    [ExtensionAttribute]
public static NpgsqlRange`1[] Union(NpgsqlRange`1[] multirange1, NpgsqlRange`1[] multirange2);
    [ExtensionAttribute]
public static List`1<NpgsqlRange`1<T>> Union(List`1<NpgsqlRange`1<T>> multirange1, List`1<NpgsqlRange`1<T>> multirange2);
    [ExtensionAttribute]
public static NpgsqlRange`1[] Intersect(NpgsqlRange`1[] multirange1, NpgsqlRange`1[] multirange2);
    [ExtensionAttribute]
public static List`1<NpgsqlRange`1<T>> Intersect(List`1<NpgsqlRange`1<T>> multirange1, List`1<NpgsqlRange`1<T>> multirange2);
    [ExtensionAttribute]
public static NpgsqlRange`1[] Except(NpgsqlRange`1[] multirange1, NpgsqlRange`1[] multirange2);
    [ExtensionAttribute]
public static List`1<NpgsqlRange`1<T>> Except(List`1<NpgsqlRange`1<T>> multirange1, List`1<NpgsqlRange`1<T>> multirange2);
    [ExtensionAttribute]
public static NpgsqlRange`1<T> Merge(NpgsqlRange`1[] multirange);
    [ExtensionAttribute]
public static NpgsqlRange`1<T> Merge(List`1<NpgsqlRange`1<T>> multirange);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ExtensionAttribute]
public static class Microsoft.EntityFrameworkCore.NpgsqlNetworkDbFunctionsExtensions : object {
    [ExtensionAttribute]
public static bool LessThan(DbFunctions _, IPAddress inet, IPAddress other);
    [ExtensionAttribute]
public static bool LessThan(DbFunctions _, ValueTuple`2<IPAddress, int> cidr, ValueTuple`2<IPAddress, int> other);
    [ExtensionAttribute]
public static bool LessThan(DbFunctions _, PhysicalAddress macaddr, PhysicalAddress other);
    [ExtensionAttribute]
public static bool LessThanOrEqual(DbFunctions _, IPAddress inet, IPAddress other);
    [ExtensionAttribute]
public static bool LessThanOrEqual(DbFunctions _, ValueTuple`2<IPAddress, int> cidr, ValueTuple`2<IPAddress, int> other);
    [ExtensionAttribute]
public static bool LessThanOrEqual(DbFunctions _, PhysicalAddress macaddr, PhysicalAddress other);
    [ExtensionAttribute]
public static bool GreaterThanOrEqual(DbFunctions _, IPAddress inet, IPAddress other);
    [ExtensionAttribute]
public static bool GreaterThanOrEqual(DbFunctions _, ValueTuple`2<IPAddress, int> cidr, ValueTuple`2<IPAddress, int> other);
    [ExtensionAttribute]
public static bool GreaterThanOrEqual(DbFunctions _, PhysicalAddress macaddr, PhysicalAddress other);
    [ExtensionAttribute]
public static bool GreaterThan(DbFunctions _, IPAddress inet, IPAddress other);
    [ExtensionAttribute]
public static bool GreaterThan(DbFunctions _, ValueTuple`2<IPAddress, int> cidr, ValueTuple`2<IPAddress, int> other);
    [ExtensionAttribute]
public static bool GreaterThan(DbFunctions _, PhysicalAddress macaddr, PhysicalAddress other);
    [ExtensionAttribute]
public static bool ContainedBy(DbFunctions _, IPAddress inet, IPAddress other);
    [ExtensionAttribute]
public static bool ContainedBy(DbFunctions _, IPAddress inet, ValueTuple`2<IPAddress, int> other);
    [ExtensionAttribute]
public static bool ContainedBy(DbFunctions _, ValueTuple`2<IPAddress, int> cidr, ValueTuple`2<IPAddress, int> other);
    [ExtensionAttribute]
public static bool ContainedByOrEqual(DbFunctions _, IPAddress inet, IPAddress other);
    [ExtensionAttribute]
public static bool ContainedByOrEqual(DbFunctions _, IPAddress inet, ValueTuple`2<IPAddress, int> other);
    [ExtensionAttribute]
public static bool ContainedByOrEqual(DbFunctions _, ValueTuple`2<IPAddress, int> cidr, ValueTuple`2<IPAddress, int> other);
    [ExtensionAttribute]
public static bool Contains(DbFunctions _, IPAddress inet, IPAddress other);
    [ExtensionAttribute]
public static bool Contains(DbFunctions _, ValueTuple`2<IPAddress, int> cidr, IPAddress other);
    [ExtensionAttribute]
public static bool Contains(DbFunctions _, ValueTuple`2<IPAddress, int> cidr, ValueTuple`2<IPAddress, int> other);
    [ExtensionAttribute]
public static bool ContainsOrEqual(DbFunctions _, IPAddress inet, IPAddress other);
    [ExtensionAttribute]
public static bool ContainsOrEqual(DbFunctions _, ValueTuple`2<IPAddress, int> cidr, IPAddress other);
    [ExtensionAttribute]
public static bool ContainsOrEqual(DbFunctions _, ValueTuple`2<IPAddress, int> cidr, ValueTuple`2<IPAddress, int> other);
    [ExtensionAttribute]
public static bool ContainsOrContainedBy(DbFunctions _, IPAddress inet, IPAddress other);
    [ExtensionAttribute]
public static bool ContainsOrContainedBy(DbFunctions _, ValueTuple`2<IPAddress, int> cidr, IPAddress other);
    [ExtensionAttribute]
public static bool ContainsOrContainedBy(DbFunctions _, IPAddress inet, ValueTuple`2<IPAddress, int> other);
    [ExtensionAttribute]
public static bool ContainsOrContainedBy(DbFunctions _, ValueTuple`2<IPAddress, int> cidr, ValueTuple`2<IPAddress, int> other);
    [ExtensionAttribute]
public static IPAddress BitwiseNot(DbFunctions _, IPAddress inet);
    [ExtensionAttribute]
public static ValueTuple`2<IPAddress, int> BitwiseNot(DbFunctions _, ValueTuple`2<IPAddress, int> cidr);
    [ExtensionAttribute]
public static PhysicalAddress BitwiseNot(DbFunctions _, PhysicalAddress macaddr);
    [ExtensionAttribute]
public static IPAddress BitwiseAnd(DbFunctions _, IPAddress inet, IPAddress other);
    [ExtensionAttribute]
public static ValueTuple`2<IPAddress, int> BitwiseAnd(DbFunctions _, ValueTuple`2<IPAddress, int> cidr, ValueTuple`2<IPAddress, int> other);
    [ExtensionAttribute]
public static PhysicalAddress BitwiseAnd(DbFunctions _, PhysicalAddress macaddr, PhysicalAddress other);
    [ExtensionAttribute]
public static IPAddress BitwiseOr(DbFunctions _, IPAddress inet, IPAddress other);
    [ExtensionAttribute]
public static ValueTuple`2<IPAddress, int> BitwiseOr(DbFunctions _, ValueTuple`2<IPAddress, int> cidr, ValueTuple`2<IPAddress, int> other);
    [ExtensionAttribute]
public static PhysicalAddress BitwiseOr(DbFunctions _, PhysicalAddress macaddr, PhysicalAddress other);
    [ExtensionAttribute]
public static IPAddress Add(DbFunctions _, IPAddress inet, int value);
    [ExtensionAttribute]
public static ValueTuple`2<IPAddress, int> Add(DbFunctions _, ValueTuple`2<IPAddress, int> cidr, int value);
    [ExtensionAttribute]
public static IPAddress Subtract(DbFunctions _, IPAddress inet, int value);
    [ExtensionAttribute]
public static ValueTuple`2<IPAddress, int> Subtract(DbFunctions _, ValueTuple`2<IPAddress, int> cidr, int value);
    [ExtensionAttribute]
public static int Subtract(DbFunctions _, IPAddress inet, IPAddress other);
    [ExtensionAttribute]
public static int Subtract(DbFunctions _, ValueTuple`2<IPAddress, int> cidr, ValueTuple`2<IPAddress, int> other);
    [ExtensionAttribute]
public static string Abbreviate(DbFunctions _, IPAddress inet);
    [ExtensionAttribute]
public static string Abbreviate(DbFunctions _, ValueTuple`2<IPAddress, int> cidr);
    [ExtensionAttribute]
public static IPAddress Broadcast(DbFunctions _, IPAddress inet);
    [ExtensionAttribute]
public static IPAddress Broadcast(DbFunctions _, ValueTuple`2<IPAddress, int> cidr);
    [ExtensionAttribute]
public static int Family(DbFunctions _, IPAddress inet);
    [ExtensionAttribute]
public static int Family(DbFunctions _, ValueTuple`2<IPAddress, int> cidr);
    [ExtensionAttribute]
public static string Host(DbFunctions _, IPAddress inet);
    [ExtensionAttribute]
public static string Host(DbFunctions _, ValueTuple`2<IPAddress, int> cidr);
    [ExtensionAttribute]
public static IPAddress HostMask(DbFunctions _, IPAddress inet);
    [ExtensionAttribute]
public static IPAddress HostMask(DbFunctions _, ValueTuple`2<IPAddress, int> cidr);
    [ExtensionAttribute]
public static int MaskLength(DbFunctions _, IPAddress inet);
    [ExtensionAttribute]
public static int MaskLength(DbFunctions _, ValueTuple`2<IPAddress, int> cidr);
    [ExtensionAttribute]
public static IPAddress Netmask(DbFunctions _, IPAddress inet);
    [ExtensionAttribute]
public static IPAddress Netmask(DbFunctions _, ValueTuple`2<IPAddress, int> cidr);
    [ExtensionAttribute]
public static ValueTuple`2<IPAddress, int> Network(DbFunctions _, IPAddress inet);
    [ExtensionAttribute]
public static ValueTuple`2<IPAddress, int> Network(DbFunctions _, ValueTuple`2<IPAddress, int> cidr);
    [ExtensionAttribute]
public static IPAddress SetMaskLength(DbFunctions _, IPAddress inet, int length);
    [ExtensionAttribute]
public static ValueTuple`2<IPAddress, int> SetMaskLength(DbFunctions _, ValueTuple`2<IPAddress, int> cidr, int length);
    [ExtensionAttribute]
public static string Text(DbFunctions _, IPAddress inet);
    [ExtensionAttribute]
public static string Text(DbFunctions _, ValueTuple`2<IPAddress, int> cidr);
    [ExtensionAttribute]
public static bool SameFamily(DbFunctions _, IPAddress inet, IPAddress other);
    [ExtensionAttribute]
public static bool SameFamily(DbFunctions _, ValueTuple`2<IPAddress, int> cidr, ValueTuple`2<IPAddress, int> other);
    [ExtensionAttribute]
public static ValueTuple`2<IPAddress, int> Merge(DbFunctions _, IPAddress inet, IPAddress other);
    [ExtensionAttribute]
public static ValueTuple`2<IPAddress, int> Merge(DbFunctions _, ValueTuple`2<IPAddress, int> cidr, ValueTuple`2<IPAddress, int> other);
    [ExtensionAttribute]
public static PhysicalAddress Truncate(DbFunctions _, PhysicalAddress macAddress);
    [ExtensionAttribute]
public static PhysicalAddress Set7BitMac8(DbFunctions _, PhysicalAddress macAddress);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ExtensionAttribute]
public static class Microsoft.EntityFrameworkCore.NpgsqlPropertyBuilderExtensions : object {
    [ExtensionAttribute]
public static PropertyBuilder UseHiLo(PropertyBuilder propertyBuilder, string name, string schema);
    [NullableContextAttribute("2")]
[ExtensionAttribute]
public static PropertyBuilder`1<TProperty> UseHiLo(PropertyBuilder`1<TProperty> propertyBuilder, string name, string schema);
    [NullableContextAttribute("2")]
[ExtensionAttribute]
public static IConventionSequenceBuilder HasHiLoSequence(IConventionPropertyBuilder propertyBuilder, string name, string schema, bool fromDataAnnotation);
    [NullableContextAttribute("2")]
[ExtensionAttribute]
public static bool CanSetHiLoSequence(IConventionPropertyBuilder propertyBuilder, string name, string schema, bool fromDataAnnotation);
    [ExtensionAttribute]
public static PropertyBuilder UseSequence(PropertyBuilder propertyBuilder, string name, string schema);
    [NullableContextAttribute("2")]
[ExtensionAttribute]
public static PropertyBuilder`1<TProperty> UseSequence(PropertyBuilder`1<TProperty> propertyBuilder, string name, string schema);
    [NullableContextAttribute("2")]
[ExtensionAttribute]
public static IConventionSequenceBuilder HasSequence(IConventionPropertyBuilder propertyBuilder, string name, string schema, bool fromDataAnnotation);
    [NullableContextAttribute("2")]
[ExtensionAttribute]
public static bool CanSetSequence(IConventionPropertyBuilder propertyBuilder, string name, string schema, bool fromDataAnnotation);
    [ExtensionAttribute]
public static PropertyBuilder UseSerialColumn(PropertyBuilder propertyBuilder);
    [ExtensionAttribute]
public static PropertyBuilder`1<TProperty> UseSerialColumn(PropertyBuilder`1<TProperty> propertyBuilder);
    [ExtensionAttribute]
public static PropertyBuilder UseIdentityAlwaysColumn(PropertyBuilder propertyBuilder);
    [ExtensionAttribute]
public static PropertyBuilder`1<TProperty> UseIdentityAlwaysColumn(PropertyBuilder`1<TProperty> propertyBuilder);
    [ExtensionAttribute]
public static PropertyBuilder UseIdentityByDefaultColumn(PropertyBuilder propertyBuilder);
    [ExtensionAttribute]
public static PropertyBuilder`1<TProperty> UseIdentityByDefaultColumn(PropertyBuilder`1<TProperty> propertyBuilder);
    [ExtensionAttribute]
public static PropertyBuilder UseIdentityColumn(PropertyBuilder propertyBuilder);
    [ExtensionAttribute]
public static PropertyBuilder`1<TProperty> UseIdentityColumn(PropertyBuilder`1<TProperty> propertyBuilder);
    [ExtensionAttribute]
public static IConventionPropertyBuilder HasValueGenerationStrategy(IConventionPropertyBuilder propertyBuilder, Nullable`1<NpgsqlValueGenerationStrategy> valueGenerationStrategy, bool fromDataAnnotation);
    [ExtensionAttribute]
public static bool CanSetValueGenerationStrategy(IConventionPropertyBuilder propertyBuilder, Nullable`1<NpgsqlValueGenerationStrategy> valueGenerationStrategy, bool fromDataAnnotation);
    [ExtensionAttribute]
public static PropertyBuilder HasIdentityOptions(PropertyBuilder propertyBuilder, Nullable`1<long> startValue, Nullable`1<long> incrementBy, Nullable`1<long> minValue, Nullable`1<long> maxValue, Nullable`1<bool> cyclic, Nullable`1<long> numbersToCache);
    [ExtensionAttribute]
public static PropertyBuilder`1<TProperty> HasIdentityOptions(PropertyBuilder`1<TProperty> propertyBuilder, Nullable`1<long> startValue, Nullable`1<long> incrementBy, Nullable`1<long> minValue, Nullable`1<long> maxValue, Nullable`1<bool> cyclic, Nullable`1<long> numbersToCache);
    [ExtensionAttribute]
public static IConventionPropertyBuilder HasIdentityOptions(IConventionPropertyBuilder propertyBuilder, Nullable`1<long> startValue, Nullable`1<long> incrementBy, Nullable`1<long> minValue, Nullable`1<long> maxValue, Nullable`1<bool> cyclic, Nullable`1<long> numbersToCache);
    [ExtensionAttribute]
public static bool CanSetIdentityOptions(IConventionPropertyBuilder propertyBuilder, Nullable`1<long> startValue, Nullable`1<long> incrementBy, Nullable`1<long> minValue, Nullable`1<long> maxValue, Nullable`1<bool> cyclic, Nullable`1<long> numbersToCache);
    [ExtensionAttribute]
public static PropertyBuilder`1<TElementProperty[]> HasPostgresArrayConversion(PropertyBuilder`1<TElementProperty[]> propertyBuilder, Expression`1<Func`2<TElementProperty, TElementProvider>> convertToProviderExpression, Expression`1<Func`2<TElementProvider, TElementProperty>> convertFromProviderExpression);
    [ExtensionAttribute]
public static PropertyBuilder`1<List`1<TElementProperty>> HasPostgresArrayConversion(PropertyBuilder`1<List`1<TElementProperty>> propertyBuilder, Expression`1<Func`2<TElementProperty, TElementProvider>> convertToProviderExpression, Expression`1<Func`2<TElementProvider, TElementProperty>> convertFromProviderExpression);
    [ExtensionAttribute]
public static PropertyBuilder`1<TElementProperty[]> HasPostgresArrayConversion(PropertyBuilder`1<TElementProperty[]> propertyBuilder, ValueConverter elementValueConverter);
    [ExtensionAttribute]
public static PropertyBuilder`1<List`1<TElementProperty>> HasPostgresArrayConversion(PropertyBuilder`1<List`1<TElementProperty>> propertyBuilder, ValueConverter elementValueConverter);
    [ExtensionAttribute]
public static PropertyBuilder IsGeneratedTsVectorColumn(PropertyBuilder propertyBuilder, string config, String[] includedPropertyNames);
    [ExtensionAttribute]
public static PropertyBuilder`1<NpgsqlTsVector> IsGeneratedTsVectorColumn(PropertyBuilder`1<NpgsqlTsVector> propertyBuilder, string config, String[] includedPropertyNames);
    [ExtensionAttribute]
public static IConventionPropertyBuilder IsGeneratedTsVectorColumn(IConventionPropertyBuilder propertyBuilder, string config, IReadOnlyList`1<string> includedPropertyNames, bool fromDataAnnotation);
    [ExtensionAttribute]
public static bool CanSetIsGeneratedTsVectorColumn(IConventionPropertyBuilder propertyBuilder, string config, IReadOnlyList`1<string> includedPropertyNames, bool fromDataAnnotation);
    [ExtensionAttribute]
public static PropertyBuilder UseCompressionMethod(PropertyBuilder propertyBuilder, string compressionMethod);
    [ExtensionAttribute]
public static PropertyBuilder`1<TEntity> UseCompressionMethod(PropertyBuilder`1<TEntity> propertyBuilder, string compressionMethod);
    [NullableContextAttribute("2")]
[ExtensionAttribute]
public static IConventionPropertyBuilder UseCompressionMethod(IConventionPropertyBuilder propertyBuilder, string compressionMethod, bool fromDataAnnotation);
    [ExtensionAttribute]
public static bool CanSetCompressionMethod(IConventionPropertyBuilder propertyBuilder, string compressionMethod, bool fromDataAnnotation);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ExtensionAttribute]
public static class Microsoft.EntityFrameworkCore.NpgsqlPropertyExtensions : object {
    [ExtensionAttribute]
public static string GetHiLoSequenceName(IReadOnlyProperty property);
    [ExtensionAttribute]
public static string GetHiLoSequenceName(IReadOnlyProperty property, StoreObjectIdentifier& storeObject);
    [ExtensionAttribute]
public static void SetHiLoSequenceName(IMutableProperty property, string name);
    [NullableContextAttribute("2")]
[ExtensionAttribute]
public static string SetHiLoSequenceName(IConventionProperty property, string name, bool fromDataAnnotation);
    [ExtensionAttribute]
public static Nullable`1<ConfigurationSource> GetHiLoSequenceNameConfigurationSource(IConventionProperty property);
    [ExtensionAttribute]
public static string GetHiLoSequenceSchema(IReadOnlyProperty property);
    [ExtensionAttribute]
public static string GetHiLoSequenceSchema(IReadOnlyProperty property, StoreObjectIdentifier& storeObject);
    [ExtensionAttribute]
public static void SetHiLoSequenceSchema(IMutableProperty property, string schema);
    [NullableContextAttribute("2")]
[ExtensionAttribute]
public static string SetHiLoSequenceSchema(IConventionProperty property, string schema, bool fromDataAnnotation);
    [ExtensionAttribute]
public static Nullable`1<ConfigurationSource> GetHiLoSequenceSchemaConfigurationSource(IConventionProperty property);
    [ExtensionAttribute]
public static IReadOnlySequence FindHiLoSequence(IReadOnlyProperty property);
    [ExtensionAttribute]
public static IReadOnlySequence FindHiLoSequence(IReadOnlyProperty property, StoreObjectIdentifier& storeObject);
    [ExtensionAttribute]
public static ISequence FindHiLoSequence(IProperty property);
    [ExtensionAttribute]
public static ISequence FindHiLoSequence(IProperty property, StoreObjectIdentifier& storeObject);
    [ExtensionAttribute]
public static void RemoveHiLoOptions(IMutableProperty property);
    [ExtensionAttribute]
public static void RemoveHiLoOptions(IConventionProperty property);
    [ExtensionAttribute]
public static string GetSequenceName(IReadOnlyProperty property);
    [ExtensionAttribute]
public static string GetSequenceName(IReadOnlyProperty property, StoreObjectIdentifier& storeObject);
    [ExtensionAttribute]
public static void SetSequenceName(IMutableProperty property, string name);
    [NullableContextAttribute("2")]
[ExtensionAttribute]
public static string SetSequenceName(IConventionProperty property, string name, bool fromDataAnnotation);
    [ExtensionAttribute]
public static Nullable`1<ConfigurationSource> GetSequenceNameConfigurationSource(IConventionProperty property);
    [ExtensionAttribute]
public static string GetSequenceSchema(IReadOnlyProperty property);
    [ExtensionAttribute]
public static string GetSequenceSchema(IReadOnlyProperty property, StoreObjectIdentifier& storeObject);
    [ExtensionAttribute]
public static void SetSequenceSchema(IMutableProperty property, string schema);
    [NullableContextAttribute("2")]
[ExtensionAttribute]
public static string SetSequenceSchema(IConventionProperty property, string schema, bool fromDataAnnotation);
    [ExtensionAttribute]
public static Nullable`1<ConfigurationSource> GetSequenceSchemaConfigurationSource(IConventionProperty property);
    [ExtensionAttribute]
public static IReadOnlySequence FindSequence(IReadOnlyProperty property);
    [ExtensionAttribute]
public static IReadOnlySequence FindSequence(IReadOnlyProperty property, StoreObjectIdentifier& storeObject);
    [ExtensionAttribute]
public static ISequence FindSequence(IProperty property);
    [ExtensionAttribute]
public static ISequence FindSequence(IProperty property, StoreObjectIdentifier& storeObject);
    [ExtensionAttribute]
public static NpgsqlValueGenerationStrategy GetValueGenerationStrategy(IReadOnlyProperty property);
    [ExtensionAttribute]
public static NpgsqlValueGenerationStrategy GetValueGenerationStrategy(IReadOnlyProperty property, StoreObjectIdentifier& storeObject);
    [ExtensionAttribute]
internal static NpgsqlValueGenerationStrategy GetValueGenerationStrategy(IReadOnlyProperty property, StoreObjectIdentifier& storeObject, ITypeMappingSource typeMappingSource);
    [ExtensionAttribute]
public static Nullable`1<NpgsqlValueGenerationStrategy> GetValueGenerationStrategy(IReadOnlyRelationalPropertyOverrides overrides);
    private static NpgsqlValueGenerationStrategy GetDefaultValueGenerationStrategy(IReadOnlyProperty property);
    private static NpgsqlValueGenerationStrategy GetDefaultValueGenerationStrategy(IReadOnlyProperty property, StoreObjectIdentifier& storeObject, ITypeMappingSource typeMappingSource);
    [ExtensionAttribute]
public static void SetValueGenerationStrategy(IMutableProperty property, Nullable`1<NpgsqlValueGenerationStrategy> value);
    [ExtensionAttribute]
public static Nullable`1<NpgsqlValueGenerationStrategy> SetValueGenerationStrategy(IConventionProperty property, Nullable`1<NpgsqlValueGenerationStrategy> value, bool fromDataAnnotation);
    [ExtensionAttribute]
public static void SetValueGenerationStrategy(IMutableProperty property, Nullable`1<NpgsqlValueGenerationStrategy> value, StoreObjectIdentifier& storeObject);
    [ExtensionAttribute]
public static Nullable`1<NpgsqlValueGenerationStrategy> SetValueGenerationStrategy(IConventionProperty property, Nullable`1<NpgsqlValueGenerationStrategy> value, StoreObjectIdentifier& storeObject, bool fromDataAnnotation);
    [ExtensionAttribute]
public static void SetValueGenerationStrategy(IMutableRelationalPropertyOverrides overrides, Nullable`1<NpgsqlValueGenerationStrategy> value);
    [ExtensionAttribute]
public static Nullable`1<NpgsqlValueGenerationStrategy> SetValueGenerationStrategy(IConventionRelationalPropertyOverrides overrides, Nullable`1<NpgsqlValueGenerationStrategy> value, bool fromDataAnnotation);
    private static void CheckValueGenerationStrategy(IReadOnlyProperty property, Nullable`1<NpgsqlValueGenerationStrategy> value);
    [ExtensionAttribute]
public static Nullable`1<ConfigurationSource> GetValueGenerationStrategyConfigurationSource(IConventionProperty property);
    [ExtensionAttribute]
public static Nullable`1<ConfigurationSource> GetValueGenerationStrategyConfigurationSource(IConventionProperty property, StoreObjectIdentifier& storeObject);
    [ExtensionAttribute]
public static Nullable`1<ConfigurationSource> GetValueGenerationStrategyConfigurationSource(IConventionRelationalPropertyOverrides overrides);
    public static bool IsCompatibleWithValueGeneration(IReadOnlyProperty property);
    private static bool IsCompatibleWithValueGeneration(IReadOnlyProperty property, StoreObjectIdentifier& storeObject, ITypeMappingSource typeMappingSource);
    [ExtensionAttribute]
public static Nullable`1<long> GetIdentityStartValue(IReadOnlyProperty property);
    [ExtensionAttribute]
public static void SetIdentityStartValue(IMutableProperty property, Nullable`1<long> startValue);
    [ExtensionAttribute]
public static Nullable`1<long> SetIdentityStartValue(IConventionProperty property, Nullable`1<long> startValue, bool fromDataAnnotation);
    [ExtensionAttribute]
public static Nullable`1<ConfigurationSource> GetIdentityStartValueConfigurationSource(IConventionProperty property);
    [ExtensionAttribute]
public static Nullable`1<long> GetIdentityIncrementBy(IReadOnlyProperty property);
    [ExtensionAttribute]
public static void SetIdentityIncrementBy(IMutableProperty property, Nullable`1<long> incrementBy);
    [ExtensionAttribute]
public static Nullable`1<long> SetIdentityIncrementBy(IConventionProperty property, Nullable`1<long> incrementBy, bool fromDataAnnotation);
    [ExtensionAttribute]
public static Nullable`1<ConfigurationSource> GetIdentityIncrementByConfigurationSource(IConventionProperty property);
    [ExtensionAttribute]
public static Nullable`1<long> GetIdentityMinValue(IReadOnlyProperty property);
    [ExtensionAttribute]
public static void SetIdentityMinValue(IMutableProperty property, Nullable`1<long> minValue);
    [ExtensionAttribute]
public static Nullable`1<long> SetIdentityMinValue(IConventionProperty property, Nullable`1<long> minValue, bool fromDataAnnotation);
    [ExtensionAttribute]
public static Nullable`1<ConfigurationSource> GetIdentityMinValueConfigurationSource(IConventionProperty property);
    [ExtensionAttribute]
public static Nullable`1<long> GetIdentityMaxValue(IReadOnlyProperty property);
    [ExtensionAttribute]
public static void SetIdentityMaxValue(IMutableProperty property, Nullable`1<long> maxValue);
    [ExtensionAttribute]
public static Nullable`1<long> SetIdentityMaxValue(IConventionProperty property, Nullable`1<long> maxValue, bool fromDataAnnotation);
    [ExtensionAttribute]
public static Nullable`1<ConfigurationSource> GetIdentityMaxValueConfigurationSource(IConventionProperty property);
    [ExtensionAttribute]
public static Nullable`1<bool> GetIdentityIsCyclic(IReadOnlyProperty property);
    [ExtensionAttribute]
public static void SetIdentityIsCyclic(IMutableProperty property, Nullable`1<bool> cyclic);
    [ExtensionAttribute]
public static Nullable`1<bool> SetIdentityIsCyclic(IConventionProperty property, Nullable`1<bool> cyclic, bool fromDataAnnotation);
    [ExtensionAttribute]
public static Nullable`1<ConfigurationSource> GetIdentityIsCyclicConfigurationSource(IConventionProperty property);
    [ExtensionAttribute]
public static Nullable`1<long> GetIdentityNumbersToCache(IReadOnlyProperty property);
    [ExtensionAttribute]
public static void SetIdentityNumbersToCache(IMutableProperty property, Nullable`1<long> numbersToCache);
    [ExtensionAttribute]
public static Nullable`1<long> SetIdentityNumbersToCache(IConventionProperty property, Nullable`1<long> numbersToCache, bool fromDataAnnotation);
    [ExtensionAttribute]
public static Nullable`1<ConfigurationSource> GetIdentityNumbersToCacheConfigurationSource(IConventionProperty property);
    [ExtensionAttribute]
public static void RemoveIdentityOptions(IMutableProperty property);
    [ExtensionAttribute]
public static void RemoveIdentityOptions(IConventionProperty property);
    [ExtensionAttribute]
public static string GetTsVectorConfig(IReadOnlyProperty property);
    [ExtensionAttribute]
public static void SetTsVectorConfig(IMutableProperty property, string config);
    [ExtensionAttribute]
public static string SetTsVectorConfig(IConventionProperty property, string config, bool fromDataAnnotation);
    [ExtensionAttribute]
public static Nullable`1<ConfigurationSource> GetTsVectorConfigConfigurationSource(IConventionProperty property);
    [ExtensionAttribute]
public static IReadOnlyList`1<string> GetTsVectorProperties(IReadOnlyProperty property);
    [ExtensionAttribute]
public static void SetTsVectorProperties(IMutableProperty property, IReadOnlyList`1<string> properties);
    [ExtensionAttribute]
public static IReadOnlyList`1<string> SetTsVectorProperties(IConventionProperty property, IReadOnlyList`1<string> properties, bool fromDataAnnotation);
    [ExtensionAttribute]
public static Nullable`1<ConfigurationSource> GetTsVectorPropertiesConfigurationSource(IConventionProperty property);
    [ExtensionAttribute]
[ObsoleteAttribute("Use EF Core's standard model bulk configuration API")]
public static string GetDefaultCollation(IReadOnlyProperty property);
    [ExtensionAttribute]
public static string GetCompressionMethod(IReadOnlyProperty property);
    [ExtensionAttribute]
public static string GetCompressionMethod(IReadOnlyProperty property, StoreObjectIdentifier& storeObject);
    [ExtensionAttribute]
public static void SetCompressionMethod(IMutableProperty property, string compressionMethod);
    [NullableContextAttribute("2")]
[ExtensionAttribute]
public static string SetCompressionMethod(IConventionProperty property, string compressionMethod, bool fromDataAnnotation);
    [ExtensionAttribute]
public static Nullable`1<ConfigurationSource> GetCompressionMethodConfigurationSource(IConventionProperty index);
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
[ExtensionAttribute]
public static class Microsoft.EntityFrameworkCore.NpgsqlRangeDbFunctionsExtensions : object {
    [NullableContextAttribute("1")]
[ExtensionAttribute]
public static bool Contains(NpgsqlRange`1<T> range, T value);
    [ExtensionAttribute]
public static bool Contains(NpgsqlRange`1<T> a, NpgsqlRange`1<T> b);
    [ExtensionAttribute]
public static bool ContainedBy(NpgsqlRange`1<T> a, NpgsqlRange`1<T> b);
    [ExtensionAttribute]
public static bool Overlaps(NpgsqlRange`1<T> a, NpgsqlRange`1<T> b);
    [ExtensionAttribute]
public static bool IsStrictlyLeftOf(NpgsqlRange`1<T> a, NpgsqlRange`1<T> b);
    [ExtensionAttribute]
public static bool IsStrictlyRightOf(NpgsqlRange`1<T> a, NpgsqlRange`1<T> b);
    [ExtensionAttribute]
public static bool DoesNotExtendLeftOf(NpgsqlRange`1<T> a, NpgsqlRange`1<T> b);
    [ExtensionAttribute]
public static bool DoesNotExtendRightOf(NpgsqlRange`1<T> a, NpgsqlRange`1<T> b);
    [ExtensionAttribute]
public static bool IsAdjacentTo(NpgsqlRange`1<T> a, NpgsqlRange`1<T> b);
    [ExtensionAttribute]
public static NpgsqlRange`1<T> Union(NpgsqlRange`1<T> a, NpgsqlRange`1<T> b);
    [ExtensionAttribute]
public static NpgsqlRange`1<T> Intersect(NpgsqlRange`1<T> a, NpgsqlRange`1<T> b);
    [ExtensionAttribute]
public static NpgsqlRange`1<T> Except(NpgsqlRange`1<T> a, NpgsqlRange`1<T> b);
    [ExtensionAttribute]
public static NpgsqlRange`1<T> Merge(NpgsqlRange`1<T> a, NpgsqlRange`1<T> b);
    [ExtensionAttribute]
public static NpgsqlRange`1[] RangeAgg(IEnumerable`1<NpgsqlRange`1<T>> input);
    [ExtensionAttribute]
public static NpgsqlRange`1<T> RangeIntersectAgg(IEnumerable`1<NpgsqlRange`1<T>> input);
    [ExtensionAttribute]
public static NpgsqlRange`1[] RangeIntersectAgg(IEnumerable`1<NpgsqlRange`1[]> input);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ExtensionAttribute]
public static class Microsoft.EntityFrameworkCore.NpgsqlTrigramsDbFunctionsExtensions : object {
    [ExtensionAttribute]
public static String[] TrigramsShow(DbFunctions _, string text);
    [ExtensionAttribute]
public static double TrigramsSimilarity(DbFunctions _, string source, string target);
    [ExtensionAttribute]
public static double TrigramsWordSimilarity(DbFunctions _, string source, string target);
    [ExtensionAttribute]
public static double TrigramsStrictWordSimilarity(DbFunctions _, string source, string target);
    [ExtensionAttribute]
public static bool TrigramsAreSimilar(DbFunctions _, string source, string target);
    [ExtensionAttribute]
public static bool TrigramsAreWordSimilar(DbFunctions _, string source, string target);
    [ExtensionAttribute]
public static bool TrigramsAreNotWordSimilar(DbFunctions _, string source, string target);
    [ExtensionAttribute]
public static bool TrigramsAreStrictWordSimilar(DbFunctions _, string source, string target);
    [ExtensionAttribute]
public static bool TrigramsAreNotStrictWordSimilar(DbFunctions _, string source, string target);
    [ExtensionAttribute]
public static double TrigramsSimilarityDistance(DbFunctions _, string source, string target);
    [ExtensionAttribute]
public static double TrigramsWordSimilarityDistance(DbFunctions _, string source, string target);
    [ExtensionAttribute]
public static double TrigramsWordSimilarityDistanceInverted(DbFunctions _, string source, string target);
    [ExtensionAttribute]
public static double TrigramsStrictWordSimilarityDistance(DbFunctions _, string source, string target);
    [ExtensionAttribute]
public static double TrigramsStrictWordSimilarityDistanceInverted(DbFunctions _, string source, string target);
}
[FlagsAttribute]
public enum Microsoft.EntityFrameworkCore.NpgsqlTsRankingNormalization : Enum {
    public int value__;
    public static NpgsqlTsRankingNormalization Default;
    public static NpgsqlTsRankingNormalization DivideBy1PlusLogLength;
    public static NpgsqlTsRankingNormalization DivideByLength;
    public static NpgsqlTsRankingNormalization DivideByMeanHarmonicDistanceBetweenExtents;
    public static NpgsqlTsRankingNormalization DivideByUniqueWordCount;
    public static NpgsqlTsRankingNormalization DividesBy1PlusLogUniqueWordCount;
    public static NpgsqlTsRankingNormalization DivideByItselfPlusOne;
}
[ExtensionAttribute]
internal static class Microsoft.EntityFrameworkCore.Storage.RelationalTypeMappingExtensions : object {
    [NullableContextAttribute("1")]
[ExtensionAttribute]
internal static string GenerateEmbeddedSqlLiteral(RelationalTypeMapping mapping, object value);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[DebuggerStepThroughAttribute]
internal static class Microsoft.EntityFrameworkCore.Utilities.Check : object {
    [ContractAnnotationAttribute("value:null => halt")]
public static T NotNull(T value, string parameterName);
    [ContractAnnotationAttribute("value:null => halt")]
public static IReadOnlyList`1<T> NotEmpty(IReadOnlyList`1<T> value, string parameterName);
    [ContractAnnotationAttribute("value:null => halt")]
public static string NotEmpty(string value, string parameterName);
    [NullableContextAttribute("2")]
public static string NullButNotEmpty(string value, string parameterName);
    public static IReadOnlyCollection`1<T> NullButNotEmpty(IReadOnlyCollection`1<T> value, string parameterName);
    public static IReadOnlyList`1<T> HasNoNulls(IReadOnlyList`1<T> value, string parameterName);
    public static IReadOnlyList`1<string> HasNoEmptyElements(IReadOnlyList`1<string> value, string parameterName);
    [ConditionalAttribute("DEBUG")]
public static void DebugAssert(bool condition, string message);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ExtensionAttribute]
public static class Microsoft.Extensions.DependencyInjection.NpgsqlServiceCollectionExtensions : object {
    [ExtensionAttribute]
public static IServiceCollection AddNpgsql(IServiceCollection serviceCollection, string connectionString, Action`1<NpgsqlDbContextOptionsBuilder> npgsqlOptionsAction, Action`1<DbContextOptionsBuilder> optionsAction);
    [ExtensionAttribute]
public static IServiceCollection AddEntityFrameworkNpgsql(IServiceCollection serviceCollection);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Npgsql.EntityFrameworkCore.PostgreSQL.Design.Internal.NpgsqlAnnotationCodeGenerator : AnnotationCodeGenerator {
    private static MethodInfo ModelHasPostgresExtensionMethodInfo1;
    private static MethodInfo ModelHasPostgresExtensionMethodInfo2;
    private static MethodInfo ModelHasPostgresEnumMethodInfo1;
    private static MethodInfo ModelHasPostgresEnumMethodInfo2;
    private static MethodInfo ModelHasPostgresRangeMethodInfo1;
    private static MethodInfo ModelHasPostgresRangeMethodInfo2;
    private static MethodInfo ModelUseSerialColumnsMethodInfo;
    private static MethodInfo ModelUseIdentityAlwaysColumnsMethodInfo;
    private static MethodInfo ModelUseIdentityByDefaultColumnsMethodInfo;
    private static MethodInfo ModelUseHiLoMethodInfo;
    private static MethodInfo ModelHasAnnotationMethodInfo;
    private static MethodInfo ModelUseKeySequencesMethodInfo;
    private static MethodInfo EntityTypeIsUnloggedMethodInfo;
    private static MethodInfo PropertyUseSerialColumnMethodInfo;
    private static MethodInfo PropertyUseIdentityAlwaysColumnMethodInfo;
    private static MethodInfo PropertyUseIdentityByDefaultColumnMethodInfo;
    private static MethodInfo PropertyUseHiLoMethodInfo;
    private static MethodInfo PropertyHasIdentityOptionsMethodInfo;
    private static MethodInfo PropertyUseSequenceMethodInfo;
    private static MethodInfo IndexUseCollationMethodInfo;
    private static MethodInfo IndexHasMethodMethodInfo;
    private static MethodInfo IndexHasOperatorsMethodInfo;
    private static MethodInfo IndexHasSortOrderMethodInfo;
    private static MethodInfo IndexHasNullSortOrderMethodInfo;
    private static MethodInfo IndexIncludePropertiesMethodInfo;
    private static MethodInfo IndexAreNullsDistinctMethodInfo;
    public NpgsqlAnnotationCodeGenerator(AnnotationCodeGeneratorDependencies dependencies);
    private static NpgsqlAnnotationCodeGenerator();
    protected virtual bool IsHandledByConvention(IModel model, IAnnotation annotation);
    protected virtual bool IsHandledByConvention(IIndex index, IAnnotation annotation);
    protected virtual bool IsHandledByConvention(IProperty property, IAnnotation annotation);
    public virtual IReadOnlyList`1<MethodCallCodeFragment> GenerateFluentApiCalls(IModel model, IDictionary`2<string, IAnnotation> annotations);
    protected virtual MethodCallCodeFragment GenerateFluentApi(IModel model, IAnnotation annotation);
    protected virtual MethodCallCodeFragment GenerateFluentApi(IEntityType entityType, IAnnotation annotation);
    public virtual IReadOnlyList`1<MethodCallCodeFragment> GenerateFluentApiCalls(IProperty property, IDictionary`2<string, IAnnotation> annotations);
    private MethodCallCodeFragment GenerateValueGenerationStrategy(IDictionary`2<string, IAnnotation> annotations, bool onModel);
    private MethodCallCodeFragment GenerateIdentityOptions(IDictionary`2<string, IAnnotation> annotations);
    protected virtual MethodCallCodeFragment GenerateFluentApi(IIndex index, IAnnotation annotation);
    private static bool TryGetAndRemove(IDictionary`2<string, IAnnotation> annotations, string annotationName, T& annotationValue);
    [CompilerGeneratedAttribute]
internal static T <GenerateValueGenerationStrategy>g__GetAndRemove|34_0(string annotationName, <>c__DisplayClass34_0& );
}
public class Npgsql.EntityFrameworkCore.PostgreSQL.Design.Internal.NpgsqlDesignTimeServices : object {
    [NullableContextAttribute("1")]
public virtual void ConfigureDesignTimeServices(IServiceCollection serviceCollection);
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
public class Npgsql.EntityFrameworkCore.PostgreSQL.Diagnostics.Internal.NpgsqlLoggingDefinitions : RelationalLoggingDefinitions {
    public EventDefinitionBase LogFoundDefaultSchema;
    public EventDefinitionBase LogFoundColumn;
    public EventDefinitionBase LogFoundForeignKey;
    public EventDefinitionBase LogFoundCollation;
    public EventDefinitionBase LogPrincipalTableNotInSelectionSet;
    public EventDefinitionBase LogMissingSchema;
    public EventDefinitionBase LogMissingTable;
    public EventDefinitionBase LogFoundSequence;
    public EventDefinitionBase LogFoundTable;
    public EventDefinitionBase LogFoundIndex;
    public EventDefinitionBase LogFoundPrimaryKey;
    public EventDefinitionBase LogFoundUniqueConstraint;
    public EventDefinitionBase LogPrincipalColumnNotFound;
    public EventDefinitionBase LogEnumColumnSkipped;
    public EventDefinitionBase LogExpressionIndexSkipped;
    public EventDefinitionBase LogUnsupportedColumnConstraintSkipped;
    public EventDefinitionBase LogUnsupportedColumnIndexSkipped;
}
[NullableContextAttribute("2")]
public interface Npgsql.EntityFrameworkCore.PostgreSQL.Infrastructure.Internal.INpgsqlSingletonOptions {
    [NullableAttribute("1")]
public Version PostgresVersion { get; }
    public Version PostgresVersionWithoutDefault { get; }
    public bool UseRedshift { get; }
    public bool ReverseNullOrderingEnabled { get; }
    public DbDataSource DataSource { get; }
    [NullableAttribute("1")]
public IReadOnlyList`1<UserRangeDefinition> UserRangeDefinitions { get; }
    public IServiceProvider ApplicationServiceProvider { get; }
    [NullableContextAttribute("1")]
public abstract virtual Version get_PostgresVersion();
    public abstract virtual Version get_PostgresVersionWithoutDefault();
    public abstract virtual bool get_UseRedshift();
    public abstract virtual bool get_ReverseNullOrderingEnabled();
    public abstract virtual DbDataSource get_DataSource();
    [NullableContextAttribute("1")]
public abstract virtual IReadOnlyList`1<UserRangeDefinition> get_UserRangeDefinitions();
    public abstract virtual IServiceProvider get_ApplicationServiceProvider();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Npgsql.EntityFrameworkCore.PostgreSQL.Infrastructure.Internal.NpgsqlModelValidator : RelationalModelValidator {
    private Version _postgresVersion;
    public NpgsqlModelValidator(ModelValidatorDependencies dependencies, RelationalModelValidatorDependencies relationalDependencies, INpgsqlSingletonOptions npgsqlSingletonOptions);
    public virtual void Validate(IModel model, IDiagnosticsLogger`1<Validation> logger);
    protected virtual void ValidateIdentityVersionCompatibility(IModel model);
    protected virtual void ValidateValueGeneration(IEntityType entityType, IKey key, IDiagnosticsLogger`1<Validation> logger);
    protected virtual void ValidateIndexIncludeProperties(IModel model);
    protected virtual void ValidateStoredProcedures(IModel model, IDiagnosticsLogger`1<Validation> logger);
    protected virtual void ValidateJsonEntities(IModel model, IDiagnosticsLogger`1<Validation> logger);
    protected virtual void ValidateCompatible(IProperty property, IProperty duplicateProperty, string columnName, StoreObjectIdentifier& modreq(System.Runtime.InteropServices.InAttribute) storeObject, IDiagnosticsLogger`1<Validation> logger);
    [CompilerGeneratedAttribute]
internal static void <ValidateStoredProcedures>g__ValidateSproc|6_0(IStoredProcedure sproc, IDiagnosticsLogger`1<Validation> logger);
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
public class Npgsql.EntityFrameworkCore.PostgreSQL.Infrastructure.Internal.NpgsqlOptionsExtension : RelationalOptionsExtension {
    private DbContextOptionsExtensionInfo _info;
    [NullableAttribute("1")]
private List`1<UserRangeDefinition> _userRangeDefinitions;
    private Version _postgresVersion;
    [NullableAttribute("1")]
public static Version DefaultPostgresVersion;
    [CompilerGeneratedAttribute]
private DbDataSource <DataSource>k__BackingField;
    [CompilerGeneratedAttribute]
private string <AdminDatabase>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <UseRedshift>k__BackingField;
    [CompilerGeneratedAttribute]
private ProvideClientCertificatesCallback <ProvideClientCertificatesCallback>k__BackingField;
    [CompilerGeneratedAttribute]
private RemoteCertificateValidationCallback <RemoteCertificateValidationCallback>k__BackingField;
    [CompilerGeneratedAttribute]
private ProvidePasswordCallback <ProvidePasswordCallback>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <ReverseNullOrdering>k__BackingField;
    [NullableAttribute("1")]
public Version PostgresVersion { get; }
    public Version PostgresVersionWithoutDefault { get; }
    public DbDataSource DataSource { get; private set; }
    public string AdminDatabase { get; private set; }
    public bool UseRedshift { get; private set; }
    [NullableAttribute("1")]
public IReadOnlyList`1<UserRangeDefinition> UserRangeDefinitions { get; }
    public ProvideClientCertificatesCallback ProvideClientCertificatesCallback { get; private set; }
    public RemoteCertificateValidationCallback RemoteCertificateValidationCallback { get; private set; }
    public ProvidePasswordCallback ProvidePasswordCallback { get; private set; }
    public bool ReverseNullOrdering { get; private set; }
    public Nullable`1<int> MinBatchSize { get; }
    [NullableAttribute("1")]
public DbContextOptionsExtensionInfo Info { get; }
    [NullableContextAttribute("1")]
public NpgsqlOptionsExtension(NpgsqlOptionsExtension copyFrom);
    private static NpgsqlOptionsExtension();
    [NullableContextAttribute("1")]
public virtual Version get_PostgresVersion();
    public virtual Version get_PostgresVersionWithoutDefault();
    [CompilerGeneratedAttribute]
public virtual DbDataSource get_DataSource();
    [CompilerGeneratedAttribute]
private void set_DataSource(DbDataSource value);
    [CompilerGeneratedAttribute]
public virtual string get_AdminDatabase();
    [CompilerGeneratedAttribute]
private void set_AdminDatabase(string value);
    [CompilerGeneratedAttribute]
public virtual bool get_UseRedshift();
    [CompilerGeneratedAttribute]
private void set_UseRedshift(bool value);
    [NullableContextAttribute("1")]
public virtual IReadOnlyList`1<UserRangeDefinition> get_UserRangeDefinitions();
    [CompilerGeneratedAttribute]
public virtual ProvideClientCertificatesCallback get_ProvideClientCertificatesCallback();
    [CompilerGeneratedAttribute]
private void set_ProvideClientCertificatesCallback(ProvideClientCertificatesCallback value);
    [CompilerGeneratedAttribute]
public virtual RemoteCertificateValidationCallback get_RemoteCertificateValidationCallback();
    [CompilerGeneratedAttribute]
private void set_RemoteCertificateValidationCallback(RemoteCertificateValidationCallback value);
    [CompilerGeneratedAttribute]
public virtual ProvidePasswordCallback get_ProvidePasswordCallback();
    [CompilerGeneratedAttribute]
private void set_ProvidePasswordCallback(ProvidePasswordCallback value);
    [CompilerGeneratedAttribute]
public virtual bool get_ReverseNullOrdering();
    [CompilerGeneratedAttribute]
private void set_ReverseNullOrdering(bool value);
    public virtual Nullable`1<int> get_MinBatchSize();
    [NullableContextAttribute("1")]
public virtual RelationalOptionsExtension WithDataSource(DbDataSource dataSource);
    [NullableContextAttribute("1")]
public virtual RelationalOptionsExtension WithConnectionString(string connectionString);
    [NullableContextAttribute("1")]
public virtual RelationalOptionsExtension WithConnection(DbConnection connection);
    public virtual NpgsqlOptionsExtension WithUserRangeDefinition(string rangeName, string schemaName, string subtypeName);
    [NullableContextAttribute("1")]
public virtual NpgsqlOptionsExtension WithUserRangeDefinition(string rangeName, string schemaName, Type subtypeClrType, string subtypeName);
    [NullableContextAttribute("1")]
public virtual NpgsqlOptionsExtension WithAdminDatabase(string adminDatabase);
    [NullableContextAttribute("1")]
public virtual NpgsqlOptionsExtension WithPostgresVersion(Version postgresVersion);
    [NullableContextAttribute("1")]
public virtual NpgsqlOptionsExtension WithRedshift(bool useRedshift);
    [NullableContextAttribute("1")]
internal virtual NpgsqlOptionsExtension WithReverseNullOrdering(bool reverseNullOrdering);
    [NullableContextAttribute("1")]
public virtual void Validate(IDbContextOptions options);
    [NullableContextAttribute("1")]
public virtual NpgsqlOptionsExtension WithProvideClientCertificatesCallback(ProvideClientCertificatesCallback callback);
    [NullableContextAttribute("1")]
public virtual NpgsqlOptionsExtension WithRemoteCertificateValidationCallback(RemoteCertificateValidationCallback callback);
    [NullableContextAttribute("1")]
public virtual NpgsqlOptionsExtension WithProvidePasswordCallback(ProvidePasswordCallback callback);
    [NullableContextAttribute("1")]
protected virtual RelationalOptionsExtension Clone();
    [NullableContextAttribute("1")]
public virtual void ApplyServices(IServiceCollection services);
    [NullableContextAttribute("1")]
public virtual DbContextOptionsExtensionInfo get_Info();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Npgsql.EntityFrameworkCore.PostgreSQL.Infrastructure.Internal.UserRangeDefinition : object {
    [CompilerGeneratedAttribute]
private string <RangeName>k__BackingField;
    [NullableAttribute("2")]
[CompilerGeneratedAttribute]
private string <SchemaName>k__BackingField;
    [CompilerGeneratedAttribute]
private Type <SubtypeClrType>k__BackingField;
    [NullableAttribute("2")]
[CompilerGeneratedAttribute]
private string <SubtypeName>k__BackingField;
    [CompilerGeneratedAttribute]
protected Type EqualityContract { get; }
    public string RangeName { get; }
    [NullableAttribute("2")]
public string SchemaName { get; }
    public Type SubtypeClrType { get; }
    [NullableAttribute("2")]
public string SubtypeName { get; }
    public UserRangeDefinition(string rangeName, string schemaName, Type subtypeClrType, string subtypeName);
    [CompilerGeneratedAttribute]
protected UserRangeDefinition(UserRangeDefinition original);
    [CompilerGeneratedAttribute]
protected virtual Type get_EqualityContract();
    [CompilerGeneratedAttribute]
public virtual string get_RangeName();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public virtual string get_SchemaName();
    [CompilerGeneratedAttribute]
public virtual Type get_SubtypeClrType();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public virtual string get_SubtypeName();
    [CompilerGeneratedAttribute]
public virtual string ToString();
    [CompilerGeneratedAttribute]
protected virtual bool PrintMembers(StringBuilder builder);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public static bool op_Inequality(UserRangeDefinition left, UserRangeDefinition right);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public static bool op_Equality(UserRangeDefinition left, UserRangeDefinition right);
    [CompilerGeneratedAttribute]
public virtual int GetHashCode();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public virtual bool Equals(object obj);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public virtual bool Equals(UserRangeDefinition other);
    [CompilerGeneratedAttribute]
public virtual UserRangeDefinition <Clone>$();
}
[NullableContextAttribute("1")]
[NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public class Npgsql.EntityFrameworkCore.PostgreSQL.Infrastructure.NpgsqlDbContextOptionsBuilder : RelationalDbContextOptionsBuilder`2<NpgsqlDbContextOptionsBuilder, NpgsqlOptionsExtension> {
    public NpgsqlDbContextOptionsBuilder(DbContextOptionsBuilder optionsBuilder);
    public virtual NpgsqlDbContextOptionsBuilder UseAdminDatabase(string dbName);
    public virtual NpgsqlDbContextOptionsBuilder SetPostgresVersion(Version postgresVersion);
    public virtual NpgsqlDbContextOptionsBuilder SetPostgresVersion(int major, int minor);
    public virtual NpgsqlDbContextOptionsBuilder UseRedshift(bool useRedshift);
    [NullableContextAttribute("2")]
public virtual NpgsqlDbContextOptionsBuilder MapRange(string rangeName, string schemaName, string subtypeName);
    public virtual NpgsqlDbContextOptionsBuilder MapRange(string rangeName, Type subtypeClrType, string schemaName, string subtypeName);
    internal virtual NpgsqlDbContextOptionsBuilder ReverseNullOrdering(bool reverseNullOrdering);
    public virtual NpgsqlDbContextOptionsBuilder ProvideClientCertificatesCallback(ProvideClientCertificatesCallback callback);
    public virtual NpgsqlDbContextOptionsBuilder RemoteCertificateValidationCallback(RemoteCertificateValidationCallback callback);
    public virtual NpgsqlDbContextOptionsBuilder ProvidePasswordCallback(ProvidePasswordCallback callback);
    public virtual NpgsqlDbContextOptionsBuilder EnableRetryOnFailure();
    public virtual NpgsqlDbContextOptionsBuilder EnableRetryOnFailure(int maxRetryCount);
    public virtual NpgsqlDbContextOptionsBuilder EnableRetryOnFailure(ICollection`1<string> errorCodesToAdd);
    public virtual NpgsqlDbContextOptionsBuilder EnableRetryOnFailure(int maxRetryCount, TimeSpan maxRetryDelay, ICollection`1<string> errorCodesToAdd);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal static class Npgsql.EntityFrameworkCore.PostgreSQL.Internal.EnumerableMethods : object {
    [CompilerGeneratedAttribute]
private static MethodInfo <All>k__BackingField;
    [CompilerGeneratedAttribute]
private static MethodInfo <AnyWithPredicate>k__BackingField;
    [CompilerGeneratedAttribute]
private static MethodInfo <Contains>k__BackingField;
    [CompilerGeneratedAttribute]
private static MethodInfo <FirstWithoutPredicate>k__BackingField;
    [CompilerGeneratedAttribute]
private static MethodInfo <FirstOrDefaultWithPredicate>k__BackingField;
    public static MethodInfo All { get; }
    public static MethodInfo AnyWithPredicate { get; }
    public static MethodInfo Contains { get; }
    public static MethodInfo FirstWithoutPredicate { get; }
    public static MethodInfo FirstOrDefaultWithPredicate { get; }
    private static EnumerableMethods();
    [CompilerGeneratedAttribute]
public static MethodInfo get_All();
    [CompilerGeneratedAttribute]
public static MethodInfo get_AnyWithPredicate();
    [CompilerGeneratedAttribute]
public static MethodInfo get_Contains();
    [CompilerGeneratedAttribute]
public static MethodInfo get_FirstWithoutPredicate();
    [CompilerGeneratedAttribute]
public static MethodInfo get_FirstOrDefaultWithPredicate();
    [CompilerGeneratedAttribute]
internal static MethodInfo <.cctor>g__GetMethod|15_8(string name, int genericParameterCount, Func`2<Type[], Type[]> parameterGenerator, <>c__DisplayClass15_0& );
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ExtensionAttribute]
internal static class Npgsql.EntityFrameworkCore.PostgreSQL.Internal.IReadOnlyListExtensions : object {
    [ExtensionAttribute]
public static IReadOnlyList`1<T> Slice(IReadOnlyList`1<T> list, int start);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ExtensionAttribute]
public static class Npgsql.EntityFrameworkCore.PostgreSQL.Internal.NpgsqlLoggerExtensions : object {
    [ExtensionAttribute]
public static void MissingSchemaWarning(IDiagnosticsLogger`1<Scaffolding> diagnostics, string schemaName);
    [ExtensionAttribute]
public static void MissingTableWarning(IDiagnosticsLogger`1<Scaffolding> diagnostics, string tableName);
    [NullableContextAttribute("2")]
[ExtensionAttribute]
public static void ForeignKeyReferencesMissingPrincipalTableWarning(IDiagnosticsLogger`1<Scaffolding> diagnostics, string foreignKeyName, string tableName, string principalTableName);
    [ExtensionAttribute]
public static void ColumnFound(IDiagnosticsLogger`1<Scaffolding> diagnostics, string tableName, string columnName, string dataTypeName, bool nullable, bool identity, string defaultValue, string computedValue);
    [ExtensionAttribute]
public static void CollationFound(IDiagnosticsLogger`1<Scaffolding> diagnostics, string schema, string collationName, string lcCollate, string lcCtype, string provider, bool deterministic);
    [ExtensionAttribute]
public static void UniqueConstraintFound(IDiagnosticsLogger`1<Scaffolding> diagnostics, string uniqueConstraintName, string tableName);
    [ExtensionAttribute]
public static void EnumColumnSkippedWarning(IDiagnosticsLogger`1<Scaffolding> diagnostics, string columnName);
    [ExtensionAttribute]
public static void ExpressionIndexSkippedWarning(IDiagnosticsLogger`1<Scaffolding> diagnostics, string indexName, string tableName);
    [ExtensionAttribute]
public static void UnsupportedColumnIndexSkippedWarning(IDiagnosticsLogger`1<Scaffolding> diagnostics, string indexName, string tableName);
    [ExtensionAttribute]
public static void UnsupportedColumnConstraintSkippedWarning(IDiagnosticsLogger`1<Scaffolding> diagnostics, string indexName, string tableName);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public static class Npgsql.EntityFrameworkCore.PostgreSQL.Internal.NpgsqlResources : object {
    private static ResourceManager _resourceManager;
    private static NpgsqlResources();
    public static EventDefinition`1<string> LogEnumColumnSkipped(IDiagnosticsLogger logger);
    public static EventDefinition`2<string, string> LogExpressionIndexSkipped(IDiagnosticsLogger logger);
    public static EventDefinition`6<string, string, string, string, string, bool> LogFoundCollation(IDiagnosticsLogger logger);
    public static FallbackEventDefinition LogFoundColumn(IDiagnosticsLogger logger);
    public static EventDefinition`4<string, string, string, string> LogFoundForeignKey(IDiagnosticsLogger logger);
    public static EventDefinition`3<string, string, bool> LogFoundIndex(IDiagnosticsLogger logger);
    public static EventDefinition`2<string, string> LogFoundPrimaryKey(IDiagnosticsLogger logger);
    public static FallbackEventDefinition LogFoundSequence(IDiagnosticsLogger logger);
    public static EventDefinition`1<string> LogFoundTable(IDiagnosticsLogger logger);
    public static EventDefinition`2<string, string> LogFoundUniqueConstraint(IDiagnosticsLogger logger);
    public static EventDefinition`1<string> LogMissingSchema(IDiagnosticsLogger logger);
    public static EventDefinition`1<string> LogMissingTable(IDiagnosticsLogger logger);
    public static EventDefinition`4<string, string, string, string> LogPrincipalColumnNotFound(IDiagnosticsLogger logger);
    public static EventDefinition`3<string, string, string> LogPrincipalTableNotInSelectionSet(IDiagnosticsLogger logger);
    public static EventDefinition`2<string, string> LogUnsupportedColumnConstraintSkipped(IDiagnosticsLogger logger);
    public static EventDefinition`2<string, string> LogUnsupportedColumnIndexSkipped(IDiagnosticsLogger logger);
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
public class Npgsql.EntityFrameworkCore.PostgreSQL.Internal.NpgsqlSingletonOptions : object {
    [NullableAttribute("1")]
[CompilerGeneratedAttribute]
private Version <PostgresVersion>k__BackingField;
    [CompilerGeneratedAttribute]
private Version <PostgresVersionWithoutDefault>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <UseRedshift>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <ReverseNullOrderingEnabled>k__BackingField;
    [CompilerGeneratedAttribute]
private DbDataSource <DataSource>k__BackingField;
    [NullableAttribute("1")]
[CompilerGeneratedAttribute]
private IReadOnlyList`1<UserRangeDefinition> <UserRangeDefinitions>k__BackingField;
    [CompilerGeneratedAttribute]
private IServiceProvider <ApplicationServiceProvider>k__BackingField;
    [NullableAttribute("1")]
public Version PostgresVersion { get; private set; }
    public Version PostgresVersionWithoutDefault { get; private set; }
    public bool UseRedshift { get; private set; }
    public bool ReverseNullOrderingEnabled { get; private set; }
    public DbDataSource DataSource { get; private set; }
    [NullableAttribute("1")]
public IReadOnlyList`1<UserRangeDefinition> UserRangeDefinitions { get; private set; }
    public IServiceProvider ApplicationServiceProvider { get; private set; }
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
public virtual Version get_PostgresVersion();
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
private void set_PostgresVersion(Version value);
    [CompilerGeneratedAttribute]
public virtual Version get_PostgresVersionWithoutDefault();
    [CompilerGeneratedAttribute]
private void set_PostgresVersionWithoutDefault(Version value);
    [CompilerGeneratedAttribute]
public virtual bool get_UseRedshift();
    [CompilerGeneratedAttribute]
private void set_UseRedshift(bool value);
    [CompilerGeneratedAttribute]
public virtual bool get_ReverseNullOrderingEnabled();
    [CompilerGeneratedAttribute]
private void set_ReverseNullOrderingEnabled(bool value);
    [CompilerGeneratedAttribute]
public virtual DbDataSource get_DataSource();
    [CompilerGeneratedAttribute]
private void set_DataSource(DbDataSource value);
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
public virtual IReadOnlyList`1<UserRangeDefinition> get_UserRangeDefinitions();
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
private void set_UserRangeDefinitions(IReadOnlyList`1<UserRangeDefinition> value);
    [CompilerGeneratedAttribute]
public virtual IServiceProvider get_ApplicationServiceProvider();
    [CompilerGeneratedAttribute]
private void set_ApplicationServiceProvider(IServiceProvider value);
    [NullableContextAttribute("1")]
public virtual void Initialize(IDbContextOptions options);
    [NullableContextAttribute("1")]
public virtual void Validate(IDbContextOptions options);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public static class Npgsql.EntityFrameworkCore.PostgreSQL.Internal.NpgsqlStrings : object {
    private static ResourceManager _resourceManager;
    public static string Ef7JsonMappingNotSupported { get; }
    public static string FreeTextFunctionOnClient { get; }
    public static string RowValueComparisonRequiresTuplesOfSameLength { get; }
    public static string CannotUseDataSourceWithAuthCallbacks { get; }
    public static string TransientExceptionDetected { get; }
    private static NpgsqlStrings();
    public static string TwoDataSourcesInSameServiceProvider(object useInternalServiceProvider);
    [NullableContextAttribute("2")]
public static string DuplicateColumnCompressionMethodMismatch(object entityType1, object property1, object entityType2, object property2, object columnName, object table);
    [NullableContextAttribute("2")]
public static string DuplicateColumnNameValueGenerationStrategyMismatch(object entityType1, object property1, object entityType2, object property2, object columnName, object table);
    [NullableContextAttribute("2")]
public static string DuplicateIndexCollationMismatch(object index1, object entityType1, object index2, object entityType2, object table, object indexName);
    [NullableContextAttribute("2")]
public static string DuplicateIndexConcurrentCreationMismatch(object index1, object entityType1, object index2, object entityType2, object table, object indexName);
    [NullableContextAttribute("2")]
public static string DuplicateIndexIncludedMismatch(object index1, object entityType1, object index2, object entityType2, object table, object indexName, object includedColumns1, object includedColumns2);
    public static string get_Ef7JsonMappingNotSupported();
    public static string get_FreeTextFunctionOnClient();
    [NullableContextAttribute("2")]
public static string HeterogeneousTypesInNewArray(object type1, object type2);
    [NullableContextAttribute("2")]
public static string IdentityBadType(object property, object entityType, object propertyType);
    [NullableContextAttribute("2")]
public static string IncludePropertyDuplicated(object entityType, object property);
    [NullableContextAttribute("2")]
public static string IncludePropertyInIndex(object entityType, object property);
    [NullableContextAttribute("2")]
public static string IncludePropertyNotFound(object entityType, object property);
    public static string InvalidTableToIncludeInScaffolding(object table);
    [NullableContextAttribute("2")]
public static string NonKeyValueGeneration(object property, object entityType);
    public static string get_RowValueComparisonRequiresTuplesOfSameLength();
    public static string get_CannotUseDataSourceWithAuthCallbacks();
    [NullableContextAttribute("2")]
public static string SequenceBadType(object property, object entityType, object propertyType);
    [NullableContextAttribute("2")]
public static string StoredProcedureResultColumnsNotSupported(object entityType, object sproc);
    [NullableContextAttribute("2")]
public static string StoredProcedureReturnValueNotSupported(object entityType, object sproc);
    public static string get_TransientExceptionDetected();
    private static string GetString(string name, String[] formatterNames);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Npgsql.EntityFrameworkCore.PostgreSQL.Metadata.CockroachDbInterleaveInParent : object {
    private static string AnnotationName;
    private IReadOnlyAnnotatable _annotatable;
    public Annotatable Annotatable { get; }
    [NullableAttribute("2")]
public string ParentTableSchema { get; public set; }
    public string ParentTableName { get; public set; }
    public List`1<string> InterleavePrefix { get; public set; }
    public CockroachDbInterleaveInParent(IReadOnlyAnnotatable annotatable);
    public virtual Annotatable get_Annotatable();
    [NullableContextAttribute("2")]
public virtual string get_ParentTableSchema();
    [NullableContextAttribute("2")]
public virtual void set_ParentTableSchema(string value);
    public virtual string get_ParentTableName();
    public virtual void set_ParentTableName(string value);
    public virtual List`1<string> get_InterleavePrefix();
    public virtual void set_InterleavePrefix(List`1<string> value);
    private ValueTuple`3<string, string, List`1<string>> GetData();
    private void SetData(string parentTableSchema, string parentTableName, List`1<string> interleavePrefix);
    private static string Serialize(string parentTableSchema, string parentTableName, List`1<string> interleavePrefix);
    internal static ValueTuple`3<string, string, List`1<string>> Deserialize(string value);
    private static string ExtractValue(string value, Int32& position);
    private static void EscapeAndQuote(StringBuilder builder, object value);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Npgsql.EntityFrameworkCore.PostgreSQL.Metadata.Conventions.NpgsqlConventionSetBuilder : RelationalConventionSetBuilder {
    private IRelationalTypeMappingSource _typeMappingSource;
    private Version _postgresVersion;
    public NpgsqlConventionSetBuilder(ProviderConventionSetBuilderDependencies dependencies, RelationalConventionSetBuilderDependencies relationalDependencies, IRelationalTypeMappingSource typeMappingSource, INpgsqlSingletonOptions npgsqlSingletonOptions);
    public virtual ConventionSet CreateConventionSet();
    public static ConventionSet Build();
    public static ModelBuilder CreateModelBuilder();
    private static IServiceScope CreateServiceScope();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Npgsql.EntityFrameworkCore.PostgreSQL.Metadata.Conventions.NpgsqlPostgresModelFinalizingConvention : object {
    private IRelationalTypeMappingSource _typeMappingSource;
    public NpgsqlPostgresModelFinalizingConvention(IRelationalTypeMappingSource typeMappingSource);
    public virtual void ProcessModelFinalizing(IConventionModelBuilder modelBuilder, IConventionContext`1<IConventionModelBuilder> context);
    protected virtual void DiscoverPostgresExtensions(IConventionProperty property, RelationalTypeMapping typeMapping, IConventionModelBuilder modelBuilder);
    protected virtual void ProcessRowVersionProperty(IConventionProperty property, RelationalTypeMapping typeMapping);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Npgsql.EntityFrameworkCore.PostgreSQL.Metadata.Conventions.NpgsqlRuntimeModelConvention : RelationalRuntimeModelConvention {
    public NpgsqlRuntimeModelConvention(ProviderConventionSetBuilderDependencies dependencies, RelationalConventionSetBuilderDependencies relationalDependencies);
    protected virtual void ProcessModelAnnotations(Dictionary`2<string, object> annotations, IModel model, RuntimeModel runtimeModel, bool runtime);
    protected virtual void ProcessEntityTypeAnnotations(Dictionary`2<string, object> annotations, IEntityType entityType, RuntimeEntityType runtimeEntityType, bool runtime);
    protected virtual void ProcessPropertyAnnotations(Dictionary`2<string, object> annotations, IProperty property, RuntimeProperty runtimeProperty, bool runtime);
    protected virtual void ProcessIndexAnnotations(Dictionary`2<string, object> annotations, IIndex index, RuntimeIndex runtimeIndex, bool runtime);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Npgsql.EntityFrameworkCore.PostgreSQL.Metadata.Conventions.NpgsqlSharedTableConvention : SharedTableConvention {
    protected bool CheckConstraintsUniqueAcrossTables { get; }
    public NpgsqlSharedTableConvention(ProviderConventionSetBuilderDependencies dependencies, RelationalConventionSetBuilderDependencies relationalDependencies);
    protected virtual bool AreCompatible(IReadOnlyIndex index, IReadOnlyIndex duplicateIndex, StoreObjectIdentifier& modreq(System.Runtime.InteropServices.InAttribute) storeObject);
    protected virtual bool get_CheckConstraintsUniqueAcrossTables();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Npgsql.EntityFrameworkCore.PostgreSQL.Metadata.Conventions.NpgsqlStoreGenerationConvention : StoreGenerationConvention {
    public NpgsqlStoreGenerationConvention(ProviderConventionSetBuilderDependencies dependencies, RelationalConventionSetBuilderDependencies relationalDependencies);
    public virtual void ProcessPropertyAnnotationChanged(IConventionPropertyBuilder propertyBuilder, string name, IConventionAnnotation annotation, IConventionAnnotation oldAnnotation, IConventionContext`1<IConventionAnnotation> context);
    protected virtual void Validate(IConventionProperty property, StoreObjectIdentifier& modreq(System.Runtime.InteropServices.InAttribute) storeObject);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Npgsql.EntityFrameworkCore.PostgreSQL.Metadata.Conventions.NpgsqlValueGenerationConvention : RelationalValueGenerationConvention {
    public NpgsqlValueGenerationConvention(ProviderConventionSetBuilderDependencies dependencies, RelationalConventionSetBuilderDependencies relationalDependencies);
    public virtual void ProcessPropertyAnnotationChanged(IConventionPropertyBuilder propertyBuilder, string name, IConventionAnnotation annotation, IConventionAnnotation oldAnnotation, IConventionContext`1<IConventionAnnotation> context);
    protected virtual Nullable`1<ValueGenerated> GetValueGenerated(IConventionProperty property);
    public static Nullable`1<ValueGenerated> GetValueGenerated(IReadOnlyProperty property, StoreObjectIdentifier& storeObject);
    private Nullable`1<ValueGenerated> GetValueGenerated(IReadOnlyProperty property, StoreObjectIdentifier& storeObject, ITypeMappingSource typeMappingSource);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Npgsql.EntityFrameworkCore.PostgreSQL.Metadata.Conventions.NpgsqlValueGenerationStrategyConvention : object {
    [NullableAttribute("2")]
private Version _postgresVersion;
    [CompilerGeneratedAttribute]
private ProviderConventionSetBuilderDependencies <Dependencies>k__BackingField;
    [CompilerGeneratedAttribute]
private RelationalConventionSetBuilderDependencies <RelationalDependencies>k__BackingField;
    protected ProviderConventionSetBuilderDependencies Dependencies { get; }
    protected RelationalConventionSetBuilderDependencies RelationalDependencies { get; }
    public NpgsqlValueGenerationStrategyConvention(ProviderConventionSetBuilderDependencies dependencies, RelationalConventionSetBuilderDependencies relationalDependencies, Version postgresVersion);
    [CompilerGeneratedAttribute]
protected virtual ProviderConventionSetBuilderDependencies get_Dependencies();
    [CompilerGeneratedAttribute]
protected virtual RelationalConventionSetBuilderDependencies get_RelationalDependencies();
    public virtual void ProcessModelInitialized(IConventionModelBuilder modelBuilder, IConventionContext`1<IConventionModelBuilder> context);
    public virtual void ProcessModelFinalizing(IConventionModelBuilder modelBuilder, IConventionContext`1<IConventionModelBuilder> context);
    [CompilerGeneratedAttribute]
private bool <ProcessModelFinalizing>g__IsStrategyNoneNeeded|9_0(IReadOnlyProperty property, StoreObjectIdentifier storeObject);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public static class Npgsql.EntityFrameworkCore.PostgreSQL.Metadata.Internal.CockroachDbAnnotationNames : object {
    public static string Prefix;
    public static string InterleaveInParent;
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Npgsql.EntityFrameworkCore.PostgreSQL.Metadata.Internal.IdentitySequenceOptionsData : object {
    public static IdentitySequenceOptionsData Empty;
    [CompilerGeneratedAttribute]
private Nullable`1<long> <StartValue>k__BackingField;
    [CompilerGeneratedAttribute]
private long <IncrementBy>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<long> <MinValue>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<long> <MaxValue>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsCyclic>k__BackingField;
    [CompilerGeneratedAttribute]
private long <NumbersToCache>k__BackingField;
    public Nullable`1<long> StartValue { get; public set; }
    public long IncrementBy { get; public set; }
    public Nullable`1<long> MinValue { get; public set; }
    public Nullable`1<long> MaxValue { get; public set; }
    public bool IsCyclic { get; public set; }
    public long NumbersToCache { get; public set; }
    private static IdentitySequenceOptionsData();
    [CompilerGeneratedAttribute]
public virtual Nullable`1<long> get_StartValue();
    [CompilerGeneratedAttribute]
public virtual void set_StartValue(Nullable`1<long> value);
    [CompilerGeneratedAttribute]
public virtual long get_IncrementBy();
    [CompilerGeneratedAttribute]
public virtual void set_IncrementBy(long value);
    [CompilerGeneratedAttribute]
public virtual Nullable`1<long> get_MinValue();
    [CompilerGeneratedAttribute]
public virtual void set_MinValue(Nullable`1<long> value);
    [CompilerGeneratedAttribute]
public virtual Nullable`1<long> get_MaxValue();
    [CompilerGeneratedAttribute]
public virtual void set_MaxValue(Nullable`1<long> value);
    [CompilerGeneratedAttribute]
public virtual bool get_IsCyclic();
    [CompilerGeneratedAttribute]
public virtual void set_IsCyclic(bool value);
    [CompilerGeneratedAttribute]
public virtual long get_NumbersToCache();
    [CompilerGeneratedAttribute]
public virtual void set_NumbersToCache(long value);
    public virtual string Serialize();
    public static IdentitySequenceOptionsData Get(IReadOnlyAnnotatable annotatable);
    public static IdentitySequenceOptionsData Deserialize(string value);
    private static string ExtractValue(string value, Int32& position);
    [NullableContextAttribute("2")]
private static Nullable`1<long> AsLong(string value);
    [NullableContextAttribute("2")]
private static bool AsBool(string value);
    private static void EscapeAndQuote(StringBuilder builder, object value);
    [NullableContextAttribute("2")]
public virtual bool Equals(IdentitySequenceOptionsData other);
    [NullableContextAttribute("2")]
public virtual bool Equals(object obj);
    public virtual int GetHashCode();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public static class Npgsql.EntityFrameworkCore.PostgreSQL.Metadata.Internal.NpgsqlAnnotationNames : object {
    public static string Prefix;
    public static string CompressionMethod;
    public static string CreatedConcurrently;
    public static string DatabaseTemplate;
    public static string HiLoSequenceName;
    public static string HiLoSequenceSchema;
    public static string IdentityOptions;
    public static string IndexMethod;
    public static string IndexOperators;
    public static string IndexNullSortOrder;
    public static string IndexInclude;
    public static string NullsDistinct;
    public static string Tablespace;
    public static string TsVectorConfig;
    public static string TsVectorProperties;
    public static string UnloggedTable;
    public static string ValueGenerationStrategy;
    public static string SequenceNameSuffix;
    public static string SequenceName;
    public static string SequenceSchema;
    public static string CollationDefinitionPrefix;
    public static string EnumPrefix;
    public static string PostgresExtensionPrefix;
    public static string RangePrefix;
    public static string StorageParameterPrefix;
    public static string PostgresTypeType;
    public static string ElementDataType;
    public static string IndexExpression;
    [ObsoleteAttribute("Use EF Core's standard model bulk configuration API")]
public static string DefaultColumnCollation;
    [ObsoleteAttribute("Replaced by ValueGenerationStrategy.SerialColumn")]
public static string ValueGeneratedOnAdd;
    [ObsoleteAttribute("Replaced by built-in EF Core support, use HasComment on entities or properties.")]
public static string Comment;
    [ObsoleteAttribute("Replaced by RelationalAnnotationNames.Collation")]
public static string IndexCollation;
    public static string IndexSortOrder;
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Npgsql.EntityFrameworkCore.PostgreSQL.Metadata.Internal.NpgsqlAnnotationProvider : RelationalAnnotationProvider {
    public NpgsqlAnnotationProvider(RelationalAnnotationProviderDependencies dependencies);
    [IteratorStateMachineAttribute("Npgsql.EntityFrameworkCore.PostgreSQL.Metadata.Internal.NpgsqlAnnotationProvider/<For>d__1")]
public virtual IEnumerable`1<IAnnotation> For(ITable table, bool designTime);
    [IteratorStateMachineAttribute("Npgsql.EntityFrameworkCore.PostgreSQL.Metadata.Internal.NpgsqlAnnotationProvider/<For>d__2")]
public virtual IEnumerable`1<IAnnotation> For(IColumn column, bool designTime);
    [IteratorStateMachineAttribute("Npgsql.EntityFrameworkCore.PostgreSQL.Metadata.Internal.NpgsqlAnnotationProvider/<For>d__3")]
public virtual IEnumerable`1<IAnnotation> For(ITableIndex index, bool designTime);
    public virtual IEnumerable`1<IAnnotation> For(IRelationalModel model, bool designTime);
}
public enum Npgsql.EntityFrameworkCore.PostgreSQL.Metadata.NpgsqlValueGenerationStrategy : Enum {
    public int value__;
    public static NpgsqlValueGenerationStrategy None;
    public static NpgsqlValueGenerationStrategy SequenceHiLo;
    public static NpgsqlValueGenerationStrategy SerialColumn;
    public static NpgsqlValueGenerationStrategy IdentityAlwaysColumn;
    public static NpgsqlValueGenerationStrategy IdentityByDefaultColumn;
    public static NpgsqlValueGenerationStrategy Sequence;
}
[ExtensionAttribute]
public static class Npgsql.EntityFrameworkCore.PostgreSQL.Metadata.NpgsqlValueGenerationStrategyExtensions : object {
    [ExtensionAttribute]
public static bool IsIdentity(NpgsqlValueGenerationStrategy strategy);
    [ExtensionAttribute]
public static bool IsIdentity(Nullable`1<NpgsqlValueGenerationStrategy> strategy);
}
public enum Npgsql.EntityFrameworkCore.PostgreSQL.Metadata.NullSortOrder : Enum {
    public int value__;
    public static NullSortOrder Unspecified;
    public static NullSortOrder NullsFirst;
    public static NullSortOrder NullsLast;
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Npgsql.EntityFrameworkCore.PostgreSQL.Metadata.PostgresCollation : object {
    private IReadOnlyAnnotatable _annotatable;
    private string _annotationName;
    public Annotatable Annotatable { get; }
    [NullableAttribute("2")]
public string Schema { get; }
    public string Name { get; }
    public string LcCollate { get; public set; }
    public string LcCtype { get; public set; }
    [NullableAttribute("2")]
public string Provider { get; public set; }
    public Nullable`1<bool> IsDeterministic { get; public set; }
    internal PostgresCollation(IReadOnlyAnnotatable annotatable, string annotationName);
    public static PostgresCollation GetOrAddCollation(IMutableAnnotatable annotatable, string schema, string name, string lcCollate, string lcCtype, string provider, Nullable`1<bool> deterministic);
    public static PostgresCollation FindCollation(IReadOnlyAnnotatable annotatable, string schema, string name);
    private static string BuildAnnotationName(string schema, string name);
    public static IEnumerable`1<PostgresCollation> GetCollations(IReadOnlyAnnotatable annotatable);
    public virtual Annotatable get_Annotatable();
    [NullableContextAttribute("2")]
public virtual string get_Schema();
    public virtual string get_Name();
    public virtual string get_LcCollate();
    public virtual void set_LcCollate(string value);
    public virtual string get_LcCtype();
    public virtual void set_LcCtype(string value);
    [NullableContextAttribute("2")]
public virtual string get_Provider();
    [NullableContextAttribute("2")]
public virtual void set_Provider(string value);
    public virtual Nullable`1<bool> get_IsDeterministic();
    public virtual void set_IsDeterministic(Nullable`1<bool> value);
    private ValueTuple`6<string, string, string, string, string, Nullable`1<bool>> GetData();
    [NullableContextAttribute("2")]
private void SetData(string lcCollate, string lcCtype, string provider, Nullable`1<bool> deterministic);
    [NullableContextAttribute("2")]
private static ValueTuple`6<string, string, string, string, string, Nullable`1<bool>> Deserialize(IAnnotation annotation);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Npgsql.EntityFrameworkCore.PostgreSQL.Metadata.PostgresEnum : object {
    private IReadOnlyAnnotatable _annotatable;
    private string _annotationName;
    public Annotatable Annotatable { get; }
    [NullableAttribute("2")]
public string Schema { get; }
    public string Name { get; }
    public IReadOnlyList`1<string> Labels { get; public set; }
    internal PostgresEnum(IReadOnlyAnnotatable annotatable, string annotationName);
    public static PostgresEnum GetOrAddPostgresEnum(IMutableAnnotatable annotatable, string schema, string name, String[] labels);
    public static PostgresEnum GetOrAddPostgresEnum(IMutableAnnotatable annotatable, string name, String[] labels);
    public static PostgresEnum FindPostgresEnum(IReadOnlyAnnotatable annotatable, string schema, string name);
    private static string BuildAnnotationName(string schema, string name);
    public static IEnumerable`1<PostgresEnum> GetPostgresEnums(IReadOnlyAnnotatable annotatable);
    public virtual Annotatable get_Annotatable();
    [NullableContextAttribute("2")]
public virtual string get_Schema();
    public virtual string get_Name();
    public virtual IReadOnlyList`1<string> get_Labels();
    public virtual void set_Labels(IReadOnlyList`1<string> value);
    private ValueTuple`3<string, string, String[]> GetData();
    private void SetData(IEnumerable`1<string> labels);
    [NullableContextAttribute("2")]
private static ValueTuple`3<string, string, String[]> Deserialize(IAnnotation annotation);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Npgsql.EntityFrameworkCore.PostgreSQL.Metadata.PostgresExtension : object {
    private IReadOnlyAnnotatable _annotatable;
    private string _annotationName;
    public Annotatable Annotatable { get; }
    [NullableAttribute("2")]
public string Schema { get; }
    public string Name { get; }
    [NullableAttribute("2")]
public string Version { get; public set; }
    internal PostgresExtension(IReadOnlyAnnotatable annotatable, string annotationName);
    public static PostgresExtension GetOrAddPostgresExtension(IMutableAnnotatable annotatable, string schema, string name, string version);
    public static PostgresExtension GetOrAddPostgresExtension(IConventionAnnotatable annotatable, string schema, string name, string version);
    public static PostgresExtension GetOrAddPostgresExtension(IMutableAnnotatable annotatable, string name, string version);
    public static PostgresExtension FindPostgresExtension(IReadOnlyAnnotatable annotatable, string schema, string name);
    internal static string BuildAnnotationName(string schema, string name);
    public static IEnumerable`1<PostgresExtension> GetPostgresExtensions(IReadOnlyAnnotatable annotatable);
    public virtual Annotatable get_Annotatable();
    [NullableContextAttribute("2")]
public virtual string get_Schema();
    public virtual string get_Name();
    [NullableContextAttribute("2")]
public virtual string get_Version();
    [NullableContextAttribute("2")]
public virtual void set_Version(string value);
    private ValueTuple`3<string, string, string> GetData();
    [NullableContextAttribute("2")]
private void SetData(string version);
    [NullableContextAttribute("2")]
private static ValueTuple`3<string, string, string> Deserialize(IAnnotation annotation);
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
public class Npgsql.EntityFrameworkCore.PostgreSQL.Metadata.PostgresRange : object {
    [NullableAttribute("1")]
private IReadOnlyAnnotatable _annotatable;
    [NullableAttribute("1")]
private string _annotationName;
    [NullableAttribute("1")]
public Annotatable Annotatable { get; }
    public string Schema { get; }
    [NullableAttribute("1")]
public string Name { get; }
    [NullableAttribute("1")]
public string Subtype { get; public set; }
    public string CanonicalFunction { get; public set; }
    public string SubtypeOpClass { get; public set; }
    public string Collation { get; public set; }
    public string SubtypeDiff { get; public set; }
    [NullableContextAttribute("1")]
internal PostgresRange(IReadOnlyAnnotatable annotatable, string annotationName);
    public static PostgresRange GetOrAddPostgresRange(IMutableAnnotatable annotatable, string schema, string name, string subtype, string canonicalFunction, string subtypeOpClass, string collation, string subtypeDiff);
    [NullableContextAttribute("1")]
public static PostgresRange FindPostgresRange(IReadOnlyAnnotatable annotatable, string schema, string name);
    [NullableContextAttribute("1")]
private static string BuildAnnotationName(string schema, string name);
    [NullableContextAttribute("1")]
public static IEnumerable`1<PostgresRange> GetPostgresRanges(IReadOnlyAnnotatable annotatable);
    [NullableContextAttribute("1")]
public virtual Annotatable get_Annotatable();
    public virtual string get_Schema();
    [NullableContextAttribute("1")]
public virtual string get_Name();
    [NullableContextAttribute("1")]
public virtual string get_Subtype();
    [NullableContextAttribute("1")]
public virtual void set_Subtype(string value);
    public virtual string get_CanonicalFunction();
    public virtual void set_CanonicalFunction(string value);
    public virtual string get_SubtypeOpClass();
    public virtual void set_SubtypeOpClass(string value);
    public virtual string get_Collation();
    public virtual void set_Collation(string value);
    public virtual string get_SubtypeDiff();
    public virtual void set_SubtypeDiff(string value);
    private ValueTuple`7<string, string, string, string, string, string, string> GetData();
    private void SetData(string subtype, string canonicalFunction, string subtypeOpClass, string collation, string subtypeDiff);
    private static ValueTuple`7<string, string, string, string, string, string, string> Deserialize(IAnnotation annotation);
}
public enum Npgsql.EntityFrameworkCore.PostgreSQL.Metadata.SortOrder : Enum {
    public int value__;
    public static SortOrder Ascending;
    public static SortOrder Descending;
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Npgsql.EntityFrameworkCore.PostgreSQL.Migrations.Internal.NpgsqlHistoryRepository : HistoryRepository {
    protected string ExistsSql { get; }
    public NpgsqlHistoryRepository(HistoryRepositoryDependencies dependencies);
    protected virtual string get_ExistsSql();
    [NullableContextAttribute("2")]
protected virtual bool InterpretExistsResult(object value);
    public virtual string GetCreateIfNotExistsScript();
    public virtual string GetBeginIfNotExistsScript(string migrationId);
    public virtual string GetBeginIfExistsScript(string migrationId);
    public virtual string GetEndIfScript();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Npgsql.EntityFrameworkCore.PostgreSQL.Migrations.NpgsqlMigrationsSqlGenerator : MigrationsSqlGenerator {
    private IReadOnlyList`1<MigrationOperation> _operations;
    private RelationalTypeMapping _stringTypeMapping;
    private Version _postgresVersion;
    private static String[] SystemColumnNames;
    public NpgsqlMigrationsSqlGenerator(MigrationsSqlGeneratorDependencies dependencies, INpgsqlSingletonOptions npgsqlSingletonOptions);
    private static NpgsqlMigrationsSqlGenerator();
    public virtual IReadOnlyList`1<MigrationCommand> Generate(IReadOnlyList`1<MigrationOperation> operations, IModel model, MigrationsSqlGenerationOptions options);
    protected virtual void Generate(MigrationOperation operation, IModel model, MigrationCommandListBuilder builder);
    protected virtual void Generate(CreateTableOperation operation, IModel model, MigrationCommandListBuilder builder, bool terminate);
    protected virtual void Generate(AlterTableOperation operation, IModel model, MigrationCommandListBuilder builder);
    protected virtual void Generate(DropColumnOperation operation, IModel model, MigrationCommandListBuilder builder, bool terminate);
    protected virtual void Generate(AddColumnOperation operation, IModel model, MigrationCommandListBuilder builder, bool terminate);
    protected virtual void Generate(AlterColumnOperation operation, IModel model, MigrationCommandListBuilder builder);
    protected virtual void Generate(RenameIndexOperation operation, IModel model, MigrationCommandListBuilder builder);
    protected virtual void Generate(RenameSequenceOperation operation, IModel model, MigrationCommandListBuilder builder);
    protected virtual void Generate(RenameTableOperation operation, IModel model, MigrationCommandListBuilder builder);
    protected virtual void Generate(CreateIndexOperation operation, IModel model, MigrationCommandListBuilder builder, bool terminate);
    protected virtual void IndexOptions(CreateIndexOperation operation, IModel model, MigrationCommandListBuilder builder);
    protected virtual void Generate(EnsureSchemaOperation operation, IModel model, MigrationCommandListBuilder builder);
    protected virtual void Generate(NpgsqlCreateDatabaseOperation operation, IModel model, MigrationCommandListBuilder builder);
    public virtual void Generate(NpgsqlDropDatabaseOperation operation, IModel model, MigrationCommandListBuilder builder);
    protected virtual void Generate(AlterDatabaseOperation operation, IModel model, MigrationCommandListBuilder builder);
    protected virtual void GenerateCreateExtension(PostgresExtension extension, IModel model, MigrationCommandListBuilder builder);
    protected virtual void GenerateCollationStatements(AlterDatabaseOperation operation, IModel model, MigrationCommandListBuilder builder);
    protected virtual void GenerateCreateCollation(PostgresCollation collation, IModel model, MigrationCommandListBuilder builder);
    protected virtual void GenerateDropCollation(PostgresCollation collation, IModel model, MigrationCommandListBuilder builder);
    protected virtual void GenerateEnumStatements(AlterDatabaseOperation operation, IModel model, MigrationCommandListBuilder builder);
    protected virtual void GenerateCreateEnum(PostgresEnum enumType, IModel model, MigrationCommandListBuilder builder);
    protected virtual void GenerateDropEnum(PostgresEnum enumType, IModel model, MigrationCommandListBuilder builder);
    protected virtual void GenerateAddEnumLabel(PostgresEnum enumType, string addedLabel, string beforeLabel, IModel model, MigrationCommandListBuilder builder);
    protected virtual void GenerateRangeStatements(AlterDatabaseOperation operation, IModel model, MigrationCommandListBuilder builder);
    protected virtual void GenerateCreateRange(PostgresRange rangeType, IModel model, MigrationCommandListBuilder builder);
    protected virtual void GenerateDropRange(PostgresRange rangeType, IModel model, MigrationCommandListBuilder builder);
    protected virtual void Generate(DropIndexOperation operation, IModel model, MigrationCommandListBuilder builder, bool terminate);
    protected virtual void Generate(RenameColumnOperation operation, IModel model, MigrationCommandListBuilder builder);
    protected virtual void Generate(InsertDataOperation operation, IModel model, MigrationCommandListBuilder builder, bool terminate);
    protected virtual void Generate(CreateSequenceOperation operation, IModel model, MigrationCommandListBuilder builder);
    protected virtual void ColumnDefinition(string schema, string table, string name, ColumnOperation operation, IModel model, MigrationCommandListBuilder builder);
    protected virtual void ApplyTsVectorColumnSql(ColumnOperation column, IModel model, string name, string schema, string table);
    protected virtual void IdentityDefinition(ColumnOperation operation, MigrationCommandListBuilder builder);
    protected virtual void ComputedColumnDefinition(string schema, string table, string name, ColumnOperation operation, IModel model, MigrationCommandListBuilder builder);
    private static void CheckForOldValueGenerationAnnotation(IAnnotatable annotatable);
    public virtual void Rename(string schema, string name, string newName, string type, MigrationCommandListBuilder builder);
    public virtual void Transfer(string newSchema, string schema, string name, string type, MigrationCommandListBuilder builder);
    protected virtual void RecreateIndexes(IColumn column, MigrationOperation currentOperation, MigrationCommandListBuilder builder);
    private bool IsSystemColumn(string name);
    private Dictionary`2<string, string> GetStorageParameters(Annotatable annotatable);
    private static string GenerateStorageParameterValue(object value);
    private string DelimitIdentifier(string identifier);
    private string DelimitIdentifier(string name, string schema);
    private string IndexColumnList(IndexColumn[] columns, string method);
    private string ColumnsToTsVector(string columnOrIndexName, IEnumerable`1<string> columnNames, string tsVectorConfig, IModel model, string schema, string table);
    private static bool TryParseSchema(string identifier, String& name, String& schema);
    private static IndexColumn[] GetIndexColumns(CreateIndexOperation operation);
    [CompilerGeneratedAttribute]
private bool <Generate>b__6_0(AddColumnOperation c);
    [NullableContextAttribute("0")]
[CompilerGeneratedAttribute]
private string <Generate>b__6_2(string c);
    [CompilerGeneratedAttribute]
internal static void <IdentityDefinition>g__Append|37_0(string s, <>c__DisplayClass37_0& , <>c__DisplayClass37_1& );
    [CompilerGeneratedAttribute]
internal static long <IdentityDefinition>g__Min|37_1(Type type);
    [CompilerGeneratedAttribute]
internal static long <IdentityDefinition>g__Max|37_2(Type type);
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
[DebuggerDisplayAttribute("CREATE DATABASE {Name}")]
public class Npgsql.EntityFrameworkCore.PostgreSQL.Migrations.Operations.NpgsqlCreateDatabaseOperation : DatabaseOperation {
    [NullableAttribute("1")]
[CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Template>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Tablespace>k__BackingField;
    [NullableAttribute("1")]
public string Name { get; public set; }
    public string Template { get; public set; }
    public string Tablespace { get; public set; }
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
public virtual string get_Name();
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
public virtual void set_Name(string value);
    [CompilerGeneratedAttribute]
public virtual string get_Template();
    [CompilerGeneratedAttribute]
public virtual void set_Template(string value);
    [CompilerGeneratedAttribute]
public virtual string get_Tablespace();
    [CompilerGeneratedAttribute]
public virtual void set_Tablespace(string value);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Npgsql.EntityFrameworkCore.PostgreSQL.Migrations.Operations.NpgsqlDropDatabaseOperation : MigrationOperation {
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    public string Name { get; public set; }
    [CompilerGeneratedAttribute]
public virtual string get_Name();
    [CompilerGeneratedAttribute]
public virtual void set_Name(string value);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Npgsql.EntityFrameworkCore.PostgreSQL.NpgsqlRetryingExecutionStrategy : ExecutionStrategy {
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private ICollection`1<string> _additionalErrorCodes;
    public NpgsqlRetryingExecutionStrategy(DbContext context);
    public NpgsqlRetryingExecutionStrategy(ExecutionStrategyDependencies dependencies);
    public NpgsqlRetryingExecutionStrategy(DbContext context, int maxRetryCount);
    public NpgsqlRetryingExecutionStrategy(ExecutionStrategyDependencies dependencies, int maxRetryCount);
    public NpgsqlRetryingExecutionStrategy(ExecutionStrategyDependencies dependencies, ICollection`1<string> errorCodesToAdd);
    public NpgsqlRetryingExecutionStrategy(DbContext context, int maxRetryCount, TimeSpan maxRetryDelay, ICollection`1<string> errorCodesToAdd);
    public NpgsqlRetryingExecutionStrategy(ExecutionStrategyDependencies dependencies, int maxRetryCount, TimeSpan maxRetryDelay, ICollection`1<string> errorCodesToAdd);
    [NullableContextAttribute("2")]
protected virtual bool ShouldRetryOn(Exception exception);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Npgsql.EntityFrameworkCore.PostgreSQL.Query.Expressions.Internal.PostgresAllExpression : SqlExpression {
    [CompilerGeneratedAttribute]
private SqlExpression <Item>k__BackingField;
    [CompilerGeneratedAttribute]
private SqlExpression <Array>k__BackingField;
    [CompilerGeneratedAttribute]
private PostgresAllOperatorType <OperatorType>k__BackingField;
    public Type Type { get; }
    public SqlExpression Item { get; }
    public SqlExpression Array { get; }
    public PostgresAllOperatorType OperatorType { get; }
    public PostgresAllExpression(SqlExpression item, SqlExpression array, PostgresAllOperatorType operatorType, RelationalTypeMapping typeMapping);
    public virtual Type get_Type();
    [CompilerGeneratedAttribute]
public virtual SqlExpression get_Item();
    [CompilerGeneratedAttribute]
public virtual SqlExpression get_Array();
    [CompilerGeneratedAttribute]
public virtual PostgresAllOperatorType get_OperatorType();
    public virtual PostgresAllExpression Update(SqlExpression item, SqlExpression array);
    protected virtual Expression VisitChildren(ExpressionVisitor visitor);
    [NullableContextAttribute("2")]
public virtual bool Equals(object obj);
    [NullableContextAttribute("2")]
public virtual bool Equals(PostgresAllExpression other);
    public virtual int GetHashCode();
    protected virtual void Print(ExpressionPrinter expressionPrinter);
    public virtual string ToString();
}
public enum Npgsql.EntityFrameworkCore.PostgreSQL.Query.Expressions.Internal.PostgresAllOperatorType : Enum {
    public int value__;
    public static PostgresAllOperatorType Like;
    public static PostgresAllOperatorType ILike;
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Npgsql.EntityFrameworkCore.PostgreSQL.Query.Expressions.Internal.PostgresAnyExpression : SqlExpression {
    [CompilerGeneratedAttribute]
private SqlExpression <Item>k__BackingField;
    [CompilerGeneratedAttribute]
private SqlExpression <Array>k__BackingField;
    [CompilerGeneratedAttribute]
private PostgresAnyOperatorType <OperatorType>k__BackingField;
    public Type Type { get; }
    public SqlExpression Item { get; }
    public SqlExpression Array { get; }
    public PostgresAnyOperatorType OperatorType { get; }
    public PostgresAnyExpression(SqlExpression item, SqlExpression array, PostgresAnyOperatorType operatorType, RelationalTypeMapping typeMapping);
    public virtual Type get_Type();
    [CompilerGeneratedAttribute]
public virtual SqlExpression get_Item();
    [CompilerGeneratedAttribute]
public virtual SqlExpression get_Array();
    [CompilerGeneratedAttribute]
public virtual PostgresAnyOperatorType get_OperatorType();
    public virtual PostgresAnyExpression Update(SqlExpression item, SqlExpression array);
    protected virtual Expression VisitChildren(ExpressionVisitor visitor);
    [NullableContextAttribute("2")]
public virtual bool Equals(object obj);
    [NullableContextAttribute("2")]
public virtual bool Equals(PostgresAnyExpression other);
    public virtual int GetHashCode();
    protected virtual void Print(ExpressionPrinter expressionPrinter);
    public virtual string ToString();
}
public enum Npgsql.EntityFrameworkCore.PostgreSQL.Query.Expressions.Internal.PostgresAnyOperatorType : Enum {
    public int value__;
    public static PostgresAnyOperatorType Equal;
    public static PostgresAnyOperatorType Like;
    public static PostgresAnyOperatorType ILike;
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Npgsql.EntityFrameworkCore.PostgreSQL.Query.Expressions.Internal.PostgresArrayIndexExpression : SqlExpression {
    [CompilerGeneratedAttribute]
private SqlExpression <Array>k__BackingField;
    [CompilerGeneratedAttribute]
private SqlExpression <Index>k__BackingField;
    public SqlExpression Array { get; }
    public SqlExpression Index { get; }
    public PostgresArrayIndexExpression(SqlExpression array, SqlExpression index, Type type, RelationalTypeMapping typeMapping);
    [CompilerGeneratedAttribute]
public virtual SqlExpression get_Array();
    [CompilerGeneratedAttribute]
public virtual SqlExpression get_Index();
    public virtual PostgresArrayIndexExpression Update(SqlExpression array, SqlExpression index);
    protected virtual Expression VisitChildren(ExpressionVisitor visitor);
    [NullableContextAttribute("2")]
public virtual bool Equals(PostgresArrayIndexExpression other);
    [NullableContextAttribute("2")]
public virtual bool Equals(object obj);
    public virtual int GetHashCode();
    protected virtual void Print(ExpressionPrinter expressionPrinter);
    public virtual string ToString();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Npgsql.EntityFrameworkCore.PostgreSQL.Query.Expressions.Internal.PostgresBinaryExpression : SqlExpression {
    [CompilerGeneratedAttribute]
private PostgresExpressionType <OperatorType>k__BackingField;
    [CompilerGeneratedAttribute]
private SqlExpression <Left>k__BackingField;
    [CompilerGeneratedAttribute]
private SqlExpression <Right>k__BackingField;
    public PostgresExpressionType OperatorType { get; }
    public SqlExpression Left { get; }
    public SqlExpression Right { get; }
    public PostgresBinaryExpression(PostgresExpressionType operatorType, SqlExpression left, SqlExpression right, Type type, RelationalTypeMapping typeMapping);
    [CompilerGeneratedAttribute]
public virtual PostgresExpressionType get_OperatorType();
    [CompilerGeneratedAttribute]
public virtual SqlExpression get_Left();
    [CompilerGeneratedAttribute]
public virtual SqlExpression get_Right();
    protected virtual Expression VisitChildren(ExpressionVisitor visitor);
    public virtual PostgresBinaryExpression Update(SqlExpression left, SqlExpression right);
    protected virtual void Print(ExpressionPrinter expressionPrinter);
    [NullableContextAttribute("2")]
public virtual bool Equals(object obj);
    private bool Equals(PostgresBinaryExpression sqlBinaryExpression);
    public virtual int GetHashCode();
    [CompilerGeneratedAttribute]
internal static bool <Print>g__RequiresBrackets|12_0(SqlExpression expression);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Npgsql.EntityFrameworkCore.PostgreSQL.Query.Expressions.Internal.PostgresDeleteExpression : Expression {
    [CompilerGeneratedAttribute]
private TableExpression <Table>k__BackingField;
    [CompilerGeneratedAttribute]
private IReadOnlyList`1<TableExpressionBase> <FromItems>k__BackingField;
    [NullableAttribute("2")]
[CompilerGeneratedAttribute]
private SqlExpression <Predicate>k__BackingField;
    [CompilerGeneratedAttribute]
private ISet`1<string> <Tags>k__BackingField;
    public TableExpression Table { get; }
    public IReadOnlyList`1<TableExpressionBase> FromItems { get; }
    [NullableAttribute("2")]
public SqlExpression Predicate { get; }
    public ISet`1<string> Tags { get; }
    public Type Type { get; }
    public ExpressionType NodeType { get; }
    public PostgresDeleteExpression(TableExpression table, IReadOnlyList`1<TableExpressionBase> fromItems, SqlExpression predicate, ISet`1<string> tags);
    [CompilerGeneratedAttribute]
public TableExpression get_Table();
    [CompilerGeneratedAttribute]
public IReadOnlyList`1<TableExpressionBase> get_FromItems();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public SqlExpression get_Predicate();
    [CompilerGeneratedAttribute]
public ISet`1<string> get_Tags();
    public virtual Type get_Type();
    public virtual ExpressionType get_NodeType();
    protected virtual Expression VisitChildren(ExpressionVisitor visitor);
    public PostgresDeleteExpression Update(SqlExpression predicate);
    public sealed virtual void Print(ExpressionPrinter expressionPrinter);
    [NullableContextAttribute("2")]
public virtual bool Equals(object obj);
    private bool Equals(PostgresDeleteExpression pgDeleteExpression);
    public virtual int GetHashCode();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[DebuggerDisplayAttribute("{ToString()}")]
public class Npgsql.EntityFrameworkCore.PostgreSQL.Query.Expressions.Internal.PostgresFunctionExpression : SqlFunctionExpression {
    [CompilerGeneratedAttribute]
private bool <IsAggregateDistinct>k__BackingField;
    [NullableAttribute("2")]
[CompilerGeneratedAttribute]
private SqlExpression <AggregatePredicate>k__BackingField;
    [CompilerGeneratedAttribute]
private IReadOnlyList`1<OrderingExpression> <AggregateOrderings>k__BackingField;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[CompilerGeneratedAttribute]
private IReadOnlyList`1<string> <ArgumentNames>k__BackingField;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[CompilerGeneratedAttribute]
private IReadOnlyList`1<string> <ArgumentSeparators>k__BackingField;
    public IReadOnlyList`1<SqlExpression> Arguments { get; }
    public IReadOnlyList`1<bool> ArgumentsPropagateNullability { get; }
    public bool IsAggregateDistinct { get; }
    [NullableAttribute("2")]
public SqlExpression AggregatePredicate { get; }
    public IReadOnlyList`1<OrderingExpression> AggregateOrderings { get; }
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public IReadOnlyList`1<string> ArgumentNames { get; }
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public IReadOnlyList`1<string> ArgumentSeparators { get; }
    public PostgresFunctionExpression(string name, IEnumerable`1<SqlExpression> arguments, IEnumerable`1<string> argumentNames, IEnumerable`1<string> argumentSeparators, bool aggregateDistinct, SqlExpression aggregatePredicate, IReadOnlyList`1<OrderingExpression> aggregateOrderings, bool nullable, IEnumerable`1<bool> argumentsPropagateNullability, Type type, RelationalTypeMapping typeMapping);
    public virtual IReadOnlyList`1<SqlExpression> get_Arguments();
    public virtual IReadOnlyList`1<bool> get_ArgumentsPropagateNullability();
    [CompilerGeneratedAttribute]
public virtual bool get_IsAggregateDistinct();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public virtual SqlExpression get_AggregatePredicate();
    [CompilerGeneratedAttribute]
public virtual IReadOnlyList`1<OrderingExpression> get_AggregateOrderings();
    [CompilerGeneratedAttribute]
public virtual IReadOnlyList`1<string> get_ArgumentNames();
    [CompilerGeneratedAttribute]
public virtual IReadOnlyList`1<string> get_ArgumentSeparators();
    public static PostgresFunctionExpression CreateWithNamedArguments(string name, IEnumerable`1<SqlExpression> arguments, IEnumerable`1<string> argumentNames, bool nullable, IEnumerable`1<bool> argumentsPropagateNullability, bool builtIn, Type type, RelationalTypeMapping typeMapping);
    public static PostgresFunctionExpression CreateWithArgumentSeparators(string name, IEnumerable`1<SqlExpression> arguments, IEnumerable`1<string> argumentSeparators, bool nullable, IEnumerable`1<bool> argumentsPropagateNullability, bool builtIn, Type type, RelationalTypeMapping typeMapping);
    protected virtual Expression VisitChildren(ExpressionVisitor visitor);
    public virtual SqlFunctionExpression ApplyTypeMapping(RelationalTypeMapping typeMapping);
    public virtual SqlFunctionExpression Update(SqlExpression instance, IReadOnlyList`1<SqlExpression> arguments);
    public virtual PostgresFunctionExpression UpdateAggregateComponents(SqlExpression predicate, IReadOnlyList`1<OrderingExpression> orderings);
    protected virtual void Print(ExpressionPrinter expressionPrinter);
    [NullableContextAttribute("2")]
public virtual bool Equals(object obj);
    [NullableContextAttribute("2")]
public virtual bool Equals(PostgresFunctionExpression other);
    public virtual int GetHashCode();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Npgsql.EntityFrameworkCore.PostgreSQL.Query.Expressions.Internal.PostgresILikeExpression : SqlExpression {
    [CompilerGeneratedAttribute]
private SqlExpression <Match>k__BackingField;
    [CompilerGeneratedAttribute]
private SqlExpression <Pattern>k__BackingField;
    [NullableAttribute("2")]
[CompilerGeneratedAttribute]
private SqlExpression <EscapeChar>k__BackingField;
    public SqlExpression Match { get; }
    public SqlExpression Pattern { get; }
    [NullableAttribute("2")]
public SqlExpression EscapeChar { get; }
    public PostgresILikeExpression(SqlExpression match, SqlExpression pattern, SqlExpression escapeChar, RelationalTypeMapping typeMapping);
    [CompilerGeneratedAttribute]
public virtual SqlExpression get_Match();
    [CompilerGeneratedAttribute]
public virtual SqlExpression get_Pattern();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public virtual SqlExpression get_EscapeChar();
    protected virtual Expression VisitChildren(ExpressionVisitor visitor);
    public virtual PostgresILikeExpression Update(SqlExpression match, SqlExpression pattern, SqlExpression escapeChar);
    [NullableContextAttribute("2")]
public virtual bool Equals(object obj);
    [NullableContextAttribute("2")]
public virtual bool Equals(PostgresILikeExpression other);
    public virtual int GetHashCode();
    protected virtual void Print(ExpressionPrinter expressionPrinter);
    public virtual string ToString();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Npgsql.EntityFrameworkCore.PostgreSQL.Query.Expressions.Internal.PostgresJsonTraversalExpression : SqlExpression {
    [CompilerGeneratedAttribute]
private SqlExpression <Expression>k__BackingField;
    [CompilerGeneratedAttribute]
private IReadOnlyList`1<SqlExpression> <Path>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <ReturnsText>k__BackingField;
    public SqlExpression Expression { get; }
    public IReadOnlyList`1<SqlExpression> Path { get; }
    public bool ReturnsText { get; }
    public PostgresJsonTraversalExpression(SqlExpression expression, IReadOnlyList`1<SqlExpression> path, bool returnsText, Type type, RelationalTypeMapping typeMapping);
    [CompilerGeneratedAttribute]
public virtual SqlExpression get_Expression();
    [CompilerGeneratedAttribute]
public virtual IReadOnlyList`1<SqlExpression> get_Path();
    [CompilerGeneratedAttribute]
public virtual bool get_ReturnsText();
    protected virtual Expression VisitChildren(ExpressionVisitor visitor);
    public virtual PostgresJsonTraversalExpression Update(SqlExpression expression, IReadOnlyList`1<SqlExpression> path);
    public virtual PostgresJsonTraversalExpression Append(SqlExpression pathComponent);
    [NullableContextAttribute("2")]
public virtual bool Equals(object obj);
    [NullableContextAttribute("2")]
public virtual bool Equals(PostgresJsonTraversalExpression other);
    public virtual int GetHashCode();
    protected virtual void Print(ExpressionPrinter expressionPrinter);
    public virtual string ToString();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Npgsql.EntityFrameworkCore.PostgreSQL.Query.Expressions.Internal.PostgresNewArrayExpression : SqlExpression {
    [CompilerGeneratedAttribute]
private IReadOnlyList`1<SqlExpression> <Expressions>k__BackingField;
    public IReadOnlyList`1<SqlExpression> Expressions { get; }
    public PostgresNewArrayExpression(IReadOnlyList`1<SqlExpression> expressions, Type type, RelationalTypeMapping typeMapping);
    [CompilerGeneratedAttribute]
public virtual IReadOnlyList`1<SqlExpression> get_Expressions();
    protected virtual Expression VisitChildren(ExpressionVisitor visitor);
    public virtual PostgresNewArrayExpression Update(IReadOnlyList`1<SqlExpression> expressions);
    protected virtual void Print(ExpressionPrinter expressionPrinter);
    [NullableContextAttribute("2")]
public virtual bool Equals(object obj);
    private bool Equals(PostgresNewArrayExpression postgresNewArrayExpression);
    public virtual int GetHashCode();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Npgsql.EntityFrameworkCore.PostgreSQL.Query.Expressions.Internal.PostgresRegexMatchExpression : SqlExpression {
    [CompilerGeneratedAttribute]
private SqlExpression <Match>k__BackingField;
    [CompilerGeneratedAttribute]
private SqlExpression <Pattern>k__BackingField;
    [CompilerGeneratedAttribute]
private RegexOptions <Options>k__BackingField;
    public Type Type { get; }
    public SqlExpression Match { get; }
    public SqlExpression Pattern { get; }
    public RegexOptions Options { get; }
    public PostgresRegexMatchExpression(SqlExpression match, SqlExpression pattern, RegexOptions options, RelationalTypeMapping typeMapping);
    public virtual Type get_Type();
    [CompilerGeneratedAttribute]
public virtual SqlExpression get_Match();
    [CompilerGeneratedAttribute]
public virtual SqlExpression get_Pattern();
    [CompilerGeneratedAttribute]
public virtual RegexOptions get_Options();
    protected virtual Expression VisitChildren(ExpressionVisitor visitor);
    public virtual PostgresRegexMatchExpression Update(SqlExpression match, SqlExpression pattern);
    [NullableContextAttribute("2")]
public virtual bool Equals(PostgresRegexMatchExpression other);
    [NullableContextAttribute("2")]
public virtual bool Equals(object other);
    public virtual int GetHashCode();
    protected virtual void Print(ExpressionPrinter expressionPrinter);
    public virtual string ToString();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Npgsql.EntityFrameworkCore.PostgreSQL.Query.Expressions.Internal.PostgresRowValueExpression : SqlExpression {
    [CompilerGeneratedAttribute]
private IReadOnlyList`1<SqlExpression> <Values>k__BackingField;
    public IReadOnlyList`1<SqlExpression> Values { get; }
    public PostgresRowValueExpression(IReadOnlyList`1<SqlExpression> values, Type type, RelationalTypeMapping typeMapping);
    [CompilerGeneratedAttribute]
public virtual IReadOnlyList`1<SqlExpression> get_Values();
    protected virtual Expression VisitChildren(ExpressionVisitor visitor);
    public virtual PostgresRowValueExpression Update(IReadOnlyList`1<SqlExpression> values);
    protected virtual void Print(ExpressionPrinter expressionPrinter);
    [NullableContextAttribute("2")]
public virtual bool Equals(object obj);
    [NullableContextAttribute("2")]
public virtual bool Equals(PostgresRowValueExpression other);
    public virtual int GetHashCode();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Npgsql.EntityFrameworkCore.PostgreSQL.Query.Expressions.Internal.PostgresUnknownBinaryExpression : SqlExpression {
    [CompilerGeneratedAttribute]
private SqlExpression <Left>k__BackingField;
    [CompilerGeneratedAttribute]
private SqlExpression <Right>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Operator>k__BackingField;
    public SqlExpression Left { get; }
    public SqlExpression Right { get; }
    public string Operator { get; }
    public PostgresUnknownBinaryExpression(SqlExpression left, SqlExpression right, string binaryOperator, Type type, RelationalTypeMapping typeMapping);
    [CompilerGeneratedAttribute]
public virtual SqlExpression get_Left();
    [CompilerGeneratedAttribute]
public virtual SqlExpression get_Right();
    [CompilerGeneratedAttribute]
public virtual string get_Operator();
    protected virtual Expression VisitChildren(ExpressionVisitor visitor);
    public virtual PostgresUnknownBinaryExpression Update(SqlExpression left, SqlExpression right);
    [NullableContextAttribute("2")]
public virtual bool Equals(PostgresUnknownBinaryExpression other);
    [NullableContextAttribute("2")]
public virtual bool Equals(object obj);
    public virtual int GetHashCode();
    protected virtual void Print(ExpressionPrinter expressionPrinter);
    public virtual string ToString();
}
public enum Npgsql.EntityFrameworkCore.PostgreSQL.Query.Expressions.PostgresExpressionType : Enum {
    public int value__;
    public static PostgresExpressionType Contains;
    public static PostgresExpressionType ContainedBy;
    public static PostgresExpressionType Overlaps;
    public static PostgresExpressionType Distance;
    public static PostgresExpressionType NetworkContainedByOrEqual;
    public static PostgresExpressionType NetworkContainsOrEqual;
    public static PostgresExpressionType NetworkContainsOrContainedBy;
    public static PostgresExpressionType RangeIsStrictlyLeftOf;
    public static PostgresExpressionType RangeIsStrictlyRightOf;
    public static PostgresExpressionType RangeDoesNotExtendRightOf;
    public static PostgresExpressionType RangeDoesNotExtendLeftOf;
    public static PostgresExpressionType RangeIsAdjacentTo;
    public static PostgresExpressionType RangeUnion;
    public static PostgresExpressionType RangeIntersect;
    public static PostgresExpressionType RangeExcept;
    public static PostgresExpressionType TextSearchMatch;
    public static PostgresExpressionType TextSearchAnd;
    public static PostgresExpressionType TextSearchOr;
    public static PostgresExpressionType JsonExists;
    public static PostgresExpressionType JsonExistsAny;
    public static PostgresExpressionType JsonExistsAll;
    public static PostgresExpressionType LTreeMatches;
    public static PostgresExpressionType LTreeMatchesAny;
    public static PostgresExpressionType LTreeFirstAncestor;
    public static PostgresExpressionType LTreeFirstDescendent;
    public static PostgresExpressionType LTreeFirstMatches;
}
public class Npgsql.EntityFrameworkCore.PostgreSQL.Query.ExpressionTranslators.Internal.NpgsqlAggregateMethodCallTranslatorProvider : RelationalAggregateMethodCallTranslatorProvider {
    [NullableContextAttribute("1")]
public NpgsqlAggregateMethodCallTranslatorProvider(RelationalAggregateMethodCallTranslatorProviderDependencies dependencies);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Npgsql.EntityFrameworkCore.PostgreSQL.Query.ExpressionTranslators.Internal.NpgsqlArrayTranslator : object {
    private static MethodInfo Array_IndexOf1;
    private static MethodInfo Array_IndexOf2;
    private static MethodInfo Enumerable_Append;
    private static MethodInfo Enumerable_AnyWithoutPredicate;
    private static MethodInfo Enumerable_Concat;
    private static MethodInfo Enumerable_Contains;
    private static MethodInfo Enumerable_SequenceEqual;
    private NpgsqlSqlExpressionFactory _sqlExpressionFactory;
    private NpgsqlJsonPocoTranslator _jsonPocoTranslator;
    private bool _useRedshift;
    public NpgsqlArrayTranslator(NpgsqlSqlExpressionFactory sqlExpressionFactory, NpgsqlJsonPocoTranslator jsonPocoTranslator, bool useRedshift);
    private static NpgsqlArrayTranslator();
    public virtual SqlExpression Translate(SqlExpression instance, MethodInfo method, IReadOnlyList`1<SqlExpression> arguments, IDiagnosticsLogger`1<Query> logger);
    public virtual SqlExpression Translate(SqlExpression instance, MemberInfo member, Type returnType, IDiagnosticsLogger`1<Query> logger);
    private SqlExpression GenerateOneBasedIndexExpression(SqlExpression expression);
    [CompilerGeneratedAttribute]
internal static bool <Translate>g__IsMappedToNonArray|11_0(SqlExpression arrayOrList);
    [CompilerGeneratedAttribute]
private SqlExpression <Translate>g__TranslateCommon|11_1(SqlExpression arrayOrList, IReadOnlyList`1<SqlExpression> arguments, <>c__DisplayClass11_0& );
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Npgsql.EntityFrameworkCore.PostgreSQL.Query.ExpressionTranslators.Internal.NpgsqlBigIntegerMemberTranslator : object {
    private NpgsqlSqlExpressionFactory _sqlExpressionFactory;
    private static MemberInfo IsZero;
    private static MemberInfo IsOne;
    private static MemberInfo IsEven;
    public NpgsqlBigIntegerMemberTranslator(NpgsqlSqlExpressionFactory sqlExpressionFactory);
    private static NpgsqlBigIntegerMemberTranslator();
    public virtual SqlExpression Translate(SqlExpression instance, MemberInfo member, Type returnType, IDiagnosticsLogger`1<Query> logger);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Npgsql.EntityFrameworkCore.PostgreSQL.Query.ExpressionTranslators.Internal.NpgsqlByteArrayMethodTranslator : object {
    private ISqlExpressionFactory _sqlExpressionFactory;
    public NpgsqlByteArrayMethodTranslator(ISqlExpressionFactory sqlExpressionFactory);
    public virtual SqlExpression Translate(SqlExpression instance, MethodInfo method, IReadOnlyList`1<SqlExpression> arguments, IDiagnosticsLogger`1<Query> logger);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Npgsql.EntityFrameworkCore.PostgreSQL.Query.ExpressionTranslators.Internal.NpgsqlConvertTranslator : object {
    private static Dictionary`2<string, string> TypeMapping;
    private static List`1<Type> SupportedTypes;
    private static List`1<MethodInfo> SupportedMethods;
    private ISqlExpressionFactory _sqlExpressionFactory;
    public NpgsqlConvertTranslator(ISqlExpressionFactory sqlExpressionFactory);
    private static NpgsqlConvertTranslator();
    public virtual SqlExpression Translate(SqlExpression instance, MethodInfo method, IReadOnlyList`1<SqlExpression> arguments, IDiagnosticsLogger`1<Query> logger);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Npgsql.EntityFrameworkCore.PostgreSQL.Query.ExpressionTranslators.Internal.NpgsqlDateTimeMemberTranslator : object {
    private NpgsqlSqlExpressionFactory _sqlExpressionFactory;
    private RelationalTypeMapping _timestampMapping;
    private RelationalTypeMapping _timestampTzMapping;
    public NpgsqlDateTimeMemberTranslator(IRelationalTypeMappingSource typeMappingSource, NpgsqlSqlExpressionFactory sqlExpressionFactory);
    public virtual SqlExpression Translate(SqlExpression instance, MemberInfo member, Type returnType, IDiagnosticsLogger`1<Query> logger);
    private SqlExpression GetDatePartExpression(SqlExpression instance, string partName, bool floor);
    public virtual SqlExpression TranslateDateTimeOffset(SqlExpression instance, MemberInfo member, Type returnType);
    [CompilerGeneratedAttribute]
private SqlExpression <Translate>g__UtcNow|4_0(<>c__DisplayClass4_0& );
    [CompilerGeneratedAttribute]
private SqlExpression <Translate>g__LocalNow|4_1(<>c__DisplayClass4_0& );
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Npgsql.EntityFrameworkCore.PostgreSQL.Query.ExpressionTranslators.Internal.NpgsqlDateTimeMethodTranslator : object {
    private static Dictionary`2<MethodInfo, string> MethodInfoDatePartMapping;
    private static MethodInfo DateTime_ToUniversalTime;
    private static MethodInfo DateTime_ToLocalTime;
    private static MethodInfo DateTime_SpecifyKind;
    private static MethodInfo DateTime_Distance;
    private static MethodInfo DateOnly_FromDateTime;
    private static MethodInfo DateOnly_ToDateTime;
    private static MethodInfo DateOnly_Distance;
    private static MethodInfo TimeOnly_FromDateTime;
    private static MethodInfo TimeOnly_FromTimeSpan;
    private static MethodInfo TimeOnly_ToTimeSpan;
    private static MethodInfo TimeOnly_IsBetween;
    private static MethodInfo TimeOnly_Add_TimeSpan;
    private static MethodInfo TimeZoneInfo_ConvertTimeBySystemTimeZoneId;
    private static MethodInfo TimeZoneInfo_ConvertTimeToUtc;
    private IRelationalTypeMappingSource _typeMappingSource;
    private NpgsqlSqlExpressionFactory _sqlExpressionFactory;
    private RelationalTypeMapping _timestampMapping;
    private RelationalTypeMapping _timestampTzMapping;
    private RelationalTypeMapping _intervalMapping;
    private RelationalTypeMapping _textMapping;
    public NpgsqlDateTimeMethodTranslator(IRelationalTypeMappingSource typeMappingSource, NpgsqlSqlExpressionFactory sqlExpressionFactory);
    private static NpgsqlDateTimeMethodTranslator();
    public virtual SqlExpression Translate(SqlExpression instance, MethodInfo method, IReadOnlyList`1<SqlExpression> arguments, IDiagnosticsLogger`1<Query> logger);
    private SqlExpression TranslateDatePart(SqlExpression instance, MethodInfo method, IReadOnlyList`1<SqlExpression> arguments);
    private SqlExpression TranslateDateTime(SqlExpression instance, MethodInfo method, IReadOnlyList`1<SqlExpression> arguments);
    private SqlExpression TranslateDateOnly(SqlExpression instance, MethodInfo method, IReadOnlyList`1<SqlExpression> arguments);
    private SqlExpression TranslateTimeOnly(SqlExpression instance, MethodInfo method, IReadOnlyList`1<SqlExpression> arguments);
    private SqlExpression TranslateTimeZoneInfo(MethodInfo method, IReadOnlyList`1<SqlExpression> arguments);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Npgsql.EntityFrameworkCore.PostgreSQL.Query.ExpressionTranslators.Internal.NpgsqlFullTextSearchMethodTranslator : object {
    private static MethodInfo TsQueryParse;
    private static MethodInfo TsVectorParse;
    private IRelationalTypeMappingSource _typeMappingSource;
    private NpgsqlSqlExpressionFactory _sqlExpressionFactory;
    private IModel _model;
    private RelationalTypeMapping _tsQueryMapping;
    private RelationalTypeMapping _tsVectorMapping;
    private RelationalTypeMapping _regconfigMapping;
    private RelationalTypeMapping _regdictionaryMapping;
    public NpgsqlFullTextSearchMethodTranslator(IRelationalTypeMappingSource typeMappingSource, NpgsqlSqlExpressionFactory sqlExpressionFactory, IModel model);
    private static NpgsqlFullTextSearchMethodTranslator();
    public virtual SqlExpression Translate(SqlExpression instance, MethodInfo method, IReadOnlyList`1<SqlExpression> arguments, IDiagnosticsLogger`1<Query> logger);
    [CompilerGeneratedAttribute]
private SqlExpression <Translate>g__ConfigAccepting|10_0(string functionName, <>c__DisplayClass10_0& );
    [CompilerGeneratedAttribute]
private SqlExpression <Translate>g__DictionaryAccepting|10_1(string functionName, <>c__DisplayClass10_0& );
    [CompilerGeneratedAttribute]
private SqlExpression <Translate>g__NonConfigAccepting|10_2(string functionName, <>c__DisplayClass10_0& );
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Npgsql.EntityFrameworkCore.PostgreSQL.Query.ExpressionTranslators.Internal.NpgsqlFuzzyStringMatchMethodTranslator : object {
    private static Dictionary`2<MethodInfo, string> Functions;
    private NpgsqlSqlExpressionFactory _sqlExpressionFactory;
    private static Boolean[][] TrueArrays;
    public NpgsqlFuzzyStringMatchMethodTranslator(NpgsqlSqlExpressionFactory sqlExpressionFactory);
    private static NpgsqlFuzzyStringMatchMethodTranslator();
    private static MethodInfo GetRuntimeMethod(string name, Type[] parameters);
    public virtual SqlExpression Translate(SqlExpression instance, MethodInfo method, IReadOnlyList`1<SqlExpression> arguments, IDiagnosticsLogger`1<Query> logger);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Npgsql.EntityFrameworkCore.PostgreSQL.Query.ExpressionTranslators.Internal.NpgsqlJsonDbFunctionsTranslator : object {
    private NpgsqlSqlExpressionFactory _sqlExpressionFactory;
    private RelationalTypeMapping _stringTypeMapping;
    private RelationalTypeMapping _jsonbTypeMapping;
    public NpgsqlJsonDbFunctionsTranslator(IRelationalTypeMappingSource typeMappingSource, NpgsqlSqlExpressionFactory sqlExpressionFactory, IModel model);
    public virtual SqlExpression Translate(SqlExpression instance, MethodInfo method, IReadOnlyList`1<SqlExpression> arguments, IDiagnosticsLogger`1<Query> logger);
    [NullableContextAttribute("0")]
[CompilerGeneratedAttribute]
private SqlExpression <Translate>b__4_0(SqlExpression a);
    [CompilerGeneratedAttribute]
private SqlExpression <Translate>g__Jsonb|4_3(SqlExpression e);
    [CompilerGeneratedAttribute]
internal static SqlExpression <Translate>g__RemoveConvert|4_4(SqlExpression e);
    [CompilerGeneratedAttribute]
private PostgresJsonTraversalExpression <Translate>g__WithReturnsText|4_5(PostgresJsonTraversalExpression traversal, bool returnsText);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Npgsql.EntityFrameworkCore.PostgreSQL.Query.ExpressionTranslators.Internal.NpgsqlJsonDomTranslator : object {
    private static MemberInfo RootElement;
    private static MethodInfo GetProperty;
    private static MethodInfo GetArrayLength;
    private static MethodInfo ArrayIndexer;
    private static String[] GetMethods;
    private IRelationalTypeMappingSource _typeMappingSource;
    private NpgsqlSqlExpressionFactory _sqlExpressionFactory;
    private RelationalTypeMapping _stringTypeMapping;
    private IModel _model;
    public NpgsqlJsonDomTranslator(IRelationalTypeMappingSource typeMappingSource, NpgsqlSqlExpressionFactory sqlExpressionFactory, IModel model);
    private static NpgsqlJsonDomTranslator();
    public virtual SqlExpression Translate(SqlExpression instance, MemberInfo member, Type returnType, IDiagnosticsLogger`1<Query> logger);
    public virtual SqlExpression Translate(SqlExpression instance, MethodInfo method, IReadOnlyList`1<SqlExpression> arguments, IDiagnosticsLogger`1<Query> logger);
    private SqlExpression ConvertFromText(SqlExpression expression, Type returnType);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Npgsql.EntityFrameworkCore.PostgreSQL.Query.ExpressionTranslators.Internal.NpgsqlJsonPocoTranslator : object {
    private IRelationalTypeMappingSource _typeMappingSource;
    private NpgsqlSqlExpressionFactory _sqlExpressionFactory;
    private RelationalTypeMapping _stringTypeMapping;
    private IModel _model;
    public NpgsqlJsonPocoTranslator(IRelationalTypeMappingSource typeMappingSource, NpgsqlSqlExpressionFactory sqlExpressionFactory, IModel model);
    public virtual SqlExpression Translate(SqlExpression instance, MemberInfo member, Type returnType, IDiagnosticsLogger`1<Query> logger);
    public virtual SqlExpression TranslateMemberAccess(SqlExpression instance, SqlExpression member, Type returnType);
    public virtual SqlExpression TranslateArrayLength(SqlExpression expression);
    private SqlExpression ConvertFromText(SqlExpression expression, Type returnType);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Npgsql.EntityFrameworkCore.PostgreSQL.Query.ExpressionTranslators.Internal.NpgsqlLikeTranslator : object {
    private static MethodInfo Like;
    private static MethodInfo LikeWithEscape;
    private static MethodInfo ILike;
    private static MethodInfo ILikeWithEscape;
    private NpgsqlSqlExpressionFactory _sqlExpressionFactory;
    public NpgsqlLikeTranslator(NpgsqlSqlExpressionFactory sqlExpressionFactory);
    private static NpgsqlLikeTranslator();
    public virtual SqlExpression Translate(SqlExpression instance, MethodInfo method, IReadOnlyList`1<SqlExpression> arguments, IDiagnosticsLogger`1<Query> logger);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Npgsql.EntityFrameworkCore.PostgreSQL.Query.ExpressionTranslators.Internal.NpgsqlLTreeTranslator : object {
    private NpgsqlSqlExpressionFactory _sqlExpressionFactory;
    private RelationalTypeMapping _boolTypeMapping;
    private RelationalTypeMapping _ltreeTypeMapping;
    private RelationalTypeMapping _ltreeArrayTypeMapping;
    private RelationalTypeMapping _lqueryTypeMapping;
    private RelationalTypeMapping _lqueryArrayTypeMapping;
    private RelationalTypeMapping _ltxtqueryTypeMapping;
    private static MethodInfo IsAncestorOf;
    private static MethodInfo IsDescendantOf;
    private static MethodInfo MatchesLQuery;
    private static MethodInfo MatchesLTxtQuery;
    public NpgsqlLTreeTranslator(IRelationalTypeMappingSource typeMappingSource, NpgsqlSqlExpressionFactory sqlExpressionFactory, IModel model);
    private static NpgsqlLTreeTranslator();
    public virtual SqlExpression Translate(SqlExpression instance, MethodInfo method, IReadOnlyList`1<SqlExpression> arguments, IDiagnosticsLogger`1<Query> logger);
    public virtual SqlExpression Translate(SqlExpression instance, MemberInfo member, Type returnType, IDiagnosticsLogger`1<Query> logger);
    public virtual Expression VisitArrayMethodCall(NpgsqlSqlTranslatingExpressionVisitor sqlTranslatingExpressionVisitor, MethodInfo method, ReadOnlyCollection`1<Expression> arguments);
    private SqlExpression ApplyTypeMappingOrConvert(SqlExpression sqlExpression, RelationalTypeMapping typeMapping);
    [CompilerGeneratedAttribute]
internal static SqlExpression <VisitArrayMethodCall>g__Visit|14_0(Expression expression, <>c__DisplayClass14_0& );
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Npgsql.EntityFrameworkCore.PostgreSQL.Query.ExpressionTranslators.Internal.NpgsqlMathTranslator : object {
    private static Dictionary`2<MethodInfo, string> SupportedMethodTranslations;
    private static IEnumerable`1<MethodInfo> TruncateMethodInfos;
    private static IEnumerable`1<MethodInfo> RoundMethodInfos;
    private static IEnumerable`1<MethodInfo> SignMethodInfos;
    private static MethodInfo RoundDecimalTwoParams;
    private static MethodInfo DoubleIsNanMethodInfo;
    private static MethodInfo DoubleIsPositiveInfinityMethodInfo;
    private static MethodInfo DoubleIsNegativeInfinityMethodInfo;
    private static MethodInfo FloatIsNanMethodInfo;
    private static MethodInfo FloatIsPositiveInfinityMethodInfo;
    private static MethodInfo FloatIsNegativeInfinityMethodInfo;
    private ISqlExpressionFactory _sqlExpressionFactory;
    private RelationalTypeMapping _intTypeMapping;
    private RelationalTypeMapping _decimalTypeMapping;
    public NpgsqlMathTranslator(IRelationalTypeMappingSource typeMappingSource, ISqlExpressionFactory sqlExpressionFactory, IModel model);
    private static NpgsqlMathTranslator();
    public virtual SqlExpression Translate(SqlExpression instance, MethodInfo method, IReadOnlyList`1<SqlExpression> arguments, IDiagnosticsLogger`1<Query> logger);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Npgsql.EntityFrameworkCore.PostgreSQL.Query.ExpressionTranslators.Internal.NpgsqlMemberTranslatorProvider : RelationalMemberTranslatorProvider {
    [CompilerGeneratedAttribute]
private NpgsqlJsonPocoTranslator <JsonPocoTranslator>k__BackingField;
    public NpgsqlJsonPocoTranslator JsonPocoTranslator { get; }
    public NpgsqlMemberTranslatorProvider(RelationalMemberTranslatorProviderDependencies dependencies, IModel model, IRelationalTypeMappingSource typeMappingSource, IDbContextOptions contextOptions);
    [CompilerGeneratedAttribute]
public virtual NpgsqlJsonPocoTranslator get_JsonPocoTranslator();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Npgsql.EntityFrameworkCore.PostgreSQL.Query.ExpressionTranslators.Internal.NpgsqlMethodCallTranslatorProvider : RelationalMethodCallTranslatorProvider {
    [CompilerGeneratedAttribute]
private NpgsqlLTreeTranslator <LTreeTranslator>k__BackingField;
    public NpgsqlLTreeTranslator LTreeTranslator { get; }
    public NpgsqlMethodCallTranslatorProvider(RelationalMethodCallTranslatorProviderDependencies dependencies, IModel model, IDbContextOptions contextOptions);
    [CompilerGeneratedAttribute]
public virtual NpgsqlLTreeTranslator get_LTreeTranslator();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Npgsql.EntityFrameworkCore.PostgreSQL.Query.ExpressionTranslators.Internal.NpgsqlMiscAggregateMethodTranslator : object {
    private static MethodInfo StringJoin;
    private static MethodInfo StringConcat;
    private NpgsqlSqlExpressionFactory _sqlExpressionFactory;
    private IRelationalTypeMappingSource _typeMappingSource;
    public NpgsqlMiscAggregateMethodTranslator(NpgsqlSqlExpressionFactory sqlExpressionFactory, IRelationalTypeMappingSource typeMappingSource);
    private static NpgsqlMiscAggregateMethodTranslator();
    public virtual SqlExpression Translate(MethodInfo method, EnumerableExpression source, IReadOnlyList`1<SqlExpression> arguments, IDiagnosticsLogger`1<Query> logger);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Npgsql.EntityFrameworkCore.PostgreSQL.Query.ExpressionTranslators.Internal.NpgsqlNetworkTranslator : object {
    private static MethodInfo IPAddressParse;
    private static MethodInfo PhysicalAddressParse;
    private NpgsqlSqlExpressionFactory _sqlExpressionFactory;
    private RelationalTypeMapping _inetMapping;
    private RelationalTypeMapping _cidrMapping;
    private RelationalTypeMapping _macaddr8Mapping;
    private RelationalTypeMapping _longAddressMapping;
    public NpgsqlNetworkTranslator(IRelationalTypeMappingSource typeMappingSource, NpgsqlSqlExpressionFactory sqlExpressionFactory, IModel model);
    private static NpgsqlNetworkTranslator();
    public virtual SqlExpression Translate(SqlExpression instance, MethodInfo method, IReadOnlyList`1<SqlExpression> arguments, IDiagnosticsLogger`1<Query> logger);
    [CompilerGeneratedAttribute]
private SqlFunctionExpression <Translate>g__NullPropagatingFunction|8_0(string name, SqlExpression[] arguments, Type returnType, RelationalTypeMapping typeMapping);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Npgsql.EntityFrameworkCore.PostgreSQL.Query.ExpressionTranslators.Internal.NpgsqlNewGuidTranslator : object {
    private static MethodInfo MethodInfo;
    private ISqlExpressionFactory _sqlExpressionFactory;
    private string _uuidGenerationFunction;
    public NpgsqlNewGuidTranslator(ISqlExpressionFactory sqlExpressionFactory, Version postgresVersion);
    private static NpgsqlNewGuidTranslator();
    public virtual SqlExpression Translate(SqlExpression instance, MethodInfo method, IReadOnlyList`1<SqlExpression> arguments, IDiagnosticsLogger`1<Query> logger);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Npgsql.EntityFrameworkCore.PostgreSQL.Query.ExpressionTranslators.Internal.NpgsqlObjectToStringTranslator : object {
    private static HashSet`1<Type> _typeMapping;
    private ISqlExpressionFactory _sqlExpressionFactory;
    private RelationalTypeMapping _textTypeMapping;
    public NpgsqlObjectToStringTranslator(IRelationalTypeMappingSource typeMappingSource, ISqlExpressionFactory sqlExpressionFactory);
    private static NpgsqlObjectToStringTranslator();
    public virtual SqlExpression Translate(SqlExpression instance, MethodInfo method, IReadOnlyList`1<SqlExpression> arguments, IDiagnosticsLogger`1<Query> logger);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Npgsql.EntityFrameworkCore.PostgreSQL.Query.ExpressionTranslators.Internal.NpgsqlQueryableAggregateMethodTranslator : object {
    private NpgsqlSqlExpressionFactory _sqlExpressionFactory;
    private IRelationalTypeMappingSource _typeMappingSource;
    public NpgsqlQueryableAggregateMethodTranslator(NpgsqlSqlExpressionFactory sqlExpressionFactory, IRelationalTypeMappingSource typeMappingSource);
    public virtual SqlExpression Translate(MethodInfo method, EnumerableExpression source, IReadOnlyList`1<SqlExpression> arguments, IDiagnosticsLogger`1<Query> logger);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Npgsql.EntityFrameworkCore.PostgreSQL.Query.ExpressionTranslators.Internal.NpgsqlRandomTranslator : object {
    private static MethodInfo _methodInfo;
    private ISqlExpressionFactory _sqlExpressionFactory;
    public NpgsqlRandomTranslator(ISqlExpressionFactory sqlExpressionFactory);
    private static NpgsqlRandomTranslator();
    public virtual SqlExpression Translate(SqlExpression instance, MethodInfo method, IReadOnlyList`1<SqlExpression> arguments, IDiagnosticsLogger`1<Query> logger);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Npgsql.EntityFrameworkCore.PostgreSQL.Query.ExpressionTranslators.Internal.NpgsqlRangeTranslator : object {
    private IRelationalTypeMappingSource _typeMappingSource;
    private NpgsqlSqlExpressionFactory _sqlExpressionFactory;
    private IModel _model;
    private bool _supportsMultiranges;
    private static MethodInfo EnumerableAnyWithoutPredicate;
    public NpgsqlRangeTranslator(IRelationalTypeMappingSource typeMappingSource, NpgsqlSqlExpressionFactory npgsqlSqlExpressionFactory, IModel model, bool supportsMultiranges);
    private static NpgsqlRangeTranslator();
    public virtual SqlExpression Translate(SqlExpression instance, MethodInfo method, IReadOnlyList`1<SqlExpression> arguments, IDiagnosticsLogger`1<Query> logger);
    public virtual SqlExpression Translate(SqlExpression instance, MemberInfo member, Type returnType, IDiagnosticsLogger`1<Query> logger);
    [CompilerGeneratedAttribute]
private SqlFunctionExpression <Translate>g__SingleArgBoolFunction|7_0(string name, SqlExpression argument);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Npgsql.EntityFrameworkCore.PostgreSQL.Query.ExpressionTranslators.Internal.NpgsqlRegexIsMatchTranslator : object {
    private static MethodInfo IsMatch;
    private static MethodInfo IsMatchWithRegexOptions;
    private static RegexOptions UnsupportedRegexOptions;
    private NpgsqlSqlExpressionFactory _sqlExpressionFactory;
    public NpgsqlRegexIsMatchTranslator(NpgsqlSqlExpressionFactory sqlExpressionFactory);
    private static NpgsqlRegexIsMatchTranslator();
    public virtual SqlExpression Translate(SqlExpression instance, MethodInfo method, IReadOnlyList`1<SqlExpression> arguments, IDiagnosticsLogger`1<Query> logger);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Npgsql.EntityFrameworkCore.PostgreSQL.Query.ExpressionTranslators.Internal.NpgsqlRowValueTranslator : object {
    private NpgsqlSqlExpressionFactory _sqlExpressionFactory;
    private static MethodInfo GreaterThan;
    private static MethodInfo LessThan;
    private static MethodInfo GreaterThanOrEqual;
    private static MethodInfo LessThanOrEqual;
    private static Dictionary`2<MethodInfo, ExpressionType> ComparisonMethods;
    public NpgsqlRowValueTranslator(NpgsqlSqlExpressionFactory sqlExpressionFactory);
    private static NpgsqlRowValueTranslator();
    [DynamicDependencyAttribute("8", "System.ValueType")]
public virtual SqlExpression Translate(SqlExpression instance, MethodInfo method, IReadOnlyList`1<SqlExpression> arguments, IDiagnosticsLogger`1<Query> logger);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Npgsql.EntityFrameworkCore.PostgreSQL.Query.ExpressionTranslators.Internal.NpgsqlStatisticsAggregateMethodTranslator : object {
    private NpgsqlSqlExpressionFactory _sqlExpressionFactory;
    private RelationalTypeMapping _doubleTypeMapping;
    private RelationalTypeMapping _longTypeMapping;
    public NpgsqlStatisticsAggregateMethodTranslator(NpgsqlSqlExpressionFactory sqlExpressionFactory, IRelationalTypeMappingSource typeMappingSource);
    public virtual SqlExpression Translate(MethodInfo method, EnumerableExpression source, IReadOnlyList`1<SqlExpression> arguments, IDiagnosticsLogger`1<Query> logger);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Npgsql.EntityFrameworkCore.PostgreSQL.Query.ExpressionTranslators.Internal.NpgsqlStringMemberTranslator : object {
    private ISqlExpressionFactory _sqlExpressionFactory;
    public NpgsqlStringMemberTranslator(ISqlExpressionFactory sqlExpressionFactory);
    public virtual SqlExpression Translate(SqlExpression instance, MemberInfo member, Type returnType, IDiagnosticsLogger`1<Query> logger);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Npgsql.EntityFrameworkCore.PostgreSQL.Query.ExpressionTranslators.Internal.NpgsqlStringMethodTranslator : object {
    private static char LikeEscapeChar;
    private ISqlExpressionFactory _sqlExpressionFactory;
    private SqlConstantExpression _whitespace;
    private RelationalTypeMapping _textTypeMapping;
    private static MethodInfo Contains;
    private static MethodInfo DbFunctionsReverse;
    private static MethodInfo EndsWith;
    private static MethodInfo IndexOfChar;
    private static MethodInfo IndexOfString;
    private static MethodInfo IsNullOrWhiteSpace;
    private static MethodInfo PadLeft;
    private static MethodInfo PadLeftWithChar;
    private static MethodInfo PadRight;
    private static MethodInfo PadRightWithChar;
    private static MethodInfo Replace;
    private static MethodInfo StartsWith;
    private static MethodInfo Substring;
    private static MethodInfo SubstringWithLength;
    private static MethodInfo ToLower;
    private static MethodInfo ToUpper;
    private static MethodInfo TrimBothWithNoParam;
    private static MethodInfo TrimBothWithChars;
    private static MethodInfo TrimBothWithSingleChar;
    private static MethodInfo TrimEndWithNoParam;
    private static MethodInfo TrimEndWithChars;
    private static MethodInfo TrimEndWithSingleChar;
    private static MethodInfo TrimStartWithNoParam;
    private static MethodInfo TrimStartWithChars;
    private static MethodInfo TrimStartWithSingleChar;
    private static MethodInfo FirstOrDefaultMethodInfoWithoutArgs;
    private static MethodInfo LastOrDefaultMethodInfoWithoutArgs;
    private static MethodInfo String_Join1;
    private static MethodInfo String_Join2;
    private static MethodInfo String_Join3;
    private static MethodInfo String_Join4;
    private static MethodInfo String_Join_generic1;
    private static MethodInfo String_Join_generic2;
    public NpgsqlStringMethodTranslator(NpgsqlTypeMappingSource typeMappingSource, ISqlExpressionFactory sqlExpressionFactory, IModel model);
    private static NpgsqlStringMethodTranslator();
    public virtual SqlExpression Translate(SqlExpression instance, MethodInfo method, IReadOnlyList`1<SqlExpression> arguments, IDiagnosticsLogger`1<Query> logger);
    private SqlExpression TranslateStartsEndsWith(SqlExpression instance, SqlExpression pattern, bool startsWith);
    private bool IsLikeWildChar(char c);
    private string EscapeLikePattern(string pattern);
    private SqlExpression GenerateOneBasedIndexExpression(SqlExpression expression);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Npgsql.EntityFrameworkCore.PostgreSQL.Query.ExpressionTranslators.Internal.NpgsqlTimeSpanMemberTranslator : object {
    private ISqlExpressionFactory _sqlExpressionFactory;
    private static Boolean[] FalseTrueArray;
    public NpgsqlTimeSpanMemberTranslator(ISqlExpressionFactory sqlExpressionFactory);
    private static NpgsqlTimeSpanMemberTranslator();
    public virtual SqlExpression Translate(SqlExpression instance, MemberInfo member, Type returnType, IDiagnosticsLogger`1<Query> logger);
    [CompilerGeneratedAttribute]
private SqlExpression <Translate>g__Floor|3_0(SqlExpression value, <>c__DisplayClass3_0& );
    [CompilerGeneratedAttribute]
private SqlFunctionExpression <Translate>g__DatePart|3_1(string part, SqlExpression value, <>c__DisplayClass3_0& );
    [CompilerGeneratedAttribute]
private SqlBinaryExpression <Translate>g__TranslateDurationTotalMember|3_2(SqlExpression instance, double divisor, <>c__DisplayClass3_0& );
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Npgsql.EntityFrameworkCore.PostgreSQL.Query.ExpressionTranslators.Internal.NpgsqlTrigramsMethodTranslator : object {
    private static Dictionary`2<MethodInfo, string> Functions;
    private static Dictionary`2<MethodInfo, string> BoolReturningOperators;
    private static Dictionary`2<MethodInfo, string> FloatReturningOperators;
    private NpgsqlSqlExpressionFactory _sqlExpressionFactory;
    private RelationalTypeMapping _boolMapping;
    private RelationalTypeMapping _floatMapping;
    private static Boolean[][] TrueArrays;
    public NpgsqlTrigramsMethodTranslator(IRelationalTypeMappingSource typeMappingSource, NpgsqlSqlExpressionFactory sqlExpressionFactory, IModel model);
    private static NpgsqlTrigramsMethodTranslator();
    private static MethodInfo GetRuntimeMethod(string name, Type[] parameters);
    public virtual SqlExpression Translate(SqlExpression instance, MethodInfo method, IReadOnlyList`1<SqlExpression> arguments, IDiagnosticsLogger`1<Query> logger);
}
public class Npgsql.EntityFrameworkCore.PostgreSQL.Query.Internal.NpgsqlCompiledQueryCacheKeyGenerator : RelationalCompiledQueryCacheKeyGenerator {
    [NullableContextAttribute("1")]
public NpgsqlCompiledQueryCacheKeyGenerator(CompiledQueryCacheKeyGeneratorDependencies dependencies, RelationalCompiledQueryCacheKeyGeneratorDependencies relationalDependencies);
    [NullableContextAttribute("1")]
public virtual object GenerateCacheKey(Expression query, bool async);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Npgsql.EntityFrameworkCore.PostgreSQL.Query.Internal.NpgsqlDeleteConvertingExpressionVisitor : ExpressionVisitor {
    public virtual Expression Process(Expression node);
    protected virtual Expression VisitDelete(DeleteExpression deleteExpression);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Npgsql.EntityFrameworkCore.PostgreSQL.Query.Internal.NpgsqlEvaluatableExpressionFilter : RelationalEvaluatableExpressionFilter {
    private static MethodInfo TsQueryParse;
    private static MethodInfo TsVectorParse;
    public NpgsqlEvaluatableExpressionFilter(EvaluatableExpressionFilterDependencies dependencies, RelationalEvaluatableExpressionFilterDependencies relationalDependencies);
    private static NpgsqlEvaluatableExpressionFilter();
    public virtual bool IsEvaluatableExpression(Expression expression, IModel model);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Npgsql.EntityFrameworkCore.PostgreSQL.Query.Internal.NpgsqlParameterBasedSqlProcessor : RelationalParameterBasedSqlProcessor {
    public NpgsqlParameterBasedSqlProcessor(RelationalParameterBasedSqlProcessorDependencies dependencies, bool useRelationalNulls);
    public virtual Expression Optimize(Expression queryExpression, IReadOnlyDictionary`2<string, object> parametersValues, Boolean& canCache);
    protected virtual Expression ProcessSqlNullability(Expression selectExpression, IReadOnlyDictionary`2<string, object> parametersValues, Boolean& canCache);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Npgsql.EntityFrameworkCore.PostgreSQL.Query.Internal.NpgsqlParameterBasedSqlProcessorFactory : object {
    private RelationalParameterBasedSqlProcessorDependencies _dependencies;
    public NpgsqlParameterBasedSqlProcessorFactory(RelationalParameterBasedSqlProcessorDependencies dependencies);
    public virtual RelationalParameterBasedSqlProcessor Create(bool useRelationalNulls);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Npgsql.EntityFrameworkCore.PostgreSQL.Query.Internal.NpgsqlQueryableMethodTranslatingExpressionVisitor : RelationalQueryableMethodTranslatingExpressionVisitor {
    public NpgsqlQueryableMethodTranslatingExpressionVisitor(QueryableMethodTranslatingExpressionVisitorDependencies dependencies, RelationalQueryableMethodTranslatingExpressionVisitorDependencies relationalDependencies, QueryCompilationContext queryCompilationContext);
    protected virtual bool IsValidSelectExpressionForExecuteUpdate(SelectExpression selectExpression, EntityShaperExpression entityShaperExpression, TableExpression& tableExpression);
    protected virtual bool IsValidSelectExpressionForExecuteDelete(SelectExpression selectExpression, EntityShaperExpression entityShaperExpression, TableExpression& tableExpression);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Npgsql.EntityFrameworkCore.PostgreSQL.Query.Internal.NpgsqlQueryableMethodTranslatingExpressionVisitorFactory : object {
    [CompilerGeneratedAttribute]
private QueryableMethodTranslatingExpressionVisitorDependencies <Dependencies>k__BackingField;
    [CompilerGeneratedAttribute]
private RelationalQueryableMethodTranslatingExpressionVisitorDependencies <RelationalDependencies>k__BackingField;
    protected QueryableMethodTranslatingExpressionVisitorDependencies Dependencies { get; }
    protected RelationalQueryableMethodTranslatingExpressionVisitorDependencies RelationalDependencies { get; }
    public NpgsqlQueryableMethodTranslatingExpressionVisitorFactory(QueryableMethodTranslatingExpressionVisitorDependencies dependencies, RelationalQueryableMethodTranslatingExpressionVisitorDependencies relationalDependencies);
    [CompilerGeneratedAttribute]
protected virtual QueryableMethodTranslatingExpressionVisitorDependencies get_Dependencies();
    [CompilerGeneratedAttribute]
protected virtual RelationalQueryableMethodTranslatingExpressionVisitorDependencies get_RelationalDependencies();
    public virtual QueryableMethodTranslatingExpressionVisitor Create(QueryCompilationContext queryCompilationContext);
}
public class Npgsql.EntityFrameworkCore.PostgreSQL.Query.Internal.NpgsqlQueryCompilationContext : RelationalQueryCompilationContext {
    public bool IsBuffering { get; }
    [NullableContextAttribute("1")]
public NpgsqlQueryCompilationContext(QueryCompilationContextDependencies dependencies, RelationalQueryCompilationContextDependencies relationalDependencies, bool async);
    public virtual bool get_IsBuffering();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Npgsql.EntityFrameworkCore.PostgreSQL.Query.Internal.NpgsqlQueryCompilationContextFactory : object {
    private QueryCompilationContextDependencies _dependencies;
    private RelationalQueryCompilationContextDependencies _relationalDependencies;
    public NpgsqlQueryCompilationContextFactory(QueryCompilationContextDependencies dependencies, RelationalQueryCompilationContextDependencies relationalDependencies);
    public virtual QueryCompilationContext Create(bool async);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Npgsql.EntityFrameworkCore.PostgreSQL.Query.Internal.NpgsqlQuerySqlGenerator : QuerySqlGenerator {
    private ISqlGenerationHelper _sqlGenerationHelper;
    private bool _reverseNullOrderingEnabled;
    private Version _postgresVersion;
    public NpgsqlQuerySqlGenerator(QuerySqlGeneratorDependencies dependencies, bool reverseNullOrderingEnabled, Version postgresVersion);
    protected virtual Expression VisitExtension(Expression extensionExpression);
    protected virtual void GenerateRootCommand(Expression queryExpression);
    protected virtual void GenerateLimitOffset(SelectExpression selectExpression);
    protected virtual string GetOperator(SqlBinaryExpression e);
    protected virtual Expression VisitOrdering(OrderingExpression ordering);
    protected virtual void GenerateTop(SelectExpression selectExpression);
    protected virtual Expression VisitCrossApply(CrossApplyExpression crossApplyExpression);
    protected virtual Expression VisitOuterApply(OuterApplyExpression outerApplyExpression);
    protected virtual Expression VisitSqlBinary(SqlBinaryExpression binary);
    protected virtual Expression VisitDelete(DeleteExpression deleteExpression);
    protected virtual Expression VisitPostgresDelete(PostgresDeleteExpression pgDeleteExpression);
    protected virtual Expression VisitUpdate(UpdateExpression updateExpression);
    protected virtual Expression VisitPostgresNewArray(PostgresNewArrayExpression postgresNewArrayExpression);
    protected virtual Expression VisitPostgresBinary(PostgresBinaryExpression binaryExpression);
    protected virtual Expression VisitArrayIndex(SqlBinaryExpression expression);
    protected virtual Expression VisitSqlUnary(SqlUnaryExpression sqlUnaryExpression);
    protected virtual void GenerateSetOperationOperand(SetOperationBase setOperation, SelectExpression operand);
    protected virtual Expression VisitCollate(CollateExpression collateExpresion);
    public virtual Expression VisitArrayAll(PostgresAllExpression expression);
    public virtual Expression VisitArrayAny(PostgresAnyExpression expression);
    public virtual Expression VisitArrayIndex(PostgresArrayIndexExpression expression);
    public virtual Expression VisitRegexMatch(PostgresRegexMatchExpression expression);
    public virtual Expression VisitRowValue(PostgresRowValueExpression rowValueExpression);
    public virtual Expression VisitILike(PostgresILikeExpression likeExpression);
    public virtual Expression VisitJsonPathTraversal(PostgresJsonTraversalExpression expression);
    public virtual Expression VisitUnknownBinary(PostgresUnknownBinaryExpression unknownBinaryExpression);
    public virtual Expression VisitPostgresFunction(PostgresFunctionExpression e);
    private static bool RequiresBrackets(SqlExpression expression);
    private void GenerateList(IReadOnlyList`1<T> items, Action`1<T> generationAction, Action`1<IRelationalCommandBuilder> joinAction);
    [NullableContextAttribute("0")]
[CompilerGeneratedAttribute]
private void <VisitPostgresDelete>b__14_0(TableExpressionBase t);
    [CompilerGeneratedAttribute]
internal static void <VisitUpdate>g__LiftPredicate|15_0(TableExpressionBase joinTable, <>c__DisplayClass15_0& );
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Npgsql.EntityFrameworkCore.PostgreSQL.Query.Internal.NpgsqlQuerySqlGeneratorFactory : object {
    private QuerySqlGeneratorDependencies _dependencies;
    private INpgsqlSingletonOptions _npgsqlSingletonOptions;
    public NpgsqlQuerySqlGeneratorFactory(QuerySqlGeneratorDependencies dependencies, INpgsqlSingletonOptions npgsqlSingletonOptions);
    public virtual QuerySqlGenerator Create();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Npgsql.EntityFrameworkCore.PostgreSQL.Query.Internal.NpgsqlQueryTranslationPostprocessor : RelationalQueryTranslationPostprocessor {
    public NpgsqlQueryTranslationPostprocessor(QueryTranslationPostprocessorDependencies dependencies, RelationalQueryTranslationPostprocessorDependencies relationalDependencies, QueryCompilationContext queryCompilationContext);
    public virtual Expression Process(Expression query);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Npgsql.EntityFrameworkCore.PostgreSQL.Query.Internal.NpgsqlQueryTranslationPostprocessorFactory : object {
    [CompilerGeneratedAttribute]
private QueryTranslationPostprocessorDependencies <Dependencies>k__BackingField;
    [CompilerGeneratedAttribute]
private RelationalQueryTranslationPostprocessorDependencies <RelationalDependencies>k__BackingField;
    protected QueryTranslationPostprocessorDependencies Dependencies { get; }
    protected RelationalQueryTranslationPostprocessorDependencies RelationalDependencies { get; }
    public NpgsqlQueryTranslationPostprocessorFactory(QueryTranslationPostprocessorDependencies dependencies, RelationalQueryTranslationPostprocessorDependencies relationalDependencies);
    [CompilerGeneratedAttribute]
protected virtual QueryTranslationPostprocessorDependencies get_Dependencies();
    [CompilerGeneratedAttribute]
protected virtual RelationalQueryTranslationPostprocessorDependencies get_RelationalDependencies();
    public virtual QueryTranslationPostprocessor Create(QueryCompilationContext queryCompilationContext);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Npgsql.EntityFrameworkCore.PostgreSQL.Query.Internal.NpgsqlSetOperationTypeResolutionCompensatingExpressionVisitor : ExpressionVisitor {
    private State _state;
    protected virtual Expression VisitExtension(Expression extensionExpression);
    private Expression VisitSetOperation(SetOperationBase setOperationExpression);
    private Expression VisitSelect(SelectExpression selectExpression);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Npgsql.EntityFrameworkCore.PostgreSQL.Query.Internal.NpgsqlSqlNullabilityProcessor : SqlNullabilityProcessor {
    private ISqlExpressionFactory _sqlExpressionFactory;
    public NpgsqlSqlNullabilityProcessor(RelationalParameterBasedSqlProcessorDependencies dependencies, bool useRelationalNulls);
    protected virtual SqlExpression VisitSqlBinary(SqlBinaryExpression sqlBinaryExpression, bool allowOptimizedExpansion, Boolean& nullable);
    protected virtual SqlExpression VisitCustomSqlExpression(SqlExpression sqlExpression, bool allowOptimizedExpansion, Boolean& nullable);
    protected virtual SqlExpression VisitAny(PostgresAnyExpression anyExpression, bool allowOptimizedExpansion, Boolean& nullable);
    protected virtual SqlExpression VisitAll(PostgresAllExpression allExpression, bool allowOptimizedExpansion, Boolean& nullable);
    protected virtual SqlExpression VisitArrayIndex(PostgresArrayIndexExpression arrayIndexExpression, bool allowOptimizedExpansion, Boolean& nullable);
    protected virtual SqlExpression VisitPostgresBinary(PostgresBinaryExpression binaryExpression, bool allowOptimizedExpansion, Boolean& nullable);
    protected virtual SqlExpression VisitSqlFunction(SqlFunctionExpression sqlFunctionExpression, bool allowOptimizedExpansion, Boolean& nullable);
    protected virtual SqlExpression VisitILike(PostgresILikeExpression iLikeExpression, bool allowOptimizedExpansion, Boolean& nullable);
    protected virtual SqlExpression VisitNewArray(PostgresNewArrayExpression newArrayExpression, bool allowOptimizedExpansion, Boolean& nullable);
    protected virtual SqlExpression VisitRegexMatch(PostgresRegexMatchExpression regexMatchExpression, bool allowOptimizedExpansion, Boolean& nullable);
    protected virtual SqlExpression VisitJsonTraversal(PostgresJsonTraversalExpression jsonTraversalExpression, bool allowOptimizedExpansion, Boolean& nullable);
    protected virtual SqlExpression VisitRowValueExpression(PostgresRowValueExpression rowValueExpression, bool allowOptimizedExpansion, Boolean& nullable);
    protected virtual SqlExpression VisitUnknownBinary(PostgresUnknownBinaryExpression unknownBinaryExpression, bool allowOptimizedExpansion, Boolean& nullable);
    private static bool MayContainNulls(SqlExpression arrayExpression);
    [CompilerGeneratedAttribute]
internal static List`1<SqlExpression> <VisitSqlBinary>g__SliceToList|2_0(IReadOnlyList`1<SqlExpression> source, int capacity, int count);
    [CompilerGeneratedAttribute]
private PostgresFunctionExpression <VisitSqlFunction>g__VisitPostgresFunctionComponents|8_0(PostgresFunctionExpression pgFunctionExpression);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Npgsql.EntityFrameworkCore.PostgreSQL.Query.Internal.NpgsqlSqlTranslatingExpressionVisitor : RelationalSqlTranslatingExpressionVisitor {
    private static ConstructorInfo DateTimeCtor1;
    private static ConstructorInfo DateTimeCtor2;
    private static ConstructorInfo DateTimeCtor3;
    private static ConstructorInfo DateOnlyCtor;
    private static MethodInfo Like2MethodInfo;
    private static MethodInfo ILike2MethodInfo;
    private static MethodInfo ObjectEquals;
    private NpgsqlSqlExpressionFactory _sqlExpressionFactory;
    private IRelationalTypeMappingSource _typeMappingSource;
    private NpgsqlJsonPocoTranslator _jsonPocoTranslator;
    private NpgsqlLTreeTranslator _ltreeTranslator;
    private RelationalTypeMapping _timestampMapping;
    private RelationalTypeMapping _timestampTzMapping;
    [NullableAttribute("2")]
private static Type _nodaTimePeriodType;
    public NpgsqlSqlTranslatingExpressionVisitor(RelationalSqlTranslatingExpressionVisitorDependencies dependencies, QueryCompilationContext queryCompilationContext, QueryableMethodTranslatingExpressionVisitor queryableMethodTranslatingExpressionVisitor);
    private static NpgsqlSqlTranslatingExpressionVisitor();
    protected virtual Expression VisitUnary(UnaryExpression unaryExpression);
    protected virtual Expression VisitMethodCall(MethodCallExpression methodCall);
    private Expression VisitArrayMethodCall(MethodInfo method, ReadOnlyCollection`1<Expression> arguments);
    protected virtual Expression VisitNewArray(NewArrayExpression newArrayExpression);
    protected virtual Expression VisitBinary(BinaryExpression binaryExpression);
    protected virtual Expression VisitNew(NewExpression newExpression);
    private static Expression TryRemoveImplicitConvert(Expression expression);
    [NullableContextAttribute("2")]
[DebuggerStepThroughAttribute]
private static bool TranslationFailed(Expression original, Expression translation, SqlExpression& castTranslation);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
internal static bool <VisitArrayMethodCall>g__TryMatchEquality|17_0(Expression expression, Expression& left, Expression& right);
    [CompilerGeneratedAttribute]
private bool <VisitNew>g__TryTranslateArguments|20_0(SqlExpression[]& sqlArguments, <>c__DisplayClass20_0& );
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Npgsql.EntityFrameworkCore.PostgreSQL.Query.Internal.NpgsqlSqlTranslatingExpressionVisitorFactory : object {
    private RelationalSqlTranslatingExpressionVisitorDependencies _dependencies;
    public NpgsqlSqlTranslatingExpressionVisitorFactory(RelationalSqlTranslatingExpressionVisitorDependencies dependencies);
    public virtual RelationalSqlTranslatingExpressionVisitor Create(QueryCompilationContext queryCompilationContext, QueryableMethodTranslatingExpressionVisitor queryableMethodTranslatingExpressionVisitor);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Npgsql.EntityFrameworkCore.PostgreSQL.Query.NpgsqlSqlExpressionFactory : SqlExpressionFactory {
    private NpgsqlTypeMappingSource _typeMappingSource;
    private RelationalTypeMapping _boolTypeMapping;
    private RelationalTypeMapping _doubleTypeMapping;
    [NullableAttribute("2")]
private static Type _nodaTimeDurationType;
    [NullableAttribute("2")]
private static Type _nodaTimePeriodType;
    public NpgsqlSqlExpressionFactory(SqlExpressionFactoryDependencies dependencies);
    public virtual PostgresRegexMatchExpression RegexMatch(SqlExpression match, SqlExpression pattern, RegexOptions options);
    public virtual PostgresAnyExpression Any(SqlExpression item, SqlExpression array, PostgresAnyOperatorType operatorType);
    public virtual PostgresAllExpression All(SqlExpression item, SqlExpression array, PostgresAllOperatorType operatorType);
    public virtual PostgresArrayIndexExpression ArrayIndex(SqlExpression array, SqlExpression index, RelationalTypeMapping typeMapping);
    public virtual AtTimeZoneExpression AtUtc(SqlExpression timestamp, RelationalTypeMapping typeMapping);
    public virtual AtTimeZoneExpression AtTimeZone(SqlExpression timestamp, SqlExpression timeZone, Type type, RelationalTypeMapping typeMapping);
    public virtual PostgresILikeExpression ILike(SqlExpression match, SqlExpression pattern, SqlExpression escapeChar);
    public virtual PostgresJsonTraversalExpression JsonTraversal(SqlExpression expression, bool returnsText, Type type, RelationalTypeMapping typeMapping);
    public virtual PostgresJsonTraversalExpression JsonTraversal(SqlExpression expression, IEnumerable`1<SqlExpression> path, bool returnsText, Type type, RelationalTypeMapping typeMapping);
    public virtual SqlExpression NewArrayOrConstant(IReadOnlyList`1<SqlExpression> expressions, Type type, RelationalTypeMapping typeMapping);
    public virtual PostgresNewArrayExpression NewArray(IReadOnlyList`1<SqlExpression> expressions, Type type, RelationalTypeMapping typeMapping);
    public virtual SqlBinaryExpression MakeBinary(ExpressionType operatorType, SqlExpression left, SqlExpression right, RelationalTypeMapping typeMapping);
    public virtual PostgresBinaryExpression MakePostgresBinary(PostgresExpressionType operatorType, SqlExpression left, SqlExpression right, RelationalTypeMapping typeMapping);
    public virtual PostgresBinaryExpression Contains(SqlExpression left, SqlExpression right);
    public virtual PostgresBinaryExpression ContainedBy(SqlExpression left, SqlExpression right);
    public virtual PostgresBinaryExpression Overlaps(SqlExpression left, SqlExpression right);
    public virtual PostgresFunctionExpression AggregateFunction(string name, IEnumerable`1<SqlExpression> arguments, EnumerableExpression aggregateEnumerableExpression, bool nullable, IEnumerable`1<bool> argumentsPropagateNullability, Type returnType, RelationalTypeMapping typeMapping);
    [NullableContextAttribute("2")]
public virtual SqlExpression ApplyTypeMapping(SqlExpression sqlExpression, RelationalTypeMapping typeMapping);
    private SqlBinaryExpression ApplyTypeMappingOnSqlBinary(SqlBinaryExpression binary, RelationalTypeMapping typeMapping);
    private SqlExpression ApplyTypeMappingOnRegexMatch(PostgresRegexMatchExpression postgresRegexMatchExpression);
    private SqlExpression ApplyTypeMappingOnRowValue(PostgresRowValueExpression postgresRowValueExpression, RelationalTypeMapping typeMapping);
    private SqlExpression ApplyTypeMappingOnAny(PostgresAnyExpression postgresAnyExpression);
    private SqlExpression ApplyTypeMappingOnAll(PostgresAllExpression postgresAllExpression);
    internal ValueTuple`2<SqlExpression, SqlExpression> ApplyTypeMappingsOnItemAndArray(SqlExpression itemExpression, SqlExpression arrayExpression);
    private SqlExpression ApplyTypeMappingOnArrayIndex(PostgresArrayIndexExpression postgresArrayIndexExpression, RelationalTypeMapping typeMapping);
    private SqlExpression ApplyTypeMappingOnILike(PostgresILikeExpression ilikeExpression);
    private SqlExpression ApplyTypeMappingOnPostgresBinary(PostgresBinaryExpression postgresBinaryExpression, RelationalTypeMapping typeMapping);
    private SqlExpression ApplyTypeMappingOnNewArray(PostgresNewArrayExpression postgresNewArrayExpression, RelationalTypeMapping typeMapping);
    public virtual SqlExpression GenerateOneBasedIndexExpression(SqlExpression expression);
    [CompilerGeneratedAttribute]
internal static bool <ApplyTypeMappingOnSqlBinary>g__IsComparison|24_0(ExpressionType expressionType);
    [CompilerGeneratedAttribute]
private bool <ApplyTypeMappingOnSqlBinary>g__TryGetRowValueValues|24_1(SqlExpression e, IReadOnlyList`1& values);
    [CompilerGeneratedAttribute]
private ValueTuple`2<SqlExpression, SqlExpression> <ApplyTypeMappingOnPostgresBinary>g__InferContainmentMappings|32_0(SqlExpression container, SqlExpression containee);
    [CompilerGeneratedAttribute]
internal static bool <ApplyTypeMappingOnNewArray>g__IsTextualTypeMapping|33_0(RelationalTypeMapping mapping);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ExtensionAttribute]
internal static class Npgsql.EntityFrameworkCore.PostgreSQL.Scaffolding.Internal.DbDataReaderExtension : object {
    [ExtensionAttribute]
[DebuggerStepThroughAttribute]
internal static T GetValueOrDefault(DbDataReader reader, string name);
    [ExtensionAttribute]
[DebuggerStepThroughAttribute]
internal static T GetValueOrDefault(DbDataRecord record, string name);
    [ExtensionAttribute]
[DebuggerStepThroughAttribute]
internal static T GetFieldValue(DbDataRecord record, string name);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Npgsql.EntityFrameworkCore.PostgreSQL.Scaffolding.Internal.NpgsqlCodeGenerator : ProviderCodeGenerator {
    private static MethodInfo _useNpgsqlMethodInfo;
    public NpgsqlCodeGenerator(ProviderCodeGeneratorDependencies dependencies);
    private static NpgsqlCodeGenerator();
    public virtual MethodCallCodeFragment GenerateUseProvider(string connectionString, MethodCallCodeFragment providerOptions);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Npgsql.EntityFrameworkCore.PostgreSQL.Scaffolding.Internal.NpgsqlDatabaseModelFactory : DatabaseModelFactory {
    private static string NamePartRegex;
    private static Regex SchemaTableNameExtractor;
    private static String[] SerialTypes;
    private IDiagnosticsLogger`1<Scaffolding> _logger;
    public NpgsqlDatabaseModelFactory(IDiagnosticsLogger`1<Scaffolding> logger);
    private static NpgsqlDatabaseModelFactory();
    public virtual DatabaseModel Create(string connectionString, DatabaseModelFactoryOptions options);
    public virtual DatabaseModel Create(DbConnection dbConnection, DatabaseModelFactoryOptions options);
    private static void PopulateGlobalDatabaseInfo(NpgsqlConnection connection, DatabaseModel databaseModel);
    private static IEnumerable`1<DatabaseTable> GetTables(NpgsqlConnection connection, DatabaseModel databaseModel, Func`3<string, string, string> tableFilter, string internalSchemas, HashSet`1<string> enums, IDiagnosticsLogger`1<Scaffolding> logger);
    private static void GetColumns(NpgsqlConnection connection, IReadOnlyList`1<DatabaseTable> tables, string tableFilter, string internalSchemas, HashSet`1<string> enums, IDiagnosticsLogger`1<Scaffolding> logger);
    private static void GetIndexes(NpgsqlConnection connection, IReadOnlyList`1<DatabaseTable> tables, string tableFilter, string internalSchemas, List`1<UInt32> constraintIndexes, IDiagnosticsLogger`1<Scaffolding> logger);
    private static void GetConstraints(NpgsqlConnection connection, IReadOnlyList`1<DatabaseTable> tables, string tableFilter, string internalSchemas, List`1& constraintIndexes, IDiagnosticsLogger`1<Scaffolding> logger);
    [IteratorStateMachineAttribute("Npgsql.EntityFrameworkCore.PostgreSQL.Scaffolding.Internal.NpgsqlDatabaseModelFactory/<GetSequences>d__12")]
private static IEnumerable`1<DatabaseSequence> GetSequences(NpgsqlConnection connection, DatabaseModel databaseModel, Func`2<string, string> schemaFilter, IDiagnosticsLogger`1<Scaffolding> logger);
    private static HashSet`1<string> GetEnums(NpgsqlConnection connection, DatabaseModel databaseModel);
    private static void GetExtensions(NpgsqlConnection connection, DatabaseModel databaseModel);
    private static void GetCollations(NpgsqlConnection connection, DatabaseModel databaseModel, string internalSchemas, IDiagnosticsLogger`1<Scaffolding> logger);
    private static void AdjustDefaults(DatabaseColumn column, string systemTypeName);
    private static SequenceInfo ReadSequenceInfo(DbDataRecord record, Version postgresVersion);
    private static Func`2<string, string> GenerateSchemaFilter(IReadOnlyList`1<string> schemas);
    private static Func`3<string, string, string> GenerateTableFilter(IReadOnlyList`1<ValueTuple`2<string, string>> tables, Func`2<string, string> schemaFilter);
    private static string AdjustFormattedTypeName(string formattedTypeName);
    private static ReferentialAction ConvertToReferentialAction(string onDeleteAction);
    private static string DisplayName(string schema, string name);
    private static ValueTuple`2<string, string> Parse(string table);
    private static string EscapeLiteral(string s);
}
public interface Npgsql.EntityFrameworkCore.PostgreSQL.Storage.Internal.INpgsqlRelationalConnection {
    [NullableContextAttribute("1")]
public abstract virtual INpgsqlRelationalConnection CreateAdminConnection();
    [NullableContextAttribute("1")]
public abstract virtual NpgsqlRelationalConnection CloneWith(string connectionString);
}
public interface Npgsql.EntityFrameworkCore.PostgreSQL.Storage.Internal.Mapping.INpgsqlTypeMapping {
    public NpgsqlDbType NpgsqlDbType { get; }
    public abstract virtual NpgsqlDbType get_NpgsqlDbType();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Npgsql.EntityFrameworkCore.PostgreSQL.Storage.Internal.Mapping.NpgsqlArrayArrayTypeMapping : NpgsqlArrayTypeMapping {
    public NpgsqlArrayArrayTypeMapping(string storeType, RelationalTypeMapping elementMapping);
    public NpgsqlArrayArrayTypeMapping(Type arrayType, RelationalTypeMapping elementMapping);
    private NpgsqlArrayArrayTypeMapping(string storeType, RelationalTypeMapping elementMapping, Type arrayType);
    protected NpgsqlArrayArrayTypeMapping(RelationalTypeMappingParameters parameters, RelationalTypeMapping elementMapping, Nullable`1<bool> isElementNullable);
    private static RelationalTypeMappingParameters CreateParameters(string storeType, RelationalTypeMapping elementMapping, Type arrayType);
    public virtual NpgsqlArrayTypeMapping MakeNonNullable();
    protected virtual RelationalTypeMapping Clone(RelationalTypeMappingParameters parameters, RelationalTypeMapping elementMapping);
    public virtual NpgsqlArrayTypeMapping FlipArrayListClrType(Type newType);
    private static ValueComparer CreateComparer(RelationalTypeMapping elementMapping, Type arrayType);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Npgsql.EntityFrameworkCore.PostgreSQL.Storage.Internal.Mapping.NpgsqlArrayListTypeMapping : NpgsqlArrayTypeMapping {
    public NpgsqlArrayListTypeMapping(string storeType, RelationalTypeMapping elementMapping);
    public NpgsqlArrayListTypeMapping(Type listType, RelationalTypeMapping elementMapping);
    private NpgsqlArrayListTypeMapping(string storeType, RelationalTypeMapping elementMapping, Type listType);
    protected NpgsqlArrayListTypeMapping(RelationalTypeMappingParameters parameters, RelationalTypeMapping elementMapping, Nullable`1<bool> isElementNullable);
    private static RelationalTypeMappingParameters CreateParameters(string storeType, RelationalTypeMapping elementMapping, Type listType);
    public virtual NpgsqlArrayTypeMapping MakeNonNullable();
    protected virtual RelationalTypeMapping Clone(RelationalTypeMappingParameters parameters, RelationalTypeMapping elementMapping);
    public virtual NpgsqlArrayTypeMapping FlipArrayListClrType(Type newType);
    private static ValueComparer CreateComparer(RelationalTypeMapping elementMapping, Type listType);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public abstract class Npgsql.EntityFrameworkCore.PostgreSQL.Storage.Internal.Mapping.NpgsqlArrayTypeMapping : RelationalTypeMapping {
    [CompilerGeneratedAttribute]
private RelationalTypeMapping <ElementMapping>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<NpgsqlDbType> <NpgsqlDbType>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsElementNullable>k__BackingField;
    public RelationalTypeMapping ElementMapping { get; }
    public Nullable`1<NpgsqlDbType> NpgsqlDbType { get; }
    public bool IsElementNullable { get; }
    protected NpgsqlArrayTypeMapping(RelationalTypeMappingParameters parameters, RelationalTypeMapping elementMapping, bool isElementNullable);
    [CompilerGeneratedAttribute]
public virtual RelationalTypeMapping get_ElementMapping();
    [CompilerGeneratedAttribute]
public virtual Nullable`1<NpgsqlDbType> get_NpgsqlDbType();
    [CompilerGeneratedAttribute]
public virtual bool get_IsElementNullable();
    public abstract virtual NpgsqlArrayTypeMapping MakeNonNullable();
    public virtual CoreTypeMapping Clone(ValueConverter converter);
    protected abstract virtual RelationalTypeMapping Clone(RelationalTypeMappingParameters parameters, RelationalTypeMapping elementMapping);
    protected virtual RelationalTypeMapping Clone(RelationalTypeMappingParameters parameters);
    public abstract virtual NpgsqlArrayTypeMapping FlipArrayListClrType(Type newType);
    protected virtual string GenerateNonNullSqlLiteral(object value);
    protected virtual void ConfigureParameter(DbParameter parameter);
    private protected static bool CalculateElementNullability(Type elementType, Nullable`1<bool> isElementNullable);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Npgsql.EntityFrameworkCore.PostgreSQL.Storage.Internal.Mapping.NpgsqlBigIntegerTypeMapping : NpgsqlTypeMapping {
    protected NpgsqlBigIntegerTypeMapping(RelationalTypeMappingParameters parameters);
    protected virtual RelationalTypeMapping Clone(RelationalTypeMappingParameters parameters);
    protected virtual string ProcessStoreType(RelationalTypeMappingParameters parameters, string storeType, string _);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Npgsql.EntityFrameworkCore.PostgreSQL.Storage.Internal.Mapping.NpgsqlBitTypeMapping : NpgsqlTypeMapping {
    private static ConstructorInfo Constructor;
    protected NpgsqlBitTypeMapping(RelationalTypeMappingParameters parameters);
    private static NpgsqlBitTypeMapping();
    protected virtual RelationalTypeMapping Clone(RelationalTypeMappingParameters parameters);
    protected virtual string GenerateNonNullSqlLiteral(object value);
    public virtual Expression GenerateCodeLiteral(object value);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Npgsql.EntityFrameworkCore.PostgreSQL.Storage.Internal.Mapping.NpgsqlBoolTypeMapping : RelationalTypeMapping {
    protected NpgsqlBoolTypeMapping(RelationalTypeMappingParameters parameters);
    protected virtual RelationalTypeMapping Clone(RelationalTypeMappingParameters parameters);
    protected virtual string GenerateNonNullSqlLiteral(object value);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Npgsql.EntityFrameworkCore.PostgreSQL.Storage.Internal.Mapping.NpgsqlBoxTypeMapping : NpgsqlTypeMapping {
    private static ConstructorInfo Constructor;
    protected NpgsqlBoxTypeMapping(RelationalTypeMappingParameters parameters);
    private static NpgsqlBoxTypeMapping();
    protected virtual RelationalTypeMapping Clone(RelationalTypeMappingParameters parameters);
    protected virtual string GenerateNonNullSqlLiteral(object value);
    public virtual Expression GenerateCodeLiteral(object value);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Npgsql.EntityFrameworkCore.PostgreSQL.Storage.Internal.Mapping.NpgsqlByteArrayTypeMapping : RelationalTypeMapping {
    protected NpgsqlByteArrayTypeMapping(RelationalTypeMappingParameters parameters);
    protected virtual RelationalTypeMapping Clone(RelationalTypeMappingParameters parameters);
    protected virtual string GenerateNonNullSqlLiteral(object value);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Npgsql.EntityFrameworkCore.PostgreSQL.Storage.Internal.Mapping.NpgsqlCharacterCharTypeMapping : CharTypeMapping {
    public NpgsqlDbType NpgsqlDbType { get; }
    public NpgsqlCharacterCharTypeMapping(string storeType);
    protected NpgsqlCharacterCharTypeMapping(RelationalTypeMappingParameters parameters);
    public virtual NpgsqlDbType get_NpgsqlDbType();
    protected virtual RelationalTypeMapping Clone(RelationalTypeMappingParameters parameters);
    protected virtual void ConfigureParameter(DbParameter parameter);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Npgsql.EntityFrameworkCore.PostgreSQL.Storage.Internal.Mapping.NpgsqlCharacterStringTypeMapping : NpgsqlStringTypeMapping {
    private static ValueComparer`1<string> CharacterValueComparer;
    public ValueComparer Comparer { get; }
    public ValueComparer KeyComparer { get; }
    public NpgsqlCharacterStringTypeMapping(string storeType, int size);
    protected NpgsqlCharacterStringTypeMapping(RelationalTypeMappingParameters parameters);
    private static NpgsqlCharacterStringTypeMapping();
    public virtual ValueComparer get_Comparer();
    public virtual ValueComparer get_KeyComparer();
    protected virtual RelationalTypeMapping Clone(RelationalTypeMappingParameters parameters);
    protected virtual void ConfigureParameter(DbParameter parameter);
    [NullableContextAttribute("2")]
private static bool EqualsWithoutTrailingWhitespace(string a, string b);
    private static int GetHashCodeWithoutTrailingWhitespace(string a);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Npgsql.EntityFrameworkCore.PostgreSQL.Storage.Internal.Mapping.NpgsqlCidrTypeMapping : NpgsqlTypeMapping {
    private static MethodInfo ParseMethod;
    private static ConstructorInfo Constructor;
    protected NpgsqlCidrTypeMapping(RelationalTypeMappingParameters parameters);
    private static NpgsqlCidrTypeMapping();
    protected virtual RelationalTypeMapping Clone(RelationalTypeMappingParameters parameters);
    protected virtual string GenerateNonNullSqlLiteral(object value);
    public virtual Expression GenerateCodeLiteral(object value);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Npgsql.EntityFrameworkCore.PostgreSQL.Storage.Internal.Mapping.NpgsqlCircleTypeMapping : NpgsqlTypeMapping {
    private static ConstructorInfo Constructor;
    protected NpgsqlCircleTypeMapping(RelationalTypeMappingParameters parameters);
    private static NpgsqlCircleTypeMapping();
    protected virtual RelationalTypeMapping Clone(RelationalTypeMappingParameters parameters);
    protected virtual string GenerateNonNullSqlLiteral(object value);
    public virtual Expression GenerateCodeLiteral(object value);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Npgsql.EntityFrameworkCore.PostgreSQL.Storage.Internal.Mapping.NpgsqlDateTypeMapping : NpgsqlTypeMapping {
    public NpgsqlDateTypeMapping(Type clrType);
    protected NpgsqlDateTypeMapping(RelationalTypeMappingParameters parameters);
    protected virtual RelationalTypeMapping Clone(RelationalTypeMappingParameters parameters);
    protected virtual string GenerateNonNullSqlLiteral(object value);
    protected virtual string GenerateEmbeddedNonNullSqlLiteral(object value);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Npgsql.EntityFrameworkCore.PostgreSQL.Storage.Internal.Mapping.NpgsqlDecimalTypeMapping : NpgsqlTypeMapping {
    private static string DecimalFormatConst;
    protected string SqlLiteralFormatString { get; }
    [NullableContextAttribute("2")]
public NpgsqlDecimalTypeMapping(Type clrType);
    protected NpgsqlDecimalTypeMapping(RelationalTypeMappingParameters parameters);
    protected virtual RelationalTypeMapping Clone(RelationalTypeMappingParameters parameters);
    protected virtual string ProcessStoreType(RelationalTypeMappingParameters parameters, string storeType, string _);
    protected virtual string get_SqlLiteralFormatString();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Npgsql.EntityFrameworkCore.PostgreSQL.Storage.Internal.Mapping.NpgsqlDoubleTypeMapping : DoubleTypeMapping {
    protected NpgsqlDoubleTypeMapping(RelationalTypeMappingParameters parameters);
    protected virtual RelationalTypeMapping Clone(RelationalTypeMappingParameters parameters);
    protected virtual string GenerateNonNullSqlLiteral(object value);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Npgsql.EntityFrameworkCore.PostgreSQL.Storage.Internal.Mapping.NpgsqlEnumTypeMapping : RelationalTypeMapping {
    private ISqlGenerationHelper _sqlGenerationHelper;
    private INpgsqlNameTranslator _nameTranslator;
    private Dictionary`2<object, string> _members;
    public NpgsqlEnumTypeMapping(string storeType, string storeTypeSchema, Type enumType, ISqlGenerationHelper sqlGenerationHelper, INpgsqlNameTranslator nameTranslator);
    protected NpgsqlEnumTypeMapping(RelationalTypeMappingParameters parameters, ISqlGenerationHelper sqlGenerationHelper, INpgsqlNameTranslator nameTranslator);
    protected virtual RelationalTypeMapping Clone(RelationalTypeMappingParameters parameters);
    protected virtual string GenerateNonNullSqlLiteral(object value);
    private static Dictionary`2<object, string> CreateValueMapping(Type enumType, INpgsqlNameTranslator nameTranslator);
}
public class Npgsql.EntityFrameworkCore.PostgreSQL.Storage.Internal.Mapping.NpgsqlEStringTypeMapping : StringTypeMapping {
    [NullableContextAttribute("1")]
protected virtual string GenerateNonNullSqlLiteral(object value);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Npgsql.EntityFrameworkCore.PostgreSQL.Storage.Internal.Mapping.NpgsqlFloatTypeMapping : FloatTypeMapping {
    protected NpgsqlFloatTypeMapping(RelationalTypeMappingParameters parameters);
    protected virtual RelationalTypeMapping Clone(RelationalTypeMappingParameters parameters);
    protected virtual string GenerateNonNullSqlLiteral(object value);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Npgsql.EntityFrameworkCore.PostgreSQL.Storage.Internal.Mapping.NpgsqlHstoreTypeMapping : NpgsqlTypeMapping {
    private static HstoreMutableComparer MutableComparerInstance;
    public NpgsqlHstoreTypeMapping(Type clrType);
    protected NpgsqlHstoreTypeMapping(RelationalTypeMappingParameters parameters);
    private static NpgsqlHstoreTypeMapping();
    protected virtual RelationalTypeMapping Clone(RelationalTypeMappingParameters parameters);
    protected virtual string GenerateNonNullSqlLiteral(object value);
    private static ValueComparer GetComparer(Type clrType);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Npgsql.EntityFrameworkCore.PostgreSQL.Storage.Internal.Mapping.NpgsqlInetTypeMapping : NpgsqlTypeMapping {
    private static MethodInfo ParseMethod;
    protected NpgsqlInetTypeMapping(RelationalTypeMappingParameters parameters);
    private static NpgsqlInetTypeMapping();
    protected virtual RelationalTypeMapping Clone(RelationalTypeMappingParameters parameters);
    protected virtual string GenerateNonNullSqlLiteral(object value);
    public virtual Expression GenerateCodeLiteral(object value);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Npgsql.EntityFrameworkCore.PostgreSQL.Storage.Internal.Mapping.NpgsqlIntervalTypeMapping : NpgsqlTypeMapping {
    protected NpgsqlIntervalTypeMapping(RelationalTypeMappingParameters parameters);
    protected virtual RelationalTypeMapping Clone(RelationalTypeMappingParameters parameters);
    protected virtual string ProcessStoreType(RelationalTypeMappingParameters parameters, string storeType, string _);
    protected virtual string GenerateNonNullSqlLiteral(object value);
    protected virtual string GenerateEmbeddedNonNullSqlLiteral(object value);
    public static string FormatTimeSpanAsInterval(TimeSpan ts);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Npgsql.EntityFrameworkCore.PostgreSQL.Storage.Internal.Mapping.NpgsqlJsonTypeMapping : NpgsqlTypeMapping {
    private static Expression DefaultJsonDocumentOptions;
    private static MethodInfo ParseMethod;
    public bool IsJsonb { get; }
    public NpgsqlJsonTypeMapping(string storeType, Type clrType);
    protected NpgsqlJsonTypeMapping(RelationalTypeMappingParameters parameters, NpgsqlDbType npgsqlDbType);
    private static NpgsqlJsonTypeMapping();
    public virtual bool get_IsJsonb();
    protected virtual RelationalTypeMapping Clone(RelationalTypeMappingParameters parameters);
    protected virtual string EscapeSqlLiteral(string literal);
    protected virtual string GenerateNonNullSqlLiteral(object value);
    public virtual Expression GenerateCodeLiteral(object value);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Npgsql.EntityFrameworkCore.PostgreSQL.Storage.Internal.Mapping.NpgsqlLineSegmentTypeMapping : NpgsqlTypeMapping {
    private static ConstructorInfo Constructor;
    protected NpgsqlLineSegmentTypeMapping(RelationalTypeMappingParameters parameters);
    private static NpgsqlLineSegmentTypeMapping();
    protected virtual RelationalTypeMapping Clone(RelationalTypeMappingParameters parameters);
    protected virtual string GenerateNonNullSqlLiteral(object value);
    public virtual Expression GenerateCodeLiteral(object value);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Npgsql.EntityFrameworkCore.PostgreSQL.Storage.Internal.Mapping.NpgsqlLineTypeMapping : NpgsqlTypeMapping {
    private static ConstructorInfo Constructor;
    protected NpgsqlLineTypeMapping(RelationalTypeMappingParameters parameters);
    private static NpgsqlLineTypeMapping();
    protected virtual RelationalTypeMapping Clone(RelationalTypeMappingParameters parameters);
    protected virtual string GenerateNonNullSqlLiteral(object value);
    public virtual Expression GenerateCodeLiteral(object value);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Npgsql.EntityFrameworkCore.PostgreSQL.Storage.Internal.Mapping.NpgsqlLTreeTypeMapping : NpgsqlStringTypeMapping {
    private static ConstructorInfo Constructor;
    protected NpgsqlLTreeTypeMapping(RelationalTypeMappingParameters parameters);
    private static NpgsqlLTreeTypeMapping();
    protected virtual RelationalTypeMapping Clone(RelationalTypeMappingParameters parameters);
    public virtual Expression GenerateCodeLiteral(object value);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Npgsql.EntityFrameworkCore.PostgreSQL.Storage.Internal.Mapping.NpgsqlMacaddr8TypeMapping : NpgsqlTypeMapping {
    private static MethodInfo ParseMethod;
    protected NpgsqlMacaddr8TypeMapping(RelationalTypeMappingParameters parameters);
    private static NpgsqlMacaddr8TypeMapping();
    protected virtual RelationalTypeMapping Clone(RelationalTypeMappingParameters parameters);
    protected virtual string GenerateNonNullSqlLiteral(object value);
    public virtual Expression GenerateCodeLiteral(object value);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Npgsql.EntityFrameworkCore.PostgreSQL.Storage.Internal.Mapping.NpgsqlMacaddrTypeMapping : NpgsqlTypeMapping {
    private static MethodInfo ParseMethod;
    protected NpgsqlMacaddrTypeMapping(RelationalTypeMappingParameters parameters);
    private static NpgsqlMacaddrTypeMapping();
    protected virtual RelationalTypeMapping Clone(RelationalTypeMappingParameters parameters);
    protected virtual string GenerateNonNullSqlLiteral(object value);
    public virtual Expression GenerateCodeLiteral(object value);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Npgsql.EntityFrameworkCore.PostgreSQL.Storage.Internal.Mapping.NpgsqlMoneyTypeMapping : DecimalTypeMapping {
    protected NpgsqlMoneyTypeMapping(RelationalTypeMappingParameters parameters);
    protected virtual RelationalTypeMapping Clone(RelationalTypeMappingParameters parameters);
    protected virtual string GenerateNonNullSqlLiteral(object value);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Npgsql.EntityFrameworkCore.PostgreSQL.Storage.Internal.Mapping.NpgsqlMultirangeTypeMapping : NpgsqlTypeMapping {
    private ISqlGenerationHelper _sqlGenerationHelper;
    [CompilerGeneratedAttribute]
private NpgsqlRangeTypeMapping <RangeMapping>k__BackingField;
    [CompilerGeneratedAttribute]
private RelationalTypeMapping <SubtypeMapping>k__BackingField;
    public NpgsqlRangeTypeMapping RangeMapping { get; }
    public RelationalTypeMapping SubtypeMapping { get; }
    public NpgsqlMultirangeTypeMapping(string storeType, Type clrType, NpgsqlRangeTypeMapping rangeMapping, ISqlGenerationHelper sqlGenerationHelper);
    public NpgsqlMultirangeTypeMapping(string storeType, string storeTypeSchema, Type clrType, NpgsqlRangeTypeMapping rangeMapping, ISqlGenerationHelper sqlGenerationHelper);
    protected NpgsqlMultirangeTypeMapping(RelationalTypeMappingParameters parameters, NpgsqlDbType npgsqlDbType, NpgsqlRangeTypeMapping rangeMapping, ISqlGenerationHelper sqlGenerationHelper);
    [CompilerGeneratedAttribute]
public virtual NpgsqlRangeTypeMapping get_RangeMapping();
    [CompilerGeneratedAttribute]
public virtual RelationalTypeMapping get_SubtypeMapping();
    protected virtual RelationalTypeMapping Clone(RelationalTypeMappingParameters parameters);
    protected virtual string GenerateNonNullSqlLiteral(object value);
    public static string GenerateNonNullSqlLiteral(object value, RelationalTypeMapping rangeMapping, string multirangeStoreType);
    private static NpgsqlDbType GenerateNpgsqlDbType(RelationalTypeMapping subtypeMapping);
    public virtual Expression GenerateCodeLiteral(object value);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Npgsql.EntityFrameworkCore.PostgreSQL.Storage.Internal.Mapping.NpgsqlPathTypeMapping : NpgsqlTypeMapping {
    private static ConstructorInfo Constructor;
    private static ConstructorInfo PointConstructor;
    protected NpgsqlPathTypeMapping(RelationalTypeMappingParameters parameters);
    private static NpgsqlPathTypeMapping();
    protected virtual RelationalTypeMapping Clone(RelationalTypeMappingParameters parameters);
    protected virtual string GenerateNonNullSqlLiteral(object value);
    public virtual Expression GenerateCodeLiteral(object value);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Npgsql.EntityFrameworkCore.PostgreSQL.Storage.Internal.Mapping.NpgsqlPgLsnTypeMapping : NpgsqlTypeMapping {
    private static ConstructorInfo Constructor;
    protected NpgsqlPgLsnTypeMapping(RelationalTypeMappingParameters parameters);
    private static NpgsqlPgLsnTypeMapping();
    protected virtual RelationalTypeMapping Clone(RelationalTypeMappingParameters parameters);
    protected virtual string GenerateNonNullSqlLiteral(object value);
    public virtual Expression GenerateCodeLiteral(object value);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Npgsql.EntityFrameworkCore.PostgreSQL.Storage.Internal.Mapping.NpgsqlPointTypeMapping : NpgsqlTypeMapping {
    private static ConstructorInfo Constructor;
    protected NpgsqlPointTypeMapping(RelationalTypeMappingParameters parameters);
    private static NpgsqlPointTypeMapping();
    protected virtual RelationalTypeMapping Clone(RelationalTypeMappingParameters parameters);
    protected virtual string GenerateNonNullSqlLiteral(object value);
    public virtual Expression GenerateCodeLiteral(object value);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Npgsql.EntityFrameworkCore.PostgreSQL.Storage.Internal.Mapping.NpgsqlPolygonTypeMapping : NpgsqlTypeMapping {
    private static ConstructorInfo Constructor;
    private static ConstructorInfo PointConstructor;
    protected NpgsqlPolygonTypeMapping(RelationalTypeMappingParameters parameters);
    private static NpgsqlPolygonTypeMapping();
    protected virtual RelationalTypeMapping Clone(RelationalTypeMappingParameters parameters);
    protected virtual string GenerateNonNullSqlLiteral(object value);
    public virtual Expression GenerateCodeLiteral(object value);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Npgsql.EntityFrameworkCore.PostgreSQL.Storage.Internal.Mapping.NpgsqlRangeTypeMapping : NpgsqlTypeMapping {
    private ISqlGenerationHelper _sqlGenerationHelper;
    [NullableAttribute("2")]
private PropertyInfo _isEmptyProperty;
    [NullableAttribute("2")]
private PropertyInfo _lowerProperty;
    [NullableAttribute("2")]
private PropertyInfo _upperProperty;
    [NullableAttribute("2")]
private PropertyInfo _lowerInclusiveProperty;
    [NullableAttribute("2")]
private PropertyInfo _upperInclusiveProperty;
    [NullableAttribute("2")]
private PropertyInfo _lowerInfiniteProperty;
    [NullableAttribute("2")]
private PropertyInfo _upperInfiniteProperty;
    [NullableAttribute("2")]
private ConstructorInfo _rangeConstructor1;
    [NullableAttribute("2")]
private ConstructorInfo _rangeConstructor2;
    [NullableAttribute("2")]
private ConstructorInfo _rangeConstructor3;
    [CompilerGeneratedAttribute]
private RelationalTypeMapping <SubtypeMapping>k__BackingField;
    public RelationalTypeMapping SubtypeMapping { get; }
    public NpgsqlRangeTypeMapping(string storeType, Type clrType, RelationalTypeMapping subtypeMapping, ISqlGenerationHelper sqlGenerationHelper);
    public NpgsqlRangeTypeMapping(string storeType, string storeTypeSchema, Type clrType, RelationalTypeMapping subtypeMapping, ISqlGenerationHelper sqlGenerationHelper);
    protected NpgsqlRangeTypeMapping(RelationalTypeMappingParameters parameters, NpgsqlDbType npgsqlDbType, RelationalTypeMapping subtypeMapping, ISqlGenerationHelper sqlGenerationHelper);
    [CompilerGeneratedAttribute]
public virtual RelationalTypeMapping get_SubtypeMapping();
    protected virtual RelationalTypeMapping Clone(RelationalTypeMappingParameters parameters);
    protected virtual string GenerateNonNullSqlLiteral(object value);
    protected virtual string GenerateEmbeddedNonNullSqlLiteral(object value);
    private static NpgsqlDbType GenerateNpgsqlDbType(RelationalTypeMapping subtypeMapping);
    public virtual Expression GenerateCodeLiteral(object value);
    [MemberNotNullAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private void InitializeAccessors(Type rangeClrType, Type subtypeClrType);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Npgsql.EntityFrameworkCore.PostgreSQL.Storage.Internal.Mapping.NpgsqlRegconfigTypeMapping : NpgsqlTypeMapping {
    protected NpgsqlRegconfigTypeMapping(RelationalTypeMappingParameters parameters);
    protected virtual RelationalTypeMapping Clone(RelationalTypeMappingParameters parameters);
    protected virtual string GenerateNonNullSqlLiteral(object value);
    private string EscapeSqlLiteral(string literal);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Npgsql.EntityFrameworkCore.PostgreSQL.Storage.Internal.Mapping.NpgsqlRegdictionaryTypeMapping : NpgsqlTypeMapping {
    protected NpgsqlRegdictionaryTypeMapping(RelationalTypeMappingParameters parameters);
    protected virtual RelationalTypeMapping Clone(RelationalTypeMappingParameters parameters);
    protected virtual string GenerateNonNullSqlLiteral(object value);
    private string EscapeSqlLiteral(string literal);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Npgsql.EntityFrameworkCore.PostgreSQL.Storage.Internal.Mapping.NpgsqlRowValueTypeMapping : RelationalTypeMapping {
    public NpgsqlRowValueTypeMapping(Type clrType);
    protected NpgsqlRowValueTypeMapping(RelationalTypeMappingParameters parameters);
    protected virtual RelationalTypeMapping Clone(RelationalTypeMappingParameters parameters);
    protected virtual string GenerateNonNullSqlLiteral(object value);
    protected virtual void ConfigureParameter(DbParameter parameter);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Npgsql.EntityFrameworkCore.PostgreSQL.Storage.Internal.Mapping.NpgsqlStringTypeMapping : StringTypeMapping {
    [CompilerGeneratedAttribute]
private NpgsqlDbType <NpgsqlDbType>k__BackingField;
    public NpgsqlDbType NpgsqlDbType { get; }
    public NpgsqlStringTypeMapping(string storeType, NpgsqlDbType npgsqlDbType);
    protected NpgsqlStringTypeMapping(RelationalTypeMappingParameters parameters, NpgsqlDbType npgsqlDbType);
    [CompilerGeneratedAttribute]
public virtual NpgsqlDbType get_NpgsqlDbType();
    protected virtual RelationalTypeMapping Clone(RelationalTypeMappingParameters parameters);
    protected virtual void ConfigureParameter(DbParameter parameter);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Npgsql.EntityFrameworkCore.PostgreSQL.Storage.Internal.Mapping.NpgsqlTidTypeMapping : NpgsqlTypeMapping {
    private static ConstructorInfo Constructor;
    protected NpgsqlTidTypeMapping(RelationalTypeMappingParameters parameters);
    private static NpgsqlTidTypeMapping();
    protected virtual RelationalTypeMapping Clone(RelationalTypeMappingParameters parameters);
    protected virtual string GenerateNonNullSqlLiteral(object value);
    public virtual Expression GenerateCodeLiteral(object value);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Npgsql.EntityFrameworkCore.PostgreSQL.Storage.Internal.Mapping.NpgsqlTimestampTypeMapping : NpgsqlTypeMapping {
    protected NpgsqlTimestampTypeMapping(RelationalTypeMappingParameters parameters);
    protected virtual RelationalTypeMapping Clone(RelationalTypeMappingParameters parameters);
    protected virtual string ProcessStoreType(RelationalTypeMappingParameters parameters, string storeType, string _);
    protected virtual string GenerateNonNullSqlLiteral(object value);
    protected virtual string GenerateEmbeddedNonNullSqlLiteral(object value);
    private string GenerateLiteralCore(object value);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Npgsql.EntityFrameworkCore.PostgreSQL.Storage.Internal.Mapping.NpgsqlTimestampTzTypeMapping : NpgsqlTypeMapping {
    public NpgsqlTimestampTzTypeMapping(Type clrType);
    protected NpgsqlTimestampTzTypeMapping(RelationalTypeMappingParameters parameters);
    protected virtual RelationalTypeMapping Clone(RelationalTypeMappingParameters parameters);
    protected virtual string ProcessStoreType(RelationalTypeMappingParameters parameters, string storeType, string _);
    protected virtual string GenerateNonNullSqlLiteral(object value);
    protected virtual string GenerateEmbeddedNonNullSqlLiteral(object value);
    private string GenerateLiteralCore(object value);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Npgsql.EntityFrameworkCore.PostgreSQL.Storage.Internal.Mapping.NpgsqlTimeTypeMapping : NpgsqlTypeMapping {
    public NpgsqlTimeTypeMapping(Type clrType);
    protected NpgsqlTimeTypeMapping(RelationalTypeMappingParameters parameters);
    protected virtual RelationalTypeMapping Clone(RelationalTypeMappingParameters parameters);
    protected virtual string ProcessStoreType(RelationalTypeMappingParameters parameters, string storeType, string _);
    protected virtual string GenerateNonNullSqlLiteral(object value);
    protected virtual string GenerateEmbeddedNonNullSqlLiteral(object value);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Npgsql.EntityFrameworkCore.PostgreSQL.Storage.Internal.Mapping.NpgsqlTimeTzTypeMapping : NpgsqlTypeMapping {
    protected NpgsqlTimeTzTypeMapping(RelationalTypeMappingParameters parameters);
    protected virtual RelationalTypeMapping Clone(RelationalTypeMappingParameters parameters);
    protected virtual string ProcessStoreType(RelationalTypeMappingParameters parameters, string storeType, string _);
    protected virtual string GenerateNonNullSqlLiteral(object value);
    protected virtual string GenerateEmbeddedNonNullSqlLiteral(object value);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Npgsql.EntityFrameworkCore.PostgreSQL.Storage.Internal.Mapping.NpgsqlTsQueryTypeMapping : NpgsqlTypeMapping {
    protected NpgsqlTsQueryTypeMapping(RelationalTypeMappingParameters parameters);
    protected virtual RelationalTypeMapping Clone(RelationalTypeMappingParameters parameters);
    protected virtual string GenerateNonNullSqlLiteral(object value);
}
public class Npgsql.EntityFrameworkCore.PostgreSQL.Storage.Internal.Mapping.NpgsqlTsRankingNormalizationTypeMapping : IntTypeMapping {
    protected NpgsqlTsRankingNormalizationTypeMapping(RelationalTypeMappingParameters parameters);
    [NullableContextAttribute("1")]
protected virtual RelationalTypeMapping Clone(RelationalTypeMappingParameters parameters);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Npgsql.EntityFrameworkCore.PostgreSQL.Storage.Internal.Mapping.NpgsqlTsVectorTypeMapping : NpgsqlTypeMapping {
    protected NpgsqlTsVectorTypeMapping(RelationalTypeMappingParameters parameters);
    protected virtual RelationalTypeMapping Clone(RelationalTypeMappingParameters parameters);
    protected virtual string GenerateNonNullSqlLiteral(object value);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public abstract class Npgsql.EntityFrameworkCore.PostgreSQL.Storage.Internal.Mapping.NpgsqlTypeMapping : RelationalTypeMapping {
    [CompilerGeneratedAttribute]
private NpgsqlDbType <NpgsqlDbType>k__BackingField;
    public NpgsqlDbType NpgsqlDbType { get; }
    public NpgsqlTypeMapping(string storeType, Type clrType, NpgsqlDbType npgsqlDbType);
    protected NpgsqlTypeMapping(RelationalTypeMappingParameters parameters, NpgsqlDbType npgsqlDbType);
    [CompilerGeneratedAttribute]
public virtual NpgsqlDbType get_NpgsqlDbType();
    protected virtual void ConfigureParameter(DbParameter parameter);
    public virtual string GenerateEmbeddedSqlLiteral(object value);
    public virtual string GenerateEmbeddedProviderValueSqlLiteral(object value);
    protected virtual string GenerateEmbeddedNonNullSqlLiteral(object value);
    [NullableContextAttribute("2")]
private object ConvertUnderlyingEnumValueToEnum(object value);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Npgsql.EntityFrameworkCore.PostgreSQL.Storage.Internal.Mapping.NpgsqlUintTypeMapping : NpgsqlTypeMapping {
    public NpgsqlUintTypeMapping(string storeType, NpgsqlDbType npgsqlDbType);
    protected NpgsqlUintTypeMapping(RelationalTypeMappingParameters parameters, NpgsqlDbType npgsqlDbType);
    protected virtual RelationalTypeMapping Clone(RelationalTypeMappingParameters parameters);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Npgsql.EntityFrameworkCore.PostgreSQL.Storage.Internal.Mapping.NpgsqlVarbitTypeMapping : NpgsqlTypeMapping {
    private static ConstructorInfo Constructor;
    protected NpgsqlVarbitTypeMapping(RelationalTypeMappingParameters parameters);
    private static NpgsqlVarbitTypeMapping();
    protected virtual RelationalTypeMapping Clone(RelationalTypeMappingParameters parameters);
    protected virtual string GenerateNonNullSqlLiteral(object value);
    public virtual Expression GenerateCodeLiteral(object value);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Npgsql.EntityFrameworkCore.PostgreSQL.Storage.Internal.NpgsqlDatabaseCreator : RelationalDatabaseCreator {
    private INpgsqlRelationalConnection _connection;
    private IRawSqlCommandBuilder _rawSqlCommandBuilder;
    [CompilerGeneratedAttribute]
private TimeSpan <RetryDelay>k__BackingField;
    [CompilerGeneratedAttribute]
private TimeSpan <RetryTimeout>k__BackingField;
    public TimeSpan RetryDelay { get; public set; }
    public TimeSpan RetryTimeout { get; public set; }
    public NpgsqlDatabaseCreator(RelationalDatabaseCreatorDependencies dependencies, INpgsqlRelationalConnection connection, IRawSqlCommandBuilder rawSqlCommandBuilder);
    [CompilerGeneratedAttribute]
public virtual TimeSpan get_RetryDelay();
    [CompilerGeneratedAttribute]
public virtual void set_RetryDelay(TimeSpan value);
    [CompilerGeneratedAttribute]
public virtual TimeSpan get_RetryTimeout();
    [CompilerGeneratedAttribute]
public virtual void set_RetryTimeout(TimeSpan value);
    public virtual void Create();
    [AsyncStateMachineAttribute("Npgsql.EntityFrameworkCore.PostgreSQL.Storage.Internal.NpgsqlDatabaseCreator/<CreateAsync>d__12")]
public virtual Task CreateAsync(CancellationToken cancellationToken);
    public virtual bool HasTables();
    public virtual Task`1<bool> HasTablesAsync(CancellationToken cancellationToken);
    private IRelationalCommand CreateHasTablesCommand();
    private IReadOnlyList`1<MigrationCommand> CreateCreateOperations();
    public virtual bool Exists();
    public virtual Task`1<bool> ExistsAsync(CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Npgsql.EntityFrameworkCore.PostgreSQL.Storage.Internal.NpgsqlDatabaseCreator/<Exists>d__19")]
private Task`1<bool> Exists(bool async, CancellationToken cancellationToken);
    private static bool IsDoesNotExist(PostgresException exception);
    public virtual void Delete();
    [AsyncStateMachineAttribute("Npgsql.EntityFrameworkCore.PostgreSQL.Storage.Internal.NpgsqlDatabaseCreator/<DeleteAsync>d__22")]
public virtual Task DeleteAsync(CancellationToken cancellationToken);
    public virtual void CreateTables();
    [AsyncStateMachineAttribute("Npgsql.EntityFrameworkCore.PostgreSQL.Storage.Internal.NpgsqlDatabaseCreator/<CreateTablesAsync>d__24")]
public virtual Task CreateTablesAsync(CancellationToken cancellationToken);
    private IReadOnlyList`1<MigrationCommand> CreateDropCommands();
    private static void ClearAllPools();
    private void ClearPool();
    [NullableContextAttribute("0")]
[CompilerGeneratedAttribute]
private bool <HasTables>b__13_0(INpgsqlRelationalConnection connection);
    [NullableContextAttribute("0")]
[AsyncStateMachineAttribute("Npgsql.EntityFrameworkCore.PostgreSQL.Storage.Internal.NpgsqlDatabaseCreator/<<HasTablesAsync>b__14_0>d")]
[CompilerGeneratedAttribute]
private Task`1<bool> <HasTablesAsync>b__14_0(INpgsqlRelationalConnection connection, CancellationToken ct);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Npgsql.EntityFrameworkCore.PostgreSQL.Storage.Internal.NpgsqlExecutionStrategy : object {
    [CompilerGeneratedAttribute]
private ExecutionStrategyDependencies <Dependencies>k__BackingField;
    private ExecutionStrategyDependencies Dependencies { get; }
    public bool RetriesOnFailure { get; }
    public NpgsqlExecutionStrategy(ExecutionStrategyDependencies dependencies);
    [CompilerGeneratedAttribute]
private ExecutionStrategyDependencies get_Dependencies();
    public virtual bool get_RetriesOnFailure();
    public virtual TResult Execute(TState state, Func`3<DbContext, TState, TResult> operation, Func`3<DbContext, TState, ExecutionResult`1<TResult>> verifySucceeded);
    [AsyncStateMachineAttribute("Npgsql.EntityFrameworkCore.PostgreSQL.Storage.Internal.NpgsqlExecutionStrategy/<ExecuteAsync>d__7`2")]
public virtual Task`1<TResult> ExecuteAsync(TState state, Func`4<DbContext, TState, CancellationToken, Task`1<TResult>> operation, Func`4<DbContext, TState, CancellationToken, Task`1<ExecutionResult`1<TResult>>> verifySucceeded, CancellationToken cancellationToken);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Npgsql.EntityFrameworkCore.PostgreSQL.Storage.Internal.NpgsqlExecutionStrategyFactory : RelationalExecutionStrategyFactory {
    public NpgsqlExecutionStrategyFactory(ExecutionStrategyDependencies dependencies);
    protected virtual IExecutionStrategy CreateDefaultStrategy(ExecutionStrategyDependencies dependencies);
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
public class Npgsql.EntityFrameworkCore.PostgreSQL.Storage.Internal.NpgsqlRelationalConnection : RelationalConnection {
    private ProvideClientCertificatesCallback _provideClientCertificatesCallback;
    private RemoteCertificateValidationCallback _remoteCertificateValidationCallback;
    private ProvidePasswordCallback _providePasswordCallback;
    private DbDataSource _dataSource;
    protected bool SupportsAmbientTransactions { get; }
    public string ConnectionString { get; public set; }
    [NullableAttribute("1")]
public NpgsqlConnection DbConnection { get; public set; }
    public DbDataSource DbDataSource { get; public set; }
    public Transaction CurrentAmbientTransaction { get; }
    [NullableContextAttribute("1")]
public NpgsqlRelationalConnection(RelationalConnectionDependencies dependencies, INpgsqlSingletonOptions options);
    [NullableContextAttribute("1")]
protected NpgsqlRelationalConnection(RelationalConnectionDependencies dependencies, DbDataSource dataSource);
    protected virtual bool get_SupportsAmbientTransactions();
    [NullableContextAttribute("1")]
protected virtual DbConnection CreateDbConnection();
    public virtual string get_ConnectionString();
    public virtual void set_ConnectionString(string value);
    [NullableContextAttribute("1")]
public virtual NpgsqlConnection get_DbConnection();
    [NullableContextAttribute("1")]
public virtual void set_DbConnection(NpgsqlConnection value);
    public virtual DbDataSource get_DbDataSource();
    public virtual void set_DbDataSource(DbDataSource value);
    [NullableContextAttribute("1")]
public virtual INpgsqlRelationalConnection CreateAdminConnection();
    public virtual Transaction get_CurrentAmbientTransaction();
    [NullableContextAttribute("1")]
public virtual NpgsqlRelationalConnection CloneWith(string connectionString);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Npgsql.EntityFrameworkCore.PostgreSQL.Storage.Internal.NpgsqlSqlGenerationHelper : RelationalSqlGenerationHelper {
    private static HashSet`1<string> ReservedWords;
    private static NpgsqlSqlGenerationHelper();
    public NpgsqlSqlGenerationHelper(RelationalSqlGenerationHelperDependencies dependencies);
    public virtual string DelimitIdentifier(string identifier);
    public virtual void DelimitIdentifier(StringBuilder builder, string identifier);
    private static bool RequiresQuoting(string identifier);
}
public class Npgsql.EntityFrameworkCore.PostgreSQL.Storage.Internal.NpgsqlTransientExceptionDetector : object {
    [NullableContextAttribute("2")]
public static bool ShouldRetryOn(Exception ex);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Npgsql.EntityFrameworkCore.PostgreSQL.Storage.Internal.NpgsqlTypeMappingSource : RelationalTypeMappingSource {
    internal static bool LegacyTimestampBehavior;
    internal static bool DisableDateTimeInfinityConversions;
    private ISqlGenerationHelper _sqlGenerationHelper;
    private NullabilityInfoContext _nullabilityInfoContext;
    [CompilerGeneratedAttribute]
private ConcurrentDictionary`2<string, RelationalTypeMapping[]> <StoreTypeMappings>k__BackingField;
    [CompilerGeneratedAttribute]
private ConcurrentDictionary`2<Type, RelationalTypeMapping> <ClrTypeMappings>k__BackingField;
    private IReadOnlyList`1<UserRangeDefinition> _userRangeDefinitions;
    private Dictionary`2<Type, List`1<NpgsqlRangeTypeMapping>> _rangeTypeMappings;
    private Dictionary`2<Type, List`1<NpgsqlMultirangeTypeMapping>> _multirangeTypeMappings;
    private bool _supportsMultiranges;
    private NpgsqlFloatTypeMapping _float4;
    private NpgsqlDoubleTypeMapping _float8;
    private NpgsqlDecimalTypeMapping _numeric;
    private NpgsqlBigIntegerTypeMapping _bigInteger;
    private NpgsqlDecimalTypeMapping _numericAsFloat;
    private NpgsqlDecimalTypeMapping _numericAsDouble;
    private NpgsqlMoneyTypeMapping _money;
    private GuidTypeMapping _uuid;
    private ShortTypeMapping _int2;
    private ByteTypeMapping _int2Byte;
    private IntTypeMapping _int4;
    private LongTypeMapping _int8;
    private StringTypeMapping _text;
    private NpgsqlStringTypeMapping _varchar;
    private NpgsqlCharacterStringTypeMapping _char;
    private NpgsqlCharacterCharTypeMapping _singleChar;
    private NpgsqlStringTypeMapping _xml;
    private NpgsqlStringTypeMapping _citext;
    private NpgsqlJsonTypeMapping _jsonbString;
    private NpgsqlJsonTypeMapping _jsonString;
    private NpgsqlJsonTypeMapping _jsonbDocument;
    private NpgsqlJsonTypeMapping _jsonDocument;
    private NpgsqlJsonTypeMapping _jsonbElement;
    private NpgsqlJsonTypeMapping _jsonElement;
    private NpgsqlDateTypeMapping _dateDateTime;
    private NpgsqlTimestampTypeMapping _timestamp;
    private NpgsqlTimestampTzTypeMapping _timestamptz;
    private NpgsqlTimestampTzTypeMapping _timestamptzDto;
    private NpgsqlIntervalTypeMapping _interval;
    private NpgsqlTimeTypeMapping _timeTimeSpan;
    private NpgsqlTimeTzTypeMapping _timetz;
    private NpgsqlDateTypeMapping _dateDateOnly;
    private NpgsqlTimeTypeMapping _timeTimeOnly;
    private NpgsqlMacaddrTypeMapping _macaddr;
    private NpgsqlMacaddr8TypeMapping _macaddr8;
    private NpgsqlInetTypeMapping _inet;
    private NpgsqlCidrTypeMapping _cidr;
    private NpgsqlPointTypeMapping _point;
    private NpgsqlBoxTypeMapping _box;
    private NpgsqlLineTypeMapping _line;
    private NpgsqlLineSegmentTypeMapping _lseg;
    private NpgsqlPathTypeMapping _path;
    private NpgsqlPolygonTypeMapping _polygon;
    private NpgsqlCircleTypeMapping _circle;
    private NpgsqlUintTypeMapping _xid;
    private NpgsqlUintTypeMapping _oid;
    private NpgsqlUintTypeMapping _cid;
    private NpgsqlUintTypeMapping _regtype;
    private NpgsqlUintTypeMapping _lo;
    private NpgsqlTsQueryTypeMapping _tsquery;
    private NpgsqlTsVectorTypeMapping _tsvector;
    private NpgsqlRegconfigTypeMapping _regconfig;
    private NpgsqlTsRankingNormalizationTypeMapping _rankingNormalization;
    private NpgsqlRegdictionaryTypeMapping _regdictionary;
    private NpgsqlRangeTypeMapping _int4range;
    private NpgsqlRangeTypeMapping _int8range;
    private NpgsqlRangeTypeMapping _numrange;
    private NpgsqlRangeTypeMapping _tsrange;
    private NpgsqlRangeTypeMapping _tstzrange;
    private NpgsqlRangeTypeMapping _dateOnlyDaterange;
    private NpgsqlRangeTypeMapping _dateTimeDaterange;
    private NpgsqlMultirangeTypeMapping _int4multirangeArray;
    private NpgsqlMultirangeTypeMapping _int8multirangeArray;
    private NpgsqlMultirangeTypeMapping _nummultirangeArray;
    private NpgsqlMultirangeTypeMapping _tsmultirangeArray;
    private NpgsqlMultirangeTypeMapping _tstzmultirangeArray;
    private NpgsqlMultirangeTypeMapping _dateTimeDatemultirangeArray;
    private NpgsqlMultirangeTypeMapping _dateOnlyDatemultirangeArray;
    private NpgsqlMultirangeTypeMapping _int4multirangeList;
    private NpgsqlMultirangeTypeMapping _int8multirangeList;
    private NpgsqlMultirangeTypeMapping _nummultirangeList;
    private NpgsqlMultirangeTypeMapping _tsmultirangeList;
    private NpgsqlMultirangeTypeMapping _tstzmultirangeList;
    private NpgsqlMultirangeTypeMapping _dateTimeMultirangeList;
    private NpgsqlMultirangeTypeMapping _dateOnlyDatemultirangeList;
    private NpgsqlBoolTypeMapping _bool;
    private NpgsqlBitTypeMapping _bit;
    private NpgsqlVarbitTypeMapping _varbit;
    private NpgsqlByteArrayTypeMapping _bytea;
    private NpgsqlHstoreTypeMapping _hstore;
    private NpgsqlHstoreTypeMapping _immutableHstore;
    private NpgsqlTidTypeMapping _tid;
    private NpgsqlPgLsnTypeMapping _pgLsn;
    private NpgsqlLTreeTypeMapping _ltree;
    private NpgsqlStringTypeMapping _ltreeString;
    private NpgsqlStringTypeMapping _lquery;
    private NpgsqlStringTypeMapping _ltxtquery;
    public StringTypeMapping EStringTypeMapping;
    protected ConcurrentDictionary`2<string, RelationalTypeMapping[]> StoreTypeMappings { get; }
    protected ConcurrentDictionary`2<Type, RelationalTypeMapping> ClrTypeMappings { get; }
    private static NpgsqlTypeMappingSource();
    public NpgsqlTypeMappingSource(TypeMappingSourceDependencies dependencies, RelationalTypeMappingSourceDependencies relationalDependencies, ISqlGenerationHelper sqlGenerationHelper, INpgsqlSingletonOptions options);
    [CompilerGeneratedAttribute]
protected virtual ConcurrentDictionary`2<string, RelationalTypeMapping[]> get_StoreTypeMappings();
    [CompilerGeneratedAttribute]
protected virtual ConcurrentDictionary`2<Type, RelationalTypeMapping> get_ClrTypeMappings();
    public virtual void LoadUserDefinedTypeMappings(ISqlGenerationHelper sqlGenerationHelper, NpgsqlDataSource dataSource);
    protected virtual void SetupEnumMappings(ISqlGenerationHelper sqlGenerationHelper, NpgsqlDataSource dataSource);
    [NullableContextAttribute("2")]
protected virtual RelationalTypeMapping FindMapping(RelationalTypeMappingInfo& modreq(System.Runtime.InteropServices.InAttribute) mappingInfo);
    [NullableContextAttribute("2")]
protected virtual RelationalTypeMapping FindBaseMapping(RelationalTypeMappingInfo& modreq(System.Runtime.InteropServices.InAttribute) mappingInfo);
    [NullableContextAttribute("2")]
protected virtual RelationalTypeMapping FindArrayMapping(RelationalTypeMappingInfo& modreq(System.Runtime.InteropServices.InAttribute) mappingInfo);
    [NullableContextAttribute("2")]
protected virtual RelationalTypeMapping FindRowValueMapping(RelationalTypeMappingInfo& modreq(System.Runtime.InteropServices.InAttribute) mappingInfo);
    [NullableContextAttribute("2")]
protected virtual RelationalTypeMapping FindUserRangeMapping(RelationalTypeMappingInfo& modreq(System.Runtime.InteropServices.InAttribute) mappingInfo);
    public virtual RelationalTypeMapping FindContainerMapping(Type containerClrType, RelationalTypeMapping containeeTypeMapping);
    [NullableContextAttribute("0")]
private static bool NameBasesUsesPrecision(ReadOnlySpan`1<char> span);
    [NullableContextAttribute("2")]
protected virtual string ParseStoreTypeName(string storeTypeName, Nullable`1& unicode, Nullable`1& size, Nullable`1& precision, Nullable`1& scale);
    public virtual CoreTypeMapping FindMapping(IProperty property);
}
[NullableContextAttribute("1")]
public interface Npgsql.EntityFrameworkCore.PostgreSQL.Storage.ValueConversion.INpgsqlArrayConverter {
    public ValueConverter ElementConverter { get; }
    public abstract virtual ValueConverter get_ElementConverter();
}
[NullableContextAttribute("1")]
[NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public class Npgsql.EntityFrameworkCore.PostgreSQL.Storage.ValueConversion.NpgsqlArrayConverter`2 : ValueConverter`2<TModelArray, TProviderArray> {
    [CompilerGeneratedAttribute]
private ValueConverter <ElementConverter>k__BackingField;
    public ValueConverter ElementConverter { get; }
    public NpgsqlArrayConverter`2(ValueConverter elementConverter);
    [CompilerGeneratedAttribute]
public virtual ValueConverter get_ElementConverter();
    private static Expression`1<Func`2<TModelArray, TProviderArray>> ToArrayProviderExpression(LambdaExpression elementToProviderExpression);
    private static Expression`1<Func`2<TProviderArray, TModelArray>> FromArrayProviderExpression(LambdaExpression elementFromProviderExpression);
    private static Expression`1<Func`2<TInput, TOutput>> ArrayConversionExpression(LambdaExpression elementConversionExpression);
    private static Expression ForLoop(ParameterExpression loopVar, Expression initValue, Expression condition, Expression increment, Expression loopContent);
    [CompilerGeneratedAttribute]
internal static Expression <ArrayConversionExpression>g__AccessArrayOrList|6_0(Expression arrayOrList, Expression index);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Npgsql.EntityFrameworkCore.PostgreSQL.Storage.ValueConversion.NpgsqlValueConverterSelector : ValueConverterSelector {
    [TupleElementNamesAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private ConcurrentDictionary`2<ValueTuple`2<Type, Type>, ValueConverterInfo> _arrayConverters;
    public NpgsqlValueConverterSelector(ValueConverterSelectorDependencies dependencies);
    public virtual IEnumerable`1<ValueConverterInfo> Select(Type modelClrType, Type providerClrType);
}
public class Npgsql.EntityFrameworkCore.PostgreSQL.Update.Internal.NpgsqlModificationCommand : ModificationCommand {
    private bool _detailedErrorsEnabled;
    public NpgsqlModificationCommand(ModificationCommandParameters& modificationCommandParameters);
    public NpgsqlModificationCommand(NonTrackedModificationCommandParameters& modificationCommandParameters);
    [NullableContextAttribute("1")]
public virtual void PropagateResults(RelationalDataReader relationalReader);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Npgsql.EntityFrameworkCore.PostgreSQL.Update.Internal.NpgsqlModificationCommandBatch : ReaderModificationCommandBatch {
    [CompilerGeneratedAttribute]
private int <MaxBatchSize>k__BackingField;
    protected int MaxBatchSize { get; }
    public NpgsqlModificationCommandBatch(ModificationCommandBatchFactoryDependencies dependencies, int maxBatchSize);
    [CompilerGeneratedAttribute]
protected virtual int get_MaxBatchSize();
    protected virtual void AddParameter(IColumnModification columnModification);
    protected virtual void Consume(RelationalDataReader reader);
    protected virtual Task ConsumeAsync(RelationalDataReader reader, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Npgsql.EntityFrameworkCore.PostgreSQL.Update.Internal.NpgsqlModificationCommandBatch/<Consume>d__7")]
private Task Consume(RelationalDataReader reader, bool async, CancellationToken cancellationToken);
    private IReadOnlyList`1<IUpdateEntry> AggregateEntries(int endIndex, int commandCount);
    protected virtual void ThrowAggregateUpdateConcurrencyException(RelationalDataReader reader, int commandIndex, int expectedRowsAffected, int rowsAffected);
    [AsyncStateMachineAttribute("Npgsql.EntityFrameworkCore.PostgreSQL.Update.Internal.NpgsqlModificationCommandBatch/<ThrowAggregateUpdateConcurrencyExceptionAsync>d__10")]
protected virtual Task ThrowAggregateUpdateConcurrencyExceptionAsync(RelationalDataReader reader, int commandIndex, int expectedRowsAffected, int rowsAffected, CancellationToken cancellationToken);
    private static RelationalConcurrencyExceptionEventData CreateConcurrencyExceptionEventData(DbContext context, RelationalDataReader reader, DbUpdateConcurrencyException exception, IReadOnlyList`1<IUpdateEntry> entries, EventDefinition`1<Exception> definition);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Npgsql.EntityFrameworkCore.PostgreSQL.Update.Internal.NpgsqlModificationCommandBatchFactory : object {
    private static int DefaultMaxBatchSize;
    private ModificationCommandBatchFactoryDependencies _dependencies;
    private int _maxBatchSize;
    public NpgsqlModificationCommandBatchFactory(ModificationCommandBatchFactoryDependencies dependencies, IDbContextOptions options);
    public virtual ModificationCommandBatch Create();
}
public class Npgsql.EntityFrameworkCore.PostgreSQL.Update.Internal.NpgsqlModificationCommandFactory : object {
    [NullableContextAttribute("1")]
public virtual IModificationCommand CreateModificationCommand(ModificationCommandParameters& modreq(System.Runtime.InteropServices.InAttribute) modificationCommandParameters);
    [NullableContextAttribute("1")]
public virtual INonTrackedModificationCommand CreateNonTrackedModificationCommand(NonTrackedModificationCommandParameters& modreq(System.Runtime.InteropServices.InAttribute) modificationCommandParameters);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Npgsql.EntityFrameworkCore.PostgreSQL.Update.Internal.NpgsqlUpdateSqlGenerator : UpdateSqlGenerator {
    public NpgsqlUpdateSqlGenerator(UpdateSqlGeneratorDependencies dependencies);
    public virtual ResultSetMapping AppendInsertOperation(StringBuilder commandStringBuilder, IReadOnlyModificationCommand command, int commandPosition, Boolean& requiresTransaction);
    public virtual ResultSetMapping AppendInsertOperation(StringBuilder commandStringBuilder, IReadOnlyModificationCommand command, int commandPosition, bool overridingSystemValue, Boolean& requiresTransaction);
    protected virtual void AppendInsertCommand(StringBuilder commandStringBuilder, string name, string schema, IReadOnlyList`1<IColumnModification> writeOperations, IReadOnlyList`1<IColumnModification> readOperations, bool overridingSystemValue);
    public virtual ResultSetMapping AppendUpdateOperation(StringBuilder commandStringBuilder, IReadOnlyModificationCommand command, int commandPosition, Boolean& requiresTransaction);
    public virtual ResultSetMapping AppendDeleteOperation(StringBuilder commandStringBuilder, IReadOnlyModificationCommand command, int commandPosition, Boolean& requiresTransaction);
    public virtual ResultSetMapping AppendStoredProcedureCall(StringBuilder commandStringBuilder, IReadOnlyModificationCommand command, int commandPosition, Boolean& requiresTransaction);
    public virtual void AppendObtainNextSequenceValueOperation(StringBuilder commandStringBuilder, string name, string schema);
}
internal static class Npgsql.EntityFrameworkCore.PostgreSQL.Utilities.SortOrderHelper : object {
    [NullableContextAttribute("2")]
public static bool IsDefaultNullSortOrder(IReadOnlyList`1<NullSortOrder> nullSortOrders, IReadOnlyList`1<bool> isDescendingValues);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal static class Npgsql.EntityFrameworkCore.PostgreSQL.Utilities.Statics : object {
    internal static Boolean[][] TrueArrays;
    internal static Boolean[][] FalseArrays;
    private static Statics();
}
[NullableContextAttribute("1")]
public interface Npgsql.EntityFrameworkCore.PostgreSQL.ValueGeneration.Internal.INpgsqlSequenceValueGeneratorFactory {
    public abstract virtual ValueGenerator Create(IProperty property, NpgsqlSequenceValueGeneratorState generatorState, INpgsqlRelationalConnection connection, IRawSqlCommandBuilder rawSqlCommandBuilder, IRelationalCommandDiagnosticsLogger commandLogger);
}
public interface Npgsql.EntityFrameworkCore.PostgreSQL.ValueGeneration.Internal.INpgsqlValueGeneratorCache {
    [NullableContextAttribute("1")]
public abstract virtual NpgsqlSequenceValueGeneratorState GetOrAddSequenceState(IProperty property, IRelationalConnection connection);
}
[NullableContextAttribute("1")]
[NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public class Npgsql.EntityFrameworkCore.PostgreSQL.ValueGeneration.Internal.NpgsqlSequenceHiLoValueGenerator`1 : HiLoValueGenerator`1<TValue> {
    private IRawSqlCommandBuilder _rawSqlCommandBuilder;
    private IUpdateSqlGenerator _sqlGenerator;
    private INpgsqlRelationalConnection _connection;
    private ISequence _sequence;
    private IRelationalCommandDiagnosticsLogger _commandLogger;
    public bool GeneratesTemporaryValues { get; }
    public NpgsqlSequenceHiLoValueGenerator`1(IRawSqlCommandBuilder rawSqlCommandBuilder, IUpdateSqlGenerator sqlGenerator, NpgsqlSequenceValueGeneratorState generatorState, INpgsqlRelationalConnection connection, IRelationalCommandDiagnosticsLogger commandLogger);
    protected virtual long GetNewLowValue();
    [AsyncStateMachineAttribute("Npgsql.EntityFrameworkCore.PostgreSQL.ValueGeneration.Internal.NpgsqlSequenceHiLoValueGenerator`1/<GetNewLowValueAsync>d__7")]
protected virtual Task`1<long> GetNewLowValueAsync(CancellationToken cancellationToken);
    public virtual bool get_GeneratesTemporaryValues();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Npgsql.EntityFrameworkCore.PostgreSQL.ValueGeneration.Internal.NpgsqlSequenceValueGeneratorFactory : object {
    private IUpdateSqlGenerator _sqlGenerator;
    public NpgsqlSequenceValueGeneratorFactory(IUpdateSqlGenerator sqlGenerator);
    public virtual ValueGenerator Create(IProperty property, NpgsqlSequenceValueGeneratorState generatorState, INpgsqlRelationalConnection connection, IRawSqlCommandBuilder rawSqlCommandBuilder, IRelationalCommandDiagnosticsLogger commandLogger);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Npgsql.EntityFrameworkCore.PostgreSQL.ValueGeneration.Internal.NpgsqlSequenceValueGeneratorState : HiLoValueGeneratorState {
    [CompilerGeneratedAttribute]
private ISequence <Sequence>k__BackingField;
    public ISequence Sequence { get; }
    public NpgsqlSequenceValueGeneratorState(ISequence sequence);
    [CompilerGeneratedAttribute]
public virtual ISequence get_Sequence();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Npgsql.EntityFrameworkCore.PostgreSQL.ValueGeneration.Internal.NpgsqlValueGeneratorCache : ValueGeneratorCache {
    private ConcurrentDictionary`2<string, NpgsqlSequenceValueGeneratorState> _sequenceGeneratorCache;
    public NpgsqlValueGeneratorCache(ValueGeneratorCacheDependencies dependencies);
    public virtual NpgsqlSequenceValueGeneratorState GetOrAddSequenceState(IProperty property, IRelationalConnection connection);
    private static string GetSequenceName(ISequence sequence, IRelationalConnection connection);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Npgsql.EntityFrameworkCore.PostgreSQL.ValueGeneration.Internal.NpgsqlValueGeneratorSelector : RelationalValueGeneratorSelector {
    private INpgsqlSequenceValueGeneratorFactory _sequenceFactory;
    private INpgsqlRelationalConnection _connection;
    private IRawSqlCommandBuilder _rawSqlCommandBuilder;
    private IRelationalCommandDiagnosticsLogger _commandLogger;
    public INpgsqlValueGeneratorCache Cache { get; }
    public NpgsqlValueGeneratorSelector(ValueGeneratorSelectorDependencies dependencies, INpgsqlSequenceValueGeneratorFactory sequenceFactory, INpgsqlRelationalConnection connection, IRawSqlCommandBuilder rawSqlCommandBuilder, IRelationalCommandDiagnosticsLogger commandLogger);
    public virtual INpgsqlValueGeneratorCache get_Cache();
    public virtual ValueGenerator Select(IProperty property, IEntityType entityType);
    public virtual ValueGenerator Create(IProperty property, IEntityType entityType);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ExtensionAttribute]
internal static class System.Reflection.EntityFrameworkMemberInfoExtensions : object {
    [ExtensionAttribute]
public static Type GetMemberType(MemberInfo memberInfo);
    [NullableContextAttribute("2")]
[ExtensionAttribute]
public static bool IsSameAs(MemberInfo propertyInfo, MemberInfo otherPropertyInfo);
    [ExtensionAttribute]
public static string GetSimpleMemberName(MemberInfo member);
}
[ExtensionAttribute]
[DebuggerStepThroughAttribute]
internal static class System.Reflection.MethodInfoExtensions : object {
    [NullableContextAttribute("1")]
[ExtensionAttribute]
internal static bool IsClosedFormOf(MethodInfo methodInfo, MethodInfo genericMethod);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ExtensionAttribute]
[DebuggerStepThroughAttribute]
internal static class System.Reflection.PropertyInfoExtensions : object {
    [ExtensionAttribute]
public static bool IsStatic(PropertyInfo property);
    [ExtensionAttribute]
public static bool IsIndexerProperty(PropertyInfo propertyInfo);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ExtensionAttribute]
internal static class System.Reflection.TypeExtensions : object {
    [NullableContextAttribute("2")]
[ExtensionAttribute]
internal static bool IsGenericList(Type type);
    [ExtensionAttribute]
internal static bool IsArrayOrGenericList(Type type);
    [ExtensionAttribute]
internal static bool TryGetElementType(Type type, Type& elementType);
    [ExtensionAttribute]
internal static bool TryGetRangeSubtype(Type type, Type& subtypeType);
    [ExtensionAttribute]
internal static bool TryGetMultirangeSubtype(Type type, Type& subtypeType);
    [ExtensionAttribute]
public static PropertyInfo FindIndexerProperty(Type type);
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
[AttributeUsageAttribute("27524")]
internal class System.Runtime.CompilerServices.NullableAttribute : Attribute {
    public Byte[] NullableFlags;
    public NullableAttribute(byte );
    public NullableAttribute(Byte[] );
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
[AttributeUsageAttribute("5196")]
internal class System.Runtime.CompilerServices.NullableContextAttribute : Attribute {
    public byte Flag;
    public NullableContextAttribute(byte );
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
[AttributeUsageAttribute("2")]
internal class System.Runtime.CompilerServices.RefSafetyRulesAttribute : Attribute {
    public int Version;
    public RefSafetyRulesAttribute(int );
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ExtensionAttribute]
[DebuggerStepThroughAttribute]
internal static class System.SharedTypeExtensions : object {
    private static Dictionary`2<Type, string> _builtInTypeNames;
    [NullableAttribute("0")]
private static Dictionary`2<Type, object> _commonTypeDictionary;
    [NullableAttribute("0")]
private static MethodInfo _generateDefaultValueConstantMethod;
    private static SharedTypeExtensions();
    [ExtensionAttribute]
public static Type UnwrapNullableType(Type type);
    [ExtensionAttribute]
public static bool IsNullableValueType(Type type);
    [ExtensionAttribute]
public static bool IsNullableType(Type type);
    [ExtensionAttribute]
public static bool IsValidEntityType(Type type);
    [ExtensionAttribute]
public static bool IsPropertyBagType(Type type);
    [ExtensionAttribute]
public static Type MakeNullable(Type type, bool nullable);
    [ExtensionAttribute]
public static bool IsNumeric(Type type);
    [ExtensionAttribute]
public static bool IsInteger(Type type);
    [ExtensionAttribute]
public static bool IsSignedInteger(Type type);
    [ExtensionAttribute]
public static bool IsAnonymousType(Type type);
    [ExtensionAttribute]
public static bool IsTupleType(Type type);
    [ExtensionAttribute]
public static PropertyInfo GetAnyProperty(Type type, string name);
    [ExtensionAttribute]
public static MethodInfo GetRequiredMethod(Type type, string name, Type[] parameters);
    [ExtensionAttribute]
public static PropertyInfo GetRequiredProperty(Type type, string name);
    [ExtensionAttribute]
public static FieldInfo GetRequiredDeclaredField(Type type, string name);
    [ExtensionAttribute]
public static MethodInfo GetRequiredDeclaredMethod(Type type, string name);
    [ExtensionAttribute]
public static PropertyInfo GetRequiredDeclaredProperty(Type type, string name);
    [ExtensionAttribute]
public static MethodInfo GetRequiredRuntimeMethod(Type type, string name, Type[] parameters);
    [ExtensionAttribute]
public static PropertyInfo GetRequiredRuntimeProperty(Type type, string name);
    [ExtensionAttribute]
public static bool IsInstantiable(Type type);
    [ExtensionAttribute]
public static Type UnwrapEnumType(Type type);
    [ExtensionAttribute]
public static Type GetSequenceType(Type type);
    [ExtensionAttribute]
public static Type TryGetSequenceType(Type type);
    [ExtensionAttribute]
public static Type TryGetElementType(Type type, Type interfaceOrBaseType);
    [NullableContextAttribute("0")]
[ExtensionAttribute]
public static bool IsCompatibleWith(Type propertyType, Type fieldType);
    [NullableContextAttribute("0")]
[IteratorStateMachineAttribute("System.SharedTypeExtensions/<GetGenericTypeImplementations>d__26")]
[ExtensionAttribute]
public static IEnumerable`1<Type> GetGenericTypeImplementations(Type type, Type interfaceOrBaseType);
    [NullableContextAttribute("0")]
[IteratorStateMachineAttribute("System.SharedTypeExtensions/<GetBaseTypes>d__27")]
[ExtensionAttribute]
public static IEnumerable`1<Type> GetBaseTypes(Type type);
    [NullableContextAttribute("0")]
[IteratorStateMachineAttribute("System.SharedTypeExtensions/<GetTypesInHierarchy>d__28")]
[ExtensionAttribute]
public static IEnumerable`1<Type> GetTypesInHierarchy(Type type);
    [NullableContextAttribute("0")]
[ExtensionAttribute]
public static ConstructorInfo GetDeclaredConstructor(Type type, Type[] types);
    [NullableContextAttribute("0")]
[IteratorStateMachineAttribute("System.SharedTypeExtensions/<GetPropertiesInHierarchy>d__30")]
[ExtensionAttribute]
public static IEnumerable`1<PropertyInfo> GetPropertiesInHierarchy(Type type, string name);
    [NullableContextAttribute("0")]
[IteratorStateMachineAttribute("System.SharedTypeExtensions/<GetMembersInHierarchy>d__31")]
[ExtensionAttribute]
public static IEnumerable`1<MemberInfo> GetMembersInHierarchy(Type type);
    [NullableContextAttribute("0")]
[ExtensionAttribute]
public static IEnumerable`1<MemberInfo> GetMembersInHierarchy(Type type, string name);
    [NullableContextAttribute("0")]
[ExtensionAttribute]
public static object GetDefaultValue(Type type);
    [NullableContextAttribute("0")]
[ExtensionAttribute]
public static IEnumerable`1<TypeInfo> GetConstructibleTypes(Assembly assembly);
    [NullableContextAttribute("0")]
[ExtensionAttribute]
public static IEnumerable`1<TypeInfo> GetLoadableDefinedTypes(Assembly assembly);
    [NullableContextAttribute("0")]
[ExtensionAttribute]
public static bool IsQueryableType(Type type);
    [NullableContextAttribute("0")]
[ExtensionAttribute]
public static string DisplayName(Type type, bool fullName);
    [NullableContextAttribute("0")]
private static void ProcessType(StringBuilder builder, Type type, bool fullName);
    [NullableContextAttribute("0")]
private static void ProcessArrayType(StringBuilder builder, Type type, bool fullName);
    [NullableContextAttribute("0")]
private static void ProcessGenericType(StringBuilder builder, Type type, Type[] genericArguments, int length, bool fullName);
    [NullableContextAttribute("0")]
[IteratorStateMachineAttribute("System.SharedTypeExtensions/<GetNamespaces>d__42")]
[ExtensionAttribute]
public static IEnumerable`1<string> GetNamespaces(Type type);
    [NullableContextAttribute("0")]
[ExtensionAttribute]
public static ConstantExpression GetDefaultValueConstant(Type type);
    [NullableContextAttribute("0")]
private static ConstantExpression GenerateDefaultValueConstant();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ExtensionAttribute]
internal static class System.Text.StringBuilderExtensions : object {
    [ExtensionAttribute]
public static StringBuilder AppendJoin(StringBuilder stringBuilder, IEnumerable`1<string> values, string separator);
    [ExtensionAttribute]
public static StringBuilder AppendJoin(StringBuilder stringBuilder, IEnumerable`1<T> values, Action`2<StringBuilder, T> joinAction, string separator);
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
[ExtensionAttribute]
internal static class System.VersionExtensions : object {
    [ExtensionAttribute]
internal static bool AtLeast(Version version, int major, int minor);
    [ExtensionAttribute]
internal static bool IsUnder(Version version, int major, int minor);
}
