[AttributeUsageAttribute("64")]
internal class AsyncRewriter.RewriteAsyncAttribute : Attribute {
    public RewriteAsyncAttribute(bool withOverride);
}
[AttributeUsageAttribute("7104")]
internal class JetBrains.Annotations.CanBeNullAttribute : Attribute {
}
[AttributeUsageAttribute("64")]
internal class JetBrains.Annotations.ContractAnnotationAttribute : Attribute {
    [CompilerGeneratedAttribute]
private string <Contract>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <ForceFullStates>k__BackingField;
    public string Contract { get; private set; }
    public bool ForceFullStates { get; private set; }
    public ContractAnnotationAttribute(string contract);
    public ContractAnnotationAttribute(string contract, bool forceFullStates);
    [CompilerGeneratedAttribute]
public string get_Contract();
    [CompilerGeneratedAttribute]
private void set_Contract(string value);
    [CompilerGeneratedAttribute]
public bool get_ForceFullStates();
    [CompilerGeneratedAttribute]
private void set_ForceFullStates(bool value);
}
[FlagsAttribute]
internal enum JetBrains.Annotations.ImplicitUseKindFlags : Enum {
    public int value__;
    public static ImplicitUseKindFlags Default;
    public static ImplicitUseKindFlags Access;
    public static ImplicitUseKindFlags Assign;
    public static ImplicitUseKindFlags InstantiatedWithFixedConstructorSignature;
    public static ImplicitUseKindFlags InstantiatedNoFixedConstructorSignature;
}
[FlagsAttribute]
internal enum JetBrains.Annotations.ImplicitUseTargetFlags : Enum {
    public int value__;
    public static ImplicitUseTargetFlags Default;
    public static ImplicitUseTargetFlags Itself;
    public static ImplicitUseTargetFlags Members;
    public static ImplicitUseTargetFlags WithMembers;
}
[AttributeUsageAttribute("2048")]
internal class JetBrains.Annotations.InvokerParameterNameAttribute : Attribute {
}
[AttributeUsageAttribute("6592")]
internal class JetBrains.Annotations.ItemCanBeNullAttribute : Attribute {
}
[AttributeUsageAttribute("6592")]
internal class JetBrains.Annotations.ItemNotNullAttribute : Attribute {
}
[AttributeUsageAttribute("16388")]
internal class JetBrains.Annotations.MeansImplicitUseAttribute : Attribute {
    [CompilerGeneratedAttribute]
private ImplicitUseKindFlags <UseKindFlags>k__BackingField;
    [CompilerGeneratedAttribute]
private ImplicitUseTargetFlags <TargetFlags>k__BackingField;
    [UsedImplicitlyAttribute]
public ImplicitUseKindFlags UseKindFlags { get; private set; }
    [UsedImplicitlyAttribute]
public ImplicitUseTargetFlags TargetFlags { get; private set; }
    public MeansImplicitUseAttribute(ImplicitUseKindFlags useKindFlags);
    public MeansImplicitUseAttribute(ImplicitUseTargetFlags targetFlags);
    public MeansImplicitUseAttribute(ImplicitUseKindFlags useKindFlags, ImplicitUseTargetFlags targetFlags);
    [CompilerGeneratedAttribute]
public ImplicitUseKindFlags get_UseKindFlags();
    [CompilerGeneratedAttribute]
private void set_UseKindFlags(ImplicitUseKindFlags value);
    [CompilerGeneratedAttribute]
public ImplicitUseTargetFlags get_TargetFlags();
    [CompilerGeneratedAttribute]
private void set_TargetFlags(ImplicitUseTargetFlags value);
}
[AttributeUsageAttribute("2048")]
internal class JetBrains.Annotations.NoEnumerationAttribute : Attribute {
}
[AttributeUsageAttribute("7104")]
internal class JetBrains.Annotations.NotNullAttribute : Attribute {
}
[MeansImplicitUseAttribute("3")]
internal class JetBrains.Annotations.PublicAPIAttribute : Attribute {
    [CompilerGeneratedAttribute]
private string <Comment>k__BackingField;
    public string Comment { get; private set; }
    public PublicAPIAttribute(string comment);
    [CompilerGeneratedAttribute]
public string get_Comment();
    [CompilerGeneratedAttribute]
private void set_Comment(string value);
}
[AttributeUsageAttribute("32767")]
internal class JetBrains.Annotations.UsedImplicitlyAttribute : Attribute {
    [CompilerGeneratedAttribute]
private ImplicitUseKindFlags <UseKindFlags>k__BackingField;
    [CompilerGeneratedAttribute]
private ImplicitUseTargetFlags <TargetFlags>k__BackingField;
    public ImplicitUseKindFlags UseKindFlags { get; private set; }
    public ImplicitUseTargetFlags TargetFlags { get; private set; }
    public UsedImplicitlyAttribute(ImplicitUseKindFlags useKindFlags);
    public UsedImplicitlyAttribute(ImplicitUseTargetFlags targetFlags);
    public UsedImplicitlyAttribute(ImplicitUseKindFlags useKindFlags, ImplicitUseTargetFlags targetFlags);
    [CompilerGeneratedAttribute]
public ImplicitUseKindFlags get_UseKindFlags();
    [CompilerGeneratedAttribute]
private void set_UseKindFlags(ImplicitUseKindFlags value);
    [CompilerGeneratedAttribute]
public ImplicitUseTargetFlags get_TargetFlags();
    [CompilerGeneratedAttribute]
private void set_TargetFlags(ImplicitUseTargetFlags value);
}
internal enum Npgsql.BackendMessageCode : Enum {
    public byte value__;
    public static BackendMessageCode AuthenticationRequest;
    public static BackendMessageCode BackendKeyData;
    public static BackendMessageCode BindComplete;
    public static BackendMessageCode CloseComplete;
    public static BackendMessageCode CompletedResponse;
    public static BackendMessageCode CopyData;
    public static BackendMessageCode CopyDone;
    public static BackendMessageCode CopyBothResponse;
    public static BackendMessageCode CopyInResponse;
    public static BackendMessageCode CopyOutResponse;
    public static BackendMessageCode DataRow;
    public static BackendMessageCode EmptyQueryResponse;
    public static BackendMessageCode ErrorResponse;
    public static BackendMessageCode FunctionCall;
    public static BackendMessageCode FunctionCallResponse;
    public static BackendMessageCode NoData;
    public static BackendMessageCode NoticeResponse;
    public static BackendMessageCode NotificationResponse;
    public static BackendMessageCode ParameterDescription;
    public static BackendMessageCode ParameterStatus;
    public static BackendMessageCode ParseComplete;
    public static BackendMessageCode PasswordPacket;
    public static BackendMessageCode PortalSuspended;
    public static BackendMessageCode ReadyForQuery;
    public static BackendMessageCode RowDescription;
}
internal class Npgsql.BackendMessages.AuthenticationCleartextPasswordMessage : AuthenticationRequestMessage {
    internal static AuthenticationCleartextPasswordMessage Instance;
    internal AuthenticationRequestType AuthRequestType { get; }
    private static AuthenticationCleartextPasswordMessage();
    internal virtual AuthenticationRequestType get_AuthRequestType();
}
internal class Npgsql.BackendMessages.AuthenticationGSSContinueMessage : AuthenticationRequestMessage {
    [CompilerGeneratedAttribute]
private Byte[] <AuthenticationData>k__BackingField;
    internal AuthenticationRequestType AuthRequestType { get; }
    internal Byte[] AuthenticationData { get; private set; }
    private AuthenticationGSSContinueMessage(Byte[] authenticationData);
    internal virtual AuthenticationRequestType get_AuthRequestType();
    [CompilerGeneratedAttribute]
internal Byte[] get_AuthenticationData();
    [CompilerGeneratedAttribute]
private void set_AuthenticationData(Byte[] value);
    internal static AuthenticationGSSContinueMessage Load(ReadBuffer buf, int len);
}
internal class Npgsql.BackendMessages.AuthenticationGSSMessage : AuthenticationRequestMessage {
    internal static AuthenticationGSSMessage Instance;
    internal AuthenticationRequestType AuthRequestType { get; }
    private static AuthenticationGSSMessage();
    internal virtual AuthenticationRequestType get_AuthRequestType();
}
internal class Npgsql.BackendMessages.AuthenticationKerberosV5Message : AuthenticationRequestMessage {
    internal static AuthenticationKerberosV5Message Instance;
    internal AuthenticationRequestType AuthRequestType { get; }
    private static AuthenticationKerberosV5Message();
    internal virtual AuthenticationRequestType get_AuthRequestType();
}
internal class Npgsql.BackendMessages.AuthenticationMD5PasswordMessage : AuthenticationRequestMessage {
    [CompilerGeneratedAttribute]
private Byte[] <Salt>k__BackingField;
    internal AuthenticationRequestType AuthRequestType { get; }
    internal Byte[] Salt { get; private set; }
    private AuthenticationMD5PasswordMessage(Byte[] salt);
    internal virtual AuthenticationRequestType get_AuthRequestType();
    [CompilerGeneratedAttribute]
internal Byte[] get_Salt();
    [CompilerGeneratedAttribute]
private void set_Salt(Byte[] value);
    internal static AuthenticationMD5PasswordMessage Load(ReadBuffer buf);
}
internal class Npgsql.BackendMessages.AuthenticationOkMessage : AuthenticationRequestMessage {
    internal static AuthenticationOkMessage Instance;
    internal AuthenticationRequestType AuthRequestType { get; }
    private static AuthenticationOkMessage();
    internal virtual AuthenticationRequestType get_AuthRequestType();
}
internal abstract class Npgsql.BackendMessages.AuthenticationRequestMessage : object {
    public BackendMessageCode Code { get; }
    internal AuthenticationRequestType AuthRequestType { get; }
    public sealed virtual BackendMessageCode get_Code();
    internal abstract virtual AuthenticationRequestType get_AuthRequestType();
}
internal enum Npgsql.BackendMessages.AuthenticationRequestType : Enum {
    public int value__;
    public static AuthenticationRequestType AuthenticationOk;
    public static AuthenticationRequestType AuthenticationKerberosV4;
    public static AuthenticationRequestType AuthenticationKerberosV5;
    public static AuthenticationRequestType AuthenticationCleartextPassword;
    public static AuthenticationRequestType AuthenticationCryptPassword;
    public static AuthenticationRequestType AuthenticationMD5Password;
    public static AuthenticationRequestType AuthenticationSCMCredential;
    public static AuthenticationRequestType AuthenticationGSS;
    public static AuthenticationRequestType AuthenticationGSSContinue;
    public static AuthenticationRequestType AuthenticationSSPI;
}
internal class Npgsql.BackendMessages.AuthenticationSCMCredentialMessage : AuthenticationRequestMessage {
    internal static AuthenticationSCMCredentialMessage Instance;
    internal AuthenticationRequestType AuthRequestType { get; }
    private static AuthenticationSCMCredentialMessage();
    internal virtual AuthenticationRequestType get_AuthRequestType();
}
internal class Npgsql.BackendMessages.AuthenticationSSPIMessage : AuthenticationRequestMessage {
    internal static AuthenticationSSPIMessage Instance;
    internal AuthenticationRequestType AuthRequestType { get; }
    private static AuthenticationSSPIMessage();
    internal virtual AuthenticationRequestType get_AuthRequestType();
}
internal class Npgsql.BackendMessages.BackendKeyDataMessage : object {
    [CompilerGeneratedAttribute]
private int <BackendProcessId>k__BackingField;
    [CompilerGeneratedAttribute]
private int <BackendSecretKey>k__BackingField;
    public BackendMessageCode Code { get; }
    internal int BackendProcessId { get; private set; }
    internal int BackendSecretKey { get; private set; }
    internal BackendKeyDataMessage(ReadBuffer buf);
    public sealed virtual BackendMessageCode get_Code();
    [CompilerGeneratedAttribute]
internal int get_BackendProcessId();
    [CompilerGeneratedAttribute]
private void set_BackendProcessId(int value);
    [CompilerGeneratedAttribute]
internal int get_BackendSecretKey();
    [CompilerGeneratedAttribute]
private void set_BackendSecretKey(int value);
}
internal class Npgsql.BackendMessages.BindCompleteMessage : object {
    internal static BindCompleteMessage Instance;
    public BackendMessageCode Code { get; }
    private static BindCompleteMessage();
    public sealed virtual BackendMessageCode get_Code();
}
internal class Npgsql.BackendMessages.CloseCompletedMessage : object {
    internal static CloseCompletedMessage Instance;
    public BackendMessageCode Code { get; }
    private static CloseCompletedMessage();
    public sealed virtual BackendMessageCode get_Code();
}
internal class Npgsql.BackendMessages.CommandCompleteMessage : object {
    [CompilerGeneratedAttribute]
private StatementType <StatementType>k__BackingField;
    [CompilerGeneratedAttribute]
private UInt32 <OID>k__BackingField;
    [CompilerGeneratedAttribute]
private UInt32 <Rows>k__BackingField;
    private static NpgsqlLogger Log;
    internal StatementType StatementType { get; private set; }
    internal UInt32 OID { get; private set; }
    internal UInt32 Rows { get; private set; }
    public BackendMessageCode Code { get; }
    private static CommandCompleteMessage();
    [CompilerGeneratedAttribute]
internal StatementType get_StatementType();
    [CompilerGeneratedAttribute]
private void set_StatementType(StatementType value);
    [CompilerGeneratedAttribute]
internal UInt32 get_OID();
    [CompilerGeneratedAttribute]
private void set_OID(UInt32 value);
    [CompilerGeneratedAttribute]
internal UInt32 get_Rows();
    [CompilerGeneratedAttribute]
private void set_Rows(UInt32 value);
    internal CommandCompleteMessage Load(ReadBuffer buf, int len);
    private void ParseRows(string token);
    public sealed virtual BackendMessageCode get_Code();
}
internal class Npgsql.BackendMessages.CopyBothResponseMessage : CopyResponseMessageBase {
    public BackendMessageCode Code { get; }
    public virtual BackendMessageCode get_Code();
    internal CopyBothResponseMessage Load(ReadBuffer buf);
}
internal class Npgsql.BackendMessages.CopyDataMessage : object {
    [CompilerGeneratedAttribute]
private int <Length>k__BackingField;
    public BackendMessageCode Code { get; }
    public int Length { get; private set; }
    public sealed virtual BackendMessageCode get_Code();
    [CompilerGeneratedAttribute]
public int get_Length();
    [CompilerGeneratedAttribute]
private void set_Length(int value);
    internal CopyDataMessage Load(int len);
}
internal class Npgsql.BackendMessages.CopyDoneMessage : SimpleFrontendMessage {
    internal static CopyDoneMessage Instance;
    public BackendMessageCode Code { get; }
    internal int Length { get; }
    private static CopyDoneMessage();
    public sealed virtual BackendMessageCode get_Code();
    internal virtual int get_Length();
    internal virtual void WriteFully(WriteBuffer buf);
}
internal class Npgsql.BackendMessages.CopyInResponseMessage : CopyResponseMessageBase {
    public BackendMessageCode Code { get; }
    public virtual BackendMessageCode get_Code();
    internal CopyInResponseMessage Load(ReadBuffer buf);
}
internal class Npgsql.BackendMessages.CopyOutResponseMessage : CopyResponseMessageBase {
    public BackendMessageCode Code { get; }
    public virtual BackendMessageCode get_Code();
    internal CopyOutResponseMessage Load(ReadBuffer buf);
}
internal abstract class Npgsql.BackendMessages.CopyResponseMessageBase : object {
    [CompilerGeneratedAttribute]
private bool <IsBinary>k__BackingField;
    [CompilerGeneratedAttribute]
private short <NumColumns>k__BackingField;
    [CompilerGeneratedAttribute]
private List`1<FormatCode> <ColumnFormatCodes>k__BackingField;
    public BackendMessageCode Code { get; }
    internal bool IsBinary { get; private set; }
    internal short NumColumns { get; private set; }
    internal List`1<FormatCode> ColumnFormatCodes { get; private set; }
    public abstract virtual BackendMessageCode get_Code();
    [CompilerGeneratedAttribute]
internal bool get_IsBinary();
    [CompilerGeneratedAttribute]
private void set_IsBinary(bool value);
    [CompilerGeneratedAttribute]
internal short get_NumColumns();
    [CompilerGeneratedAttribute]
private void set_NumColumns(short value);
    [CompilerGeneratedAttribute]
internal List`1<FormatCode> get_ColumnFormatCodes();
    [CompilerGeneratedAttribute]
private void set_ColumnFormatCodes(List`1<FormatCode> value);
    internal void Load(ReadBuffer buf);
}
internal abstract class Npgsql.BackendMessages.DataRowMessage : object {
    [CompilerGeneratedAttribute]
private ReadBuffer <Buffer>k__BackingField;
    internal int NumColumns;
    internal int Column;
    internal int PosInColumn;
    internal int ColumnLen;
    public BackendMessageCode Code { get; }
    protected internal ReadBuffer Buffer { get; protected set; }
    internal bool IsColumnNull { get; }
    public sealed virtual BackendMessageCode get_Code();
    [CompilerGeneratedAttribute]
protected internal ReadBuffer get_Buffer();
    [CompilerGeneratedAttribute]
protected void set_Buffer(ReadBuffer value);
    internal bool get_IsColumnNull();
    internal abstract virtual DataRowMessage Load(ReadBuffer buf);
    internal abstract virtual void SeekToColumn(int column);
    internal abstract virtual Task SeekToColumnAsync(int column, CancellationToken cancellationToken);
    internal abstract virtual void SeekInColumn(int posInColumn);
    internal abstract virtual Stream GetStream();
    internal abstract virtual void Consume();
    internal abstract virtual Task ConsumeAsync(CancellationToken token);
    internal void SeekToColumnStart(int column);
    protected void CheckColumnIndex(int column);
    internal void CheckNotNull();
}
internal class Npgsql.BackendMessages.DataRowNonSequentialMessage : DataRowMessage {
    private List`1<int> _columnOffsets;
    private int _endOffset;
    private List`1<IDisposable> _streams;
    internal virtual DataRowMessage Load(ReadBuffer buf);
    internal virtual void SeekToColumn(int column);
    internal virtual Task SeekToColumnAsync(int column, CancellationToken cancellationToken);
    internal virtual void SeekInColumn(int posInColumn);
    internal virtual Stream GetStream();
    internal virtual void Consume();
    internal virtual Task ConsumeAsync(CancellationToken cancellationToken);
}
internal class Npgsql.BackendMessages.DataRowSequentialMessage : DataRowMessage {
    private IDisposable _stream;
    [AsyncStateMachineAttribute("Npgsql.BackendMessages.DataRowSequentialMessage/<SeekToColumnAsync>d__0")]
internal virtual Task SeekToColumnAsync(int column, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Npgsql.BackendMessages.DataRowSequentialMessage/<ConsumeAsync>d__1")]
internal virtual Task ConsumeAsync(CancellationToken cancellationToken);
    internal virtual DataRowMessage Load(ReadBuffer buf);
    [RewriteAsyncAttribute("True")]
internal virtual void SeekToColumn(int column);
    internal virtual void SeekInColumn(int posInColumn);
    internal virtual Stream GetStream();
    [RewriteAsyncAttribute("True")]
internal virtual void Consume();
}
internal class Npgsql.BackendMessages.EmptyQueryMessage : object {
    internal static EmptyQueryMessage Instance;
    public BackendMessageCode Code { get; }
    private static EmptyQueryMessage();
    public sealed virtual BackendMessageCode get_Code();
}
internal class Npgsql.BackendMessages.ErrorOrNoticeMessage : object {
    private static NpgsqlLogger Log;
    [CompilerGeneratedAttribute]
private string <Severity>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Code>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Message>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Detail>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Hint>k__BackingField;
    [CompilerGeneratedAttribute]
private int <Position>k__BackingField;
    [CompilerGeneratedAttribute]
private int <InternalPosition>k__BackingField;
    [CompilerGeneratedAttribute]
private string <InternalQuery>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Where>k__BackingField;
    [CompilerGeneratedAttribute]
private string <SchemaName>k__BackingField;
    [CompilerGeneratedAttribute]
private string <TableName>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ColumnName>k__BackingField;
    [CompilerGeneratedAttribute]
private string <DataTypeName>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ConstraintName>k__BackingField;
    [CompilerGeneratedAttribute]
private string <File>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Line>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Routine>k__BackingField;
    internal string Severity { get; private set; }
    internal string Code { get; private set; }
    internal string Message { get; private set; }
    internal string Detail { get; private set; }
    internal string Hint { get; private set; }
    internal int Position { get; private set; }
    internal int InternalPosition { get; private set; }
    internal string InternalQuery { get; private set; }
    internal string Where { get; private set; }
    internal string SchemaName { get; private set; }
    internal string TableName { get; private set; }
    internal string ColumnName { get; private set; }
    internal string DataTypeName { get; private set; }
    internal string ConstraintName { get; private set; }
    internal string File { get; private set; }
    internal string Line { get; private set; }
    internal string Routine { get; private set; }
    internal ErrorOrNoticeMessage(ReadBuffer buf);
    private static ErrorOrNoticeMessage();
    [CompilerGeneratedAttribute]
internal string get_Severity();
    [CompilerGeneratedAttribute]
private void set_Severity(string value);
    [CompilerGeneratedAttribute]
internal string get_Code();
    [CompilerGeneratedAttribute]
private void set_Code(string value);
    [CompilerGeneratedAttribute]
internal string get_Message();
    [CompilerGeneratedAttribute]
private void set_Message(string value);
    [CompilerGeneratedAttribute]
internal string get_Detail();
    [CompilerGeneratedAttribute]
private void set_Detail(string value);
    [CompilerGeneratedAttribute]
internal string get_Hint();
    [CompilerGeneratedAttribute]
private void set_Hint(string value);
    [CompilerGeneratedAttribute]
internal int get_Position();
    [CompilerGeneratedAttribute]
private void set_Position(int value);
    [CompilerGeneratedAttribute]
internal int get_InternalPosition();
    [CompilerGeneratedAttribute]
private void set_InternalPosition(int value);
    [CompilerGeneratedAttribute]
internal string get_InternalQuery();
    [CompilerGeneratedAttribute]
private void set_InternalQuery(string value);
    [CompilerGeneratedAttribute]
internal string get_Where();
    [CompilerGeneratedAttribute]
private void set_Where(string value);
    [CompilerGeneratedAttribute]
internal string get_SchemaName();
    [CompilerGeneratedAttribute]
private void set_SchemaName(string value);
    [CompilerGeneratedAttribute]
internal string get_TableName();
    [CompilerGeneratedAttribute]
private void set_TableName(string value);
    [CompilerGeneratedAttribute]
internal string get_ColumnName();
    [CompilerGeneratedAttribute]
private void set_ColumnName(string value);
    [CompilerGeneratedAttribute]
internal string get_DataTypeName();
    [CompilerGeneratedAttribute]
private void set_DataTypeName(string value);
    [CompilerGeneratedAttribute]
internal string get_ConstraintName();
    [CompilerGeneratedAttribute]
private void set_ConstraintName(string value);
    [CompilerGeneratedAttribute]
internal string get_File();
    [CompilerGeneratedAttribute]
private void set_File(string value);
    [CompilerGeneratedAttribute]
internal string get_Line();
    [CompilerGeneratedAttribute]
private void set_Line(string value);
    [CompilerGeneratedAttribute]
internal string get_Routine();
    [CompilerGeneratedAttribute]
private void set_Routine(string value);
    private void ObjectInvariants();
}
internal class Npgsql.BackendMessages.FieldDescription : object {
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    [CompilerGeneratedAttribute]
private UInt32 <TypeOID>k__BackingField;
    [CompilerGeneratedAttribute]
private short <TypeSize>k__BackingField;
    [CompilerGeneratedAttribute]
private int <TypeModifier>k__BackingField;
    [CompilerGeneratedAttribute]
private UInt32 <TableOID>k__BackingField;
    [CompilerGeneratedAttribute]
private short <ColumnAttributeNumber>k__BackingField;
    private FormatCode _formatCode;
    [CompilerGeneratedAttribute]
private TypeHandler <Handler>k__BackingField;
    [CompilerGeneratedAttribute]
private TypeHandler <RealHandler>k__BackingField;
    private TypeHandlerRegistry _typeHandlerRegistry;
    internal string Name { get; internal set; }
    internal UInt32 TypeOID { get; internal set; }
    internal short TypeSize { get; internal set; }
    internal int TypeModifier { get; internal set; }
    internal UInt32 TableOID { get; internal set; }
    internal short ColumnAttributeNumber { get; internal set; }
    internal FormatCode FormatCode { get; internal set; }
    internal TypeHandler Handler { get; private set; }
    internal TypeHandler RealHandler { get; private set; }
    public string DataTypeName { get; }
    public Type FieldType { get; }
    public bool IsBinaryFormat { get; }
    public bool IsTextFormat { get; }
    internal void Populate(TypeHandlerRegistry typeHandlerRegistry, string name, UInt32 tableOID, short columnAttributeNumber, UInt32 oid, short typeSize, int typeModifier, FormatCode formatCode);
    [CompilerGeneratedAttribute]
internal string get_Name();
    [CompilerGeneratedAttribute]
internal void set_Name(string value);
    [CompilerGeneratedAttribute]
internal UInt32 get_TypeOID();
    [CompilerGeneratedAttribute]
internal void set_TypeOID(UInt32 value);
    [CompilerGeneratedAttribute]
internal short get_TypeSize();
    [CompilerGeneratedAttribute]
internal void set_TypeSize(short value);
    [CompilerGeneratedAttribute]
internal int get_TypeModifier();
    [CompilerGeneratedAttribute]
internal void set_TypeModifier(int value);
    [CompilerGeneratedAttribute]
internal UInt32 get_TableOID();
    [CompilerGeneratedAttribute]
internal void set_TableOID(UInt32 value);
    [CompilerGeneratedAttribute]
internal short get_ColumnAttributeNumber();
    [CompilerGeneratedAttribute]
internal void set_ColumnAttributeNumber(short value);
    internal FormatCode get_FormatCode();
    internal void set_FormatCode(FormatCode value);
    [CompilerGeneratedAttribute]
internal TypeHandler get_Handler();
    [CompilerGeneratedAttribute]
private void set_Handler(TypeHandler value);
    [CompilerGeneratedAttribute]
internal TypeHandler get_RealHandler();
    [CompilerGeneratedAttribute]
private void set_RealHandler(TypeHandler value);
    public string get_DataTypeName();
    public Type get_FieldType();
    private void ResolveHandler();
    public bool get_IsBinaryFormat();
    public bool get_IsTextFormat();
    public virtual string ToString();
}
internal class Npgsql.BackendMessages.NoDataMessage : object {
    internal static NoDataMessage Instance;
    public BackendMessageCode Code { get; }
    private static NoDataMessage();
    public sealed virtual BackendMessageCode get_Code();
}
internal class Npgsql.BackendMessages.ParameterDescriptionMessage : object {
    [CompilerGeneratedAttribute]
private List`1<UInt32> <TypeOIDs>k__BackingField;
    internal List`1<UInt32> TypeOIDs { get; private set; }
    public BackendMessageCode Code { get; }
    [CompilerGeneratedAttribute]
internal List`1<UInt32> get_TypeOIDs();
    [CompilerGeneratedAttribute]
private void set_TypeOIDs(List`1<UInt32> value);
    internal ParameterDescriptionMessage Load(ReadBuffer buf);
    public sealed virtual BackendMessageCode get_Code();
}
internal class Npgsql.BackendMessages.ParseCompleteMessage : object {
    internal static ParseCompleteMessage Instance;
    public BackendMessageCode Code { get; }
    private static ParseCompleteMessage();
    public sealed virtual BackendMessageCode get_Code();
}
internal class Npgsql.BackendMessages.PortalSuspendedMessage : object {
    internal static PortalSuspendedMessage Instance;
    public BackendMessageCode Code { get; }
    private static PortalSuspendedMessage();
    public sealed virtual BackendMessageCode get_Code();
}
internal class Npgsql.BackendMessages.ReadyForQueryMessage : object {
    [CompilerGeneratedAttribute]
private TransactionStatus <TransactionStatusIndicator>k__BackingField;
    public BackendMessageCode Code { get; }
    internal TransactionStatus TransactionStatusIndicator { get; private set; }
    public sealed virtual BackendMessageCode get_Code();
    [CompilerGeneratedAttribute]
internal TransactionStatus get_TransactionStatusIndicator();
    [CompilerGeneratedAttribute]
private void set_TransactionStatusIndicator(TransactionStatus value);
    internal ReadyForQueryMessage Load(ReadBuffer buf);
}
[DefaultMemberAttribute("Item")]
internal class Npgsql.BackendMessages.RowDescriptionMessage : object {
    [CompilerGeneratedAttribute]
private List`1<FieldDescription> <Fields>k__BackingField;
    private Dictionary`2<string, int> _nameIndex;
    private Dictionary`2<string, int> _caseInsensitiveNameIndex;
    private static CompareInfo CompareInfo;
    public List`1<FieldDescription> Fields { get; private set; }
    internal FieldDescription Item { get; }
    internal int NumFields { get; }
    public BackendMessageCode Code { get; }
    private static RowDescriptionMessage();
    [CompilerGeneratedAttribute]
public List`1<FieldDescription> get_Fields();
    [CompilerGeneratedAttribute]
private void set_Fields(List`1<FieldDescription> value);
    internal RowDescriptionMessage Load(ReadBuffer buf, TypeHandlerRegistry typeHandlerRegistry);
    internal FieldDescription get_Item(int index);
    internal int get_NumFields();
    internal int GetFieldIndex(string name);
    internal bool TryGetFieldIndex(string name, Int32& fieldIndex);
    public sealed virtual BackendMessageCode get_Code();
}
internal enum Npgsql.ByteOrder : Enum {
    public int value__;
    public static ByteOrder MSB;
    public static ByteOrder LSB;
}
internal abstract class Npgsql.CachedValue : object {
    [CompilerGeneratedAttribute]
private bool <IsSet>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsProviderSpecificValue>k__BackingField;
    internal bool IsSet { get; internal set; }
    internal bool IsProviderSpecificValue { get; internal set; }
    [CompilerGeneratedAttribute]
internal bool get_IsSet();
    [CompilerGeneratedAttribute]
internal void set_IsSet(bool value);
    [CompilerGeneratedAttribute]
internal bool get_IsProviderSpecificValue();
    [CompilerGeneratedAttribute]
internal void set_IsProviderSpecificValue(bool value);
}
internal class Npgsql.CachedValue`1 : CachedValue {
    private T _value;
    internal T Value { get; internal set; }
    internal T get_Value();
    internal void set_Value(T value);
}
internal abstract class Npgsql.ChunkingTypeHandler`1 : TypeHandler`1<T> {
    internal ChunkingTypeHandler`1(IBackendType backendType);
    [AsyncStateMachineAttribute("Npgsql.ChunkingTypeHandler`1/<ReadFullyAsync>d__0`1")]
internal virtual Task`1<T2> ReadFullyAsync(ReadBuffer buf, int len, CancellationToken cancellationToken, FieldDescription fieldDescription);
    public abstract virtual void PrepareRead(ReadBuffer buf, int len, FieldDescription fieldDescription);
    public abstract virtual bool Read(T& result);
    public abstract virtual int ValidateAndGetLength(object value, LengthCache& lengthCache, NpgsqlParameter parameter);
    public abstract virtual void PrepareWrite(object value, WriteBuffer buf, LengthCache lengthCache, NpgsqlParameter parameter);
    public abstract virtual bool Write(DirectBuffer& directBuf);
    [RewriteAsyncAttribute("True")]
internal virtual T2 ReadFully(ReadBuffer buf, int len, FieldDescription fieldDescription);
    public sealed virtual bool ReadAsObject(Object& result);
}
internal class Npgsql.ChunkingTypeHandlerContracts`1 : ChunkingTypeHandler`1<T> {
    internal ChunkingTypeHandlerContracts`1(IBackendType backendType);
    public virtual void PrepareRead(ReadBuffer buf, int len, FieldDescription fieldDescription);
    public virtual bool Read(T& result);
    public virtual int ValidateAndGetLength(object value, LengthCache& lengthCache, NpgsqlParameter parameter);
    public virtual void PrepareWrite(object value, WriteBuffer buf, LengthCache lengthCache, NpgsqlParameter parameter);
    public virtual bool Write(DirectBuffer& directBuf);
}
internal enum Npgsql.CommandState : Enum {
    public int value__;
    public static CommandState Idle;
    public static CommandState InProgress;
    public static CommandState Disposed;
}
internal class Npgsql.ConnectorPool : object {
    internal NpgsqlConnectionStringBuilder ConnectionString;
    internal IdleConnectorList Idle;
    private int _max;
    [CompilerGeneratedAttribute]
private int <Min>k__BackingField;
    [CompilerGeneratedAttribute]
private int <Busy>k__BackingField;
    private Queue`1<WaitingOpenAttempt> Waiting;
    private int _clearCounter;
    private Timer _pruningTimer;
    private TimeSpan _pruningInterval;
    private static NpgsqlLogger Log;
    internal int Min { get; }
    internal int Busy { get; private set; }
    internal ConnectorPool(NpgsqlConnectionStringBuilder csb);
    private static ConnectorPool();
    [AsyncStateMachineAttribute("Npgsql.ConnectorPool/<AllocateAsync>d__0")]
internal Task`1<NpgsqlConnector> AllocateAsync(NpgsqlConnection conn, NpgsqlTimeout timeout, CancellationToken cancellationToken);
    [CompilerGeneratedAttribute]
internal int get_Min();
    [CompilerGeneratedAttribute]
internal int get_Busy();
    [CompilerGeneratedAttribute]
private void set_Busy(int value);
    [RewriteAsyncAttribute("False")]
internal NpgsqlConnector Allocate(NpgsqlConnection conn, NpgsqlTimeout timeout);
    internal void Release(NpgsqlConnector connector);
    private void EnsureMinPoolSize(NpgsqlConnection conn);
    private void EnsurePruningTimerState();
    internal void PruneIdleConnectors(object state);
    internal void Clear();
    private void EnqueueWaitingOpenAttempt(TaskCompletionSource`1<NpgsqlConnector> tcs);
    private Task EnqueueWaitingOpenAttemptAsync(TaskCompletionSource`1<NpgsqlConnector> tcs, CancellationToken cancellationToken);
    private void WaitForTask(Task task, TimeSpan timeout);
    [AsyncStateMachineAttribute("Npgsql.ConnectorPool/<WaitForTaskAsync>d__27")]
private Task WaitForTaskAsync(Task task, TimeSpan timeout, CancellationToken cancellationToken);
    public virtual string ToString();
    private void ObjectInvariants();
}
internal enum Npgsql.ConnectorState : Enum {
    public int value__;
    public static ConnectorState Closed;
    public static ConnectorState Connecting;
    public static ConnectorState Ready;
    public static ConnectorState Executing;
    public static ConnectorState Fetching;
    public static ConnectorState Waiting;
    public static ConnectorState Broken;
    public static ConnectorState Copy;
}
internal class Npgsql.CultureSetter : object {
    private CultureInfo _oldCulture;
    internal CultureSetter(CultureInfo newCulture);
    public sealed virtual void Dispose();
}
internal enum Npgsql.DataRowLoadingMode : Enum {
    public int value__;
    public static DataRowLoadingMode NonSequential;
    public static DataRowLoadingMode Sequential;
    public static DataRowLoadingMode Skip;
}
internal class Npgsql.DirectBuffer : ValueType {
    public Byte[] Buffer;
    public int Offset;
    public int Size;
}
[ExtensionAttribute]
internal static class Npgsql.EnumerableExtensions : object {
    [ExtensionAttribute]
internal static string Join(IEnumerable`1<string> values, string separator);
}
internal enum Npgsql.FormatCode : Enum {
    public short value__;
    public static FormatCode Text;
    public static FormatCode Binary;
}
internal abstract class Npgsql.FrontendMessage : object {
    internal abstract virtual bool Write(WriteBuffer buf);
}
internal class Npgsql.FrontendMessages.BindMessage : FrontendMessage {
    [CompilerGeneratedAttribute]
private string <Portal>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Statement>k__BackingField;
    [CompilerGeneratedAttribute]
private List`1<NpgsqlParameter> <InputParameters>k__BackingField;
    [CompilerGeneratedAttribute]
private List`1<FormatCode> <ResultFormatCodes>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <AllResultTypesAreUnknown>k__BackingField;
    [CompilerGeneratedAttribute]
private Boolean[] <UnknownResultTypeList>k__BackingField;
    private State _state;
    private int _paramIndex;
    private int _formatCodeListLength;
    private bool _wroteParamLen;
    private static byte Code;
    private string Portal { get; private set; }
    private string Statement { get; private set; }
    private List`1<NpgsqlParameter> InputParameters { get; private set; }
    internal List`1<FormatCode> ResultFormatCodes { get; private set; }
    internal bool AllResultTypesAreUnknown { get; internal set; }
    internal Boolean[] UnknownResultTypeList { get; internal set; }
    [CompilerGeneratedAttribute]
private string get_Portal();
    [CompilerGeneratedAttribute]
private void set_Portal(string value);
    [CompilerGeneratedAttribute]
private string get_Statement();
    [CompilerGeneratedAttribute]
private void set_Statement(string value);
    [CompilerGeneratedAttribute]
private List`1<NpgsqlParameter> get_InputParameters();
    [CompilerGeneratedAttribute]
private void set_InputParameters(List`1<NpgsqlParameter> value);
    [CompilerGeneratedAttribute]
internal List`1<FormatCode> get_ResultFormatCodes();
    [CompilerGeneratedAttribute]
private void set_ResultFormatCodes(List`1<FormatCode> value);
    [CompilerGeneratedAttribute]
internal bool get_AllResultTypesAreUnknown();
    [CompilerGeneratedAttribute]
internal void set_AllResultTypesAreUnknown(bool value);
    [CompilerGeneratedAttribute]
internal Boolean[] get_UnknownResultTypeList();
    [CompilerGeneratedAttribute]
internal void set_UnknownResultTypeList(Boolean[] value);
    internal BindMessage Populate(List`1<NpgsqlParameter> inputParameters, string portal, string statement);
    internal virtual bool Write(WriteBuffer buf);
    internal bool Write(WriteBuffer buf, DirectBuffer& directBuf);
    private bool WriteParameters(WriteBuffer buf, DirectBuffer& directBuf);
    public virtual string ToString();
}
internal class Npgsql.FrontendMessages.CancelRequestMessage : SimpleFrontendMessage {
    [CompilerGeneratedAttribute]
private int <BackendProcessId>k__BackingField;
    [CompilerGeneratedAttribute]
private int <BackendSecretKey>k__BackingField;
    private static int CancelRequestCode;
    internal int BackendProcessId { get; }
    internal int BackendSecretKey { get; }
    internal int Length { get; }
    internal CancelRequestMessage(int backendProcessId, int backendSecretKey);
    [CompilerGeneratedAttribute]
internal int get_BackendProcessId();
    [CompilerGeneratedAttribute]
internal int get_BackendSecretKey();
    internal virtual int get_Length();
    internal virtual void WriteFully(WriteBuffer buf);
    public virtual string ToString();
}
internal class Npgsql.FrontendMessages.CloseMessage : SimpleFrontendMessage {
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    [CompilerGeneratedAttribute]
private StatementOrPortal <StatementOrPortal>k__BackingField;
    private static byte Code;
    internal string Name { get; }
    internal StatementOrPortal StatementOrPortal { get; }
    internal int Length { get; }
    internal CloseMessage(StatementOrPortal type, string name);
    [CompilerGeneratedAttribute]
internal string get_Name();
    [CompilerGeneratedAttribute]
internal StatementOrPortal get_StatementOrPortal();
    internal virtual int get_Length();
    internal virtual void WriteFully(WriteBuffer buf);
    public virtual string ToString();
}
internal class Npgsql.FrontendMessages.CopyFailMessage : SimpleFrontendMessage {
    private static byte Code;
    private string _errorMessage;
    private int _errorMessageLen;
    internal int Length { get; }
    internal CopyFailMessage(string errorMessage);
    internal virtual int get_Length();
    internal virtual void WriteFully(WriteBuffer buf);
    public virtual string ToString();
}
internal class Npgsql.FrontendMessages.DescribeMessage : SimpleFrontendMessage {
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    [CompilerGeneratedAttribute]
private StatementOrPortal <StatementOrPortal>k__BackingField;
    private static byte Code;
    internal string Name { get; internal set; }
    internal StatementOrPortal StatementOrPortal { get; internal set; }
    internal int Length { get; }
    [CompilerGeneratedAttribute]
internal string get_Name();
    [CompilerGeneratedAttribute]
internal void set_Name(string value);
    [CompilerGeneratedAttribute]
internal StatementOrPortal get_StatementOrPortal();
    [CompilerGeneratedAttribute]
internal void set_StatementOrPortal(StatementOrPortal value);
    internal DescribeMessage Populate(StatementOrPortal type, string name);
    internal virtual int get_Length();
    internal virtual void WriteFully(WriteBuffer buf);
    public virtual string ToString();
}
internal class Npgsql.FrontendMessages.ExecuteMessage : SimpleFrontendMessage {
    [CompilerGeneratedAttribute]
private string <Portal>k__BackingField;
    [CompilerGeneratedAttribute]
private int <MaxRows>k__BackingField;
    private static byte Code;
    internal string Portal { get; private set; }
    internal int MaxRows { get; private set; }
    internal int Length { get; }
    [CompilerGeneratedAttribute]
internal string get_Portal();
    [CompilerGeneratedAttribute]
private void set_Portal(string value);
    [CompilerGeneratedAttribute]
internal int get_MaxRows();
    [CompilerGeneratedAttribute]
private void set_MaxRows(int value);
    internal ExecuteMessage Populate(string portal, int maxRows);
    internal ExecuteMessage Populate(int maxRows);
    internal virtual int get_Length();
    internal virtual void WriteFully(WriteBuffer buf);
    public virtual string ToString();
}
internal class Npgsql.FrontendMessages.FlushMessage : SimpleFrontendMessage {
    private static byte Code;
    internal static FlushMessage Instance;
    internal int Length { get; }
    private static FlushMessage();
    internal virtual int get_Length();
    internal virtual void WriteFully(WriteBuffer buf);
    public virtual string ToString();
}
internal class Npgsql.FrontendMessages.ParseMessage : FrontendMessage {
    [CompilerGeneratedAttribute]
private string <Query>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Statement>k__BackingField;
    [CompilerGeneratedAttribute]
private List`1<UInt32> <ParameterTypeOIDs>k__BackingField;
    private Encoding _encoding;
    private Byte[] _statementNameBytes;
    private int _queryLen;
    private Char[] _queryChars;
    private int _charPos;
    private int _parameterTypePos;
    private State _state;
    private static byte Code;
    private string Query { get; private set; }
    private string Statement { get; private set; }
    private List`1<UInt32> ParameterTypeOIDs { get; }
    internal ParseMessage(Encoding encoding);
    [CompilerGeneratedAttribute]
private string get_Query();
    [CompilerGeneratedAttribute]
private void set_Query(string value);
    [CompilerGeneratedAttribute]
private string get_Statement();
    [CompilerGeneratedAttribute]
private void set_Statement(string value);
    [CompilerGeneratedAttribute]
private List`1<UInt32> get_ParameterTypeOIDs();
    internal ParseMessage Populate(NpgsqlStatement statement, TypeHandlerRegistry typeHandlerRegistry);
    internal virtual bool Write(WriteBuffer buf);
    public virtual string ToString();
}
internal class Npgsql.FrontendMessages.PasswordMessage : SimpleFrontendMessage {
    [CompilerGeneratedAttribute]
private Byte[] <Password>k__BackingField;
    private static byte Code;
    internal Byte[] Password { get; internal set; }
    internal int Length { get; }
    internal PasswordMessage(Byte[] password);
    [CompilerGeneratedAttribute]
internal Byte[] get_Password();
    [CompilerGeneratedAttribute]
internal void set_Password(Byte[] value);
    internal static PasswordMessage CreateClearText(string password);
    internal static PasswordMessage CreateMD5(string password, string username, Byte[] serverSalt);
    internal virtual int get_Length();
    internal virtual void WriteFully(WriteBuffer buf);
    public virtual string ToString();
}
internal class Npgsql.FrontendMessages.PregeneratedMessage : SimpleFrontendMessage {
    private Byte[] _data;
    private string _description;
    private static WriteBuffer _tempBuf;
    private static QueryMessage _tempQuery;
    internal static PregeneratedMessage BeginTrans;
    internal static PregeneratedMessage SetTransRepeatableRead;
    internal static PregeneratedMessage SetTransSerializable;
    internal static PregeneratedMessage SetTransReadCommitted;
    internal static PregeneratedMessage SetTransReadUncommitted;
    internal static PregeneratedMessage CommitTransaction;
    internal static PregeneratedMessage RollbackTransaction;
    internal static PregeneratedMessage DiscardAll;
    internal static PregeneratedMessage UnlistenAll;
    internal static PregeneratedMessage KeepAlive;
    internal int Length { get; }
    internal PregeneratedMessage(Byte[] data, string description);
    private static PregeneratedMessage();
    internal virtual int get_Length();
    internal virtual void WriteFully(WriteBuffer buf);
    public virtual string ToString();
    private static PregeneratedMessage BuildQuery(string query);
}
internal class Npgsql.FrontendMessages.QueryMessage : FrontendMessage {
    private Encoding _encoding;
    private string _query;
    private Char[] _queryChars;
    private int _charPos;
    private static byte Code;
    internal QueryMessage(Encoding encoding);
    internal QueryMessage Populate(string query);
    internal virtual bool Write(WriteBuffer buf);
    public virtual string ToString();
}
internal class Npgsql.FrontendMessages.SSLRequestMessage : SimpleFrontendMessage {
    internal static SSLRequestMessage Instance;
    internal int Length { get; }
    private static SSLRequestMessage();
    internal virtual int get_Length();
    internal virtual void WriteFully(WriteBuffer buf);
    public virtual string ToString();
}
[DefaultMemberAttribute("Item")]
internal class Npgsql.FrontendMessages.StartupMessage : SimpleFrontendMessage {
    private Dictionary`2<Byte[], Byte[]> _parameters;
    private int _length;
    private static int ProtocolVersion3;
    unknown string Item {internal set; }
    internal int Length { get; }
    internal void set_Item(string key, string value);
    internal virtual int get_Length();
    internal virtual void WriteFully(WriteBuffer buf);
}
internal class Npgsql.FrontendMessages.SyncMessage : SimpleFrontendMessage {
    private static byte Code;
    internal static SyncMessage Instance;
    internal int Length { get; }
    private static SyncMessage();
    internal virtual int get_Length();
    internal virtual void WriteFully(WriteBuffer buf);
    public virtual string ToString();
}
internal class Npgsql.FrontendMessages.TerminateMessage : SimpleFrontendMessage {
    private static byte Code;
    internal static TerminateMessage Instance;
    internal int Length { get; }
    private static TerminateMessage();
    internal virtual int get_Length();
    internal virtual void WriteFully(WriteBuffer buf);
    public virtual string ToString();
}
internal interface Npgsql.IBackendMessage {
    public BackendMessageCode Code { get; }
    public abstract virtual BackendMessageCode get_Code();
}
internal interface Npgsql.IBackendType {
    public string Namespace { get; }
    public string Name { get; }
    public UInt32 OID { get; }
    public Nullable`1<NpgsqlDbType> NpgsqlDbType { get; }
    public string FullName { get; }
    public string DisplayName { get; }
    public abstract virtual string get_Namespace();
    public abstract virtual string get_Name();
    public abstract virtual UInt32 get_OID();
    public abstract virtual Nullable`1<NpgsqlDbType> get_NpgsqlDbType();
    public abstract virtual string get_FullName();
    public abstract virtual string get_DisplayName();
}
internal interface Npgsql.ICancelable {
    public abstract virtual void Cancel();
}
internal interface Npgsql.IChunkingTypeHandler {
    public abstract virtual void PrepareRead(ReadBuffer buf, int len, FieldDescription fieldDescription);
    public abstract virtual int ValidateAndGetLength(object value, LengthCache& lengthCache, NpgsqlParameter parameter);
    public abstract virtual void PrepareWrite(object value, WriteBuffer buf, LengthCache lengthCache, NpgsqlParameter parameter);
    public abstract virtual bool Write(DirectBuffer& directBuf);
    public abstract virtual bool ReadAsObject(Object& result);
}
internal interface Npgsql.IChunkingTypeHandler`1 {
    public abstract virtual bool Read(T& result);
}
internal class Npgsql.IdleConnectorList : LinkedList`1<NpgsqlConnector> {
    internal void Push(NpgsqlConnector connector);
    internal NpgsqlConnector Pop();
}
public interface Npgsql.INpgsqlNameTranslator {
    public abstract virtual string TranslateTypeName(string clrName);
    public abstract virtual string TranslateMemberName(string clrName);
}
internal interface Npgsql.INpgsqlResourceManager {
    public abstract virtual void Enlist(INpgsqlTransactionCallbacks transactionCallbacks, Byte[] txToken);
    public abstract virtual Byte[] Promote(INpgsqlTransactionCallbacks transactionCallbacks);
    public abstract virtual void CommitWork(string txName);
    public abstract virtual void RollbackWork(string txName);
}
internal interface Npgsql.INpgsqlTransactionCallbacks {
    public abstract virtual string GetName();
    public abstract virtual void PrepareTransaction();
    public abstract virtual void CommitTransaction();
    public abstract virtual void RollbackTransaction();
}
internal interface Npgsql.ISimpleTypeHandler {
    public abstract virtual int ValidateAndGetLength(object value, NpgsqlParameter parameter);
    public abstract virtual void Write(object value, WriteBuffer buf, NpgsqlParameter parameter);
    public abstract virtual object ReadAsObject(ReadBuffer buf, int len, FieldDescription fieldDescription);
}
internal interface Npgsql.ISimpleTypeHandler`1 {
    public abstract virtual T Read(ReadBuffer buf, int len, FieldDescription fieldDescription);
}
internal interface Npgsql.ITextReaderHandler {
    public abstract virtual TextReader GetTextReader(Stream stream);
}
internal interface Npgsql.ITypeHandler`1 {
}
internal interface Npgsql.ITypeHandlerWithPsv {
}
internal class Npgsql.LengthCache : object {
    internal bool IsPopulated;
    internal int Position;
    internal List`1<int> Lengths;
    internal LengthCache(int capacity);
    internal int Set(int len);
    internal int Get();
    internal int GetLast();
    internal void Rewind();
    internal void Clear();
}
internal class Npgsql.Logging.ConsoleLogger : NpgsqlLogger {
    private NpgsqlLogLevel _minLevel;
    private bool _printLevel;
    private bool _printConnectorId;
    internal ConsoleLogger(NpgsqlLogLevel minLevel, bool printLevel, bool printConnectorId);
    public virtual bool IsEnabled(NpgsqlLogLevel level);
    public virtual void Log(NpgsqlLogLevel level, int connectorId, string msg, Exception exception);
}
public class Npgsql.Logging.ConsoleLoggingProvider : object {
    private NpgsqlLogLevel _minLevel;
    private bool _printLevel;
    private bool _printConnectorId;
    public ConsoleLoggingProvider(NpgsqlLogLevel minLevel, bool printLevel, bool printConnectorId);
    public sealed virtual NpgsqlLogger CreateLogger(string name);
}
public interface Npgsql.Logging.INpgsqlLoggingProvider {
    public abstract virtual NpgsqlLogger CreateLogger(string name);
}
internal class Npgsql.Logging.NoOpLogger : NpgsqlLogger {
    internal static NoOpLogger Instance;
    private static NoOpLogger();
    public virtual bool IsEnabled(NpgsqlLogLevel level);
    public virtual void Log(NpgsqlLogLevel level, int connectorId, string msg, Exception exception);
}
internal class Npgsql.Logging.NoOpLoggingProvider : object {
    public sealed virtual NpgsqlLogger CreateLogger(string name);
}
public abstract class Npgsql.Logging.NpgsqlLogger : object {
    public abstract virtual bool IsEnabled(NpgsqlLogLevel level);
    public abstract virtual void Log(NpgsqlLogLevel level, int connectorId, string msg, Exception exception);
    internal void Trace(string msg, int connectionId);
    internal void Debug(string msg, int connectionId);
    internal void Info(string msg, int connectionId);
    internal void Warn(string msg, int connectionId);
    internal void Error(string msg, int connectionId);
    internal void Fatal(string msg, int connectionId);
    internal void Trace(string msg, Exception ex, int connectionId);
    internal void Debug(string msg, Exception ex, int connectionId);
    internal void Info(string msg, Exception ex, int connectionId);
    internal void Warn(string msg, Exception ex, int connectionId);
    internal void Error(string msg, Exception ex, int connectionId);
    internal void Fatal(string msg, Exception ex, int connectionId);
}
public enum Npgsql.Logging.NpgsqlLogLevel : Enum {
    public int value__;
    public static NpgsqlLogLevel Trace;
    public static NpgsqlLogLevel Debug;
    public static NpgsqlLogLevel Info;
    public static NpgsqlLogLevel Warn;
    public static NpgsqlLogLevel Error;
    public static NpgsqlLogLevel Fatal;
}
public static class Npgsql.Logging.NpgsqlLogManager : object {
    [CompilerGeneratedAttribute]
private static bool <IsParameterLoggingEnabled>k__BackingField;
    private static INpgsqlLoggingProvider _provider;
    private static bool _providerRetrieved;
    public static INpgsqlLoggingProvider Provider { get; public set; }
    public static bool IsParameterLoggingEnabled { get; public set; }
    private static NpgsqlLogManager();
    public static INpgsqlLoggingProvider get_Provider();
    public static void set_Provider(INpgsqlLoggingProvider value);
    [CompilerGeneratedAttribute]
public static bool get_IsParameterLoggingEnabled();
    [CompilerGeneratedAttribute]
public static void set_IsParameterLoggingEnabled(bool value);
    internal static NpgsqlLogger CreateLogger(string name);
    internal static NpgsqlLogger GetCurrentClassLogger();
    private static string GetClassFullName();
}
public class Npgsql.NameTranslation.NpgsqlNullNameTranslator : object {
    public sealed virtual string TranslateTypeName(string clrName);
    public sealed virtual string TranslateMemberName(string clrName);
}
public class Npgsql.NoticeEventHandler : MulticastDelegate {
    public NoticeEventHandler(object object, IntPtr method);
    public virtual void Invoke(object sender, NpgsqlNoticeEventArgs e);
    public virtual IAsyncResult BeginInvoke(object sender, NpgsqlNoticeEventArgs e, AsyncCallback callback, object object);
    public virtual void EndInvoke(IAsyncResult result);
}
public class Npgsql.NotificationEventHandler : MulticastDelegate {
    public NotificationEventHandler(object object, IntPtr method);
    public virtual void Invoke(object sender, NpgsqlNotificationEventArgs e);
    public virtual IAsyncResult BeginInvoke(object sender, NpgsqlNotificationEventArgs e, AsyncCallback callback, object object);
    public virtual void EndInvoke(IAsyncResult result);
}
public class Npgsql.NpgsqlBinaryExporter : object {
    private NpgsqlConnector _connector;
    private ReadBuffer _buf;
    private TypeHandlerRegistry _registry;
    private bool _isConsumed;
    private bool _isDisposed;
    private int _leftToReadInDataMsg;
    private int _columnLen;
    private short _column;
    [CompilerGeneratedAttribute]
private int <NumColumns>k__BackingField;
    internal int NumColumns { get; }
    public bool IsNull { get; }
    internal NpgsqlBinaryExporter(NpgsqlConnector connector, string copyToCommand);
    [CompilerGeneratedAttribute]
internal int get_NumColumns();
    private void ReadHeader();
    public int StartRow();
    public T Read();
    public T Read(NpgsqlDbType type);
    private T DoRead(TypeHandler handler);
    public bool get_IsNull();
    public void Skip();
    private void ReadColumnLenIfNeeded();
    private void CheckDisposed();
    public sealed virtual void Cancel();
    public sealed virtual void Dispose();
    private void Cleanup();
    [CompilerGeneratedAttribute]
private bool <ReadHeader>b__12_0(byte t);
}
public class Npgsql.NpgsqlBinaryImporter : object {
    private NpgsqlConnector _connector;
    private WriteBuffer _buf;
    private TypeHandlerRegistry _registry;
    private LengthCache _lengthCache;
    private bool _isDisposed;
    private bool _writingDataMsg;
    private short _column;
    [CompilerGeneratedAttribute]
private int <NumColumns>k__BackingField;
    private NpgsqlParameter _dummyParam;
    internal int NumColumns { get; }
    internal NpgsqlBinaryImporter(NpgsqlConnector connector, string copyFromCommand);
    [CompilerGeneratedAttribute]
internal int get_NumColumns();
    private void WriteHeader();
    public void StartRow();
    public void Write(T value);
    public void Write(T value, NpgsqlDbType type);
    private void DoWrite(TypeHandler handler, T value);
    public void WriteNull();
    public void WriteRow(Object[] values);
    private void FlushAndStartDataMessage();
    private void Flush();
    private void EnsureDataMessage();
    public sealed virtual void Cancel();
    public sealed virtual void Dispose();
    [PublicAPIAttribute]
public void Close();
    private void Cleanup();
    private void WriteTrailer();
    private void CheckDisposed();
    private void ObjectInvariants();
}
[DesignerCategoryAttribute("")]
public class Npgsql.NpgsqlCommand : DbCommand {
    private NpgsqlConnection _connection;
    private NpgsqlConnector _connector;
    private NpgsqlTransaction _transaction;
    private string _commandText;
    private Nullable`1<int> _timeout;
    private NpgsqlParameterCollection _parameters;
    private List`1<NpgsqlStatement> _statements;
    private int _readStatementIndex;
    private int _writeStatementIndex;
    internal Task RemainingSendTask;
    private UpdateRowSource _updateRowSource;
    private bool _isPrepared;
    private int _prepareConnectionOpenId;
    private static SingleThreadSynchronizationContext SingleThreadSynchronizationContext;
    private static NpgsqlLogger Log;
    internal static int DefaultTimeout;
    [CompilerGeneratedAttribute]
private CommandType <CommandType>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <DesignTimeVisible>k__BackingField;
    private bool _allResultTypesAreUnknown;
    private Boolean[] _unknownResultTypeList;
    [CompilerGeneratedAttribute]
private Type[] <ObjectResultTypes>k__BackingField;
    private int _state;
    private SendState _sendState;
    public IReadOnlyList`1<NpgsqlStatement> Statements { get; }
    [DefaultValueAttribute("")]
[CategoryAttribute("Data")]
public string CommandText { get; public set; }
    [DefaultValueAttribute("30")]
public int CommandTimeout { get; public set; }
    [DefaultValueAttribute("Mono.Cecil.CustomAttributeArgument")]
[CategoryAttribute("Data")]
public CommandType CommandType { get; public set; }
    protected DbConnection DbConnection { get; protected set; }
    [DefaultValueAttribute("")]
[CategoryAttribute("Behavior")]
public NpgsqlConnection Connection { get; public set; }
    public bool DesignTimeVisible { get; public set; }
    [CategoryAttribute("Behavior")]
[DefaultValueAttribute("Mono.Cecil.CustomAttributeArgument")]
public UpdateRowSource UpdatedRowSource { get; public set; }
    public bool IsPrepared { get; private set; }
    private bool AllResultTypesAreUnknown { get; public set; }
    private Boolean[] UnknownResultTypeList { get; public set; }
    internal Type[] ObjectResultTypes { get; internal set; }
    private CommandState State { get; internal set; }
    protected DbParameterCollection DbParameterCollection { get; }
    public NpgsqlParameterCollection Parameters { get; }
    protected DbTransaction DbTransaction { get; protected set; }
    public NpgsqlTransaction Transaction { get; public set; }
    public NpgsqlCommand(string cmdText);
    public NpgsqlCommand(string cmdText, NpgsqlConnection connection);
    public NpgsqlCommand(string cmdText, NpgsqlConnection connection, NpgsqlTransaction transaction);
    private static NpgsqlCommand();
    [AsyncStateMachineAttribute("Npgsql.NpgsqlCommand/<ExecuteAsync>d__0")]
private Task`1<NpgsqlDataReader> ExecuteAsync(CancellationToken cancellationToken, CommandBehavior behavior);
    [AsyncStateMachineAttribute("Npgsql.NpgsqlCommand/<SendAsync>d__1")]
private Task SendAsync(PopulateMethod populateMethod, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Npgsql.NpgsqlCommand/<ExecuteNonQueryInternalAsync>d__2")]
private Task`1<int> ExecuteNonQueryInternalAsync(CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Npgsql.NpgsqlCommand/<ExecuteScalarInternalAsync>d__3")]
private Task`1<object> ExecuteScalarInternalAsync(CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Npgsql.NpgsqlCommand/<ExecuteDbDataReaderInternalAsync>d__4")]
private Task`1<NpgsqlDataReader> ExecuteDbDataReaderInternalAsync(CommandBehavior behavior, CancellationToken cancellationToken);
    public IReadOnlyList`1<NpgsqlStatement> get_Statements();
    private void Init(string cmdText);
    public virtual string get_CommandText();
    public virtual void set_CommandText(string value);
    public virtual int get_CommandTimeout();
    public virtual void set_CommandTimeout(int value);
    [CompilerGeneratedAttribute]
public virtual CommandType get_CommandType();
    [CompilerGeneratedAttribute]
public virtual void set_CommandType(CommandType value);
    protected virtual DbConnection get_DbConnection();
    protected virtual void set_DbConnection(DbConnection value);
    public NpgsqlConnection get_Connection();
    public void set_Connection(NpgsqlConnection value);
    [CompilerGeneratedAttribute]
public virtual bool get_DesignTimeVisible();
    [CompilerGeneratedAttribute]
public virtual void set_DesignTimeVisible(bool value);
    public virtual UpdateRowSource get_UpdatedRowSource();
    public virtual void set_UpdatedRowSource(UpdateRowSource value);
    public bool get_IsPrepared();
    private void set_IsPrepared(bool value);
    private bool get_AllResultTypesAreUnknown();
    public void set_AllResultTypesAreUnknown(bool value);
    private Boolean[] get_UnknownResultTypeList();
    public void set_UnknownResultTypeList(Boolean[] value);
    [CompilerGeneratedAttribute]
internal Type[] get_ObjectResultTypes();
    [CompilerGeneratedAttribute]
internal void set_ObjectResultTypes(Type[] value);
    private CommandState get_State();
    internal void set_State(CommandState value);
    protected virtual DbParameter CreateDbParameter();
    public NpgsqlParameter CreateParameter();
    protected virtual DbParameterCollection get_DbParameterCollection();
    public NpgsqlParameterCollection get_Parameters();
    public virtual void Prepare();
    private void DeallocatePrepared();
    private void ProcessRawQuery();
    private void ValidateParameters();
    [RewriteAsyncAttribute("False")]
private NpgsqlDataReader Execute(CommandBehavior behavior);
    [RewriteAsyncAttribute("False")]
private void Send(PopulateMethod populateMethod);
    [AsyncStateMachineAttribute("Npgsql.NpgsqlCommand/<SendRemaining>d__84")]
private Task SendRemaining(PopulateMethod populateMethod, CancellationToken cancellationToken);
    private bool PopulateExecuteNonPrepared(DirectBuffer& directBuf);
    private bool PopulateExecutePrepared(DirectBuffer& directBuf);
    private bool PopulatePrepare(DirectBuffer& directBuf);
    private bool PopulateExecuteSchemaOnly(DirectBuffer& directBuf);
    private bool PopulateParseDescribe(bool isPreparing);
    private bool PopulateDeallocate(DirectBuffer& directBuf);
    public virtual int ExecuteNonQuery();
    [AsyncStateMachineAttribute("Npgsql.NpgsqlCommand/<ExecuteNonQueryAsync>d__92")]
public virtual Task`1<int> ExecuteNonQueryAsync(CancellationToken cancellationToken);
    [RewriteAsyncAttribute("False")]
private int ExecuteNonQueryInternal();
    [CanBeNullAttribute]
public virtual object ExecuteScalar();
    [AsyncStateMachineAttribute("Npgsql.NpgsqlCommand/<ExecuteScalarAsync>d__95")]
public virtual Task`1<object> ExecuteScalarAsync(CancellationToken cancellationToken);
    [RewriteAsyncAttribute("False")]
[CanBeNullAttribute]
private object ExecuteScalarInternal();
    public NpgsqlDataReader ExecuteReader();
    public NpgsqlDataReader ExecuteReader(CommandBehavior behavior);
    [AsyncStateMachineAttribute("Npgsql.NpgsqlCommand/<ExecuteDbDataReaderAsync>d__99")]
protected virtual Task`1<DbDataReader> ExecuteDbDataReaderAsync(CommandBehavior behavior, CancellationToken cancellationToken);
    [NotNullAttribute]
protected virtual DbDataReader ExecuteDbDataReader(CommandBehavior behavior);
    [RewriteAsyncAttribute("False")]
private NpgsqlDataReader ExecuteDbDataReaderInternal(CommandBehavior behavior);
    protected virtual DbTransaction get_DbTransaction();
    protected virtual void set_DbTransaction(DbTransaction value);
    public NpgsqlTransaction get_Transaction();
    public void set_Transaction(NpgsqlTransaction value);
    public virtual void Cancel();
    protected virtual void Dispose(bool disposing);
    internal void FixupRowDescription(RowDescriptionMessage rowDescription, bool isFirst);
    private void LogCommand();
    private sealed virtual override object System.ICloneable.Clone();
    [PublicAPIAttribute]
public NpgsqlCommand Clone();
    private NpgsqlConnector CheckReadyAndGetConnector();
    private void ObjectInvariants();
}
[DesignerCategoryAttribute("")]
public class Npgsql.NpgsqlCommandBuilder : DbCommandBuilder {
    public string QuotePrefix { get; public set; }
    public string QuoteSuffix { get; public set; }
    public NpgsqlCommandBuilder(NpgsqlDataAdapter adapter);
    public virtual string get_QuotePrefix();
    public virtual void set_QuotePrefix(string value);
    public virtual string get_QuoteSuffix();
    public virtual void set_QuoteSuffix(string value);
    public static void DeriveParameters(NpgsqlCommand command);
    private static void DoDeriveParameters(NpgsqlCommand command);
    public NpgsqlCommand GetInsertCommand();
    public NpgsqlCommand GetInsertCommand(bool useColumnsForParameterNames);
    public NpgsqlCommand GetUpdateCommand();
    public NpgsqlCommand GetUpdateCommand(bool useColumnsForParameterNames);
    public NpgsqlCommand GetDeleteCommand();
    public NpgsqlCommand GetDeleteCommand(bool useColumnsForParameterNames);
    protected virtual void ApplyParameterInfo(DbParameter p, DataRow row, StatementType statementType, bool whereClause);
    protected virtual string GetParameterName(int parameterOrdinal);
    protected virtual string GetParameterName(string parameterName);
    protected virtual string GetParameterPlaceholder(int parameterOrdinal);
    protected virtual void SetRowUpdatingHandler(DbDataAdapter adapter);
    private void RowUpdatingHandler(object sender, NpgsqlRowUpdatingEventArgs e);
    public virtual string QuoteIdentifier(string unquotedIdentifier);
    public virtual string UnquoteIdentifier(string quotedIdentifier);
}
[DesignerCategoryAttribute("")]
public class Npgsql.NpgsqlConnection : DbConnection {
    private bool _disposed;
    private bool _fakingOpen;
    private bool _postponingClose;
    private bool _postponingDispose;
    private NpgsqlConnectionStringBuilder _settings;
    [CanBeNullAttribute]
private string _connectionString;
    [CompilerGeneratedAttribute]
private NpgsqlConnector <Connector>k__BackingField;
    [CompilerGeneratedAttribute]
private int <OpenCounter>k__BackingField;
    private bool _wasBroken;
    private bool _alreadyOpened;
    private static ConcurrentDictionary`2<string, NpgsqlConnectionStringBuilder> CsbCache;
    private NpgsqlPromotableSinglePhaseNotification _promotable;
    public static int DefaultPort;
    internal static int TimeoutLimit;
    private static NpgsqlLogger Log;
    [CompilerGeneratedAttribute]
private NoticeEventHandler Notice;
    private NoticeEventHandler _noticeDelegate;
    [CompilerGeneratedAttribute]
private NotificationEventHandler Notification;
    private NotificationEventHandler _notificationDelegate;
    [CompilerGeneratedAttribute]
private ProvideClientCertificatesCallback <ProvideClientCertificatesCallback>k__BackingField;
    [CompilerGeneratedAttribute]
private RemoteCertificateValidationCallback <UserCertificateValidationCallback>k__BackingField;
    internal NpgsqlConnector Connector { get; internal set; }
    internal int OpenCounter { get; private set; }
    private NpgsqlPromotableSinglePhaseNotification Promotable { get; }
    public string ConnectionString { get; public set; }
    internal NpgsqlConnectionStringBuilder Settings { get; private set; }
    [BrowsableAttribute("True")]
[PublicAPIAttribute]
public string Host { get; }
    [BrowsableAttribute("True")]
[PublicAPIAttribute]
public int Port { get; }
    [PublicAPIAttribute]
public bool UseSslStream { get; }
    public int ConnectionTimeout { get; }
    public int CommandTimeout { get; }
    public string Database { get; }
    public string DataSource { get; }
    [PublicAPIAttribute]
public bool IntegratedSecurity { get; }
    [PublicAPIAttribute]
public string UserName { get; }
    internal string Password { get; }
    internal int MinPoolSize { get; }
    internal int MaxPoolSize { get; }
    internal int Timeout { get; }
    internal int BufferSize { get; }
    internal string EntityTemplateDatabase { get; }
    internal string EntityAdminDatabase { get; }
    [BrowsableAttribute("False")]
public ConnectionState FullState { get; }
    [BrowsableAttribute("False")]
public ConnectionState State { get; }
    internal bool IsSecure { get; }
    public ProvideClientCertificatesCallback ProvideClientCertificatesCallback { get; public set; }
    public RemoteCertificateValidationCallback UserCertificateValidationCallback { get; public set; }
    [BrowsableAttribute("False")]
public Version PostgreSqlVersion { get; }
    public string ServerVersion { get; }
    [BrowsableAttribute("False")]
public int ProcessID { get; }
    [BrowsableAttribute("False")]
[PublicAPIAttribute]
public bool UseConformantStrings { get; }
    [BrowsableAttribute("False")]
[PublicAPIAttribute]
public bool SupportsEStringPrefix { get; }
    protected DbProviderFactory DbProviderFactory { get; }
    public NpgsqlConnection(NpgsqlConnectionStringBuilder builder);
    public NpgsqlConnection(string connectionString);
    private static NpgsqlConnection();
    [AsyncStateMachineAttribute("Npgsql.NpgsqlConnection/<OpenInternalAsync>d__0")]
private Task OpenInternalAsync(CancellationToken cancellationToken);
    [CompilerGeneratedAttribute]
internal NpgsqlConnector get_Connector();
    [CompilerGeneratedAttribute]
internal void set_Connector(NpgsqlConnector value);
    [CompilerGeneratedAttribute]
internal int get_OpenCounter();
    [CompilerGeneratedAttribute]
private void set_OpenCounter(int value);
    private NpgsqlPromotableSinglePhaseNotification get_Promotable();
    private void Init();
    public virtual void Open();
    public virtual Task OpenAsync(CancellationToken cancellationToken);
    [RewriteAsyncAttribute("False")]
private void OpenInternal();
    public virtual string get_ConnectionString();
    public virtual void set_ConnectionString(string value);
    internal NpgsqlConnectionStringBuilder get_Settings();
    private void set_Settings(NpgsqlConnectionStringBuilder value);
    public string get_Host();
    public int get_Port();
    public bool get_UseSslStream();
    public virtual int get_ConnectionTimeout();
    public int get_CommandTimeout();
    public virtual string get_Database();
    public virtual string get_DataSource();
    public bool get_IntegratedSecurity();
    public string get_UserName();
    internal string get_Password();
    internal int get_MinPoolSize();
    internal int get_MaxPoolSize();
    internal int get_Timeout();
    internal int get_BufferSize();
    internal string get_EntityTemplateDatabase();
    internal string get_EntityAdminDatabase();
    public ConnectionState get_FullState();
    public virtual ConnectionState get_State();
    protected virtual DbCommand CreateDbCommand();
    public NpgsqlCommand CreateCommand();
    protected virtual DbTransaction BeginDbTransaction(IsolationLevel isolationLevel);
    public NpgsqlTransaction BeginTransaction();
    public NpgsqlTransaction BeginTransaction(IsolationLevel level);
    internal void PromotableLocalTransactionEnded();
    public virtual void EnlistTransaction(Transaction transaction);
    public virtual void Close();
    internal void ReallyClose(bool wasBroken);
    private void CloseOngoingOperations();
    protected virtual void Dispose(bool disposing);
    [CompilerGeneratedAttribute]
public void add_Notice(NoticeEventHandler value);
    [CompilerGeneratedAttribute]
public void remove_Notice(NoticeEventHandler value);
    [CompilerGeneratedAttribute]
public void add_Notification(NotificationEventHandler value);
    [CompilerGeneratedAttribute]
public void remove_Notification(NotificationEventHandler value);
    private void OnNotice(object o, NpgsqlNoticeEventArgs e);
    private void OnNotification(object o, NpgsqlNotificationEventArgs e);
    internal bool get_IsSecure();
    [CompilerGeneratedAttribute]
public ProvideClientCertificatesCallback get_ProvideClientCertificatesCallback();
    [CompilerGeneratedAttribute]
public void set_ProvideClientCertificatesCallback(ProvideClientCertificatesCallback value);
    [CompilerGeneratedAttribute]
public RemoteCertificateValidationCallback get_UserCertificateValidationCallback();
    [CompilerGeneratedAttribute]
public void set_UserCertificateValidationCallback(RemoteCertificateValidationCallback value);
    public Version get_PostgreSqlVersion();
    public virtual string get_ServerVersion();
    public int get_ProcessID();
    public bool get_UseConformantStrings();
    public bool get_SupportsEStringPrefix();
    public NpgsqlBinaryImporter BeginBinaryImport(string copyFromCommand);
    public NpgsqlBinaryExporter BeginBinaryExport(string copyToCommand);
    public TextWriter BeginTextImport(string copyFromCommand);
    public TextReader BeginTextExport(string copyToCommand);
    public NpgsqlRawCopyStream BeginRawBinaryCopy(string copyCommand);
    [PublicAPIAttribute]
public void MapEnum(string pgName, INpgsqlNameTranslator nameTranslator);
    [PublicAPIAttribute]
public static void MapEnumGlobally(string pgName, INpgsqlNameTranslator nameTranslator);
    public static void UnmapEnumGlobally(string pgName, INpgsqlNameTranslator nameTranslator);
    public void MapComposite(string pgName, INpgsqlNameTranslator nameTranslator);
    public static void MapCompositeGlobally(string pgName, INpgsqlNameTranslator nameTranslator);
    public static void UnmapCompositeGlobally(string pgName, INpgsqlNameTranslator nameTranslator);
    public bool Wait(int timeout);
    public bool Wait(TimeSpan timeout);
    public void Wait();
    [AsyncStateMachineAttribute("Npgsql.NpgsqlConnection/<WaitAsync>d__128")]
public Task WaitAsync(CancellationToken cancellationToken);
    public Task WaitAsync();
    private void CheckConnectionOpen();
    private void CheckConnectionClosed();
    private void CheckNotDisposed();
    internal NpgsqlConnector CheckReadyAndGetConnector();
    public virtual DataTable GetSchema();
    public virtual DataTable GetSchema(string collectionName);
    public virtual DataTable GetSchema(string collectionName, String[] restrictions);
    private sealed virtual override object System.ICloneable.Clone();
    public NpgsqlConnection CloneWith(string connectionString);
    public virtual void ChangeDatabase(string dbName);
    protected virtual DbProviderFactory get_DbProviderFactory();
    public static void ClearPool(NpgsqlConnection connection);
    public static void ClearAllPools();
    public void ReloadTypes();
}
[DefaultMemberAttribute("Item")]
public class Npgsql.NpgsqlConnectionStringBuilder : DbConnectionStringBuilder {
    private static Dictionary`2<string, PropertyInfo> PropertiesByKeyword;
    private static Dictionary`2<string, string> PropertyNameToCanonicalKeyword;
    private static Dictionary`2<PropertyInfo, object> PropertyDefaults;
    private static String[] Empty;
    private string _host;
    private int _port;
    private string _database;
    private string _username;
    private string _password;
    private string _applicationName;
    private bool _enlist;
    private string _searchpath;
    private string _clientEncoding;
    private string _encoding;
    private SslMode _sslmode;
    private bool _trustServerCertificate;
    private bool _useSslStream;
    private bool _integratedSecurity;
    private string _kerberosServiceName;
    private bool _includeRealm;
    private bool _persistSecurityInfo;
    private bool _pooling;
    private int _minPoolSize;
    private int _maxPoolSize;
    private int _connectionIdleLifetime;
    private int _connectionPruningInterval;
    private int _timeout;
    private int _commandTimeout;
    private int _internalCommandTimeout;
    private string _entityTemplateDatabase;
    private string _entityAdminDatabase;
    private int _keepAlive;
    private int _bufferSize;
    private ServerCompatibilityMode _serverCompatibilityMode;
    private bool _convertInfinityDateTime;
    private object _connectionStringWithoutPasswordLocker;
    [CanBeNullAttribute]
private string _connectionStringWithoutPassword;
    public object Item { get; public set; }
    [CategoryAttribute("Connection")]
[DescriptionAttribute("The hostname or IP address of the PostgreSQL server to connect to.")]
[DisplayNameAttribute("Host")]
[NpgsqlConnectionStringPropertyAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[CanBeNullAttribute]
public string Host { get; public set; }
    [CategoryAttribute("Connection")]
[DescriptionAttribute("The TCP port of the PostgreSQL server.")]
[DisplayNameAttribute("Port")]
[NpgsqlConnectionStringPropertyAttribute]
[DefaultValueAttribute("5432")]
public int Port { get; public set; }
    [CategoryAttribute("Connection")]
[DescriptionAttribute("The PostgreSQL database to connect to.")]
[DisplayNameAttribute("Database")]
[NpgsqlConnectionStringPropertyAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public string Database { get; public set; }
    [CategoryAttribute("Connection")]
[DescriptionAttribute("The username to connect with. Not required if using IntegratedSecurity.")]
[DisplayNameAttribute("Username")]
[NpgsqlConnectionStringPropertyAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public string Username { get; public set; }
    [CategoryAttribute("Connection")]
[DescriptionAttribute("The password to connect with. Not required if using IntegratedSecurity.")]
[PasswordPropertyTextAttribute("True")]
[DisplayNameAttribute("Password")]
[NpgsqlConnectionStringPropertyAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public string Password { get; public set; }
    [CategoryAttribute("Connection")]
[DescriptionAttribute("The optional application name parameter to be sent to the backend during connection initiation")]
[DisplayNameAttribute("Application Name")]
[NpgsqlConnectionStringPropertyAttribute]
public string ApplicationName { get; public set; }
    [CategoryAttribute("Connection")]
[DescriptionAttribute("Whether to enlist in an ambient TransactionScope.")]
[DisplayNameAttribute("Enlist")]
[NpgsqlConnectionStringPropertyAttribute]
public bool Enlist { get; public set; }
    [CategoryAttribute("Connection")]
[DescriptionAttribute("Gets or sets the schema search path.")]
[DisplayNameAttribute("Search Path")]
[NpgsqlConnectionStringPropertyAttribute]
public string SearchPath { get; public set; }
    [CategoryAttribute("Connection")]
[DescriptionAttribute("Gets or sets the client_encoding parameter.")]
[DisplayNameAttribute("Client Encoding")]
[NpgsqlConnectionStringPropertyAttribute]
public string ClientEncoding { get; public set; }
    [CategoryAttribute("Connection")]
[DescriptionAttribute("Gets or sets the .NET encoding that will be used to encode/decode PostgreSQL string data.")]
[DisplayNameAttribute("Encoding")]
[DefaultValueAttribute("UTF8")]
[NpgsqlConnectionStringPropertyAttribute]
public string Encoding { get; public set; }
    [CategoryAttribute("Security")]
[DescriptionAttribute("Controls whether SSL is required, disabled or preferred, depending on server support.")]
[DisplayNameAttribute("SSL Mode")]
[NpgsqlConnectionStringPropertyAttribute]
public SslMode SslMode { get; public set; }
    [CategoryAttribute("Security")]
[DescriptionAttribute("Whether to trust the server certificate without validating it.")]
[DisplayNameAttribute("Trust Server Certificate")]
[NpgsqlConnectionStringPropertyAttribute]
public bool TrustServerCertificate { get; public set; }
    [CategoryAttribute("Security")]
[DescriptionAttribute("Npgsql uses its own internal implementation of TLS/SSL. Turn this on to use .NET SslStream instead.")]
[DisplayNameAttribute("Use SSL Stream")]
[NpgsqlConnectionStringPropertyAttribute]
public bool UseSslStream { get; public set; }
    [CategoryAttribute("Security")]
[DescriptionAttribute("Whether to use Windows integrated security to log in.")]
[DisplayNameAttribute("Integrated Security")]
[NpgsqlConnectionStringPropertyAttribute]
public bool IntegratedSecurity { get; public set; }
    [CategoryAttribute("Security")]
[DescriptionAttribute("The Kerberos service name to be used for authentication.")]
[DisplayNameAttribute("Kerberos Service Name")]
[NpgsqlConnectionStringPropertyAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[DefaultValueAttribute("postgres")]
public string KerberosServiceName { get; public set; }
    [CategoryAttribute("Security")]
[DescriptionAttribute("The Kerberos realm to be used for authentication.")]
[DisplayNameAttribute("Include Realm")]
[NpgsqlConnectionStringPropertyAttribute]
public bool IncludeRealm { get; public set; }
    [CategoryAttribute("Security")]
[DescriptionAttribute("Gets or sets a Boolean value that indicates if security-sensitive information, such as the password, is not returned as part of the connection if the connection is open or has ever been in an open state.")]
[DisplayNameAttribute("Persist Security Info")]
[NpgsqlConnectionStringPropertyAttribute]
public bool PersistSecurityInfo { get; public set; }
    [CategoryAttribute("Pooling")]
[DescriptionAttribute("Whether connection pooling should be used.")]
[DisplayNameAttribute("Pooling")]
[NpgsqlConnectionStringPropertyAttribute]
[DefaultValueAttribute("True")]
public bool Pooling { get; public set; }
    [CategoryAttribute("Pooling")]
[DescriptionAttribute("The minimum connection pool size.")]
[DisplayNameAttribute("Minimum Pool Size")]
[NpgsqlConnectionStringPropertyAttribute]
[DefaultValueAttribute("1")]
public int MinPoolSize { get; public set; }
    [CategoryAttribute("Pooling")]
[DescriptionAttribute("The maximum connection pool size.")]
[DisplayNameAttribute("Maximum Pool Size")]
[NpgsqlConnectionStringPropertyAttribute]
[DefaultValueAttribute("100")]
public int MaxPoolSize { get; public set; }
    [CategoryAttribute("Pooling")]
[DescriptionAttribute("The time to wait before closing unused connections in the pool if the count of all connections exeeds MinPoolSize.")]
[DisplayNameAttribute("Connection Idle Lifetime")]
[NpgsqlConnectionStringPropertyAttribute]
[DefaultValueAttribute("300")]
public int ConnectionIdleLifetime { get; public set; }
    [CategoryAttribute("Pooling")]
[DescriptionAttribute("How many seconds the pool waits before attempting to prune idle connections that are beyond idle lifetime.")]
[DisplayNameAttribute("Connection Pruning Interval")]
[NpgsqlConnectionStringPropertyAttribute]
[DefaultValueAttribute("10")]
public int ConnectionPruningInterval { get; public set; }
    [CategoryAttribute("Timeouts")]
[DescriptionAttribute("The time to wait (in seconds) while trying to establish a connection before terminating the attempt and generating an error.")]
[DisplayNameAttribute("Timeout")]
[NpgsqlConnectionStringPropertyAttribute]
[DefaultValueAttribute("15")]
public int Timeout { get; public set; }
    [CategoryAttribute("Timeouts")]
[DescriptionAttribute("The time to wait (in seconds) while trying to execute a command before terminating the attempt and generating an error. Set to zero for infinity.")]
[DisplayNameAttribute("Command Timeout")]
[NpgsqlConnectionStringPropertyAttribute]
[DefaultValueAttribute("30")]
public int CommandTimeout { get; public set; }
    [CategoryAttribute("Timeouts")]
[DescriptionAttribute("The time to wait (in seconds) while trying to execute a an internal command before terminating the attempt and generating an error. -1 uses CommandTimeout, 0 means no timeout.")]
[DisplayNameAttribute("Internal Command Timeout")]
[NpgsqlConnectionStringPropertyAttribute]
[DefaultValueAttribute("-1")]
public int InternalCommandTimeout { get; public set; }
    [CategoryAttribute("Entity Framework")]
[DescriptionAttribute("The database template to specify when creating a database in Entity Framework. If not specified, PostgreSQL defaults to "template1".")]
[DisplayNameAttribute("EF Template Database")]
[NpgsqlConnectionStringPropertyAttribute]
public string EntityTemplateDatabase { get; public set; }
    [CategoryAttribute("Entity Framework")]
[DescriptionAttribute("The database admin to specify when creating and dropping a database in Entity Framework. If not specified, defaults to "template1".")]
[DisplayNameAttribute("EF Admin Database")]
[NpgsqlConnectionStringPropertyAttribute]
public string EntityAdminDatabase { get; public set; }
    [CategoryAttribute("Advanced")]
[DescriptionAttribute("The number of seconds of connection inactivity before Npgsql sends a keepalive query.")]
[DisplayNameAttribute("Keepalive")]
[NpgsqlConnectionStringPropertyAttribute]
public int KeepAlive { get; public set; }
    [CategoryAttribute("Advanced")]
[DescriptionAttribute("Determines the size of the internal buffer Npgsql uses when reading or writing. Increasing may improve performance if transferring large values from the database.")]
[DisplayNameAttribute("Buffer Size")]
[NpgsqlConnectionStringPropertyAttribute]
[DefaultValueAttribute("8192")]
public int BufferSize { get; public set; }
    [CategoryAttribute("Compatibility")]
[DescriptionAttribute("A compatibility mode for special PostgreSQL server types.")]
[DisplayNameAttribute("Server Compatibility Mode")]
[NpgsqlConnectionStringPropertyAttribute]
public ServerCompatibilityMode ServerCompatibilityMode { get; public set; }
    [CategoryAttribute("Compatibility")]
[DescriptionAttribute("Makes MaxValue and MinValue timestamps and dates readable as infinity and negative infinity.")]
[DisplayNameAttribute("Convert Infinity DateTime")]
[NpgsqlConnectionStringPropertyAttribute]
public bool ConvertInfinityDateTime { get; public set; }
    [CategoryAttribute("Obsolete")]
[DescriptionAttribute("Obsolete, see http://www.npgsql.org/doc/3.1/migration.html")]
[DisplayNameAttribute("Connection Lifetime")]
[NpgsqlConnectionStringPropertyAttribute]
[ObsoleteAttribute]
public int ConnectionLifeTime { get; public set; }
    [CategoryAttribute("Obsolete")]
[DescriptionAttribute("Obsolete, see http://www.npgsql.org/doc/3.1/migration.html")]
[DisplayNameAttribute("Continuous Processing")]
[NpgsqlConnectionStringPropertyAttribute]
[ObsoleteAttribute]
public bool ContinuousProcessing { get; public set; }
    [CategoryAttribute("Obsolete")]
[DescriptionAttribute("Obsolete, see http://www.npgsql.org/doc/3.1/migration.html")]
[DisplayNameAttribute("Backend Timeouts")]
[NpgsqlConnectionStringPropertyAttribute]
[ObsoleteAttribute]
public bool BackendTimeouts { get; public set; }
    [CategoryAttribute("Obsolete")]
[DescriptionAttribute("Obsolete, see http://www.npgsql.org/doc/3.0/migration.html")]
[DisplayNameAttribute("Preload Reader")]
[NpgsqlConnectionStringPropertyAttribute]
[ObsoleteAttribute]
public bool PreloadReader { get; public set; }
    [CategoryAttribute("Obsolete")]
[DescriptionAttribute("Obsolete, see http://www.npgsql.org/doc/3.0/migration.html")]
[DisplayNameAttribute("Use Extended Types")]
[NpgsqlConnectionStringPropertyAttribute]
[ObsoleteAttribute]
public bool UseExtendedTypes { get; public set; }
    public NpgsqlConnectionStringBuilder(bool useOdbcRules);
    public NpgsqlConnectionStringBuilder(string connectionString);
    private static NpgsqlConnectionStringBuilder();
    private void Init();
    public virtual object get_Item(string keyword);
    public virtual void set_Item(string keyword, object value);
    public virtual bool Remove(string keyword);
    public virtual void Clear();
    public virtual bool ContainsKey(string keyword);
    private PropertyInfo GetProperty(string keyword);
    public virtual bool TryGetValue(string keyword, Object& value);
    private void SetValue(string propertyName, object value);
    public string get_Host();
    public void set_Host(string value);
    public int get_Port();
    public void set_Port(int value);
    public string get_Database();
    public void set_Database(string value);
    public string get_Username();
    public void set_Username(string value);
    public string get_Password();
    public void set_Password(string value);
    public string get_ApplicationName();
    public void set_ApplicationName(string value);
    public bool get_Enlist();
    public void set_Enlist(bool value);
    public string get_SearchPath();
    public void set_SearchPath(string value);
    public string get_ClientEncoding();
    public void set_ClientEncoding(string value);
    public string get_Encoding();
    public void set_Encoding(string value);
    public SslMode get_SslMode();
    public void set_SslMode(SslMode value);
    public bool get_TrustServerCertificate();
    public void set_TrustServerCertificate(bool value);
    public bool get_UseSslStream();
    public void set_UseSslStream(bool value);
    public bool get_IntegratedSecurity();
    public void set_IntegratedSecurity(bool value);
    public string get_KerberosServiceName();
    public void set_KerberosServiceName(string value);
    public bool get_IncludeRealm();
    public void set_IncludeRealm(bool value);
    public bool get_PersistSecurityInfo();
    public void set_PersistSecurityInfo(bool value);
    public bool get_Pooling();
    public void set_Pooling(bool value);
    public int get_MinPoolSize();
    public void set_MinPoolSize(int value);
    public int get_MaxPoolSize();
    public void set_MaxPoolSize(int value);
    public int get_ConnectionIdleLifetime();
    public void set_ConnectionIdleLifetime(int value);
    public int get_ConnectionPruningInterval();
    public void set_ConnectionPruningInterval(int value);
    public int get_Timeout();
    public void set_Timeout(int value);
    public int get_CommandTimeout();
    public void set_CommandTimeout(int value);
    public int get_InternalCommandTimeout();
    public void set_InternalCommandTimeout(int value);
    public string get_EntityTemplateDatabase();
    public void set_EntityTemplateDatabase(string value);
    public string get_EntityAdminDatabase();
    public void set_EntityAdminDatabase(string value);
    public int get_KeepAlive();
    public void set_KeepAlive(int value);
    public int get_BufferSize();
    public void set_BufferSize(int value);
    public ServerCompatibilityMode get_ServerCompatibilityMode();
    public void set_ServerCompatibilityMode(ServerCompatibilityMode value);
    public bool get_ConvertInfinityDateTime();
    public void set_ConvertInfinityDateTime(bool value);
    public int get_ConnectionLifeTime();
    public void set_ConnectionLifeTime(int value);
    public bool get_ContinuousProcessing();
    public void set_ContinuousProcessing(bool value);
    public bool get_BackendTimeouts();
    public void set_BackendTimeouts(bool value);
    public bool get_PreloadReader();
    public void set_PreloadReader(bool value);
    public bool get_UseExtendedTypes();
    public void set_UseExtendedTypes(bool value);
    internal string ToStringWithoutPassword();
    internal NpgsqlConnectionStringBuilder Clone();
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
}
internal class Npgsql.NpgsqlConnector : object {
    private Socket _socket;
    private NetworkStream _baseStream;
    private Stream _stream;
    private NpgsqlConnectionStringBuilder _settings;
    private string _password;
    [CompilerGeneratedAttribute]
private Encoding <TextEncoding>k__BackingField;
    [CompilerGeneratedAttribute]
private ReadBuffer <ReadBuffer>k__BackingField;
    [CompilerGeneratedAttribute]
private WriteBuffer <WriteBuffer>k__BackingField;
    [CompilerGeneratedAttribute]
private Version <ServerVersion>k__BackingField;
    private int _backendSecretKey;
    [CompilerGeneratedAttribute]
private int <BackendProcessId>k__BackingField;
    [CompilerGeneratedAttribute]
private TypeHandlerRegistry <TypeHandlerRegistry>k__BackingField;
    [CompilerGeneratedAttribute]
private TransactionStatus <TransactionStatus>k__BackingField;
    [CompilerGeneratedAttribute]
private NpgsqlTransaction <Transaction>k__BackingField;
    [CompilerGeneratedAttribute]
private NpgsqlConnection <Connection>k__BackingField;
    private byte _pendingRfqPrependedMessages;
    internal NpgsqlDataReader CurrentReader;
    internal ICancelable CurrentCopyOperation;
    internal Dictionary`2<string, string> BackendParams;
    private SSPIHandler _sspi;
    [CompilerGeneratedAttribute]
private int <UserTimeout>k__BackingField;
    private int _currentTimeout;
    private SemaphoreSlim _userLock;
    private SemaphoreSlim _keepAliveLock;
    [CompilerGeneratedAttribute]
private object <CancelLock>k__BackingField;
    private UserAction _userAction;
    private Timer _keepAliveTimer;
    [CompilerGeneratedAttribute]
private DateTime <ReleaseTimestamp>k__BackingField;
    [CompilerGeneratedAttribute]
private int <ClearCounter>k__BackingField;
    private static NpgsqlLogger Log;
    internal static int MinimumInternalCommandTimeout;
    internal BindMessage BindMessage;
    internal DescribeMessage DescribeMessage;
    internal ExecuteMessage ExecuteMessage;
    internal ParseMessage ParseMessage;
    internal QueryMessage QueryMessage;
    private CommandCompleteMessage _commandCompleteMessage;
    private ReadyForQueryMessage _readyForQueryMessage;
    private ParameterDescriptionMessage _parameterDescriptionMessage;
    private DataRowSequentialMessage _dataRowSequentialMessage;
    private DataRowNonSequentialMessage _dataRowNonSequentialMessage;
    private CopyInResponseMessage _copyInResponseMessage;
    private CopyOutResponseMessage _copyOutResponseMessage;
    private CopyDataMessage _copyDataMessage;
    private int _state;
    [CompilerGeneratedAttribute]
private NoticeEventHandler Notice;
    [CompilerGeneratedAttribute]
private NotificationEventHandler Notification;
    [CompilerGeneratedAttribute]
private bool <IsSecure>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <UseConformantStrings>k__BackingField;
    private int _preparedStatementIndex;
    private static string PreparedStatementNamePrefix;
    internal Encoding TextEncoding { get; private set; }
    internal ReadBuffer ReadBuffer { get; private set; }
    internal WriteBuffer WriteBuffer { get; private set; }
    internal Version ServerVersion { get; private set; }
    internal int BackendProcessId { get; private set; }
    internal int Id { get; }
    internal TypeHandlerRegistry TypeHandlerRegistry { get; internal set; }
    internal TransactionStatus TransactionStatus { get; internal set; }
    internal NpgsqlTransaction Transaction { get; internal set; }
    internal NpgsqlConnection Connection { get; internal set; }
    private int UserTimeout { get; internal set; }
    unknown int ReceiveTimeout {private set; }
    internal object CancelLock { get; }
    internal DateTime ReleaseTimestamp { get; internal set; }
    internal int ClearCounter { get; internal set; }
    internal string ConnectionString { get; }
    private string Host { get; }
    private int Port { get; }
    private string Database { get; }
    private string KerberosServiceName { get; }
    private SslMode SslMode { get; }
    private bool UseSslStream { get; }
    private int BufferSize { get; }
    private int ConnectionTimeout { get; }
    private int KeepAlive { get; }
    private bool IsKeepAliveEnabled { get; }
    private bool IntegratedSecurity { get; }
    internal bool ConvertInfinityDateTime { get; }
    private int InternalCommandTimeout { get; }
    internal ConnectorState State { get; internal set; }
    private bool IsConnected { get; }
    internal bool IsReady { get; }
    internal bool IsClosed { get; }
    internal bool IsBroken { get; }
    internal bool InTransaction { get; }
    internal bool IsSecure { get; private set; }
    private bool IsInUserAction { get; }
    private bool SupportsDiscard { get; }
    internal bool SupportsRangeTypes { get; }
    private bool SupportsUnlisten { get; }
    internal bool UseConformantStrings { get; private set; }
    internal bool SupportsEStringPrefix { get; }
    private bool IsRedshift { get; }
    internal NpgsqlConnector(NpgsqlConnection connection);
    private NpgsqlConnector(NpgsqlConnectionStringBuilder connectionString, string password);
    private static NpgsqlConnector();
    [AsyncStateMachineAttribute("Npgsql.NpgsqlConnector/<OpenAsync>d__0")]
internal Task OpenAsync(NpgsqlTimeout timeout, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Npgsql.NpgsqlConnector/<RawOpenAsync>d__1")]
private Task RawOpenAsync(NpgsqlTimeout timeout, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Npgsql.NpgsqlConnector/<HandleAuthenticationAsync>d__2")]
private Task HandleAuthenticationAsync(string username, NpgsqlTimeout timeout, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Npgsql.NpgsqlConnector/<SendMessageAsync>d__3")]
internal Task SendMessageAsync(FrontendMessage msg, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Npgsql.NpgsqlConnector/<SendBufferAsync>d__4")]
internal Task SendBufferAsync(CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Npgsql.NpgsqlConnector/<ReadMessageWithPrependedAsync>d__5")]
private Task`1<IBackendMessage> ReadMessageWithPrependedAsync(CancellationToken cancellationToken, DataRowLoadingMode dataRowLoadingMode);
    [AsyncStateMachineAttribute("Npgsql.NpgsqlConnector/<DoReadMessageAsync>d__6")]
private Task`1<IBackendMessage> DoReadMessageAsync(CancellationToken cancellationToken, DataRowLoadingMode dataRowLoadingMode, bool isPrependedMessage);
    [AsyncStateMachineAttribute("Npgsql.NpgsqlConnector/<SkipUntilAsync>d__7")]
internal Task`1<IBackendMessage> SkipUntilAsync(BackendMessageCode stopAt, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Npgsql.NpgsqlConnector/<SkipUntilAsync>d__8")]
internal Task`1<IBackendMessage> SkipUntilAsync(BackendMessageCode stopAt1, BackendMessageCode stopAt2, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Npgsql.NpgsqlConnector/<ReadExpectingAsync>d__9`1")]
internal Task`1<T> ReadExpectingAsync(CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Npgsql.NpgsqlConnector/<ReadAsyncMessageAsync>d__10")]
internal Task ReadAsyncMessageAsync(CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Npgsql.NpgsqlConnector/<RollbackAsync>d__11")]
internal Task RollbackAsync(CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Npgsql.NpgsqlConnector/<ExecuteInternalCommandAsync>d__12")]
internal Task ExecuteInternalCommandAsync(FrontendMessage message, CancellationToken cancellationToken);
    [CompilerGeneratedAttribute]
internal Encoding get_TextEncoding();
    [CompilerGeneratedAttribute]
private void set_TextEncoding(Encoding value);
    [CompilerGeneratedAttribute]
internal ReadBuffer get_ReadBuffer();
    [CompilerGeneratedAttribute]
private void set_ReadBuffer(ReadBuffer value);
    [CompilerGeneratedAttribute]
internal WriteBuffer get_WriteBuffer();
    [CompilerGeneratedAttribute]
private void set_WriteBuffer(WriteBuffer value);
    [CompilerGeneratedAttribute]
internal Version get_ServerVersion();
    [CompilerGeneratedAttribute]
private void set_ServerVersion(Version value);
    [CompilerGeneratedAttribute]
internal int get_BackendProcessId();
    [CompilerGeneratedAttribute]
private void set_BackendProcessId(int value);
    internal int get_Id();
    [CompilerGeneratedAttribute]
internal TypeHandlerRegistry get_TypeHandlerRegistry();
    [CompilerGeneratedAttribute]
internal void set_TypeHandlerRegistry(TypeHandlerRegistry value);
    [CompilerGeneratedAttribute]
internal TransactionStatus get_TransactionStatus();
    [CompilerGeneratedAttribute]
internal void set_TransactionStatus(TransactionStatus value);
    [CompilerGeneratedAttribute]
internal NpgsqlTransaction get_Transaction();
    [CompilerGeneratedAttribute]
internal void set_Transaction(NpgsqlTransaction value);
    [CompilerGeneratedAttribute]
internal NpgsqlConnection get_Connection();
    [CompilerGeneratedAttribute]
internal void set_Connection(NpgsqlConnection value);
    [CompilerGeneratedAttribute]
private int get_UserTimeout();
    [CompilerGeneratedAttribute]
internal void set_UserTimeout(int value);
    private void set_ReceiveTimeout(int value);
    [CompilerGeneratedAttribute]
internal object get_CancelLock();
    [CompilerGeneratedAttribute]
internal DateTime get_ReleaseTimestamp();
    [CompilerGeneratedAttribute]
internal void set_ReleaseTimestamp(DateTime value);
    [CompilerGeneratedAttribute]
internal int get_ClearCounter();
    [CompilerGeneratedAttribute]
internal void set_ClearCounter(int value);
    internal string get_ConnectionString();
    private string get_Host();
    private int get_Port();
    private string get_Database();
    private string get_KerberosServiceName();
    private SslMode get_SslMode();
    private bool get_UseSslStream();
    private int get_BufferSize();
    private int get_ConnectionTimeout();
    private int get_KeepAlive();
    private bool get_IsKeepAliveEnabled();
    private bool get_IntegratedSecurity();
    internal bool get_ConvertInfinityDateTime();
    private int get_InternalCommandTimeout();
    internal ConnectorState get_State();
    internal void set_State(ConnectorState value);
    private bool get_IsConnected();
    internal bool get_IsReady();
    internal bool get_IsClosed();
    internal bool get_IsBroken();
    internal void Open();
    [RewriteAsyncAttribute("False")]
internal void Open(NpgsqlTimeout timeout);
    private void WriteStartupMessage(string username);
    private string GetUsername();
    [RewriteAsyncAttribute("False")]
private void RawOpen(NpgsqlTimeout timeout);
    private void Connect(NpgsqlTimeout timeout);
    [AsyncStateMachineAttribute("Npgsql.NpgsqlConnector/<ConnectAsync>d__147")]
private Task ConnectAsync(NpgsqlTimeout timeout, CancellationToken cancellationToken);
    [RewriteAsyncAttribute("False")]
private void HandleAuthentication(string username, NpgsqlTimeout timeout);
    [CanBeNullAttribute]
private PasswordMessage ProcessAuthenticationMessage(string username, AuthenticationRequestMessage msg);
    internal void PrependInternalMessage(FrontendMessage msg);
    [RewriteAsyncAttribute("False")]
internal void SendMessage(FrontendMessage msg);
    internal void SendQuery(string query);
    [RewriteAsyncAttribute("False")]
internal void SendBuffer();
    [AsyncStateMachineAttribute("Npgsql.NpgsqlConnector/<SendBufferAsyncWithSyncContext>d__154")]
internal Task SendBufferAsyncWithSyncContext(CancellationToken cancellationToken);
    internal IBackendMessage ReadMessage(DataRowLoadingMode dataRowLoadingMode);
    internal Task`1<IBackendMessage> ReadMessageAsync(DataRowLoadingMode dataRowLoadingMode, CancellationToken cancellationToken);
    [RewriteAsyncAttribute("False")]
[CanBeNullAttribute]
private IBackendMessage ReadMessageWithPrepended(DataRowLoadingMode dataRowLoadingMode);
    [RewriteAsyncAttribute("False")]
[CanBeNullAttribute]
private IBackendMessage DoReadMessage(DataRowLoadingMode dataRowLoadingMode, bool isPrependedMessage);
    [CanBeNullAttribute]
private IBackendMessage ParseServerMessage(ReadBuffer buf, BackendMessageCode code, int len, DataRowLoadingMode dataRowLoadingMode, bool isPrependedMessage);
    [RewriteAsyncAttribute("False")]
internal IBackendMessage SkipUntil(BackendMessageCode stopAt);
    [RewriteAsyncAttribute("False")]
internal IBackendMessage SkipUntil(BackendMessageCode stopAt1, BackendMessageCode stopAt2);
    [RewriteAsyncAttribute("False")]
internal T ReadExpecting();
    [RewriteAsyncAttribute("False")]
internal void ReadAsyncMessage();
    [RewriteAsyncAttribute("False")]
internal void Rollback();
    internal bool get_InTransaction();
    private void ProcessNewTransactionStatus(TransactionStatus newStatus);
    internal void ClearTransaction();
    [CompilerGeneratedAttribute]
internal void add_Notice(NoticeEventHandler value);
    [CompilerGeneratedAttribute]
internal void remove_Notice(NoticeEventHandler value);
    [CompilerGeneratedAttribute]
internal void add_Notification(NotificationEventHandler value);
    [CompilerGeneratedAttribute]
internal void remove_Notification(NotificationEventHandler value);
    private void FireNotice(PostgresNotice e);
    private void FireNotification(NpgsqlNotificationEventArgs e);
    [CompilerGeneratedAttribute]
internal bool get_IsSecure();
    [CompilerGeneratedAttribute]
private void set_IsSecure(bool value);
    private static bool DefaultUserCertificateValidationCallback(object sender, X509Certificate certificate, X509Chain chain, SslPolicyErrors sslPolicyErrors);
    internal void CancelRequest();
    private void DoCancelRequest(int backendProcessId, int backendSecretKey, int connectionTimeout);
    internal void Close();
    internal Exception UnexpectedMessageReceived(BackendMessageCode received);
    internal void Break();
    private void Cleanup();
    internal void Reset();
    internal IDisposable StartUserAction(ConnectorState newState);
    internal void EndUserAction();
    private bool get_IsInUserAction();
    private void PerformKeepAlive(object state);
    private bool get_SupportsDiscard();
    internal bool get_SupportsRangeTypes();
    private bool get_SupportsUnlisten();
    [CompilerGeneratedAttribute]
internal bool get_UseConformantStrings();
    [CompilerGeneratedAttribute]
private void set_UseConformantStrings(bool value);
    internal bool get_SupportsEStringPrefix();
    private void ProcessServerVersion(string value);
    private bool get_IsRedshift();
    internal void ExecuteInternalCommand(string query);
    [RewriteAsyncAttribute("False")]
internal void ExecuteInternalCommand(FrontendMessage message);
    private void HandleParameterStatus(string name, string value);
    internal string NextPreparedStatementName();
    private void ObjectInvariants();
}
public class Npgsql.NpgsqlCopyTextReader : StreamReader {
    internal NpgsqlCopyTextReader(NpgsqlRawCopyStream underlying);
    public sealed virtual void Cancel();
}
public class Npgsql.NpgsqlCopyTextWriter : StreamWriter {
    internal NpgsqlCopyTextWriter(NpgsqlRawCopyStream underlying);
    public sealed virtual void Cancel();
}
[DesignerCategoryAttribute("")]
public class Npgsql.NpgsqlDataAdapter : DbDataAdapter {
    [CompilerGeneratedAttribute]
private NpgsqlRowUpdatedEventHandler RowUpdated;
    [CompilerGeneratedAttribute]
private NpgsqlRowUpdatingEventHandler RowUpdating;
    private static NpgsqlLogger Log;
    public NpgsqlCommand DeleteCommand { get; public set; }
    public NpgsqlCommand SelectCommand { get; public set; }
    public NpgsqlCommand UpdateCommand { get; public set; }
    public NpgsqlCommand InsertCommand { get; public set; }
    public NpgsqlDataAdapter(NpgsqlCommand selectCommand);
    public NpgsqlDataAdapter(string selectCommandText, NpgsqlConnection selectConnection);
    public NpgsqlDataAdapter(string selectCommandText, string selectConnectionString);
    private static NpgsqlDataAdapter();
    [CompilerGeneratedAttribute]
public void add_RowUpdated(NpgsqlRowUpdatedEventHandler value);
    [CompilerGeneratedAttribute]
public void remove_RowUpdated(NpgsqlRowUpdatedEventHandler value);
    [CompilerGeneratedAttribute]
public void add_RowUpdating(NpgsqlRowUpdatingEventHandler value);
    [CompilerGeneratedAttribute]
public void remove_RowUpdating(NpgsqlRowUpdatingEventHandler value);
    protected virtual RowUpdatedEventArgs CreateRowUpdatedEvent(DataRow dataRow, IDbCommand command, StatementType statementType, DataTableMapping tableMapping);
    protected virtual RowUpdatingEventArgs CreateRowUpdatingEvent(DataRow dataRow, IDbCommand command, StatementType statementType, DataTableMapping tableMapping);
    protected virtual void OnRowUpdated(RowUpdatedEventArgs value);
    protected virtual void OnRowUpdating(RowUpdatingEventArgs value);
    public NpgsqlCommand get_DeleteCommand();
    public void set_DeleteCommand(NpgsqlCommand value);
    public NpgsqlCommand get_SelectCommand();
    public void set_SelectCommand(NpgsqlCommand value);
    public NpgsqlCommand get_UpdateCommand();
    public void set_UpdateCommand(NpgsqlCommand value);
    public NpgsqlCommand get_InsertCommand();
    public void set_InsertCommand(NpgsqlCommand value);
}
[DefaultMemberAttribute("Item")]
public class Npgsql.NpgsqlDataReader : DbDataReader {
    [CompilerGeneratedAttribute]
private NpgsqlCommand <Command>k__BackingField;
    private NpgsqlConnector _connector;
    private NpgsqlConnection _connection;
    private CommandBehavior _behavior;
    private ReaderState _state;
    private List`1<NpgsqlStatement> _statements;
    private int _statementIndex;
    private RowDescriptionMessage _rowDescription;
    private DataRowMessage _row;
    private Nullable`1<UInt32> _recordsAffected;
    private bool _readOneRow;
    private Nullable`1<bool> _hasRows;
    private IBackendMessage _pendingMessage;
    private DataTable _cachedSchemaTable;
    [CompilerGeneratedAttribute]
private EventHandler ReaderClosed;
    private RowCache _rowCache;
    [CompilerGeneratedAttribute]
private bool <IsPrepared>k__BackingField;
    private static NpgsqlLogger Log;
    internal NpgsqlCommand Command { get; }
    private bool IsSequential { get; }
    private bool IsCaching { get; }
    private bool IsSchemaOnly { get; }
    private bool IsPrepared { get; }
    public int Depth { get; }
    public bool IsClosed { get; }
    public int RecordsAffected { get; }
    public IReadOnlyList`1<NpgsqlStatement> Statements { get; }
    public bool HasRows { get; }
    [PublicAPIAttribute]
public bool IsOnRow { get; }
    public int FieldCount { get; }
    private DataRowMessage Row { get; }
    public object Item { get; }
    public object Item { get; }
    internal NpgsqlDataReader(NpgsqlCommand command, CommandBehavior behavior, List`1<NpgsqlStatement> statements);
    private static NpgsqlDataReader();
    [AsyncStateMachineAttribute("Npgsql.NpgsqlDataReader/<ReadInternalAsync>d__0")]
private Task`1<bool> ReadInternalAsync(CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Npgsql.NpgsqlDataReader/<NextResultInternalAsync>d__1")]
private Task`1<bool> NextResultInternalAsync(CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Npgsql.NpgsqlDataReader/<NextResultSchemaOnlyAsync>d__2")]
private Task`1<bool> NextResultSchemaOnlyAsync(CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Npgsql.NpgsqlDataReader/<ReadMessageAsync>d__3")]
private Task`1<IBackendMessage> ReadMessageAsync(CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Npgsql.NpgsqlDataReader/<SkipUntilAsync>d__4")]
private Task`1<IBackendMessage> SkipUntilAsync(BackendMessageCode stopAt, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Npgsql.NpgsqlDataReader/<SkipUntilAsync>d__5")]
private Task`1<IBackendMessage> SkipUntilAsync(BackendMessageCode stopAt1, BackendMessageCode stopAt2, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Npgsql.NpgsqlDataReader/<ConsumeAsync>d__6")]
private Task ConsumeAsync(CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Npgsql.NpgsqlDataReader/<IsDBNullInternalAsync>d__7")]
private Task`1<bool> IsDBNullInternalAsync(int ordinal, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Npgsql.NpgsqlDataReader/<GetFieldValueInternalAsync>d__8`1")]
private Task`1<T> GetFieldValueInternalAsync(int ordinal, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Npgsql.NpgsqlDataReader/<ReadColumnWithoutCacheAsync>d__9`1")]
private Task`1<T> ReadColumnWithoutCacheAsync(int ordinal, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Npgsql.NpgsqlDataReader/<ReadColumnAsync>d__10`1")]
private Task`1<T> ReadColumnAsync(int ordinal, CancellationToken cancellationToken);
    [CompilerGeneratedAttribute]
internal NpgsqlCommand get_Command();
    [CompilerGeneratedAttribute]
public void add_ReaderClosed(EventHandler value);
    [CompilerGeneratedAttribute]
public void remove_ReaderClosed(EventHandler value);
    private bool get_IsSequential();
    private bool get_IsCaching();
    private bool get_IsSchemaOnly();
    [CompilerGeneratedAttribute]
private bool get_IsPrepared();
    private void PopulateOutputParameters();
    public virtual bool Read();
    [AsyncStateMachineAttribute("Npgsql.NpgsqlDataReader/<ReadAsync>d__44")]
public virtual Task`1<bool> ReadAsync(CancellationToken cancellationToken);
    [RewriteAsyncAttribute("False")]
private bool ReadInternal();
    private ReadResult ProcessMessage(IBackendMessage msg);
    public sealed virtual bool NextResult();
    [AsyncStateMachineAttribute("Npgsql.NpgsqlDataReader/<NextResultAsync>d__48")]
public sealed virtual Task`1<bool> NextResultAsync(CancellationToken cancellationToken);
    [RewriteAsyncAttribute("False")]
private bool NextResultInternal();
    [RewriteAsyncAttribute("False")]
private bool NextResultSchemaOnly();
    [RewriteAsyncAttribute("False")]
private IBackendMessage ReadMessage();
    [RewriteAsyncAttribute("False")]
private IBackendMessage SkipUntil(BackendMessageCode stopAt);
    [RewriteAsyncAttribute("False")]
private IBackendMessage SkipUntil(BackendMessageCode stopAt1, BackendMessageCode stopAt2);
    public virtual int get_Depth();
    public virtual bool get_IsClosed();
    public virtual int get_RecordsAffected();
    public IReadOnlyList`1<NpgsqlStatement> get_Statements();
    public virtual bool get_HasRows();
    public bool get_IsOnRow();
    public virtual string GetName(int ordinal);
    public virtual int get_FieldCount();
    [RewriteAsyncAttribute("False")]
private void Consume();
    protected virtual void Dispose(bool disposing);
    public virtual void Close();
    internal void Close(bool connectionClosing);
    internal void Cleanup(bool connectionClosing);
    private DataRowMessage get_Row();
    public virtual bool GetBoolean(int ordinal);
    public virtual byte GetByte(int ordinal);
    public virtual char GetChar(int ordinal);
    public virtual short GetInt16(int ordinal);
    public virtual int GetInt32(int ordinal);
    public virtual long GetInt64(int ordinal);
    public virtual DateTime GetDateTime(int ordinal);
    public virtual string GetString(int ordinal);
    public virtual decimal GetDecimal(int ordinal);
    public virtual double GetDouble(int ordinal);
    public virtual float GetFloat(int ordinal);
    public virtual Guid GetGuid(int ordinal);
    public virtual int GetValues(Object[] values);
    public virtual object get_Item(int ordinal);
    public NpgsqlDate GetDate(int ordinal);
    public TimeSpan GetTimeSpan(int ordinal);
    public NpgsqlTimeSpan GetInterval(int ordinal);
    public NpgsqlDateTime GetTimeStamp(int ordinal);
    public virtual long GetBytes(int ordinal, long dataOffset, Byte[] buffer, int bufferOffset, int length);
    public virtual Stream GetStream(int ordinal);
    public virtual long GetChars(int ordinal, long dataOffset, Char[] buffer, int bufferOffset, int length);
    public virtual TextReader GetTextReader(int ordinal);
    public virtual bool IsDBNull(int ordinal);
    [AsyncStateMachineAttribute("Npgsql.NpgsqlDataReader/<IsDBNullAsync>d__100")]
public virtual Task`1<bool> IsDBNullAsync(int ordinal, CancellationToken cancellationToken);
    [RewriteAsyncAttribute("False")]
private bool IsDBNullInternal(int ordinal);
    public virtual object get_Item(string name);
    public virtual int GetOrdinal(string name);
    public virtual string GetDataTypeName(int ordinal);
    public UInt32 GetDataTypeOID(int ordinal);
    public virtual Type GetFieldType(int ordinal);
    public virtual Type GetProviderSpecificFieldType(int ordinal);
    public virtual object GetValue(int ordinal);
    public virtual T GetFieldValue(int ordinal);
    [AsyncStateMachineAttribute("Npgsql.NpgsqlDataReader/<GetFieldValueAsync>d__111`1")]
public virtual Task`1<T> GetFieldValueAsync(int ordinal, CancellationToken cancellationToken);
    [RewriteAsyncAttribute("False")]
private T GetFieldValueInternal(int ordinal);
    public virtual object GetProviderSpecificValue(int ordinal);
    public virtual int GetProviderSpecificValues(Object[] values);
    public virtual IEnumerator GetEnumerator();
    [RewriteAsyncAttribute("False")]
private T ReadColumnWithoutCache(int ordinal);
    [RewriteAsyncAttribute("False")]
private T ReadColumn(int ordinal);
    public ReadOnlyCollection`1<NpgsqlDbColumn> GetColumnSchema();
    public virtual DataTable GetSchemaTable();
    private void FillSchemaTable(DataTable schema);
    private static bool IsKey(KeyLookup keyLookup, string fieldName);
    private static bool IsUnique(KeyLookup keyLookup, string fieldName);
    private bool IsNullable(Dictionary`2<string, Column> columnLookup, int fieldIndex);
    private bool IsAutoIncrement(Dictionary`2<string, Column> columnLookup, int fieldIndex);
    private bool IsReadOnly(Dictionary`2<string, Column> columnLookup, int fieldIndex);
    private string GetBaseColumnName(Dictionary`2<string, Column> columnLookup, int fieldIndex);
    private KeyLookup GetKeys(int tableOid);
    private Dictionary`2<UInt32, Table> GetTablesFromOids(List`1<UInt32> oids);
    [CanBeNullAttribute]
private Dictionary`2<string, Column> GetColumns();
    private void CheckRowAndOrdinal(int ordinal);
    private void CheckRow();
    private void CheckOrdinal(int ordinal);
    private void CheckResultSet();
}
public class Npgsql.NpgsqlException : DbException {
    [ObsoleteAttribute("Use PostgresException.MessageText instead")]
public string BaseMessage { get; }
    internal NpgsqlException(string message, Exception innerException);
    internal NpgsqlException(string message);
    internal NpgsqlException(SerializationInfo info, StreamingContext context);
    public string get_BaseMessage();
}
public class Npgsql.NpgsqlFactory : DbProviderFactory {
    public static NpgsqlFactory Instance;
    private static object _legacyEntityFrameworkServices;
    private static NpgsqlFactory();
    public virtual DbCommand CreateCommand();
    public virtual DbConnection CreateConnection();
    public virtual DbParameter CreateParameter();
    public virtual DbConnectionStringBuilder CreateConnectionStringBuilder();
    public virtual DbCommandBuilder CreateCommandBuilder();
    public virtual DbDataAdapter CreateDataAdapter();
    public sealed virtual object GetService(Type serviceType);
}
public class Npgsql.NpgsqlLargeObjectManager : object {
    private static int INV_WRITE;
    private static int INV_READ;
    internal NpgsqlConnection _connection;
    [CompilerGeneratedAttribute]
private int <MaxTransferBlockSize>k__BackingField;
    public int MaxTransferBlockSize { get; public set; }
    public bool Has64BitSupport { get; }
    public NpgsqlLargeObjectManager(NpgsqlConnection connection);
    [AsyncStateMachineAttribute("Npgsql.NpgsqlLargeObjectManager/<ExecuteFunctionAsync>d__0`1")]
internal Task`1<T> ExecuteFunctionAsync(string function, CancellationToken cancellationToken, Object[] arguments);
    [AsyncStateMachineAttribute("Npgsql.NpgsqlLargeObjectManager/<ExecuteFunctionGetBytesAsync>d__1")]
internal Task`1<int> ExecuteFunctionGetBytesAsync(string function, Byte[] buffer, int offset, int len, CancellationToken cancellationToken, Object[] arguments);
    [AsyncStateMachineAttribute("Npgsql.NpgsqlLargeObjectManager/<CreateAsync>d__2")]
public Task`1<UInt32> CreateAsync(CancellationToken cancellationToken, UInt32 preferredOid);
    [AsyncStateMachineAttribute("Npgsql.NpgsqlLargeObjectManager/<OpenReadAsync>d__3")]
public Task`1<NpgsqlLargeObjectStream> OpenReadAsync(UInt32 oid, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Npgsql.NpgsqlLargeObjectManager/<OpenReadWriteAsync>d__4")]
public Task`1<NpgsqlLargeObjectStream> OpenReadWriteAsync(UInt32 oid, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Npgsql.NpgsqlLargeObjectManager/<UnlinkAsync>d__5")]
public Task UnlinkAsync(UInt32 oid, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Npgsql.NpgsqlLargeObjectManager/<ExportRemoteAsync>d__6")]
public Task ExportRemoteAsync(UInt32 oid, string path, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Npgsql.NpgsqlLargeObjectManager/<ImportRemoteAsync>d__7")]
public Task ImportRemoteAsync(string path, CancellationToken cancellationToken, UInt32 oid);
    [CompilerGeneratedAttribute]
public int get_MaxTransferBlockSize();
    [CompilerGeneratedAttribute]
public void set_MaxTransferBlockSize(int value);
    [RewriteAsyncAttribute("False")]
internal T ExecuteFunction(string function, Object[] arguments);
    [RewriteAsyncAttribute("False")]
internal int ExecuteFunctionGetBytes(string function, Byte[] buffer, int offset, int len, Object[] arguments);
    [RewriteAsyncAttribute("False")]
public UInt32 Create(UInt32 preferredOid);
    [RewriteAsyncAttribute("False")]
public NpgsqlLargeObjectStream OpenRead(UInt32 oid);
    [RewriteAsyncAttribute("False")]
public NpgsqlLargeObjectStream OpenReadWrite(UInt32 oid);
    [RewriteAsyncAttribute("False")]
public void Unlink(UInt32 oid);
    [RewriteAsyncAttribute("False")]
public void ExportRemote(UInt32 oid, string path);
    [RewriteAsyncAttribute("False")]
public void ImportRemote(string path, UInt32 oid);
    public bool get_Has64BitSupport();
}
public class Npgsql.NpgsqlLargeObjectStream : Stream {
    private NpgsqlLargeObjectManager _manager;
    private int _fd;
    private long _pos;
    private bool _writeable;
    private bool _disposed;
    public bool Has64BitSupport { get; }
    public bool CanTimeout { get; }
    public bool CanRead { get; }
    public bool CanWrite { get; }
    public bool CanSeek { get; }
    public long Position { get; public set; }
    public long Length { get; }
    internal NpgsqlLargeObjectStream(NpgsqlLargeObjectManager manager, UInt32 oid, int fd, bool writeable);
    [AsyncStateMachineAttribute("Npgsql.NpgsqlLargeObjectStream/<ReadAsync>d__0")]
public Task`1<int> ReadAsync(Byte[] buffer, int offset, int count, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Npgsql.NpgsqlLargeObjectStream/<WriteAsync>d__1")]
public Task WriteAsync(Byte[] buffer, int offset, int count, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Npgsql.NpgsqlLargeObjectStream/<GetLengthInternalAsync>d__2")]
private Task`1<long> GetLengthInternalAsync(CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Npgsql.NpgsqlLargeObjectStream/<SeekAsync>d__3")]
public Task`1<long> SeekAsync(long offset, SeekOrigin origin, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Npgsql.NpgsqlLargeObjectStream/<FlushAsync>d__4")]
public Task FlushAsync(CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Npgsql.NpgsqlLargeObjectStream/<SetLengthAsync>d__5")]
public Task SetLengthAsync(long value, CancellationToken cancellationToken);
    private void CheckDisposed();
    public bool get_Has64BitSupport();
    [RewriteAsyncAttribute("False")]
public virtual int Read(Byte[] buffer, int offset, int count);
    [RewriteAsyncAttribute("False")]
public virtual void Write(Byte[] buffer, int offset, int count);
    public virtual bool get_CanTimeout();
    public virtual bool get_CanRead();
    public virtual bool get_CanWrite();
    public virtual bool get_CanSeek();
    public virtual long get_Position();
    public virtual void set_Position(long value);
    public virtual long get_Length();
    [RewriteAsyncAttribute("False")]
private long GetLengthInternal();
    [RewriteAsyncAttribute("False")]
public virtual long Seek(long offset, SeekOrigin origin);
    [RewriteAsyncAttribute("False")]
public virtual void Flush();
    [RewriteAsyncAttribute("False")]
public virtual void SetLength(long value);
    public virtual void Close();
    protected virtual void Dispose(bool disposing);
}
public class Npgsql.NpgsqlNoticeEventArgs : EventArgs {
    [CompilerGeneratedAttribute]
private PostgresNotice <Notice>k__BackingField;
    public PostgresNotice Notice { get; private set; }
    internal NpgsqlNoticeEventArgs(PostgresNotice notice);
    [CompilerGeneratedAttribute]
public PostgresNotice get_Notice();
    [CompilerGeneratedAttribute]
private void set_Notice(PostgresNotice value);
}
public class Npgsql.NpgsqlNotificationEventArgs : EventArgs {
    public int PID;
    public string Condition;
    public string AdditionalInformation;
    internal NpgsqlNotificationEventArgs(ReadBuffer buf);
}
public class Npgsql.NpgsqlParameter : DbParameter {
    private byte _precision;
    private byte _scale;
    private int _size;
    private Nullable`1<NpgsqlDbType> _npgsqlDbType;
    private Nullable`1<DbType> _dbType;
    private Type _specificType;
    private string _name;
    private object _value;
    private object _npgsqlValue;
    [CompilerGeneratedAttribute]
private object <ConvertedValue>k__BackingField;
    [CompilerGeneratedAttribute]
private LengthCache <LengthCache>k__BackingField;
    [CompilerGeneratedAttribute]
private TypeHandler <Handler>k__BackingField;
    [CompilerGeneratedAttribute]
private FormatCode <FormatCode>k__BackingField;
    internal bool AutoAssignedName;
    [CompilerGeneratedAttribute]
private bool <IsNullable>k__BackingField;
    [CompilerGeneratedAttribute]
private ParameterDirection <Direction>k__BackingField;
    [CompilerGeneratedAttribute]
private string <SourceColumn>k__BackingField;
    [CompilerGeneratedAttribute]
private DataRowVersion <SourceVersion>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <SourceColumnNullMapping>k__BackingField;
    [CompilerGeneratedAttribute]
private NpgsqlParameterCollection <Collection>k__BackingField;
    internal object ConvertedValue { get; internal set; }
    internal LengthCache LengthCache { get; private set; }
    internal TypeHandler Handler { get; private set; }
    internal FormatCode FormatCode { get; private set; }
    [TypeConverterAttribute("System.ComponentModel.StringConverter")]
[CategoryAttribute("Data")]
public object Value { get; public set; }
    [CategoryAttribute("Data")]
[TypeConverterAttribute("System.ComponentModel.StringConverter")]
public object NpgsqlValue { get; public set; }
    public bool IsNullable { get; public set; }
    [DefaultValueAttribute("Mono.Cecil.CustomAttributeArgument")]
[CategoryAttribute("Data")]
public ParameterDirection Direction { get; public set; }
    [DefaultValueAttribute("0")]
[CategoryAttribute("Data")]
public byte Precision { get; public set; }
    [DefaultValueAttribute("0")]
[CategoryAttribute("Data")]
public byte Scale { get; public set; }
    [DefaultValueAttribute("0")]
[CategoryAttribute("Data")]
public int Size { get; public set; }
    [DefaultValueAttribute("Mono.Cecil.CustomAttributeArgument")]
[CategoryAttribute("Data")]
[RefreshPropertiesAttribute("1")]
public DbType DbType { get; public set; }
    [DefaultValueAttribute("Mono.Cecil.CustomAttributeArgument")]
[CategoryAttribute("Data")]
[RefreshPropertiesAttribute("1")]
public NpgsqlDbType NpgsqlDbType { get; public set; }
    [DefaultValueAttribute("")]
public string ParameterName { get; public set; }
    [DefaultValueAttribute("")]
[CategoryAttribute("Data")]
public string SourceColumn { get; public set; }
    [CategoryAttribute("Data")]
[DefaultValueAttribute("Mono.Cecil.CustomAttributeArgument")]
public DataRowVersion SourceVersion { get; public set; }
    public bool SourceColumnNullMapping { get; public set; }
    [ObsoleteAttribute("Use the SpecificType property instead")]
[PublicAPIAttribute]
public Type EnumType { get; public set; }
    [PublicAPIAttribute]
public Type SpecificType { get; public set; }
    [CanBeNullAttribute]
public NpgsqlParameterCollection Collection { get; public set; }
    internal string CleanName { get; }
    internal bool IsTypeExplicitlySet { get; }
    internal bool IsInputDirection { get; }
    internal bool IsOutputDirection { get; }
    public NpgsqlParameter(string parameterName, object value);
    public NpgsqlParameter(string parameterName, NpgsqlDbType parameterType);
    public NpgsqlParameter(string parameterName, DbType parameterType);
    public NpgsqlParameter(string parameterName, NpgsqlDbType parameterType, int size);
    public NpgsqlParameter(string parameterName, DbType parameterType, int size);
    public NpgsqlParameter(string parameterName, NpgsqlDbType parameterType, int size, string sourceColumn);
    public NpgsqlParameter(string parameterName, DbType parameterType, int size, string sourceColumn);
    public NpgsqlParameter(string parameterName, NpgsqlDbType parameterType, int size, string sourceColumn, ParameterDirection direction, bool isNullable, byte precision, byte scale, DataRowVersion sourceVersion, object value);
    public NpgsqlParameter(string parameterName, DbType parameterType, int size, string sourceColumn, ParameterDirection direction, bool isNullable, byte precision, byte scale, DataRowVersion sourceVersion, object value);
    [CompilerGeneratedAttribute]
internal object get_ConvertedValue();
    [CompilerGeneratedAttribute]
internal void set_ConvertedValue(object value);
    [CompilerGeneratedAttribute]
internal LengthCache get_LengthCache();
    [CompilerGeneratedAttribute]
private void set_LengthCache(LengthCache value);
    [CompilerGeneratedAttribute]
internal TypeHandler get_Handler();
    [CompilerGeneratedAttribute]
private void set_Handler(TypeHandler value);
    [CompilerGeneratedAttribute]
internal FormatCode get_FormatCode();
    [CompilerGeneratedAttribute]
private void set_FormatCode(FormatCode value);
    public virtual object get_Value();
    public virtual void set_Value(object value);
    public object get_NpgsqlValue();
    public void set_NpgsqlValue(object value);
    [CompilerGeneratedAttribute]
public virtual bool get_IsNullable();
    [CompilerGeneratedAttribute]
public virtual void set_IsNullable(bool value);
    [CompilerGeneratedAttribute]
public virtual ParameterDirection get_Direction();
    [CompilerGeneratedAttribute]
public virtual void set_Direction(ParameterDirection value);
    public byte get_Precision();
    public void set_Precision(byte value);
    public byte get_Scale();
    public void set_Scale(byte value);
    public virtual int get_Size();
    public virtual void set_Size(int value);
    public virtual DbType get_DbType();
    public virtual void set_DbType(DbType value);
    public NpgsqlDbType get_NpgsqlDbType();
    public void set_NpgsqlDbType(NpgsqlDbType value);
    public virtual string get_ParameterName();
    public virtual void set_ParameterName(string value);
    [CompilerGeneratedAttribute]
public virtual string get_SourceColumn();
    [CompilerGeneratedAttribute]
public virtual void set_SourceColumn(string value);
    [CompilerGeneratedAttribute]
public virtual DataRowVersion get_SourceVersion();
    [CompilerGeneratedAttribute]
public virtual void set_SourceVersion(DataRowVersion value);
    [CompilerGeneratedAttribute]
public virtual bool get_SourceColumnNullMapping();
    [CompilerGeneratedAttribute]
public virtual void set_SourceColumnNullMapping(bool value);
    public Type get_EnumType();
    public void set_EnumType(Type value);
    public Type get_SpecificType();
    public void set_SpecificType(Type value);
    [CompilerGeneratedAttribute]
public NpgsqlParameterCollection get_Collection();
    [CompilerGeneratedAttribute]
public void set_Collection(NpgsqlParameterCollection value);
    internal string get_CleanName();
    internal bool get_IsTypeExplicitlySet();
    internal void ResolveHandler(TypeHandlerRegistry registry);
    internal void Bind(TypeHandlerRegistry registry);
    internal int ValidateAndGetLength();
    private void ClearBind();
    public virtual void ResetDbType();
    internal bool get_IsInputDirection();
    internal bool get_IsOutputDirection();
    public NpgsqlParameter Clone();
    private sealed virtual override object System.ICloneable.Clone();
}
[DefaultMemberAttribute("Item")]
public class Npgsql.NpgsqlParameterCollection : DbParameterCollection {
    private List`1<NpgsqlParameter> _internalList;
    private Dictionary`2<string, int> _lookup;
    private Dictionary`2<string, int> _lookupIgnoreCase;
    [PublicAPIAttribute]
public NpgsqlParameter Item { get; public set; }
    [PublicAPIAttribute]
public NpgsqlParameter Item { get; public set; }
    public bool IsReadOnly { get; }
    public bool IsFixedSize { get; }
    public bool IsSynchronized { get; }
    public int Count { get; }
    public object SyncRoot { get; }
    internal void InvalidateHashLookups();
    public NpgsqlParameter get_Item(string parameterName);
    public void set_Item(string parameterName, NpgsqlParameter value);
    public NpgsqlParameter get_Item(int index);
    public void set_Item(int index, NpgsqlParameter value);
    public NpgsqlParameter Add(NpgsqlParameter value);
    [PublicAPIAttribute]
public NpgsqlParameter AddWithValue(string parameterName, object value);
    [PublicAPIAttribute]
public NpgsqlParameter AddWithValue(string parameterName, NpgsqlDbType parameterType, object value);
    [PublicAPIAttribute]
public NpgsqlParameter AddWithValue(string parameterName, NpgsqlDbType parameterType, int size, object value);
    [PublicAPIAttribute]
public NpgsqlParameter AddWithValue(string parameterName, NpgsqlDbType parameterType, int size, string sourceColumn, object value);
    [PublicAPIAttribute]
public NpgsqlParameter AddWithValue(object value);
    [PublicAPIAttribute]
public NpgsqlParameter AddWithValue(NpgsqlDbType parameterType, object value);
    [PublicAPIAttribute]
public NpgsqlParameter Add(string parameterName, NpgsqlDbType parameterType);
    [PublicAPIAttribute]
public NpgsqlParameter Add(string parameterName, NpgsqlDbType parameterType, int size);
    [PublicAPIAttribute]
public NpgsqlParameter Add(string parameterName, NpgsqlDbType parameterType, int size, string sourceColumn);
    [PublicAPIAttribute]
public virtual void RemoveAt(string parameterName);
    public virtual bool Contains(string parameterName);
    public virtual int IndexOf(string parameterName);
    public virtual bool get_IsReadOnly();
    public virtual void RemoveAt(int index);
    public virtual void Insert(int index, object oValue);
    [PublicAPIAttribute]
public void Remove(string parameterName);
    public virtual void Remove(object oValue);
    public virtual bool Contains(object value);
    [ContractAnnotationAttribute("=>true,parameter:notnull; =>false,parameter:null")]
public bool TryGetValue(string parameterName, NpgsqlParameter& parameter);
    public virtual void Clear();
    public virtual int IndexOf(object value);
    public virtual int Add(object value);
    public virtual bool get_IsFixedSize();
    public virtual bool get_IsSynchronized();
    public virtual int get_Count();
    public virtual void CopyTo(Array array, int index);
    public virtual object get_SyncRoot();
    private sealed virtual override IEnumerator`1<NpgsqlParameter> System.Collections.Generic.IEnumerable<Npgsql.NpgsqlParameter>.GetEnumerator();
    public virtual IEnumerator GetEnumerator();
    public virtual void AddRange(Array values);
    protected virtual DbParameter GetParameter(string parameterName);
    protected virtual DbParameter GetParameter(int index);
    protected virtual void SetParameter(string parameterName, DbParameter value);
    protected virtual void SetParameter(int index, DbParameter value);
    private void CheckType(object o);
    [PublicAPIAttribute]
public int IndexOf(NpgsqlParameter item);
    [PublicAPIAttribute]
public void Insert(int index, NpgsqlParameter item);
    [PublicAPIAttribute]
public bool Contains(NpgsqlParameter item);
    [PublicAPIAttribute]
public bool Remove(NpgsqlParameter item);
    [PublicAPIAttribute]
public void CopyTo(NpgsqlParameter[] array, int arrayIndex);
    [PublicAPIAttribute]
public NpgsqlParameter[] ToArray();
    internal void CloneTo(NpgsqlParameterCollection other);
}
internal class Npgsql.NpgsqlPromotableSinglePhaseNotification : object {
    private NpgsqlConnection _connection;
    private IsolationLevel _isolationLevel;
    private NpgsqlTransaction _npgsqlTx;
    private NpgsqlTransactionCallbacks _callbacks;
    private INpgsqlResourceManager _rm;
    private bool _inTransaction;
    private static NpgsqlLogger Log;
    private static INpgsqlResourceManager _resourceManager;
    private static ClientSponsor _sponser;
    internal bool InLocalTransaction { get; }
    public NpgsqlPromotableSinglePhaseNotification(NpgsqlConnection connection);
    private static NpgsqlPromotableSinglePhaseNotification();
    internal bool get_InLocalTransaction();
    public void Enlist(Transaction tx);
    public void Prepare();
    public sealed virtual void Initialize();
    public sealed virtual void Rollback(SinglePhaseEnlistment singlePhaseEnlistment);
    public sealed virtual void SinglePhaseCommit(SinglePhaseEnlistment singlePhaseEnlistment);
    public sealed virtual Byte[] Promote();
    private static INpgsqlResourceManager CreateResourceManager();
    private static IsolationLevel ConvertIsolationLevel(IsolationLevel _isolationLevel);
}
public class Npgsql.NpgsqlRawCopyStream : Stream {
    private NpgsqlConnector _connector;
    private ReadBuffer _readBuf;
    private WriteBuffer _writeBuf;
    private bool _writingDataMsg;
    private int _leftToReadInDataMsg;
    private bool _isDisposed;
    private bool _isConsumed;
    private bool _canRead;
    private bool _canWrite;
    [CompilerGeneratedAttribute]
private bool <IsBinary>k__BackingField;
    internal static Byte[] BinarySignature;
    internal bool IsBinary { get; private set; }
    public bool CanWrite { get; }
    public bool CanRead { get; }
    public bool CanSeek { get; }
    public long Length { get; }
    public long Position { get; public set; }
    internal NpgsqlRawCopyStream(NpgsqlConnector connector, string copyCommand);
    private static NpgsqlRawCopyStream();
    [CompilerGeneratedAttribute]
internal bool get_IsBinary();
    [CompilerGeneratedAttribute]
private void set_IsBinary(bool value);
    public virtual bool get_CanWrite();
    public virtual bool get_CanRead();
    public virtual void Write(Byte[] buffer, int offset, int count);
    public virtual void Flush();
    private void EnsureDataMessage();
    public virtual int Read(Byte[] buffer, int offset, int count);
    public sealed virtual void Cancel();
    protected virtual void Dispose(bool disposing);
    private void Cleanup();
    private void CheckDisposed();
    private void ObjectInvariants();
    public virtual bool get_CanSeek();
    public virtual long Seek(long offset, SeekOrigin origin);
    public virtual void SetLength(long value);
    public virtual long get_Length();
    public virtual long get_Position();
    public virtual void set_Position(long value);
}
internal class Npgsql.NpgsqlResourceManager : MarshalByRefObject {
    private Dictionary`2<string, CommittableTransaction> _transactions;
    public sealed virtual Byte[] Promote(INpgsqlTransactionCallbacks callbacks);
    public sealed virtual void Enlist(INpgsqlTransactionCallbacks callbacks, Byte[] txToken);
    public sealed virtual void CommitWork(string txName);
    public sealed virtual void RollbackWork(string txName);
}
public class Npgsql.NpgsqlRowUpdatedEventArgs : RowUpdatedEventArgs {
    public NpgsqlRowUpdatedEventArgs(DataRow dataRow, IDbCommand command, StatementType statementType, DataTableMapping tableMapping);
}
public class Npgsql.NpgsqlRowUpdatedEventHandler : MulticastDelegate {
    public NpgsqlRowUpdatedEventHandler(object object, IntPtr method);
    public virtual void Invoke(object sender, NpgsqlRowUpdatedEventArgs e);
    public virtual IAsyncResult BeginInvoke(object sender, NpgsqlRowUpdatedEventArgs e, AsyncCallback callback, object object);
    public virtual void EndInvoke(IAsyncResult result);
}
public class Npgsql.NpgsqlRowUpdatingEventArgs : RowUpdatingEventArgs {
    public NpgsqlRowUpdatingEventArgs(DataRow dataRow, IDbCommand command, StatementType statementType, DataTableMapping tableMapping);
}
public class Npgsql.NpgsqlRowUpdatingEventHandler : MulticastDelegate {
    public NpgsqlRowUpdatingEventHandler(object object, IntPtr method);
    public virtual void Invoke(object sender, NpgsqlRowUpdatingEventArgs e);
    public virtual IAsyncResult BeginInvoke(object sender, NpgsqlRowUpdatingEventArgs e, AsyncCallback callback, object object);
    public virtual void EndInvoke(IAsyncResult result);
}
internal static class Npgsql.NpgsqlSchema : object {
    private static string MetaDataResourceName;
    private static String[] ReservedKeywords;
    private static NpgsqlSchema();
    internal static DataTable GetMetaDataCollections();
    internal static DataTable GetRestrictions();
    private static NpgsqlCommand BuildCommand(NpgsqlConnection conn, StringBuilder query, String[] restrictions, String[] names);
    private static NpgsqlCommand BuildCommand(NpgsqlConnection conn, StringBuilder query, String[] restrictions, bool addWhere, String[] names);
    private static string RemoveSpecialChars(string paramName);
    internal static DataTable GetDatabases(NpgsqlConnection conn, String[] restrictions);
    internal static DataTable GetSchemata(NpgsqlConnection conn, String[] restrictions);
    internal static DataTable GetTables(NpgsqlConnection conn, String[] restrictions);
    internal static DataTable GetColumns(NpgsqlConnection conn, String[] restrictions);
    internal static DataTable GetViews(NpgsqlConnection conn, String[] restrictions);
    internal static DataTable GetUsers(NpgsqlConnection conn, String[] restrictions);
    internal static DataTable GetIndexes(NpgsqlConnection conn, String[] restrictions);
    internal static DataTable GetIndexColumns(NpgsqlConnection conn, String[] restrictions);
    internal static DataTable GetConstraints(NpgsqlConnection conn, String[] restrictions, string constraintType);
    internal static DataTable GetConstraintColumns(NpgsqlConnection conn, String[] restrictions);
    internal static DataTable GetDataSourceInformation();
    public static DataTable GetReservedWords();
    private static void LoadMetaDataXmlResource(DataSet dataSet);
}
public class Npgsql.NpgsqlSnakeCaseNameTranslator : object {
    public sealed virtual string TranslateTypeName(string clrName);
    public sealed virtual string TranslateMemberName(string clrName);
    private static string ClrToDatabaseName(string clrName);
}
public class Npgsql.NpgsqlStatement : object {
    [CompilerGeneratedAttribute]
private string <SQL>k__BackingField;
    [CompilerGeneratedAttribute]
private StatementType <StatementType>k__BackingField;
    [CompilerGeneratedAttribute]
private UInt32 <Rows>k__BackingField;
    [CompilerGeneratedAttribute]
private UInt32 <OID>k__BackingField;
    internal List`1<NpgsqlParameter> InputParameters;
    internal RowDescriptionMessage Description;
    internal string PreparedStatementName;
    public string SQL { get; }
    public StatementType StatementType { get; internal set; }
    public UInt32 Rows { get; internal set; }
    public UInt32 OID { get; internal set; }
    internal NpgsqlStatement(string sql, List`1<NpgsqlParameter> inputParameters, string preparedStatementName);
    [CompilerGeneratedAttribute]
public string get_SQL();
    [CompilerGeneratedAttribute]
public StatementType get_StatementType();
    [CompilerGeneratedAttribute]
internal void set_StatementType(StatementType value);
    [CompilerGeneratedAttribute]
public UInt32 get_Rows();
    [CompilerGeneratedAttribute]
internal void set_Rows(UInt32 value);
    [CompilerGeneratedAttribute]
public UInt32 get_OID();
    [CompilerGeneratedAttribute]
internal void set_OID(UInt32 value);
    public virtual string ToString();
}
internal class Npgsql.NpgsqlTimeout : ValueType {
    private DateTime _expiration;
    internal static NpgsqlTimeout Infinite;
    internal DateTime Expiration { get; }
    internal bool IsSet { get; }
    internal bool HasExpired { get; }
    internal TimeSpan TimeLeft { get; }
    internal NpgsqlTimeout(TimeSpan expiration);
    private static NpgsqlTimeout();
    internal DateTime get_Expiration();
    internal void Check();
    internal bool get_IsSet();
    internal bool get_HasExpired();
    internal TimeSpan get_TimeLeft();
}
public class Npgsql.NpgsqlTransaction : DbTransaction {
    [CompilerGeneratedAttribute]
private NpgsqlConnection <Connection>k__BackingField;
    private bool _isDisposed;
    private IsolationLevel _isolationLevel;
    private static IsolationLevel DefaultIsolationLevel;
    private static NpgsqlLogger Log;
    public NpgsqlConnection Connection { get; internal set; }
    public bool IsCompleted { get; }
    protected DbConnection DbConnection { get; }
    private NpgsqlConnector Connector { get; }
    public IsolationLevel IsolationLevel { get; }
    internal NpgsqlTransaction(NpgsqlConnection conn);
    internal NpgsqlTransaction(NpgsqlConnection conn, IsolationLevel isolationLevel);
    private static NpgsqlTransaction();
    [AsyncStateMachineAttribute("Npgsql.NpgsqlTransaction/<CommitInternalAsync>d__0")]
private Task CommitInternalAsync(CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Npgsql.NpgsqlTransaction/<RollbackInternalAsync>d__1")]
private Task RollbackInternalAsync(CancellationToken cancellationToken);
    [CompilerGeneratedAttribute]
public NpgsqlConnection get_Connection();
    [CompilerGeneratedAttribute]
internal void set_Connection(NpgsqlConnection value);
    public bool get_IsCompleted();
    protected virtual DbConnection get_DbConnection();
    private NpgsqlConnector get_Connector();
    public virtual IsolationLevel get_IsolationLevel();
    public virtual void Commit();
    [RewriteAsyncAttribute("False")]
private void CommitInternal();
    [PublicAPIAttribute]
public Task CommitAsync(CancellationToken cancellationToken);
    [PublicAPIAttribute]
public Task CommitAsync();
    public virtual void Rollback();
    [RewriteAsyncAttribute("False")]
private void RollbackInternal();
    [PublicAPIAttribute]
public Task RollbackAsync(CancellationToken cancellationToken);
    [PublicAPIAttribute]
public Task RollbackAsync();
    public void Save(string name);
    public void Rollback(string name);
    public void Release(string name);
    protected virtual void Dispose(bool disposing);
    private NpgsqlConnector CheckReady();
    private void CheckCompleted();
    private void CheckDisposed();
    private void ObjectInvariants();
}
internal class Npgsql.NpgsqlTransactionCallbacks : MarshalByRefObject {
    private NpgsqlConnection _connection;
    private string _connectionString;
    private bool _closeConnectionRequired;
    private bool _prepared;
    private string _txName;
    private static NpgsqlLogger Log;
    public NpgsqlTransactionCallbacks(NpgsqlConnection connection);
    private static NpgsqlTransactionCallbacks();
    private void _connection_Disposed(object sender, EventArgs e);
    private NpgsqlConnection GetConnection();
    public sealed virtual string GetName();
    public sealed virtual void CommitTransaction();
    public sealed virtual void PrepareTransaction();
    public sealed virtual void RollbackTransaction();
    public sealed virtual void Dispose();
}
internal static class Npgsql.PGUtil : object {
    internal static Byte[] EmptyBuffer;
    internal static UTF8Encoding UTF8Encoding;
    internal static UTF8Encoding RelaxedUTF8Encoding;
    internal static Task CompletedTask;
    internal static StringComparer InvariantCaseIgnoringStringComparer { get; }
    internal static bool IsWindows { get; }
    private static PGUtil();
    internal static void ValidateBackendMessageCode(BackendMessageCode code);
    public static int RotateShift(int val, int shift);
    internal static Task`1<TResult> TaskFromResult(TResult result);
    internal static StringComparer get_InvariantCaseIgnoringStringComparer();
    public static Exception ThrowIfReached(string message);
    internal static bool get_IsWindows();
}
internal static class Npgsql.PoolManager : object {
    [CompilerGeneratedAttribute]
private static ConcurrentDictionary`2<NpgsqlConnectionStringBuilder, ConnectorPool> <Pools>k__BackingField;
    internal static int PoolSizeLimit;
    internal static ConcurrentDictionary`2<NpgsqlConnectionStringBuilder, ConnectorPool> Pools { get; }
    private static PoolManager();
    [CompilerGeneratedAttribute]
internal static ConcurrentDictionary`2<NpgsqlConnectionStringBuilder, ConnectorPool> get_Pools();
    internal static ConnectorPool GetOrAdd(NpgsqlConnectionStringBuilder connString);
    internal static ConnectorPool Get(NpgsqlConnectionStringBuilder connString);
    internal static void ClearAll();
}
public class Npgsql.PostgresException : NpgsqlException {
    private ErrorOrNoticeMessage _msg;
    private Dictionary`2<string, object> _data;
    [CompilerGeneratedAttribute]
private NpgsqlStatement <Statement>k__BackingField;
    [PublicAPIAttribute]
public string Severity { get; }
    [PublicAPIAttribute]
public string SqlState { get; }
    [PublicAPIAttribute]
[ObsoleteAttribute("Use SqlState instead")]
public string Code { get; }
    [PublicAPIAttribute]
public string MessageText { get; }
    [PublicAPIAttribute]
public string Detail { get; }
    [PublicAPIAttribute]
public string Hint { get; }
    [PublicAPIAttribute]
public int Position { get; }
    [PublicAPIAttribute]
public int InternalPosition { get; }
    [PublicAPIAttribute]
public string InternalQuery { get; }
    [PublicAPIAttribute]
public string Where { get; }
    [PublicAPIAttribute]
public string SchemaName { get; }
    [PublicAPIAttribute]
public string TableName { get; }
    [PublicAPIAttribute]
public string ColumnName { get; }
    [PublicAPIAttribute]
public string DataTypeName { get; }
    [PublicAPIAttribute]
public string ConstraintName { get; }
    [PublicAPIAttribute]
public string File { get; }
    [PublicAPIAttribute]
public string Line { get; }
    [PublicAPIAttribute]
public string Routine { get; }
    public string Message { get; }
    public NpgsqlStatement Statement { get; internal set; }
    public IDictionary Data { get; }
    internal PostgresException(ReadBuffer buf);
    private PostgresException(SerializationInfo info, StreamingContext context);
    public string get_Severity();
    public string get_SqlState();
    public string get_Code();
    public string get_MessageText();
    public string get_Detail();
    public string get_Hint();
    public int get_Position();
    public int get_InternalPosition();
    public string get_InternalQuery();
    public string get_Where();
    public string get_SchemaName();
    public string get_TableName();
    public string get_ColumnName();
    public string get_DataTypeName();
    public string get_ConstraintName();
    public string get_File();
    public string get_Line();
    public string get_Routine();
    public virtual string get_Message();
    [CompilerGeneratedAttribute]
public NpgsqlStatement get_Statement();
    [CompilerGeneratedAttribute]
internal void set_Statement(NpgsqlStatement value);
    public virtual IDictionary get_Data();
    public virtual void GetObjectData(SerializationInfo info, StreamingContext context);
    [CompilerGeneratedAttribute]
private <>f__AnonymousType4`2<<>f__AnonymousType3`2<PropertyInfo, string>, object> <get_Data>b__46_3(<>f__AnonymousType3`2<PropertyInfo, string> <>h__TransparentIdentifier0);
}
public class Npgsql.PostgresNotice : object {
    private ErrorOrNoticeMessage _msg;
    public string Severity { get; }
    public string SqlState { get; }
    [ObsoleteAttribute("Use SqlState instead")]
public string Code { get; }
    public string MessageText { get; }
    public string Detail { get; }
    public string Hint { get; }
    public int Position { get; }
    public int InternalPosition { get; }
    public string InternalQuery { get; }
    public string Where { get; }
    public string SchemaName { get; }
    public string TableName { get; }
    public string ColumnName { get; }
    public string DataTypeName { get; }
    public string ConstraintName { get; }
    public string File { get; }
    public string Line { get; }
    public string Routine { get; }
    internal PostgresNotice(ReadBuffer buf);
    public string get_Severity();
    public string get_SqlState();
    public string get_Code();
    public string get_MessageText();
    public string get_Detail();
    public string get_Hint();
    public int get_Position();
    public int get_InternalPosition();
    public string get_InternalQuery();
    public string get_Where();
    public string get_SchemaName();
    public string get_TableName();
    public string get_ColumnName();
    public string get_DataTypeName();
    public string get_ConstraintName();
    public string get_File();
    public string get_Line();
    public string get_Routine();
}
public class Npgsql.ProvideClientCertificatesCallback : MulticastDelegate {
    public ProvideClientCertificatesCallback(object object, IntPtr method);
    public virtual void Invoke(X509CertificateCollection certificates);
    public virtual IAsyncResult BeginInvoke(X509CertificateCollection certificates, AsyncCallback callback, object object);
    public virtual void EndInvoke(IAsyncResult result);
}
internal class Npgsql.ReadBuffer : object {
    internal NpgsqlConnector Connector;
    [CompilerGeneratedAttribute]
private Stream <Underlying>k__BackingField;
    [CompilerGeneratedAttribute]
private int <Size>k__BackingField;
    [CompilerGeneratedAttribute]
private Encoding <TextEncoding>k__BackingField;
    [CompilerGeneratedAttribute]
private int <ReadPosition>k__BackingField;
    internal Byte[] _buf;
    private int _filledBytes;
    private Decoder _textDecoder;
    private Byte[] _workspace;
    private Char[] _tempCharBuf;
    internal static int MinimumBufferSize;
    internal static int DefaultBufferSize;
    private Stream Underlying { get; internal set; }
    internal int Size { get; }
    internal Encoding TextEncoding { get; }
    internal int ReadPosition { get; private set; }
    internal int ReadBytesLeft { get; }
    internal ReadBuffer(NpgsqlConnector connector, Stream stream, int size, Encoding textEncoding);
    [AsyncStateMachineAttribute("Npgsql.ReadBuffer/<EnsureAsync>d__0")]
internal Task EnsureAsync(int count, CancellationToken cancellationToken, bool dontBreakOnTimeouts);
    [AsyncStateMachineAttribute("Npgsql.ReadBuffer/<ReadMoreAsync>d__1")]
internal Task ReadMoreAsync(CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Npgsql.ReadBuffer/<EnsureOrAllocateTempAsync>d__2")]
internal Task`1<ReadBuffer> EnsureOrAllocateTempAsync(int count, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Npgsql.ReadBuffer/<SkipAsync>d__3")]
internal Task SkipAsync(long len, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Npgsql.ReadBuffer/<ReadAllBytesAsync>d__4")]
internal Task`1<int> ReadAllBytesAsync(Byte[] output, int outputOffset, int len, bool readOnce, CancellationToken cancellationToken);
    [CompilerGeneratedAttribute]
private Stream get_Underlying();
    [CompilerGeneratedAttribute]
internal void set_Underlying(Stream value);
    [CompilerGeneratedAttribute]
internal int get_Size();
    [CompilerGeneratedAttribute]
internal Encoding get_TextEncoding();
    [CompilerGeneratedAttribute]
internal int get_ReadPosition();
    [CompilerGeneratedAttribute]
private void set_ReadPosition(int value);
    internal int get_ReadBytesLeft();
    [RewriteAsyncAttribute("False")]
internal void Ensure(int count, bool dontBreakOnTimeouts);
    [RewriteAsyncAttribute("False")]
internal void ReadMore();
    [RewriteAsyncAttribute("False")]
internal ReadBuffer EnsureOrAllocateTemp(int count);
    [RewriteAsyncAttribute("False")]
internal void Skip(long len);
    internal byte ReadByte();
    internal short ReadInt16();
    internal ushort ReadUInt16();
    internal int ReadInt32();
    internal UInt32 ReadUInt32();
    internal long ReadInt64();
    internal float ReadSingle();
    internal double ReadDouble();
    internal string ReadString(int byteLen);
    internal Char[] ReadChars(int byteLen);
    internal void ReadBytes(Byte[] output, int outputOffset, int len);
    [RewriteAsyncAttribute("False")]
internal int ReadAllBytes(Byte[] output, int outputOffset, int len, bool readOnce);
    internal string ReadNullTerminatedString();
    internal string ReadNullTerminatedString(Encoding encoding);
    internal void ReadAllChars(Char[] output, int outputOffset, int charCount, int byteCount, Int32& bytesRead, Int32& charsRead);
    internal void SkipChars(int charCount, int byteCount, Int32& bytesSkipped, Int32& charsSkipped);
    internal int ReadInt32(ByteOrder bo);
    internal UInt32 ReadUInt32(ByteOrder bo);
    internal double ReadDouble(ByteOrder bo);
    internal void Seek(int offset, SeekOrigin origin);
    internal void Clear();
    internal void CopyTo(ReadBuffer other);
    internal MemoryStream GetMemoryStream(int len);
}
internal class Npgsql.RowCache : object {
    private List`1<CachedValue> _values;
    internal CachedValue`1<T> Get(int column);
    internal void Clear();
}
internal class Npgsql.SafeReadException : Exception {
    public SafeReadException(Exception innerException);
}
[DefaultMemberAttribute("Item")]
public abstract class Npgsql.Schema.DbColumn : object {
    [CompilerGeneratedAttribute]
private Nullable`1<bool> <AllowDBNull>k__BackingField;
    [CompilerGeneratedAttribute]
private string <BaseCatalogName>k__BackingField;
    [CompilerGeneratedAttribute]
private string <BaseColumnName>k__BackingField;
    [CompilerGeneratedAttribute]
private string <BaseSchemaName>k__BackingField;
    [CompilerGeneratedAttribute]
private string <BaseServerName>k__BackingField;
    [CompilerGeneratedAttribute]
private string <BaseTableName>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ColumnName>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<int> <ColumnOrdinal>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<int> <ColumnSize>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<bool> <IsAliased>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<bool> <IsAutoIncrement>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<bool> <IsExpression>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<bool> <IsHidden>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<bool> <IsIdentity>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<bool> <IsKey>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<bool> <IsLong>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<bool> <IsReadOnly>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<bool> <IsUnique>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<int> <NumericPrecision>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<int> <NumericScale>k__BackingField;
    [CompilerGeneratedAttribute]
private string <UdtAssemblyQualifiedName>k__BackingField;
    [CompilerGeneratedAttribute]
private Type <DataType>k__BackingField;
    [CompilerGeneratedAttribute]
private string <DataTypeName>k__BackingField;
    public Nullable`1<bool> AllowDBNull { get; protected set; }
    public string BaseCatalogName { get; protected set; }
    public string BaseColumnName { get; protected set; }
    public string BaseSchemaName { get; protected set; }
    public string BaseServerName { get; protected set; }
    public string BaseTableName { get; protected set; }
    public string ColumnName { get; protected set; }
    public Nullable`1<int> ColumnOrdinal { get; protected set; }
    public Nullable`1<int> ColumnSize { get; protected set; }
    public Nullable`1<bool> IsAliased { get; protected set; }
    public Nullable`1<bool> IsAutoIncrement { get; protected set; }
    public Nullable`1<bool> IsExpression { get; protected set; }
    public Nullable`1<bool> IsHidden { get; protected set; }
    public Nullable`1<bool> IsIdentity { get; protected set; }
    public Nullable`1<bool> IsKey { get; protected set; }
    public Nullable`1<bool> IsLong { get; protected set; }
    public Nullable`1<bool> IsReadOnly { get; protected set; }
    public Nullable`1<bool> IsUnique { get; protected set; }
    public Nullable`1<int> NumericPrecision { get; protected set; }
    public Nullable`1<int> NumericScale { get; protected set; }
    public string UdtAssemblyQualifiedName { get; protected set; }
    public Type DataType { get; protected set; }
    public string DataTypeName { get; protected set; }
    public object Item { get; }
    [CompilerGeneratedAttribute]
public Nullable`1<bool> get_AllowDBNull();
    [CompilerGeneratedAttribute]
protected void set_AllowDBNull(Nullable`1<bool> value);
    [CompilerGeneratedAttribute]
public string get_BaseCatalogName();
    [CompilerGeneratedAttribute]
protected void set_BaseCatalogName(string value);
    [CompilerGeneratedAttribute]
public string get_BaseColumnName();
    [CompilerGeneratedAttribute]
protected void set_BaseColumnName(string value);
    [CompilerGeneratedAttribute]
public string get_BaseSchemaName();
    [CompilerGeneratedAttribute]
protected void set_BaseSchemaName(string value);
    [CompilerGeneratedAttribute]
public string get_BaseServerName();
    [CompilerGeneratedAttribute]
protected void set_BaseServerName(string value);
    [CompilerGeneratedAttribute]
public string get_BaseTableName();
    [CompilerGeneratedAttribute]
protected void set_BaseTableName(string value);
    [CompilerGeneratedAttribute]
public string get_ColumnName();
    [CompilerGeneratedAttribute]
protected void set_ColumnName(string value);
    [CompilerGeneratedAttribute]
public Nullable`1<int> get_ColumnOrdinal();
    [CompilerGeneratedAttribute]
protected void set_ColumnOrdinal(Nullable`1<int> value);
    [CompilerGeneratedAttribute]
public Nullable`1<int> get_ColumnSize();
    [CompilerGeneratedAttribute]
protected void set_ColumnSize(Nullable`1<int> value);
    [CompilerGeneratedAttribute]
public Nullable`1<bool> get_IsAliased();
    [CompilerGeneratedAttribute]
protected void set_IsAliased(Nullable`1<bool> value);
    [CompilerGeneratedAttribute]
public Nullable`1<bool> get_IsAutoIncrement();
    [CompilerGeneratedAttribute]
protected void set_IsAutoIncrement(Nullable`1<bool> value);
    [CompilerGeneratedAttribute]
public Nullable`1<bool> get_IsExpression();
    [CompilerGeneratedAttribute]
protected void set_IsExpression(Nullable`1<bool> value);
    [CompilerGeneratedAttribute]
public Nullable`1<bool> get_IsHidden();
    [CompilerGeneratedAttribute]
protected void set_IsHidden(Nullable`1<bool> value);
    [CompilerGeneratedAttribute]
public Nullable`1<bool> get_IsIdentity();
    [CompilerGeneratedAttribute]
protected void set_IsIdentity(Nullable`1<bool> value);
    [CompilerGeneratedAttribute]
public Nullable`1<bool> get_IsKey();
    [CompilerGeneratedAttribute]
protected void set_IsKey(Nullable`1<bool> value);
    [CompilerGeneratedAttribute]
public Nullable`1<bool> get_IsLong();
    [CompilerGeneratedAttribute]
protected void set_IsLong(Nullable`1<bool> value);
    [CompilerGeneratedAttribute]
public Nullable`1<bool> get_IsReadOnly();
    [CompilerGeneratedAttribute]
protected void set_IsReadOnly(Nullable`1<bool> value);
    [CompilerGeneratedAttribute]
public Nullable`1<bool> get_IsUnique();
    [CompilerGeneratedAttribute]
protected void set_IsUnique(Nullable`1<bool> value);
    [CompilerGeneratedAttribute]
public Nullable`1<int> get_NumericPrecision();
    [CompilerGeneratedAttribute]
protected void set_NumericPrecision(Nullable`1<int> value);
    [CompilerGeneratedAttribute]
public Nullable`1<int> get_NumericScale();
    [CompilerGeneratedAttribute]
protected void set_NumericScale(Nullable`1<int> value);
    [CompilerGeneratedAttribute]
public string get_UdtAssemblyQualifiedName();
    [CompilerGeneratedAttribute]
protected void set_UdtAssemblyQualifiedName(string value);
    [CompilerGeneratedAttribute]
public Type get_DataType();
    [CompilerGeneratedAttribute]
protected void set_DataType(Type value);
    [CompilerGeneratedAttribute]
public string get_DataTypeName();
    [CompilerGeneratedAttribute]
protected void set_DataTypeName(string value);
    public virtual object get_Item(string property);
}
internal class Npgsql.Schema.DbColumnSchemaGenerator : object {
    private RowDescriptionMessage _rowDescription;
    private NpgsqlConnection _connection;
    private bool _fetchAdditionalInfo;
    private static string GetColumnsQuery;
    internal DbColumnSchemaGenerator(NpgsqlConnection connection, RowDescriptionMessage rowDescription, bool fetchAdditionalInfo);
    internal ReadOnlyCollection`1<NpgsqlDbColumn> GetColumnSchema();
    private NpgsqlDbColumn LoadColumnDefinition(NpgsqlDataReader reader);
    private NpgsqlDbColumn SetUpNonColumnField(FieldDescription field);
    private void ColumnPostConfig(NpgsqlDbColumn column, int typeModifier);
}
[DefaultMemberAttribute("Item")]
public class Npgsql.Schema.NpgsqlDbColumn : DbColumn {
    [CompilerGeneratedAttribute]
private UInt32 <TypeOID>k__BackingField;
    [CompilerGeneratedAttribute]
private UInt32 <TableOID>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<short> <ColumnAttributeNumber>k__BackingField;
    [CompilerGeneratedAttribute]
private string <DefaultValue>k__BackingField;
    public Nullable`1<bool> AllowDBNull { get; internal set; }
    public string BaseCatalogName { get; internal set; }
    public string BaseColumnName { get; internal set; }
    public string BaseSchemaName { get; internal set; }
    public string BaseServerName { get; internal set; }
    public string BaseTableName { get; internal set; }
    public string ColumnName { get; internal set; }
    public Nullable`1<int> ColumnOrdinal { get; internal set; }
    public Nullable`1<int> ColumnSize { get; internal set; }
    public Nullable`1<bool> IsAutoIncrement { get; internal set; }
    public Nullable`1<bool> IsKey { get; internal set; }
    public Nullable`1<bool> IsLong { get; internal set; }
    public Nullable`1<bool> IsReadOnly { get; internal set; }
    public Nullable`1<bool> IsUnique { get; internal set; }
    public Nullable`1<int> NumericPrecision { get; internal set; }
    public Nullable`1<int> NumericScale { get; internal set; }
    public string UdtAssemblyQualifiedName { get; internal set; }
    public Type DataType { get; internal set; }
    public string DataTypeName { get; internal set; }
    public UInt32 TypeOID { get; internal set; }
    public UInt32 TableOID { get; internal set; }
    public Nullable`1<short> ColumnAttributeNumber { get; internal set; }
    public string DefaultValue { get; internal set; }
    public object Item { get; }
    public Nullable`1<bool> get_AllowDBNull();
    internal void set_AllowDBNull(Nullable`1<bool> value);
    public string get_BaseCatalogName();
    internal void set_BaseCatalogName(string value);
    public string get_BaseColumnName();
    internal void set_BaseColumnName(string value);
    public string get_BaseSchemaName();
    internal void set_BaseSchemaName(string value);
    public string get_BaseServerName();
    internal void set_BaseServerName(string value);
    public string get_BaseTableName();
    internal void set_BaseTableName(string value);
    public string get_ColumnName();
    internal void set_ColumnName(string value);
    public Nullable`1<int> get_ColumnOrdinal();
    internal void set_ColumnOrdinal(Nullable`1<int> value);
    public Nullable`1<int> get_ColumnSize();
    internal void set_ColumnSize(Nullable`1<int> value);
    public Nullable`1<bool> get_IsAutoIncrement();
    internal void set_IsAutoIncrement(Nullable`1<bool> value);
    public Nullable`1<bool> get_IsKey();
    internal void set_IsKey(Nullable`1<bool> value);
    public Nullable`1<bool> get_IsLong();
    internal void set_IsLong(Nullable`1<bool> value);
    public Nullable`1<bool> get_IsReadOnly();
    internal void set_IsReadOnly(Nullable`1<bool> value);
    public Nullable`1<bool> get_IsUnique();
    internal void set_IsUnique(Nullable`1<bool> value);
    public Nullable`1<int> get_NumericPrecision();
    internal void set_NumericPrecision(Nullable`1<int> value);
    public Nullable`1<int> get_NumericScale();
    internal void set_NumericScale(Nullable`1<int> value);
    public string get_UdtAssemblyQualifiedName();
    internal void set_UdtAssemblyQualifiedName(string value);
    public Type get_DataType();
    internal void set_DataType(Type value);
    public string get_DataTypeName();
    internal void set_DataTypeName(string value);
    [CompilerGeneratedAttribute]
public UInt32 get_TypeOID();
    [CompilerGeneratedAttribute]
internal void set_TypeOID(UInt32 value);
    [CompilerGeneratedAttribute]
public UInt32 get_TableOID();
    [CompilerGeneratedAttribute]
internal void set_TableOID(UInt32 value);
    [CompilerGeneratedAttribute]
public Nullable`1<short> get_ColumnAttributeNumber();
    [CompilerGeneratedAttribute]
internal void set_ColumnAttributeNumber(Nullable`1<short> value);
    [CompilerGeneratedAttribute]
public string get_DefaultValue();
    [CompilerGeneratedAttribute]
internal void set_DefaultValue(string value);
    public virtual object get_Item(string property);
}
[PublicAPIAttribute]
public enum Npgsql.ServerCompatibilityMode : Enum {
    public int value__;
    public static ServerCompatibilityMode None;
    public static ServerCompatibilityMode Redshift;
}
internal abstract class Npgsql.SimpleFrontendMessage : FrontendMessage {
    internal int Length { get; }
    internal abstract virtual int get_Length();
    internal abstract virtual void WriteFully(WriteBuffer buf);
    internal sealed virtual bool Write(WriteBuffer buf);
}
internal abstract class Npgsql.SimpleTypeHandler`1 : TypeHandler`1<T> {
    internal SimpleTypeHandler`1(IBackendType backendType);
    [AsyncStateMachineAttribute("Npgsql.SimpleTypeHandler`1/<ReadFullyAsync>d__0`1")]
internal virtual Task`1<T2> ReadFullyAsync(ReadBuffer buf, int len, CancellationToken cancellationToken, FieldDescription fieldDescription);
    public abstract virtual T Read(ReadBuffer buf, int len, FieldDescription fieldDescription);
    public abstract virtual int ValidateAndGetLength(object value, NpgsqlParameter parameter);
    public abstract virtual void Write(object value, WriteBuffer buf, NpgsqlParameter parameter);
    [RewriteAsyncAttribute("True")]
internal virtual T2 ReadFully(ReadBuffer buf, int len, FieldDescription fieldDescription);
    public sealed virtual object ReadAsObject(ReadBuffer buf, int len, FieldDescription fieldDescription);
}
internal abstract class Npgsql.SimpleTypeHandlerWithPsv`2 : SimpleTypeHandler`1<T> {
    internal SimpleTypeHandlerWithPsv`2(IBackendType backendType);
    internal virtual Type GetProviderSpecificFieldType(FieldDescription fieldDescription);
    internal virtual object ReadPsvAsObjectFully(DataRowMessage row, FieldDescription fieldDescription);
    internal virtual object ReadPsvAsObjectFully(ReadBuffer buf, int len, FieldDescription fieldDescription);
    internal abstract virtual TPsv ReadPsv(ReadBuffer buf, int len, FieldDescription fieldDescription);
    private sealed virtual override TPsv Npgsql.ISimpleTypeHandler<TPsv>.Read(ReadBuffer buf, int len, FieldDescription fieldDescription);
    internal virtual ArrayHandler CreateArrayHandler(IBackendType arrayBackendType);
}
internal class Npgsql.SingleThreadSynchronizationContext : SynchronizationContext {
    private BlockingCollection`1<CallbackAndState> _tasks;
    [CanBeNullAttribute]
private Thread _thread;
    private static int ThreadStayAliveMs;
    private string _threadName;
    internal SingleThreadSynchronizationContext(string threadName);
    public virtual void Post(SendOrPostCallback callback, object state);
    public sealed virtual void Dispose();
    private void WorkLoop();
}
internal static class Npgsql.SqlQueryParser : object {
    internal static void ParseRawQuery(string sql, bool standardConformantStrings, NpgsqlParameterCollection parameters, List`1<NpgsqlStatement> queries);
    private static bool IsLetter(char ch);
    private static bool IsIdentifierStart(char ch);
    private static bool IsDollarTagIdentifier(char ch);
    private static bool IsIdentifier(char ch);
    private static bool IsParamNameChar(char ch);
}
[PublicAPIAttribute]
public enum Npgsql.SslMode : Enum {
    public int value__;
    public static SslMode Disable;
    public static SslMode Prefer;
    public static SslMode Require;
}
internal class Npgsql.SSPIHandler : object {
    private static int SecbufferVersion;
    private static int SecbufferToken;
    private static int SecEOk;
    private static int SecIContinueNeeded;
    private static int IscReqAllocateMemory;
    private static int SecurityNetworkDrep;
    private static int SecpkgCredOutbound;
    private bool _disposed;
    private string _sspiTarget;
    private SecHandle _sspiCred;
    private SecHandle _sspiCtx;
    private bool _isSSPICtxSet;
    internal SSPIHandler(string pghost, string krbsrvname, bool useGssapi);
    private static int AcquireCredentialsHandle(string pszPrincipal, string pszPackage, int fCredentialUse, IntPtr pvLogonID, IntPtr pAuthData, IntPtr pGetKeyFn, IntPtr pvGetKeyArgument, SecHandle& phCredential, SecHandle& ptsExpiry);
    private static int InitializeSecurityContext(SecHandle& phCredential, SecHandle& phContext, string pszTargetName, int fContextReq, int Reserved1, int TargetDataRep, SecBufferDesc& pInput, int Reserved2, SecHandle& phNewContext, SecBufferDesc& pOutput, Int32& pfContextAttr, SecHandle& ptsExpiry);
    private static int InitializeSecurityContext(SecHandle& phCredential, IntPtr phContext, string pszTargetName, int fContextReq, int Reserved1, int TargetDataRep, IntPtr pInput, int Reserved2, SecHandle& phNewContext, SecBufferDesc& pOutput, Int32& pfContextAttr, SecHandle& ptsExpiry);
    private static int FreeContextBuffer(IntPtr pvContextBuffer);
    private static int FreeCredentialsHandle(SecHandle& phCredential);
    private static int DeleteSecurityContext(SecHandle& phContext);
    internal Byte[] Continue(Byte[] authData);
    private void FreeHandles();
    protected virtual override void Finalize();
    public sealed virtual void Dispose();
    protected virtual void Dispose(bool disposing);
}
internal enum Npgsql.StatementOrPortal : Enum {
    public byte value__;
    public static StatementOrPortal Statement;
    public static StatementOrPortal Portal;
}
public enum Npgsql.StatementType : Enum {
    public int value__;
    public static StatementType Select;
    public static StatementType Insert;
    public static StatementType Delete;
    public static StatementType Update;
    public static StatementType CreateTableAs;
    public static StatementType Move;
    public static StatementType Fetch;
    public static StatementType Copy;
    public static StatementType Other;
}
[ExtensionAttribute]
internal static class Npgsql.TaskExtensions : object {
    [AsyncStateMachineAttribute("Npgsql.TaskExtensions/<WithTimeout>d__0`1")]
[ExtensionAttribute]
internal static Task`1<T> WithTimeout(Task`1<T> task, NpgsqlTimeout timeout);
    [AsyncStateMachineAttribute("Npgsql.TaskExtensions/<WithTimeout>d__1")]
[ExtensionAttribute]
internal static Task WithTimeout(Task task, NpgsqlTimeout timeout);
    [AsyncStateMachineAttribute("Npgsql.TaskExtensions/<WithCancellation>d__2`1")]
[ExtensionAttribute]
internal static Task`1<T> WithCancellation(Task`1<T> task, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Npgsql.TaskExtensions/<WithCancellation>d__3")]
[ExtensionAttribute]
internal static Task WithCancellation(Task task, CancellationToken cancellationToken);
    [ExtensionAttribute]
internal static Task`1<T> WithCancellationAndTimeout(Task`1<T> task, NpgsqlTimeout timeout, CancellationToken cancellationToken);
    [ExtensionAttribute]
internal static Task WithCancellationAndTimeout(Task task, NpgsqlTimeout timeout, CancellationToken cancellationToken);
}
internal enum Npgsql.TransactionStatus : Enum {
    public byte value__;
    public static TransactionStatus Idle;
    public static TransactionStatus InTransactionBlock;
    public static TransactionStatus InFailedTransactionBlock;
    public static TransactionStatus Pending;
}
internal class Npgsql.TypeAndMapping : ValueType {
    internal Type HandlerType;
    internal TypeMappingAttribute Mapping;
}
internal abstract class Npgsql.TypeHandler : object {
    [CompilerGeneratedAttribute]
private IBackendType <BackendType>k__BackingField;
    internal IBackendType BackendType { get; }
    internal bool PreferTextWrite { get; }
    internal string PgDisplayName { get; }
    internal TypeHandler(IBackendType backendType);
    [AsyncStateMachineAttribute("Npgsql.TypeHandler/<ReadFullyAsync>d__0`1")]
internal Task`1<T> ReadFullyAsync(DataRowMessage row, int len, CancellationToken cancellationToken, FieldDescription fieldDescription);
    [CompilerGeneratedAttribute]
internal IBackendType get_BackendType();
    internal abstract virtual Type GetFieldType(FieldDescription fieldDescription);
    internal abstract virtual Type GetProviderSpecificFieldType(FieldDescription fieldDescription);
    internal abstract virtual object ReadValueAsObjectFully(DataRowMessage row, FieldDescription fieldDescription);
    internal virtual object ReadPsvAsObjectFully(DataRowMessage row, FieldDescription fieldDescription);
    internal virtual bool get_PreferTextWrite();
    [RewriteAsyncAttribute("False")]
internal T ReadFully(DataRowMessage row, int len, FieldDescription fieldDescription);
    internal abstract virtual T ReadFully(ReadBuffer buf, int len, FieldDescription fieldDescription);
    internal abstract virtual Task`1<T> ReadFullyAsync(ReadBuffer buf, int len, CancellationToken cancellationToken, FieldDescription fieldDescription);
    internal abstract virtual object ReadValueAsObjectFully(ReadBuffer buf, int len, FieldDescription fieldDescription);
    internal virtual object ReadPsvAsObjectFully(ReadBuffer buf, int len, FieldDescription fieldDescription);
    internal abstract virtual ArrayHandler CreateArrayHandler(IBackendType arrayBackendType);
    internal abstract virtual TypeHandler CreateRangeHandler(IBackendType rangeBackendType);
    protected Exception CreateConversionException(Type clrType);
    protected Exception CreateConversionButNoParamException(Type clrType);
    internal string get_PgDisplayName();
    private void ObjectInvariants();
}
internal abstract class Npgsql.TypeHandler`1 : TypeHandler {
    internal TypeHandler`1(IBackendType backendType);
    internal virtual Type GetFieldType(FieldDescription fieldDescription);
    internal virtual Type GetProviderSpecificFieldType(FieldDescription fieldDescription);
    internal virtual object ReadValueAsObjectFully(DataRowMessage row, FieldDescription fieldDescription);
    internal virtual object ReadValueAsObjectFully(ReadBuffer buf, int len, FieldDescription fieldDescription);
    internal virtual ArrayHandler CreateArrayHandler(IBackendType arrayBackendType);
    internal virtual TypeHandler CreateRangeHandler(IBackendType rangeBackendType);
    private void ObjectInvariants();
}
[DefaultMemberAttribute("Item")]
internal class Npgsql.TypeHandlerRegistry : object {
    [CompilerGeneratedAttribute]
private NpgsqlConnector <Connector>k__BackingField;
    [CompilerGeneratedAttribute]
private TypeHandler <UnrecognizedTypeHandler>k__BackingField;
    [CompilerGeneratedAttribute]
private Dictionary`2<UInt32, TypeHandler> <ByOID>k__BackingField;
    private Dictionary`2<DbType, TypeHandler> _byDbType;
    private Dictionary`2<NpgsqlDbType, TypeHandler> _byNpgsqlDbType;
    private Dictionary`2<Type, TypeHandler> _byType;
    private Dictionary`2<Type, TypeHandler> _arrayHandlerByType;
    private BackendTypes _backendTypes;
    private int _globalMappingActivationCounter;
    private static int _globalMappingChangeCounter;
    internal static Dictionary`2<string, TypeAndMapping> HandlerTypes;
    private static Dictionary`2<NpgsqlDbType, TypeAndMapping> HandlerTypesByNpsgqlDbType;
    private static Dictionary`2<NpgsqlDbType, DbType> NpgsqlDbTypeToDbType;
    private static Dictionary`2<DbType, NpgsqlDbType> DbTypeToNpgsqlDbType;
    private static Dictionary`2<Type, NpgsqlDbType> TypeToNpgsqlDbType;
    private static Dictionary`2<Type, DbType> TypeToDbType;
    private static ConcurrentDictionary`2<string, BackendTypes> BackendTypeCache;
    private static ConcurrentDictionary`2<string, IEnumHandlerFactory> _globalEnumMappings;
    private static ConcurrentDictionary`2<string, ICompositeHandlerFactory> _globalCompositeMappings;
    private static INpgsqlNameTranslator DefaultNameTranslator;
    private static BackendTypes EmptyBackendTypes;
    private static NpgsqlLogger Log;
    private static string TypesQueryWithRange;
    private static string TypesQueryWithoutRange;
    internal NpgsqlConnector Connector { get; private set; }
    internal TypeHandler UnrecognizedTypeHandler { get; private set; }
    internal Dictionary`2<UInt32, TypeHandler> ByOID { get; private set; }
    internal static IDictionary`2<string, IEnumHandlerFactory> GlobalEnumMappings { get; }
    internal static IDictionary`2<string, ICompositeHandlerFactory> GlobalCompositeMappings { get; }
    internal TypeHandler Item { get; internal set; }
    internal TypeHandler Item { get; }
    internal TypeHandler Item { get; }
    internal TypeHandler Item { get; }
    internal TypeHandler Item { get; }
    private TypeHandlerRegistry(NpgsqlConnector connector);
    private static TypeHandlerRegistry();
    [AsyncStateMachineAttribute("Npgsql.TypeHandlerRegistry/<SetupAsync>d__0")]
internal static Task SetupAsync(NpgsqlConnector connector, NpgsqlTimeout timeout, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Npgsql.TypeHandlerRegistry/<LoadBackendTypesAsync>d__1")]
private static Task`1<BackendTypes> LoadBackendTypesAsync(NpgsqlConnector connector, NpgsqlTimeout timeout, CancellationToken cancellationToken);
    [CompilerGeneratedAttribute]
internal NpgsqlConnector get_Connector();
    [CompilerGeneratedAttribute]
private void set_Connector(NpgsqlConnector value);
    [CompilerGeneratedAttribute]
internal TypeHandler get_UnrecognizedTypeHandler();
    [CompilerGeneratedAttribute]
private void set_UnrecognizedTypeHandler(TypeHandler value);
    [CompilerGeneratedAttribute]
internal Dictionary`2<UInt32, TypeHandler> get_ByOID();
    [CompilerGeneratedAttribute]
private void set_ByOID(Dictionary`2<UInt32, TypeHandler> value);
    internal static IDictionary`2<string, IEnumHandlerFactory> get_GlobalEnumMappings();
    internal static IDictionary`2<string, ICompositeHandlerFactory> get_GlobalCompositeMappings();
    [RewriteAsyncAttribute("False")]
internal static void Setup(NpgsqlConnector connector, NpgsqlTimeout timeout);
    internal void ActivateGlobalMappings();
    private static string GenerateTypesQuery(bool withRange);
    [RewriteAsyncAttribute("False")]
private static BackendTypes LoadBackendTypes(NpgsqlConnector connector, NpgsqlTimeout timeout);
    private static void LoadBackendType(NpgsqlDataReader reader, BackendTypes types, NpgsqlConnector connector);
    internal void MapEnum(string pgName, INpgsqlNameTranslator nameTranslator);
    internal static void MapEnumGlobally(string pgName, INpgsqlNameTranslator nameTranslator);
    internal static void UnmapEnumGlobally(string pgName, INpgsqlNameTranslator nameTranslator);
    internal void MapComposite(string pgName, INpgsqlNameTranslator nameTranslator);
    internal static void MapCompositeGlobally(string pgName, INpgsqlNameTranslator nameTranslator);
    internal static void UnmapCompositeGlobally(string pgName, INpgsqlNameTranslator nameTranslator);
    private static string GenerateLoadCompositeQuery(bool withSchema);
    private BackendCompositeType GetCompositeType(string pgName);
    internal TypeHandler get_Item(UInt32 oid);
    internal void set_Item(UInt32 oid, TypeHandler value);
    internal bool TryGetByOID(UInt32 oid, TypeHandler& handler);
    internal TypeHandler get_Item(NpgsqlDbType npgsqlDbType, Type specificType);
    internal TypeHandler get_Item(DbType dbType);
    internal TypeHandler get_Item(object value);
    internal TypeHandler get_Item(Type type);
    internal static NpgsqlDbType ToNpgsqlDbType(DbType dbType);
    internal static NpgsqlDbType ToNpgsqlDbType(object value);
    private static NpgsqlDbType ToNpgsqlDbType(Type type);
    internal static DbType ToDbType(Type type);
    internal static DbType ToDbType(NpgsqlDbType npgsqlDbType);
    internal static void ClearBackendTypeCache();
    internal static void ClearBackendTypeCache(string connectionString);
    private static string GetPgName(INpgsqlNameTranslator nameTranslator);
    private BackendType GetBackendTypeByName(string pgName);
}
internal abstract class Npgsql.TypeHandlers.ArrayHandler : ChunkingTypeHandler`1<Array> {
    internal ArrayHandler(IBackendType backendType);
    internal abstract virtual Type GetElementFieldType(FieldDescription fieldDescription);
    internal abstract virtual Type GetElementPsvType(FieldDescription fieldDescription);
}
internal class Npgsql.TypeHandlers.ArrayHandler`1 : ArrayHandler {
    [CompilerGeneratedAttribute]
private int <LowerBound>k__BackingField;
    private Array _readValue;
    private IList _writeValue;
    private ReadState<TElement> _readState;
    private WriteState<TElement> _writeState;
    private IEnumerator _enumerator;
    private ReadBuffer _readBuf;
    private WriteBuffer _writeBuf;
    private LengthCache _lengthCache;
    private FieldDescription _fieldDescription;
    private int _dimensions;
    private Int32[] _dimLengths;
    private Int32[] _indices;
    private int _index;
    private int _elementLen;
    private bool _wroteElementLen;
    private bool _preparedRead;
    [CompilerGeneratedAttribute]
private TypeHandler <ElementHandler>k__BackingField;
    protected int LowerBound { get; protected set; }
    protected internal TypeHandler ElementHandler { get; protected set; }
    public ArrayHandler`1(IBackendType backendType, TypeHandler elementHandler, int lowerBound);
    public ArrayHandler`1(IBackendType backendType, TypeHandler elementHandler);
    [CompilerGeneratedAttribute]
protected int get_LowerBound();
    [CompilerGeneratedAttribute]
protected void set_LowerBound(int value);
    internal virtual Type GetFieldType(FieldDescription fieldDescription);
    internal virtual Type GetProviderSpecificFieldType(FieldDescription fieldDescription);
    internal virtual Type GetElementFieldType(FieldDescription fieldDescription);
    internal virtual Type GetElementPsvType(FieldDescription fieldDescription);
    [CompilerGeneratedAttribute]
protected internal TypeHandler get_ElementHandler();
    [CompilerGeneratedAttribute]
protected void set_ElementHandler(TypeHandler value);
    public virtual void PrepareRead(ReadBuffer buf, int len, FieldDescription fieldDescription);
    public virtual bool Read(Array& result);
    protected bool Read(Array& result);
    private bool ReadElementsOneDimensional();
    private bool ReadElementsMultidimensional();
    private bool MoveNextInMultidimensional();
    private bool ReadSingleElement(TElement2& element);
    public virtual void PrepareWrite(object value, WriteBuffer buf, LengthCache lengthCache, NpgsqlParameter parameter);
    public virtual bool Write(DirectBuffer& directBuf);
    public bool Write(DirectBuffer& directBuf);
    private bool WriteSingleElement(object element, DirectBuffer& directBuf);
    public virtual int ValidateAndGetLength(object value, LengthCache& lengthCache, NpgsqlParameter parameter);
    public int ValidateAndGetLength(object value, LengthCache& lengthCache, NpgsqlParameter parameter);
    private int GetSingleElementLength(object element, LengthCache& lengthCache, NpgsqlParameter parameter);
}
internal class Npgsql.TypeHandlers.ArrayHandlerWithPsv`2 : ArrayHandler`1<TNormal> {
    public ArrayHandlerWithPsv`2(IBackendType backendType, TypeHandler elementHandler);
    internal virtual Type GetElementPsvType(FieldDescription fieldDescription);
    internal virtual object ReadPsvAsObjectFully(DataRowMessage row, FieldDescription fieldDescription);
}
internal class Npgsql.TypeHandlers.BitStringArrayHandler : ArrayHandler`1<BitArray> {
    [CanBeNullAttribute]
private FieldDescription _fieldDescription;
    private object _value;
    public BitStringArrayHandler(IBackendType backendType, BitStringHandler elementHandler);
    internal virtual Type GetElementFieldType(FieldDescription fieldDescription);
    internal virtual Type GetElementPsvType(FieldDescription fieldDescription);
    public virtual void PrepareRead(ReadBuffer buf, int len, FieldDescription fieldDescription);
    public virtual bool Read(Array& result);
    public virtual void PrepareWrite(object value, WriteBuffer buf, LengthCache lengthCache, NpgsqlParameter parameter);
    public virtual bool Write(DirectBuffer& directBuf);
    public virtual int ValidateAndGetLength(object value, LengthCache& lengthCache, NpgsqlParameter parameter);
}
[TypeMappingAttribute("varbit", "39", "System.Collections.BitArray")]
[TypeMappingAttribute("bit", "25")]
internal class Npgsql.TypeHandlers.BitStringHandler : ChunkingTypeHandler`1<BitArray> {
    private ReadBuffer _readBuf;
    private WriteBuffer _writeBuf;
    private int _len;
    private BitArray _bitArray;
    private object _value;
    private int _pos;
    internal BitStringHandler(IBackendType backendType);
    internal virtual Type GetFieldType(FieldDescription fieldDescription);
    internal virtual Type GetProviderSpecificFieldType(FieldDescription fieldDescription);
    internal virtual ArrayHandler CreateArrayHandler(IBackendType backendType);
    internal virtual object ReadValueAsObjectFully(DataRowMessage row, FieldDescription fieldDescription);
    internal virtual object ReadValueAsObjectFully(ReadBuffer buf, int len, FieldDescription fieldDescription);
    public virtual void PrepareRead(ReadBuffer buf, int len, FieldDescription fieldDescription);
    private sealed virtual override bool Npgsql.IChunkingTypeHandler<System.Boolean>.Read(Boolean& result);
    public virtual bool Read(BitArray& result);
    public virtual int ValidateAndGetLength(object value, LengthCache& lengthCache, NpgsqlParameter parameter);
    public virtual void PrepareWrite(object value, WriteBuffer buf, LengthCache lengthCache, NpgsqlParameter parameter);
    public virtual bool Write(DirectBuffer& directBuf);
    private bool WriteBitArray(BitArray bitArray);
    private bool WriteBool(bool b);
    private bool WriteString(string str);
}
[TypeMappingAttribute("bool", "2", "3", "System.Boolean")]
internal class Npgsql.TypeHandlers.BoolHandler : SimpleTypeHandler`1<bool> {
    internal BoolHandler(IBackendType backendType);
    public virtual bool Read(ReadBuffer buf, int len, FieldDescription fieldDescription);
    public virtual int ValidateAndGetLength(object value, NpgsqlParameter parameter);
    public virtual void Write(object value, WriteBuffer buf, NpgsqlParameter parameter);
}
[TypeMappingAttribute("bytea", "4", "1", "Mono.Cecil.CustomAttributeArgument[]")]
internal class Npgsql.TypeHandlers.ByteaHandler : ChunkingTypeHandler`1<Byte[]> {
    private bool _returnedBuffer;
    private Byte[] _bytes;
    private int _pos;
    private ReadBuffer _readBuf;
    private WriteBuffer _writeBuf;
    private ArraySegment`1<byte> _value;
    internal ByteaHandler(IBackendType backendType);
    public virtual void PrepareRead(ReadBuffer buf, int len, FieldDescription fieldDescription);
    public virtual bool Read(Byte[]& result);
    public long GetBytes(DataRowMessage row, int offset, Byte[] output, int outputOffset, int len, FieldDescription field);
    public virtual int ValidateAndGetLength(object value, LengthCache& lengthCache, NpgsqlParameter parameter);
    public virtual void PrepareWrite(object value, WriteBuffer buf, LengthCache lengthCache, NpgsqlParameter parameter);
    public virtual bool Write(DirectBuffer& directBuf);
}
internal class Npgsql.TypeHandlers.CompositeHandler`1 : ChunkingTypeHandler`1<T> {
    private TypeHandlerRegistry _registry;
    private INpgsqlNameTranslator _nameTranslator;
    [CompilerGeneratedAttribute]
private List`1<RawCompositeField> <RawFields>k__BackingField;
    [CanBeNullAttribute]
private List`1<MemberDescriptor<T>> _members;
    private ReadBuffer _readBuf;
    private WriteBuffer _writeBuf;
    private LengthCache _lengthCache;
    private bool _preparedRead;
    private int _fieldIndex;
    private int _len;
    private object _value;
    private bool _wroteFieldHeader;
    public List`1<RawCompositeField> RawFields { get; public set; }
    public Type CompositeType { get; }
    internal CompositeHandler`1(IBackendType backendType, INpgsqlNameTranslator nameTranslator, TypeHandlerRegistry registry);
    [CompilerGeneratedAttribute]
public sealed virtual List`1<RawCompositeField> get_RawFields();
    [CompilerGeneratedAttribute]
public sealed virtual void set_RawFields(List`1<RawCompositeField> value);
    public sealed virtual Type get_CompositeType();
    public virtual void PrepareRead(ReadBuffer buf, int len, FieldDescription fieldDescription);
    public virtual bool Read(T& result);
    public virtual int ValidateAndGetLength(object value, LengthCache& lengthCache, NpgsqlParameter parameter);
    public virtual void PrepareWrite(object value, WriteBuffer buf, LengthCache lengthCache, NpgsqlParameter parameter);
    public virtual bool Write(DirectBuffer& directBuf);
    private void ResolveFieldsIfNeeded();
}
[TypeMappingAttribute("date", "7", "5", "NpgsqlTypes.NpgsqlDate")]
internal class Npgsql.TypeHandlers.DateTimeHandlers.DateHandler : SimpleTypeHandlerWithPsv`2<DateTime, NpgsqlDate> {
    internal static int PostgresEpochJdate;
    internal static int MonthsPerYear;
    private bool _convertInfinityDateTime;
    public DateHandler(IBackendType backendType, TypeHandlerRegistry registry);
    public virtual DateTime Read(ReadBuffer buf, int len, FieldDescription fieldDescription);
    internal virtual NpgsqlDate ReadPsv(ReadBuffer buf, int len, FieldDescription fieldDescription);
    public virtual int ValidateAndGetLength(object value, NpgsqlParameter parameter);
    public virtual void Write(object value, WriteBuffer buf, NpgsqlParameter parameter);
}
[TypeMappingAttribute("interval", "30", "Mono.Cecil.CustomAttributeArgument[]")]
internal class Npgsql.TypeHandlers.DateTimeHandlers.IntervalHandler : SimpleTypeHandlerWithPsv`2<TimeSpan, NpgsqlTimeSpan> {
    private bool _integerFormat;
    public IntervalHandler(IBackendType backendType, TypeHandlerRegistry registry);
    public virtual TimeSpan Read(ReadBuffer buf, int len, FieldDescription fieldDescription);
    internal virtual NpgsqlTimeSpan ReadPsv(ReadBuffer buf, int len, FieldDescription fieldDescription);
    public virtual int ValidateAndGetLength(object value, NpgsqlParameter parameter);
    public virtual void Write(object value, WriteBuffer buf, NpgsqlParameter parameter);
}
[TypeMappingAttribute("time", "20", "Mono.Cecil.CustomAttributeArgument[]")]
internal class Npgsql.TypeHandlers.DateTimeHandlers.TimeHandler : SimpleTypeHandler`1<TimeSpan> {
    private bool _integerFormat;
    public TimeHandler(IBackendType backendType, TypeHandlerRegistry registry);
    public virtual TimeSpan Read(ReadBuffer buf, int len, FieldDescription fieldDescription);
    public virtual int ValidateAndGetLength(object value, NpgsqlParameter parameter);
    public virtual void Write(object value, WriteBuffer buf, NpgsqlParameter parameter);
}
[TypeMappingAttribute("timestamp", "21", "Mono.Cecil.CustomAttributeArgument[]", "Mono.Cecil.CustomAttributeArgument[]", "6")]
internal class Npgsql.TypeHandlers.DateTimeHandlers.TimeStampHandler : SimpleTypeHandlerWithPsv`2<DateTime, NpgsqlDateTime> {
    private bool _integerFormat;
    protected bool _convertInfinityDateTime;
    internal TimeStampHandler(IBackendType backendType, TypeHandlerRegistry registry);
    public virtual DateTime Read(ReadBuffer buf, int len, FieldDescription fieldDescription);
    internal virtual NpgsqlDateTime ReadPsv(ReadBuffer buf, int len, FieldDescription fieldDescription);
    protected NpgsqlDateTime ReadTimeStamp(ReadBuffer buf, int len, FieldDescription fieldDescription);
    public virtual int ValidateAndGetLength(object value, NpgsqlParameter parameter);
    public virtual void Write(object value, WriteBuffer buf, NpgsqlParameter parameter);
}
[TypeMappingAttribute("timestamptz", "26", "27", "System.DateTimeOffset")]
internal class Npgsql.TypeHandlers.DateTimeHandlers.TimeStampTzHandler : TimeStampHandler {
    public TimeStampTzHandler(IBackendType backendType, TypeHandlerRegistry registry);
    public virtual DateTime Read(ReadBuffer buf, int len, FieldDescription fieldDescription);
    internal virtual NpgsqlDateTime ReadPsv(ReadBuffer buf, int len, FieldDescription fieldDescription);
    private sealed virtual override DateTimeOffset Npgsql.ISimpleTypeHandler<System.DateTimeOffset>.Read(ReadBuffer buf, int len, FieldDescription fieldDescription);
    public virtual void Write(object value, WriteBuffer buf, NpgsqlParameter parameter);
}
[TypeMappingAttribute("timetz", "31")]
internal class Npgsql.TypeHandlers.DateTimeHandlers.TimeTzHandler : SimpleTypeHandler`1<DateTimeOffset> {
    internal TimeTzHandler(IBackendType backendType);
    public virtual DateTimeOffset Read(ReadBuffer buf, int len, FieldDescription fieldDescription);
    private sealed virtual override DateTime Npgsql.ISimpleTypeHandler<System.DateTime>.Read(ReadBuffer buf, int len, FieldDescription fieldDescription);
    private sealed virtual override TimeSpan Npgsql.ISimpleTypeHandler<System.TimeSpan>.Read(ReadBuffer buf, int len, FieldDescription fieldDescription);
    public virtual int ValidateAndGetLength(object value, NpgsqlParameter parameter);
    public virtual void Write(object value, WriteBuffer buf, NpgsqlParameter parameter);
}
internal class Npgsql.TypeHandlers.EnumHandler`1 : SimpleTypeHandler`1<TEnum> {
    private Dictionary`2<TEnum, string> _enumToLabel;
    private Dictionary`2<string, TEnum> _labelToEnum;
    public Type EnumType { get; }
    internal EnumHandler`1(IBackendType backendType, INpgsqlNameTranslator nameTranslator);
    internal EnumHandler`1(IBackendType backendType, Dictionary`2<TEnum, string> enumToLabel, Dictionary`2<string, TEnum> labelToEnum);
    public sealed virtual Type get_EnumType();
    private static void GenerateMappings(INpgsqlNameTranslator nameTranslator, Dictionary`2<TEnum, string> enumToLabel, Dictionary`2<string, TEnum> labelToEnum);
    public virtual TEnum Read(ReadBuffer buf, int len, FieldDescription fieldDescription);
    public virtual int ValidateAndGetLength(object value, NpgsqlParameter parameter);
    public virtual void Write(object value, WriteBuffer buf, NpgsqlParameter parameter);
}
[TypeMappingAttribute("tsquery", "46", "Mono.Cecil.CustomAttributeArgument[]")]
internal class Npgsql.TypeHandlers.FullTextSearchHandlers.TsQueryHandler : ChunkingTypeHandler`1<NpgsqlTsQuery> {
    private static int MaxSingleTokenBytes;
    private ReadBuffer _readBuf;
    private WriteBuffer _writeBuf;
    private Stack`1<Tuple`2<NpgsqlTsQuery, int>> _nodes;
    private int _numTokens;
    private int _tokenPos;
    private int _bytesLeft;
    private NpgsqlTsQuery _value;
    private Stack`1<NpgsqlTsQuery> _stack;
    internal TsQueryHandler(IBackendType backendType);
    public virtual void PrepareRead(ReadBuffer buf, int len, FieldDescription fieldDescription);
    public virtual bool Read(NpgsqlTsQuery& result);
    private void InsertInTree(NpgsqlTsQuery node);
    public virtual int ValidateAndGetLength(object value, LengthCache& lengthCache, NpgsqlParameter parameter);
    private int GetNodeLength(NpgsqlTsQuery node);
    public virtual void PrepareWrite(object value, WriteBuffer buf, LengthCache lengthCache, NpgsqlParameter parameter);
    private int GetTokenCount(NpgsqlTsQuery node);
    public virtual bool Write(DirectBuffer& directBuf);
}
[TypeMappingAttribute("tsvector", "45", "NpgsqlTypes.NpgsqlTsVector")]
internal class Npgsql.TypeHandlers.FullTextSearchHandlers.TsVectorHandler : ChunkingTypeHandler`1<NpgsqlTsVector> {
    private static int MaxSingleLexemeBytes;
    private ReadBuffer _readBuf;
    private WriteBuffer _writeBuf;
    private List`1<Lexeme> _lexemes;
    private int _numLexemes;
    private int _lexemePos;
    private int _bytesLeft;
    private NpgsqlTsVector _value;
    internal TsVectorHandler(IBackendType backendType);
    public virtual void PrepareRead(ReadBuffer buf, int len, FieldDescription fieldDescription);
    public virtual bool Read(NpgsqlTsVector& result);
    public virtual int ValidateAndGetLength(object value, LengthCache& lengthCache, NpgsqlParameter parameter);
    public virtual void PrepareWrite(object value, WriteBuffer buf, LengthCache lengthCache, NpgsqlParameter parameter);
    public virtual bool Write(DirectBuffer& directBuf);
}
[TypeMappingAttribute("box", "3", "NpgsqlTypes.NpgsqlBox")]
internal class Npgsql.TypeHandlers.GeometricHandlers.BoxHandler : SimpleTypeHandler`1<NpgsqlBox> {
    internal BoxHandler(IBackendType backendType);
    public virtual NpgsqlBox Read(ReadBuffer buf, int len, FieldDescription fieldDescription);
    private sealed virtual override string Npgsql.ISimpleTypeHandler<System.String>.Read(ReadBuffer buf, int len, FieldDescription fieldDescription);
    public virtual int ValidateAndGetLength(object value, NpgsqlParameter parameter);
    public virtual void Write(object value, WriteBuffer buf, NpgsqlParameter parameter);
}
[TypeMappingAttribute("circle", "5", "NpgsqlTypes.NpgsqlCircle")]
internal class Npgsql.TypeHandlers.GeometricHandlers.CircleHandler : SimpleTypeHandler`1<NpgsqlCircle> {
    internal CircleHandler(IBackendType backendType);
    public virtual NpgsqlCircle Read(ReadBuffer buf, int len, FieldDescription fieldDescription);
    private sealed virtual override string Npgsql.ISimpleTypeHandler<System.String>.Read(ReadBuffer buf, int len, FieldDescription fieldDescription);
    public virtual int ValidateAndGetLength(object value, NpgsqlParameter parameter);
    public virtual void Write(object value, WriteBuffer buf, NpgsqlParameter parameter);
}
[TypeMappingAttribute("line", "10", "NpgsqlTypes.NpgsqlLine")]
internal class Npgsql.TypeHandlers.GeometricHandlers.LineHandler : SimpleTypeHandler`1<NpgsqlLine> {
    internal LineHandler(IBackendType backendType);
    public virtual NpgsqlLine Read(ReadBuffer buf, int len, FieldDescription fieldDescription);
    private sealed virtual override string Npgsql.ISimpleTypeHandler<System.String>.Read(ReadBuffer buf, int len, FieldDescription fieldDescription);
    public virtual int ValidateAndGetLength(object value, NpgsqlParameter parameter);
    public virtual void Write(object value, WriteBuffer buf, NpgsqlParameter parameter);
}
[TypeMappingAttribute("lseg", "11", "NpgsqlTypes.NpgsqlLSeg")]
internal class Npgsql.TypeHandlers.GeometricHandlers.LineSegmentHandler : SimpleTypeHandler`1<NpgsqlLSeg> {
    internal LineSegmentHandler(IBackendType backendType);
    public virtual NpgsqlLSeg Read(ReadBuffer buf, int len, FieldDescription fieldDescription);
    private sealed virtual override string Npgsql.ISimpleTypeHandler<System.String>.Read(ReadBuffer buf, int len, FieldDescription fieldDescription);
    public virtual int ValidateAndGetLength(object value, NpgsqlParameter parameter);
    public virtual void Write(object value, WriteBuffer buf, NpgsqlParameter parameter);
}
[TypeMappingAttribute("path", "14", "NpgsqlTypes.NpgsqlPath")]
internal class Npgsql.TypeHandlers.GeometricHandlers.PathHandler : ChunkingTypeHandler`1<NpgsqlPath> {
    private NpgsqlPath _value;
    private ReadBuffer _readBuf;
    private WriteBuffer _writeBuf;
    private int _index;
    internal PathHandler(IBackendType backendType);
    public virtual void PrepareRead(ReadBuffer buf, int len, FieldDescription fieldDescription);
    public virtual bool Read(NpgsqlPath& result);
    public virtual int ValidateAndGetLength(object value, LengthCache& lengthCache, NpgsqlParameter parameter);
    public virtual void PrepareWrite(object value, WriteBuffer buf, LengthCache lengthCache, NpgsqlParameter parameter);
    public virtual bool Write(DirectBuffer& directBuf);
}
[TypeMappingAttribute("point", "15", "NpgsqlTypes.NpgsqlPoint")]
internal class Npgsql.TypeHandlers.GeometricHandlers.PointHandler : SimpleTypeHandler`1<NpgsqlPoint> {
    internal PointHandler(IBackendType backendType);
    public virtual NpgsqlPoint Read(ReadBuffer buf, int len, FieldDescription fieldDescription);
    private sealed virtual override string Npgsql.ISimpleTypeHandler<System.String>.Read(ReadBuffer buf, int len, FieldDescription fieldDescription);
    public virtual int ValidateAndGetLength(object value, NpgsqlParameter parameter);
    public virtual void Write(object value, WriteBuffer buf, NpgsqlParameter parameter);
}
[TypeMappingAttribute("polygon", "16", "NpgsqlTypes.NpgsqlPolygon")]
internal class Npgsql.TypeHandlers.GeometricHandlers.PolygonHandler : ChunkingTypeHandler`1<NpgsqlPolygon> {
    private NpgsqlPolygon _value;
    private ReadBuffer _readBuf;
    private WriteBuffer _writeBuf;
    private int _index;
    internal PolygonHandler(IBackendType backendType);
    public virtual void PrepareRead(ReadBuffer buf, int len, FieldDescription fieldDescription);
    public virtual bool Read(NpgsqlPolygon& result);
    public virtual int ValidateAndGetLength(object value, LengthCache& lengthCache, NpgsqlParameter parameter);
    public virtual void PrepareWrite(object value, WriteBuffer buf, LengthCache lengthCache, NpgsqlParameter parameter);
    public virtual bool Write(DirectBuffer& directBuf);
}
[TypeMappingAttribute("hstore", "37", "Mono.Cecil.CustomAttributeArgument[]")]
internal class Npgsql.TypeHandlers.HstoreHandler : ChunkingTypeHandler`1<Dictionary`2<string, string>> {
    private ReadBuffer _readBuf;
    private WriteBuffer _writeBuf;
    private NpgsqlParameter _parameter;
    private LengthCache _lengthCache;
    private FieldDescription _fieldDescription;
    private IDictionary`2<string, string> _value;
    private IEnumerator`1<KeyValuePair`2<string, string>> _enumerator;
    private string _key;
    private int _numElements;
    private State _state;
    private TextHandler _textHandler;
    internal HstoreHandler(IBackendType backendType, TypeHandlerRegistry registry);
    public virtual int ValidateAndGetLength(object value, LengthCache& lengthCache, NpgsqlParameter parameter);
    public virtual void PrepareWrite(object value, WriteBuffer buf, LengthCache lengthCache, NpgsqlParameter parameter);
    public virtual bool Write(DirectBuffer& directBuf);
    public virtual void PrepareRead(ReadBuffer buf, int len, FieldDescription fieldDescription);
    public virtual bool Read(Dictionary`2& result);
    public sealed virtual bool Read(IDictionary`2& result);
    public sealed virtual bool Read(String& result);
    private void CleanupState();
}
internal interface Npgsql.TypeHandlers.ICompositeHandler {
    public Type CompositeType { get; }
    public List`1<RawCompositeField> RawFields { get; public set; }
    public abstract virtual Type get_CompositeType();
    public abstract virtual List`1<RawCompositeField> get_RawFields();
    public abstract virtual void set_RawFields(List`1<RawCompositeField> value);
}
internal interface Npgsql.TypeHandlers.ICompositeHandlerFactory {
    public abstract virtual ICompositeHandler Create(IBackendType backendType, TypeHandlerRegistry registry);
}
internal interface Npgsql.TypeHandlers.IEnumHandler {
    public Type EnumType { get; }
    public abstract virtual Type get_EnumType();
}
internal interface Npgsql.TypeHandlers.IEnumHandlerFactory {
    public abstract virtual IEnumHandler Create(IBackendType backendType);
}
[TypeMappingAttribute("char", "38")]
internal class Npgsql.TypeHandlers.InternalCharHandler : SimpleTypeHandler`1<char> {
    internal InternalCharHandler(IBackendType backendType);
    public virtual char Read(ReadBuffer buf, int len, FieldDescription fieldDescription);
    private sealed virtual override byte Npgsql.ISimpleTypeHandler<System.Byte>.Read(ReadBuffer buf, int len, FieldDescription fieldDescription);
    private sealed virtual override short Npgsql.ISimpleTypeHandler<System.Int16>.Read(ReadBuffer buf, int len, FieldDescription fieldDescription);
    private sealed virtual override int Npgsql.ISimpleTypeHandler<System.Int32>.Read(ReadBuffer buf, int len, FieldDescription fieldDescription);
    private sealed virtual override long Npgsql.ISimpleTypeHandler<System.Int64>.Read(ReadBuffer buf, int len, FieldDescription fieldDescription);
    public virtual int ValidateAndGetLength(object value, NpgsqlParameter parameter);
    public virtual void Write(object value, WriteBuffer buf, NpgsqlParameter parameter);
}
[TypeMappingAttribute("int2vector", "52")]
internal class Npgsql.TypeHandlers.InternalTypesHandlers.Int2VectorHandler : ArrayHandler`1<short> {
    private static NpgsqlLogger Log;
    public Int2VectorHandler(IBackendType backendType, TypeHandlerRegistry registry);
    private static Int2VectorHandler();
}
[TypeMappingAttribute("oidvector", "29")]
internal class Npgsql.TypeHandlers.InternalTypesHandlers.OIDVectorHandler : ArrayHandler`1<UInt32> {
    private static NpgsqlLogger Log;
    public OIDVectorHandler(IBackendType backendType, TypeHandlerRegistry registry);
    private static OIDVectorHandler();
}
[TypeMappingAttribute("tid", "53", "NpgsqlTypes.NpgsqlTid")]
internal class Npgsql.TypeHandlers.InternalTypesHandlers.TidHandler : SimpleTypeHandler`1<NpgsqlTid> {
    internal TidHandler(IBackendType backendType);
    public virtual NpgsqlTid Read(ReadBuffer buf, int len, FieldDescription fieldDescription);
    private sealed virtual override string Npgsql.ISimpleTypeHandler<System.String>.Read(ReadBuffer buf, int len, FieldDescription fieldDescription);
    public virtual int ValidateAndGetLength(object value, NpgsqlParameter parameter);
    public virtual void Write(object value, WriteBuffer buf, NpgsqlParameter parameter);
}
[TypeMappingAttribute("jsonb", "36")]
internal class Npgsql.TypeHandlers.JsonbHandler : ChunkingTypeHandler`1<string> {
    private static byte JsonbProtocolVersion;
    private bool _handledVersion;
    private ReadBuffer _readBuf;
    private WriteBuffer _writeBuf;
    private TextHandler _textHandler;
    internal JsonbHandler(IBackendType backendType, TypeHandlerRegistry registry);
    public virtual int ValidateAndGetLength(object value, LengthCache& lengthCache, NpgsqlParameter parameter);
    public virtual void PrepareWrite(object value, WriteBuffer buf, LengthCache lengthCache, NpgsqlParameter parameter);
    public virtual bool Write(DirectBuffer& directBuf);
    public virtual void PrepareRead(ReadBuffer buf, int len, FieldDescription fieldDescription);
    public virtual bool Read(String& result);
    public sealed virtual TextReader GetTextReader(Stream stream);
}
[TypeMappingAttribute("money", "12", "4", "")]
internal class Npgsql.TypeHandlers.MoneyHandler : SimpleTypeHandler`1<decimal> {
    internal MoneyHandler(IBackendType backendType);
    public virtual decimal Read(ReadBuffer buf, int len, FieldDescription fieldDescription);
    public virtual int ValidateAndGetLength(object value, NpgsqlParameter parameter);
    public virtual void Write(object value, WriteBuffer buf, NpgsqlParameter parameter);
}
[TypeMappingAttribute("cidr", "44")]
internal class Npgsql.TypeHandlers.NetworkHandlers.CidrHandler : SimpleTypeHandler`1<NpgsqlInet> {
    internal CidrHandler(IBackendType backendType);
    public virtual NpgsqlInet Read(ReadBuffer buf, int len, FieldDescription fieldDescription);
    private sealed virtual override string Npgsql.ISimpleTypeHandler<System.String>.Read(ReadBuffer buf, int len, FieldDescription fieldDescription);
    public virtual int ValidateAndGetLength(object value, NpgsqlParameter parameter);
    public virtual void Write(object value, WriteBuffer buf, NpgsqlParameter parameter);
}
[TypeMappingAttribute("inet", "24", "Mono.Cecil.CustomAttributeArgument[]")]
internal class Npgsql.TypeHandlers.NetworkHandlers.InetHandler : SimpleTypeHandlerWithPsv`2<IPAddress, NpgsqlInet> {
    private static byte IPv4;
    private static byte IPv6;
    internal InetHandler(IBackendType backendType);
    public virtual IPAddress Read(ReadBuffer buf, int len, FieldDescription fieldDescription);
    internal static NpgsqlInet DoRead(ReadBuffer buf, FieldDescription fieldDescription, int len, bool isCidrHandler);
    internal virtual NpgsqlInet ReadPsv(ReadBuffer buf, int len, FieldDescription fieldDescription);
    private sealed virtual override string Npgsql.ISimpleTypeHandler<System.String>.Read(ReadBuffer buf, int len, FieldDescription fieldDescription);
    internal static int DoValidateAndGetLength(object value);
    public virtual int ValidateAndGetLength(object value, NpgsqlParameter parameter);
    internal static void DoWrite(object value, WriteBuffer buf, bool isCidrHandler);
    public virtual void Write(object value, WriteBuffer buf, NpgsqlParameter parameter);
}
[TypeMappingAttribute("macaddr", "34", "System.Net.NetworkInformation.PhysicalAddress")]
internal class Npgsql.TypeHandlers.NetworkHandlers.MacaddrHandler : SimpleTypeHandler`1<PhysicalAddress> {
    internal MacaddrHandler(IBackendType backendType);
    public virtual PhysicalAddress Read(ReadBuffer buf, int len, FieldDescription fieldDescription);
    private sealed virtual override string Npgsql.ISimpleTypeHandler<System.String>.Read(ReadBuffer buf, int len, FieldDescription fieldDescription);
    public virtual int ValidateAndGetLength(object value, NpgsqlParameter parameter);
    public virtual void Write(object value, WriteBuffer buf, NpgsqlParameter parameter);
}
[TypeMappingAttribute("float8", "8", "8", "System.Double")]
internal class Npgsql.TypeHandlers.NumericHandlers.DoubleHandler : SimpleTypeHandler`1<double> {
    internal DoubleHandler(IBackendType backendType);
    public virtual double Read(ReadBuffer buf, int len, FieldDescription fieldDescription);
    public virtual int ValidateAndGetLength(object value, NpgsqlParameter parameter);
    public virtual void Write(object value, WriteBuffer buf, NpgsqlParameter parameter);
}
[TypeMappingAttribute("int2", "18", "Mono.Cecil.CustomAttributeArgument[]", "Mono.Cecil.CustomAttributeArgument[]", "10")]
internal class Npgsql.TypeHandlers.NumericHandlers.Int16Handler : SimpleTypeHandler`1<short> {
    internal Int16Handler(IBackendType backendType);
    public virtual short Read(ReadBuffer buf, int len, FieldDescription fieldDescription);
    private sealed virtual override byte Npgsql.ISimpleTypeHandler<System.Byte>.Read(ReadBuffer buf, int len, FieldDescription fieldDescription);
    private sealed virtual override sbyte Npgsql.ISimpleTypeHandler<System.SByte>.Read(ReadBuffer buf, int len, FieldDescription fieldDescription);
    private sealed virtual override int Npgsql.ISimpleTypeHandler<System.Int32>.Read(ReadBuffer buf, int len, FieldDescription fieldDescription);
    private sealed virtual override long Npgsql.ISimpleTypeHandler<System.Int64>.Read(ReadBuffer buf, int len, FieldDescription fieldDescription);
    private sealed virtual override float Npgsql.ISimpleTypeHandler<System.Single>.Read(ReadBuffer buf, int len, FieldDescription fieldDescription);
    private sealed virtual override double Npgsql.ISimpleTypeHandler<System.Double>.Read(ReadBuffer buf, int len, FieldDescription fieldDescription);
    private sealed virtual override decimal Npgsql.ISimpleTypeHandler<System.Decimal>.Read(ReadBuffer buf, int len, FieldDescription fieldDescription);
    private sealed virtual override string Npgsql.ISimpleTypeHandler<System.String>.Read(ReadBuffer buf, int len, FieldDescription fieldDescription);
    public virtual int ValidateAndGetLength(object value, NpgsqlParameter parameter);
    public virtual void Write(object value, WriteBuffer buf, NpgsqlParameter parameter);
}
[TypeMappingAttribute("int4", "9", "11", "System.Int32")]
internal class Npgsql.TypeHandlers.NumericHandlers.Int32Handler : SimpleTypeHandler`1<int> {
    internal Int32Handler(IBackendType backendType);
    public virtual int Read(ReadBuffer buf, int len, FieldDescription fieldDescription);
    private sealed virtual override byte Npgsql.ISimpleTypeHandler<System.Byte>.Read(ReadBuffer buf, int len, FieldDescription fieldDescription);
    private sealed virtual override short Npgsql.ISimpleTypeHandler<System.Int16>.Read(ReadBuffer buf, int len, FieldDescription fieldDescription);
    private sealed virtual override long Npgsql.ISimpleTypeHandler<System.Int64>.Read(ReadBuffer buf, int len, FieldDescription fieldDescription);
    private sealed virtual override float Npgsql.ISimpleTypeHandler<System.Single>.Read(ReadBuffer buf, int len, FieldDescription fieldDescription);
    private sealed virtual override double Npgsql.ISimpleTypeHandler<System.Double>.Read(ReadBuffer buf, int len, FieldDescription fieldDescription);
    private sealed virtual override decimal Npgsql.ISimpleTypeHandler<System.Decimal>.Read(ReadBuffer buf, int len, FieldDescription fieldDescription);
    private sealed virtual override string Npgsql.ISimpleTypeHandler<System.String>.Read(ReadBuffer buf, int len, FieldDescription fieldDescription);
    public virtual int ValidateAndGetLength(object value, NpgsqlParameter parameter);
    public virtual void Write(object value, WriteBuffer buf, NpgsqlParameter parameter);
}
[TypeMappingAttribute("int8", "1", "12", "System.Int64")]
internal class Npgsql.TypeHandlers.NumericHandlers.Int64Handler : SimpleTypeHandler`1<long> {
    internal Int64Handler(IBackendType backendType);
    public virtual long Read(ReadBuffer buf, int len, FieldDescription fieldDescription);
    private sealed virtual override byte Npgsql.ISimpleTypeHandler<System.Byte>.Read(ReadBuffer buf, int len, FieldDescription fieldDescription);
    private sealed virtual override short Npgsql.ISimpleTypeHandler<System.Int16>.Read(ReadBuffer buf, int len, FieldDescription fieldDescription);
    private sealed virtual override int Npgsql.ISimpleTypeHandler<System.Int32>.Read(ReadBuffer buf, int len, FieldDescription fieldDescription);
    private sealed virtual override float Npgsql.ISimpleTypeHandler<System.Single>.Read(ReadBuffer buf, int len, FieldDescription fieldDescription);
    private sealed virtual override double Npgsql.ISimpleTypeHandler<System.Double>.Read(ReadBuffer buf, int len, FieldDescription fieldDescription);
    private sealed virtual override decimal Npgsql.ISimpleTypeHandler<System.Decimal>.Read(ReadBuffer buf, int len, FieldDescription fieldDescription);
    private sealed virtual override string Npgsql.ISimpleTypeHandler<System.String>.Read(ReadBuffer buf, int len, FieldDescription fieldDescription);
    public virtual int ValidateAndGetLength(object value, NpgsqlParameter parameter);
    public virtual void Write(object value, WriteBuffer buf, NpgsqlParameter parameter);
}
[TypeMappingAttribute("numeric", "13", "Mono.Cecil.CustomAttributeArgument[]", "System.Decimal", "7")]
internal class Npgsql.TypeHandlers.NumericHandlers.NumericHandler : SimpleTypeHandler`1<decimal> {
    private static Decimal[] Decimals;
    internal NumericHandler(IBackendType backendType);
    private static NumericHandler();
    public virtual decimal Read(ReadBuffer buf, int len, FieldDescription fieldDescription);
    private sealed virtual override byte Npgsql.ISimpleTypeHandler<System.Byte>.Read(ReadBuffer buf, int len, FieldDescription fieldDescription);
    private sealed virtual override short Npgsql.ISimpleTypeHandler<System.Int16>.Read(ReadBuffer buf, int len, FieldDescription fieldDescription);
    private sealed virtual override int Npgsql.ISimpleTypeHandler<System.Int32>.Read(ReadBuffer buf, int len, FieldDescription fieldDescription);
    private sealed virtual override long Npgsql.ISimpleTypeHandler<System.Int64>.Read(ReadBuffer buf, int len, FieldDescription fieldDescription);
    private sealed virtual override float Npgsql.ISimpleTypeHandler<System.Single>.Read(ReadBuffer buf, int len, FieldDescription fieldDescription);
    private sealed virtual override double Npgsql.ISimpleTypeHandler<System.Double>.Read(ReadBuffer buf, int len, FieldDescription fieldDescription);
    private sealed virtual override string Npgsql.ISimpleTypeHandler<System.String>.Read(ReadBuffer buf, int len, FieldDescription fieldDescription);
    private void GetNumericHeader(decimal num, Int32& numGroups, Int32& weight, Int32& fractionDigits);
    public virtual int ValidateAndGetLength(object value, NpgsqlParameter parameter);
    public virtual void Write(object value, WriteBuffer buf, NpgsqlParameter parameter);
}
[TypeMappingAttribute("float4", "17", "15", "System.Single")]
internal class Npgsql.TypeHandlers.NumericHandlers.SingleHandler : SimpleTypeHandler`1<float> {
    internal SingleHandler(IBackendType backendType);
    public virtual float Read(ReadBuffer buf, int len, FieldDescription fieldDescription);
    private sealed virtual override double Npgsql.ISimpleTypeHandler<System.Double>.Read(ReadBuffer buf, int len, FieldDescription fieldDescription);
    public virtual int ValidateAndGetLength(object value, NpgsqlParameter parameter);
    public virtual void Write(object value, WriteBuffer buf, NpgsqlParameter parameter);
}
[TypeMappingAttribute("oid", "41")]
[TypeMappingAttribute("xid", "42")]
[TypeMappingAttribute("cid", "43")]
[TypeMappingAttribute("regtype", "49")]
internal class Npgsql.TypeHandlers.NumericHandlers.UInt32Handler : SimpleTypeHandler`1<UInt32> {
    internal UInt32Handler(IBackendType backendType);
    public virtual UInt32 Read(ReadBuffer buf, int len, FieldDescription fieldDescription);
    public virtual int ValidateAndGetLength(object value, NpgsqlParameter parameter);
    public virtual void Write(object value, WriteBuffer buf, NpgsqlParameter parameter);
}
[TypeMappingAttribute("geometry", "50", "Mono.Cecil.CustomAttributeArgument[]")]
internal class Npgsql.TypeHandlers.PostgisGeometryHandler : ChunkingTypeHandler`1<PostgisGeometry> {
    private Nullable`1<UInt32> _srid;
    private UInt32 _id;
    private UInt32 _lastId;
    private bool _newGeom;
    private int _ipol;
    private int _ipts;
    private int _irng;
    private ReadBuffer _readBuf;
    private WriteBuffer _writeBuf;
    private ByteOrder _bo;
    private Coordinate2D[] _points;
    private Coordinate2D[][] _rings;
    private Coordinate2D[][][] _pols;
    private Stack`1<PostgisGeometry[]> _geoms;
    private Stack`1<int> _icol;
    private PostgisGeometry _toWrite;
    [CanBeNullAttribute]
private ByteaHandler _byteaHandler;
    private Nullable`1<bool> _inByteaMode;
    private Byte[] _bytes;
    private int _len;
    private static NpgsqlLogger Log;
    internal PostgisGeometryHandler(IBackendType backendType, TypeHandlerRegistry registry);
    private static PostgisGeometryHandler();
    public virtual void PrepareRead(ReadBuffer buf, int len, FieldDescription fieldDescription);
    private void Reset();
    public virtual bool Read(PostgisGeometry& result);
    public sealed virtual bool Read(Byte[]& result);
    private bool ReadConcrete(T& result);
    public sealed virtual bool Read(PostgisPoint& result);
    public sealed virtual bool Read(PostgisMultiPoint& result);
    public sealed virtual bool Read(PostgisLineString& result);
    public sealed virtual bool Read(PostgisMultiLineString& result);
    public sealed virtual bool Read(PostgisPolygon& result);
    public sealed virtual bool Read(PostgisMultiPolygon& result);
    public sealed virtual bool Read(PostgisGeometryCollection& result);
    public virtual int ValidateAndGetLength(object value, LengthCache& lengthCache, NpgsqlParameter parameter);
    public virtual void PrepareWrite(object value, WriteBuffer buf, LengthCache lengthCache, NpgsqlParameter parameter);
    private bool Write(PostgisGeometry geom);
    private bool WriteBytes(DirectBuffer& buf);
    public virtual bool Write(DirectBuffer& buf);
}
internal class Npgsql.TypeHandlers.RangeHandler`1 : ChunkingTypeHandler`1<NpgsqlRange`1<TElement>> {
    [CompilerGeneratedAttribute]
private TypeHandler <ElementHandler>k__BackingField;
    private ReadBuffer _readBuf;
    private WriteBuffer _writeBuf;
    private LengthCache _lengthCache;
    private NpgsqlRange`1<TElement> _value;
    private State<TElement> _state;
    private FieldDescription _fieldDescription;
    private int _elementLen;
    private bool _wroteElementLen;
    private bool _preparedRead;
    public TypeHandler ElementHandler { get; }
    public RangeHandler`1(IBackendType backendType, TypeHandler`1<TElement> elementHandler);
    [CompilerGeneratedAttribute]
public TypeHandler get_ElementHandler();
    internal virtual TypeHandler CreateRangeHandler(IBackendType backendType);
    private void CleanupState();
    public virtual void PrepareRead(ReadBuffer buf, int len, FieldDescription fieldDescription);
    public virtual bool Read(NpgsqlRange`1& result);
    private bool ReadSingleElement(TElement& element);
    public virtual int ValidateAndGetLength(object value, LengthCache& lengthCache, NpgsqlParameter parameter);
    public virtual void PrepareWrite(object value, WriteBuffer buf, LengthCache lengthCache, NpgsqlParameter parameter);
    public virtual bool Write(DirectBuffer& directBuf);
    private bool WriteSingleElement(object element, DirectBuffer& directBuf);
}
internal class Npgsql.TypeHandlers.RawCompositeField : ValueType {
    internal string PgName;
    internal UInt32 TypeOID;
    public virtual string ToString();
}
[TypeMappingAttribute("record")]
internal class Npgsql.TypeHandlers.RecordHandler : ChunkingTypeHandler`1<Object[]> {
    private TypeHandlerRegistry _registry;
    private ReadBuffer _readBuf;
    private int _fieldIndex;
    private int _fieldCount;
    private int _fieldLen;
    private TypeHandler _fieldHandler;
    private Object[] _value;
    public RecordHandler(IBackendType backendType, TypeHandlerRegistry registry);
    public virtual void PrepareRead(ReadBuffer buf, int len, FieldDescription fieldDescription);
    public virtual bool Read(Object[]& result);
    public virtual int ValidateAndGetLength(object value, LengthCache& lengthCache, NpgsqlParameter parameter);
    public virtual void PrepareWrite(object value, WriteBuffer buf, LengthCache lengthCache, NpgsqlParameter parameter);
    public virtual bool Write(DirectBuffer& directBuf);
}
internal class Npgsql.TypeHandlers.SequentialByteaStream : Stream {
    private DataRowMessage _row;
    private bool _disposed;
    public long Length { get; }
    public long Position { get; public set; }
    public bool CanRead { get; }
    public bool CanSeek { get; }
    public bool CanWrite { get; }
    internal SequentialByteaStream(DataRowMessage row);
    public virtual int Read(Byte[] buffer, int offset, int count);
    [AsyncStateMachineAttribute("Npgsql.TypeHandlers.SequentialByteaStream/<ReadAsync>d__4")]
public virtual Task`1<int> ReadAsync(Byte[] buffer, int offset, int count, CancellationToken token);
    public virtual long get_Length();
    public virtual long get_Position();
    public virtual void set_Position(long value);
    protected virtual void Dispose(bool disposing);
    public virtual bool get_CanRead();
    public virtual bool get_CanSeek();
    public virtual bool get_CanWrite();
    private void CheckDisposed();
    public virtual void Flush();
    public virtual long Seek(long offset, SeekOrigin origin);
    public virtual void SetLength(long value);
    public virtual void Write(Byte[] buffer, int offset, int count);
}
[TypeMappingAttribute("text", "19", "Mono.Cecil.CustomAttributeArgument[]", "Mono.Cecil.CustomAttributeArgument[]", "16")]
[TypeMappingAttribute("xml", "28", "25", "")]
[TypeMappingAttribute("varchar", "22", "16")]
[TypeMappingAttribute("bpchar", "6", "16")]
[TypeMappingAttribute("name", "32", "16")]
[TypeMappingAttribute("json", "35", "16")]
[TypeMappingAttribute("refcursor", "23", "16")]
[TypeMappingAttribute("citext", "51", "16")]
[TypeMappingAttribute("unknown")]
internal class Npgsql.TypeHandlers.TextHandler : ChunkingTypeHandler`1<string> {
    private Encoding _encoding;
    [CanBeNullAttribute]
private string _str;
    [CanBeNullAttribute]
private Char[] _chars;
    private Byte[] _tempBuf;
    private int _byteLen;
    private int _charLen;
    private int _bytePos;
    private int _charPos;
    private ReadBuffer _readBuf;
    private WriteBuffer _writeBuf;
    private Char[] _singleCharArray;
    internal bool PreferTextWrite { get; }
    internal TextHandler(IBackendType backendType, TypeHandlerRegistry registry);
    internal virtual bool get_PreferTextWrite();
    internal virtual void PrepareRead(ReadBuffer buf, FieldDescription fieldDescription, int len);
    public virtual void PrepareRead(ReadBuffer buf, int len, FieldDescription fieldDescription);
    public virtual bool Read(String& result);
    public sealed virtual bool Read(Char[]& result);
    public long GetChars(DataRowMessage row, int charOffset, Char[] output, int outputOffset, int charsCount, FieldDescription field);
    public virtual int ValidateAndGetLength(object value, LengthCache& lengthCache, NpgsqlParameter parameter);
    public virtual void PrepareWrite(object value, WriteBuffer buf, LengthCache lengthCache, NpgsqlParameter parameter);
    public virtual bool Write(DirectBuffer& directBuf);
    public sealed virtual TextReader GetTextReader(Stream stream);
}
internal class Npgsql.TypeHandlers.UnrecognizedBackendType : object {
    public string Namespace { get; }
    public string Name { get; }
    public UInt32 OID { get; }
    public Nullable`1<NpgsqlDbType> NpgsqlDbType { get; }
    public string FullName { get; }
    public string DisplayName { get; }
    public sealed virtual string get_Namespace();
    public sealed virtual string get_Name();
    public sealed virtual UInt32 get_OID();
    public sealed virtual Nullable`1<NpgsqlDbType> get_NpgsqlDbType();
    public sealed virtual string get_FullName();
    public sealed virtual string get_DisplayName();
}
internal class Npgsql.TypeHandlers.UnrecognizedTypeHandler : TextHandler {
    private static IBackendType UnrecognizedBackendType;
    internal UnrecognizedTypeHandler(TypeHandlerRegistry registry);
    private static UnrecognizedTypeHandler();
    internal virtual void PrepareRead(ReadBuffer buf, FieldDescription fieldDescription, int len);
}
[TypeMappingAttribute("uuid", "27", "9", "System.Guid")]
internal class Npgsql.TypeHandlers.UuidHandler : SimpleTypeHandler`1<Guid> {
    internal UuidHandler(IBackendType backendType);
    public virtual Guid Read(ReadBuffer buf, int len, FieldDescription fieldDescription);
    private sealed virtual override string Npgsql.ISimpleTypeHandler<System.String>.Read(ReadBuffer buf, int len, FieldDescription fieldDescription);
    public virtual int ValidateAndGetLength(object value, NpgsqlParameter parameter);
    public virtual void Write(object value, WriteBuffer buf, NpgsqlParameter parameter);
}
[TypeMappingAttribute("void")]
internal class Npgsql.TypeHandlers.VoidHandler : SimpleTypeHandler`1<DBNull> {
    internal VoidHandler(IBackendType backendType);
    public virtual DBNull Read(ReadBuffer buf, int len, FieldDescription fieldDescription);
    public virtual int ValidateAndGetLength(object value, NpgsqlParameter parameter);
    public virtual void Write(object value, WriteBuffer buf, NpgsqlParameter parameter);
}
[AttributeUsageAttribute("4")]
[MeansImplicitUseAttribute]
internal class Npgsql.TypeMappingAttribute : Attribute {
    [CompilerGeneratedAttribute]
private string <PgName>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<NpgsqlDbType> <NpgsqlDbType>k__BackingField;
    [CompilerGeneratedAttribute]
private DbType[] <DbTypes>k__BackingField;
    [CompilerGeneratedAttribute]
private Type[] <ClrTypes>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<DbType> <InferredDbType>k__BackingField;
    internal string PgName { get; private set; }
    internal Nullable`1<NpgsqlDbType> NpgsqlDbType { get; private set; }
    internal DbType[] DbTypes { get; private set; }
    internal Type[] ClrTypes { get; private set; }
    internal Nullable`1<DbType> InferredDbType { get; private set; }
    internal TypeMappingAttribute(string pgName, Nullable`1<NpgsqlDbType> npgsqlDbType, DbType[] dbTypes, Type[] clrTypes, Nullable`1<DbType> inferredDbType);
    internal TypeMappingAttribute(string pgName, NpgsqlDbType npgsqlDbType, DbType[] dbTypes, Type[] clrTypes, DbType inferredDbType);
    internal TypeMappingAttribute(string pgName, NpgsqlDbType npgsqlDbType);
    internal TypeMappingAttribute(string pgName, NpgsqlDbType npgsqlDbType, DbType inferredDbType);
    internal TypeMappingAttribute(string pgName, NpgsqlDbType npgsqlDbType, DbType[] dbTypes, Type clrType, DbType inferredDbType);
    internal TypeMappingAttribute(string pgName, NpgsqlDbType npgsqlDbType, DbType[] dbTypes);
    internal TypeMappingAttribute(string pgName, NpgsqlDbType npgsqlDbType, DbType dbType, Type[] clrTypes);
    internal TypeMappingAttribute(string pgName, NpgsqlDbType npgsqlDbType, DbType dbType, Type clrType);
    internal TypeMappingAttribute(string pgName, NpgsqlDbType npgsqlDbType, Type[] clrTypes, DbType inferredDbType);
    internal TypeMappingAttribute(string pgName, NpgsqlDbType npgsqlDbType, Type[] clrTypes);
    internal TypeMappingAttribute(string pgName, NpgsqlDbType npgsqlDbType, Type clrType, DbType inferredDbType);
    internal TypeMappingAttribute(string pgName, NpgsqlDbType npgsqlDbType, Type clrType);
    internal TypeMappingAttribute(string pgName);
    [CompilerGeneratedAttribute]
internal string get_PgName();
    [CompilerGeneratedAttribute]
private void set_PgName(string value);
    [CompilerGeneratedAttribute]
internal Nullable`1<NpgsqlDbType> get_NpgsqlDbType();
    [CompilerGeneratedAttribute]
private void set_NpgsqlDbType(Nullable`1<NpgsqlDbType> value);
    [CompilerGeneratedAttribute]
internal DbType[] get_DbTypes();
    [CompilerGeneratedAttribute]
private void set_DbTypes(DbType[] value);
    [CompilerGeneratedAttribute]
internal Type[] get_ClrTypes();
    [CompilerGeneratedAttribute]
private void set_ClrTypes(Type[] value);
    [CompilerGeneratedAttribute]
internal Nullable`1<DbType> get_InferredDbType();
    [CompilerGeneratedAttribute]
private void set_InferredDbType(Nullable`1<DbType> value);
    public virtual string ToString();
    private void ObjectInvariants();
}
internal static class Npgsql.WindowsUsernameProvider : object {
    private static Dictionary`2<SecurityIdentifier, CachedUpn> CachedUpns;
    private static WindowsUsernameProvider();
    [CanBeNullAttribute]
internal static string GetUserName(bool includeRealm);
    private static string GetWindowsIdentityUserName(bool includeRealm);
}
internal class Npgsql.WriteBuffer : object {
    internal NpgsqlConnector Connector;
    [CompilerGeneratedAttribute]
private Stream <Underlying>k__BackingField;
    [CompilerGeneratedAttribute]
private int <Size>k__BackingField;
    private int _usableSize;
    [CompilerGeneratedAttribute]
private Encoding <TextEncoding>k__BackingField;
    [CompilerGeneratedAttribute]
private long <TotalBytesFlushed>k__BackingField;
    internal Byte[] _buf;
    private Encoder _textEncoder;
    private int _writePosition;
    private BitConverterUnion _bitConverterUnion;
    internal static int MinimumBufferSize;
    internal static int DefaultBufferSize;
    private Stream Underlying { get; internal set; }
    internal int Size { get; }
    internal int UsableSize { get; internal set; }
    internal Encoding TextEncoding { get; }
    internal int WritePosition { get; internal set; }
    internal int WriteSpaceLeft { get; }
    internal long TotalBytesFlushed { get; private set; }
    internal WriteBuffer(NpgsqlConnector connector, Stream stream, int size, Encoding textEncoding);
    [AsyncStateMachineAttribute("Npgsql.WriteBuffer/<FlushAsync>d__0")]
internal Task FlushAsync(CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Npgsql.WriteBuffer/<DirectWriteAsync>d__1")]
internal Task DirectWriteAsync(Byte[] buffer, int offset, int count, CancellationToken cancellationToken);
    [CompilerGeneratedAttribute]
private Stream get_Underlying();
    [CompilerGeneratedAttribute]
internal void set_Underlying(Stream value);
    [CompilerGeneratedAttribute]
internal int get_Size();
    internal int get_UsableSize();
    internal void set_UsableSize(int value);
    [CompilerGeneratedAttribute]
internal Encoding get_TextEncoding();
    internal int get_WritePosition();
    internal void set_WritePosition(int value);
    internal int get_WriteSpaceLeft();
    [CompilerGeneratedAttribute]
internal long get_TotalBytesFlushed();
    [CompilerGeneratedAttribute]
private void set_TotalBytesFlushed(long value);
    [RewriteAsyncAttribute("False")]
internal void Flush();
    [AsyncStateMachineAttribute("Npgsql.WriteBuffer/<FlushAsyncWithSyncContext>d__34")]
internal Task FlushAsyncWithSyncContext(CancellationToken cancellationToken);
    [RewriteAsyncAttribute("False")]
internal void DirectWrite(Byte[] buffer, int offset, int count);
    [AsyncStateMachineAttribute("Npgsql.WriteBuffer/<DirectWriteAsyncWithSyncContext>d__36")]
internal Task DirectWriteAsyncWithSyncContext(Byte[] buffer, int offset, int count, CancellationToken cancellationToken);
    public void WriteByte(byte b);
    public void WriteInt16(int i);
    public void WriteUInt16(int i);
    public void WriteInt32(int i);
    internal void WriteUInt32(UInt32 i);
    public void WriteInt64(long i);
    public void WriteSingle(float f);
    public void WriteDouble(double d);
    internal void WriteString(string s, int len);
    internal void WriteChars(Char[] chars, int len);
    public void WriteBytes(Byte[] buf, int offset, int count);
    public void WriteBytesNullTerminated(Byte[] buf);
    internal void WriteStringChunked(Char[] chars, int charIndex, int charCount, bool flush, Int32& charsUsed, Boolean& completed);
    internal void Clear();
    internal void ResetTotalBytesFlushed();
}
public class NpgsqlTypes.Coordinate2D : ValueType {
    public double X;
    public double Y;
    public Coordinate2D(double x, double y);
    public bool Equals(Coordinate2D c);
    public virtual int GetHashCode();
}
[FlagsAttribute]
internal enum NpgsqlTypes.EwkbModifier : Enum {
    public UInt32 value__;
    public static EwkbModifier HasSRID;
    public static EwkbModifier HasMDim;
    public static EwkbModifier HasZDim;
}
public class NpgsqlTypes.NpgsqlBox : ValueType {
    private static Regex Regex;
    [CompilerGeneratedAttribute]
private NpgsqlPoint <UpperRight>k__BackingField;
    [CompilerGeneratedAttribute]
private NpgsqlPoint <LowerLeft>k__BackingField;
    public NpgsqlPoint UpperRight { get; public set; }
    public NpgsqlPoint LowerLeft { get; public set; }
    public double Left { get; }
    public double Right { get; }
    public double Bottom { get; }
    public double Top { get; }
    public double Width { get; }
    public double Height { get; }
    public bool IsEmpty { get; }
    public NpgsqlBox(NpgsqlPoint upperRight, NpgsqlPoint lowerLeft);
    public NpgsqlBox(double top, double right, double bottom, double left);
    private static NpgsqlBox();
    [CompilerGeneratedAttribute]
public NpgsqlPoint get_UpperRight();
    [CompilerGeneratedAttribute]
public void set_UpperRight(NpgsqlPoint value);
    [CompilerGeneratedAttribute]
public NpgsqlPoint get_LowerLeft();
    [CompilerGeneratedAttribute]
public void set_LowerLeft(NpgsqlPoint value);
    public double get_Left();
    public double get_Right();
    public double get_Bottom();
    public double get_Top();
    public double get_Width();
    public double get_Height();
    public bool get_IsEmpty();
    public sealed virtual bool Equals(NpgsqlBox other);
    public virtual bool Equals(object obj);
    public static bool op_Equality(NpgsqlBox x, NpgsqlBox y);
    public static bool op_Inequality(NpgsqlBox x, NpgsqlBox y);
    public virtual string ToString();
    public static NpgsqlBox Parse(string s);
    public virtual int GetHashCode();
}
public class NpgsqlTypes.NpgsqlCircle : ValueType {
    private static Regex Regex;
    [CompilerGeneratedAttribute]
private double <X>k__BackingField;
    [CompilerGeneratedAttribute]
private double <Y>k__BackingField;
    [CompilerGeneratedAttribute]
private double <Radius>k__BackingField;
    public double X { get; public set; }
    public double Y { get; public set; }
    public double Radius { get; public set; }
    public NpgsqlPoint Center { get; public set; }
    public NpgsqlCircle(NpgsqlPoint center, double radius);
    public NpgsqlCircle(double x, double y, double radius);
    private static NpgsqlCircle();
    [CompilerGeneratedAttribute]
public double get_X();
    [CompilerGeneratedAttribute]
public void set_X(double value);
    [CompilerGeneratedAttribute]
public double get_Y();
    [CompilerGeneratedAttribute]
public void set_Y(double value);
    [CompilerGeneratedAttribute]
public double get_Radius();
    [CompilerGeneratedAttribute]
public void set_Radius(double value);
    public NpgsqlPoint get_Center();
    public void set_Center(NpgsqlPoint value);
    public sealed virtual bool Equals(NpgsqlCircle other);
    public virtual bool Equals(object obj);
    public static NpgsqlCircle Parse(string s);
    public virtual string ToString();
    public static bool op_Equality(NpgsqlCircle x, NpgsqlCircle y);
    public static bool op_Inequality(NpgsqlCircle x, NpgsqlCircle y);
    public virtual int GetHashCode();
}
public class NpgsqlTypes.NpgsqlDate : ValueType {
    private int _daysSinceEra;
    private InternalType _type;
    private static Int32[] CommonYearDays;
    private static Int32[] LeapYearDays;
    private static Int32[] CommonYearMaxes;
    private static Int32[] LeapYearMaxes;
    public static NpgsqlDate Epoch;
    public static NpgsqlDate Era;
    [PublicAPIAttribute]
public static int MaxYear;
    [PublicAPIAttribute]
public static int MinYear;
    [PublicAPIAttribute]
public static NpgsqlDate MaxCalculableValue;
    [PublicAPIAttribute]
public static NpgsqlDate MinCalculableValue;
    public static NpgsqlDate Infinity;
    public static NpgsqlDate NegativeInfinity;
    private static int DaysInYear;
    private static int DaysIn4Years;
    private static int DaysInCentury;
    private static int DaysIn4Centuries;
    [PublicAPIAttribute]
public static NpgsqlDate Now { get; }
    [PublicAPIAttribute]
public static NpgsqlDate Today { get; }
    [PublicAPIAttribute]
public static NpgsqlDate Yesterday { get; }
    [PublicAPIAttribute]
public static NpgsqlDate Tomorrow { get; }
    [PublicAPIAttribute]
public int DayOfYear { get; }
    [PublicAPIAttribute]
public int Year { get; }
    [PublicAPIAttribute]
public int Month { get; }
    [PublicAPIAttribute]
public int Day { get; }
    [PublicAPIAttribute]
public DayOfWeek DayOfWeek { get; }
    internal int DaysSinceEra { get; }
    [PublicAPIAttribute]
public bool IsLeapYear { get; }
    [PublicAPIAttribute]
public bool IsInfinity { get; }
    [PublicAPIAttribute]
public bool IsNegativeInfinity { get; }
    [PublicAPIAttribute]
public bool IsFinite { get; }
    private NpgsqlDate(InternalType type);
    internal NpgsqlDate(int days);
    public NpgsqlDate(DateTime dateTime);
    public NpgsqlDate(NpgsqlDate copyFrom);
    public NpgsqlDate(int year, int month, int day);
    private static NpgsqlDate();
    public virtual string ToString();
    public static NpgsqlDate Parse(string str);
    [PublicAPIAttribute]
public static bool TryParse(string str, NpgsqlDate& date);
    public static NpgsqlDate get_Now();
    public static NpgsqlDate get_Today();
    public static NpgsqlDate get_Yesterday();
    public static NpgsqlDate get_Tomorrow();
    public int get_DayOfYear();
    public int get_Year();
    public int get_Month();
    public int get_Day();
    public DayOfWeek get_DayOfWeek();
    internal int get_DaysSinceEra();
    public bool get_IsLeapYear();
    public bool get_IsInfinity();
    public bool get_IsNegativeInfinity();
    public bool get_IsFinite();
    private static int DaysForYears(int years);
    private static bool IsLeap(int year);
    [PublicAPIAttribute]
public NpgsqlDate AddDays(int days);
    [PublicAPIAttribute]
public NpgsqlDate AddYears(int years);
    [PublicAPIAttribute]
public NpgsqlDate AddMonths(int months);
    [PublicAPIAttribute]
public NpgsqlDate Add(NpgsqlTimeSpan interval);
    [PublicAPIAttribute]
internal NpgsqlDate Add(NpgsqlTimeSpan interval, int carriedOverflow);
    public sealed virtual int Compare(NpgsqlDate x, NpgsqlDate y);
    public sealed virtual int Compare(object x, object y);
    public sealed virtual bool Equals(NpgsqlDate other);
    public virtual bool Equals(object obj);
    public sealed virtual int CompareTo(NpgsqlDate other);
    public sealed virtual int CompareTo(object obj);
    public virtual int GetHashCode();
    public static bool op_Equality(NpgsqlDate x, NpgsqlDate y);
    public static bool op_Inequality(NpgsqlDate x, NpgsqlDate y);
    public static bool op_LessThan(NpgsqlDate x, NpgsqlDate y);
    public static bool op_GreaterThan(NpgsqlDate x, NpgsqlDate y);
    public static bool op_LessThanOrEqual(NpgsqlDate x, NpgsqlDate y);
    public static bool op_GreaterThanOrEqual(NpgsqlDate x, NpgsqlDate y);
    public static DateTime op_Explicit(NpgsqlDate date);
    public static NpgsqlDate op_Explicit(DateTime date);
    public static NpgsqlDate op_Addition(NpgsqlDate date, NpgsqlTimeSpan interval);
    public static NpgsqlDate op_Addition(NpgsqlTimeSpan interval, NpgsqlDate date);
    public static NpgsqlDate op_Subtraction(NpgsqlDate date, NpgsqlTimeSpan interval);
    public static NpgsqlTimeSpan op_Subtraction(NpgsqlDate dateX, NpgsqlDate dateY);
}
public class NpgsqlTypes.NpgsqlDateTime : ValueType {
    private NpgsqlDate _date;
    private TimeSpan _time;
    private InternalType _type;
    public static NpgsqlDateTime Epoch;
    public static NpgsqlDateTime Era;
    public static NpgsqlDateTime Infinity;
    public static NpgsqlDateTime NegativeInfinity;
    private static int MaxDateTimeDay;
    public NpgsqlDate Date { get; }
    public TimeSpan Time { get; }
    public int DayOfYear { get; }
    public int Year { get; }
    public int Month { get; }
    public int Day { get; }
    public DayOfWeek DayOfWeek { get; }
    public bool IsLeapYear { get; }
    public long Ticks { get; }
    public int Millisecond { get; }
    public int Second { get; }
    public int Minute { get; }
    public int Hour { get; }
    public bool IsInfinity { get; }
    public bool IsNegativeInfinity { get; }
    public bool IsFinite { get; }
    public DateTimeKind Kind { get; }
    public DateTime DateTime { get; }
    public static NpgsqlDateTime Now { get; }
    private NpgsqlDateTime(InternalType type, NpgsqlDate date, TimeSpan time);
    public NpgsqlDateTime(NpgsqlDate date, TimeSpan time, DateTimeKind kind);
    public NpgsqlDateTime(NpgsqlDate date);
    public NpgsqlDateTime(int year, int month, int day, int hours, int minutes, int seconds, DateTimeKind kind);
    public NpgsqlDateTime(int year, int month, int day, int hours, int minutes, int seconds, int milliseconds, DateTimeKind kind);
    public NpgsqlDateTime(DateTime dateTime);
    public NpgsqlDateTime(long ticks, DateTimeKind kind);
    public NpgsqlDateTime(long ticks);
    private static NpgsqlDateTime();
    public NpgsqlDate get_Date();
    public TimeSpan get_Time();
    public int get_DayOfYear();
    public int get_Year();
    public int get_Month();
    public int get_Day();
    public DayOfWeek get_DayOfWeek();
    public bool get_IsLeapYear();
    public long get_Ticks();
    public int get_Millisecond();
    public int get_Second();
    public int get_Minute();
    public int get_Hour();
    public bool get_IsInfinity();
    public bool get_IsNegativeInfinity();
    public bool get_IsFinite();
    public DateTimeKind get_Kind();
    public DateTime get_DateTime();
    public NpgsqlDateTime ToUniversalTime();
    public NpgsqlDateTime ToLocalTime();
    public static NpgsqlDateTime get_Now();
    public virtual string ToString();
    public static NpgsqlDateTime Parse(string str);
    public sealed virtual bool Equals(NpgsqlDateTime other);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
    public sealed virtual int CompareTo(NpgsqlDateTime other);
    public sealed virtual int CompareTo(object obj);
    public sealed virtual int Compare(NpgsqlDateTime x, NpgsqlDateTime y);
    public sealed virtual int Compare(object x, object y);
    public NpgsqlDateTime Add(NpgsqlTimeSpan value);
    public NpgsqlDateTime Add(TimeSpan value);
    public NpgsqlDateTime AddYears(int value);
    public NpgsqlDateTime AddMonths(int value);
    public NpgsqlDateTime AddDays(double value);
    public NpgsqlDateTime AddHours(double value);
    public NpgsqlDateTime AddMinutes(double value);
    public NpgsqlDateTime AddSeconds(double value);
    public NpgsqlDateTime AddMilliseconds(double value);
    public NpgsqlDateTime AddTicks(long value);
    public NpgsqlDateTime Subtract(NpgsqlTimeSpan interval);
    public NpgsqlTimeSpan Subtract(NpgsqlDateTime timestamp);
    public static NpgsqlDateTime op_Addition(NpgsqlDateTime timestamp, NpgsqlTimeSpan interval);
    public static NpgsqlDateTime op_Addition(NpgsqlTimeSpan interval, NpgsqlDateTime timestamp);
    public static NpgsqlDateTime op_Subtraction(NpgsqlDateTime timestamp, NpgsqlTimeSpan interval);
    public static NpgsqlTimeSpan op_Subtraction(NpgsqlDateTime x, NpgsqlDateTime y);
    public static bool op_Equality(NpgsqlDateTime x, NpgsqlDateTime y);
    public static bool op_Inequality(NpgsqlDateTime x, NpgsqlDateTime y);
    public static bool op_LessThan(NpgsqlDateTime x, NpgsqlDateTime y);
    public static bool op_GreaterThan(NpgsqlDateTime x, NpgsqlDateTime y);
    public static bool op_LessThanOrEqual(NpgsqlDateTime x, NpgsqlDateTime y);
    public static bool op_GreaterThanOrEqual(NpgsqlDateTime x, NpgsqlDateTime y);
    public static NpgsqlDateTime op_Implicit(DateTime dateTime);
    public static DateTime op_Explicit(NpgsqlDateTime npgsqlDateTime);
    public NpgsqlDateTime Normalize();
    private static InternalType KindToInternalType(DateTimeKind kind);
}
public enum NpgsqlTypes.NpgsqlDbType : Enum {
    public int value__;
    public static NpgsqlDbType Bigint;
    public static NpgsqlDbType Double;
    public static NpgsqlDbType Integer;
    public static NpgsqlDbType Numeric;
    public static NpgsqlDbType Real;
    public static NpgsqlDbType Smallint;
    public static NpgsqlDbType Boolean;
    public static NpgsqlDbType Enum;
    public static NpgsqlDbType Box;
    public static NpgsqlDbType Circle;
    public static NpgsqlDbType Line;
    public static NpgsqlDbType LSeg;
    public static NpgsqlDbType Path;
    public static NpgsqlDbType Point;
    public static NpgsqlDbType Polygon;
    public static NpgsqlDbType Money;
    public static NpgsqlDbType Char;
    public static NpgsqlDbType Text;
    public static NpgsqlDbType Varchar;
    public static NpgsqlDbType Name;
    public static NpgsqlDbType Citext;
    public static NpgsqlDbType InternalChar;
    public static NpgsqlDbType Bytea;
    public static NpgsqlDbType Date;
    public static NpgsqlDbType Time;
    public static NpgsqlDbType Timestamp;
    public static NpgsqlDbType TimestampTZ;
    public static NpgsqlDbType Interval;
    public static NpgsqlDbType TimeTZ;
    [ObsoleteAttribute]
public static NpgsqlDbType Abstime;
    public static NpgsqlDbType Inet;
    public static NpgsqlDbType Cidr;
    public static NpgsqlDbType MacAddr;
    public static NpgsqlDbType Bit;
    public static NpgsqlDbType Varbit;
    public static NpgsqlDbType TsVector;
    public static NpgsqlDbType TsQuery;
    public static NpgsqlDbType Uuid;
    public static NpgsqlDbType Xml;
    public static NpgsqlDbType Json;
    public static NpgsqlDbType Jsonb;
    public static NpgsqlDbType Hstore;
    public static NpgsqlDbType Array;
    public static NpgsqlDbType Composite;
    public static NpgsqlDbType Range;
    public static NpgsqlDbType Refcursor;
    public static NpgsqlDbType Oidvector;
    public static NpgsqlDbType Int2Vector;
    public static NpgsqlDbType Oid;
    public static NpgsqlDbType Xid;
    public static NpgsqlDbType Cid;
    public static NpgsqlDbType Regtype;
    public static NpgsqlDbType Tid;
    public static NpgsqlDbType Unknown;
    public static NpgsqlDbType Geometry;
}
public class NpgsqlTypes.NpgsqlInet : ValueType {
    public IPAddress Address;
    public int Netmask;
    public NpgsqlInet(IPAddress address, int netmask);
    public NpgsqlInet(IPAddress address);
    public NpgsqlInet(string addr);
    public virtual string ToString();
    public static IPAddress op_Explicit(NpgsqlInet x);
    public static NpgsqlInet op_Implicit(IPAddress ipaddress);
    public sealed virtual bool Equals(NpgsqlInet other);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
    public static bool op_Equality(NpgsqlInet x, NpgsqlInet y);
    public static bool op_Inequality(NpgsqlInet x, NpgsqlInet y);
}
public class NpgsqlTypes.NpgsqlLine : ValueType {
    private static Regex Regex;
    [CompilerGeneratedAttribute]
private double <A>k__BackingField;
    [CompilerGeneratedAttribute]
private double <B>k__BackingField;
    [CompilerGeneratedAttribute]
private double <C>k__BackingField;
    public double A { get; public set; }
    public double B { get; public set; }
    public double C { get; public set; }
    public NpgsqlLine(double a, double b, double c);
    private static NpgsqlLine();
    [CompilerGeneratedAttribute]
public double get_A();
    [CompilerGeneratedAttribute]
public void set_A(double value);
    [CompilerGeneratedAttribute]
public double get_B();
    [CompilerGeneratedAttribute]
public void set_B(double value);
    [CompilerGeneratedAttribute]
public double get_C();
    [CompilerGeneratedAttribute]
public void set_C(double value);
    public static NpgsqlLine Parse(string s);
    public virtual string ToString();
    public virtual int GetHashCode();
    public sealed virtual bool Equals(NpgsqlLine other);
    public virtual bool Equals(object obj);
    public static bool op_Equality(NpgsqlLine x, NpgsqlLine y);
    public static bool op_Inequality(NpgsqlLine x, NpgsqlLine y);
}
public class NpgsqlTypes.NpgsqlLSeg : ValueType {
    private static Regex Regex;
    [CompilerGeneratedAttribute]
private NpgsqlPoint <Start>k__BackingField;
    [CompilerGeneratedAttribute]
private NpgsqlPoint <End>k__BackingField;
    public NpgsqlPoint Start { get; public set; }
    public NpgsqlPoint End { get; public set; }
    public NpgsqlLSeg(NpgsqlPoint start, NpgsqlPoint end);
    public NpgsqlLSeg(double startx, double starty, double endx, double endy);
    private static NpgsqlLSeg();
    [CompilerGeneratedAttribute]
public NpgsqlPoint get_Start();
    [CompilerGeneratedAttribute]
public void set_Start(NpgsqlPoint value);
    [CompilerGeneratedAttribute]
public NpgsqlPoint get_End();
    [CompilerGeneratedAttribute]
public void set_End(NpgsqlPoint value);
    public static NpgsqlLSeg Parse(string s);
    public virtual string ToString();
    public virtual int GetHashCode();
    public sealed virtual bool Equals(NpgsqlLSeg other);
    public virtual bool Equals(object obj);
    public static bool op_Equality(NpgsqlLSeg x, NpgsqlLSeg y);
    public static bool op_Inequality(NpgsqlLSeg x, NpgsqlLSeg y);
}
[DefaultMemberAttribute("Item")]
public class NpgsqlTypes.NpgsqlPath : ValueType {
    private List`1<NpgsqlPoint> _points;
    [CompilerGeneratedAttribute]
private bool <Open>k__BackingField;
    public bool Open { get; public set; }
    public NpgsqlPoint Item { get; public set; }
    public int Capacity { get; }
    public int Count { get; }
    public bool IsReadOnly { get; }
    public NpgsqlPath(IEnumerable`1<NpgsqlPoint> points, bool open);
    public NpgsqlPath(IEnumerable`1<NpgsqlPoint> points);
    public NpgsqlPath(NpgsqlPoint[] points);
    public NpgsqlPath(bool open);
    public NpgsqlPath(int capacity, bool open);
    public NpgsqlPath(int capacity);
    [CompilerGeneratedAttribute]
public bool get_Open();
    [CompilerGeneratedAttribute]
public void set_Open(bool value);
    public sealed virtual NpgsqlPoint get_Item(int index);
    public sealed virtual void set_Item(int index, NpgsqlPoint value);
    public int get_Capacity();
    public sealed virtual int get_Count();
    public sealed virtual bool get_IsReadOnly();
    public sealed virtual int IndexOf(NpgsqlPoint item);
    public sealed virtual void Insert(int index, NpgsqlPoint item);
    public sealed virtual void RemoveAt(int index);
    public sealed virtual void Add(NpgsqlPoint item);
    public sealed virtual void Clear();
    public sealed virtual bool Contains(NpgsqlPoint item);
    public sealed virtual void CopyTo(NpgsqlPoint[] array, int arrayIndex);
    public sealed virtual bool Remove(NpgsqlPoint item);
    public sealed virtual IEnumerator`1<NpgsqlPoint> GetEnumerator();
    private sealed virtual override IEnumerator System.Collections.IEnumerable.GetEnumerator();
    public sealed virtual bool Equals(NpgsqlPath other);
    public virtual bool Equals(object obj);
    public static bool op_Equality(NpgsqlPath x, NpgsqlPath y);
    public static bool op_Inequality(NpgsqlPath x, NpgsqlPath y);
    public virtual int GetHashCode();
    public virtual string ToString();
    public static NpgsqlPath Parse(string s);
}
public class NpgsqlTypes.NpgsqlPoint : ValueType {
    private static Regex Regex;
    [CompilerGeneratedAttribute]
private double <X>k__BackingField;
    [CompilerGeneratedAttribute]
private double <Y>k__BackingField;
    public double X { get; public set; }
    public double Y { get; public set; }
    public NpgsqlPoint(double x, double y);
    private static NpgsqlPoint();
    [CompilerGeneratedAttribute]
public double get_X();
    [CompilerGeneratedAttribute]
public void set_X(double value);
    [CompilerGeneratedAttribute]
public double get_Y();
    [CompilerGeneratedAttribute]
public void set_Y(double value);
    public sealed virtual bool Equals(NpgsqlPoint other);
    public virtual bool Equals(object obj);
    public static bool op_Equality(NpgsqlPoint x, NpgsqlPoint y);
    public static bool op_Inequality(NpgsqlPoint x, NpgsqlPoint y);
    public virtual int GetHashCode();
    public static NpgsqlPoint Parse(string s);
    public virtual string ToString();
}
[DefaultMemberAttribute("Item")]
public class NpgsqlTypes.NpgsqlPolygon : ValueType {
    private List`1<NpgsqlPoint> _points;
    public NpgsqlPoint Item { get; public set; }
    public int Capacity { get; }
    public int Count { get; }
    public bool IsReadOnly { get; }
    public NpgsqlPolygon(IEnumerable`1<NpgsqlPoint> points);
    public NpgsqlPolygon(NpgsqlPoint[] points);
    public NpgsqlPolygon(int capacity);
    public sealed virtual NpgsqlPoint get_Item(int index);
    public sealed virtual void set_Item(int index, NpgsqlPoint value);
    public int get_Capacity();
    public sealed virtual int get_Count();
    public sealed virtual bool get_IsReadOnly();
    public sealed virtual int IndexOf(NpgsqlPoint item);
    public sealed virtual void Insert(int index, NpgsqlPoint item);
    public sealed virtual void RemoveAt(int index);
    public sealed virtual void Add(NpgsqlPoint item);
    public sealed virtual void Clear();
    public sealed virtual bool Contains(NpgsqlPoint item);
    public sealed virtual void CopyTo(NpgsqlPoint[] array, int arrayIndex);
    public sealed virtual bool Remove(NpgsqlPoint item);
    public sealed virtual IEnumerator`1<NpgsqlPoint> GetEnumerator();
    private sealed virtual override IEnumerator System.Collections.IEnumerable.GetEnumerator();
    public sealed virtual bool Equals(NpgsqlPolygon other);
    public virtual bool Equals(object obj);
    public static bool op_Equality(NpgsqlPolygon x, NpgsqlPolygon y);
    public static bool op_Inequality(NpgsqlPolygon x, NpgsqlPolygon y);
    public virtual int GetHashCode();
    public static NpgsqlPolygon Parse(string s);
    public virtual string ToString();
}
public class NpgsqlTypes.NpgsqlRange`1 : ValueType {
    [CompilerGeneratedAttribute]
private T <LowerBound>k__BackingField;
    [CompilerGeneratedAttribute]
private T <UpperBound>k__BackingField;
    [CompilerGeneratedAttribute]
private RangeFlags <Flags>k__BackingField;
    public T LowerBound { get; public set; }
    public T UpperBound { get; public set; }
    internal RangeFlags Flags { get; internal set; }
    public bool LowerBoundIsInclusive { get; public set; }
    public bool UpperBoundIsInclusive { get; public set; }
    public bool LowerBoundInfinite { get; public set; }
    public bool UpperBoundInfinite { get; public set; }
    public bool IsEmpty { get; public set; }
    public NpgsqlRange`1(T lowerBound, T upperBound);
    public NpgsqlRange`1(T lowerBound, bool lowerBoundIsInclusive, T upperBound, bool upperBoundIsInclusive);
    public NpgsqlRange`1(T lowerBound, bool lowerBoundIsInclusive, bool lowerBoundInfinite, T upperBound, bool upperBoundIsInclusive, bool upperBoundInfinite);
    internal NpgsqlRange`1(RangeFlags flags);
    public static NpgsqlRange`1<T> Empty();
    [CompilerGeneratedAttribute]
public T get_LowerBound();
    [CompilerGeneratedAttribute]
public void set_LowerBound(T value);
    [CompilerGeneratedAttribute]
public T get_UpperBound();
    [CompilerGeneratedAttribute]
public void set_UpperBound(T value);
    [CompilerGeneratedAttribute]
internal RangeFlags get_Flags();
    [CompilerGeneratedAttribute]
internal void set_Flags(RangeFlags value);
    public bool get_LowerBoundIsInclusive();
    public void set_LowerBoundIsInclusive(bool value);
    public bool get_UpperBoundIsInclusive();
    public void set_UpperBoundIsInclusive(bool value);
    public bool get_LowerBoundInfinite();
    public void set_LowerBoundInfinite(bool value);
    public bool get_UpperBoundInfinite();
    public void set_UpperBoundInfinite(bool value);
    public bool get_IsEmpty();
    public void set_IsEmpty(bool value);
    public static bool op_Equality(NpgsqlRange`1<T> x, NpgsqlRange`1<T> y);
    public static bool op_Inequality(NpgsqlRange`1<T> x, NpgsqlRange`1<T> y);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
    public virtual string ToString();
}
public class NpgsqlTypes.NpgsqlTid : ValueType {
    public UInt32 BlockNumber;
    public ushort OffsetNumber;
    public NpgsqlTid(UInt32 blockNumber, ushort offsetNumber);
    public virtual string ToString();
}
public class NpgsqlTypes.NpgsqlTimeSpan : ValueType {
    public static long TicksPerMicrosecond;
    public static long TicksPerMillsecond;
    public static long TicksPerSecond;
    public static long TicksPerMinute;
    public static long TicksPerHour;
    public static long TicksPerDay;
    public static int HoursPerDay;
    public static int DaysPerMonth;
    public static long TicksPerMonth;
    public static int MonthsPerYear;
    public static NpgsqlTimeSpan MaxValue;
    public static NpgsqlTimeSpan MinValue;
    public static NpgsqlTimeSpan Zero;
    private int _months;
    private int _days;
    private long _ticks;
    public long Ticks { get; }
    public int Microseconds { get; }
    public int Milliseconds { get; }
    public int Seconds { get; }
    public int Minutes { get; }
    public int Hours { get; }
    public int Days { get; }
    public int Months { get; }
    public TimeSpan Time { get; }
    public long TotalTicks { get; }
    public double TotalMicroseconds { get; }
    public double TotalMilliseconds { get; }
    public double TotalSeconds { get; }
    public double TotalMinutes { get; }
    public double TotalHours { get; }
    public double TotalDays { get; }
    public double TotalMonths { get; }
    public NpgsqlTimeSpan(long ticks);
    public NpgsqlTimeSpan(TimeSpan timespan);
    public NpgsqlTimeSpan(int months, int days, long ticks);
    public NpgsqlTimeSpan(int days, int hours, int minutes, int seconds);
    public NpgsqlTimeSpan(int days, int hours, int minutes, int seconds, int milliseconds);
    public NpgsqlTimeSpan(int months, int days, int hours, int minutes, int seconds, int milliseconds);
    public NpgsqlTimeSpan(int years, int months, int days, int hours, int minutes, int seconds, int milliseconds);
    private static NpgsqlTimeSpan();
    public long get_Ticks();
    public int get_Microseconds();
    public int get_Milliseconds();
    public int get_Seconds();
    public int get_Minutes();
    public int get_Hours();
    public int get_Days();
    public int get_Months();
    public TimeSpan get_Time();
    public long get_TotalTicks();
    public double get_TotalMicroseconds();
    public double get_TotalMilliseconds();
    public double get_TotalSeconds();
    public double get_TotalMinutes();
    public double get_TotalHours();
    public double get_TotalDays();
    public double get_TotalMonths();
    public static NpgsqlTimeSpan FromTicks(long ticks);
    public static NpgsqlTimeSpan FromMicroseconds(double micro);
    public static NpgsqlTimeSpan FromMilliseconds(double milli);
    public static NpgsqlTimeSpan FromSeconds(double seconds);
    public static NpgsqlTimeSpan FromMinutes(double minutes);
    public static NpgsqlTimeSpan FromHours(double hours);
    public static NpgsqlTimeSpan FromDays(double days);
    public static NpgsqlTimeSpan FromMonths(double months);
    public NpgsqlTimeSpan Add(NpgsqlTimeSpan interval);
    public NpgsqlTimeSpan Subtract(NpgsqlTimeSpan interval);
    public NpgsqlTimeSpan Negate();
    public NpgsqlTimeSpan Duration();
    public NpgsqlTimeSpan JustifyDays();
    public NpgsqlTimeSpan UnjustifyDays();
    public NpgsqlTimeSpan JustifyMonths();
    public NpgsqlTimeSpan UnjustifyMonths();
    public NpgsqlTimeSpan JustifyInterval();
    public NpgsqlTimeSpan UnjustifyInterval();
    public NpgsqlTimeSpan Canonicalize();
    public static NpgsqlTimeSpan op_Implicit(TimeSpan timespan);
    public static TimeSpan op_Explicit(NpgsqlTimeSpan interval);
    public sealed virtual bool Equals(NpgsqlTimeSpan other);
    public virtual bool Equals(object obj);
    public static int Compare(NpgsqlTimeSpan x, NpgsqlTimeSpan y);
    private sealed virtual override int System.Collections.Generic.IComparer<NpgsqlTypes.NpgsqlTimeSpan>.Compare(NpgsqlTimeSpan x, NpgsqlTimeSpan y);
    private sealed virtual override int System.Collections.IComparer.Compare(object x, object y);
    public virtual int GetHashCode();
    public sealed virtual int CompareTo(NpgsqlTimeSpan other);
    public sealed virtual int CompareTo(object other);
    public static NpgsqlTimeSpan Parse(string str);
    private static string SafeSubstring(string s, int startIndex);
    public static bool TryParse(string str, NpgsqlTimeSpan& result);
    public virtual string ToString();
    public static NpgsqlTimeSpan op_Addition(NpgsqlTimeSpan x, NpgsqlTimeSpan y);
    public static NpgsqlTimeSpan op_Subtraction(NpgsqlTimeSpan x, NpgsqlTimeSpan y);
    public static bool op_Equality(NpgsqlTimeSpan x, NpgsqlTimeSpan y);
    public static bool op_Inequality(NpgsqlTimeSpan x, NpgsqlTimeSpan y);
    public static bool op_LessThan(NpgsqlTimeSpan x, NpgsqlTimeSpan y);
    public static bool op_LessThanOrEqual(NpgsqlTimeSpan x, NpgsqlTimeSpan y);
    public static bool op_GreaterThan(NpgsqlTimeSpan x, NpgsqlTimeSpan y);
    public static bool op_GreaterThanOrEqual(NpgsqlTimeSpan x, NpgsqlTimeSpan y);
    public static NpgsqlTimeSpan op_UnaryPlus(NpgsqlTimeSpan x);
    public static NpgsqlTimeSpan op_UnaryNegation(NpgsqlTimeSpan x);
}
public abstract class NpgsqlTypes.NpgsqlTsQuery : object {
    [CompilerGeneratedAttribute]
private NodeKind <Kind>k__BackingField;
    public NodeKind Kind { get; protected set; }
    [CompilerGeneratedAttribute]
public NodeKind get_Kind();
    [CompilerGeneratedAttribute]
protected void set_Kind(NodeKind value);
    internal abstract virtual void Write(StringBuilder sb, bool first);
    public virtual string ToString();
    public static NpgsqlTsQuery Parse(string value);
}
public class NpgsqlTypes.NpgsqlTsQueryAnd : NpgsqlTsQueryBinOp {
    public NpgsqlTsQueryAnd(NpgsqlTsQuery left, NpgsqlTsQuery right);
    internal virtual void Write(StringBuilder sb, bool first);
}
public abstract class NpgsqlTypes.NpgsqlTsQueryBinOp : NpgsqlTsQuery {
    [CompilerGeneratedAttribute]
private NpgsqlTsQuery <Left>k__BackingField;
    [CompilerGeneratedAttribute]
private NpgsqlTsQuery <Right>k__BackingField;
    public NpgsqlTsQuery Left { get; public set; }
    public NpgsqlTsQuery Right { get; public set; }
    [CompilerGeneratedAttribute]
public NpgsqlTsQuery get_Left();
    [CompilerGeneratedAttribute]
public void set_Left(NpgsqlTsQuery value);
    [CompilerGeneratedAttribute]
public NpgsqlTsQuery get_Right();
    [CompilerGeneratedAttribute]
public void set_Right(NpgsqlTsQuery value);
}
public class NpgsqlTypes.NpgsqlTsQueryEmpty : NpgsqlTsQuery {
    internal virtual void Write(StringBuilder sb, bool first);
}
public class NpgsqlTypes.NpgsqlTsQueryLexeme : NpgsqlTsQuery {
    private string _text;
    private Weight _weights;
    [CompilerGeneratedAttribute]
private bool <IsPrefixSearch>k__BackingField;
    public string Text { get; public set; }
    public Weight Weights { get; public set; }
    public bool IsPrefixSearch { get; public set; }
    public NpgsqlTsQueryLexeme(string text);
    public NpgsqlTsQueryLexeme(string text, Weight weights);
    public NpgsqlTsQueryLexeme(string text, Weight weights, bool isPrefixSearch);
    public string get_Text();
    public void set_Text(string value);
    public Weight get_Weights();
    public void set_Weights(Weight value);
    [CompilerGeneratedAttribute]
public bool get_IsPrefixSearch();
    [CompilerGeneratedAttribute]
public void set_IsPrefixSearch(bool value);
    internal virtual void Write(StringBuilder sb, bool first);
}
public class NpgsqlTypes.NpgsqlTsQueryNot : NpgsqlTsQuery {
    [CompilerGeneratedAttribute]
private NpgsqlTsQuery <Child>k__BackingField;
    public NpgsqlTsQuery Child { get; public set; }
    public NpgsqlTsQueryNot(NpgsqlTsQuery child);
    [CompilerGeneratedAttribute]
public NpgsqlTsQuery get_Child();
    [CompilerGeneratedAttribute]
public void set_Child(NpgsqlTsQuery value);
    internal virtual void Write(StringBuilder sb, bool first);
}
public class NpgsqlTypes.NpgsqlTsQueryOr : NpgsqlTsQueryBinOp {
    public NpgsqlTsQueryOr(NpgsqlTsQuery left, NpgsqlTsQuery right);
    internal virtual void Write(StringBuilder sb, bool first);
}
[DefaultMemberAttribute("Item")]
public class NpgsqlTypes.NpgsqlTsVector : object {
    private List`1<Lexeme> _lexemes;
    public Lexeme Item { get; }
    public int Count { get; }
    internal NpgsqlTsVector(List`1<Lexeme> lexemes, bool noCheck);
    public NpgsqlTsVector(List`1<Lexeme> lexemes);
    private void Load(List`1<Lexeme> lexemes);
    public static NpgsqlTsVector Parse(string value);
    public Lexeme get_Item(int index);
    public int get_Count();
    public sealed virtual IEnumerator`1<Lexeme> GetEnumerator();
    private sealed virtual override IEnumerator System.Collections.IEnumerable.GetEnumerator();
    public virtual string ToString();
}
[AttributeUsageAttribute("384")]
public class NpgsqlTypes.PgNameAttribute : Attribute {
    [CompilerGeneratedAttribute]
private string <PgName>k__BackingField;
    public string PgName { get; private set; }
    public PgNameAttribute(string pgName);
    [CompilerGeneratedAttribute]
public string get_PgName();
    [CompilerGeneratedAttribute]
private void set_PgName(string value);
}
public abstract class NpgsqlTypes.PostgisGeometry : object {
    [CompilerGeneratedAttribute]
private UInt32 <SRID>k__BackingField;
    internal WkbIdentifier Identifier { get; }
    public UInt32 SRID { get; public set; }
    protected abstract virtual int GetLenHelper();
    internal abstract virtual WkbIdentifier get_Identifier();
    internal int GetLen();
    [CompilerGeneratedAttribute]
public UInt32 get_SRID();
    [CompilerGeneratedAttribute]
public void set_SRID(UInt32 value);
}
[DefaultMemberAttribute("Item")]
public class NpgsqlTypes.PostgisGeometryCollection : PostgisGeometry {
    private PostgisGeometry[] _geometries;
    public PostgisGeometry Item { get; }
    internal WkbIdentifier Identifier { get; }
    public int GeometryCount { get; }
    public PostgisGeometryCollection(PostgisGeometry[] geometries);
    public PostgisGeometryCollection(IEnumerable`1<PostgisGeometry> geometries);
    public PostgisGeometry get_Item(int index);
    internal virtual WkbIdentifier get_Identifier();
    public sealed virtual IEnumerator`1<PostgisGeometry> GetEnumerator();
    private sealed virtual override IEnumerator System.Collections.IEnumerable.GetEnumerator();
    public sealed virtual bool Equals(PostgisGeometryCollection other);
    public virtual bool Equals(object obj);
    public static bool op_Equality(PostgisGeometryCollection x, PostgisGeometryCollection y);
    public static bool op_Inequality(PostgisGeometryCollection x, PostgisGeometryCollection y);
    public virtual int GetHashCode();
    protected virtual int GetLenHelper();
    public int get_GeometryCount();
}
[DefaultMemberAttribute("Item")]
public class NpgsqlTypes.PostgisLineString : PostgisGeometry {
    private Coordinate2D[] _points;
    internal WkbIdentifier Identifier { get; }
    public Coordinate2D Item { get; }
    public int PointCount { get; }
    public PostgisLineString(IEnumerable`1<Coordinate2D> points);
    public PostgisLineString(Coordinate2D[] points);
    internal virtual WkbIdentifier get_Identifier();
    protected virtual int GetLenHelper();
    public sealed virtual IEnumerator`1<Coordinate2D> GetEnumerator();
    private sealed virtual override IEnumerator System.Collections.IEnumerable.GetEnumerator();
    public Coordinate2D get_Item(int index);
    public int get_PointCount();
    public sealed virtual bool Equals(PostgisLineString other);
    public virtual bool Equals(object obj);
    public static bool op_Equality(PostgisLineString x, PostgisLineString y);
    public static bool op_Inequality(PostgisLineString x, PostgisLineString y);
    public virtual int GetHashCode();
}
[DefaultMemberAttribute("Item")]
public class NpgsqlTypes.PostgisMultiLineString : PostgisGeometry {
    private PostgisLineString[] _lineStrings;
    internal WkbIdentifier Identifier { get; }
    public PostgisLineString Item { get; }
    public int LineCount { get; }
    internal PostgisMultiLineString(Coordinate2D[][] pointArray);
    public PostgisMultiLineString(PostgisLineString[] linestrings);
    public PostgisMultiLineString(IEnumerable`1<PostgisLineString> linestrings);
    public PostgisMultiLineString(IEnumerable`1<IEnumerable`1<Coordinate2D>> pointList);
    internal virtual WkbIdentifier get_Identifier();
    protected virtual int GetLenHelper();
    public sealed virtual IEnumerator`1<PostgisLineString> GetEnumerator();
    private sealed virtual override IEnumerator System.Collections.IEnumerable.GetEnumerator();
    public PostgisLineString get_Item(int index);
    public sealed virtual bool Equals(PostgisMultiLineString other);
    public virtual bool Equals(object obj);
    public static bool op_Equality(PostgisMultiLineString x, PostgisMultiLineString y);
    public static bool op_Inequality(PostgisMultiLineString x, PostgisMultiLineString y);
    public virtual int GetHashCode();
    public int get_LineCount();
}
[DefaultMemberAttribute("Item")]
public class NpgsqlTypes.PostgisMultiPoint : PostgisGeometry {
    private Coordinate2D[] _points;
    internal WkbIdentifier Identifier { get; }
    public Coordinate2D Item { get; }
    public int PointCount { get; }
    public PostgisMultiPoint(Coordinate2D[] points);
    public PostgisMultiPoint(IEnumerable`1<PostgisPoint> points);
    public PostgisMultiPoint(IEnumerable`1<Coordinate2D> points);
    internal virtual WkbIdentifier get_Identifier();
    protected virtual int GetLenHelper();
    public sealed virtual IEnumerator`1<Coordinate2D> GetEnumerator();
    private sealed virtual override IEnumerator System.Collections.IEnumerable.GetEnumerator();
    public Coordinate2D get_Item(int indexer);
    public sealed virtual bool Equals(PostgisMultiPoint other);
    public virtual bool Equals(object obj);
    public static bool op_Equality(PostgisMultiPoint x, PostgisMultiPoint y);
    public static bool op_Inequality(PostgisMultiPoint x, PostgisMultiPoint y);
    public virtual int GetHashCode();
    public int get_PointCount();
}
[DefaultMemberAttribute("Item")]
public class NpgsqlTypes.PostgisMultiPolygon : PostgisGeometry {
    private PostgisPolygon[] _polygons;
    internal WkbIdentifier Identifier { get; }
    public PostgisPolygon Item { get; }
    public int PolygonCount { get; }
    public PostgisMultiPolygon(PostgisPolygon[] polygons);
    public PostgisMultiPolygon(IEnumerable`1<PostgisPolygon> polygons);
    public PostgisMultiPolygon(IEnumerable`1<IEnumerable`1<IEnumerable`1<Coordinate2D>>> ringList);
    public sealed virtual IEnumerator`1<PostgisPolygon> GetEnumerator();
    private sealed virtual override IEnumerator System.Collections.IEnumerable.GetEnumerator();
    internal virtual WkbIdentifier get_Identifier();
    public PostgisPolygon get_Item(int index);
    public sealed virtual bool Equals(PostgisMultiPolygon other);
    public virtual bool Equals(object obj);
    public static bool op_Equality(PostgisMultiPolygon x, PostgisMultiPolygon y);
    public static bool op_Inequality(PostgisMultiPolygon x, PostgisMultiPolygon y);
    public virtual int GetHashCode();
    protected virtual int GetLenHelper();
    public int get_PolygonCount();
}
public class NpgsqlTypes.PostgisPoint : PostgisGeometry {
    private Coordinate2D _coord;
    internal WkbIdentifier Identifier { get; }
    public double X { get; public set; }
    public double Y { get; public set; }
    public PostgisPoint(double x, double y);
    internal virtual WkbIdentifier get_Identifier();
    protected virtual int GetLenHelper();
    public double get_X();
    public void set_X(double value);
    public double get_Y();
    public void set_Y(double value);
    public sealed virtual bool Equals(PostgisPoint other);
    public virtual bool Equals(object obj);
    public static bool op_Equality(PostgisPoint x, PostgisPoint y);
    public static bool op_Inequality(PostgisPoint x, PostgisPoint y);
    public virtual int GetHashCode();
}
[DefaultMemberAttribute("Item")]
public class NpgsqlTypes.PostgisPolygon : PostgisGeometry {
    private Coordinate2D[][] _rings;
    internal WkbIdentifier Identifier { get; }
    public Coordinate2D Item { get; }
    public Coordinate2D[] Item { get; }
    public int RingCount { get; }
    public int TotalPointCount { get; }
    public PostgisPolygon(Coordinate2D[][] rings);
    public PostgisPolygon(IEnumerable`1<IEnumerable`1<Coordinate2D>> rings);
    protected virtual int GetLenHelper();
    internal virtual WkbIdentifier get_Identifier();
    public Coordinate2D get_Item(int ringIndex, int pointIndex);
    public Coordinate2D[] get_Item(int ringIndex);
    public sealed virtual IEnumerator`1<IEnumerable`1<Coordinate2D>> GetEnumerator();
    private sealed virtual override IEnumerator System.Collections.IEnumerable.GetEnumerator();
    public sealed virtual bool Equals(PostgisPolygon other);
    public virtual bool Equals(object obj);
    public static bool op_Equality(PostgisPolygon x, PostgisPolygon y);
    public static bool op_Inequality(PostgisPolygon x, PostgisPolygon y);
    public int get_RingCount();
    public int get_TotalPointCount();
    public virtual int GetHashCode();
}
[FlagsAttribute]
internal enum NpgsqlTypes.RangeFlags : Enum {
    public byte value__;
    public static RangeFlags Empty;
    public static RangeFlags LowerBoundInclusive;
    public static RangeFlags UpperBoundInclusive;
    public static RangeFlags LowerBoundInfinite;
    public static RangeFlags UpperBoundInfinite;
}
internal enum NpgsqlTypes.WkbIdentifier : Enum {
    public UInt32 value__;
    public static WkbIdentifier Point;
    public static WkbIdentifier LineString;
    public static WkbIdentifier Polygon;
    public static WkbIdentifier MultiPoint;
    public static WkbIdentifier MultiLineString;
    public static WkbIdentifier MultiPolygon;
    public static WkbIdentifier GeometryCollection;
}
internal enum TlsClientStream.AesMode : Enum {
    public byte value__;
    public static AesMode CBC;
    public static AesMode GCM;
}
internal enum TlsClientStream.AlertDescription : Enum {
    public byte value__;
    public static AlertDescription CloseNotify;
    public static AlertDescription UnexpectedMessage;
    public static AlertDescription BadRecordMac;
    public static AlertDescription RecordOverflow;
    public static AlertDescription HandshakeFailure;
    public static AlertDescription BadCertificate;
    public static AlertDescription CertificateRevoked;
    public static AlertDescription CertificateExpired;
    public static AlertDescription CertificateUnknown;
    public static AlertDescription IllegalParameter;
    public static AlertDescription DecodeError;
    public static AlertDescription DecryptError;
    public static AlertDescription ProtocolVersion;
}
internal enum TlsClientStream.AlertLevel : Enum {
    public byte value__;
    public static AlertLevel Warning;
    public static AlertLevel Fatal;
}
internal enum TlsClientStream.CipherSuite : Enum {
    public ushort value__;
    public static CipherSuite TLS_RSA_WITH_AES_128_CBC_SHA;
    public static CipherSuite TLS_DHE_DSS_WITH_AES_128_CBC_SHA;
    public static CipherSuite TLS_DHE_RSA_WITH_AES_128_CBC_SHA;
    public static CipherSuite TLS_RSA_WITH_AES_256_CBC_SHA;
    public static CipherSuite TLS_DHE_DSS_WITH_AES_256_CBC_SHA;
    public static CipherSuite TLS_DHE_RSA_WITH_AES_256_CBC_SHA;
    public static CipherSuite TLS_DHE_DSS_WITH_AES_128_CBC_SHA256;
    public static CipherSuite TLS_RSA_WITH_AES_128_CBC_SHA256;
    public static CipherSuite TLS_RSA_WITH_AES_256_CBC_SHA256;
    public static CipherSuite TLS_DHE_RSA_WITH_AES_128_CBC_SHA256;
    public static CipherSuite TLS_DHE_DSS_WITH_AES_256_CBC_SHA256;
    public static CipherSuite TLS_DHE_RSA_WITH_AES_256_CBC_SHA256;
    public static CipherSuite TLS_RSA_WITH_AES_128_GCM_SHA256;
    public static CipherSuite TLS_RSA_WITH_AES_256_GCM_SHA384;
    public static CipherSuite TLS_DHE_RSA_WITH_AES_128_GCM_SHA256;
    public static CipherSuite TLS_DHE_RSA_WITH_AES_256_GCM_SHA384;
    public static CipherSuite TLS_DHE_DSS_WITH_AES_128_GCM_SHA256;
    public static CipherSuite TLS_DHE_DSS_WITH_AES_256_GCM_SHA384;
    public static CipherSuite TLS_ECDH_ECDSA_WITH_AES_128_CBC_SHA;
    public static CipherSuite TLS_ECDH_ECDSA_WITH_AES_256_CBC_SHA;
    public static CipherSuite TLS_ECDH_RSA_WITH_AES_128_CBC_SHA;
    public static CipherSuite TLS_ECDH_RSA_WITH_AES_256_CBC_SHA;
    public static CipherSuite TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA;
    public static CipherSuite TLS_ECDHE_RSA_WITH_AES_256_CBC_SHA;
    public static CipherSuite TLS_ECDHE_ECDSA_WITH_AES_128_CBC_SHA256;
    public static CipherSuite TLS_ECDHE_ECDSA_WITH_AES_256_CBC_SHA384;
    public static CipherSuite TLS_ECDH_ECDSA_WITH_AES_128_CBC_SHA256;
    public static CipherSuite TLS_ECDH_ECDSA_WITH_AES_256_CBC_SHA384;
    public static CipherSuite TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA256;
    public static CipherSuite TLS_ECDHE_RSA_WITH_AES_256_CBC_SHA384;
    public static CipherSuite TLS_ECDH_RSA_WITH_AES_128_CBC_SHA256;
    public static CipherSuite TLS_ECDH_RSA_WITH_AES_256_CBC_SHA384;
    public static CipherSuite TLS_ECDHE_ECDSA_WITH_AES_128_GCM_SHA256;
    public static CipherSuite TLS_ECDHE_ECDSA_WITH_AES_256_GCM_SHA384;
    public static CipherSuite TLS_ECDH_ECDSA_WITH_AES_128_GCM_SHA256;
    public static CipherSuite TLS_ECDH_ECDSA_WITH_AES_256_GCM_SHA384;
    public static CipherSuite TLS_ECDHE_RSA_WITH_AES_128_GCM_SHA256;
    public static CipherSuite TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384;
    public static CipherSuite TLS_ECDH_RSA_WITH_AES_128_GCM_SHA256;
    public static CipherSuite TLS_ECDH_RSA_WITH_AES_256_GCM_SHA384;
}
internal class TlsClientStream.CipherSuiteInfo : object {
    public CipherSuite Id;
    public KeyExchange KeyExchange;
    public int AesKeyLen;
    public TLSHashAlgorithm HashAlgorithm;
    public PRFAlgorithm PRFAlgorithm;
    public AesMode AesMode;
    public static CipherSuiteInfo[] Supported;
    public int MACLen { get; }
    public bool IsAllowedBefore1_2 { get; }
    private static CipherSuiteInfo();
    public int get_MACLen();
    public HMAC CreateHMAC(Byte[] key);
    public HMAC CreatePrfHMAC(Byte[] key);
    public SignatureAlgorithm GetSignatureAlgorithm();
    public bool get_IsAllowedBefore1_2();
}
internal class TlsClientStream.ClientAlertException : Exception {
    [CompilerGeneratedAttribute]
private AlertDescription <Description>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ExtraInfo>k__BackingField;
    public AlertDescription Description { get; public set; }
    public string ExtraInfo { get; public set; }
    public ClientAlertException(AlertDescription description, string message);
    [CompilerGeneratedAttribute]
public AlertDescription get_Description();
    [CompilerGeneratedAttribute]
public void set_Description(AlertDescription value);
    [CompilerGeneratedAttribute]
public string get_ExtraInfo();
    [CompilerGeneratedAttribute]
public void set_ExtraInfo(string value);
}
internal enum TlsClientStream.ClientCertificateType : Enum {
    public byte value__;
    public static ClientCertificateType RSASign;
    public static ClientCertificateType DSSSign;
    public static ClientCertificateType RSAFixedDH;
    public static ClientCertificateType DSSFixedDH;
    public static ClientCertificateType ECDSASign;
    public static ClientCertificateType RSAFixedECDH;
    public static ClientCertificateType ECDSAFixedECDH;
}
internal class TlsClientStream.ConnectionState : object {
    [CompilerGeneratedAttribute]
private TlsVersion <TlsVersion>k__BackingField;
    [CompilerGeneratedAttribute]
private CipherSuiteInfo <CipherSuite>k__BackingField;
    [CompilerGeneratedAttribute]
private Aes <ReadAes>k__BackingField;
    [CompilerGeneratedAttribute]
private Aes <WriteAes>k__BackingField;
    [CompilerGeneratedAttribute]
private HMAC <ReadMac>k__BackingField;
    [CompilerGeneratedAttribute]
private HMAC <WriteMac>k__BackingField;
    [CompilerGeneratedAttribute]
private ICryptoTransform <ReadAesECB>k__BackingField;
    [CompilerGeneratedAttribute]
private ICryptoTransform <WriteAesECB>k__BackingField;
    [CompilerGeneratedAttribute]
private UInt64[] <ReadGCMTable>k__BackingField;
    [CompilerGeneratedAttribute]
private UInt64[] <WriteGCMTable>k__BackingField;
    [CompilerGeneratedAttribute]
private Byte[] <MasterSecret>k__BackingField;
    [CompilerGeneratedAttribute]
private Byte[] <ClientRandom>k__BackingField;
    [CompilerGeneratedAttribute]
private Byte[] <ServerRandom>k__BackingField;
    [CompilerGeneratedAttribute]
private ulong <ReadSeqNum>k__BackingField;
    [CompilerGeneratedAttribute]
private ulong <WriteSeqNum>k__BackingField;
    [CompilerGeneratedAttribute]
private Byte[] <ReadIv>k__BackingField;
    [CompilerGeneratedAttribute]
private Byte[] <WriteIv>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <SecureRenegotiation>k__BackingField;
    [CompilerGeneratedAttribute]
private Byte[] <ClientVerifyData>k__BackingField;
    [CompilerGeneratedAttribute]
private Byte[] <ServerVerifyData>k__BackingField;
    public TlsVersion TlsVersion { get; public set; }
    public CipherSuiteInfo CipherSuite { get; public set; }
    public Aes ReadAes { get; public set; }
    public Aes WriteAes { get; public set; }
    public int BlockLen { get; }
    public HMAC ReadMac { get; public set; }
    public HMAC WriteMac { get; public set; }
    public ICryptoTransform ReadAesECB { get; public set; }
    public ICryptoTransform WriteAesECB { get; public set; }
    public UInt64[] ReadGCMTable { get; public set; }
    public UInt64[] WriteGCMTable { get; public set; }
    public int MacLen { get; }
    public Byte[] MasterSecret { get; public set; }
    public Byte[] ClientRandom { get; public set; }
    public Byte[] ServerRandom { get; public set; }
    public ulong ReadSeqNum { get; public set; }
    public ulong WriteSeqNum { get; public set; }
    public Byte[] ReadIv { get; public set; }
    public Byte[] WriteIv { get; public set; }
    public bool SecureRenegotiation { get; public set; }
    public Byte[] ClientVerifyData { get; public set; }
    public Byte[] ServerVerifyData { get; public set; }
    public int IvLen { get; }
    public PRFAlgorithm PRFAlgorithm { get; }
    public bool IsAuthenticated { get; }
    public int WriteStartPos { get; }
    [CompilerGeneratedAttribute]
public TlsVersion get_TlsVersion();
    [CompilerGeneratedAttribute]
public void set_TlsVersion(TlsVersion value);
    [CompilerGeneratedAttribute]
public CipherSuiteInfo get_CipherSuite();
    [CompilerGeneratedAttribute]
public void set_CipherSuite(CipherSuiteInfo value);
    [CompilerGeneratedAttribute]
public Aes get_ReadAes();
    [CompilerGeneratedAttribute]
public void set_ReadAes(Aes value);
    [CompilerGeneratedAttribute]
public Aes get_WriteAes();
    [CompilerGeneratedAttribute]
public void set_WriteAes(Aes value);
    public int get_BlockLen();
    [CompilerGeneratedAttribute]
public HMAC get_ReadMac();
    [CompilerGeneratedAttribute]
public void set_ReadMac(HMAC value);
    [CompilerGeneratedAttribute]
public HMAC get_WriteMac();
    [CompilerGeneratedAttribute]
public void set_WriteMac(HMAC value);
    [CompilerGeneratedAttribute]
public ICryptoTransform get_ReadAesECB();
    [CompilerGeneratedAttribute]
public void set_ReadAesECB(ICryptoTransform value);
    [CompilerGeneratedAttribute]
public ICryptoTransform get_WriteAesECB();
    [CompilerGeneratedAttribute]
public void set_WriteAesECB(ICryptoTransform value);
    [CompilerGeneratedAttribute]
public UInt64[] get_ReadGCMTable();
    [CompilerGeneratedAttribute]
public void set_ReadGCMTable(UInt64[] value);
    [CompilerGeneratedAttribute]
public UInt64[] get_WriteGCMTable();
    [CompilerGeneratedAttribute]
public void set_WriteGCMTable(UInt64[] value);
    public int get_MacLen();
    [CompilerGeneratedAttribute]
public Byte[] get_MasterSecret();
    [CompilerGeneratedAttribute]
public void set_MasterSecret(Byte[] value);
    [CompilerGeneratedAttribute]
public Byte[] get_ClientRandom();
    [CompilerGeneratedAttribute]
public void set_ClientRandom(Byte[] value);
    [CompilerGeneratedAttribute]
public Byte[] get_ServerRandom();
    [CompilerGeneratedAttribute]
public void set_ServerRandom(Byte[] value);
    [CompilerGeneratedAttribute]
public ulong get_ReadSeqNum();
    [CompilerGeneratedAttribute]
public void set_ReadSeqNum(ulong value);
    [CompilerGeneratedAttribute]
public ulong get_WriteSeqNum();
    [CompilerGeneratedAttribute]
public void set_WriteSeqNum(ulong value);
    [CompilerGeneratedAttribute]
public Byte[] get_ReadIv();
    [CompilerGeneratedAttribute]
public void set_ReadIv(Byte[] value);
    [CompilerGeneratedAttribute]
public Byte[] get_WriteIv();
    [CompilerGeneratedAttribute]
public void set_WriteIv(Byte[] value);
    [CompilerGeneratedAttribute]
public bool get_SecureRenegotiation();
    [CompilerGeneratedAttribute]
public void set_SecureRenegotiation(bool value);
    [CompilerGeneratedAttribute]
public Byte[] get_ClientVerifyData();
    [CompilerGeneratedAttribute]
public void set_ClientVerifyData(Byte[] value);
    [CompilerGeneratedAttribute]
public Byte[] get_ServerVerifyData();
    [CompilerGeneratedAttribute]
public void set_ServerVerifyData(Byte[] value);
    public int get_IvLen();
    public PRFAlgorithm get_PRFAlgorithm();
    public bool get_IsAuthenticated();
    public int get_WriteStartPos();
    public sealed virtual void Dispose();
}
internal enum TlsClientStream.ContentType : Enum {
    public byte value__;
    public static ContentType ChangeCipherSpec;
    public static ContentType Alert;
    public static ContentType Handshake;
    public static ContentType ApplicationData;
}
internal class TlsClientStream.EllipticCurve : object {
    public static EllipticCurve P256;
    public static EllipticCurve P384;
    public static EllipticCurve P521;
    public BigInt p;
    private BigInteger b;
    private BigInteger q;
    private BigInt negP;
    public BigInt xg;
    public BigInt yg;
    private Func`2<BigInt, BigInt> modp;
    public int curveLen;
    public Byte[] asnName;
    public int curveByteLen { get; }
    private EllipticCurve(BigInt p, BigInteger b, BigInteger q, BigInt xg, BigInt yg, Func`2<BigInt, BigInt> modp, int curveLen, Byte[] asnName);
    private static EllipticCurve();
    public int get_curveByteLen();
    public Projective EcDouble(Projective s);
    private BigInt Replace(BigInt old, BigInt new_);
    private void Assign(BigInt& variable, BigInt new_);
    public Projective EcAdd(Projective s, Projective t);
    public Projective EcFullAdd(Projective s, Projective t);
    public Projective EcFullSub(Projective s, Projective t);
    public Affine EcAffinify(Projective s);
    public Projective EcProjectify(Affine s);
    public Projective EcMult(BigInt d, Projective s);
    public Projective EcTwinMult(BigInt d0, Projective S, BigInt d1, Projective T);
    public BigInt GenPriv(RandomNumberGenerator rng);
    public static EllipticCurve GetCurveFromParameters(Byte[] pkParameters);
    public void Ecdh(BigInt publicX, BigInt publicY, RandomNumberGenerator rng, Byte[]& preMasterSecret, Affine& publicPoint);
    public static Nullable`1<bool> VerifySignature(Byte[] pkParameters, Byte[] pkKey, Byte[] hash, Byte[] signature);
    public static Nullable`1<bool> VerifySignatureCng(Byte[] pkParameters, Byte[] pkKey, Byte[] hash, Byte[] signature);
}
internal enum TlsClientStream.ExtensionType : Enum {
    public ushort value__;
    public static ExtensionType ServerName;
    public static ExtensionType SupportedEllipticCurves;
    public static ExtensionType SupportedPointFormats;
    public static ExtensionType SignatureAlgorithms;
    public static ExtensionType RenegotiationInfo;
}
internal class TlsClientStream.GaloisCounterMode : object {
    private static void Mul(ulong h1, ulong h2, ulong y1, ulong y2, ulong x1, ulong x2, UInt64& ynext1, UInt64& ynext2);
    private static void MulWithTable(UInt64[] tbl, ulong y1, ulong y2, ulong x1, ulong x2, UInt64& ynext1, UInt64& ynext2);
    private static void MulWithTable2(UInt64[] tbl, ulong y1, ulong y2, Byte[] x, int offset, UInt64& ynext1, UInt64& ynext2);
    private static UInt64[] Construct(ulong h1, ulong h2);
    private static void Encrypt(Byte[] data, int offset, int len, ICryptoTransform key, Byte[] iv, int startCounter, Byte[] temp512);
    private static void CalcHash(ICryptoTransform key, Byte[] iv, Byte[] data, int offset, int len, ulong seqNum, ulong header, UInt64[] h, Byte[] temp512);
    private static ulong GetHeader(byte contentType, int length);
    public static void GCMAE(ICryptoTransform key, Byte[] iv, Byte[] data, int offset, int len, ulong seqNum, byte contentType, UInt64[] h, Byte[] temp512);
    public static bool GCMAD(ICryptoTransform key, Byte[] iv, Byte[] data, int offset, int len, ulong seqNum, byte contentType, UInt64[] h, Byte[] temp512);
    public static UInt64[] GetH(ICryptoTransform key);
}
internal class TlsClientStream.HandshakeData : object {
    public List`1<X509Certificate2> CertList;
    public X509Chain CertChain;
    public Hasher HandshakeHash1;
    public Hasher HandshakeHash2;
    public Hasher HandshakeHash1_384;
    public Hasher HandshakeHash2_384;
    public Hasher HandshakeHash1_MD5SHA1;
    public Hasher HandshakeHash2_MD5SHA1;
    public Hasher CertificateVerifyHash_SHA1;
    public Hasher CertificateVerifyHash_MD5;
    public Byte[] P;
    public Byte[] G;
    public Byte[] Ys;
    public EllipticCurve EcCurve;
    public BigInt EcX;
    public BigInt EcY;
    public List`1<ClientCertificateType> CertificateTypes;
    public List`1<Tuple`2<TLSHashAlgorithm, SignatureAlgorithm>> SupportedSignatureAlgorithms;
    public List`1<string> CertificateAuthorities;
    public X509Chain SelectedClientCertificate;
}
internal class TlsClientStream.HandshakeMessagesBuffer : object {
    private List`1<Byte[]> _messages;
    private Byte[] _headerBuffer;
    private int _headerBufferLen;
    private Byte[] _buffer;
    private int _bufferLen;
    [CompilerGeneratedAttribute]
private bool <HasServerHelloDone>k__BackingField;
    private bool _hasFinished;
    private bool _hasHelloRequest;
    public List`1<Byte[]> Messages { get; }
    public bool HasServerHelloDone { get; private set; }
    public bool HasBufferedData { get; }
    public List`1<Byte[]> get_Messages();
    [CompilerGeneratedAttribute]
public bool get_HasServerHelloDone();
    [CompilerGeneratedAttribute]
private void set_HasServerHelloDone(bool value);
    public bool get_HasBufferedData();
    private void CheckType(HandshakeType type);
    public static bool IsHelloRequest(Byte[] message);
    public int AddBytes(Byte[] buffer, int offset, int length, IgnoreHelloRequestsSettings ignoreHelloRequests);
    public void RemoveFirst();
    public void ClearMessages();
    public sealed virtual void Dispose();
}
internal enum TlsClientStream.HandshakeType : Enum {
    public byte value__;
    public static HandshakeType HelloRequest;
    public static HandshakeType ClientHello;
    public static HandshakeType ServerHello;
    public static HandshakeType Certificate;
    public static HandshakeType ServerKeyExchange;
    public static HandshakeType CertificateRequest;
    public static HandshakeType ServerHelloDone;
    public static HandshakeType CertificateVerify;
    public static HandshakeType ClientKeyExchange;
    public static HandshakeType Finished;
}
internal abstract class TlsClientStream.Hasher : object {
    internal static Byte[] EmptyByteArray;
    private static Hasher();
    public abstract virtual void Initialize();
    public abstract virtual void Update(Byte[] arr, int offset, int len);
    public abstract virtual Byte[] Final();
    public abstract virtual void Dispose();
    public static Hasher Create(TLSHashAlgorithm hashAlgorithm);
}
internal enum TlsClientStream.KeyExchange : Enum {
    public byte value__;
    public static KeyExchange NULL;
    public static KeyExchange RSA;
    public static KeyExchange DHE_RSA;
    public static KeyExchange DHE_DSS;
    public static KeyExchange ECDHE_RSA;
    public static KeyExchange ECDHE_ECDSA;
    public static KeyExchange ECDH_RSA;
    public static KeyExchange ECDH_ECDSA;
}
internal class TlsClientStream.MD5SHA1 : HashAlgorithm {
    private MD5 _md5;
    private SHA1 _sha1;
    protected virtual void Dispose(bool disposing);
    protected virtual void HashCore(Byte[] array, int ibStart, int cbSize);
    protected virtual Byte[] HashFinal();
    public virtual void Initialize();
}
internal enum TlsClientStream.NamedCurve : Enum {
    public ushort value__;
    public static NamedCurve secp256r1;
    public static NamedCurve secp384r1;
    public static NamedCurve secp521r1;
}
internal enum TlsClientStream.PRFAlgorithm : Enum {
    public byte value__;
    public static PRFAlgorithm TLSPrfSHA256;
    public static PRFAlgorithm TLSPrfSHA384;
    public static PRFAlgorithm TLSPrfMD5SHA1;
}
internal static class TlsClientStream.RsaPKCS1 : object {
    public static bool VerifyRsaPKCS1(RSA key, Byte[] signature, Byte[] hash, bool allowNoPadding);
    public static Byte[] SignRsaPKCS1(RSA key, Byte[] hash);
}
internal class TlsClientStream.ServerAlertException : Exception {
    [CompilerGeneratedAttribute]
private AlertDescription <Description>k__BackingField;
    private AlertDescription Description { get; private set; }
    public ServerAlertException(AlertDescription description);
    [CompilerGeneratedAttribute]
private AlertDescription get_Description();
    [CompilerGeneratedAttribute]
private void set_Description(AlertDescription value);
}
internal enum TlsClientStream.SignatureAlgorithm : Enum {
    public byte value__;
    public static SignatureAlgorithm RSA;
    public static SignatureAlgorithm DSA;
    public static SignatureAlgorithm ECDSA;
}
internal class TlsClientStream.TlsClientStream : Stream {
    private static TlsVersion HighestTlsVersionSupported;
    private static int MaxEncryptedRecordLen;
    private Byte[] _buf;
    private int _readStart;
    private int _readEnd;
    private int _packetLen;
    private Stream _baseStream;
    private ConnectionState _connState;
    private ConnectionState _readConnState;
    private ConnectionState _pendingConnState;
    private RandomNumberGenerator _rng;
    private ContentType _contentType;
    private int _plaintextLen;
    private int _plaintextStart;
    private Byte[] _tempBuf8;
    private Byte[] _temp512;
    private HandshakeMessagesBuffer _handshakeMessagesBuffer;
    private HandshakeData _handshakeData;
    private bool _noRenegotiationExtensionSupportIsFatal;
    private string _hostName;
    private X509CertificateCollection _clientCertificates;
    private RemoteCertificateValidationCallback _remoteCertificationValidationCallback;
    private bool _checkCertificateRevocation;
    private bool _waitingForChangeCipherSpec;
    private bool _waitingForFinished;
    private Byte[] _renegotiationTempWriteBuf;
    private int _writePos;
    private int _decryptedReadPos;
    private int _decryptedReadEnd;
    private static int MaxBufferedReadData;
    private Queue`1<Byte[]> _bufferedReadData;
    private int _posBufferedReadData;
    private int _lenBufferedReadData;
    private bool _eof;
    private bool _closed;
    private int WriteSpaceLeft { get; }
    public long Position { get; public set; }
    public long Length { get; }
    public bool CanRead { get; }
    public bool CanWrite { get; }
    public bool CanSeek { get; }
    public TlsClientStream(Stream baseStream);
    [AsyncStateMachineAttribute("TlsClientStream.TlsClientStream/<ReadRecordAsync>d__0")]
private Task`1<bool> ReadRecordAsync(CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("TlsClientStream.TlsClientStream/<GetInitialHandshakeMessagesAsync>d__1")]
private Task GetInitialHandshakeMessagesAsync(CancellationToken cancellationToken, bool allowApplicationData);
    [AsyncStateMachineAttribute("TlsClientStream.TlsClientStream/<WaitForHandshakeCompletedAsync>d__2")]
private Task WaitForHandshakeCompletedAsync(bool initialHandshake, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("TlsClientStream.TlsClientStream/<WriteAlertFatalAsync>d__3")]
private Task WriteAlertFatalAsync(AlertDescription description, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("TlsClientStream.TlsClientStream/<SendClosureAlertAsync>d__4")]
private Task SendClosureAlertAsync(CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("TlsClientStream.TlsClientStream/<HandleAlertMessageAsync>d__5")]
private Task HandleAlertMessageAsync(CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("TlsClientStream.TlsClientStream/<PerformInitialHandshakeAsync>d__6")]
public Task PerformInitialHandshakeAsync(string hostName, X509CertificateCollection clientCertificates, RemoteCertificateValidationCallback remoteCertificateValidationCallback, bool checkCertificateRevocation, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("TlsClientStream.TlsClientStream/<WriteAsync>d__7")]
public virtual Task WriteAsync(Byte[] buffer, int offset, int len, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("TlsClientStream.TlsClientStream/<FlushAsync>d__8")]
public virtual Task FlushAsync(CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("TlsClientStream.TlsClientStream/<ReadAsync>d__9")]
public virtual Task`1<int> ReadAsync(Byte[] buffer, int offset, int len, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("TlsClientStream.TlsClientStream/<ReadInternalAsync>d__10")]
private Task`1<int> ReadInternalAsync(Byte[] buffer, int offset, int len, bool onlyProcessHandshake, bool readNewDataIfAvailable, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("TlsClientStream.TlsClientStream/<HasBufferedReadDataAsync>d__11")]
public Task`1<bool> HasBufferedReadDataAsync(bool checkNetworkStream, CancellationToken cancellationToken);
    [RewriteAsyncAttribute("False")]
private bool ReadRecord();
    private void Decrypt();
    private int Encrypt(int startPos, int len);
    private void UpdateHandshakeHash(Byte[] buf, int offset, int len);
    [RewriteAsyncAttribute("False")]
private void GetInitialHandshakeMessages(bool allowApplicationData);
    private int TraverseHandshakeMessages();
    private int GenerateHandshakeResponse();
    private void SendHandshakeMessage(SendHandshakeMessageDelegate func, Int32& offset, int ivLen);
    [RewriteAsyncAttribute("False")]
private void WaitForHandshakeCompleted(bool initialHandshake);
    private HandshakeType SendClientHello(Int32& offset);
    private void ParseServerHelloMessage(Byte[] buf, Int32& pos, int endPos);
    private void ParseCertificateMessage(Byte[] buf, Int32& pos);
    private void SetMasterSecret(Byte[] preMasterSecret);
    private HandshakeType SendClientKeyExchangeRsa(Int32& offset);
    private void ParseServerKeyExchangeMessage(Byte[] buf, Int32& pos);
    private HandshakeType SendClientKeyExchangeDhe(Int32& offset);
    private HandshakeType SendClientKeyExchangeEcdh(Int32& offset);
    private HandshakeType SendClientKeyExchangeEcdhe(Int32& offset);
    private void ParseCertificateRequest(Byte[] buf, Int32& pos);
    private HandshakeType SendClientCertificate(Int32& offset);
    private HandshakeType SendCertificateVerify(Int32& offset);
    private void SendChangeCipherSpec(Int32& offset, int ivLen);
    private HandshakeType SendFinished(Int32& offset);
    private void ParseChangeCipherSpec();
    private void ParseFinishedMessage(Byte[] buf);
    private void SendAlertFatal(AlertDescription description, string message);
    [RewriteAsyncAttribute("False")]
private void WriteAlertFatal(AlertDescription description);
    [RewriteAsyncAttribute("False")]
private void SendClosureAlert();
    [RewriteAsyncAttribute("False")]
private void HandleAlertMessage();
    private void ResetWritePos();
    private void CheckCanWrite();
    private void CheckNotClosed();
    private void EnqueueReadData(bool allowApplicationData);
    [RewriteAsyncAttribute("False")]
public void PerformInitialHandshake(string hostName, X509CertificateCollection clientCertificates, RemoteCertificateValidationCallback remoteCertificateValidationCallback, bool checkCertificateRevocation);
    private int get_WriteSpaceLeft();
    [RewriteAsyncAttribute("True")]
public virtual void Write(Byte[] buffer, int offset, int len);
    [RewriteAsyncAttribute("True")]
public virtual void Flush();
    [RewriteAsyncAttribute("True")]
public virtual int Read(Byte[] buffer, int offset, int len);
    [RewriteAsyncAttribute("False")]
private int ReadInternal(Byte[] buffer, int offset, int len, bool onlyProcessHandshake, bool readNewDataIfAvailable);
    protected virtual void Dispose(bool disposing);
    public virtual long Seek(long offset, SeekOrigin origin);
    public virtual long get_Position();
    public virtual void set_Position(long value);
    public virtual long get_Length();
    public virtual bool get_CanRead();
    public virtual bool get_CanWrite();
    public virtual void SetLength(long value);
    public virtual bool get_CanSeek();
    [RewriteAsyncAttribute("False")]
public bool HasBufferedReadData(bool checkNetworkStream);
}
internal enum TlsClientStream.TLSHashAlgorithm : Enum {
    public byte value__;
    public static TLSHashAlgorithm MD5;
    public static TLSHashAlgorithm SHA1;
    public static TLSHashAlgorithm SHA256;
    public static TLSHashAlgorithm SHA384;
    public static TLSHashAlgorithm SHA512;
    public static TLSHashAlgorithm MD5SHA1;
}
internal enum TlsClientStream.TlsVersion : Enum {
    public ushort value__;
    public static TlsVersion TLSv1_0;
    public static TlsVersion TLSv1_1;
    public static TlsVersion TLSv1_2;
}
[ExtensionAttribute]
internal static class TlsClientStream.Utils : object {
    public static Dictionary`2<string, string> HashNameToOID;
    private static Utils();
    public static int GetHashLen(TLSHashAlgorithm hashAlgorithm);
    public static void ClearArray(Array array);
    public static bool ArraysEqual(Byte[] arr1, int offset1, Byte[] arr2, int offset2, int len);
    public static int WriteUInt64(Byte[] buf, int offset, ulong v);
    public static int WriteUInt32(Byte[] buf, int offset, UInt32 v);
    public static int WriteUInt24(Byte[] buf, int offset, int v);
    public static int WriteUInt16(Byte[] buf, int offset, ushort v);
    public static ushort ReadUInt16(Byte[] buf, Int32& offset);
    public static int ReadUInt24(Byte[] buf, Int32& offset);
    public static UInt32 ReadUInt32(Byte[] buf, Int32& offset);
    public static ulong ReadUInt64(Byte[] buf, Int32& offset);
    public static Byte[] PRF(HMAC hmac, string label, Byte[] seed, int bytesNeeded);
    public static Byte[] PRF(PRFAlgorithm prfAlgorithm, Byte[] key, string label, Byte[] seed, int bytesNeeded);
    public static int GetASNLength(Byte[] buf, Int32& offset);
    public static bool HostnameInCertificate(X509Certificate2 certificate, string hostname);
    public static bool MatchHostname(string altname, string hostname);
    public static Byte[] DecodeDERSignature(Byte[] signature, int offset, int len, int integerLength);
    public static BigInteger BigIntegerFromBigEndian(Byte[] arr, int offset, int len);
    public static Byte[] BigEndianFromBigInteger(BigInteger bi);
    [ExtensionAttribute]
public static void TransformBlock(HashAlgorithm hashAlg, Byte[] buf, int offset, int len);
    [ExtensionAttribute]
public static void AppendData(HashAlgorithm hash, Byte[] data, int offset, int len);
    [ExtensionAttribute]
public static Byte[] GetHashAndReset(HashAlgorithm hash);
    public static Byte[] EncryptPkcsPadding(X509Certificate2 cert, Byte[] rgb);
}
