[GeneratedCodeAttribute("Microsoft.Extensions.Logging.Generators", "6.0.5.2210")]
internal static class __LoggerMessageGenerator : object {
    [NullableContextAttribute("1")]
public static string Enumerate(IEnumerable enumerable);
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
internal class Microsoft.CodeAnalysis.EmbeddedAttribute : Attribute {
}
public enum Npgsql.ArrayNullabilityMode : Enum {
    public int value__;
    public static ArrayNullabilityMode Never;
    public static ArrayNullabilityMode Always;
    public static ArrayNullabilityMode PerInstance;
}
internal enum Npgsql.BackendMessageCode : Enum {
    public byte value__;
    public static BackendMessageCode AuthenticationRequest;
    public static BackendMessageCode BackendKeyData;
    public static BackendMessageCode BindComplete;
    public static BackendMessageCode CloseComplete;
    public static BackendMessageCode CommandComplete;
    public static BackendMessageCode CopyData;
    public static BackendMessageCode CopyDone;
    public static BackendMessageCode CopyBothResponse;
    public static BackendMessageCode CopyInResponse;
    public static BackendMessageCode CopyOutResponse;
    public static BackendMessageCode DataRow;
    public static BackendMessageCode EmptyQueryResponse;
    public static BackendMessageCode ErrorResponse;
    public static BackendMessageCode FunctionCall;
    public static BackendMessageCode FunctionCallResponse;
    public static BackendMessageCode NoData;
    public static BackendMessageCode NoticeResponse;
    public static BackendMessageCode NotificationResponse;
    public static BackendMessageCode ParameterDescription;
    public static BackendMessageCode ParameterStatus;
    public static BackendMessageCode ParseComplete;
    public static BackendMessageCode PasswordPacket;
    public static BackendMessageCode PortalSuspended;
    public static BackendMessageCode ReadyForQuery;
    public static BackendMessageCode RowDescription;
}
internal class Npgsql.BackendMessages.AuthenticationCleartextPasswordMessage : AuthenticationRequestMessage {
    [NullableAttribute("1")]
internal static AuthenticationCleartextPasswordMessage Instance;
    internal AuthenticationRequestType AuthRequestType { get; }
    private static AuthenticationCleartextPasswordMessage();
    internal virtual AuthenticationRequestType get_AuthRequestType();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Npgsql.BackendMessages.AuthenticationGSSContinueMessage : AuthenticationRequestMessage {
    [CompilerGeneratedAttribute]
private Byte[] <AuthenticationData>k__BackingField;
    internal AuthenticationRequestType AuthRequestType { get; }
    internal Byte[] AuthenticationData { get; private set; }
    private AuthenticationGSSContinueMessage(Byte[] authenticationData);
    internal virtual AuthenticationRequestType get_AuthRequestType();
    [CompilerGeneratedAttribute]
internal Byte[] get_AuthenticationData();
    [CompilerGeneratedAttribute]
private void set_AuthenticationData(Byte[] value);
    internal static AuthenticationGSSContinueMessage Load(NpgsqlReadBuffer buf, int len);
}
internal class Npgsql.BackendMessages.AuthenticationGSSMessage : AuthenticationRequestMessage {
    [NullableAttribute("1")]
internal static AuthenticationGSSMessage Instance;
    internal AuthenticationRequestType AuthRequestType { get; }
    private static AuthenticationGSSMessage();
    internal virtual AuthenticationRequestType get_AuthRequestType();
}
internal class Npgsql.BackendMessages.AuthenticationKerberosV5Message : AuthenticationRequestMessage {
    [NullableAttribute("1")]
internal static AuthenticationKerberosV5Message Instance;
    internal AuthenticationRequestType AuthRequestType { get; }
    private static AuthenticationKerberosV5Message();
    internal virtual AuthenticationRequestType get_AuthRequestType();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Npgsql.BackendMessages.AuthenticationMD5PasswordMessage : AuthenticationRequestMessage {
    [CompilerGeneratedAttribute]
private Byte[] <Salt>k__BackingField;
    internal AuthenticationRequestType AuthRequestType { get; }
    internal Byte[] Salt { get; private set; }
    private AuthenticationMD5PasswordMessage(Byte[] salt);
    internal virtual AuthenticationRequestType get_AuthRequestType();
    [CompilerGeneratedAttribute]
internal Byte[] get_Salt();
    [CompilerGeneratedAttribute]
private void set_Salt(Byte[] value);
    internal static AuthenticationMD5PasswordMessage Load(NpgsqlReadBuffer buf);
}
internal class Npgsql.BackendMessages.AuthenticationOkMessage : AuthenticationRequestMessage {
    [NullableAttribute("1")]
internal static AuthenticationOkMessage Instance;
    internal AuthenticationRequestType AuthRequestType { get; }
    private static AuthenticationOkMessage();
    internal virtual AuthenticationRequestType get_AuthRequestType();
}
internal abstract class Npgsql.BackendMessages.AuthenticationRequestMessage : object {
    public BackendMessageCode Code { get; }
    internal AuthenticationRequestType AuthRequestType { get; }
    public sealed virtual BackendMessageCode get_Code();
    internal abstract virtual AuthenticationRequestType get_AuthRequestType();
}
internal enum Npgsql.BackendMessages.AuthenticationRequestType : Enum {
    public int value__;
    public static AuthenticationRequestType AuthenticationOk;
    public static AuthenticationRequestType AuthenticationKerberosV4;
    public static AuthenticationRequestType AuthenticationKerberosV5;
    public static AuthenticationRequestType AuthenticationCleartextPassword;
    public static AuthenticationRequestType AuthenticationCryptPassword;
    public static AuthenticationRequestType AuthenticationMD5Password;
    public static AuthenticationRequestType AuthenticationSCMCredential;
    public static AuthenticationRequestType AuthenticationGSS;
    public static AuthenticationRequestType AuthenticationGSSContinue;
    public static AuthenticationRequestType AuthenticationSSPI;
    public static AuthenticationRequestType AuthenticationSASL;
    public static AuthenticationRequestType AuthenticationSASLContinue;
    public static AuthenticationRequestType AuthenticationSASLFinal;
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Npgsql.BackendMessages.AuthenticationSASLContinueMessage : AuthenticationRequestMessage {
    [CompilerGeneratedAttribute]
private Byte[] <Payload>k__BackingField;
    internal AuthenticationRequestType AuthRequestType { get; }
    internal Byte[] Payload { get; }
    internal AuthenticationSASLContinueMessage(NpgsqlReadBuffer buf, int len);
    internal virtual AuthenticationRequestType get_AuthRequestType();
    [CompilerGeneratedAttribute]
internal Byte[] get_Payload();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Npgsql.BackendMessages.AuthenticationSASLFinalMessage : AuthenticationRequestMessage {
    [CompilerGeneratedAttribute]
private Byte[] <Payload>k__BackingField;
    internal AuthenticationRequestType AuthRequestType { get; }
    internal Byte[] Payload { get; }
    internal AuthenticationSASLFinalMessage(NpgsqlReadBuffer buf, int len);
    internal virtual AuthenticationRequestType get_AuthRequestType();
    [CompilerGeneratedAttribute]
internal Byte[] get_Payload();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Npgsql.BackendMessages.AuthenticationSASLMessage : AuthenticationRequestMessage {
    [CompilerGeneratedAttribute]
private List`1<string> <Mechanisms>k__BackingField;
    internal AuthenticationRequestType AuthRequestType { get; }
    internal List`1<string> Mechanisms { get; }
    internal AuthenticationSASLMessage(NpgsqlReadBuffer buf);
    internal virtual AuthenticationRequestType get_AuthRequestType();
    [CompilerGeneratedAttribute]
internal List`1<string> get_Mechanisms();
}
internal class Npgsql.BackendMessages.AuthenticationSCMCredentialMessage : AuthenticationRequestMessage {
    [NullableAttribute("1")]
internal static AuthenticationSCMCredentialMessage Instance;
    internal AuthenticationRequestType AuthRequestType { get; }
    private static AuthenticationSCMCredentialMessage();
    internal virtual AuthenticationRequestType get_AuthRequestType();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Npgsql.BackendMessages.AuthenticationSCRAMServerFinalMessage : object {
    [CompilerGeneratedAttribute]
private string <ServerSignature>k__BackingField;
    internal string ServerSignature { get; }
    internal AuthenticationSCRAMServerFinalMessage(string serverSignature);
    [CompilerGeneratedAttribute]
internal string get_ServerSignature();
    internal static AuthenticationSCRAMServerFinalMessage Load(Byte[] bytes, ILogger connectionLogger);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Npgsql.BackendMessages.AuthenticationSCRAMServerFirstMessage : object {
    [CompilerGeneratedAttribute]
private string <Nonce>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Salt>k__BackingField;
    [CompilerGeneratedAttribute]
private int <Iteration>k__BackingField;
    internal string Nonce { get; }
    internal string Salt { get; }
    internal int Iteration { get; }
    private AuthenticationSCRAMServerFirstMessage(string nonce, string salt, int iteration);
    [CompilerGeneratedAttribute]
internal string get_Nonce();
    [CompilerGeneratedAttribute]
internal string get_Salt();
    [CompilerGeneratedAttribute]
internal int get_Iteration();
    internal static AuthenticationSCRAMServerFirstMessage Load(Byte[] bytes, ILogger connectionLogger);
}
internal class Npgsql.BackendMessages.AuthenticationSSPIMessage : AuthenticationRequestMessage {
    [NullableAttribute("1")]
internal static AuthenticationSSPIMessage Instance;
    internal AuthenticationRequestType AuthRequestType { get; }
    private static AuthenticationSSPIMessage();
    internal virtual AuthenticationRequestType get_AuthRequestType();
}
internal class Npgsql.BackendMessages.BackendKeyDataMessage : object {
    [CompilerGeneratedAttribute]
private int <BackendProcessId>k__BackingField;
    [CompilerGeneratedAttribute]
private int <BackendSecretKey>k__BackingField;
    public BackendMessageCode Code { get; }
    internal int BackendProcessId { get; private set; }
    internal int BackendSecretKey { get; private set; }
    [NullableContextAttribute("1")]
internal BackendKeyDataMessage(NpgsqlReadBuffer buf);
    public sealed virtual BackendMessageCode get_Code();
    [CompilerGeneratedAttribute]
internal int get_BackendProcessId();
    [CompilerGeneratedAttribute]
private void set_BackendProcessId(int value);
    [CompilerGeneratedAttribute]
internal int get_BackendSecretKey();
    [CompilerGeneratedAttribute]
private void set_BackendSecretKey(int value);
}
internal class Npgsql.BackendMessages.BindCompleteMessage : object {
    [NullableAttribute("1")]
internal static BindCompleteMessage Instance;
    public BackendMessageCode Code { get; }
    private static BindCompleteMessage();
    public sealed virtual BackendMessageCode get_Code();
}
internal class Npgsql.BackendMessages.CloseCompletedMessage : object {
    [NullableAttribute("1")]
internal static CloseCompletedMessage Instance;
    public BackendMessageCode Code { get; }
    private static CloseCompletedMessage();
    public sealed virtual BackendMessageCode get_Code();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Npgsql.BackendMessages.CommandCompleteMessage : object {
    [CompilerGeneratedAttribute]
private StatementType <StatementType>k__BackingField;
    [CompilerGeneratedAttribute]
private UInt32 <OID>k__BackingField;
    [CompilerGeneratedAttribute]
private ulong <Rows>k__BackingField;
    internal StatementType StatementType { get; private set; }
    internal UInt32 OID { get; private set; }
    internal ulong Rows { get; private set; }
    public BackendMessageCode Code { get; }
    [CompilerGeneratedAttribute]
internal StatementType get_StatementType();
    [CompilerGeneratedAttribute]
private void set_StatementType(StatementType value);
    [CompilerGeneratedAttribute]
internal UInt32 get_OID();
    [CompilerGeneratedAttribute]
private void set_OID(UInt32 value);
    [CompilerGeneratedAttribute]
internal ulong get_Rows();
    [CompilerGeneratedAttribute]
private void set_Rows(ulong value);
    internal CommandCompleteMessage Load(NpgsqlReadBuffer buf, int len);
    private static bool AreEqual(Byte[] bytes, int pos, string s);
    private static ulong ParseNumber(Byte[] bytes, Int32& pos);
    public sealed virtual BackendMessageCode get_Code();
}
internal class Npgsql.BackendMessages.CopyBothResponseMessage : CopyResponseMessageBase {
    public BackendMessageCode Code { get; }
    public virtual BackendMessageCode get_Code();
    [NullableContextAttribute("1")]
internal CopyBothResponseMessage Load(NpgsqlReadBuffer buf);
}
internal class Npgsql.BackendMessages.CopyDataMessage : object {
    [CompilerGeneratedAttribute]
private int <Length>k__BackingField;
    public BackendMessageCode Code { get; }
    public int Length { get; private set; }
    public sealed virtual BackendMessageCode get_Code();
    [CompilerGeneratedAttribute]
public int get_Length();
    [CompilerGeneratedAttribute]
private void set_Length(int value);
    [NullableContextAttribute("1")]
internal CopyDataMessage Load(int len);
}
internal class Npgsql.BackendMessages.CopyDoneMessage : object {
    [NullableAttribute("1")]
internal static CopyDoneMessage Instance;
    public BackendMessageCode Code { get; }
    private static CopyDoneMessage();
    public sealed virtual BackendMessageCode get_Code();
}
internal class Npgsql.BackendMessages.CopyInResponseMessage : CopyResponseMessageBase {
    public BackendMessageCode Code { get; }
    public virtual BackendMessageCode get_Code();
    [NullableContextAttribute("1")]
internal CopyInResponseMessage Load(NpgsqlReadBuffer buf);
}
internal class Npgsql.BackendMessages.CopyOutResponseMessage : CopyResponseMessageBase {
    public BackendMessageCode Code { get; }
    public virtual BackendMessageCode get_Code();
    [NullableContextAttribute("1")]
internal CopyOutResponseMessage Load(NpgsqlReadBuffer buf);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal abstract class Npgsql.BackendMessages.CopyResponseMessageBase : object {
    [CompilerGeneratedAttribute]
private bool <IsBinary>k__BackingField;
    [CompilerGeneratedAttribute]
private short <NumColumns>k__BackingField;
    [CompilerGeneratedAttribute]
private List`1<FormatCode> <ColumnFormatCodes>k__BackingField;
    public BackendMessageCode Code { get; }
    internal bool IsBinary { get; private set; }
    internal short NumColumns { get; private set; }
    internal List`1<FormatCode> ColumnFormatCodes { get; }
    public abstract virtual BackendMessageCode get_Code();
    [CompilerGeneratedAttribute]
internal bool get_IsBinary();
    [CompilerGeneratedAttribute]
private void set_IsBinary(bool value);
    [CompilerGeneratedAttribute]
internal short get_NumColumns();
    [CompilerGeneratedAttribute]
private void set_NumColumns(short value);
    [CompilerGeneratedAttribute]
internal List`1<FormatCode> get_ColumnFormatCodes();
    internal void Load(NpgsqlReadBuffer buf);
}
internal class Npgsql.BackendMessages.DataRowMessage : object {
    [CompilerGeneratedAttribute]
private int <Length>k__BackingField;
    public BackendMessageCode Code { get; }
    internal int Length { get; private set; }
    public sealed virtual BackendMessageCode get_Code();
    [CompilerGeneratedAttribute]
internal int get_Length();
    [CompilerGeneratedAttribute]
private void set_Length(int value);
    [NullableContextAttribute("1")]
internal DataRowMessage Load(int len);
}
internal class Npgsql.BackendMessages.EmptyQueryMessage : object {
    [NullableAttribute("1")]
internal static EmptyQueryMessage Instance;
    public BackendMessageCode Code { get; }
    private static EmptyQueryMessage();
    public sealed virtual BackendMessageCode get_Code();
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
internal class Npgsql.BackendMessages.ErrorOrNoticeMessage : object {
    [NullableAttribute("1")]
[CompilerGeneratedAttribute]
private string <Severity>k__BackingField;
    [NullableAttribute("1")]
[CompilerGeneratedAttribute]
private string <InvariantSeverity>k__BackingField;
    [NullableAttribute("1")]
[CompilerGeneratedAttribute]
private string <SqlState>k__BackingField;
    [NullableAttribute("1")]
[CompilerGeneratedAttribute]
private string <Message>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Detail>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Hint>k__BackingField;
    [CompilerGeneratedAttribute]
private int <Position>k__BackingField;
    [CompilerGeneratedAttribute]
private int <InternalPosition>k__BackingField;
    [CompilerGeneratedAttribute]
private string <InternalQuery>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Where>k__BackingField;
    [CompilerGeneratedAttribute]
private string <SchemaName>k__BackingField;
    [CompilerGeneratedAttribute]
private string <TableName>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ColumnName>k__BackingField;
    [CompilerGeneratedAttribute]
private string <DataTypeName>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ConstraintName>k__BackingField;
    [CompilerGeneratedAttribute]
private string <File>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Line>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Routine>k__BackingField;
    [NullableAttribute("1")]
internal string Severity { get; }
    [NullableAttribute("1")]
internal string InvariantSeverity { get; }
    [NullableAttribute("1")]
internal string SqlState { get; }
    [NullableAttribute("1")]
internal string Message { get; }
    internal string Detail { get; }
    internal string Hint { get; }
    internal int Position { get; }
    internal int InternalPosition { get; }
    internal string InternalQuery { get; }
    internal string Where { get; }
    internal string SchemaName { get; }
    internal string TableName { get; }
    internal string ColumnName { get; }
    internal string DataTypeName { get; }
    internal string ConstraintName { get; }
    internal string File { get; }
    internal string Line { get; }
    internal string Routine { get; }
    internal ErrorOrNoticeMessage(string severity, string invariantSeverity, string sqlState, string message, string detail, string hint, int position, int internalPosition, string internalQuery, string where, string schemaName, string tableName, string columnName, string dataTypeName, string constraintName, string file, string line, string routine);
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
internal string get_Severity();
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
internal string get_InvariantSeverity();
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
internal string get_SqlState();
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
internal string get_Message();
    [CompilerGeneratedAttribute]
internal string get_Detail();
    [CompilerGeneratedAttribute]
internal string get_Hint();
    [CompilerGeneratedAttribute]
internal int get_Position();
    [CompilerGeneratedAttribute]
internal int get_InternalPosition();
    [CompilerGeneratedAttribute]
internal string get_InternalQuery();
    [CompilerGeneratedAttribute]
internal string get_Where();
    [CompilerGeneratedAttribute]
internal string get_SchemaName();
    [CompilerGeneratedAttribute]
internal string get_TableName();
    [CompilerGeneratedAttribute]
internal string get_ColumnName();
    [CompilerGeneratedAttribute]
internal string get_DataTypeName();
    [CompilerGeneratedAttribute]
internal string get_ConstraintName();
    [CompilerGeneratedAttribute]
internal string get_File();
    [CompilerGeneratedAttribute]
internal string get_Line();
    [CompilerGeneratedAttribute]
internal string get_Routine();
    [NullableContextAttribute("1")]
internal static ErrorOrNoticeMessage Load(NpgsqlReadBuffer buf, bool includeDetail, ILogger exceptionLogger);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Npgsql.BackendMessages.FieldDescription : object {
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    [CompilerGeneratedAttribute]
private UInt32 <TypeOID>k__BackingField;
    [CompilerGeneratedAttribute]
private short <TypeSize>k__BackingField;
    [CompilerGeneratedAttribute]
private int <TypeModifier>k__BackingField;
    [CompilerGeneratedAttribute]
private UInt32 <TableOID>k__BackingField;
    [CompilerGeneratedAttribute]
private short <ColumnAttributeNumber>k__BackingField;
    [CompilerGeneratedAttribute]
private FormatCode <FormatCode>k__BackingField;
    [CompilerGeneratedAttribute]
private NpgsqlTypeHandler <Handler>k__BackingField;
    private TypeMapper _typeMapper;
    internal string Name { get; internal set; }
    internal UInt32 TypeOID { get; internal set; }
    public short TypeSize { get; public set; }
    public int TypeModifier { get; public set; }
    internal UInt32 TableOID { get; internal set; }
    internal short ColumnAttributeNumber { get; internal set; }
    internal FormatCode FormatCode { get; internal set; }
    internal string TypeDisplayName { get; }
    internal NpgsqlTypeHandler Handler { get; private set; }
    internal PostgresType PostgresType { get; }
    internal Type FieldType { get; }
    internal bool IsBinaryFormat { get; }
    internal bool IsTextFormat { get; }
    internal FieldDescription(UInt32 oid);
    internal FieldDescription(string name, UInt32 tableOID, short columnAttributeNumber, UInt32 oid, short typeSize, int typeModifier, FormatCode formatCode);
    internal FieldDescription(FieldDescription source);
    internal void Populate(TypeMapper typeMapper, string name, UInt32 tableOID, short columnAttributeNumber, UInt32 oid, short typeSize, int typeModifier, FormatCode formatCode);
    [CompilerGeneratedAttribute]
internal string get_Name();
    [CompilerGeneratedAttribute]
internal void set_Name(string value);
    [CompilerGeneratedAttribute]
internal UInt32 get_TypeOID();
    [CompilerGeneratedAttribute]
internal void set_TypeOID(UInt32 value);
    [CompilerGeneratedAttribute]
public short get_TypeSize();
    [CompilerGeneratedAttribute]
public void set_TypeSize(short value);
    [CompilerGeneratedAttribute]
public int get_TypeModifier();
    [CompilerGeneratedAttribute]
public void set_TypeModifier(int value);
    [CompilerGeneratedAttribute]
internal UInt32 get_TableOID();
    [CompilerGeneratedAttribute]
internal void set_TableOID(UInt32 value);
    [CompilerGeneratedAttribute]
internal short get_ColumnAttributeNumber();
    [CompilerGeneratedAttribute]
internal void set_ColumnAttributeNumber(short value);
    [CompilerGeneratedAttribute]
internal FormatCode get_FormatCode();
    [CompilerGeneratedAttribute]
internal void set_FormatCode(FormatCode value);
    internal string get_TypeDisplayName();
    [CompilerGeneratedAttribute]
internal NpgsqlTypeHandler get_Handler();
    [CompilerGeneratedAttribute]
private void set_Handler(NpgsqlTypeHandler value);
    internal PostgresType get_PostgresType();
    internal Type get_FieldType();
    internal void ResolveHandler();
    internal bool get_IsBinaryFormat();
    internal bool get_IsTextFormat();
    internal FieldDescription Clone();
    public virtual string ToString();
}
internal class Npgsql.BackendMessages.NoDataMessage : object {
    [NullableAttribute("1")]
internal static NoDataMessage Instance;
    public BackendMessageCode Code { get; }
    private static NoDataMessage();
    public sealed virtual BackendMessageCode get_Code();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Npgsql.BackendMessages.ParameterDescriptionMessage : object {
    [CompilerGeneratedAttribute]
private List`1<UInt32> <TypeOIDs>k__BackingField;
    internal List`1<UInt32> TypeOIDs { get; }
    public BackendMessageCode Code { get; }
    [CompilerGeneratedAttribute]
internal List`1<UInt32> get_TypeOIDs();
    internal ParameterDescriptionMessage Load(NpgsqlReadBuffer buf);
    public sealed virtual BackendMessageCode get_Code();
}
internal class Npgsql.BackendMessages.ParseCompleteMessage : object {
    [NullableAttribute("1")]
internal static ParseCompleteMessage Instance;
    public BackendMessageCode Code { get; }
    private static ParseCompleteMessage();
    public sealed virtual BackendMessageCode get_Code();
}
internal class Npgsql.BackendMessages.PortalSuspendedMessage : object {
    [NullableAttribute("1")]
internal static PortalSuspendedMessage Instance;
    public BackendMessageCode Code { get; }
    private static PortalSuspendedMessage();
    public sealed virtual BackendMessageCode get_Code();
}
internal class Npgsql.BackendMessages.ReadyForQueryMessage : object {
    [CompilerGeneratedAttribute]
private TransactionStatus <TransactionStatusIndicator>k__BackingField;
    public BackendMessageCode Code { get; }
    internal TransactionStatus TransactionStatusIndicator { get; private set; }
    public sealed virtual BackendMessageCode get_Code();
    [CompilerGeneratedAttribute]
internal TransactionStatus get_TransactionStatusIndicator();
    [CompilerGeneratedAttribute]
private void set_TransactionStatusIndicator(TransactionStatus value);
    [NullableContextAttribute("1")]
internal ReadyForQueryMessage Load(NpgsqlReadBuffer buf);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[DefaultMemberAttribute("Item")]
internal class Npgsql.BackendMessages.RowDescriptionMessage : object {
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private FieldDescription[] _fields;
    private Dictionary`2<string, int> _nameIndex;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private Dictionary`2<string, int> _insensitiveIndex;
    [CompilerGeneratedAttribute]
private int <Count>k__BackingField;
    public FieldDescription Item { get; }
    public int Count { get; private set; }
    public BackendMessageCode Code { get; }
    internal RowDescriptionMessage(int numFields);
    private RowDescriptionMessage(RowDescriptionMessage source);
    internal RowDescriptionMessage Load(NpgsqlReadBuffer buf, TypeMapper typeMapper);
    internal static RowDescriptionMessage CreateForReplication(TypeMapper typeMapper, UInt32 tableOID, FormatCode formatCode, IReadOnlyList`1<Column> columns);
    public sealed virtual FieldDescription get_Item(int index);
    [CompilerGeneratedAttribute]
public sealed virtual int get_Count();
    [CompilerGeneratedAttribute]
private void set_Count(int value);
    public sealed virtual IEnumerator`1<FieldDescription> GetEnumerator();
    private sealed virtual override IEnumerator System.Collections.IEnumerable.GetEnumerator();
    internal int GetFieldIndex(string name);
    internal bool TryGetFieldIndex(string name, Int32& fieldIndex);
    public sealed virtual BackendMessageCode get_Code();
    internal RowDescriptionMessage Clone();
}
internal enum Npgsql.CommandState : Enum {
    public int value__;
    public static CommandState Idle;
    public static CommandState InProgress;
    public static CommandState Disposed;
}
internal enum Npgsql.ConnectorBindingScope : Enum {
    public int value__;
    public static ConnectorBindingScope None;
    public static ConnectorBindingScope Connection;
    public static ConnectorBindingScope Transaction;
    public static ConnectorBindingScope Copy;
    public static ConnectorBindingScope Reader;
    public static ConnectorBindingScope Temporary;
}
internal enum Npgsql.DatabaseState : Enum {
    public byte value__;
    public static DatabaseState Unknown;
    public static DatabaseState Offline;
    public static DatabaseState PrimaryReadWrite;
    public static DatabaseState PrimaryReadOnly;
    public static DatabaseState Standby;
}
[IsReadOnlyAttribute]
internal class Npgsql.EndScopeDisposable : ValueType {
    [NullableAttribute("1")]
private NpgsqlConnection _connection;
    [NullableContextAttribute("1")]
public EndScopeDisposable(NpgsqlConnection connection);
    public sealed virtual void Dispose();
}
internal static class Npgsql.FrontendMessageCode : object {
    internal static byte Describe;
    internal static byte Sync;
    internal static byte Execute;
    internal static byte Parse;
    internal static byte Bind;
    internal static byte Close;
    internal static byte Query;
    internal static byte CopyData;
    internal static byte CopyDone;
    internal static byte CopyFail;
    internal static byte Terminate;
    internal static byte Password;
}
internal interface Npgsql.IBackendMessage {
    public BackendMessageCode Code { get; }
    public abstract virtual BackendMessageCode get_Code();
}
internal interface Npgsql.ICancelable {
    public abstract virtual void Cancel();
    [NullableContextAttribute("1")]
public abstract virtual Task CancelAsync();
}
[NullableContextAttribute("1")]
public interface Npgsql.INpgsqlNameTranslator {
    public abstract virtual string TranslateTypeName(string clrName);
    public abstract virtual string TranslateMemberName(string clrName);
}
internal enum Npgsql.Internal.ConnectorState : Enum {
    public int value__;
    public static ConnectorState Closed;
    public static ConnectorState Connecting;
    public static ConnectorState Ready;
    public static ConnectorState Executing;
    public static ConnectorState Fetching;
    public static ConnectorState Waiting;
    public static ConnectorState Broken;
    public static ConnectorState Copy;
    public static ConnectorState Replication;
}
internal enum Npgsql.Internal.DataRowLoadingMode : Enum {
    public int value__;
    public static DataRowLoadingMode NonSequential;
    public static DataRowLoadingMode Sequential;
    public static DataRowLoadingMode Skip;
}
[NullableContextAttribute("1")]
public interface Npgsql.Internal.INpgsqlDatabaseInfoFactory {
    public abstract virtual Task`1<NpgsqlDatabaseInfo> Load(NpgsqlConnector conn, NpgsqlTimeout timeout, bool async);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Npgsql.Internal.NpgsqlConnector : object {
    private Socket _socket;
    private NetworkStream _baseStream;
    private Stream _stream;
    [CompilerGeneratedAttribute]
private NpgsqlConnectionStringBuilder <Settings>k__BackingField;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[CompilerGeneratedAttribute]
private Action`1<X509CertificateCollection> <ClientCertificatesCallback>k__BackingField;
    [NullableAttribute("2")]
[CompilerGeneratedAttribute]
private RemoteCertificateValidationCallback <UserCertificateValidationCallback>k__BackingField;
    [NullableAttribute("2")]
[CompilerGeneratedAttribute]
private ProvidePasswordCallback <ProvidePasswordCallback>k__BackingField;
    [CompilerGeneratedAttribute]
private Encoding <TextEncoding>k__BackingField;
    [CompilerGeneratedAttribute]
private Encoding <RelaxedTextEncoding>k__BackingField;
    [CompilerGeneratedAttribute]
private NpgsqlReadBuffer <ReadBuffer>k__BackingField;
    [NullableAttribute("2")]
private NpgsqlReadBuffer _origReadBuffer;
    [CompilerGeneratedAttribute]
private NpgsqlWriteBuffer <WriteBuffer>k__BackingField;
    private int _backendSecretKey;
    [CompilerGeneratedAttribute]
private int <BackendProcessId>k__BackingField;
    [NullableAttribute("2")]
private string _inferredUserName;
    [CompilerGeneratedAttribute]
private NpgsqlDatabaseInfo <DatabaseInfo>k__BackingField;
    [CompilerGeneratedAttribute]
private TypeMapper <TypeMapper>k__BackingField;
    [CompilerGeneratedAttribute]
private TransactionStatus <TransactionStatus>k__BackingField;
    [NullableAttribute("2")]
[CompilerGeneratedAttribute]
private NpgsqlTransaction <Transaction>k__BackingField;
    [NullableAttribute("2")]
[CompilerGeneratedAttribute]
private NpgsqlTransaction <UnboundTransaction>k__BackingField;
    [NullableAttribute("2")]
[CompilerGeneratedAttribute]
private NpgsqlConnection <Connection>k__BackingField;
    [CompilerGeneratedAttribute]
private int <PendingPrependedResponses>k__BackingField;
    private ManualResetEventSlim ReadingPrependedMessagesMRE;
    [NullableAttribute("2")]
internal NpgsqlDataReader CurrentReader;
    [CompilerGeneratedAttribute]
private PreparedStatementManager <PreparedStatementManager>k__BackingField;
    [CompilerGeneratedAttribute]
private SqlQueryParser <SqlQueryParser>k__BackingField;
    [NullableAttribute("2")]
internal ICancelable CurrentCopyOperation;
    [CompilerGeneratedAttribute]
private Dictionary`2<string, string> <PostgresParameters>k__BackingField;
    [TupleElementNamesAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private List`1<ValueTuple`2<Byte[], Byte[]>> _rawParameters;
    [NullableAttribute("2")]
private Exception modreq(System.Runtime.CompilerServices.IsVolatile) _breakReason;
    internal Int32 modreq(System.Runtime.CompilerServices.IsVolatile) MultiplexAsyncWritingLock;
    [CompilerGeneratedAttribute]
private int <UserTimeout>k__BackingField;
    [CompilerGeneratedAttribute]
private object <CancelLock>k__BackingField;
    [CompilerGeneratedAttribute]
private object <SyncObj>k__BackingField;
    [CompilerGeneratedAttribute]
private object <CleanupLock>k__BackingField;
    private bool _isKeepAliveEnabled;
    [NullableAttribute("2")]
private Timer _keepAliveTimer;
    [NullableAttribute("2")]
private NpgsqlCommand _currentCommand;
    private bool _sendResetOnClose;
    [CompilerGeneratedAttribute]
private NpgsqlDataSource <DataSource>k__BackingField;
    [CompilerGeneratedAttribute]
private DateTime <OpenTimestamp>k__BackingField;
    [CompilerGeneratedAttribute]
private int <ClearCounter>k__BackingField;
    private Boolean modreq(System.Runtime.CompilerServices.IsVolatile) _postgresCancellationPerformed;
    private Boolean modreq(System.Runtime.CompilerServices.IsVolatile) _userCancellationRequested;
    private CancellationTokenRegistration _cancellationTokenRegistration;
    [CompilerGeneratedAttribute]
private CancellationToken <UserCancellationToken>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <AttemptPostgresCancellation>k__BackingField;
    private static TimeSpan _cancelImmediatelyTimeout;
    [NullableAttribute("2")]
private X509Certificate2 _certificate;
    [CompilerGeneratedAttribute]
private NpgsqlLoggingConfiguration <LoggingConfiguration>k__BackingField;
    [CompilerGeneratedAttribute]
private ILogger <ConnectionLogger>k__BackingField;
    [CompilerGeneratedAttribute]
private ILogger <CommandLogger>k__BackingField;
    [CompilerGeneratedAttribute]
private ILogger <TransactionLogger>k__BackingField;
    [CompilerGeneratedAttribute]
private ILogger <CopyLogger>k__BackingField;
    internal Stopwatch QueryLogStopWatch;
    [NullableAttribute("2")]
[CompilerGeneratedAttribute]
private EndPoint <ConnectedEndPoint>k__BackingField;
    internal static int MinimumInternalCommandTimeout;
    [NullableAttribute("2")]
private Byte[] _resetWithoutDeallocateMessage;
    private int _resetWithoutDeallocateResponseCount;
    private CommandCompleteMessage _commandCompleteMessage;
    private ReadyForQueryMessage _readyForQueryMessage;
    private ParameterDescriptionMessage _parameterDescriptionMessage;
    private DataRowMessage _dataRowMessage;
    private RowDescriptionMessage _rowDescriptionMessage;
    [NullableAttribute("2")]
private CopyInResponseMessage _copyInResponseMessage;
    [NullableAttribute("2")]
private CopyOutResponseMessage _copyOutResponseMessage;
    [NullableAttribute("2")]
private CopyDataMessage _copyDataMessage;
    [NullableAttribute("2")]
private CopyBothResponseMessage _copyBothResponseMessage;
    [CompilerGeneratedAttribute]
private NpgsqlDataReader <DataReader>k__BackingField;
    [NullableAttribute("2")]
[CompilerGeneratedAttribute]
private NpgsqlDataReader <UnboundDataReader>k__BackingField;
    private int _state;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private ChannelReader`1<NpgsqlCommand> CommandsInFlightReader;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
internal ChannelWriter`1<NpgsqlCommand> CommandsInFlightWriter;
    internal Int32 modreq(System.Runtime.CompilerServices.IsVolatile) CommandsInFlightCount;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[CompilerGeneratedAttribute]
private ManualResetValueTaskSource`1<object> <ReaderCompleted>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsSecure>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsScram>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsScramPlus>k__BackingField;
    private static RemoteCertificateValidationCallback SslVerifyFullValidation;
    private static RemoteCertificateValidationCallback SslVerifyCAValidation;
    private static RemoteCertificateValidationCallback SslTrustServerValidation;
    [CompilerGeneratedAttribute]
private bool <UseConformingStrings>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Timezone>k__BackingField;
    private Nullable`1<bool> _isTransactionReadOnly;
    private Nullable`1<bool> _isHotStandBy;
    public NpgsqlConnectionStringBuilder Settings { get; }
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private Action`1<X509CertificateCollection> ClientCertificatesCallback { get; }
    [NullableAttribute("2")]
private RemoteCertificateValidationCallback UserCertificateValidationCallback { get; }
    [NullableAttribute("2")]
private ProvidePasswordCallback ProvidePasswordCallback { get; }
    public Encoding TextEncoding { get; private set; }
    internal Encoding RelaxedTextEncoding { get; private set; }
    internal NpgsqlReadBuffer ReadBuffer { get; private set; }
    internal NpgsqlWriteBuffer WriteBuffer { get; private set; }
    internal int BackendProcessId { get; private set; }
    internal string InferredUserName { get; private set; }
    private bool SupportsPostgresCancellation { get; }
    internal int Id { get; }
    public NpgsqlDatabaseInfo DatabaseInfo { get; internal set; }
    internal TypeMapper TypeMapper { get; internal set; }
    internal TransactionStatus TransactionStatus { get; internal set; }
    [NullableAttribute("2")]
internal NpgsqlTransaction Transaction { get; internal set; }
    [NullableAttribute("2")]
internal NpgsqlTransaction UnboundTransaction { get; internal set; }
    [NullableAttribute("2")]
internal NpgsqlConnection Connection { get; internal set; }
    internal int PendingPrependedResponses { get; internal set; }
    internal PreparedStatementManager PreparedStatementManager { get; }
    internal SqlQueryParser SqlQueryParser { get; }
    internal Dictionary`2<string, string> PostgresParameters { get; }
    private int UserTimeout { get; internal set; }
    private object CancelLock { get; }
    private object SyncObj { get; }
    private object CleanupLock { get; }
    internal NpgsqlDataSource DataSource { get; }
    internal string UserFacingConnectionString { get; }
    internal DateTime OpenTimestamp { get; private set; }
    internal int ClearCounter { get; internal set; }
    internal bool PostgresCancellationPerformed { get; private set; }
    internal bool UserCancellationRequested { get; }
    internal CancellationToken UserCancellationToken { get; internal set; }
    internal bool AttemptPostgresCancellation { get; private set; }
    internal NpgsqlLoggingConfiguration LoggingConfiguration { get; }
    internal ILogger ConnectionLogger { get; }
    internal ILogger CommandLogger { get; }
    internal ILogger TransactionLogger { get; }
    internal ILogger CopyLogger { get; }
    [NullableAttribute("2")]
internal EndPoint ConnectedEndPoint { get; private set; }
    internal NpgsqlDataReader DataReader { get; internal set; }
    [NullableAttribute("2")]
internal NpgsqlDataReader UnboundDataReader { get; internal set; }
    internal string Host { get; }
    internal int Port { get; }
    internal string Database { get; }
    private string KerberosServiceName { get; }
    private int ConnectionTimeout { get; }
    private bool IntegratedSecurity { get; }
    private int InternalCommandTimeout { get; }
    internal ConnectorState State { get; internal set; }
    private bool IsConnected { get; }
    internal bool IsReady { get; }
    internal bool IsClosed { get; }
    internal bool IsBroken { get; }
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
internal ManualResetValueTaskSource`1<object> ReaderCompleted { get; }
    internal bool InTransaction { get; }
    internal bool IsSecure { get; private set; }
    internal bool IsScram { get; private set; }
    internal bool IsScramPlus { get; private set; }
    internal bool UseConformingStrings { get; private set; }
    internal string Timezone { get; private set; }
    internal NpgsqlConnector(NpgsqlDataSource dataSource, NpgsqlConnection conn);
    private NpgsqlConnector(NpgsqlConnector connector);
    private NpgsqlConnector(NpgsqlDataSource dataSource);
    private static NpgsqlConnector();
    [AsyncStateMachineAttribute("Npgsql.Internal.NpgsqlConnector/<Authenticate>d__0")]
private Task Authenticate(string username, NpgsqlTimeout timeout, bool async, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Npgsql.Internal.NpgsqlConnector/<AuthenticateCleartext>d__1")]
private Task AuthenticateCleartext(string username, bool async, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Npgsql.Internal.NpgsqlConnector/<AuthenticateSASL>d__2")]
private Task AuthenticateSASL(List`1<string> mechanisms, string username, bool async, CancellationToken cancellationToken);
    private static Byte[] Hi(string str, Byte[] salt, int count);
    private static Byte[] Xor(Byte[] buffer1, Byte[] buffer2);
    private static Byte[] HMAC(Byte[] data, string key);
    [AsyncStateMachineAttribute("Npgsql.Internal.NpgsqlConnector/<AuthenticateMD5>d__6")]
private Task AuthenticateMD5(string username, Byte[] salt, bool async, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Npgsql.Internal.NpgsqlConnector/<GetPassword>d__7")]
private ValueTask`1<string> GetPassword(string username, bool async, CancellationToken cancellationToken);
    [CompilerGeneratedAttribute]
public NpgsqlConnectionStringBuilder get_Settings();
    [CompilerGeneratedAttribute]
private Action`1<X509CertificateCollection> get_ClientCertificatesCallback();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
private RemoteCertificateValidationCallback get_UserCertificateValidationCallback();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
private ProvidePasswordCallback get_ProvidePasswordCallback();
    [CompilerGeneratedAttribute]
public Encoding get_TextEncoding();
    [CompilerGeneratedAttribute]
private void set_TextEncoding(Encoding value);
    [CompilerGeneratedAttribute]
internal Encoding get_RelaxedTextEncoding();
    [CompilerGeneratedAttribute]
private void set_RelaxedTextEncoding(Encoding value);
    [CompilerGeneratedAttribute]
internal NpgsqlReadBuffer get_ReadBuffer();
    [CompilerGeneratedAttribute]
private void set_ReadBuffer(NpgsqlReadBuffer value);
    [CompilerGeneratedAttribute]
internal NpgsqlWriteBuffer get_WriteBuffer();
    [CompilerGeneratedAttribute]
private void set_WriteBuffer(NpgsqlWriteBuffer value);
    [CompilerGeneratedAttribute]
internal int get_BackendProcessId();
    [CompilerGeneratedAttribute]
private void set_BackendProcessId(int value);
    internal string get_InferredUserName();
    private void set_InferredUserName(string value);
    private bool get_SupportsPostgresCancellation();
    internal int get_Id();
    [CompilerGeneratedAttribute]
public NpgsqlDatabaseInfo get_DatabaseInfo();
    [CompilerGeneratedAttribute]
internal void set_DatabaseInfo(NpgsqlDatabaseInfo value);
    [CompilerGeneratedAttribute]
internal TypeMapper get_TypeMapper();
    [CompilerGeneratedAttribute]
internal void set_TypeMapper(TypeMapper value);
    [CompilerGeneratedAttribute]
internal TransactionStatus get_TransactionStatus();
    [CompilerGeneratedAttribute]
internal void set_TransactionStatus(TransactionStatus value);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
internal NpgsqlTransaction get_Transaction();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
internal void set_Transaction(NpgsqlTransaction value);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
internal NpgsqlTransaction get_UnboundTransaction();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
internal void set_UnboundTransaction(NpgsqlTransaction value);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
internal NpgsqlConnection get_Connection();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
internal void set_Connection(NpgsqlConnection value);
    [CompilerGeneratedAttribute]
internal int get_PendingPrependedResponses();
    [CompilerGeneratedAttribute]
internal void set_PendingPrependedResponses(int value);
    [CompilerGeneratedAttribute]
internal PreparedStatementManager get_PreparedStatementManager();
    [CompilerGeneratedAttribute]
internal SqlQueryParser get_SqlQueryParser();
    [CompilerGeneratedAttribute]
internal Dictionary`2<string, string> get_PostgresParameters();
    internal void FlagAsNotWritableForMultiplexing();
    internal void FlagAsWritableForMultiplexing();
    [CompilerGeneratedAttribute]
private int get_UserTimeout();
    [CompilerGeneratedAttribute]
internal void set_UserTimeout(int value);
    [CompilerGeneratedAttribute]
private object get_CancelLock();
    [CompilerGeneratedAttribute]
private object get_SyncObj();
    [CompilerGeneratedAttribute]
private object get_CleanupLock();
    [CompilerGeneratedAttribute]
internal NpgsqlDataSource get_DataSource();
    internal string get_UserFacingConnectionString();
    [CompilerGeneratedAttribute]
internal DateTime get_OpenTimestamp();
    [CompilerGeneratedAttribute]
private void set_OpenTimestamp(DateTime value);
    [CompilerGeneratedAttribute]
internal int get_ClearCounter();
    [CompilerGeneratedAttribute]
internal void set_ClearCounter(int value);
    internal bool get_PostgresCancellationPerformed();
    private void set_PostgresCancellationPerformed(bool value);
    internal bool get_UserCancellationRequested();
    [CompilerGeneratedAttribute]
internal CancellationToken get_UserCancellationToken();
    [CompilerGeneratedAttribute]
internal void set_UserCancellationToken(CancellationToken value);
    [CompilerGeneratedAttribute]
internal bool get_AttemptPostgresCancellation();
    [CompilerGeneratedAttribute]
private void set_AttemptPostgresCancellation(bool value);
    [CompilerGeneratedAttribute]
internal NpgsqlLoggingConfiguration get_LoggingConfiguration();
    [CompilerGeneratedAttribute]
internal ILogger get_ConnectionLogger();
    [CompilerGeneratedAttribute]
internal ILogger get_CommandLogger();
    [CompilerGeneratedAttribute]
internal ILogger get_TransactionLogger();
    [CompilerGeneratedAttribute]
internal ILogger get_CopyLogger();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
internal EndPoint get_ConnectedEndPoint();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
private void set_ConnectedEndPoint(EndPoint value);
    [CompilerGeneratedAttribute]
internal NpgsqlDataReader get_DataReader();
    [CompilerGeneratedAttribute]
internal void set_DataReader(NpgsqlDataReader value);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
internal NpgsqlDataReader get_UnboundDataReader();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
internal void set_UnboundDataReader(NpgsqlDataReader value);
    internal string get_Host();
    internal int get_Port();
    internal string get_Database();
    private string get_KerberosServiceName();
    private int get_ConnectionTimeout();
    private bool get_IntegratedSecurity();
    private int get_InternalCommandTimeout();
    internal ConnectorState get_State();
    internal void set_State(ConnectorState value);
    private bool get_IsConnected();
    internal bool get_IsReady();
    internal bool get_IsClosed();
    internal bool get_IsBroken();
    [AsyncStateMachineAttribute("Npgsql.Internal.NpgsqlConnector/<Open>d__215")]
internal Task Open(NpgsqlTimeout timeout, bool async, CancellationToken cancellationToken);
    [NullableContextAttribute("0")]
[AsyncStateMachineAttribute("Npgsql.Internal.NpgsqlConnector/<QueryDatabaseState>d__216")]
internal ValueTask`1<DatabaseState> QueryDatabaseState(NpgsqlTimeout timeout, bool async, CancellationToken cancellationToken);
    private void WriteStartupMessage(string username);
    private ValueTask`1<string> GetUsernameAsync(bool async, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Npgsql.Internal.NpgsqlConnector/<RawOpen>d__219")]
private Task RawOpen(SslMode sslMode, NpgsqlTimeout timeout, bool async, CancellationToken cancellationToken, bool isFirstAttempt);
    private void Connect(NpgsqlTimeout timeout);
    [AsyncStateMachineAttribute("Npgsql.Internal.NpgsqlConnector/<ConnectAsync>d__221")]
private Task ConnectAsync(NpgsqlTimeout timeout, CancellationToken cancellationToken);
    private void SetSocketOptions(Socket socket);
    [CompilerGeneratedAttribute]
internal ManualResetValueTaskSource`1<object> get_ReaderCompleted();
    [AsyncStateMachineAttribute("Npgsql.Internal.NpgsqlConnector/<MultiplexingReadLoop>d__229")]
private Task MultiplexingReadLoop();
    internal void PrependInternalMessage(Byte[] rawMessage, int responseMessageCount);
    internal ValueTask`1<IBackendMessage> ReadMessage(bool async, DataRowLoadingMode dataRowLoadingMode);
    internal ValueTask`1<IBackendMessage> ReadMessageWithNotifications(bool async);
    private ValueTask`1<IBackendMessage> ReadMessage(bool async, DataRowLoadingMode dataRowLoadingMode, bool readingNotifications);
    internal IBackendMessage ParseServerMessage(NpgsqlReadBuffer buf, BackendMessageCode code, int len, bool isPrependedMessage);
    internal IBackendMessage SkipUntil(BackendMessageCode stopAt);
    internal Task Rollback(bool async, CancellationToken cancellationToken);
    internal bool get_InTransaction();
    private void ProcessNewTransactionStatus(TransactionStatus newStatus);
    [NullableContextAttribute("2")]
internal void ClearTransaction(Exception disposeReason);
    [CompilerGeneratedAttribute]
internal bool get_IsSecure();
    [CompilerGeneratedAttribute]
private void set_IsSecure(bool value);
    [CompilerGeneratedAttribute]
internal bool get_IsScram();
    [CompilerGeneratedAttribute]
private void set_IsScram(bool value);
    [CompilerGeneratedAttribute]
internal bool get_IsScramPlus();
    [CompilerGeneratedAttribute]
private void set_IsScramPlus(bool value);
    private static RemoteCertificateValidationCallback SslRootValidation(string certRootPath, bool verifyFull);
    internal void ResetCancellation();
    internal void PerformUserCancellation();
    internal bool PerformPostgresCancellation();
    private void DoCancelRequest(int backendProcessId, int backendSecretKey);
    internal CancellationTokenRegistration StartCancellableOperation(CancellationToken cancellationToken, bool attemptPgCancellation);
    internal CancellationTokenRegistration StartNestedCancellableOperation(CancellationToken cancellationToken, bool attemptPgCancellation);
    [AsyncStateMachineAttribute("Npgsql.Internal.NpgsqlConnector/<CloseOngoingOperations>d__263")]
internal Task CloseOngoingOperations(bool async);
    internal void Close();
    internal bool TryRemovePendingEnlistedConnector(Transaction transaction);
    internal void Return();
    public sealed virtual void Dispose();
    internal Exception UnexpectedMessageReceived(BackendMessageCode received);
    internal Exception Break(Exception reason);
    private void FullCleanup();
    private void Cleanup();
    private void GenerateResetMessage();
    [AsyncStateMachineAttribute("Npgsql.Internal.NpgsqlConnector/<Reset>d__273")]
internal Task Reset(bool async);
    private void ResetReadBuffer();
    internal void UnprepareAll();
    internal UserAction StartUserAction(CancellationToken cancellationToken, bool attemptPgCancellation);
    internal UserAction StartUserAction(ConnectorState newState, CancellationToken cancellationToken, bool attemptPgCancellation);
    [NullableContextAttribute("2")]
internal UserAction StartUserAction(ConnectorState newState, NpgsqlCommand command, CancellationToken cancellationToken, bool attemptPgCancellation);
    internal void EndUserAction();
    [NullableContextAttribute("2")]
private void PerformKeepAlive(object state);
    [AsyncStateMachineAttribute("Npgsql.Internal.NpgsqlConnector/<Wait>d__282")]
internal Task`1<bool> Wait(bool async, int timeout, CancellationToken cancellationToken);
    [CompilerGeneratedAttribute]
internal bool get_UseConformingStrings();
    [CompilerGeneratedAttribute]
private void set_UseConformingStrings(bool value);
    [CompilerGeneratedAttribute]
internal string get_Timezone();
    [CompilerGeneratedAttribute]
private void set_Timezone(string value);
    internal void ExecuteInternalCommand(string query);
    [AsyncStateMachineAttribute("Npgsql.Internal.NpgsqlConnector/<ExecuteInternalCommand>d__294")]
internal Task ExecuteInternalCommand(string query, bool async, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Npgsql.Internal.NpgsqlConnector/<ExecuteInternalCommand>d__295")]
internal Task ExecuteInternalCommand(Byte[] data, bool async, CancellationToken cancellationToken);
    public NpgsqlCommand CreateCommand(string cmdText);
    public NpgsqlBatch CreateBatch();
    [NullableContextAttribute("0")]
private void ReadParameterStatus(ReadOnlySpan`1<byte> incomingName, ReadOnlySpan`1<byte> incomingValue);
    private Nullable`1<DatabaseState> UpdateDatabaseState();
    internal Task WriteDescribe(StatementOrPortal statementOrPortal, string name, bool async, CancellationToken cancellationToken);
    internal Task WriteSync(bool async, CancellationToken cancellationToken);
    internal Task WriteExecute(int maxRows, bool async, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Npgsql.Internal.NpgsqlConnector/<WriteParse>d__303")]
internal Task WriteParse(string sql, string statementName, List`1<NpgsqlParameter> inputParameters, bool async, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Npgsql.Internal.NpgsqlConnector/<WriteBind>d__304")]
internal Task WriteBind(List`1<NpgsqlParameter> parameters, string portal, string statement, bool allResultTypesAreUnknown, Boolean[] unknownResultTypeList, bool async, CancellationToken cancellationToken);
    internal Task WriteClose(StatementOrPortal type, string name, bool async, CancellationToken cancellationToken);
    internal void WriteQuery(string sql);
    [AsyncStateMachineAttribute("Npgsql.Internal.NpgsqlConnector/<WriteQuery>d__307")]
internal Task WriteQuery(string sql, bool async, CancellationToken cancellationToken);
    internal void WriteCopyDone();
    [AsyncStateMachineAttribute("Npgsql.Internal.NpgsqlConnector/<WriteCopyDone>d__309")]
internal Task WriteCopyDone(bool async, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Npgsql.Internal.NpgsqlConnector/<WriteCopyFail>d__310")]
internal Task WriteCopyFail(bool async, CancellationToken cancellationToken);
    internal void WriteCancelRequest(int backendProcessId, int backendSecretKey);
    internal void WriteTerminate();
    internal void WriteSslRequest();
    internal void WriteStartup(Dictionary`2<string, string> parameters);
    internal Task WritePassword(Byte[] payload, bool async, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Npgsql.Internal.NpgsqlConnector/<WritePassword>d__316")]
internal Task WritePassword(Byte[] payload, int offset, int count, bool async, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Npgsql.Internal.NpgsqlConnector/<WriteSASLInitialResponse>d__317")]
internal Task WriteSASLInitialResponse(string mechanism, Byte[] initialResponse, bool async, CancellationToken cancellationToken);
    internal Task WriteSASLResponse(Byte[] payload, bool async, CancellationToken cancellationToken);
    internal Task WritePregenerated(Byte[] data, bool async, CancellationToken cancellationToken);
    internal void Flush();
    internal Task Flush(bool async, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Npgsql.Internal.NpgsqlConnector/<AuthenticateGSS>d__322")]
private Task AuthenticateGSS(bool async);
    [CompilerGeneratedAttribute]
internal static string <AuthenticateSASL>g__GetNonce|2_0();
    [CompilerGeneratedAttribute]
private void <Open>b__215_0(Task t);
    [AsyncStateMachineAttribute("Npgsql.Internal.NpgsqlConnector/<<Open>g__OpenCore|215_1>d")]
[CompilerGeneratedAttribute]
internal static Task <Open>g__OpenCore|215_1(NpgsqlConnector conn, SslMode sslMode, NpgsqlTimeout timeout, bool async, CancellationToken cancellationToken, bool isFirstAttempt);
    [NullableContextAttribute("0")]
[CompilerGeneratedAttribute]
private IPEndPoint <Connect>b__220_0(IPAddress a);
    [CompilerGeneratedAttribute]
private Task`1<IPAddress[]> <ConnectAsync>g__GetHostAddressesAsync|221_0(CancellationToken ct);
    [NullableContextAttribute("0")]
[CompilerGeneratedAttribute]
private IPEndPoint <ConnectAsync>b__221_2(IPAddress a);
    [CompilerGeneratedAttribute]
internal static Task <ConnectAsync>g__OpenSocketConnectionAsync|221_1(Socket socket, EndPoint endpoint, NpgsqlTimeout perIpTimeout, CancellationToken cancellationToken);
    [CompilerGeneratedAttribute]
private bool <MultiplexingReadLoop>b__229_0();
    [AsyncStateMachineAttribute("Npgsql.Internal.NpgsqlConnector/<<ReadMessage>g__ReadMessageLong|233_0>d")]
[CompilerGeneratedAttribute]
internal static ValueTask`1<IBackendMessage> <ReadMessage>g__ReadMessageLong|233_0(NpgsqlConnector connector, bool async, DataRowLoadingMode dataRowLoadingMode, bool readingNotifications, bool isReadingPrependedMessage);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
private UserAction <StartUserAction>g__DoStartUserAction|278_0(ConnectorState newState, NpgsqlCommand command, <>c__DisplayClass278_0& );
    [AsyncStateMachineAttribute("Npgsql.Internal.NpgsqlConnector/<<WriteDescribe>g__FlushAndWrite|300_0>d")]
[CompilerGeneratedAttribute]
private Task <WriteDescribe>g__FlushAndWrite|300_0(int len, StatementOrPortal statementOrPortal, string name, bool async, CancellationToken cancellationToken);
    [CompilerGeneratedAttribute]
private void <WriteDescribe>g__Write|300_1(int len, StatementOrPortal statementOrPortal, string name);
    [AsyncStateMachineAttribute("Npgsql.Internal.NpgsqlConnector/<<WriteSync>g__FlushAndWrite|301_0>d")]
[CompilerGeneratedAttribute]
private Task <WriteSync>g__FlushAndWrite|301_0(bool async, CancellationToken cancellationToken);
    [CompilerGeneratedAttribute]
private void <WriteSync>g__Write|301_1();
    [AsyncStateMachineAttribute("Npgsql.Internal.NpgsqlConnector/<<WriteExecute>g__FlushAndWrite|302_0>d")]
[CompilerGeneratedAttribute]
private Task <WriteExecute>g__FlushAndWrite|302_0(int maxRows, bool async, CancellationToken cancellationToken);
    [CompilerGeneratedAttribute]
private void <WriteExecute>g__Write|302_1(int maxRows);
    [AsyncStateMachineAttribute("Npgsql.Internal.NpgsqlConnector/<<WriteClose>g__FlushAndWrite|305_0>d")]
[CompilerGeneratedAttribute]
private Task <WriteClose>g__FlushAndWrite|305_0(int len, StatementOrPortal type, string name, bool async, CancellationToken cancellationToken);
    [CompilerGeneratedAttribute]
private void <WriteClose>g__Write|305_1(int len, StatementOrPortal type, string name);
    [AsyncStateMachineAttribute("Npgsql.Internal.NpgsqlConnector/<<WritePregenerated>g__FlushAndWrite|319_0>d")]
[CompilerGeneratedAttribute]
private Task <WritePregenerated>g__FlushAndWrite|319_0(Byte[] data, bool async, CancellationToken cancellationToken);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public abstract class Npgsql.Internal.NpgsqlDatabaseInfo : object {
    private static INpgsqlDatabaseInfoFactory[] modreq(System.Runtime.CompilerServices.IsVolatile) Factories;
    [CompilerGeneratedAttribute]
private string <Host>k__BackingField;
    [CompilerGeneratedAttribute]
private int <Port>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    [CompilerGeneratedAttribute]
private Version <Version>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ServerVersion>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <HasIntegerDateTimes>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <SupportsTransactions>k__BackingField;
    private List`1<PostgresBaseType> _baseTypesMutable;
    private List`1<PostgresArrayType> _arrayTypesMutable;
    private List`1<PostgresRangeType> _rangeTypesMutable;
    private List`1<PostgresMultirangeType> _multirangeTypesMutable;
    private List`1<PostgresEnumType> _enumTypesMutable;
    private List`1<PostgresCompositeType> _compositeTypesMutable;
    private List`1<PostgresDomainType> _domainTypesMutable;
    [CompilerGeneratedAttribute]
private Dictionary`2<UInt32, PostgresType> <ByOID>k__BackingField;
    [CompilerGeneratedAttribute]
private Dictionary`2<string, PostgresType> <ByFullName>k__BackingField;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[CompilerGeneratedAttribute]
private Dictionary`2<string, PostgresType> <ByName>k__BackingField;
    public string Host { get; }
    public int Port { get; }
    public string Name { get; }
    public Version Version { get; }
    public string ServerVersion { get; }
    public bool SupportsRangeTypes { get; }
    public bool SupportsMultirangeTypes { get; }
    public bool SupportsEnumTypes { get; }
    public bool SupportsCloseAll { get; }
    public bool SupportsAdvisoryLocks { get; }
    public bool SupportsDiscardSequences { get; }
    public bool SupportsUnlisten { get; }
    public bool SupportsDiscardTemp { get; }
    public bool SupportsDiscard { get; }
    public bool HasIntegerDateTimes { get; protected set; }
    public bool SupportsTransactions { get; protected set; }
    internal IReadOnlyList`1<PostgresBaseType> BaseTypes { get; }
    internal IReadOnlyList`1<PostgresArrayType> ArrayTypes { get; }
    internal IReadOnlyList`1<PostgresRangeType> RangeTypes { get; }
    internal IReadOnlyList`1<PostgresMultirangeType> MultirangeTypes { get; }
    internal IReadOnlyList`1<PostgresEnumType> EnumTypes { get; }
    internal IReadOnlyList`1<PostgresCompositeType> CompositeTypes { get; }
    internal IReadOnlyList`1<PostgresDomainType> DomainTypes { get; }
    internal Dictionary`2<UInt32, PostgresType> ByOID { get; }
    internal Dictionary`2<string, PostgresType> ByFullName { get; }
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
internal Dictionary`2<string, PostgresType> ByName { get; }
    protected NpgsqlDatabaseInfo(string host, int port, string databaseName, Version version);
    protected NpgsqlDatabaseInfo(string host, int port, string databaseName, Version version, string serverVersion);
    private protected NpgsqlDatabaseInfo(string host, int port, string databaseName, string serverVersion);
    private static NpgsqlDatabaseInfo();
    [CompilerGeneratedAttribute]
public string get_Host();
    [CompilerGeneratedAttribute]
public int get_Port();
    [CompilerGeneratedAttribute]
public string get_Name();
    [CompilerGeneratedAttribute]
public Version get_Version();
    [CompilerGeneratedAttribute]
public string get_ServerVersion();
    public virtual bool get_SupportsRangeTypes();
    public virtual bool get_SupportsMultirangeTypes();
    public virtual bool get_SupportsEnumTypes();
    public virtual bool get_SupportsCloseAll();
    public virtual bool get_SupportsAdvisoryLocks();
    public virtual bool get_SupportsDiscardSequences();
    public virtual bool get_SupportsUnlisten();
    public virtual bool get_SupportsDiscardTemp();
    public virtual bool get_SupportsDiscard();
    [CompilerGeneratedAttribute]
public virtual bool get_HasIntegerDateTimes();
    [CompilerGeneratedAttribute]
protected virtual void set_HasIntegerDateTimes(bool value);
    [CompilerGeneratedAttribute]
public virtual bool get_SupportsTransactions();
    [CompilerGeneratedAttribute]
protected virtual void set_SupportsTransactions(bool value);
    internal IReadOnlyList`1<PostgresBaseType> get_BaseTypes();
    internal IReadOnlyList`1<PostgresArrayType> get_ArrayTypes();
    internal IReadOnlyList`1<PostgresRangeType> get_RangeTypes();
    internal IReadOnlyList`1<PostgresMultirangeType> get_MultirangeTypes();
    internal IReadOnlyList`1<PostgresEnumType> get_EnumTypes();
    internal IReadOnlyList`1<PostgresCompositeType> get_CompositeTypes();
    internal IReadOnlyList`1<PostgresDomainType> get_DomainTypes();
    [CompilerGeneratedAttribute]
internal Dictionary`2<UInt32, PostgresType> get_ByOID();
    [CompilerGeneratedAttribute]
internal Dictionary`2<string, PostgresType> get_ByFullName();
    [CompilerGeneratedAttribute]
internal Dictionary`2<string, PostgresType> get_ByName();
    public PostgresType GetPostgresTypeByName(string pgName);
    public bool TryGetPostgresTypeByName(string pgName, PostgresType& pgType);
    internal void ProcessTypes();
    protected abstract virtual IEnumerable`1<PostgresType> GetTypes();
    protected static Version ParseServerVersion(string value);
    public static void RegisterFactory(INpgsqlDatabaseInfoFactory factory);
    [AsyncStateMachineAttribute("Npgsql.Internal.NpgsqlDatabaseInfo/<Load>d__81")]
internal static Task`1<NpgsqlDatabaseInfo> Load(NpgsqlConnector conn, NpgsqlTimeout timeout, bool async);
    internal static void ResetFactories();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Npgsql.Internal.NpgsqlReadBuffer : object {
    internal NpgsqlConnector Connector;
    [CompilerGeneratedAttribute]
private Stream <Underlying>k__BackingField;
    [NullableAttribute("2")]
private Socket _underlyingSocket;
    [CompilerGeneratedAttribute]
private ResettableCancellationTokenSource <Cts>k__BackingField;
    private TimeSpan _preTranslatedTimeout;
    [CompilerGeneratedAttribute]
private int <Size>k__BackingField;
    [CompilerGeneratedAttribute]
private Encoding <TextEncoding>k__BackingField;
    [CompilerGeneratedAttribute]
private Encoding <RelaxedTextEncoding>k__BackingField;
    [CompilerGeneratedAttribute]
private int <ReadPosition>k__BackingField;
    internal Byte[] Buffer;
    internal int FilledBytes;
    [NullableAttribute("2")]
private ColumnStream _columnStream;
    [NullableAttribute("2")]
private PreparedTextReader _preparedTextReader;
    private bool _usePool;
    private bool _disposed;
    internal static int MinimumSize;
    internal static int DefaultSize;
    public NpgsqlConnection Connection { get; }
    private Stream Underlying { get; internal set; }
    internal ResettableCancellationTokenSource Cts { get; }
    internal TimeSpan Timeout { get; internal set; }
    internal int Size { get; }
    internal Encoding TextEncoding { get; }
    internal Encoding RelaxedTextEncoding { get; }
    internal int ReadPosition { get; internal set; }
    internal int ReadBytesLeft { get; }
    internal NpgsqlReadBuffer(NpgsqlConnector connector, Stream stream, Socket socket, int size, Encoding textEncoding, Encoding relaxedTextEncoding, bool usePool);
    public NpgsqlConnection get_Connection();
    [CompilerGeneratedAttribute]
private Stream get_Underlying();
    [CompilerGeneratedAttribute]
internal void set_Underlying(Stream value);
    [CompilerGeneratedAttribute]
internal ResettableCancellationTokenSource get_Cts();
    internal TimeSpan get_Timeout();
    internal void set_Timeout(TimeSpan value);
    [CompilerGeneratedAttribute]
internal int get_Size();
    [CompilerGeneratedAttribute]
internal Encoding get_TextEncoding();
    [CompilerGeneratedAttribute]
internal Encoding get_RelaxedTextEncoding();
    [CompilerGeneratedAttribute]
internal int get_ReadPosition();
    [CompilerGeneratedAttribute]
internal void set_ReadPosition(int value);
    internal int get_ReadBytesLeft();
    internal void Ensure(int count);
    public Task Ensure(int count, bool async);
    public Task EnsureAsync(int count);
    internal Task Ensure(int count, bool async, bool readingNotifications);
    internal Task ReadMore(bool async);
    internal NpgsqlReadBuffer AllocateOversize(int count);
    internal void Skip(long len);
    [AsyncStateMachineAttribute("Npgsql.Internal.NpgsqlReadBuffer/<Skip>d__46")]
public Task Skip(long len, bool async);
    public sbyte ReadSByte();
    public byte ReadByte();
    public short ReadInt16();
    public short ReadInt16(bool littleEndian);
    public ushort ReadUInt16();
    public ushort ReadUInt16(bool littleEndian);
    public int ReadInt32();
    public int ReadInt32(bool littleEndian);
    public UInt32 ReadUInt32();
    public UInt32 ReadUInt32(bool littleEndian);
    public long ReadInt64();
    public long ReadInt64(bool littleEndian);
    public ulong ReadUInt64();
    public ulong ReadUInt64(bool littleEndian);
    public float ReadSingle();
    public float ReadSingle(bool littleEndian);
    public double ReadDouble();
    public double ReadDouble(bool littleEndian);
    private T Read();
    private static void ThrowNotSpaceLeft();
    public string ReadString(int byteLen);
    public Char[] ReadChars(int byteLen);
    [NullableContextAttribute("0")]
public void ReadBytes(Span`1<byte> output);
    public void ReadBytes(Byte[] output, int outputOffset, int len);
    [NullableContextAttribute("0")]
public ReadOnlySpan`1<byte> ReadSpan(int len);
    [NullableContextAttribute("0")]
public ReadOnlyMemory`1<byte> ReadMemory(int len);
    [NullableContextAttribute("0")]
public int Read(Span`1<byte> output);
    [NullableContextAttribute("0")]
public ValueTask`1<int> ReadAsync(Memory`1<byte> output, CancellationToken cancellationToken);
    public Stream GetStream(int len, bool canSeek);
    public TextReader GetPreparedTextReader(string str, Stream stream);
    public string ReadNullTerminatedString();
    public string ReadNullTerminatedStringRelaxed();
    public ValueTask`1<string> ReadNullTerminatedString(bool async, CancellationToken cancellationToken);
    private ValueTask`1<string> ReadNullTerminatedString(Encoding encoding, bool async, CancellationToken cancellationToken);
    [NullableContextAttribute("0")]
public ReadOnlySpan`1<byte> GetNullTerminatedBytes();
    public sealed virtual void Dispose();
    internal void Clear();
    internal void CopyTo(NpgsqlReadBuffer other);
    private static void ValidateArguments(Byte[] buffer, int offset, int count);
    [AsyncStateMachineAttribute("Npgsql.Internal.NpgsqlReadBuffer/<<Ensure>g__EnsureLong|42_0>d")]
[CompilerGeneratedAttribute]
internal static Task <Ensure>g__EnsureLong|42_0(NpgsqlReadBuffer buffer, int count, bool async, bool readingNotifications);
    [CompilerGeneratedAttribute]
internal static Exception <Ensure>g__CreateException|42_3(NpgsqlConnector connector);
    [CompilerGeneratedAttribute]
internal static Exception <Ensure>g__NpgsqlTimeoutException|42_1();
    [CompilerGeneratedAttribute]
internal static Exception <Ensure>g__TimeoutException|42_2();
    [NullableContextAttribute("0")]
[AsyncStateMachineAttribute("Npgsql.Internal.NpgsqlReadBuffer/<<ReadAsync>g__ReadAsyncLong|74_0>d")]
[CompilerGeneratedAttribute]
internal static ValueTask`1<int> <ReadAsync>g__ReadAsyncLong|74_0(NpgsqlReadBuffer buffer, Memory`1<byte> output, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Npgsql.Internal.NpgsqlReadBuffer/<<ReadNullTerminatedString>g__ReadLong|80_0>d")]
[CompilerGeneratedAttribute]
private ValueTask`1<string> <ReadNullTerminatedString>g__ReadLong|80_0(Encoding encoding, bool async);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Npgsql.Internal.NpgsqlWriteBuffer : object {
    internal NpgsqlConnector Connector;
    [CompilerGeneratedAttribute]
private Stream <Underlying>k__BackingField;
    [NullableAttribute("2")]
private Socket _underlyingSocket;
    private ResettableCancellationTokenSource _timeoutCts;
    [CompilerGeneratedAttribute]
private int <Size>k__BackingField;
    private bool _copyMode;
    [CompilerGeneratedAttribute]
private Encoding <TextEncoding>k__BackingField;
    internal Byte[] Buffer;
    private Encoder _textEncoder;
    internal int WritePosition;
    [NullableAttribute("2")]
private ParameterStream _parameterStream;
    private bool _disposed;
    internal static int MinimumSize;
    internal static int DefaultSize;
    private Stream Underlying { get; internal set; }
    internal TimeSpan Timeout { get; internal set; }
    internal int Size { get; private set; }
    internal Encoding TextEncoding { get; }
    public int WriteSpaceLeft { get; }
    internal NpgsqlWriteBuffer(NpgsqlConnector connector, Stream stream, Socket socket, int size, Encoding textEncoding);
    [CompilerGeneratedAttribute]
private Stream get_Underlying();
    [CompilerGeneratedAttribute]
internal void set_Underlying(Stream value);
    internal TimeSpan get_Timeout();
    internal void set_Timeout(TimeSpan value);
    [CompilerGeneratedAttribute]
internal int get_Size();
    [CompilerGeneratedAttribute]
private void set_Size(int value);
    [CompilerGeneratedAttribute]
internal Encoding get_TextEncoding();
    public int get_WriteSpaceLeft();
    [AsyncStateMachineAttribute("Npgsql.Internal.NpgsqlWriteBuffer/<Flush>d__28")]
public Task Flush(bool async, CancellationToken cancellationToken);
    internal void Flush();
    [NullableContextAttribute("0")]
internal void DirectWrite(ReadOnlySpan`1<byte> buffer);
    [NullableContextAttribute("0")]
[AsyncStateMachineAttribute("Npgsql.Internal.NpgsqlWriteBuffer/<DirectWrite>d__31")]
internal Task DirectWrite(ReadOnlyMemory`1<byte> memory, bool async, CancellationToken cancellationToken);
    public void WriteSByte(sbyte value);
    public void WriteByte(byte value);
    internal void WriteInt16(int value);
    public void WriteInt16(short value);
    public void WriteInt16(short value, bool littleEndian);
    public void WriteUInt16(ushort value);
    public void WriteUInt16(ushort value, bool littleEndian);
    public void WriteInt32(int value);
    public void WriteInt32(int value, bool littleEndian);
    public void WriteUInt32(UInt32 value);
    public void WriteUInt32(UInt32 value, bool littleEndian);
    public void WriteInt64(long value);
    public void WriteInt64(long value, bool littleEndian);
    public void WriteUInt64(ulong value);
    public void WriteUInt64(ulong value, bool littleEndian);
    public void WriteSingle(float value);
    public void WriteSingle(float value, bool littleEndian);
    public void WriteDouble(double value);
    public void WriteDouble(double value, bool littleEndian);
    private void Write(T value);
    private static void ThrowNotSpaceLeft();
    public Task WriteString(string s, int byteLen, bool async, CancellationToken cancellationToken);
    public Task WriteString(string s, int charLen, int byteLen, bool async, CancellationToken cancellationToken);
    internal Task WriteChars(Char[] chars, int offset, int charLen, int byteLen, bool async, CancellationToken cancellationToken);
    public void WriteString(string s, int len);
    internal void WriteChars(Char[] chars, int offset, int len);
    [NullableContextAttribute("0")]
internal void WriteChars(ReadOnlySpan`1<char> chars);
    [NullableContextAttribute("0")]
public void WriteBytes(ReadOnlySpan`1<byte> buf);
    public void WriteBytes(Byte[] buf, int offset, int count);
    public Task WriteBytesRaw(Byte[] bytes, bool async, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Npgsql.Internal.NpgsqlWriteBuffer/<WriteStreamRaw>d__62")]
public Task WriteStreamRaw(Stream stream, int count, bool async, CancellationToken cancellationToken);
    public void WriteNullTerminatedString(string s);
    public Stream GetStream();
    internal void WriteStringChunked(Char[] chars, int charIndex, int charCount, bool flush, Int32& charsUsed, Boolean& completed);
    internal void WriteStringChunked(string s, int charIndex, int charCount, bool flush, Int32& charsUsed, Boolean& completed);
    internal void StartCopyMode();
    internal void EndCopyMode();
    private void WriteCopyDataHeader();
    public sealed virtual void Dispose();
    internal void Clear();
    internal Byte[] GetContents();
    [AsyncStateMachineAttribute("Npgsql.Internal.NpgsqlWriteBuffer/<<WriteString>g__WriteStringLong|54_0>d")]
[CompilerGeneratedAttribute]
internal static Task <WriteString>g__WriteStringLong|54_0(NpgsqlWriteBuffer buffer, bool async, string s, int charLen, int byteLen, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Npgsql.Internal.NpgsqlWriteBuffer/<<WriteChars>g__WriteCharsLong|55_0>d")]
[CompilerGeneratedAttribute]
internal static Task <WriteChars>g__WriteCharsLong|55_0(NpgsqlWriteBuffer buffer, bool async, Char[] chars, int offset, int charLen, int byteLen, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Npgsql.Internal.NpgsqlWriteBuffer/<<WriteBytesRaw>g__WriteBytesLong|61_0>d")]
[CompilerGeneratedAttribute]
internal static Task <WriteBytesRaw>g__WriteBytesLong|61_0(NpgsqlWriteBuffer buffer, bool async, Byte[] bytes, CancellationToken cancellationToken);
}
internal enum Npgsql.Internal.TransactionStatus : Enum {
    public byte value__;
    public static TransactionStatus Idle;
    public static TransactionStatus InTransactionBlock;
    public static TransactionStatus InFailedTransactionBlock;
    public static TransactionStatus Pending;
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public abstract class Npgsql.Internal.TypeHandlers.ArrayHandler : NpgsqlTypeHandler {
    [CompilerGeneratedAttribute]
private int <LowerBound>k__BackingField;
    [CompilerGeneratedAttribute]
private NpgsqlTypeHandler <ElementHandler>k__BackingField;
    [CompilerGeneratedAttribute]
private ArrayNullabilityMode <ArrayNullabilityMode>k__BackingField;
    private static MethodInfo ReadArrayMethod;
    private static MethodInfo ReadListMethod;
    internal static string ReadNonNullableCollectionWithNullsExceptionMessage;
    private protected int LowerBound { get; }
    private protected NpgsqlTypeHandler ElementHandler { get; }
    private protected ArrayNullabilityMode ArrayNullabilityMode { get; }
    protected ArrayHandler(PostgresType arrayPostgresType, NpgsqlTypeHandler elementHandler, ArrayNullabilityMode arrayNullabilityMode, int lowerBound);
    private static ArrayHandler();
    [CompilerGeneratedAttribute]
private protected int get_LowerBound();
    [CompilerGeneratedAttribute]
private protected NpgsqlTypeHandler get_ElementHandler();
    [CompilerGeneratedAttribute]
private protected ArrayNullabilityMode get_ArrayNullabilityMode();
    public virtual Type GetFieldType(FieldDescription fieldDescription);
    public virtual Type GetProviderSpecificFieldType(FieldDescription fieldDescription);
    public virtual NpgsqlTypeHandler CreateArrayHandler(PostgresArrayType pgArrayType, ArrayNullabilityMode arrayNullabilityMode);
    public virtual NpgsqlTypeHandler CreateRangeHandler(PostgresType pgRangeType);
    public virtual NpgsqlTypeHandler CreateMultirangeHandler(PostgresMultirangeType pgMultirangeType);
    [NullableContextAttribute("2")]
[AsyncStateMachineAttribute("Npgsql.Internal.TypeHandlers.ArrayHandler/<ReadCustom>d__17`1")]
protected internal virtual ValueTask`1<TRequestedArray> ReadCustom(NpgsqlReadBuffer buf, int len, bool async, FieldDescription fieldDescription);
    [AsyncStateMachineAttribute("Npgsql.Internal.TypeHandlers.ArrayHandler/<ReadArray>d__18`1")]
protected ValueTask`1<Array> ReadArray(NpgsqlReadBuffer buf, bool async, int expectedDimensions, bool readAsObject);
    [AsyncStateMachineAttribute("Npgsql.Internal.TypeHandlers.ArrayHandler/<ReadList>d__19`1")]
protected ValueTask`1<List`1<TRequestedElement>> ReadList(NpgsqlReadBuffer buf, bool async);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Npgsql.Internal.TypeHandlers.ArrayHandler`1 : ArrayHandler {
    public ArrayHandler`1(PostgresType arrayPostgresType, NpgsqlTypeHandler elementHandler, ArrayNullabilityMode arrayNullabilityMode, int lowerBound);
    [AsyncStateMachineAttribute("Npgsql.Internal.TypeHandlers.ArrayHandler`1/<ReadAsObject>d__1")]
public virtual ValueTask`1<object> ReadAsObject(NpgsqlReadBuffer buf, int len, bool async, FieldDescription fieldDescription);
    private static Exception MixedTypesOrJaggedArrayException(Exception innerException);
    private static Exception CantWriteTypeException(Type type);
    [NullableContextAttribute("2")]
protected internal virtual int ValidateAndGetLengthCustom(TAny value, NpgsqlLengthCache& lengthCache, NpgsqlParameter parameter);
    [NullableContextAttribute("2")]
public virtual int ValidateObjectAndGetLength(object value, NpgsqlLengthCache& lengthCache, NpgsqlParameter parameter);
    private int ValidateAndGetLength(object value, NpgsqlLengthCache& lengthCache);
    private int ValidateAndGetLengthGeneric(ICollection`1<TElement> value, NpgsqlLengthCache& lengthCache);
    private int ValidateAndGetLengthNonGeneric(ICollection value, NpgsqlLengthCache& lengthCache);
    protected virtual Task WriteWithLengthCustom(TAny value, NpgsqlWriteBuffer buf, NpgsqlLengthCache lengthCache, NpgsqlParameter parameter, bool async, CancellationToken cancellationToken);
    [NullableContextAttribute("2")]
public virtual Task WriteObjectWithLength(object value, NpgsqlWriteBuffer buf, NpgsqlLengthCache lengthCache, NpgsqlParameter parameter, bool async, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Npgsql.Internal.TypeHandlers.ArrayHandler`1/<WriteGeneric>d__11")]
private Task WriteGeneric(ICollection`1<TElement> value, NpgsqlWriteBuffer buf, NpgsqlLengthCache lengthCache, bool async, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Npgsql.Internal.TypeHandlers.ArrayHandler`1/<WriteNonGeneric>d__12")]
private Task WriteNonGeneric(ICollection value, NpgsqlWriteBuffer buf, NpgsqlLengthCache lengthCache, bool async, CancellationToken cancellationToken);
}
[NullableContextAttribute("1")]
[NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
internal class Npgsql.Internal.TypeHandlers.ArrayHandlerWithPsv`2 : ArrayHandler`1<TElement> {
    public ArrayHandlerWithPsv`2(PostgresType arrayPostgresType, NpgsqlTypeHandler elementHandler, ArrayNullabilityMode arrayNullabilityMode);
    [NullableContextAttribute("2")]
[AsyncStateMachineAttribute("Npgsql.Internal.TypeHandlers.ArrayHandlerWithPsv`2/<ReadCustom>d__1`1")]
protected internal virtual ValueTask`1<TRequestedArray> ReadCustom(NpgsqlReadBuffer buf, int len, bool async, FieldDescription fieldDescription);
    internal virtual object ReadPsvAsObject(NpgsqlReadBuffer buf, int len, FieldDescription fieldDescription);
    [AsyncStateMachineAttribute("Npgsql.Internal.TypeHandlers.ArrayHandlerWithPsv`2/<ReadPsvAsObject>d__3")]
internal virtual ValueTask`1<object> ReadPsvAsObject(NpgsqlReadBuffer buf, int len, bool async, FieldDescription fieldDescription);
    [NullableContextAttribute("0")]
[CompilerGeneratedAttribute]
[DebuggerHiddenAttribute]
private ValueTask`1<TRequestedArray> <>n__0(NpgsqlReadBuffer buf, int len, bool async, FieldDescription fieldDescription);
}
[NullableContextAttribute("1")]
[NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public class Npgsql.Internal.TypeHandlers.BitStringArrayHandler : ArrayHandler`1<BitArray> {
    public BitStringArrayHandler(PostgresType postgresType, BitStringHandler elementHandler, ArrayNullabilityMode arrayNullabilityMode);
    [NullableContextAttribute("2")]
[AsyncStateMachineAttribute("Npgsql.Internal.TypeHandlers.BitStringArrayHandler/<ReadCustom>d__1`1")]
protected internal virtual ValueTask`1<TRequestedArray> ReadCustom(NpgsqlReadBuffer buf, int len, bool async, FieldDescription fieldDescription);
    [AsyncStateMachineAttribute("Npgsql.Internal.TypeHandlers.BitStringArrayHandler/<ReadAsObject>d__2")]
public virtual ValueTask`1<object> ReadAsObject(NpgsqlReadBuffer buf, int len, bool async, FieldDescription fieldDescription);
    [NullableContextAttribute("0")]
[CompilerGeneratedAttribute]
[DebuggerHiddenAttribute]
private ValueTask`1<TRequestedArray> <>n__0(NpgsqlReadBuffer buf, int len, bool async, FieldDescription fieldDescription);
}
[NullableContextAttribute("1")]
[NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public class Npgsql.Internal.TypeHandlers.BitStringHandler : NpgsqlTypeHandler`1<BitArray> {
    public BitStringHandler(PostgresType pgType);
    public virtual Type GetFieldType(FieldDescription fieldDescription);
    public virtual Type GetProviderSpecificFieldType(FieldDescription fieldDescription);
    public virtual NpgsqlTypeHandler CreateArrayHandler(PostgresArrayType pgArrayType, ArrayNullabilityMode arrayNullabilityMode);
    [AsyncStateMachineAttribute("Npgsql.Internal.TypeHandlers.BitStringHandler/<Read>d__4")]
public virtual ValueTask`1<BitArray> Read(NpgsqlReadBuffer buf, int len, bool async, FieldDescription fieldDescription);
    [NullableContextAttribute("0")]
[AsyncStateMachineAttribute("Npgsql.Internal.TypeHandlers.BitStringHandler/<Npgsql-Internal-TypeHandling-INpgsqlTypeHandler<System-Collections-Specialized-BitVector32>-Read>d__5")]
private sealed virtual override ValueTask`1<BitVector32> Npgsql.Internal.TypeHandling.INpgsqlTypeHandler<System.Collections.Specialized.BitVector32>.Read(NpgsqlReadBuffer buf, int len, bool async, FieldDescription fieldDescription);
    [NullableContextAttribute("0")]
[AsyncStateMachineAttribute("Npgsql.Internal.TypeHandlers.BitStringHandler/<Npgsql-Internal-TypeHandling-INpgsqlTypeHandler<System-Boolean>-Read>d__6")]
private sealed virtual override ValueTask`1<bool> Npgsql.Internal.TypeHandling.INpgsqlTypeHandler<System.Boolean>.Read(NpgsqlReadBuffer buf, int len, bool async, FieldDescription fieldDescription);
    private sealed virtual override ValueTask`1<string> Npgsql.Internal.TypeHandling.INpgsqlTypeHandler<System.String>.Read(NpgsqlReadBuffer buf, int len, bool async, FieldDescription fieldDescription);
    [AsyncStateMachineAttribute("Npgsql.Internal.TypeHandlers.BitStringHandler/<ReadAsObject>d__8")]
public virtual ValueTask`1<object> ReadAsObject(NpgsqlReadBuffer buf, int len, bool async, FieldDescription fieldDescription);
    [NullableContextAttribute("2")]
public virtual int ValidateAndGetLength(BitArray value, NpgsqlLengthCache& lengthCache, NpgsqlParameter parameter);
    [NullableContextAttribute("2")]
public sealed virtual int ValidateAndGetLength(BitVector32 value, NpgsqlLengthCache& lengthCache, NpgsqlParameter parameter);
    [NullableContextAttribute("2")]
public sealed virtual int ValidateAndGetLength(bool value, NpgsqlLengthCache& lengthCache, NpgsqlParameter parameter);
    [NullableContextAttribute("2")]
public sealed virtual int ValidateAndGetLength(string value, NpgsqlLengthCache& lengthCache, NpgsqlParameter parameter);
    [AsyncStateMachineAttribute("Npgsql.Internal.TypeHandlers.BitStringHandler/<Write>d__13")]
public virtual Task Write(BitArray value, NpgsqlWriteBuffer buf, NpgsqlLengthCache lengthCache, NpgsqlParameter parameter, bool async, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Npgsql.Internal.TypeHandlers.BitStringHandler/<Write>d__14")]
public sealed virtual Task Write(BitVector32 value, NpgsqlWriteBuffer buf, NpgsqlLengthCache lengthCache, NpgsqlParameter parameter, bool async, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Npgsql.Internal.TypeHandlers.BitStringHandler/<Write>d__15")]
public sealed virtual Task Write(bool value, NpgsqlWriteBuffer buf, NpgsqlLengthCache lengthCache, NpgsqlParameter parameter, bool async, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Npgsql.Internal.TypeHandlers.BitStringHandler/<Write>d__16")]
public sealed virtual Task Write(string value, NpgsqlWriteBuffer buf, NpgsqlLengthCache lengthCache, NpgsqlParameter parameter, bool async, CancellationToken cancellationToken);
    [NullableContextAttribute("2")]
public virtual int ValidateObjectAndGetLength(object value, NpgsqlLengthCache& lengthCache, NpgsqlParameter parameter);
    [NullableContextAttribute("2")]
public virtual Task WriteObjectWithLength(object value, NpgsqlWriteBuffer buf, NpgsqlLengthCache lengthCache, NpgsqlParameter parameter, bool async, CancellationToken cancellationToken);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Npgsql.Internal.TypeHandlers.BoolHandler : NpgsqlSimpleTypeHandler`1<bool> {
    public BoolHandler(PostgresType pgType);
    public virtual bool Read(NpgsqlReadBuffer buf, int len, FieldDescription fieldDescription);
    [NullableContextAttribute("2")]
public virtual int ValidateAndGetLength(bool value, NpgsqlParameter parameter);
    public virtual void Write(bool value, NpgsqlWriteBuffer buf, NpgsqlParameter parameter);
    [NullableContextAttribute("2")]
public virtual int ValidateObjectAndGetLength(object value, NpgsqlLengthCache& lengthCache, NpgsqlParameter parameter);
    [NullableContextAttribute("2")]
public virtual Task WriteObjectWithLength(object value, NpgsqlWriteBuffer buf, NpgsqlLengthCache lengthCache, NpgsqlParameter parameter, bool async, CancellationToken cancellationToken);
}
[NullableContextAttribute("1")]
[NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public class Npgsql.Internal.TypeHandlers.ByteaHandler : NpgsqlTypeHandler`1<Byte[]> {
    public ByteaHandler(PostgresType pgType);
    [AsyncStateMachineAttribute("Npgsql.Internal.TypeHandlers.ByteaHandler/<Read>d__1")]
public virtual ValueTask`1<Byte[]> Read(NpgsqlReadBuffer buf, int len, bool async, FieldDescription fieldDescription);
    [NullableContextAttribute("0")]
private sealed virtual override ValueTask`1<ArraySegment`1<byte>> Npgsql.Internal.TypeHandling.INpgsqlTypeHandler<System.ArraySegment<System.Byte>>.Read(NpgsqlReadBuffer buf, int len, bool async, FieldDescription fieldDescription);
    private sealed virtual override ValueTask`1<Stream> Npgsql.Internal.TypeHandling.INpgsqlTypeHandler<System.IO.Stream>.Read(NpgsqlReadBuffer buf, int len, bool async, FieldDescription fieldDescription);
    [NullableContextAttribute("2")]
private int ValidateAndGetLength(int bufferLen, NpgsqlParameter parameter);
    private int ValidateAndGetLength(Stream stream, NpgsqlParameter parameter);
    [NullableContextAttribute("2")]
public virtual int ValidateAndGetLength(Byte[] value, NpgsqlLengthCache& lengthCache, NpgsqlParameter parameter);
    [NullableContextAttribute("2")]
public sealed virtual int ValidateAndGetLength(ArraySegment`1<byte> value, NpgsqlLengthCache& lengthCache, NpgsqlParameter parameter);
    [NullableContextAttribute("2")]
public sealed virtual int ValidateAndGetLength(Stream value, NpgsqlLengthCache& lengthCache, NpgsqlParameter parameter);
    public virtual Task Write(Byte[] value, NpgsqlWriteBuffer buf, NpgsqlLengthCache lengthCache, NpgsqlParameter parameter, bool async, CancellationToken cancellationToken);
    public sealed virtual Task Write(ArraySegment`1<byte> value, NpgsqlWriteBuffer buf, NpgsqlLengthCache lengthCache, NpgsqlParameter parameter, bool async, CancellationToken cancellationToken);
    public sealed virtual Task Write(Stream value, NpgsqlWriteBuffer buf, NpgsqlLengthCache lengthCache, NpgsqlParameter parameter, bool async, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Npgsql.Internal.TypeHandlers.ByteaHandler/<Write>d__12")]
private Task Write(Byte[] value, NpgsqlWriteBuffer buf, int offset, int count, bool async, CancellationToken cancellationToken);
    private Task Write(Stream value, NpgsqlWriteBuffer buf, int count, bool async, CancellationToken cancellationToken);
    [NullableContextAttribute("2")]
public sealed virtual int ValidateAndGetLength(Memory`1<byte> value, NpgsqlLengthCache& lengthCache, NpgsqlParameter parameter);
    [NullableContextAttribute("2")]
public sealed virtual int ValidateAndGetLength(ReadOnlyMemory`1<byte> value, NpgsqlLengthCache& lengthCache, NpgsqlParameter parameter);
    [AsyncStateMachineAttribute("Npgsql.Internal.TypeHandlers.ByteaHandler/<Write>d__16")]
public sealed virtual Task Write(ReadOnlyMemory`1<byte> value, NpgsqlWriteBuffer buf, NpgsqlLengthCache lengthCache, NpgsqlParameter parameter, bool async, CancellationToken cancellationToken);
    public sealed virtual Task Write(Memory`1<byte> value, NpgsqlWriteBuffer buf, NpgsqlLengthCache lengthCache, NpgsqlParameter parameter, bool async, CancellationToken cancellationToken);
    [NullableContextAttribute("0")]
private sealed virtual override ValueTask`1<ReadOnlyMemory`1<byte>> Npgsql.Internal.TypeHandling.INpgsqlTypeHandler<System.ReadOnlyMemory<System.Byte>>.Read(NpgsqlReadBuffer buf, int len, bool async, FieldDescription fieldDescriptioncancellationToken);
    [NullableContextAttribute("0")]
private sealed virtual override ValueTask`1<Memory`1<byte>> Npgsql.Internal.TypeHandling.INpgsqlTypeHandler<System.Memory<System.Byte>>.Read(NpgsqlReadBuffer buf, int len, bool async, FieldDescription fieldDescription);
    [NullableContextAttribute("2")]
public virtual int ValidateObjectAndGetLength(object value, NpgsqlLengthCache& lengthCache, NpgsqlParameter parameter);
    [NullableContextAttribute("2")]
public virtual Task WriteObjectWithLength(object value, NpgsqlWriteBuffer buf, NpgsqlLengthCache lengthCache, NpgsqlParameter parameter, bool async, CancellationToken cancellationToken);
}
internal class Npgsql.Internal.TypeHandlers.CompositeHandlers.ByReference`1 : object {
    public T Value;
}
[NullableContextAttribute("1")]
[NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
internal class Npgsql.Internal.TypeHandlers.CompositeHandlers.CompositeClassMemberHandler`2 : CompositeMemberHandler`1<TComposite> {
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private GetMember<TComposite, TMember> _get;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private SetMember<TComposite, TMember> _set;
    private NpgsqlTypeHandler _handler;
    public CompositeClassMemberHandler`2(FieldInfo fieldInfo, PostgresType postgresType, NpgsqlTypeHandler handler);
    public CompositeClassMemberHandler`2(PropertyInfo propertyInfo, PostgresType postgresType, NpgsqlTypeHandler handler);
    [AsyncStateMachineAttribute("Npgsql.Internal.TypeHandlers.CompositeHandlers.CompositeClassMemberHandler`2/<Read>d__7")]
public virtual ValueTask Read(TComposite composite, NpgsqlReadBuffer buffer, bool async);
    public virtual ValueTask Read(ByReference`1<TComposite> composite, NpgsqlReadBuffer buffer, bool async);
    [AsyncStateMachineAttribute("Npgsql.Internal.TypeHandlers.CompositeHandlers.CompositeClassMemberHandler`2/<Write>d__9")]
public virtual Task Write(TComposite composite, NpgsqlWriteBuffer buffer, NpgsqlLengthCache lengthCache, bool async, CancellationToken cancellationToken);
    public virtual int ValidateAndGetLength(TComposite composite, NpgsqlLengthCache& lengthCache);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Npgsql.Internal.TypeHandlers.CompositeHandlers.CompositeConstructorHandler`1 : object {
    [CompilerGeneratedAttribute]
private PostgresType <PostgresType>k__BackingField;
    [CompilerGeneratedAttribute]
private ConstructorInfo <ConstructorInfo>k__BackingField;
    [CompilerGeneratedAttribute]
private CompositeParameterHandler[] <Handlers>k__BackingField;
    public PostgresType PostgresType { get; }
    public ConstructorInfo ConstructorInfo { get; }
    public CompositeParameterHandler[] Handlers { get; }
    protected CompositeConstructorHandler`1(PostgresType postgresType, ConstructorInfo constructorInfo, CompositeParameterHandler[] handlers);
    [CompilerGeneratedAttribute]
public PostgresType get_PostgresType();
    [CompilerGeneratedAttribute]
public ConstructorInfo get_ConstructorInfo();
    [CompilerGeneratedAttribute]
public CompositeParameterHandler[] get_Handlers();
    [AsyncStateMachineAttribute("Npgsql.Internal.TypeHandlers.CompositeHandlers.CompositeConstructorHandler`1/<Read>d__10")]
public virtual ValueTask`1<TComposite> Read(NpgsqlReadBuffer buffer, bool async);
    public static CompositeConstructorHandler`1<TComposite> Create(PostgresType postgresType, ConstructorInfo constructorInfo, CompositeParameterHandler[] parameterHandlers);
}
[NullableContextAttribute("2")]
[NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
internal class Npgsql.Internal.TypeHandlers.CompositeHandlers.CompositeConstructorHandler`9 : CompositeConstructorHandler`1<TComposite> {
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private CompositeConstructor<TComposite, T1, T2, T3, T4, T5, T6, T7, T8> _constructor;
    [NullableContextAttribute("1")]
public CompositeConstructorHandler`9(PostgresType postgresType, ConstructorInfo constructorInfo, CompositeParameterHandler[] parameterHandlers);
    [NullableContextAttribute("1")]
[AsyncStateMachineAttribute("Npgsql.Internal.TypeHandlers.CompositeHandlers.CompositeConstructorHandler`9/<Read>d__3")]
public virtual ValueTask`1<TComposite> Read(NpgsqlReadBuffer buffer, bool async);
}
[NullableContextAttribute("1")]
[NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
internal class Npgsql.Internal.TypeHandlers.CompositeHandlers.CompositeHandler`1 : NpgsqlTypeHandler`1<T> {
    private TypeMapper _typeMapper;
    private INpgsqlNameTranslator _nameTranslator;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private Func`1<T> _constructor;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private CompositeConstructorHandler`1<T> _constructorHandler;
    private CompositeMemberHandler`1[] _memberHandlers;
    public Type CompositeType { get; }
    public CompositeHandler`1(PostgresCompositeType postgresType, TypeMapper typeMapper, INpgsqlNameTranslator nameTranslator);
    public sealed virtual Type get_CompositeType();
    public virtual ValueTask`1<T> Read(NpgsqlReadBuffer buffer, int length, bool async, FieldDescription fieldDescription);
    [AsyncStateMachineAttribute("Npgsql.Internal.TypeHandlers.CompositeHandlers.CompositeHandler`1/<Write>d__9")]
public virtual Task Write(T value, NpgsqlWriteBuffer buffer, NpgsqlLengthCache lengthCache, NpgsqlParameter parameter, bool async, CancellationToken cancellationToken);
    [NullableContextAttribute("2")]
public virtual int ValidateAndGetLength(T value, NpgsqlLengthCache& lengthCache, NpgsqlParameter parameter);
    private void Initialize();
    private static CompositeConstructorHandler`1<T> CreateConstructorHandler(PostgresCompositeType pgType, TypeMapper typeMapper, INpgsqlNameTranslator nameTranslator);
    private static CompositeMemberHandler`1[] CreateMemberHandlers(PostgresCompositeType pgType, TypeMapper typeMapper, INpgsqlNameTranslator nameTranslator);
    [NullableContextAttribute("2")]
public virtual int ValidateObjectAndGetLength(object value, NpgsqlLengthCache& lengthCache, NpgsqlParameter parameter);
    [NullableContextAttribute("2")]
public virtual Task WriteObjectWithLength(object value, NpgsqlWriteBuffer buf, NpgsqlLengthCache lengthCache, NpgsqlParameter parameter, bool async, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Npgsql.Internal.TypeHandlers.CompositeHandlers.CompositeHandler`1/<<Read>g__ReadUsingMemberHandlers|8_0>d")]
[CompilerGeneratedAttribute]
private ValueTask`1<T> <Read>g__ReadUsingMemberHandlers|8_0(NpgsqlReadBuffer buffer, bool async);
    [CompilerGeneratedAttribute]
private void <Initialize>g__InitializeCore|11_0();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal abstract class Npgsql.Internal.TypeHandlers.CompositeHandlers.CompositeMemberHandler`1 : object {
    [CompilerGeneratedAttribute]
private MemberInfo <MemberInfo>k__BackingField;
    [CompilerGeneratedAttribute]
private PostgresType <PostgresType>k__BackingField;
    public MemberInfo MemberInfo { get; }
    public PostgresType PostgresType { get; }
    protected CompositeMemberHandler`1(MemberInfo memberInfo, PostgresType postgresType);
    [CompilerGeneratedAttribute]
public MemberInfo get_MemberInfo();
    [CompilerGeneratedAttribute]
public PostgresType get_PostgresType();
    public abstract virtual ValueTask Read(TComposite composite, NpgsqlReadBuffer buffer, bool async);
    public abstract virtual ValueTask Read(ByReference`1<TComposite> composite, NpgsqlReadBuffer buffer, bool async);
    public abstract virtual Task Write(TComposite composite, NpgsqlWriteBuffer buffer, NpgsqlLengthCache lengthCache, bool async, CancellationToken cancellationToken);
    public abstract virtual int ValidateAndGetLength(TComposite composite, NpgsqlLengthCache& lengthCache);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal abstract class Npgsql.Internal.TypeHandlers.CompositeHandlers.CompositeParameterHandler : object {
    [CompilerGeneratedAttribute]
private NpgsqlTypeHandler <Handler>k__BackingField;
    [CompilerGeneratedAttribute]
private Type <ParameterType>k__BackingField;
    [CompilerGeneratedAttribute]
private int <ParameterPosition>k__BackingField;
    public NpgsqlTypeHandler Handler { get; }
    public Type ParameterType { get; }
    public int ParameterPosition { get; }
    public CompositeParameterHandler(NpgsqlTypeHandler handler, ParameterInfo parameterInfo);
    [CompilerGeneratedAttribute]
public NpgsqlTypeHandler get_Handler();
    [CompilerGeneratedAttribute]
public Type get_ParameterType();
    [CompilerGeneratedAttribute]
public int get_ParameterPosition();
    [AsyncStateMachineAttribute("Npgsql.Internal.TypeHandlers.CompositeHandlers.CompositeParameterHandler/<Read>d__10`1")]
public ValueTask`1<T> Read(NpgsqlReadBuffer buffer, bool async);
    public abstract virtual ValueTask`1<object> Read(NpgsqlReadBuffer buffer, bool async);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Npgsql.Internal.TypeHandlers.CompositeHandlers.CompositeParameterHandler`1 : CompositeParameterHandler {
    public CompositeParameterHandler`1(NpgsqlTypeHandler handler, ParameterInfo parameterInfo);
    public virtual ValueTask`1<object> Read(NpgsqlReadBuffer buffer, bool async);
    [AsyncStateMachineAttribute("Npgsql.Internal.TypeHandlers.CompositeHandlers.CompositeParameterHandler`1/<<Read>g__AwaitTask|1_0>d")]
[CompilerGeneratedAttribute]
internal static ValueTask`1<object> <Read>g__AwaitTask|1_0(ValueTask`1<T> task);
}
internal class Npgsql.Internal.TypeHandlers.CompositeHandlers.CompositeStructMemberHandler`2 : CompositeMemberHandler`1<TComposite> {
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private GetMember<TComposite, TMember> _get;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private SetMember<TComposite, TMember> _set;
    [NullableAttribute("1")]
private NpgsqlTypeHandler _handler;
    [NullableContextAttribute("1")]
public CompositeStructMemberHandler`2(FieldInfo fieldInfo, PostgresType postgresType, NpgsqlTypeHandler handler);
    [NullableContextAttribute("1")]
public CompositeStructMemberHandler`2(PropertyInfo propertyInfo, PostgresType postgresType, NpgsqlTypeHandler handler);
    public virtual ValueTask Read(TComposite composite, NpgsqlReadBuffer buffer, bool async);
    [NullableContextAttribute("1")]
[AsyncStateMachineAttribute("Npgsql.Internal.TypeHandlers.CompositeHandlers.CompositeStructMemberHandler`2/<Read>d__8")]
public virtual ValueTask Read(ByReference`1<TComposite> composite, NpgsqlReadBuffer buffer, bool async);
    [NullableContextAttribute("1")]
[AsyncStateMachineAttribute("Npgsql.Internal.TypeHandlers.CompositeHandlers.CompositeStructMemberHandler`2/<Write>d__9")]
public virtual Task Write(TComposite composite, NpgsqlWriteBuffer buffer, NpgsqlLengthCache lengthCache, bool async, CancellationToken cancellationToken);
    public virtual int ValidateAndGetLength(TComposite composite, NpgsqlLengthCache& lengthCache);
    [NullableContextAttribute("1")]
private void Set(ByReference`1<TComposite> composite, TMember value);
}
[NullableContextAttribute("1")]
internal interface Npgsql.Internal.TypeHandlers.CompositeHandlers.ICompositeHandler {
    public Type CompositeType { get; }
    public abstract virtual Type get_CompositeType();
}
internal static class Npgsql.Internal.TypeHandlers.CompositeHandlers.IsValueType`1 : object {
    public static bool Value;
    private static IsValueType`1();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Npgsql.Internal.TypeHandlers.DateTimeHandlers.DateHandler : NpgsqlSimpleTypeHandler`1<DateTime> {
    private static DateTime BaseValueDateTime;
    private static DateOnly BaseValueDateOnly;
    public DateHandler(PostgresType postgresType);
    private static DateHandler();
    public virtual DateTime Read(NpgsqlReadBuffer buf, int len, FieldDescription fieldDescription);
    private sealed virtual override int Npgsql.Internal.TypeHandling.INpgsqlSimpleTypeHandler<System.Int32>.Read(NpgsqlReadBuffer buf, int len, FieldDescription fieldDescription);
    [NullableContextAttribute("2")]
public virtual int ValidateAndGetLength(DateTime value, NpgsqlParameter parameter);
    [NullableContextAttribute("2")]
public sealed virtual int ValidateAndGetLength(int value, NpgsqlParameter parameter);
    public virtual void Write(DateTime value, NpgsqlWriteBuffer buf, NpgsqlParameter parameter);
    public sealed virtual void Write(int value, NpgsqlWriteBuffer buf, NpgsqlParameter parameter);
    private sealed virtual override DateOnly Npgsql.Internal.TypeHandling.INpgsqlSimpleTypeHandler<System.DateOnly>.Read(NpgsqlReadBuffer buf, int len, FieldDescription fieldDescription);
    [NullableContextAttribute("2")]
public sealed virtual int ValidateAndGetLength(DateOnly value, NpgsqlParameter parameter);
    public sealed virtual void Write(DateOnly value, NpgsqlWriteBuffer buf, NpgsqlParameter parameter);
    public virtual NpgsqlTypeHandler CreateRangeHandler(PostgresType pgRangeType);
    public virtual NpgsqlTypeHandler CreateMultirangeHandler(PostgresMultirangeType pgRangeType);
    [NullableContextAttribute("2")]
public virtual int ValidateObjectAndGetLength(object value, NpgsqlLengthCache& lengthCache, NpgsqlParameter parameter);
    [NullableContextAttribute("2")]
public virtual Task WriteObjectWithLength(object value, NpgsqlWriteBuffer buf, NpgsqlLengthCache lengthCache, NpgsqlParameter parameter, bool async, CancellationToken cancellationToken);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal static class Npgsql.Internal.TypeHandlers.DateTimeHandlers.DateTimeUtils : object {
    private static long PostgresTimestampOffsetTicks;
    internal static DateTime DecodeTimestamp(long value, DateTimeKind kind);
    internal static long EncodeTimestamp(DateTime value);
    internal static DateTime ReadDateTime(NpgsqlReadBuffer buf, DateTimeKind kind);
    internal static void WriteTimestamp(DateTime value, NpgsqlWriteBuffer buf);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Npgsql.Internal.TypeHandlers.DateTimeHandlers.IntervalHandler : NpgsqlSimpleTypeHandler`1<TimeSpan> {
    public IntervalHandler(PostgresType postgresType);
    public virtual TimeSpan Read(NpgsqlReadBuffer buf, int len, FieldDescription fieldDescription);
    private sealed virtual override NpgsqlInterval Npgsql.Internal.TypeHandling.INpgsqlSimpleTypeHandler<NpgsqlTypes.NpgsqlInterval>.Read(NpgsqlReadBuffer buf, int len, FieldDescription fieldDescription);
    [NullableContextAttribute("2")]
public virtual int ValidateAndGetLength(TimeSpan value, NpgsqlParameter parameter);
    [NullableContextAttribute("2")]
public sealed virtual int ValidateAndGetLength(NpgsqlInterval value, NpgsqlParameter parameter);
    public virtual void Write(TimeSpan value, NpgsqlWriteBuffer buf, NpgsqlParameter parameter);
    public sealed virtual void Write(NpgsqlInterval value, NpgsqlWriteBuffer buf, NpgsqlParameter parameter);
    [NullableContextAttribute("2")]
public virtual int ValidateObjectAndGetLength(object value, NpgsqlLengthCache& lengthCache, NpgsqlParameter parameter);
    [NullableContextAttribute("2")]
public virtual Task WriteObjectWithLength(object value, NpgsqlWriteBuffer buf, NpgsqlLengthCache lengthCache, NpgsqlParameter parameter, bool async, CancellationToken cancellationToken);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Npgsql.Internal.TypeHandlers.DateTimeHandlers.TimeHandler : NpgsqlSimpleTypeHandler`1<TimeSpan> {
    public TimeHandler(PostgresType postgresType);
    public virtual TimeSpan Read(NpgsqlReadBuffer buf, int len, FieldDescription fieldDescription);
    [NullableContextAttribute("2")]
public virtual int ValidateAndGetLength(TimeSpan value, NpgsqlParameter parameter);
    public virtual void Write(TimeSpan value, NpgsqlWriteBuffer buf, NpgsqlParameter parameter);
    private sealed virtual override TimeOnly Npgsql.Internal.TypeHandling.INpgsqlSimpleTypeHandler<System.TimeOnly>.Read(NpgsqlReadBuffer buf, int len, FieldDescription fieldDescription);
    [NullableContextAttribute("2")]
public sealed virtual int ValidateAndGetLength(TimeOnly value, NpgsqlParameter parameter);
    public sealed virtual void Write(TimeOnly value, NpgsqlWriteBuffer buf, NpgsqlParameter parameter);
    [NullableContextAttribute("2")]
public virtual int ValidateObjectAndGetLength(object value, NpgsqlLengthCache& lengthCache, NpgsqlParameter parameter);
    [NullableContextAttribute("2")]
public virtual Task WriteObjectWithLength(object value, NpgsqlWriteBuffer buf, NpgsqlLengthCache lengthCache, NpgsqlParameter parameter, bool async, CancellationToken cancellationToken);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Npgsql.Internal.TypeHandlers.DateTimeHandlers.TimestampHandler : NpgsqlSimpleTypeHandler`1<DateTime> {
    public TimestampHandler(PostgresType postgresType);
    public virtual DateTime Read(NpgsqlReadBuffer buf, int len, FieldDescription fieldDescription);
    private sealed virtual override long Npgsql.Internal.TypeHandling.INpgsqlSimpleTypeHandler<System.Int64>.Read(NpgsqlReadBuffer buf, int len, FieldDescription fieldDescription);
    [NullableContextAttribute("2")]
public virtual int ValidateAndGetLength(DateTime value, NpgsqlParameter parameter);
    [NullableContextAttribute("2")]
public sealed virtual int ValidateAndGetLength(long value, NpgsqlParameter parameter);
    public virtual void Write(DateTime value, NpgsqlWriteBuffer buf, NpgsqlParameter parameter);
    public sealed virtual void Write(long value, NpgsqlWriteBuffer buf, NpgsqlParameter parameter);
    [NullableContextAttribute("2")]
public virtual int ValidateObjectAndGetLength(object value, NpgsqlLengthCache& lengthCache, NpgsqlParameter parameter);
    [NullableContextAttribute("2")]
public virtual Task WriteObjectWithLength(object value, NpgsqlWriteBuffer buf, NpgsqlLengthCache lengthCache, NpgsqlParameter parameter, bool async, CancellationToken cancellationToken);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Npgsql.Internal.TypeHandlers.DateTimeHandlers.TimestampTzHandler : NpgsqlSimpleTypeHandler`1<DateTime> {
    public TimestampTzHandler(PostgresType postgresType);
    public virtual NpgsqlTypeHandler CreateRangeHandler(PostgresType pgRangeType);
    public virtual DateTime Read(NpgsqlReadBuffer buf, int len, FieldDescription fieldDescription);
    private sealed virtual override DateTimeOffset Npgsql.Internal.TypeHandling.INpgsqlSimpleTypeHandler<System.DateTimeOffset>.Read(NpgsqlReadBuffer buf, int len, FieldDescription fieldDescription);
    private sealed virtual override long Npgsql.Internal.TypeHandling.INpgsqlSimpleTypeHandler<System.Int64>.Read(NpgsqlReadBuffer buf, int len, FieldDescription fieldDescription);
    [NullableContextAttribute("2")]
public virtual int ValidateAndGetLength(DateTime value, NpgsqlParameter parameter);
    [NullableContextAttribute("2")]
public sealed virtual int ValidateAndGetLength(DateTimeOffset value, NpgsqlParameter parameter);
    [NullableContextAttribute("2")]
public sealed virtual int ValidateAndGetLength(long value, NpgsqlParameter parameter);
    public virtual void Write(DateTime value, NpgsqlWriteBuffer buf, NpgsqlParameter parameter);
    public sealed virtual void Write(DateTimeOffset value, NpgsqlWriteBuffer buf, NpgsqlParameter parameter);
    public sealed virtual void Write(long value, NpgsqlWriteBuffer buf, NpgsqlParameter parameter);
    [NullableContextAttribute("2")]
public virtual int ValidateObjectAndGetLength(object value, NpgsqlLengthCache& lengthCache, NpgsqlParameter parameter);
    [NullableContextAttribute("2")]
public virtual Task WriteObjectWithLength(object value, NpgsqlWriteBuffer buf, NpgsqlLengthCache lengthCache, NpgsqlParameter parameter, bool async, CancellationToken cancellationToken);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Npgsql.Internal.TypeHandlers.DateTimeHandlers.TimeTzHandler : NpgsqlSimpleTypeHandler`1<DateTimeOffset> {
    public TimeTzHandler(PostgresType postgresType);
    public virtual DateTimeOffset Read(NpgsqlReadBuffer buf, int len, FieldDescription fieldDescription);
    [NullableContextAttribute("2")]
public virtual int ValidateAndGetLength(DateTimeOffset value, NpgsqlParameter parameter);
    public virtual void Write(DateTimeOffset value, NpgsqlWriteBuffer buf, NpgsqlParameter parameter);
    [NullableContextAttribute("2")]
public virtual int ValidateObjectAndGetLength(object value, NpgsqlLengthCache& lengthCache, NpgsqlParameter parameter);
    [NullableContextAttribute("2")]
public virtual Task WriteObjectWithLength(object value, NpgsqlWriteBuffer buf, NpgsqlLengthCache lengthCache, NpgsqlParameter parameter, bool async, CancellationToken cancellationToken);
}
internal class Npgsql.Internal.TypeHandlers.EnumHandler`1 : NpgsqlSimpleTypeHandler`1<TEnum> {
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private Dictionary`2<TEnum, string> _enumToLabel;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private Dictionary`2<string, TEnum> _labelToEnum;
    [NullableAttribute("1")]
public Type EnumType { get; }
    [NullableContextAttribute("1")]
internal EnumHandler`1(PostgresEnumType postgresType, Dictionary`2<TEnum, string> enumToLabel, Dictionary`2<string, TEnum> labelToEnum);
    [NullableContextAttribute("1")]
public sealed virtual Type get_EnumType();
    public virtual TEnum Read(NpgsqlReadBuffer buf, int len, FieldDescription fieldDescription);
    public virtual int ValidateAndGetLength(TEnum value, NpgsqlParameter parameter);
    public virtual void Write(TEnum value, NpgsqlWriteBuffer buf, NpgsqlParameter parameter);
    [NullableContextAttribute("2")]
public virtual int ValidateObjectAndGetLength(object value, NpgsqlLengthCache& lengthCache, NpgsqlParameter parameter);
    [NullableContextAttribute("2")]
public virtual Task WriteObjectWithLength(object value, NpgsqlWriteBuffer buf, NpgsqlLengthCache lengthCache, NpgsqlParameter parameter, bool async, CancellationToken cancellationToken);
}
public class Npgsql.Internal.TypeHandlers.FullTextSearchHandlers.TsQueryHandler : NpgsqlTypeHandler`1<NpgsqlTsQuery> {
    private static int MaxSingleTokenBytes;
    public TsQueryHandler(PostgresType pgType);
    [AsyncStateMachineAttribute("Npgsql.Internal.TypeHandlers.FullTextSearchHandlers.TsQueryHandler/<Read>d__2")]
public virtual ValueTask`1<NpgsqlTsQuery> Read(NpgsqlReadBuffer buf, int len, bool async, FieldDescription fieldDescription);
    [AsyncStateMachineAttribute("Npgsql.Internal.TypeHandlers.FullTextSearchHandlers.TsQueryHandler/<Npgsql-Internal-TypeHandling-INpgsqlTypeHandler<NpgsqlTypes-NpgsqlTsQueryEmpty>-Read>d__3")]
private sealed virtual override ValueTask`1<NpgsqlTsQueryEmpty> Npgsql.Internal.TypeHandling.INpgsqlTypeHandler<NpgsqlTypes.NpgsqlTsQueryEmpty>.Read(NpgsqlReadBuffer buf, int len, bool async, FieldDescription fieldDescription);
    [AsyncStateMachineAttribute("Npgsql.Internal.TypeHandlers.FullTextSearchHandlers.TsQueryHandler/<Npgsql-Internal-TypeHandling-INpgsqlTypeHandler<NpgsqlTypes-NpgsqlTsQueryLexeme>-Read>d__4")]
private sealed virtual override ValueTask`1<NpgsqlTsQueryLexeme> Npgsql.Internal.TypeHandling.INpgsqlTypeHandler<NpgsqlTypes.NpgsqlTsQueryLexeme>.Read(NpgsqlReadBuffer buf, int len, bool async, FieldDescription fieldDescription);
    [AsyncStateMachineAttribute("Npgsql.Internal.TypeHandlers.FullTextSearchHandlers.TsQueryHandler/<Npgsql-Internal-TypeHandling-INpgsqlTypeHandler<NpgsqlTypes-NpgsqlTsQueryNot>-Read>d__5")]
private sealed virtual override ValueTask`1<NpgsqlTsQueryNot> Npgsql.Internal.TypeHandling.INpgsqlTypeHandler<NpgsqlTypes.NpgsqlTsQueryNot>.Read(NpgsqlReadBuffer buf, int len, bool async, FieldDescription fieldDescription);
    [AsyncStateMachineAttribute("Npgsql.Internal.TypeHandlers.FullTextSearchHandlers.TsQueryHandler/<Npgsql-Internal-TypeHandling-INpgsqlTypeHandler<NpgsqlTypes-NpgsqlTsQueryAnd>-Read>d__6")]
private sealed virtual override ValueTask`1<NpgsqlTsQueryAnd> Npgsql.Internal.TypeHandling.INpgsqlTypeHandler<NpgsqlTypes.NpgsqlTsQueryAnd>.Read(NpgsqlReadBuffer buf, int len, bool async, FieldDescription fieldDescription);
    [AsyncStateMachineAttribute("Npgsql.Internal.TypeHandlers.FullTextSearchHandlers.TsQueryHandler/<Npgsql-Internal-TypeHandling-INpgsqlTypeHandler<NpgsqlTypes-NpgsqlTsQueryOr>-Read>d__7")]
private sealed virtual override ValueTask`1<NpgsqlTsQueryOr> Npgsql.Internal.TypeHandling.INpgsqlTypeHandler<NpgsqlTypes.NpgsqlTsQueryOr>.Read(NpgsqlReadBuffer buf, int len, bool async, FieldDescription fieldDescription);
    [AsyncStateMachineAttribute("Npgsql.Internal.TypeHandlers.FullTextSearchHandlers.TsQueryHandler/<Npgsql-Internal-TypeHandling-INpgsqlTypeHandler<NpgsqlTypes-NpgsqlTsQueryFollowedBy>-Read>d__8")]
private sealed virtual override ValueTask`1<NpgsqlTsQueryFollowedBy> Npgsql.Internal.TypeHandling.INpgsqlTypeHandler<NpgsqlTypes.NpgsqlTsQueryFollowedBy>.Read(NpgsqlReadBuffer buf, int len, bool async, FieldDescription fieldDescription);
    [NullableContextAttribute("2")]
public virtual int ValidateAndGetLength(NpgsqlTsQuery value, NpgsqlLengthCache& lengthCache, NpgsqlParameter parameter);
    private int GetNodeLength(NpgsqlTsQuery node);
    [AsyncStateMachineAttribute("Npgsql.Internal.TypeHandlers.FullTextSearchHandlers.TsQueryHandler/<Write>d__11")]
public virtual Task Write(NpgsqlTsQuery query, NpgsqlWriteBuffer buf, NpgsqlLengthCache lengthCache, NpgsqlParameter parameter, bool async, CancellationToken cancellationToken);
    private int GetTokenCount(NpgsqlTsQuery node);
    [NullableContextAttribute("2")]
public sealed virtual int ValidateAndGetLength(NpgsqlTsQueryOr value, NpgsqlLengthCache& lengthCache, NpgsqlParameter parameter);
    [NullableContextAttribute("2")]
public sealed virtual int ValidateAndGetLength(NpgsqlTsQueryAnd value, NpgsqlLengthCache& lengthCache, NpgsqlParameter parameter);
    [NullableContextAttribute("2")]
public sealed virtual int ValidateAndGetLength(NpgsqlTsQueryNot value, NpgsqlLengthCache& lengthCache, NpgsqlParameter parameter);
    [NullableContextAttribute("2")]
public sealed virtual int ValidateAndGetLength(NpgsqlTsQueryLexeme value, NpgsqlLengthCache& lengthCache, NpgsqlParameter parameter);
    [NullableContextAttribute("2")]
public sealed virtual int ValidateAndGetLength(NpgsqlTsQueryEmpty value, NpgsqlLengthCache& lengthCache, NpgsqlParameter parameter);
    [NullableContextAttribute("2")]
public sealed virtual int ValidateAndGetLength(NpgsqlTsQueryFollowedBy value, NpgsqlLengthCache& lengthCache, NpgsqlParameter parameter);
    public sealed virtual Task Write(NpgsqlTsQueryOr value, NpgsqlWriteBuffer buf, NpgsqlLengthCache lengthCache, NpgsqlParameter parameter, bool async, CancellationToken cancellationToken);
    public sealed virtual Task Write(NpgsqlTsQueryAnd value, NpgsqlWriteBuffer buf, NpgsqlLengthCache lengthCache, NpgsqlParameter parameter, bool async, CancellationToken cancellationToken);
    public sealed virtual Task Write(NpgsqlTsQueryNot value, NpgsqlWriteBuffer buf, NpgsqlLengthCache lengthCache, NpgsqlParameter parameter, bool async, CancellationToken cancellationToken);
    public sealed virtual Task Write(NpgsqlTsQueryLexeme value, NpgsqlWriteBuffer buf, NpgsqlLengthCache lengthCache, NpgsqlParameter parameter, bool async, CancellationToken cancellationToken);
    public sealed virtual Task Write(NpgsqlTsQueryEmpty value, NpgsqlWriteBuffer buf, NpgsqlLengthCache lengthCache, NpgsqlParameter parameter, bool async, CancellationToken cancellationToken);
    public sealed virtual Task Write(NpgsqlTsQueryFollowedBy value, NpgsqlWriteBuffer buf, NpgsqlLengthCache lengthCache, NpgsqlParameter parameter, bool async, CancellationToken cancellationToken);
    [NullableContextAttribute("2")]
public virtual int ValidateObjectAndGetLength(object value, NpgsqlLengthCache& lengthCache, NpgsqlParameter parameter);
    [NullableContextAttribute("2")]
public virtual Task WriteObjectWithLength(object value, NpgsqlWriteBuffer buf, NpgsqlLengthCache lengthCache, NpgsqlParameter parameter, bool async, CancellationToken cancellationToken);
    [CompilerGeneratedAttribute]
internal static void <Read>g__InsertInTree|2_0(NpgsqlTsQuery node, Stack`1<Tuple`2<NpgsqlTsQuery, int>> nodes, NpgsqlTsQuery& value);
    [AsyncStateMachineAttribute("Npgsql.Internal.TypeHandlers.FullTextSearchHandlers.TsQueryHandler/<<Write>g__WriteCore|11_0>d")]
[CompilerGeneratedAttribute]
internal static Task <Write>g__WriteCore|11_0(NpgsqlTsQuery node, NpgsqlWriteBuffer buf, bool async, CancellationToken cancellationToken);
}
[NullableContextAttribute("1")]
[NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public class Npgsql.Internal.TypeHandlers.FullTextSearchHandlers.TsVectorHandler : NpgsqlTypeHandler`1<NpgsqlTsVector> {
    private static int MaxSingleLexemeBytes;
    public TsVectorHandler(PostgresType pgType);
    [AsyncStateMachineAttribute("Npgsql.Internal.TypeHandlers.FullTextSearchHandlers.TsVectorHandler/<Read>d__2")]
public virtual ValueTask`1<NpgsqlTsVector> Read(NpgsqlReadBuffer buf, int len, bool async, FieldDescription fieldDescription);
    [NullableContextAttribute("2")]
public virtual int ValidateAndGetLength(NpgsqlTsVector value, NpgsqlLengthCache& lengthCache, NpgsqlParameter parameter);
    [AsyncStateMachineAttribute("Npgsql.Internal.TypeHandlers.FullTextSearchHandlers.TsVectorHandler/<Write>d__4")]
public virtual Task Write(NpgsqlTsVector vector, NpgsqlWriteBuffer buf, NpgsqlLengthCache lengthCache, NpgsqlParameter parameter, bool async, CancellationToken cancellationToken);
    [NullableContextAttribute("2")]
public virtual int ValidateObjectAndGetLength(object value, NpgsqlLengthCache& lengthCache, NpgsqlParameter parameter);
    [NullableContextAttribute("2")]
public virtual Task WriteObjectWithLength(object value, NpgsqlWriteBuffer buf, NpgsqlLengthCache lengthCache, NpgsqlParameter parameter, bool async, CancellationToken cancellationToken);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Npgsql.Internal.TypeHandlers.GeometricHandlers.BoxHandler : NpgsqlSimpleTypeHandler`1<NpgsqlBox> {
    public BoxHandler(PostgresType pgType);
    public virtual NpgsqlBox Read(NpgsqlReadBuffer buf, int len, FieldDescription fieldDescription);
    [NullableContextAttribute("2")]
public virtual int ValidateAndGetLength(NpgsqlBox value, NpgsqlParameter parameter);
    public virtual void Write(NpgsqlBox value, NpgsqlWriteBuffer buf, NpgsqlParameter parameter);
    [NullableContextAttribute("2")]
public virtual int ValidateObjectAndGetLength(object value, NpgsqlLengthCache& lengthCache, NpgsqlParameter parameter);
    [NullableContextAttribute("2")]
public virtual Task WriteObjectWithLength(object value, NpgsqlWriteBuffer buf, NpgsqlLengthCache lengthCache, NpgsqlParameter parameter, bool async, CancellationToken cancellationToken);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Npgsql.Internal.TypeHandlers.GeometricHandlers.CircleHandler : NpgsqlSimpleTypeHandler`1<NpgsqlCircle> {
    public CircleHandler(PostgresType pgType);
    public virtual NpgsqlCircle Read(NpgsqlReadBuffer buf, int len, FieldDescription fieldDescription);
    [NullableContextAttribute("2")]
public virtual int ValidateAndGetLength(NpgsqlCircle value, NpgsqlParameter parameter);
    public virtual void Write(NpgsqlCircle value, NpgsqlWriteBuffer buf, NpgsqlParameter parameter);
    [NullableContextAttribute("2")]
public virtual int ValidateObjectAndGetLength(object value, NpgsqlLengthCache& lengthCache, NpgsqlParameter parameter);
    [NullableContextAttribute("2")]
public virtual Task WriteObjectWithLength(object value, NpgsqlWriteBuffer buf, NpgsqlLengthCache lengthCache, NpgsqlParameter parameter, bool async, CancellationToken cancellationToken);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Npgsql.Internal.TypeHandlers.GeometricHandlers.LineHandler : NpgsqlSimpleTypeHandler`1<NpgsqlLine> {
    public LineHandler(PostgresType pgType);
    public virtual NpgsqlLine Read(NpgsqlReadBuffer buf, int len, FieldDescription fieldDescription);
    [NullableContextAttribute("2")]
public virtual int ValidateAndGetLength(NpgsqlLine value, NpgsqlParameter parameter);
    public virtual void Write(NpgsqlLine value, NpgsqlWriteBuffer buf, NpgsqlParameter parameter);
    [NullableContextAttribute("2")]
public virtual int ValidateObjectAndGetLength(object value, NpgsqlLengthCache& lengthCache, NpgsqlParameter parameter);
    [NullableContextAttribute("2")]
public virtual Task WriteObjectWithLength(object value, NpgsqlWriteBuffer buf, NpgsqlLengthCache lengthCache, NpgsqlParameter parameter, bool async, CancellationToken cancellationToken);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Npgsql.Internal.TypeHandlers.GeometricHandlers.LineSegmentHandler : NpgsqlSimpleTypeHandler`1<NpgsqlLSeg> {
    public LineSegmentHandler(PostgresType pgType);
    public virtual NpgsqlLSeg Read(NpgsqlReadBuffer buf, int len, FieldDescription fieldDescription);
    [NullableContextAttribute("2")]
public virtual int ValidateAndGetLength(NpgsqlLSeg value, NpgsqlParameter parameter);
    public virtual void Write(NpgsqlLSeg value, NpgsqlWriteBuffer buf, NpgsqlParameter parameter);
    [NullableContextAttribute("2")]
public virtual int ValidateObjectAndGetLength(object value, NpgsqlLengthCache& lengthCache, NpgsqlParameter parameter);
    [NullableContextAttribute("2")]
public virtual Task WriteObjectWithLength(object value, NpgsqlWriteBuffer buf, NpgsqlLengthCache lengthCache, NpgsqlParameter parameter, bool async, CancellationToken cancellationToken);
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
public class Npgsql.Internal.TypeHandlers.GeometricHandlers.PathHandler : NpgsqlTypeHandler`1<NpgsqlPath> {
    [NullableContextAttribute("1")]
public PathHandler(PostgresType pgType);
    [NullableContextAttribute("0")]
[AsyncStateMachineAttribute("Npgsql.Internal.TypeHandlers.GeometricHandlers.PathHandler/<Read>d__1")]
public virtual ValueTask`1<NpgsqlPath> Read(NpgsqlReadBuffer buf, int len, bool async, FieldDescription fieldDescription);
    public virtual int ValidateAndGetLength(NpgsqlPath value, NpgsqlLengthCache& lengthCache, NpgsqlParameter parameter);
    [NullableContextAttribute("1")]
[AsyncStateMachineAttribute("Npgsql.Internal.TypeHandlers.GeometricHandlers.PathHandler/<Write>d__3")]
public virtual Task Write(NpgsqlPath value, NpgsqlWriteBuffer buf, NpgsqlLengthCache lengthCache, NpgsqlParameter parameter, bool async, CancellationToken cancellationToken);
    public virtual int ValidateObjectAndGetLength(object value, NpgsqlLengthCache& lengthCache, NpgsqlParameter parameter);
    public virtual Task WriteObjectWithLength(object value, NpgsqlWriteBuffer buf, NpgsqlLengthCache lengthCache, NpgsqlParameter parameter, bool async, CancellationToken cancellationToken);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Npgsql.Internal.TypeHandlers.GeometricHandlers.PointHandler : NpgsqlSimpleTypeHandler`1<NpgsqlPoint> {
    public PointHandler(PostgresType pgType);
    public virtual NpgsqlPoint Read(NpgsqlReadBuffer buf, int len, FieldDescription fieldDescription);
    [NullableContextAttribute("2")]
public virtual int ValidateAndGetLength(NpgsqlPoint value, NpgsqlParameter parameter);
    public virtual void Write(NpgsqlPoint value, NpgsqlWriteBuffer buf, NpgsqlParameter parameter);
    [NullableContextAttribute("2")]
public virtual int ValidateObjectAndGetLength(object value, NpgsqlLengthCache& lengthCache, NpgsqlParameter parameter);
    [NullableContextAttribute("2")]
public virtual Task WriteObjectWithLength(object value, NpgsqlWriteBuffer buf, NpgsqlLengthCache lengthCache, NpgsqlParameter parameter, bool async, CancellationToken cancellationToken);
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
public class Npgsql.Internal.TypeHandlers.GeometricHandlers.PolygonHandler : NpgsqlTypeHandler`1<NpgsqlPolygon> {
    [NullableContextAttribute("1")]
public PolygonHandler(PostgresType pgType);
    [NullableContextAttribute("0")]
[AsyncStateMachineAttribute("Npgsql.Internal.TypeHandlers.GeometricHandlers.PolygonHandler/<Read>d__1")]
public virtual ValueTask`1<NpgsqlPolygon> Read(NpgsqlReadBuffer buf, int len, bool async, FieldDescription fieldDescription);
    public virtual int ValidateAndGetLength(NpgsqlPolygon value, NpgsqlLengthCache& lengthCache, NpgsqlParameter parameter);
    [NullableContextAttribute("1")]
[AsyncStateMachineAttribute("Npgsql.Internal.TypeHandlers.GeometricHandlers.PolygonHandler/<Write>d__3")]
public virtual Task Write(NpgsqlPolygon value, NpgsqlWriteBuffer buf, NpgsqlLengthCache lengthCache, NpgsqlParameter parameter, bool async, CancellationToken cancellationToken);
    public virtual int ValidateObjectAndGetLength(object value, NpgsqlLengthCache& lengthCache, NpgsqlParameter parameter);
    public virtual Task WriteObjectWithLength(object value, NpgsqlWriteBuffer buf, NpgsqlLengthCache lengthCache, NpgsqlParameter parameter, bool async, CancellationToken cancellationToken);
}
[NullableContextAttribute("1")]
[NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public class Npgsql.Internal.TypeHandlers.HstoreHandler : NpgsqlTypeHandler`1<Dictionary`2<string, string>> {
    private TextHandler _textHandler;
    internal HstoreHandler(PostgresType postgresType, TextHandler textHandler);
    [NullableContextAttribute("2")]
public sealed virtual int ValidateAndGetLength(IDictionary`2<string, string> value, NpgsqlLengthCache& lengthCache, NpgsqlParameter parameter);
    [NullableContextAttribute("2")]
public virtual int ValidateAndGetLength(Dictionary`2<string, string> value, NpgsqlLengthCache& lengthCache, NpgsqlParameter parameter);
    [NullableContextAttribute("2")]
public virtual int ValidateObjectAndGetLength(object value, NpgsqlLengthCache& lengthCache, NpgsqlParameter parameter);
    [NullableContextAttribute("2")]
public virtual Task WriteObjectWithLength(object value, NpgsqlWriteBuffer buf, NpgsqlLengthCache lengthCache, NpgsqlParameter parameter, bool async, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Npgsql.Internal.TypeHandlers.HstoreHandler/<Write>d__6")]
public sealed virtual Task Write(IDictionary`2<string, string> value, NpgsqlWriteBuffer buf, NpgsqlLengthCache lengthCache, NpgsqlParameter parameter, bool async, CancellationToken cancellationToken);
    public virtual Task Write(Dictionary`2<string, string> value, NpgsqlWriteBuffer buf, NpgsqlLengthCache lengthCache, NpgsqlParameter parameter, bool async, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Npgsql.Internal.TypeHandlers.HstoreHandler/<ReadInto>d__8`1")]
private ValueTask`1<T> ReadInto(T dictionary, int numElements, NpgsqlReadBuffer buf, bool async);
    [AsyncStateMachineAttribute("Npgsql.Internal.TypeHandlers.HstoreHandler/<Read>d__9")]
public virtual ValueTask`1<Dictionary`2<string, string>> Read(NpgsqlReadBuffer buf, int len, bool async, FieldDescription fieldDescription);
    private sealed virtual override ValueTask`1<IDictionary`2<string, string>> Npgsql.Internal.TypeHandling.INpgsqlTypeHandler<System.Collections.Generic.IDictionary<System.String,System.String>>.Read(NpgsqlReadBuffer buf, int len, bool async, FieldDescription fieldDescription);
    [NullableContextAttribute("2")]
public sealed virtual int ValidateAndGetLength(ImmutableDictionary`2<string, string> value, NpgsqlLengthCache& lengthCache, NpgsqlParameter parameter);
    public sealed virtual Task Write(ImmutableDictionary`2<string, string> value, NpgsqlWriteBuffer buf, NpgsqlLengthCache lengthCache, NpgsqlParameter parameter, bool async, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Npgsql.Internal.TypeHandlers.HstoreHandler/<Npgsql-Internal-TypeHandling-INpgsqlTypeHandler<System-Collections-Immutable-ImmutableDictionary<System-String,System-String>>-Read>d__13")]
private sealed virtual override ValueTask`1<ImmutableDictionary`2<string, string>> Npgsql.Internal.TypeHandling.INpgsqlTypeHandler<System.Collections.Immutable.ImmutableDictionary<System.String,System.String>>.Read(NpgsqlReadBuffer buf, int len, bool async, FieldDescription fieldDescription);
}
[NullableContextAttribute("1")]
internal interface Npgsql.Internal.TypeHandlers.IEnumHandler {
    public Type EnumType { get; }
    public abstract virtual Type get_EnumType();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Npgsql.Internal.TypeHandlers.InternalTypeHandlers.Int2VectorHandler : ArrayHandler`1<short> {
    public Int2VectorHandler(PostgresType arrayPostgresType, PostgresType postgresShortType);
    public virtual NpgsqlTypeHandler CreateArrayHandler(PostgresArrayType pgArrayType, ArrayNullabilityMode arrayNullabilityMode);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Npgsql.Internal.TypeHandlers.InternalTypeHandlers.InternalCharHandler : NpgsqlSimpleTypeHandler`1<char> {
    public InternalCharHandler(PostgresType pgType);
    public virtual char Read(NpgsqlReadBuffer buf, int len, FieldDescription fieldDescription);
    private sealed virtual override byte Npgsql.Internal.TypeHandling.INpgsqlSimpleTypeHandler<System.Byte>.Read(NpgsqlReadBuffer buf, int len, FieldDescription fieldDescription);
    private sealed virtual override short Npgsql.Internal.TypeHandling.INpgsqlSimpleTypeHandler<System.Int16>.Read(NpgsqlReadBuffer buf, int len, FieldDescription fieldDescription);
    private sealed virtual override int Npgsql.Internal.TypeHandling.INpgsqlSimpleTypeHandler<System.Int32>.Read(NpgsqlReadBuffer buf, int len, FieldDescription fieldDescription);
    private sealed virtual override long Npgsql.Internal.TypeHandling.INpgsqlSimpleTypeHandler<System.Int64>.Read(NpgsqlReadBuffer buf, int len, FieldDescription fieldDescription);
    [NullableContextAttribute("2")]
public sealed virtual int ValidateAndGetLength(byte value, NpgsqlParameter parameter);
    [NullableContextAttribute("2")]
public virtual int ValidateAndGetLength(char value, NpgsqlParameter parameter);
    [NullableContextAttribute("2")]
public sealed virtual int ValidateAndGetLength(short value, NpgsqlParameter parameter);
    [NullableContextAttribute("2")]
public sealed virtual int ValidateAndGetLength(int value, NpgsqlParameter parameter);
    [NullableContextAttribute("2")]
public sealed virtual int ValidateAndGetLength(long value, NpgsqlParameter parameter);
    public virtual void Write(char value, NpgsqlWriteBuffer buf, NpgsqlParameter parameter);
    public sealed virtual void Write(byte value, NpgsqlWriteBuffer buf, NpgsqlParameter parameter);
    public sealed virtual void Write(short value, NpgsqlWriteBuffer buf, NpgsqlParameter parameter);
    public sealed virtual void Write(int value, NpgsqlWriteBuffer buf, NpgsqlParameter parameter);
    public sealed virtual void Write(long value, NpgsqlWriteBuffer buf, NpgsqlParameter parameter);
    [NullableContextAttribute("2")]
public virtual int ValidateObjectAndGetLength(object value, NpgsqlLengthCache& lengthCache, NpgsqlParameter parameter);
    [NullableContextAttribute("2")]
public virtual Task WriteObjectWithLength(object value, NpgsqlWriteBuffer buf, NpgsqlLengthCache lengthCache, NpgsqlParameter parameter, bool async, CancellationToken cancellationToken);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Npgsql.Internal.TypeHandlers.InternalTypeHandlers.OIDVectorHandler : ArrayHandler`1<UInt32> {
    public OIDVectorHandler(PostgresType oidvectorType, PostgresType oidType);
    public virtual NpgsqlTypeHandler CreateArrayHandler(PostgresArrayType pgArrayType, ArrayNullabilityMode arrayNullabilityMode);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Npgsql.Internal.TypeHandlers.InternalTypeHandlers.PgLsnHandler : NpgsqlSimpleTypeHandler`1<NpgsqlLogSequenceNumber> {
    public PgLsnHandler(PostgresType pgType);
    public virtual NpgsqlLogSequenceNumber Read(NpgsqlReadBuffer buf, int len, FieldDescription fieldDescription);
    [NullableContextAttribute("2")]
public virtual int ValidateAndGetLength(NpgsqlLogSequenceNumber value, NpgsqlParameter parameter);
    public virtual void Write(NpgsqlLogSequenceNumber value, NpgsqlWriteBuffer buf, NpgsqlParameter parameter);
    [NullableContextAttribute("2")]
public virtual int ValidateObjectAndGetLength(object value, NpgsqlLengthCache& lengthCache, NpgsqlParameter parameter);
    [NullableContextAttribute("2")]
public virtual Task WriteObjectWithLength(object value, NpgsqlWriteBuffer buf, NpgsqlLengthCache lengthCache, NpgsqlParameter parameter, bool async, CancellationToken cancellationToken);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Npgsql.Internal.TypeHandlers.InternalTypeHandlers.TidHandler : NpgsqlSimpleTypeHandler`1<NpgsqlTid> {
    public TidHandler(PostgresType pgType);
    public virtual NpgsqlTid Read(NpgsqlReadBuffer buf, int len, FieldDescription fieldDescription);
    [NullableContextAttribute("2")]
public virtual int ValidateAndGetLength(NpgsqlTid value, NpgsqlParameter parameter);
    public virtual void Write(NpgsqlTid value, NpgsqlWriteBuffer buf, NpgsqlParameter parameter);
    [NullableContextAttribute("2")]
public virtual int ValidateObjectAndGetLength(object value, NpgsqlLengthCache& lengthCache, NpgsqlParameter parameter);
    [NullableContextAttribute("2")]
public virtual Task WriteObjectWithLength(object value, NpgsqlWriteBuffer buf, NpgsqlLengthCache lengthCache, NpgsqlParameter parameter, bool async, CancellationToken cancellationToken);
}
[NullableContextAttribute("1")]
[NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public class Npgsql.Internal.TypeHandlers.JsonHandler : NpgsqlTypeHandler`1<string> {
    private JsonSerializerOptions _serializerOptions;
    private TextHandler _textHandler;
    private bool _isJsonb;
    private int _headerLen;
    private static byte JsonbProtocolVersion;
    private static JsonSerializerOptions DefaultSerializerOptions;
    public JsonHandler(PostgresType postgresType, Encoding encoding, bool isJsonb, JsonSerializerOptions serializerOptions);
    private static JsonHandler();
    [NullableContextAttribute("2")]
protected internal virtual int ValidateAndGetLengthCustom(TAny value, NpgsqlLengthCache& lengthCache, NpgsqlParameter parameter);
    [AsyncStateMachineAttribute("Npgsql.Internal.TypeHandlers.JsonHandler/<WriteWithLengthCustom>d__8`1")]
protected virtual Task WriteWithLengthCustom(TAny value, NpgsqlWriteBuffer buf, NpgsqlLengthCache lengthCache, NpgsqlParameter parameter, bool async, CancellationToken cancellationToken);
    [NullableContextAttribute("2")]
public virtual int ValidateAndGetLength(string value, NpgsqlLengthCache& lengthCache, NpgsqlParameter parameter);
    [AsyncStateMachineAttribute("Npgsql.Internal.TypeHandlers.JsonHandler/<Write>d__10")]
public virtual Task Write(string value, NpgsqlWriteBuffer buf, NpgsqlLengthCache lengthCache, NpgsqlParameter parameter, bool async, CancellationToken cancellationToken);
    [NullableContextAttribute("2")]
public virtual int ValidateObjectAndGetLength(object value, NpgsqlLengthCache& lengthCache, NpgsqlParameter parameter);
    [NullableContextAttribute("2")]
[AsyncStateMachineAttribute("Npgsql.Internal.TypeHandlers.JsonHandler/<WriteObjectWithLength>d__12")]
public virtual Task WriteObjectWithLength(object value, NpgsqlWriteBuffer buf, NpgsqlLengthCache lengthCache, NpgsqlParameter parameter, bool async, CancellationToken cancellationToken);
    [NullableContextAttribute("2")]
[AsyncStateMachineAttribute("Npgsql.Internal.TypeHandlers.JsonHandler/<ReadCustom>d__13`1")]
protected internal virtual ValueTask`1<T> ReadCustom(NpgsqlReadBuffer buf, int byteLen, bool async, FieldDescription fieldDescription);
    public virtual ValueTask`1<string> Read(NpgsqlReadBuffer buf, int len, bool async, FieldDescription fieldDescription);
    public sealed virtual TextReader GetTextReader(Stream stream, NpgsqlReadBuffer buffer);
    private Byte[] SerializeJsonDocument(JsonDocument document);
}
[NullableContextAttribute("1")]
[NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public class Npgsql.Internal.TypeHandlers.JsonPathHandler : NpgsqlTypeHandler`1<string> {
    private TextHandler _textHandler;
    private static byte JsonPathVersion;
    protected internal JsonPathHandler(PostgresType postgresType, Encoding encoding);
    [AsyncStateMachineAttribute("Npgsql.Internal.TypeHandlers.JsonPathHandler/<Read>d__3")]
public virtual ValueTask`1<string> Read(NpgsqlReadBuffer buf, int len, bool async, FieldDescription fieldDescription);
    [NullableContextAttribute("2")]
public virtual int ValidateAndGetLength(string value, NpgsqlLengthCache& lengthCache, NpgsqlParameter parameter);
    [AsyncStateMachineAttribute("Npgsql.Internal.TypeHandlers.JsonPathHandler/<Write>d__5")]
public virtual Task Write(string value, NpgsqlWriteBuffer buf, NpgsqlLengthCache lengthCache, NpgsqlParameter parameter, bool async, CancellationToken cancellationToken);
    public sealed virtual TextReader GetTextReader(Stream stream, NpgsqlReadBuffer buffer);
    [NullableContextAttribute("2")]
public virtual int ValidateObjectAndGetLength(object value, NpgsqlLengthCache& lengthCache, NpgsqlParameter parameter);
    [NullableContextAttribute("2")]
public virtual Task WriteObjectWithLength(object value, NpgsqlWriteBuffer buf, NpgsqlLengthCache lengthCache, NpgsqlParameter parameter, bool async, CancellationToken cancellationToken);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Npgsql.Internal.TypeHandlers.LTreeHandlers.LQueryHandler : TextHandler {
    private static byte LQueryProtocolVersion;
    internal bool PreferTextWrite { get; }
    protected internal LQueryHandler(PostgresType postgresType, Encoding encoding);
    internal virtual bool get_PreferTextWrite();
    [NullableContextAttribute("2")]
public virtual int ValidateAndGetLength(string value, NpgsqlLengthCache& lengthCache, NpgsqlParameter parameter);
    [NullableContextAttribute("2")]
public virtual int ValidateAndGetLength(Char[] value, NpgsqlLengthCache& lengthCache, NpgsqlParameter parameter);
    [NullableContextAttribute("2")]
public virtual int ValidateAndGetLength(ArraySegment`1<char> value, NpgsqlLengthCache& lengthCache, NpgsqlParameter parameter);
    [AsyncStateMachineAttribute("Npgsql.Internal.TypeHandlers.LTreeHandlers.LQueryHandler/<Write>d__7")]
public virtual Task Write(string value, NpgsqlWriteBuffer buf, NpgsqlLengthCache lengthCache, NpgsqlParameter parameter, bool async, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Npgsql.Internal.TypeHandlers.LTreeHandlers.LQueryHandler/<Write>d__8")]
public virtual Task Write(Char[] value, NpgsqlWriteBuffer buf, NpgsqlLengthCache lengthCache, NpgsqlParameter parameter, bool async, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Npgsql.Internal.TypeHandlers.LTreeHandlers.LQueryHandler/<Write>d__9")]
public virtual Task Write(ArraySegment`1<char> value, NpgsqlWriteBuffer buf, NpgsqlLengthCache lengthCache, NpgsqlParameter parameter, bool async, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Npgsql.Internal.TypeHandlers.LTreeHandlers.LQueryHandler/<Read>d__10")]
public virtual ValueTask`1<string> Read(NpgsqlReadBuffer buf, int len, bool async, FieldDescription fieldDescription);
    public virtual TextReader GetTextReader(Stream stream, NpgsqlReadBuffer buffer);
    [CompilerGeneratedAttribute]
[DebuggerHiddenAttribute]
private Task <>n__0(string value, NpgsqlWriteBuffer buf, NpgsqlLengthCache lengthCache, NpgsqlParameter parameter, bool async, CancellationToken cancellationToken);
    [CompilerGeneratedAttribute]
[DebuggerHiddenAttribute]
private Task <>n__1(Char[] value, NpgsqlWriteBuffer buf, NpgsqlLengthCache lengthCache, NpgsqlParameter parameter, bool async, CancellationToken cancellationToken);
    [CompilerGeneratedAttribute]
[DebuggerHiddenAttribute]
private Task <>n__2(ArraySegment`1<char> value, NpgsqlWriteBuffer buf, NpgsqlLengthCache lengthCache, NpgsqlParameter parameter, bool async, CancellationToken cancellationToken);
    [CompilerGeneratedAttribute]
[DebuggerHiddenAttribute]
private ValueTask`1<string> <>n__3(NpgsqlReadBuffer buf, int byteLen, bool async, FieldDescription fieldDescription);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Npgsql.Internal.TypeHandlers.LTreeHandlers.LTreeHandler : TextHandler {
    private static byte LtreeProtocolVersion;
    internal bool PreferTextWrite { get; }
    protected internal LTreeHandler(PostgresType postgresType, Encoding encoding);
    internal virtual bool get_PreferTextWrite();
    [NullableContextAttribute("2")]
public virtual int ValidateAndGetLength(string value, NpgsqlLengthCache& lengthCache, NpgsqlParameter parameter);
    [NullableContextAttribute("2")]
public virtual int ValidateAndGetLength(Char[] value, NpgsqlLengthCache& lengthCache, NpgsqlParameter parameter);
    [NullableContextAttribute("2")]
public virtual int ValidateAndGetLength(ArraySegment`1<char> value, NpgsqlLengthCache& lengthCache, NpgsqlParameter parameter);
    [AsyncStateMachineAttribute("Npgsql.Internal.TypeHandlers.LTreeHandlers.LTreeHandler/<Write>d__7")]
public virtual Task Write(string value, NpgsqlWriteBuffer buf, NpgsqlLengthCache lengthCache, NpgsqlParameter parameter, bool async, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Npgsql.Internal.TypeHandlers.LTreeHandlers.LTreeHandler/<Write>d__8")]
public virtual Task Write(Char[] value, NpgsqlWriteBuffer buf, NpgsqlLengthCache lengthCache, NpgsqlParameter parameter, bool async, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Npgsql.Internal.TypeHandlers.LTreeHandlers.LTreeHandler/<Write>d__9")]
public virtual Task Write(ArraySegment`1<char> value, NpgsqlWriteBuffer buf, NpgsqlLengthCache lengthCache, NpgsqlParameter parameter, bool async, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Npgsql.Internal.TypeHandlers.LTreeHandlers.LTreeHandler/<Read>d__10")]
public virtual ValueTask`1<string> Read(NpgsqlReadBuffer buf, int len, bool async, FieldDescription fieldDescription);
    public virtual TextReader GetTextReader(Stream stream, NpgsqlReadBuffer buffer);
    [CompilerGeneratedAttribute]
[DebuggerHiddenAttribute]
private Task <>n__0(string value, NpgsqlWriteBuffer buf, NpgsqlLengthCache lengthCache, NpgsqlParameter parameter, bool async, CancellationToken cancellationToken);
    [CompilerGeneratedAttribute]
[DebuggerHiddenAttribute]
private Task <>n__1(Char[] value, NpgsqlWriteBuffer buf, NpgsqlLengthCache lengthCache, NpgsqlParameter parameter, bool async, CancellationToken cancellationToken);
    [CompilerGeneratedAttribute]
[DebuggerHiddenAttribute]
private Task <>n__2(ArraySegment`1<char> value, NpgsqlWriteBuffer buf, NpgsqlLengthCache lengthCache, NpgsqlParameter parameter, bool async, CancellationToken cancellationToken);
    [CompilerGeneratedAttribute]
[DebuggerHiddenAttribute]
private ValueTask`1<string> <>n__3(NpgsqlReadBuffer buf, int byteLen, bool async, FieldDescription fieldDescription);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Npgsql.Internal.TypeHandlers.LTreeHandlers.LTxtQueryHandler : TextHandler {
    private static byte LTxtQueryProtocolVersion;
    internal bool PreferTextWrite { get; }
    protected internal LTxtQueryHandler(PostgresType postgresType, Encoding encoding);
    internal virtual bool get_PreferTextWrite();
    [NullableContextAttribute("2")]
public virtual int ValidateAndGetLength(string value, NpgsqlLengthCache& lengthCache, NpgsqlParameter parameter);
    [NullableContextAttribute("2")]
public virtual int ValidateAndGetLength(Char[] value, NpgsqlLengthCache& lengthCache, NpgsqlParameter parameter);
    [NullableContextAttribute("2")]
public virtual int ValidateAndGetLength(ArraySegment`1<char> value, NpgsqlLengthCache& lengthCache, NpgsqlParameter parameter);
    [AsyncStateMachineAttribute("Npgsql.Internal.TypeHandlers.LTreeHandlers.LTxtQueryHandler/<Write>d__7")]
public virtual Task Write(string value, NpgsqlWriteBuffer buf, NpgsqlLengthCache lengthCache, NpgsqlParameter parameter, bool async, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Npgsql.Internal.TypeHandlers.LTreeHandlers.LTxtQueryHandler/<Write>d__8")]
public virtual Task Write(Char[] value, NpgsqlWriteBuffer buf, NpgsqlLengthCache lengthCache, NpgsqlParameter parameter, bool async, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Npgsql.Internal.TypeHandlers.LTreeHandlers.LTxtQueryHandler/<Write>d__9")]
public virtual Task Write(ArraySegment`1<char> value, NpgsqlWriteBuffer buf, NpgsqlLengthCache lengthCache, NpgsqlParameter parameter, bool async, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Npgsql.Internal.TypeHandlers.LTreeHandlers.LTxtQueryHandler/<Read>d__10")]
public virtual ValueTask`1<string> Read(NpgsqlReadBuffer buf, int len, bool async, FieldDescription fieldDescription);
    public virtual TextReader GetTextReader(Stream stream, NpgsqlReadBuffer buffer);
    [CompilerGeneratedAttribute]
[DebuggerHiddenAttribute]
private Task <>n__0(string value, NpgsqlWriteBuffer buf, NpgsqlLengthCache lengthCache, NpgsqlParameter parameter, bool async, CancellationToken cancellationToken);
    [CompilerGeneratedAttribute]
[DebuggerHiddenAttribute]
private Task <>n__1(Char[] value, NpgsqlWriteBuffer buf, NpgsqlLengthCache lengthCache, NpgsqlParameter parameter, bool async, CancellationToken cancellationToken);
    [CompilerGeneratedAttribute]
[DebuggerHiddenAttribute]
private Task <>n__2(ArraySegment`1<char> value, NpgsqlWriteBuffer buf, NpgsqlLengthCache lengthCache, NpgsqlParameter parameter, bool async, CancellationToken cancellationToken);
    [CompilerGeneratedAttribute]
[DebuggerHiddenAttribute]
private ValueTask`1<string> <>n__3(NpgsqlReadBuffer buf, int byteLen, bool async, FieldDescription fieldDescription);
}
[NullableContextAttribute("2")]
[NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public class Npgsql.Internal.TypeHandlers.MultirangeHandler`1 : NpgsqlTypeHandler`1<NpgsqlRange`1[]> {
    [NullableAttribute("1")]
[CompilerGeneratedAttribute]
private RangeHandler`1<TSubtype> <RangeHandler>k__BackingField;
    [NullableAttribute("1")]
protected RangeHandler`1<TSubtype> RangeHandler { get; }
    [NullableContextAttribute("1")]
public MultirangeHandler`1(PostgresMultirangeType pgMultirangeType, RangeHandler`1<TSubtype> rangeHandler);
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
protected RangeHandler`1<TSubtype> get_RangeHandler();
    [NullableContextAttribute("1")]
public virtual ValueTask`1<NpgsqlRange`1[]> Read(NpgsqlReadBuffer buf, int len, bool async, FieldDescription fieldDescription);
    [AsyncStateMachineAttribute("Npgsql.Internal.TypeHandlers.MultirangeHandler`1/<ReadMultirangeArray>d__5`1")]
protected ValueTask`1<NpgsqlRange`1[]> ReadMultirangeArray(NpgsqlReadBuffer buf, int len, bool async, FieldDescription fieldDescription);
    [NullableContextAttribute("1")]
private sealed virtual override ValueTask`1<List`1<NpgsqlRange`1<TSubtype>>> Npgsql.Internal.TypeHandling.INpgsqlTypeHandler<System.Collections.Generic.List<NpgsqlTypes.NpgsqlRange<TSubtype>>>.Read(NpgsqlReadBuffer buf, int len, bool async, FieldDescription fieldDescription);
    [AsyncStateMachineAttribute("Npgsql.Internal.TypeHandlers.MultirangeHandler`1/<ReadMultirangeList>d__7`1")]
protected ValueTask`1<List`1<NpgsqlRange`1<TAnySubtype>>> ReadMultirangeList(NpgsqlReadBuffer buf, int len, bool async, FieldDescription fieldDescription);
    public virtual int ValidateAndGetLength(NpgsqlRange`1[] value, NpgsqlLengthCache& lengthCache, NpgsqlParameter parameter);
    public sealed virtual int ValidateAndGetLength(List`1<NpgsqlRange`1<TSubtype>> value, NpgsqlLengthCache& lengthCache, NpgsqlParameter parameter);
    protected int ValidateAndGetLengthMultirange(IList`1<NpgsqlRange`1<TAnySubtype>> value, NpgsqlLengthCache& lengthCache, NpgsqlParameter parameter);
    [NullableContextAttribute("1")]
public virtual Task Write(NpgsqlRange`1[] value, NpgsqlWriteBuffer buf, NpgsqlLengthCache lengthCache, NpgsqlParameter parameter, bool async, CancellationToken cancellationToken);
    [NullableContextAttribute("1")]
public sealed virtual Task Write(List`1<NpgsqlRange`1<TSubtype>> value, NpgsqlWriteBuffer buf, NpgsqlLengthCache lengthCache, NpgsqlParameter parameter, bool async, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Npgsql.Internal.TypeHandlers.MultirangeHandler`1/<WriteMultirange>d__13`1")]
public Task WriteMultirange(IList`1<NpgsqlRange`1<TAnySubtype>> value, NpgsqlWriteBuffer buf, NpgsqlLengthCache lengthCache, NpgsqlParameter parameter, bool async, CancellationToken cancellationToken);
    public virtual int ValidateObjectAndGetLength(object value, NpgsqlLengthCache& lengthCache, NpgsqlParameter parameter);
    public virtual Task WriteObjectWithLength(object value, NpgsqlWriteBuffer buf, NpgsqlLengthCache lengthCache, NpgsqlParameter parameter, bool async, CancellationToken cancellationToken);
}
[NullableContextAttribute("2")]
[NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public class Npgsql.Internal.TypeHandlers.MultirangeHandler`2 : MultirangeHandler`1<TSubtype1> {
    [NullableContextAttribute("1")]
public MultirangeHandler`2(PostgresMultirangeType pgMultirangeType, RangeHandler`2<TSubtype1, TSubtype2> rangeHandler);
    [NullableContextAttribute("1")]
private sealed virtual override ValueTask`1<NpgsqlRange`1[]> Npgsql.Internal.TypeHandling.INpgsqlTypeHandler<NpgsqlTypes.NpgsqlRange<TSubtype2>[]>.Read(NpgsqlReadBuffer buf, int len, bool async, FieldDescription fieldDescription);
    [NullableContextAttribute("1")]
private sealed virtual override ValueTask`1<List`1<NpgsqlRange`1<TSubtype2>>> Npgsql.Internal.TypeHandling.INpgsqlTypeHandler<System.Collections.Generic.List<NpgsqlTypes.NpgsqlRange<TSubtype2>>>.Read(NpgsqlReadBuffer buf, int len, bool async, FieldDescription fieldDescription);
    public sealed virtual int ValidateAndGetLength(List`1<NpgsqlRange`1<TSubtype2>> value, NpgsqlLengthCache& lengthCache, NpgsqlParameter parameter);
    public sealed virtual int ValidateAndGetLength(NpgsqlRange`1[] value, NpgsqlLengthCache& lengthCache, NpgsqlParameter parameter);
    [NullableContextAttribute("1")]
public sealed virtual Task Write(List`1<NpgsqlRange`1<TSubtype2>> value, NpgsqlWriteBuffer buf, NpgsqlLengthCache lengthCache, NpgsqlParameter parameter, bool async, CancellationToken cancellationToken);
    [NullableContextAttribute("1")]
public sealed virtual Task Write(NpgsqlRange`1[] value, NpgsqlWriteBuffer buf, NpgsqlLengthCache lengthCache, NpgsqlParameter parameter, bool async, CancellationToken cancellationToken);
    public virtual int ValidateObjectAndGetLength(object value, NpgsqlLengthCache& lengthCache, NpgsqlParameter parameter);
    public virtual Task WriteObjectWithLength(object value, NpgsqlWriteBuffer buf, NpgsqlLengthCache lengthCache, NpgsqlParameter parameter, bool async, CancellationToken cancellationToken);
}
[TupleElementNamesAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[NullableContextAttribute("1")]
[NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public class Npgsql.Internal.TypeHandlers.NetworkHandlers.CidrHandler : NpgsqlSimpleTypeHandler`1<ValueTuple`2<IPAddress, int>> {
    public CidrHandler(PostgresType pgType);
    public virtual ValueTuple`2<IPAddress, int> Read(NpgsqlReadBuffer buf, int len, FieldDescription fieldDescription);
    private sealed virtual override NpgsqlInet Npgsql.Internal.TypeHandling.INpgsqlSimpleTypeHandler<NpgsqlTypes.NpgsqlInet>.Read(NpgsqlReadBuffer buf, int len, FieldDescription fieldDescription);
    [NullableContextAttribute("2")]
public virtual int ValidateAndGetLength(ValueTuple`2<IPAddress, int> value, NpgsqlParameter parameter);
    [NullableContextAttribute("2")]
public sealed virtual int ValidateAndGetLength(NpgsqlInet value, NpgsqlParameter parameter);
    public virtual void Write(ValueTuple`2<IPAddress, int> value, NpgsqlWriteBuffer buf, NpgsqlParameter parameter);
    public sealed virtual void Write(NpgsqlInet value, NpgsqlWriteBuffer buf, NpgsqlParameter parameter);
    [NullableContextAttribute("2")]
public virtual int ValidateObjectAndGetLength(object value, NpgsqlLengthCache& lengthCache, NpgsqlParameter parameter);
    [NullableContextAttribute("2")]
public virtual Task WriteObjectWithLength(object value, NpgsqlWriteBuffer buf, NpgsqlLengthCache lengthCache, NpgsqlParameter parameter, bool async, CancellationToken cancellationToken);
}
[TupleElementNamesAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[NullableContextAttribute("1")]
[NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public class Npgsql.Internal.TypeHandlers.NetworkHandlers.InetHandler : NpgsqlSimpleTypeHandlerWithPsv`2<IPAddress, ValueTuple`2<IPAddress, int>> {
    private static byte IPv4;
    private static byte IPv6;
    public InetHandler(PostgresType pgType);
    public virtual IPAddress Read(NpgsqlReadBuffer buf, int len, FieldDescription fieldDescription);
    internal static ValueTuple`2<IPAddress, int> DoRead(NpgsqlReadBuffer buf, int len, FieldDescription fieldDescription, bool isCidrHandler);
    protected virtual ValueTuple`2<IPAddress, int> ReadPsv(NpgsqlReadBuffer buf, int len, FieldDescription fieldDescription);
    private sealed virtual override NpgsqlInet Npgsql.Internal.TypeHandling.INpgsqlSimpleTypeHandler<NpgsqlTypes.NpgsqlInet>.Read(NpgsqlReadBuffer buf, int len, FieldDescription fieldDescription);
    public virtual int ValidateAndGetLength(IPAddress value, NpgsqlParameter parameter);
    [NullableContextAttribute("2")]
public virtual int ValidateAndGetLength(ValueTuple`2<IPAddress, int> value, NpgsqlParameter parameter);
    [NullableContextAttribute("2")]
public sealed virtual int ValidateAndGetLength(NpgsqlInet value, NpgsqlParameter parameter);
    public virtual void Write(IPAddress value, NpgsqlWriteBuffer buf, NpgsqlParameter parameter);
    public virtual void Write(ValueTuple`2<IPAddress, int> value, NpgsqlWriteBuffer buf, NpgsqlParameter parameter);
    public sealed virtual void Write(NpgsqlInet value, NpgsqlWriteBuffer buf, NpgsqlParameter parameter);
    internal static void DoWrite(IPAddress ip, int mask, NpgsqlWriteBuffer buf, bool isCidrHandler);
    internal static int GetLength(IPAddress value);
    [NullableContextAttribute("2")]
public virtual int ValidateObjectAndGetLength(object value, NpgsqlLengthCache& lengthCache, NpgsqlParameter parameter);
    [NullableContextAttribute("2")]
public virtual Task WriteObjectWithLength(object value, NpgsqlWriteBuffer buf, NpgsqlLengthCache lengthCache, NpgsqlParameter parameter, bool async, CancellationToken cancellationToken);
}
[NullableContextAttribute("1")]
[NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public class Npgsql.Internal.TypeHandlers.NetworkHandlers.MacaddrHandler : NpgsqlSimpleTypeHandler`1<PhysicalAddress> {
    public MacaddrHandler(PostgresType pgType);
    public virtual PhysicalAddress Read(NpgsqlReadBuffer buf, int len, FieldDescription fieldDescription);
    public virtual int ValidateAndGetLength(PhysicalAddress value, NpgsqlParameter parameter);
    public virtual void Write(PhysicalAddress value, NpgsqlWriteBuffer buf, NpgsqlParameter parameter);
    [NullableContextAttribute("2")]
public virtual int ValidateObjectAndGetLength(object value, NpgsqlLengthCache& lengthCache, NpgsqlParameter parameter);
    [NullableContextAttribute("2")]
public virtual Task WriteObjectWithLength(object value, NpgsqlWriteBuffer buf, NpgsqlLengthCache lengthCache, NpgsqlParameter parameter, bool async, CancellationToken cancellationToken);
}
internal class Npgsql.Internal.TypeHandlers.NumericHandlers.DecimalRaw : ValueType {
    private static int SignMask;
    private static int ScaleMask;
    private static int ScaleShift;
    [NullableAttribute("1")]
internal static UInt32[] Powers10;
    internal static int MaxUInt32Scale;
    private decimal _value;
    private int _flags;
    private UInt32 _high;
    private UInt32 _low;
    private UInt32 _mid;
    public bool Negative { get; }
    public int Scale { get; public set; }
    public UInt32 High { get; }
    public UInt32 Mid { get; }
    public UInt32 Low { get; }
    public decimal Value { get; }
    public DecimalRaw(decimal value);
    public DecimalRaw(long value);
    private static DecimalRaw();
    public bool get_Negative();
    public int get_Scale();
    public void set_Scale(int value);
    public UInt32 get_High();
    public UInt32 get_Mid();
    public UInt32 get_Low();
    public decimal get_Value();
    public static void Negate(DecimalRaw& value);
    public static void Add(DecimalRaw& value, UInt32 addend);
    public static void Multiply(DecimalRaw& value, UInt32 multiplier);
    public static UInt32 Divide(DecimalRaw& value, UInt32 divisor);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Npgsql.Internal.TypeHandlers.NumericHandlers.DoubleHandler : NpgsqlSimpleTypeHandler`1<double> {
    public DoubleHandler(PostgresType pgType);
    public virtual double Read(NpgsqlReadBuffer buf, int len, FieldDescription fieldDescription);
    [NullableContextAttribute("2")]
public virtual int ValidateAndGetLength(double value, NpgsqlParameter parameter);
    public virtual void Write(double value, NpgsqlWriteBuffer buf, NpgsqlParameter parameter);
    [NullableContextAttribute("2")]
public virtual int ValidateObjectAndGetLength(object value, NpgsqlLengthCache& lengthCache, NpgsqlParameter parameter);
    [NullableContextAttribute("2")]
public virtual Task WriteObjectWithLength(object value, NpgsqlWriteBuffer buf, NpgsqlLengthCache lengthCache, NpgsqlParameter parameter, bool async, CancellationToken cancellationToken);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Npgsql.Internal.TypeHandlers.NumericHandlers.Int16Handler : NpgsqlSimpleTypeHandler`1<short> {
    public Int16Handler(PostgresType pgType);
    public virtual short Read(NpgsqlReadBuffer buf, int len, FieldDescription fieldDescription);
    private sealed virtual override byte Npgsql.Internal.TypeHandling.INpgsqlSimpleTypeHandler<System.Byte>.Read(NpgsqlReadBuffer buf, int len, FieldDescription fieldDescription);
    private sealed virtual override sbyte Npgsql.Internal.TypeHandling.INpgsqlSimpleTypeHandler<System.SByte>.Read(NpgsqlReadBuffer buf, int len, FieldDescription fieldDescription);
    private sealed virtual override int Npgsql.Internal.TypeHandling.INpgsqlSimpleTypeHandler<System.Int32>.Read(NpgsqlReadBuffer buf, int len, FieldDescription fieldDescription);
    private sealed virtual override long Npgsql.Internal.TypeHandling.INpgsqlSimpleTypeHandler<System.Int64>.Read(NpgsqlReadBuffer buf, int len, FieldDescription fieldDescription);
    private sealed virtual override float Npgsql.Internal.TypeHandling.INpgsqlSimpleTypeHandler<System.Single>.Read(NpgsqlReadBuffer buf, int len, FieldDescription fieldDescription);
    private sealed virtual override double Npgsql.Internal.TypeHandling.INpgsqlSimpleTypeHandler<System.Double>.Read(NpgsqlReadBuffer buf, int len, FieldDescription fieldDescription);
    private sealed virtual override decimal Npgsql.Internal.TypeHandling.INpgsqlSimpleTypeHandler<System.Decimal>.Read(NpgsqlReadBuffer buf, int len, FieldDescription fieldDescription);
    [NullableContextAttribute("2")]
public virtual int ValidateAndGetLength(short value, NpgsqlParameter parameter);
    [NullableContextAttribute("2")]
public sealed virtual int ValidateAndGetLength(byte value, NpgsqlParameter parameter);
    [NullableContextAttribute("2")]
public sealed virtual int ValidateAndGetLength(sbyte value, NpgsqlParameter parameter);
    [NullableContextAttribute("2")]
public sealed virtual int ValidateAndGetLength(decimal value, NpgsqlParameter parameter);
    [NullableContextAttribute("2")]
public sealed virtual int ValidateAndGetLength(int value, NpgsqlParameter parameter);
    [NullableContextAttribute("2")]
public sealed virtual int ValidateAndGetLength(long value, NpgsqlParameter parameter);
    [NullableContextAttribute("2")]
public sealed virtual int ValidateAndGetLength(float value, NpgsqlParameter parameter);
    [NullableContextAttribute("2")]
public sealed virtual int ValidateAndGetLength(double value, NpgsqlParameter parameter);
    public virtual void Write(short value, NpgsqlWriteBuffer buf, NpgsqlParameter parameter);
    public sealed virtual void Write(int value, NpgsqlWriteBuffer buf, NpgsqlParameter parameter);
    public sealed virtual void Write(long value, NpgsqlWriteBuffer buf, NpgsqlParameter parameter);
    public sealed virtual void Write(byte value, NpgsqlWriteBuffer buf, NpgsqlParameter parameter);
    public sealed virtual void Write(sbyte value, NpgsqlWriteBuffer buf, NpgsqlParameter parameter);
    public sealed virtual void Write(decimal value, NpgsqlWriteBuffer buf, NpgsqlParameter parameter);
    public sealed virtual void Write(double value, NpgsqlWriteBuffer buf, NpgsqlParameter parameter);
    public sealed virtual void Write(float value, NpgsqlWriteBuffer buf, NpgsqlParameter parameter);
    [NullableContextAttribute("2")]
public virtual int ValidateObjectAndGetLength(object value, NpgsqlLengthCache& lengthCache, NpgsqlParameter parameter);
    [NullableContextAttribute("2")]
public virtual Task WriteObjectWithLength(object value, NpgsqlWriteBuffer buf, NpgsqlLengthCache lengthCache, NpgsqlParameter parameter, bool async, CancellationToken cancellationToken);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Npgsql.Internal.TypeHandlers.NumericHandlers.Int32Handler : NpgsqlSimpleTypeHandler`1<int> {
    public Int32Handler(PostgresType pgType);
    public virtual int Read(NpgsqlReadBuffer buf, int len, FieldDescription fieldDescription);
    private sealed virtual override byte Npgsql.Internal.TypeHandling.INpgsqlSimpleTypeHandler<System.Byte>.Read(NpgsqlReadBuffer buf, int len, FieldDescription fieldDescription);
    private sealed virtual override short Npgsql.Internal.TypeHandling.INpgsqlSimpleTypeHandler<System.Int16>.Read(NpgsqlReadBuffer buf, int len, FieldDescription fieldDescription);
    private sealed virtual override long Npgsql.Internal.TypeHandling.INpgsqlSimpleTypeHandler<System.Int64>.Read(NpgsqlReadBuffer buf, int len, FieldDescription fieldDescription);
    private sealed virtual override float Npgsql.Internal.TypeHandling.INpgsqlSimpleTypeHandler<System.Single>.Read(NpgsqlReadBuffer buf, int len, FieldDescription fieldDescription);
    private sealed virtual override double Npgsql.Internal.TypeHandling.INpgsqlSimpleTypeHandler<System.Double>.Read(NpgsqlReadBuffer buf, int len, FieldDescription fieldDescription);
    private sealed virtual override decimal Npgsql.Internal.TypeHandling.INpgsqlSimpleTypeHandler<System.Decimal>.Read(NpgsqlReadBuffer buf, int len, FieldDescription fieldDescription);
    [NullableContextAttribute("2")]
public virtual int ValidateAndGetLength(int value, NpgsqlParameter parameter);
    [NullableContextAttribute("2")]
public sealed virtual int ValidateAndGetLength(short value, NpgsqlParameter parameter);
    [NullableContextAttribute("2")]
public sealed virtual int ValidateAndGetLength(byte value, NpgsqlParameter parameter);
    [NullableContextAttribute("2")]
public sealed virtual int ValidateAndGetLength(decimal value, NpgsqlParameter parameter);
    [NullableContextAttribute("2")]
public sealed virtual int ValidateAndGetLength(long value, NpgsqlParameter parameter);
    [NullableContextAttribute("2")]
public sealed virtual int ValidateAndGetLength(float value, NpgsqlParameter parameter);
    [NullableContextAttribute("2")]
public sealed virtual int ValidateAndGetLength(double value, NpgsqlParameter parameter);
    public virtual void Write(int value, NpgsqlWriteBuffer buf, NpgsqlParameter parameter);
    public sealed virtual void Write(short value, NpgsqlWriteBuffer buf, NpgsqlParameter parameter);
    public sealed virtual void Write(long value, NpgsqlWriteBuffer buf, NpgsqlParameter parameter);
    public sealed virtual void Write(byte value, NpgsqlWriteBuffer buf, NpgsqlParameter parameter);
    public sealed virtual void Write(float value, NpgsqlWriteBuffer buf, NpgsqlParameter parameter);
    public sealed virtual void Write(double value, NpgsqlWriteBuffer buf, NpgsqlParameter parameter);
    public sealed virtual void Write(decimal value, NpgsqlWriteBuffer buf, NpgsqlParameter parameter);
    [NullableContextAttribute("2")]
public virtual int ValidateObjectAndGetLength(object value, NpgsqlLengthCache& lengthCache, NpgsqlParameter parameter);
    [NullableContextAttribute("2")]
public virtual Task WriteObjectWithLength(object value, NpgsqlWriteBuffer buf, NpgsqlLengthCache lengthCache, NpgsqlParameter parameter, bool async, CancellationToken cancellationToken);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Npgsql.Internal.TypeHandlers.NumericHandlers.Int64Handler : NpgsqlSimpleTypeHandler`1<long> {
    public Int64Handler(PostgresType pgType);
    public virtual long Read(NpgsqlReadBuffer buf, int len, FieldDescription fieldDescription);
    private sealed virtual override byte Npgsql.Internal.TypeHandling.INpgsqlSimpleTypeHandler<System.Byte>.Read(NpgsqlReadBuffer buf, int len, FieldDescription fieldDescription);
    private sealed virtual override short Npgsql.Internal.TypeHandling.INpgsqlSimpleTypeHandler<System.Int16>.Read(NpgsqlReadBuffer buf, int len, FieldDescription fieldDescription);
    private sealed virtual override int Npgsql.Internal.TypeHandling.INpgsqlSimpleTypeHandler<System.Int32>.Read(NpgsqlReadBuffer buf, int len, FieldDescription fieldDescription);
    private sealed virtual override float Npgsql.Internal.TypeHandling.INpgsqlSimpleTypeHandler<System.Single>.Read(NpgsqlReadBuffer buf, int len, FieldDescription fieldDescription);
    private sealed virtual override double Npgsql.Internal.TypeHandling.INpgsqlSimpleTypeHandler<System.Double>.Read(NpgsqlReadBuffer buf, int len, FieldDescription fieldDescription);
    private sealed virtual override decimal Npgsql.Internal.TypeHandling.INpgsqlSimpleTypeHandler<System.Decimal>.Read(NpgsqlReadBuffer buf, int len, FieldDescription fieldDescription);
    [NullableContextAttribute("2")]
public virtual int ValidateAndGetLength(long value, NpgsqlParameter parameter);
    [NullableContextAttribute("2")]
public sealed virtual int ValidateAndGetLength(int value, NpgsqlParameter parameter);
    [NullableContextAttribute("2")]
public sealed virtual int ValidateAndGetLength(short value, NpgsqlParameter parameter);
    [NullableContextAttribute("2")]
public sealed virtual int ValidateAndGetLength(byte value, NpgsqlParameter parameter);
    [NullableContextAttribute("2")]
public sealed virtual int ValidateAndGetLength(decimal value, NpgsqlParameter parameter);
    [NullableContextAttribute("2")]
public sealed virtual int ValidateAndGetLength(float value, NpgsqlParameter parameter);
    [NullableContextAttribute("2")]
public sealed virtual int ValidateAndGetLength(double value, NpgsqlParameter parameter);
    public virtual void Write(long value, NpgsqlWriteBuffer buf, NpgsqlParameter parameter);
    public sealed virtual void Write(short value, NpgsqlWriteBuffer buf, NpgsqlParameter parameter);
    public sealed virtual void Write(int value, NpgsqlWriteBuffer buf, NpgsqlParameter parameter);
    public sealed virtual void Write(byte value, NpgsqlWriteBuffer buf, NpgsqlParameter parameter);
    public sealed virtual void Write(float value, NpgsqlWriteBuffer buf, NpgsqlParameter parameter);
    public sealed virtual void Write(double value, NpgsqlWriteBuffer buf, NpgsqlParameter parameter);
    public sealed virtual void Write(decimal value, NpgsqlWriteBuffer buf, NpgsqlParameter parameter);
    [NullableContextAttribute("2")]
public virtual int ValidateObjectAndGetLength(object value, NpgsqlLengthCache& lengthCache, NpgsqlParameter parameter);
    [NullableContextAttribute("2")]
public virtual Task WriteObjectWithLength(object value, NpgsqlWriteBuffer buf, NpgsqlLengthCache lengthCache, NpgsqlParameter parameter, bool async, CancellationToken cancellationToken);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Npgsql.Internal.TypeHandlers.NumericHandlers.MoneyHandler : NpgsqlSimpleTypeHandler`1<decimal> {
    private static int MoneyScale;
    public MoneyHandler(PostgresType pgType);
    public virtual decimal Read(NpgsqlReadBuffer buf, int len, FieldDescription fieldDescription);
    [NullableContextAttribute("2")]
public virtual int ValidateAndGetLength(decimal value, NpgsqlParameter parameter);
    public virtual void Write(decimal value, NpgsqlWriteBuffer buf, NpgsqlParameter parameter);
    [NullableContextAttribute("2")]
public virtual int ValidateObjectAndGetLength(object value, NpgsqlLengthCache& lengthCache, NpgsqlParameter parameter);
    [NullableContextAttribute("2")]
public virtual Task WriteObjectWithLength(object value, NpgsqlWriteBuffer buf, NpgsqlLengthCache lengthCache, NpgsqlParameter parameter, bool async, CancellationToken cancellationToken);
}
public class Npgsql.Internal.TypeHandlers.NumericHandlers.NumericHandler : NpgsqlTypeHandler`1<decimal> {
    private static int MaxDecimalScale;
    private static int SignPositive;
    private static int SignNegative;
    private static int SignNan;
    private static int SignPinf;
    private static int SignNinf;
    private static int SignSpecialMask;
    private static int MaxGroupCount;
    private static int MaxGroupScale;
    private static UInt32 MaxGroupSize;
    [NullableContextAttribute("1")]
public NumericHandler(PostgresType pgType);
    private static NumericHandler();
    [AsyncStateMachineAttribute("Npgsql.Internal.TypeHandlers.NumericHandlers.NumericHandler/<Read>d__11")]
public virtual ValueTask`1<decimal> Read(NpgsqlReadBuffer buf, int len, bool async, FieldDescription fieldDescription);
    [AsyncStateMachineAttribute("Npgsql.Internal.TypeHandlers.NumericHandlers.NumericHandler/<Npgsql-Internal-TypeHandling-INpgsqlTypeHandler<System-Byte>-Read>d__12")]
private sealed virtual override ValueTask`1<byte> Npgsql.Internal.TypeHandling.INpgsqlTypeHandler<System.Byte>.Read(NpgsqlReadBuffer buf, int len, bool async, FieldDescription fieldDescription);
    [AsyncStateMachineAttribute("Npgsql.Internal.TypeHandlers.NumericHandlers.NumericHandler/<Npgsql-Internal-TypeHandling-INpgsqlTypeHandler<System-Int16>-Read>d__13")]
private sealed virtual override ValueTask`1<short> Npgsql.Internal.TypeHandling.INpgsqlTypeHandler<System.Int16>.Read(NpgsqlReadBuffer buf, int len, bool async, FieldDescription fieldDescription);
    [AsyncStateMachineAttribute("Npgsql.Internal.TypeHandlers.NumericHandlers.NumericHandler/<Npgsql-Internal-TypeHandling-INpgsqlTypeHandler<System-Int32>-Read>d__14")]
private sealed virtual override ValueTask`1<int> Npgsql.Internal.TypeHandling.INpgsqlTypeHandler<System.Int32>.Read(NpgsqlReadBuffer buf, int len, bool async, FieldDescription fieldDescription);
    [AsyncStateMachineAttribute("Npgsql.Internal.TypeHandlers.NumericHandlers.NumericHandler/<Npgsql-Internal-TypeHandling-INpgsqlTypeHandler<System-Int64>-Read>d__15")]
private sealed virtual override ValueTask`1<long> Npgsql.Internal.TypeHandling.INpgsqlTypeHandler<System.Int64>.Read(NpgsqlReadBuffer buf, int len, bool async, FieldDescription fieldDescription);
    [AsyncStateMachineAttribute("Npgsql.Internal.TypeHandlers.NumericHandlers.NumericHandler/<Npgsql-Internal-TypeHandling-INpgsqlTypeHandler<System-Single>-Read>d__16")]
private sealed virtual override ValueTask`1<float> Npgsql.Internal.TypeHandling.INpgsqlTypeHandler<System.Single>.Read(NpgsqlReadBuffer buf, int len, bool async, FieldDescription fieldDescription);
    [AsyncStateMachineAttribute("Npgsql.Internal.TypeHandlers.NumericHandlers.NumericHandler/<Npgsql-Internal-TypeHandling-INpgsqlTypeHandler<System-Double>-Read>d__17")]
private sealed virtual override ValueTask`1<double> Npgsql.Internal.TypeHandling.INpgsqlTypeHandler<System.Double>.Read(NpgsqlReadBuffer buf, int len, bool async, FieldDescription fieldDescription);
    [AsyncStateMachineAttribute("Npgsql.Internal.TypeHandlers.NumericHandlers.NumericHandler/<Npgsql-Internal-TypeHandling-INpgsqlTypeHandler<System-Numerics-BigInteger>-Read>d__18")]
private sealed virtual override ValueTask`1<BigInteger> Npgsql.Internal.TypeHandling.INpgsqlTypeHandler<System.Numerics.BigInteger>.Read(NpgsqlReadBuffer buf, int len, bool async, FieldDescription fieldDescription);
    [NullableContextAttribute("2")]
public virtual int ValidateAndGetLength(decimal value, NpgsqlLengthCache& lengthCache, NpgsqlParameter parameter);
    [NullableContextAttribute("2")]
public sealed virtual int ValidateAndGetLength(short value, NpgsqlLengthCache& lengthCache, NpgsqlParameter parameter);
    [NullableContextAttribute("2")]
public sealed virtual int ValidateAndGetLength(int value, NpgsqlLengthCache& lengthCache, NpgsqlParameter parameter);
    [NullableContextAttribute("2")]
public sealed virtual int ValidateAndGetLength(long value, NpgsqlLengthCache& lengthCache, NpgsqlParameter parameter);
    [NullableContextAttribute("2")]
public sealed virtual int ValidateAndGetLength(float value, NpgsqlLengthCache& lengthCache, NpgsqlParameter parameter);
    [NullableContextAttribute("2")]
public sealed virtual int ValidateAndGetLength(double value, NpgsqlLengthCache& lengthCache, NpgsqlParameter parameter);
    [NullableContextAttribute("2")]
public sealed virtual int ValidateAndGetLength(byte value, NpgsqlLengthCache& lengthCache, NpgsqlParameter parameter);
    [NullableContextAttribute("1")]
[AsyncStateMachineAttribute("Npgsql.Internal.TypeHandlers.NumericHandlers.NumericHandler/<Write>d__26")]
public virtual Task Write(decimal value, NpgsqlWriteBuffer buf, NpgsqlLengthCache lengthCache, NpgsqlParameter parameter, bool async, CancellationToken cancellationToken);
    [NullableContextAttribute("1")]
public sealed virtual Task Write(short value, NpgsqlWriteBuffer buf, NpgsqlLengthCache lengthCache, NpgsqlParameter parameter, bool async, CancellationToken cancellationToken);
    [NullableContextAttribute("1")]
public sealed virtual Task Write(int value, NpgsqlWriteBuffer buf, NpgsqlLengthCache lengthCache, NpgsqlParameter parameter, bool async, CancellationToken cancellationToken);
    [NullableContextAttribute("1")]
public sealed virtual Task Write(long value, NpgsqlWriteBuffer buf, NpgsqlLengthCache lengthCache, NpgsqlParameter parameter, bool async, CancellationToken cancellationToken);
    [NullableContextAttribute("1")]
public sealed virtual Task Write(byte value, NpgsqlWriteBuffer buf, NpgsqlLengthCache lengthCache, NpgsqlParameter parameter, bool async, CancellationToken cancellationToken);
    [NullableContextAttribute("1")]
public sealed virtual Task Write(float value, NpgsqlWriteBuffer buf, NpgsqlLengthCache lengthCache, NpgsqlParameter parameter, bool async, CancellationToken cancellationToken);
    [NullableContextAttribute("1")]
public sealed virtual Task Write(double value, NpgsqlWriteBuffer buf, NpgsqlLengthCache lengthCache, NpgsqlParameter parameter, bool async, CancellationToken cancellationToken);
    [NullableContextAttribute("1")]
private static UInt16[] FromBigInteger(BigInteger value);
    [NullableContextAttribute("2")]
public sealed virtual int ValidateAndGetLength(BigInteger value, NpgsqlLengthCache& lengthCache, NpgsqlParameter parameter);
    [NullableContextAttribute("1")]
[AsyncStateMachineAttribute("Npgsql.Internal.TypeHandlers.NumericHandlers.NumericHandler/<Write>d__35")]
public sealed virtual Task Write(BigInteger value, NpgsqlWriteBuffer buf, NpgsqlLengthCache lengthCache, NpgsqlParameter parameter, bool async, CancellationToken cancellationToken);
    [NullableContextAttribute("2")]
public virtual int ValidateObjectAndGetLength(object value, NpgsqlLengthCache& lengthCache, NpgsqlParameter parameter);
    [NullableContextAttribute("2")]
public virtual Task WriteObjectWithLength(object value, NpgsqlWriteBuffer buf, NpgsqlLengthCache lengthCache, NpgsqlParameter parameter, bool async, CancellationToken cancellationToken);
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
internal static BigInteger <Npgsql.Internal.TypeHandling.INpgsqlTypeHandler<System.Numerics.BigInteger>.Read>g__ToBigIntegerInner|18_0(int offset, int length, UInt16[] digits, BigInteger[] factors);
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
internal static void <Write>g__WriteInner|26_0(DecimalRaw raw, NpgsqlWriteBuffer buf);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Npgsql.Internal.TypeHandlers.NumericHandlers.SingleHandler : NpgsqlSimpleTypeHandler`1<float> {
    public SingleHandler(PostgresType pgType);
    public virtual float Read(NpgsqlReadBuffer buf, int len, FieldDescription fieldDescription);
    private sealed virtual override double Npgsql.Internal.TypeHandling.INpgsqlSimpleTypeHandler<System.Double>.Read(NpgsqlReadBuffer buf, int len, FieldDescription fieldDescription);
    [NullableContextAttribute("2")]
public sealed virtual int ValidateAndGetLength(double value, NpgsqlParameter parameter);
    [NullableContextAttribute("2")]
public virtual int ValidateAndGetLength(float value, NpgsqlParameter parameter);
    public sealed virtual void Write(double value, NpgsqlWriteBuffer buf, NpgsqlParameter parameter);
    public virtual void Write(float value, NpgsqlWriteBuffer buf, NpgsqlParameter parameter);
    [NullableContextAttribute("2")]
public virtual int ValidateObjectAndGetLength(object value, NpgsqlLengthCache& lengthCache, NpgsqlParameter parameter);
    [NullableContextAttribute("2")]
public virtual Task WriteObjectWithLength(object value, NpgsqlWriteBuffer buf, NpgsqlLengthCache lengthCache, NpgsqlParameter parameter, bool async, CancellationToken cancellationToken);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Npgsql.Internal.TypeHandlers.NumericHandlers.UInt32Handler : NpgsqlSimpleTypeHandler`1<UInt32> {
    public UInt32Handler(PostgresType pgType);
    public virtual UInt32 Read(NpgsqlReadBuffer buf, int len, FieldDescription fieldDescription);
    [NullableContextAttribute("2")]
public virtual int ValidateAndGetLength(UInt32 value, NpgsqlParameter parameter);
    public virtual void Write(UInt32 value, NpgsqlWriteBuffer buf, NpgsqlParameter parameter);
    [NullableContextAttribute("2")]
public virtual int ValidateObjectAndGetLength(object value, NpgsqlLengthCache& lengthCache, NpgsqlParameter parameter);
    [NullableContextAttribute("2")]
public virtual Task WriteObjectWithLength(object value, NpgsqlWriteBuffer buf, NpgsqlLengthCache lengthCache, NpgsqlParameter parameter, bool async, CancellationToken cancellationToken);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Npgsql.Internal.TypeHandlers.NumericHandlers.UInt64Handler : NpgsqlSimpleTypeHandler`1<ulong> {
    public UInt64Handler(PostgresType pgType);
    public virtual ulong Read(NpgsqlReadBuffer buf, int len, FieldDescription fieldDescription);
    [NullableContextAttribute("2")]
public virtual int ValidateAndGetLength(ulong value, NpgsqlParameter parameter);
    public virtual void Write(ulong value, NpgsqlWriteBuffer buf, NpgsqlParameter parameter);
    [NullableContextAttribute("2")]
public virtual int ValidateObjectAndGetLength(object value, NpgsqlLengthCache& lengthCache, NpgsqlParameter parameter);
    [NullableContextAttribute("2")]
public virtual Task WriteObjectWithLength(object value, NpgsqlWriteBuffer buf, NpgsqlLengthCache lengthCache, NpgsqlParameter parameter, bool async, CancellationToken cancellationToken);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Npgsql.Internal.TypeHandlers.RangeHandler`1 : NpgsqlTypeHandler {
    [CompilerGeneratedAttribute]
private NpgsqlTypeHandler <SubtypeHandler>k__BackingField;
    protected NpgsqlTypeHandler SubtypeHandler { get; }
    public RangeHandler`1(PostgresType rangePostgresType, NpgsqlTypeHandler subtypeHandler);
    [CompilerGeneratedAttribute]
protected NpgsqlTypeHandler get_SubtypeHandler();
    public virtual Type GetFieldType(FieldDescription fieldDescription);
    public virtual Type GetProviderSpecificFieldType(FieldDescription fieldDescription);
    public virtual NpgsqlTypeHandler CreateArrayHandler(PostgresArrayType pgArrayType, ArrayNullabilityMode arrayNullabilityMode);
    public virtual NpgsqlTypeHandler CreateRangeHandler(PostgresType pgRangeType);
    public virtual NpgsqlTypeHandler CreateMultirangeHandler(PostgresMultirangeType pgMultirangeType);
    public sealed virtual ValueTask`1<NpgsqlRange`1<TSubtype>> Read(NpgsqlReadBuffer buf, int len, bool async, FieldDescription fieldDescription);
    [NullableContextAttribute("2")]
[AsyncStateMachineAttribute("Npgsql.Internal.TypeHandlers.RangeHandler`1/<ReadRange>d__10`1")]
protected internal ValueTask`1<NpgsqlRange`1<TAnySubtype>> ReadRange(NpgsqlReadBuffer buf, int len, bool async, FieldDescription fieldDescription);
    [AsyncStateMachineAttribute("Npgsql.Internal.TypeHandlers.RangeHandler`1/<ReadAsObject>d__11")]
public virtual ValueTask`1<object> ReadAsObject(NpgsqlReadBuffer buf, int len, bool async, FieldDescription fieldDescription);
    [NullableContextAttribute("2")]
public sealed virtual int ValidateAndGetLength(NpgsqlRange`1<TSubtype> value, NpgsqlLengthCache& lengthCache, NpgsqlParameter parameter);
    [NullableContextAttribute("2")]
protected internal int ValidateAndGetLengthRange(NpgsqlRange`1<TAnySubtype> value, NpgsqlLengthCache& lengthCache, NpgsqlParameter parameter);
    public sealed virtual Task Write(NpgsqlRange`1<TSubtype> value, NpgsqlWriteBuffer buf, NpgsqlLengthCache lengthCache, NpgsqlParameter parameter, bool async, CancellationToken cancellationToken);
    [NullableContextAttribute("2")]
[AsyncStateMachineAttribute("Npgsql.Internal.TypeHandlers.RangeHandler`1/<WriteRange>d__15`1")]
protected internal Task WriteRange(NpgsqlRange`1<TAnySubtype> value, NpgsqlWriteBuffer buf, NpgsqlLengthCache lengthCache, NpgsqlParameter parameter, bool async, CancellationToken cancellationToken);
    [NullableContextAttribute("2")]
public virtual int ValidateObjectAndGetLength(object value, NpgsqlLengthCache& lengthCache, NpgsqlParameter parameter);
    [NullableContextAttribute("2")]
public virtual Task WriteObjectWithLength(object value, NpgsqlWriteBuffer buf, NpgsqlLengthCache lengthCache, NpgsqlParameter parameter, bool async, CancellationToken cancellationToken);
}
[NullableContextAttribute("2")]
[NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public class Npgsql.Internal.TypeHandlers.RangeHandler`2 : RangeHandler`1<TSubtype1> {
    [NullableContextAttribute("1")]
public RangeHandler`2(PostgresType rangePostgresType, NpgsqlTypeHandler subtypeHandler);
    [NullableContextAttribute("1")]
private sealed virtual override ValueTask`1<NpgsqlRange`1<TSubtype2>> Npgsql.Internal.TypeHandling.INpgsqlTypeHandler<NpgsqlTypes.NpgsqlRange<TSubtype2>>.Read(NpgsqlReadBuffer buf, int len, bool async, FieldDescription fieldDescription);
    public sealed virtual int ValidateAndGetLength(NpgsqlRange`1<TSubtype2> value, NpgsqlLengthCache& lengthCache, NpgsqlParameter parameter);
    [NullableContextAttribute("1")]
public sealed virtual Task Write(NpgsqlRange`1<TSubtype2> value, NpgsqlWriteBuffer buf, NpgsqlLengthCache lengthCache, NpgsqlParameter parameter, bool async, CancellationToken cancellationToken);
    public virtual int ValidateObjectAndGetLength(object value, NpgsqlLengthCache& lengthCache, NpgsqlParameter parameter);
    public virtual Task WriteObjectWithLength(object value, NpgsqlWriteBuffer buf, NpgsqlLengthCache lengthCache, NpgsqlParameter parameter, bool async, CancellationToken cancellationToken);
}
[NullableContextAttribute("1")]
[NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
internal class Npgsql.Internal.TypeHandlers.RecordHandler : NpgsqlTypeHandler`1<Object[]> {
    private TypeMapper _typeMapper;
    public RecordHandler(PostgresType postgresType, TypeMapper typeMapper);
    [NullableContextAttribute("2")]
[AsyncStateMachineAttribute("Npgsql.Internal.TypeHandlers.RecordHandler/<ReadCustom>d__2`1")]
protected internal virtual ValueTask`1<T> ReadCustom(NpgsqlReadBuffer buf, int len, bool async, FieldDescription fieldDescription);
    [AsyncStateMachineAttribute("Npgsql.Internal.TypeHandlers.RecordHandler/<ReadAsObject>d__3")]
public virtual ValueTask`1<object> ReadAsObject(NpgsqlReadBuffer buf, int len, bool async, FieldDescription fieldDescription);
    [AsyncStateMachineAttribute("Npgsql.Internal.TypeHandlers.RecordHandler/<Read>d__4")]
public virtual ValueTask`1<Object[]> Read(NpgsqlReadBuffer buf, int len, bool async, FieldDescription fieldDescription);
    public virtual NpgsqlTypeHandler CreateRangeHandler(PostgresType pgRangeType);
    public virtual NpgsqlTypeHandler CreateMultirangeHandler(PostgresMultirangeType pgMultirangeType);
    [NullableContextAttribute("2")]
public virtual int ValidateAndGetLength(Object[] value, NpgsqlLengthCache& lengthCache, NpgsqlParameter parameter);
    public virtual Task Write(Object[] value, NpgsqlWriteBuffer buf, NpgsqlLengthCache lengthCache, NpgsqlParameter parameter, bool async, CancellationToken cancellationToken);
    [NullableContextAttribute("2")]
public virtual int ValidateObjectAndGetLength(object value, NpgsqlLengthCache& lengthCache, NpgsqlParameter parameter);
    [NullableContextAttribute("2")]
public virtual Task WriteObjectWithLength(object value, NpgsqlWriteBuffer buf, NpgsqlLengthCache lengthCache, NpgsqlParameter parameter, bool async, CancellationToken cancellationToken);
    [NullableContextAttribute("0")]
[CompilerGeneratedAttribute]
[DebuggerHiddenAttribute]
private ValueTask`1<TAny> <>n__0(NpgsqlReadBuffer buf, int len, bool async, FieldDescription fieldDescription);
}
[NullableContextAttribute("1")]
[NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public class Npgsql.Internal.TypeHandlers.TextHandler : NpgsqlTypeHandler`1<string> {
    private Encoding _encoding;
    internal bool PreferTextWrite { get; }
    protected internal TextHandler(PostgresType postgresType, Encoding encoding);
    internal virtual bool get_PreferTextWrite();
    public virtual ValueTask`1<string> Read(NpgsqlReadBuffer buf, int byteLen, bool async, FieldDescription fieldDescription);
    [AsyncStateMachineAttribute("Npgsql.Internal.TypeHandlers.TextHandler/<Npgsql-Internal-TypeHandling-INpgsqlTypeHandler<System-Char[]>-Read>d__5")]
private sealed virtual override ValueTask`1<Char[]> Npgsql.Internal.TypeHandling.INpgsqlTypeHandler<System.Char[]>.Read(NpgsqlReadBuffer buf, int byteLen, bool async, FieldDescription fieldDescription);
    [NullableContextAttribute("0")]
[AsyncStateMachineAttribute("Npgsql.Internal.TypeHandlers.TextHandler/<Npgsql-Internal-TypeHandling-INpgsqlTypeHandler<System-Char>-Read>d__6")]
private sealed virtual override ValueTask`1<char> Npgsql.Internal.TypeHandling.INpgsqlTypeHandler<System.Char>.Read(NpgsqlReadBuffer buf, int len, bool async, FieldDescription fieldDescription);
    [NullableContextAttribute("0")]
private sealed virtual override ValueTask`1<ArraySegment`1<char>> Npgsql.Internal.TypeHandling.INpgsqlTypeHandler<System.ArraySegment<System.Char>>.Read(NpgsqlReadBuffer buf, int len, bool async, FieldDescription fieldDescription);
    private sealed virtual override ValueTask`1<Byte[]> Npgsql.Internal.TypeHandling.INpgsqlTypeHandler<System.Byte[]>.Read(NpgsqlReadBuffer buf, int byteLen, bool async, FieldDescription fieldDescription);
    [NullableContextAttribute("2")]
public virtual int ValidateAndGetLength(string value, NpgsqlLengthCache& lengthCache, NpgsqlParameter parameter);
    [NullableContextAttribute("2")]
public virtual int ValidateAndGetLength(Char[] value, NpgsqlLengthCache& lengthCache, NpgsqlParameter parameter);
    [NullableContextAttribute("2")]
public virtual int ValidateAndGetLength(ArraySegment`1<char> value, NpgsqlLengthCache& lengthCache, NpgsqlParameter parameter);
    [NullableContextAttribute("2")]
public sealed virtual int ValidateAndGetLength(char value, NpgsqlLengthCache& lengthCache, NpgsqlParameter parameter);
    [NullableContextAttribute("2")]
public sealed virtual int ValidateAndGetLength(Byte[] value, NpgsqlLengthCache& lengthCache, NpgsqlParameter parameter);
    public virtual Task Write(string value, NpgsqlWriteBuffer buf, NpgsqlLengthCache lengthCache, NpgsqlParameter parameter, bool async, CancellationToken cancellationToken);
    public virtual Task Write(Char[] value, NpgsqlWriteBuffer buf, NpgsqlLengthCache lengthCache, NpgsqlParameter parameter, bool async, CancellationToken cancellationToken);
    public virtual Task Write(ArraySegment`1<char> value, NpgsqlWriteBuffer buf, NpgsqlLengthCache lengthCache, NpgsqlParameter parameter, bool async, CancellationToken cancellationToken);
    private Task WriteString(string str, NpgsqlWriteBuffer buf, NpgsqlLengthCache lengthCache, NpgsqlParameter parameter, bool async, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Npgsql.Internal.TypeHandlers.TextHandler/<Write>d__18")]
public sealed virtual Task Write(char value, NpgsqlWriteBuffer buf, NpgsqlLengthCache lengthCache, NpgsqlParameter parameter, bool async, CancellationToken cancellationToken);
    public sealed virtual Task Write(Byte[] value, NpgsqlWriteBuffer buf, NpgsqlLengthCache lengthCache, NpgsqlParameter parameter, bool async, CancellationToken cancellationToken);
    public virtual TextReader GetTextReader(Stream stream, NpgsqlReadBuffer buffer);
    [NullableContextAttribute("2")]
public virtual int ValidateObjectAndGetLength(object value, NpgsqlLengthCache& lengthCache, NpgsqlParameter parameter);
    [NullableContextAttribute("2")]
public virtual Task WriteObjectWithLength(object value, NpgsqlWriteBuffer buf, NpgsqlLengthCache lengthCache, NpgsqlParameter parameter, bool async, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Npgsql.Internal.TypeHandlers.TextHandler/<<Read>g__ReadLong|4_0>d")]
[CompilerGeneratedAttribute]
internal static ValueTask`1<string> <Read>g__ReadLong|4_0(NpgsqlReadBuffer buf, int byteLen, bool async);
    [CompilerGeneratedAttribute]
internal static char <Npgsql.Internal.TypeHandling.INpgsqlTypeHandler<System.Char>.Read>g__ReadCharCore|6_0(<>c__DisplayClass6_0& );
    [AsyncStateMachineAttribute("Npgsql.Internal.TypeHandlers.TextHandler/<<Npgsql-Internal-TypeHandling-INpgsqlTypeHandler<System-Byte[]>-Read>g__ReadLong|8_0>d")]
[CompilerGeneratedAttribute]
internal static ValueTask`1<Byte[]> <Npgsql.Internal.TypeHandling.INpgsqlTypeHandler<System.Byte[]>.Read>g__ReadLong|8_0(NpgsqlReadBuffer buf, Byte[] bytes, int byteLen, bool async);
    [CompilerGeneratedAttribute]
internal static void <Write>g__WriteCharCore|18_0(char value, NpgsqlWriteBuffer buf);
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
internal class Npgsql.Internal.TypeHandlers.UnknownTypeHandler : TextHandler {
    [NullableContextAttribute("1")]
internal UnknownTypeHandler(Encoding encoding);
    [NullableContextAttribute("1")]
public virtual ValueTask`1<string> Read(NpgsqlReadBuffer buf, int byteLen, bool async, FieldDescription fieldDescription);
    protected internal virtual int ValidateAndGetLengthCustom(TAny value, NpgsqlLengthCache& lengthCache, NpgsqlParameter parameter);
    public virtual int ValidateObjectAndGetLength(object value, NpgsqlLengthCache& lengthCache, NpgsqlParameter parameter);
    public virtual Task WriteObjectWithLength(object value, NpgsqlWriteBuffer buf, NpgsqlLengthCache lengthCache, NpgsqlParameter parameter, bool async, CancellationToken cancellationToken);
    [NullableContextAttribute("1")]
[AsyncStateMachineAttribute("Npgsql.Internal.TypeHandlers.UnknownTypeHandler/<<WriteObjectWithLength>g__WriteWithLengthLong|4_0>d")]
[CompilerGeneratedAttribute]
private Task <WriteObjectWithLength>g__WriteWithLengthLong|4_0(object value, string convertedValue, NpgsqlWriteBuffer buf, NpgsqlLengthCache lengthCache, NpgsqlParameter parameter, bool async, CancellationToken cancellationToken);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Npgsql.Internal.TypeHandlers.UnmappedEnumHandler : TextHandler {
    private INpgsqlNameTranslator _nameTranslator;
    private ConcurrentDictionary`2<Type, TypeRecord> _types;
    internal UnmappedEnumHandler(PostgresEnumType pgType, INpgsqlNameTranslator nameTranslator, Encoding encoding);
    [NullableContextAttribute("2")]
[AsyncStateMachineAttribute("Npgsql.Internal.TypeHandlers.UnmappedEnumHandler/<ReadCustom>d__3`1")]
protected internal virtual ValueTask`1<TAny> ReadCustom(NpgsqlReadBuffer buf, int len, bool async, FieldDescription fieldDescription);
    public virtual ValueTask`1<string> Read(NpgsqlReadBuffer buf, int len, bool async, FieldDescription fieldDescription);
    [NullableContextAttribute("2")]
public virtual int ValidateObjectAndGetLength(object value, NpgsqlLengthCache& lengthCache, NpgsqlParameter parameter);
    [NullableContextAttribute("2")]
protected internal virtual int ValidateAndGetLengthCustom(TAny value, NpgsqlLengthCache& lengthCache, NpgsqlParameter parameter);
    [NullableContextAttribute("2")]
[UnconditionalSuppressMessageAttribute("Unmapped enums currently aren't trimming-safe.", "IL2072")]
private int ValidateAndGetLength(object value, NpgsqlLengthCache& lengthCache, NpgsqlParameter parameter);
    protected virtual Task WriteWithLengthCustom(TAny value, NpgsqlWriteBuffer buf, NpgsqlLengthCache lengthCache, NpgsqlParameter parameter, bool async, CancellationToken cancellationToken);
    [NullableContextAttribute("2")]
public virtual Task WriteObjectWithLength(object value, NpgsqlWriteBuffer buf, NpgsqlLengthCache lengthCache, NpgsqlParameter parameter, bool async, CancellationToken cancellationToken);
    [UnconditionalSuppressMessageAttribute("Unmapped enums currently aren't trimming-safe.", "IL2072")]
internal Task Write(object value, NpgsqlWriteBuffer buf, NpgsqlLengthCache lengthCache, NpgsqlParameter parameter, bool async, CancellationToken cancellationToken);
    private TypeRecord GetTypeRecord(Type type);
    private static TypeRecord CreateTypeRecord(Type type, INpgsqlNameTranslator nameTranslator);
    [CompilerGeneratedAttribute]
[DebuggerHiddenAttribute]
private ValueTask`1<string> <>n__0(NpgsqlReadBuffer buf, int byteLen, bool async, FieldDescription fieldDescription);
    [AsyncStateMachineAttribute("Npgsql.Internal.TypeHandlers.UnmappedEnumHandler/<<WriteObjectWithLength>g__WriteWithLengthLong|9_0>d")]
[CompilerGeneratedAttribute]
private Task <WriteObjectWithLength>g__WriteWithLengthLong|9_0(object value, NpgsqlWriteBuffer buf, NpgsqlLengthCache lengthCache, NpgsqlParameter parameter, bool async, CancellationToken cancellationToken);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Npgsql.Internal.TypeHandlers.UuidHandler : NpgsqlSimpleTypeHandler`1<Guid> {
    public UuidHandler(PostgresType pgType);
    public virtual Guid Read(NpgsqlReadBuffer buf, int len, FieldDescription fieldDescription);
    [NullableContextAttribute("2")]
public virtual int ValidateAndGetLength(Guid value, NpgsqlParameter parameter);
    public virtual void Write(Guid value, NpgsqlWriteBuffer buf, NpgsqlParameter parameter);
    [NullableContextAttribute("2")]
public virtual int ValidateObjectAndGetLength(object value, NpgsqlLengthCache& lengthCache, NpgsqlParameter parameter);
    [NullableContextAttribute("2")]
public virtual Task WriteObjectWithLength(object value, NpgsqlWriteBuffer buf, NpgsqlLengthCache lengthCache, NpgsqlParameter parameter, bool async, CancellationToken cancellationToken);
}
[NullableContextAttribute("1")]
[NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
internal class Npgsql.Internal.TypeHandlers.VoidHandler : NpgsqlSimpleTypeHandler`1<DBNull> {
    public VoidHandler(PostgresType pgType);
    public virtual DBNull Read(NpgsqlReadBuffer buf, int len, FieldDescription fieldDescription);
    public virtual int ValidateAndGetLength(DBNull value, NpgsqlParameter parameter);
    public virtual void Write(DBNull value, NpgsqlWriteBuffer buf, NpgsqlParameter parameter);
    [NullableContextAttribute("2")]
public virtual int ValidateObjectAndGetLength(object value, NpgsqlLengthCache& lengthCache, NpgsqlParameter parameter);
    [NullableContextAttribute("2")]
public virtual Task WriteObjectWithLength(object value, NpgsqlWriteBuffer buf, NpgsqlLengthCache lengthCache, NpgsqlParameter parameter, bool async, CancellationToken cancellationToken);
}
[NullableContextAttribute("1")]
public interface Npgsql.Internal.TypeHandling.INpgsqlSimpleTypeHandler`1 {
    public abstract virtual T Read(NpgsqlReadBuffer buf, int len, FieldDescription fieldDescription);
    public abstract virtual int ValidateAndGetLength(T value, NpgsqlParameter parameter);
    public abstract virtual void Write(T value, NpgsqlWriteBuffer buf, NpgsqlParameter parameter);
}
[NullableContextAttribute("1")]
public interface Npgsql.Internal.TypeHandling.INpgsqlTypeHandler`1 {
    public abstract virtual ValueTask`1<T> Read(NpgsqlReadBuffer buf, int len, bool async, FieldDescription fieldDescription);
    [NullableContextAttribute("2")]
public abstract virtual int ValidateAndGetLength(T value, NpgsqlLengthCache& lengthCache, NpgsqlParameter parameter);
    public abstract virtual Task Write(T value, NpgsqlWriteBuffer buf, NpgsqlLengthCache lengthCache, NpgsqlParameter parameter, bool async, CancellationToken cancellationToken);
}
[NullableContextAttribute("1")]
internal interface Npgsql.Internal.TypeHandling.ITextReaderHandler {
    public abstract virtual TextReader GetTextReader(Stream stream, NpgsqlReadBuffer buffer);
}
public class Npgsql.Internal.TypeHandling.NpgsqlLengthCache : object {
    public bool IsPopulated;
    public int Position;
    [NullableAttribute("1")]
public List`1<int> Lengths;
    public NpgsqlLengthCache(int capacity);
    public int Set(int len);
    public int Get();
    internal int GetLast();
    internal void Rewind();
    internal void Clear();
}
[NullableContextAttribute("1")]
[NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public abstract class Npgsql.Internal.TypeHandling.NpgsqlSimpleTypeHandler`1 : NpgsqlTypeHandler`1<TDefault> {
    protected NpgsqlSimpleTypeHandler`1(PostgresType postgresType);
    public abstract virtual TDefault Read(NpgsqlReadBuffer buf, int len, FieldDescription fieldDescription);
    public sealed virtual ValueTask`1<TDefault> Read(NpgsqlReadBuffer buf, int len, bool async, FieldDescription fieldDescription);
    public abstract virtual int ValidateAndGetLength(TDefault value, NpgsqlParameter parameter);
    public abstract virtual void Write(TDefault value, NpgsqlWriteBuffer buf, NpgsqlParameter parameter);
    public sealed virtual Task Write(TDefault value, NpgsqlWriteBuffer buf, NpgsqlLengthCache lengthCache, NpgsqlParameter parameter, bool async, CancellationToken cancellationToken);
    [NullableContextAttribute("2")]
public sealed virtual int ValidateAndGetLength(TDefault value, NpgsqlLengthCache& lengthCache, NpgsqlParameter parameter);
}
[NullableContextAttribute("1")]
[NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public abstract class Npgsql.Internal.TypeHandling.NpgsqlSimpleTypeHandlerWithPsv`2 : NpgsqlSimpleTypeHandler`1<TDefault> {
    public NpgsqlSimpleTypeHandlerWithPsv`2(PostgresType pgType);
    protected abstract virtual TPsv ReadPsv(NpgsqlReadBuffer buf, int len, FieldDescription fieldDescription);
    private sealed virtual override TPsv Npgsql.Internal.TypeHandling.INpgsqlSimpleTypeHandler<TPsv>.Read(NpgsqlReadBuffer buf, int len, FieldDescription fieldDescription);
    internal virtual object ReadPsvAsObject(NpgsqlReadBuffer buf, int len, FieldDescription fieldDescription);
    [AsyncStateMachineAttribute("Npgsql.Internal.TypeHandling.NpgsqlSimpleTypeHandlerWithPsv`2/<ReadPsvAsObject>d__4")]
internal virtual ValueTask`1<object> ReadPsvAsObject(NpgsqlReadBuffer buf, int len, bool async, FieldDescription fieldDescription);
    public abstract virtual int ValidateAndGetLength(TPsv value, NpgsqlParameter parameter);
    public abstract virtual void Write(TPsv value, NpgsqlWriteBuffer buf, NpgsqlParameter parameter);
    public virtual Type GetProviderSpecificFieldType(FieldDescription fieldDescription);
    public virtual NpgsqlTypeHandler CreateArrayHandler(PostgresArrayType pgArrayType, ArrayNullabilityMode arrayNullabilityMode);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public abstract class Npgsql.Internal.TypeHandling.NpgsqlTypeHandler : object {
    [CompilerGeneratedAttribute]
private PostgresType <PostgresType>k__BackingField;
    public PostgresType PostgresType { get; }
    internal bool PreferTextWrite { get; }
    internal string PgDisplayName { get; }
    protected NpgsqlTypeHandler(PostgresType postgresType);
    [CompilerGeneratedAttribute]
public PostgresType get_PostgresType();
    [NullableContextAttribute("2")]
[AsyncStateMachineAttribute("Npgsql.Internal.TypeHandling.NpgsqlTypeHandler/<Read>d__4`1")]
protected internal ValueTask`1<TAny> Read(NpgsqlReadBuffer buf, int len, bool async, FieldDescription fieldDescription);
    public TAny Read(NpgsqlReadBuffer buf, int len, FieldDescription fieldDescription);
    [NullableContextAttribute("2")]
protected internal virtual ValueTask`1<TAny> ReadCustom(NpgsqlReadBuffer buf, int len, bool async, FieldDescription fieldDescription);
    public abstract virtual ValueTask`1<object> ReadAsObject(NpgsqlReadBuffer buf, int len, bool async, FieldDescription fieldDescription);
    internal object ReadAsObject(NpgsqlReadBuffer buf, int len, FieldDescription fieldDescription);
    internal virtual ValueTask`1<object> ReadPsvAsObject(NpgsqlReadBuffer buf, int len, bool async, FieldDescription fieldDescription);
    internal virtual object ReadPsvAsObject(NpgsqlReadBuffer buf, int len, FieldDescription fieldDescription);
    [NullableContextAttribute("2")]
[AsyncStateMachineAttribute("Npgsql.Internal.TypeHandling.NpgsqlTypeHandler/<ReadWithLength>d__11`1")]
internal ValueTask`1<TAny> ReadWithLength(NpgsqlReadBuffer buf, bool async, FieldDescription fieldDescription);
    [NullableContextAttribute("2")]
protected internal int ValidateAndGetLength(TAny value, NpgsqlLengthCache& lengthCache, NpgsqlParameter parameter);
    [NullableContextAttribute("2")]
protected internal virtual int ValidateAndGetLengthCustom(TAny value, NpgsqlLengthCache& lengthCache, NpgsqlParameter parameter);
    [NullableContextAttribute("2")]
[AsyncStateMachineAttribute("Npgsql.Internal.TypeHandling.NpgsqlTypeHandler/<WriteWithLength>d__14`1")]
public Task WriteWithLength(TAny value, NpgsqlWriteBuffer buf, NpgsqlLengthCache lengthCache, NpgsqlParameter parameter, bool async, CancellationToken cancellationToken);
    protected virtual Task WriteWithLengthCustom(TAny value, NpgsqlWriteBuffer buf, NpgsqlLengthCache lengthCache, NpgsqlParameter parameter, bool async, CancellationToken cancellationToken);
    [NullableContextAttribute("2")]
public abstract virtual int ValidateObjectAndGetLength(object value, NpgsqlLengthCache& lengthCache, NpgsqlParameter parameter);
    [NullableContextAttribute("2")]
public abstract virtual Task WriteObjectWithLength(object value, NpgsqlWriteBuffer buf, NpgsqlLengthCache lengthCache, NpgsqlParameter parameter, bool async, CancellationToken cancellationToken);
    public abstract virtual Type GetFieldType(FieldDescription fieldDescription);
    public abstract virtual Type GetProviderSpecificFieldType(FieldDescription fieldDescription);
    internal virtual bool get_PreferTextWrite();
    public abstract virtual NpgsqlTypeHandler CreateArrayHandler(PostgresArrayType pgArrayType, ArrayNullabilityMode arrayNullabilityMode);
    public abstract virtual NpgsqlTypeHandler CreateRangeHandler(PostgresType pgRangeType);
    public abstract virtual NpgsqlTypeHandler CreateMultirangeHandler(PostgresMultirangeType pgMultirangeType);
    protected Exception CreateConversionButNoParamException(Type clrType);
    internal string get_PgDisplayName();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public abstract class Npgsql.Internal.TypeHandling.NpgsqlTypeHandler`1 : NpgsqlTypeHandler {
    protected NpgsqlTypeHandler`1(PostgresType postgresType);
    public abstract virtual ValueTask`1<TDefault> Read(NpgsqlReadBuffer buf, int len, bool async, FieldDescription fieldDescription);
    [AsyncStateMachineAttribute("Npgsql.Internal.TypeHandling.NpgsqlTypeHandler`1/<ReadAsObject>d__2")]
public virtual ValueTask`1<object> ReadAsObject(NpgsqlReadBuffer buf, int len, bool async, FieldDescription fieldDescription);
    [NullableContextAttribute("2")]
public abstract virtual int ValidateAndGetLength(TDefault value, NpgsqlLengthCache& lengthCache, NpgsqlParameter parameter);
    public abstract virtual Task Write(TDefault value, NpgsqlWriteBuffer buf, NpgsqlLengthCache lengthCache, NpgsqlParameter parameter, bool async, CancellationToken cancellationToken);
    public virtual Type GetFieldType(FieldDescription fieldDescription);
    public virtual Type GetProviderSpecificFieldType(FieldDescription fieldDescription);
    public virtual NpgsqlTypeHandler CreateArrayHandler(PostgresArrayType pgArrayType, ArrayNullabilityMode arrayNullabilityMode);
    public virtual NpgsqlTypeHandler CreateRangeHandler(PostgresType pgRangeType);
    public virtual NpgsqlTypeHandler CreateMultirangeHandler(PostgresMultirangeType pgMultirangeType);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal static class Npgsql.Internal.TypeHandling.NullableHandler : object {
    internal static MethodInfo ReadMethod;
    internal static MethodInfo ReadAsyncMethod;
    internal static MethodInfo ValidateMethod;
    internal static MethodInfo WriteAsyncMethod;
    private static NullableHandler();
    [NullableContextAttribute("0")]
private static Nullable`1<T> Read(NpgsqlTypeHandler handler, NpgsqlReadBuffer buffer, int columnLength, FieldDescription fieldDescription);
    [NullableContextAttribute("0")]
[AsyncStateMachineAttribute("Npgsql.Internal.TypeHandling.NullableHandler/<ReadAsync>d__5`1")]
private static ValueTask`1<Nullable`1<T>> ReadAsync(NpgsqlTypeHandler handler, NpgsqlReadBuffer buffer, int columnLength, bool async, FieldDescription fieldDescription);
    [NullableContextAttribute("0")]
private static int ValidateAndGetLength(NpgsqlTypeHandler handler, Nullable`1<T> value, NpgsqlLengthCache& lengthCache, NpgsqlParameter parameter);
    private static Task WriteAsync(NpgsqlTypeHandler handler, Nullable`1<T> value, NpgsqlWriteBuffer buffer, NpgsqlLengthCache lengthCache, NpgsqlParameter parameter, bool async, CancellationToken cancellationToken);
    internal static TDelegate CreateDelegate(Type underlyingType, MethodInfo method);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal static class Npgsql.Internal.TypeHandling.NullableHandler`1 : object {
    [NullableAttribute("2")]
public static Type UnderlyingType;
    public static ReadDelegate`1<T> Read;
    public static ReadAsyncDelegate`1<T> ReadAsync;
    public static ValidateAndGetLengthDelegate`1<T> ValidateAndGetLength;
    public static WriteAsyncDelegate`1<T> WriteAsync;
    public static bool Exists { get; }
    private static NullableHandler`1();
    public static bool get_Exists();
}
internal class Npgsql.Internal.TypeHandling.ReadAsyncDelegate`1 : MulticastDelegate {
    public ReadAsyncDelegate`1(object object, IntPtr method);
    [NullableContextAttribute("1")]
public virtual ValueTask`1<T> Invoke(NpgsqlTypeHandler handler, NpgsqlReadBuffer buffer, int columnLen, bool async, FieldDescription fieldDescription);
    public virtual IAsyncResult BeginInvoke(NpgsqlTypeHandler handler, NpgsqlReadBuffer buffer, int columnLen, bool async, FieldDescription fieldDescription, AsyncCallback callback, object object);
    public virtual ValueTask`1<T> EndInvoke(IAsyncResult result);
}
internal class Npgsql.Internal.TypeHandling.ReadDelegate`1 : MulticastDelegate {
    public ReadDelegate`1(object object, IntPtr method);
    [NullableContextAttribute("1")]
public virtual T Invoke(NpgsqlTypeHandler handler, NpgsqlReadBuffer buffer, int columnLength, FieldDescription fieldDescription);
    public virtual IAsyncResult BeginInvoke(NpgsqlTypeHandler handler, NpgsqlReadBuffer buffer, int columnLength, FieldDescription fieldDescription, AsyncCallback callback, object object);
    public virtual T EndInvoke(IAsyncResult result);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public abstract class Npgsql.Internal.TypeHandling.TypeHandlerResolver : object {
    public abstract virtual NpgsqlTypeHandler ResolveByDataTypeName(string typeName);
    public abstract virtual NpgsqlTypeHandler ResolveByClrType(Type type);
    public virtual NpgsqlTypeHandler ResolveValueDependentValue(object value);
    [NullableContextAttribute("2")]
public virtual NpgsqlTypeHandler ResolveValueTypeGenerically(T value);
    public abstract virtual TypeMappingInfo GetMappingByDataTypeName(string dataTypeName);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public abstract class Npgsql.Internal.TypeHandling.TypeHandlerResolverFactory : object {
    public abstract virtual TypeHandlerResolver Create(NpgsqlConnector connector);
    public abstract virtual string GetDataTypeNameByClrType(Type clrType);
    public virtual string GetDataTypeNameByValueDependentValue(object value);
    public abstract virtual TypeMappingInfo GetMappingByDataTypeName(string dataTypeName);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ExtensionAttribute]
internal static class Npgsql.Internal.TypeHandling.TypeHandlerResolverFactoryExtensions : object {
    [ExtensionAttribute]
internal static TypeMappingInfo GetMappingByClrType(TypeHandlerResolverFactory factory, Type clrType);
    [ExtensionAttribute]
internal static TypeMappingInfo GetMappingByValueDependentValue(TypeHandlerResolverFactory factory, object value);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Npgsql.Internal.TypeHandling.TypeMappingInfo : object {
    [CompilerGeneratedAttribute]
private Nullable`1<NpgsqlDbType> <NpgsqlDbType>k__BackingField;
    [NullableAttribute("2")]
[CompilerGeneratedAttribute]
private string <DataTypeName>k__BackingField;
    [CompilerGeneratedAttribute]
private Type[] <ClrTypes>k__BackingField;
    public Nullable`1<NpgsqlDbType> NpgsqlDbType { get; }
    public DbType DbType { get; }
    [NullableAttribute("2")]
public string DataTypeName { get; }
    public Type[] ClrTypes { get; }
    public TypeMappingInfo(Nullable`1<NpgsqlDbType> npgsqlDbType, string dataTypeName, Type clrType);
    public TypeMappingInfo(Nullable`1<NpgsqlDbType> npgsqlDbType, string dataTypeName, Type[] clrTypes);
    [CompilerGeneratedAttribute]
public Nullable`1<NpgsqlDbType> get_NpgsqlDbType();
    public DbType get_DbType();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public string get_DataTypeName();
    [CompilerGeneratedAttribute]
public Type[] get_ClrTypes();
}
internal class Npgsql.Internal.TypeHandling.ValidateAndGetLengthDelegate`1 : MulticastDelegate {
    public ValidateAndGetLengthDelegate`1(object object, IntPtr method);
    [NullableContextAttribute("1")]
public virtual int Invoke(NpgsqlTypeHandler handler, T value, NpgsqlLengthCache& lengthCache, NpgsqlParameter parameter);
    public virtual IAsyncResult BeginInvoke(NpgsqlTypeHandler handler, T value, NpgsqlLengthCache& lengthCache, NpgsqlParameter parameter, AsyncCallback callback, object object);
    public virtual int EndInvoke(NpgsqlLengthCache& lengthCache, IAsyncResult result);
}
internal class Npgsql.Internal.TypeHandling.WriteAsyncDelegate`1 : MulticastDelegate {
    public WriteAsyncDelegate`1(object object, IntPtr method);
    [NullableContextAttribute("1")]
public virtual Task Invoke(NpgsqlTypeHandler handler, T value, NpgsqlWriteBuffer buffer, NpgsqlLengthCache lengthCache, NpgsqlParameter parameter, bool async, CancellationToken cancellationToken);
    public virtual IAsyncResult BeginInvoke(NpgsqlTypeHandler handler, T value, NpgsqlWriteBuffer buffer, NpgsqlLengthCache lengthCache, NpgsqlParameter parameter, bool async, CancellationToken cancellationToken, AsyncCallback callback, object object);
    public virtual Task EndInvoke(IAsyncResult result);
}
[NullableContextAttribute("1")]
public interface Npgsql.Internal.TypeMapping.IUserCompositeTypeMapping {
    public INpgsqlNameTranslator NameTranslator { get; }
    public abstract virtual INpgsqlNameTranslator get_NameTranslator();
}
[NullableContextAttribute("1")]
public interface Npgsql.Internal.TypeMapping.IUserEnumTypeMapping {
    public INpgsqlNameTranslator NameTranslator { get; }
    public abstract virtual INpgsqlNameTranslator get_NameTranslator();
}
[NullableContextAttribute("1")]
public interface Npgsql.Internal.TypeMapping.IUserTypeMapping {
    public string PgTypeName { get; }
    public Type ClrType { get; }
    public abstract virtual string get_PgTypeName();
    public abstract virtual Type get_ClrType();
    public abstract virtual NpgsqlTypeHandler CreateHandler(PostgresType pgType, NpgsqlConnector connector);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Npgsql.Internal.TypeMapping.UserCompositeTypeMapping`1 : object {
    [CompilerGeneratedAttribute]
private string <PgTypeName>k__BackingField;
    [CompilerGeneratedAttribute]
private INpgsqlNameTranslator <NameTranslator>k__BackingField;
    public string PgTypeName { get; }
    public Type ClrType { get; }
    public INpgsqlNameTranslator NameTranslator { get; }
    public UserCompositeTypeMapping`1(string pgTypeName, INpgsqlNameTranslator nameTranslator);
    [CompilerGeneratedAttribute]
public sealed virtual string get_PgTypeName();
    public sealed virtual Type get_ClrType();
    [CompilerGeneratedAttribute]
public sealed virtual INpgsqlNameTranslator get_NameTranslator();
    public sealed virtual NpgsqlTypeHandler CreateHandler(PostgresType pgType, NpgsqlConnector connector);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Npgsql.Internal.TypeMapping.UserEnumTypeMapping`1 : object {
    [CompilerGeneratedAttribute]
private string <PgTypeName>k__BackingField;
    [CompilerGeneratedAttribute]
private INpgsqlNameTranslator <NameTranslator>k__BackingField;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private Dictionary`2<TEnum, string> _enumToLabel;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private Dictionary`2<string, TEnum> _labelToEnum;
    public string PgTypeName { get; }
    public Type ClrType { get; }
    public INpgsqlNameTranslator NameTranslator { get; }
    public UserEnumTypeMapping`1(string pgTypeName, INpgsqlNameTranslator nameTranslator);
    [CompilerGeneratedAttribute]
public sealed virtual string get_PgTypeName();
    public sealed virtual Type get_ClrType();
    [CompilerGeneratedAttribute]
public sealed virtual INpgsqlNameTranslator get_NameTranslator();
    public sealed virtual NpgsqlTypeHandler CreateHandler(PostgresType postgresType, NpgsqlConnector connector);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Npgsql.KerberosUsernameProvider : object {
    private static bool _performedDetection;
    [NullableAttribute("2")]
private static string _principalWithRealm;
    [NullableAttribute("2")]
private static string _principalWithoutRealm;
    internal static ValueTask`1<string> GetUsernameAsync(bool includeRealm, ILogger connectionLogger, bool async, CancellationToken cancellationToken);
    private static string ParseKListOutput(string line, bool includeRealm, ILogger connectionLogger);
    private static string FindInPath(string name);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal static class Npgsql.LogMessages : object {
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[GeneratedCodeAttribute("Microsoft.Extensions.Logging.Generators", "6.0.5.2210")]
private static Action`2<ILogger, Exception> __CaughtUserExceptionInNoticeEventHandlerCallback;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[GeneratedCodeAttribute("Microsoft.Extensions.Logging.Generators", "6.0.5.2210")]
private static Action`2<ILogger, Exception> __CaughtUserExceptionInNotificationEventHandlerCallback;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[GeneratedCodeAttribute("Microsoft.Extensions.Logging.Generators", "6.0.5.2210")]
private static Action`2<ILogger, Exception> __ExceptionWhenOpeningConnectionForMultiplexingCallback;
    private static LogMessages();
    [LoggerMessageAttribute]
[GeneratedCodeAttribute("Microsoft.Extensions.Logging.Generators", "6.0.5.2210")]
internal static void OpeningConnection(ILogger logger, string Host, int Port, string Database, string ConnectionString);
    [LoggerMessageAttribute]
[GeneratedCodeAttribute("Microsoft.Extensions.Logging.Generators", "6.0.5.2210")]
internal static void OpenedConnection(ILogger logger, string Host, int Port, string Database, string ConnectionString, int ConnectorId);
    [LoggerMessageAttribute]
[GeneratedCodeAttribute("Microsoft.Extensions.Logging.Generators", "6.0.5.2210")]
internal static void OpenedMultiplexingConnection(ILogger logger, string Host, int Port, string Database, string ConnectionString);
    [LoggerMessageAttribute]
[GeneratedCodeAttribute("Microsoft.Extensions.Logging.Generators", "6.0.5.2210")]
internal static void ClosingConnection(ILogger logger, string Host, int Port, string Database, string ConnectionString, int ConnectorId);
    [LoggerMessageAttribute]
[GeneratedCodeAttribute("Microsoft.Extensions.Logging.Generators", "6.0.5.2210")]
internal static void ClosedConnection(ILogger logger, string Host, int Port, string Database, string ConnectionString, int ConnectorId);
    [LoggerMessageAttribute]
[GeneratedCodeAttribute("Microsoft.Extensions.Logging.Generators", "6.0.5.2210")]
internal static void ClosedMultiplexingConnection(ILogger logger, string Host, int Port, string Database, string ConnectionString);
    [LoggerMessageAttribute]
[GeneratedCodeAttribute("Microsoft.Extensions.Logging.Generators", "6.0.5.2210")]
internal static void OpeningPhysicalConnection(ILogger logger, string Host, int Port, string Database, string ConnectionString);
    [LoggerMessageAttribute]
[GeneratedCodeAttribute("Microsoft.Extensions.Logging.Generators", "6.0.5.2210")]
internal static void OpenedPhysicalConnection(ILogger logger, string Host, int Port, string Database, string ConnectionString, long DurationMs, int ConnectorId);
    [LoggerMessageAttribute]
[GeneratedCodeAttribute("Microsoft.Extensions.Logging.Generators", "6.0.5.2210")]
internal static void ClosingPhysicalConnection(ILogger logger, string Host, int Port, string Database, string ConnectionString, int ConnectorId);
    [LoggerMessageAttribute]
[GeneratedCodeAttribute("Microsoft.Extensions.Logging.Generators", "6.0.5.2210")]
internal static void ClosedPhysicalConnection(ILogger logger, string Host, int Port, string Database, string ConnectionString, int ConnectorId);
    [LoggerMessageAttribute]
[GeneratedCodeAttribute("Microsoft.Extensions.Logging.Generators", "6.0.5.2210")]
internal static void StartingWait(ILogger logger, int TimeoutMs, int ConnectorId);
    [LoggerMessageAttribute]
[GeneratedCodeAttribute("Microsoft.Extensions.Logging.Generators", "6.0.5.2210")]
internal static void ReceivedNotice(ILogger logger, string NoticeText, int ConnectorId);
    [LoggerMessageAttribute]
[GeneratedCodeAttribute("Microsoft.Extensions.Logging.Generators", "6.0.5.2210")]
internal static void ConnectionExceededMaximumLifetime(ILogger logger, TimeSpan ConnectionMaximumLifeTime, int ConnectorId);
    [LoggerMessageAttribute]
[GeneratedCodeAttribute("Microsoft.Extensions.Logging.Generators", "6.0.5.2210")]
internal static void SendingKeepalive(ILogger logger, int ConnectorId);
    [LoggerMessageAttribute]
[GeneratedCodeAttribute("Microsoft.Extensions.Logging.Generators", "6.0.5.2210")]
internal static void CompletedKeepalive(ILogger logger, int ConnectorId);
    [LoggerMessageAttribute]
[GeneratedCodeAttribute("Microsoft.Extensions.Logging.Generators", "6.0.5.2210")]
internal static void KeepaliveFailed(ILogger logger, int ConnectorId, Exception exception);
    [LoggerMessageAttribute]
[GeneratedCodeAttribute("Microsoft.Extensions.Logging.Generators", "6.0.5.2210")]
internal static void BreakingConnection(ILogger logger, int ConnectorId, Exception exception);
    [LoggerMessageAttribute]
[GeneratedCodeAttribute("Microsoft.Extensions.Logging.Generators", "6.0.5.2210")]
internal static void CaughtUserExceptionInNoticeEventHandler(ILogger logger, Exception exception);
    [LoggerMessageAttribute]
[GeneratedCodeAttribute("Microsoft.Extensions.Logging.Generators", "6.0.5.2210")]
internal static void CaughtUserExceptionInNotificationEventHandler(ILogger logger, Exception exception);
    [LoggerMessageAttribute]
[GeneratedCodeAttribute("Microsoft.Extensions.Logging.Generators", "6.0.5.2210")]
internal static void ExceptionWhenClosingPhysicalConnection(ILogger logger, int ConnectorId, Exception exception);
    [LoggerMessageAttribute]
[GeneratedCodeAttribute("Microsoft.Extensions.Logging.Generators", "6.0.5.2210")]
internal static void ExceptionWhenOpeningConnectionForMultiplexing(ILogger logger, Exception exception);
    [LoggerMessageAttribute]
[GeneratedCodeAttribute("Microsoft.Extensions.Logging.Generators", "6.0.5.2210")]
internal static void StartUserAction(ILogger logger, int ConnectorId);
    [LoggerMessageAttribute]
[GeneratedCodeAttribute("Microsoft.Extensions.Logging.Generators", "6.0.5.2210")]
internal static void EndUserAction(ILogger logger, int ConnectorId);
    [LoggerMessageAttribute]
[GeneratedCodeAttribute("Microsoft.Extensions.Logging.Generators", "6.0.5.2210")]
internal static void ExecutingCommand(ILogger logger, string CommandText, int ConnectorId);
    [LoggerMessageAttribute]
[GeneratedCodeAttribute("Microsoft.Extensions.Logging.Generators", "6.0.5.2210")]
internal static void ExecutingCommandWithParameters(ILogger logger, string CommandText, IEnumerable`1<object> Parameters, int ConnectorId);
    [LoggerMessageAttribute]
[GeneratedCodeAttribute("Microsoft.Extensions.Logging.Generators", "6.0.5.2210")]
internal static void ExecutingBatch(ILogger logger, String[] BatchCommands, int ConnectorId);
    [LoggerMessageAttribute]
[GeneratedCodeAttribute("Microsoft.Extensions.Logging.Generators", "6.0.5.2210")]
internal static void ExecutingBatchWithParameters(ILogger logger, ValueTuple`2[] BatchCommands, int ConnectorId);
    [LoggerMessageAttribute]
[GeneratedCodeAttribute("Microsoft.Extensions.Logging.Generators", "6.0.5.2210")]
internal static void CommandExecutionCompleted(ILogger logger, string CommandText, long DurationMs, int ConnectorId);
    [LoggerMessageAttribute]
[GeneratedCodeAttribute("Microsoft.Extensions.Logging.Generators", "6.0.5.2210")]
internal static void CommandExecutionCompletedWithParameters(ILogger logger, string CommandText, IEnumerable`1<object> Parameters, long DurationMs, int ConnectorId);
    [LoggerMessageAttribute]
[GeneratedCodeAttribute("Microsoft.Extensions.Logging.Generators", "6.0.5.2210")]
internal static void BatchExecutionCompleted(ILogger logger, String[] BatchCommands, long DurationMs, int ConnectorId);
    [LoggerMessageAttribute]
[GeneratedCodeAttribute("Microsoft.Extensions.Logging.Generators", "6.0.5.2210")]
internal static void BatchExecutionCompletedWithParameters(ILogger logger, ValueTuple`2[] BatchCommands, long DurationMs, int ConnectorId);
    [LoggerMessageAttribute]
[GeneratedCodeAttribute("Microsoft.Extensions.Logging.Generators", "6.0.5.2210")]
internal static void CancellingCommand(ILogger logger, int ConnectorId);
    [LoggerMessageAttribute]
[GeneratedCodeAttribute("Microsoft.Extensions.Logging.Generators", "6.0.5.2210")]
internal static void ExecutingInternalCommand(ILogger logger, string CommandText, int ConnectorId);
    [LoggerMessageAttribute]
[GeneratedCodeAttribute("Microsoft.Extensions.Logging.Generators", "6.0.5.2210")]
internal static void PreparingCommandExplicitly(ILogger logger, string CommandText, int ConnectorId);
    [LoggerMessageAttribute]
[GeneratedCodeAttribute("Microsoft.Extensions.Logging.Generators", "6.0.5.2210")]
internal static void CommandPreparedExplicitly(ILogger logger, int ConnectorId);
    [LoggerMessageAttribute]
[GeneratedCodeAttribute("Microsoft.Extensions.Logging.Generators", "6.0.5.2210")]
internal static void AutoPreparingStatement(ILogger logger, string CommandText, int ConnectorId);
    [LoggerMessageAttribute]
[GeneratedCodeAttribute("Microsoft.Extensions.Logging.Generators", "6.0.5.2210")]
internal static void UnpreparingCommand(ILogger logger, int ConnectorId);
    [LoggerMessageAttribute]
[GeneratedCodeAttribute("Microsoft.Extensions.Logging.Generators", "6.0.5.2210")]
internal static void DerivingParameters(ILogger logger, string CommandText, int ConnectorId);
    [LoggerMessageAttribute]
[GeneratedCodeAttribute("Microsoft.Extensions.Logging.Generators", "6.0.5.2210")]
internal static void ExceptionWhenWritingMultiplexedCommands(ILogger logger, int ConnectorId, Exception exception);
    [LoggerMessageAttribute]
[GeneratedCodeAttribute("Microsoft.Extensions.Logging.Generators", "6.0.5.2210")]
internal static void ReaderCleanup(ILogger logger, int ConnectorId);
    [LoggerMessageAttribute]
[GeneratedCodeAttribute("Microsoft.Extensions.Logging.Generators", "6.0.5.2210")]
internal static void StartedTransaction(ILogger logger, IsolationLevel IsolationLevel, int ConnectorId);
    [LoggerMessageAttribute]
[GeneratedCodeAttribute("Microsoft.Extensions.Logging.Generators", "6.0.5.2210")]
internal static void CommittedTransaction(ILogger logger, int ConnectorId);
    [LoggerMessageAttribute]
[GeneratedCodeAttribute("Microsoft.Extensions.Logging.Generators", "6.0.5.2210")]
internal static void RolledBackTransaction(ILogger logger, int ConnectorId);
    [LoggerMessageAttribute]
[GeneratedCodeAttribute("Microsoft.Extensions.Logging.Generators", "6.0.5.2210")]
internal static void CreatingSavepoint(ILogger logger, string SavepointName, int ConnectorId);
    [LoggerMessageAttribute]
[GeneratedCodeAttribute("Microsoft.Extensions.Logging.Generators", "6.0.5.2210")]
internal static void RolledBackToSavepoint(ILogger logger, string SavepointName, int ConnectorId);
    [LoggerMessageAttribute]
[GeneratedCodeAttribute("Microsoft.Extensions.Logging.Generators", "6.0.5.2210")]
internal static void ReleasedSavepoint(ILogger logger, string SavepointName, int ConnectorId);
    [LoggerMessageAttribute]
[GeneratedCodeAttribute("Microsoft.Extensions.Logging.Generators", "6.0.5.2210")]
internal static void ExceptionDuringTransactionDispose(ILogger logger, int ConnectorId, Exception exception);
    [LoggerMessageAttribute]
[GeneratedCodeAttribute("Microsoft.Extensions.Logging.Generators", "6.0.5.2210")]
internal static void EnlistedVolatileResourceManager(ILogger logger, string LocalTransactionIdentifier, int ConnectorId);
    [LoggerMessageAttribute]
[GeneratedCodeAttribute("Microsoft.Extensions.Logging.Generators", "6.0.5.2210")]
internal static void CommittingSinglePhaseTransaction(ILogger logger, string LocalTransactionIdentifier, int ConnectorId);
    [LoggerMessageAttribute]
[GeneratedCodeAttribute("Microsoft.Extensions.Logging.Generators", "6.0.5.2210")]
internal static void RollingBackSinglePhaseTransaction(ILogger logger, string LocalTransactionIdentifier, int ConnectorId);
    [LoggerMessageAttribute]
[GeneratedCodeAttribute("Microsoft.Extensions.Logging.Generators", "6.0.5.2210")]
internal static void SinglePhaseTransactionRollbackFailed(ILogger logger, string LocalTransactionIdentifier, int ConnectorId);
    [LoggerMessageAttribute]
[GeneratedCodeAttribute("Microsoft.Extensions.Logging.Generators", "6.0.5.2210")]
internal static void PreparingTwoPhaseTransaction(ILogger logger, string LocalTransactionIdentifier, int ConnectorId);
    [LoggerMessageAttribute]
[GeneratedCodeAttribute("Microsoft.Extensions.Logging.Generators", "6.0.5.2210")]
internal static void CommittingTwoPhaseTransaction(ILogger logger, string LocalTransactionIdentifier, int ConnectorId);
    [LoggerMessageAttribute]
[GeneratedCodeAttribute("Microsoft.Extensions.Logging.Generators", "6.0.5.2210")]
internal static void TwoPhaseTransactionCommitFailed(ILogger logger, string LocalTransactionIdentifier, int ConnectorId, Exception exception);
    [LoggerMessageAttribute]
[GeneratedCodeAttribute("Microsoft.Extensions.Logging.Generators", "6.0.5.2210")]
internal static void RollingBackTwoPhaseTransaction(ILogger logger, string LocalTransactionIdentifier, int ConnectorId);
    [LoggerMessageAttribute]
[GeneratedCodeAttribute("Microsoft.Extensions.Logging.Generators", "6.0.5.2210")]
internal static void TwoPhaseTransactionRollbackFailed(ILogger logger, string LocalTransactionIdentifier, int ConnectorId, Exception exception);
    [LoggerMessageAttribute]
[GeneratedCodeAttribute("Microsoft.Extensions.Logging.Generators", "6.0.5.2210")]
internal static void TwoPhaseTransactionInDoubt(ILogger logger, string LocalTransactionIdentifier, int ConnectorId);
    [LoggerMessageAttribute]
[GeneratedCodeAttribute("Microsoft.Extensions.Logging.Generators", "6.0.5.2210")]
internal static void ConnectionInUseWhenRollingBack(ILogger logger, string LocalTransactionIdentifier, int ConnectorId);
    [LoggerMessageAttribute]
[GeneratedCodeAttribute("Microsoft.Extensions.Logging.Generators", "6.0.5.2210")]
internal static void CleaningUpResourceManager(ILogger logger, string LocalTransactionIdentifier, int ConnectorId);
    [LoggerMessageAttribute]
[GeneratedCodeAttribute("Microsoft.Extensions.Logging.Generators", "6.0.5.2210")]
internal static void StartingBinaryExport(ILogger logger, int ConnectorId);
    [LoggerMessageAttribute]
[GeneratedCodeAttribute("Microsoft.Extensions.Logging.Generators", "6.0.5.2210")]
internal static void StartingBinaryImport(ILogger logger, int ConnectorId);
    [LoggerMessageAttribute]
[GeneratedCodeAttribute("Microsoft.Extensions.Logging.Generators", "6.0.5.2210")]
internal static void StartingTextExport(ILogger logger, int ConnectorId);
    [LoggerMessageAttribute]
[GeneratedCodeAttribute("Microsoft.Extensions.Logging.Generators", "6.0.5.2210")]
internal static void StartingTextImport(ILogger logger, int ConnectorId);
    [LoggerMessageAttribute]
[GeneratedCodeAttribute("Microsoft.Extensions.Logging.Generators", "6.0.5.2210")]
internal static void StartingRawCopy(ILogger logger, int ConnectorId);
    [LoggerMessageAttribute]
[GeneratedCodeAttribute("Microsoft.Extensions.Logging.Generators", "6.0.5.2210")]
internal static void BinaryCopyOperationCompleted(ILogger logger, ulong Rows, int ConnectorId);
    [LoggerMessageAttribute]
[GeneratedCodeAttribute("Microsoft.Extensions.Logging.Generators", "6.0.5.2210")]
internal static void CopyOperationCompleted(ILogger logger, int ConnectorId);
    [LoggerMessageAttribute]
[GeneratedCodeAttribute("Microsoft.Extensions.Logging.Generators", "6.0.5.2210")]
internal static void CopyOperationCancelled(ILogger logger, int ConnectorId);
    [LoggerMessageAttribute]
[GeneratedCodeAttribute("Microsoft.Extensions.Logging.Generators", "6.0.5.2210")]
internal static void ExceptionWhenDisposingCopyOperation(ILogger logger, int ConnectorId, Exception exception);
    [LoggerMessageAttribute]
[GeneratedCodeAttribute("Microsoft.Extensions.Logging.Generators", "6.0.5.2210")]
internal static void CreatingReplicationSlot(ILogger logger, string SlotName, string CommandText, int ConnectorId);
    [LoggerMessageAttribute]
[GeneratedCodeAttribute("Microsoft.Extensions.Logging.Generators", "6.0.5.2210")]
internal static void DroppingReplicationSlot(ILogger logger, string SlotName, string CommandText, int ConnectorId);
    [LoggerMessageAttribute]
[GeneratedCodeAttribute("Microsoft.Extensions.Logging.Generators", "6.0.5.2210")]
internal static void StartingLogicalReplication(ILogger logger, string SlotName, string CommandText, int ConnectorId);
    [LoggerMessageAttribute]
[GeneratedCodeAttribute("Microsoft.Extensions.Logging.Generators", "6.0.5.2210")]
internal static void StartingPhysicalReplication(ILogger logger, string SlotName, string CommandText, int ConnectorId);
    [LoggerMessageAttribute]
[GeneratedCodeAttribute("Microsoft.Extensions.Logging.Generators", "6.0.5.2210")]
internal static void ExecutingReplicationCommand(ILogger logger, string CommandText, int ConnectorId);
    [LoggerMessageAttribute]
[GeneratedCodeAttribute("Microsoft.Extensions.Logging.Generators", "6.0.5.2210")]
internal static void ReceivedReplicationPrimaryKeepalive(ILogger logger, NpgsqlLogSequenceNumber EndLsn, DateTime Timestamp, int ConnectorId);
    [LoggerMessageAttribute]
[GeneratedCodeAttribute("Microsoft.Extensions.Logging.Generators", "6.0.5.2210")]
internal static void SendingReplicationStandbyStatusUpdate(ILogger logger, string Reason, int ConnectorId);
    [LoggerMessageAttribute]
[GeneratedCodeAttribute("Microsoft.Extensions.Logging.Generators", "6.0.5.2210")]
internal static void SentReplicationFeedbackMessage(ILogger logger, NpgsqlLogSequenceNumber LastReceivedLsn, NpgsqlLogSequenceNumber LastFlushedLsn, NpgsqlLogSequenceNumber LastAppliedLsn, DateTime Timestamp, int ConnectorId);
    [LoggerMessageAttribute]
[GeneratedCodeAttribute("Microsoft.Extensions.Logging.Generators", "6.0.5.2210")]
internal static void ReplicationFeedbackMessageSendingFailed(ILogger logger, Nullable`1<int> ConnectorId, Exception exception);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Npgsql.MultiHostDataSourceWrapper : NpgsqlDataSource {
    private NpgsqlMultiHostDataSource _wrappedSource;
    internal bool OwnsConnectors { get; }
    [TupleElementNamesAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[NullableAttribute("0")]
internal ValueTuple`3<int, int, int> Statistics { get; }
    public MultiHostDataSourceWrapper(NpgsqlMultiHostDataSource source, TargetSessionAttributes targetSessionAttributes);
    internal virtual bool get_OwnsConnectors();
    private static NpgsqlConnectionStringBuilder CloneSettingsForTargetSessionAttributes(NpgsqlConnectionStringBuilder settings, TargetSessionAttributes targetSessionAttributes);
    [NullableContextAttribute("0")]
internal virtual ValueTuple`3<int, int, int> get_Statistics();
    internal virtual void Clear();
    internal virtual ValueTask`1<NpgsqlConnector> Get(NpgsqlConnection conn, NpgsqlTimeout timeout, bool async, CancellationToken cancellationToken);
    [NullableContextAttribute("2")]
internal virtual bool TryGetIdleConnector(NpgsqlConnector& connector);
    internal virtual ValueTask`1<NpgsqlConnector> OpenNewConnector(NpgsqlConnection conn, NpgsqlTimeout timeout, bool async, CancellationToken cancellationToken);
    internal virtual void Return(NpgsqlConnector connector);
    internal virtual void AddPendingEnlistedConnector(NpgsqlConnector connector, Transaction transaction);
    internal virtual bool TryRemovePendingEnlistedConnector(NpgsqlConnector connector, Transaction transaction);
    internal virtual bool TryRentEnlistedPending(Transaction transaction, NpgsqlConnection connection, NpgsqlConnector& connector);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Npgsql.MultiplexingDataSource : PoolingDataSource {
    private ILogger _connectionLogger;
    private ILogger _commandLogger;
    private bool _autoPrepare;
    internal Boolean modreq(System.Runtime.CompilerServices.IsVolatile) StartupCheckPerformed;
    private ChannelReader`1<NpgsqlCommand> _multiplexCommandReader;
    [CompilerGeneratedAttribute]
private ChannelWriter`1<NpgsqlCommand> <MultiplexCommandWriter>k__BackingField;
    private int _writeCoalescingBufferThresholdBytes;
    private static int MultiplexingCommandChannelBound;
    internal ChannelWriter`1<NpgsqlCommand> MultiplexCommandWriter { get; }
    internal MultiplexingDataSource(NpgsqlConnectionStringBuilder settings, NpgsqlDataSourceConfiguration dataSourceConfig, NpgsqlMultiHostDataSource parentPool);
    [CompilerGeneratedAttribute]
internal ChannelWriter`1<NpgsqlCommand> get_MultiplexCommandWriter();
    [AsyncStateMachineAttribute("Npgsql.MultiplexingDataSource/<MultiplexingWriteLoop>d__11")]
private Task MultiplexingWriteLoop();
    [CompilerGeneratedAttribute]
private void <.ctor>b__10_0(Task t);
    [CompilerGeneratedAttribute]
private bool <MultiplexingWriteLoop>g__WriteCommand|11_0(NpgsqlConnector connector, NpgsqlCommand command, MultiplexingStats& stats);
    [CompilerGeneratedAttribute]
private void <MultiplexingWriteLoop>g__Flush|11_1(NpgsqlConnector connector, MultiplexingStats& stats);
    [CompilerGeneratedAttribute]
private void <MultiplexingWriteLoop>g__FailWrite|11_2(NpgsqlConnector connector, Exception exception);
    [CompilerGeneratedAttribute]
internal static void <MultiplexingWriteLoop>g__CompleteWrite|11_3(NpgsqlConnector connector, MultiplexingStats& stats);
}
public class Npgsql.NameTranslation.NpgsqlNullNameTranslator : object {
    [NullableContextAttribute("1")]
public sealed virtual string TranslateTypeName(string clrName);
    [NullableContextAttribute("1")]
public sealed virtual string TranslateMemberName(string clrName);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Npgsql.NameTranslation.NpgsqlSnakeCaseNameTranslator : object {
    [CompilerGeneratedAttribute]
private bool <LegacyMode>k__BackingField;
    private bool LegacyMode { get; }
    public NpgsqlSnakeCaseNameTranslator(bool legacyMode);
    [CompilerGeneratedAttribute]
private bool get_LegacyMode();
    public sealed virtual string TranslateTypeName(string clrName);
    public sealed virtual string TranslateMemberName(string clrName);
    public static string ConvertToSnakeCase(string name);
}
[ExtensionAttribute]
internal static class Npgsql.Netstandard20.ReadOnlySpanOfCharExtensions : object {
    [ExtensionAttribute]
public static int ParseInt(ReadOnlySpan`1<char> span);
}
internal static class Npgsql.NoSynchronizationContextScope : object {
    internal static Disposable Enter();
}
public class Npgsql.NoticeEventHandler : MulticastDelegate {
    public NoticeEventHandler(object object, IntPtr method);
    [NullableContextAttribute("1")]
public virtual void Invoke(object sender, NpgsqlNoticeEventArgs e);
    public virtual IAsyncResult BeginInvoke(object sender, NpgsqlNoticeEventArgs e, AsyncCallback callback, object object);
    public virtual void EndInvoke(IAsyncResult result);
}
public class Npgsql.NotificationEventHandler : MulticastDelegate {
    public NotificationEventHandler(object object, IntPtr method);
    [NullableContextAttribute("1")]
public virtual void Invoke(object sender, NpgsqlNotificationEventArgs e);
    public virtual IAsyncResult BeginInvoke(object sender, NpgsqlNotificationEventArgs e, AsyncCallback callback, object object);
    public virtual void EndInvoke(IAsyncResult result);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal static class Npgsql.NpgsqlActivitySource : object {
    private static ActivitySource Source;
    internal static bool IsEnabled { get; }
    private static NpgsqlActivitySource();
    internal static bool get_IsEnabled();
    internal static Activity CommandStart(NpgsqlConnector connector, string commandText, CommandType commandType);
    internal static void ReceivedFirstResponse(Activity activity);
    internal static void CommandStop(Activity activity);
    internal static void SetException(Activity activity, Exception ex, bool escaped);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Npgsql.NpgsqlBatch : DbBatch {
    internal static int DefaultBatchCommandsSize;
    [CompilerGeneratedAttribute]
private NpgsqlCommand <Command>k__BackingField;
    [CompilerGeneratedAttribute]
private NpgsqlBatchCommandCollection <BatchCommands>k__BackingField;
    private protected NpgsqlCommand Command { get; }
    protected DbBatchCommandCollection DbBatchCommands { get; }
    public NpgsqlBatchCommandCollection BatchCommands { get; }
    public int Timeout { get; public set; }
    [NullableAttribute("2")]
public NpgsqlConnection Connection { get; public set; }
    [NullableAttribute("2")]
protected DbConnection DbConnection { get; protected set; }
    [NullableAttribute("2")]
public NpgsqlTransaction Transaction { get; public set; }
    [NullableAttribute("2")]
protected DbTransaction DbTransaction { get; protected set; }
    public bool EnableErrorBarriers { get; public set; }
    internal bool AllResultTypesAreUnknown { get; internal set; }
    [NullableContextAttribute("2")]
public NpgsqlBatch(NpgsqlConnection connection, NpgsqlTransaction transaction);
    internal NpgsqlBatch(NpgsqlConnector connector);
    private protected NpgsqlBatch(NpgsqlDataSourceCommand command);
    [CompilerGeneratedAttribute]
private protected NpgsqlCommand get_Command();
    protected virtual DbBatchCommandCollection get_DbBatchCommands();
    [CompilerGeneratedAttribute]
public NpgsqlBatchCommandCollection get_BatchCommands();
    public virtual int get_Timeout();
    public virtual void set_Timeout(int value);
    [NullableContextAttribute("2")]
public NpgsqlConnection get_Connection();
    [NullableContextAttribute("2")]
public void set_Connection(NpgsqlConnection value);
    [NullableContextAttribute("2")]
protected virtual DbConnection get_DbConnection();
    [NullableContextAttribute("2")]
protected virtual void set_DbConnection(DbConnection value);
    [NullableContextAttribute("2")]
public NpgsqlTransaction get_Transaction();
    [NullableContextAttribute("2")]
public void set_Transaction(NpgsqlTransaction value);
    [NullableContextAttribute("2")]
protected virtual DbTransaction get_DbTransaction();
    [NullableContextAttribute("2")]
protected virtual void set_DbTransaction(DbTransaction value);
    public bool get_EnableErrorBarriers();
    public void set_EnableErrorBarriers(bool value);
    internal bool get_AllResultTypesAreUnknown();
    internal void set_AllResultTypesAreUnknown(bool value);
    protected virtual DbBatchCommand CreateDbBatchCommand();
    public NpgsqlBatchCommand CreateBatchCommand();
    protected virtual DbDataReader ExecuteDbDataReader(CommandBehavior behavior);
    public NpgsqlDataReader ExecuteReader(CommandBehavior behavior);
    [AsyncStateMachineAttribute("Npgsql.NpgsqlBatch/<ExecuteDbDataReaderAsync>d__37")]
protected virtual Task`1<DbDataReader> ExecuteDbDataReaderAsync(CommandBehavior behavior, CancellationToken cancellationToken);
    public Task`1<NpgsqlDataReader> ExecuteReaderAsync(CancellationToken cancellationToken);
    public Task`1<NpgsqlDataReader> ExecuteReaderAsync(CommandBehavior behavior, CancellationToken cancellationToken);
    public virtual int ExecuteNonQuery();
    public virtual Task`1<int> ExecuteNonQueryAsync(CancellationToken cancellationToken);
    [NullableContextAttribute("2")]
public virtual object ExecuteScalar();
    public virtual Task`1<object> ExecuteScalarAsync(CancellationToken cancellationToken);
    public virtual void Prepare();
    public virtual Task PrepareAsync(CancellationToken cancellationToken);
    public virtual void Cancel();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Npgsql.NpgsqlBatchCommand : DbBatchCommand {
    private string _commandText;
    [CompilerGeneratedAttribute]
private CommandType <CommandType>k__BackingField;
    [CompilerGeneratedAttribute]
private NpgsqlParameterCollection <Parameters>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<bool> <AppendErrorBarrier>k__BackingField;
    [CompilerGeneratedAttribute]
private ulong <Rows>k__BackingField;
    [CompilerGeneratedAttribute]
private StatementType <StatementType>k__BackingField;
    [CompilerGeneratedAttribute]
private UInt32 <OID>k__BackingField;
    [NullableAttribute("2")]
[CompilerGeneratedAttribute]
private string <FinalCommandText>k__BackingField;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private List`1<NpgsqlParameter> _ownedInputParameters;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private List`1<NpgsqlParameter> _inputParameters;
    [NullableAttribute("2")]
private RowDescriptionMessage _description;
    [NullableAttribute("2")]
private PreparedStatement _preparedStatement;
    [NullableAttribute("2")]
[CompilerGeneratedAttribute]
private NpgsqlConnector <ConnectorPreparedOn>k__BackingField;
    internal bool IsPreparing;
    public string CommandText { get; public set; }
    public CommandType CommandType { get; public set; }
    protected DbParameterCollection DbParameterCollection { get; }
    public NpgsqlParameterCollection Parameters { get; }
    public Nullable`1<bool> AppendErrorBarrier { get; public set; }
    public ulong Rows { get; internal set; }
    public int RecordsAffected { get; }
    public StatementType StatementType { get; internal set; }
    public UInt32 OID { get; internal set; }
    [NullableAttribute("2")]
internal string FinalCommandText { get; internal set; }
    internal List`1<NpgsqlParameter> PositionalParameters { get; internal set; }
    [NullableAttribute("2")]
internal RowDescriptionMessage Description { get; internal set; }
    [NullableAttribute("2")]
internal PreparedStatement PreparedStatement { get; internal set; }
    [NullableAttribute("2")]
internal NpgsqlConnector ConnectorPreparedOn { get; internal set; }
    internal string StatementName { get; }
    internal bool IsPrepared { get; }
    public NpgsqlBatchCommand(string commandText);
    public virtual string get_CommandText();
    public virtual void set_CommandText(string value);
    [CompilerGeneratedAttribute]
public virtual CommandType get_CommandType();
    [CompilerGeneratedAttribute]
public virtual void set_CommandType(CommandType value);
    protected virtual DbParameterCollection get_DbParameterCollection();
    [CompilerGeneratedAttribute]
public NpgsqlParameterCollection get_Parameters();
    [CompilerGeneratedAttribute]
public Nullable`1<bool> get_AppendErrorBarrier();
    [CompilerGeneratedAttribute]
public void set_AppendErrorBarrier(Nullable`1<bool> value);
    [CompilerGeneratedAttribute]
public ulong get_Rows();
    [CompilerGeneratedAttribute]
internal void set_Rows(ulong value);
    public virtual int get_RecordsAffected();
    [CompilerGeneratedAttribute]
public StatementType get_StatementType();
    [CompilerGeneratedAttribute]
internal void set_StatementType(StatementType value);
    [CompilerGeneratedAttribute]
public UInt32 get_OID();
    [CompilerGeneratedAttribute]
internal void set_OID(UInt32 value);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
internal string get_FinalCommandText();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
internal void set_FinalCommandText(string value);
    internal List`1<NpgsqlParameter> get_PositionalParameters();
    internal void set_PositionalParameters(List`1<NpgsqlParameter> value);
    [NullableContextAttribute("2")]
internal RowDescriptionMessage get_Description();
    [NullableContextAttribute("2")]
internal void set_Description(RowDescriptionMessage value);
    [NullableContextAttribute("2")]
internal PreparedStatement get_PreparedStatement();
    [NullableContextAttribute("2")]
internal void set_PreparedStatement(PreparedStatement value);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
internal NpgsqlConnector get_ConnectorPreparedOn();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
internal void set_ConnectorPreparedOn(NpgsqlConnector value);
    internal string get_StatementName();
    internal bool get_IsPrepared();
    [NullableContextAttribute("2")]
internal bool TryGetPrepared(PreparedStatement& preparedStatement);
    internal bool ExplicitPrepare(NpgsqlConnector connector);
    internal bool TryAutoPrepare(NpgsqlConnector connector);
    internal void Reset();
    internal void ApplyCommandComplete(CommandCompleteMessage msg);
    internal void ResetPreparation();
    public virtual string ToString();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[DefaultMemberAttribute("Item")]
public class Npgsql.NpgsqlBatchCommandCollection : DbBatchCommandCollection {
    private List`1<NpgsqlBatchCommand> _list;
    public int Count { get; }
    public bool IsReadOnly { get; }
    private NpgsqlBatchCommand System.Collections.Generic.IList<Npgsql.NpgsqlBatchCommand>.Item { get; private set; }
    public NpgsqlBatchCommand Item { get; public set; }
    internal NpgsqlBatchCommandCollection(List`1<NpgsqlBatchCommand> batchCommands);
    public virtual int get_Count();
    public virtual bool get_IsReadOnly();
    private sealed virtual override IEnumerator`1<NpgsqlBatchCommand> System.Collections.Generic.IEnumerable<Npgsql.NpgsqlBatchCommand>.GetEnumerator();
    public virtual IEnumerator`1<DbBatchCommand> GetEnumerator();
    public sealed virtual void Add(NpgsqlBatchCommand item);
    public virtual void Add(DbBatchCommand item);
    public virtual void Clear();
    public sealed virtual bool Contains(NpgsqlBatchCommand item);
    public virtual bool Contains(DbBatchCommand item);
    public sealed virtual void CopyTo(NpgsqlBatchCommand[] array, int arrayIndex);
    public virtual void CopyTo(DbBatchCommand[] array, int arrayIndex);
    public sealed virtual int IndexOf(NpgsqlBatchCommand item);
    public virtual int IndexOf(DbBatchCommand item);
    public sealed virtual void Insert(int index, NpgsqlBatchCommand item);
    public virtual void Insert(int index, DbBatchCommand item);
    public sealed virtual bool Remove(NpgsqlBatchCommand item);
    public virtual bool Remove(DbBatchCommand item);
    public virtual void RemoveAt(int index);
    private sealed virtual override NpgsqlBatchCommand System.Collections.Generic.IList<Npgsql.NpgsqlBatchCommand>.get_Item(int index);
    private sealed virtual override void System.Collections.Generic.IList<Npgsql.NpgsqlBatchCommand>.set_Item(int index, NpgsqlBatchCommand value);
    public NpgsqlBatchCommand get_Item(int index);
    public void set_Item(int index, NpgsqlBatchCommand value);
    protected virtual DbBatchCommand GetBatchCommand(int index);
    protected virtual void SetBatchCommand(int index, DbBatchCommand batchCommand);
    private static NpgsqlBatchCommand Cast(DbBatchCommand value);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Npgsql.NpgsqlBinaryExporter : object {
    private NpgsqlConnector _connector;
    private NpgsqlReadBuffer _buf;
    private TypeMapper _typeMapper;
    private bool _isConsumed;
    private bool _isDisposed;
    private int _leftToReadInDataMsg;
    private int _columnLen;
    private short _column;
    private ulong _rowsExported;
    [CompilerGeneratedAttribute]
private int <NumColumns>k__BackingField;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private NpgsqlTypeHandler[] _typeHandlerCache;
    private ILogger _copyLogger;
    internal int NumColumns { get; private set; }
    unknown TimeSpan Timeout {public set; }
    public bool IsNull { get; }
    internal NpgsqlBinaryExporter(NpgsqlConnector connector);
    [CompilerGeneratedAttribute]
internal int get_NumColumns();
    [CompilerGeneratedAttribute]
private void set_NumColumns(int value);
    public void set_Timeout(TimeSpan value);
    [AsyncStateMachineAttribute("Npgsql.NpgsqlBinaryExporter/<Init>d__18")]
internal Task Init(string copyToCommand, bool async, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Npgsql.NpgsqlBinaryExporter/<ReadHeader>d__19")]
private Task ReadHeader(bool async);
    public int StartRow();
    [NullableContextAttribute("0")]
public ValueTask`1<int> StartRowAsync(CancellationToken cancellationToken);
    [NullableContextAttribute("0")]
[AsyncStateMachineAttribute("Npgsql.NpgsqlBinaryExporter/<StartRow>d__22")]
private ValueTask`1<int> StartRow(bool async, CancellationToken cancellationToken);
    public T Read();
    [NullableContextAttribute("2")]
public ValueTask`1<T> ReadAsync(CancellationToken cancellationToken);
    [NullableContextAttribute("2")]
private ValueTask`1<T> Read(bool async, CancellationToken cancellationToken);
    public T Read(NpgsqlDbType type);
    [NullableContextAttribute("2")]
public ValueTask`1<T> ReadAsync(NpgsqlDbType type, CancellationToken cancellationToken);
    [NullableContextAttribute("2")]
private ValueTask`1<T> Read(NpgsqlDbType type, bool async, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Npgsql.NpgsqlBinaryExporter/<DoRead>d__29`1")]
private ValueTask`1<T> DoRead(NpgsqlTypeHandler handler, bool async, CancellationToken cancellationToken);
    public bool get_IsNull();
    public void Skip();
    public Task SkipAsync(CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Npgsql.NpgsqlBinaryExporter/<Skip>d__34")]
private Task Skip(bool async, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Npgsql.NpgsqlBinaryExporter/<ReadColumnLenIfNeeded>d__35")]
private Task ReadColumnLenIfNeeded(bool async);
    private void CheckDisposed();
    public sealed virtual void Cancel();
    public sealed virtual Task CancelAsync();
    public sealed virtual void Dispose();
    public sealed virtual ValueTask DisposeAsync();
    [AsyncStateMachineAttribute("Npgsql.NpgsqlBinaryExporter/<DisposeAsync>d__41")]
private ValueTask DisposeAsync(bool async);
    private void Cleanup();
    [CompilerGeneratedAttribute]
private bool <ReadHeader>b__19_0(byte t);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Npgsql.NpgsqlBinaryImporter : object {
    private NpgsqlConnector _connector;
    private NpgsqlWriteBuffer _buf;
    private ImporterState _state;
    private short _column;
    private ulong _rowsImported;
    [CompilerGeneratedAttribute]
private int <NumColumns>k__BackingField;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private NpgsqlParameter[] _params;
    private ILogger _copyLogger;
    internal int NumColumns { get; private set; }
    private bool InMiddleOfRow { get; }
    unknown TimeSpan Timeout {public set; }
    internal NpgsqlBinaryImporter(NpgsqlConnector connector);
    [CompilerGeneratedAttribute]
internal int get_NumColumns();
    [CompilerGeneratedAttribute]
private void set_NumColumns(int value);
    private bool get_InMiddleOfRow();
    public void set_Timeout(TimeSpan value);
    [AsyncStateMachineAttribute("Npgsql.NpgsqlBinaryImporter/<Init>d__16")]
internal Task Init(string copyFromCommand, bool async, CancellationToken cancellationToken);
    private void WriteHeader();
    public void StartRow();
    public Task StartRowAsync(CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Npgsql.NpgsqlBinaryImporter/<StartRow>d__20")]
private Task StartRow(bool async, CancellationToken cancellationToken);
    public void Write(T value);
    public Task WriteAsync(T value, CancellationToken cancellationToken);
    private Task Write(T value, bool async, CancellationToken cancellationToken);
    public void Write(T value, NpgsqlDbType npgsqlDbType);
    public Task WriteAsync(T value, NpgsqlDbType npgsqlDbType, CancellationToken cancellationToken);
    private Task Write(T value, NpgsqlDbType npgsqlDbType, bool async, CancellationToken cancellationToken);
    public void Write(T value, string dataTypeName);
    public Task WriteAsync(T value, string dataTypeName, CancellationToken cancellationToken);
    private Task Write(T value, string dataTypeName, bool async, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Npgsql.NpgsqlBinaryImporter/<Write>d__30`1")]
private Task Write(T value, NpgsqlParameter param, bool async, CancellationToken cancellationToken);
    public void WriteNull();
    public Task WriteNullAsync(CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Npgsql.NpgsqlBinaryImporter/<WriteNull>d__33")]
private Task WriteNull(bool async, CancellationToken cancellationToken);
    public void WriteRow(Object[] values);
    public Task WriteRowAsync(CancellationToken cancellationToken, Object[] values);
    [AsyncStateMachineAttribute("Npgsql.NpgsqlBinaryImporter/<WriteRow>d__36")]
private Task WriteRow(bool async, CancellationToken cancellationToken, Object[] values);
    private void CheckColumnIndex();
    public ulong Complete();
    [NullableContextAttribute("0")]
public ValueTask`1<ulong> CompleteAsync(CancellationToken cancellationToken);
    [NullableContextAttribute("0")]
[AsyncStateMachineAttribute("Npgsql.NpgsqlBinaryImporter/<Complete>d__40")]
private ValueTask`1<ulong> Complete(bool async, CancellationToken cancellationToken);
    private sealed virtual override void Npgsql.ICancelable.Cancel();
    [AsyncStateMachineAttribute("Npgsql.NpgsqlBinaryImporter/<Npgsql-ICancelable-CancelAsync>d__42")]
private sealed virtual override Task Npgsql.ICancelable.CancelAsync();
    public sealed virtual void Dispose();
    public sealed virtual ValueTask DisposeAsync();
    [AsyncStateMachineAttribute("Npgsql.NpgsqlBinaryImporter/<Cancel>d__45")]
private Task Cancel(bool async, CancellationToken cancellationToken);
    public void Close();
    public ValueTask CloseAsync(CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Npgsql.NpgsqlBinaryImporter/<CloseAsync>d__48")]
private ValueTask CloseAsync(bool async, CancellationToken cancellationToken);
    private void Cleanup();
    [AsyncStateMachineAttribute("Npgsql.NpgsqlBinaryImporter/<WriteTrailer>d__50")]
private Task WriteTrailer(bool async, CancellationToken cancellationToken);
    private void CheckReady();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[DesignerCategoryAttribute("")]
public class Npgsql.NpgsqlCommand : DbCommand {
    [NullableAttribute("2")]
private NpgsqlTransaction _transaction;
    [NullableAttribute("2")]
private NpgsqlConnector _connector;
    [NullableAttribute("2")]
private NpgsqlConnector _connectorPreparedOn;
    private string _commandText;
    private CommandBehavior _behavior;
    private Nullable`1<int> _timeout;
    private NpgsqlParameterCollection _parameters;
    [CompilerGeneratedAttribute]
private bool <IsWrappedByBatch>k__BackingField;
    [CompilerGeneratedAttribute]
private List`1<NpgsqlBatchCommand> <InternalBatchCommands>k__BackingField;
    [NullableAttribute("2")]
private Activity CurrentActivity;
    private UpdateRowSource _updateRowSource;
    [CompilerGeneratedAttribute]
private bool <IsCached>k__BackingField;
    internal static bool EnableSqlRewriting;
    internal static bool EnableStoredProcedureCompatMode;
    [CompilerGeneratedAttribute]
private bool <EnableErrorBarriers>k__BackingField;
    private static List`1<NpgsqlParameter> EmptyParameters;
    private static SingleThreadSynchronizationContext SingleThreadSynchronizationContext;
    internal static int DefaultTimeout;
    [CompilerGeneratedAttribute]
private CommandType <CommandType>k__BackingField;
    [NullableAttribute("2")]
[CompilerGeneratedAttribute]
private NpgsqlConnection <InternalConnection>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <DesignTimeVisible>k__BackingField;
    private bool _allResultTypesAreUnknown;
    [NullableAttribute("2")]
private Boolean[] _unknownResultTypeList;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[CompilerGeneratedAttribute]
private Type[] <ObjectResultTypes>k__BackingField;
    private Int32 modreq(System.Runtime.CompilerServices.IsVolatile) _state;
    private static string DeriveParametersForFunctionQuery;
    [CompilerGeneratedAttribute]
private ManualResetValueTaskSource`1<NpgsqlConnector> <ExecutionCompletion>k__BackingField;
    internal bool IsWrappedByBatch { get; }
    internal List`1<NpgsqlBatchCommand> InternalBatchCommands { get; }
    [ObsoleteAttribute("Use the new DbBatch API")]
public IReadOnlyList`1<NpgsqlBatchCommand> Statements { get; }
    private bool IsExplicitlyPrepared { get; }
    internal bool IsCached { get; internal set; }
    internal bool EnableErrorBarriers { get; internal set; }
    [DefaultValueAttribute("")]
[CategoryAttribute("Data")]
public string CommandText { get; public set; }
    [DefaultValueAttribute("30")]
public int CommandTimeout { get; public set; }
    [DefaultValueAttribute("Mono.Cecil.CustomAttributeArgument")]
[CategoryAttribute("Data")]
public CommandType CommandType { get; public set; }
    [NullableAttribute("2")]
internal NpgsqlConnection InternalConnection { get; private set; }
    [NullableAttribute("2")]
protected DbConnection DbConnection { get; protected set; }
    [NullableAttribute("2")]
[DefaultValueAttribute("")]
[CategoryAttribute("Behavior")]
public NpgsqlConnection Connection { get; public set; }
    public bool DesignTimeVisible { get; public set; }
    [CategoryAttribute("Behavior")]
[DefaultValueAttribute("Mono.Cecil.CustomAttributeArgument")]
public UpdateRowSource UpdatedRowSource { get; public set; }
    public bool IsPrepared { get; }
    public bool AllResultTypesAreUnknown { get; public set; }
    [NullableAttribute("2")]
public Boolean[] UnknownResultTypeList { get; public set; }
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
internal Type[] ObjectResultTypes { get; internal set; }
    internal CommandState State { get; internal set; }
    protected DbParameterCollection DbParameterCollection { get; }
    public NpgsqlParameterCollection Parameters { get; }
    internal ManualResetValueTaskSource`1<NpgsqlConnector> ExecutionCompletion { get; }
    [NullableAttribute("2")]
protected DbTransaction DbTransaction { get; protected set; }
    [NullableAttribute("2")]
public NpgsqlTransaction Transaction { get; public set; }
    private static NpgsqlCommand();
    [NullableContextAttribute("2")]
public NpgsqlCommand(string cmdText);
    [NullableContextAttribute("2")]
public NpgsqlCommand(string cmdText, NpgsqlConnection connection);
    [NullableContextAttribute("2")]
public NpgsqlCommand(string cmdText, NpgsqlConnection connection, NpgsqlTransaction transaction);
    [NullableContextAttribute("2")]
internal NpgsqlCommand(int batchCommandCapacity, NpgsqlConnection connection);
    internal NpgsqlCommand(string cmdText, NpgsqlConnector connector);
    internal NpgsqlCommand(NpgsqlConnector connector, int batchCommandCapacity);
    [CompilerGeneratedAttribute]
internal bool get_IsWrappedByBatch();
    [CompilerGeneratedAttribute]
internal List`1<NpgsqlBatchCommand> get_InternalBatchCommands();
    public IReadOnlyList`1<NpgsqlBatchCommand> get_Statements();
    private bool get_IsExplicitlyPrepared();
    [CompilerGeneratedAttribute]
internal bool get_IsCached();
    [CompilerGeneratedAttribute]
internal void set_IsCached(bool value);
    [CompilerGeneratedAttribute]
internal bool get_EnableErrorBarriers();
    [CompilerGeneratedAttribute]
internal void set_EnableErrorBarriers(bool value);
    internal static NpgsqlCommand CreateCachedCommand(NpgsqlConnection connection);
    public virtual string get_CommandText();
    public virtual void set_CommandText(string value);
    public virtual int get_CommandTimeout();
    public virtual void set_CommandTimeout(int value);
    [CompilerGeneratedAttribute]
public virtual CommandType get_CommandType();
    [CompilerGeneratedAttribute]
public virtual void set_CommandType(CommandType value);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
internal NpgsqlConnection get_InternalConnection();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
private void set_InternalConnection(NpgsqlConnection value);
    [NullableContextAttribute("2")]
protected virtual DbConnection get_DbConnection();
    [NullableContextAttribute("2")]
protected virtual void set_DbConnection(DbConnection value);
    [NullableContextAttribute("2")]
public NpgsqlConnection get_Connection();
    [NullableContextAttribute("2")]
public void set_Connection(NpgsqlConnection value);
    [CompilerGeneratedAttribute]
public virtual bool get_DesignTimeVisible();
    [CompilerGeneratedAttribute]
public virtual void set_DesignTimeVisible(bool value);
    public virtual UpdateRowSource get_UpdatedRowSource();
    public virtual void set_UpdatedRowSource(UpdateRowSource value);
    public bool get_IsPrepared();
    public bool get_AllResultTypesAreUnknown();
    public void set_AllResultTypesAreUnknown(bool value);
    [NullableContextAttribute("2")]
public Boolean[] get_UnknownResultTypeList();
    [NullableContextAttribute("2")]
public void set_UnknownResultTypeList(Boolean[] value);
    [CompilerGeneratedAttribute]
internal Type[] get_ObjectResultTypes();
    [CompilerGeneratedAttribute]
internal void set_ObjectResultTypes(Type[] value);
    internal CommandState get_State();
    internal void set_State(CommandState value);
    internal void ResetPreparation();
    protected virtual DbParameter CreateDbParameter();
    public NpgsqlParameter CreateParameter();
    protected virtual DbParameterCollection get_DbParameterCollection();
    public NpgsqlParameterCollection get_Parameters();
    internal void DeriveParameters();
    private void DeriveParametersForFunction();
    private void DeriveParametersForQuery(NpgsqlConnector connector);
    public virtual void Prepare();
    public virtual Task PrepareAsync(CancellationToken cancellationToken);
    private Task Prepare(bool async, CancellationToken cancellationToken);
    public void Unprepare();
    public Task UnprepareAsync(CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Npgsql.NpgsqlCommand/<Unprepare>d__102")]
private Task Unprepare(bool async, CancellationToken cancellationToken);
    [NullableContextAttribute("2")]
internal void ProcessRawQuery(SqlQueryParser parser, bool standardConformingStrings, NpgsqlBatchCommand batchCommand);
    private void BeginSend(NpgsqlConnector connector);
    internal Task Write(NpgsqlConnector connector, bool async, bool flush, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Npgsql.NpgsqlCommand/<SendDeriveParameters>d__106")]
private Task SendDeriveParameters(NpgsqlConnector connector, bool async, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Npgsql.NpgsqlCommand/<SendPrepare>d__107")]
private Task SendPrepare(NpgsqlConnector connector, bool async, CancellationToken cancellationToken);
    private void ForceAsyncIfNecessary(Boolean& async, int numberOfStatementInBatch);
    [AsyncStateMachineAttribute("Npgsql.NpgsqlCommand/<SendClose>d__109")]
private Task SendClose(NpgsqlConnector connector, bool async, CancellationToken cancellationToken);
    public virtual int ExecuteNonQuery();
    public virtual Task`1<int> ExecuteNonQueryAsync(CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Npgsql.NpgsqlCommand/<ExecuteNonQuery>d__112")]
private Task`1<int> ExecuteNonQuery(bool async, CancellationToken cancellationToken);
    [NullableContextAttribute("2")]
public virtual object ExecuteScalar();
    public virtual Task`1<object> ExecuteScalarAsync(CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Npgsql.NpgsqlCommand/<ExecuteScalar>d__115")]
private ValueTask`1<object> ExecuteScalar(bool async, CancellationToken cancellationToken);
    protected virtual DbDataReader ExecuteDbDataReader(CommandBehavior behavior);
    [AsyncStateMachineAttribute("Npgsql.NpgsqlCommand/<ExecuteDbDataReaderAsync>d__117")]
protected virtual Task`1<DbDataReader> ExecuteDbDataReaderAsync(CommandBehavior behavior, CancellationToken cancellationToken);
    public NpgsqlDataReader ExecuteReader(CommandBehavior behavior);
    public Task`1<NpgsqlDataReader> ExecuteReaderAsync(CancellationToken cancellationToken);
    public Task`1<NpgsqlDataReader> ExecuteReaderAsync(CommandBehavior behavior, CancellationToken cancellationToken);
    [CompilerGeneratedAttribute]
internal ManualResetValueTaskSource`1<NpgsqlConnector> get_ExecutionCompletion();
    [AsyncStateMachineAttribute("Npgsql.NpgsqlCommand/<ExecuteReader>d__124")]
internal virtual ValueTask`1<NpgsqlDataReader> ExecuteReader(CommandBehavior behavior, bool async, CancellationToken cancellationToken);
    [NullableContextAttribute("2")]
protected virtual DbTransaction get_DbTransaction();
    [NullableContextAttribute("2")]
protected virtual void set_DbTransaction(DbTransaction value);
    [NullableContextAttribute("2")]
public NpgsqlTransaction get_Transaction();
    [NullableContextAttribute("2")]
public void set_Transaction(NpgsqlTransaction value);
    public virtual void Cancel();
    protected virtual void Dispose(bool disposing);
    internal void TraceCommandStart(NpgsqlConnector connector);
    internal void TraceReceivedFirstResponse();
    internal void TraceCommandStop();
    internal void TraceSetException(Exception e);
    private NpgsqlBatchCommand TruncateStatementsToOne();
    internal void FixupRowDescription(RowDescriptionMessage rowDescription, bool isFirst);
    internal void LogExecutingCompleted(NpgsqlConnector connector, bool executing);
    private sealed virtual override object System.ICloneable.Clone();
    public virtual NpgsqlCommand Clone();
    [NullableContextAttribute("2")]
private NpgsqlConnection CheckAndGetConnection();
    [NullableContextAttribute("2")]
public void add_Disposed(EventHandler value);
    [NullableContextAttribute("2")]
public void remove_Disposed(EventHandler value);
    [NullableContextAttribute("2")]
private sealed virtual override void System.ComponentModel.IComponent.add_Disposed(EventHandler value);
    [NullableContextAttribute("2")]
private sealed virtual override void System.ComponentModel.IComponent.remove_Disposed(EventHandler value);
    [AsyncStateMachineAttribute("Npgsql.NpgsqlCommand/<<Prepare>g__PrepareLong|99_1>d")]
[CompilerGeneratedAttribute]
internal static Task <Prepare>g__PrepareLong|99_1(NpgsqlCommand command, bool async, NpgsqlConnector connector, CancellationToken cancellationToken);
    [CompilerGeneratedAttribute]
internal static void <ProcessRawQuery>g__ValidateParameterCount|103_0(NpgsqlBatchCommand batchCommand);
    [AsyncStateMachineAttribute("Npgsql.NpgsqlCommand/<<Write>g__WriteExecute|105_0>d")]
[CompilerGeneratedAttribute]
private Task <Write>g__WriteExecute|105_0(NpgsqlConnector connector, bool async, bool flush, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Npgsql.NpgsqlCommand/<<Write>g__WriteExecuteSchemaOnly|105_1>d")]
[CompilerGeneratedAttribute]
private Task <Write>g__WriteExecuteSchemaOnly|105_1(NpgsqlConnector connector, bool async, bool flush, CancellationToken cancellationToken);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[DesignerCategoryAttribute("")]
public class Npgsql.NpgsqlCommandBuilder : DbCommandBuilder {
    public string QuotePrefix { get; public set; }
    public string QuoteSuffix { get; public set; }
    [NullableContextAttribute("2")]
public NpgsqlCommandBuilder(NpgsqlDataAdapter adapter);
    public virtual string get_QuotePrefix();
    public virtual void set_QuotePrefix(string value);
    public virtual string get_QuoteSuffix();
    public virtual void set_QuoteSuffix(string value);
    public static void DeriveParameters(NpgsqlCommand command);
    public NpgsqlCommand GetInsertCommand();
    public NpgsqlCommand GetInsertCommand(bool useColumnsForParameterNames);
    public NpgsqlCommand GetUpdateCommand();
    public NpgsqlCommand GetUpdateCommand(bool useColumnsForParameterNames);
    public NpgsqlCommand GetDeleteCommand();
    public NpgsqlCommand GetDeleteCommand(bool useColumnsForParameterNames);
    protected virtual void ApplyParameterInfo(DbParameter p, DataRow row, StatementType statementType, bool whereClause);
    protected virtual string GetParameterName(int parameterOrdinal);
    protected virtual string GetParameterName(string parameterName);
    protected virtual string GetParameterPlaceholder(int parameterOrdinal);
    protected virtual void SetRowUpdatingHandler(DbDataAdapter adapter);
    private void RowUpdatingHandler(object sender, NpgsqlRowUpdatingEventArgs e);
    public virtual string QuoteIdentifier(string unquotedIdentifier);
    public virtual string UnquoteIdentifier(string quotedIdentifier);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[DesignerCategoryAttribute("")]
public class Npgsql.NpgsqlConnection : DbConnection {
    private bool _disposed;
    private string _userFacingConnectionString;
    private string _connectionString;
    private ConnectionState _fullState;
    [NullableAttribute("2")]
[CompilerGeneratedAttribute]
private NpgsqlConnector <Connector>k__BackingField;
    [CompilerGeneratedAttribute]
private NpgsqlConnectionStringBuilder <Settings>k__BackingField;
    private static NpgsqlConnectionStringBuilder DefaultSettings;
    [NullableAttribute("2")]
private NpgsqlDataSource _dataSource;
    [NullableAttribute("2")]
[CompilerGeneratedAttribute]
private NpgsqlCommand <CachedCommand>k__BackingField;
    private int _closing;
    [NullableAttribute("2")]
[CompilerGeneratedAttribute]
private Transaction <EnlistedTransaction>k__BackingField;
    public static int DefaultPort;
    internal static int TimeoutLimit;
    [CompilerGeneratedAttribute]
private ConnectorBindingScope <ConnectorBindingScope>k__BackingField;
    private ILogger _connectionLogger;
    private static StateChangeEventArgs ClosedToOpenEventArgs;
    private static StateChangeEventArgs OpenToClosedEventArgs;
    [NullableAttribute("2")]
[CompilerGeneratedAttribute]
private ProvidePasswordCallback <ProvidePasswordCallback>k__BackingField;
    [NullableAttribute("2")]
[CompilerGeneratedAttribute]
private NoticeEventHandler Notice;
    [NullableAttribute("2")]
[CompilerGeneratedAttribute]
private NotificationEventHandler Notification;
    [NullableAttribute("2")]
[CompilerGeneratedAttribute]
private ProvideClientCertificatesCallback <ProvideClientCertificatesCallback>k__BackingField;
    [NullableAttribute("2")]
[CompilerGeneratedAttribute]
private RemoteCertificateValidationCallback <UserCertificateValidationCallback>k__BackingField;
    [NullableAttribute("2")]
internal NpgsqlConnector Connector { get; internal set; }
    internal NpgsqlConnectionStringBuilder Settings { get; private set; }
    internal NpgsqlDataSource NpgsqlDataSource { get; }
    [NullableAttribute("2")]
internal NpgsqlCommand CachedCommand { get; internal set; }
    [NullableAttribute("2")]
internal Transaction EnlistedTransaction { get; internal set; }
    [ObsoleteAttribute("Global-level type mapping has been replaced with data source mapping, see the 7.0 release notes.")]
public static INpgsqlTypeMapper GlobalTypeMapper { get; }
    [ObsoleteAttribute("Connection-level type mapping is no longer supported. See the 7.0 release notes for configuring type mapping on NpgsqlDataSource.", "True")]
public INpgsqlTypeMapper TypeMapper { get; }
    internal ConnectorBindingScope ConnectorBindingScope { get; internal set; }
    public string ConnectionString { get; public set; }
    [NullableAttribute("2")]
[ObsoleteAttribute("Use NpgsqlDataSourceBuilder.UsePeriodicPasswordProvider or inject passwords directly into NpgsqlDataSource.Password")]
public ProvidePasswordCallback ProvidePasswordCallback { get; public set; }
    [NullableAttribute("2")]
[BrowsableAttribute("True")]
public string Host { get; }
    [BrowsableAttribute("True")]
public int Port { get; }
    public int ConnectionTimeout { get; }
    public int CommandTimeout { get; }
    public string Database { get; }
    public string DataSource { get; }
    public bool IntegratedSecurity { get; }
    [NullableAttribute("2")]
public string UserName { get; }
    [NullableAttribute("2")]
internal string EntityTemplateDatabase { get; }
    [NullableAttribute("2")]
internal string EntityAdminDatabase { get; }
    [BrowsableAttribute("False")]
public ConnectionState FullState { get; internal set; }
    [BrowsableAttribute("False")]
public ConnectionState State { get; }
    public bool CanCreateBatch { get; }
    internal bool IsSecure { get; }
    internal bool IsScram { get; }
    internal bool IsScramPlus { get; }
    [NullableAttribute("2")]
public ProvideClientCertificatesCallback ProvideClientCertificatesCallback { get; public set; }
    [NullableAttribute("2")]
public RemoteCertificateValidationCallback UserCertificateValidationCallback { get; public set; }
    [BrowsableAttribute("False")]
public Version PostgreSqlVersion { get; }
    public string ServerVersion { get; }
    [BrowsableAttribute("False")]
public int ProcessID { get; }
    [BrowsableAttribute("False")]
public bool HasIntegerDateTimes { get; }
    [BrowsableAttribute("False")]
public string Timezone { get; }
    [BrowsableAttribute("False")]
public IReadOnlyDictionary`2<string, string> PostgresParameters { get; }
    protected DbProviderFactory DbProviderFactory { get; }
    [NullableContextAttribute("2")]
public NpgsqlConnection(string connectionString);
    internal NpgsqlConnection(NpgsqlDataSource dataSource, NpgsqlConnector connector);
    private static NpgsqlConnection();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
internal NpgsqlConnector get_Connector();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
internal void set_Connector(NpgsqlConnector value);
    [CompilerGeneratedAttribute]
internal NpgsqlConnectionStringBuilder get_Settings();
    [CompilerGeneratedAttribute]
private void set_Settings(NpgsqlConnectionStringBuilder value);
    internal NpgsqlDataSource get_NpgsqlDataSource();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
internal NpgsqlCommand get_CachedCommand();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
internal void set_CachedCommand(NpgsqlCommand value);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
internal Transaction get_EnlistedTransaction();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
internal void set_EnlistedTransaction(Transaction value);
    public static INpgsqlTypeMapper get_GlobalTypeMapper();
    public INpgsqlTypeMapper get_TypeMapper();
    [CompilerGeneratedAttribute]
internal ConnectorBindingScope get_ConnectorBindingScope();
    [CompilerGeneratedAttribute]
internal void set_ConnectorBindingScope(ConnectorBindingScope value);
    internal static NpgsqlConnection FromDataSource(NpgsqlDataSource dataSource);
    public virtual void Open();
    public virtual Task OpenAsync(CancellationToken cancellationToken);
    private void SetupDataSource();
    internal Task Open(bool async, CancellationToken cancellationToken);
    public virtual string get_ConnectionString();
    public virtual void set_ConnectionString(string value);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public ProvidePasswordCallback get_ProvidePasswordCallback();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public void set_ProvidePasswordCallback(ProvidePasswordCallback value);
    [NullableContextAttribute("2")]
public string get_Host();
    public int get_Port();
    public virtual int get_ConnectionTimeout();
    public int get_CommandTimeout();
    public virtual string get_Database();
    public virtual string get_DataSource();
    public bool get_IntegratedSecurity();
    [NullableContextAttribute("2")]
public string get_UserName();
    [NullableContextAttribute("2")]
internal string get_EntityTemplateDatabase();
    [NullableContextAttribute("2")]
internal string get_EntityAdminDatabase();
    public ConnectionState get_FullState();
    internal void set_FullState(ConnectionState value);
    public virtual ConnectionState get_State();
    protected virtual DbCommand CreateDbCommand();
    public NpgsqlCommand CreateCommand();
    public virtual bool get_CanCreateBatch();
    protected virtual DbBatch CreateDbBatch();
    public NpgsqlBatch CreateBatch();
    protected virtual DbTransaction BeginDbTransaction(IsolationLevel isolationLevel);
    public NpgsqlTransaction BeginTransaction();
    public NpgsqlTransaction BeginTransaction(IsolationLevel level);
    [AsyncStateMachineAttribute("Npgsql.NpgsqlConnection/<BeginTransaction>d__87")]
private ValueTask`1<NpgsqlTransaction> BeginTransaction(IsolationLevel level, bool async, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Npgsql.NpgsqlConnection/<BeginDbTransactionAsync>d__88")]
protected virtual ValueTask`1<DbTransaction> BeginDbTransactionAsync(IsolationLevel isolationLevel, CancellationToken cancellationToken);
    public ValueTask`1<NpgsqlTransaction> BeginTransactionAsync(CancellationToken cancellationToken);
    public ValueTask`1<NpgsqlTransaction> BeginTransactionAsync(IsolationLevel level, CancellationToken cancellationToken);
    [NullableContextAttribute("2")]
public virtual void EnlistTransaction(Transaction transaction);
    public virtual void Close();
    public virtual Task CloseAsync();
    internal bool TakeCloseLock();
    internal void ReleaseCloseLock();
    internal Task Close(bool async);
    [AsyncStateMachineAttribute("Npgsql.NpgsqlConnection/<CloseAsync>d__97")]
private Task CloseAsync(bool async);
    protected virtual void Dispose(bool disposing);
    public virtual ValueTask DisposeAsync();
    internal void MakeDisposed();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public void add_Notice(NoticeEventHandler value);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public void remove_Notice(NoticeEventHandler value);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public void add_Notification(NotificationEventHandler value);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public void remove_Notification(NotificationEventHandler value);
    internal void OnNotice(PostgresNotice e);
    internal void OnNotification(NpgsqlNotificationEventArgs e);
    internal bool get_IsSecure();
    internal bool get_IsScram();
    internal bool get_IsScramPlus();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public ProvideClientCertificatesCallback get_ProvideClientCertificatesCallback();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public void set_ProvideClientCertificatesCallback(ProvideClientCertificatesCallback value);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public RemoteCertificateValidationCallback get_UserCertificateValidationCallback();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public void set_UserCertificateValidationCallback(RemoteCertificateValidationCallback value);
    public Version get_PostgreSqlVersion();
    public virtual string get_ServerVersion();
    public int get_ProcessID();
    public bool get_HasIntegerDateTimes();
    public string get_Timezone();
    public IReadOnlyDictionary`2<string, string> get_PostgresParameters();
    public NpgsqlBinaryImporter BeginBinaryImport(string copyFromCommand);
    public Task`1<NpgsqlBinaryImporter> BeginBinaryImportAsync(string copyFromCommand, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Npgsql.NpgsqlConnection/<BeginBinaryImport>d__137")]
private Task`1<NpgsqlBinaryImporter> BeginBinaryImport(string copyFromCommand, bool async, CancellationToken cancellationToken);
    public NpgsqlBinaryExporter BeginBinaryExport(string copyToCommand);
    public Task`1<NpgsqlBinaryExporter> BeginBinaryExportAsync(string copyToCommand, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Npgsql.NpgsqlConnection/<BeginBinaryExport>d__140")]
private Task`1<NpgsqlBinaryExporter> BeginBinaryExport(string copyToCommand, bool async, CancellationToken cancellationToken);
    public TextWriter BeginTextImport(string copyFromCommand);
    public Task`1<TextWriter> BeginTextImportAsync(string copyFromCommand, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Npgsql.NpgsqlConnection/<BeginTextImport>d__143")]
private Task`1<TextWriter> BeginTextImport(string copyFromCommand, bool async, CancellationToken cancellationToken);
    public TextReader BeginTextExport(string copyToCommand);
    public Task`1<TextReader> BeginTextExportAsync(string copyToCommand, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Npgsql.NpgsqlConnection/<BeginTextExport>d__146")]
private Task`1<TextReader> BeginTextExport(string copyToCommand, bool async, CancellationToken cancellationToken);
    public NpgsqlRawCopyStream BeginRawBinaryCopy(string copyCommand);
    public Task`1<NpgsqlRawCopyStream> BeginRawBinaryCopyAsync(string copyCommand, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Npgsql.NpgsqlConnection/<BeginRawBinaryCopy>d__149")]
private Task`1<NpgsqlRawCopyStream> BeginRawBinaryCopy(string copyCommand, bool async, CancellationToken cancellationToken);
    public bool Wait(int timeout);
    public bool Wait(TimeSpan timeout);
    public void Wait();
    public Task`1<bool> WaitAsync(int timeout, CancellationToken cancellationToken);
    public Task`1<bool> WaitAsync(TimeSpan timeout, CancellationToken cancellationToken);
    public Task WaitAsync(CancellationToken cancellationToken);
    private void CheckOpen();
    private void CheckClosed();
    private void CheckDisposed();
    internal void CheckReady();
    [NullableContextAttribute("2")]
internal bool TryGetBoundConnector(NpgsqlConnector& connector);
    internal ValueTask`1<NpgsqlConnector> StartBindingScope(ConnectorBindingScope scope, NpgsqlTimeout timeout, bool async, CancellationToken cancellationToken);
    internal NpgsqlConnector StartBindingScope(ConnectorBindingScope scope);
    internal EndScopeDisposable StartTemporaryBindingScope(NpgsqlConnector& connector);
    internal T CheckOpenAndRunInTemporaryScope(Func`2<NpgsqlConnector, T> func);
    internal void EndBindingScope(ConnectorBindingScope scope);
    [UnconditionalSuppressMessageAttribute("Composite type mapping currently isn't trimming-safe, and warnings are generated at the MapComposite level.", "IL2026")]
public virtual DataTable GetSchema();
    public virtual DataTable GetSchema(string collectionName);
    [NullableContextAttribute("2")]
public virtual DataTable GetSchema(string collectionName, String[] restrictions);
    public virtual Task`1<DataTable> GetSchemaAsync(CancellationToken cancellationToken);
    public virtual Task`1<DataTable> GetSchemaAsync(string collectionName, CancellationToken cancellationToken);
    public virtual Task`1<DataTable> GetSchemaAsync(string collectionName, String[] restrictions, CancellationToken cancellationToken);
    private sealed virtual override object System.ICloneable.Clone();
    public NpgsqlConnection CloneWith(string connectionString);
    public virtual void ChangeDatabase(string dbName);
    protected virtual DbProviderFactory get_DbProviderFactory();
    public static void ClearPool(NpgsqlConnection connection);
    public static void ClearAllPools();
    public void UnprepareAll();
    public void ReloadTypes();
    [AsyncStateMachineAttribute("Npgsql.NpgsqlConnection/<ReloadTypesAsync>d__181")]
public Task ReloadTypesAsync();
    [NullableContextAttribute("2")]
public void add_Disposed(EventHandler value);
    [NullableContextAttribute("2")]
public void remove_Disposed(EventHandler value);
    [NullableContextAttribute("2")]
private sealed virtual override void System.ComponentModel.IComponent.add_Disposed(EventHandler value);
    [NullableContextAttribute("2")]
private sealed virtual override void System.ComponentModel.IComponent.remove_Disposed(EventHandler value);
    [AsyncStateMachineAttribute("Npgsql.NpgsqlConnection/<<Open>g__OpenAsync|45_0>d")]
[CompilerGeneratedAttribute]
private Task <Open>g__OpenAsync|45_0(bool async, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Npgsql.NpgsqlConnection/<<Open>g__PerformMultiplexingStartupCheck|45_1>d")]
[CompilerGeneratedAttribute]
private Task <Open>g__PerformMultiplexingStartupCheck|45_1(bool async, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Npgsql.NpgsqlConnection/<<DisposeAsync>g__DisposeAsyncCore|99_0>d")]
[CompilerGeneratedAttribute]
private ValueTask <DisposeAsync>g__DisposeAsyncCore|99_0();
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
[DefaultMemberAttribute("Item")]
public class Npgsql.NpgsqlConnectionStringBuilder : DbConnectionStringBuilder {
    private string _dataSourceCached;
    private string _host;
    private int _port;
    private string _database;
    private string _username;
    private string _password;
    private string _passfile;
    private string _applicationName;
    private bool _enlist;
    private string _searchPath;
    private string _clientEncoding;
    [NullableAttribute("1")]
private string _encoding;
    private string _timezone;
    private SslMode _sslMode;
    private bool _trustServerCertificate;
    private string _sslCertificate;
    private string _sslKey;
    private string _sslPassword;
    private string _rootCertificate;
    private bool _checkCertificateRevocation;
    private bool _integratedSecurity;
    [NullableAttribute("1")]
private string _kerberosServiceName;
    private bool _includeRealm;
    private bool _persistSecurityInfo;
    private bool _logParameters;
    [NullableAttribute("1")]
internal static string IncludeExceptionDetailDisplayName;
    private bool _includeErrorDetail;
    private bool _pooling;
    private int _minPoolSize;
    private int _maxPoolSize;
    private int _connectionIdleLifetime;
    private int _connectionPruningInterval;
    private int _connectionLifetime;
    private int _timeout;
    internal static int DefaultTimeout;
    private int _commandTimeout;
    private int _internalCommandTimeout;
    private int _cancellationTimeout;
    [CompilerGeneratedAttribute]
private Nullable`1<TargetSessionAttributes> <TargetSessionAttributesParsed>k__BackingField;
    private bool _loadBalanceHosts;
    private int _hostRecheckSeconds;
    private string _entityTemplateDatabase;
    private string _entityAdminDatabase;
    private int _keepAlive;
    private bool _tcpKeepAlive;
    private int _tcpKeepAliveTime;
    private int _tcpKeepAliveInterval;
    private int _readBufferSize;
    private int _writeBufferSize;
    private int _socketReceiveBufferSize;
    private int _socketSendBufferSize;
    private int _maxAutoPrepare;
    private int _autoPrepareMinUsages;
    private bool _noResetOnClose;
    private bool _loadTableComposites;
    private ReplicationMode _replicationMode;
    private string _options;
    private ArrayNullabilityMode _arrayNullabilityMode;
    private bool _multiplexing;
    private int _writeCoalescingBufferThresholdBytes;
    private ServerCompatibilityMode _serverCompatibilityMode;
    [NullableAttribute("1")]
internal string DataSourceCached { get; }
    internal TimeSpan HostRecheckSecondsTranslated { get; }
    [NullableAttribute("1")]
public object Item { get; public set; }
    private object System.Collections.Generic.IDictionary<System.String,System.Object>.Item { get; private set; }
    [CategoryAttribute("Connection")]
[DescriptionAttribute("The hostname or IP address of the PostgreSQL server to connect to.")]
[DisplayNameAttribute("Host")]
[NpgsqlConnectionStringPropertyAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public string Host { get; public set; }
    [CategoryAttribute("Connection")]
[DescriptionAttribute("The TCP port of the PostgreSQL server.")]
[DisplayNameAttribute("Port")]
[NpgsqlConnectionStringPropertyAttribute]
[DefaultValueAttribute("5432")]
public int Port { get; public set; }
    [CategoryAttribute("Connection")]
[DescriptionAttribute("The PostgreSQL database to connect to.")]
[DisplayNameAttribute("Database")]
[NpgsqlConnectionStringPropertyAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public string Database { get; public set; }
    [CategoryAttribute("Connection")]
[DescriptionAttribute("The username to connect with. Not required if using IntegratedSecurity.")]
[DisplayNameAttribute("Username")]
[NpgsqlConnectionStringPropertyAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public string Username { get; public set; }
    [CategoryAttribute("Connection")]
[DescriptionAttribute("The password to connect with. Not required if using IntegratedSecurity.")]
[PasswordPropertyTextAttribute("True")]
[DisplayNameAttribute("Password")]
[NpgsqlConnectionStringPropertyAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public string Password { get; public set; }
    [CategoryAttribute("Connection")]
[DescriptionAttribute("Path to a PostgreSQL password file (PGPASSFILE), from which the password would be taken.")]
[DisplayNameAttribute("Passfile")]
[NpgsqlConnectionStringPropertyAttribute]
public string Passfile { get; public set; }
    [CategoryAttribute("Connection")]
[DescriptionAttribute("The optional application name parameter to be sent to the backend during connection initiation")]
[DisplayNameAttribute("Application Name")]
[NpgsqlConnectionStringPropertyAttribute]
public string ApplicationName { get; public set; }
    [CategoryAttribute("Connection")]
[DescriptionAttribute("Whether to enlist in an ambient TransactionScope.")]
[DisplayNameAttribute("Enlist")]
[DefaultValueAttribute("True")]
[NpgsqlConnectionStringPropertyAttribute]
public bool Enlist { get; public set; }
    [CategoryAttribute("Connection")]
[DescriptionAttribute("Gets or sets the schema search path.")]
[DisplayNameAttribute("Search Path")]
[NpgsqlConnectionStringPropertyAttribute]
public string SearchPath { get; public set; }
    [CategoryAttribute("Connection")]
[DescriptionAttribute("Gets or sets the client_encoding parameter.")]
[DisplayNameAttribute("Client Encoding")]
[NpgsqlConnectionStringPropertyAttribute]
public string ClientEncoding { get; public set; }
    [NullableAttribute("1")]
[CategoryAttribute("Connection")]
[DescriptionAttribute("Gets or sets the .NET encoding that will be used to encode/decode PostgreSQL string data.")]
[DisplayNameAttribute("Encoding")]
[DefaultValueAttribute("UTF8")]
[NpgsqlConnectionStringPropertyAttribute]
public string Encoding { get; public set; }
    [CategoryAttribute("Connection")]
[DescriptionAttribute("Gets or sets the PostgreSQL session timezone, in Olson/IANA database format.")]
[DisplayNameAttribute("Timezone")]
[NpgsqlConnectionStringPropertyAttribute]
public string Timezone { get; public set; }
    [CategoryAttribute("Security")]
[DescriptionAttribute("Controls whether SSL is required, disabled or preferred, depending on server support.")]
[DisplayNameAttribute("SSL Mode")]
[DefaultValueAttribute("Mono.Cecil.CustomAttributeArgument")]
[NpgsqlConnectionStringPropertyAttribute]
public SslMode SslMode { get; public set; }
    [CategoryAttribute("Security")]
[DescriptionAttribute("Whether to trust the server certificate without validating it.")]
[DisplayNameAttribute("Trust Server Certificate")]
[NpgsqlConnectionStringPropertyAttribute]
public bool TrustServerCertificate { get; public set; }
    [CategoryAttribute("Security")]
[DescriptionAttribute("Location of a client certificate to be sent to the server.")]
[DisplayNameAttribute("SSL Certificate")]
[NpgsqlConnectionStringPropertyAttribute]
public string SslCertificate { get; public set; }
    [CategoryAttribute("Security")]
[DescriptionAttribute("Location of a client key for a client certificate to be sent to the server.")]
[DisplayNameAttribute("SSL Key")]
[NpgsqlConnectionStringPropertyAttribute]
public string SslKey { get; public set; }
    [CategoryAttribute("Security")]
[DescriptionAttribute("Password for a key for a client certificate.")]
[DisplayNameAttribute("SSL Password")]
[NpgsqlConnectionStringPropertyAttribute]
public string SslPassword { get; public set; }
    [CategoryAttribute("Security")]
[DescriptionAttribute("Location of a CA certificate used to validate the server certificate.")]
[DisplayNameAttribute("Root Certificate")]
[NpgsqlConnectionStringPropertyAttribute]
public string RootCertificate { get; public set; }
    [CategoryAttribute("Security")]
[DescriptionAttribute("Whether to check the certificate revocation list during authentication.")]
[DisplayNameAttribute("Check Certificate Revocation")]
[NpgsqlConnectionStringPropertyAttribute]
public bool CheckCertificateRevocation { get; public set; }
    [CategoryAttribute("Security")]
[DescriptionAttribute("Whether to use Windows integrated security to log in.")]
[DisplayNameAttribute("Integrated Security")]
[NpgsqlConnectionStringPropertyAttribute]
public bool IntegratedSecurity { get; public set; }
    [NullableAttribute("1")]
[CategoryAttribute("Security")]
[DescriptionAttribute("The Kerberos service name to be used for authentication.")]
[DisplayNameAttribute("Kerberos Service Name")]
[NpgsqlConnectionStringPropertyAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[DefaultValueAttribute("postgres")]
public string KerberosServiceName { get; public set; }
    [CategoryAttribute("Security")]
[DescriptionAttribute("The Kerberos realm to be used for authentication.")]
[DisplayNameAttribute("Include Realm")]
[NpgsqlConnectionStringPropertyAttribute]
public bool IncludeRealm { get; public set; }
    [CategoryAttribute("Security")]
[DescriptionAttribute("Gets or sets a Boolean value that indicates if security-sensitive information, such as the password, is not returned as part of the connection if the connection is open or has ever been in an open state.")]
[DisplayNameAttribute("Persist Security Info")]
[NpgsqlConnectionStringPropertyAttribute]
public bool PersistSecurityInfo { get; public set; }
    [CategoryAttribute("Security")]
[DescriptionAttribute("When enabled, parameter values are logged when commands are executed. Defaults to false.")]
[DisplayNameAttribute("Log Parameters")]
[NpgsqlConnectionStringPropertyAttribute]
public bool LogParameters { get; public set; }
    [CategoryAttribute("Security")]
[DescriptionAttribute("When enabled, PostgreSQL error and notice details are included on PostgresException.Detail and PostgresNotice.Detail. These can contain sensitive data.")]
[DisplayNameAttribute("Include Error Detail")]
[NpgsqlConnectionStringPropertyAttribute]
public bool IncludeErrorDetail { get; public set; }
    [CategoryAttribute("Pooling")]
[DescriptionAttribute("Whether connection pooling should be used.")]
[DisplayNameAttribute("Pooling")]
[NpgsqlConnectionStringPropertyAttribute]
[DefaultValueAttribute("True")]
public bool Pooling { get; public set; }
    [CategoryAttribute("Pooling")]
[DescriptionAttribute("The minimum connection pool size.")]
[DisplayNameAttribute("Minimum Pool Size")]
[NpgsqlConnectionStringPropertyAttribute]
[DefaultValueAttribute("0")]
public int MinPoolSize { get; public set; }
    [CategoryAttribute("Pooling")]
[DescriptionAttribute("The maximum connection pool size.")]
[DisplayNameAttribute("Maximum Pool Size")]
[NpgsqlConnectionStringPropertyAttribute]
[DefaultValueAttribute("100")]
public int MaxPoolSize { get; public set; }
    [CategoryAttribute("Pooling")]
[DescriptionAttribute("The time to wait before closing unused connections in the pool if the count of all connections exceeds MinPoolSize.")]
[DisplayNameAttribute("Connection Idle Lifetime")]
[NpgsqlConnectionStringPropertyAttribute]
[DefaultValueAttribute("300")]
public int ConnectionIdleLifetime { get; public set; }
    [CategoryAttribute("Pooling")]
[DescriptionAttribute("How many seconds the pool waits before attempting to prune idle connections that are beyond idle lifetime.")]
[DisplayNameAttribute("Connection Pruning Interval")]
[NpgsqlConnectionStringPropertyAttribute]
[DefaultValueAttribute("10")]
public int ConnectionPruningInterval { get; public set; }
    [CategoryAttribute("Pooling")]
[DescriptionAttribute("The total maximum lifetime of connections (in seconds).")]
[DisplayNameAttribute("Connection Lifetime")]
[NpgsqlConnectionStringPropertyAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public int ConnectionLifetime { get; public set; }
    [CategoryAttribute("Timeouts")]
[DescriptionAttribute("The time to wait (in seconds) while trying to establish a connection before terminating the attempt and generating an error.")]
[DisplayNameAttribute("Timeout")]
[NpgsqlConnectionStringPropertyAttribute]
[DefaultValueAttribute("15")]
public int Timeout { get; public set; }
    [CategoryAttribute("Timeouts")]
[DescriptionAttribute("The time to wait (in seconds) while trying to execute a command before terminating the attempt and generating an error. Set to zero for infinity.")]
[DisplayNameAttribute("Command Timeout")]
[NpgsqlConnectionStringPropertyAttribute]
[DefaultValueAttribute("30")]
public int CommandTimeout { get; public set; }
    [CategoryAttribute("Timeouts")]
[DescriptionAttribute("The time to wait (in seconds) while trying to execute a an internal command before terminating the attempt and generating an error. -1 uses CommandTimeout, 0 means no timeout.")]
[DisplayNameAttribute("Internal Command Timeout")]
[NpgsqlConnectionStringPropertyAttribute]
[DefaultValueAttribute("-1")]
public int InternalCommandTimeout { get; public set; }
    [CategoryAttribute("Timeouts")]
[DescriptionAttribute("After Command Timeout is reached (or user supplied cancellation token is cancelled) and command cancellation is attempted, Npgsql waits for this additional timeout (in milliseconds) before breaking the connection. Defaults to 2000, set to zero for infinity.")]
[DisplayNameAttribute("Cancellation Timeout")]
[NpgsqlConnectionStringPropertyAttribute]
[DefaultValueAttribute("2000")]
public int CancellationTimeout { get; public set; }
    [CategoryAttribute("Failover and load balancing")]
[DescriptionAttribute("Determines the preferred PostgreSQL target server type.")]
[DisplayNameAttribute("Target Session Attributes")]
[NpgsqlConnectionStringPropertyAttribute]
public string TargetSessionAttributes { get; public set; }
    internal Nullable`1<TargetSessionAttributes> TargetSessionAttributesParsed { get; internal set; }
    [CategoryAttribute("Failover and load balancing")]
[DescriptionAttribute("Enables balancing between multiple hosts by round-robin.")]
[DisplayNameAttribute("Load Balance Hosts")]
[NpgsqlConnectionStringPropertyAttribute]
public bool LoadBalanceHosts { get; public set; }
    [CategoryAttribute("Failover and load balancing")]
[DescriptionAttribute("Controls for how long the host's cached state will be considered as valid.")]
[DisplayNameAttribute("Host Recheck Seconds")]
[DefaultValueAttribute("10")]
[NpgsqlConnectionStringPropertyAttribute]
public int HostRecheckSeconds { get; public set; }
    [CategoryAttribute("Entity Framework")]
[DescriptionAttribute("The database template to specify when creating a database in Entity Framework. If not specified, PostgreSQL defaults to "template1".")]
[DisplayNameAttribute("EF Template Database")]
[NpgsqlConnectionStringPropertyAttribute]
public string EntityTemplateDatabase { get; public set; }
    [CategoryAttribute("Entity Framework")]
[DescriptionAttribute("The database admin to specify when creating and dropping a database in Entity Framework. If not specified, defaults to "template1".")]
[DisplayNameAttribute("EF Admin Database")]
[NpgsqlConnectionStringPropertyAttribute]
public string EntityAdminDatabase { get; public set; }
    [CategoryAttribute("Advanced")]
[DescriptionAttribute("The number of seconds of connection inactivity before Npgsql sends a keepalive query.")]
[DisplayNameAttribute("Keepalive")]
[NpgsqlConnectionStringPropertyAttribute]
public int KeepAlive { get; public set; }
    [CategoryAttribute("Advanced")]
[DescriptionAttribute("Whether to use TCP keepalive with system defaults if overrides isn't specified.")]
[DisplayNameAttribute("TCP Keepalive")]
[NpgsqlConnectionStringPropertyAttribute]
public bool TcpKeepAlive { get; public set; }
    [CategoryAttribute("Advanced")]
[DescriptionAttribute("The number of seconds of connection inactivity before a TCP keepalive query is sent.")]
[DisplayNameAttribute("TCP Keepalive Time")]
[NpgsqlConnectionStringPropertyAttribute]
public int TcpKeepAliveTime { get; public set; }
    [CategoryAttribute("Advanced")]
[DescriptionAttribute("The interval, in seconds, between when successive keep-alive packets are sent if no acknowledgement is received.")]
[DisplayNameAttribute("TCP Keepalive Interval")]
[NpgsqlConnectionStringPropertyAttribute]
public int TcpKeepAliveInterval { get; public set; }
    [CategoryAttribute("Advanced")]
[DescriptionAttribute("Determines the size of the internal buffer Npgsql uses when reading. Increasing may improve performance if transferring large values from the database.")]
[DisplayNameAttribute("Read Buffer Size")]
[NpgsqlConnectionStringPropertyAttribute]
[DefaultValueAttribute("8192")]
public int ReadBufferSize { get; public set; }
    [CategoryAttribute("Advanced")]
[DescriptionAttribute("Determines the size of the internal buffer Npgsql uses when writing. Increasing may improve performance if transferring large values to the database.")]
[DisplayNameAttribute("Write Buffer Size")]
[NpgsqlConnectionStringPropertyAttribute]
[DefaultValueAttribute("8192")]
public int WriteBufferSize { get; public set; }
    [CategoryAttribute("Advanced")]
[DescriptionAttribute("Determines the size of socket receive buffer.")]
[DisplayNameAttribute("Socket Receive Buffer Size")]
[NpgsqlConnectionStringPropertyAttribute]
public int SocketReceiveBufferSize { get; public set; }
    [CategoryAttribute("Advanced")]
[DescriptionAttribute("Determines the size of socket send buffer.")]
[DisplayNameAttribute("Socket Send Buffer Size")]
[NpgsqlConnectionStringPropertyAttribute]
public int SocketSendBufferSize { get; public set; }
    [CategoryAttribute("Advanced")]
[DescriptionAttribute("The maximum number SQL statements that can be automatically prepared at any given point. Beyond this number the least-recently-used statement will be recycled. Zero (the default) disables automatic preparation.")]
[DisplayNameAttribute("Max Auto Prepare")]
[NpgsqlConnectionStringPropertyAttribute]
public int MaxAutoPrepare { get; public set; }
    [CategoryAttribute("Advanced")]
[DescriptionAttribute("The minimum number of usages an SQL statement is used before it's automatically prepared. Defaults to 5.")]
[DisplayNameAttribute("Auto Prepare Min Usages")]
[NpgsqlConnectionStringPropertyAttribute]
[DefaultValueAttribute("5")]
public int AutoPrepareMinUsages { get; public set; }
    [CategoryAttribute("Advanced")]
[DescriptionAttribute("If set to true, a pool connection's state won't be reset when it is closed (improves performance). Do not specify this unless you know what you're doing.")]
[DisplayNameAttribute("No Reset On Close")]
[NpgsqlConnectionStringPropertyAttribute]
public bool NoResetOnClose { get; public set; }
    [CategoryAttribute("Advanced")]
[DescriptionAttribute("Load table composite type definitions, and not just free-standing composite types.")]
[DisplayNameAttribute("Load Table Composites")]
[NpgsqlConnectionStringPropertyAttribute]
public bool LoadTableComposites { get; public set; }
    [NpgsqlConnectionStringPropertyAttribute]
[DisplayNameAttribute("Replication Mode")]
internal ReplicationMode ReplicationMode { get; internal set; }
    [CategoryAttribute("Advanced")]
[DescriptionAttribute("Set PostgreSQL configuration parameter default values for the connection.")]
[DisplayNameAttribute("Options")]
[NpgsqlConnectionStringPropertyAttribute]
public string Options { get; public set; }
    [CategoryAttribute("Advanced")]
[DescriptionAttribute("Configure the way arrays of value types are returned when requested as object instances.")]
[DisplayNameAttribute("Array Nullability Mode")]
[NpgsqlConnectionStringPropertyAttribute]
public ArrayNullabilityMode ArrayNullabilityMode { get; public set; }
    [CategoryAttribute("Multiplexing")]
[DescriptionAttribute("Enables multiplexing, which allows more efficient use of connections.")]
[DisplayNameAttribute("Multiplexing")]
[NpgsqlConnectionStringPropertyAttribute]
[DefaultValueAttribute("False")]
public bool Multiplexing { get; public set; }
    [CategoryAttribute("Multiplexing")]
[DescriptionAttribute("When multiplexing is enabled, determines the maximum number of outgoing bytes to buffer before flushing to the network.")]
[DisplayNameAttribute("Write Coalescing Buffer Threshold Bytes")]
[NpgsqlConnectionStringPropertyAttribute]
[DefaultValueAttribute("1000")]
public int WriteCoalescingBufferThresholdBytes { get; public set; }
    [CategoryAttribute("Compatibility")]
[DescriptionAttribute("A compatibility mode for special PostgreSQL server types.")]
[DisplayNameAttribute("Server Compatibility Mode")]
[NpgsqlConnectionStringPropertyAttribute]
public ServerCompatibilityMode ServerCompatibilityMode { get; public set; }
    [CategoryAttribute("Compatibility")]
[DescriptionAttribute("Makes MaxValue and MinValue timestamps and dates readable as infinity and negative infinity.")]
[DisplayNameAttribute("Convert Infinity DateTime")]
[NpgsqlConnectionStringPropertyAttribute]
[ObsoleteAttribute("The ConvertInfinityDateTime parameter is no longer supported.")]
public bool ConvertInfinityDateTime { get; public set; }
    [CategoryAttribute("Obsolete")]
[DescriptionAttribute("Obsolete, see https://www.npgsql.org/doc/release-notes/3.1.html")]
[DisplayNameAttribute("Continuous Processing")]
[NpgsqlConnectionStringPropertyAttribute]
[ObsoleteAttribute("The ContinuousProcessing parameter is no longer supported.")]
public bool ContinuousProcessing { get; public set; }
    [CategoryAttribute("Obsolete")]
[DescriptionAttribute("Obsolete, see https://www.npgsql.org/doc/release-notes/3.1.html")]
[DisplayNameAttribute("Backend Timeouts")]
[NpgsqlConnectionStringPropertyAttribute]
[ObsoleteAttribute("The BackendTimeouts parameter is no longer supported")]
public bool BackendTimeouts { get; public set; }
    [CategoryAttribute("Obsolete")]
[DescriptionAttribute("Obsolete, see https://www.npgsql.org/doc/v/3.0.html")]
[DisplayNameAttribute("Preload Reader")]
[NpgsqlConnectionStringPropertyAttribute]
[ObsoleteAttribute("The PreloadReader parameter is no longer supported")]
public bool PreloadReader { get; public set; }
    [CategoryAttribute("Obsolete")]
[DescriptionAttribute("Obsolete, see https://www.npgsql.org/doc/release-notes/3.0.html")]
[DisplayNameAttribute("Use Extended Types")]
[NpgsqlConnectionStringPropertyAttribute]
[ObsoleteAttribute("The UseExtendedTypes parameter is no longer supported")]
public bool UseExtendedTypes { get; public set; }
    [CategoryAttribute("Obsolete")]
[DescriptionAttribute("Obsolete, see https://www.npgsql.org/doc/release-notes/4.1.html")]
[DisplayNameAttribute("Use Ssl Stream")]
[NpgsqlConnectionStringPropertyAttribute]
[ObsoleteAttribute("The UseSslStream parameter is no longer supported (always true)")]
public bool UseSslStream { get; public set; }
    [CategoryAttribute("Obsolete")]
[DescriptionAttribute("Writes connection performance information to performance counters.")]
[DisplayNameAttribute("Use Perf Counters")]
[NpgsqlConnectionStringPropertyAttribute]
[ObsoleteAttribute("The UsePerfCounters parameter is no longer supported")]
public bool UsePerfCounters { get; public set; }
    [CategoryAttribute("Obsolete")]
[DescriptionAttribute("Location of a client certificate to be sent to the server.")]
[DisplayNameAttribute("Client Certificate")]
[NpgsqlConnectionStringPropertyAttribute]
[ObsoleteAttribute("Use NpgsqlConnectionStringBuilder.SslKey instead")]
public string ClientCertificate { get; public set; }
    [CategoryAttribute("Obsolete")]
[DescriptionAttribute("Key for a client certificate to be sent to the server.")]
[DisplayNameAttribute("Client Certificate Key")]
[NpgsqlConnectionStringPropertyAttribute]
[ObsoleteAttribute("Use NpgsqlConnectionStringBuilder.SslPassword instead")]
public string ClientCertificateKey { get; public set; }
    [CategoryAttribute("Obsolete")]
[DescriptionAttribute("When enabled, PostgreSQL error and notice details are included on PostgresException.Detail and PostgresNotice.Detail. These can contain sensitive data.")]
[DisplayNameAttribute("Include Error Details")]
[NpgsqlConnectionStringPropertyAttribute]
[ObsoleteAttribute("Use NpgsqlConnectionStringBuilder.IncludeErrorDetail instead")]
public bool IncludeErrorDetails { get; public set; }
    [NullableAttribute("1")]
internal string ConnectionStringForMultipleHosts { get; }
    [NullableAttribute("1")]
public ICollection`1<string> Keys { get; }
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public ICollection`1<object> Values { get; }
    public NpgsqlConnectionStringBuilder(bool useOdbcRules);
    public NpgsqlConnectionStringBuilder(string connectionString);
    [NullableContextAttribute("1")]
internal string get_DataSourceCached();
    internal TimeSpan get_HostRecheckSecondsTranslated();
    private int Init();
    [NullableContextAttribute("1")]
public virtual object get_Item(string keyword);
    [NullableContextAttribute("1")]
public virtual void set_Item(string keyword, object value);
    [NullableContextAttribute("1")]
private int GeneratedSetter(string keyword, object value);
    [NullableContextAttribute("1")]
private sealed virtual override object System.Collections.Generic.IDictionary<System.String,System.Object>.get_Item(string keyword);
    [NullableContextAttribute("1")]
private sealed virtual override void System.Collections.Generic.IDictionary<System.String,System.Object>.set_Item(string keyword, object value);
    public sealed virtual void Add(KeyValuePair`2<string, object> item);
    [NullableContextAttribute("1")]
private sealed virtual override void System.Collections.Generic.IDictionary<System.String,System.Object>.Add(string keyword, object value);
    [NullableContextAttribute("1")]
public virtual bool Remove(string keyword);
    [NullableContextAttribute("1")]
private bool RemoveGenerated(string keyword);
    public sealed virtual bool Remove(KeyValuePair`2<string, object> item);
    public virtual void Clear();
    [NullableContextAttribute("1")]
public virtual bool ContainsKey(string keyword);
    [NullableContextAttribute("1")]
private bool ContainsKeyGenerated(string keyword);
    public sealed virtual bool Contains(KeyValuePair`2<string, object> item);
    [NullableContextAttribute("1")]
public virtual bool TryGetValue(string keyword, Object& value);
    [NullableContextAttribute("1")]
private bool TryGetValueGenerated(string keyword, Object& value);
    [NullableContextAttribute("1")]
private void SetValue(string propertyName, object value);
    [NullableContextAttribute("1")]
private string ToCanonicalKeyword(string keyword);
    public string get_Host();
    public void set_Host(string value);
    public int get_Port();
    public void set_Port(int value);
    public string get_Database();
    public void set_Database(string value);
    public string get_Username();
    public void set_Username(string value);
    public string get_Password();
    public void set_Password(string value);
    public string get_Passfile();
    public void set_Passfile(string value);
    public string get_ApplicationName();
    public void set_ApplicationName(string value);
    public bool get_Enlist();
    public void set_Enlist(bool value);
    public string get_SearchPath();
    public void set_SearchPath(string value);
    public string get_ClientEncoding();
    public void set_ClientEncoding(string value);
    [NullableContextAttribute("1")]
public string get_Encoding();
    [NullableContextAttribute("1")]
public void set_Encoding(string value);
    public string get_Timezone();
    public void set_Timezone(string value);
    public SslMode get_SslMode();
    public void set_SslMode(SslMode value);
    public bool get_TrustServerCertificate();
    public void set_TrustServerCertificate(bool value);
    public string get_SslCertificate();
    public void set_SslCertificate(string value);
    public string get_SslKey();
    public void set_SslKey(string value);
    public string get_SslPassword();
    public void set_SslPassword(string value);
    public string get_RootCertificate();
    public void set_RootCertificate(string value);
    public bool get_CheckCertificateRevocation();
    public void set_CheckCertificateRevocation(bool value);
    public bool get_IntegratedSecurity();
    public void set_IntegratedSecurity(bool value);
    [NullableContextAttribute("1")]
public string get_KerberosServiceName();
    [NullableContextAttribute("1")]
public void set_KerberosServiceName(string value);
    public bool get_IncludeRealm();
    public void set_IncludeRealm(bool value);
    public bool get_PersistSecurityInfo();
    public void set_PersistSecurityInfo(bool value);
    public bool get_LogParameters();
    public void set_LogParameters(bool value);
    public bool get_IncludeErrorDetail();
    public void set_IncludeErrorDetail(bool value);
    public bool get_Pooling();
    public void set_Pooling(bool value);
    public int get_MinPoolSize();
    public void set_MinPoolSize(int value);
    public int get_MaxPoolSize();
    public void set_MaxPoolSize(int value);
    public int get_ConnectionIdleLifetime();
    public void set_ConnectionIdleLifetime(int value);
    public int get_ConnectionPruningInterval();
    public void set_ConnectionPruningInterval(int value);
    public int get_ConnectionLifetime();
    public void set_ConnectionLifetime(int value);
    public int get_Timeout();
    public void set_Timeout(int value);
    public int get_CommandTimeout();
    public void set_CommandTimeout(int value);
    public int get_InternalCommandTimeout();
    public void set_InternalCommandTimeout(int value);
    public int get_CancellationTimeout();
    public void set_CancellationTimeout(int value);
    public string get_TargetSessionAttributes();
    public void set_TargetSessionAttributes(string value);
    [CompilerGeneratedAttribute]
internal Nullable`1<TargetSessionAttributes> get_TargetSessionAttributesParsed();
    [CompilerGeneratedAttribute]
internal void set_TargetSessionAttributesParsed(Nullable`1<TargetSessionAttributes> value);
    [NullableContextAttribute("1")]
internal static TargetSessionAttributes ParseTargetSessionAttributes(string s);
    public bool get_LoadBalanceHosts();
    public void set_LoadBalanceHosts(bool value);
    public int get_HostRecheckSeconds();
    public void set_HostRecheckSeconds(int value);
    public string get_EntityTemplateDatabase();
    public void set_EntityTemplateDatabase(string value);
    public string get_EntityAdminDatabase();
    public void set_EntityAdminDatabase(string value);
    public int get_KeepAlive();
    public void set_KeepAlive(int value);
    public bool get_TcpKeepAlive();
    public void set_TcpKeepAlive(bool value);
    public int get_TcpKeepAliveTime();
    public void set_TcpKeepAliveTime(int value);
    public int get_TcpKeepAliveInterval();
    public void set_TcpKeepAliveInterval(int value);
    public int get_ReadBufferSize();
    public void set_ReadBufferSize(int value);
    public int get_WriteBufferSize();
    public void set_WriteBufferSize(int value);
    public int get_SocketReceiveBufferSize();
    public void set_SocketReceiveBufferSize(int value);
    public int get_SocketSendBufferSize();
    public void set_SocketSendBufferSize(int value);
    public int get_MaxAutoPrepare();
    public void set_MaxAutoPrepare(int value);
    public int get_AutoPrepareMinUsages();
    public void set_AutoPrepareMinUsages(int value);
    public bool get_NoResetOnClose();
    public void set_NoResetOnClose(bool value);
    public bool get_LoadTableComposites();
    public void set_LoadTableComposites(bool value);
    internal ReplicationMode get_ReplicationMode();
    internal void set_ReplicationMode(ReplicationMode value);
    public string get_Options();
    public void set_Options(string value);
    public ArrayNullabilityMode get_ArrayNullabilityMode();
    public void set_ArrayNullabilityMode(ArrayNullabilityMode value);
    public bool get_Multiplexing();
    public void set_Multiplexing(bool value);
    public int get_WriteCoalescingBufferThresholdBytes();
    public void set_WriteCoalescingBufferThresholdBytes(int value);
    public ServerCompatibilityMode get_ServerCompatibilityMode();
    public void set_ServerCompatibilityMode(ServerCompatibilityMode value);
    public bool get_ConvertInfinityDateTime();
    public void set_ConvertInfinityDateTime(bool value);
    public bool get_ContinuousProcessing();
    public void set_ContinuousProcessing(bool value);
    public bool get_BackendTimeouts();
    public void set_BackendTimeouts(bool value);
    public bool get_PreloadReader();
    public void set_PreloadReader(bool value);
    public bool get_UseExtendedTypes();
    public void set_UseExtendedTypes(bool value);
    public bool get_UseSslStream();
    public void set_UseSslStream(bool value);
    public bool get_UsePerfCounters();
    public void set_UsePerfCounters(bool value);
    public string get_ClientCertificate();
    public void set_ClientCertificate(string value);
    public string get_ClientCertificateKey();
    public void set_ClientCertificateKey(string value);
    public bool get_IncludeErrorDetails();
    public void set_IncludeErrorDetails(bool value);
    internal void PostProcessAndValidate();
    [NullableContextAttribute("1")]
internal string ToStringWithoutPassword();
    [NullableContextAttribute("1")]
internal string get_ConnectionStringForMultipleHosts();
    [NullableContextAttribute("1")]
internal NpgsqlConnectionStringBuilder Clone();
    [NullableContextAttribute("0")]
internal static bool TrySplitHostPort(ReadOnlySpan`1<char> originalHost, String& host, Int32& port);
    [NullableContextAttribute("1")]
internal static bool IsUnixSocket(string host, int port, String& socketPath, bool replaceForAbstract);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
    [NullableContextAttribute("1")]
public sealed virtual ICollection`1<string> get_Keys();
    public sealed virtual ICollection`1<object> get_Values();
    public sealed virtual void CopyTo(KeyValuePair`2[] array, int arrayIndex);
    [IteratorStateMachineAttribute("Npgsql.NpgsqlConnectionStringBuilder/<GetEnumerator>d__311")]
public sealed virtual IEnumerator`1<KeyValuePair`2<string, object>> GetEnumerator();
    [NullableContextAttribute("1")]
protected virtual void GetProperties(Hashtable propertyDescriptors);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[AttributeUsageAttribute("128")]
internal class Npgsql.NpgsqlConnectionStringPropertyAttribute : Attribute {
    [CompilerGeneratedAttribute]
private String[] <Synonyms>k__BackingField;
    public String[] Synonyms { get; }
    public NpgsqlConnectionStringPropertyAttribute(String[] synonyms);
    [CompilerGeneratedAttribute]
public String[] get_Synonyms();
}
public class Npgsql.NpgsqlCopyTextReader : StreamReader {
    [NullableContextAttribute("1")]
internal NpgsqlCopyTextReader(NpgsqlConnector connector, NpgsqlRawCopyStream underlying);
    public sealed virtual void Cancel();
    [NullableContextAttribute("1")]
public sealed virtual Task CancelAsync();
    public sealed virtual ValueTask DisposeAsync();
}
public class Npgsql.NpgsqlCopyTextWriter : StreamWriter {
    [NullableContextAttribute("1")]
internal NpgsqlCopyTextWriter(NpgsqlConnector connector, NpgsqlRawCopyStream underlying);
    public sealed virtual void Cancel();
    [NullableContextAttribute("1")]
public sealed virtual Task CancelAsync();
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
[DesignerCategoryAttribute("")]
public class Npgsql.NpgsqlDataAdapter : DbDataAdapter {
    [CompilerGeneratedAttribute]
private NpgsqlRowUpdatedEventHandler RowUpdated;
    [CompilerGeneratedAttribute]
private NpgsqlRowUpdatingEventHandler RowUpdating;
    public NpgsqlCommand DeleteCommand { get; public set; }
    public NpgsqlCommand SelectCommand { get; public set; }
    public NpgsqlCommand UpdateCommand { get; public set; }
    public NpgsqlCommand InsertCommand { get; public set; }
    [NullableContextAttribute("1")]
public NpgsqlDataAdapter(NpgsqlCommand selectCommand);
    [NullableContextAttribute("1")]
public NpgsqlDataAdapter(string selectCommandText, NpgsqlConnection selectConnection);
    [NullableContextAttribute("1")]
public NpgsqlDataAdapter(string selectCommandText, string selectConnectionString);
    [CompilerGeneratedAttribute]
public void add_RowUpdated(NpgsqlRowUpdatedEventHandler value);
    [CompilerGeneratedAttribute]
public void remove_RowUpdated(NpgsqlRowUpdatedEventHandler value);
    [CompilerGeneratedAttribute]
public void add_RowUpdating(NpgsqlRowUpdatingEventHandler value);
    [CompilerGeneratedAttribute]
public void remove_RowUpdating(NpgsqlRowUpdatingEventHandler value);
    [NullableContextAttribute("1")]
protected virtual RowUpdatedEventArgs CreateRowUpdatedEvent(DataRow dataRow, IDbCommand command, StatementType statementType, DataTableMapping tableMapping);
    [NullableContextAttribute("1")]
protected virtual RowUpdatingEventArgs CreateRowUpdatingEvent(DataRow dataRow, IDbCommand command, StatementType statementType, DataTableMapping tableMapping);
    [NullableContextAttribute("1")]
protected virtual void OnRowUpdated(RowUpdatedEventArgs value);
    [NullableContextAttribute("1")]
protected virtual void OnRowUpdating(RowUpdatingEventArgs value);
    public NpgsqlCommand get_DeleteCommand();
    public void set_DeleteCommand(NpgsqlCommand value);
    public NpgsqlCommand get_SelectCommand();
    public void set_SelectCommand(NpgsqlCommand value);
    public NpgsqlCommand get_UpdateCommand();
    public void set_UpdateCommand(NpgsqlCommand value);
    public NpgsqlCommand get_InsertCommand();
    public void set_InsertCommand(NpgsqlCommand value);
    [NullableContextAttribute("1")]
[AsyncStateMachineAttribute("Npgsql.NpgsqlDataAdapter/<Fill>d__26")]
internal Task`1<int> Fill(DataTable dataTable, bool async, CancellationToken cancellationToken);
    [NullableContextAttribute("1")]
[AsyncStateMachineAttribute("Npgsql.NpgsqlDataAdapter/<Fill>d__27")]
private Task`1<int> Fill(DataTable dataTable, NpgsqlDataReader dataReader, bool async, CancellationToken cancellationToken);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[DefaultMemberAttribute("Item")]
public class Npgsql.NpgsqlDataReader : DbDataReader {
    [CompilerGeneratedAttribute]
private NpgsqlCommand <Command>k__BackingField;
    [CompilerGeneratedAttribute]
private NpgsqlConnector <Connector>k__BackingField;
    [NullableAttribute("2")]
private NpgsqlConnection _connection;
    private CommandBehavior _behavior;
    [NullableAttribute("2")]
private Task _sendTask;
    internal ReaderState State;
    internal NpgsqlReadBuffer Buffer;
    private List`1<NpgsqlBatchCommand> _statements;
    [CompilerGeneratedAttribute]
private int <StatementIndex>k__BackingField;
    private int _numColumns;
    [TupleElementNamesAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private List`1<ValueTuple`2<int, int>> _columns;
    private int _column;
    internal int ColumnLen;
    internal int PosInColumn;
    private int _dataMsgEnd;
    private bool _canConsumeRowNonSequentially;
    private int _charPos;
    [NullableAttribute("2")]
internal RowDescriptionMessage RowDescription;
    private Nullable`1<ulong> _recordsAffected;
    private bool _hasRows;
    [NullableAttribute("2")]
[CompilerGeneratedAttribute]
private EventHandler ReaderClosed;
    private bool _isSchemaOnly;
    private bool _isSequential;
    [NullableAttribute("2")]
private ColumnStream _columnStream;
    [NullableAttribute("2")]
private Char[] _tempCharBuf;
    internal ulong UniqueRowId;
    [NullableAttribute("2")]
internal NpgsqlNestedDataReader CachedFreeNestedDataReader;
    private ILogger _commandLogger;
    internal NpgsqlCommand Command { get; private set; }
    internal NpgsqlConnector Connector { get; }
    internal int StatementIndex { get; private set; }
    public int Depth { get; }
    public bool IsClosed { get; }
    public int RecordsAffected { get; }
    public ulong Rows { get; }
    [ObsoleteAttribute("Use the new DbBatch API")]
public IReadOnlyList`1<NpgsqlBatchCommand> Statements { get; }
    public bool HasRows { get; }
    public bool IsOnRow { get; }
    public int FieldCount { get; }
    public object Item { get; }
    public object Item { get; }
    internal NpgsqlDataReader(NpgsqlConnector connector);
    [CompilerGeneratedAttribute]
internal NpgsqlCommand get_Command();
    [CompilerGeneratedAttribute]
private void set_Command(NpgsqlCommand value);
    [CompilerGeneratedAttribute]
internal NpgsqlConnector get_Connector();
    [CompilerGeneratedAttribute]
internal int get_StatementIndex();
    [CompilerGeneratedAttribute]
private void set_StatementIndex(int value);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public void add_ReaderClosed(EventHandler value);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public void remove_ReaderClosed(EventHandler value);
    internal void Init(NpgsqlCommand command, CommandBehavior behavior, List`1<NpgsqlBatchCommand> statements, Task sendTask);
    public virtual bool Read();
    public virtual Task`1<bool> ReadAsync(CancellationToken cancellationToken);
    private Nullable`1<bool> TryFastRead();
    [AsyncStateMachineAttribute("Npgsql.NpgsqlDataReader/<Read>d__43")]
private Task`1<bool> Read(bool async, CancellationToken cancellationToken);
    private ValueTask`1<IBackendMessage> ReadMessage(bool async);
    public virtual bool NextResult();
    public virtual Task`1<bool> NextResultAsync(CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Npgsql.NpgsqlDataReader/<NextResult>d__47")]
private Task`1<bool> NextResult(bool async, bool isConsuming, CancellationToken cancellationToken);
    private void PopulateOutputParameters();
    [AsyncStateMachineAttribute("Npgsql.NpgsqlDataReader/<NextResultSchemaOnly>d__49")]
private Task`1<bool> NextResultSchemaOnly(bool async, bool isConsuming, CancellationToken cancellationToken);
    internal void ProcessMessage(IBackendMessage msg);
    private void ProcessDataRowMessage(DataRowMessage msg);
    private void Cancel();
    public virtual int get_Depth();
    public virtual bool get_IsClosed();
    public virtual int get_RecordsAffected();
    public ulong get_Rows();
    public IReadOnlyList`1<NpgsqlBatchCommand> get_Statements();
    public virtual bool get_HasRows();
    public bool get_IsOnRow();
    public virtual string GetName(int ordinal);
    public virtual int get_FieldCount();
    [AsyncStateMachineAttribute("Npgsql.NpgsqlDataReader/<Consume>d__70")]
private Task Consume(bool async, Exception firstException);
    protected virtual void Dispose(bool disposing);
    public virtual ValueTask DisposeAsync();
    public virtual void Close();
    public virtual Task CloseAsync();
    [AsyncStateMachineAttribute("Npgsql.NpgsqlDataReader/<Close>d__75")]
internal Task Close(bool connectionClosing, bool async, bool isDisposing);
    [AsyncStateMachineAttribute("Npgsql.NpgsqlDataReader/<Cleanup>d__76")]
internal Task Cleanup(bool async, bool connectionClosing, bool isDisposing);
    public virtual bool GetBoolean(int ordinal);
    public virtual byte GetByte(int ordinal);
    public virtual char GetChar(int ordinal);
    public virtual short GetInt16(int ordinal);
    public virtual int GetInt32(int ordinal);
    public virtual long GetInt64(int ordinal);
    public virtual DateTime GetDateTime(int ordinal);
    public virtual string GetString(int ordinal);
    public virtual decimal GetDecimal(int ordinal);
    public virtual double GetDouble(int ordinal);
    public virtual float GetFloat(int ordinal);
    public virtual Guid GetGuid(int ordinal);
    public virtual int GetValues(Object[] values);
    public virtual object get_Item(int ordinal);
    public TimeSpan GetTimeSpan(int ordinal);
    protected virtual DbDataReader GetDbDataReader(int ordinal);
    public NpgsqlNestedDataReader GetData(int ordinal);
    [NullableContextAttribute("2")]
public virtual long GetBytes(int ordinal, long dataOffset, Byte[] buffer, int bufferOffset, int length);
    public virtual Stream GetStream(int ordinal);
    public Task`1<Stream> GetStreamAsync(int ordinal, CancellationToken cancellationToken);
    private ValueTask`1<Stream> GetStream(int ordinal, bool async, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Npgsql.NpgsqlDataReader/<GetStreamInternal>d__99")]
private ValueTask`1<Stream> GetStreamInternal(FieldDescription field, int ordinal, bool async, CancellationToken cancellationToken);
    [NullableContextAttribute("2")]
public virtual long GetChars(int ordinal, long dataOffset, Char[] buffer, int bufferOffset, int length);
    private ValueTuple`2<int, int> DecodeChars(Decoder decoder, Char[] output, int outputOffset, int charCount, int byteCount);
    [NullableContextAttribute("0")]
internal ValueTuple`2<int, int> SkipChars(Decoder decoder, int charCount, int byteCount);
    public virtual TextReader GetTextReader(int ordinal);
    public Task`1<TextReader> GetTextReaderAsync(int ordinal, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Npgsql.NpgsqlDataReader/<GetTextReader>d__105")]
private ValueTask`1<TextReader> GetTextReader(int ordinal, bool async, CancellationToken cancellationToken);
    public virtual Task`1<T> GetFieldValueAsync(int ordinal, CancellationToken cancellationToken);
    public virtual T GetFieldValue(int ordinal);
    [NullableContextAttribute("2")]
[AsyncStateMachineAttribute("Npgsql.NpgsqlDataReader/<GetFieldValueSequential>d__108`1")]
private ValueTask`1<T> GetFieldValueSequential(int column, bool async, CancellationToken cancellationToken);
    public virtual object GetValue(int ordinal);
    public virtual object GetProviderSpecificValue(int ordinal);
    public virtual object get_Item(string name);
    public virtual bool IsDBNull(int ordinal);
    public virtual Task`1<bool> IsDBNullAsync(int ordinal, CancellationToken cancellationToken);
    public virtual int GetOrdinal(string name);
    public PostgresType GetPostgresType(int ordinal);
    public virtual string GetDataTypeName(int ordinal);
    public UInt32 GetDataTypeOID(int ordinal);
    public virtual Type GetFieldType(int ordinal);
    public virtual Type GetProviderSpecificFieldType(int ordinal);
    public virtual int GetProviderSpecificValues(Object[] values);
    public virtual IEnumerator GetEnumerator();
    public ReadOnlyCollection`1<NpgsqlDbColumn> GetColumnSchema();
    private sealed virtual override ReadOnlyCollection`1<DbColumn> System.Data.Common.IDbColumnSchemaGenerator.GetColumnSchema();
    public Task`1<ReadOnlyCollection`1<NpgsqlDbColumn>> GetColumnSchemaAsync(CancellationToken cancellationToken);
    private Task`1<ReadOnlyCollection`1<NpgsqlDbColumn>> GetColumnSchema(bool async, CancellationToken cancellationToken);
    [NullableContextAttribute("2")]
[UnconditionalSuppressMessageAttribute("Composite type mapping currently isn't trimming-safe, and warnings are generated at the MapComposite level.", "IL2026")]
public virtual DataTable GetSchemaTable();
    [UnconditionalSuppressMessageAttribute("Composite type mapping currently isn't trimming-safe, and warnings are generated at the MapComposite level.", "IL2026")]
public virtual Task`1<DataTable> GetSchemaTableAsync(CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Npgsql.NpgsqlDataReader/<GetSchemaTable>d__129")]
[UnconditionalSuppressMessageAttribute("Composite type mapping currently isn't trimming-safe, and warnings are generated at the MapComposite level.", "IL2026")]
private Task`1<DataTable> GetSchemaTable(bool async, CancellationToken cancellationToken);
    private Task SeekToColumn(int column, bool async, CancellationToken cancellationToken);
    private void SeekToColumnNonSequential(int column);
    [AsyncStateMachineAttribute("Npgsql.NpgsqlDataReader/<SeekToColumnSequential>d__132")]
private Task SeekToColumnSequential(int column, bool async, CancellationToken cancellationToken);
    private Task SeekInColumn(int posInColumn, bool async, CancellationToken cancellationToken);
    private Task ConsumeRow(bool async);
    private void ConsumeRowNonSequential();
    private void CheckResultSet();
    private FieldDescription CheckRowAndGetField(int column);
    private FieldDescription GetField(int column);
    private void CheckColumnStart();
    private void CheckClosedOrDisposed();
    internal void UnbindIfNecessary();
    [AsyncStateMachineAttribute("Npgsql.NpgsqlDataReader/<<ReadMessage>g__ReadMessageSequential|44_0>d")]
[CompilerGeneratedAttribute]
internal static ValueTask`1<IBackendMessage> <ReadMessage>g__ReadMessageSequential|44_0(NpgsqlConnector connector, bool async);
    [AsyncStateMachineAttribute("Npgsql.NpgsqlDataReader/<<DisposeAsync>g__DisposeAsyncCore|72_0>d")]
[CompilerGeneratedAttribute]
private ValueTask <DisposeAsync>g__DisposeAsyncCore|72_0();
    [AsyncStateMachineAttribute("Npgsql.NpgsqlDataReader/<<IsDBNullAsync>g__IsDBNullAsyncInternal|114_0>d")]
[CompilerGeneratedAttribute]
private Task`1<bool> <IsDBNullAsync>g__IsDBNullAsyncInternal|114_0(int ordinal, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Npgsql.NpgsqlDataReader/<<SeekInColumn>g__SeekInColumnSequential|133_0>d")]
[CompilerGeneratedAttribute]
private Task <SeekInColumn>g__SeekInColumnSequential|133_0(int posInColumn, bool async);
    [AsyncStateMachineAttribute("Npgsql.NpgsqlDataReader/<<ConsumeRow>g__ConsumeRowSequential|134_0>d")]
[CompilerGeneratedAttribute]
private Task <ConsumeRow>g__ConsumeRowSequential|134_0(bool async);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public abstract class Npgsql.NpgsqlDataSource : DbDataSource {
    [CompilerGeneratedAttribute]
private string <ConnectionString>k__BackingField;
    [CompilerGeneratedAttribute]
private NpgsqlConnectionStringBuilder <Settings>k__BackingField;
    [CompilerGeneratedAttribute]
private NpgsqlDataSourceConfiguration <Configuration>k__BackingField;
    [CompilerGeneratedAttribute]
private NpgsqlLoggingConfiguration <LoggingConfiguration>k__BackingField;
    private List`1<TypeHandlerResolverFactory> _resolverFactories;
    private Dictionary`2<string, IUserTypeMapping> _userTypeMappings;
    private INpgsqlNameTranslator _defaultNameTranslator;
    [CompilerGeneratedAttribute]
private TypeMapper <TypeMapper>k__BackingField;
    [CompilerGeneratedAttribute]
private NpgsqlDatabaseInfo <DatabaseInfo>k__BackingField;
    [NullableAttribute("2")]
[CompilerGeneratedAttribute]
private RemoteCertificateValidationCallback <UserCertificateValidationCallback>k__BackingField;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[CompilerGeneratedAttribute]
private Action`1<X509CertificateCollection> <ClientCertificatesCallback>k__BackingField;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private Func`3<NpgsqlConnectionStringBuilder, CancellationToken, ValueTask`1<string>> _periodicPasswordProvider;
    private TimeSpan _periodicPasswordSuccessRefreshInterval;
    private TimeSpan _periodicPasswordFailureRefreshInterval;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[CompilerGeneratedAttribute]
private Action`1<NpgsqlConnection> <ConnectionInitializer>k__BackingField;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[CompilerGeneratedAttribute]
private Func`2<NpgsqlConnection, Task> <ConnectionInitializerAsync>k__BackingField;
    [NullableAttribute("2")]
private Timer _passwordProviderTimer;
    [NullableAttribute("2")]
private CancellationTokenSource _timerPasswordProviderCancellationTokenSource;
    private Task _passwordRefreshTask;
    [NullableAttribute("2")]
private string _password;
    private bool _isBootstrapped;
    private DatabaseStateInfo modreq(System.Runtime.CompilerServices.IsVolatile) _databaseStateInfo;
    private protected Dictionary`2<Transaction, List`1<NpgsqlConnector>> _pendingEnlistedConnectors;
    private Int32 modreq(System.Runtime.CompilerServices.IsVolatile) _isDisposed;
    private ILogger _connectionLogger;
    private SemaphoreSlim _setupMappingsSemaphore;
    public string ConnectionString { get; }
    internal NpgsqlConnectionStringBuilder Settings { get; }
    internal NpgsqlDataSourceConfiguration Configuration { get; }
    internal NpgsqlLoggingConfiguration LoggingConfiguration { get; }
    internal TypeMapper TypeMapper { get; private set; }
    internal NpgsqlDatabaseInfo DatabaseInfo { get; internal set; }
    [NullableAttribute("2")]
internal RemoteCertificateValidationCallback UserCertificateValidationCallback { get; }
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
internal Action`1<X509CertificateCollection> ClientCertificatesCallback { get; }
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
internal Action`1<NpgsqlConnection> ConnectionInitializer { get; }
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
internal Func`2<NpgsqlConnection, Task> ConnectionInitializerAsync { get; }
    [TupleElementNamesAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[NullableAttribute("0")]
internal ValueTuple`3<int, int, int> Statistics { get; }
    unknown string Password {public set; }
    internal bool OwnsConnectors { get; }
    internal NpgsqlDataSource(NpgsqlConnectionStringBuilder settings, NpgsqlDataSourceConfiguration dataSourceConfig);
    [CompilerGeneratedAttribute]
public virtual string get_ConnectionString();
    [CompilerGeneratedAttribute]
internal NpgsqlConnectionStringBuilder get_Settings();
    [CompilerGeneratedAttribute]
internal NpgsqlDataSourceConfiguration get_Configuration();
    [CompilerGeneratedAttribute]
internal NpgsqlLoggingConfiguration get_LoggingConfiguration();
    [CompilerGeneratedAttribute]
internal TypeMapper get_TypeMapper();
    [CompilerGeneratedAttribute]
private void set_TypeMapper(TypeMapper value);
    [CompilerGeneratedAttribute]
internal NpgsqlDatabaseInfo get_DatabaseInfo();
    [CompilerGeneratedAttribute]
internal void set_DatabaseInfo(NpgsqlDatabaseInfo value);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
internal RemoteCertificateValidationCallback get_UserCertificateValidationCallback();
    [CompilerGeneratedAttribute]
internal Action`1<X509CertificateCollection> get_ClientCertificatesCallback();
    [CompilerGeneratedAttribute]
internal Action`1<NpgsqlConnection> get_ConnectionInitializer();
    [CompilerGeneratedAttribute]
internal Func`2<NpgsqlConnection, Task> get_ConnectionInitializerAsync();
    [NullableContextAttribute("0")]
internal abstract virtual ValueTuple`3<int, int, int> get_Statistics();
    public NpgsqlConnection CreateConnection();
    public NpgsqlConnection OpenConnection();
    protected virtual DbConnection OpenDbConnection();
    [AsyncStateMachineAttribute("Npgsql.NpgsqlDataSource/<OpenConnectionAsync>d__54")]
public ValueTask`1<NpgsqlConnection> OpenConnectionAsync(CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Npgsql.NpgsqlDataSource/<OpenDbConnectionAsync>d__55")]
protected virtual ValueTask`1<DbConnection> OpenDbConnectionAsync(CancellationToken cancellationToken);
    protected virtual DbConnection CreateDbConnection();
    protected virtual DbCommand CreateDbCommand(string commandText);
    protected virtual DbBatch CreateDbBatch();
    public NpgsqlCommand CreateCommand(string commandText);
    public NpgsqlBatch CreateBatch();
    public static NpgsqlDataSource Create(string connectionString);
    public static NpgsqlDataSource Create(NpgsqlConnectionStringBuilder connectionStringBuilder);
    [AsyncStateMachineAttribute("Npgsql.NpgsqlDataSource/<Bootstrap>d__63")]
internal Task Bootstrap(NpgsqlConnector connector, NpgsqlTimeout timeout, bool forceReload, bool async, CancellationToken cancellationToken);
    public void set_Password(string value);
    [AsyncStateMachineAttribute("Npgsql.NpgsqlDataSource/<GetPassword>d__66")]
internal ValueTask`1<string> GetPassword(bool async, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Npgsql.NpgsqlDataSource/<RefreshPassword>d__67")]
private Task RefreshPassword();
    internal abstract virtual ValueTask`1<NpgsqlConnector> Get(NpgsqlConnection conn, NpgsqlTimeout timeout, bool async, CancellationToken cancellationToken);
    [NullableContextAttribute("2")]
internal abstract virtual bool TryGetIdleConnector(NpgsqlConnector& connector);
    internal abstract virtual ValueTask`1<NpgsqlConnector> OpenNewConnector(NpgsqlConnection conn, NpgsqlTimeout timeout, bool async, CancellationToken cancellationToken);
    internal abstract virtual void Return(NpgsqlConnector connector);
    internal abstract virtual void Clear();
    internal abstract virtual bool get_OwnsConnectors();
    internal DatabaseState GetDatabaseState(bool ignoreExpiration);
    internal DatabaseState UpdateDatabaseState(DatabaseState newState, DateTime timeStamp, TimeSpan stateExpiration, bool ignoreTimeStamp);
    internal virtual void AddPendingEnlistedConnector(NpgsqlConnector connector, Transaction transaction);
    internal virtual bool TryRemovePendingEnlistedConnector(NpgsqlConnector connector, Transaction transaction);
    internal virtual bool TryRentEnlistedPending(Transaction transaction, NpgsqlConnection connection, NpgsqlConnector& connector);
    protected virtual void Dispose(bool disposing);
    protected virtual ValueTask DisposeAsyncCore();
    private protected void CheckDisposed();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
private void <.ctor>b__50_0(object state);
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
internal class Npgsql.NpgsqlDataSourceBatch : NpgsqlBatch {
    protected DbConnection DbConnection { get; protected set; }
    protected DbTransaction DbTransaction { get; protected set; }
    [NullableContextAttribute("1")]
internal NpgsqlDataSourceBatch(NpgsqlConnection connection);
    public virtual void Prepare();
    [NullableContextAttribute("1")]
public virtual Task PrepareAsync(CancellationToken cancellationToken);
    protected virtual DbConnection get_DbConnection();
    protected virtual void set_DbConnection(DbConnection value);
    protected virtual DbTransaction get_DbTransaction();
    protected virtual void set_DbTransaction(DbTransaction value);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Npgsql.NpgsqlDataSourceBuilder : object {
    [NullableAttribute("2")]
private ILoggerFactory _loggerFactory;
    private bool _sensitiveDataLoggingEnabled;
    [NullableAttribute("2")]
private RemoteCertificateValidationCallback _userCertificateValidationCallback;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private Action`1<X509CertificateCollection> _clientCertificatesCallback;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private Func`3<NpgsqlConnectionStringBuilder, CancellationToken, ValueTask`1<string>> _periodicPasswordProvider;
    private TimeSpan _periodicPasswordSuccessRefreshInterval;
    private TimeSpan _periodicPasswordFailureRefreshInterval;
    private List`1<TypeHandlerResolverFactory> _resolverFactories;
    private Dictionary`2<string, IUserTypeMapping> _userTypeMappings;
    [CompilerGeneratedAttribute]
private INpgsqlNameTranslator <DefaultNameTranslator>k__BackingField;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private Action`1<NpgsqlConnection> _syncConnectionInitializer;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private Func`2<NpgsqlConnection, Task> _asyncConnectionInitializer;
    [CompilerGeneratedAttribute]
private NpgsqlConnectionStringBuilder <ConnectionStringBuilder>k__BackingField;
    public INpgsqlNameTranslator DefaultNameTranslator { get; public set; }
    public NpgsqlConnectionStringBuilder ConnectionStringBuilder { get; }
    public string ConnectionString { get; }
    [NullableContextAttribute("2")]
public NpgsqlDataSourceBuilder(string connectionString);
    [CompilerGeneratedAttribute]
public sealed virtual INpgsqlNameTranslator get_DefaultNameTranslator();
    [CompilerGeneratedAttribute]
public sealed virtual void set_DefaultNameTranslator(INpgsqlNameTranslator value);
    [CompilerGeneratedAttribute]
public NpgsqlConnectionStringBuilder get_ConnectionStringBuilder();
    public string get_ConnectionString();
    public NpgsqlDataSourceBuilder UseLoggerFactory(ILoggerFactory loggerFactory);
    public NpgsqlDataSourceBuilder EnableParameterLogging(bool parameterLoggingEnabled);
    public NpgsqlDataSourceBuilder UseUserCertificateValidationCallback(RemoteCertificateValidationCallback userCertificateValidationCallback);
    public NpgsqlDataSourceBuilder UseClientCertificate(X509Certificate clientCertificate);
    public NpgsqlDataSourceBuilder UseClientCertificates(X509CertificateCollection clientCertificates);
    public NpgsqlDataSourceBuilder UseClientCertificatesCallback(Action`1<X509CertificateCollection> clientCertificatesCallback);
    public NpgsqlDataSourceBuilder UsePeriodicPasswordProvider(Func`3<NpgsqlConnectionStringBuilder, CancellationToken, ValueTask`1<string>> passwordProvider, TimeSpan successRefreshInterval, TimeSpan failureRefreshInterval);
    public sealed virtual void AddTypeResolverFactory(TypeHandlerResolverFactory resolverFactory);
    public sealed virtual INpgsqlTypeMapper MapEnum(string pgName, INpgsqlNameTranslator nameTranslator);
    [NullableContextAttribute("2")]
public sealed virtual bool UnmapEnum(string pgName, INpgsqlNameTranslator nameTranslator);
    [NullableContextAttribute("2")]
[RequiresUnreferencedCodeAttribute("Composite type mapping currently isn't trimming-safe.")]
public sealed virtual INpgsqlTypeMapper MapComposite(string pgName, INpgsqlNameTranslator nameTranslator);
    [RequiresUnreferencedCodeAttribute("Composite type mapping currently isn't trimming-safe.")]
public sealed virtual INpgsqlTypeMapper MapComposite(Type clrType, string pgName, INpgsqlNameTranslator nameTranslator);
    [NullableContextAttribute("2")]
[RequiresUnreferencedCodeAttribute("Composite type mapping currently isn't trimming-safe.")]
public sealed virtual bool UnmapComposite(string pgName, INpgsqlNameTranslator nameTranslator);
    [NullableContextAttribute("2")]
[RequiresUnreferencedCodeAttribute("Composite type mapping currently isn't trimming-safe.")]
public sealed virtual bool UnmapComposite(Type clrType, string pgName, INpgsqlNameTranslator nameTranslator);
    private sealed virtual override void Npgsql.TypeMapping.INpgsqlTypeMapper.Reset();
    private void ResetTypeMappings();
    private static string GetPgName(Type clrType, INpgsqlNameTranslator nameTranslator);
    public NpgsqlDataSourceBuilder UsePhysicalConnectionInitializer(Action`1<NpgsqlConnection> connectionInitializer, Func`2<NpgsqlConnection, Task> connectionInitializerAsync);
    public NpgsqlDataSource Build();
    public NpgsqlMultiHostDataSource BuildMultiHost();
    private NpgsqlDataSourceConfiguration PrepareConfiguration();
    private void ValidateMultiHost();
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
internal class Npgsql.NpgsqlDataSourceCommand : NpgsqlCommand {
    protected DbConnection DbConnection { get; protected set; }
    protected DbTransaction DbTransaction { get; protected set; }
    [NullableContextAttribute("1")]
internal NpgsqlDataSourceCommand(NpgsqlConnection connection);
    [NullableContextAttribute("1")]
internal NpgsqlDataSourceCommand(int batchCommandCapacity, NpgsqlConnection connection);
    [AsyncStateMachineAttribute("Npgsql.NpgsqlDataSourceCommand/<ExecuteReader>d__2")]
internal virtual ValueTask`1<NpgsqlDataReader> ExecuteReader(CommandBehavior behavior, bool async, CancellationToken cancellationToken);
    public virtual void Prepare();
    [NullableContextAttribute("1")]
public virtual Task PrepareAsync(CancellationToken cancellationToken);
    protected virtual DbConnection get_DbConnection();
    protected virtual void set_DbConnection(DbConnection value);
    protected virtual DbTransaction get_DbTransaction();
    protected virtual void set_DbTransaction(DbTransaction value);
    [CompilerGeneratedAttribute]
[DebuggerHiddenAttribute]
private ValueTask`1<NpgsqlDataReader> <>n__0(CommandBehavior behavior, bool async, CancellationToken cancellationToken);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Npgsql.NpgsqlDataSourceConfiguration : object {
    [CompilerGeneratedAttribute]
private NpgsqlLoggingConfiguration <LoggingConfiguration>k__BackingField;
    [NullableAttribute("2")]
[CompilerGeneratedAttribute]
private RemoteCertificateValidationCallback <UserCertificateValidationCallback>k__BackingField;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[CompilerGeneratedAttribute]
private Action`1<X509CertificateCollection> <ClientCertificatesCallback>k__BackingField;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[CompilerGeneratedAttribute]
private Func`3<NpgsqlConnectionStringBuilder, CancellationToken, ValueTask`1<string>> <PeriodicPasswordProvider>k__BackingField;
    [CompilerGeneratedAttribute]
private TimeSpan <PeriodicPasswordSuccessRefreshInterval>k__BackingField;
    [CompilerGeneratedAttribute]
private TimeSpan <PeriodicPasswordFailureRefreshInterval>k__BackingField;
    [CompilerGeneratedAttribute]
private List`1<TypeHandlerResolverFactory> <ResolverFactories>k__BackingField;
    [CompilerGeneratedAttribute]
private Dictionary`2<string, IUserTypeMapping> <UserTypeMappings>k__BackingField;
    [CompilerGeneratedAttribute]
private INpgsqlNameTranslator <DefaultNameTranslator>k__BackingField;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[CompilerGeneratedAttribute]
private Action`1<NpgsqlConnection> <ConnectionInitializer>k__BackingField;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[CompilerGeneratedAttribute]
private Func`2<NpgsqlConnection, Task> <ConnectionInitializerAsync>k__BackingField;
    [CompilerGeneratedAttribute]
private Type EqualityContract { get; }
    public NpgsqlLoggingConfiguration LoggingConfiguration { get; public set; }
    [NullableAttribute("2")]
public RemoteCertificateValidationCallback UserCertificateValidationCallback { get; public set; }
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public Action`1<X509CertificateCollection> ClientCertificatesCallback { get; public set; }
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public Func`3<NpgsqlConnectionStringBuilder, CancellationToken, ValueTask`1<string>> PeriodicPasswordProvider { get; public set; }
    public TimeSpan PeriodicPasswordSuccessRefreshInterval { get; public set; }
    public TimeSpan PeriodicPasswordFailureRefreshInterval { get; public set; }
    public List`1<TypeHandlerResolverFactory> ResolverFactories { get; public set; }
    public Dictionary`2<string, IUserTypeMapping> UserTypeMappings { get; public set; }
    public INpgsqlNameTranslator DefaultNameTranslator { get; public set; }
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public Action`1<NpgsqlConnection> ConnectionInitializer { get; public set; }
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public Func`2<NpgsqlConnection, Task> ConnectionInitializerAsync { get; public set; }
    public NpgsqlDataSourceConfiguration(NpgsqlLoggingConfiguration LoggingConfiguration, RemoteCertificateValidationCallback UserCertificateValidationCallback, Action`1<X509CertificateCollection> ClientCertificatesCallback, Func`3<NpgsqlConnectionStringBuilder, CancellationToken, ValueTask`1<string>> PeriodicPasswordProvider, TimeSpan PeriodicPasswordSuccessRefreshInterval, TimeSpan PeriodicPasswordFailureRefreshInterval, List`1<TypeHandlerResolverFactory> ResolverFactories, Dictionary`2<string, IUserTypeMapping> UserTypeMappings, INpgsqlNameTranslator DefaultNameTranslator, Action`1<NpgsqlConnection> ConnectionInitializer, Func`2<NpgsqlConnection, Task> ConnectionInitializerAsync);
    [CompilerGeneratedAttribute]
private NpgsqlDataSourceConfiguration(NpgsqlDataSourceConfiguration original);
    [CompilerGeneratedAttribute]
private Type get_EqualityContract();
    [CompilerGeneratedAttribute]
public NpgsqlLoggingConfiguration get_LoggingConfiguration();
    [CompilerGeneratedAttribute]
public Void modreq(System.Runtime.CompilerServices.IsExternalInit) set_LoggingConfiguration(NpgsqlLoggingConfiguration value);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public RemoteCertificateValidationCallback get_UserCertificateValidationCallback();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public Void modreq(System.Runtime.CompilerServices.IsExternalInit) set_UserCertificateValidationCallback(RemoteCertificateValidationCallback value);
    [CompilerGeneratedAttribute]
public Action`1<X509CertificateCollection> get_ClientCertificatesCallback();
    [CompilerGeneratedAttribute]
public Void modreq(System.Runtime.CompilerServices.IsExternalInit) set_ClientCertificatesCallback(Action`1<X509CertificateCollection> value);
    [CompilerGeneratedAttribute]
public Func`3<NpgsqlConnectionStringBuilder, CancellationToken, ValueTask`1<string>> get_PeriodicPasswordProvider();
    [CompilerGeneratedAttribute]
public Void modreq(System.Runtime.CompilerServices.IsExternalInit) set_PeriodicPasswordProvider(Func`3<NpgsqlConnectionStringBuilder, CancellationToken, ValueTask`1<string>> value);
    [CompilerGeneratedAttribute]
public TimeSpan get_PeriodicPasswordSuccessRefreshInterval();
    [CompilerGeneratedAttribute]
public Void modreq(System.Runtime.CompilerServices.IsExternalInit) set_PeriodicPasswordSuccessRefreshInterval(TimeSpan value);
    [CompilerGeneratedAttribute]
public TimeSpan get_PeriodicPasswordFailureRefreshInterval();
    [CompilerGeneratedAttribute]
public Void modreq(System.Runtime.CompilerServices.IsExternalInit) set_PeriodicPasswordFailureRefreshInterval(TimeSpan value);
    [CompilerGeneratedAttribute]
public List`1<TypeHandlerResolverFactory> get_ResolverFactories();
    [CompilerGeneratedAttribute]
public Void modreq(System.Runtime.CompilerServices.IsExternalInit) set_ResolverFactories(List`1<TypeHandlerResolverFactory> value);
    [CompilerGeneratedAttribute]
public Dictionary`2<string, IUserTypeMapping> get_UserTypeMappings();
    [CompilerGeneratedAttribute]
public Void modreq(System.Runtime.CompilerServices.IsExternalInit) set_UserTypeMappings(Dictionary`2<string, IUserTypeMapping> value);
    [CompilerGeneratedAttribute]
public INpgsqlNameTranslator get_DefaultNameTranslator();
    [CompilerGeneratedAttribute]
public Void modreq(System.Runtime.CompilerServices.IsExternalInit) set_DefaultNameTranslator(INpgsqlNameTranslator value);
    [CompilerGeneratedAttribute]
public Action`1<NpgsqlConnection> get_ConnectionInitializer();
    [CompilerGeneratedAttribute]
public Void modreq(System.Runtime.CompilerServices.IsExternalInit) set_ConnectionInitializer(Action`1<NpgsqlConnection> value);
    [CompilerGeneratedAttribute]
public Func`2<NpgsqlConnection, Task> get_ConnectionInitializerAsync();
    [CompilerGeneratedAttribute]
public Void modreq(System.Runtime.CompilerServices.IsExternalInit) set_ConnectionInitializerAsync(Func`2<NpgsqlConnection, Task> value);
    [CompilerGeneratedAttribute]
public virtual string ToString();
    [CompilerGeneratedAttribute]
private bool PrintMembers(StringBuilder builder);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public static bool op_Inequality(NpgsqlDataSourceConfiguration left, NpgsqlDataSourceConfiguration right);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public static bool op_Equality(NpgsqlDataSourceConfiguration left, NpgsqlDataSourceConfiguration right);
    [CompilerGeneratedAttribute]
public virtual int GetHashCode();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public virtual bool Equals(object obj);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public sealed virtual bool Equals(NpgsqlDataSourceConfiguration other);
    [CompilerGeneratedAttribute]
public NpgsqlDataSourceConfiguration <Clone>$();
    [CompilerGeneratedAttribute]
public void Deconstruct(NpgsqlLoggingConfiguration& LoggingConfiguration, RemoteCertificateValidationCallback& UserCertificateValidationCallback, Action`1& ClientCertificatesCallback, Func`3& PeriodicPasswordProvider, TimeSpan& PeriodicPasswordSuccessRefreshInterval, TimeSpan& PeriodicPasswordFailureRefreshInterval, List`1& ResolverFactories, Dictionary`2& UserTypeMappings, INpgsqlNameTranslator& DefaultNameTranslator, Action`1& ConnectionInitializer, Func`2& ConnectionInitializerAsync);
}
public static class Npgsql.NpgsqlEventId : object {
    public static int OpeningConnection;
    public static int OpenedConnection;
    public static int ClosingConnection;
    public static int ClosedConnection;
    public static int OpeningPhysicalConnection;
    public static int OpenedPhysicalConnection;
    public static int ClosingPhysicalConnection;
    public static int ClosedPhysicalConnection;
    public static int StartingWait;
    public static int ReceivedNotice;
    public static int ConnectionExceededMaximumLifetime;
    public static int SendingKeepalive;
    public static int CompletedKeepalive;
    public static int KeepaliveFailed;
    public static int BreakingConnection;
    public static int CaughtUserExceptionInNoticeEventHandler;
    public static int CaughtUserExceptionInNotificationEventHandler;
    public static int ExceptionWhenClosingPhysicalConnection;
    public static int ExceptionWhenOpeningConnectionForMultiplexing;
    public static int ExecutingCommand;
    public static int CommandExecutionCompleted;
    public static int CancellingCommand;
    public static int ExecutingInternalCommand;
    public static int PreparingCommandExplicitly;
    public static int CommandPreparedExplicitly;
    public static int AutoPreparingStatement;
    public static int UnpreparingCommand;
    public static int DerivingParameters;
    public static int ExceptionWhenWritingMultiplexedCommands;
    public static int StartedTransaction;
    public static int CommittedTransaction;
    public static int RolledBackTransaction;
    public static int CreatingSavepoint;
    public static int RolledBackToSavepoint;
    public static int ReleasedSavepoint;
    public static int ExceptionDuringTransactionDispose;
    public static int EnlistedVolatileResourceManager;
    public static int CommittingSinglePhaseTransaction;
    public static int RollingBackSinglePhaseTransaction;
    public static int SinglePhaseTransactionRollbackFailed;
    public static int PreparingTwoPhaseTransaction;
    public static int CommittingTwoPhaseTransaction;
    public static int TwoPhaseTransactionCommitFailed;
    public static int RollingBackTwoPhaseTransaction;
    public static int TwoPhaseTransactionRollbackFailed;
    public static int TwoPhaseTransactionInDoubt;
    public static int ConnectionInUseWhenRollingBack;
    public static int CleaningUpResourceManager;
    public static int StartingBinaryExport;
    public static int StartingBinaryImport;
    public static int StartingTextExport;
    public static int StartingTextImport;
    public static int StartingRawCopy;
    public static int CopyOperationCompleted;
    public static int CopyOperationCancelled;
    public static int ExceptionWhenDisposingCopyOperation;
    public static int CreatingReplicationSlot;
    public static int DroppingReplicationSlot;
    public static int StartingLogicalReplication;
    public static int StartingPhysicalReplication;
    public static int ExecutingReplicationCommand;
    public static int ReceivedReplicationPrimaryKeepalive;
    public static int SendingReplicationStandbyStatusUpdate;
    public static int SentReplicationFeedbackMessage;
    public static int ReplicationFeedbackMessageSendingFailed;
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
internal class Npgsql.NpgsqlEventSource : EventSource {
    [NullableAttribute("1")]
public static NpgsqlEventSource Log;
    [NullableAttribute("1")]
private static string EventSourceName;
    internal static int CommandStartId;
    internal static int CommandStopId;
    private IncrementingPollingCounter _bytesWrittenPerSecondCounter;
    private IncrementingPollingCounter _bytesReadPerSecondCounter;
    private IncrementingPollingCounter _commandsPerSecondCounter;
    private PollingCounter _totalCommandsCounter;
    private PollingCounter _failedCommandsCounter;
    private PollingCounter _currentCommandsCounter;
    private PollingCounter _preparedCommandsRatioCounter;
    private PollingCounter _poolsCounter;
    [NullableAttribute("1")]
private object _dataSourcesLock;
    [TupleElementNamesAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private Dictionary`2<NpgsqlDataSource, Nullable`1<ValueTuple`2<PollingCounter, PollingCounter>>> _dataSources;
    private PollingCounter _multiplexingAverageCommandsPerBatchCounter;
    private PollingCounter _multiplexingAverageWriteTimePerBatchCounter;
    private long _bytesWritten;
    private long _bytesRead;
    private long _totalCommands;
    private long _totalPreparedCommands;
    private long _currentCommands;
    private long _failedCommands;
    private long _multiplexingBatchesSent;
    private long _multiplexingCommandsSent;
    private long _multiplexingTicksWritten;
    private static NpgsqlEventSource();
    internal void BytesWritten(long bytesWritten);
    internal void BytesRead(long bytesRead);
    [NullableContextAttribute("1")]
public void CommandStart(string sql);
    public void CommandStop();
    internal void CommandStartPrepared();
    internal void CommandFailed();
    [NullableContextAttribute("1")]
internal void DataSourceCreated(NpgsqlDataSource dataSource);
    [NullableContextAttribute("1")]
internal void MultiplexingBatchSent(int numCommands, Stopwatch stopwatch);
    private double GetDataSourceCount();
    private double GetMultiplexingAverageCommandsPerBatch();
    private double GetMultiplexingAverageWriteTimePerBatch();
    [NullableContextAttribute("1")]
protected virtual void OnEventCommand(EventCommandEventArgs command);
    [CompilerGeneratedAttribute]
private double <OnEventCommand>b__37_0();
    [CompilerGeneratedAttribute]
private double <OnEventCommand>b__37_1();
    [CompilerGeneratedAttribute]
private double <OnEventCommand>b__37_2();
    [CompilerGeneratedAttribute]
private double <OnEventCommand>b__37_3();
    [CompilerGeneratedAttribute]
private double <OnEventCommand>b__37_4();
    [CompilerGeneratedAttribute]
private double <OnEventCommand>b__37_5();
    [CompilerGeneratedAttribute]
private double <OnEventCommand>b__37_6();
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
public class Npgsql.NpgsqlException : DbException {
    [CompilerGeneratedAttribute]
private NpgsqlBatchCommand <BatchCommand>k__BackingField;
    public bool IsTransient { get; }
    public NpgsqlBatchCommand BatchCommand { get; public set; }
    protected DbBatchCommand DbBatchCommand { get; }
    public NpgsqlException(string message, Exception innerException);
    public NpgsqlException(string message);
    [NullableContextAttribute("1")]
protected internal NpgsqlException(SerializationInfo info, StreamingContext context);
    public virtual bool get_IsTransient();
    [CompilerGeneratedAttribute]
public NpgsqlBatchCommand get_BatchCommand();
    [CompilerGeneratedAttribute]
public void set_BatchCommand(NpgsqlBatchCommand value);
    protected virtual DbBatchCommand get_DbBatchCommand();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Npgsql.NpgsqlFactory : DbProviderFactory {
    public static NpgsqlFactory Instance;
    [NullableAttribute("2")]
private static object _legacyEntityFrameworkServices;
    public bool CanCreateDataAdapter { get; }
    public bool CanCreateCommandBuilder { get; }
    public bool CanCreateBatch { get; }
    private static NpgsqlFactory();
    public virtual DbCommand CreateCommand();
    public virtual DbConnection CreateConnection();
    public virtual DbParameter CreateParameter();
    public virtual DbConnectionStringBuilder CreateConnectionStringBuilder();
    public virtual DbCommandBuilder CreateCommandBuilder();
    public virtual DbDataAdapter CreateDataAdapter();
    public virtual bool get_CanCreateDataAdapter();
    public virtual bool get_CanCreateCommandBuilder();
    public virtual bool get_CanCreateBatch();
    public virtual DbBatch CreateBatch();
    public virtual DbBatchCommand CreateBatchCommand();
    [RequiresUnreferencedCodeAttribute("Legacy EF5 method, not trimming-safe.")]
public sealed virtual object GetService(Type serviceType);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Npgsql.NpgsqlLargeObjectManager : object {
    private static int InvWrite;
    private static int InvRead;
    [CompilerGeneratedAttribute]
private NpgsqlConnection <Connection>k__BackingField;
    [CompilerGeneratedAttribute]
private int <MaxTransferBlockSize>k__BackingField;
    internal NpgsqlConnection Connection { get; }
    public int MaxTransferBlockSize { get; public set; }
    public bool Has64BitSupport { get; }
    public NpgsqlLargeObjectManager(NpgsqlConnection connection);
    [CompilerGeneratedAttribute]
internal NpgsqlConnection get_Connection();
    [CompilerGeneratedAttribute]
public int get_MaxTransferBlockSize();
    [CompilerGeneratedAttribute]
public void set_MaxTransferBlockSize(int value);
    [AsyncStateMachineAttribute("Npgsql.NpgsqlLargeObjectManager/<ExecuteFunction>d__10`1")]
internal Task`1<T> ExecuteFunction(string function, bool async, CancellationToken cancellationToken, Object[] arguments);
    [AsyncStateMachineAttribute("Npgsql.NpgsqlLargeObjectManager/<ExecuteFunctionGetBytes>d__11")]
internal Task`1<int> ExecuteFunctionGetBytes(string function, Byte[] buffer, int offset, int len, bool async, CancellationToken cancellationToken, Object[] arguments);
    public UInt32 Create(UInt32 preferredOid);
    public Task`1<UInt32> CreateAsync(UInt32 preferredOid, CancellationToken cancellationToken);
    private Task`1<UInt32> Create(UInt32 preferredOid, bool async, CancellationToken cancellationToken);
    public NpgsqlLargeObjectStream OpenRead(UInt32 oid);
    public Task`1<NpgsqlLargeObjectStream> OpenReadAsync(UInt32 oid, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Npgsql.NpgsqlLargeObjectManager/<OpenRead>d__17")]
private Task`1<NpgsqlLargeObjectStream> OpenRead(UInt32 oid, bool async, CancellationToken cancellationToken);
    public NpgsqlLargeObjectStream OpenReadWrite(UInt32 oid);
    public Task`1<NpgsqlLargeObjectStream> OpenReadWriteAsync(UInt32 oid, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Npgsql.NpgsqlLargeObjectManager/<OpenReadWrite>d__20")]
private Task`1<NpgsqlLargeObjectStream> OpenReadWrite(UInt32 oid, bool async, CancellationToken cancellationToken);
    public void Unlink(UInt32 oid);
    public Task UnlinkAsync(UInt32 oid, CancellationToken cancellationToken);
    public void ExportRemote(UInt32 oid, string path);
    public Task ExportRemoteAsync(UInt32 oid, string path, CancellationToken cancellationToken);
    public void ImportRemote(string path, UInt32 oid);
    public Task ImportRemoteAsync(string path, UInt32 oid, CancellationToken cancellationToken);
    public bool get_Has64BitSupport();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Npgsql.NpgsqlLargeObjectStream : Stream {
    private NpgsqlLargeObjectManager _manager;
    private int _fd;
    private long _pos;
    private bool _writeable;
    private bool _disposed;
    public bool Has64BitSupport { get; }
    public bool CanTimeout { get; }
    public bool CanRead { get; }
    public bool CanWrite { get; }
    public bool CanSeek { get; }
    public long Position { get; public set; }
    public long Length { get; }
    internal NpgsqlLargeObjectStream(NpgsqlLargeObjectManager manager, int fd, bool writeable);
    private void CheckDisposed();
    public bool get_Has64BitSupport();
    public virtual int Read(Byte[] buffer, int offset, int count);
    public virtual Task`1<int> ReadAsync(Byte[] buffer, int offset, int count, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Npgsql.NpgsqlLargeObjectStream/<Read>d__11")]
private Task`1<int> Read(Byte[] buffer, int offset, int count, bool async, CancellationToken cancellationToken);
    public virtual void Write(Byte[] buffer, int offset, int count);
    public virtual Task WriteAsync(Byte[] buffer, int offset, int count, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Npgsql.NpgsqlLargeObjectStream/<Write>d__14")]
private Task Write(Byte[] buffer, int offset, int count, bool async, CancellationToken cancellationToken);
    public virtual bool get_CanTimeout();
    public virtual bool get_CanRead();
    public virtual bool get_CanWrite();
    public virtual bool get_CanSeek();
    public virtual long get_Position();
    public virtual void set_Position(long value);
    public virtual long get_Length();
    public Task`1<long> GetLengthAsync(CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Npgsql.NpgsqlLargeObjectStream/<GetLength>d__29")]
private Task`1<long> GetLength(bool async);
    public virtual long Seek(long offset, SeekOrigin origin);
    public Task`1<long> SeekAsync(long offset, SeekOrigin origin, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Npgsql.NpgsqlLargeObjectStream/<Seek>d__32")]
private Task`1<long> Seek(long offset, SeekOrigin origin, bool async, CancellationToken cancellationToken);
    public virtual void Flush();
    public virtual void SetLength(long value);
    public Task SetLength(long value, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Npgsql.NpgsqlLargeObjectStream/<SetLength>d__36")]
private Task SetLength(long value, bool async, CancellationToken cancellationToken);
    public virtual void Close();
    protected virtual void Dispose(bool disposing);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Npgsql.NpgsqlLoggingConfiguration : object {
    internal static NpgsqlLoggingConfiguration NullConfiguration;
    internal static ILoggerFactory GlobalLoggerFactory;
    internal static bool GlobalIsParameterLoggingEnabled;
    [CompilerGeneratedAttribute]
private ILogger <ConnectionLogger>k__BackingField;
    [CompilerGeneratedAttribute]
private ILogger <CommandLogger>k__BackingField;
    [CompilerGeneratedAttribute]
private ILogger <TransactionLogger>k__BackingField;
    [CompilerGeneratedAttribute]
private ILogger <CopyLogger>k__BackingField;
    [CompilerGeneratedAttribute]
private ILogger <ReplicationLogger>k__BackingField;
    [CompilerGeneratedAttribute]
private ILogger <ExceptionLogger>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsParameterLoggingEnabled>k__BackingField;
    internal ILogger ConnectionLogger { get; }
    internal ILogger CommandLogger { get; }
    internal ILogger TransactionLogger { get; }
    internal ILogger CopyLogger { get; }
    internal ILogger ReplicationLogger { get; }
    internal ILogger ExceptionLogger { get; }
    internal bool IsParameterLoggingEnabled { get; }
    internal NpgsqlLoggingConfiguration(ILoggerFactory loggerFactory, bool isParameterLoggingEnabled);
    private static NpgsqlLoggingConfiguration();
    [CompilerGeneratedAttribute]
internal ILogger get_ConnectionLogger();
    [CompilerGeneratedAttribute]
internal ILogger get_CommandLogger();
    [CompilerGeneratedAttribute]
internal ILogger get_TransactionLogger();
    [CompilerGeneratedAttribute]
internal ILogger get_CopyLogger();
    [CompilerGeneratedAttribute]
internal ILogger get_ReplicationLogger();
    [CompilerGeneratedAttribute]
internal ILogger get_ExceptionLogger();
    [CompilerGeneratedAttribute]
internal bool get_IsParameterLoggingEnabled();
    public static void InitializeLogging(ILoggerFactory loggerFactory, bool parameterLoggingEnabled);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Npgsql.NpgsqlMultiHostDataSource : NpgsqlDataSource {
    private NpgsqlDataSource[] _pools;
    private MultiHostDataSourceWrapper[] _wrappers;
    private Int32 modreq(System.Runtime.CompilerServices.IsVolatile) _roundRobinIndex;
    internal bool OwnsConnectors { get; }
    internal NpgsqlDataSource[] Pools { get; }
    [TupleElementNamesAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[NullableAttribute("0")]
internal ValueTuple`3<int, int, int> Statistics { get; }
    internal NpgsqlMultiHostDataSource(NpgsqlConnectionStringBuilder settings, NpgsqlDataSourceConfiguration dataSourceConfig);
    internal virtual bool get_OwnsConnectors();
    internal NpgsqlDataSource[] get_Pools();
    public NpgsqlConnection CreateConnection(TargetSessionAttributes targetSessionAttributes);
    public NpgsqlConnection OpenConnection(TargetSessionAttributes targetSessionAttributes);
    [AsyncStateMachineAttribute("Npgsql.NpgsqlMultiHostDataSource/<OpenConnectionAsync>d__10")]
public ValueTask`1<NpgsqlConnection> OpenConnectionAsync(TargetSessionAttributes targetSessionAttributes, CancellationToken cancellationToken);
    public NpgsqlDataSource WithTargetSession(TargetSessionAttributes targetSessionAttributes);
    private static bool IsPreferred(DatabaseState state, TargetSessionAttributes preferredType);
    private static bool IsOnline(DatabaseState state, TargetSessionAttributes preferredType);
    [AsyncStateMachineAttribute("Npgsql.NpgsqlMultiHostDataSource/<TryGetIdleOrNew>d__14")]
private ValueTask`1<NpgsqlConnector> TryGetIdleOrNew(NpgsqlConnection conn, TimeSpan timeoutPerHost, bool async, TargetSessionAttributes preferredType, Func`3<DatabaseState, TargetSessionAttributes, bool> stateValidator, int poolIndex, IList`1<Exception> exceptions, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Npgsql.NpgsqlMultiHostDataSource/<TryGet>d__15")]
private ValueTask`1<NpgsqlConnector> TryGet(NpgsqlConnection conn, TimeSpan timeoutPerHost, bool async, TargetSessionAttributes preferredType, Func`3<DatabaseState, TargetSessionAttributes, bool> stateValidator, int poolIndex, IList`1<Exception> exceptions, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Npgsql.NpgsqlMultiHostDataSource/<Get>d__16")]
internal virtual ValueTask`1<NpgsqlConnector> Get(NpgsqlConnection conn, NpgsqlTimeout timeout, bool async, CancellationToken cancellationToken);
    private static NpgsqlException NoSuitableHostsException(IList`1<Exception> exceptions);
    private int GetRoundRobinIndex();
    internal virtual void Return(NpgsqlConnector connector);
    [NullableContextAttribute("2")]
internal virtual bool TryGetIdleConnector(NpgsqlConnector& connector);
    internal virtual ValueTask`1<NpgsqlConnector> OpenNewConnector(NpgsqlConnection conn, NpgsqlTimeout timeout, bool async, CancellationToken cancellationToken);
    internal virtual void Clear();
    public void ClearDatabaseStates();
    [NullableContextAttribute("0")]
internal virtual ValueTuple`3<int, int, int> get_Statistics();
    internal virtual bool TryRentEnlistedPending(Transaction transaction, NpgsqlConnection connection, NpgsqlConnector& connector);
    private static TargetSessionAttributes GetTargetSessionAttributes(NpgsqlConnection connection);
    [CompilerGeneratedAttribute]
private bool <TryRentEnlistedPending>g__TryGetValidConnector|26_0(List`1<NpgsqlConnector> list, TargetSessionAttributes preferredType, Func`3<DatabaseState, TargetSessionAttributes, bool> validationFunc, NpgsqlConnector& connector, <>c__DisplayClass26_0& );
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[DefaultMemberAttribute("Item")]
public class Npgsql.NpgsqlNestedDataReader : DbDataReader {
    private NpgsqlDataReader _outermostReader;
    private ulong _uniqueOutermostReaderRowId;
    [NullableAttribute("2")]
private NpgsqlNestedDataReader _outerNestedReader;
    [NullableAttribute("2")]
private NpgsqlNestedDataReader _cachedFreeNestedDataReader;
    [NullableAttribute("2")]
private PostgresCompositeType _compositeType;
    private int _depth;
    private int _numRows;
    private int _nextRowIndex;
    private int _nextRowBufferPos;
    private ReaderState _readerState;
    private List`1<ColumnInfo> _columns;
    private NpgsqlReadBuffer Buffer { get; }
    private TypeMapper TypeMapper { get; }
    public object Item { get; }
    public object Item { get; }
    public int Depth { get; }
    public int FieldCount { get; }
    public bool HasRows { get; }
    public bool IsClosed { get; }
    public int RecordsAffected { get; }
    [NullableContextAttribute("2")]
internal NpgsqlNestedDataReader(NpgsqlDataReader outermostReader, NpgsqlNestedDataReader outerNestedReader, ulong uniqueOutermostReaderRowId, int depth, PostgresCompositeType compositeType);
    private NpgsqlReadBuffer get_Buffer();
    private TypeMapper get_TypeMapper();
    [NullableContextAttribute("2")]
internal void Init(ulong uniqueOutermostReaderRowId, PostgresCompositeType compositeType);
    internal void InitArray();
    internal void InitSingleRow();
    public virtual object get_Item(int ordinal);
    public virtual object get_Item(string name);
    public virtual int get_Depth();
    public virtual int get_FieldCount();
    public virtual bool get_HasRows();
    public virtual bool get_IsClosed();
    public virtual int get_RecordsAffected();
    public virtual bool GetBoolean(int ordinal);
    public virtual byte GetByte(int ordinal);
    public virtual char GetChar(int ordinal);
    public virtual DateTime GetDateTime(int ordinal);
    public virtual decimal GetDecimal(int ordinal);
    public virtual double GetDouble(int ordinal);
    public virtual float GetFloat(int ordinal);
    public virtual Guid GetGuid(int ordinal);
    public virtual short GetInt16(int ordinal);
    public virtual int GetInt32(int ordinal);
    public virtual long GetInt64(int ordinal);
    public virtual string GetString(int ordinal);
    [NullableContextAttribute("2")]
public virtual long GetBytes(int ordinal, long dataOffset, Byte[] buffer, int bufferOffset, int length);
    [NullableContextAttribute("2")]
public virtual long GetChars(int ordinal, long dataOffset, Char[] buffer, int bufferOffset, int length);
    protected virtual DbDataReader GetDbDataReader(int ordinal);
    public NpgsqlNestedDataReader GetData(int ordinal);
    public virtual string GetDataTypeName(int ordinal);
    public virtual IEnumerator GetEnumerator();
    public virtual string GetName(int ordinal);
    public virtual int GetOrdinal(string name);
    public virtual Type GetFieldType(int ordinal);
    public virtual object GetValue(int ordinal);
    public virtual int GetValues(Object[] values);
    public virtual bool IsDBNull(int ordinal);
    public virtual T GetFieldValue(int ordinal);
    public virtual Type GetProviderSpecificFieldType(int ordinal);
    public virtual object GetProviderSpecificValue(int ordinal);
    public virtual int GetProviderSpecificValues(Object[] values);
    public virtual bool Read();
    public virtual bool NextResult();
    public virtual void Close();
    protected virtual void Dispose(bool disposing);
    private void CheckNotClosed();
    private void CheckResultSet();
    private void CheckOnRow();
    private ColumnInfo CheckRowAndColumn(int column);
    private ValueTuple`2<NpgsqlTypeHandler, int> CheckRowAndColumnAndSeek(int ordinal);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Npgsql.NpgsqlNoticeEventArgs : EventArgs {
    [CompilerGeneratedAttribute]
private PostgresNotice <Notice>k__BackingField;
    public PostgresNotice Notice { get; }
    internal NpgsqlNoticeEventArgs(PostgresNotice notice);
    [CompilerGeneratedAttribute]
public PostgresNotice get_Notice();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Npgsql.NpgsqlNotificationEventArgs : EventArgs {
    [CompilerGeneratedAttribute]
private int <PID>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Channel>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Payload>k__BackingField;
    public int PID { get; }
    public string Channel { get; }
    public string Payload { get; }
    [ObsoleteAttribute("Use Channel instead")]
public string Condition { get; }
    [ObsoleteAttribute("Use Payload instead")]
public string AdditionalInformation { get; }
    internal NpgsqlNotificationEventArgs(NpgsqlReadBuffer buf);
    [CompilerGeneratedAttribute]
public int get_PID();
    [CompilerGeneratedAttribute]
public string get_Channel();
    [CompilerGeneratedAttribute]
public string get_Payload();
    public string get_Condition();
    public string get_AdditionalInformation();
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
public class Npgsql.NpgsqlOperationInProgressException : NpgsqlException {
    [CompilerGeneratedAttribute]
private NpgsqlCommand <CommandInProgress>k__BackingField;
    public NpgsqlCommand CommandInProgress { get; }
    [NullableContextAttribute("1")]
public NpgsqlOperationInProgressException(NpgsqlCommand command);
    internal NpgsqlOperationInProgressException(ConnectorState state);
    [CompilerGeneratedAttribute]
public NpgsqlCommand get_CommandInProgress();
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
public class Npgsql.NpgsqlParameter : DbParameter {
    private protected byte _precision;
    private protected byte _scale;
    private protected int _size;
    private protected Nullable`1<NpgsqlDbType> _npgsqlDbType;
    private protected string _dataTypeName;
    [NullableAttribute("1")]
private protected string _name;
    private protected object _value;
    [NullableAttribute("1")]
private protected string _sourceColumn;
    [NullableAttribute("1")]
[CompilerGeneratedAttribute]
private string <TrimmedName>k__BackingField;
    [NullableAttribute("1")]
internal static string PositionalName;
    [CompilerGeneratedAttribute]
private object <ConvertedValue>k__BackingField;
    [CompilerGeneratedAttribute]
private NpgsqlLengthCache <LengthCache>k__BackingField;
    [CompilerGeneratedAttribute]
private NpgsqlTypeHandler <Handler>k__BackingField;
    [CompilerGeneratedAttribute]
private FormatCode <FormatCode>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsNullable>k__BackingField;
    [CompilerGeneratedAttribute]
private ParameterDirection <Direction>k__BackingField;
    [CompilerGeneratedAttribute]
private DataRowVersion <SourceVersion>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <SourceColumnNullMapping>k__BackingField;
    [CompilerGeneratedAttribute]
private NpgsqlParameterCollection <Collection>k__BackingField;
    [CompilerGeneratedAttribute]
private PostgresType <PostgresType>k__BackingField;
    [NullableAttribute("1")]
internal string TrimmedName { get; private protected set; }
    public object ConvertedValue { get; public set; }
    internal NpgsqlLengthCache LengthCache { get; internal set; }
    internal NpgsqlTypeHandler Handler { get; internal set; }
    internal FormatCode FormatCode { get; private set; }
    [NullableAttribute("1")]
[DefaultValueAttribute("")]
public string ParameterName { get; public set; }
    internal bool IsPositional { get; }
    [TypeConverterAttribute("System.ComponentModel.StringConverter")]
[CategoryAttribute("Data")]
public object Value { get; public set; }
    [CategoryAttribute("Data")]
[TypeConverterAttribute("System.ComponentModel.StringConverter")]
public object NpgsqlValue { get; public set; }
    [DefaultValueAttribute("Mono.Cecil.CustomAttributeArgument")]
[CategoryAttribute("Data")]
[RefreshPropertiesAttribute("1")]
public DbType DbType { get; public set; }
    [DefaultValueAttribute("Mono.Cecil.CustomAttributeArgument")]
[CategoryAttribute("Data")]
[RefreshPropertiesAttribute("1")]
[DbProviderSpecificTypePropertyAttribute("True")]
public NpgsqlDbType NpgsqlDbType { get; public set; }
    public string DataTypeName { get; public set; }
    public bool IsNullable { get; public set; }
    [DefaultValueAttribute("Mono.Cecil.CustomAttributeArgument")]
[CategoryAttribute("Data")]
public ParameterDirection Direction { get; public set; }
    [DefaultValueAttribute("0")]
[CategoryAttribute("Data")]
public byte Precision { get; public set; }
    [DefaultValueAttribute("0")]
[CategoryAttribute("Data")]
public byte Scale { get; public set; }
    [DefaultValueAttribute("0")]
[CategoryAttribute("Data")]
public int Size { get; public set; }
    [NullableAttribute("1")]
[DefaultValueAttribute("")]
[CategoryAttribute("Data")]
public string SourceColumn { get; public set; }
    [CategoryAttribute("Data")]
[DefaultValueAttribute("Mono.Cecil.CustomAttributeArgument")]
public DataRowVersion SourceVersion { get; public set; }
    public bool SourceColumnNullMapping { get; public set; }
    public NpgsqlParameterCollection Collection { get; public set; }
    public PostgresType PostgresType { get; internal set; }
    internal bool IsInputDirection { get; }
    internal bool IsOutputDirection { get; }
    public NpgsqlParameter(string parameterName, object value);
    public NpgsqlParameter(string parameterName, NpgsqlDbType parameterType);
    public NpgsqlParameter(string parameterName, DbType parameterType);
    public NpgsqlParameter(string parameterName, NpgsqlDbType parameterType, int size);
    public NpgsqlParameter(string parameterName, DbType parameterType, int size);
    public NpgsqlParameter(string parameterName, NpgsqlDbType parameterType, int size, string sourceColumn);
    public NpgsqlParameter(string parameterName, DbType parameterType, int size, string sourceColumn);
    [NullableContextAttribute("1")]
public NpgsqlParameter(string parameterName, NpgsqlDbType parameterType, int size, string sourceColumn, ParameterDirection direction, bool isNullable, byte precision, byte scale, DataRowVersion sourceVersion, object value);
    [NullableContextAttribute("1")]
public NpgsqlParameter(string parameterName, DbType parameterType, int size, string sourceColumn, ParameterDirection direction, bool isNullable, byte precision, byte scale, DataRowVersion sourceVersion, object value);
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
internal string get_TrimmedName();
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
private protected void set_TrimmedName(string value);
    [CompilerGeneratedAttribute]
public object get_ConvertedValue();
    [CompilerGeneratedAttribute]
public void set_ConvertedValue(object value);
    [CompilerGeneratedAttribute]
internal NpgsqlLengthCache get_LengthCache();
    [CompilerGeneratedAttribute]
internal void set_LengthCache(NpgsqlLengthCache value);
    [CompilerGeneratedAttribute]
internal NpgsqlTypeHandler get_Handler();
    [CompilerGeneratedAttribute]
internal void set_Handler(NpgsqlTypeHandler value);
    [CompilerGeneratedAttribute]
internal FormatCode get_FormatCode();
    [CompilerGeneratedAttribute]
private void set_FormatCode(FormatCode value);
    [NullableContextAttribute("1")]
public sealed virtual string get_ParameterName();
    [NullableContextAttribute("1")]
public sealed virtual void set_ParameterName(string value);
    internal void ChangeParameterName(string value);
    internal bool get_IsPositional();
    public virtual object get_Value();
    public virtual void set_Value(object value);
    public object get_NpgsqlValue();
    public void set_NpgsqlValue(object value);
    public sealed virtual DbType get_DbType();
    public sealed virtual void set_DbType(DbType value);
    [RequiresUnreferencedCodeAttribute("The NpgsqlDbType getter isn't trimming-safe")]
public NpgsqlDbType get_NpgsqlDbType();
    public void set_NpgsqlDbType(NpgsqlDbType value);
    public string get_DataTypeName();
    public void set_DataTypeName(string value);
    [CompilerGeneratedAttribute]
public sealed virtual bool get_IsNullable();
    [CompilerGeneratedAttribute]
public sealed virtual void set_IsNullable(bool value);
    [CompilerGeneratedAttribute]
public sealed virtual ParameterDirection get_Direction();
    [CompilerGeneratedAttribute]
public sealed virtual void set_Direction(ParameterDirection value);
    public sealed virtual byte get_Precision();
    public sealed virtual void set_Precision(byte value);
    public sealed virtual byte get_Scale();
    public sealed virtual void set_Scale(byte value);
    public sealed virtual int get_Size();
    public sealed virtual void set_Size(int value);
    [NullableContextAttribute("1")]
public sealed virtual string get_SourceColumn();
    [NullableContextAttribute("1")]
public sealed virtual void set_SourceColumn(string value);
    [CompilerGeneratedAttribute]
public sealed virtual DataRowVersion get_SourceVersion();
    [CompilerGeneratedAttribute]
public sealed virtual void set_SourceVersion(DataRowVersion value);
    [CompilerGeneratedAttribute]
public sealed virtual bool get_SourceColumnNullMapping();
    [CompilerGeneratedAttribute]
public sealed virtual void set_SourceColumnNullMapping(bool value);
    [CompilerGeneratedAttribute]
public NpgsqlParameterCollection get_Collection();
    [CompilerGeneratedAttribute]
public void set_Collection(NpgsqlParameterCollection value);
    [CompilerGeneratedAttribute]
public PostgresType get_PostgresType();
    [CompilerGeneratedAttribute]
internal void set_PostgresType(PostgresType value);
    [NullableContextAttribute("1")]
internal virtual void ResolveHandler(TypeMapper typeMapper);
    [NullableContextAttribute("1")]
internal void Bind(TypeMapper typeMapper);
    internal virtual int ValidateAndGetLength();
    [NullableContextAttribute("1")]
internal virtual Task WriteWithLength(NpgsqlWriteBuffer buf, bool async, CancellationToken cancellationToken);
    public virtual void ResetDbType();
    internal bool get_IsInputDirection();
    internal bool get_IsOutputDirection();
    [NullableContextAttribute("1")]
public NpgsqlParameter Clone();
    [NullableContextAttribute("1")]
private protected virtual NpgsqlParameter CloneCore();
    [NullableContextAttribute("1")]
private sealed virtual override object System.ICloneable.Clone();
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
public class Npgsql.NpgsqlParameter`1 : NpgsqlParameter {
    [CompilerGeneratedAttribute]
private T <TypedValue>k__BackingField;
    public T TypedValue { get; public set; }
    public object Value { get; public set; }
    [NullableContextAttribute("1")]
public NpgsqlParameter`1(string parameterName, T value);
    [NullableContextAttribute("1")]
public NpgsqlParameter`1(string parameterName, NpgsqlDbType npgsqlDbType);
    [NullableContextAttribute("1")]
public NpgsqlParameter`1(string parameterName, DbType dbType);
    [CompilerGeneratedAttribute]
public T get_TypedValue();
    [CompilerGeneratedAttribute]
public void set_TypedValue(T value);
    public virtual object get_Value();
    public virtual void set_Value(object value);
    [NullableContextAttribute("1")]
internal virtual void ResolveHandler(TypeMapper typeMapper);
    internal virtual int ValidateAndGetLength();
    [NullableContextAttribute("1")]
internal virtual Task WriteWithLength(NpgsqlWriteBuffer buf, bool async, CancellationToken cancellationToken);
    [NullableContextAttribute("1")]
private protected virtual NpgsqlParameter CloneCore();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[DefaultMemberAttribute("Item")]
public class Npgsql.NpgsqlParameterCollection : DbParameterCollection {
    internal static int LookupThreshold;
    [CompilerGeneratedAttribute]
private List`1<NpgsqlParameter> <InternalList>k__BackingField;
    internal static bool TwoPassCompatMode;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private Dictionary`2<string, int> _caseInsensitiveLookup;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private Dictionary`2<string, int> _caseSensitiveLookup;
    [CompilerGeneratedAttribute]
private bool <HasOutputParameters>k__BackingField;
    [CompilerGeneratedAttribute]
private PlaceholderType <PlaceholderType>k__BackingField;
    internal List`1<NpgsqlParameter> InternalList { get; }
    private bool LookupEnabled { get; }
    public NpgsqlParameter Item { get; public set; }
    public NpgsqlParameter Item { get; public set; }
    public bool IsReadOnly { get; }
    public bool IsFixedSize { get; }
    public bool IsSynchronized { get; }
    public int Count { get; }
    private bool System.Collections.Generic.ICollection<Npgsql.NpgsqlParameter>.IsReadOnly { get; }
    public object SyncRoot { get; }
    internal bool HasOutputParameters { get; internal set; }
    internal PlaceholderType PlaceholderType { get; internal set; }
    private static NpgsqlParameterCollection();
    [CompilerGeneratedAttribute]
internal List`1<NpgsqlParameter> get_InternalList();
    private bool get_LookupEnabled();
    private void LookupClear();
    private void LookupAdd(string name, int index);
    private void LookupInsert(string name, int index);
    private void LookupRemove(string name, int index);
    private void LookupChangeName(NpgsqlParameter parameter, string oldName, string oldTrimmedName, int index);
    internal void ChangeParameterName(NpgsqlParameter parameter, string value);
    public NpgsqlParameter get_Item(string parameterName);
    public void set_Item(string parameterName, NpgsqlParameter value);
    public sealed virtual NpgsqlParameter get_Item(int index);
    public sealed virtual void set_Item(int index, NpgsqlParameter value);
    public NpgsqlParameter Add(NpgsqlParameter value);
    private sealed virtual override void System.Collections.Generic.ICollection<Npgsql.NpgsqlParameter>.Add(NpgsqlParameter item);
    public NpgsqlParameter AddWithValue(string parameterName, object value);
    public NpgsqlParameter AddWithValue(string parameterName, NpgsqlDbType parameterType, object value);
    public NpgsqlParameter AddWithValue(string parameterName, NpgsqlDbType parameterType, int size, object value);
    public NpgsqlParameter AddWithValue(string parameterName, NpgsqlDbType parameterType, int size, string sourceColumn, object value);
    public NpgsqlParameter AddWithValue(object value);
    public NpgsqlParameter AddWithValue(NpgsqlDbType parameterType, object value);
    public NpgsqlParameter Add(string parameterName, NpgsqlDbType parameterType);
    public NpgsqlParameter Add(string parameterName, NpgsqlDbType parameterType, int size);
    public NpgsqlParameter Add(string parameterName, NpgsqlDbType parameterType, int size, string sourceColumn);
    public virtual void RemoveAt(string parameterName);
    public virtual bool Contains(string parameterName);
    public virtual int IndexOf(string parameterName);
    public virtual bool get_IsReadOnly();
    public virtual void RemoveAt(int index);
    public virtual void Insert(int index, object value);
    public void Remove(string parameterName);
    public virtual void Remove(object value);
    public virtual bool Contains(object value);
    public bool TryGetValue(string parameterName, NpgsqlParameter& parameter);
    public virtual void Clear();
    public virtual int IndexOf(object value);
    public virtual int Add(object value);
    public virtual bool get_IsFixedSize();
    public virtual bool get_IsSynchronized();
    public virtual int get_Count();
    public virtual void CopyTo(Array array, int index);
    private sealed virtual override bool System.Collections.Generic.ICollection<Npgsql.NpgsqlParameter>.get_IsReadOnly();
    public virtual object get_SyncRoot();
    private sealed virtual override IEnumerator`1<NpgsqlParameter> System.Collections.Generic.IEnumerable<Npgsql.NpgsqlParameter>.GetEnumerator();
    public virtual IEnumerator GetEnumerator();
    public virtual void AddRange(Array values);
    protected virtual DbParameter GetParameter(string parameterName);
    protected virtual DbParameter GetParameter(int index);
    protected virtual void SetParameter(string parameterName, DbParameter value);
    protected virtual void SetParameter(int index, DbParameter value);
    public sealed virtual int IndexOf(NpgsqlParameter item);
    public sealed virtual void Insert(int index, NpgsqlParameter item);
    public sealed virtual bool Contains(NpgsqlParameter item);
    public sealed virtual bool Remove(NpgsqlParameter item);
    public sealed virtual void CopyTo(NpgsqlParameter[] array, int arrayIndex);
    public NpgsqlParameter[] ToArray();
    internal void CloneTo(NpgsqlParameterCollection other);
    internal void ProcessParameters(TypeMapper typeMapper, bool validateValues, CommandType commandType);
    [CompilerGeneratedAttribute]
internal bool get_HasOutputParameters();
    [CompilerGeneratedAttribute]
internal void set_HasOutputParameters(bool value);
    [CompilerGeneratedAttribute]
internal PlaceholderType get_PlaceholderType();
    [CompilerGeneratedAttribute]
internal void set_PlaceholderType(PlaceholderType value);
    private static NpgsqlParameter Cast(object value);
    [CompilerGeneratedAttribute]
private void <IndexOf>g__BuildLookup|36_0();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Npgsql.NpgsqlRawCopyStream : Stream {
    private NpgsqlConnector _connector;
    private NpgsqlReadBuffer _readBuf;
    private NpgsqlWriteBuffer _writeBuf;
    private int _leftToReadInDataMsg;
    private bool _isDisposed;
    private bool _isConsumed;
    private bool _canRead;
    private bool _canWrite;
    [CompilerGeneratedAttribute]
private bool <IsBinary>k__BackingField;
    internal static Byte[] BinarySignature;
    private ILogger _copyLogger;
    internal bool IsBinary { get; private set; }
    public bool CanWrite { get; }
    public bool CanRead { get; }
    public bool CanTimeout { get; }
    public int WriteTimeout { get; public set; }
    public int ReadTimeout { get; public set; }
    public bool CanSeek { get; }
    public long Length { get; }
    public long Position { get; public set; }
    internal NpgsqlRawCopyStream(NpgsqlConnector connector);
    private static NpgsqlRawCopyStream();
    [CompilerGeneratedAttribute]
internal bool get_IsBinary();
    [CompilerGeneratedAttribute]
private void set_IsBinary(bool value);
    public virtual bool get_CanWrite();
    public virtual bool get_CanRead();
    public virtual bool get_CanTimeout();
    public virtual int get_WriteTimeout();
    public virtual void set_WriteTimeout(int value);
    public virtual int get_ReadTimeout();
    public virtual void set_ReadTimeout(int value);
    [AsyncStateMachineAttribute("Npgsql.NpgsqlRawCopyStream/<Init>d__27")]
internal Task Init(string copyCommand, bool async, CancellationToken cancellationToken);
    public virtual void Write(Byte[] buffer, int offset, int count);
    public virtual Task WriteAsync(Byte[] buffer, int offset, int count, CancellationToken cancellationToken);
    [NullableContextAttribute("0")]
public virtual void Write(ReadOnlySpan`1<byte> buffer);
    [NullableContextAttribute("0")]
public virtual ValueTask WriteAsync(ReadOnlyMemory`1<byte> buffer, CancellationToken cancellationToken);
    public virtual void Flush();
    public virtual Task FlushAsync(CancellationToken cancellationToken);
    private Task FlushAsync(bool async, CancellationToken cancellationToken);
    public virtual int Read(Byte[] buffer, int offset, int count);
    public virtual Task`1<int> ReadAsync(Byte[] buffer, int offset, int count, CancellationToken cancellationToken);
    [NullableContextAttribute("0")]
public virtual int Read(Span`1<byte> span);
    [NullableContextAttribute("0")]
public virtual ValueTask`1<int> ReadAsync(Memory`1<byte> buffer, CancellationToken cancellationToken);
    [NullableContextAttribute("0")]
[AsyncStateMachineAttribute("Npgsql.NpgsqlRawCopyStream/<ReadCore>d__39")]
private ValueTask`1<int> ReadCore(int count, bool async, CancellationToken cancellationToken);
    public sealed virtual void Cancel();
    public sealed virtual Task CancelAsync();
    [AsyncStateMachineAttribute("Npgsql.NpgsqlRawCopyStream/<Cancel>d__42")]
private Task Cancel(bool async);
    protected virtual void Dispose(bool disposing);
    public virtual ValueTask DisposeAsync();
    [AsyncStateMachineAttribute("Npgsql.NpgsqlRawCopyStream/<DisposeAsync>d__45")]
private ValueTask DisposeAsync(bool disposing, bool async);
    private void Cleanup();
    private void CheckDisposed();
    public virtual bool get_CanSeek();
    public virtual long Seek(long offset, SeekOrigin origin);
    public virtual void SetLength(long value);
    public virtual long get_Length();
    public virtual long get_Position();
    public virtual void set_Position(long value);
    private static void ValidateArguments(Byte[] buffer, int offset, int count);
    [NullableContextAttribute("0")]
[AsyncStateMachineAttribute("Npgsql.NpgsqlRawCopyStream/<<WriteAsync>g__WriteAsyncInternal|31_0>d")]
[CompilerGeneratedAttribute]
private ValueTask <WriteAsync>g__WriteAsyncInternal|31_0(ReadOnlyMemory`1<byte> buffer, CancellationToken cancellationToken);
}
public class Npgsql.NpgsqlRowUpdatedEventArgs : RowUpdatedEventArgs {
    [NullableContextAttribute("1")]
public NpgsqlRowUpdatedEventArgs(DataRow dataRow, IDbCommand command, StatementType statementType, DataTableMapping tableMapping);
}
public class Npgsql.NpgsqlRowUpdatedEventHandler : MulticastDelegate {
    public NpgsqlRowUpdatedEventHandler(object object, IntPtr method);
    [NullableContextAttribute("1")]
public virtual void Invoke(object sender, NpgsqlRowUpdatedEventArgs e);
    public virtual IAsyncResult BeginInvoke(object sender, NpgsqlRowUpdatedEventArgs e, AsyncCallback callback, object object);
    public virtual void EndInvoke(IAsyncResult result);
}
public class Npgsql.NpgsqlRowUpdatingEventArgs : RowUpdatingEventArgs {
    [NullableContextAttribute("1")]
public NpgsqlRowUpdatingEventArgs(DataRow dataRow, IDbCommand command, StatementType statementType, DataTableMapping tableMapping);
}
public class Npgsql.NpgsqlRowUpdatingEventHandler : MulticastDelegate {
    public NpgsqlRowUpdatingEventHandler(object object, IntPtr method);
    [NullableContextAttribute("1")]
public virtual void Invoke(object sender, NpgsqlRowUpdatingEventArgs e);
    public virtual IAsyncResult BeginInvoke(object sender, NpgsqlRowUpdatingEventArgs e, AsyncCallback callback, object object);
    public virtual void EndInvoke(IAsyncResult result);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal static class Npgsql.NpgsqlSchema : object {
    private static String[] ReservedKeywords;
    private static NpgsqlSchema();
    public static Task`1<DataTable> GetSchema(NpgsqlConnection conn, string collectionName, String[] restrictions, bool async, CancellationToken cancellationToken);
    private static DataTable GetMetaDataCollections();
    private static DataTable GetRestrictions();
    private static NpgsqlCommand BuildCommand(NpgsqlConnection conn, StringBuilder query, String[] restrictions, String[] names);
    private static NpgsqlCommand BuildCommand(NpgsqlConnection conn, StringBuilder query, String[] restrictions, bool addWhere, String[] names);
    private static string RemoveSpecialChars(string paramName);
    [AsyncStateMachineAttribute("Npgsql.NpgsqlSchema/<GetDatabases>d__6")]
private static Task`1<DataTable> GetDatabases(NpgsqlConnection conn, String[] restrictions, bool async, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Npgsql.NpgsqlSchema/<GetSchemata>d__7")]
private static Task`1<DataTable> GetSchemata(NpgsqlConnection conn, String[] restrictions, bool async, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Npgsql.NpgsqlSchema/<GetTables>d__8")]
private static Task`1<DataTable> GetTables(NpgsqlConnection conn, String[] restrictions, bool async, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Npgsql.NpgsqlSchema/<GetColumns>d__9")]
private static Task`1<DataTable> GetColumns(NpgsqlConnection conn, String[] restrictions, bool async, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Npgsql.NpgsqlSchema/<GetViews>d__10")]
private static Task`1<DataTable> GetViews(NpgsqlConnection conn, String[] restrictions, bool async, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Npgsql.NpgsqlSchema/<GetUsers>d__11")]
private static Task`1<DataTable> GetUsers(NpgsqlConnection conn, String[] restrictions, bool async, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Npgsql.NpgsqlSchema/<GetIndexes>d__12")]
private static Task`1<DataTable> GetIndexes(NpgsqlConnection conn, String[] restrictions, bool async, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Npgsql.NpgsqlSchema/<GetIndexColumns>d__13")]
private static Task`1<DataTable> GetIndexColumns(NpgsqlConnection conn, String[] restrictions, bool async, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Npgsql.NpgsqlSchema/<GetConstraints>d__14")]
private static Task`1<DataTable> GetConstraints(NpgsqlConnection conn, String[] restrictions, string constraintType, bool async, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Npgsql.NpgsqlSchema/<GetConstraintColumns>d__15")]
private static Task`1<DataTable> GetConstraintColumns(NpgsqlConnection conn, String[] restrictions, bool async, CancellationToken cancellationToken);
    private static DataTable GetDataSourceInformation(NpgsqlConnection conn);
    private static DataTable GetDataTypes(NpgsqlConnection conn);
    private static void PopulateDefaultDataTypeInfo(DataRow row, PostgresType type);
    private static void PopulateHardcodedDataTypeInfo(DataRow row, PostgresType type);
    private static DataTable GetReservedWords();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Npgsql.NpgsqlSqlEventSource : EventSource {
    public static NpgsqlSqlEventSource Log;
    private static string EventSourceName;
    private static int CommandStartId;
    private static int CommandStopId;
    private static NpgsqlSqlEventSource();
    [EventAttribute("3")]
public void CommandStart(string sql);
    [EventAttribute("4")]
public void CommandStop();
}
public class Npgsql.NpgsqlTracingOptions : object {
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Npgsql.NpgsqlTransaction : DbTransaction {
    private NpgsqlConnector _connector;
    internal bool IsDisposed;
    [NullableAttribute("2")]
private Exception _disposeReason;
    private IsolationLevel _isolationLevel;
    private ILogger _transactionLogger;
    private static IsolationLevel DefaultIsolationLevel;
    [NullableAttribute("2")]
public NpgsqlConnection Connection { get; }
    [NullableAttribute("2")]
protected DbConnection DbConnection { get; }
    internal bool IsCompleted { get; }
    public IsolationLevel IsolationLevel { get; }
    public bool SupportsSavepoints { get; }
    internal NpgsqlTransaction(NpgsqlConnector connector);
    [NullableContextAttribute("2")]
public NpgsqlConnection get_Connection();
    [NullableContextAttribute("2")]
protected virtual DbConnection get_DbConnection();
    internal bool get_IsCompleted();
    public virtual IsolationLevel get_IsolationLevel();
    internal void Init(IsolationLevel isolationLevel);
    public virtual void Commit();
    [AsyncStateMachineAttribute("Npgsql.NpgsqlTransaction/<Commit>d__17")]
private Task Commit(bool async, CancellationToken cancellationToken);
    public virtual Task CommitAsync(CancellationToken cancellationToken);
    public virtual void Rollback();
    [AsyncStateMachineAttribute("Npgsql.NpgsqlTransaction/<Rollback>d__20")]
private Task Rollback(bool async, CancellationToken cancellationToken);
    public virtual Task RollbackAsync(CancellationToken cancellationToken);
    public virtual void Save(string name);
    public virtual Task SaveAsync(string name, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Npgsql.NpgsqlTransaction/<Rollback>d__24")]
private Task Rollback(string name, bool async, CancellationToken cancellationToken);
    public virtual void Rollback(string name);
    public virtual Task RollbackAsync(string name, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Npgsql.NpgsqlTransaction/<Release>d__27")]
private Task Release(string name, bool async, CancellationToken cancellationToken);
    public virtual void Release(string name);
    public virtual Task ReleaseAsync(string name, CancellationToken cancellationToken);
    public virtual bool get_SupportsSavepoints();
    protected virtual void Dispose(bool disposing);
    public virtual ValueTask DisposeAsync();
    [NullableContextAttribute("2")]
internal void DisposeImmediately(Exception disposeReason);
    private void CheckReady();
    private void CheckDisposed();
    private static bool RequiresQuoting(string identifier);
    internal void UnbindIfNecessary();
    [AsyncStateMachineAttribute("Npgsql.NpgsqlTransaction/<<DisposeAsync>g__DisposeAsyncInternal|33_0>d")]
[CompilerGeneratedAttribute]
private ValueTask <DisposeAsync>g__DisposeAsyncInternal|33_0();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Npgsql.PgPassFile : object {
    [CompilerGeneratedAttribute]
private string <FileName>k__BackingField;
    internal string FileName { get; }
    internal IEnumerable`1<Entry> Entries { get; }
    public PgPassFile(string fileName);
    [CompilerGeneratedAttribute]
internal string get_FileName();
    internal IEnumerable`1<Entry> get_Entries();
    [NullableContextAttribute("2")]
internal Entry GetFirstMatchingEntry(string host, Nullable`1<int> port, string database, string username);
}
internal enum Npgsql.PlaceholderType : Enum {
    public int value__;
    public static PlaceholderType NoParameters;
    public static PlaceholderType Named;
    public static PlaceholderType Positional;
    public static PlaceholderType Mixed;
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Npgsql.PoolingDataSource : NpgsqlDataSource {
    private int _max;
    private int _min;
    private TimeSpan _connectionLifetime;
    private Int32 modreq(System.Runtime.CompilerServices.IsVolatile) _numConnectors;
    private Int32 modreq(System.Runtime.CompilerServices.IsVolatile) _idleCount;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private protected NpgsqlConnector[] Connectors;
    [NullableAttribute("2")]
private NpgsqlMultiHostDataSource _parentPool;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private ChannelReader`1<NpgsqlConnector> _idleConnectorReader;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[CompilerGeneratedAttribute]
private ChannelWriter`1<NpgsqlConnector> <IdleConnectorWriter>k__BackingField;
    private ILogger _logger;
    private Int32 modreq(System.Runtime.CompilerServices.IsVolatile) _clearCounter;
    private static TimerCallback PruningTimerCallback;
    private Timer _pruningTimer;
    private TimeSpan _pruningSamplingInterval;
    private int _pruningSampleSize;
    private Int32[] _pruningSamples;
    private int _pruningMedianIndex;
    private Boolean modreq(System.Runtime.CompilerServices.IsVolatile) _pruningTimerEnabled;
    private int _pruningSampleIndex;
    private Int32 modreq(System.Runtime.CompilerServices.IsVolatile) _isClearing;
    private static SingleThreadSynchronizationContext SingleThreadSynchronizationContext;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
internal ChannelWriter`1<NpgsqlConnector> IdleConnectorWriter { get; }
    [TupleElementNamesAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[NullableAttribute("0")]
internal ValueTuple`3<int, int, int> Statistics { get; }
    internal bool OwnsConnectors { get; }
    internal PoolingDataSource(NpgsqlConnectionStringBuilder settings, NpgsqlDataSourceConfiguration dataSourceConfig, NpgsqlMultiHostDataSource parentPool);
    private static PoolingDataSource();
    [CompilerGeneratedAttribute]
internal ChannelWriter`1<NpgsqlConnector> get_IdleConnectorWriter();
    [NullableContextAttribute("0")]
internal sealed virtual ValueTuple`3<int, int, int> get_Statistics();
    internal sealed virtual bool get_OwnsConnectors();
    internal sealed virtual ValueTask`1<NpgsqlConnector> Get(NpgsqlConnection conn, NpgsqlTimeout timeout, bool async, CancellationToken cancellationToken);
    [NullableContextAttribute("2")]
internal sealed virtual bool TryGetIdleConnector(NpgsqlConnector& connector);
    [NullableContextAttribute("2")]
private bool CheckIdleConnector(NpgsqlConnector connector);
    [AsyncStateMachineAttribute("Npgsql.PoolingDataSource/<OpenNewConnector>d__31")]
internal sealed virtual ValueTask`1<NpgsqlConnector> OpenNewConnector(NpgsqlConnection conn, NpgsqlTimeout timeout, bool async, CancellationToken cancellationToken);
    internal sealed virtual void Return(NpgsqlConnector connector);
    internal virtual void Clear();
    private void CloseConnector(NpgsqlConnector connector);
    internal virtual bool TryRemovePendingEnlistedConnector(NpgsqlConnector connector, Transaction transaction);
    private void UpdatePruningTimer();
    [NullableContextAttribute("2")]
private static void PruneIdleConnectors(object state);
    private static int DivideRoundingUp(int value, int divisor);
    [AsyncStateMachineAttribute("Npgsql.PoolingDataSource/<<Get>g__RentAsync|28_0>d")]
[CompilerGeneratedAttribute]
private ValueTask`1<NpgsqlConnector> <Get>g__RentAsync|28_0(NpgsqlConnection conn, NpgsqlTimeout timeout, bool async, CancellationToken cancellationToken);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal static class Npgsql.PoolManager : object {
    [CompilerGeneratedAttribute]
private static ConcurrentDictionary`2<string, NpgsqlDataSource> <Pools>k__BackingField;
    internal static ConcurrentDictionary`2<string, NpgsqlDataSource> Pools { get; }
    private static PoolManager();
    [CompilerGeneratedAttribute]
internal static ConcurrentDictionary`2<string, NpgsqlDataSource> get_Pools();
    internal static void Clear(string connString);
    internal static void ClearAll();
    internal static void Reset();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Npgsql.PostgresDatabaseInfo : NpgsqlDatabaseInfo {
    private ILogger _connectionLogger;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private List`1<PostgresType> _types;
    [CompilerGeneratedAttribute]
private string <LongVersion>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsRedshift>k__BackingField;
    public string LongVersion { get; public set; }
    public bool IsRedshift { get; private set; }
    public bool SupportsUnlisten { get; }
    public bool HasEnumSortOrder { get; }
    public bool HasTypeCategory { get; }
    internal PostgresDatabaseInfo(NpgsqlConnector conn);
    protected virtual IEnumerable`1<PostgresType> GetTypes();
    [CompilerGeneratedAttribute]
public string get_LongVersion();
    [CompilerGeneratedAttribute]
public void set_LongVersion(string value);
    [CompilerGeneratedAttribute]
public bool get_IsRedshift();
    [CompilerGeneratedAttribute]
private void set_IsRedshift(bool value);
    public virtual bool get_SupportsUnlisten();
    public virtual bool get_HasEnumSortOrder();
    public virtual bool get_HasTypeCategory();
    [AsyncStateMachineAttribute("Npgsql.PostgresDatabaseInfo/<LoadPostgresInfo>d__18")]
internal Task LoadPostgresInfo(NpgsqlConnector conn, NpgsqlTimeout timeout, bool async);
    private static string GenerateLoadTypesQuery(bool withRange, bool withMultirange, bool loadTableComposites);
    private static string GenerateLoadCompositeTypesQuery(bool loadTableComposites);
    private static string GenerateLoadEnumFieldsQuery(bool withEnumSortOrder);
    [AsyncStateMachineAttribute("Npgsql.PostgresDatabaseInfo/<LoadBackendTypes>d__22")]
internal Task`1<List`1<PostgresType>> LoadBackendTypes(NpgsqlConnector conn, NpgsqlTimeout timeout, bool async);
    [CompilerGeneratedAttribute]
internal static string <LoadBackendTypes>g__SanitizeForReplicationConnection|22_0(string str);
    [CompilerGeneratedAttribute]
internal static string <LoadBackendTypes>g__ReadNonNullableString|22_1(NpgsqlReadBuffer buffer);
}
internal class Npgsql.PostgresDatabaseInfoFactory : object {
    [NullableContextAttribute("1")]
[AsyncStateMachineAttribute("Npgsql.PostgresDatabaseInfoFactory/<Load>d__0")]
public sealed virtual Task`1<NpgsqlDatabaseInfo> Load(NpgsqlConnector conn, NpgsqlTimeout timeout, bool async);
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
internal static class Npgsql.PostgresEnvironment : object {
    internal static string User { get; }
    internal static string Password { get; }
    internal static string PassFile { get; }
    internal static string PassFileDefault { get; }
    internal static string SslCert { get; }
    internal static string SslCertDefault { get; }
    internal static string SslKey { get; }
    internal static string SslKeyDefault { get; }
    internal static string SslCertRoot { get; }
    internal static string SslCertRootDefault { get; }
    internal static string ClientEncoding { get; }
    internal static string TimeZone { get; }
    internal static string Options { get; }
    internal static string TargetSessionAttributes { get; }
    internal static string get_User();
    internal static string get_Password();
    internal static string get_PassFile();
    internal static string get_PassFileDefault();
    internal static string get_SslCert();
    internal static string get_SslCertDefault();
    internal static string get_SslKey();
    internal static string get_SslKeyDefault();
    internal static string get_SslCertRoot();
    internal static string get_SslCertRootDefault();
    internal static string get_ClientEncoding();
    internal static string get_TimeZone();
    internal static string get_Options();
    internal static string get_TargetSessionAttributes();
    private static string GetHomeDir();
    private static string GetHomePostgresDir();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public static class Npgsql.PostgresErrorCodes : object {
    public static string SuccessfulCompletion;
    public static string Warning;
    public static string DynamicResultSetsReturnedWarning;
    public static string ImplicitZeroBitPaddingWarning;
    public static string NullValueEliminatedInSetFunctionWarning;
    public static string PrivilegeNotGrantedWarning;
    public static string PrivilegeNotRevokedWarning;
    public static string StringDataRightTruncationWarning;
    public static string DeprecatedFeatureWarning;
    public static string NoData;
    public static string NoAdditionalDynamicResultSetsReturned;
    public static string SqlStatementNotYetComplete;
    public static string ConnectionException;
    public static string ConnectionDoesNotExist;
    public static string ConnectionFailure;
    public static string SqlClientUnableToEstablishSqlConnection;
    public static string SqlServerRejectedEstablishmentOfSqlConnection;
    public static string TransactionResolutionUnknown;
    public static string ProtocolViolation;
    public static string TriggeredActionException;
    public static string FeatureNotSupported;
    public static string InvalidTransactionInitiation;
    public static string LocatorException;
    public static string InvalidLocatorSpecification;
    public static string InvalidGrantor;
    public static string InvalidGrantOperation;
    public static string InvalidRoleSpecification;
    public static string DiagnosticsException;
    public static string StackedDiagnosticsAccessedWithoutActiveHandler;
    public static string CaseNotFound;
    public static string CardinalityViolation;
    public static string DataException;
    public static string ArraySubscriptError;
    public static string CharacterNotInRepertoire;
    public static string DatetimeFieldOverflow;
    public static string DivisionByZero;
    public static string ErrorInAssignment;
    public static string EscapeCharacterConflict;
    public static string IndicatorOverflow;
    public static string IntervalFieldOverflow;
    public static string InvalidArgumentForLogarithm;
    public static string InvalidArgumentForNtileFunction;
    public static string InvalidArgumentForNthValueFunction;
    public static string InvalidArgumentForPowerFunction;
    public static string InvalidArgumentForWidthBucketFunction;
    public static string InvalidCharacterValueForCast;
    public static string InvalidDatetimeFormat;
    public static string InvalidEscapeCharacter;
    public static string InvalidEscapeOctet;
    public static string InvalidEscapeSequence;
    public static string NonstandardUseOfEscapeCharacter;
    public static string InvalidIndicatorParameterValue;
    public static string InvalidParameterValue;
    public static string InvalidRegularExpression;
    public static string InvalidRowCountInLimitClause;
    public static string InvalidRowCountInResultOffsetClause;
    public static string InvalidTablesampleArgument;
    public static string InvalidTablesampleRepeat;
    public static string InvalidTimeZoneDisplacementValue;
    public static string InvalidUseOfEscapeCharacter;
    public static string MostSpecificTypeMismatch;
    public static string NullValueNotAllowed;
    public static string NullValueNoIndicatorParameter;
    public static string NumericValueOutOfRange;
    public static string StringDataLengthMismatch;
    public static string StringDataRightTruncation;
    public static string SubstringError;
    public static string TrimError;
    public static string UnterminatedCString;
    public static string ZeroLengthCharacterString;
    public static string FloatingPointException;
    public static string InvalidTextRepresentation;
    public static string InvalidBinaryRepresentation;
    public static string BadCopyFileFormat;
    public static string UntranslatableCharacter;
    public static string NotAnXmlDocument;
    public static string InvalidXmlDocument;
    public static string InvalidXmlContent;
    public static string InvalidXmlComment;
    public static string InvalidXmlProcessingInstruction;
    public static string IntegrityConstraintViolation;
    public static string RestrictViolation;
    public static string NotNullViolation;
    public static string ForeignKeyViolation;
    public static string UniqueViolation;
    public static string CheckViolation;
    public static string ExclusionViolation;
    public static string InvalidCursorState;
    public static string InvalidTransactionState;
    public static string ActiveSqlTransaction;
    public static string BranchTransactionAlreadyActive;
    public static string HeldCursorRequiresSameIsolationLevel;
    public static string InappropriateAccessModeForBranchTransaction;
    public static string InappropriateIsolationLevelForBranchTransaction;
    public static string NoActiveSqlTransactionForBranchTransaction;
    public static string ReadOnlySqlTransaction;
    public static string SchemaAndDataStatementMixingNotSupported;
    public static string NoActiveSqlTransaction;
    public static string InFailedSqlTransaction;
    public static string InvalidSqlStatementName;
    public static string TriggeredDataChangeViolation;
    public static string InvalidAuthorizationSpecification;
    public static string InvalidPassword;
    public static string DependentPrivilegeDescriptorsStillExist;
    public static string DependentObjectsStillExist;
    public static string InvalidTransactionTermination;
    public static string SqlRoutineException;
    public static string FunctionExecutedNoReturnStatementSqlRoutineException;
    public static string ModifyingSqlDataNotPermittedSqlRoutineException;
    public static string ProhibitedSqlStatementAttemptedSqlRoutineException;
    public static string ReadingSqlDataNotPermittedSqlRoutineException;
    public static string InvalidCursorName;
    public static string ExternalRoutineException;
    public static string ContainingSqlNotPermittedExternalRoutineException;
    public static string ModifyingSqlDataNotPermittedExternalRoutineException;
    public static string ProhibitedSqlStatementAttemptedExternalRoutineException;
    public static string ReadingSqlDataNotPermittedExternalRoutineException;
    public static string ExternalRoutineInvocationException;
    public static string InvalidSqlstateReturnedExternalRoutineInvocationException;
    public static string NullValueNotAllowedExternalRoutineInvocationException;
    public static string TriggerProtocolViolatedExternalRoutineInvocationException;
    public static string SrfProtocolViolatedExternalRoutineInvocationException;
    public static string EventTriggerProtocolViolatedExternalRoutineInvocationException;
    public static string SavepointException;
    public static string InvalidSavepointSpecification;
    public static string InvalidCatalogName;
    public static string InvalidSchemaName;
    public static string TransactionRollback;
    public static string TransactionIntegrityConstraintViolation;
    public static string SerializationFailure;
    public static string StatementCompletionUnknown;
    public static string DeadlockDetected;
    public static string SyntaxErrorOrAccessRuleViolation;
    public static string SyntaxError;
    public static string InsufficientPrivilege;
    public static string CannotCoerce;
    public static string GroupingError;
    public static string WindowingError;
    public static string InvalidRecursion;
    public static string InvalidForeignKey;
    public static string InvalidName;
    public static string NameTooLong;
    public static string ReservedName;
    public static string DatatypeMismatch;
    public static string IndeterminateDatatype;
    public static string CollationMismatch;
    public static string IndeterminateCollation;
    public static string WrongObjectType;
    public static string UndefinedColumn;
    public static string UndefinedFunction;
    public static string UndefinedTable;
    public static string UndefinedParameter;
    public static string UndefinedObject;
    public static string DuplicateColumn;
    public static string DuplicateCursor;
    public static string DuplicateDatabase;
    public static string DuplicateFunction;
    public static string DuplicatePreparedStatement;
    public static string DuplicateSchema;
    public static string DuplicateTable;
    public static string DuplicateAlias;
    public static string DuplicateObject;
    public static string AmbiguousColumn;
    public static string AmbiguousFunction;
    public static string AmbiguousParameter;
    public static string AmbiguousAlias;
    public static string InvalidColumnReference;
    public static string InvalidColumnDefinition;
    public static string InvalidCursorDefinition;
    public static string InvalidDatabaseDefinition;
    public static string InvalidFunctionDefinition;
    public static string InvalidPreparedStatementDefinition;
    public static string InvalidSchemaDefinition;
    public static string InvalidTableDefinition;
    public static string InvalidObjectDefinition;
    public static string WithCheckOptionViolation;
    public static string InsufficientResources;
    public static string DiskFull;
    public static string OutOfMemory;
    public static string TooManyConnections;
    public static string ConfigurationLimitExceeded;
    public static string ProgramLimitExceeded;
    public static string StatementTooComplex;
    public static string TooManyColumns;
    public static string TooManyArguments;
    public static string ObjectNotInPrerequisiteState;
    public static string ObjectInUse;
    public static string CantChangeRuntimeParam;
    public static string LockNotAvailable;
    public static string OperatorIntervention;
    public static string QueryCanceled;
    public static string AdminShutdown;
    public static string CrashShutdown;
    public static string CannotConnectNow;
    public static string DatabaseDropped;
    public static string SystemError;
    public static string IoError;
    public static string UndefinedFile;
    public static string DuplicateFile;
    public static string SnapshotFailure;
    public static string ConfigFileError;
    public static string LockFileExists;
    public static string FdwError;
    public static string FdwColumnNameNotFound;
    public static string FdwDynamicParameterValueNeeded;
    public static string FdwFunctionSequenceError;
    public static string FdwInconsistentDescriptorInformation;
    public static string FdwInvalidAttributeValue;
    public static string FdwInvalidColumnName;
    public static string FdwInvalidColumnNumber;
    public static string FdwInvalidDataType;
    public static string FdwInvalidDataTypeDescriptors;
    public static string FdwInvalidDescriptorFieldIdentifier;
    public static string FdwInvalidHandle;
    public static string FdwInvalidOptionIndex;
    public static string FdwInvalidOptionName;
    public static string FdwInvalidStringLengthOrBufferLength;
    public static string FdwInvalidStringFormat;
    public static string FdwInvalidUseOfNullPointer;
    public static string FdwTooManyHandles;
    public static string FdwOutOfMemory;
    public static string FdwNoSchemas;
    public static string FdwOptionNameNotFound;
    public static string FdwReplyHandle;
    public static string FdwSchemaNotFound;
    public static string FdwTableNotFound;
    public static string FdwUnableToCreateExecution;
    public static string FdwUnableToCreateReply;
    public static string FdwUnableToEstablishConnection;
    public static string PlpgsqlError;
    public static string RaiseException;
    public static string NoDataFound;
    public static string TooManyRows;
    public static string AssertFailure;
    public static string InternalError;
    public static string DataCorrupted;
    public static string IndexCorrupted;
    private static String[] CriticalFailureCodes;
    private static PostgresErrorCodes();
    internal static bool IsCriticalFailure(PostgresException e, bool clusterError);
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
public class Npgsql.PostgresException : NpgsqlException {
    [NullableAttribute("1")]
[CompilerGeneratedAttribute]
private string <Severity>k__BackingField;
    [NullableAttribute("1")]
[CompilerGeneratedAttribute]
private string <InvariantSeverity>k__BackingField;
    [NullableAttribute("1")]
[CompilerGeneratedAttribute]
private string <SqlState>k__BackingField;
    [NullableAttribute("1")]
[CompilerGeneratedAttribute]
private string <MessageText>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Detail>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Hint>k__BackingField;
    [CompilerGeneratedAttribute]
private int <Position>k__BackingField;
    [CompilerGeneratedAttribute]
private int <InternalPosition>k__BackingField;
    [CompilerGeneratedAttribute]
private string <InternalQuery>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Where>k__BackingField;
    [CompilerGeneratedAttribute]
private string <SchemaName>k__BackingField;
    [CompilerGeneratedAttribute]
private string <TableName>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ColumnName>k__BackingField;
    [CompilerGeneratedAttribute]
private string <DataTypeName>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ConstraintName>k__BackingField;
    [CompilerGeneratedAttribute]
private string <File>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Line>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Routine>k__BackingField;
    public bool IsTransient { get; }
    [NullableAttribute("1")]
public string Severity { get; }
    [NullableAttribute("1")]
public string InvariantSeverity { get; }
    [NullableAttribute("1")]
public string SqlState { get; }
    [NullableAttribute("1")]
[ObsoleteAttribute("Use SqlState instead")]
public string Code { get; }
    [NullableAttribute("1")]
public string MessageText { get; }
    public string Detail { get; }
    public string Hint { get; }
    public int Position { get; }
    public int InternalPosition { get; }
    public string InternalQuery { get; }
    public string Where { get; }
    public string SchemaName { get; }
    public string TableName { get; }
    public string ColumnName { get; }
    public string DataTypeName { get; }
    public string ConstraintName { get; }
    public string File { get; }
    public string Line { get; }
    public string Routine { get; }
    [NullableContextAttribute("1")]
public PostgresException(string messageText, string severity, string invariantSeverity, string sqlState);
    public PostgresException(string messageText, string severity, string invariantSeverity, string sqlState, string detail, string hint, int position, int internalPosition, string internalQuery, string where, string schemaName, string tableName, string columnName, string dataTypeName, string constraintName, string file, string line, string routine);
    [NullableContextAttribute("1")]
private PostgresException(ErrorOrNoticeMessage msg);
    [NullableContextAttribute("1")]
internal PostgresException(SerializationInfo info, StreamingContext context);
    [NullableContextAttribute("1")]
private static string GetMessage(string sqlState, string messageText, int position, string detail);
    [NullableContextAttribute("1")]
private static string TryAddString(string text, string value);
    [NullableContextAttribute("1")]
internal static PostgresException Load(NpgsqlReadBuffer buf, bool includeDetail, ILogger exceptionLogger);
    [NullableContextAttribute("1")]
public virtual void GetObjectData(SerializationInfo info, StreamingContext context);
    [NullableContextAttribute("1")]
public virtual string ToString();
    public virtual bool get_IsTransient();
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
public string get_Severity();
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
public string get_InvariantSeverity();
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
public virtual string get_SqlState();
    [NullableContextAttribute("1")]
public string get_Code();
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
public string get_MessageText();
    [CompilerGeneratedAttribute]
public string get_Detail();
    [CompilerGeneratedAttribute]
public string get_Hint();
    [CompilerGeneratedAttribute]
public int get_Position();
    [CompilerGeneratedAttribute]
public int get_InternalPosition();
    [CompilerGeneratedAttribute]
public string get_InternalQuery();
    [CompilerGeneratedAttribute]
public string get_Where();
    [CompilerGeneratedAttribute]
public string get_SchemaName();
    [CompilerGeneratedAttribute]
public string get_TableName();
    [CompilerGeneratedAttribute]
public string get_ColumnName();
    [CompilerGeneratedAttribute]
public string get_DataTypeName();
    [CompilerGeneratedAttribute]
public string get_ConstraintName();
    [CompilerGeneratedAttribute]
public string get_File();
    [CompilerGeneratedAttribute]
public string get_Line();
    [CompilerGeneratedAttribute]
public string get_Routine();
    [NullableContextAttribute("0")]
[CompilerGeneratedAttribute]
private void <.ctor>g__AddData|1_0(string key, T value);
    [NullableContextAttribute("0")]
[CompilerGeneratedAttribute]
internal static T <.ctor>g__GetValue|6_0(string propertyName, <>c__DisplayClass6_0& );
    [NullableContextAttribute("0")]
[CompilerGeneratedAttribute]
internal static void <ToString>g__AppendLine|8_0(string propertyName, T propertyValue, <>c__DisplayClass8_0& );
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Npgsql.PostgresMinimalDatabaseInfo : PostgresDatabaseInfo {
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private static PostgresType[] _typesWithMultiranges;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private static PostgresType[] _typesWithoutMultiranges;
    internal PostgresMinimalDatabaseInfo(NpgsqlConnector conn);
    private static PostgresType[] CreateTypes(bool withMultiranges);
    protected virtual IEnumerable`1<PostgresType> GetTypes();
}
internal class Npgsql.PostgresMinimalDatabaseInfoFactory : object {
    [NullableContextAttribute("1")]
public sealed virtual Task`1<NpgsqlDatabaseInfo> Load(NpgsqlConnector conn, NpgsqlTimeout timeout, bool async);
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
public class Npgsql.PostgresNotice : object {
    [NullableAttribute("1")]
[CompilerGeneratedAttribute]
private string <Severity>k__BackingField;
    [NullableAttribute("1")]
[CompilerGeneratedAttribute]
private string <InvariantSeverity>k__BackingField;
    [NullableAttribute("1")]
[CompilerGeneratedAttribute]
private string <SqlState>k__BackingField;
    [NullableAttribute("1")]
[CompilerGeneratedAttribute]
private string <MessageText>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Detail>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Hint>k__BackingField;
    [CompilerGeneratedAttribute]
private int <Position>k__BackingField;
    [CompilerGeneratedAttribute]
private int <InternalPosition>k__BackingField;
    [CompilerGeneratedAttribute]
private string <InternalQuery>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Where>k__BackingField;
    [CompilerGeneratedAttribute]
private string <SchemaName>k__BackingField;
    [CompilerGeneratedAttribute]
private string <TableName>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ColumnName>k__BackingField;
    [CompilerGeneratedAttribute]
private string <DataTypeName>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ConstraintName>k__BackingField;
    [CompilerGeneratedAttribute]
private string <File>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Line>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Routine>k__BackingField;
    [NullableAttribute("1")]
public string Severity { get; public set; }
    [NullableAttribute("1")]
public string InvariantSeverity { get; }
    [NullableAttribute("1")]
public string SqlState { get; public set; }
    [NullableAttribute("1")]
[ObsoleteAttribute("Use SqlState instead")]
public string Code { get; }
    [NullableAttribute("1")]
public string MessageText { get; public set; }
    public string Detail { get; public set; }
    public string Hint { get; public set; }
    public int Position { get; public set; }
    public int InternalPosition { get; public set; }
    public string InternalQuery { get; public set; }
    public string Where { get; public set; }
    public string SchemaName { get; public set; }
    public string TableName { get; public set; }
    public string ColumnName { get; public set; }
    public string DataTypeName { get; public set; }
    public string ConstraintName { get; public set; }
    public string File { get; public set; }
    public string Line { get; public set; }
    public string Routine { get; public set; }
    [NullableContextAttribute("1")]
public PostgresNotice(string severity, string invariantSeverity, string sqlState, string messageText);
    public PostgresNotice(string messageText, string severity, string invariantSeverity, string sqlState, string detail, string hint, int position, int internalPosition, string internalQuery, string where, string schemaName, string tableName, string columnName, string dataTypeName, string constraintName, string file, string line, string routine);
    [NullableContextAttribute("1")]
private PostgresNotice(ErrorOrNoticeMessage msg);
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
public string get_Severity();
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
public void set_Severity(string value);
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
public string get_InvariantSeverity();
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
public string get_SqlState();
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
public void set_SqlState(string value);
    [NullableContextAttribute("1")]
public string get_Code();
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
public string get_MessageText();
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
public void set_MessageText(string value);
    [CompilerGeneratedAttribute]
public string get_Detail();
    [CompilerGeneratedAttribute]
public void set_Detail(string value);
    [CompilerGeneratedAttribute]
public string get_Hint();
    [CompilerGeneratedAttribute]
public void set_Hint(string value);
    [CompilerGeneratedAttribute]
public int get_Position();
    [CompilerGeneratedAttribute]
public void set_Position(int value);
    [CompilerGeneratedAttribute]
public int get_InternalPosition();
    [CompilerGeneratedAttribute]
public void set_InternalPosition(int value);
    [CompilerGeneratedAttribute]
public string get_InternalQuery();
    [CompilerGeneratedAttribute]
public void set_InternalQuery(string value);
    [CompilerGeneratedAttribute]
public string get_Where();
    [CompilerGeneratedAttribute]
public void set_Where(string value);
    [CompilerGeneratedAttribute]
public string get_SchemaName();
    [CompilerGeneratedAttribute]
public void set_SchemaName(string value);
    [CompilerGeneratedAttribute]
public string get_TableName();
    [CompilerGeneratedAttribute]
public void set_TableName(string value);
    [CompilerGeneratedAttribute]
public string get_ColumnName();
    [CompilerGeneratedAttribute]
public void set_ColumnName(string value);
    [CompilerGeneratedAttribute]
public string get_DataTypeName();
    [CompilerGeneratedAttribute]
public void set_DataTypeName(string value);
    [CompilerGeneratedAttribute]
public string get_ConstraintName();
    [CompilerGeneratedAttribute]
public void set_ConstraintName(string value);
    [CompilerGeneratedAttribute]
public string get_File();
    [CompilerGeneratedAttribute]
public void set_File(string value);
    [CompilerGeneratedAttribute]
public string get_Line();
    [CompilerGeneratedAttribute]
public void set_Line(string value);
    [CompilerGeneratedAttribute]
public string get_Routine();
    [CompilerGeneratedAttribute]
public void set_Routine(string value);
    [NullableContextAttribute("1")]
internal static PostgresNotice Load(NpgsqlReadBuffer buf, bool includeDetail, ILogger exceptionLogger);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Npgsql.PostgresTypes.PostgresArrayType : PostgresType {
    [CompilerGeneratedAttribute]
private PostgresType <Element>k__BackingField;
    public PostgresType Element { get; }
    protected internal PostgresArrayType(string ns, string internalName, UInt32 oid, PostgresType elementPostgresType);
    [CompilerGeneratedAttribute]
public PostgresType get_Element();
    internal virtual string GetPartialNameWithFacets(int typeModifier);
    internal virtual PostgresFacets GetFacets(int typeModifier);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Npgsql.PostgresTypes.PostgresBaseType : PostgresType {
    protected internal PostgresBaseType(string ns, string internalName, UInt32 oid);
    internal virtual string GetPartialNameWithFacets(int typeModifier);
    internal virtual PostgresFacets GetFacets(int typeModifier);
    private static string TranslateInternalName(string internalName);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Npgsql.PostgresTypes.PostgresCompositeType : PostgresType {
    [CompilerGeneratedAttribute]
private List`1<Field> <MutableFields>k__BackingField;
    public IReadOnlyList`1<Field> Fields { get; }
    internal List`1<Field> MutableFields { get; }
    internal PostgresCompositeType(string ns, string name, UInt32 oid);
    public IReadOnlyList`1<Field> get_Fields();
    [CompilerGeneratedAttribute]
internal List`1<Field> get_MutableFields();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Npgsql.PostgresTypes.PostgresDomainType : PostgresType {
    [CompilerGeneratedAttribute]
private PostgresType <BaseType>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <NotNull>k__BackingField;
    public PostgresType BaseType { get; }
    public bool NotNull { get; }
    protected internal PostgresDomainType(string ns, string name, UInt32 oid, PostgresType baseType, bool notNull);
    [CompilerGeneratedAttribute]
public PostgresType get_BaseType();
    [CompilerGeneratedAttribute]
public bool get_NotNull();
    internal virtual PostgresFacets GetFacets(int typeModifier);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Npgsql.PostgresTypes.PostgresEnumType : PostgresType {
    [CompilerGeneratedAttribute]
private List`1<string> <MutableLabels>k__BackingField;
    public IReadOnlyList`1<string> Labels { get; }
    internal List`1<string> MutableLabels { get; }
    protected internal PostgresEnumType(string ns, string name, UInt32 oid);
    public IReadOnlyList`1<string> get_Labels();
    [CompilerGeneratedAttribute]
internal List`1<string> get_MutableLabels();
}
[IsReadOnlyAttribute]
internal class Npgsql.PostgresTypes.PostgresFacets : ValueType {
    internal static PostgresFacets None;
    public Nullable`1<int> Size;
    public Nullable`1<int> Precision;
    public Nullable`1<int> Scale;
    internal PostgresFacets(Nullable`1<int> size, Nullable`1<int> precision, Nullable`1<int> scale);
    private static PostgresFacets();
    [NullableContextAttribute("2")]
public virtual bool Equals(object o);
    public sealed virtual bool Equals(PostgresFacets o);
    public static bool op_Equality(PostgresFacets x, PostgresFacets y);
    public static bool op_Inequality(PostgresFacets x, PostgresFacets y);
    public virtual int GetHashCode();
    [NullableContextAttribute("1")]
public virtual string ToString();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Npgsql.PostgresTypes.PostgresMultirangeType : PostgresType {
    [CompilerGeneratedAttribute]
private PostgresRangeType <Subrange>k__BackingField;
    public PostgresRangeType Subrange { get; }
    protected internal PostgresMultirangeType(string ns, string name, UInt32 oid, PostgresRangeType rangePostgresType);
    [CompilerGeneratedAttribute]
public PostgresRangeType get_Subrange();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Npgsql.PostgresTypes.PostgresRangeType : PostgresType {
    [CompilerGeneratedAttribute]
private PostgresType <Subtype>k__BackingField;
    [NullableAttribute("2")]
[CompilerGeneratedAttribute]
private PostgresMultirangeType <Multirange>k__BackingField;
    public PostgresType Subtype { get; }
    [NullableAttribute("2")]
public PostgresMultirangeType Multirange { get; internal set; }
    protected internal PostgresRangeType(string ns, string name, UInt32 oid, PostgresType subtypePostgresType);
    [CompilerGeneratedAttribute]
public PostgresType get_Subtype();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public PostgresMultirangeType get_Multirange();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
internal void set_Multirange(PostgresMultirangeType value);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public abstract class Npgsql.PostgresTypes.PostgresType : object {
    [CompilerGeneratedAttribute]
private UInt32 <OID>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Namespace>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    [CompilerGeneratedAttribute]
private string <FullName>k__BackingField;
    [CompilerGeneratedAttribute]
private string <InternalName>k__BackingField;
    [NullableAttribute("2")]
[CompilerGeneratedAttribute]
private PostgresArrayType <Array>k__BackingField;
    [NullableAttribute("2")]
[CompilerGeneratedAttribute]
private PostgresRangeType <Range>k__BackingField;
    public UInt32 OID { get; }
    public string Namespace { get; }
    public string Name { get; }
    public string FullName { get; }
    public string DisplayName { get; }
    public string InternalName { get; }
    [NullableAttribute("2")]
public PostgresArrayType Array { get; internal set; }
    [NullableAttribute("2")]
public PostgresRangeType Range { get; internal set; }
    protected PostgresType(string ns, string name, UInt32 oid);
    protected PostgresType(string ns, string name, string internalName, UInt32 oid);
    [CompilerGeneratedAttribute]
public UInt32 get_OID();
    [CompilerGeneratedAttribute]
public string get_Namespace();
    [CompilerGeneratedAttribute]
public string get_Name();
    [CompilerGeneratedAttribute]
public string get_FullName();
    public string get_DisplayName();
    [CompilerGeneratedAttribute]
public string get_InternalName();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public PostgresArrayType get_Array();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
internal void set_Array(PostgresArrayType value);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public PostgresRangeType get_Range();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
internal void set_Range(PostgresRangeType value);
    internal virtual string GetPartialNameWithFacets(int typeModifier);
    internal string GetDisplayNameWithFacets(int typeModifier);
    internal virtual PostgresFacets GetFacets(int typeModifier);
    public virtual string ToString();
}
public class Npgsql.PostgresTypes.UnknownBackendType : PostgresType {
    [NullableAttribute("1")]
internal static PostgresType Instance;
    private static UnknownBackendType();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal static class Npgsql.PregeneratedMessages : object {
    internal static Byte[] BeginTransRepeatableRead;
    internal static Byte[] BeginTransSerializable;
    internal static Byte[] BeginTransReadCommitted;
    internal static Byte[] BeginTransReadUncommitted;
    internal static Byte[] CommitTransaction;
    internal static Byte[] RollbackTransaction;
    internal static Byte[] DiscardAll;
    private static PregeneratedMessages();
    internal static Byte[] Generate(NpgsqlWriteBuffer buf, string query);
}
internal enum Npgsql.PreparedState : Enum {
    public int value__;
    public static PreparedState NotPrepared;
    public static PreparedState BeingPrepared;
    public static PreparedState Prepared;
    public static PreparedState BeingUnprepared;
    public static PreparedState Unprepared;
    public static PreparedState Invalidated;
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[DebuggerDisplayAttribute("{Name} ({State}): {Sql}")]
internal class Npgsql.PreparedStatement : object {
    private PreparedStatementManager _manager;
    [CompilerGeneratedAttribute]
private string <Sql>k__BackingField;
    [NullableAttribute("2")]
internal string Name;
    [NullableAttribute("2")]
internal RowDescriptionMessage Description;
    internal int Usages;
    [CompilerGeneratedAttribute]
private PreparedState <State>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsExplicit>k__BackingField;
    [NullableAttribute("2")]
internal PreparedStatement StatementBeingReplaced;
    [CompilerGeneratedAttribute]
private int <AutoPreparedSlotIndex>k__BackingField;
    [CompilerGeneratedAttribute]
private DateTime <LastUsed>k__BackingField;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[CompilerGeneratedAttribute]
private Type[] <HandlerParamTypes>k__BackingField;
    private static Type[] EmptyParamTypes;
    internal string Sql { get; }
    internal PreparedState State { get; internal set; }
    internal bool IsPrepared { get; }
    internal bool IsExplicit { get; }
    internal int AutoPreparedSlotIndex { get; internal set; }
    internal DateTime LastUsed { get; internal set; }
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
internal Type[] HandlerParamTypes { get; private set; }
    internal PreparedStatement(PreparedStatementManager manager, string sql, bool isExplicit);
    private static PreparedStatement();
    [CompilerGeneratedAttribute]
internal string get_Sql();
    [CompilerGeneratedAttribute]
internal PreparedState get_State();
    [CompilerGeneratedAttribute]
internal void set_State(PreparedState value);
    internal bool get_IsPrepared();
    [CompilerGeneratedAttribute]
internal bool get_IsExplicit();
    [CompilerGeneratedAttribute]
internal int get_AutoPreparedSlotIndex();
    [CompilerGeneratedAttribute]
internal void set_AutoPreparedSlotIndex(int value);
    [CompilerGeneratedAttribute]
internal DateTime get_LastUsed();
    [CompilerGeneratedAttribute]
internal void set_LastUsed(DateTime value);
    [CompilerGeneratedAttribute]
internal Type[] get_HandlerParamTypes();
    [CompilerGeneratedAttribute]
private void set_HandlerParamTypes(Type[] value);
    internal static PreparedStatement CreateExplicit(PreparedStatementManager manager, string sql, string name, List`1<NpgsqlParameter> parameters, PreparedStatement statementBeingReplaced);
    internal static PreparedStatement CreateAutoPrepareCandidate(PreparedStatementManager manager, string sql);
    internal void SetParamTypes(List`1<NpgsqlParameter> parameters);
    internal bool DoParametersMatch(List`1<NpgsqlParameter> parameters);
    internal void AbortPrepare();
    internal void CompleteUnprepare();
    public virtual string ToString();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Npgsql.PreparedStatementManager : object {
    [CompilerGeneratedAttribute]
private int <MaxAutoPrepared>k__BackingField;
    [CompilerGeneratedAttribute]
private int <UsagesBeforePrepare>k__BackingField;
    [CompilerGeneratedAttribute]
private Dictionary`2<string, PreparedStatement> <BySql>k__BackingField;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[CompilerGeneratedAttribute]
private PreparedStatement[] <AutoPrepared>k__BackingField;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private PreparedStatement[] _candidates;
    internal int NumPrepared;
    private NpgsqlConnector _connector;
    private ulong _preparedStatementIndex;
    private ILogger _commandLogger;
    internal static int CandidateCount;
    internal int MaxAutoPrepared { get; }
    internal int UsagesBeforePrepare { get; }
    internal Dictionary`2<string, PreparedStatement> BySql { get; }
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
internal PreparedStatement[] AutoPrepared { get; }
    internal PreparedStatementManager(NpgsqlConnector connector);
    [CompilerGeneratedAttribute]
internal int get_MaxAutoPrepared();
    [CompilerGeneratedAttribute]
internal int get_UsagesBeforePrepare();
    [CompilerGeneratedAttribute]
internal Dictionary`2<string, PreparedStatement> get_BySql();
    [CompilerGeneratedAttribute]
internal PreparedStatement[] get_AutoPrepared();
    internal string NextPreparedStatementName();
    internal PreparedStatement GetOrAddExplicit(NpgsqlBatchCommand batchCommand);
    internal PreparedStatement TryGetAutoPrepared(NpgsqlBatchCommand batchCommand);
    private void RemoveCandidate(PreparedStatement candidate);
    internal void ClearAll();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Npgsql.PreparedTextReader : TextReader {
    private string _str;
    private ColumnStream _stream;
    private int _position;
    private bool _disposed;
    public bool IsDisposed { get; }
    public void Init(string str, ColumnStream stream);
    public bool get_IsDisposed();
    public virtual int Peek();
    public virtual int Read();
    [NullableContextAttribute("0")]
public virtual int Read(Span`1<char> buffer);
    public virtual int Read(Char[] buffer, int index, int count);
    public virtual Task`1<int> ReadAsync(Char[] buffer, int index, int count);
    [NullableContextAttribute("0")]
public virtual ValueTask`1<int> ReadAsync(Memory`1<char> buffer, CancellationToken cancellationToken);
    public virtual Task`1<string> ReadLineAsync();
    public virtual string ReadToEnd();
    public virtual Task`1<string> ReadToEndAsync();
    private void CheckDisposed();
    protected virtual void Dispose(bool disposing);
}
[GeneratedCodeAttribute("System.Resources.Tools.StronglyTypedResourceBuilder", "4.0.0.0")]
[DebuggerNonUserCodeAttribute]
[CompilerGeneratedAttribute]
internal class Npgsql.Properties.NpgsqlStrings : object {
    private static ResourceManager resourceMan;
    private static CultureInfo resourceCulture;
    [EditorBrowsableAttribute("2")]
internal static ResourceManager ResourceManager { get; }
    [EditorBrowsableAttribute("2")]
internal static CultureInfo Culture { get; internal set; }
    internal static string CannotUseSslVerifyWithUserCallback { get; }
    internal static string CannotUseSslRootCertificateWithUserCallback { get; }
    internal static string CannotUseSslModeRequireWithoutTrustServerCertificate { get; }
    internal static string CannotUseTrustServerCertificate { get; }
    internal static string NoMultirangeTypeFound { get; }
    internal static string NotSupportedOnDataSourceCommand { get; }
    internal static string NotSupportedOnDataSourceBatch { get; }
    internal static string CannotSetBothPasswordProviderAndPassword { get; }
    internal static string PasswordProviderMissing { get; }
    internal static string ArgumentMustBePositive { get; }
    internal static string CannotSpecifyTargetSessionAttributes { get; }
    internal static string CannotReadIntervalWithMonthsAsTimeSpan { get; }
    internal static string PositionalParameterAfterNamed { get; }
    internal static string CannotReadInfinityValue { get; }
    internal static string SyncAndAsyncConnectionInitializersRequired { get; }
    internal static ResourceManager get_ResourceManager();
    internal static CultureInfo get_Culture();
    internal static void set_Culture(CultureInfo value);
    internal static string get_CannotUseSslVerifyWithUserCallback();
    internal static string get_CannotUseSslRootCertificateWithUserCallback();
    internal static string get_CannotUseSslModeRequireWithoutTrustServerCertificate();
    internal static string get_CannotUseTrustServerCertificate();
    internal static string get_NoMultirangeTypeFound();
    internal static string get_NotSupportedOnDataSourceCommand();
    internal static string get_NotSupportedOnDataSourceBatch();
    internal static string get_CannotSetBothPasswordProviderAndPassword();
    internal static string get_PasswordProviderMissing();
    internal static string get_ArgumentMustBePositive();
    internal static string get_CannotSpecifyTargetSessionAttributes();
    internal static string get_CannotReadIntervalWithMonthsAsTimeSpan();
    internal static string get_PositionalParameterAfterNamed();
    internal static string get_CannotReadInfinityValue();
    internal static string get_SyncAndAsyncConnectionInitializersRequired();
}
public class Npgsql.ProvideClientCertificatesCallback : MulticastDelegate {
    public ProvideClientCertificatesCallback(object object, IntPtr method);
    [NullableContextAttribute("1")]
public virtual void Invoke(X509CertificateCollection certificates);
    public virtual IAsyncResult BeginInvoke(X509CertificateCollection certificates, AsyncCallback callback, object object);
    public virtual void EndInvoke(IAsyncResult result);
}
[ObsoleteAttribute("Use NpgsqlDataSourceBuilder.UsePeriodicPasswordProvider or inject passwords directly into NpgsqlDataSource.Password")]
public class Npgsql.ProvidePasswordCallback : MulticastDelegate {
    public ProvidePasswordCallback(object object, IntPtr method);
    [NullableContextAttribute("1")]
public virtual string Invoke(string host, int port, string database, string username);
    public virtual IAsyncResult BeginInvoke(string host, int port, string database, string username, AsyncCallback callback, object object);
    public virtual string EndInvoke(IAsyncResult result);
}
internal enum Npgsql.ReaderState : Enum {
    public int value__;
    public static ReaderState BeforeResult;
    public static ReaderState InResult;
    public static ReaderState BetweenResults;
    public static ReaderState Consumed;
    public static ReaderState Closed;
    public static ReaderState Disposed;
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ExtensionAttribute]
public static class Npgsql.Replication.Internal.LogicalReplicationConnectionExtensions : object {
    [ExtensionAttribute]
public static Task`1<ReplicationSlotOptions> CreateLogicalReplicationSlot(LogicalReplicationConnection connection, string slotName, string outputPlugin, bool isTemporary, Nullable`1<LogicalSlotSnapshotInitMode> slotSnapshotInitMode, bool twoPhase, CancellationToken cancellationToken);
    [ExtensionAttribute]
public static IAsyncEnumerable`1<XLogDataMessage> StartLogicalReplication(LogicalReplicationConnection connection, LogicalReplicationSlot slot, CancellationToken cancellationToken, Nullable`1<NpgsqlLogSequenceNumber> walLocation, IEnumerable`1<KeyValuePair`2<string, string>> options, bool bypassingStream);
    [CompilerGeneratedAttribute]
internal static Task`1<ReplicationSlotOptions> <CreateLogicalReplicationSlot>g__CreateLogicalReplicationSlotCore|0_0(<>c__DisplayClass0_0& );
    [AsyncIteratorStateMachineAttribute("Npgsql.Replication.Internal.LogicalReplicationConnectionExtensions/<<StartLogicalReplication>g__StartLogicalReplicationInternal|1_0>d")]
[CompilerGeneratedAttribute]
internal static IAsyncEnumerable`1<XLogDataMessage> <StartLogicalReplication>g__StartLogicalReplicationInternal|1_0(LogicalReplicationConnection connection, LogicalReplicationSlot slot, CancellationToken cancellationToken, Nullable`1<NpgsqlLogSequenceNumber> walLocation, IEnumerable`1<KeyValuePair`2<string, string>> options, bool bypassingStream);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public abstract class Npgsql.Replication.Internal.LogicalReplicationSlot : ReplicationSlot {
    [NullableAttribute("2")]
[CompilerGeneratedAttribute]
private string <SnapshotName>k__BackingField;
    [CompilerGeneratedAttribute]
private string <OutputPlugin>k__BackingField;
    [CompilerGeneratedAttribute]
private NpgsqlLogSequenceNumber <ConsistentPoint>k__BackingField;
    [NullableAttribute("2")]
public string SnapshotName { get; }
    public string OutputPlugin { get; }
    public NpgsqlLogSequenceNumber ConsistentPoint { get; }
    protected LogicalReplicationSlot(string outputPlugin, ReplicationSlotOptions replicationSlotOptions);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public string get_SnapshotName();
    [CompilerGeneratedAttribute]
public string get_OutputPlugin();
    [CompilerGeneratedAttribute]
public NpgsqlLogSequenceNumber get_ConsistentPoint();
}
public class Npgsql.Replication.LogicalReplicationConnection : ReplicationConnection {
    private protected ReplicationMode ReplicationMode { get; }
    [NullableContextAttribute("2")]
public LogicalReplicationConnection(string connectionString);
    private protected virtual ReplicationMode get_ReplicationMode();
}
public enum Npgsql.Replication.LogicalSlotSnapshotInitMode : Enum {
    public int value__;
    public static LogicalSlotSnapshotInitMode Export;
    public static LogicalSlotSnapshotInitMode Use;
    public static LogicalSlotSnapshotInitMode NoExport;
}
public class Npgsql.Replication.PgOutput.Messages.BeginMessage : TransactionControlMessage {
    [CompilerGeneratedAttribute]
private NpgsqlLogSequenceNumber <TransactionFinalLsn>k__BackingField;
    [CompilerGeneratedAttribute]
private DateTime <TransactionCommitTimestamp>k__BackingField;
    public NpgsqlLogSequenceNumber TransactionFinalLsn { get; private set; }
    public DateTime TransactionCommitTimestamp { get; private set; }
    [CompilerGeneratedAttribute]
public NpgsqlLogSequenceNumber get_TransactionFinalLsn();
    [CompilerGeneratedAttribute]
private void set_TransactionFinalLsn(NpgsqlLogSequenceNumber value);
    [CompilerGeneratedAttribute]
public DateTime get_TransactionCommitTimestamp();
    [CompilerGeneratedAttribute]
private void set_TransactionCommitTimestamp(DateTime value);
    [NullableContextAttribute("1")]
internal BeginMessage Populate(NpgsqlLogSequenceNumber walStart, NpgsqlLogSequenceNumber walEnd, DateTime serverClock, NpgsqlLogSequenceNumber transactionFinalLsn, DateTime transactionCommitTimestamp, UInt32 transactionXid);
}
public class Npgsql.Replication.PgOutput.Messages.BeginPrepareMessage : PrepareMessageBase {
    [NullableContextAttribute("1")]
internal BeginPrepareMessage Populate(NpgsqlLogSequenceNumber walStart, NpgsqlLogSequenceNumber walEnd, DateTime serverClock, NpgsqlLogSequenceNumber prepareLsn, NpgsqlLogSequenceNumber prepareEndLsn, DateTime transactionPrepareTimestamp, UInt32 transactionXid, string transactionGid);
}
public class Npgsql.Replication.PgOutput.Messages.CommitMessage : PgOutputReplicationMessage {
    [CompilerGeneratedAttribute]
private CommitFlags <Flags>k__BackingField;
    [CompilerGeneratedAttribute]
private NpgsqlLogSequenceNumber <CommitLsn>k__BackingField;
    [CompilerGeneratedAttribute]
private NpgsqlLogSequenceNumber <TransactionEndLsn>k__BackingField;
    [CompilerGeneratedAttribute]
private DateTime <TransactionCommitTimestamp>k__BackingField;
    public CommitFlags Flags { get; private set; }
    public NpgsqlLogSequenceNumber CommitLsn { get; private set; }
    public NpgsqlLogSequenceNumber TransactionEndLsn { get; private set; }
    public DateTime TransactionCommitTimestamp { get; private set; }
    [CompilerGeneratedAttribute]
public CommitFlags get_Flags();
    [CompilerGeneratedAttribute]
private void set_Flags(CommitFlags value);
    [CompilerGeneratedAttribute]
public NpgsqlLogSequenceNumber get_CommitLsn();
    [CompilerGeneratedAttribute]
private void set_CommitLsn(NpgsqlLogSequenceNumber value);
    [CompilerGeneratedAttribute]
public NpgsqlLogSequenceNumber get_TransactionEndLsn();
    [CompilerGeneratedAttribute]
private void set_TransactionEndLsn(NpgsqlLogSequenceNumber value);
    [CompilerGeneratedAttribute]
public DateTime get_TransactionCommitTimestamp();
    [CompilerGeneratedAttribute]
private void set_TransactionCommitTimestamp(DateTime value);
    [NullableContextAttribute("1")]
internal CommitMessage Populate(NpgsqlLogSequenceNumber walStart, NpgsqlLogSequenceNumber walEnd, DateTime serverClock, CommitFlags flags, NpgsqlLogSequenceNumber commitLsn, NpgsqlLogSequenceNumber transactionEndLsn, DateTime transactionCommitTimestamp);
}
public class Npgsql.Replication.PgOutput.Messages.CommitPreparedMessage : PreparedTransactionControlMessage {
    [CompilerGeneratedAttribute]
private CommitPreparedFlags <Flags>k__BackingField;
    public CommitPreparedFlags Flags { get; private set; }
    public NpgsqlLogSequenceNumber CommitPreparedLsn { get; }
    public NpgsqlLogSequenceNumber CommitPreparedEndLsn { get; }
    public DateTime TransactionCommitTimestamp { get; }
    [CompilerGeneratedAttribute]
public CommitPreparedFlags get_Flags();
    [CompilerGeneratedAttribute]
private void set_Flags(CommitPreparedFlags value);
    public NpgsqlLogSequenceNumber get_CommitPreparedLsn();
    public NpgsqlLogSequenceNumber get_CommitPreparedEndLsn();
    public DateTime get_TransactionCommitTimestamp();
    [NullableContextAttribute("1")]
internal CommitPreparedMessage Populate(NpgsqlLogSequenceNumber walStart, NpgsqlLogSequenceNumber walEnd, DateTime serverClock, CommitPreparedFlags flags, NpgsqlLogSequenceNumber commitPreparedLsn, NpgsqlLogSequenceNumber commitPreparedEndLsn, DateTime transactionCommitTimestamp, UInt32 transactionXid, string transactionGid);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Npgsql.Replication.PgOutput.Messages.DefaultUpdateMessage : UpdateMessage {
    private ReplicationTuple _newRow;
    public ReplicationTuple NewRow { get; }
    internal DefaultUpdateMessage(NpgsqlConnector connector);
    public virtual ReplicationTuple get_NewRow();
    internal UpdateMessage Populate(NpgsqlLogSequenceNumber walStart, NpgsqlLogSequenceNumber walEnd, DateTime serverClock, Nullable`1<UInt32> transactionXid, RelationMessage relation, ushort numColumns);
    internal Task Consume(CancellationToken cancellationToken);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public abstract class Npgsql.Replication.PgOutput.Messages.DeleteMessage : TransactionalMessage {
    [CompilerGeneratedAttribute]
private RelationMessage <Relation>k__BackingField;
    public RelationMessage Relation { get; private set; }
    [ObsoleteAttribute("Use Relation.RelationId")]
public UInt32 RelationId { get; }
    [CompilerGeneratedAttribute]
public RelationMessage get_Relation();
    [CompilerGeneratedAttribute]
private void set_Relation(RelationMessage value);
    public UInt32 get_RelationId();
    private protected DeleteMessage Populate(NpgsqlLogSequenceNumber walStart, NpgsqlLogSequenceNumber walEnd, DateTime serverClock, Nullable`1<UInt32> transactionXid, RelationMessage relation);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Npgsql.Replication.PgOutput.Messages.FullDeleteMessage : DeleteMessage {
    private ReplicationTuple _tupleEnumerable;
    public ReplicationTuple OldRow { get; }
    internal FullDeleteMessage(NpgsqlConnector connector);
    public ReplicationTuple get_OldRow();
    internal FullDeleteMessage Populate(NpgsqlLogSequenceNumber walStart, NpgsqlLogSequenceNumber walEnd, DateTime serverClock, Nullable`1<UInt32> transactionXid, RelationMessage relation, ushort numColumns);
    internal Task Consume(CancellationToken cancellationToken);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Npgsql.Replication.PgOutput.Messages.FullUpdateMessage : UpdateMessage {
    private ReplicationTuple _oldRow;
    private SecondRowTupleEnumerable _newRow;
    public ReplicationTuple OldRow { get; }
    public ReplicationTuple NewRow { get; }
    internal FullUpdateMessage(NpgsqlConnector connector);
    public ReplicationTuple get_OldRow();
    public virtual ReplicationTuple get_NewRow();
    internal UpdateMessage Populate(NpgsqlLogSequenceNumber walStart, NpgsqlLogSequenceNumber walEnd, DateTime serverClock, Nullable`1<UInt32> transactionXid, RelationMessage relation, ushort numColumns);
    internal Task Consume(CancellationToken cancellationToken);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Npgsql.Replication.PgOutput.Messages.IndexUpdateMessage : UpdateMessage {
    private ReplicationTuple _key;
    private SecondRowTupleEnumerable _newRow;
    public ReplicationTuple Key { get; }
    public ReplicationTuple NewRow { get; }
    internal IndexUpdateMessage(NpgsqlConnector connector);
    public ReplicationTuple get_Key();
    public virtual ReplicationTuple get_NewRow();
    internal UpdateMessage Populate(NpgsqlLogSequenceNumber walStart, NpgsqlLogSequenceNumber walEnd, DateTime serverClock, Nullable`1<UInt32> transactionXid, RelationMessage relation, ushort numColumns);
    internal Task Consume(CancellationToken cancellationToken);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Npgsql.Replication.PgOutput.Messages.InsertMessage : TransactionalMessage {
    private ReplicationTuple _tupleEnumerable;
    [CompilerGeneratedAttribute]
private RelationMessage <Relation>k__BackingField;
    public RelationMessage Relation { get; private set; }
    [ObsoleteAttribute("Use Relation.RelationId")]
public UInt32 RelationId { get; }
    public ReplicationTuple NewRow { get; }
    internal InsertMessage(NpgsqlConnector connector);
    [CompilerGeneratedAttribute]
public RelationMessage get_Relation();
    [CompilerGeneratedAttribute]
private void set_Relation(RelationMessage value);
    public UInt32 get_RelationId();
    public ReplicationTuple get_NewRow();
    internal InsertMessage Populate(NpgsqlLogSequenceNumber walStart, NpgsqlLogSequenceNumber walEnd, DateTime serverClock, Nullable`1<UInt32> transactionXid, RelationMessage relation, ushort numColumns);
    internal Task Consume(CancellationToken cancellationToken);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Npgsql.Replication.PgOutput.Messages.KeyDeleteMessage : DeleteMessage {
    private ReplicationTuple _tupleEnumerable;
    public ReplicationTuple Key { get; }
    internal KeyDeleteMessage(NpgsqlConnector connector);
    public ReplicationTuple get_Key();
    internal KeyDeleteMessage Populate(NpgsqlLogSequenceNumber walStart, NpgsqlLogSequenceNumber walEnd, DateTime serverClock, Nullable`1<UInt32> transactionXid, RelationMessage relation, ushort numColumns);
    internal Task Consume(CancellationToken cancellationToken);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Npgsql.Replication.PgOutput.Messages.LogicalDecodingMessage : TransactionalMessage {
    [CompilerGeneratedAttribute]
private byte <Flags>k__BackingField;
    [CompilerGeneratedAttribute]
private NpgsqlLogSequenceNumber <MessageLsn>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Prefix>k__BackingField;
    [CompilerGeneratedAttribute]
private Stream <Data>k__BackingField;
    public byte Flags { get; private set; }
    public NpgsqlLogSequenceNumber MessageLsn { get; private set; }
    public string Prefix { get; private set; }
    public Stream Data { get; private set; }
    [CompilerGeneratedAttribute]
public byte get_Flags();
    [CompilerGeneratedAttribute]
private void set_Flags(byte value);
    [CompilerGeneratedAttribute]
public NpgsqlLogSequenceNumber get_MessageLsn();
    [CompilerGeneratedAttribute]
private void set_MessageLsn(NpgsqlLogSequenceNumber value);
    [CompilerGeneratedAttribute]
public string get_Prefix();
    [CompilerGeneratedAttribute]
private void set_Prefix(string value);
    [CompilerGeneratedAttribute]
public Stream get_Data();
    [CompilerGeneratedAttribute]
private void set_Data(Stream value);
    internal LogicalDecodingMessage Populate(NpgsqlLogSequenceNumber walStart, NpgsqlLogSequenceNumber walEnd, DateTime serverClock, Nullable`1<UInt32> transactionXid, byte flags, NpgsqlLogSequenceNumber messageLsn, string prefix, Stream data);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Npgsql.Replication.PgOutput.Messages.OriginMessage : PgOutputReplicationMessage {
    [CompilerGeneratedAttribute]
private NpgsqlLogSequenceNumber <OriginCommitLsn>k__BackingField;
    [CompilerGeneratedAttribute]
private string <OriginName>k__BackingField;
    public NpgsqlLogSequenceNumber OriginCommitLsn { get; private set; }
    public string OriginName { get; private set; }
    [CompilerGeneratedAttribute]
public NpgsqlLogSequenceNumber get_OriginCommitLsn();
    [CompilerGeneratedAttribute]
private void set_OriginCommitLsn(NpgsqlLogSequenceNumber value);
    [CompilerGeneratedAttribute]
public string get_OriginName();
    [CompilerGeneratedAttribute]
private void set_OriginName(string value);
    internal OriginMessage Populate(NpgsqlLogSequenceNumber walStart, NpgsqlLogSequenceNumber walEnd, DateTime serverClock, NpgsqlLogSequenceNumber originCommitLsn, string originName);
}
public abstract class Npgsql.Replication.PgOutput.Messages.PgOutputReplicationMessage : ReplicationMessage {
    [NullableContextAttribute("1")]
public virtual string ToString();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public abstract class Npgsql.Replication.PgOutput.Messages.PreparedTransactionControlMessage : TransactionControlMessage {
    private protected NpgsqlLogSequenceNumber FirstLsn;
    private protected NpgsqlLogSequenceNumber SecondLsn;
    private protected DateTime Timestamp;
    [CompilerGeneratedAttribute]
private string <TransactionGid>k__BackingField;
    public string TransactionGid { get; private set; }
    [CompilerGeneratedAttribute]
public string get_TransactionGid();
    [CompilerGeneratedAttribute]
private void set_TransactionGid(string value);
    private protected PreparedTransactionControlMessage Populate(NpgsqlLogSequenceNumber walStart, NpgsqlLogSequenceNumber walEnd, DateTime serverClock, NpgsqlLogSequenceNumber firstLsn, NpgsqlLogSequenceNumber secondLsn, DateTime timestamp, UInt32 transactionXid, string transactionGid);
}
public class Npgsql.Replication.PgOutput.Messages.PrepareMessage : PrepareMessageBase {
    [CompilerGeneratedAttribute]
private PrepareFlags <Flags>k__BackingField;
    public PrepareFlags Flags { get; private set; }
    [CompilerGeneratedAttribute]
public PrepareFlags get_Flags();
    [CompilerGeneratedAttribute]
private void set_Flags(PrepareFlags value);
    [NullableContextAttribute("1")]
internal PrepareMessage Populate(NpgsqlLogSequenceNumber walStart, NpgsqlLogSequenceNumber walEnd, DateTime serverClock, PrepareFlags flags, NpgsqlLogSequenceNumber prepareLsn, NpgsqlLogSequenceNumber prepareEndLsn, DateTime transactionPrepareTimestamp, UInt32 transactionXid, string transactionGid);
}
public abstract class Npgsql.Replication.PgOutput.Messages.PrepareMessageBase : PreparedTransactionControlMessage {
    public NpgsqlLogSequenceNumber PrepareLsn { get; }
    public NpgsqlLogSequenceNumber PrepareEndLsn { get; }
    public DateTime TransactionPrepareTimestamp { get; }
    public NpgsqlLogSequenceNumber get_PrepareLsn();
    public NpgsqlLogSequenceNumber get_PrepareEndLsn();
    public DateTime get_TransactionPrepareTimestamp();
    [NullableContextAttribute("1")]
internal PrepareMessageBase Populate(NpgsqlLogSequenceNumber walStart, NpgsqlLogSequenceNumber walEnd, DateTime serverClock, NpgsqlLogSequenceNumber prepareLsn, NpgsqlLogSequenceNumber prepareEndLsn, DateTime transactionPrepareTimestamp, UInt32 transactionXid, string transactionGid);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Npgsql.Replication.PgOutput.Messages.RelationMessage : TransactionalMessage {
    [CompilerGeneratedAttribute]
private UInt32 <RelationId>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Namespace>k__BackingField;
    [CompilerGeneratedAttribute]
private string <RelationName>k__BackingField;
    [CompilerGeneratedAttribute]
private ReplicaIdentitySetting <ReplicaIdentity>k__BackingField;
    [CompilerGeneratedAttribute]
private ReadOnlyArrayBuffer`1<Column> <InternalColumns>k__BackingField;
    [CompilerGeneratedAttribute]
private RowDescriptionMessage <RowDescription>k__BackingField;
    public UInt32 RelationId { get; private set; }
    public string Namespace { get; private set; }
    public string RelationName { get; private set; }
    public ReplicaIdentitySetting ReplicaIdentity { get; private set; }
    public IReadOnlyList`1<Column> Columns { get; }
    internal ReadOnlyArrayBuffer`1<Column> InternalColumns { get; }
    internal RowDescriptionMessage RowDescription { get; internal set; }
    [CompilerGeneratedAttribute]
public UInt32 get_RelationId();
    [CompilerGeneratedAttribute]
private void set_RelationId(UInt32 value);
    [CompilerGeneratedAttribute]
public string get_Namespace();
    [CompilerGeneratedAttribute]
private void set_Namespace(string value);
    [CompilerGeneratedAttribute]
public string get_RelationName();
    [CompilerGeneratedAttribute]
private void set_RelationName(string value);
    [CompilerGeneratedAttribute]
public ReplicaIdentitySetting get_ReplicaIdentity();
    [CompilerGeneratedAttribute]
private void set_ReplicaIdentity(ReplicaIdentitySetting value);
    public IReadOnlyList`1<Column> get_Columns();
    [CompilerGeneratedAttribute]
internal ReadOnlyArrayBuffer`1<Column> get_InternalColumns();
    [CompilerGeneratedAttribute]
internal RowDescriptionMessage get_RowDescription();
    [CompilerGeneratedAttribute]
internal void set_RowDescription(RowDescriptionMessage value);
    internal RelationMessage Populate(NpgsqlLogSequenceNumber walStart, NpgsqlLogSequenceNumber walEnd, DateTime serverClock, Nullable`1<UInt32> transactionXid, UInt32 relationId, string ns, string relationName, ReplicaIdentitySetting relationReplicaIdentitySetting);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[IsReadOnlyAttribute]
public class Npgsql.Replication.PgOutput.Messages.RelationMessageColumn : ValueType {
    [CompilerGeneratedAttribute]
private byte <Flags>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ColumnName>k__BackingField;
    [CompilerGeneratedAttribute]
private UInt32 <DataTypeId>k__BackingField;
    [CompilerGeneratedAttribute]
private int <TypeModifier>k__BackingField;
    public byte Flags { get; }
    public string ColumnName { get; }
    public UInt32 DataTypeId { get; }
    public int TypeModifier { get; }
    internal RelationMessageColumn(byte flags, string columnName, UInt32 dataTypeId, int typeModifier);
    [CompilerGeneratedAttribute]
public byte get_Flags();
    [CompilerGeneratedAttribute]
public string get_ColumnName();
    [CompilerGeneratedAttribute]
public UInt32 get_DataTypeId();
    [CompilerGeneratedAttribute]
public int get_TypeModifier();
}
public class Npgsql.Replication.PgOutput.Messages.RollbackPreparedMessage : PreparedTransactionControlMessage {
    [CompilerGeneratedAttribute]
private RollbackPreparedFlags <Flags>k__BackingField;
    [CompilerGeneratedAttribute]
private DateTime <TransactionRollbackTimestamp>k__BackingField;
    public RollbackPreparedFlags Flags { get; private set; }
    public NpgsqlLogSequenceNumber PreparedTransactionEndLsn { get; }
    public NpgsqlLogSequenceNumber RollbackPreparedEndLsn { get; }
    public DateTime TransactionPrepareTimestamp { get; }
    public DateTime TransactionRollbackTimestamp { get; private set; }
    [CompilerGeneratedAttribute]
public RollbackPreparedFlags get_Flags();
    [CompilerGeneratedAttribute]
private void set_Flags(RollbackPreparedFlags value);
    public NpgsqlLogSequenceNumber get_PreparedTransactionEndLsn();
    public NpgsqlLogSequenceNumber get_RollbackPreparedEndLsn();
    public DateTime get_TransactionPrepareTimestamp();
    [CompilerGeneratedAttribute]
public DateTime get_TransactionRollbackTimestamp();
    [CompilerGeneratedAttribute]
private void set_TransactionRollbackTimestamp(DateTime value);
    [NullableContextAttribute("1")]
internal RollbackPreparedMessage Populate(NpgsqlLogSequenceNumber walStart, NpgsqlLogSequenceNumber walEnd, DateTime serverClock, RollbackPreparedFlags flags, NpgsqlLogSequenceNumber preparedTransactionEndLsn, NpgsqlLogSequenceNumber rollbackPreparedEndLsn, DateTime transactionPrepareTimestamp, DateTime transactionRollbackTimestamp, UInt32 transactionXid, string transactionGid);
}
public class Npgsql.Replication.PgOutput.Messages.StreamAbortMessage : TransactionControlMessage {
    [CompilerGeneratedAttribute]
private UInt32 <SubtransactionXid>k__BackingField;
    public UInt32 SubtransactionXid { get; private set; }
    [CompilerGeneratedAttribute]
public UInt32 get_SubtransactionXid();
    [CompilerGeneratedAttribute]
private void set_SubtransactionXid(UInt32 value);
    [NullableContextAttribute("1")]
internal StreamAbortMessage Populate(NpgsqlLogSequenceNumber walStart, NpgsqlLogSequenceNumber walEnd, DateTime serverClock, UInt32 transactionXid, UInt32 subtransactionXid);
}
public class Npgsql.Replication.PgOutput.Messages.StreamCommitMessage : TransactionControlMessage {
    [CompilerGeneratedAttribute]
private byte <Flags>k__BackingField;
    [CompilerGeneratedAttribute]
private NpgsqlLogSequenceNumber <CommitLsn>k__BackingField;
    [CompilerGeneratedAttribute]
private NpgsqlLogSequenceNumber <TransactionEndLsn>k__BackingField;
    [CompilerGeneratedAttribute]
private DateTime <TransactionCommitTimestamp>k__BackingField;
    public byte Flags { get; private set; }
    public NpgsqlLogSequenceNumber CommitLsn { get; private set; }
    public NpgsqlLogSequenceNumber TransactionEndLsn { get; private set; }
    public DateTime TransactionCommitTimestamp { get; private set; }
    [CompilerGeneratedAttribute]
public byte get_Flags();
    [CompilerGeneratedAttribute]
private void set_Flags(byte value);
    [CompilerGeneratedAttribute]
public NpgsqlLogSequenceNumber get_CommitLsn();
    [CompilerGeneratedAttribute]
private void set_CommitLsn(NpgsqlLogSequenceNumber value);
    [CompilerGeneratedAttribute]
public NpgsqlLogSequenceNumber get_TransactionEndLsn();
    [CompilerGeneratedAttribute]
private void set_TransactionEndLsn(NpgsqlLogSequenceNumber value);
    [CompilerGeneratedAttribute]
public DateTime get_TransactionCommitTimestamp();
    [CompilerGeneratedAttribute]
private void set_TransactionCommitTimestamp(DateTime value);
    [NullableContextAttribute("1")]
internal StreamCommitMessage Populate(NpgsqlLogSequenceNumber walStart, NpgsqlLogSequenceNumber walEnd, DateTime serverClock, UInt32 transactionXid, byte flags, NpgsqlLogSequenceNumber commitLsn, NpgsqlLogSequenceNumber transactionEndLsn, DateTime transactionCommitTimestamp);
}
public class Npgsql.Replication.PgOutput.Messages.StreamPrepareMessage : PrepareMessageBase {
    [CompilerGeneratedAttribute]
private StreamPrepareFlags <Flags>k__BackingField;
    public StreamPrepareFlags Flags { get; private set; }
    [CompilerGeneratedAttribute]
public StreamPrepareFlags get_Flags();
    [CompilerGeneratedAttribute]
private void set_Flags(StreamPrepareFlags value);
    [NullableContextAttribute("1")]
internal StreamPrepareMessage Populate(NpgsqlLogSequenceNumber walStart, NpgsqlLogSequenceNumber walEnd, DateTime serverClock, StreamPrepareFlags flags, NpgsqlLogSequenceNumber prepareLsn, NpgsqlLogSequenceNumber prepareEndLsn, DateTime transactionPrepareTimestamp, UInt32 transactionXid, string transactionGid);
}
public class Npgsql.Replication.PgOutput.Messages.StreamStartMessage : TransactionControlMessage {
    [CompilerGeneratedAttribute]
private byte <StreamSegmentIndicator>k__BackingField;
    public byte StreamSegmentIndicator { get; private set; }
    [CompilerGeneratedAttribute]
public byte get_StreamSegmentIndicator();
    [CompilerGeneratedAttribute]
private void set_StreamSegmentIndicator(byte value);
    [NullableContextAttribute("1")]
internal StreamStartMessage Populate(NpgsqlLogSequenceNumber walStart, NpgsqlLogSequenceNumber walEnd, DateTime serverClock, UInt32 transactionXid, byte streamSegmentIndicator);
}
public class Npgsql.Replication.PgOutput.Messages.StreamStopMessage : PgOutputReplicationMessage {
    [NullableContextAttribute("1")]
internal StreamStopMessage Populate(NpgsqlLogSequenceNumber walStart, NpgsqlLogSequenceNumber walEnd, DateTime serverClock);
}
public abstract class Npgsql.Replication.PgOutput.Messages.TransactionalMessage : PgOutputReplicationMessage {
    [CompilerGeneratedAttribute]
private Nullable`1<UInt32> <TransactionXid>k__BackingField;
    public Nullable`1<UInt32> TransactionXid { get; private set; }
    [CompilerGeneratedAttribute]
public Nullable`1<UInt32> get_TransactionXid();
    [CompilerGeneratedAttribute]
private void set_TransactionXid(Nullable`1<UInt32> value);
    private protected void Populate(NpgsqlLogSequenceNumber walStart, NpgsqlLogSequenceNumber walEnd, DateTime serverClock, Nullable`1<UInt32> transactionXid);
}
public abstract class Npgsql.Replication.PgOutput.Messages.TransactionControlMessage : PgOutputReplicationMessage {
    [CompilerGeneratedAttribute]
private UInt32 <TransactionXid>k__BackingField;
    public UInt32 TransactionXid { get; private set; }
    [CompilerGeneratedAttribute]
public UInt32 get_TransactionXid();
    [CompilerGeneratedAttribute]
private void set_TransactionXid(UInt32 value);
    private protected void Populate(NpgsqlLogSequenceNumber walStart, NpgsqlLogSequenceNumber walEnd, DateTime serverClock, UInt32 transactionXid);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Npgsql.Replication.PgOutput.Messages.TruncateMessage : TransactionalMessage {
    [CompilerGeneratedAttribute]
private TruncateOptions <Options>k__BackingField;
    [CompilerGeneratedAttribute]
private IReadOnlyList`1<RelationMessage> <Relations>k__BackingField;
    public TruncateOptions Options { get; private set; }
    public IReadOnlyList`1<RelationMessage> Relations { get; private set; }
    [CompilerGeneratedAttribute]
public TruncateOptions get_Options();
    [CompilerGeneratedAttribute]
private void set_Options(TruncateOptions value);
    [CompilerGeneratedAttribute]
public IReadOnlyList`1<RelationMessage> get_Relations();
    [CompilerGeneratedAttribute]
private void set_Relations(IReadOnlyList`1<RelationMessage> value);
    internal TruncateMessage Populate(NpgsqlLogSequenceNumber walStart, NpgsqlLogSequenceNumber walEnd, DateTime serverClock, Nullable`1<UInt32> transactionXid, TruncateOptions options, ReadOnlyArrayBuffer`1<RelationMessage> relations);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Npgsql.Replication.PgOutput.Messages.TypeMessage : TransactionalMessage {
    [CompilerGeneratedAttribute]
private UInt32 <TypeId>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Namespace>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    public UInt32 TypeId { get; private set; }
    public string Namespace { get; private set; }
    public string Name { get; private set; }
    [CompilerGeneratedAttribute]
public UInt32 get_TypeId();
    [CompilerGeneratedAttribute]
private void set_TypeId(UInt32 value);
    [CompilerGeneratedAttribute]
public string get_Namespace();
    [CompilerGeneratedAttribute]
private void set_Namespace(string value);
    [CompilerGeneratedAttribute]
public string get_Name();
    [CompilerGeneratedAttribute]
private void set_Name(string value);
    internal TypeMessage Populate(NpgsqlLogSequenceNumber walStart, NpgsqlLogSequenceNumber walEnd, DateTime serverClock, Nullable`1<UInt32> transactionXid, UInt32 typeId, string ns, string name);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public abstract class Npgsql.Replication.PgOutput.Messages.UpdateMessage : TransactionalMessage {
    [CompilerGeneratedAttribute]
private RelationMessage <Relation>k__BackingField;
    public RelationMessage Relation { get; private set; }
    [ObsoleteAttribute("Use Relation.RelationId")]
public UInt32 RelationId { get; }
    public ReplicationTuple NewRow { get; }
    [CompilerGeneratedAttribute]
public RelationMessage get_Relation();
    [CompilerGeneratedAttribute]
private void set_Relation(RelationMessage value);
    public UInt32 get_RelationId();
    public abstract virtual ReplicationTuple get_NewRow();
    internal UpdateMessage Populate(NpgsqlLogSequenceNumber walStart, NpgsqlLogSequenceNumber walEnd, DateTime serverClock, Nullable`1<UInt32> transactionXid, RelationMessage relation);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Npgsql.Replication.PgOutput.PgOutputAsyncEnumerable : object {
    private LogicalReplicationConnection _connection;
    private PgOutputReplicationSlot _slot;
    private PgOutputReplicationOptions _options;
    private CancellationToken _baseCancellationToken;
    private Nullable`1<NpgsqlLogSequenceNumber> _walLocation;
    private BeginMessage _beginMessage;
    private LogicalDecodingMessage _logicalDecodingMessage;
    private CommitMessage _commitMessage;
    private OriginMessage _originMessage;
    private Dictionary`2<UInt32, RelationMessage> _relations;
    private TypeMessage _typeMessage;
    private InsertMessage _insertMessage;
    private DefaultUpdateMessage _defaultUpdateMessage;
    private FullUpdateMessage _fullUpdateMessage;
    private IndexUpdateMessage _indexUpdateMessage;
    private FullDeleteMessage _fullDeleteMessage;
    private KeyDeleteMessage _keyDeleteMessage;
    private TruncateMessage _truncateMessage;
    private ReadOnlyArrayBuffer`1<RelationMessage> _truncateMessageRelations;
    private StreamStartMessage _streamStartMessage;
    private StreamStopMessage _streamStopMessage;
    private StreamCommitMessage _streamCommitMessage;
    private StreamAbortMessage _streamAbortMessage;
    private BeginPrepareMessage _beginPrepareMessage;
    private PrepareMessage _prepareMessage;
    private CommitPreparedMessage _commitPreparedMessage;
    private RollbackPreparedMessage _rollbackPreparedMessage;
    private StreamPrepareMessage _streamPrepareMessage;
    internal PgOutputAsyncEnumerable(LogicalReplicationConnection connection, PgOutputReplicationSlot slot, PgOutputReplicationOptions options, CancellationToken cancellationToken, Nullable`1<NpgsqlLogSequenceNumber> walLocation);
    public sealed virtual IAsyncEnumerator`1<PgOutputReplicationMessage> GetAsyncEnumerator(CancellationToken cancellationToken);
    [AsyncIteratorStateMachineAttribute("Npgsql.Replication.PgOutput.PgOutputAsyncEnumerable/<StartReplicationInternal>d__30")]
private IAsyncEnumerator`1<PgOutputReplicationMessage> StartReplicationInternal(CancellationToken cancellationToken);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Npgsql.Replication.PgOutput.PgOutputReplicationOptions : object {
    [CompilerGeneratedAttribute]
private ulong <ProtocolVersion>k__BackingField;
    [CompilerGeneratedAttribute]
private List`1<string> <PublicationNames>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<bool> <Binary>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<bool> <Streaming>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<bool> <Messages>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<bool> <TwoPhase>k__BackingField;
    public ulong ProtocolVersion { get; }
    public List`1<string> PublicationNames { get; }
    public Nullable`1<bool> Binary { get; }
    public Nullable`1<bool> Streaming { get; }
    public Nullable`1<bool> Messages { get; }
    public Nullable`1<bool> TwoPhase { get; }
    public PgOutputReplicationOptions(string publicationName, ulong protocolVersion, Nullable`1<bool> binary, Nullable`1<bool> streaming, Nullable`1<bool> messages, Nullable`1<bool> twoPhase);
    public PgOutputReplicationOptions(IEnumerable`1<string> publicationNames, ulong protocolVersion, Nullable`1<bool> binary, Nullable`1<bool> streaming, Nullable`1<bool> messages, Nullable`1<bool> twoPhase);
    [CompilerGeneratedAttribute]
public ulong get_ProtocolVersion();
    [CompilerGeneratedAttribute]
public List`1<string> get_PublicationNames();
    [CompilerGeneratedAttribute]
public Nullable`1<bool> get_Binary();
    [CompilerGeneratedAttribute]
public Nullable`1<bool> get_Streaming();
    [CompilerGeneratedAttribute]
public Nullable`1<bool> get_Messages();
    [CompilerGeneratedAttribute]
public Nullable`1<bool> get_TwoPhase();
    [IteratorStateMachineAttribute("Npgsql.Replication.PgOutput.PgOutputReplicationOptions/<GetOptionPairs>d__20")]
internal IEnumerable`1<KeyValuePair`2<string, string>> GetOptionPairs();
    [NullableContextAttribute("2")]
public sealed virtual bool Equals(PgOutputReplicationOptions other);
    [NullableContextAttribute("2")]
public virtual bool Equals(object obj);
    public virtual int GetHashCode();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Npgsql.Replication.PgOutput.PgOutputReplicationSlot : LogicalReplicationSlot {
    public PgOutputReplicationSlot(string slotName);
    public PgOutputReplicationSlot(ReplicationSlotOptions options);
    protected PgOutputReplicationSlot(PgOutputReplicationSlot slot);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[DefaultMemberAttribute("Item")]
internal class Npgsql.Replication.PgOutput.ReadOnlyArrayBuffer`1 : object {
    public static ReadOnlyArrayBuffer`1<T> Empty;
    private T[] _items;
    private int _size;
    public int Count { get; internal set; }
    public T Item { get; internal set; }
    private ReadOnlyArrayBuffer`1(T[] items);
    private static ReadOnlyArrayBuffer`1();
    [IteratorStateMachineAttribute("Npgsql.Replication.PgOutput.ReadOnlyArrayBuffer`1/<GetEnumerator>d__5")]
public sealed virtual IEnumerator`1<T> GetEnumerator();
    private sealed virtual override IEnumerator System.Collections.IEnumerable.GetEnumerator();
    public sealed virtual int get_Count();
    internal void set_Count(int value);
    public sealed virtual T get_Item(int index);
    internal void set_Item(int index, T value);
    public ReadOnlyArrayBuffer`1<T> Clone();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Npgsql.Replication.PgOutput.ReplicationTuple : object {
    private protected NpgsqlReadBuffer ReadBuffer;
    private TupleEnumerator _tupleEnumerator;
    internal RowState State;
    [CompilerGeneratedAttribute]
private ushort <NumColumns>k__BackingField;
    private RowDescriptionMessage _rowDescription;
    public ushort NumColumns { get; private set; }
    internal ReplicationTuple(NpgsqlConnector connector);
    [CompilerGeneratedAttribute]
public ushort get_NumColumns();
    [CompilerGeneratedAttribute]
private void set_NumColumns(ushort value);
    internal void Reset(ushort numColumns, RowDescriptionMessage rowDescription);
    public virtual IAsyncEnumerator`1<ReplicationValue> GetAsyncEnumerator(CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Npgsql.Replication.PgOutput.ReplicationTuple/<Consume>d__11")]
internal Task Consume(CancellationToken cancellationToken);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Npgsql.Replication.PgOutput.ReplicationValue : object {
    private NpgsqlReadBuffer _readBuffer;
    [CompilerGeneratedAttribute]
private int <Length>k__BackingField;
    [CompilerGeneratedAttribute]
private TupleDataKind <Kind>k__BackingField;
    private bool _columnConsumed;
    private FieldDescription _fieldDescription;
    private ColumnStream _columnStream;
    public int Length { get; private set; }
    public TupleDataKind Kind { get; private set; }
    public bool IsDBNull { get; }
    public bool IsUnchangedToastedValue { get; }
    internal ReplicationValue(NpgsqlConnector connector);
    [CompilerGeneratedAttribute]
public int get_Length();
    [CompilerGeneratedAttribute]
private void set_Length(int value);
    [CompilerGeneratedAttribute]
public TupleDataKind get_Kind();
    [CompilerGeneratedAttribute]
private void set_Kind(TupleDataKind value);
    internal void Reset(TupleDataKind kind, int length, FieldDescription fieldDescription);
    public bool get_IsDBNull();
    public bool get_IsUnchangedToastedValue();
    public PostgresType GetPostgresType();
    public string GetDataTypeName();
    public Type GetFieldType();
    [NullableContextAttribute("2")]
public ValueTask`1<T> Get(CancellationToken cancellationToken);
    public ValueTask`1<object> Get(CancellationToken cancellationToken);
    public Stream GetStream();
    public TextReader GetTextReader();
    [AsyncStateMachineAttribute("Npgsql.Replication.PgOutput.ReplicationValue/<Consume>d__25")]
internal Task Consume(CancellationToken cancellationToken);
    private void CheckAndMarkConsumed();
    [NullableContextAttribute("0")]
[AsyncStateMachineAttribute("Npgsql.Replication.PgOutput.ReplicationValue/<<Get>g__GetCore|21_0>d`1")]
[CompilerGeneratedAttribute]
private ValueTask`1<T> <Get>g__GetCore|21_0(CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Npgsql.Replication.PgOutput.ReplicationValue/<<Get>g__GetCore|22_0>d")]
[CompilerGeneratedAttribute]
private ValueTask`1<object> <Get>g__GetCore|22_0(CancellationToken cancellationToken);
}
internal enum Npgsql.Replication.PgOutput.RowState : Enum {
    public int value__;
    public static RowState NotRead;
    public static RowState Reading;
    public static RowState Consumed;
}
public enum Npgsql.Replication.PgOutput.TupleDataKind : Enum {
    public byte value__;
    public static TupleDataKind Null;
    public static TupleDataKind UnchangedToastedValue;
    public static TupleDataKind TextValue;
    public static TupleDataKind BinaryValue;
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Npgsql.Replication.PgOutput.TupleEnumerator : object {
    private ReplicationTuple _tupleEnumerable;
    private NpgsqlReadBuffer _readBuffer;
    private ReplicationValue _value;
    private ushort _numColumns;
    private int _pos;
    private RowDescriptionMessage _rowDescription;
    private CancellationToken _cancellationToken;
    public ReplicationValue Current { get; }
    internal TupleEnumerator(ReplicationTuple tupleEnumerable, NpgsqlConnector connector);
    internal void Reset(ushort numColumns, RowDescriptionMessage rowDescription, CancellationToken cancellationToken);
    [NullableContextAttribute("0")]
public sealed virtual ValueTask`1<bool> MoveNextAsync();
    public sealed virtual ReplicationValue get_Current();
    [AsyncStateMachineAttribute("Npgsql.Replication.PgOutput.TupleEnumerator/<DisposeAsync>d__12")]
public sealed virtual ValueTask DisposeAsync();
    [NullableContextAttribute("0")]
[AsyncStateMachineAttribute("Npgsql.Replication.PgOutput.TupleEnumerator/<<MoveNextAsync>g__MoveNextCore|9_0>d")]
[CompilerGeneratedAttribute]
private ValueTask`1<bool> <MoveNextAsync>g__MoveNextCore|9_0();
}
internal enum Npgsql.Replication.PgOutput.TupleType : Enum {
    public byte value__;
    public static TupleType Key;
    public static TupleType NewTuple;
    public static TupleType OldTuple;
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ExtensionAttribute]
public static class Npgsql.Replication.PgOutputConnectionExtensions : object {
    [AsyncStateMachineAttribute("Npgsql.Replication.PgOutputConnectionExtensions/<CreatePgOutputReplicationSlot>d__0")]
[ExtensionAttribute]
public static Task`1<PgOutputReplicationSlot> CreatePgOutputReplicationSlot(LogicalReplicationConnection connection, string slotName, bool temporarySlot, Nullable`1<LogicalSlotSnapshotInitMode> slotSnapshotInitMode, bool twoPhase, CancellationToken cancellationToken);
    [ExtensionAttribute]
public static IAsyncEnumerable`1<PgOutputReplicationMessage> StartReplication(LogicalReplicationConnection connection, PgOutputReplicationSlot slot, PgOutputReplicationOptions options, CancellationToken cancellationToken, Nullable`1<NpgsqlLogSequenceNumber> walLocation);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Npgsql.Replication.PhysicalReplicationConnection : ReplicationConnection {
    private protected ReplicationMode ReplicationMode { get; }
    [NullableContextAttribute("2")]
public PhysicalReplicationConnection(string connectionString);
    private protected virtual ReplicationMode get_ReplicationMode();
    public Task`1<PhysicalReplicationSlot> CreateReplicationSlot(string slotName, bool isTemporary, bool reserveWal, CancellationToken cancellationToken);
    public Task`1<PhysicalReplicationSlot> ReadReplicationSlot(string slotName, CancellationToken cancellationToken);
    public IAsyncEnumerable`1<XLogDataMessage> StartReplication(PhysicalReplicationSlot slot, NpgsqlLogSequenceNumber walLocation, CancellationToken cancellationToken, ulong timeline);
    public IAsyncEnumerable`1<XLogDataMessage> StartReplication(NpgsqlLogSequenceNumber walLocation, CancellationToken cancellationToken, ulong timeline);
    public IAsyncEnumerable`1<XLogDataMessage> StartReplication(PhysicalReplicationSlot slot, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Npgsql.Replication.PhysicalReplicationConnection/<<CreateReplicationSlot>g__CreatePhysicalReplicationSlot|4_0>d")]
[CompilerGeneratedAttribute]
private Task`1<PhysicalReplicationSlot> <CreateReplicationSlot>g__CreatePhysicalReplicationSlot|4_0(string slotName, bool isTemporary, bool reserveWal, CancellationToken cancellationToken);
    [AsyncIteratorStateMachineAttribute("Npgsql.Replication.PhysicalReplicationConnection/<<StartReplication>g__StartPhysicalReplication|6_0>d")]
[CompilerGeneratedAttribute]
private IAsyncEnumerable`1<XLogDataMessage> <StartReplication>g__StartPhysicalReplication|6_0(PhysicalReplicationSlot slot, NpgsqlLogSequenceNumber walLocation, CancellationToken cancellationToken, ulong timeline);
}
public class Npgsql.Replication.PhysicalReplicationSlot : ReplicationSlot {
    [CompilerGeneratedAttribute]
private Nullable`1<NpgsqlLogSequenceNumber> <RestartLsn>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<ulong> <RestartTimeline>k__BackingField;
    public Nullable`1<NpgsqlLogSequenceNumber> RestartLsn { get; }
    public Nullable`1<ulong> RestartTimeline { get; }
    [NullableContextAttribute("1")]
public PhysicalReplicationSlot(string slotName, Nullable`1<NpgsqlLogSequenceNumber> restartLsn, Nullable`1<ulong> restartTimeline);
    [CompilerGeneratedAttribute]
public Nullable`1<NpgsqlLogSequenceNumber> get_RestartLsn();
    [CompilerGeneratedAttribute]
public Nullable`1<ulong> get_RestartTimeline();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public abstract class Npgsql.Replication.ReplicationConnection : object {
    private static Version FirstVersionWithTwoPhaseSupport;
    private static Version FirstVersionWithoutDropSlotDoubleCommandCompleteMessage;
    private static Version FirstVersionWithTemporarySlotsAndSlotSnapshotInitMode;
    private NpgsqlConnection _npgsqlConnection;
    private SemaphoreSlim _feedbackSemaphore;
    [NullableAttribute("2")]
private string _userFacingConnectionString;
    private Nullable`1<TimeSpan> _commandTimeout;
    private TimeSpan _walReceiverTimeout;
    [NullableAttribute("2")]
private Timer _sendFeedbackTimer;
    [NullableAttribute("2")]
private Timer _requestFeedbackTimer;
    private TimeSpan _requestFeedbackInterval;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private IAsyncEnumerator`1<XLogDataMessage> _currentEnumerator;
    [NullableAttribute("2")]
private CancellationTokenSource _replicationCancellationTokenSource;
    private bool _pgCancellationSupported;
    private bool _isDisposed;
    private long _lastReceivedLsn;
    private long _lastFlushedLsn;
    private long _lastAppliedLsn;
    private XLogDataMessage _cachedXLogDataMessage;
    [CompilerGeneratedAttribute]
private ILogger <ReplicationLogger>k__BackingField;
    [CompilerGeneratedAttribute]
private TimeSpan <WalReceiverStatusInterval>k__BackingField;
    internal ILogger ReplicationLogger { get; private set; }
    public string ConnectionString { get; public set; }
    public NpgsqlLogSequenceNumber LastReceivedLsn { get; private protected set; }
    public NpgsqlLogSequenceNumber LastFlushedLsn { get; public set; }
    public NpgsqlLogSequenceNumber LastAppliedLsn { get; public set; }
    public TimeSpan WalReceiverStatusInterval { get; public set; }
    public TimeSpan WalReceiverTimeout { get; public set; }
    private protected ReplicationMode ReplicationMode { get; }
    public Version PostgreSqlVersion { get; }
    public string ServerVersion { get; }
    internal NpgsqlConnector Connector { get; }
    public TimeSpan CommandTimeout { get; public set; }
    public Encoding Encoding { get; }
    public int ProcessID { get; }
    [NullableContextAttribute("2")]
private protected ReplicationConnection(string connectionString);
    private static ReplicationConnection();
    [CompilerGeneratedAttribute]
internal ILogger get_ReplicationLogger();
    [CompilerGeneratedAttribute]
private void set_ReplicationLogger(ILogger value);
    public string get_ConnectionString();
    public void set_ConnectionString(string value);
    public NpgsqlLogSequenceNumber get_LastReceivedLsn();
    private protected void set_LastReceivedLsn(NpgsqlLogSequenceNumber value);
    public NpgsqlLogSequenceNumber get_LastFlushedLsn();
    public void set_LastFlushedLsn(NpgsqlLogSequenceNumber value);
    public NpgsqlLogSequenceNumber get_LastAppliedLsn();
    public void set_LastAppliedLsn(NpgsqlLogSequenceNumber value);
    [CompilerGeneratedAttribute]
public TimeSpan get_WalReceiverStatusInterval();
    [CompilerGeneratedAttribute]
public void set_WalReceiverStatusInterval(TimeSpan value);
    public TimeSpan get_WalReceiverTimeout();
    public void set_WalReceiverTimeout(TimeSpan value);
    private protected abstract virtual ReplicationMode get_ReplicationMode();
    public Version get_PostgreSqlVersion();
    public string get_ServerVersion();
    internal NpgsqlConnector get_Connector();
    public TimeSpan get_CommandTimeout();
    public void set_CommandTimeout(TimeSpan value);
    public Encoding get_Encoding();
    public int get_ProcessID();
    [AsyncStateMachineAttribute("Npgsql.Replication.ReplicationConnection/<Open>d__59")]
public Task Open(CancellationToken cancellationToken);
    public sealed virtual ValueTask DisposeAsync();
    public Task`1<ReplicationSystemIdentification> IdentifySystem(CancellationToken cancellationToken);
    public Task`1<string> Show(string parameterName, CancellationToken cancellationToken);
    public Task`1<TimelineHistoryFile> TimelineHistory(UInt32 tli, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Npgsql.Replication.ReplicationConnection/<CreateReplicationSlot>d__64")]
internal Task`1<ReplicationSlotOptions> CreateReplicationSlot(string command, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Npgsql.Replication.ReplicationConnection/<ReadReplicationSlotInternal>d__65")]
internal Task`1<PhysicalReplicationSlot> ReadReplicationSlotInternal(string slotName, CancellationToken cancellationToken);
    internal IAsyncEnumerator`1<XLogDataMessage> StartReplicationInternalWrapper(string command, bool bypassingStream, CancellationToken cancellationToken);
    [AsyncIteratorStateMachineAttribute("Npgsql.Replication.ReplicationConnection/<StartReplicationInternal>d__67")]
internal IAsyncEnumerator`1<XLogDataMessage> StartReplicationInternal(string command, bool bypassingStream, CancellationToken cancellationToken);
    public void SetReplicationStatus(NpgsqlLogSequenceNumber lastAppliedAndFlushedLsn);
    public Task SendStatusUpdate(CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Npgsql.Replication.ReplicationConnection/<SendFeedback>d__70")]
private Task SendFeedback(bool waitOnSemaphore, bool requestReply, CancellationToken cancellationToken);
    [NullableContextAttribute("2")]
[AsyncStateMachineAttribute("Npgsql.Replication.ReplicationConnection/<TimerRequestFeedback>d__71")]
private void TimerRequestFeedback(object obj);
    [NullableContextAttribute("2")]
[AsyncStateMachineAttribute("Npgsql.Replication.ReplicationConnection/<TimerSendFeedback>d__72")]
private void TimerSendFeedback(object obj);
    public Task DropReplicationSlot(string slotName, bool wait, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Npgsql.Replication.ReplicationConnection/<ReadSingleRow>d__74")]
private Task`1<Object[]> ReadSingleRow(string command, CancellationToken cancellationToken);
    private void SetTimeouts(TimeSpan readTimeout, TimeSpan writeTimeout);
    internal void CheckDisposed();
    [AsyncStateMachineAttribute("Npgsql.Replication.ReplicationConnection/<<DisposeAsync>g__DisposeAsyncCore|60_0>d")]
[CompilerGeneratedAttribute]
private ValueTask <DisposeAsync>g__DisposeAsyncCore|60_0();
    [AsyncStateMachineAttribute("Npgsql.Replication.ReplicationConnection/<<IdentifySystem>g__IdentifySystemInternal|61_0>d")]
[CompilerGeneratedAttribute]
private Task`1<ReplicationSystemIdentification> <IdentifySystem>g__IdentifySystemInternal|61_0(CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Npgsql.Replication.ReplicationConnection/<<Show>g__ShowInternal|62_0>d")]
[CompilerGeneratedAttribute]
private Task`1<string> <Show>g__ShowInternal|62_0(string parameterName, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Npgsql.Replication.ReplicationConnection/<<TimelineHistory>g__TimelineHistoryInternal|63_0>d")]
[CompilerGeneratedAttribute]
private Task`1<TimelineHistoryFile> <TimelineHistory>g__TimelineHistoryInternal|63_0(UInt32 tli, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Npgsql.Replication.ReplicationConnection/<<SendStatusUpdate>g__SendStatusUpdateInternal|69_0>d")]
[CompilerGeneratedAttribute]
private Task <SendStatusUpdate>g__SendStatusUpdateInternal|69_0(CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Npgsql.Replication.ReplicationConnection/<<DropReplicationSlot>g__DropReplicationSlotInternal|73_0>d")]
[CompilerGeneratedAttribute]
private Task <DropReplicationSlot>g__DropReplicationSlotInternal|73_0(string slotName, bool wait, CancellationToken cancellationToken);
    [NullableContextAttribute("0")]
[CompilerGeneratedAttribute]
internal static Byte[] <ReadSingleRow>g__ParseBytea|74_0(ReadOnlySpan`1<byte> bytes);
    [NullableContextAttribute("0")]
[CompilerGeneratedAttribute]
internal static Byte[] <ReadSingleRow>g__ParseByteaHex|74_1(ReadOnlySpan`1<byte> inBytes);
    [NullableContextAttribute("0")]
[CompilerGeneratedAttribute]
internal static Byte[] <ReadSingleRow>g__ParseByteaEscape|74_2(ReadOnlySpan`1<byte> inBytes);
}
public abstract class Npgsql.Replication.ReplicationMessage : object {
    [CompilerGeneratedAttribute]
private NpgsqlLogSequenceNumber <WalStart>k__BackingField;
    [CompilerGeneratedAttribute]
private NpgsqlLogSequenceNumber <WalEnd>k__BackingField;
    [CompilerGeneratedAttribute]
private DateTime <ServerClock>k__BackingField;
    public NpgsqlLogSequenceNumber WalStart { get; private set; }
    public NpgsqlLogSequenceNumber WalEnd { get; private set; }
    public DateTime ServerClock { get; private set; }
    [CompilerGeneratedAttribute]
public NpgsqlLogSequenceNumber get_WalStart();
    [CompilerGeneratedAttribute]
private void set_WalStart(NpgsqlLogSequenceNumber value);
    [CompilerGeneratedAttribute]
public NpgsqlLogSequenceNumber get_WalEnd();
    [CompilerGeneratedAttribute]
private void set_WalEnd(NpgsqlLogSequenceNumber value);
    [CompilerGeneratedAttribute]
public DateTime get_ServerClock();
    [CompilerGeneratedAttribute]
private void set_ServerClock(DateTime value);
    private protected void Populate(NpgsqlLogSequenceNumber walStart, NpgsqlLogSequenceNumber walEnd, DateTime serverClock);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public abstract class Npgsql.Replication.ReplicationSlot : object {
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    public string Name { get; }
    internal ReplicationSlot(string name);
    [CompilerGeneratedAttribute]
public string get_Name();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[IsReadOnlyAttribute]
public class Npgsql.Replication.ReplicationSlotOptions : ValueType {
    [CompilerGeneratedAttribute]
private string <SlotName>k__BackingField;
    [CompilerGeneratedAttribute]
private NpgsqlLogSequenceNumber <ConsistentPoint>k__BackingField;
    [NullableAttribute("2")]
[CompilerGeneratedAttribute]
private string <SnapshotName>k__BackingField;
    public string SlotName { get; }
    public NpgsqlLogSequenceNumber ConsistentPoint { get; }
    [NullableAttribute("2")]
internal string SnapshotName { get; }
    public ReplicationSlotOptions(string slotName, string consistentPoint);
    public ReplicationSlotOptions(string slotName, NpgsqlLogSequenceNumber consistentPoint);
    internal ReplicationSlotOptions(string slotName, NpgsqlLogSequenceNumber consistentPoint, string snapshotName);
    [CompilerGeneratedAttribute]
public string get_SlotName();
    [CompilerGeneratedAttribute]
public NpgsqlLogSequenceNumber get_ConsistentPoint();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
internal string get_SnapshotName();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Npgsql.Replication.ReplicationSystemIdentification : object {
    [CompilerGeneratedAttribute]
private string <SystemId>k__BackingField;
    [CompilerGeneratedAttribute]
private UInt32 <Timeline>k__BackingField;
    [CompilerGeneratedAttribute]
private NpgsqlLogSequenceNumber <XLogPos>k__BackingField;
    [NullableAttribute("2")]
[CompilerGeneratedAttribute]
private string <DbName>k__BackingField;
    public string SystemId { get; }
    public UInt32 Timeline { get; }
    public NpgsqlLogSequenceNumber XLogPos { get; }
    [NullableAttribute("2")]
public string DbName { get; }
    internal ReplicationSystemIdentification(string systemId, UInt32 timeline, NpgsqlLogSequenceNumber xLogPos, string dbName);
    [CompilerGeneratedAttribute]
public string get_SystemId();
    [CompilerGeneratedAttribute]
public UInt32 get_Timeline();
    [CompilerGeneratedAttribute]
public NpgsqlLogSequenceNumber get_XLogPos();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public string get_DbName();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Npgsql.Replication.TestDecoding.TestDecodingAsyncEnumerable : object {
    private LogicalReplicationConnection _connection;
    private TestDecodingReplicationSlot _slot;
    private TestDecodingOptions _options;
    private CancellationToken _baseCancellationToken;
    private Nullable`1<NpgsqlLogSequenceNumber> _walLocation;
    private TestDecodingData _cachedMessage;
    internal TestDecodingAsyncEnumerable(LogicalReplicationConnection connection, TestDecodingReplicationSlot slot, TestDecodingOptions options, CancellationToken cancellationToken, Nullable`1<NpgsqlLogSequenceNumber> walLocation);
    public sealed virtual IAsyncEnumerator`1<TestDecodingData> GetAsyncEnumerator(CancellationToken cancellationToken);
    [AsyncIteratorStateMachineAttribute("Npgsql.Replication.TestDecoding.TestDecodingAsyncEnumerable/<StartReplicationInternal>d__8")]
private IAsyncEnumerator`1<TestDecodingData> StartReplicationInternal(CancellationToken cancellationToken);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Npgsql.Replication.TestDecoding.TestDecodingData : ReplicationMessage {
    [CompilerGeneratedAttribute]
private string <Data>k__BackingField;
    public string Data { get; private set; }
    [CompilerGeneratedAttribute]
public string get_Data();
    [CompilerGeneratedAttribute]
private void set_Data(string value);
    internal TestDecodingData Populate(NpgsqlLogSequenceNumber walStart, NpgsqlLogSequenceNumber walEnd, DateTime serverClock, string data);
    public virtual string ToString();
    public TestDecodingData Clone();
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
public class Npgsql.Replication.TestDecoding.TestDecodingOptions : object {
    [CompilerGeneratedAttribute]
private Nullable`1<bool> <IncludeXids>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<bool> <IncludeTimestamp>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<bool> <ForceBinary>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<bool> <SkipEmptyXacts>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<bool> <OnlyLocal>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<bool> <IncludeRewrites>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<bool> <StreamChanges>k__BackingField;
    public Nullable`1<bool> IncludeXids { get; }
    public Nullable`1<bool> IncludeTimestamp { get; }
    public Nullable`1<bool> ForceBinary { get; }
    public Nullable`1<bool> SkipEmptyXacts { get; }
    public Nullable`1<bool> OnlyLocal { get; }
    public Nullable`1<bool> IncludeRewrites { get; }
    public Nullable`1<bool> StreamChanges { get; }
    public TestDecodingOptions(Nullable`1<bool> includeXids, Nullable`1<bool> includeTimestamp, Nullable`1<bool> forceBinary, Nullable`1<bool> skipEmptyXacts, Nullable`1<bool> onlyLocal, Nullable`1<bool> includeRewrites, Nullable`1<bool> streamChanges);
    [CompilerGeneratedAttribute]
public Nullable`1<bool> get_IncludeXids();
    [CompilerGeneratedAttribute]
public Nullable`1<bool> get_IncludeTimestamp();
    [CompilerGeneratedAttribute]
public Nullable`1<bool> get_ForceBinary();
    [CompilerGeneratedAttribute]
public Nullable`1<bool> get_SkipEmptyXacts();
    [CompilerGeneratedAttribute]
public Nullable`1<bool> get_OnlyLocal();
    [CompilerGeneratedAttribute]
public Nullable`1<bool> get_IncludeRewrites();
    [CompilerGeneratedAttribute]
public Nullable`1<bool> get_StreamChanges();
    [IteratorStateMachineAttribute("Npgsql.Replication.TestDecoding.TestDecodingOptions/<GetOptionPairs>d__22")]
internal IEnumerable`1<KeyValuePair`2<string, string>> GetOptionPairs();
    public sealed virtual bool Equals(TestDecodingOptions other);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
}
public class Npgsql.Replication.TestDecoding.TestDecodingReplicationSlot : LogicalReplicationSlot {
    [NullableContextAttribute("1")]
public TestDecodingReplicationSlot(string slotName);
    public TestDecodingReplicationSlot(ReplicationSlotOptions options);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ExtensionAttribute]
public static class Npgsql.Replication.TestDecodingConnectionExtensions : object {
    [AsyncStateMachineAttribute("Npgsql.Replication.TestDecodingConnectionExtensions/<CreateTestDecodingReplicationSlot>d__0")]
[ExtensionAttribute]
public static Task`1<TestDecodingReplicationSlot> CreateTestDecodingReplicationSlot(LogicalReplicationConnection connection, string slotName, bool temporarySlot, Nullable`1<LogicalSlotSnapshotInitMode> slotSnapshotInitMode, bool twoPhase, CancellationToken cancellationToken);
    [ExtensionAttribute]
public static IAsyncEnumerable`1<TestDecodingData> StartReplication(LogicalReplicationConnection connection, TestDecodingReplicationSlot slot, CancellationToken cancellationToken, TestDecodingOptions options, Nullable`1<NpgsqlLogSequenceNumber> walLocation);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[IsReadOnlyAttribute]
public class Npgsql.Replication.TimelineHistoryFile : ValueType {
    [CompilerGeneratedAttribute]
private string <FileName>k__BackingField;
    [CompilerGeneratedAttribute]
private Byte[] <Content>k__BackingField;
    public string FileName { get; }
    public Byte[] Content { get; }
    internal TimelineHistoryFile(string fileName, Byte[] content);
    [CompilerGeneratedAttribute]
public string get_FileName();
    [CompilerGeneratedAttribute]
public Byte[] get_Content();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Npgsql.Replication.XLogDataMessage : ReplicationMessage {
    [CompilerGeneratedAttribute]
private Stream <Data>k__BackingField;
    public Stream Data { get; private set; }
    [CompilerGeneratedAttribute]
public Stream get_Data();
    [CompilerGeneratedAttribute]
private void set_Data(Stream value);
    internal XLogDataMessage Populate(NpgsqlLogSequenceNumber walStart, NpgsqlLogSequenceNumber walEnd, DateTime serverClock, Stream data);
}
internal enum Npgsql.ReplicationMode : Enum {
    public int value__;
    public static ReplicationMode Off;
    public static ReplicationMode Physical;
    public static ReplicationMode Logical;
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Npgsql.Schema.DbColumnSchemaGenerator : object {
    private RowDescriptionMessage _rowDescription;
    private NpgsqlConnection _connection;
    private bool _fetchAdditionalInfo;
    internal DbColumnSchemaGenerator(NpgsqlConnection connection, RowDescriptionMessage rowDescription, bool fetchAdditionalInfo);
    private static string GenerateColumnsQuery(Version pgVersion, string columnFieldFilter);
    private static string GenerateOldColumnsQuery(string columnFieldFilter);
    [AsyncStateMachineAttribute("Npgsql.Schema.DbColumnSchemaGenerator/<GetColumnSchema>d__6")]
internal Task`1<ReadOnlyCollection`1<NpgsqlDbColumn>> GetColumnSchema(bool async, CancellationToken cancellationToken);
    private NpgsqlDbColumn LoadColumnDefinition(NpgsqlDataReader reader, NpgsqlDatabaseInfo databaseInfo, bool oldQueryMode);
    private NpgsqlDbColumn SetUpNonColumnField(FieldDescription field);
    private void ColumnPostConfig(NpgsqlDbColumn column, int typeModifier);
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
[DefaultMemberAttribute("Item")]
public class Npgsql.Schema.NpgsqlDbColumn : DbColumn {
    [NullableAttribute("1")]
[CompilerGeneratedAttribute]
private PostgresType <PostgresType>k__BackingField;
    [CompilerGeneratedAttribute]
private UInt32 <TypeOID>k__BackingField;
    [CompilerGeneratedAttribute]
private UInt32 <TableOID>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<short> <ColumnAttributeNumber>k__BackingField;
    [CompilerGeneratedAttribute]
private string <DefaultValue>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<NpgsqlDbType> <NpgsqlDbType>k__BackingField;
    public Nullable`1<bool> AllowDBNull { get; protected internal set; }
    [NullableAttribute("1")]
public string BaseCatalogName { get; protected internal set; }
    public string BaseColumnName { get; protected internal set; }
    public string BaseSchemaName { get; protected internal set; }
    [NullableAttribute("1")]
public string BaseServerName { get; protected internal set; }
    public string BaseTableName { get; protected internal set; }
    [NullableAttribute("1")]
public string ColumnName { get; protected internal set; }
    public Nullable`1<int> ColumnOrdinal { get; protected internal set; }
    public Nullable`1<int> ColumnSize { get; protected internal set; }
    public Nullable`1<bool> IsAliased { get; protected internal set; }
    public Nullable`1<bool> IsAutoIncrement { get; protected internal set; }
    public Nullable`1<bool> IsIdentity { get; protected internal set; }
    public Nullable`1<bool> IsKey { get; protected internal set; }
    public Nullable`1<bool> IsLong { get; protected internal set; }
    public Nullable`1<bool> IsReadOnly { get; protected internal set; }
    public Nullable`1<bool> IsUnique { get; protected internal set; }
    public Nullable`1<int> NumericPrecision { get; protected internal set; }
    public Nullable`1<int> NumericScale { get; protected internal set; }
    public string UdtAssemblyQualifiedName { get; protected internal set; }
    public Type DataType { get; protected internal set; }
    [NullableAttribute("1")]
public string DataTypeName { get; protected internal set; }
    [NullableAttribute("1")]
public PostgresType PostgresType { get; internal set; }
    public UInt32 TypeOID { get; internal set; }
    public UInt32 TableOID { get; internal set; }
    public Nullable`1<short> ColumnAttributeNumber { get; internal set; }
    public string DefaultValue { get; internal set; }
    public Nullable`1<NpgsqlDbType> NpgsqlDbType { get; internal set; }
    public object Item { get; }
    [NullableContextAttribute("1")]
internal NpgsqlDbColumn Clone();
    public Nullable`1<bool> get_AllowDBNull();
    protected internal void set_AllowDBNull(Nullable`1<bool> value);
    [NullableContextAttribute("1")]
public string get_BaseCatalogName();
    [NullableContextAttribute("1")]
protected internal void set_BaseCatalogName(string value);
    public string get_BaseColumnName();
    protected internal void set_BaseColumnName(string value);
    public string get_BaseSchemaName();
    protected internal void set_BaseSchemaName(string value);
    [NullableContextAttribute("1")]
public string get_BaseServerName();
    [NullableContextAttribute("1")]
protected internal void set_BaseServerName(string value);
    public string get_BaseTableName();
    protected internal void set_BaseTableName(string value);
    [NullableContextAttribute("1")]
public string get_ColumnName();
    [NullableContextAttribute("1")]
protected internal void set_ColumnName(string value);
    public Nullable`1<int> get_ColumnOrdinal();
    protected internal void set_ColumnOrdinal(Nullable`1<int> value);
    public Nullable`1<int> get_ColumnSize();
    protected internal void set_ColumnSize(Nullable`1<int> value);
    public Nullable`1<bool> get_IsAliased();
    protected internal void set_IsAliased(Nullable`1<bool> value);
    public Nullable`1<bool> get_IsAutoIncrement();
    protected internal void set_IsAutoIncrement(Nullable`1<bool> value);
    public Nullable`1<bool> get_IsIdentity();
    protected internal void set_IsIdentity(Nullable`1<bool> value);
    public Nullable`1<bool> get_IsKey();
    protected internal void set_IsKey(Nullable`1<bool> value);
    public Nullable`1<bool> get_IsLong();
    protected internal void set_IsLong(Nullable`1<bool> value);
    public Nullable`1<bool> get_IsReadOnly();
    protected internal void set_IsReadOnly(Nullable`1<bool> value);
    public Nullable`1<bool> get_IsUnique();
    protected internal void set_IsUnique(Nullable`1<bool> value);
    public Nullable`1<int> get_NumericPrecision();
    protected internal void set_NumericPrecision(Nullable`1<int> value);
    public Nullable`1<int> get_NumericScale();
    protected internal void set_NumericScale(Nullable`1<int> value);
    public string get_UdtAssemblyQualifiedName();
    protected internal void set_UdtAssemblyQualifiedName(string value);
    public Type get_DataType();
    protected internal void set_DataType(Type value);
    [NullableContextAttribute("1")]
public string get_DataTypeName();
    [NullableContextAttribute("1")]
protected internal void set_DataTypeName(string value);
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
public PostgresType get_PostgresType();
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
internal void set_PostgresType(PostgresType value);
    [CompilerGeneratedAttribute]
public UInt32 get_TypeOID();
    [CompilerGeneratedAttribute]
internal void set_TypeOID(UInt32 value);
    [CompilerGeneratedAttribute]
public UInt32 get_TableOID();
    [CompilerGeneratedAttribute]
internal void set_TableOID(UInt32 value);
    [CompilerGeneratedAttribute]
public Nullable`1<short> get_ColumnAttributeNumber();
    [CompilerGeneratedAttribute]
internal void set_ColumnAttributeNumber(Nullable`1<short> value);
    [CompilerGeneratedAttribute]
public string get_DefaultValue();
    [CompilerGeneratedAttribute]
internal void set_DefaultValue(string value);
    [CompilerGeneratedAttribute]
public Nullable`1<NpgsqlDbType> get_NpgsqlDbType();
    [CompilerGeneratedAttribute]
internal void set_NpgsqlDbType(Nullable`1<NpgsqlDbType> value);
    [NullableContextAttribute("1")]
public virtual object get_Item(string propertyName);
}
public enum Npgsql.ServerCompatibilityMode : Enum {
    public int value__;
    public static ServerCompatibilityMode None;
    public static ServerCompatibilityMode Redshift;
    public static ServerCompatibilityMode NoTypeLoading;
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Npgsql.SingleThreadSynchronizationContext : SynchronizationContext {
    private BlockingCollection`1<CallbackAndState> _tasks;
    private object _lockObject;
    [NullableAttribute("2")]
private Thread modreq(System.Runtime.CompilerServices.IsVolatile) _thread;
    private bool _doingWork;
    private static int ThreadStayAliveMs;
    private string _threadName;
    internal SingleThreadSynchronizationContext(string threadName);
    internal Disposable Enter();
    public virtual void Post(SendOrPostCallback callback, object state);
    public sealed virtual void Dispose();
    private void WorkLoop();
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
internal class Npgsql.SqlQueryParser : object {
    [NullableAttribute("1")]
private Dictionary`2<string, int> _paramIndexMap;
    [NullableAttribute("1")]
private StringBuilder _rewrittenSql;
    internal void ParseRawQuery(NpgsqlCommand command, bool standardConformingStrings, bool deriveParameters);
    internal void ParseRawQuery(NpgsqlBatchCommand batchCommand, bool standardConformingStrings, bool deriveParameters);
    private void ParseRawQuery(NpgsqlCommand command, NpgsqlBatchCommand batchCommand, bool standardConformingStrings, bool deriveParameters);
    private static bool IsLetter(char ch);
    private static bool IsIdentifierStart(char ch);
    private static bool IsDollarTagIdentifier(char ch);
    private static bool IsIdentifier(char ch);
    private static bool IsParamNameChar(char ch);
    [CompilerGeneratedAttribute]
internal static void <ParseRawQuery>g__MoveToNextBatchCommand|4_0(<>c__DisplayClass4_0& );
}
public enum Npgsql.SslMode : Enum {
    public int value__;
    public static SslMode Disable;
    public static SslMode Allow;
    public static SslMode Prefer;
    public static SslMode Require;
    public static SslMode VerifyCA;
    public static SslMode VerifyFull;
}
internal enum Npgsql.StatementOrPortal : Enum {
    public byte value__;
    public static StatementOrPortal Statement;
    public static StatementOrPortal Portal;
}
public enum Npgsql.StatementType : Enum {
    public int value__;
    public static StatementType Unknown;
    public static StatementType Select;
    public static StatementType Insert;
    public static StatementType Delete;
    public static StatementType Update;
    public static StatementType CreateTableAs;
    public static StatementType Move;
    public static StatementType Fetch;
    public static StatementType Copy;
    public static StatementType Other;
    public static StatementType Merge;
    public static StatementType Call;
}
public enum Npgsql.TargetSessionAttributes : Enum {
    public byte value__;
    public static TargetSessionAttributes Any;
    public static TargetSessionAttributes ReadWrite;
    public static TargetSessionAttributes ReadOnly;
    public static TargetSessionAttributes Primary;
    public static TargetSessionAttributes Standby;
    public static TargetSessionAttributes PreferPrimary;
    public static TargetSessionAttributes PreferStandby;
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal static class Npgsql.TaskTimeoutAndCancellation : object {
    [AsyncStateMachineAttribute("Npgsql.TaskTimeoutAndCancellation/<ExecuteAsync>d__0`1")]
internal static Task`1<TResult> ExecuteAsync(Func`2<CancellationToken, Task`1<TResult>> getTaskFunc, NpgsqlTimeout timeout, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Npgsql.TaskTimeoutAndCancellation/<ExecuteAsync>d__1")]
internal static Task ExecuteAsync(Func`2<CancellationToken, Task> getTaskFunc, NpgsqlTimeout timeout, CancellationToken cancellationToken);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal static class Npgsql.ThrowHelper : object {
    [DoesNotReturnAttribute]
internal static void ThrowInvalidCastException_NotSupportedType(NpgsqlTypeHandler handler, NpgsqlParameter parameter, Type type);
    [DoesNotReturnAttribute]
internal static void ThrowInvalidCastException_NoValue(FieldDescription field);
    [DoesNotReturnAttribute]
internal static void ThrowInvalidOperationException_NoPropertyGetter(Type type, MemberInfo property);
    [DoesNotReturnAttribute]
internal static void ThrowInvalidOperationException_NoPropertySetter(Type type, MemberInfo property);
    [DoesNotReturnAttribute]
internal static void ThrowInvalidOperationException_BinaryImportParametersMismatch(int columnCount, int valueCount);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Npgsql.TypeMapping.BuiltInTypeHandlerResolver : TypeHandlerResolver {
    private NpgsqlConnector _connector;
    private NpgsqlDatabaseInfo _databaseInfo;
    private static Type ReadOnlyIPAddressType;
    private static Dictionary`2<string, TypeMappingInfo> Mappings;
    private Int16Handler _int16Handler;
    private Int32Handler _int32Handler;
    private Int64Handler _int64Handler;
    [NullableAttribute("2")]
private SingleHandler _singleHandler;
    private DoubleHandler _doubleHandler;
    private NumericHandler _numericHandler;
    [NullableAttribute("2")]
private MoneyHandler _moneyHandler;
    private TextHandler _textHandler;
    [NullableAttribute("2")]
private TextHandler _xmlHandler;
    [NullableAttribute("2")]
private TextHandler _varcharHandler;
    [NullableAttribute("2")]
private TextHandler _charHandler;
    [NullableAttribute("2")]
private TextHandler _nameHandler;
    [NullableAttribute("2")]
private TextHandler _refcursorHandler;
    [NullableAttribute("2")]
private TextHandler _citextHandler;
    [NullableAttribute("2")]
private JsonHandler _jsonbHandler;
    [NullableAttribute("2")]
private JsonHandler _jsonHandler;
    [NullableAttribute("2")]
private JsonPathHandler _jsonPathHandler;
    private TimestampHandler _timestampHandler;
    private TimestampTzHandler _timestampTzHandler;
    private DateHandler _dateHandler;
    [NullableAttribute("2")]
private TimeHandler _timeHandler;
    [NullableAttribute("2")]
private TimeTzHandler _timeTzHandler;
    [NullableAttribute("2")]
private IntervalHandler _intervalHandler;
    [NullableAttribute("2")]
private CidrHandler _cidrHandler;
    [NullableAttribute("2")]
private InetHandler _inetHandler;
    [NullableAttribute("2")]
private MacaddrHandler _macaddrHandler;
    [NullableAttribute("2")]
private MacaddrHandler _macaddr8Handler;
    [NullableAttribute("2")]
private TsQueryHandler _tsQueryHandler;
    [NullableAttribute("2")]
private TsVectorHandler _tsVectorHandler;
    [NullableAttribute("2")]
private BoxHandler _boxHandler;
    [NullableAttribute("2")]
private CircleHandler _circleHandler;
    [NullableAttribute("2")]
private LineHandler _lineHandler;
    [NullableAttribute("2")]
private LineSegmentHandler _lineSegmentHandler;
    [NullableAttribute("2")]
private PathHandler _pathHandler;
    [NullableAttribute("2")]
private PointHandler _pointHandler;
    [NullableAttribute("2")]
private PolygonHandler _polygonHandler;
    [NullableAttribute("2")]
private LQueryHandler _lQueryHandler;
    [NullableAttribute("2")]
private LTreeHandler _lTreeHandler;
    [NullableAttribute("2")]
private LTxtQueryHandler _lTxtQueryHandler;
    [NullableAttribute("2")]
private UInt32Handler _oidHandler;
    [NullableAttribute("2")]
private UInt32Handler _xidHandler;
    [NullableAttribute("2")]
private UInt64Handler _xid8Handler;
    [NullableAttribute("2")]
private UInt32Handler _cidHandler;
    [NullableAttribute("2")]
private UInt32Handler _regtypeHandler;
    [NullableAttribute("2")]
private UInt32Handler _regconfigHandler;
    private BoolHandler _boolHandler;
    [NullableAttribute("2")]
private ByteaHandler _byteaHandler;
    [NullableAttribute("2")]
private UuidHandler _uuidHandler;
    [NullableAttribute("2")]
private BitStringHandler _bitVaryingHandler;
    [NullableAttribute("2")]
private BitStringHandler _bitHandler;
    [NullableAttribute("2")]
private RecordHandler _recordHandler;
    [NullableAttribute("2")]
private VoidHandler _voidHandler;
    [NullableAttribute("2")]
private HstoreHandler _hstoreHandler;
    [NullableAttribute("2")]
private Int2VectorHandler _int2VectorHandler;
    [NullableAttribute("2")]
private OIDVectorHandler _oidVectorHandler;
    [NullableAttribute("2")]
private PgLsnHandler _pgLsnHandler;
    [NullableAttribute("2")]
private TidHandler _tidHandler;
    [NullableAttribute("2")]
private InternalCharHandler _internalCharHandler;
    [NullableAttribute("2")]
private UnknownTypeHandler _unknownHandler;
    [NullableAttribute("2")]
private NpgsqlTypeHandler _timestampArrayHandler;
    [NullableAttribute("2")]
private NpgsqlTypeHandler _timestampTzArrayHandler;
    [NullableAttribute("2")]
private NpgsqlTypeHandler _timestampRangeHandler;
    [NullableAttribute("2")]
private NpgsqlTypeHandler _timestampTzRangeHandler;
    [NullableAttribute("2")]
private NpgsqlTypeHandler _timestampMultirangeHandler;
    [NullableAttribute("2")]
private NpgsqlTypeHandler _timestampTzMultirangeHandler;
    private static Dictionary`2<Type, string> ClrTypeToDataTypeNameTable;
    internal BuiltInTypeHandlerResolver(NpgsqlConnector connector);
    private static BuiltInTypeHandlerResolver();
    public virtual NpgsqlTypeHandler ResolveByDataTypeName(string typeName);
    public virtual NpgsqlTypeHandler ResolveByClrType(Type type);
    public virtual NpgsqlTypeHandler ResolveValueDependentValue(object value);
    [NullableContextAttribute("0")]
private static DateTimeKind GetRangeKind(NpgsqlRange`1<DateTime> range);
    private static DateTimeKind GetMultirangeKind(IList`1<NpgsqlRange`1<DateTime>> multirange);
    internal static string ValueDependentValueToDataTypeName(object value);
    [NullableContextAttribute("2")]
public virtual NpgsqlTypeHandler ResolveValueTypeGenerically(T value);
    internal static string ClrTypeToDataTypeName(Type type);
    public virtual TypeMappingInfo GetMappingByDataTypeName(string dataTypeName);
    internal static TypeMappingInfo DoGetMappingByDataTypeName(string dataTypeName);
    private PostgresType PgType(string pgTypeName);
    private NpgsqlTypeHandler SingleHandler();
    private NpgsqlTypeHandler MoneyHandler();
    private NpgsqlTypeHandler XmlHandler();
    private NpgsqlTypeHandler VarcharHandler();
    private NpgsqlTypeHandler CharHandler();
    private NpgsqlTypeHandler NameHandler();
    private NpgsqlTypeHandler RefcursorHandler();
    [NullableContextAttribute("2")]
private NpgsqlTypeHandler CitextHandler();
    private NpgsqlTypeHandler JsonbHandler();
    private NpgsqlTypeHandler JsonHandler();
    private NpgsqlTypeHandler JsonPathHandler();
    private NpgsqlTypeHandler TimeHandler();
    private NpgsqlTypeHandler TimeTzHandler();
    private NpgsqlTypeHandler IntervalHandler();
    private NpgsqlTypeHandler CidrHandler();
    private NpgsqlTypeHandler InetHandler();
    private NpgsqlTypeHandler MacaddrHandler();
    private NpgsqlTypeHandler Macaddr8Handler();
    private NpgsqlTypeHandler TsQueryHandler();
    private NpgsqlTypeHandler TsVectorHandler();
    private NpgsqlTypeHandler BoxHandler();
    private NpgsqlTypeHandler CircleHandler();
    private NpgsqlTypeHandler LineHandler();
    private NpgsqlTypeHandler LineSegmentHandler();
    private NpgsqlTypeHandler PathHandler();
    private NpgsqlTypeHandler PointHandler();
    private NpgsqlTypeHandler PolygonHandler();
    [NullableContextAttribute("2")]
private NpgsqlTypeHandler LQueryHandler();
    [NullableContextAttribute("2")]
private NpgsqlTypeHandler LTreeHandler();
    [NullableContextAttribute("2")]
private NpgsqlTypeHandler LTxtHandler();
    private NpgsqlTypeHandler OidHandler();
    private NpgsqlTypeHandler XidHandler();
    private NpgsqlTypeHandler Xid8Handler();
    private NpgsqlTypeHandler CidHandler();
    private NpgsqlTypeHandler RegtypeHandler();
    private NpgsqlTypeHandler RegconfigHandler();
    private NpgsqlTypeHandler ByteaHandler();
    private NpgsqlTypeHandler UuidHandler();
    private NpgsqlTypeHandler BitVaryingHandler();
    private NpgsqlTypeHandler BitHandler();
    [NullableContextAttribute("2")]
private NpgsqlTypeHandler HstoreHandler();
    private NpgsqlTypeHandler Int2VectorHandler();
    private NpgsqlTypeHandler OidVectorHandler();
    private NpgsqlTypeHandler PgLsnHandler();
    private NpgsqlTypeHandler TidHandler();
    private NpgsqlTypeHandler InternalCharHandler();
    private NpgsqlTypeHandler RecordHandler();
    private NpgsqlTypeHandler VoidHandler();
    private NpgsqlTypeHandler UnknownHandler();
    [CompilerGeneratedAttribute]
private NpgsqlTypeHandler <ResolveValueDependentValue>g__ArrayHandler|74_0(DateTimeKind kind);
    [CompilerGeneratedAttribute]
private NpgsqlTypeHandler <ResolveValueDependentValue>g__RangeHandler|74_1(DateTimeKind kind);
    [CompilerGeneratedAttribute]
private NpgsqlTypeHandler <ResolveValueDependentValue>g__MultirangeHandler|74_2(DateTimeKind kind);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Npgsql.TypeMapping.BuiltInTypeHandlerResolverFactory : TypeHandlerResolverFactory {
    public virtual TypeHandlerResolver Create(NpgsqlConnector connector);
    public virtual string GetDataTypeNameByClrType(Type clrType);
    public virtual string GetDataTypeNameByValueDependentValue(object value);
    public virtual TypeMappingInfo GetMappingByDataTypeName(string dataTypeName);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Npgsql.TypeMapping.GlobalTypeMapper : object {
    [CompilerGeneratedAttribute]
private static GlobalTypeMapper <Instance>k__BackingField;
    [CompilerGeneratedAttribute]
private INpgsqlNameTranslator <DefaultNameTranslator>k__BackingField;
    [CompilerGeneratedAttribute]
private List`1<TypeHandlerResolverFactory> <ResolverFactories>k__BackingField;
    [CompilerGeneratedAttribute]
private ConcurrentDictionary`2<string, IUserTypeMapping> <UserTypeMappings>k__BackingField;
    private ConcurrentDictionary`2<Type, TypeMappingInfo> _mappingsByClrType;
    [CompilerGeneratedAttribute]
private ReaderWriterLockSlim <Lock>k__BackingField;
    public static GlobalTypeMapper Instance { get; }
    public INpgsqlNameTranslator DefaultNameTranslator { get; public set; }
    internal List`1<TypeHandlerResolverFactory> ResolverFactories { get; }
    public ConcurrentDictionary`2<string, IUserTypeMapping> UserTypeMappings { get; }
    internal ReaderWriterLockSlim Lock { get; }
    private static GlobalTypeMapper();
    [CompilerGeneratedAttribute]
public static GlobalTypeMapper get_Instance();
    [CompilerGeneratedAttribute]
public sealed virtual INpgsqlNameTranslator get_DefaultNameTranslator();
    [CompilerGeneratedAttribute]
public sealed virtual void set_DefaultNameTranslator(INpgsqlNameTranslator value);
    [CompilerGeneratedAttribute]
internal List`1<TypeHandlerResolverFactory> get_ResolverFactories();
    [CompilerGeneratedAttribute]
public ConcurrentDictionary`2<string, IUserTypeMapping> get_UserTypeMappings();
    [CompilerGeneratedAttribute]
internal ReaderWriterLockSlim get_Lock();
    public sealed virtual INpgsqlTypeMapper MapEnum(string pgName, INpgsqlNameTranslator nameTranslator);
    [NullableContextAttribute("2")]
public sealed virtual bool UnmapEnum(string pgName, INpgsqlNameTranslator nameTranslator);
    [NullableContextAttribute("2")]
[RequiresUnreferencedCodeAttribute("Composite type mapping currently isn't trimming-safe.")]
public sealed virtual INpgsqlTypeMapper MapComposite(string pgName, INpgsqlNameTranslator nameTranslator);
    [RequiresUnreferencedCodeAttribute("Composite type mapping currently isn't trimming-safe.")]
public sealed virtual INpgsqlTypeMapper MapComposite(Type clrType, string pgName, INpgsqlNameTranslator nameTranslator);
    [NullableContextAttribute("2")]
[RequiresUnreferencedCodeAttribute("Composite type mapping currently isn't trimming-safe.")]
public sealed virtual bool UnmapComposite(string pgName, INpgsqlNameTranslator nameTranslator);
    [NullableContextAttribute("2")]
[RequiresUnreferencedCodeAttribute("Composite type mapping currently isn't trimming-safe.")]
public sealed virtual bool UnmapComposite(Type clrType, string pgName, INpgsqlNameTranslator nameTranslator);
    public sealed virtual void AddTypeResolverFactory(TypeHandlerResolverFactory resolverFactory);
    public sealed virtual void Reset();
    internal void RecordChange();
    private static string GetPgName(Type clrType, INpgsqlNameTranslator nameTranslator);
    [RequiresUnreferencedCodeAttribute("ToNpgsqlDbType uses interface-based reflection and isn't trimming-safe")]
internal bool TryResolveMappingByValue(object value, TypeMappingInfo& typeMapping);
    [NullableContextAttribute("2")]
public static string NpgsqlDbTypeToDataTypeName(NpgsqlDbType npgsqlDbType);
    public static NpgsqlDbType DataTypeNameToNpgsqlDbType(string typeName);
    internal static Nullable`1<NpgsqlDbType> DbTypeToNpgsqlDbType(DbType dbType);
    internal static DbType NpgsqlDbTypeToDbType(NpgsqlDbType npgsqlDbType);
    [CompilerGeneratedAttribute]
private bool <TryResolveMappingByValue>g__TryResolveMappingByClrType|29_0(Type clrType, TypeMappingInfo& typeMapping);
}
[NullableContextAttribute("1")]
public interface Npgsql.TypeMapping.INpgsqlTypeMapper {
    public INpgsqlNameTranslator DefaultNameTranslator { get; public set; }
    public abstract virtual INpgsqlNameTranslator get_DefaultNameTranslator();
    public abstract virtual void set_DefaultNameTranslator(INpgsqlNameTranslator value);
    public abstract virtual INpgsqlTypeMapper MapEnum(string pgName, INpgsqlNameTranslator nameTranslator);
    [NullableContextAttribute("2")]
public abstract virtual bool UnmapEnum(string pgName, INpgsqlNameTranslator nameTranslator);
    [NullableContextAttribute("2")]
[RequiresUnreferencedCodeAttribute("Composite type mapping currently isn't trimming-safe.")]
public abstract virtual INpgsqlTypeMapper MapComposite(string pgName, INpgsqlNameTranslator nameTranslator);
    [NullableContextAttribute("2")]
[RequiresUnreferencedCodeAttribute("Composite type mapping currently isn't trimming-safe.")]
public abstract virtual bool UnmapComposite(string pgName, INpgsqlNameTranslator nameTranslator);
    [RequiresUnreferencedCodeAttribute("Composite type mapping currently isn't trimming-safe.")]
public abstract virtual INpgsqlTypeMapper MapComposite(Type clrType, string pgName, INpgsqlNameTranslator nameTranslator);
    [NullableContextAttribute("2")]
[RequiresUnreferencedCodeAttribute("Composite type mapping currently isn't trimming-safe.")]
public abstract virtual bool UnmapComposite(Type clrType, string pgName, INpgsqlNameTranslator nameTranslator);
    public abstract virtual void AddTypeResolverFactory(TypeHandlerResolverFactory resolverFactory);
    public abstract virtual void Reset();
}
internal static class Npgsql.TypeMapping.PostgresTypeOIDs : object {
    public static UInt32 Int8;
    public static UInt32 Float8;
    public static UInt32 Int4;
    public static UInt32 Numeric;
    public static UInt32 Float4;
    public static UInt32 Int2;
    public static UInt32 Money;
    public static UInt32 Bool;
    public static UInt32 Box;
    public static UInt32 Circle;
    public static UInt32 Line;
    public static UInt32 LSeg;
    public static UInt32 Path;
    public static UInt32 Point;
    public static UInt32 Polygon;
    public static UInt32 BPChar;
    public static UInt32 Text;
    public static UInt32 Varchar;
    public static UInt32 Name;
    public static UInt32 Char;
    public static UInt32 Bytea;
    public static UInt32 Date;
    public static UInt32 Time;
    public static UInt32 Timestamp;
    public static UInt32 TimestampTz;
    public static UInt32 Interval;
    public static UInt32 TimeTz;
    public static UInt32 Abstime;
    public static UInt32 Inet;
    public static UInt32 Cidr;
    public static UInt32 Macaddr;
    public static UInt32 Macaddr8;
    public static UInt32 Bit;
    public static UInt32 Varbit;
    public static UInt32 TsVector;
    public static UInt32 TsQuery;
    public static UInt32 Regconfig;
    public static UInt32 Uuid;
    public static UInt32 Xml;
    public static UInt32 Json;
    public static UInt32 Jsonb;
    public static UInt32 JsonPath;
    public static UInt32 Refcursor;
    public static UInt32 Oidvector;
    public static UInt32 Int2vector;
    public static UInt32 Oid;
    public static UInt32 Xid;
    public static UInt32 Xid8;
    public static UInt32 Cid;
    public static UInt32 Regtype;
    public static UInt32 Tid;
    public static UInt32 PgLsn;
    public static UInt32 Record;
    public static UInt32 Void;
    public static UInt32 Unknown;
    public static UInt32 Int4Range;
    public static UInt32 Int8Range;
    public static UInt32 NumRange;
    public static UInt32 TsRange;
    public static UInt32 TsTzRange;
    public static UInt32 DateRange;
    public static UInt32 Int4Multirange;
    public static UInt32 Int8Multirange;
    public static UInt32 NumMultirange;
    public static UInt32 TsMultirange;
    public static UInt32 TsTzMultirange;
    public static UInt32 DateMultirange;
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Npgsql.TypeMapping.TypeMapper : object {
    [CompilerGeneratedAttribute]
private NpgsqlConnector <Connector>k__BackingField;
    private object _writeLock;
    [NullableAttribute("2")]
private NpgsqlDatabaseInfo _databaseInfo;
    private TypeHandlerResolver[] modreq(System.Runtime.CompilerServices.IsVolatile) _resolvers;
    [CompilerGeneratedAttribute]
private NpgsqlTypeHandler <UnrecognizedTypeHandler>k__BackingField;
    private ConcurrentDictionary`2<UInt32, NpgsqlTypeHandler> _handlersByOID;
    private ConcurrentDictionary`2<NpgsqlDbType, NpgsqlTypeHandler> _handlersByNpgsqlDbType;
    private ConcurrentDictionary`2<Type, NpgsqlTypeHandler> _handlersByClrType;
    private ConcurrentDictionary`2<string, NpgsqlTypeHandler> _handlersByDataTypeName;
    private Dictionary`2<UInt32, TypeMappingInfo> _userTypeMappings;
    private INpgsqlNameTranslator _defaultNameTranslator;
    private ILogger _commandLogger;
    internal NpgsqlConnector Connector { get; }
    internal NpgsqlDatabaseInfo DatabaseInfo { get; }
    internal NpgsqlTypeHandler UnrecognizedTypeHandler { get; }
    internal TypeMapper(NpgsqlConnector connector, INpgsqlNameTranslator defaultNameTranslator);
    [CompilerGeneratedAttribute]
internal NpgsqlConnector get_Connector();
    internal NpgsqlDatabaseInfo get_DatabaseInfo();
    [CompilerGeneratedAttribute]
internal NpgsqlTypeHandler get_UnrecognizedTypeHandler();
    internal void Initialize(NpgsqlDatabaseInfo databaseInfo, List`1<TypeHandlerResolverFactory> resolverFactories, Dictionary`2<string, IUserTypeMapping> userTypeMappings);
    internal NpgsqlTypeHandler ResolveByOID(UInt32 oid);
    [NullableContextAttribute("2")]
internal bool TryResolveByOID(UInt32 oid, NpgsqlTypeHandler& handler);
    internal NpgsqlTypeHandler ResolveByNpgsqlDbType(NpgsqlDbType npgsqlDbType);
    internal NpgsqlTypeHandler ResolveByDataTypeName(string typeName);
    private NpgsqlTypeHandler ResolveByDataTypeNameCore(string typeName);
    private NpgsqlTypeHandler ResolveComplexTypeByDataTypeName(string typeName, bool throwOnError);
    internal NpgsqlTypeHandler ResolveByValue(T value);
    internal NpgsqlTypeHandler ResolveByValue(object value);
    internal NpgsqlTypeHandler ResolveByClrType(Type type);
    internal bool TryGetMapping(PostgresType pgType, TypeMappingInfo& mapping);
    internal ValueTuple`2<Nullable`1<NpgsqlDbType>, PostgresType> GetTypeInfoByOid(UInt32 oid);
    private static string GetPgName(Type clrType, INpgsqlNameTranslator nameTranslator);
    [CompilerGeneratedAttribute]
internal static Type <ResolveByClrType>g__GetArrayListElementType|28_0(Type type);
    [CompilerGeneratedAttribute]
internal static Type <ResolveByClrType>g__GetUnderlyingType|28_2(Type t);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Npgsql.UnpooledDataSource : NpgsqlDataSource {
    private Int32 modreq(System.Runtime.CompilerServices.IsVolatile) _numConnectors;
    [TupleElementNamesAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[NullableAttribute("0")]
internal ValueTuple`3<int, int, int> Statistics { get; }
    internal bool OwnsConnectors { get; }
    public UnpooledDataSource(NpgsqlConnectionStringBuilder settings, NpgsqlDataSourceConfiguration dataSourceConfig);
    [NullableContextAttribute("0")]
internal virtual ValueTuple`3<int, int, int> get_Statistics();
    internal virtual bool get_OwnsConnectors();
    [AsyncStateMachineAttribute("Npgsql.UnpooledDataSource/<Get>d__6")]
internal virtual ValueTask`1<NpgsqlConnector> Get(NpgsqlConnection conn, NpgsqlTimeout timeout, bool async, CancellationToken cancellationToken);
    [NullableContextAttribute("2")]
internal virtual bool TryGetIdleConnector(NpgsqlConnector& connector);
    internal virtual ValueTask`1<NpgsqlConnector> OpenNewConnector(NpgsqlConnection conn, NpgsqlTimeout timeout, bool async, CancellationToken cancellationToken);
    internal virtual void Return(NpgsqlConnector connector);
    internal virtual void Clear();
}
[ExtensionAttribute]
internal static class Npgsql.Util.EnumerableExtensions : object {
    [NullableContextAttribute("1")]
[ExtensionAttribute]
internal static string Join(IEnumerable`1<string> values, string separator);
}
[ExtensionAttribute]
internal static class Npgsql.Util.ExceptionExtensions : object {
    [NullableContextAttribute("1")]
[ExtensionAttribute]
internal static Exception UnwrapAggregate(Exception exception);
}
internal enum Npgsql.Util.FormatCode : Enum {
    public short value__;
    public static FormatCode Text;
    public static FormatCode Binary;
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Npgsql.Util.ManualResetValueTaskSource`1 : object {
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private ManualResetValueTaskSourceCore`1<T> _core;
    public bool RunContinuationsAsynchronously { get; public set; }
    public short Version { get; }
    public bool get_RunContinuationsAsynchronously();
    public void set_RunContinuationsAsynchronously(bool value);
    public short get_Version();
    public void Reset();
    public void SetResult(T result);
    public void SetException(Exception error);
    public sealed virtual T GetResult(short token);
    private sealed virtual override void System.Threading.Tasks.Sources.IValueTaskSource.GetResult(short token);
    public sealed virtual ValueTaskSourceStatus GetStatus(short token);
    [NullableContextAttribute("2")]
public sealed virtual void OnCompleted(Action`1<object> continuation, object state, short token, ValueTaskSourceOnCompletedFlags flags);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal static class Npgsql.Util.MethodInfos : object {
    internal static ConstructorInfo InvalidCastExceptionCtor;
    internal static MethodInfo StringFormat;
    internal static MethodInfo ObjectGetType;
    private static MethodInfos();
}
[IsReadOnlyAttribute]
public class Npgsql.Util.NpgsqlTimeout : ValueType {
    private DateTime _expiration;
    internal static NpgsqlTimeout Infinite;
    internal bool IsSet { get; }
    internal bool HasExpired { get; }
    internal NpgsqlTimeout(TimeSpan expiration);
    private static NpgsqlTimeout();
    internal void Check();
    [NullableContextAttribute("1")]
internal void CheckAndApply(NpgsqlConnector connector);
    internal bool get_IsSet();
    internal bool get_HasExpired();
    internal TimeSpan CheckAndGetTimeLeft();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal static class Npgsql.Util.PGUtil : object {
    internal static UTF8Encoding UTF8Encoding;
    internal static UTF8Encoding RelaxedUTF8Encoding;
    internal static int BitsInInt;
    internal static Task`1<bool> TrueTask;
    internal static Task`1<bool> FalseTask;
    private static PGUtil();
    internal static void ValidateBackendMessageCode(BackendMessageCode code);
    internal static int RotateShift(int val, int shift);
}
internal class Npgsql.Util.ResettableCancellationTokenSource : object {
    private bool isDisposed;
    [CompilerGeneratedAttribute]
private TimeSpan <Timeout>k__BackingField;
    [NullableAttribute("1")]
private CancellationTokenSource _cts;
    private CancellationTokenRegistration _registration;
    [NullableAttribute("1")]
private object lockObject;
    public TimeSpan Timeout { get; public set; }
    public CancellationToken Token { get; }
    public bool IsCancellationRequested { get; }
    public ResettableCancellationTokenSource(TimeSpan timeout);
    [CompilerGeneratedAttribute]
public TimeSpan get_Timeout();
    [CompilerGeneratedAttribute]
public void set_Timeout(TimeSpan value);
    public CancellationToken Start(CancellationToken cancellationToken);
    public void RestartTimeoutWithoutReset();
    public CancellationToken Reset(CancellationToken cancellationToken);
    public void ResetCts();
    public void Stop();
    public void Cancel();
    public void CancelAfter(int delay);
    public CancellationToken get_Token();
    public bool get_IsCancellationRequested();
    public sealed virtual void Dispose();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal static class Npgsql.Util.Statics : object {
    internal static bool LegacyTimestampBehavior;
    internal static bool DisableDateTimeInfinityConversions;
    private static Statics();
    internal static T Expect(IBackendMessage msg, NpgsqlConnector connector);
    internal static T ExpectAny(IBackendMessage msg, NpgsqlConnector connector);
    [DoesNotReturnAttribute]
private static void ThrowIfMsgWrongType(IBackendMessage msg, NpgsqlConnector connector);
    internal static DeferDisposable Defer(Action action);
    internal static DeferDisposable`1<T> Defer(Action`1<T> action, T arg);
    internal static DeferDisposable`2<T1, T2> Defer(Action`2<T1, T2> action, T1 arg1, T2 arg2);
    internal static AsyncDeferDisposable DeferAsync(Func`1<Task> func);
}
[ExtensionAttribute]
internal static class Npgsql.Util.VersionExtensions : object {
    [NullableContextAttribute("1")]
[ExtensionAttribute]
public static bool IsGreaterOrEqual(Version version, int major, int minor);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Npgsql.VolatileResourceManager : object {
    private NpgsqlConnector _connector;
    private Transaction _transaction;
    private string _txId;
    private NpgsqlTransaction _localTx;
    [NullableAttribute("2")]
private string _preparedTxName;
    private bool _isDisposed;
    private ILogger _transactionLogger;
    private static int MaximumRollbackAttempts;
    private bool IsPrepared { get; }
    internal VolatileResourceManager(NpgsqlConnection connection, Transaction transaction);
    private bool get_IsPrepared();
    internal void Init();
    public sealed virtual void SinglePhaseCommit(SinglePhaseEnlistment singlePhaseEnlistment);
    public sealed virtual void Prepare(PreparingEnlistment preparingEnlistment);
    public sealed virtual void Commit(Enlistment enlistment);
    public sealed virtual void Rollback(Enlistment enlistment);
    public sealed virtual void InDoubt(Enlistment enlistment);
    private void RollbackLocal();
    private void RollbackTwoPhase();
    private void Dispose();
    private void CheckDisposed();
    private static IsolationLevel ConvertIsolationLevel(IsolationLevel isolationLevel);
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
internal class NpgsqlTypes.BuiltInPostgresType : Attribute {
    [NullableAttribute("1")]
[CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    [CompilerGeneratedAttribute]
private UInt32 <BaseOID>k__BackingField;
    [CompilerGeneratedAttribute]
private UInt32 <ArrayOID>k__BackingField;
    [CompilerGeneratedAttribute]
private string <RangeName>k__BackingField;
    [CompilerGeneratedAttribute]
private UInt32 <RangeOID>k__BackingField;
    [CompilerGeneratedAttribute]
private string <MultirangeName>k__BackingField;
    [CompilerGeneratedAttribute]
private UInt32 <MultirangeOID>k__BackingField;
    [NullableAttribute("1")]
internal string Name { get; }
    internal UInt32 BaseOID { get; }
    internal UInt32 ArrayOID { get; }
    internal string RangeName { get; }
    internal UInt32 RangeOID { get; }
    internal string MultirangeName { get; }
    internal UInt32 MultirangeOID { get; }
    [NullableContextAttribute("1")]
internal BuiltInPostgresType(string name, UInt32 baseOID, UInt32 arrayOID);
    [NullableContextAttribute("1")]
internal BuiltInPostgresType(string name, UInt32 baseOID, UInt32 arrayOID, string rangeName, UInt32 rangeOID, string multirangeName, UInt32 multirangeOID);
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
internal string get_Name();
    [CompilerGeneratedAttribute]
internal UInt32 get_BaseOID();
    [CompilerGeneratedAttribute]
internal UInt32 get_ArrayOID();
    [CompilerGeneratedAttribute]
internal string get_RangeName();
    [CompilerGeneratedAttribute]
internal UInt32 get_RangeOID();
    [CompilerGeneratedAttribute]
internal string get_MultirangeName();
    [CompilerGeneratedAttribute]
internal UInt32 get_MultirangeOID();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class NpgsqlTypes.NpgsqlBox : ValueType {
    private static Regex Regex;
    [CompilerGeneratedAttribute]
private NpgsqlPoint <UpperRight>k__BackingField;
    [CompilerGeneratedAttribute]
private NpgsqlPoint <LowerLeft>k__BackingField;
    public NpgsqlPoint UpperRight { get; public set; }
    public NpgsqlPoint LowerLeft { get; public set; }
    public double Left { get; }
    public double Right { get; }
    public double Bottom { get; }
    public double Top { get; }
    public double Width { get; }
    public double Height { get; }
    public bool IsEmpty { get; }
    public NpgsqlBox(NpgsqlPoint upperRight, NpgsqlPoint lowerLeft);
    public NpgsqlBox(double top, double right, double bottom, double left);
    private static NpgsqlBox();
    [IsReadOnlyAttribute]
[CompilerGeneratedAttribute]
public NpgsqlPoint get_UpperRight();
    [CompilerGeneratedAttribute]
public void set_UpperRight(NpgsqlPoint value);
    [IsReadOnlyAttribute]
[CompilerGeneratedAttribute]
public NpgsqlPoint get_LowerLeft();
    [CompilerGeneratedAttribute]
public void set_LowerLeft(NpgsqlPoint value);
    public double get_Left();
    public double get_Right();
    public double get_Bottom();
    public double get_Top();
    public double get_Width();
    public double get_Height();
    public bool get_IsEmpty();
    public sealed virtual bool Equals(NpgsqlBox other);
    [NullableContextAttribute("2")]
public virtual bool Equals(object obj);
    public static bool op_Equality(NpgsqlBox x, NpgsqlBox y);
    public static bool op_Inequality(NpgsqlBox x, NpgsqlBox y);
    public virtual string ToString();
    public static NpgsqlBox Parse(string s);
    public virtual int GetHashCode();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class NpgsqlTypes.NpgsqlCircle : ValueType {
    private static Regex Regex;
    [CompilerGeneratedAttribute]
private double <X>k__BackingField;
    [CompilerGeneratedAttribute]
private double <Y>k__BackingField;
    [CompilerGeneratedAttribute]
private double <Radius>k__BackingField;
    public double X { get; public set; }
    public double Y { get; public set; }
    public double Radius { get; public set; }
    public NpgsqlPoint Center { get; public set; }
    public NpgsqlCircle(NpgsqlPoint center, double radius);
    public NpgsqlCircle(double x, double y, double radius);
    private static NpgsqlCircle();
    [IsReadOnlyAttribute]
[CompilerGeneratedAttribute]
public double get_X();
    [CompilerGeneratedAttribute]
public void set_X(double value);
    [IsReadOnlyAttribute]
[CompilerGeneratedAttribute]
public double get_Y();
    [CompilerGeneratedAttribute]
public void set_Y(double value);
    [IsReadOnlyAttribute]
[CompilerGeneratedAttribute]
public double get_Radius();
    [CompilerGeneratedAttribute]
public void set_Radius(double value);
    public NpgsqlPoint get_Center();
    public void set_Center(NpgsqlPoint value);
    public sealed virtual bool Equals(NpgsqlCircle other);
    [NullableContextAttribute("2")]
public virtual bool Equals(object obj);
    public static NpgsqlCircle Parse(string s);
    public virtual string ToString();
    public static bool op_Equality(NpgsqlCircle x, NpgsqlCircle y);
    public static bool op_Inequality(NpgsqlCircle x, NpgsqlCircle y);
    public virtual int GetHashCode();
}
public enum NpgsqlTypes.NpgsqlDbType : Enum {
    public int value__;
    [BuiltInPostgresType("int8", "20", "1016", "int8range", "3926", "int8multirange", "4536")]
public static NpgsqlDbType Bigint;
    [BuiltInPostgresType("float8", "701", "1022")]
public static NpgsqlDbType Double;
    [BuiltInPostgresType("int4", "23", "1007", "int4range", "3904", "int4multirange", "4451")]
public static NpgsqlDbType Integer;
    [BuiltInPostgresType("numeric", "1700", "1231", "numrange", "3906", "nummultirange", "4532")]
public static NpgsqlDbType Numeric;
    [BuiltInPostgresType("float4", "700", "1021")]
public static NpgsqlDbType Real;
    [BuiltInPostgresType("int2", "21", "1005")]
public static NpgsqlDbType Smallint;
    [BuiltInPostgresType("money", "790", "791")]
public static NpgsqlDbType Money;
    [BuiltInPostgresType("bool", "16", "1000")]
public static NpgsqlDbType Boolean;
    [BuiltInPostgresType("box", "603", "1020")]
public static NpgsqlDbType Box;
    [BuiltInPostgresType("circle", "718", "719")]
public static NpgsqlDbType Circle;
    [BuiltInPostgresType("line", "628", "629")]
public static NpgsqlDbType Line;
    [BuiltInPostgresType("lseg", "601", "1018")]
public static NpgsqlDbType LSeg;
    [BuiltInPostgresType("path", "602", "1019")]
public static NpgsqlDbType Path;
    [BuiltInPostgresType("point", "600", "1017")]
public static NpgsqlDbType Point;
    [BuiltInPostgresType("polygon", "604", "1027")]
public static NpgsqlDbType Polygon;
    [BuiltInPostgresType("bpchar", "1042", "1014")]
public static NpgsqlDbType Char;
    [BuiltInPostgresType("text", "25", "1009")]
public static NpgsqlDbType Text;
    [BuiltInPostgresType("varchar", "1043", "1015")]
public static NpgsqlDbType Varchar;
    [BuiltInPostgresType("name", "19", "1003")]
public static NpgsqlDbType Name;
    public static NpgsqlDbType Citext;
    [BuiltInPostgresType("char", "18", "1002")]
public static NpgsqlDbType InternalChar;
    [BuiltInPostgresType("bytea", "17", "1001")]
public static NpgsqlDbType Bytea;
    [BuiltInPostgresType("date", "1082", "1182", "daterange", "3912", "datemultirange", "4535")]
public static NpgsqlDbType Date;
    [BuiltInPostgresType("time", "1083", "1183")]
public static NpgsqlDbType Time;
    [BuiltInPostgresType("timestamp", "1114", "1115", "tsrange", "3908", "tsmultirange", "4533")]
public static NpgsqlDbType Timestamp;
    [ObsoleteAttribute("Use TimestampTz instead")]
public static NpgsqlDbType TimestampTZ;
    [BuiltInPostgresType("timestamptz", "1184", "1185", "tstzrange", "3910", "tstzmultirange", "4534")]
public static NpgsqlDbType TimestampTz;
    [BuiltInPostgresType("interval", "1186", "1187")]
public static NpgsqlDbType Interval;
    [ObsoleteAttribute("Use TimeTz instead")]
public static NpgsqlDbType TimeTZ;
    [BuiltInPostgresType("timetz", "1266", "1270")]
public static NpgsqlDbType TimeTz;
    [ObsoleteAttribute("The PostgreSQL abstime time is obsolete.")]
public static NpgsqlDbType Abstime;
    [BuiltInPostgresType("inet", "869", "1041")]
public static NpgsqlDbType Inet;
    [BuiltInPostgresType("cidr", "650", "651")]
public static NpgsqlDbType Cidr;
    [BuiltInPostgresType("macaddr", "829", "1040")]
public static NpgsqlDbType MacAddr;
    [BuiltInPostgresType("macaddr8", "774", "775")]
public static NpgsqlDbType MacAddr8;
    [BuiltInPostgresType("bit", "1560", "1561")]
public static NpgsqlDbType Bit;
    [BuiltInPostgresType("varbit", "1562", "1563")]
public static NpgsqlDbType Varbit;
    [BuiltInPostgresType("tsvector", "3614", "3643")]
public static NpgsqlDbType TsVector;
    [BuiltInPostgresType("tsquery", "3615", "3645")]
public static NpgsqlDbType TsQuery;
    [BuiltInPostgresType("regconfig", "3734", "3735")]
public static NpgsqlDbType Regconfig;
    [BuiltInPostgresType("uuid", "2950", "2951")]
public static NpgsqlDbType Uuid;
    [BuiltInPostgresType("xml", "142", "143")]
public static NpgsqlDbType Xml;
    [BuiltInPostgresType("json", "114", "199")]
public static NpgsqlDbType Json;
    [BuiltInPostgresType("jsonb", "3802", "3807")]
public static NpgsqlDbType Jsonb;
    [BuiltInPostgresType("jsonpath", "4072", "4073")]
public static NpgsqlDbType JsonPath;
    public static NpgsqlDbType Hstore;
    [BuiltInPostgresType("refcursor", "1790", "2201")]
public static NpgsqlDbType Refcursor;
    [BuiltInPostgresType("oidvector", "30", "1013")]
public static NpgsqlDbType Oidvector;
    [BuiltInPostgresType("int2vector", "22", "1006")]
public static NpgsqlDbType Int2Vector;
    [BuiltInPostgresType("oid", "26", "1028")]
public static NpgsqlDbType Oid;
    [BuiltInPostgresType("xid", "28", "1011")]
public static NpgsqlDbType Xid;
    [BuiltInPostgresType("xid8", "5069", "271")]
public static NpgsqlDbType Xid8;
    [BuiltInPostgresType("cid", "29", "1012")]
public static NpgsqlDbType Cid;
    [BuiltInPostgresType("regtype", "2206", "2211")]
public static NpgsqlDbType Regtype;
    [BuiltInPostgresType("tid", "27", "1010")]
public static NpgsqlDbType Tid;
    [BuiltInPostgresType("pg_lsn", "3220", "3221")]
public static NpgsqlDbType PgLsn;
    [BuiltInPostgresType("unknown", "705", "0")]
public static NpgsqlDbType Unknown;
    public static NpgsqlDbType Geometry;
    public static NpgsqlDbType Geography;
    public static NpgsqlDbType LTree;
    public static NpgsqlDbType LQuery;
    public static NpgsqlDbType LTxtQuery;
    public static NpgsqlDbType IntegerRange;
    public static NpgsqlDbType BigIntRange;
    public static NpgsqlDbType NumericRange;
    public static NpgsqlDbType TimestampRange;
    public static NpgsqlDbType TimestampTzRange;
    public static NpgsqlDbType DateRange;
    public static NpgsqlDbType IntegerMultirange;
    public static NpgsqlDbType BigIntMultirange;
    public static NpgsqlDbType NumericMultirange;
    public static NpgsqlDbType TimestampMultirange;
    public static NpgsqlDbType TimestampTzMultirange;
    public static NpgsqlDbType DateMultirange;
    public static NpgsqlDbType Array;
    public static NpgsqlDbType Range;
    public static NpgsqlDbType Multirange;
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ObsoleteAttribute("Use ValueTuple<IPAddress, int> instead")]
public class NpgsqlTypes.NpgsqlInet : ValueType {
    [CompilerGeneratedAttribute]
private IPAddress <Address>k__BackingField;
    [CompilerGeneratedAttribute]
private int <Netmask>k__BackingField;
    public IPAddress Address { get; public set; }
    public int Netmask { get; public set; }
    public NpgsqlInet(IPAddress address, int netmask);
    public NpgsqlInet(IPAddress address);
    public NpgsqlInet(string addr);
    [IsReadOnlyAttribute]
[CompilerGeneratedAttribute]
public IPAddress get_Address();
    [CompilerGeneratedAttribute]
public void set_Address(IPAddress value);
    [IsReadOnlyAttribute]
[CompilerGeneratedAttribute]
public int get_Netmask();
    [CompilerGeneratedAttribute]
public void set_Netmask(int value);
    public virtual string ToString();
    public static IPAddress ToIPAddress(NpgsqlInet inet);
    public static IPAddress op_Explicit(NpgsqlInet inet);
    [NullableContextAttribute("2")]
public static NpgsqlInet ToNpgsqlInet(IPAddress ip);
    public static NpgsqlInet op_Implicit(IPAddress ip);
    public void Deconstruct(IPAddress& address, Int32& netmask);
    public sealed virtual bool Equals(NpgsqlInet other);
    [NullableContextAttribute("2")]
public virtual bool Equals(object obj);
    public virtual int GetHashCode();
    public static bool op_Equality(NpgsqlInet x, NpgsqlInet y);
    public static bool op_Inequality(NpgsqlInet x, NpgsqlInet y);
}
[IsReadOnlyAttribute]
public class NpgsqlTypes.NpgsqlInterval : ValueType {
    [CompilerGeneratedAttribute]
private int <Months>k__BackingField;
    [CompilerGeneratedAttribute]
private int <Days>k__BackingField;
    [CompilerGeneratedAttribute]
private long <Time>k__BackingField;
    public int Months { get; }
    public int Days { get; }
    public long Time { get; }
    public NpgsqlInterval(int months, int days, long time);
    [CompilerGeneratedAttribute]
public int get_Months();
    [CompilerGeneratedAttribute]
public int get_Days();
    [CompilerGeneratedAttribute]
public long get_Time();
    public sealed virtual bool Equals(NpgsqlInterval other);
    [NullableContextAttribute("2")]
public virtual bool Equals(object obj);
    public virtual int GetHashCode();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class NpgsqlTypes.NpgsqlLine : ValueType {
    private static Regex Regex;
    [CompilerGeneratedAttribute]
private double <A>k__BackingField;
    [CompilerGeneratedAttribute]
private double <B>k__BackingField;
    [CompilerGeneratedAttribute]
private double <C>k__BackingField;
    public double A { get; public set; }
    public double B { get; public set; }
    public double C { get; public set; }
    public NpgsqlLine(double a, double b, double c);
    private static NpgsqlLine();
    [IsReadOnlyAttribute]
[CompilerGeneratedAttribute]
public double get_A();
    [CompilerGeneratedAttribute]
public void set_A(double value);
    [IsReadOnlyAttribute]
[CompilerGeneratedAttribute]
public double get_B();
    [CompilerGeneratedAttribute]
public void set_B(double value);
    [IsReadOnlyAttribute]
[CompilerGeneratedAttribute]
public double get_C();
    [CompilerGeneratedAttribute]
public void set_C(double value);
    public static NpgsqlLine Parse(string s);
    public virtual string ToString();
    public virtual int GetHashCode();
    public sealed virtual bool Equals(NpgsqlLine other);
    [NullableContextAttribute("2")]
public virtual bool Equals(object obj);
    public static bool op_Equality(NpgsqlLine x, NpgsqlLine y);
    public static bool op_Inequality(NpgsqlLine x, NpgsqlLine y);
}
[IsReadOnlyAttribute]
public class NpgsqlTypes.NpgsqlLogSequenceNumber : ValueType {
    public static NpgsqlLogSequenceNumber Invalid;
    private ulong _value;
    public NpgsqlLogSequenceNumber(ulong value);
    private static NpgsqlLogSequenceNumber();
    public sealed virtual bool Equals(NpgsqlLogSequenceNumber other);
    public sealed virtual int CompareTo(NpgsqlLogSequenceNumber value);
    [NullableContextAttribute("2")]
public virtual bool Equals(object obj);
    public virtual int GetHashCode();
    [NullableContextAttribute("1")]
public virtual string ToString();
    [NullableContextAttribute("1")]
public static NpgsqlLogSequenceNumber Parse(string s);
    public static NpgsqlLogSequenceNumber Parse(ReadOnlySpan`1<char> s);
    [NullableContextAttribute("1")]
public static bool TryParse(string s, NpgsqlLogSequenceNumber& result);
    public static bool TryParse(ReadOnlySpan`1<char> s, NpgsqlLogSequenceNumber& result);
    public static NpgsqlLogSequenceNumber op_Explicit(ulong value);
    public static ulong op_Explicit(NpgsqlLogSequenceNumber value);
    public static bool op_Equality(NpgsqlLogSequenceNumber value1, NpgsqlLogSequenceNumber value2);
    public static bool op_Inequality(NpgsqlLogSequenceNumber value1, NpgsqlLogSequenceNumber value2);
    public static bool op_GreaterThan(NpgsqlLogSequenceNumber value1, NpgsqlLogSequenceNumber value2);
    public static bool op_LessThan(NpgsqlLogSequenceNumber value1, NpgsqlLogSequenceNumber value2);
    public static bool op_GreaterThanOrEqual(NpgsqlLogSequenceNumber value1, NpgsqlLogSequenceNumber value2);
    public static NpgsqlLogSequenceNumber Larger(NpgsqlLogSequenceNumber value1, NpgsqlLogSequenceNumber value2);
    public static NpgsqlLogSequenceNumber Smaller(NpgsqlLogSequenceNumber value1, NpgsqlLogSequenceNumber value2);
    public static bool op_LessThanOrEqual(NpgsqlLogSequenceNumber value1, NpgsqlLogSequenceNumber value2);
    public static ulong op_Subtraction(NpgsqlLogSequenceNumber first, NpgsqlLogSequenceNumber second);
    public static NpgsqlLogSequenceNumber op_Subtraction(NpgsqlLogSequenceNumber lsn, double nbytes);
    public static NpgsqlLogSequenceNumber op_Addition(NpgsqlLogSequenceNumber lsn, double nbytes);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class NpgsqlTypes.NpgsqlLSeg : ValueType {
    private static Regex Regex;
    [CompilerGeneratedAttribute]
private NpgsqlPoint <Start>k__BackingField;
    [CompilerGeneratedAttribute]
private NpgsqlPoint <End>k__BackingField;
    public NpgsqlPoint Start { get; public set; }
    public NpgsqlPoint End { get; public set; }
    public NpgsqlLSeg(NpgsqlPoint start, NpgsqlPoint end);
    public NpgsqlLSeg(double startx, double starty, double endx, double endy);
    private static NpgsqlLSeg();
    [IsReadOnlyAttribute]
[CompilerGeneratedAttribute]
public NpgsqlPoint get_Start();
    [CompilerGeneratedAttribute]
public void set_Start(NpgsqlPoint value);
    [IsReadOnlyAttribute]
[CompilerGeneratedAttribute]
public NpgsqlPoint get_End();
    [CompilerGeneratedAttribute]
public void set_End(NpgsqlPoint value);
    public static NpgsqlLSeg Parse(string s);
    public virtual string ToString();
    public virtual int GetHashCode();
    public sealed virtual bool Equals(NpgsqlLSeg other);
    [NullableContextAttribute("2")]
public virtual bool Equals(object obj);
    public static bool op_Equality(NpgsqlLSeg x, NpgsqlLSeg y);
    public static bool op_Inequality(NpgsqlLSeg x, NpgsqlLSeg y);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[DefaultMemberAttribute("Item")]
public class NpgsqlTypes.NpgsqlPath : ValueType {
    private List`1<NpgsqlPoint> _points;
    [CompilerGeneratedAttribute]
private bool <Open>k__BackingField;
    public bool Open { get; public set; }
    public NpgsqlPoint Item { get; public set; }
    public int Capacity { get; }
    public int Count { get; }
    public bool IsReadOnly { get; }
    public NpgsqlPath(IEnumerable`1<NpgsqlPoint> points, bool open);
    public NpgsqlPath(IEnumerable`1<NpgsqlPoint> points);
    public NpgsqlPath(NpgsqlPoint[] points);
    public NpgsqlPath(bool open);
    public NpgsqlPath(int capacity, bool open);
    public NpgsqlPath(int capacity);
    [IsReadOnlyAttribute]
[CompilerGeneratedAttribute]
public bool get_Open();
    [CompilerGeneratedAttribute]
public void set_Open(bool value);
    public sealed virtual NpgsqlPoint get_Item(int index);
    public sealed virtual void set_Item(int index, NpgsqlPoint value);
    public int get_Capacity();
    public sealed virtual int get_Count();
    public sealed virtual bool get_IsReadOnly();
    public sealed virtual int IndexOf(NpgsqlPoint item);
    public sealed virtual void Insert(int index, NpgsqlPoint item);
    public sealed virtual void RemoveAt(int index);
    public sealed virtual void Add(NpgsqlPoint item);
    public sealed virtual void Clear();
    public sealed virtual bool Contains(NpgsqlPoint item);
    public sealed virtual void CopyTo(NpgsqlPoint[] array, int arrayIndex);
    public sealed virtual bool Remove(NpgsqlPoint item);
    public sealed virtual IEnumerator`1<NpgsqlPoint> GetEnumerator();
    private sealed virtual override IEnumerator System.Collections.IEnumerable.GetEnumerator();
    public sealed virtual bool Equals(NpgsqlPath other);
    [NullableContextAttribute("2")]
public virtual bool Equals(object obj);
    public static bool op_Equality(NpgsqlPath x, NpgsqlPath y);
    public static bool op_Inequality(NpgsqlPath x, NpgsqlPath y);
    public virtual int GetHashCode();
    public virtual string ToString();
    public static NpgsqlPath Parse(string s);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class NpgsqlTypes.NpgsqlPoint : ValueType {
    private static Regex Regex;
    [CompilerGeneratedAttribute]
private double <X>k__BackingField;
    [CompilerGeneratedAttribute]
private double <Y>k__BackingField;
    public double X { get; public set; }
    public double Y { get; public set; }
    public NpgsqlPoint(double x, double y);
    private static NpgsqlPoint();
    [IsReadOnlyAttribute]
[CompilerGeneratedAttribute]
public double get_X();
    [CompilerGeneratedAttribute]
public void set_X(double value);
    [IsReadOnlyAttribute]
[CompilerGeneratedAttribute]
public double get_Y();
    [CompilerGeneratedAttribute]
public void set_Y(double value);
    public sealed virtual bool Equals(NpgsqlPoint other);
    [NullableContextAttribute("2")]
public virtual bool Equals(object obj);
    public static bool op_Equality(NpgsqlPoint x, NpgsqlPoint y);
    public static bool op_Inequality(NpgsqlPoint x, NpgsqlPoint y);
    public virtual int GetHashCode();
    public static NpgsqlPoint Parse(string s);
    public virtual string ToString();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[DefaultMemberAttribute("Item")]
public class NpgsqlTypes.NpgsqlPolygon : ValueType {
    private List`1<NpgsqlPoint> _points;
    public NpgsqlPoint Item { get; public set; }
    public int Capacity { get; }
    public int Count { get; }
    public bool IsReadOnly { get; }
    public NpgsqlPolygon(IEnumerable`1<NpgsqlPoint> points);
    public NpgsqlPolygon(NpgsqlPoint[] points);
    public NpgsqlPolygon(int capacity);
    public sealed virtual NpgsqlPoint get_Item(int index);
    public sealed virtual void set_Item(int index, NpgsqlPoint value);
    public int get_Capacity();
    public sealed virtual int get_Count();
    public sealed virtual bool get_IsReadOnly();
    public sealed virtual int IndexOf(NpgsqlPoint item);
    public sealed virtual void Insert(int index, NpgsqlPoint item);
    public sealed virtual void RemoveAt(int index);
    public sealed virtual void Add(NpgsqlPoint item);
    public sealed virtual void Clear();
    public sealed virtual bool Contains(NpgsqlPoint item);
    public sealed virtual void CopyTo(NpgsqlPoint[] array, int arrayIndex);
    public sealed virtual bool Remove(NpgsqlPoint item);
    public sealed virtual IEnumerator`1<NpgsqlPoint> GetEnumerator();
    private sealed virtual override IEnumerator System.Collections.IEnumerable.GetEnumerator();
    public sealed virtual bool Equals(NpgsqlPolygon other);
    [NullableContextAttribute("2")]
public virtual bool Equals(object obj);
    public static bool op_Equality(NpgsqlPolygon x, NpgsqlPolygon y);
    public static bool op_Inequality(NpgsqlPolygon x, NpgsqlPolygon y);
    public virtual int GetHashCode();
    public static NpgsqlPolygon Parse(string s);
    public virtual string ToString();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[IsReadOnlyAttribute]
public class NpgsqlTypes.NpgsqlRange`1 : ValueType {
    private static string EmptyLiteral;
    private static string LowerInfinityLiteral;
    private static string UpperInfinityLiteral;
    private static string NullLiteral;
    private static char LowerInclusiveBound;
    private static char LowerExclusiveBound;
    private static char UpperInclusiveBound;
    private static char UpperExclusiveBound;
    private static char BoundSeparator;
    private static TypeConverter BoundConverter;
    private static bool HasEquatableBounds;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public static NpgsqlRange`1<T> Empty;
    [CompilerGeneratedAttribute]
private T <LowerBound>k__BackingField;
    [CompilerGeneratedAttribute]
private T <UpperBound>k__BackingField;
    internal RangeFlags Flags;
    public T LowerBound { get; }
    public T UpperBound { get; }
    public bool LowerBoundIsInclusive { get; }
    public bool UpperBoundIsInclusive { get; }
    public bool LowerBoundInfinite { get; }
    public bool UpperBoundInfinite { get; }
    public bool IsEmpty { get; }
    public NpgsqlRange`1(T lowerBound, T upperBound);
    public NpgsqlRange`1(T lowerBound, bool lowerBoundIsInclusive, T upperBound, bool upperBoundIsInclusive);
    public NpgsqlRange`1(T lowerBound, bool lowerBoundIsInclusive, bool lowerBoundInfinite, T upperBound, bool upperBoundIsInclusive, bool upperBoundInfinite);
    internal NpgsqlRange`1(T lowerBound, T upperBound, RangeFlags flags);
    private static NpgsqlRange`1();
    [CompilerGeneratedAttribute]
public T get_LowerBound();
    [CompilerGeneratedAttribute]
public T get_UpperBound();
    public bool get_LowerBoundIsInclusive();
    public bool get_UpperBoundIsInclusive();
    public bool get_LowerBoundInfinite();
    public bool get_UpperBoundInfinite();
    public bool get_IsEmpty();
    private static bool IsEmptyRange(T lowerBound, T upperBound, RangeFlags flags);
    private static RangeFlags EvaluateBoundaryFlags(bool lowerBoundIsInclusive, bool upperBoundIsInclusive, bool lowerBoundInfinite, bool upperBoundInfinite);
    public static bool op_Equality(NpgsqlRange`1<T> x, NpgsqlRange`1<T> y);
    public static bool op_Inequality(NpgsqlRange`1<T> x, NpgsqlRange`1<T> y);
    [NullableContextAttribute("2")]
public virtual bool Equals(object o);
    public sealed virtual bool Equals(NpgsqlRange`1<T> other);
    public virtual int GetHashCode();
    public virtual string ToString();
    public static NpgsqlRange`1<T> Parse(string value);
}
[IsReadOnlyAttribute]
public class NpgsqlTypes.NpgsqlTid : ValueType {
    [CompilerGeneratedAttribute]
private UInt32 <BlockNumber>k__BackingField;
    [CompilerGeneratedAttribute]
private ushort <OffsetNumber>k__BackingField;
    public UInt32 BlockNumber { get; }
    public ushort OffsetNumber { get; }
    public NpgsqlTid(UInt32 blockNumber, ushort offsetNumber);
    [CompilerGeneratedAttribute]
public UInt32 get_BlockNumber();
    [CompilerGeneratedAttribute]
public ushort get_OffsetNumber();
    public sealed virtual bool Equals(NpgsqlTid other);
    [NullableContextAttribute("2")]
public virtual bool Equals(object o);
    public virtual int GetHashCode();
    public static bool op_Equality(NpgsqlTid left, NpgsqlTid right);
    public static bool op_Inequality(NpgsqlTid left, NpgsqlTid right);
    [NullableContextAttribute("1")]
public virtual string ToString();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public abstract class NpgsqlTypes.NpgsqlTsQuery : object {
    [CompilerGeneratedAttribute]
private NodeKind <Kind>k__BackingField;
    public NodeKind Kind { get; }
    protected NpgsqlTsQuery(NodeKind kind);
    [CompilerGeneratedAttribute]
public NodeKind get_Kind();
    public void Write(StringBuilder stringBuilder);
    internal abstract virtual void WriteCore(StringBuilder sb, bool first);
    public virtual string ToString();
    public static NpgsqlTsQuery Parse(string value);
    public virtual int GetHashCode();
    [NullableContextAttribute("2")]
public virtual bool Equals(object obj);
    [NullableContextAttribute("2")]
public abstract virtual bool Equals(NpgsqlTsQuery other);
    [NullableContextAttribute("2")]
public static bool op_Equality(NpgsqlTsQuery left, NpgsqlTsQuery right);
    [NullableContextAttribute("2")]
public static bool op_Inequality(NpgsqlTsQuery left, NpgsqlTsQuery right);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class NpgsqlTypes.NpgsqlTsQueryAnd : NpgsqlTsQueryBinOp {
    public NpgsqlTsQueryAnd(NpgsqlTsQuery left, NpgsqlTsQuery right);
    internal virtual void WriteCore(StringBuilder sb, bool first);
    [NullableContextAttribute("2")]
public virtual bool Equals(NpgsqlTsQuery other);
    public virtual int GetHashCode();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public abstract class NpgsqlTypes.NpgsqlTsQueryBinOp : NpgsqlTsQuery {
    [CompilerGeneratedAttribute]
private NpgsqlTsQuery <Left>k__BackingField;
    [CompilerGeneratedAttribute]
private NpgsqlTsQuery <Right>k__BackingField;
    public NpgsqlTsQuery Left { get; public set; }
    public NpgsqlTsQuery Right { get; public set; }
    protected NpgsqlTsQueryBinOp(NodeKind kind, NpgsqlTsQuery left, NpgsqlTsQuery right);
    [CompilerGeneratedAttribute]
public NpgsqlTsQuery get_Left();
    [CompilerGeneratedAttribute]
public void set_Left(NpgsqlTsQuery value);
    [CompilerGeneratedAttribute]
public NpgsqlTsQuery get_Right();
    [CompilerGeneratedAttribute]
public void set_Right(NpgsqlTsQuery value);
}
public class NpgsqlTypes.NpgsqlTsQueryEmpty : NpgsqlTsQuery {
    [NullableContextAttribute("1")]
internal virtual void WriteCore(StringBuilder sb, bool first);
    [NullableContextAttribute("2")]
public virtual bool Equals(NpgsqlTsQuery other);
    public virtual int GetHashCode();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class NpgsqlTypes.NpgsqlTsQueryFollowedBy : NpgsqlTsQueryBinOp {
    [CompilerGeneratedAttribute]
private int <Distance>k__BackingField;
    public int Distance { get; public set; }
    public NpgsqlTsQueryFollowedBy(NpgsqlTsQuery left, int distance, NpgsqlTsQuery right);
    [CompilerGeneratedAttribute]
public int get_Distance();
    [CompilerGeneratedAttribute]
public void set_Distance(int value);
    internal virtual void WriteCore(StringBuilder sb, bool first);
    [NullableContextAttribute("2")]
public virtual bool Equals(NpgsqlTsQuery other);
    public virtual int GetHashCode();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class NpgsqlTypes.NpgsqlTsQueryLexeme : NpgsqlTsQuery {
    private string _text;
    private Weight _weights;
    [CompilerGeneratedAttribute]
private bool <IsPrefixSearch>k__BackingField;
    public string Text { get; public set; }
    public Weight Weights { get; public set; }
    public bool IsPrefixSearch { get; public set; }
    public NpgsqlTsQueryLexeme(string text);
    public NpgsqlTsQueryLexeme(string text, Weight weights);
    public NpgsqlTsQueryLexeme(string text, Weight weights, bool isPrefixSearch);
    public string get_Text();
    public void set_Text(string value);
    public Weight get_Weights();
    public void set_Weights(Weight value);
    [CompilerGeneratedAttribute]
public bool get_IsPrefixSearch();
    [CompilerGeneratedAttribute]
public void set_IsPrefixSearch(bool value);
    internal virtual void WriteCore(StringBuilder sb, bool first);
    [NullableContextAttribute("2")]
public virtual bool Equals(NpgsqlTsQuery other);
    public virtual int GetHashCode();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class NpgsqlTypes.NpgsqlTsQueryNot : NpgsqlTsQuery {
    [CompilerGeneratedAttribute]
private NpgsqlTsQuery <Child>k__BackingField;
    public NpgsqlTsQuery Child { get; public set; }
    public NpgsqlTsQueryNot(NpgsqlTsQuery child);
    [CompilerGeneratedAttribute]
public NpgsqlTsQuery get_Child();
    [CompilerGeneratedAttribute]
public void set_Child(NpgsqlTsQuery value);
    internal virtual void WriteCore(StringBuilder sb, bool first);
    [NullableContextAttribute("2")]
public virtual bool Equals(NpgsqlTsQuery other);
    public virtual int GetHashCode();
}
[IsReadOnlyAttribute]
internal class NpgsqlTypes.NpgsqlTsQueryOperator : ValueType {
    public char Char;
    public int FollowedByDistance;
    public NpgsqlTsQueryOperator(char character, int followedByDistance);
    public static NpgsqlTsQueryOperator op_Implicit(char c);
    public static char op_Implicit(NpgsqlTsQueryOperator o);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class NpgsqlTypes.NpgsqlTsQueryOr : NpgsqlTsQueryBinOp {
    public NpgsqlTsQueryOr(NpgsqlTsQuery left, NpgsqlTsQuery right);
    internal virtual void WriteCore(StringBuilder sb, bool first);
    [NullableContextAttribute("2")]
public virtual bool Equals(NpgsqlTsQuery other);
    public virtual int GetHashCode();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[DefaultMemberAttribute("Item")]
public class NpgsqlTypes.NpgsqlTsVector : object {
    private List`1<Lexeme> _lexemes;
    public Lexeme Item { get; }
    public int Count { get; }
    internal NpgsqlTsVector(List`1<Lexeme> lexemes, bool noCheck);
    public static NpgsqlTsVector Parse(string value);
    public Lexeme get_Item(int index);
    public int get_Count();
    public sealed virtual IEnumerator`1<Lexeme> GetEnumerator();
    private sealed virtual override IEnumerator System.Collections.IEnumerable.GetEnumerator();
    public virtual string ToString();
    [NullableContextAttribute("2")]
public sealed virtual bool Equals(NpgsqlTsVector other);
    [NullableContextAttribute("2")]
public virtual bool Equals(object obj);
    public virtual int GetHashCode();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[AttributeUsageAttribute("2460")]
public class NpgsqlTypes.PgNameAttribute : Attribute {
    [CompilerGeneratedAttribute]
private string <PgName>k__BackingField;
    public string PgName { get; private set; }
    public PgNameAttribute(string pgName);
    [CompilerGeneratedAttribute]
public string get_PgName();
    [CompilerGeneratedAttribute]
private void set_PgName(string value);
}
[FlagsAttribute]
internal enum NpgsqlTypes.RangeFlags : Enum {
    public byte value__;
    public static RangeFlags None;
    public static RangeFlags Empty;
    public static RangeFlags LowerBoundInclusive;
    public static RangeFlags UpperBoundInclusive;
    public static RangeFlags LowerBoundInfinite;
    public static RangeFlags UpperBoundInfinite;
    public static RangeFlags Inclusive;
    public static RangeFlags Infinite;
    public static RangeFlags LowerInclusiveInfinite;
    public static RangeFlags UpperInclusiveInfinite;
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public abstract class System.Data.Common.DbDataSource : object {
    public string ConnectionString { get; }
    public abstract virtual string get_ConnectionString();
    protected abstract virtual DbConnection CreateDbConnection();
    protected virtual DbConnection OpenDbConnection();
    protected virtual ValueTask`1<DbConnection> OpenDbConnectionAsync(CancellationToken cancellationToken);
    protected virtual DbCommand CreateDbCommand(string commandText);
    protected virtual DbBatch CreateDbBatch();
    public DbConnection CreateConnection();
    public DbConnection OpenConnection();
    public ValueTask`1<DbConnection> OpenConnectionAsync(CancellationToken cancellationToken);
    public DbCommand CreateCommand(string commandText);
    public DbBatch CreateBatch();
    public sealed virtual void Dispose();
    [AsyncStateMachineAttribute("System.Data.Common.DbDataSource/<DisposeAsync>d__13")]
public sealed virtual ValueTask DisposeAsync();
    protected virtual void Dispose(bool disposing);
    protected virtual ValueTask DisposeAsyncCore();
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
[AttributeUsageAttribute("27524")]
internal class System.Runtime.CompilerServices.NullableAttribute : Attribute {
    public Byte[] NullableFlags;
    public NullableAttribute(byte );
    public NullableAttribute(Byte[] );
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
[AttributeUsageAttribute("5196")]
internal class System.Runtime.CompilerServices.NullableContextAttribute : Attribute {
    public byte Flag;
    public NullableContextAttribute(byte );
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
[AttributeUsageAttribute("2")]
internal class System.Runtime.CompilerServices.RefSafetyRulesAttribute : Attribute {
    public int Version;
    public RefSafetyRulesAttribute(int );
}
