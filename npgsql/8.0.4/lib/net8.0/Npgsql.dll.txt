[GeneratedCodeAttribute("Microsoft.Extensions.Logging.Generators", "8.0.9.3103")]
[EditorBrowsableAttribute("1")]
internal static class __LoggerMessageGenerator : object {
    [NullableContextAttribute("1")]
public static string Enumerate(IEnumerable enumerable);
}
public enum Npgsql.ArrayNullabilityMode : Enum {
    public int value__;
    public static ArrayNullabilityMode Never;
    public static ArrayNullabilityMode Always;
    public static ArrayNullabilityMode PerInstance;
}
internal enum Npgsql.BackendMessageCode : Enum {
    public byte value__;
    public static BackendMessageCode AuthenticationRequest;
    public static BackendMessageCode BackendKeyData;
    public static BackendMessageCode BindComplete;
    public static BackendMessageCode CloseComplete;
    public static BackendMessageCode CommandComplete;
    public static BackendMessageCode CopyData;
    public static BackendMessageCode CopyDone;
    public static BackendMessageCode CopyBothResponse;
    public static BackendMessageCode CopyInResponse;
    public static BackendMessageCode CopyOutResponse;
    public static BackendMessageCode DataRow;
    public static BackendMessageCode EmptyQueryResponse;
    public static BackendMessageCode ErrorResponse;
    public static BackendMessageCode FunctionCall;
    public static BackendMessageCode FunctionCallResponse;
    public static BackendMessageCode NoData;
    public static BackendMessageCode NoticeResponse;
    public static BackendMessageCode NotificationResponse;
    public static BackendMessageCode ParameterDescription;
    public static BackendMessageCode ParameterStatus;
    public static BackendMessageCode ParseComplete;
    public static BackendMessageCode PasswordPacket;
    public static BackendMessageCode PortalSuspended;
    public static BackendMessageCode ReadyForQuery;
    public static BackendMessageCode RowDescription;
}
internal class Npgsql.BackendMessages.AuthenticationCleartextPasswordMessage : AuthenticationRequestMessage {
    [NullableAttribute("1")]
internal static AuthenticationCleartextPasswordMessage Instance;
    internal AuthenticationRequestType AuthRequestType { get; }
    private static AuthenticationCleartextPasswordMessage();
    internal virtual AuthenticationRequestType get_AuthRequestType();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Npgsql.BackendMessages.AuthenticationGSSContinueMessage : AuthenticationRequestMessage {
    [CompilerGeneratedAttribute]
private Byte[] <AuthenticationData>k__BackingField;
    internal AuthenticationRequestType AuthRequestType { get; }
    internal Byte[] AuthenticationData { get; }
    private AuthenticationGSSContinueMessage(Byte[] authenticationData);
    internal virtual AuthenticationRequestType get_AuthRequestType();
    [CompilerGeneratedAttribute]
internal Byte[] get_AuthenticationData();
    internal static AuthenticationGSSContinueMessage Load(NpgsqlReadBuffer buf, int len);
}
internal class Npgsql.BackendMessages.AuthenticationGSSMessage : AuthenticationRequestMessage {
    [NullableAttribute("1")]
internal static AuthenticationGSSMessage Instance;
    internal AuthenticationRequestType AuthRequestType { get; }
    private static AuthenticationGSSMessage();
    internal virtual AuthenticationRequestType get_AuthRequestType();
}
internal class Npgsql.BackendMessages.AuthenticationKerberosV5Message : AuthenticationRequestMessage {
    [NullableAttribute("1")]
internal static AuthenticationKerberosV5Message Instance;
    internal AuthenticationRequestType AuthRequestType { get; }
    private static AuthenticationKerberosV5Message();
    internal virtual AuthenticationRequestType get_AuthRequestType();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Npgsql.BackendMessages.AuthenticationMD5PasswordMessage : AuthenticationRequestMessage {
    [CompilerGeneratedAttribute]
private Byte[] <Salt>k__BackingField;
    internal AuthenticationRequestType AuthRequestType { get; }
    internal Byte[] Salt { get; }
    private AuthenticationMD5PasswordMessage(Byte[] salt);
    internal virtual AuthenticationRequestType get_AuthRequestType();
    [CompilerGeneratedAttribute]
internal Byte[] get_Salt();
    internal static AuthenticationMD5PasswordMessage Load(NpgsqlReadBuffer buf);
}
internal class Npgsql.BackendMessages.AuthenticationOkMessage : AuthenticationRequestMessage {
    [NullableAttribute("1")]
internal static AuthenticationOkMessage Instance;
    internal AuthenticationRequestType AuthRequestType { get; }
    private static AuthenticationOkMessage();
    internal virtual AuthenticationRequestType get_AuthRequestType();
}
internal abstract class Npgsql.BackendMessages.AuthenticationRequestMessage : object {
    public BackendMessageCode Code { get; }
    internal AuthenticationRequestType AuthRequestType { get; }
    public sealed virtual BackendMessageCode get_Code();
    internal abstract virtual AuthenticationRequestType get_AuthRequestType();
}
internal enum Npgsql.BackendMessages.AuthenticationRequestType : Enum {
    public int value__;
    public static AuthenticationRequestType AuthenticationOk;
    public static AuthenticationRequestType AuthenticationKerberosV4;
    public static AuthenticationRequestType AuthenticationKerberosV5;
    public static AuthenticationRequestType AuthenticationCleartextPassword;
    public static AuthenticationRequestType AuthenticationCryptPassword;
    public static AuthenticationRequestType AuthenticationMD5Password;
    public static AuthenticationRequestType AuthenticationSCMCredential;
    public static AuthenticationRequestType AuthenticationGSS;
    public static AuthenticationRequestType AuthenticationGSSContinue;
    public static AuthenticationRequestType AuthenticationSSPI;
    public static AuthenticationRequestType AuthenticationSASL;
    public static AuthenticationRequestType AuthenticationSASLContinue;
    public static AuthenticationRequestType AuthenticationSASLFinal;
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Npgsql.BackendMessages.AuthenticationSASLContinueMessage : AuthenticationRequestMessage {
    [CompilerGeneratedAttribute]
private Byte[] <Payload>k__BackingField;
    internal AuthenticationRequestType AuthRequestType { get; }
    internal Byte[] Payload { get; }
    internal AuthenticationSASLContinueMessage(NpgsqlReadBuffer buf, int len);
    internal virtual AuthenticationRequestType get_AuthRequestType();
    [CompilerGeneratedAttribute]
internal Byte[] get_Payload();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Npgsql.BackendMessages.AuthenticationSASLFinalMessage : AuthenticationRequestMessage {
    [CompilerGeneratedAttribute]
private Byte[] <Payload>k__BackingField;
    internal AuthenticationRequestType AuthRequestType { get; }
    internal Byte[] Payload { get; }
    internal AuthenticationSASLFinalMessage(NpgsqlReadBuffer buf, int len);
    internal virtual AuthenticationRequestType get_AuthRequestType();
    [CompilerGeneratedAttribute]
internal Byte[] get_Payload();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Npgsql.BackendMessages.AuthenticationSASLMessage : AuthenticationRequestMessage {
    [CompilerGeneratedAttribute]
private List`1<string> <Mechanisms>k__BackingField;
    internal AuthenticationRequestType AuthRequestType { get; }
    internal List`1<string> Mechanisms { get; }
    internal AuthenticationSASLMessage(NpgsqlReadBuffer buf);
    internal virtual AuthenticationRequestType get_AuthRequestType();
    [CompilerGeneratedAttribute]
internal List`1<string> get_Mechanisms();
}
internal class Npgsql.BackendMessages.AuthenticationSCMCredentialMessage : AuthenticationRequestMessage {
    [NullableAttribute("1")]
internal static AuthenticationSCMCredentialMessage Instance;
    internal AuthenticationRequestType AuthRequestType { get; }
    private static AuthenticationSCMCredentialMessage();
    internal virtual AuthenticationRequestType get_AuthRequestType();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Npgsql.BackendMessages.AuthenticationSCRAMServerFinalMessage : object {
    [CompilerGeneratedAttribute]
private string <ServerSignature>k__BackingField;
    internal string ServerSignature { get; }
    internal AuthenticationSCRAMServerFinalMessage(string serverSignature);
    [CompilerGeneratedAttribute]
internal string get_ServerSignature();
    internal static AuthenticationSCRAMServerFinalMessage Load(Byte[] bytes, ILogger connectionLogger);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Npgsql.BackendMessages.AuthenticationSCRAMServerFirstMessage : object {
    [CompilerGeneratedAttribute]
private string <Nonce>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Salt>k__BackingField;
    [CompilerGeneratedAttribute]
private int <Iteration>k__BackingField;
    internal string Nonce { get; }
    internal string Salt { get; }
    internal int Iteration { get; }
    private AuthenticationSCRAMServerFirstMessage(string nonce, string salt, int iteration);
    [CompilerGeneratedAttribute]
internal string get_Nonce();
    [CompilerGeneratedAttribute]
internal string get_Salt();
    [CompilerGeneratedAttribute]
internal int get_Iteration();
    internal static AuthenticationSCRAMServerFirstMessage Load(Byte[] bytes, ILogger connectionLogger);
}
internal class Npgsql.BackendMessages.AuthenticationSSPIMessage : AuthenticationRequestMessage {
    [NullableAttribute("1")]
internal static AuthenticationSSPIMessage Instance;
    internal AuthenticationRequestType AuthRequestType { get; }
    private static AuthenticationSSPIMessage();
    internal virtual AuthenticationRequestType get_AuthRequestType();
}
internal class Npgsql.BackendMessages.BackendKeyDataMessage : object {
    [CompilerGeneratedAttribute]
private int <BackendProcessId>k__BackingField;
    [CompilerGeneratedAttribute]
private int <BackendSecretKey>k__BackingField;
    public BackendMessageCode Code { get; }
    internal int BackendProcessId { get; }
    internal int BackendSecretKey { get; }
    [NullableContextAttribute("1")]
internal BackendKeyDataMessage(NpgsqlReadBuffer buf);
    public sealed virtual BackendMessageCode get_Code();
    [CompilerGeneratedAttribute]
internal int get_BackendProcessId();
    [CompilerGeneratedAttribute]
internal int get_BackendSecretKey();
}
internal class Npgsql.BackendMessages.BindCompleteMessage : object {
    [NullableAttribute("1")]
internal static BindCompleteMessage Instance;
    public BackendMessageCode Code { get; }
    private static BindCompleteMessage();
    public sealed virtual BackendMessageCode get_Code();
}
internal class Npgsql.BackendMessages.CloseCompletedMessage : object {
    [NullableAttribute("1")]
internal static CloseCompletedMessage Instance;
    public BackendMessageCode Code { get; }
    private static CloseCompletedMessage();
    public sealed virtual BackendMessageCode get_Code();
}
[IsReadOnlyAttribute]
internal class Npgsql.BackendMessages.ColumnInfo : ValueType {
    [CompilerGeneratedAttribute]
private PgConverterInfo <ConverterInfo>k__BackingField;
    [CompilerGeneratedAttribute]
private DataFormat <DataFormat>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <AsObject>k__BackingField;
    public PgConverterInfo ConverterInfo { get; }
    public DataFormat DataFormat { get; }
    public bool AsObject { get; }
    public ColumnInfo(PgConverterInfo converterInfo, DataFormat dataFormat, bool asObject);
    [CompilerGeneratedAttribute]
public PgConverterInfo get_ConverterInfo();
    [CompilerGeneratedAttribute]
public DataFormat get_DataFormat();
    [CompilerGeneratedAttribute]
public bool get_AsObject();
}
internal class Npgsql.BackendMessages.CommandCompleteMessage : object {
    private UInt32 _oid;
    private ulong _rows;
    [CompilerGeneratedAttribute]
private StatementType <StatementType>k__BackingField;
    internal StatementType StatementType { get; private set; }
    internal UInt32 OID { get; }
    internal ulong Rows { get; }
    public BackendMessageCode Code { get; }
    [CompilerGeneratedAttribute]
internal StatementType get_StatementType();
    [CompilerGeneratedAttribute]
private void set_StatementType(StatementType value);
    internal UInt32 get_OID();
    internal ulong get_Rows();
    [NullableContextAttribute("1")]
internal CommandCompleteMessage Load(NpgsqlReadBuffer buf, int len);
    public sealed virtual BackendMessageCode get_Code();
}
internal class Npgsql.BackendMessages.CopyBothResponseMessage : CopyResponseMessageBase {
    public BackendMessageCode Code { get; }
    public virtual BackendMessageCode get_Code();
    [NullableContextAttribute("1")]
internal CopyBothResponseMessage Load(NpgsqlReadBuffer buf);
}
internal class Npgsql.BackendMessages.CopyDataMessage : object {
    [CompilerGeneratedAttribute]
private int <Length>k__BackingField;
    public BackendMessageCode Code { get; }
    public int Length { get; private set; }
    public sealed virtual BackendMessageCode get_Code();
    [CompilerGeneratedAttribute]
public int get_Length();
    [CompilerGeneratedAttribute]
private void set_Length(int value);
    [NullableContextAttribute("1")]
internal CopyDataMessage Load(int len);
}
internal class Npgsql.BackendMessages.CopyDoneMessage : object {
    [NullableAttribute("1")]
internal static CopyDoneMessage Instance;
    public BackendMessageCode Code { get; }
    private static CopyDoneMessage();
    public sealed virtual BackendMessageCode get_Code();
}
internal class Npgsql.BackendMessages.CopyInResponseMessage : CopyResponseMessageBase {
    public BackendMessageCode Code { get; }
    public virtual BackendMessageCode get_Code();
    [NullableContextAttribute("1")]
internal CopyInResponseMessage Load(NpgsqlReadBuffer buf);
}
internal class Npgsql.BackendMessages.CopyOutResponseMessage : CopyResponseMessageBase {
    public BackendMessageCode Code { get; }
    public virtual BackendMessageCode get_Code();
    [NullableContextAttribute("1")]
internal CopyOutResponseMessage Load(NpgsqlReadBuffer buf);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal abstract class Npgsql.BackendMessages.CopyResponseMessageBase : object {
    [CompilerGeneratedAttribute]
private bool <IsBinary>k__BackingField;
    [CompilerGeneratedAttribute]
private short <NumColumns>k__BackingField;
    [CompilerGeneratedAttribute]
private List`1<DataFormat> <ColumnFormatCodes>k__BackingField;
    public BackendMessageCode Code { get; }
    internal bool IsBinary { get; private set; }
    internal short NumColumns { get; private set; }
    internal List`1<DataFormat> ColumnFormatCodes { get; }
    public abstract virtual BackendMessageCode get_Code();
    [CompilerGeneratedAttribute]
internal bool get_IsBinary();
    [CompilerGeneratedAttribute]
private void set_IsBinary(bool value);
    [CompilerGeneratedAttribute]
internal short get_NumColumns();
    [CompilerGeneratedAttribute]
private void set_NumColumns(short value);
    [CompilerGeneratedAttribute]
internal List`1<DataFormat> get_ColumnFormatCodes();
    internal void Load(NpgsqlReadBuffer buf);
}
internal class Npgsql.BackendMessages.DataRowMessage : object {
    [CompilerGeneratedAttribute]
private int <Length>k__BackingField;
    public BackendMessageCode Code { get; }
    internal int Length { get; private set; }
    public sealed virtual BackendMessageCode get_Code();
    [CompilerGeneratedAttribute]
internal int get_Length();
    [CompilerGeneratedAttribute]
private void set_Length(int value);
    [NullableContextAttribute("1")]
internal DataRowMessage Load(int len);
}
internal class Npgsql.BackendMessages.EmptyQueryMessage : object {
    [NullableAttribute("1")]
internal static EmptyQueryMessage Instance;
    public BackendMessageCode Code { get; }
    private static EmptyQueryMessage();
    public sealed virtual BackendMessageCode get_Code();
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
internal class Npgsql.BackendMessages.ErrorOrNoticeMessage : object {
    [NullableAttribute("1")]
[CompilerGeneratedAttribute]
private string <Severity>k__BackingField;
    [NullableAttribute("1")]
[CompilerGeneratedAttribute]
private string <InvariantSeverity>k__BackingField;
    [NullableAttribute("1")]
[CompilerGeneratedAttribute]
private string <SqlState>k__BackingField;
    [NullableAttribute("1")]
[CompilerGeneratedAttribute]
private string <Message>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Detail>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Hint>k__BackingField;
    [CompilerGeneratedAttribute]
private int <Position>k__BackingField;
    [CompilerGeneratedAttribute]
private int <InternalPosition>k__BackingField;
    [CompilerGeneratedAttribute]
private string <InternalQuery>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Where>k__BackingField;
    [CompilerGeneratedAttribute]
private string <SchemaName>k__BackingField;
    [CompilerGeneratedAttribute]
private string <TableName>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ColumnName>k__BackingField;
    [CompilerGeneratedAttribute]
private string <DataTypeName>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ConstraintName>k__BackingField;
    [CompilerGeneratedAttribute]
private string <File>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Line>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Routine>k__BackingField;
    [NullableAttribute("1")]
internal string Severity { get; }
    [NullableAttribute("1")]
internal string InvariantSeverity { get; }
    [NullableAttribute("1")]
internal string SqlState { get; }
    [NullableAttribute("1")]
internal string Message { get; }
    internal string Detail { get; }
    internal string Hint { get; }
    internal int Position { get; }
    internal int InternalPosition { get; }
    internal string InternalQuery { get; }
    internal string Where { get; }
    internal string SchemaName { get; }
    internal string TableName { get; }
    internal string ColumnName { get; }
    internal string DataTypeName { get; }
    internal string ConstraintName { get; }
    internal string File { get; }
    internal string Line { get; }
    internal string Routine { get; }
    internal ErrorOrNoticeMessage(string severity, string invariantSeverity, string sqlState, string message, string detail, string hint, int position, int internalPosition, string internalQuery, string where, string schemaName, string tableName, string columnName, string dataTypeName, string constraintName, string file, string line, string routine);
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
internal string get_Severity();
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
internal string get_InvariantSeverity();
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
internal string get_SqlState();
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
internal string get_Message();
    [CompilerGeneratedAttribute]
internal string get_Detail();
    [CompilerGeneratedAttribute]
internal string get_Hint();
    [CompilerGeneratedAttribute]
internal int get_Position();
    [CompilerGeneratedAttribute]
internal int get_InternalPosition();
    [CompilerGeneratedAttribute]
internal string get_InternalQuery();
    [CompilerGeneratedAttribute]
internal string get_Where();
    [CompilerGeneratedAttribute]
internal string get_SchemaName();
    [CompilerGeneratedAttribute]
internal string get_TableName();
    [CompilerGeneratedAttribute]
internal string get_ColumnName();
    [CompilerGeneratedAttribute]
internal string get_DataTypeName();
    [CompilerGeneratedAttribute]
internal string get_ConstraintName();
    [CompilerGeneratedAttribute]
internal string get_File();
    [CompilerGeneratedAttribute]
internal string get_Line();
    [CompilerGeneratedAttribute]
internal string get_Routine();
    [NullableContextAttribute("1")]
internal static ErrorOrNoticeMessage Load(NpgsqlReadBuffer buf, bool includeDetail, ILogger exceptionLogger);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Npgsql.BackendMessages.FieldDescription : object {
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    [CompilerGeneratedAttribute]
private UInt32 <TypeOID>k__BackingField;
    [CompilerGeneratedAttribute]
private short <TypeSize>k__BackingField;
    [CompilerGeneratedAttribute]
private int <TypeModifier>k__BackingField;
    [CompilerGeneratedAttribute]
private UInt32 <TableOID>k__BackingField;
    [CompilerGeneratedAttribute]
private short <ColumnAttributeNumber>k__BackingField;
    [CompilerGeneratedAttribute]
private DataFormat <DataFormat>k__BackingField;
    [CompilerGeneratedAttribute]
private Field <Field>k__BackingField;
    [CompilerGeneratedAttribute]
private PostgresType <PostgresType>k__BackingField;
    private ColumnInfo _objectOrDefaultInfo;
    internal PgSerializerOptions _serializerOptions;
    internal string Name { get; internal set; }
    internal UInt32 TypeOID { get; internal set; }
    public short TypeSize { get; public set; }
    public int TypeModifier { get; public set; }
    internal UInt32 TableOID { get; internal set; }
    internal short ColumnAttributeNumber { get; internal set; }
    internal DataFormat DataFormat { get; internal set; }
    internal Field Field { get; private set; }
    internal string TypeDisplayName { get; }
    internal PostgresType PostgresType { get; private set; }
    internal Type FieldType { get; }
    internal PgConverterInfo ObjectOrDefaultInfo { get; }
    internal FieldDescription(UInt32 oid);
    internal FieldDescription(string name, UInt32 tableOID, short columnAttributeNumber, UInt32 oid, short typeSize, int typeModifier, DataFormat dataFormat);
    internal FieldDescription(FieldDescription source);
    internal void Populate(PgSerializerOptions serializerOptions, string name, UInt32 tableOID, short columnAttributeNumber, UInt32 oid, short typeSize, int typeModifier, DataFormat dataFormat);
    [CompilerGeneratedAttribute]
internal string get_Name();
    [CompilerGeneratedAttribute]
internal void set_Name(string value);
    [CompilerGeneratedAttribute]
internal UInt32 get_TypeOID();
    [CompilerGeneratedAttribute]
internal void set_TypeOID(UInt32 value);
    [CompilerGeneratedAttribute]
public short get_TypeSize();
    [CompilerGeneratedAttribute]
public void set_TypeSize(short value);
    [CompilerGeneratedAttribute]
public int get_TypeModifier();
    [CompilerGeneratedAttribute]
public void set_TypeModifier(int value);
    [CompilerGeneratedAttribute]
internal UInt32 get_TableOID();
    [CompilerGeneratedAttribute]
internal void set_TableOID(UInt32 value);
    [CompilerGeneratedAttribute]
internal short get_ColumnAttributeNumber();
    [CompilerGeneratedAttribute]
internal void set_ColumnAttributeNumber(short value);
    [CompilerGeneratedAttribute]
internal DataFormat get_DataFormat();
    [CompilerGeneratedAttribute]
internal void set_DataFormat(DataFormat value);
    [CompilerGeneratedAttribute]
internal Field get_Field();
    [CompilerGeneratedAttribute]
private void set_Field(Field value);
    internal string get_TypeDisplayName();
    [CompilerGeneratedAttribute]
internal PostgresType get_PostgresType();
    [CompilerGeneratedAttribute]
private void set_PostgresType(PostgresType value);
    internal Type get_FieldType();
    internal PgConverterInfo get_ObjectOrDefaultInfo();
    internal FieldDescription Clone();
    [NullableContextAttribute("2")]
internal void GetInfo(Type type, ColumnInfo& lastColumnInfo);
    public virtual string ToString();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
private void <GetInfo>g__GetInfoSlow|50_0(Type type, ColumnInfo& lastColumnInfo);
    [CompilerGeneratedAttribute]
private bool <GetInfo>g__IsUnknownResultType|50_1();
}
internal class Npgsql.BackendMessages.NoDataMessage : object {
    [NullableAttribute("1")]
internal static NoDataMessage Instance;
    public BackendMessageCode Code { get; }
    private static NoDataMessage();
    public sealed virtual BackendMessageCode get_Code();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Npgsql.BackendMessages.ParameterDescriptionMessage : object {
    [CompilerGeneratedAttribute]
private List`1<UInt32> <TypeOIDs>k__BackingField;
    internal List`1<UInt32> TypeOIDs { get; }
    public BackendMessageCode Code { get; }
    [CompilerGeneratedAttribute]
internal List`1<UInt32> get_TypeOIDs();
    internal ParameterDescriptionMessage Load(NpgsqlReadBuffer buf);
    public sealed virtual BackendMessageCode get_Code();
}
internal class Npgsql.BackendMessages.ParseCompleteMessage : object {
    [NullableAttribute("1")]
internal static ParseCompleteMessage Instance;
    public BackendMessageCode Code { get; }
    private static ParseCompleteMessage();
    public sealed virtual BackendMessageCode get_Code();
}
internal class Npgsql.BackendMessages.PortalSuspendedMessage : object {
    [NullableAttribute("1")]
internal static PortalSuspendedMessage Instance;
    public BackendMessageCode Code { get; }
    private static PortalSuspendedMessage();
    public sealed virtual BackendMessageCode get_Code();
}
internal class Npgsql.BackendMessages.ReadyForQueryMessage : object {
    [CompilerGeneratedAttribute]
private TransactionStatus <TransactionStatusIndicator>k__BackingField;
    public BackendMessageCode Code { get; }
    internal TransactionStatus TransactionStatusIndicator { get; private set; }
    public sealed virtual BackendMessageCode get_Code();
    [CompilerGeneratedAttribute]
internal TransactionStatus get_TransactionStatusIndicator();
    [CompilerGeneratedAttribute]
private void set_TransactionStatusIndicator(TransactionStatus value);
    [NullableContextAttribute("1")]
internal ReadyForQueryMessage Load(NpgsqlReadBuffer buf);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[DefaultMemberAttribute("Item")]
internal class Npgsql.BackendMessages.RowDescriptionMessage : object {
    private static StringComparer InvariantIgnoreCaseAndKanaWidthComparer;
    private bool _connectorOwned;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private FieldDescription[] _fields;
    private Dictionary`2<string, int> _nameIndex;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private Dictionary`2<string, int> _insensitiveIndex;
    [NullableAttribute("2")]
private ColumnInfo[] _lastConverterInfoCache;
    [CompilerGeneratedAttribute]
private int <Count>k__BackingField;
    public FieldDescription Item { get; }
    public int Count { get; private set; }
    public BackendMessageCode Code { get; }
    internal RowDescriptionMessage(bool connectorOwned, int numFields);
    private RowDescriptionMessage(RowDescriptionMessage source);
    private static RowDescriptionMessage();
    internal RowDescriptionMessage Load(NpgsqlReadBuffer buf, PgSerializerOptions options);
    internal static RowDescriptionMessage CreateForReplication(PgSerializerOptions options, UInt32 tableOID, DataFormat dataFormat, IReadOnlyList`1<Column> columns);
    public FieldDescription get_Item(int index);
    [NullableContextAttribute("0")]
internal void SetColumnInfoCache(ReadOnlySpan`1<ColumnInfo> values);
    internal void LoadColumnInfoCache(PgSerializerOptions options, ColumnInfo[] values);
    [CompilerGeneratedAttribute]
public int get_Count();
    [CompilerGeneratedAttribute]
private void set_Count(int value);
    internal int GetFieldIndex(string name);
    internal bool TryGetFieldIndex(string name, Int32& fieldIndex);
    public sealed virtual BackendMessageCode get_Code();
    internal RowDescriptionMessage Clone();
}
public enum Npgsql.ChannelBinding : Enum {
    public int value__;
    public static ChannelBinding Disable;
    public static ChannelBinding Prefer;
    public static ChannelBinding Require;
}
internal enum Npgsql.CommandState : Enum {
    public int value__;
    public static CommandState Idle;
    public static CommandState InProgress;
    public static CommandState Disposed;
}
internal enum Npgsql.ConnectorBindingScope : Enum {
    public int value__;
    public static ConnectorBindingScope None;
    public static ConnectorBindingScope Connection;
    public static ConnectorBindingScope Transaction;
    public static ConnectorBindingScope Copy;
    public static ConnectorBindingScope Reader;
    public static ConnectorBindingScope Temporary;
}
internal enum Npgsql.DatabaseState : Enum {
    public byte value__;
    public static DatabaseState Unknown;
    public static DatabaseState Offline;
    public static DatabaseState PrimaryReadWrite;
    public static DatabaseState PrimaryReadOnly;
    public static DatabaseState Standby;
}
[IsReadOnlyAttribute]
internal class Npgsql.EndScopeDisposable : ValueType {
    [NullableAttribute("1")]
private NpgsqlConnection _connection;
    [NullableContextAttribute("1")]
public EndScopeDisposable(NpgsqlConnection connection);
    public sealed virtual void Dispose();
}
internal static class Npgsql.FrontendMessageCode : object {
    internal static byte Describe;
    internal static byte Sync;
    internal static byte Execute;
    internal static byte Parse;
    internal static byte Bind;
    internal static byte Close;
    internal static byte Query;
    internal static byte CopyData;
    internal static byte CopyDone;
    internal static byte CopyFail;
    internal static byte Terminate;
    internal static byte Password;
}
internal interface Npgsql.IBackendMessage {
    public BackendMessageCode Code { get; }
    public abstract virtual BackendMessageCode get_Code();
}
internal interface Npgsql.ICancelable {
    public abstract virtual void Cancel();
    [NullableContextAttribute("1")]
public abstract virtual Task CancelAsync();
}
[NullableContextAttribute("1")]
public interface Npgsql.INpgsqlNameTranslator {
    public abstract virtual string TranslateTypeName(string clrName);
    public abstract virtual string TranslateMemberName(string clrName);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal static class Npgsql.Internal.AdoSerializerHelpers : object {
    public static PgTypeInfo GetTypeInfoForReading(Type type, PgTypeId pgTypeId, PgSerializerOptions options);
    public static PgTypeInfo GetTypeInfoForWriting(Type type, Nullable`1<PgTypeId> pgTypeId, PgSerializerOptions options, Nullable`1<NpgsqlDbType> npgsqlDbType);
    [CompilerGeneratedAttribute]
[DoesNotReturnAttribute]
internal static PgTypeInfo <GetTypeInfoForReading>g__ThrowReadingNotSupported|0_0(Type type, PgSerializerOptions options, PgTypeId pgTypeId, Exception inner);
    [CompilerGeneratedAttribute]
[DoesNotReturnAttribute]
internal static PgTypeInfo <GetTypeInfoForWriting>g__ThrowWritingNotSupported|1_0(Type type, PgSerializerOptions options, Nullable`1<PgTypeId> pgTypeId, Nullable`1<NpgsqlDbType> npgsqlDbType, Exception inner);
}
[IsReadOnlyAttribute]
[ExperimentalAttribute("NPG9001")]
public class Npgsql.Internal.BufferRequirements : ValueType {
    private Size _read;
    private Size _write;
    public Size Read { get; }
    public Size Write { get; }
    public static BufferRequirements None { get; }
    public static BufferRequirements Value { get; }
    private BufferRequirements(Size read, Size write);
    public Size get_Read();
    public Size get_Write();
    public static BufferRequirements get_None();
    public static BufferRequirements get_Value();
    public static BufferRequirements CreateFixedSize(int byteCount);
    public static BufferRequirements Create(Size value);
    public static BufferRequirements Create(Size read, Size write);
    public BufferRequirements Combine(Size read, Size write);
    public BufferRequirements Combine(BufferRequirements other);
    public BufferRequirements Combine(int byteCount);
    public sealed virtual bool Equals(BufferRequirements other);
    [NullableContextAttribute("2")]
public virtual bool Equals(object obj);
    public virtual int GetHashCode();
    public static bool op_Equality(BufferRequirements left, BufferRequirements right);
    public static bool op_Inequality(BufferRequirements left, BufferRequirements right);
}
internal class Npgsql.Internal.ChainTypeInfoResolver : object {
    [NullableAttribute("1")]
private IPgTypeInfoResolver[] _resolvers;
    [NullableContextAttribute("1")]
public ChainTypeInfoResolver(IEnumerable`1<IPgTypeInfoResolver> resolvers);
    [NullableContextAttribute("2")]
public sealed virtual PgTypeInfo GetTypeInfo(Type type, Nullable`1<DataTypeName> dataTypeName, PgSerializerOptions options);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal abstract class Npgsql.Internal.Composites.CompositeBuilder : object {
    protected StrongBox[] _tempBoxes;
    protected int _currentField;
    protected CompositeBuilder(StrongBox[] tempBoxes);
    protected abstract virtual void Construct();
    protected abstract virtual void SetField(TValue value);
    public void AddValue(TValue value);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Npgsql.Internal.Composites.CompositeBuilder`1 : CompositeBuilder {
    private CompositeInfo`1<T> _compositeInfo;
    private T _instance;
    [NullableAttribute("2")]
private object _boxedInstance;
    public CompositeBuilder`1(CompositeInfo`1<T> compositeInfo);
    public T Complete();
    public void Reset();
    public sealed virtual void Dispose();
    protected virtual void Construct();
    protected virtual void SetField(TValue value);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal abstract class Npgsql.Internal.Composites.CompositeFieldInfo : object {
    [CompilerGeneratedAttribute]
private PgTypeInfo <PgTypeInfo>k__BackingField;
    [NullableAttribute("2")]
[CompilerGeneratedAttribute]
private PgConverter <Converter>k__BackingField;
    protected BufferRequirements _binaryBufferRequirements;
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    [CompilerGeneratedAttribute]
private PgTypeId <PgTypeId>k__BackingField;
    protected PgTypeInfo PgTypeInfo { get; }
    [NullableAttribute("2")]
protected PgConverter Converter { get; }
    public string Name { get; }
    public PgTypeId PgTypeId { get; }
    public Size BinaryReadRequirement { get; }
    public Size BinaryWriteRequirement { get; }
    public Type Type { get; }
    public Nullable`1<int> ConstructorParameterIndex { get; }
    public bool IsDbNullable { get; }
    private protected CompositeFieldInfo(string name, PgTypeInfo typeInfo, PgTypeId nominalPgTypeId);
    [CompilerGeneratedAttribute]
protected PgTypeInfo get_PgTypeInfo();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
protected PgConverter get_Converter();
    public PgConverter GetReadInfo(Size& readRequirement);
    public PgConverter GetWriteInfo(object instance, Size& writeRequirement);
    protected ValueTask ReadAsObject(bool async, PgConverter converter, CompositeBuilder builder, PgReader reader, CancellationToken cancellationToken);
    protected ValueTask WriteAsObject(bool async, PgConverter converter, PgWriter writer, object value, CancellationToken cancellationToken);
    [CompilerGeneratedAttribute]
public string get_Name();
    [CompilerGeneratedAttribute]
public PgTypeId get_PgTypeId();
    public Size get_BinaryReadRequirement();
    public Size get_BinaryWriteRequirement();
    public abstract virtual Type get_Type();
    protected abstract virtual PgConverter BindValue(object instance, Size& writeRequirement);
    protected abstract virtual void AddValue(CompositeBuilder builder, object value);
    public abstract virtual StrongBox CreateBox();
    public abstract virtual void Set(object instance, StrongBox value);
    public abstract virtual Nullable`1<int> get_ConstructorParameterIndex();
    public abstract virtual bool get_IsDbNullable();
    public abstract virtual void ReadDbNull(CompositeBuilder builder);
    public abstract virtual ValueTask Read(bool async, PgConverter converter, CompositeBuilder builder, PgReader reader, CancellationToken cancellationToken);
    public abstract virtual bool IsDbNull(PgConverter converter, object instance, Object& writeState);
    public abstract virtual Nullable`1<Size> GetSizeOrDbNull(PgConverter converter, DataFormat format, Size writeRequirement, object instance, Object& writeState);
    public abstract virtual ValueTask Write(bool async, PgConverter converter, PgWriter writer, object instance, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Npgsql.Internal.Composites.CompositeFieldInfo/<<ReadAsObject>g__Core|10_0>d")]
[CompilerGeneratedAttribute]
[AsyncMethodBuilderAttribute("System.Runtime.CompilerServices.PoolingAsyncValueTaskMethodBuilder")]
internal static ValueTask <ReadAsObject>g__Core|10_0(CompositeBuilder builder, ValueTask`1<object> task);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Npgsql.Internal.Composites.CompositeFieldInfo`1 : CompositeFieldInfo {
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private Action`2<object, T> _setter;
    private int _parameterIndex;
    private Func`2<object, T> _getter;
    private bool _asObject;
    public Type Type { get; }
    public Nullable`1<int> ConstructorParameterIndex { get; }
    public bool IsDbNullable { get; }
    private CompositeFieldInfo`1(string name, PgTypeInfo typeInfo, PgTypeId nominalPgTypeId, Func`2<object, T> getter);
    public CompositeFieldInfo`1(string name, PgTypeInfo typeInfo, PgTypeId nominalPgTypeId, Func`2<object, T> getter, int parameterIndex);
    public CompositeFieldInfo`1(string name, PgTypeInfo typeInfo, PgTypeId nominalPgTypeId, Func`2<object, T> getter, Action`2<object, T> setter);
    private bool AsObject(PgConverter converter);
    public virtual Type get_Type();
    public virtual Nullable`1<int> get_ConstructorParameterIndex();
    public T Get(object instance);
    public virtual StrongBox CreateBox();
    public void Set(object instance, T value);
    public virtual void Set(object instance, StrongBox value);
    public virtual void ReadDbNull(CompositeBuilder builder);
    protected virtual PgConverter BindValue(object instance, Size& writeRequirement);
    protected virtual void AddValue(CompositeBuilder builder, object value);
    public virtual ValueTask Read(bool async, PgConverter converter, CompositeBuilder builder, PgReader reader, CancellationToken cancellationToken);
    public virtual bool get_IsDbNullable();
    public virtual bool IsDbNull(PgConverter converter, object instance, Object& writeState);
    public virtual Nullable`1<Size> GetSizeOrDbNull(PgConverter converter, DataFormat format, Size writeRequirement, object instance, Object& writeState);
    public virtual ValueTask Write(bool async, PgConverter converter, PgWriter writer, object instance, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Npgsql.Internal.Composites.CompositeFieldInfo`1/<<Read>g__Core|19_0>d")]
[CompilerGeneratedAttribute]
[AsyncMethodBuilderAttribute("System.Runtime.CompilerServices.PoolingAsyncValueTaskMethodBuilder")]
internal static ValueTask <Read>g__Core|19_0(CompositeBuilder builder, ValueTask`1<T> task);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Npgsql.Internal.Composites.CompositeInfo`1 : object {
    private int _lastConstructorFieldIndex;
    private CompositeFieldInfo[] _fields;
    [CompilerGeneratedAttribute]
private int <ConstructorParameters>k__BackingField;
    [CompilerGeneratedAttribute]
private Func`2<StrongBox[], T> <Constructor>k__BackingField;
    public IReadOnlyList`1<CompositeFieldInfo> Fields { get; }
    public int ConstructorParameters { get; }
    public Func`2<StrongBox[], T> Constructor { get; }
    public CompositeInfo`1(CompositeFieldInfo[] fields, int constructorParameters, Func`2<StrongBox[], T> constructor);
    public IReadOnlyList`1<CompositeFieldInfo> get_Fields();
    [CompilerGeneratedAttribute]
public int get_ConstructorParameters();
    [CompilerGeneratedAttribute]
public Func`2<StrongBox[], T> get_Constructor();
    public StrongBox[] CreateTempBoxes();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[RequiresDynamicCodeAttribute("Serializing arbitrary types can require creating new generic types or methods. This may not work when AOT compiling.")]
internal static class Npgsql.Internal.Composites.ReflectionCompositeInfoFactory : object {
    public static CompositeInfo`1<T> CreateCompositeInfo(PostgresCompositeType pgType, INpgsqlNameTranslator nameTranslator, PgSerializerOptions options);
    private static Delegate CreateGetter(FieldInfo info);
    private static Delegate CreateSetter(FieldInfo info);
    private static Delegate CreateGetter(PropertyInfo info);
    private static Delegate CreateSetter(PropertyInfo info);
    private static Expression UnboxAny(Expression expression, Type type);
    [DynamicDependencyAttribute("TypedValue", "Npgsql.Util.StrongBox`1")]
[DynamicDependencyAttribute("Length", "Npgsql.Util.StrongBox[]")]
[UnconditionalSuppressMessageAttribute("Trimming", "IL2026")]
private static Func`2<StrongBox[], T> CreateStrongBoxConstructor(ConstructorInfo constructorInfo);
    private static CompositeFieldInfo CreateCompositeFieldInfo(string name, Type type, PgTypeInfo typeInfo, PgTypeId nominalPgTypeId, Delegate getter, int constructorParameterIndex);
    private static CompositeFieldInfo CreateCompositeFieldInfo(string name, Type type, PgTypeInfo typeInfo, PgTypeId nominalPgTypeId, Delegate getter, Delegate setter);
    private static Dictionary`2<int, PropertyInfo> MapProperties(IReadOnlyList`1<Field> fields, INpgsqlNameTranslator nameTranslator);
    private static Dictionary`2<int, FieldInfo> MapFields(IReadOnlyList`1<Field> fields, INpgsqlNameTranslator nameTranslator);
    private static ValueTuple`2<ConstructorInfo, Int32[]> MapBestMatchingConstructor(IReadOnlyList`1<Field> fields, INpgsqlNameTranslator nameTranslator);
    [CompilerGeneratedAttribute]
internal static NotSupportedException <CreateCompositeInfo>g__NotSupportedField|0_1(PostgresCompositeType composite, Field field, bool isField, string name, Type type);
}
internal enum Npgsql.Internal.ConnectorState : Enum {
    public int value__;
    public static ConnectorState Closed;
    public static ConnectorState Connecting;
    public static ConnectorState Ready;
    public static ConnectorState Executing;
    public static ConnectorState Fetching;
    public static ConnectorState Waiting;
    public static ConnectorState Broken;
    public static ConnectorState Copy;
    public static ConnectorState Replication;
}
[NullableContextAttribute("1")]
[NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
internal class Npgsql.Internal.Converters.ArrayBasedArrayConverter`2 : ArrayConverter`1<T> {
    private PgConverter`1<TElement> _elemConverter;
    [NullableContextAttribute("2")]
public ArrayBasedArrayConverter`2(PgConverterResolution elemResolution, Type effectiveType, int pgLowerBound);
    private static TElement GetValue(object collection, Int32[] indices);
    private static void SetValue(object collection, Int32[] indices, TElement value);
    private sealed virtual override object Npgsql.Internal.Converters.IElementOperations.CreateCollection(Int32[] lengths);
    private sealed virtual override int Npgsql.Internal.Converters.IElementOperations.GetCollectionCount(object collection, Int32[]& lengths);
    private sealed virtual override Nullable`1<Size> Npgsql.Internal.Converters.IElementOperations.GetSizeOrDbNull(SizeContext context, object collection, Int32[] indices, Object& writeState);
    private sealed virtual override ValueTask Npgsql.Internal.Converters.IElementOperations.Read(bool async, PgReader reader, bool isDbNull, object collection, Int32[] indices, CancellationToken cancellationToken);
    private ValueTask ReadAsync(PgStreamingConverter`1<TElement> converter, PgReader reader, object collection, Int32[] indices, CancellationToken cancellationToken);
    private sealed virtual override ValueTask Npgsql.Internal.Converters.IElementOperations.Write(bool async, PgWriter writer, object collection, Int32[] indices, CancellationToken cancellationToken);
    [CompilerGeneratedAttribute]
internal static void <ReadAsync>g__SetResult|8_0(Task task, object collection, Int32[] indices);
}
[NullableContextAttribute("1")]
[NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
internal abstract class Npgsql.Internal.Converters.ArrayBasedTextConverter`1 : PgStreamingConverter`1<T> {
    private Encoding _encoding;
    protected ArrayBasedTextConverter`1(Encoding encoding);
    public virtual T Read(PgReader reader);
    public virtual ValueTask`1<T> ReadAsync(PgReader reader, CancellationToken cancellationToken);
    public virtual Size GetSize(SizeContext context, T value, Object& writeState);
    public virtual void Write(PgWriter writer, T value);
    public virtual ValueTask WriteAsync(PgWriter writer, T value, CancellationToken cancellationToken);
    public virtual bool CanConvert(DataFormat format, BufferRequirements& bufferRequirements);
    [NullableContextAttribute("0")]
protected abstract virtual ArraySegment`1<char> ConvertTo(T value);
    [NullableContextAttribute("0")]
protected abstract virtual T ConvertFrom(ArraySegment`1<char> value);
    private ValueTask`1<T> Read(bool async, PgReader reader, Encoding encoding);
    [AsyncStateMachineAttribute("Npgsql.Internal.Converters.ArrayBasedTextConverter`1/<<Read>g__ReadAsync|10_0>d")]
[CompilerGeneratedAttribute]
[AsyncMethodBuilderAttribute("System.Runtime.CompilerServices.PoolingAsyncValueTaskMethodBuilder`1")]
private ValueTask`1<T> <Read>g__ReadAsync|10_0(PgReader reader, Encoding encoding);
    [NullableContextAttribute("0")]
[CompilerGeneratedAttribute]
internal static ArraySegment`1<char> <Read>g__GetSegment|10_1(ReadOnlySequence`1<byte> bytes, Encoding encoding);
}
[NullableContextAttribute("1")]
[NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
internal class Npgsql.Internal.Converters.ArrayByteaConverter : PgStreamingConverter`1<Byte[]> {
    public virtual Byte[] Read(PgReader reader);
    [AsyncStateMachineAttribute("Npgsql.Internal.Converters.ArrayByteaConverter/<ReadAsync>d__1")]
public virtual ValueTask`1<Byte[]> ReadAsync(PgReader reader, CancellationToken cancellationToken);
    public virtual Size GetSize(SizeContext context, Byte[] value, Object& writeState);
    public virtual void Write(PgWriter writer, Byte[] value);
    public virtual ValueTask WriteAsync(PgWriter writer, Byte[] value, CancellationToken cancellationToken);
}
[NullableContextAttribute("1")]
[NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
internal abstract class Npgsql.Internal.Converters.ArrayConverter`1 : PgStreamingConverter`1<T> {
    private PgArrayConverter _pgArrayConverter;
    private protected ArrayConverter`1(Nullable`1<int> expectedDimensions, PgConverterResolution elemResolution, int pgLowerBound);
    public virtual T Read(PgReader reader);
    public virtual ValueTask`1<T> ReadAsync(PgReader reader, CancellationToken cancellationToken);
    public virtual Size GetSize(SizeContext context, T values, Object& writeState);
    public virtual void Write(PgWriter writer, T values);
    public virtual ValueTask WriteAsync(PgWriter writer, T values, CancellationToken cancellationToken);
    protected static Int32[] GetLengths(Array array);
    [CompilerGeneratedAttribute]
internal static void <ReadAsync>g__UnboxAndComplete|3_0(Task task, CompletionSource completionSource);
}
[NullableContextAttribute("1")]
[NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
internal class Npgsql.Internal.Converters.ArrayConverterResolver`2 : PgComposingConverterResolver`1<T> {
    private Type _effectiveType;
    private PgSerializerOptions Options { get; }
    public ArrayConverterResolver`2(PgResolverTypeInfo elementTypeInfo, Type effectiveType);
    private PgSerializerOptions get_Options();
    protected virtual PgTypeId GetEffectivePgTypeId(PgTypeId pgTypeId);
    protected virtual PgTypeId GetPgTypeId(PgTypeId effectivePgTypeId);
    protected virtual PgConverter`1<T> CreateConverter(PgConverterResolution effectiveResolution);
    [NullableContextAttribute("2")]
protected virtual Nullable`1<PgConverterResolution> GetEffectiveResolution(T values, Nullable`1<PgTypeId> expectedEffectivePgTypeId);
}
[NullableContextAttribute("1")]
[NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
internal class Npgsql.Internal.Converters.ArrayPolymorphicConverterResolver : PolymorphicConverterResolver`1<object> {
    private PgResolverTypeInfo _elemTypeInfo;
    private Func`2<PgConverterResolution, PgConverter> _elemToArrayConverterFactory;
    private PgTypeId _elemPgTypeId;
    private ConcurrentDictionary`2<PgConverter, PgConverter> _converterCache;
    public ArrayPolymorphicConverterResolver(PgTypeId pgTypeId, PgResolverTypeInfo elemTypeInfo, Func`2<PgConverterResolution, PgConverter> elemToArrayConverterFactory);
    protected virtual PgConverter Get(Nullable`1<Field> maybeField);
}
internal class Npgsql.Internal.Converters.ArraySegmentByteaConverter : ByteaConverters`1<ArraySegment`1<byte>> {
    protected virtual Memory`1<byte> ConvertTo(ArraySegment`1<byte> value);
    protected virtual ArraySegment`1<byte> ConvertFrom(Memory`1<byte> value);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ExtensionAttribute]
internal static class Npgsql.Internal.Converters.AsyncHelpers : object {
    public static void OnCompletedWithSource(Task task, CompletionSource source, CompletionSourceContinuation continuation);
    [NullableContextAttribute("0")]
[ExtensionAttribute]
public static ValueTask`1<Nullable`1<T>> ReadAsyncAsNullable(PgConverter`1<Nullable`1<T>> instance, PgConverter`1<T> effectiveConverter, PgReader reader, CancellationToken cancellationToken);
    [ExtensionAttribute]
public static ValueTask`1<T> ReadAsObjectAsyncAsT(PgConverter`1<T> instance, PgConverter effectiveConverter, PgReader reader, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Npgsql.Internal.Converters.AsyncHelpers/<<OnCompletedWithSource>g__Core|0_0>d")]
[CompilerGeneratedAttribute]
[AsyncMethodBuilderAttribute("System.Runtime.CompilerServices.PoolingAsyncValueTaskMethodBuilder")]
internal static ValueTask <OnCompletedWithSource>g__Core|0_0(Task task, CompletionSource source, CompletionSourceContinuation continuation);
    [CompilerGeneratedAttribute]
internal static void <ReadAsyncAsNullable>g__UnboxAndComplete|5_0(Task task, CompletionSource completionSource);
    [CompilerGeneratedAttribute]
internal static void <ReadAsObjectAsyncAsT>g__UnboxAndComplete|6_0(Task task, CompletionSource completionSource);
}
internal class Npgsql.Internal.Converters.BigIntegerNumericConverter : PgStreamingConverter`1<BigInteger> {
    private static int StackAllocByteThreshold;
    [NullableContextAttribute("1")]
public virtual BigInteger Read(PgReader reader);
    public virtual ValueTask`1<BigInteger> ReadAsync(PgReader reader, CancellationToken cancellationToken);
    [NullableContextAttribute("2")]
public virtual Size GetSize(SizeContext context, BigInteger value, Object& writeState);
    [NullableContextAttribute("1")]
public virtual void Write(PgWriter writer, BigInteger value);
    [NullableContextAttribute("1")]
public virtual ValueTask WriteAsync(PgWriter writer, BigInteger value, CancellationToken cancellationToken);
    private static Builder ConvertFrom(BigInteger value, Span`1<short> destination);
    private static BigInteger ConvertTo(Builder& numeric);
    private static BigInteger ConvertTo(PgNumeric& numeric);
    [AsyncStateMachineAttribute("Npgsql.Internal.Converters.BigIntegerNumericConverter/<<ReadAsync>g__AsyncCore|2_0>d")]
[CompilerGeneratedAttribute]
internal static ValueTask`1<BigInteger> <ReadAsync>g__AsyncCore|2_0(PgReader reader, CancellationToken cancellationToken);
    [NullableContextAttribute("1")]
[AsyncStateMachineAttribute("Npgsql.Internal.Converters.BigIntegerNumericConverter/<<WriteAsync>g__AsyncCore|5_0>d")]
[CompilerGeneratedAttribute]
internal static ValueTask <WriteAsync>g__AsyncCore|5_0(PgWriter writer, BigInteger value, CancellationToken cancellationToken);
}
[NullableContextAttribute("1")]
[NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
internal class Npgsql.Internal.Converters.BitArrayBitStringConverter : PgStreamingConverter`1<BitArray> {
    public virtual BitArray Read(PgReader reader);
    [AsyncStateMachineAttribute("Npgsql.Internal.Converters.BitArrayBitStringConverter/<ReadAsync>d__1")]
public virtual ValueTask`1<BitArray> ReadAsync(PgReader reader, CancellationToken cancellationToken);
    internal static BitArray ReadValue(Byte[] bytes, int bits);
    public virtual Size GetSize(SizeContext context, BitArray value, Object& writeState);
    public virtual void Write(PgWriter writer, BitArray value);
    public virtual ValueTask WriteAsync(PgWriter writer, BitArray value, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Npgsql.Internal.Converters.BitArrayBitStringConverter/<Write>d__6")]
private ValueTask Write(bool async, PgWriter writer, BitArray value, CancellationToken cancellationToken);
}
internal static class Npgsql.Internal.Converters.BitStringHelpers : object {
    public static int GetByteLengthFromBits(int n);
    public static byte ReverseBits(byte b);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Npgsql.Internal.Converters.BitVector32BitStringConverter : PgBufferedConverter`1<BitVector32> {
    private static int MaxSize { get; }
    private static int get_MaxSize();
    public virtual bool CanConvert(DataFormat format, BufferRequirements& bufferRequirements);
    protected virtual BitVector32 ReadCore(PgReader reader);
    [NullableContextAttribute("2")]
public virtual Size GetSize(SizeContext context, BitVector32 value, Object& writeState);
    protected virtual void WriteCore(PgWriter writer, BitVector32 value);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Npgsql.Internal.Converters.BoolBitStringConverter : PgBufferedConverter`1<bool> {
    private static int MaxSize { get; }
    private static int get_MaxSize();
    public virtual bool CanConvert(DataFormat format, BufferRequirements& bufferRequirements);
    protected virtual bool ReadCore(PgReader reader);
    [NullableContextAttribute("2")]
public virtual Size GetSize(SizeContext context, bool value, Object& writeState);
    protected virtual void WriteCore(PgWriter writer, bool value);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Npgsql.Internal.Converters.BoolConverter : PgBufferedConverter`1<bool> {
    public virtual bool CanConvert(DataFormat format, BufferRequirements& bufferRequirements);
    protected virtual bool ReadCore(PgReader reader);
    protected virtual void WriteCore(PgWriter writer, bool value);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Npgsql.Internal.Converters.BoxConverter : PgBufferedConverter`1<NpgsqlBox> {
    public virtual bool CanConvert(DataFormat format, BufferRequirements& bufferRequirements);
    protected virtual NpgsqlBox ReadCore(PgReader reader);
    protected virtual void WriteCore(PgWriter writer, NpgsqlBox value);
}
[NullableContextAttribute("1")]
[NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
internal abstract class Npgsql.Internal.Converters.ByteaConverters`1 : PgStreamingConverter`1<T> {
    public virtual T Read(PgReader reader);
    public virtual ValueTask`1<T> ReadAsync(PgReader reader, CancellationToken cancellationToken);
    public virtual Size GetSize(SizeContext context, T value, Object& writeState);
    public virtual void Write(PgWriter writer, T value);
    public virtual ValueTask WriteAsync(PgWriter writer, T value, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Npgsql.Internal.Converters.ByteaConverters`1/<Read>d__5")]
[AsyncMethodBuilderAttribute("System.Runtime.CompilerServices.PoolingAsyncValueTaskMethodBuilder`1")]
private ValueTask`1<T> Read(bool async, PgReader reader, CancellationToken cancellationToken);
    [NullableContextAttribute("0")]
protected abstract virtual Memory`1<byte> ConvertTo(T value);
    [NullableContextAttribute("0")]
protected abstract virtual T ConvertFrom(Memory`1<byte> value);
}
[NullableContextAttribute("1")]
[NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
internal class Npgsql.Internal.Converters.CastingConverter`1 : PgConverter`1<T> {
    private PgConverter _effectiveConverter;
    public CastingConverter`1(PgConverter effectiveConverter);
    [NullableContextAttribute("2")]
protected virtual bool IsDbNullValue(T value, Object& writeState);
    public virtual bool CanConvert(DataFormat format, BufferRequirements& bufferRequirements);
    public virtual T Read(PgReader reader);
    public virtual ValueTask`1<T> ReadAsync(PgReader reader, CancellationToken cancellationToken);
    public virtual Size GetSize(SizeContext context, T value, Object& writeState);
    public virtual void Write(PgWriter writer, T value);
    public virtual ValueTask WriteAsync(PgWriter writer, T value, CancellationToken cancellationToken);
    internal virtual ValueTask`1<object> ReadAsObject(bool async, PgReader reader, CancellationToken cancellationToken);
    internal virtual ValueTask WriteAsObject(bool async, PgWriter writer, object value, CancellationToken cancellationToken);
}
[NullableContextAttribute("1")]
[NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
internal class Npgsql.Internal.Converters.CastingConverterResolver`1 : PgComposingConverterResolver`1<T> {
    public CastingConverterResolver`1(PgResolverTypeInfo effectiveResolverTypeInfo);
    protected virtual PgTypeId GetEffectivePgTypeId(PgTypeId pgTypeId);
    protected virtual PgTypeId GetPgTypeId(PgTypeId effectivePgTypeId);
    protected virtual PgConverter`1<T> CreateConverter(PgConverterResolution effectiveResolution);
    [NullableContextAttribute("2")]
protected virtual Nullable`1<PgConverterResolution> GetEffectiveResolution(T value, Nullable`1<PgTypeId> expectedEffectiveTypeId);
}
[ExtensionAttribute]
internal static class Npgsql.Internal.Converters.CastingTypeInfoExtensions : object {
    [NullableContextAttribute("1")]
[ExtensionAttribute]
[RequiresDynamicCodeAttribute("Changing boxing converters to their non-boxing counterpart can require creating new generic types or methods, which requires creating code at runtime. This may not be AOT  when AOT compiling")]
internal static PgTypeInfo ToNonBoxing(PgTypeInfo typeInfo);
}
internal class Npgsql.Internal.Converters.CharArraySegmentTextConverter : ArrayBasedTextConverter`1<ArraySegment`1<char>> {
    [NullableContextAttribute("1")]
public CharArraySegmentTextConverter(Encoding encoding);
    protected virtual ArraySegment`1<char> ConvertTo(ArraySegment`1<char> value);
    protected virtual ArraySegment`1<char> ConvertFrom(ArraySegment`1<char> value);
}
[NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
internal class Npgsql.Internal.Converters.CharArrayTextConverter : ArrayBasedTextConverter`1<Char[]> {
    [NullableContextAttribute("1")]
public CharArrayTextConverter(Encoding encoding);
    protected virtual ArraySegment`1<char> ConvertTo(Char[] value);
    protected virtual Char[] ConvertFrom(ArraySegment`1<char> value);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Npgsql.Internal.Converters.CharTextConverter : PgBufferedConverter`1<char> {
    private Encoding _encoding;
    private Size _oneCharMaxByteCount;
    public CharTextConverter(Encoding encoding);
    public virtual bool CanConvert(DataFormat format, BufferRequirements& bufferRequirements);
    protected virtual char ReadCore(PgReader reader);
    [NullableContextAttribute("2")]
public virtual Size GetSize(SizeContext context, char value, Object& writeState);
    protected virtual void WriteCore(PgWriter writer, char value);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Npgsql.Internal.Converters.CircleConverter : PgBufferedConverter`1<NpgsqlCircle> {
    public virtual bool CanConvert(DataFormat format, BufferRequirements& bufferRequirements);
    protected virtual NpgsqlCircle ReadCore(PgReader reader);
    protected virtual void WriteCore(PgWriter writer, NpgsqlCircle value);
}
[NullableContextAttribute("1")]
[NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
internal class Npgsql.Internal.Converters.CompositeConverter`1 : PgStreamingConverter`1<T> {
    private CompositeInfo`1<T> _composite;
    private BufferRequirements _bufferRequirements;
    public CompositeConverter`1(CompositeInfo`1<T> composite);
    public virtual bool CanConvert(DataFormat format, BufferRequirements& bufferRequirements);
    public virtual T Read(PgReader reader);
    public virtual ValueTask`1<T> ReadAsync(PgReader reader, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Npgsql.Internal.Converters.CompositeConverter`1/<Read>d__6")]
private ValueTask`1<T> Read(bool async, PgReader reader, CancellationToken cancellationToken);
    public virtual Size GetSize(SizeContext context, T value, Object& writeState);
    public virtual void Write(PgWriter writer, T value);
    public virtual ValueTask WriteAsync(PgWriter writer, T value, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Npgsql.Internal.Converters.CompositeConverter`1/<Write>d__10")]
private ValueTask Write(bool async, PgWriter writer, T value, CancellationToken cancellationToken);
    [CompilerGeneratedAttribute]
internal static Size <.ctor>g__Limit|2_0(Size requirement);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Npgsql.Internal.Converters.DateOnlyDateConverter : PgBufferedConverter`1<DateOnly> {
    private bool _dateTimeInfinityConversions;
    private static DateOnly BaseValue;
    public DateOnlyDateConverter(bool dateTimeInfinityConversions);
    private static DateOnlyDateConverter();
    public virtual bool CanConvert(DataFormat format, BufferRequirements& bufferRequirements);
    protected virtual DateOnly ReadCore(PgReader reader);
    protected virtual void WriteCore(PgWriter writer, DateOnly value);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Npgsql.Internal.Converters.DateTimeConverter : PgBufferedConverter`1<DateTime> {
    private bool _dateTimeInfinityConversions;
    private DateTimeKind _kind;
    public DateTimeConverter(bool dateTimeInfinityConversions, DateTimeKind kind);
    public virtual bool CanConvert(DataFormat format, BufferRequirements& bufferRequirements);
    protected virtual DateTime ReadCore(PgReader reader);
    protected virtual void WriteCore(PgWriter writer, DateTime value);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Npgsql.Internal.Converters.DateTimeConverterResolver : object {
    public static DateTimeConverterResolver`1<DateTime> CreateResolver(PgSerializerOptions options, PgTypeId timestampTz, PgTypeId timestamp, bool dateTimeInfinityConversions);
    public static DateTimeConverterResolver`1<NpgsqlRange`1<DateTime>> CreateRangeResolver(PgSerializerOptions options, PgTypeId timestampTz, PgTypeId timestamp, bool dateTimeInfinityConversions);
    public static DateTimeConverterResolver`1<T> CreateMultirangeResolver(PgSerializerOptions options, PgTypeId timestampTz, PgTypeId timestamp, bool dateTimeInfinityConversions);
}
[NullableContextAttribute("2")]
[NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
internal class Npgsql.Internal.Converters.DateTimeConverterResolver`1 : PgConverterResolver`1<T> {
    [NullableAttribute("1")]
private PgSerializerOptions _options;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private Func`4<DateTimeConverterResolver`1<T>, T, Nullable`1<PgTypeId>, Nullable`1<PgConverterResolution>> _resolver;
    [NullableAttribute("1")]
private Func`2<PgTypeId, PgConverter> _factory;
    private PgTypeId _timestampTz;
    private PgConverter _timestampTzConverter;
    private PgTypeId _timestamp;
    private PgConverter _timestampConverter;
    private bool _dateTimeInfinityConversions;
    [NullableContextAttribute("1")]
internal DateTimeConverterResolver`1(PgSerializerOptions options, Func`4<DateTimeConverterResolver`1<T>, T, Nullable`1<PgTypeId>, Nullable`1<PgConverterResolution>> resolver, Func`2<PgTypeId, PgConverter> factory, PgTypeId timestampTz, PgTypeId timestamp, bool dateTimeInfinityConversions);
    public virtual PgConverterResolution GetDefault(Nullable`1<PgTypeId> pgTypeId);
    public Nullable`1<PgConverterResolution> Get(DateTime value, Nullable`1<PgTypeId> expectedPgTypeId, bool validateOnly);
    public virtual Nullable`1<PgConverterResolution> Get(T value, Nullable`1<PgTypeId> expectedPgTypeId);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Npgsql.Internal.Converters.DateTimeDateConverter : PgBufferedConverter`1<DateTime> {
    private bool _dateTimeInfinityConversions;
    private static DateTime BaseValue;
    public DateTimeDateConverter(bool dateTimeInfinityConversions);
    private static DateTimeDateConverter();
    public virtual bool CanConvert(DataFormat format, BufferRequirements& bufferRequirements);
    protected virtual DateTime ReadCore(PgReader reader);
    protected virtual void WriteCore(PgWriter writer, DateTime value);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Npgsql.Internal.Converters.DateTimeOffsetConverter : PgBufferedConverter`1<DateTimeOffset> {
    private bool _dateTimeInfinityConversions;
    public DateTimeOffsetConverter(bool dateTimeInfinityConversions);
    public virtual bool CanConvert(DataFormat format, BufferRequirements& bufferRequirements);
    protected virtual DateTimeOffset ReadCore(PgReader reader);
    protected virtual void WriteCore(PgWriter writer, DateTimeOffset value);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Npgsql.Internal.Converters.DateTimeOffsetTimeTzConverter : PgBufferedConverter`1<DateTimeOffset> {
    public virtual bool CanConvert(DataFormat format, BufferRequirements& bufferRequirements);
    protected virtual DateTimeOffset ReadCore(PgReader reader);
    protected virtual void WriteCore(PgWriter writer, DateTimeOffset value);
}
[NullableContextAttribute("1")]
[NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
internal class Npgsql.Internal.Converters.DecimalNumericConverter`1 : PgBufferedConverter`1<T> {
    private static int StackAllocByteThreshold;
    public virtual bool CanConvert(DataFormat format, BufferRequirements& bufferRequirements);
    protected virtual T ReadCore(PgReader reader);
    public virtual Size GetSize(SizeContext context, T value, Object& writeState);
    protected virtual void WriteCore(PgWriter writer, T value);
    [NullableContextAttribute("0")]
private static Builder ConvertFrom(T value, Span`1<short> destination);
    private static T ConvertTo(Builder& numeric);
}
[NullableContextAttribute("1")]
[NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
internal class Npgsql.Internal.Converters.DoubleConverter`1 : PgBufferedConverter`1<T> {
    public virtual bool CanConvert(DataFormat format, BufferRequirements& bufferRequirements);
    protected virtual T ReadCore(PgReader reader);
    protected virtual void WriteCore(PgWriter writer, T value);
}
[DynamicallyAccessedMembersAttribute("3")]
internal class Npgsql.Internal.Converters.EnumConverter`1 : PgBufferedConverter`1<TEnum> {
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private Dictionary`2<TEnum, string> _enumToLabel;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private Dictionary`2<string, TEnum> _labelToEnum;
    [NullableAttribute("1")]
private Encoding _encoding;
    [NullableContextAttribute("1")]
public EnumConverter`1(Dictionary`2<Enum, string> enumToLabel, Dictionary`2<string, Enum> labelToEnum, Encoding encoding);
    [NullableContextAttribute("1")]
public EnumConverter`1(Dictionary`2<TEnum, string> enumToLabel, Dictionary`2<string, TEnum> labelToEnum, Encoding encoding);
    public virtual bool CanConvert(DataFormat format, BufferRequirements& bufferRequirements);
    public virtual Size GetSize(SizeContext context, TEnum value, Object& writeState);
    protected virtual TEnum ReadCore(PgReader reader);
    protected virtual void WriteCore(PgWriter writer, TEnum value);
}
[IsReadOnlyAttribute]
internal class Npgsql.Internal.Converters.GetChars : ValueType {
    [CompilerGeneratedAttribute]
private int <Read>k__BackingField;
    public int Read { get; }
    public GetChars(int read);
    [CompilerGeneratedAttribute]
public int get_Read();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Npgsql.Internal.Converters.GetCharsTextConverter : PgStreamingConverter`1<GetChars> {
    private Encoding _encoding;
    public GetCharsTextConverter(Encoding encoding);
    public virtual GetChars Read(PgReader reader);
    [NullableContextAttribute("0")]
public virtual ValueTask`1<GetChars> ReadAsync(PgReader reader, CancellationToken cancellationToken);
    [NullableContextAttribute("2")]
public virtual Size GetSize(SizeContext context, GetChars value, Object& writeState);
    public virtual void Write(PgWriter writer, GetChars value);
    public virtual ValueTask WriteAsync(PgWriter writer, GetChars value, CancellationToken cancellationToken);
    private GetChars ResumableRead(PgReader reader);
    [CompilerGeneratedAttribute]
internal static int <ResumableRead>g__ConsumeChars|7_0(TextReader reader, Nullable`1<int> count);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Npgsql.Internal.Converters.GuidUuidConverter : PgBufferedConverter`1<Guid> {
    public virtual bool CanConvert(DataFormat format, BufferRequirements& bufferRequirements);
    protected virtual Guid ReadCore(PgReader reader);
    protected virtual void WriteCore(PgWriter writer, Guid value);
}
[NullableContextAttribute("1")]
[NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
internal class Npgsql.Internal.Converters.HstoreConverter`1 : PgStreamingConverter`1<T> {
    private Encoding _encoding;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private Func`2<ICollection`1<KeyValuePair`2<string, string>>, T> _convert;
    public HstoreConverter`1(Encoding encoding, Func`2<ICollection`1<KeyValuePair`2<string, string>>, T> convert);
    public virtual T Read(PgReader reader);
    public virtual ValueTask`1<T> ReadAsync(PgReader reader, CancellationToken cancellationToken);
    public virtual Size GetSize(SizeContext context, T value, Object& writeState);
    public virtual void Write(PgWriter writer, T value);
    public virtual ValueTask WriteAsync(PgWriter writer, T value, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Npgsql.Internal.Converters.HstoreConverter`1/<Read>d__8")]
private ValueTask`1<T> Read(bool async, PgReader reader, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Npgsql.Internal.Converters.HstoreConverter`1/<Write>d__9")]
private ValueTask Write(bool async, PgWriter writer, T value, CancellationToken cancellationToken);
}
[NullableContextAttribute("1")]
internal interface Npgsql.Internal.Converters.IElementOperations {
    public abstract virtual object CreateCollection(Int32[] lengths);
    public abstract virtual int GetCollectionCount(object collection, Int32[]& lengths);
    public abstract virtual Nullable`1<Size> GetSizeOrDbNull(SizeContext context, object collection, Int32[] indices, Object& writeState);
    public abstract virtual ValueTask Read(bool async, PgReader reader, bool isDbNull, object collection, Int32[] indices, CancellationToken cancellationToken);
    public abstract virtual ValueTask Write(bool async, PgWriter writer, object collection, Int32[] indices, CancellationToken cancellationToken);
}
[NullableContextAttribute("1")]
[NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
internal class Npgsql.Internal.Converters.Int2Converter`1 : PgBufferedConverter`1<T> {
    public virtual bool CanConvert(DataFormat format, BufferRequirements& bufferRequirements);
    protected virtual T ReadCore(PgReader reader);
    protected virtual void WriteCore(PgWriter writer, T value);
}
[NullableContextAttribute("1")]
[NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
internal class Npgsql.Internal.Converters.Int4Converter`1 : PgBufferedConverter`1<T> {
    public virtual bool CanConvert(DataFormat format, BufferRequirements& bufferRequirements);
    protected virtual T ReadCore(PgReader reader);
    protected virtual void WriteCore(PgWriter writer, T value);
}
[NullableContextAttribute("1")]
[NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
internal class Npgsql.Internal.Converters.Int8Converter`1 : PgBufferedConverter`1<T> {
    public virtual bool CanConvert(DataFormat format, BufferRequirements& bufferRequirements);
    protected virtual T ReadCore(PgReader reader);
    protected virtual void WriteCore(PgWriter writer, T value);
}
[NullableContextAttribute("1")]
[NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
internal class Npgsql.Internal.Converters.Internal.VoidConverter : PgBufferedConverter`1<object> {
    public virtual bool CanConvert(DataFormat format, BufferRequirements& bufferRequirements);
    protected virtual object ReadCore(PgReader reader);
    protected virtual void WriteCore(PgWriter writer, object value);
}
[NullableContextAttribute("1")]
[NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
internal class Npgsql.Internal.Converters.InternalCharConverter`1 : PgBufferedConverter`1<T> {
    public virtual bool CanConvert(DataFormat format, BufferRequirements& bufferRequirements);
    protected virtual T ReadCore(PgReader reader);
    protected virtual void WriteCore(PgWriter writer, T value);
}
[NullableContextAttribute("1")]
[NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
internal class Npgsql.Internal.Converters.IPAddressConverter : PgBufferedConverter`1<IPAddress> {
    public virtual bool CanConvert(DataFormat format, BufferRequirements& bufferRequirements);
    public virtual Size GetSize(SizeContext context, IPAddress value, Object& writeState);
    protected virtual IPAddress ReadCore(PgReader reader);
    protected virtual void WriteCore(PgWriter writer, IPAddress value);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal static class Npgsql.Internal.Converters.JsonConverter : object {
    public static byte JsonbProtocolVersion;
    private static int StreamingThreshold;
    public static bool TryReadStream(bool jsonb, Encoding encoding, PgReader reader, Int32& byteCount, Stream& stream);
    [AsyncStateMachineAttribute("Npgsql.Internal.Converters.JsonConverter/<ReadRentedBuffer>d__3")]
public static ValueTask`1<ValueTuple`2<ArraySegment`1<char>, Byte[]>> ReadRentedBuffer(bool async, Encoding encoding, int byteCount, PgReader reader, CancellationToken cancellationToken);
    public static Size GetSizeCore(bool jsonb, MemoryStream stream, Encoding encoding, Object& writeState);
    [AsyncStateMachineAttribute("Npgsql.Internal.Converters.JsonConverter/<Write>d__5")]
public static ValueTask Write(bool jsonb, bool async, PgWriter writer, CancellationToken cancellationToken);
}
[NullableContextAttribute("1")]
[NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
internal class Npgsql.Internal.Converters.JsonConverter`2 : PgStreamingConverter`1<T> {
    private bool _jsonb;
    private Encoding _textEncoding;
    private JsonTypeInfo _jsonTypeInfo;
    [NullableAttribute("2")]
private JsonTypeInfo`1<object> _objectTypeInfo;
    public JsonConverter`2(bool jsonb, Encoding textEncoding, JsonSerializerOptions serializerOptions);
    public virtual T Read(PgReader reader);
    public virtual ValueTask`1<T> ReadAsync(PgReader reader, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Npgsql.Internal.Converters.JsonConverter`2/<Read>d__7")]
private ValueTask`1<T> Read(bool async, PgReader reader, CancellationToken cancellationToken);
    [NullableContextAttribute("2")]
public virtual Size GetSize(SizeContext context, T value, Object& writeState);
    public virtual void Write(PgWriter writer, T value);
    public virtual ValueTask WriteAsync(PgWriter writer, T value, CancellationToken cancellationToken);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Npgsql.Internal.Converters.LegacyDateTimeConverter : PgBufferedConverter`1<DateTime> {
    private bool _dateTimeInfinityConversions;
    private bool _timestamp;
    public LegacyDateTimeConverter(bool dateTimeInfinityConversions, bool timestamp);
    public virtual bool CanConvert(DataFormat format, BufferRequirements& bufferRequirements);
    protected virtual DateTime ReadCore(PgReader reader);
    protected virtual void WriteCore(PgWriter writer, DateTime value);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Npgsql.Internal.Converters.LegacyDateTimeOffsetConverter : PgBufferedConverter`1<DateTimeOffset> {
    private bool _dateTimeInfinityConversions;
    public LegacyDateTimeOffsetConverter(bool dateTimeInfinityConversions);
    public virtual bool CanConvert(DataFormat format, BufferRequirements& bufferRequirements);
    protected virtual DateTimeOffset ReadCore(PgReader reader);
    protected virtual void WriteCore(PgWriter writer, DateTimeOffset value);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Npgsql.Internal.Converters.LineConverter : PgBufferedConverter`1<NpgsqlLine> {
    public virtual bool CanConvert(DataFormat format, BufferRequirements& bufferRequirements);
    protected virtual NpgsqlLine ReadCore(PgReader reader);
    protected virtual void WriteCore(PgWriter writer, NpgsqlLine value);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Npgsql.Internal.Converters.LineSegmentConverter : PgBufferedConverter`1<NpgsqlLSeg> {
    public virtual bool CanConvert(DataFormat format, BufferRequirements& bufferRequirements);
    protected virtual NpgsqlLSeg ReadCore(PgReader reader);
    protected virtual void WriteCore(PgWriter writer, NpgsqlLSeg value);
}
[NullableContextAttribute("1")]
[NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
internal class Npgsql.Internal.Converters.ListBasedArrayConverter`2 : ArrayConverter`1<T> {
    private PgConverter`1<TElement> _elemConverter;
    public ListBasedArrayConverter`2(PgConverterResolution elemResolution, int pgLowerBound);
    private static TElement GetValue(object collection, int index);
    private static void SetValue(object collection, int index, TElement value);
    private sealed virtual override object Npgsql.Internal.Converters.IElementOperations.CreateCollection(Int32[] lengths);
    private sealed virtual override int Npgsql.Internal.Converters.IElementOperations.GetCollectionCount(object collection, Int32[]& lengths);
    private sealed virtual override Nullable`1<Size> Npgsql.Internal.Converters.IElementOperations.GetSizeOrDbNull(SizeContext context, object collection, Int32[] indices, Object& writeState);
    private sealed virtual override ValueTask Npgsql.Internal.Converters.IElementOperations.Read(bool async, PgReader reader, bool isDbNull, object collection, Int32[] indices, CancellationToken cancellationToken);
    private ValueTask ReadAsync(PgStreamingConverter`1<TElement> converter, PgReader reader, object collection, Int32[] indices, CancellationToken cancellationToken);
    private sealed virtual override ValueTask Npgsql.Internal.Converters.IElementOperations.Write(bool async, PgWriter writer, object collection, Int32[] indices, CancellationToken cancellationToken);
    [CompilerGeneratedAttribute]
internal static void <ReadAsync>g__SetResult|8_0(Task task, object collection, Int32[] indices);
}
[NullableContextAttribute("1")]
[NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
internal class Npgsql.Internal.Converters.MacaddrConverter : PgBufferedConverter`1<PhysicalAddress> {
    private bool _macaddr8;
    public MacaddrConverter(bool macaddr8);
    public virtual bool CanConvert(DataFormat format, BufferRequirements& bufferRequirements);
    public virtual Size GetSize(SizeContext context, PhysicalAddress value, Object& writeState);
    protected virtual PhysicalAddress ReadCore(PgReader reader);
    protected virtual void WriteCore(PgWriter writer, PhysicalAddress value);
}
internal class Npgsql.Internal.Converters.MemoryByteaConverter : ByteaConverters`1<Memory`1<byte>> {
    protected virtual Memory`1<byte> ConvertTo(Memory`1<byte> value);
    protected virtual Memory`1<byte> ConvertFrom(Memory`1<byte> value);
}
[NullableContextAttribute("1")]
[NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
internal class Npgsql.Internal.Converters.MoneyConverter`1 : PgBufferedConverter`1<T> {
    public virtual bool CanConvert(DataFormat format, BufferRequirements& bufferRequirements);
    protected virtual T ReadCore(PgReader reader);
    protected virtual void WriteCore(PgWriter writer, T value);
    private static PgMoney ConvertFrom(T value);
    private static T ConvertTo(PgMoney money);
}
[NullableContextAttribute("1")]
[NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
internal class Npgsql.Internal.Converters.MultirangeConverter`2 : PgStreamingConverter`1<T> {
    private PgConverter`1<TRange> _rangeConverter;
    private BufferRequirements _rangeRequirements;
    public MultirangeConverter`2(PgConverter`1<TRange> rangeConverter);
    public virtual T Read(PgReader reader);
    public virtual ValueTask`1<T> ReadAsync(PgReader reader, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Npgsql.Internal.Converters.MultirangeConverter`2/<Read>d__5")]
public ValueTask`1<T> Read(bool async, PgReader reader, CancellationToken cancellationToken);
    public virtual Size GetSize(SizeContext context, T value, Object& writeState);
    public virtual void Write(PgWriter writer, T value);
    public virtual ValueTask WriteAsync(PgWriter writer, T value, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Npgsql.Internal.Converters.MultirangeConverter`2/<Write>d__9")]
private ValueTask Write(bool async, PgWriter writer, T value, CancellationToken cancellationToken);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Npgsql.Internal.Converters.NpgsqlCidrConverter : PgBufferedConverter`1<NpgsqlCidr> {
    public virtual bool CanConvert(DataFormat format, BufferRequirements& bufferRequirements);
    [NullableContextAttribute("2")]
public virtual Size GetSize(SizeContext context, NpgsqlCidr value, Object& writeState);
    protected virtual NpgsqlCidr ReadCore(PgReader reader);
    protected virtual void WriteCore(PgWriter writer, NpgsqlCidr value);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Npgsql.Internal.Converters.NpgsqlInetConverter : PgBufferedConverter`1<NpgsqlInet> {
    private static byte IPv4;
    private static byte IPv6;
    public virtual bool CanConvert(DataFormat format, BufferRequirements& bufferRequirements);
    [NullableContextAttribute("2")]
public virtual Size GetSize(SizeContext context, NpgsqlInet value, Object& writeState);
    internal static Size GetSizeImpl(SizeContext context, IPAddress ipAddress, Object& writeState);
    protected virtual NpgsqlInet ReadCore(PgReader reader);
    internal static ValueTuple`2<IPAddress, byte> ReadImpl(PgReader reader, bool shouldBeCidr);
    protected virtual void WriteCore(PgWriter writer, NpgsqlInet value);
    internal static void WriteImpl(PgWriter writer, ValueTuple`2<IPAddress, byte> value, bool isCidr);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Npgsql.Internal.Converters.NpgsqlIntervalConverter : PgBufferedConverter`1<NpgsqlInterval> {
    public virtual bool CanConvert(DataFormat format, BufferRequirements& bufferRequirements);
    protected virtual NpgsqlInterval ReadCore(PgReader reader);
    protected virtual void WriteCore(PgWriter writer, NpgsqlInterval value);
}
internal class Npgsql.Internal.Converters.NullableConverter`1 : PgConverter`1<Nullable`1<T>> {
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private PgConverter`1<T> _effectiveConverter;
    public NullableConverter`1(PgConverter`1<T> effectiveConverter);
    protected virtual bool IsDbNullValue(Nullable`1<T> value, Object& writeState);
    public virtual bool CanConvert(DataFormat format, BufferRequirements& bufferRequirements);
    public virtual Nullable`1<T> Read(PgReader reader);
    public virtual ValueTask`1<Nullable`1<T>> ReadAsync(PgReader reader, CancellationToken cancellationToken);
    public virtual Size GetSize(SizeContext context, Nullable`1<T> value, Object& writeState);
    public virtual void Write(PgWriter writer, Nullable`1<T> value);
    public virtual ValueTask WriteAsync(PgWriter writer, Nullable`1<T> value, CancellationToken cancellationToken);
    [NullableContextAttribute("1")]
internal virtual ValueTask`1<object> ReadAsObject(bool async, PgReader reader, CancellationToken cancellationToken);
    [NullableContextAttribute("1")]
internal virtual ValueTask WriteAsObject(bool async, PgWriter writer, object value, CancellationToken cancellationToken);
}
internal class Npgsql.Internal.Converters.NullableConverterResolver`1 : PgComposingConverterResolver`1<Nullable`1<T>> {
    [NullableContextAttribute("1")]
public NullableConverterResolver`1(PgResolverTypeInfo effectiveTypeInfo);
    protected virtual PgTypeId GetEffectivePgTypeId(PgTypeId pgTypeId);
    protected virtual PgTypeId GetPgTypeId(PgTypeId effectivePgTypeId);
    protected virtual PgConverter`1<Nullable`1<T>> CreateConverter(PgConverterResolution effectiveResolution);
    protected virtual Nullable`1<PgConverterResolution> GetEffectiveResolution(Nullable`1<T> value, Nullable`1<PgTypeId> expectedEffectivePgTypeId);
}
internal static class Npgsql.Internal.Converters.NumericConverter : object {
    public static int DecimalBasedMaxByteCount;
    private static NumericConverter();
    public static Builder Read(PgReader reader, Span`1<short> digits);
    [AsyncStateMachineAttribute("Npgsql.Internal.Converters.NumericConverter/<ReadAsync>d__2")]
public static ValueTask`1<PgNumeric> ReadAsync(PgReader reader, ArraySegment`1<short> digits, CancellationToken cancellationToken);
    [NullableContextAttribute("1")]
public static void Write(PgWriter writer, Builder numeric);
    [NullableContextAttribute("1")]
[AsyncStateMachineAttribute("Npgsql.Internal.Converters.NumericConverter/<WriteAsync>d__4")]
public static ValueTask WriteAsync(PgWriter writer, PgNumeric numeric, CancellationToken cancellationToken);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Npgsql.Internal.Converters.PathConverter : PgStreamingConverter`1<NpgsqlPath> {
    public virtual NpgsqlPath Read(PgReader reader);
    [NullableContextAttribute("0")]
public virtual ValueTask`1<NpgsqlPath> ReadAsync(PgReader reader, CancellationToken cancellationToken);
    [NullableContextAttribute("0")]
[AsyncStateMachineAttribute("Npgsql.Internal.Converters.PathConverter/<Read>d__2")]
private ValueTask`1<NpgsqlPath> Read(bool async, PgReader reader, CancellationToken cancellationToken);
    [NullableContextAttribute("2")]
public virtual Size GetSize(SizeContext context, NpgsqlPath value, Object& writeState);
    public virtual void Write(PgWriter writer, NpgsqlPath value);
    public virtual ValueTask WriteAsync(PgWriter writer, NpgsqlPath value, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Npgsql.Internal.Converters.PathConverter/<Write>d__6")]
private ValueTask Write(bool async, PgWriter writer, NpgsqlPath value, CancellationToken cancellationToken);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[IsReadOnlyAttribute]
internal class Npgsql.Internal.Converters.PgArrayConverter : ValueType {
    internal static string ReadNonNullableCollectionWithNullsExceptionMessage;
    private IElementOperations _elemOps;
    private Nullable`1<int> _expectedDimensions;
    private BufferRequirements _bufferRequirements;
    [CompilerGeneratedAttribute]
private bool <ElemTypeDbNullable>k__BackingField;
    private int _pgLowerBound;
    private PgTypeId _elemTypeId;
    public bool ElemTypeDbNullable { get; }
    public PgArrayConverter(IElementOperations elemOps, bool elemTypeDbNullable, Nullable`1<int> expectedDimensions, BufferRequirements bufferRequirements, PgTypeId elemTypeId, int pgLowerBound);
    [CompilerGeneratedAttribute]
public bool get_ElemTypeDbNullable();
    private bool IsDbNull(object values, Int32[] indices);
    private Size GetElemsSize(object values, ValueTuple`2[] elemStates, Boolean& anyElementState, DataFormat format, int count, Int32[] indices, Int32[] lengths);
    private Size GetFixedElemsSize(Size elemSize, object values, int count, Int32[] indices, Int32[] lengths);
    private int GetFormatSize(int count, int dimensions);
    public Size GetSize(SizeContext context, object values, Object& writeState);
    [AsyncStateMachineAttribute("Npgsql.Internal.Converters.PgArrayConverter/<Read>d__16")]
public ValueTask`1<object> Read(bool async, PgReader reader, CancellationToken cancellationToken);
    private static bool CarryIndices(Int32[] lengths, Int32[] indices);
    [AsyncStateMachineAttribute("Npgsql.Internal.Converters.PgArrayConverter/<Write>d__18")]
public ValueTask Write(bool async, PgWriter writer, object values, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Npgsql.Internal.Converters.PgArrayConverter/<AwaitTask>d__19")]
[AsyncMethodBuilderAttribute("System.Runtime.CompilerServices.PoolingAsyncValueTaskMethodBuilder")]
public static ValueTask AwaitTask(Task task, Continuation continuation, object collection, Int32[] indices);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Npgsql.Internal.Converters.PgLsnConverter : PgBufferedConverter`1<NpgsqlLogSequenceNumber> {
    public virtual bool CanConvert(DataFormat format, BufferRequirements& bufferRequirements);
    protected virtual NpgsqlLogSequenceNumber ReadCore(PgReader reader);
    protected virtual void WriteCore(PgWriter writer, NpgsqlLogSequenceNumber value);
}
[IsReadOnlyAttribute]
internal class Npgsql.Internal.Converters.PgMoney : ValueType {
    private static int DecimalBits;
    private static int MoneyScale;
    private long _value;
    public PgMoney(long value);
    public PgMoney(decimal value);
    public long GetValue();
    public decimal ToDecimal();
    private static void GetDecimalBits(decimal value, Span`1<UInt32> destination, Int16& scale);
}
[IsReadOnlyAttribute]
internal class Npgsql.Internal.Converters.PgNumeric : ValueType {
    private static int StructureByteCount;
    private static int DecimalBits;
    private static int StackAllocByteThreshold;
    private ushort _sign;
    [CompilerGeneratedAttribute]
private ArraySegment`1<short> <Digits>k__BackingField;
    [CompilerGeneratedAttribute]
private short <Weight>k__BackingField;
    [CompilerGeneratedAttribute]
private short <Scale>k__BackingField;
    public ArraySegment`1<short> Digits { get; }
    public short Weight { get; }
    public short Sign { get; }
    public short Scale { get; }
    public PgNumeric(ArraySegment`1<short> digits, short weight, short sign, short scale);
    [CompilerGeneratedAttribute]
public ArraySegment`1<short> get_Digits();
    [CompilerGeneratedAttribute]
public short get_Weight();
    public short get_Sign();
    [CompilerGeneratedAttribute]
public short get_Scale();
    public int GetByteCount();
    public static int GetByteCount(int digitCount);
    private static void GetDecimalBits(decimal value, Span`1<UInt32> destination, Int16& scale);
    public static int GetDigitCount(decimal value);
    public static int GetDigitCount(BigInteger value);
    public decimal ToDecimal();
    public BigInteger ToBigInteger();
}
internal static class Npgsql.Internal.Converters.PgTimestamp : object {
    private static long PostgresTimestampOffsetTicks;
    internal static long Encode(DateTime value, bool dateTimeInfinityConversions);
    internal static DateTime Decode(long value, DateTimeKind kind, bool dateTimeInfinityConversions);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Npgsql.Internal.Converters.PointConverter : PgBufferedConverter`1<NpgsqlPoint> {
    public virtual bool CanConvert(DataFormat format, BufferRequirements& bufferRequirements);
    protected virtual NpgsqlPoint ReadCore(PgReader reader);
    protected virtual void WriteCore(PgWriter writer, NpgsqlPoint value);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Npgsql.Internal.Converters.PolygonConverter : PgStreamingConverter`1<NpgsqlPolygon> {
    public virtual NpgsqlPolygon Read(PgReader reader);
    [NullableContextAttribute("0")]
public virtual ValueTask`1<NpgsqlPolygon> ReadAsync(PgReader reader, CancellationToken cancellationToken);
    [NullableContextAttribute("0")]
[AsyncStateMachineAttribute("Npgsql.Internal.Converters.PolygonConverter/<Read>d__2")]
private ValueTask`1<NpgsqlPolygon> Read(bool async, PgReader reader, CancellationToken cancellationToken);
    [NullableContextAttribute("2")]
public virtual Size GetSize(SizeContext context, NpgsqlPolygon value, Object& writeState);
    public virtual void Write(PgWriter writer, NpgsqlPolygon value);
    public virtual ValueTask WriteAsync(PgWriter writer, NpgsqlPolygon value, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Npgsql.Internal.Converters.PolygonConverter/<Write>d__6")]
private ValueTask Write(bool async, PgWriter writer, NpgsqlPolygon value, CancellationToken cancellationToken);
}
[NullableContextAttribute("1")]
[NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
internal class Npgsql.Internal.Converters.PolymorphicArrayConverter`1 : PgStreamingConverter`1<TBase> {
    private PgConverter`1<TBase> _structElementCollectionConverter;
    private PgConverter`1<TBase> _nullableElementCollectionConverter;
    public PolymorphicArrayConverter`1(PgConverter`1<TBase> structElementCollectionConverter, PgConverter`1<TBase> nullableElementCollectionConverter);
    public virtual bool CanConvert(DataFormat format, BufferRequirements& bufferRequirements);
    public virtual TBase Read(PgReader reader);
    public virtual ValueTask`1<TBase> ReadAsync(PgReader reader, CancellationToken cancellationToken);
    public virtual Size GetSize(SizeContext context, TBase value, Object& writeState);
    public virtual void Write(PgWriter writer, TBase value);
    public virtual ValueTask WriteAsync(PgWriter writer, TBase value, CancellationToken cancellationToken);
}
[NullableContextAttribute("1")]
[NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
internal class Npgsql.Internal.Converters.PolymorphicArrayConverterResolver`1 : PolymorphicConverterResolver`1<TBase> {
    private PgResolverTypeInfo _effectiveInfo;
    private PgResolverTypeInfo _effectiveNullableInfo;
    private ConcurrentDictionary`2<PgConverter, PgConverter> _converterCache;
    public PolymorphicArrayConverterResolver`1(PgResolverTypeInfo effectiveInfo, PgResolverTypeInfo effectiveNullableInfo);
    protected virtual PgConverter Get(Nullable`1<Field> maybeField);
}
[NullableContextAttribute("2")]
[NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
internal class Npgsql.Internal.Converters.PolymorphicBitStringConverterResolver : PolymorphicConverterResolver`1<object> {
    private BoolBitStringConverter _boolConverter;
    private BitArrayBitStringConverter _bitArrayConverter;
    public PolymorphicBitStringConverterResolver(PgTypeId bitString);
    [NullableContextAttribute("1")]
protected virtual PgConverter Get(Nullable`1<Field> field);
}
[NullableContextAttribute("2")]
[NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
internal abstract class Npgsql.Internal.Converters.PolymorphicConverterResolver`1 : PgConverterResolver`1<TBase> {
    [CompilerGeneratedAttribute]
private PgTypeId <PgTypeId>k__BackingField;
    protected PgTypeId PgTypeId { get; }
    protected PolymorphicConverterResolver`1(PgTypeId pgTypeId);
    [CompilerGeneratedAttribute]
protected PgTypeId get_PgTypeId();
    [NullableContextAttribute("1")]
protected abstract virtual PgConverter Get(Nullable`1<Field> field);
    public sealed virtual PgConverterResolution GetDefault(Nullable`1<PgTypeId> pgTypeId);
    public sealed virtual Nullable`1<PgConverterResolution> Get(TBase value, Nullable`1<PgTypeId> expectedPgTypeId);
    public sealed virtual PgConverterResolution Get(Field field);
}
[NullableContextAttribute("1")]
[NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
internal class Npgsql.Internal.Converters.RangeConverter`1 : PgStreamingConverter`1<NpgsqlRange`1<TSubtype>> {
    private PgConverter`1<TSubtype> _subtypeConverter;
    private BufferRequirements _subtypeRequirements;
    public RangeConverter`1(PgConverter`1<TSubtype> subtypeConverter);
    public virtual NpgsqlRange`1<TSubtype> Read(PgReader reader);
    public virtual ValueTask`1<NpgsqlRange`1<TSubtype>> ReadAsync(PgReader reader, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Npgsql.Internal.Converters.RangeConverter`1/<Read>d__5")]
private ValueTask`1<NpgsqlRange`1<TSubtype>> Read(bool async, PgReader reader, CancellationToken cancellationToken);
    [NullableContextAttribute("2")]
public virtual Size GetSize(SizeContext context, NpgsqlRange`1<TSubtype> value, Object& writeState);
    public virtual void Write(PgWriter writer, NpgsqlRange`1<TSubtype> value);
    public virtual ValueTask WriteAsync(PgWriter writer, NpgsqlRange`1<TSubtype> value, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Npgsql.Internal.Converters.RangeConverter`1/<Write>d__9")]
private ValueTask Write(bool async, PgWriter writer, NpgsqlRange`1<TSubtype> value, CancellationToken cancellationToken);
}
internal class Npgsql.Internal.Converters.ReadOnlyMemoryByteaConverter : ByteaConverters`1<ReadOnlyMemory`1<byte>> {
    protected virtual Memory`1<byte> ConvertTo(ReadOnlyMemory`1<byte> value);
    protected virtual ReadOnlyMemory`1<byte> ConvertFrom(Memory`1<byte> value);
}
internal class Npgsql.Internal.Converters.ReadOnlyMemoryTextConverter : StringBasedTextConverter`1<ReadOnlyMemory`1<char>> {
    [NullableContextAttribute("1")]
public ReadOnlyMemoryTextConverter(Encoding encoding);
    protected virtual ReadOnlyMemory`1<char> ConvertTo(ReadOnlyMemory`1<char> value);
    protected virtual ReadOnlyMemory`1<char> ConvertFrom(string value);
}
[NullableContextAttribute("1")]
[NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
internal class Npgsql.Internal.Converters.RealConverter`1 : PgBufferedConverter`1<T> {
    public virtual bool CanConvert(DataFormat format, BufferRequirements& bufferRequirements);
    protected virtual T ReadCore(PgReader reader);
    protected virtual void WriteCore(PgWriter writer, T value);
}
[NullableContextAttribute("1")]
[NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
internal class Npgsql.Internal.Converters.RecordConverter`1 : PgStreamingConverter`1<T> {
    private PgSerializerOptions _options;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private Func`2<Object[], T> _factory;
    public RecordConverter`1(PgSerializerOptions options, Func`2<Object[], T> factory);
    public virtual T Read(PgReader reader);
    public virtual ValueTask`1<T> ReadAsync(PgReader reader, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Npgsql.Internal.Converters.RecordConverter`1/<Read>d__5")]
private ValueTask`1<T> Read(bool async, PgReader reader, CancellationToken cancellationToken);
    public virtual Size GetSize(SizeContext context, T value, Object& writeState);
    public virtual void Write(PgWriter writer, T value);
    public virtual ValueTask WriteAsync(PgWriter writer, T value, CancellationToken cancellationToken);
}
[NullableContextAttribute("1")]
[NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
internal class Npgsql.Internal.Converters.StreamByteaConverter : PgStreamingConverter`1<Stream> {
    public virtual Stream Read(PgReader reader);
    public virtual ValueTask`1<Stream> ReadAsync(PgReader reader, CancellationToken cancellationToken);
    public virtual Size GetSize(SizeContext context, Stream value, Object& writeState);
    public virtual void Write(PgWriter writer, Stream value);
    public virtual ValueTask WriteAsync(PgWriter writer, Stream value, CancellationToken cancellationToken);
}
[NullableContextAttribute("1")]
[NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
internal abstract class Npgsql.Internal.Converters.StringBasedTextConverter`1 : PgStreamingConverter`1<T> {
    private Encoding _encoding;
    protected StringBasedTextConverter`1(Encoding encoding);
    public virtual T Read(PgReader reader);
    public virtual ValueTask`1<T> ReadAsync(PgReader reader, CancellationToken cancellationToken);
    public virtual Size GetSize(SizeContext context, T value, Object& writeState);
    public virtual void Write(PgWriter writer, T value);
    public virtual ValueTask WriteAsync(PgWriter writer, T value, CancellationToken cancellationToken);
    public virtual bool CanConvert(DataFormat format, BufferRequirements& bufferRequirements);
    [NullableContextAttribute("0")]
protected abstract virtual ReadOnlyMemory`1<char> ConvertTo(T value);
    protected abstract virtual T ConvertFrom(string value);
    private ValueTask`1<T> Read(bool async, PgReader reader, Encoding encoding, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Npgsql.Internal.Converters.StringBasedTextConverter`1/<<Read>g__ReadAsync|10_0>d")]
[CompilerGeneratedAttribute]
[AsyncMethodBuilderAttribute("System.Runtime.CompilerServices.PoolingAsyncValueTaskMethodBuilder`1")]
private ValueTask`1<T> <Read>g__ReadAsync|10_0(PgReader reader, Encoding encoding, CancellationToken cancellationToken);
}
[NullableContextAttribute("1")]
[NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
internal class Npgsql.Internal.Converters.StringBitStringConverter : PgStreamingConverter`1<string> {
    public virtual string Read(PgReader reader);
    public virtual ValueTask`1<string> ReadAsync(PgReader reader, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Npgsql.Internal.Converters.StringBitStringConverter/<Read>d__2")]
private ValueTask`1<string> Read(bool async, PgReader reader, CancellationToken cancellationToken);
    public virtual Size GetSize(SizeContext context, string value, Object& writeState);
    public virtual void Write(PgWriter writer, string value);
    public virtual ValueTask WriteAsync(PgWriter writer, string value, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Npgsql.Internal.Converters.StringBitStringConverter/<Write>d__6")]
private ValueTask Write(bool async, PgWriter writer, string value, CancellationToken cancellationToken);
}
[NullableContextAttribute("1")]
[NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
internal class Npgsql.Internal.Converters.StringTextConverter : StringBasedTextConverter`1<string> {
    public StringTextConverter(Encoding encoding);
    [NullableContextAttribute("0")]
protected virtual ReadOnlyMemory`1<char> ConvertTo(string value);
    protected virtual string ConvertFrom(string value);
}
internal static class Npgsql.Internal.Converters.TextConverter : object {
    public static Size GetSize(SizeContext& context, ReadOnlyMemory`1<char> value, Encoding encoding);
    [NullableContextAttribute("1")]
public static Char[] GetChars(Encoding encoding, ReadOnlySequence`1<byte> bytes);
}
[NullableContextAttribute("1")]
[NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
internal class Npgsql.Internal.Converters.TextReaderTextConverter : PgStreamingConverter`1<TextReader> {
    private Encoding _encoding;
    public TextReaderTextConverter(Encoding encoding);
    public virtual bool CanConvert(DataFormat format, BufferRequirements& bufferRequirements);
    public virtual TextReader Read(PgReader reader);
    public virtual ValueTask`1<TextReader> ReadAsync(PgReader reader, CancellationToken cancellationToken);
    public virtual Size GetSize(SizeContext context, TextReader value, Object& writeState);
    public virtual void Write(PgWriter writer, TextReader value);
    public virtual ValueTask WriteAsync(PgWriter writer, TextReader value, CancellationToken cancellationToken);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Npgsql.Internal.Converters.TidConverter : PgBufferedConverter`1<NpgsqlTid> {
    public virtual bool CanConvert(DataFormat format, BufferRequirements& bufferRequirements);
    protected virtual NpgsqlTid ReadCore(PgReader reader);
    protected virtual void WriteCore(PgWriter writer, NpgsqlTid value);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Npgsql.Internal.Converters.TimeOnlyTimeConverter : PgBufferedConverter`1<TimeOnly> {
    public virtual bool CanConvert(DataFormat format, BufferRequirements& bufferRequirements);
    protected virtual TimeOnly ReadCore(PgReader reader);
    protected virtual void WriteCore(PgWriter writer, TimeOnly value);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Npgsql.Internal.Converters.TimeSpanIntervalConverter : PgBufferedConverter`1<TimeSpan> {
    public virtual bool CanConvert(DataFormat format, BufferRequirements& bufferRequirements);
    protected virtual TimeSpan ReadCore(PgReader reader);
    protected virtual void WriteCore(PgWriter writer, TimeSpan value);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Npgsql.Internal.Converters.TimeSpanTimeConverter : PgBufferedConverter`1<TimeSpan> {
    public virtual bool CanConvert(DataFormat format, BufferRequirements& bufferRequirements);
    protected virtual TimeSpan ReadCore(PgReader reader);
    protected virtual void WriteCore(PgWriter writer, TimeSpan value);
}
[NullableContextAttribute("1")]
[NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
internal class Npgsql.Internal.Converters.TsQueryConverter`1 : PgStreamingConverter`1<T> {
    private Encoding _encoding;
    public TsQueryConverter`1(Encoding encoding);
    public virtual T Read(PgReader reader);
    [AsyncStateMachineAttribute("Npgsql.Internal.Converters.TsQueryConverter`1/<ReadAsync>d__3")]
public virtual ValueTask`1<T> ReadAsync(PgReader reader, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Npgsql.Internal.Converters.TsQueryConverter`1/<Read>d__4")]
private ValueTask`1<NpgsqlTsQuery> Read(bool async, PgReader reader, CancellationToken cancellationToken);
    public virtual Size GetSize(SizeContext context, T value, Object& writeState);
    private int GetNodeLength(NpgsqlTsQuery node);
    public virtual void Write(PgWriter writer, T value);
    public virtual ValueTask WriteAsync(PgWriter writer, T value, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Npgsql.Internal.Converters.TsQueryConverter`1/<Write>d__9")]
private ValueTask Write(bool async, PgWriter writer, NpgsqlTsQuery value, CancellationToken cancellationToken);
    private int GetTokenCount(NpgsqlTsQuery node);
    [CompilerGeneratedAttribute]
internal static void <Read>g__InsertInTree|4_0(NpgsqlTsQuery node, Stack`1<ValueTuple`2<NpgsqlTsQuery, int>> nodes, NpgsqlTsQuery& value);
}
[NullableContextAttribute("1")]
[NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
internal class Npgsql.Internal.Converters.TsVectorConverter : PgStreamingConverter`1<NpgsqlTsVector> {
    private Encoding _encoding;
    public TsVectorConverter(Encoding encoding);
    public virtual NpgsqlTsVector Read(PgReader reader);
    public virtual ValueTask`1<NpgsqlTsVector> ReadAsync(PgReader reader, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Npgsql.Internal.Converters.TsVectorConverter/<Read>d__4")]
private ValueTask`1<NpgsqlTsVector> Read(bool async, PgReader reader, CancellationToken cancellationToken);
    public virtual Size GetSize(SizeContext context, NpgsqlTsVector value, Object& writeState);
    public virtual void Write(PgWriter writer, NpgsqlTsVector value);
    public virtual ValueTask WriteAsync(PgWriter writer, NpgsqlTsVector value, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Npgsql.Internal.Converters.TsVectorConverter/<Write>d__8")]
private ValueTask Write(bool async, PgWriter writer, NpgsqlTsVector value, CancellationToken cancellationToken);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Npgsql.Internal.Converters.UInt32Converter : PgBufferedConverter`1<UInt32> {
    public virtual bool CanConvert(DataFormat format, BufferRequirements& bufferRequirements);
    protected virtual UInt32 ReadCore(PgReader reader);
    protected virtual void WriteCore(PgWriter writer, UInt32 value);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Npgsql.Internal.Converters.UInt64Converter : PgBufferedConverter`1<ulong> {
    public virtual bool CanConvert(DataFormat format, BufferRequirements& bufferRequirements);
    protected virtual ulong ReadCore(PgReader reader);
    protected virtual void WriteCore(PgWriter writer, ulong value);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal static class Npgsql.Internal.Converters.VersionPrefixedTextConverter : object {
    [AsyncStateMachineAttribute("Npgsql.Internal.Converters.VersionPrefixedTextConverter/<WriteVersion>d__0")]
public static ValueTask WriteVersion(bool async, byte version, PgWriter writer, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Npgsql.Internal.Converters.VersionPrefixedTextConverter/<ReadVersion>d__1")]
public static ValueTask ReadVersion(bool async, byte expectedVersion, PgReader reader, Size textConverterReadRequirement, CancellationToken cancellationToken);
    public static bool CanConvert(PgConverter textConverter, DataFormat format, BufferRequirements& textConverterRequirements, BufferRequirements& bufferRequirements);
}
[NullableContextAttribute("1")]
[NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
internal class Npgsql.Internal.Converters.VersionPrefixedTextConverter`1 : PgStreamingConverter`1<T> {
    private byte _versionPrefix;
    private PgConverter`1<T> _textConverter;
    private BufferRequirements _innerRequirements;
    public VersionPrefixedTextConverter`1(byte versionPrefix, PgConverter`1<T> textConverter);
    [NullableContextAttribute("2")]
protected virtual bool IsDbNullValue(T value, Object& writeState);
    public virtual bool CanConvert(DataFormat format, BufferRequirements& bufferRequirements);
    public virtual T Read(PgReader reader);
    public virtual ValueTask`1<T> ReadAsync(PgReader reader, CancellationToken cancellationToken);
    public virtual Size GetSize(SizeContext context, T value, Object& writeState);
    public virtual void Write(PgWriter writer, T value);
    public virtual ValueTask WriteAsync(PgWriter writer, T value, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Npgsql.Internal.Converters.VersionPrefixedTextConverter`1/<Read>d__11")]
private ValueTask`1<T> Read(bool async, PgReader reader, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Npgsql.Internal.Converters.VersionPrefixedTextConverter`1/<Write>d__12")]
private ValueTask Write(bool async, PgWriter writer, T value, CancellationToken cancellationToken);
}
[ExperimentalAttribute("NPG9001")]
public enum Npgsql.Internal.DataFormat : Enum {
    public byte value__;
    public static DataFormat Binary;
    public static DataFormat Text;
}
[ExtensionAttribute]
internal static class Npgsql.Internal.DataFormatUtils : object {
    public static DataFormat Create(short formatCode);
    [ExtensionAttribute]
public static short ToFormatCode(DataFormat dataFormat);
}
internal enum Npgsql.Internal.DataRowLoadingMode : Enum {
    public int value__;
    public static DataRowLoadingMode NonSequential;
    public static DataRowLoadingMode Sequential;
    public static DataRowLoadingMode Skip;
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ExperimentalAttribute("NPG9001")]
[RequiresDynamicCodeAttribute("A dynamic type info resolver may need to construct a generic converter for a statically unknown type.")]
public abstract class Npgsql.Internal.DynamicTypeInfoResolver : object {
    [NullableContextAttribute("2")]
public sealed virtual PgTypeInfo GetTypeInfo(Type type, Nullable`1<DataTypeName> dataTypeName, PgSerializerOptions options);
    protected static DynamicMappingCollection CreateCollection(TypeInfoMappingCollection baseCollection);
    protected static bool IsTypeOrNullableOfType(Type type, Func`2<Type, bool> predicate, Type& matchedType);
    protected static bool IsArrayLikeType(Type type, Type& elementType);
    protected static bool IsArrayDataTypeName(DataTypeName dataTypeName, PgSerializerOptions options, DataTypeName& elementDataTypeName);
    [NullableContextAttribute("2")]
protected abstract virtual DynamicMappingCollection GetMappings(Type type, DataTypeName dataTypeName, PgSerializerOptions options);
}
internal enum Npgsql.Internal.FlushMode : Enum {
    public int value__;
    public static FlushMode None;
    public static FlushMode Blocking;
    public static FlushMode NonBlocking;
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ExperimentalAttribute("NPG9001")]
public class Npgsql.Internal.HackyEnumTypeMapping : object {
    [CompilerGeneratedAttribute]
private string <PgTypeName>k__BackingField;
    [CompilerGeneratedAttribute]
private Type <EnumClrType>k__BackingField;
    [CompilerGeneratedAttribute]
private INpgsqlNameTranslator <NameTranslator>k__BackingField;
    public string PgTypeName { get; }
    public Type EnumClrType { get; }
    public INpgsqlNameTranslator NameTranslator { get; }
    public HackyEnumTypeMapping(Type enumClrType, string pgTypeName, INpgsqlNameTranslator nameTranslator);
    [CompilerGeneratedAttribute]
public string get_PgTypeName();
    [CompilerGeneratedAttribute]
public Type get_EnumClrType();
    [CompilerGeneratedAttribute]
public INpgsqlNameTranslator get_NameTranslator();
}
[NullableContextAttribute("1")]
[ExperimentalAttribute("NPG9001")]
public interface Npgsql.Internal.INpgsqlDatabaseInfoFactory {
    public abstract virtual Task`1<NpgsqlDatabaseInfo> Load(NpgsqlConnector conn, NpgsqlTimeout timeout, bool async);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Npgsql.Internal.IntegratedSecurityHandler : object {
    public bool IsSupported { get; }
    public virtual bool get_IsSupported();
    public virtual ValueTask`1<string> GetUsername(bool async, bool includeRealm, ILogger connectionLogger, CancellationToken cancellationToken);
    public virtual ValueTask NegotiateAuthentication(bool async, NpgsqlConnector connector);
}
[NullableContextAttribute("2")]
[ExperimentalAttribute("NPG9001")]
public interface Npgsql.Internal.IPgTypeInfoResolver {
    public abstract virtual PgTypeInfo GetTypeInfo(Type type, Nullable`1<DataTypeName> dataTypeName, PgSerializerOptions options);
}
[NullableContextAttribute("2")]
internal interface Npgsql.Internal.IStreamingWriter`1 {
    public abstract virtual void Flush(TimeSpan timeout);
    public abstract virtual ValueTask FlushAsync(CancellationToken cancellationToken);
}
[ExperimentalAttribute("NPG9001")]
public enum Npgsql.Internal.MatchRequirement : Enum {
    public int value__;
    public static MatchRequirement All;
    public static MatchRequirement Single;
    public static MatchRequirement DataTypeName;
}
[RequiredMemberAttribute]
internal class Npgsql.Internal.MultiWriteState : object {
    [TupleElementNamesAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[CompilerGeneratedAttribute]
private ArrayPool`1<ValueTuple`2<Size, object>> <ArrayPool>k__BackingField;
    [TupleElementNamesAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[CompilerGeneratedAttribute]
private ArraySegment`1<ValueTuple`2<Size, object>> <Data>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <AnyWriteState>k__BackingField;
    [TupleElementNamesAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[RequiredMemberAttribute]
public ArrayPool`1<ValueTuple`2<Size, object>> ArrayPool { get; public set; }
    [TupleElementNamesAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[RequiredMemberAttribute]
public ArraySegment`1<ValueTuple`2<Size, object>> Data { get; public set; }
    [RequiredMemberAttribute]
public bool AnyWriteState { get; public set; }
    [CompilerGeneratedAttribute]
public ArrayPool`1<ValueTuple`2<Size, object>> get_ArrayPool();
    [CompilerGeneratedAttribute]
public Void modreq(System.Runtime.CompilerServices.IsExternalInit) set_ArrayPool(ArrayPool`1<ValueTuple`2<Size, object>> value);
    [CompilerGeneratedAttribute]
public ArraySegment`1<ValueTuple`2<Size, object>> get_Data();
    [CompilerGeneratedAttribute]
public Void modreq(System.Runtime.CompilerServices.IsExternalInit) set_Data(ArraySegment`1<ValueTuple`2<Size, object>> value);
    [CompilerGeneratedAttribute]
public bool get_AnyWriteState();
    [CompilerGeneratedAttribute]
public Void modreq(System.Runtime.CompilerServices.IsExternalInit) set_AnyWriteState(bool value);
    public sealed virtual void Dispose();
}
[IsReadOnlyAttribute]
public class Npgsql.Internal.NestedReadScope : ValueType {
    [NullableAttribute("1")]
private PgReader _reader;
    private int _previousSize;
    private int _previousStartPos;
    private Size _previousBufferRequirement;
    private bool _async;
    [NullableContextAttribute("1")]
internal NestedReadScope(bool async, PgReader reader, int previousSize, int previousStartPos, Size previousBufferRequirement);
    public sealed virtual void Dispose();
    public sealed virtual ValueTask DisposeAsync();
    [NullableContextAttribute("1")]
[AsyncStateMachineAttribute("Npgsql.Internal.NestedReadScope/<<DisposeAsync>g__AsyncCore|7_0>d")]
[CompilerGeneratedAttribute]
internal static ValueTask <DisposeAsync>g__AsyncCore|7_0(PgReader reader, int previousSize, int previousStartPos, Size previousBufferRequirement);
}
[ExperimentalAttribute("NPG9001")]
public class Npgsql.Internal.NestedWriteScope : ValueType {
    public sealed virtual void Dispose();
}
internal class Npgsql.Internal.NpgsqlBufferWriter : object {
    [NullableAttribute("1")]
private NpgsqlWriteBuffer _buffer;
    private Nullable`1<int> _lastBufferSize;
    [NullableContextAttribute("1")]
public NpgsqlBufferWriter(NpgsqlWriteBuffer buffer);
    public sealed virtual void Advance(int count);
    public sealed virtual Memory`1<byte> GetMemory(int sizeHint);
    public sealed virtual Span`1<byte> GetSpan(int sizeHint);
    private static void ThrowOutOfMemoryException();
    public sealed virtual void Flush(TimeSpan timeout);
    public sealed virtual ValueTask FlushAsync(CancellationToken cancellationToken);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ExperimentalAttribute("NPG9001")]
public class Npgsql.Internal.NpgsqlConnector : object {
    private Socket _socket;
    private NetworkStream _baseStream;
    private Stream _stream;
    [CompilerGeneratedAttribute]
private NpgsqlConnectionStringBuilder <Settings>k__BackingField;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[CompilerGeneratedAttribute]
private Action`1<X509CertificateCollection> <ClientCertificatesCallback>k__BackingField;
    [NullableAttribute("2")]
[CompilerGeneratedAttribute]
private RemoteCertificateValidationCallback <UserCertificateValidationCallback>k__BackingField;
    [NullableAttribute("2")]
[CompilerGeneratedAttribute]
private ProvidePasswordCallback <ProvidePasswordCallback>k__BackingField;
    [CompilerGeneratedAttribute]
private Encoding <TextEncoding>k__BackingField;
    [CompilerGeneratedAttribute]
private Encoding <RelaxedTextEncoding>k__BackingField;
    [CompilerGeneratedAttribute]
private NpgsqlReadBuffer <ReadBuffer>k__BackingField;
    [NullableAttribute("2")]
private NpgsqlReadBuffer _origReadBuffer;
    [CompilerGeneratedAttribute]
private NpgsqlWriteBuffer <WriteBuffer>k__BackingField;
    private int _backendSecretKey;
    [CompilerGeneratedAttribute]
private int <BackendProcessId>k__BackingField;
    [NullableAttribute("2")]
private string _inferredUserName;
    [CompilerGeneratedAttribute]
private PgSerializerOptions <SerializerOptions>k__BackingField;
    [CompilerGeneratedAttribute]
private NpgsqlDatabaseInfo <DatabaseInfo>k__BackingField;
    [CompilerGeneratedAttribute]
private TransactionStatus <TransactionStatus>k__BackingField;
    [NullableAttribute("2")]
[CompilerGeneratedAttribute]
private NpgsqlTransaction <Transaction>k__BackingField;
    [NullableAttribute("2")]
[CompilerGeneratedAttribute]
private NpgsqlTransaction <UnboundTransaction>k__BackingField;
    [NullableAttribute("2")]
[CompilerGeneratedAttribute]
private NpgsqlConnection <Connection>k__BackingField;
    [CompilerGeneratedAttribute]
private int <PendingPrependedResponses>k__BackingField;
    private ManualResetEventSlim ReadingPrependedMessagesMRE;
    [NullableAttribute("2")]
internal NpgsqlDataReader CurrentReader;
    [CompilerGeneratedAttribute]
private PreparedStatementManager <PreparedStatementManager>k__BackingField;
    [CompilerGeneratedAttribute]
private SqlQueryParser <SqlQueryParser>k__BackingField;
    [NullableAttribute("2")]
internal ICancelable CurrentCopyOperation;
    [CompilerGeneratedAttribute]
private Dictionary`2<string, string> <PostgresParameters>k__BackingField;
    [TupleElementNamesAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private List`1<ValueTuple`2<Byte[], Byte[]>> _rawParameters;
    [NullableAttribute("2")]
private Exception modreq(System.Runtime.CompilerServices.IsVolatile) _breakReason;
    [CompilerGeneratedAttribute]
private bool <LongRunningConnection>k__BackingField;
    internal Int32 modreq(System.Runtime.CompilerServices.IsVolatile) MultiplexAsyncWritingLock;
    [CompilerGeneratedAttribute]
private object <CancelLock>k__BackingField;
    [CompilerGeneratedAttribute]
private object <SyncObj>k__BackingField;
    [CompilerGeneratedAttribute]
private object <CleanupLock>k__BackingField;
    private bool _isKeepAliveEnabled;
    [NullableAttribute("2")]
private Timer _keepAliveTimer;
    [NullableAttribute("2")]
private NpgsqlCommand _currentCommand;
    private bool _sendResetOnClose;
    [CompilerGeneratedAttribute]
private NpgsqlDataSource <DataSource>k__BackingField;
    [CompilerGeneratedAttribute]
private DateTime <OpenTimestamp>k__BackingField;
    [CompilerGeneratedAttribute]
private int <ClearCounter>k__BackingField;
    private Boolean modreq(System.Runtime.CompilerServices.IsVolatile) _postgresCancellationPerformed;
    private Boolean modreq(System.Runtime.CompilerServices.IsVolatile) _userCancellationRequested;
    private CancellationTokenRegistration _cancellationTokenRegistration;
    [CompilerGeneratedAttribute]
private CancellationToken <UserCancellationToken>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <AttemptPostgresCancellation>k__BackingField;
    private static TimeSpan _cancelImmediatelyTimeout;
    [NullableAttribute("2")]
private IDisposable _certificate;
    [CompilerGeneratedAttribute]
private NpgsqlLoggingConfiguration <LoggingConfiguration>k__BackingField;
    [CompilerGeneratedAttribute]
private ILogger <ConnectionLogger>k__BackingField;
    [CompilerGeneratedAttribute]
private ILogger <CommandLogger>k__BackingField;
    [CompilerGeneratedAttribute]
private ILogger <TransactionLogger>k__BackingField;
    [CompilerGeneratedAttribute]
private ILogger <CopyLogger>k__BackingField;
    internal Stopwatch QueryLogStopWatch;
    [NullableAttribute("2")]
[CompilerGeneratedAttribute]
private EndPoint <ConnectedEndPoint>k__BackingField;
    internal static int MinimumInternalCommandTimeout;
    [NullableAttribute("2")]
private Byte[] _resetWithoutDeallocateMessage;
    private int _resetWithoutDeallocateResponseCount;
    private CommandCompleteMessage _commandCompleteMessage;
    private ReadyForQueryMessage _readyForQueryMessage;
    private ParameterDescriptionMessage _parameterDescriptionMessage;
    private DataRowMessage _dataRowMessage;
    private RowDescriptionMessage _rowDescriptionMessage;
    [NullableAttribute("2")]
private CopyInResponseMessage _copyInResponseMessage;
    [NullableAttribute("2")]
private CopyOutResponseMessage _copyOutResponseMessage;
    [NullableAttribute("2")]
private CopyDataMessage _copyDataMessage;
    [NullableAttribute("2")]
private CopyBothResponseMessage _copyBothResponseMessage;
    [CompilerGeneratedAttribute]
private NpgsqlDataReader <DataReader>k__BackingField;
    [NullableAttribute("2")]
[CompilerGeneratedAttribute]
private NpgsqlDataReader <UnboundDataReader>k__BackingField;
    private int _state;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private ChannelReader`1<NpgsqlCommand> CommandsInFlightReader;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
internal ChannelWriter`1<NpgsqlCommand> CommandsInFlightWriter;
    internal Int32 modreq(System.Runtime.CompilerServices.IsVolatile) CommandsInFlightCount;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[CompilerGeneratedAttribute]
private ManualResetValueTaskSource`1<object> <ReaderCompleted>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsSecure>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsScram>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsScramPlus>k__BackingField;
    private static RemoteCertificateValidationCallback SslVerifyFullValidation;
    private static RemoteCertificateValidationCallback SslVerifyCAValidation;
    private static RemoteCertificateValidationCallback SslTrustServerValidation;
    [CompilerGeneratedAttribute]
private bool <UseConformingStrings>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Timezone>k__BackingField;
    private Nullable`1<bool> _isTransactionReadOnly;
    private Nullable`1<bool> _isHotStandBy;
    public NpgsqlConnectionStringBuilder Settings { get; }
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private Action`1<X509CertificateCollection> ClientCertificatesCallback { get; }
    [NullableAttribute("2")]
private RemoteCertificateValidationCallback UserCertificateValidationCallback { get; }
    [NullableAttribute("2")]
private ProvidePasswordCallback ProvidePasswordCallback { get; }
    public Encoding TextEncoding { get; private set; }
    internal Encoding RelaxedTextEncoding { get; private set; }
    internal NpgsqlReadBuffer ReadBuffer { get; private set; }
    internal NpgsqlWriteBuffer WriteBuffer { get; private set; }
    internal int BackendProcessId { get; private set; }
    internal string InferredUserName { get; private set; }
    private bool SupportsPostgresCancellation { get; }
    internal int Id { get; }
    internal PgSerializerOptions SerializerOptions { get; internal set; }
    public NpgsqlDatabaseInfo DatabaseInfo { get; internal set; }
    internal TransactionStatus TransactionStatus { get; internal set; }
    [NullableAttribute("2")]
internal NpgsqlTransaction Transaction { get; internal set; }
    [NullableAttribute("2")]
internal NpgsqlTransaction UnboundTransaction { get; internal set; }
    [NullableAttribute("2")]
internal NpgsqlConnection Connection { get; internal set; }
    internal int PendingPrependedResponses { get; internal set; }
    internal PreparedStatementManager PreparedStatementManager { get; }
    internal SqlQueryParser SqlQueryParser { get; }
    internal Dictionary`2<string, string> PostgresParameters { get; }
    internal bool LongRunningConnection { get; internal set; }
    private object CancelLock { get; }
    private object SyncObj { get; }
    private object CleanupLock { get; }
    internal NpgsqlDataSource DataSource { get; }
    internal string UserFacingConnectionString { get; }
    internal DateTime OpenTimestamp { get; private set; }
    internal int ClearCounter { get; internal set; }
    internal bool PostgresCancellationPerformed { get; private set; }
    internal bool UserCancellationRequested { get; }
    internal CancellationToken UserCancellationToken { get; internal set; }
    internal bool AttemptPostgresCancellation { get; private set; }
    internal NpgsqlLoggingConfiguration LoggingConfiguration { get; }
    internal ILogger ConnectionLogger { get; }
    internal ILogger CommandLogger { get; }
    internal ILogger TransactionLogger { get; }
    internal ILogger CopyLogger { get; }
    [NullableAttribute("2")]
internal EndPoint ConnectedEndPoint { get; private set; }
    internal NpgsqlDataReader DataReader { get; internal set; }
    [NullableAttribute("2")]
internal NpgsqlDataReader UnboundDataReader { get; internal set; }
    internal string Host { get; }
    internal int Port { get; }
    internal string Database { get; }
    private string KerberosServiceName { get; }
    private int ConnectionTimeout { get; }
    internal ConnectorState State { get; internal set; }
    private bool IsConnected { get; }
    internal bool IsReady { get; }
    internal bool IsClosed { get; }
    internal bool IsBroken { get; }
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
internal ManualResetValueTaskSource`1<object> ReaderCompleted { get; }
    internal bool InTransaction { get; }
    internal bool IsSecure { get; private set; }
    internal bool IsScram { get; private set; }
    internal bool IsScramPlus { get; private set; }
    internal bool UseConformingStrings { get; private set; }
    internal string Timezone { get; private set; }
    internal NpgsqlConnector(NpgsqlDataSource dataSource, NpgsqlConnection conn);
    private NpgsqlConnector(NpgsqlConnector connector);
    private NpgsqlConnector(NpgsqlDataSource dataSource);
    private static NpgsqlConnector();
    [AsyncStateMachineAttribute("Npgsql.Internal.NpgsqlConnector/<Authenticate>d__0")]
private Task Authenticate(string username, NpgsqlTimeout timeout, bool async, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Npgsql.Internal.NpgsqlConnector/<AuthenticateCleartext>d__1")]
private Task AuthenticateCleartext(string username, bool async, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Npgsql.Internal.NpgsqlConnector/<AuthenticateSASL>d__2")]
private Task AuthenticateSASL(List`1<string> mechanisms, string username, bool async, CancellationToken cancellationToken);
    internal void AuthenticateSASLSha256Plus(String& mechanism, String& cbindFlag, String& cbind, Boolean& successfulBind);
    private static Byte[] Hi(string str, Byte[] salt, int count);
    private static Byte[] Xor(Byte[] buffer1, Byte[] buffer2);
    private static Byte[] HMAC(Byte[] key, string data);
    [AsyncStateMachineAttribute("Npgsql.Internal.NpgsqlConnector/<AuthenticateMD5>d__7")]
private Task AuthenticateMD5(string username, Byte[] salt, bool async, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Npgsql.Internal.NpgsqlConnector/<AuthenticateGSS>d__8")]
internal Task AuthenticateGSS(bool async);
    [AsyncStateMachineAttribute("Npgsql.Internal.NpgsqlConnector/<GetPassword>d__9")]
private ValueTask`1<string> GetPassword(string username, bool async, CancellationToken cancellationToken);
    [CompilerGeneratedAttribute]
public NpgsqlConnectionStringBuilder get_Settings();
    [CompilerGeneratedAttribute]
private Action`1<X509CertificateCollection> get_ClientCertificatesCallback();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
private RemoteCertificateValidationCallback get_UserCertificateValidationCallback();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
private ProvidePasswordCallback get_ProvidePasswordCallback();
    [CompilerGeneratedAttribute]
public Encoding get_TextEncoding();
    [CompilerGeneratedAttribute]
private void set_TextEncoding(Encoding value);
    [CompilerGeneratedAttribute]
internal Encoding get_RelaxedTextEncoding();
    [CompilerGeneratedAttribute]
private void set_RelaxedTextEncoding(Encoding value);
    [CompilerGeneratedAttribute]
internal NpgsqlReadBuffer get_ReadBuffer();
    [CompilerGeneratedAttribute]
private void set_ReadBuffer(NpgsqlReadBuffer value);
    [CompilerGeneratedAttribute]
internal NpgsqlWriteBuffer get_WriteBuffer();
    [CompilerGeneratedAttribute]
private void set_WriteBuffer(NpgsqlWriteBuffer value);
    [CompilerGeneratedAttribute]
internal int get_BackendProcessId();
    [CompilerGeneratedAttribute]
private void set_BackendProcessId(int value);
    internal string get_InferredUserName();
    private void set_InferredUserName(string value);
    private bool get_SupportsPostgresCancellation();
    internal int get_Id();
    [CompilerGeneratedAttribute]
internal PgSerializerOptions get_SerializerOptions();
    [CompilerGeneratedAttribute]
internal void set_SerializerOptions(PgSerializerOptions value);
    [CompilerGeneratedAttribute]
public NpgsqlDatabaseInfo get_DatabaseInfo();
    [CompilerGeneratedAttribute]
internal void set_DatabaseInfo(NpgsqlDatabaseInfo value);
    [CompilerGeneratedAttribute]
internal TransactionStatus get_TransactionStatus();
    [CompilerGeneratedAttribute]
internal void set_TransactionStatus(TransactionStatus value);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
internal NpgsqlTransaction get_Transaction();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
internal void set_Transaction(NpgsqlTransaction value);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
internal NpgsqlTransaction get_UnboundTransaction();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
internal void set_UnboundTransaction(NpgsqlTransaction value);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
internal NpgsqlConnection get_Connection();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
internal void set_Connection(NpgsqlConnection value);
    [CompilerGeneratedAttribute]
internal int get_PendingPrependedResponses();
    [CompilerGeneratedAttribute]
internal void set_PendingPrependedResponses(int value);
    [CompilerGeneratedAttribute]
internal PreparedStatementManager get_PreparedStatementManager();
    [CompilerGeneratedAttribute]
internal SqlQueryParser get_SqlQueryParser();
    [CompilerGeneratedAttribute]
internal Dictionary`2<string, string> get_PostgresParameters();
    [CompilerGeneratedAttribute]
internal bool get_LongRunningConnection();
    [CompilerGeneratedAttribute]
internal void set_LongRunningConnection(bool value);
    internal void FlagAsNotWritableForMultiplexing();
    internal void FlagAsWritableForMultiplexing();
    [CompilerGeneratedAttribute]
private object get_CancelLock();
    [CompilerGeneratedAttribute]
private object get_SyncObj();
    [CompilerGeneratedAttribute]
private object get_CleanupLock();
    [CompilerGeneratedAttribute]
internal NpgsqlDataSource get_DataSource();
    internal string get_UserFacingConnectionString();
    [CompilerGeneratedAttribute]
internal DateTime get_OpenTimestamp();
    [CompilerGeneratedAttribute]
private void set_OpenTimestamp(DateTime value);
    [CompilerGeneratedAttribute]
internal int get_ClearCounter();
    [CompilerGeneratedAttribute]
internal void set_ClearCounter(int value);
    internal bool get_PostgresCancellationPerformed();
    private void set_PostgresCancellationPerformed(bool value);
    internal bool get_UserCancellationRequested();
    [CompilerGeneratedAttribute]
internal CancellationToken get_UserCancellationToken();
    [CompilerGeneratedAttribute]
internal void set_UserCancellationToken(CancellationToken value);
    [CompilerGeneratedAttribute]
internal bool get_AttemptPostgresCancellation();
    [CompilerGeneratedAttribute]
private void set_AttemptPostgresCancellation(bool value);
    [CompilerGeneratedAttribute]
internal NpgsqlLoggingConfiguration get_LoggingConfiguration();
    [CompilerGeneratedAttribute]
internal ILogger get_ConnectionLogger();
    [CompilerGeneratedAttribute]
internal ILogger get_CommandLogger();
    [CompilerGeneratedAttribute]
internal ILogger get_TransactionLogger();
    [CompilerGeneratedAttribute]
internal ILogger get_CopyLogger();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
internal EndPoint get_ConnectedEndPoint();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
private void set_ConnectedEndPoint(EndPoint value);
    [CompilerGeneratedAttribute]
internal NpgsqlDataReader get_DataReader();
    [CompilerGeneratedAttribute]
internal void set_DataReader(NpgsqlDataReader value);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
internal NpgsqlDataReader get_UnboundDataReader();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
internal void set_UnboundDataReader(NpgsqlDataReader value);
    internal string get_Host();
    internal int get_Port();
    internal string get_Database();
    private string get_KerberosServiceName();
    private int get_ConnectionTimeout();
    internal ConnectorState get_State();
    internal void set_State(ConnectorState value);
    private bool get_IsConnected();
    internal bool get_IsReady();
    internal bool get_IsClosed();
    internal bool get_IsBroken();
    [AsyncStateMachineAttribute("Npgsql.Internal.NpgsqlConnector/<Open>d__213")]
internal Task Open(NpgsqlTimeout timeout, bool async, CancellationToken cancellationToken);
    [NullableContextAttribute("0")]
[AsyncStateMachineAttribute("Npgsql.Internal.NpgsqlConnector/<QueryDatabaseState>d__214")]
internal ValueTask`1<DatabaseState> QueryDatabaseState(NpgsqlTimeout timeout, bool async, CancellationToken cancellationToken);
    private void WriteStartupMessage(string username);
    private ValueTask`1<string> GetUsernameAsync(bool async, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Npgsql.Internal.NpgsqlConnector/<RawOpen>d__217")]
private Task RawOpen(SslMode sslMode, NpgsqlTimeout timeout, bool async, CancellationToken cancellationToken, bool isFirstAttempt);
    [AsyncStateMachineAttribute("Npgsql.Internal.NpgsqlConnector/<NegotiateEncryption>d__218")]
internal Task NegotiateEncryption(SslMode sslMode, NpgsqlTimeout timeout, bool async, bool isFirstAttempt);
    private void Connect(NpgsqlTimeout timeout);
    [AsyncStateMachineAttribute("Npgsql.Internal.NpgsqlConnector/<ConnectAsync>d__220")]
private Task ConnectAsync(NpgsqlTimeout timeout, CancellationToken cancellationToken);
    private IPEndPoint[] IPAddressesToEndpoints(IPAddress[] ipAddresses, int port);
    private void SetSocketOptions(Socket socket);
    [CompilerGeneratedAttribute]
internal ManualResetValueTaskSource`1<object> get_ReaderCompleted();
    [AsyncStateMachineAttribute("Npgsql.Internal.NpgsqlConnector/<MultiplexingReadLoop>d__229")]
private Task MultiplexingReadLoop();
    internal void PrependInternalMessage(Byte[] rawMessage, int responseMessageCount);
    internal ValueTask`1<IBackendMessage> ReadMessageWithNotifications(bool async);
    internal ValueTask`1<IBackendMessage> ReadMessage(bool async, DataRowLoadingMode dataRowLoadingMode);
    [AsyncStateMachineAttribute("Npgsql.Internal.NpgsqlConnector/<ReadMessageLong>d__233")]
[AsyncMethodBuilderAttribute("System.Runtime.CompilerServices.PoolingAsyncValueTaskMethodBuilder`1")]
private ValueTask`1<IBackendMessage> ReadMessageLong(bool async, DataRowLoadingMode dataRowLoadingMode, bool readingNotifications, bool isReadingPrependedMessage);
    internal IBackendMessage ParseResultSetMessage(NpgsqlReadBuffer buf, BackendMessageCode code, int len, bool handleCallbacks);
    internal IBackendMessage ParseServerMessage(NpgsqlReadBuffer buf, BackendMessageCode code, int len, bool isPrependedMessage, bool handleCallbacks);
    internal IBackendMessage SkipUntil(BackendMessageCode stopAt);
    internal Task Rollback(bool async, CancellationToken cancellationToken);
    internal bool get_InTransaction();
    private void ProcessNewTransactionStatus(TransactionStatus newStatus);
    [NullableContextAttribute("2")]
internal void ClearTransaction(Exception disposeReason);
    [CompilerGeneratedAttribute]
internal bool get_IsSecure();
    [CompilerGeneratedAttribute]
private void set_IsSecure(bool value);
    [CompilerGeneratedAttribute]
internal bool get_IsScram();
    [CompilerGeneratedAttribute]
private void set_IsScram(bool value);
    [CompilerGeneratedAttribute]
internal bool get_IsScramPlus();
    [CompilerGeneratedAttribute]
private void set_IsScramPlus(bool value);
    [NullableContextAttribute("2")]
private static RemoteCertificateValidationCallback SslRootValidation(bool verifyFull, string certRootPath, X509Certificate2 caCertificate);
    internal void ResetCancellation();
    internal void PerformImmediateUserCancellation();
    private void PerformDelayedUserCancellation();
    private void PerformUserCancellationUnsynchronized();
    internal bool PerformPostgresCancellation();
    private void DoCancelRequest(int backendProcessId, int backendSecretKey);
    internal CancellationTokenRegistration StartCancellableOperation(CancellationToken cancellationToken, bool attemptPgCancellation);
    internal NestedCancellableScope StartNestedCancellableOperation(CancellationToken cancellationToken, bool attemptPgCancellation);
    [AsyncStateMachineAttribute("Npgsql.Internal.NpgsqlConnector/<CloseOngoingOperations>d__267")]
internal Task CloseOngoingOperations(bool async);
    internal void Close();
    internal void Return();
    internal Exception UnexpectedMessageReceived(BackendMessageCode received);
    internal Exception Break(Exception reason);
    private void FullCleanup();
    private void Cleanup();
    private void GenerateResetMessage();
    [AsyncStateMachineAttribute("Npgsql.Internal.NpgsqlConnector/<Reset>d__275")]
internal Task Reset(bool async);
    private void ResetReadBuffer();
    internal void UnprepareAll();
    internal UserAction StartUserAction(CancellationToken cancellationToken, bool attemptPgCancellation);
    internal UserAction StartUserAction(ConnectorState newState, CancellationToken cancellationToken, bool attemptPgCancellation);
    [NullableContextAttribute("2")]
internal UserAction StartUserAction(ConnectorState newState, NpgsqlCommand command, CancellationToken cancellationToken, bool attemptPgCancellation);
    internal void EndUserAction();
    [NullableContextAttribute("2")]
private void PerformKeepAlive(object state);
    [AsyncStateMachineAttribute("Npgsql.Internal.NpgsqlConnector/<Wait>d__284")]
internal Task`1<bool> Wait(bool async, int timeout, CancellationToken cancellationToken);
    [CompilerGeneratedAttribute]
internal bool get_UseConformingStrings();
    [CompilerGeneratedAttribute]
private void set_UseConformingStrings(bool value);
    [CompilerGeneratedAttribute]
internal string get_Timezone();
    [CompilerGeneratedAttribute]
private void set_Timezone(string value);
    internal void ExecuteInternalCommand(string query);
    [AsyncStateMachineAttribute("Npgsql.Internal.NpgsqlConnector/<ExecuteInternalCommand>d__296")]
internal Task ExecuteInternalCommand(string query, bool async, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Npgsql.Internal.NpgsqlConnector/<ExecuteInternalCommand>d__297")]
internal Task ExecuteInternalCommand(Byte[] data, bool async, CancellationToken cancellationToken);
    public NpgsqlCommand CreateCommand(string cmdText);
    public NpgsqlBatch CreateBatch();
    [NullableContextAttribute("0")]
private void ReadParameterStatus(ReadOnlySpan`1<byte> incomingName, ReadOnlySpan`1<byte> incomingValue);
    private Nullable`1<DatabaseState> UpdateDatabaseState();
    internal Task WriteDescribe(StatementOrPortal statementOrPortal, Byte[] asciiName, bool async, CancellationToken cancellationToken);
    internal Task WriteSync(bool async, CancellationToken cancellationToken);
    internal Task WriteExecute(int maxRows, bool async, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Npgsql.Internal.NpgsqlConnector/<WriteParse>d__305")]
internal Task WriteParse(string sql, Byte[] asciiName, List`1<NpgsqlParameter> inputParameters, bool async, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Npgsql.Internal.NpgsqlConnector/<WriteBind>d__306")]
internal Task WriteBind(List`1<NpgsqlParameter> parameters, string portal, Byte[] asciiName, bool allResultTypesAreUnknown, Boolean[] unknownResultTypeList, bool async, CancellationToken cancellationToken);
    internal Task WriteClose(StatementOrPortal type, Byte[] asciiName, bool async, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Npgsql.Internal.NpgsqlConnector/<WriteQuery>d__308")]
internal Task WriteQuery(string sql, bool async, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Npgsql.Internal.NpgsqlConnector/<WriteCopyDone>d__309")]
internal Task WriteCopyDone(bool async, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Npgsql.Internal.NpgsqlConnector/<WriteCopyFail>d__310")]
internal Task WriteCopyFail(bool async, CancellationToken cancellationToken);
    internal void WriteCancelRequest(int backendProcessId, int backendSecretKey);
    internal void WriteTerminate();
    internal void WriteSslRequest();
    internal void WriteStartup(Dictionary`2<string, string> parameters);
    internal Task WritePassword(Byte[] payload, bool async, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Npgsql.Internal.NpgsqlConnector/<WritePassword>d__316")]
internal Task WritePassword(Byte[] payload, int offset, int count, bool async, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Npgsql.Internal.NpgsqlConnector/<WriteSASLInitialResponse>d__317")]
internal Task WriteSASLInitialResponse(string mechanism, Byte[] initialResponse, bool async, CancellationToken cancellationToken);
    internal Task WriteSASLResponse(Byte[] payload, bool async, CancellationToken cancellationToken);
    internal Task WritePregenerated(Byte[] data, bool async, CancellationToken cancellationToken);
    internal void Flush();
    internal Task Flush(bool async, CancellationToken cancellationToken);
    [CompilerGeneratedAttribute]
internal static string <AuthenticateSASL>g__GetNonce|2_0();
    [CompilerGeneratedAttribute]
private void <Open>b__213_0(Task t);
    [AsyncStateMachineAttribute("Npgsql.Internal.NpgsqlConnector/<<Open>g__OpenCore|213_1>d")]
[CompilerGeneratedAttribute]
internal static Task <Open>g__OpenCore|213_1(NpgsqlConnector conn, SslMode sslMode, NpgsqlTimeout timeout, bool async, CancellationToken cancellationToken, bool isFirstAttempt);
    [CompilerGeneratedAttribute]
private Task`1<IPAddress[]> <ConnectAsync>g__GetHostAddressesAsync|220_0(CancellationToken ct);
    [CompilerGeneratedAttribute]
internal static Task <ConnectAsync>g__OpenSocketConnectionAsync|220_1(Socket socket, EndPoint endpoint, NpgsqlTimeout perIpTimeout, CancellationToken cancellationToken);
    [CompilerGeneratedAttribute]
private bool <MultiplexingReadLoop>b__229_0();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
private UserAction <StartUserAction>g__DoStartUserAction|280_0(ConnectorState newState, NpgsqlCommand command, CancellationToken cancellationToken, bool attemptPgCancellation);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
private UserAction <StartUserAction>g__DoStartUserActionWithKeepAlive|280_1(ConnectorState newState, NpgsqlCommand command, CancellationToken cancellationToken, bool attemptPgCancellation);
    [AsyncStateMachineAttribute("Npgsql.Internal.NpgsqlConnector/<<WriteDescribe>g__FlushAndWrite|302_0>d")]
[CompilerGeneratedAttribute]
private Task <WriteDescribe>g__FlushAndWrite|302_0(int len, StatementOrPortal statementOrPortal, Byte[] name, bool async, CancellationToken cancellationToken);
    [CompilerGeneratedAttribute]
internal static void <WriteDescribe>g__Write|302_1(NpgsqlWriteBuffer writeBuffer, int len, StatementOrPortal statementOrPortal, Byte[] name);
    [AsyncStateMachineAttribute("Npgsql.Internal.NpgsqlConnector/<<WriteSync>g__FlushAndWrite|303_0>d")]
[CompilerGeneratedAttribute]
private Task <WriteSync>g__FlushAndWrite|303_0(bool async, CancellationToken cancellationToken);
    [CompilerGeneratedAttribute]
internal static void <WriteSync>g__Write|303_1(NpgsqlWriteBuffer writeBuffer);
    [AsyncStateMachineAttribute("Npgsql.Internal.NpgsqlConnector/<<WriteExecute>g__FlushAndWrite|304_0>d")]
[CompilerGeneratedAttribute]
private Task <WriteExecute>g__FlushAndWrite|304_0(int maxRows, bool async, CancellationToken cancellationToken);
    [CompilerGeneratedAttribute]
internal static void <WriteExecute>g__Write|304_1(NpgsqlWriteBuffer writeBuffer, int maxRows);
    [AsyncStateMachineAttribute("Npgsql.Internal.NpgsqlConnector/<<WriteClose>g__FlushAndWrite|307_0>d")]
[CompilerGeneratedAttribute]
private Task <WriteClose>g__FlushAndWrite|307_0(int len, StatementOrPortal type, Byte[] name, bool async, CancellationToken cancellationToken);
    [CompilerGeneratedAttribute]
internal static void <WriteClose>g__Write|307_1(NpgsqlWriteBuffer writeBuffer, int len, StatementOrPortal type, Byte[] name);
    [AsyncStateMachineAttribute("Npgsql.Internal.NpgsqlConnector/<<WritePregenerated>g__FlushAndWrite|319_0>d")]
[CompilerGeneratedAttribute]
private Task <WritePregenerated>g__FlushAndWrite|319_0(Byte[] data, bool async, CancellationToken cancellationToken);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ExperimentalAttribute("NPG9002")]
public abstract class Npgsql.Internal.NpgsqlDatabaseInfo : object {
    private static INpgsqlDatabaseInfoFactory[] modreq(System.Runtime.CompilerServices.IsVolatile) Factories;
    [CompilerGeneratedAttribute]
private string <Host>k__BackingField;
    [CompilerGeneratedAttribute]
private int <Port>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    [CompilerGeneratedAttribute]
private Version <Version>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ServerVersion>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <HasIntegerDateTimes>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <SupportsTransactions>k__BackingField;
    private List`1<PostgresBaseType> _baseTypesMutable;
    private List`1<PostgresArrayType> _arrayTypesMutable;
    private List`1<PostgresRangeType> _rangeTypesMutable;
    private List`1<PostgresMultirangeType> _multirangeTypesMutable;
    private List`1<PostgresEnumType> _enumTypesMutable;
    private List`1<PostgresCompositeType> _compositeTypesMutable;
    private List`1<PostgresDomainType> _domainTypesMutable;
    [CompilerGeneratedAttribute]
private Dictionary`2<UInt32, PostgresType> <ByOID>k__BackingField;
    [CompilerGeneratedAttribute]
private Dictionary`2<string, PostgresType> <ByFullName>k__BackingField;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[CompilerGeneratedAttribute]
private Dictionary`2<string, PostgresType> <ByName>k__BackingField;
    public string Host { get; }
    public int Port { get; }
    public string Name { get; }
    public Version Version { get; }
    public string ServerVersion { get; }
    public bool SupportsRangeTypes { get; }
    public bool SupportsMultirangeTypes { get; }
    public bool SupportsEnumTypes { get; }
    public bool SupportsCloseAll { get; }
    public bool SupportsAdvisoryLocks { get; }
    public bool SupportsDiscardSequences { get; }
    public bool SupportsUnlisten { get; }
    public bool SupportsDiscardTemp { get; }
    public bool SupportsDiscard { get; }
    public bool HasIntegerDateTimes { get; protected set; }
    public bool SupportsTransactions { get; protected set; }
    internal IReadOnlyList`1<PostgresBaseType> BaseTypes { get; }
    internal IReadOnlyList`1<PostgresArrayType> ArrayTypes { get; }
    internal IReadOnlyList`1<PostgresRangeType> RangeTypes { get; }
    internal IReadOnlyList`1<PostgresMultirangeType> MultirangeTypes { get; }
    internal IReadOnlyList`1<PostgresEnumType> EnumTypes { get; }
    internal IReadOnlyList`1<PostgresCompositeType> CompositeTypes { get; }
    internal IReadOnlyList`1<PostgresDomainType> DomainTypes { get; }
    internal Dictionary`2<UInt32, PostgresType> ByOID { get; }
    internal Dictionary`2<string, PostgresType> ByFullName { get; }
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
internal Dictionary`2<string, PostgresType> ByName { get; }
    protected NpgsqlDatabaseInfo(string host, int port, string databaseName, Version version);
    protected NpgsqlDatabaseInfo(string host, int port, string databaseName, Version version, string serverVersion);
    private protected NpgsqlDatabaseInfo(string host, int port, string databaseName, string serverVersion);
    private static NpgsqlDatabaseInfo();
    [CompilerGeneratedAttribute]
public string get_Host();
    [CompilerGeneratedAttribute]
public int get_Port();
    [CompilerGeneratedAttribute]
public string get_Name();
    [CompilerGeneratedAttribute]
public Version get_Version();
    [CompilerGeneratedAttribute]
public string get_ServerVersion();
    public virtual bool get_SupportsRangeTypes();
    public virtual bool get_SupportsMultirangeTypes();
    public virtual bool get_SupportsEnumTypes();
    public virtual bool get_SupportsCloseAll();
    public virtual bool get_SupportsAdvisoryLocks();
    public virtual bool get_SupportsDiscardSequences();
    public virtual bool get_SupportsUnlisten();
    public virtual bool get_SupportsDiscardTemp();
    public virtual bool get_SupportsDiscard();
    [CompilerGeneratedAttribute]
public virtual bool get_HasIntegerDateTimes();
    [CompilerGeneratedAttribute]
protected virtual void set_HasIntegerDateTimes(bool value);
    [CompilerGeneratedAttribute]
public virtual bool get_SupportsTransactions();
    [CompilerGeneratedAttribute]
protected virtual void set_SupportsTransactions(bool value);
    internal IReadOnlyList`1<PostgresBaseType> get_BaseTypes();
    internal IReadOnlyList`1<PostgresArrayType> get_ArrayTypes();
    internal IReadOnlyList`1<PostgresRangeType> get_RangeTypes();
    internal IReadOnlyList`1<PostgresMultirangeType> get_MultirangeTypes();
    internal IReadOnlyList`1<PostgresEnumType> get_EnumTypes();
    internal IReadOnlyList`1<PostgresCompositeType> get_CompositeTypes();
    internal IReadOnlyList`1<PostgresDomainType> get_DomainTypes();
    [CompilerGeneratedAttribute]
internal Dictionary`2<UInt32, PostgresType> get_ByOID();
    [CompilerGeneratedAttribute]
internal Dictionary`2<string, PostgresType> get_ByFullName();
    [CompilerGeneratedAttribute]
internal Dictionary`2<string, PostgresType> get_ByName();
    internal PostgresType GetPostgresType(Oid oid);
    public PostgresType GetPostgresType(UInt32 oid);
    internal PostgresType GetPostgresType(DataTypeName dataTypeName);
    public PostgresType GetPostgresType(string pgName);
    public bool TryGetPostgresTypeByName(string pgName, PostgresType& pgType);
    internal void ProcessTypes();
    protected abstract virtual IEnumerable`1<PostgresType> GetTypes();
    protected static Version ParseServerVersion(string value);
    public static void RegisterFactory(INpgsqlDatabaseInfoFactory factory);
    [AsyncStateMachineAttribute("Npgsql.Internal.NpgsqlDatabaseInfo/<Load>d__84")]
internal static Task`1<NpgsqlDatabaseInfo> Load(NpgsqlConnector conn, NpgsqlTimeout timeout, bool async);
    internal static void ResetFactories();
    internal Oid GetOid(PgTypeId pgTypeId, bool validate);
    internal DataTypeName GetDataTypeName(PgTypeId pgTypeId, bool validate);
    internal PostgresType GetPostgresType(PgTypeId pgTypeId);
    [NullableContextAttribute("2")]
internal PostgresType FindPostgresType(PgTypeId pgTypeId);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ExperimentalAttribute("NPG9001")]
internal class Npgsql.Internal.NpgsqlReadBuffer : object {
    internal static bool BufferBoundsChecks;
    internal NpgsqlConnector Connector;
    [CompilerGeneratedAttribute]
private Stream <Underlying>k__BackingField;
    [NullableAttribute("2")]
private Socket _underlyingSocket;
    [CompilerGeneratedAttribute]
private ResettableCancellationTokenSource <Cts>k__BackingField;
    [NullableAttribute("2")]
private MetricsReporter _metricsReporter;
    private TimeSpan _preTranslatedTimeout;
    [CompilerGeneratedAttribute]
private int <Size>k__BackingField;
    [CompilerGeneratedAttribute]
private Encoding <TextEncoding>k__BackingField;
    [CompilerGeneratedAttribute]
private Encoding <RelaxedTextEncoding>k__BackingField;
    [CompilerGeneratedAttribute]
private int <ReadPosition>k__BackingField;
    [CompilerGeneratedAttribute]
private PgReader <PgReader>k__BackingField;
    private long _flushedBytes;
    internal Byte[] Buffer;
    internal int FilledBytes;
    private bool _usePool;
    private bool _disposed;
    internal static int MinimumSize;
    internal static int DefaultSize;
    [NullableAttribute("2")]
private ColumnStream _lastStream;
    public NpgsqlConnection Connection { get; }
    private Stream Underlying { get; internal set; }
    internal ResettableCancellationTokenSource Cts { get; }
    internal TimeSpan Timeout { get; internal set; }
    internal int Size { get; }
    internal Encoding TextEncoding { get; }
    internal Encoding RelaxedTextEncoding { get; }
    internal int ReadPosition { get; internal set; }
    internal int ReadBytesLeft { get; }
    internal PgReader PgReader { get; }
    internal long CumulativeReadPosition { get; }
    [NullableAttribute("0")]
internal ReadOnlySpan`1<byte> Span { get; }
    internal NpgsqlReadBuffer(NpgsqlConnector connector, Stream stream, Socket socket, int size, Encoding textEncoding, Encoding relaxedTextEncoding, bool usePool);
    private static NpgsqlReadBuffer();
    public NpgsqlConnection get_Connection();
    [CompilerGeneratedAttribute]
private Stream get_Underlying();
    [CompilerGeneratedAttribute]
internal void set_Underlying(Stream value);
    [CompilerGeneratedAttribute]
internal ResettableCancellationTokenSource get_Cts();
    internal TimeSpan get_Timeout();
    internal void set_Timeout(TimeSpan value);
    [CompilerGeneratedAttribute]
internal int get_Size();
    [CompilerGeneratedAttribute]
internal Encoding get_TextEncoding();
    [CompilerGeneratedAttribute]
internal Encoding get_RelaxedTextEncoding();
    [CompilerGeneratedAttribute]
internal int get_ReadPosition();
    [CompilerGeneratedAttribute]
internal void set_ReadPosition(int value);
    internal int get_ReadBytesLeft();
    [CompilerGeneratedAttribute]
internal PgReader get_PgReader();
    internal long get_CumulativeReadPosition();
    [NullableContextAttribute("0")]
internal ReadOnlySpan`1<byte> get_Span();
    public void Ensure(int count);
    public ValueTask Ensure(int count, bool async);
    public ValueTask EnsureAsync(int count);
    [NullableContextAttribute("0")]
private int ReadWithTimeout(Span`1<byte> buffer);
    [NullableContextAttribute("0")]
[AsyncStateMachineAttribute("Npgsql.Internal.NpgsqlReadBuffer/<ReadWithTimeoutAsync>d__51")]
private ValueTask`1<int> ReadWithTimeoutAsync(Memory`1<byte> buffer, CancellationToken cancellationToken);
    private static Exception CreateCancelException(NpgsqlConnector connector);
    private static Exception NpgsqlTimeoutException();
    private static Exception TimeoutException();
    internal ValueTask Ensure(int count, bool async, bool readingNotifications);
    internal ValueTask ReadMore(bool async);
    internal NpgsqlReadBuffer AllocateOversize(int count);
    internal void Skip(int len);
    [AsyncStateMachineAttribute("Npgsql.Internal.NpgsqlReadBuffer/<Skip>d__59")]
public Task Skip(int len, bool async);
    public byte ReadByte();
    public short ReadInt16();
    public ushort ReadUInt16();
    public int ReadInt32();
    public UInt32 ReadUInt32();
    public long ReadInt64();
    public ulong ReadUInt64();
    public float ReadSingle();
    public double ReadDouble();
    private void CheckBounds(int count);
    public string ReadString(int byteLen);
    [NullableContextAttribute("0")]
public void ReadBytes(Span`1<byte> output);
    public void ReadBytes(Byte[] output, int outputOffset, int len);
    [NullableContextAttribute("0")]
public ReadOnlyMemory`1<byte> ReadMemory(int len);
    [NullableContextAttribute("0")]
public int Read(bool commandScoped, Span`1<byte> output);
    [NullableContextAttribute("0")]
public ValueTask`1<int> ReadAsync(bool commandScoped, Memory`1<byte> output, CancellationToken cancellationToken);
    public ColumnStream CreateStream(int len, bool canSeek);
    public string ReadNullTerminatedString();
    public string ReadNullTerminatedStringRelaxed();
    public ValueTask`1<string> ReadNullTerminatedString(bool async, CancellationToken cancellationToken);
    public ValueTask`1<string> ReadNullTerminatedString(Encoding encoding, bool async, CancellationToken cancellationToken);
    [NullableContextAttribute("0")]
public ReadOnlySpan`1<byte> GetNullTerminatedBytes();
    public sealed virtual void Dispose();
    private void ResetPosition();
    internal void ResetFlushedBytes();
    internal void CopyTo(NpgsqlReadBuffer other);
    private static void ValidateArguments(Byte[] buffer, int offset, int count);
    [AsyncStateMachineAttribute("Npgsql.Internal.NpgsqlReadBuffer/<<Ensure>g__EnsureLong|55_0>d")]
[CompilerGeneratedAttribute]
[AsyncMethodBuilderAttribute("System.Runtime.CompilerServices.PoolingAsyncValueTaskMethodBuilder")]
internal static ValueTask <Ensure>g__EnsureLong|55_0(NpgsqlReadBuffer buffer, int count, bool async, bool readingNotifications);
    [CompilerGeneratedAttribute]
internal static Exception <Ensure>g__CreateException|55_3(NpgsqlConnector connector);
    [CompilerGeneratedAttribute]
internal static Exception <Ensure>g__NpgsqlTimeoutException|55_1();
    [CompilerGeneratedAttribute]
internal static Exception <Ensure>g__TimeoutException|55_2();
    [CompilerGeneratedAttribute]
private void <CheckBounds>g__Core|69_0(int count);
    [NullableContextAttribute("0")]
[AsyncStateMachineAttribute("Npgsql.Internal.NpgsqlReadBuffer/<<ReadAsync>g__ReadAsyncLong|75_0>d")]
[CompilerGeneratedAttribute]
internal static ValueTask`1<int> <ReadAsync>g__ReadAsyncLong|75_0(NpgsqlReadBuffer buffer, bool commandScoped, Memory`1<byte> output, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Npgsql.Internal.NpgsqlReadBuffer/<<ReadNullTerminatedString>g__ReadLong|81_0>d")]
[CompilerGeneratedAttribute]
private ValueTask`1<string> <ReadNullTerminatedString>g__ReadLong|81_0(Encoding encoding, bool async);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Npgsql.Internal.NpgsqlWriteBuffer : object {
    internal static UTF8Encoding UTF8Encoding;
    internal static UTF8Encoding RelaxedUTF8Encoding;
    internal NpgsqlConnector Connector;
    [CompilerGeneratedAttribute]
private Stream <Underlying>k__BackingField;
    [NullableAttribute("2")]
private Socket _underlyingSocket;
    [CompilerGeneratedAttribute]
private bool <MessageLengthValidation>k__BackingField;
    private ResettableCancellationTokenSource _timeoutCts;
    [NullableAttribute("2")]
private MetricsReporter _metricsReporter;
    [CompilerGeneratedAttribute]
private int <Size>k__BackingField;
    private bool _copyMode;
    [CompilerGeneratedAttribute]
private Encoding <TextEncoding>k__BackingField;
    internal Byte[] Buffer;
    private Encoder _textEncoder;
    internal int WritePosition;
    private int _messageBytesFlushed;
    private Nullable`1<int> _messageLength;
    private bool _disposed;
    private PgWriter _pgWriter;
    internal static int MinimumSize;
    internal static int DefaultSize;
    private Stream Underlying { get; internal set; }
    internal bool MessageLengthValidation { get; internal set; }
    internal TimeSpan Timeout { get; internal set; }
    internal int Size { get; private set; }
    internal Encoding TextEncoding { get; }
    public int WriteSpaceLeft { get; }
    internal NpgsqlWriteBuffer(NpgsqlConnector connector, Stream stream, Socket socket, int size, Encoding textEncoding);
    private static NpgsqlWriteBuffer();
    [CompilerGeneratedAttribute]
private Stream get_Underlying();
    [CompilerGeneratedAttribute]
internal void set_Underlying(Stream value);
    [CompilerGeneratedAttribute]
internal bool get_MessageLengthValidation();
    [CompilerGeneratedAttribute]
internal void set_MessageLengthValidation(bool value);
    internal TimeSpan get_Timeout();
    internal void set_Timeout(TimeSpan value);
    [CompilerGeneratedAttribute]
internal int get_Size();
    [CompilerGeneratedAttribute]
private void set_Size(int value);
    [CompilerGeneratedAttribute]
internal Encoding get_TextEncoding();
    public int get_WriteSpaceLeft();
    internal PgWriter GetWriter(NpgsqlDatabaseInfo typeCatalog, FlushMode flushMode);
    [AsyncStateMachineAttribute("Npgsql.Internal.NpgsqlWriteBuffer/<Flush>d__38")]
public Task Flush(bool async, CancellationToken cancellationToken);
    internal void Flush();
    [NullableContextAttribute("0")]
internal void DirectWrite(ReadOnlySpan`1<byte> buffer);
    [NullableContextAttribute("0")]
[AsyncStateMachineAttribute("Npgsql.Internal.NpgsqlWriteBuffer/<DirectWrite>d__41")]
internal Task DirectWrite(ReadOnlyMemory`1<byte> memory, bool async, CancellationToken cancellationToken);
    public void WriteByte(byte value);
    public void WriteInt16(short value);
    public void WriteUInt16(ushort value);
    public void WriteInt32(int value);
    public void WriteUInt32(UInt32 value);
    public void WriteInt64(long value);
    [NullableContextAttribute("0")]
[ConditionalAttribute("DEBUG")]
private void CheckBounds();
    private static void ThrowNotSpaceLeft();
    public Task WriteString(string s, int byteLen, bool async, CancellationToken cancellationToken);
    public Task WriteString(string s, int charLen, int byteLen, bool async, CancellationToken cancellationToken);
    public void WriteString(string s, int len);
    [NullableContextAttribute("0")]
public void WriteBytes(ReadOnlySpan`1<byte> buf);
    [NullableContextAttribute("0")]
public void WriteBytes(ReadOnlyMemory`1<byte> buf);
    public void WriteBytes(Byte[] buf);
    public void WriteBytes(Byte[] buf, int offset, int count);
    [NullableContextAttribute("0")]
public Task WriteBytesRaw(ReadOnlyMemory`1<byte> bytes, bool async, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Npgsql.Internal.NpgsqlWriteBuffer/<WriteStreamRaw>d__58")]
public Task WriteStreamRaw(Stream stream, int count, bool async, CancellationToken cancellationToken);
    public void WriteNullTerminatedString(string s);
    public void WriteNullTerminatedString(Byte[] s);
    internal void WriteStringChunked(Char[] chars, int charIndex, int charCount, bool flush, Int32& charsUsed, Boolean& completed);
    internal void WriteStringChunked(string s, int charIndex, int charCount, bool flush, Int32& charsUsed, Boolean& completed);
    internal void StartCopyMode();
    internal void EndCopyMode();
    private void WriteCopyDataHeader();
    public sealed virtual void Dispose();
    internal void StartMessage(int messageLength);
    private void AdvanceMessageBytesFlushed(int count);
    internal void Clear();
    internal Byte[] GetContents();
    [ConditionalAttribute("DEBUG")]
internal static void AssertASCIIOnly(string s);
    [ConditionalAttribute("DEBUG")]
internal static void AssertASCIIOnly(Byte[] s);
    [AsyncStateMachineAttribute("Npgsql.Internal.NpgsqlWriteBuffer/<<WriteString>g__WriteStringLong|51_0>d")]
[CompilerGeneratedAttribute]
internal static Task <WriteString>g__WriteStringLong|51_0(NpgsqlWriteBuffer buffer, bool async, string s, int charLen, int byteLen, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Npgsql.Internal.NpgsqlWriteBuffer/<<WriteBytesRaw>g__WriteBytesLong|57_0>d")]
[CompilerGeneratedAttribute]
internal static Task <WriteBytesRaw>g__WriteBytesLong|57_0(NpgsqlWriteBuffer buffer, bool async, ReadOnlyMemory`1<byte> bytes, CancellationToken cancellationToken);
    [CompilerGeneratedAttribute]
private void <StartMessage>g__Throw|67_0();
    [CompilerGeneratedAttribute]
private void <AdvanceMessageBytesFlushed>g__Throw|68_0(<>c__DisplayClass68_0& );
}
[NullableContextAttribute("1")]
[NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
internal class Npgsql.Internal.ObjectConverter : PgStreamingConverter`1<object> {
    private PgSerializerOptions _options;
    private PgTypeId _pgTypeId;
    public ObjectConverter(PgSerializerOptions options, PgTypeId pgTypeId);
    [NullableContextAttribute("2")]
protected virtual bool IsDbNullValue(object value, Object& writeState);
    public virtual object Read(PgReader reader);
    public virtual ValueTask`1<object> ReadAsync(PgReader reader, CancellationToken cancellationToken);
    public virtual Size GetSize(SizeContext context, object value, Object& writeState);
    public virtual void Write(PgWriter writer, object value);
    public virtual ValueTask WriteAsync(PgWriter writer, object value, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Npgsql.Internal.ObjectConverter/<Write>d__9")]
private ValueTask Write(bool async, PgWriter writer, object value, CancellationToken cancellationToken);
    private PgTypeInfo GetTypeInfo(Type type);
}
[NullableContextAttribute("1")]
[NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[ExperimentalAttribute("NPG9001")]
public abstract class Npgsql.Internal.PgBufferedConverter`1 : PgConverter`1<T> {
    protected PgBufferedConverter`1(bool customDbNullPredicate);
    protected abstract virtual T ReadCore(PgReader reader);
    protected abstract virtual void WriteCore(PgWriter writer, T value);
    public virtual Size GetSize(SizeContext context, T value, Object& writeState);
    public sealed virtual T Read(PgReader reader);
    public sealed virtual ValueTask`1<T> ReadAsync(PgReader reader, CancellationToken cancellationToken);
    internal sealed virtual ValueTask`1<object> ReadAsObject(bool async, PgReader reader, CancellationToken cancellationToken);
    public sealed virtual void Write(PgWriter writer, T value);
    public sealed virtual ValueTask WriteAsync(PgWriter writer, T value, CancellationToken cancellationToken);
    internal sealed virtual ValueTask WriteAsObject(bool async, PgWriter writer, object value, CancellationToken cancellationToken);
}
[NullableContextAttribute("1")]
[NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
internal abstract class Npgsql.Internal.PgComposingConverterResolver`1 : PgConverterResolver`1<T> {
    private Nullable`1<PgTypeId> _pgTypeId;
    [CompilerGeneratedAttribute]
private PgResolverTypeInfo <EffectiveTypeInfo>k__BackingField;
    private ConcurrentDictionary`2<PgConverter, PgConverter> _converters;
    public PgResolverTypeInfo EffectiveTypeInfo { get; }
    protected PgComposingConverterResolver`1(Nullable`1<PgTypeId> pgTypeId, PgResolverTypeInfo effectiveTypeInfo);
    [CompilerGeneratedAttribute]
public PgResolverTypeInfo get_EffectiveTypeInfo();
    protected abstract virtual PgTypeId GetEffectivePgTypeId(PgTypeId pgTypeId);
    protected abstract virtual PgTypeId GetPgTypeId(PgTypeId effectivePgTypeId);
    protected abstract virtual PgConverter`1<T> CreateConverter(PgConverterResolution effectiveResolution);
    [NullableContextAttribute("2")]
protected abstract virtual Nullable`1<PgConverterResolution> GetEffectiveResolution(T value, Nullable`1<PgTypeId> expectedEffectivePgTypeId);
    public virtual PgConverterResolution GetDefault(Nullable`1<PgTypeId> pgTypeId);
    [NullableContextAttribute("2")]
public virtual Nullable`1<PgConverterResolution> Get(T value, Nullable`1<PgTypeId> expectedPgTypeId);
    public virtual PgConverterResolution Get(Field field);
    private PgTypeId GetEffectiveTypeId(PgTypeId pgTypeId);
    private PgConverter`1<T> GetOrAdd(PgConverterResolution effectiveResolution);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ExperimentalAttribute("NPG9001")]
public abstract class Npgsql.Internal.PgConverter : object {
    [CompilerGeneratedAttribute]
private DbNullPredicate <DbNullPredicateKind>k__BackingField;
    internal DbNullPredicate DbNullPredicateKind { get; }
    public bool IsDbNullable { get; }
    internal Type TypeToConvert { get; }
    private protected PgConverter(Type type, bool isNullDefaultValue, bool customDbNullPredicate);
    [CompilerGeneratedAttribute]
internal DbNullPredicate get_DbNullPredicateKind();
    public bool get_IsDbNullable();
    public abstract virtual bool CanConvert(DataFormat format, BufferRequirements& bufferRequirements);
    internal abstract virtual Type get_TypeToConvert();
    [NullableContextAttribute("2")]
internal bool IsDbNullAsObject(object value, Object& writeState);
    [NullableContextAttribute("2")]
private protected abstract virtual bool IsDbNullValueAsObject(object value, Object& writeState);
    internal abstract virtual Size GetSizeAsObject(SizeContext context, object value, Object& writeState);
    internal object ReadAsObject(PgReader reader);
    internal ValueTask`1<object> ReadAsObjectAsync(PgReader reader, CancellationToken cancellationToken);
    internal abstract virtual ValueTask`1<object> ReadAsObject(bool async, PgReader reader, CancellationToken cancellationToken);
    internal void WriteAsObject(PgWriter writer, object value);
    internal ValueTask WriteAsObjectAsync(PgWriter writer, object value, CancellationToken cancellationToken);
    internal abstract virtual ValueTask WriteAsObject(bool async, PgWriter writer, object value, CancellationToken cancellationToken);
    private static DbNullPredicate InferDbNullPredicate(Type type, bool isNullDefaultValue);
    [DoesNotReturnAttribute]
private protected void ThrowIORequired(Size bufferRequirement);
    private protected static bool ThrowInvalidNullValue();
    private protected bool ThrowDbNullPredicateOutOfRange();
    protected bool CanConvertBufferedDefault(DataFormat format, BufferRequirements& bufferRequirements);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public abstract class Npgsql.Internal.PgConverter`1 : PgConverter {
    internal Type TypeToConvert { get; }
    private protected PgConverter`1(bool customDbNullPredicate);
    [NullableContextAttribute("2")]
protected virtual bool IsDbNullValue(T value, Object& writeState);
    [NullableContextAttribute("2")]
private protected virtual bool IsDbNullValueAsObject(object value, Object& writeState);
    [NullableContextAttribute("2")]
public bool IsDbNull(T value, Object& writeState);
    public abstract virtual T Read(PgReader reader);
    public abstract virtual ValueTask`1<T> ReadAsync(PgReader reader, CancellationToken cancellationToken);
    public abstract virtual Size GetSize(SizeContext context, T value, Object& writeState);
    public abstract virtual void Write(PgWriter writer, T value);
    public abstract virtual ValueTask WriteAsync(PgWriter writer, T value, CancellationToken cancellationToken);
    internal sealed virtual Type get_TypeToConvert();
    internal sealed virtual Size GetSizeAsObject(SizeContext context, object value, Object& writeState);
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
[ExtensionAttribute]
internal static class Npgsql.Internal.PgConverterExtensions : object {
    [ExtensionAttribute]
public static Nullable`1<Size> GetSizeOrDbNull(PgConverter`1<T> converter, DataFormat format, Size writeRequirement, T value, Object& writeState);
    [ExtensionAttribute]
public static Nullable`1<Size> GetSizeOrDbNullAsObject(PgConverter converter, DataFormat format, Size writeRequirement, object value, Object& writeState);
    [NullableContextAttribute("1")]
[ExtensionAttribute]
internal static PgConverter`1<T> UnsafeDowncast(PgConverter converter);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ExperimentalAttribute("NPG9001")]
public static class Npgsql.Internal.PgConverterFactory : object {
    public static PgConverter`1<T[]> CreateArrayMultirangeConverter(PgConverter`1<T> rangeConverter, PgSerializerOptions options);
    public static PgConverter`1<List`1<T>> CreateListMultirangeConverter(PgConverter`1<T> rangeConverter, PgSerializerOptions options);
    public static PgConverter`1<NpgsqlRange`1<T>> CreateRangeConverter(PgConverter`1<T> subTypeConverter, PgSerializerOptions options);
    public static PgConverter`1<TBase> CreatePolymorphicArrayConverter(Func`1<PgConverter`1<TBase>> arrayConverterFactory, Func`1<PgConverter`1<TBase>> nullableArrayConverterFactory, PgSerializerOptions options);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[IsReadOnlyAttribute]
internal class Npgsql.Internal.PgConverterInfo : ValueType {
    private PgTypeInfo _typeInfo;
    [CompilerGeneratedAttribute]
private Type <TypeToConvert>k__BackingField;
    [CompilerGeneratedAttribute]
private PgConverter <Converter>k__BackingField;
    [CompilerGeneratedAttribute]
private Size <BufferRequirement>k__BackingField;
    public bool IsDefault { get; }
    public Type TypeToConvert { get; }
    public PgTypeInfo TypeInfo { get; }
    public PgConverter Converter { get; }
    public Size BufferRequirement { get; }
    public bool IsBoxingConverter { get; }
    public PgConverterInfo(PgTypeInfo pgTypeInfo, PgConverter converter, Size bufferRequirement);
    public bool get_IsDefault();
    [CompilerGeneratedAttribute]
public Type get_TypeToConvert();
    public PgTypeInfo get_TypeInfo();
    [CompilerGeneratedAttribute]
public PgConverter get_Converter();
    [CompilerGeneratedAttribute]
public Size get_BufferRequirement();
    public bool get_IsBoxingConverter();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[IsReadOnlyAttribute]
public class Npgsql.Internal.PgConverterResolution : ValueType {
    [CompilerGeneratedAttribute]
private PgConverter <Converter>k__BackingField;
    [CompilerGeneratedAttribute]
private PgTypeId <PgTypeId>k__BackingField;
    public PgConverter Converter { get; }
    public PgTypeId PgTypeId { get; }
    public PgConverterResolution(PgConverter converter, PgTypeId pgTypeId);
    [CompilerGeneratedAttribute]
public PgConverter get_Converter();
    [CompilerGeneratedAttribute]
public PgTypeId get_PgTypeId();
    public PgConverter`1<T> GetConverter();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ExperimentalAttribute("NPG9001")]
public abstract class Npgsql.Internal.PgConverterResolver : object {
    internal Type TypeToConvert { get; }
    public abstract virtual PgConverterResolution GetDefault(Nullable`1<PgTypeId> pgTypeId);
    public virtual PgConverterResolution Get(Field field);
    internal abstract virtual Type get_TypeToConvert();
    internal abstract virtual Nullable`1<PgConverterResolution> GetAsObjectInternal(PgTypeInfo typeInfo, object value, Nullable`1<PgTypeId> expectedPgTypeId);
    internal PgConverterResolution GetDefaultInternal(bool validate, bool expectPortableTypeIds, Nullable`1<PgTypeId> pgTypeId);
    internal PgConverterResolution GetInternal(PgTypeInfo typeInfo, Field field);
    private protected static void Validate(string methodName, PgConverterResolution resolution, Type expectedTypeToConvert, Nullable`1<PgTypeId> expectedPgTypeId, bool expectPortableTypeIds);
    protected ArgumentOutOfRangeException CreateUnsupportedPgTypeIdException(PgTypeId pgTypeId);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public abstract class Npgsql.Internal.PgConverterResolver`1 : PgConverterResolver {
    internal Type TypeToConvert { get; }
    [NullableContextAttribute("2")]
public abstract virtual Nullable`1<PgConverterResolution> Get(T value, Nullable`1<PgTypeId> expectedPgTypeId);
    internal sealed virtual Type get_TypeToConvert();
    internal Nullable`1<PgConverterResolution> GetInternal(PgTypeInfo typeInfo, T value, Nullable`1<PgTypeId> expectedPgTypeId);
    internal sealed virtual Nullable`1<PgConverterResolution> GetAsObjectInternal(PgTypeInfo typeInfo, object value, Nullable`1<PgTypeId> expectedPgTypeId);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ExperimentalAttribute("NPG9001")]
public class Npgsql.Internal.PgReader : object {
    internal static int MaxPreparedTextReaderSize;
    private NpgsqlReadBuffer _buffer;
    private bool _resumable;
    [NullableAttribute("2")]
private Byte[] _pooledArray;
    [NullableAttribute("2")]
private ColumnStream _userActiveStream;
    [NullableAttribute("2")]
private PreparedTextReader _preparedTextReader;
    private long _fieldStartPos;
    private Size _fieldBufferRequirement;
    private DataFormat _fieldFormat;
    private int _fieldSize;
    private int _currentStartPos;
    private Size _currentBufferRequirement;
    private int _currentSize;
    [NullableAttribute("2")]
private TextReader _charsReadReader;
    private int _charsRead;
    private Nullable`1<int> _charsReadOffset;
    [NullableAttribute("0")]
private Nullable`1<ArraySegment`1<char>> _charsReadBuffer;
    private bool _requiresCleanup;
    private bool _fieldConsumed;
    internal long FieldStartPos { get; }
    internal int FieldSize { get; }
    internal bool Initialized { get; }
    internal int FieldOffset { get; }
    internal int FieldRemaining { get; }
    private bool HasCurrent { get; }
    private int CurrentSize { get; }
    public ValueMetadata Current { get; }
    public int CurrentRemaining { get; }
    internal Size CurrentBufferRequirement { get; }
    private int CurrentOffset { get; }
    internal bool IsAtStart { get; }
    internal bool Resumable { get; }
    public bool IsResumed { get; }
    private ArrayPool`1<byte> ArrayPool { get; }
    internal int CharsRead { get; }
    internal bool CharsReadActive { get; }
    [MemberNotNullWhenAttribute("True", "_userActiveStream")]
private bool StreamActive { get; }
    internal PgReader(NpgsqlReadBuffer buffer);
    internal long get_FieldStartPos();
    internal int get_FieldSize();
    internal bool get_Initialized();
    internal int get_FieldOffset();
    internal int get_FieldRemaining();
    private bool get_HasCurrent();
    private int get_CurrentSize();
    public ValueMetadata get_Current();
    public int get_CurrentRemaining();
    internal Size get_CurrentBufferRequirement();
    private int get_CurrentOffset();
    internal bool get_IsAtStart();
    internal bool get_Resumable();
    public bool get_IsResumed();
    private ArrayPool`1<byte> get_ArrayPool();
    internal void BreakConnection();
    internal void Revert(int size, int startPos, Size bufferRequirement);
    private void CheckBounds(int count);
    public byte ReadByte();
    public short ReadInt16();
    public int ReadInt32();
    public long ReadInt64();
    public ushort ReadUInt16();
    public UInt32 ReadUInt32();
    public ulong ReadUInt64();
    public float ReadFloat();
    public double ReadDouble();
    [NullableContextAttribute("0")]
public void Read(Span`1<byte> destination);
    [AsyncStateMachineAttribute("Npgsql.Internal.PgReader/<ReadNullTerminatedStringAsync>d__63")]
public ValueTask`1<string> ReadNullTerminatedStringAsync(Encoding encoding, CancellationToken cancellationToken);
    public string ReadNullTerminatedString(Encoding encoding);
    public Stream GetStream(Nullable`1<int> length);
    internal Stream GetStream(bool canSeek, Nullable`1<int> length);
    private ColumnStream GetColumnStream(bool canSeek, Nullable`1<int> length);
    public TextReader GetTextReader(Encoding encoding);
    public ValueTask`1<TextReader> GetTextReaderAsync(Encoding encoding, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Npgsql.Internal.PgReader/<GetTextReader>d__70")]
private ValueTask`1<TextReader> GetTextReader(bool async, Encoding encoding, CancellationToken cancellationToken);
    [NullableContextAttribute("0")]
public ValueTask ReadBytesAsync(Memory`1<byte> buffer, CancellationToken cancellationToken);
    [NullableContextAttribute("0")]
public void ReadBytes(Span`1<byte> buffer);
    [NullableContextAttribute("0")]
public bool TryReadBytes(int count, ReadOnlySpan`1& bytes);
    [NullableContextAttribute("0")]
public bool TryReadBytes(int count, ReadOnlyMemory`1& bytes);
    [NullableContextAttribute("0")]
public ReadOnlySequence`1<byte> ReadBytes(int count);
    [NullableContextAttribute("0")]
[AsyncStateMachineAttribute("Npgsql.Internal.PgReader/<ReadBytesAsync>d__76")]
public ValueTask`1<ReadOnlySequence`1<byte>> ReadBytesAsync(int count, CancellationToken cancellationToken);
    public void Rewind(int count);
    [AsyncStateMachineAttribute("Npgsql.Internal.PgReader/<DisposeUserActiveStream>d__78")]
private ValueTask DisposeUserActiveStream(bool async);
    internal int get_CharsRead();
    internal bool get_CharsReadActive();
    internal void GetCharsReadInfo(Encoding encoding, Int32& charsRead, TextReader& reader, Int32& charsOffset, Nullable`1& buffer);
    internal void RestartCharsRead();
    internal void AdvanceCharsRead(int charsRead);
    [NullableContextAttribute("0")]
internal void StartCharsRead(int dataOffset, Nullable`1<ArraySegment`1<char>> buffer);
    internal void EndCharsRead();
    internal PgReader Init(int fieldLength, DataFormat format, bool resumable);
    internal void StartRead(Size bufferRequirement);
    internal ValueTask StartReadAsync(Size bufferRequirement, CancellationToken cancellationToken);
    internal void EndRead();
    internal ValueTask EndReadAsync();
    [NullableContextAttribute("0")]
[AsyncStateMachineAttribute("Npgsql.Internal.PgReader/<BeginNestedRead>d__93")]
internal ValueTask`1<NestedReadScope> BeginNestedRead(bool async, int size, Size bufferRequirement, CancellationToken cancellationToken);
    public NestedReadScope BeginNestedRead(int size, Size bufferRequirement);
    [NullableContextAttribute("0")]
public ValueTask`1<NestedReadScope> BeginNestedReadAsync(int size, Size bufferRequirement, CancellationToken cancellationToken);
    internal void Seek(int offset);
    [AsyncStateMachineAttribute("Npgsql.Internal.PgReader/<Consume>d__97")]
internal ValueTask Consume(bool async, Nullable`1<int> count, CancellationToken cancellationToken);
    public void Consume(Nullable`1<int> count);
    public ValueTask ConsumeAsync(Nullable`1<int> count, CancellationToken cancellationToken);
    [MemberNotNullWhenAttribute("True", "_userActiveStream")]
private bool get_StreamActive();
    internal void ThrowIfStreamActive();
    internal bool CommitHasIO(bool resuming);
    internal void Commit(bool resuming);
    internal ValueTask CommitAsync(bool resuming);
    private Byte[] RentArray(int count);
    private int GetBufferRequirementByteCount(Size bufferRequirement);
    internal bool ShouldBufferCurrent();
    public bool ShouldBuffer(Size bufferRequirement);
    public bool ShouldBuffer(int byteCount);
    public void Buffer(Size bufferRequirement);
    public void Buffer(int byteCount);
    public ValueTask BufferAsync(Size bufferRequirement, CancellationToken cancellationToken);
    public ValueTask BufferAsync(int byteCount, CancellationToken cancellationToken);
    internal ValueTask Buffer(bool async, Size bufferRequirement, CancellationToken cancellationToken);
    internal ValueTask Buffer(bool async, int byteCount, CancellationToken cancellationToken);
    private void ThrowNotConsumedExactly();
    [CompilerGeneratedAttribute]
private void <CheckBounds>g__Core|52_0(int count);
    [NullableContextAttribute("0")]
[AsyncStateMachineAttribute("Npgsql.Internal.PgReader/<<ReadBytesAsync>g__Slow|71_0>d")]
[CompilerGeneratedAttribute]
private ValueTask <ReadBytesAsync>g__Slow|71_0(int count, Memory`1<byte> buffer, CancellationToken cancellationToken);
    [NullableContextAttribute("0")]
[CompilerGeneratedAttribute]
private void <ReadBytes>g__Slow|72_0(int count, Span`1<byte> buffer);
    [CompilerGeneratedAttribute]
private void <Commit>g__CommitSlow|104_0();
    [AsyncStateMachineAttribute("Npgsql.Internal.PgReader/<<CommitAsync>g__CommitSlow|105_0>d")]
[CompilerGeneratedAttribute]
private ValueTask <CommitAsync>g__CommitSlow|105_0();
    [CompilerGeneratedAttribute]
private bool <ShouldBuffer>g__ShouldBufferSlow|110_0(<>c__DisplayClass110_0& );
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Npgsql.Internal.PgResolverTypeInfo : PgTypeInfo {
    private PgConverterResolver _converterResolver;
    public PgResolverTypeInfo(PgSerializerOptions options, PgConverterResolver converterResolver, Nullable`1<PgTypeId> pgTypeId, Type unboxedType);
    private static PgConverterResolution ResolveDefaultId(PgSerializerOptions options, PgConverterResolver converterResolver, PgTypeId typeId);
    [NullableContextAttribute("2")]
public Nullable`1<PgConverterResolution> GetResolution(T value, Nullable`1<PgTypeId> expectedPgTypeId);
    [NullableContextAttribute("2")]
public Nullable`1<PgConverterResolution> GetResolutionAsObject(object value, Nullable`1<PgTypeId> expectedPgTypeId);
    public PgConverterResolution GetResolution(Field field);
    public PgConverterResolution GetDefaultResolution(Nullable`1<PgTypeId> expectedPgTypeId);
    public PgConverterResolver GetConverterResolver();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
private PgConverterResolution <GetResolution>g__ThrowNotSupportedType|3_0(Type type);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ExperimentalAttribute("NPG9001")]
public class Npgsql.Internal.PgSerializerOptions : object {
    [CompilerGeneratedAttribute]
[ThreadStaticAttribute]
private static bool <IntrospectionCaller>k__BackingField;
    private PgTypeInfoResolverChain _resolverChain;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private Func`1<string> _timeZoneProvider;
    [NullableAttribute("2")]
private IPgTypeInfoResolver _typeInfoResolver;
    [NullableAttribute("2")]
private object _typeInfoCache;
    [CompilerGeneratedAttribute]
private PgTypeInfo <UnspecifiedDBNullTypeInfo>k__BackingField;
    [NullableAttribute("2")]
private PostgresType _textPgType;
    private bool _introspectionInstance;
    [CompilerGeneratedAttribute]
private bool <PortableTypeIds>k__BackingField;
    [CompilerGeneratedAttribute]
private NpgsqlDatabaseInfo <DatabaseInfo>k__BackingField;
    [CompilerGeneratedAttribute]
private Encoding <TextEncoding>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <EnableDateTimeInfinityConversions>k__BackingField;
    [CompilerGeneratedAttribute]
private ArrayNullabilityMode <ArrayNullabilityMode>k__BackingField;
    [CompilerGeneratedAttribute]
private INpgsqlNameTranslator <DefaultNameTranslator>k__BackingField;
    internal static bool IntrospectionCaller { get; internal set; }
    internal PgTypeInfo UnspecifiedDBNullTypeInfo { get; }
    internal PgTypeId TextPgTypeId { get; }
    internal bool IntrospectionMode { get; internal set; }
    internal bool PortableTypeIds { get; internal set; }
    internal NpgsqlDatabaseInfo DatabaseInfo { get; }
    public string TimeZone { get; }
    public Encoding TextEncoding { get; public set; }
    public IPgTypeInfoResolver TypeInfoResolver { get; internal set; }
    public bool EnableDateTimeInfinityConversions { get; public set; }
    public ArrayNullabilityMode ArrayNullabilityMode { get; public set; }
    public INpgsqlNameTranslator DefaultNameTranslator { get; public set; }
    internal bool RangesEnabled { get; }
    internal bool MultirangesEnabled { get; }
    internal bool ArraysEnabled { get; }
    internal PgSerializerOptions(NpgsqlDatabaseInfo databaseInfo, Nullable`1<PgTypeInfoResolverChain> resolverChain, Func`1<string> timeZoneProvider);
    [CompilerGeneratedAttribute]
internal static bool get_IntrospectionCaller();
    [CompilerGeneratedAttribute]
internal static void set_IntrospectionCaller(bool value);
    [CompilerGeneratedAttribute]
internal PgTypeInfo get_UnspecifiedDBNullTypeInfo();
    internal PgTypeId get_TextPgTypeId();
    internal bool get_IntrospectionMode();
    internal Void modreq(System.Runtime.CompilerServices.IsExternalInit) set_IntrospectionMode(bool value);
    [CompilerGeneratedAttribute]
internal bool get_PortableTypeIds();
    [CompilerGeneratedAttribute]
internal Void modreq(System.Runtime.CompilerServices.IsExternalInit) set_PortableTypeIds(bool value);
    [CompilerGeneratedAttribute]
internal NpgsqlDatabaseInfo get_DatabaseInfo();
    public string get_TimeZone();
    [CompilerGeneratedAttribute]
public Encoding get_TextEncoding();
    [CompilerGeneratedAttribute]
public Void modreq(System.Runtime.CompilerServices.IsExternalInit) set_TextEncoding(Encoding value);
    public IPgTypeInfoResolver get_TypeInfoResolver();
    internal Void modreq(System.Runtime.CompilerServices.IsExternalInit) set_TypeInfoResolver(IPgTypeInfoResolver value);
    [CompilerGeneratedAttribute]
public bool get_EnableDateTimeInfinityConversions();
    [CompilerGeneratedAttribute]
public Void modreq(System.Runtime.CompilerServices.IsExternalInit) set_EnableDateTimeInfinityConversions(bool value);
    [CompilerGeneratedAttribute]
public ArrayNullabilityMode get_ArrayNullabilityMode();
    [CompilerGeneratedAttribute]
public Void modreq(System.Runtime.CompilerServices.IsExternalInit) set_ArrayNullabilityMode(ArrayNullabilityMode value);
    [CompilerGeneratedAttribute]
public INpgsqlNameTranslator get_DefaultNameTranslator();
    [CompilerGeneratedAttribute]
public Void modreq(System.Runtime.CompilerServices.IsExternalInit) set_DefaultNameTranslator(INpgsqlNameTranslator value);
    public static bool IsWellKnownTextType(Type type);
    internal bool get_RangesEnabled();
    internal bool get_MultirangesEnabled();
    internal bool get_ArraysEnabled();
    [NullableContextAttribute("2")]
private PgTypeInfo GetTypeInfoCore(Type type, Nullable`1<PgTypeId> pgTypeId, bool defaultTypeFallback);
    [NullableContextAttribute("2")]
internal PgTypeInfo GetTypeInfoInternal(Type type, Nullable`1<PgTypeId> pgTypeId);
    [NullableContextAttribute("2")]
internal PgTypeInfo GetObjectOrDefaultTypeInfoInternal(PgTypeId pgTypeId);
    public PgTypeInfo GetDefaultTypeInfo(Type type);
    [NullableContextAttribute("2")]
public PgTypeInfo GetDefaultTypeInfo(PgTypeId pgTypeId);
    public PgTypeInfo GetTypeInfo(Type type, PgTypeId pgTypeId);
    internal PgTypeId GetCanonicalTypeId(PgTypeId pgTypeId);
    internal PgTypeId ToCanonicalTypeId(PostgresType pgType);
    public PgTypeId GetArrayTypeId(PgTypeId elementTypeId);
    public PgTypeId GetArrayElementTypeId(PgTypeId arrayTypeId);
    public PgTypeId GetRangeTypeId(PgTypeId subtypeTypeId);
    public PgTypeId GetRangeSubtypeTypeId(PgTypeId rangeTypeId);
    public PgTypeId GetMultirangeTypeId(PgTypeId rangeTypeId);
    public PgTypeId GetMultirangeElementTypeId(PgTypeId multirangeTypeId);
    public bool TryGetDataTypeName(PgTypeId pgTypeId, DataTypeName& dataTypeName);
    public DataTypeName GetDataTypeName(PgTypeId pgTypeId);
}
[NullableContextAttribute("1")]
[NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[ExperimentalAttribute("NPG9001")]
public abstract class Npgsql.Internal.PgStreamingConverter`1 : PgConverter`1<T> {
    protected PgStreamingConverter`1(bool customDbNullPredicate);
    public virtual bool CanConvert(DataFormat format, BufferRequirements& bufferRequirements);
    internal Task`1<T> ReadAsyncAsTask(PgReader reader, CancellationToken cancellationToken, T& result);
    internal sealed virtual ValueTask`1<object> ReadAsObject(bool async, PgReader reader, CancellationToken cancellationToken);
    internal sealed virtual ValueTask WriteAsObject(bool async, PgWriter writer, object value, CancellationToken cancellationToken);
    [CompilerGeneratedAttribute]
internal static object <ReadAsObject>g__BoxResult|3_0(Task task);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal static class Npgsql.Internal.PgStreamingConverterHelpers : object {
    [AsyncStateMachineAttribute("Npgsql.Internal.PgStreamingConverterHelpers/<AwaitTask>d__0")]
[AsyncMethodBuilderAttribute("System.Runtime.CompilerServices.PoolingAsyncValueTaskMethodBuilder`1")]
public static ValueTask`1<object> AwaitTask(Task task, Continuation continuation);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ExperimentalAttribute("NPG9001")]
public class Npgsql.Internal.PgTypeInfo : object {
    private bool _canBinaryConvert;
    private BufferRequirements _binaryBufferRequirements;
    private bool _canTextConvert;
    private BufferRequirements _textBufferRequirements;
    [CompilerGeneratedAttribute]
private Type <Type>k__BackingField;
    [CompilerGeneratedAttribute]
private PgSerializerOptions <Options>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <SupportsWriting>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<DataFormat> <PreferredFormat>k__BackingField;
    [NullableAttribute("2")]
[CompilerGeneratedAttribute]
private PgConverter <Converter>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsBoxing>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<PgTypeId> <PgTypeId>k__BackingField;
    public Type Type { get; }
    public PgSerializerOptions Options { get; }
    public bool SupportsWriting { get; public set; }
    public Nullable`1<DataFormat> PreferredFormat { get; public set; }
    [NullableAttribute("2")]
private PgConverter Converter { get; }
    [MemberNotNullWhenAttribute("False", "Converter")]
[MemberNotNullWhenAttribute("False", "PgTypeId")]
internal bool IsResolverInfo { get; }
    internal bool ValidateResolution { get; }
    internal bool IsBoxing { get; }
    public Nullable`1<PgTypeId> PgTypeId { get; }
    private PgTypeInfo(PgSerializerOptions options, Type type, Type unboxedType);
    public PgTypeInfo(PgSerializerOptions options, PgConverter converter, PgTypeId pgTypeId, Type unboxedType);
    private protected PgTypeInfo(PgSerializerOptions options, Type type, Nullable`1<PgConverterResolution> resolution, Type unboxedType);
    private bool HasCachedInfo(PgConverter converter);
    [CompilerGeneratedAttribute]
public Type get_Type();
    [CompilerGeneratedAttribute]
public PgSerializerOptions get_Options();
    [CompilerGeneratedAttribute]
public bool get_SupportsWriting();
    [CompilerGeneratedAttribute]
public Void modreq(System.Runtime.CompilerServices.IsExternalInit) set_SupportsWriting(bool value);
    [CompilerGeneratedAttribute]
public Nullable`1<DataFormat> get_PreferredFormat();
    [CompilerGeneratedAttribute]
public Void modreq(System.Runtime.CompilerServices.IsExternalInit) set_PreferredFormat(Nullable`1<DataFormat> value);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
private PgConverter get_Converter();
    [MemberNotNullWhenAttribute("False", "Converter")]
[MemberNotNullWhenAttribute("False", "PgTypeId")]
internal bool get_IsResolverInfo();
    internal bool get_ValidateResolution();
    [CompilerGeneratedAttribute]
internal bool get_IsBoxing();
    [CompilerGeneratedAttribute]
public Nullable`1<PgTypeId> get_PgTypeId();
    internal void DisposeWriteState(object writeState);
    [NullableContextAttribute("2")]
public PgConverterResolution GetResolution(T value);
    [NullableContextAttribute("2")]
public PgConverterResolution GetObjectResolution(object value);
    internal PgConverterResolution GetResolution();
    private bool CanConvert(PgConverter converter, DataFormat format, BufferRequirements& bufferRequirements);
    public Nullable`1<BufferRequirements> GetBufferRequirements(PgConverter converter, DataFormat format);
    internal bool TryBind(Field field, DataFormat format, PgConverterInfo& info);
    internal PgConverterInfo Bind(Field field, DataFormat format);
    [NullableContextAttribute("2")]
internal Nullable`1<PgConverterInfo> Bind(PgConverter`1<T> converter, T value, Size& size, Object& writeState, DataFormat& format, Nullable`1<DataFormat> formatPreference);
    [NullableContextAttribute("2")]
internal Nullable`1<PgConverterInfo> BindObject(PgConverter converter, object value, Size& size, Object& writeState, DataFormat& format, Nullable`1<DataFormat> formatPreference);
    private DataFormat ResolveFormat(PgConverter converter, BufferRequirements& bufferRequirements, Nullable`1<DataFormat> formatPreference);
    [CompilerGeneratedAttribute]
internal static PgConverterResolution <GetObjectResolution>g__ThrowNotSupported|37_0();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[IsReadOnlyAttribute]
internal class Npgsql.Internal.PgTypeInfoResolverChain : ValueType {
    private EnabledFlags _enabled;
    private List`1<IPgTypeInfoResolver> _resolvers;
    public bool RangesEnabled { get; }
    public bool MultirangesEnabled { get; }
    public bool ArraysEnabled { get; }
    public PgTypeInfoResolverChain(List`1<IPgTypeInfoResolver> resolvers, bool rangesEnabled, bool multirangesEnabled, bool arraysEnabled);
    public bool get_RangesEnabled();
    public bool get_MultirangesEnabled();
    public bool get_ArraysEnabled();
    public sealed virtual IEnumerator`1<IPgTypeInfoResolver> GetEnumerator();
    private sealed virtual override IEnumerator System.Collections.IEnumerable.GetEnumerator();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Npgsql.Internal.PgTypeInfoResolverChainBuilder : ValueType {
    [TupleElementNamesAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private List`1<ValueTuple`2<Type, object>> _factories;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private Action`2<PgTypeInfoResolverChainBuilder, List`1<IPgTypeInfoResolver>> _addRangeResolvers;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private Action`2<PgTypeInfoResolverChainBuilder, List`1<IPgTypeInfoResolver>> _addMultirangeResolvers;
    private RangeArrayHandler _rangeArrayHandler;
    private MultirangeArrayHandler _multirangeArrayHandler;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private Action`2<PgTypeInfoResolverChainBuilder, List`1<IPgTypeInfoResolver>> _addArrayResolvers;
    public void Clear();
    public void AppendResolverFactory(PgTypeInfoResolverFactory factory);
    public void AppendResolverFactory(Func`1<T> factory);
    public void PrependResolverFactory(PgTypeInfoResolverFactory factory);
    public void PrependResolverFactory(Func`1<T> factory);
    private static Func`1<PgTypeInfoResolverFactory> Memoize(Func`1<PgTypeInfoResolverFactory> factory);
    private static PgTypeInfoResolverFactory GetInstance(ValueTuple`2<Type, object> factory);
    private void AddResolverFactory(Type type, object factory, bool prepend);
    public void EnableRanges();
    public void EnableMultiranges();
    public void EnableArrays();
    public PgTypeInfoResolverChain Build(Action`1<List`1<IPgTypeInfoResolver>> configure);
    [CompilerGeneratedAttribute]
internal static void <EnableRanges>g__AddResolvers|15_0(PgTypeInfoResolverChainBuilder instance, List`1<IPgTypeInfoResolver> resolvers);
    [CompilerGeneratedAttribute]
internal static void <EnableMultiranges>g__AddResolvers|16_0(PgTypeInfoResolverChainBuilder instance, List`1<IPgTypeInfoResolver> resolvers);
    [CompilerGeneratedAttribute]
internal static void <EnableArrays>g__AddResolvers|17_0(PgTypeInfoResolverChainBuilder instance, List`1<IPgTypeInfoResolver> resolvers);
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
[ExperimentalAttribute("NPG9001")]
public abstract class Npgsql.Internal.PgTypeInfoResolverFactory : object {
    [NullableContextAttribute("1")]
public abstract virtual IPgTypeInfoResolver CreateResolver();
    public abstract virtual IPgTypeInfoResolver CreateArrayResolver();
    public virtual IPgTypeInfoResolver CreateRangeResolver();
    public virtual IPgTypeInfoResolver CreateRangeArrayResolver();
    public virtual IPgTypeInfoResolver CreateMultirangeResolver();
    public virtual IPgTypeInfoResolver CreateMultirangeArrayResolver();
}
[ExperimentalAttribute("NPG9001")]
public class Npgsql.Internal.PgWriter : object {
    [NullableAttribute("1")]
private IBufferWriter`1<byte> _writer;
    [NullableAttribute("2")]
private Byte[] _buffer;
    private int _offset;
    private int _pos;
    private int _length;
    private int _totalBytesWritten;
    private ValueMetadata _current;
    [NullableAttribute("2")]
private NpgsqlDatabaseInfo _typeCatalog;
    [CompilerGeneratedAttribute]
private FlushMode <FlushMode>k__BackingField;
    internal FlushMode FlushMode { get; private set; }
    private Span`1<byte> Span { get; }
    private int Remaining { get; }
    public ValueMetadata Current { get; }
    internal Size CurrentBufferRequirement { get; }
    internal bool BufferingWrite { get; }
    [NullableContextAttribute("1")]
internal PgWriter(IBufferWriter`1<byte> writer);
    [NullableContextAttribute("1")]
internal PgWriter Init(NpgsqlDatabaseInfo typeCatalog, FlushMode flushMode);
    private void RequestBuffer(int count);
    [CompilerGeneratedAttribute]
internal FlushMode get_FlushMode();
    [CompilerGeneratedAttribute]
private void set_FlushMode(FlushMode value);
    internal void RefreshBuffer();
    [NullableContextAttribute("1")]
internal PgWriter WithFlushMode(FlushMode mode);
    private void Ensure(int count);
    private Span`1<byte> get_Span();
    private int get_Remaining();
    private void Advance(int count);
    internal void Commit(Nullable`1<int> expectedByteCount);
    internal ValueTask BeginWrite(bool async, ValueMetadata current, CancellationToken cancellationToken);
    public ValueMetadata get_Current();
    internal Size get_CurrentBufferRequirement();
    internal bool get_BufferingWrite();
    public void WriteAsOid(PgTypeId pgTypeId);
    public void WriteByte(byte value);
    public void WriteInt16(short value);
    public void WriteInt32(int value);
    public void WriteInt64(long value);
    public void WriteUInt16(ushort value);
    public void WriteUInt32(UInt32 value);
    public void WriteUInt64(ulong value);
    public void WriteFloat(float value);
    public void WriteDouble(double value);
    public void WriteChars(ReadOnlySpan`1<char> data, Encoding encoding);
    public ValueTask WriteCharsAsync(ReadOnlyMemory`1<char> data, Encoding encoding, CancellationToken cancellationToken);
    public void WriteBytes(ReadOnlySpan`1<byte> buffer);
    internal void WriteBytes(bool allowMixedIO, ReadOnlySpan`1<byte> buffer);
    public ValueTask WriteBytesAsync(ReadOnlyMemory`1<byte> buffer, CancellationToken cancellationToken);
    internal ValueTask WriteBytesAsync(bool allowMixedIO, ReadOnlyMemory`1<byte> buffer, CancellationToken cancellationToken);
    [NullableContextAttribute("1")]
public Stream GetStream(bool allowMixedIO);
    public bool ShouldFlush(Size bufferRequirement);
    public bool ShouldFlush(int byteCount);
    public void Flush(TimeSpan timeout);
    private void Flush(bool allowWhenNonBlocking, TimeSpan timeout);
    public ValueTask FlushAsync(CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Npgsql.Internal.PgWriter/<FlushAsync>d__53")]
private ValueTask FlushAsync(bool allowWhenBlocking, CancellationToken cancellationToken);
    internal ValueTask Flush(bool async, CancellationToken cancellationToken);
    internal ValueTask`1<NestedWriteScope> BeginNestedWrite(bool async, Size bufferRequirement, int byteCount, object state, CancellationToken cancellationToken);
    [NullableContextAttribute("2")]
public NestedWriteScope BeginNestedWrite(Size bufferRequirement, int byteCount, object state);
    public ValueTask`1<NestedWriteScope> BeginNestedWriteAsync(Size bufferRequirement, int byteCount, object state, CancellationToken cancellationToken);
    [CompilerGeneratedAttribute]
private void <Ensure>g__Slow|17_0(int count);
    [CompilerGeneratedAttribute]
private void <WriteChars>g__Core|41_0(ReadOnlySpan`1<char> data, Encoding encoding);
    [AsyncStateMachineAttribute("Npgsql.Internal.PgWriter/<<WriteCharsAsync>g__Core|42_0>d")]
[CompilerGeneratedAttribute]
private ValueTask <WriteCharsAsync>g__Core|42_0(ReadOnlyMemory`1<char> data, Encoding encoding, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Npgsql.Internal.PgWriter/<<WriteBytesAsync>g__Core|46_0>d")]
[CompilerGeneratedAttribute]
private ValueTask <WriteBytesAsync>g__Core|46_0(bool allowMixedIO, ReadOnlyMemory`1<byte> buffer, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Npgsql.Internal.PgWriter/<<BeginNestedWrite>g__Core|55_0>d")]
[CompilerGeneratedAttribute]
[AsyncMethodBuilderAttribute("System.Runtime.CompilerServices.PoolingAsyncValueTaskMethodBuilder`1")]
private ValueTask`1<NestedWriteScope> <BeginNestedWrite>g__Core|55_0(bool async, CancellationToken cancellationToken);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[IsReadOnlyAttribute]
[ExperimentalAttribute("NPG9001")]
[DebuggerDisplayAttribute("{DisplayName,nq}")]
public class Npgsql.Internal.Postgres.DataTypeName : ValueType {
    internal static int NAMEDATALEN;
    private string _value;
    public string DisplayName { get; }
    public string UnqualifiedDisplayName { get; }
    [NullableAttribute("0")]
internal ReadOnlySpan`1<char> SchemaSpan { get; }
    public string Schema { get; }
    [NullableAttribute("0")]
internal ReadOnlySpan`1<char> UnqualifiedNameSpan { get; }
    public string UnqualifiedName { get; }
    public string Value { get; }
    public static DataTypeName Unspecified { get; }
    public bool IsArray { get; }
    private DataTypeName(string fullyQualifiedDataTypeName, bool validated);
    public DataTypeName(string fullyQualifiedDataTypeName);
    internal static DataTypeName ValidatedName(string fullyQualifiedDataTypeName);
    public string get_DisplayName();
    public string get_UnqualifiedDisplayName();
    [NullableContextAttribute("0")]
internal ReadOnlySpan`1<char> get_SchemaSpan();
    public string get_Schema();
    [NullableContextAttribute("0")]
internal ReadOnlySpan`1<char> get_UnqualifiedNameSpan();
    public string get_UnqualifiedName();
    public string get_Value();
    private static string ThrowDefaultException();
    public static string op_Implicit(DataTypeName value);
    public static DataTypeName get_Unspecified();
    public bool get_IsArray();
    internal static DataTypeName CreateFullyQualifiedName(string dataTypeName);
    public DataTypeName ToArrayName();
    public DataTypeName ToDefaultMultirangeName();
    public static DataTypeName FromDisplayName(string displayName, string schema);
    [NullableContextAttribute("0")]
private static string ToDisplayName(ReadOnlySpan`1<char> unqualifiedName);
    [NullableContextAttribute("0")]
internal static bool IsFullyQualified(ReadOnlySpan`1<char> dataTypeName);
    internal static string NormalizeName(string dataTypeName);
    public virtual string ToString();
    public sealed virtual bool Equals(DataTypeName other);
    [NullableContextAttribute("2")]
public virtual bool Equals(object obj);
    public virtual int GetHashCode();
    public static bool op_Equality(DataTypeName left, DataTypeName right);
    public static bool op_Inequality(DataTypeName left, DataTypeName right);
}
internal static class Npgsql.Internal.Postgres.DataTypeNames : object {
    public static DataTypeName Int2 { get; }
    public static DataTypeName Int4 { get; }
    public static DataTypeName Int4Range { get; }
    public static DataTypeName Int4Multirange { get; }
    public static DataTypeName Int8 { get; }
    public static DataTypeName Int8Range { get; }
    public static DataTypeName Int8Multirange { get; }
    public static DataTypeName Float4 { get; }
    public static DataTypeName Float8 { get; }
    public static DataTypeName Numeric { get; }
    public static DataTypeName NumRange { get; }
    public static DataTypeName NumMultirange { get; }
    public static DataTypeName Money { get; }
    public static DataTypeName Bool { get; }
    public static DataTypeName Box { get; }
    public static DataTypeName Circle { get; }
    public static DataTypeName Line { get; }
    public static DataTypeName LSeg { get; }
    public static DataTypeName Path { get; }
    public static DataTypeName Point { get; }
    public static DataTypeName Polygon { get; }
    public static DataTypeName Bpchar { get; }
    public static DataTypeName Text { get; }
    public static DataTypeName Varchar { get; }
    public static DataTypeName Char { get; }
    public static DataTypeName Name { get; }
    public static DataTypeName Bytea { get; }
    public static DataTypeName Date { get; }
    public static DataTypeName DateRange { get; }
    public static DataTypeName DateMultirange { get; }
    public static DataTypeName Time { get; }
    public static DataTypeName Timestamp { get; }
    public static DataTypeName TsRange { get; }
    public static DataTypeName TsMultirange { get; }
    public static DataTypeName TimestampTz { get; }
    public static DataTypeName TsTzRange { get; }
    public static DataTypeName TsTzMultirange { get; }
    public static DataTypeName Interval { get; }
    public static DataTypeName TimeTz { get; }
    public static DataTypeName Inet { get; }
    public static DataTypeName Cidr { get; }
    public static DataTypeName MacAddr { get; }
    public static DataTypeName MacAddr8 { get; }
    public static DataTypeName Bit { get; }
    public static DataTypeName Varbit { get; }
    public static DataTypeName TsVector { get; }
    public static DataTypeName TsQuery { get; }
    public static DataTypeName RegConfig { get; }
    public static DataTypeName Uuid { get; }
    public static DataTypeName Xml { get; }
    public static DataTypeName Json { get; }
    public static DataTypeName Jsonb { get; }
    public static DataTypeName Jsonpath { get; }
    public static DataTypeName Record { get; }
    public static DataTypeName RefCursor { get; }
    public static DataTypeName OidVector { get; }
    public static DataTypeName Int2Vector { get; }
    public static DataTypeName Oid { get; }
    public static DataTypeName Xid { get; }
    public static DataTypeName Xid8 { get; }
    public static DataTypeName Cid { get; }
    public static DataTypeName RegType { get; }
    public static DataTypeName Tid { get; }
    public static DataTypeName PgLsn { get; }
    public static DataTypeName Unknown { get; }
    public static DataTypeName Void { get; }
    public static DataTypeName get_Int2();
    public static DataTypeName get_Int4();
    public static DataTypeName get_Int4Range();
    public static DataTypeName get_Int4Multirange();
    public static DataTypeName get_Int8();
    public static DataTypeName get_Int8Range();
    public static DataTypeName get_Int8Multirange();
    public static DataTypeName get_Float4();
    public static DataTypeName get_Float8();
    public static DataTypeName get_Numeric();
    public static DataTypeName get_NumRange();
    public static DataTypeName get_NumMultirange();
    public static DataTypeName get_Money();
    public static DataTypeName get_Bool();
    public static DataTypeName get_Box();
    public static DataTypeName get_Circle();
    public static DataTypeName get_Line();
    public static DataTypeName get_LSeg();
    public static DataTypeName get_Path();
    public static DataTypeName get_Point();
    public static DataTypeName get_Polygon();
    public static DataTypeName get_Bpchar();
    public static DataTypeName get_Text();
    public static DataTypeName get_Varchar();
    public static DataTypeName get_Char();
    public static DataTypeName get_Name();
    public static DataTypeName get_Bytea();
    public static DataTypeName get_Date();
    public static DataTypeName get_DateRange();
    public static DataTypeName get_DateMultirange();
    public static DataTypeName get_Time();
    public static DataTypeName get_Timestamp();
    public static DataTypeName get_TsRange();
    public static DataTypeName get_TsMultirange();
    public static DataTypeName get_TimestampTz();
    public static DataTypeName get_TsTzRange();
    public static DataTypeName get_TsTzMultirange();
    public static DataTypeName get_Interval();
    public static DataTypeName get_TimeTz();
    public static DataTypeName get_Inet();
    public static DataTypeName get_Cidr();
    public static DataTypeName get_MacAddr();
    public static DataTypeName get_MacAddr8();
    public static DataTypeName get_Bit();
    public static DataTypeName get_Varbit();
    public static DataTypeName get_TsVector();
    public static DataTypeName get_TsQuery();
    public static DataTypeName get_RegConfig();
    public static DataTypeName get_Uuid();
    public static DataTypeName get_Xml();
    public static DataTypeName get_Json();
    public static DataTypeName get_Jsonb();
    public static DataTypeName get_Jsonpath();
    public static DataTypeName get_Record();
    public static DataTypeName get_RefCursor();
    public static DataTypeName get_OidVector();
    public static DataTypeName get_Int2Vector();
    public static DataTypeName get_Oid();
    public static DataTypeName get_Xid();
    public static DataTypeName get_Xid8();
    public static DataTypeName get_Cid();
    public static DataTypeName get_RegType();
    public static DataTypeName get_Tid();
    public static DataTypeName get_PgLsn();
    public static DataTypeName get_Unknown();
    public static DataTypeName get_Void();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[IsReadOnlyAttribute]
[ExperimentalAttribute("NPG9001")]
public class Npgsql.Internal.Postgres.Field : ValueType {
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    [CompilerGeneratedAttribute]
private PgTypeId <PgTypeId>k__BackingField;
    [CompilerGeneratedAttribute]
private int <TypeModifier>k__BackingField;
    public string Name { get; public set; }
    public PgTypeId PgTypeId { get; public set; }
    public int TypeModifier { get; public set; }
    public Field(string name, PgTypeId pgTypeId, int typeModifier);
    [CompilerGeneratedAttribute]
public string get_Name();
    [CompilerGeneratedAttribute]
public Void modreq(System.Runtime.CompilerServices.IsExternalInit) set_Name(string value);
    [CompilerGeneratedAttribute]
public PgTypeId get_PgTypeId();
    [CompilerGeneratedAttribute]
public Void modreq(System.Runtime.CompilerServices.IsExternalInit) set_PgTypeId(PgTypeId value);
    [CompilerGeneratedAttribute]
public int get_TypeModifier();
    [CompilerGeneratedAttribute]
public Void modreq(System.Runtime.CompilerServices.IsExternalInit) set_TypeModifier(int value);
}
[IsReadOnlyAttribute]
[ExperimentalAttribute("NPG9001")]
public class Npgsql.Internal.Postgres.Oid : ValueType {
    [CompilerGeneratedAttribute]
private UInt32 <Value>k__BackingField;
    public UInt32 Value { get; public set; }
    public static Oid Unspecified { get; }
    public Oid(UInt32 value);
    public static UInt32 op_Explicit(Oid oid);
    public static Oid op_Implicit(UInt32 oid);
    [CompilerGeneratedAttribute]
public UInt32 get_Value();
    [CompilerGeneratedAttribute]
public Void modreq(System.Runtime.CompilerServices.IsExternalInit) set_Value(UInt32 value);
    public static Oid get_Unspecified();
    [NullableContextAttribute("1")]
public virtual string ToString();
    public sealed virtual bool Equals(Oid other);
    [NullableContextAttribute("2")]
public virtual bool Equals(object obj);
    public virtual int GetHashCode();
    public static bool op_Equality(Oid left, Oid right);
    public static bool op_Inequality(Oid left, Oid right);
}
[IsReadOnlyAttribute]
[ExperimentalAttribute("NPG9001")]
public class Npgsql.Internal.Postgres.PgTypeId : ValueType {
    private DataTypeName _dataTypeName;
    private Oid _oid;
    [MemberNotNullWhenAttribute("True", "_dataTypeName")]
public bool IsDataTypeName { get; }
    public bool IsOid { get; }
    public DataTypeName DataTypeName { get; }
    public Oid Oid { get; }
    internal bool IsUnspecified { get; }
    public PgTypeId(DataTypeName name);
    public PgTypeId(Oid oid);
    [MemberNotNullWhenAttribute("True", "_dataTypeName")]
public bool get_IsDataTypeName();
    public bool get_IsOid();
    public DataTypeName get_DataTypeName();
    public Oid get_Oid();
    public static PgTypeId op_Implicit(DataTypeName name);
    public static PgTypeId op_Implicit(Oid id);
    [NullableContextAttribute("1")]
public virtual string ToString();
    public sealed virtual bool Equals(PgTypeId other);
    [NullableContextAttribute("2")]
public virtual bool Equals(object obj);
    public virtual int GetHashCode();
    public static bool op_Equality(PgTypeId left, PgTypeId right);
    public static bool op_Inequality(PgTypeId left, PgTypeId right);
    internal bool get_IsUnspecified();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Npgsql.Internal.RealIntegratedSecurityHandler : IntegratedSecurityHandler {
    public bool IsSupported { get; }
    public virtual bool get_IsSupported();
    public virtual ValueTask`1<string> GetUsername(bool async, bool includeRealm, ILogger connectionLogger, CancellationToken cancellationToken);
    public virtual ValueTask NegotiateAuthentication(bool async, NpgsqlConnector connector);
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
internal class Npgsql.Internal.RealTransportSecurityHandler : TransportSecurityHandler {
    [CompilerGeneratedAttribute]
private Func`1<X509Certificate2> <RootCertificateCallback>k__BackingField;
    public bool SupportEncryption { get; }
    public Func`1<X509Certificate2> RootCertificateCallback { get; public set; }
    public virtual bool get_SupportEncryption();
    [CompilerGeneratedAttribute]
public virtual Func`1<X509Certificate2> get_RootCertificateCallback();
    [CompilerGeneratedAttribute]
public virtual void set_RootCertificateCallback(Func`1<X509Certificate2> value);
    [NullableContextAttribute("1")]
public virtual Task NegotiateEncryption(bool async, NpgsqlConnector connector, SslMode sslMode, NpgsqlTimeout timeout, bool isFirstAttempt);
    [NullableContextAttribute("1")]
public virtual void AuthenticateSASLSha256Plus(NpgsqlConnector connector, String& mechanism, String& cbindFlag, String& cbind, Boolean& successfulBind);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Npgsql.Internal.ResolverFactories.AdoTypeInfoResolverFactory : PgTypeInfoResolverFactory {
    [CompilerGeneratedAttribute]
private Resolver <ResolverInstance>k__BackingField;
    [CompilerGeneratedAttribute]
private static AdoTypeInfoResolverFactory <Instance>k__BackingField;
    private Resolver ResolverInstance { get; }
    public static AdoTypeInfoResolverFactory Instance { get; }
    private static AdoTypeInfoResolverFactory();
    [CompilerGeneratedAttribute]
private Resolver get_ResolverInstance();
    [CompilerGeneratedAttribute]
public static AdoTypeInfoResolverFactory get_Instance();
    public virtual IPgTypeInfoResolver CreateResolver();
    public virtual IPgTypeInfoResolver CreateArrayResolver();
    public virtual IPgTypeInfoResolver CreateMultirangeResolver();
    public virtual IPgTypeInfoResolver CreateMultirangeArrayResolver();
    public virtual IPgTypeInfoResolver CreateRangeResolver();
    public virtual IPgTypeInfoResolver CreateRangeArrayResolver();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Npgsql.Internal.ResolverFactories.ExtraConversionResolverFactory : PgTypeInfoResolverFactory {
    public virtual IPgTypeInfoResolver CreateResolver();
    public virtual IPgTypeInfoResolver CreateArrayResolver();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Npgsql.Internal.ResolverFactories.FullTextSearchTypeInfoResolverFactory : PgTypeInfoResolverFactory {
    public virtual IPgTypeInfoResolver CreateResolver();
    public virtual IPgTypeInfoResolver CreateArrayResolver();
    [NullableContextAttribute("2")]
public static void ThrowIfUnsupported(Type type, Nullable`1<DataTypeName> dataTypeName, PgSerializerOptions options);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Npgsql.Internal.ResolverFactories.GeometricTypeInfoResolverFactory : PgTypeInfoResolverFactory {
    public virtual IPgTypeInfoResolver CreateResolver();
    public virtual IPgTypeInfoResolver CreateArrayResolver();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[RequiresUnreferencedCodeAttribute("Json serializer may perform reflection on trimmed types.")]
[RequiresDynamicCodeAttribute("Serializing arbitrary types to json can require creating new generic types or methods, which requires creating code at runtime. This may not work when AOT compiling.")]
internal class Npgsql.Internal.ResolverFactories.JsonDynamicTypeInfoResolverFactory : PgTypeInfoResolverFactory {
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private Type[] _jsonbClrTypes;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private Type[] _jsonClrTypes;
    [NullableAttribute("2")]
private JsonSerializerOptions _serializerOptions;
    [NullableContextAttribute("2")]
public JsonDynamicTypeInfoResolverFactory(Type[] jsonbClrTypes, Type[] jsonClrTypes, JsonSerializerOptions serializerOptions);
    public virtual IPgTypeInfoResolver CreateResolver();
    public virtual IPgTypeInfoResolver CreateArrayResolver();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Npgsql.Internal.ResolverFactories.JsonTypeInfoResolverFactory : PgTypeInfoResolverFactory {
    [NullableAttribute("2")]
private JsonSerializerOptions _serializerOptions;
    [NullableContextAttribute("2")]
public JsonTypeInfoResolverFactory(JsonSerializerOptions serializerOptions);
    public virtual IPgTypeInfoResolver CreateResolver();
    public virtual IPgTypeInfoResolver CreateArrayResolver();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Npgsql.Internal.ResolverFactories.LTreeTypeInfoResolverFactory : PgTypeInfoResolverFactory {
    public virtual IPgTypeInfoResolver CreateResolver();
    public virtual IPgTypeInfoResolver CreateArrayResolver();
    [NullableContextAttribute("2")]
public static void ThrowIfUnsupported(Type type, Nullable`1<DataTypeName> dataTypeName, PgSerializerOptions options);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Npgsql.Internal.ResolverFactories.NetworkTypeInfoResolverFactory : PgTypeInfoResolverFactory {
    public virtual IPgTypeInfoResolver CreateResolver();
    public virtual IPgTypeInfoResolver CreateArrayResolver();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Npgsql.Internal.ResolverFactories.RecordTypeInfoResolverFactory : PgTypeInfoResolverFactory {
    public virtual IPgTypeInfoResolver CreateResolver();
    public virtual IPgTypeInfoResolver CreateArrayResolver();
    [NullableContextAttribute("2")]
public static void ThrowIfUnsupported(Type type, Nullable`1<DataTypeName> dataTypeName, PgSerializerOptions options);
}
[RequiresUnreferencedCodeAttribute("Tupled record resolver may perform reflection on trimmed tuple types.")]
[RequiresDynamicCodeAttribute("Tupled records need to construct a generic converter for a statically unknown (value)tuple type.")]
internal class Npgsql.Internal.ResolverFactories.TupledRecordTypeInfoResolverFactory : PgTypeInfoResolverFactory {
    [NullableContextAttribute("1")]
public virtual IPgTypeInfoResolver CreateResolver();
    [NullableContextAttribute("1")]
public virtual IPgTypeInfoResolver CreateArrayResolver();
}
[RequiresUnreferencedCodeAttribute("The use of unmapped enums, ranges or multiranges requires reflection usage which is incompatible with trimming.")]
[RequiresDynamicCodeAttribute("The use of unmapped enums, ranges or multiranges requires dynamic code usage which is incompatible with NativeAOT.")]
internal class Npgsql.Internal.ResolverFactories.UnmappedTypeInfoResolverFactory : PgTypeInfoResolverFactory {
    [NullableContextAttribute("1")]
public virtual IPgTypeInfoResolver CreateResolver();
    [NullableContextAttribute("1")]
public virtual IPgTypeInfoResolver CreateArrayResolver();
    [NullableContextAttribute("1")]
public virtual IPgTypeInfoResolver CreateRangeResolver();
    [NullableContextAttribute("1")]
public virtual IPgTypeInfoResolver CreateRangeArrayResolver();
    [NullableContextAttribute("2")]
public virtual IPgTypeInfoResolver CreateMultirangeResolver();
    [NullableContextAttribute("2")]
public virtual IPgTypeInfoResolver CreateMultirangeArrayResolver();
}
internal class Npgsql.Internal.ResolverFactories.UnsupportedTypeInfoResolver`1 : object {
    [NullableContextAttribute("2")]
public sealed virtual PgTypeInfo GetTypeInfo(Type type, Nullable`1<DataTypeName> dataTypeName, PgSerializerOptions options);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[IsReadOnlyAttribute]
[ExperimentalAttribute("NPG9001")]
[DebuggerDisplayAttribute("{DebuggerDisplay,nq}")]
public class Npgsql.Internal.Size : ValueType {
    private int _value;
    private SizeKind _kind;
    [CompilerGeneratedAttribute]
private static Size <Unknown>k__BackingField;
    [CompilerGeneratedAttribute]
private static Size <Zero>k__BackingField;
    public int Value { get; }
    public SizeKind Kind { get; }
    public static Size Unknown { get; }
    public static Size Zero { get; }
    private string DebuggerDisplay { get; }
    private Size(SizeKind kind, int value);
    private static Size();
    public int get_Value();
    internal int GetValueOrDefault();
    public SizeKind get_Kind();
    public static Size Create(int byteCount);
    public static Size CreateUpperBound(int byteCount);
    [CompilerGeneratedAttribute]
public static Size get_Unknown();
    [CompilerGeneratedAttribute]
public static Size get_Zero();
    public Size Combine(Size result);
    public static Size op_Implicit(int value);
    private string get_DebuggerDisplay();
    public sealed virtual bool Equals(Size other);
    [NullableContextAttribute("2")]
public virtual bool Equals(object obj);
    public virtual int GetHashCode();
    public static bool op_Equality(Size left, Size right);
    public static bool op_Inequality(Size left, Size right);
    public virtual string ToString();
}
[IsReadOnlyAttribute]
[RequiredMemberAttribute]
public class Npgsql.Internal.SizeContext : ValueType {
    [CompilerGeneratedAttribute]
private Size <BufferRequirement>k__BackingField;
    [CompilerGeneratedAttribute]
private DataFormat <Format>k__BackingField;
    [RequiredMemberAttribute]
public Size BufferRequirement { get; public set; }
    public DataFormat Format { get; }
    [SetsRequiredMembersAttribute]
public SizeContext(DataFormat format, Size bufferRequirement);
    [CompilerGeneratedAttribute]
public Size get_BufferRequirement();
    [CompilerGeneratedAttribute]
public Void modreq(System.Runtime.CompilerServices.IsExternalInit) set_BufferRequirement(Size value);
    [CompilerGeneratedAttribute]
public DataFormat get_Format();
}
[ExperimentalAttribute("NPG9001")]
public enum Npgsql.Internal.SizeKind : Enum {
    public int value__;
    public static SizeKind Unknown;
    public static SizeKind Exact;
    public static SizeKind UpperBound;
}
internal enum Npgsql.Internal.TransactionStatus : Enum {
    public byte value__;
    public static TransactionStatus Idle;
    public static TransactionStatus InTransactionBlock;
    public static TransactionStatus InFailedTransactionBlock;
    public static TransactionStatus Pending;
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
internal class Npgsql.Internal.TransportSecurityHandler : object {
    public bool SupportEncryption { get; }
    public Func`1<X509Certificate2> RootCertificateCallback { get; public set; }
    public virtual bool get_SupportEncryption();
    public virtual Func`1<X509Certificate2> get_RootCertificateCallback();
    public virtual void set_RootCertificateCallback(Func`1<X509Certificate2> value);
    [NullableContextAttribute("1")]
public virtual Task NegotiateEncryption(bool async, NpgsqlConnector connector, SslMode sslMode, NpgsqlTimeout timeout, bool isFirstAttempt);
    [NullableContextAttribute("1")]
public virtual void AuthenticateSASLSha256Plus(NpgsqlConnector connector, String& mechanism, String& cbindFlag, String& cbind, Boolean& successfulBind);
}
internal class Npgsql.Internal.TypeInfoCache`1 : object {
    [NullableAttribute("1")]
private PgSerializerOptions _options;
    private bool _validatePgTypeIds;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private ConcurrentDictionary`2<Type, PgTypeInfo> _cacheByClrType;
    [TupleElementNamesAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private ConcurrentDictionary`2<TPgTypeId, ValueTuple`2[]> _cacheByPgTypeId;
    private static TypeInfoCache`1();
    [NullableContextAttribute("1")]
public TypeInfoCache`1(PgSerializerOptions options, bool validatePgTypeIds);
    [NullableContextAttribute("2")]
public PgTypeInfo GetOrAddInfo(Type type, Nullable`1<TPgTypeId> pgTypeId, bool defaultTypeFallback);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
internal static PgTypeInfo <GetOrAddInfo>g__FindMatch|6_0(Type type, ValueTuple`2[] infos, bool defaultTypeFallback);
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
private PgTypeInfo <GetOrAddInfo>g__AddByType|6_1(Type type);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
private PgTypeInfo <GetOrAddInfo>g__AddEntryById|6_2(Type type, TPgTypeId pgTypeId, ValueTuple`2[] infos, bool defaultTypeFallback);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
internal static PgTypeInfo <GetOrAddInfo>g__CreateInfo|6_3(Type type, Nullable`1<TPgTypeId> typeId, PgSerializerOptions options, bool defaultTypeFallback, bool validatePgTypeIds);
    [CompilerGeneratedAttribute]
internal static Nullable`1<PgTypeId> <GetOrAddInfo>g__AsPgTypeId|6_4(Nullable`1<TPgTypeId> pgTypeId);
}
[ExperimentalAttribute("NPG9001")]
public class Npgsql.Internal.TypeInfoFactory : MulticastDelegate {
    public TypeInfoFactory(object object, IntPtr method);
    [NullableContextAttribute("1")]
public virtual PgTypeInfo Invoke(PgSerializerOptions options, TypeInfoMapping mapping, bool resolvedDataTypeName);
    public virtual IAsyncResult BeginInvoke(PgSerializerOptions options, TypeInfoMapping mapping, bool resolvedDataTypeName, AsyncCallback callback, object object);
    public virtual PgTypeInfo EndInvoke(IAsyncResult result);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[IsReadOnlyAttribute]
[DebuggerDisplayAttribute("{DebuggerDisplay,nq}")]
[ExperimentalAttribute("NPG9001")]
public class Npgsql.Internal.TypeInfoMapping : ValueType {
    [CompilerGeneratedAttribute]
private TypeInfoFactory <Factory>k__BackingField;
    [CompilerGeneratedAttribute]
private Type <Type>k__BackingField;
    [CompilerGeneratedAttribute]
private string <DataTypeName>k__BackingField;
    [CompilerGeneratedAttribute]
private MatchRequirement <MatchRequirement>k__BackingField;
    [NullableAttribute("2")]
[CompilerGeneratedAttribute]
private Func`2<Type, bool> <TypeMatchPredicate>k__BackingField;
    public TypeInfoFactory Factory { get; public set; }
    public Type Type { get; public set; }
    public string DataTypeName { get; public set; }
    public MatchRequirement MatchRequirement { get; public set; }
    [NullableAttribute("2")]
public Func`2<Type, bool> TypeMatchPredicate { get; public set; }
    private string DebuggerDisplay { get; }
    public TypeInfoMapping(Type type, string dataTypeName, TypeInfoFactory factory);
    [CompilerGeneratedAttribute]
public TypeInfoFactory get_Factory();
    [CompilerGeneratedAttribute]
public Void modreq(System.Runtime.CompilerServices.IsExternalInit) set_Factory(TypeInfoFactory value);
    [CompilerGeneratedAttribute]
public Type get_Type();
    [CompilerGeneratedAttribute]
public Void modreq(System.Runtime.CompilerServices.IsExternalInit) set_Type(Type value);
    [CompilerGeneratedAttribute]
public string get_DataTypeName();
    [CompilerGeneratedAttribute]
public Void modreq(System.Runtime.CompilerServices.IsExternalInit) set_DataTypeName(string value);
    [CompilerGeneratedAttribute]
public MatchRequirement get_MatchRequirement();
    [CompilerGeneratedAttribute]
public Void modreq(System.Runtime.CompilerServices.IsExternalInit) set_MatchRequirement(MatchRequirement value);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public Func`2<Type, bool> get_TypeMatchPredicate();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public Void modreq(System.Runtime.CompilerServices.IsExternalInit) set_TypeMatchPredicate(Func`2<Type, bool> value);
    public bool TypeEquals(Type type);
    public bool DataTypeNameEquals(string dataTypeName);
    private string get_DebuggerDisplay();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ExperimentalAttribute("NPG9001")]
public class Npgsql.Internal.TypeInfoMappingCollection : object {
    [NullableAttribute("2")]
private TypeInfoMappingCollection _baseCollection;
    private List`1<TypeInfoMapping> _items;
    public IReadOnlyList`1<TypeInfoMapping> Items { get; }
    public TypeInfoMappingCollection(int capacity);
    public TypeInfoMappingCollection(TypeInfoMappingCollection baseCollection);
    public TypeInfoMappingCollection(IEnumerable`1<TypeInfoMapping> items);
    public IReadOnlyList`1<TypeInfoMapping> get_Items();
    [NullableContextAttribute("2")]
public PgTypeInfo Find(Type type, Nullable`1<DataTypeName> dataTypeName, PgSerializerOptions options);
    private bool TryGetMapping(Type type, string dataTypeName, TypeInfoMapping& value);
    private TypeInfoMapping GetMapping(Type type, string dataTypeName);
    private static TypeInfoFactory CreateComposedFactory(Type mappingType, TypeInfoMapping innerMapping, Func`3<TypeInfoMapping, PgTypeInfo, PgConverter> mapper, bool copyPreferredFormat, bool supportsWriting);
    private static TypeInfoFactory CreateComposedFactory(Type mappingType, TypeInfoMapping innerMapping, Func`3<TypeInfoMapping, PgResolverTypeInfo, PgConverterResolver> mapper, bool copyPreferredFormat, bool supportsWriting);
    private static Type ComputeUnboxedType(Type defaultType, Type converterType, Type matchedType);
    public void Add(TypeInfoMapping mapping);
    public void AddRange(TypeInfoMappingCollection collection);
    private Func`2<TypeInfoMapping, TypeInfoMapping> GetDefaultConfigure(bool isDefault);
    private Func`2<TypeInfoMapping, TypeInfoMapping> GetDefaultConfigure(MatchRequirement matchRequirement);
    private Func`2<Type, bool> GetArrayTypeMatchPredicate(Func`2<Type, bool> elementTypeMatchPredicate);
    [NullableContextAttribute("2")]
private Func`2<Type, bool> GetListTypeMatchPredicate(Func`2<Type, bool> elementTypeMatchPredicate);
    public void AddType(string dataTypeName, TypeInfoFactory createInfo, bool isDefault);
    public void AddType(string dataTypeName, TypeInfoFactory createInfo, MatchRequirement matchRequirement);
    public void AddType(string dataTypeName, TypeInfoFactory createInfo, Func`2<TypeInfoMapping, TypeInfoMapping> configure);
    public void AddResolverType(string dataTypeName, TypeInfoFactory createInfo, bool isDefault);
    public void AddResolverType(string dataTypeName, TypeInfoFactory createInfo, MatchRequirement matchRequirement);
    public void AddResolverType(string dataTypeName, TypeInfoFactory createInfo, Func`2<TypeInfoMapping, TypeInfoMapping> configure);
    public void AddArrayType(string elementDataTypeName);
    public void AddArrayType(string elementDataTypeName, bool suppressObjectMapping);
    public void AddArrayType(TypeInfoMapping elementMapping);
    public void AddArrayType(TypeInfoMapping elementMapping, bool suppressObjectMapping);
    public void AddResolverArrayType(string elementDataTypeName);
    public void AddResolverArrayType(string elementDataTypeName, bool suppressObjectMapping);
    public void AddResolverArrayType(TypeInfoMapping elementMapping);
    public void AddResolverArrayType(TypeInfoMapping elementMapping, bool suppressObjectMapping);
    public void AddStructType(string dataTypeName, TypeInfoFactory createInfo, bool isDefault);
    public void AddStructType(string dataTypeName, TypeInfoFactory createInfo, MatchRequirement matchRequirement);
    public void AddStructType(string dataTypeName, TypeInfoFactory createInfo, Func`2<TypeInfoMapping, TypeInfoMapping> configure);
    private void AddStructType(Type type, Type nullableType, string dataTypeName, TypeInfoFactory createInfo, Func`3<TypeInfoMapping, PgTypeInfo, PgConverter> nullableConverter, Func`2<TypeInfoMapping, TypeInfoMapping> configure);
    [NullableContextAttribute("0")]
public void AddStructArrayType(string elementDataTypeName);
    [NullableContextAttribute("0")]
public void AddStructArrayType(string elementDataTypeName, bool suppressObjectMapping);
    [NullableContextAttribute("0")]
public void AddStructArrayType(TypeInfoMapping elementMapping, TypeInfoMapping nullableElementMapping);
    [NullableContextAttribute("0")]
public void AddStructArrayType(TypeInfoMapping elementMapping, TypeInfoMapping nullableElementMapping, bool suppressObjectMapping);
    private void AddStructArrayType(TypeInfoMapping elementMapping, TypeInfoMapping nullableElementMapping, Type type, Type nullableType, Func`3<TypeInfoMapping, PgTypeInfo, PgConverter> converter, Func`3<TypeInfoMapping, PgTypeInfo, PgConverter> nullableConverter, Func`2<Type, bool> typeMatchPredicate, Func`2<Type, bool> nullableTypeMatchPredicate, bool suppressObjectMapping);
    public void AddResolverStructType(string dataTypeName, TypeInfoFactory createInfo, bool isDefault);
    public void AddResolverStructType(string dataTypeName, TypeInfoFactory createInfo, MatchRequirement matchRequirement);
    public void AddResolverStructType(string dataTypeName, TypeInfoFactory createInfo, Func`2<TypeInfoMapping, TypeInfoMapping> configure);
    private void AddResolverStructType(Type type, Type nullableType, string dataTypeName, TypeInfoFactory createInfo, Func`3<TypeInfoMapping, PgResolverTypeInfo, PgConverterResolver> nullableConverter, Func`2<TypeInfoMapping, TypeInfoMapping> configure);
    [NullableContextAttribute("0")]
public void AddResolverStructArrayType(string elementDataTypeName);
    [NullableContextAttribute("0")]
public void AddResolverStructArrayType(string elementDataTypeName, bool suppressObjectMapping);
    [NullableContextAttribute("0")]
public void AddResolverStructArrayType(TypeInfoMapping elementMapping, TypeInfoMapping nullableElementMapping);
    [NullableContextAttribute("0")]
public void AddResolverStructArrayType(TypeInfoMapping elementMapping, TypeInfoMapping nullableElementMapping, bool suppressObjectMapping);
    private void AddResolverStructArrayType(TypeInfoMapping elementMapping, TypeInfoMapping nullableElementMapping, Type type, Type nullableType, Func`3<TypeInfoMapping, PgResolverTypeInfo, PgConverterResolver> converter, Func`3<TypeInfoMapping, PgResolverTypeInfo, PgConverterResolver> nullableConverter, bool suppressObjectMapping, Func`2<Type, bool> typeMatchPredicate, Func`2<Type, bool> nullableTypeMatchPredicate);
    public void AddPolymorphicResolverArrayType(string elementDataTypeName, Func`2<PgSerializerOptions, Func`2<PgConverterResolution, PgConverter>> elementToArrayConverterFactory);
    public void AddPolymorphicResolverArrayType(TypeInfoMapping elementMapping, Func`2<PgSerializerOptions, Func`2<PgConverterResolution, PgConverter>> elementToArrayConverterFactory);
    [UnconditionalSuppressMessageAttribute("Trimming", "IL2070")]
public static bool IsArrayLikeType(Type type, Type& elementType);
    private static string GetArrayDataTypeName(string dataTypeName);
    private static ArrayBasedArrayConverter`2<Array, TElement> CreateArrayBasedConverter(TypeInfoMapping mapping, PgTypeInfo elemInfo);
    private static ListBasedArrayConverter`2<IList`1<TElement>, TElement> CreateListBasedConverter(TypeInfoMapping mapping, PgTypeInfo elemInfo);
    private static ArrayConverterResolver`2<Array, TElement> CreateArrayBasedConverterResolver(TypeInfoMapping mapping, PgResolverTypeInfo elemInfo);
    private static ArrayConverterResolver`2<IList`1<TElement>, TElement> CreateListBasedConverterResolver(TypeInfoMapping mapping, PgResolverTypeInfo elemInfo);
    [DoesNotReturnAttribute]
private static void ThrowBoxingNotSupported(bool resolver);
    [CompilerGeneratedAttribute]
internal static string <Find>g__ResolveFullyQualifiedDataTypeName|8_0(Nullable`1<DataTypeName> dataTypeName, string mappingDataTypeName, PgSerializerOptions options);
    [CompilerGeneratedAttribute]
private void <AddArrayType>g__AddArrayType|29_2(TypeInfoMapping elementMapping, Type type, Func`3<TypeInfoMapping, PgTypeInfo, PgConverter> converter, Func`2<Type, bool> typeMatchPredicate, bool suppressObjectMapping, <>c__DisplayClass29_0`1& );
    [CompilerGeneratedAttribute]
private void <AddResolverArrayType>g__AddResolverArrayType|33_2(TypeInfoMapping elementMapping, Type type, Func`3<TypeInfoMapping, PgResolverTypeInfo, PgConverterResolver> converter, Func`2<Type, bool> typeMatchPredicate, bool suppressObjectMapping, <>c__DisplayClass33_0`1& );
    [CompilerGeneratedAttribute]
internal static PgTypeInfo <AddStructArrayType>g__CreateComposedPerInstance|42_0(PgTypeInfo innerTypeInfo, PgTypeInfo nullableInnerTypeInfo, string dataTypeName);
    [CompilerGeneratedAttribute]
internal static PgTypeInfo <AddResolverStructArrayType>g__CreateComposedPerInstance|51_0(PgTypeInfo innerTypeInfo, PgTypeInfo nullableInnerTypeInfo, string dataTypeName);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ExtensionAttribute]
[ExperimentalAttribute("NPG9001")]
public static class Npgsql.Internal.TypeInfoMappingHelpers : object {
    internal static bool TryResolveFullyQualifiedName(PgSerializerOptions options, string dataTypeName, DataTypeName& fqDataTypeName);
    [ExtensionAttribute]
internal static PostgresType GetPgType(TypeInfoMapping mapping, PgSerializerOptions options);
    [ExtensionAttribute]
public static PgTypeInfo CreateInfo(TypeInfoMapping mapping, PgSerializerOptions options, PgConverter converter, Nullable`1<DataFormat> preferredFormat, bool supportsWriting);
    [ExtensionAttribute]
public static PgResolverTypeInfo CreateInfo(TypeInfoMapping mapping, PgSerializerOptions options, PgConverterResolver resolver, bool includeDataTypeName, Nullable`1<DataFormat> preferredFormat, bool supportsWriting);
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
[IsReadOnlyAttribute]
[RequiredMemberAttribute]
[ExperimentalAttribute("NPG9001")]
public class Npgsql.Internal.ValueMetadata : ValueType {
    [CompilerGeneratedAttribute]
private DataFormat <Format>k__BackingField;
    [CompilerGeneratedAttribute]
private Size <BufferRequirement>k__BackingField;
    [CompilerGeneratedAttribute]
private Size <Size>k__BackingField;
    [CompilerGeneratedAttribute]
private object <WriteState>k__BackingField;
    [RequiredMemberAttribute]
public DataFormat Format { get; public set; }
    [RequiredMemberAttribute]
public Size BufferRequirement { get; public set; }
    [RequiredMemberAttribute]
public Size Size { get; public set; }
    public object WriteState { get; public set; }
    [CompilerGeneratedAttribute]
public DataFormat get_Format();
    [CompilerGeneratedAttribute]
public Void modreq(System.Runtime.CompilerServices.IsExternalInit) set_Format(DataFormat value);
    [CompilerGeneratedAttribute]
public Size get_BufferRequirement();
    [CompilerGeneratedAttribute]
public Void modreq(System.Runtime.CompilerServices.IsExternalInit) set_BufferRequirement(Size value);
    [CompilerGeneratedAttribute]
public Size get_Size();
    [CompilerGeneratedAttribute]
public Void modreq(System.Runtime.CompilerServices.IsExternalInit) set_Size(Size value);
    [CompilerGeneratedAttribute]
public object get_WriteState();
    [CompilerGeneratedAttribute]
public Void modreq(System.Runtime.CompilerServices.IsExternalInit) set_WriteState(object value);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Npgsql.KerberosUsernameProvider : object {
    private static bool _performedDetection;
    [NullableAttribute("2")]
private static string _principalWithRealm;
    [NullableAttribute("2")]
private static string _principalWithoutRealm;
    internal static ValueTask`1<string> GetUsername(bool async, bool includeRealm, ILogger connectionLogger, CancellationToken cancellationToken);
    private static string ParseKListOutput(string line, bool includeRealm, ILogger connectionLogger);
    private static string FindInPath(string name);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal static class Npgsql.LogMessages : object {
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[GeneratedCodeAttribute("Microsoft.Extensions.Logging.Generators", "8.0.9.3103")]
private static Action`2<ILogger, Exception> __CaughtUserExceptionInNoticeEventHandlerCallback;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[GeneratedCodeAttribute("Microsoft.Extensions.Logging.Generators", "8.0.9.3103")]
private static Action`2<ILogger, Exception> __CaughtUserExceptionInNotificationEventHandlerCallback;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[GeneratedCodeAttribute("Microsoft.Extensions.Logging.Generators", "8.0.9.3103")]
private static Action`2<ILogger, Exception> __ExceptionWhenOpeningConnectionForMultiplexingCallback;
    private static LogMessages();
    [LoggerMessageAttribute]
[GeneratedCodeAttribute("Microsoft.Extensions.Logging.Generators", "8.0.9.3103")]
internal static void OpeningConnection(ILogger logger, string Host, int Port, string Database, string ConnectionString);
    [LoggerMessageAttribute]
[GeneratedCodeAttribute("Microsoft.Extensions.Logging.Generators", "8.0.9.3103")]
internal static void OpenedConnection(ILogger logger, string Host, int Port, string Database, string ConnectionString, int ConnectorId);
    [LoggerMessageAttribute]
[GeneratedCodeAttribute("Microsoft.Extensions.Logging.Generators", "8.0.9.3103")]
internal static void OpenedMultiplexingConnection(ILogger logger, string Host, int Port, string Database, string ConnectionString);
    [LoggerMessageAttribute]
[GeneratedCodeAttribute("Microsoft.Extensions.Logging.Generators", "8.0.9.3103")]
internal static void ClosingConnection(ILogger logger, string Host, int Port, string Database, string ConnectionString, int ConnectorId);
    [LoggerMessageAttribute]
[GeneratedCodeAttribute("Microsoft.Extensions.Logging.Generators", "8.0.9.3103")]
internal static void ClosedConnection(ILogger logger, string Host, int Port, string Database, string ConnectionString, int ConnectorId);
    [LoggerMessageAttribute]
[GeneratedCodeAttribute("Microsoft.Extensions.Logging.Generators", "8.0.9.3103")]
internal static void ClosedMultiplexingConnection(ILogger logger, string Host, int Port, string Database, string ConnectionString);
    [LoggerMessageAttribute]
[GeneratedCodeAttribute("Microsoft.Extensions.Logging.Generators", "8.0.9.3103")]
internal static void OpeningPhysicalConnection(ILogger logger, string Host, int Port, string Database, string ConnectionString);
    [LoggerMessageAttribute]
[GeneratedCodeAttribute("Microsoft.Extensions.Logging.Generators", "8.0.9.3103")]
internal static void OpenedPhysicalConnection(ILogger logger, string Host, int Port, string Database, string ConnectionString, long DurationMs, int ConnectorId);
    [LoggerMessageAttribute]
[GeneratedCodeAttribute("Microsoft.Extensions.Logging.Generators", "8.0.9.3103")]
internal static void ClosingPhysicalConnection(ILogger logger, string Host, int Port, string Database, string ConnectionString, int ConnectorId);
    [LoggerMessageAttribute]
[GeneratedCodeAttribute("Microsoft.Extensions.Logging.Generators", "8.0.9.3103")]
internal static void ClosedPhysicalConnection(ILogger logger, string Host, int Port, string Database, string ConnectionString, int ConnectorId);
    [LoggerMessageAttribute]
[GeneratedCodeAttribute("Microsoft.Extensions.Logging.Generators", "8.0.9.3103")]
internal static void StartingWait(ILogger logger, int TimeoutMs, int ConnectorId);
    [LoggerMessageAttribute]
[GeneratedCodeAttribute("Microsoft.Extensions.Logging.Generators", "8.0.9.3103")]
internal static void ReceivedNotice(ILogger logger, string NoticeText, int ConnectorId);
    [LoggerMessageAttribute]
[GeneratedCodeAttribute("Microsoft.Extensions.Logging.Generators", "8.0.9.3103")]
internal static void ConnectionExceededMaximumLifetime(ILogger logger, TimeSpan ConnectionMaximumLifeTime, int ConnectorId);
    [LoggerMessageAttribute]
[GeneratedCodeAttribute("Microsoft.Extensions.Logging.Generators", "8.0.9.3103")]
internal static void SendingKeepalive(ILogger logger, int ConnectorId);
    [LoggerMessageAttribute]
[GeneratedCodeAttribute("Microsoft.Extensions.Logging.Generators", "8.0.9.3103")]
internal static void CompletedKeepalive(ILogger logger, int ConnectorId);
    [LoggerMessageAttribute]
[GeneratedCodeAttribute("Microsoft.Extensions.Logging.Generators", "8.0.9.3103")]
internal static void KeepaliveFailed(ILogger logger, int ConnectorId, Exception exception);
    [LoggerMessageAttribute]
[GeneratedCodeAttribute("Microsoft.Extensions.Logging.Generators", "8.0.9.3103")]
internal static void BreakingConnection(ILogger logger, int ConnectorId, Exception exception);
    [LoggerMessageAttribute]
[GeneratedCodeAttribute("Microsoft.Extensions.Logging.Generators", "8.0.9.3103")]
internal static void CaughtUserExceptionInNoticeEventHandler(ILogger logger, Exception exception);
    [LoggerMessageAttribute]
[GeneratedCodeAttribute("Microsoft.Extensions.Logging.Generators", "8.0.9.3103")]
internal static void CaughtUserExceptionInNotificationEventHandler(ILogger logger, Exception exception);
    [LoggerMessageAttribute]
[GeneratedCodeAttribute("Microsoft.Extensions.Logging.Generators", "8.0.9.3103")]
internal static void ExceptionWhenClosingPhysicalConnection(ILogger logger, int ConnectorId, Exception exception);
    [LoggerMessageAttribute]
[GeneratedCodeAttribute("Microsoft.Extensions.Logging.Generators", "8.0.9.3103")]
internal static void ExceptionWhenOpeningConnectionForMultiplexing(ILogger logger, Exception exception);
    [LoggerMessageAttribute]
[GeneratedCodeAttribute("Microsoft.Extensions.Logging.Generators", "8.0.9.3103")]
internal static void StartUserAction(ILogger logger, int ConnectorId);
    [LoggerMessageAttribute]
[GeneratedCodeAttribute("Microsoft.Extensions.Logging.Generators", "8.0.9.3103")]
internal static void EndUserAction(ILogger logger, int ConnectorId);
    [LoggerMessageAttribute]
[GeneratedCodeAttribute("Microsoft.Extensions.Logging.Generators", "8.0.9.3103")]
internal static void ExecutingCommand(ILogger logger, string CommandText, int ConnectorId);
    [LoggerMessageAttribute]
[GeneratedCodeAttribute("Microsoft.Extensions.Logging.Generators", "8.0.9.3103")]
internal static void ExecutingCommandWithParameters(ILogger logger, string CommandText, IEnumerable`1<object> Parameters, int ConnectorId);
    [LoggerMessageAttribute]
[GeneratedCodeAttribute("Microsoft.Extensions.Logging.Generators", "8.0.9.3103")]
internal static void ExecutingBatch(ILogger logger, String[] BatchCommands, int ConnectorId);
    [LoggerMessageAttribute]
[GeneratedCodeAttribute("Microsoft.Extensions.Logging.Generators", "8.0.9.3103")]
internal static void ExecutingBatchWithParameters(ILogger logger, ValueTuple`2[] BatchCommands, int ConnectorId);
    [LoggerMessageAttribute]
[GeneratedCodeAttribute("Microsoft.Extensions.Logging.Generators", "8.0.9.3103")]
internal static void CommandExecutionCompleted(ILogger logger, string CommandText, long DurationMs, int ConnectorId);
    [LoggerMessageAttribute]
[GeneratedCodeAttribute("Microsoft.Extensions.Logging.Generators", "8.0.9.3103")]
internal static void CommandExecutionCompletedWithParameters(ILogger logger, string CommandText, IEnumerable`1<object> Parameters, long DurationMs, int ConnectorId);
    [LoggerMessageAttribute]
[GeneratedCodeAttribute("Microsoft.Extensions.Logging.Generators", "8.0.9.3103")]
internal static void BatchExecutionCompleted(ILogger logger, String[] BatchCommands, long DurationMs, int ConnectorId);
    [LoggerMessageAttribute]
[GeneratedCodeAttribute("Microsoft.Extensions.Logging.Generators", "8.0.9.3103")]
internal static void BatchExecutionCompletedWithParameters(ILogger logger, ValueTuple`2[] BatchCommands, long DurationMs, int ConnectorId);
    [LoggerMessageAttribute]
[GeneratedCodeAttribute("Microsoft.Extensions.Logging.Generators", "8.0.9.3103")]
internal static void CancellingCommand(ILogger logger, int ConnectorId);
    [LoggerMessageAttribute]
[GeneratedCodeAttribute("Microsoft.Extensions.Logging.Generators", "8.0.9.3103")]
internal static void ExecutingInternalCommand(ILogger logger, string CommandText, int ConnectorId);
    [LoggerMessageAttribute]
[GeneratedCodeAttribute("Microsoft.Extensions.Logging.Generators", "8.0.9.3103")]
internal static void PreparingCommandExplicitly(ILogger logger, string CommandText, int ConnectorId);
    [LoggerMessageAttribute]
[GeneratedCodeAttribute("Microsoft.Extensions.Logging.Generators", "8.0.9.3103")]
internal static void CommandPreparedExplicitly(ILogger logger, int ConnectorId);
    [LoggerMessageAttribute]
[GeneratedCodeAttribute("Microsoft.Extensions.Logging.Generators", "8.0.9.3103")]
internal static void AutoPreparingStatement(ILogger logger, string CommandText, int ConnectorId);
    [LoggerMessageAttribute]
[GeneratedCodeAttribute("Microsoft.Extensions.Logging.Generators", "8.0.9.3103")]
internal static void UnpreparingCommand(ILogger logger, int ConnectorId);
    [LoggerMessageAttribute]
[GeneratedCodeAttribute("Microsoft.Extensions.Logging.Generators", "8.0.9.3103")]
internal static void DerivingParameters(ILogger logger, string CommandText, int ConnectorId);
    [LoggerMessageAttribute]
[GeneratedCodeAttribute("Microsoft.Extensions.Logging.Generators", "8.0.9.3103")]
internal static void ExceptionWhenWritingMultiplexedCommands(ILogger logger, int ConnectorId, Exception exception);
    [LoggerMessageAttribute]
[GeneratedCodeAttribute("Microsoft.Extensions.Logging.Generators", "8.0.9.3103")]
internal static void ReaderCleanup(ILogger logger, int ConnectorId);
    [LoggerMessageAttribute]
[GeneratedCodeAttribute("Microsoft.Extensions.Logging.Generators", "8.0.9.3103")]
internal static void StartedTransaction(ILogger logger, IsolationLevel IsolationLevel, int ConnectorId);
    [LoggerMessageAttribute]
[GeneratedCodeAttribute("Microsoft.Extensions.Logging.Generators", "8.0.9.3103")]
internal static void CommittedTransaction(ILogger logger, int ConnectorId);
    [LoggerMessageAttribute]
[GeneratedCodeAttribute("Microsoft.Extensions.Logging.Generators", "8.0.9.3103")]
internal static void RolledBackTransaction(ILogger logger, int ConnectorId);
    [LoggerMessageAttribute]
[GeneratedCodeAttribute("Microsoft.Extensions.Logging.Generators", "8.0.9.3103")]
internal static void CreatingSavepoint(ILogger logger, string SavepointName, int ConnectorId);
    [LoggerMessageAttribute]
[GeneratedCodeAttribute("Microsoft.Extensions.Logging.Generators", "8.0.9.3103")]
internal static void RolledBackToSavepoint(ILogger logger, string SavepointName, int ConnectorId);
    [LoggerMessageAttribute]
[GeneratedCodeAttribute("Microsoft.Extensions.Logging.Generators", "8.0.9.3103")]
internal static void ReleasedSavepoint(ILogger logger, string SavepointName, int ConnectorId);
    [LoggerMessageAttribute]
[GeneratedCodeAttribute("Microsoft.Extensions.Logging.Generators", "8.0.9.3103")]
internal static void ExceptionDuringTransactionDispose(ILogger logger, int ConnectorId, Exception exception);
    [LoggerMessageAttribute]
[GeneratedCodeAttribute("Microsoft.Extensions.Logging.Generators", "8.0.9.3103")]
internal static void EnlistedVolatileResourceManager(ILogger logger, string LocalTransactionIdentifier, int ConnectorId);
    [LoggerMessageAttribute]
[GeneratedCodeAttribute("Microsoft.Extensions.Logging.Generators", "8.0.9.3103")]
internal static void CommittingSinglePhaseTransaction(ILogger logger, string LocalTransactionIdentifier, int ConnectorId);
    [LoggerMessageAttribute]
[GeneratedCodeAttribute("Microsoft.Extensions.Logging.Generators", "8.0.9.3103")]
internal static void RollingBackSinglePhaseTransaction(ILogger logger, string LocalTransactionIdentifier, int ConnectorId);
    [LoggerMessageAttribute]
[GeneratedCodeAttribute("Microsoft.Extensions.Logging.Generators", "8.0.9.3103")]
internal static void SinglePhaseTransactionRollbackFailed(ILogger logger, string LocalTransactionIdentifier, int ConnectorId);
    [LoggerMessageAttribute]
[GeneratedCodeAttribute("Microsoft.Extensions.Logging.Generators", "8.0.9.3103")]
internal static void PreparingTwoPhaseTransaction(ILogger logger, string LocalTransactionIdentifier, int ConnectorId);
    [LoggerMessageAttribute]
[GeneratedCodeAttribute("Microsoft.Extensions.Logging.Generators", "8.0.9.3103")]
internal static void CommittingTwoPhaseTransaction(ILogger logger, string LocalTransactionIdentifier, int ConnectorId);
    [LoggerMessageAttribute]
[GeneratedCodeAttribute("Microsoft.Extensions.Logging.Generators", "8.0.9.3103")]
internal static void TwoPhaseTransactionCommitFailed(ILogger logger, string LocalTransactionIdentifier, int ConnectorId, Exception exception);
    [LoggerMessageAttribute]
[GeneratedCodeAttribute("Microsoft.Extensions.Logging.Generators", "8.0.9.3103")]
internal static void RollingBackTwoPhaseTransaction(ILogger logger, string LocalTransactionIdentifier, int ConnectorId);
    [LoggerMessageAttribute]
[GeneratedCodeAttribute("Microsoft.Extensions.Logging.Generators", "8.0.9.3103")]
internal static void TwoPhaseTransactionRollbackFailed(ILogger logger, string LocalTransactionIdentifier, int ConnectorId, Exception exception);
    [LoggerMessageAttribute]
[GeneratedCodeAttribute("Microsoft.Extensions.Logging.Generators", "8.0.9.3103")]
internal static void TwoPhaseTransactionInDoubt(ILogger logger, string LocalTransactionIdentifier, int ConnectorId);
    [LoggerMessageAttribute]
[GeneratedCodeAttribute("Microsoft.Extensions.Logging.Generators", "8.0.9.3103")]
internal static void ConnectionInUseWhenRollingBack(ILogger logger, string LocalTransactionIdentifier, int ConnectorId);
    [LoggerMessageAttribute]
[GeneratedCodeAttribute("Microsoft.Extensions.Logging.Generators", "8.0.9.3103")]
internal static void CleaningUpResourceManager(ILogger logger, string LocalTransactionIdentifier, int ConnectorId);
    [LoggerMessageAttribute]
[GeneratedCodeAttribute("Microsoft.Extensions.Logging.Generators", "8.0.9.3103")]
internal static void StartingBinaryExport(ILogger logger, int ConnectorId);
    [LoggerMessageAttribute]
[GeneratedCodeAttribute("Microsoft.Extensions.Logging.Generators", "8.0.9.3103")]
internal static void StartingBinaryImport(ILogger logger, int ConnectorId);
    [LoggerMessageAttribute]
[GeneratedCodeAttribute("Microsoft.Extensions.Logging.Generators", "8.0.9.3103")]
internal static void StartingTextExport(ILogger logger, int ConnectorId);
    [LoggerMessageAttribute]
[GeneratedCodeAttribute("Microsoft.Extensions.Logging.Generators", "8.0.9.3103")]
internal static void StartingTextImport(ILogger logger, int ConnectorId);
    [LoggerMessageAttribute]
[GeneratedCodeAttribute("Microsoft.Extensions.Logging.Generators", "8.0.9.3103")]
internal static void StartingRawCopy(ILogger logger, int ConnectorId);
    [LoggerMessageAttribute]
[GeneratedCodeAttribute("Microsoft.Extensions.Logging.Generators", "8.0.9.3103")]
internal static void BinaryCopyOperationCompleted(ILogger logger, ulong Rows, int ConnectorId);
    [LoggerMessageAttribute]
[GeneratedCodeAttribute("Microsoft.Extensions.Logging.Generators", "8.0.9.3103")]
internal static void CopyOperationCompleted(ILogger logger, int ConnectorId);
    [LoggerMessageAttribute]
[GeneratedCodeAttribute("Microsoft.Extensions.Logging.Generators", "8.0.9.3103")]
internal static void CopyOperationCancelled(ILogger logger, int ConnectorId);
    [LoggerMessageAttribute]
[GeneratedCodeAttribute("Microsoft.Extensions.Logging.Generators", "8.0.9.3103")]
internal static void ExceptionWhenDisposingCopyOperation(ILogger logger, int ConnectorId, Exception exception);
    [LoggerMessageAttribute]
[GeneratedCodeAttribute("Microsoft.Extensions.Logging.Generators", "8.0.9.3103")]
internal static void CreatingReplicationSlot(ILogger logger, string SlotName, string CommandText, int ConnectorId);
    [LoggerMessageAttribute]
[GeneratedCodeAttribute("Microsoft.Extensions.Logging.Generators", "8.0.9.3103")]
internal static void DroppingReplicationSlot(ILogger logger, string SlotName, string CommandText, int ConnectorId);
    [LoggerMessageAttribute]
[GeneratedCodeAttribute("Microsoft.Extensions.Logging.Generators", "8.0.9.3103")]
internal static void StartingLogicalReplication(ILogger logger, string SlotName, string CommandText, int ConnectorId);
    [LoggerMessageAttribute]
[GeneratedCodeAttribute("Microsoft.Extensions.Logging.Generators", "8.0.9.3103")]
internal static void StartingPhysicalReplication(ILogger logger, string SlotName, string CommandText, int ConnectorId);
    [LoggerMessageAttribute]
[GeneratedCodeAttribute("Microsoft.Extensions.Logging.Generators", "8.0.9.3103")]
internal static void ExecutingReplicationCommand(ILogger logger, string CommandText, int ConnectorId);
    [LoggerMessageAttribute]
[GeneratedCodeAttribute("Microsoft.Extensions.Logging.Generators", "8.0.9.3103")]
internal static void ReceivedReplicationPrimaryKeepalive(ILogger logger, NpgsqlLogSequenceNumber EndLsn, DateTime Timestamp, int ConnectorId);
    [LoggerMessageAttribute]
[GeneratedCodeAttribute("Microsoft.Extensions.Logging.Generators", "8.0.9.3103")]
internal static void SendingReplicationStandbyStatusUpdate(ILogger logger, string Reason, int ConnectorId);
    [LoggerMessageAttribute]
[GeneratedCodeAttribute("Microsoft.Extensions.Logging.Generators", "8.0.9.3103")]
internal static void SentReplicationFeedbackMessage(ILogger logger, NpgsqlLogSequenceNumber LastReceivedLsn, NpgsqlLogSequenceNumber LastFlushedLsn, NpgsqlLogSequenceNumber LastAppliedLsn, DateTime Timestamp, int ConnectorId);
    [LoggerMessageAttribute]
[GeneratedCodeAttribute("Microsoft.Extensions.Logging.Generators", "8.0.9.3103")]
internal static void ReplicationFeedbackMessageSendingFailed(ILogger logger, Nullable`1<int> ConnectorId, Exception exception);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Npgsql.MetricsReporter : object {
    private static string Version;
    private static Meter Meter;
    private static UpDownCounter`1<int> CommandsExecuting;
    private static Counter`1<int> CommandsFailed;
    private static Histogram`1<double> CommandDuration;
    private static Counter`1<long> BytesWritten;
    private static Counter`1<long> BytesRead;
    private static UpDownCounter`1<int> PendingConnectionRequests;
    private static Counter`1<int> ConnectionTimeouts;
    private static Histogram`1<double> ConnectionCreateTime;
    private static ObservableGauge`1<double> PreparedRatio;
    private NpgsqlDataSource _dataSource;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private KeyValuePair`2<string, object> _poolNameTag;
    private static List`1<MetricsReporter> Reporters;
    private CommandCounters _commandCounters;
    private static MetricsReporter();
    public MetricsReporter(NpgsqlDataSource dataSource);
    internal long ReportCommandStart();
    internal void ReportCommandStop(long startTimestamp);
    internal void CommandStartPrepared();
    internal void ReportCommandFailed();
    internal void ReportBytesWritten(long bytesWritten);
    internal void ReportBytesRead(long bytesRead);
    internal void ReportConnectionPoolTimeout();
    internal void ReportPendingConnectionRequestStart();
    internal void ReportPendingConnectionRequestStop();
    internal void ReportConnectionCreateTime(TimeSpan duration);
    private static IEnumerable`1<Measurement`1<int>> GetConnectionUsage();
    private static IEnumerable`1<Measurement`1<int>> GetMaxConnections();
    private static IEnumerable`1<Measurement`1<double>> GetPreparedCommandsRatio();
    public sealed virtual void Dispose();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Npgsql.MultiHostDataSourceWrapper : NpgsqlDataSource {
    private NpgsqlMultiHostDataSource _wrappedSource;
    internal bool OwnsConnectors { get; }
    [TupleElementNamesAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[NullableAttribute("0")]
internal ValueTuple`3<int, int, int> Statistics { get; }
    public MultiHostDataSourceWrapper(NpgsqlMultiHostDataSource source, TargetSessionAttributes targetSessionAttributes);
    internal virtual bool get_OwnsConnectors();
    private static NpgsqlConnectionStringBuilder CloneSettingsForTargetSessionAttributes(NpgsqlConnectionStringBuilder settings, TargetSessionAttributes targetSessionAttributes);
    [NullableContextAttribute("0")]
internal virtual ValueTuple`3<int, int, int> get_Statistics();
    internal virtual void Clear();
    internal virtual ValueTask`1<NpgsqlConnector> Get(NpgsqlConnection conn, NpgsqlTimeout timeout, bool async, CancellationToken cancellationToken);
    [NullableContextAttribute("2")]
internal virtual bool TryGetIdleConnector(NpgsqlConnector& connector);
    internal virtual ValueTask`1<NpgsqlConnector> OpenNewConnector(NpgsqlConnection conn, NpgsqlTimeout timeout, bool async, CancellationToken cancellationToken);
    internal virtual void Return(NpgsqlConnector connector);
    internal virtual void AddPendingEnlistedConnector(NpgsqlConnector connector, Transaction transaction);
    internal virtual bool TryRemovePendingEnlistedConnector(NpgsqlConnector connector, Transaction transaction);
    internal virtual bool TryRentEnlistedPending(Transaction transaction, NpgsqlConnection connection, NpgsqlConnector& connector);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Npgsql.MultiplexingDataSource : PoolingDataSource {
    private ILogger _connectionLogger;
    private ILogger _commandLogger;
    private bool _autoPrepare;
    private ChannelReader`1<NpgsqlCommand> _multiplexCommandReader;
    [CompilerGeneratedAttribute]
private ChannelWriter`1<NpgsqlCommand> <MultiplexCommandWriter>k__BackingField;
    private Task _multiplexWriteLoop;
    private int _writeCoalescingBufferThresholdBytes;
    private static int MultiplexingCommandChannelBound;
    internal ChannelWriter`1<NpgsqlCommand> MultiplexCommandWriter { get; }
    internal MultiplexingDataSource(NpgsqlConnectionStringBuilder settings, NpgsqlDataSourceConfiguration dataSourceConfig);
    [CompilerGeneratedAttribute]
internal ChannelWriter`1<NpgsqlCommand> get_MultiplexCommandWriter();
    [AsyncStateMachineAttribute("Npgsql.MultiplexingDataSource/<MultiplexingWriteLoop>d__11")]
private Task MultiplexingWriteLoop();
    protected virtual void DisposeBase();
    [AsyncStateMachineAttribute("Npgsql.MultiplexingDataSource/<DisposeAsyncBase>d__13")]
protected virtual ValueTask DisposeAsyncBase();
    [CompilerGeneratedAttribute]
private void <.ctor>b__10_0(Task t);
    [CompilerGeneratedAttribute]
private bool <MultiplexingWriteLoop>g__WriteCommand|11_0(NpgsqlConnector connector, NpgsqlCommand command, MultiplexingStats& stats);
    [CompilerGeneratedAttribute]
private void <MultiplexingWriteLoop>g__Flush|11_1(NpgsqlConnector connector, MultiplexingStats& stats);
    [CompilerGeneratedAttribute]
private void <MultiplexingWriteLoop>g__FailWrite|11_2(NpgsqlConnector connector, Exception exception);
    [CompilerGeneratedAttribute]
internal static void <MultiplexingWriteLoop>g__CompleteWrite|11_3(NpgsqlConnector connector, MultiplexingStats& stats);
    [CompilerGeneratedAttribute]
[DebuggerHiddenAttribute]
private ValueTask <>n__0();
}
public class Npgsql.NameTranslation.NpgsqlNullNameTranslator : object {
    [NullableContextAttribute("1")]
public sealed virtual string TranslateTypeName(string clrName);
    [NullableContextAttribute("1")]
public sealed virtual string TranslateMemberName(string clrName);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Npgsql.NameTranslation.NpgsqlSnakeCaseNameTranslator : object {
    [CompilerGeneratedAttribute]
private static NpgsqlSnakeCaseNameTranslator <Instance>k__BackingField;
    private CultureInfo _culture;
    [CompilerGeneratedAttribute]
private bool <LegacyMode>k__BackingField;
    internal static NpgsqlSnakeCaseNameTranslator Instance { get; }
    private bool LegacyMode { get; }
    [NullableContextAttribute("2")]
public NpgsqlSnakeCaseNameTranslator(CultureInfo culture);
    [NullableContextAttribute("2")]
public NpgsqlSnakeCaseNameTranslator(bool legacyMode, CultureInfo culture);
    private static NpgsqlSnakeCaseNameTranslator();
    [CompilerGeneratedAttribute]
internal static NpgsqlSnakeCaseNameTranslator get_Instance();
    [CompilerGeneratedAttribute]
private bool get_LegacyMode();
    public sealed virtual string TranslateTypeName(string clrName);
    public sealed virtual string TranslateMemberName(string clrName);
    public static string ConvertToSnakeCase(string name, CultureInfo culture);
    [IteratorStateMachineAttribute("Npgsql.NameTranslation.NpgsqlSnakeCaseNameTranslator/<<TranslateMemberName>g__LegacyModeMap|10_0>d")]
[CompilerGeneratedAttribute]
internal static IEnumerable`1<string> <TranslateMemberName>g__LegacyModeMap|10_0(string clrName);
}
[ExtensionAttribute]
internal static class Npgsql.Netstandard20.ReadOnlySpanOfCharExtensions : object {
    [ExtensionAttribute]
public static int ParseInt(ReadOnlySpan`1<char> span);
}
public class Npgsql.NoticeEventHandler : MulticastDelegate {
    public NoticeEventHandler(object object, IntPtr method);
    [NullableContextAttribute("1")]
public virtual void Invoke(object sender, NpgsqlNoticeEventArgs e);
    public virtual IAsyncResult BeginInvoke(object sender, NpgsqlNoticeEventArgs e, AsyncCallback callback, object object);
    public virtual void EndInvoke(IAsyncResult result);
}
public class Npgsql.NotificationEventHandler : MulticastDelegate {
    public NotificationEventHandler(object object, IntPtr method);
    [NullableContextAttribute("1")]
public virtual void Invoke(object sender, NpgsqlNotificationEventArgs e);
    public virtual IAsyncResult BeginInvoke(object sender, NpgsqlNotificationEventArgs e, AsyncCallback callback, object object);
    public virtual void EndInvoke(IAsyncResult result);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal static class Npgsql.NpgsqlActivitySource : object {
    private static ActivitySource Source;
    internal static bool IsEnabled { get; }
    private static NpgsqlActivitySource();
    internal static bool get_IsEnabled();
    internal static Activity CommandStart(NpgsqlConnectionStringBuilder settings, string commandText, CommandType commandType);
    internal static void Enrich(Activity activity, NpgsqlConnector connector);
    internal static void ReceivedFirstResponse(Activity activity);
    internal static void CommandStop(Activity activity);
    internal static void SetException(Activity activity, Exception ex, bool escaped);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Npgsql.NpgsqlBatch : DbBatch {
    internal static int DefaultBatchCommandsSize;
    [CompilerGeneratedAttribute]
private NpgsqlCommand <Command>k__BackingField;
    [CompilerGeneratedAttribute]
private NpgsqlBatchCommandCollection <BatchCommands>k__BackingField;
    private protected NpgsqlCommand Command { get; }
    protected DbBatchCommandCollection DbBatchCommands { get; }
    public NpgsqlBatchCommandCollection BatchCommands { get; }
    public int Timeout { get; public set; }
    [NullableAttribute("2")]
public NpgsqlConnection Connection { get; public set; }
    [NullableAttribute("2")]
protected DbConnection DbConnection { get; protected set; }
    [NullableAttribute("2")]
public NpgsqlTransaction Transaction { get; public set; }
    [NullableAttribute("2")]
protected DbTransaction DbTransaction { get; protected set; }
    public bool EnableErrorBarriers { get; public set; }
    internal bool AllResultTypesAreUnknown { get; internal set; }
    [NullableContextAttribute("2")]
public NpgsqlBatch(NpgsqlConnection connection, NpgsqlTransaction transaction);
    internal NpgsqlBatch(NpgsqlConnector connector);
    private protected NpgsqlBatch(NpgsqlDataSourceCommand command);
    [CompilerGeneratedAttribute]
private protected NpgsqlCommand get_Command();
    protected virtual DbBatchCommandCollection get_DbBatchCommands();
    [CompilerGeneratedAttribute]
public NpgsqlBatchCommandCollection get_BatchCommands();
    public virtual int get_Timeout();
    public virtual void set_Timeout(int value);
    [NullableContextAttribute("2")]
public NpgsqlConnection get_Connection();
    [NullableContextAttribute("2")]
public void set_Connection(NpgsqlConnection value);
    [NullableContextAttribute("2")]
protected virtual DbConnection get_DbConnection();
    [NullableContextAttribute("2")]
protected virtual void set_DbConnection(DbConnection value);
    [NullableContextAttribute("2")]
public NpgsqlTransaction get_Transaction();
    [NullableContextAttribute("2")]
public void set_Transaction(NpgsqlTransaction value);
    [NullableContextAttribute("2")]
protected virtual DbTransaction get_DbTransaction();
    [NullableContextAttribute("2")]
protected virtual void set_DbTransaction(DbTransaction value);
    public bool get_EnableErrorBarriers();
    public void set_EnableErrorBarriers(bool value);
    internal bool get_AllResultTypesAreUnknown();
    internal void set_AllResultTypesAreUnknown(bool value);
    protected virtual DbBatchCommand CreateDbBatchCommand();
    public NpgsqlBatchCommand CreateBatchCommand();
    protected virtual DbDataReader ExecuteDbDataReader(CommandBehavior behavior);
    public NpgsqlDataReader ExecuteReader(CommandBehavior behavior);
    [AsyncStateMachineAttribute("Npgsql.NpgsqlBatch/<ExecuteDbDataReaderAsync>d__37")]
protected virtual Task`1<DbDataReader> ExecuteDbDataReaderAsync(CommandBehavior behavior, CancellationToken cancellationToken);
    public Task`1<NpgsqlDataReader> ExecuteReaderAsync(CancellationToken cancellationToken);
    public Task`1<NpgsqlDataReader> ExecuteReaderAsync(CommandBehavior behavior, CancellationToken cancellationToken);
    public virtual int ExecuteNonQuery();
    public virtual Task`1<int> ExecuteNonQueryAsync(CancellationToken cancellationToken);
    [NullableContextAttribute("2")]
public virtual object ExecuteScalar();
    public virtual Task`1<object> ExecuteScalarAsync(CancellationToken cancellationToken);
    public virtual void Prepare();
    public virtual Task PrepareAsync(CancellationToken cancellationToken);
    public virtual void Cancel();
    public virtual void Dispose();
    internal static NpgsqlBatch CreateCachedBatch(NpgsqlConnection connection);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Npgsql.NpgsqlBatchCommand : DbBatchCommand {
    internal static List`1<NpgsqlParameter> EmptyParameters;
    private string _commandText;
    [CompilerGeneratedAttribute]
private CommandType <CommandType>k__BackingField;
    [NullableAttribute("2")]
internal NpgsqlParameterCollection _parameters;
    [CompilerGeneratedAttribute]
private Nullable`1<bool> <AppendErrorBarrier>k__BackingField;
    [CompilerGeneratedAttribute]
private ulong <Rows>k__BackingField;
    [CompilerGeneratedAttribute]
private StatementType <StatementType>k__BackingField;
    [CompilerGeneratedAttribute]
private UInt32 <OID>k__BackingField;
    [NullableAttribute("2")]
[CompilerGeneratedAttribute]
private string <FinalCommandText>k__BackingField;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private List`1<NpgsqlParameter> _ownedInputParameters;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private List`1<NpgsqlParameter> _inputParameters;
    [NullableAttribute("2")]
private RowDescriptionMessage _description;
    [NullableAttribute("2")]
private PreparedStatement _preparedStatement;
    [NullableAttribute("2")]
[CompilerGeneratedAttribute]
private NpgsqlConnector <ConnectorPreparedOn>k__BackingField;
    internal bool IsPreparing;
    public string CommandText { get; public set; }
    public CommandType CommandType { get; public set; }
    protected DbParameterCollection DbParameterCollection { get; }
    public NpgsqlParameterCollection Parameters { get; }
    public bool CanCreateParameter { get; }
    public Nullable`1<bool> AppendErrorBarrier { get; public set; }
    public ulong Rows { get; internal set; }
    public int RecordsAffected { get; }
    public StatementType StatementType { get; internal set; }
    public UInt32 OID { get; internal set; }
    [NullableAttribute("2")]
internal string FinalCommandText { get; internal set; }
    internal List`1<NpgsqlParameter> PositionalParameters { get; internal set; }
    internal bool HasParameters { get; }
    internal List`1<NpgsqlParameter> CurrentParametersReadOnly { get; }
    [NullableAttribute("2")]
internal RowDescriptionMessage Description { get; internal set; }
    [NullableAttribute("2")]
internal PreparedStatement PreparedStatement { get; internal set; }
    [NullableAttribute("2")]
internal NpgsqlConnector ConnectorPreparedOn { get; internal set; }
    internal Byte[] StatementName { get; }
    internal bool IsPrepared { get; }
    public NpgsqlBatchCommand(string commandText);
    private static NpgsqlBatchCommand();
    public virtual string get_CommandText();
    public virtual void set_CommandText(string value);
    [CompilerGeneratedAttribute]
public virtual CommandType get_CommandType();
    [CompilerGeneratedAttribute]
public virtual void set_CommandType(CommandType value);
    protected virtual DbParameterCollection get_DbParameterCollection();
    public NpgsqlParameterCollection get_Parameters();
    [PreserveBaseOverridesAttribute]
public virtual override NpgsqlParameter CreateParameter();
    public virtual bool get_CanCreateParameter();
    [CompilerGeneratedAttribute]
public Nullable`1<bool> get_AppendErrorBarrier();
    [CompilerGeneratedAttribute]
public void set_AppendErrorBarrier(Nullable`1<bool> value);
    [CompilerGeneratedAttribute]
public ulong get_Rows();
    [CompilerGeneratedAttribute]
internal void set_Rows(ulong value);
    public virtual int get_RecordsAffected();
    [CompilerGeneratedAttribute]
public StatementType get_StatementType();
    [CompilerGeneratedAttribute]
internal void set_StatementType(StatementType value);
    [CompilerGeneratedAttribute]
public UInt32 get_OID();
    [CompilerGeneratedAttribute]
internal void set_OID(UInt32 value);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
internal string get_FinalCommandText();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
internal void set_FinalCommandText(string value);
    internal List`1<NpgsqlParameter> get_PositionalParameters();
    internal void set_PositionalParameters(List`1<NpgsqlParameter> value);
    internal bool get_HasParameters();
    internal List`1<NpgsqlParameter> get_CurrentParametersReadOnly();
    [NullableContextAttribute("2")]
internal RowDescriptionMessage get_Description();
    [NullableContextAttribute("2")]
internal void set_Description(RowDescriptionMessage value);
    [NullableContextAttribute("2")]
internal PreparedStatement get_PreparedStatement();
    [NullableContextAttribute("2")]
internal void set_PreparedStatement(PreparedStatement value);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
internal NpgsqlConnector get_ConnectorPreparedOn();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
internal void set_ConnectorPreparedOn(NpgsqlConnector value);
    internal Byte[] get_StatementName();
    internal bool get_IsPrepared();
    [NullableContextAttribute("2")]
internal bool TryGetPrepared(PreparedStatement& preparedStatement);
    internal bool ExplicitPrepare(NpgsqlConnector connector);
    internal bool TryAutoPrepare(NpgsqlConnector connector);
    internal void Reset();
    internal void ApplyCommandComplete(CommandCompleteMessage msg);
    internal void ResetPreparation();
    public virtual string ToString();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[DefaultMemberAttribute("Item")]
public class Npgsql.NpgsqlBatchCommandCollection : DbBatchCommandCollection {
    private List`1<NpgsqlBatchCommand> _list;
    public int Count { get; }
    public bool IsReadOnly { get; }
    private NpgsqlBatchCommand System.Collections.Generic.IList<Npgsql.NpgsqlBatchCommand>.Item { get; private set; }
    public NpgsqlBatchCommand Item { get; public set; }
    internal NpgsqlBatchCommandCollection(List`1<NpgsqlBatchCommand> batchCommands);
    public virtual int get_Count();
    public virtual bool get_IsReadOnly();
    private sealed virtual override IEnumerator`1<NpgsqlBatchCommand> System.Collections.Generic.IEnumerable<Npgsql.NpgsqlBatchCommand>.GetEnumerator();
    public virtual IEnumerator`1<DbBatchCommand> GetEnumerator();
    public sealed virtual void Add(NpgsqlBatchCommand item);
    public virtual void Add(DbBatchCommand item);
    public virtual void Clear();
    public sealed virtual bool Contains(NpgsqlBatchCommand item);
    public virtual bool Contains(DbBatchCommand item);
    public sealed virtual void CopyTo(NpgsqlBatchCommand[] array, int arrayIndex);
    public virtual void CopyTo(DbBatchCommand[] array, int arrayIndex);
    public sealed virtual int IndexOf(NpgsqlBatchCommand item);
    public virtual int IndexOf(DbBatchCommand item);
    public sealed virtual void Insert(int index, NpgsqlBatchCommand item);
    public virtual void Insert(int index, DbBatchCommand item);
    public sealed virtual bool Remove(NpgsqlBatchCommand item);
    public virtual bool Remove(DbBatchCommand item);
    public virtual void RemoveAt(int index);
    private sealed virtual override NpgsqlBatchCommand System.Collections.Generic.IList<Npgsql.NpgsqlBatchCommand>.get_Item(int index);
    private sealed virtual override void System.Collections.Generic.IList<Npgsql.NpgsqlBatchCommand>.set_Item(int index, NpgsqlBatchCommand value);
    public NpgsqlBatchCommand get_Item(int index);
    public void set_Item(int index, NpgsqlBatchCommand value);
    protected virtual DbBatchCommand GetBatchCommand(int index);
    protected virtual void SetBatchCommand(int index, DbBatchCommand batchCommand);
    private static NpgsqlBatchCommand Cast(DbBatchCommand value);
    [NullableContextAttribute("2")]
[DoesNotReturnAttribute]
private static void ThrowInvalidCastException(DbBatchCommand value);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Npgsql.NpgsqlBinaryExporter : object {
    private static int BeforeRow;
    private static int BeforeColumn;
    private NpgsqlConnector _connector;
    private NpgsqlReadBuffer _buf;
    private bool _isConsumed;
    private bool _isDisposed;
    private long _endOfMessagePos;
    private short _column;
    private ulong _rowsExported;
    [CompilerGeneratedAttribute]
private int <NumColumns>k__BackingField;
    private PgConverterInfo[] _columnInfoCache;
    private ILogger _copyLogger;
    private PgReader PgReader { get; }
    private int NumColumns { get; private set; }
    unknown TimeSpan Timeout {public set; }
    public bool IsNull { get; }
    private bool IsInitializedAndAtStart { get; }
    internal NpgsqlBinaryExporter(NpgsqlConnector connector);
    private PgReader get_PgReader();
    [CompilerGeneratedAttribute]
private int get_NumColumns();
    [CompilerGeneratedAttribute]
private void set_NumColumns(int value);
    public void set_Timeout(TimeSpan value);
    [AsyncStateMachineAttribute("Npgsql.NpgsqlBinaryExporter/<Init>d__20")]
internal Task Init(string copyToCommand, bool async, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Npgsql.NpgsqlBinaryExporter/<ReadHeader>d__21")]
private Task ReadHeader(bool async);
    public int StartRow();
    [NullableContextAttribute("0")]
public ValueTask`1<int> StartRowAsync(CancellationToken cancellationToken);
    [NullableContextAttribute("0")]
[AsyncStateMachineAttribute("Npgsql.NpgsqlBinaryExporter/<StartRow>d__24")]
private ValueTask`1<int> StartRow(bool async, CancellationToken cancellationToken);
    public T Read();
    [NullableContextAttribute("2")]
public ValueTask`1<T> ReadAsync(CancellationToken cancellationToken);
    public T Read(NpgsqlDbType type);
    [NullableContextAttribute("2")]
public ValueTask`1<T> ReadAsync(NpgsqlDbType type, CancellationToken cancellationToken);
    private T Read(Nullable`1<NpgsqlDbType> type);
    [NullableContextAttribute("2")]
[AsyncStateMachineAttribute("Npgsql.NpgsqlBinaryExporter/<ReadAsync>d__30`1")]
private ValueTask`1<T> ReadAsync(Nullable`1<NpgsqlDbType> type, CancellationToken cancellationToken);
    private static T DbNullOrThrow();
    private PgConverterInfo GetInfo(Type type, Nullable`1<NpgsqlDbType> npgsqlDbType, Boolean& asObject);
    private PgConverterInfo CreateConverterInfo(Type type, Nullable`1<NpgsqlDbType> npgsqlDbType);
    public bool get_IsNull();
    public void Skip();
    [AsyncStateMachineAttribute("Npgsql.NpgsqlBinaryExporter/<SkipAsync>d__37")]
public Task SkipAsync(CancellationToken cancellationToken);
    private bool get_IsInitializedAndAtStart();
    private int MoveNextColumn(bool resumableOp);
    [NullableContextAttribute("0")]
[AsyncStateMachineAttribute("Npgsql.NpgsqlBinaryExporter/<MoveNextColumnAsync>d__41")]
private ValueTask`1<int> MoveNextColumnAsync(bool resumableOp);
    private void ThrowIfNotOnRow();
    private void ThrowIfDisposed();
    public sealed virtual void Cancel();
    public sealed virtual Task CancelAsync();
    public sealed virtual void Dispose();
    public sealed virtual ValueTask DisposeAsync();
    [AsyncStateMachineAttribute("Npgsql.NpgsqlBinaryExporter/<DisposeAsync>d__48")]
private ValueTask DisposeAsync(bool async);
    [CompilerGeneratedAttribute]
internal static PgTypeId <CreateConverterInfo>g__GetRepresentationalOrDefault|33_0(string dataTypeName, <>c__DisplayClass33_0& );
    [CompilerGeneratedAttribute]
private void <DisposeAsync>g__Cleanup|48_0();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Npgsql.NpgsqlBinaryImporter : object {
    private NpgsqlConnector _connector;
    private NpgsqlWriteBuffer _buf;
    private ImporterState _state;
    private short _column;
    private ulong _rowsImported;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private NpgsqlParameter[] _params;
    private ILogger _copyLogger;
    private PgWriter _pgWriter;
    private int NumColumns { get; }
    private bool InMiddleOfRow { get; }
    unknown TimeSpan Timeout {public set; }
    internal NpgsqlBinaryImporter(NpgsqlConnector connector);
    private int get_NumColumns();
    private bool get_InMiddleOfRow();
    public void set_Timeout(TimeSpan value);
    [AsyncStateMachineAttribute("Npgsql.NpgsqlBinaryImporter/<Init>d__15")]
internal Task Init(string copyFromCommand, bool async, CancellationToken cancellationToken);
    private void WriteHeader();
    public void StartRow();
    public Task StartRowAsync(CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Npgsql.NpgsqlBinaryImporter/<StartRow>d__19")]
private Task StartRow(bool async, CancellationToken cancellationToken);
    public void Write(T value);
    public Task WriteAsync(T value, CancellationToken cancellationToken);
    public void Write(T value, NpgsqlDbType npgsqlDbType);
    public Task WriteAsync(T value, NpgsqlDbType npgsqlDbType, CancellationToken cancellationToken);
    public void Write(T value, string dataTypeName);
    public Task WriteAsync(T value, string dataTypeName, CancellationToken cancellationToken);
    private Task Write(bool async, T value, Nullable`1<NpgsqlDbType> npgsqlDbType, string dataTypeName, CancellationToken cancellationToken);
    public void WriteNull();
    public Task WriteNullAsync(CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Npgsql.NpgsqlBinaryImporter/<WriteNull>d__29")]
private Task WriteNull(bool async, CancellationToken cancellationToken);
    public void WriteRow(Object[] values);
    public Task WriteRowAsync(CancellationToken cancellationToken, Object[] values);
    [AsyncStateMachineAttribute("Npgsql.NpgsqlBinaryImporter/<WriteRow>d__32")]
private Task WriteRow(bool async, CancellationToken cancellationToken, Object[] values);
    private void CheckColumnIndex();
    public ulong Complete();
    [NullableContextAttribute("0")]
public ValueTask`1<ulong> CompleteAsync(CancellationToken cancellationToken);
    [NullableContextAttribute("0")]
[AsyncStateMachineAttribute("Npgsql.NpgsqlBinaryImporter/<Complete>d__36")]
private ValueTask`1<ulong> Complete(bool async, CancellationToken cancellationToken);
    private sealed virtual override void Npgsql.ICancelable.Cancel();
    [AsyncStateMachineAttribute("Npgsql.NpgsqlBinaryImporter/<Npgsql-ICancelable-CancelAsync>d__38")]
private sealed virtual override Task Npgsql.ICancelable.CancelAsync();
    public sealed virtual void Dispose();
    public sealed virtual ValueTask DisposeAsync();
    [AsyncStateMachineAttribute("Npgsql.NpgsqlBinaryImporter/<Cancel>d__41")]
private Task Cancel(bool async, CancellationToken cancellationToken);
    public void Close();
    public ValueTask CloseAsync(CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Npgsql.NpgsqlBinaryImporter/<CloseAsync>d__44")]
private ValueTask CloseAsync(bool async, CancellationToken cancellationToken);
    private void Cleanup();
    private void CheckReady();
    private void ThrowColumnMismatch();
    [NullableContextAttribute("0")]
[AsyncStateMachineAttribute("Npgsql.NpgsqlBinaryImporter/<<Write>g__Core|26_0>d`1")]
[CompilerGeneratedAttribute]
private Task <Write>g__Core|26_0(bool async, T value, Nullable`1<NpgsqlDbType> npgsqlDbType, string dataTypeName, CancellationToken cancellationToken);
    [CompilerGeneratedAttribute]
private void <CheckColumnIndex>g__Throw|33_0();
    [CompilerGeneratedAttribute]
internal static void <CheckReady>g__Throw|46_0(ImporterState state);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[DesignerCategoryAttribute("")]
public class Npgsql.NpgsqlCommand : DbCommand {
    [NullableAttribute("2")]
private NpgsqlTransaction _transaction;
    [NullableAttribute("2")]
private NpgsqlConnector _connector;
    [NullableAttribute("2")]
private NpgsqlConnector _connectorPreparedOn;
    private string _commandText;
    private CommandBehavior _behavior;
    private Nullable`1<int> _timeout;
    [NullableAttribute("2")]
internal NpgsqlParameterCollection _parameters;
    [CompilerGeneratedAttribute]
private bool <IsWrappedByBatch>k__BackingField;
    [CompilerGeneratedAttribute]
private List`1<NpgsqlBatchCommand> <InternalBatchCommands>k__BackingField;
    [NullableAttribute("2")]
private Activity CurrentActivity;
    private UpdateRowSource _updateRowSource;
    [CompilerGeneratedAttribute]
private bool <IsCacheable>k__BackingField;
    internal static bool EnableSqlRewriting;
    internal static bool EnableStoredProcedureCompatMode;
    [CompilerGeneratedAttribute]
private bool <EnableErrorBarriers>k__BackingField;
    private static TaskScheduler ConstrainedConcurrencyScheduler;
    internal static int DefaultTimeout;
    [CompilerGeneratedAttribute]
private CommandType <CommandType>k__BackingField;
    [NullableAttribute("2")]
[CompilerGeneratedAttribute]
private NpgsqlConnection <InternalConnection>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <DesignTimeVisible>k__BackingField;
    private bool _allResultTypesAreUnknown;
    [NullableAttribute("2")]
private Boolean[] _unknownResultTypeList;
    private Int32 modreq(System.Runtime.CompilerServices.IsVolatile) _state;
    private static string DeriveParametersForFunctionQuery;
    [CompilerGeneratedAttribute]
private ManualResetValueTaskSource`1<NpgsqlConnector> <ExecutionCompletion>k__BackingField;
    internal bool IsWrappedByBatch { get; }
    internal List`1<NpgsqlBatchCommand> InternalBatchCommands { get; }
    [ObsoleteAttribute("Use the new DbBatch API")]
public IReadOnlyList`1<NpgsqlBatchCommand> Statements { get; }
    private bool IsExplicitlyPrepared { get; }
    internal bool IsCacheable { get; internal set; }
    internal bool EnableErrorBarriers { get; internal set; }
    [DefaultValueAttribute("")]
[CategoryAttribute("Data")]
public string CommandText { get; public set; }
    [DefaultValueAttribute("30")]
public int CommandTimeout { get; public set; }
    [DefaultValueAttribute("Mono.Cecil.CustomAttributeArgument")]
[CategoryAttribute("Data")]
public CommandType CommandType { get; public set; }
    [NullableAttribute("2")]
internal NpgsqlConnection InternalConnection { get; private set; }
    [NullableAttribute("2")]
protected DbConnection DbConnection { get; protected set; }
    [NullableAttribute("2")]
[DefaultValueAttribute("")]
[CategoryAttribute("Behavior")]
public NpgsqlConnection Connection { get; public set; }
    public bool DesignTimeVisible { get; public set; }
    [CategoryAttribute("Behavior")]
[DefaultValueAttribute("Mono.Cecil.CustomAttributeArgument")]
public UpdateRowSource UpdatedRowSource { get; public set; }
    public bool IsPrepared { get; }
    public bool AllResultTypesAreUnknown { get; public set; }
    [NullableAttribute("2")]
public Boolean[] UnknownResultTypeList { get; public set; }
    internal CommandState State { get; internal set; }
    protected DbParameterCollection DbParameterCollection { get; }
    public NpgsqlParameterCollection Parameters { get; }
    internal ManualResetValueTaskSource`1<NpgsqlConnector> ExecutionCompletion { get; }
    [NullableAttribute("2")]
protected DbTransaction DbTransaction { get; protected set; }
    [NullableAttribute("2")]
public NpgsqlTransaction Transaction { get; public set; }
    private static NpgsqlCommand();
    [NullableContextAttribute("2")]
public NpgsqlCommand(string cmdText);
    [NullableContextAttribute("2")]
public NpgsqlCommand(string cmdText, NpgsqlConnection connection);
    [NullableContextAttribute("2")]
public NpgsqlCommand(string cmdText, NpgsqlConnection connection, NpgsqlTransaction transaction);
    [NullableContextAttribute("2")]
internal NpgsqlCommand(int batchCommandCapacity, NpgsqlConnection connection);
    internal NpgsqlCommand(string cmdText, NpgsqlConnector connector);
    internal NpgsqlCommand(NpgsqlConnector connector, int batchCommandCapacity);
    [CompilerGeneratedAttribute]
internal bool get_IsWrappedByBatch();
    [CompilerGeneratedAttribute]
internal List`1<NpgsqlBatchCommand> get_InternalBatchCommands();
    public IReadOnlyList`1<NpgsqlBatchCommand> get_Statements();
    private bool get_IsExplicitlyPrepared();
    [CompilerGeneratedAttribute]
internal bool get_IsCacheable();
    [CompilerGeneratedAttribute]
internal void set_IsCacheable(bool value);
    [CompilerGeneratedAttribute]
internal bool get_EnableErrorBarriers();
    [CompilerGeneratedAttribute]
internal void set_EnableErrorBarriers(bool value);
    internal static NpgsqlCommand CreateCachedCommand(NpgsqlConnection connection);
    public virtual string get_CommandText();
    public virtual void set_CommandText(string value);
    private string GetBatchFullCommandText();
    public virtual int get_CommandTimeout();
    public virtual void set_CommandTimeout(int value);
    [CompilerGeneratedAttribute]
public virtual CommandType get_CommandType();
    [CompilerGeneratedAttribute]
public virtual void set_CommandType(CommandType value);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
internal NpgsqlConnection get_InternalConnection();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
private void set_InternalConnection(NpgsqlConnection value);
    [NullableContextAttribute("2")]
protected virtual DbConnection get_DbConnection();
    [NullableContextAttribute("2")]
protected virtual void set_DbConnection(DbConnection value);
    [NullableContextAttribute("2")]
public NpgsqlConnection get_Connection();
    [NullableContextAttribute("2")]
public void set_Connection(NpgsqlConnection value);
    [CompilerGeneratedAttribute]
public virtual bool get_DesignTimeVisible();
    [CompilerGeneratedAttribute]
public virtual void set_DesignTimeVisible(bool value);
    public virtual UpdateRowSource get_UpdatedRowSource();
    public virtual void set_UpdatedRowSource(UpdateRowSource value);
    public bool get_IsPrepared();
    public bool get_AllResultTypesAreUnknown();
    public void set_AllResultTypesAreUnknown(bool value);
    [NullableContextAttribute("2")]
public Boolean[] get_UnknownResultTypeList();
    [NullableContextAttribute("2")]
public void set_UnknownResultTypeList(Boolean[] value);
    internal CommandState get_State();
    internal void set_State(CommandState value);
    internal void ResetPreparation();
    protected virtual DbParameter CreateDbParameter();
    public NpgsqlParameter CreateParameter();
    protected virtual DbParameterCollection get_DbParameterCollection();
    public NpgsqlParameterCollection get_Parameters();
    internal void DeriveParameters();
    private void DeriveParametersForFunction();
    private void DeriveParametersForQuery(NpgsqlConnector connector);
    public virtual void Prepare();
    public virtual Task PrepareAsync(CancellationToken cancellationToken);
    private Task Prepare(bool async, CancellationToken cancellationToken);
    public void Unprepare();
    public Task UnprepareAsync(CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Npgsql.NpgsqlCommand/<Unprepare>d__98")]
private Task Unprepare(bool async, CancellationToken cancellationToken);
    [NullableContextAttribute("2")]
internal void ProcessRawQuery(SqlQueryParser parser, bool standardConformingStrings, NpgsqlBatchCommand batchCommand);
    private void BeginSend(NpgsqlConnector connector);
    internal Task Write(NpgsqlConnector connector, bool async, bool flush, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Npgsql.NpgsqlCommand/<SendDeriveParameters>d__102")]
private Task SendDeriveParameters(NpgsqlConnector connector, bool async, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Npgsql.NpgsqlCommand/<SendPrepare>d__103")]
private Task SendPrepare(NpgsqlConnector connector, bool async, CancellationToken cancellationToken);
    private bool ShouldSchedule(Boolean& async, int indexOfStatementInBatch);
    [AsyncStateMachineAttribute("Npgsql.NpgsqlCommand/<SendClose>d__105")]
private Task SendClose(NpgsqlConnector connector, bool async, CancellationToken cancellationToken);
    public virtual int ExecuteNonQuery();
    public virtual Task`1<int> ExecuteNonQueryAsync(CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Npgsql.NpgsqlCommand/<ExecuteNonQuery>d__108")]
private Task`1<int> ExecuteNonQuery(bool async, CancellationToken cancellationToken);
    [NullableContextAttribute("2")]
public virtual object ExecuteScalar();
    public virtual Task`1<object> ExecuteScalarAsync(CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Npgsql.NpgsqlCommand/<ExecuteScalar>d__111")]
private ValueTask`1<object> ExecuteScalar(bool async, CancellationToken cancellationToken);
    protected virtual DbDataReader ExecuteDbDataReader(CommandBehavior behavior);
    [AsyncStateMachineAttribute("Npgsql.NpgsqlCommand/<ExecuteDbDataReaderAsync>d__113")]
protected virtual Task`1<DbDataReader> ExecuteDbDataReaderAsync(CommandBehavior behavior, CancellationToken cancellationToken);
    public NpgsqlDataReader ExecuteReader(CommandBehavior behavior);
    public Task`1<NpgsqlDataReader> ExecuteReaderAsync(CancellationToken cancellationToken);
    public Task`1<NpgsqlDataReader> ExecuteReaderAsync(CommandBehavior behavior, CancellationToken cancellationToken);
    [CompilerGeneratedAttribute]
internal ManualResetValueTaskSource`1<NpgsqlConnector> get_ExecutionCompletion();
    [AsyncStateMachineAttribute("Npgsql.NpgsqlCommand/<ExecuteReader>d__120")]
internal virtual ValueTask`1<NpgsqlDataReader> ExecuteReader(bool async, CommandBehavior behavior, CancellationToken cancellationToken);
    [NullableContextAttribute("2")]
protected virtual DbTransaction get_DbTransaction();
    [NullableContextAttribute("2")]
protected virtual void set_DbTransaction(DbTransaction value);
    [NullableContextAttribute("2")]
public NpgsqlTransaction get_Transaction();
    [NullableContextAttribute("2")]
public void set_Transaction(NpgsqlTransaction value);
    public virtual void Cancel();
    protected virtual void Dispose(bool disposing);
    internal void Reset();
    internal void ResetTransaction();
    internal void TraceCommandStart(NpgsqlConnectionStringBuilder settings);
    internal void TraceCommandEnrich(NpgsqlConnector connector);
    internal void TraceReceivedFirstResponse();
    internal void TraceCommandStop();
    internal void TraceSetException(Exception e);
    private NpgsqlBatchCommand TruncateStatementsToOne();
    internal void FixupRowDescription(RowDescriptionMessage rowDescription, bool isFirst);
    internal void LogExecutingCompleted(NpgsqlConnector connector, bool executing);
    private sealed virtual override object System.ICloneable.Clone();
    public virtual NpgsqlCommand Clone();
    [NullableContextAttribute("2")]
private NpgsqlConnection CheckAndGetConnection();
    [NullableContextAttribute("2")]
public void add_Disposed(EventHandler value);
    [NullableContextAttribute("2")]
public void remove_Disposed(EventHandler value);
    [NullableContextAttribute("2")]
private sealed virtual override void System.ComponentModel.IComponent.add_Disposed(EventHandler value);
    [NullableContextAttribute("2")]
private sealed virtual override void System.ComponentModel.IComponent.remove_Disposed(EventHandler value);
    [CompilerGeneratedAttribute]
private bool <get_IsPrepared>g__AllPrepared|69_0();
    [IteratorStateMachineAttribute("Npgsql.NpgsqlCommand/<<Prepare>g__CommandTexts|95_0>d")]
[CompilerGeneratedAttribute]
private IEnumerable`1<string> <Prepare>g__CommandTexts|95_0();
    [AsyncStateMachineAttribute("Npgsql.NpgsqlCommand/<<Prepare>g__PrepareLong|95_1>d")]
[CompilerGeneratedAttribute]
internal static Task <Prepare>g__PrepareLong|95_1(NpgsqlCommand command, bool async, NpgsqlConnector connector, CancellationToken cancellationToken);
    [CompilerGeneratedAttribute]
internal static void <ProcessRawQuery>g__ValidateParameterCount|99_0(NpgsqlBatchCommand batchCommand);
    [AsyncStateMachineAttribute("Npgsql.NpgsqlCommand/<<Write>g__WriteExecute|101_0>d")]
[CompilerGeneratedAttribute]
private Task <Write>g__WriteExecute|101_0(NpgsqlConnector connector, bool async, bool flush, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Npgsql.NpgsqlCommand/<<Write>g__WriteExecuteSchemaOnly|101_1>d")]
[CompilerGeneratedAttribute]
private Task <Write>g__WriteExecuteSchemaOnly|101_1(NpgsqlConnector connector, bool async, bool flush, CancellationToken cancellationToken);
    [CompilerGeneratedAttribute]
internal static Object[] <LogExecutingCompleted>g__ParametersDbNullAsString|138_0(NpgsqlBatchCommand c);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[DesignerCategoryAttribute("")]
public class Npgsql.NpgsqlCommandBuilder : DbCommandBuilder {
    public string QuotePrefix { get; public set; }
    public string QuoteSuffix { get; public set; }
    [NullableContextAttribute("2")]
public NpgsqlCommandBuilder(NpgsqlDataAdapter adapter);
    public virtual string get_QuotePrefix();
    public virtual void set_QuotePrefix(string value);
    public virtual string get_QuoteSuffix();
    public virtual void set_QuoteSuffix(string value);
    public static void DeriveParameters(NpgsqlCommand command);
    public NpgsqlCommand GetInsertCommand();
    public NpgsqlCommand GetInsertCommand(bool useColumnsForParameterNames);
    public NpgsqlCommand GetUpdateCommand();
    public NpgsqlCommand GetUpdateCommand(bool useColumnsForParameterNames);
    public NpgsqlCommand GetDeleteCommand();
    public NpgsqlCommand GetDeleteCommand(bool useColumnsForParameterNames);
    protected virtual void ApplyParameterInfo(DbParameter p, DataRow row, StatementType statementType, bool whereClause);
    protected virtual string GetParameterName(int parameterOrdinal);
    protected virtual string GetParameterName(string parameterName);
    protected virtual string GetParameterPlaceholder(int parameterOrdinal);
    protected virtual void SetRowUpdatingHandler(DbDataAdapter adapter);
    private void RowUpdatingHandler(object sender, NpgsqlRowUpdatingEventArgs e);
    public virtual string QuoteIdentifier(string unquotedIdentifier);
    public virtual string UnquoteIdentifier(string quotedIdentifier);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[DesignerCategoryAttribute("")]
public class Npgsql.NpgsqlConnection : DbConnection {
    private bool _disposed;
    private string _userFacingConnectionString;
    private string _connectionString;
    private ConnectionState _fullState;
    [NullableAttribute("2")]
[CompilerGeneratedAttribute]
private NpgsqlConnector <Connector>k__BackingField;
    [CompilerGeneratedAttribute]
private NpgsqlConnectionStringBuilder <Settings>k__BackingField;
    private static NpgsqlConnectionStringBuilder DefaultSettings;
    [NullableAttribute("2")]
private NpgsqlDataSource _dataSource;
    private int _closing;
    [NullableAttribute("2")]
[CompilerGeneratedAttribute]
private Transaction <EnlistedTransaction>k__BackingField;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private static Func`2<string, NpgsqlConnection> _cloningInstantiator;
    public static int DefaultPort;
    internal static int TimeoutLimit;
    [CompilerGeneratedAttribute]
private ConnectorBindingScope <ConnectorBindingScope>k__BackingField;
    private ILogger _connectionLogger;
    private static StateChangeEventArgs ClosedToOpenEventArgs;
    private static StateChangeEventArgs OpenToClosedEventArgs;
    [NullableAttribute("2")]
[CompilerGeneratedAttribute]
private ProvidePasswordCallback <ProvidePasswordCallback>k__BackingField;
    [NullableAttribute("2")]
[CompilerGeneratedAttribute]
private NpgsqlCommand <CachedCommand>k__BackingField;
    [NullableAttribute("2")]
[CompilerGeneratedAttribute]
private NpgsqlBatch <CachedBatch>k__BackingField;
    [NullableAttribute("2")]
[CompilerGeneratedAttribute]
private NoticeEventHandler Notice;
    [NullableAttribute("2")]
[CompilerGeneratedAttribute]
private NotificationEventHandler Notification;
    [NullableAttribute("2")]
[CompilerGeneratedAttribute]
private ProvideClientCertificatesCallback <ProvideClientCertificatesCallback>k__BackingField;
    [NullableAttribute("2")]
[CompilerGeneratedAttribute]
private RemoteCertificateValidationCallback <UserCertificateValidationCallback>k__BackingField;
    [NullableAttribute("2")]
internal NpgsqlConnector Connector { get; internal set; }
    internal NpgsqlConnectionStringBuilder Settings { get; private set; }
    internal NpgsqlDataSource NpgsqlDataSource { get; }
    [NullableAttribute("2")]
internal Transaction EnlistedTransaction { get; internal set; }
    [ObsoleteAttribute("Global-level type mapping has been replaced with data source mapping, see the 7.0 release notes.")]
public static INpgsqlTypeMapper GlobalTypeMapper { get; }
    [ObsoleteAttribute("Connection-level type mapping is no longer supported. See the 7.0 release notes for configuring type mapping on NpgsqlDataSource.", "True")]
public INpgsqlTypeMapper TypeMapper { get; }
    internal ConnectorBindingScope ConnectorBindingScope { get; internal set; }
    public string ConnectionString { get; public set; }
    [NullableAttribute("2")]
[ObsoleteAttribute("Use NpgsqlDataSourceBuilder.UsePeriodicPasswordProvider or inject passwords directly into NpgsqlDataSource.Password")]
public ProvidePasswordCallback ProvidePasswordCallback { get; public set; }
    [NullableAttribute("2")]
[BrowsableAttribute("True")]
public string Host { get; }
    [BrowsableAttribute("True")]
public int Port { get; }
    public int ConnectionTimeout { get; }
    public int CommandTimeout { get; }
    public string Database { get; }
    public string DataSource { get; }
    [NullableAttribute("2")]
public string UserName { get; }
    [BrowsableAttribute("False")]
public ConnectionState FullState { get; internal set; }
    [BrowsableAttribute("False")]
public ConnectionState State { get; }
    [NullableAttribute("2")]
internal NpgsqlCommand CachedCommand { get; internal set; }
    [NullableAttribute("2")]
internal NpgsqlBatch CachedBatch { get; internal set; }
    public bool CanCreateBatch { get; }
    internal bool IsSecure { get; }
    internal bool IsScram { get; }
    internal bool IsScramPlus { get; }
    [NullableAttribute("2")]
public ProvideClientCertificatesCallback ProvideClientCertificatesCallback { get; public set; }
    [NullableAttribute("2")]
public RemoteCertificateValidationCallback UserCertificateValidationCallback { get; public set; }
    [BrowsableAttribute("False")]
public Version PostgreSqlVersion { get; }
    public string ServerVersion { get; }
    [BrowsableAttribute("False")]
public int ProcessID { get; }
    [BrowsableAttribute("False")]
public bool HasIntegerDateTimes { get; }
    [BrowsableAttribute("False")]
public string Timezone { get; }
    [BrowsableAttribute("False")]
public IReadOnlyDictionary`2<string, string> PostgresParameters { get; }
    protected DbProviderFactory DbProviderFactory { get; }
    [NullableContextAttribute("2")]
public NpgsqlConnection(string connectionString);
    internal NpgsqlConnection(NpgsqlDataSource dataSource, NpgsqlConnector connector);
    private static NpgsqlConnection();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
internal NpgsqlConnector get_Connector();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
internal void set_Connector(NpgsqlConnector value);
    [CompilerGeneratedAttribute]
internal NpgsqlConnectionStringBuilder get_Settings();
    [CompilerGeneratedAttribute]
private void set_Settings(NpgsqlConnectionStringBuilder value);
    internal NpgsqlDataSource get_NpgsqlDataSource();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
internal Transaction get_EnlistedTransaction();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
internal void set_EnlistedTransaction(Transaction value);
    public static INpgsqlTypeMapper get_GlobalTypeMapper();
    public INpgsqlTypeMapper get_TypeMapper();
    [CompilerGeneratedAttribute]
internal ConnectorBindingScope get_ConnectorBindingScope();
    [CompilerGeneratedAttribute]
internal void set_ConnectorBindingScope(ConnectorBindingScope value);
    internal static NpgsqlConnection FromDataSource(NpgsqlDataSource dataSource);
    public virtual void Open();
    public virtual Task OpenAsync(CancellationToken cancellationToken);
    private void SetupDataSource();
    internal Task Open(bool async, CancellationToken cancellationToken);
    public virtual string get_ConnectionString();
    public virtual void set_ConnectionString(string value);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public ProvidePasswordCallback get_ProvidePasswordCallback();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public void set_ProvidePasswordCallback(ProvidePasswordCallback value);
    [NullableContextAttribute("2")]
public string get_Host();
    public int get_Port();
    public virtual int get_ConnectionTimeout();
    public int get_CommandTimeout();
    public virtual string get_Database();
    public virtual string get_DataSource();
    [NullableContextAttribute("2")]
public string get_UserName();
    public ConnectionState get_FullState();
    internal void set_FullState(ConnectionState value);
    public virtual ConnectionState get_State();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
internal NpgsqlCommand get_CachedCommand();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
internal void set_CachedCommand(NpgsqlCommand value);
    protected virtual DbCommand CreateDbCommand();
    public NpgsqlCommand CreateCommand();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
internal NpgsqlBatch get_CachedBatch();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
internal void set_CachedBatch(NpgsqlBatch value);
    public virtual bool get_CanCreateBatch();
    protected virtual DbBatch CreateDbBatch();
    public NpgsqlBatch CreateBatch();
    protected virtual DbTransaction BeginDbTransaction(IsolationLevel isolationLevel);
    public NpgsqlTransaction BeginTransaction();
    public NpgsqlTransaction BeginTransaction(IsolationLevel level);
    [AsyncStateMachineAttribute("Npgsql.NpgsqlConnection/<BeginTransaction>d__86")]
private ValueTask`1<NpgsqlTransaction> BeginTransaction(bool async, IsolationLevel level, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Npgsql.NpgsqlConnection/<BeginDbTransactionAsync>d__87")]
protected virtual ValueTask`1<DbTransaction> BeginDbTransactionAsync(IsolationLevel isolationLevel, CancellationToken cancellationToken);
    public ValueTask`1<NpgsqlTransaction> BeginTransactionAsync(CancellationToken cancellationToken);
    public ValueTask`1<NpgsqlTransaction> BeginTransactionAsync(IsolationLevel level, CancellationToken cancellationToken);
    [NullableContextAttribute("2")]
public virtual void EnlistTransaction(Transaction transaction);
    public virtual void Close();
    public virtual Task CloseAsync();
    internal bool TakeCloseLock();
    internal void ReleaseCloseLock();
    internal Task Close(bool async);
    [AsyncStateMachineAttribute("Npgsql.NpgsqlConnection/<CloseAsync>d__96")]
private Task CloseAsync(bool async);
    protected virtual void Dispose(bool disposing);
    [AsyncStateMachineAttribute("Npgsql.NpgsqlConnection/<DisposeAsync>d__98")]
public virtual ValueTask DisposeAsync();
    internal void MakeDisposed();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public void add_Notice(NoticeEventHandler value);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public void remove_Notice(NoticeEventHandler value);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public void add_Notification(NotificationEventHandler value);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public void remove_Notification(NotificationEventHandler value);
    internal void OnNotice(PostgresNotice e);
    internal void OnNotification(NpgsqlNotificationEventArgs e);
    internal bool get_IsSecure();
    internal bool get_IsScram();
    internal bool get_IsScramPlus();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public ProvideClientCertificatesCallback get_ProvideClientCertificatesCallback();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public void set_ProvideClientCertificatesCallback(ProvideClientCertificatesCallback value);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public RemoteCertificateValidationCallback get_UserCertificateValidationCallback();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public void set_UserCertificateValidationCallback(RemoteCertificateValidationCallback value);
    public Version get_PostgreSqlVersion();
    public virtual string get_ServerVersion();
    public int get_ProcessID();
    public bool get_HasIntegerDateTimes();
    public string get_Timezone();
    public IReadOnlyDictionary`2<string, string> get_PostgresParameters();
    public NpgsqlBinaryImporter BeginBinaryImport(string copyFromCommand);
    public Task`1<NpgsqlBinaryImporter> BeginBinaryImportAsync(string copyFromCommand, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Npgsql.NpgsqlConnection/<BeginBinaryImport>d__136")]
private Task`1<NpgsqlBinaryImporter> BeginBinaryImport(bool async, string copyFromCommand, CancellationToken cancellationToken);
    public NpgsqlBinaryExporter BeginBinaryExport(string copyToCommand);
    public Task`1<NpgsqlBinaryExporter> BeginBinaryExportAsync(string copyToCommand, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Npgsql.NpgsqlConnection/<BeginBinaryExport>d__139")]
private Task`1<NpgsqlBinaryExporter> BeginBinaryExport(bool async, string copyToCommand, CancellationToken cancellationToken);
    public TextWriter BeginTextImport(string copyFromCommand);
    public Task`1<TextWriter> BeginTextImportAsync(string copyFromCommand, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Npgsql.NpgsqlConnection/<BeginTextImport>d__142")]
private Task`1<TextWriter> BeginTextImport(bool async, string copyFromCommand, CancellationToken cancellationToken);
    public TextReader BeginTextExport(string copyToCommand);
    public Task`1<TextReader> BeginTextExportAsync(string copyToCommand, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Npgsql.NpgsqlConnection/<BeginTextExport>d__145")]
private Task`1<TextReader> BeginTextExport(bool async, string copyToCommand, CancellationToken cancellationToken);
    public NpgsqlRawCopyStream BeginRawBinaryCopy(string copyCommand);
    public Task`1<NpgsqlRawCopyStream> BeginRawBinaryCopyAsync(string copyCommand, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Npgsql.NpgsqlConnection/<BeginRawBinaryCopy>d__148")]
private Task`1<NpgsqlRawCopyStream> BeginRawBinaryCopy(bool async, string copyCommand, CancellationToken cancellationToken);
    private static bool IsValidCopyCommand(string copyCommand);
    public bool Wait(int timeout);
    public bool Wait(TimeSpan timeout);
    public void Wait();
    public Task`1<bool> WaitAsync(int timeout, CancellationToken cancellationToken);
    public Task`1<bool> WaitAsync(TimeSpan timeout, CancellationToken cancellationToken);
    public Task WaitAsync(CancellationToken cancellationToken);
    private void CheckOpen();
    private void CheckClosed();
    private void CheckDisposed();
    internal void CheckReady();
    [NullableContextAttribute("2")]
internal bool TryGetBoundConnector(NpgsqlConnector& connector);
    internal ValueTask`1<NpgsqlConnector> StartBindingScope(ConnectorBindingScope scope, NpgsqlTimeout timeout, bool async, CancellationToken cancellationToken);
    internal NpgsqlConnector StartBindingScope(ConnectorBindingScope scope);
    internal EndScopeDisposable StartTemporaryBindingScope(NpgsqlConnector& connector);
    internal T CheckOpenAndRunInTemporaryScope(Func`2<NpgsqlConnector, T> func);
    internal void EndBindingScope(ConnectorBindingScope scope);
    public virtual DataTable GetSchema();
    public virtual DataTable GetSchema(string collectionName);
    [NullableContextAttribute("2")]
public virtual DataTable GetSchema(string collectionName, String[] restrictions);
    public virtual Task`1<DataTable> GetSchemaAsync(CancellationToken cancellationToken);
    public virtual Task`1<DataTable> GetSchemaAsync(string collectionName, CancellationToken cancellationToken);
    public virtual Task`1<DataTable> GetSchemaAsync(string collectionName, String[] restrictions, CancellationToken cancellationToken);
    private sealed virtual override object System.ICloneable.Clone();
    public NpgsqlConnection CloneWith(string connectionString);
    public virtual void ChangeDatabase(string dbName);
    protected virtual DbProviderFactory get_DbProviderFactory();
    public static void ClearPool(NpgsqlConnection connection);
    public static void ClearAllPools();
    public void UnprepareAll();
    public void ReloadTypes();
    [AsyncStateMachineAttribute("Npgsql.NpgsqlConnection/<ReloadTypesAsync>d__181")]
public Task ReloadTypesAsync();
    [NullableContextAttribute("2")]
public void add_Disposed(EventHandler value);
    [NullableContextAttribute("2")]
public void remove_Disposed(EventHandler value);
    [NullableContextAttribute("2")]
private sealed virtual override void System.ComponentModel.IComponent.add_Disposed(EventHandler value);
    [NullableContextAttribute("2")]
private sealed virtual override void System.ComponentModel.IComponent.remove_Disposed(EventHandler value);
    [AsyncStateMachineAttribute("Npgsql.NpgsqlConnection/<<Open>g__OpenAsync|42_0>d")]
[CompilerGeneratedAttribute]
private Task <Open>g__OpenAsync|42_0(bool async, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Npgsql.NpgsqlConnection/<<Open>g__PerformMultiplexingStartupCheck|42_1>d")]
[CompilerGeneratedAttribute]
private Task <Open>g__PerformMultiplexingStartupCheck|42_1(bool async, CancellationToken cancellationToken);
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
[DefaultMemberAttribute("Item")]
[UnconditionalSuppressMessageAttribute("ReflectionAnalysis", "IL2112:ReflectionToRequiresUnreferencedCode")]
[UnconditionalSuppressMessageAttribute("ReflectionAnalysis", "IL2113:ReflectionToRequiresUnreferencedCode")]
public class Npgsql.NpgsqlConnectionStringBuilder : DbConnectionStringBuilder {
    private string _dataSourceCached;
    private string _host;
    private int _port;
    private string _database;
    private string _username;
    private string _password;
    private string _passfile;
    private string _applicationName;
    private bool _enlist;
    private string _searchPath;
    private string _clientEncoding;
    [NullableAttribute("1")]
private string _encoding;
    private string _timezone;
    private SslMode _sslMode;
    private string _sslCertificate;
    private string _sslKey;
    private string _sslPassword;
    private string _rootCertificate;
    private bool _checkCertificateRevocation;
    [NullableAttribute("1")]
private string _kerberosServiceName;
    private bool _includeRealm;
    private bool _persistSecurityInfo;
    private bool _logParameters;
    [NullableAttribute("1")]
internal static string IncludeExceptionDetailDisplayName;
    private bool _includeErrorDetail;
    private ChannelBinding _channelBinding;
    private bool _pooling;
    private int _minPoolSize;
    private int _maxPoolSize;
    private int _connectionIdleLifetime;
    private int _connectionPruningInterval;
    private int _connectionLifetime;
    private int _timeout;
    internal static int DefaultTimeout;
    private int _commandTimeout;
    private int _cancellationTimeout;
    [CompilerGeneratedAttribute]
private Nullable`1<TargetSessionAttributes> <TargetSessionAttributesParsed>k__BackingField;
    private bool _loadBalanceHosts;
    private int _hostRecheckSeconds;
    private int _keepAlive;
    private bool _tcpKeepAlive;
    private int _tcpKeepAliveTime;
    private int _tcpKeepAliveInterval;
    private int _readBufferSize;
    private int _writeBufferSize;
    private int _socketReceiveBufferSize;
    private int _socketSendBufferSize;
    private int _maxAutoPrepare;
    private int _autoPrepareMinUsages;
    private bool _noResetOnClose;
    private bool _loadTableComposites;
    private ReplicationMode _replicationMode;
    private string _options;
    private ArrayNullabilityMode _arrayNullabilityMode;
    private bool _multiplexing;
    private int _writeCoalescingBufferThresholdBytes;
    private ServerCompatibilityMode _serverCompatibilityMode;
    private bool _trustServerCertificate;
    private int _internalCommandTimeout;
    internal string DataSourceCached { get; }
    internal TimeSpan HostRecheckSecondsTranslated { get; }
    [NullableAttribute("1")]
public object Item { get; public set; }
    private object System.Collections.Generic.IDictionary<System.String,System.Object>.Item { get; private set; }
    [CategoryAttribute("Connection")]
[DescriptionAttribute("The hostname or IP address of the PostgreSQL server to connect to.")]
[DisplayNameAttribute("Host")]
[NpgsqlConnectionStringPropertyAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public string Host { get; public set; }
    [CategoryAttribute("Connection")]
[DescriptionAttribute("The TCP port of the PostgreSQL server.")]
[DisplayNameAttribute("Port")]
[NpgsqlConnectionStringPropertyAttribute]
[DefaultValueAttribute("5432")]
public int Port { get; public set; }
    [CategoryAttribute("Connection")]
[DescriptionAttribute("The PostgreSQL database to connect to.")]
[DisplayNameAttribute("Database")]
[NpgsqlConnectionStringPropertyAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public string Database { get; public set; }
    [CategoryAttribute("Connection")]
[DescriptionAttribute("The username to connect with.")]
[DisplayNameAttribute("Username")]
[NpgsqlConnectionStringPropertyAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public string Username { get; public set; }
    [CategoryAttribute("Connection")]
[DescriptionAttribute("The password to connect with.")]
[PasswordPropertyTextAttribute("True")]
[DisplayNameAttribute("Password")]
[NpgsqlConnectionStringPropertyAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public string Password { get; public set; }
    [CategoryAttribute("Connection")]
[DescriptionAttribute("Path to a PostgreSQL password file (PGPASSFILE), from which the password would be taken.")]
[DisplayNameAttribute("Passfile")]
[NpgsqlConnectionStringPropertyAttribute]
public string Passfile { get; public set; }
    [CategoryAttribute("Connection")]
[DescriptionAttribute("The optional application name parameter to be sent to the backend during connection initiation")]
[DisplayNameAttribute("Application Name")]
[NpgsqlConnectionStringPropertyAttribute]
public string ApplicationName { get; public set; }
    [CategoryAttribute("Connection")]
[DescriptionAttribute("Whether to enlist in an ambient TransactionScope.")]
[DisplayNameAttribute("Enlist")]
[DefaultValueAttribute("True")]
[NpgsqlConnectionStringPropertyAttribute]
public bool Enlist { get; public set; }
    [CategoryAttribute("Connection")]
[DescriptionAttribute("Gets or sets the schema search path.")]
[DisplayNameAttribute("Search Path")]
[NpgsqlConnectionStringPropertyAttribute]
public string SearchPath { get; public set; }
    [CategoryAttribute("Connection")]
[DescriptionAttribute("Gets or sets the client_encoding parameter.")]
[DisplayNameAttribute("Client Encoding")]
[NpgsqlConnectionStringPropertyAttribute]
public string ClientEncoding { get; public set; }
    [NullableAttribute("1")]
[CategoryAttribute("Connection")]
[DescriptionAttribute("Gets or sets the .NET encoding that will be used to encode/decode PostgreSQL string data.")]
[DisplayNameAttribute("Encoding")]
[DefaultValueAttribute("UTF8")]
[NpgsqlConnectionStringPropertyAttribute]
public string Encoding { get; public set; }
    [CategoryAttribute("Connection")]
[DescriptionAttribute("Gets or sets the PostgreSQL session timezone, in Olson/IANA database format.")]
[DisplayNameAttribute("Timezone")]
[NpgsqlConnectionStringPropertyAttribute]
public string Timezone { get; public set; }
    [CategoryAttribute("Security")]
[DescriptionAttribute("Controls whether SSL is required, disabled or preferred, depending on server support.")]
[DisplayNameAttribute("SSL Mode")]
[DefaultValueAttribute("Mono.Cecil.CustomAttributeArgument")]
[NpgsqlConnectionStringPropertyAttribute]
public SslMode SslMode { get; public set; }
    [CategoryAttribute("Security")]
[DescriptionAttribute("Location of a client certificate to be sent to the server.")]
[DisplayNameAttribute("SSL Certificate")]
[NpgsqlConnectionStringPropertyAttribute]
public string SslCertificate { get; public set; }
    [CategoryAttribute("Security")]
[DescriptionAttribute("Location of a client key for a client certificate to be sent to the server.")]
[DisplayNameAttribute("SSL Key")]
[NpgsqlConnectionStringPropertyAttribute]
public string SslKey { get; public set; }
    [CategoryAttribute("Security")]
[DescriptionAttribute("Password for a key for a client certificate.")]
[DisplayNameAttribute("SSL Password")]
[NpgsqlConnectionStringPropertyAttribute]
public string SslPassword { get; public set; }
    [CategoryAttribute("Security")]
[DescriptionAttribute("Location of a CA certificate used to validate the server certificate.")]
[DisplayNameAttribute("Root Certificate")]
[NpgsqlConnectionStringPropertyAttribute]
public string RootCertificate { get; public set; }
    [CategoryAttribute("Security")]
[DescriptionAttribute("Whether to check the certificate revocation list during authentication.")]
[DisplayNameAttribute("Check Certificate Revocation")]
[NpgsqlConnectionStringPropertyAttribute]
public bool CheckCertificateRevocation { get; public set; }
    [NullableAttribute("1")]
[CategoryAttribute("Security")]
[DescriptionAttribute("The Kerberos service name to be used for authentication.")]
[DisplayNameAttribute("Kerberos Service Name")]
[NpgsqlConnectionStringPropertyAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[DefaultValueAttribute("postgres")]
public string KerberosServiceName { get; public set; }
    [CategoryAttribute("Security")]
[DescriptionAttribute("The Kerberos realm to be used for authentication.")]
[DisplayNameAttribute("Include Realm")]
[NpgsqlConnectionStringPropertyAttribute]
public bool IncludeRealm { get; public set; }
    [CategoryAttribute("Security")]
[DescriptionAttribute("Gets or sets a Boolean value that indicates if security-sensitive information, such as the password, is not returned as part of the connection if the connection is open or has ever been in an open state.")]
[DisplayNameAttribute("Persist Security Info")]
[NpgsqlConnectionStringPropertyAttribute]
public bool PersistSecurityInfo { get; public set; }
    [CategoryAttribute("Security")]
[DescriptionAttribute("When enabled, parameter values are logged when commands are executed. Defaults to false.")]
[DisplayNameAttribute("Log Parameters")]
[NpgsqlConnectionStringPropertyAttribute]
public bool LogParameters { get; public set; }
    [CategoryAttribute("Security")]
[DescriptionAttribute("When enabled, PostgreSQL error and notice details are included on PostgresException.Detail and PostgresNotice.Detail. These can contain sensitive data.")]
[DisplayNameAttribute("Include Error Detail")]
[NpgsqlConnectionStringPropertyAttribute]
public bool IncludeErrorDetail { get; public set; }
    [CategoryAttribute("Security")]
[DescriptionAttribute("Controls whether channel binding is required, disabled or preferred, depending on server support.")]
[DisplayNameAttribute("Channel Binding")]
[DefaultValueAttribute("Mono.Cecil.CustomAttributeArgument")]
[NpgsqlConnectionStringPropertyAttribute]
public ChannelBinding ChannelBinding { get; public set; }
    [CategoryAttribute("Pooling")]
[DescriptionAttribute("Whether connection pooling should be used.")]
[DisplayNameAttribute("Pooling")]
[NpgsqlConnectionStringPropertyAttribute]
[DefaultValueAttribute("True")]
public bool Pooling { get; public set; }
    [CategoryAttribute("Pooling")]
[DescriptionAttribute("The minimum connection pool size.")]
[DisplayNameAttribute("Minimum Pool Size")]
[NpgsqlConnectionStringPropertyAttribute]
[DefaultValueAttribute("0")]
public int MinPoolSize { get; public set; }
    [CategoryAttribute("Pooling")]
[DescriptionAttribute("The maximum connection pool size.")]
[DisplayNameAttribute("Maximum Pool Size")]
[NpgsqlConnectionStringPropertyAttribute]
[DefaultValueAttribute("100")]
public int MaxPoolSize { get; public set; }
    [CategoryAttribute("Pooling")]
[DescriptionAttribute("The time to wait before closing unused connections in the pool if the count of all connections exceeds MinPoolSize.")]
[DisplayNameAttribute("Connection Idle Lifetime")]
[NpgsqlConnectionStringPropertyAttribute]
[DefaultValueAttribute("300")]
public int ConnectionIdleLifetime { get; public set; }
    [CategoryAttribute("Pooling")]
[DescriptionAttribute("How many seconds the pool waits before attempting to prune idle connections that are beyond idle lifetime.")]
[DisplayNameAttribute("Connection Pruning Interval")]
[NpgsqlConnectionStringPropertyAttribute]
[DefaultValueAttribute("10")]
public int ConnectionPruningInterval { get; public set; }
    [CategoryAttribute("Pooling")]
[DescriptionAttribute("The total maximum lifetime of connections (in seconds).")]
[DisplayNameAttribute("Connection Lifetime")]
[NpgsqlConnectionStringPropertyAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public int ConnectionLifetime { get; public set; }
    [CategoryAttribute("Timeouts")]
[DescriptionAttribute("The time to wait (in seconds) while trying to establish a connection before terminating the attempt and generating an error.")]
[DisplayNameAttribute("Timeout")]
[NpgsqlConnectionStringPropertyAttribute]
[DefaultValueAttribute("15")]
public int Timeout { get; public set; }
    [CategoryAttribute("Timeouts")]
[DescriptionAttribute("The time to wait (in seconds) while trying to execute a command before terminating the attempt and generating an error. Set to zero for infinity.")]
[DisplayNameAttribute("Command Timeout")]
[NpgsqlConnectionStringPropertyAttribute]
[DefaultValueAttribute("30")]
public int CommandTimeout { get; public set; }
    [CategoryAttribute("Timeouts")]
[DescriptionAttribute("After Command Timeout is reached (or user supplied cancellation token is cancelled) and command cancellation is attempted, Npgsql waits for this additional timeout (in milliseconds) before breaking the connection. Defaults to 2000, set to zero for infinity.")]
[DisplayNameAttribute("Cancellation Timeout")]
[NpgsqlConnectionStringPropertyAttribute]
[DefaultValueAttribute("2000")]
public int CancellationTimeout { get; public set; }
    [CategoryAttribute("Failover and load balancing")]
[DescriptionAttribute("Determines the preferred PostgreSQL target server type.")]
[DisplayNameAttribute("Target Session Attributes")]
[NpgsqlConnectionStringPropertyAttribute]
public string TargetSessionAttributes { get; public set; }
    internal Nullable`1<TargetSessionAttributes> TargetSessionAttributesParsed { get; internal set; }
    [CategoryAttribute("Failover and load balancing")]
[DescriptionAttribute("Enables balancing between multiple hosts by round-robin.")]
[DisplayNameAttribute("Load Balance Hosts")]
[NpgsqlConnectionStringPropertyAttribute]
public bool LoadBalanceHosts { get; public set; }
    [CategoryAttribute("Failover and load balancing")]
[DescriptionAttribute("Controls for how long the host's cached state will be considered as valid.")]
[DisplayNameAttribute("Host Recheck Seconds")]
[DefaultValueAttribute("10")]
[NpgsqlConnectionStringPropertyAttribute]
public int HostRecheckSeconds { get; public set; }
    [CategoryAttribute("Advanced")]
[DescriptionAttribute("The number of seconds of connection inactivity before Npgsql sends a keepalive query.")]
[DisplayNameAttribute("Keepalive")]
[NpgsqlConnectionStringPropertyAttribute]
public int KeepAlive { get; public set; }
    [CategoryAttribute("Advanced")]
[DescriptionAttribute("Whether to use TCP keepalive with system defaults if overrides isn't specified.")]
[DisplayNameAttribute("TCP Keepalive")]
[NpgsqlConnectionStringPropertyAttribute]
public bool TcpKeepAlive { get; public set; }
    [CategoryAttribute("Advanced")]
[DescriptionAttribute("The number of seconds of connection inactivity before a TCP keepalive query is sent.")]
[DisplayNameAttribute("TCP Keepalive Time")]
[NpgsqlConnectionStringPropertyAttribute]
public int TcpKeepAliveTime { get; public set; }
    [CategoryAttribute("Advanced")]
[DescriptionAttribute("The interval, in seconds, between when successive keep-alive packets are sent if no acknowledgement is received.")]
[DisplayNameAttribute("TCP Keepalive Interval")]
[NpgsqlConnectionStringPropertyAttribute]
public int TcpKeepAliveInterval { get; public set; }
    [CategoryAttribute("Advanced")]
[DescriptionAttribute("Determines the size of the internal buffer Npgsql uses when reading. Increasing may improve performance if transferring large values from the database.")]
[DisplayNameAttribute("Read Buffer Size")]
[NpgsqlConnectionStringPropertyAttribute]
[DefaultValueAttribute("8192")]
public int ReadBufferSize { get; public set; }
    [CategoryAttribute("Advanced")]
[DescriptionAttribute("Determines the size of the internal buffer Npgsql uses when writing. Increasing may improve performance if transferring large values to the database.")]
[DisplayNameAttribute("Write Buffer Size")]
[NpgsqlConnectionStringPropertyAttribute]
[DefaultValueAttribute("8192")]
public int WriteBufferSize { get; public set; }
    [CategoryAttribute("Advanced")]
[DescriptionAttribute("Determines the size of socket receive buffer.")]
[DisplayNameAttribute("Socket Receive Buffer Size")]
[NpgsqlConnectionStringPropertyAttribute]
public int SocketReceiveBufferSize { get; public set; }
    [CategoryAttribute("Advanced")]
[DescriptionAttribute("Determines the size of socket send buffer.")]
[DisplayNameAttribute("Socket Send Buffer Size")]
[NpgsqlConnectionStringPropertyAttribute]
public int SocketSendBufferSize { get; public set; }
    [CategoryAttribute("Advanced")]
[DescriptionAttribute("The maximum number SQL statements that can be automatically prepared at any given point. Beyond this number the least-recently-used statement will be recycled. Zero (the default) disables automatic preparation.")]
[DisplayNameAttribute("Max Auto Prepare")]
[NpgsqlConnectionStringPropertyAttribute]
public int MaxAutoPrepare { get; public set; }
    [CategoryAttribute("Advanced")]
[DescriptionAttribute("The minimum number of usages an SQL statement is used before it's automatically prepared. Defaults to 5.")]
[DisplayNameAttribute("Auto Prepare Min Usages")]
[NpgsqlConnectionStringPropertyAttribute]
[DefaultValueAttribute("5")]
public int AutoPrepareMinUsages { get; public set; }
    [CategoryAttribute("Advanced")]
[DescriptionAttribute("If set to true, a pool connection's state won't be reset when it is closed (improves performance). Do not specify this unless you know what you're doing.")]
[DisplayNameAttribute("No Reset On Close")]
[NpgsqlConnectionStringPropertyAttribute]
public bool NoResetOnClose { get; public set; }
    [CategoryAttribute("Advanced")]
[DescriptionAttribute("Load table composite type definitions, and not just free-standing composite types.")]
[DisplayNameAttribute("Load Table Composites")]
[NpgsqlConnectionStringPropertyAttribute]
public bool LoadTableComposites { get; public set; }
    [NpgsqlConnectionStringPropertyAttribute]
[DisplayNameAttribute("Replication Mode")]
internal ReplicationMode ReplicationMode { get; internal set; }
    [CategoryAttribute("Advanced")]
[DescriptionAttribute("Set PostgreSQL configuration parameter default values for the connection.")]
[DisplayNameAttribute("Options")]
[NpgsqlConnectionStringPropertyAttribute]
public string Options { get; public set; }
    [CategoryAttribute("Advanced")]
[DescriptionAttribute("Configure the way arrays of value types are returned when requested as object instances.")]
[DisplayNameAttribute("Array Nullability Mode")]
[NpgsqlConnectionStringPropertyAttribute]
public ArrayNullabilityMode ArrayNullabilityMode { get; public set; }
    [CategoryAttribute("Multiplexing")]
[DescriptionAttribute("Enables multiplexing, which allows more efficient use of connections.")]
[DisplayNameAttribute("Multiplexing")]
[NpgsqlConnectionStringPropertyAttribute]
[DefaultValueAttribute("False")]
public bool Multiplexing { get; public set; }
    [CategoryAttribute("Multiplexing")]
[DescriptionAttribute("When multiplexing is enabled, determines the maximum number of outgoing bytes to buffer before flushing to the network.")]
[DisplayNameAttribute("Write Coalescing Buffer Threshold Bytes")]
[NpgsqlConnectionStringPropertyAttribute]
[DefaultValueAttribute("1000")]
public int WriteCoalescingBufferThresholdBytes { get; public set; }
    [CategoryAttribute("Compatibility")]
[DescriptionAttribute("A compatibility mode for special PostgreSQL server types.")]
[DisplayNameAttribute("Server Compatibility Mode")]
[NpgsqlConnectionStringPropertyAttribute]
public ServerCompatibilityMode ServerCompatibilityMode { get; public set; }
    [CategoryAttribute("Security")]
[DescriptionAttribute("Whether to trust the server certificate without validating it.")]
[DisplayNameAttribute("Trust Server Certificate")]
[ObsoleteAttribute("The TrustServerCertificate parameter is no longer needed and does nothing.")]
[NpgsqlConnectionStringPropertyAttribute]
public bool TrustServerCertificate { get; public set; }
    [CategoryAttribute("Obsolete")]
[DescriptionAttribute("The time to wait (in seconds) while trying to execute a an internal command before terminating the attempt and generating an error. -1 uses CommandTimeout, 0 means no timeout.")]
[DisplayNameAttribute("Internal Command Timeout")]
[NpgsqlConnectionStringPropertyAttribute]
[DefaultValueAttribute("-1")]
[ObsoleteAttribute("The InternalCommandTimeout parameter is no longer needed and does nothing.")]
public int InternalCommandTimeout { get; public set; }
    [NullableAttribute("1")]
internal string ConnectionStringForMultipleHosts { get; }
    [NullableAttribute("1")]
public ICollection`1<string> Keys { get; }
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public ICollection`1<object> Values { get; }
    public NpgsqlConnectionStringBuilder(bool useOdbcRules);
    public NpgsqlConnectionStringBuilder(string connectionString);
    internal string get_DataSourceCached();
    internal TimeSpan get_HostRecheckSecondsTranslated();
    private int Init();
    [NullableContextAttribute("1")]
private bool GeneratedActions(GeneratedAction action, string keyword, Object& value);
    [NullableContextAttribute("1")]
public virtual object get_Item(string keyword);
    [NullableContextAttribute("1")]
public virtual void set_Item(string keyword, object value);
    [NullableContextAttribute("1")]
private sealed virtual override object System.Collections.Generic.IDictionary<System.String,System.Object>.get_Item(string keyword);
    [NullableContextAttribute("1")]
private sealed virtual override void System.Collections.Generic.IDictionary<System.String,System.Object>.set_Item(string keyword, object value);
    public sealed virtual void Add(KeyValuePair`2<string, object> item);
    [NullableContextAttribute("1")]
private sealed virtual override void System.Collections.Generic.IDictionary<System.String,System.Object>.Add(string keyword, object value);
    [NullableContextAttribute("1")]
public virtual bool Remove(string keyword);
    public sealed virtual bool Remove(KeyValuePair`2<string, object> item);
    public virtual void Clear();
    [NullableContextAttribute("1")]
public virtual bool ContainsKey(string keyword);
    public sealed virtual bool Contains(KeyValuePair`2<string, object> item);
    [NullableContextAttribute("1")]
public virtual bool TryGetValue(string keyword, Object& value);
    [NullableContextAttribute("1")]
private void SetValue(string propertyName, object value);
    public string get_Host();
    public void set_Host(string value);
    public int get_Port();
    public void set_Port(int value);
    public string get_Database();
    public void set_Database(string value);
    public string get_Username();
    public void set_Username(string value);
    public string get_Password();
    public void set_Password(string value);
    public string get_Passfile();
    public void set_Passfile(string value);
    public string get_ApplicationName();
    public void set_ApplicationName(string value);
    public bool get_Enlist();
    public void set_Enlist(bool value);
    public string get_SearchPath();
    public void set_SearchPath(string value);
    public string get_ClientEncoding();
    public void set_ClientEncoding(string value);
    [NullableContextAttribute("1")]
public string get_Encoding();
    [NullableContextAttribute("1")]
public void set_Encoding(string value);
    public string get_Timezone();
    public void set_Timezone(string value);
    public SslMode get_SslMode();
    public void set_SslMode(SslMode value);
    public string get_SslCertificate();
    public void set_SslCertificate(string value);
    public string get_SslKey();
    public void set_SslKey(string value);
    public string get_SslPassword();
    public void set_SslPassword(string value);
    public string get_RootCertificate();
    public void set_RootCertificate(string value);
    public bool get_CheckCertificateRevocation();
    public void set_CheckCertificateRevocation(bool value);
    [NullableContextAttribute("1")]
public string get_KerberosServiceName();
    [NullableContextAttribute("1")]
public void set_KerberosServiceName(string value);
    public bool get_IncludeRealm();
    public void set_IncludeRealm(bool value);
    public bool get_PersistSecurityInfo();
    public void set_PersistSecurityInfo(bool value);
    public bool get_LogParameters();
    public void set_LogParameters(bool value);
    public bool get_IncludeErrorDetail();
    public void set_IncludeErrorDetail(bool value);
    public ChannelBinding get_ChannelBinding();
    public void set_ChannelBinding(ChannelBinding value);
    public bool get_Pooling();
    public void set_Pooling(bool value);
    public int get_MinPoolSize();
    public void set_MinPoolSize(int value);
    public int get_MaxPoolSize();
    public void set_MaxPoolSize(int value);
    public int get_ConnectionIdleLifetime();
    public void set_ConnectionIdleLifetime(int value);
    public int get_ConnectionPruningInterval();
    public void set_ConnectionPruningInterval(int value);
    public int get_ConnectionLifetime();
    public void set_ConnectionLifetime(int value);
    public int get_Timeout();
    public void set_Timeout(int value);
    public int get_CommandTimeout();
    public void set_CommandTimeout(int value);
    public int get_CancellationTimeout();
    public void set_CancellationTimeout(int value);
    public string get_TargetSessionAttributes();
    public void set_TargetSessionAttributes(string value);
    [CompilerGeneratedAttribute]
internal Nullable`1<TargetSessionAttributes> get_TargetSessionAttributesParsed();
    [CompilerGeneratedAttribute]
internal void set_TargetSessionAttributesParsed(Nullable`1<TargetSessionAttributes> value);
    [NullableContextAttribute("1")]
internal static TargetSessionAttributes ParseTargetSessionAttributes(string s);
    public bool get_LoadBalanceHosts();
    public void set_LoadBalanceHosts(bool value);
    public int get_HostRecheckSeconds();
    public void set_HostRecheckSeconds(int value);
    public int get_KeepAlive();
    public void set_KeepAlive(int value);
    public bool get_TcpKeepAlive();
    public void set_TcpKeepAlive(bool value);
    public int get_TcpKeepAliveTime();
    public void set_TcpKeepAliveTime(int value);
    public int get_TcpKeepAliveInterval();
    public void set_TcpKeepAliveInterval(int value);
    public int get_ReadBufferSize();
    public void set_ReadBufferSize(int value);
    public int get_WriteBufferSize();
    public void set_WriteBufferSize(int value);
    public int get_SocketReceiveBufferSize();
    public void set_SocketReceiveBufferSize(int value);
    public int get_SocketSendBufferSize();
    public void set_SocketSendBufferSize(int value);
    public int get_MaxAutoPrepare();
    public void set_MaxAutoPrepare(int value);
    public int get_AutoPrepareMinUsages();
    public void set_AutoPrepareMinUsages(int value);
    public bool get_NoResetOnClose();
    public void set_NoResetOnClose(bool value);
    public bool get_LoadTableComposites();
    public void set_LoadTableComposites(bool value);
    internal ReplicationMode get_ReplicationMode();
    internal void set_ReplicationMode(ReplicationMode value);
    public string get_Options();
    public void set_Options(string value);
    public ArrayNullabilityMode get_ArrayNullabilityMode();
    public void set_ArrayNullabilityMode(ArrayNullabilityMode value);
    public bool get_Multiplexing();
    public void set_Multiplexing(bool value);
    public int get_WriteCoalescingBufferThresholdBytes();
    public void set_WriteCoalescingBufferThresholdBytes(int value);
    public ServerCompatibilityMode get_ServerCompatibilityMode();
    public void set_ServerCompatibilityMode(ServerCompatibilityMode value);
    public bool get_TrustServerCertificate();
    public void set_TrustServerCertificate(bool value);
    public int get_InternalCommandTimeout();
    public void set_InternalCommandTimeout(int value);
    internal void PostProcessAndValidate();
    [NullableContextAttribute("1")]
internal string ToStringWithoutPassword();
    [NullableContextAttribute("1")]
internal string get_ConnectionStringForMultipleHosts();
    [NullableContextAttribute("1")]
internal NpgsqlConnectionStringBuilder Clone();
    [NullableContextAttribute("0")]
internal static bool TrySplitHostPort(ReadOnlySpan`1<char> originalHost, String& host, Int32& port);
    [NullableContextAttribute("1")]
internal static bool IsUnixSocket(string host, int port, String& socketPath, bool replaceForAbstract);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
    [NullableContextAttribute("1")]
public sealed virtual ICollection`1<string> get_Keys();
    public sealed virtual ICollection`1<object> get_Values();
    public sealed virtual void CopyTo(KeyValuePair`2[] array, int arrayIndex);
    [IteratorStateMachineAttribute("Npgsql.NpgsqlConnectionStringBuilder/<GetEnumerator>d__270")]
public sealed virtual IEnumerator`1<KeyValuePair`2<string, object>> GetEnumerator();
    [NullableContextAttribute("1")]
[RequiresUnreferencedCodeAttribute("PropertyDescriptor's PropertyType cannot be statically discovered.")]
protected virtual void GetProperties(Hashtable propertyDescriptors);
    [NullableContextAttribute("0")]
[CompilerGeneratedAttribute]
internal static object <GeneratedActions>g__GetValue|10_0(Type type, object value);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[AttributeUsageAttribute("128")]
internal class Npgsql.NpgsqlConnectionStringPropertyAttribute : Attribute {
    [CompilerGeneratedAttribute]
private String[] <Synonyms>k__BackingField;
    public String[] Synonyms { get; }
    public NpgsqlConnectionStringPropertyAttribute(String[] synonyms);
    [CompilerGeneratedAttribute]
public String[] get_Synonyms();
}
public class Npgsql.NpgsqlCopyTextReader : StreamReader {
    [NullableContextAttribute("1")]
internal NpgsqlCopyTextReader(NpgsqlConnector connector, NpgsqlRawCopyStream underlying);
    public sealed virtual void Cancel();
    [NullableContextAttribute("1")]
public sealed virtual Task CancelAsync();
    public sealed virtual ValueTask DisposeAsync();
}
public class Npgsql.NpgsqlCopyTextWriter : StreamWriter {
    [NullableContextAttribute("1")]
internal NpgsqlCopyTextWriter(NpgsqlConnector connector, NpgsqlRawCopyStream underlying);
    public sealed virtual void Cancel();
    [NullableContextAttribute("1")]
public sealed virtual Task CancelAsync();
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
[DesignerCategoryAttribute("")]
public class Npgsql.NpgsqlDataAdapter : DbDataAdapter {
    [CompilerGeneratedAttribute]
private NpgsqlRowUpdatedEventHandler RowUpdated;
    [CompilerGeneratedAttribute]
private NpgsqlRowUpdatingEventHandler RowUpdating;
    public NpgsqlCommand DeleteCommand { get; public set; }
    public NpgsqlCommand SelectCommand { get; public set; }
    public NpgsqlCommand UpdateCommand { get; public set; }
    public NpgsqlCommand InsertCommand { get; public set; }
    [NullableContextAttribute("1")]
public NpgsqlDataAdapter(NpgsqlCommand selectCommand);
    [NullableContextAttribute("1")]
public NpgsqlDataAdapter(string selectCommandText, NpgsqlConnection selectConnection);
    [NullableContextAttribute("1")]
public NpgsqlDataAdapter(string selectCommandText, string selectConnectionString);
    [CompilerGeneratedAttribute]
public void add_RowUpdated(NpgsqlRowUpdatedEventHandler value);
    [CompilerGeneratedAttribute]
public void remove_RowUpdated(NpgsqlRowUpdatedEventHandler value);
    [CompilerGeneratedAttribute]
public void add_RowUpdating(NpgsqlRowUpdatingEventHandler value);
    [CompilerGeneratedAttribute]
public void remove_RowUpdating(NpgsqlRowUpdatingEventHandler value);
    [NullableContextAttribute("1")]
protected virtual RowUpdatedEventArgs CreateRowUpdatedEvent(DataRow dataRow, IDbCommand command, StatementType statementType, DataTableMapping tableMapping);
    [NullableContextAttribute("1")]
protected virtual RowUpdatingEventArgs CreateRowUpdatingEvent(DataRow dataRow, IDbCommand command, StatementType statementType, DataTableMapping tableMapping);
    [NullableContextAttribute("1")]
protected virtual void OnRowUpdated(RowUpdatedEventArgs value);
    [NullableContextAttribute("1")]
protected virtual void OnRowUpdating(RowUpdatingEventArgs value);
    public NpgsqlCommand get_DeleteCommand();
    public void set_DeleteCommand(NpgsqlCommand value);
    public NpgsqlCommand get_SelectCommand();
    public void set_SelectCommand(NpgsqlCommand value);
    public NpgsqlCommand get_UpdateCommand();
    public void set_UpdateCommand(NpgsqlCommand value);
    public NpgsqlCommand get_InsertCommand();
    public void set_InsertCommand(NpgsqlCommand value);
    [NullableContextAttribute("1")]
[AsyncStateMachineAttribute("Npgsql.NpgsqlDataAdapter/<Fill>d__26")]
[RequiresUnreferencedCodeAttribute("Members from serialized types or types used in expressions may be trimmed if not referenced directly.")]
internal Task`1<int> Fill(DataTable dataTable, bool async, CancellationToken cancellationToken);
    [NullableContextAttribute("1")]
[AsyncStateMachineAttribute("Npgsql.NpgsqlDataAdapter/<Fill>d__27")]
[RequiresUnreferencedCodeAttribute("Members from serialized types or types used in expressions may be trimmed if not referenced directly.")]
private Task`1<int> Fill(DataTable dataTable, NpgsqlDataReader dataReader, bool async, CancellationToken cancellationToken);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[DefaultMemberAttribute("Item")]
public class Npgsql.NpgsqlDataReader : DbDataReader {
    private static Task`1<bool> TrueTask;
    private static Task`1<bool> FalseTask;
    [CompilerGeneratedAttribute]
private NpgsqlCommand <Command>k__BackingField;
    [CompilerGeneratedAttribute]
private NpgsqlConnector <Connector>k__BackingField;
    [NullableAttribute("2")]
private NpgsqlConnection _connection;
    private CommandBehavior _behavior;
    [NullableAttribute("2")]
private Task _sendTask;
    internal ReaderState State;
    internal NpgsqlReadBuffer Buffer;
    private List`1<NpgsqlBatchCommand> _statements;
    [CompilerGeneratedAttribute]
private int <StatementIndex>k__BackingField;
    [TupleElementNamesAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private List`1<ValueTuple`2<int, int>> _columns;
    private int _columnsStartPos;
    private int _column;
    private int _dataMsgEnd;
    private bool _canConsumeRowNonSequentially;
    [NullableAttribute("2")]
internal RowDescriptionMessage RowDescription;
    [NullableAttribute("2")]
[CompilerGeneratedAttribute]
private ColumnInfo[] <ColumnInfoCache>k__BackingField;
    private Nullable`1<ulong> _recordsAffected;
    private bool _hasRows;
    [NullableAttribute("2")]
[CompilerGeneratedAttribute]
private EventHandler ReaderClosed;
    private bool _isSchemaOnly;
    private bool _isSequential;
    [NullableAttribute("2")]
internal NpgsqlNestedDataReader CachedFreeNestedDataReader;
    private long _startTimestamp;
    private ILogger _commandLogger;
    internal NpgsqlCommand Command { get; private set; }
    internal NpgsqlConnector Connector { get; }
    private PgReader PgReader { get; }
    internal int StatementIndex { get; private set; }
    private int ColumnCount { get; }
    [NullableAttribute("2")]
private ColumnInfo[] ColumnInfoCache { get; private set; }
    public int Depth { get; }
    public bool IsClosed { get; }
    public int RecordsAffected { get; }
    public ulong Rows { get; }
    [ObsoleteAttribute("Use the new DbBatch API")]
public IReadOnlyList`1<NpgsqlBatchCommand> Statements { get; }
    public bool HasRows { get; }
    public bool IsOnRow { get; }
    public int FieldCount { get; }
    public object Item { get; }
    public object Item { get; }
    internal NpgsqlDataReader(NpgsqlConnector connector);
    private static NpgsqlDataReader();
    [CompilerGeneratedAttribute]
internal NpgsqlCommand get_Command();
    [CompilerGeneratedAttribute]
private void set_Command(NpgsqlCommand value);
    [CompilerGeneratedAttribute]
internal NpgsqlConnector get_Connector();
    private PgReader get_PgReader();
    [CompilerGeneratedAttribute]
internal int get_StatementIndex();
    [CompilerGeneratedAttribute]
private void set_StatementIndex(int value);
    private int get_ColumnCount();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
private ColumnInfo[] get_ColumnInfoCache();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
private void set_ColumnInfoCache(ColumnInfo[] value);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public void add_ReaderClosed(EventHandler value);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public void remove_ReaderClosed(EventHandler value);
    internal void Init(NpgsqlCommand command, CommandBehavior behavior, List`1<NpgsqlBatchCommand> statements, long startTimestamp, Task sendTask);
    public virtual bool Read();
    public virtual Task`1<bool> ReadAsync(CancellationToken cancellationToken);
    [NullableContextAttribute("2")]
private Task`1<bool> TryRead();
    [AsyncStateMachineAttribute("Npgsql.NpgsqlDataReader/<Read>d__48")]
private Task`1<bool> Read(bool async, CancellationToken cancellationToken);
    private ValueTask`1<IBackendMessage> ReadMessage(bool async);
    public virtual bool NextResult();
    public virtual Task`1<bool> NextResultAsync(CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Npgsql.NpgsqlDataReader/<NextResult>d__52")]
private Task`1<bool> NextResult(bool async, bool isConsuming, CancellationToken cancellationToken);
    private void PopulateOutputParameters(NpgsqlParameterCollection parameters);
    [AsyncStateMachineAttribute("Npgsql.NpgsqlDataReader/<NextResultSchemaOnly>d__54")]
private Task`1<bool> NextResultSchemaOnly(bool async, bool isConsuming, CancellationToken cancellationToken);
    internal void ProcessMessage(IBackendMessage msg);
    public virtual int get_Depth();
    public virtual bool get_IsClosed();
    public virtual int get_RecordsAffected();
    public ulong get_Rows();
    public IReadOnlyList`1<NpgsqlBatchCommand> get_Statements();
    public virtual bool get_HasRows();
    public bool get_IsOnRow();
    public virtual string GetName(int ordinal);
    public virtual int get_FieldCount();
    [AsyncStateMachineAttribute("Npgsql.NpgsqlDataReader/<Consume>d__73")]
private Task Consume(bool async, Exception firstException);
    protected virtual void Dispose(bool disposing);
    [AsyncStateMachineAttribute("Npgsql.NpgsqlDataReader/<DisposeAsync>d__75")]
public virtual ValueTask DisposeAsync();
    private static bool AllPostgresExceptions(ReadOnlyCollection`1<Exception> collection);
    public virtual void Close();
    public virtual Task CloseAsync();
    [AsyncStateMachineAttribute("Npgsql.NpgsqlDataReader/<Close>d__79")]
internal Task Close(bool async, bool connectionClosing, bool isDisposing);
    [AsyncStateMachineAttribute("Npgsql.NpgsqlDataReader/<Cleanup>d__80")]
internal Task Cleanup(bool async, bool connectionClosing, bool isDisposing);
    public virtual bool GetBoolean(int ordinal);
    public virtual byte GetByte(int ordinal);
    public virtual char GetChar(int ordinal);
    public virtual short GetInt16(int ordinal);
    public virtual int GetInt32(int ordinal);
    public virtual long GetInt64(int ordinal);
    public virtual DateTime GetDateTime(int ordinal);
    public virtual string GetString(int ordinal);
    public virtual decimal GetDecimal(int ordinal);
    public virtual double GetDouble(int ordinal);
    public virtual float GetFloat(int ordinal);
    public virtual Guid GetGuid(int ordinal);
    public virtual int GetValues(Object[] values);
    public virtual object get_Item(int ordinal);
    public TimeSpan GetTimeSpan(int ordinal);
    protected virtual DbDataReader GetDbDataReader(int ordinal);
    public NpgsqlNestedDataReader GetData(int ordinal);
    [NullableContextAttribute("2")]
public virtual long GetBytes(int ordinal, long dataOffset, Byte[] buffer, int bufferOffset, int length);
    public virtual Stream GetStream(int ordinal);
    public Task`1<Stream> GetStreamAsync(int ordinal, CancellationToken cancellationToken);
    [NullableContextAttribute("2")]
public virtual long GetChars(int ordinal, long dataOffset, Char[] buffer, int bufferOffset, int length);
    public virtual TextReader GetTextReader(int ordinal);
    public Task`1<TextReader> GetTextReaderAsync(int ordinal, CancellationToken cancellationToken);
    public virtual Task`1<T> GetFieldValueAsync(int ordinal, CancellationToken cancellationToken);
    public virtual T GetFieldValue(int ordinal);
    private T GetFieldValueCore(int ordinal);
    public virtual object GetValue(int ordinal);
    public virtual object get_Item(string name);
    public virtual bool IsDBNull(int ordinal);
    public virtual Task`1<bool> IsDBNullAsync(int ordinal, CancellationToken cancellationToken);
    public virtual int GetOrdinal(string name);
    public PostgresType GetPostgresType(int ordinal);
    public virtual string GetDataTypeName(int ordinal);
    public UInt32 GetDataTypeOID(int ordinal);
    [UnconditionalSuppressMessageAttribute("ILLink", "IL2093")]
public virtual Type GetFieldType(int ordinal);
    public virtual IEnumerator GetEnumerator();
    public ReadOnlyCollection`1<NpgsqlDbColumn> GetColumnSchema();
    private sealed virtual override ReadOnlyCollection`1<DbColumn> System.Data.Common.IDbColumnSchemaGenerator.GetColumnSchema();
    public Task`1<ReadOnlyCollection`1<NpgsqlDbColumn>> GetColumnSchemaAsync(CancellationToken cancellationToken);
    private Task`1<ReadOnlyCollection`1<NpgsqlDbColumn>> GetColumnSchema(bool async, CancellationToken cancellationToken);
    [NullableContextAttribute("2")]
[UnconditionalSuppressMessageAttribute("Composite type mapping currently isn't trimming-safe, and warnings are generated at the MapComposite level.", "IL2026")]
public virtual DataTable GetSchemaTable();
    [UnconditionalSuppressMessageAttribute("Composite type mapping currently isn't trimming-safe, and warnings are generated at the MapComposite level.", "IL2026")]
public virtual Task`1<DataTable> GetSchemaTableAsync(CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Npgsql.NpgsqlDataReader/<GetSchemaTable>d__125")]
[UnconditionalSuppressMessageAttribute("Trimming", "IL2111")]
private Task`1<DataTable> GetSchemaTable(bool async, CancellationToken cancellationToken);
    [NullableContextAttribute("0")]
private ValueTask`1<int> SeekToColumn(bool async, int ordinal, DataFormat dataFormat, bool resumableOp);
    private int SeekToColumnNonSequential(int ordinal, DataFormat dataFormat, bool resumableOp);
    [NullableContextAttribute("0")]
private ValueTask`1<int> SeekToColumnSequential(bool async, int ordinal, DataFormat dataFormat, bool resumableOp);
    private Task ConsumeRow(bool async);
    private void ConsumeRowNonSequential();
    private void CheckResultSet();
    private T DbNullValueOrThrow(int ordinal);
    private DataFormat GetInfo(int ordinal, Type type, PgConverter& converter, Size& bufferRequirement, Boolean& asObject);
    private DataFormat GetDefaultInfo(int ordinal, PgConverter& converter, Size& bufferRequirement);
    private FieldDescription CheckRowAndGetField(int column);
    [DoesNotReturnAttribute]
private static FieldDescription HandleInvalidState(ReaderState state, int maxColumns);
    private FieldDescription GetField(int column);
    private void CheckClosedOrDisposed();
    [DoesNotReturnAttribute]
private static void ThrowColumnOutOfRange(int maxIndex);
    internal void UnbindIfNecessary();
    [AsyncStateMachineAttribute("Npgsql.NpgsqlDataReader/<<ReadMessage>g__ReadMessageSequential|49_0>d")]
[CompilerGeneratedAttribute]
internal static ValueTask`1<IBackendMessage> <ReadMessage>g__ReadMessageSequential|49_0(NpgsqlConnector connector, bool async);
    [AsyncStateMachineAttribute("Npgsql.NpgsqlDataReader/<<NextResult>g__ConsumeResultSet|52_0>d")]
[CompilerGeneratedAttribute]
private ValueTask <NextResult>g__ConsumeResultSet|52_0(bool async);
    [CompilerGeneratedAttribute]
private void <ProcessMessage>g__HandleUncommon|55_0(IBackendMessage msg);
    [NullableContextAttribute("0")]
[AsyncStateMachineAttribute("Npgsql.NpgsqlDataReader/<<GetFieldValueAsync>g__Core|105_0>d`1")]
[CompilerGeneratedAttribute]
private ValueTask`1<T> <GetFieldValueAsync>g__Core|105_0(int ordinal, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Npgsql.NpgsqlDataReader/<<GetFieldValueAsync>g__GetStream|105_1>d`1")]
[CompilerGeneratedAttribute]
private Task`1<T> <GetFieldValueAsync>g__GetStream|105_1(int ordinal, CancellationToken cancellationToken);
    [NullableContextAttribute("0")]
[CompilerGeneratedAttribute]
private T <GetFieldValueCore>g__GetStream|107_0(int ordinal);
    [AsyncStateMachineAttribute("Npgsql.NpgsqlDataReader/<<IsDBNullAsync>g__Core|112_0>d")]
[CompilerGeneratedAttribute]
private Task`1<bool> <IsDBNullAsync>g__Core|112_0(int ordinal, CancellationToken cancellationToken);
    [CompilerGeneratedAttribute]
private int <SeekToColumnNonSequential>g__HandleReread|127_0(bool resuming, <>c__DisplayClass127_0& );
    [CompilerGeneratedAttribute]
private int <SeekToColumnNonSequential>g__SeekBackwards|127_1(<>c__DisplayClass127_0& );
    [NullableContextAttribute("0")]
[AsyncStateMachineAttribute("Npgsql.NpgsqlDataReader/<<SeekToColumnSequential>g__Core|128_0>d")]
[CompilerGeneratedAttribute]
[AsyncMethodBuilderAttribute("System.Runtime.CompilerServices.PoolingAsyncValueTaskMethodBuilder`1")]
private ValueTask`1<int> <SeekToColumnSequential>g__Core|128_0(bool async, bool reread, bool commit, int ordinal, DataFormat dataFormat, bool resumableOp);
    [CompilerGeneratedAttribute]
private bool <SeekToColumnSequential>g__TrySeekBuffered|128_1(int ordinal, Int32& columnLength);
    [AsyncStateMachineAttribute("Npgsql.NpgsqlDataReader/<<ConsumeRow>g__ConsumeRowSequential|129_0>d")]
[CompilerGeneratedAttribute]
private Task <ConsumeRow>g__ConsumeRowSequential|129_0(bool async);
    [CompilerGeneratedAttribute]
private DataFormat <GetInfo>g__Slow|133_0(ColumnInfo& info, PgConverter& converter, Size& bufferRequirement, Boolean& asObject, <>c__DisplayClass133_0& );
    [CompilerGeneratedAttribute]
internal static void <CheckClosedOrDisposed>g__Throw|138_0(ReaderState state);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public abstract class Npgsql.NpgsqlDataSource : DbDataSource {
    [CompilerGeneratedAttribute]
private string <ConnectionString>k__BackingField;
    [CompilerGeneratedAttribute]
private NpgsqlConnectionStringBuilder <Settings>k__BackingField;
    [CompilerGeneratedAttribute]
private NpgsqlDataSourceConfiguration <Configuration>k__BackingField;
    [CompilerGeneratedAttribute]
private NpgsqlLoggingConfiguration <LoggingConfiguration>k__BackingField;
    private PgTypeInfoResolverChain _resolverChain;
    [CompilerGeneratedAttribute]
private PgSerializerOptions <SerializerOptions>k__BackingField;
    [CompilerGeneratedAttribute]
private NpgsqlDatabaseInfo <DatabaseInfo>k__BackingField;
    [CompilerGeneratedAttribute]
private TransportSecurityHandler <TransportSecurityHandler>k__BackingField;
    [NullableAttribute("2")]
[CompilerGeneratedAttribute]
private RemoteCertificateValidationCallback <UserCertificateValidationCallback>k__BackingField;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[CompilerGeneratedAttribute]
private Action`1<X509CertificateCollection> <ClientCertificatesCallback>k__BackingField;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private Func`2<NpgsqlConnectionStringBuilder, string> _passwordProvider;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private Func`3<NpgsqlConnectionStringBuilder, CancellationToken, ValueTask`1<string>> _passwordProviderAsync;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private Func`3<NpgsqlConnectionStringBuilder, CancellationToken, ValueTask`1<string>> _periodicPasswordProvider;
    private TimeSpan _periodicPasswordSuccessRefreshInterval;
    private TimeSpan _periodicPasswordFailureRefreshInterval;
    [CompilerGeneratedAttribute]
private IntegratedSecurityHandler <IntegratedSecurityHandler>k__BackingField;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[CompilerGeneratedAttribute]
private Action`1<NpgsqlConnection> <ConnectionInitializer>k__BackingField;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[CompilerGeneratedAttribute]
private Func`2<NpgsqlConnection, Task> <ConnectionInitializerAsync>k__BackingField;
    [NullableAttribute("2")]
private Timer _periodicPasswordProviderTimer;
    [NullableAttribute("2")]
private CancellationTokenSource _timerPasswordProviderCancellationTokenSource;
    private Task _passwordRefreshTask;
    [NullableAttribute("2")]
private string _password;
    [CompilerGeneratedAttribute]
private bool <IsBootstrapped>k__BackingField;
    private DatabaseStateInfo modreq(System.Runtime.CompilerServices.IsVolatile) _databaseStateInfo;
    private protected Dictionary`2<Transaction, List`1<NpgsqlConnector>> _pendingEnlistedConnectors;
    [CompilerGeneratedAttribute]
private MetricsReporter <MetricsReporter>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    private Int32 modreq(System.Runtime.CompilerServices.IsVolatile) _isDisposed;
    private ILogger _connectionLogger;
    private SemaphoreSlim _setupMappingsSemaphore;
    private INpgsqlNameTranslator _defaultNameTranslator;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
internal List`1<HackyEnumTypeMapping> _hackyEnumTypeMappings;
    public string ConnectionString { get; }
    internal NpgsqlConnectionStringBuilder Settings { get; }
    internal NpgsqlDataSourceConfiguration Configuration { get; }
    internal NpgsqlLoggingConfiguration LoggingConfiguration { get; }
    internal PgSerializerOptions SerializerOptions { get; private set; }
    internal NpgsqlDatabaseInfo DatabaseInfo { get; private set; }
    internal TransportSecurityHandler TransportSecurityHandler { get; }
    [NullableAttribute("2")]
internal RemoteCertificateValidationCallback UserCertificateValidationCallback { get; }
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
internal Action`1<X509CertificateCollection> ClientCertificatesCallback { get; }
    internal IntegratedSecurityHandler IntegratedSecurityHandler { get; }
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
internal Action`1<NpgsqlConnection> ConnectionInitializer { get; }
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
internal Func`2<NpgsqlConnection, Task> ConnectionInitializerAsync { get; }
    internal bool IsBootstrapped { get; private set; }
    internal MetricsReporter MetricsReporter { get; }
    internal string Name { get; }
    [TupleElementNamesAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[NullableAttribute("0")]
internal ValueTuple`3<int, int, int> Statistics { get; }
    unknown string Password {public set; }
    internal bool OwnsConnectors { get; }
    internal NpgsqlDataSource(NpgsqlConnectionStringBuilder settings, NpgsqlDataSourceConfiguration dataSourceConfig);
    [CompilerGeneratedAttribute]
public virtual string get_ConnectionString();
    [CompilerGeneratedAttribute]
internal NpgsqlConnectionStringBuilder get_Settings();
    [CompilerGeneratedAttribute]
internal NpgsqlDataSourceConfiguration get_Configuration();
    [CompilerGeneratedAttribute]
internal NpgsqlLoggingConfiguration get_LoggingConfiguration();
    [CompilerGeneratedAttribute]
internal PgSerializerOptions get_SerializerOptions();
    [CompilerGeneratedAttribute]
private void set_SerializerOptions(PgSerializerOptions value);
    [CompilerGeneratedAttribute]
internal NpgsqlDatabaseInfo get_DatabaseInfo();
    [CompilerGeneratedAttribute]
private void set_DatabaseInfo(NpgsqlDatabaseInfo value);
    [CompilerGeneratedAttribute]
internal TransportSecurityHandler get_TransportSecurityHandler();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
internal RemoteCertificateValidationCallback get_UserCertificateValidationCallback();
    [CompilerGeneratedAttribute]
internal Action`1<X509CertificateCollection> get_ClientCertificatesCallback();
    [CompilerGeneratedAttribute]
internal IntegratedSecurityHandler get_IntegratedSecurityHandler();
    [CompilerGeneratedAttribute]
internal Action`1<NpgsqlConnection> get_ConnectionInitializer();
    [CompilerGeneratedAttribute]
internal Func`2<NpgsqlConnection, Task> get_ConnectionInitializerAsync();
    [CompilerGeneratedAttribute]
internal bool get_IsBootstrapped();
    [CompilerGeneratedAttribute]
private void set_IsBootstrapped(bool value);
    [CompilerGeneratedAttribute]
internal MetricsReporter get_MetricsReporter();
    [CompilerGeneratedAttribute]
internal string get_Name();
    [NullableContextAttribute("0")]
internal abstract virtual ValueTuple`3<int, int, int> get_Statistics();
    public NpgsqlConnection CreateConnection();
    public NpgsqlConnection OpenConnection();
    protected virtual DbConnection OpenDbConnection();
    [AsyncStateMachineAttribute("Npgsql.NpgsqlDataSource/<OpenConnectionAsync>d__71")]
public ValueTask`1<NpgsqlConnection> OpenConnectionAsync(CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Npgsql.NpgsqlDataSource/<OpenDbConnectionAsync>d__72")]
protected virtual ValueTask`1<DbConnection> OpenDbConnectionAsync(CancellationToken cancellationToken);
    protected virtual DbConnection CreateDbConnection();
    protected virtual DbCommand CreateDbCommand(string commandText);
    protected virtual DbBatch CreateDbBatch();
    public NpgsqlCommand CreateCommand(string commandText);
    public NpgsqlBatch CreateBatch();
    public static NpgsqlDataSource Create(string connectionString);
    public static NpgsqlDataSource Create(NpgsqlConnectionStringBuilder connectionStringBuilder);
    [AsyncStateMachineAttribute("Npgsql.NpgsqlDataSource/<Bootstrap>d__80")]
internal Task Bootstrap(NpgsqlConnector connector, NpgsqlTimeout timeout, bool forceReload, bool async, CancellationToken cancellationToken);
    public void set_Password(string value);
    internal ValueTask`1<string> GetPassword(bool async, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Npgsql.NpgsqlDataSource/<RefreshPassword>d__84")]
private Task RefreshPassword();
    internal abstract virtual ValueTask`1<NpgsqlConnector> Get(NpgsqlConnection conn, NpgsqlTimeout timeout, bool async, CancellationToken cancellationToken);
    [NullableContextAttribute("2")]
internal abstract virtual bool TryGetIdleConnector(NpgsqlConnector& connector);
    internal abstract virtual ValueTask`1<NpgsqlConnector> OpenNewConnector(NpgsqlConnection conn, NpgsqlTimeout timeout, bool async, CancellationToken cancellationToken);
    internal abstract virtual void Return(NpgsqlConnector connector);
    internal abstract virtual void Clear();
    internal abstract virtual bool get_OwnsConnectors();
    internal DatabaseState GetDatabaseState(bool ignoreExpiration);
    internal DatabaseState UpdateDatabaseState(DatabaseState newState, DateTime timeStamp, TimeSpan stateExpiration, bool ignoreTimeStamp);
    internal virtual void AddPendingEnlistedConnector(NpgsqlConnector connector, Transaction transaction);
    internal virtual bool TryRemovePendingEnlistedConnector(NpgsqlConnector connector, Transaction transaction);
    internal virtual bool TryRentEnlistedPending(Transaction transaction, NpgsqlConnection connection, NpgsqlConnector& connector);
    protected sealed virtual void Dispose(bool disposing);
    protected virtual void DisposeBase();
    protected sealed virtual ValueTask DisposeAsyncCore();
    [AsyncStateMachineAttribute("Npgsql.NpgsqlDataSource/<DisposeAsyncBase>d__100")]
protected virtual ValueTask DisposeAsyncBase();
    private protected void CheckDisposed();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
private void <.ctor>b__67_0(object state);
    [CompilerGeneratedAttribute]
internal static Func`1<string> <Bootstrap>g__CreateTimeZoneProvider|80_0(string postgresTimeZone);
    [AsyncStateMachineAttribute("Npgsql.NpgsqlDataSource/<<GetPassword>g__GetInitialPeriodicPassword|83_0>d")]
[CompilerGeneratedAttribute]
private ValueTask`1<string> <GetPassword>g__GetInitialPeriodicPassword|83_0(bool async);
    [AsyncStateMachineAttribute("Npgsql.NpgsqlDataSource/<<GetPassword>g__GetPassword|83_1>d")]
[CompilerGeneratedAttribute]
private ValueTask`1<string> <GetPassword>g__GetPassword|83_1(bool async, CancellationToken cancellationToken);
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
internal class Npgsql.NpgsqlDataSourceBatch : NpgsqlBatch {
    protected DbConnection DbConnection { get; protected set; }
    protected DbTransaction DbTransaction { get; protected set; }
    [NullableContextAttribute("1")]
internal NpgsqlDataSourceBatch(NpgsqlConnection connection);
    public virtual void Prepare();
    [NullableContextAttribute("1")]
public virtual Task PrepareAsync(CancellationToken cancellationToken);
    protected virtual DbConnection get_DbConnection();
    protected virtual void set_DbConnection(DbConnection value);
    protected virtual DbTransaction get_DbTransaction();
    protected virtual void set_DbTransaction(DbTransaction value);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Npgsql.NpgsqlDataSourceBuilder : object {
    [CompilerGeneratedAttribute]
private static UnsupportedTypeInfoResolver`1<NpgsqlDataSourceBuilder> <UnsupportedTypeInfoResolver>k__BackingField;
    private NpgsqlSlimDataSourceBuilder _internalBuilder;
    private static UnsupportedTypeInfoResolver`1<NpgsqlDataSourceBuilder> UnsupportedTypeInfoResolver { get; }
    [NullableAttribute("2")]
public string Name { get; public set; }
    public INpgsqlNameTranslator DefaultNameTranslator { get; public set; }
    public NpgsqlConnectionStringBuilder ConnectionStringBuilder { get; }
    public string ConnectionString { get; }
    private static NpgsqlDataSourceBuilder();
    [NullableContextAttribute("2")]
public NpgsqlDataSourceBuilder(string connectionString);
    [CompilerGeneratedAttribute]
private static UnsupportedTypeInfoResolver`1<NpgsqlDataSourceBuilder> get_UnsupportedTypeInfoResolver();
    [NullableContextAttribute("2")]
public string get_Name();
    [NullableContextAttribute("2")]
public void set_Name(string value);
    public sealed virtual INpgsqlNameTranslator get_DefaultNameTranslator();
    public sealed virtual void set_DefaultNameTranslator(INpgsqlNameTranslator value);
    public NpgsqlConnectionStringBuilder get_ConnectionStringBuilder();
    public string get_ConnectionString();
    internal static void ResetGlobalMappings(bool overwrite);
    public NpgsqlDataSourceBuilder UseLoggerFactory(ILoggerFactory loggerFactory);
    public NpgsqlDataSourceBuilder EnableParameterLogging(bool parameterLoggingEnabled);
    public NpgsqlDataSourceBuilder ConfigureJsonOptions(JsonSerializerOptions serializerOptions);
    [RequiresUnreferencedCodeAttribute("Json serializer may perform reflection on trimmed types.")]
[RequiresDynamicCodeAttribute("Serializing arbitrary types to json can require creating new generic types or methods, which requires creating code at runtime. This may not work when AOT compiling.")]
public NpgsqlDataSourceBuilder EnableDynamicJson(Type[] jsonbClrTypes, Type[] jsonClrTypes);
    [RequiresUnreferencedCodeAttribute("The mapping of PostgreSQL records as .NET tuples requires reflection usage which is incompatible with trimming.")]
[RequiresDynamicCodeAttribute("The mapping of PostgreSQL records as .NET tuples requires dynamic code usage which is incompatible with NativeAOT.")]
public NpgsqlDataSourceBuilder EnableRecordsAsTuples();
    [RequiresUnreferencedCodeAttribute("The use of unmapped enums, ranges or multiranges requires reflection usage which is incompatible with trimming.")]
[RequiresDynamicCodeAttribute("The use of unmapped enums, ranges or multiranges requires dynamic code usage which is incompatible with NativeAOT.")]
public NpgsqlDataSourceBuilder EnableUnmappedTypes();
    public NpgsqlDataSourceBuilder UseUserCertificateValidationCallback(RemoteCertificateValidationCallback userCertificateValidationCallback);
    public NpgsqlDataSourceBuilder UseClientCertificate(X509Certificate clientCertificate);
    public NpgsqlDataSourceBuilder UseClientCertificates(X509CertificateCollection clientCertificates);
    public NpgsqlDataSourceBuilder UseClientCertificatesCallback(Action`1<X509CertificateCollection> clientCertificatesCallback);
    public NpgsqlDataSourceBuilder UseRootCertificate(X509Certificate2 rootCertificate);
    public NpgsqlDataSourceBuilder UseRootCertificateCallback(Func`1<X509Certificate2> rootCertificateCallback);
    public NpgsqlDataSourceBuilder UsePeriodicPasswordProvider(Func`3<NpgsqlConnectionStringBuilder, CancellationToken, ValueTask`1<string>> passwordProvider, TimeSpan successRefreshInterval, TimeSpan failureRefreshInterval);
    public NpgsqlDataSourceBuilder UsePasswordProvider(Func`2<NpgsqlConnectionStringBuilder, string> passwordProvider, Func`3<NpgsqlConnectionStringBuilder, CancellationToken, ValueTask`1<string>> passwordProviderAsync);
    public sealed virtual void AddTypeInfoResolverFactory(PgTypeInfoResolverFactory factory);
    private sealed virtual override void Npgsql.TypeMapping.INpgsqlTypeMapper.Reset();
    public sealed virtual INpgsqlTypeMapper MapEnum(string pgName, INpgsqlNameTranslator nameTranslator);
    [NullableContextAttribute("2")]
public sealed virtual bool UnmapEnum(string pgName, INpgsqlNameTranslator nameTranslator);
    [RequiresDynamicCodeAttribute("Calling MapEnum with a Type can require creating new generic types or methods. This may not work when AOT compiling.")]
public sealed virtual INpgsqlTypeMapper MapEnum(Type clrType, string pgName, INpgsqlNameTranslator nameTranslator);
    [NullableContextAttribute("2")]
public sealed virtual bool UnmapEnum(Type clrType, string pgName, INpgsqlNameTranslator nameTranslator);
    [NullableContextAttribute("2")]
[RequiresDynamicCodeAttribute("Mapping composite types involves serializing arbitrary types which can require creating new generic types or methods. This is currently unsupported with NativeAOT, vote on issue #5303 if this is important to you.")]
public sealed virtual INpgsqlTypeMapper MapComposite(string pgName, INpgsqlNameTranslator nameTranslator);
    [RequiresDynamicCodeAttribute("Mapping composite types involves serializing arbitrary types which can require creating new generic types or methods. This is currently unsupported with NativeAOT, vote on issue #5303 if this is important to you.")]
public sealed virtual INpgsqlTypeMapper MapComposite(Type clrType, string pgName, INpgsqlNameTranslator nameTranslator);
    [NullableContextAttribute("2")]
[RequiresDynamicCodeAttribute("Mapping composite types involves serializing arbitrary types which can require creating new generic types or methods. This is currently unsupported with NativeAOT, vote on issue #5303 if this is important to you.")]
public sealed virtual bool UnmapComposite(string pgName, INpgsqlNameTranslator nameTranslator);
    [NullableContextAttribute("2")]
[RequiresDynamicCodeAttribute("Mapping composite types involves serializing arbitrary types which can require creating new generic types or methods. This is currently unsupported with NativeAOT, vote on issue #5303 if this is important to you.")]
public sealed virtual bool UnmapComposite(Type clrType, string pgName, INpgsqlNameTranslator nameTranslator);
    public NpgsqlDataSourceBuilder UsePhysicalConnectionInitializer(Action`1<NpgsqlConnection> connectionInitializer, Func`2<NpgsqlConnection, Task> connectionInitializerAsync);
    public NpgsqlDataSource Build();
    public NpgsqlMultiHostDataSource BuildMultiHost();
    private sealed virtual override INpgsqlTypeMapper Npgsql.TypeMapping.INpgsqlTypeMapper.ConfigureJsonOptions(JsonSerializerOptions serializerOptions);
    [RequiresUnreferencedCodeAttribute("Json serializer may perform reflection on trimmed types.")]
[RequiresDynamicCodeAttribute("Serializing arbitrary types to json can require creating new generic types or methods, which requires creating code at runtime. This may not work when AOT compiling.")]
private sealed virtual override INpgsqlTypeMapper Npgsql.TypeMapping.INpgsqlTypeMapper.EnableDynamicJson(Type[] jsonbClrTypes, Type[] jsonClrTypes);
    [RequiresUnreferencedCodeAttribute("The mapping of PostgreSQL records as .NET tuples requires reflection usage which is incompatible with trimming.")]
[RequiresDynamicCodeAttribute("The mapping of PostgreSQL records as .NET tuples requires dynamic code usage which is incompatible with NativeAOT.")]
private sealed virtual override INpgsqlTypeMapper Npgsql.TypeMapping.INpgsqlTypeMapper.EnableRecordsAsTuples();
    [RequiresUnreferencedCodeAttribute("The use of unmapped enums, ranges or multiranges requires reflection usage which is incompatible with trimming.")]
[RequiresDynamicCodeAttribute("The use of unmapped enums, ranges or multiranges requires dynamic code usage which is incompatible with NativeAOT.")]
private sealed virtual override INpgsqlTypeMapper Npgsql.TypeMapping.INpgsqlTypeMapper.EnableUnmappedTypes();
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
internal class Npgsql.NpgsqlDataSourceCommand : NpgsqlCommand {
    protected DbConnection DbConnection { get; protected set; }
    protected DbTransaction DbTransaction { get; protected set; }
    [NullableContextAttribute("1")]
internal NpgsqlDataSourceCommand(NpgsqlConnection connection);
    [NullableContextAttribute("1")]
internal NpgsqlDataSourceCommand(int batchCommandCapacity, NpgsqlConnection connection);
    [AsyncStateMachineAttribute("Npgsql.NpgsqlDataSourceCommand/<ExecuteReader>d__2")]
internal virtual ValueTask`1<NpgsqlDataReader> ExecuteReader(bool async, CommandBehavior behavior, CancellationToken cancellationToken);
    public virtual void Prepare();
    [NullableContextAttribute("1")]
public virtual Task PrepareAsync(CancellationToken cancellationToken);
    protected virtual DbConnection get_DbConnection();
    protected virtual void set_DbConnection(DbConnection value);
    protected virtual DbTransaction get_DbTransaction();
    protected virtual void set_DbTransaction(DbTransaction value);
    [CompilerGeneratedAttribute]
[DebuggerHiddenAttribute]
private ValueTask`1<NpgsqlDataReader> <>n__0(bool async, CommandBehavior behavior, CancellationToken cancellationToken);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Npgsql.NpgsqlDataSourceConfiguration : object {
    [NullableAttribute("2")]
[CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    [CompilerGeneratedAttribute]
private NpgsqlLoggingConfiguration <LoggingConfiguration>k__BackingField;
    [CompilerGeneratedAttribute]
private TransportSecurityHandler <TransportSecurityHandler>k__BackingField;
    [CompilerGeneratedAttribute]
private IntegratedSecurityHandler <userCertificateValidationCallback>k__BackingField;
    [NullableAttribute("2")]
[CompilerGeneratedAttribute]
private RemoteCertificateValidationCallback <UserCertificateValidationCallback>k__BackingField;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[CompilerGeneratedAttribute]
private Action`1<X509CertificateCollection> <ClientCertificatesCallback>k__BackingField;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[CompilerGeneratedAttribute]
private Func`2<NpgsqlConnectionStringBuilder, string> <PasswordProvider>k__BackingField;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[CompilerGeneratedAttribute]
private Func`3<NpgsqlConnectionStringBuilder, CancellationToken, ValueTask`1<string>> <PasswordProviderAsync>k__BackingField;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[CompilerGeneratedAttribute]
private Func`3<NpgsqlConnectionStringBuilder, CancellationToken, ValueTask`1<string>> <PeriodicPasswordProvider>k__BackingField;
    [CompilerGeneratedAttribute]
private TimeSpan <PeriodicPasswordSuccessRefreshInterval>k__BackingField;
    [CompilerGeneratedAttribute]
private TimeSpan <PeriodicPasswordFailureRefreshInterval>k__BackingField;
    [CompilerGeneratedAttribute]
private PgTypeInfoResolverChain <ResolverChain>k__BackingField;
    [CompilerGeneratedAttribute]
private List`1<HackyEnumTypeMapping> <HackyEnumMappings>k__BackingField;
    [CompilerGeneratedAttribute]
private INpgsqlNameTranslator <DefaultNameTranslator>k__BackingField;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[CompilerGeneratedAttribute]
private Action`1<NpgsqlConnection> <ConnectionInitializer>k__BackingField;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[CompilerGeneratedAttribute]
private Func`2<NpgsqlConnection, Task> <ConnectionInitializerAsync>k__BackingField;
    [CompilerGeneratedAttribute]
private Type EqualityContract { get; }
    [NullableAttribute("2")]
public string Name { get; public set; }
    public NpgsqlLoggingConfiguration LoggingConfiguration { get; public set; }
    public TransportSecurityHandler TransportSecurityHandler { get; public set; }
    public IntegratedSecurityHandler userCertificateValidationCallback { get; public set; }
    [NullableAttribute("2")]
public RemoteCertificateValidationCallback UserCertificateValidationCallback { get; public set; }
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public Action`1<X509CertificateCollection> ClientCertificatesCallback { get; public set; }
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public Func`2<NpgsqlConnectionStringBuilder, string> PasswordProvider { get; public set; }
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public Func`3<NpgsqlConnectionStringBuilder, CancellationToken, ValueTask`1<string>> PasswordProviderAsync { get; public set; }
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public Func`3<NpgsqlConnectionStringBuilder, CancellationToken, ValueTask`1<string>> PeriodicPasswordProvider { get; public set; }
    public TimeSpan PeriodicPasswordSuccessRefreshInterval { get; public set; }
    public TimeSpan PeriodicPasswordFailureRefreshInterval { get; public set; }
    public PgTypeInfoResolverChain ResolverChain { get; public set; }
    public List`1<HackyEnumTypeMapping> HackyEnumMappings { get; public set; }
    public INpgsqlNameTranslator DefaultNameTranslator { get; public set; }
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public Action`1<NpgsqlConnection> ConnectionInitializer { get; public set; }
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public Func`2<NpgsqlConnection, Task> ConnectionInitializerAsync { get; public set; }
    public NpgsqlDataSourceConfiguration(string Name, NpgsqlLoggingConfiguration LoggingConfiguration, TransportSecurityHandler TransportSecurityHandler, IntegratedSecurityHandler userCertificateValidationCallback, RemoteCertificateValidationCallback UserCertificateValidationCallback, Action`1<X509CertificateCollection> ClientCertificatesCallback, Func`2<NpgsqlConnectionStringBuilder, string> PasswordProvider, Func`3<NpgsqlConnectionStringBuilder, CancellationToken, ValueTask`1<string>> PasswordProviderAsync, Func`3<NpgsqlConnectionStringBuilder, CancellationToken, ValueTask`1<string>> PeriodicPasswordProvider, TimeSpan PeriodicPasswordSuccessRefreshInterval, TimeSpan PeriodicPasswordFailureRefreshInterval, PgTypeInfoResolverChain ResolverChain, List`1<HackyEnumTypeMapping> HackyEnumMappings, INpgsqlNameTranslator DefaultNameTranslator, Action`1<NpgsqlConnection> ConnectionInitializer, Func`2<NpgsqlConnection, Task> ConnectionInitializerAsync);
    [CompilerGeneratedAttribute]
private NpgsqlDataSourceConfiguration(NpgsqlDataSourceConfiguration original);
    [CompilerGeneratedAttribute]
private Type get_EqualityContract();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public string get_Name();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public Void modreq(System.Runtime.CompilerServices.IsExternalInit) set_Name(string value);
    [CompilerGeneratedAttribute]
public NpgsqlLoggingConfiguration get_LoggingConfiguration();
    [CompilerGeneratedAttribute]
public Void modreq(System.Runtime.CompilerServices.IsExternalInit) set_LoggingConfiguration(NpgsqlLoggingConfiguration value);
    [CompilerGeneratedAttribute]
public TransportSecurityHandler get_TransportSecurityHandler();
    [CompilerGeneratedAttribute]
public Void modreq(System.Runtime.CompilerServices.IsExternalInit) set_TransportSecurityHandler(TransportSecurityHandler value);
    [CompilerGeneratedAttribute]
public IntegratedSecurityHandler get_userCertificateValidationCallback();
    [CompilerGeneratedAttribute]
public Void modreq(System.Runtime.CompilerServices.IsExternalInit) set_userCertificateValidationCallback(IntegratedSecurityHandler value);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public RemoteCertificateValidationCallback get_UserCertificateValidationCallback();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public Void modreq(System.Runtime.CompilerServices.IsExternalInit) set_UserCertificateValidationCallback(RemoteCertificateValidationCallback value);
    [CompilerGeneratedAttribute]
public Action`1<X509CertificateCollection> get_ClientCertificatesCallback();
    [CompilerGeneratedAttribute]
public Void modreq(System.Runtime.CompilerServices.IsExternalInit) set_ClientCertificatesCallback(Action`1<X509CertificateCollection> value);
    [CompilerGeneratedAttribute]
public Func`2<NpgsqlConnectionStringBuilder, string> get_PasswordProvider();
    [CompilerGeneratedAttribute]
public Void modreq(System.Runtime.CompilerServices.IsExternalInit) set_PasswordProvider(Func`2<NpgsqlConnectionStringBuilder, string> value);
    [CompilerGeneratedAttribute]
public Func`3<NpgsqlConnectionStringBuilder, CancellationToken, ValueTask`1<string>> get_PasswordProviderAsync();
    [CompilerGeneratedAttribute]
public Void modreq(System.Runtime.CompilerServices.IsExternalInit) set_PasswordProviderAsync(Func`3<NpgsqlConnectionStringBuilder, CancellationToken, ValueTask`1<string>> value);
    [CompilerGeneratedAttribute]
public Func`3<NpgsqlConnectionStringBuilder, CancellationToken, ValueTask`1<string>> get_PeriodicPasswordProvider();
    [CompilerGeneratedAttribute]
public Void modreq(System.Runtime.CompilerServices.IsExternalInit) set_PeriodicPasswordProvider(Func`3<NpgsqlConnectionStringBuilder, CancellationToken, ValueTask`1<string>> value);
    [CompilerGeneratedAttribute]
public TimeSpan get_PeriodicPasswordSuccessRefreshInterval();
    [CompilerGeneratedAttribute]
public Void modreq(System.Runtime.CompilerServices.IsExternalInit) set_PeriodicPasswordSuccessRefreshInterval(TimeSpan value);
    [CompilerGeneratedAttribute]
public TimeSpan get_PeriodicPasswordFailureRefreshInterval();
    [CompilerGeneratedAttribute]
public Void modreq(System.Runtime.CompilerServices.IsExternalInit) set_PeriodicPasswordFailureRefreshInterval(TimeSpan value);
    [CompilerGeneratedAttribute]
public PgTypeInfoResolverChain get_ResolverChain();
    [CompilerGeneratedAttribute]
public Void modreq(System.Runtime.CompilerServices.IsExternalInit) set_ResolverChain(PgTypeInfoResolverChain value);
    [CompilerGeneratedAttribute]
public List`1<HackyEnumTypeMapping> get_HackyEnumMappings();
    [CompilerGeneratedAttribute]
public Void modreq(System.Runtime.CompilerServices.IsExternalInit) set_HackyEnumMappings(List`1<HackyEnumTypeMapping> value);
    [CompilerGeneratedAttribute]
public INpgsqlNameTranslator get_DefaultNameTranslator();
    [CompilerGeneratedAttribute]
public Void modreq(System.Runtime.CompilerServices.IsExternalInit) set_DefaultNameTranslator(INpgsqlNameTranslator value);
    [CompilerGeneratedAttribute]
public Action`1<NpgsqlConnection> get_ConnectionInitializer();
    [CompilerGeneratedAttribute]
public Void modreq(System.Runtime.CompilerServices.IsExternalInit) set_ConnectionInitializer(Action`1<NpgsqlConnection> value);
    [CompilerGeneratedAttribute]
public Func`2<NpgsqlConnection, Task> get_ConnectionInitializerAsync();
    [CompilerGeneratedAttribute]
public Void modreq(System.Runtime.CompilerServices.IsExternalInit) set_ConnectionInitializerAsync(Func`2<NpgsqlConnection, Task> value);
    [CompilerGeneratedAttribute]
public virtual string ToString();
    [CompilerGeneratedAttribute]
private bool PrintMembers(StringBuilder builder);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public static bool op_Inequality(NpgsqlDataSourceConfiguration left, NpgsqlDataSourceConfiguration right);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public static bool op_Equality(NpgsqlDataSourceConfiguration left, NpgsqlDataSourceConfiguration right);
    [CompilerGeneratedAttribute]
public virtual int GetHashCode();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public virtual bool Equals(object obj);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public sealed virtual bool Equals(NpgsqlDataSourceConfiguration other);
    [CompilerGeneratedAttribute]
public NpgsqlDataSourceConfiguration <Clone>$();
    [CompilerGeneratedAttribute]
public void Deconstruct(String& Name, NpgsqlLoggingConfiguration& LoggingConfiguration, TransportSecurityHandler& TransportSecurityHandler, IntegratedSecurityHandler& userCertificateValidationCallback, RemoteCertificateValidationCallback& UserCertificateValidationCallback, Action`1& ClientCertificatesCallback, Func`2& PasswordProvider, Func`3& PasswordProviderAsync, Func`3& PeriodicPasswordProvider, TimeSpan& PeriodicPasswordSuccessRefreshInterval, TimeSpan& PeriodicPasswordFailureRefreshInterval, PgTypeInfoResolverChain& ResolverChain, List`1& HackyEnumMappings, INpgsqlNameTranslator& DefaultNameTranslator, Action`1& ConnectionInitializer, Func`2& ConnectionInitializerAsync);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal static class Npgsql.NpgsqlDiagnostics : object {
    public static string ConvertersExperimental;
    public static string DatabaseInfoExperimental;
}
public static class Npgsql.NpgsqlEventId : object {
    public static int OpeningConnection;
    public static int OpenedConnection;
    public static int ClosingConnection;
    public static int ClosedConnection;
    public static int OpeningPhysicalConnection;
    public static int OpenedPhysicalConnection;
    public static int ClosingPhysicalConnection;
    public static int ClosedPhysicalConnection;
    public static int StartingWait;
    public static int ReceivedNotice;
    public static int ConnectionExceededMaximumLifetime;
    public static int SendingKeepalive;
    public static int CompletedKeepalive;
    public static int KeepaliveFailed;
    public static int BreakingConnection;
    public static int CaughtUserExceptionInNoticeEventHandler;
    public static int CaughtUserExceptionInNotificationEventHandler;
    public static int ExceptionWhenClosingPhysicalConnection;
    public static int ExceptionWhenOpeningConnectionForMultiplexing;
    public static int ExecutingCommand;
    public static int CommandExecutionCompleted;
    public static int CancellingCommand;
    public static int ExecutingInternalCommand;
    public static int PreparingCommandExplicitly;
    public static int CommandPreparedExplicitly;
    public static int AutoPreparingStatement;
    public static int UnpreparingCommand;
    public static int DerivingParameters;
    public static int ExceptionWhenWritingMultiplexedCommands;
    public static int StartedTransaction;
    public static int CommittedTransaction;
    public static int RolledBackTransaction;
    public static int CreatingSavepoint;
    public static int RolledBackToSavepoint;
    public static int ReleasedSavepoint;
    public static int ExceptionDuringTransactionDispose;
    public static int EnlistedVolatileResourceManager;
    public static int CommittingSinglePhaseTransaction;
    public static int RollingBackSinglePhaseTransaction;
    public static int SinglePhaseTransactionRollbackFailed;
    public static int PreparingTwoPhaseTransaction;
    public static int CommittingTwoPhaseTransaction;
    public static int TwoPhaseTransactionCommitFailed;
    public static int RollingBackTwoPhaseTransaction;
    public static int TwoPhaseTransactionRollbackFailed;
    public static int TwoPhaseTransactionInDoubt;
    public static int ConnectionInUseWhenRollingBack;
    public static int CleaningUpResourceManager;
    public static int StartingBinaryExport;
    public static int StartingBinaryImport;
    public static int StartingTextExport;
    public static int StartingTextImport;
    public static int StartingRawCopy;
    public static int CopyOperationCompleted;
    public static int CopyOperationCancelled;
    public static int ExceptionWhenDisposingCopyOperation;
    public static int CreatingReplicationSlot;
    public static int DroppingReplicationSlot;
    public static int StartingLogicalReplication;
    public static int StartingPhysicalReplication;
    public static int ExecutingReplicationCommand;
    public static int ReceivedReplicationPrimaryKeepalive;
    public static int SendingReplicationStandbyStatusUpdate;
    public static int SentReplicationFeedbackMessage;
    public static int ReplicationFeedbackMessageSendingFailed;
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
internal class Npgsql.NpgsqlEventSource : EventSource {
    [NullableAttribute("1")]
public static NpgsqlEventSource Log;
    [NullableAttribute("1")]
private static string EventSourceName;
    internal static int CommandStartId;
    internal static int CommandStopId;
    private IncrementingPollingCounter _bytesWrittenPerSecondCounter;
    private IncrementingPollingCounter _bytesReadPerSecondCounter;
    private IncrementingPollingCounter _commandsPerSecondCounter;
    private PollingCounter _totalCommandsCounter;
    private PollingCounter _failedCommandsCounter;
    private PollingCounter _currentCommandsCounter;
    private PollingCounter _preparedCommandsRatioCounter;
    private PollingCounter _poolsCounter;
    [NullableAttribute("1")]
private object _dataSourcesLock;
    [TupleElementNamesAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private Dictionary`2<NpgsqlDataSource, Nullable`1<ValueTuple`2<PollingCounter, PollingCounter>>> _dataSources;
    private PollingCounter _multiplexingAverageCommandsPerBatchCounter;
    private PollingCounter _multiplexingAverageWriteTimePerBatchCounter;
    private long _bytesWritten;
    private long _bytesRead;
    private long _totalCommands;
    private long _totalPreparedCommands;
    private long _currentCommands;
    private long _failedCommands;
    private long _multiplexingBatchesSent;
    private long _multiplexingCommandsSent;
    private long _multiplexingTicksWritten;
    private static NpgsqlEventSource();
    internal void BytesWritten(long bytesWritten);
    internal void BytesRead(long bytesRead);
    [NullableContextAttribute("1")]
public void CommandStart(string sql);
    public void CommandStop();
    internal void CommandStartPrepared();
    internal void CommandFailed();
    [NullableContextAttribute("1")]
internal void DataSourceCreated(NpgsqlDataSource dataSource);
    [NullableContextAttribute("1")]
internal void MultiplexingBatchSent(int numCommands, Stopwatch stopwatch);
    private double GetDataSourceCount();
    private double GetMultiplexingAverageCommandsPerBatch();
    private double GetMultiplexingAverageWriteTimePerBatch();
    [NullableContextAttribute("1")]
protected virtual void OnEventCommand(EventCommandEventArgs command);
    [CompilerGeneratedAttribute]
private double <OnEventCommand>b__37_0();
    [CompilerGeneratedAttribute]
private double <OnEventCommand>b__37_1();
    [CompilerGeneratedAttribute]
private double <OnEventCommand>b__37_2();
    [CompilerGeneratedAttribute]
private double <OnEventCommand>b__37_3();
    [CompilerGeneratedAttribute]
private double <OnEventCommand>b__37_4();
    [CompilerGeneratedAttribute]
private double <OnEventCommand>b__37_5();
    [CompilerGeneratedAttribute]
private double <OnEventCommand>b__37_6();
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
public class Npgsql.NpgsqlException : DbException {
    [CompilerGeneratedAttribute]
private NpgsqlBatchCommand <BatchCommand>k__BackingField;
    public bool IsTransient { get; }
    public NpgsqlBatchCommand BatchCommand { get; public set; }
    protected DbBatchCommand DbBatchCommand { get; }
    public NpgsqlException(string message, Exception innerException);
    public NpgsqlException(string message);
    [NullableContextAttribute("1")]
[ObsoleteAttribute("This API supports obsolete formatter-based serialization. It should not be called or extended by application code.")]
protected internal NpgsqlException(SerializationInfo info, StreamingContext context);
    public virtual bool get_IsTransient();
    [CompilerGeneratedAttribute]
public NpgsqlBatchCommand get_BatchCommand();
    [CompilerGeneratedAttribute]
public void set_BatchCommand(NpgsqlBatchCommand value);
    protected virtual DbBatchCommand get_DbBatchCommand();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Npgsql.NpgsqlFactory : DbProviderFactory {
    public static NpgsqlFactory Instance;
    public bool CanCreateDataAdapter { get; }
    public bool CanCreateCommandBuilder { get; }
    public bool CanCreateBatch { get; }
    private static NpgsqlFactory();
    public virtual DbCommand CreateCommand();
    public virtual DbConnection CreateConnection();
    public virtual DbParameter CreateParameter();
    public virtual DbConnectionStringBuilder CreateConnectionStringBuilder();
    public virtual DbCommandBuilder CreateCommandBuilder();
    public virtual DbDataAdapter CreateDataAdapter();
    public virtual bool get_CanCreateDataAdapter();
    public virtual bool get_CanCreateCommandBuilder();
    public virtual bool get_CanCreateBatch();
    public virtual DbBatch CreateBatch();
    public virtual DbBatchCommand CreateBatchCommand();
    public virtual DbDataSource CreateDataSource(string connectionString);
    public sealed virtual object GetService(Type serviceType);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ObsoleteAttribute("NpgsqlLargeObjectManager allows manipulating PostgreSQL large objects via publicly available PostgreSQL functions (lo_read, lo_write); call these yourself directly.")]
public class Npgsql.NpgsqlLargeObjectManager : object {
    private static int InvWrite;
    private static int InvRead;
    [CompilerGeneratedAttribute]
private NpgsqlConnection <Connection>k__BackingField;
    [CompilerGeneratedAttribute]
private int <MaxTransferBlockSize>k__BackingField;
    internal NpgsqlConnection Connection { get; }
    public int MaxTransferBlockSize { get; public set; }
    public bool Has64BitSupport { get; }
    public NpgsqlLargeObjectManager(NpgsqlConnection connection);
    [CompilerGeneratedAttribute]
internal NpgsqlConnection get_Connection();
    [CompilerGeneratedAttribute]
public int get_MaxTransferBlockSize();
    [CompilerGeneratedAttribute]
public void set_MaxTransferBlockSize(int value);
    [AsyncStateMachineAttribute("Npgsql.NpgsqlLargeObjectManager/<ExecuteFunction>d__10`1")]
internal Task`1<T> ExecuteFunction(bool async, string function, CancellationToken cancellationToken, Object[] arguments);
    [AsyncStateMachineAttribute("Npgsql.NpgsqlLargeObjectManager/<ExecuteFunctionGetBytes>d__11")]
internal Task`1<int> ExecuteFunctionGetBytes(bool async, string function, Byte[] buffer, int offset, int len, CancellationToken cancellationToken, Object[] arguments);
    public UInt32 Create(UInt32 preferredOid);
    public Task`1<UInt32> CreateAsync(UInt32 preferredOid, CancellationToken cancellationToken);
    private Task`1<UInt32> Create(UInt32 preferredOid, bool async, CancellationToken cancellationToken);
    public NpgsqlLargeObjectStream OpenRead(UInt32 oid);
    public Task`1<NpgsqlLargeObjectStream> OpenReadAsync(UInt32 oid, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Npgsql.NpgsqlLargeObjectManager/<OpenRead>d__17")]
private Task`1<NpgsqlLargeObjectStream> OpenRead(bool async, UInt32 oid, CancellationToken cancellationToken);
    public NpgsqlLargeObjectStream OpenReadWrite(UInt32 oid);
    public Task`1<NpgsqlLargeObjectStream> OpenReadWriteAsync(UInt32 oid, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Npgsql.NpgsqlLargeObjectManager/<OpenReadWrite>d__20")]
private Task`1<NpgsqlLargeObjectStream> OpenReadWrite(bool async, UInt32 oid, CancellationToken cancellationToken);
    public void Unlink(UInt32 oid);
    public Task UnlinkAsync(UInt32 oid, CancellationToken cancellationToken);
    public void ExportRemote(UInt32 oid, string path);
    public Task ExportRemoteAsync(UInt32 oid, string path, CancellationToken cancellationToken);
    public void ImportRemote(string path, UInt32 oid);
    public Task ImportRemoteAsync(string path, UInt32 oid, CancellationToken cancellationToken);
    public bool get_Has64BitSupport();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ObsoleteAttribute("NpgsqlLargeObjectStream allows manipulating PostgreSQL large objects via publicly available PostgreSQL functions (lo_read, lo_write); call these yourself directly.")]
public class Npgsql.NpgsqlLargeObjectStream : Stream {
    private NpgsqlLargeObjectManager _manager;
    private int _fd;
    private long _pos;
    private bool _writeable;
    private bool _disposed;
    public bool Has64BitSupport { get; }
    public bool CanTimeout { get; }
    public bool CanRead { get; }
    public bool CanWrite { get; }
    public bool CanSeek { get; }
    public long Position { get; public set; }
    public long Length { get; }
    internal NpgsqlLargeObjectStream(NpgsqlLargeObjectManager manager, int fd, bool writeable);
    private void CheckDisposed();
    public bool get_Has64BitSupport();
    public virtual int Read(Byte[] buffer, int offset, int count);
    public virtual Task`1<int> ReadAsync(Byte[] buffer, int offset, int count, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Npgsql.NpgsqlLargeObjectStream/<Read>d__11")]
private Task`1<int> Read(bool async, Byte[] buffer, int offset, int count, CancellationToken cancellationToken);
    public virtual void Write(Byte[] buffer, int offset, int count);
    public virtual Task WriteAsync(Byte[] buffer, int offset, int count, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Npgsql.NpgsqlLargeObjectStream/<Write>d__14")]
private Task Write(bool async, Byte[] buffer, int offset, int count, CancellationToken cancellationToken);
    public virtual bool get_CanTimeout();
    public virtual bool get_CanRead();
    public virtual bool get_CanWrite();
    public virtual bool get_CanSeek();
    public virtual long get_Position();
    public virtual void set_Position(long value);
    public virtual long get_Length();
    public Task`1<long> GetLengthAsync(CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Npgsql.NpgsqlLargeObjectStream/<GetLength>d__29")]
private Task`1<long> GetLength(bool async);
    public virtual long Seek(long offset, SeekOrigin origin);
    public Task`1<long> SeekAsync(long offset, SeekOrigin origin, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Npgsql.NpgsqlLargeObjectStream/<Seek>d__32")]
private Task`1<long> Seek(bool async, long offset, SeekOrigin origin, CancellationToken cancellationToken);
    public virtual void Flush();
    public virtual void SetLength(long value);
    public Task SetLength(long value, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Npgsql.NpgsqlLargeObjectStream/<SetLength>d__36")]
private Task SetLength(bool async, long value, CancellationToken cancellationToken);
    public virtual void Close();
    protected virtual void Dispose(bool disposing);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Npgsql.NpgsqlLoggingConfiguration : object {
    internal static NpgsqlLoggingConfiguration NullConfiguration;
    internal static ILoggerFactory GlobalLoggerFactory;
    internal static bool GlobalIsParameterLoggingEnabled;
    [CompilerGeneratedAttribute]
private ILogger <ConnectionLogger>k__BackingField;
    [CompilerGeneratedAttribute]
private ILogger <CommandLogger>k__BackingField;
    [CompilerGeneratedAttribute]
private ILogger <TransactionLogger>k__BackingField;
    [CompilerGeneratedAttribute]
private ILogger <CopyLogger>k__BackingField;
    [CompilerGeneratedAttribute]
private ILogger <ReplicationLogger>k__BackingField;
    [CompilerGeneratedAttribute]
private ILogger <ExceptionLogger>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsParameterLoggingEnabled>k__BackingField;
    internal ILogger ConnectionLogger { get; }
    internal ILogger CommandLogger { get; }
    internal ILogger TransactionLogger { get; }
    internal ILogger CopyLogger { get; }
    internal ILogger ReplicationLogger { get; }
    internal ILogger ExceptionLogger { get; }
    internal bool IsParameterLoggingEnabled { get; }
    internal NpgsqlLoggingConfiguration(ILoggerFactory loggerFactory, bool isParameterLoggingEnabled);
    private static NpgsqlLoggingConfiguration();
    [CompilerGeneratedAttribute]
internal ILogger get_ConnectionLogger();
    [CompilerGeneratedAttribute]
internal ILogger get_CommandLogger();
    [CompilerGeneratedAttribute]
internal ILogger get_TransactionLogger();
    [CompilerGeneratedAttribute]
internal ILogger get_CopyLogger();
    [CompilerGeneratedAttribute]
internal ILogger get_ReplicationLogger();
    [CompilerGeneratedAttribute]
internal ILogger get_ExceptionLogger();
    [CompilerGeneratedAttribute]
internal bool get_IsParameterLoggingEnabled();
    public static void InitializeLogging(ILoggerFactory loggerFactory, bool parameterLoggingEnabled);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Npgsql.NpgsqlMultiHostDataSource : NpgsqlDataSource {
    private NpgsqlDataSource[] _pools;
    private MultiHostDataSourceWrapper[] _wrappers;
    private Int32 modreq(System.Runtime.CompilerServices.IsVolatile) _roundRobinIndex;
    internal bool OwnsConnectors { get; }
    internal NpgsqlDataSource[] Pools { get; }
    [TupleElementNamesAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[NullableAttribute("0")]
internal ValueTuple`3<int, int, int> Statistics { get; }
    internal NpgsqlMultiHostDataSource(NpgsqlConnectionStringBuilder settings, NpgsqlDataSourceConfiguration dataSourceConfig);
    internal virtual bool get_OwnsConnectors();
    internal NpgsqlDataSource[] get_Pools();
    public NpgsqlConnection CreateConnection(TargetSessionAttributes targetSessionAttributes);
    public NpgsqlConnection OpenConnection(TargetSessionAttributes targetSessionAttributes);
    [AsyncStateMachineAttribute("Npgsql.NpgsqlMultiHostDataSource/<OpenConnectionAsync>d__10")]
public ValueTask`1<NpgsqlConnection> OpenConnectionAsync(TargetSessionAttributes targetSessionAttributes, CancellationToken cancellationToken);
    public NpgsqlDataSource WithTargetSession(TargetSessionAttributes targetSessionAttributes);
    private static bool IsPreferred(DatabaseState state, TargetSessionAttributes preferredType);
    private static bool IsOnline(DatabaseState state, TargetSessionAttributes preferredType);
    [AsyncStateMachineAttribute("Npgsql.NpgsqlMultiHostDataSource/<TryGetIdleOrNew>d__14")]
private ValueTask`1<NpgsqlConnector> TryGetIdleOrNew(NpgsqlConnection conn, TimeSpan timeoutPerHost, bool async, TargetSessionAttributes preferredType, Func`3<DatabaseState, TargetSessionAttributes, bool> stateValidator, int poolIndex, IList`1<Exception> exceptions, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Npgsql.NpgsqlMultiHostDataSource/<TryGet>d__15")]
private ValueTask`1<NpgsqlConnector> TryGet(NpgsqlConnection conn, TimeSpan timeoutPerHost, bool async, TargetSessionAttributes preferredType, Func`3<DatabaseState, TargetSessionAttributes, bool> stateValidator, int poolIndex, IList`1<Exception> exceptions, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Npgsql.NpgsqlMultiHostDataSource/<Get>d__16")]
internal virtual ValueTask`1<NpgsqlConnector> Get(NpgsqlConnection conn, NpgsqlTimeout timeout, bool async, CancellationToken cancellationToken);
    private static NpgsqlException NoSuitableHostsException(IList`1<Exception> exceptions);
    private int GetRoundRobinIndex();
    internal virtual void Return(NpgsqlConnector connector);
    [NullableContextAttribute("2")]
internal virtual bool TryGetIdleConnector(NpgsqlConnector& connector);
    internal virtual ValueTask`1<NpgsqlConnector> OpenNewConnector(NpgsqlConnection conn, NpgsqlTimeout timeout, bool async, CancellationToken cancellationToken);
    internal virtual void Clear();
    public void ClearDatabaseStates();
    [NullableContextAttribute("0")]
internal virtual ValueTuple`3<int, int, int> get_Statistics();
    internal virtual bool TryRentEnlistedPending(Transaction transaction, NpgsqlConnection connection, NpgsqlConnector& connector);
    private static TargetSessionAttributes GetTargetSessionAttributes(NpgsqlConnection connection);
    [CompilerGeneratedAttribute]
internal static bool <NoSuitableHostsException>g__AllEqual|17_0(PostgresException first, IList`1<Exception> exceptions);
    [CompilerGeneratedAttribute]
private bool <TryRentEnlistedPending>g__TryGetValidConnector|26_0(List`1<NpgsqlConnector> list, TargetSessionAttributes preferredType, Func`3<DatabaseState, TargetSessionAttributes, bool> validationFunc, NpgsqlConnector& connector, <>c__DisplayClass26_0& );
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[DefaultMemberAttribute("Item")]
public class Npgsql.NpgsqlNestedDataReader : DbDataReader {
    private NpgsqlDataReader _outermostReader;
    [NullableAttribute("2")]
private NpgsqlNestedDataReader _outerNestedReader;
    [NullableAttribute("2")]
private NpgsqlNestedDataReader _cachedFreeNestedDataReader;
    [NullableAttribute("2")]
private PostgresCompositeType _compositeType;
    private int _depth;
    private int _numRows;
    private int _nextRowIndex;
    private int _nextRowBufferPos;
    private ReaderState _readerState;
    private List`1<ColumnInfo> _columns;
    private long _startPos;
    private DataFormat Format { get; }
    private PgReader PgReader { get; }
    private PgSerializerOptions SerializerOptions { get; }
    public object Item { get; }
    public object Item { get; }
    public int Depth { get; }
    public int FieldCount { get; }
    public bool HasRows { get; }
    public bool IsClosed { get; }
    public int RecordsAffected { get; }
    [NullableContextAttribute("2")]
internal NpgsqlNestedDataReader(NpgsqlDataReader outermostReader, NpgsqlNestedDataReader outerNestedReader, int depth, PostgresCompositeType compositeType);
    private DataFormat get_Format();
    private PgReader get_PgReader();
    private PgSerializerOptions get_SerializerOptions();
    [NullableContextAttribute("2")]
internal void Init(PostgresCompositeType compositeType);
    internal void InitArray();
    internal void InitSingleRow();
    public virtual object get_Item(int ordinal);
    public virtual object get_Item(string name);
    public virtual int get_Depth();
    public virtual int get_FieldCount();
    public virtual bool get_HasRows();
    public virtual bool get_IsClosed();
    public virtual int get_RecordsAffected();
    public virtual bool GetBoolean(int ordinal);
    public virtual byte GetByte(int ordinal);
    public virtual char GetChar(int ordinal);
    public virtual DateTime GetDateTime(int ordinal);
    public virtual decimal GetDecimal(int ordinal);
    public virtual double GetDouble(int ordinal);
    public virtual float GetFloat(int ordinal);
    public virtual Guid GetGuid(int ordinal);
    public virtual short GetInt16(int ordinal);
    public virtual int GetInt32(int ordinal);
    public virtual long GetInt64(int ordinal);
    public virtual string GetString(int ordinal);
    [NullableContextAttribute("2")]
public virtual long GetBytes(int ordinal, long dataOffset, Byte[] buffer, int bufferOffset, int length);
    [NullableContextAttribute("2")]
public virtual long GetChars(int ordinal, long dataOffset, Char[] buffer, int bufferOffset, int length);
    protected virtual DbDataReader GetDbDataReader(int ordinal);
    public NpgsqlNestedDataReader GetData(int ordinal);
    public virtual string GetDataTypeName(int ordinal);
    public virtual IEnumerator GetEnumerator();
    public virtual string GetName(int ordinal);
    public virtual int GetOrdinal(string name);
    [UnconditionalSuppressMessageAttribute("ILLink", "IL2093")]
public virtual Type GetFieldType(int ordinal);
    public virtual object GetValue(int ordinal);
    public virtual int GetValues(Object[] values);
    public virtual bool IsDBNull(int ordinal);
    public virtual T GetFieldValue(int ordinal);
    public virtual bool Read();
    public virtual bool NextResult();
    public virtual void Close();
    protected virtual void Dispose(bool disposing);
    private void CheckNotClosed();
    private void CheckResultSet();
    private void CheckOnRow();
    private ColumnInfo CheckRowAndColumn(int column);
    private int CheckRowAndColumnAndSeek(int ordinal, ColumnInfo& column);
    private PgConverterInfo GetOrAddConverterInfo(Type type, ColumnInfo column, int ordinal, Boolean& asObject);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Npgsql.NpgsqlNoticeEventArgs : EventArgs {
    [CompilerGeneratedAttribute]
private PostgresNotice <Notice>k__BackingField;
    public PostgresNotice Notice { get; }
    internal NpgsqlNoticeEventArgs(PostgresNotice notice);
    [CompilerGeneratedAttribute]
public PostgresNotice get_Notice();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Npgsql.NpgsqlNotificationEventArgs : EventArgs {
    [CompilerGeneratedAttribute]
private int <PID>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Channel>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Payload>k__BackingField;
    public int PID { get; }
    public string Channel { get; }
    public string Payload { get; }
    internal NpgsqlNotificationEventArgs(NpgsqlReadBuffer buf);
    [CompilerGeneratedAttribute]
public int get_PID();
    [CompilerGeneratedAttribute]
public string get_Channel();
    [CompilerGeneratedAttribute]
public string get_Payload();
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
public class Npgsql.NpgsqlOperationInProgressException : NpgsqlException {
    [CompilerGeneratedAttribute]
private NpgsqlCommand <CommandInProgress>k__BackingField;
    public NpgsqlCommand CommandInProgress { get; }
    [NullableContextAttribute("1")]
public NpgsqlOperationInProgressException(NpgsqlCommand command);
    internal NpgsqlOperationInProgressException(ConnectorState state);
    [CompilerGeneratedAttribute]
public NpgsqlCommand get_CommandInProgress();
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
public class Npgsql.NpgsqlParameter : DbParameter {
    private protected byte _precision;
    private protected byte _scale;
    private protected int _size;
    internal Nullable`1<NpgsqlDbType> _npgsqlDbType;
    internal string _dataTypeName;
    [NullableAttribute("1")]
private protected string _name;
    private object _value;
    private protected bool _useSubStream;
    private protected SubReadStream _subStream;
    [NullableAttribute("1")]
private protected string _sourceColumn;
    [NullableAttribute("1")]
[CompilerGeneratedAttribute]
private string <TrimmedName>k__BackingField;
    [NullableAttribute("1")]
internal static string PositionalName;
    [CompilerGeneratedAttribute]
private PgTypeInfo <TypeInfo>k__BackingField;
    [CompilerGeneratedAttribute]
private PgTypeId <PgTypeId>k__BackingField;
    [CompilerGeneratedAttribute]
private PgConverter <Converter>k__BackingField;
    [CompilerGeneratedAttribute]
private DataFormat <Format>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<Size> <WriteSize>k__BackingField;
    private protected object _writeState;
    private protected Size _bufferRequirement;
    private protected bool _asObject;
    [CompilerGeneratedAttribute]
private bool <IsNullable>k__BackingField;
    [CompilerGeneratedAttribute]
private ParameterDirection <Direction>k__BackingField;
    [CompilerGeneratedAttribute]
private DataRowVersion <SourceVersion>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <SourceColumnNullMapping>k__BackingField;
    [CompilerGeneratedAttribute]
private NpgsqlParameterCollection <Collection>k__BackingField;
    [CompilerGeneratedAttribute]
private PostgresType <PostgresType>k__BackingField;
    [NullableAttribute("1")]
internal string TrimmedName { get; private protected set; }
    private protected PgTypeInfo TypeInfo { get; private set; }
    internal PgTypeId PgTypeId { get; private set; }
    private protected PgConverter Converter { get; private set; }
    internal DataFormat Format { get; private protected set; }
    private protected Nullable`1<Size> WriteSize { get; private protected set; }
    [NullableAttribute("1")]
[DefaultValueAttribute("")]
public string ParameterName { get; public set; }
    internal bool IsPositional { get; }
    [TypeConverterAttribute("System.ComponentModel.StringConverter")]
[CategoryAttribute("Data")]
public object Value { get; public set; }
    [CategoryAttribute("Data")]
[TypeConverterAttribute("System.ComponentModel.StringConverter")]
public object NpgsqlValue { get; public set; }
    [DefaultValueAttribute("Mono.Cecil.CustomAttributeArgument")]
[CategoryAttribute("Data")]
[RefreshPropertiesAttribute("1")]
public DbType DbType { get; public set; }
    [DefaultValueAttribute("Mono.Cecil.CustomAttributeArgument")]
[CategoryAttribute("Data")]
[RefreshPropertiesAttribute("1")]
[DbProviderSpecificTypePropertyAttribute("True")]
public NpgsqlDbType NpgsqlDbType { get; public set; }
    public string DataTypeName { get; public set; }
    public bool IsNullable { get; public set; }
    [DefaultValueAttribute("Mono.Cecil.CustomAttributeArgument")]
[CategoryAttribute("Data")]
public ParameterDirection Direction { get; public set; }
    [DefaultValueAttribute("0")]
[CategoryAttribute("Data")]
public byte Precision { get; public set; }
    [DefaultValueAttribute("0")]
[CategoryAttribute("Data")]
public byte Scale { get; public set; }
    [DefaultValueAttribute("0")]
[CategoryAttribute("Data")]
public int Size { get; public set; }
    [NullableAttribute("1")]
[DefaultValueAttribute("")]
[CategoryAttribute("Data")]
public string SourceColumn { get; public set; }
    [CategoryAttribute("Data")]
[DefaultValueAttribute("Mono.Cecil.CustomAttributeArgument")]
public DataRowVersion SourceVersion { get; public set; }
    public bool SourceColumnNullMapping { get; public set; }
    public NpgsqlParameterCollection Collection { get; public set; }
    public PostgresType PostgresType { get; internal set; }
    [NullableAttribute("1")]
private protected Type StaticValueType { get; }
    internal bool IsInputDirection { get; }
    internal bool IsOutputDirection { get; }
    public NpgsqlParameter(string parameterName, object value);
    public NpgsqlParameter(string parameterName, NpgsqlDbType parameterType);
    public NpgsqlParameter(string parameterName, DbType parameterType);
    public NpgsqlParameter(string parameterName, NpgsqlDbType parameterType, int size);
    public NpgsqlParameter(string parameterName, DbType parameterType, int size);
    public NpgsqlParameter(string parameterName, NpgsqlDbType parameterType, int size, string sourceColumn);
    public NpgsqlParameter(string parameterName, DbType parameterType, int size, string sourceColumn);
    [NullableContextAttribute("1")]
public NpgsqlParameter(string parameterName, NpgsqlDbType parameterType, int size, string sourceColumn, ParameterDirection direction, bool isNullable, byte precision, byte scale, DataRowVersion sourceVersion, object value);
    [NullableContextAttribute("1")]
public NpgsqlParameter(string parameterName, DbType parameterType, int size, string sourceColumn, ParameterDirection direction, bool isNullable, byte precision, byte scale, DataRowVersion sourceVersion, object value);
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
internal string get_TrimmedName();
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
private protected void set_TrimmedName(string value);
    [CompilerGeneratedAttribute]
private protected PgTypeInfo get_TypeInfo();
    [CompilerGeneratedAttribute]
private void set_TypeInfo(PgTypeInfo value);
    [CompilerGeneratedAttribute]
internal PgTypeId get_PgTypeId();
    [CompilerGeneratedAttribute]
private void set_PgTypeId(PgTypeId value);
    [CompilerGeneratedAttribute]
private protected PgConverter get_Converter();
    [CompilerGeneratedAttribute]
private void set_Converter(PgConverter value);
    [CompilerGeneratedAttribute]
internal DataFormat get_Format();
    [CompilerGeneratedAttribute]
private protected void set_Format(DataFormat value);
    [CompilerGeneratedAttribute]
private protected Nullable`1<Size> get_WriteSize();
    [CompilerGeneratedAttribute]
private protected void set_WriteSize(Nullable`1<Size> value);
    [NullableContextAttribute("1")]
public sealed virtual string get_ParameterName();
    [NullableContextAttribute("1")]
public sealed virtual void set_ParameterName(string value);
    internal void ChangeParameterName(string value);
    internal bool get_IsPositional();
    public virtual object get_Value();
    public virtual void set_Value(object value);
    public object get_NpgsqlValue();
    public void set_NpgsqlValue(object value);
    public sealed virtual DbType get_DbType();
    public sealed virtual void set_DbType(DbType value);
    public NpgsqlDbType get_NpgsqlDbType();
    public void set_NpgsqlDbType(NpgsqlDbType value);
    public string get_DataTypeName();
    public void set_DataTypeName(string value);
    [CompilerGeneratedAttribute]
public sealed virtual bool get_IsNullable();
    [CompilerGeneratedAttribute]
public sealed virtual void set_IsNullable(bool value);
    [CompilerGeneratedAttribute]
public sealed virtual ParameterDirection get_Direction();
    [CompilerGeneratedAttribute]
public sealed virtual void set_Direction(ParameterDirection value);
    public sealed virtual byte get_Precision();
    public sealed virtual void set_Precision(byte value);
    public sealed virtual byte get_Scale();
    public sealed virtual void set_Scale(byte value);
    public sealed virtual int get_Size();
    public sealed virtual void set_Size(int value);
    [NullableContextAttribute("1")]
public sealed virtual string get_SourceColumn();
    [NullableContextAttribute("1")]
public sealed virtual void set_SourceColumn(string value);
    [CompilerGeneratedAttribute]
public sealed virtual DataRowVersion get_SourceVersion();
    [CompilerGeneratedAttribute]
public sealed virtual void set_SourceVersion(DataRowVersion value);
    [CompilerGeneratedAttribute]
public sealed virtual bool get_SourceColumnNullMapping();
    [CompilerGeneratedAttribute]
public sealed virtual void set_SourceColumnNullMapping(bool value);
    [CompilerGeneratedAttribute]
public NpgsqlParameterCollection get_Collection();
    [CompilerGeneratedAttribute]
public void set_Collection(NpgsqlParameterCollection value);
    [CompilerGeneratedAttribute]
public PostgresType get_PostgresType();
    [CompilerGeneratedAttribute]
internal void set_PostgresType(PostgresType value);
    [NullableContextAttribute("1")]
private protected virtual Type get_StaticValueType();
    [NullableContextAttribute("1")]
private Type GetValueType(Type staticValueType);
    internal bool ShouldResetObjectTypeInfo(object value);
    internal void GetResolutionInfo(PgTypeInfo& typeInfo, PgConverter& converter, PgTypeId& pgTypeId);
    [NullableContextAttribute("1")]
internal void SetResolutionInfo(PgTypeInfo typeInfo, PgConverter converter, PgTypeId pgTypeId);
    [NullableContextAttribute("1")]
internal void ResolveTypeInfo(PgSerializerOptions options);
    [NullableContextAttribute("1")]
private protected virtual PgConverterResolution ResolveConverter(PgTypeInfo typeInfo);
    internal void Bind(DataFormat& format, Size& size, Nullable`1<DataFormat> requiredFormat);
    private protected virtual void BindCore(Nullable`1<DataFormat> formatPreference, bool allowNullReference);
    [NullableContextAttribute("1")]
[AsyncStateMachineAttribute("Npgsql.NpgsqlParameter/<Write>d__115")]
internal ValueTask Write(bool async, PgWriter writer, CancellationToken cancellationToken);
    [NullableContextAttribute("1")]
private protected virtual ValueTask WriteValue(bool async, PgWriter writer, CancellationToken cancellationToken);
    public virtual void ResetDbType();
    private protected void ResetTypeInfo();
    private protected void ResetBindingInfo();
    internal bool get_IsInputDirection();
    internal bool get_IsOutputDirection();
    [NullableContextAttribute("1")]
public NpgsqlParameter Clone();
    [NullableContextAttribute("1")]
private protected virtual NpgsqlParameter CloneCore();
    [NullableContextAttribute("1")]
private sealed virtual override object System.ICloneable.Clone();
    [CompilerGeneratedAttribute]
private void <ResolveTypeInfo>g__ThrowNoTypeInfo|111_0();
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
private void <ResolveTypeInfo>g__ThrowNotSupported|111_1(string dataTypeName);
    [CompilerGeneratedAttribute]
private void <Bind>g__HandleSizeTruncation|113_0();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Npgsql.NpgsqlParameter`1 : NpgsqlParameter {
    [NullableAttribute("2")]
private T _typedValue;
    [NullableAttribute("2")]
public T TypedValue { get; public set; }
    [NullableAttribute("2")]
public object Value { get; public set; }
    private protected Type StaticValueType { get; }
    public NpgsqlParameter`1(string parameterName, T value);
    public NpgsqlParameter`1(string parameterName, NpgsqlDbType npgsqlDbType);
    public NpgsqlParameter`1(string parameterName, DbType dbType);
    [NullableContextAttribute("2")]
public T get_TypedValue();
    [NullableContextAttribute("2")]
public void set_TypedValue(T value);
    [NullableContextAttribute("2")]
public virtual object get_Value();
    [NullableContextAttribute("2")]
public virtual void set_Value(object value);
    private protected virtual Type get_StaticValueType();
    private protected virtual PgConverterResolution ResolveConverter(PgTypeInfo typeInfo);
    private protected virtual void BindCore(Nullable`1<DataFormat> formatPreference, bool allowNullReference);
    private protected virtual ValueTask WriteValue(bool async, PgWriter writer, CancellationToken cancellationToken);
    private protected virtual NpgsqlParameter CloneCore();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[DefaultMemberAttribute("Item")]
public class Npgsql.NpgsqlParameterCollection : DbParameterCollection {
    internal static int LookupThreshold;
    [CompilerGeneratedAttribute]
private List`1<NpgsqlParameter> <InternalList>k__BackingField;
    internal static bool TwoPassCompatMode;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private Dictionary`2<string, int> _caseInsensitiveLookup;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private Dictionary`2<string, int> _caseSensitiveLookup;
    [CompilerGeneratedAttribute]
private bool <HasOutputParameters>k__BackingField;
    [CompilerGeneratedAttribute]
private PlaceholderType <PlaceholderType>k__BackingField;
    internal List`1<NpgsqlParameter> InternalList { get; }
    private bool LookupEnabled { get; }
    public NpgsqlParameter Item { get; public set; }
    public NpgsqlParameter Item { get; public set; }
    public bool IsReadOnly { get; }
    public bool IsFixedSize { get; }
    public bool IsSynchronized { get; }
    public int Count { get; }
    private bool System.Collections.Generic.ICollection<Npgsql.NpgsqlParameter>.IsReadOnly { get; }
    public object SyncRoot { get; }
    internal bool HasOutputParameters { get; internal set; }
    internal PlaceholderType PlaceholderType { get; internal set; }
    private static NpgsqlParameterCollection();
    [CompilerGeneratedAttribute]
internal List`1<NpgsqlParameter> get_InternalList();
    private bool get_LookupEnabled();
    private void LookupClear();
    private void LookupAdd(string name, int index);
    private void LookupInsert(string name, int index);
    private void LookupRemove(string name, int index);
    private void LookupChangeName(NpgsqlParameter parameter, string oldName, string oldTrimmedName, int index);
    internal void ChangeParameterName(NpgsqlParameter parameter, string value);
    public NpgsqlParameter get_Item(string parameterName);
    public void set_Item(string parameterName, NpgsqlParameter value);
    public sealed virtual NpgsqlParameter get_Item(int index);
    public sealed virtual void set_Item(int index, NpgsqlParameter value);
    public NpgsqlParameter Add(NpgsqlParameter value);
    private sealed virtual override void System.Collections.Generic.ICollection<Npgsql.NpgsqlParameter>.Add(NpgsqlParameter item);
    public NpgsqlParameter AddWithValue(string parameterName, object value);
    public NpgsqlParameter AddWithValue(string parameterName, NpgsqlDbType parameterType, object value);
    public NpgsqlParameter AddWithValue(string parameterName, NpgsqlDbType parameterType, int size, object value);
    public NpgsqlParameter AddWithValue(string parameterName, NpgsqlDbType parameterType, int size, string sourceColumn, object value);
    public NpgsqlParameter AddWithValue(object value);
    public NpgsqlParameter AddWithValue(NpgsqlDbType parameterType, object value);
    public NpgsqlParameter Add(string parameterName, NpgsqlDbType parameterType);
    public NpgsqlParameter Add(string parameterName, NpgsqlDbType parameterType, int size);
    public NpgsqlParameter Add(string parameterName, NpgsqlDbType parameterType, int size, string sourceColumn);
    public virtual void RemoveAt(string parameterName);
    public virtual bool Contains(string parameterName);
    public virtual int IndexOf(string parameterName);
    public virtual bool get_IsReadOnly();
    public virtual void RemoveAt(int index);
    public virtual void Insert(int index, object value);
    public void Remove(string parameterName);
    public virtual void Remove(object value);
    public virtual bool Contains(object value);
    public bool TryGetValue(string parameterName, NpgsqlParameter& parameter);
    public virtual void Clear();
    public virtual int IndexOf(object value);
    public virtual int Add(object value);
    public virtual bool get_IsFixedSize();
    public virtual bool get_IsSynchronized();
    public virtual int get_Count();
    public virtual void CopyTo(Array array, int index);
    private sealed virtual override bool System.Collections.Generic.ICollection<Npgsql.NpgsqlParameter>.get_IsReadOnly();
    public virtual object get_SyncRoot();
    private sealed virtual override IEnumerator`1<NpgsqlParameter> System.Collections.Generic.IEnumerable<Npgsql.NpgsqlParameter>.GetEnumerator();
    public virtual IEnumerator GetEnumerator();
    public virtual void AddRange(Array values);
    protected virtual DbParameter GetParameter(string parameterName);
    protected virtual DbParameter GetParameter(int index);
    protected virtual void SetParameter(string parameterName, DbParameter value);
    protected virtual void SetParameter(int index, DbParameter value);
    public sealed virtual int IndexOf(NpgsqlParameter item);
    public sealed virtual void Insert(int index, NpgsqlParameter item);
    public sealed virtual bool Contains(NpgsqlParameter item);
    public sealed virtual bool Remove(NpgsqlParameter item);
    public sealed virtual void CopyTo(NpgsqlParameter[] array, int arrayIndex);
    public NpgsqlParameter[] ToArray();
    internal void CloneTo(NpgsqlParameterCollection other);
    internal void ProcessParameters(PgSerializerOptions options, bool validateValues, CommandType commandType);
    [CompilerGeneratedAttribute]
internal bool get_HasOutputParameters();
    [CompilerGeneratedAttribute]
internal void set_HasOutputParameters(bool value);
    [CompilerGeneratedAttribute]
internal PlaceholderType get_PlaceholderType();
    [CompilerGeneratedAttribute]
internal void set_PlaceholderType(PlaceholderType value);
    private static NpgsqlParameter Cast(object value);
    [NullableContextAttribute("2")]
[DoesNotReturnAttribute]
private static void ThrowInvalidCastException(object value);
    [CompilerGeneratedAttribute]
private void <IndexOf>g__BuildLookup|36_0();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Npgsql.NpgsqlRawCopyStream : Stream {
    private NpgsqlConnector _connector;
    private NpgsqlReadBuffer _readBuf;
    private NpgsqlWriteBuffer _writeBuf;
    private int _leftToReadInDataMsg;
    private bool _isDisposed;
    private bool _isConsumed;
    private bool _canRead;
    private bool _canWrite;
    [CompilerGeneratedAttribute]
private bool <IsBinary>k__BackingField;
    internal static Byte[] BinarySignature;
    private ILogger _copyLogger;
    internal bool IsBinary { get; private set; }
    public bool CanWrite { get; }
    public bool CanRead { get; }
    public bool CanTimeout { get; }
    public int WriteTimeout { get; public set; }
    public int ReadTimeout { get; public set; }
    public bool CanSeek { get; }
    public long Length { get; }
    public long Position { get; public set; }
    internal NpgsqlRawCopyStream(NpgsqlConnector connector);
    private static NpgsqlRawCopyStream();
    [CompilerGeneratedAttribute]
internal bool get_IsBinary();
    [CompilerGeneratedAttribute]
private void set_IsBinary(bool value);
    public virtual bool get_CanWrite();
    public virtual bool get_CanRead();
    public virtual bool get_CanTimeout();
    public virtual int get_WriteTimeout();
    public virtual void set_WriteTimeout(int value);
    public virtual int get_ReadTimeout();
    public virtual void set_ReadTimeout(int value);
    [AsyncStateMachineAttribute("Npgsql.NpgsqlRawCopyStream/<Init>d__27")]
internal Task Init(string copyCommand, bool async, CancellationToken cancellationToken);
    public virtual void Write(Byte[] buffer, int offset, int count);
    public virtual Task WriteAsync(Byte[] buffer, int offset, int count, CancellationToken cancellationToken);
    [NullableContextAttribute("0")]
public virtual void Write(ReadOnlySpan`1<byte> buffer);
    [NullableContextAttribute("0")]
public virtual ValueTask WriteAsync(ReadOnlyMemory`1<byte> buffer, CancellationToken cancellationToken);
    public virtual void Flush();
    public virtual Task FlushAsync(CancellationToken cancellationToken);
    private Task FlushAsync(bool async, CancellationToken cancellationToken);
    public virtual int Read(Byte[] buffer, int offset, int count);
    public virtual Task`1<int> ReadAsync(Byte[] buffer, int offset, int count, CancellationToken cancellationToken);
    [NullableContextAttribute("0")]
public virtual int Read(Span`1<byte> span);
    [NullableContextAttribute("0")]
public virtual ValueTask`1<int> ReadAsync(Memory`1<byte> buffer, CancellationToken cancellationToken);
    [NullableContextAttribute("0")]
[AsyncStateMachineAttribute("Npgsql.NpgsqlRawCopyStream/<ReadCore>d__39")]
private ValueTask`1<int> ReadCore(int count, bool async, CancellationToken cancellationToken);
    public sealed virtual void Cancel();
    public sealed virtual Task CancelAsync();
    [AsyncStateMachineAttribute("Npgsql.NpgsqlRawCopyStream/<Cancel>d__42")]
private Task Cancel(bool async);
    protected virtual void Dispose(bool disposing);
    public virtual ValueTask DisposeAsync();
    [AsyncStateMachineAttribute("Npgsql.NpgsqlRawCopyStream/<DisposeAsync>d__45")]
private ValueTask DisposeAsync(bool disposing, bool async);
    private void Cleanup();
    private void CheckDisposed();
    public virtual bool get_CanSeek();
    public virtual long Seek(long offset, SeekOrigin origin);
    public virtual void SetLength(long value);
    public virtual long get_Length();
    public virtual long get_Position();
    public virtual void set_Position(long value);
    private static void ValidateArguments(Byte[] buffer, int offset, int count);
    [NullableContextAttribute("0")]
[AsyncStateMachineAttribute("Npgsql.NpgsqlRawCopyStream/<<WriteAsync>g__WriteAsyncInternal|31_0>d")]
[CompilerGeneratedAttribute]
private ValueTask <WriteAsync>g__WriteAsyncInternal|31_0(ReadOnlyMemory`1<byte> buffer, CancellationToken cancellationToken);
}
public class Npgsql.NpgsqlRowUpdatedEventArgs : RowUpdatedEventArgs {
    [NullableContextAttribute("1")]
public NpgsqlRowUpdatedEventArgs(DataRow dataRow, IDbCommand command, StatementType statementType, DataTableMapping tableMapping);
}
public class Npgsql.NpgsqlRowUpdatedEventHandler : MulticastDelegate {
    public NpgsqlRowUpdatedEventHandler(object object, IntPtr method);
    [NullableContextAttribute("1")]
public virtual void Invoke(object sender, NpgsqlRowUpdatedEventArgs e);
    public virtual IAsyncResult BeginInvoke(object sender, NpgsqlRowUpdatedEventArgs e, AsyncCallback callback, object object);
    public virtual void EndInvoke(IAsyncResult result);
}
public class Npgsql.NpgsqlRowUpdatingEventArgs : RowUpdatingEventArgs {
    [NullableContextAttribute("1")]
public NpgsqlRowUpdatingEventArgs(DataRow dataRow, IDbCommand command, StatementType statementType, DataTableMapping tableMapping);
}
public class Npgsql.NpgsqlRowUpdatingEventHandler : MulticastDelegate {
    public NpgsqlRowUpdatingEventHandler(object object, IntPtr method);
    [NullableContextAttribute("1")]
public virtual void Invoke(object sender, NpgsqlRowUpdatingEventArgs e);
    public virtual IAsyncResult BeginInvoke(object sender, NpgsqlRowUpdatingEventArgs e, AsyncCallback callback, object object);
    public virtual void EndInvoke(IAsyncResult result);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal static class Npgsql.NpgsqlSchema : object {
    private static String[] ReservedKeywords;
    private static NpgsqlSchema();
    public static Task`1<DataTable> GetSchema(bool async, NpgsqlConnection conn, string collectionName, String[] restrictions, CancellationToken cancellationToken);
    private static DataTable GetMetaDataCollections();
    private static DataTable GetRestrictions();
    private static NpgsqlCommand BuildCommand(NpgsqlConnection conn, StringBuilder query, String[] restrictions, String[] names);
    private static NpgsqlCommand BuildCommand(NpgsqlConnection conn, StringBuilder query, String[] restrictions, bool addWhere, String[] names);
    private static string RemoveSpecialChars(string paramName);
    private static Task`1<DataTable> GetDatabases(NpgsqlConnection conn, String[] restrictions, bool async, CancellationToken cancellationToken);
    private static Task`1<DataTable> GetSchemata(NpgsqlConnection conn, String[] restrictions, bool async, CancellationToken cancellationToken);
    private static Task`1<DataTable> GetTables(NpgsqlConnection conn, String[] restrictions, bool async, CancellationToken cancellationToken);
    private static Task`1<DataTable> GetColumns(NpgsqlConnection conn, String[] restrictions, bool async, CancellationToken cancellationToken);
    private static Task`1<DataTable> GetViews(NpgsqlConnection conn, String[] restrictions, bool async, CancellationToken cancellationToken);
    private static Task`1<DataTable> GetMaterializedViews(NpgsqlConnection conn, String[] restrictions, bool async, CancellationToken cancellationToken);
    private static Task`1<DataTable> GetUsers(NpgsqlConnection conn, String[] restrictions, bool async, CancellationToken cancellationToken);
    private static Task`1<DataTable> GetIndexes(NpgsqlConnection conn, String[] restrictions, bool async, CancellationToken cancellationToken);
    private static Task`1<DataTable> GetIndexColumns(NpgsqlConnection conn, String[] restrictions, bool async, CancellationToken cancellationToken);
    private static Task`1<DataTable> GetConstraints(NpgsqlConnection conn, String[] restrictions, string constraintType, bool async, CancellationToken cancellationToken);
    private static Task`1<DataTable> GetConstraintColumns(NpgsqlConnection conn, String[] restrictions, bool async, CancellationToken cancellationToken);
    private static DataTable GetDataSourceInformation(NpgsqlConnection conn);
    private static DataTable GetDataTypes(NpgsqlConnection conn);
    private static void PopulateDefaultDataTypeInfo(DataRow row, PostgresType type);
    private static void PopulateHardcodedDataTypeInfo(DataRow row, PostgresType type);
    private static DataTable GetReservedWords();
    [AsyncStateMachineAttribute("Npgsql.NpgsqlSchema/<ParseResults>d__23")]
private static Task`1<DataTable> ParseResults(bool async, NpgsqlCommand command, DataTable dataTable, Action`2<NpgsqlDataReader, DataRow> populateRow, CancellationToken cancellationToken);
    private static object GetFieldValueOrDBNull(NpgsqlDataReader reader, int ordinal);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Npgsql.NpgsqlSlimDataSourceBuilder : object {
    [CompilerGeneratedAttribute]
private static UnsupportedTypeInfoResolver`1<NpgsqlSlimDataSourceBuilder> <UnsupportedTypeInfoResolver>k__BackingField;
    [NullableAttribute("2")]
private ILoggerFactory _loggerFactory;
    private bool _sensitiveDataLoggingEnabled;
    private TransportSecurityHandler _transportSecurityHandler;
    [NullableAttribute("2")]
private RemoteCertificateValidationCallback _userCertificateValidationCallback;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private Action`1<X509CertificateCollection> _clientCertificatesCallback;
    private IntegratedSecurityHandler _integratedSecurityHandler;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private Func`2<NpgsqlConnectionStringBuilder, string> _passwordProvider;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private Func`3<NpgsqlConnectionStringBuilder, CancellationToken, ValueTask`1<string>> _passwordProviderAsync;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private Func`3<NpgsqlConnectionStringBuilder, CancellationToken, ValueTask`1<string>> _periodicPasswordProvider;
    private TimeSpan _periodicPasswordSuccessRefreshInterval;
    private TimeSpan _periodicPasswordFailureRefreshInterval;
    private PgTypeInfoResolverChainBuilder _resolverChainBuilder;
    private UserTypeMapper _userTypeMapper;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private Action`1<NpgsqlConnection> _connectionInitializer;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private Func`2<NpgsqlConnection, Task> _connectionInitializerAsync;
    [NullableAttribute("2")]
[CompilerGeneratedAttribute]
private JsonSerializerOptions <JsonSerializerOptions>k__BackingField;
    [CompilerGeneratedAttribute]
private Action`1<NpgsqlSlimDataSourceBuilder> <ConfigureDefaultFactories>k__BackingField;
    [CompilerGeneratedAttribute]
private NpgsqlConnectionStringBuilder <ConnectionStringBuilder>k__BackingField;
    [NullableAttribute("2")]
[CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    [CompilerGeneratedAttribute]
private Action`1<List`1<IPgTypeInfoResolver>> <ConfigureResolverChain>k__BackingField;
    private static UnsupportedTypeInfoResolver`1<NpgsqlSlimDataSourceBuilder> UnsupportedTypeInfoResolver { get; }
    [NullableAttribute("2")]
internal JsonSerializerOptions JsonSerializerOptions { get; private set; }
    internal Action`1<NpgsqlSlimDataSourceBuilder> ConfigureDefaultFactories { get; internal set; }
    public NpgsqlConnectionStringBuilder ConnectionStringBuilder { get; }
    public string ConnectionString { get; }
    [NullableAttribute("2")]
public string Name { get; public set; }
    public INpgsqlNameTranslator DefaultNameTranslator { get; public set; }
    internal Action`1<List`1<IPgTypeInfoResolver>> ConfigureResolverChain { get; internal set; }
    private static NpgsqlSlimDataSourceBuilder();
    [NullableContextAttribute("2")]
public NpgsqlSlimDataSourceBuilder(string connectionString);
    internal NpgsqlSlimDataSourceBuilder(NpgsqlConnectionStringBuilder connectionStringBuilder);
    [CompilerGeneratedAttribute]
private static UnsupportedTypeInfoResolver`1<NpgsqlSlimDataSourceBuilder> get_UnsupportedTypeInfoResolver();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
internal JsonSerializerOptions get_JsonSerializerOptions();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
private void set_JsonSerializerOptions(JsonSerializerOptions value);
    [CompilerGeneratedAttribute]
internal Action`1<NpgsqlSlimDataSourceBuilder> get_ConfigureDefaultFactories();
    [CompilerGeneratedAttribute]
internal void set_ConfigureDefaultFactories(Action`1<NpgsqlSlimDataSourceBuilder> value);
    [CompilerGeneratedAttribute]
public NpgsqlConnectionStringBuilder get_ConnectionStringBuilder();
    public string get_ConnectionString();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public string get_Name();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public void set_Name(string value);
    public NpgsqlSlimDataSourceBuilder UseLoggerFactory(ILoggerFactory loggerFactory);
    public NpgsqlSlimDataSourceBuilder EnableParameterLogging(bool parameterLoggingEnabled);
    public NpgsqlSlimDataSourceBuilder ConfigureJsonOptions(JsonSerializerOptions serializerOptions);
    public NpgsqlSlimDataSourceBuilder UseUserCertificateValidationCallback(RemoteCertificateValidationCallback userCertificateValidationCallback);
    public NpgsqlSlimDataSourceBuilder UseClientCertificate(X509Certificate clientCertificate);
    public NpgsqlSlimDataSourceBuilder UseClientCertificates(X509CertificateCollection clientCertificates);
    public NpgsqlSlimDataSourceBuilder UseClientCertificatesCallback(Action`1<X509CertificateCollection> clientCertificatesCallback);
    public NpgsqlSlimDataSourceBuilder UseRootCertificate(X509Certificate2 rootCertificate);
    public NpgsqlSlimDataSourceBuilder UseRootCertificateCallback(Func`1<X509Certificate2> rootCertificateCallback);
    public NpgsqlSlimDataSourceBuilder UsePeriodicPasswordProvider(Func`3<NpgsqlConnectionStringBuilder, CancellationToken, ValueTask`1<string>> passwordProvider, TimeSpan successRefreshInterval, TimeSpan failureRefreshInterval);
    public NpgsqlSlimDataSourceBuilder UsePasswordProvider(Func`2<NpgsqlConnectionStringBuilder, string> passwordProvider, Func`3<NpgsqlConnectionStringBuilder, CancellationToken, ValueTask`1<string>> passwordProviderAsync);
    public sealed virtual INpgsqlNameTranslator get_DefaultNameTranslator();
    public sealed virtual void set_DefaultNameTranslator(INpgsqlNameTranslator value);
    public sealed virtual INpgsqlTypeMapper MapEnum(string pgName, INpgsqlNameTranslator nameTranslator);
    [NullableContextAttribute("2")]
public sealed virtual bool UnmapEnum(string pgName, INpgsqlNameTranslator nameTranslator);
    [RequiresDynamicCodeAttribute("Calling MapEnum with a Type can require creating new generic types or methods. This may not work when AOT compiling.")]
public sealed virtual INpgsqlTypeMapper MapEnum(Type clrType, string pgName, INpgsqlNameTranslator nameTranslator);
    [NullableContextAttribute("2")]
public sealed virtual bool UnmapEnum(Type clrType, string pgName, INpgsqlNameTranslator nameTranslator);
    [NullableContextAttribute("2")]
[RequiresDynamicCodeAttribute("Mapping composite types involves serializing arbitrary types which can require creating new generic types or methods. This is currently unsupported with NativeAOT, vote on issue #5303 if this is important to you.")]
public sealed virtual INpgsqlTypeMapper MapComposite(string pgName, INpgsqlNameTranslator nameTranslator);
    [NullableContextAttribute("2")]
[RequiresDynamicCodeAttribute("Mapping composite types involves serializing arbitrary types which can require creating new generic types or methods. This is currently unsupported with NativeAOT, vote on issue #5303 if this is important to you.")]
public sealed virtual bool UnmapComposite(string pgName, INpgsqlNameTranslator nameTranslator);
    [RequiresDynamicCodeAttribute("Mapping composite types involves serializing arbitrary types which can require creating new generic types or methods. This is currently unsupported with NativeAOT, vote on issue #5303 if this is important to you.")]
public sealed virtual INpgsqlTypeMapper MapComposite(Type clrType, string pgName, INpgsqlNameTranslator nameTranslator);
    [NullableContextAttribute("2")]
[RequiresDynamicCodeAttribute("Mapping composite types involves serializing arbitrary types which can require creating new generic types or methods. This is currently unsupported with NativeAOT, vote on issue #5303 if this is important to you.")]
public sealed virtual bool UnmapComposite(Type clrType, string pgName, INpgsqlNameTranslator nameTranslator);
    public sealed virtual void AddTypeInfoResolverFactory(PgTypeInfoResolverFactory factory);
    private sealed virtual override void Npgsql.TypeMapping.INpgsqlTypeMapper.Reset();
    [CompilerGeneratedAttribute]
internal Action`1<List`1<IPgTypeInfoResolver>> get_ConfigureResolverChain();
    [CompilerGeneratedAttribute]
internal void set_ConfigureResolverChain(Action`1<List`1<IPgTypeInfoResolver>> value);
    internal void AppendResolverFactory(PgTypeInfoResolverFactory factory);
    internal void AppendResolverFactory(Func`1<T> factory);
    internal void AppendDefaultFactories();
    public NpgsqlSlimDataSourceBuilder EnableArrays();
    public NpgsqlSlimDataSourceBuilder EnableRanges();
    public NpgsqlSlimDataSourceBuilder EnableMultiranges();
    public NpgsqlSlimDataSourceBuilder EnableRecords();
    public NpgsqlSlimDataSourceBuilder EnableFullTextSearch();
    public NpgsqlSlimDataSourceBuilder EnableLTree();
    public NpgsqlSlimDataSourceBuilder EnableExtraConversions();
    public NpgsqlSlimDataSourceBuilder EnableTransportSecurity();
    public NpgsqlSlimDataSourceBuilder EnableIntegratedSecurity();
    public NpgsqlSlimDataSourceBuilder EnableNetworkTypes();
    public NpgsqlSlimDataSourceBuilder EnableGeometricTypes();
    public NpgsqlSlimDataSourceBuilder EnableJsonTypes();
    [RequiresUnreferencedCodeAttribute("Json serializer may perform reflection on trimmed types.")]
[RequiresDynamicCodeAttribute("Serializing arbitrary types to json can require creating new generic types or methods, which requires creating code at runtime. This may not work when AOT compiling.")]
public NpgsqlSlimDataSourceBuilder EnableDynamicJson(Type[] jsonbClrTypes, Type[] jsonClrTypes);
    [RequiresUnreferencedCodeAttribute("The mapping of PostgreSQL records as .NET tuples requires reflection usage which is incompatible with trimming.")]
[RequiresDynamicCodeAttribute("The mapping of PostgreSQL records as .NET tuples requires dynamic code usage which is incompatible with NativeAOT.")]
public NpgsqlSlimDataSourceBuilder EnableRecordsAsTuples();
    [RequiresUnreferencedCodeAttribute("The use of unmapped enums, ranges or multiranges requires reflection usage which is incompatible with trimming.")]
[RequiresDynamicCodeAttribute("The use of unmapped enums, ranges or multiranges requires dynamic code usage which is incompatible with NativeAOT.")]
public NpgsqlSlimDataSourceBuilder EnableUnmappedTypes();
    public NpgsqlSlimDataSourceBuilder UsePhysicalConnectionInitializer(Action`1<NpgsqlConnection> connectionInitializer, Func`2<NpgsqlConnection, Task> connectionInitializerAsync);
    public NpgsqlDataSource Build();
    public NpgsqlMultiHostDataSource BuildMultiHost();
    private NpgsqlDataSourceConfiguration PrepareConfiguration();
    private void ValidateMultiHost();
    private sealed virtual override INpgsqlTypeMapper Npgsql.TypeMapping.INpgsqlTypeMapper.ConfigureJsonOptions(JsonSerializerOptions serializerOptions);
    [RequiresUnreferencedCodeAttribute("Json serializer may perform reflection on trimmed types.")]
[RequiresDynamicCodeAttribute("Serializing arbitrary types to json can require creating new generic types or methods, which requires creating code at runtime. This may not work when AOT compiling.")]
private sealed virtual override INpgsqlTypeMapper Npgsql.TypeMapping.INpgsqlTypeMapper.EnableDynamicJson(Type[] jsonbClrTypes, Type[] jsonClrTypes);
    [RequiresUnreferencedCodeAttribute("The mapping of PostgreSQL records as .NET tuples requires reflection usage which is incompatible with trimming.")]
[RequiresDynamicCodeAttribute("The mapping of PostgreSQL records as .NET tuples requires dynamic code usage which is incompatible with NativeAOT.")]
private sealed virtual override INpgsqlTypeMapper Npgsql.TypeMapping.INpgsqlTypeMapper.EnableRecordsAsTuples();
    [RequiresUnreferencedCodeAttribute("The use of unmapped enums, ranges or multiranges requires reflection usage which is incompatible with trimming.")]
[RequiresDynamicCodeAttribute("The use of unmapped enums, ranges or multiranges requires dynamic code usage which is incompatible with NativeAOT.")]
private sealed virtual override INpgsqlTypeMapper Npgsql.TypeMapping.INpgsqlTypeMapper.EnableUnmappedTypes();
    [CompilerGeneratedAttribute]
private JsonTypeInfoResolverFactory <EnableJsonTypes>b__80_0();
    [CompilerGeneratedAttribute]
private List`1<HackyEnumTypeMapping> <PrepareConfiguration>g__HackyEnumMappings|87_0();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Npgsql.NpgsqlSqlEventSource : EventSource {
    public static NpgsqlSqlEventSource Log;
    private static string EventSourceName;
    private static int CommandStartId;
    private static int CommandStopId;
    private static NpgsqlSqlEventSource();
    [EventAttribute("3")]
public void CommandStart(string sql);
    [EventAttribute("4")]
public void CommandStop();
}
public class Npgsql.NpgsqlTracingOptions : object {
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Npgsql.NpgsqlTransaction : DbTransaction {
    private NpgsqlConnector _connector;
    internal bool IsDisposed;
    [NullableAttribute("2")]
private Exception _disposeReason;
    private IsolationLevel _isolationLevel;
    private ILogger _transactionLogger;
    private static IsolationLevel DefaultIsolationLevel;
    [NullableAttribute("2")]
public NpgsqlConnection Connection { get; }
    [NullableAttribute("2")]
protected DbConnection DbConnection { get; }
    internal bool IsCompleted { get; }
    public IsolationLevel IsolationLevel { get; }
    public bool SupportsSavepoints { get; }
    internal NpgsqlTransaction(NpgsqlConnector connector);
    [NullableContextAttribute("2")]
public NpgsqlConnection get_Connection();
    [NullableContextAttribute("2")]
protected virtual DbConnection get_DbConnection();
    internal bool get_IsCompleted();
    public virtual IsolationLevel get_IsolationLevel();
    internal void Init(IsolationLevel isolationLevel);
    public virtual void Commit();
    [AsyncStateMachineAttribute("Npgsql.NpgsqlTransaction/<Commit>d__17")]
private Task Commit(bool async, CancellationToken cancellationToken);
    public virtual Task CommitAsync(CancellationToken cancellationToken);
    public virtual void Rollback();
    [AsyncStateMachineAttribute("Npgsql.NpgsqlTransaction/<Rollback>d__20")]
private Task Rollback(bool async, CancellationToken cancellationToken);
    public virtual Task RollbackAsync(CancellationToken cancellationToken);
    public virtual void Save(string name);
    public virtual Task SaveAsync(string name, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Npgsql.NpgsqlTransaction/<Rollback>d__24")]
private Task Rollback(bool async, string name, CancellationToken cancellationToken);
    public virtual void Rollback(string name);
    public virtual Task RollbackAsync(string name, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Npgsql.NpgsqlTransaction/<Release>d__27")]
private Task Release(bool async, string name, CancellationToken cancellationToken);
    public virtual void Release(string name);
    public virtual Task ReleaseAsync(string name, CancellationToken cancellationToken);
    public virtual bool get_SupportsSavepoints();
    protected virtual void Dispose(bool disposing);
    public virtual ValueTask DisposeAsync();
    [NullableContextAttribute("2")]
internal void DisposeImmediately(Exception disposeReason);
    private void CheckReady();
    private void CheckDisposed();
    private static bool RequiresQuoting(string identifier);
    internal void UnbindIfNecessary();
    [AsyncStateMachineAttribute("Npgsql.NpgsqlTransaction/<<DisposeAsync>g__DisposeAsyncInternal|33_0>d")]
[CompilerGeneratedAttribute]
private ValueTask <DisposeAsync>g__DisposeAsyncInternal|33_0();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Npgsql.PgPassFile : object {
    [CompilerGeneratedAttribute]
private string <FileName>k__BackingField;
    internal string FileName { get; }
    internal IEnumerable`1<Entry> Entries { get; }
    public PgPassFile(string fileName);
    [CompilerGeneratedAttribute]
internal string get_FileName();
    [IteratorStateMachineAttribute("Npgsql.PgPassFile/<get_Entries>d__5")]
internal IEnumerable`1<Entry> get_Entries();
    [NullableContextAttribute("2")]
internal Entry GetFirstMatchingEntry(string host, Nullable`1<int> port, string database, string username);
}
internal enum Npgsql.PlaceholderType : Enum {
    public int value__;
    public static PlaceholderType NoParameters;
    public static PlaceholderType Named;
    public static PlaceholderType Positional;
    public static PlaceholderType Mixed;
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Npgsql.PoolingDataSource : NpgsqlDataSource {
    [CompilerGeneratedAttribute]
private int <MaxConnections>k__BackingField;
    [CompilerGeneratedAttribute]
private int <MinConnections>k__BackingField;
    private TimeSpan _connectionLifetime;
    private Int32 modreq(System.Runtime.CompilerServices.IsVolatile) _numConnectors;
    private Int32 modreq(System.Runtime.CompilerServices.IsVolatile) _idleCount;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private protected NpgsqlConnector[] Connectors;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private ChannelReader`1<NpgsqlConnector> _idleConnectorReader;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[CompilerGeneratedAttribute]
private ChannelWriter`1<NpgsqlConnector> <IdleConnectorWriter>k__BackingField;
    private ILogger _logger;
    private Int32 modreq(System.Runtime.CompilerServices.IsVolatile) _clearCounter;
    private static TimerCallback PruningTimerCallback;
    private Timer _pruningTimer;
    private TimeSpan _pruningSamplingInterval;
    private int _pruningSampleSize;
    private Int32[] _pruningSamples;
    private int _pruningMedianIndex;
    private Boolean modreq(System.Runtime.CompilerServices.IsVolatile) _pruningTimerEnabled;
    private int _pruningSampleIndex;
    private Int32 modreq(System.Runtime.CompilerServices.IsVolatile) _isClearing;
    [CompilerGeneratedAttribute]
private static SemaphoreSlim <SyncOverAsyncSemaphore>k__BackingField;
    internal int MaxConnections { get; }
    internal int MinConnections { get; }
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
internal ChannelWriter`1<NpgsqlConnector> IdleConnectorWriter { get; }
    [TupleElementNamesAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[NullableAttribute("0")]
internal ValueTuple`3<int, int, int> Statistics { get; }
    internal bool OwnsConnectors { get; }
    private static SemaphoreSlim SyncOverAsyncSemaphore { get; }
    internal PoolingDataSource(NpgsqlConnectionStringBuilder settings, NpgsqlDataSourceConfiguration dataSourceConfig);
    private static PoolingDataSource();
    [CompilerGeneratedAttribute]
internal int get_MaxConnections();
    [CompilerGeneratedAttribute]
internal int get_MinConnections();
    [CompilerGeneratedAttribute]
internal ChannelWriter`1<NpgsqlConnector> get_IdleConnectorWriter();
    [NullableContextAttribute("0")]
internal sealed virtual ValueTuple`3<int, int, int> get_Statistics();
    internal sealed virtual bool get_OwnsConnectors();
    [CompilerGeneratedAttribute]
private static SemaphoreSlim get_SyncOverAsyncSemaphore();
    internal sealed virtual ValueTask`1<NpgsqlConnector> Get(NpgsqlConnection conn, NpgsqlTimeout timeout, bool async, CancellationToken cancellationToken);
    [NullableContextAttribute("2")]
internal sealed virtual bool TryGetIdleConnector(NpgsqlConnector& connector);
    [NullableContextAttribute("2")]
private bool CheckIdleConnector(NpgsqlConnector connector);
    [AsyncStateMachineAttribute("Npgsql.PoolingDataSource/<OpenNewConnector>d__36")]
internal sealed virtual ValueTask`1<NpgsqlConnector> OpenNewConnector(NpgsqlConnection conn, NpgsqlTimeout timeout, bool async, CancellationToken cancellationToken);
    internal sealed virtual void Return(NpgsqlConnector connector);
    internal virtual void Clear();
    private void CloseConnector(NpgsqlConnector connector);
    private void UpdatePruningTimer();
    [NullableContextAttribute("2")]
private static void PruneIdleConnectors(object state);
    private static int DivideRoundingUp(int value, int divisor);
    [AsyncStateMachineAttribute("Npgsql.PoolingDataSource/<<Get>g__RentAsync|33_0>d")]
[CompilerGeneratedAttribute]
private ValueTask`1<NpgsqlConnector> <Get>g__RentAsync|33_0(NpgsqlConnection conn, NpgsqlTimeout timeout, bool async, CancellationToken cancellationToken);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal static class Npgsql.PoolManager : object {
    [CompilerGeneratedAttribute]
private static ConcurrentDictionary`2<string, NpgsqlDataSource> <Pools>k__BackingField;
    internal static ConcurrentDictionary`2<string, NpgsqlDataSource> Pools { get; }
    private static PoolManager();
    [CompilerGeneratedAttribute]
internal static ConcurrentDictionary`2<string, NpgsqlDataSource> get_Pools();
    internal static void Clear(string connString);
    internal static void ClearAll();
    internal static void Reset();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Npgsql.PostgresDatabaseInfo : NpgsqlDatabaseInfo {
    private ILogger _connectionLogger;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private List`1<PostgresType> _types;
    [CompilerGeneratedAttribute]
private string <LongVersion>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsRedshift>k__BackingField;
    public string LongVersion { get; public set; }
    public bool IsRedshift { get; private set; }
    public bool SupportsUnlisten { get; }
    public bool HasEnumSortOrder { get; }
    public bool HasTypeCategory { get; }
    internal PostgresDatabaseInfo(NpgsqlConnector conn);
    private protected PostgresDatabaseInfo(string host, int port, string databaseName, string serverVersion);
    protected virtual IEnumerable`1<PostgresType> GetTypes();
    [CompilerGeneratedAttribute]
public string get_LongVersion();
    [CompilerGeneratedAttribute]
public void set_LongVersion(string value);
    [CompilerGeneratedAttribute]
public bool get_IsRedshift();
    [CompilerGeneratedAttribute]
private void set_IsRedshift(bool value);
    public virtual bool get_SupportsUnlisten();
    public virtual bool get_HasEnumSortOrder();
    public virtual bool get_HasTypeCategory();
    [AsyncStateMachineAttribute("Npgsql.PostgresDatabaseInfo/<LoadPostgresInfo>d__19")]
internal Task LoadPostgresInfo(NpgsqlConnector conn, NpgsqlTimeout timeout, bool async);
    private static string GenerateLoadTypesQuery(bool withRange, bool withMultirange, bool loadTableComposites);
    private static string GenerateLoadCompositeTypesQuery(bool loadTableComposites);
    private static string GenerateLoadEnumFieldsQuery(bool withEnumSortOrder);
    [AsyncStateMachineAttribute("Npgsql.PostgresDatabaseInfo/<LoadBackendTypes>d__23")]
internal Task`1<List`1<PostgresType>> LoadBackendTypes(NpgsqlConnector conn, NpgsqlTimeout timeout, bool async);
    [CompilerGeneratedAttribute]
internal static string <LoadBackendTypes>g__SanitizeForReplicationConnection|23_0(string str);
    [CompilerGeneratedAttribute]
internal static string <LoadBackendTypes>g__ReadNonNullableString|23_1(NpgsqlReadBuffer buffer);
}
internal class Npgsql.PostgresDatabaseInfoFactory : object {
    [NullableContextAttribute("1")]
[AsyncStateMachineAttribute("Npgsql.PostgresDatabaseInfoFactory/<Load>d__0")]
public sealed virtual Task`1<NpgsqlDatabaseInfo> Load(NpgsqlConnector conn, NpgsqlTimeout timeout, bool async);
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
internal static class Npgsql.PostgresEnvironment : object {
    internal static string User { get; }
    internal static string Password { get; }
    internal static string PassFile { get; }
    internal static string PassFileDefault { get; }
    internal static string SslCert { get; }
    internal static string SslCertDefault { get; }
    internal static string SslKey { get; }
    internal static string SslKeyDefault { get; }
    internal static string SslCertRoot { get; }
    internal static string SslCertRootDefault { get; }
    internal static string ClientEncoding { get; }
    internal static string TimeZone { get; }
    internal static string Options { get; }
    internal static string TargetSessionAttributes { get; }
    internal static string get_User();
    internal static string get_Password();
    internal static string get_PassFile();
    internal static string get_PassFileDefault();
    internal static string get_SslCert();
    internal static string get_SslCertDefault();
    internal static string get_SslKey();
    internal static string get_SslKeyDefault();
    internal static string get_SslCertRoot();
    internal static string get_SslCertRootDefault();
    internal static string get_ClientEncoding();
    internal static string get_TimeZone();
    internal static string get_Options();
    internal static string get_TargetSessionAttributes();
    private static string GetHomeDir();
    private static string GetHomePostgresDir();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public static class Npgsql.PostgresErrorCodes : object {
    public static string SuccessfulCompletion;
    public static string Warning;
    public static string DynamicResultSetsReturnedWarning;
    public static string ImplicitZeroBitPaddingWarning;
    public static string NullValueEliminatedInSetFunctionWarning;
    public static string PrivilegeNotGrantedWarning;
    public static string PrivilegeNotRevokedWarning;
    public static string StringDataRightTruncationWarning;
    public static string DeprecatedFeatureWarning;
    public static string NoData;
    public static string NoAdditionalDynamicResultSetsReturned;
    public static string SqlStatementNotYetComplete;
    public static string ConnectionException;
    public static string ConnectionDoesNotExist;
    public static string ConnectionFailure;
    public static string SqlClientUnableToEstablishSqlConnection;
    public static string SqlServerRejectedEstablishmentOfSqlConnection;
    public static string TransactionResolutionUnknown;
    public static string ProtocolViolation;
    public static string TriggeredActionException;
    public static string FeatureNotSupported;
    public static string InvalidTransactionInitiation;
    public static string LocatorException;
    public static string InvalidLocatorSpecification;
    public static string InvalidGrantor;
    public static string InvalidGrantOperation;
    public static string InvalidRoleSpecification;
    public static string DiagnosticsException;
    public static string StackedDiagnosticsAccessedWithoutActiveHandler;
    public static string CaseNotFound;
    public static string CardinalityViolation;
    public static string DataException;
    public static string ArraySubscriptError;
    public static string CharacterNotInRepertoire;
    public static string DatetimeFieldOverflow;
    public static string DivisionByZero;
    public static string ErrorInAssignment;
    public static string EscapeCharacterConflict;
    public static string IndicatorOverflow;
    public static string IntervalFieldOverflow;
    public static string InvalidArgumentForLogarithm;
    public static string InvalidArgumentForNtileFunction;
    public static string InvalidArgumentForNthValueFunction;
    public static string InvalidArgumentForPowerFunction;
    public static string InvalidArgumentForWidthBucketFunction;
    public static string InvalidCharacterValueForCast;
    public static string InvalidDatetimeFormat;
    public static string InvalidEscapeCharacter;
    public static string InvalidEscapeOctet;
    public static string InvalidEscapeSequence;
    public static string NonstandardUseOfEscapeCharacter;
    public static string InvalidIndicatorParameterValue;
    public static string InvalidParameterValue;
    public static string InvalidRegularExpression;
    public static string InvalidRowCountInLimitClause;
    public static string InvalidRowCountInResultOffsetClause;
    public static string InvalidTablesampleArgument;
    public static string InvalidTablesampleRepeat;
    public static string InvalidTimeZoneDisplacementValue;
    public static string InvalidUseOfEscapeCharacter;
    public static string MostSpecificTypeMismatch;
    public static string NullValueNotAllowed;
    public static string NullValueNoIndicatorParameter;
    public static string NumericValueOutOfRange;
    public static string StringDataLengthMismatch;
    public static string StringDataRightTruncation;
    public static string SubstringError;
    public static string TrimError;
    public static string UnterminatedCString;
    public static string ZeroLengthCharacterString;
    public static string FloatingPointException;
    public static string InvalidTextRepresentation;
    public static string InvalidBinaryRepresentation;
    public static string BadCopyFileFormat;
    public static string UntranslatableCharacter;
    public static string NotAnXmlDocument;
    public static string InvalidXmlDocument;
    public static string InvalidXmlContent;
    public static string InvalidXmlComment;
    public static string InvalidXmlProcessingInstruction;
    public static string IntegrityConstraintViolation;
    public static string RestrictViolation;
    public static string NotNullViolation;
    public static string ForeignKeyViolation;
    public static string UniqueViolation;
    public static string CheckViolation;
    public static string ExclusionViolation;
    public static string InvalidCursorState;
    public static string InvalidTransactionState;
    public static string ActiveSqlTransaction;
    public static string BranchTransactionAlreadyActive;
    public static string HeldCursorRequiresSameIsolationLevel;
    public static string InappropriateAccessModeForBranchTransaction;
    public static string InappropriateIsolationLevelForBranchTransaction;
    public static string NoActiveSqlTransactionForBranchTransaction;
    public static string ReadOnlySqlTransaction;
    public static string SchemaAndDataStatementMixingNotSupported;
    public static string NoActiveSqlTransaction;
    public static string InFailedSqlTransaction;
    public static string InvalidSqlStatementName;
    public static string TriggeredDataChangeViolation;
    public static string InvalidAuthorizationSpecification;
    public static string InvalidPassword;
    public static string DependentPrivilegeDescriptorsStillExist;
    public static string DependentObjectsStillExist;
    public static string InvalidTransactionTermination;
    public static string SqlRoutineException;
    public static string FunctionExecutedNoReturnStatementSqlRoutineException;
    public static string ModifyingSqlDataNotPermittedSqlRoutineException;
    public static string ProhibitedSqlStatementAttemptedSqlRoutineException;
    public static string ReadingSqlDataNotPermittedSqlRoutineException;
    public static string InvalidCursorName;
    public static string ExternalRoutineException;
    public static string ContainingSqlNotPermittedExternalRoutineException;
    public static string ModifyingSqlDataNotPermittedExternalRoutineException;
    public static string ProhibitedSqlStatementAttemptedExternalRoutineException;
    public static string ReadingSqlDataNotPermittedExternalRoutineException;
    public static string ExternalRoutineInvocationException;
    public static string InvalidSqlstateReturnedExternalRoutineInvocationException;
    public static string NullValueNotAllowedExternalRoutineInvocationException;
    public static string TriggerProtocolViolatedExternalRoutineInvocationException;
    public static string SrfProtocolViolatedExternalRoutineInvocationException;
    public static string EventTriggerProtocolViolatedExternalRoutineInvocationException;
    public static string SavepointException;
    public static string InvalidSavepointSpecification;
    public static string InvalidCatalogName;
    public static string InvalidSchemaName;
    public static string TransactionRollback;
    public static string TransactionIntegrityConstraintViolation;
    public static string SerializationFailure;
    public static string StatementCompletionUnknown;
    public static string DeadlockDetected;
    public static string SyntaxErrorOrAccessRuleViolation;
    public static string SyntaxError;
    public static string InsufficientPrivilege;
    public static string CannotCoerce;
    public static string GroupingError;
    public static string WindowingError;
    public static string InvalidRecursion;
    public static string InvalidForeignKey;
    public static string InvalidName;
    public static string NameTooLong;
    public static string ReservedName;
    public static string DatatypeMismatch;
    public static string IndeterminateDatatype;
    public static string CollationMismatch;
    public static string IndeterminateCollation;
    public static string WrongObjectType;
    public static string UndefinedColumn;
    public static string UndefinedFunction;
    public static string UndefinedTable;
    public static string UndefinedParameter;
    public static string UndefinedObject;
    public static string DuplicateColumn;
    public static string DuplicateCursor;
    public static string DuplicateDatabase;
    public static string DuplicateFunction;
    public static string DuplicatePreparedStatement;
    public static string DuplicateSchema;
    public static string DuplicateTable;
    public static string DuplicateAlias;
    public static string DuplicateObject;
    public static string AmbiguousColumn;
    public static string AmbiguousFunction;
    public static string AmbiguousParameter;
    public static string AmbiguousAlias;
    public static string InvalidColumnReference;
    public static string InvalidColumnDefinition;
    public static string InvalidCursorDefinition;
    public static string InvalidDatabaseDefinition;
    public static string InvalidFunctionDefinition;
    public static string InvalidPreparedStatementDefinition;
    public static string InvalidSchemaDefinition;
    public static string InvalidTableDefinition;
    public static string InvalidObjectDefinition;
    public static string WithCheckOptionViolation;
    public static string InsufficientResources;
    public static string DiskFull;
    public static string OutOfMemory;
    public static string TooManyConnections;
    public static string ConfigurationLimitExceeded;
    public static string ProgramLimitExceeded;
    public static string StatementTooComplex;
    public static string TooManyColumns;
    public static string TooManyArguments;
    public static string ObjectNotInPrerequisiteState;
    public static string ObjectInUse;
    public static string CantChangeRuntimeParam;
    public static string LockNotAvailable;
    public static string OperatorIntervention;
    public static string QueryCanceled;
    public static string AdminShutdown;
    public static string CrashShutdown;
    public static string CannotConnectNow;
    public static string DatabaseDropped;
    public static string IdleSessionTimeout;
    public static string SystemError;
    public static string IoError;
    public static string UndefinedFile;
    public static string DuplicateFile;
    public static string SnapshotFailure;
    public static string ConfigFileError;
    public static string LockFileExists;
    public static string FdwError;
    public static string FdwColumnNameNotFound;
    public static string FdwDynamicParameterValueNeeded;
    public static string FdwFunctionSequenceError;
    public static string FdwInconsistentDescriptorInformation;
    public static string FdwInvalidAttributeValue;
    public static string FdwInvalidColumnName;
    public static string FdwInvalidColumnNumber;
    public static string FdwInvalidDataType;
    public static string FdwInvalidDataTypeDescriptors;
    public static string FdwInvalidDescriptorFieldIdentifier;
    public static string FdwInvalidHandle;
    public static string FdwInvalidOptionIndex;
    public static string FdwInvalidOptionName;
    public static string FdwInvalidStringLengthOrBufferLength;
    public static string FdwInvalidStringFormat;
    public static string FdwInvalidUseOfNullPointer;
    public static string FdwTooManyHandles;
    public static string FdwOutOfMemory;
    public static string FdwNoSchemas;
    public static string FdwOptionNameNotFound;
    public static string FdwReplyHandle;
    public static string FdwSchemaNotFound;
    public static string FdwTableNotFound;
    public static string FdwUnableToCreateExecution;
    public static string FdwUnableToCreateReply;
    public static string FdwUnableToEstablishConnection;
    public static string PlpgsqlError;
    public static string RaiseException;
    public static string NoDataFound;
    public static string TooManyRows;
    public static string AssertFailure;
    public static string InternalError;
    public static string DataCorrupted;
    public static string IndexCorrupted;
    private static String[] CriticalFailureCodes;
    private static PostgresErrorCodes();
    internal static bool IsCriticalFailure(PostgresException e, bool clusterError);
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
public class Npgsql.PostgresException : NpgsqlException {
    [NullableAttribute("1")]
[CompilerGeneratedAttribute]
private string <Severity>k__BackingField;
    [NullableAttribute("1")]
[CompilerGeneratedAttribute]
private string <InvariantSeverity>k__BackingField;
    [NullableAttribute("1")]
[CompilerGeneratedAttribute]
private string <SqlState>k__BackingField;
    [NullableAttribute("1")]
[CompilerGeneratedAttribute]
private string <MessageText>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Detail>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Hint>k__BackingField;
    [CompilerGeneratedAttribute]
private int <Position>k__BackingField;
    [CompilerGeneratedAttribute]
private int <InternalPosition>k__BackingField;
    [CompilerGeneratedAttribute]
private string <InternalQuery>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Where>k__BackingField;
    [CompilerGeneratedAttribute]
private string <SchemaName>k__BackingField;
    [CompilerGeneratedAttribute]
private string <TableName>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ColumnName>k__BackingField;
    [CompilerGeneratedAttribute]
private string <DataTypeName>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ConstraintName>k__BackingField;
    [CompilerGeneratedAttribute]
private string <File>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Line>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Routine>k__BackingField;
    public bool IsTransient { get; }
    [NullableAttribute("1")]
public string Severity { get; }
    [NullableAttribute("1")]
public string InvariantSeverity { get; }
    [NullableAttribute("1")]
public string SqlState { get; }
    [NullableAttribute("1")]
public string MessageText { get; }
    public string Detail { get; }
    public string Hint { get; }
    public int Position { get; }
    public int InternalPosition { get; }
    public string InternalQuery { get; }
    public string Where { get; }
    public string SchemaName { get; }
    public string TableName { get; }
    public string ColumnName { get; }
    public string DataTypeName { get; }
    public string ConstraintName { get; }
    public string File { get; }
    public string Line { get; }
    public string Routine { get; }
    [NullableContextAttribute("1")]
public PostgresException(string messageText, string severity, string invariantSeverity, string sqlState);
    public PostgresException(string messageText, string severity, string invariantSeverity, string sqlState, string detail, string hint, int position, int internalPosition, string internalQuery, string where, string schemaName, string tableName, string columnName, string dataTypeName, string constraintName, string file, string line, string routine);
    [NullableContextAttribute("1")]
private PostgresException(ErrorOrNoticeMessage msg);
    [NullableContextAttribute("1")]
[ObsoleteAttribute("This API supports obsolete formatter-based serialization. It should not be called or extended by application code.")]
internal PostgresException(SerializationInfo info, StreamingContext context);
    [NullableContextAttribute("1")]
private static string GetMessage(string sqlState, string messageText, int position, string detail);
    [NullableContextAttribute("1")]
private static string TryAddString(string text, string value);
    [NullableContextAttribute("1")]
internal static PostgresException Load(NpgsqlReadBuffer buf, bool includeDetail, ILogger exceptionLogger);
    [NullableContextAttribute("1")]
[ObsoleteAttribute("This API supports obsolete formatter-based serialization. It should not be called or extended by application code.")]
public virtual void GetObjectData(SerializationInfo info, StreamingContext context);
    [NullableContextAttribute("1")]
public virtual string ToString();
    public virtual bool get_IsTransient();
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
public string get_Severity();
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
public string get_InvariantSeverity();
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
public virtual string get_SqlState();
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
public string get_MessageText();
    [CompilerGeneratedAttribute]
public string get_Detail();
    [CompilerGeneratedAttribute]
public string get_Hint();
    [CompilerGeneratedAttribute]
public int get_Position();
    [CompilerGeneratedAttribute]
public int get_InternalPosition();
    [CompilerGeneratedAttribute]
public string get_InternalQuery();
    [CompilerGeneratedAttribute]
public string get_Where();
    [CompilerGeneratedAttribute]
public string get_SchemaName();
    [CompilerGeneratedAttribute]
public string get_TableName();
    [CompilerGeneratedAttribute]
public string get_ColumnName();
    [CompilerGeneratedAttribute]
public string get_DataTypeName();
    [CompilerGeneratedAttribute]
public string get_ConstraintName();
    [CompilerGeneratedAttribute]
public string get_File();
    [CompilerGeneratedAttribute]
public string get_Line();
    [CompilerGeneratedAttribute]
public string get_Routine();
    [NullableContextAttribute("0")]
[CompilerGeneratedAttribute]
private void <.ctor>g__AddData|1_0(string key, T value);
    [NullableContextAttribute("0")]
[CompilerGeneratedAttribute]
internal static T <.ctor>g__GetValue|6_0(string propertyName, <>c__DisplayClass6_0& );
    [NullableContextAttribute("0")]
[CompilerGeneratedAttribute]
internal static void <ToString>g__AppendLine|8_0(string propertyName, T propertyValue, <>c__DisplayClass8_0& );
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Npgsql.PostgresMinimalDatabaseInfo : PostgresDatabaseInfo {
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private static PostgresType[] _typesWithMultiranges;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private static PostgresType[] _typesWithoutMultiranges;
    [NullableAttribute("2")]
private static PostgresMinimalDatabaseInfo _defaultTypeCatalog;
    internal static PostgresMinimalDatabaseInfo DefaultTypeCatalog { get; }
    internal PostgresMinimalDatabaseInfo(NpgsqlConnector conn);
    private static PostgresType[] CreateTypes(bool withMultiranges);
    protected virtual IEnumerable`1<PostgresType> GetTypes();
    internal static PostgresMinimalDatabaseInfo get_DefaultTypeCatalog();
    [CompilerGeneratedAttribute]
internal static void <CreateTypes>g__Add|2_0(DataTypeName name, UInt32 oid, UInt32 arrayOid, <>c__DisplayClass2_0& );
    [CompilerGeneratedAttribute]
internal static void <CreateTypes>g__AddWithRange|2_1(DataTypeName name, UInt32 oid, UInt32 arrayOid, DataTypeName rangeName, UInt32 rangeOid, UInt32 rangeArrayOid, UInt32 multirangeOid, UInt32 multirangeArrayOid, <>c__DisplayClass2_0& );
}
internal class Npgsql.PostgresMinimalDatabaseInfoFactory : object {
    [NullableContextAttribute("1")]
public sealed virtual Task`1<NpgsqlDatabaseInfo> Load(NpgsqlConnector conn, NpgsqlTimeout timeout, bool async);
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
public class Npgsql.PostgresNotice : object {
    [NullableAttribute("1")]
[CompilerGeneratedAttribute]
private string <Severity>k__BackingField;
    [NullableAttribute("1")]
[CompilerGeneratedAttribute]
private string <InvariantSeverity>k__BackingField;
    [NullableAttribute("1")]
[CompilerGeneratedAttribute]
private string <SqlState>k__BackingField;
    [NullableAttribute("1")]
[CompilerGeneratedAttribute]
private string <MessageText>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Detail>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Hint>k__BackingField;
    [CompilerGeneratedAttribute]
private int <Position>k__BackingField;
    [CompilerGeneratedAttribute]
private int <InternalPosition>k__BackingField;
    [CompilerGeneratedAttribute]
private string <InternalQuery>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Where>k__BackingField;
    [CompilerGeneratedAttribute]
private string <SchemaName>k__BackingField;
    [CompilerGeneratedAttribute]
private string <TableName>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ColumnName>k__BackingField;
    [CompilerGeneratedAttribute]
private string <DataTypeName>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ConstraintName>k__BackingField;
    [CompilerGeneratedAttribute]
private string <File>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Line>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Routine>k__BackingField;
    [NullableAttribute("1")]
public string Severity { get; public set; }
    [NullableAttribute("1")]
public string InvariantSeverity { get; }
    [NullableAttribute("1")]
public string SqlState { get; public set; }
    [NullableAttribute("1")]
public string MessageText { get; public set; }
    public string Detail { get; public set; }
    public string Hint { get; public set; }
    public int Position { get; public set; }
    public int InternalPosition { get; public set; }
    public string InternalQuery { get; public set; }
    public string Where { get; public set; }
    public string SchemaName { get; public set; }
    public string TableName { get; public set; }
    public string ColumnName { get; public set; }
    public string DataTypeName { get; public set; }
    public string ConstraintName { get; public set; }
    public string File { get; public set; }
    public string Line { get; public set; }
    public string Routine { get; public set; }
    [NullableContextAttribute("1")]
public PostgresNotice(string severity, string invariantSeverity, string sqlState, string messageText);
    public PostgresNotice(string messageText, string severity, string invariantSeverity, string sqlState, string detail, string hint, int position, int internalPosition, string internalQuery, string where, string schemaName, string tableName, string columnName, string dataTypeName, string constraintName, string file, string line, string routine);
    [NullableContextAttribute("1")]
private PostgresNotice(ErrorOrNoticeMessage msg);
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
public string get_Severity();
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
public void set_Severity(string value);
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
public string get_InvariantSeverity();
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
public string get_SqlState();
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
public void set_SqlState(string value);
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
public string get_MessageText();
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
public void set_MessageText(string value);
    [CompilerGeneratedAttribute]
public string get_Detail();
    [CompilerGeneratedAttribute]
public void set_Detail(string value);
    [CompilerGeneratedAttribute]
public string get_Hint();
    [CompilerGeneratedAttribute]
public void set_Hint(string value);
    [CompilerGeneratedAttribute]
public int get_Position();
    [CompilerGeneratedAttribute]
public void set_Position(int value);
    [CompilerGeneratedAttribute]
public int get_InternalPosition();
    [CompilerGeneratedAttribute]
public void set_InternalPosition(int value);
    [CompilerGeneratedAttribute]
public string get_InternalQuery();
    [CompilerGeneratedAttribute]
public void set_InternalQuery(string value);
    [CompilerGeneratedAttribute]
public string get_Where();
    [CompilerGeneratedAttribute]
public void set_Where(string value);
    [CompilerGeneratedAttribute]
public string get_SchemaName();
    [CompilerGeneratedAttribute]
public void set_SchemaName(string value);
    [CompilerGeneratedAttribute]
public string get_TableName();
    [CompilerGeneratedAttribute]
public void set_TableName(string value);
    [CompilerGeneratedAttribute]
public string get_ColumnName();
    [CompilerGeneratedAttribute]
public void set_ColumnName(string value);
    [CompilerGeneratedAttribute]
public string get_DataTypeName();
    [CompilerGeneratedAttribute]
public void set_DataTypeName(string value);
    [CompilerGeneratedAttribute]
public string get_ConstraintName();
    [CompilerGeneratedAttribute]
public void set_ConstraintName(string value);
    [CompilerGeneratedAttribute]
public string get_File();
    [CompilerGeneratedAttribute]
public void set_File(string value);
    [CompilerGeneratedAttribute]
public string get_Line();
    [CompilerGeneratedAttribute]
public void set_Line(string value);
    [CompilerGeneratedAttribute]
public string get_Routine();
    [CompilerGeneratedAttribute]
public void set_Routine(string value);
    [NullableContextAttribute("1")]
internal static PostgresNotice Load(NpgsqlReadBuffer buf, bool includeDetail, ILogger exceptionLogger);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Npgsql.PostgresTypes.PostgresArrayType : PostgresType {
    [CompilerGeneratedAttribute]
private PostgresType <Element>k__BackingField;
    public PostgresType Element { get; }
    protected internal PostgresArrayType(string ns, string name, UInt32 oid, PostgresType elementPostgresType);
    internal PostgresArrayType(DataTypeName dataTypeName, Oid oid, PostgresType elementPostgresType);
    [CompilerGeneratedAttribute]
public PostgresType get_Element();
    internal virtual string GetPartialNameWithFacets(int typeModifier);
    internal virtual PostgresFacets GetFacets(int typeModifier);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Npgsql.PostgresTypes.PostgresBaseType : PostgresType {
    protected internal PostgresBaseType(string ns, string name, UInt32 oid);
    internal PostgresBaseType(DataTypeName dataTypeName, Oid oid);
    internal virtual string GetPartialNameWithFacets(int typeModifier);
    internal virtual PostgresFacets GetFacets(int typeModifier);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Npgsql.PostgresTypes.PostgresCompositeType : PostgresType {
    [CompilerGeneratedAttribute]
private List`1<Field> <MutableFields>k__BackingField;
    public IReadOnlyList`1<Field> Fields { get; }
    internal List`1<Field> MutableFields { get; }
    internal PostgresCompositeType(string ns, string name, UInt32 oid);
    internal PostgresCompositeType(DataTypeName dataTypeName, Oid oid);
    public IReadOnlyList`1<Field> get_Fields();
    [CompilerGeneratedAttribute]
internal List`1<Field> get_MutableFields();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Npgsql.PostgresTypes.PostgresDomainType : PostgresType {
    [CompilerGeneratedAttribute]
private PostgresType <BaseType>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <NotNull>k__BackingField;
    public PostgresType BaseType { get; }
    public bool NotNull { get; }
    protected internal PostgresDomainType(string ns, string name, UInt32 oid, PostgresType baseType, bool notNull);
    internal PostgresDomainType(DataTypeName dataTypeName, Oid oid, PostgresType baseType, bool notNull);
    [CompilerGeneratedAttribute]
public PostgresType get_BaseType();
    [CompilerGeneratedAttribute]
public bool get_NotNull();
    internal virtual PostgresFacets GetFacets(int typeModifier);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Npgsql.PostgresTypes.PostgresEnumType : PostgresType {
    [CompilerGeneratedAttribute]
private List`1<string> <MutableLabels>k__BackingField;
    public IReadOnlyList`1<string> Labels { get; }
    internal List`1<string> MutableLabels { get; }
    protected internal PostgresEnumType(string ns, string name, UInt32 oid);
    internal PostgresEnumType(DataTypeName dataTypeName, Oid oid);
    public IReadOnlyList`1<string> get_Labels();
    [CompilerGeneratedAttribute]
internal List`1<string> get_MutableLabels();
}
[IsReadOnlyAttribute]
internal class Npgsql.PostgresTypes.PostgresFacets : ValueType {
    internal static PostgresFacets None;
    public Nullable`1<int> Size;
    public Nullable`1<int> Precision;
    public Nullable`1<int> Scale;
    internal PostgresFacets(Nullable`1<int> size, Nullable`1<int> precision, Nullable`1<int> scale);
    private static PostgresFacets();
    [NullableContextAttribute("2")]
public virtual bool Equals(object o);
    public sealed virtual bool Equals(PostgresFacets o);
    public static bool op_Equality(PostgresFacets x, PostgresFacets y);
    public static bool op_Inequality(PostgresFacets x, PostgresFacets y);
    public virtual int GetHashCode();
    [NullableContextAttribute("1")]
public virtual string ToString();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Npgsql.PostgresTypes.PostgresMultirangeType : PostgresType {
    [CompilerGeneratedAttribute]
private PostgresRangeType <Subrange>k__BackingField;
    public PostgresRangeType Subrange { get; }
    protected internal PostgresMultirangeType(string ns, string name, UInt32 oid, PostgresRangeType rangePostgresType);
    internal PostgresMultirangeType(DataTypeName dataTypeName, Oid oid, PostgresRangeType rangePostgresType);
    [CompilerGeneratedAttribute]
public PostgresRangeType get_Subrange();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Npgsql.PostgresTypes.PostgresRangeType : PostgresType {
    [CompilerGeneratedAttribute]
private PostgresType <Subtype>k__BackingField;
    [NullableAttribute("2")]
[CompilerGeneratedAttribute]
private PostgresMultirangeType <Multirange>k__BackingField;
    public PostgresType Subtype { get; }
    [NullableAttribute("2")]
public PostgresMultirangeType Multirange { get; internal set; }
    protected internal PostgresRangeType(string ns, string name, UInt32 oid, PostgresType subtypePostgresType);
    internal PostgresRangeType(DataTypeName dataTypeName, Oid oid, PostgresType subtypePostgresType);
    [CompilerGeneratedAttribute]
public PostgresType get_Subtype();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public PostgresMultirangeType get_Multirange();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
internal void set_Multirange(PostgresMultirangeType value);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public abstract class Npgsql.PostgresTypes.PostgresType : object {
    [CompilerGeneratedAttribute]
private UInt32 <OID>k__BackingField;
    [CompilerGeneratedAttribute]
private string <FullName>k__BackingField;
    [CompilerGeneratedAttribute]
private DataTypeName <DataTypeName>k__BackingField;
    [NullableAttribute("2")]
[CompilerGeneratedAttribute]
private PostgresArrayType <Array>k__BackingField;
    [NullableAttribute("2")]
[CompilerGeneratedAttribute]
private PostgresRangeType <Range>k__BackingField;
    [NullableAttribute("2")]
private PostgresType _representationalType;
    public UInt32 OID { get; }
    public string Namespace { get; }
    public string Name { get; }
    public string FullName { get; }
    internal DataTypeName DataTypeName { get; }
    public string DisplayName { get; }
    public string InternalName { get; }
    [NullableAttribute("2")]
public PostgresArrayType Array { get; internal set; }
    [NullableAttribute("2")]
public PostgresRangeType Range { get; internal set; }
    private protected PostgresType(string ns, string name, UInt32 oid);
    private protected PostgresType(DataTypeName dataTypeName, Oid oid);
    [CompilerGeneratedAttribute]
public UInt32 get_OID();
    public string get_Namespace();
    public string get_Name();
    [CompilerGeneratedAttribute]
public string get_FullName();
    [CompilerGeneratedAttribute]
internal DataTypeName get_DataTypeName();
    public string get_DisplayName();
    public string get_InternalName();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public PostgresArrayType get_Array();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
internal void set_Array(PostgresArrayType value);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public PostgresRangeType get_Range();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
internal void set_Range(PostgresRangeType value);
    internal virtual string GetPartialNameWithFacets(int typeModifier);
    internal string GetDisplayNameWithFacets(int typeModifier);
    internal virtual PostgresFacets GetFacets(int typeModifier);
    public virtual string ToString();
    internal PostgresType GetRepresentationalType();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
internal static PostgresType <GetRepresentationalType>g__Core|32_0(PostgresType postgresType);
}
internal enum Npgsql.PostgresTypes.PostgresTypeKind : Enum {
    public int value__;
    public static PostgresTypeKind Base;
    public static PostgresTypeKind Enum;
    public static PostgresTypeKind Pseudo;
    public static PostgresTypeKind Array;
    public static PostgresTypeKind Range;
    public static PostgresTypeKind Multirange;
    public static PostgresTypeKind Domain;
    public static PostgresTypeKind Composite;
}
public class Npgsql.PostgresTypes.UnknownBackendType : PostgresType {
    [NullableAttribute("1")]
internal static PostgresType Instance;
    private static UnknownBackendType();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal static class Npgsql.PregeneratedMessages : object {
    internal static Byte[] BeginTransRepeatableRead;
    internal static Byte[] BeginTransSerializable;
    internal static Byte[] BeginTransReadCommitted;
    internal static Byte[] BeginTransReadUncommitted;
    internal static Byte[] CommitTransaction;
    internal static Byte[] RollbackTransaction;
    internal static Byte[] DiscardAll;
    private static PregeneratedMessages();
    internal static Byte[] Generate(NpgsqlWriteBuffer buf, string query);
}
internal enum Npgsql.PreparedState : Enum {
    public int value__;
    public static PreparedState NotPrepared;
    public static PreparedState BeingPrepared;
    public static PreparedState Prepared;
    public static PreparedState BeingUnprepared;
    public static PreparedState Unprepared;
    public static PreparedState Invalidated;
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[DebuggerDisplayAttribute("{Name} ({State}): {Sql}")]
internal class Npgsql.PreparedStatement : object {
    private PreparedStatementManager _manager;
    [CompilerGeneratedAttribute]
private string <Sql>k__BackingField;
    [NullableAttribute("2")]
internal Byte[] Name;
    [NullableAttribute("2")]
internal RowDescriptionMessage Description;
    internal int Usages;
    [CompilerGeneratedAttribute]
private PreparedState <State>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsExplicit>k__BackingField;
    [NullableAttribute("2")]
internal PreparedStatement StatementBeingReplaced;
    [CompilerGeneratedAttribute]
private int <AutoPreparedSlotIndex>k__BackingField;
    [CompilerGeneratedAttribute]
private long <LastUsed>k__BackingField;
    [NullableAttribute("2")]
[CompilerGeneratedAttribute]
private PgTypeId[] <ConverterParamTypes>k__BackingField;
    internal string Sql { get; }
    internal PreparedState State { get; internal set; }
    internal bool IsPrepared { get; }
    internal bool IsExplicit { get; }
    internal int AutoPreparedSlotIndex { get; internal set; }
    internal long LastUsed { get; internal set; }
    [NullableAttribute("2")]
private PgTypeId[] ConverterParamTypes { get; private set; }
    internal PreparedStatement(PreparedStatementManager manager, string sql, bool isExplicit);
    [CompilerGeneratedAttribute]
internal string get_Sql();
    [CompilerGeneratedAttribute]
internal PreparedState get_State();
    [CompilerGeneratedAttribute]
internal void set_State(PreparedState value);
    internal bool get_IsPrepared();
    [CompilerGeneratedAttribute]
internal bool get_IsExplicit();
    [CompilerGeneratedAttribute]
internal int get_AutoPreparedSlotIndex();
    [CompilerGeneratedAttribute]
internal void set_AutoPreparedSlotIndex(int value);
    [CompilerGeneratedAttribute]
internal long get_LastUsed();
    [CompilerGeneratedAttribute]
internal void set_LastUsed(long value);
    internal void RefreshLastUsed();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
private PgTypeId[] get_ConverterParamTypes();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
private void set_ConverterParamTypes(PgTypeId[] value);
    internal static PreparedStatement CreateExplicit(PreparedStatementManager manager, string sql, string name, List`1<NpgsqlParameter> parameters, PreparedStatement statementBeingReplaced);
    internal static PreparedStatement CreateAutoPrepareCandidate(PreparedStatementManager manager, string sql);
    internal void SetParamTypes(List`1<NpgsqlParameter> parameters);
    internal bool DoParametersMatch(List`1<NpgsqlParameter> parameters);
    internal void AbortPrepare();
    internal void CompleteUnprepare();
    public virtual string ToString();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Npgsql.PreparedStatementManager : object {
    [CompilerGeneratedAttribute]
private int <MaxAutoPrepared>k__BackingField;
    [CompilerGeneratedAttribute]
private int <UsagesBeforePrepare>k__BackingField;
    [CompilerGeneratedAttribute]
private Dictionary`2<string, PreparedStatement> <BySql>k__BackingField;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[CompilerGeneratedAttribute]
private PreparedStatement[] <AutoPrepared>k__BackingField;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private PreparedStatement[] _candidates;
    private static List`1<NpgsqlParameter> EmptyParameters;
    internal int NumPrepared;
    private NpgsqlConnector _connector;
    private ulong _preparedStatementIndex;
    private ILogger _commandLogger;
    internal static int CandidateCount;
    internal int MaxAutoPrepared { get; }
    internal int UsagesBeforePrepare { get; }
    internal Dictionary`2<string, PreparedStatement> BySql { get; }
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
internal PreparedStatement[] AutoPrepared { get; }
    internal PreparedStatementManager(NpgsqlConnector connector);
    private static PreparedStatementManager();
    [CompilerGeneratedAttribute]
internal int get_MaxAutoPrepared();
    [CompilerGeneratedAttribute]
internal int get_UsagesBeforePrepare();
    [CompilerGeneratedAttribute]
internal Dictionary`2<string, PreparedStatement> get_BySql();
    [CompilerGeneratedAttribute]
internal PreparedStatement[] get_AutoPrepared();
    internal string NextPreparedStatementName();
    internal PreparedStatement GetOrAddExplicit(NpgsqlBatchCommand batchCommand);
    internal PreparedStatement TryGetAutoPrepared(NpgsqlBatchCommand batchCommand);
    private void RemoveCandidate(PreparedStatement candidate);
    internal void ClearAll();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Npgsql.PreparedTextReader : TextReader {
    private string _str;
    private ColumnStream _stream;
    private int _position;
    private bool _disposed;
    public bool IsDisposed { get; }
    public void Init(string str, ColumnStream stream);
    public bool get_IsDisposed();
    public virtual int Peek();
    public virtual int Read();
    [NullableContextAttribute("0")]
public virtual int Read(Span`1<char> buffer);
    public virtual int Read(Char[] buffer, int index, int count);
    public virtual Task`1<int> ReadAsync(Char[] buffer, int index, int count);
    [NullableContextAttribute("0")]
public virtual ValueTask`1<int> ReadAsync(Memory`1<char> buffer, CancellationToken cancellationToken);
    public virtual Task`1<string> ReadLineAsync();
    public virtual string ReadToEnd();
    public virtual Task`1<string> ReadToEndAsync();
    private void CheckDisposed();
    public void Restart();
    protected virtual void Dispose(bool disposing);
}
[GeneratedCodeAttribute("System.Resources.Tools.StronglyTypedResourceBuilder", "4.0.0.0")]
[DebuggerNonUserCodeAttribute]
[CompilerGeneratedAttribute]
internal class Npgsql.Properties.NpgsqlStrings : object {
    private static ResourceManager resourceMan;
    private static CultureInfo resourceCulture;
    [EditorBrowsableAttribute("2")]
internal static ResourceManager ResourceManager { get; }
    [EditorBrowsableAttribute("2")]
internal static CultureInfo Culture { get; internal set; }
    internal static string CannotUseSslVerifyWithUserCallback { get; }
    internal static string CannotUseSslRootCertificateWithUserCallback { get; }
    internal static string TransportSecurityDisabled { get; }
    internal static string IntegratedSecurityDisabled { get; }
    internal static string NoMultirangeTypeFound { get; }
    internal static string NotSupportedOnDataSourceCommand { get; }
    internal static string NotSupportedOnDataSourceBatch { get; }
    internal static string CannotSetBothPasswordProviderAndPassword { get; }
    internal static string CannotSetMultiplePasswordProviderKinds { get; }
    internal static string SyncAndAsyncPasswordProvidersRequired { get; }
    internal static string PasswordProviderMissing { get; }
    internal static string ArgumentMustBePositive { get; }
    internal static string CannotSpecifyTargetSessionAttributes { get; }
    internal static string CannotReadIntervalWithMonthsAsTimeSpan { get; }
    internal static string PositionalParameterAfterNamed { get; }
    internal static string CannotReadInfinityValue { get; }
    internal static string SyncAndAsyncConnectionInitializersRequired { get; }
    internal static string CannotUseValidationRootCertificateCallbackWithUserCallback { get; }
    internal static string RecordsNotEnabled { get; }
    internal static string FullTextSearchNotEnabled { get; }
    internal static string LTreeNotEnabled { get; }
    internal static string RangesNotEnabled { get; }
    internal static string MultirangesNotEnabled { get; }
    internal static string ArraysNotEnabled { get; }
    internal static string TimestampTzNoDateTimeUnspecified { get; }
    internal static string TimestampNoDateTimeUtc { get; }
    internal static string DynamicJsonNotEnabled { get; }
    internal static string UnmappedEnumsNotEnabled { get; }
    internal static string UnmappedRangesNotEnabled { get; }
    internal static ResourceManager get_ResourceManager();
    internal static CultureInfo get_Culture();
    internal static void set_Culture(CultureInfo value);
    internal static string get_CannotUseSslVerifyWithUserCallback();
    internal static string get_CannotUseSslRootCertificateWithUserCallback();
    internal static string get_TransportSecurityDisabled();
    internal static string get_IntegratedSecurityDisabled();
    internal static string get_NoMultirangeTypeFound();
    internal static string get_NotSupportedOnDataSourceCommand();
    internal static string get_NotSupportedOnDataSourceBatch();
    internal static string get_CannotSetBothPasswordProviderAndPassword();
    internal static string get_CannotSetMultiplePasswordProviderKinds();
    internal static string get_SyncAndAsyncPasswordProvidersRequired();
    internal static string get_PasswordProviderMissing();
    internal static string get_ArgumentMustBePositive();
    internal static string get_CannotSpecifyTargetSessionAttributes();
    internal static string get_CannotReadIntervalWithMonthsAsTimeSpan();
    internal static string get_PositionalParameterAfterNamed();
    internal static string get_CannotReadInfinityValue();
    internal static string get_SyncAndAsyncConnectionInitializersRequired();
    internal static string get_CannotUseValidationRootCertificateCallbackWithUserCallback();
    internal static string get_RecordsNotEnabled();
    internal static string get_FullTextSearchNotEnabled();
    internal static string get_LTreeNotEnabled();
    internal static string get_RangesNotEnabled();
    internal static string get_MultirangesNotEnabled();
    internal static string get_ArraysNotEnabled();
    internal static string get_TimestampTzNoDateTimeUnspecified();
    internal static string get_TimestampNoDateTimeUtc();
    internal static string get_DynamicJsonNotEnabled();
    internal static string get_UnmappedEnumsNotEnabled();
    internal static string get_UnmappedRangesNotEnabled();
}
public class Npgsql.ProvideClientCertificatesCallback : MulticastDelegate {
    public ProvideClientCertificatesCallback(object object, IntPtr method);
    [NullableContextAttribute("1")]
public virtual void Invoke(X509CertificateCollection certificates);
    public virtual IAsyncResult BeginInvoke(X509CertificateCollection certificates, AsyncCallback callback, object object);
    public virtual void EndInvoke(IAsyncResult result);
}
[ObsoleteAttribute("Use NpgsqlDataSourceBuilder.UsePeriodicPasswordProvider or inject passwords directly into NpgsqlDataSource.Password")]
public class Npgsql.ProvidePasswordCallback : MulticastDelegate {
    public ProvidePasswordCallback(object object, IntPtr method);
    [NullableContextAttribute("1")]
public virtual string Invoke(string host, int port, string database, string username);
    public virtual IAsyncResult BeginInvoke(string host, int port, string database, string username, AsyncCallback callback, object object);
    public virtual string EndInvoke(IAsyncResult result);
}
internal enum Npgsql.ReaderState : Enum {
    public int value__;
    public static ReaderState BeforeResult;
    public static ReaderState InResult;
    public static ReaderState BetweenResults;
    public static ReaderState Consumed;
    public static ReaderState Closed;
    public static ReaderState Disposed;
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ExtensionAttribute]
public static class Npgsql.Replication.Internal.LogicalReplicationConnectionExtensions : object {
    [ExtensionAttribute]
public static Task`1<ReplicationSlotOptions> CreateLogicalReplicationSlot(LogicalReplicationConnection connection, string slotName, string outputPlugin, bool isTemporary, Nullable`1<LogicalSlotSnapshotInitMode> slotSnapshotInitMode, bool twoPhase, CancellationToken cancellationToken);
    [ExtensionAttribute]
public static IAsyncEnumerable`1<XLogDataMessage> StartLogicalReplication(LogicalReplicationConnection connection, LogicalReplicationSlot slot, CancellationToken cancellationToken, Nullable`1<NpgsqlLogSequenceNumber> walLocation, IEnumerable`1<KeyValuePair`2<string, string>> options, bool bypassingStream);
    [AsyncIteratorStateMachineAttribute("Npgsql.Replication.Internal.LogicalReplicationConnectionExtensions/<<StartLogicalReplication>g__StartLogicalReplicationInternal|1_0>d")]
[CompilerGeneratedAttribute]
internal static IAsyncEnumerable`1<XLogDataMessage> <StartLogicalReplication>g__StartLogicalReplicationInternal|1_0(LogicalReplicationConnection connection, LogicalReplicationSlot slot, CancellationToken cancellationToken, Nullable`1<NpgsqlLogSequenceNumber> walLocation, IEnumerable`1<KeyValuePair`2<string, string>> options, bool bypassingStream);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public abstract class Npgsql.Replication.Internal.LogicalReplicationSlot : ReplicationSlot {
    [NullableAttribute("2")]
[CompilerGeneratedAttribute]
private string <SnapshotName>k__BackingField;
    [CompilerGeneratedAttribute]
private string <OutputPlugin>k__BackingField;
    [CompilerGeneratedAttribute]
private NpgsqlLogSequenceNumber <ConsistentPoint>k__BackingField;
    [NullableAttribute("2")]
public string SnapshotName { get; }
    public string OutputPlugin { get; }
    public NpgsqlLogSequenceNumber ConsistentPoint { get; }
    protected LogicalReplicationSlot(string outputPlugin, ReplicationSlotOptions replicationSlotOptions);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public string get_SnapshotName();
    [CompilerGeneratedAttribute]
public string get_OutputPlugin();
    [CompilerGeneratedAttribute]
public NpgsqlLogSequenceNumber get_ConsistentPoint();
}
public class Npgsql.Replication.LogicalReplicationConnection : ReplicationConnection {
    private protected ReplicationMode ReplicationMode { get; }
    [NullableContextAttribute("2")]
public LogicalReplicationConnection(string connectionString);
    private protected virtual ReplicationMode get_ReplicationMode();
}
public enum Npgsql.Replication.LogicalSlotSnapshotInitMode : Enum {
    public int value__;
    public static LogicalSlotSnapshotInitMode Export;
    public static LogicalSlotSnapshotInitMode Use;
    public static LogicalSlotSnapshotInitMode NoExport;
}
internal static class Npgsql.Replication.PgDateTime : object {
    private static long PostgresTimestampOffsetTicks;
    public static DateTime DecodeTimestamp(long value, DateTimeKind kind);
    public static long EncodeTimestamp(DateTime value);
}
public class Npgsql.Replication.PgOutput.Messages.BeginMessage : TransactionControlMessage {
    [CompilerGeneratedAttribute]
private NpgsqlLogSequenceNumber <TransactionFinalLsn>k__BackingField;
    [CompilerGeneratedAttribute]
private DateTime <TransactionCommitTimestamp>k__BackingField;
    public NpgsqlLogSequenceNumber TransactionFinalLsn { get; private set; }
    public DateTime TransactionCommitTimestamp { get; private set; }
    [CompilerGeneratedAttribute]
public NpgsqlLogSequenceNumber get_TransactionFinalLsn();
    [CompilerGeneratedAttribute]
private void set_TransactionFinalLsn(NpgsqlLogSequenceNumber value);
    [CompilerGeneratedAttribute]
public DateTime get_TransactionCommitTimestamp();
    [CompilerGeneratedAttribute]
private void set_TransactionCommitTimestamp(DateTime value);
    [NullableContextAttribute("1")]
internal BeginMessage Populate(NpgsqlLogSequenceNumber walStart, NpgsqlLogSequenceNumber walEnd, DateTime serverClock, NpgsqlLogSequenceNumber transactionFinalLsn, DateTime transactionCommitTimestamp, UInt32 transactionXid);
}
public class Npgsql.Replication.PgOutput.Messages.BeginPrepareMessage : PrepareMessageBase {
    [NullableContextAttribute("1")]
internal BeginPrepareMessage Populate(NpgsqlLogSequenceNumber walStart, NpgsqlLogSequenceNumber walEnd, DateTime serverClock, NpgsqlLogSequenceNumber prepareLsn, NpgsqlLogSequenceNumber prepareEndLsn, DateTime transactionPrepareTimestamp, UInt32 transactionXid, string transactionGid);
}
public class Npgsql.Replication.PgOutput.Messages.CommitMessage : PgOutputReplicationMessage {
    [CompilerGeneratedAttribute]
private CommitFlags <Flags>k__BackingField;
    [CompilerGeneratedAttribute]
private NpgsqlLogSequenceNumber <CommitLsn>k__BackingField;
    [CompilerGeneratedAttribute]
private NpgsqlLogSequenceNumber <TransactionEndLsn>k__BackingField;
    [CompilerGeneratedAttribute]
private DateTime <TransactionCommitTimestamp>k__BackingField;
    public CommitFlags Flags { get; private set; }
    public NpgsqlLogSequenceNumber CommitLsn { get; private set; }
    public NpgsqlLogSequenceNumber TransactionEndLsn { get; private set; }
    public DateTime TransactionCommitTimestamp { get; private set; }
    [CompilerGeneratedAttribute]
public CommitFlags get_Flags();
    [CompilerGeneratedAttribute]
private void set_Flags(CommitFlags value);
    [CompilerGeneratedAttribute]
public NpgsqlLogSequenceNumber get_CommitLsn();
    [CompilerGeneratedAttribute]
private void set_CommitLsn(NpgsqlLogSequenceNumber value);
    [CompilerGeneratedAttribute]
public NpgsqlLogSequenceNumber get_TransactionEndLsn();
    [CompilerGeneratedAttribute]
private void set_TransactionEndLsn(NpgsqlLogSequenceNumber value);
    [CompilerGeneratedAttribute]
public DateTime get_TransactionCommitTimestamp();
    [CompilerGeneratedAttribute]
private void set_TransactionCommitTimestamp(DateTime value);
    [NullableContextAttribute("1")]
internal CommitMessage Populate(NpgsqlLogSequenceNumber walStart, NpgsqlLogSequenceNumber walEnd, DateTime serverClock, CommitFlags flags, NpgsqlLogSequenceNumber commitLsn, NpgsqlLogSequenceNumber transactionEndLsn, DateTime transactionCommitTimestamp);
}
public class Npgsql.Replication.PgOutput.Messages.CommitPreparedMessage : PreparedTransactionControlMessage {
    [CompilerGeneratedAttribute]
private CommitPreparedFlags <Flags>k__BackingField;
    public CommitPreparedFlags Flags { get; private set; }
    public NpgsqlLogSequenceNumber CommitPreparedLsn { get; }
    public NpgsqlLogSequenceNumber CommitPreparedEndLsn { get; }
    public DateTime TransactionCommitTimestamp { get; }
    [CompilerGeneratedAttribute]
public CommitPreparedFlags get_Flags();
    [CompilerGeneratedAttribute]
private void set_Flags(CommitPreparedFlags value);
    public NpgsqlLogSequenceNumber get_CommitPreparedLsn();
    public NpgsqlLogSequenceNumber get_CommitPreparedEndLsn();
    public DateTime get_TransactionCommitTimestamp();
    [NullableContextAttribute("1")]
internal CommitPreparedMessage Populate(NpgsqlLogSequenceNumber walStart, NpgsqlLogSequenceNumber walEnd, DateTime serverClock, CommitPreparedFlags flags, NpgsqlLogSequenceNumber commitPreparedLsn, NpgsqlLogSequenceNumber commitPreparedEndLsn, DateTime transactionCommitTimestamp, UInt32 transactionXid, string transactionGid);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Npgsql.Replication.PgOutput.Messages.DefaultUpdateMessage : UpdateMessage {
    private ReplicationTuple _newRow;
    public ReplicationTuple NewRow { get; }
    internal DefaultUpdateMessage(NpgsqlConnector connector);
    public virtual ReplicationTuple get_NewRow();
    internal UpdateMessage Populate(NpgsqlLogSequenceNumber walStart, NpgsqlLogSequenceNumber walEnd, DateTime serverClock, Nullable`1<UInt32> transactionXid, RelationMessage relation, ushort numColumns);
    internal Task Consume(CancellationToken cancellationToken);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public abstract class Npgsql.Replication.PgOutput.Messages.DeleteMessage : TransactionalMessage {
    [CompilerGeneratedAttribute]
private RelationMessage <Relation>k__BackingField;
    public RelationMessage Relation { get; private set; }
    [CompilerGeneratedAttribute]
public RelationMessage get_Relation();
    [CompilerGeneratedAttribute]
private void set_Relation(RelationMessage value);
    private protected DeleteMessage Populate(NpgsqlLogSequenceNumber walStart, NpgsqlLogSequenceNumber walEnd, DateTime serverClock, Nullable`1<UInt32> transactionXid, RelationMessage relation);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Npgsql.Replication.PgOutput.Messages.FullDeleteMessage : DeleteMessage {
    private ReplicationTuple _tupleEnumerable;
    public ReplicationTuple OldRow { get; }
    internal FullDeleteMessage(NpgsqlConnector connector);
    public ReplicationTuple get_OldRow();
    internal FullDeleteMessage Populate(NpgsqlLogSequenceNumber walStart, NpgsqlLogSequenceNumber walEnd, DateTime serverClock, Nullable`1<UInt32> transactionXid, RelationMessage relation, ushort numColumns);
    internal Task Consume(CancellationToken cancellationToken);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Npgsql.Replication.PgOutput.Messages.FullUpdateMessage : UpdateMessage {
    private ReplicationTuple _oldRow;
    private SecondRowTupleEnumerable _newRow;
    public ReplicationTuple OldRow { get; }
    public ReplicationTuple NewRow { get; }
    internal FullUpdateMessage(NpgsqlConnector connector);
    public ReplicationTuple get_OldRow();
    public virtual ReplicationTuple get_NewRow();
    internal UpdateMessage Populate(NpgsqlLogSequenceNumber walStart, NpgsqlLogSequenceNumber walEnd, DateTime serverClock, Nullable`1<UInt32> transactionXid, RelationMessage relation, ushort numColumns);
    internal Task Consume(CancellationToken cancellationToken);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Npgsql.Replication.PgOutput.Messages.IndexUpdateMessage : UpdateMessage {
    private ReplicationTuple _key;
    private SecondRowTupleEnumerable _newRow;
    public ReplicationTuple Key { get; }
    public ReplicationTuple NewRow { get; }
    internal IndexUpdateMessage(NpgsqlConnector connector);
    public ReplicationTuple get_Key();
    public virtual ReplicationTuple get_NewRow();
    internal UpdateMessage Populate(NpgsqlLogSequenceNumber walStart, NpgsqlLogSequenceNumber walEnd, DateTime serverClock, Nullable`1<UInt32> transactionXid, RelationMessage relation, ushort numColumns);
    internal Task Consume(CancellationToken cancellationToken);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Npgsql.Replication.PgOutput.Messages.InsertMessage : TransactionalMessage {
    private ReplicationTuple _tupleEnumerable;
    [CompilerGeneratedAttribute]
private RelationMessage <Relation>k__BackingField;
    public RelationMessage Relation { get; private set; }
    public ReplicationTuple NewRow { get; }
    internal InsertMessage(NpgsqlConnector connector);
    [CompilerGeneratedAttribute]
public RelationMessage get_Relation();
    [CompilerGeneratedAttribute]
private void set_Relation(RelationMessage value);
    public ReplicationTuple get_NewRow();
    internal InsertMessage Populate(NpgsqlLogSequenceNumber walStart, NpgsqlLogSequenceNumber walEnd, DateTime serverClock, Nullable`1<UInt32> transactionXid, RelationMessage relation, ushort numColumns);
    internal Task Consume(CancellationToken cancellationToken);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Npgsql.Replication.PgOutput.Messages.KeyDeleteMessage : DeleteMessage {
    private ReplicationTuple _tupleEnumerable;
    public ReplicationTuple Key { get; }
    internal KeyDeleteMessage(NpgsqlConnector connector);
    public ReplicationTuple get_Key();
    internal KeyDeleteMessage Populate(NpgsqlLogSequenceNumber walStart, NpgsqlLogSequenceNumber walEnd, DateTime serverClock, Nullable`1<UInt32> transactionXid, RelationMessage relation, ushort numColumns);
    internal Task Consume(CancellationToken cancellationToken);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Npgsql.Replication.PgOutput.Messages.LogicalDecodingMessage : TransactionalMessage {
    [CompilerGeneratedAttribute]
private byte <Flags>k__BackingField;
    [CompilerGeneratedAttribute]
private NpgsqlLogSequenceNumber <MessageLsn>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Prefix>k__BackingField;
    [CompilerGeneratedAttribute]
private Stream <Data>k__BackingField;
    public byte Flags { get; private set; }
    public NpgsqlLogSequenceNumber MessageLsn { get; private set; }
    public string Prefix { get; private set; }
    public Stream Data { get; private set; }
    [CompilerGeneratedAttribute]
public byte get_Flags();
    [CompilerGeneratedAttribute]
private void set_Flags(byte value);
    [CompilerGeneratedAttribute]
public NpgsqlLogSequenceNumber get_MessageLsn();
    [CompilerGeneratedAttribute]
private void set_MessageLsn(NpgsqlLogSequenceNumber value);
    [CompilerGeneratedAttribute]
public string get_Prefix();
    [CompilerGeneratedAttribute]
private void set_Prefix(string value);
    [CompilerGeneratedAttribute]
public Stream get_Data();
    [CompilerGeneratedAttribute]
private void set_Data(Stream value);
    internal LogicalDecodingMessage Populate(NpgsqlLogSequenceNumber walStart, NpgsqlLogSequenceNumber walEnd, DateTime serverClock, Nullable`1<UInt32> transactionXid, byte flags, NpgsqlLogSequenceNumber messageLsn, string prefix, Stream data);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Npgsql.Replication.PgOutput.Messages.OriginMessage : PgOutputReplicationMessage {
    [CompilerGeneratedAttribute]
private NpgsqlLogSequenceNumber <OriginCommitLsn>k__BackingField;
    [CompilerGeneratedAttribute]
private string <OriginName>k__BackingField;
    public NpgsqlLogSequenceNumber OriginCommitLsn { get; private set; }
    public string OriginName { get; private set; }
    [CompilerGeneratedAttribute]
public NpgsqlLogSequenceNumber get_OriginCommitLsn();
    [CompilerGeneratedAttribute]
private void set_OriginCommitLsn(NpgsqlLogSequenceNumber value);
    [CompilerGeneratedAttribute]
public string get_OriginName();
    [CompilerGeneratedAttribute]
private void set_OriginName(string value);
    internal OriginMessage Populate(NpgsqlLogSequenceNumber walStart, NpgsqlLogSequenceNumber walEnd, DateTime serverClock, NpgsqlLogSequenceNumber originCommitLsn, string originName);
}
public abstract class Npgsql.Replication.PgOutput.Messages.PgOutputReplicationMessage : ReplicationMessage {
    [NullableContextAttribute("1")]
public virtual string ToString();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public abstract class Npgsql.Replication.PgOutput.Messages.PreparedTransactionControlMessage : TransactionControlMessage {
    private protected NpgsqlLogSequenceNumber FirstLsn;
    private protected NpgsqlLogSequenceNumber SecondLsn;
    private protected DateTime Timestamp;
    [CompilerGeneratedAttribute]
private string <TransactionGid>k__BackingField;
    public string TransactionGid { get; private set; }
    [CompilerGeneratedAttribute]
public string get_TransactionGid();
    [CompilerGeneratedAttribute]
private void set_TransactionGid(string value);
    private protected PreparedTransactionControlMessage Populate(NpgsqlLogSequenceNumber walStart, NpgsqlLogSequenceNumber walEnd, DateTime serverClock, NpgsqlLogSequenceNumber firstLsn, NpgsqlLogSequenceNumber secondLsn, DateTime timestamp, UInt32 transactionXid, string transactionGid);
}
public class Npgsql.Replication.PgOutput.Messages.PrepareMessage : PrepareMessageBase {
    [CompilerGeneratedAttribute]
private PrepareFlags <Flags>k__BackingField;
    public PrepareFlags Flags { get; private set; }
    [CompilerGeneratedAttribute]
public PrepareFlags get_Flags();
    [CompilerGeneratedAttribute]
private void set_Flags(PrepareFlags value);
    [NullableContextAttribute("1")]
internal PrepareMessage Populate(NpgsqlLogSequenceNumber walStart, NpgsqlLogSequenceNumber walEnd, DateTime serverClock, PrepareFlags flags, NpgsqlLogSequenceNumber prepareLsn, NpgsqlLogSequenceNumber prepareEndLsn, DateTime transactionPrepareTimestamp, UInt32 transactionXid, string transactionGid);
}
public abstract class Npgsql.Replication.PgOutput.Messages.PrepareMessageBase : PreparedTransactionControlMessage {
    public NpgsqlLogSequenceNumber PrepareLsn { get; }
    public NpgsqlLogSequenceNumber PrepareEndLsn { get; }
    public DateTime TransactionPrepareTimestamp { get; }
    public NpgsqlLogSequenceNumber get_PrepareLsn();
    public NpgsqlLogSequenceNumber get_PrepareEndLsn();
    public DateTime get_TransactionPrepareTimestamp();
    [NullableContextAttribute("1")]
internal PrepareMessageBase Populate(NpgsqlLogSequenceNumber walStart, NpgsqlLogSequenceNumber walEnd, DateTime serverClock, NpgsqlLogSequenceNumber prepareLsn, NpgsqlLogSequenceNumber prepareEndLsn, DateTime transactionPrepareTimestamp, UInt32 transactionXid, string transactionGid);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Npgsql.Replication.PgOutput.Messages.RelationMessage : TransactionalMessage {
    [CompilerGeneratedAttribute]
private UInt32 <RelationId>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Namespace>k__BackingField;
    [CompilerGeneratedAttribute]
private string <RelationName>k__BackingField;
    [CompilerGeneratedAttribute]
private ReplicaIdentitySetting <ReplicaIdentity>k__BackingField;
    [CompilerGeneratedAttribute]
private ReadOnlyArrayBuffer`1<Column> <InternalColumns>k__BackingField;
    [CompilerGeneratedAttribute]
private RowDescriptionMessage <RowDescription>k__BackingField;
    public UInt32 RelationId { get; private set; }
    public string Namespace { get; private set; }
    public string RelationName { get; private set; }
    public ReplicaIdentitySetting ReplicaIdentity { get; private set; }
    public IReadOnlyList`1<Column> Columns { get; }
    internal ReadOnlyArrayBuffer`1<Column> InternalColumns { get; }
    internal RowDescriptionMessage RowDescription { get; internal set; }
    [CompilerGeneratedAttribute]
public UInt32 get_RelationId();
    [CompilerGeneratedAttribute]
private void set_RelationId(UInt32 value);
    [CompilerGeneratedAttribute]
public string get_Namespace();
    [CompilerGeneratedAttribute]
private void set_Namespace(string value);
    [CompilerGeneratedAttribute]
public string get_RelationName();
    [CompilerGeneratedAttribute]
private void set_RelationName(string value);
    [CompilerGeneratedAttribute]
public ReplicaIdentitySetting get_ReplicaIdentity();
    [CompilerGeneratedAttribute]
private void set_ReplicaIdentity(ReplicaIdentitySetting value);
    public IReadOnlyList`1<Column> get_Columns();
    [CompilerGeneratedAttribute]
internal ReadOnlyArrayBuffer`1<Column> get_InternalColumns();
    [CompilerGeneratedAttribute]
internal RowDescriptionMessage get_RowDescription();
    [CompilerGeneratedAttribute]
internal void set_RowDescription(RowDescriptionMessage value);
    internal RelationMessage Populate(NpgsqlLogSequenceNumber walStart, NpgsqlLogSequenceNumber walEnd, DateTime serverClock, Nullable`1<UInt32> transactionXid, UInt32 relationId, string ns, string relationName, ReplicaIdentitySetting relationReplicaIdentitySetting);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[IsReadOnlyAttribute]
public class Npgsql.Replication.PgOutput.Messages.RelationMessageColumn : ValueType {
    [CompilerGeneratedAttribute]
private byte <Flags>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ColumnName>k__BackingField;
    [CompilerGeneratedAttribute]
private UInt32 <DataTypeId>k__BackingField;
    [CompilerGeneratedAttribute]
private int <TypeModifier>k__BackingField;
    public byte Flags { get; }
    public string ColumnName { get; }
    public UInt32 DataTypeId { get; }
    public int TypeModifier { get; }
    internal RelationMessageColumn(byte flags, string columnName, UInt32 dataTypeId, int typeModifier);
    [CompilerGeneratedAttribute]
public byte get_Flags();
    [CompilerGeneratedAttribute]
public string get_ColumnName();
    [CompilerGeneratedAttribute]
public UInt32 get_DataTypeId();
    [CompilerGeneratedAttribute]
public int get_TypeModifier();
}
public class Npgsql.Replication.PgOutput.Messages.RollbackPreparedMessage : PreparedTransactionControlMessage {
    [CompilerGeneratedAttribute]
private RollbackPreparedFlags <Flags>k__BackingField;
    [CompilerGeneratedAttribute]
private DateTime <TransactionRollbackTimestamp>k__BackingField;
    public RollbackPreparedFlags Flags { get; private set; }
    public NpgsqlLogSequenceNumber PreparedTransactionEndLsn { get; }
    public NpgsqlLogSequenceNumber RollbackPreparedEndLsn { get; }
    public DateTime TransactionPrepareTimestamp { get; }
    public DateTime TransactionRollbackTimestamp { get; private set; }
    [CompilerGeneratedAttribute]
public RollbackPreparedFlags get_Flags();
    [CompilerGeneratedAttribute]
private void set_Flags(RollbackPreparedFlags value);
    public NpgsqlLogSequenceNumber get_PreparedTransactionEndLsn();
    public NpgsqlLogSequenceNumber get_RollbackPreparedEndLsn();
    public DateTime get_TransactionPrepareTimestamp();
    [CompilerGeneratedAttribute]
public DateTime get_TransactionRollbackTimestamp();
    [CompilerGeneratedAttribute]
private void set_TransactionRollbackTimestamp(DateTime value);
    [NullableContextAttribute("1")]
internal RollbackPreparedMessage Populate(NpgsqlLogSequenceNumber walStart, NpgsqlLogSequenceNumber walEnd, DateTime serverClock, RollbackPreparedFlags flags, NpgsqlLogSequenceNumber preparedTransactionEndLsn, NpgsqlLogSequenceNumber rollbackPreparedEndLsn, DateTime transactionPrepareTimestamp, DateTime transactionRollbackTimestamp, UInt32 transactionXid, string transactionGid);
}
public class Npgsql.Replication.PgOutput.Messages.StreamAbortMessage : TransactionControlMessage {
    [CompilerGeneratedAttribute]
private UInt32 <SubtransactionXid>k__BackingField;
    public UInt32 SubtransactionXid { get; private set; }
    [CompilerGeneratedAttribute]
public UInt32 get_SubtransactionXid();
    [CompilerGeneratedAttribute]
private void set_SubtransactionXid(UInt32 value);
    [NullableContextAttribute("1")]
internal StreamAbortMessage Populate(NpgsqlLogSequenceNumber walStart, NpgsqlLogSequenceNumber walEnd, DateTime serverClock, UInt32 transactionXid, UInt32 subtransactionXid);
}
public class Npgsql.Replication.PgOutput.Messages.StreamCommitMessage : TransactionControlMessage {
    [CompilerGeneratedAttribute]
private byte <Flags>k__BackingField;
    [CompilerGeneratedAttribute]
private NpgsqlLogSequenceNumber <CommitLsn>k__BackingField;
    [CompilerGeneratedAttribute]
private NpgsqlLogSequenceNumber <TransactionEndLsn>k__BackingField;
    [CompilerGeneratedAttribute]
private DateTime <TransactionCommitTimestamp>k__BackingField;
    public byte Flags { get; private set; }
    public NpgsqlLogSequenceNumber CommitLsn { get; private set; }
    public NpgsqlLogSequenceNumber TransactionEndLsn { get; private set; }
    public DateTime TransactionCommitTimestamp { get; private set; }
    [CompilerGeneratedAttribute]
public byte get_Flags();
    [CompilerGeneratedAttribute]
private void set_Flags(byte value);
    [CompilerGeneratedAttribute]
public NpgsqlLogSequenceNumber get_CommitLsn();
    [CompilerGeneratedAttribute]
private void set_CommitLsn(NpgsqlLogSequenceNumber value);
    [CompilerGeneratedAttribute]
public NpgsqlLogSequenceNumber get_TransactionEndLsn();
    [CompilerGeneratedAttribute]
private void set_TransactionEndLsn(NpgsqlLogSequenceNumber value);
    [CompilerGeneratedAttribute]
public DateTime get_TransactionCommitTimestamp();
    [CompilerGeneratedAttribute]
private void set_TransactionCommitTimestamp(DateTime value);
    [NullableContextAttribute("1")]
internal StreamCommitMessage Populate(NpgsqlLogSequenceNumber walStart, NpgsqlLogSequenceNumber walEnd, DateTime serverClock, UInt32 transactionXid, byte flags, NpgsqlLogSequenceNumber commitLsn, NpgsqlLogSequenceNumber transactionEndLsn, DateTime transactionCommitTimestamp);
}
public class Npgsql.Replication.PgOutput.Messages.StreamPrepareMessage : PrepareMessageBase {
    [CompilerGeneratedAttribute]
private StreamPrepareFlags <Flags>k__BackingField;
    public StreamPrepareFlags Flags { get; private set; }
    [CompilerGeneratedAttribute]
public StreamPrepareFlags get_Flags();
    [CompilerGeneratedAttribute]
private void set_Flags(StreamPrepareFlags value);
    [NullableContextAttribute("1")]
internal StreamPrepareMessage Populate(NpgsqlLogSequenceNumber walStart, NpgsqlLogSequenceNumber walEnd, DateTime serverClock, StreamPrepareFlags flags, NpgsqlLogSequenceNumber prepareLsn, NpgsqlLogSequenceNumber prepareEndLsn, DateTime transactionPrepareTimestamp, UInt32 transactionXid, string transactionGid);
}
public class Npgsql.Replication.PgOutput.Messages.StreamStartMessage : TransactionControlMessage {
    [CompilerGeneratedAttribute]
private byte <StreamSegmentIndicator>k__BackingField;
    public byte StreamSegmentIndicator { get; private set; }
    [CompilerGeneratedAttribute]
public byte get_StreamSegmentIndicator();
    [CompilerGeneratedAttribute]
private void set_StreamSegmentIndicator(byte value);
    [NullableContextAttribute("1")]
internal StreamStartMessage Populate(NpgsqlLogSequenceNumber walStart, NpgsqlLogSequenceNumber walEnd, DateTime serverClock, UInt32 transactionXid, byte streamSegmentIndicator);
}
public class Npgsql.Replication.PgOutput.Messages.StreamStopMessage : PgOutputReplicationMessage {
    [NullableContextAttribute("1")]
internal StreamStopMessage Populate(NpgsqlLogSequenceNumber walStart, NpgsqlLogSequenceNumber walEnd, DateTime serverClock);
}
public abstract class Npgsql.Replication.PgOutput.Messages.TransactionalMessage : PgOutputReplicationMessage {
    [CompilerGeneratedAttribute]
private Nullable`1<UInt32> <TransactionXid>k__BackingField;
    public Nullable`1<UInt32> TransactionXid { get; private set; }
    [CompilerGeneratedAttribute]
public Nullable`1<UInt32> get_TransactionXid();
    [CompilerGeneratedAttribute]
private void set_TransactionXid(Nullable`1<UInt32> value);
    private protected void Populate(NpgsqlLogSequenceNumber walStart, NpgsqlLogSequenceNumber walEnd, DateTime serverClock, Nullable`1<UInt32> transactionXid);
}
public abstract class Npgsql.Replication.PgOutput.Messages.TransactionControlMessage : PgOutputReplicationMessage {
    [CompilerGeneratedAttribute]
private UInt32 <TransactionXid>k__BackingField;
    public UInt32 TransactionXid { get; private set; }
    [CompilerGeneratedAttribute]
public UInt32 get_TransactionXid();
    [CompilerGeneratedAttribute]
private void set_TransactionXid(UInt32 value);
    private protected void Populate(NpgsqlLogSequenceNumber walStart, NpgsqlLogSequenceNumber walEnd, DateTime serverClock, UInt32 transactionXid);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Npgsql.Replication.PgOutput.Messages.TruncateMessage : TransactionalMessage {
    [CompilerGeneratedAttribute]
private TruncateOptions <Options>k__BackingField;
    [CompilerGeneratedAttribute]
private IReadOnlyList`1<RelationMessage> <Relations>k__BackingField;
    public TruncateOptions Options { get; private set; }
    public IReadOnlyList`1<RelationMessage> Relations { get; private set; }
    [CompilerGeneratedAttribute]
public TruncateOptions get_Options();
    [CompilerGeneratedAttribute]
private void set_Options(TruncateOptions value);
    [CompilerGeneratedAttribute]
public IReadOnlyList`1<RelationMessage> get_Relations();
    [CompilerGeneratedAttribute]
private void set_Relations(IReadOnlyList`1<RelationMessage> value);
    internal TruncateMessage Populate(NpgsqlLogSequenceNumber walStart, NpgsqlLogSequenceNumber walEnd, DateTime serverClock, Nullable`1<UInt32> transactionXid, TruncateOptions options, ReadOnlyArrayBuffer`1<RelationMessage> relations);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Npgsql.Replication.PgOutput.Messages.TypeMessage : TransactionalMessage {
    [CompilerGeneratedAttribute]
private UInt32 <TypeId>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Namespace>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    public UInt32 TypeId { get; private set; }
    public string Namespace { get; private set; }
    public string Name { get; private set; }
    [CompilerGeneratedAttribute]
public UInt32 get_TypeId();
    [CompilerGeneratedAttribute]
private void set_TypeId(UInt32 value);
    [CompilerGeneratedAttribute]
public string get_Namespace();
    [CompilerGeneratedAttribute]
private void set_Namespace(string value);
    [CompilerGeneratedAttribute]
public string get_Name();
    [CompilerGeneratedAttribute]
private void set_Name(string value);
    internal TypeMessage Populate(NpgsqlLogSequenceNumber walStart, NpgsqlLogSequenceNumber walEnd, DateTime serverClock, Nullable`1<UInt32> transactionXid, UInt32 typeId, string ns, string name);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public abstract class Npgsql.Replication.PgOutput.Messages.UpdateMessage : TransactionalMessage {
    [CompilerGeneratedAttribute]
private RelationMessage <Relation>k__BackingField;
    public RelationMessage Relation { get; private set; }
    public ReplicationTuple NewRow { get; }
    [CompilerGeneratedAttribute]
public RelationMessage get_Relation();
    [CompilerGeneratedAttribute]
private void set_Relation(RelationMessage value);
    public abstract virtual ReplicationTuple get_NewRow();
    internal UpdateMessage Populate(NpgsqlLogSequenceNumber walStart, NpgsqlLogSequenceNumber walEnd, DateTime serverClock, Nullable`1<UInt32> transactionXid, RelationMessage relation);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Npgsql.Replication.PgOutput.PgOutputAsyncEnumerable : object {
    private LogicalReplicationConnection _connection;
    private PgOutputReplicationSlot _slot;
    private PgOutputReplicationOptions _options;
    private CancellationToken _baseCancellationToken;
    private Nullable`1<NpgsqlLogSequenceNumber> _walLocation;
    private BeginMessage _beginMessage;
    private LogicalDecodingMessage _logicalDecodingMessage;
    private CommitMessage _commitMessage;
    private OriginMessage _originMessage;
    private Dictionary`2<UInt32, RelationMessage> _relations;
    private TypeMessage _typeMessage;
    private InsertMessage _insertMessage;
    private DefaultUpdateMessage _defaultUpdateMessage;
    private FullUpdateMessage _fullUpdateMessage;
    private IndexUpdateMessage _indexUpdateMessage;
    private FullDeleteMessage _fullDeleteMessage;
    private KeyDeleteMessage _keyDeleteMessage;
    private TruncateMessage _truncateMessage;
    private ReadOnlyArrayBuffer`1<RelationMessage> _truncateMessageRelations;
    private StreamStartMessage _streamStartMessage;
    private StreamStopMessage _streamStopMessage;
    private StreamCommitMessage _streamCommitMessage;
    private StreamAbortMessage _streamAbortMessage;
    private BeginPrepareMessage _beginPrepareMessage;
    private PrepareMessage _prepareMessage;
    private CommitPreparedMessage _commitPreparedMessage;
    private RollbackPreparedMessage _rollbackPreparedMessage;
    private StreamPrepareMessage _streamPrepareMessage;
    internal PgOutputAsyncEnumerable(LogicalReplicationConnection connection, PgOutputReplicationSlot slot, PgOutputReplicationOptions options, CancellationToken cancellationToken, Nullable`1<NpgsqlLogSequenceNumber> walLocation);
    public sealed virtual IAsyncEnumerator`1<PgOutputReplicationMessage> GetAsyncEnumerator(CancellationToken cancellationToken);
    [AsyncIteratorStateMachineAttribute("Npgsql.Replication.PgOutput.PgOutputAsyncEnumerable/<StartReplicationInternal>d__30")]
private IAsyncEnumerator`1<PgOutputReplicationMessage> StartReplicationInternal(CancellationToken cancellationToken);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Npgsql.Replication.PgOutput.PgOutputReplicationOptions : object {
    [CompilerGeneratedAttribute]
private ulong <ProtocolVersion>k__BackingField;
    [CompilerGeneratedAttribute]
private List`1<string> <PublicationNames>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<bool> <Binary>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<bool> <Streaming>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<bool> <Messages>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<bool> <TwoPhase>k__BackingField;
    public ulong ProtocolVersion { get; }
    public List`1<string> PublicationNames { get; }
    public Nullable`1<bool> Binary { get; }
    public Nullable`1<bool> Streaming { get; }
    public Nullable`1<bool> Messages { get; }
    public Nullable`1<bool> TwoPhase { get; }
    public PgOutputReplicationOptions(string publicationName, ulong protocolVersion, Nullable`1<bool> binary, Nullable`1<bool> streaming, Nullable`1<bool> messages, Nullable`1<bool> twoPhase);
    public PgOutputReplicationOptions(IEnumerable`1<string> publicationNames, ulong protocolVersion, Nullable`1<bool> binary, Nullable`1<bool> streaming, Nullable`1<bool> messages, Nullable`1<bool> twoPhase);
    [CompilerGeneratedAttribute]
public ulong get_ProtocolVersion();
    [CompilerGeneratedAttribute]
public List`1<string> get_PublicationNames();
    [CompilerGeneratedAttribute]
public Nullable`1<bool> get_Binary();
    [CompilerGeneratedAttribute]
public Nullable`1<bool> get_Streaming();
    [CompilerGeneratedAttribute]
public Nullable`1<bool> get_Messages();
    [CompilerGeneratedAttribute]
public Nullable`1<bool> get_TwoPhase();
    [IteratorStateMachineAttribute("Npgsql.Replication.PgOutput.PgOutputReplicationOptions/<GetOptionPairs>d__20")]
internal IEnumerable`1<KeyValuePair`2<string, string>> GetOptionPairs();
    [NullableContextAttribute("2")]
public sealed virtual bool Equals(PgOutputReplicationOptions other);
    [NullableContextAttribute("2")]
public virtual bool Equals(object obj);
    public virtual int GetHashCode();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Npgsql.Replication.PgOutput.PgOutputReplicationSlot : LogicalReplicationSlot {
    public PgOutputReplicationSlot(string slotName);
    public PgOutputReplicationSlot(ReplicationSlotOptions options);
    protected PgOutputReplicationSlot(PgOutputReplicationSlot slot);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[DefaultMemberAttribute("Item")]
internal class Npgsql.Replication.PgOutput.ReadOnlyArrayBuffer`1 : object {
    public static ReadOnlyArrayBuffer`1<T> Empty;
    private T[] _items;
    private int _size;
    public int Count { get; internal set; }
    public T Item { get; internal set; }
    private ReadOnlyArrayBuffer`1(T[] items);
    private static ReadOnlyArrayBuffer`1();
    [IteratorStateMachineAttribute("Npgsql.Replication.PgOutput.ReadOnlyArrayBuffer`1/<GetEnumerator>d__5")]
public sealed virtual IEnumerator`1<T> GetEnumerator();
    private sealed virtual override IEnumerator System.Collections.IEnumerable.GetEnumerator();
    public sealed virtual int get_Count();
    internal void set_Count(int value);
    public sealed virtual T get_Item(int index);
    internal void set_Item(int index, T value);
    public ReadOnlyArrayBuffer`1<T> Clone();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Npgsql.Replication.PgOutput.ReplicationTuple : object {
    private protected NpgsqlReadBuffer ReadBuffer;
    private TupleEnumerator _tupleEnumerator;
    internal RowState State;
    [CompilerGeneratedAttribute]
private ushort <NumColumns>k__BackingField;
    private RowDescriptionMessage _rowDescription;
    public ushort NumColumns { get; private set; }
    internal ReplicationTuple(NpgsqlConnector connector);
    [CompilerGeneratedAttribute]
public ushort get_NumColumns();
    [CompilerGeneratedAttribute]
private void set_NumColumns(ushort value);
    internal void Reset(ushort numColumns, RowDescriptionMessage rowDescription);
    public virtual IAsyncEnumerator`1<ReplicationValue> GetAsyncEnumerator(CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Npgsql.Replication.PgOutput.ReplicationTuple/<Consume>d__11")]
internal Task Consume(CancellationToken cancellationToken);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Npgsql.Replication.PgOutput.ReplicationValue : object {
    private NpgsqlReadBuffer _readBuffer;
    [CompilerGeneratedAttribute]
private int <Length>k__BackingField;
    [CompilerGeneratedAttribute]
private TupleDataKind <Kind>k__BackingField;
    private FieldDescription _fieldDescription;
    private ColumnInfo _lastInfo;
    private bool _isConsumed;
    public int Length { get; private set; }
    public TupleDataKind Kind { get; private set; }
    private PgReader PgReader { get; }
    public bool IsDBNull { get; }
    public bool IsUnchangedToastedValue { get; }
    internal ReplicationValue(NpgsqlConnector connector);
    [CompilerGeneratedAttribute]
public int get_Length();
    [CompilerGeneratedAttribute]
private void set_Length(int value);
    [CompilerGeneratedAttribute]
public TupleDataKind get_Kind();
    [CompilerGeneratedAttribute]
private void set_Kind(TupleDataKind value);
    private PgReader get_PgReader();
    internal void Reset(TupleDataKind kind, int length, FieldDescription fieldDescription);
    public bool get_IsDBNull();
    public bool get_IsUnchangedToastedValue();
    public PostgresType GetPostgresType();
    public string GetDataTypeName();
    public Type GetFieldType();
    public string GetFieldName();
    [NullableContextAttribute("2")]
[AsyncStateMachineAttribute("Npgsql.Replication.PgOutput.ReplicationValue/<Get>d__24`1")]
public ValueTask`1<T> Get(CancellationToken cancellationToken);
    public ValueTask`1<object> Get(CancellationToken cancellationToken);
    public Stream GetStream();
    public TextReader GetTextReader();
    [AsyncStateMachineAttribute("Npgsql.Replication.PgOutput.ReplicationValue/<Consume>d__28")]
internal Task Consume(CancellationToken cancellationToken);
    private void CheckActive();
}
internal enum Npgsql.Replication.PgOutput.RowState : Enum {
    public int value__;
    public static RowState NotRead;
    public static RowState Reading;
    public static RowState Consumed;
}
public enum Npgsql.Replication.PgOutput.TupleDataKind : Enum {
    public byte value__;
    public static TupleDataKind Null;
    public static TupleDataKind UnchangedToastedValue;
    public static TupleDataKind TextValue;
    public static TupleDataKind BinaryValue;
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Npgsql.Replication.PgOutput.TupleEnumerator : object {
    private ReplicationTuple _tupleEnumerable;
    private NpgsqlReadBuffer _readBuffer;
    private ReplicationValue _value;
    private ushort _numColumns;
    private int _pos;
    private RowDescriptionMessage _rowDescription;
    private CancellationToken _cancellationToken;
    public ReplicationValue Current { get; }
    internal TupleEnumerator(ReplicationTuple tupleEnumerable, NpgsqlConnector connector);
    internal void Reset(ushort numColumns, RowDescriptionMessage rowDescription, CancellationToken cancellationToken);
    [NullableContextAttribute("0")]
public sealed virtual ValueTask`1<bool> MoveNextAsync();
    public sealed virtual ReplicationValue get_Current();
    [AsyncStateMachineAttribute("Npgsql.Replication.PgOutput.TupleEnumerator/<DisposeAsync>d__12")]
public sealed virtual ValueTask DisposeAsync();
    [NullableContextAttribute("0")]
[AsyncStateMachineAttribute("Npgsql.Replication.PgOutput.TupleEnumerator/<<MoveNextAsync>g__MoveNextCore|9_0>d")]
[CompilerGeneratedAttribute]
private ValueTask`1<bool> <MoveNextAsync>g__MoveNextCore|9_0();
}
internal enum Npgsql.Replication.PgOutput.TupleType : Enum {
    public byte value__;
    public static TupleType Key;
    public static TupleType NewTuple;
    public static TupleType OldTuple;
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ExtensionAttribute]
public static class Npgsql.Replication.PgOutputConnectionExtensions : object {
    [AsyncStateMachineAttribute("Npgsql.Replication.PgOutputConnectionExtensions/<CreatePgOutputReplicationSlot>d__0")]
[ExtensionAttribute]
public static Task`1<PgOutputReplicationSlot> CreatePgOutputReplicationSlot(LogicalReplicationConnection connection, string slotName, bool temporarySlot, Nullable`1<LogicalSlotSnapshotInitMode> slotSnapshotInitMode, bool twoPhase, CancellationToken cancellationToken);
    [ExtensionAttribute]
public static IAsyncEnumerable`1<PgOutputReplicationMessage> StartReplication(LogicalReplicationConnection connection, PgOutputReplicationSlot slot, PgOutputReplicationOptions options, CancellationToken cancellationToken, Nullable`1<NpgsqlLogSequenceNumber> walLocation);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Npgsql.Replication.PhysicalReplicationConnection : ReplicationConnection {
    private protected ReplicationMode ReplicationMode { get; }
    [NullableContextAttribute("2")]
public PhysicalReplicationConnection(string connectionString);
    private protected virtual ReplicationMode get_ReplicationMode();
    [AsyncStateMachineAttribute("Npgsql.Replication.PhysicalReplicationConnection/<CreateReplicationSlot>d__4")]
public Task`1<PhysicalReplicationSlot> CreateReplicationSlot(string slotName, bool isTemporary, bool reserveWal, CancellationToken cancellationToken);
    public Task`1<PhysicalReplicationSlot> ReadReplicationSlot(string slotName, CancellationToken cancellationToken);
    public IAsyncEnumerable`1<XLogDataMessage> StartReplication(PhysicalReplicationSlot slot, NpgsqlLogSequenceNumber walLocation, CancellationToken cancellationToken, UInt32 timeline);
    public IAsyncEnumerable`1<XLogDataMessage> StartReplication(NpgsqlLogSequenceNumber walLocation, CancellationToken cancellationToken, UInt32 timeline);
    public IAsyncEnumerable`1<XLogDataMessage> StartReplication(PhysicalReplicationSlot slot, CancellationToken cancellationToken);
    [AsyncIteratorStateMachineAttribute("Npgsql.Replication.PhysicalReplicationConnection/<<StartReplication>g__StartPhysicalReplication|6_0>d")]
[CompilerGeneratedAttribute]
private IAsyncEnumerable`1<XLogDataMessage> <StartReplication>g__StartPhysicalReplication|6_0(PhysicalReplicationSlot slot, NpgsqlLogSequenceNumber walLocation, CancellationToken cancellationToken, UInt32 timeline);
}
public class Npgsql.Replication.PhysicalReplicationSlot : ReplicationSlot {
    [CompilerGeneratedAttribute]
private Nullable`1<NpgsqlLogSequenceNumber> <RestartLsn>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<UInt32> <RestartTimeline>k__BackingField;
    public Nullable`1<NpgsqlLogSequenceNumber> RestartLsn { get; }
    public Nullable`1<UInt32> RestartTimeline { get; }
    [NullableContextAttribute("1")]
public PhysicalReplicationSlot(string slotName, Nullable`1<NpgsqlLogSequenceNumber> restartLsn, Nullable`1<UInt32> restartTimeline);
    [CompilerGeneratedAttribute]
public Nullable`1<NpgsqlLogSequenceNumber> get_RestartLsn();
    [CompilerGeneratedAttribute]
public Nullable`1<UInt32> get_RestartTimeline();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public abstract class Npgsql.Replication.ReplicationConnection : object {
    private static Version FirstVersionWithTwoPhaseSupport;
    private static Version FirstVersionWithoutDropSlotDoubleCommandCompleteMessage;
    private static Version FirstVersionWithTemporarySlotsAndSlotSnapshotInitMode;
    private NpgsqlConnection _npgsqlConnection;
    private SemaphoreSlim _feedbackSemaphore;
    [NullableAttribute("2")]
private string _userFacingConnectionString;
    private Nullable`1<TimeSpan> _commandTimeout;
    private TimeSpan _walReceiverTimeout;
    [NullableAttribute("2")]
private Timer _sendFeedbackTimer;
    [NullableAttribute("2")]
private Timer _requestFeedbackTimer;
    private TimeSpan _requestFeedbackInterval;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private IAsyncEnumerator`1<XLogDataMessage> _currentEnumerator;
    [NullableAttribute("2")]
private CancellationTokenSource _replicationCancellationTokenSource;
    private bool _pgCancellationSupported;
    private bool _isDisposed;
    private long _lastReceivedLsn;
    private long _lastFlushedLsn;
    private long _lastAppliedLsn;
    private XLogDataMessage _cachedXLogDataMessage;
    [CompilerGeneratedAttribute]
private ILogger <ReplicationLogger>k__BackingField;
    [CompilerGeneratedAttribute]
private TimeSpan <WalReceiverStatusInterval>k__BackingField;
    internal ILogger ReplicationLogger { get; private set; }
    public string ConnectionString { get; public set; }
    public NpgsqlLogSequenceNumber LastReceivedLsn { get; private protected set; }
    public NpgsqlLogSequenceNumber LastFlushedLsn { get; public set; }
    public NpgsqlLogSequenceNumber LastAppliedLsn { get; public set; }
    public TimeSpan WalReceiverStatusInterval { get; public set; }
    public TimeSpan WalReceiverTimeout { get; public set; }
    private protected ReplicationMode ReplicationMode { get; }
    public Version PostgreSqlVersion { get; }
    public string ServerVersion { get; }
    internal NpgsqlConnector Connector { get; }
    public TimeSpan CommandTimeout { get; public set; }
    public Encoding Encoding { get; }
    public int ProcessID { get; }
    [NullableContextAttribute("2")]
private protected ReplicationConnection(string connectionString);
    private static ReplicationConnection();
    [CompilerGeneratedAttribute]
internal ILogger get_ReplicationLogger();
    [CompilerGeneratedAttribute]
private void set_ReplicationLogger(ILogger value);
    public string get_ConnectionString();
    public void set_ConnectionString(string value);
    public NpgsqlLogSequenceNumber get_LastReceivedLsn();
    private protected void set_LastReceivedLsn(NpgsqlLogSequenceNumber value);
    public NpgsqlLogSequenceNumber get_LastFlushedLsn();
    public void set_LastFlushedLsn(NpgsqlLogSequenceNumber value);
    public NpgsqlLogSequenceNumber get_LastAppliedLsn();
    public void set_LastAppliedLsn(NpgsqlLogSequenceNumber value);
    [CompilerGeneratedAttribute]
public TimeSpan get_WalReceiverStatusInterval();
    [CompilerGeneratedAttribute]
public void set_WalReceiverStatusInterval(TimeSpan value);
    public TimeSpan get_WalReceiverTimeout();
    public void set_WalReceiverTimeout(TimeSpan value);
    private protected abstract virtual ReplicationMode get_ReplicationMode();
    public Version get_PostgreSqlVersion();
    public string get_ServerVersion();
    internal NpgsqlConnector get_Connector();
    public TimeSpan get_CommandTimeout();
    public void set_CommandTimeout(TimeSpan value);
    public Encoding get_Encoding();
    public int get_ProcessID();
    [AsyncStateMachineAttribute("Npgsql.Replication.ReplicationConnection/<Open>d__59")]
public Task Open(CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Npgsql.Replication.ReplicationConnection/<DisposeAsync>d__60")]
public sealed virtual ValueTask DisposeAsync();
    [AsyncStateMachineAttribute("Npgsql.Replication.ReplicationConnection/<IdentifySystem>d__61")]
public Task`1<ReplicationSystemIdentification> IdentifySystem(CancellationToken cancellationToken);
    public Task`1<string> Show(string parameterName, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Npgsql.Replication.ReplicationConnection/<TimelineHistory>d__63")]
public Task`1<TimelineHistoryFile> TimelineHistory(UInt32 tli, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Npgsql.Replication.ReplicationConnection/<CreateReplicationSlot>d__64")]
internal Task`1<ReplicationSlotOptions> CreateReplicationSlot(string command, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Npgsql.Replication.ReplicationConnection/<ReadReplicationSlotInternal>d__65")]
internal Task`1<PhysicalReplicationSlot> ReadReplicationSlotInternal(string slotName, CancellationToken cancellationToken);
    internal IAsyncEnumerator`1<XLogDataMessage> StartReplicationInternalWrapper(string command, bool bypassingStream, CancellationToken cancellationToken);
    [AsyncIteratorStateMachineAttribute("Npgsql.Replication.ReplicationConnection/<StartReplicationInternal>d__67")]
internal IAsyncEnumerator`1<XLogDataMessage> StartReplicationInternal(string command, bool bypassingStream, CancellationToken cancellationToken);
    public void SetReplicationStatus(NpgsqlLogSequenceNumber lastAppliedAndFlushedLsn);
    [AsyncStateMachineAttribute("Npgsql.Replication.ReplicationConnection/<SendStatusUpdate>d__69")]
public Task SendStatusUpdate(CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Npgsql.Replication.ReplicationConnection/<SendFeedback>d__70")]
private Task SendFeedback(bool waitOnSemaphore, bool requestReply, CancellationToken cancellationToken);
    [NullableContextAttribute("2")]
[AsyncStateMachineAttribute("Npgsql.Replication.ReplicationConnection/<TimerRequestFeedback>d__71")]
private void TimerRequestFeedback(object obj);
    [NullableContextAttribute("2")]
[AsyncStateMachineAttribute("Npgsql.Replication.ReplicationConnection/<TimerSendFeedback>d__72")]
private void TimerSendFeedback(object obj);
    public Task DropReplicationSlot(string slotName, bool wait, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Npgsql.Replication.ReplicationConnection/<ReadSingleRow>d__74")]
private Task`1<Object[]> ReadSingleRow(string command, CancellationToken cancellationToken);
    private void SetTimeouts(TimeSpan readTimeout, TimeSpan writeTimeout);
    internal void CheckDisposed();
    [AsyncStateMachineAttribute("Npgsql.Replication.ReplicationConnection/<<Show>g__ShowInternal|62_0>d")]
[CompilerGeneratedAttribute]
private Task`1<string> <Show>g__ShowInternal|62_0(string parameterName, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Npgsql.Replication.ReplicationConnection/<<DropReplicationSlot>g__DropReplicationSlotInternal|73_0>d")]
[CompilerGeneratedAttribute]
private Task <DropReplicationSlot>g__DropReplicationSlotInternal|73_0(string slotName, bool wait, CancellationToken cancellationToken);
    [NullableContextAttribute("0")]
[CompilerGeneratedAttribute]
internal static Byte[] <ReadSingleRow>g__ParseBytea|74_0(ReadOnlySpan`1<byte> bytes);
    [NullableContextAttribute("0")]
[CompilerGeneratedAttribute]
internal static Byte[] <ReadSingleRow>g__ParseByteaHex|74_1(ReadOnlySpan`1<byte> inBytes);
    [NullableContextAttribute("0")]
[CompilerGeneratedAttribute]
internal static Byte[] <ReadSingleRow>g__ParseByteaEscape|74_2(ReadOnlySpan`1<byte> inBytes);
}
public abstract class Npgsql.Replication.ReplicationMessage : object {
    [CompilerGeneratedAttribute]
private NpgsqlLogSequenceNumber <WalStart>k__BackingField;
    [CompilerGeneratedAttribute]
private NpgsqlLogSequenceNumber <WalEnd>k__BackingField;
    [CompilerGeneratedAttribute]
private DateTime <ServerClock>k__BackingField;
    public NpgsqlLogSequenceNumber WalStart { get; private set; }
    public NpgsqlLogSequenceNumber WalEnd { get; private set; }
    public DateTime ServerClock { get; private set; }
    [CompilerGeneratedAttribute]
public NpgsqlLogSequenceNumber get_WalStart();
    [CompilerGeneratedAttribute]
private void set_WalStart(NpgsqlLogSequenceNumber value);
    [CompilerGeneratedAttribute]
public NpgsqlLogSequenceNumber get_WalEnd();
    [CompilerGeneratedAttribute]
private void set_WalEnd(NpgsqlLogSequenceNumber value);
    [CompilerGeneratedAttribute]
public DateTime get_ServerClock();
    [CompilerGeneratedAttribute]
private void set_ServerClock(DateTime value);
    private protected void Populate(NpgsqlLogSequenceNumber walStart, NpgsqlLogSequenceNumber walEnd, DateTime serverClock);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public abstract class Npgsql.Replication.ReplicationSlot : object {
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    public string Name { get; }
    internal ReplicationSlot(string name);
    [CompilerGeneratedAttribute]
public string get_Name();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[IsReadOnlyAttribute]
public class Npgsql.Replication.ReplicationSlotOptions : ValueType {
    [CompilerGeneratedAttribute]
private string <SlotName>k__BackingField;
    [CompilerGeneratedAttribute]
private NpgsqlLogSequenceNumber <ConsistentPoint>k__BackingField;
    [NullableAttribute("2")]
[CompilerGeneratedAttribute]
private string <SnapshotName>k__BackingField;
    public string SlotName { get; }
    public NpgsqlLogSequenceNumber ConsistentPoint { get; }
    [NullableAttribute("2")]
internal string SnapshotName { get; }
    public ReplicationSlotOptions(string slotName, string consistentPoint);
    public ReplicationSlotOptions(string slotName, NpgsqlLogSequenceNumber consistentPoint);
    internal ReplicationSlotOptions(string slotName, NpgsqlLogSequenceNumber consistentPoint, string snapshotName);
    [CompilerGeneratedAttribute]
public string get_SlotName();
    [CompilerGeneratedAttribute]
public NpgsqlLogSequenceNumber get_ConsistentPoint();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
internal string get_SnapshotName();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Npgsql.Replication.ReplicationSystemIdentification : object {
    [CompilerGeneratedAttribute]
private string <SystemId>k__BackingField;
    [CompilerGeneratedAttribute]
private UInt32 <Timeline>k__BackingField;
    [CompilerGeneratedAttribute]
private NpgsqlLogSequenceNumber <XLogPos>k__BackingField;
    [NullableAttribute("2")]
[CompilerGeneratedAttribute]
private string <DbName>k__BackingField;
    public string SystemId { get; }
    public UInt32 Timeline { get; }
    public NpgsqlLogSequenceNumber XLogPos { get; }
    [NullableAttribute("2")]
public string DbName { get; }
    internal ReplicationSystemIdentification(string systemId, UInt32 timeline, NpgsqlLogSequenceNumber xLogPos, string dbName);
    [CompilerGeneratedAttribute]
public string get_SystemId();
    [CompilerGeneratedAttribute]
public UInt32 get_Timeline();
    [CompilerGeneratedAttribute]
public NpgsqlLogSequenceNumber get_XLogPos();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public string get_DbName();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Npgsql.Replication.TestDecoding.TestDecodingAsyncEnumerable : object {
    private LogicalReplicationConnection _connection;
    private TestDecodingReplicationSlot _slot;
    private TestDecodingOptions _options;
    private CancellationToken _baseCancellationToken;
    private Nullable`1<NpgsqlLogSequenceNumber> _walLocation;
    private TestDecodingData _cachedMessage;
    internal TestDecodingAsyncEnumerable(LogicalReplicationConnection connection, TestDecodingReplicationSlot slot, TestDecodingOptions options, CancellationToken cancellationToken, Nullable`1<NpgsqlLogSequenceNumber> walLocation);
    [AsyncIteratorStateMachineAttribute("Npgsql.Replication.TestDecoding.TestDecodingAsyncEnumerable/<GetAsyncEnumerator>d__7")]
public sealed virtual IAsyncEnumerator`1<TestDecodingData> GetAsyncEnumerator(CancellationToken cancellationToken);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Npgsql.Replication.TestDecoding.TestDecodingData : ReplicationMessage {
    [CompilerGeneratedAttribute]
private string <Data>k__BackingField;
    public string Data { get; private set; }
    [CompilerGeneratedAttribute]
public string get_Data();
    [CompilerGeneratedAttribute]
private void set_Data(string value);
    internal TestDecodingData Populate(NpgsqlLogSequenceNumber walStart, NpgsqlLogSequenceNumber walEnd, DateTime serverClock, string data);
    public virtual string ToString();
    public TestDecodingData Clone();
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
public class Npgsql.Replication.TestDecoding.TestDecodingOptions : object {
    [CompilerGeneratedAttribute]
private Nullable`1<bool> <IncludeXids>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<bool> <IncludeTimestamp>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<bool> <ForceBinary>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<bool> <SkipEmptyXacts>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<bool> <OnlyLocal>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<bool> <IncludeRewrites>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<bool> <StreamChanges>k__BackingField;
    public Nullable`1<bool> IncludeXids { get; }
    public Nullable`1<bool> IncludeTimestamp { get; }
    public Nullable`1<bool> ForceBinary { get; }
    public Nullable`1<bool> SkipEmptyXacts { get; }
    public Nullable`1<bool> OnlyLocal { get; }
    public Nullable`1<bool> IncludeRewrites { get; }
    public Nullable`1<bool> StreamChanges { get; }
    public TestDecodingOptions(Nullable`1<bool> includeXids, Nullable`1<bool> includeTimestamp, Nullable`1<bool> forceBinary, Nullable`1<bool> skipEmptyXacts, Nullable`1<bool> onlyLocal, Nullable`1<bool> includeRewrites, Nullable`1<bool> streamChanges);
    [CompilerGeneratedAttribute]
public Nullable`1<bool> get_IncludeXids();
    [CompilerGeneratedAttribute]
public Nullable`1<bool> get_IncludeTimestamp();
    [CompilerGeneratedAttribute]
public Nullable`1<bool> get_ForceBinary();
    [CompilerGeneratedAttribute]
public Nullable`1<bool> get_SkipEmptyXacts();
    [CompilerGeneratedAttribute]
public Nullable`1<bool> get_OnlyLocal();
    [CompilerGeneratedAttribute]
public Nullable`1<bool> get_IncludeRewrites();
    [CompilerGeneratedAttribute]
public Nullable`1<bool> get_StreamChanges();
    [IteratorStateMachineAttribute("Npgsql.Replication.TestDecoding.TestDecodingOptions/<GetOptionPairs>d__22")]
internal IEnumerable`1<KeyValuePair`2<string, string>> GetOptionPairs();
    public sealed virtual bool Equals(TestDecodingOptions other);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
}
public class Npgsql.Replication.TestDecoding.TestDecodingReplicationSlot : LogicalReplicationSlot {
    [NullableContextAttribute("1")]
public TestDecodingReplicationSlot(string slotName);
    public TestDecodingReplicationSlot(ReplicationSlotOptions options);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ExtensionAttribute]
public static class Npgsql.Replication.TestDecodingConnectionExtensions : object {
    [AsyncStateMachineAttribute("Npgsql.Replication.TestDecodingConnectionExtensions/<CreateTestDecodingReplicationSlot>d__0")]
[ExtensionAttribute]
public static Task`1<TestDecodingReplicationSlot> CreateTestDecodingReplicationSlot(LogicalReplicationConnection connection, string slotName, bool temporarySlot, Nullable`1<LogicalSlotSnapshotInitMode> slotSnapshotInitMode, bool twoPhase, CancellationToken cancellationToken);
    [ExtensionAttribute]
public static IAsyncEnumerable`1<TestDecodingData> StartReplication(LogicalReplicationConnection connection, TestDecodingReplicationSlot slot, CancellationToken cancellationToken, TestDecodingOptions options, Nullable`1<NpgsqlLogSequenceNumber> walLocation);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[IsReadOnlyAttribute]
public class Npgsql.Replication.TimelineHistoryFile : ValueType {
    [CompilerGeneratedAttribute]
private string <FileName>k__BackingField;
    [CompilerGeneratedAttribute]
private Byte[] <Content>k__BackingField;
    public string FileName { get; }
    public Byte[] Content { get; }
    internal TimelineHistoryFile(string fileName, Byte[] content);
    [CompilerGeneratedAttribute]
public string get_FileName();
    [CompilerGeneratedAttribute]
public Byte[] get_Content();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Npgsql.Replication.XLogDataMessage : ReplicationMessage {
    [CompilerGeneratedAttribute]
private Stream <Data>k__BackingField;
    public Stream Data { get; private set; }
    [CompilerGeneratedAttribute]
public Stream get_Data();
    [CompilerGeneratedAttribute]
private void set_Data(Stream value);
    internal XLogDataMessage Populate(NpgsqlLogSequenceNumber walStart, NpgsqlLogSequenceNumber walEnd, DateTime serverClock, Stream data);
}
internal enum Npgsql.ReplicationMode : Enum {
    public int value__;
    public static ReplicationMode Off;
    public static ReplicationMode Physical;
    public static ReplicationMode Logical;
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Npgsql.Schema.DbColumnSchemaGenerator : object {
    private RowDescriptionMessage _rowDescription;
    private NpgsqlConnection _connection;
    private bool _fetchAdditionalInfo;
    internal DbColumnSchemaGenerator(NpgsqlConnection connection, RowDescriptionMessage rowDescription, bool fetchAdditionalInfo);
    private static string GenerateColumnsQuery(Version pgVersion, string columnFieldFilter);
    private static string GenerateOldColumnsQuery(string columnFieldFilter);
    [AsyncStateMachineAttribute("Npgsql.Schema.DbColumnSchemaGenerator/<GetColumnSchema>d__6")]
internal Task`1<ReadOnlyCollection`1<NpgsqlDbColumn>> GetColumnSchema(bool async, CancellationToken cancellationToken);
    private NpgsqlDbColumn LoadColumnDefinition(NpgsqlDataReader reader, NpgsqlDatabaseInfo databaseInfo, bool oldQueryMode);
    private NpgsqlDbColumn SetUpNonColumnField(FieldDescription field);
    private void ColumnPostConfig(NpgsqlDbColumn column, int typeModifier);
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
[DefaultMemberAttribute("Item")]
public class Npgsql.Schema.NpgsqlDbColumn : DbColumn {
    [NullableAttribute("1")]
[CompilerGeneratedAttribute]
private PostgresType <PostgresType>k__BackingField;
    [CompilerGeneratedAttribute]
private UInt32 <TypeOID>k__BackingField;
    [CompilerGeneratedAttribute]
private UInt32 <TableOID>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<short> <ColumnAttributeNumber>k__BackingField;
    [CompilerGeneratedAttribute]
private string <DefaultValue>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<NpgsqlDbType> <NpgsqlDbType>k__BackingField;
    public Nullable`1<bool> AllowDBNull { get; protected internal set; }
    [NullableAttribute("1")]
public string BaseCatalogName { get; protected internal set; }
    public string BaseColumnName { get; protected internal set; }
    public string BaseSchemaName { get; protected internal set; }
    [NullableAttribute("1")]
public string BaseServerName { get; protected internal set; }
    public string BaseTableName { get; protected internal set; }
    [NullableAttribute("1")]
public string ColumnName { get; protected internal set; }
    public Nullable`1<int> ColumnOrdinal { get; protected internal set; }
    public Nullable`1<int> ColumnSize { get; protected internal set; }
    public Nullable`1<bool> IsAliased { get; protected internal set; }
    public Nullable`1<bool> IsAutoIncrement { get; protected internal set; }
    public Nullable`1<bool> IsIdentity { get; protected internal set; }
    public Nullable`1<bool> IsKey { get; protected internal set; }
    public Nullable`1<bool> IsLong { get; protected internal set; }
    public Nullable`1<bool> IsReadOnly { get; protected internal set; }
    public Nullable`1<bool> IsUnique { get; protected internal set; }
    public Nullable`1<int> NumericPrecision { get; protected internal set; }
    public Nullable`1<int> NumericScale { get; protected internal set; }
    public string UdtAssemblyQualifiedName { get; protected internal set; }
    public Type DataType { get; protected internal set; }
    [NullableAttribute("1")]
public string DataTypeName { get; protected internal set; }
    [NullableAttribute("1")]
public PostgresType PostgresType { get; internal set; }
    public UInt32 TypeOID { get; internal set; }
    public UInt32 TableOID { get; internal set; }
    public Nullable`1<short> ColumnAttributeNumber { get; internal set; }
    public string DefaultValue { get; internal set; }
    public Nullable`1<NpgsqlDbType> NpgsqlDbType { get; internal set; }
    public object Item { get; }
    [NullableContextAttribute("1")]
internal NpgsqlDbColumn Clone();
    public Nullable`1<bool> get_AllowDBNull();
    protected internal void set_AllowDBNull(Nullable`1<bool> value);
    [NullableContextAttribute("1")]
public string get_BaseCatalogName();
    [NullableContextAttribute("1")]
protected internal void set_BaseCatalogName(string value);
    public string get_BaseColumnName();
    protected internal void set_BaseColumnName(string value);
    public string get_BaseSchemaName();
    protected internal void set_BaseSchemaName(string value);
    [NullableContextAttribute("1")]
public string get_BaseServerName();
    [NullableContextAttribute("1")]
protected internal void set_BaseServerName(string value);
    public string get_BaseTableName();
    protected internal void set_BaseTableName(string value);
    [NullableContextAttribute("1")]
public string get_ColumnName();
    [NullableContextAttribute("1")]
protected internal void set_ColumnName(string value);
    public Nullable`1<int> get_ColumnOrdinal();
    protected internal void set_ColumnOrdinal(Nullable`1<int> value);
    public Nullable`1<int> get_ColumnSize();
    protected internal void set_ColumnSize(Nullable`1<int> value);
    public Nullable`1<bool> get_IsAliased();
    protected internal void set_IsAliased(Nullable`1<bool> value);
    public Nullable`1<bool> get_IsAutoIncrement();
    protected internal void set_IsAutoIncrement(Nullable`1<bool> value);
    public Nullable`1<bool> get_IsIdentity();
    protected internal void set_IsIdentity(Nullable`1<bool> value);
    public Nullable`1<bool> get_IsKey();
    protected internal void set_IsKey(Nullable`1<bool> value);
    public Nullable`1<bool> get_IsLong();
    protected internal void set_IsLong(Nullable`1<bool> value);
    public Nullable`1<bool> get_IsReadOnly();
    protected internal void set_IsReadOnly(Nullable`1<bool> value);
    public Nullable`1<bool> get_IsUnique();
    protected internal void set_IsUnique(Nullable`1<bool> value);
    public Nullable`1<int> get_NumericPrecision();
    protected internal void set_NumericPrecision(Nullable`1<int> value);
    public Nullable`1<int> get_NumericScale();
    protected internal void set_NumericScale(Nullable`1<int> value);
    public string get_UdtAssemblyQualifiedName();
    protected internal void set_UdtAssemblyQualifiedName(string value);
    public Type get_DataType();
    protected internal void set_DataType(Type value);
    [NullableContextAttribute("1")]
public string get_DataTypeName();
    [NullableContextAttribute("1")]
protected internal void set_DataTypeName(string value);
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
public PostgresType get_PostgresType();
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
internal void set_PostgresType(PostgresType value);
    [CompilerGeneratedAttribute]
public UInt32 get_TypeOID();
    [CompilerGeneratedAttribute]
internal void set_TypeOID(UInt32 value);
    [CompilerGeneratedAttribute]
public UInt32 get_TableOID();
    [CompilerGeneratedAttribute]
internal void set_TableOID(UInt32 value);
    [CompilerGeneratedAttribute]
public Nullable`1<short> get_ColumnAttributeNumber();
    [CompilerGeneratedAttribute]
internal void set_ColumnAttributeNumber(Nullable`1<short> value);
    [CompilerGeneratedAttribute]
public string get_DefaultValue();
    [CompilerGeneratedAttribute]
internal void set_DefaultValue(string value);
    [CompilerGeneratedAttribute]
public Nullable`1<NpgsqlDbType> get_NpgsqlDbType();
    [CompilerGeneratedAttribute]
internal void set_NpgsqlDbType(Nullable`1<NpgsqlDbType> value);
    [NullableContextAttribute("1")]
public virtual object get_Item(string propertyName);
}
public enum Npgsql.ServerCompatibilityMode : Enum {
    public int value__;
    public static ServerCompatibilityMode None;
    public static ServerCompatibilityMode Redshift;
    public static ServerCompatibilityMode NoTypeLoading;
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Npgsql.SqlQueryParser : object {
    [CompilerGeneratedAttribute]
private static NpgsqlParameterCollection <EmptyParameters>k__BackingField;
    private Dictionary`2<string, int> _paramIndexMap;
    private StringBuilder _rewrittenSql;
    private static NpgsqlParameterCollection EmptyParameters { get; }
    private static SqlQueryParser();
    [CompilerGeneratedAttribute]
private static NpgsqlParameterCollection get_EmptyParameters();
    [NullableContextAttribute("2")]
internal void ParseRawQuery(NpgsqlCommand command, bool standardConformingStrings, bool deriveParameters);
    [NullableContextAttribute("2")]
internal void ParseRawQuery(NpgsqlBatchCommand batchCommand, bool standardConformingStrings, bool deriveParameters);
    [NullableContextAttribute("2")]
private void ParseRawQuery(NpgsqlCommand command, NpgsqlBatchCommand batchCommand, bool standardConformingStrings, bool deriveParameters);
    private static bool IsLetter(char ch);
    private static bool IsIdentifierStart(char ch);
    private static bool IsDollarTagIdentifier(char ch);
    private static bool IsIdentifier(char ch);
    private static bool IsParamNameChar(char ch);
    [CompilerGeneratedAttribute]
internal static void <ParseRawQuery>g__MoveToNextBatchCommand|7_0(<>c__DisplayClass7_0& );
}
public enum Npgsql.SslMode : Enum {
    public int value__;
    public static SslMode Disable;
    public static SslMode Allow;
    public static SslMode Prefer;
    public static SslMode Require;
    public static SslMode VerifyCA;
    public static SslMode VerifyFull;
}
internal enum Npgsql.StatementOrPortal : Enum {
    public byte value__;
    public static StatementOrPortal Statement;
    public static StatementOrPortal Portal;
}
public enum Npgsql.StatementType : Enum {
    public int value__;
    public static StatementType Unknown;
    public static StatementType Select;
    public static StatementType Insert;
    public static StatementType Delete;
    public static StatementType Update;
    public static StatementType CreateTableAs;
    public static StatementType Move;
    public static StatementType Fetch;
    public static StatementType Copy;
    public static StatementType Other;
    public static StatementType Merge;
    public static StatementType Call;
}
public enum Npgsql.TargetSessionAttributes : Enum {
    public byte value__;
    public static TargetSessionAttributes Any;
    public static TargetSessionAttributes ReadWrite;
    public static TargetSessionAttributes ReadOnly;
    public static TargetSessionAttributes Primary;
    public static TargetSessionAttributes Standby;
    public static TargetSessionAttributes PreferPrimary;
    public static TargetSessionAttributes PreferStandby;
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal static class Npgsql.TaskTimeoutAndCancellation : object {
    [AsyncStateMachineAttribute("Npgsql.TaskTimeoutAndCancellation/<ExecuteAsync>d__0`1")]
internal static Task`1<TResult> ExecuteAsync(Func`2<CancellationToken, Task`1<TResult>> getTaskFunc, NpgsqlTimeout timeout, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Npgsql.TaskTimeoutAndCancellation/<ExecuteAsync>d__1")]
internal static Task ExecuteAsync(Func`2<CancellationToken, Task> getTaskFunc, NpgsqlTimeout timeout, CancellationToken cancellationToken);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal static class Npgsql.ThrowHelper : object {
    [DoesNotReturnAttribute]
internal static void ThrowArgumentOutOfRangeException();
    [DoesNotReturnAttribute]
internal static void ThrowArgumentOutOfRangeException(string paramName, string message);
    [DoesNotReturnAttribute]
internal static void ThrowArgumentOutOfRangeException(string paramName, string message, object argument);
    [DoesNotReturnAttribute]
internal static void ThrowUnreachableException(string message, object argument);
    [DoesNotReturnAttribute]
internal static void ThrowInvalidOperationException();
    [DoesNotReturnAttribute]
internal static void ThrowInvalidOperationException(string message);
    [DoesNotReturnAttribute]
internal static void ThrowInvalidOperationException(string message, object argument);
    [NullableContextAttribute("2")]
[DoesNotReturnAttribute]
internal static void ThrowObjectDisposedException(string objectName);
    [DoesNotReturnAttribute]
internal static void ThrowObjectDisposedException(string objectName, string message);
    [DoesNotReturnAttribute]
internal static void ThrowObjectDisposedException(string objectName, Exception innerException);
    [DoesNotReturnAttribute]
internal static void ThrowInvalidCastException(string message, object argument);
    [DoesNotReturnAttribute]
internal static void ThrowInvalidCastException_NoValue(FieldDescription field);
    [DoesNotReturnAttribute]
internal static void ThrowInvalidCastException(string message);
    [DoesNotReturnAttribute]
internal static void ThrowInvalidCastException_NoValue();
    [DoesNotReturnAttribute]
internal static void ThrowNpgsqlException(string message);
    [DoesNotReturnAttribute]
internal static void ThrowNpgsqlException(string message, Exception innerException);
    [DoesNotReturnAttribute]
internal static void ThrowNpgsqlOperationInProgressException(NpgsqlCommand command);
    [DoesNotReturnAttribute]
internal static void ThrowNpgsqlOperationInProgressException(ConnectorState state);
    [DoesNotReturnAttribute]
internal static void ThrowArgumentException(string message);
    [DoesNotReturnAttribute]
internal static void ThrowArgumentException(string message, string paramName);
    [DoesNotReturnAttribute]
internal static void ThrowArgumentNullException(string paramName);
    [DoesNotReturnAttribute]
internal static void ThrowArgumentNullException(string message, string paramName);
    [DoesNotReturnAttribute]
internal static void ThrowIndexOutOfRangeException(string message);
    [NullableContextAttribute("2")]
[DoesNotReturnAttribute]
internal static void ThrowNotSupportedException(string message);
    [DoesNotReturnAttribute]
internal static void ThrowNpgsqlExceptionWithInnerTimeoutException(string message);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Npgsql.TypeMapping.GlobalTypeMapper : object {
    private UserTypeMapper _userTypeMapper;
    private List`1<PgTypeInfoResolverFactory> _pluginResolverFactories;
    private ReaderWriterLockSlim _lock;
    private PgTypeInfoResolverFactory[] _typeMappingResolvers;
    [CompilerGeneratedAttribute]
private List`1<HackyEnumTypeMapping> <HackyEnumTypeMappings>k__BackingField;
    [NullableAttribute("2")]
private PgSerializerOptions _typeMappingOptions;
    [NullableAttribute("2")]
private Func`1<PgTypeInfoResolverChainBuilder> _builderFactory;
    [NullableAttribute("2")]
private JsonSerializerOptions _jsonSerializerOptions;
    [CompilerGeneratedAttribute]
private static GlobalTypeMapper <Instance>k__BackingField;
    internal List`1<HackyEnumTypeMapping> HackyEnumTypeMappings { get; }
    private PgSerializerOptions TypeMappingOptions { get; }
    internal static GlobalTypeMapper Instance { get; }
    public INpgsqlNameTranslator DefaultNameTranslator { get; public set; }
    private static GlobalTypeMapper();
    [CompilerGeneratedAttribute]
internal List`1<HackyEnumTypeMapping> get_HackyEnumTypeMappings();
    internal IEnumerable`1<PgTypeInfoResolverFactory> GetPluginResolverFactories();
    [NullableContextAttribute("2")]
internal PgTypeInfoResolverFactory GetUserMappingsResolverFactory();
    internal void AddGlobalTypeMappingResolvers(PgTypeInfoResolverFactory[] factories, Func`1<PgTypeInfoResolverChainBuilder> builderFactory, bool overwrite);
    private void ResetTypeMappingCache();
    private PgSerializerOptions get_TypeMappingOptions();
    internal Nullable`1<DataTypeName> FindDataTypeName(Type type, object value);
    [CompilerGeneratedAttribute]
internal static GlobalTypeMapper get_Instance();
    public sealed virtual void AddTypeInfoResolverFactory(PgTypeInfoResolverFactory factory);
    private void ReplaceTypeInfoResolverFactory(PgTypeInfoResolverFactory factory);
    public sealed virtual void Reset();
    public sealed virtual INpgsqlNameTranslator get_DefaultNameTranslator();
    public sealed virtual void set_DefaultNameTranslator(INpgsqlNameTranslator value);
    public sealed virtual INpgsqlTypeMapper ConfigureJsonOptions(JsonSerializerOptions serializerOptions);
    [RequiresUnreferencedCodeAttribute("Json serializer may perform reflection on trimmed types.")]
[RequiresDynamicCodeAttribute("Serializing arbitrary types to json can require creating new generic types or methods, which requires creating code at runtime. This may not work when AOT compiling.")]
public sealed virtual INpgsqlTypeMapper EnableDynamicJson(Type[] jsonbClrTypes, Type[] jsonClrTypes);
    [RequiresUnreferencedCodeAttribute("The mapping of PostgreSQL records as .NET tuples requires reflection usage which is incompatible with trimming.")]
[RequiresDynamicCodeAttribute("The mapping of PostgreSQL records as .NET tuples requires dynamic code usage which is incompatible with NativeAOT.")]
public sealed virtual INpgsqlTypeMapper EnableRecordsAsTuples();
    [RequiresUnreferencedCodeAttribute("The use of unmapped enums, ranges or multiranges requires reflection usage which is incompatible with trimming.")]
[RequiresDynamicCodeAttribute("The use of unmapped enums, ranges or multiranges requires dynamic code usage which is incompatible with NativeAOT.")]
public sealed virtual INpgsqlTypeMapper EnableUnmappedTypes();
    public sealed virtual INpgsqlTypeMapper MapEnum(string pgName, INpgsqlNameTranslator nameTranslator);
    [NullableContextAttribute("2")]
public sealed virtual bool UnmapEnum(string pgName, INpgsqlNameTranslator nameTranslator);
    [RequiresDynamicCodeAttribute("Calling MapEnum with a Type can require creating new generic types or methods. This may not work when AOT compiling.")]
public sealed virtual INpgsqlTypeMapper MapEnum(Type clrType, string pgName, INpgsqlNameTranslator nameTranslator);
    [NullableContextAttribute("2")]
public sealed virtual bool UnmapEnum(Type clrType, string pgName, INpgsqlNameTranslator nameTranslator);
    [NullableContextAttribute("2")]
[RequiresDynamicCodeAttribute("Mapping composite types involves serializing arbitrary types which can require creating new generic types or methods. This is currently unsupported with NativeAOT, vote on issue #5303 if this is important to you.")]
public sealed virtual INpgsqlTypeMapper MapComposite(string pgName, INpgsqlNameTranslator nameTranslator);
    [NullableContextAttribute("2")]
[RequiresDynamicCodeAttribute("Mapping composite types involves serializing arbitrary types which can require creating new generic types or methods. This is currently unsupported with NativeAOT, vote on issue #5303 if this is important to you.")]
public sealed virtual bool UnmapComposite(string pgName, INpgsqlNameTranslator nameTranslator);
    [RequiresDynamicCodeAttribute("Mapping composite types involves serializing arbitrary types which can require creating new generic types or methods. This is currently unsupported with NativeAOT, vote on issue #5303 if this is important to you.")]
public sealed virtual INpgsqlTypeMapper MapComposite(Type clrType, string pgName, INpgsqlNameTranslator nameTranslator);
    [NullableContextAttribute("2")]
[RequiresDynamicCodeAttribute("Mapping composite types involves serializing arbitrary types which can require creating new generic types or methods. This is currently unsupported with NativeAOT, vote on issue #5303 if this is important to you.")]
public sealed virtual bool UnmapComposite(Type clrType, string pgName, INpgsqlNameTranslator nameTranslator);
}
[NullableContextAttribute("1")]
public interface Npgsql.TypeMapping.INpgsqlTypeMapper {
    public INpgsqlNameTranslator DefaultNameTranslator { get; public set; }
    public abstract virtual INpgsqlNameTranslator get_DefaultNameTranslator();
    public abstract virtual void set_DefaultNameTranslator(INpgsqlNameTranslator value);
    public abstract virtual INpgsqlTypeMapper MapEnum(string pgName, INpgsqlNameTranslator nameTranslator);
    [NullableContextAttribute("2")]
public abstract virtual bool UnmapEnum(string pgName, INpgsqlNameTranslator nameTranslator);
    [RequiresDynamicCodeAttribute("Calling MapEnum with a Type can require creating new generic types or methods. This may not work when AOT compiling.")]
public abstract virtual INpgsqlTypeMapper MapEnum(Type clrType, string pgName, INpgsqlNameTranslator nameTranslator);
    [NullableContextAttribute("2")]
public abstract virtual bool UnmapEnum(Type clrType, string pgName, INpgsqlNameTranslator nameTranslator);
    [NullableContextAttribute("2")]
[RequiresDynamicCodeAttribute("Mapping composite types involves serializing arbitrary types which can require creating new generic types or methods. This is currently unsupported with NativeAOT, vote on issue #5303 if this is important to you.")]
public abstract virtual INpgsqlTypeMapper MapComposite(string pgName, INpgsqlNameTranslator nameTranslator);
    [NullableContextAttribute("2")]
[RequiresDynamicCodeAttribute("Mapping composite types involves serializing arbitrary types which can require creating new generic types or methods. This is currently unsupported with NativeAOT, vote on issue #5303 if this is important to you.")]
public abstract virtual bool UnmapComposite(string pgName, INpgsqlNameTranslator nameTranslator);
    [RequiresDynamicCodeAttribute("Mapping composite types involves serializing arbitrary types which can require creating new generic types or methods. This is currently unsupported with NativeAOT, vote on issue #5303 if this is important to you.")]
public abstract virtual INpgsqlTypeMapper MapComposite(Type clrType, string pgName, INpgsqlNameTranslator nameTranslator);
    [NullableContextAttribute("2")]
[RequiresDynamicCodeAttribute("Mapping composite types involves serializing arbitrary types which can require creating new generic types or methods. This is currently unsupported with NativeAOT, vote on issue #5303 if this is important to you.")]
public abstract virtual bool UnmapComposite(Type clrType, string pgName, INpgsqlNameTranslator nameTranslator);
    public abstract virtual void AddTypeInfoResolverFactory(PgTypeInfoResolverFactory factory);
    public abstract virtual INpgsqlTypeMapper ConfigureJsonOptions(JsonSerializerOptions serializerOptions);
    [RequiresUnreferencedCodeAttribute("Json serializer may perform reflection on trimmed types.")]
[RequiresDynamicCodeAttribute("Serializing arbitrary types to json can require creating new generic types or methods, which requires creating code at runtime. This may not work when AOT compiling.")]
public abstract virtual INpgsqlTypeMapper EnableDynamicJson(Type[] jsonbClrTypes, Type[] jsonClrTypes);
    [RequiresUnreferencedCodeAttribute("The mapping of PostgreSQL records as .NET tuples requires reflection usage which is incompatible with trimming.")]
[RequiresDynamicCodeAttribute("The mapping of PostgreSQL records as .NET tuples requires dynamic code usage which is incompatible with NativeAOT.")]
public abstract virtual INpgsqlTypeMapper EnableRecordsAsTuples();
    [RequiresUnreferencedCodeAttribute("The use of unmapped enums, ranges or multiranges requires reflection usage which is incompatible with trimming.")]
[RequiresDynamicCodeAttribute("The use of unmapped enums, ranges or multiranges requires dynamic code usage which is incompatible with NativeAOT.")]
public abstract virtual INpgsqlTypeMapper EnableUnmappedTypes();
    public abstract virtual void Reset();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Npgsql.TypeMapping.UserTypeMapper : PgTypeInfoResolverFactory {
    private List`1<UserTypeMapping> _mappings;
    [CompilerGeneratedAttribute]
private INpgsqlNameTranslator <DefaultNameTranslator>k__BackingField;
    public IList`1<UserTypeMapping> Items { get; }
    public INpgsqlNameTranslator DefaultNameTranslator { get; public set; }
    private UserTypeMapper(IEnumerable`1<UserTypeMapping> mappings);
    public IList`1<UserTypeMapping> get_Items();
    [CompilerGeneratedAttribute]
public INpgsqlNameTranslator get_DefaultNameTranslator();
    [CompilerGeneratedAttribute]
public void set_DefaultNameTranslator(INpgsqlNameTranslator value);
    public UserTypeMapper Clone();
    public UserTypeMapper MapEnum(string pgName, INpgsqlNameTranslator nameTranslator);
    [NullableContextAttribute("2")]
public bool UnmapEnum(string pgName, INpgsqlNameTranslator nameTranslator);
    [UnconditionalSuppressMessageAttribute("Trimming", "IL2111")]
[RequiresDynamicCodeAttribute("Calling MapEnum with a Type can require creating new generic types or methods. This may not work when AOT compiling.")]
public UserTypeMapper MapEnum(Type clrType, string pgName, INpgsqlNameTranslator nameTranslator);
    [NullableContextAttribute("2")]
public bool UnmapEnum(Type clrType, string pgName, INpgsqlNameTranslator nameTranslator);
    [RequiresDynamicCodeAttribute("Mapping composite types involves serializing arbitrary types which can require creating new generic types or methods. This is currently unsupported with NativeAOT, vote on issue #5303 if this is important to you.")]
public UserTypeMapper MapComposite(string pgName, INpgsqlNameTranslator nameTranslator);
    [NullableContextAttribute("2")]
[RequiresDynamicCodeAttribute("Mapping composite types involves serializing arbitrary types which can require creating new generic types or methods. This is currently unsupported with NativeAOT, vote on issue #5303 if this is important to you.")]
public UserTypeMapper MapStructComposite(string pgName, INpgsqlNameTranslator nameTranslator);
    [UnconditionalSuppressMessageAttribute("Trimming", "IL2111")]
[RequiresDynamicCodeAttribute("Mapping composite types involves serializing arbitrary types which can require creating new generic types or methods. This is currently unsupported with NativeAOT, vote on issue #5303 if this is important to you.")]
public UserTypeMapper MapComposite(Type clrType, string pgName, INpgsqlNameTranslator nameTranslator);
    [NullableContextAttribute("2")]
public bool UnmapComposite(string pgName, INpgsqlNameTranslator nameTranslator);
    [NullableContextAttribute("2")]
public bool UnmapStructComposite(string pgName, INpgsqlNameTranslator nameTranslator);
    [NullableContextAttribute("2")]
public bool UnmapComposite(Type clrType, string pgName, INpgsqlNameTranslator nameTranslator);
    private bool Unmap(Type type, String& resolvedName, string pgName, INpgsqlNameTranslator nameTranslator);
    private static string GetPgName(Type type, INpgsqlNameTranslator nameTranslator);
    public virtual IPgTypeInfoResolver CreateResolver();
    public virtual IPgTypeInfoResolver CreateArrayResolver();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public abstract class Npgsql.TypeMapping.UserTypeMapping : object {
    [CompilerGeneratedAttribute]
private string <PgTypeName>k__BackingField;
    [CompilerGeneratedAttribute]
private Type <ClrType>k__BackingField;
    public string PgTypeName { get; }
    public Type ClrType { get; }
    internal UserTypeMapping(string pgTypeName, Type type);
    [CompilerGeneratedAttribute]
public string get_PgTypeName();
    [CompilerGeneratedAttribute]
public Type get_ClrType();
    internal abstract virtual void AddMapping(TypeInfoMappingCollection mappings);
    internal abstract virtual void AddArrayMapping(TypeInfoMappingCollection mappings);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Npgsql.UnpooledDataSource : NpgsqlDataSource {
    private Int32 modreq(System.Runtime.CompilerServices.IsVolatile) _numConnectors;
    [TupleElementNamesAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[NullableAttribute("0")]
internal ValueTuple`3<int, int, int> Statistics { get; }
    internal bool OwnsConnectors { get; }
    public UnpooledDataSource(NpgsqlConnectionStringBuilder settings, NpgsqlDataSourceConfiguration dataSourceConfig);
    [NullableContextAttribute("0")]
internal virtual ValueTuple`3<int, int, int> get_Statistics();
    internal virtual bool get_OwnsConnectors();
    [AsyncStateMachineAttribute("Npgsql.UnpooledDataSource/<Get>d__6")]
internal virtual ValueTask`1<NpgsqlConnector> Get(NpgsqlConnection conn, NpgsqlTimeout timeout, bool async, CancellationToken cancellationToken);
    [NullableContextAttribute("2")]
internal virtual bool TryGetIdleConnector(NpgsqlConnector& connector);
    internal virtual ValueTask`1<NpgsqlConnector> OpenNewConnector(NpgsqlConnection conn, NpgsqlTimeout timeout, bool async, CancellationToken cancellationToken);
    internal virtual void Return(NpgsqlConnector connector);
    internal virtual void Clear();
}
[ExtensionAttribute]
internal static class Npgsql.Util.EnumerableExtensions : object {
    [NullableContextAttribute("1")]
[ExtensionAttribute]
internal static string Join(IEnumerable`1<string> values, string separator);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Npgsql.Util.ManualResetValueTaskSource`1 : object {
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private ManualResetValueTaskSourceCore`1<T> _core;
    public bool RunContinuationsAsynchronously { get; public set; }
    public short Version { get; }
    public bool get_RunContinuationsAsynchronously();
    public void set_RunContinuationsAsynchronously(bool value);
    public short get_Version();
    public void Reset();
    public void SetResult(T result);
    public void SetException(Exception error);
    public sealed virtual T GetResult(short token);
    private sealed virtual override void System.Threading.Tasks.Sources.IValueTaskSource.GetResult(short token);
    public sealed virtual ValueTaskSourceStatus GetStatus(short token);
    [NullableContextAttribute("2")]
public sealed virtual void OnCompleted(Action`1<object> continuation, object state, short token, ValueTaskSourceOnCompletedFlags flags);
}
[IsReadOnlyAttribute]
public class Npgsql.Util.NpgsqlTimeout : ValueType {
    private DateTime _expiration;
    internal static NpgsqlTimeout Infinite;
    internal bool IsSet { get; }
    internal bool HasExpired { get; }
    internal NpgsqlTimeout(TimeSpan expiration);
    private static NpgsqlTimeout();
    internal void Check();
    [NullableContextAttribute("1")]
internal void CheckAndApply(NpgsqlConnector connector);
    internal bool get_IsSet();
    internal bool get_HasExpired();
    internal TimeSpan CheckAndGetTimeLeft();
}
internal class Npgsql.Util.ResettableCancellationTokenSource : object {
    private bool isDisposed;
    [CompilerGeneratedAttribute]
private TimeSpan <Timeout>k__BackingField;
    [NullableAttribute("1")]
private CancellationTokenSource _cts;
    private Nullable`1<CancellationTokenRegistration> _registration;
    [NullableAttribute("1")]
private object lockObject;
    public TimeSpan Timeout { get; public set; }
    public CancellationToken Token { get; }
    public bool IsCancellationRequested { get; }
    public ResettableCancellationTokenSource(TimeSpan timeout);
    [CompilerGeneratedAttribute]
public TimeSpan get_Timeout();
    [CompilerGeneratedAttribute]
public void set_Timeout(TimeSpan value);
    public CancellationToken Start(CancellationToken cancellationToken);
    public void RestartTimeoutWithoutReset();
    public CancellationToken Reset();
    public void ResetCts();
    public void Stop();
    public void Cancel();
    public void CancelAfter(int delay);
    public CancellationToken get_Token();
    public bool get_IsCancellationRequested();
    public sealed virtual void Dispose();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal static class Npgsql.Util.Statics : object {
    internal static bool EnableAssertions;
    internal static bool LegacyTimestampBehavior;
    internal static bool DisableDateTimeInfinityConversions;
    private static Statics();
    internal static T Expect(IBackendMessage msg, NpgsqlConnector connector);
    internal static T ExpectAny(IBackendMessage msg, NpgsqlConnector connector);
    [DoesNotReturnAttribute]
private static void ThrowIfMsgWrongType(IBackendMessage msg, NpgsqlConnector connector);
    [ConditionalAttribute("DEBUG")]
internal static void ValidateBackendMessageCode(BackendMessageCode code);
    [CompilerGeneratedAttribute]
internal static void <ValidateBackendMessageCode>g__ThrowUnknownMessageCode|7_0(BackendMessageCode code);
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
internal abstract class Npgsql.Util.StrongBox : object {
    public bool HasValue { get; }
    public object Value { get; public set; }
    public abstract virtual bool get_HasValue();
    public abstract virtual object get_Value();
    public abstract virtual void set_Value(object value);
    public abstract virtual void Clear();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Npgsql.Util.StrongBox`1 : StrongBox {
    private bool _hasValue;
    [MaybeNullAttribute]
private T _typedValue;
    public T TypedValue { get; public set; }
    public bool HasValue { get; }
    [NullableAttribute("2")]
public object Value { get; public set; }
    public T get_TypedValue();
    public void set_TypedValue(T value);
    public virtual bool get_HasValue();
    [NullableContextAttribute("2")]
public virtual object get_Value();
    [NullableContextAttribute("2")]
public virtual void set_Value(object value);
    public virtual void Clear();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Npgsql.Util.SubReadStream : Stream {
    private long _startInSuperStream;
    private long _positionInSuperStream;
    private long _endInSuperStream;
    private Stream _superStream;
    private bool _canSeek;
    private bool _isDisposed;
    public long Length { get; }
    public long Position { get; public set; }
    public bool CanRead { get; }
    public bool CanSeek { get; }
    public bool CanWrite { get; }
    public SubReadStream(Stream superStream, long maxLength);
    public SubReadStream(Stream superStream, long startPosition, long maxLength);
    public virtual long get_Length();
    public virtual long get_Position();
    public virtual void set_Position(long value);
    public virtual bool get_CanRead();
    public virtual bool get_CanSeek();
    public virtual bool get_CanWrite();
    private void ThrowIfDisposed();
    private void ThrowIfCantRead();
    public virtual int Read(Byte[] buffer, int offset, int count);
    [NullableContextAttribute("0")]
public virtual int Read(Span`1<byte> destination);
    public virtual int ReadByte();
    public virtual Task`1<int> ReadAsync(Byte[] buffer, int offset, int count, CancellationToken cancellationToken);
    [NullableContextAttribute("0")]
public virtual ValueTask`1<int> ReadAsync(Memory`1<byte> buffer, CancellationToken cancellationToken);
    public virtual long Seek(long offset, SeekOrigin origin);
    public virtual void SetLength(long value);
    public virtual void Write(Byte[] buffer, int offset, int count);
    public virtual void Flush();
    protected virtual void Dispose(bool disposing);
    [NullableContextAttribute("0")]
[AsyncStateMachineAttribute("Npgsql.Util.SubReadStream/<<ReadAsync>g__Core|25_0>d")]
[CompilerGeneratedAttribute]
private ValueTask`1<int> <ReadAsync>g__Core|25_0(Memory`1<byte> buffer, CancellationToken cancellationToken);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[IsReadOnlyAttribute]
internal class Npgsql.Util.TaskSchedulerAwaitable : ValueType {
    private TaskScheduler _scheduler;
    public bool IsCompleted { get; }
    public TaskSchedulerAwaitable(TaskScheduler scheduler);
    public void GetResult();
    public bool get_IsCompleted();
    public sealed virtual void OnCompleted(Action continuation);
    public sealed virtual void UnsafeOnCompleted(Action continuation);
    public TaskSchedulerAwaitable GetAwaiter();
    [CompilerGeneratedAttribute]
[ConditionalAttribute("DEBUG")]
internal static void <OnCompleted>g__OnFaulted|5_0(Task task);
}
[ExtensionAttribute]
internal static class Npgsql.Util.VersionExtensions : object {
    [NullableContextAttribute("1")]
[ExtensionAttribute]
public static bool IsGreaterOrEqual(Version version, int major, int minor);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Npgsql.VolatileResourceManager : object {
    private NpgsqlConnector _connector;
    private NpgsqlDataSource _dataSource;
    private Transaction _transaction;
    private string _txId;
    private NpgsqlTransaction _localTx;
    [NullableAttribute("2")]
private string _preparedTxName;
    private bool _isDisposed;
    private ILogger _transactionLogger;
    private static int MaximumRollbackAttempts;
    private bool IsPrepared { get; }
    internal VolatileResourceManager(NpgsqlConnection connection, Transaction transaction);
    private bool get_IsPrepared();
    internal void Init();
    public sealed virtual void SinglePhaseCommit(SinglePhaseEnlistment singlePhaseEnlistment);
    public sealed virtual void Prepare(PreparingEnlistment preparingEnlistment);
    [UnconditionalSuppressMessageAttribute("Trimming", "IL2026")]
[UnconditionalSuppressMessageAttribute("Aot", "IL3050")]
public sealed virtual void Commit(Enlistment enlistment);
    public sealed virtual void Rollback(Enlistment enlistment);
    public sealed virtual void InDoubt(Enlistment enlistment);
    private void RollbackLocal();
    private void RollbackTwoPhase();
    private void Dispose();
    private void CheckDisposed();
    private static IsolationLevel ConvertIsolationLevel(IsolationLevel isolationLevel);
}
public class NpgsqlTypes.NpgsqlBox : ValueType {
    private NpgsqlPoint _upperRight;
    private NpgsqlPoint _lowerLeft;
    public NpgsqlPoint UpperRight { get; public set; }
    public NpgsqlPoint LowerLeft { get; public set; }
    public double Left { get; }
    public double Right { get; }
    public double Bottom { get; }
    public double Top { get; }
    public double Width { get; }
    public double Height { get; }
    public bool IsEmpty { get; }
    public NpgsqlBox(NpgsqlPoint upperRight, NpgsqlPoint lowerLeft);
    public NpgsqlBox(double top, double right, double bottom, double left);
    public NpgsqlPoint get_UpperRight();
    public void set_UpperRight(NpgsqlPoint value);
    public NpgsqlPoint get_LowerLeft();
    public void set_LowerLeft(NpgsqlPoint value);
    public double get_Left();
    public double get_Right();
    public double get_Bottom();
    public double get_Top();
    public double get_Width();
    public double get_Height();
    public bool get_IsEmpty();
    public sealed virtual bool Equals(NpgsqlBox other);
    [NullableContextAttribute("2")]
public virtual bool Equals(object obj);
    public static bool op_Equality(NpgsqlBox x, NpgsqlBox y);
    public static bool op_Inequality(NpgsqlBox x, NpgsqlBox y);
    [NullableContextAttribute("1")]
public virtual string ToString();
    public virtual int GetHashCode();
    private void NormalizeBox();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[IsReadOnlyAttribute]
public class NpgsqlTypes.NpgsqlCidr : ValueType {
    [CompilerGeneratedAttribute]
private IPAddress <Address>k__BackingField;
    [CompilerGeneratedAttribute]
private byte <Netmask>k__BackingField;
    public IPAddress Address { get; }
    public byte Netmask { get; }
    public NpgsqlCidr(IPAddress address, byte netmask);
    public NpgsqlCidr(string addr);
    [CompilerGeneratedAttribute]
public IPAddress get_Address();
    [CompilerGeneratedAttribute]
public byte get_Netmask();
    public static NpgsqlInet op_Implicit(NpgsqlCidr cidr);
    public static IPAddress op_Explicit(NpgsqlCidr cidr);
    public virtual string ToString();
    public void Deconstruct(IPAddress& address, Byte& netmask);
    [NullableContextAttribute("0")]
[CompilerGeneratedAttribute]
private bool PrintMembers(StringBuilder builder);
    [CompilerGeneratedAttribute]
public static bool op_Inequality(NpgsqlCidr left, NpgsqlCidr right);
    [CompilerGeneratedAttribute]
public static bool op_Equality(NpgsqlCidr left, NpgsqlCidr right);
    [CompilerGeneratedAttribute]
public virtual int GetHashCode();
    [NullableContextAttribute("0")]
[CompilerGeneratedAttribute]
public virtual bool Equals(object obj);
    [CompilerGeneratedAttribute]
public sealed virtual bool Equals(NpgsqlCidr other);
}
public class NpgsqlTypes.NpgsqlCircle : ValueType {
    [CompilerGeneratedAttribute]
private double <X>k__BackingField;
    [CompilerGeneratedAttribute]
private double <Y>k__BackingField;
    [CompilerGeneratedAttribute]
private double <Radius>k__BackingField;
    public double X { get; public set; }
    public double Y { get; public set; }
    public double Radius { get; public set; }
    public NpgsqlPoint Center { get; public set; }
    public NpgsqlCircle(NpgsqlPoint center, double radius);
    public NpgsqlCircle(double x, double y, double radius);
    [IsReadOnlyAttribute]
[CompilerGeneratedAttribute]
public double get_X();
    [CompilerGeneratedAttribute]
public void set_X(double value);
    [IsReadOnlyAttribute]
[CompilerGeneratedAttribute]
public double get_Y();
    [CompilerGeneratedAttribute]
public void set_Y(double value);
    [IsReadOnlyAttribute]
[CompilerGeneratedAttribute]
public double get_Radius();
    [CompilerGeneratedAttribute]
public void set_Radius(double value);
    public NpgsqlPoint get_Center();
    public void set_Center(NpgsqlPoint value);
    public sealed virtual bool Equals(NpgsqlCircle other);
    [NullableContextAttribute("2")]
public virtual bool Equals(object obj);
    [NullableContextAttribute("1")]
public virtual string ToString();
    public static bool op_Equality(NpgsqlCircle x, NpgsqlCircle y);
    public static bool op_Inequality(NpgsqlCircle x, NpgsqlCircle y);
    public virtual int GetHashCode();
}
public enum NpgsqlTypes.NpgsqlDbType : Enum {
    public int value__;
    public static NpgsqlDbType Bigint;
    public static NpgsqlDbType Double;
    public static NpgsqlDbType Integer;
    public static NpgsqlDbType Numeric;
    public static NpgsqlDbType Real;
    public static NpgsqlDbType Smallint;
    public static NpgsqlDbType Money;
    public static NpgsqlDbType Boolean;
    public static NpgsqlDbType Box;
    public static NpgsqlDbType Circle;
    public static NpgsqlDbType Line;
    public static NpgsqlDbType LSeg;
    public static NpgsqlDbType Path;
    public static NpgsqlDbType Point;
    public static NpgsqlDbType Polygon;
    public static NpgsqlDbType Char;
    public static NpgsqlDbType Text;
    public static NpgsqlDbType Varchar;
    public static NpgsqlDbType Name;
    public static NpgsqlDbType Citext;
    public static NpgsqlDbType InternalChar;
    public static NpgsqlDbType Bytea;
    public static NpgsqlDbType Date;
    public static NpgsqlDbType Time;
    public static NpgsqlDbType Timestamp;
    public static NpgsqlDbType TimestampTz;
    public static NpgsqlDbType Interval;
    public static NpgsqlDbType TimeTz;
    [ObsoleteAttribute("The PostgreSQL abstime time is obsolete.")]
public static NpgsqlDbType Abstime;
    public static NpgsqlDbType Inet;
    public static NpgsqlDbType Cidr;
    public static NpgsqlDbType MacAddr;
    public static NpgsqlDbType MacAddr8;
    public static NpgsqlDbType Bit;
    public static NpgsqlDbType Varbit;
    public static NpgsqlDbType TsVector;
    public static NpgsqlDbType TsQuery;
    public static NpgsqlDbType Regconfig;
    public static NpgsqlDbType Uuid;
    public static NpgsqlDbType Xml;
    public static NpgsqlDbType Json;
    public static NpgsqlDbType Jsonb;
    public static NpgsqlDbType JsonPath;
    public static NpgsqlDbType Hstore;
    public static NpgsqlDbType Refcursor;
    public static NpgsqlDbType Oidvector;
    public static NpgsqlDbType Int2Vector;
    public static NpgsqlDbType Oid;
    public static NpgsqlDbType Xid;
    public static NpgsqlDbType Xid8;
    public static NpgsqlDbType Cid;
    public static NpgsqlDbType Regtype;
    public static NpgsqlDbType Tid;
    public static NpgsqlDbType PgLsn;
    public static NpgsqlDbType Unknown;
    public static NpgsqlDbType Geometry;
    public static NpgsqlDbType Geography;
    public static NpgsqlDbType LTree;
    public static NpgsqlDbType LQuery;
    public static NpgsqlDbType LTxtQuery;
    public static NpgsqlDbType IntegerRange;
    public static NpgsqlDbType BigIntRange;
    public static NpgsqlDbType NumericRange;
    public static NpgsqlDbType TimestampRange;
    public static NpgsqlDbType TimestampTzRange;
    public static NpgsqlDbType DateRange;
    public static NpgsqlDbType IntegerMultirange;
    public static NpgsqlDbType BigIntMultirange;
    public static NpgsqlDbType NumericMultirange;
    public static NpgsqlDbType TimestampMultirange;
    public static NpgsqlDbType TimestampTzMultirange;
    public static NpgsqlDbType DateMultirange;
    public static NpgsqlDbType Array;
    public static NpgsqlDbType Range;
    public static NpgsqlDbType Multirange;
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ExtensionAttribute]
internal static class NpgsqlTypes.NpgsqlDbTypeExtensions : object {
    [ExtensionAttribute]
internal static Nullable`1<NpgsqlDbType> ToNpgsqlDbType(DbType dbType);
    [ExtensionAttribute]
public static DbType ToDbType(NpgsqlDbType npgsqlDbType);
    [NullableContextAttribute("2")]
[ExtensionAttribute]
internal static string ToUnqualifiedDataTypeName(NpgsqlDbType npgsqlDbType);
    [ExtensionAttribute]
internal static string ToUnqualifiedDataTypeNameOrThrow(NpgsqlDbType npgsqlDbType);
    [ExtensionAttribute]
internal static Nullable`1<DataTypeName> ToDataTypeName(NpgsqlDbType npgsqlDbType);
    [ExtensionAttribute]
internal static Nullable`1<NpgsqlDbType> ToNpgsqlDbType(DataTypeName dataTypeName);
    internal static Nullable`1<NpgsqlDbType> ToNpgsqlDbType(string dataTypeName);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[IsReadOnlyAttribute]
public class NpgsqlTypes.NpgsqlInet : ValueType {
    [CompilerGeneratedAttribute]
private IPAddress <Address>k__BackingField;
    [CompilerGeneratedAttribute]
private byte <Netmask>k__BackingField;
    public IPAddress Address { get; }
    public byte Netmask { get; }
    public NpgsqlInet(IPAddress address, byte netmask);
    public NpgsqlInet(IPAddress address);
    public NpgsqlInet(string addr);
    [CompilerGeneratedAttribute]
public IPAddress get_Address();
    [CompilerGeneratedAttribute]
public byte get_Netmask();
    public virtual string ToString();
    public static IPAddress op_Explicit(NpgsqlInet inet);
    public static NpgsqlInet op_Implicit(IPAddress ip);
    public void Deconstruct(IPAddress& address, Byte& netmask);
    private static void CheckAddressFamily(IPAddress address);
    [NullableContextAttribute("0")]
[CompilerGeneratedAttribute]
private bool PrintMembers(StringBuilder builder);
    [CompilerGeneratedAttribute]
public static bool op_Inequality(NpgsqlInet left, NpgsqlInet right);
    [CompilerGeneratedAttribute]
public static bool op_Equality(NpgsqlInet left, NpgsqlInet right);
    [CompilerGeneratedAttribute]
public virtual int GetHashCode();
    [NullableContextAttribute("0")]
[CompilerGeneratedAttribute]
public virtual bool Equals(object obj);
    [CompilerGeneratedAttribute]
public sealed virtual bool Equals(NpgsqlInet other);
}
[IsReadOnlyAttribute]
public class NpgsqlTypes.NpgsqlInterval : ValueType {
    [CompilerGeneratedAttribute]
private int <Months>k__BackingField;
    [CompilerGeneratedAttribute]
private int <Days>k__BackingField;
    [CompilerGeneratedAttribute]
private long <Time>k__BackingField;
    public int Months { get; }
    public int Days { get; }
    public long Time { get; }
    public NpgsqlInterval(int months, int days, long time);
    [CompilerGeneratedAttribute]
public int get_Months();
    [CompilerGeneratedAttribute]
public int get_Days();
    [CompilerGeneratedAttribute]
public long get_Time();
    public sealed virtual bool Equals(NpgsqlInterval other);
    [NullableContextAttribute("2")]
public virtual bool Equals(object obj);
    public virtual int GetHashCode();
}
public class NpgsqlTypes.NpgsqlLine : ValueType {
    [CompilerGeneratedAttribute]
private double <A>k__BackingField;
    [CompilerGeneratedAttribute]
private double <B>k__BackingField;
    [CompilerGeneratedAttribute]
private double <C>k__BackingField;
    public double A { get; public set; }
    public double B { get; public set; }
    public double C { get; public set; }
    public NpgsqlLine(double a, double b, double c);
    [IsReadOnlyAttribute]
[CompilerGeneratedAttribute]
public double get_A();
    [CompilerGeneratedAttribute]
public void set_A(double value);
    [IsReadOnlyAttribute]
[CompilerGeneratedAttribute]
public double get_B();
    [CompilerGeneratedAttribute]
public void set_B(double value);
    [IsReadOnlyAttribute]
[CompilerGeneratedAttribute]
public double get_C();
    [CompilerGeneratedAttribute]
public void set_C(double value);
    [NullableContextAttribute("1")]
public virtual string ToString();
    public virtual int GetHashCode();
    public sealed virtual bool Equals(NpgsqlLine other);
    [NullableContextAttribute("2")]
public virtual bool Equals(object obj);
    public static bool op_Equality(NpgsqlLine x, NpgsqlLine y);
    public static bool op_Inequality(NpgsqlLine x, NpgsqlLine y);
}
[IsReadOnlyAttribute]
public class NpgsqlTypes.NpgsqlLogSequenceNumber : ValueType {
    public static NpgsqlLogSequenceNumber Invalid;
    private ulong _value;
    public NpgsqlLogSequenceNumber(ulong value);
    private static NpgsqlLogSequenceNumber();
    public sealed virtual bool Equals(NpgsqlLogSequenceNumber other);
    public sealed virtual int CompareTo(NpgsqlLogSequenceNumber value);
    [NullableContextAttribute("2")]
public virtual bool Equals(object obj);
    public virtual int GetHashCode();
    [NullableContextAttribute("1")]
public virtual string ToString();
    [NullableContextAttribute("1")]
public static NpgsqlLogSequenceNumber Parse(string s);
    public static NpgsqlLogSequenceNumber Parse(ReadOnlySpan`1<char> s);
    [NullableContextAttribute("1")]
public static bool TryParse(string s, NpgsqlLogSequenceNumber& result);
    public static bool TryParse(ReadOnlySpan`1<char> s, NpgsqlLogSequenceNumber& result);
    public static NpgsqlLogSequenceNumber op_Explicit(ulong value);
    public static ulong op_Explicit(NpgsqlLogSequenceNumber value);
    public static bool op_Equality(NpgsqlLogSequenceNumber value1, NpgsqlLogSequenceNumber value2);
    public static bool op_Inequality(NpgsqlLogSequenceNumber value1, NpgsqlLogSequenceNumber value2);
    public static bool op_GreaterThan(NpgsqlLogSequenceNumber value1, NpgsqlLogSequenceNumber value2);
    public static bool op_LessThan(NpgsqlLogSequenceNumber value1, NpgsqlLogSequenceNumber value2);
    public static bool op_GreaterThanOrEqual(NpgsqlLogSequenceNumber value1, NpgsqlLogSequenceNumber value2);
    public static NpgsqlLogSequenceNumber Larger(NpgsqlLogSequenceNumber value1, NpgsqlLogSequenceNumber value2);
    public static NpgsqlLogSequenceNumber Smaller(NpgsqlLogSequenceNumber value1, NpgsqlLogSequenceNumber value2);
    public static bool op_LessThanOrEqual(NpgsqlLogSequenceNumber value1, NpgsqlLogSequenceNumber value2);
    public static ulong op_Subtraction(NpgsqlLogSequenceNumber first, NpgsqlLogSequenceNumber second);
    public static NpgsqlLogSequenceNumber op_Subtraction(NpgsqlLogSequenceNumber lsn, double nbytes);
    public static NpgsqlLogSequenceNumber op_Addition(NpgsqlLogSequenceNumber lsn, double nbytes);
}
public class NpgsqlTypes.NpgsqlLSeg : ValueType {
    [CompilerGeneratedAttribute]
private NpgsqlPoint <Start>k__BackingField;
    [CompilerGeneratedAttribute]
private NpgsqlPoint <End>k__BackingField;
    public NpgsqlPoint Start { get; public set; }
    public NpgsqlPoint End { get; public set; }
    public NpgsqlLSeg(NpgsqlPoint start, NpgsqlPoint end);
    public NpgsqlLSeg(double startx, double starty, double endx, double endy);
    [IsReadOnlyAttribute]
[CompilerGeneratedAttribute]
public NpgsqlPoint get_Start();
    [CompilerGeneratedAttribute]
public void set_Start(NpgsqlPoint value);
    [IsReadOnlyAttribute]
[CompilerGeneratedAttribute]
public NpgsqlPoint get_End();
    [CompilerGeneratedAttribute]
public void set_End(NpgsqlPoint value);
    [NullableContextAttribute("1")]
public virtual string ToString();
    public virtual int GetHashCode();
    public sealed virtual bool Equals(NpgsqlLSeg other);
    [NullableContextAttribute("2")]
public virtual bool Equals(object obj);
    public static bool op_Equality(NpgsqlLSeg x, NpgsqlLSeg y);
    public static bool op_Inequality(NpgsqlLSeg x, NpgsqlLSeg y);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[DefaultMemberAttribute("Item")]
public class NpgsqlTypes.NpgsqlPath : ValueType {
    private List`1<NpgsqlPoint> _points;
    [CompilerGeneratedAttribute]
private bool <Open>k__BackingField;
    public bool Open { get; public set; }
    public NpgsqlPoint Item { get; public set; }
    public int Capacity { get; }
    public int Count { get; }
    public bool IsReadOnly { get; }
    public NpgsqlPath(IEnumerable`1<NpgsqlPoint> points, bool open);
    public NpgsqlPath(IEnumerable`1<NpgsqlPoint> points);
    public NpgsqlPath(NpgsqlPoint[] points);
    public NpgsqlPath(bool open);
    public NpgsqlPath(int capacity, bool open);
    public NpgsqlPath(int capacity);
    [IsReadOnlyAttribute]
[CompilerGeneratedAttribute]
public bool get_Open();
    [CompilerGeneratedAttribute]
public void set_Open(bool value);
    public sealed virtual NpgsqlPoint get_Item(int index);
    public sealed virtual void set_Item(int index, NpgsqlPoint value);
    public int get_Capacity();
    public sealed virtual int get_Count();
    public sealed virtual bool get_IsReadOnly();
    public sealed virtual int IndexOf(NpgsqlPoint item);
    public sealed virtual void Insert(int index, NpgsqlPoint item);
    public sealed virtual void RemoveAt(int index);
    public sealed virtual void Add(NpgsqlPoint item);
    public sealed virtual void Clear();
    public sealed virtual bool Contains(NpgsqlPoint item);
    public sealed virtual void CopyTo(NpgsqlPoint[] array, int arrayIndex);
    public sealed virtual bool Remove(NpgsqlPoint item);
    public sealed virtual IEnumerator`1<NpgsqlPoint> GetEnumerator();
    private sealed virtual override IEnumerator System.Collections.IEnumerable.GetEnumerator();
    public sealed virtual bool Equals(NpgsqlPath other);
    [NullableContextAttribute("2")]
public virtual bool Equals(object obj);
    public static bool op_Equality(NpgsqlPath x, NpgsqlPath y);
    public static bool op_Inequality(NpgsqlPath x, NpgsqlPath y);
    public virtual int GetHashCode();
    public virtual string ToString();
}
public class NpgsqlTypes.NpgsqlPoint : ValueType {
    [CompilerGeneratedAttribute]
private double <X>k__BackingField;
    [CompilerGeneratedAttribute]
private double <Y>k__BackingField;
    public double X { get; public set; }
    public double Y { get; public set; }
    public NpgsqlPoint(double x, double y);
    [IsReadOnlyAttribute]
[CompilerGeneratedAttribute]
public double get_X();
    [CompilerGeneratedAttribute]
public void set_X(double value);
    [IsReadOnlyAttribute]
[CompilerGeneratedAttribute]
public double get_Y();
    [CompilerGeneratedAttribute]
public void set_Y(double value);
    public sealed virtual bool Equals(NpgsqlPoint other);
    [NullableContextAttribute("2")]
public virtual bool Equals(object obj);
    public static bool op_Equality(NpgsqlPoint x, NpgsqlPoint y);
    public static bool op_Inequality(NpgsqlPoint x, NpgsqlPoint y);
    public virtual int GetHashCode();
    [NullableContextAttribute("1")]
public virtual string ToString();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[IsReadOnlyAttribute]
[DefaultMemberAttribute("Item")]
public class NpgsqlTypes.NpgsqlPolygon : ValueType {
    private List`1<NpgsqlPoint> _points;
    public NpgsqlPoint Item { get; public set; }
    public int Capacity { get; }
    public int Count { get; }
    public bool IsReadOnly { get; }
    public NpgsqlPolygon(IEnumerable`1<NpgsqlPoint> points);
    public NpgsqlPolygon(NpgsqlPoint[] points);
    public NpgsqlPolygon(int capacity);
    public sealed virtual NpgsqlPoint get_Item(int index);
    public sealed virtual void set_Item(int index, NpgsqlPoint value);
    public int get_Capacity();
    public sealed virtual int get_Count();
    public sealed virtual bool get_IsReadOnly();
    public sealed virtual int IndexOf(NpgsqlPoint item);
    public sealed virtual void Insert(int index, NpgsqlPoint item);
    public sealed virtual void RemoveAt(int index);
    public sealed virtual void Add(NpgsqlPoint item);
    public sealed virtual void Clear();
    public sealed virtual bool Contains(NpgsqlPoint item);
    public sealed virtual void CopyTo(NpgsqlPoint[] array, int arrayIndex);
    public sealed virtual bool Remove(NpgsqlPoint item);
    public sealed virtual IEnumerator`1<NpgsqlPoint> GetEnumerator();
    private sealed virtual override IEnumerator System.Collections.IEnumerable.GetEnumerator();
    public sealed virtual bool Equals(NpgsqlPolygon other);
    [NullableContextAttribute("2")]
public virtual bool Equals(object obj);
    public static bool op_Equality(NpgsqlPolygon x, NpgsqlPolygon y);
    public static bool op_Inequality(NpgsqlPolygon x, NpgsqlPolygon y);
    public virtual int GetHashCode();
    public virtual string ToString();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[IsReadOnlyAttribute]
public class NpgsqlTypes.NpgsqlRange`1 : ValueType {
    private static string EmptyLiteral;
    private static string LowerInfinityLiteral;
    private static string UpperInfinityLiteral;
    private static string NullLiteral;
    private static char LowerInclusiveBound;
    private static char LowerExclusiveBound;
    private static char UpperInclusiveBound;
    private static char UpperExclusiveBound;
    private static char BoundSeparator;
    [NullableAttribute("2")]
private static TypeConverter BoundConverter;
    private static bool HasEquatableBounds;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public static NpgsqlRange`1<T> Empty;
    [CompilerGeneratedAttribute]
private T <LowerBound>k__BackingField;
    [CompilerGeneratedAttribute]
private T <UpperBound>k__BackingField;
    internal RangeFlags Flags;
    public T LowerBound { get; }
    public T UpperBound { get; }
    public bool LowerBoundIsInclusive { get; }
    public bool UpperBoundIsInclusive { get; }
    public bool LowerBoundInfinite { get; }
    public bool UpperBoundInfinite { get; }
    public bool IsEmpty { get; }
    public NpgsqlRange`1(T lowerBound, T upperBound);
    public NpgsqlRange`1(T lowerBound, bool lowerBoundIsInclusive, T upperBound, bool upperBoundIsInclusive);
    public NpgsqlRange`1(T lowerBound, bool lowerBoundIsInclusive, bool lowerBoundInfinite, T upperBound, bool upperBoundIsInclusive, bool upperBoundInfinite);
    internal NpgsqlRange`1(T lowerBound, T upperBound, RangeFlags flags);
    private static NpgsqlRange`1();
    [CompilerGeneratedAttribute]
public T get_LowerBound();
    [CompilerGeneratedAttribute]
public T get_UpperBound();
    public bool get_LowerBoundIsInclusive();
    public bool get_UpperBoundIsInclusive();
    public bool get_LowerBoundInfinite();
    public bool get_UpperBoundInfinite();
    public bool get_IsEmpty();
    private static bool IsEmptyRange(T lowerBound, T upperBound, RangeFlags flags);
    private static RangeFlags EvaluateBoundaryFlags(bool lowerBoundIsInclusive, bool upperBoundIsInclusive, bool lowerBoundInfinite, bool upperBoundInfinite);
    public static bool op_Equality(NpgsqlRange`1<T> x, NpgsqlRange`1<T> y);
    public static bool op_Inequality(NpgsqlRange`1<T> x, NpgsqlRange`1<T> y);
    [NullableContextAttribute("2")]
public virtual bool Equals(object o);
    public sealed virtual bool Equals(NpgsqlRange`1<T> other);
    public virtual int GetHashCode();
    public virtual string ToString();
    [RequiresUnreferencedCodeAttribute("Parse implementations for certain types of T may require members that have been trimmed.")]
public static NpgsqlRange`1<T> Parse(string value);
}
[IsReadOnlyAttribute]
public class NpgsqlTypes.NpgsqlTid : ValueType {
    [CompilerGeneratedAttribute]
private UInt32 <BlockNumber>k__BackingField;
    [CompilerGeneratedAttribute]
private ushort <OffsetNumber>k__BackingField;
    public UInt32 BlockNumber { get; }
    public ushort OffsetNumber { get; }
    public NpgsqlTid(UInt32 blockNumber, ushort offsetNumber);
    [CompilerGeneratedAttribute]
public UInt32 get_BlockNumber();
    [CompilerGeneratedAttribute]
public ushort get_OffsetNumber();
    public sealed virtual bool Equals(NpgsqlTid other);
    [NullableContextAttribute("2")]
public virtual bool Equals(object o);
    public virtual int GetHashCode();
    public static bool op_Equality(NpgsqlTid left, NpgsqlTid right);
    public static bool op_Inequality(NpgsqlTid left, NpgsqlTid right);
    [NullableContextAttribute("1")]
public virtual string ToString();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public abstract class NpgsqlTypes.NpgsqlTsQuery : object {
    [CompilerGeneratedAttribute]
private NodeKind <Kind>k__BackingField;
    public NodeKind Kind { get; }
    protected NpgsqlTsQuery(NodeKind kind);
    [CompilerGeneratedAttribute]
public NodeKind get_Kind();
    public void Write(StringBuilder stringBuilder);
    internal abstract virtual void WriteCore(StringBuilder sb, bool first);
    public virtual string ToString();
    [ObsoleteAttribute("Client-side parsing of NpgsqlTsQuery is unreliable and cannot fully duplicate the PostgreSQL logic. Use PG functions instead (e.g. to_tsquery)")]
public static NpgsqlTsQuery Parse(string value);
    public virtual int GetHashCode();
    [NullableContextAttribute("2")]
public virtual bool Equals(object obj);
    [NullableContextAttribute("2")]
public abstract virtual bool Equals(NpgsqlTsQuery other);
    [NullableContextAttribute("2")]
public static bool op_Equality(NpgsqlTsQuery left, NpgsqlTsQuery right);
    [NullableContextAttribute("2")]
public static bool op_Inequality(NpgsqlTsQuery left, NpgsqlTsQuery right);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class NpgsqlTypes.NpgsqlTsQueryAnd : NpgsqlTsQueryBinOp {
    public NpgsqlTsQueryAnd(NpgsqlTsQuery left, NpgsqlTsQuery right);
    internal virtual void WriteCore(StringBuilder sb, bool first);
    [NullableContextAttribute("2")]
public virtual bool Equals(NpgsqlTsQuery other);
    public virtual int GetHashCode();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public abstract class NpgsqlTypes.NpgsqlTsQueryBinOp : NpgsqlTsQuery {
    [CompilerGeneratedAttribute]
private NpgsqlTsQuery <Left>k__BackingField;
    [CompilerGeneratedAttribute]
private NpgsqlTsQuery <Right>k__BackingField;
    public NpgsqlTsQuery Left { get; public set; }
    public NpgsqlTsQuery Right { get; public set; }
    protected NpgsqlTsQueryBinOp(NodeKind kind, NpgsqlTsQuery left, NpgsqlTsQuery right);
    [CompilerGeneratedAttribute]
public NpgsqlTsQuery get_Left();
    [CompilerGeneratedAttribute]
public void set_Left(NpgsqlTsQuery value);
    [CompilerGeneratedAttribute]
public NpgsqlTsQuery get_Right();
    [CompilerGeneratedAttribute]
public void set_Right(NpgsqlTsQuery value);
}
public class NpgsqlTypes.NpgsqlTsQueryEmpty : NpgsqlTsQuery {
    [NullableContextAttribute("1")]
internal virtual void WriteCore(StringBuilder sb, bool first);
    [NullableContextAttribute("2")]
public virtual bool Equals(NpgsqlTsQuery other);
    public virtual int GetHashCode();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class NpgsqlTypes.NpgsqlTsQueryFollowedBy : NpgsqlTsQueryBinOp {
    [CompilerGeneratedAttribute]
private short <Distance>k__BackingField;
    public short Distance { get; public set; }
    public NpgsqlTsQueryFollowedBy(NpgsqlTsQuery left, short distance, NpgsqlTsQuery right);
    [CompilerGeneratedAttribute]
public short get_Distance();
    [CompilerGeneratedAttribute]
public void set_Distance(short value);
    internal virtual void WriteCore(StringBuilder sb, bool first);
    [NullableContextAttribute("2")]
public virtual bool Equals(NpgsqlTsQuery other);
    public virtual int GetHashCode();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class NpgsqlTypes.NpgsqlTsQueryLexeme : NpgsqlTsQuery {
    private string _text;
    private Weight _weights;
    [CompilerGeneratedAttribute]
private bool <IsPrefixSearch>k__BackingField;
    public string Text { get; public set; }
    public Weight Weights { get; public set; }
    public bool IsPrefixSearch { get; public set; }
    public NpgsqlTsQueryLexeme(string text);
    public NpgsqlTsQueryLexeme(string text, Weight weights);
    public NpgsqlTsQueryLexeme(string text, Weight weights, bool isPrefixSearch);
    public string get_Text();
    public void set_Text(string value);
    public Weight get_Weights();
    public void set_Weights(Weight value);
    [CompilerGeneratedAttribute]
public bool get_IsPrefixSearch();
    [CompilerGeneratedAttribute]
public void set_IsPrefixSearch(bool value);
    internal virtual void WriteCore(StringBuilder sb, bool first);
    [NullableContextAttribute("2")]
public virtual bool Equals(NpgsqlTsQuery other);
    public virtual int GetHashCode();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class NpgsqlTypes.NpgsqlTsQueryNot : NpgsqlTsQuery {
    [CompilerGeneratedAttribute]
private NpgsqlTsQuery <Child>k__BackingField;
    public NpgsqlTsQuery Child { get; public set; }
    public NpgsqlTsQueryNot(NpgsqlTsQuery child);
    [CompilerGeneratedAttribute]
public NpgsqlTsQuery get_Child();
    [CompilerGeneratedAttribute]
public void set_Child(NpgsqlTsQuery value);
    internal virtual void WriteCore(StringBuilder sb, bool first);
    [NullableContextAttribute("2")]
public virtual bool Equals(NpgsqlTsQuery other);
    public virtual int GetHashCode();
}
[IsReadOnlyAttribute]
internal class NpgsqlTypes.NpgsqlTsQueryOperator : ValueType {
    public char Char;
    public short FollowedByDistance;
    public NpgsqlTsQueryOperator(char character, short followedByDistance);
    public static NpgsqlTsQueryOperator op_Implicit(char c);
    public static char op_Implicit(NpgsqlTsQueryOperator o);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class NpgsqlTypes.NpgsqlTsQueryOr : NpgsqlTsQueryBinOp {
    public NpgsqlTsQueryOr(NpgsqlTsQuery left, NpgsqlTsQuery right);
    internal virtual void WriteCore(StringBuilder sb, bool first);
    [NullableContextAttribute("2")]
public virtual bool Equals(NpgsqlTsQuery other);
    public virtual int GetHashCode();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[DefaultMemberAttribute("Item")]
public class NpgsqlTypes.NpgsqlTsVector : object {
    private List`1<Lexeme> _lexemes;
    public Lexeme Item { get; }
    public int Count { get; }
    internal NpgsqlTsVector(List`1<Lexeme> lexemes, bool noCheck);
    [ObsoleteAttribute("Client-side parsing of NpgsqlTsVector is unreliable and cannot fully duplicate the PostgreSQL logic. Use PG functions instead (e.g. to_tsvector)")]
public static NpgsqlTsVector Parse(string value);
    public Lexeme get_Item(int index);
    public int get_Count();
    public sealed virtual IEnumerator`1<Lexeme> GetEnumerator();
    private sealed virtual override IEnumerator System.Collections.IEnumerable.GetEnumerator();
    public virtual string ToString();
    [NullableContextAttribute("2")]
public sealed virtual bool Equals(NpgsqlTsVector other);
    [NullableContextAttribute("2")]
public virtual bool Equals(object obj);
    public virtual int GetHashCode();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[AttributeUsageAttribute("2460")]
public class NpgsqlTypes.PgNameAttribute : Attribute {
    [CompilerGeneratedAttribute]
private string <PgName>k__BackingField;
    public string PgName { get; }
    public PgNameAttribute(string pgName);
    [CompilerGeneratedAttribute]
public string get_PgName();
}
[FlagsAttribute]
internal enum NpgsqlTypes.RangeFlags : Enum {
    public byte value__;
    public static RangeFlags None;
    public static RangeFlags Empty;
    public static RangeFlags LowerBoundInclusive;
    public static RangeFlags UpperBoundInclusive;
    public static RangeFlags LowerBoundInfinite;
    public static RangeFlags UpperBoundInfinite;
    public static RangeFlags Inclusive;
    public static RangeFlags Infinite;
    public static RangeFlags LowerInclusiveInfinite;
    public static RangeFlags UpperInclusiveInfinite;
}
[ExtensionAttribute]
internal static class System.Buffers.ReadOnlySequenceExtensions : object {
    [NullableContextAttribute("2")]
[ExtensionAttribute]
public static ReadOnlySpan`1<T> GetFirstSpan(ReadOnlySequence`1<T> sequence);
}
internal static class System.Text.EncodingExtensions : object {
}
