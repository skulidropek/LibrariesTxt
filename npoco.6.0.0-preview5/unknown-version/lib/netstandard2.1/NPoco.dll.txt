[CompilerGeneratedAttribute]
[EmbeddedAttribute]
internal class Microsoft.CodeAnalysis.EmbeddedAttribute : Attribute {
}
[ExtensionAttribute]
internal static class NPoco.AsyncHelper : object {
    [ExtensionAttribute]
internal static T RunSync(Task`1<T> task);
    [ExtensionAttribute]
internal static void RunSync(Task task);
}
[ExtensionAttribute]
public static class NPoco.AsyncParameterExtensions : object {
    [ExtensionAttribute]
public static Task`1<T> ExecuteScalarAsync(IAsyncDatabase db, string sql, object arg0, CancellationToken cancellationToken);
    [ExtensionAttribute]
public static Task`1<T> ExecuteScalarAsync(IAsyncDatabase db, string sql, object arg0, object arg1, CancellationToken cancellationToken);
    [ExtensionAttribute]
public static Task`1<T> ExecuteScalarAsync(IAsyncDatabase db, string sql, object arg0, object arg1, object arg2, CancellationToken cancellationToken);
    [ExtensionAttribute]
public static Task`1<T> ExecuteScalarAsync(IAsyncDatabase db, string sql, object arg0, object arg1, object arg2, object arg3, CancellationToken cancellationToken);
    [ExtensionAttribute]
public static Task`1<T> ExecuteScalarAsync(IAsyncDatabase db, string sql, object arg0, object arg1, object arg2, object arg3, object arg4, CancellationToken cancellationToken);
    [ExtensionAttribute]
public static Task`1<T> ExecuteScalarAsync(IAsyncDatabase db, string sql, object arg0, object arg1, object arg2, object arg3, object arg4, object arg5, CancellationToken cancellationToken);
    [ExtensionAttribute]
public static Task`1<T> ExecuteScalarAsync(IAsyncDatabase db, string sql, object arg0, object arg1, object arg2, object arg3, object arg4, object arg5, object arg6, CancellationToken cancellationToken);
    [ExtensionAttribute]
public static Task`1<T> ExecuteScalarAsync(IAsyncDatabase db, string sql, object arg0, object arg1, object arg2, object arg3, object arg4, object arg5, object arg6, object arg7, CancellationToken cancellationToken);
    [ExtensionAttribute]
public static Task`1<int> ExecuteAsync(IAsyncDatabase db, string sql, object arg0, CancellationToken cancellationToken);
    [ExtensionAttribute]
public static Task`1<int> ExecuteAsync(IAsyncDatabase db, string sql, object arg0, object arg1, CancellationToken cancellationToken);
    [ExtensionAttribute]
public static Task`1<int> ExecuteAsync(IAsyncDatabase db, string sql, object arg0, object arg1, object arg2, CancellationToken cancellationToken);
    [ExtensionAttribute]
public static Task`1<int> ExecuteAsync(IAsyncDatabase db, string sql, object arg0, object arg1, object arg2, object arg3, CancellationToken cancellationToken);
    [ExtensionAttribute]
public static Task`1<int> ExecuteAsync(IAsyncDatabase db, string sql, object arg0, object arg1, object arg2, object arg3, object arg4, CancellationToken cancellationToken);
    [ExtensionAttribute]
public static Task`1<int> ExecuteAsync(IAsyncDatabase db, string sql, object arg0, object arg1, object arg2, object arg3, object arg4, object arg5, CancellationToken cancellationToken);
    [ExtensionAttribute]
public static Task`1<int> ExecuteAsync(IAsyncDatabase db, string sql, object arg0, object arg1, object arg2, object arg3, object arg4, object arg5, object arg6, CancellationToken cancellationToken);
    [ExtensionAttribute]
public static Task`1<int> ExecuteAsync(IAsyncDatabase db, string sql, object arg0, object arg1, object arg2, object arg3, object arg4, object arg5, object arg6, object arg7, CancellationToken cancellationToken);
    [ExtensionAttribute]
public static Task`1<T> SingleAsync(IAsyncQueryDatabase db, string sql, object arg0, CancellationToken cancellationToken);
    [ExtensionAttribute]
public static Task`1<T> SingleAsync(IAsyncQueryDatabase db, string sql, object arg0, object arg1, CancellationToken cancellationToken);
    [ExtensionAttribute]
public static Task`1<T> SingleAsync(IAsyncQueryDatabase db, string sql, object arg0, object arg1, object arg2, CancellationToken cancellationToken);
    [ExtensionAttribute]
public static Task`1<T> SingleAsync(IAsyncQueryDatabase db, string sql, object arg0, object arg1, object arg2, object arg3, CancellationToken cancellationToken);
    [ExtensionAttribute]
public static Task`1<T> SingleAsync(IAsyncQueryDatabase db, string sql, object arg0, object arg1, object arg2, object arg3, object arg4, CancellationToken cancellationToken);
    [ExtensionAttribute]
public static Task`1<T> SingleAsync(IAsyncQueryDatabase db, string sql, object arg0, object arg1, object arg2, object arg3, object arg4, object arg5, CancellationToken cancellationToken);
    [ExtensionAttribute]
public static Task`1<T> SingleAsync(IAsyncQueryDatabase db, string sql, object arg0, object arg1, object arg2, object arg3, object arg4, object arg5, object arg6, CancellationToken cancellationToken);
    [ExtensionAttribute]
public static Task`1<T> SingleAsync(IAsyncQueryDatabase db, string sql, object arg0, object arg1, object arg2, object arg3, object arg4, object arg5, object arg6, object arg7, CancellationToken cancellationToken);
    [ExtensionAttribute]
public static Task`1<T> SingleOrDefaultAsync(IAsyncQueryDatabase db, string sql, object arg0, CancellationToken cancellationToken);
    [ExtensionAttribute]
public static Task`1<T> SingleOrDefaultAsync(IAsyncQueryDatabase db, string sql, object arg0, object arg1, CancellationToken cancellationToken);
    [ExtensionAttribute]
public static Task`1<T> SingleOrDefaultAsync(IAsyncQueryDatabase db, string sql, object arg0, object arg1, object arg2, CancellationToken cancellationToken);
    [ExtensionAttribute]
public static Task`1<T> SingleOrDefaultAsync(IAsyncQueryDatabase db, string sql, object arg0, object arg1, object arg2, object arg3, CancellationToken cancellationToken);
    [ExtensionAttribute]
public static Task`1<T> SingleOrDefaultAsync(IAsyncQueryDatabase db, string sql, object arg0, object arg1, object arg2, object arg3, object arg4, CancellationToken cancellationToken);
    [ExtensionAttribute]
public static Task`1<T> SingleOrDefaultAsync(IAsyncQueryDatabase db, string sql, object arg0, object arg1, object arg2, object arg3, object arg4, object arg5, CancellationToken cancellationToken);
    [ExtensionAttribute]
public static Task`1<T> SingleOrDefaultAsync(IAsyncQueryDatabase db, string sql, object arg0, object arg1, object arg2, object arg3, object arg4, object arg5, object arg6, CancellationToken cancellationToken);
    [ExtensionAttribute]
public static Task`1<T> SingleOrDefaultAsync(IAsyncQueryDatabase db, string sql, object arg0, object arg1, object arg2, object arg3, object arg4, object arg5, object arg6, object arg7, CancellationToken cancellationToken);
    [ExtensionAttribute]
public static Task`1<T> FirstAsync(IAsyncQueryDatabase db, string sql, object arg0, CancellationToken cancellationToken);
    [ExtensionAttribute]
public static Task`1<T> FirstAsync(IAsyncQueryDatabase db, string sql, object arg0, object arg1, CancellationToken cancellationToken);
    [ExtensionAttribute]
public static Task`1<T> FirstAsync(IAsyncQueryDatabase db, string sql, object arg0, object arg1, object arg2, CancellationToken cancellationToken);
    [ExtensionAttribute]
public static Task`1<T> FirstAsync(IAsyncQueryDatabase db, string sql, object arg0, object arg1, object arg2, object arg3, CancellationToken cancellationToken);
    [ExtensionAttribute]
public static Task`1<T> FirstAsync(IAsyncQueryDatabase db, string sql, object arg0, object arg1, object arg2, object arg3, object arg4, CancellationToken cancellationToken);
    [ExtensionAttribute]
public static Task`1<T> FirstAsync(IAsyncQueryDatabase db, string sql, object arg0, object arg1, object arg2, object arg3, object arg4, object arg5, CancellationToken cancellationToken);
    [ExtensionAttribute]
public static Task`1<T> FirstAsync(IAsyncQueryDatabase db, string sql, object arg0, object arg1, object arg2, object arg3, object arg4, object arg5, object arg6, CancellationToken cancellationToken);
    [ExtensionAttribute]
public static Task`1<T> FirstAsync(IAsyncQueryDatabase db, string sql, object arg0, object arg1, object arg2, object arg3, object arg4, object arg5, object arg6, object arg7, CancellationToken cancellationToken);
    [ExtensionAttribute]
public static Task`1<T> FirstOrDefaultAsync(IAsyncQueryDatabase db, string sql, object arg0, CancellationToken cancellationToken);
    [ExtensionAttribute]
public static Task`1<T> FirstOrDefaultAsync(IAsyncQueryDatabase db, string sql, object arg0, object arg1, CancellationToken cancellationToken);
    [ExtensionAttribute]
public static Task`1<T> FirstOrDefaultAsync(IAsyncQueryDatabase db, string sql, object arg0, object arg1, object arg2, CancellationToken cancellationToken);
    [ExtensionAttribute]
public static Task`1<T> FirstOrDefaultAsync(IAsyncQueryDatabase db, string sql, object arg0, object arg1, object arg2, object arg3, CancellationToken cancellationToken);
    [ExtensionAttribute]
public static Task`1<T> FirstOrDefaultAsync(IAsyncQueryDatabase db, string sql, object arg0, object arg1, object arg2, object arg3, object arg4, CancellationToken cancellationToken);
    [ExtensionAttribute]
public static Task`1<T> FirstOrDefaultAsync(IAsyncQueryDatabase db, string sql, object arg0, object arg1, object arg2, object arg3, object arg4, object arg5, CancellationToken cancellationToken);
    [ExtensionAttribute]
public static Task`1<T> FirstOrDefaultAsync(IAsyncQueryDatabase db, string sql, object arg0, object arg1, object arg2, object arg3, object arg4, object arg5, object arg6, CancellationToken cancellationToken);
    [ExtensionAttribute]
public static Task`1<T> FirstOrDefaultAsync(IAsyncQueryDatabase db, string sql, object arg0, object arg1, object arg2, object arg3, object arg4, object arg5, object arg6, object arg7, CancellationToken cancellationToken);
    [ExtensionAttribute]
public static Task`1<List`1<T>> FetchAsync(IAsyncQueryDatabase db, string sql, object arg0, CancellationToken cancellationToken);
    [ExtensionAttribute]
public static Task`1<List`1<T>> FetchAsync(IAsyncQueryDatabase db, string sql, object arg0, object arg1, CancellationToken cancellationToken);
    [ExtensionAttribute]
public static Task`1<List`1<T>> FetchAsync(IAsyncQueryDatabase db, string sql, object arg0, object arg1, object arg2, CancellationToken cancellationToken);
    [ExtensionAttribute]
public static Task`1<List`1<T>> FetchAsync(IAsyncQueryDatabase db, string sql, object arg0, object arg1, object arg2, object arg3, CancellationToken cancellationToken);
    [ExtensionAttribute]
public static Task`1<List`1<T>> FetchAsync(IAsyncQueryDatabase db, string sql, object arg0, object arg1, object arg2, object arg3, object arg4, CancellationToken cancellationToken);
    [ExtensionAttribute]
public static Task`1<List`1<T>> FetchAsync(IAsyncQueryDatabase db, string sql, object arg0, object arg1, object arg2, object arg3, object arg4, object arg5, CancellationToken cancellationToken);
    [ExtensionAttribute]
public static Task`1<List`1<T>> FetchAsync(IAsyncQueryDatabase db, string sql, object arg0, object arg1, object arg2, object arg3, object arg4, object arg5, object arg6, CancellationToken cancellationToken);
    [ExtensionAttribute]
public static Task`1<List`1<T>> FetchAsync(IAsyncQueryDatabase db, string sql, object arg0, object arg1, object arg2, object arg3, object arg4, object arg5, object arg6, object arg7, CancellationToken cancellationToken);
    [ExtensionAttribute]
public static IAsyncEnumerable`1<T> QueryAsync(IAsyncQueryDatabase db, string sql, object arg0, CancellationToken cancellationToken);
    [ExtensionAttribute]
public static IAsyncEnumerable`1<T> QueryAsync(IAsyncQueryDatabase db, string sql, object arg0, object arg1, CancellationToken cancellationToken);
    [ExtensionAttribute]
public static IAsyncEnumerable`1<T> QueryAsync(IAsyncQueryDatabase db, string sql, object arg0, object arg1, object arg2, CancellationToken cancellationToken);
    [ExtensionAttribute]
public static IAsyncEnumerable`1<T> QueryAsync(IAsyncQueryDatabase db, string sql, object arg0, object arg1, object arg2, object arg3, CancellationToken cancellationToken);
    [ExtensionAttribute]
public static IAsyncEnumerable`1<T> QueryAsync(IAsyncQueryDatabase db, string sql, object arg0, object arg1, object arg2, object arg3, object arg4, CancellationToken cancellationToken);
    [ExtensionAttribute]
public static IAsyncEnumerable`1<T> QueryAsync(IAsyncQueryDatabase db, string sql, object arg0, object arg1, object arg2, object arg3, object arg4, object arg5, CancellationToken cancellationToken);
    [ExtensionAttribute]
public static IAsyncEnumerable`1<T> QueryAsync(IAsyncQueryDatabase db, string sql, object arg0, object arg1, object arg2, object arg3, object arg4, object arg5, object arg6, CancellationToken cancellationToken);
    [ExtensionAttribute]
public static IAsyncEnumerable`1<T> QueryAsync(IAsyncQueryDatabase db, string sql, object arg0, object arg1, object arg2, object arg3, object arg4, object arg5, object arg6, object arg7, CancellationToken cancellationToken);
    [ExtensionAttribute]
public static Task`1<Page`1<T>> PageAsync(IAsyncQueryDatabase db, long page, long itemsPerPage, string sql, object arg0, CancellationToken cancellationToken);
    [ExtensionAttribute]
public static Task`1<Page`1<T>> PageAsync(IAsyncQueryDatabase db, long page, long itemsPerPage, string sql, object arg0, object arg1, CancellationToken cancellationToken);
    [ExtensionAttribute]
public static Task`1<Page`1<T>> PageAsync(IAsyncQueryDatabase db, long page, long itemsPerPage, string sql, object arg0, object arg1, object arg2, CancellationToken cancellationToken);
    [ExtensionAttribute]
public static Task`1<Page`1<T>> PageAsync(IAsyncQueryDatabase db, long page, long itemsPerPage, string sql, object arg0, object arg1, object arg2, object arg3, CancellationToken cancellationToken);
    [ExtensionAttribute]
public static Task`1<Page`1<T>> PageAsync(IAsyncQueryDatabase db, long page, long itemsPerPage, string sql, object arg0, object arg1, object arg2, object arg3, object arg4, CancellationToken cancellationToken);
    [ExtensionAttribute]
public static Task`1<Page`1<T>> PageAsync(IAsyncQueryDatabase db, long page, long itemsPerPage, string sql, object arg0, object arg1, object arg2, object arg3, object arg4, object arg5, CancellationToken cancellationToken);
    [ExtensionAttribute]
public static Task`1<Page`1<T>> PageAsync(IAsyncQueryDatabase db, long page, long itemsPerPage, string sql, object arg0, object arg1, object arg2, object arg3, object arg4, object arg5, object arg6, CancellationToken cancellationToken);
    [ExtensionAttribute]
public static Task`1<Page`1<T>> PageAsync(IAsyncQueryDatabase db, long page, long itemsPerPage, string sql, object arg0, object arg1, object arg2, object arg3, object arg4, object arg5, object arg6, object arg7, CancellationToken cancellationToken);
    [ExtensionAttribute]
public static Task`1<List`1<T>> FetchAsync(IAsyncQueryDatabase db, long page, long itemsPerPage, string sql, object arg0, CancellationToken cancellationToken);
    [ExtensionAttribute]
public static Task`1<List`1<T>> FetchAsync(IAsyncQueryDatabase db, long page, long itemsPerPage, string sql, object arg0, object arg1, CancellationToken cancellationToken);
    [ExtensionAttribute]
public static Task`1<List`1<T>> FetchAsync(IAsyncQueryDatabase db, long page, long itemsPerPage, string sql, object arg0, object arg1, object arg2, CancellationToken cancellationToken);
    [ExtensionAttribute]
public static Task`1<List`1<T>> FetchAsync(IAsyncQueryDatabase db, long page, long itemsPerPage, string sql, object arg0, object arg1, object arg2, object arg3, CancellationToken cancellationToken);
    [ExtensionAttribute]
public static Task`1<List`1<T>> FetchAsync(IAsyncQueryDatabase db, long page, long itemsPerPage, string sql, object arg0, object arg1, object arg2, object arg3, object arg4, CancellationToken cancellationToken);
    [ExtensionAttribute]
public static Task`1<List`1<T>> FetchAsync(IAsyncQueryDatabase db, long page, long itemsPerPage, string sql, object arg0, object arg1, object arg2, object arg3, object arg4, object arg5, CancellationToken cancellationToken);
    [ExtensionAttribute]
public static Task`1<List`1<T>> FetchAsync(IAsyncQueryDatabase db, long page, long itemsPerPage, string sql, object arg0, object arg1, object arg2, object arg3, object arg4, object arg5, object arg6, CancellationToken cancellationToken);
    [ExtensionAttribute]
public static Task`1<List`1<T>> FetchAsync(IAsyncQueryDatabase db, long page, long itemsPerPage, string sql, object arg0, object arg1, object arg2, object arg3, object arg4, object arg5, object arg6, object arg7, CancellationToken cancellationToken);
    [ExtensionAttribute]
public static Task`1<List`1<T>> SkipTakeAsync(IAsyncQueryDatabase db, long skip, long take, string sql, object arg0, CancellationToken cancellationToken);
    [ExtensionAttribute]
public static Task`1<List`1<T>> SkipTakeAsync(IAsyncQueryDatabase db, long skip, long take, string sql, object arg0, object arg1, CancellationToken cancellationToken);
    [ExtensionAttribute]
public static Task`1<List`1<T>> SkipTakeAsync(IAsyncQueryDatabase db, long skip, long take, string sql, object arg0, object arg1, object arg2, CancellationToken cancellationToken);
    [ExtensionAttribute]
public static Task`1<List`1<T>> SkipTakeAsync(IAsyncQueryDatabase db, long skip, long take, string sql, object arg0, object arg1, object arg2, object arg3, CancellationToken cancellationToken);
    [ExtensionAttribute]
public static Task`1<List`1<T>> SkipTakeAsync(IAsyncQueryDatabase db, long skip, long take, string sql, object arg0, object arg1, object arg2, object arg3, object arg4, CancellationToken cancellationToken);
    [ExtensionAttribute]
public static Task`1<List`1<T>> SkipTakeAsync(IAsyncQueryDatabase db, long skip, long take, string sql, object arg0, object arg1, object arg2, object arg3, object arg4, object arg5, CancellationToken cancellationToken);
    [ExtensionAttribute]
public static Task`1<List`1<T>> SkipTakeAsync(IAsyncQueryDatabase db, long skip, long take, string sql, object arg0, object arg1, object arg2, object arg3, object arg4, object arg5, object arg6, CancellationToken cancellationToken);
    [ExtensionAttribute]
public static Task`1<List`1<T>> SkipTakeAsync(IAsyncQueryDatabase db, long skip, long take, string sql, object arg0, object arg1, object arg2, object arg3, object arg4, object arg5, object arg6, object arg7, CancellationToken cancellationToken);
    [ExtensionAttribute]
public static Task`1<TRet> FetchMultipleAsync(IAsyncQueryDatabase db, Func`3<List`1<T1>, List`1<T2>, TRet> cb, string sql, object arg0, CancellationToken cancellationToken);
    [ExtensionAttribute]
public static Task`1<TRet> FetchMultipleAsync(IAsyncQueryDatabase db, Func`3<List`1<T1>, List`1<T2>, TRet> cb, string sql, object arg0, object arg1, CancellationToken cancellationToken);
    [ExtensionAttribute]
public static Task`1<TRet> FetchMultipleAsync(IAsyncQueryDatabase db, Func`3<List`1<T1>, List`1<T2>, TRet> cb, string sql, object arg0, object arg1, object arg2, CancellationToken cancellationToken);
    [ExtensionAttribute]
public static Task`1<TRet> FetchMultipleAsync(IAsyncQueryDatabase db, Func`3<List`1<T1>, List`1<T2>, TRet> cb, string sql, object arg0, object arg1, object arg2, object arg3, CancellationToken cancellationToken);
    [ExtensionAttribute]
public static Task`1<TRet> FetchMultipleAsync(IAsyncQueryDatabase db, Func`3<List`1<T1>, List`1<T2>, TRet> cb, string sql, object arg0, object arg1, object arg2, object arg3, object arg4, CancellationToken cancellationToken);
    [ExtensionAttribute]
public static Task`1<TRet> FetchMultipleAsync(IAsyncQueryDatabase db, Func`3<List`1<T1>, List`1<T2>, TRet> cb, string sql, object arg0, object arg1, object arg2, object arg3, object arg4, object arg5, CancellationToken cancellationToken);
    [ExtensionAttribute]
public static Task`1<TRet> FetchMultipleAsync(IAsyncQueryDatabase db, Func`3<List`1<T1>, List`1<T2>, TRet> cb, string sql, object arg0, object arg1, object arg2, object arg3, object arg4, object arg5, object arg6, CancellationToken cancellationToken);
    [ExtensionAttribute]
public static Task`1<TRet> FetchMultipleAsync(IAsyncQueryDatabase db, Func`3<List`1<T1>, List`1<T2>, TRet> cb, string sql, object arg0, object arg1, object arg2, object arg3, object arg4, object arg5, object arg6, object arg7, CancellationToken cancellationToken);
    [ExtensionAttribute]
public static Task`1<TRet> FetchMultipleAsync(IAsyncQueryDatabase db, Func`4<List`1<T1>, List`1<T2>, List`1<T3>, TRet> cb, string sql, object arg0, CancellationToken cancellationToken);
    [ExtensionAttribute]
public static Task`1<TRet> FetchMultipleAsync(IAsyncQueryDatabase db, Func`4<List`1<T1>, List`1<T2>, List`1<T3>, TRet> cb, string sql, object arg0, object arg1, CancellationToken cancellationToken);
    [ExtensionAttribute]
public static Task`1<TRet> FetchMultipleAsync(IAsyncQueryDatabase db, Func`4<List`1<T1>, List`1<T2>, List`1<T3>, TRet> cb, string sql, object arg0, object arg1, object arg2, CancellationToken cancellationToken);
    [ExtensionAttribute]
public static Task`1<TRet> FetchMultipleAsync(IAsyncQueryDatabase db, Func`4<List`1<T1>, List`1<T2>, List`1<T3>, TRet> cb, string sql, object arg0, object arg1, object arg2, object arg3, CancellationToken cancellationToken);
    [ExtensionAttribute]
public static Task`1<TRet> FetchMultipleAsync(IAsyncQueryDatabase db, Func`4<List`1<T1>, List`1<T2>, List`1<T3>, TRet> cb, string sql, object arg0, object arg1, object arg2, object arg3, object arg4, CancellationToken cancellationToken);
    [ExtensionAttribute]
public static Task`1<TRet> FetchMultipleAsync(IAsyncQueryDatabase db, Func`4<List`1<T1>, List`1<T2>, List`1<T3>, TRet> cb, string sql, object arg0, object arg1, object arg2, object arg3, object arg4, object arg5, CancellationToken cancellationToken);
    [ExtensionAttribute]
public static Task`1<TRet> FetchMultipleAsync(IAsyncQueryDatabase db, Func`4<List`1<T1>, List`1<T2>, List`1<T3>, TRet> cb, string sql, object arg0, object arg1, object arg2, object arg3, object arg4, object arg5, object arg6, CancellationToken cancellationToken);
    [ExtensionAttribute]
public static Task`1<TRet> FetchMultipleAsync(IAsyncQueryDatabase db, Func`4<List`1<T1>, List`1<T2>, List`1<T3>, TRet> cb, string sql, object arg0, object arg1, object arg2, object arg3, object arg4, object arg5, object arg6, object arg7, CancellationToken cancellationToken);
    [ExtensionAttribute]
public static Task`1<TRet> FetchMultipleAsync(IAsyncQueryDatabase db, Func`5<List`1<T1>, List`1<T2>, List`1<T3>, List`1<T4>, TRet> cb, string sql, object arg0, CancellationToken cancellationToken);
    [ExtensionAttribute]
public static Task`1<TRet> FetchMultipleAsync(IAsyncQueryDatabase db, Func`5<List`1<T1>, List`1<T2>, List`1<T3>, List`1<T4>, TRet> cb, string sql, object arg0, object arg1, CancellationToken cancellationToken);
    [ExtensionAttribute]
public static Task`1<TRet> FetchMultipleAsync(IAsyncQueryDatabase db, Func`5<List`1<T1>, List`1<T2>, List`1<T3>, List`1<T4>, TRet> cb, string sql, object arg0, object arg1, object arg2, CancellationToken cancellationToken);
    [ExtensionAttribute]
public static Task`1<TRet> FetchMultipleAsync(IAsyncQueryDatabase db, Func`5<List`1<T1>, List`1<T2>, List`1<T3>, List`1<T4>, TRet> cb, string sql, object arg0, object arg1, object arg2, object arg3, CancellationToken cancellationToken);
    [ExtensionAttribute]
public static Task`1<TRet> FetchMultipleAsync(IAsyncQueryDatabase db, Func`5<List`1<T1>, List`1<T2>, List`1<T3>, List`1<T4>, TRet> cb, string sql, object arg0, object arg1, object arg2, object arg3, object arg4, CancellationToken cancellationToken);
    [ExtensionAttribute]
public static Task`1<TRet> FetchMultipleAsync(IAsyncQueryDatabase db, Func`5<List`1<T1>, List`1<T2>, List`1<T3>, List`1<T4>, TRet> cb, string sql, object arg0, object arg1, object arg2, object arg3, object arg4, object arg5, CancellationToken cancellationToken);
    [ExtensionAttribute]
public static Task`1<TRet> FetchMultipleAsync(IAsyncQueryDatabase db, Func`5<List`1<T1>, List`1<T2>, List`1<T3>, List`1<T4>, TRet> cb, string sql, object arg0, object arg1, object arg2, object arg3, object arg4, object arg5, object arg6, CancellationToken cancellationToken);
    [ExtensionAttribute]
public static Task`1<TRet> FetchMultipleAsync(IAsyncQueryDatabase db, Func`5<List`1<T1>, List`1<T2>, List`1<T3>, List`1<T4>, TRet> cb, string sql, object arg0, object arg1, object arg2, object arg3, object arg4, object arg5, object arg6, object arg7, CancellationToken cancellationToken);
    [ExtensionAttribute]
public static Task`1<ValueTuple`2<List`1<T1>, List`1<T2>>> FetchMultipleAsync(IAsyncQueryDatabase db, string sql, object arg0, CancellationToken cancellationToken);
    [ExtensionAttribute]
public static Task`1<ValueTuple`2<List`1<T1>, List`1<T2>>> FetchMultipleAsync(IAsyncQueryDatabase db, string sql, object arg0, object arg1, CancellationToken cancellationToken);
    [ExtensionAttribute]
public static Task`1<ValueTuple`2<List`1<T1>, List`1<T2>>> FetchMultipleAsync(IAsyncQueryDatabase db, string sql, object arg0, object arg1, object arg2, CancellationToken cancellationToken);
    [ExtensionAttribute]
public static Task`1<ValueTuple`2<List`1<T1>, List`1<T2>>> FetchMultipleAsync(IAsyncQueryDatabase db, string sql, object arg0, object arg1, object arg2, object arg3, CancellationToken cancellationToken);
    [ExtensionAttribute]
public static Task`1<ValueTuple`2<List`1<T1>, List`1<T2>>> FetchMultipleAsync(IAsyncQueryDatabase db, string sql, object arg0, object arg1, object arg2, object arg3, object arg4, CancellationToken cancellationToken);
    [ExtensionAttribute]
public static Task`1<ValueTuple`2<List`1<T1>, List`1<T2>>> FetchMultipleAsync(IAsyncQueryDatabase db, string sql, object arg0, object arg1, object arg2, object arg3, object arg4, object arg5, CancellationToken cancellationToken);
    [ExtensionAttribute]
public static Task`1<ValueTuple`2<List`1<T1>, List`1<T2>>> FetchMultipleAsync(IAsyncQueryDatabase db, string sql, object arg0, object arg1, object arg2, object arg3, object arg4, object arg5, object arg6, CancellationToken cancellationToken);
    [ExtensionAttribute]
public static Task`1<ValueTuple`2<List`1<T1>, List`1<T2>>> FetchMultipleAsync(IAsyncQueryDatabase db, string sql, object arg0, object arg1, object arg2, object arg3, object arg4, object arg5, object arg6, object arg7, CancellationToken cancellationToken);
    [ExtensionAttribute]
public static Task`1<ValueTuple`3<List`1<T1>, List`1<T2>, List`1<T3>>> FetchMultipleAsync(IAsyncQueryDatabase db, string sql, object arg0, CancellationToken cancellationToken);
    [ExtensionAttribute]
public static Task`1<ValueTuple`3<List`1<T1>, List`1<T2>, List`1<T3>>> FetchMultipleAsync(IAsyncQueryDatabase db, string sql, object arg0, object arg1, CancellationToken cancellationToken);
    [ExtensionAttribute]
public static Task`1<ValueTuple`3<List`1<T1>, List`1<T2>, List`1<T3>>> FetchMultipleAsync(IAsyncQueryDatabase db, string sql, object arg0, object arg1, object arg2, CancellationToken cancellationToken);
    [ExtensionAttribute]
public static Task`1<ValueTuple`3<List`1<T1>, List`1<T2>, List`1<T3>>> FetchMultipleAsync(IAsyncQueryDatabase db, string sql, object arg0, object arg1, object arg2, object arg3, CancellationToken cancellationToken);
    [ExtensionAttribute]
public static Task`1<ValueTuple`3<List`1<T1>, List`1<T2>, List`1<T3>>> FetchMultipleAsync(IAsyncQueryDatabase db, string sql, object arg0, object arg1, object arg2, object arg3, object arg4, CancellationToken cancellationToken);
    [ExtensionAttribute]
public static Task`1<ValueTuple`3<List`1<T1>, List`1<T2>, List`1<T3>>> FetchMultipleAsync(IAsyncQueryDatabase db, string sql, object arg0, object arg1, object arg2, object arg3, object arg4, object arg5, CancellationToken cancellationToken);
    [ExtensionAttribute]
public static Task`1<ValueTuple`3<List`1<T1>, List`1<T2>, List`1<T3>>> FetchMultipleAsync(IAsyncQueryDatabase db, string sql, object arg0, object arg1, object arg2, object arg3, object arg4, object arg5, object arg6, CancellationToken cancellationToken);
    [ExtensionAttribute]
public static Task`1<ValueTuple`3<List`1<T1>, List`1<T2>, List`1<T3>>> FetchMultipleAsync(IAsyncQueryDatabase db, string sql, object arg0, object arg1, object arg2, object arg3, object arg4, object arg5, object arg6, object arg7, CancellationToken cancellationToken);
    [ExtensionAttribute]
public static Task`1<ValueTuple`4<List`1<T1>, List`1<T2>, List`1<T3>, List`1<T4>>> FetchMultipleAsync(IAsyncQueryDatabase db, string sql, object arg0, CancellationToken cancellationToken);
    [ExtensionAttribute]
public static Task`1<ValueTuple`4<List`1<T1>, List`1<T2>, List`1<T3>, List`1<T4>>> FetchMultipleAsync(IAsyncQueryDatabase db, string sql, object arg0, object arg1, CancellationToken cancellationToken);
    [ExtensionAttribute]
public static Task`1<ValueTuple`4<List`1<T1>, List`1<T2>, List`1<T3>, List`1<T4>>> FetchMultipleAsync(IAsyncQueryDatabase db, string sql, object arg0, object arg1, object arg2, CancellationToken cancellationToken);
    [ExtensionAttribute]
public static Task`1<ValueTuple`4<List`1<T1>, List`1<T2>, List`1<T3>, List`1<T4>>> FetchMultipleAsync(IAsyncQueryDatabase db, string sql, object arg0, object arg1, object arg2, object arg3, CancellationToken cancellationToken);
    [ExtensionAttribute]
public static Task`1<ValueTuple`4<List`1<T1>, List`1<T2>, List`1<T3>, List`1<T4>>> FetchMultipleAsync(IAsyncQueryDatabase db, string sql, object arg0, object arg1, object arg2, object arg3, object arg4, CancellationToken cancellationToken);
    [ExtensionAttribute]
public static Task`1<ValueTuple`4<List`1<T1>, List`1<T2>, List`1<T3>, List`1<T4>>> FetchMultipleAsync(IAsyncQueryDatabase db, string sql, object arg0, object arg1, object arg2, object arg3, object arg4, object arg5, CancellationToken cancellationToken);
    [ExtensionAttribute]
public static Task`1<ValueTuple`4<List`1<T1>, List`1<T2>, List`1<T3>, List`1<T4>>> FetchMultipleAsync(IAsyncQueryDatabase db, string sql, object arg0, object arg1, object arg2, object arg3, object arg4, object arg5, object arg6, CancellationToken cancellationToken);
    [ExtensionAttribute]
public static Task`1<ValueTuple`4<List`1<T1>, List`1<T2>, List`1<T3>, List`1<T4>>> FetchMultipleAsync(IAsyncQueryDatabase db, string sql, object arg0, object arg1, object arg2, object arg3, object arg4, object arg5, object arg6, object arg7, CancellationToken cancellationToken);
}
public class NPoco.AsyncTransaction : object {
    private IAsyncDatabase _db;
    private AsyncTransaction(IAsyncDatabase db);
    [AsyncStateMachineAttribute("NPoco.AsyncTransaction/<Init>d__2")]
public static Task`1<IAsyncTransaction> Init(IAsyncDatabase db, IsolationLevel isolationLevel);
    [AsyncStateMachineAttribute("NPoco.AsyncTransaction/<CompleteAsync>d__3")]
public sealed virtual Task CompleteAsync(CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("NPoco.AsyncTransaction/<DisposeAsync>d__4")]
public sealed virtual ValueTask DisposeAsync();
    public sealed virtual void Dispose();
}
public class NPoco.AutoSelectHelper : object {
    private static Regex rxSelect;
    private static Regex rxFrom;
    private static AutoSelectHelper();
    public static string AddSelectClause(Database database, Type type, string sql);
}
public static class NPoco.Base62 : object {
    private static string Base62CodingSpace;
    private static Base62();
    public static string ToBase62(Byte[] original);
    public static Byte[] FromBase62(string base62);
}
internal class NPoco.BitStream : Stream {
    [CompilerGeneratedAttribute]
private Byte[] <Source>k__BackingField;
    [CompilerGeneratedAttribute]
private long <Position>k__BackingField;
    private Byte[] Source { get; private set; }
    public bool CanRead { get; }
    public bool CanSeek { get; }
    public bool CanWrite { get; }
    public long Length { get; }
    public long Position { get; public set; }
    public BitStream(int capacity);
    public BitStream(Byte[] source);
    [CompilerGeneratedAttribute]
private Byte[] get_Source();
    [CompilerGeneratedAttribute]
private void set_Source(Byte[] value);
    public virtual bool get_CanRead();
    public virtual bool get_CanSeek();
    public virtual bool get_CanWrite();
    public virtual void Flush();
    public virtual long get_Length();
    [CompilerGeneratedAttribute]
public virtual long get_Position();
    [CompilerGeneratedAttribute]
public virtual void set_Position(long value);
    public virtual int Read(Byte[] buffer, int offset, int count);
    public virtual long Seek(long offset, SeekOrigin origin);
    public virtual void SetLength(long value);
    public virtual void Write(Byte[] buffer, int offset, int count);
}
public class NPoco.Cache`2 : object {
    private Dictionary`2<TKey, TValue> _map;
    private ReaderWriterLockSlim _lock;
    public int Count { get; }
    public static Cache`2<TKey, TValue> CreateStaticCache();
    public int get_Count();
    public TValue Get(TKey key, Func`1<TValue> factory);
    public bool AddIfNotExists(TKey key, TValue value);
    public void Flush();
}
public class NPoco.ColumnInfoCreator : object {
    public static ColumnInfo FromMemberInfo(MemberInfo mi);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class NPoco.Database : object {
    public static bool DefaultEnableAutoSelect;
    private IDatabaseType _dbType;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private IDictionary`2<string, object> _data;
    [CompilerGeneratedAttribute]
private bool <KeepConnectionAlive>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <ShouldCloseConnectionAutomatically>k__BackingField;
    [CompilerGeneratedAttribute]
private OpenConnectionOptions <OpenConnectionOptions>k__BackingField;
    private static OpenConnectionOptions defaultOpenConnectionOptions;
    [CompilerGeneratedAttribute]
private VersionExceptionHandling <VersionException>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <TransactionIsAborted>k__BackingField;
    [CompilerGeneratedAttribute]
private int <TransactionCount>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <EnableAutoSelect>k__BackingField;
    [CompilerGeneratedAttribute]
private int <CommandTimeout>k__BackingField;
    [CompilerGeneratedAttribute]
private int <OneTimeCommandTimeout>k__BackingField;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private List`1<IInterceptor> _interceptors;
    [NullableAttribute("2")]
private IMapperCollection _mappers;
    [NullableAttribute("2")]
private IPocoDataFactory _pocoDataFactory;
    private string _connectionString;
    private string _providerName;
    [NullableAttribute("2")]
private DbProviderFactory _factory;
    private DbConnection _sharedConnection;
    [NullableAttribute("2")]
private DbTransaction _transaction;
    private IsolationLevel _isolationLevel;
    [NullableAttribute("2")]
private string _lastSql;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private Object[] _lastArgs;
    private string _paramPrefix;
    private bool _connectionPassedIn;
    public IDatabaseType DatabaseType { get; }
    public IsolationLevel IsolationLevel { get; }
    public IDictionary`2<string, object> Data { get; }
    public bool KeepConnectionAlive { get; public set; }
    private bool ShouldCloseConnectionAutomatically { get; private set; }
    private OpenConnectionOptions OpenConnectionOptions { get; private set; }
    public VersionExceptionHandling VersionException { get; public set; }
    public DbConnection Connection { get; }
    [NullableAttribute("2")]
public DbTransaction Transaction { get; }
    internal bool TransactionIsAborted { get; internal set; }
    internal int TransactionCount { get; internal set; }
    public bool EnableAutoSelect { get; public set; }
    public int CommandTimeout { get; public set; }
    public int OneTimeCommandTimeout { get; public set; }
    [NullableAttribute("2")]
public string LastSQL { get; }
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public Object[] LastArgs { get; }
    public string LastCommand { get; }
    public List`1<IInterceptor> Interceptors { get; }
    public IMapperCollection Mappers { get; public set; }
    public IPocoDataFactory PocoDataFactory { get; public set; }
    public string ConnectionString { get; }
    public Database(DbConnection connection);
    public Database(DbConnection connection, DatabaseType dbType);
    public Database(DbConnection connection, DatabaseType dbType, Nullable`1<IsolationLevel> isolationLevel);
    public Database(DbConnection connection, DatabaseType dbType, Nullable`1<IsolationLevel> isolationLevel, bool enableAutoSelect);
    public Database(string connectionString, DatabaseType databaseType, DbProviderFactory provider);
    public Database(string connectionString, DatabaseType databaseType, DbProviderFactory provider, Nullable`1<IsolationLevel> isolationLevel, bool enableAutoSelect);
    private static Database();
    [NullableContextAttribute("0")]
public sealed virtual Task`1<object> InsertAsync(string tableName, string primaryKeyName, object poco, CancellationToken cancellationToken);
    [NullableContextAttribute("0")]
public sealed virtual Task`1<object> InsertAsync(T poco, CancellationToken cancellationToken);
    [NullableContextAttribute("0")]
public virtual Task`1<object> InsertAsync(string tableName, string primaryKeyName, bool autoIncrement, T poco, CancellationToken cancellationToken);
    [NullableContextAttribute("0")]
[AsyncStateMachineAttribute("NPoco.Database/<InsertAsyncImp>d__3`1")]
private Task`1<object> InsertAsyncImp(PocoData pocoData, string tableName, string primaryKeyName, bool autoIncrement, T poco, bool sync, CancellationToken cancellationToken);
    [NullableContextAttribute("0")]
[AsyncStateMachineAttribute("NPoco.Database/<InsertBulkAsync>d__4`1")]
public sealed virtual Task InsertBulkAsync(IEnumerable`1<T> pocos, InsertBulkOptions options, CancellationToken cancellationToken);
    [NullableContextAttribute("0")]
public sealed virtual Task`1<int> InsertBatchAsync(IEnumerable`1<T> pocos, BatchOptions options, CancellationToken cancellationToken);
    [NullableContextAttribute("0")]
[AsyncStateMachineAttribute("NPoco.Database/<InsertBatchAsyncImp>d__6`1")]
private Task`1<int> InsertBatchAsyncImp(IEnumerable`1<T> pocos, BatchOptions options, bool sync, CancellationToken cancellationToken);
    [NullableContextAttribute("0")]
public sealed virtual Task`1<int> UpdateAsync(T poco, Expression`1<Func`2<T, object>> fields, CancellationToken cancellationToken);
    [NullableContextAttribute("0")]
public sealed virtual Task`1<int> UpdateAsync(object poco, CancellationToken cancellationToken);
    [NullableContextAttribute("0")]
public sealed virtual Task`1<int> UpdateAsync(object poco, IEnumerable`1<string> columns, CancellationToken cancellationToken);
    [NullableContextAttribute("0")]
public Task`1<int> UpdateAsync(object poco, object primaryKeyValue, IEnumerable`1<string> columns, CancellationToken cancellationToken);
    [NullableContextAttribute("0")]
public virtual Task`1<int> UpdateAsync(string tableName, string primaryKeyName, object poco, object primaryKeyValue, IEnumerable`1<string> columns, CancellationToken cancellationToken);
    [NullableContextAttribute("0")]
public sealed virtual Task`1<int> UpdateBatchAsync(IEnumerable`1<UpdateBatch`1<T>> pocos, BatchOptions options, CancellationToken cancellationToken);
    [NullableContextAttribute("0")]
[AsyncStateMachineAttribute("NPoco.Database/<UpdateBatchAsyncImp>d__13`1")]
private Task`1<int> UpdateBatchAsyncImp(IEnumerable`1<UpdateBatch`1<T>> pocos, BatchOptions options, bool sync, CancellationToken cancellationToken);
    [NullableContextAttribute("0")]
public sealed virtual IAsyncUpdateQueryProvider`1<T> UpdateManyAsync();
    [NullableContextAttribute("0")]
public sealed virtual Task`1<int> DeleteAsync(object poco, CancellationToken cancellationToken);
    [NullableContextAttribute("0")]
public Task`1<int> DeleteAsync(string tableName, string primaryKeyName, object poco, CancellationToken cancellationToken);
    [NullableContextAttribute("0")]
public virtual Task`1<int> DeleteAsync(string tableName, string primaryKeyName, object poco, object primaryKeyValue, CancellationToken cancellationToken);
    [NullableContextAttribute("0")]
public sealed virtual IAsyncDeleteQueryProvider`1<T> DeleteManyAsync();
    [NullableContextAttribute("0")]
public sealed virtual Task`1<Page`1<T>> PageAsync(long page, long itemsPerPage, Sql sql, CancellationToken cancellationToken);
    [NullableContextAttribute("0")]
public sealed virtual Task`1<Page`1<T>> PageAsync(long page, long itemsPerPage, string sql, CancellationToken cancellationToken);
    [NullableContextAttribute("0")]
public sealed virtual Task`1<Page`1<T>> PageAsync(long page, long itemsPerPage, string sql, Object[] args, CancellationToken cancellationToken);
    [NullableContextAttribute("0")]
public sealed virtual Task`1<List`1<T>> FetchAsync(long page, long itemsPerPage, string sql, CancellationToken cancellationToken);
    [NullableContextAttribute("0")]
public sealed virtual Task`1<List`1<T>> FetchAsync(long page, long itemsPerPage, string sql, Object[] args, CancellationToken cancellationToken);
    [NullableContextAttribute("0")]
public sealed virtual Task`1<List`1<T>> FetchAsync(long page, long itemsPerPage, Sql sql, CancellationToken cancellationToken);
    [NullableContextAttribute("0")]
public sealed virtual Task`1<List`1<T>> SkipTakeAsync(long skip, long take, string sql, CancellationToken cancellationToken);
    [NullableContextAttribute("0")]
public sealed virtual Task`1<List`1<T>> SkipTakeAsync(long skip, long take, string sql, Object[] args, CancellationToken cancellationToken);
    [NullableContextAttribute("0")]
public sealed virtual Task`1<List`1<T>> SkipTakeAsync(long skip, long take, Sql sql, CancellationToken cancellationToken);
    [NullableContextAttribute("0")]
public sealed virtual Task`1<bool> IsNewAsync(T poco, CancellationToken cancellationToken);
    [NullableContextAttribute("0")]
[AsyncStateMachineAttribute("NPoco.Database/<SaveAsync>d__29`1")]
public sealed virtual Task SaveAsync(T poco, CancellationToken cancellationToken);
    [NullableContextAttribute("0")]
[AsyncStateMachineAttribute("NPoco.Database/<PocoExistsAsync>d__30`1")]
private Task`1<bool> PocoExistsAsync(T poco, bool sync, CancellationToken cancellationToken);
    [NullableContextAttribute("0")]
[AsyncStateMachineAttribute("NPoco.Database/<ExistsAsync>d__31`1")]
private Task`1<bool> ExistsAsync(object primaryKey, bool sync, CancellationToken cancellationToken);
    [NullableContextAttribute("0")]
private Sql GetExistsSql(object primaryKeyOrPoco, bool isPoco);
    [NullableContextAttribute("0")]
public sealed virtual Task`1<List`1<T>> FetchAsync(CancellationToken cancellationToken);
    [NullableContextAttribute("0")]
public sealed virtual Task`1<List`1<T>> FetchAsync(string sql, CancellationToken cancellationToken);
    [NullableContextAttribute("0")]
public sealed virtual Task`1<List`1<T>> FetchAsync(string sql, Object[] args, CancellationToken cancellationToken);
    [NullableContextAttribute("0")]
public sealed virtual Task`1<List`1<T>> FetchAsync(Sql sql, CancellationToken cancellationToken);
    [NullableContextAttribute("0")]
public sealed virtual Task`1<TRet> FetchMultipleAsync(Func`3<List`1<T1>, List`1<T2>, TRet> cb, string sql, CancellationToken cancellationToken);
    [NullableContextAttribute("0")]
public sealed virtual Task`1<TRet> FetchMultipleAsync(Func`3<List`1<T1>, List`1<T2>, TRet> cb, string sql, Object[] args, CancellationToken cancellationToken);
    [NullableContextAttribute("0")]
public sealed virtual Task`1<TRet> FetchMultipleAsync(Func`4<List`1<T1>, List`1<T2>, List`1<T3>, TRet> cb, string sql, CancellationToken cancellationToken);
    [NullableContextAttribute("0")]
public sealed virtual Task`1<TRet> FetchMultipleAsync(Func`4<List`1<T1>, List`1<T2>, List`1<T3>, TRet> cb, string sql, Object[] args, CancellationToken cancellationToken);
    [NullableContextAttribute("0")]
public sealed virtual Task`1<TRet> FetchMultipleAsync(Func`5<List`1<T1>, List`1<T2>, List`1<T3>, List`1<T4>, TRet> cb, string sql, CancellationToken cancellationToken);
    [NullableContextAttribute("0")]
public sealed virtual Task`1<TRet> FetchMultipleAsync(Func`5<List`1<T1>, List`1<T2>, List`1<T3>, List`1<T4>, TRet> cb, string sql, Object[] args, CancellationToken cancellationToken);
    [NullableContextAttribute("0")]
public sealed virtual Task`1<TRet> FetchMultipleAsync(Func`3<List`1<T1>, List`1<T2>, TRet> cb, Sql sql, CancellationToken cancellationToken);
    [NullableContextAttribute("0")]
public sealed virtual Task`1<TRet> FetchMultipleAsync(Func`4<List`1<T1>, List`1<T2>, List`1<T3>, TRet> cb, Sql sql, CancellationToken cancellationToken);
    [NullableContextAttribute("0")]
public sealed virtual Task`1<TRet> FetchMultipleAsync(Func`5<List`1<T1>, List`1<T2>, List`1<T3>, List`1<T4>, TRet> cb, Sql sql, CancellationToken cancellationToken);
    [NullableContextAttribute("0")]
public sealed virtual Task`1<ValueTuple`2<List`1<T1>, List`1<T2>>> FetchMultipleAsync(string sql, CancellationToken cancellationToken);
    [NullableContextAttribute("0")]
public sealed virtual Task`1<ValueTuple`2<List`1<T1>, List`1<T2>>> FetchMultipleAsync(string sql, Object[] args, CancellationToken cancellationToken);
    [NullableContextAttribute("0")]
public sealed virtual Task`1<ValueTuple`3<List`1<T1>, List`1<T2>, List`1<T3>>> FetchMultipleAsync(string sql, CancellationToken cancellationToken);
    [NullableContextAttribute("0")]
public sealed virtual Task`1<ValueTuple`3<List`1<T1>, List`1<T2>, List`1<T3>>> FetchMultipleAsync(string sql, Object[] args, CancellationToken cancellationToken);
    [NullableContextAttribute("0")]
public sealed virtual Task`1<ValueTuple`4<List`1<T1>, List`1<T2>, List`1<T3>, List`1<T4>>> FetchMultipleAsync(string sql, CancellationToken cancellationToken);
    [NullableContextAttribute("0")]
public sealed virtual Task`1<ValueTuple`4<List`1<T1>, List`1<T2>, List`1<T3>, List`1<T4>>> FetchMultipleAsync(string sql, Object[] args, CancellationToken cancellationToken);
    [NullableContextAttribute("0")]
public sealed virtual Task`1<ValueTuple`2<List`1<T1>, List`1<T2>>> FetchMultipleAsync(Sql sql, CancellationToken cancellationToken);
    [NullableContextAttribute("0")]
public sealed virtual Task`1<ValueTuple`3<List`1<T1>, List`1<T2>, List`1<T3>>> FetchMultipleAsync(Sql sql, CancellationToken cancellationToken);
    [NullableContextAttribute("0")]
public sealed virtual Task`1<ValueTuple`4<List`1<T1>, List`1<T2>, List`1<T3>, List`1<T4>>> FetchMultipleAsync(Sql sql, CancellationToken cancellationToken);
    [NullableContextAttribute("0")]
public sealed virtual IAsyncQueryProviderWithIncludes`1<T> QueryAsync();
    [NullableContextAttribute("0")]
public sealed virtual IAsyncEnumerable`1<T> QueryAsync(string sql, CancellationToken cancellationToken);
    [NullableContextAttribute("0")]
public sealed virtual IAsyncEnumerable`1<T> QueryAsync(string sql, Object[] args, CancellationToken cancellationToken);
    [NullableContextAttribute("0")]
public sealed virtual IAsyncEnumerable`1<T> QueryAsync(Sql sql, CancellationToken cancellationToken);
    [NullableContextAttribute("0")]
[AsyncIteratorStateMachineAttribute("NPoco.Database/<QueryAsync>d__59`1")]
internal IAsyncEnumerable`1<T> QueryAsync(T instance, Expression`1<Func`2<T, IList>> listExpression, Func`2<T, Object[]> idFunc, Sql Sql, PocoData pocoData, CancellationToken cancellationToken);
    [NullableContextAttribute("0")]
public sealed virtual Task`1<T> SingleAsync(string sql, CancellationToken cancellationToken);
    [NullableContextAttribute("0")]
public sealed virtual Task`1<T> SingleAsync(string sql, Object[] args, CancellationToken cancellationToken);
    [NullableContextAttribute("0")]
public sealed virtual Task`1<T> SingleAsync(Sql sql, CancellationToken cancellationToken);
    [NullableContextAttribute("0")]
public sealed virtual Task`1<T> SingleOrDefaultAsync(string sql, CancellationToken cancellationToken);
    [NullableContextAttribute("0")]
public sealed virtual Task`1<T> SingleOrDefaultAsync(string sql, Object[] args, CancellationToken cancellationToken);
    [NullableContextAttribute("0")]
public sealed virtual Task`1<T> SingleOrDefaultAsync(Sql sql, CancellationToken cancellationToken);
    [NullableContextAttribute("0")]
public sealed virtual Task`1<T> SingleByIdAsync(object primaryKey, CancellationToken cancellationToken);
    [NullableContextAttribute("0")]
public sealed virtual Task`1<T> SingleOrDefaultByIdAsync(object primaryKey, CancellationToken cancellationToken);
    [NullableContextAttribute("0")]
public sealed virtual Task`1<T> FirstAsync(string sql, CancellationToken cancellationToken);
    [NullableContextAttribute("0")]
public sealed virtual Task`1<T> FirstAsync(string sql, Object[] args, CancellationToken cancellationToken);
    [NullableContextAttribute("0")]
public sealed virtual Task`1<T> FirstAsync(Sql sql, CancellationToken cancellationToken);
    [NullableContextAttribute("0")]
public sealed virtual Task`1<T> FirstOrDefaultAsync(string sql, CancellationToken cancellationToken);
    [NullableContextAttribute("0")]
public sealed virtual Task`1<T> FirstOrDefaultAsync(string sql, Object[] args, CancellationToken cancellationToken);
    [NullableContextAttribute("0")]
public sealed virtual Task`1<T> FirstOrDefaultAsync(Sql sql, CancellationToken cancellationToken);
    [NullableContextAttribute("0")]
public sealed virtual Task`1<int> ExecuteAsync(string sql, CancellationToken cancellationToken);
    [NullableContextAttribute("0")]
public sealed virtual Task`1<int> ExecuteAsync(string sql, Object[] args, CancellationToken cancellationToken);
    [NullableContextAttribute("0")]
[AsyncStateMachineAttribute("NPoco.Database/<ExecuteAsync>d__76")]
public sealed virtual Task`1<int> ExecuteAsync(Sql Sql, CancellationToken cancellationToken);
    [NullableContextAttribute("0")]
public sealed virtual Task`1<T> ExecuteScalarAsync(string sql, CancellationToken cancellationToken);
    [NullableContextAttribute("0")]
public sealed virtual Task`1<T> ExecuteScalarAsync(string sql, Object[] args, CancellationToken cancellationToken);
    [NullableContextAttribute("0")]
[AsyncStateMachineAttribute("NPoco.Database/<ExecuteScalarAsync>d__79`1")]
public sealed virtual Task`1<T> ExecuteScalarAsync(Sql Sql, CancellationToken cancellationToken);
    [NullableContextAttribute("0")]
[AsyncStateMachineAttribute("NPoco.Database/<ExecuteNonQueryHelperAsync>d__80")]
internal Task`1<int> ExecuteNonQueryHelperAsync(DbCommand cmd, CancellationToken cancellationToken);
    [NullableContextAttribute("0")]
[AsyncStateMachineAttribute("NPoco.Database/<ExecuteScalarHelperAsync>d__81")]
internal Task`1<object> ExecuteScalarHelperAsync(DbCommand cmd, CancellationToken cancellationToken);
    [NullableContextAttribute("0")]
[AsyncStateMachineAttribute("NPoco.Database/<ExecuteReaderHelperAsync>d__82")]
internal Task`1<DbDataReader> ExecuteReaderHelperAsync(DbCommand cmd, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("NPoco.Database/<DisposeAsync>d__83")]
public sealed virtual ValueTask DisposeAsync();
    public sealed virtual IDatabaseType get_DatabaseType();
    public IsolationLevel get_IsolationLevel();
    public sealed virtual IDictionary`2<string, object> get_Data();
    public sealed virtual void Dispose();
    [CompilerGeneratedAttribute]
public bool get_KeepConnectionAlive();
    [CompilerGeneratedAttribute]
public void set_KeepConnectionAlive(bool value);
    [CompilerGeneratedAttribute]
private bool get_ShouldCloseConnectionAutomatically();
    [CompilerGeneratedAttribute]
private void set_ShouldCloseConnectionAutomatically(bool value);
    [CompilerGeneratedAttribute]
private OpenConnectionOptions get_OpenConnectionOptions();
    [CompilerGeneratedAttribute]
private void set_OpenConnectionOptions(OpenConnectionOptions value);
    public sealed virtual IDatabase OpenSharedConnection(OpenConnectionOptions options);
    [AsyncStateMachineAttribute("NPoco.Database/<OpenSharedConnectionAsync>d__113")]
public sealed virtual Task`1<IAsyncDatabase> OpenSharedConnectionAsync(CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("NPoco.Database/<OpenSharedConnectionAsync>d__115")]
public sealed virtual Task`1<IAsyncDatabase> OpenSharedConnectionAsync(OpenConnectionOptions options, CancellationToken cancellationToken);
    private void OpenSharedConnectionInternal();
    private Task OpenSharedConnectionInternalAsync(CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("NPoco.Database/<OpenSharedConnectionImp>d__118")]
private Task OpenSharedConnectionImp(bool isInternal, bool sync, CancellationToken cancellationToken);
    private void CloseSharedConnectionInternal();
    [AsyncStateMachineAttribute("NPoco.Database/<CloseSharedConnectionInternalAsync>d__120")]
private Task CloseSharedConnectionInternalAsync();
    public sealed virtual void CloseSharedConnection();
    [AsyncStateMachineAttribute("NPoco.Database/<CloseSharedConnectionAsync>d__122")]
public sealed virtual Task CloseSharedConnectionAsync();
    [AsyncStateMachineAttribute("NPoco.Database/<CloseSharedConnectionImp>d__123")]
private Task CloseSharedConnectionImp(bool sync, CancellationToken cancellationToken);
    [CompilerGeneratedAttribute]
public VersionExceptionHandling get_VersionException();
    [CompilerGeneratedAttribute]
public void set_VersionException(VersionExceptionHandling value);
    public sealed virtual DbConnection get_Connection();
    [NullableContextAttribute("2")]
public sealed virtual DbTransaction get_Transaction();
    public sealed virtual DbParameter CreateParameter();
    public sealed virtual ITransaction GetTransaction();
    public sealed virtual ITransaction GetTransaction(IsolationLevel isolationLevel);
    public sealed virtual void SetTransaction(DbTransaction tran);
    private void OnBeginTransactionInternal();
    protected virtual void OnBeginTransaction();
    private void OnAbortTransactionInternal();
    protected virtual void OnAbortTransaction();
    private void OnCompleteTransactionInternal();
    protected virtual void OnCompleteTransaction();
    public sealed virtual void BeginTransaction();
    public sealed virtual void BeginTransaction(IsolationLevel isolationLevel);
    [AsyncStateMachineAttribute("NPoco.Database/<GetTransactionAsync>d__144")]
public sealed virtual Task`1<IAsyncTransaction> GetTransactionAsync();
    [AsyncStateMachineAttribute("NPoco.Database/<GetTransactionAsync>d__145")]
public sealed virtual Task`1<IAsyncTransaction> GetTransactionAsync(IsolationLevel isolationLevel);
    public sealed virtual Task BeginTransactionAsync(CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("NPoco.Database/<BeginTransactionAsync>d__147")]
public sealed virtual Task BeginTransactionAsync(IsolationLevel isolationLevel, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("NPoco.Database/<OnBeginTransactionInternalAsync>d__148")]
private Task OnBeginTransactionInternalAsync(CancellationToken cancellationToken);
    protected virtual Task OnBeginTransactionAsync(CancellationToken cancellationToken);
    public sealed virtual Task AbortTransactionAsync(CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("NPoco.Database/<OnAbortTransactionInternalAsync>d__151")]
private Task OnAbortTransactionInternalAsync(CancellationToken cancellationToken);
    protected virtual Task OnAbortTransactionAsync(CancellationToken cancellationToken);
    public sealed virtual Task CompleteTransactionAsync(CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("NPoco.Database/<OnCompleteTransactionInternalAsync>d__154")]
private Task OnCompleteTransactionInternalAsync(CancellationToken cancellationToken);
    protected virtual Task OnCompleteTransactionAsync(CancellationToken cancellationToken);
    public sealed virtual void AbortTransaction();
    [AsyncStateMachineAttribute("NPoco.Database/<AbortTransaction>d__157")]
private Task AbortTransaction(bool fromComplete, bool sync, CancellationToken cancellationToken);
    public sealed virtual void CompleteTransaction();
    [AsyncStateMachineAttribute("NPoco.Database/<CompleteTransactionImp>d__159")]
private Task CompleteTransactionImp(bool sync, CancellationToken cancellationToken);
    [CompilerGeneratedAttribute]
internal bool get_TransactionIsAborted();
    [CompilerGeneratedAttribute]
internal void set_TransactionIsAborted(bool value);
    [CompilerGeneratedAttribute]
internal int get_TransactionCount();
    [CompilerGeneratedAttribute]
internal void set_TransactionCount(int value);
    private bool TransactionIsOk();
    public virtual void AddParameter(DbCommand cmd, object value);
    private DbCommand CreateCommand(DbConnection connection, string sql, Object[] args);
    public virtual DbCommand CreateCommand(DbConnection connection, CommandType commandType, string sql, Object[] args);
    protected virtual void OnException(Exception exception);
    private void OnExceptionInternal(Exception exception);
    protected virtual DbConnection OnConnectionOpened(DbConnection conn);
    private DbConnection OnConnectionOpenedInternal(DbConnection conn);
    protected virtual void OnConnectionClosing(DbConnection conn);
    private void OnConnectionClosingInternal(DbConnection conn);
    protected virtual void OnExecutingCommand(DbCommand cmd);
    private void OnExecutingCommandInternal(DbCommand cmd);
    protected virtual void OnExecutedCommand(DbCommand cmd);
    private void OnExecutedCommandInternal(DbCommand cmd);
    protected virtual bool OnInserting(InsertContext insertContext);
    private bool OnInsertingInternal(InsertContext insertContext);
    protected virtual bool OnUpdating(UpdateContext updateContext);
    private bool OnUpdatingInternal(UpdateContext updateContext);
    protected virtual bool OnDeleting(DeleteContext deleteContext);
    private bool OnDeletingInternal(DeleteContext deleteContext);
    public DbCommand CreateStoredProcedureCommand(DbConnection connection, string name, Object[] args);
    public sealed virtual int Execute(string sql, Object[] args);
    public sealed virtual int Execute(Sql Sql);
    public sealed virtual int Execute(string sql, CommandType commandType, Object[] args);
    public sealed virtual T ExecuteScalar(string sql, Object[] args);
    public sealed virtual T ExecuteScalar(Sql Sql);
    public sealed virtual T ExecuteScalar(string sql, CommandType commandType, Object[] args);
    [CompilerGeneratedAttribute]
public bool get_EnableAutoSelect();
    [CompilerGeneratedAttribute]
public void set_EnableAutoSelect(bool value);
    public sealed virtual List`1<T> Fetch(string sql, Object[] args);
    public sealed virtual List`1<T> Fetch(Sql sql);
    public sealed virtual List`1<T> Fetch();
    public sealed virtual void BuildPageQueries(long skip, long take, string sql, Object[]& args, String& sqlCount, String& sqlPage);
    public sealed virtual Page`1<T> Page(long page, long itemsPerPage, Sql sql);
    public sealed virtual List`1<T> Fetch(long page, long itemsPerPage, string sql, Object[] args);
    public sealed virtual List`1<T> Fetch(long page, long itemsPerPage, Sql sql);
    public sealed virtual List`1<T> SkipTake(long skip, long take, string sql, Object[] args);
    public sealed virtual List`1<T> SkipTake(long skip, long take, Sql sql);
    public sealed virtual Dictionary`2<TKey, TValue> Dictionary(Sql Sql);
    public sealed virtual Dictionary`2<TKey, TValue> Dictionary(string sql, Object[] args);
    public sealed virtual IEnumerable`1<T> Query(string sql, Object[] args);
    public sealed virtual IEnumerable`1<T> Query(Sql Sql);
    [AsyncIteratorStateMachineAttribute("NPoco.Database/<ReadAsync>d__212`1")]
private IAsyncEnumerable`1<T> ReadAsync(object instance, DbDataReader r, PocoData pd, CancellationToken cancellationToken);
    [AsyncIteratorStateMachineAttribute("NPoco.Database/<ReadOneToManyAsync>d__213`1")]
private IAsyncEnumerable`1<T> ReadOneToManyAsync(T instance, DbDataReader r, Expression`1<Func`2<T, IList>> listExpression, Func`2<T, Object[]> idFunc, PocoData pocoData, CancellationToken cancellationToken);
    [IteratorStateMachineAttribute("NPoco.Database/<Read>d__214`1")]
private IEnumerable`1<T> Read(object instance, DbDataReader r, PocoData pd);
    [IteratorStateMachineAttribute("NPoco.Database/<ReadOneToMany>d__215`1")]
private IEnumerable`1<T> ReadOneToMany(T instance, DbDataReader r, Expression`1<Func`2<T, IList>> listExpression, Func`2<T, Object[]> idFunc, PocoData pocoData);
    public sealed virtual IQueryProviderWithIncludes`1<T> Query();
    public ValueTuple`4<List`1<T>, List`1<T1>, List`1<T2>, List`1<T3>> QueryMultiple(Func`2<IQueryProviderWithIncludes`1<T>, IQueryProvider`1<T>> query1, Func`2<IQueryProviderWithIncludes`1<T1>, IQueryProvider`1<T1>> query2, Func`2<IQueryProviderWithIncludes`1<T2>, IQueryProvider`1<T2>> query3, Func`2<IQueryProviderWithIncludes`1<T3>, IQueryProvider`1<T3>> query4);
    private IEnumerable`1<T> Query(T instance, Sql Sql);
    public sealed virtual List`1<object> Fetch(Type type, string sql, Object[] args);
    public sealed virtual List`1<object> Fetch(Type type, Sql Sql);
    public sealed virtual IEnumerable`1<object> Query(Type type, string sql, Object[] args);
    [IteratorStateMachineAttribute("NPoco.Database/<Query>d__222")]
public sealed virtual IEnumerable`1<object> Query(Type type, Sql Sql);
    [IteratorStateMachineAttribute("NPoco.Database/<QueryImp>d__223`1")]
internal IEnumerable`1<T> QueryImp(T instance, Expression`1<Func`2<T, IList>> listExpression, Func`2<T, Object[]> idFunc, Sql Sql, PocoData pocoData);
    [AsyncStateMachineAttribute("NPoco.Database/<ExecuteDataReader>d__224")]
private Task`1<DbDataReader> ExecuteDataReader(DbCommand cmd, bool sync, CancellationToken cancellationToken);
    public sealed virtual List`1<T> FetchOneToMany(Expression`1<Func`2<T, IList>> many, Sql sql);
    public sealed virtual List`1<T> FetchOneToMany(Expression`1<Func`2<T, IList>> many, string sql, Object[] args);
    public sealed virtual List`1<T> FetchOneToMany(Expression`1<Func`2<T, IList>> many, Func`2<T, object> idFunc, Sql sql);
    public sealed virtual List`1<T> FetchOneToMany(Expression`1<Func`2<T, IList>> many, Func`2<T, object> idFunc, string sql, Object[] args);
    public sealed virtual Page`1<T> Page(long page, long itemsPerPage, string sql, Object[] args);
    [AsyncStateMachineAttribute("NPoco.Database/<PageImpAsync>d__230`1")]
private Task`1<Page`1<T>> PageImpAsync(long page, long itemsPerPage, string sql, Object[] args, bool sync, CancellationToken cancellationToken);
    public sealed virtual TRet FetchMultiple(Func`3<List`1<T1>, List`1<T2>, TRet> cb, string sql, Object[] args);
    public sealed virtual TRet FetchMultiple(Func`4<List`1<T1>, List`1<T2>, List`1<T3>, TRet> cb, string sql, Object[] args);
    [NullableContextAttribute("2")]
public sealed virtual TRet FetchMultiple(Func`5<List`1<T1>, List`1<T2>, List`1<T3>, List`1<T4>, TRet> cb, string sql, Object[] args);
    public sealed virtual TRet FetchMultiple(Func`3<List`1<T1>, List`1<T2>, TRet> cb, Sql sql);
    [NullableContextAttribute("2")]
public sealed virtual TRet FetchMultiple(Func`4<List`1<T1>, List`1<T2>, List`1<T3>, TRet> cb, Sql sql);
    [NullableContextAttribute("2")]
public sealed virtual TRet FetchMultiple(Func`5<List`1<T1>, List`1<T2>, List`1<T3>, List`1<T4>, TRet> cb, Sql sql);
    public sealed virtual ValueTuple`2<List`1<T1>, List`1<T2>> FetchMultiple(string sql, Object[] args);
    [NullableContextAttribute("2")]
public sealed virtual ValueTuple`3<List`1<T1>, List`1<T2>, List`1<T3>> FetchMultiple(string sql, Object[] args);
    [NullableContextAttribute("2")]
public sealed virtual ValueTuple`4<List`1<T1>, List`1<T2>, List`1<T3>, List`1<T4>> FetchMultiple(string sql, Object[] args);
    [NullableContextAttribute("2")]
public sealed virtual ValueTuple`2<List`1<T1>, List`1<T2>> FetchMultiple(Sql sql);
    [NullableContextAttribute("2")]
public sealed virtual ValueTuple`3<List`1<T1>, List`1<T2>, List`1<T3>> FetchMultiple(Sql sql);
    [NullableContextAttribute("2")]
public sealed virtual ValueTuple`4<List`1<T1>, List`1<T2>, List`1<T3>, List`1<T4>> FetchMultiple(Sql sql);
    [NullableContextAttribute("2")]
[AsyncStateMachineAttribute("NPoco.Database/<FetchMultipleImp>d__244`5")]
private Task`1<TRet> FetchMultipleImp(Type[] types, object cb, Sql Sql, bool sync, CancellationToken cancellationToken);
    public sealed virtual bool Exists(object primaryKey);
    public sealed virtual T SingleById(object primaryKey);
    [NullableContextAttribute("2")]
public sealed virtual T SingleOrDefaultById(object primaryKey);
    private Sql GenerateSingleByIdSql(object primaryKey);
    public sealed virtual T Single(string sql, Object[] args);
    public sealed virtual T SingleInto(T instance, string sql, Object[] args);
    public sealed virtual T SingleOrDefault(string sql, Object[] args);
    public sealed virtual T SingleOrDefaultInto(T instance, string sql, Object[] args);
    public sealed virtual T First(string sql, Object[] args);
    public sealed virtual T FirstInto(T instance, string sql, Object[] args);
    public sealed virtual T FirstOrDefault(string sql, Object[] args);
    public sealed virtual T FirstOrDefaultInto(T instance, string sql, Object[] args);
    public sealed virtual T Single(Sql sql);
    public sealed virtual T SingleInto(T instance, Sql sql);
    [NullableContextAttribute("2")]
public sealed virtual T SingleOrDefault(Sql sql);
    public sealed virtual T SingleOrDefaultInto(T instance, Sql sql);
    public sealed virtual T First(Sql sql);
    public sealed virtual T FirstInto(T instance, Sql sql);
    [NullableContextAttribute("2")]
public sealed virtual T FirstOrDefault(Sql sql);
    public sealed virtual T FirstOrDefaultInto(T instance, Sql sql);
    public sealed virtual object Insert(T poco);
    public sealed virtual object Insert(string tableName, string primaryKeyName, T poco);
    public virtual object Insert(string tableName, string primaryKeyName, bool autoIncrement, T poco);
    [NullableContextAttribute("2")]
public sealed virtual int InsertBatch(IEnumerable`1<T> pocos, BatchOptions options);
    [NullableContextAttribute("2")]
public sealed virtual void InsertBulk(IEnumerable`1<T> pocos, InsertBulkOptions options);
    public sealed virtual int Update(string tableName, string primaryKeyName, object poco, object primaryKeyValue);
    public virtual int Update(string tableName, string primaryKeyName, object poco, object primaryKeyValue, IEnumerable`1<string> columns);
    [NullableContextAttribute("2")]
public sealed virtual int UpdateBatch(IEnumerable`1<UpdateBatch`1<T>> pocos, BatchOptions options);
    [AsyncStateMachineAttribute("NPoco.Database/<UpdateImpAsync>d__273")]
private Task`1<int> UpdateImpAsync(string tableName, string primaryKeyName, object poco, object primaryKeyValue, IEnumerable`1<string> columns, bool sync, CancellationToken cancellationToken);
    internal static string BuildPrimaryKeySql(Database database, Dictionary`2<string, object> primaryKeyValuePair, Int32& index);
    internal static Dictionary`2<string, object> GetPrimaryKeyValues(Database database, PocoData pocoData, string primaryKeyName, object primaryKeyValueOrPoco, bool isPoco);
    internal static Dictionary`2<string, object> ProcessMapper(Database database, PocoData pd, Dictionary`2<string, object> primaryKeyValuePairs);
    public sealed virtual IUpdateQueryProvider`1<T> UpdateMany();
    public sealed virtual int Update(string tableName, string primaryKeyName, object poco);
    public sealed virtual int Update(string tableName, string primaryKeyName, object poco, IEnumerable`1<string> columns);
    public sealed virtual int Update(object poco, IEnumerable`1<string> columns);
    public sealed virtual int Update(T poco, Expression`1<Func`2<T, object>> fields);
    public sealed virtual int Update(object poco);
    public sealed virtual int Update(object poco, object primaryKeyValue);
    public sealed virtual int Update(object poco, object primaryKeyValue, IEnumerable`1<string> columns);
    public sealed virtual int Update(string sql, Object[] args);
    public sealed virtual int Update(Sql sql);
    public sealed virtual IDeleteQueryProvider`1<T> DeleteMany();
    public sealed virtual int Delete(string tableName, string primaryKeyName, object poco);
    public virtual int Delete(string tableName, string primaryKeyName, object poco, object primaryKeyValue);
    [AsyncStateMachineAttribute("NPoco.Database/<DeleteImpAsync>d__290")]
private Task`1<int> DeleteImpAsync(string tableName, string primaryKeyName, object poco, object primaryKeyValue, bool sync, CancellationToken cancellationToken);
    public sealed virtual int Delete(object poco);
    public sealed virtual int Delete(object pocoOrPrimaryKey);
    public sealed virtual int Delete(string sql, Object[] args);
    public sealed virtual int Delete(Sql sql);
    public sealed virtual bool IsNew(T poco);
    [AsyncStateMachineAttribute("NPoco.Database/<IsNewAsync>d__296`1")]
private Task`1<bool> IsNewAsync(T poco, bool sync, CancellationToken cancellationToken);
    public sealed virtual void Save(T poco);
    [CompilerGeneratedAttribute]
public sealed virtual int get_CommandTimeout();
    [CompilerGeneratedAttribute]
public sealed virtual void set_CommandTimeout(int value);
    [CompilerGeneratedAttribute]
public sealed virtual int get_OneTimeCommandTimeout();
    [CompilerGeneratedAttribute]
public sealed virtual void set_OneTimeCommandTimeout(int value);
    private void DoPreExecute(DbCommand cmd);
    [NullableContextAttribute("2")]
public string get_LastSQL();
    public Object[] get_LastArgs();
    public string get_LastCommand();
    public virtual string FormatCommand(DbCommand cmd);
    public string FormatCommand(string sql, Object[] args);
    public sealed virtual List`1<IInterceptor> get_Interceptors();
    public sealed virtual IMapperCollection get_Mappers();
    public sealed virtual void set_Mappers(IMapperCollection value);
    public sealed virtual IPocoDataFactory get_PocoDataFactory();
    public sealed virtual void set_PocoDataFactory(IPocoDataFactory value);
    public sealed virtual string get_ConnectionString();
    internal int ExecuteNonQueryHelper(DbCommand cmd);
    internal object ExecuteScalarHelper(DbCommand cmd);
    internal DbDataReader ExecuteReaderHelper(DbCommand cmd);
    protected virtual T ExecutionHook(Func`1<T> action);
    [AsyncStateMachineAttribute("NPoco.Database/<ExecutionHookAsync>d__342`1")]
protected virtual Task`1<T> ExecutionHookAsync(Func`2<CancellationToken, Task`1<T>> action, CancellationToken cancellationToken);
    private sealed virtual override int NPoco.IDatabaseHelpers.ExecuteNonQueryHelper(DbCommand cmd);
    private sealed virtual override object NPoco.IDatabaseHelpers.ExecuteScalarHelper(DbCommand cmd);
    private sealed virtual override DbDataReader NPoco.IDatabaseHelpers.ExecuteReaderHelper(DbCommand cmd);
    private sealed virtual override Task`1<int> NPoco.IDatabaseHelpers.ExecuteNonQueryHelperAsync(DbCommand cmd, CancellationToken cancellationToken);
    private sealed virtual override Task`1<object> NPoco.IDatabaseHelpers.ExecuteScalarHelperAsync(DbCommand cmd, CancellationToken cancellationToken);
    private sealed virtual override Task`1<DbDataReader> NPoco.IDatabaseHelpers.ExecuteReaderHelperAsync(DbCommand cmd, CancellationToken cancellationToken);
    public static bool IsEnum(MemberInfoData memberInfo);
    [NullableContextAttribute("0")]
[CompilerGeneratedAttribute]
private string <CreateCommand>b__171_0(Match m);
}
public class NPoco.DatabaseFactory : object {
    public static IColumnSerializer ColumnSerializer;
    private DatabaseFactoryConfigOptions _options;
    private IPocoDataFactory _cachedPocoDataFactory;
    public DatabaseFactory(DatabaseFactoryConfigOptions options);
    private static DatabaseFactory();
    public DatabaseFactoryConfig Config();
    public static DatabaseFactory Config(Action`1<DatabaseFactoryConfig> optionsAction);
    public IDatabase Build(IDatabase database);
    private void ConfigureInterceptors(IDatabase database);
    private void ConfigurePocoDataFactoryAndMappers(IDatabase database, MapperCollection mappers);
    private MapperCollection BuildMapperCollection(IDatabase database);
    public IPocoDataFactory GetPocoDataFactory();
    public Database GetDatabase();
}
public class NPoco.DatabaseFactoryConfig : object {
    private DatabaseFactoryConfigOptions _options;
    public DatabaseFactoryConfig(DatabaseFactoryConfigOptions options);
    public DatabaseFactoryConfig UsingDatabase(Func`1<Database> database);
    public DatabaseFactoryConfig WithMapper(IMapper mapper);
    public DatabaseFactoryConfig WithFluentConfig(FluentConfig fluentConfig);
    public DatabaseFactoryConfig WithMapperFactory(Func`2<DbDataReader, T> factory);
    public DatabaseFactoryConfig WithInterceptor(IInterceptor interceptor);
    public DatabaseFactoryConfig WithColumnSerializer(IColumnSerializer columnSerializer);
}
public class NPoco.DatabaseFactoryConfigOptions : object {
    [CompilerGeneratedAttribute]
private Func`1<Database> <Database>k__BackingField;
    [CompilerGeneratedAttribute]
private MapperCollection <Mapper>k__BackingField;
    [CompilerGeneratedAttribute]
private FluentConfig <PocoDataFactory>k__BackingField;
    [CompilerGeneratedAttribute]
private List`1<IInterceptor> <Interceptors>k__BackingField;
    [CompilerGeneratedAttribute]
private IColumnSerializer <ColumnSerializer>k__BackingField;
    public Func`1<Database> Database { get; public set; }
    public MapperCollection Mapper { get; private set; }
    public FluentConfig PocoDataFactory { get; public set; }
    public List`1<IInterceptor> Interceptors { get; private set; }
    public IColumnSerializer ColumnSerializer { get; public set; }
    [CompilerGeneratedAttribute]
public Func`1<Database> get_Database();
    [CompilerGeneratedAttribute]
public void set_Database(Func`1<Database> value);
    [CompilerGeneratedAttribute]
public MapperCollection get_Mapper();
    [CompilerGeneratedAttribute]
private void set_Mapper(MapperCollection value);
    [CompilerGeneratedAttribute]
public FluentConfig get_PocoDataFactory();
    [CompilerGeneratedAttribute]
public void set_PocoDataFactory(FluentConfig value);
    [CompilerGeneratedAttribute]
public List`1<IInterceptor> get_Interceptors();
    [CompilerGeneratedAttribute]
private void set_Interceptors(List`1<IInterceptor> value);
    [CompilerGeneratedAttribute]
public IColumnSerializer get_ColumnSerializer();
    [CompilerGeneratedAttribute]
public void set_ColumnSerializer(IColumnSerializer value);
}
public abstract class NPoco.DatabaseType : object {
    private Dictionary`2<Type, DbType> typeMap;
    internal static string LinqBinary;
    public static DatabaseType SqlServer2012 { get; }
    public static DatabaseType SqlServer2008 { get; }
    public static DatabaseType SqlServer2005 { get; }
    public static DatabaseType PostgreSQL { get; }
    public static DatabaseType Oracle { get; }
    public static DatabaseType OracleManaged { get; }
    public static DatabaseType MySQL { get; }
    public static DatabaseType SQLite { get; }
    public static DatabaseType SQLCe { get; }
    public static DatabaseType Firebird { get; }
    public static DatabaseType get_SqlServer2012();
    public static DatabaseType get_SqlServer2008();
    public static DatabaseType get_SqlServer2005();
    public static DatabaseType get_PostgreSQL();
    public static DatabaseType get_Oracle();
    public static DatabaseType get_OracleManaged();
    public static DatabaseType get_MySQL();
    public static DatabaseType get_SQLite();
    public static DatabaseType get_SQLCe();
    public static DatabaseType get_Firebird();
    public sealed virtual void AddTypeMap(Type type, DbType dbType);
    public virtual Nullable`1<DbType> LookupDbType(Type type, string name);
    public virtual string GetParameterPrefix(string connectionString);
    public virtual object MapParameterValue(object value);
    public virtual void PreExecute(DbCommand cmd);
    public virtual string BuildPageQuery(long skip, long take, SQLParts parts, Object[]& args);
    public virtual bool UseColumnAliases();
    public virtual string GetExistsSql();
    public virtual string EscapeTableName(string tableName);
    public virtual string EscapeSqlIdentifier(string str);
    public virtual string GetAutoIncrementExpression(TableInfo ti);
    public virtual string GetInsertOutputClause(string primaryKeyName, bool useOutputClause);
    public virtual object ExecuteInsert(IDatabase db, DbCommand cmd, string primaryKeyName, bool useOutputClause, T poco, Object[] args);
    [AsyncStateMachineAttribute("NPoco.DatabaseType/<ExecuteInsertAsync>d__36`1")]
public virtual Task`1<object> ExecuteInsertAsync(IDatabase db, DbCommand cmd, string primaryKeyName, bool useOutputClause, T poco, Object[] args, CancellationToken cancellationToken);
    public virtual void InsertBulk(IDatabase db, IEnumerable`1<T> pocos, InsertBulkOptions options);
    [AsyncStateMachineAttribute("NPoco.DatabaseType/<InsertBulkAsync>d__38`1")]
public virtual Task InsertBulkAsync(IDatabase db, IEnumerable`1<T> pocos, InsertBulkOptions options, CancellationToken cancellationToken);
    public static DatabaseType Resolve(string typeName, string providerName);
    public virtual string GetDefaultInsertSql(string tableName, string primaryKeyName, bool useOutputClause, String[] names, String[] parameters);
    public virtual IsolationLevel GetDefaultTransactionIsolationLevel();
    public virtual string GetSQLForTransactionLevel(IsolationLevel isolationLevel);
    public sealed virtual ISqlExpression`1<T> ExpressionVisitor(IDatabase db, PocoData pocoData);
    public virtual ISqlExpression`1<T> ExpressionVisitor(IDatabase db, PocoData pocoData, bool prefixTableName);
    public virtual string GetProviderName();
    public virtual Task`1<int> ExecuteNonQueryAsync(IDatabase database, DbCommand cmd, CancellationToken cancellationToken);
    public virtual Task`1<object> ExecuteScalarAsync(IDatabase database, DbCommand cmd, CancellationToken cancellationToken);
    public virtual Task`1<DbDataReader> ExecuteReaderAsync(IDatabase database, DbCommand cmd, CancellationToken cancellationToken);
    public virtual object ProcessDefaultMappings(PocoColumn pocoColumn, object value);
    public virtual string FormatCommand(DbCommand cmd);
    public virtual string FormatCommand(string sql, Object[] args);
}
public class NPoco.DatabaseTypes.FirebirdDatabaseType : DatabaseType {
    public virtual string GetParameterPrefix(string connectionString);
    public virtual void PreExecute(DbCommand cmd);
    public virtual string EscapeTableName(string tableName);
    public virtual string EscapeSqlIdentifier(string str);
    public virtual string BuildPageQuery(long skip, long take, SQLParts parts, Object[]& args);
    public virtual string GetDefaultInsertSql(string tableName, string primaryKeyName, bool useOutputClause, String[] names, String[] parameters);
    private DbParameter AdjustSqlInsertCommandText(DbCommand cmd, string primaryKeyName);
    public virtual object ExecuteInsert(IDatabase db, DbCommand cmd, string primaryKeyName, bool useOutputClause, T poco, Object[] args);
    [AsyncStateMachineAttribute("NPoco.DatabaseTypes.FirebirdDatabaseType/<ExecuteInsertAsync>d__8`1")]
public virtual Task`1<object> ExecuteInsertAsync(IDatabase db, DbCommand cmd, string primaryKeyName, bool useOutputClause, T poco, Object[] args, CancellationToken cancellationToken);
    public virtual ISqlExpression`1<T> ExpressionVisitor(IDatabase db, PocoData pocoData, bool prefixTableName);
    public virtual string GetProviderName();
}
public class NPoco.DatabaseTypes.MySqlDatabaseType : DatabaseType {
    public virtual string GetParameterPrefix(string connectionString);
    public virtual void PreExecute(DbCommand cmd);
    public virtual string EscapeSqlIdentifier(string str);
    public virtual string GetExistsSql();
    public virtual string GetDefaultInsertSql(string tableName, string primaryKeyName, bool useOutputClause, String[] names, String[] parameters);
    public virtual string GetProviderName();
    public virtual IsolationLevel GetDefaultTransactionIsolationLevel();
    public virtual ISqlExpression`1<T> ExpressionVisitor(IDatabase db, PocoData pocoData, bool prefixTableName);
}
public class NPoco.DatabaseTypes.OracleDatabaseType : DatabaseType {
    public virtual ISqlExpression`1<T> ExpressionVisitor(IDatabase db, PocoData pocoData, bool prefixTableName);
    public virtual string GetParameterPrefix(string connectionString);
    public virtual void PreExecute(DbCommand cmd);
    public virtual string BuildPageQuery(long skip, long take, SQLParts parts, Object[]& args);
    public virtual string EscapeSqlIdentifier(string str);
    public virtual string GetAutoIncrementExpression(TableInfo ti);
    private DbParameter AdjustSqlInsertCommandText(DbCommand cmd, string primaryKeyName);
    public virtual object ExecuteInsert(IDatabase db, DbCommand cmd, string primaryKeyName, bool useOutputClause, T poco, Object[] args);
    [AsyncStateMachineAttribute("NPoco.DatabaseTypes.OracleDatabaseType/<ExecuteInsertAsync>d__8`1")]
public virtual Task`1<object> ExecuteInsertAsync(IDatabase db, DbCommand cmd, string primaryKeyName, bool useOutputClause, T poco, Object[] args, CancellationToken cancellationToken);
    public virtual string GetProviderName();
}
public class NPoco.DatabaseTypes.OracleManagedDatabaseType : OracleDatabaseType {
    public virtual string GetProviderName();
}
public class NPoco.DatabaseTypes.PostgreSQLDatabaseType : DatabaseType {
    public virtual ISqlExpression`1<T> ExpressionVisitor(IDatabase db, PocoData pocoData, bool prefixTableName);
    public virtual object MapParameterValue(object value);
    public virtual string EscapeSqlIdentifier(string str);
    private void AdjustSqlInsertCommandText(DbCommand cmd, string primaryKeyName);
    public virtual object ExecuteInsert(IDatabase db, DbCommand cmd, string primaryKeyName, bool useOutputClause, T poco, Object[] args);
    [AsyncStateMachineAttribute("NPoco.DatabaseTypes.PostgreSQLDatabaseType/<ExecuteInsertAsync>d__5`1")]
public virtual Task`1<object> ExecuteInsertAsync(IDatabase db, DbCommand cmd, string primaryKeyName, bool useOutputClause, T poco, Object[] args, CancellationToken cancellationToken);
    public virtual string GetParameterPrefix(string connectionString);
    public virtual string GetProviderName();
}
public class NPoco.DatabaseTypes.SQLiteDatabaseType : DatabaseType {
    public virtual object MapParameterValue(object value);
    private void AdjustSqlInsertCommandText(DbCommand cmd);
    public virtual object ExecuteInsert(IDatabase db, DbCommand cmd, string primaryKeyName, bool useOutputClause, T poco, Object[] args);
    [AsyncStateMachineAttribute("NPoco.DatabaseTypes.SQLiteDatabaseType/<ExecuteInsertAsync>d__3`1")]
public virtual Task`1<object> ExecuteInsertAsync(IDatabase db, DbCommand cmd, string primaryKeyName, bool useOutputClause, T poco, Object[] args, CancellationToken cancellationToken);
    public virtual string GetExistsSql();
    public virtual IsolationLevel GetDefaultTransactionIsolationLevel();
    public virtual string GetSQLForTransactionLevel(IsolationLevel isolationLevel);
    public virtual string GetProviderName();
}
public abstract class NPoco.DefaultMapper : object {
    public virtual Func`2<object, object> GetFromDbConverter(MemberInfo destMemberInfo, Type sourceType);
    public virtual Func`2<object, object> GetFromDbConverter(Type destType, Type sourceType);
    public virtual Func`2<object, object> GetToDbConverter(Type destType, MemberInfo sourceMemberInfo);
    public virtual Func`2<object, object> GetParameterConverter(DbCommand dbCommand, Type sourceType);
}
internal class NPoco.DynamicDatabaseType : object {
    public static Cache`2<string, DatabaseType> cache;
    private static DynamicDatabaseType();
    public static DatabaseType MakeSqlServerType(string type);
}
public class NPoco.EnumMapper : object {
    private Dictionary`2<Type, Dictionary`2<string, object>> _stringsToEnums;
    private Dictionary`2<Type, Dictionary`2<int, string>> _enumNumbersToStrings;
    private ReaderWriterLockSlim _lock;
    public object EnumFromString(Type type, string value);
    public string StringFromEnum(object theEnum);
    private void PopulateIfNotPresent(Type type);
    private void Populate(Type type);
    public sealed virtual void Dispose();
}
public class NPoco.ExpandoColumn : PocoColumn {
    public virtual void SetValue(object target, object val);
    public virtual object GetValue(object target);
    public virtual object ChangeType(object val);
}
[ExtensionAttribute]
public static class NPoco.ExpressionExtensions : object {
    [ExtensionAttribute]
public static int UpdateWhere(IDatabase database, T obj, string where, Object[] parameters);
    [ExtensionAttribute]
public static int DeleteWhere(IDatabase database, string where, Object[] parameters);
}
public class NPoco.Expressions.DefaultSqlExpression`1 : SqlExpression`1<T> {
    public DefaultSqlExpression`1(IDatabase database, PocoData pocoData, bool prefixTableName);
    public DefaultSqlExpression`1(IDatabase database, PocoData pocoData);
    public DefaultSqlExpression`1(IDatabase database, bool prefixTableName);
    public DefaultSqlExpression`1(IDatabase database);
}
public class NPoco.Expressions.EnumMemberAccess : MemberAccessString {
    public EnumMemberAccess(PocoColumn pocoColumn, PocoColumn[] pocoColumns, string text, Type type);
}
public abstract class NPoco.Expressions.ExpressionVisitor : object {
    protected virtual Expression Visit(Expression exp);
    protected virtual MemberBinding VisitBinding(MemberBinding binding);
    protected virtual ElementInit VisitElementInitializer(ElementInit initializer);
    protected virtual Expression VisitUnary(UnaryExpression u);
    protected virtual Expression VisitBinary(BinaryExpression b);
    protected virtual Expression VisitTypeIs(TypeBinaryExpression b);
    protected virtual Expression VisitConstant(ConstantExpression c);
    protected virtual Expression VisitConditional(ConditionalExpression c);
    protected virtual Expression VisitParameter(ParameterExpression p);
    protected virtual Expression VisitMemberAccess(MemberExpression m);
    protected virtual Expression VisitMethodCall(MethodCallExpression m);
    protected virtual ReadOnlyCollection`1<Expression> VisitExpressionList(ReadOnlyCollection`1<Expression> original);
    protected virtual MemberAssignment VisitMemberAssignment(MemberAssignment assignment);
    protected virtual MemberMemberBinding VisitMemberMemberBinding(MemberMemberBinding binding);
    protected virtual MemberListBinding VisitMemberListBinding(MemberListBinding binding);
    protected virtual IEnumerable`1<MemberBinding> VisitBindingList(ReadOnlyCollection`1<MemberBinding> original);
    protected virtual IEnumerable`1<ElementInit> VisitElementInitializerList(ReadOnlyCollection`1<ElementInit> original);
    protected virtual Expression VisitLambda(LambdaExpression lambda);
    protected virtual NewExpression VisitNew(NewExpression nex);
    protected virtual Expression VisitMemberInit(MemberInitExpression init);
    protected virtual Expression VisitListInit(ListInitExpression init);
    protected virtual Expression VisitNewArray(NewArrayExpression na);
    protected virtual Expression VisitInvocation(InvocationExpression iv);
}
public class NPoco.Expressions.FirebirdSqlExpression`1 : SqlExpression`1<T> {
    public FirebirdSqlExpression`1(IDatabase database, PocoData pocoData, bool prefixTableName);
    public FirebirdSqlExpression`1(IDatabase database, PocoData pocoData);
    protected virtual string SubstringStatement(PartialSqlString columnName, int startIndex, int length);
    protected virtual string GetDateTimeSql(string memberName, object m);
}
[ExtensionAttribute]
public static class NPoco.Expressions.LinqExtensions : object {
    [ExtensionAttribute]
public static T GetConstantValue(Expression exp);
}
public class NPoco.Expressions.MemberAccessString : PartialSqlString {
    [CompilerGeneratedAttribute]
private PocoColumn <PocoColumn>k__BackingField;
    [CompilerGeneratedAttribute]
private PocoColumn[] <PocoColumns>k__BackingField;
    [CompilerGeneratedAttribute]
private Type <Type>k__BackingField;
    public PocoColumn PocoColumn { get; private set; }
    public PocoColumn[] PocoColumns { get; private set; }
    public Type Type { get; public set; }
    public MemberAccessString(PocoColumn pocoColumn, PocoColumn[] pocoColumns, string text, Type type);
    [CompilerGeneratedAttribute]
public PocoColumn get_PocoColumn();
    [CompilerGeneratedAttribute]
private void set_PocoColumn(PocoColumn value);
    [CompilerGeneratedAttribute]
public PocoColumn[] get_PocoColumns();
    [CompilerGeneratedAttribute]
private void set_PocoColumns(PocoColumn[] value);
    [CompilerGeneratedAttribute]
public Type get_Type();
    [CompilerGeneratedAttribute]
public void set_Type(Type value);
}
public class NPoco.Expressions.MySqlSqlExpression`1 : SqlExpression`1<T> {
    public MySqlSqlExpression`1(IDatabase database, PocoData pocoData);
    public MySqlSqlExpression`1(IDatabase database, PocoData pocoData, bool prefixTableName);
    protected virtual string EscapeParam(object par);
    protected virtual string GetDateTimeSql(string memberName, object m);
}
public class NPoco.Expressions.NullableMemberAccess : MemberAccessString {
    public NullableMemberAccess(PocoColumn pocoColumn, PocoColumn[] pocoColumns, string text, Type type);
}
public class NPoco.Expressions.OracleExpression`1 : SqlExpression`1<T> {
    public OracleExpression`1(IDatabase database, PocoData pocoData, bool prefixTableName);
    protected virtual string GetDateTimeSql(string memberName, object m);
}
internal static class NPoco.Expressions.PartialEvaluator : object {
    public static Expression Eval(Expression expression, Func`2<Expression, bool> fnCanBeEvaluated);
    public static Expression Eval(Expression expression);
    private static bool CanBeEvaluatedLocally(Expression expression);
}
public class NPoco.Expressions.PartialSqlString : object {
    [CompilerGeneratedAttribute]
private string <Text>k__BackingField;
    public string Text { get; public set; }
    public PartialSqlString(string text);
    [CompilerGeneratedAttribute]
public string get_Text();
    [CompilerGeneratedAttribute]
public void set_Text(string value);
    public virtual string ToString();
}
public class NPoco.Expressions.PostgreSQLExpression`1 : SqlExpression`1<T> {
    public PostgreSQLExpression`1(IDatabase database, PocoData pocoData, bool prefixTableName);
    protected virtual string GetDateTimeSql(string memberName, object m);
}
[ExtensionAttribute]
public static class NPoco.Expressions.S : object {
    [ExtensionAttribute]
public static bool In(T value, IEnumerable`1<T> list);
    public static string Desc(T value);
    public static string As(T value, object asValue);
    public static T Sum(T value);
    public static T Count(T value);
    public static T Min(T value);
    public static T Max(T value);
    public static T Avg(T value);
}
public abstract class NPoco.Expressions.SqlExpression`1 : object {
    private Expression`1<Func`2<T, bool>> underlyingExpression;
    private List`1<string> orderByProperties;
    private List`1<OrderByMember> orderByMembers;
    private List`1<SelectMember> selectMembers;
    private List`1<GeneralMember> generalMembers;
    private string selectExpression;
    private string whereExpression;
    private string groupBy;
    private string havingExpression;
    private string orderBy;
    private string tableHint;
    private string sep;
    protected string EscapeChar;
    private PocoData _pocoData;
    private IDatabase _database;
    private IDatabaseType _databaseType;
    [CompilerGeneratedAttribute]
private bool <PrefixFieldWithTableName>k__BackingField;
    [CompilerGeneratedAttribute]
private Type <_type>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<int> <Rows>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<int> <Skip>k__BackingField;
    private List`1<object> _params;
    private string paramPrefix;
    private bool _projection;
    [CompilerGeneratedAttribute]
private ISqlExpressionContext<T> <Context>k__BackingField;
    private List`1<OrderByMember> NPoco.Expressions.ISqlExpression.OrderByMembers { get; }
    private List`1<SelectMember> NPoco.Expressions.ISqlExpression.SelectMembers { get; }
    private List`1<GeneralMember> NPoco.Expressions.ISqlExpression.GeneralMembers { get; }
    private string NPoco.Expressions.ISqlExpression.WhereSql { get; }
    private Nullable`1<int> NPoco.Expressions.ISqlExpression.Rows { get; }
    private Nullable`1<int> NPoco.Expressions.ISqlExpression.Skip { get; }
    private Type NPoco.Expressions.ISqlExpression.Type { get; }
    private Object[] NPoco.Expressions.ISqlExpression.Params { get; }
    private string NPoco.Expressions.ISqlExpression.TableHint { get; }
    private bool PrefixFieldWithTableName { get; private set; }
    private Type _type { get; private set; }
    private string WhereExpression { get; private set; }
    private string GroupByExpression { get; private set; }
    private string HavingExpression { get; private set; }
    private string OrderByExpression { get; private set; }
    protected string LimitExpression { get; }
    private Nullable`1<int> Rows { get; private set; }
    private Nullable`1<int> Skip { get; private set; }
    protected internal PocoData ModelDef { get; protected internal set; }
    public ISqlExpressionContext<T> Context { get; private set; }
    public SqlExpression`1(IDatabase database, PocoData pocoData, bool prefixTableName);
    private sealed virtual override List`1<OrderByMember> NPoco.Expressions.ISqlExpression.get_OrderByMembers();
    private sealed virtual override List`1<SelectMember> NPoco.Expressions.ISqlExpression.get_SelectMembers();
    private sealed virtual override List`1<GeneralMember> NPoco.Expressions.ISqlExpression.get_GeneralMembers();
    private sealed virtual override string NPoco.Expressions.ISqlExpression.get_WhereSql();
    private sealed virtual override Nullable`1<int> NPoco.Expressions.ISqlExpression.get_Rows();
    private sealed virtual override Nullable`1<int> NPoco.Expressions.ISqlExpression.get_Skip();
    private sealed virtual override Type NPoco.Expressions.ISqlExpression.get_Type();
    private sealed virtual override Object[] NPoco.Expressions.ISqlExpression.get_Params();
    private sealed virtual override string NPoco.Expressions.ISqlExpression.get_TableHint();
    private sealed virtual override string NPoco.Expressions.ISqlExpression.ApplyPaging(string sql, IEnumerable`1<PocoColumn[]> columns, Dictionary`2<string, JoinData> joinSqlExpressions);
    [CompilerGeneratedAttribute]
private bool get_PrefixFieldWithTableName();
    [CompilerGeneratedAttribute]
private void set_PrefixFieldWithTableName(bool value);
    [CompilerGeneratedAttribute]
private Type get__type();
    [CompilerGeneratedAttribute]
private void set__type(Type value);
    public virtual ISqlExpression`1<T> Select(Expression`1<Func`2<T, TKey>> fields);
    public virtual List`1<SelectMember> SelectProjection(Expression`1<Func`2<T, TKey>> fields);
    public virtual List`1<SelectMember> SelectDistinct(Expression`1<Func`2<T, TKey>> fields);
    public virtual ISqlExpression`1<T> Where(string sqlFilter, Object[] filterParams);
    private void appendSqlFilter(string sqlFilter);
    public sealed virtual string On(Expression`1<Func`3<T, T2, bool>> predicate);
    public virtual ISqlExpression`1<T> Where(Expression`1<Func`2<T, bool>> predicate);
    protected virtual ISqlExpression`1<T> And(Expression`1<Func`2<T, bool>> predicate);
    private void ProcessInternalExpression(Expression`1<Func`2<T, bool>> predicate);
    private bool CanBeEvaluatedLocally(Expression expression);
    public virtual ISqlExpression`1<T> GroupBy(Expression`1<Func`2<T, TKey>> keySelector);
    public virtual ISqlExpression`1<T> OrderBy(Expression`1<Func`2<T, TKey>> keySelector);
    public virtual ISqlExpression`1<T> ThenBy(Expression`1<Func`2<T, TKey>> keySelector);
    public virtual ISqlExpression`1<T> OrderByDescending(Expression`1<Func`2<T, TKey>> keySelector);
    public virtual ISqlExpression`1<T> ThenByDescending(Expression`1<Func`2<T, TKey>> keySelector);
    private void BuildOrderByClauseInternal();
    public virtual void Hint(string hint);
    public virtual ISqlExpression`1<T> Limit(int skip, int rows);
    public virtual ISqlExpression`1<T> Limit(int rows);
    public virtual ISqlExpression`1<T> Update(Expression`1<Func`2<T, TKey>> fields);
    protected virtual string ToDeleteStatement();
    protected virtual string ToUpdateStatement(T item);
    protected virtual string ToUpdateStatement(T item, bool excludeDefaults);
    protected string ToWhereStatement();
    protected virtual string ToSelectStatement(bool applyPaging, bool isDistinct);
    private string GetSelectExpression(bool distinct);
    private string get_WhereExpression();
    private void set_WhereExpression(string value);
    private string get_GroupByExpression();
    private void set_GroupByExpression(string value);
    private string get_HavingExpression();
    private void set_HavingExpression(string value);
    private string get_OrderByExpression();
    private void set_OrderByExpression(string value);
    protected virtual string get_LimitExpression();
    [CompilerGeneratedAttribute]
private Nullable`1<int> get_Rows();
    [CompilerGeneratedAttribute]
private void set_Rows(Nullable`1<int> value);
    [CompilerGeneratedAttribute]
private Nullable`1<int> get_Skip();
    [CompilerGeneratedAttribute]
private void set_Skip(Nullable`1<int> value);
    protected internal PocoData get_ModelDef();
    protected internal void set_ModelDef(PocoData value);
    protected internal virtual object Visit(Expression exp);
    protected virtual Expression VisitMemberInit(MemberInitExpression init);
    protected virtual IEnumerable`1<MemberBinding> VisitBindingList(ReadOnlyCollection`1<MemberBinding> original);
    protected virtual object VisitBinding(MemberBinding binding);
    protected virtual object VisitMemberMemberBinding(MemberMemberBinding binding);
    protected virtual object VisitMemberAssignment(MemberAssignment assignment);
    protected virtual object VisitLambda(LambdaExpression lambda);
    private static bool IsNullableMember(MemberExpression m);
    protected virtual object VisitBinary(BinaryExpression b);
    private static BinaryExpression FixExpressionForVb(BinaryExpression b);
    private static Type GetMemberInfoTypeForEnum(PocoColumn pc);
    protected virtual object VisitMemberAccess(MemberExpression m);
    private Type GetCorrectType(MemberExpression m);
    protected virtual object VisitNew(NewExpression nex);
    protected virtual object VisitParameter(ParameterExpression p);
    [CompilerGeneratedAttribute]
public sealed virtual ISqlExpressionContext<T> get_Context();
    [CompilerGeneratedAttribute]
private void set_Context(ISqlExpressionContext<T> value);
    protected virtual object VisitConstant(ConstantExpression c);
    protected virtual object VisitConditional(ConditionalExpression conditional);
    protected string CreateParam(object value);
    protected virtual object VisitUnary(UnaryExpression u);
    private bool IsColumnAccess(MethodCallExpression m);
    protected virtual object VisitMethodCall(MethodCallExpression m);
    private bool VisitInnerMethodCall(MethodCallExpression m);
    private bool ProcessMethodSearchRecursively(Expression args, Boolean& found);
    private bool IsStaticArrayMethod(MethodCallExpression m);
    private bool IsEnumerableMethod(MethodCallExpression m);
    protected virtual object VisitEnumerableMethodCall(MethodCallExpression m);
    protected virtual object VisitStaticArrayMethodCall(MethodCallExpression m);
    private StringBuilder FlattenList(List`1<object> inArgs, object partialSqlString);
    private object FormatParameters(object partialSqlString, object e);
    protected virtual List`1<object> VisitExpressionList(ReadOnlyCollection`1<Expression> original);
    protected virtual List`1<object> VisitConstantList(ReadOnlyCollection`1<Expression> original);
    protected virtual object VisitNewArray(NewArrayExpression na);
    protected virtual List`1<object> VisitNewArrayFromExpressionList(NewArrayExpression na);
    protected virtual string BindOperant(ExpressionType e);
    protected virtual string GetQuotedColumnName(string memberName);
    protected string RemoveQuoteFromAlias(string exp);
    protected object GetTrueExpression();
    protected object GetFalseExpression();
    protected object GetQuotedTrueValue();
    protected object GetQuotedFalseValue();
    private string BuildSelectExpression(List`1<SelectMember> fields, bool distinct);
    internal List`1<PocoColumn> GetAllMembers();
    protected virtual string ApplyPaging(string sql, IEnumerable`1<PocoColumn[]> columns, Dictionary`2<string, JoinData> joinSqlExpressions);
    private string BuildInStatement(Expression m, object quotedColName);
    protected virtual object VisitSqlMethodCall(MethodCallExpression m);
    protected virtual object VisitColumnAccessMethod(MethodCallExpression m);
    protected virtual string CreateLikeStatement(PartialSqlString expression, string param);
    protected virtual string CreateTrimStatement(PartialSqlString expression, bool start, bool end);
    protected virtual string EscapeParam(object par);
    protected virtual string SubstringStatement(PartialSqlString columnName, int startIndex, int length);
    protected virtual string GetDateTimeSql(string memberName, object m);
    [CompilerGeneratedAttribute]
private string <BuildOrderByClauseInternal>b__60_0(OrderByMember x);
    [CompilerGeneratedAttribute]
private object <ToUpdateStatement>b__67_0(PocoColumn pocoColumn, object val);
    [CompilerGeneratedAttribute]
private bool <GetSelectExpression>b__70_1(SelectMember x);
    [CompilerGeneratedAttribute]
private SelectMember <ProcessMethodSearchRecursively>b__125_0(KeyValuePair`2<string, PocoColumn> x);
    [CompilerGeneratedAttribute]
private SelectMember <BuildSelectExpression>b__143_0(KeyValuePair`2<string, PocoColumn> x);
    [CompilerGeneratedAttribute]
private string <BuildSelectExpression>b__143_1(SelectMember x);
    [CompilerGeneratedAttribute]
private string <ApplyPaging>b__145_1(PocoColumn[] x);
}
[ExtensionAttribute]
public static class NPoco.Extensions.BatchingExtensions : object {
    [IteratorStateMachineAttribute("NPoco.Extensions.BatchingExtensions/<Chunkify>d__0`1")]
[ExtensionAttribute]
public static IEnumerable`1<T[]> Chunkify(IEnumerable`1<T> items, int chunkSize);
    [IteratorStateMachineAttribute("NPoco.Extensions.BatchingExtensions/<Take>d__1`1")]
private static IEnumerable`1<T> Take(IEnumerator`1<T> enumerator, int num);
}
public class NPoco.FastCreate : object {
    private Type _type;
    private IMapperCollection _mapperCollection;
    private ConstructorInfo _constructorInfo;
    private Func`2<DbDataReader, object> _createDelegate;
    public FastCreate(Type type, IMapperCollection mapperCollection);
    public sealed virtual object Create(DbDataReader dataReader);
    private Func`2<DbDataReader, object> GetCreateDelegate();
    private static Func`2<Object[], object> CreateObjectFactoryMethodWithCtorParams(ConstructorInfo ctor);
    private static void EmitInt32(ILGenerator il, int value);
    private static ConstructorInfo GetConstructorInfo(Type type);
}
public class NPoco.fastJSON.DatasetSchema : object {
    public List`1<string> Info;
    public string Name;
}
public class NPoco.fastJSON.Deserialize : MulticastDelegate {
    public Deserialize(object object, IntPtr method);
    public virtual object Invoke(string data);
    public virtual IAsyncResult BeginInvoke(string data, AsyncCallback callback, object object);
    public virtual object EndInvoke(IAsyncResult result);
}
internal class NPoco.fastJSON.Deserializer : object {
    private JSONParameters _params;
    private bool _usingglobals;
    private Dictionary`2<object, int> _circobj;
    private Dictionary`2<int, object> _cirrev;
    public Deserializer(JSONParameters param);
    public T ToObject(string json);
    public object ToObject(string json);
    public object ToObject(string json, Type type);
    private object RootHashTable(List`1<object> o);
    private object ChangeType(object value, Type conversionType);
    private object CreateDateTimeOffset(string value);
    private static DateTimeOffset CreateDateTimeOffset(int year, int month, int day, int hour, int min, int sec, int milli, int extraTicks, TimeSpan offset);
    private bool IsNullable(Type t);
    private Type UnderlyingTypeOf(Type t);
    private object RootList(object parse, Type type);
    private void DoParseList(object parse, Type it, IList o);
    private object RootArray(object parse, Type type);
    private object RootDictionary(object parse, Type type);
    internal object ParseDictionary(Dictionary`2<string, object> d, Dictionary`2<string, object> globaltypes, Type type, object input);
    private long AutoConv(object value);
    private StringDictionary CreateSD(Dictionary`2<string, object> d);
    private NameValueCollection CreateNV(Dictionary`2<string, object> d);
    private void ProcessMap(object obj, Dictionary`2<string, myPropInfo> props, Dictionary`2<string, object> dic);
    private long CreateLong(string s, int index, int count);
    private int CreateInteger(string s, int index, int count);
    private object CreateEnum(Type pt, object v);
    private Guid CreateGuid(string s);
    private DateTime CreateDateTime(string value);
    private object CreateArray(List`1<object> data, Type pt, Type bt, Dictionary`2<string, object> globalTypes);
    private object CreateGenericList(List`1<object> data, Type pt, Type bt, Dictionary`2<string, object> globalTypes);
    private object CreateStringKeyDictionary(Dictionary`2<string, object> reader, Type pt, Type[] types, Dictionary`2<string, object> globalTypes);
    private object CreateDictionary(List`1<object> reader, Type pt, Type[] types, Dictionary`2<string, object> globalTypes);
    private DataSet CreateDataset(Dictionary`2<string, object> reader, Dictionary`2<string, object> globalTypes);
    private void ReadDataTable(List`1<object> rows, DataTable dt);
    private DataTable CreateDataTable(Dictionary`2<string, object> reader, Dictionary`2<string, object> globalTypes);
}
internal class NPoco.fastJSON.DynamicJson : DynamicObject {
    [CompilerGeneratedAttribute]
private IDictionary`2<string, object> <_dictionary>k__BackingField;
    [CompilerGeneratedAttribute]
private List`1<object> <_list>k__BackingField;
    private IDictionary`2<string, object> _dictionary { get; private set; }
    private List`1<object> _list { get; private set; }
    public DynamicJson(string json);
    private DynamicJson(object dictionary);
    [CompilerGeneratedAttribute]
private IDictionary`2<string, object> get__dictionary();
    [CompilerGeneratedAttribute]
private void set__dictionary(IDictionary`2<string, object> value);
    [CompilerGeneratedAttribute]
private List`1<object> get__list();
    [CompilerGeneratedAttribute]
private void set__list(List`1<object> value);
    public virtual IEnumerable`1<string> GetDynamicMemberNames();
    public virtual bool TryGetIndex(GetIndexBinder binder, Object[] indexes, Object& result);
    public virtual bool TryGetMember(GetMemberBinder binder, Object& result);
    [IteratorStateMachineAttribute("NPoco.fastJSON.DynamicJson/<System-Collections-IEnumerable-GetEnumerator>d__13")]
private sealed virtual override IEnumerator System.Collections.IEnumerable.GetEnumerator();
}
internal static class NPoco.fastJSON.Formatter : object {
    private static string _indent;
    private static Formatter();
    public static void AppendIndent(StringBuilder sb, int count);
    public static string PrettyPrint(string input);
    public static string PrettyPrint(string input, string spaces);
}
internal class NPoco.fastJSON.Getters : ValueType {
    public string Name;
    public string lcName;
    public string memberName;
    public GenericGetter Getter;
}
public static class NPoco.fastJSON.JSON : object {
    public static JSONParameters Parameters;
    private static JSON();
    public static string ToNiceJSON(object obj);
    public static string ToNiceJSON(object obj, JSONParameters param);
    public static string ToJSON(object obj);
    public static string ToJSON(object obj, JSONParameters param);
    public static object Parse(string json);
    public static object ToDynamic(string json);
    public static T ToObject(string json);
    public static T ToObject(string json, JSONParameters param);
    public static object ToObject(string json);
    public static object ToObject(string json, JSONParameters param);
    public static object ToObject(string json, Type type);
    public static object ToObject(string json, Type type, JSONParameters par);
    public static object FillObject(object input, string json);
    public static object DeepCopy(object obj);
    public static T DeepCopy(T obj);
    public static string Beautify(string input);
    public static string Beautify(string input, byte spaces);
    public static void RegisterCustomType(Type type, Serialize serializer, Deserialize deserializer);
    public static void ClearReflectionCache();
    internal static long CreateLong(string s, int index, int count);
}
public class NPoco.fastJSON.JSONParameters : object {
    public bool UseOptimizedDatasetSchema;
    public bool UseFastGuid;
    public bool SerializeNullValues;
    public bool UseUTCDateTime;
    public bool ShowReadOnlyProperties;
    public bool UsingGlobalTypes;
    [ObsoleteAttribute("Not needed anymore and will always match")]
public bool IgnoreCaseOnDeserialize;
    public bool EnableAnonymousTypes;
    public bool UseExtensions;
    public bool UseEscapedUnicode;
    public bool KVStyleStringDictionary;
    public bool UseValuesOfEnums;
    public List`1<Type> IgnoreAttributes;
    public bool ParametricConstructorOverride;
    public bool DateTimeMilliseconds;
    public byte SerializerMaxDepth;
    public bool InlineCircularReferences;
    public bool SerializeToLowerCaseNames;
    public byte FormatterIndentSpaces;
    public bool AllowNonQuotedKeys;
    public void FixValues();
    internal JSONParameters MakeCopy();
}
internal class NPoco.fastJSON.JsonParser : object {
    private string json;
    private StringBuilder s;
    private Token lookAheadToken;
    private int index;
    private bool allownonquotedkey;
    internal JsonParser(string json, bool AllowNonQuotedKeys);
    public object Decode();
    private Dictionary`2<string, object> ParseObject();
    private List`1<object> ParseArray();
    private object ParseValue(bool val);
    private string ParseString(bool val);
    private UInt32 ParseSingleChar(char c1, UInt32 multipliyer);
    private UInt32 ParseUnicode(char c1, char c2, char c3, char c4);
    private long CreateLong(string s);
    private object ParseNumber();
    private Token LookAhead();
    private void ConsumeToken();
    private Token NextToken();
    private Token NextTokenCore();
}
internal class NPoco.fastJSON.JSONSerializer : object {
    private StringBuilder _output;
    private int _before;
    private int _MAX_DEPTH;
    private int _current_depth;
    private Dictionary`2<string, int> _globalTypes;
    private Dictionary`2<object, int> _cirobj;
    private JSONParameters _params;
    private bool _useEscapedUnicode;
    private bool _TypesWritten;
    internal JSONSerializer(JSONParameters param);
    internal string ConvertToJSON(object obj);
    private void WriteValue(object obj);
    private void WriteDateTimeOffset(DateTimeOffset d);
    private void WriteNV(NameValueCollection nameValueCollection);
    private void WriteSD(StringDictionary stringDictionary);
    private void WriteCustom(object obj);
    private void WriteEnum(Enum e);
    private void WriteGuid(Guid g);
    private void WriteBytes(Byte[] bytes);
    private void WriteDateTime(DateTime dateTime);
    private void write_date_value(DateTime dt);
    private DatasetSchema GetSchema(DataTable ds);
    private DatasetSchema GetSchema(DataSet ds);
    private string GetXmlSchema(DataTable dt);
    private void WriteDataset(DataSet ds);
    private void WriteDataTableData(DataTable table);
    private void WriteDataTable(DataTable dt);
    private void WriteObject(object obj);
    private void WritePairFast(string name, string value);
    private void WritePair(string name, object value);
    private void WriteArray(IEnumerable array);
    private void WriteStringDictionary(IDictionary dic);
    private void WriteStringDictionary(IEnumerable`1<KeyValuePair`2<string, object>> dic);
    private void WriteDictionary(IDictionary dic);
    private void WriteStringFast(string s);
    private void WriteString(string s);
}
internal class NPoco.fastJSON.myPropInfo : ValueType {
    public Type pt;
    public Type bt;
    public Type changeType;
    public GenericSetter setter;
    public GenericGetter getter;
    public Type[] GenericTypes;
    public string Name;
    public string memberName;
    public myPropInfoType Type;
    public bool CanWrite;
    public bool IsClass;
    public bool IsValueType;
    public bool IsGenericType;
    public bool IsStruct;
    public bool IsInterface;
}
internal enum NPoco.fastJSON.myPropInfoType : Enum {
    public int value__;
    public static myPropInfoType Int;
    public static myPropInfoType Long;
    public static myPropInfoType String;
    public static myPropInfoType Bool;
    public static myPropInfoType DateTime;
    public static myPropInfoType Enum;
    public static myPropInfoType Guid;
    public static myPropInfoType Array;
    public static myPropInfoType ByteArray;
    public static myPropInfoType Dictionary;
    public static myPropInfoType StringKeyDictionary;
    public static myPropInfoType NameValue;
    public static myPropInfoType StringDictionary;
    public static myPropInfoType Hashtable;
    public static myPropInfoType DataSet;
    public static myPropInfoType DataTable;
    public static myPropInfoType Custom;
    public static myPropInfoType Unknown;
}
internal class NPoco.fastJSON.Reflection : object {
    private static Reflection instance;
    private SafeDictionary`2<Type, string> _tyname;
    private SafeDictionary`2<string, Type> _typecache;
    private SafeDictionary`2<Type, CreateObject> _constrcache;
    private SafeDictionary`2<Type, Getters[]> _getterscache;
    private SafeDictionary`2<string, Dictionary`2<string, myPropInfo>> _propertycache;
    private SafeDictionary`2<Type, Type[]> _genericTypes;
    private SafeDictionary`2<Type, Type> _genericTypeDef;
    private static SafeDictionary`2<short, OpCode> _opCodes;
    internal UnicodeEncoding unicode;
    internal UTF8Encoding utf8;
    internal SafeDictionary`2<Type, Serialize> _customSerializer;
    internal SafeDictionary`2<Type, Deserialize> _customDeserializer;
    public static Reflection Instance { get; }
    private static Reflection();
    public static Reflection get_Instance();
    private static bool TryGetOpCode(short code, OpCode& opCode);
    internal object CreateCustom(string v, Type type);
    internal void RegisterCustomType(Type type, Serialize serializer, Deserialize deserializer);
    internal bool IsTypeRegistered(Type t);
    public Type GetGenericTypeDefinition(Type t);
    public Type[] GetGenericArguments(Type t);
    public Dictionary`2<string, myPropInfo> Getproperties(Type type, string typename, bool ShowReadOnlyProperties);
    private myPropInfo CreateMyProp(Type t, string name);
    private Type GetChangeType(Type conversionType);
    internal string GetTypeAssemblyName(Type t);
    internal Type GetTypeFromCache(string typename);
    internal object FastCreateInstance(Type objtype);
    internal static GenericSetter CreateSetField(Type type, FieldInfo fieldInfo);
    internal static FieldInfo GetGetterBackingField(PropertyInfo autoProperty);
    internal static GenericSetter CreateSetMethod(Type type, PropertyInfo propertyInfo, bool ShowReadOnlyProperties);
    internal static GenericGetter CreateGetField(Type type, FieldInfo fieldInfo);
    internal static GenericGetter CreateGetMethod(Type type, PropertyInfo propertyInfo);
    internal Getters[] GetGetters(Type type, bool ShowReadOnlyProperties, List`1<Type> IgnoreAttributes);
    internal void ResetPropertyCache();
    internal void ClearReflectionCache();
}
[DefaultMemberAttribute("Item")]
public class NPoco.fastJSON.SafeDictionary`2 : object {
    private object _Padlock;
    private Dictionary`2<TKey, TValue> _Dictionary;
    public int Count { get; }
    public TValue Item { get; public set; }
    public SafeDictionary`2(int capacity);
    public bool TryGetValue(TKey key, TValue& value);
    public int get_Count();
    public TValue get_Item(TKey key);
    public void set_Item(TKey key, TValue value);
    public void Add(TKey key, TValue value);
}
public class NPoco.fastJSON.Serialize : MulticastDelegate {
    public Serialize(object object, IntPtr method);
    public virtual string Invoke(object data);
    public virtual IAsyncResult BeginInvoke(object data, AsyncCallback callback, object object);
    public virtual string EndInvoke(IAsyncResult result);
}
public class NPoco.FastJsonColumnSerializer : object {
    [CompilerGeneratedAttribute]
private JSONParameters <JSONParameters>k__BackingField;
    public JSONParameters JSONParameters { get; public set; }
    [CompilerGeneratedAttribute]
public JSONParameters get_JSONParameters();
    [CompilerGeneratedAttribute]
public void set_JSONParameters(JSONParameters value);
    public sealed virtual string Serialize(object value);
    public sealed virtual object Deserialize(string value, Type targetType);
}
public class NPoco.FluentMappings.ColumnBuilder`1 : object {
    private ColumnDefinition _columnDefinition;
    public ColumnBuilder`1(ColumnDefinition columnDefinition);
    public sealed virtual IColumnBuilder`1<TModel> WithName(string name);
    public sealed virtual IColumnBuilder`1<TModel> WithName(string name, bool exactMatch);
    public sealed virtual IColumnBuilder`1<TModel> WithAlias(string alias);
    public sealed virtual IColumnBuilder`1<TModel> WithDbType(Type type);
    public sealed virtual IColumnBuilder`1<TModel> WithDbType();
    public sealed virtual IColumnBuilder`1<TModel> Version();
    public sealed virtual IColumnBuilder`1<TModel> Version(VersionColumnType versionColumnType);
    public sealed virtual IColumnBuilder`1<TModel> Ignore();
    public sealed virtual IColumnBuilder`1<TModel> Result();
    public sealed virtual IColumnBuilder`1<TModel> Computed();
    public sealed virtual IColumnBuilder`1<TModel> Computed(ComputedColumnType computedColumnType);
    public sealed virtual IColumnBuilder`1<TModel> Reference(ReferenceType referenceType);
    public sealed virtual IColumnBuilder`1<TModel> Reference(Expression`1<Func`2<TModel, object>> member, ReferenceType referenceType);
    public sealed virtual IColumnBuilder`1<TModel> Serialized();
    public sealed virtual IColumnBuilder`1<TModel> ComplexMapping(string prefix);
    public sealed virtual IColumnBuilder`1<TModel> ValueObject();
    public IColumnBuilder`1<TModel> ValueObject(string name);
    public sealed virtual IColumnBuilder`1<TModel> ValueObject(Expression`1<Func`2<TModel, object>> member);
    public sealed virtual IColumnBuilder`1<TModel> ForceToUtc(bool enabled);
}
public class NPoco.FluentMappings.ColumnConfigurationBuilder`1 : object {
    private Dictionary`2<string, ColumnDefinition> _columnDefinitions;
    public ColumnConfigurationBuilder`1(Dictionary`2<string, ColumnDefinition> columnDefinitions);
    public IColumnBuilder`1<T2> Column(Expression`1<Func`2<T, T2>> property);
    public IColumnBuilder`1<T2> Column(string privateProperty);
    public IManyColumnBuilder`1<T2> Many(Expression`1<Func`2<T, IList`1<T2>>> property);
}
public class NPoco.FluentMappings.ColumnDefinition : object {
    [CompilerGeneratedAttribute]
private MemberInfo <MemberInfo>k__BackingField;
    [CompilerGeneratedAttribute]
private string <DbColumnName>k__BackingField;
    [CompilerGeneratedAttribute]
private string <DbColumnAlias>k__BackingField;
    [CompilerGeneratedAttribute]
private Type <DbColumnType>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<bool> <ResultColumn>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<bool> <IgnoreColumn>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<bool> <VersionColumn>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<VersionColumnType> <VersionColumnType>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<bool> <ComputedColumn>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<ComputedColumnType> <ComputedColumnType>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<bool> <ForceUtc>k__BackingField;
    [CompilerGeneratedAttribute]
private MemberInfo[] <MemberInfoChain>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<bool> <IsComplexMapping>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<bool> <IsReferenceMember>k__BackingField;
    [CompilerGeneratedAttribute]
private MemberInfo <ReferenceMember>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<ReferenceType> <ReferenceType>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<bool> <Serialized>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ComplexPrefix>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<bool> <ValueObjectColumn>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ValueObjectColumnName>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<bool> <ExactColumnNameMatch>k__BackingField;
    public MemberInfo MemberInfo { get; public set; }
    public string DbColumnName { get; public set; }
    public string DbColumnAlias { get; public set; }
    public Type DbColumnType { get; public set; }
    public Nullable`1<bool> ResultColumn { get; public set; }
    public Nullable`1<bool> IgnoreColumn { get; public set; }
    public Nullable`1<bool> VersionColumn { get; public set; }
    public Nullable`1<VersionColumnType> VersionColumnType { get; public set; }
    public Nullable`1<bool> ComputedColumn { get; public set; }
    public Nullable`1<ComputedColumnType> ComputedColumnType { get; public set; }
    public Nullable`1<bool> ForceUtc { get; public set; }
    public MemberInfo[] MemberInfoChain { get; public set; }
    public Nullable`1<bool> IsComplexMapping { get; public set; }
    public Nullable`1<bool> IsReferenceMember { get; public set; }
    public MemberInfo ReferenceMember { get; public set; }
    public Nullable`1<ReferenceType> ReferenceType { get; public set; }
    public Nullable`1<bool> Serialized { get; public set; }
    public string ComplexPrefix { get; public set; }
    public Nullable`1<bool> ValueObjectColumn { get; public set; }
    public string ValueObjectColumnName { get; public set; }
    public Nullable`1<bool> ExactColumnNameMatch { get; public set; }
    [CompilerGeneratedAttribute]
public MemberInfo get_MemberInfo();
    [CompilerGeneratedAttribute]
public void set_MemberInfo(MemberInfo value);
    [CompilerGeneratedAttribute]
public string get_DbColumnName();
    [CompilerGeneratedAttribute]
public void set_DbColumnName(string value);
    [CompilerGeneratedAttribute]
public string get_DbColumnAlias();
    [CompilerGeneratedAttribute]
public void set_DbColumnAlias(string value);
    [CompilerGeneratedAttribute]
public Type get_DbColumnType();
    [CompilerGeneratedAttribute]
public void set_DbColumnType(Type value);
    [CompilerGeneratedAttribute]
public Nullable`1<bool> get_ResultColumn();
    [CompilerGeneratedAttribute]
public void set_ResultColumn(Nullable`1<bool> value);
    [CompilerGeneratedAttribute]
public Nullable`1<bool> get_IgnoreColumn();
    [CompilerGeneratedAttribute]
public void set_IgnoreColumn(Nullable`1<bool> value);
    [CompilerGeneratedAttribute]
public Nullable`1<bool> get_VersionColumn();
    [CompilerGeneratedAttribute]
public void set_VersionColumn(Nullable`1<bool> value);
    [CompilerGeneratedAttribute]
public Nullable`1<VersionColumnType> get_VersionColumnType();
    [CompilerGeneratedAttribute]
public void set_VersionColumnType(Nullable`1<VersionColumnType> value);
    [CompilerGeneratedAttribute]
public Nullable`1<bool> get_ComputedColumn();
    [CompilerGeneratedAttribute]
public void set_ComputedColumn(Nullable`1<bool> value);
    [CompilerGeneratedAttribute]
public Nullable`1<ComputedColumnType> get_ComputedColumnType();
    [CompilerGeneratedAttribute]
public void set_ComputedColumnType(Nullable`1<ComputedColumnType> value);
    [CompilerGeneratedAttribute]
public Nullable`1<bool> get_ForceUtc();
    [CompilerGeneratedAttribute]
public void set_ForceUtc(Nullable`1<bool> value);
    [CompilerGeneratedAttribute]
public MemberInfo[] get_MemberInfoChain();
    [CompilerGeneratedAttribute]
public void set_MemberInfoChain(MemberInfo[] value);
    [CompilerGeneratedAttribute]
public Nullable`1<bool> get_IsComplexMapping();
    [CompilerGeneratedAttribute]
public void set_IsComplexMapping(Nullable`1<bool> value);
    [CompilerGeneratedAttribute]
public Nullable`1<bool> get_IsReferenceMember();
    [CompilerGeneratedAttribute]
public void set_IsReferenceMember(Nullable`1<bool> value);
    [CompilerGeneratedAttribute]
public MemberInfo get_ReferenceMember();
    [CompilerGeneratedAttribute]
public void set_ReferenceMember(MemberInfo value);
    [CompilerGeneratedAttribute]
public Nullable`1<ReferenceType> get_ReferenceType();
    [CompilerGeneratedAttribute]
public void set_ReferenceType(Nullable`1<ReferenceType> value);
    [CompilerGeneratedAttribute]
public Nullable`1<bool> get_Serialized();
    [CompilerGeneratedAttribute]
public void set_Serialized(Nullable`1<bool> value);
    [CompilerGeneratedAttribute]
public string get_ComplexPrefix();
    [CompilerGeneratedAttribute]
public void set_ComplexPrefix(string value);
    [CompilerGeneratedAttribute]
public Nullable`1<bool> get_ValueObjectColumn();
    [CompilerGeneratedAttribute]
public void set_ValueObjectColumn(Nullable`1<bool> value);
    [CompilerGeneratedAttribute]
public string get_ValueObjectColumnName();
    [CompilerGeneratedAttribute]
public void set_ValueObjectColumnName(string value);
    [CompilerGeneratedAttribute]
public Nullable`1<bool> get_ExactColumnNameMatch();
    [CompilerGeneratedAttribute]
public void set_ExactColumnNameMatch(Nullable`1<bool> value);
}
[ExtensionAttribute]
public static class NPoco.FluentMappings.ConventionExtensions : object {
    [ExtensionAttribute]
public static IColumnsBuilderConventions IgnoreComplex(IColumnsBuilderConventions conventions);
    [ExtensionAttribute]
public static void WithSmartConventions(IConventionScanner scanner);
    [ExtensionAttribute]
public static void WithSmartConventions(IConventionScanner scanner, bool lowercase);
    private static string ToLowerIf(string s, bool clause);
}
public class NPoco.FluentMappings.ConventionScanner : object {
    private ConventionScannerSettings _scannerSettings;
    public IColumnsBuilderConventions Columns { get; }
    public ConventionScanner(ConventionScannerSettings scannerSettings);
    public sealed virtual void OverrideMappingsWith(Mappings mappings);
    public sealed virtual void OverrideMappingsWith(IMap[] maps);
    public sealed virtual void Assembly(Assembly assembly);
    public sealed virtual void TheCallingAssembly();
    public sealed virtual void IncludeTypes(Func`2<Type, bool> typeIncludes);
    public sealed virtual void TablesNamed(Func`2<Type, string> tableFunc);
    public sealed virtual void PrimaryKeysNamed(Func`2<Type, string> primaryKeyFunc);
    public sealed virtual void SequencesNamed(Func`2<Type, string> sequencesFunc);
    public sealed virtual void PersistedTypesBy(Func`2<Type, Type> persistedTypesByFunc);
    public sealed virtual void MapNestedTypesWhen(Func`2<Type, bool> mapNestedTypesFunc);
    public sealed virtual void LazyLoadMappings();
    public sealed virtual void PrimaryKeysAutoIncremented(Func`2<Type, bool> primaryKeyAutoIncrementFunc);
    public sealed virtual IColumnsBuilderConventions get_Columns();
}
public class NPoco.FluentMappings.ConventionScannerSettings : object {
    [CompilerGeneratedAttribute]
private List`1<Mappings> <MappingOverrides>k__BackingField;
    [CompilerGeneratedAttribute]
private HashSet`1<Assembly> <Assemblies>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <TheCallingAssembly>k__BackingField;
    [CompilerGeneratedAttribute]
private List`1<Func`2<Type, bool>> <IncludeTypes>k__BackingField;
    [CompilerGeneratedAttribute]
private Func`2<Type, string> <TablesNamed>k__BackingField;
    [CompilerGeneratedAttribute]
private Func`2<Type, string> <PrimaryKeysNamed>k__BackingField;
    [CompilerGeneratedAttribute]
private Func`2<Type, bool> <PrimaryKeysAutoIncremented>k__BackingField;
    [CompilerGeneratedAttribute]
private Func`2<Type, string> <SequencesNamed>k__BackingField;
    [CompilerGeneratedAttribute]
private Func`2<Type, bool> <UseOutputClauseWhere>k__BackingField;
    [CompilerGeneratedAttribute]
private Func`2<Type, Type> <PersistedTypesBy>k__BackingField;
    [CompilerGeneratedAttribute]
private Func`2<Type, bool> <MapNestedTypesWhen>k__BackingField;
    [CompilerGeneratedAttribute]
private Func`2<MemberInfo, string> <DbColumnsNamed>k__BackingField;
    [CompilerGeneratedAttribute]
private Func`2<MemberInfo, string> <AliasNamed>k__BackingField;
    [CompilerGeneratedAttribute]
private Func`2<MemberInfo, Type> <DbColumnTypesAs>k__BackingField;
    [CompilerGeneratedAttribute]
private List`1<Func`2<MemberInfo, bool>> <IgnorePropertiesWhere>k__BackingField;
    [CompilerGeneratedAttribute]
private Func`2<MemberInfo, bool> <VersionPropertiesWhere>k__BackingField;
    [CompilerGeneratedAttribute]
private Func`2<MemberInfo, VersionColumnType> <VersionPropertyTypeAs>k__BackingField;
    [CompilerGeneratedAttribute]
private Func`2<MemberInfo, bool> <ResultPropertiesWhere>k__BackingField;
    [CompilerGeneratedAttribute]
private Func`2<MemberInfo, bool> <ComputedPropertiesWhere>k__BackingField;
    [CompilerGeneratedAttribute]
private Func`2<MemberInfo, ComputedColumnType> <ComputedPropertyTypeAs>k__BackingField;
    [CompilerGeneratedAttribute]
private Func`2<MemberInfo, bool> <ForceDateTimesToUtcWhere>k__BackingField;
    [CompilerGeneratedAttribute]
private Func`2<MemberInfo, bool> <ReferencePropertiesWhere>k__BackingField;
    [CompilerGeneratedAttribute]
private Func`2<MemberInfo, bool> <ComplexPropertiesWhere>k__BackingField;
    [CompilerGeneratedAttribute]
private Func`2<MemberInfo, string> <ReferenceDbColumnsNamed>k__BackingField;
    [CompilerGeneratedAttribute]
private Func`2<MemberInfo, bool> <DbColumnWhere>k__BackingField;
    [CompilerGeneratedAttribute]
private Func`2<MemberInfo, bool> <SerializedWhere>k__BackingField;
    [CompilerGeneratedAttribute]
private Func`2<MemberInfo, bool> <ValueObjectColumnWhere>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <Lazy>k__BackingField;
    public List`1<Mappings> MappingOverrides { get; public set; }
    public HashSet`1<Assembly> Assemblies { get; public set; }
    public bool TheCallingAssembly { get; public set; }
    public List`1<Func`2<Type, bool>> IncludeTypes { get; public set; }
    public Func`2<Type, string> TablesNamed { get; public set; }
    public Func`2<Type, string> PrimaryKeysNamed { get; public set; }
    public Func`2<Type, bool> PrimaryKeysAutoIncremented { get; public set; }
    public Func`2<Type, string> SequencesNamed { get; public set; }
    public Func`2<Type, bool> UseOutputClauseWhere { get; public set; }
    public Func`2<Type, Type> PersistedTypesBy { get; public set; }
    public Func`2<Type, bool> MapNestedTypesWhen { get; public set; }
    public Func`2<MemberInfo, string> DbColumnsNamed { get; public set; }
    public Func`2<MemberInfo, string> AliasNamed { get; public set; }
    public Func`2<MemberInfo, Type> DbColumnTypesAs { get; public set; }
    public List`1<Func`2<MemberInfo, bool>> IgnorePropertiesWhere { get; public set; }
    public Func`2<MemberInfo, bool> VersionPropertiesWhere { get; public set; }
    public Func`2<MemberInfo, VersionColumnType> VersionPropertyTypeAs { get; public set; }
    public Func`2<MemberInfo, bool> ResultPropertiesWhere { get; public set; }
    public Func`2<MemberInfo, bool> ComputedPropertiesWhere { get; public set; }
    public Func`2<MemberInfo, ComputedColumnType> ComputedPropertyTypeAs { get; public set; }
    public Func`2<MemberInfo, bool> ForceDateTimesToUtcWhere { get; public set; }
    public Func`2<MemberInfo, bool> ReferencePropertiesWhere { get; public set; }
    public Func`2<MemberInfo, bool> ComplexPropertiesWhere { get; public set; }
    public Func`2<MemberInfo, string> ReferenceDbColumnsNamed { get; public set; }
    public Func`2<MemberInfo, bool> DbColumnWhere { get; public set; }
    public Func`2<MemberInfo, bool> SerializedWhere { get; public set; }
    public Func`2<MemberInfo, bool> ValueObjectColumnWhere { get; public set; }
    public bool Lazy { get; public set; }
    [CompilerGeneratedAttribute]
public List`1<Mappings> get_MappingOverrides();
    [CompilerGeneratedAttribute]
public void set_MappingOverrides(List`1<Mappings> value);
    [CompilerGeneratedAttribute]
public HashSet`1<Assembly> get_Assemblies();
    [CompilerGeneratedAttribute]
public void set_Assemblies(HashSet`1<Assembly> value);
    [CompilerGeneratedAttribute]
public bool get_TheCallingAssembly();
    [CompilerGeneratedAttribute]
public void set_TheCallingAssembly(bool value);
    [CompilerGeneratedAttribute]
public List`1<Func`2<Type, bool>> get_IncludeTypes();
    [CompilerGeneratedAttribute]
public void set_IncludeTypes(List`1<Func`2<Type, bool>> value);
    [CompilerGeneratedAttribute]
public Func`2<Type, string> get_TablesNamed();
    [CompilerGeneratedAttribute]
public void set_TablesNamed(Func`2<Type, string> value);
    [CompilerGeneratedAttribute]
public Func`2<Type, string> get_PrimaryKeysNamed();
    [CompilerGeneratedAttribute]
public void set_PrimaryKeysNamed(Func`2<Type, string> value);
    [CompilerGeneratedAttribute]
public Func`2<Type, bool> get_PrimaryKeysAutoIncremented();
    [CompilerGeneratedAttribute]
public void set_PrimaryKeysAutoIncremented(Func`2<Type, bool> value);
    [CompilerGeneratedAttribute]
public Func`2<Type, string> get_SequencesNamed();
    [CompilerGeneratedAttribute]
public void set_SequencesNamed(Func`2<Type, string> value);
    [CompilerGeneratedAttribute]
public Func`2<Type, bool> get_UseOutputClauseWhere();
    [CompilerGeneratedAttribute]
public void set_UseOutputClauseWhere(Func`2<Type, bool> value);
    [CompilerGeneratedAttribute]
public Func`2<Type, Type> get_PersistedTypesBy();
    [CompilerGeneratedAttribute]
public void set_PersistedTypesBy(Func`2<Type, Type> value);
    [CompilerGeneratedAttribute]
public Func`2<Type, bool> get_MapNestedTypesWhen();
    [CompilerGeneratedAttribute]
public void set_MapNestedTypesWhen(Func`2<Type, bool> value);
    [CompilerGeneratedAttribute]
public Func`2<MemberInfo, string> get_DbColumnsNamed();
    [CompilerGeneratedAttribute]
public void set_DbColumnsNamed(Func`2<MemberInfo, string> value);
    [CompilerGeneratedAttribute]
public Func`2<MemberInfo, string> get_AliasNamed();
    [CompilerGeneratedAttribute]
public void set_AliasNamed(Func`2<MemberInfo, string> value);
    [CompilerGeneratedAttribute]
public Func`2<MemberInfo, Type> get_DbColumnTypesAs();
    [CompilerGeneratedAttribute]
public void set_DbColumnTypesAs(Func`2<MemberInfo, Type> value);
    [CompilerGeneratedAttribute]
public List`1<Func`2<MemberInfo, bool>> get_IgnorePropertiesWhere();
    [CompilerGeneratedAttribute]
public void set_IgnorePropertiesWhere(List`1<Func`2<MemberInfo, bool>> value);
    [CompilerGeneratedAttribute]
public Func`2<MemberInfo, bool> get_VersionPropertiesWhere();
    [CompilerGeneratedAttribute]
public void set_VersionPropertiesWhere(Func`2<MemberInfo, bool> value);
    [CompilerGeneratedAttribute]
public Func`2<MemberInfo, VersionColumnType> get_VersionPropertyTypeAs();
    [CompilerGeneratedAttribute]
public void set_VersionPropertyTypeAs(Func`2<MemberInfo, VersionColumnType> value);
    [CompilerGeneratedAttribute]
public Func`2<MemberInfo, bool> get_ResultPropertiesWhere();
    [CompilerGeneratedAttribute]
public void set_ResultPropertiesWhere(Func`2<MemberInfo, bool> value);
    [CompilerGeneratedAttribute]
public Func`2<MemberInfo, bool> get_ComputedPropertiesWhere();
    [CompilerGeneratedAttribute]
public void set_ComputedPropertiesWhere(Func`2<MemberInfo, bool> value);
    [CompilerGeneratedAttribute]
public Func`2<MemberInfo, ComputedColumnType> get_ComputedPropertyTypeAs();
    [CompilerGeneratedAttribute]
public void set_ComputedPropertyTypeAs(Func`2<MemberInfo, ComputedColumnType> value);
    [CompilerGeneratedAttribute]
public Func`2<MemberInfo, bool> get_ForceDateTimesToUtcWhere();
    [CompilerGeneratedAttribute]
public void set_ForceDateTimesToUtcWhere(Func`2<MemberInfo, bool> value);
    [CompilerGeneratedAttribute]
public Func`2<MemberInfo, bool> get_ReferencePropertiesWhere();
    [CompilerGeneratedAttribute]
public void set_ReferencePropertiesWhere(Func`2<MemberInfo, bool> value);
    [CompilerGeneratedAttribute]
public Func`2<MemberInfo, bool> get_ComplexPropertiesWhere();
    [CompilerGeneratedAttribute]
public void set_ComplexPropertiesWhere(Func`2<MemberInfo, bool> value);
    [CompilerGeneratedAttribute]
public Func`2<MemberInfo, string> get_ReferenceDbColumnsNamed();
    [CompilerGeneratedAttribute]
public void set_ReferenceDbColumnsNamed(Func`2<MemberInfo, string> value);
    [CompilerGeneratedAttribute]
public Func`2<MemberInfo, bool> get_DbColumnWhere();
    [CompilerGeneratedAttribute]
public void set_DbColumnWhere(Func`2<MemberInfo, bool> value);
    [CompilerGeneratedAttribute]
public Func`2<MemberInfo, bool> get_SerializedWhere();
    [CompilerGeneratedAttribute]
public void set_SerializedWhere(Func`2<MemberInfo, bool> value);
    [CompilerGeneratedAttribute]
public Func`2<MemberInfo, bool> get_ValueObjectColumnWhere();
    [CompilerGeneratedAttribute]
public void set_ValueObjectColumnWhere(Func`2<MemberInfo, bool> value);
    [CompilerGeneratedAttribute]
public bool get_Lazy();
    [CompilerGeneratedAttribute]
public void set_Lazy(bool value);
}
public class NPoco.FluentMappings.FluentConfig : object {
    [CompilerGeneratedAttribute]
private Func`2<MapperCollection, FluentPocoDataFactory> <Config>k__BackingField;
    public Func`2<MapperCollection, FluentPocoDataFactory> Config { get; private set; }
    public FluentConfig(Func`2<MapperCollection, FluentPocoDataFactory> config);
    [CompilerGeneratedAttribute]
public Func`2<MapperCollection, FluentPocoDataFactory> get_Config();
    [CompilerGeneratedAttribute]
private void set_Config(Func`2<MapperCollection, FluentPocoDataFactory> value);
}
public class NPoco.FluentMappings.FluentMappingConfiguration : object {
    public static FluentConfig Configure(IMap[] pocoMaps);
    public static FluentConfig Configure(Mappings mappings);
    public static FluentConfig Scan(Action`1<IConventionScanner> scanner);
    private static Mappings CreateMappings(ConventionScannerSettings scannerSettings, Type[] typesOverride);
    [IteratorStateMachineAttribute("NPoco.FluentMappings.FluentMappingConfiguration/<GetColumnDefinitions>d__4")]
private static IEnumerable`1<ColumnDefinition> GetColumnDefinitions(ConventionScannerSettings scannerSettings, Type type, List`1<MemberInfo> memberInfos, bool isReferenceProperty);
    private static ConventionScannerSettings ProcessSettings(Action`1<IConventionScanner> scanner);
    private static IEnumerable`1<Type> FindTypes(ConventionScannerSettings scannerSettings);
    private static void MergeAttributeOverrides(Dictionary`2<Type, TypeDefinition> config);
    private static void MergeOverrides(Dictionary`2<Type, TypeDefinition> config, Mappings overrideMappings);
    private static FluentConfig SetFactory(Mappings mappings, Action`1<IConventionScanner> scanner);
    private static Assembly FindTheCallingAssembly();
}
public class NPoco.FluentMappings.FluentMappingsPocoDataBuilder : PocoDataBuilder {
    private Mappings _mappings;
    public FluentMappingsPocoDataBuilder(Type type, Mappings mappings, MapperCollection mapper);
    protected virtual TableInfoPlan GetTableInfo(Type type, ColumnInfo[] columnInfos, List`1<MemberInfo> memberInfos);
    protected virtual bool ShouldIncludePrivateColumn(MemberInfo mi, Type type);
    protected virtual ColumnInfo GetColumnInfo(MemberInfo mi, Type type);
}
public interface NPoco.FluentMappings.IColumnBuilder`1 {
    public abstract virtual IColumnBuilder`1<TModel> WithName(string name);
    public abstract virtual IColumnBuilder`1<TModel> WithName(string name, bool exactMatch);
    public abstract virtual IColumnBuilder`1<TModel> WithAlias(string alias);
    public abstract virtual IColumnBuilder`1<TModel> WithDbType(Type type);
    public abstract virtual IColumnBuilder`1<TModel> WithDbType();
    public abstract virtual IColumnBuilder`1<TModel> Version();
    public abstract virtual IColumnBuilder`1<TModel> Version(VersionColumnType versionColumnType);
    public abstract virtual IColumnBuilder`1<TModel> Ignore();
    public abstract virtual IColumnBuilder`1<TModel> Result();
    public abstract virtual IColumnBuilder`1<TModel> Computed();
    public abstract virtual IColumnBuilder`1<TModel> Computed(ComputedColumnType computedColumnType);
    public abstract virtual IColumnBuilder`1<TModel> Reference(ReferenceType referenceType);
    public abstract virtual IColumnBuilder`1<TModel> Reference(Expression`1<Func`2<TModel, object>> member, ReferenceType referenceType);
    public abstract virtual IColumnBuilder`1<TModel> Serialized();
    public abstract virtual IColumnBuilder`1<TModel> ComplexMapping(string prefix);
    public abstract virtual IColumnBuilder`1<TModel> ValueObject();
    public abstract virtual IColumnBuilder`1<TModel> ValueObject(Expression`1<Func`2<TModel, object>> member);
    public abstract virtual IColumnBuilder`1<TModel> ForceToUtc(bool enabled);
}
public interface NPoco.FluentMappings.IColumnsBuilderConventions {
    public abstract virtual IColumnsBuilderConventions Named(Func`2<MemberInfo, string> propertiesNamedFunc);
    public abstract virtual IColumnsBuilderConventions Aliased(Func`2<MemberInfo, string> aliasNamedFunc);
    public abstract virtual IColumnsBuilderConventions IgnoreWhere(Func`2<MemberInfo, bool> ignorePropertiesWhereFunc);
    public abstract virtual IColumnsBuilderConventions ResultWhere(Func`2<MemberInfo, bool> resultPropertiesWhereFunc);
    public abstract virtual IColumnsBuilderConventions ComputedWhere(Func`2<MemberInfo, bool> computedPropertiesWhereFunc);
    public abstract virtual IColumnsBuilderConventions ComputedTypeAs(Func`2<MemberInfo, ComputedColumnType> computedPropertyTypeAsFunc);
    public abstract virtual IColumnsBuilderConventions VersionWhere(Func`2<MemberInfo, bool> versionPropertiesWhereFunc);
    public abstract virtual IColumnsBuilderConventions VersionTypeAs(Func`2<MemberInfo, VersionColumnType> versionPropertyTypeAsFunc);
    public abstract virtual IColumnsBuilderConventions ForceDateTimesToUtcWhere(Func`2<MemberInfo, bool> forceDateTimesToUtcWhereFunc);
    public abstract virtual IColumnsBuilderConventions DbColumnTypeAs(Func`2<MemberInfo, Type> dbColumnTypeAsFunc);
    public abstract virtual IColumnsBuilderConventions ReferenceNamed(Func`2<MemberInfo, string> refPropertiesNamedFunc);
    public abstract virtual IColumnsBuilderConventions ReferencePropertiesWhere(Func`2<MemberInfo, bool> referencePropertiesWhereFunc);
    public abstract virtual IColumnsBuilderConventions SerializedWhere(Func`2<MemberInfo, bool> serializedWhereFunc);
    public abstract virtual IColumnsBuilderConventions ComplexPropertiesWhere(Func`2<MemberInfo, bool> complexPropertiesWhereFunc);
    public abstract virtual IColumnsBuilderConventions ValueObjectColumnWhere(Func`2<MemberInfo, bool> valueObjectColumnWhereFunc);
}
public interface NPoco.FluentMappings.IConventionScanner {
    public IColumnsBuilderConventions Columns { get; }
    public abstract virtual void OverrideMappingsWith(Mappings mappings);
    public abstract virtual void OverrideMappingsWith(IMap[] maps);
    public abstract virtual void Assembly(Assembly assembly);
    public abstract virtual void TheCallingAssembly();
    public abstract virtual void IncludeTypes(Func`2<Type, bool> includeTypes);
    public abstract virtual void TablesNamed(Func`2<Type, string> tableFunc);
    public abstract virtual void PrimaryKeysNamed(Func`2<Type, string> primaryKeyFunc);
    public abstract virtual void PrimaryKeysAutoIncremented(Func`2<Type, bool> primaryKeyAutoIncrementFunc);
    public abstract virtual void SequencesNamed(Func`2<Type, string> sequencesFunc);
    public abstract virtual void PersistedTypesBy(Func`2<Type, Type> persistedTypesByFunc);
    public abstract virtual void MapNestedTypesWhen(Func`2<Type, bool> mapNestedTypesFunc);
    public abstract virtual void LazyLoadMappings();
    public abstract virtual IColumnsBuilderConventions get_Columns();
}
public interface NPoco.FluentMappings.IManyColumnBuilder`1 {
    public abstract virtual IManyColumnBuilder`1<TModel> WithName(string name);
    public abstract virtual IManyColumnBuilder`1<TModel> WithDbType(Type type);
    public abstract virtual IManyColumnBuilder`1<TModel> WithDbType();
    public abstract virtual IManyColumnBuilder`1<TModel> Reference(Expression`1<Func`2<TModel, object>> member);
}
public interface NPoco.FluentMappings.IMap {
    public TypeDefinition TypeDefinition { get; }
    public abstract virtual TypeDefinition get_TypeDefinition();
}
public static class NPoco.FluentMappings.Inflector : object {
    private static List`1<InflectorRule> _plurals;
    private static List`1<InflectorRule> _singulars;
    private static List`1<string> _uncountables;
    private static Inflector();
    private static void AddIrregularRule(string singular, string plural);
    private static void AddUnknownCountRule(string word);
    private static void AddPluralRule(string rule, string replacement);
    private static void AddSingularRule(string rule, string replacement);
    public static string MakePlural(string word);
    public static string MakeSingular(string word);
    private static string ApplyRules(IList`1<InflectorRule> rules, string word);
    public static string ToTitleCase(string word);
    public static string ToHumanCase(string lowercaseAndUnderscoredWord);
    public static string AddUnderscores(string pascalCasedWord);
    public static string MakeInitialCaps(string word);
    public static string MakeInitialLowerCase(string word);
    public static bool IsStringNumeric(string str);
    public static string AddOrdinalSuffix(string number);
    public static string ConvertUnderscoresToDashes(string underscoredWord);
}
public class NPoco.FluentMappings.ManyColumnBuilder`1 : object {
    private ColumnDefinition _columnDefinition;
    public ManyColumnBuilder`1(ColumnDefinition columnDefinition);
    public sealed virtual IManyColumnBuilder`1<TModel> WithName(string name);
    public sealed virtual IManyColumnBuilder`1<TModel> WithDbType(Type type);
    public sealed virtual IManyColumnBuilder`1<TModel> WithDbType();
    public sealed virtual IManyColumnBuilder`1<TModel> Reference(Expression`1<Func`2<TModel, object>> member);
}
public class NPoco.FluentMappings.Map`1 : object {
    private TypeDefinition _petaPocoTypeDefinition;
    private TypeDefinition NPoco.FluentMappings.IMap.TypeDefinition { get; }
    public Map`1(TypeDefinition petaPocoTypeDefinition);
    public void UseMap();
    public Map`1<T> TableName(string tableName);
    public Map`1<T> Columns(Action`1<ColumnConfigurationBuilder`1<T>> columnConfiguration);
    public Map`1<T> Columns(Action`1<ColumnConfigurationBuilder`1<T>> columnConfiguration, Nullable`1<bool> explicitColumns);
    public Map`1<T> PrimaryKey(Expression`1<Func`2<T, object>> column, string sequenceName);
    public Map`1<T> PrimaryKey(Expression`1<Func`2<T, object>> column);
    public Map`1<T> PrimaryKey(Expression`1<Func`2<T, object>> column, bool autoIncrement);
    public Map`1<T> CompositePrimaryKey(Expression`1[] columns);
    public Map`1<T> PrimaryKey(string primaryKeyColumn, bool autoIncrement);
    public Map`1<T> PrimaryKey(string primaryKeyColumn, bool autoIncrement, bool useOutputClause);
    public Map`1<T> PrimaryKey(string primaryKeyColumn, string sequenceName);
    public Map`1<T> PrimaryKey(string primaryKeyColumn, string sequenceName, bool useOutputClause);
    public Map`1<T> PrimaryKey(string primaryKeyColumn);
    public Map`1<T> PersistedType();
    public Map`1<T> PersistedType(Type type);
    public Map`1<T> WithAlterStatementHook(IAlterStatementHook alterStatementHook);
    public Map`1<T> WithAlterStatementHook();
    private sealed virtual override TypeDefinition NPoco.FluentMappings.IMap.get_TypeDefinition();
}
public class NPoco.FluentMappings.Mappings : object {
    public Dictionary`2<Type, TypeDefinition> Config;
    public Map`1<T> For();
    public static Mappings BuildMappingsFromMaps(IMap[] petaPocoMaps);
}
public static class NPoco.FluentMappings.MemberHelper`1 : object {
    public static MemberInfo[] GetMembers(Expression`1<Func`2<T, TValue>> selector);
}
public class NPoco.FluentMappings.PropertyBuilderConventions : object {
    private ConventionScannerSettings _scannerSettings;
    public PropertyBuilderConventions(ConventionScannerSettings scannerSettings);
    public sealed virtual IColumnsBuilderConventions Named(Func`2<MemberInfo, string> propertiesNamedFunc);
    public sealed virtual IColumnsBuilderConventions Aliased(Func`2<MemberInfo, string> aliasNamedFunc);
    public sealed virtual IColumnsBuilderConventions IgnoreWhere(Func`2<MemberInfo, bool> ignorePropertiesWhereFunc);
    public sealed virtual IColumnsBuilderConventions ResultWhere(Func`2<MemberInfo, bool> resultPropertiesWhereFunc);
    public sealed virtual IColumnsBuilderConventions ComputedWhere(Func`2<MemberInfo, bool> computedPropertiesWhereFunc);
    public sealed virtual IColumnsBuilderConventions ComputedTypeAs(Func`2<MemberInfo, ComputedColumnType> computedPropertyTypeAsFunc);
    public sealed virtual IColumnsBuilderConventions VersionWhere(Func`2<MemberInfo, bool> versionPropertiesWhereFunc);
    public sealed virtual IColumnsBuilderConventions VersionTypeAs(Func`2<MemberInfo, VersionColumnType> versionPropertyTypeAsFunc);
    public sealed virtual IColumnsBuilderConventions ForceDateTimesToUtcWhere(Func`2<MemberInfo, bool> forceDateTimesToUtcWhereFunc);
    public sealed virtual IColumnsBuilderConventions DbColumnTypeAs(Func`2<MemberInfo, Type> dbColumnTypeAsFunc);
    public sealed virtual IColumnsBuilderConventions ReferenceNamed(Func`2<MemberInfo, string> refPropertiesNamedFunc);
    public sealed virtual IColumnsBuilderConventions ReferencePropertiesWhere(Func`2<MemberInfo, bool> referencePropertiesWhereFunc);
    public sealed virtual IColumnsBuilderConventions ComplexPropertiesWhere(Func`2<MemberInfo, bool> complexPropertiesWhereFunc);
    public sealed virtual IColumnsBuilderConventions SerializedWhere(Func`2<MemberInfo, bool> serializedWhereFunc);
    public sealed virtual IColumnsBuilderConventions ValueObjectColumnWhere(Func`2<MemberInfo, bool> valueObjectColumnWhere);
}
public class NPoco.FluentMappings.TypeDefinition : object {
    [CompilerGeneratedAttribute]
private Type <Type>k__BackingField;
    [CompilerGeneratedAttribute]
private string <TableName>k__BackingField;
    [CompilerGeneratedAttribute]
private string <PrimaryKey>k__BackingField;
    [CompilerGeneratedAttribute]
private string <SequenceName>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<bool> <AutoIncrement>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<bool> <ExplicitColumns>k__BackingField;
    [CompilerGeneratedAttribute]
private Dictionary`2<string, ColumnDefinition> <ColumnConfiguration>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<bool> <UseOutputClause>k__BackingField;
    [CompilerGeneratedAttribute]
private Type <PersistedType>k__BackingField;
    [CompilerGeneratedAttribute]
private List`1<IAlterStatementHook> <AlterStatementHooks>k__BackingField;
    public Type Type { get; public set; }
    public string TableName { get; public set; }
    public string PrimaryKey { get; public set; }
    public string SequenceName { get; public set; }
    public Nullable`1<bool> AutoIncrement { get; public set; }
    public Nullable`1<bool> ExplicitColumns { get; public set; }
    public Dictionary`2<string, ColumnDefinition> ColumnConfiguration { get; public set; }
    public Nullable`1<bool> UseOutputClause { get; public set; }
    public Type PersistedType { get; public set; }
    public List`1<IAlterStatementHook> AlterStatementHooks { get; public set; }
    public TypeDefinition(Type type);
    [CompilerGeneratedAttribute]
public Type get_Type();
    [CompilerGeneratedAttribute]
public void set_Type(Type value);
    [CompilerGeneratedAttribute]
public string get_TableName();
    [CompilerGeneratedAttribute]
public void set_TableName(string value);
    [CompilerGeneratedAttribute]
public string get_PrimaryKey();
    [CompilerGeneratedAttribute]
public void set_PrimaryKey(string value);
    [CompilerGeneratedAttribute]
public string get_SequenceName();
    [CompilerGeneratedAttribute]
public void set_SequenceName(string value);
    [CompilerGeneratedAttribute]
public Nullable`1<bool> get_AutoIncrement();
    [CompilerGeneratedAttribute]
public void set_AutoIncrement(Nullable`1<bool> value);
    [CompilerGeneratedAttribute]
public Nullable`1<bool> get_ExplicitColumns();
    [CompilerGeneratedAttribute]
public void set_ExplicitColumns(Nullable`1<bool> value);
    [CompilerGeneratedAttribute]
public Dictionary`2<string, ColumnDefinition> get_ColumnConfiguration();
    [CompilerGeneratedAttribute]
public void set_ColumnConfiguration(Dictionary`2<string, ColumnDefinition> value);
    [CompilerGeneratedAttribute]
public Nullable`1<bool> get_UseOutputClause();
    [CompilerGeneratedAttribute]
public void set_UseOutputClause(Nullable`1<bool> value);
    [CompilerGeneratedAttribute]
public Type get_PersistedType();
    [CompilerGeneratedAttribute]
public void set_PersistedType(Type value);
    [CompilerGeneratedAttribute]
public List`1<IAlterStatementHook> get_AlterStatementHooks();
    [CompilerGeneratedAttribute]
public void set_AlterStatementHooks(List`1<IAlterStatementHook> value);
}
public class NPoco.FluentPocoDataFactory : object {
    private MapperCollection _mapperCollection;
    private Cache`2<Type, InitializedPocoDataBuilder> _pocoDatas;
    [CompilerGeneratedAttribute]
private Func`3<Type, IPocoDataFactory, InitializedPocoDataBuilder> <Resolver>k__BackingField;
    public Func`3<Type, IPocoDataFactory, InitializedPocoDataBuilder> Resolver { get; private set; }
    public FluentPocoDataFactory(Func`3<Type, IPocoDataFactory, InitializedPocoDataBuilder> resolver, MapperCollection mapperCollection);
    [CompilerGeneratedAttribute]
public Func`3<Type, IPocoDataFactory, InitializedPocoDataBuilder> get_Resolver();
    [CompilerGeneratedAttribute]
private void set_Resolver(Func`3<Type, IPocoDataFactory, InitializedPocoDataBuilder> value);
    public sealed virtual PocoData ForType(Type type);
    public sealed virtual TableInfo TableInfoForType(Type type);
    public sealed virtual PocoData ForObject(object o, string primaryKeyName, bool autoIncrement);
    private InitializedPocoDataBuilder BaseClassFalbackPocoDataBuilder(Type type);
}
internal class NPoco.HashCodeCombiner : object {
    private long _combinedHash;
    public HashCodeCombiner(string seed);
    internal HashCodeCombiner AddInt(int i);
    internal HashCodeCombiner AddBool(bool b);
    internal HashCodeCombiner AddType(Type t);
    internal HashCodeCombiner AddCaseInsensitiveString(string s);
    internal HashCodeCombiner Each(IEnumerable`1<T> list, Action`2<HashCodeCombiner, T> action);
    internal string GetCombinedHashCode();
}
public interface NPoco.InitializedPocoDataBuilder {
    public abstract virtual TableInfo BuildTableInfo();
    public abstract virtual PocoData Build();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ExtensionAttribute]
public static class NPoco.Internal.ProcessMapperExtensions : object {
    [ExtensionAttribute]
public static bool TryGetMapper(IDatabase database, PocoColumn pc, Func`2& converter);
    [ExtensionAttribute]
public static object ProcessMapper(IDatabase database, PocoColumn pc, object value);
    public static object ProcessDefaultMappings(IDatabase database, PocoColumn pocoColumn, object value);
}
public interface NPoco.IOnLoaded {
    public abstract virtual void OnLoaded();
}
public class NPoco.Linq.AsyncDeleteQueryProvider`1 : object {
    protected IDatabase _database;
    protected ISqlExpression`1<T> _sqlExpression;
    public AsyncDeleteQueryProvider`1(IDatabase database);
    public sealed virtual IAsyncDeleteQueryProvider`1<T> Where(Expression`1<Func`2<T, bool>> whereExpression);
    public sealed virtual Task`1<int> Execute(CancellationToken cancellationToken);
}
public class NPoco.Linq.AsyncQueryProvider`1 : object {
    protected Database _database;
    protected ISqlExpression`1<T> _sqlExpression;
    protected Dictionary`2<string, JoinData> _joinSqlExpressions;
    protected ComplexSqlBuilder`1<T> _buildComplexSql;
    protected Expression`1<Func`2<T, IList>> _listExpression;
    protected PocoData _pocoData;
    private ISqlExpression`1<T> NPoco.Linq.ISimpleQueryProviderExpression<T>.AtlasSqlExpression { get; }
    public AsyncQueryProvider`1(Database database, Expression`1<Func`2<T, bool>> whereExpression);
    public AsyncQueryProvider`1(Database database);
    private sealed virtual override ISqlExpression`1<T> NPoco.Linq.ISimpleQueryProviderExpression<T>.get_AtlasSqlExpression();
    protected void AddWhere(Expression`1<Func`2<T, bool>> whereExpression);
    protected Sql BuildSql();
    public sealed virtual IAsyncQueryProvider`1<T> IncludeMany(Expression`1<Func`2<T, IList>> expression, JoinType joinType, string joinTableHint);
    public sealed virtual IAsyncQueryProviderWithIncludes`1<T> Include(JoinType joinType, string joinTableHint);
    public sealed virtual IAsyncQueryProviderWithIncludes`1<T> Include(Expression`1<Func`2<T, T2>> expression, JoinType joinType, string joinTableHint);
    public sealed virtual IAsyncQueryProviderWithIncludes`1<T> Include(Expression`1<Func`2<T, T2>> expression, string tableAlias, JoinType joinType, string joinTableHint);
    public sealed virtual IAsyncQueryProviderWithIncludes`1<T> UsingAlias(string tableAlias);
    public sealed virtual IAsyncQueryProviderWithIncludes`1<T> Hint(string tableHint);
    private IAsyncQueryProviderWithIncludes`1<T> QueryProviderWithIncludes(Expression expression, string tableAlias, JoinType joinType, string joinTableHint);
    public sealed virtual Task`1<List`1<T>> ToList(CancellationToken cancellationToken);
    public sealed virtual Task`1<T[]> ToArray(CancellationToken cancellationToken);
    public sealed virtual IAsyncEnumerable`1<T> ToEnumerable(CancellationToken cancellationToken);
    private IAsyncEnumerable`1<T> ExecuteQueryAsync(Sql sql, CancellationToken cancellationToken);
    public sealed virtual Task`1<T> FirstOrDefault(CancellationToken cancellationToken);
    public sealed virtual Task`1<T> FirstOrDefault(Expression`1<Func`2<T, bool>> whereExpression, CancellationToken cancellationToken);
    public sealed virtual Task`1<T> First(CancellationToken cancellationToken);
    public sealed virtual Task`1<T> First(Expression`1<Func`2<T, bool>> whereExpression, CancellationToken cancellationToken);
    public sealed virtual Task`1<T> SingleOrDefault(CancellationToken cancellationToken);
    public sealed virtual Task`1<T> SingleOrDefault(Expression`1<Func`2<T, bool>> whereExpression, CancellationToken cancellationToken);
    public sealed virtual Task`1<T> Single(CancellationToken cancellationToken);
    public sealed virtual Task`1<T> Single(Expression`1<Func`2<T, bool>> whereExpression, CancellationToken cancellationToken);
    public sealed virtual Task`1<int> Count(CancellationToken cancellationToken);
    public sealed virtual Task`1<int> Count(Expression`1<Func`2<T, bool>> whereExpression, CancellationToken cancellationToken);
    public sealed virtual Task`1<bool> Any(CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("NPoco.Linq.AsyncQueryProvider`1/<Any>d__34")]
public sealed virtual Task`1<bool> Any(Expression`1<Func`2<T, bool>> whereExpression, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("NPoco.Linq.AsyncQueryProvider`1/<ToPage>d__35")]
public sealed virtual Task`1<Page`1<T>> ToPage(int page, int pageSize, CancellationToken cancellationToken);
    public sealed virtual Task`1<List`1<T2>> ProjectTo(Expression`1<Func`2<T, T2>> projectionExpression, CancellationToken cancellationToken);
    public sealed virtual Task`1<List`1<T>> Distinct(CancellationToken cancellationToken);
    public sealed virtual Task`1<List`1<T2>> Distinct(Expression`1<Func`2<T, T2>> projectionExpression, CancellationToken cancellationToken);
    public sealed virtual IAsyncQueryProvider`1<T> Where(Expression`1<Func`2<T, bool>> whereExpression);
    public sealed virtual IAsyncQueryProvider`1<T> WhereSql(string sql, Object[] args);
    public sealed virtual IAsyncQueryProvider`1<T> WhereSql(Sql sql);
    public sealed virtual IAsyncQueryProvider`1<T> WhereSql(Func`2<QueryContext`1<T>, Sql> queryBuilder);
    public sealed virtual IAsyncQueryProvider`1<T> Limit(int rows);
    public sealed virtual IAsyncQueryProvider`1<T> Limit(int skip, int rows);
    private void ThrowIfOneToMany();
    public sealed virtual IAsyncQueryProvider`1<T> OrderBy(Expression`1<Func`2<T, object>> column);
    public sealed virtual IAsyncQueryProvider`1<T> OrderByDescending(Expression`1<Func`2<T, object>> column);
    public sealed virtual IAsyncQueryProvider`1<T> ThenBy(Expression`1<Func`2<T, object>> column);
    public sealed virtual IAsyncQueryProvider`1<T> ThenByDescending(Expression`1<Func`2<T, object>> column);
    public sealed virtual IAsyncQueryProvider`1<T> From(QueryBuilder`1<T> builder);
    public sealed virtual List`1<object> ToDynamicList();
    public sealed virtual IEnumerable`1<object> ToDynamicEnumerable();
    private sealed virtual override IDatabase NPoco.Linq.INeedDatabase.GetDatabase();
    private sealed virtual override Sql NPoco.Linq.INeedSql.GetSql();
}
public class NPoco.Linq.AsyncUpdateQueryProvider`1 : object {
    protected IDatabase _database;
    protected ISqlExpression`1<T> _sqlExpression;
    protected bool _excludeDefaults;
    protected bool _onlyFields;
    public AsyncUpdateQueryProvider`1(IDatabase database);
    public sealed virtual IAsyncUpdateQueryProvider`1<T> Where(Expression`1<Func`2<T, bool>> whereExpression);
    public sealed virtual IAsyncUpdateQueryProvider`1<T> ExcludeDefaults();
    public sealed virtual IAsyncUpdateQueryProvider`1<T> OnlyFields(Expression`1<Func`2<T, object>> onlyFields);
    [AsyncStateMachineAttribute("NPoco.Linq.AsyncUpdateQueryProvider`1/<Execute>d__8")]
public sealed virtual Task`1<int> Execute(T obj, CancellationToken cancellationToken);
}
public class NPoco.Linq.ComplexSqlBuilder`1 : object {
    private IDatabase _database;
    private PocoData _pocoData;
    private ISqlExpression`1<T> _sqlExpression;
    private Dictionary`2<string, JoinData> _joinSqlExpressions;
    public ComplexSqlBuilder`1(IDatabase database, PocoData pocoData, ISqlExpression`1<T> sqlExpression, Dictionary`2<string, JoinData> joinSqlExpressions);
    public Sql GetSqlForProjection(Expression`1<Func`2<T, T2>> projectionExpression, bool distinct);
    public Sql BuildJoin(IDatabase database, ISqlExpression`1<T> sqlExpression, List`1<JoinData> joinSqlExpressions, List`1<SelectMember> newMembers, bool count, bool distinct);
    private static string BuildJoinSql(IDatabase database, List`1<JoinData> joinSqlExpressions, List`1& cols);
    public Dictionary`2<string, JoinData> GetJoinExpressions(Expression expression, string tableAlias, JoinType joinType, string hint);
}
public class NPoco.Linq.DeleteQueryProvider`1 : AsyncDeleteQueryProvider`1<T> {
    public DeleteQueryProvider`1(IDatabase database);
    public sealed virtual IDeleteQueryProvider`1<T> Where(Expression`1<Func`2<T, bool>> whereExpression);
    public sealed virtual int Execute();
    public sealed virtual Task`1<int> ExecuteAsync(CancellationToken cancellationToken);
}
public interface NPoco.Linq.INeedDatabase {
    public abstract virtual IDatabase GetDatabase();
}
public interface NPoco.Linq.INeedSql {
    public abstract virtual Sql GetSql();
}
public interface NPoco.Linq.ISimpleQueryProviderExpression`1 {
    public ISqlExpression`1<TModel> AtlasSqlExpression { get; }
    public abstract virtual ISqlExpression`1<TModel> get_AtlasSqlExpression();
}
public class NPoco.Linq.QueryProvider`1 : AsyncQueryProvider`1<T> {
    public QueryProvider`1(Database database, Expression`1<Func`2<T, bool>> whereExpression);
    public QueryProvider`1(Database database);
    public sealed virtual T FirstOrDefault();
    public sealed virtual T FirstOrDefault(Expression`1<Func`2<T, bool>> whereExpression);
    public sealed virtual T First();
    public sealed virtual T First(Expression`1<Func`2<T, bool>> whereExpression);
    public sealed virtual T SingleOrDefault();
    public sealed virtual T SingleOrDefault(Expression`1<Func`2<T, bool>> whereExpression);
    public sealed virtual T Single();
    public sealed virtual T Single(Expression`1<Func`2<T, bool>> whereExpression);
    public sealed virtual int Count();
    public sealed virtual int Count(Expression`1<Func`2<T, bool>> whereExpression);
    public sealed virtual bool Any();
    public sealed virtual bool Any(Expression`1<Func`2<T, bool>> whereExpression);
    public sealed virtual Page`1<T> ToPage(int page, int pageSize);
    public sealed virtual List`1<T2> ProjectTo(Expression`1<Func`2<T, T2>> projectionExpression);
    public sealed virtual List`1<T2> Distinct(Expression`1<Func`2<T, T2>> projectionExpression);
    public sealed virtual List`1<T> Distinct();
    public sealed virtual T[] ToArray();
    public sealed virtual List`1<T> ToList();
    public sealed virtual IEnumerable`1<T> ToEnumerable();
    private IEnumerable`1<T> ExecuteQuery(Sql sql);
    public sealed virtual Task`1<List`1<T>> ToListAsync(CancellationToken cancellationToken);
    public sealed virtual Task`1<T[]> ToArrayAsync(CancellationToken cancellationToken);
    public sealed virtual IAsyncEnumerable`1<T> ToEnumerableAsync(CancellationToken cancellationToken);
    public sealed virtual Task`1<T> FirstOrDefaultAsync(CancellationToken cancellationToken);
    public sealed virtual Task`1<T> FirstOrDefaultAsync(Expression`1<Func`2<T, bool>> whereExpression, CancellationToken cancellationToken);
    public sealed virtual Task`1<T> FirstAsync(CancellationToken cancellationToken);
    public sealed virtual Task`1<T> FirstAsync(Expression`1<Func`2<T, bool>> whereExpression, CancellationToken cancellationToken);
    public sealed virtual Task`1<T> SingleOrDefaultAsync(CancellationToken cancellationToken);
    public sealed virtual Task`1<T> SingleOrDefaultAsync(Expression`1<Func`2<T, bool>> whereExpression, CancellationToken cancellationToken);
    public sealed virtual Task`1<T> SingleAsync(CancellationToken cancellationToken);
    public sealed virtual Task`1<T> SingleAsync(Expression`1<Func`2<T, bool>> whereExpression, CancellationToken cancellationToken);
    public sealed virtual Task`1<int> CountAsync(CancellationToken cancellationToken);
    public sealed virtual Task`1<int> CountAsync(Expression`1<Func`2<T, bool>> whereExpression, CancellationToken cancellationToken);
    public sealed virtual Task`1<bool> AnyAsync(CancellationToken cancellationToken);
    public sealed virtual Task`1<bool> AnyAsync(Expression`1<Func`2<T, bool>> whereExpression, CancellationToken cancellationToken);
    public sealed virtual Task`1<Page`1<T>> ToPageAsync(int page, int pageSize, CancellationToken cancellationToken);
    public sealed virtual Task`1<List`1<T2>> ProjectToAsync(Expression`1<Func`2<T, T2>> projectionExpression, CancellationToken cancellationToken);
    public sealed virtual Task`1<List`1<T2>> DistinctAsync(Expression`1<Func`2<T, T2>> projectionExpression, CancellationToken cancellationToken);
    public sealed virtual Task`1<List`1<T>> DistinctAsync(CancellationToken cancellationToken);
    public sealed virtual IQueryProvider`1<T> IncludeMany(Expression`1<Func`2<T, IList>> expression, JoinType joinType, string joinTableHint);
    public sealed virtual IQueryProviderWithIncludes`1<T> Include(JoinType joinType, string joinTableHint);
    public sealed virtual IQueryProviderWithIncludes`1<T> Include(Expression`1<Func`2<T, T2>> expression, JoinType joinType, string joinTableHint);
    public sealed virtual IQueryProviderWithIncludes`1<T> Include(Expression`1<Func`2<T, T2>> expression, string tableAlias, JoinType joinType, string joinTableHint);
    public sealed virtual IQueryProviderWithIncludes`1<T> UsingAlias(string tableAlias);
    public sealed virtual IQueryProviderWithIncludes`1<T> Hint(string tableHint);
    public sealed virtual IQueryProvider`1<T> Where(Expression`1<Func`2<T, bool>> whereExpression);
    public sealed virtual IQueryProvider`1<T> WhereSql(string sql, Object[] args);
    public sealed virtual IQueryProvider`1<T> WhereSql(Sql sql);
    public sealed virtual IQueryProvider`1<T> WhereSql(Func`2<QueryContext`1<T>, Sql> queryBuilder);
    public sealed virtual IQueryProvider`1<T> OrderBy(Expression`1<Func`2<T, object>> column);
    public sealed virtual IQueryProvider`1<T> OrderByDescending(Expression`1<Func`2<T, object>> column);
    public sealed virtual IQueryProvider`1<T> ThenBy(Expression`1<Func`2<T, object>> column);
    public sealed virtual IQueryProvider`1<T> ThenByDescending(Expression`1<Func`2<T, object>> column);
    public sealed virtual IQueryProvider`1<T> Limit(int rows);
    public sealed virtual IQueryProvider`1<T> Limit(int skip, int rows);
    public sealed virtual IQueryProvider`1<T> From(QueryBuilder`1<T> builder);
}
public class NPoco.Linq.StringPocoCol : object {
    [CompilerGeneratedAttribute]
private string <StringCol>k__BackingField;
    [CompilerGeneratedAttribute]
private PocoColumn[] <PocoColumn>k__BackingField;
    public string StringCol { get; public set; }
    public PocoColumn[] PocoColumn { get; public set; }
    [CompilerGeneratedAttribute]
public string get_StringCol();
    [CompilerGeneratedAttribute]
public void set_StringCol(string value);
    [CompilerGeneratedAttribute]
public PocoColumn[] get_PocoColumn();
    [CompilerGeneratedAttribute]
public void set_PocoColumn(PocoColumn[] value);
}
public class NPoco.Linq.UpdateQueryProvider`1 : AsyncUpdateQueryProvider`1<T> {
    public UpdateQueryProvider`1(IDatabase database);
    public sealed virtual IUpdateQueryProvider`1<T> Where(Expression`1<Func`2<T, bool>> whereExpression);
    public sealed virtual IUpdateQueryProvider`1<T> ExcludeDefaults();
    public sealed virtual IUpdateQueryProvider`1<T> OnlyFields(Expression`1<Func`2<T, object>> onlyFields);
    public sealed virtual int Execute(T obj);
    public sealed virtual Task`1<int> ExecuteAsync(T obj, CancellationToken cancellationToken);
}
public class NPoco.MapperCollection : List`1<IMapper> {
    [CompilerGeneratedAttribute]
private IColumnSerializer <ColumnSerializer>k__BackingField;
    internal Dictionary`2<Type, ObjectFactoryDelegate> Factories;
    private static Cache`2<object, Func`2<object, object>> ToDbConverterCache;
    private static Cache`2<object, Func`2<object, object>> FromDbConverterCache;
    public IColumnSerializer ColumnSerializer { get; public set; }
    private static MapperCollection();
    [CompilerGeneratedAttribute]
public sealed virtual IColumnSerializer get_ColumnSerializer();
    [CompilerGeneratedAttribute]
public sealed virtual void set_ColumnSerializer(IColumnSerializer value);
    public sealed virtual void RegisterFactory(Func`2<DbDataReader, T> factory);
    public sealed virtual ObjectFactoryDelegate GetFactory(Type type);
    public sealed virtual bool HasFactory(Type type);
    public sealed virtual void ClearFactories(Type type);
    public sealed virtual Func`2<object, object> Find(Func`2<IMapper, Func`2<object, object>> predicate);
    public sealed virtual object FindAndExecute(Func`2<IMapper, Func`2<object, object>> predicate, object value);
    public sealed virtual Func`2<object, object> FindFromDbConverter(Type destType, Type srcType);
    public sealed virtual Func`2<object, object> FindFromDbConverter(MemberInfo destInfo, Type srcType);
    public sealed virtual Func`2<object, object> FindToDbConverter(Type destType, MemberInfo srcInfo);
}
public class NPoco.MappingFactory : object {
    [CompilerGeneratedAttribute]
private static List`1<Func`2<IMapperCollection, IRowMapper>> <RowMappers>k__BackingField;
    private PocoData _pocoData;
    private IRowMapper _rowMapper;
    public static List`1<Func`2<IMapperCollection, IRowMapper>> RowMappers { get; private set; }
    private static MappingFactory();
    public MappingFactory(PocoData pocoData, DbDataReader dataReader);
    [CompilerGeneratedAttribute]
public static List`1<Func`2<IMapperCollection, IRowMapper>> get_RowMappers();
    [CompilerGeneratedAttribute]
private static void set_RowMappers(List`1<Func`2<IMapperCollection, IRowMapper>> value);
    public object Map(DbDataReader dataReader, object instance);
}
public class NPoco.MappingHelper : object {
    private static EnumMapper EnumMapper;
    private static Cache`2<Type, Type> UnderlyingTypes;
    private static MappingHelper();
    public static Func`2<object, object> GetConverter(IMapperCollection mapper, PocoColumn pc, Type srcType, Type dstType);
    private static bool IsIntegralType(Type t);
    public static object GetDefault(Type type);
}
public class NPoco.NullFastCreate : object {
    public sealed virtual object Create(DbDataReader dataReader);
}
public class NPoco.OneToManyHelper : object {
    public static void SetListValue(Func`2<T, IList> listFunc, PocoMember pocoMember, object prevPoco, T poco);
    public static void SetForeignList(Func`2<T, IList> listFunc, PocoMember foreignMember, object prevPoco);
}
public class NPoco.PagingHelper : object {
    public static Regex rxColumns;
    public static Regex rxOrderBy;
    private static Regex OrderByAlias;
    private static PagingHelper();
    public static bool SplitSQL(string sql, SQLParts& parts);
    public static string BuildPaging(long skip, long take, SQLParts parts, Object[]& args);
}
public class NPoco.PocoDataBuilder : object {
    private Cache`2<string, Type> _aliasToType;
    private IFastCreate _generator;
    [CompilerGeneratedAttribute]
private Type <Type>k__BackingField;
    [CompilerGeneratedAttribute]
private IMapperCollection <Mapper>k__BackingField;
    [CompilerGeneratedAttribute]
private List`1<PocoMemberPlan> <_memberPlans>k__BackingField;
    [CompilerGeneratedAttribute]
private TableInfoPlan <_tableInfoPlan>k__BackingField;
    protected Type Type { get; protected set; }
    private IMapperCollection Mapper { get; private set; }
    private List`1<PocoMemberPlan> _memberPlans { get; private set; }
    private TableInfoPlan _tableInfoPlan { get; private set; }
    public PocoDataBuilder(Type type, IMapperCollection mapper);
    [CompilerGeneratedAttribute]
protected Type get_Type();
    [CompilerGeneratedAttribute]
protected void set_Type(Type value);
    [CompilerGeneratedAttribute]
private IMapperCollection get_Mapper();
    [CompilerGeneratedAttribute]
private void set_Mapper(IMapperCollection value);
    [CompilerGeneratedAttribute]
private List`1<PocoMemberPlan> get__memberPlans();
    [CompilerGeneratedAttribute]
private void set__memberPlans(List`1<PocoMemberPlan> value);
    [CompilerGeneratedAttribute]
private TableInfoPlan get__tableInfoPlan();
    [CompilerGeneratedAttribute]
private void set__tableInfoPlan(TableInfoPlan value);
    public InitializedPocoDataBuilder Init();
    protected virtual bool ShouldIncludePrivateColumn(MemberInfo mi, Type t);
    public ColumnInfo[] GetColumnInfos(Type type);
    public static bool IsDictionaryType(Type type);
    private sealed virtual override TableInfo NPoco.InitializedPocoDataBuilder.BuildTableInfo();
    private sealed virtual override PocoData NPoco.InitializedPocoDataBuilder.Build();
    protected virtual TableInfoPlan GetTableInfo(Type type, ColumnInfo[] columnInfos, List`1<MemberInfo> memberInfos);
    protected virtual ColumnInfo GetColumnInfo(MemberInfo mi, Type type);
    [IteratorStateMachineAttribute("NPoco.PocoDataBuilder/<GetPocoColumns>d__29")]
private static IEnumerable`1<PocoColumn> GetPocoColumns(IEnumerable`1<PocoMember> members);
    [IteratorStateMachineAttribute("NPoco.PocoDataBuilder/<GetPocoMembers>d__30")]
public IEnumerable`1<PocoMemberPlan> GetPocoMembers(ColumnInfo[] columnInfos, List`1<MemberInfo> memberInfos, string prefix);
    private static void SetupValueObject(PocoColumn pc, FastCreate fastCreate);
    private static FastCreate GetFastCreate(Type memberType, IMapperCollection mapperCollection, bool isList, bool isDynamic);
    private static Type GetListType(Type memberType, bool isList);
    public List`1<MemberAccessor> GetMemberAccessors(IEnumerable`1<MemberInfo> memberInfos);
    public static bool IsList(MemberInfo mi);
    protected virtual string GetColumnName(string prefix, string columnName);
    public static string JoinStrings(string prefix, string end);
    protected string CreateAlias(string typeName, Type typeIn);
}
public class NPoco.PocoDataFactory : object {
    private static Cache`2<Type, InitializedPocoDataBuilder> _pocoDatas;
    private IMapperCollection _mapper;
    public PocoDataFactory(IMapperCollection mapper);
    private static PocoDataFactory();
    public sealed virtual PocoData ForType(Type type);
    public sealed virtual TableInfo TableInfoForType(Type type);
    public sealed virtual PocoData ForObject(object o, string primaryKeyName, bool autoIncrement);
    private InitializedPocoDataBuilder BaseClassFallbackPocoDataBuilder(Type type);
    public static PocoData ForObjectStatic(object o, string primaryKeyName, bool autoIncrement, Func`2<Type, PocoData> fallback, IMapperCollection mapper);
    public static void Guard(Type type);
}
public static class NPoco.RelationExtensions : object {
}
public class NPoco.Relator : object {
    private PropertyInfo property1;
    private object onetomanycurrent;
    public T OneToMany(T main, TSub sub, Func`2<T, object> idFunc);
    private static object GetDefault(Type type);
    public T OneToMany(T main, TSub sub, Func`2<T, object> idFunc, Func`2<TSub, object> subIdFunc);
    private static void ThrowPropertyNotFoundException();
}
public class NPoco.RowMappers.ArrayMapper : RowMapper {
    private PosName[] _posNames;
    public virtual bool ShouldMap(PocoData pocoData);
    public virtual void Init(DbDataReader dataReader, PocoData pocoData);
    public virtual object Map(DbDataReader dataReader, RowMapperContext context);
}
public class NPoco.RowMappers.DictionaryMapper : RowMapper {
    private PosName[] _posNames;
    public virtual bool ShouldMap(PocoData pocoData);
    public virtual void Init(DbDataReader dataReader, PocoData pocoData);
    public virtual object Map(DbDataReader dataReader, RowMapperContext context);
}
public class NPoco.RowMappers.DynamicPocoMember : PocoMember {
    public virtual void SetValue(object target, object value);
    public virtual object GetValue(object target);
}
public class NPoco.RowMappers.GroupResult`1 : object {
    [CompilerGeneratedAttribute]
private TKey <Key>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Item>k__BackingField;
    [CompilerGeneratedAttribute]
private int <Count>k__BackingField;
    [CompilerGeneratedAttribute]
private IEnumerable`1<GroupResult`1<TKey>> <SubItems>k__BackingField;
    public TKey Key { get; public set; }
    public string Item { get; public set; }
    public int Count { get; public set; }
    public IEnumerable`1<GroupResult`1<TKey>> SubItems { get; public set; }
    [CompilerGeneratedAttribute]
public TKey get_Key();
    [CompilerGeneratedAttribute]
public void set_Key(TKey value);
    [CompilerGeneratedAttribute]
public string get_Item();
    [CompilerGeneratedAttribute]
public void set_Item(string value);
    [CompilerGeneratedAttribute]
public int get_Count();
    [CompilerGeneratedAttribute]
public void set_Count(int value);
    [CompilerGeneratedAttribute]
public IEnumerable`1<GroupResult`1<TKey>> get_SubItems();
    [CompilerGeneratedAttribute]
public void set_SubItems(IEnumerable`1<GroupResult`1<TKey>> value);
    public virtual string ToString();
}
public interface NPoco.RowMappers.IRowMapper {
    public abstract virtual bool ShouldMap(PocoData pocoData);
    public abstract virtual object Map(DbDataReader dataReader, RowMapperContext context);
    public abstract virtual void Init(DbDataReader dataReader, PocoData pocoData);
}
[ExtensionAttribute]
public static class NPoco.RowMappers.MyEnumerableExtensions : object {
    [ExtensionAttribute]
public static IEnumerable`1<GroupResult`1<TKey>> GroupByMany(IEnumerable`1<TKey> elements, Func`2<TKey, string> stringFunc, string splitBy, int i);
}
public class NPoco.RowMappers.PosName : object {
    [CompilerGeneratedAttribute]
private int <Pos>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    public int Pos { get; public set; }
    public string Name { get; public set; }
    [CompilerGeneratedAttribute]
public int get_Pos();
    [CompilerGeneratedAttribute]
public void set_Pos(int value);
    [CompilerGeneratedAttribute]
public string get_Name();
    [CompilerGeneratedAttribute]
public void set_Name(string value);
}
public class NPoco.RowMappers.PropertyMapper : RowMapper {
    private List`1<GroupResult`1<PosName>> _groupedNames;
    private MapPlan _mapPlan;
    private bool _mappingOntoExistingInstance;
    public virtual bool ShouldMap(PocoData pocoData);
    public virtual void Init(DbDataReader dataReader, PocoData pocoData);
    public virtual object Map(DbDataReader dataReader, RowMapperContext context);
    private MapPlan BuildMapPlan(DbDataReader dataReader, PocoData pocoData);
    [IteratorStateMachineAttribute("NPoco.RowMappers.PropertyMapper/<BuildMapPlans>d__8")]
private IEnumerable`1<MapPlan> BuildMapPlans(GroupResult`1<PosName> groupedName, DbDataReader dataReader, PocoData pocoData, List`1<PocoMember> pocoMembers);
    public static bool IsEqual(string name, string value, bool exactMatch);
    private bool MapValue(GroupResult`1<PosName> posName, Object[] values, Func`2<object, object> converter, object instance, PocoColumn pocoColumn, object defaultValue);
    private static List`1<PocoMember> CreateDynamicDictionaryPocoMembers(IEnumerable`1<GroupResult`1<PosName>> subItems, PocoData pocoData, Type type);
}
[ExtensionAttribute]
public static class NPoco.RowMappers.PropertyMapperNameConvention : object {
    public static string SplitPrefix;
    private static PropertyMapperNameConvention();
    [IteratorStateMachineAttribute("NPoco.RowMappers.PropertyMapperNameConvention/<ConvertFromNewConvention>d__1")]
[ExtensionAttribute]
internal static IEnumerable`1<PosName> ConvertFromNewConvention(IEnumerable`1<PosName> posNames, PocoData pocoData);
    [IteratorStateMachineAttribute("NPoco.RowMappers.PropertyMapperNameConvention/<ConvertFromOldConvention>d__2")]
[ExtensionAttribute]
internal static IEnumerable`1<PosName> ConvertFromOldConvention(IEnumerable`1<PosName> posNames, List`1<PocoMember> pocoMembers);
    internal static PocoMemberLevel FindMember(IEnumerable`1<PocoMemberLevel> pocoMembers, string name);
    internal static PocoMember FindMember(IEnumerable`1<PocoMember> pocoMembers, string prefix, string name);
    private static bool IsPocoMemberEqual(PocoMember pocoMember, string prefix, string name);
    [IteratorStateMachineAttribute("NPoco.RowMappers.PropertyMapperNameConvention/<FlattenPocoMembers>d__6")]
private static IEnumerable`1<PocoMemberLevel> FlattenPocoMembers(List`1<PocoMember> pocoMembers, int levelMonitor);
}
public abstract class NPoco.RowMappers.RowMapper : object {
    private PosName[] _columnNames;
    public abstract virtual bool ShouldMap(PocoData pocoData);
    public virtual void Init(DbDataReader dataReader, PocoData pocoData);
    protected PosName[] GetColumnNames(DbDataReader dataReader, PocoData pocoData);
    public abstract virtual object Map(DbDataReader dataReader, RowMapperContext context);
    public static Func`2<object, object> GetConverter(PocoData pocoData, PocoColumn pocoColumn, Type sourceType, Type desType);
}
public class NPoco.RowMappers.RowMapperContext : ValueType {
    [CompilerGeneratedAttribute]
private object <Instance>k__BackingField;
    [CompilerGeneratedAttribute]
private PocoData <PocoData>k__BackingField;
    public object Instance { get; public set; }
    public PocoData PocoData { get; public set; }
    public Type Type { get; }
    [IsReadOnlyAttribute]
[CompilerGeneratedAttribute]
public object get_Instance();
    [CompilerGeneratedAttribute]
public void set_Instance(object value);
    [IsReadOnlyAttribute]
[CompilerGeneratedAttribute]
public PocoData get_PocoData();
    [CompilerGeneratedAttribute]
public void set_PocoData(PocoData value);
    public Type get_Type();
}
public class NPoco.RowMappers.ValueTupleRowMapper : object {
    private Func`2<DbDataReader, object> mapper;
    private IMapperCollection mappers;
    private static Cache`2<ValueTuple`2<Type, IMapperCollection>, Func`2<DbDataReader, object>> cache;
    public ValueTupleRowMapper(IMapperCollection mappers);
    private static ValueTupleRowMapper();
    public sealed virtual void Init(DbDataReader dataReader, PocoData pocoData);
    public sealed virtual object Map(DbDataReader dataReader, RowMapperContext context);
    public static bool IsValueTuple(Type type);
    public sealed virtual bool ShouldMap(PocoData pocoData);
    private static Func`2<DbDataReader, object> GetRowMapper(Type type, IMapperCollection mappers, DbDataReader dataReader);
    private static Func`2<DbDataReader, object> CreateRowMapper(Type type, IMapperCollection mappers, DbDataReader dataReader);
    private static ValueTuple`2<NewExpression, int> CreateTupleExpression(Type type, IMapperCollection mappers, DbDataReader dataReader, ParameterExpression reader, int fieldIndex);
}
public class NPoco.RowMappers.ValueTypeMapper : RowMapper {
    private Func`2<object, object> _converter;
    public virtual bool ShouldMap(PocoData pocoData);
    public virtual void Init(DbDataReader dataReader, PocoData pocoData);
    public virtual object Map(DbDataReader dataReader, RowMapperContext context);
}
internal static class NPoco.Singleton`1 : object {
    public static T Instance;
    private static Singleton`1();
}
[ExtensionAttribute]
public static class NPoco.SqlExtensions : object {
    [ExtensionAttribute]
public static Sql ToSql(Template template);
}
[ExtensionAttribute]
public static class NPoco.StringExtensions : object {
    [ExtensionAttribute]
public static string BreakUpCamelCase(string s);
}
public class NPoco.TableInfoCreator : object {
    public static TableInfo FromPoco(Type t);
}
public class NPoco.Transaction : object {
    private IDatabase _db;
    public Transaction(IDatabase db, IsolationLevel isolationLevel);
    public virtual void Complete();
    public sealed virtual void Dispose();
}
public enum NPoco.VersionExceptionHandling : Enum {
    public int value__;
    public static VersionExceptionHandling Ignore;
    public static VersionExceptionHandling Exception;
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
[AttributeUsageAttribute("27524")]
internal class System.Runtime.CompilerServices.NullableAttribute : Attribute {
    public Byte[] NullableFlags;
    public NullableAttribute(byte );
    public NullableAttribute(Byte[] );
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
[AttributeUsageAttribute("5196")]
internal class System.Runtime.CompilerServices.NullableContextAttribute : Attribute {
    public byte Flag;
    public NullableContextAttribute(byte );
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
[AttributeUsageAttribute("2")]
internal class System.Runtime.CompilerServices.RefSafetyRulesAttribute : Attribute {
    public int Version;
    public RefSafetyRulesAttribute(int );
}
