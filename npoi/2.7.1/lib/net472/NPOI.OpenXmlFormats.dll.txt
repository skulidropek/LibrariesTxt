[CompilerGeneratedAttribute]
[EmbeddedAttribute]
internal class Microsoft.CodeAnalysis.EmbeddedAttribute : Attribute {
}
[XmlTypeAttribute]
public class NPOI.OpenXmlFormats.CT_AdditionalCharacteristics : object {
    private List`1<CT_Characteristic> characteristicField;
    public List`1<CT_Characteristic> characteristic { get; public set; }
    public List`1<CT_Characteristic> get_characteristic();
    public void set_characteristic(List`1<CT_Characteristic> value);
}
[DebuggerStepThroughAttribute]
[DesignerCategoryAttribute("code")]
[XmlTypeAttribute]
public class NPOI.OpenXmlFormats.CT_Array : object {
    private Object[] itemsField;
    private ItemsChoiceType[] itemsElementNameField;
    private int lBoundsField;
    private int uBoundsField;
    private ST_ArrayBaseType baseTypeField;
    [XmlElementAttribute("bool", "System.Boolean")]
[XmlElementAttribute("bstr", "System.String")]
[XmlElementAttribute("cy", "System.String")]
[XmlElementAttribute("date", "System.DateTime")]
[XmlElementAttribute("decimal", "System.Decimal")]
[XmlElementAttribute("error", "System.String")]
[XmlElementAttribute("i1", "System.SByte")]
[XmlElementAttribute("i2", "System.Int16")]
[XmlElementAttribute("i4", "System.Int32")]
[XmlElementAttribute("int", "System.Int32")]
[XmlElementAttribute("r4", "System.Single")]
[XmlElementAttribute("r8", "System.Double")]
[XmlElementAttribute("ui1", "System.Byte")]
[XmlElementAttribute("ui2", "System.UInt16")]
[XmlElementAttribute("ui4", "System.UInt32")]
[XmlElementAttribute("uint", "System.UInt32")]
[XmlElementAttribute("variant", "NPOI.OpenXmlFormats.CT_Variant")]
[XmlChoiceIdentifierAttribute("ItemsElementName")]
public Object[] Items { get; public set; }
    [XmlIgnoreAttribute]
public ItemsChoiceType[] ItemsElementName { get; public set; }
    [XmlAttributeAttribute]
public int lBounds { get; public set; }
    [XmlAttributeAttribute]
public int uBounds { get; public set; }
    [XmlAttributeAttribute]
public ST_ArrayBaseType baseType { get; public set; }
    public Object[] get_Items();
    public void set_Items(Object[] value);
    public ItemsChoiceType[] get_ItemsElementName();
    public void set_ItemsElementName(ItemsChoiceType[] value);
    public int get_lBounds();
    public void set_lBounds(int value);
    public int get_uBounds();
    public void set_uBounds(int value);
    public ST_ArrayBaseType get_baseType();
    public void set_baseType(ST_ArrayBaseType value);
}
[DebuggerStepThroughAttribute]
[DesignerCategoryAttribute("code")]
[XmlTypeAttribute]
[XmlRootAttribute]
public class NPOI.OpenXmlFormats.CT_AuthorType : object {
    private List`1<object> itemsField;
    private List`1<ItemsChoiceType> itemsElementNameField;
    [XmlElementAttribute("Artist", "NPOI.OpenXmlFormats.CT_NameType")]
[XmlElementAttribute("Author", "NPOI.OpenXmlFormats.CT_NameOrCorporateType")]
[XmlElementAttribute("BookAuthor", "NPOI.OpenXmlFormats.CT_NameType")]
[XmlElementAttribute("Compiler", "NPOI.OpenXmlFormats.CT_NameType")]
[XmlElementAttribute("Composer", "NPOI.OpenXmlFormats.CT_NameType")]
[XmlElementAttribute("Conductor", "NPOI.OpenXmlFormats.CT_NameType")]
[XmlElementAttribute("Counsel", "NPOI.OpenXmlFormats.CT_NameType")]
[XmlElementAttribute("Director", "NPOI.OpenXmlFormats.CT_NameType")]
[XmlElementAttribute("Editor", "NPOI.OpenXmlFormats.CT_NameType")]
[XmlElementAttribute("Interviewee", "NPOI.OpenXmlFormats.CT_NameType")]
[XmlElementAttribute("Interviewer", "NPOI.OpenXmlFormats.CT_NameType")]
[XmlElementAttribute("Inventor", "NPOI.OpenXmlFormats.CT_NameType")]
[XmlElementAttribute("Performer", "NPOI.OpenXmlFormats.CT_NameOrCorporateType")]
[XmlElementAttribute("ProducerName", "NPOI.OpenXmlFormats.CT_NameType")]
[XmlElementAttribute("Translator", "NPOI.OpenXmlFormats.CT_NameType")]
[XmlElementAttribute("Writer", "NPOI.OpenXmlFormats.CT_NameType")]
[XmlChoiceIdentifierAttribute("ItemsElementName")]
public List`1<object> Items { get; public set; }
    [XmlIgnoreAttribute]
public List`1<ItemsChoiceType> ItemsElementName { get; public set; }
    public List`1<object> get_Items();
    public void set_Items(List`1<object> value);
    public List`1<ItemsChoiceType> get_ItemsElementName();
    public void set_ItemsElementName(List`1<ItemsChoiceType> value);
}
[DebuggerStepThroughAttribute]
[DesignerCategoryAttribute("code")]
[XmlTypeAttribute]
public class NPOI.OpenXmlFormats.CT_Cf : object {
    private string formatField;
    private Byte[] valueField;
    [XmlAttributeAttribute]
public string format { get; public set; }
    [XmlTextAttribute]
public Byte[] Value { get; public set; }
    public string get_format();
    public void set_format(string value);
    public Byte[] get_Value();
    public void set_Value(Byte[] value);
}
[XmlTypeAttribute]
public class NPOI.OpenXmlFormats.CT_Characteristic : object {
    private string nameField;
    private ST_Relation relationField;
    private string valField;
    private string vocabularyField;
    public string name { get; public set; }
    public ST_Relation relation { get; public set; }
    public string val { get; public set; }
    public string vocabulary { get; public set; }
    public string get_name();
    public void set_name(string value);
    public ST_Relation get_relation();
    public void set_relation(ST_Relation value);
    public string get_val();
    public void set_val(string value);
    public string get_vocabulary();
    public void set_vocabulary(string value);
}
[DebuggerStepThroughAttribute]
[DesignerCategoryAttribute("code")]
[XmlTypeAttribute]
[XmlRootAttribute]
public class NPOI.OpenXmlFormats.CT_Connection : object {
    private CT_DbPr dbPrField;
    private CT_OlapPr olapPrField;
    private CT_WebPr webPrField;
    private CT_TextPr textPrField;
    private CT_Parameters parametersField;
    private CT_ExtensionList extLstField;
    private UInt32 idField;
    private string sourceFileField;
    private string odcFileField;
    private bool keepAliveField;
    private UInt32 intervalField;
    private string nameField;
    private string descriptionField;
    private UInt32 typeField;
    private bool typeFieldSpecified;
    private UInt32 reconnectionMethodField;
    private byte refreshedVersionField;
    private byte minRefreshableVersionField;
    private bool savePasswordField;
    private bool newField;
    private bool deletedField;
    private bool onlyUseConnectionFileField;
    private bool backgroundField;
    private bool refreshOnLoadField;
    private bool saveDataField;
    private ST_CredMethod credentialsField;
    private string singleSignOnIdField;
    public CT_DbPr dbPr { get; public set; }
    public CT_OlapPr olapPr { get; public set; }
    public CT_WebPr webPr { get; public set; }
    public CT_TextPr textPr { get; public set; }
    public CT_Parameters parameters { get; public set; }
    public CT_ExtensionList extLst { get; public set; }
    [XmlAttributeAttribute]
public UInt32 id { get; public set; }
    [XmlAttributeAttribute]
public string sourceFile { get; public set; }
    [XmlAttributeAttribute]
public string odcFile { get; public set; }
    [XmlAttributeAttribute]
[DefaultValueAttribute("False")]
public bool keepAlive { get; public set; }
    [XmlAttributeAttribute]
[DefaultValueAttribute("System.UInt32", "0")]
public UInt32 interval { get; public set; }
    [XmlAttributeAttribute]
public string name { get; public set; }
    [XmlAttributeAttribute]
public string description { get; public set; }
    [XmlAttributeAttribute]
public UInt32 type { get; public set; }
    [XmlIgnoreAttribute]
public bool typeSpecified { get; public set; }
    [XmlAttributeAttribute]
[DefaultValueAttribute("System.UInt32", "1")]
public UInt32 reconnectionMethod { get; public set; }
    [XmlAttributeAttribute]
public byte refreshedVersion { get; public set; }
    [XmlAttributeAttribute]
[DefaultValueAttribute("System.Byte", "0")]
public byte minRefreshableVersion { get; public set; }
    [XmlAttributeAttribute]
[DefaultValueAttribute("False")]
public bool savePassword { get; public set; }
    [XmlAttributeAttribute]
[DefaultValueAttribute("False")]
public bool new { get; public set; }
    [XmlAttributeAttribute]
[DefaultValueAttribute("False")]
public bool deleted { get; public set; }
    [XmlAttributeAttribute]
[DefaultValueAttribute("False")]
public bool onlyUseConnectionFile { get; public set; }
    [XmlAttributeAttribute]
[DefaultValueAttribute("False")]
public bool background { get; public set; }
    [XmlAttributeAttribute]
[DefaultValueAttribute("False")]
public bool refreshOnLoad { get; public set; }
    [XmlAttributeAttribute]
[DefaultValueAttribute("False")]
public bool saveData { get; public set; }
    [XmlAttributeAttribute]
[DefaultValueAttribute("Mono.Cecil.CustomAttributeArgument")]
public ST_CredMethod credentials { get; public set; }
    [XmlAttributeAttribute]
public string singleSignOnId { get; public set; }
    public CT_DbPr get_dbPr();
    public void set_dbPr(CT_DbPr value);
    public CT_OlapPr get_olapPr();
    public void set_olapPr(CT_OlapPr value);
    public CT_WebPr get_webPr();
    public void set_webPr(CT_WebPr value);
    public CT_TextPr get_textPr();
    public void set_textPr(CT_TextPr value);
    public CT_Parameters get_parameters();
    public void set_parameters(CT_Parameters value);
    public CT_ExtensionList get_extLst();
    public void set_extLst(CT_ExtensionList value);
    public UInt32 get_id();
    public void set_id(UInt32 value);
    public string get_sourceFile();
    public void set_sourceFile(string value);
    public string get_odcFile();
    public void set_odcFile(string value);
    public bool get_keepAlive();
    public void set_keepAlive(bool value);
    public UInt32 get_interval();
    public void set_interval(UInt32 value);
    public string get_name();
    public void set_name(string value);
    public string get_description();
    public void set_description(string value);
    public UInt32 get_type();
    public void set_type(UInt32 value);
    public bool get_typeSpecified();
    public void set_typeSpecified(bool value);
    public UInt32 get_reconnectionMethod();
    public void set_reconnectionMethod(UInt32 value);
    public byte get_refreshedVersion();
    public void set_refreshedVersion(byte value);
    public byte get_minRefreshableVersion();
    public void set_minRefreshableVersion(byte value);
    public bool get_savePassword();
    public void set_savePassword(bool value);
    public bool get_new();
    public void set_new(bool value);
    public bool get_deleted();
    public void set_deleted(bool value);
    public bool get_onlyUseConnectionFile();
    public void set_onlyUseConnectionFile(bool value);
    public bool get_background();
    public void set_background(bool value);
    public bool get_refreshOnLoad();
    public void set_refreshOnLoad(bool value);
    public bool get_saveData();
    public void set_saveData(bool value);
    public ST_CredMethod get_credentials();
    public void set_credentials(ST_CredMethod value);
    public string get_singleSignOnId();
    public void set_singleSignOnId(string value);
}
[DebuggerStepThroughAttribute]
[DesignerCategoryAttribute("code")]
[XmlTypeAttribute]
[XmlRootAttribute]
public class NPOI.OpenXmlFormats.CT_Connections : object {
    private CT_Connection[] connectionField;
    [XmlElementAttribute("connection")]
public CT_Connection[] connection { get; public set; }
    public CT_Connection[] get_connection();
    public void set_connection(CT_Connection[] value);
}
[DebuggerStepThroughAttribute]
[DesignerCategoryAttribute("code")]
[XmlTypeAttribute]
[XmlRootAttribute("Properties")]
public class NPOI.OpenXmlFormats.CT_CustomProperties : object {
    private List`1<CT_Property> propertyField;
    [XmlElementAttribute("property")]
public List`1<CT_Property> property { get; public set; }
    public List`1<CT_Property> get_property();
    public void set_property(List`1<CT_Property> value);
    public int sizeOfPropertyArray();
    public CT_Property AddNewProperty();
    public CT_Property GetPropertyArray(int index);
    public List`1<CT_Property> GetPropertyList();
    public CT_Property GetProperty(string name);
    public CT_CustomProperties Copy();
}
[DebuggerStepThroughAttribute]
[DesignerCategoryAttribute("code")]
[XmlTypeAttribute]
[XmlRootAttribute]
public class NPOI.OpenXmlFormats.CT_DatastoreItem : object {
    private List`1<CT_DatastoreSchemaRef> schemaRefsField;
    private string itemIDField;
    [XmlArrayAttribute]
[XmlArrayItemAttribute("schemaRef")]
public List`1<CT_DatastoreSchemaRef> schemaRefs { get; public set; }
    [XmlAttributeAttribute]
public string itemID { get; public set; }
    public List`1<CT_DatastoreSchemaRef> get_schemaRefs();
    public void set_schemaRefs(List`1<CT_DatastoreSchemaRef> value);
    public string get_itemID();
    public void set_itemID(string value);
}
[DebuggerStepThroughAttribute]
[DesignerCategoryAttribute("code")]
[XmlTypeAttribute]
[XmlRootAttribute]
public class NPOI.OpenXmlFormats.CT_DatastoreSchemaRef : object {
    private string uriField;
    [XmlAttributeAttribute]
public string uri { get; public set; }
    public string get_uri();
    public void set_uri(string value);
}
[DebuggerStepThroughAttribute]
[DesignerCategoryAttribute("code")]
[XmlTypeAttribute]
[XmlRootAttribute]
public class NPOI.OpenXmlFormats.CT_DatastoreSchemaRefs : object {
    private List`1<CT_DatastoreSchemaRef> schemaRefField;
    [XmlElementAttribute("schemaRef")]
public List`1<CT_DatastoreSchemaRef> schemaRef { get; public set; }
    public List`1<CT_DatastoreSchemaRef> get_schemaRef();
    public void set_schemaRef(List`1<CT_DatastoreSchemaRef> value);
}
[DebuggerStepThroughAttribute]
[DesignerCategoryAttribute("code")]
[XmlTypeAttribute]
[XmlRootAttribute]
public class NPOI.OpenXmlFormats.CT_DbPr : object {
    private string connectionField;
    private string commandField;
    private string serverCommandField;
    private UInt32 commandTypeField;
    [XmlAttributeAttribute]
public string connection { get; public set; }
    [XmlAttributeAttribute]
public string command { get; public set; }
    [XmlAttributeAttribute]
public string serverCommand { get; public set; }
    [XmlAttributeAttribute]
[DefaultValueAttribute("System.UInt32", "2")]
public UInt32 commandType { get; public set; }
    public string get_connection();
    public void set_connection(string value);
    public string get_command();
    public void set_command(string value);
    public string get_serverCommand();
    public void set_serverCommand(string value);
    public UInt32 get_commandType();
    public void set_commandType(UInt32 value);
}
[DebuggerStepThroughAttribute]
[DesignerCategoryAttribute("code")]
[XmlTypeAttribute]
[XmlRootAttribute]
public class NPOI.OpenXmlFormats.CT_DigSigBlob : object {
    private Byte[] blobField;
    [XmlElementAttribute]
public Byte[] blob { get; public set; }
    public Byte[] get_blob();
    public void set_blob(Byte[] value);
}
[XmlTypeAttribute]
[XmlRootAttribute]
public class NPOI.OpenXmlFormats.CT_Empty : object {
}
[DebuggerStepThroughAttribute]
[DesignerCategoryAttribute("code")]
[XmlTypeAttribute]
[XmlRootAttribute("Properties")]
public class NPOI.OpenXmlFormats.CT_ExtendedProperties : object {
    private string templateField;
    private string managerField;
    private string companyField;
    private int pagesField;
    private bool pagesFieldSpecified;
    private int wordsField;
    private bool wordsFieldSpecified;
    private int charactersField;
    private bool charactersFieldSpecified;
    private string presentationFormatField;
    private int linesField;
    private bool linesFieldSpecified;
    private int paragraphsField;
    private bool paragraphsFieldSpecified;
    private int slidesField;
    private bool slidesFieldSpecified;
    private int notesField;
    private bool notesFieldSpecified;
    private int totalTimeField;
    private bool totalTimeFieldSpecified;
    private int hiddenSlidesField;
    private bool hiddenSlidesFieldSpecified;
    private int mMClipsField;
    private bool mMClipsFieldSpecified;
    private bool scaleCropField;
    private bool scaleCropFieldSpecified;
    private CT_VectorVariant headingPairsField;
    private CT_VectorLpstr titlesOfPartsField;
    private bool linksUpToDateField;
    private bool linksUpToDateFieldSpecified;
    private int charactersWithSpacesField;
    private bool charactersWithSpacesFieldSpecified;
    private bool sharedDocField;
    private bool sharedDocFieldSpecified;
    private string hyperlinkBaseField;
    private CT_VectorVariant hLinksField;
    private bool hyperlinksChangedField;
    private bool hyperlinksChangedFieldSpecified;
    private CT_DigSigBlob digSigField;
    private string applicationField;
    private string appVersionField;
    private int docSecurityField;
    private bool docSecurityFieldSpecified;
    [XmlElementAttribute]
public string Template { get; public set; }
    [XmlElementAttribute]
public string Manager { get; public set; }
    [XmlElementAttribute]
public string Company { get; public set; }
    [XmlElementAttribute]
public int Pages { get; public set; }
    [XmlIgnoreAttribute]
public bool PagesSpecified { get; public set; }
    [XmlElementAttribute]
public int Words { get; public set; }
    [XmlIgnoreAttribute]
public bool WordsSpecified { get; public set; }
    [XmlElementAttribute]
public int Characters { get; public set; }
    [XmlIgnoreAttribute]
public bool CharactersSpecified { get; public set; }
    [XmlElementAttribute]
public string PresentationFormat { get; public set; }
    [XmlElementAttribute]
public int Lines { get; public set; }
    [XmlIgnoreAttribute]
public bool LinesSpecified { get; public set; }
    [XmlElementAttribute]
public int Paragraphs { get; public set; }
    [XmlIgnoreAttribute]
public bool ParagraphsSpecified { get; public set; }
    [XmlElementAttribute]
public int Slides { get; public set; }
    [XmlIgnoreAttribute]
public bool SlidesSpecified { get; public set; }
    [XmlElementAttribute]
public int Notes { get; public set; }
    [XmlIgnoreAttribute]
public bool NotesSpecified { get; public set; }
    [XmlElementAttribute]
public int TotalTime { get; public set; }
    [XmlIgnoreAttribute]
public bool TotalTimeSpecified { get; public set; }
    [XmlElementAttribute]
public int HiddenSlides { get; public set; }
    [XmlIgnoreAttribute]
public bool HiddenSlidesSpecified { get; public set; }
    [XmlElementAttribute]
public int MMClips { get; public set; }
    [XmlIgnoreAttribute]
public bool MMClipsSpecified { get; public set; }
    [XmlElementAttribute]
public bool ScaleCrop { get; public set; }
    [XmlIgnoreAttribute]
public bool ScaleCropSpecified { get; public set; }
    [XmlElementAttribute]
public CT_VectorVariant HeadingPairs { get; public set; }
    [XmlElementAttribute]
public CT_VectorLpstr TitlesOfParts { get; public set; }
    [XmlElementAttribute]
public bool LinksUpToDate { get; public set; }
    [XmlIgnoreAttribute]
public bool LinksUpToDateSpecified { get; public set; }
    [XmlElementAttribute]
public int CharactersWithSpaces { get; public set; }
    [XmlIgnoreAttribute]
public bool CharactersWithSpacesSpecified { get; public set; }
    [XmlElementAttribute]
public bool SharedDoc { get; public set; }
    [XmlIgnoreAttribute]
public bool SharedDocSpecified { get; public set; }
    [XmlElementAttribute]
public string HyperlinkBase { get; public set; }
    public CT_VectorVariant HLinks { get; public set; }
    [XmlElementAttribute]
public bool HyperlinksChanged { get; public set; }
    [XmlIgnoreAttribute]
public bool HyperlinksChangedSpecified { get; public set; }
    [XmlElementAttribute]
public CT_DigSigBlob DigSig { get; public set; }
    [XmlElementAttribute]
public string Application { get; public set; }
    [XmlElementAttribute]
public string AppVersion { get; public set; }
    [XmlElementAttribute]
public int DocSecurity { get; public set; }
    [XmlIgnoreAttribute]
public bool DocSecuritySpecified { get; public set; }
    public string get_Template();
    public void set_Template(string value);
    public string get_Manager();
    public void set_Manager(string value);
    public string get_Company();
    public void set_Company(string value);
    public int get_Pages();
    public void set_Pages(int value);
    public bool get_PagesSpecified();
    public void set_PagesSpecified(bool value);
    public int get_Words();
    public void set_Words(int value);
    public bool get_WordsSpecified();
    public void set_WordsSpecified(bool value);
    public int get_Characters();
    public void set_Characters(int value);
    public bool get_CharactersSpecified();
    public void set_CharactersSpecified(bool value);
    public string get_PresentationFormat();
    public void set_PresentationFormat(string value);
    public int get_Lines();
    public void set_Lines(int value);
    public bool get_LinesSpecified();
    public void set_LinesSpecified(bool value);
    public int get_Paragraphs();
    public void set_Paragraphs(int value);
    public bool get_ParagraphsSpecified();
    public void set_ParagraphsSpecified(bool value);
    public int get_Slides();
    public void set_Slides(int value);
    public bool get_SlidesSpecified();
    public void set_SlidesSpecified(bool value);
    public int get_Notes();
    public void set_Notes(int value);
    public bool get_NotesSpecified();
    public void set_NotesSpecified(bool value);
    public int get_TotalTime();
    public void set_TotalTime(int value);
    public bool get_TotalTimeSpecified();
    public void set_TotalTimeSpecified(bool value);
    public int get_HiddenSlides();
    public void set_HiddenSlides(int value);
    public bool get_HiddenSlidesSpecified();
    public void set_HiddenSlidesSpecified(bool value);
    public int get_MMClips();
    public void set_MMClips(int value);
    public bool get_MMClipsSpecified();
    public void set_MMClipsSpecified(bool value);
    public bool get_ScaleCrop();
    public void set_ScaleCrop(bool value);
    public bool get_ScaleCropSpecified();
    public void set_ScaleCropSpecified(bool value);
    public CT_VectorVariant get_HeadingPairs();
    public void set_HeadingPairs(CT_VectorVariant value);
    public CT_VectorLpstr get_TitlesOfParts();
    public void set_TitlesOfParts(CT_VectorLpstr value);
    public bool get_LinksUpToDate();
    public void set_LinksUpToDate(bool value);
    public bool get_LinksUpToDateSpecified();
    public void set_LinksUpToDateSpecified(bool value);
    public int get_CharactersWithSpaces();
    public void set_CharactersWithSpaces(int value);
    public bool get_CharactersWithSpacesSpecified();
    public void set_CharactersWithSpacesSpecified(bool value);
    public bool get_SharedDoc();
    public void set_SharedDoc(bool value);
    public bool get_SharedDocSpecified();
    public void set_SharedDocSpecified(bool value);
    public string get_HyperlinkBase();
    public void set_HyperlinkBase(string value);
    public CT_VectorVariant get_HLinks();
    public void set_HLinks(CT_VectorVariant value);
    public bool get_HyperlinksChanged();
    public void set_HyperlinksChanged(bool value);
    public bool get_HyperlinksChangedSpecified();
    public void set_HyperlinksChangedSpecified(bool value);
    public CT_DigSigBlob get_DigSig();
    public void set_DigSig(CT_DigSigBlob value);
    public string get_Application();
    public void set_Application(string value);
    public string get_AppVersion();
    public void set_AppVersion(string value);
    public int get_DocSecurity();
    public void set_DocSecurity(int value);
    public bool get_DocSecuritySpecified();
    public void set_DocSecuritySpecified(bool value);
    public CT_ExtendedProperties Copy();
    public CT_VectorVariant GetHeadingPairs();
    public bool IsSetHiddenSlides();
    public bool IsSetHLinks();
    public bool IsSetHyperlinksChanged();
    public bool IsSetLinksUpToDate();
    public bool IsSetMMClips();
    public bool IsSetNotes();
    public bool IsSetScaleCrop();
    public bool IsSetSharedDoc();
    public bool IsSetSlides();
    public bool IsSetHyperlinkBase();
    public bool IsSetTotalTime();
    public bool IsSetParagraphs();
    public bool IsSetLines();
    public bool IsSetTemplate();
    public bool IsSetManager();
    public bool IsSetCompany();
    public bool IsSetPresentationFormat();
    public bool IsSetApplication();
    public bool IsSetAppVersion();
    public bool IsSetWords();
    public bool IsSetPages();
    public bool IsSetCharacters();
    public bool IsSetCharactersWithSpaces();
}
[DebuggerStepThroughAttribute]
[DesignerCategoryAttribute("code")]
[XmlTypeAttribute]
public class NPOI.OpenXmlFormats.CT_Extension : object {
    private XmlElement anyField;
    private string uriField;
    [XmlAnyElementAttribute]
public XmlElement Any { get; public set; }
    [XmlAttributeAttribute]
public string uri { get; public set; }
    public XmlElement get_Any();
    public void set_Any(XmlElement value);
    public string get_uri();
    public void set_uri(string value);
}
[DebuggerStepThroughAttribute]
[DesignerCategoryAttribute("code")]
[XmlTypeAttribute]
public class NPOI.OpenXmlFormats.CT_ExtensionList : object {
    private CT_Extension[] extField;
    [XmlElementAttribute("ext")]
public CT_Extension[] ext { get; public set; }
    public CT_Extension[] get_ext();
    public void set_ext(CT_Extension[] value);
}
[DebuggerStepThroughAttribute]
[DesignerCategoryAttribute("code")]
[XmlTypeAttribute]
public class NPOI.OpenXmlFormats.CT_Index : object {
    private UInt32 vField;
    [XmlAttributeAttribute]
public UInt32 v { get; public set; }
    public static CT_Index Parse(XmlNode node, XmlNamespaceManager namespaceManager);
    internal void Write(StreamWriter sw, string nodeName);
    public UInt32 get_v();
    public void set_v(UInt32 value);
}
[DebuggerStepThroughAttribute]
[DesignerCategoryAttribute("code")]
[XmlTypeAttribute]
[XmlRootAttribute]
public class NPOI.OpenXmlFormats.CT_NameListType : object {
    private List`1<CT_PersonType> personField;
    [XmlElementAttribute("Person")]
public List`1<CT_PersonType> Person { get; public set; }
    public List`1<CT_PersonType> get_Person();
    public void set_Person(List`1<CT_PersonType> value);
}
[DebuggerStepThroughAttribute]
[DesignerCategoryAttribute("code")]
[XmlTypeAttribute]
[XmlRootAttribute]
public class NPOI.OpenXmlFormats.CT_NameOrCorporateType : object {
    private object itemField;
    [XmlElementAttribute("Corporate", "System.String")]
[XmlElementAttribute("NameList", "NPOI.OpenXmlFormats.CT_NameListType")]
public object Item { get; public set; }
    public object get_Item();
    public void set_Item(object value);
}
[DebuggerStepThroughAttribute]
[DesignerCategoryAttribute("code")]
[XmlTypeAttribute]
[XmlRootAttribute]
public class NPOI.OpenXmlFormats.CT_NameType : object {
    private List`1<CT_PersonType> nameListField;
    [XmlArrayAttribute]
[XmlArrayItemAttribute("Person")]
public List`1<CT_PersonType> NameList { get; public set; }
    public List`1<CT_PersonType> get_NameList();
    public void set_NameList(List`1<CT_PersonType> value);
}
[XmlTypeAttribute]
[XmlRootAttribute]
public class NPOI.OpenXmlFormats.CT_Null : object {
}
[DebuggerStepThroughAttribute]
[DesignerCategoryAttribute("code")]
[XmlTypeAttribute]
[XmlRootAttribute]
public class NPOI.OpenXmlFormats.CT_OlapPr : object {
    private bool localField;
    private string localConnectionField;
    private bool localRefreshField;
    private bool sendLocaleField;
    private UInt32 rowDrillCountField;
    private bool rowDrillCountFieldSpecified;
    private bool serverFillField;
    private bool serverNumberFormatField;
    private bool serverFontField;
    private bool serverFontColorField;
    [XmlAttributeAttribute]
[DefaultValueAttribute("False")]
public bool local { get; public set; }
    [XmlAttributeAttribute]
public string localConnection { get; public set; }
    [XmlAttributeAttribute]
[DefaultValueAttribute("True")]
public bool localRefresh { get; public set; }
    [XmlAttributeAttribute]
[DefaultValueAttribute("False")]
public bool sendLocale { get; public set; }
    [XmlAttributeAttribute]
public UInt32 rowDrillCount { get; public set; }
    [XmlIgnoreAttribute]
public bool rowDrillCountSpecified { get; public set; }
    [XmlAttributeAttribute]
[DefaultValueAttribute("True")]
public bool serverFill { get; public set; }
    [XmlAttributeAttribute]
[DefaultValueAttribute("True")]
public bool serverNumberFormat { get; public set; }
    [XmlAttributeAttribute]
[DefaultValueAttribute("True")]
public bool serverFont { get; public set; }
    [XmlAttributeAttribute]
[DefaultValueAttribute("True")]
public bool serverFontColor { get; public set; }
    public bool get_local();
    public void set_local(bool value);
    public string get_localConnection();
    public void set_localConnection(string value);
    public bool get_localRefresh();
    public void set_localRefresh(bool value);
    public bool get_sendLocale();
    public void set_sendLocale(bool value);
    public UInt32 get_rowDrillCount();
    public void set_rowDrillCount(UInt32 value);
    public bool get_rowDrillCountSpecified();
    public void set_rowDrillCountSpecified(bool value);
    public bool get_serverFill();
    public void set_serverFill(bool value);
    public bool get_serverNumberFormat();
    public void set_serverNumberFormat(bool value);
    public bool get_serverFont();
    public void set_serverFont(bool value);
    public bool get_serverFontColor();
    public void set_serverFontColor(bool value);
}
[DebuggerStepThroughAttribute]
[DesignerCategoryAttribute("code")]
[XmlTypeAttribute]
[XmlRootAttribute]
public class NPOI.OpenXmlFormats.CT_Parameter : object {
    private string nameField;
    private int sqlTypeField;
    private ST_ParameterType parameterTypeField;
    private bool refreshOnChangeField;
    private string promptField;
    private bool booleanField;
    private bool booleanFieldSpecified;
    private double doubleField;
    private bool doubleFieldSpecified;
    private int integerField;
    private bool integerFieldSpecified;
    private string stringField;
    private string cellField;
    [XmlAttributeAttribute]
public string name { get; public set; }
    [XmlAttributeAttribute]
[DefaultValueAttribute("0")]
public int sqlType { get; public set; }
    [XmlAttributeAttribute]
[DefaultValueAttribute("Mono.Cecil.CustomAttributeArgument")]
public ST_ParameterType parameterType { get; public set; }
    [XmlAttributeAttribute]
[DefaultValueAttribute("False")]
public bool refreshOnChange { get; public set; }
    [XmlAttributeAttribute]
public string prompt { get; public set; }
    [XmlAttributeAttribute]
public bool boolean { get; public set; }
    [XmlIgnoreAttribute]
public bool booleanSpecified { get; public set; }
    [XmlAttributeAttribute]
public double double { get; public set; }
    [XmlIgnoreAttribute]
public bool doubleSpecified { get; public set; }
    [XmlAttributeAttribute]
public int integer { get; public set; }
    [XmlIgnoreAttribute]
public bool integerSpecified { get; public set; }
    [XmlAttributeAttribute]
public string string { get; public set; }
    [XmlAttributeAttribute]
public string cell { get; public set; }
    public string get_name();
    public void set_name(string value);
    public int get_sqlType();
    public void set_sqlType(int value);
    public ST_ParameterType get_parameterType();
    public void set_parameterType(ST_ParameterType value);
    public bool get_refreshOnChange();
    public void set_refreshOnChange(bool value);
    public string get_prompt();
    public void set_prompt(string value);
    public bool get_boolean();
    public void set_boolean(bool value);
    public bool get_booleanSpecified();
    public void set_booleanSpecified(bool value);
    public double get_double();
    public void set_double(double value);
    public bool get_doubleSpecified();
    public void set_doubleSpecified(bool value);
    public int get_integer();
    public void set_integer(int value);
    public bool get_integerSpecified();
    public void set_integerSpecified(bool value);
    public string get_string();
    public void set_string(string value);
    public string get_cell();
    public void set_cell(string value);
}
[DebuggerStepThroughAttribute]
[DesignerCategoryAttribute("code")]
[XmlTypeAttribute]
[XmlRootAttribute]
public class NPOI.OpenXmlFormats.CT_Parameters : object {
    private CT_Parameter[] parameterField;
    private UInt32 countField;
    private bool countFieldSpecified;
    [XmlElementAttribute("parameter")]
public CT_Parameter[] parameter { get; public set; }
    [XmlAttributeAttribute]
public UInt32 count { get; public set; }
    [XmlIgnoreAttribute]
public bool countSpecified { get; public set; }
    public CT_Parameter[] get_parameter();
    public void set_parameter(CT_Parameter[] value);
    public UInt32 get_count();
    public void set_count(UInt32 value);
    public bool get_countSpecified();
    public void set_countSpecified(bool value);
}
[DebuggerStepThroughAttribute]
[DesignerCategoryAttribute("code")]
[XmlTypeAttribute]
[XmlRootAttribute]
public class NPOI.OpenXmlFormats.CT_PersonType : object {
    private List`1<string> lastField;
    private List`1<string> firstField;
    private List`1<string> middleField;
    [XmlElementAttribute("Last")]
public List`1<string> Last { get; public set; }
    [XmlElementAttribute("First")]
public List`1<string> First { get; public set; }
    [XmlElementAttribute("Middle")]
public List`1<string> Middle { get; public set; }
    public List`1<string> get_Last();
    public void set_Last(List`1<string> value);
    public List`1<string> get_First();
    public void set_First(List`1<string> value);
    public List`1<string> get_Middle();
    public void set_Middle(List`1<string> value);
}
[DebuggerStepThroughAttribute]
[DesignerCategoryAttribute("code")]
[XmlTypeAttribute]
[XmlRootAttribute]
public class NPOI.OpenXmlFormats.CT_Property : object {
    private object itemField;
    private ItemChoiceType itemElementNameField;
    private string fmtidField;
    private int pidField;
    private string nameField;
    private string linkTargetField;
    [XmlElementAttribute("array", "NPOI.OpenXmlFormats.CT_Array")]
[XmlElementAttribute("blob", "System.Byte[]")]
[XmlElementAttribute("bool", "System.Boolean")]
[XmlElementAttribute("bstr", "System.String")]
[XmlElementAttribute("cf", "NPOI.OpenXmlFormats.CT_Cf")]
[XmlElementAttribute("clsid", "System.String")]
[XmlElementAttribute("cy", "System.String")]
[XmlElementAttribute("date", "System.DateTime")]
[XmlElementAttribute("decimal", "System.Decimal")]
[XmlElementAttribute("empty", "NPOI.OpenXmlFormats.CT_Empty")]
[XmlElementAttribute("error", "System.String")]
[XmlElementAttribute("filetime", "System.DateTime")]
[XmlElementAttribute("i1", "System.SByte")]
[XmlElementAttribute("i2", "System.Int16")]
[XmlElementAttribute("i4", "System.Int32")]
[XmlElementAttribute("i8", "System.Int64")]
[XmlElementAttribute("int", "System.Int32")]
[XmlElementAttribute("lpstr", "System.String")]
[XmlElementAttribute("lpwstr", "System.String")]
[XmlElementAttribute("null", "NPOI.OpenXmlFormats.CT_Null")]
[XmlElementAttribute("oblob", "System.Byte[]")]
[XmlElementAttribute("ostorage", "System.Byte[]")]
[XmlElementAttribute("ostream", "System.Byte[]")]
[XmlElementAttribute("r4", "System.Single")]
[XmlElementAttribute("r8", "System.Double")]
[XmlElementAttribute("storage", "System.Byte[]")]
[XmlElementAttribute("stream", "System.Byte[]")]
[XmlElementAttribute("ui1", "System.Byte")]
[XmlElementAttribute("ui2", "System.UInt16")]
[XmlElementAttribute("ui4", "System.UInt32")]
[XmlElementAttribute("ui8", "System.UInt64")]
[XmlElementAttribute("uint", "System.UInt32")]
[XmlElementAttribute("vector", "NPOI.OpenXmlFormats.CT_Vector")]
[XmlElementAttribute("vstream", "NPOI.OpenXmlFormats.CT_Vstream")]
[XmlChoiceIdentifierAttribute("ItemElementName")]
public object Item { get; public set; }
    [XmlIgnoreAttribute]
public ItemChoiceType ItemElementName { get; public set; }
    [XmlAttributeAttribute]
public string fmtid { get; public set; }
    [XmlAttributeAttribute]
public int pid { get; public set; }
    [XmlAttributeAttribute]
public string name { get; public set; }
    [XmlAttributeAttribute]
public string linkTarget { get; public set; }
    public object get_Item();
    public void set_Item(object value);
    public bool IsSetFiletime();
    public bool IsSetBool();
    public object GetBool();
    public bool IsSetI1();
    public object GetI1();
    public object GetI2();
    public bool IsSetI2();
    public object GetI4();
    public object GetFiletime();
    public bool IsSetI4();
    public bool IsSetUi1();
    public object GetUi1();
    public object GetUi2();
    public object GetUi4();
    public bool IsSetUi8();
    public bool IsSetUint();
    public object GetUint();
    public bool IsSetR4();
    public bool IsSetR8();
    public object GetR8();
    public string GetR4();
    public object GetUi8();
    public bool IsSetDecimal();
    public Nullable`1<decimal> GetDecimal();
    public bool IsSetUi4();
    public bool IsSetUi2();
    public bool IsSetI8();
    public object GetI8();
    public bool IsSetInt();
    public object GetInt();
    public object GetDate();
    public bool IsSetDate();
    public string GetLpstr();
    public bool IsSetLpstr();
    public string GetLpwstr();
    public ItemChoiceType get_ItemElementName();
    public void set_ItemElementName(ItemChoiceType value);
    public string get_fmtid();
    public void set_fmtid(string value);
    public int get_pid();
    public void set_pid(int value);
    public string get_name();
    public void set_name(string value);
    public string get_linkTarget();
    public void set_linkTarget(string value);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
    public virtual string ToString();
    public bool IsSetLpwstr();
}
[XmlTypeAttribute]
public class NPOI.OpenXmlFormats.CT_Schema : object {
    private string uriField;
    private string manifestLocationField;
    private string schemaLocationField;
    [DefaultValueAttribute("")]
[XmlAttributeAttribute]
public string uri { get; public set; }
    [XmlAttributeAttribute]
public string manifestLocation { get; public set; }
    [XmlAttributeAttribute]
public string schemaLocation { get; public set; }
    public static CT_Schema Parse(XmlNode node, XmlNamespaceManager namespaceManager);
    internal void Write(StreamWriter sw, string nodeName);
    public string get_uri();
    public void set_uri(string value);
    public string get_manifestLocation();
    public void set_manifestLocation(string value);
    public string get_schemaLocation();
    public void set_schemaLocation(string value);
}
[XmlTypeAttribute]
public class NPOI.OpenXmlFormats.CT_SchemaLibrary : object {
    private List`1<CT_Schema> schemaField;
    [XmlElementAttribute("schema")]
public List`1<CT_Schema> schema { get; public set; }
    public List`1<CT_Schema> get_schema();
    public void set_schema(List`1<CT_Schema> value);
}
[DebuggerStepThroughAttribute]
[DesignerCategoryAttribute("code")]
[XmlTypeAttribute]
[XmlRootAttribute]
public class NPOI.OpenXmlFormats.CT_Sources : object {
    private List`1<CT_SourceType> sourceField;
    private string selectedStyleField;
    private string styleNameField;
    private string uRIField;
    [XmlElementAttribute("Source")]
public List`1<CT_SourceType> Source { get; public set; }
    [XmlAttributeAttribute]
public string SelectedStyle { get; public set; }
    [XmlAttributeAttribute]
public string StyleName { get; public set; }
    [XmlAttributeAttribute]
public string URI { get; public set; }
    public List`1<CT_SourceType> get_Source();
    public void set_Source(List`1<CT_SourceType> value);
    public string get_SelectedStyle();
    public void set_SelectedStyle(string value);
    public string get_StyleName();
    public void set_StyleName(string value);
    public string get_URI();
    public void set_URI(string value);
}
[DebuggerStepThroughAttribute]
[DesignerCategoryAttribute("code")]
[XmlTypeAttribute]
[XmlRootAttribute]
public class NPOI.OpenXmlFormats.CT_SourceType : object {
    private List`1<object> itemsField;
    private List`1<ItemsChoiceType1> itemsElementNameField;
    [XmlElementAttribute("AbbreviatedCaseNumber", "System.String")]
[XmlElementAttribute("AlbumTitle", "System.String")]
[XmlElementAttribute("Author", "NPOI.OpenXmlFormats.CT_AuthorType")]
[XmlElementAttribute("BookTitle", "System.String")]
[XmlElementAttribute("BroadcastTitle", "System.String")]
[XmlElementAttribute("Broadcaster", "System.String")]
[XmlElementAttribute("CaseNumber", "System.String")]
[XmlElementAttribute("ChapterNumber", "System.String")]
[XmlElementAttribute("City", "System.String")]
[XmlElementAttribute("Comments", "System.String")]
[XmlElementAttribute("ConferenceName", "System.String")]
[XmlElementAttribute("CountryRegion", "System.String")]
[XmlElementAttribute("Court", "System.String")]
[XmlElementAttribute("Day", "System.String")]
[XmlElementAttribute("DayAccessed", "System.String")]
[XmlElementAttribute("Department", "System.String")]
[XmlElementAttribute("Distributor", "System.String")]
[XmlElementAttribute("Edition", "System.String")]
[XmlElementAttribute("Guid", "System.String")]
[XmlElementAttribute("Institution", "System.String")]
[XmlElementAttribute("InternetSiteTitle", "System.String")]
[XmlElementAttribute("Issue", "System.String")]
[XmlElementAttribute("JournalName", "System.String")]
[XmlElementAttribute("LCID", "System.String")]
[XmlElementAttribute("Medium", "System.String")]
[XmlElementAttribute("Month", "System.String")]
[XmlElementAttribute("MonthAccessed", "System.String")]
[XmlElementAttribute("NumberVolumes", "System.String")]
[XmlElementAttribute("Pages", "System.String")]
[XmlElementAttribute("PatentNumber", "System.String")]
[XmlElementAttribute("PeriodicalTitle", "System.String")]
[XmlElementAttribute("ProductionCompany", "System.String")]
[XmlElementAttribute("PublicationTitle", "System.String")]
[XmlElementAttribute("Publisher", "System.String")]
[XmlElementAttribute("RecordingNumber", "System.String")]
[XmlElementAttribute("RefOrder", "System.String")]
[XmlElementAttribute("Reporter", "System.String")]
[XmlElementAttribute("ShortTitle", "System.String")]
[XmlElementAttribute("SourceType", "NPOI.OpenXmlFormats.ST_SourceType")]
[XmlElementAttribute("StandardNumber", "System.String")]
[XmlElementAttribute("StateProvince", "System.String")]
[XmlElementAttribute("Station", "System.String")]
[XmlElementAttribute("Tag", "System.String")]
[XmlElementAttribute("Theater", "System.String")]
[XmlElementAttribute("ThesisType", "System.String")]
[XmlElementAttribute("Title", "System.String")]
[XmlElementAttribute("Type", "System.String")]
[XmlElementAttribute("URL", "System.String")]
[XmlElementAttribute("Version", "System.String")]
[XmlElementAttribute("Volume", "System.String")]
[XmlElementAttribute("Year", "System.String")]
[XmlElementAttribute("YearAccessed", "System.String")]
[XmlChoiceIdentifierAttribute("ItemsElementName")]
public List`1<object> Items { get; public set; }
    [XmlIgnoreAttribute]
public List`1<ItemsChoiceType1> ItemsElementName { get; public set; }
    public List`1<object> get_Items();
    public void set_Items(List`1<object> value);
    public List`1<ItemsChoiceType1> get_ItemsElementName();
    public void set_ItemsElementName(List`1<ItemsChoiceType1> value);
}
[DebuggerStepThroughAttribute]
[DesignerCategoryAttribute("code")]
[XmlTypeAttribute]
[XmlRootAttribute]
public class NPOI.OpenXmlFormats.CT_TableMissing : object {
}
[DebuggerStepThroughAttribute]
[DesignerCategoryAttribute("code")]
[XmlTypeAttribute]
[XmlRootAttribute]
public class NPOI.OpenXmlFormats.CT_Tables : object {
    private List`1<object> itemsField;
    private UInt32 countField;
    private bool countFieldSpecified;
    [XmlElementAttribute("m", "NPOI.OpenXmlFormats.CT_TableMissing")]
[XmlElementAttribute("s", "NPOI.OpenXmlFormats.CT_XStringElement")]
[XmlElementAttribute("x", "NPOI.OpenXmlFormats.CT_Index")]
public List`1<object> Items { get; public set; }
    [XmlAttributeAttribute]
public UInt32 count { get; public set; }
    [XmlIgnoreAttribute]
public bool countSpecified { get; public set; }
    public List`1<object> get_Items();
    public void set_Items(List`1<object> value);
    public UInt32 get_count();
    public void set_count(UInt32 value);
    public bool get_countSpecified();
    public void set_countSpecified(bool value);
}
[DebuggerStepThroughAttribute]
[DesignerCategoryAttribute("code")]
[XmlTypeAttribute]
[XmlRootAttribute]
public class NPOI.OpenXmlFormats.CT_TextField : object {
    private ST_ExternalConnectionType typeField;
    private UInt32 positionField;
    [XmlAttributeAttribute]
[DefaultValueAttribute("Mono.Cecil.CustomAttributeArgument")]
public ST_ExternalConnectionType type { get; public set; }
    [XmlAttributeAttribute]
[DefaultValueAttribute("System.UInt32", "0")]
public UInt32 position { get; public set; }
    public ST_ExternalConnectionType get_type();
    public void set_type(ST_ExternalConnectionType value);
    public UInt32 get_position();
    public void set_position(UInt32 value);
}
[DebuggerStepThroughAttribute]
[DesignerCategoryAttribute("code")]
[XmlTypeAttribute]
[XmlRootAttribute]
public class NPOI.OpenXmlFormats.CT_TextFields : object {
    private CT_TextField[] textFieldField;
    private UInt32 countField;
    [XmlElementAttribute("textField")]
public CT_TextField[] textField { get; public set; }
    [XmlAttributeAttribute]
[DefaultValueAttribute("System.UInt32", "1")]
public UInt32 count { get; public set; }
    public CT_TextField[] get_textField();
    public void set_textField(CT_TextField[] value);
    public UInt32 get_count();
    public void set_count(UInt32 value);
}
[DebuggerStepThroughAttribute]
[DesignerCategoryAttribute("code")]
[XmlTypeAttribute]
[XmlRootAttribute]
public class NPOI.OpenXmlFormats.CT_TextPr : object {
    private CT_TextFields textFieldsField;
    private bool promptField;
    private ST_FileType fileTypeField;
    private UInt32 codePageField;
    private UInt32 firstRowField;
    private string sourceFileField;
    private bool delimitedField;
    private string decimalField;
    private string thousandsField;
    private bool tabField;
    private bool spaceField;
    private bool commaField;
    private bool semicolonField;
    private bool consecutiveField;
    private ST_Qualifier qualifierField;
    private string delimiterField;
    public CT_TextFields textFields { get; public set; }
    [XmlAttributeAttribute]
[DefaultValueAttribute("True")]
public bool prompt { get; public set; }
    [XmlAttributeAttribute]
[DefaultValueAttribute("Mono.Cecil.CustomAttributeArgument")]
public ST_FileType fileType { get; public set; }
    [XmlAttributeAttribute]
[DefaultValueAttribute("System.UInt32", "1252")]
public UInt32 codePage { get; public set; }
    [XmlAttributeAttribute]
[DefaultValueAttribute("System.UInt32", "1")]
public UInt32 firstRow { get; public set; }
    [XmlAttributeAttribute]
[DefaultValueAttribute("")]
public string sourceFile { get; public set; }
    [XmlAttributeAttribute]
[DefaultValueAttribute("True")]
public bool delimited { get; public set; }
    [XmlAttributeAttribute]
[DefaultValueAttribute(".")]
public string decimal { get; public set; }
    [XmlAttributeAttribute]
[DefaultValueAttribute(",")]
public string thousands { get; public set; }
    [XmlAttributeAttribute]
[DefaultValueAttribute("True")]
public bool tab { get; public set; }
    [XmlAttributeAttribute]
[DefaultValueAttribute("False")]
public bool space { get; public set; }
    [XmlAttributeAttribute]
[DefaultValueAttribute("False")]
public bool comma { get; public set; }
    [XmlAttributeAttribute]
[DefaultValueAttribute("False")]
public bool semicolon { get; public set; }
    [XmlAttributeAttribute]
[DefaultValueAttribute("False")]
public bool consecutive { get; public set; }
    [XmlAttributeAttribute]
[DefaultValueAttribute("Mono.Cecil.CustomAttributeArgument")]
public ST_Qualifier qualifier { get; public set; }
    [XmlAttributeAttribute]
public string delimiter { get; public set; }
    public CT_TextFields get_textFields();
    public void set_textFields(CT_TextFields value);
    public bool get_prompt();
    public void set_prompt(bool value);
    public ST_FileType get_fileType();
    public void set_fileType(ST_FileType value);
    public UInt32 get_codePage();
    public void set_codePage(UInt32 value);
    public UInt32 get_firstRow();
    public void set_firstRow(UInt32 value);
    public string get_sourceFile();
    public void set_sourceFile(string value);
    public bool get_delimited();
    public void set_delimited(bool value);
    public string get_decimal();
    public void set_decimal(string value);
    public string get_thousands();
    public void set_thousands(string value);
    public bool get_tab();
    public void set_tab(bool value);
    public bool get_space();
    public void set_space(bool value);
    public bool get_comma();
    public void set_comma(bool value);
    public bool get_semicolon();
    public void set_semicolon(bool value);
    public bool get_consecutive();
    public void set_consecutive(bool value);
    public ST_Qualifier get_qualifier();
    public void set_qualifier(ST_Qualifier value);
    public string get_delimiter();
    public void set_delimiter(string value);
}
[DebuggerStepThroughAttribute]
[DesignerCategoryAttribute("code")]
[XmlTypeAttribute]
public class NPOI.OpenXmlFormats.CT_Variant : object {
    private short i2Field;
    private bool i2SpecifiedField;
    private int i4Field;
    private bool i4SpecifiedField;
    private long i8Field;
    private bool i8SpecifiedField;
    private string lpstrField;
    private string lpwstrField;
    private float r4Field;
    private bool r4SpecifiedField;
    private double r8Field;
    private bool r8SpecifiedField;
    [XmlElementAttribute]
public short i2 { get; public set; }
    [XmlIgnoreAttribute]
public bool i2Specified { get; public set; }
    [XmlElementAttribute]
public int i4 { get; public set; }
    [XmlIgnoreAttribute]
public bool i4Specified { get; public set; }
    [XmlElementAttribute]
public long i8 { get; public set; }
    [XmlIgnoreAttribute]
public bool i8Specified { get; public set; }
    [XmlElementAttribute]
public string lpstr { get; public set; }
    [XmlElementAttribute]
public string lpwstr { get; public set; }
    [XmlElementAttribute]
public float r4 { get; public set; }
    [XmlIgnoreAttribute]
public bool r4Specified { get; public set; }
    [XmlElementAttribute]
public double r8 { get; public set; }
    [XmlIgnoreAttribute]
public bool r8Specified { get; public set; }
    public short get_i2();
    public void set_i2(short value);
    public bool get_i2Specified();
    public void set_i2Specified(bool value);
    public int get_i4();
    public void set_i4(int value);
    public bool get_i4Specified();
    public void set_i4Specified(bool value);
    public long get_i8();
    public void set_i8(long value);
    public bool get_i8Specified();
    public void set_i8Specified(bool value);
    public string get_lpstr();
    public void set_lpstr(string value);
    public string get_lpwstr();
    public void set_lpwstr(string value);
    public float get_r4();
    public void set_r4(float value);
    public bool get_r4Specified();
    public void set_r4Specified(bool value);
    public double get_r8();
    public void set_r8(double value);
    public bool get_r8Specified();
    public void set_r8Specified(bool value);
}
[DebuggerStepThroughAttribute]
[DesignerCategoryAttribute("code")]
[XmlTypeAttribute]
public class NPOI.OpenXmlFormats.CT_Vector : object {
    private List`1<object> itemsField;
    private List`1<ST_VectorBaseType> itemsElementNameField;
    private ST_VectorBaseType baseTypeField;
    private UInt32 sizeField;
    [XmlElementAttribute("bool", "System.Boolean")]
[XmlElementAttribute("bstr", "System.String")]
[XmlElementAttribute("cf", "NPOI.OpenXmlFormats.CT_Cf")]
[XmlElementAttribute("clsid", "System.String")]
[XmlElementAttribute("cy", "System.String")]
[XmlElementAttribute("date", "System.DateTime")]
[XmlElementAttribute("error", "System.String")]
[XmlElementAttribute("filetime", "System.DateTime")]
[XmlElementAttribute("i1", "System.SByte")]
[XmlElementAttribute("i2", "System.Int16")]
[XmlElementAttribute("i4", "System.Int32")]
[XmlElementAttribute("i8", "System.Int64")]
[XmlElementAttribute("lpstr", "System.String")]
[XmlElementAttribute("lpwstr", "System.String")]
[XmlElementAttribute("r4", "System.Single")]
[XmlElementAttribute("r8", "System.Double")]
[XmlElementAttribute("ui1", "System.Byte")]
[XmlElementAttribute("ui2", "System.UInt16")]
[XmlElementAttribute("ui4", "System.UInt32")]
[XmlElementAttribute("ui8", "System.UInt64")]
[XmlElementAttribute("variant", "NPOI.OpenXmlFormats.CT_Variant")]
[XmlChoiceIdentifierAttribute("ItemsElementName")]
public Object[] Items { get; public set; }
    [XmlIgnoreAttribute]
public ST_VectorBaseType[] ItemsElementName { get; public set; }
    [XmlAttributeAttribute]
public ST_VectorBaseType baseType { get; public set; }
    [XmlAttributeAttribute]
public UInt32 size { get; public set; }
    public Object[] get_Items();
    public void set_Items(Object[] value);
    public ST_VectorBaseType[] get_ItemsElementName();
    public void set_ItemsElementName(ST_VectorBaseType[] value);
    public ST_VectorBaseType get_baseType();
    public void set_baseType(ST_VectorBaseType value);
    public UInt32 get_size();
    public void set_size(UInt32 value);
    public int SizeOfVariantArray();
    public CT_Variant GetVariantArray(int p);
    public int SizeOfLpstrArray();
    public string GetLpstrArray(int p);
    private List`1<T> GetObjectList(ST_VectorBaseType type);
    private int SizeOfArray(ST_VectorBaseType type);
    private T GetObjectArray(int p, ST_VectorBaseType type);
    private T AddNewObject(ST_VectorBaseType type);
    private void SetObject(ST_VectorBaseType type, int p, T obj);
    private int GetObjectIndex(ST_VectorBaseType type, int p);
    private void RemoveObject(ST_VectorBaseType type, int p);
}
[DebuggerStepThroughAttribute]
[DesignerCategoryAttribute("code")]
[XmlTypeAttribute]
[XmlRootAttribute]
public class NPOI.OpenXmlFormats.CT_VectorLpstr : object {
    private CT_Vector vectorField;
    [XmlElementAttribute]
public CT_Vector vector { get; public set; }
    public CT_Vector get_vector();
    public void set_vector(CT_Vector value);
}
[DebuggerStepThroughAttribute]
[DesignerCategoryAttribute("code")]
[XmlTypeAttribute]
[XmlRootAttribute]
public class NPOI.OpenXmlFormats.CT_VectorVariant : object {
    private CT_Vector vectorField;
    [XmlElementAttribute]
public CT_Vector vector { get; public set; }
    public CT_Vector get_vector();
    public void set_vector(CT_Vector value);
}
[DebuggerStepThroughAttribute]
[DesignerCategoryAttribute("code")]
[XmlTypeAttribute]
public class NPOI.OpenXmlFormats.CT_Vstream : object {
    private string versionField;
    private Byte[] valueField;
    [XmlAttributeAttribute]
public string version { get; public set; }
    [XmlTextAttribute]
public Byte[] Value { get; public set; }
    public string get_version();
    public void set_version(string value);
    public Byte[] get_Value();
    public void set_Value(Byte[] value);
}
[DebuggerStepThroughAttribute]
[DesignerCategoryAttribute("code")]
[XmlTypeAttribute]
[XmlRootAttribute]
public class NPOI.OpenXmlFormats.CT_WebPr : object {
    private CT_Tables tablesField;
    private bool xmlField;
    private bool sourceDataField;
    private bool parsePreField;
    private bool consecutiveField;
    private bool firstRowField;
    private bool xl97Field;
    private bool textDatesField;
    private bool xl2000Field;
    private string urlField;
    private string postField;
    private bool htmlTablesField;
    private ST_HtmlFmt htmlFormatField;
    private string editPageField;
    public CT_Tables tables { get; public set; }
    [XmlAttributeAttribute]
[DefaultValueAttribute("False")]
public bool xml { get; public set; }
    [XmlAttributeAttribute]
[DefaultValueAttribute("False")]
public bool sourceData { get; public set; }
    [XmlAttributeAttribute]
[DefaultValueAttribute("False")]
public bool parsePre { get; public set; }
    [XmlAttributeAttribute]
[DefaultValueAttribute("False")]
public bool consecutive { get; public set; }
    [XmlAttributeAttribute]
[DefaultValueAttribute("False")]
public bool firstRow { get; public set; }
    [XmlAttributeAttribute]
[DefaultValueAttribute("False")]
public bool xl97 { get; public set; }
    [XmlAttributeAttribute]
[DefaultValueAttribute("False")]
public bool textDates { get; public set; }
    [XmlAttributeAttribute]
[DefaultValueAttribute("False")]
public bool xl2000 { get; public set; }
    [XmlAttributeAttribute]
public string url { get; public set; }
    [XmlAttributeAttribute]
public string post { get; public set; }
    [XmlAttributeAttribute]
[DefaultValueAttribute("False")]
public bool htmlTables { get; public set; }
    [XmlAttributeAttribute]
[DefaultValueAttribute("Mono.Cecil.CustomAttributeArgument")]
public ST_HtmlFmt htmlFormat { get; public set; }
    [XmlAttributeAttribute]
public string editPage { get; public set; }
    public CT_Tables get_tables();
    public void set_tables(CT_Tables value);
    public bool get_xml();
    public void set_xml(bool value);
    public bool get_sourceData();
    public void set_sourceData(bool value);
    public bool get_parsePre();
    public void set_parsePre(bool value);
    public bool get_consecutive();
    public void set_consecutive(bool value);
    public bool get_firstRow();
    public void set_firstRow(bool value);
    public bool get_xl97();
    public void set_xl97(bool value);
    public bool get_textDates();
    public void set_textDates(bool value);
    public bool get_xl2000();
    public void set_xl2000(bool value);
    public string get_url();
    public void set_url(string value);
    public string get_post();
    public void set_post(string value);
    public bool get_htmlTables();
    public void set_htmlTables(bool value);
    public ST_HtmlFmt get_htmlFormat();
    public void set_htmlFormat(ST_HtmlFmt value);
    public string get_editPage();
    public void set_editPage(string value);
}
[DebuggerStepThroughAttribute]
[DesignerCategoryAttribute("code")]
[XmlTypeAttribute]
public class NPOI.OpenXmlFormats.CT_XStringElement : object {
    private string vField;
    [XmlAttributeAttribute]
public string v { get; public set; }
    public string get_v();
    public void set_v(string value);
}
public class NPOI.OpenXmlFormats.CustomPropertiesDocument : object {
    internal static XmlSerializer serializer;
    internal static XmlSerializerNamespaces namespaces;
    private CT_CustomProperties _props;
    public CustomPropertiesDocument(CT_CustomProperties prop);
    private static CustomPropertiesDocument();
    public CT_CustomProperties GetProperties();
    public CT_CustomProperties AddNewProperties();
    public CustomPropertiesDocument Copy();
    public static CustomPropertiesDocument Parse(Stream stream);
    public void Save(Stream stream);
    public virtual string ToString();
}
[DesignerCategoryAttribute("code")]
[XmlTypeAttribute]
[XmlRootAttribute]
public class NPOI.OpenXmlFormats.Dml.Chart.CT_Area3DChart : object {
    private CT_Grouping groupingField;
    private CT_Boolean varyColorsField;
    private List`1<CT_AreaSer> serField;
    private CT_DLbls dLblsField;
    private CT_ChartLines dropLinesField;
    private CT_GapAmount gapDepthField;
    private List`1<CT_UnsignedInt> axIdField;
    private List`1<CT_Extension> extLstField;
    [XmlElementAttribute]
public CT_Grouping grouping { get; public set; }
    [XmlElementAttribute]
public CT_Boolean varyColors { get; public set; }
    [XmlElementAttribute("ser")]
public List`1<CT_AreaSer> ser { get; public set; }
    [XmlElementAttribute]
public CT_DLbls dLbls { get; public set; }
    [XmlElementAttribute]
public CT_ChartLines dropLines { get; public set; }
    [XmlElementAttribute]
public CT_GapAmount gapDepth { get; public set; }
    [XmlElementAttribute("axId")]
public List`1<CT_UnsignedInt> axId { get; public set; }
    [XmlElementAttribute]
public List`1<CT_Extension> extLst { get; public set; }
    public static CT_Area3DChart Parse(XmlNode node, XmlNamespaceManager namespaceManager);
    internal void Write(StreamWriter sw, string nodeName);
    public int GetSeriesCount();
    public CT_Grouping get_grouping();
    public void set_grouping(CT_Grouping value);
    public CT_Boolean get_varyColors();
    public void set_varyColors(CT_Boolean value);
    public List`1<CT_AreaSer> get_ser();
    public void set_ser(List`1<CT_AreaSer> value);
    public CT_DLbls get_dLbls();
    public void set_dLbls(CT_DLbls value);
    public CT_ChartLines get_dropLines();
    public void set_dropLines(CT_ChartLines value);
    public CT_GapAmount get_gapDepth();
    public void set_gapDepth(CT_GapAmount value);
    public List`1<CT_UnsignedInt> get_axId();
    public void set_axId(List`1<CT_UnsignedInt> value);
    public List`1<CT_Extension> get_extLst();
    public void set_extLst(List`1<CT_Extension> value);
}
[DesignerCategoryAttribute("code")]
[XmlTypeAttribute]
[XmlRootAttribute]
public class NPOI.OpenXmlFormats.Dml.Chart.CT_AreaChart : object {
    private CT_Grouping groupingField;
    private CT_Boolean varyColorsField;
    private List`1<CT_AreaSer> serField;
    private CT_DLbls dLblsField;
    private CT_ChartLines dropLinesField;
    private List`1<CT_UnsignedInt> axIdField;
    private List`1<CT_Extension> extLstField;
    [XmlElementAttribute]
public CT_Grouping grouping { get; public set; }
    [XmlElementAttribute]
public CT_Boolean varyColors { get; public set; }
    [XmlElementAttribute("ser")]
public List`1<CT_AreaSer> ser { get; public set; }
    [XmlElementAttribute]
public CT_DLbls dLbls { get; public set; }
    [XmlElementAttribute]
public CT_ChartLines dropLines { get; public set; }
    [XmlElementAttribute("axId")]
public List`1<CT_UnsignedInt> axId { get; public set; }
    [XmlElementAttribute]
public List`1<CT_Extension> extLst { get; public set; }
    public static CT_AreaChart Parse(XmlNode node, XmlNamespaceManager namespaceManager);
    internal void Write(StreamWriter sw, string nodeName);
    public int GetSeriesCount();
    public CT_Grouping get_grouping();
    public void set_grouping(CT_Grouping value);
    public CT_Boolean get_varyColors();
    public void set_varyColors(CT_Boolean value);
    public List`1<CT_AreaSer> get_ser();
    public void set_ser(List`1<CT_AreaSer> value);
    public CT_DLbls get_dLbls();
    public void set_dLbls(CT_DLbls value);
    public CT_ChartLines get_dropLines();
    public void set_dropLines(CT_ChartLines value);
    public List`1<CT_UnsignedInt> get_axId();
    public void set_axId(List`1<CT_UnsignedInt> value);
    public List`1<CT_Extension> get_extLst();
    public void set_extLst(List`1<CT_Extension> value);
    public CT_Boolean AddNewVaryColors();
    public CT_UnsignedInt AddNewAxId();
    public CT_AreaSer AddNewSer();
}
[DesignerCategoryAttribute("code")]
[XmlTypeAttribute]
[XmlRootAttribute]
public class NPOI.OpenXmlFormats.Dml.Chart.CT_AreaSer : object {
    private CT_UnsignedInt idxField;
    private CT_UnsignedInt orderField;
    private CT_SerTx txField;
    private CT_ShapeProperties spPrField;
    private CT_PictureOptions pictureOptionsField;
    private List`1<CT_DPt> dPtField;
    private CT_DLbls dLblsField;
    private List`1<CT_Trendline> trendlineField;
    private List`1<CT_ErrBars> errBarsField;
    private CT_AxDataSource catField;
    private CT_NumDataSource valField;
    private List`1<CT_Extension> extLstField;
    [XmlElementAttribute]
public CT_UnsignedInt idx { get; public set; }
    [XmlElementAttribute]
public CT_UnsignedInt order { get; public set; }
    [XmlElementAttribute]
public CT_SerTx tx { get; public set; }
    [XmlElementAttribute]
public CT_ShapeProperties spPr { get; public set; }
    [XmlElementAttribute]
public CT_PictureOptions pictureOptions { get; public set; }
    [XmlElementAttribute("dPt")]
public List`1<CT_DPt> dPt { get; public set; }
    [XmlElementAttribute]
public CT_DLbls dLbls { get; public set; }
    [XmlElementAttribute("trendline")]
public List`1<CT_Trendline> trendline { get; public set; }
    [XmlElementAttribute("errBars")]
public List`1<CT_ErrBars> errBars { get; public set; }
    [XmlElementAttribute]
public CT_AxDataSource cat { get; public set; }
    [XmlElementAttribute]
public CT_NumDataSource val { get; public set; }
    [XmlElementAttribute]
public List`1<CT_Extension> extLst { get; public set; }
    public static CT_AreaSer Parse(XmlNode node, XmlNamespaceManager namespaceManager);
    internal void Write(StreamWriter sw, string nodeName);
    public CT_UnsignedInt get_idx();
    public void set_idx(CT_UnsignedInt value);
    public CT_UnsignedInt get_order();
    public void set_order(CT_UnsignedInt value);
    public CT_SerTx get_tx();
    public void set_tx(CT_SerTx value);
    public CT_ShapeProperties get_spPr();
    public void set_spPr(CT_ShapeProperties value);
    public CT_PictureOptions get_pictureOptions();
    public void set_pictureOptions(CT_PictureOptions value);
    public List`1<CT_DPt> get_dPt();
    public void set_dPt(List`1<CT_DPt> value);
    public CT_DLbls get_dLbls();
    public void set_dLbls(CT_DLbls value);
    public List`1<CT_Trendline> get_trendline();
    public void set_trendline(List`1<CT_Trendline> value);
    public List`1<CT_ErrBars> get_errBars();
    public void set_errBars(List`1<CT_ErrBars> value);
    public CT_AxDataSource get_cat();
    public void set_cat(CT_AxDataSource value);
    public CT_NumDataSource get_val();
    public void set_val(CT_NumDataSource value);
    public List`1<CT_Extension> get_extLst();
    public void set_extLst(List`1<CT_Extension> value);
    public CT_UnsignedInt AddNewIdx();
    public CT_UnsignedInt AddNewOrder();
    public CT_AxDataSource AddNewCat();
    public CT_NumDataSource AddNewVal();
}
[DesignerCategoryAttribute("code")]
[XmlTypeAttribute]
[XmlRootAttribute]
public class NPOI.OpenXmlFormats.Dml.Chart.CT_AxDataSource : object {
    private CT_MultiLvlStrRef multiLvlStrRefField;
    private CT_NumData numLitField;
    private CT_NumRef numRefField;
    private CT_StrData strLitField;
    private CT_StrRef strRefField;
    public CT_NumData numLit { get; public set; }
    public CT_NumRef numRef { get; public set; }
    public CT_StrData strLit { get; public set; }
    public CT_StrRef strRef { get; public set; }
    public CT_MultiLvlStrRef multiLvlStrRef { get; public set; }
    public static CT_AxDataSource Parse(XmlNode node, XmlNamespaceManager namespaceManager);
    internal void Write(StreamWriter sw, string nodeName);
    public CT_NumRef AddNewNumRef();
    public CT_NumData AddNewNumLit();
    public CT_NumData get_numLit();
    public void set_numLit(CT_NumData value);
    public CT_NumRef get_numRef();
    public void set_numRef(CT_NumRef value);
    public CT_StrData get_strLit();
    public void set_strLit(CT_StrData value);
    public CT_StrRef get_strRef();
    public void set_strRef(CT_StrRef value);
    public CT_MultiLvlStrRef get_multiLvlStrRef();
    public void set_multiLvlStrRef(CT_MultiLvlStrRef value);
    public CT_StrRef AddNewStrRef();
    public CT_StrData AddNewStrLit();
}
[DesignerCategoryAttribute("code")]
[XmlTypeAttribute]
[XmlRootAttribute]
public class NPOI.OpenXmlFormats.Dml.Chart.CT_AxisUnit : object {
    private double valField;
    [XmlAttributeAttribute]
public double val { get; public set; }
    public static CT_AxisUnit Parse(XmlNode node, XmlNamespaceManager namespaceManager);
    internal void Write(StreamWriter sw, string nodeName);
    public double get_val();
    public void set_val(double value);
}
[DesignerCategoryAttribute("code")]
[XmlTypeAttribute]
[XmlRootAttribute]
public class NPOI.OpenXmlFormats.Dml.Chart.CT_AxPos : object {
    private ST_AxPos valField;
    [XmlAttributeAttribute]
public ST_AxPos val { get; public set; }
    public static CT_AxPos Parse(XmlNode node, XmlNamespaceManager namespaceManager);
    internal void Write(StreamWriter sw, string nodeName);
    public ST_AxPos get_val();
    public void set_val(ST_AxPos value);
}
[DesignerCategoryAttribute("code")]
[XmlTypeAttribute]
[XmlRootAttribute]
public class NPOI.OpenXmlFormats.Dml.Chart.CT_BandFmt : object {
    private CT_UnsignedInt idxField;
    private CT_ShapeProperties spPrField;
    [XmlElementAttribute]
public CT_UnsignedInt idx { get; public set; }
    [XmlElementAttribute]
public CT_ShapeProperties spPr { get; public set; }
    public static CT_BandFmt Parse(XmlNode node, XmlNamespaceManager namespaceManager);
    internal void Write(StreamWriter sw, string nodeName);
    public CT_UnsignedInt get_idx();
    public void set_idx(CT_UnsignedInt value);
    public CT_ShapeProperties get_spPr();
    public void set_spPr(CT_ShapeProperties value);
}
[DesignerCategoryAttribute("code")]
[XmlTypeAttribute]
[XmlRootAttribute]
public class NPOI.OpenXmlFormats.Dml.Chart.CT_BandFmts : object {
    private List`1<CT_BandFmt> bandFmtField;
    [XmlElementAttribute("bandFmt")]
public List`1<CT_BandFmt> bandFmt { get; public set; }
    public List`1<CT_BandFmt> get_bandFmt();
    public void set_bandFmt(List`1<CT_BandFmt> value);
}
[DesignerCategoryAttribute("code")]
[XmlTypeAttribute]
[XmlRootAttribute]
public class NPOI.OpenXmlFormats.Dml.Chart.CT_Bar3DChart : object {
    private CT_BarDir barDirField;
    private CT_BarGrouping groupingField;
    private CT_Boolean varyColorsField;
    private List`1<CT_BarSer> serField;
    private CT_DLbls dLblsField;
    private CT_GapAmount gapWidthField;
    private CT_GapAmount gapDepthField;
    private CT_Shape shapeField;
    private List`1<CT_UnsignedInt> axIdField;
    private List`1<CT_Extension> extLstField;
    [XmlElementAttribute]
public CT_BarDir barDir { get; public set; }
    [XmlElementAttribute]
public CT_BarGrouping grouping { get; public set; }
    [XmlElementAttribute]
public CT_Boolean varyColors { get; public set; }
    [XmlElementAttribute("ser")]
public List`1<CT_BarSer> ser { get; public set; }
    [XmlElementAttribute]
public CT_DLbls dLbls { get; public set; }
    [XmlElementAttribute]
public CT_GapAmount gapWidth { get; public set; }
    [XmlElementAttribute]
public CT_GapAmount gapDepth { get; public set; }
    [XmlElementAttribute]
public CT_Shape shape { get; public set; }
    [XmlElementAttribute("axId")]
public List`1<CT_UnsignedInt> axId { get; public set; }
    [XmlArrayAttribute]
[XmlArrayItemAttribute("ext")]
public List`1<CT_Extension> extLst { get; public set; }
    public int GetSeriesCount();
    public CT_BarDir get_barDir();
    public void set_barDir(CT_BarDir value);
    public CT_BarGrouping get_grouping();
    public void set_grouping(CT_BarGrouping value);
    public CT_Boolean get_varyColors();
    public void set_varyColors(CT_Boolean value);
    public List`1<CT_BarSer> get_ser();
    public void set_ser(List`1<CT_BarSer> value);
    public CT_DLbls get_dLbls();
    public void set_dLbls(CT_DLbls value);
    public CT_GapAmount get_gapWidth();
    public void set_gapWidth(CT_GapAmount value);
    public CT_GapAmount get_gapDepth();
    public void set_gapDepth(CT_GapAmount value);
    public CT_Shape get_shape();
    public void set_shape(CT_Shape value);
    public List`1<CT_UnsignedInt> get_axId();
    public void set_axId(List`1<CT_UnsignedInt> value);
    public List`1<CT_Extension> get_extLst();
    public void set_extLst(List`1<CT_Extension> value);
    public static CT_Bar3DChart Parse(XmlNode node, XmlNamespaceManager namespaceManager);
    internal void Write(StreamWriter sw, string nodeName);
}
[DesignerCategoryAttribute("code")]
[XmlTypeAttribute]
[XmlRootAttribute]
public class NPOI.OpenXmlFormats.Dml.Chart.CT_BarChart : object {
    private CT_BarDir barDirField;
    private CT_BarGrouping groupingField;
    private CT_Boolean varyColorsField;
    private List`1<CT_BarSer> serField;
    private CT_DLbls dLblsField;
    private CT_GapAmount gapWidthField;
    private CT_Overlap overlapField;
    private List`1<CT_ChartLines> serLinesField;
    private List`1<CT_UnsignedInt> axIdField;
    private List`1<CT_Extension> extLstField;
    [XmlElementAttribute]
public CT_BarDir barDir { get; public set; }
    [XmlElementAttribute]
public CT_BarGrouping grouping { get; public set; }
    [XmlElementAttribute]
public CT_Boolean varyColors { get; public set; }
    [XmlElementAttribute("ser")]
public List`1<CT_BarSer> ser { get; public set; }
    [XmlElementAttribute]
public CT_DLbls dLbls { get; public set; }
    [XmlElementAttribute]
public CT_GapAmount gapWidth { get; public set; }
    [XmlElementAttribute]
public CT_Overlap overlap { get; public set; }
    [XmlElementAttribute("serLines")]
public List`1<CT_ChartLines> serLines { get; public set; }
    [XmlElementAttribute("axId")]
public List`1<CT_UnsignedInt> axId { get; public set; }
    [XmlArrayAttribute]
[XmlArrayItemAttribute("ext")]
public List`1<CT_Extension> extLst { get; public set; }
    public static CT_BarChart Parse(XmlNode node, XmlNamespaceManager namespaceManager);
    internal void Write(StreamWriter sw, string nodeName);
    public int GetSeriesCount();
    public CT_BarDir get_barDir();
    public void set_barDir(CT_BarDir value);
    public CT_BarGrouping get_grouping();
    public void set_grouping(CT_BarGrouping value);
    public CT_Boolean get_varyColors();
    public void set_varyColors(CT_Boolean value);
    public List`1<CT_BarSer> get_ser();
    public void set_ser(List`1<CT_BarSer> value);
    public CT_DLbls get_dLbls();
    public void set_dLbls(CT_DLbls value);
    public CT_GapAmount get_gapWidth();
    public void set_gapWidth(CT_GapAmount value);
    public CT_Overlap get_overlap();
    public void set_overlap(CT_Overlap value);
    public List`1<CT_ChartLines> get_serLines();
    public void set_serLines(List`1<CT_ChartLines> value);
    public List`1<CT_UnsignedInt> get_axId();
    public void set_axId(List`1<CT_UnsignedInt> value);
    public List`1<CT_Extension> get_extLst();
    public void set_extLst(List`1<CT_Extension> value);
    public CT_BarGrouping AddNewGrouping();
    public CT_BarSer AddNewSer();
    public CT_Boolean AddNewVaryColors();
    public CT_UnsignedInt AddNewAxId();
    public CT_BarDir AddNewBarDir();
}
[DesignerCategoryAttribute("code")]
[XmlTypeAttribute]
[XmlRootAttribute]
public class NPOI.OpenXmlFormats.Dml.Chart.CT_BarDir : object {
    private ST_BarDir valField;
    [XmlAttributeAttribute]
[DefaultValueAttribute("Mono.Cecil.CustomAttributeArgument")]
public ST_BarDir val { get; public set; }
    public static CT_BarDir Parse(XmlNode node, XmlNamespaceManager namespaceManager);
    internal void Write(StreamWriter sw, string nodeName);
    public ST_BarDir get_val();
    public void set_val(ST_BarDir value);
}
[DesignerCategoryAttribute("code")]
[XmlTypeAttribute]
[XmlRootAttribute]
public class NPOI.OpenXmlFormats.Dml.Chart.CT_BarGrouping : object {
    private ST_BarGrouping valField;
    [XmlAttributeAttribute]
[DefaultValueAttribute("Mono.Cecil.CustomAttributeArgument")]
public ST_BarGrouping val { get; public set; }
    public static CT_BarGrouping Parse(XmlNode node, XmlNamespaceManager namespaceManager);
    internal void Write(StreamWriter sw, string nodeName);
    public ST_BarGrouping get_val();
    public void set_val(ST_BarGrouping value);
}
[DesignerCategoryAttribute("code")]
[XmlTypeAttribute]
[XmlRootAttribute]
public class NPOI.OpenXmlFormats.Dml.Chart.CT_BarSer : object {
    private CT_UnsignedInt idxField;
    private CT_UnsignedInt orderField;
    private CT_SerTx txField;
    private CT_ShapeProperties spPrField;
    private CT_Boolean invertIfNegativeField;
    private CT_PictureOptions pictureOptionsField;
    private List`1<CT_DPt> dPtField;
    private CT_DLbls dLblsField;
    private List`1<CT_Trendline> trendlineField;
    private CT_ErrBars errBarsField;
    private CT_AxDataSource catField;
    private CT_NumDataSource valField;
    private CT_Shape shapeField;
    private List`1<CT_Extension> extLstField;
    [XmlElementAttribute]
public CT_UnsignedInt idx { get; public set; }
    [XmlElementAttribute]
public CT_UnsignedInt order { get; public set; }
    [XmlElementAttribute]
public CT_SerTx tx { get; public set; }
    [XmlElementAttribute]
public CT_ShapeProperties spPr { get; public set; }
    [XmlElementAttribute]
public CT_Boolean invertIfNegative { get; public set; }
    [XmlElementAttribute]
public CT_PictureOptions pictureOptions { get; public set; }
    [XmlElementAttribute("dPt")]
public List`1<CT_DPt> dPt { get; public set; }
    [XmlElementAttribute]
public CT_DLbls dLbls { get; public set; }
    [XmlElementAttribute("trendline")]
public List`1<CT_Trendline> trendline { get; public set; }
    [XmlElementAttribute]
public CT_ErrBars errBars { get; public set; }
    [XmlElementAttribute]
public CT_AxDataSource cat { get; public set; }
    [XmlElementAttribute]
public CT_NumDataSource val { get; public set; }
    [XmlElementAttribute]
public CT_Shape shape { get; public set; }
    [XmlElementAttribute]
public List`1<CT_Extension> extLst { get; public set; }
    public static CT_BarSer Parse(XmlNode node, XmlNamespaceManager namespaceManager);
    internal void Write(StreamWriter sw, string nodeName);
    public CT_UnsignedInt get_idx();
    public void set_idx(CT_UnsignedInt value);
    public CT_UnsignedInt get_order();
    public void set_order(CT_UnsignedInt value);
    public CT_SerTx get_tx();
    public void set_tx(CT_SerTx value);
    public CT_ShapeProperties get_spPr();
    public void set_spPr(CT_ShapeProperties value);
    public CT_Boolean get_invertIfNegative();
    public void set_invertIfNegative(CT_Boolean value);
    public CT_PictureOptions get_pictureOptions();
    public void set_pictureOptions(CT_PictureOptions value);
    public List`1<CT_DPt> get_dPt();
    public void set_dPt(List`1<CT_DPt> value);
    public CT_DLbls get_dLbls();
    public void set_dLbls(CT_DLbls value);
    public List`1<CT_Trendline> get_trendline();
    public void set_trendline(List`1<CT_Trendline> value);
    public CT_ErrBars get_errBars();
    public void set_errBars(CT_ErrBars value);
    public CT_AxDataSource get_cat();
    public void set_cat(CT_AxDataSource value);
    public CT_NumDataSource get_val();
    public void set_val(CT_NumDataSource value);
    public CT_Shape get_shape();
    public void set_shape(CT_Shape value);
    public List`1<CT_Extension> get_extLst();
    public void set_extLst(List`1<CT_Extension> value);
    public CT_UnsignedInt AddNewIdx();
    public CT_UnsignedInt AddNewOrder();
    public CT_AxDataSource AddNewCat();
    public CT_NumDataSource AddNewVal();
}
[DesignerCategoryAttribute("code")]
[XmlTypeAttribute]
[XmlRootAttribute]
public class NPOI.OpenXmlFormats.Dml.Chart.CT_Boolean : object {
    private bool valField;
    [XmlAttributeAttribute]
public int val { get; public set; }
    public int get_val();
    public void set_val(int value);
    public static CT_Boolean Parse(XmlNode node, XmlNamespaceManager namespaceManager);
    internal void Write(StreamWriter sw, string nodeName);
}
[DesignerCategoryAttribute("code")]
[XmlTypeAttribute]
[XmlRootAttribute]
public class NPOI.OpenXmlFormats.Dml.Chart.CT_BubbleChart : object {
    private CT_Boolean varyColorsField;
    private List`1<CT_BubbleSer> serField;
    private CT_DLbls dLblsField;
    private CT_Boolean bubble3DField;
    private CT_BubbleScale bubbleScaleField;
    private CT_Boolean showNegBubblesField;
    private CT_SizeRepresents sizeRepresentsField;
    private List`1<CT_UnsignedInt> axIdField;
    private List`1<CT_Extension> extLstField;
    [XmlElementAttribute]
public CT_Boolean varyColors { get; public set; }
    [XmlElementAttribute("ser")]
public List`1<CT_BubbleSer> ser { get; public set; }
    [XmlElementAttribute]
public CT_DLbls dLbls { get; public set; }
    [XmlElementAttribute]
public CT_Boolean bubble3D { get; public set; }
    [XmlElementAttribute]
public CT_BubbleScale bubbleScale { get; public set; }
    [XmlElementAttribute]
public CT_Boolean showNegBubbles { get; public set; }
    [XmlElementAttribute]
public CT_SizeRepresents sizeRepresents { get; public set; }
    [XmlElementAttribute("axId")]
public List`1<CT_UnsignedInt> axId { get; public set; }
    [XmlElementAttribute]
public List`1<CT_Extension> extLst { get; public set; }
    public static CT_BubbleChart Parse(XmlNode node, XmlNamespaceManager namespaceManager);
    internal void Write(StreamWriter sw, string nodeName);
    public int GetSeriesCount();
    public CT_Boolean get_varyColors();
    public void set_varyColors(CT_Boolean value);
    public List`1<CT_BubbleSer> get_ser();
    public void set_ser(List`1<CT_BubbleSer> value);
    public CT_DLbls get_dLbls();
    public void set_dLbls(CT_DLbls value);
    public CT_Boolean get_bubble3D();
    public void set_bubble3D(CT_Boolean value);
    public CT_BubbleScale get_bubbleScale();
    public void set_bubbleScale(CT_BubbleScale value);
    public CT_Boolean get_showNegBubbles();
    public void set_showNegBubbles(CT_Boolean value);
    public CT_SizeRepresents get_sizeRepresents();
    public void set_sizeRepresents(CT_SizeRepresents value);
    public List`1<CT_UnsignedInt> get_axId();
    public void set_axId(List`1<CT_UnsignedInt> value);
    public List`1<CT_Extension> get_extLst();
    public void set_extLst(List`1<CT_Extension> value);
}
[DesignerCategoryAttribute("code")]
[XmlTypeAttribute]
[XmlRootAttribute]
public class NPOI.OpenXmlFormats.Dml.Chart.CT_BubbleScale : object {
    private UInt32 valField;
    [XmlAttributeAttribute]
[DefaultValueAttribute("System.UInt32", "100")]
public UInt32 val { get; public set; }
    public static CT_BubbleScale Parse(XmlNode node, XmlNamespaceManager namespaceManager);
    internal void Write(StreamWriter sw, string nodeName);
    public UInt32 get_val();
    public void set_val(UInt32 value);
}
[DesignerCategoryAttribute("code")]
[XmlTypeAttribute]
[XmlRootAttribute]
public class NPOI.OpenXmlFormats.Dml.Chart.CT_BubbleSer : object {
    private CT_UnsignedInt idxField;
    private CT_UnsignedInt orderField;
    private CT_SerTx txField;
    private CT_ShapeProperties spPrField;
    private CT_Boolean invertIfNegativeField;
    private List`1<CT_DPt> dPtField;
    private CT_DLbls dLblsField;
    private List`1<CT_Trendline> trendlineField;
    private List`1<CT_ErrBars> errBarsField;
    private CT_AxDataSource xValField;
    private CT_NumDataSource yValField;
    private CT_NumDataSource bubbleSizeField;
    private CT_Boolean bubble3DField;
    private List`1<CT_Extension> extLstField;
    [XmlElementAttribute]
public CT_UnsignedInt idx { get; public set; }
    [XmlElementAttribute]
public CT_UnsignedInt order { get; public set; }
    [XmlElementAttribute]
public CT_SerTx tx { get; public set; }
    [XmlElementAttribute]
public CT_ShapeProperties spPr { get; public set; }
    [XmlElementAttribute]
public CT_Boolean invertIfNegative { get; public set; }
    [XmlElementAttribute("dPt")]
public List`1<CT_DPt> dPt { get; public set; }
    [XmlElementAttribute]
public CT_DLbls dLbls { get; public set; }
    [XmlElementAttribute("trendline")]
public List`1<CT_Trendline> trendline { get; public set; }
    [XmlElementAttribute("errBars")]
public List`1<CT_ErrBars> errBars { get; public set; }
    [XmlElementAttribute]
public CT_AxDataSource xVal { get; public set; }
    [XmlElementAttribute]
public CT_NumDataSource yVal { get; public set; }
    [XmlElementAttribute]
public CT_NumDataSource bubbleSize { get; public set; }
    [XmlElementAttribute]
public CT_Boolean bubble3D { get; public set; }
    [XmlElementAttribute]
public List`1<CT_Extension> extLst { get; public set; }
    public static CT_BubbleSer Parse(XmlNode node, XmlNamespaceManager namespaceManager);
    internal void Write(StreamWriter sw, string nodeName);
    public CT_UnsignedInt get_idx();
    public void set_idx(CT_UnsignedInt value);
    public CT_UnsignedInt get_order();
    public void set_order(CT_UnsignedInt value);
    public CT_SerTx get_tx();
    public void set_tx(CT_SerTx value);
    public CT_ShapeProperties get_spPr();
    public void set_spPr(CT_ShapeProperties value);
    public CT_Boolean get_invertIfNegative();
    public void set_invertIfNegative(CT_Boolean value);
    public List`1<CT_DPt> get_dPt();
    public void set_dPt(List`1<CT_DPt> value);
    public CT_DLbls get_dLbls();
    public void set_dLbls(CT_DLbls value);
    public List`1<CT_Trendline> get_trendline();
    public void set_trendline(List`1<CT_Trendline> value);
    public List`1<CT_ErrBars> get_errBars();
    public void set_errBars(List`1<CT_ErrBars> value);
    public CT_AxDataSource get_xVal();
    public void set_xVal(CT_AxDataSource value);
    public CT_NumDataSource get_yVal();
    public void set_yVal(CT_NumDataSource value);
    public CT_NumDataSource get_bubbleSize();
    public void set_bubbleSize(CT_NumDataSource value);
    public CT_Boolean get_bubble3D();
    public void set_bubble3D(CT_Boolean value);
    public List`1<CT_Extension> get_extLst();
    public void set_extLst(List`1<CT_Extension> value);
}
[DesignerCategoryAttribute("code")]
[XmlTypeAttribute]
[XmlRootAttribute]
public class NPOI.OpenXmlFormats.Dml.Chart.CT_BuiltInUnit : object {
    private ST_BuiltInUnit valField;
    [XmlAttributeAttribute]
[DefaultValueAttribute("Mono.Cecil.CustomAttributeArgument")]
public ST_BuiltInUnit val { get; public set; }
    public ST_BuiltInUnit get_val();
    public void set_val(ST_BuiltInUnit value);
}
[DesignerCategoryAttribute("code")]
[XmlTypeAttribute]
[XmlRootAttribute]
public class NPOI.OpenXmlFormats.Dml.Chart.CT_CatAx : object {
    private CT_UnsignedInt axIdField;
    private CT_Scaling scalingField;
    private CT_Boolean deleteField;
    private CT_AxPos axPosField;
    private CT_ChartLines majorGridlinesField;
    private CT_ChartLines minorGridlinesField;
    private CT_Title titleField;
    private CT_NumFmt numFmtField;
    private CT_TickMark majorTickMarkField;
    private CT_TickMark minorTickMarkField;
    private CT_TickLblPos tickLblPosField;
    private CT_ShapeProperties spPrField;
    private CT_TextBody txPrField;
    private CT_UnsignedInt crossAxField;
    private CT_Boolean autoField;
    private CT_LblAlgn lblAlgnField;
    private CT_LblOffset lblOffsetField;
    private CT_Skip tickLblSkipField;
    private CT_Skip tickMarkSkipField;
    private CT_Boolean noMultiLvlLblField;
    private List`1<CT_Extension> extLstField;
    private CT_Double crossesAtField;
    private CT_Crosses crossesField;
    [XmlElementAttribute]
public CT_UnsignedInt axId { get; public set; }
    [XmlElementAttribute]
public CT_Scaling scaling { get; public set; }
    [XmlElementAttribute]
public CT_Boolean delete { get; public set; }
    [XmlElementAttribute]
public CT_AxPos axPos { get; public set; }
    [XmlElementAttribute]
public CT_ChartLines majorGridlines { get; public set; }
    [XmlElementAttribute]
public CT_ChartLines minorGridlines { get; public set; }
    [XmlElementAttribute]
public CT_Title title { get; public set; }
    [XmlElementAttribute]
public CT_NumFmt numFmt { get; public set; }
    [XmlElementAttribute]
public CT_TickMark majorTickMark { get; public set; }
    [XmlElementAttribute]
public CT_TickMark minorTickMark { get; public set; }
    [XmlElementAttribute]
public CT_TickLblPos tickLblPos { get; public set; }
    [XmlElementAttribute]
public CT_ShapeProperties spPr { get; public set; }
    [XmlElementAttribute]
public CT_TextBody txPr { get; public set; }
    [XmlElementAttribute]
public CT_UnsignedInt crossAx { get; public set; }
    [XmlElementAttribute]
public CT_Double crossesAt { get; public set; }
    [XmlElementAttribute]
public CT_Crosses crosses { get; public set; }
    [XmlElementAttribute]
public CT_Boolean auto { get; public set; }
    [XmlElementAttribute]
public CT_LblAlgn lblAlgn { get; public set; }
    [XmlElementAttribute]
public CT_LblOffset lblOffset { get; public set; }
    [XmlElementAttribute]
public CT_Skip tickLblSkip { get; public set; }
    [XmlElementAttribute]
public CT_Skip tickMarkSkip { get; public set; }
    [XmlElementAttribute]
public CT_Boolean noMultiLvlLbl { get; public set; }
    [XmlElementAttribute]
public List`1<CT_Extension> extLst { get; public set; }
    public static CT_CatAx Parse(XmlNode node, XmlNamespaceManager namespaceManager);
    internal void Write(StreamWriter sw, string nodeName);
    public CT_UnsignedInt get_axId();
    public void set_axId(CT_UnsignedInt value);
    public CT_Scaling get_scaling();
    public void set_scaling(CT_Scaling value);
    public CT_Boolean get_delete();
    public void set_delete(CT_Boolean value);
    public CT_AxPos get_axPos();
    public void set_axPos(CT_AxPos value);
    public CT_ChartLines get_majorGridlines();
    public void set_majorGridlines(CT_ChartLines value);
    public CT_ChartLines get_minorGridlines();
    public void set_minorGridlines(CT_ChartLines value);
    public CT_Title get_title();
    public void set_title(CT_Title value);
    public CT_NumFmt get_numFmt();
    public void set_numFmt(CT_NumFmt value);
    public CT_TickMark get_majorTickMark();
    public void set_majorTickMark(CT_TickMark value);
    public CT_TickMark get_minorTickMark();
    public void set_minorTickMark(CT_TickMark value);
    public CT_TickLblPos get_tickLblPos();
    public void set_tickLblPos(CT_TickLblPos value);
    public CT_ShapeProperties get_spPr();
    public void set_spPr(CT_ShapeProperties value);
    public CT_TextBody get_txPr();
    public void set_txPr(CT_TextBody value);
    public CT_UnsignedInt get_crossAx();
    public void set_crossAx(CT_UnsignedInt value);
    public CT_Double get_crossesAt();
    public void set_crossesAt(CT_Double value);
    public CT_Crosses get_crosses();
    public void set_crosses(CT_Crosses value);
    public CT_Boolean get_auto();
    public void set_auto(CT_Boolean value);
    public CT_LblAlgn get_lblAlgn();
    public void set_lblAlgn(CT_LblAlgn value);
    public CT_LblOffset get_lblOffset();
    public void set_lblOffset(CT_LblOffset value);
    public CT_Skip get_tickLblSkip();
    public void set_tickLblSkip(CT_Skip value);
    public CT_Skip get_tickMarkSkip();
    public void set_tickMarkSkip(CT_Skip value);
    public CT_Boolean get_noMultiLvlLbl();
    public void set_noMultiLvlLbl(CT_Boolean value);
    public List`1<CT_Extension> get_extLst();
    public void set_extLst(List`1<CT_Extension> value);
    public CT_NumFmt AddNewNumFmt();
    public bool IsSetNumFmt();
    public CT_UnsignedInt AddNewAxId();
    public CT_AxPos AddNewAxPos();
    public CT_Scaling AddNewScaling();
    public CT_Crosses AddNewCrosses();
    public CT_UnsignedInt AddNewCrossAx();
    public CT_TickLblPos AddNewTickLblPos();
    public CT_Boolean AddNewDelete();
    public CT_TickMark AddNewMajorTickMark();
    public CT_ChartLines AddNewMajorGridlines();
    public CT_ChartLines AddNewMinorGridlines();
    public CT_TickMark AddNewMinorTickMark();
}
[DesignerCategoryAttribute("code")]
[XmlTypeAttribute]
[XmlRootAttribute]
public class NPOI.OpenXmlFormats.Dml.Chart.CT_Chart : object {
    private CT_Title titleField;
    private CT_Boolean autoTitleDeletedField;
    private CT_PivotFmts pivotFmtsField;
    private CT_View3D view3DField;
    private CT_Surface floorField;
    private CT_Surface sideWallField;
    private CT_Surface backWallField;
    private CT_PlotArea plotAreaField;
    private CT_Legend legendField;
    private CT_Boolean plotVisOnlyField;
    private CT_DispBlanksAs dispBlanksAsField;
    private CT_Boolean showDLblsOverMaxField;
    private List`1<CT_Extension> extLstField;
    [XmlElementAttribute]
public CT_Title title { get; public set; }
    [XmlElementAttribute]
public CT_Boolean autoTitleDeleted { get; public set; }
    [XmlElementAttribute]
public CT_PivotFmts pivotFmts { get; public set; }
    [XmlElementAttribute]
public CT_View3D view3D { get; public set; }
    [XmlElementAttribute]
public CT_Surface floor { get; public set; }
    [XmlElementAttribute]
public CT_Surface sideWall { get; public set; }
    [XmlElementAttribute]
public CT_Surface backWall { get; public set; }
    [XmlElementAttribute]
public CT_PlotArea plotArea { get; public set; }
    [XmlElementAttribute]
public CT_Legend legend { get; public set; }
    [XmlElementAttribute]
public CT_Boolean plotVisOnly { get; public set; }
    [XmlElementAttribute]
public CT_DispBlanksAs dispBlanksAs { get; public set; }
    [XmlElementAttribute]
public CT_Boolean showDLblsOverMax { get; public set; }
    [XmlElementAttribute]
public List`1<CT_Extension> extLst { get; public set; }
    public static CT_Chart Parse(XmlNode node, XmlNamespaceManager namespaceManager);
    internal void Write(StreamWriter sw, string nodeName);
    public CT_Boolean AddNewPlotVisOnly();
    public CT_PlotArea AddNewPlotArea();
    public bool IsSetTitle();
    public bool IsSetLegend();
    public void unsetLegend();
    public CT_Legend AddNewLegend();
    public CT_Title AddNewTitle();
    public CT_Title get_title();
    public void set_title(CT_Title value);
    public CT_Boolean get_autoTitleDeleted();
    public void set_autoTitleDeleted(CT_Boolean value);
    public CT_PivotFmts get_pivotFmts();
    public void set_pivotFmts(CT_PivotFmts value);
    public CT_View3D get_view3D();
    public void set_view3D(CT_View3D value);
    public CT_Surface get_floor();
    public void set_floor(CT_Surface value);
    public CT_Surface get_sideWall();
    public void set_sideWall(CT_Surface value);
    public CT_Surface get_backWall();
    public void set_backWall(CT_Surface value);
    public CT_PlotArea get_plotArea();
    public void set_plotArea(CT_PlotArea value);
    public CT_Legend get_legend();
    public void set_legend(CT_Legend value);
    public CT_Boolean get_plotVisOnly();
    public void set_plotVisOnly(CT_Boolean value);
    public CT_DispBlanksAs get_dispBlanksAs();
    public void set_dispBlanksAs(CT_DispBlanksAs value);
    public CT_Boolean get_showDLblsOverMax();
    public void set_showDLblsOverMax(CT_Boolean value);
    public List`1<CT_Extension> get_extLst();
    public void set_extLst(List`1<CT_Extension> value);
}
[DesignerCategoryAttribute("code")]
[XmlTypeAttribute]
[XmlRootAttribute]
public class NPOI.OpenXmlFormats.Dml.Chart.CT_ChartLines : object {
    private CT_ShapeProperties spPrField;
    [XmlElementAttribute]
public CT_ShapeProperties spPr { get; public set; }
    public static CT_ChartLines Parse(XmlNode node, XmlNamespaceManager namespaceManager);
    internal void Write(StreamWriter sw, string nodeName);
    public CT_ShapeProperties get_spPr();
    public void set_spPr(CT_ShapeProperties value);
}
[DesignerCategoryAttribute("code")]
[XmlTypeAttribute]
[XmlRootAttribute("chartSpace")]
public class NPOI.OpenXmlFormats.Dml.Chart.CT_ChartSpace : object {
    private CT_Boolean date1904Field;
    private CT_TextLanguageID langField;
    private CT_Boolean roundedCornersField;
    private CT_Style styleField;
    private CT_ColorMapping clrMapOvrField;
    private CT_PivotSource pivotSourceField;
    private CT_Protection protectionField;
    private CT_Chart chartField;
    private CT_ShapeProperties spPrField;
    private CT_TextBody txPrField;
    private CT_ExternalData externalDataField;
    private CT_PrintSettings printSettingsField;
    private CT_RelId userShapesField;
    private List`1<CT_Extension> extLstField;
    private CT_AlternateContent alternateContentField;
    [XmlElementAttribute]
public CT_Boolean date1904 { get; public set; }
    [XmlElementAttribute]
public CT_TextLanguageID lang { get; public set; }
    [XmlElementAttribute]
public CT_Boolean roundedCorners { get; public set; }
    public CT_AlternateContent alternateContent { get; public set; }
    [XmlElementAttribute]
public CT_Style style { get; public set; }
    [XmlElementAttribute]
public CT_ColorMapping clrMapOvr { get; public set; }
    [XmlElementAttribute]
public CT_PivotSource pivotSource { get; public set; }
    [XmlElementAttribute]
public CT_Protection protection { get; public set; }
    [XmlElementAttribute]
public CT_Chart chart { get; public set; }
    [XmlElementAttribute]
public CT_ShapeProperties spPr { get; public set; }
    [XmlElementAttribute]
public CT_TextBody txPr { get; public set; }
    [XmlElementAttribute]
public CT_ExternalData externalData { get; public set; }
    [XmlElementAttribute]
public CT_PrintSettings printSettings { get; public set; }
    [XmlElementAttribute]
public CT_RelId userShapes { get; public set; }
    [XmlArrayAttribute]
[XmlArrayItemAttribute("ext")]
public List`1<CT_Extension> extLst { get; public set; }
    public static CT_ChartSpace Parse(XmlNode node, XmlNamespaceManager namespaceManager);
    internal void Write(Stream stream);
    public CT_Chart AddNewChart();
    public CT_PrintSettings AddNewPrintSettings();
    public CT_Boolean get_date1904();
    public void set_date1904(CT_Boolean value);
    public CT_TextLanguageID get_lang();
    public void set_lang(CT_TextLanguageID value);
    public CT_Boolean get_roundedCorners();
    public void set_roundedCorners(CT_Boolean value);
    public CT_AlternateContent get_alternateContent();
    public void set_alternateContent(CT_AlternateContent value);
    public CT_Style get_style();
    public void set_style(CT_Style value);
    public CT_ColorMapping get_clrMapOvr();
    public void set_clrMapOvr(CT_ColorMapping value);
    public CT_PivotSource get_pivotSource();
    public void set_pivotSource(CT_PivotSource value);
    public CT_Protection get_protection();
    public void set_protection(CT_Protection value);
    public CT_Chart get_chart();
    public void set_chart(CT_Chart value);
    public CT_ShapeProperties get_spPr();
    public void set_spPr(CT_ShapeProperties value);
    public CT_TextBody get_txPr();
    public void set_txPr(CT_TextBody value);
    public CT_ExternalData get_externalData();
    public void set_externalData(CT_ExternalData value);
    public CT_PrintSettings get_printSettings();
    public void set_printSettings(CT_PrintSettings value);
    public CT_RelId get_userShapes();
    public void set_userShapes(CT_RelId value);
    public List`1<CT_Extension> get_extLst();
    public void set_extLst(List`1<CT_Extension> value);
}
[DesignerCategoryAttribute("code")]
[XmlTypeAttribute]
[XmlRootAttribute]
public class NPOI.OpenXmlFormats.Dml.Chart.CT_CrossBetween : object {
    private ST_CrossBetween valField;
    [XmlAttributeAttribute]
public ST_CrossBetween val { get; public set; }
    public static CT_CrossBetween Parse(XmlNode node, XmlNamespaceManager namespaceManager);
    internal void Write(StreamWriter sw, string nodeName);
    public ST_CrossBetween get_val();
    public void set_val(ST_CrossBetween value);
}
[DesignerCategoryAttribute("code")]
[XmlTypeAttribute]
[XmlRootAttribute]
public class NPOI.OpenXmlFormats.Dml.Chart.CT_Crosses : object {
    private ST_Crosses valField;
    [XmlAttributeAttribute]
public ST_Crosses val { get; public set; }
    public static CT_Crosses Parse(XmlNode node, XmlNamespaceManager namespaceManager);
    internal void Write(StreamWriter sw, string nodeName);
    public ST_Crosses get_val();
    public void set_val(ST_Crosses value);
}
[DesignerCategoryAttribute("code")]
[XmlTypeAttribute]
[XmlRootAttribute]
public class NPOI.OpenXmlFormats.Dml.Chart.CT_CustSplit : object {
    private List`1<CT_UnsignedInt> secondPiePtField;
    [XmlElementAttribute("secondPiePt")]
public List`1<CT_UnsignedInt> secondPiePt { get; public set; }
    public List`1<CT_UnsignedInt> get_secondPiePt();
    public void set_secondPiePt(List`1<CT_UnsignedInt> value);
}
[DesignerCategoryAttribute("code")]
[XmlTypeAttribute]
[XmlRootAttribute]
public class NPOI.OpenXmlFormats.Dml.Chart.CT_DateAx : object {
    private CT_UnsignedInt axIdField;
    private CT_Scaling scalingField;
    private CT_Boolean deleteField;
    private CT_AxPos axPosField;
    private CT_ChartLines majorGridlinesField;
    private CT_ChartLines minorGridlinesField;
    private CT_Title titleField;
    private CT_NumFmt numFmtField;
    private CT_TickMark majorTickMarkField;
    private CT_TickMark minorTickMarkField;
    private CT_TickLblPos tickLblPosField;
    private CT_ShapeProperties spPrField;
    private CT_TextBody txPrField;
    private CT_UnsignedInt crossAxField;
    private CT_Boolean autoField;
    private CT_LblOffset lblOffsetField;
    private CT_TimeUnit baseTimeUnitField;
    private CT_AxisUnit majorUnitField;
    private CT_TimeUnit majorTimeUnitField;
    private CT_AxisUnit minorUnitField;
    private CT_TimeUnit minorTimeUnitField;
    private List`1<CT_Extension> extLstField;
    private CT_Double crossesAtField;
    private CT_Crosses crossesField;
    [XmlElementAttribute]
public CT_UnsignedInt axId { get; public set; }
    [XmlElementAttribute]
public CT_Scaling scaling { get; public set; }
    [XmlElementAttribute]
public CT_Boolean delete { get; public set; }
    [XmlElementAttribute]
public CT_AxPos axPos { get; public set; }
    [XmlElementAttribute]
public CT_ChartLines majorGridlines { get; public set; }
    [XmlElementAttribute]
public CT_ChartLines minorGridlines { get; public set; }
    [XmlElementAttribute]
public CT_Title title { get; public set; }
    [XmlElementAttribute]
public CT_NumFmt numFmt { get; public set; }
    [XmlElementAttribute]
public CT_TickMark majorTickMark { get; public set; }
    [XmlElementAttribute]
public CT_TickMark minorTickMark { get; public set; }
    [XmlElementAttribute]
public CT_TickLblPos tickLblPos { get; public set; }
    [XmlElementAttribute]
public CT_ShapeProperties spPr { get; public set; }
    [XmlElementAttribute]
public CT_TextBody txPr { get; public set; }
    [XmlElementAttribute]
public CT_UnsignedInt crossAx { get; public set; }
    [XmlElementAttribute]
public CT_Double crossesAt { get; public set; }
    [XmlElementAttribute]
public CT_Crosses crosses { get; public set; }
    [XmlElementAttribute]
public CT_Boolean auto { get; public set; }
    [XmlElementAttribute]
public CT_LblOffset lblOffset { get; public set; }
    [XmlElementAttribute]
public CT_TimeUnit baseTimeUnit { get; public set; }
    [XmlElementAttribute]
public CT_AxisUnit majorUnit { get; public set; }
    [XmlElementAttribute]
public CT_TimeUnit majorTimeUnit { get; public set; }
    [XmlElementAttribute]
public CT_AxisUnit minorUnit { get; public set; }
    [XmlElementAttribute]
public CT_TimeUnit minorTimeUnit { get; public set; }
    [XmlElementAttribute]
public List`1<CT_Extension> extLst { get; public set; }
    public static CT_DateAx Parse(XmlNode node, XmlNamespaceManager namespaceManager);
    internal void Write(StreamWriter sw, string nodeName);
    public CT_UnsignedInt get_axId();
    public void set_axId(CT_UnsignedInt value);
    public CT_Scaling get_scaling();
    public void set_scaling(CT_Scaling value);
    public CT_Boolean get_delete();
    public void set_delete(CT_Boolean value);
    public CT_AxPos get_axPos();
    public void set_axPos(CT_AxPos value);
    public CT_ChartLines get_majorGridlines();
    public void set_majorGridlines(CT_ChartLines value);
    public CT_ChartLines get_minorGridlines();
    public void set_minorGridlines(CT_ChartLines value);
    public CT_Title get_title();
    public void set_title(CT_Title value);
    public CT_NumFmt get_numFmt();
    public void set_numFmt(CT_NumFmt value);
    public CT_TickMark get_majorTickMark();
    public void set_majorTickMark(CT_TickMark value);
    public CT_TickMark get_minorTickMark();
    public void set_minorTickMark(CT_TickMark value);
    public CT_TickLblPos get_tickLblPos();
    public void set_tickLblPos(CT_TickLblPos value);
    public CT_ShapeProperties get_spPr();
    public void set_spPr(CT_ShapeProperties value);
    public CT_TextBody get_txPr();
    public void set_txPr(CT_TextBody value);
    public CT_UnsignedInt get_crossAx();
    public void set_crossAx(CT_UnsignedInt value);
    public CT_Double get_crossesAt();
    public void set_crossesAt(CT_Double value);
    public CT_Crosses get_crosses();
    public void set_crosses(CT_Crosses value);
    public CT_Boolean get_auto();
    public void set_auto(CT_Boolean value);
    public CT_LblOffset get_lblOffset();
    public void set_lblOffset(CT_LblOffset value);
    public CT_TimeUnit get_baseTimeUnit();
    public void set_baseTimeUnit(CT_TimeUnit value);
    public CT_AxisUnit get_majorUnit();
    public void set_majorUnit(CT_AxisUnit value);
    public CT_TimeUnit get_majorTimeUnit();
    public void set_majorTimeUnit(CT_TimeUnit value);
    public CT_AxisUnit get_minorUnit();
    public void set_minorUnit(CT_AxisUnit value);
    public CT_TimeUnit get_minorTimeUnit();
    public void set_minorTimeUnit(CT_TimeUnit value);
    public List`1<CT_Extension> get_extLst();
    public void set_extLst(List`1<CT_Extension> value);
    public CT_NumFmt AddNewNumFmt();
    public bool IsSetNumFmt();
    public CT_UnsignedInt AddNewAxId();
    public CT_AxPos AddNewAxPos();
    public CT_Scaling AddNewScaling();
    public CT_Crosses AddNewCrosses();
    public CT_UnsignedInt AddNewCrossAx();
    public CT_TickLblPos AddNewTickLblPos();
    public CT_Boolean AddNewDelete();
    public CT_TickMark AddNewMajorTickMark();
    public CT_TickMark AddNewMinorTickMark();
}
[DesignerCategoryAttribute("code")]
[XmlTypeAttribute]
[XmlRootAttribute]
public class NPOI.OpenXmlFormats.Dml.Chart.CT_DepthPercent : object {
    private ushort valField;
    [XmlAttributeAttribute]
[DefaultValueAttribute("System.UInt16", "100")]
public ushort val { get; public set; }
    public ushort get_val();
    public void set_val(ushort value);
    public static CT_DepthPercent Parse(XmlNode node, XmlNamespaceManager namespaceManager);
    internal void Write(StreamWriter sw, string nodeName);
}
[DesignerCategoryAttribute("code")]
[XmlTypeAttribute]
[XmlRootAttribute]
public class NPOI.OpenXmlFormats.Dml.Chart.CT_DispBlanksAs : object {
    private ST_DispBlanksAs valField;
    [XmlAttributeAttribute]
[DefaultValueAttribute("Mono.Cecil.CustomAttributeArgument")]
public ST_DispBlanksAs val { get; public set; }
    public static CT_DispBlanksAs Parse(XmlNode node, XmlNamespaceManager namespaceManager);
    internal void Write(StreamWriter sw, string nodeName);
    public ST_DispBlanksAs get_val();
    public void set_val(ST_DispBlanksAs value);
}
[DesignerCategoryAttribute("code")]
[XmlTypeAttribute]
[XmlRootAttribute]
public class NPOI.OpenXmlFormats.Dml.Chart.CT_DispUnits : object {
    private CT_DispUnitsLbl dispUnitsLblField;
    private List`1<CT_Extension> extLstField;
    private CT_BuiltInUnit builtInUnitField;
    private CT_Double custUnitField;
    public CT_BuiltInUnit builtInUnit { get; public set; }
    [XmlElementAttribute]
public CT_Double custUnit { get; public set; }
    [XmlElementAttribute]
public CT_DispUnitsLbl dispUnitsLbl { get; public set; }
    [XmlElementAttribute]
public List`1<CT_Extension> extLst { get; public set; }
    public CT_BuiltInUnit get_builtInUnit();
    public void set_builtInUnit(CT_BuiltInUnit value);
    public CT_Double get_custUnit();
    public void set_custUnit(CT_Double value);
    public CT_DispUnitsLbl get_dispUnitsLbl();
    public void set_dispUnitsLbl(CT_DispUnitsLbl value);
    public List`1<CT_Extension> get_extLst();
    public void set_extLst(List`1<CT_Extension> value);
    internal static CT_DispUnits Parse(XmlNode childNode, XmlNamespaceManager namespaceManager);
    internal void Write(StreamWriter sw, string p);
}
[DesignerCategoryAttribute("code")]
[XmlTypeAttribute]
[XmlRootAttribute]
public class NPOI.OpenXmlFormats.Dml.Chart.CT_DispUnitsLbl : object {
    private CT_Layout layoutField;
    private CT_Tx txField;
    private CT_ShapeProperties spPrField;
    private CT_TextBody txPrField;
    [XmlElementAttribute]
public CT_Layout layout { get; public set; }
    [XmlElementAttribute]
public CT_Tx tx { get; public set; }
    [XmlElementAttribute]
public CT_ShapeProperties spPr { get; public set; }
    [XmlElementAttribute]
public CT_TextBody txPr { get; public set; }
    public static CT_DispUnitsLbl Parse(XmlNode node, XmlNamespaceManager namespaceManager);
    internal void Write(StreamWriter sw, string nodeName);
    public CT_Layout get_layout();
    public void set_layout(CT_Layout value);
    public CT_Tx get_tx();
    public void set_tx(CT_Tx value);
    public CT_ShapeProperties get_spPr();
    public void set_spPr(CT_ShapeProperties value);
    public CT_TextBody get_txPr();
    public void set_txPr(CT_TextBody value);
}
[DesignerCategoryAttribute("code")]
[XmlTypeAttribute]
[XmlRootAttribute]
public class NPOI.OpenXmlFormats.Dml.Chart.CT_DLbl : object {
    private CT_UnsignedInt idxField;
    private string separatorField;
    private CT_NumFmt numFmtField;
    private CT_Boolean showBubbleSizeField;
    private CT_Boolean showCatNameField;
    private CT_Boolean showLegendKeyField;
    private CT_Boolean showPercentField;
    private CT_Boolean showSerNameField;
    private CT_Boolean showValField;
    private CT_Boolean deleteField;
    private CT_DLblPos dLblPosField;
    private CT_Layout layoutField;
    private List`1<CT_Extension> extLstField;
    private CT_ShapeProperties spPrField;
    private CT_TextBody txPrField;
    [XmlElementAttribute]
public CT_UnsignedInt idx { get; public set; }
    [XmlElementAttribute]
public CT_Layout layout { get; public set; }
    [XmlElementAttribute]
public CT_DLblPos dLblPos { get; public set; }
    [XmlElementAttribute]
public CT_NumFmt numFmt { get; public set; }
    [XmlElementAttribute]
public CT_ShapeProperties spPr { get; public set; }
    [XmlElementAttribute]
public CT_TextBody txPr { get; public set; }
    [XmlElementAttribute]
public CT_Boolean delete { get; public set; }
    [XmlElementAttribute]
public CT_Boolean showBubbleSize { get; public set; }
    [XmlElementAttribute]
public CT_Boolean showCatName { get; public set; }
    [XmlElementAttribute]
public CT_Boolean showLegendKey { get; public set; }
    [XmlElementAttribute]
public CT_Boolean showPercent { get; public set; }
    [XmlElementAttribute]
public CT_Boolean showSerName { get; public set; }
    [XmlElementAttribute]
public CT_Boolean showVal { get; public set; }
    [XmlElementAttribute]
public string separator { get; public set; }
    [XmlElementAttribute]
public List`1<CT_Extension> extLst { get; public set; }
    public static CT_DLbl Parse(XmlNode node, XmlNamespaceManager namespaceManager);
    internal void Write(StreamWriter sw, string nodeName);
    public CT_UnsignedInt get_idx();
    public void set_idx(CT_UnsignedInt value);
    public CT_Layout get_layout();
    public void set_layout(CT_Layout value);
    public CT_DLblPos get_dLblPos();
    public void set_dLblPos(CT_DLblPos value);
    public CT_NumFmt get_numFmt();
    public void set_numFmt(CT_NumFmt value);
    public CT_ShapeProperties get_spPr();
    public void set_spPr(CT_ShapeProperties value);
    public CT_TextBody get_txPr();
    public void set_txPr(CT_TextBody value);
    public CT_Boolean get_delete();
    public void set_delete(CT_Boolean value);
    public CT_Boolean get_showBubbleSize();
    public void set_showBubbleSize(CT_Boolean value);
    public CT_Boolean get_showCatName();
    public void set_showCatName(CT_Boolean value);
    public CT_Boolean get_showLegendKey();
    public void set_showLegendKey(CT_Boolean value);
    public CT_Boolean get_showPercent();
    public void set_showPercent(CT_Boolean value);
    public CT_Boolean get_showSerName();
    public void set_showSerName(CT_Boolean value);
    public CT_Boolean get_showVal();
    public void set_showVal(CT_Boolean value);
    public string get_separator();
    public void set_separator(string value);
    public List`1<CT_Extension> get_extLst();
    public void set_extLst(List`1<CT_Extension> value);
}
[DesignerCategoryAttribute("code")]
[XmlTypeAttribute]
[XmlRootAttribute]
public class NPOI.OpenXmlFormats.Dml.Chart.CT_DLblPos : object {
    private ST_DLblPos valField;
    [XmlAttributeAttribute]
public ST_DLblPos val { get; public set; }
    public ST_DLblPos get_val();
    public void set_val(ST_DLblPos value);
    public static CT_DLblPos Parse(XmlNode node, XmlNamespaceManager namespaceManager);
    internal void Write(StreamWriter sw, string nodeName);
}
[DesignerCategoryAttribute("code")]
[XmlTypeAttribute]
[XmlRootAttribute]
public class NPOI.OpenXmlFormats.Dml.Chart.CT_DLbls : object {
    private List`1<CT_DLbl> dLblField;
    private string separatorField;
    private CT_NumFmt numFmtField;
    private CT_Boolean showBubbleSizeField;
    private CT_Boolean showCatNameField;
    private CT_Boolean showLeaderLinesField;
    private CT_Boolean showLegendKeyField;
    private CT_Boolean showPercentField;
    private CT_Boolean showSerNameField;
    private CT_Boolean showValField;
    private CT_Boolean deleteField;
    private CT_DLblPos dLblPosField;
    private List`1<CT_Extension> extLstField;
    private CT_ShapeProperties spPrField;
    private CT_TextBody txPrField;
    [XmlElementAttribute("dLbl")]
public List`1<CT_DLbl> dLbl { get; public set; }
    [XmlElementAttribute]
public CT_DLblPos dLblPos { get; public set; }
    [XmlElementAttribute]
public CT_NumFmt numFmt { get; public set; }
    [XmlElementAttribute]
public CT_ShapeProperties spPr { get; public set; }
    [XmlElementAttribute]
public CT_TextBody txPr { get; public set; }
    [XmlElementAttribute]
public CT_Boolean showBubbleSize { get; public set; }
    [XmlElementAttribute]
public CT_Boolean showCatName { get; public set; }
    [XmlElementAttribute]
public CT_Boolean showLegendKey { get; public set; }
    [XmlElementAttribute]
public CT_Boolean showPercent { get; public set; }
    [XmlElementAttribute]
public CT_Boolean showSerName { get; public set; }
    [XmlElementAttribute]
public CT_Boolean showVal { get; public set; }
    [XmlElementAttribute]
public CT_Boolean delete { get; public set; }
    [XmlElementAttribute]
public string separator { get; public set; }
    [XmlElementAttribute]
public CT_Boolean showLeaderLines { get; public set; }
    [XmlElementAttribute]
public List`1<CT_Extension> extLst { get; public set; }
    public static CT_DLbls Parse(XmlNode node, XmlNamespaceManager namespaceManager);
    internal void Write(StreamWriter sw, string nodeName);
    public List`1<CT_DLbl> get_dLbl();
    public void set_dLbl(List`1<CT_DLbl> value);
    public CT_DLblPos get_dLblPos();
    public void set_dLblPos(CT_DLblPos value);
    public CT_NumFmt get_numFmt();
    public void set_numFmt(CT_NumFmt value);
    public CT_ShapeProperties get_spPr();
    public void set_spPr(CT_ShapeProperties value);
    public CT_TextBody get_txPr();
    public void set_txPr(CT_TextBody value);
    public CT_Boolean get_showBubbleSize();
    public void set_showBubbleSize(CT_Boolean value);
    public CT_Boolean get_showCatName();
    public void set_showCatName(CT_Boolean value);
    public CT_Boolean get_showLegendKey();
    public void set_showLegendKey(CT_Boolean value);
    public CT_Boolean get_showPercent();
    public void set_showPercent(CT_Boolean value);
    public CT_Boolean get_showSerName();
    public void set_showSerName(CT_Boolean value);
    public CT_Boolean get_showVal();
    public void set_showVal(CT_Boolean value);
    public CT_Boolean get_delete();
    public void set_delete(CT_Boolean value);
    public string get_separator();
    public void set_separator(string value);
    public CT_Boolean get_showLeaderLines();
    public void set_showLeaderLines(CT_Boolean value);
    public List`1<CT_Extension> get_extLst();
    public void set_extLst(List`1<CT_Extension> value);
}
[DesignerCategoryAttribute("code")]
[XmlTypeAttribute]
[XmlRootAttribute]
public class NPOI.OpenXmlFormats.Dml.Chart.CT_Double : object {
    private double valField;
    [XmlAttributeAttribute]
public double val { get; public set; }
    public static CT_Double Parse(XmlNode node, XmlNamespaceManager namespaceManager);
    internal void Write(StreamWriter sw, string nodeName);
    public double get_val();
    public void set_val(double value);
}
[DesignerCategoryAttribute("code")]
[XmlTypeAttribute]
[XmlRootAttribute]
public class NPOI.OpenXmlFormats.Dml.Chart.CT_DoughnutChart : object {
    private CT_Boolean varyColorsField;
    private List`1<CT_PieSer> serField;
    private CT_DLbls dLblsField;
    private CT_FirstSliceAng firstSliceAngField;
    private CT_HoleSize holeSizeField;
    private List`1<CT_Extension> extLstField;
    [XmlElementAttribute]
public CT_Boolean varyColors { get; public set; }
    [XmlElementAttribute("ser")]
public List`1<CT_PieSer> ser { get; public set; }
    [XmlElementAttribute]
public CT_DLbls dLbls { get; public set; }
    [XmlElementAttribute]
public CT_FirstSliceAng firstSliceAng { get; public set; }
    [XmlElementAttribute]
public CT_HoleSize holeSize { get; public set; }
    [XmlArrayAttribute]
[XmlArrayItemAttribute("ext")]
public List`1<CT_Extension> extLst { get; public set; }
    public static CT_DoughnutChart Parse(XmlNode node, XmlNamespaceManager namespaceManager);
    internal void Write(StreamWriter sw, string nodeName);
    public int GetSeriesCount();
    public CT_Boolean get_varyColors();
    public void set_varyColors(CT_Boolean value);
    public List`1<CT_PieSer> get_ser();
    public void set_ser(List`1<CT_PieSer> value);
    public CT_DLbls get_dLbls();
    public void set_dLbls(CT_DLbls value);
    public CT_FirstSliceAng get_firstSliceAng();
    public void set_firstSliceAng(CT_FirstSliceAng value);
    public CT_HoleSize get_holeSize();
    public void set_holeSize(CT_HoleSize value);
    public List`1<CT_Extension> get_extLst();
    public void set_extLst(List`1<CT_Extension> value);
}
[DesignerCategoryAttribute("code")]
[XmlTypeAttribute]
[XmlRootAttribute]
public class NPOI.OpenXmlFormats.Dml.Chart.CT_DPt : object {
    private CT_UnsignedInt idxField;
    private CT_Boolean invertIfNegativeField;
    private CT_Marker markerField;
    private CT_Boolean bubble3DField;
    private CT_UnsignedInt explosionField;
    private CT_ShapeProperties spPrField;
    private CT_PictureOptions pictureOptionsField;
    private List`1<CT_Extension> extLstField;
    [XmlElementAttribute]
public CT_UnsignedInt idx { get; public set; }
    [XmlElementAttribute]
public CT_Boolean invertIfNegative { get; public set; }
    [XmlElementAttribute]
public CT_Marker marker { get; public set; }
    [XmlElementAttribute]
public CT_Boolean bubble3D { get; public set; }
    [XmlElementAttribute]
public CT_UnsignedInt explosion { get; public set; }
    [XmlElementAttribute]
public CT_ShapeProperties spPr { get; public set; }
    [XmlElementAttribute]
public CT_PictureOptions pictureOptions { get; public set; }
    [XmlElementAttribute]
public List`1<CT_Extension> extLst { get; public set; }
    public static CT_DPt Parse(XmlNode node, XmlNamespaceManager namespaceManager);
    internal void Write(StreamWriter sw, string nodeName);
    public CT_UnsignedInt get_idx();
    public void set_idx(CT_UnsignedInt value);
    public CT_Boolean get_invertIfNegative();
    public void set_invertIfNegative(CT_Boolean value);
    public CT_Marker get_marker();
    public void set_marker(CT_Marker value);
    public CT_Boolean get_bubble3D();
    public void set_bubble3D(CT_Boolean value);
    public CT_UnsignedInt get_explosion();
    public void set_explosion(CT_UnsignedInt value);
    public CT_ShapeProperties get_spPr();
    public void set_spPr(CT_ShapeProperties value);
    public CT_PictureOptions get_pictureOptions();
    public void set_pictureOptions(CT_PictureOptions value);
    public List`1<CT_Extension> get_extLst();
    public void set_extLst(List`1<CT_Extension> value);
}
[DesignerCategoryAttribute("code")]
[XmlTypeAttribute]
[XmlRootAttribute]
public class NPOI.OpenXmlFormats.Dml.Chart.CT_DTable : object {
    private CT_Boolean showHorzBorderField;
    private CT_Boolean showVertBorderField;
    private CT_Boolean showOutlineField;
    private CT_Boolean showKeysField;
    private CT_ShapeProperties spPrField;
    private CT_TextBody txPrField;
    private List`1<CT_Extension> extLstField;
    [XmlElementAttribute]
public CT_Boolean showHorzBorder { get; public set; }
    [XmlElementAttribute]
public CT_Boolean showVertBorder { get; public set; }
    [XmlElementAttribute]
public CT_Boolean showOutline { get; public set; }
    [XmlElementAttribute]
public CT_Boolean showKeys { get; public set; }
    [XmlElementAttribute]
public CT_ShapeProperties spPr { get; public set; }
    [XmlElementAttribute]
public CT_TextBody txPr { get; public set; }
    [XmlElementAttribute]
public List`1<CT_Extension> extLst { get; public set; }
    public static CT_DTable Parse(XmlNode node, XmlNamespaceManager namespaceManager);
    internal void Write(StreamWriter sw, string nodeName);
    public CT_Boolean get_showHorzBorder();
    public void set_showHorzBorder(CT_Boolean value);
    public CT_Boolean get_showVertBorder();
    public void set_showVertBorder(CT_Boolean value);
    public CT_Boolean get_showOutline();
    public void set_showOutline(CT_Boolean value);
    public CT_Boolean get_showKeys();
    public void set_showKeys(CT_Boolean value);
    public CT_ShapeProperties get_spPr();
    public void set_spPr(CT_ShapeProperties value);
    public CT_TextBody get_txPr();
    public void set_txPr(CT_TextBody value);
    public List`1<CT_Extension> get_extLst();
    public void set_extLst(List`1<CT_Extension> value);
}
[DesignerCategoryAttribute("code")]
[XmlTypeAttribute]
[XmlRootAttribute]
public class NPOI.OpenXmlFormats.Dml.Chart.CT_ErrBars : object {
    private CT_ErrDir errDirField;
    private CT_ErrBarType errBarTypeField;
    private CT_ErrValType errValTypeField;
    private CT_Boolean noEndCapField;
    private CT_NumDataSource plusField;
    private CT_NumDataSource minusField;
    private CT_Double valField;
    private CT_ShapeProperties spPrField;
    private List`1<CT_Extension> extLstField;
    [XmlElementAttribute]
public CT_ErrDir errDir { get; public set; }
    [XmlElementAttribute]
public CT_ErrBarType errBarType { get; public set; }
    [XmlElementAttribute]
public CT_ErrValType errValType { get; public set; }
    [XmlElementAttribute]
public CT_Boolean noEndCap { get; public set; }
    [XmlElementAttribute]
public CT_NumDataSource plus { get; public set; }
    [XmlElementAttribute]
public CT_NumDataSource minus { get; public set; }
    [XmlElementAttribute]
public CT_Double val { get; public set; }
    [XmlElementAttribute]
public CT_ShapeProperties spPr { get; public set; }
    [XmlElementAttribute]
public List`1<CT_Extension> extLst { get; public set; }
    public static CT_ErrBars Parse(XmlNode node, XmlNamespaceManager namespaceManager);
    internal void Write(StreamWriter sw, string nodeName);
    public CT_ErrDir get_errDir();
    public void set_errDir(CT_ErrDir value);
    public CT_ErrBarType get_errBarType();
    public void set_errBarType(CT_ErrBarType value);
    public CT_ErrValType get_errValType();
    public void set_errValType(CT_ErrValType value);
    public CT_Boolean get_noEndCap();
    public void set_noEndCap(CT_Boolean value);
    public CT_NumDataSource get_plus();
    public void set_plus(CT_NumDataSource value);
    public CT_NumDataSource get_minus();
    public void set_minus(CT_NumDataSource value);
    public CT_Double get_val();
    public void set_val(CT_Double value);
    public CT_ShapeProperties get_spPr();
    public void set_spPr(CT_ShapeProperties value);
    public List`1<CT_Extension> get_extLst();
    public void set_extLst(List`1<CT_Extension> value);
}
[DesignerCategoryAttribute("code")]
[XmlTypeAttribute]
[XmlRootAttribute]
public class NPOI.OpenXmlFormats.Dml.Chart.CT_ErrBarType : object {
    private ST_ErrBarType valField;
    [XmlAttributeAttribute]
[DefaultValueAttribute("Mono.Cecil.CustomAttributeArgument")]
public ST_ErrBarType val { get; public set; }
    public static CT_ErrBarType Parse(XmlNode node, XmlNamespaceManager namespaceManager);
    internal void Write(StreamWriter sw, string nodeName);
    public ST_ErrBarType get_val();
    public void set_val(ST_ErrBarType value);
}
[DesignerCategoryAttribute("code")]
[XmlTypeAttribute]
[XmlRootAttribute]
public class NPOI.OpenXmlFormats.Dml.Chart.CT_ErrDir : object {
    private ST_ErrDir valField;
    [XmlAttributeAttribute]
public ST_ErrDir val { get; public set; }
    public static CT_ErrDir Parse(XmlNode node, XmlNamespaceManager namespaceManager);
    internal void Write(StreamWriter sw, string nodeName);
    public ST_ErrDir get_val();
    public void set_val(ST_ErrDir value);
}
[DesignerCategoryAttribute("code")]
[XmlTypeAttribute]
[XmlRootAttribute]
public class NPOI.OpenXmlFormats.Dml.Chart.CT_ErrValType : object {
    private ST_ErrValType valField;
    [XmlAttributeAttribute]
[DefaultValueAttribute("Mono.Cecil.CustomAttributeArgument")]
public ST_ErrValType val { get; public set; }
    public static CT_ErrValType Parse(XmlNode node, XmlNamespaceManager namespaceManager);
    internal void Write(StreamWriter sw, string nodeName);
    public ST_ErrValType get_val();
    public void set_val(ST_ErrValType value);
}
[DesignerCategoryAttribute("code")]
[XmlTypeAttribute]
[XmlRootAttribute]
public class NPOI.OpenXmlFormats.Dml.Chart.CT_Extension : object {
    private string anyField;
    private string uriField;
    [XmlTextAttribute]
public string Any { get; public set; }
    [XmlAttributeAttribute]
public string uri { get; public set; }
    public string get_Any();
    public void set_Any(string value);
    public string get_uri();
    public void set_uri(string value);
    public static CT_Extension Parse(XmlNode node, XmlNamespaceManager namespaceManager);
    internal void Write(StreamWriter sw, string nodeName);
}
[DesignerCategoryAttribute("code")]
[XmlTypeAttribute]
[XmlRootAttribute]
public class NPOI.OpenXmlFormats.Dml.Chart.CT_ExtensionList : object {
    private List`1<CT_Extension> extField;
    [XmlElementAttribute("ext")]
public List`1<CT_Extension> ext { get; public set; }
    public List`1<CT_Extension> get_ext();
    public void set_ext(List`1<CT_Extension> value);
}
[DesignerCategoryAttribute("code")]
[XmlTypeAttribute]
[XmlRootAttribute]
public class NPOI.OpenXmlFormats.Dml.Chart.CT_ExternalData : object {
    private CT_Boolean autoUpdateField;
    private string idField;
    [XmlElementAttribute]
public CT_Boolean autoUpdate { get; public set; }
    [XmlAttributeAttribute]
public string id { get; public set; }
    public static CT_ExternalData Parse(XmlNode node, XmlNamespaceManager namespaceManager);
    internal void Write(StreamWriter sw, string nodeName);
    public CT_Boolean get_autoUpdate();
    public void set_autoUpdate(CT_Boolean value);
    public string get_id();
    public void set_id(string value);
}
[DesignerCategoryAttribute("code")]
[XmlTypeAttribute]
[XmlRootAttribute]
public class NPOI.OpenXmlFormats.Dml.Chart.CT_FirstSliceAng : object {
    private ushort valField;
    [XmlAttributeAttribute]
[DefaultValueAttribute("System.UInt16", "0")]
public ushort val { get; public set; }
    public static CT_FirstSliceAng Parse(XmlNode node, XmlNamespaceManager namespaceManager);
    internal void Write(StreamWriter sw, string nodeName);
    public ushort get_val();
    public void set_val(ushort value);
}
[DesignerCategoryAttribute("code")]
[XmlTypeAttribute]
[XmlRootAttribute]
public class NPOI.OpenXmlFormats.Dml.Chart.CT_GapAmount : object {
    private ushort valField;
    [XmlAttributeAttribute]
[DefaultValueAttribute("System.UInt16", "150")]
public ushort val { get; public set; }
    public static CT_GapAmount Parse(XmlNode node, XmlNamespaceManager namespaceManager);
    internal void Write(StreamWriter sw, string nodeName);
    public ushort get_val();
    public void set_val(ushort value);
}
[DesignerCategoryAttribute("code")]
[XmlTypeAttribute]
[XmlRootAttribute]
public class NPOI.OpenXmlFormats.Dml.Chart.CT_Grouping : object {
    private ST_Grouping valField;
    [XmlAttributeAttribute]
[DefaultValueAttribute("Mono.Cecil.CustomAttributeArgument")]
public ST_Grouping val { get; public set; }
    public static CT_Grouping Parse(XmlNode node, XmlNamespaceManager namespaceManager);
    internal void Write(StreamWriter sw, string nodeName);
    public ST_Grouping get_val();
    public void set_val(ST_Grouping value);
}
[DesignerCategoryAttribute("code")]
[XmlTypeAttribute]
[XmlRootAttribute]
public class NPOI.OpenXmlFormats.Dml.Chart.CT_HeaderFooter : object {
    private string oddHeaderField;
    private string oddFooterField;
    private string evenHeaderField;
    private string evenFooterField;
    private string firstHeaderField;
    private string firstFooterField;
    private bool alignWithMarginsField;
    private bool differentOddEvenField;
    private bool differentFirstField;
    [XmlElementAttribute]
public string oddHeader { get; public set; }
    [XmlElementAttribute]
public string oddFooter { get; public set; }
    [XmlElementAttribute]
public string evenHeader { get; public set; }
    [XmlElementAttribute]
public string evenFooter { get; public set; }
    [XmlElementAttribute]
public string firstHeader { get; public set; }
    [XmlElementAttribute]
public string firstFooter { get; public set; }
    [XmlAttributeAttribute]
[DefaultValueAttribute("True")]
public bool alignWithMargins { get; public set; }
    [XmlAttributeAttribute]
[DefaultValueAttribute("False")]
public bool differentOddEven { get; public set; }
    [XmlAttributeAttribute]
[DefaultValueAttribute("False")]
public bool differentFirst { get; public set; }
    public static CT_HeaderFooter Parse(XmlNode node, XmlNamespaceManager namespaceManager);
    internal void Write(StreamWriter sw, string nodeName);
    public string get_oddHeader();
    public void set_oddHeader(string value);
    public string get_oddFooter();
    public void set_oddFooter(string value);
    public string get_evenHeader();
    public void set_evenHeader(string value);
    public string get_evenFooter();
    public void set_evenFooter(string value);
    public string get_firstHeader();
    public void set_firstHeader(string value);
    public string get_firstFooter();
    public void set_firstFooter(string value);
    public bool get_alignWithMargins();
    public void set_alignWithMargins(bool value);
    public bool get_differentOddEven();
    public void set_differentOddEven(bool value);
    public bool get_differentFirst();
    public void set_differentFirst(bool value);
}
[DesignerCategoryAttribute("code")]
[XmlTypeAttribute]
[XmlRootAttribute]
public class NPOI.OpenXmlFormats.Dml.Chart.CT_HoleSize : object {
    private byte valField;
    [XmlAttributeAttribute]
[DefaultValueAttribute("System.Byte", "10")]
public byte val { get; public set; }
    public static CT_HoleSize Parse(XmlNode node, XmlNamespaceManager namespaceManager);
    internal void Write(StreamWriter sw, string nodeName);
    public byte get_val();
    public void set_val(byte value);
}
[DesignerCategoryAttribute("code")]
[XmlTypeAttribute]
[XmlRootAttribute]
public class NPOI.OpenXmlFormats.Dml.Chart.CT_HPercent : object {
    private ushort valField;
    [XmlAttributeAttribute]
[DefaultValueAttribute("System.UInt16", "100")]
public ushort val { get; public set; }
    public static CT_HPercent Parse(XmlNode node, XmlNamespaceManager namespaceManager);
    internal void Write(StreamWriter sw, string nodeName);
    public ushort get_val();
    public void set_val(ushort value);
}
[DesignerCategoryAttribute("code")]
[XmlTypeAttribute]
[XmlRootAttribute]
public class NPOI.OpenXmlFormats.Dml.Chart.CT_Layout : object {
    private CT_ManualLayout manualLayoutField;
    private List`1<CT_Extension> extLstField;
    [XmlElementAttribute]
public CT_ManualLayout manualLayout { get; public set; }
    [XmlElementAttribute]
public List`1<CT_Extension> extLst { get; public set; }
    public static CT_Layout Parse(XmlNode node, XmlNamespaceManager namespaceManager);
    internal void Write(StreamWriter sw, string nodeName);
    public bool IsSetManualLayout();
    public CT_ManualLayout AddNewManualLayout();
    public CT_ManualLayout get_manualLayout();
    public void set_manualLayout(CT_ManualLayout value);
    public List`1<CT_Extension> get_extLst();
    public void set_extLst(List`1<CT_Extension> value);
}
[DesignerCategoryAttribute("code")]
[XmlTypeAttribute]
[XmlRootAttribute]
public class NPOI.OpenXmlFormats.Dml.Chart.CT_LayoutMode : object {
    private ST_LayoutMode valField;
    [XmlAttributeAttribute]
[DefaultValueAttribute("Mono.Cecil.CustomAttributeArgument")]
public ST_LayoutMode val { get; public set; }
    public ST_LayoutMode get_val();
    public void set_val(ST_LayoutMode value);
    public static CT_LayoutMode Parse(XmlNode node, XmlNamespaceManager namespaceManager);
    internal void Write(StreamWriter sw, string nodeName);
}
[DesignerCategoryAttribute("code")]
[XmlTypeAttribute]
[XmlRootAttribute]
public class NPOI.OpenXmlFormats.Dml.Chart.CT_LayoutTarget : object {
    private ST_LayoutTarget valField;
    [XmlAttributeAttribute]
[DefaultValueAttribute("Mono.Cecil.CustomAttributeArgument")]
public ST_LayoutTarget val { get; public set; }
    public static CT_LayoutTarget Parse(XmlNode node, XmlNamespaceManager namespaceManager);
    internal void Write(StreamWriter sw, string nodeName);
    public ST_LayoutTarget get_val();
    public void set_val(ST_LayoutTarget value);
}
[DesignerCategoryAttribute("code")]
[XmlTypeAttribute]
[XmlRootAttribute]
public class NPOI.OpenXmlFormats.Dml.Chart.CT_LblAlgn : object {
    private ST_LblAlgn valField;
    [XmlAttributeAttribute]
public ST_LblAlgn val { get; public set; }
    public static CT_LblAlgn Parse(XmlNode node, XmlNamespaceManager namespaceManager);
    internal void Write(StreamWriter sw, string nodeName);
    public ST_LblAlgn get_val();
    public void set_val(ST_LblAlgn value);
}
[DesignerCategoryAttribute("code")]
[XmlTypeAttribute]
[XmlRootAttribute]
public class NPOI.OpenXmlFormats.Dml.Chart.CT_LblOffset : object {
    private ushort valField;
    [XmlAttributeAttribute]
[DefaultValueAttribute("System.UInt16", "100")]
public ushort val { get; public set; }
    public static CT_LblOffset Parse(XmlNode node, XmlNamespaceManager namespaceManager);
    internal void Write(StreamWriter sw, string nodeName);
    public ushort get_val();
    public void set_val(ushort value);
}
[DesignerCategoryAttribute("code")]
[XmlTypeAttribute]
[XmlRootAttribute]
public class NPOI.OpenXmlFormats.Dml.Chart.CT_Legend : object {
    private CT_LegendPos legendPosField;
    private List`1<CT_LegendEntry> legendEntryField;
    private CT_Layout layoutField;
    private CT_Boolean overlayField;
    private CT_ShapeProperties spPrField;
    private CT_TextBody txPrField;
    private List`1<CT_Extension> extLstField;
    private bool legendPosSpecifiedField;
    private bool layoutSpecifiedField;
    [XmlIgnoreAttribute]
public bool legendPosSpecified { get; public set; }
    [XmlElementAttribute]
public CT_LegendPos legendPos { get; public set; }
    [XmlElementAttribute("legendEntry")]
public List`1<CT_LegendEntry> legendEntry { get; public set; }
    [XmlIgnoreAttribute]
public bool layoutSpecified { get; public set; }
    [XmlElementAttribute]
public CT_Layout layout { get; public set; }
    [XmlElementAttribute]
public CT_Boolean overlay { get; public set; }
    [XmlElementAttribute]
public CT_ShapeProperties spPr { get; public set; }
    [XmlElementAttribute]
public CT_TextBody txPr { get; public set; }
    [XmlArrayAttribute]
[XmlArrayItemAttribute("ext")]
public List`1<CT_Extension> extLst { get; public set; }
    public static CT_Legend Parse(XmlNode node, XmlNamespaceManager namespaceManager);
    internal void Write(StreamWriter sw, string nodeName);
    public CT_Layout AddNewLayout();
    public bool IsSetLegendPos();
    public CT_LegendPos AddNewLegendPos();
    public bool get_legendPosSpecified();
    public void set_legendPosSpecified(bool value);
    public CT_LegendPos get_legendPos();
    public void set_legendPos(CT_LegendPos value);
    public List`1<CT_LegendEntry> get_legendEntry();
    public void set_legendEntry(List`1<CT_LegendEntry> value);
    public bool IsSetLayout();
    public bool get_layoutSpecified();
    public void set_layoutSpecified(bool value);
    public CT_Layout get_layout();
    public void set_layout(CT_Layout value);
    public CT_Boolean get_overlay();
    public void set_overlay(CT_Boolean value);
    public CT_ShapeProperties get_spPr();
    public void set_spPr(CT_ShapeProperties value);
    public CT_TextBody get_txPr();
    public void set_txPr(CT_TextBody value);
    public List`1<CT_Extension> get_extLst();
    public void set_extLst(List`1<CT_Extension> value);
    public bool IsSetOverlay();
    public void AddNewOverlay();
}
[DesignerCategoryAttribute("code")]
[XmlTypeAttribute]
[XmlRootAttribute]
public class NPOI.OpenXmlFormats.Dml.Chart.CT_LegendEntry : object {
    private CT_UnsignedInt idxField;
    private object itemField;
    private List`1<CT_Extension> extLstField;
    [XmlElementAttribute]
public CT_UnsignedInt idx { get; public set; }
    [XmlElementAttribute("delete", "NPOI.OpenXmlFormats.Dml.Chart.CT_Boolean")]
[XmlElementAttribute("txPr", "NPOI.OpenXmlFormats.Dml.Chart.CT_TextBody")]
public object Item { get; public set; }
    [XmlArrayAttribute]
[XmlArrayItemAttribute("ext")]
public List`1<CT_Extension> extLst { get; public set; }
    public static CT_LegendEntry Parse(XmlNode node, XmlNamespaceManager namespaceManager);
    internal void Write(StreamWriter sw, string nodeName);
    public CT_UnsignedInt get_idx();
    public void set_idx(CT_UnsignedInt value);
    public object get_Item();
    public void set_Item(object value);
    public List`1<CT_Extension> get_extLst();
    public void set_extLst(List`1<CT_Extension> value);
}
[DesignerCategoryAttribute("code")]
[XmlTypeAttribute]
[XmlRootAttribute]
public class NPOI.OpenXmlFormats.Dml.Chart.CT_LegendPos : object {
    private ST_LegendPos valField;
    [XmlAttributeAttribute]
[DefaultValueAttribute("Mono.Cecil.CustomAttributeArgument")]
public ST_LegendPos val { get; public set; }
    public ST_LegendPos get_val();
    public void set_val(ST_LegendPos value);
    public static CT_LegendPos Parse(XmlNode node, XmlNamespaceManager namespaceManager);
    internal void Write(StreamWriter sw, string nodeName);
}
[DesignerCategoryAttribute("code")]
[XmlTypeAttribute]
[XmlRootAttribute]
public class NPOI.OpenXmlFormats.Dml.Chart.CT_Line3DChart : object {
    private CT_Grouping groupingField;
    private CT_Boolean varyColorsField;
    private List`1<CT_LineSer> serField;
    private CT_DLbls dLblsField;
    private CT_ChartLines dropLinesField;
    private CT_GapAmount gapDepthField;
    private List`1<CT_UnsignedInt> axIdField;
    private List`1<CT_Extension> extLstField;
    [XmlElementAttribute]
public CT_Grouping grouping { get; public set; }
    [XmlElementAttribute]
public CT_Boolean varyColors { get; public set; }
    [XmlElementAttribute("ser")]
public List`1<CT_LineSer> ser { get; public set; }
    [XmlElementAttribute]
public CT_DLbls dLbls { get; public set; }
    [XmlElementAttribute]
public CT_ChartLines dropLines { get; public set; }
    [XmlElementAttribute]
public CT_GapAmount gapDepth { get; public set; }
    [XmlElementAttribute("axId")]
public List`1<CT_UnsignedInt> axId { get; public set; }
    [XmlElementAttribute]
public List`1<CT_Extension> extLst { get; public set; }
    public int GetSeriesCount();
    public CT_Grouping get_grouping();
    public void set_grouping(CT_Grouping value);
    public CT_Boolean get_varyColors();
    public void set_varyColors(CT_Boolean value);
    public List`1<CT_LineSer> get_ser();
    public void set_ser(List`1<CT_LineSer> value);
    public CT_DLbls get_dLbls();
    public void set_dLbls(CT_DLbls value);
    public CT_ChartLines get_dropLines();
    public void set_dropLines(CT_ChartLines value);
    public CT_GapAmount get_gapDepth();
    public void set_gapDepth(CT_GapAmount value);
    public List`1<CT_UnsignedInt> get_axId();
    public void set_axId(List`1<CT_UnsignedInt> value);
    public List`1<CT_Extension> get_extLst();
    public void set_extLst(List`1<CT_Extension> value);
    public static CT_Line3DChart Parse(XmlNode node, XmlNamespaceManager namespaceManager);
    internal void Write(StreamWriter sw, string nodeName);
}
[DesignerCategoryAttribute("code")]
[XmlTypeAttribute]
[XmlRootAttribute]
public class NPOI.OpenXmlFormats.Dml.Chart.CT_LineChart : object {
    private CT_Grouping groupingField;
    private CT_Boolean varyColorsField;
    private List`1<CT_LineSer> serField;
    private CT_DLbls dLblsField;
    private CT_ChartLines dropLinesField;
    private CT_ChartLines hiLowLinesField;
    private CT_UpDownBars upDownBarsField;
    private CT_Boolean markerField;
    private CT_Boolean smoothField;
    private List`1<CT_UnsignedInt> axIdField;
    private List`1<CT_Extension> extLstField;
    [XmlElementAttribute]
public CT_Grouping grouping { get; public set; }
    [XmlElementAttribute]
public CT_Boolean varyColors { get; public set; }
    [XmlElementAttribute("ser")]
public List`1<CT_LineSer> ser { get; public set; }
    [XmlElementAttribute]
public CT_DLbls dLbls { get; public set; }
    [XmlElementAttribute]
public CT_ChartLines dropLines { get; public set; }
    [XmlElementAttribute]
public CT_ChartLines hiLowLines { get; public set; }
    [XmlElementAttribute]
public CT_UpDownBars upDownBars { get; public set; }
    [XmlElementAttribute]
public CT_Boolean marker { get; public set; }
    [XmlElementAttribute]
public CT_Boolean smooth { get; public set; }
    [XmlElementAttribute("axId")]
public List`1<CT_UnsignedInt> axId { get; public set; }
    [XmlElementAttribute]
public List`1<CT_Extension> extLst { get; public set; }
    public static CT_LineChart Parse(XmlNode node, XmlNamespaceManager namespaceManager);
    internal void Write(StreamWriter sw, string nodeName);
    public int GetSeriesCount();
    public CT_Grouping get_grouping();
    public void set_grouping(CT_Grouping value);
    public CT_Boolean get_varyColors();
    public void set_varyColors(CT_Boolean value);
    public List`1<CT_LineSer> get_ser();
    public void set_ser(List`1<CT_LineSer> value);
    public CT_DLbls get_dLbls();
    public void set_dLbls(CT_DLbls value);
    public CT_ChartLines get_dropLines();
    public void set_dropLines(CT_ChartLines value);
    public CT_ChartLines get_hiLowLines();
    public void set_hiLowLines(CT_ChartLines value);
    public CT_UpDownBars get_upDownBars();
    public void set_upDownBars(CT_UpDownBars value);
    public CT_Boolean get_marker();
    public void set_marker(CT_Boolean value);
    public CT_Boolean get_smooth();
    public void set_smooth(CT_Boolean value);
    public List`1<CT_UnsignedInt> get_axId();
    public void set_axId(List`1<CT_UnsignedInt> value);
    public List`1<CT_Extension> get_extLst();
    public void set_extLst(List`1<CT_Extension> value);
    public CT_Grouping AddNewGrouping();
    public CT_LineSer AddNewSer();
    public CT_Boolean AddNewVaryColors();
    public CT_UnsignedInt AddNewAxId();
}
[DesignerCategoryAttribute("code")]
[XmlTypeAttribute]
[XmlRootAttribute]
public class NPOI.OpenXmlFormats.Dml.Chart.CT_LineSer : object {
    private CT_UnsignedInt idxField;
    private CT_UnsignedInt orderField;
    private CT_SerTx txField;
    private CT_ShapeProperties spPrField;
    private CT_Marker markerField;
    private List`1<CT_DPt> dPtField;
    private CT_DLbls dLblsField;
    private List`1<CT_Trendline> trendlineField;
    private CT_ErrBars errBarsField;
    private CT_AxDataSource catField;
    private CT_NumDataSource valField;
    private CT_Boolean smoothField;
    private List`1<CT_Extension> extLstField;
    [XmlElementAttribute]
public CT_UnsignedInt idx { get; public set; }
    [XmlElementAttribute]
public CT_UnsignedInt order { get; public set; }
    [XmlElementAttribute]
public CT_SerTx tx { get; public set; }
    [XmlElementAttribute]
public CT_ShapeProperties spPr { get; public set; }
    [XmlElementAttribute]
public CT_Marker marker { get; public set; }
    [XmlElementAttribute("dPt")]
public List`1<CT_DPt> dPt { get; public set; }
    [XmlElementAttribute]
public CT_DLbls dLbls { get; public set; }
    [XmlElementAttribute("trendline")]
public List`1<CT_Trendline> trendline { get; public set; }
    [XmlElementAttribute]
public CT_ErrBars errBars { get; public set; }
    [XmlElementAttribute]
public CT_AxDataSource cat { get; public set; }
    [XmlElementAttribute]
public CT_NumDataSource val { get; public set; }
    [XmlElementAttribute]
public CT_Boolean smooth { get; public set; }
    [XmlElementAttribute]
public List`1<CT_Extension> extLst { get; public set; }
    public static CT_LineSer Parse(XmlNode node, XmlNamespaceManager namespaceManager);
    internal void Write(StreamWriter sw, string nodeName);
    public CT_UnsignedInt get_idx();
    public void set_idx(CT_UnsignedInt value);
    public CT_UnsignedInt get_order();
    public void set_order(CT_UnsignedInt value);
    public CT_SerTx get_tx();
    public void set_tx(CT_SerTx value);
    public CT_ShapeProperties get_spPr();
    public void set_spPr(CT_ShapeProperties value);
    public CT_Marker get_marker();
    public void set_marker(CT_Marker value);
    public List`1<CT_DPt> get_dPt();
    public void set_dPt(List`1<CT_DPt> value);
    public CT_DLbls get_dLbls();
    public void set_dLbls(CT_DLbls value);
    public List`1<CT_Trendline> get_trendline();
    public void set_trendline(List`1<CT_Trendline> value);
    public CT_ErrBars get_errBars();
    public void set_errBars(CT_ErrBars value);
    public CT_AxDataSource get_cat();
    public void set_cat(CT_AxDataSource value);
    public CT_NumDataSource get_val();
    public void set_val(CT_NumDataSource value);
    public CT_Boolean get_smooth();
    public void set_smooth(CT_Boolean value);
    public List`1<CT_Extension> get_extLst();
    public void set_extLst(List`1<CT_Extension> value);
    public CT_UnsignedInt AddNewIdx();
    public CT_UnsignedInt AddNewOrder();
    public CT_Marker AddNewMarker();
    public CT_AxDataSource AddNewCat();
    public CT_NumDataSource AddNewVal();
}
[DesignerCategoryAttribute("code")]
[XmlTypeAttribute]
[XmlRootAttribute]
public class NPOI.OpenXmlFormats.Dml.Chart.CT_LogBase : object {
    private double valField;
    [XmlAttributeAttribute]
public double val { get; public set; }
    public static CT_LogBase Parse(XmlNode node, XmlNamespaceManager namespaceManager);
    internal void Write(StreamWriter sw, string nodeName);
    public double get_val();
    public void set_val(double value);
}
[DesignerCategoryAttribute("code")]
[XmlTypeAttribute]
[XmlRootAttribute]
public class NPOI.OpenXmlFormats.Dml.Chart.CT_Lvl : object {
    private List`1<CT_StrVal> ptField;
    [XmlElementAttribute("pt")]
public List`1<CT_StrVal> pt { get; public set; }
    public static CT_Lvl Parse(XmlNode node, XmlNamespaceManager namespaceManager);
    internal void Write(StreamWriter sw, string nodeName);
    public List`1<CT_StrVal> get_pt();
    public void set_pt(List`1<CT_StrVal> value);
}
[DesignerCategoryAttribute("code")]
[XmlTypeAttribute]
[XmlRootAttribute]
public class NPOI.OpenXmlFormats.Dml.Chart.CT_ManualLayout : object {
    private CT_LayoutTarget layoutTargetField;
    private CT_LayoutMode xModeField;
    private CT_LayoutMode yModeField;
    private CT_LayoutMode wModeField;
    private CT_LayoutMode hModeField;
    private CT_Double xField;
    private CT_Double yField;
    private CT_Double wField;
    private CT_Double hField;
    private List`1<CT_Extension> extLstField;
    [XmlElementAttribute]
public CT_LayoutTarget layoutTarget { get; public set; }
    [XmlElementAttribute]
public CT_LayoutMode xMode { get; public set; }
    [XmlElementAttribute]
public CT_LayoutMode yMode { get; public set; }
    [XmlElementAttribute]
public CT_LayoutMode wMode { get; public set; }
    [XmlElementAttribute]
public CT_LayoutMode hMode { get; public set; }
    [XmlElementAttribute]
public CT_Double x { get; public set; }
    [XmlElementAttribute]
public CT_Double y { get; public set; }
    [XmlElementAttribute]
public CT_Double w { get; public set; }
    [XmlElementAttribute]
public CT_Double h { get; public set; }
    [XmlElementAttribute]
public List`1<CT_Extension> extLst { get; public set; }
    public static CT_ManualLayout Parse(XmlNode node, XmlNamespaceManager namespaceManager);
    internal void Write(StreamWriter sw, string nodeName);
    public bool IsSetLayoutTarget();
    public CT_LayoutTarget AddNewLayoutTarget();
    public bool IsSetY();
    public bool IsSetX();
    public bool IsSetW();
    public bool IsSetH();
    public bool IsSetXMode();
    public CT_LayoutMode AddNewXMode();
    public bool IsSetYMode();
    public CT_LayoutMode AddNewYMode();
    public bool IsSetWMode();
    public bool IsSetHMode();
    public CT_LayoutMode AddNewHMode();
    public CT_LayoutMode AddNewWMode();
    public CT_Double AddNewW();
    public CT_Double AddNewH();
    public CT_Double AddNewY();
    public CT_Double AddNewX();
    public CT_LayoutTarget get_layoutTarget();
    public void set_layoutTarget(CT_LayoutTarget value);
    public CT_LayoutMode get_xMode();
    public void set_xMode(CT_LayoutMode value);
    public CT_LayoutMode get_yMode();
    public void set_yMode(CT_LayoutMode value);
    public CT_LayoutMode get_wMode();
    public void set_wMode(CT_LayoutMode value);
    public CT_LayoutMode get_hMode();
    public void set_hMode(CT_LayoutMode value);
    public CT_Double get_x();
    public void set_x(CT_Double value);
    public CT_Double get_y();
    public void set_y(CT_Double value);
    public CT_Double get_w();
    public void set_w(CT_Double value);
    public CT_Double get_h();
    public void set_h(CT_Double value);
    public List`1<CT_Extension> get_extLst();
    public void set_extLst(List`1<CT_Extension> value);
}
[DesignerCategoryAttribute("code")]
[XmlTypeAttribute]
[XmlRootAttribute]
public class NPOI.OpenXmlFormats.Dml.Chart.CT_Marker : object {
    private CT_MarkerStyle symbolField;
    private CT_MarkerSize sizeField;
    private CT_ShapeProperties spPrField;
    private List`1<CT_Extension> extLstField;
    [XmlElementAttribute]
public CT_MarkerStyle symbol { get; public set; }
    [XmlElementAttribute]
public CT_MarkerSize size { get; public set; }
    [XmlElementAttribute]
public CT_ShapeProperties spPr { get; public set; }
    [XmlElementAttribute]
public List`1<CT_Extension> extLst { get; public set; }
    public static CT_Marker Parse(XmlNode node, XmlNamespaceManager namespaceManager);
    internal void Write(StreamWriter sw, string nodeName);
    public CT_MarkerStyle get_symbol();
    public void set_symbol(CT_MarkerStyle value);
    public CT_MarkerSize get_size();
    public void set_size(CT_MarkerSize value);
    public CT_ShapeProperties get_spPr();
    public void set_spPr(CT_ShapeProperties value);
    public List`1<CT_Extension> get_extLst();
    public void set_extLst(List`1<CT_Extension> value);
    public CT_MarkerStyle AddNewSymbol();
}
[DesignerCategoryAttribute("code")]
[XmlTypeAttribute]
[XmlRootAttribute]
public class NPOI.OpenXmlFormats.Dml.Chart.CT_MarkerSize : object {
    private byte valField;
    [XmlAttributeAttribute]
[DefaultValueAttribute("System.Byte", "5")]
public byte val { get; public set; }
    public byte get_val();
    public void set_val(byte value);
    public static CT_MarkerSize Parse(XmlNode node, XmlNamespaceManager namespaceManager);
    internal void Write(StreamWriter sw, string nodeName);
}
[DesignerCategoryAttribute("code")]
[XmlTypeAttribute]
[XmlRootAttribute]
public class NPOI.OpenXmlFormats.Dml.Chart.CT_MarkerStyle : object {
    private ST_MarkerStyle valField;
    [XmlAttributeAttribute]
public ST_MarkerStyle val { get; public set; }
    public ST_MarkerStyle get_val();
    public void set_val(ST_MarkerStyle value);
    public static CT_MarkerStyle Parse(XmlNode node, XmlNamespaceManager namespaceManager);
    internal void Write(StreamWriter sw, string nodeName);
}
[DesignerCategoryAttribute("code")]
[XmlTypeAttribute]
[XmlRootAttribute]
public class NPOI.OpenXmlFormats.Dml.Chart.CT_MultiLvlStrData : object {
    private CT_UnsignedInt ptCountField;
    private List`1<CT_Lvl> lvlField;
    private List`1<CT_Extension> extLstField;
    [XmlElementAttribute]
public CT_UnsignedInt ptCount { get; public set; }
    [XmlElementAttribute]
public List`1<CT_Lvl> lvl { get; public set; }
    [XmlElementAttribute]
public List`1<CT_Extension> extLst { get; public set; }
    public static CT_MultiLvlStrData Parse(XmlNode node, XmlNamespaceManager namespaceManager);
    internal void Write(StreamWriter sw, string nodeName);
    public CT_UnsignedInt get_ptCount();
    public void set_ptCount(CT_UnsignedInt value);
    public List`1<CT_Lvl> get_lvl();
    public void set_lvl(List`1<CT_Lvl> value);
    public List`1<CT_Extension> get_extLst();
    public void set_extLst(List`1<CT_Extension> value);
}
[DesignerCategoryAttribute("code")]
[XmlTypeAttribute]
[XmlRootAttribute]
public class NPOI.OpenXmlFormats.Dml.Chart.CT_MultiLvlStrRef : object {
    private string fField;
    private CT_MultiLvlStrData multiLvlStrCacheField;
    private List`1<CT_Extension> extLstField;
    [XmlElementAttribute]
public string f { get; public set; }
    [XmlElementAttribute]
public CT_MultiLvlStrData multiLvlStrCache { get; public set; }
    [XmlElementAttribute]
public List`1<CT_Extension> extLst { get; public set; }
    public static CT_MultiLvlStrRef Parse(XmlNode node, XmlNamespaceManager namespaceManager);
    internal void Write(StreamWriter sw, string nodeName);
    public string get_f();
    public void set_f(string value);
    public CT_MultiLvlStrData get_multiLvlStrCache();
    public void set_multiLvlStrCache(CT_MultiLvlStrData value);
    public List`1<CT_Extension> get_extLst();
    public void set_extLst(List`1<CT_Extension> value);
}
[DesignerCategoryAttribute("code")]
[XmlTypeAttribute]
[XmlRootAttribute]
public class NPOI.OpenXmlFormats.Dml.Chart.CT_NumData : object {
    private string formatCodeField;
    private CT_UnsignedInt ptCountField;
    private List`1<CT_NumVal> ptField;
    private List`1<CT_Extension> extLstField;
    [XmlElementAttribute]
public string formatCode { get; public set; }
    [XmlElementAttribute]
public CT_UnsignedInt ptCount { get; public set; }
    [XmlElementAttribute("pt")]
public List`1<CT_NumVal> pt { get; public set; }
    [XmlElementAttribute]
public List`1<CT_Extension> extLst { get; public set; }
    public static CT_NumData Parse(XmlNode node, XmlNamespaceManager namespaceManager);
    internal void Write(StreamWriter sw, string nodeName);
    public CT_NumVal AddNewPt();
    public CT_UnsignedInt AddNewPtCount();
    public string get_formatCode();
    public void set_formatCode(string value);
    public CT_UnsignedInt get_ptCount();
    public void set_ptCount(CT_UnsignedInt value);
    public List`1<CT_NumVal> get_pt();
    public void set_pt(List`1<CT_NumVal> value);
    public List`1<CT_Extension> get_extLst();
    public void set_extLst(List`1<CT_Extension> value);
}
[DesignerCategoryAttribute("code")]
[XmlTypeAttribute]
[XmlRootAttribute]
public class NPOI.OpenXmlFormats.Dml.Chart.CT_NumDataSource : object {
    private CT_NumData numLitField;
    private CT_NumRef numRefField;
    public CT_NumData numLit { get; public set; }
    public CT_NumRef numRef { get; public set; }
    public static CT_NumDataSource Parse(XmlNode node, XmlNamespaceManager namespaceManager);
    internal void Write(StreamWriter sw, string nodeName);
    public CT_NumRef AddNewNumRef();
    public CT_NumData get_numLit();
    public void set_numLit(CT_NumData value);
    public CT_NumRef get_numRef();
    public void set_numRef(CT_NumRef value);
    public CT_NumData AddNewNumLit();
}
[DesignerCategoryAttribute("code")]
[XmlTypeAttribute]
[XmlRootAttribute]
public class NPOI.OpenXmlFormats.Dml.Chart.CT_NumFmt : object {
    private string formatCodeField;
    private bool sourceLinkedField;
    [XmlAttributeAttribute]
public string formatCode { get; public set; }
    [XmlAttributeAttribute]
public bool sourceLinked { get; public set; }
    public static CT_NumFmt Parse(XmlNode node, XmlNamespaceManager namespaceManager);
    internal void Write(StreamWriter sw, string nodeName);
    public string get_formatCode();
    public void set_formatCode(string value);
    public bool get_sourceLinked();
    public void set_sourceLinked(bool value);
}
[DesignerCategoryAttribute("code")]
[XmlTypeAttribute]
[XmlRootAttribute]
public class NPOI.OpenXmlFormats.Dml.Chart.CT_NumRef : object {
    private string fField;
    private CT_NumData numCacheField;
    private List`1<CT_Extension> extLstField;
    [XmlElementAttribute]
public string f { get; public set; }
    [XmlElementAttribute]
public CT_NumData numCache { get; public set; }
    [XmlElementAttribute]
public List`1<CT_Extension> extLst { get; public set; }
    public static CT_NumRef Parse(XmlNode node, XmlNamespaceManager namespaceManager);
    internal void Write(StreamWriter sw, string nodeName);
    public CT_NumData AddNewNumCache();
    public string get_f();
    public void set_f(string value);
    public CT_NumData get_numCache();
    public void set_numCache(CT_NumData value);
    public List`1<CT_Extension> get_extLst();
    public void set_extLst(List`1<CT_Extension> value);
}
[DesignerCategoryAttribute("code")]
[XmlTypeAttribute]
[XmlRootAttribute]
public class NPOI.OpenXmlFormats.Dml.Chart.CT_NumVal : object {
    private string vField;
    private UInt32 idxField;
    private string formatCodeField;
    [XmlElementAttribute]
public string v { get; public set; }
    [XmlAttributeAttribute]
public UInt32 idx { get; public set; }
    [XmlAttributeAttribute]
public string formatCode { get; public set; }
    public static CT_NumVal Parse(XmlNode node, XmlNamespaceManager namespaceManager);
    internal void Write(StreamWriter sw, string nodeName);
    public string get_v();
    public void set_v(string value);
    public UInt32 get_idx();
    public void set_idx(UInt32 value);
    public string get_formatCode();
    public void set_formatCode(string value);
}
[DesignerCategoryAttribute("code")]
[XmlTypeAttribute]
[XmlRootAttribute]
public class NPOI.OpenXmlFormats.Dml.Chart.CT_OfPieChart : object {
    private CT_OfPieType ofPieTypeField;
    private CT_Boolean varyColorsField;
    private List`1<CT_PieSer> serField;
    private CT_DLbls dLblsField;
    private CT_GapAmount gapWidthField;
    private CT_SplitType splitTypeField;
    private CT_Double splitPosField;
    private List`1<CT_UnsignedInt> custSplitField;
    private CT_SecondPieSize secondPieSizeField;
    private List`1<CT_ChartLines> serLinesField;
    private List`1<CT_Extension> extLstField;
    [XmlElementAttribute]
public CT_OfPieType ofPieType { get; public set; }
    [XmlElementAttribute]
public CT_Boolean varyColors { get; public set; }
    [XmlElementAttribute("ser")]
public List`1<CT_PieSer> ser { get; public set; }
    [XmlElementAttribute]
public CT_DLbls dLbls { get; public set; }
    [XmlElementAttribute]
public CT_GapAmount gapWidth { get; public set; }
    [XmlElementAttribute]
public CT_SplitType splitType { get; public set; }
    [XmlElementAttribute]
public CT_Double splitPos { get; public set; }
    [XmlElementAttribute]
public List`1<CT_UnsignedInt> custSplit { get; public set; }
    [XmlElementAttribute]
public CT_SecondPieSize secondPieSize { get; public set; }
    [XmlElementAttribute("serLines")]
public List`1<CT_ChartLines> serLines { get; public set; }
    [XmlArrayAttribute]
[XmlArrayItemAttribute("ext")]
public List`1<CT_Extension> extLst { get; public set; }
    public static CT_OfPieChart Parse(XmlNode node, XmlNamespaceManager namespaceManager);
    internal void Write(StreamWriter sw, string nodeName);
    public int GetSeriesCount();
    public CT_OfPieType get_ofPieType();
    public void set_ofPieType(CT_OfPieType value);
    public CT_Boolean get_varyColors();
    public void set_varyColors(CT_Boolean value);
    public List`1<CT_PieSer> get_ser();
    public void set_ser(List`1<CT_PieSer> value);
    public CT_DLbls get_dLbls();
    public void set_dLbls(CT_DLbls value);
    public CT_GapAmount get_gapWidth();
    public void set_gapWidth(CT_GapAmount value);
    public CT_SplitType get_splitType();
    public void set_splitType(CT_SplitType value);
    public CT_Double get_splitPos();
    public void set_splitPos(CT_Double value);
    public List`1<CT_UnsignedInt> get_custSplit();
    public void set_custSplit(List`1<CT_UnsignedInt> value);
    public CT_SecondPieSize get_secondPieSize();
    public void set_secondPieSize(CT_SecondPieSize value);
    public List`1<CT_ChartLines> get_serLines();
    public void set_serLines(List`1<CT_ChartLines> value);
    public List`1<CT_Extension> get_extLst();
    public void set_extLst(List`1<CT_Extension> value);
}
[DesignerCategoryAttribute("code")]
[XmlTypeAttribute]
[XmlRootAttribute]
public class NPOI.OpenXmlFormats.Dml.Chart.CT_OfPieType : object {
    private ST_OfPieType valField;
    [XmlAttributeAttribute]
[DefaultValueAttribute("Mono.Cecil.CustomAttributeArgument")]
public ST_OfPieType val { get; public set; }
    public static CT_OfPieType Parse(XmlNode node, XmlNamespaceManager namespaceManager);
    internal void Write(StreamWriter sw, string nodeName);
    public ST_OfPieType get_val();
    public void set_val(ST_OfPieType value);
}
[DesignerCategoryAttribute("code")]
[XmlTypeAttribute]
[XmlRootAttribute]
public class NPOI.OpenXmlFormats.Dml.Chart.CT_Order : object {
    private byte valField;
    [XmlAttributeAttribute]
[DefaultValueAttribute("System.Byte", "2")]
public byte val { get; public set; }
    public static CT_Order Parse(XmlNode node, XmlNamespaceManager namespaceManager);
    internal void Write(StreamWriter sw, string nodeName);
    public byte get_val();
    public void set_val(byte value);
}
[DesignerCategoryAttribute("code")]
[XmlTypeAttribute]
[XmlRootAttribute]
public class NPOI.OpenXmlFormats.Dml.Chart.CT_Orientation : object {
    private ST_Orientation valField;
    [XmlAttributeAttribute]
public ST_Orientation val { get; public set; }
    public static CT_Orientation Parse(XmlNode node, XmlNamespaceManager namespaceManager);
    internal void Write(StreamWriter sw, string nodeName);
    public ST_Orientation get_val();
    public void set_val(ST_Orientation value);
}
[DesignerCategoryAttribute("code")]
[XmlTypeAttribute]
[XmlRootAttribute]
public class NPOI.OpenXmlFormats.Dml.Chart.CT_Overlap : object {
    private sbyte valField;
    [XmlAttributeAttribute]
[DefaultValueAttribute("System.SByte", "0")]
public sbyte val { get; public set; }
    public static CT_Overlap Parse(XmlNode node, XmlNamespaceManager namespaceManager);
    internal void Write(StreamWriter sw, string nodeName);
    public sbyte get_val();
    public void set_val(sbyte value);
}
[DesignerCategoryAttribute("code")]
[XmlTypeAttribute]
[XmlRootAttribute]
public class NPOI.OpenXmlFormats.Dml.Chart.CT_PageMargins : object {
    private double lField;
    private double rField;
    private double tField;
    private double bField;
    private double headerField;
    private double footerField;
    [XmlAttributeAttribute]
public double l { get; public set; }
    [XmlAttributeAttribute]
public double r { get; public set; }
    [XmlAttributeAttribute]
public double t { get; public set; }
    [XmlAttributeAttribute]
public double b { get; public set; }
    [XmlAttributeAttribute]
public double header { get; public set; }
    [XmlAttributeAttribute]
public double footer { get; public set; }
    public static CT_PageMargins Parse(XmlNode node, XmlNamespaceManager namespaceManager);
    internal void Write(StreamWriter sw, string nodeName);
    public double get_l();
    public void set_l(double value);
    public double get_r();
    public void set_r(double value);
    public double get_t();
    public void set_t(double value);
    public double get_b();
    public void set_b(double value);
    public double get_header();
    public void set_header(double value);
    public double get_footer();
    public void set_footer(double value);
}
[DesignerCategoryAttribute("code")]
[XmlTypeAttribute]
[XmlRootAttribute]
public class NPOI.OpenXmlFormats.Dml.Chart.CT_PageSetup : object {
    private UInt32 paperSizeField;
    private UInt32 firstPageNumberField;
    private ST_PageSetupOrientation orientationField;
    private bool blackAndWhiteField;
    private bool draftField;
    private bool useFirstPageNumberField;
    private int horizontalDpiField;
    private int verticalDpiField;
    private UInt32 copiesField;
    [XmlAttributeAttribute]
[DefaultValueAttribute("System.UInt32", "1")]
public UInt32 paperSize { get; public set; }
    [XmlAttributeAttribute]
[DefaultValueAttribute("System.UInt32", "1")]
public UInt32 firstPageNumber { get; public set; }
    [XmlAttributeAttribute]
[DefaultValueAttribute("Mono.Cecil.CustomAttributeArgument")]
public ST_PageSetupOrientation orientation { get; public set; }
    [XmlAttributeAttribute]
[DefaultValueAttribute("False")]
public bool blackAndWhite { get; public set; }
    [XmlAttributeAttribute]
[DefaultValueAttribute("False")]
public bool draft { get; public set; }
    [XmlAttributeAttribute]
[DefaultValueAttribute("False")]
public bool useFirstPageNumber { get; public set; }
    [XmlAttributeAttribute]
[DefaultValueAttribute("600")]
public int horizontalDpi { get; public set; }
    [XmlAttributeAttribute]
[DefaultValueAttribute("600")]
public int verticalDpi { get; public set; }
    [XmlAttributeAttribute]
[DefaultValueAttribute("System.UInt32", "1")]
public UInt32 copies { get; public set; }
    public static CT_PageSetup Parse(XmlNode node, XmlNamespaceManager namespaceManager);
    internal void Write(StreamWriter sw, string nodeName);
    public UInt32 get_paperSize();
    public void set_paperSize(UInt32 value);
    public UInt32 get_firstPageNumber();
    public void set_firstPageNumber(UInt32 value);
    public ST_PageSetupOrientation get_orientation();
    public void set_orientation(ST_PageSetupOrientation value);
    public bool get_blackAndWhite();
    public void set_blackAndWhite(bool value);
    public bool get_draft();
    public void set_draft(bool value);
    public bool get_useFirstPageNumber();
    public void set_useFirstPageNumber(bool value);
    public int get_horizontalDpi();
    public void set_horizontalDpi(int value);
    public int get_verticalDpi();
    public void set_verticalDpi(int value);
    public UInt32 get_copies();
    public void set_copies(UInt32 value);
}
[DesignerCategoryAttribute("code")]
[XmlTypeAttribute]
[XmlRootAttribute]
public class NPOI.OpenXmlFormats.Dml.Chart.CT_Period : object {
    private byte valField;
    [XmlAttributeAttribute]
[DefaultValueAttribute("System.Byte", "2")]
public byte val { get; public set; }
    public static CT_Period Parse(XmlNode node, XmlNamespaceManager namespaceManager);
    internal void Write(StreamWriter sw, string nodeName);
    public byte get_val();
    public void set_val(byte value);
}
[DesignerCategoryAttribute("code")]
[XmlTypeAttribute]
[XmlRootAttribute]
public class NPOI.OpenXmlFormats.Dml.Chart.CT_Perspective : object {
    private byte valField;
    [XmlAttributeAttribute]
[DefaultValueAttribute("System.Byte", "30")]
public byte val { get; public set; }
    public static CT_Perspective Parse(XmlNode node, XmlNamespaceManager namespaceManager);
    internal void Write(StreamWriter sw, string nodeName);
    public byte get_val();
    public void set_val(byte value);
}
[DesignerCategoryAttribute("code")]
[XmlTypeAttribute]
[XmlRootAttribute]
public class NPOI.OpenXmlFormats.Dml.Chart.CT_PictureFormat : object {
    private ST_PictureFormat valField;
    [XmlAttributeAttribute]
public ST_PictureFormat val { get; public set; }
    public static CT_PictureFormat Parse(XmlNode node, XmlNamespaceManager namespaceManager);
    internal void Write(StreamWriter sw, string nodeName);
    public ST_PictureFormat get_val();
    public void set_val(ST_PictureFormat value);
}
[DesignerCategoryAttribute("code")]
[XmlTypeAttribute]
[XmlRootAttribute]
public class NPOI.OpenXmlFormats.Dml.Chart.CT_PictureOptions : object {
    private CT_Boolean applyToFrontField;
    private CT_Boolean applyToSidesField;
    private CT_Boolean applyToEndField;
    private CT_PictureFormat pictureFormatField;
    private CT_PictureStackUnit pictureStackUnitField;
    [XmlElementAttribute]
public CT_Boolean applyToFront { get; public set; }
    [XmlElementAttribute]
public CT_Boolean applyToSides { get; public set; }
    [XmlElementAttribute]
public CT_Boolean applyToEnd { get; public set; }
    [XmlElementAttribute]
public CT_PictureFormat pictureFormat { get; public set; }
    [XmlElementAttribute]
public CT_PictureStackUnit pictureStackUnit { get; public set; }
    public static CT_PictureOptions Parse(XmlNode node, XmlNamespaceManager namespaceManager);
    internal void Write(StreamWriter sw, string nodeName);
    public CT_Boolean get_applyToFront();
    public void set_applyToFront(CT_Boolean value);
    public CT_Boolean get_applyToSides();
    public void set_applyToSides(CT_Boolean value);
    public CT_Boolean get_applyToEnd();
    public void set_applyToEnd(CT_Boolean value);
    public CT_PictureFormat get_pictureFormat();
    public void set_pictureFormat(CT_PictureFormat value);
    public CT_PictureStackUnit get_pictureStackUnit();
    public void set_pictureStackUnit(CT_PictureStackUnit value);
}
[DesignerCategoryAttribute("code")]
[XmlTypeAttribute]
[XmlRootAttribute]
public class NPOI.OpenXmlFormats.Dml.Chart.CT_PictureStackUnit : object {
    private double valField;
    [XmlAttributeAttribute]
public double val { get; public set; }
    public static CT_PictureStackUnit Parse(XmlNode node, XmlNamespaceManager namespaceManager);
    internal void Write(StreamWriter sw, string nodeName);
    public double get_val();
    public void set_val(double value);
}
[DesignerCategoryAttribute("code")]
[XmlTypeAttribute]
[XmlRootAttribute]
public class NPOI.OpenXmlFormats.Dml.Chart.CT_Pie3DChart : object {
    private CT_Boolean varyColorsField;
    private List`1<CT_PieSer> serField;
    private CT_DLbls dLblsField;
    private List`1<CT_Extension> extLstField;
    [XmlElementAttribute]
public CT_Boolean varyColors { get; public set; }
    [XmlElementAttribute("ser")]
public List`1<CT_PieSer> ser { get; public set; }
    [XmlElementAttribute]
public CT_DLbls dLbls { get; public set; }
    [XmlElementAttribute]
public List`1<CT_Extension> extLst { get; public set; }
    public static CT_Pie3DChart Parse(XmlNode node, XmlNamespaceManager namespaceManager);
    internal void Write(StreamWriter sw, string nodeName);
    public int GetSeriesCount();
    public CT_Boolean get_varyColors();
    public void set_varyColors(CT_Boolean value);
    public List`1<CT_PieSer> get_ser();
    public void set_ser(List`1<CT_PieSer> value);
    public CT_DLbls get_dLbls();
    public void set_dLbls(CT_DLbls value);
    public List`1<CT_Extension> get_extLst();
    public void set_extLst(List`1<CT_Extension> value);
}
[DesignerCategoryAttribute("code")]
[XmlTypeAttribute]
[XmlRootAttribute]
public class NPOI.OpenXmlFormats.Dml.Chart.CT_PieChart : object {
    private CT_Boolean varyColorsField;
    private List`1<CT_PieSer> serField;
    private CT_DLbls dLblsField;
    private CT_FirstSliceAng firstSliceAngField;
    private List`1<CT_Extension> extLstField;
    [XmlElementAttribute]
public CT_Boolean varyColors { get; public set; }
    [XmlElementAttribute("ser")]
public List`1<CT_PieSer> ser { get; public set; }
    [XmlElementAttribute]
public CT_DLbls dLbls { get; public set; }
    [XmlElementAttribute]
public CT_FirstSliceAng firstSliceAng { get; public set; }
    [XmlElementAttribute]
public List`1<CT_Extension> extLst { get; public set; }
    public static CT_PieChart Parse(XmlNode node, XmlNamespaceManager namespaceManager);
    internal void Write(StreamWriter sw, string nodeName);
    public int GetSeriesCount();
    public CT_Boolean get_varyColors();
    public void set_varyColors(CT_Boolean value);
    public List`1<CT_PieSer> get_ser();
    public void set_ser(List`1<CT_PieSer> value);
    public CT_DLbls get_dLbls();
    public void set_dLbls(CT_DLbls value);
    public CT_FirstSliceAng get_firstSliceAng();
    public void set_firstSliceAng(CT_FirstSliceAng value);
    public List`1<CT_Extension> get_extLst();
    public void set_extLst(List`1<CT_Extension> value);
    public CT_PieSer AddNewSer();
    public CT_Boolean AddNewVaryColors();
}
[DesignerCategoryAttribute("code")]
[XmlTypeAttribute]
[XmlRootAttribute]
public class NPOI.OpenXmlFormats.Dml.Chart.CT_PieSer : object {
    private CT_UnsignedInt idxField;
    private CT_UnsignedInt orderField;
    private CT_SerTx txField;
    private CT_ShapeProperties spPrField;
    private CT_UnsignedInt explosionField;
    private List`1<CT_DPt> dPtField;
    private CT_DLbls dLblsField;
    private CT_AxDataSource catField;
    private CT_NumDataSource valField;
    private List`1<CT_Extension> extLstField;
    [XmlElementAttribute]
public CT_UnsignedInt idx { get; public set; }
    [XmlElementAttribute]
public CT_UnsignedInt order { get; public set; }
    [XmlElementAttribute]
public CT_SerTx tx { get; public set; }
    [XmlElementAttribute]
public CT_ShapeProperties spPr { get; public set; }
    [XmlElementAttribute]
public CT_UnsignedInt explosion { get; public set; }
    [XmlElementAttribute("dPt")]
public List`1<CT_DPt> dPt { get; public set; }
    [XmlElementAttribute]
public CT_DLbls dLbls { get; public set; }
    [XmlElementAttribute]
public CT_AxDataSource cat { get; public set; }
    [XmlElementAttribute]
public CT_NumDataSource val { get; public set; }
    [XmlArrayAttribute]
[XmlArrayItemAttribute("ext")]
public List`1<CT_Extension> extLst { get; public set; }
    public static CT_PieSer Parse(XmlNode node, XmlNamespaceManager namespaceManager);
    internal void Write(StreamWriter sw, string nodeName);
    public CT_UnsignedInt get_idx();
    public void set_idx(CT_UnsignedInt value);
    public CT_UnsignedInt get_order();
    public void set_order(CT_UnsignedInt value);
    public CT_SerTx get_tx();
    public void set_tx(CT_SerTx value);
    public CT_ShapeProperties get_spPr();
    public void set_spPr(CT_ShapeProperties value);
    public CT_UnsignedInt get_explosion();
    public void set_explosion(CT_UnsignedInt value);
    public List`1<CT_DPt> get_dPt();
    public void set_dPt(List`1<CT_DPt> value);
    public CT_DLbls get_dLbls();
    public void set_dLbls(CT_DLbls value);
    public CT_AxDataSource get_cat();
    public void set_cat(CT_AxDataSource value);
    public CT_NumDataSource get_val();
    public void set_val(CT_NumDataSource value);
    public List`1<CT_Extension> get_extLst();
    public void set_extLst(List`1<CT_Extension> value);
    public CT_UnsignedInt AddNewIdx();
    public CT_UnsignedInt AddNewOrder();
    public CT_AxDataSource AddNewCat();
    public CT_NumDataSource AddNewVal();
}
[DesignerCategoryAttribute("code")]
[XmlTypeAttribute]
[XmlRootAttribute]
public class NPOI.OpenXmlFormats.Dml.Chart.CT_PivotFmt : object {
    private CT_UnsignedInt idxField;
    private CT_ShapeProperties spPrField;
    private CT_TextBody txPrField;
    private CT_Marker markerField;
    private CT_DLbl dLblField;
    private List`1<CT_Extension> extLstField;
    [XmlElementAttribute]
public CT_UnsignedInt idx { get; public set; }
    [XmlElementAttribute]
public CT_ShapeProperties spPr { get; public set; }
    [XmlElementAttribute]
public CT_TextBody txPr { get; public set; }
    [XmlElementAttribute]
public CT_Marker marker { get; public set; }
    [XmlElementAttribute]
public CT_DLbl dLbl { get; public set; }
    [XmlElementAttribute]
public List`1<CT_Extension> extLst { get; public set; }
    public static CT_PivotFmt Parse(XmlNode node, XmlNamespaceManager namespaceManager);
    internal void Write(StreamWriter sw, string nodeName);
    public CT_UnsignedInt get_idx();
    public void set_idx(CT_UnsignedInt value);
    public CT_ShapeProperties get_spPr();
    public void set_spPr(CT_ShapeProperties value);
    public CT_TextBody get_txPr();
    public void set_txPr(CT_TextBody value);
    public CT_Marker get_marker();
    public void set_marker(CT_Marker value);
    public CT_DLbl get_dLbl();
    public void set_dLbl(CT_DLbl value);
    public List`1<CT_Extension> get_extLst();
    public void set_extLst(List`1<CT_Extension> value);
}
[DesignerCategoryAttribute("code")]
[XmlTypeAttribute]
[XmlRootAttribute]
public class NPOI.OpenXmlFormats.Dml.Chart.CT_PivotFmts : object {
    private List`1<CT_PivotFmt> pivotFmtField;
    [XmlElementAttribute("pivotFmt")]
public List`1<CT_PivotFmt> pivotFmt { get; public set; }
    public static CT_PivotFmts Parse(XmlNode node, XmlNamespaceManager namespaceManager);
    internal void Write(StreamWriter sw, string nodeName);
    public List`1<CT_PivotFmt> get_pivotFmt();
    public void set_pivotFmt(List`1<CT_PivotFmt> value);
}
[DesignerCategoryAttribute("code")]
[XmlTypeAttribute]
[XmlRootAttribute]
public class NPOI.OpenXmlFormats.Dml.Chart.CT_PivotSource : object {
    private string nameField;
    private CT_UnsignedInt fmtIdField;
    private List`1<CT_Extension> extLstField;
    [XmlElementAttribute]
public string name { get; public set; }
    [XmlElementAttribute]
public CT_UnsignedInt fmtId { get; public set; }
    [XmlElementAttribute]
public List`1<CT_Extension> extLst { get; public set; }
    public static CT_PivotSource Parse(XmlNode node, XmlNamespaceManager namespaceManager);
    internal void Write(StreamWriter sw, string nodeName);
    public string get_name();
    public void set_name(string value);
    public CT_UnsignedInt get_fmtId();
    public void set_fmtId(CT_UnsignedInt value);
    public List`1<CT_Extension> get_extLst();
    public void set_extLst(List`1<CT_Extension> value);
}
[DesignerCategoryAttribute("code")]
[XmlTypeAttribute]
[XmlRootAttribute]
public class NPOI.OpenXmlFormats.Dml.Chart.CT_PlotArea : object {
    private CT_Layout layoutField;
    private CT_DTable dTableField;
    private CT_ShapeProperties spPrField;
    private List`1<CT_Extension> extLstField;
    private List`1<CT_ValAx> valAxField;
    private List`1<CT_SerAx> serAxField;
    private List`1<CT_CatAx> catAxField;
    private List`1<CT_DateAx> dateAxField;
    private List`1<CT_SurfaceChart> surfaceChartField;
    private List`1<CT_LineChart> lineChartField;
    private List`1<CT_BubbleChart> bubbleChartField;
    private List`1<CT_Bar3DChart> bar3DChartField;
    private List`1<CT_Area3DChart> area3DChartField;
    private List`1<CT_DoughnutChart> doughnutChartField;
    private List`1<CT_Pie3DChart> pie3DChartField;
    private List`1<CT_Line3DChart> line3DChartField;
    private List`1<CT_Surface3DChart> surface3DChartField;
    private List`1<CT_BarChart> barChartField;
    private List`1<CT_RadarChart> radarChartField;
    private List`1<CT_AreaChart> areaChartField;
    private List`1<CT_ScatterChart> scatterChartField;
    private List`1<CT_OfPieChart> ofPieChartField;
    private List`1<CT_PieChart> pieChartField;
    private List`1<CT_StockChart> stockChartField;
    [XmlElementAttribute]
public CT_Layout layout { get; public set; }
    public List`1<CT_SurfaceChart> surfaceChart { get; public set; }
    public List`1<CT_LineChart> lineChart { get; public set; }
    public List`1<CT_BubbleChart> bubbleChart { get; public set; }
    public List`1<CT_Bar3DChart> bar3DChart { get; public set; }
    public List`1<CT_Area3DChart> area3DChart { get; public set; }
    public List`1<CT_DoughnutChart> doughnutChart { get; public set; }
    public List`1<CT_Pie3DChart> pie3DChart { get; public set; }
    public List`1<CT_Line3DChart> line3DChart { get; public set; }
    public List`1<CT_Surface3DChart> surface3DChart { get; public set; }
    public List`1<CT_BarChart> barChart { get; public set; }
    public List`1<CT_RadarChart> radarChart { get; public set; }
    public List`1<CT_AreaChart> areaChart { get; public set; }
    public List`1<CT_ScatterChart> scatterChart { get; public set; }
    public List`1<CT_OfPieChart> ofPieChart { get; public set; }
    public List`1<CT_PieChart> pieChart { get; public set; }
    public List`1<CT_StockChart> stockChart { get; public set; }
    [XmlElementAttribute]
public List`1<CT_ValAx> valAx { get; public set; }
    [XmlElementAttribute]
public List`1<CT_SerAx> serAx { get; public set; }
    [XmlElementAttribute]
public List`1<CT_DateAx> dateAx { get; public set; }
    [XmlElementAttribute]
public List`1<CT_CatAx> catAx { get; public set; }
    [XmlElementAttribute]
public CT_DTable dTable { get; public set; }
    [XmlElementAttribute]
public CT_ShapeProperties spPr { get; public set; }
    [XmlElementAttribute]
public List`1<CT_Extension> extLst { get; public set; }
    public static CT_PlotArea Parse(XmlNode node, XmlNamespaceManager namespaceManager);
    internal void Write(StreamWriter sw, string nodeName);
    public CT_ValAx AddNewValAx();
    public CT_SerAx AddNewSerAx();
    public bool IsSetLayout();
    public CT_Layout get_layout();
    public void set_layout(CT_Layout value);
    public CT_Layout AddNewLayout();
    public CT_Pie3DChart AddNewPie3DChart();
    public CT_PieChart AddNewPieChart();
    public CT_ScatterChart AddNewScatterChart();
    public int GetAllSeriesCount();
    public List`1<CT_SurfaceChart> get_surfaceChart();
    public void set_surfaceChart(List`1<CT_SurfaceChart> value);
    public List`1<CT_LineChart> get_lineChart();
    public void set_lineChart(List`1<CT_LineChart> value);
    public List`1<CT_BubbleChart> get_bubbleChart();
    public void set_bubbleChart(List`1<CT_BubbleChart> value);
    public List`1<CT_Bar3DChart> get_bar3DChart();
    public void set_bar3DChart(List`1<CT_Bar3DChart> value);
    public List`1<CT_Area3DChart> get_area3DChart();
    public void set_area3DChart(List`1<CT_Area3DChart> value);
    public List`1<CT_DoughnutChart> get_doughnutChart();
    public void set_doughnutChart(List`1<CT_DoughnutChart> value);
    public List`1<CT_Pie3DChart> get_pie3DChart();
    public void set_pie3DChart(List`1<CT_Pie3DChart> value);
    public List`1<CT_Line3DChart> get_line3DChart();
    public void set_line3DChart(List`1<CT_Line3DChart> value);
    public List`1<CT_Surface3DChart> get_surface3DChart();
    public void set_surface3DChart(List`1<CT_Surface3DChart> value);
    public List`1<CT_BarChart> get_barChart();
    public void set_barChart(List`1<CT_BarChart> value);
    public List`1<CT_RadarChart> get_radarChart();
    public void set_radarChart(List`1<CT_RadarChart> value);
    public List`1<CT_AreaChart> get_areaChart();
    public void set_areaChart(List`1<CT_AreaChart> value);
    public List`1<CT_ScatterChart> get_scatterChart();
    public void set_scatterChart(List`1<CT_ScatterChart> value);
    public List`1<CT_OfPieChart> get_ofPieChart();
    public void set_ofPieChart(List`1<CT_OfPieChart> value);
    public List`1<CT_PieChart> get_pieChart();
    public void set_pieChart(List`1<CT_PieChart> value);
    public List`1<CT_StockChart> get_stockChart();
    public void set_stockChart(List`1<CT_StockChart> value);
    public List`1<CT_ValAx> get_valAx();
    public void set_valAx(List`1<CT_ValAx> value);
    public List`1<CT_SerAx> get_serAx();
    public void set_serAx(List`1<CT_SerAx> value);
    public List`1<CT_DateAx> get_dateAx();
    public void set_dateAx(List`1<CT_DateAx> value);
    public List`1<CT_CatAx> get_catAx();
    public void set_catAx(List`1<CT_CatAx> value);
    public CT_DTable get_dTable();
    public void set_dTable(CT_DTable value);
    public CT_ShapeProperties get_spPr();
    public void set_spPr(CT_ShapeProperties value);
    public List`1<CT_Extension> get_extLst();
    public void set_extLst(List`1<CT_Extension> value);
    public CT_BarChart AddNewBarChart();
    public CT_AreaChart AddNewAreaChart();
    public CT_LineChart AddNewLineChart();
    public CT_CatAx AddNewCatAx();
    public CT_DateAx AddNewDateAx();
}
[DesignerCategoryAttribute("code")]
[XmlTypeAttribute]
[XmlRootAttribute]
public class NPOI.OpenXmlFormats.Dml.Chart.CT_PrintSettings : object {
    private CT_HeaderFooter headerFooterField;
    private CT_PageMargins pageMarginsField;
    private CT_PageSetup pageSetupField;
    private CT_RelId legacyDrawingHFField;
    [XmlElementAttribute]
public CT_HeaderFooter headerFooter { get; public set; }
    [XmlElementAttribute]
public CT_PageMargins pageMargins { get; public set; }
    [XmlElementAttribute]
public CT_PageSetup pageSetup { get; public set; }
    [XmlElementAttribute]
public CT_RelId legacyDrawingHF { get; public set; }
    public static CT_PrintSettings Parse(XmlNode node, XmlNamespaceManager namespaceManager);
    internal void Write(StreamWriter sw, string nodeName);
    public CT_HeaderFooter AddNewHeaderFooter();
    public CT_PageSetup AddNewPageSetup();
    public CT_PageMargins AddNewPageMargins();
    public CT_HeaderFooter get_headerFooter();
    public void set_headerFooter(CT_HeaderFooter value);
    public CT_PageMargins get_pageMargins();
    public void set_pageMargins(CT_PageMargins value);
    public CT_PageSetup get_pageSetup();
    public void set_pageSetup(CT_PageSetup value);
    public CT_RelId get_legacyDrawingHF();
    public void set_legacyDrawingHF(CT_RelId value);
}
[DesignerCategoryAttribute("code")]
[XmlTypeAttribute]
[XmlRootAttribute]
public class NPOI.OpenXmlFormats.Dml.Chart.CT_Protection : object {
    private CT_Boolean chartObjectField;
    private CT_Boolean dataField;
    private CT_Boolean formattingField;
    private CT_Boolean selectionField;
    private CT_Boolean userInterfaceField;
    [XmlElementAttribute]
public CT_Boolean chartObject { get; public set; }
    [XmlElementAttribute]
public CT_Boolean data { get; public set; }
    [XmlElementAttribute]
public CT_Boolean formatting { get; public set; }
    [XmlElementAttribute]
public CT_Boolean selection { get; public set; }
    [XmlElementAttribute]
public CT_Boolean userInterface { get; public set; }
    public static CT_Protection Parse(XmlNode node, XmlNamespaceManager namespaceManager);
    internal void Write(StreamWriter sw, string nodeName);
    public CT_Boolean get_chartObject();
    public void set_chartObject(CT_Boolean value);
    public CT_Boolean get_data();
    public void set_data(CT_Boolean value);
    public CT_Boolean get_formatting();
    public void set_formatting(CT_Boolean value);
    public CT_Boolean get_selection();
    public void set_selection(CT_Boolean value);
    public CT_Boolean get_userInterface();
    public void set_userInterface(CT_Boolean value);
}
[DesignerCategoryAttribute("code")]
[XmlTypeAttribute]
[XmlRootAttribute]
public class NPOI.OpenXmlFormats.Dml.Chart.CT_RadarChart : object {
    private CT_RadarStyle radarStyleField;
    private CT_Boolean varyColorsField;
    private List`1<CT_RadarSer> serField;
    private CT_DLbls dLblsField;
    private List`1<CT_UnsignedInt> axIdField;
    private List`1<CT_Extension> extLstField;
    [XmlElementAttribute]
public CT_RadarStyle radarStyle { get; public set; }
    [XmlElementAttribute]
public CT_Boolean varyColors { get; public set; }
    [XmlElementAttribute("ser")]
public List`1<CT_RadarSer> ser { get; public set; }
    [XmlElementAttribute]
public CT_DLbls dLbls { get; public set; }
    [XmlElementAttribute("axId")]
public List`1<CT_UnsignedInt> axId { get; public set; }
    [XmlElementAttribute]
public List`1<CT_Extension> extLst { get; public set; }
    public static CT_RadarChart Parse(XmlNode node, XmlNamespaceManager namespaceManager);
    internal void Write(StreamWriter sw, string nodeName);
    public int GetSeriesCount();
    public CT_RadarStyle get_radarStyle();
    public void set_radarStyle(CT_RadarStyle value);
    public CT_Boolean get_varyColors();
    public void set_varyColors(CT_Boolean value);
    public List`1<CT_RadarSer> get_ser();
    public void set_ser(List`1<CT_RadarSer> value);
    public CT_DLbls get_dLbls();
    public void set_dLbls(CT_DLbls value);
    public List`1<CT_UnsignedInt> get_axId();
    public void set_axId(List`1<CT_UnsignedInt> value);
    public List`1<CT_Extension> get_extLst();
    public void set_extLst(List`1<CT_Extension> value);
}
[DesignerCategoryAttribute("code")]
[XmlTypeAttribute]
[XmlRootAttribute]
public class NPOI.OpenXmlFormats.Dml.Chart.CT_RadarSer : object {
    private CT_UnsignedInt idxField;
    private CT_UnsignedInt orderField;
    private CT_SerTx txField;
    private CT_ShapeProperties spPrField;
    private CT_Marker markerField;
    private List`1<CT_DPt> dPtField;
    private CT_DLbls dLblsField;
    private CT_AxDataSource catField;
    private CT_NumDataSource valField;
    private List`1<CT_Extension> extLstField;
    [XmlElementAttribute]
public CT_UnsignedInt idx { get; public set; }
    [XmlElementAttribute]
public CT_UnsignedInt order { get; public set; }
    [XmlElementAttribute]
public CT_SerTx tx { get; public set; }
    [XmlElementAttribute]
public CT_ShapeProperties spPr { get; public set; }
    [XmlElementAttribute]
public CT_Marker marker { get; public set; }
    [XmlElementAttribute("dPt")]
public List`1<CT_DPt> dPt { get; public set; }
    [XmlElementAttribute]
public CT_DLbls dLbls { get; public set; }
    [XmlElementAttribute]
public CT_AxDataSource cat { get; public set; }
    [XmlElementAttribute]
public CT_NumDataSource val { get; public set; }
    [XmlElementAttribute]
public List`1<CT_Extension> extLst { get; public set; }
    public static CT_RadarSer Parse(XmlNode node, XmlNamespaceManager namespaceManager);
    internal void Write(StreamWriter sw, string nodeName);
    public CT_UnsignedInt get_idx();
    public void set_idx(CT_UnsignedInt value);
    public CT_UnsignedInt get_order();
    public void set_order(CT_UnsignedInt value);
    public CT_SerTx get_tx();
    public void set_tx(CT_SerTx value);
    public CT_ShapeProperties get_spPr();
    public void set_spPr(CT_ShapeProperties value);
    public CT_Marker get_marker();
    public void set_marker(CT_Marker value);
    public List`1<CT_DPt> get_dPt();
    public void set_dPt(List`1<CT_DPt> value);
    public CT_DLbls get_dLbls();
    public void set_dLbls(CT_DLbls value);
    public CT_AxDataSource get_cat();
    public void set_cat(CT_AxDataSource value);
    public CT_NumDataSource get_val();
    public void set_val(CT_NumDataSource value);
    public List`1<CT_Extension> get_extLst();
    public void set_extLst(List`1<CT_Extension> value);
}
[DesignerCategoryAttribute("code")]
[XmlTypeAttribute]
[XmlRootAttribute]
public class NPOI.OpenXmlFormats.Dml.Chart.CT_RadarStyle : object {
    private ST_RadarStyle valField;
    [XmlAttributeAttribute]
[DefaultValueAttribute("Mono.Cecil.CustomAttributeArgument")]
public ST_RadarStyle val { get; public set; }
    public static CT_RadarStyle Parse(XmlNode node, XmlNamespaceManager namespaceManager);
    internal void Write(StreamWriter sw, string nodeName);
    public ST_RadarStyle get_val();
    public void set_val(ST_RadarStyle value);
}
[DesignerCategoryAttribute("code")]
[XmlTypeAttribute]
[XmlRootAttribute("chart")]
public class NPOI.OpenXmlFormats.Dml.Chart.CT_RelId : object {
    private string idField;
    [XmlAttributeAttribute]
public string id { get; public set; }
    public string get_id();
    public void set_id(string value);
    public static CT_RelId Parse(XmlNode node, XmlNamespaceManager namespaceManager);
    internal void Write(StreamWriter sw, string nodeName);
}
[DesignerCategoryAttribute("code")]
[XmlTypeAttribute]
[XmlRootAttribute]
public class NPOI.OpenXmlFormats.Dml.Chart.CT_RotX : object {
    private sbyte valField;
    [XmlAttributeAttribute]
[DefaultValueAttribute("System.SByte", "0")]
public sbyte val { get; public set; }
    public static CT_RotX Parse(XmlNode node, XmlNamespaceManager namespaceManager);
    internal void Write(StreamWriter sw, string nodeName);
    public sbyte get_val();
    public void set_val(sbyte value);
}
[DesignerCategoryAttribute("code")]
[XmlTypeAttribute]
[XmlRootAttribute]
public class NPOI.OpenXmlFormats.Dml.Chart.CT_RotY : object {
    private ushort valField;
    [XmlAttributeAttribute]
[DefaultValueAttribute("System.UInt16", "0")]
public ushort val { get; public set; }
    public static CT_RotY Parse(XmlNode node, XmlNamespaceManager namespaceManager);
    internal void Write(StreamWriter sw, string nodeName);
    public ushort get_val();
    public void set_val(ushort value);
}
[DesignerCategoryAttribute("code")]
[XmlTypeAttribute]
[XmlRootAttribute]
public class NPOI.OpenXmlFormats.Dml.Chart.CT_Scaling : object {
    private CT_LogBase logBaseField;
    private CT_Orientation orientationField;
    private CT_Double maxField;
    private CT_Double minField;
    private List`1<CT_Extension> extLstField;
    [XmlElementAttribute]
public CT_LogBase logBase { get; public set; }
    [XmlElementAttribute]
public CT_Orientation orientation { get; public set; }
    [XmlElementAttribute]
public CT_Double max { get; public set; }
    [XmlElementAttribute]
public CT_Double min { get; public set; }
    [XmlElementAttribute]
public List`1<CT_Extension> extLst { get; public set; }
    public static CT_Scaling Parse(XmlNode node, XmlNamespaceManager namespaceManager);
    internal void Write(StreamWriter sw, string nodeName);
    public bool IsSetOrientation();
    public CT_Orientation AddNewOrientation();
    public bool IsSetLogBase();
    public CT_LogBase AddNewLogBase();
    public bool IsSetMax();
    public CT_Double AddNewMax();
    public bool IsSetMin();
    public CT_Double AddNewMin();
    public CT_LogBase get_logBase();
    public void set_logBase(CT_LogBase value);
    public CT_Orientation get_orientation();
    public void set_orientation(CT_Orientation value);
    public CT_Double get_max();
    public void set_max(CT_Double value);
    public CT_Double get_min();
    public void set_min(CT_Double value);
    public List`1<CT_Extension> get_extLst();
    public void set_extLst(List`1<CT_Extension> value);
}
[DesignerCategoryAttribute("code")]
[XmlTypeAttribute]
[XmlRootAttribute]
public class NPOI.OpenXmlFormats.Dml.Chart.CT_ScatterChart : object {
    private CT_ScatterStyle scatterStyleField;
    private CT_Boolean varyColorsField;
    private List`1<CT_ScatterSer> serField;
    private CT_DLbls dLblsField;
    private List`1<CT_UnsignedInt> axIdField;
    private List`1<CT_Extension> extLstField;
    [XmlElementAttribute]
public CT_ScatterStyle scatterStyle { get; public set; }
    [XmlElementAttribute]
public CT_Boolean varyColors { get; public set; }
    [XmlElementAttribute("ser")]
public List`1<CT_ScatterSer> ser { get; public set; }
    [XmlElementAttribute]
public CT_DLbls dLbls { get; public set; }
    [XmlElementAttribute("axId")]
public List`1<CT_UnsignedInt> axId { get; public set; }
    [XmlElementAttribute]
public List`1<CT_Extension> extLst { get; public set; }
    public static CT_ScatterChart Parse(XmlNode node, XmlNamespaceManager namespaceManager);
    internal void Write(StreamWriter sw, string nodeName);
    public CT_ScatterStyle AddNewScatterStyle();
    public CT_UnsignedInt AddNewAxId();
    public CT_ScatterSer AddNewSer();
    public int GetSeriesCount();
    public CT_ScatterStyle get_scatterStyle();
    public void set_scatterStyle(CT_ScatterStyle value);
    public CT_Boolean get_varyColors();
    public void set_varyColors(CT_Boolean value);
    public List`1<CT_ScatterSer> get_ser();
    public void set_ser(List`1<CT_ScatterSer> value);
    public CT_DLbls get_dLbls();
    public void set_dLbls(CT_DLbls value);
    public List`1<CT_UnsignedInt> get_axId();
    public void set_axId(List`1<CT_UnsignedInt> value);
    public List`1<CT_Extension> get_extLst();
    public void set_extLst(List`1<CT_Extension> value);
}
[DesignerCategoryAttribute("code")]
[XmlTypeAttribute]
[XmlRootAttribute]
public class NPOI.OpenXmlFormats.Dml.Chart.CT_ScatterSer : object {
    private CT_UnsignedInt idxField;
    private CT_UnsignedInt orderField;
    private CT_SerTx txField;
    private CT_ShapeProperties spPrField;
    private CT_Marker markerField;
    private List`1<CT_DPt> dPtField;
    private CT_DLbls dLblsField;
    private List`1<CT_Trendline> trendlineField;
    private List`1<CT_ErrBars> errBarsField;
    private CT_AxDataSource xValField;
    private CT_NumDataSource yValField;
    private CT_Boolean smoothField;
    private List`1<CT_Extension> extLstField;
    [XmlElementAttribute]
public CT_UnsignedInt idx { get; public set; }
    [XmlElementAttribute]
public CT_UnsignedInt order { get; public set; }
    [XmlElementAttribute]
public CT_SerTx tx { get; public set; }
    [XmlElementAttribute]
public CT_ShapeProperties spPr { get; public set; }
    [XmlElementAttribute]
public CT_Marker marker { get; public set; }
    [XmlElementAttribute("dPt")]
public List`1<CT_DPt> dPt { get; public set; }
    [XmlElementAttribute]
public CT_DLbls dLbls { get; public set; }
    [XmlElementAttribute("trendline")]
public List`1<CT_Trendline> trendline { get; public set; }
    [XmlElementAttribute("errBars")]
public List`1<CT_ErrBars> errBars { get; public set; }
    [XmlElementAttribute]
public CT_AxDataSource xVal { get; public set; }
    [XmlElementAttribute]
public CT_NumDataSource yVal { get; public set; }
    [XmlElementAttribute]
public CT_Boolean smooth { get; public set; }
    [XmlElementAttribute]
public List`1<CT_Extension> extLst { get; public set; }
    public static CT_ScatterSer Parse(XmlNode node, XmlNamespaceManager namespaceManager);
    internal void Write(StreamWriter sw, string nodeName);
    public CT_UnsignedInt AddNewIdx();
    public CT_UnsignedInt AddNewOrder();
    public CT_AxDataSource AddNewXVal();
    public CT_NumDataSource AddNewYVal();
    public CT_UnsignedInt get_idx();
    public void set_idx(CT_UnsignedInt value);
    public CT_UnsignedInt get_order();
    public void set_order(CT_UnsignedInt value);
    public CT_SerTx get_tx();
    public void set_tx(CT_SerTx value);
    public CT_ShapeProperties get_spPr();
    public void set_spPr(CT_ShapeProperties value);
    public CT_Marker get_marker();
    public void set_marker(CT_Marker value);
    public List`1<CT_DPt> get_dPt();
    public void set_dPt(List`1<CT_DPt> value);
    public CT_DLbls get_dLbls();
    public void set_dLbls(CT_DLbls value);
    public List`1<CT_Trendline> get_trendline();
    public void set_trendline(List`1<CT_Trendline> value);
    public List`1<CT_ErrBars> get_errBars();
    public void set_errBars(List`1<CT_ErrBars> value);
    public CT_AxDataSource get_xVal();
    public void set_xVal(CT_AxDataSource value);
    public CT_NumDataSource get_yVal();
    public void set_yVal(CT_NumDataSource value);
    public CT_Boolean get_smooth();
    public void set_smooth(CT_Boolean value);
    public List`1<CT_Extension> get_extLst();
    public void set_extLst(List`1<CT_Extension> value);
}
[DesignerCategoryAttribute("code")]
[XmlTypeAttribute]
[XmlRootAttribute]
public class NPOI.OpenXmlFormats.Dml.Chart.CT_ScatterStyle : object {
    private ST_ScatterStyle valField;
    [XmlAttributeAttribute]
[DefaultValueAttribute("Mono.Cecil.CustomAttributeArgument")]
public ST_ScatterStyle val { get; public set; }
    public static CT_ScatterStyle Parse(XmlNode node, XmlNamespaceManager namespaceManager);
    internal void Write(StreamWriter sw, string nodeName);
    public ST_ScatterStyle get_val();
    public void set_val(ST_ScatterStyle value);
}
[DesignerCategoryAttribute("code")]
[XmlTypeAttribute]
[XmlRootAttribute]
public class NPOI.OpenXmlFormats.Dml.Chart.CT_SecondPieSize : object {
    private ushort valField;
    [XmlAttributeAttribute]
[DefaultValueAttribute("System.UInt16", "75")]
public ushort val { get; public set; }
    public static CT_SecondPieSize Parse(XmlNode node, XmlNamespaceManager namespaceManager);
    internal void Write(StreamWriter sw, string nodeName);
    public ushort get_val();
    public void set_val(ushort value);
}
[DesignerCategoryAttribute("code")]
[XmlTypeAttribute]
[XmlRootAttribute]
public class NPOI.OpenXmlFormats.Dml.Chart.CT_SerAx : object {
    private CT_UnsignedInt axIdField;
    private CT_Scaling scalingField;
    private CT_Boolean deleteField;
    private CT_AxPos axPosField;
    private CT_ChartLines majorGridlinesField;
    private CT_ChartLines minorGridlinesField;
    private CT_Title titleField;
    private CT_NumFmt numFmtField;
    private CT_TickMark majorTickMarkField;
    private CT_TickMark minorTickMarkField;
    private CT_TickLblPos tickLblPosField;
    private CT_ShapeProperties spPrField;
    private CT_TextBody txPrField;
    private CT_UnsignedInt crossAxField;
    private CT_Skip tickLblSkipField;
    private CT_Skip tickMarkSkipField;
    private List`1<CT_Extension> extLstField;
    private CT_Crosses crossesField;
    private CT_Double crossesAtField;
    [XmlElementAttribute]
public CT_UnsignedInt axId { get; public set; }
    [XmlElementAttribute]
public CT_Scaling scaling { get; public set; }
    [XmlElementAttribute]
public CT_Boolean delete { get; public set; }
    [XmlElementAttribute]
public CT_AxPos axPos { get; public set; }
    [XmlElementAttribute]
public CT_ChartLines majorGridlines { get; public set; }
    [XmlElementAttribute]
public CT_ChartLines minorGridlines { get; public set; }
    [XmlElementAttribute]
public CT_Title title { get; public set; }
    [XmlElementAttribute]
public CT_NumFmt numFmt { get; public set; }
    [XmlElementAttribute]
public CT_TickMark majorTickMark { get; public set; }
    [XmlElementAttribute]
public CT_TickMark minorTickMark { get; public set; }
    [XmlElementAttribute]
public CT_TickLblPos tickLblPos { get; public set; }
    [XmlElementAttribute]
public CT_ShapeProperties spPr { get; public set; }
    [XmlElementAttribute]
public CT_TextBody txPr { get; public set; }
    [XmlElementAttribute]
public CT_UnsignedInt crossAx { get; public set; }
    [XmlElementAttribute]
public CT_Crosses crosses { get; public set; }
    [XmlElementAttribute]
public CT_Double crossesAt { get; public set; }
    [XmlElementAttribute]
public CT_Skip tickLblSkip { get; public set; }
    [XmlElementAttribute]
public CT_Skip tickMarkSkip { get; public set; }
    [XmlElementAttribute]
public List`1<CT_Extension> extLst { get; public set; }
    public static CT_SerAx Parse(XmlNode node, XmlNamespaceManager namespaceManager);
    internal void Write(StreamWriter sw, string nodeName);
    public CT_UnsignedInt get_axId();
    public void set_axId(CT_UnsignedInt value);
    public CT_Scaling get_scaling();
    public void set_scaling(CT_Scaling value);
    public CT_Boolean get_delete();
    public void set_delete(CT_Boolean value);
    public CT_AxPos get_axPos();
    public void set_axPos(CT_AxPos value);
    public CT_ChartLines get_majorGridlines();
    public void set_majorGridlines(CT_ChartLines value);
    public CT_ChartLines get_minorGridlines();
    public void set_minorGridlines(CT_ChartLines value);
    public CT_Title get_title();
    public void set_title(CT_Title value);
    public CT_NumFmt get_numFmt();
    public void set_numFmt(CT_NumFmt value);
    public CT_TickMark get_majorTickMark();
    public void set_majorTickMark(CT_TickMark value);
    public CT_TickMark get_minorTickMark();
    public void set_minorTickMark(CT_TickMark value);
    public CT_TickLblPos get_tickLblPos();
    public void set_tickLblPos(CT_TickLblPos value);
    public CT_ShapeProperties get_spPr();
    public void set_spPr(CT_ShapeProperties value);
    public CT_TextBody get_txPr();
    public void set_txPr(CT_TextBody value);
    public CT_UnsignedInt get_crossAx();
    public void set_crossAx(CT_UnsignedInt value);
    public CT_Crosses get_crosses();
    public void set_crosses(CT_Crosses value);
    public CT_Double get_crossesAt();
    public void set_crossesAt(CT_Double value);
    public CT_Skip get_tickLblSkip();
    public void set_tickLblSkip(CT_Skip value);
    public CT_Skip get_tickMarkSkip();
    public void set_tickMarkSkip(CT_Skip value);
    public List`1<CT_Extension> get_extLst();
    public void set_extLst(List`1<CT_Extension> value);
}
[DesignerCategoryAttribute("code")]
[XmlTypeAttribute]
[XmlRootAttribute]
public class NPOI.OpenXmlFormats.Dml.Chart.CT_SerTx : object {
    private CT_StrRef strRefField;
    private string vField;
    public CT_StrRef strRef { get; public set; }
    public string v { get; public set; }
    public CT_StrRef get_strRef();
    public void set_strRef(CT_StrRef value);
    public string get_v();
    public void set_v(string value);
    public static CT_SerTx Parse(XmlNode node, XmlNamespaceManager namespaceManager);
    internal void Write(StreamWriter sw, string nodeName);
    public CT_StrRef AddNewStrRef();
}
[DesignerCategoryAttribute("code")]
[XmlTypeAttribute]
[XmlRootAttribute]
public class NPOI.OpenXmlFormats.Dml.Chart.CT_Shape : object {
    private ST_Shape valField;
    [XmlAttributeAttribute]
[DefaultValueAttribute("Mono.Cecil.CustomAttributeArgument")]
public ST_Shape val { get; public set; }
    public static CT_Shape Parse(XmlNode node, XmlNamespaceManager namespaceManager);
    internal void Write(StreamWriter sw, string nodeName);
    public ST_Shape get_val();
    public void set_val(ST_Shape value);
}
[XmlTypeAttribute]
[XmlRootAttribute]
public class NPOI.OpenXmlFormats.Dml.Chart.CT_ShapeProperties : object {
    private CT_Transform2D xfrmField;
    private CT_CustomGeometry2D custGeomField;
    private CT_PresetGeometry2D prstGeomField;
    private CT_NoFillProperties noFillField;
    private CT_SolidColorFillProperties solidFillField;
    private CT_GradientFillProperties gradFillField;
    private CT_BlipFillProperties blipFillField;
    private CT_PatternFillProperties pattFillField;
    private CT_GroupFillProperties grpFillField;
    private CT_LineProperties lnField;
    private CT_EffectList effectLstField;
    private CT_EffectContainer effectDagField;
    private CT_Scene3D scene3dField;
    private CT_Shape3D sp3dField;
    private CT_OfficeArtExtensionList extLstField;
    private ST_BlackWhiteMode bwModeField;
    [XmlElementAttribute]
public CT_Transform2D xfrm { get; public set; }
    [XmlElementAttribute]
public CT_CustomGeometry2D custGeom { get; public set; }
    [XmlElementAttribute]
public CT_PresetGeometry2D prstGeom { get; public set; }
    [XmlElementAttribute]
public CT_NoFillProperties noFill { get; public set; }
    [XmlElementAttribute]
public CT_SolidColorFillProperties solidFill { get; public set; }
    [XmlElementAttribute]
public CT_GradientFillProperties gradFill { get; public set; }
    [XmlElementAttribute]
public CT_BlipFillProperties blipFill { get; public set; }
    [XmlElementAttribute]
public CT_PatternFillProperties pattFill { get; public set; }
    [XmlElementAttribute]
public CT_GroupFillProperties grpFill { get; public set; }
    [XmlElementAttribute]
public CT_LineProperties ln { get; public set; }
    [XmlElementAttribute]
public CT_EffectList effectLst { get; public set; }
    [XmlElementAttribute]
public CT_EffectContainer effectDag { get; public set; }
    [XmlElementAttribute]
public CT_Scene3D scene3d { get; public set; }
    [XmlElementAttribute]
public CT_Shape3D sp3d { get; public set; }
    [XmlElementAttribute]
public CT_OfficeArtExtensionList extLst { get; public set; }
    [XmlAttributeAttribute]
public ST_BlackWhiteMode bwMode { get; public set; }
    [XmlIgnoreAttribute]
public bool bwModeSpecified { get; }
    public CT_PresetGeometry2D AddNewPrstGeom();
    public CT_Transform2D AddNewXfrm();
    public CT_SolidColorFillProperties AddNewSolidFill();
    public bool IsSetPattFill();
    public bool IsSetSolidFill();
    public bool IsSetLn();
    public CT_LineProperties AddNewLn();
    public void unsetPattFill();
    public void unsetSolidFill();
    public CT_Transform2D get_xfrm();
    public void set_xfrm(CT_Transform2D value);
    public CT_CustomGeometry2D get_custGeom();
    public void set_custGeom(CT_CustomGeometry2D value);
    public CT_PresetGeometry2D get_prstGeom();
    public void set_prstGeom(CT_PresetGeometry2D value);
    public CT_NoFillProperties get_noFill();
    public void set_noFill(CT_NoFillProperties value);
    public CT_SolidColorFillProperties get_solidFill();
    public void set_solidFill(CT_SolidColorFillProperties value);
    public CT_GradientFillProperties get_gradFill();
    public void set_gradFill(CT_GradientFillProperties value);
    public CT_BlipFillProperties get_blipFill();
    public void set_blipFill(CT_BlipFillProperties value);
    public CT_PatternFillProperties get_pattFill();
    public void set_pattFill(CT_PatternFillProperties value);
    public CT_GroupFillProperties get_grpFill();
    public void set_grpFill(CT_GroupFillProperties value);
    public CT_LineProperties get_ln();
    public void set_ln(CT_LineProperties value);
    public CT_EffectList get_effectLst();
    public void set_effectLst(CT_EffectList value);
    public CT_EffectContainer get_effectDag();
    public void set_effectDag(CT_EffectContainer value);
    public CT_Scene3D get_scene3d();
    public void set_scene3d(CT_Scene3D value);
    public CT_Shape3D get_sp3d();
    public void set_sp3d(CT_Shape3D value);
    public CT_OfficeArtExtensionList get_extLst();
    public void set_extLst(CT_OfficeArtExtensionList value);
    public ST_BlackWhiteMode get_bwMode();
    public void set_bwMode(ST_BlackWhiteMode value);
    public bool get_bwModeSpecified();
    public static CT_ShapeProperties Parse(XmlNode node, XmlNamespaceManager namespaceManager);
    internal void Write(StreamWriter sw, string nodeName);
}
[DesignerCategoryAttribute("code")]
[XmlTypeAttribute]
[XmlRootAttribute]
public class NPOI.OpenXmlFormats.Dml.Chart.CT_SizeRepresents : object {
    private ST_SizeRepresents valField;
    [XmlAttributeAttribute]
[DefaultValueAttribute("Mono.Cecil.CustomAttributeArgument")]
public ST_SizeRepresents val { get; public set; }
    public static CT_SizeRepresents Parse(XmlNode node, XmlNamespaceManager namespaceManager);
    internal void Write(StreamWriter sw, string nodeName);
    public ST_SizeRepresents get_val();
    public void set_val(ST_SizeRepresents value);
}
[DesignerCategoryAttribute("code")]
[XmlTypeAttribute]
[XmlRootAttribute]
public class NPOI.OpenXmlFormats.Dml.Chart.CT_Skip : object {
    private ushort valField;
    [XmlAttributeAttribute]
public ushort val { get; public set; }
    public static CT_Skip Parse(XmlNode node, XmlNamespaceManager namespaceManager);
    internal void Write(StreamWriter sw, string nodeName);
    public ushort get_val();
    public void set_val(ushort value);
}
[DesignerCategoryAttribute("code")]
[XmlTypeAttribute]
[XmlRootAttribute]
public class NPOI.OpenXmlFormats.Dml.Chart.CT_SplitType : object {
    private ST_SplitType valField;
    [XmlAttributeAttribute]
[DefaultValueAttribute("Mono.Cecil.CustomAttributeArgument")]
public ST_SplitType val { get; public set; }
    public static CT_SplitType Parse(XmlNode node, XmlNamespaceManager namespaceManager);
    internal void Write(StreamWriter sw, string nodeName);
    public ST_SplitType get_val();
    public void set_val(ST_SplitType value);
}
[DesignerCategoryAttribute("code")]
[XmlTypeAttribute]
[XmlRootAttribute]
public class NPOI.OpenXmlFormats.Dml.Chart.CT_StockChart : object {
    private List`1<CT_LineSer> serField;
    private CT_DLbls dLblsField;
    private CT_ChartLines dropLinesField;
    private CT_ChartLines hiLowLinesField;
    private CT_UpDownBars upDownBarsField;
    private List`1<CT_UnsignedInt> axIdField;
    private List`1<CT_Extension> extLstField;
    [XmlElementAttribute("ser")]
public List`1<CT_LineSer> ser { get; public set; }
    [XmlElementAttribute]
public CT_DLbls dLbls { get; public set; }
    [XmlElementAttribute]
public CT_ChartLines dropLines { get; public set; }
    [XmlElementAttribute]
public CT_ChartLines hiLowLines { get; public set; }
    [XmlElementAttribute]
public CT_UpDownBars upDownBars { get; public set; }
    [XmlElementAttribute("axId")]
public List`1<CT_UnsignedInt> axId { get; public set; }
    [XmlElementAttribute]
public List`1<CT_Extension> extLst { get; public set; }
    public static CT_StockChart Parse(XmlNode node, XmlNamespaceManager namespaceManager);
    internal void Write(StreamWriter sw, string nodeName);
    public int GetSeriesCount();
    public List`1<CT_LineSer> get_ser();
    public void set_ser(List`1<CT_LineSer> value);
    public CT_DLbls get_dLbls();
    public void set_dLbls(CT_DLbls value);
    public CT_ChartLines get_dropLines();
    public void set_dropLines(CT_ChartLines value);
    public CT_ChartLines get_hiLowLines();
    public void set_hiLowLines(CT_ChartLines value);
    public CT_UpDownBars get_upDownBars();
    public void set_upDownBars(CT_UpDownBars value);
    public List`1<CT_UnsignedInt> get_axId();
    public void set_axId(List`1<CT_UnsignedInt> value);
    public List`1<CT_Extension> get_extLst();
    public void set_extLst(List`1<CT_Extension> value);
}
[DesignerCategoryAttribute("code")]
[XmlTypeAttribute]
[XmlRootAttribute]
public class NPOI.OpenXmlFormats.Dml.Chart.CT_StrData : object {
    private CT_UnsignedInt ptCountField;
    private List`1<CT_StrVal> ptField;
    private List`1<CT_Extension> extLstField;
    [XmlElementAttribute]
public CT_UnsignedInt ptCount { get; public set; }
    [XmlElementAttribute("pt")]
public List`1<CT_StrVal> pt { get; public set; }
    [XmlElementAttribute]
public List`1<CT_Extension> extLst { get; public set; }
    public static CT_StrData Parse(XmlNode node, XmlNamespaceManager namespaceManager);
    internal void Write(StreamWriter sw, string nodeName);
    public CT_UnsignedInt get_ptCount();
    public void set_ptCount(CT_UnsignedInt value);
    public List`1<CT_StrVal> get_pt();
    public void set_pt(List`1<CT_StrVal> value);
    public List`1<CT_Extension> get_extLst();
    public void set_extLst(List`1<CT_Extension> value);
    public CT_UnsignedInt AddNewPtCount();
    public CT_StrVal AddNewPt();
}
[DesignerCategoryAttribute("code")]
[XmlTypeAttribute]
[XmlRootAttribute]
public class NPOI.OpenXmlFormats.Dml.Chart.CT_StrRef : object {
    private string fField;
    private CT_StrData strCacheField;
    private List`1<CT_Extension> extLstField;
    [XmlElementAttribute]
public string f { get; public set; }
    [XmlElementAttribute]
public CT_StrData strCache { get; public set; }
    [XmlElementAttribute]
public List`1<CT_Extension> extLst { get; public set; }
    public static CT_StrRef Parse(XmlNode node, XmlNamespaceManager namespaceManager);
    internal void Write(StreamWriter sw, string nodeName);
    public string get_f();
    public void set_f(string value);
    public CT_StrData get_strCache();
    public void set_strCache(CT_StrData value);
    public List`1<CT_Extension> get_extLst();
    public void set_extLst(List`1<CT_Extension> value);
    public CT_StrData AddNewStrCache();
}
[DesignerCategoryAttribute("code")]
[XmlTypeAttribute]
[XmlRootAttribute]
public class NPOI.OpenXmlFormats.Dml.Chart.CT_StrVal : object {
    private string vField;
    private UInt32 idxField;
    [XmlElementAttribute]
public string v { get; public set; }
    [XmlAttributeAttribute]
public UInt32 idx { get; public set; }
    public static CT_StrVal Parse(XmlNode node, XmlNamespaceManager namespaceManager);
    internal void Write(StreamWriter sw, string nodeName);
    public string get_v();
    public void set_v(string value);
    public UInt32 get_idx();
    public void set_idx(UInt32 value);
}
[DesignerCategoryAttribute("code")]
[XmlTypeAttribute]
[XmlRootAttribute]
public class NPOI.OpenXmlFormats.Dml.Chart.CT_Style : object {
    private byte valField;
    [XmlAttributeAttribute]
public byte val { get; public set; }
    public static CT_Style Parse(XmlNode node, XmlNamespaceManager namespaceManager);
    internal void Write(StreamWriter sw, string nodeName);
    public byte get_val();
    public void set_val(byte value);
}
[DesignerCategoryAttribute("code")]
[XmlTypeAttribute]
[XmlRootAttribute]
public class NPOI.OpenXmlFormats.Dml.Chart.CT_Surface : object {
    private CT_UnsignedInt thicknessField;
    private CT_ShapeProperties spPrField;
    private CT_PictureOptions pictureOptionsField;
    private List`1<CT_Extension> extLstField;
    [XmlElementAttribute]
public CT_UnsignedInt thickness { get; public set; }
    [XmlElementAttribute]
public CT_ShapeProperties spPr { get; public set; }
    [XmlElementAttribute]
public CT_PictureOptions pictureOptions { get; public set; }
    [XmlElementAttribute]
public List`1<CT_Extension> extLst { get; public set; }
    public static CT_Surface Parse(XmlNode node, XmlNamespaceManager namespaceManager);
    internal void Write(StreamWriter sw, string nodeName);
    public CT_UnsignedInt get_thickness();
    public void set_thickness(CT_UnsignedInt value);
    public CT_ShapeProperties get_spPr();
    public void set_spPr(CT_ShapeProperties value);
    public CT_PictureOptions get_pictureOptions();
    public void set_pictureOptions(CT_PictureOptions value);
    public List`1<CT_Extension> get_extLst();
    public void set_extLst(List`1<CT_Extension> value);
}
[DesignerCategoryAttribute("code")]
[XmlTypeAttribute]
[XmlRootAttribute]
public class NPOI.OpenXmlFormats.Dml.Chart.CT_Surface3DChart : object {
    private CT_Boolean wireframeField;
    private List`1<CT_SurfaceSer> serField;
    private List`1<CT_BandFmt> bandFmtsField;
    private List`1<CT_UnsignedInt> axIdField;
    private List`1<CT_Extension> extLstField;
    [XmlElementAttribute]
public CT_Boolean wireframe { get; public set; }
    [XmlElementAttribute("ser")]
public List`1<CT_SurfaceSer> ser { get; public set; }
    [XmlElementAttribute]
public List`1<CT_BandFmt> bandFmts { get; public set; }
    [XmlElementAttribute("axId")]
public List`1<CT_UnsignedInt> axId { get; public set; }
    [XmlElementAttribute]
public List`1<CT_Extension> extLst { get; public set; }
    public static CT_Surface3DChart Parse(XmlNode node, XmlNamespaceManager namespaceManager);
    internal void Write(StreamWriter sw, string nodeName);
    public int GetSeriesCount();
    public CT_Boolean get_wireframe();
    public void set_wireframe(CT_Boolean value);
    public List`1<CT_SurfaceSer> get_ser();
    public void set_ser(List`1<CT_SurfaceSer> value);
    public List`1<CT_BandFmt> get_bandFmts();
    public void set_bandFmts(List`1<CT_BandFmt> value);
    public List`1<CT_UnsignedInt> get_axId();
    public void set_axId(List`1<CT_UnsignedInt> value);
    public List`1<CT_Extension> get_extLst();
    public void set_extLst(List`1<CT_Extension> value);
}
[DesignerCategoryAttribute("code")]
[XmlTypeAttribute]
[XmlRootAttribute]
public class NPOI.OpenXmlFormats.Dml.Chart.CT_SurfaceChart : object {
    private CT_Boolean wireframeField;
    private List`1<CT_SurfaceSer> serField;
    private List`1<CT_BandFmt> bandFmtsField;
    private List`1<CT_UnsignedInt> axIdField;
    private List`1<CT_Extension> extLstField;
    [XmlElementAttribute]
public CT_Boolean wireframe { get; public set; }
    [XmlElementAttribute("ser")]
public List`1<CT_SurfaceSer> ser { get; public set; }
    [XmlElementAttribute]
public List`1<CT_BandFmt> bandFmts { get; public set; }
    [XmlElementAttribute("axId")]
public List`1<CT_UnsignedInt> axId { get; public set; }
    [XmlElementAttribute]
public List`1<CT_Extension> extLst { get; public set; }
    public static CT_SurfaceChart Parse(XmlNode node, XmlNamespaceManager namespaceManager);
    internal void Write(StreamWriter sw, string nodeName);
    public CT_Boolean get_wireframe();
    public void set_wireframe(CT_Boolean value);
    public int GetSeriesCount();
    public List`1<CT_SurfaceSer> get_ser();
    public void set_ser(List`1<CT_SurfaceSer> value);
    public List`1<CT_BandFmt> get_bandFmts();
    public void set_bandFmts(List`1<CT_BandFmt> value);
    public List`1<CT_UnsignedInt> get_axId();
    public void set_axId(List`1<CT_UnsignedInt> value);
    public List`1<CT_Extension> get_extLst();
    public void set_extLst(List`1<CT_Extension> value);
}
[DesignerCategoryAttribute("code")]
[XmlTypeAttribute]
[XmlRootAttribute]
public class NPOI.OpenXmlFormats.Dml.Chart.CT_SurfaceSer : object {
    private CT_UnsignedInt idxField;
    private CT_UnsignedInt orderField;
    private CT_SerTx txField;
    private CT_ShapeProperties spPrField;
    private CT_AxDataSource catField;
    private CT_NumDataSource valField;
    private List`1<CT_Extension> extLstField;
    [XmlElementAttribute]
public CT_UnsignedInt idx { get; public set; }
    [XmlElementAttribute]
public CT_UnsignedInt order { get; public set; }
    [XmlElementAttribute]
public CT_SerTx tx { get; public set; }
    [XmlElementAttribute]
public CT_ShapeProperties spPr { get; public set; }
    [XmlElementAttribute]
public CT_AxDataSource cat { get; public set; }
    [XmlElementAttribute]
public CT_NumDataSource val { get; public set; }
    [XmlElementAttribute]
public List`1<CT_Extension> extLst { get; public set; }
    public static CT_SurfaceSer Parse(XmlNode node, XmlNamespaceManager namespaceManager);
    internal void Write(StreamWriter sw, string nodeName);
    public CT_UnsignedInt get_idx();
    public void set_idx(CT_UnsignedInt value);
    public CT_UnsignedInt get_order();
    public void set_order(CT_UnsignedInt value);
    public CT_SerTx get_tx();
    public void set_tx(CT_SerTx value);
    public CT_ShapeProperties get_spPr();
    public void set_spPr(CT_ShapeProperties value);
    public CT_AxDataSource get_cat();
    public void set_cat(CT_AxDataSource value);
    public CT_NumDataSource get_val();
    public void set_val(CT_NumDataSource value);
    public List`1<CT_Extension> get_extLst();
    public void set_extLst(List`1<CT_Extension> value);
}
[DesignerCategoryAttribute("code")]
[XmlTypeAttribute]
[XmlRootAttribute]
public class NPOI.OpenXmlFormats.Dml.Chart.CT_TextBody : object {
    private CT_TextBodyProperties bodyPrField;
    private CT_TextListStyle lstStyleField;
    private List`1<CT_TextParagraph> pField;
    public CT_TextBodyProperties bodyPr { get; public set; }
    public CT_TextListStyle lstStyle { get; public set; }
    [XmlElementAttribute("p")]
public List`1<CT_TextParagraph> p { get; public set; }
    public static CT_TextBody Parse(XmlNode node, XmlNamespaceManager namespaceManager);
    internal void Write(StreamWriter sw, string nodeName);
    public void SetPArray(CT_TextParagraph[] array);
    public CT_TextParagraph AddNewP();
    public CT_TextBodyProperties AddNewBodyPr();
    public CT_TextListStyle AddNewLstStyle();
    public CT_TextBodyProperties get_bodyPr();
    public void set_bodyPr(CT_TextBodyProperties value);
    public CT_TextListStyle get_lstStyle();
    public void set_lstStyle(CT_TextListStyle value);
    public virtual string ToString();
    public int SizeOfPArray();
    public CT_TextParagraph GetPArray(int v);
    public List`1<CT_TextParagraph> get_p();
    public void set_p(List`1<CT_TextParagraph> value);
}
[DesignerCategoryAttribute("code")]
[XmlTypeAttribute]
[XmlRootAttribute]
public class NPOI.OpenXmlFormats.Dml.Chart.CT_TextLanguageID : object {
    private string valField;
    [XmlAttributeAttribute]
public string val { get; public set; }
    public string get_val();
    public void set_val(string value);
    public static CT_TextLanguageID Parse(XmlNode node, XmlNamespaceManager namespaceManager);
    internal void Write(StreamWriter sw, string nodeName);
}
[DesignerCategoryAttribute("code")]
[XmlTypeAttribute]
[XmlRootAttribute]
public class NPOI.OpenXmlFormats.Dml.Chart.CT_TickLblPos : object {
    private ST_TickLblPos valField;
    [XmlAttributeAttribute]
[DefaultValueAttribute("Mono.Cecil.CustomAttributeArgument")]
public ST_TickLblPos val { get; public set; }
    public static CT_TickLblPos Parse(XmlNode node, XmlNamespaceManager namespaceManager);
    internal void Write(StreamWriter sw, string nodeName);
    public ST_TickLblPos get_val();
    public void set_val(ST_TickLblPos value);
}
[DesignerCategoryAttribute("code")]
[XmlTypeAttribute]
[XmlRootAttribute]
public class NPOI.OpenXmlFormats.Dml.Chart.CT_TickMark : object {
    private ST_TickMark valField;
    [XmlAttributeAttribute]
[DefaultValueAttribute("Mono.Cecil.CustomAttributeArgument")]
public ST_TickMark val { get; public set; }
    public static CT_TickMark Parse(XmlNode node, XmlNamespaceManager namespaceManager);
    internal void Write(StreamWriter sw, string nodeName);
    public ST_TickMark get_val();
    public void set_val(ST_TickMark value);
}
[DesignerCategoryAttribute("code")]
[XmlTypeAttribute]
[XmlRootAttribute]
public class NPOI.OpenXmlFormats.Dml.Chart.CT_TimeUnit : object {
    private ST_TimeUnit valField;
    [XmlAttributeAttribute]
[DefaultValueAttribute("Mono.Cecil.CustomAttributeArgument")]
public ST_TimeUnit val { get; public set; }
    public static CT_TimeUnit Parse(XmlNode node, XmlNamespaceManager namespaceManager);
    internal void Write(StreamWriter sw, string nodeName);
    public ST_TimeUnit get_val();
    public void set_val(ST_TimeUnit value);
}
[DesignerCategoryAttribute("code")]
[XmlTypeAttribute]
[XmlRootAttribute]
public class NPOI.OpenXmlFormats.Dml.Chart.CT_Title : object {
    private CT_Tx txField;
    private CT_Layout layoutField;
    private CT_Boolean overlayField;
    private CT_ShapeProperties spPrField;
    private CT_TextBody txPrField;
    private List`1<CT_Extension> extLstField;
    [XmlElementAttribute]
public CT_Tx tx { get; public set; }
    [XmlElementAttribute]
public CT_Layout layout { get; public set; }
    [XmlElementAttribute]
public CT_Boolean overlay { get; public set; }
    [XmlElementAttribute]
public CT_ShapeProperties spPr { get; public set; }
    [XmlElementAttribute]
public CT_TextBody txPr { get; public set; }
    [XmlElementAttribute]
public List`1<CT_Extension> extLst { get; public set; }
    public static CT_Title Parse(XmlNode node, XmlNamespaceManager namespaceManager);
    internal void Write(StreamWriter sw, string nodeName);
    public bool IsSetTx();
    public CT_Tx AddNewTx();
    public CT_Tx get_tx();
    public void set_tx(CT_Tx value);
    public CT_Layout get_layout();
    public void set_layout(CT_Layout value);
    public CT_Boolean get_overlay();
    public void set_overlay(CT_Boolean value);
    public CT_ShapeProperties get_spPr();
    public void set_spPr(CT_ShapeProperties value);
    public CT_TextBody get_txPr();
    public void set_txPr(CT_TextBody value);
    public List`1<CT_Extension> get_extLst();
    public void set_extLst(List`1<CT_Extension> value);
}
[DesignerCategoryAttribute("code")]
[XmlTypeAttribute]
[XmlRootAttribute]
public class NPOI.OpenXmlFormats.Dml.Chart.CT_Trendline : object {
    private string nameField;
    private CT_ShapeProperties spPrField;
    private CT_TrendlineType trendlineTypeField;
    private CT_Order orderField;
    private CT_Period periodField;
    private CT_Double forwardField;
    private CT_Double backwardField;
    private CT_Double interceptField;
    private CT_Boolean dispRSqrField;
    private CT_Boolean dispEqField;
    private CT_TrendlineLbl trendlineLblField;
    private List`1<CT_Extension> extLstField;
    [XmlElementAttribute]
public string name { get; public set; }
    [XmlElementAttribute]
public CT_ShapeProperties spPr { get; public set; }
    [XmlElementAttribute]
public CT_TrendlineType trendlineType { get; public set; }
    [XmlElementAttribute]
public CT_Order order { get; public set; }
    [XmlElementAttribute]
public CT_Period period { get; public set; }
    [XmlElementAttribute]
public CT_Double forward { get; public set; }
    [XmlElementAttribute]
public CT_Double backward { get; public set; }
    [XmlElementAttribute]
public CT_Double intercept { get; public set; }
    [XmlElementAttribute]
public CT_Boolean dispRSqr { get; public set; }
    [XmlElementAttribute]
public CT_Boolean dispEq { get; public set; }
    [XmlElementAttribute]
public CT_TrendlineLbl trendlineLbl { get; public set; }
    [XmlElementAttribute]
public List`1<CT_Extension> extLst { get; public set; }
    public static CT_Trendline Parse(XmlNode node, XmlNamespaceManager namespaceManager);
    internal void Write(StreamWriter sw, string nodeName);
    public string get_name();
    public void set_name(string value);
    public CT_ShapeProperties get_spPr();
    public void set_spPr(CT_ShapeProperties value);
    public CT_TrendlineType get_trendlineType();
    public void set_trendlineType(CT_TrendlineType value);
    public CT_Order get_order();
    public void set_order(CT_Order value);
    public CT_Period get_period();
    public void set_period(CT_Period value);
    public CT_Double get_forward();
    public void set_forward(CT_Double value);
    public CT_Double get_backward();
    public void set_backward(CT_Double value);
    public CT_Double get_intercept();
    public void set_intercept(CT_Double value);
    public CT_Boolean get_dispRSqr();
    public void set_dispRSqr(CT_Boolean value);
    public CT_Boolean get_dispEq();
    public void set_dispEq(CT_Boolean value);
    public CT_TrendlineLbl get_trendlineLbl();
    public void set_trendlineLbl(CT_TrendlineLbl value);
    public List`1<CT_Extension> get_extLst();
    public void set_extLst(List`1<CT_Extension> value);
}
[DesignerCategoryAttribute("code")]
[XmlTypeAttribute]
[XmlRootAttribute]
public class NPOI.OpenXmlFormats.Dml.Chart.CT_TrendlineLbl : object {
    private CT_Layout layoutField;
    private CT_Tx txField;
    private CT_NumFmt numFmtField;
    private CT_ShapeProperties spPrField;
    private CT_TextBody txPrField;
    private List`1<CT_Extension> extLstField;
    [XmlElementAttribute]
public CT_Layout layout { get; public set; }
    [XmlElementAttribute]
public CT_Tx tx { get; public set; }
    [XmlElementAttribute]
public CT_NumFmt numFmt { get; public set; }
    [XmlElementAttribute]
public CT_ShapeProperties spPr { get; public set; }
    [XmlElementAttribute]
public CT_TextBody txPr { get; public set; }
    [XmlElementAttribute]
public List`1<CT_Extension> extLst { get; public set; }
    public static CT_TrendlineLbl Parse(XmlNode node, XmlNamespaceManager namespaceManager);
    internal void Write(StreamWriter sw, string nodeName);
    public CT_Layout get_layout();
    public void set_layout(CT_Layout value);
    public CT_Tx get_tx();
    public void set_tx(CT_Tx value);
    public CT_NumFmt get_numFmt();
    public void set_numFmt(CT_NumFmt value);
    public CT_ShapeProperties get_spPr();
    public void set_spPr(CT_ShapeProperties value);
    public CT_TextBody get_txPr();
    public void set_txPr(CT_TextBody value);
    public List`1<CT_Extension> get_extLst();
    public void set_extLst(List`1<CT_Extension> value);
}
[DesignerCategoryAttribute("code")]
[XmlTypeAttribute]
[XmlRootAttribute]
public class NPOI.OpenXmlFormats.Dml.Chart.CT_TrendlineType : object {
    private ST_TrendlineType valField;
    [XmlAttributeAttribute]
[DefaultValueAttribute("Mono.Cecil.CustomAttributeArgument")]
public ST_TrendlineType val { get; public set; }
    public static CT_TrendlineType Parse(XmlNode node, XmlNamespaceManager namespaceManager);
    internal void Write(StreamWriter sw, string nodeName);
    public ST_TrendlineType get_val();
    public void set_val(ST_TrendlineType value);
}
[DesignerCategoryAttribute("code")]
[XmlTypeAttribute]
[XmlRootAttribute]
public class NPOI.OpenXmlFormats.Dml.Chart.CT_Tx : object {
    private CT_StrRef strRefField;
    private CT_TextBody richField;
    public CT_StrRef strRef { get; public set; }
    public CT_TextBody rich { get; public set; }
    public CT_StrRef get_strRef();
    public void set_strRef(CT_StrRef value);
    public CT_TextBody get_rich();
    public void set_rich(CT_TextBody value);
    public static CT_Tx Parse(XmlNode node, XmlNamespaceManager namespaceManager);
    internal void Write(StreamWriter sw, string nodeName);
    public bool IsSetStrRef();
    public void UnsetStrRef();
    public bool IsSetRich();
    public CT_TextBody AddNewRich();
}
[DesignerCategoryAttribute("code")]
[XmlTypeAttribute]
[XmlRootAttribute]
public class NPOI.OpenXmlFormats.Dml.Chart.CT_UnsignedInt : object {
    private UInt32 valField;
    [XmlAttributeAttribute]
public UInt32 val { get; public set; }
    public UInt32 get_val();
    public void set_val(UInt32 value);
    public static CT_UnsignedInt Parse(XmlNode node, XmlNamespaceManager namespaceManager);
    internal void Write(StreamWriter sw, string nodeName);
}
[DesignerCategoryAttribute("code")]
[XmlTypeAttribute]
[XmlRootAttribute]
public class NPOI.OpenXmlFormats.Dml.Chart.CT_UpDownBar : object {
    private CT_ShapeProperties spPrField;
    [XmlElementAttribute]
public CT_ShapeProperties spPr { get; public set; }
    public static CT_UpDownBar Parse(XmlNode node, XmlNamespaceManager namespaceManager);
    internal void Write(StreamWriter sw, string nodeName);
    public CT_ShapeProperties get_spPr();
    public void set_spPr(CT_ShapeProperties value);
}
[DesignerCategoryAttribute("code")]
[XmlTypeAttribute]
[XmlRootAttribute]
public class NPOI.OpenXmlFormats.Dml.Chart.CT_UpDownBars : object {
    private CT_GapAmount gapWidthField;
    private CT_UpDownBar upBarsField;
    private CT_UpDownBar downBarsField;
    private List`1<CT_Extension> extLstField;
    [XmlElementAttribute]
public CT_GapAmount gapWidth { get; public set; }
    [XmlElementAttribute]
public CT_UpDownBar upBars { get; public set; }
    [XmlElementAttribute]
public CT_UpDownBar downBars { get; public set; }
    [XmlElementAttribute]
public List`1<CT_Extension> extLst { get; public set; }
    public static CT_UpDownBars Parse(XmlNode node, XmlNamespaceManager namespaceManager);
    internal void Write(StreamWriter sw, string nodeName);
    public CT_GapAmount get_gapWidth();
    public void set_gapWidth(CT_GapAmount value);
    public CT_UpDownBar get_upBars();
    public void set_upBars(CT_UpDownBar value);
    public CT_UpDownBar get_downBars();
    public void set_downBars(CT_UpDownBar value);
    public List`1<CT_Extension> get_extLst();
    public void set_extLst(List`1<CT_Extension> value);
}
[DesignerCategoryAttribute("code")]
[XmlTypeAttribute]
[XmlRootAttribute]
public class NPOI.OpenXmlFormats.Dml.Chart.CT_ValAx : object {
    private CT_UnsignedInt axIdField;
    private CT_Scaling scalingField;
    private CT_Boolean deleteField;
    private CT_AxPos axPosField;
    private CT_ChartLines majorGridlinesField;
    private CT_ChartLines minorGridlinesField;
    private CT_Title titleField;
    private CT_NumFmt numFmtField;
    private CT_TickMark majorTickMarkField;
    private CT_TickMark minorTickMarkField;
    private CT_TickLblPos tickLblPosField;
    private CT_ShapeProperties spPrField;
    private CT_TextBody txPrField;
    private CT_UnsignedInt crossAxField;
    private CT_CrossBetween crossBetweenField;
    private CT_AxisUnit majorUnitField;
    private CT_AxisUnit minorUnitField;
    private CT_DispUnits dispUnitsField;
    private List`1<CT_Extension> extLstField;
    private CT_Crosses crossesField;
    private CT_Double crossesAtField;
    [XmlElementAttribute]
public CT_UnsignedInt axId { get; public set; }
    [XmlElementAttribute]
public CT_Scaling scaling { get; public set; }
    [XmlElementAttribute]
public CT_Boolean delete { get; public set; }
    [XmlElementAttribute]
public CT_AxPos axPos { get; public set; }
    [XmlElementAttribute]
public CT_ChartLines majorGridlines { get; public set; }
    [XmlElementAttribute]
public CT_ChartLines minorGridlines { get; public set; }
    [XmlElementAttribute]
public CT_Title title { get; public set; }
    [XmlElementAttribute]
public CT_NumFmt numFmt { get; public set; }
    [XmlElementAttribute]
public CT_TickMark majorTickMark { get; public set; }
    [XmlElementAttribute]
public CT_TickMark minorTickMark { get; public set; }
    [XmlElementAttribute]
public CT_TickLblPos tickLblPos { get; public set; }
    [XmlElementAttribute]
public CT_ShapeProperties spPr { get; public set; }
    [XmlElementAttribute]
public CT_TextBody txPr { get; public set; }
    [XmlElementAttribute]
public CT_UnsignedInt crossAx { get; public set; }
    [XmlElementAttribute]
public CT_Crosses crosses { get; public set; }
    [XmlElementAttribute]
public CT_Double crossesAt { get; public set; }
    [XmlElementAttribute]
public CT_CrossBetween crossBetween { get; public set; }
    [XmlElementAttribute]
public CT_AxisUnit majorUnit { get; public set; }
    [XmlElementAttribute]
public CT_AxisUnit minorUnit { get; public set; }
    [XmlElementAttribute]
public CT_DispUnits dispUnits { get; public set; }
    [XmlElementAttribute]
public List`1<CT_Extension> extLst { get; public set; }
    public static CT_ValAx Parse(XmlNode node, XmlNamespaceManager namespaceManager);
    internal void Write(StreamWriter sw, string nodeName);
    public bool IsSetNumFmt();
    public CT_NumFmt AddNewNumFmt();
    public CT_Crosses AddNewCrosses();
    public CT_UnsignedInt AddNewAxId();
    public CT_AxPos AddNewAxPos();
    public CT_Scaling AddNewScaling();
    public CT_CrossBetween AddNewCrossBetween();
    public CT_UnsignedInt AddNewCrossAx();
    public CT_TickLblPos AddNewTickLblPos();
    public CT_UnsignedInt get_axId();
    public void set_axId(CT_UnsignedInt value);
    public CT_Scaling get_scaling();
    public void set_scaling(CT_Scaling value);
    public CT_Boolean get_delete();
    public void set_delete(CT_Boolean value);
    public CT_AxPos get_axPos();
    public void set_axPos(CT_AxPos value);
    public CT_ChartLines get_majorGridlines();
    public void set_majorGridlines(CT_ChartLines value);
    public CT_ChartLines get_minorGridlines();
    public void set_minorGridlines(CT_ChartLines value);
    public CT_Title get_title();
    public void set_title(CT_Title value);
    public CT_NumFmt get_numFmt();
    public void set_numFmt(CT_NumFmt value);
    public CT_TickMark get_majorTickMark();
    public void set_majorTickMark(CT_TickMark value);
    public CT_TickMark get_minorTickMark();
    public void set_minorTickMark(CT_TickMark value);
    public CT_TickLblPos get_tickLblPos();
    public void set_tickLblPos(CT_TickLblPos value);
    public CT_ShapeProperties get_spPr();
    public void set_spPr(CT_ShapeProperties value);
    public CT_TextBody get_txPr();
    public void set_txPr(CT_TextBody value);
    public CT_UnsignedInt get_crossAx();
    public void set_crossAx(CT_UnsignedInt value);
    public CT_Crosses get_crosses();
    public void set_crosses(CT_Crosses value);
    public CT_Double get_crossesAt();
    public void set_crossesAt(CT_Double value);
    public CT_CrossBetween get_crossBetween();
    public void set_crossBetween(CT_CrossBetween value);
    public CT_AxisUnit get_majorUnit();
    public void set_majorUnit(CT_AxisUnit value);
    public CT_AxisUnit get_minorUnit();
    public void set_minorUnit(CT_AxisUnit value);
    public CT_DispUnits get_dispUnits();
    public void set_dispUnits(CT_DispUnits value);
    public List`1<CT_Extension> get_extLst();
    public void set_extLst(List`1<CT_Extension> value);
    public CT_Boolean AddNewDelete();
    public CT_TickMark AddNewMajorTickMark();
    public CT_TickMark AddNewMinorTickMark();
    public CT_ChartLines AddNewMajorGridlines();
    public CT_ChartLines AddNewMinorGridlines();
}
[DesignerCategoryAttribute("code")]
[XmlTypeAttribute]
[XmlRootAttribute]
public class NPOI.OpenXmlFormats.Dml.Chart.CT_View3D : object {
    private CT_RotX rotXField;
    private CT_HPercent hPercentField;
    private CT_RotY rotYField;
    private CT_DepthPercent depthPercentField;
    private CT_Boolean rAngAxField;
    private CT_Perspective perspectiveField;
    private List`1<CT_Extension> extLstField;
    [XmlElementAttribute]
public CT_RotX rotX { get; public set; }
    [XmlElementAttribute]
public CT_HPercent hPercent { get; public set; }
    [XmlElementAttribute]
public CT_RotY rotY { get; public set; }
    [XmlElementAttribute]
public CT_DepthPercent depthPercent { get; public set; }
    [XmlElementAttribute]
public CT_Boolean rAngAx { get; public set; }
    [XmlElementAttribute]
public CT_Perspective perspective { get; public set; }
    [XmlElementAttribute]
public List`1<CT_Extension> extLst { get; public set; }
    public static CT_View3D Parse(XmlNode node, XmlNamespaceManager namespaceManager);
    internal void Write(StreamWriter sw, string nodeName);
    public CT_RotX get_rotX();
    public void set_rotX(CT_RotX value);
    public CT_HPercent get_hPercent();
    public void set_hPercent(CT_HPercent value);
    public CT_RotY get_rotY();
    public void set_rotY(CT_RotY value);
    public CT_DepthPercent get_depthPercent();
    public void set_depthPercent(CT_DepthPercent value);
    public CT_Boolean get_rAngAx();
    public void set_rAngAx(CT_Boolean value);
    public CT_Perspective get_perspective();
    public void set_perspective(CT_Perspective value);
    public List`1<CT_Extension> get_extLst();
    public void set_extLst(List`1<CT_Extension> value);
}
[XmlTypeAttribute]
public enum NPOI.OpenXmlFormats.Dml.Chart.ST_AxPos : Enum {
    public int value__;
    public static ST_AxPos b;
    public static ST_AxPos l;
    public static ST_AxPos r;
    public static ST_AxPos t;
}
[XmlTypeAttribute]
public enum NPOI.OpenXmlFormats.Dml.Chart.ST_BarDir : Enum {
    public int value__;
    public static ST_BarDir bar;
    public static ST_BarDir col;
}
[XmlTypeAttribute]
public enum NPOI.OpenXmlFormats.Dml.Chart.ST_BarGrouping : Enum {
    public int value__;
    public static ST_BarGrouping percentStacked;
    public static ST_BarGrouping clustered;
    public static ST_BarGrouping standard;
    public static ST_BarGrouping stacked;
}
[XmlTypeAttribute]
public enum NPOI.OpenXmlFormats.Dml.Chart.ST_BuiltInUnit : Enum {
    public int value__;
    public static ST_BuiltInUnit hundreds;
    public static ST_BuiltInUnit thousands;
    public static ST_BuiltInUnit tenThousands;
    public static ST_BuiltInUnit hundredThousands;
    public static ST_BuiltInUnit millions;
    public static ST_BuiltInUnit tenMillions;
    public static ST_BuiltInUnit hundredMillions;
    public static ST_BuiltInUnit billions;
    public static ST_BuiltInUnit trillions;
}
[XmlTypeAttribute]
public enum NPOI.OpenXmlFormats.Dml.Chart.ST_CrossBetween : Enum {
    public int value__;
    public static ST_CrossBetween between;
    public static ST_CrossBetween midCat;
}
[XmlTypeAttribute]
public enum NPOI.OpenXmlFormats.Dml.Chart.ST_Crosses : Enum {
    public int value__;
    public static ST_Crosses autoZero;
    public static ST_Crosses max;
    public static ST_Crosses min;
}
[XmlTypeAttribute]
public enum NPOI.OpenXmlFormats.Dml.Chart.ST_DispBlanksAs : Enum {
    public int value__;
    public static ST_DispBlanksAs span;
    public static ST_DispBlanksAs gap;
    public static ST_DispBlanksAs zero;
}
[XmlTypeAttribute]
public enum NPOI.OpenXmlFormats.Dml.Chart.ST_DLblPos : Enum {
    public int value__;
    public static ST_DLblPos bestFit;
    public static ST_DLblPos b;
    public static ST_DLblPos ctr;
    public static ST_DLblPos inBase;
    public static ST_DLblPos inEnd;
    public static ST_DLblPos l;
    public static ST_DLblPos outEnd;
    public static ST_DLblPos r;
    public static ST_DLblPos t;
}
[XmlTypeAttribute]
public enum NPOI.OpenXmlFormats.Dml.Chart.ST_ErrBarType : Enum {
    public int value__;
    public static ST_ErrBarType both;
    public static ST_ErrBarType minus;
    public static ST_ErrBarType plus;
}
[XmlTypeAttribute]
public enum NPOI.OpenXmlFormats.Dml.Chart.ST_ErrDir : Enum {
    public int value__;
    public static ST_ErrDir x;
    public static ST_ErrDir y;
}
[XmlTypeAttribute]
public enum NPOI.OpenXmlFormats.Dml.Chart.ST_ErrValType : Enum {
    public int value__;
    public static ST_ErrValType cust;
    public static ST_ErrValType fixedVal;
    public static ST_ErrValType percentage;
    public static ST_ErrValType stdDev;
    public static ST_ErrValType stdErr;
}
[XmlTypeAttribute]
public enum NPOI.OpenXmlFormats.Dml.Chart.ST_Grouping : Enum {
    public int value__;
    public static ST_Grouping percentStacked;
    public static ST_Grouping standard;
    public static ST_Grouping stacked;
}
[XmlTypeAttribute]
public enum NPOI.OpenXmlFormats.Dml.Chart.ST_LayoutMode : Enum {
    public int value__;
    public static ST_LayoutMode edge;
    public static ST_LayoutMode factor;
}
[XmlTypeAttribute]
public enum NPOI.OpenXmlFormats.Dml.Chart.ST_LayoutTarget : Enum {
    public int value__;
    public static ST_LayoutTarget inner;
    public static ST_LayoutTarget outer;
}
[XmlTypeAttribute]
public enum NPOI.OpenXmlFormats.Dml.Chart.ST_LblAlgn : Enum {
    public int value__;
    public static ST_LblAlgn ctr;
    public static ST_LblAlgn l;
    public static ST_LblAlgn r;
}
[XmlTypeAttribute]
public enum NPOI.OpenXmlFormats.Dml.Chart.ST_LegendPos : Enum {
    public int value__;
    public static ST_LegendPos b;
    public static ST_LegendPos tr;
    public static ST_LegendPos l;
    public static ST_LegendPos r;
    public static ST_LegendPos t;
}
[XmlTypeAttribute]
public enum NPOI.OpenXmlFormats.Dml.Chart.ST_MarkerStyle : Enum {
    public int value__;
    public static ST_MarkerStyle circle;
    public static ST_MarkerStyle dash;
    public static ST_MarkerStyle diamond;
    public static ST_MarkerStyle dot;
    public static ST_MarkerStyle none;
    public static ST_MarkerStyle picture;
    public static ST_MarkerStyle plus;
    public static ST_MarkerStyle square;
    public static ST_MarkerStyle star;
    public static ST_MarkerStyle triangle;
    public static ST_MarkerStyle x;
    public static ST_MarkerStyle auto;
}
[XmlTypeAttribute]
public enum NPOI.OpenXmlFormats.Dml.Chart.ST_OfPieType : Enum {
    public int value__;
    public static ST_OfPieType pie;
    public static ST_OfPieType bar;
}
[XmlTypeAttribute]
public enum NPOI.OpenXmlFormats.Dml.Chart.ST_Orientation : Enum {
    public int value__;
    public static ST_Orientation maxMin;
    public static ST_Orientation minMax;
}
[XmlTypeAttribute]
public enum NPOI.OpenXmlFormats.Dml.Chart.ST_PageSetupOrientation : Enum {
    public int value__;
    public static ST_PageSetupOrientation default;
    public static ST_PageSetupOrientation portrait;
    public static ST_PageSetupOrientation landscape;
}
[XmlTypeAttribute]
public enum NPOI.OpenXmlFormats.Dml.Chart.ST_PictureFormat : Enum {
    public int value__;
    public static ST_PictureFormat stretch;
    public static ST_PictureFormat stack;
    public static ST_PictureFormat stackScale;
}
[XmlTypeAttribute]
public enum NPOI.OpenXmlFormats.Dml.Chart.ST_RadarStyle : Enum {
    public int value__;
    public static ST_RadarStyle standard;
    public static ST_RadarStyle marker;
    public static ST_RadarStyle filled;
}
[XmlTypeAttribute]
public enum NPOI.OpenXmlFormats.Dml.Chart.ST_ScatterStyle : Enum {
    public int value__;
    public static ST_ScatterStyle none;
    public static ST_ScatterStyle line;
    public static ST_ScatterStyle lineMarker;
    public static ST_ScatterStyle marker;
    public static ST_ScatterStyle smooth;
    public static ST_ScatterStyle smoothMarker;
}
[XmlTypeAttribute]
public enum NPOI.OpenXmlFormats.Dml.Chart.ST_Shape : Enum {
    public int value__;
    public static ST_Shape cone;
    public static ST_Shape coneToMax;
    public static ST_Shape box;
    public static ST_Shape cylinder;
    public static ST_Shape pyramid;
    public static ST_Shape pyramidToMax;
}
[XmlTypeAttribute]
public enum NPOI.OpenXmlFormats.Dml.Chart.ST_SizeRepresents : Enum {
    public int value__;
    public static ST_SizeRepresents area;
    public static ST_SizeRepresents w;
}
[XmlTypeAttribute]
public enum NPOI.OpenXmlFormats.Dml.Chart.ST_SplitType : Enum {
    public int value__;
    public static ST_SplitType auto;
    public static ST_SplitType cust;
    public static ST_SplitType percent;
    public static ST_SplitType pos;
    public static ST_SplitType val;
}
[XmlTypeAttribute]
public enum NPOI.OpenXmlFormats.Dml.Chart.ST_TickLblPos : Enum {
    public int value__;
    public static ST_TickLblPos high;
    public static ST_TickLblPos low;
    public static ST_TickLblPos nextTo;
    public static ST_TickLblPos none;
}
[XmlTypeAttribute]
public enum NPOI.OpenXmlFormats.Dml.Chart.ST_TickMark : Enum {
    public int value__;
    public static ST_TickMark cross;
    public static ST_TickMark in;
    public static ST_TickMark none;
    public static ST_TickMark out;
}
[XmlTypeAttribute]
public enum NPOI.OpenXmlFormats.Dml.Chart.ST_TimeUnit : Enum {
    public int value__;
    public static ST_TimeUnit days;
    public static ST_TimeUnit months;
    public static ST_TimeUnit years;
}
[XmlTypeAttribute]
public enum NPOI.OpenXmlFormats.Dml.Chart.ST_TrendlineType : Enum {
    public int value__;
    public static ST_TrendlineType exp;
    public static ST_TrendlineType linear;
    public static ST_TrendlineType log;
    public static ST_TrendlineType movingAvg;
    public static ST_TrendlineType poly;
    public static ST_TrendlineType power;
}
[DebuggerStepThroughAttribute]
[DesignerCategoryAttribute("code")]
[XmlTypeAttribute]
[XmlRootAttribute]
public class NPOI.OpenXmlFormats.Dml.ChartDrawing.CT_AbsSizeAnchor : object {
    private CT_Marker fromField;
    private CT_PositiveSize2D extField;
    private object itemField;
    [XmlElementAttribute]
public CT_Marker from { get; public set; }
    [XmlElementAttribute]
public CT_PositiveSize2D ext { get; public set; }
    [XmlElementAttribute("cxnSp", "NPOI.OpenXmlFormats.Dml.ChartDrawing.CT_Connector")]
[XmlElementAttribute("graphicFrame", "NPOI.OpenXmlFormats.Dml.ChartDrawing.CT_GraphicFrame")]
[XmlElementAttribute("grpSp", "NPOI.OpenXmlFormats.Dml.ChartDrawing.CT_GroupShape")]
[XmlElementAttribute("pic", "NPOI.OpenXmlFormats.Dml.ChartDrawing.CT_Picture")]
[XmlElementAttribute("sp", "NPOI.OpenXmlFormats.Dml.ChartDrawing.CT_Shape")]
public object Item { get; public set; }
    public CT_Marker get_from();
    public void set_from(CT_Marker value);
    public CT_PositiveSize2D get_ext();
    public void set_ext(CT_PositiveSize2D value);
    public object get_Item();
    public void set_Item(object value);
}
[DebuggerStepThroughAttribute]
[DesignerCategoryAttribute("code")]
[XmlTypeAttribute]
[XmlRootAttribute]
public class NPOI.OpenXmlFormats.Dml.ChartDrawing.CT_Connector : object {
    private CT_ConnectorNonVisual nvCxnSpPrField;
    private CT_ShapeProperties spPrField;
    private CT_ShapeStyle styleField;
    private string macroField;
    private bool fPublishedField;
    [XmlElementAttribute]
public CT_ConnectorNonVisual nvCxnSpPr { get; public set; }
    [XmlElementAttribute]
public CT_ShapeProperties spPr { get; public set; }
    [XmlElementAttribute]
public CT_ShapeStyle style { get; public set; }
    [XmlAttributeAttribute]
public string macro { get; public set; }
    [XmlAttributeAttribute]
[DefaultValueAttribute("False")]
public bool fPublished { get; public set; }
    public CT_ConnectorNonVisual get_nvCxnSpPr();
    public void set_nvCxnSpPr(CT_ConnectorNonVisual value);
    public CT_ShapeProperties get_spPr();
    public void set_spPr(CT_ShapeProperties value);
    public CT_ShapeStyle get_style();
    public void set_style(CT_ShapeStyle value);
    public string get_macro();
    public void set_macro(string value);
    public bool get_fPublished();
    public void set_fPublished(bool value);
}
[DebuggerStepThroughAttribute]
[DesignerCategoryAttribute("code")]
[XmlTypeAttribute]
[XmlRootAttribute]
public class NPOI.OpenXmlFormats.Dml.ChartDrawing.CT_ConnectorNonVisual : object {
    private CT_NonVisualDrawingProps cNvPrField;
    private CT_NonVisualConnectorProperties cNvCxnSpPrField;
    [XmlElementAttribute]
public CT_NonVisualDrawingProps cNvPr { get; public set; }
    [XmlElementAttribute]
public CT_NonVisualConnectorProperties cNvCxnSpPr { get; public set; }
    public CT_NonVisualDrawingProps get_cNvPr();
    public void set_cNvPr(CT_NonVisualDrawingProps value);
    public CT_NonVisualConnectorProperties get_cNvCxnSpPr();
    public void set_cNvCxnSpPr(CT_NonVisualConnectorProperties value);
}
[DebuggerStepThroughAttribute]
[DesignerCategoryAttribute("code")]
[XmlTypeAttribute]
[XmlRootAttribute]
public class NPOI.OpenXmlFormats.Dml.ChartDrawing.CT_Drawing : object {
    private List`1<object> itemsField;
    [XmlElementAttribute("absSizeAnchor", "NPOI.OpenXmlFormats.Dml.ChartDrawing.CT_AbsSizeAnchor")]
[XmlElementAttribute("relSizeAnchor", "NPOI.OpenXmlFormats.Dml.ChartDrawing.CT_RelSizeAnchor")]
public List`1<object> Items { get; public set; }
    public List`1<object> get_Items();
    public void set_Items(List`1<object> value);
}
[DebuggerStepThroughAttribute]
[DesignerCategoryAttribute("code")]
[XmlTypeAttribute]
[XmlRootAttribute]
public class NPOI.OpenXmlFormats.Dml.ChartDrawing.CT_GraphicFrame : object {
    private CT_GraphicFrameNonVisual nvGraphicFramePrField;
    private CT_Transform2D xfrmField;
    private CT_GraphicalObject graphicField;
    private string macroField;
    private bool fPublishedField;
    [XmlElementAttribute]
public CT_GraphicFrameNonVisual nvGraphicFramePr { get; public set; }
    [XmlElementAttribute]
public CT_Transform2D xfrm { get; public set; }
    [XmlElementAttribute]
public CT_GraphicalObject graphic { get; public set; }
    [XmlAttributeAttribute]
public string macro { get; public set; }
    [XmlAttributeAttribute]
[DefaultValueAttribute("False")]
public bool fPublished { get; public set; }
    public CT_GraphicFrameNonVisual get_nvGraphicFramePr();
    public void set_nvGraphicFramePr(CT_GraphicFrameNonVisual value);
    public CT_Transform2D get_xfrm();
    public void set_xfrm(CT_Transform2D value);
    public CT_GraphicalObject get_graphic();
    public void set_graphic(CT_GraphicalObject value);
    public string get_macro();
    public void set_macro(string value);
    public bool get_fPublished();
    public void set_fPublished(bool value);
}
[DebuggerStepThroughAttribute]
[DesignerCategoryAttribute("code")]
[XmlTypeAttribute]
[XmlRootAttribute]
public class NPOI.OpenXmlFormats.Dml.ChartDrawing.CT_GraphicFrameNonVisual : object {
    private CT_NonVisualDrawingProps cNvPrField;
    private CT_NonVisualGraphicFrameProperties cNvGraphicFramePrField;
    [XmlElementAttribute]
public CT_NonVisualDrawingProps cNvPr { get; public set; }
    [XmlElementAttribute]
public CT_NonVisualGraphicFrameProperties cNvGraphicFramePr { get; public set; }
    public CT_NonVisualDrawingProps get_cNvPr();
    public void set_cNvPr(CT_NonVisualDrawingProps value);
    public CT_NonVisualGraphicFrameProperties get_cNvGraphicFramePr();
    public void set_cNvGraphicFramePr(CT_NonVisualGraphicFrameProperties value);
}
[DebuggerStepThroughAttribute]
[DesignerCategoryAttribute("code")]
[XmlTypeAttribute]
[XmlRootAttribute]
public class NPOI.OpenXmlFormats.Dml.ChartDrawing.CT_GroupShape : object {
    private CT_GroupShapeNonVisual nvGrpSpPrField;
    private CT_GroupShapeProperties grpSpPrField;
    private List`1<object> itemsField;
    [XmlElementAttribute]
public CT_GroupShapeNonVisual nvGrpSpPr { get; public set; }
    [XmlElementAttribute]
public CT_GroupShapeProperties grpSpPr { get; public set; }
    [XmlElementAttribute("cxnSp", "NPOI.OpenXmlFormats.Dml.ChartDrawing.CT_Connector")]
[XmlElementAttribute("graphicFrame", "NPOI.OpenXmlFormats.Dml.ChartDrawing.CT_GraphicFrame")]
[XmlElementAttribute("grpSp", "NPOI.OpenXmlFormats.Dml.ChartDrawing.CT_GroupShape")]
[XmlElementAttribute("pic", "NPOI.OpenXmlFormats.Dml.ChartDrawing.CT_Picture")]
[XmlElementAttribute("sp", "NPOI.OpenXmlFormats.Dml.ChartDrawing.CT_Shape")]
public List`1<object> Items { get; public set; }
    public CT_GroupShapeNonVisual get_nvGrpSpPr();
    public void set_nvGrpSpPr(CT_GroupShapeNonVisual value);
    public CT_GroupShapeProperties get_grpSpPr();
    public void set_grpSpPr(CT_GroupShapeProperties value);
    public List`1<object> get_Items();
    public void set_Items(List`1<object> value);
}
[DebuggerStepThroughAttribute]
[DesignerCategoryAttribute("code")]
[XmlTypeAttribute]
[XmlRootAttribute]
public class NPOI.OpenXmlFormats.Dml.ChartDrawing.CT_GroupShapeNonVisual : object {
    private CT_NonVisualDrawingProps cNvPrField;
    private CT_NonVisualGroupDrawingShapeProps cNvGrpSpPrField;
    [XmlElementAttribute]
public CT_NonVisualDrawingProps cNvPr { get; public set; }
    [XmlElementAttribute]
public CT_NonVisualGroupDrawingShapeProps cNvGrpSpPr { get; public set; }
    public CT_NonVisualDrawingProps get_cNvPr();
    public void set_cNvPr(CT_NonVisualDrawingProps value);
    public CT_NonVisualGroupDrawingShapeProps get_cNvGrpSpPr();
    public void set_cNvGrpSpPr(CT_NonVisualGroupDrawingShapeProps value);
}
[DebuggerStepThroughAttribute]
[DesignerCategoryAttribute("code")]
[XmlTypeAttribute]
[XmlRootAttribute]
public class NPOI.OpenXmlFormats.Dml.ChartDrawing.CT_Marker : object {
    private double xField;
    private double yField;
    [XmlElementAttribute]
public double x { get; public set; }
    [XmlElementAttribute]
public double y { get; public set; }
    public double get_x();
    public void set_x(double value);
    public double get_y();
    public void set_y(double value);
}
[DebuggerStepThroughAttribute]
[DesignerCategoryAttribute("code")]
[XmlTypeAttribute]
[XmlRootAttribute]
public class NPOI.OpenXmlFormats.Dml.ChartDrawing.CT_Picture : object {
    private CT_PictureNonVisual nvPicPrField;
    private CT_BlipFillProperties blipFillField;
    private CT_ShapeProperties spPrField;
    private CT_ShapeStyle styleField;
    private string macroField;
    private bool fPublishedField;
    [XmlElementAttribute]
public CT_PictureNonVisual nvPicPr { get; public set; }
    [XmlElementAttribute]
public CT_BlipFillProperties blipFill { get; public set; }
    [XmlElementAttribute]
public CT_ShapeProperties spPr { get; public set; }
    [XmlElementAttribute]
public CT_ShapeStyle style { get; public set; }
    [XmlAttributeAttribute]
[DefaultValueAttribute("")]
public string macro { get; public set; }
    [XmlAttributeAttribute]
[DefaultValueAttribute("False")]
public bool fPublished { get; public set; }
    public CT_PictureNonVisual get_nvPicPr();
    public void set_nvPicPr(CT_PictureNonVisual value);
    public CT_BlipFillProperties get_blipFill();
    public void set_blipFill(CT_BlipFillProperties value);
    public CT_ShapeProperties get_spPr();
    public void set_spPr(CT_ShapeProperties value);
    public CT_ShapeStyle get_style();
    public void set_style(CT_ShapeStyle value);
    public string get_macro();
    public void set_macro(string value);
    public bool get_fPublished();
    public void set_fPublished(bool value);
}
[DebuggerStepThroughAttribute]
[DesignerCategoryAttribute("code")]
[XmlTypeAttribute]
[XmlRootAttribute]
public class NPOI.OpenXmlFormats.Dml.ChartDrawing.CT_PictureNonVisual : object {
    private CT_NonVisualDrawingProps cNvPrField;
    private CT_NonVisualPictureProperties cNvPicPrField;
    [XmlElementAttribute]
public CT_NonVisualDrawingProps cNvPr { get; public set; }
    [XmlElementAttribute]
public CT_NonVisualPictureProperties cNvPicPr { get; public set; }
    public CT_NonVisualDrawingProps get_cNvPr();
    public void set_cNvPr(CT_NonVisualDrawingProps value);
    public CT_NonVisualPictureProperties get_cNvPicPr();
    public void set_cNvPicPr(CT_NonVisualPictureProperties value);
}
[DebuggerStepThroughAttribute]
[DesignerCategoryAttribute("code")]
[XmlTypeAttribute]
[XmlRootAttribute]
public class NPOI.OpenXmlFormats.Dml.ChartDrawing.CT_RelSizeAnchor : object {
    private CT_Marker fromField;
    private CT_Marker toField;
    private object itemField;
    [XmlElementAttribute]
public CT_Marker from { get; public set; }
    [XmlElementAttribute]
public CT_Marker to { get; public set; }
    [XmlElementAttribute("cxnSp", "NPOI.OpenXmlFormats.Dml.ChartDrawing.CT_Connector")]
[XmlElementAttribute("graphicFrame", "NPOI.OpenXmlFormats.Dml.ChartDrawing.CT_GraphicFrame")]
[XmlElementAttribute("grpSp", "NPOI.OpenXmlFormats.Dml.ChartDrawing.CT_GroupShape")]
[XmlElementAttribute("pic", "NPOI.OpenXmlFormats.Dml.ChartDrawing.CT_Picture")]
[XmlElementAttribute("sp", "NPOI.OpenXmlFormats.Dml.ChartDrawing.CT_Shape")]
public object Item { get; public set; }
    public CT_Marker get_from();
    public void set_from(CT_Marker value);
    public CT_Marker get_to();
    public void set_to(CT_Marker value);
    public object get_Item();
    public void set_Item(object value);
}
[DebuggerStepThroughAttribute]
[DesignerCategoryAttribute("code")]
[XmlTypeAttribute]
[XmlRootAttribute]
public class NPOI.OpenXmlFormats.Dml.ChartDrawing.CT_Shape : object {
    private CT_ShapeNonVisual nvSpPrField;
    private CT_ShapeProperties spPrField;
    private CT_ShapeStyle styleField;
    private CT_TextBody txBodyField;
    private string macroField;
    private string textlinkField;
    private bool fLocksTextField;
    private bool fPublishedField;
    [XmlElementAttribute]
public CT_ShapeNonVisual nvSpPr { get; public set; }
    [XmlElementAttribute]
public CT_ShapeProperties spPr { get; public set; }
    [XmlElementAttribute]
public CT_ShapeStyle style { get; public set; }
    [XmlElementAttribute]
public CT_TextBody txBody { get; public set; }
    [XmlAttributeAttribute]
public string macro { get; public set; }
    [XmlAttributeAttribute]
public string textlink { get; public set; }
    [XmlAttributeAttribute]
[DefaultValueAttribute("True")]
public bool fLocksText { get; public set; }
    [XmlAttributeAttribute]
[DefaultValueAttribute("False")]
public bool fPublished { get; public set; }
    public CT_ShapeNonVisual get_nvSpPr();
    public void set_nvSpPr(CT_ShapeNonVisual value);
    public CT_ShapeProperties get_spPr();
    public void set_spPr(CT_ShapeProperties value);
    public CT_ShapeStyle get_style();
    public void set_style(CT_ShapeStyle value);
    public CT_TextBody get_txBody();
    public void set_txBody(CT_TextBody value);
    public string get_macro();
    public void set_macro(string value);
    public string get_textlink();
    public void set_textlink(string value);
    public bool get_fLocksText();
    public void set_fLocksText(bool value);
    public bool get_fPublished();
    public void set_fPublished(bool value);
}
[DebuggerStepThroughAttribute]
[DesignerCategoryAttribute("code")]
[XmlTypeAttribute]
[XmlRootAttribute]
public class NPOI.OpenXmlFormats.Dml.ChartDrawing.CT_ShapeNonVisual : object {
    private CT_NonVisualDrawingProps cNvPrField;
    private CT_NonVisualDrawingShapeProps cNvSpPrField;
    [XmlElementAttribute]
public CT_NonVisualDrawingProps cNvPr { get; public set; }
    [XmlElementAttribute]
public CT_NonVisualDrawingShapeProps cNvSpPr { get; public set; }
    public CT_NonVisualDrawingProps get_cNvPr();
    public void set_cNvPr(CT_NonVisualDrawingProps value);
    public CT_NonVisualDrawingShapeProps get_cNvSpPr();
    public void set_cNvSpPr(CT_NonVisualDrawingShapeProps value);
}
public class NPOI.OpenXmlFormats.Dml.ChartSpaceDocument : object {
    private CT_ChartSpace chartSpace;
    public ChartSpaceDocument(CT_ChartSpace chartspace);
    public static ChartSpaceDocument Parse(XmlDocument xmldoc, XmlNamespaceManager namespaceMgr);
    public CT_ChartSpace GetChartSpace();
    public void SetChartSpace(CT_ChartSpace chartspace);
    public void Save(Stream stream);
}
[DesignerCategoryAttribute("code")]
[XmlTypeAttribute]
[XmlRootAttribute]
public class NPOI.OpenXmlFormats.Dml.CT_AdjPoint2D : object {
    private string xField;
    private string yField;
    [XmlAttributeAttribute]
public string x { get; public set; }
    [XmlAttributeAttribute]
public string y { get; public set; }
    public static CT_AdjPoint2D Parse(XmlNode node, XmlNamespaceManager namespaceManager);
    internal void Write(StreamWriter sw, string nodeName);
    public string get_x();
    public void set_x(string value);
    public string get_y();
    public void set_y(string value);
}
[DesignerCategoryAttribute("code")]
[XmlTypeAttribute]
[XmlRootAttribute]
public class NPOI.OpenXmlFormats.Dml.CT_AdjustHandleList : object {
    private Object[] itemsField;
    [XmlElementAttribute("ahPolar", "NPOI.OpenXmlFormats.Dml.CT_PolarAdjustHandle")]
[XmlElementAttribute("ahXY", "NPOI.OpenXmlFormats.Dml.CT_XYAdjustHandle")]
public Object[] Items { get; public set; }
    public Object[] get_Items();
    public void set_Items(Object[] value);
}
[XmlTypeAttribute]
[XmlRootAttribute]
public class NPOI.OpenXmlFormats.Dml.CT_AlphaBiLevelEffect : object {
    private int threshField;
    [XmlAttributeAttribute]
public int thresh { get; public set; }
    public int get_thresh();
    public void set_thresh(int value);
}
[XmlTypeAttribute]
[XmlRootAttribute]
public class NPOI.OpenXmlFormats.Dml.CT_AlphaCeilingEffect : object {
}
[XmlTypeAttribute]
[XmlRootAttribute]
public class NPOI.OpenXmlFormats.Dml.CT_AlphaFloorEffect : object {
}
[XmlTypeAttribute]
[XmlRootAttribute]
public class NPOI.OpenXmlFormats.Dml.CT_AlphaInverseEffect : object {
    private CT_ScRgbColor scrgbClrField;
    private CT_SRgbColor srgbClrField;
    private CT_HslColor hslClrField;
    private CT_SystemColor sysClrField;
    private CT_SchemeColor schemeClrField;
    private CT_PresetColor prstClrField;
    [XmlElementAttribute]
public CT_ScRgbColor scrgbClr { get; public set; }
    [XmlElementAttribute]
public CT_SRgbColor srgbClr { get; public set; }
    [XmlElementAttribute]
public CT_HslColor hslClr { get; public set; }
    [XmlElementAttribute]
public CT_SystemColor sysClr { get; public set; }
    [XmlElementAttribute]
public CT_SchemeColor schemeClr { get; public set; }
    [XmlElementAttribute]
public CT_PresetColor prstClr { get; public set; }
    public CT_ScRgbColor get_scrgbClr();
    public void set_scrgbClr(CT_ScRgbColor value);
    public CT_SRgbColor get_srgbClr();
    public void set_srgbClr(CT_SRgbColor value);
    public CT_HslColor get_hslClr();
    public void set_hslClr(CT_HslColor value);
    public CT_SystemColor get_sysClr();
    public void set_sysClr(CT_SystemColor value);
    public CT_SchemeColor get_schemeClr();
    public void set_schemeClr(CT_SchemeColor value);
    public CT_PresetColor get_prstClr();
    public void set_prstClr(CT_PresetColor value);
}
[XmlTypeAttribute]
[XmlRootAttribute]
public class NPOI.OpenXmlFormats.Dml.CT_AlphaModulateEffect : object {
    private CT_EffectContainer contField;
    [XmlElementAttribute]
public CT_EffectContainer cont { get; public set; }
    public CT_EffectContainer get_cont();
    public void set_cont(CT_EffectContainer value);
}
[XmlTypeAttribute]
[XmlRootAttribute]
public class NPOI.OpenXmlFormats.Dml.CT_AlphaModulateFixedEffect : object {
    private int amtField;
    [XmlAttributeAttribute]
[DefaultValueAttribute("100000")]
public int amt { get; public set; }
    public int get_amt();
    public void set_amt(int value);
}
[XmlTypeAttribute]
[XmlRootAttribute]
public class NPOI.OpenXmlFormats.Dml.CT_AlphaOutsetEffect : object {
    private long radField;
    [XmlAttributeAttribute]
[DefaultValueAttribute("System.Int64", "0")]
public long rad { get; public set; }
    public long get_rad();
    public void set_rad(long value);
}
[XmlTypeAttribute]
[XmlRootAttribute]
public class NPOI.OpenXmlFormats.Dml.CT_AlphaReplaceEffect : object {
    private int aField;
    [XmlAttributeAttribute]
public int a { get; public set; }
    public int get_a();
    public void set_a(int value);
}
[XmlTypeAttribute]
[XmlRootAttribute]
public class NPOI.OpenXmlFormats.Dml.CT_Angle : object {
    private int valField;
    [XmlAttributeAttribute]
public int val { get; public set; }
    public int get_val();
    public void set_val(int value);
}
[DebuggerStepThroughAttribute]
[DesignerCategoryAttribute("code")]
[XmlTypeAttribute]
[XmlRootAttribute]
public class NPOI.OpenXmlFormats.Dml.CT_AnimationChartBuildProperties : object {
    private string bldField;
    private bool animBgField;
    [XmlAttributeAttribute]
[DefaultValueAttribute("allAtOnce")]
public string bld { get; public set; }
    [XmlAttributeAttribute]
[DefaultValueAttribute("True")]
public bool animBg { get; public set; }
    public string get_bld();
    public void set_bld(string value);
    public bool get_animBg();
    public void set_animBg(bool value);
}
[DebuggerStepThroughAttribute]
[DesignerCategoryAttribute("code")]
[XmlTypeAttribute]
[XmlRootAttribute]
public class NPOI.OpenXmlFormats.Dml.CT_AnimationChartElement : object {
    private int seriesIdxField;
    private int categoryIdxField;
    private ST_ChartBuildStep bldStepField;
    [XmlAttributeAttribute]
[DefaultValueAttribute("-1")]
public int seriesIdx { get; public set; }
    [XmlAttributeAttribute]
[DefaultValueAttribute("-1")]
public int categoryIdx { get; public set; }
    [XmlAttributeAttribute]
public ST_ChartBuildStep bldStep { get; public set; }
    public int get_seriesIdx();
    public void set_seriesIdx(int value);
    public int get_categoryIdx();
    public void set_categoryIdx(int value);
    public ST_ChartBuildStep get_bldStep();
    public void set_bldStep(ST_ChartBuildStep value);
}
[DebuggerStepThroughAttribute]
[DesignerCategoryAttribute("code")]
[XmlTypeAttribute]
[XmlRootAttribute]
public class NPOI.OpenXmlFormats.Dml.CT_AnimationDgmBuildProperties : object {
    private string bldField;
    private bool revField;
    [XmlAttributeAttribute]
[DefaultValueAttribute("allAtOnce")]
public string bld { get; public set; }
    [XmlAttributeAttribute]
[DefaultValueAttribute("False")]
public bool rev { get; public set; }
    public string get_bld();
    public void set_bld(string value);
    public bool get_rev();
    public void set_rev(bool value);
}
[DebuggerStepThroughAttribute]
[DesignerCategoryAttribute("code")]
[XmlTypeAttribute]
[XmlRootAttribute]
public class NPOI.OpenXmlFormats.Dml.CT_AnimationDgmElement : object {
    private string idField;
    private ST_DgmBuildStep bldStepField;
    [XmlAttributeAttribute]
[DefaultValueAttribute("{00000000-0000-0000-0000-000000000000}")]
public string id { get; public set; }
    [XmlAttributeAttribute]
[DefaultValueAttribute("Mono.Cecil.CustomAttributeArgument")]
public ST_DgmBuildStep bldStep { get; public set; }
    public string get_id();
    public void set_id(string value);
    public ST_DgmBuildStep get_bldStep();
    public void set_bldStep(ST_DgmBuildStep value);
}
[DebuggerStepThroughAttribute]
[DesignerCategoryAttribute("code")]
[XmlTypeAttribute]
[XmlRootAttribute]
public class NPOI.OpenXmlFormats.Dml.CT_AnimationElementChoice : object {
    private object itemField;
    [XmlElementAttribute("chart", "NPOI.OpenXmlFormats.Dml.CT_AnimationChartElement")]
[XmlElementAttribute("dgm", "NPOI.OpenXmlFormats.Dml.CT_AnimationDgmElement")]
public object Item { get; public set; }
    public object get_Item();
    public void set_Item(object value);
}
[DebuggerStepThroughAttribute]
[DesignerCategoryAttribute("code")]
[XmlTypeAttribute]
[XmlRootAttribute]
public class NPOI.OpenXmlFormats.Dml.CT_AnimationGraphicalObjectBuildProperties : object {
    private object itemField;
    [XmlElementAttribute("bldChart", "NPOI.OpenXmlFormats.Dml.CT_AnimationChartBuildProperties")]
[XmlElementAttribute("bldDgm", "NPOI.OpenXmlFormats.Dml.CT_AnimationDgmBuildProperties")]
public object Item { get; public set; }
    public object get_Item();
    public void set_Item(object value);
}
[DebuggerStepThroughAttribute]
[DesignerCategoryAttribute("code")]
[XmlTypeAttribute]
[XmlRootAttribute]
public class NPOI.OpenXmlFormats.Dml.CT_AudioCD : object {
    private CT_AudioCDTime stField;
    private CT_AudioCDTime endField;
    private CT_OfficeArtExtensionList extLstField;
    [XmlElementAttribute]
public CT_AudioCDTime st { get; public set; }
    [XmlElementAttribute]
public CT_AudioCDTime end { get; public set; }
    [XmlElementAttribute]
public CT_OfficeArtExtensionList extLst { get; public set; }
    public CT_AudioCDTime get_st();
    public void set_st(CT_AudioCDTime value);
    public CT_AudioCDTime get_end();
    public void set_end(CT_AudioCDTime value);
    public CT_OfficeArtExtensionList get_extLst();
    public void set_extLst(CT_OfficeArtExtensionList value);
}
[DebuggerStepThroughAttribute]
[DesignerCategoryAttribute("code")]
[XmlTypeAttribute]
[XmlRootAttribute]
public class NPOI.OpenXmlFormats.Dml.CT_AudioCDTime : object {
    private byte trackField;
    private UInt32 timeField;
    [XmlAttributeAttribute]
public byte track { get; public set; }
    [XmlAttributeAttribute]
[DefaultValueAttribute("System.UInt32", "0")]
public UInt32 time { get; public set; }
    public byte get_track();
    public void set_track(byte value);
    public UInt32 get_time();
    public void set_time(UInt32 value);
}
[DebuggerStepThroughAttribute]
[DesignerCategoryAttribute("code")]
[XmlTypeAttribute]
[XmlRootAttribute]
public class NPOI.OpenXmlFormats.Dml.CT_AudioFile : object {
    private CT_OfficeArtExtensionList extLstField;
    private string linkField;
    [XmlElementAttribute]
public CT_OfficeArtExtensionList extLst { get; public set; }
    [XmlAttributeAttribute]
public string link { get; public set; }
    public CT_OfficeArtExtensionList get_extLst();
    public void set_extLst(CT_OfficeArtExtensionList value);
    public string get_link();
    public void set_link(string value);
}
[XmlTypeAttribute]
[XmlRootAttribute]
public class NPOI.OpenXmlFormats.Dml.CT_Backdrop : object {
    private CT_Point3D anchorField;
    private CT_Vector3D normField;
    private CT_Vector3D upField;
    private CT_OfficeArtExtensionList extLstField;
    [XmlElementAttribute]
public CT_Point3D anchor { get; public set; }
    [XmlElementAttribute]
public CT_Vector3D norm { get; public set; }
    [XmlElementAttribute]
public CT_Vector3D up { get; public set; }
    [XmlElementAttribute]
public CT_OfficeArtExtensionList extLst { get; public set; }
    public static CT_Backdrop Parse(XmlNode node, XmlNamespaceManager namespaceManager);
    internal void Write(StreamWriter sw, string nodeName);
    public CT_Point3D get_anchor();
    public void set_anchor(CT_Point3D value);
    public CT_Vector3D get_norm();
    public void set_norm(CT_Vector3D value);
    public CT_Vector3D get_up();
    public void set_up(CT_Vector3D value);
    public CT_OfficeArtExtensionList get_extLst();
    public void set_extLst(CT_OfficeArtExtensionList value);
}
[DesignerCategoryAttribute("code")]
[XmlTypeAttribute]
[XmlRootAttribute]
public class NPOI.OpenXmlFormats.Dml.CT_BackgroundFillStyleList : object {
    private List`1<CT_BlipFillProperties> blipFillField;
    private List`1<CT_GradientFillProperties> gradFillField;
    private List`1<CT_GroupFillProperties> grpFillField;
    private List`1<CT_NoFillProperties> noFillField;
    private List`1<CT_PatternFillProperties> pattFillField;
    private List`1<CT_SolidColorFillProperties> solidFillField;
    public List`1<CT_BlipFillProperties> blipFill { get; public set; }
    public List`1<CT_GradientFillProperties> gradFill { get; public set; }
    public List`1<CT_GroupFillProperties> grpFill { get; public set; }
    public List`1<CT_NoFillProperties> noFill { get; public set; }
    public List`1<CT_PatternFillProperties> pattFill { get; public set; }
    public List`1<CT_SolidColorFillProperties> solidFill { get; public set; }
    public static CT_BackgroundFillStyleList Parse(XmlNode node, XmlNamespaceManager namespaceManager);
    internal void Write(StreamWriter sw, string nodeName);
    public List`1<CT_BlipFillProperties> get_blipFill();
    public void set_blipFill(List`1<CT_BlipFillProperties> value);
    public List`1<CT_GradientFillProperties> get_gradFill();
    public void set_gradFill(List`1<CT_GradientFillProperties> value);
    public List`1<CT_GroupFillProperties> get_grpFill();
    public void set_grpFill(List`1<CT_GroupFillProperties> value);
    public List`1<CT_NoFillProperties> get_noFill();
    public void set_noFill(List`1<CT_NoFillProperties> value);
    public List`1<CT_PatternFillProperties> get_pattFill();
    public void set_pattFill(List`1<CT_PatternFillProperties> value);
    public List`1<CT_SolidColorFillProperties> get_solidFill();
    public void set_solidFill(List`1<CT_SolidColorFillProperties> value);
}
[DebuggerStepThroughAttribute]
[DesignerCategoryAttribute("code")]
[XmlTypeAttribute]
[XmlRootAttribute]
public class NPOI.OpenXmlFormats.Dml.CT_BackgroundFormatting : object {
    private CT_NoFillProperties noFillField;
    private CT_SolidColorFillProperties solidFillField;
    private CT_GradientFillProperties gradFillField;
    private CT_BlipFillProperties blipFillField;
    private CT_PatternFillProperties pattFillField;
    private CT_GroupFillProperties grpFillField;
    private CT_EffectList effectLstField;
    private CT_EffectContainer effectDagField;
    [XmlElementAttribute]
public CT_NoFillProperties noFill { get; public set; }
    [XmlElementAttribute]
public CT_SolidColorFillProperties solidFill { get; public set; }
    [XmlElementAttribute]
public CT_GradientFillProperties gradFill { get; public set; }
    [XmlElementAttribute]
public CT_BlipFillProperties blipFill { get; public set; }
    [XmlElementAttribute]
public CT_PatternFillProperties pattFill { get; public set; }
    [XmlElementAttribute]
public CT_GroupFillProperties grpFill { get; public set; }
    [XmlElementAttribute]
public CT_EffectList effectLst { get; public set; }
    [XmlElementAttribute]
public CT_EffectContainer effectDag { get; public set; }
    public CT_NoFillProperties get_noFill();
    public void set_noFill(CT_NoFillProperties value);
    public CT_SolidColorFillProperties get_solidFill();
    public void set_solidFill(CT_SolidColorFillProperties value);
    public CT_GradientFillProperties get_gradFill();
    public void set_gradFill(CT_GradientFillProperties value);
    public CT_BlipFillProperties get_blipFill();
    public void set_blipFill(CT_BlipFillProperties value);
    public CT_PatternFillProperties get_pattFill();
    public void set_pattFill(CT_PatternFillProperties value);
    public CT_GroupFillProperties get_grpFill();
    public void set_grpFill(CT_GroupFillProperties value);
    public CT_EffectList get_effectLst();
    public void set_effectLst(CT_EffectList value);
    public CT_EffectContainer get_effectDag();
    public void set_effectDag(CT_EffectContainer value);
}
[DesignerCategoryAttribute("code")]
[XmlTypeAttribute]
[XmlRootAttribute]
public class NPOI.OpenXmlFormats.Dml.CT_BaseStyles : object {
    private CT_ColorScheme clrSchemeField;
    private CT_FontScheme fontSchemeField;
    private CT_StyleMatrix fmtSchemeField;
    private CT_OfficeArtExtensionList extLstField;
    [XmlElementAttribute]
public CT_ColorScheme clrScheme { get; public set; }
    [XmlElementAttribute]
public CT_FontScheme fontScheme { get; public set; }
    [XmlElementAttribute]
public CT_StyleMatrix fmtScheme { get; public set; }
    [XmlElementAttribute]
public CT_OfficeArtExtensionList extLst { get; public set; }
    public static CT_BaseStyles Parse(XmlNode node, XmlNamespaceManager namespaceManager);
    internal void Write(StreamWriter sw, string nodeName);
    public CT_ColorScheme get_clrScheme();
    public void set_clrScheme(CT_ColorScheme value);
    public CT_FontScheme get_fontScheme();
    public void set_fontScheme(CT_FontScheme value);
    public CT_StyleMatrix get_fmtScheme();
    public void set_fmtScheme(CT_StyleMatrix value);
    public CT_OfficeArtExtensionList get_extLst();
    public void set_extLst(CT_OfficeArtExtensionList value);
}
[DebuggerStepThroughAttribute]
[DesignerCategoryAttribute("code")]
[XmlTypeAttribute]
[XmlRootAttribute("themeOverride")]
public class NPOI.OpenXmlFormats.Dml.CT_BaseStylesOverride : object {
    private CT_ColorScheme clrSchemeField;
    private CT_FontScheme fontSchemeField;
    private CT_StyleMatrix fmtSchemeField;
    [XmlElementAttribute]
public CT_ColorScheme clrScheme { get; public set; }
    [XmlElementAttribute]
public CT_FontScheme fontScheme { get; public set; }
    [XmlElementAttribute]
public CT_StyleMatrix fmtScheme { get; public set; }
    public CT_ColorScheme get_clrScheme();
    public void set_clrScheme(CT_ColorScheme value);
    public CT_FontScheme get_fontScheme();
    public void set_fontScheme(CT_FontScheme value);
    public CT_StyleMatrix get_fmtScheme();
    public void set_fmtScheme(CT_StyleMatrix value);
}
[DebuggerStepThroughAttribute]
[DesignerCategoryAttribute("code")]
[XmlTypeAttribute]
[XmlRootAttribute]
public class NPOI.OpenXmlFormats.Dml.CT_Bevel : object {
    private long wField;
    private long hField;
    private ST_BevelPresetType prstField;
    [XmlAttributeAttribute]
[DefaultValueAttribute("System.Int64", "76200")]
public long w { get; public set; }
    [XmlAttributeAttribute]
[DefaultValueAttribute("System.Int64", "76200")]
public long h { get; public set; }
    [XmlAttributeAttribute]
[DefaultValueAttribute("Mono.Cecil.CustomAttributeArgument")]
public ST_BevelPresetType prst { get; public set; }
    public static CT_Bevel Parse(XmlNode node, XmlNamespaceManager namespaceManager);
    internal void Write(StreamWriter sw, string nodeName);
    public long get_w();
    public void set_w(long value);
    public long get_h();
    public void set_h(long value);
    public ST_BevelPresetType get_prst();
    public void set_prst(ST_BevelPresetType value);
}
[XmlTypeAttribute]
[XmlRootAttribute]
public class NPOI.OpenXmlFormats.Dml.CT_BiLevelEffect : object {
    private int threshField;
    [XmlAttributeAttribute]
public int thresh { get; public set; }
    public int get_thresh();
    public void set_thresh(int value);
}
[XmlTypeAttribute]
[XmlRootAttribute]
public class NPOI.OpenXmlFormats.Dml.CT_BlendEffect : object {
    private CT_EffectContainer contField;
    private ST_BlendMode blendField;
    [XmlElementAttribute]
public CT_EffectContainer cont { get; public set; }
    [XmlAttributeAttribute]
public ST_BlendMode blend { get; public set; }
    public CT_EffectContainer get_cont();
    public void set_cont(CT_EffectContainer value);
    public ST_BlendMode get_blend();
    public void set_blend(ST_BlendMode value);
}
[XmlTypeAttribute]
[XmlRootAttribute("blip")]
public class NPOI.OpenXmlFormats.Dml.CT_Blip : object {
    private List`1<object> itemsField;
    private CT_OfficeArtExtensionList extLstField;
    private string embedField;
    private string linkField;
    private ST_BlipCompression cstateField;
    [XmlElementAttribute("alphaBiLevel", "NPOI.OpenXmlFormats.Dml.CT_AlphaBiLevelEffect")]
[XmlElementAttribute("alphaCeiling", "NPOI.OpenXmlFormats.Dml.CT_AlphaCeilingEffect")]
[XmlElementAttribute("alphaFloor", "NPOI.OpenXmlFormats.Dml.CT_AlphaFloorEffect")]
[XmlElementAttribute("alphaInv", "NPOI.OpenXmlFormats.Dml.CT_AlphaInverseEffect")]
[XmlElementAttribute("alphaMod", "NPOI.OpenXmlFormats.Dml.CT_AlphaModulateEffect")]
[XmlElementAttribute("alphaModFix", "NPOI.OpenXmlFormats.Dml.CT_AlphaModulateFixedEffect")]
[XmlElementAttribute("alphaRepl", "NPOI.OpenXmlFormats.Dml.CT_AlphaReplaceEffect")]
[XmlElementAttribute("biLevel", "NPOI.OpenXmlFormats.Dml.CT_BiLevelEffect")]
[XmlElementAttribute("blur", "NPOI.OpenXmlFormats.Dml.CT_BlurEffect")]
[XmlElementAttribute("clrChange", "NPOI.OpenXmlFormats.Dml.CT_ColorChangeEffect")]
[XmlElementAttribute("clrRepl", "NPOI.OpenXmlFormats.Dml.CT_ColorReplaceEffect")]
[XmlElementAttribute("duotone", "NPOI.OpenXmlFormats.Dml.CT_DuotoneEffect")]
[XmlElementAttribute("fillOverlay", "NPOI.OpenXmlFormats.Dml.CT_FillOverlayEffect")]
[XmlElementAttribute("grayscl", "NPOI.OpenXmlFormats.Dml.CT_GrayscaleEffect")]
[XmlElementAttribute("hsl", "NPOI.OpenXmlFormats.Dml.CT_HSLEffect")]
[XmlElementAttribute("lum", "NPOI.OpenXmlFormats.Dml.CT_LuminanceEffect")]
[XmlElementAttribute("tint", "NPOI.OpenXmlFormats.Dml.CT_TintEffect")]
public List`1<object> Items { get; public set; }
    [XmlElementAttribute]
public CT_OfficeArtExtensionList extLst { get; public set; }
    [XmlAttributeAttribute]
[DefaultValueAttribute("")]
public string embed { get; public set; }
    [XmlAttributeAttribute]
[DefaultValueAttribute("")]
public string link { get; public set; }
    [XmlAttributeAttribute]
[DefaultValueAttribute("Mono.Cecil.CustomAttributeArgument")]
public ST_BlipCompression cstate { get; public set; }
    public static CT_Blip Parse(XmlNode node, XmlNamespaceManager namespaceManager);
    internal void Write(StreamWriter sw, string nodeName);
    public List`1<object> get_Items();
    public void set_Items(List`1<object> value);
    public CT_OfficeArtExtensionList get_extLst();
    public void set_extLst(CT_OfficeArtExtensionList value);
    public string get_embed();
    public void set_embed(string value);
    public string get_link();
    public void set_link(string value);
    public ST_BlipCompression get_cstate();
    public void set_cstate(ST_BlipCompression value);
}
[XmlTypeAttribute]
[XmlRootAttribute]
public class NPOI.OpenXmlFormats.Dml.CT_BlipFillProperties : object {
    private CT_Blip blipField;
    private CT_RelativeRect srcRectField;
    private CT_TileInfoProperties tileField;
    private CT_StretchInfoProperties stretchField;
    private UInt32 dpiField;
    private bool dpiFieldSpecified;
    private bool rotWithShapeField;
    private bool rotWithShapeFieldSpecified;
    [XmlElementAttribute]
public CT_Blip blip { get; public set; }
    [XmlElementAttribute]
public CT_RelativeRect srcRect { get; public set; }
    [XmlElementAttribute]
public CT_TileInfoProperties tile { get; public set; }
    [XmlElementAttribute]
public CT_StretchInfoProperties stretch { get; public set; }
    [XmlAttributeAttribute]
public UInt32 dpi { get; public set; }
    [XmlIgnoreAttribute]
public bool dpiSpecified { get; public set; }
    [XmlAttributeAttribute]
public bool rotWithShape { get; public set; }
    [XmlIgnoreAttribute]
public bool rotWithShapeSpecified { get; public set; }
    public CT_Blip AddNewBlip();
    public CT_StretchInfoProperties AddNewStretch();
    public static CT_BlipFillProperties Parse(XmlNode node, XmlNamespaceManager namespaceManager);
    internal void Write(StreamWriter sw, string nodeName);
    public CT_Blip get_blip();
    public void set_blip(CT_Blip value);
    public CT_RelativeRect get_srcRect();
    public void set_srcRect(CT_RelativeRect value);
    public CT_TileInfoProperties get_tile();
    public void set_tile(CT_TileInfoProperties value);
    public CT_StretchInfoProperties get_stretch();
    public void set_stretch(CT_StretchInfoProperties value);
    public UInt32 get_dpi();
    public void set_dpi(UInt32 value);
    public bool get_dpiSpecified();
    public void set_dpiSpecified(bool value);
    public bool get_rotWithShape();
    public void set_rotWithShape(bool value);
    public bool get_rotWithShapeSpecified();
    public void set_rotWithShapeSpecified(bool value);
    public bool IsSetBlip();
}
[XmlTypeAttribute]
[XmlRootAttribute]
public class NPOI.OpenXmlFormats.Dml.CT_BlurEffect : object {
    private long radField;
    private bool growField;
    [XmlAttributeAttribute]
[DefaultValueAttribute("System.Int64", "0")]
public long rad { get; public set; }
    [XmlAttributeAttribute]
[DefaultValueAttribute("True")]
public bool grow { get; public set; }
    public static CT_BlurEffect Parse(XmlNode node, XmlNamespaceManager namespaceManager);
    internal void Write(StreamWriter sw, string nodeName);
    public long get_rad();
    public void set_rad(long value);
    public bool get_grow();
    public void set_grow(bool value);
}
[XmlTypeAttribute]
[XmlRootAttribute]
public class NPOI.OpenXmlFormats.Dml.CT_Camera : object {
    private CT_SphereCoords rotField;
    private ST_PresetCameraType prstField;
    private int fovField;
    private bool fovFieldSpecified;
    private int zoomField;
    [XmlElementAttribute]
public CT_SphereCoords rot { get; public set; }
    [XmlAttributeAttribute]
public ST_PresetCameraType prst { get; public set; }
    [XmlAttributeAttribute]
public int fov { get; public set; }
    [XmlIgnoreAttribute]
public bool fovSpecified { get; public set; }
    [XmlAttributeAttribute]
[DefaultValueAttribute("100000")]
public int zoom { get; public set; }
    public static CT_Camera Parse(XmlNode node, XmlNamespaceManager namespaceManager);
    internal void Write(StreamWriter sw, string nodeName);
    public CT_SphereCoords get_rot();
    public void set_rot(CT_SphereCoords value);
    public ST_PresetCameraType get_prst();
    public void set_prst(ST_PresetCameraType value);
    public int get_fov();
    public void set_fov(int value);
    public bool get_fovSpecified();
    public void set_fovSpecified(bool value);
    public int get_zoom();
    public void set_zoom(int value);
}
[DebuggerStepThroughAttribute]
[DesignerCategoryAttribute("code")]
[XmlTypeAttribute]
[XmlRootAttribute]
public class NPOI.OpenXmlFormats.Dml.CT_Cell3D : object {
    private CT_Bevel bevelField;
    private CT_LightRig lightRigField;
    private CT_OfficeArtExtensionList extLstField;
    private ST_PresetMaterialType prstMaterialField;
    [XmlElementAttribute]
public CT_Bevel bevel { get; public set; }
    [XmlElementAttribute]
public CT_LightRig lightRig { get; public set; }
    [XmlElementAttribute]
public CT_OfficeArtExtensionList extLst { get; public set; }
    [XmlAttributeAttribute]
[DefaultValueAttribute("Mono.Cecil.CustomAttributeArgument")]
public ST_PresetMaterialType prstMaterial { get; public set; }
    public CT_Bevel get_bevel();
    public void set_bevel(CT_Bevel value);
    public CT_LightRig get_lightRig();
    public void set_lightRig(CT_LightRig value);
    public CT_OfficeArtExtensionList get_extLst();
    public void set_extLst(CT_OfficeArtExtensionList value);
    public ST_PresetMaterialType get_prstMaterial();
    public void set_prstMaterial(ST_PresetMaterialType value);
}
[DebuggerStepThroughAttribute]
[DesignerCategoryAttribute("code")]
[XmlTypeAttribute]
[XmlRootAttribute]
public class NPOI.OpenXmlFormats.Dml.CT_ClipboardStyleSheet : object {
    private CT_BaseStyles themeElementsField;
    private CT_ColorMapping clrMapField;
    [XmlElementAttribute]
public CT_BaseStyles themeElements { get; public set; }
    [XmlElementAttribute]
public CT_ColorMapping clrMap { get; public set; }
    public CT_BaseStyles get_themeElements();
    public void set_themeElements(CT_BaseStyles value);
    public CT_ColorMapping get_clrMap();
    public void set_clrMap(CT_ColorMapping value);
}
[XmlTypeAttribute]
[XmlRootAttribute]
public class NPOI.OpenXmlFormats.Dml.CT_Color : object {
    private CT_ScRgbColor scrgbClrField;
    private CT_SRgbColor srgbClrField;
    private CT_HslColor hslClrField;
    private CT_SystemColor sysClrField;
    private CT_SchemeColor schemeClrField;
    private CT_PresetColor prstClrField;
    [XmlElementAttribute]
public CT_ScRgbColor scrgbClr { get; public set; }
    [XmlElementAttribute]
public CT_SRgbColor srgbClr { get; public set; }
    [XmlElementAttribute]
public CT_HslColor hslClr { get; public set; }
    [XmlElementAttribute]
public CT_SystemColor sysClr { get; public set; }
    [XmlElementAttribute]
public CT_SchemeColor schemeClr { get; public set; }
    [XmlElementAttribute]
public CT_PresetColor prstClr { get; public set; }
    public static CT_Color Parse(XmlNode node, XmlNamespaceManager namespaceManager);
    internal void Write(StreamWriter sw, string nodeName);
    public CT_ScRgbColor get_scrgbClr();
    public void set_scrgbClr(CT_ScRgbColor value);
    public CT_SRgbColor get_srgbClr();
    public void set_srgbClr(CT_SRgbColor value);
    public CT_HslColor get_hslClr();
    public void set_hslClr(CT_HslColor value);
    public CT_SystemColor get_sysClr();
    public void set_sysClr(CT_SystemColor value);
    public CT_SchemeColor get_schemeClr();
    public void set_schemeClr(CT_SchemeColor value);
    public CT_PresetColor get_prstClr();
    public void set_prstClr(CT_PresetColor value);
    public bool IsSetSrgbClr();
    public bool IsSetSysClr();
    public CT_SRgbColor AddNewSrgbClr();
}
[XmlTypeAttribute]
[XmlRootAttribute]
public class NPOI.OpenXmlFormats.Dml.CT_ColorChangeEffect : object {
    private CT_Color clrFromField;
    private CT_Color clrToField;
    private bool useAField;
    [XmlElementAttribute]
public CT_Color clrFrom { get; public set; }
    [XmlElementAttribute]
public CT_Color clrTo { get; public set; }
    [XmlAttributeAttribute]
[DefaultValueAttribute("True")]
public bool useA { get; public set; }
    public CT_Color get_clrFrom();
    public void set_clrFrom(CT_Color value);
    public CT_Color get_clrTo();
    public void set_clrTo(CT_Color value);
    public bool get_useA();
    public void set_useA(bool value);
}
[DebuggerStepThroughAttribute]
[DesignerCategoryAttribute("code")]
[XmlTypeAttribute]
[XmlRootAttribute]
public class NPOI.OpenXmlFormats.Dml.CT_ColorMapping : object {
    private CT_OfficeArtExtensionList extLstField;
    private ST_ColorSchemeIndex bg1Field;
    private ST_ColorSchemeIndex tx1Field;
    private ST_ColorSchemeIndex bg2Field;
    private ST_ColorSchemeIndex tx2Field;
    private ST_ColorSchemeIndex accent1Field;
    private ST_ColorSchemeIndex accent2Field;
    private ST_ColorSchemeIndex accent3Field;
    private ST_ColorSchemeIndex accent4Field;
    private ST_ColorSchemeIndex accent5Field;
    private ST_ColorSchemeIndex accent6Field;
    private ST_ColorSchemeIndex hlinkField;
    private ST_ColorSchemeIndex folHlinkField;
    [XmlElementAttribute]
public CT_OfficeArtExtensionList extLst { get; public set; }
    [XmlAttributeAttribute]
public ST_ColorSchemeIndex bg1 { get; public set; }
    [XmlAttributeAttribute]
public ST_ColorSchemeIndex tx1 { get; public set; }
    [XmlAttributeAttribute]
public ST_ColorSchemeIndex bg2 { get; public set; }
    [XmlAttributeAttribute]
public ST_ColorSchemeIndex tx2 { get; public set; }
    [XmlAttributeAttribute]
public ST_ColorSchemeIndex accent1 { get; public set; }
    [XmlAttributeAttribute]
public ST_ColorSchemeIndex accent2 { get; public set; }
    [XmlAttributeAttribute]
public ST_ColorSchemeIndex accent3 { get; public set; }
    [XmlAttributeAttribute]
public ST_ColorSchemeIndex accent4 { get; public set; }
    [XmlAttributeAttribute]
public ST_ColorSchemeIndex accent5 { get; public set; }
    [XmlAttributeAttribute]
public ST_ColorSchemeIndex accent6 { get; public set; }
    [XmlAttributeAttribute]
public ST_ColorSchemeIndex hlink { get; public set; }
    [XmlAttributeAttribute]
public ST_ColorSchemeIndex folHlink { get; public set; }
    public static CT_ColorMapping Parse(XmlNode node, XmlNamespaceManager namespaceManager);
    internal void Write(StreamWriter sw, string nodeName);
    public CT_OfficeArtExtensionList get_extLst();
    public void set_extLst(CT_OfficeArtExtensionList value);
    public ST_ColorSchemeIndex get_bg1();
    public void set_bg1(ST_ColorSchemeIndex value);
    public ST_ColorSchemeIndex get_tx1();
    public void set_tx1(ST_ColorSchemeIndex value);
    public ST_ColorSchemeIndex get_bg2();
    public void set_bg2(ST_ColorSchemeIndex value);
    public ST_ColorSchemeIndex get_tx2();
    public void set_tx2(ST_ColorSchemeIndex value);
    public ST_ColorSchemeIndex get_accent1();
    public void set_accent1(ST_ColorSchemeIndex value);
    public ST_ColorSchemeIndex get_accent2();
    public void set_accent2(ST_ColorSchemeIndex value);
    public ST_ColorSchemeIndex get_accent3();
    public void set_accent3(ST_ColorSchemeIndex value);
    public ST_ColorSchemeIndex get_accent4();
    public void set_accent4(ST_ColorSchemeIndex value);
    public ST_ColorSchemeIndex get_accent5();
    public void set_accent5(ST_ColorSchemeIndex value);
    public ST_ColorSchemeIndex get_accent6();
    public void set_accent6(ST_ColorSchemeIndex value);
    public ST_ColorSchemeIndex get_hlink();
    public void set_hlink(ST_ColorSchemeIndex value);
    public ST_ColorSchemeIndex get_folHlink();
    public void set_folHlink(ST_ColorSchemeIndex value);
}
[DebuggerStepThroughAttribute]
[DesignerCategoryAttribute("code")]
[XmlTypeAttribute]
[XmlRootAttribute]
public class NPOI.OpenXmlFormats.Dml.CT_ColorMappingOverride : object {
    private object itemField;
    [XmlElementAttribute("masterClrMapping", "NPOI.OpenXmlFormats.Dml.CT_EmptyElement")]
[XmlElementAttribute("overrideClrMapping", "NPOI.OpenXmlFormats.Dml.CT_ColorMapping")]
public object Item { get; public set; }
    public object get_Item();
    public void set_Item(object value);
}
[XmlTypeAttribute]
[XmlRootAttribute]
public class NPOI.OpenXmlFormats.Dml.CT_ColorMRU : object {
    private List`1<object> itemsField;
    [XmlElementAttribute("hslClr", "NPOI.OpenXmlFormats.Dml.CT_HslColor")]
[XmlElementAttribute("prstClr", "NPOI.OpenXmlFormats.Dml.CT_PresetColor")]
[XmlElementAttribute("schemeClr", "NPOI.OpenXmlFormats.Dml.CT_SchemeColor")]
[XmlElementAttribute("scrgbClr", "NPOI.OpenXmlFormats.Dml.CT_ScRgbColor")]
[XmlElementAttribute("srgbClr", "NPOI.OpenXmlFormats.Dml.CT_SRgbColor")]
[XmlElementAttribute("sysClr", "NPOI.OpenXmlFormats.Dml.CT_SystemColor")]
public List`1<object> Items { get; public set; }
    public List`1<object> get_Items();
    public void set_Items(List`1<object> value);
}
[XmlTypeAttribute]
[XmlRootAttribute]
public class NPOI.OpenXmlFormats.Dml.CT_ColorReplaceEffect : object {
    private CT_ScRgbColor scrgbClrField;
    private CT_SRgbColor srgbClrField;
    private CT_HslColor hslClrField;
    private CT_SystemColor sysClrField;
    private CT_SchemeColor schemeClrField;
    private CT_PresetColor prstClrField;
    [XmlElementAttribute]
public CT_ScRgbColor scrgbClr { get; public set; }
    [XmlElementAttribute]
public CT_SRgbColor srgbClr { get; public set; }
    [XmlElementAttribute]
public CT_HslColor hslClr { get; public set; }
    [XmlElementAttribute]
public CT_SystemColor sysClr { get; public set; }
    [XmlElementAttribute]
public CT_SchemeColor schemeClr { get; public set; }
    [XmlElementAttribute]
public CT_PresetColor prstClr { get; public set; }
    public CT_ScRgbColor get_scrgbClr();
    public void set_scrgbClr(CT_ScRgbColor value);
    public CT_SRgbColor get_srgbClr();
    public void set_srgbClr(CT_SRgbColor value);
    public CT_HslColor get_hslClr();
    public void set_hslClr(CT_HslColor value);
    public CT_SystemColor get_sysClr();
    public void set_sysClr(CT_SystemColor value);
    public CT_SchemeColor get_schemeClr();
    public void set_schemeClr(CT_SchemeColor value);
    public CT_PresetColor get_prstClr();
    public void set_prstClr(CT_PresetColor value);
}
[DesignerCategoryAttribute("code")]
[XmlTypeAttribute]
[XmlRootAttribute]
public class NPOI.OpenXmlFormats.Dml.CT_ColorScheme : object {
    private CT_Color dk1Field;
    private CT_Color lt1Field;
    private CT_Color dk2Field;
    private CT_Color lt2Field;
    private CT_Color accent1Field;
    private CT_Color accent2Field;
    private CT_Color accent3Field;
    private CT_Color accent4Field;
    private CT_Color accent5Field;
    private CT_Color accent6Field;
    private CT_Color hlinkField;
    private CT_Color folHlinkField;
    private CT_OfficeArtExtensionList extLstField;
    private string nameField;
    [XmlElementAttribute]
public CT_Color dk1 { get; public set; }
    [XmlElementAttribute]
public CT_Color lt1 { get; public set; }
    [XmlElementAttribute]
public CT_Color dk2 { get; public set; }
    [XmlElementAttribute]
public CT_Color lt2 { get; public set; }
    [XmlElementAttribute]
public CT_Color accent1 { get; public set; }
    [XmlElementAttribute]
public CT_Color accent2 { get; public set; }
    [XmlElementAttribute]
public CT_Color accent3 { get; public set; }
    [XmlElementAttribute]
public CT_Color accent4 { get; public set; }
    [XmlElementAttribute]
public CT_Color accent5 { get; public set; }
    [XmlElementAttribute]
public CT_Color accent6 { get; public set; }
    [XmlElementAttribute]
public CT_Color hlink { get; public set; }
    [XmlElementAttribute]
public CT_Color folHlink { get; public set; }
    [XmlElementAttribute]
public CT_OfficeArtExtensionList extLst { get; public set; }
    [XmlAttributeAttribute]
public string name { get; public set; }
    public static CT_ColorScheme Parse(XmlNode node, XmlNamespaceManager namespaceManager);
    internal void Write(StreamWriter sw, string nodeName);
    public CT_Color get_dk1();
    public void set_dk1(CT_Color value);
    public CT_Color get_lt1();
    public void set_lt1(CT_Color value);
    public CT_Color get_dk2();
    public void set_dk2(CT_Color value);
    public CT_Color get_lt2();
    public void set_lt2(CT_Color value);
    public CT_Color get_accent1();
    public void set_accent1(CT_Color value);
    public CT_Color get_accent2();
    public void set_accent2(CT_Color value);
    public CT_Color get_accent3();
    public void set_accent3(CT_Color value);
    public CT_Color get_accent4();
    public void set_accent4(CT_Color value);
    public CT_Color get_accent5();
    public void set_accent5(CT_Color value);
    public CT_Color get_accent6();
    public void set_accent6(CT_Color value);
    public CT_Color get_hlink();
    public void set_hlink(CT_Color value);
    public CT_Color get_folHlink();
    public void set_folHlink(CT_Color value);
    public CT_OfficeArtExtensionList get_extLst();
    public void set_extLst(CT_OfficeArtExtensionList value);
    public string get_name();
    public void set_name(string value);
}
[DebuggerStepThroughAttribute]
[DesignerCategoryAttribute("code")]
[XmlTypeAttribute]
[XmlRootAttribute]
public class NPOI.OpenXmlFormats.Dml.CT_ColorSchemeAndMapping : object {
    private CT_ColorScheme clrSchemeField;
    private CT_ColorMapping clrMapField;
    [XmlElementAttribute]
public CT_ColorScheme clrScheme { get; public set; }
    [XmlElementAttribute]
public CT_ColorMapping clrMap { get; public set; }
    public static CT_ColorSchemeAndMapping Parse(XmlNode node, XmlNamespaceManager namespaceManager);
    internal void Write(StreamWriter sw, string nodeName);
    public CT_ColorScheme get_clrScheme();
    public void set_clrScheme(CT_ColorScheme value);
    public CT_ColorMapping get_clrMap();
    public void set_clrMap(CT_ColorMapping value);
}
[DebuggerStepThroughAttribute]
[DesignerCategoryAttribute("code")]
[XmlTypeAttribute]
[XmlRootAttribute]
public class NPOI.OpenXmlFormats.Dml.CT_ColorSchemeList : object {
    private List`1<CT_ColorSchemeAndMapping> extraClrSchemeField;
    [XmlElementAttribute("extraClrScheme")]
public List`1<CT_ColorSchemeAndMapping> extraClrScheme { get; public set; }
    public List`1<CT_ColorSchemeAndMapping> get_extraClrScheme();
    public void set_extraClrScheme(List`1<CT_ColorSchemeAndMapping> value);
}
[DebuggerStepThroughAttribute]
[DesignerCategoryAttribute("code")]
[XmlTypeAttribute]
[XmlRootAttribute]
public class NPOI.OpenXmlFormats.Dml.CT_Compat : object {
    private string spidField;
    [XmlAttributeAttribute]
public string spid { get; public set; }
    public string get_spid();
    public void set_spid(string value);
}
[XmlTypeAttribute]
[XmlRootAttribute]
public class NPOI.OpenXmlFormats.Dml.CT_ComplementTransform : object {
}
[DesignerCategoryAttribute("code")]
[XmlTypeAttribute]
[XmlRootAttribute]
public class NPOI.OpenXmlFormats.Dml.CT_Connection : object {
    private UInt32 idField;
    private UInt32 idxField;
    [XmlAttributeAttribute]
public UInt32 id { get; public set; }
    [XmlAttributeAttribute]
public UInt32 idx { get; public set; }
    public static CT_Connection Parse(XmlNode node, XmlNamespaceManager namespaceManager);
    internal void Write(StreamWriter sw, string nodeName);
    public UInt32 get_id();
    public void set_id(UInt32 value);
    public UInt32 get_idx();
    public void set_idx(UInt32 value);
}
[DesignerCategoryAttribute("code")]
[XmlTypeAttribute]
[XmlRootAttribute]
public class NPOI.OpenXmlFormats.Dml.CT_ConnectionSite : object {
    private CT_AdjPoint2D posField;
    private string angField;
    [XmlElementAttribute]
public CT_AdjPoint2D pos { get; public set; }
    [XmlAttributeAttribute]
public string ang { get; public set; }
    public static CT_ConnectionSite Parse(XmlNode node, XmlNamespaceManager namespaceManager);
    internal void Write(StreamWriter sw, string nodeName);
    public CT_AdjPoint2D get_pos();
    public void set_pos(CT_AdjPoint2D value);
    public string get_ang();
    public void set_ang(string value);
}
[DesignerCategoryAttribute("code")]
[XmlTypeAttribute]
[XmlRootAttribute]
public class NPOI.OpenXmlFormats.Dml.CT_ConnectionSiteList : object {
    private List`1<CT_ConnectionSite> cxnField;
    public List`1<CT_ConnectionSite> cxn { get; public set; }
    public List`1<CT_ConnectionSite> get_cxn();
    public void set_cxn(List`1<CT_ConnectionSite> value);
    internal static CT_ConnectionSiteList Parse(XmlNode node, XmlNamespaceManager namespaceManager);
    internal void Write(StreamWriter sw, string nodeName);
}
[DesignerCategoryAttribute("code")]
[XmlTypeAttribute]
[XmlRootAttribute]
public class NPOI.OpenXmlFormats.Dml.CT_ConnectorLocking : object {
    private CT_OfficeArtExtensionList extLstField;
    private bool noGrpField;
    private bool noSelectField;
    private bool noRotField;
    private bool noChangeAspectField;
    private bool noMoveField;
    private bool noResizeField;
    private bool noEditPointsField;
    private bool noAdjustHandlesField;
    private bool noChangeArrowheadsField;
    private bool noChangeShapeTypeField;
    [XmlElementAttribute]
public CT_OfficeArtExtensionList extLst { get; public set; }
    [XmlAttributeAttribute]
[DefaultValueAttribute("False")]
public bool noGrp { get; public set; }
    [XmlAttributeAttribute]
[DefaultValueAttribute("False")]
public bool noSelect { get; public set; }
    [XmlAttributeAttribute]
[DefaultValueAttribute("False")]
public bool noRot { get; public set; }
    [XmlAttributeAttribute]
[DefaultValueAttribute("False")]
public bool noChangeAspect { get; public set; }
    [XmlAttributeAttribute]
[DefaultValueAttribute("False")]
public bool noMove { get; public set; }
    [XmlAttributeAttribute]
[DefaultValueAttribute("False")]
public bool noResize { get; public set; }
    [XmlAttributeAttribute]
[DefaultValueAttribute("False")]
public bool noEditPoints { get; public set; }
    [XmlAttributeAttribute]
[DefaultValueAttribute("False")]
public bool noAdjustHandles { get; public set; }
    [XmlAttributeAttribute]
[DefaultValueAttribute("False")]
public bool noChangeArrowheads { get; public set; }
    [XmlAttributeAttribute]
[DefaultValueAttribute("False")]
public bool noChangeShapeType { get; public set; }
    public static CT_ConnectorLocking Parse(XmlNode node, XmlNamespaceManager namespaceManager);
    internal void Write(StreamWriter sw, string nodeName);
    public CT_OfficeArtExtensionList get_extLst();
    public void set_extLst(CT_OfficeArtExtensionList value);
    public bool get_noGrp();
    public void set_noGrp(bool value);
    public bool get_noSelect();
    public void set_noSelect(bool value);
    public bool get_noRot();
    public void set_noRot(bool value);
    public bool get_noChangeAspect();
    public void set_noChangeAspect(bool value);
    public bool get_noMove();
    public void set_noMove(bool value);
    public bool get_noResize();
    public void set_noResize(bool value);
    public bool get_noEditPoints();
    public void set_noEditPoints(bool value);
    public bool get_noAdjustHandles();
    public void set_noAdjustHandles(bool value);
    public bool get_noChangeArrowheads();
    public void set_noChangeArrowheads(bool value);
    public bool get_noChangeShapeType();
    public void set_noChangeShapeType(bool value);
}
[DesignerCategoryAttribute("code")]
[XmlTypeAttribute]
[XmlRootAttribute]
public class NPOI.OpenXmlFormats.Dml.CT_CustomColor : object {
    private CT_ScRgbColor scrgbClrField;
    private CT_SRgbColor srgbClrField;
    private CT_HslColor hslClrField;
    private CT_SystemColor sysClrField;
    private CT_SchemeColor schemeClrField;
    private CT_PresetColor prstClrField;
    private string nameField;
    [XmlElementAttribute]
public CT_ScRgbColor scrgbClr { get; public set; }
    [XmlElementAttribute]
public CT_SRgbColor srgbClr { get; public set; }
    [XmlElementAttribute]
public CT_HslColor hslClr { get; public set; }
    [XmlElementAttribute]
public CT_SystemColor sysClr { get; public set; }
    [XmlElementAttribute]
public CT_SchemeColor schemeClr { get; public set; }
    [XmlElementAttribute]
public CT_PresetColor prstClr { get; public set; }
    [XmlAttributeAttribute]
[DefaultValueAttribute("")]
public string name { get; public set; }
    public static CT_CustomColor Parse(XmlNode node, XmlNamespaceManager namespaceManager);
    internal void Write(StreamWriter sw, string nodeName);
    public CT_ScRgbColor get_scrgbClr();
    public void set_scrgbClr(CT_ScRgbColor value);
    public CT_SRgbColor get_srgbClr();
    public void set_srgbClr(CT_SRgbColor value);
    public CT_HslColor get_hslClr();
    public void set_hslClr(CT_HslColor value);
    public CT_SystemColor get_sysClr();
    public void set_sysClr(CT_SystemColor value);
    public CT_SchemeColor get_schemeClr();
    public void set_schemeClr(CT_SchemeColor value);
    public CT_PresetColor get_prstClr();
    public void set_prstClr(CT_PresetColor value);
    public string get_name();
    public void set_name(string value);
}
[DesignerCategoryAttribute("code")]
[XmlTypeAttribute]
[XmlRootAttribute]
public class NPOI.OpenXmlFormats.Dml.CT_CustomColorList : object {
    private List`1<CT_CustomColor> custClrField;
    [XmlElementAttribute("custClr")]
public List`1<CT_CustomColor> custClr { get; public set; }
    public List`1<CT_CustomColor> get_custClr();
    public void set_custClr(List`1<CT_CustomColor> value);
}
[DesignerCategoryAttribute("code")]
[XmlTypeAttribute]
[XmlRootAttribute]
public class NPOI.OpenXmlFormats.Dml.CT_CustomGeometry2D : object {
    private CT_GeomGuideList avLstField;
    private CT_GeomGuideList gdLstField;
    private List`1<object> ahLstField;
    private CT_ConnectionSiteList cxnLstField;
    private CT_GeomRect rectField;
    private CT_Path2DList pathLstField;
    [XmlElementAttribute]
public CT_GeomGuideList avLst { get; public set; }
    [XmlElementAttribute]
public CT_GeomGuideList gdLst { get; public set; }
    [XmlArrayAttribute]
[XmlArrayItemAttribute("ahPolar", "NPOI.OpenXmlFormats.Dml.CT_PolarAdjustHandle")]
[XmlArrayItemAttribute("ahXY", "NPOI.OpenXmlFormats.Dml.CT_XYAdjustHandle")]
public List`1<object> ahLst { get; public set; }
    [XmlElementAttribute]
public CT_ConnectionSiteList cxnLst { get; public set; }
    [XmlElementAttribute]
public CT_GeomRect rect { get; public set; }
    [XmlElementAttribute]
public CT_Path2DList pathLst { get; public set; }
    public static CT_CustomGeometry2D Parse(XmlNode node, XmlNamespaceManager namespaceManager);
    internal void Write(StreamWriter sw, string nodeName);
    public CT_GeomGuideList get_avLst();
    public void set_avLst(CT_GeomGuideList value);
    public CT_GeomGuideList get_gdLst();
    public void set_gdLst(CT_GeomGuideList value);
    public List`1<object> get_ahLst();
    public void set_ahLst(List`1<object> value);
    public CT_ConnectionSiteList get_cxnLst();
    public void set_cxnLst(CT_ConnectionSiteList value);
    public CT_GeomRect get_rect();
    public void set_rect(CT_GeomRect value);
    public CT_Path2DList get_pathLst();
    public void set_pathLst(CT_Path2DList value);
}
[DebuggerStepThroughAttribute]
[DesignerCategoryAttribute("code")]
[XmlTypeAttribute]
[XmlRootAttribute]
public class NPOI.OpenXmlFormats.Dml.CT_DashStop : object {
    private int dField;
    private int spField;
    [XmlAttributeAttribute]
public int d { get; public set; }
    [XmlAttributeAttribute]
public int sp { get; public set; }
    public static CT_DashStop Parse(XmlNode node, XmlNamespaceManager namespaceManager);
    internal void Write(StreamWriter sw, string nodeName);
    public int get_d();
    public void set_d(int value);
    public int get_sp();
    public void set_sp(int value);
}
[DebuggerStepThroughAttribute]
[DesignerCategoryAttribute("code")]
[XmlTypeAttribute]
[XmlRootAttribute]
public class NPOI.OpenXmlFormats.Dml.CT_DashStopList : object {
    private List`1<CT_DashStop> dsField;
    [XmlElementAttribute("ds")]
public List`1<CT_DashStop> ds { get; public set; }
    public List`1<CT_DashStop> get_ds();
    public void set_ds(List`1<CT_DashStop> value);
}
[DesignerCategoryAttribute("code")]
[XmlTypeAttribute]
[XmlRootAttribute]
public class NPOI.OpenXmlFormats.Dml.CT_DefaultShapeDefinition : object {
    private CT_ShapeProperties spPrField;
    private CT_TextBodyProperties bodyPrField;
    private CT_TextListStyle lstStyleField;
    private CT_ShapeStyle styleField;
    private CT_OfficeArtExtensionList extLstField;
    [XmlElementAttribute]
public CT_ShapeProperties spPr { get; public set; }
    [XmlElementAttribute]
public CT_TextBodyProperties bodyPr { get; public set; }
    [XmlElementAttribute]
public CT_TextListStyle lstStyle { get; public set; }
    [XmlElementAttribute]
public CT_ShapeStyle style { get; public set; }
    [XmlElementAttribute]
public CT_OfficeArtExtensionList extLst { get; public set; }
    public static CT_DefaultShapeDefinition Parse(XmlNode node, XmlNamespaceManager namespaceManager);
    internal void Write(StreamWriter sw, string nodeName);
    public CT_ShapeProperties get_spPr();
    public void set_spPr(CT_ShapeProperties value);
    public CT_TextBodyProperties get_bodyPr();
    public void set_bodyPr(CT_TextBodyProperties value);
    public CT_TextListStyle get_lstStyle();
    public void set_lstStyle(CT_TextListStyle value);
    public CT_ShapeStyle get_style();
    public void set_style(CT_ShapeStyle value);
    public CT_OfficeArtExtensionList get_extLst();
    public void set_extLst(CT_OfficeArtExtensionList value);
}
[XmlTypeAttribute]
[XmlRootAttribute]
public class NPOI.OpenXmlFormats.Dml.CT_DuotoneEffect : object {
    private List`1<object> itemsField;
    [XmlElementAttribute("hslClr", "NPOI.OpenXmlFormats.Dml.CT_HslColor")]
[XmlElementAttribute("prstClr", "NPOI.OpenXmlFormats.Dml.CT_PresetColor")]
[XmlElementAttribute("schemeClr", "NPOI.OpenXmlFormats.Dml.CT_SchemeColor")]
[XmlElementAttribute("scrgbClr", "NPOI.OpenXmlFormats.Dml.CT_ScRgbColor")]
[XmlElementAttribute("srgbClr", "NPOI.OpenXmlFormats.Dml.CT_SRgbColor")]
[XmlElementAttribute("sysClr", "NPOI.OpenXmlFormats.Dml.CT_SystemColor")]
public List`1<object> Items { get; public set; }
    public List`1<object> get_Items();
    public void set_Items(List`1<object> value);
}
[XmlTypeAttribute]
[XmlRootAttribute]
public class NPOI.OpenXmlFormats.Dml.CT_EffectContainer : object {
    private List`1<object> itemsField;
    private ST_EffectContainerType typeField;
    private string nameField;
    [XmlElementAttribute("alphaBiLevel", "NPOI.OpenXmlFormats.Dml.CT_AlphaBiLevelEffect")]
[XmlElementAttribute("alphaCeiling", "NPOI.OpenXmlFormats.Dml.CT_AlphaCeilingEffect")]
[XmlElementAttribute("alphaFloor", "NPOI.OpenXmlFormats.Dml.CT_AlphaFloorEffect")]
[XmlElementAttribute("alphaInv", "NPOI.OpenXmlFormats.Dml.CT_AlphaInverseEffect")]
[XmlElementAttribute("alphaMod", "NPOI.OpenXmlFormats.Dml.CT_AlphaModulateEffect")]
[XmlElementAttribute("alphaModFix", "NPOI.OpenXmlFormats.Dml.CT_AlphaModulateFixedEffect")]
[XmlElementAttribute("alphaOutset", "NPOI.OpenXmlFormats.Dml.CT_AlphaOutsetEffect")]
[XmlElementAttribute("alphaRepl", "NPOI.OpenXmlFormats.Dml.CT_AlphaReplaceEffect")]
[XmlElementAttribute("biLevel", "NPOI.OpenXmlFormats.Dml.CT_BiLevelEffect")]
[XmlElementAttribute("blend", "NPOI.OpenXmlFormats.Dml.CT_BlendEffect")]
[XmlElementAttribute("blur", "NPOI.OpenXmlFormats.Dml.CT_BlurEffect")]
[XmlElementAttribute("clrChange", "NPOI.OpenXmlFormats.Dml.CT_ColorChangeEffect")]
[XmlElementAttribute("clrRepl", "NPOI.OpenXmlFormats.Dml.CT_ColorReplaceEffect")]
[XmlElementAttribute("cont", "NPOI.OpenXmlFormats.Dml.CT_EffectContainer")]
[XmlElementAttribute("duotone", "NPOI.OpenXmlFormats.Dml.CT_DuotoneEffect")]
[XmlElementAttribute("effect", "NPOI.OpenXmlFormats.Dml.CT_EffectReference")]
[XmlElementAttribute("fill", "NPOI.OpenXmlFormats.Dml.CT_FillEffect")]
[XmlElementAttribute("fillOverlay", "NPOI.OpenXmlFormats.Dml.CT_FillOverlayEffect")]
[XmlElementAttribute("glow", "NPOI.OpenXmlFormats.Dml.CT_GlowEffect")]
[XmlElementAttribute("grayscl", "NPOI.OpenXmlFormats.Dml.CT_GrayscaleEffect")]
[XmlElementAttribute("hsl", "NPOI.OpenXmlFormats.Dml.CT_HSLEffect")]
[XmlElementAttribute("innerShdw", "NPOI.OpenXmlFormats.Dml.CT_InnerShadowEffect")]
[XmlElementAttribute("lum", "NPOI.OpenXmlFormats.Dml.CT_LuminanceEffect")]
[XmlElementAttribute("outerShdw", "NPOI.OpenXmlFormats.Dml.CT_OuterShadowEffect")]
[XmlElementAttribute("prstShdw", "NPOI.OpenXmlFormats.Dml.CT_PresetShadowEffect")]
[XmlElementAttribute("reflection", "NPOI.OpenXmlFormats.Dml.CT_ReflectionEffect")]
[XmlElementAttribute("relOff", "NPOI.OpenXmlFormats.Dml.CT_RelativeOffsetEffect")]
[XmlElementAttribute("softEdge", "NPOI.OpenXmlFormats.Dml.CT_SoftEdgesEffect")]
[XmlElementAttribute("tint", "NPOI.OpenXmlFormats.Dml.CT_TintEffect")]
[XmlElementAttribute("xfrm", "NPOI.OpenXmlFormats.Dml.CT_TransformEffect")]
public List`1<object> Items { get; public set; }
    [XmlAttributeAttribute]
[DefaultValueAttribute("Mono.Cecil.CustomAttributeArgument")]
public ST_EffectContainerType type { get; public set; }
    [XmlAttributeAttribute]
public string name { get; public set; }
    public static CT_EffectContainer Parse(XmlNode node, XmlNamespaceManager namespaceManager);
    internal void Write(StreamWriter sw, string nodeName);
    public List`1<object> get_Items();
    public void set_Items(List`1<object> value);
    public ST_EffectContainerType get_type();
    public void set_type(ST_EffectContainerType value);
    public string get_name();
    public void set_name(string value);
}
[XmlTypeAttribute]
[XmlRootAttribute]
public class NPOI.OpenXmlFormats.Dml.CT_EffectList : object {
    private CT_BlurEffect blurField;
    private CT_FillOverlayEffect fillOverlayField;
    private CT_GlowEffect glowField;
    private CT_InnerShadowEffect innerShdwField;
    private CT_OuterShadowEffect outerShdwField;
    private CT_PresetShadowEffect prstShdwField;
    private CT_ReflectionEffect reflectionField;
    private CT_SoftEdgesEffect softEdgeField;
    [XmlElementAttribute]
public CT_BlurEffect blur { get; public set; }
    [XmlElementAttribute]
public CT_FillOverlayEffect fillOverlay { get; public set; }
    [XmlElementAttribute]
public CT_GlowEffect glow { get; public set; }
    [XmlElementAttribute]
public CT_InnerShadowEffect innerShdw { get; public set; }
    [XmlElementAttribute]
public CT_OuterShadowEffect outerShdw { get; public set; }
    [XmlElementAttribute]
public CT_PresetShadowEffect prstShdw { get; public set; }
    [XmlElementAttribute]
public CT_ReflectionEffect reflection { get; public set; }
    [XmlElementAttribute]
public CT_SoftEdgesEffect softEdge { get; public set; }
    public static CT_EffectList Parse(XmlNode node, XmlNamespaceManager namespaceManager);
    internal void Write(StreamWriter sw, string nodeName);
    public CT_BlurEffect get_blur();
    public void set_blur(CT_BlurEffect value);
    public CT_FillOverlayEffect get_fillOverlay();
    public void set_fillOverlay(CT_FillOverlayEffect value);
    public CT_GlowEffect get_glow();
    public void set_glow(CT_GlowEffect value);
    public CT_InnerShadowEffect get_innerShdw();
    public void set_innerShdw(CT_InnerShadowEffect value);
    public CT_OuterShadowEffect get_outerShdw();
    public void set_outerShdw(CT_OuterShadowEffect value);
    public CT_PresetShadowEffect get_prstShdw();
    public void set_prstShdw(CT_PresetShadowEffect value);
    public CT_ReflectionEffect get_reflection();
    public void set_reflection(CT_ReflectionEffect value);
    public CT_SoftEdgesEffect get_softEdge();
    public void set_softEdge(CT_SoftEdgesEffect value);
}
[XmlTypeAttribute]
[XmlRootAttribute]
public class NPOI.OpenXmlFormats.Dml.CT_EffectProperties : object {
    private CT_EffectList effectLstField;
    private CT_EffectContainer effectDagField;
    [XmlElementAttribute]
public CT_EffectList effectLst { get; public set; }
    [XmlElementAttribute]
public CT_EffectContainer effectDag { get; public set; }
    public CT_EffectList get_effectLst();
    public void set_effectLst(CT_EffectList value);
    public CT_EffectContainer get_effectDag();
    public void set_effectDag(CT_EffectContainer value);
}
[XmlTypeAttribute]
[XmlRootAttribute]
public class NPOI.OpenXmlFormats.Dml.CT_EffectReference : object {
    private string refField;
    [XmlAttributeAttribute]
public string ref { get; public set; }
    public string get_ref();
    public void set_ref(string value);
}
[DesignerCategoryAttribute("code")]
[XmlTypeAttribute]
[XmlRootAttribute]
public class NPOI.OpenXmlFormats.Dml.CT_EffectStyleItem : object {
    private CT_EffectList effectLstField;
    private CT_EffectContainer effectDagField;
    private CT_Scene3D scene3dField;
    private CT_Shape3D sp3dField;
    [XmlElementAttribute]
public CT_EffectList effectLst { get; public set; }
    [XmlElementAttribute]
public CT_EffectContainer effectDag { get; public set; }
    [XmlElementAttribute]
public CT_Scene3D scene3d { get; public set; }
    [XmlElementAttribute]
public CT_Shape3D sp3d { get; public set; }
    public static CT_EffectStyleItem Parse(XmlNode node, XmlNamespaceManager namespaceManager);
    internal void Write(StreamWriter sw, string nodeName);
    public CT_EffectList get_effectLst();
    public void set_effectLst(CT_EffectList value);
    public CT_EffectContainer get_effectDag();
    public void set_effectDag(CT_EffectContainer value);
    public CT_Scene3D get_scene3d();
    public void set_scene3d(CT_Scene3D value);
    public CT_Shape3D get_sp3d();
    public void set_sp3d(CT_Shape3D value);
}
[DesignerCategoryAttribute("code")]
[XmlTypeAttribute]
[XmlRootAttribute]
public class NPOI.OpenXmlFormats.Dml.CT_EffectStyleList : object {
    private List`1<CT_EffectStyleItem> effectStyleField;
    [XmlElementAttribute("effectStyle")]
public List`1<CT_EffectStyleItem> effectStyle { get; public set; }
    public List`1<CT_EffectStyleItem> get_effectStyle();
    public void set_effectStyle(List`1<CT_EffectStyleItem> value);
    public static CT_EffectStyleList Parse(XmlNode node, XmlNamespaceManager namespaceManager);
    internal void Write(StreamWriter sw, string nodeName);
}
[XmlTypeAttribute]
[XmlRootAttribute]
public class NPOI.OpenXmlFormats.Dml.CT_EmbeddedWAVAudioFile : object {
    private string embedField;
    private string nameField;
    private bool builtInField;
    [XmlAttributeAttribute]
public string embed { get; public set; }
    [XmlAttributeAttribute]
[DefaultValueAttribute("")]
public string name { get; public set; }
    [XmlAttributeAttribute]
[DefaultValueAttribute("False")]
public bool builtIn { get; public set; }
    public static CT_EmbeddedWAVAudioFile Parse(XmlNode node, XmlNamespaceManager namespaceManager);
    internal void Write(StreamWriter sw, string nodeName);
    public string get_embed();
    public void set_embed(string value);
    public string get_name();
    public void set_name(string value);
    public bool get_builtIn();
    public void set_builtIn(bool value);
}
[DebuggerStepThroughAttribute]
[DesignerCategoryAttribute("code")]
[XmlTypeAttribute]
[XmlRootAttribute("themeManager")]
public class NPOI.OpenXmlFormats.Dml.CT_EmptyElement : object {
}
[XmlTypeAttribute]
[XmlRootAttribute]
public class NPOI.OpenXmlFormats.Dml.CT_FillEffect : object {
    private CT_NoFillProperties noFillField;
    private CT_SolidColorFillProperties solidFillField;
    private CT_GradientFillProperties gradFillField;
    private CT_BlipFillProperties blipFillField;
    private CT_PatternFillProperties pattFillField;
    private CT_GroupFillProperties grpFillField;
    [XmlElementAttribute]
public CT_NoFillProperties noFill { get; public set; }
    [XmlElementAttribute]
public CT_SolidColorFillProperties solidFill { get; public set; }
    [XmlElementAttribute]
public CT_GradientFillProperties gradFill { get; public set; }
    [XmlElementAttribute]
public CT_BlipFillProperties blipFill { get; public set; }
    [XmlElementAttribute]
public CT_PatternFillProperties pattFill { get; public set; }
    [XmlElementAttribute]
public CT_GroupFillProperties grpFill { get; public set; }
    public CT_NoFillProperties get_noFill();
    public void set_noFill(CT_NoFillProperties value);
    public CT_SolidColorFillProperties get_solidFill();
    public void set_solidFill(CT_SolidColorFillProperties value);
    public CT_GradientFillProperties get_gradFill();
    public void set_gradFill(CT_GradientFillProperties value);
    public CT_BlipFillProperties get_blipFill();
    public void set_blipFill(CT_BlipFillProperties value);
    public CT_PatternFillProperties get_pattFill();
    public void set_pattFill(CT_PatternFillProperties value);
    public CT_GroupFillProperties get_grpFill();
    public void set_grpFill(CT_GroupFillProperties value);
}
[XmlTypeAttribute]
[XmlRootAttribute]
public class NPOI.OpenXmlFormats.Dml.CT_FillOverlayEffect : object {
    private CT_NoFillProperties noFillField;
    private CT_SolidColorFillProperties solidFillField;
    private CT_GradientFillProperties gradFillField;
    private CT_BlipFillProperties blipFillField;
    private CT_PatternFillProperties pattFillField;
    private CT_GroupFillProperties grpFillField;
    private ST_BlendMode blendField;
    [XmlElementAttribute]
public CT_NoFillProperties noFill { get; public set; }
    [XmlElementAttribute]
public CT_SolidColorFillProperties solidFill { get; public set; }
    [XmlElementAttribute]
public CT_GradientFillProperties gradFill { get; public set; }
    [XmlElementAttribute]
public CT_BlipFillProperties blipFill { get; public set; }
    [XmlElementAttribute]
public CT_PatternFillProperties pattFill { get; public set; }
    [XmlElementAttribute]
public CT_GroupFillProperties grpFill { get; public set; }
    [XmlAttributeAttribute]
public ST_BlendMode blend { get; public set; }
    public static CT_FillOverlayEffect Parse(XmlNode node, XmlNamespaceManager namespaceManager);
    internal void Write(StreamWriter sw, string nodeName);
    public CT_NoFillProperties get_noFill();
    public void set_noFill(CT_NoFillProperties value);
    public CT_SolidColorFillProperties get_solidFill();
    public void set_solidFill(CT_SolidColorFillProperties value);
    public CT_GradientFillProperties get_gradFill();
    public void set_gradFill(CT_GradientFillProperties value);
    public CT_BlipFillProperties get_blipFill();
    public void set_blipFill(CT_BlipFillProperties value);
    public CT_PatternFillProperties get_pattFill();
    public void set_pattFill(CT_PatternFillProperties value);
    public CT_GroupFillProperties get_grpFill();
    public void set_grpFill(CT_GroupFillProperties value);
    public ST_BlendMode get_blend();
    public void set_blend(ST_BlendMode value);
}
[XmlTypeAttribute]
[XmlRootAttribute]
public class NPOI.OpenXmlFormats.Dml.CT_FillProperties : object {
    private CT_NoFillProperties noFillField;
    private CT_SolidColorFillProperties solidFillField;
    private CT_GradientFillProperties gradFillField;
    private CT_BlipFillProperties blipFillField;
    private CT_PatternFillProperties pattFillField;
    private CT_GroupFillProperties grpFillField;
    [XmlElementAttribute]
public CT_NoFillProperties noFill { get; public set; }
    [XmlElementAttribute]
public CT_SolidColorFillProperties solidFill { get; public set; }
    [XmlElementAttribute]
public CT_GradientFillProperties gradFill { get; public set; }
    [XmlElementAttribute]
public CT_BlipFillProperties blipFill { get; public set; }
    [XmlElementAttribute]
public CT_PatternFillProperties pattFill { get; public set; }
    [XmlElementAttribute]
public CT_GroupFillProperties grpFill { get; public set; }
    public CT_NoFillProperties get_noFill();
    public void set_noFill(CT_NoFillProperties value);
    public CT_SolidColorFillProperties get_solidFill();
    public void set_solidFill(CT_SolidColorFillProperties value);
    public CT_GradientFillProperties get_gradFill();
    public void set_gradFill(CT_GradientFillProperties value);
    public CT_BlipFillProperties get_blipFill();
    public void set_blipFill(CT_BlipFillProperties value);
    public CT_PatternFillProperties get_pattFill();
    public void set_pattFill(CT_PatternFillProperties value);
    public CT_GroupFillProperties get_grpFill();
    public void set_grpFill(CT_GroupFillProperties value);
}
[DesignerCategoryAttribute("code")]
[XmlTypeAttribute]
[XmlRootAttribute]
public class NPOI.OpenXmlFormats.Dml.CT_FillStyleList : object {
    private List`1<CT_BlipFillProperties> blipFillField;
    private List`1<CT_GradientFillProperties> gradFillField;
    private List`1<CT_GroupFillProperties> grpFillField;
    private List`1<CT_NoFillProperties> noFillField;
    private List`1<CT_PatternFillProperties> pattFillField;
    private List`1<CT_SolidColorFillProperties> solidFillField;
    public List`1<CT_BlipFillProperties> blipFill { get; public set; }
    public List`1<CT_GradientFillProperties> gradFill { get; public set; }
    public List`1<CT_GroupFillProperties> grpFill { get; public set; }
    public List`1<CT_NoFillProperties> noFill { get; public set; }
    public List`1<CT_PatternFillProperties> pattFill { get; public set; }
    public List`1<CT_SolidColorFillProperties> solidFill { get; public set; }
    public static CT_FillStyleList Parse(XmlNode node, XmlNamespaceManager namespaceManager);
    internal void Write(StreamWriter sw, string nodeName);
    public List`1<CT_BlipFillProperties> get_blipFill();
    public void set_blipFill(List`1<CT_BlipFillProperties> value);
    public List`1<CT_GradientFillProperties> get_gradFill();
    public void set_gradFill(List`1<CT_GradientFillProperties> value);
    public List`1<CT_GroupFillProperties> get_grpFill();
    public void set_grpFill(List`1<CT_GroupFillProperties> value);
    public List`1<CT_NoFillProperties> get_noFill();
    public void set_noFill(List`1<CT_NoFillProperties> value);
    public List`1<CT_PatternFillProperties> get_pattFill();
    public void set_pattFill(List`1<CT_PatternFillProperties> value);
    public List`1<CT_SolidColorFillProperties> get_solidFill();
    public void set_solidFill(List`1<CT_SolidColorFillProperties> value);
}
[XmlTypeAttribute]
[XmlRootAttribute]
public class NPOI.OpenXmlFormats.Dml.CT_FixedPercentage : object {
    private int valField;
    [XmlAttributeAttribute]
public int val { get; public set; }
    public int get_val();
    public void set_val(int value);
}
[DebuggerStepThroughAttribute]
[DesignerCategoryAttribute("code")]
[XmlTypeAttribute]
[XmlRootAttribute]
public class NPOI.OpenXmlFormats.Dml.CT_FlatText : object {
    private long zField;
    [XmlAttributeAttribute]
[DefaultValueAttribute("System.Int64", "0")]
public long z { get; public set; }
    public static CT_FlatText Parse(XmlNode node, XmlNamespaceManager namespaceManager);
    internal void Write(StreamWriter sw, string nodeName);
    public long get_z();
    public void set_z(long value);
}
[DesignerCategoryAttribute("code")]
[XmlTypeAttribute]
[XmlRootAttribute]
public class NPOI.OpenXmlFormats.Dml.CT_FontCollection : object {
    private CT_TextFont latinField;
    private CT_TextFont eaField;
    private CT_TextFont csField;
    private List`1<CT_SupplementalFont> fontField;
    private CT_OfficeArtExtensionList extLstField;
    [XmlElementAttribute]
public CT_TextFont latin { get; public set; }
    [XmlElementAttribute]
public CT_TextFont ea { get; public set; }
    [XmlElementAttribute]
public CT_TextFont cs { get; public set; }
    [XmlElementAttribute("font")]
public List`1<CT_SupplementalFont> font { get; public set; }
    [XmlElementAttribute]
public CT_OfficeArtExtensionList extLst { get; public set; }
    public static CT_FontCollection Parse(XmlNode node, XmlNamespaceManager namespaceManager);
    internal void Write(StreamWriter sw, string nodeName);
    public CT_TextFont get_latin();
    public void set_latin(CT_TextFont value);
    public CT_TextFont get_ea();
    public void set_ea(CT_TextFont value);
    public CT_TextFont get_cs();
    public void set_cs(CT_TextFont value);
    public List`1<CT_SupplementalFont> get_font();
    public void set_font(List`1<CT_SupplementalFont> value);
    public CT_OfficeArtExtensionList get_extLst();
    public void set_extLst(CT_OfficeArtExtensionList value);
}
[DebuggerStepThroughAttribute]
[DesignerCategoryAttribute("code")]
[XmlTypeAttribute]
[XmlRootAttribute]
public class NPOI.OpenXmlFormats.Dml.CT_FontReference : object {
    private CT_ScRgbColor scrgbClrField;
    private CT_SRgbColor srgbClrField;
    private CT_HslColor hslClrField;
    private CT_SystemColor sysClrField;
    private CT_SchemeColor schemeClrField;
    private CT_PresetColor prstClrField;
    private ST_FontCollectionIndex idxField;
    [XmlElementAttribute]
public CT_ScRgbColor scrgbClr { get; public set; }
    [XmlElementAttribute]
public CT_SRgbColor srgbClr { get; public set; }
    [XmlElementAttribute]
public CT_HslColor hslClr { get; public set; }
    [XmlElementAttribute]
public CT_SystemColor sysClr { get; public set; }
    [XmlElementAttribute]
public CT_SchemeColor schemeClr { get; public set; }
    [XmlElementAttribute]
public CT_PresetColor prstClr { get; public set; }
    [XmlAttributeAttribute]
public ST_FontCollectionIndex idx { get; public set; }
    public static CT_FontReference Parse(XmlNode node, XmlNamespaceManager namespaceManager);
    internal void Write(StreamWriter sw, string nodeName);
    public CT_ScRgbColor get_scrgbClr();
    public void set_scrgbClr(CT_ScRgbColor value);
    public CT_SRgbColor get_srgbClr();
    public void set_srgbClr(CT_SRgbColor value);
    public CT_HslColor get_hslClr();
    public void set_hslClr(CT_HslColor value);
    public CT_SystemColor get_sysClr();
    public void set_sysClr(CT_SystemColor value);
    public CT_SchemeColor AddNewSchemeClr();
    public CT_SchemeColor get_schemeClr();
    public void set_schemeClr(CT_SchemeColor value);
    public CT_PresetColor get_prstClr();
    public void set_prstClr(CT_PresetColor value);
    public ST_FontCollectionIndex get_idx();
    public void set_idx(ST_FontCollectionIndex value);
}
[DesignerCategoryAttribute("code")]
[XmlTypeAttribute]
[XmlRootAttribute]
public class NPOI.OpenXmlFormats.Dml.CT_FontScheme : object {
    private CT_FontCollection majorFontField;
    private CT_FontCollection minorFontField;
    private CT_OfficeArtExtensionList extLstField;
    private string nameField;
    [XmlElementAttribute]
public CT_FontCollection majorFont { get; public set; }
    [XmlElementAttribute]
public CT_FontCollection minorFont { get; public set; }
    [XmlElementAttribute]
public CT_OfficeArtExtensionList extLst { get; public set; }
    [XmlAttributeAttribute]
public string name { get; public set; }
    public static CT_FontScheme Parse(XmlNode node, XmlNamespaceManager namespaceManager);
    internal void Write(StreamWriter sw, string nodeName);
    public CT_FontCollection get_majorFont();
    public void set_majorFont(CT_FontCollection value);
    public CT_FontCollection get_minorFont();
    public void set_minorFont(CT_FontCollection value);
    public CT_OfficeArtExtensionList get_extLst();
    public void set_extLst(CT_OfficeArtExtensionList value);
    public string get_name();
    public void set_name(string value);
}
[XmlTypeAttribute]
[XmlRootAttribute]
public class NPOI.OpenXmlFormats.Dml.CT_GammaTransform : object {
}
[DesignerCategoryAttribute("code")]
[XmlTypeAttribute]
[XmlRootAttribute]
public class NPOI.OpenXmlFormats.Dml.CT_GeomGuide : object {
    private string nameField;
    private string fmlaField;
    [XmlAttributeAttribute]
public string name { get; public set; }
    [XmlAttributeAttribute]
public string fmla { get; public set; }
    public static CT_GeomGuide Parse(XmlNode node, XmlNamespaceManager namespaceManager);
    internal void Write(StreamWriter sw, string nodeName);
    public string get_name();
    public void set_name(string value);
    public string get_fmla();
    public void set_fmla(string value);
}
[DesignerCategoryAttribute("code")]
[XmlTypeAttribute]
[XmlRootAttribute]
public class NPOI.OpenXmlFormats.Dml.CT_GeomGuideList : object {
    private List`1<CT_GeomGuide> gdField;
    [XmlElementAttribute("gd")]
public List`1<CT_GeomGuide> gd { get; public set; }
    public List`1<CT_GeomGuide> get_gd();
    public void set_gd(List`1<CT_GeomGuide> value);
    internal static CT_GeomGuideList Parse(XmlNode node, XmlNamespaceManager namespaceManager);
    internal void Write(StreamWriter sw, string nodeName);
}
[DesignerCategoryAttribute("code")]
[XmlTypeAttribute]
[XmlRootAttribute]
public class NPOI.OpenXmlFormats.Dml.CT_GeomRect : object {
    private string lField;
    private string tField;
    private string rField;
    private string bField;
    [XmlAttributeAttribute]
public string l { get; public set; }
    [XmlAttributeAttribute]
public string t { get; public set; }
    [XmlAttributeAttribute]
public string r { get; public set; }
    [XmlAttributeAttribute]
public string b { get; public set; }
    public static CT_GeomRect Parse(XmlNode node, XmlNamespaceManager namespaceManager);
    internal void Write(StreamWriter sw, string nodeName);
    public string get_l();
    public void set_l(string value);
    public string get_t();
    public void set_t(string value);
    public string get_r();
    public void set_r(string value);
    public string get_b();
    public void set_b(string value);
}
[XmlTypeAttribute]
[XmlRootAttribute]
public class NPOI.OpenXmlFormats.Dml.CT_GlowEffect : object {
    private CT_ScRgbColor scrgbClrField;
    private CT_SRgbColor srgbClrField;
    private CT_HslColor hslClrField;
    private CT_SystemColor sysClrField;
    private CT_SchemeColor schemeClrField;
    private CT_PresetColor prstClrField;
    private long radField;
    [XmlElementAttribute]
public CT_ScRgbColor scrgbClr { get; public set; }
    [XmlElementAttribute]
public CT_SRgbColor srgbClr { get; public set; }
    [XmlElementAttribute]
public CT_HslColor hslClr { get; public set; }
    [XmlElementAttribute]
public CT_SystemColor sysClr { get; public set; }
    [XmlElementAttribute]
public CT_SchemeColor schemeClr { get; public set; }
    [XmlElementAttribute]
public CT_PresetColor prstClr { get; public set; }
    [XmlAttributeAttribute]
[DefaultValueAttribute("System.Int64", "0")]
public long rad { get; public set; }
    public static CT_GlowEffect Parse(XmlNode node, XmlNamespaceManager namespaceManager);
    internal void Write(StreamWriter sw, string nodeName);
    public CT_ScRgbColor get_scrgbClr();
    public void set_scrgbClr(CT_ScRgbColor value);
    public CT_SRgbColor get_srgbClr();
    public void set_srgbClr(CT_SRgbColor value);
    public CT_HslColor get_hslClr();
    public void set_hslClr(CT_HslColor value);
    public CT_SystemColor get_sysClr();
    public void set_sysClr(CT_SystemColor value);
    public CT_SchemeColor get_schemeClr();
    public void set_schemeClr(CT_SchemeColor value);
    public CT_PresetColor get_prstClr();
    public void set_prstClr(CT_PresetColor value);
    public long get_rad();
    public void set_rad(long value);
}
[XmlTypeAttribute]
[XmlRootAttribute]
public class NPOI.OpenXmlFormats.Dml.CT_GradientFillProperties : object {
    private CT_GradientStopList gsLstField;
    private CT_LinearShadeProperties linField;
    private CT_PathShadeProperties pathField;
    private CT_RelativeRect tileRectField;
    private ST_TileFlipMode flipField;
    private bool flipFieldSpecified;
    private bool rotWithShapeField;
    private bool rotWithShapeFieldSpecified;
    [XmlElementAttribute]
public CT_GradientStopList gsLst { get; public set; }
    [XmlElementAttribute]
public CT_LinearShadeProperties lin { get; public set; }
    [XmlElementAttribute]
public CT_PathShadeProperties path { get; public set; }
    [XmlElementAttribute]
public CT_RelativeRect tileRect { get; public set; }
    [XmlAttributeAttribute]
public ST_TileFlipMode flip { get; public set; }
    [XmlIgnoreAttribute]
public bool flipSpecified { get; public set; }
    [XmlAttributeAttribute]
public bool rotWithShape { get; public set; }
    [XmlIgnoreAttribute]
public bool rotWithShapeSpecified { get; public set; }
    public static CT_GradientFillProperties Parse(XmlNode node, XmlNamespaceManager namespaceManager);
    internal void Write(StreamWriter sw, string nodeName);
    public CT_GradientStopList get_gsLst();
    public void set_gsLst(CT_GradientStopList value);
    public CT_LinearShadeProperties get_lin();
    public void set_lin(CT_LinearShadeProperties value);
    public CT_PathShadeProperties get_path();
    public void set_path(CT_PathShadeProperties value);
    public CT_RelativeRect get_tileRect();
    public void set_tileRect(CT_RelativeRect value);
    public ST_TileFlipMode get_flip();
    public void set_flip(ST_TileFlipMode value);
    public bool get_flipSpecified();
    public void set_flipSpecified(bool value);
    public bool get_rotWithShape();
    public void set_rotWithShape(bool value);
    public bool get_rotWithShapeSpecified();
    public void set_rotWithShapeSpecified(bool value);
}
[XmlTypeAttribute]
[XmlRootAttribute]
public class NPOI.OpenXmlFormats.Dml.CT_GradientStop : object {
    private CT_ScRgbColor scrgbClrField;
    private CT_SRgbColor srgbClrField;
    private CT_HslColor hslClrField;
    private CT_SystemColor sysClrField;
    private CT_SchemeColor schemeClrField;
    private CT_PresetColor prstClrField;
    private int posField;
    [XmlElementAttribute]
public CT_ScRgbColor scrgbClr { get; public set; }
    [XmlElementAttribute]
public CT_SRgbColor srgbClr { get; public set; }
    [XmlElementAttribute]
public CT_HslColor hslClr { get; public set; }
    [XmlElementAttribute]
public CT_SystemColor sysClr { get; public set; }
    [XmlElementAttribute]
public CT_SchemeColor schemeClr { get; public set; }
    [XmlElementAttribute]
public CT_PresetColor prstClr { get; public set; }
    [XmlAttributeAttribute]
public int pos { get; public set; }
    public static CT_GradientStop Parse(XmlNode node, XmlNamespaceManager namespaceManager);
    internal void Write(StreamWriter sw, string nodeName);
    public CT_ScRgbColor get_scrgbClr();
    public void set_scrgbClr(CT_ScRgbColor value);
    public CT_SRgbColor get_srgbClr();
    public void set_srgbClr(CT_SRgbColor value);
    public CT_HslColor get_hslClr();
    public void set_hslClr(CT_HslColor value);
    public CT_SystemColor get_sysClr();
    public void set_sysClr(CT_SystemColor value);
    public CT_SchemeColor get_schemeClr();
    public void set_schemeClr(CT_SchemeColor value);
    public CT_PresetColor get_prstClr();
    public void set_prstClr(CT_PresetColor value);
    public int get_pos();
    public void set_pos(int value);
}
[XmlTypeAttribute]
[XmlRootAttribute]
public class NPOI.OpenXmlFormats.Dml.CT_GradientStopList : object {
    private List`1<CT_GradientStop> gsField;
    [XmlElementAttribute("gs")]
public List`1<CT_GradientStop> gs { get; public set; }
    public static CT_GradientStopList Parse(XmlNode node, XmlNamespaceManager namespaceManager);
    internal void Write(StreamWriter sw, string nodeName);
    public List`1<CT_GradientStop> get_gs();
    public void set_gs(List`1<CT_GradientStop> value);
}
[DesignerCategoryAttribute("code")]
[XmlTypeAttribute]
[XmlRootAttribute]
public class NPOI.OpenXmlFormats.Dml.CT_GraphicalObject : object {
    private CT_GraphicalObjectData graphicDataField;
    [XmlElementAttribute]
public CT_GraphicalObjectData graphicData { get; public set; }
    public CT_GraphicalObjectData AddNewGraphicData();
    public static CT_GraphicalObject Parse(XmlNode node, XmlNamespaceManager namespaceManager);
    internal void Write(StreamWriter sw, string nodeName);
    public CT_GraphicalObjectData get_graphicData();
    public void set_graphicData(CT_GraphicalObjectData value);
}
[DesignerCategoryAttribute("code")]
[XmlTypeAttribute]
[XmlRootAttribute]
public class NPOI.OpenXmlFormats.Dml.CT_GraphicalObjectData : object {
    private List`1<string> anyField;
    private string uriField;
    [XmlIgnoreAttribute]
public List`1<string> Any { get; public set; }
    [XmlAttributeAttribute]
public string uri { get; public set; }
    public static CT_GraphicalObjectData Parse(XmlNode node, XmlNamespaceManager namespaceManager);
    internal void Write(StreamWriter sw, string nodeName);
    public void AddChartElement(string el);
    public void AddPicElement(string el);
    public List`1<string> get_Any();
    public void set_Any(List`1<string> value);
    public string get_uri();
    public void set_uri(string value);
}
[DesignerCategoryAttribute("code")]
[XmlTypeAttribute]
[XmlRootAttribute]
public class NPOI.OpenXmlFormats.Dml.CT_GraphicalObjectFrameLocking : object {
    private CT_OfficeArtExtensionList extLstField;
    private bool noGrpField;
    private bool noDrilldownField;
    private bool noSelectField;
    private bool noChangeAspectField;
    private bool noMoveField;
    private bool noResizeField;
    [XmlElementAttribute]
public CT_OfficeArtExtensionList extLst { get; public set; }
    [XmlAttributeAttribute]
[DefaultValueAttribute("False")]
public bool noGrp { get; public set; }
    [XmlAttributeAttribute]
[DefaultValueAttribute("False")]
public bool noDrilldown { get; public set; }
    [XmlAttributeAttribute]
[DefaultValueAttribute("False")]
public bool noSelect { get; public set; }
    [XmlAttributeAttribute]
[DefaultValueAttribute("False")]
public bool noChangeAspect { get; public set; }
    [XmlAttributeAttribute]
[DefaultValueAttribute("False")]
public bool noMove { get; public set; }
    [XmlAttributeAttribute]
[DefaultValueAttribute("False")]
public bool noResize { get; public set; }
    public static CT_GraphicalObjectFrameLocking Parse(XmlNode node, XmlNamespaceManager namespaceManager);
    internal void Write(StreamWriter sw, string nodeName);
    public CT_OfficeArtExtensionList get_extLst();
    public void set_extLst(CT_OfficeArtExtensionList value);
    public bool get_noGrp();
    public void set_noGrp(bool value);
    public bool get_noDrilldown();
    public void set_noDrilldown(bool value);
    public bool get_noSelect();
    public void set_noSelect(bool value);
    public bool get_noChangeAspect();
    public void set_noChangeAspect(bool value);
    public bool get_noMove();
    public void set_noMove(bool value);
    public bool get_noResize();
    public void set_noResize(bool value);
}
[XmlTypeAttribute]
[XmlRootAttribute]
public class NPOI.OpenXmlFormats.Dml.CT_GrayscaleEffect : object {
}
[XmlTypeAttribute]
[XmlRootAttribute]
public class NPOI.OpenXmlFormats.Dml.CT_GrayscaleTransform : object {
}
[XmlTypeAttribute]
[XmlRootAttribute]
public class NPOI.OpenXmlFormats.Dml.CT_GroupFillProperties : object {
}
[DesignerCategoryAttribute("code")]
[XmlTypeAttribute]
[XmlRootAttribute]
public class NPOI.OpenXmlFormats.Dml.CT_GroupLocking : object {
    private CT_OfficeArtExtensionList extLstField;
    private bool noGrpField;
    private bool noUngrpField;
    private bool noSelectField;
    private bool noRotField;
    private bool noChangeAspectField;
    private bool noMoveField;
    private bool noResizeField;
    [XmlElementAttribute]
public CT_OfficeArtExtensionList extLst { get; public set; }
    [XmlAttributeAttribute]
[DefaultValueAttribute("False")]
public bool noGrp { get; public set; }
    [XmlAttributeAttribute]
[DefaultValueAttribute("False")]
public bool noUngrp { get; public set; }
    [XmlAttributeAttribute]
[DefaultValueAttribute("False")]
public bool noSelect { get; public set; }
    [XmlAttributeAttribute]
[DefaultValueAttribute("False")]
public bool noRot { get; public set; }
    [XmlAttributeAttribute]
[DefaultValueAttribute("False")]
public bool noChangeAspect { get; public set; }
    [XmlAttributeAttribute]
[DefaultValueAttribute("False")]
public bool noMove { get; public set; }
    [XmlAttributeAttribute]
[DefaultValueAttribute("False")]
public bool noResize { get; public set; }
    public static CT_GroupLocking Parse(XmlNode node, XmlNamespaceManager namespaceManager);
    internal void Write(StreamWriter sw, string nodeName);
    public CT_OfficeArtExtensionList get_extLst();
    public void set_extLst(CT_OfficeArtExtensionList value);
    public bool get_noGrp();
    public void set_noGrp(bool value);
    public bool get_noUngrp();
    public void set_noUngrp(bool value);
    public bool get_noSelect();
    public void set_noSelect(bool value);
    public bool get_noRot();
    public void set_noRot(bool value);
    public bool get_noChangeAspect();
    public void set_noChangeAspect(bool value);
    public bool get_noMove();
    public void set_noMove(bool value);
    public bool get_noResize();
    public void set_noResize(bool value);
}
[XmlTypeAttribute]
public class NPOI.OpenXmlFormats.Dml.CT_GroupShapeProperties : object {
    private CT_GroupTransform2D xfrmField;
    private CT_NoFillProperties noFillField;
    private CT_SolidColorFillProperties solidFillField;
    private CT_GradientFillProperties gradFillField;
    private CT_BlipFillProperties blipFillField;
    private CT_PatternFillProperties pattFillField;
    private CT_GroupFillProperties grpFillField;
    private CT_EffectList effectLstField;
    private CT_EffectContainer effectDagField;
    private CT_Scene3D scene3dField;
    private CT_OfficeArtExtensionList extLstField;
    private ST_BlackWhiteMode bwModeField;
    private bool bwModeFieldSpecified;
    [XmlElementAttribute]
public CT_GroupTransform2D xfrm { get; public set; }
    [XmlElementAttribute]
public CT_NoFillProperties noFill { get; public set; }
    [XmlElementAttribute]
public CT_SolidColorFillProperties solidFill { get; public set; }
    [XmlElementAttribute]
public CT_GradientFillProperties gradFill { get; public set; }
    [XmlElementAttribute]
public CT_BlipFillProperties blipFill { get; public set; }
    [XmlElementAttribute]
public CT_PatternFillProperties pattFill { get; public set; }
    [XmlElementAttribute]
public CT_GroupFillProperties grpFill { get; public set; }
    [XmlElementAttribute]
public CT_EffectList effectLst { get; public set; }
    [XmlElementAttribute]
public CT_EffectContainer effectDag { get; public set; }
    [XmlElementAttribute]
public CT_Scene3D scene3d { get; public set; }
    [XmlElementAttribute]
public CT_OfficeArtExtensionList extLst { get; public set; }
    [XmlAttributeAttribute]
public ST_BlackWhiteMode bwMode { get; public set; }
    [XmlIgnoreAttribute]
public bool bwModeSpecified { get; public set; }
    public static CT_GroupShapeProperties Parse(XmlNode node, XmlNamespaceManager namespaceManager);
    internal void Write(StreamWriter sw, string nodeName);
    public CT_GroupTransform2D AddNewXfrm();
    public CT_GroupTransform2D get_xfrm();
    public void set_xfrm(CT_GroupTransform2D value);
    public CT_NoFillProperties get_noFill();
    public void set_noFill(CT_NoFillProperties value);
    public CT_SolidColorFillProperties get_solidFill();
    public void set_solidFill(CT_SolidColorFillProperties value);
    public CT_GradientFillProperties get_gradFill();
    public void set_gradFill(CT_GradientFillProperties value);
    public CT_BlipFillProperties get_blipFill();
    public void set_blipFill(CT_BlipFillProperties value);
    public CT_PatternFillProperties get_pattFill();
    public void set_pattFill(CT_PatternFillProperties value);
    public CT_GroupFillProperties get_grpFill();
    public void set_grpFill(CT_GroupFillProperties value);
    public CT_EffectList get_effectLst();
    public void set_effectLst(CT_EffectList value);
    public CT_EffectContainer get_effectDag();
    public void set_effectDag(CT_EffectContainer value);
    public CT_Scene3D get_scene3d();
    public void set_scene3d(CT_Scene3D value);
    public CT_OfficeArtExtensionList get_extLst();
    public void set_extLst(CT_OfficeArtExtensionList value);
    public ST_BlackWhiteMode get_bwMode();
    public void set_bwMode(ST_BlackWhiteMode value);
    public bool get_bwModeSpecified();
    public void set_bwModeSpecified(bool value);
}
[XmlTypeAttribute]
[XmlRootAttribute]
public class NPOI.OpenXmlFormats.Dml.CT_GroupTransform2D : object {
    private CT_Point2D offField;
    private CT_PositiveSize2D extField;
    private CT_Point2D chOffField;
    private CT_PositiveSize2D chExtField;
    private int rotField;
    private bool flipHField;
    private bool flipVField;
    [XmlElementAttribute]
public CT_Point2D off { get; public set; }
    [XmlElementAttribute]
public CT_PositiveSize2D ext { get; public set; }
    [XmlElementAttribute]
public CT_Point2D chOff { get; public set; }
    [XmlElementAttribute]
public CT_PositiveSize2D chExt { get; public set; }
    [XmlAttributeAttribute]
[DefaultValueAttribute("0")]
public int rot { get; public set; }
    [XmlAttributeAttribute]
[DefaultValueAttribute("False")]
public bool flipH { get; public set; }
    [XmlAttributeAttribute]
[DefaultValueAttribute("False")]
public bool flipV { get; public set; }
    public static CT_GroupTransform2D Parse(XmlNode node, XmlNamespaceManager namespaceManager);
    internal void Write(StreamWriter sw, string nodeName);
    public CT_PositiveSize2D AddNewExt();
    public CT_Point2D AddNewOff();
    public CT_PositiveSize2D AddNewChExt();
    public CT_Point2D AddNewChOff();
    public CT_Point2D get_off();
    public void set_off(CT_Point2D value);
    public CT_PositiveSize2D get_ext();
    public void set_ext(CT_PositiveSize2D value);
    public CT_Point2D get_chOff();
    public void set_chOff(CT_Point2D value);
    public CT_PositiveSize2D get_chExt();
    public void set_chExt(CT_PositiveSize2D value);
    public int get_rot();
    public void set_rot(int value);
    public bool get_flipH();
    public void set_flipH(bool value);
    public bool get_flipV();
    public void set_flipV(bool value);
}
[DebuggerStepThroughAttribute]
[DesignerCategoryAttribute("code")]
[XmlTypeAttribute]
[XmlRootAttribute]
public class NPOI.OpenXmlFormats.Dml.CT_GvmlConnector : object {
    private CT_GvmlConnectorNonVisual nvCxnSpPrField;
    private CT_ShapeProperties spPrField;
    private CT_ShapeStyle styleField;
    private CT_OfficeArtExtensionList extLstField;
    [XmlElementAttribute]
public CT_GvmlConnectorNonVisual nvCxnSpPr { get; public set; }
    [XmlElementAttribute]
public CT_ShapeProperties spPr { get; public set; }
    [XmlElementAttribute]
public CT_ShapeStyle style { get; public set; }
    [XmlElementAttribute]
public CT_OfficeArtExtensionList extLst { get; public set; }
    public CT_GvmlConnectorNonVisual get_nvCxnSpPr();
    public void set_nvCxnSpPr(CT_GvmlConnectorNonVisual value);
    public CT_ShapeProperties get_spPr();
    public void set_spPr(CT_ShapeProperties value);
    public CT_ShapeStyle get_style();
    public void set_style(CT_ShapeStyle value);
    public CT_OfficeArtExtensionList get_extLst();
    public void set_extLst(CT_OfficeArtExtensionList value);
}
[DebuggerStepThroughAttribute]
[DesignerCategoryAttribute("code")]
[XmlTypeAttribute]
[XmlRootAttribute]
public class NPOI.OpenXmlFormats.Dml.CT_GvmlConnectorNonVisual : object {
    private CT_NonVisualDrawingProps cNvPrField;
    private CT_NonVisualConnectorProperties cNvCxnSpPrField;
    [XmlElementAttribute]
public CT_NonVisualDrawingProps cNvPr { get; public set; }
    [XmlElementAttribute]
public CT_NonVisualConnectorProperties cNvCxnSpPr { get; public set; }
    public CT_NonVisualDrawingProps get_cNvPr();
    public void set_cNvPr(CT_NonVisualDrawingProps value);
    public CT_NonVisualConnectorProperties get_cNvCxnSpPr();
    public void set_cNvCxnSpPr(CT_NonVisualConnectorProperties value);
}
[DebuggerStepThroughAttribute]
[DesignerCategoryAttribute("code")]
[XmlTypeAttribute]
[XmlRootAttribute]
public class NPOI.OpenXmlFormats.Dml.CT_GvmlGraphicalObjectFrame : object {
    private CT_GvmlGraphicFrameNonVisual nvGraphicFramePrField;
    private CT_GraphicalObject graphicField;
    private CT_Transform2D xfrmField;
    private CT_OfficeArtExtensionList extLstField;
    [XmlElementAttribute]
public CT_GvmlGraphicFrameNonVisual nvGraphicFramePr { get; public set; }
    [XmlElementAttribute]
public CT_GraphicalObject graphic { get; public set; }
    [XmlElementAttribute]
public CT_Transform2D xfrm { get; public set; }
    [XmlElementAttribute]
public CT_OfficeArtExtensionList extLst { get; public set; }
    public CT_GvmlGraphicFrameNonVisual get_nvGraphicFramePr();
    public void set_nvGraphicFramePr(CT_GvmlGraphicFrameNonVisual value);
    public CT_GraphicalObject get_graphic();
    public void set_graphic(CT_GraphicalObject value);
    public CT_Transform2D get_xfrm();
    public void set_xfrm(CT_Transform2D value);
    public CT_OfficeArtExtensionList get_extLst();
    public void set_extLst(CT_OfficeArtExtensionList value);
}
[DebuggerStepThroughAttribute]
[DesignerCategoryAttribute("code")]
[XmlTypeAttribute]
[XmlRootAttribute]
public class NPOI.OpenXmlFormats.Dml.CT_GvmlGraphicFrameNonVisual : object {
    private CT_NonVisualDrawingProps cNvPrField;
    private CT_NonVisualGraphicFrameProperties cNvGraphicFramePrField;
    [XmlElementAttribute]
public CT_NonVisualDrawingProps cNvPr { get; public set; }
    [XmlElementAttribute]
public CT_NonVisualGraphicFrameProperties cNvGraphicFramePr { get; public set; }
    public CT_NonVisualDrawingProps get_cNvPr();
    public void set_cNvPr(CT_NonVisualDrawingProps value);
    public CT_NonVisualGraphicFrameProperties get_cNvGraphicFramePr();
    public void set_cNvGraphicFramePr(CT_NonVisualGraphicFrameProperties value);
}
[DebuggerStepThroughAttribute]
[DesignerCategoryAttribute("code")]
[XmlTypeAttribute]
[XmlRootAttribute]
public class NPOI.OpenXmlFormats.Dml.CT_GvmlGroupShape : object {
    private CT_GvmlGroupShapeNonVisual nvGrpSpPrField;
    private CT_GroupShapeProperties grpSpPrField;
    private List`1<object> itemsField;
    private CT_OfficeArtExtensionList extLstField;
    [XmlElementAttribute]
public CT_GvmlGroupShapeNonVisual nvGrpSpPr { get; public set; }
    [XmlElementAttribute]
public CT_GroupShapeProperties grpSpPr { get; public set; }
    [XmlElementAttribute("cxnSp", "NPOI.OpenXmlFormats.Dml.CT_GvmlConnector")]
[XmlElementAttribute("graphicFrame", "NPOI.OpenXmlFormats.Dml.CT_GvmlGraphicalObjectFrame")]
[XmlElementAttribute("grpSp", "NPOI.OpenXmlFormats.Dml.CT_GvmlGroupShape")]
[XmlElementAttribute("pic", "NPOI.OpenXmlFormats.Dml.CT_GvmlPicture")]
[XmlElementAttribute("sp", "NPOI.OpenXmlFormats.Dml.CT_GvmlShape")]
[XmlElementAttribute("txSp", "NPOI.OpenXmlFormats.Dml.CT_GvmlTextShape")]
public List`1<object> Items { get; public set; }
    [XmlElementAttribute]
public CT_OfficeArtExtensionList extLst { get; public set; }
    public CT_GvmlGroupShapeNonVisual get_nvGrpSpPr();
    public void set_nvGrpSpPr(CT_GvmlGroupShapeNonVisual value);
    public CT_GroupShapeProperties get_grpSpPr();
    public void set_grpSpPr(CT_GroupShapeProperties value);
    public List`1<object> get_Items();
    public void set_Items(List`1<object> value);
    public CT_OfficeArtExtensionList get_extLst();
    public void set_extLst(CT_OfficeArtExtensionList value);
}
[DebuggerStepThroughAttribute]
[DesignerCategoryAttribute("code")]
[XmlTypeAttribute]
[XmlRootAttribute]
public class NPOI.OpenXmlFormats.Dml.CT_GvmlGroupShapeNonVisual : object {
    private CT_NonVisualDrawingProps cNvPrField;
    private CT_NonVisualGroupDrawingShapeProps cNvGrpSpPrField;
    [XmlElementAttribute]
public CT_NonVisualDrawingProps cNvPr { get; public set; }
    [XmlElementAttribute]
public CT_NonVisualGroupDrawingShapeProps cNvGrpSpPr { get; public set; }
    public CT_NonVisualDrawingProps get_cNvPr();
    public void set_cNvPr(CT_NonVisualDrawingProps value);
    public CT_NonVisualGroupDrawingShapeProps get_cNvGrpSpPr();
    public void set_cNvGrpSpPr(CT_NonVisualGroupDrawingShapeProps value);
}
[DebuggerStepThroughAttribute]
[DesignerCategoryAttribute("code")]
[XmlTypeAttribute]
[XmlRootAttribute]
public class NPOI.OpenXmlFormats.Dml.CT_GvmlPicture : object {
    private CT_GvmlPictureNonVisual nvPicPrField;
    private CT_BlipFillProperties blipFillField;
    private CT_ShapeProperties spPrField;
    private CT_ShapeStyle styleField;
    private CT_OfficeArtExtensionList extLstField;
    [XmlElementAttribute]
public CT_GvmlPictureNonVisual nvPicPr { get; public set; }
    [XmlElementAttribute]
public CT_BlipFillProperties blipFill { get; public set; }
    [XmlElementAttribute]
public CT_ShapeProperties spPr { get; public set; }
    [XmlElementAttribute]
public CT_ShapeStyle style { get; public set; }
    [XmlElementAttribute]
public CT_OfficeArtExtensionList extLst { get; public set; }
    public CT_GvmlPictureNonVisual get_nvPicPr();
    public void set_nvPicPr(CT_GvmlPictureNonVisual value);
    public CT_BlipFillProperties get_blipFill();
    public void set_blipFill(CT_BlipFillProperties value);
    public CT_ShapeProperties get_spPr();
    public void set_spPr(CT_ShapeProperties value);
    public CT_ShapeStyle get_style();
    public void set_style(CT_ShapeStyle value);
    public CT_OfficeArtExtensionList get_extLst();
    public void set_extLst(CT_OfficeArtExtensionList value);
}
[DebuggerStepThroughAttribute]
[DesignerCategoryAttribute("code")]
[XmlTypeAttribute]
[XmlRootAttribute]
public class NPOI.OpenXmlFormats.Dml.CT_GvmlPictureNonVisual : object {
    private CT_NonVisualDrawingProps cNvPrField;
    private CT_NonVisualPictureProperties cNvPicPrField;
    [XmlElementAttribute]
public CT_NonVisualDrawingProps cNvPr { get; public set; }
    [XmlElementAttribute]
public CT_NonVisualPictureProperties cNvPicPr { get; public set; }
    public CT_NonVisualDrawingProps get_cNvPr();
    public void set_cNvPr(CT_NonVisualDrawingProps value);
    public CT_NonVisualPictureProperties get_cNvPicPr();
    public void set_cNvPicPr(CT_NonVisualPictureProperties value);
}
[DebuggerStepThroughAttribute]
[DesignerCategoryAttribute("code")]
[XmlTypeAttribute]
[XmlRootAttribute]
public class NPOI.OpenXmlFormats.Dml.CT_GvmlShape : object {
    private CT_GvmlShapeNonVisual nvSpPrField;
    private CT_ShapeProperties spPrField;
    private CT_GvmlTextShape txSpField;
    private CT_ShapeStyle styleField;
    private CT_OfficeArtExtensionList extLstField;
    [XmlElementAttribute]
public CT_GvmlShapeNonVisual nvSpPr { get; public set; }
    [XmlElementAttribute]
public CT_ShapeProperties spPr { get; public set; }
    [XmlElementAttribute]
public CT_GvmlTextShape txSp { get; public set; }
    [XmlElementAttribute]
public CT_ShapeStyle style { get; public set; }
    [XmlElementAttribute]
public CT_OfficeArtExtensionList extLst { get; public set; }
    public CT_GvmlShapeNonVisual get_nvSpPr();
    public void set_nvSpPr(CT_GvmlShapeNonVisual value);
    public CT_ShapeProperties get_spPr();
    public void set_spPr(CT_ShapeProperties value);
    public CT_GvmlTextShape get_txSp();
    public void set_txSp(CT_GvmlTextShape value);
    public CT_ShapeStyle get_style();
    public void set_style(CT_ShapeStyle value);
    public CT_OfficeArtExtensionList get_extLst();
    public void set_extLst(CT_OfficeArtExtensionList value);
}
[DebuggerStepThroughAttribute]
[DesignerCategoryAttribute("code")]
[XmlTypeAttribute]
[XmlRootAttribute]
public class NPOI.OpenXmlFormats.Dml.CT_GvmlShapeNonVisual : object {
    private CT_NonVisualDrawingProps cNvPrField;
    private CT_NonVisualDrawingShapeProps cNvSpPrField;
    [XmlElementAttribute]
public CT_NonVisualDrawingProps cNvPr { get; public set; }
    [XmlElementAttribute]
public CT_NonVisualDrawingShapeProps cNvSpPr { get; public set; }
    public CT_NonVisualDrawingProps get_cNvPr();
    public void set_cNvPr(CT_NonVisualDrawingProps value);
    public CT_NonVisualDrawingShapeProps get_cNvSpPr();
    public void set_cNvSpPr(CT_NonVisualDrawingShapeProps value);
}
[DebuggerStepThroughAttribute]
[DesignerCategoryAttribute("code")]
[XmlTypeAttribute]
[XmlRootAttribute]
public class NPOI.OpenXmlFormats.Dml.CT_GvmlTextShape : object {
    private CT_TextBody txBodyField;
    private object itemField;
    private CT_OfficeArtExtensionList extLstField;
    [XmlElementAttribute]
public CT_TextBody txBody { get; public set; }
    [XmlElementAttribute("useSpRect", "NPOI.OpenXmlFormats.Dml.CT_GvmlUseShapeRectangle")]
[XmlElementAttribute("xfrm", "NPOI.OpenXmlFormats.Dml.CT_Transform2D")]
public object Item { get; public set; }
    [XmlElementAttribute]
public CT_OfficeArtExtensionList extLst { get; public set; }
    public CT_TextBody get_txBody();
    public void set_txBody(CT_TextBody value);
    public object get_Item();
    public void set_Item(object value);
    public CT_OfficeArtExtensionList get_extLst();
    public void set_extLst(CT_OfficeArtExtensionList value);
}
[DebuggerStepThroughAttribute]
[DesignerCategoryAttribute("code")]
[XmlTypeAttribute]
[XmlRootAttribute]
public class NPOI.OpenXmlFormats.Dml.CT_GvmlUseShapeRectangle : object {
}
[XmlTypeAttribute]
[XmlRootAttribute]
public class NPOI.OpenXmlFormats.Dml.CT_HslColor : object {
    private List`1<string> itemsValueField;
    private List`1<EG_ColorTransform> itemsElementNameField;
    private int hueField;
    private int satField;
    private int lumField;
    [XmlElementAttribute("ItemsElementName")]
[XmlIgnoreAttribute]
public List`1<EG_ColorTransform> ItemsElementName { get; public set; }
    [XmlAttributeAttribute]
public int hue { get; public set; }
    [XmlAttributeAttribute]
public int sat { get; public set; }
    [XmlAttributeAttribute]
public int lum { get; public set; }
    public List`1<EG_ColorTransform> get_ItemsElementName();
    public void set_ItemsElementName(List`1<EG_ColorTransform> value);
    public int get_hue();
    public void set_hue(int value);
    public int get_sat();
    public void set_sat(int value);
    public int get_lum();
    public void set_lum(int value);
    public static CT_HslColor Parse(XmlNode node, XmlNamespaceManager namespaceManager);
    internal void Write(StreamWriter sw, string nodeName);
}
[XmlTypeAttribute]
[XmlRootAttribute]
public class NPOI.OpenXmlFormats.Dml.CT_HSLEffect : object {
    private int hueField;
    private int satField;
    private int lumField;
    [XmlAttributeAttribute]
[DefaultValueAttribute("0")]
public int hue { get; public set; }
    [XmlAttributeAttribute]
[DefaultValueAttribute("0")]
public int sat { get; public set; }
    [XmlAttributeAttribute]
[DefaultValueAttribute("0")]
public int lum { get; public set; }
    public int get_hue();
    public void set_hue(int value);
    public int get_sat();
    public void set_sat(int value);
    public int get_lum();
    public void set_lum(int value);
}
[XmlTypeAttribute]
[XmlRootAttribute]
public class NPOI.OpenXmlFormats.Dml.CT_Hyperlink : object {
    private CT_EmbeddedWAVAudioFile sndField;
    private CT_OfficeArtExtensionList extLstField;
    private string idField;
    private string invalidUrlField;
    private string actionField;
    private string tgtFrameField;
    private string tooltipField;
    private bool historyField;
    private bool highlightClickField;
    private bool endSndField;
    [XmlElementAttribute]
public CT_EmbeddedWAVAudioFile snd { get; public set; }
    [XmlElementAttribute]
public CT_OfficeArtExtensionList extLst { get; public set; }
    [XmlAttributeAttribute]
public string id { get; public set; }
    [XmlAttributeAttribute]
[DefaultValueAttribute("")]
public string invalidUrl { get; public set; }
    [XmlAttributeAttribute]
[DefaultValueAttribute("")]
public string action { get; public set; }
    [XmlAttributeAttribute]
[DefaultValueAttribute("")]
public string tgtFrame { get; public set; }
    [XmlAttributeAttribute]
[DefaultValueAttribute("")]
public string tooltip { get; public set; }
    [XmlAttributeAttribute]
[DefaultValueAttribute("True")]
public bool history { get; public set; }
    [XmlAttributeAttribute]
[DefaultValueAttribute("False")]
public bool highlightClick { get; public set; }
    [XmlAttributeAttribute]
[DefaultValueAttribute("False")]
public bool endSnd { get; public set; }
    public static CT_Hyperlink Parse(XmlNode node, XmlNamespaceManager namespaceManager);
    internal void Write(StreamWriter sw, string nodeName);
    public CT_EmbeddedWAVAudioFile get_snd();
    public void set_snd(CT_EmbeddedWAVAudioFile value);
    public CT_OfficeArtExtensionList get_extLst();
    public void set_extLst(CT_OfficeArtExtensionList value);
    public string get_id();
    public void set_id(string value);
    public string get_invalidUrl();
    public void set_invalidUrl(string value);
    public string get_action();
    public void set_action(string value);
    public string get_tgtFrame();
    public void set_tgtFrame(string value);
    public string get_tooltip();
    public void set_tooltip(string value);
    public bool get_history();
    public void set_history(bool value);
    public bool get_highlightClick();
    public void set_highlightClick(bool value);
    public bool get_endSnd();
    public void set_endSnd(bool value);
}
[XmlTypeAttribute]
[XmlRootAttribute]
public class NPOI.OpenXmlFormats.Dml.CT_InnerShadowEffect : object {
    private CT_ScRgbColor scrgbClrField;
    private CT_SRgbColor srgbClrField;
    private CT_HslColor hslClrField;
    private CT_SystemColor sysClrField;
    private CT_SchemeColor schemeClrField;
    private CT_PresetColor prstClrField;
    private long blurRadField;
    private long distField;
    private int dirField;
    [XmlElementAttribute]
public CT_ScRgbColor scrgbClr { get; public set; }
    [XmlElementAttribute]
public CT_SRgbColor srgbClr { get; public set; }
    [XmlElementAttribute]
public CT_HslColor hslClr { get; public set; }
    [XmlElementAttribute]
public CT_SystemColor sysClr { get; public set; }
    [XmlElementAttribute]
public CT_SchemeColor schemeClr { get; public set; }
    [XmlElementAttribute]
public CT_PresetColor prstClr { get; public set; }
    [XmlAttributeAttribute]
[DefaultValueAttribute("System.Int64", "0")]
public long blurRad { get; public set; }
    [XmlAttributeAttribute]
[DefaultValueAttribute("System.Int64", "0")]
public long dist { get; public set; }
    [XmlAttributeAttribute]
[DefaultValueAttribute("0")]
public int dir { get; public set; }
    public static CT_InnerShadowEffect Parse(XmlNode node, XmlNamespaceManager namespaceManager);
    internal void Write(StreamWriter sw, string nodeName);
    public CT_ScRgbColor get_scrgbClr();
    public void set_scrgbClr(CT_ScRgbColor value);
    public CT_SRgbColor get_srgbClr();
    public void set_srgbClr(CT_SRgbColor value);
    public CT_HslColor get_hslClr();
    public void set_hslClr(CT_HslColor value);
    public CT_SystemColor get_sysClr();
    public void set_sysClr(CT_SystemColor value);
    public CT_SchemeColor get_schemeClr();
    public void set_schemeClr(CT_SchemeColor value);
    public CT_PresetColor get_prstClr();
    public void set_prstClr(CT_PresetColor value);
    public long get_blurRad();
    public void set_blurRad(long value);
    public long get_dist();
    public void set_dist(long value);
    public int get_dir();
    public void set_dir(int value);
}
[XmlTypeAttribute]
[XmlRootAttribute]
public class NPOI.OpenXmlFormats.Dml.CT_InverseGammaTransform : object {
}
[XmlTypeAttribute]
[XmlRootAttribute]
public class NPOI.OpenXmlFormats.Dml.CT_InverseTransform : object {
}
[XmlTypeAttribute]
[XmlRootAttribute]
public class NPOI.OpenXmlFormats.Dml.CT_LightRig : object {
    private CT_SphereCoords rotField;
    private ST_LightRigType rigField;
    private ST_LightRigDirection dirField;
    [XmlElementAttribute]
public CT_SphereCoords rot { get; public set; }
    [XmlAttributeAttribute]
public ST_LightRigType rig { get; public set; }
    [XmlAttributeAttribute]
public ST_LightRigDirection dir { get; public set; }
    public static CT_LightRig Parse(XmlNode node, XmlNamespaceManager namespaceManager);
    internal void Write(StreamWriter sw, string nodeName);
    public CT_SphereCoords get_rot();
    public void set_rot(CT_SphereCoords value);
    public ST_LightRigType get_rig();
    public void set_rig(ST_LightRigType value);
    public ST_LightRigDirection get_dir();
    public void set_dir(ST_LightRigDirection value);
}
[XmlTypeAttribute]
[XmlRootAttribute]
public class NPOI.OpenXmlFormats.Dml.CT_LinearShadeProperties : object {
    private int angField;
    private bool angFieldSpecified;
    private bool scaledField;
    private bool scaledFieldSpecified;
    [XmlAttributeAttribute]
public int ang { get; public set; }
    [XmlIgnoreAttribute]
public bool angSpecified { get; public set; }
    [XmlAttributeAttribute]
public bool scaled { get; public set; }
    [XmlIgnoreAttribute]
public bool scaledSpecified { get; public set; }
    public static CT_LinearShadeProperties Parse(XmlNode node, XmlNamespaceManager namespaceManager);
    internal void Write(StreamWriter sw, string nodeName);
    public int get_ang();
    public void set_ang(int value);
    public bool get_angSpecified();
    public void set_angSpecified(bool value);
    public bool get_scaled();
    public void set_scaled(bool value);
    public bool get_scaledSpecified();
    public void set_scaledSpecified(bool value);
}
[DebuggerStepThroughAttribute]
[DesignerCategoryAttribute("code")]
[XmlTypeAttribute]
[XmlRootAttribute]
public class NPOI.OpenXmlFormats.Dml.CT_LineEndProperties : object {
    private ST_LineEndType typeField;
    private ST_LineEndWidth wField;
    private ST_LineEndLength lenField;
    [XmlAttributeAttribute]
public ST_LineEndType type { get; public set; }
    [XmlAttributeAttribute]
public ST_LineEndWidth w { get; public set; }
    [XmlAttributeAttribute]
public ST_LineEndLength len { get; public set; }
    public static CT_LineEndProperties Parse(XmlNode node, XmlNamespaceManager namespaceManager);
    internal void Write(StreamWriter sw, string nodeName);
    public ST_LineEndType get_type();
    public void set_type(ST_LineEndType value);
    public ST_LineEndWidth get_w();
    public void set_w(ST_LineEndWidth value);
    public ST_LineEndLength get_len();
    public void set_len(ST_LineEndLength value);
}
[DebuggerStepThroughAttribute]
[DesignerCategoryAttribute("code")]
[XmlTypeAttribute]
[XmlRootAttribute]
public class NPOI.OpenXmlFormats.Dml.CT_LineJoinBevel : object {
}
[DebuggerStepThroughAttribute]
[DesignerCategoryAttribute("code")]
[XmlTypeAttribute]
[XmlRootAttribute]
public class NPOI.OpenXmlFormats.Dml.CT_LineJoinMiterProperties : object {
    private int limField;
    private bool limFieldSpecified;
    [XmlAttributeAttribute]
public int lim { get; public set; }
    [XmlIgnoreAttribute]
public bool limSpecified { get; public set; }
    public static CT_LineJoinMiterProperties Parse(XmlNode node, XmlNamespaceManager namespaceManager);
    internal void Write(StreamWriter sw, string nodeName);
    public int get_lim();
    public void set_lim(int value);
    public bool get_limSpecified();
    public void set_limSpecified(bool value);
}
[DebuggerStepThroughAttribute]
[DesignerCategoryAttribute("code")]
[XmlTypeAttribute]
[XmlRootAttribute]
public class NPOI.OpenXmlFormats.Dml.CT_LineJoinRound : object {
}
[DebuggerStepThroughAttribute]
[DesignerCategoryAttribute("code")]
[XmlTypeAttribute]
[XmlRootAttribute]
public class NPOI.OpenXmlFormats.Dml.CT_LineProperties : object {
    private CT_NoFillProperties noFillField;
    private CT_SolidColorFillProperties solidFillField;
    private CT_GradientFillProperties gradFillField;
    private CT_PatternFillProperties pattFillField;
    private CT_PresetLineDashProperties prstDashField;
    private List`1<CT_DashStop> custDashField;
    private CT_LineJoinRound roundField;
    private CT_LineJoinBevel bevelField;
    private CT_LineJoinMiterProperties miterField;
    private CT_LineEndProperties headEndField;
    private CT_LineEndProperties tailEndField;
    private CT_OfficeArtExtensionList extLstField;
    private int wField;
    private bool wFieldSpecified;
    private ST_LineCap capField;
    private bool capFieldSpecified;
    private ST_CompoundLine cmpdField;
    private bool cmpdFieldSpecified;
    private ST_PenAlignment algnField;
    private bool algnFieldSpecified;
    [XmlElementAttribute]
public CT_NoFillProperties noFill { get; public set; }
    [XmlElementAttribute]
public CT_SolidColorFillProperties solidFill { get; public set; }
    [XmlElementAttribute]
public CT_GradientFillProperties gradFill { get; public set; }
    [XmlElementAttribute]
public CT_PatternFillProperties pattFill { get; public set; }
    [XmlElementAttribute]
public CT_PresetLineDashProperties prstDash { get; public set; }
    [XmlElementAttribute]
public List`1<CT_DashStop> custDash { get; public set; }
    [XmlElementAttribute]
public CT_LineJoinRound round { get; public set; }
    [XmlElementAttribute]
public CT_LineJoinBevel bevel { get; public set; }
    [XmlElementAttribute]
public CT_LineJoinMiterProperties miter { get; public set; }
    [XmlElementAttribute]
public CT_LineEndProperties headEnd { get; public set; }
    [XmlElementAttribute]
public CT_LineEndProperties tailEnd { get; public set; }
    [XmlElementAttribute]
public CT_OfficeArtExtensionList extLst { get; public set; }
    [XmlAttributeAttribute]
public int w { get; public set; }
    [XmlIgnoreAttribute]
public bool wSpecified { get; public set; }
    [XmlAttributeAttribute]
public ST_LineCap cap { get; public set; }
    [XmlIgnoreAttribute]
public bool capSpecified { get; public set; }
    [XmlAttributeAttribute]
public ST_CompoundLine cmpd { get; public set; }
    [XmlIgnoreAttribute]
public bool cmpdSpecified { get; public set; }
    [XmlAttributeAttribute]
public ST_PenAlignment algn { get; public set; }
    [XmlIgnoreAttribute]
public bool algnSpecified { get; public set; }
    public static CT_LineProperties Parse(XmlNode node, XmlNamespaceManager namespaceManager);
    internal void Write(StreamWriter sw, string nodeName);
    public CT_NoFillProperties get_noFill();
    public void set_noFill(CT_NoFillProperties value);
    public CT_SolidColorFillProperties get_solidFill();
    public void set_solidFill(CT_SolidColorFillProperties value);
    public CT_GradientFillProperties get_gradFill();
    public void set_gradFill(CT_GradientFillProperties value);
    public CT_PatternFillProperties get_pattFill();
    public void set_pattFill(CT_PatternFillProperties value);
    public CT_PresetLineDashProperties get_prstDash();
    public void set_prstDash(CT_PresetLineDashProperties value);
    public List`1<CT_DashStop> get_custDash();
    public void set_custDash(List`1<CT_DashStop> value);
    public CT_LineJoinRound get_round();
    public void set_round(CT_LineJoinRound value);
    public CT_LineJoinBevel get_bevel();
    public void set_bevel(CT_LineJoinBevel value);
    public CT_LineJoinMiterProperties get_miter();
    public void set_miter(CT_LineJoinMiterProperties value);
    public CT_LineEndProperties get_headEnd();
    public void set_headEnd(CT_LineEndProperties value);
    public CT_LineEndProperties get_tailEnd();
    public void set_tailEnd(CT_LineEndProperties value);
    public CT_OfficeArtExtensionList get_extLst();
    public void set_extLst(CT_OfficeArtExtensionList value);
    public int get_w();
    public void set_w(int value);
    public bool get_wSpecified();
    public void set_wSpecified(bool value);
    public ST_LineCap get_cap();
    public void set_cap(ST_LineCap value);
    public bool get_capSpecified();
    public void set_capSpecified(bool value);
    public ST_CompoundLine get_cmpd();
    public void set_cmpd(ST_CompoundLine value);
    public bool get_cmpdSpecified();
    public void set_cmpdSpecified(bool value);
    public ST_PenAlignment get_algn();
    public void set_algn(ST_PenAlignment value);
    public bool get_algnSpecified();
    public void set_algnSpecified(bool value);
    public CT_SolidColorFillProperties AddNewSolidFill();
    public bool IsSetSolidFill();
}
[DesignerCategoryAttribute("code")]
[XmlTypeAttribute]
[XmlRootAttribute]
public class NPOI.OpenXmlFormats.Dml.CT_LineStyleList : object {
    private List`1<CT_LineProperties> lnField;
    [XmlElementAttribute("ln")]
public List`1<CT_LineProperties> ln { get; public set; }
    public static CT_LineStyleList Parse(XmlNode node, XmlNamespaceManager namespaceManager);
    public List`1<CT_LineProperties> get_ln();
    public void set_ln(List`1<CT_LineProperties> value);
    internal void Write(StreamWriter sw, string nodeName);
}
[XmlTypeAttribute]
[XmlRootAttribute]
public class NPOI.OpenXmlFormats.Dml.CT_LuminanceEffect : object {
    private int brightField;
    private int contrastField;
    [XmlAttributeAttribute]
[DefaultValueAttribute("0")]
public int bright { get; public set; }
    [XmlAttributeAttribute]
[DefaultValueAttribute("0")]
public int contrast { get; public set; }
    public int get_bright();
    public void set_bright(int value);
    public int get_contrast();
    public void set_contrast(int value);
}
[XmlTypeAttribute]
[XmlRootAttribute]
public class NPOI.OpenXmlFormats.Dml.CT_NoFillProperties : object {
}
[DesignerCategoryAttribute("code")]
[XmlTypeAttribute]
[XmlRootAttribute]
public class NPOI.OpenXmlFormats.Dml.CT_NonVisualConnectorProperties : object {
    private CT_ConnectorLocking cxnSpLocksField;
    private CT_Connection stCxnField;
    private CT_Connection endCxnField;
    private CT_OfficeArtExtensionList extLstField;
    [XmlElementAttribute]
public CT_ConnectorLocking cxnSpLocks { get; public set; }
    [XmlElementAttribute]
public CT_Connection stCxn { get; public set; }
    [XmlElementAttribute]
public CT_Connection endCxn { get; public set; }
    [XmlElementAttribute]
public CT_OfficeArtExtensionList extLst { get; public set; }
    public static CT_NonVisualConnectorProperties Parse(XmlNode node, XmlNamespaceManager namespaceManager);
    internal void Write(StreamWriter sw, string nodeName);
    public CT_ConnectorLocking get_cxnSpLocks();
    public void set_cxnSpLocks(CT_ConnectorLocking value);
    public CT_Connection get_stCxn();
    public void set_stCxn(CT_Connection value);
    public CT_Connection get_endCxn();
    public void set_endCxn(CT_Connection value);
    public CT_OfficeArtExtensionList get_extLst();
    public void set_extLst(CT_OfficeArtExtensionList value);
}
[DesignerCategoryAttribute("code")]
[XmlTypeAttribute]
[XmlRootAttribute]
public class NPOI.OpenXmlFormats.Dml.CT_NonVisualDrawingProps : object {
    private CT_Hyperlink hlinkClickField;
    private CT_Hyperlink hlinkHoverField;
    private CT_OfficeArtExtensionList extLstField;
    private UInt32 idField;
    private string nameField;
    private string descrField;
    private Nullable`1<bool> hiddenField;
    [XmlElementAttribute]
public CT_Hyperlink hlinkClick { get; public set; }
    [XmlElementAttribute]
public CT_Hyperlink hlinkHover { get; public set; }
    [XmlElementAttribute]
public CT_OfficeArtExtensionList extLst { get; public set; }
    [XmlAttributeAttribute]
public UInt32 id { get; public set; }
    [XmlAttributeAttribute]
public string name { get; public set; }
    [XmlAttributeAttribute]
[DefaultValueAttribute("")]
public string descr { get; public set; }
    [XmlIgnoreAttribute]
public bool descrSpecified { get; }
    [XmlAttributeAttribute]
[DefaultValueAttribute("False")]
public bool hidden { get; public set; }
    [XmlIgnoreAttribute]
public bool hiddenSpecified { get; }
    public static CT_NonVisualDrawingProps Parse(XmlNode node, XmlNamespaceManager namespaceManager);
    internal void Write(StreamWriter sw, string nodeName);
    public CT_Hyperlink get_hlinkClick();
    public void set_hlinkClick(CT_Hyperlink value);
    public CT_Hyperlink get_hlinkHover();
    public void set_hlinkHover(CT_Hyperlink value);
    public CT_OfficeArtExtensionList get_extLst();
    public void set_extLst(CT_OfficeArtExtensionList value);
    public UInt32 get_id();
    public void set_id(UInt32 value);
    public string get_name();
    public void set_name(string value);
    public string get_descr();
    public void set_descr(string value);
    public bool get_descrSpecified();
    public bool get_hidden();
    public void set_hidden(bool value);
    public bool get_hiddenSpecified();
}
[DesignerCategoryAttribute("code")]
[XmlTypeAttribute]
[XmlRootAttribute]
public class NPOI.OpenXmlFormats.Dml.CT_NonVisualDrawingShapeProps : object {
    private CT_ShapeLocking spLocksField;
    private CT_OfficeArtExtensionList extLstField;
    private bool txBoxField;
    [XmlElementAttribute]
public CT_ShapeLocking spLocks { get; public set; }
    [XmlElementAttribute]
public CT_OfficeArtExtensionList extLst { get; public set; }
    [XmlAttributeAttribute]
[DefaultValueAttribute("False")]
public bool txBox { get; public set; }
    public static CT_NonVisualDrawingShapeProps Parse(XmlNode node, XmlNamespaceManager namespaceManager);
    internal void Write(StreamWriter sw, string nodeName);
    public CT_ShapeLocking get_spLocks();
    public void set_spLocks(CT_ShapeLocking value);
    public CT_OfficeArtExtensionList get_extLst();
    public void set_extLst(CT_OfficeArtExtensionList value);
    public bool get_txBox();
    public void set_txBox(bool value);
}
[DesignerCategoryAttribute("code")]
[XmlTypeAttribute]
[XmlRootAttribute]
public class NPOI.OpenXmlFormats.Dml.CT_NonVisualGraphicFrameProperties : object {
    private CT_GraphicalObjectFrameLocking graphicFrameLocksField;
    private CT_OfficeArtExtensionList extLstField;
    [XmlElementAttribute]
public CT_GraphicalObjectFrameLocking graphicFrameLocks { get; public set; }
    [XmlElementAttribute]
public CT_OfficeArtExtensionList extLst { get; public set; }
    public static CT_NonVisualGraphicFrameProperties Parse(XmlNode node, XmlNamespaceManager namespaceManager);
    internal void Write(StreamWriter sw, string nodeName);
    public CT_GraphicalObjectFrameLocking get_graphicFrameLocks();
    public void set_graphicFrameLocks(CT_GraphicalObjectFrameLocking value);
    public CT_OfficeArtExtensionList get_extLst();
    public void set_extLst(CT_OfficeArtExtensionList value);
}
[DesignerCategoryAttribute("code")]
[XmlTypeAttribute]
[XmlRootAttribute]
public class NPOI.OpenXmlFormats.Dml.CT_NonVisualGroupDrawingShapeProps : object {
    private CT_GroupLocking grpSpLocksField;
    private CT_OfficeArtExtensionList extLstField;
    [XmlElementAttribute]
public CT_GroupLocking grpSpLocks { get; public set; }
    [XmlElementAttribute]
public CT_OfficeArtExtensionList extLst { get; public set; }
    public static CT_NonVisualGroupDrawingShapeProps Parse(XmlNode node, XmlNamespaceManager namespaceManager);
    internal void Write(StreamWriter sw, string nodeName);
    public CT_GroupLocking get_grpSpLocks();
    public void set_grpSpLocks(CT_GroupLocking value);
    public CT_OfficeArtExtensionList get_extLst();
    public void set_extLst(CT_OfficeArtExtensionList value);
}
[DesignerCategoryAttribute("code")]
[XmlTypeAttribute]
[XmlRootAttribute]
public class NPOI.OpenXmlFormats.Dml.CT_NonVisualPictureProperties : object {
    private CT_PictureLocking picLocksField;
    private CT_OfficeArtExtensionList extLstField;
    private bool preferRelativeResizeField;
    [XmlElementAttribute]
public CT_PictureLocking picLocks { get; public set; }
    [XmlElementAttribute]
public CT_OfficeArtExtensionList extLst { get; public set; }
    [XmlAttributeAttribute]
public bool preferRelativeResize { get; public set; }
    public static CT_NonVisualPictureProperties Parse(XmlNode node, XmlNamespaceManager namespaceManager);
    internal void Write(StreamWriter sw, string nodeName);
    public CT_PictureLocking AddNewPicLocks();
    public CT_PictureLocking get_picLocks();
    public void set_picLocks(CT_PictureLocking value);
    public CT_OfficeArtExtensionList get_extLst();
    public void set_extLst(CT_OfficeArtExtensionList value);
    public bool get_preferRelativeResize();
    public void set_preferRelativeResize(bool value);
}
[DesignerCategoryAttribute("code")]
[XmlTypeAttribute]
[XmlRootAttribute]
public class NPOI.OpenXmlFormats.Dml.CT_ObjectStyleDefaults : object {
    private CT_DefaultShapeDefinition spDefField;
    private CT_DefaultShapeDefinition lnDefField;
    private CT_DefaultShapeDefinition txDefField;
    private CT_OfficeArtExtensionList extLstField;
    [XmlElementAttribute]
public CT_DefaultShapeDefinition spDef { get; public set; }
    [XmlElementAttribute]
public CT_DefaultShapeDefinition lnDef { get; public set; }
    [XmlElementAttribute]
public CT_DefaultShapeDefinition txDef { get; public set; }
    [XmlElementAttribute]
public CT_OfficeArtExtensionList extLst { get; public set; }
    public static CT_ObjectStyleDefaults Parse(XmlNode node, XmlNamespaceManager namespaceManager);
    internal void Write(StreamWriter sw, string nodeName);
    public CT_DefaultShapeDefinition get_spDef();
    public void set_spDef(CT_DefaultShapeDefinition value);
    public CT_DefaultShapeDefinition get_lnDef();
    public void set_lnDef(CT_DefaultShapeDefinition value);
    public CT_DefaultShapeDefinition get_txDef();
    public void set_txDef(CT_DefaultShapeDefinition value);
    public CT_OfficeArtExtensionList get_extLst();
    public void set_extLst(CT_OfficeArtExtensionList value);
}
[XmlTypeAttribute]
[XmlRootAttribute]
public class NPOI.OpenXmlFormats.Dml.CT_OfficeArtExtension : object {
    private string anyField;
    private string uriField;
    private bool uriSpecifiedField;
    [XmlTextAttribute]
public string Any { get; public set; }
    [XmlAttributeAttribute]
public string uri { get; public set; }
    public bool uriSpecified { get; public set; }
    public string get_Any();
    public void set_Any(string value);
    public string get_uri();
    public void set_uri(string value);
    public bool get_uriSpecified();
    public void set_uriSpecified(bool value);
    public static CT_OfficeArtExtension Parse(XmlNode node, XmlNamespaceManager namespaceManager);
    internal void Write(StreamWriter sw, string nodeName);
}
[XmlTypeAttribute]
[XmlRootAttribute]
public class NPOI.OpenXmlFormats.Dml.CT_OfficeArtExtensionList : object {
    private List`1<CT_OfficeArtExtension> extField;
    [XmlElementAttribute("ext")]
public List`1<CT_OfficeArtExtension> ext { get; public set; }
    public static CT_OfficeArtExtensionList Parse(XmlNode node, XmlNamespaceManager namespaceManager);
    internal void Write(StreamWriter sw, string nodeName);
    public List`1<CT_OfficeArtExtension> get_ext();
    public void set_ext(List`1<CT_OfficeArtExtension> value);
}
[DebuggerStepThroughAttribute]
[DesignerCategoryAttribute("code")]
[XmlTypeAttribute]
[XmlRootAttribute("theme")]
public class NPOI.OpenXmlFormats.Dml.CT_OfficeStyleSheet : object {
    private CT_BaseStyles themeElementsField;
    private CT_ObjectStyleDefaults objectDefaultsField;
    private List`1<CT_ColorSchemeAndMapping> extraClrSchemeLstField;
    private List`1<CT_CustomColor> custClrLstField;
    private CT_OfficeArtExtensionList extLstField;
    private string nameField;
    [XmlElementAttribute]
public CT_BaseStyles themeElements { get; public set; }
    [XmlElementAttribute]
public CT_ObjectStyleDefaults objectDefaults { get; public set; }
    [XmlElementAttribute]
public List`1<CT_ColorSchemeAndMapping> extraClrSchemeLst { get; public set; }
    [XmlElementAttribute]
public List`1<CT_CustomColor> custClrLst { get; public set; }
    [XmlElementAttribute]
public CT_OfficeArtExtensionList extLst { get; public set; }
    [XmlAttributeAttribute]
[DefaultValueAttribute("")]
public string name { get; public set; }
    public static CT_OfficeStyleSheet Parse(XmlNode node, XmlNamespaceManager namespaceManager);
    internal void Write(StreamWriter sw);
    public void AddNewThemeElements();
    public CT_BaseStyles get_themeElements();
    public void set_themeElements(CT_BaseStyles value);
    public CT_ObjectStyleDefaults get_objectDefaults();
    public void set_objectDefaults(CT_ObjectStyleDefaults value);
    public List`1<CT_ColorSchemeAndMapping> get_extraClrSchemeLst();
    public void set_extraClrSchemeLst(List`1<CT_ColorSchemeAndMapping> value);
    public List`1<CT_CustomColor> get_custClrLst();
    public void set_custClrLst(List`1<CT_CustomColor> value);
    public CT_OfficeArtExtensionList get_extLst();
    public void set_extLst(CT_OfficeArtExtensionList value);
    public string get_name();
    public void set_name(string value);
}
[XmlTypeAttribute]
[XmlRootAttribute]
public class NPOI.OpenXmlFormats.Dml.CT_OuterShadowEffect : object {
    private CT_ScRgbColor scrgbClrField;
    private CT_SRgbColor srgbClrField;
    private CT_HslColor hslClrField;
    private CT_SystemColor sysClrField;
    private CT_SchemeColor schemeClrField;
    private CT_PresetColor prstClrField;
    private long blurRadField;
    private long distField;
    private int dirField;
    private int sxField;
    private int syField;
    private int kxField;
    private int kyField;
    private ST_RectAlignment algnField;
    private bool rotWithShapeField;
    [XmlElementAttribute]
public CT_ScRgbColor scrgbClr { get; public set; }
    [XmlElementAttribute]
public CT_SRgbColor srgbClr { get; public set; }
    [XmlElementAttribute]
public CT_HslColor hslClr { get; public set; }
    [XmlElementAttribute]
public CT_SystemColor sysClr { get; public set; }
    [XmlElementAttribute]
public CT_SchemeColor schemeClr { get; public set; }
    [XmlElementAttribute]
public CT_PresetColor prstClr { get; public set; }
    [XmlAttributeAttribute]
[DefaultValueAttribute("System.Int64", "0")]
public long blurRad { get; public set; }
    [XmlAttributeAttribute]
[DefaultValueAttribute("System.Int64", "0")]
public long dist { get; public set; }
    [XmlAttributeAttribute]
[DefaultValueAttribute("0")]
public int dir { get; public set; }
    [XmlAttributeAttribute]
[DefaultValueAttribute("100000")]
public int sx { get; public set; }
    [XmlAttributeAttribute]
[DefaultValueAttribute("100000")]
public int sy { get; public set; }
    [XmlAttributeAttribute]
[DefaultValueAttribute("0")]
public int kx { get; public set; }
    [XmlAttributeAttribute]
[DefaultValueAttribute("0")]
public int ky { get; public set; }
    [XmlAttributeAttribute]
[DefaultValueAttribute("Mono.Cecil.CustomAttributeArgument")]
public ST_RectAlignment algn { get; public set; }
    [XmlAttributeAttribute]
[DefaultValueAttribute("True")]
public bool rotWithShape { get; public set; }
    public static CT_OuterShadowEffect Parse(XmlNode node, XmlNamespaceManager namespaceManager);
    internal void Write(StreamWriter sw, string nodeName);
    public CT_ScRgbColor get_scrgbClr();
    public void set_scrgbClr(CT_ScRgbColor value);
    public CT_SRgbColor get_srgbClr();
    public void set_srgbClr(CT_SRgbColor value);
    public CT_HslColor get_hslClr();
    public void set_hslClr(CT_HslColor value);
    public CT_SystemColor get_sysClr();
    public void set_sysClr(CT_SystemColor value);
    public CT_SchemeColor get_schemeClr();
    public void set_schemeClr(CT_SchemeColor value);
    public CT_PresetColor get_prstClr();
    public void set_prstClr(CT_PresetColor value);
    public long get_blurRad();
    public void set_blurRad(long value);
    public long get_dist();
    public void set_dist(long value);
    public int get_dir();
    public void set_dir(int value);
    public int get_sx();
    public void set_sx(int value);
    public int get_sy();
    public void set_sy(int value);
    public int get_kx();
    public void set_kx(int value);
    public int get_ky();
    public void set_ky(int value);
    public ST_RectAlignment get_algn();
    public void set_algn(ST_RectAlignment value);
    public bool get_rotWithShape();
    public void set_rotWithShape(bool value);
}
[DesignerCategoryAttribute("code")]
[XmlTypeAttribute]
[XmlRootAttribute]
public class NPOI.OpenXmlFormats.Dml.CT_Path2D : object {
    private long wField;
    private long hField;
    private ST_PathFillMode fillField;
    private bool strokeField;
    private bool extrusionOkField;
    private CT_Path2DMoveTo moveToFeild;
    private List`1<CT_Path2DCubicBezierTo> cubicBezToLst;
    public CT_Path2DMoveTo moveto { get; public set; }
    public List`1<CT_Path2DCubicBezierTo> cubicBezTo { get; }
    [XmlAttributeAttribute]
[DefaultValueAttribute("System.Int64", "0")]
public long w { get; public set; }
    [XmlAttributeAttribute]
[DefaultValueAttribute("System.Int64", "0")]
public long h { get; public set; }
    [XmlAttributeAttribute]
[DefaultValueAttribute("Mono.Cecil.CustomAttributeArgument")]
public ST_PathFillMode fill { get; public set; }
    [XmlAttributeAttribute]
[DefaultValueAttribute("True")]
public bool stroke { get; public set; }
    [XmlAttributeAttribute]
[DefaultValueAttribute("True")]
public bool extrusionOk { get; public set; }
    public static CT_Path2D Parse(XmlNode node, XmlNamespaceManager namespaceManager);
    internal void Write(StreamWriter sw, string nodeName);
    public CT_Path2DMoveTo get_moveto();
    public void set_moveto(CT_Path2DMoveTo value);
    public List`1<CT_Path2DCubicBezierTo> get_cubicBezTo();
    public long get_w();
    public void set_w(long value);
    public long get_h();
    public void set_h(long value);
    public ST_PathFillMode get_fill();
    public void set_fill(ST_PathFillMode value);
    public bool get_stroke();
    public void set_stroke(bool value);
    public bool get_extrusionOk();
    public void set_extrusionOk(bool value);
}
[DesignerCategoryAttribute("code")]
[XmlTypeAttribute]
[XmlRootAttribute]
public class NPOI.OpenXmlFormats.Dml.CT_Path2DArcTo : object {
    private string wrField;
    private string hrField;
    private string stAngField;
    private string swAngField;
    [XmlAttributeAttribute]
public string wR { get; public set; }
    [XmlAttributeAttribute]
public string hR { get; public set; }
    [XmlAttributeAttribute]
public string stAng { get; public set; }
    [XmlAttributeAttribute]
public string swAng { get; public set; }
    public string get_wR();
    public void set_wR(string value);
    public string get_hR();
    public void set_hR(string value);
    public string get_stAng();
    public void set_stAng(string value);
    public string get_swAng();
    public void set_swAng(string value);
}
[DesignerCategoryAttribute("code")]
[XmlTypeAttribute]
[XmlRootAttribute]
public class NPOI.OpenXmlFormats.Dml.CT_Path2DClose : object {
}
[DesignerCategoryAttribute("code")]
[XmlTypeAttribute]
[XmlRootAttribute]
public class NPOI.OpenXmlFormats.Dml.CT_Path2DCubicBezierTo : object {
    private List`1<CT_AdjPoint2D> pts;
    [XmlElementAttribute("pt")]
public List`1<CT_AdjPoint2D> pt { get; public set; }
    public static CT_Path2DCubicBezierTo Parse(XmlNode node, XmlNamespaceManager namespaceManager);
    internal void Write(StreamWriter sw, string nodeName);
    public List`1<CT_AdjPoint2D> get_pt();
    public void set_pt(List`1<CT_AdjPoint2D> value);
}
[DesignerCategoryAttribute("code")]
[XmlTypeAttribute]
[XmlRootAttribute]
public class NPOI.OpenXmlFormats.Dml.CT_Path2DLineTo : object {
    private CT_AdjPoint2D ptField;
    [XmlElementAttribute]
public CT_AdjPoint2D pt { get; public set; }
    public CT_AdjPoint2D get_pt();
    public void set_pt(CT_AdjPoint2D value);
}
[DesignerCategoryAttribute("code")]
[XmlTypeAttribute]
[XmlRootAttribute]
public class NPOI.OpenXmlFormats.Dml.CT_Path2DList : object {
    private List`1<CT_Path2D> pathField;
    public List`1<CT_Path2D> path { get; public set; }
    public List`1<CT_Path2D> get_path();
    public void set_path(List`1<CT_Path2D> value);
    internal static CT_Path2DList Parse(XmlNode node, XmlNamespaceManager namespaceManager);
    internal void Write(StreamWriter sw, string nodeName);
}
[DesignerCategoryAttribute("code")]
[XmlTypeAttribute]
[XmlRootAttribute]
public class NPOI.OpenXmlFormats.Dml.CT_Path2DMoveTo : object {
    private CT_AdjPoint2D ptField;
    [XmlElementAttribute]
public CT_AdjPoint2D pt { get; public set; }
    public static CT_Path2DMoveTo Parse(XmlNode node, XmlNamespaceManager namespaceManager);
    internal void Write(StreamWriter sw, string nodeName);
    public CT_AdjPoint2D get_pt();
    public void set_pt(CT_AdjPoint2D value);
}
[DesignerCategoryAttribute("code")]
[XmlTypeAttribute]
[XmlRootAttribute]
public class NPOI.OpenXmlFormats.Dml.CT_Path2DQuadBezierTo : object {
    private CT_AdjPoint2D[] ptField;
    [XmlElementAttribute("pt")]
public CT_AdjPoint2D[] pt { get; public set; }
    public CT_AdjPoint2D[] get_pt();
    public void set_pt(CT_AdjPoint2D[] value);
}
[XmlTypeAttribute]
[XmlRootAttribute]
public class NPOI.OpenXmlFormats.Dml.CT_PathShadeProperties : object {
    private CT_RelativeRect fillToRectField;
    private ST_PathShadeType pathField;
    private bool pathFieldSpecified;
    [XmlElementAttribute]
public CT_RelativeRect fillToRect { get; public set; }
    [XmlAttributeAttribute]
public ST_PathShadeType path { get; public set; }
    [XmlIgnoreAttribute]
public bool pathSpecified { get; public set; }
    public static CT_PathShadeProperties Parse(XmlNode node, XmlNamespaceManager namespaceManager);
    internal void Write(StreamWriter sw, string nodeName);
    public CT_RelativeRect get_fillToRect();
    public void set_fillToRect(CT_RelativeRect value);
    public ST_PathShadeType get_path();
    public void set_path(ST_PathShadeType value);
    public bool get_pathSpecified();
    public void set_pathSpecified(bool value);
}
[XmlTypeAttribute]
[XmlRootAttribute]
public class NPOI.OpenXmlFormats.Dml.CT_PatternFillProperties : object {
    private CT_Color fgClrField;
    private CT_Color bgClrField;
    private ST_PresetPatternVal prstField;
    private bool prstFieldSpecified;
    [XmlElementAttribute]
public CT_Color fgClr { get; public set; }
    [XmlElementAttribute]
public CT_Color bgClr { get; public set; }
    [XmlAttributeAttribute]
public ST_PresetPatternVal prst { get; public set; }
    [XmlIgnoreAttribute]
public bool prstSpecified { get; public set; }
    public static CT_PatternFillProperties Parse(XmlNode node, XmlNamespaceManager namespaceManager);
    internal void Write(StreamWriter sw, string nodeName);
    public CT_Color get_fgClr();
    public void set_fgClr(CT_Color value);
    public CT_Color get_bgClr();
    public void set_bgClr(CT_Color value);
    public ST_PresetPatternVal get_prst();
    public void set_prst(ST_PresetPatternVal value);
    public bool get_prstSpecified();
    public void set_prstSpecified(bool value);
}
[XmlTypeAttribute]
[XmlRootAttribute]
public class NPOI.OpenXmlFormats.Dml.CT_Percentage : object {
    private int valField;
    [XmlAttributeAttribute]
public int val { get; public set; }
    public int get_val();
    public void set_val(int value);
}
[DesignerCategoryAttribute("code")]
[XmlTypeAttribute]
[XmlRootAttribute]
public class NPOI.OpenXmlFormats.Dml.CT_PictureLocking : object {
    private CT_OfficeArtExtensionList extLstField;
    private bool noGrpField;
    private bool noSelectField;
    private bool noRotField;
    private bool noChangeAspectField;
    private bool noMoveField;
    private bool noResizeField;
    private bool noEditPointsField;
    private bool noAdjustHandlesField;
    private bool noChangeArrowheadsField;
    private bool noChangeShapeTypeField;
    private bool noCropField;
    [XmlElementAttribute]
public CT_OfficeArtExtensionList extLst { get; public set; }
    [XmlAttributeAttribute]
[DefaultValueAttribute("False")]
public bool noGrp { get; public set; }
    [XmlAttributeAttribute]
[DefaultValueAttribute("False")]
public bool noSelect { get; public set; }
    [XmlAttributeAttribute]
[DefaultValueAttribute("False")]
public bool noRot { get; public set; }
    [XmlAttributeAttribute]
[DefaultValueAttribute("False")]
public bool noChangeAspect { get; public set; }
    [XmlAttributeAttribute]
[DefaultValueAttribute("False")]
public bool noMove { get; public set; }
    [XmlAttributeAttribute]
[DefaultValueAttribute("False")]
public bool noResize { get; public set; }
    [XmlAttributeAttribute]
[DefaultValueAttribute("False")]
public bool noEditPoints { get; public set; }
    [XmlAttributeAttribute]
[DefaultValueAttribute("False")]
public bool noAdjustHandles { get; public set; }
    [XmlAttributeAttribute]
[DefaultValueAttribute("False")]
public bool noChangeArrowheads { get; public set; }
    [XmlAttributeAttribute]
[DefaultValueAttribute("False")]
public bool noChangeShapeType { get; public set; }
    [XmlAttributeAttribute]
[DefaultValueAttribute("False")]
public bool noCrop { get; public set; }
    public static CT_PictureLocking Parse(XmlNode node, XmlNamespaceManager namespaceManager);
    internal void Write(StreamWriter sw, string nodeName);
    public CT_OfficeArtExtensionList get_extLst();
    public void set_extLst(CT_OfficeArtExtensionList value);
    public bool get_noGrp();
    public void set_noGrp(bool value);
    public bool get_noSelect();
    public void set_noSelect(bool value);
    public bool get_noRot();
    public void set_noRot(bool value);
    public bool get_noChangeAspect();
    public void set_noChangeAspect(bool value);
    public bool get_noMove();
    public void set_noMove(bool value);
    public bool get_noResize();
    public void set_noResize(bool value);
    public bool get_noEditPoints();
    public void set_noEditPoints(bool value);
    public bool get_noAdjustHandles();
    public void set_noAdjustHandles(bool value);
    public bool get_noChangeArrowheads();
    public void set_noChangeArrowheads(bool value);
    public bool get_noChangeShapeType();
    public void set_noChangeShapeType(bool value);
    public bool get_noCrop();
    public void set_noCrop(bool value);
}
[XmlTypeAttribute]
[XmlRootAttribute]
public class NPOI.OpenXmlFormats.Dml.CT_Point2D : object {
    private long xField;
    private long yField;
    private string name;
    [XmlAttributeAttribute]
public long x { get; public set; }
    [XmlAttributeAttribute]
public long y { get; public set; }
    public static CT_Point2D Parse(XmlNode node, XmlNamespaceManager namespaceManager);
    internal void Write(StreamWriter sw, string nodeName);
    public long get_x();
    public void set_x(long value);
    public long get_y();
    public void set_y(long value);
}
[XmlTypeAttribute]
[XmlRootAttribute]
public class NPOI.OpenXmlFormats.Dml.CT_Point3D : object {
    private long xField;
    private long yField;
    private long zField;
    [XmlAttributeAttribute]
public long x { get; public set; }
    [XmlAttributeAttribute]
public long y { get; public set; }
    [XmlAttributeAttribute]
public long z { get; public set; }
    public static CT_Point3D Parse(XmlNode node, XmlNamespaceManager namespaceManager);
    internal void Write(StreamWriter sw, string nodeName);
    public long get_x();
    public void set_x(long value);
    public long get_y();
    public void set_y(long value);
    public long get_z();
    public void set_z(long value);
}
[DesignerCategoryAttribute("code")]
[XmlTypeAttribute]
[XmlRootAttribute]
public class NPOI.OpenXmlFormats.Dml.CT_PolarAdjustHandle : object {
    private CT_AdjPoint2D posField;
    private string gdRefRField;
    private string minRField;
    private string maxRField;
    private string gdRefAngField;
    private string minAngField;
    private string maxAngField;
    [XmlElementAttribute]
public CT_AdjPoint2D pos { get; public set; }
    [XmlAttributeAttribute]
public string gdRefR { get; public set; }
    [XmlAttributeAttribute]
public string minR { get; public set; }
    [XmlAttributeAttribute]
public string maxR { get; public set; }
    [XmlAttributeAttribute]
public string gdRefAng { get; public set; }
    [XmlAttributeAttribute]
public string minAng { get; public set; }
    [XmlAttributeAttribute]
public string maxAng { get; public set; }
    public CT_AdjPoint2D get_pos();
    public void set_pos(CT_AdjPoint2D value);
    public string get_gdRefR();
    public void set_gdRefR(string value);
    public string get_minR();
    public void set_minR(string value);
    public string get_maxR();
    public void set_maxR(string value);
    public string get_gdRefAng();
    public void set_gdRefAng(string value);
    public string get_minAng();
    public void set_minAng(string value);
    public string get_maxAng();
    public void set_maxAng(string value);
}
[XmlTypeAttribute]
[XmlRootAttribute]
public class NPOI.OpenXmlFormats.Dml.CT_PositiveFixedAngle : object {
    private int valField;
    [XmlAttributeAttribute]
public int val { get; public set; }
    public int get_val();
    public void set_val(int value);
}
[XmlTypeAttribute]
[XmlRootAttribute]
public class NPOI.OpenXmlFormats.Dml.CT_PositiveFixedPercentage : object {
    private int valField;
    [XmlAttributeAttribute]
public int val { get; public set; }
    public int get_val();
    public void set_val(int value);
}
[XmlTypeAttribute]
[XmlRootAttribute]
public class NPOI.OpenXmlFormats.Dml.CT_PositivePercentage : object {
    private int valField;
    [XmlAttributeAttribute]
public int val { get; public set; }
    public int get_val();
    public void set_val(int value);
}
[XmlTypeAttribute]
[XmlRootAttribute]
public class NPOI.OpenXmlFormats.Dml.CT_PositiveSize2D : object {
    private long cxField;
    private long cyField;
    [XmlAttributeAttribute]
public long cx { get; public set; }
    [XmlAttributeAttribute]
public long cy { get; public set; }
    public static CT_PositiveSize2D Parse(XmlNode node, XmlNamespaceManager namespaceManager);
    internal void Write(StreamWriter sw, string nodeName);
    public long get_cx();
    public void set_cx(long value);
    public long get_cy();
    public void set_cy(long value);
}
[XmlTypeAttribute]
[XmlRootAttribute]
public class NPOI.OpenXmlFormats.Dml.CT_PresetColor : object {
    private List`1<string> itemsValueField;
    private List`1<EG_ColorTransform> itemsElementNameField;
    private ST_PresetColorVal valField;
    private bool valFieldSpecified;
    [XmlIgnoreAttribute]
public List`1<EG_ColorTransform> ItemsElementName { get; public set; }
    [XmlAttributeAttribute]
public ST_PresetColorVal val { get; public set; }
    [XmlIgnoreAttribute]
public bool valSpecified { get; public set; }
    public List`1<EG_ColorTransform> get_ItemsElementName();
    public void set_ItemsElementName(List`1<EG_ColorTransform> value);
    public ST_PresetColorVal get_val();
    public void set_val(ST_PresetColorVal value);
    public bool get_valSpecified();
    public void set_valSpecified(bool value);
    public static CT_PresetColor Parse(XmlNode node, XmlNamespaceManager namespaceManager);
    internal void Write(StreamWriter sw, string nodeName);
}
[DesignerCategoryAttribute("code")]
[XmlTypeAttribute]
[XmlRootAttribute]
public class NPOI.OpenXmlFormats.Dml.CT_PresetGeometry2D : object {
    private CT_GeomGuideList avLstField;
    private ST_ShapeType prstField;
    [XmlElementAttribute]
public CT_GeomGuideList avLst { get; public set; }
    [XmlAttributeAttribute]
public ST_ShapeType prst { get; public set; }
    public CT_GeomGuideList AddNewAvLst();
    public static CT_PresetGeometry2D Parse(XmlNode node, XmlNamespaceManager namespaceManager);
    internal void Write(StreamWriter sw, string nodeName);
    public CT_GeomGuideList get_avLst();
    public void set_avLst(CT_GeomGuideList value);
    public ST_ShapeType get_prst();
    public void set_prst(ST_ShapeType value);
}
[DebuggerStepThroughAttribute]
[DesignerCategoryAttribute("code")]
[XmlTypeAttribute]
[XmlRootAttribute]
public class NPOI.OpenXmlFormats.Dml.CT_PresetLineDashProperties : object {
    private ST_PresetLineDashVal valField;
    private bool valFieldSpecified;
    [XmlAttributeAttribute]
public ST_PresetLineDashVal val { get; public set; }
    [XmlIgnoreAttribute]
public bool valSpecified { get; public set; }
    public static CT_PresetLineDashProperties Parse(XmlNode node, XmlNamespaceManager namespaceManager);
    internal void Write(StreamWriter sw, string nodeName);
    public ST_PresetLineDashVal get_val();
    public void set_val(ST_PresetLineDashVal value);
    public bool get_valSpecified();
    public void set_valSpecified(bool value);
}
[XmlTypeAttribute]
[XmlRootAttribute]
public class NPOI.OpenXmlFormats.Dml.CT_PresetShadowEffect : object {
    private CT_ScRgbColor scrgbClrField;
    private CT_SRgbColor srgbClrField;
    private CT_HslColor hslClrField;
    private CT_SystemColor sysClrField;
    private CT_SchemeColor schemeClrField;
    private CT_PresetColor prstClrField;
    private ST_PresetShadowVal prstField;
    private long distField;
    private int dirField;
    [XmlElementAttribute]
public CT_ScRgbColor scrgbClr { get; public set; }
    [XmlElementAttribute]
public CT_SRgbColor srgbClr { get; public set; }
    [XmlElementAttribute]
public CT_HslColor hslClr { get; public set; }
    [XmlElementAttribute]
public CT_SystemColor sysClr { get; public set; }
    [XmlElementAttribute]
public CT_SchemeColor schemeClr { get; public set; }
    [XmlElementAttribute]
public CT_PresetColor prstClr { get; public set; }
    [XmlAttributeAttribute]
public ST_PresetShadowVal prst { get; public set; }
    [XmlAttributeAttribute]
[DefaultValueAttribute("System.Int64", "0")]
public long dist { get; public set; }
    [XmlAttributeAttribute]
[DefaultValueAttribute("0")]
public int dir { get; public set; }
    public static CT_PresetShadowEffect Parse(XmlNode node, XmlNamespaceManager namespaceManager);
    internal void Write(StreamWriter sw, string nodeName);
    public CT_ScRgbColor get_scrgbClr();
    public void set_scrgbClr(CT_ScRgbColor value);
    public CT_SRgbColor get_srgbClr();
    public void set_srgbClr(CT_SRgbColor value);
    public CT_HslColor get_hslClr();
    public void set_hslClr(CT_HslColor value);
    public CT_SystemColor get_sysClr();
    public void set_sysClr(CT_SystemColor value);
    public CT_SchemeColor get_schemeClr();
    public void set_schemeClr(CT_SchemeColor value);
    public CT_PresetColor get_prstClr();
    public void set_prstClr(CT_PresetColor value);
    public ST_PresetShadowVal get_prst();
    public void set_prst(ST_PresetShadowVal value);
    public long get_dist();
    public void set_dist(long value);
    public int get_dir();
    public void set_dir(int value);
}
[DesignerCategoryAttribute("code")]
[XmlTypeAttribute]
[XmlRootAttribute]
public class NPOI.OpenXmlFormats.Dml.CT_PresetTextShape : object {
    private List`1<CT_GeomGuide> avLstField;
    private ST_TextShapeType prstField;
    [XmlArrayAttribute]
[XmlArrayItemAttribute("gd")]
public List`1<CT_GeomGuide> avLst { get; public set; }
    [XmlAttributeAttribute]
public ST_TextShapeType prst { get; public set; }
    public static CT_PresetTextShape Parse(XmlNode node, XmlNamespaceManager namespaceManager);
    internal void Write(StreamWriter sw, string nodeName);
    public List`1<CT_GeomGuide> get_avLst();
    public void set_avLst(List`1<CT_GeomGuide> value);
    public ST_TextShapeType get_prst();
    public void set_prst(ST_TextShapeType value);
}
[DebuggerStepThroughAttribute]
[DesignerCategoryAttribute("code")]
[XmlTypeAttribute]
[XmlRootAttribute]
public class NPOI.OpenXmlFormats.Dml.CT_QuickTimeFile : object {
    private CT_OfficeArtExtensionList extLstField;
    private string linkField;
    [XmlElementAttribute]
public CT_OfficeArtExtensionList extLst { get; public set; }
    [XmlAttributeAttribute]
public string link { get; public set; }
    public CT_OfficeArtExtensionList get_extLst();
    public void set_extLst(CT_OfficeArtExtensionList value);
    public string get_link();
    public void set_link(string value);
}
[XmlTypeAttribute]
[XmlRootAttribute]
public class NPOI.OpenXmlFormats.Dml.CT_Ratio : object {
    private long nField;
    private long dField;
    [XmlAttributeAttribute]
public long n { get; public set; }
    [XmlAttributeAttribute]
public long d { get; public set; }
    public long get_n();
    public void set_n(long value);
    public long get_d();
    public void set_d(long value);
}
[XmlTypeAttribute]
[XmlRootAttribute]
public class NPOI.OpenXmlFormats.Dml.CT_ReflectionEffect : object {
    private long blurRadField;
    private int stAField;
    private int stPosField;
    private int endAField;
    private int endPosField;
    private long distField;
    private int dirField;
    private int fadeDirField;
    private int sxField;
    private int syField;
    private int kxField;
    private int kyField;
    private ST_RectAlignment algnField;
    private bool rotWithShapeField;
    [XmlAttributeAttribute]
[DefaultValueAttribute("System.Int64", "0")]
public long blurRad { get; public set; }
    [XmlAttributeAttribute]
[DefaultValueAttribute("100000")]
public int stA { get; public set; }
    [XmlAttributeAttribute]
[DefaultValueAttribute("0")]
public int stPos { get; public set; }
    [XmlAttributeAttribute]
[DefaultValueAttribute("0")]
public int endA { get; public set; }
    [XmlAttributeAttribute]
[DefaultValueAttribute("100000")]
public int endPos { get; public set; }
    [XmlAttributeAttribute]
[DefaultValueAttribute("System.Int64", "0")]
public long dist { get; public set; }
    [XmlAttributeAttribute]
[DefaultValueAttribute("0")]
public int dir { get; public set; }
    [XmlAttributeAttribute]
[DefaultValueAttribute("5400000")]
public int fadeDir { get; public set; }
    [XmlAttributeAttribute]
[DefaultValueAttribute("100000")]
public int sx { get; public set; }
    [XmlAttributeAttribute]
[DefaultValueAttribute("100000")]
public int sy { get; public set; }
    [XmlAttributeAttribute]
[DefaultValueAttribute("0")]
public int kx { get; public set; }
    [XmlAttributeAttribute]
[DefaultValueAttribute("0")]
public int ky { get; public set; }
    [XmlAttributeAttribute]
[DefaultValueAttribute("Mono.Cecil.CustomAttributeArgument")]
public ST_RectAlignment algn { get; public set; }
    [XmlAttributeAttribute]
[DefaultValueAttribute("True")]
public bool rotWithShape { get; public set; }
    public static CT_ReflectionEffect Parse(XmlNode node, XmlNamespaceManager namespaceManager);
    internal void Write(StreamWriter sw, string nodeName);
    public long get_blurRad();
    public void set_blurRad(long value);
    public int get_stA();
    public void set_stA(int value);
    public int get_stPos();
    public void set_stPos(int value);
    public int get_endA();
    public void set_endA(int value);
    public int get_endPos();
    public void set_endPos(int value);
    public long get_dist();
    public void set_dist(long value);
    public int get_dir();
    public void set_dir(int value);
    public int get_fadeDir();
    public void set_fadeDir(int value);
    public int get_sx();
    public void set_sx(int value);
    public int get_sy();
    public void set_sy(int value);
    public int get_kx();
    public void set_kx(int value);
    public int get_ky();
    public void set_ky(int value);
    public ST_RectAlignment get_algn();
    public void set_algn(ST_RectAlignment value);
    public bool get_rotWithShape();
    public void set_rotWithShape(bool value);
}
[DebuggerStepThroughAttribute]
[DesignerCategoryAttribute("code")]
[XmlTypeAttribute]
[XmlRootAttribute]
public class NPOI.OpenXmlFormats.Dml.CT_RegularTextRun : object {
    private CT_TextCharacterProperties rPrField;
    private string tField;
    [XmlElementAttribute]
public CT_TextCharacterProperties rPr { get; public set; }
    [XmlElementAttribute]
public string t { get; public set; }
    public static CT_RegularTextRun Parse(XmlNode node, XmlNamespaceManager namespaceManager);
    internal void Write(StreamWriter sw, string nodeName);
    public CT_TextCharacterProperties AddNewRPr();
    public CT_TextCharacterProperties get_rPr();
    public void set_rPr(CT_TextCharacterProperties value);
    public string get_t();
    public void set_t(string value);
    public bool IsSetRPr();
}
[XmlTypeAttribute]
[XmlRootAttribute]
public class NPOI.OpenXmlFormats.Dml.CT_RelativeOffsetEffect : object {
    private int txField;
    private int tyField;
    [XmlAttributeAttribute]
[DefaultValueAttribute("0")]
public int tx { get; public set; }
    [XmlAttributeAttribute]
[DefaultValueAttribute("0")]
public int ty { get; public set; }
    public int get_tx();
    public void set_tx(int value);
    public int get_ty();
    public void set_ty(int value);
}
[XmlTypeAttribute]
[XmlRootAttribute]
public class NPOI.OpenXmlFormats.Dml.CT_RelativeRect : object {
    private Nullable`1<int> lField;
    private Nullable`1<int> tField;
    private Nullable`1<int> rField;
    private Nullable`1<int> bField;
    [XmlAttributeAttribute]
[DefaultValueAttribute("0")]
public int l { get; public set; }
    [XmlIgnoreAttribute]
public bool lSpecified { get; }
    [XmlAttributeAttribute]
[DefaultValueAttribute("0")]
public int t { get; public set; }
    [XmlIgnoreAttribute]
public bool tSpecified { get; }
    [XmlAttributeAttribute]
[DefaultValueAttribute("0")]
public int r { get; public set; }
    [XmlIgnoreAttribute]
public bool rSpecified { get; }
    [XmlAttributeAttribute]
[DefaultValueAttribute("0")]
public int b { get; public set; }
    [XmlIgnoreAttribute]
public bool bSpecified { get; }
    public static CT_RelativeRect Parse(XmlNode node, XmlNamespaceManager namespaceManager);
    internal void Write(StreamWriter sw, string nodeName);
    public int get_l();
    public void set_l(int value);
    public bool get_lSpecified();
    public int get_t();
    public void set_t(int value);
    public bool get_tSpecified();
    public int get_r();
    public void set_r(int value);
    public bool get_rSpecified();
    public int get_b();
    public void set_b(int value);
    public bool get_bSpecified();
}
[XmlTypeAttribute]
[XmlRootAttribute]
public class NPOI.OpenXmlFormats.Dml.CT_Scale2D : object {
    private CT_Ratio sxField;
    private CT_Ratio syField;
    [XmlElementAttribute]
public CT_Ratio sx { get; public set; }
    [XmlElementAttribute]
public CT_Ratio sy { get; public set; }
    public CT_Ratio get_sx();
    public void set_sx(CT_Ratio value);
    public CT_Ratio get_sy();
    public void set_sy(CT_Ratio value);
}
[XmlTypeAttribute]
[XmlRootAttribute]
public class NPOI.OpenXmlFormats.Dml.CT_Scene3D : object {
    private CT_Camera cameraField;
    private CT_LightRig lightRigField;
    private CT_Backdrop backdropField;
    private CT_OfficeArtExtensionList extLstField;
    [XmlElementAttribute]
public CT_Camera camera { get; public set; }
    [XmlElementAttribute]
public CT_LightRig lightRig { get; public set; }
    [XmlElementAttribute]
public CT_Backdrop backdrop { get; public set; }
    [XmlElementAttribute]
public CT_OfficeArtExtensionList extLst { get; public set; }
    public static CT_Scene3D Parse(XmlNode node, XmlNamespaceManager namespaceManager);
    internal void Write(StreamWriter sw, string nodeName);
    public CT_Camera get_camera();
    public void set_camera(CT_Camera value);
    public CT_LightRig get_lightRig();
    public void set_lightRig(CT_LightRig value);
    public CT_Backdrop get_backdrop();
    public void set_backdrop(CT_Backdrop value);
    public CT_OfficeArtExtensionList get_extLst();
    public void set_extLst(CT_OfficeArtExtensionList value);
}
[XmlTypeAttribute]
[XmlRootAttribute]
public class NPOI.OpenXmlFormats.Dml.CT_SchemeColor : object {
    private List`1<string> itemsValueField;
    private List`1<EG_ColorTransform> itemsElementNameField;
    private ST_SchemeColorVal valField;
    [XmlIgnoreAttribute]
public List`1<EG_ColorTransform> ItemsElementName { get; public set; }
    [XmlAttributeAttribute]
public ST_SchemeColorVal val { get; public set; }
    public CT_PositiveFixedPercentage AddNewShade();
    public void AddNewLum(int dpIndex);
    public static CT_SchemeColor Parse(XmlNode node, XmlNamespaceManager namespaceManager);
    internal void Write(StreamWriter sw, string nodeName);
    public List`1<EG_ColorTransform> get_ItemsElementName();
    public void set_ItemsElementName(List`1<EG_ColorTransform> value);
    public ST_SchemeColorVal get_val();
    public void set_val(ST_SchemeColorVal value);
}
[XmlTypeAttribute]
[XmlRootAttribute]
public class NPOI.OpenXmlFormats.Dml.CT_ScRgbColor : object {
    private List`1<string> itemsValueField;
    private List`1<EG_ColorTransform> itemsElementNameField;
    private int rField;
    private int gField;
    private int bField;
    [XmlIgnoreAttribute]
public List`1<EG_ColorTransform> ItemsElementName { get; public set; }
    [XmlAttributeAttribute]
public int r { get; public set; }
    [XmlAttributeAttribute]
public int g { get; public set; }
    [XmlAttributeAttribute]
public int b { get; public set; }
    public static CT_ScRgbColor Parse(XmlNode node, XmlNamespaceManager namespaceManager);
    internal void Write(StreamWriter sw, string nodeName);
    public List`1<EG_ColorTransform> get_ItemsElementName();
    public void set_ItemsElementName(List`1<EG_ColorTransform> value);
    public int get_r();
    public void set_r(int value);
    public int get_g();
    public void set_g(int value);
    public int get_b();
    public void set_b(int value);
}
[DebuggerStepThroughAttribute]
[DesignerCategoryAttribute("code")]
[XmlTypeAttribute]
[XmlRootAttribute]
public class NPOI.OpenXmlFormats.Dml.CT_Shape3D : object {
    private CT_Bevel bevelTField;
    private CT_Bevel bevelBField;
    private CT_Color extrusionClrField;
    private CT_Color contourClrField;
    private CT_OfficeArtExtensionList extLstField;
    private long zField;
    private long extrusionHField;
    private long contourWField;
    private ST_PresetMaterialType prstMaterialField;
    [XmlElementAttribute]
public CT_Bevel bevelT { get; public set; }
    [XmlElementAttribute]
public CT_Bevel bevelB { get; public set; }
    [XmlElementAttribute]
public CT_Color extrusionClr { get; public set; }
    [XmlElementAttribute]
public CT_Color contourClr { get; public set; }
    [XmlElementAttribute]
public CT_OfficeArtExtensionList extLst { get; public set; }
    [XmlAttributeAttribute]
[DefaultValueAttribute("System.Int64", "0")]
public long z { get; public set; }
    [XmlAttributeAttribute]
[DefaultValueAttribute("System.Int64", "0")]
public long extrusionH { get; public set; }
    [XmlAttributeAttribute]
[DefaultValueAttribute("System.Int64", "0")]
public long contourW { get; public set; }
    [XmlAttributeAttribute]
[DefaultValueAttribute("Mono.Cecil.CustomAttributeArgument")]
public ST_PresetMaterialType prstMaterial { get; public set; }
    public static CT_Shape3D Parse(XmlNode node, XmlNamespaceManager namespaceManager);
    internal void Write(StreamWriter sw, string nodeName);
    public CT_Bevel get_bevelT();
    public void set_bevelT(CT_Bevel value);
    public CT_Bevel get_bevelB();
    public void set_bevelB(CT_Bevel value);
    public CT_Color get_extrusionClr();
    public void set_extrusionClr(CT_Color value);
    public CT_Color get_contourClr();
    public void set_contourClr(CT_Color value);
    public CT_OfficeArtExtensionList get_extLst();
    public void set_extLst(CT_OfficeArtExtensionList value);
    public long get_z();
    public void set_z(long value);
    public long get_extrusionH();
    public void set_extrusionH(long value);
    public long get_contourW();
    public void set_contourW(long value);
    public ST_PresetMaterialType get_prstMaterial();
    public void set_prstMaterial(ST_PresetMaterialType value);
}
[DesignerCategoryAttribute("code")]
[XmlTypeAttribute]
[XmlRootAttribute]
public class NPOI.OpenXmlFormats.Dml.CT_ShapeLocking : object {
    private CT_OfficeArtExtensionList extLstField;
    private bool noGrpField;
    private bool noSelectField;
    private bool noRotField;
    private bool noChangeAspectField;
    private bool noMoveField;
    private bool noResizeField;
    private bool noEditPointsField;
    private bool noAdjustHandlesField;
    private bool noChangeArrowheadsField;
    private bool noChangeShapeTypeField;
    private bool noTextEditField;
    [XmlElementAttribute]
public CT_OfficeArtExtensionList extLst { get; public set; }
    [XmlAttributeAttribute]
[DefaultValueAttribute("False")]
public bool noGrp { get; public set; }
    [XmlAttributeAttribute]
[DefaultValueAttribute("False")]
public bool noSelect { get; public set; }
    [XmlAttributeAttribute]
[DefaultValueAttribute("False")]
public bool noRot { get; public set; }
    [XmlAttributeAttribute]
[DefaultValueAttribute("False")]
public bool noChangeAspect { get; public set; }
    [XmlAttributeAttribute]
[DefaultValueAttribute("False")]
public bool noMove { get; public set; }
    [XmlAttributeAttribute]
[DefaultValueAttribute("False")]
public bool noResize { get; public set; }
    [XmlAttributeAttribute]
[DefaultValueAttribute("False")]
public bool noEditPoints { get; public set; }
    [XmlAttributeAttribute]
[DefaultValueAttribute("False")]
public bool noAdjustHandles { get; public set; }
    [XmlAttributeAttribute]
[DefaultValueAttribute("False")]
public bool noChangeArrowheads { get; public set; }
    [XmlAttributeAttribute]
[DefaultValueAttribute("False")]
public bool noChangeShapeType { get; public set; }
    [XmlAttributeAttribute]
[DefaultValueAttribute("False")]
public bool noTextEdit { get; public set; }
    public static CT_ShapeLocking Parse(XmlNode node, XmlNamespaceManager namespaceManager);
    internal void Write(StreamWriter sw, string nodeName);
    public CT_OfficeArtExtensionList get_extLst();
    public void set_extLst(CT_OfficeArtExtensionList value);
    public bool get_noGrp();
    public void set_noGrp(bool value);
    public bool get_noSelect();
    public void set_noSelect(bool value);
    public bool get_noRot();
    public void set_noRot(bool value);
    public bool get_noChangeAspect();
    public void set_noChangeAspect(bool value);
    public bool get_noMove();
    public void set_noMove(bool value);
    public bool get_noResize();
    public void set_noResize(bool value);
    public bool get_noEditPoints();
    public void set_noEditPoints(bool value);
    public bool get_noAdjustHandles();
    public void set_noAdjustHandles(bool value);
    public bool get_noChangeArrowheads();
    public void set_noChangeArrowheads(bool value);
    public bool get_noChangeShapeType();
    public void set_noChangeShapeType(bool value);
    public bool get_noTextEdit();
    public void set_noTextEdit(bool value);
}
[XmlTypeAttribute]
[XmlRootAttribute]
public class NPOI.OpenXmlFormats.Dml.CT_ShapeProperties : object {
    private CT_Transform2D xfrmField;
    private CT_CustomGeometry2D custGeomField;
    private CT_PresetGeometry2D prstGeomField;
    private CT_NoFillProperties noFillField;
    private CT_SolidColorFillProperties solidFillField;
    private CT_GradientFillProperties gradFillField;
    private CT_BlipFillProperties blipFillField;
    private CT_PatternFillProperties pattFillField;
    private CT_GroupFillProperties grpFillField;
    private CT_LineProperties lnField;
    private CT_EffectList effectLstField;
    private CT_EffectContainer effectDagField;
    private CT_Scene3D scene3dField;
    private CT_Shape3D sp3dField;
    private CT_OfficeArtExtensionList extLstField;
    private ST_BlackWhiteMode bwModeField;
    [XmlElementAttribute]
public CT_Transform2D xfrm { get; public set; }
    [XmlElementAttribute]
public CT_CustomGeometry2D custGeom { get; public set; }
    [XmlElementAttribute]
public CT_PresetGeometry2D prstGeom { get; public set; }
    [XmlElementAttribute]
public CT_NoFillProperties noFill { get; public set; }
    [XmlElementAttribute]
public CT_SolidColorFillProperties solidFill { get; public set; }
    [XmlElementAttribute]
public CT_GradientFillProperties gradFill { get; public set; }
    [XmlElementAttribute]
public CT_BlipFillProperties blipFill { get; public set; }
    [XmlElementAttribute]
public CT_PatternFillProperties pattFill { get; public set; }
    [XmlElementAttribute]
public CT_GroupFillProperties grpFill { get; public set; }
    [XmlElementAttribute]
public CT_LineProperties ln { get; public set; }
    [XmlElementAttribute]
public CT_EffectList effectLst { get; public set; }
    [XmlElementAttribute]
public CT_EffectContainer effectDag { get; public set; }
    [XmlElementAttribute]
public CT_Scene3D scene3d { get; public set; }
    [XmlElementAttribute]
public CT_Shape3D sp3d { get; public set; }
    [XmlElementAttribute]
public CT_OfficeArtExtensionList extLst { get; public set; }
    [XmlAttributeAttribute]
public ST_BlackWhiteMode bwMode { get; public set; }
    [XmlIgnoreAttribute]
public bool bwModeSpecified { get; }
    public CT_PresetGeometry2D AddNewPrstGeom();
    public CT_Transform2D AddNewXfrm();
    public CT_SolidColorFillProperties AddNewSolidFill();
    public bool IsSetPattFill();
    public bool IsSetSolidFill();
    public bool IsSetLn();
    public CT_LineProperties AddNewLn();
    public void unsetPattFill();
    public void unsetSolidFill();
    public CT_Transform2D get_xfrm();
    public void set_xfrm(CT_Transform2D value);
    public CT_CustomGeometry2D get_custGeom();
    public void set_custGeom(CT_CustomGeometry2D value);
    public CT_PresetGeometry2D get_prstGeom();
    public void set_prstGeom(CT_PresetGeometry2D value);
    public CT_NoFillProperties get_noFill();
    public void set_noFill(CT_NoFillProperties value);
    public CT_SolidColorFillProperties get_solidFill();
    public void set_solidFill(CT_SolidColorFillProperties value);
    public CT_GradientFillProperties get_gradFill();
    public void set_gradFill(CT_GradientFillProperties value);
    public CT_BlipFillProperties get_blipFill();
    public void set_blipFill(CT_BlipFillProperties value);
    public CT_PatternFillProperties get_pattFill();
    public void set_pattFill(CT_PatternFillProperties value);
    public CT_GroupFillProperties get_grpFill();
    public void set_grpFill(CT_GroupFillProperties value);
    public CT_LineProperties get_ln();
    public void set_ln(CT_LineProperties value);
    public CT_EffectList get_effectLst();
    public void set_effectLst(CT_EffectList value);
    public CT_EffectContainer get_effectDag();
    public void set_effectDag(CT_EffectContainer value);
    public CT_Scene3D get_scene3d();
    public void set_scene3d(CT_Scene3D value);
    public CT_Shape3D get_sp3d();
    public void set_sp3d(CT_Shape3D value);
    public CT_OfficeArtExtensionList get_extLst();
    public void set_extLst(CT_OfficeArtExtensionList value);
    public ST_BlackWhiteMode get_bwMode();
    public void set_bwMode(ST_BlackWhiteMode value);
    public bool get_bwModeSpecified();
    public static CT_ShapeProperties Parse(XmlNode node, XmlNamespaceManager namespaceManager);
    internal void Write(StreamWriter sw, string nodeName);
}
[DebuggerStepThroughAttribute]
[DesignerCategoryAttribute("code")]
[XmlTypeAttribute]
[XmlRootAttribute]
public class NPOI.OpenXmlFormats.Dml.CT_ShapeStyle : object {
    private CT_StyleMatrixReference lnRefField;
    private CT_StyleMatrixReference fillRefField;
    private CT_StyleMatrixReference effectRefField;
    private CT_FontReference fontRefField;
    [XmlElementAttribute]
public CT_StyleMatrixReference lnRef { get; public set; }
    [XmlElementAttribute]
public CT_StyleMatrixReference fillRef { get; public set; }
    [XmlElementAttribute]
public CT_StyleMatrixReference effectRef { get; public set; }
    [XmlElementAttribute]
public CT_FontReference fontRef { get; public set; }
    public static CT_ShapeStyle Parse(XmlNode node, XmlNamespaceManager namespaceManager);
    internal void Write(StreamWriter sw, string nodeName);
    public CT_StyleMatrixReference AddNewFillRef();
    public CT_StyleMatrixReference AddNewLnRef();
    public CT_FontReference AddNewFontRef();
    public CT_StyleMatrixReference AddNewEffectRef();
    public CT_StyleMatrixReference get_lnRef();
    public void set_lnRef(CT_StyleMatrixReference value);
    public CT_StyleMatrixReference get_fillRef();
    public void set_fillRef(CT_StyleMatrixReference value);
    public CT_StyleMatrixReference get_effectRef();
    public void set_effectRef(CT_StyleMatrixReference value);
    public CT_FontReference get_fontRef();
    public void set_fontRef(CT_FontReference value);
}
[XmlTypeAttribute]
[XmlRootAttribute]
public class NPOI.OpenXmlFormats.Dml.CT_SoftEdgesEffect : object {
    private long radField;
    [XmlAttributeAttribute]
public long rad { get; public set; }
    public static CT_SoftEdgesEffect Parse(XmlNode node, XmlNamespaceManager namespaceManager);
    internal void Write(StreamWriter sw, string nodeName);
    public long get_rad();
    public void set_rad(long value);
}
[XmlTypeAttribute]
[XmlRootAttribute]
public class NPOI.OpenXmlFormats.Dml.CT_SolidColorFillProperties : object {
    private CT_ScRgbColor scrgbClrField;
    private CT_SRgbColor srgbClrField;
    private CT_HslColor hslClrField;
    private CT_SystemColor sysClrField;
    private CT_SchemeColor schemeClrField;
    private CT_PresetColor prstClrField;
    [XmlElementAttribute]
public CT_ScRgbColor scrgbClr { get; public set; }
    [XmlElementAttribute]
public CT_SRgbColor srgbClr { get; public set; }
    [XmlElementAttribute]
public CT_HslColor hslClr { get; public set; }
    [XmlElementAttribute]
public CT_SystemColor sysClr { get; public set; }
    [XmlElementAttribute]
public CT_SchemeColor schemeClr { get; public set; }
    [XmlElementAttribute]
public CT_PresetColor prstClr { get; public set; }
    public static CT_SolidColorFillProperties Parse(XmlNode node, XmlNamespaceManager namespaceManager);
    internal void Write(StreamWriter sw, string nodeName);
    public CT_ScRgbColor get_scrgbClr();
    public void set_scrgbClr(CT_ScRgbColor value);
    public CT_SRgbColor get_srgbClr();
    public void set_srgbClr(CT_SRgbColor value);
    public CT_HslColor get_hslClr();
    public void set_hslClr(CT_HslColor value);
    public CT_SystemColor get_sysClr();
    public void set_sysClr(CT_SystemColor value);
    public CT_SchemeColor get_schemeClr();
    public void set_schemeClr(CT_SchemeColor value);
    public CT_PresetColor get_prstClr();
    public void set_prstClr(CT_PresetColor value);
    public bool IsSetSrgbClr();
    public CT_SRgbColor AddNewSrgbClr();
    public bool IsSetHslClr();
    public bool IsSetPrstClr();
    public bool IsSetSchemeClr();
    public bool IsSetScrgbClr();
    public bool IsSetSysClr();
    public void UnsetHslClr();
    public void UnsetPrstClr();
    public void UnsetSchemeClr();
    public void UnsetScrgbClr();
    public void UnsetSysClr();
}
[XmlTypeAttribute]
[XmlRootAttribute]
public class NPOI.OpenXmlFormats.Dml.CT_SphereCoords : object {
    private int latField;
    private int lonField;
    private int revField;
    [XmlAttributeAttribute]
public int lat { get; public set; }
    [XmlAttributeAttribute]
public int lon { get; public set; }
    [XmlAttributeAttribute]
public int rev { get; public set; }
    public static CT_SphereCoords Parse(XmlNode node, XmlNamespaceManager namespaceManager);
    internal void Write(StreamWriter sw, string nodeName);
    public int get_lat();
    public void set_lat(int value);
    public int get_lon();
    public void set_lon(int value);
    public int get_rev();
    public void set_rev(int value);
}
[XmlTypeAttribute]
[XmlRootAttribute]
public class NPOI.OpenXmlFormats.Dml.CT_SRgbColor : object {
    private List`1<string> itemsValueField;
    private List`1<EG_ColorTransform> itemsElementNameField;
    private Byte[] valField;
    [XmlIgnoreAttribute]
public List`1<EG_ColorTransform> ItemsElementName { get; public set; }
    [XmlAttributeAttribute]
public Byte[] val { get; public set; }
    public List`1<EG_ColorTransform> get_ItemsElementName();
    public void set_ItemsElementName(List`1<EG_ColorTransform> value);
    public Byte[] get_val();
    public void set_val(Byte[] value);
    public static CT_SRgbColor Parse(XmlNode node, XmlNamespaceManager namespaceManager);
    internal void Write(StreamWriter sw, string nodeName);
}
[XmlTypeAttribute]
[XmlRootAttribute]
public class NPOI.OpenXmlFormats.Dml.CT_StretchInfoProperties : object {
    private CT_RelativeRect fillRectField;
    [XmlElementAttribute]
public CT_RelativeRect fillRect { get; public set; }
    public static CT_StretchInfoProperties Parse(XmlNode node, XmlNamespaceManager namespaceManager);
    internal void Write(StreamWriter sw, string nodeName);
    public CT_RelativeRect AddNewFillRect();
    public CT_RelativeRect get_fillRect();
    public void set_fillRect(CT_RelativeRect value);
}
[DesignerCategoryAttribute("code")]
[XmlTypeAttribute]
[XmlRootAttribute]
public class NPOI.OpenXmlFormats.Dml.CT_StyleMatrix : object {
    private CT_FillStyleList fillStyleLstField;
    private CT_LineStyleList lnStyleLstField;
    private CT_EffectStyleList effectStyleLstField;
    private CT_BackgroundFillStyleList bgFillStyleLstField;
    private string nameField;
    [XmlElementAttribute]
public CT_FillStyleList fillStyleLst { get; public set; }
    [XmlArrayAttribute]
[XmlArrayItemAttribute("ln")]
public CT_LineStyleList lnStyleLst { get; public set; }
    [XmlArrayAttribute]
[XmlArrayItemAttribute("effectStyle")]
public CT_EffectStyleList effectStyleLst { get; public set; }
    [XmlElementAttribute]
public CT_BackgroundFillStyleList bgFillStyleLst { get; public set; }
    [XmlAttributeAttribute]
[DefaultValueAttribute("")]
public string name { get; public set; }
    public static CT_StyleMatrix Parse(XmlNode node, XmlNamespaceManager namespaceManager);
    internal void Write(StreamWriter sw, string nodeName);
    public CT_FillStyleList get_fillStyleLst();
    public void set_fillStyleLst(CT_FillStyleList value);
    public CT_LineStyleList get_lnStyleLst();
    public void set_lnStyleLst(CT_LineStyleList value);
    public CT_EffectStyleList get_effectStyleLst();
    public void set_effectStyleLst(CT_EffectStyleList value);
    public CT_BackgroundFillStyleList get_bgFillStyleLst();
    public void set_bgFillStyleLst(CT_BackgroundFillStyleList value);
    public string get_name();
    public void set_name(string value);
}
[DebuggerStepThroughAttribute]
[DesignerCategoryAttribute("code")]
[XmlTypeAttribute]
[XmlRootAttribute]
public class NPOI.OpenXmlFormats.Dml.CT_StyleMatrixReference : object {
    private CT_ScRgbColor scrgbClrField;
    private CT_SRgbColor srgbClrField;
    private CT_HslColor hslClrField;
    private CT_SystemColor sysClrField;
    private CT_SchemeColor schemeClrField;
    private CT_PresetColor prstClrField;
    private UInt32 idxField;
    [XmlElementAttribute]
public CT_ScRgbColor scrgbClr { get; public set; }
    [XmlElementAttribute]
public CT_SRgbColor srgbClr { get; public set; }
    [XmlElementAttribute]
public CT_HslColor hslClr { get; public set; }
    [XmlElementAttribute]
public CT_SystemColor sysClr { get; public set; }
    [XmlElementAttribute]
public CT_SchemeColor schemeClr { get; public set; }
    [XmlElementAttribute]
public CT_PresetColor prstClr { get; public set; }
    [XmlAttributeAttribute]
public UInt32 idx { get; public set; }
    public static CT_StyleMatrixReference Parse(XmlNode node, XmlNamespaceManager namespaceManager);
    internal void Write(StreamWriter sw, string nodeName);
    public CT_ScRgbColor get_scrgbClr();
    public void set_scrgbClr(CT_ScRgbColor value);
    public CT_SRgbColor get_srgbClr();
    public void set_srgbClr(CT_SRgbColor value);
    public CT_HslColor get_hslClr();
    public void set_hslClr(CT_HslColor value);
    public CT_SystemColor get_sysClr();
    public void set_sysClr(CT_SystemColor value);
    public CT_SchemeColor AddNewSchemeClr();
    public CT_SchemeColor get_schemeClr();
    public void set_schemeClr(CT_SchemeColor value);
    public CT_PresetColor get_prstClr();
    public void set_prstClr(CT_PresetColor value);
    public UInt32 get_idx();
    public void set_idx(UInt32 value);
}
[DesignerCategoryAttribute("code")]
[XmlTypeAttribute]
[XmlRootAttribute]
public class NPOI.OpenXmlFormats.Dml.CT_SupplementalFont : object {
    private string scriptField;
    private string typefaceField;
    [XmlAttributeAttribute]
public string script { get; public set; }
    [XmlAttributeAttribute]
public string typeface { get; public set; }
    public static CT_SupplementalFont Parse(XmlNode node, XmlNamespaceManager namespaceManager);
    internal void Write(StreamWriter sw, string nodeName);
    public string get_script();
    public void set_script(string value);
    public string get_typeface();
    public void set_typeface(string value);
}
[XmlTypeAttribute]
[XmlRootAttribute]
public class NPOI.OpenXmlFormats.Dml.CT_SystemColor : object {
    private List`1<string> itemsValueField;
    private List`1<EG_ColorTransform> itemsElementNameField;
    private ST_SystemColorVal valField;
    private Byte[] lastClrField;
    [XmlIgnoreAttribute]
public List`1<EG_ColorTransform> ItemsElementName { get; public set; }
    [XmlAttributeAttribute]
public ST_SystemColorVal val { get; public set; }
    [XmlAttributeAttribute]
public Byte[] lastClr { get; public set; }
    public static CT_SystemColor Parse(XmlNode node, XmlNamespaceManager namespaceManager);
    internal void Write(StreamWriter sw, string nodeName);
    public List`1<EG_ColorTransform> get_ItemsElementName();
    public void set_ItemsElementName(List`1<EG_ColorTransform> value);
    public ST_SystemColorVal get_val();
    public void set_val(ST_SystemColorVal value);
    public Byte[] get_lastClr();
    public void set_lastClr(Byte[] value);
}
[DebuggerStepThroughAttribute]
[DesignerCategoryAttribute("code")]
[XmlTypeAttribute]
[XmlRootAttribute("tbl")]
public class NPOI.OpenXmlFormats.Dml.CT_Table : object {
    private CT_TableProperties tblPrField;
    private List`1<CT_TableCol> tblGridField;
    private List`1<CT_TableRow> trField;
    [XmlElementAttribute]
public CT_TableProperties tblPr { get; public set; }
    [XmlArrayAttribute]
[XmlArrayItemAttribute("gridCol")]
public List`1<CT_TableCol> tblGrid { get; public set; }
    [XmlElementAttribute("tr")]
public List`1<CT_TableRow> tr { get; public set; }
    public CT_TableProperties get_tblPr();
    public void set_tblPr(CT_TableProperties value);
    public List`1<CT_TableCol> get_tblGrid();
    public void set_tblGrid(List`1<CT_TableCol> value);
    public List`1<CT_TableRow> get_tr();
    public void set_tr(List`1<CT_TableRow> value);
}
[DebuggerStepThroughAttribute]
[DesignerCategoryAttribute("code")]
[XmlTypeAttribute]
[XmlRootAttribute]
public class NPOI.OpenXmlFormats.Dml.CT_TableBackgroundStyle : object {
    private CT_FillProperties fillField;
    private CT_StyleMatrixReference fillRefField;
    private CT_EffectProperties effectField;
    private CT_StyleMatrixReference effectRefField;
    [XmlElementAttribute]
public CT_FillProperties fill { get; public set; }
    [XmlElementAttribute]
public CT_StyleMatrixReference fillRef { get; public set; }
    [XmlElementAttribute]
public CT_EffectProperties effect { get; public set; }
    [XmlElementAttribute]
public CT_StyleMatrixReference effectRef { get; public set; }
    public CT_FillProperties get_fill();
    public void set_fill(CT_FillProperties value);
    public CT_StyleMatrixReference get_fillRef();
    public void set_fillRef(CT_StyleMatrixReference value);
    public CT_EffectProperties get_effect();
    public void set_effect(CT_EffectProperties value);
    public CT_StyleMatrixReference get_effectRef();
    public void set_effectRef(CT_StyleMatrixReference value);
}
[DebuggerStepThroughAttribute]
[DesignerCategoryAttribute("code")]
[XmlTypeAttribute]
[XmlRootAttribute]
public class NPOI.OpenXmlFormats.Dml.CT_TableCell : object {
    private CT_TextBody txBodyField;
    private CT_TableCellProperties tcPrField;
    private CT_OfficeArtExtensionList extLstField;
    private int rowSpanField;
    private int gridSpanField;
    private bool hMergeField;
    private bool vMergeField;
    [XmlElementAttribute]
public CT_TextBody txBody { get; public set; }
    [XmlElementAttribute]
public CT_TableCellProperties tcPr { get; public set; }
    [XmlElementAttribute]
public CT_OfficeArtExtensionList extLst { get; public set; }
    [XmlAttributeAttribute]
[DefaultValueAttribute("1")]
public int rowSpan { get; public set; }
    [XmlAttributeAttribute]
[DefaultValueAttribute("1")]
public int gridSpan { get; public set; }
    [XmlAttributeAttribute]
[DefaultValueAttribute("False")]
public bool hMerge { get; public set; }
    [XmlAttributeAttribute]
[DefaultValueAttribute("False")]
public bool vMerge { get; public set; }
    public CT_TextBody get_txBody();
    public void set_txBody(CT_TextBody value);
    public CT_TableCellProperties get_tcPr();
    public void set_tcPr(CT_TableCellProperties value);
    public CT_OfficeArtExtensionList get_extLst();
    public void set_extLst(CT_OfficeArtExtensionList value);
    public int get_rowSpan();
    public void set_rowSpan(int value);
    public int get_gridSpan();
    public void set_gridSpan(int value);
    public bool get_hMerge();
    public void set_hMerge(bool value);
    public bool get_vMerge();
    public void set_vMerge(bool value);
}
[DebuggerStepThroughAttribute]
[DesignerCategoryAttribute("code")]
[XmlTypeAttribute]
[XmlRootAttribute]
public class NPOI.OpenXmlFormats.Dml.CT_TableCellBorderStyle : object {
    private CT_ThemeableLineStyle leftField;
    private CT_ThemeableLineStyle rightField;
    private CT_ThemeableLineStyle topField;
    private CT_ThemeableLineStyle bottomField;
    private CT_ThemeableLineStyle insideHField;
    private CT_ThemeableLineStyle insideVField;
    private CT_ThemeableLineStyle tl2brField;
    private CT_ThemeableLineStyle tr2blField;
    private CT_OfficeArtExtensionList extLstField;
    [XmlElementAttribute]
public CT_ThemeableLineStyle left { get; public set; }
    [XmlElementAttribute]
public CT_ThemeableLineStyle right { get; public set; }
    [XmlElementAttribute]
public CT_ThemeableLineStyle top { get; public set; }
    [XmlElementAttribute]
public CT_ThemeableLineStyle bottom { get; public set; }
    [XmlElementAttribute]
public CT_ThemeableLineStyle insideH { get; public set; }
    [XmlElementAttribute]
public CT_ThemeableLineStyle insideV { get; public set; }
    [XmlElementAttribute]
public CT_ThemeableLineStyle tl2br { get; public set; }
    [XmlElementAttribute]
public CT_ThemeableLineStyle tr2bl { get; public set; }
    [XmlElementAttribute]
public CT_OfficeArtExtensionList extLst { get; public set; }
    public CT_ThemeableLineStyle get_left();
    public void set_left(CT_ThemeableLineStyle value);
    public CT_ThemeableLineStyle get_right();
    public void set_right(CT_ThemeableLineStyle value);
    public CT_ThemeableLineStyle get_top();
    public void set_top(CT_ThemeableLineStyle value);
    public CT_ThemeableLineStyle get_bottom();
    public void set_bottom(CT_ThemeableLineStyle value);
    public CT_ThemeableLineStyle get_insideH();
    public void set_insideH(CT_ThemeableLineStyle value);
    public CT_ThemeableLineStyle get_insideV();
    public void set_insideV(CT_ThemeableLineStyle value);
    public CT_ThemeableLineStyle get_tl2br();
    public void set_tl2br(CT_ThemeableLineStyle value);
    public CT_ThemeableLineStyle get_tr2bl();
    public void set_tr2bl(CT_ThemeableLineStyle value);
    public CT_OfficeArtExtensionList get_extLst();
    public void set_extLst(CT_OfficeArtExtensionList value);
}
[DebuggerStepThroughAttribute]
[DesignerCategoryAttribute("code")]
[XmlTypeAttribute]
[XmlRootAttribute]
public class NPOI.OpenXmlFormats.Dml.CT_TableCellProperties : object {
    private CT_LineProperties lnLField;
    private CT_LineProperties lnRField;
    private CT_LineProperties lnTField;
    private CT_LineProperties lnBField;
    private CT_LineProperties lnTlToBrField;
    private CT_LineProperties lnBlToTrField;
    private CT_Cell3D cell3DField;
    private CT_NoFillProperties noFillField;
    private CT_SolidColorFillProperties solidFillField;
    private CT_GradientFillProperties gradFillField;
    private CT_BlipFillProperties blipFillField;
    private CT_PatternFillProperties pattFillField;
    private CT_GroupFillProperties grpFillField;
    private CT_OfficeArtExtensionList extLstField;
    private int marLField;
    private int marRField;
    private int marTField;
    private int marBField;
    private ST_TextVerticalType vertField;
    private ST_TextAnchoringType anchorField;
    private bool anchorCtrField;
    private ST_TextHorzOverflowType horzOverflowField;
    [XmlElementAttribute]
public CT_LineProperties lnL { get; public set; }
    [XmlElementAttribute]
public CT_LineProperties lnR { get; public set; }
    [XmlElementAttribute]
public CT_LineProperties lnT { get; public set; }
    [XmlElementAttribute]
public CT_LineProperties lnB { get; public set; }
    [XmlElementAttribute]
public CT_LineProperties lnTlToBr { get; public set; }
    [XmlElementAttribute]
public CT_LineProperties lnBlToTr { get; public set; }
    [XmlElementAttribute]
public CT_Cell3D cell3D { get; public set; }
    [XmlElementAttribute]
public CT_NoFillProperties noFill { get; public set; }
    [XmlElementAttribute]
public CT_SolidColorFillProperties solidFill { get; public set; }
    [XmlElementAttribute]
public CT_GradientFillProperties gradFill { get; public set; }
    [XmlElementAttribute]
public CT_BlipFillProperties blipFill { get; public set; }
    [XmlElementAttribute]
public CT_PatternFillProperties pattFill { get; public set; }
    [XmlElementAttribute]
public CT_GroupFillProperties grpFill { get; public set; }
    [XmlElementAttribute]
public CT_OfficeArtExtensionList extLst { get; public set; }
    [XmlAttributeAttribute]
[DefaultValueAttribute("91440")]
public int marL { get; public set; }
    [XmlAttributeAttribute]
[DefaultValueAttribute("91440")]
public int marR { get; public set; }
    [XmlAttributeAttribute]
[DefaultValueAttribute("45720")]
public int marT { get; public set; }
    [XmlAttributeAttribute]
[DefaultValueAttribute("45720")]
public int marB { get; public set; }
    [XmlAttributeAttribute]
[DefaultValueAttribute("Mono.Cecil.CustomAttributeArgument")]
public ST_TextVerticalType vert { get; public set; }
    [XmlAttributeAttribute]
[DefaultValueAttribute("Mono.Cecil.CustomAttributeArgument")]
public ST_TextAnchoringType anchor { get; public set; }
    [XmlAttributeAttribute]
[DefaultValueAttribute("False")]
public bool anchorCtr { get; public set; }
    [XmlAttributeAttribute]
[DefaultValueAttribute("Mono.Cecil.CustomAttributeArgument")]
public ST_TextHorzOverflowType horzOverflow { get; public set; }
    public CT_LineProperties get_lnL();
    public void set_lnL(CT_LineProperties value);
    public CT_LineProperties get_lnR();
    public void set_lnR(CT_LineProperties value);
    public CT_LineProperties get_lnT();
    public void set_lnT(CT_LineProperties value);
    public CT_LineProperties get_lnB();
    public void set_lnB(CT_LineProperties value);
    public CT_LineProperties get_lnTlToBr();
    public void set_lnTlToBr(CT_LineProperties value);
    public CT_LineProperties get_lnBlToTr();
    public void set_lnBlToTr(CT_LineProperties value);
    public CT_Cell3D get_cell3D();
    public void set_cell3D(CT_Cell3D value);
    public CT_NoFillProperties get_noFill();
    public void set_noFill(CT_NoFillProperties value);
    public CT_SolidColorFillProperties get_solidFill();
    public void set_solidFill(CT_SolidColorFillProperties value);
    public CT_GradientFillProperties get_gradFill();
    public void set_gradFill(CT_GradientFillProperties value);
    public CT_BlipFillProperties get_blipFill();
    public void set_blipFill(CT_BlipFillProperties value);
    public CT_PatternFillProperties get_pattFill();
    public void set_pattFill(CT_PatternFillProperties value);
    public CT_GroupFillProperties get_grpFill();
    public void set_grpFill(CT_GroupFillProperties value);
    public CT_OfficeArtExtensionList get_extLst();
    public void set_extLst(CT_OfficeArtExtensionList value);
    public int get_marL();
    public void set_marL(int value);
    public int get_marR();
    public void set_marR(int value);
    public int get_marT();
    public void set_marT(int value);
    public int get_marB();
    public void set_marB(int value);
    public ST_TextVerticalType get_vert();
    public void set_vert(ST_TextVerticalType value);
    public ST_TextAnchoringType get_anchor();
    public void set_anchor(ST_TextAnchoringType value);
    public bool get_anchorCtr();
    public void set_anchorCtr(bool value);
    public ST_TextHorzOverflowType get_horzOverflow();
    public void set_horzOverflow(ST_TextHorzOverflowType value);
}
[DebuggerStepThroughAttribute]
[DesignerCategoryAttribute("code")]
[XmlTypeAttribute]
[XmlRootAttribute]
public class NPOI.OpenXmlFormats.Dml.CT_TableCol : object {
    private CT_OfficeArtExtensionList extLstField;
    private long wField;
    [XmlElementAttribute]
public CT_OfficeArtExtensionList extLst { get; public set; }
    [XmlAttributeAttribute]
public long w { get; public set; }
    public CT_OfficeArtExtensionList get_extLst();
    public void set_extLst(CT_OfficeArtExtensionList value);
    public long get_w();
    public void set_w(long value);
}
[DebuggerStepThroughAttribute]
[DesignerCategoryAttribute("code")]
[XmlTypeAttribute]
[XmlRootAttribute]
public class NPOI.OpenXmlFormats.Dml.CT_TableGrid : object {
    private List`1<CT_TableCol> gridColField;
    [XmlElementAttribute("gridCol")]
public List`1<CT_TableCol> gridCol { get; public set; }
    public List`1<CT_TableCol> get_gridCol();
    public void set_gridCol(List`1<CT_TableCol> value);
}
[DebuggerStepThroughAttribute]
[DesignerCategoryAttribute("code")]
[XmlTypeAttribute]
[XmlRootAttribute]
public class NPOI.OpenXmlFormats.Dml.CT_TablePartStyle : object {
    private CT_TableStyleTextStyle tcTxStyleField;
    private CT_TableStyleCellStyle tcStyleField;
    [XmlElementAttribute]
public CT_TableStyleTextStyle tcTxStyle { get; public set; }
    [XmlElementAttribute]
public CT_TableStyleCellStyle tcStyle { get; public set; }
    public CT_TableStyleTextStyle get_tcTxStyle();
    public void set_tcTxStyle(CT_TableStyleTextStyle value);
    public CT_TableStyleCellStyle get_tcStyle();
    public void set_tcStyle(CT_TableStyleCellStyle value);
}
[DebuggerStepThroughAttribute]
[DesignerCategoryAttribute("code")]
[XmlTypeAttribute]
[XmlRootAttribute]
public class NPOI.OpenXmlFormats.Dml.CT_TableProperties : object {
    private CT_NoFillProperties noFillField;
    private CT_SolidColorFillProperties solidFillField;
    private CT_GradientFillProperties gradFillField;
    private CT_BlipFillProperties blipFillField;
    private CT_PatternFillProperties pattFillField;
    private CT_GroupFillProperties grpFillField;
    private CT_EffectList effectLstField;
    private CT_EffectContainer effectDagField;
    private object itemField;
    private CT_OfficeArtExtensionList extLstField;
    private bool rtlField;
    private bool firstRowField;
    private bool firstColField;
    private bool lastRowField;
    private bool lastColField;
    private bool bandRowField;
    private bool bandColField;
    [XmlElementAttribute]
public CT_NoFillProperties noFill { get; public set; }
    [XmlElementAttribute]
public CT_SolidColorFillProperties solidFill { get; public set; }
    [XmlElementAttribute]
public CT_GradientFillProperties gradFill { get; public set; }
    [XmlElementAttribute]
public CT_BlipFillProperties blipFill { get; public set; }
    [XmlElementAttribute]
public CT_PatternFillProperties pattFill { get; public set; }
    [XmlElementAttribute]
public CT_GroupFillProperties grpFill { get; public set; }
    [XmlElementAttribute]
public CT_EffectList effectLst { get; public set; }
    [XmlElementAttribute]
public CT_EffectContainer effectDag { get; public set; }
    [XmlElementAttribute("tableStyle", "NPOI.OpenXmlFormats.Dml.CT_TableStyle")]
[XmlElementAttribute("tableStyleId", "System.String")]
public object Item { get; public set; }
    [XmlElementAttribute]
public CT_OfficeArtExtensionList extLst { get; public set; }
    [XmlAttributeAttribute]
[DefaultValueAttribute("False")]
public bool rtl { get; public set; }
    [XmlAttributeAttribute]
[DefaultValueAttribute("False")]
public bool firstRow { get; public set; }
    [XmlAttributeAttribute]
[DefaultValueAttribute("False")]
public bool firstCol { get; public set; }
    [XmlAttributeAttribute]
[DefaultValueAttribute("False")]
public bool lastRow { get; public set; }
    [XmlAttributeAttribute]
[DefaultValueAttribute("False")]
public bool lastCol { get; public set; }
    [XmlAttributeAttribute]
[DefaultValueAttribute("False")]
public bool bandRow { get; public set; }
    [XmlAttributeAttribute]
[DefaultValueAttribute("False")]
public bool bandCol { get; public set; }
    public CT_NoFillProperties get_noFill();
    public void set_noFill(CT_NoFillProperties value);
    public CT_SolidColorFillProperties get_solidFill();
    public void set_solidFill(CT_SolidColorFillProperties value);
    public CT_GradientFillProperties get_gradFill();
    public void set_gradFill(CT_GradientFillProperties value);
    public CT_BlipFillProperties get_blipFill();
    public void set_blipFill(CT_BlipFillProperties value);
    public CT_PatternFillProperties get_pattFill();
    public void set_pattFill(CT_PatternFillProperties value);
    public CT_GroupFillProperties get_grpFill();
    public void set_grpFill(CT_GroupFillProperties value);
    public CT_EffectList get_effectLst();
    public void set_effectLst(CT_EffectList value);
    public CT_EffectContainer get_effectDag();
    public void set_effectDag(CT_EffectContainer value);
    public object get_Item();
    public void set_Item(object value);
    public CT_OfficeArtExtensionList get_extLst();
    public void set_extLst(CT_OfficeArtExtensionList value);
    public bool get_rtl();
    public void set_rtl(bool value);
    public bool get_firstRow();
    public void set_firstRow(bool value);
    public bool get_firstCol();
    public void set_firstCol(bool value);
    public bool get_lastRow();
    public void set_lastRow(bool value);
    public bool get_lastCol();
    public void set_lastCol(bool value);
    public bool get_bandRow();
    public void set_bandRow(bool value);
    public bool get_bandCol();
    public void set_bandCol(bool value);
}
[DebuggerStepThroughAttribute]
[DesignerCategoryAttribute("code")]
[XmlTypeAttribute]
[XmlRootAttribute]
public class NPOI.OpenXmlFormats.Dml.CT_TableRow : object {
    private List`1<CT_TableCell> tcField;
    private CT_OfficeArtExtensionList extLstField;
    private long hField;
    [XmlElementAttribute("tc")]
public List`1<CT_TableCell> tc { get; public set; }
    [XmlElementAttribute]
public CT_OfficeArtExtensionList extLst { get; public set; }
    [XmlAttributeAttribute]
public long h { get; public set; }
    public List`1<CT_TableCell> get_tc();
    public void set_tc(List`1<CT_TableCell> value);
    public CT_OfficeArtExtensionList get_extLst();
    public void set_extLst(CT_OfficeArtExtensionList value);
    public long get_h();
    public void set_h(long value);
}
[DebuggerStepThroughAttribute]
[DesignerCategoryAttribute("code")]
[XmlTypeAttribute]
[XmlRootAttribute]
public class NPOI.OpenXmlFormats.Dml.CT_TableStyle : object {
    private CT_TableBackgroundStyle tblBgField;
    private CT_TablePartStyle wholeTblField;
    private CT_TablePartStyle band1HField;
    private CT_TablePartStyle band2HField;
    private CT_TablePartStyle band1VField;
    private CT_TablePartStyle band2VField;
    private CT_TablePartStyle lastColField;
    private CT_TablePartStyle firstColField;
    private CT_TablePartStyle lastRowField;
    private CT_TablePartStyle seCellField;
    private CT_TablePartStyle swCellField;
    private CT_TablePartStyle firstRowField;
    private CT_TablePartStyle neCellField;
    private CT_TablePartStyle nwCellField;
    private CT_OfficeArtExtensionList extLstField;
    private string styleIdField;
    private string styleNameField;
    [XmlElementAttribute]
public CT_TableBackgroundStyle tblBg { get; public set; }
    [XmlElementAttribute]
public CT_TablePartStyle wholeTbl { get; public set; }
    [XmlElementAttribute]
public CT_TablePartStyle band1H { get; public set; }
    [XmlElementAttribute]
public CT_TablePartStyle band2H { get; public set; }
    [XmlElementAttribute]
public CT_TablePartStyle band1V { get; public set; }
    [XmlElementAttribute]
public CT_TablePartStyle band2V { get; public set; }
    [XmlElementAttribute]
public CT_TablePartStyle lastCol { get; public set; }
    [XmlElementAttribute]
public CT_TablePartStyle firstCol { get; public set; }
    [XmlElementAttribute]
public CT_TablePartStyle lastRow { get; public set; }
    [XmlElementAttribute]
public CT_TablePartStyle seCell { get; public set; }
    [XmlElementAttribute]
public CT_TablePartStyle swCell { get; public set; }
    [XmlElementAttribute]
public CT_TablePartStyle firstRow { get; public set; }
    [XmlElementAttribute]
public CT_TablePartStyle neCell { get; public set; }
    [XmlElementAttribute]
public CT_TablePartStyle nwCell { get; public set; }
    [XmlElementAttribute]
public CT_OfficeArtExtensionList extLst { get; public set; }
    [XmlAttributeAttribute]
public string styleId { get; public set; }
    [XmlAttributeAttribute]
public string styleName { get; public set; }
    public CT_TableBackgroundStyle get_tblBg();
    public void set_tblBg(CT_TableBackgroundStyle value);
    public CT_TablePartStyle get_wholeTbl();
    public void set_wholeTbl(CT_TablePartStyle value);
    public CT_TablePartStyle get_band1H();
    public void set_band1H(CT_TablePartStyle value);
    public CT_TablePartStyle get_band2H();
    public void set_band2H(CT_TablePartStyle value);
    public CT_TablePartStyle get_band1V();
    public void set_band1V(CT_TablePartStyle value);
    public CT_TablePartStyle get_band2V();
    public void set_band2V(CT_TablePartStyle value);
    public CT_TablePartStyle get_lastCol();
    public void set_lastCol(CT_TablePartStyle value);
    public CT_TablePartStyle get_firstCol();
    public void set_firstCol(CT_TablePartStyle value);
    public CT_TablePartStyle get_lastRow();
    public void set_lastRow(CT_TablePartStyle value);
    public CT_TablePartStyle get_seCell();
    public void set_seCell(CT_TablePartStyle value);
    public CT_TablePartStyle get_swCell();
    public void set_swCell(CT_TablePartStyle value);
    public CT_TablePartStyle get_firstRow();
    public void set_firstRow(CT_TablePartStyle value);
    public CT_TablePartStyle get_neCell();
    public void set_neCell(CT_TablePartStyle value);
    public CT_TablePartStyle get_nwCell();
    public void set_nwCell(CT_TablePartStyle value);
    public CT_OfficeArtExtensionList get_extLst();
    public void set_extLst(CT_OfficeArtExtensionList value);
    public string get_styleId();
    public void set_styleId(string value);
    public string get_styleName();
    public void set_styleName(string value);
}
[DebuggerStepThroughAttribute]
[DesignerCategoryAttribute("code")]
[XmlTypeAttribute]
[XmlRootAttribute]
public class NPOI.OpenXmlFormats.Dml.CT_TableStyleCellStyle : object {
    private CT_TableCellBorderStyle tcBdrField;
    private CT_FillProperties fillField;
    private CT_StyleMatrixReference fillRefField;
    private CT_Cell3D cell3DField;
    [XmlElementAttribute]
public CT_TableCellBorderStyle tcBdr { get; public set; }
    [XmlElementAttribute]
public CT_FillProperties fill { get; public set; }
    [XmlElementAttribute]
public CT_StyleMatrixReference fillRef { get; public set; }
    [XmlElementAttribute]
public CT_Cell3D cell3D { get; public set; }
    public CT_TableCellBorderStyle get_tcBdr();
    public void set_tcBdr(CT_TableCellBorderStyle value);
    public CT_FillProperties get_fill();
    public void set_fill(CT_FillProperties value);
    public CT_StyleMatrixReference get_fillRef();
    public void set_fillRef(CT_StyleMatrixReference value);
    public CT_Cell3D get_cell3D();
    public void set_cell3D(CT_Cell3D value);
}
[DebuggerStepThroughAttribute]
[DesignerCategoryAttribute("code")]
[XmlTypeAttribute]
[XmlRootAttribute("tblStyleLst")]
public class NPOI.OpenXmlFormats.Dml.CT_TableStyleList : object {
    private List`1<CT_TableStyle> tblStyleField;
    private string defField;
    [XmlElementAttribute("tblStyle")]
public List`1<CT_TableStyle> tblStyle { get; public set; }
    [XmlAttributeAttribute]
public string def { get; public set; }
    public List`1<CT_TableStyle> get_tblStyle();
    public void set_tblStyle(List`1<CT_TableStyle> value);
    public string get_def();
    public void set_def(string value);
}
[DebuggerStepThroughAttribute]
[DesignerCategoryAttribute("code")]
[XmlTypeAttribute]
[XmlRootAttribute]
public class NPOI.OpenXmlFormats.Dml.CT_TableStyleTextStyle : object {
    private CT_FontCollection fontField;
    private CT_FontReference fontRefField;
    private CT_ScRgbColor scrgbClrField;
    private CT_SRgbColor srgbClrField;
    private CT_HslColor hslClrField;
    private CT_SystemColor sysClrField;
    private CT_SchemeColor schemeClrField;
    private CT_PresetColor prstClrField;
    private CT_OfficeArtExtensionList extLstField;
    private ST_OnOffStyleType bField;
    private ST_OnOffStyleType iField;
    [XmlElementAttribute]
public CT_FontCollection font { get; public set; }
    [XmlElementAttribute]
public CT_FontReference fontRef { get; public set; }
    [XmlElementAttribute]
public CT_ScRgbColor scrgbClr { get; public set; }
    [XmlElementAttribute]
public CT_SRgbColor srgbClr { get; public set; }
    [XmlElementAttribute]
public CT_HslColor hslClr { get; public set; }
    [XmlElementAttribute]
public CT_SystemColor sysClr { get; public set; }
    [XmlElementAttribute]
public CT_SchemeColor schemeClr { get; public set; }
    [XmlElementAttribute]
public CT_PresetColor prstClr { get; public set; }
    [XmlElementAttribute]
public CT_OfficeArtExtensionList extLst { get; public set; }
    [XmlAttributeAttribute]
[DefaultValueAttribute("Mono.Cecil.CustomAttributeArgument")]
public ST_OnOffStyleType b { get; public set; }
    [XmlAttributeAttribute]
[DefaultValueAttribute("Mono.Cecil.CustomAttributeArgument")]
public ST_OnOffStyleType i { get; public set; }
    public CT_FontCollection get_font();
    public void set_font(CT_FontCollection value);
    public CT_FontReference get_fontRef();
    public void set_fontRef(CT_FontReference value);
    public CT_ScRgbColor get_scrgbClr();
    public void set_scrgbClr(CT_ScRgbColor value);
    public CT_SRgbColor get_srgbClr();
    public void set_srgbClr(CT_SRgbColor value);
    public CT_HslColor get_hslClr();
    public void set_hslClr(CT_HslColor value);
    public CT_SystemColor get_sysClr();
    public void set_sysClr(CT_SystemColor value);
    public CT_SchemeColor get_schemeClr();
    public void set_schemeClr(CT_SchemeColor value);
    public CT_PresetColor get_prstClr();
    public void set_prstClr(CT_PresetColor value);
    public CT_OfficeArtExtensionList get_extLst();
    public void set_extLst(CT_OfficeArtExtensionList value);
    public ST_OnOffStyleType get_b();
    public void set_b(ST_OnOffStyleType value);
    public ST_OnOffStyleType get_i();
    public void set_i(ST_OnOffStyleType value);
}
[DebuggerStepThroughAttribute]
[DesignerCategoryAttribute("code")]
[XmlTypeAttribute]
[XmlRootAttribute]
public class NPOI.OpenXmlFormats.Dml.CT_TextAutonumberBullet : object {
    private ST_TextAutonumberScheme typeField;
    private bool typeFieldSpecified;
    private int startAtField;
    private bool startAtFieldSpecified;
    [XmlAttributeAttribute]
public ST_TextAutonumberScheme type { get; public set; }
    [XmlIgnoreAttribute]
public bool typeSpecified { get; public set; }
    [XmlAttributeAttribute]
[DefaultValueAttribute("1")]
public int startAt { get; public set; }
    [XmlIgnoreAttribute]
public bool startAtSpecified { get; public set; }
    public static CT_TextAutonumberBullet Parse(XmlNode node, XmlNamespaceManager namespaceManager);
    internal void Write(StreamWriter sw, string nodeName);
    public ST_TextAutonumberScheme get_type();
    public void set_type(ST_TextAutonumberScheme value);
    public bool get_typeSpecified();
    public void set_typeSpecified(bool value);
    public int get_startAt();
    public void set_startAt(int value);
    public bool get_startAtSpecified();
    public void set_startAtSpecified(bool value);
    public bool IsSetStartAt();
}
[DebuggerStepThroughAttribute]
[DesignerCategoryAttribute("code")]
[XmlTypeAttribute]
[XmlRootAttribute]
public class NPOI.OpenXmlFormats.Dml.CT_TextBlipBullet : object {
    private CT_Blip blipField;
    [XmlElementAttribute]
public CT_Blip blip { get; public set; }
    public static CT_TextBlipBullet Parse(XmlNode node, XmlNamespaceManager namespaceManager);
    internal void Write(StreamWriter sw, string nodeName);
    public CT_Blip get_blip();
    public void set_blip(CT_Blip value);
}
[DesignerCategoryAttribute("code")]
[XmlTypeAttribute]
[XmlRootAttribute]
public class NPOI.OpenXmlFormats.Dml.CT_TextBody : object {
    private CT_TextBodyProperties bodyPrField;
    private CT_TextListStyle lstStyleField;
    private List`1<CT_TextParagraph> pField;
    public CT_TextBodyProperties bodyPr { get; public set; }
    public CT_TextListStyle lstStyle { get; public set; }
    [XmlElementAttribute("p")]
public List`1<CT_TextParagraph> p { get; public set; }
    public static CT_TextBody Parse(XmlNode node, XmlNamespaceManager namespaceManager);
    internal void Write(StreamWriter sw, string nodeName);
    public void SetPArray(CT_TextParagraph[] array);
    public CT_TextParagraph AddNewP();
    public CT_TextBodyProperties AddNewBodyPr();
    public CT_TextListStyle AddNewLstStyle();
    public CT_TextBodyProperties get_bodyPr();
    public void set_bodyPr(CT_TextBodyProperties value);
    public CT_TextListStyle get_lstStyle();
    public void set_lstStyle(CT_TextListStyle value);
    public virtual string ToString();
    public List`1<CT_TextParagraph> get_p();
    public void set_p(List`1<CT_TextParagraph> value);
}
[DesignerCategoryAttribute("code")]
[XmlTypeAttribute]
[XmlRootAttribute]
public class NPOI.OpenXmlFormats.Dml.CT_TextBodyProperties : object {
    private CT_PresetTextShape prstTxWarpField;
    private CT_TextNoAutofit noAutofitField;
    private CT_TextNormalAutofit normAutofitField;
    private CT_TextShapeAutofit spAutoFitField;
    private CT_Scene3D scene3dField;
    private CT_Shape3D sp3dField;
    private CT_FlatText flatTxField;
    private CT_OfficeArtExtensionList extLstField;
    private int rotField;
    private bool rotFieldSpecified;
    private bool spcFirstLastParaField;
    private bool spcFirstLastParaFieldSpecified;
    private ST_TextVertOverflowType vertOverflowField;
    private bool vertOverflowFieldSpecified;
    private ST_TextHorzOverflowType horzOverflowField;
    private bool horzOverflowFieldSpecified;
    private ST_TextVerticalType vertField;
    private bool vertFieldSpecified;
    private ST_TextWrappingType wrapField;
    private bool wrapFieldSpecified;
    private int lInsField;
    private bool lInsFieldSpecified;
    private int tInsField;
    private bool tInsFieldSpecified;
    private int rInsField;
    private bool rInsFieldSpecified;
    private int bInsField;
    private bool bInsFieldSpecified;
    private int numColField;
    private bool numColFieldSpecified;
    private int spcColField;
    private bool spcColFieldSpecified;
    private bool rtlColField;
    private bool rtlColFieldSpecified;
    private bool fromWordArtField;
    private bool fromWordArtFieldSpecified;
    private ST_TextAnchoringType anchorField;
    private bool anchorFieldSpecified;
    private bool anchorCtrField;
    private bool anchorCtrFieldSpecified;
    private bool forceAAField;
    private bool forceAAFieldSpecified;
    private bool uprightField;
    private bool compatLnSpcField;
    private bool compatLnSpcFieldSpecified;
    public CT_PresetTextShape prstTxWarp { get; public set; }
    public CT_TextNoAutofit noAutofit { get; public set; }
    public CT_TextNormalAutofit normAutofit { get; public set; }
    public CT_TextShapeAutofit spAutoFit { get; public set; }
    public CT_Scene3D scene3d { get; public set; }
    public CT_Shape3D sp3d { get; public set; }
    public CT_FlatText flatTx { get; public set; }
    public CT_OfficeArtExtensionList extLst { get; public set; }
    [XmlAttributeAttribute]
public int rot { get; public set; }
    [XmlIgnoreAttribute]
public bool rotSpecified { get; public set; }
    [XmlAttributeAttribute]
public bool spcFirstLastPara { get; public set; }
    [XmlIgnoreAttribute]
public bool spcFirstLastParaSpecified { get; public set; }
    [XmlAttributeAttribute]
public ST_TextVertOverflowType vertOverflow { get; public set; }
    [XmlIgnoreAttribute]
public bool vertOverflowSpecified { get; public set; }
    [XmlAttributeAttribute]
public ST_TextHorzOverflowType horzOverflow { get; public set; }
    [XmlIgnoreAttribute]
public bool horzOverflowSpecified { get; public set; }
    [XmlAttributeAttribute]
public ST_TextVerticalType vert { get; public set; }
    [XmlIgnoreAttribute]
public bool vertSpecified { get; public set; }
    [XmlAttributeAttribute]
public ST_TextWrappingType wrap { get; public set; }
    [XmlIgnoreAttribute]
public bool wrapSpecified { get; public set; }
    [XmlAttributeAttribute]
public int lIns { get; public set; }
    [XmlIgnoreAttribute]
public bool lInsSpecified { get; public set; }
    [XmlAttributeAttribute]
public int tIns { get; public set; }
    [XmlIgnoreAttribute]
public bool tInsSpecified { get; public set; }
    [XmlAttributeAttribute]
public int rIns { get; public set; }
    [XmlIgnoreAttribute]
public bool rInsSpecified { get; public set; }
    [XmlAttributeAttribute]
public int bIns { get; public set; }
    [XmlIgnoreAttribute]
public bool bInsSpecified { get; public set; }
    [XmlAttributeAttribute]
public int numCol { get; public set; }
    [XmlIgnoreAttribute]
public bool numColSpecified { get; public set; }
    [XmlAttributeAttribute]
public int spcCol { get; public set; }
    [XmlIgnoreAttribute]
public bool spcColSpecified { get; public set; }
    [XmlAttributeAttribute]
public bool rtlCol { get; public set; }
    [XmlIgnoreAttribute]
public bool rtlColSpecified { get; public set; }
    [XmlAttributeAttribute]
public bool fromWordArt { get; public set; }
    [XmlIgnoreAttribute]
public bool fromWordArtSpecified { get; public set; }
    [XmlAttributeAttribute]
public ST_TextAnchoringType anchor { get; public set; }
    [XmlIgnoreAttribute]
public bool anchorSpecified { get; public set; }
    [XmlAttributeAttribute]
public bool anchorCtr { get; public set; }
    [XmlIgnoreAttribute]
public bool anchorCtrSpecified { get; public set; }
    [XmlAttributeAttribute]
public bool forceAA { get; public set; }
    [XmlIgnoreAttribute]
public bool forceAASpecified { get; public set; }
    [XmlAttributeAttribute]
[DefaultValueAttribute("False")]
public bool upright { get; public set; }
    [XmlAttributeAttribute]
public bool compatLnSpc { get; public set; }
    [XmlIgnoreAttribute]
public bool compatLnSpcSpecified { get; public set; }
    public static CT_TextBodyProperties Parse(XmlNode node, XmlNamespaceManager namespaceManager);
    internal void Write(StreamWriter sw, string nodeName);
    public CT_PresetTextShape get_prstTxWarp();
    public void set_prstTxWarp(CT_PresetTextShape value);
    public CT_TextNoAutofit get_noAutofit();
    public void set_noAutofit(CT_TextNoAutofit value);
    public CT_TextNormalAutofit get_normAutofit();
    public void set_normAutofit(CT_TextNormalAutofit value);
    public CT_TextShapeAutofit get_spAutoFit();
    public void set_spAutoFit(CT_TextShapeAutofit value);
    public CT_Scene3D get_scene3d();
    public void set_scene3d(CT_Scene3D value);
    public CT_Shape3D get_sp3d();
    public void set_sp3d(CT_Shape3D value);
    public CT_FlatText get_flatTx();
    public void set_flatTx(CT_FlatText value);
    public CT_OfficeArtExtensionList get_extLst();
    public void set_extLst(CT_OfficeArtExtensionList value);
    public int get_rot();
    public void set_rot(int value);
    public bool get_rotSpecified();
    public void set_rotSpecified(bool value);
    public bool get_spcFirstLastPara();
    public void set_spcFirstLastPara(bool value);
    public bool get_spcFirstLastParaSpecified();
    public void set_spcFirstLastParaSpecified(bool value);
    public ST_TextVertOverflowType get_vertOverflow();
    public void set_vertOverflow(ST_TextVertOverflowType value);
    public bool get_vertOverflowSpecified();
    public void set_vertOverflowSpecified(bool value);
    public ST_TextHorzOverflowType get_horzOverflow();
    public void set_horzOverflow(ST_TextHorzOverflowType value);
    public bool get_horzOverflowSpecified();
    public void set_horzOverflowSpecified(bool value);
    public ST_TextVerticalType get_vert();
    public void set_vert(ST_TextVerticalType value);
    public bool get_vertSpecified();
    public void set_vertSpecified(bool value);
    public ST_TextWrappingType get_wrap();
    public void set_wrap(ST_TextWrappingType value);
    public bool get_wrapSpecified();
    public void set_wrapSpecified(bool value);
    public int get_lIns();
    public void set_lIns(int value);
    public bool get_lInsSpecified();
    public void set_lInsSpecified(bool value);
    public int get_tIns();
    public void set_tIns(int value);
    public bool get_tInsSpecified();
    public void set_tInsSpecified(bool value);
    public int get_rIns();
    public void set_rIns(int value);
    public bool get_rInsSpecified();
    public void set_rInsSpecified(bool value);
    public int get_bIns();
    public void set_bIns(int value);
    public bool get_bInsSpecified();
    public void set_bInsSpecified(bool value);
    public int get_numCol();
    public void set_numCol(int value);
    public bool get_numColSpecified();
    public void set_numColSpecified(bool value);
    public int get_spcCol();
    public void set_spcCol(int value);
    public bool get_spcColSpecified();
    public void set_spcColSpecified(bool value);
    public bool get_rtlCol();
    public void set_rtlCol(bool value);
    public bool get_rtlColSpecified();
    public void set_rtlColSpecified(bool value);
    public bool get_fromWordArt();
    public void set_fromWordArt(bool value);
    public bool get_fromWordArtSpecified();
    public void set_fromWordArtSpecified(bool value);
    public ST_TextAnchoringType get_anchor();
    public void set_anchor(ST_TextAnchoringType value);
    public bool get_anchorSpecified();
    public void set_anchorSpecified(bool value);
    public bool get_anchorCtr();
    public void set_anchorCtr(bool value);
    public bool get_anchorCtrSpecified();
    public void set_anchorCtrSpecified(bool value);
    public bool get_forceAA();
    public void set_forceAA(bool value);
    public bool get_forceAASpecified();
    public void set_forceAASpecified(bool value);
    public bool get_upright();
    public void set_upright(bool value);
    public bool get_compatLnSpc();
    public void set_compatLnSpc(bool value);
    public bool get_compatLnSpcSpecified();
    public void set_compatLnSpcSpecified(bool value);
    public void UnsetTIns();
    public void UnsetVertOverflow();
    public void UnsetVert();
    public bool IsSetVert();
    public bool IsSetBIns();
    public bool IsSetLIns();
    public bool IsSetRIns();
    public bool IsSetTIns();
    public void UnsetBIns();
    public void UnsetLIns();
    public void UnsetRIns();
    public bool IsSetSpAutoFit();
    public bool IsSetNoAutofit();
    public bool IsSetNormAutofit();
    public void UnsetSpAutoFit();
    public void UnsetNoAutofit();
    public void UnsetNormAutofit();
    public CT_TextNoAutofit AddNewNoAutofit();
    public CT_TextNormalAutofit AddNewNormAutofit();
    public CT_TextShapeAutofit AddNewSpAutoFit();
    public void UnsetHorzOverflow();
    public bool IsSetHorzOverflow();
    public bool IsSetVertOverflow();
    public bool IsSetAnchor();
    public void UnsetAnchor();
    public bool IsSetWrap();
    public void UnsetWrap();
}
[DebuggerStepThroughAttribute]
[DesignerCategoryAttribute("code")]
[XmlTypeAttribute]
[XmlRootAttribute]
public class NPOI.OpenXmlFormats.Dml.CT_TextBulletColorFollowText : object {
}
[DebuggerStepThroughAttribute]
[DesignerCategoryAttribute("code")]
[XmlTypeAttribute]
[XmlRootAttribute]
public class NPOI.OpenXmlFormats.Dml.CT_TextBulletSizeFollowText : object {
}
[DebuggerStepThroughAttribute]
[DesignerCategoryAttribute("code")]
[XmlTypeAttribute]
[XmlRootAttribute]
public class NPOI.OpenXmlFormats.Dml.CT_TextBulletSizePercent : object {
    private int valField;
    private bool valFieldSpecified;
    [XmlAttributeAttribute]
public int val { get; public set; }
    [XmlIgnoreAttribute]
public bool valSpecified { get; public set; }
    public static CT_TextBulletSizePercent Parse(XmlNode node, XmlNamespaceManager namespaceManager);
    internal void Write(StreamWriter sw, string nodeName);
    public int get_val();
    public void set_val(int value);
    public bool get_valSpecified();
    public void set_valSpecified(bool value);
}
[DebuggerStepThroughAttribute]
[DesignerCategoryAttribute("code")]
[XmlTypeAttribute]
[XmlRootAttribute]
public class NPOI.OpenXmlFormats.Dml.CT_TextBulletSizePoint : object {
    private int valField;
    private bool valFieldSpecified;
    [XmlAttributeAttribute]
public int val { get; public set; }
    [XmlIgnoreAttribute]
public bool valSpecified { get; public set; }
    public static CT_TextBulletSizePoint Parse(XmlNode node, XmlNamespaceManager namespaceManager);
    internal void Write(StreamWriter sw, string nodeName);
    public int get_val();
    public void set_val(int value);
    public bool get_valSpecified();
    public void set_valSpecified(bool value);
}
[DebuggerStepThroughAttribute]
[DesignerCategoryAttribute("code")]
[XmlTypeAttribute]
[XmlRootAttribute]
public class NPOI.OpenXmlFormats.Dml.CT_TextBulletTypefaceFollowText : object {
}
[DebuggerStepThroughAttribute]
[DesignerCategoryAttribute("code")]
[XmlTypeAttribute]
[XmlRootAttribute]
public class NPOI.OpenXmlFormats.Dml.CT_TextCharacterProperties : object {
    private CT_LineProperties lnField;
    private CT_NoFillProperties noFillField;
    private CT_SolidColorFillProperties solidFillField;
    private CT_GradientFillProperties gradFillField;
    private CT_BlipFillProperties blipFillField;
    private CT_PatternFillProperties pattFillField;
    private CT_GroupFillProperties grpFillField;
    private CT_EffectList effectLstField;
    private CT_EffectContainer effectDagField;
    private CT_Color highlightField;
    private CT_TextUnderlineLineFollowText uLnTxField;
    private CT_LineProperties uLnField;
    private CT_TextUnderlineFillFollowText uFillTxField;
    private CT_TextUnderlineFillGroupWrapper uFillField;
    private CT_TextFont latinField;
    private CT_TextFont eaField;
    private CT_TextFont csField;
    private CT_TextFont symField;
    private CT_Hyperlink hlinkClickField;
    private CT_Hyperlink hlinkMouseOverField;
    private CT_OfficeArtExtensionList extLstField;
    private bool kumimojiField;
    private bool kumimojiFieldSpecified;
    private string langField;
    private string altLangField;
    private int szField;
    private bool szFieldSpecified;
    private bool bField;
    private bool bFieldSpecified;
    private bool iField;
    private bool iFieldSpecified;
    private ST_TextUnderlineType uField;
    private bool uFieldSpecified;
    private ST_TextStrikeType strikeField;
    private bool strikeFieldSpecified;
    private int kernField;
    private bool kernFieldSpecified;
    private ST_TextCapsType capField;
    private bool capFieldSpecified;
    private int spcField;
    private bool spcFieldSpecified;
    private bool normalizeHField;
    private bool normalizeHFieldSpecified;
    private int baselineField;
    private bool baselineFieldSpecified;
    private bool noProofField;
    private bool noProofFieldSpecified;
    private bool dirtyField;
    private bool errField;
    private bool smtCleanField;
    private UInt32 smtIdField;
    private string bmkField;
    [XmlElementAttribute]
public CT_LineProperties ln { get; public set; }
    [XmlElementAttribute]
public CT_NoFillProperties noFill { get; public set; }
    [XmlElementAttribute]
public CT_SolidColorFillProperties solidFill { get; public set; }
    [XmlElementAttribute]
public CT_GradientFillProperties gradFill { get; public set; }
    [XmlElementAttribute]
public CT_BlipFillProperties blipFill { get; public set; }
    [XmlElementAttribute]
public CT_PatternFillProperties pattFill { get; public set; }
    [XmlElementAttribute]
public CT_GroupFillProperties grpFill { get; public set; }
    [XmlElementAttribute]
public CT_EffectList effectLst { get; public set; }
    [XmlElementAttribute]
public CT_EffectContainer effectDag { get; public set; }
    [XmlElementAttribute]
public CT_Color highlight { get; public set; }
    [XmlElementAttribute]
public CT_TextUnderlineLineFollowText uLnTx { get; public set; }
    [XmlElementAttribute]
public CT_LineProperties uLn { get; public set; }
    [XmlElementAttribute]
public CT_TextUnderlineFillFollowText uFillTx { get; public set; }
    [XmlElementAttribute]
public CT_TextUnderlineFillGroupWrapper uFill { get; public set; }
    [XmlElementAttribute]
public CT_TextFont latin { get; public set; }
    [XmlElementAttribute]
public CT_TextFont ea { get; public set; }
    [XmlElementAttribute]
public CT_TextFont cs { get; public set; }
    [XmlElementAttribute]
public CT_TextFont sym { get; public set; }
    [XmlElementAttribute]
public CT_Hyperlink hlinkClick { get; public set; }
    [XmlElementAttribute]
public CT_Hyperlink hlinkMouseOver { get; public set; }
    [XmlElementAttribute]
public CT_OfficeArtExtensionList extLst { get; public set; }
    [XmlAttributeAttribute]
public bool kumimoji { get; public set; }
    [XmlIgnoreAttribute]
public bool kumimojiSpecified { get; public set; }
    [XmlAttributeAttribute]
public string lang { get; public set; }
    [XmlAttributeAttribute]
public string altLang { get; public set; }
    [XmlAttributeAttribute]
public int sz { get; public set; }
    [XmlIgnoreAttribute]
public bool szSpecified { get; public set; }
    [XmlAttributeAttribute]
public bool b { get; public set; }
    [XmlIgnoreAttribute]
public bool bSpecified { get; public set; }
    [XmlAttributeAttribute]
public bool i { get; public set; }
    [XmlIgnoreAttribute]
public bool iSpecified { get; public set; }
    [XmlAttributeAttribute]
public ST_TextUnderlineType u { get; public set; }
    [XmlIgnoreAttribute]
public bool uSpecified { get; public set; }
    [XmlAttributeAttribute]
public ST_TextStrikeType strike { get; public set; }
    [XmlIgnoreAttribute]
public bool strikeSpecified { get; public set; }
    [XmlAttributeAttribute]
public int kern { get; public set; }
    [XmlIgnoreAttribute]
public bool kernSpecified { get; public set; }
    [XmlAttributeAttribute]
public ST_TextCapsType cap { get; public set; }
    [XmlIgnoreAttribute]
public bool capSpecified { get; public set; }
    [XmlAttributeAttribute]
public int spc { get; public set; }
    [XmlIgnoreAttribute]
public bool spcSpecified { get; public set; }
    [XmlAttributeAttribute]
public bool normalizeH { get; public set; }
    [XmlIgnoreAttribute]
public bool normalizeHSpecified { get; public set; }
    [XmlAttributeAttribute]
public int baseline { get; public set; }
    [XmlIgnoreAttribute]
public bool baselineSpecified { get; public set; }
    [XmlAttributeAttribute]
public bool noProof { get; public set; }
    [XmlIgnoreAttribute]
public bool noProofSpecified { get; public set; }
    [XmlAttributeAttribute]
[DefaultValueAttribute("True")]
public bool dirty { get; public set; }
    [XmlAttributeAttribute]
[DefaultValueAttribute("False")]
public bool err { get; public set; }
    [XmlAttributeAttribute]
[DefaultValueAttribute("True")]
public bool smtClean { get; public set; }
    [XmlAttributeAttribute]
[DefaultValueAttribute("System.UInt32", "0")]
public UInt32 smtId { get; public set; }
    [XmlAttributeAttribute]
public string bmk { get; public set; }
    public static CT_TextCharacterProperties Parse(XmlNode node, XmlNamespaceManager namespaceManager);
    internal void Write(StreamWriter sw, string nodeName);
    public CT_LineProperties get_ln();
    public void set_ln(CT_LineProperties value);
    public CT_NoFillProperties get_noFill();
    public void set_noFill(CT_NoFillProperties value);
    public CT_SolidColorFillProperties get_solidFill();
    public void set_solidFill(CT_SolidColorFillProperties value);
    public CT_GradientFillProperties get_gradFill();
    public void set_gradFill(CT_GradientFillProperties value);
    public CT_BlipFillProperties get_blipFill();
    public void set_blipFill(CT_BlipFillProperties value);
    public CT_PatternFillProperties get_pattFill();
    public void set_pattFill(CT_PatternFillProperties value);
    public CT_GroupFillProperties get_grpFill();
    public void set_grpFill(CT_GroupFillProperties value);
    public CT_EffectList get_effectLst();
    public void set_effectLst(CT_EffectList value);
    public CT_EffectContainer get_effectDag();
    public void set_effectDag(CT_EffectContainer value);
    public CT_Color get_highlight();
    public void set_highlight(CT_Color value);
    public CT_TextUnderlineLineFollowText get_uLnTx();
    public void set_uLnTx(CT_TextUnderlineLineFollowText value);
    public CT_LineProperties get_uLn();
    public void set_uLn(CT_LineProperties value);
    public CT_TextUnderlineFillFollowText get_uFillTx();
    public void set_uFillTx(CT_TextUnderlineFillFollowText value);
    public CT_TextUnderlineFillGroupWrapper get_uFill();
    public void set_uFill(CT_TextUnderlineFillGroupWrapper value);
    public CT_TextFont get_latin();
    public void set_latin(CT_TextFont value);
    public CT_TextFont get_ea();
    public void set_ea(CT_TextFont value);
    public CT_TextFont get_cs();
    public void set_cs(CT_TextFont value);
    public CT_TextFont get_sym();
    public void set_sym(CT_TextFont value);
    public CT_Hyperlink get_hlinkClick();
    public void set_hlinkClick(CT_Hyperlink value);
    public CT_Hyperlink get_hlinkMouseOver();
    public void set_hlinkMouseOver(CT_Hyperlink value);
    public CT_OfficeArtExtensionList get_extLst();
    public void set_extLst(CT_OfficeArtExtensionList value);
    public bool get_kumimoji();
    public void set_kumimoji(bool value);
    public bool get_kumimojiSpecified();
    public void set_kumimojiSpecified(bool value);
    public string get_lang();
    public void set_lang(string value);
    public string get_altLang();
    public void set_altLang(string value);
    public int get_sz();
    public void set_sz(int value);
    public bool get_szSpecified();
    public void set_szSpecified(bool value);
    public bool get_b();
    public void set_b(bool value);
    public bool get_bSpecified();
    public void set_bSpecified(bool value);
    public bool get_i();
    public void set_i(bool value);
    public bool get_iSpecified();
    public void set_iSpecified(bool value);
    public ST_TextUnderlineType get_u();
    public void set_u(ST_TextUnderlineType value);
    public bool get_uSpecified();
    public void set_uSpecified(bool value);
    public ST_TextStrikeType get_strike();
    public void set_strike(ST_TextStrikeType value);
    public bool get_strikeSpecified();
    public void set_strikeSpecified(bool value);
    public int get_kern();
    public void set_kern(int value);
    public bool get_kernSpecified();
    public void set_kernSpecified(bool value);
    public ST_TextCapsType get_cap();
    public void set_cap(ST_TextCapsType value);
    public bool get_capSpecified();
    public void set_capSpecified(bool value);
    public int get_spc();
    public void set_spc(int value);
    public bool get_spcSpecified();
    public void set_spcSpecified(bool value);
    public bool get_normalizeH();
    public void set_normalizeH(bool value);
    public bool get_normalizeHSpecified();
    public void set_normalizeHSpecified(bool value);
    public int get_baseline();
    public void set_baseline(int value);
    public bool get_baselineSpecified();
    public void set_baselineSpecified(bool value);
    public bool get_noProof();
    public void set_noProof(bool value);
    public bool get_noProofSpecified();
    public void set_noProofSpecified(bool value);
    public bool get_dirty();
    public void set_dirty(bool value);
    public bool get_err();
    public void set_err(bool value);
    public bool get_smtClean();
    public void set_smtClean(bool value);
    public UInt32 get_smtId();
    public void set_smtId(UInt32 value);
    public string get_bmk();
    public void set_bmk(string value);
    public CT_TextFont AddNewLatin();
    public bool IsSetSolidFill();
    public CT_SolidColorFillProperties AddNewSolidFill();
    public bool IsSetStrike();
    public bool IsSetBaseline();
    public bool IsSetB();
    public bool IsSetI();
    public bool IsSetU();
    public bool IsSetCap();
    public bool IsSetSz();
    public void UnsetSz();
    public bool IsSetSpc();
    public void UnsetSpc();
    public bool IsSetLatin();
    public void UnsetLatin();
    public bool IsSetCs();
    public void UnsetCs();
    public bool IsSetSym();
    public void UnsetSym();
    public CT_TextFont AddNewSym();
}
[DebuggerStepThroughAttribute]
[DesignerCategoryAttribute("code")]
[XmlTypeAttribute]
[XmlRootAttribute]
public class NPOI.OpenXmlFormats.Dml.CT_TextCharBullet : object {
    private string charField;
    [XmlAttributeAttribute]
public string char { get; public set; }
    public static CT_TextCharBullet Parse(XmlNode node, XmlNamespaceManager namespaceManager);
    internal void Write(StreamWriter sw, string nodeName);
    public string get_char();
    public void set_char(string value);
}
[DebuggerStepThroughAttribute]
[DesignerCategoryAttribute("code")]
[XmlTypeAttribute]
[XmlRootAttribute]
public class NPOI.OpenXmlFormats.Dml.CT_TextField : object {
    private CT_TextCharacterProperties rPrField;
    private CT_TextParagraphProperties pPrField;
    private string tField;
    private string idField;
    private string typeField;
    [XmlElementAttribute]
public CT_TextCharacterProperties rPr { get; public set; }
    [XmlElementAttribute]
public CT_TextParagraphProperties pPr { get; public set; }
    [XmlElementAttribute]
public string t { get; public set; }
    [XmlAttributeAttribute]
public string id { get; public set; }
    [XmlAttributeAttribute]
public string type { get; public set; }
    public static CT_TextField Parse(XmlNode node, XmlNamespaceManager namespaceManager);
    internal void Write(StreamWriter sw, string nodeName);
    public CT_TextCharacterProperties get_rPr();
    public void set_rPr(CT_TextCharacterProperties value);
    public CT_TextParagraphProperties get_pPr();
    public void set_pPr(CT_TextParagraphProperties value);
    public string get_t();
    public void set_t(string value);
    public string get_id();
    public void set_id(string value);
    public string get_type();
    public void set_type(string value);
}
[DebuggerStepThroughAttribute]
[DesignerCategoryAttribute("code")]
[XmlTypeAttribute]
[XmlRootAttribute]
public class NPOI.OpenXmlFormats.Dml.CT_TextFont : object {
    private string typefaceField;
    private Byte[] panoseField;
    private sbyte pitchFamilyField;
    private sbyte charsetField;
    [XmlAttributeAttribute]
public string typeface { get; public set; }
    [XmlAttributeAttribute]
public Byte[] panose { get; public set; }
    [XmlAttributeAttribute]
[DefaultValueAttribute("System.SByte", "0")]
public sbyte pitchFamily { get; public set; }
    [XmlAttributeAttribute]
[DefaultValueAttribute("System.SByte", "1")]
public sbyte charset { get; public set; }
    public static CT_TextFont Parse(XmlNode node, XmlNamespaceManager namespaceManager);
    internal void Write(StreamWriter sw, string nodeName);
    public string get_typeface();
    public void set_typeface(string value);
    public Byte[] get_panose();
    public void set_panose(Byte[] value);
    public sbyte get_pitchFamily();
    public void set_pitchFamily(sbyte value);
    public sbyte get_charset();
    public void set_charset(sbyte value);
}
[DebuggerStepThroughAttribute]
[DesignerCategoryAttribute("code")]
[XmlTypeAttribute]
[XmlRootAttribute]
public class NPOI.OpenXmlFormats.Dml.CT_TextLineBreak : object {
    private CT_TextCharacterProperties rPrField;
    [XmlElementAttribute]
public CT_TextCharacterProperties rPr { get; public set; }
    public static CT_TextLineBreak Parse(XmlNode node, XmlNamespaceManager namespaceManager);
    internal void Write(StreamWriter sw, string nodeName);
    public CT_TextCharacterProperties get_rPr();
    public void set_rPr(CT_TextCharacterProperties value);
    public CT_TextCharacterProperties AddNewRPr();
}
[DesignerCategoryAttribute("code")]
[XmlTypeAttribute]
[XmlRootAttribute]
public class NPOI.OpenXmlFormats.Dml.CT_TextListStyle : object {
    private CT_TextParagraphProperties defPPrField;
    private CT_TextParagraphProperties lvl1pPrField;
    private CT_TextParagraphProperties lvl2pPrField;
    private CT_TextParagraphProperties lvl3pPrField;
    private CT_TextParagraphProperties lvl4pPrField;
    private CT_TextParagraphProperties lvl5pPrField;
    private CT_TextParagraphProperties lvl6pPrField;
    private CT_TextParagraphProperties lvl7pPrField;
    private CT_TextParagraphProperties lvl8pPrField;
    private CT_TextParagraphProperties lvl9pPrField;
    private CT_OfficeArtExtensionList extLstField;
    public CT_TextParagraphProperties defPPr { get; public set; }
    public CT_TextParagraphProperties lvl1pPr { get; public set; }
    public CT_TextParagraphProperties lvl2pPr { get; public set; }
    public CT_TextParagraphProperties lvl3pPr { get; public set; }
    public CT_TextParagraphProperties lvl4pPr { get; public set; }
    public CT_TextParagraphProperties lvl5pPr { get; public set; }
    public CT_TextParagraphProperties lvl6pPr { get; public set; }
    public CT_TextParagraphProperties lvl7pPr { get; public set; }
    public CT_TextParagraphProperties lvl8pPr { get; public set; }
    public CT_TextParagraphProperties lvl9pPr { get; public set; }
    public CT_OfficeArtExtensionList extLst { get; public set; }
    public static CT_TextListStyle Parse(XmlNode node, XmlNamespaceManager namespaceManager);
    internal void Write(StreamWriter sw, string nodeName);
    public CT_TextParagraphProperties get_defPPr();
    public void set_defPPr(CT_TextParagraphProperties value);
    public CT_TextParagraphProperties get_lvl1pPr();
    public void set_lvl1pPr(CT_TextParagraphProperties value);
    public CT_TextParagraphProperties get_lvl2pPr();
    public void set_lvl2pPr(CT_TextParagraphProperties value);
    public CT_TextParagraphProperties get_lvl3pPr();
    public void set_lvl3pPr(CT_TextParagraphProperties value);
    public CT_TextParagraphProperties get_lvl4pPr();
    public void set_lvl4pPr(CT_TextParagraphProperties value);
    public CT_TextParagraphProperties get_lvl5pPr();
    public void set_lvl5pPr(CT_TextParagraphProperties value);
    public CT_TextParagraphProperties get_lvl6pPr();
    public void set_lvl6pPr(CT_TextParagraphProperties value);
    public CT_TextParagraphProperties get_lvl7pPr();
    public void set_lvl7pPr(CT_TextParagraphProperties value);
    public CT_TextParagraphProperties get_lvl8pPr();
    public void set_lvl8pPr(CT_TextParagraphProperties value);
    public CT_TextParagraphProperties get_lvl9pPr();
    public void set_lvl9pPr(CT_TextParagraphProperties value);
    public CT_OfficeArtExtensionList get_extLst();
    public void set_extLst(CT_OfficeArtExtensionList value);
}
[DesignerCategoryAttribute("code")]
[XmlTypeAttribute]
[XmlRootAttribute]
public class NPOI.OpenXmlFormats.Dml.CT_TextNoAutofit : object {
}
[DebuggerStepThroughAttribute]
[DesignerCategoryAttribute("code")]
[XmlTypeAttribute]
[XmlRootAttribute]
public class NPOI.OpenXmlFormats.Dml.CT_TextNoBullet : object {
}
[DesignerCategoryAttribute("code")]
[XmlTypeAttribute]
[XmlRootAttribute]
public class NPOI.OpenXmlFormats.Dml.CT_TextNormalAutofit : object {
    private int fontScaleField;
    private int lnSpcReductionField;
    [XmlAttributeAttribute]
[DefaultValueAttribute("100000")]
public int fontScale { get; public set; }
    [XmlAttributeAttribute]
[DefaultValueAttribute("0")]
public int lnSpcReduction { get; public set; }
    public static CT_TextNormalAutofit Parse(XmlNode node, XmlNamespaceManager namespaceManager);
    internal void Write(StreamWriter sw, string nodeName);
    public int get_fontScale();
    public void set_fontScale(int value);
    public int get_lnSpcReduction();
    public void set_lnSpcReduction(int value);
}
[DebuggerStepThroughAttribute]
[DesignerCategoryAttribute("code")]
[XmlTypeAttribute]
[XmlRootAttribute]
public class NPOI.OpenXmlFormats.Dml.CT_TextParagraph : object {
    private CT_TextParagraphProperties pPrField;
    private List`1<CT_RegularTextRun> rField;
    private List`1<CT_TextLineBreak> brField;
    private List`1<CT_TextField> fldField;
    private List`1<object> itemsField;
    private CT_TextCharacterProperties endParaRPrField;
    [XmlIgnoreAttribute]
public List`1<object> items { get; public set; }
    public CT_TextParagraphProperties pPr { get; public set; }
    [XmlElementAttribute("r")]
public List`1<CT_RegularTextRun> r { get; public set; }
    [XmlElementAttribute("br")]
public List`1<CT_TextLineBreak> br { get; public set; }
    [XmlElementAttribute("fld")]
public List`1<CT_TextField> fld { get; public set; }
    public CT_TextCharacterProperties endParaRPr { get; public set; }
    public static CT_TextParagraph Parse(XmlNode node, XmlNamespaceManager namespaceManager);
    internal void Write(StreamWriter sw, string nodeName);
    public List`1<object> get_items();
    public void set_items(List`1<object> value);
    public CT_RegularTextRun AddNewR();
    public CT_TextParagraphProperties AddNewPPr();
    public CT_TextCharacterProperties AddNewEndParaRPr();
    public CT_TextParagraphProperties get_pPr();
    public void set_pPr(CT_TextParagraphProperties value);
    public List`1<CT_RegularTextRun> get_r();
    public void set_r(List`1<CT_RegularTextRun> value);
    public List`1<CT_TextLineBreak> get_br();
    public void set_br(List`1<CT_TextLineBreak> value);
    public List`1<CT_TextField> get_fld();
    public void set_fld(List`1<CT_TextField> value);
    public CT_TextCharacterProperties get_endParaRPr();
    public void set_endParaRPr(CT_TextCharacterProperties value);
    public int SizeOfRArray();
    public bool IsSetPPr();
    public CT_TextLineBreak AddNewBr();
    public CT_RegularTextRun GetRArray(int v);
    public int SizeOfFldArray();
    public CT_TextField GetFldArray(int v);
}
[DebuggerStepThroughAttribute]
[DesignerCategoryAttribute("code")]
[XmlTypeAttribute]
[XmlRootAttribute]
public class NPOI.OpenXmlFormats.Dml.CT_TextParagraphProperties : object {
    private CT_TextSpacing lnSpcField;
    private CT_TextSpacing spcBefField;
    private CT_TextSpacing spcAftField;
    private CT_TextBulletColorFollowText buClrTxField;
    private CT_Color buClrField;
    private CT_TextBulletSizeFollowText buSzTxField;
    private CT_TextBulletSizePercent buSzPctField;
    private CT_TextBulletSizePoint buSzPtsField;
    private CT_TextBulletTypefaceFollowText buFontTxField;
    private CT_TextFont buFontField;
    private CT_TextNoBullet buNoneField;
    private CT_TextAutonumberBullet buAutoNumField;
    private CT_TextCharBullet buCharField;
    private CT_TextBlipBullet buBlipField;
    private CT_TextTabStopList tabLstField;
    private CT_TextCharacterProperties defRPrField;
    private CT_OfficeArtExtensionList extLstField;
    private int marLField;
    private bool marLFieldSpecified;
    private int marRField;
    private bool marRFieldSpecified;
    private int lvlField;
    private bool lvlFieldSpecified;
    private int indentField;
    private bool indentFieldSpecified;
    private ST_TextAlignType algnField;
    private bool algnFieldSpecified;
    private int defTabSzField;
    private bool defTabSzFieldSpecified;
    private bool rtlField;
    private bool rtlFieldSpecified;
    private bool eaLnBrkField;
    private bool eaLnBrkFieldSpecified;
    private ST_TextFontAlignType fontAlgnField;
    private bool fontAlgnFieldSpecified;
    private bool latinLnBrkField;
    private bool latinLnBrkFieldSpecified;
    private bool hangingPunctField;
    private bool hangingPunctFieldSpecified;
    [XmlElementAttribute]
public CT_TextSpacing lnSpc { get; public set; }
    [XmlElementAttribute]
public CT_TextSpacing spcBef { get; public set; }
    [XmlElementAttribute]
public CT_TextSpacing spcAft { get; public set; }
    [XmlElementAttribute]
public CT_TextBulletColorFollowText buClrTx { get; public set; }
    [XmlElementAttribute]
public CT_Color buClr { get; public set; }
    [XmlElementAttribute]
public CT_TextBulletSizeFollowText buSzTx { get; public set; }
    [XmlElementAttribute]
public CT_TextBulletSizePercent buSzPct { get; public set; }
    [XmlElementAttribute]
public CT_TextBulletSizePoint buSzPts { get; public set; }
    [XmlElementAttribute]
public CT_TextBulletTypefaceFollowText buFontTx { get; public set; }
    [XmlElementAttribute]
public CT_TextFont buFont { get; public set; }
    [XmlElementAttribute]
public CT_TextNoBullet buNone { get; public set; }
    [XmlElementAttribute]
public CT_TextAutonumberBullet buAutoNum { get; public set; }
    [XmlElementAttribute]
public CT_TextCharBullet buChar { get; public set; }
    [XmlElementAttribute]
public CT_TextBlipBullet buBlip { get; public set; }
    [XmlElementAttribute]
public CT_TextTabStopList tabLst { get; public set; }
    [XmlElementAttribute]
public CT_TextCharacterProperties defRPr { get; public set; }
    [XmlElementAttribute]
public CT_OfficeArtExtensionList extLst { get; public set; }
    [XmlAttributeAttribute]
public int marL { get; public set; }
    [XmlIgnoreAttribute]
public bool marLSpecified { get; public set; }
    [XmlAttributeAttribute]
public int marR { get; public set; }
    [XmlIgnoreAttribute]
public bool marRSpecified { get; public set; }
    [XmlAttributeAttribute]
public int lvl { get; public set; }
    [XmlAttributeAttribute]
public int indent { get; public set; }
    [XmlIgnoreAttribute]
public bool indentSpecified { get; public set; }
    [XmlAttributeAttribute]
public ST_TextAlignType algn { get; public set; }
    [XmlIgnoreAttribute]
public bool algnSpecified { get; public set; }
    [XmlAttributeAttribute]
public int defTabSz { get; public set; }
    [XmlIgnoreAttribute]
public bool defTabSzSpecified { get; public set; }
    [XmlAttributeAttribute]
public bool rtl { get; public set; }
    [XmlIgnoreAttribute]
public bool rtlSpecified { get; public set; }
    [XmlAttributeAttribute]
public bool eaLnBrk { get; public set; }
    [XmlIgnoreAttribute]
public bool eaLnBrkSpecified { get; public set; }
    [XmlAttributeAttribute]
public ST_TextFontAlignType fontAlgn { get; public set; }
    [XmlIgnoreAttribute]
public bool fontAlgnSpecified { get; public set; }
    [XmlAttributeAttribute]
public bool latinLnBrk { get; public set; }
    [XmlIgnoreAttribute]
public bool latinLnBrkSpecified { get; public set; }
    [XmlAttributeAttribute]
public bool hangingPunct { get; public set; }
    [XmlIgnoreAttribute]
public bool hangingPunctSpecified { get; public set; }
    public static CT_TextParagraphProperties Parse(XmlNode node, XmlNamespaceManager namespaceManager);
    internal void Write(StreamWriter sw, string nodeName);
    public CT_TextSpacing get_lnSpc();
    public void set_lnSpc(CT_TextSpacing value);
    public CT_TextSpacing get_spcBef();
    public void set_spcBef(CT_TextSpacing value);
    public CT_TextSpacing get_spcAft();
    public void set_spcAft(CT_TextSpacing value);
    public CT_TextBulletColorFollowText get_buClrTx();
    public void set_buClrTx(CT_TextBulletColorFollowText value);
    public CT_Color get_buClr();
    public void set_buClr(CT_Color value);
    public CT_TextBulletSizeFollowText get_buSzTx();
    public void set_buSzTx(CT_TextBulletSizeFollowText value);
    public CT_TextBulletSizePercent get_buSzPct();
    public void set_buSzPct(CT_TextBulletSizePercent value);
    public CT_TextBulletSizePoint get_buSzPts();
    public void set_buSzPts(CT_TextBulletSizePoint value);
    public CT_TextBulletTypefaceFollowText get_buFontTx();
    public void set_buFontTx(CT_TextBulletTypefaceFollowText value);
    public CT_TextFont get_buFont();
    public void set_buFont(CT_TextFont value);
    public CT_TextNoBullet get_buNone();
    public void set_buNone(CT_TextNoBullet value);
    public CT_TextAutonumberBullet get_buAutoNum();
    public void set_buAutoNum(CT_TextAutonumberBullet value);
    public CT_TextCharBullet get_buChar();
    public void set_buChar(CT_TextCharBullet value);
    public CT_TextBlipBullet get_buBlip();
    public void set_buBlip(CT_TextBlipBullet value);
    public CT_TextTabStopList get_tabLst();
    public void set_tabLst(CT_TextTabStopList value);
    public CT_TextCharacterProperties get_defRPr();
    public void set_defRPr(CT_TextCharacterProperties value);
    public CT_OfficeArtExtensionList get_extLst();
    public void set_extLst(CT_OfficeArtExtensionList value);
    public int get_marL();
    public void set_marL(int value);
    public bool get_marLSpecified();
    public void set_marLSpecified(bool value);
    public int get_marR();
    public void set_marR(int value);
    public bool get_marRSpecified();
    public void set_marRSpecified(bool value);
    public int get_lvl();
    public void set_lvl(int value);
    public int get_indent();
    public void set_indent(int value);
    public bool get_indentSpecified();
    public void set_indentSpecified(bool value);
    public ST_TextAlignType get_algn();
    public void set_algn(ST_TextAlignType value);
    public bool get_algnSpecified();
    public void set_algnSpecified(bool value);
    public int get_defTabSz();
    public void set_defTabSz(int value);
    public bool get_defTabSzSpecified();
    public void set_defTabSzSpecified(bool value);
    public bool get_rtl();
    public void set_rtl(bool value);
    public bool get_rtlSpecified();
    public void set_rtlSpecified(bool value);
    public bool get_eaLnBrk();
    public void set_eaLnBrk(bool value);
    public bool get_eaLnBrkSpecified();
    public void set_eaLnBrkSpecified(bool value);
    public ST_TextFontAlignType get_fontAlgn();
    public void set_fontAlgn(ST_TextFontAlignType value);
    public bool get_fontAlgnSpecified();
    public void set_fontAlgnSpecified(bool value);
    public bool get_latinLnBrk();
    public void set_latinLnBrk(bool value);
    public bool get_latinLnBrkSpecified();
    public void set_latinLnBrkSpecified(bool value);
    public bool get_hangingPunct();
    public void set_hangingPunct(bool value);
    public bool get_hangingPunctSpecified();
    public void set_hangingPunctSpecified(bool value);
    public bool IsSetAlgn();
    public bool IsSetBuNone();
    public bool IsSetBuFont();
    public bool IsSetBuChar();
    public bool IsSetBuAutoNum();
    public void AddNewBuNone();
    public bool IsSetBuBlip();
    public bool IsSetBuClr();
    public bool IsSetBuClrTx();
    public bool IsSetBuFontTx();
    public bool IsSetBuSzPct();
    public bool IsSetBuSzPts();
    public bool IsSetBuSzTx();
    public CT_TextCharBullet AddNewBuChar();
    public CT_TextFont AddNewBuFont();
    public void UnsetBuNone();
    public void UnsetBuSzTx();
    public void UnsetBuSzPts();
    public void UnsetBuAutoNum();
    public void UnsetBuBlip();
    public void UnsetBuChar();
    public void UnsetBuClr();
    public void UnsetBuClrTx();
    public void UnsetBuFont();
    public void UnsetBuFontTx();
    public void UnsetBuSzPct();
    public void UnsetAlgn();
    public bool IsSetFontAlgn();
    public void UnsetFontAlgn();
    public CT_Color AddNewBuClr();
    public CT_TextBulletSizePercent AddNewBuSzPct();
    public CT_TextBulletSizePoint AddNewBuSzPts();
    public bool IsSetIndent();
    public void UnsetIndent();
    public bool IsSetMarL();
    public void UnsetMarL();
    public bool IsSetMarR();
    public void UnsetMarR();
    public bool IsSetDefTabSz();
    public bool IsSetTabLst();
    public CT_TextTabStopList AddNewTabLst();
    public bool IsSetLnSpc();
    public bool IsSetSpcBef();
    public bool IsSetSpcAft();
    public CT_TextAutonumberBullet AddNewBuAutoNum();
}
[DesignerCategoryAttribute("code")]
[XmlTypeAttribute]
[XmlRootAttribute]
public class NPOI.OpenXmlFormats.Dml.CT_TextShapeAutofit : object {
}
[DebuggerStepThroughAttribute]
[DesignerCategoryAttribute("code")]
[XmlTypeAttribute]
[XmlRootAttribute]
public class NPOI.OpenXmlFormats.Dml.CT_TextSpacing : object {
    private CT_TextSpacingPercent spcPctField;
    private CT_TextSpacingPoint spcPtsField;
    public CT_TextSpacingPercent spcPct { get; public set; }
    public CT_TextSpacingPoint spcPts { get; public set; }
    public static CT_TextSpacing Parse(XmlNode node, XmlNamespaceManager namespaceManager);
    internal void Write(StreamWriter sw, string nodeName);
    public CT_TextSpacingPercent get_spcPct();
    public void set_spcPct(CT_TextSpacingPercent value);
    public CT_TextSpacingPoint get_spcPts();
    public void set_spcPts(CT_TextSpacingPoint value);
    public CT_TextSpacingPercent AddNewSpcPct();
    public CT_TextSpacingPoint AddNewSpcPts();
    public bool IsSetSpcPct();
    public bool IsSetSpcPts();
}
[DebuggerStepThroughAttribute]
[DesignerCategoryAttribute("code")]
[XmlTypeAttribute]
[XmlRootAttribute]
public class NPOI.OpenXmlFormats.Dml.CT_TextSpacingPercent : object {
    private int valField;
    [XmlAttributeAttribute]
public int val { get; public set; }
    public static CT_TextSpacingPercent Parse(XmlNode node, XmlNamespaceManager namespaceManager);
    internal void Write(StreamWriter sw, string nodeName);
    public int get_val();
    public void set_val(int value);
}
[DebuggerStepThroughAttribute]
[DesignerCategoryAttribute("code")]
[XmlTypeAttribute]
[XmlRootAttribute]
public class NPOI.OpenXmlFormats.Dml.CT_TextSpacingPoint : object {
    private int valField;
    [XmlAttributeAttribute]
public int val { get; public set; }
    public static CT_TextSpacingPoint Parse(XmlNode node, XmlNamespaceManager namespaceManager);
    internal void Write(StreamWriter sw, string nodeName);
    public int get_val();
    public void set_val(int value);
}
[DebuggerStepThroughAttribute]
[DesignerCategoryAttribute("code")]
[XmlTypeAttribute]
[XmlRootAttribute]
public class NPOI.OpenXmlFormats.Dml.CT_TextTabStop : object {
    private int posField;
    private bool posFieldSpecified;
    private ST_TextTabAlignType algnField;
    private bool algnFieldSpecified;
    [XmlAttributeAttribute]
public int pos { get; public set; }
    [XmlIgnoreAttribute]
public bool posSpecified { get; public set; }
    [XmlAttributeAttribute]
public ST_TextTabAlignType algn { get; public set; }
    [XmlIgnoreAttribute]
public bool algnSpecified { get; public set; }
    public static CT_TextTabStop Parse(XmlNode node, XmlNamespaceManager namespaceManager);
    internal void Write(StreamWriter sw, string nodeName);
    public int get_pos();
    public void set_pos(int value);
    public bool get_posSpecified();
    public void set_posSpecified(bool value);
    public ST_TextTabAlignType get_algn();
    public void set_algn(ST_TextTabAlignType value);
    public bool get_algnSpecified();
    public void set_algnSpecified(bool value);
}
[DebuggerStepThroughAttribute]
[DesignerCategoryAttribute("code")]
[XmlTypeAttribute]
[XmlRootAttribute]
public class NPOI.OpenXmlFormats.Dml.CT_TextTabStopList : object {
    private List`1<CT_TextTabStop> tabField;
    [XmlElementAttribute("tab")]
public List`1<CT_TextTabStop> tab { get; public set; }
    public List`1<CT_TextTabStop> get_tab();
    public void set_tab(List`1<CT_TextTabStop> value);
    internal void Write(StreamWriter sw, string p);
    internal static CT_TextTabStopList Parse(XmlNode node, XmlNamespaceManager namespaceManager);
    public CT_TextTabStop AddNewTab();
    public int SizeOfTabArray();
    public CT_TextTabStop GetTabArray(int idx);
}
[DebuggerStepThroughAttribute]
[DesignerCategoryAttribute("code")]
[XmlTypeAttribute]
[XmlRootAttribute]
public class NPOI.OpenXmlFormats.Dml.CT_TextUnderlineFillFollowText : object {
}
[DebuggerStepThroughAttribute]
[DesignerCategoryAttribute("code")]
[XmlTypeAttribute]
[XmlRootAttribute]
public class NPOI.OpenXmlFormats.Dml.CT_TextUnderlineFillGroupWrapper : object {
    private CT_BlipFillProperties blipFillField;
    private CT_GroupFillProperties grpFillField;
    private CT_NoFillProperties noFillField;
    private CT_SolidColorFillProperties solidFillField;
    private CT_GradientFillProperties gradFillField;
    private CT_PatternFillProperties pattFillField;
    [XmlElementAttribute]
public CT_NoFillProperties noFill { get; public set; }
    [XmlElementAttribute]
public CT_SolidColorFillProperties solidFill { get; public set; }
    [XmlElementAttribute]
public CT_GradientFillProperties gradFill { get; public set; }
    [XmlElementAttribute]
public CT_BlipFillProperties blipFill { get; public set; }
    [XmlElementAttribute]
public CT_PatternFillProperties pattFill { get; public set; }
    [XmlElementAttribute]
public CT_GroupFillProperties grpFill { get; public set; }
    public static CT_TextUnderlineFillGroupWrapper Parse(XmlNode node, XmlNamespaceManager namespaceManager);
    internal void Write(StreamWriter sw, string nodeName);
    public CT_NoFillProperties get_noFill();
    public void set_noFill(CT_NoFillProperties value);
    public CT_SolidColorFillProperties get_solidFill();
    public void set_solidFill(CT_SolidColorFillProperties value);
    public CT_GradientFillProperties get_gradFill();
    public void set_gradFill(CT_GradientFillProperties value);
    public CT_BlipFillProperties get_blipFill();
    public void set_blipFill(CT_BlipFillProperties value);
    public CT_PatternFillProperties get_pattFill();
    public void set_pattFill(CT_PatternFillProperties value);
    public CT_GroupFillProperties get_grpFill();
    public void set_grpFill(CT_GroupFillProperties value);
}
[DebuggerStepThroughAttribute]
[DesignerCategoryAttribute("code")]
[XmlTypeAttribute]
[XmlRootAttribute]
public class NPOI.OpenXmlFormats.Dml.CT_TextUnderlineLineFollowText : object {
}
[DebuggerStepThroughAttribute]
[DesignerCategoryAttribute("code")]
[XmlTypeAttribute]
[XmlRootAttribute]
public class NPOI.OpenXmlFormats.Dml.CT_ThemeableLineStyle : object {
    private object itemField;
    [XmlElementAttribute("ln", "NPOI.OpenXmlFormats.Dml.CT_LineProperties")]
[XmlElementAttribute("lnRef", "NPOI.OpenXmlFormats.Dml.CT_StyleMatrixReference")]
public object Item { get; public set; }
    public object get_Item();
    public void set_Item(object value);
}
[XmlTypeAttribute]
[XmlRootAttribute]
public class NPOI.OpenXmlFormats.Dml.CT_TileInfoProperties : object {
    private long txField;
    private bool txFieldSpecified;
    private long tyField;
    private bool tyFieldSpecified;
    private int sxField;
    private bool sxFieldSpecified;
    private int syField;
    private bool syFieldSpecified;
    private ST_TileFlipMode flipField;
    private bool flipFieldSpecified;
    private ST_RectAlignment algnField;
    private bool algnFieldSpecified;
    [XmlAttributeAttribute]
public long tx { get; public set; }
    [XmlIgnoreAttribute]
public bool txSpecified { get; public set; }
    [XmlAttributeAttribute]
public long ty { get; public set; }
    [XmlIgnoreAttribute]
public bool tySpecified { get; public set; }
    [XmlAttributeAttribute]
public int sx { get; public set; }
    [XmlIgnoreAttribute]
public bool sxSpecified { get; public set; }
    [XmlAttributeAttribute]
public int sy { get; public set; }
    [XmlIgnoreAttribute]
public bool sySpecified { get; public set; }
    [XmlAttributeAttribute]
public ST_TileFlipMode flip { get; public set; }
    [XmlIgnoreAttribute]
public bool flipSpecified { get; public set; }
    [XmlAttributeAttribute]
public ST_RectAlignment algn { get; public set; }
    [XmlIgnoreAttribute]
public bool algnSpecified { get; public set; }
    public static CT_TileInfoProperties Parse(XmlNode node, XmlNamespaceManager namespaceManager);
    internal void Write(StreamWriter sw, string nodeName);
    public long get_tx();
    public void set_tx(long value);
    public bool get_txSpecified();
    public void set_txSpecified(bool value);
    public long get_ty();
    public void set_ty(long value);
    public bool get_tySpecified();
    public void set_tySpecified(bool value);
    public int get_sx();
    public void set_sx(int value);
    public bool get_sxSpecified();
    public void set_sxSpecified(bool value);
    public int get_sy();
    public void set_sy(int value);
    public bool get_sySpecified();
    public void set_sySpecified(bool value);
    public ST_TileFlipMode get_flip();
    public void set_flip(ST_TileFlipMode value);
    public bool get_flipSpecified();
    public void set_flipSpecified(bool value);
    public ST_RectAlignment get_algn();
    public void set_algn(ST_RectAlignment value);
    public bool get_algnSpecified();
    public void set_algnSpecified(bool value);
}
[XmlTypeAttribute]
[XmlRootAttribute]
public class NPOI.OpenXmlFormats.Dml.CT_TintEffect : object {
    private int hueField;
    private int amtField;
    [XmlAttributeAttribute]
[DefaultValueAttribute("0")]
public int hue { get; public set; }
    [XmlAttributeAttribute]
[DefaultValueAttribute("0")]
public int amt { get; public set; }
    public int get_hue();
    public void set_hue(int value);
    public int get_amt();
    public void set_amt(int value);
}
[XmlTypeAttribute]
[XmlRootAttribute]
public class NPOI.OpenXmlFormats.Dml.CT_Transform2D : object {
    private CT_Point2D offField;
    private CT_PositiveSize2D extField;
    private Nullable`1<int> rotField;
    private Nullable`1<bool> flipHField;
    private Nullable`1<bool> flipVField;
    [XmlElementAttribute]
public CT_Point2D off { get; public set; }
    [XmlElementAttribute]
public CT_PositiveSize2D ext { get; public set; }
    [XmlAttributeAttribute]
[DefaultValueAttribute("0")]
public int rot { get; public set; }
    [XmlAttributeAttribute]
[DefaultValueAttribute("False")]
public bool flipH { get; public set; }
    [XmlAttributeAttribute]
[DefaultValueAttribute("False")]
public bool flipV { get; public set; }
    public static CT_Transform2D Parse(XmlNode node, XmlNamespaceManager namespaceManager);
    internal void Write(StreamWriter sw, string nodeName);
    public CT_PositiveSize2D AddNewExt();
    public CT_Point2D AddNewOff();
    public CT_Point2D get_off();
    public void set_off(CT_Point2D value);
    public CT_PositiveSize2D get_ext();
    public void set_ext(CT_PositiveSize2D value);
    public int get_rot();
    public void set_rot(int value);
    public bool get_flipH();
    public void set_flipH(bool value);
    public bool get_flipV();
    public void set_flipV(bool value);
}
[XmlTypeAttribute]
[XmlRootAttribute]
public class NPOI.OpenXmlFormats.Dml.CT_TransformEffect : object {
    private int sxField;
    private int syField;
    private int kxField;
    private int kyField;
    private long txField;
    private long tyField;
    [XmlAttributeAttribute]
[DefaultValueAttribute("100000")]
public int sx { get; public set; }
    [XmlAttributeAttribute]
[DefaultValueAttribute("100000")]
public int sy { get; public set; }
    [XmlAttributeAttribute]
[DefaultValueAttribute("0")]
public int kx { get; public set; }
    [XmlAttributeAttribute]
[DefaultValueAttribute("0")]
public int ky { get; public set; }
    [XmlAttributeAttribute]
[DefaultValueAttribute("System.Int64", "0")]
public long tx { get; public set; }
    [XmlAttributeAttribute]
[DefaultValueAttribute("System.Int64", "0")]
public long ty { get; public set; }
    public int get_sx();
    public void set_sx(int value);
    public int get_sy();
    public void set_sy(int value);
    public int get_kx();
    public void set_kx(int value);
    public int get_ky();
    public void set_ky(int value);
    public long get_tx();
    public void set_tx(long value);
    public long get_ty();
    public void set_ty(long value);
}
[XmlTypeAttribute]
[XmlRootAttribute]
public class NPOI.OpenXmlFormats.Dml.CT_Vector3D : object {
    private long dxField;
    private long dyField;
    private long dzField;
    [XmlAttributeAttribute]
public long dx { get; public set; }
    [XmlAttributeAttribute]
public long dy { get; public set; }
    [XmlAttributeAttribute]
public long dz { get; public set; }
    public static CT_Vector3D Parse(XmlNode node, XmlNamespaceManager namespaceManager);
    internal void Write(StreamWriter sw, string nodeName);
    public long get_dx();
    public void set_dx(long value);
    public long get_dy();
    public void set_dy(long value);
    public long get_dz();
    public void set_dz(long value);
}
[DebuggerStepThroughAttribute]
[DesignerCategoryAttribute("code")]
[XmlTypeAttribute]
[XmlRootAttribute]
public class NPOI.OpenXmlFormats.Dml.CT_VideoFile : object {
    private CT_OfficeArtExtensionList extLstField;
    private string linkField;
    [XmlElementAttribute]
public CT_OfficeArtExtensionList extLst { get; public set; }
    [XmlAttributeAttribute]
public string link { get; public set; }
    public CT_OfficeArtExtensionList get_extLst();
    public void set_extLst(CT_OfficeArtExtensionList value);
    public string get_link();
    public void set_link(string value);
}
[DebuggerStepThroughAttribute]
[DesignerCategoryAttribute("code")]
[XmlTypeAttribute]
[XmlRootAttribute]
public class NPOI.OpenXmlFormats.Dml.CT_WholeE2oFormatting : object {
    private CT_LineProperties lnField;
    private CT_EffectList effectLstField;
    private CT_EffectContainer effectDagField;
    [XmlElementAttribute]
public CT_LineProperties ln { get; public set; }
    [XmlElementAttribute]
public CT_EffectList effectLst { get; public set; }
    [XmlElementAttribute]
public CT_EffectContainer effectDag { get; public set; }
    public CT_LineProperties get_ln();
    public void set_ln(CT_LineProperties value);
    public CT_EffectList get_effectLst();
    public void set_effectLst(CT_EffectList value);
    public CT_EffectContainer get_effectDag();
    public void set_effectDag(CT_EffectContainer value);
}
[DesignerCategoryAttribute("code")]
[XmlTypeAttribute]
[XmlRootAttribute]
public class NPOI.OpenXmlFormats.Dml.CT_XYAdjustHandle : object {
    private CT_AdjPoint2D posField;
    private string gdRefXField;
    private string minXField;
    private string maxXField;
    private string gdRefYField;
    private string minYField;
    private string maxYField;
    [XmlElementAttribute]
public CT_AdjPoint2D pos { get; public set; }
    [XmlAttributeAttribute]
public string gdRefX { get; public set; }
    [XmlAttributeAttribute]
public string minX { get; public set; }
    [XmlAttributeAttribute]
public string maxX { get; public set; }
    [XmlAttributeAttribute]
public string gdRefY { get; public set; }
    [XmlAttributeAttribute]
public string minY { get; public set; }
    [XmlAttributeAttribute]
public string maxY { get; public set; }
    public CT_AdjPoint2D get_pos();
    public void set_pos(CT_AdjPoint2D value);
    public string get_gdRefX();
    public void set_gdRefX(string value);
    public string get_minX();
    public void set_minX(string value);
    public string get_maxX();
    public void set_maxX(string value);
    public string get_gdRefY();
    public void set_gdRefY(string value);
    public string get_minY();
    public void set_minY(string value);
    public string get_maxY();
    public void set_maxY(string value);
}
[DebuggerStepThroughAttribute]
[DesignerCategoryAttribute("code")]
[XmlTypeAttribute]
[XmlRootAttribute]
public class NPOI.OpenXmlFormats.Dml.Diagram.CT_Adj : object {
    private UInt32 idxField;
    private double valField;
    [XmlAttributeAttribute]
public UInt32 idx { get; public set; }
    [XmlAttributeAttribute]
public double val { get; public set; }
    public UInt32 get_idx();
    public void set_idx(UInt32 value);
    public double get_val();
    public void set_val(double value);
}
[DebuggerStepThroughAttribute]
[DesignerCategoryAttribute("code")]
[XmlTypeAttribute]
[XmlRootAttribute]
public class NPOI.OpenXmlFormats.Dml.Diagram.CT_AdjLst : object {
    private List`1<CT_Adj> adjField;
    [XmlElementAttribute("adj")]
public List`1<CT_Adj> adj { get; public set; }
    public List`1<CT_Adj> get_adj();
    public void set_adj(List`1<CT_Adj> value);
}
[DebuggerStepThroughAttribute]
[DesignerCategoryAttribute("code")]
[XmlTypeAttribute]
[XmlRootAttribute]
public class NPOI.OpenXmlFormats.Dml.Diagram.CT_Algorithm : object {
    private List`1<CT_Parameter> paramField;
    private CT_OfficeArtExtensionList extLstField;
    private ST_AlgorithmType typeField;
    private UInt32 revField;
    [XmlElementAttribute("param")]
public List`1<CT_Parameter> param { get; public set; }
    [XmlElementAttribute]
public CT_OfficeArtExtensionList extLst { get; public set; }
    [XmlAttributeAttribute]
public ST_AlgorithmType type { get; public set; }
    [XmlAttributeAttribute]
[DefaultValueAttribute("System.UInt32", "0")]
public UInt32 rev { get; public set; }
    public List`1<CT_Parameter> get_param();
    public void set_param(List`1<CT_Parameter> value);
    public CT_OfficeArtExtensionList get_extLst();
    public void set_extLst(CT_OfficeArtExtensionList value);
    public ST_AlgorithmType get_type();
    public void set_type(ST_AlgorithmType value);
    public UInt32 get_rev();
    public void set_rev(UInt32 value);
}
[DebuggerStepThroughAttribute]
[DesignerCategoryAttribute("code")]
[XmlTypeAttribute]
[XmlRootAttribute]
public class NPOI.OpenXmlFormats.Dml.Diagram.CT_AnimLvl : object {
    private ST_AnimLvlStr valField;
    [XmlAttributeAttribute]
[DefaultValueAttribute("Mono.Cecil.CustomAttributeArgument")]
public ST_AnimLvlStr val { get; public set; }
    public ST_AnimLvlStr get_val();
    public void set_val(ST_AnimLvlStr value);
}
[DebuggerStepThroughAttribute]
[DesignerCategoryAttribute("code")]
[XmlTypeAttribute]
[XmlRootAttribute]
public class NPOI.OpenXmlFormats.Dml.Diagram.CT_AnimOne : object {
    private ST_AnimOneStr valField;
    [XmlAttributeAttribute]
[DefaultValueAttribute("Mono.Cecil.CustomAttributeArgument")]
public ST_AnimOneStr val { get; public set; }
    public ST_AnimOneStr get_val();
    public void set_val(ST_AnimOneStr value);
}
[DebuggerStepThroughAttribute]
[DesignerCategoryAttribute("code")]
[XmlTypeAttribute]
[XmlRootAttribute]
public class NPOI.OpenXmlFormats.Dml.Diagram.CT_BulletEnabled : object {
    private bool valField;
    [XmlAttributeAttribute]
[DefaultValueAttribute("False")]
public bool val { get; public set; }
    public bool get_val();
    public void set_val(bool value);
}
[DebuggerStepThroughAttribute]
[DesignerCategoryAttribute("code")]
[XmlTypeAttribute]
[XmlRootAttribute]
public class NPOI.OpenXmlFormats.Dml.Diagram.CT_Categories : object {
    private List`1<CT_Category> catField;
    [XmlElementAttribute("cat")]
public List`1<CT_Category> cat { get; public set; }
    public List`1<CT_Category> get_cat();
    public void set_cat(List`1<CT_Category> value);
}
[DebuggerStepThroughAttribute]
[DesignerCategoryAttribute("code")]
[XmlTypeAttribute]
[XmlRootAttribute]
public class NPOI.OpenXmlFormats.Dml.Diagram.CT_Category : object {
    private string typeField;
    private UInt32 priField;
    [XmlAttributeAttribute]
public string type { get; public set; }
    [XmlAttributeAttribute]
public UInt32 pri { get; public set; }
    public string get_type();
    public void set_type(string value);
    public UInt32 get_pri();
    public void set_pri(UInt32 value);
}
[DebuggerStepThroughAttribute]
[DesignerCategoryAttribute("code")]
[XmlTypeAttribute]
[XmlRootAttribute]
public class NPOI.OpenXmlFormats.Dml.Diagram.CT_ChildMax : object {
    private int valField;
    [XmlAttributeAttribute]
[DefaultValueAttribute("-1")]
public int val { get; public set; }
    public int get_val();
    public void set_val(int value);
}
[DebuggerStepThroughAttribute]
[DesignerCategoryAttribute("code")]
[XmlTypeAttribute]
[XmlRootAttribute]
public class NPOI.OpenXmlFormats.Dml.Diagram.CT_ChildPref : object {
    private int valField;
    [XmlAttributeAttribute]
[DefaultValueAttribute("-1")]
public int val { get; public set; }
    public int get_val();
    public void set_val(int value);
}
[DebuggerStepThroughAttribute]
[DesignerCategoryAttribute("code")]
[XmlTypeAttribute]
[XmlRootAttribute]
public class NPOI.OpenXmlFormats.Dml.Diagram.CT_Choose : object {
    private List`1<CT_When> ifField;
    private CT_Otherwise elseField;
    private string nameField;
    [XmlElementAttribute("if")]
public List`1<CT_When> if { get; public set; }
    [XmlElementAttribute]
public CT_Otherwise else { get; public set; }
    [XmlAttributeAttribute]
[DefaultValueAttribute("")]
public string name { get; public set; }
    public List`1<CT_When> get_if();
    public void set_if(List`1<CT_When> value);
    public CT_Otherwise get_else();
    public void set_else(CT_Otherwise value);
    public string get_name();
    public void set_name(string value);
}
[GeneratedCodeAttribute("System.Xml", "4.0.30319.17379")]
[DebuggerStepThroughAttribute]
[DesignerCategoryAttribute("code")]
[XmlTypeAttribute]
[XmlRootAttribute]
public class NPOI.OpenXmlFormats.Dml.Diagram.CT_Colors : object {
    private List`1<object> itemsField;
    private ST_ClrAppMethod methField;
    private ST_HueDir hueDirField;
    [XmlElementAttribute("hslClr", "NPOI.OpenXmlFormats.Dml.CT_HslColor")]
[XmlElementAttribute("prstClr", "NPOI.OpenXmlFormats.Dml.CT_PresetColor")]
[XmlElementAttribute("schemeClr", "NPOI.OpenXmlFormats.Dml.CT_SchemeColor")]
[XmlElementAttribute("scrgbClr", "NPOI.OpenXmlFormats.Dml.CT_ScRgbColor")]
[XmlElementAttribute("srgbClr", "NPOI.OpenXmlFormats.Dml.CT_SRgbColor")]
[XmlElementAttribute("sysClr", "NPOI.OpenXmlFormats.Dml.CT_SystemColor")]
public List`1<object> Items { get; public set; }
    [XmlAttributeAttribute]
[DefaultValueAttribute("Mono.Cecil.CustomAttributeArgument")]
public ST_ClrAppMethod meth { get; public set; }
    [XmlAttributeAttribute]
[DefaultValueAttribute("Mono.Cecil.CustomAttributeArgument")]
public ST_HueDir hueDir { get; public set; }
    public List`1<object> get_Items();
    public void set_Items(List`1<object> value);
    public ST_ClrAppMethod get_meth();
    public void set_meth(ST_ClrAppMethod value);
    public ST_HueDir get_hueDir();
    public void set_hueDir(ST_HueDir value);
}
[GeneratedCodeAttribute("System.Xml", "4.0.30319.17379")]
[DebuggerStepThroughAttribute]
[DesignerCategoryAttribute("code")]
[XmlTypeAttribute]
[XmlRootAttribute("colorsDef")]
public class NPOI.OpenXmlFormats.Dml.Diagram.CT_ColorTransform : object {
    private List`1<CT_CTName> titleField;
    private List`1<CT_CTDescription> descField;
    private List`1<CT_CTCategory> catLstField;
    private List`1<CT_CTStyleLabel> styleLblField;
    private CT_OfficeArtExtensionList extLstField;
    private string uniqueIdField;
    private string minVerField;
    [XmlElementAttribute("title")]
public List`1<CT_CTName> title { get; public set; }
    [XmlElementAttribute("desc")]
public List`1<CT_CTDescription> desc { get; public set; }
    [XmlArrayAttribute]
[XmlArrayItemAttribute("cat")]
public List`1<CT_CTCategory> catLst { get; public set; }
    [XmlElementAttribute("styleLbl")]
public List`1<CT_CTStyleLabel> styleLbl { get; public set; }
    [XmlElementAttribute]
public CT_OfficeArtExtensionList extLst { get; public set; }
    [XmlAttributeAttribute]
[DefaultValueAttribute("")]
public string uniqueId { get; public set; }
    [XmlAttributeAttribute]
[DefaultValueAttribute("http://schemas.openxmlformats.org/drawingml/2006/diagram")]
public string minVer { get; public set; }
    public List`1<CT_CTName> get_title();
    public void set_title(List`1<CT_CTName> value);
    public List`1<CT_CTDescription> get_desc();
    public void set_desc(List`1<CT_CTDescription> value);
    public List`1<CT_CTCategory> get_catLst();
    public void set_catLst(List`1<CT_CTCategory> value);
    public List`1<CT_CTStyleLabel> get_styleLbl();
    public void set_styleLbl(List`1<CT_CTStyleLabel> value);
    public CT_OfficeArtExtensionList get_extLst();
    public void set_extLst(CT_OfficeArtExtensionList value);
    public string get_uniqueId();
    public void set_uniqueId(string value);
    public string get_minVer();
    public void set_minVer(string value);
}
[GeneratedCodeAttribute("System.Xml", "4.0.30319.17379")]
[DebuggerStepThroughAttribute]
[DesignerCategoryAttribute("code")]
[XmlTypeAttribute]
[XmlRootAttribute("colorsDefHdr")]
public class NPOI.OpenXmlFormats.Dml.Diagram.CT_ColorTransformHeader : object {
    private List`1<CT_CTName> titleField;
    private List`1<CT_CTDescription> descField;
    private List`1<CT_CTCategory> catLstField;
    private CT_OfficeArtExtensionList extLstField;
    private string uniqueIdField;
    private string minVerField;
    private int resIdField;
    [XmlElementAttribute("title")]
public List`1<CT_CTName> title { get; public set; }
    [XmlElementAttribute("desc")]
public List`1<CT_CTDescription> desc { get; public set; }
    [XmlArrayAttribute]
[XmlArrayItemAttribute("cat")]
public List`1<CT_CTCategory> catLst { get; public set; }
    [XmlElementAttribute]
public CT_OfficeArtExtensionList extLst { get; public set; }
    [XmlAttributeAttribute]
public string uniqueId { get; public set; }
    [XmlAttributeAttribute]
[DefaultValueAttribute("http://schemas.openxmlformats.org/drawingml/2006/diagram")]
public string minVer { get; public set; }
    [XmlAttributeAttribute]
[DefaultValueAttribute("0")]
public int resId { get; public set; }
    public List`1<CT_CTName> get_title();
    public void set_title(List`1<CT_CTName> value);
    public List`1<CT_CTDescription> get_desc();
    public void set_desc(List`1<CT_CTDescription> value);
    public List`1<CT_CTCategory> get_catLst();
    public void set_catLst(List`1<CT_CTCategory> value);
    public CT_OfficeArtExtensionList get_extLst();
    public void set_extLst(CT_OfficeArtExtensionList value);
    public string get_uniqueId();
    public void set_uniqueId(string value);
    public string get_minVer();
    public void set_minVer(string value);
    public int get_resId();
    public void set_resId(int value);
}
[GeneratedCodeAttribute("System.Xml", "4.0.30319.17379")]
[DebuggerStepThroughAttribute]
[DesignerCategoryAttribute("code")]
[XmlTypeAttribute]
[XmlRootAttribute("colorsDefHdrLst")]
public class NPOI.OpenXmlFormats.Dml.Diagram.CT_ColorTransformHeaderLst : object {
    private List`1<CT_ColorTransformHeader> colorsDefHdrField;
    [XmlElementAttribute("colorsDefHdr")]
public List`1<CT_ColorTransformHeader> colorsDefHdr { get; public set; }
    public List`1<CT_ColorTransformHeader> get_colorsDefHdr();
    public void set_colorsDefHdr(List`1<CT_ColorTransformHeader> value);
}
[DebuggerStepThroughAttribute]
[DesignerCategoryAttribute("code")]
[XmlTypeAttribute]
[XmlRootAttribute]
public class NPOI.OpenXmlFormats.Dml.Diagram.CT_Constraint : object {
    private CT_OfficeArtExtensionList extLstField;
    private ST_ConstraintType typeField;
    private ST_ConstraintRelationship forField;
    private string forNameField;
    private List`1<ST_ElementType> ptTypeField;
    private ST_ConstraintType refTypeField;
    private ST_ConstraintRelationship refForField;
    private string refForNameField;
    private List`1<ST_ElementType> refPtTypeField;
    private ST_BoolOperator opField;
    private double valField;
    private double factField;
    [XmlElementAttribute]
public CT_OfficeArtExtensionList extLst { get; public set; }
    [XmlAttributeAttribute]
public ST_ConstraintType type { get; public set; }
    [XmlAttributeAttribute]
[DefaultValueAttribute("Mono.Cecil.CustomAttributeArgument")]
public ST_ConstraintRelationship for { get; public set; }
    [XmlAttributeAttribute]
[DefaultValueAttribute("")]
public string forName { get; public set; }
    [XmlAttributeAttribute]
public List`1<ST_ElementType> ptType { get; public set; }
    [XmlAttributeAttribute]
[DefaultValueAttribute("Mono.Cecil.CustomAttributeArgument")]
public ST_ConstraintType refType { get; public set; }
    [XmlAttributeAttribute]
[DefaultValueAttribute("Mono.Cecil.CustomAttributeArgument")]
public ST_ConstraintRelationship refFor { get; public set; }
    [XmlAttributeAttribute]
[DefaultValueAttribute("")]
public string refForName { get; public set; }
    [XmlAttributeAttribute]
public List`1<ST_ElementType> refPtType { get; public set; }
    [XmlAttributeAttribute]
[DefaultValueAttribute("Mono.Cecil.CustomAttributeArgument")]
public ST_BoolOperator op { get; public set; }
    [XmlAttributeAttribute]
[DefaultValueAttribute("0")]
public double val { get; public set; }
    [XmlAttributeAttribute]
[DefaultValueAttribute("1")]
public double fact { get; public set; }
    public CT_OfficeArtExtensionList get_extLst();
    public void set_extLst(CT_OfficeArtExtensionList value);
    public ST_ConstraintType get_type();
    public void set_type(ST_ConstraintType value);
    public ST_ConstraintRelationship get_for();
    public void set_for(ST_ConstraintRelationship value);
    public string get_forName();
    public void set_forName(string value);
    public List`1<ST_ElementType> get_ptType();
    public void set_ptType(List`1<ST_ElementType> value);
    public ST_ConstraintType get_refType();
    public void set_refType(ST_ConstraintType value);
    public ST_ConstraintRelationship get_refFor();
    public void set_refFor(ST_ConstraintRelationship value);
    public string get_refForName();
    public void set_refForName(string value);
    public List`1<ST_ElementType> get_refPtType();
    public void set_refPtType(List`1<ST_ElementType> value);
    public ST_BoolOperator get_op();
    public void set_op(ST_BoolOperator value);
    public double get_val();
    public void set_val(double value);
    public double get_fact();
    public void set_fact(double value);
}
[DebuggerStepThroughAttribute]
[DesignerCategoryAttribute("code")]
[XmlTypeAttribute]
[XmlRootAttribute]
public class NPOI.OpenXmlFormats.Dml.Diagram.CT_Constraints : object {
    private List`1<CT_Constraint> constrField;
    [XmlElementAttribute("constr")]
public List`1<CT_Constraint> constr { get; public set; }
    public List`1<CT_Constraint> get_constr();
    public void set_constr(List`1<CT_Constraint> value);
}
[GeneratedCodeAttribute("System.Xml", "4.0.30319.17379")]
[DebuggerStepThroughAttribute]
[DesignerCategoryAttribute("code")]
[XmlTypeAttribute]
[XmlRootAttribute]
public class NPOI.OpenXmlFormats.Dml.Diagram.CT_CTCategories : object {
    private List`1<CT_CTCategory> catField;
    [XmlElementAttribute("cat")]
public List`1<CT_CTCategory> cat { get; public set; }
    public List`1<CT_CTCategory> get_cat();
    public void set_cat(List`1<CT_CTCategory> value);
}
[GeneratedCodeAttribute("System.Xml", "4.0.30319.17379")]
[DebuggerStepThroughAttribute]
[DesignerCategoryAttribute("code")]
[XmlTypeAttribute]
[XmlRootAttribute]
public class NPOI.OpenXmlFormats.Dml.Diagram.CT_CTCategory : object {
    private string typeField;
    private UInt32 priField;
    [XmlAttributeAttribute]
public string type { get; public set; }
    [XmlAttributeAttribute]
public UInt32 pri { get; public set; }
    public string get_type();
    public void set_type(string value);
    public UInt32 get_pri();
    public void set_pri(UInt32 value);
}
[GeneratedCodeAttribute("System.Xml", "4.0.30319.17379")]
[DebuggerStepThroughAttribute]
[DesignerCategoryAttribute("code")]
[XmlTypeAttribute]
[XmlRootAttribute]
public class NPOI.OpenXmlFormats.Dml.Diagram.CT_CTDescription : object {
    private string langField;
    private string valField;
    [XmlAttributeAttribute]
[DefaultValueAttribute("")]
public string lang { get; public set; }
    [XmlAttributeAttribute]
public string val { get; public set; }
    public string get_lang();
    public void set_lang(string value);
    public string get_val();
    public void set_val(string value);
}
[GeneratedCodeAttribute("System.Xml", "4.0.30319.17379")]
[DebuggerStepThroughAttribute]
[DesignerCategoryAttribute("code")]
[XmlTypeAttribute]
[XmlRootAttribute]
public class NPOI.OpenXmlFormats.Dml.Diagram.CT_CTName : object {
    private string langField;
    private string valField;
    [XmlAttributeAttribute]
[DefaultValueAttribute("")]
public string lang { get; public set; }
    [XmlAttributeAttribute]
public string val { get; public set; }
    public string get_lang();
    public void set_lang(string value);
    public string get_val();
    public void set_val(string value);
}
[GeneratedCodeAttribute("System.Xml", "4.0.30319.17379")]
[DebuggerStepThroughAttribute]
[DesignerCategoryAttribute("code")]
[XmlTypeAttribute]
[XmlRootAttribute]
public class NPOI.OpenXmlFormats.Dml.Diagram.CT_CTStyleLabel : object {
    private CT_Colors fillClrLstField;
    private CT_Colors linClrLstField;
    private CT_Colors effectClrLstField;
    private CT_Colors txLinClrLstField;
    private CT_Colors txFillClrLstField;
    private CT_Colors txEffectClrLstField;
    private CT_OfficeArtExtensionList extLstField;
    private string nameField;
    [XmlElementAttribute]
public CT_Colors fillClrLst { get; public set; }
    [XmlElementAttribute]
public CT_Colors linClrLst { get; public set; }
    [XmlElementAttribute]
public CT_Colors effectClrLst { get; public set; }
    [XmlElementAttribute]
public CT_Colors txLinClrLst { get; public set; }
    [XmlElementAttribute]
public CT_Colors txFillClrLst { get; public set; }
    [XmlElementAttribute]
public CT_Colors txEffectClrLst { get; public set; }
    [XmlElementAttribute]
public CT_OfficeArtExtensionList extLst { get; public set; }
    [XmlAttributeAttribute]
public string name { get; public set; }
    public CT_Colors get_fillClrLst();
    public void set_fillClrLst(CT_Colors value);
    public CT_Colors get_linClrLst();
    public void set_linClrLst(CT_Colors value);
    public CT_Colors get_effectClrLst();
    public void set_effectClrLst(CT_Colors value);
    public CT_Colors get_txLinClrLst();
    public void set_txLinClrLst(CT_Colors value);
    public CT_Colors get_txFillClrLst();
    public void set_txFillClrLst(CT_Colors value);
    public CT_Colors get_txEffectClrLst();
    public void set_txEffectClrLst(CT_Colors value);
    public CT_OfficeArtExtensionList get_extLst();
    public void set_extLst(CT_OfficeArtExtensionList value);
    public string get_name();
    public void set_name(string value);
}
[DebuggerStepThroughAttribute]
[DesignerCategoryAttribute("code")]
[XmlTypeAttribute]
[XmlRootAttribute]
public class NPOI.OpenXmlFormats.Dml.Diagram.CT_Cxn : object {
    private CT_OfficeArtExtensionList extLstField;
    private string modelIdField;
    private ST_CxnType typeField;
    private string srcIdField;
    private string destIdField;
    private UInt32 srcOrdField;
    private UInt32 destOrdField;
    private string parTransIdField;
    private string sibTransIdField;
    private string presIdField;
    [XmlElementAttribute]
public CT_OfficeArtExtensionList extLst { get; public set; }
    [XmlAttributeAttribute]
public string modelId { get; public set; }
    [XmlAttributeAttribute]
[DefaultValueAttribute("Mono.Cecil.CustomAttributeArgument")]
public ST_CxnType type { get; public set; }
    [XmlAttributeAttribute]
public string srcId { get; public set; }
    [XmlAttributeAttribute]
public string destId { get; public set; }
    [XmlAttributeAttribute]
public UInt32 srcOrd { get; public set; }
    [XmlAttributeAttribute]
public UInt32 destOrd { get; public set; }
    [XmlAttributeAttribute]
[DefaultValueAttribute("0")]
public string parTransId { get; public set; }
    [XmlAttributeAttribute]
[DefaultValueAttribute("0")]
public string sibTransId { get; public set; }
    [XmlAttributeAttribute]
[DefaultValueAttribute("")]
public string presId { get; public set; }
    public CT_OfficeArtExtensionList get_extLst();
    public void set_extLst(CT_OfficeArtExtensionList value);
    public string get_modelId();
    public void set_modelId(string value);
    public ST_CxnType get_type();
    public void set_type(ST_CxnType value);
    public string get_srcId();
    public void set_srcId(string value);
    public string get_destId();
    public void set_destId(string value);
    public UInt32 get_srcOrd();
    public void set_srcOrd(UInt32 value);
    public UInt32 get_destOrd();
    public void set_destOrd(UInt32 value);
    public string get_parTransId();
    public void set_parTransId(string value);
    public string get_sibTransId();
    public void set_sibTransId(string value);
    public string get_presId();
    public void set_presId(string value);
}
[DebuggerStepThroughAttribute]
[DesignerCategoryAttribute("code")]
[XmlTypeAttribute]
[XmlRootAttribute]
public class NPOI.OpenXmlFormats.Dml.Diagram.CT_CxnList : object {
    private List`1<CT_Cxn> cxnField;
    [XmlElementAttribute("cxn")]
public List`1<CT_Cxn> cxn { get; public set; }
    public List`1<CT_Cxn> get_cxn();
    public void set_cxn(List`1<CT_Cxn> value);
}
[DebuggerStepThroughAttribute]
[DesignerCategoryAttribute("code")]
[XmlTypeAttribute]
[XmlRootAttribute("dataModel")]
public class NPOI.OpenXmlFormats.Dml.Diagram.CT_DataModel : object {
    private List`1<CT_Pt> ptLstField;
    private List`1<CT_Cxn> cxnLstField;
    private CT_BackgroundFormatting bgField;
    private CT_WholeE2oFormatting wholeField;
    private CT_OfficeArtExtensionList extLstField;
    [XmlArrayAttribute]
[XmlArrayItemAttribute("pt")]
public List`1<CT_Pt> ptLst { get; public set; }
    [XmlArrayAttribute]
[XmlArrayItemAttribute("cxn")]
public List`1<CT_Cxn> cxnLst { get; public set; }
    [XmlElementAttribute]
public CT_BackgroundFormatting bg { get; public set; }
    [XmlElementAttribute]
public CT_WholeE2oFormatting whole { get; public set; }
    [XmlElementAttribute]
public CT_OfficeArtExtensionList extLst { get; public set; }
    public List`1<CT_Pt> get_ptLst();
    public void set_ptLst(List`1<CT_Pt> value);
    public List`1<CT_Cxn> get_cxnLst();
    public void set_cxnLst(List`1<CT_Cxn> value);
    public CT_BackgroundFormatting get_bg();
    public void set_bg(CT_BackgroundFormatting value);
    public CT_WholeE2oFormatting get_whole();
    public void set_whole(CT_WholeE2oFormatting value);
    public CT_OfficeArtExtensionList get_extLst();
    public void set_extLst(CT_OfficeArtExtensionList value);
}
[DebuggerStepThroughAttribute]
[DesignerCategoryAttribute("code")]
[XmlTypeAttribute]
[XmlRootAttribute]
public class NPOI.OpenXmlFormats.Dml.Diagram.CT_Description : object {
    private string langField;
    private string valField;
    [XmlAttributeAttribute]
[DefaultValueAttribute("")]
public string lang { get; public set; }
    [XmlAttributeAttribute]
public string val { get; public set; }
    public string get_lang();
    public void set_lang(string value);
    public string get_val();
    public void set_val(string value);
}
[DebuggerStepThroughAttribute]
[DesignerCategoryAttribute("code")]
[XmlTypeAttribute]
[XmlRootAttribute("layoutDef")]
public class NPOI.OpenXmlFormats.Dml.Diagram.CT_DiagramDefinition : object {
    private List`1<CT_Name> titleField;
    private List`1<CT_Description> descField;
    private List`1<CT_Category> catLstField;
    private CT_SampleData sampDataField;
    private CT_SampleData styleDataField;
    private CT_SampleData clrDataField;
    private CT_LayoutNode layoutNodeField;
    private CT_OfficeArtExtensionList extLstField;
    private string uniqueIdField;
    private string minVerField;
    private string defStyleField;
    [XmlElementAttribute("title")]
public List`1<CT_Name> title { get; public set; }
    [XmlElementAttribute("desc")]
public List`1<CT_Description> desc { get; public set; }
    [XmlArrayAttribute]
[XmlArrayItemAttribute("cat")]
public List`1<CT_Category> catLst { get; public set; }
    [XmlElementAttribute]
public CT_SampleData sampData { get; public set; }
    [XmlElementAttribute]
public CT_SampleData styleData { get; public set; }
    [XmlElementAttribute]
public CT_SampleData clrData { get; public set; }
    [XmlElementAttribute]
public CT_LayoutNode layoutNode { get; public set; }
    [XmlElementAttribute]
public CT_OfficeArtExtensionList extLst { get; public set; }
    [XmlAttributeAttribute]
[DefaultValueAttribute("")]
public string uniqueId { get; public set; }
    [XmlAttributeAttribute]
[DefaultValueAttribute("http://schemas.openxmlformats.org/drawingml/2006/diagram")]
public string minVer { get; public set; }
    [XmlAttributeAttribute]
[DefaultValueAttribute("")]
public string defStyle { get; public set; }
    public List`1<CT_Name> get_title();
    public void set_title(List`1<CT_Name> value);
    public List`1<CT_Description> get_desc();
    public void set_desc(List`1<CT_Description> value);
    public List`1<CT_Category> get_catLst();
    public void set_catLst(List`1<CT_Category> value);
    public CT_SampleData get_sampData();
    public void set_sampData(CT_SampleData value);
    public CT_SampleData get_styleData();
    public void set_styleData(CT_SampleData value);
    public CT_SampleData get_clrData();
    public void set_clrData(CT_SampleData value);
    public CT_LayoutNode get_layoutNode();
    public void set_layoutNode(CT_LayoutNode value);
    public CT_OfficeArtExtensionList get_extLst();
    public void set_extLst(CT_OfficeArtExtensionList value);
    public string get_uniqueId();
    public void set_uniqueId(string value);
    public string get_minVer();
    public void set_minVer(string value);
    public string get_defStyle();
    public void set_defStyle(string value);
}
[DebuggerStepThroughAttribute]
[DesignerCategoryAttribute("code")]
[XmlTypeAttribute]
[XmlRootAttribute("layoutDefHdr")]
public class NPOI.OpenXmlFormats.Dml.Diagram.CT_DiagramDefinitionHeader : object {
    private List`1<CT_Name> titleField;
    private List`1<CT_Description> descField;
    private List`1<CT_Category> catLstField;
    private CT_OfficeArtExtensionList extLstField;
    private string uniqueIdField;
    private string minVerField;
    private string defStyleField;
    private int resIdField;
    [XmlElementAttribute("title")]
public List`1<CT_Name> title { get; public set; }
    [XmlElementAttribute("desc")]
public List`1<CT_Description> desc { get; public set; }
    [XmlArrayAttribute]
[XmlArrayItemAttribute("cat")]
public List`1<CT_Category> catLst { get; public set; }
    [XmlElementAttribute]
public CT_OfficeArtExtensionList extLst { get; public set; }
    [XmlAttributeAttribute]
public string uniqueId { get; public set; }
    [XmlAttributeAttribute]
[DefaultValueAttribute("http://schemas.openxmlformats.org/drawingml/2006/diagram")]
public string minVer { get; public set; }
    [XmlAttributeAttribute]
[DefaultValueAttribute("")]
public string defStyle { get; public set; }
    [XmlAttributeAttribute]
[DefaultValueAttribute("0")]
public int resId { get; public set; }
    public List`1<CT_Name> get_title();
    public void set_title(List`1<CT_Name> value);
    public List`1<CT_Description> get_desc();
    public void set_desc(List`1<CT_Description> value);
    public List`1<CT_Category> get_catLst();
    public void set_catLst(List`1<CT_Category> value);
    public CT_OfficeArtExtensionList get_extLst();
    public void set_extLst(CT_OfficeArtExtensionList value);
    public string get_uniqueId();
    public void set_uniqueId(string value);
    public string get_minVer();
    public void set_minVer(string value);
    public string get_defStyle();
    public void set_defStyle(string value);
    public int get_resId();
    public void set_resId(int value);
}
[DebuggerStepThroughAttribute]
[DesignerCategoryAttribute("code")]
[XmlTypeAttribute]
[XmlRootAttribute("layoutDefHdrLst")]
public class NPOI.OpenXmlFormats.Dml.Diagram.CT_DiagramDefinitionHeaderLst : object {
    private List`1<CT_DiagramDefinitionHeader> layoutDefHdrField;
    [XmlElementAttribute("layoutDefHdr")]
public List`1<CT_DiagramDefinitionHeader> layoutDefHdr { get; public set; }
    public List`1<CT_DiagramDefinitionHeader> get_layoutDefHdr();
    public void set_layoutDefHdr(List`1<CT_DiagramDefinitionHeader> value);
}
[DebuggerStepThroughAttribute]
[DesignerCategoryAttribute("code")]
[XmlTypeAttribute]
[XmlRootAttribute]
public class NPOI.OpenXmlFormats.Dml.Diagram.CT_Direction : object {
    private ST_Direction valField;
    [XmlAttributeAttribute]
[DefaultValueAttribute("Mono.Cecil.CustomAttributeArgument")]
public ST_Direction val { get; public set; }
    public ST_Direction get_val();
    public void set_val(ST_Direction value);
}
[DebuggerStepThroughAttribute]
[DesignerCategoryAttribute("code")]
[XmlTypeAttribute]
[XmlRootAttribute]
public class NPOI.OpenXmlFormats.Dml.Diagram.CT_ElemPropSet : object {
    private CT_LayoutVariablePropertySet presLayoutVarsField;
    private CT_ShapeStyle styleField;
    private string presAssocIDField;
    private string presNameField;
    private string presStyleLblField;
    private int presStyleIdxField;
    private bool presStyleIdxFieldSpecified;
    private int presStyleCntField;
    private bool presStyleCntFieldSpecified;
    private string loTypeIdField;
    private string loCatIdField;
    private string qsTypeIdField;
    private string qsCatIdField;
    private string csTypeIdField;
    private string csCatIdField;
    private bool coherent3DOffField;
    private bool coherent3DOffFieldSpecified;
    private string phldrTField;
    private bool phldrField;
    private bool phldrFieldSpecified;
    private int custAngField;
    private bool custAngFieldSpecified;
    private bool custFlipVertField;
    private bool custFlipVertFieldSpecified;
    private bool custFlipHorField;
    private bool custFlipHorFieldSpecified;
    private int custSzXField;
    private bool custSzXFieldSpecified;
    private int custSzYField;
    private bool custSzYFieldSpecified;
    private int custScaleXField;
    private bool custScaleXFieldSpecified;
    private int custScaleYField;
    private bool custScaleYFieldSpecified;
    private bool custTField;
    private bool custTFieldSpecified;
    private int custLinFactXField;
    private bool custLinFactXFieldSpecified;
    private int custLinFactYField;
    private bool custLinFactYFieldSpecified;
    private int custLinFactNeighborXField;
    private bool custLinFactNeighborXFieldSpecified;
    private int custLinFactNeighborYField;
    private bool custLinFactNeighborYFieldSpecified;
    private int custRadScaleRadField;
    private bool custRadScaleRadFieldSpecified;
    private int custRadScaleIncField;
    private bool custRadScaleIncFieldSpecified;
    [XmlElementAttribute]
public CT_LayoutVariablePropertySet presLayoutVars { get; public set; }
    [XmlElementAttribute]
public CT_ShapeStyle style { get; public set; }
    [XmlAttributeAttribute]
public string presAssocID { get; public set; }
    [XmlAttributeAttribute]
public string presName { get; public set; }
    [XmlAttributeAttribute]
public string presStyleLbl { get; public set; }
    [XmlAttributeAttribute]
public int presStyleIdx { get; public set; }
    [XmlIgnoreAttribute]
public bool presStyleIdxSpecified { get; public set; }
    [XmlAttributeAttribute]
public int presStyleCnt { get; public set; }
    [XmlIgnoreAttribute]
public bool presStyleCntSpecified { get; public set; }
    [XmlAttributeAttribute]
public string loTypeId { get; public set; }
    [XmlAttributeAttribute]
public string loCatId { get; public set; }
    [XmlAttributeAttribute]
public string qsTypeId { get; public set; }
    [XmlAttributeAttribute]
public string qsCatId { get; public set; }
    [XmlAttributeAttribute]
public string csTypeId { get; public set; }
    [XmlAttributeAttribute]
public string csCatId { get; public set; }
    [XmlAttributeAttribute]
public bool coherent3DOff { get; public set; }
    [XmlIgnoreAttribute]
public bool coherent3DOffSpecified { get; public set; }
    [XmlAttributeAttribute]
public string phldrT { get; public set; }
    [XmlAttributeAttribute]
public bool phldr { get; public set; }
    [XmlIgnoreAttribute]
public bool phldrSpecified { get; public set; }
    [XmlAttributeAttribute]
public int custAng { get; public set; }
    [XmlIgnoreAttribute]
public bool custAngSpecified { get; public set; }
    [XmlAttributeAttribute]
public bool custFlipVert { get; public set; }
    [XmlIgnoreAttribute]
public bool custFlipVertSpecified { get; public set; }
    [XmlAttributeAttribute]
public bool custFlipHor { get; public set; }
    [XmlIgnoreAttribute]
public bool custFlipHorSpecified { get; public set; }
    [XmlAttributeAttribute]
public int custSzX { get; public set; }
    [XmlIgnoreAttribute]
public bool custSzXSpecified { get; public set; }
    [XmlAttributeAttribute]
public int custSzY { get; public set; }
    [XmlIgnoreAttribute]
public bool custSzYSpecified { get; public set; }
    [XmlAttributeAttribute]
public int custScaleX { get; public set; }
    [XmlIgnoreAttribute]
public bool custScaleXSpecified { get; public set; }
    [XmlAttributeAttribute]
public int custScaleY { get; public set; }
    [XmlIgnoreAttribute]
public bool custScaleYSpecified { get; public set; }
    [XmlAttributeAttribute]
public bool custT { get; public set; }
    [XmlIgnoreAttribute]
public bool custTSpecified { get; public set; }
    [XmlAttributeAttribute]
public int custLinFactX { get; public set; }
    [XmlIgnoreAttribute]
public bool custLinFactXSpecified { get; public set; }
    [XmlAttributeAttribute]
public int custLinFactY { get; public set; }
    [XmlIgnoreAttribute]
public bool custLinFactYSpecified { get; public set; }
    [XmlAttributeAttribute]
public int custLinFactNeighborX { get; public set; }
    [XmlIgnoreAttribute]
public bool custLinFactNeighborXSpecified { get; public set; }
    [XmlAttributeAttribute]
public int custLinFactNeighborY { get; public set; }
    [XmlIgnoreAttribute]
public bool custLinFactNeighborYSpecified { get; public set; }
    [XmlAttributeAttribute]
public int custRadScaleRad { get; public set; }
    [XmlIgnoreAttribute]
public bool custRadScaleRadSpecified { get; public set; }
    [XmlAttributeAttribute]
public int custRadScaleInc { get; public set; }
    [XmlIgnoreAttribute]
public bool custRadScaleIncSpecified { get; public set; }
    public CT_LayoutVariablePropertySet get_presLayoutVars();
    public void set_presLayoutVars(CT_LayoutVariablePropertySet value);
    public CT_ShapeStyle get_style();
    public void set_style(CT_ShapeStyle value);
    public string get_presAssocID();
    public void set_presAssocID(string value);
    public string get_presName();
    public void set_presName(string value);
    public string get_presStyleLbl();
    public void set_presStyleLbl(string value);
    public int get_presStyleIdx();
    public void set_presStyleIdx(int value);
    public bool get_presStyleIdxSpecified();
    public void set_presStyleIdxSpecified(bool value);
    public int get_presStyleCnt();
    public void set_presStyleCnt(int value);
    public bool get_presStyleCntSpecified();
    public void set_presStyleCntSpecified(bool value);
    public string get_loTypeId();
    public void set_loTypeId(string value);
    public string get_loCatId();
    public void set_loCatId(string value);
    public string get_qsTypeId();
    public void set_qsTypeId(string value);
    public string get_qsCatId();
    public void set_qsCatId(string value);
    public string get_csTypeId();
    public void set_csTypeId(string value);
    public string get_csCatId();
    public void set_csCatId(string value);
    public bool get_coherent3DOff();
    public void set_coherent3DOff(bool value);
    public bool get_coherent3DOffSpecified();
    public void set_coherent3DOffSpecified(bool value);
    public string get_phldrT();
    public void set_phldrT(string value);
    public bool get_phldr();
    public void set_phldr(bool value);
    public bool get_phldrSpecified();
    public void set_phldrSpecified(bool value);
    public int get_custAng();
    public void set_custAng(int value);
    public bool get_custAngSpecified();
    public void set_custAngSpecified(bool value);
    public bool get_custFlipVert();
    public void set_custFlipVert(bool value);
    public bool get_custFlipVertSpecified();
    public void set_custFlipVertSpecified(bool value);
    public bool get_custFlipHor();
    public void set_custFlipHor(bool value);
    public bool get_custFlipHorSpecified();
    public void set_custFlipHorSpecified(bool value);
    public int get_custSzX();
    public void set_custSzX(int value);
    public bool get_custSzXSpecified();
    public void set_custSzXSpecified(bool value);
    public int get_custSzY();
    public void set_custSzY(int value);
    public bool get_custSzYSpecified();
    public void set_custSzYSpecified(bool value);
    public int get_custScaleX();
    public void set_custScaleX(int value);
    public bool get_custScaleXSpecified();
    public void set_custScaleXSpecified(bool value);
    public int get_custScaleY();
    public void set_custScaleY(int value);
    public bool get_custScaleYSpecified();
    public void set_custScaleYSpecified(bool value);
    public bool get_custT();
    public void set_custT(bool value);
    public bool get_custTSpecified();
    public void set_custTSpecified(bool value);
    public int get_custLinFactX();
    public void set_custLinFactX(int value);
    public bool get_custLinFactXSpecified();
    public void set_custLinFactXSpecified(bool value);
    public int get_custLinFactY();
    public void set_custLinFactY(int value);
    public bool get_custLinFactYSpecified();
    public void set_custLinFactYSpecified(bool value);
    public int get_custLinFactNeighborX();
    public void set_custLinFactNeighborX(int value);
    public bool get_custLinFactNeighborXSpecified();
    public void set_custLinFactNeighborXSpecified(bool value);
    public int get_custLinFactNeighborY();
    public void set_custLinFactNeighborY(int value);
    public bool get_custLinFactNeighborYSpecified();
    public void set_custLinFactNeighborYSpecified(bool value);
    public int get_custRadScaleRad();
    public void set_custRadScaleRad(int value);
    public bool get_custRadScaleRadSpecified();
    public void set_custRadScaleRadSpecified(bool value);
    public int get_custRadScaleInc();
    public void set_custRadScaleInc(int value);
    public bool get_custRadScaleIncSpecified();
    public void set_custRadScaleIncSpecified(bool value);
}
[DebuggerStepThroughAttribute]
[DesignerCategoryAttribute("code")]
[XmlTypeAttribute]
[XmlRootAttribute]
public class NPOI.OpenXmlFormats.Dml.Diagram.CT_ForEach : object {
    private List`1<object> itemsField;
    private string nameField;
    private string refField;
    private List`1<ST_AxisType> axisField;
    private List`1<ST_ElementType> ptTypeField;
    private List`1<bool> hideLastTransField;
    private List`1<int> stField;
    private List`1<UInt32> cntField;
    private List`1<int> stepField;
    [XmlElementAttribute("alg", "NPOI.OpenXmlFormats.Dml.Diagram.CT_Algorithm")]
[XmlElementAttribute("choose", "NPOI.OpenXmlFormats.Dml.Diagram.CT_Choose")]
[XmlElementAttribute("constrLst", "NPOI.OpenXmlFormats.Dml.Diagram.CT_Constraints")]
[XmlElementAttribute("extLst", "NPOI.OpenXmlFormats.Dml.CT_OfficeArtExtensionList")]
[XmlElementAttribute("forEach", "NPOI.OpenXmlFormats.Dml.Diagram.CT_ForEach")]
[XmlElementAttribute("layoutNode", "NPOI.OpenXmlFormats.Dml.Diagram.CT_LayoutNode")]
[XmlElementAttribute("presOf", "NPOI.OpenXmlFormats.Dml.Diagram.CT_PresentationOf")]
[XmlElementAttribute("ruleLst", "NPOI.OpenXmlFormats.Dml.Diagram.CT_Rules")]
[XmlElementAttribute("shape", "NPOI.OpenXmlFormats.Dml.Diagram.CT_Shape")]
public List`1<object> Items { get; public set; }
    [XmlAttributeAttribute]
[DefaultValueAttribute("")]
public string name { get; public set; }
    [XmlAttributeAttribute]
[DefaultValueAttribute("")]
public string ref { get; public set; }
    [XmlAttributeAttribute]
public List`1<ST_AxisType> axis { get; public set; }
    [XmlAttributeAttribute]
public List`1<ST_ElementType> ptType { get; public set; }
    [XmlAttributeAttribute]
public List`1<bool> hideLastTrans { get; public set; }
    [XmlAttributeAttribute]
public List`1<int> st { get; public set; }
    [XmlAttributeAttribute]
public List`1<UInt32> cnt { get; public set; }
    [XmlAttributeAttribute]
public List`1<int> step { get; public set; }
    public List`1<object> get_Items();
    public void set_Items(List`1<object> value);
    public string get_name();
    public void set_name(string value);
    public string get_ref();
    public void set_ref(string value);
    public List`1<ST_AxisType> get_axis();
    public void set_axis(List`1<ST_AxisType> value);
    public List`1<ST_ElementType> get_ptType();
    public void set_ptType(List`1<ST_ElementType> value);
    public List`1<bool> get_hideLastTrans();
    public void set_hideLastTrans(List`1<bool> value);
    public List`1<int> get_st();
    public void set_st(List`1<int> value);
    public List`1<UInt32> get_cnt();
    public void set_cnt(List`1<UInt32> value);
    public List`1<int> get_step();
    public void set_step(List`1<int> value);
}
[DebuggerStepThroughAttribute]
[DesignerCategoryAttribute("code")]
[XmlTypeAttribute]
[XmlRootAttribute]
public class NPOI.OpenXmlFormats.Dml.Diagram.CT_HierBranchStyle : object {
    private ST_HierBranchStyle valField;
    [XmlAttributeAttribute]
[DefaultValueAttribute("Mono.Cecil.CustomAttributeArgument")]
public ST_HierBranchStyle val { get; public set; }
    public ST_HierBranchStyle get_val();
    public void set_val(ST_HierBranchStyle value);
}
[DebuggerStepThroughAttribute]
[DesignerCategoryAttribute("code")]
[XmlTypeAttribute]
[XmlRootAttribute]
public class NPOI.OpenXmlFormats.Dml.Diagram.CT_LayoutNode : object {
    private List`1<object> itemsField;
    private string nameField;
    private string styleLblField;
    private ST_ChildOrderType chOrderField;
    private string moveWithField;
    [XmlElementAttribute("alg", "NPOI.OpenXmlFormats.Dml.Diagram.CT_Algorithm")]
[XmlElementAttribute("choose", "NPOI.OpenXmlFormats.Dml.Diagram.CT_Choose")]
[XmlElementAttribute("constrLst", "NPOI.OpenXmlFormats.Dml.Diagram.CT_Constraints")]
[XmlElementAttribute("extLst", "NPOI.OpenXmlFormats.Dml.CT_OfficeArtExtensionList")]
[XmlElementAttribute("forEach", "NPOI.OpenXmlFormats.Dml.Diagram.CT_ForEach")]
[XmlElementAttribute("layoutNode", "NPOI.OpenXmlFormats.Dml.Diagram.CT_LayoutNode")]
[XmlElementAttribute("presOf", "NPOI.OpenXmlFormats.Dml.Diagram.CT_PresentationOf")]
[XmlElementAttribute("ruleLst", "NPOI.OpenXmlFormats.Dml.Diagram.CT_Rules")]
[XmlElementAttribute("shape", "NPOI.OpenXmlFormats.Dml.Diagram.CT_Shape")]
[XmlElementAttribute("varLst", "NPOI.OpenXmlFormats.Dml.Diagram.CT_LayoutVariablePropertySet")]
public List`1<object> Items { get; public set; }
    [XmlAttributeAttribute]
[DefaultValueAttribute("")]
public string name { get; public set; }
    [XmlAttributeAttribute]
[DefaultValueAttribute("")]
public string styleLbl { get; public set; }
    [XmlAttributeAttribute]
[DefaultValueAttribute("Mono.Cecil.CustomAttributeArgument")]
public ST_ChildOrderType chOrder { get; public set; }
    [XmlAttributeAttribute]
[DefaultValueAttribute("")]
public string moveWith { get; public set; }
    public List`1<object> get_Items();
    public void set_Items(List`1<object> value);
    public string get_name();
    public void set_name(string value);
    public string get_styleLbl();
    public void set_styleLbl(string value);
    public ST_ChildOrderType get_chOrder();
    public void set_chOrder(ST_ChildOrderType value);
    public string get_moveWith();
    public void set_moveWith(string value);
}
[DebuggerStepThroughAttribute]
[DesignerCategoryAttribute("code")]
[XmlTypeAttribute]
[XmlRootAttribute]
public class NPOI.OpenXmlFormats.Dml.Diagram.CT_LayoutVariablePropertySet : object {
    private CT_OrgChart orgChartField;
    private CT_ChildMax chMaxField;
    private CT_ChildPref chPrefField;
    private CT_BulletEnabled bulletEnabledField;
    private CT_Direction dirField;
    private CT_HierBranchStyle hierBranchField;
    private CT_AnimOne animOneField;
    private CT_AnimLvl animLvlField;
    private CT_ResizeHandles resizeHandlesField;
    [XmlElementAttribute]
public CT_OrgChart orgChart { get; public set; }
    [XmlElementAttribute]
public CT_ChildMax chMax { get; public set; }
    [XmlElementAttribute]
public CT_ChildPref chPref { get; public set; }
    [XmlElementAttribute]
public CT_BulletEnabled bulletEnabled { get; public set; }
    [XmlElementAttribute]
public CT_Direction dir { get; public set; }
    [XmlElementAttribute]
public CT_HierBranchStyle hierBranch { get; public set; }
    [XmlElementAttribute]
public CT_AnimOne animOne { get; public set; }
    [XmlElementAttribute]
public CT_AnimLvl animLvl { get; public set; }
    [XmlElementAttribute]
public CT_ResizeHandles resizeHandles { get; public set; }
    public CT_OrgChart get_orgChart();
    public void set_orgChart(CT_OrgChart value);
    public CT_ChildMax get_chMax();
    public void set_chMax(CT_ChildMax value);
    public CT_ChildPref get_chPref();
    public void set_chPref(CT_ChildPref value);
    public CT_BulletEnabled get_bulletEnabled();
    public void set_bulletEnabled(CT_BulletEnabled value);
    public CT_Direction get_dir();
    public void set_dir(CT_Direction value);
    public CT_HierBranchStyle get_hierBranch();
    public void set_hierBranch(CT_HierBranchStyle value);
    public CT_AnimOne get_animOne();
    public void set_animOne(CT_AnimOne value);
    public CT_AnimLvl get_animLvl();
    public void set_animLvl(CT_AnimLvl value);
    public CT_ResizeHandles get_resizeHandles();
    public void set_resizeHandles(CT_ResizeHandles value);
}
[DebuggerStepThroughAttribute]
[DesignerCategoryAttribute("code")]
[XmlTypeAttribute]
[XmlRootAttribute]
public class NPOI.OpenXmlFormats.Dml.Diagram.CT_Name : object {
    private string langField;
    private string valField;
    [XmlAttributeAttribute]
[DefaultValueAttribute("")]
public string lang { get; public set; }
    [XmlAttributeAttribute]
public string val { get; public set; }
    public string get_lang();
    public void set_lang(string value);
    public string get_val();
    public void set_val(string value);
}
[DebuggerStepThroughAttribute]
[DesignerCategoryAttribute("code")]
[XmlTypeAttribute]
[XmlRootAttribute]
public class NPOI.OpenXmlFormats.Dml.Diagram.CT_NumericRule : object {
    private CT_OfficeArtExtensionList extLstField;
    private ST_ConstraintType typeField;
    private ST_ConstraintRelationship forField;
    private string forNameField;
    private List`1<ST_ElementType> ptTypeField;
    private double valField;
    private double factField;
    private double maxField;
    [XmlElementAttribute]
public CT_OfficeArtExtensionList extLst { get; public set; }
    [XmlAttributeAttribute]
public ST_ConstraintType type { get; public set; }
    [XmlAttributeAttribute]
[DefaultValueAttribute("Mono.Cecil.CustomAttributeArgument")]
public ST_ConstraintRelationship for { get; public set; }
    [XmlAttributeAttribute]
[DefaultValueAttribute("")]
public string forName { get; public set; }
    [XmlAttributeAttribute]
public List`1<ST_ElementType> ptType { get; public set; }
    [XmlAttributeAttribute]
[DefaultValueAttribute("не число")]
public double val { get; public set; }
    [XmlAttributeAttribute]
[DefaultValueAttribute("не число")]
public double fact { get; public set; }
    [XmlAttributeAttribute]
[DefaultValueAttribute("не число")]
public double max { get; public set; }
    public CT_OfficeArtExtensionList get_extLst();
    public void set_extLst(CT_OfficeArtExtensionList value);
    public ST_ConstraintType get_type();
    public void set_type(ST_ConstraintType value);
    public ST_ConstraintRelationship get_for();
    public void set_for(ST_ConstraintRelationship value);
    public string get_forName();
    public void set_forName(string value);
    public List`1<ST_ElementType> get_ptType();
    public void set_ptType(List`1<ST_ElementType> value);
    public double get_val();
    public void set_val(double value);
    public double get_fact();
    public void set_fact(double value);
    public double get_max();
    public void set_max(double value);
}
[DebuggerStepThroughAttribute]
[DesignerCategoryAttribute("code")]
[XmlTypeAttribute]
[XmlRootAttribute]
public class NPOI.OpenXmlFormats.Dml.Diagram.CT_OrgChart : object {
    private bool valField;
    [XmlAttributeAttribute]
[DefaultValueAttribute("False")]
public bool val { get; public set; }
    public bool get_val();
    public void set_val(bool value);
}
[DebuggerStepThroughAttribute]
[DesignerCategoryAttribute("code")]
[XmlTypeAttribute]
[XmlRootAttribute]
public class NPOI.OpenXmlFormats.Dml.Diagram.CT_Otherwise : object {
    private List`1<object> itemsField;
    private string nameField;
    [XmlElementAttribute("alg", "NPOI.OpenXmlFormats.Dml.Diagram.CT_Algorithm")]
[XmlElementAttribute("choose", "NPOI.OpenXmlFormats.Dml.Diagram.CT_Choose")]
[XmlElementAttribute("constrLst", "NPOI.OpenXmlFormats.Dml.Diagram.CT_Constraints")]
[XmlElementAttribute("extLst", "NPOI.OpenXmlFormats.Dml.CT_OfficeArtExtensionList")]
[XmlElementAttribute("forEach", "NPOI.OpenXmlFormats.Dml.Diagram.CT_ForEach")]
[XmlElementAttribute("layoutNode", "NPOI.OpenXmlFormats.Dml.Diagram.CT_LayoutNode")]
[XmlElementAttribute("presOf", "NPOI.OpenXmlFormats.Dml.Diagram.CT_PresentationOf")]
[XmlElementAttribute("ruleLst", "NPOI.OpenXmlFormats.Dml.Diagram.CT_Rules")]
[XmlElementAttribute("shape", "NPOI.OpenXmlFormats.Dml.Diagram.CT_Shape")]
public List`1<object> Items { get; public set; }
    [XmlAttributeAttribute]
[DefaultValueAttribute("")]
public string name { get; public set; }
    public List`1<object> get_Items();
    public void set_Items(List`1<object> value);
    public string get_name();
    public void set_name(string value);
}
[DebuggerStepThroughAttribute]
[DesignerCategoryAttribute("code")]
[XmlTypeAttribute]
[XmlRootAttribute]
public class NPOI.OpenXmlFormats.Dml.Diagram.CT_Parameter : object {
    private ST_ParameterId typeField;
    private string valField;
    [XmlAttributeAttribute]
public ST_ParameterId type { get; public set; }
    [XmlAttributeAttribute]
public string val { get; public set; }
    public ST_ParameterId get_type();
    public void set_type(ST_ParameterId value);
    public string get_val();
    public void set_val(string value);
}
[DebuggerStepThroughAttribute]
[DesignerCategoryAttribute("code")]
[XmlTypeAttribute]
[XmlRootAttribute]
public class NPOI.OpenXmlFormats.Dml.Diagram.CT_PresentationOf : object {
    private CT_OfficeArtExtensionList extLstField;
    private List`1<ST_AxisType> axisField;
    private List`1<ST_ElementType> ptTypeField;
    private List`1<bool> hideLastTransField;
    private List`1<int> stField;
    private List`1<UInt32> cntField;
    private List`1<int> stepField;
    [XmlElementAttribute]
public CT_OfficeArtExtensionList extLst { get; public set; }
    [XmlAttributeAttribute]
public List`1<ST_AxisType> axis { get; public set; }
    [XmlAttributeAttribute]
public List`1<ST_ElementType> ptType { get; public set; }
    [XmlAttributeAttribute]
public List`1<bool> hideLastTrans { get; public set; }
    [XmlAttributeAttribute]
public List`1<int> st { get; public set; }
    [XmlAttributeAttribute]
public List`1<UInt32> cnt { get; public set; }
    [XmlAttributeAttribute]
public List`1<int> step { get; public set; }
    public CT_OfficeArtExtensionList get_extLst();
    public void set_extLst(CT_OfficeArtExtensionList value);
    public List`1<ST_AxisType> get_axis();
    public void set_axis(List`1<ST_AxisType> value);
    public List`1<ST_ElementType> get_ptType();
    public void set_ptType(List`1<ST_ElementType> value);
    public List`1<bool> get_hideLastTrans();
    public void set_hideLastTrans(List`1<bool> value);
    public List`1<int> get_st();
    public void set_st(List`1<int> value);
    public List`1<UInt32> get_cnt();
    public void set_cnt(List`1<UInt32> value);
    public List`1<int> get_step();
    public void set_step(List`1<int> value);
}
[DebuggerStepThroughAttribute]
[DesignerCategoryAttribute("code")]
[XmlTypeAttribute]
[XmlRootAttribute]
public class NPOI.OpenXmlFormats.Dml.Diagram.CT_Pt : object {
    private CT_ElemPropSet prSetField;
    private CT_ShapeProperties spPrField;
    private CT_TextBody tField;
    private CT_OfficeArtExtensionList extLstField;
    private string modelIdField;
    private ST_PtType typeField;
    private string cxnIdField;
    [XmlElementAttribute]
public CT_ElemPropSet prSet { get; public set; }
    [XmlElementAttribute]
public CT_ShapeProperties spPr { get; public set; }
    [XmlElementAttribute]
public CT_TextBody t { get; public set; }
    [XmlElementAttribute]
public CT_OfficeArtExtensionList extLst { get; public set; }
    [XmlAttributeAttribute]
public string modelId { get; public set; }
    [XmlAttributeAttribute]
[DefaultValueAttribute("Mono.Cecil.CustomAttributeArgument")]
public ST_PtType type { get; public set; }
    [XmlAttributeAttribute]
[DefaultValueAttribute("0")]
public string cxnId { get; public set; }
    public CT_ElemPropSet get_prSet();
    public void set_prSet(CT_ElemPropSet value);
    public CT_ShapeProperties get_spPr();
    public void set_spPr(CT_ShapeProperties value);
    public CT_TextBody get_t();
    public void set_t(CT_TextBody value);
    public CT_OfficeArtExtensionList get_extLst();
    public void set_extLst(CT_OfficeArtExtensionList value);
    public string get_modelId();
    public void set_modelId(string value);
    public ST_PtType get_type();
    public void set_type(ST_PtType value);
    public string get_cxnId();
    public void set_cxnId(string value);
}
[DebuggerStepThroughAttribute]
[DesignerCategoryAttribute("code")]
[XmlTypeAttribute]
[XmlRootAttribute]
public class NPOI.OpenXmlFormats.Dml.Diagram.CT_PtList : object {
    private List`1<CT_Pt> ptField;
    [XmlElementAttribute("pt")]
public List`1<CT_Pt> pt { get; public set; }
    public List`1<CT_Pt> get_pt();
    public void set_pt(List`1<CT_Pt> value);
}
[DebuggerStepThroughAttribute]
[DesignerCategoryAttribute("code")]
[XmlTypeAttribute]
[XmlRootAttribute("relIds")]
public class NPOI.OpenXmlFormats.Dml.Diagram.CT_RelIds : object {
    private string dmField;
    private string loField;
    private string qsField;
    private string csField;
    [XmlAttributeAttribute]
[DefaultValueAttribute("")]
public string dm { get; public set; }
    [XmlAttributeAttribute]
[DefaultValueAttribute("")]
public string lo { get; public set; }
    [XmlAttributeAttribute]
[DefaultValueAttribute("")]
public string qs { get; public set; }
    [XmlAttributeAttribute]
[DefaultValueAttribute("")]
public string cs { get; public set; }
    public string get_dm();
    public void set_dm(string value);
    public string get_lo();
    public void set_lo(string value);
    public string get_qs();
    public void set_qs(string value);
    public string get_cs();
    public void set_cs(string value);
}
[DebuggerStepThroughAttribute]
[DesignerCategoryAttribute("code")]
[XmlTypeAttribute]
[XmlRootAttribute]
public class NPOI.OpenXmlFormats.Dml.Diagram.CT_ResizeHandles : object {
    private ST_ResizeHandlesStr valField;
    [XmlAttributeAttribute]
[DefaultValueAttribute("Mono.Cecil.CustomAttributeArgument")]
public ST_ResizeHandlesStr val { get; public set; }
    public ST_ResizeHandlesStr get_val();
    public void set_val(ST_ResizeHandlesStr value);
}
[DebuggerStepThroughAttribute]
[DesignerCategoryAttribute("code")]
[XmlTypeAttribute]
[XmlRootAttribute]
public class NPOI.OpenXmlFormats.Dml.Diagram.CT_Rules : object {
    private List`1<CT_NumericRule> ruleField;
    [XmlElementAttribute("rule")]
public List`1<CT_NumericRule> rule { get; public set; }
    public List`1<CT_NumericRule> get_rule();
    public void set_rule(List`1<CT_NumericRule> value);
}
[DebuggerStepThroughAttribute]
[DesignerCategoryAttribute("code")]
[XmlTypeAttribute]
[XmlRootAttribute]
public class NPOI.OpenXmlFormats.Dml.Diagram.CT_SampleData : object {
    private CT_DataModel dataModelField;
    private bool useDefField;
    [XmlElementAttribute]
public CT_DataModel dataModel { get; public set; }
    [XmlAttributeAttribute]
[DefaultValueAttribute("False")]
public bool useDef { get; public set; }
    public CT_DataModel get_dataModel();
    public void set_dataModel(CT_DataModel value);
    public bool get_useDef();
    public void set_useDef(bool value);
}
[DebuggerStepThroughAttribute]
[DesignerCategoryAttribute("code")]
[XmlTypeAttribute]
[XmlRootAttribute]
public class NPOI.OpenXmlFormats.Dml.Diagram.CT_SDCategories : object {
    private List`1<CT_SDCategory> catField;
    [XmlElementAttribute("cat")]
public List`1<CT_SDCategory> cat { get; public set; }
    public List`1<CT_SDCategory> get_cat();
    public void set_cat(List`1<CT_SDCategory> value);
}
[DebuggerStepThroughAttribute]
[DesignerCategoryAttribute("code")]
[XmlTypeAttribute]
[XmlRootAttribute]
public class NPOI.OpenXmlFormats.Dml.Diagram.CT_SDCategory : object {
    private string typeField;
    private UInt32 priField;
    [XmlAttributeAttribute]
public string type { get; public set; }
    [XmlAttributeAttribute]
public UInt32 pri { get; public set; }
    public string get_type();
    public void set_type(string value);
    public UInt32 get_pri();
    public void set_pri(UInt32 value);
}
[DebuggerStepThroughAttribute]
[DesignerCategoryAttribute("code")]
[XmlTypeAttribute]
[XmlRootAttribute]
public class NPOI.OpenXmlFormats.Dml.Diagram.CT_SDDescription : object {
    private string langField;
    private string valField;
    [XmlAttributeAttribute]
[DefaultValueAttribute("")]
public string lang { get; public set; }
    [XmlAttributeAttribute]
public string val { get; public set; }
    public string get_lang();
    public void set_lang(string value);
    public string get_val();
    public void set_val(string value);
}
[DebuggerStepThroughAttribute]
[DesignerCategoryAttribute("code")]
[XmlTypeAttribute]
[XmlRootAttribute]
public class NPOI.OpenXmlFormats.Dml.Diagram.CT_SDName : object {
    private string langField;
    private string valField;
    [XmlAttributeAttribute]
[DefaultValueAttribute("")]
public string lang { get; public set; }
    [XmlAttributeAttribute]
public string val { get; public set; }
    public string get_lang();
    public void set_lang(string value);
    public string get_val();
    public void set_val(string value);
}
[DebuggerStepThroughAttribute]
[DesignerCategoryAttribute("code")]
[XmlTypeAttribute]
[XmlRootAttribute]
public class NPOI.OpenXmlFormats.Dml.Diagram.CT_Shape : object {
    private List`1<CT_Adj> adjLstField;
    private CT_OfficeArtExtensionList extLstField;
    private double rotField;
    private string typeField;
    private string blipField;
    private int zOrderOffField;
    private bool hideGeomField;
    private bool lkTxEntryField;
    private bool blipPhldrField;
    [XmlArrayAttribute]
[XmlArrayItemAttribute("adj")]
public List`1<CT_Adj> adjLst { get; public set; }
    [XmlElementAttribute]
public CT_OfficeArtExtensionList extLst { get; public set; }
    [XmlAttributeAttribute]
[DefaultValueAttribute("0")]
public double rot { get; public set; }
    [XmlAttributeAttribute]
[DefaultValueAttribute("none")]
public string type { get; public set; }
    [XmlAttributeAttribute]
[DefaultValueAttribute("")]
public string blip { get; public set; }
    [XmlAttributeAttribute]
[DefaultValueAttribute("0")]
public int zOrderOff { get; public set; }
    [XmlAttributeAttribute]
[DefaultValueAttribute("False")]
public bool hideGeom { get; public set; }
    [XmlAttributeAttribute]
[DefaultValueAttribute("False")]
public bool lkTxEntry { get; public set; }
    [XmlAttributeAttribute]
[DefaultValueAttribute("False")]
public bool blipPhldr { get; public set; }
    public List`1<CT_Adj> get_adjLst();
    public void set_adjLst(List`1<CT_Adj> value);
    public CT_OfficeArtExtensionList get_extLst();
    public void set_extLst(CT_OfficeArtExtensionList value);
    public double get_rot();
    public void set_rot(double value);
    public string get_type();
    public void set_type(string value);
    public string get_blip();
    public void set_blip(string value);
    public int get_zOrderOff();
    public void set_zOrderOff(int value);
    public bool get_hideGeom();
    public void set_hideGeom(bool value);
    public bool get_lkTxEntry();
    public void set_lkTxEntry(bool value);
    public bool get_blipPhldr();
    public void set_blipPhldr(bool value);
}
[DebuggerStepThroughAttribute]
[DesignerCategoryAttribute("code")]
[XmlTypeAttribute]
[XmlRootAttribute("styleDef")]
public class NPOI.OpenXmlFormats.Dml.Diagram.CT_StyleDefinition : object {
    private List`1<CT_SDName> titleField;
    private List`1<CT_SDDescription> descField;
    private List`1<CT_SDCategory> catLstField;
    private CT_Scene3D scene3dField;
    private List`1<CT_StyleLabel> styleLblField;
    private CT_OfficeArtExtensionList extLstField;
    private string uniqueIdField;
    private string minVerField;
    [XmlElementAttribute("title")]
public List`1<CT_SDName> title { get; public set; }
    [XmlElementAttribute("desc")]
public List`1<CT_SDDescription> desc { get; public set; }
    [XmlArrayAttribute]
[XmlArrayItemAttribute("cat")]
public List`1<CT_SDCategory> catLst { get; public set; }
    [XmlElementAttribute]
public CT_Scene3D scene3d { get; public set; }
    [XmlElementAttribute("styleLbl")]
public List`1<CT_StyleLabel> styleLbl { get; public set; }
    [XmlElementAttribute]
public CT_OfficeArtExtensionList extLst { get; public set; }
    [XmlAttributeAttribute]
[DefaultValueAttribute("")]
public string uniqueId { get; public set; }
    [XmlAttributeAttribute]
[DefaultValueAttribute("http://schemas.openxmlformats.org/drawingml/2006/diagram")]
public string minVer { get; public set; }
    public List`1<CT_SDName> get_title();
    public void set_title(List`1<CT_SDName> value);
    public List`1<CT_SDDescription> get_desc();
    public void set_desc(List`1<CT_SDDescription> value);
    public List`1<CT_SDCategory> get_catLst();
    public void set_catLst(List`1<CT_SDCategory> value);
    public CT_Scene3D get_scene3d();
    public void set_scene3d(CT_Scene3D value);
    public List`1<CT_StyleLabel> get_styleLbl();
    public void set_styleLbl(List`1<CT_StyleLabel> value);
    public CT_OfficeArtExtensionList get_extLst();
    public void set_extLst(CT_OfficeArtExtensionList value);
    public string get_uniqueId();
    public void set_uniqueId(string value);
    public string get_minVer();
    public void set_minVer(string value);
}
[DebuggerStepThroughAttribute]
[DesignerCategoryAttribute("code")]
[XmlTypeAttribute]
[XmlRootAttribute("styleDefHdr")]
public class NPOI.OpenXmlFormats.Dml.Diagram.CT_StyleDefinitionHeader : object {
    private List`1<CT_SDName> titleField;
    private List`1<CT_SDDescription> descField;
    private List`1<CT_SDCategory> catLstField;
    private CT_OfficeArtExtensionList extLstField;
    private string uniqueIdField;
    private string minVerField;
    private int resIdField;
    [XmlElementAttribute("title")]
public List`1<CT_SDName> title { get; public set; }
    [XmlElementAttribute("desc")]
public List`1<CT_SDDescription> desc { get; public set; }
    [XmlArrayAttribute]
[XmlArrayItemAttribute("cat")]
public List`1<CT_SDCategory> catLst { get; public set; }
    [XmlElementAttribute]
public CT_OfficeArtExtensionList extLst { get; public set; }
    [XmlAttributeAttribute]
public string uniqueId { get; public set; }
    [XmlAttributeAttribute]
[DefaultValueAttribute("http://schemas.openxmlformats.org/drawingml/2006/diagram")]
public string minVer { get; public set; }
    [XmlAttributeAttribute]
[DefaultValueAttribute("0")]
public int resId { get; public set; }
    public List`1<CT_SDName> get_title();
    public void set_title(List`1<CT_SDName> value);
    public List`1<CT_SDDescription> get_desc();
    public void set_desc(List`1<CT_SDDescription> value);
    public List`1<CT_SDCategory> get_catLst();
    public void set_catLst(List`1<CT_SDCategory> value);
    public CT_OfficeArtExtensionList get_extLst();
    public void set_extLst(CT_OfficeArtExtensionList value);
    public string get_uniqueId();
    public void set_uniqueId(string value);
    public string get_minVer();
    public void set_minVer(string value);
    public int get_resId();
    public void set_resId(int value);
}
[DebuggerStepThroughAttribute]
[DesignerCategoryAttribute("code")]
[XmlTypeAttribute]
[XmlRootAttribute("styleDefHdrLst")]
public class NPOI.OpenXmlFormats.Dml.Diagram.CT_StyleDefinitionHeaderLst : object {
    private List`1<CT_StyleDefinitionHeader> styleDefHdrField;
    [XmlElementAttribute("styleDefHdr")]
public List`1<CT_StyleDefinitionHeader> styleDefHdr { get; public set; }
    public List`1<CT_StyleDefinitionHeader> get_styleDefHdr();
    public void set_styleDefHdr(List`1<CT_StyleDefinitionHeader> value);
}
[DebuggerStepThroughAttribute]
[DesignerCategoryAttribute("code")]
[XmlTypeAttribute]
[XmlRootAttribute]
public class NPOI.OpenXmlFormats.Dml.Diagram.CT_StyleLabel : object {
    private CT_Scene3D scene3dField;
    private CT_Shape3D sp3dField;
    private CT_TextProps txPrField;
    private CT_ShapeStyle styleField;
    private CT_OfficeArtExtensionList extLstField;
    private string nameField;
    [XmlElementAttribute]
public CT_Scene3D scene3d { get; public set; }
    [XmlElementAttribute]
public CT_Shape3D sp3d { get; public set; }
    [XmlElementAttribute]
public CT_TextProps txPr { get; public set; }
    [XmlElementAttribute]
public CT_ShapeStyle style { get; public set; }
    [XmlElementAttribute]
public CT_OfficeArtExtensionList extLst { get; public set; }
    [XmlAttributeAttribute]
public string name { get; public set; }
    public CT_Scene3D get_scene3d();
    public void set_scene3d(CT_Scene3D value);
    public CT_Shape3D get_sp3d();
    public void set_sp3d(CT_Shape3D value);
    public CT_TextProps get_txPr();
    public void set_txPr(CT_TextProps value);
    public CT_ShapeStyle get_style();
    public void set_style(CT_ShapeStyle value);
    public CT_OfficeArtExtensionList get_extLst();
    public void set_extLst(CT_OfficeArtExtensionList value);
    public string get_name();
    public void set_name(string value);
}
[DebuggerStepThroughAttribute]
[DesignerCategoryAttribute("code")]
[XmlTypeAttribute]
[XmlRootAttribute]
public class NPOI.OpenXmlFormats.Dml.Diagram.CT_TextProps : object {
    private CT_Shape3D sp3dField;
    private CT_FlatText flatTxField;
    [XmlElementAttribute]
public CT_Shape3D sp3d { get; public set; }
    [XmlElementAttribute]
public CT_FlatText flatTx { get; public set; }
    public CT_Shape3D get_sp3d();
    public void set_sp3d(CT_Shape3D value);
    public CT_FlatText get_flatTx();
    public void set_flatTx(CT_FlatText value);
}
[DebuggerStepThroughAttribute]
[DesignerCategoryAttribute("code")]
[XmlTypeAttribute]
[XmlRootAttribute]
public class NPOI.OpenXmlFormats.Dml.Diagram.CT_When : object {
    private List`1<object> itemsField;
    private string nameField;
    private List`1<ST_AxisType> axisField;
    private List`1<ST_ElementType> ptTypeField;
    private List`1<bool> hideLastTransField;
    private List`1<int> stField;
    private List`1<UInt32> cntField;
    private List`1<int> stepField;
    private ST_FunctionType funcField;
    private string argField;
    private ST_FunctionOperator opField;
    private string valField;
    [XmlElementAttribute("alg", "NPOI.OpenXmlFormats.Dml.Diagram.CT_Algorithm")]
[XmlElementAttribute("choose", "NPOI.OpenXmlFormats.Dml.Diagram.CT_Choose")]
[XmlElementAttribute("constrLst", "NPOI.OpenXmlFormats.Dml.Diagram.CT_Constraints")]
[XmlElementAttribute("extLst", "NPOI.OpenXmlFormats.Dml.CT_OfficeArtExtensionList")]
[XmlElementAttribute("forEach", "NPOI.OpenXmlFormats.Dml.Diagram.CT_ForEach")]
[XmlElementAttribute("layoutNode", "NPOI.OpenXmlFormats.Dml.Diagram.CT_LayoutNode")]
[XmlElementAttribute("presOf", "NPOI.OpenXmlFormats.Dml.Diagram.CT_PresentationOf")]
[XmlElementAttribute("ruleLst", "NPOI.OpenXmlFormats.Dml.Diagram.CT_Rules")]
[XmlElementAttribute("shape", "NPOI.OpenXmlFormats.Dml.Diagram.CT_Shape")]
public List`1<object> Items { get; public set; }
    [XmlAttributeAttribute]
[DefaultValueAttribute("")]
public string name { get; public set; }
    [XmlAttributeAttribute]
public List`1<ST_AxisType> axis { get; public set; }
    [XmlAttributeAttribute]
public List`1<ST_ElementType> ptType { get; public set; }
    [XmlAttributeAttribute]
public List`1<bool> hideLastTrans { get; public set; }
    [XmlAttributeAttribute]
public List`1<int> st { get; public set; }
    [XmlAttributeAttribute]
public List`1<UInt32> cnt { get; public set; }
    [XmlAttributeAttribute]
public List`1<int> step { get; public set; }
    [XmlAttributeAttribute]
public ST_FunctionType func { get; public set; }
    [XmlAttributeAttribute]
[DefaultValueAttribute("none")]
public string arg { get; public set; }
    [XmlAttributeAttribute]
public ST_FunctionOperator op { get; public set; }
    [XmlAttributeAttribute]
public string val { get; public set; }
    public List`1<object> get_Items();
    public void set_Items(List`1<object> value);
    public string get_name();
    public void set_name(string value);
    public List`1<ST_AxisType> get_axis();
    public void set_axis(List`1<ST_AxisType> value);
    public List`1<ST_ElementType> get_ptType();
    public void set_ptType(List`1<ST_ElementType> value);
    public List`1<bool> get_hideLastTrans();
    public void set_hideLastTrans(List`1<bool> value);
    public List`1<int> get_st();
    public void set_st(List`1<int> value);
    public List`1<UInt32> get_cnt();
    public void set_cnt(List`1<UInt32> value);
    public List`1<int> get_step();
    public void set_step(List`1<int> value);
    public ST_FunctionType get_func();
    public void set_func(ST_FunctionType value);
    public string get_arg();
    public void set_arg(string value);
    public ST_FunctionOperator get_op();
    public void set_op(ST_FunctionOperator value);
    public string get_val();
    public void set_val(string value);
}
[XmlTypeAttribute]
public enum NPOI.OpenXmlFormats.Dml.Diagram.ST_AlgorithmType : Enum {
    public int value__;
    public static ST_AlgorithmType composite;
    public static ST_AlgorithmType conn;
    public static ST_AlgorithmType cycle;
    public static ST_AlgorithmType hierChild;
    public static ST_AlgorithmType hierRoot;
    public static ST_AlgorithmType pyra;
    public static ST_AlgorithmType lin;
    public static ST_AlgorithmType sp;
    public static ST_AlgorithmType tx;
    public static ST_AlgorithmType snake;
}
[XmlTypeAttribute]
public enum NPOI.OpenXmlFormats.Dml.Diagram.ST_AnimLvlStr : Enum {
    public int value__;
    public static ST_AnimLvlStr none;
    public static ST_AnimLvlStr lvl;
    public static ST_AnimLvlStr ctr;
}
[XmlTypeAttribute]
public enum NPOI.OpenXmlFormats.Dml.Diagram.ST_AnimOneStr : Enum {
    public int value__;
    public static ST_AnimOneStr none;
    public static ST_AnimOneStr one;
    public static ST_AnimOneStr branch;
}
[XmlTypeAttribute]
public enum NPOI.OpenXmlFormats.Dml.Diagram.ST_AxisType : Enum {
    public int value__;
    public static ST_AxisType self;
    public static ST_AxisType ch;
    public static ST_AxisType des;
    public static ST_AxisType desOrSelf;
    public static ST_AxisType par;
    public static ST_AxisType ancst;
    public static ST_AxisType ancstOrSelf;
    public static ST_AxisType followSib;
    public static ST_AxisType precedSib;
    public static ST_AxisType follow;
    public static ST_AxisType preced;
    public static ST_AxisType root;
    public static ST_AxisType none;
}
[XmlTypeAttribute]
public enum NPOI.OpenXmlFormats.Dml.Diagram.ST_BoolOperator : Enum {
    public int value__;
    public static ST_BoolOperator none;
    public static ST_BoolOperator equ;
    public static ST_BoolOperator gte;
    public static ST_BoolOperator lte;
}
[XmlTypeAttribute]
public enum NPOI.OpenXmlFormats.Dml.Diagram.ST_ChildOrderType : Enum {
    public int value__;
    public static ST_ChildOrderType b;
    public static ST_ChildOrderType t;
}
[GeneratedCodeAttribute("System.Xml", "4.0.30319.17379")]
[XmlTypeAttribute]
public enum NPOI.OpenXmlFormats.Dml.Diagram.ST_ClrAppMethod : Enum {
    public int value__;
    public static ST_ClrAppMethod span;
    public static ST_ClrAppMethod cycle;
    public static ST_ClrAppMethod repeat;
}
[XmlTypeAttribute]
public enum NPOI.OpenXmlFormats.Dml.Diagram.ST_ConstraintRelationship : Enum {
    public int value__;
    public static ST_ConstraintRelationship self;
    public static ST_ConstraintRelationship ch;
    public static ST_ConstraintRelationship des;
}
[XmlTypeAttribute]
public enum NPOI.OpenXmlFormats.Dml.Diagram.ST_ConstraintType : Enum {
    public int value__;
    public static ST_ConstraintType none;
    public static ST_ConstraintType alignOff;
    public static ST_ConstraintType begMarg;
    public static ST_ConstraintType bendDist;
    public static ST_ConstraintType begPad;
    public static ST_ConstraintType b;
    public static ST_ConstraintType bMarg;
    public static ST_ConstraintType bOff;
    public static ST_ConstraintType ctrX;
    public static ST_ConstraintType ctrXOff;
    public static ST_ConstraintType ctrY;
    public static ST_ConstraintType ctrYOff;
    public static ST_ConstraintType connDist;
    public static ST_ConstraintType diam;
    public static ST_ConstraintType endMarg;
    public static ST_ConstraintType endPad;
    public static ST_ConstraintType h;
    public static ST_ConstraintType hArH;
    public static ST_ConstraintType hOff;
    public static ST_ConstraintType l;
    public static ST_ConstraintType lMarg;
    public static ST_ConstraintType lOff;
    public static ST_ConstraintType r;
    public static ST_ConstraintType rMarg;
    public static ST_ConstraintType rOff;
    public static ST_ConstraintType primFontSz;
    public static ST_ConstraintType pyraAcctRatio;
    public static ST_ConstraintType secFontSz;
    public static ST_ConstraintType sibSp;
    public static ST_ConstraintType secSibSp;
    public static ST_ConstraintType sp;
    public static ST_ConstraintType stemThick;
    public static ST_ConstraintType t;
    public static ST_ConstraintType tMarg;
    public static ST_ConstraintType tOff;
    public static ST_ConstraintType userA;
    public static ST_ConstraintType userB;
    public static ST_ConstraintType userC;
    public static ST_ConstraintType userD;
    public static ST_ConstraintType userE;
    public static ST_ConstraintType userF;
    public static ST_ConstraintType userG;
    public static ST_ConstraintType userH;
    public static ST_ConstraintType userI;
    public static ST_ConstraintType userJ;
    public static ST_ConstraintType userK;
    public static ST_ConstraintType userL;
    public static ST_ConstraintType userM;
    public static ST_ConstraintType userN;
    public static ST_ConstraintType userO;
    public static ST_ConstraintType userP;
    public static ST_ConstraintType userQ;
    public static ST_ConstraintType userR;
    public static ST_ConstraintType userS;
    public static ST_ConstraintType userT;
    public static ST_ConstraintType userU;
    public static ST_ConstraintType userV;
    public static ST_ConstraintType userW;
    public static ST_ConstraintType userX;
    public static ST_ConstraintType userY;
    public static ST_ConstraintType userZ;
    public static ST_ConstraintType w;
    public static ST_ConstraintType wArH;
    public static ST_ConstraintType wOff;
}
[XmlTypeAttribute]
public enum NPOI.OpenXmlFormats.Dml.Diagram.ST_CxnType : Enum {
    public int value__;
    public static ST_CxnType parOf;
    public static ST_CxnType presOf;
    public static ST_CxnType presParOf;
    public static ST_CxnType unknownRelationship;
}
[XmlTypeAttribute]
public enum NPOI.OpenXmlFormats.Dml.Diagram.ST_Direction : Enum {
    public int value__;
    public static ST_Direction norm;
    public static ST_Direction rev;
}
[XmlTypeAttribute]
public enum NPOI.OpenXmlFormats.Dml.Diagram.ST_ElementType : Enum {
    public int value__;
    public static ST_ElementType all;
    public static ST_ElementType doc;
    public static ST_ElementType node;
    public static ST_ElementType norm;
    public static ST_ElementType nonNorm;
    public static ST_ElementType asst;
    public static ST_ElementType nonAsst;
    public static ST_ElementType parTrans;
    public static ST_ElementType pres;
    public static ST_ElementType sibTrans;
}
[XmlTypeAttribute]
public enum NPOI.OpenXmlFormats.Dml.Diagram.ST_FunctionOperator : Enum {
    public int value__;
    public static ST_FunctionOperator equ;
    public static ST_FunctionOperator neq;
    public static ST_FunctionOperator gt;
    public static ST_FunctionOperator lt;
    public static ST_FunctionOperator gte;
    public static ST_FunctionOperator lte;
}
[XmlTypeAttribute]
public enum NPOI.OpenXmlFormats.Dml.Diagram.ST_FunctionType : Enum {
    public int value__;
    public static ST_FunctionType cnt;
    public static ST_FunctionType pos;
    public static ST_FunctionType revPos;
    public static ST_FunctionType posEven;
    public static ST_FunctionType posOdd;
    public static ST_FunctionType var;
    public static ST_FunctionType depth;
    public static ST_FunctionType maxDepth;
}
[XmlTypeAttribute]
public enum NPOI.OpenXmlFormats.Dml.Diagram.ST_HierBranchStyle : Enum {
    public int value__;
    public static ST_HierBranchStyle l;
    public static ST_HierBranchStyle r;
    public static ST_HierBranchStyle hang;
    public static ST_HierBranchStyle std;
    public static ST_HierBranchStyle init;
}
[GeneratedCodeAttribute("System.Xml", "4.0.30319.17379")]
[XmlTypeAttribute]
public enum NPOI.OpenXmlFormats.Dml.Diagram.ST_HueDir : Enum {
    public int value__;
    public static ST_HueDir cw;
    public static ST_HueDir ccw;
}
[XmlTypeAttribute]
public enum NPOI.OpenXmlFormats.Dml.Diagram.ST_ParameterId : Enum {
    public int value__;
    public static ST_ParameterId horzAlign;
    public static ST_ParameterId vertAlign;
    public static ST_ParameterId chDir;
    public static ST_ParameterId chAlign;
    public static ST_ParameterId secChAlign;
    public static ST_ParameterId linDir;
    public static ST_ParameterId secLinDir;
    public static ST_ParameterId stElem;
    public static ST_ParameterId bendPt;
    public static ST_ParameterId connRout;
    public static ST_ParameterId begSty;
    public static ST_ParameterId endSty;
    public static ST_ParameterId dim;
    public static ST_ParameterId rotPath;
    public static ST_ParameterId ctrShpMap;
    public static ST_ParameterId nodeHorzAlign;
    public static ST_ParameterId nodeVertAlign;
    public static ST_ParameterId fallback;
    public static ST_ParameterId txDir;
    public static ST_ParameterId pyraAcctPos;
    public static ST_ParameterId pyraAcctTxMar;
    public static ST_ParameterId txBlDir;
    public static ST_ParameterId txAnchorHorz;
    public static ST_ParameterId txAnchorVert;
    public static ST_ParameterId txAnchorHorzCh;
    public static ST_ParameterId txAnchorVertCh;
    public static ST_ParameterId parTxLTRAlign;
    public static ST_ParameterId parTxRTLAlign;
    public static ST_ParameterId shpTxLTRAlignCh;
    public static ST_ParameterId shpTxRTLAlignCh;
    public static ST_ParameterId autoTxRot;
    public static ST_ParameterId grDir;
    public static ST_ParameterId flowDir;
    public static ST_ParameterId contDir;
    public static ST_ParameterId bkpt;
    public static ST_ParameterId off;
    public static ST_ParameterId hierAlign;
    public static ST_ParameterId bkPtFixedVal;
    public static ST_ParameterId stBulletLvl;
    public static ST_ParameterId stAng;
    public static ST_ParameterId spanAng;
    public static ST_ParameterId ar;
    public static ST_ParameterId lnSpPar;
    public static ST_ParameterId lnSpAfParP;
    public static ST_ParameterId lnSpCh;
    public static ST_ParameterId lnSpAfChP;
    public static ST_ParameterId rtShortDist;
    public static ST_ParameterId alignTx;
    public static ST_ParameterId pyraLvlNode;
    public static ST_ParameterId pyraAcctBkgdNode;
    public static ST_ParameterId pyraAcctTxNode;
    public static ST_ParameterId srcNode;
    public static ST_ParameterId dstNode;
    public static ST_ParameterId begPts;
    public static ST_ParameterId endPts;
}
[XmlTypeAttribute]
public enum NPOI.OpenXmlFormats.Dml.Diagram.ST_PtType : Enum {
    public int value__;
    public static ST_PtType node;
    public static ST_PtType asst;
    public static ST_PtType doc;
    public static ST_PtType pres;
    public static ST_PtType parTrans;
    public static ST_PtType sibTrans;
}
[XmlTypeAttribute]
public enum NPOI.OpenXmlFormats.Dml.Diagram.ST_ResizeHandlesStr : Enum {
    public int value__;
    public static ST_ResizeHandlesStr exact;
    public static ST_ResizeHandlesStr rel;
}
[XmlTypeAttribute]
public enum NPOI.OpenXmlFormats.Dml.EG_ColorTransform : Enum {
    public int value__;
    public static EG_ColorTransform alpha;
    public static EG_ColorTransform alphaMod;
    public static EG_ColorTransform alphaOff;
    public static EG_ColorTransform blue;
    public static EG_ColorTransform blueMod;
    public static EG_ColorTransform blueOff;
    public static EG_ColorTransform comp;
    public static EG_ColorTransform gamma;
    public static EG_ColorTransform gray;
    public static EG_ColorTransform green;
    public static EG_ColorTransform greenMod;
    public static EG_ColorTransform greenOff;
    public static EG_ColorTransform hue;
    public static EG_ColorTransform hueMod;
    public static EG_ColorTransform hueOff;
    public static EG_ColorTransform inv;
    public static EG_ColorTransform invGamma;
    public static EG_ColorTransform lum;
    public static EG_ColorTransform lumMod;
    public static EG_ColorTransform lumOff;
    public static EG_ColorTransform red;
    public static EG_ColorTransform redMod;
    public static EG_ColorTransform redOff;
    public static EG_ColorTransform sat;
    public static EG_ColorTransform satMod;
    public static EG_ColorTransform satOff;
    public static EG_ColorTransform shade;
    public static EG_ColorTransform tint;
}
[XmlTypeAttribute]
public enum NPOI.OpenXmlFormats.Dml.ItemsChoiceType : Enum {
    public int value__;
    public static ItemsChoiceType arcTo;
    public static ItemsChoiceType close;
    public static ItemsChoiceType cubicBezTo;
    public static ItemsChoiceType lnTo;
    public static ItemsChoiceType moveTo;
    public static ItemsChoiceType quadBezTo;
}
[DebuggerStepThroughAttribute]
[DesignerCategoryAttribute("code")]
[XmlTypeAttribute]
[XmlRootAttribute("pic")]
public class NPOI.OpenXmlFormats.Dml.Picture.CT_Picture : object {
    private CT_PictureNonVisual nvPicPrField;
    private CT_BlipFillProperties blipFillField;
    private CT_ShapeProperties spPrField;
    [XmlElementAttribute]
public CT_PictureNonVisual nvPicPr { get; public set; }
    [XmlElementAttribute]
public CT_BlipFillProperties blipFill { get; public set; }
    [XmlElementAttribute]
public CT_ShapeProperties spPr { get; public set; }
    public CT_PictureNonVisual get_nvPicPr();
    public void set_nvPicPr(CT_PictureNonVisual value);
    public CT_BlipFillProperties get_blipFill();
    public void set_blipFill(CT_BlipFillProperties value);
    public CT_ShapeProperties get_spPr();
    public void set_spPr(CT_ShapeProperties value);
    public CT_PictureNonVisual AddNewNvPicPr();
    public CT_BlipFillProperties AddNewBlipFill();
    public CT_ShapeProperties AddNewSpPr();
    public void Write(StreamWriter sw, string nodeName);
}
[DebuggerStepThroughAttribute]
[DesignerCategoryAttribute("code")]
[XmlTypeAttribute]
public class NPOI.OpenXmlFormats.Dml.Picture.CT_PictureNonVisual : object {
    private CT_NonVisualDrawingProps cNvPrField;
    private CT_NonVisualPictureProperties cNvPicPrField;
    [XmlElementAttribute]
public CT_NonVisualDrawingProps cNvPr { get; public set; }
    [XmlElementAttribute]
public CT_NonVisualPictureProperties cNvPicPr { get; public set; }
    public CT_NonVisualDrawingProps AddNewCNvPr();
    public CT_NonVisualPictureProperties AddNewCNvPicPr();
    public CT_NonVisualDrawingProps get_cNvPr();
    public void set_cNvPr(CT_NonVisualDrawingProps value);
    public CT_NonVisualPictureProperties get_cNvPicPr();
    public void set_cNvPicPr(CT_NonVisualPictureProperties value);
    internal void Write(StreamWriter sw, string p);
}
public class NPOI.OpenXmlFormats.Dml.Spreadsheet.CT_AbsoluteCellAnchor : object {
    private CT_Point2D posField;
    private CT_PositiveSize2D extField;
    private CT_AnchorClientData clientDataField;
    private CT_Shape shapeField;
    private CT_GroupShape groupShapeField;
    private CT_GraphicalObjectFrame graphicalObjectField;
    private CT_Connector connectorField;
    private CT_Picture pictureField;
    public CT_AnchorClientData clientData { get; public set; }
    public CT_Point2D pos { get; public set; }
    public CT_PositiveSize2D ext { get; public set; }
    public CT_Shape sp { get; public set; }
    public CT_GroupShape groupShape { get; public set; }
    public CT_GraphicalObjectFrame graphicFrame { get; public set; }
    public CT_Connector connector { get; public set; }
    public CT_Picture picture { get; public set; }
    public static CT_AbsoluteCellAnchor Parse(XmlNode node, XmlNamespaceManager namespaceManager);
    public sealed virtual CT_AnchorClientData get_clientData();
    public sealed virtual void set_clientData(CT_AnchorClientData value);
    public CT_Point2D AddNewOff();
    public CT_Point2D get_pos();
    public void set_pos(CT_Point2D value);
    public CT_PositiveSize2D get_ext();
    public void set_ext(CT_PositiveSize2D value);
    public CT_AnchorClientData AddNewClientData();
    public sealed virtual CT_Shape get_sp();
    public sealed virtual void set_sp(CT_Shape value);
    public sealed virtual CT_GroupShape get_groupShape();
    public sealed virtual void set_groupShape(CT_GroupShape value);
    public sealed virtual CT_GraphicalObjectFrame get_graphicFrame();
    public sealed virtual void set_graphicFrame(CT_GraphicalObjectFrame value);
    public sealed virtual CT_Connector get_connector();
    public sealed virtual void set_connector(CT_Connector value);
    public sealed virtual CT_Picture get_picture();
    public sealed virtual void set_picture(CT_Picture value);
    public sealed virtual void Write(StreamWriter sw);
}
[XmlTypeAttribute]
public class NPOI.OpenXmlFormats.Dml.Spreadsheet.CT_AnchorClientData : object {
    private bool _fLocksWithSheet;
    private bool _fPrintsWithSheet;
    [XmlAttributeAttribute]
public bool fLocksWithSheet { get; public set; }
    [XmlAttributeAttribute]
public bool fPrintsWithSheet { get; public set; }
    public static CT_AnchorClientData Parse(XmlNode node, XmlNamespaceManager namespaceManager);
    internal void Write(StreamWriter sw, string nodeName);
    public bool get_fLocksWithSheet();
    public void set_fLocksWithSheet(bool value);
    public bool get_fPrintsWithSheet();
    public void set_fPrintsWithSheet(bool value);
}
[XmlTypeAttribute]
[XmlRootAttribute]
public class NPOI.OpenXmlFormats.Dml.Spreadsheet.CT_BlipFillProperties : object {
    private CT_Blip blipField;
    private CT_RelativeRect srcRectField;
    private CT_TileInfoProperties tileField;
    private CT_StretchInfoProperties stretchField;
    private UInt32 dpiField;
    private bool dpiFieldSpecified;
    private bool rotWithShapeField;
    private bool rotWithShapeFieldSpecified;
    [XmlElementAttribute]
public CT_Blip blip { get; public set; }
    [XmlElementAttribute]
public CT_RelativeRect srcRect { get; public set; }
    [XmlElementAttribute]
public CT_TileInfoProperties tile { get; public set; }
    [XmlElementAttribute]
public CT_StretchInfoProperties stretch { get; public set; }
    [XmlAttributeAttribute]
public UInt32 dpi { get; public set; }
    [XmlIgnoreAttribute]
public bool dpiSpecified { get; public set; }
    [XmlAttributeAttribute]
public bool rotWithShape { get; public set; }
    [XmlIgnoreAttribute]
public bool rotWithShapeSpecified { get; public set; }
    public CT_Blip AddNewBlip();
    public CT_StretchInfoProperties AddNewStretch();
    public static CT_BlipFillProperties Parse(XmlNode node, XmlNamespaceManager namespaceManager);
    internal void Write(StreamWriter sw, string nodeName);
    public CT_Blip get_blip();
    public void set_blip(CT_Blip value);
    public CT_RelativeRect get_srcRect();
    public void set_srcRect(CT_RelativeRect value);
    public CT_TileInfoProperties get_tile();
    public void set_tile(CT_TileInfoProperties value);
    public CT_StretchInfoProperties get_stretch();
    public void set_stretch(CT_StretchInfoProperties value);
    public UInt32 get_dpi();
    public void set_dpi(UInt32 value);
    public bool get_dpiSpecified();
    public void set_dpiSpecified(bool value);
    public bool get_rotWithShape();
    public void set_rotWithShape(bool value);
    public bool get_rotWithShapeSpecified();
    public void set_rotWithShapeSpecified(bool value);
    public bool IsSetBlip();
}
[XmlTypeAttribute]
public class NPOI.OpenXmlFormats.Dml.Spreadsheet.CT_Connector : object {
    private string macroField;
    private bool fPublishedField;
    private CT_ShapeProperties spPrField;
    private CT_ShapeStyle styleField;
    private CT_ConnectorNonVisual nvCxnSpPrField;
    public CT_ConnectorNonVisual nvCxnSpPr { get; public set; }
    public CT_ShapeProperties spPr { get; public set; }
    public CT_ShapeStyle style { get; public set; }
    [XmlAttributeAttribute]
public string macro { get; public set; }
    [XmlAttributeAttribute]
public bool fPublished { get; public set; }
    public CT_ConnectorNonVisual get_nvCxnSpPr();
    public void set_nvCxnSpPr(CT_ConnectorNonVisual value);
    public static CT_Connector Parse(XmlNode node, XmlNamespaceManager namespaceManager);
    internal void Write(StreamWriter sw, string nodeName);
    public void Set(CT_Connector obj);
    public CT_ConnectorNonVisual AddNewNvCxnSpPr();
    public CT_ShapeProperties AddNewSpPr();
    public CT_ShapeStyle AddNewStyle();
    public CT_ShapeProperties get_spPr();
    public void set_spPr(CT_ShapeProperties value);
    public CT_ShapeStyle get_style();
    public void set_style(CT_ShapeStyle value);
    public string get_macro();
    public void set_macro(string value);
    public bool get_fPublished();
    public void set_fPublished(bool value);
}
[XmlTypeAttribute]
public class NPOI.OpenXmlFormats.Dml.Spreadsheet.CT_ConnectorNonVisual : object {
    private CT_NonVisualDrawingProps cNvPrField;
    private CT_NonVisualConnectorProperties cNvCxnSpPrField;
    public CT_NonVisualConnectorProperties cNvCxnSpPr { get; public set; }
    public CT_NonVisualDrawingProps cNvPr { get; public set; }
    public CT_NonVisualConnectorProperties get_cNvCxnSpPr();
    public void set_cNvCxnSpPr(CT_NonVisualConnectorProperties value);
    public CT_NonVisualDrawingProps AddNewCNvPr();
    public CT_NonVisualConnectorProperties AddNewCNvCxnSpPr();
    public CT_NonVisualDrawingProps get_cNvPr();
    public void set_cNvPr(CT_NonVisualDrawingProps value);
    public static CT_ConnectorNonVisual Parse(XmlNode node, XmlNamespaceManager namespaceManager);
    internal void Write(StreamWriter sw, string nodeName);
}
[XmlTypeAttribute]
[XmlRootAttribute("wsDr")]
public class NPOI.OpenXmlFormats.Dml.Spreadsheet.CT_Drawing : object {
    private List`1<IEG_Anchor> cellAnchors;
    [XmlIgnoreAttribute]
public List`1<IEG_Anchor> CellAnchors { get; public set; }
    public CT_TwoCellAnchor AddNewTwoCellAnchor();
    public int SizeOfTwoCellAnchorArray();
    public void Save(Stream stream);
    public List`1<IEG_Anchor> get_CellAnchors();
    public void set_CellAnchors(List`1<IEG_Anchor> value);
    public void Set(CT_Drawing ctDrawing);
    public int SizeOfAbsoluteAnchorArray();
    public int SizeOfOneCellAnchorArray();
    public static CT_Drawing Parse(XmlDocument xmldoc, XmlNamespaceManager namespaceManager);
}
[XmlTypeAttribute]
public class NPOI.OpenXmlFormats.Dml.Spreadsheet.CT_GraphicalObjectFrame : object {
    private CT_GraphicalObjectFrameNonVisual nvGraphicFramePrField;
    private CT_Transform2D xfrmField;
    private CT_GraphicalObject graphicField;
    private string macroField;
    private bool fPublishedField;
    [XmlElementAttribute]
public CT_GraphicalObjectFrameNonVisual nvGraphicFramePr { get; public set; }
    [XmlElementAttribute]
public CT_Transform2D xfrm { get; public set; }
    [XmlAttributeAttribute]
public string macro { get; public set; }
    [XmlAttributeAttribute]
[DefaultValueAttribute("False")]
public bool fPublished { get; public set; }
    [XmlElementAttribute]
public CT_GraphicalObject graphic { get; public set; }
    public void Set(CT_GraphicalObjectFrame obj);
    public CT_Transform2D AddNewXfrm();
    public CT_GraphicalObject AddNewGraphic();
    public CT_GraphicalObjectFrameNonVisual AddNewNvGraphicFramePr();
    public CT_GraphicalObjectFrameNonVisual get_nvGraphicFramePr();
    public void set_nvGraphicFramePr(CT_GraphicalObjectFrameNonVisual value);
    public CT_Transform2D get_xfrm();
    public void set_xfrm(CT_Transform2D value);
    public string get_macro();
    public void set_macro(string value);
    public bool get_fPublished();
    public void set_fPublished(bool value);
    public CT_GraphicalObject get_graphic();
    public void set_graphic(CT_GraphicalObject value);
    public static CT_GraphicalObjectFrame Parse(XmlNode node, XmlNamespaceManager namespaceManager);
    internal void Write(StreamWriter sw, string nodeName);
}
[XmlTypeAttribute]
public class NPOI.OpenXmlFormats.Dml.Spreadsheet.CT_GraphicalObjectFrameNonVisual : object {
    private CT_NonVisualDrawingProps cNvPrField;
    private CT_NonVisualGraphicFrameProperties cNvGraphicFramePrField;
    public CT_NonVisualDrawingProps cNvPr { get; public set; }
    public CT_NonVisualGraphicFrameProperties cNvGraphicFramePr { get; public set; }
    public static CT_GraphicalObjectFrameNonVisual Parse(XmlNode node, XmlNamespaceManager namespaceManager);
    internal void Write(StreamWriter sw, string nodeName);
    public CT_NonVisualDrawingProps AddNewCNvPr();
    public CT_NonVisualGraphicFrameProperties AddNewCNvGraphicFramePr();
    public CT_NonVisualDrawingProps get_cNvPr();
    public void set_cNvPr(CT_NonVisualDrawingProps value);
    public CT_NonVisualGraphicFrameProperties get_cNvGraphicFramePr();
    public void set_cNvGraphicFramePr(CT_NonVisualGraphicFrameProperties value);
}
[XmlTypeAttribute]
public class NPOI.OpenXmlFormats.Dml.Spreadsheet.CT_GroupShape : object {
    private CT_GroupShapeProperties grpSpPrField;
    private CT_GroupShapeNonVisual nvGrpSpPrField;
    private List`1<CT_Connector> connectors;
    private List`1<CT_Picture> pictures;
    private List`1<CT_Shape> shapes;
    private List`1<CT_GroupShape> groups;
    public CT_GroupShapeNonVisual nvGrpSpPr { get; public set; }
    public CT_GroupShapeProperties grpSpPr { get; public set; }
    public List`1<CT_Connector> Connectors { get; }
    public List`1<CT_Picture> Pictures { get; }
    public List`1<CT_Shape> Shapes { get; }
    public List`1<CT_GroupShape> Groups { get; }
    public void Set(CT_GroupShape groupShape);
    public CT_GroupShapeProperties AddNewGrpSpPr();
    public CT_GroupShapeNonVisual AddNewNvGrpSpPr();
    public CT_Connector AddNewCxnSp();
    public CT_Shape AddNewSp();
    public CT_Picture AddNewPic();
    public CT_GroupShape AddNewGroup();
    public CT_GroupShapeNonVisual get_nvGrpSpPr();
    public void set_nvGrpSpPr(CT_GroupShapeNonVisual value);
    public CT_GroupShapeProperties get_grpSpPr();
    public void set_grpSpPr(CT_GroupShapeProperties value);
    public List`1<CT_Connector> get_Connectors();
    public List`1<CT_Picture> get_Pictures();
    public List`1<CT_Shape> get_Shapes();
    public List`1<CT_GroupShape> get_Groups();
    public void GetShapes(List`1<object> aShapes);
    public static CT_GroupShape Parse(XmlNode node, XmlNamespaceManager namespaceManager);
    internal void Write(StreamWriter sw, string nodeName);
}
[XmlTypeAttribute]
public class NPOI.OpenXmlFormats.Dml.Spreadsheet.CT_GroupShapeNonVisual : object {
    private CT_NonVisualDrawingProps cNvPrField;
    private CT_NonVisualGroupDrawingShapeProps cNvGrpSpPrField;
    public CT_NonVisualDrawingProps cNvPr { get; public set; }
    public CT_NonVisualGroupDrawingShapeProps cNvGrpSpPr { get; public set; }
    public static CT_GroupShapeNonVisual Parse(XmlNode node, XmlNamespaceManager namespaceManager);
    internal void Write(StreamWriter sw, string nodeName);
    public CT_NonVisualGroupDrawingShapeProps AddNewCNvGrpSpPr();
    public CT_NonVisualDrawingProps AddNewCNvPr();
    public CT_NonVisualDrawingProps get_cNvPr();
    public void set_cNvPr(CT_NonVisualDrawingProps value);
    public CT_NonVisualGroupDrawingShapeProps get_cNvGrpSpPr();
    public void set_cNvGrpSpPr(CT_NonVisualGroupDrawingShapeProps value);
}
[XmlTypeAttribute]
public class NPOI.OpenXmlFormats.Dml.Spreadsheet.CT_LegacyDrawing : object {
    private string idField;
    [XmlAttributeAttribute]
public string id { get; public set; }
    public string get_id();
    public void set_id(string value);
}
[XmlTypeAttribute]
public class NPOI.OpenXmlFormats.Dml.Spreadsheet.CT_Marker : object {
    private int _col;
    private long _colOff;
    private int _row;
    private long _rowOff;
    public int col { get; public set; }
    public long colOff { get; public set; }
    public int row { get; public set; }
    public long rowOff { get; public set; }
    public int get_col();
    public void set_col(int value);
    public long get_colOff();
    public void set_colOff(long value);
    public int get_row();
    public void set_row(int value);
    public long get_rowOff();
    public void set_rowOff(long value);
    public static CT_Marker Parse(XmlNode node, XmlNamespaceManager nameSpaceManager);
    public virtual string ToString();
    internal void Write(StreamWriter sw, string nodeName);
}
[DesignerCategoryAttribute("code")]
[XmlTypeAttribute]
public class NPOI.OpenXmlFormats.Dml.Spreadsheet.CT_NonVisualDrawingProps : object {
    private CT_Hyperlink hlinkClickField;
    private CT_Hyperlink hlinkHoverField;
    private CT_OfficeArtExtensionList extLstField;
    private UInt32 idField;
    private string nameField;
    private string descrField;
    private Nullable`1<bool> hiddenField;
    [XmlElementAttribute]
public CT_Hyperlink hlinkClick { get; public set; }
    [XmlElementAttribute]
public CT_Hyperlink hlinkHover { get; public set; }
    [XmlElementAttribute]
public CT_OfficeArtExtensionList extLst { get; public set; }
    [XmlAttributeAttribute]
public UInt32 id { get; public set; }
    [XmlAttributeAttribute]
public string name { get; public set; }
    [XmlAttributeAttribute]
[DefaultValueAttribute("")]
public string descr { get; public set; }
    [XmlIgnoreAttribute]
public bool descrSpecified { get; }
    [XmlAttributeAttribute]
[DefaultValueAttribute("False")]
public bool hidden { get; public set; }
    [XmlIgnoreAttribute]
public bool hiddenSpecified { get; }
    public static CT_NonVisualDrawingProps Parse(XmlNode node, XmlNamespaceManager namespaceManager);
    internal void Write(StreamWriter sw, string nodeName);
    public CT_Hyperlink get_hlinkClick();
    public void set_hlinkClick(CT_Hyperlink value);
    public CT_Hyperlink get_hlinkHover();
    public void set_hlinkHover(CT_Hyperlink value);
    public CT_OfficeArtExtensionList get_extLst();
    public void set_extLst(CT_OfficeArtExtensionList value);
    public UInt32 get_id();
    public void set_id(UInt32 value);
    public string get_name();
    public void set_name(string value);
    public string get_descr();
    public void set_descr(string value);
    public bool get_descrSpecified();
    public bool get_hidden();
    public void set_hidden(bool value);
    public bool get_hiddenSpecified();
}
[DesignerCategoryAttribute("code")]
[XmlTypeAttribute]
[XmlRootAttribute]
public class NPOI.OpenXmlFormats.Dml.Spreadsheet.CT_NonVisualDrawingShapeProps : object {
    private CT_ShapeLocking spLocksField;
    private CT_OfficeArtExtensionList extLstField;
    private bool txBoxField;
    [XmlElementAttribute]
public CT_ShapeLocking spLocks { get; public set; }
    [XmlElementAttribute]
public CT_OfficeArtExtensionList extLst { get; public set; }
    [XmlAttributeAttribute]
[DefaultValueAttribute("False")]
public bool txBox { get; public set; }
    public static CT_NonVisualDrawingShapeProps Parse(XmlNode node, XmlNamespaceManager namespaceManager);
    internal void Write(StreamWriter sw, string nodeName);
    public CT_ShapeLocking get_spLocks();
    public void set_spLocks(CT_ShapeLocking value);
    public CT_OfficeArtExtensionList get_extLst();
    public void set_extLst(CT_OfficeArtExtensionList value);
    public bool get_txBox();
    public void set_txBox(bool value);
}
[DesignerCategoryAttribute("code")]
[XmlTypeAttribute]
public class NPOI.OpenXmlFormats.Dml.Spreadsheet.CT_NonVisualGraphicFrameProperties : object {
    private CT_GraphicalObjectFrameLocking graphicFrameLocksField;
    private CT_OfficeArtExtensionList extLstField;
    [XmlElementAttribute]
public CT_GraphicalObjectFrameLocking graphicFrameLocks { get; public set; }
    [XmlElementAttribute]
public CT_OfficeArtExtensionList extLst { get; public set; }
    public static CT_NonVisualGraphicFrameProperties Parse(XmlNode node, XmlNamespaceManager namespaceManager);
    internal void Write(StreamWriter sw, string nodeName);
    public CT_GraphicalObjectFrameLocking get_graphicFrameLocks();
    public void set_graphicFrameLocks(CT_GraphicalObjectFrameLocking value);
    public CT_OfficeArtExtensionList get_extLst();
    public void set_extLst(CT_OfficeArtExtensionList value);
}
[DesignerCategoryAttribute("code")]
[XmlTypeAttribute]
public class NPOI.OpenXmlFormats.Dml.Spreadsheet.CT_NonVisualPictureProperties : object {
    private CT_PictureLocking picLocksField;
    private CT_OfficeArtExtensionList extLstField;
    private bool preferRelativeResizeField;
    [XmlElementAttribute]
public CT_PictureLocking picLocks { get; public set; }
    [XmlElementAttribute]
public CT_OfficeArtExtensionList extLst { get; public set; }
    [XmlAttributeAttribute]
public bool preferRelativeResize { get; public set; }
    public static CT_NonVisualPictureProperties Parse(XmlNode node, XmlNamespaceManager namespaceManager);
    internal void Write(StreamWriter sw, string nodeName);
    public CT_PictureLocking AddNewPicLocks();
    public CT_PictureLocking get_picLocks();
    public void set_picLocks(CT_PictureLocking value);
    public CT_OfficeArtExtensionList get_extLst();
    public void set_extLst(CT_OfficeArtExtensionList value);
    public bool get_preferRelativeResize();
    public void set_preferRelativeResize(bool value);
}
[XmlTypeAttribute]
public class NPOI.OpenXmlFormats.Dml.Spreadsheet.CT_OneCellAnchor : object {
    private CT_Marker fromField;
    private CT_PositiveSize2D extField;
    private CT_AnchorClientData clientDataField;
    private CT_Shape shapeField;
    private CT_GroupShape groupShapeField;
    private CT_GraphicalObjectFrame graphicalObjectField;
    private CT_Connector connectorField;
    private CT_Picture pictureField;
    private CT_AlternateContent alternateContentField;
    [XmlElementAttribute]
public CT_Marker from { get; public set; }
    public CT_AlternateContent alternateContent { get; public set; }
    [XmlElementAttribute]
public CT_PositiveSize2D ext { get; public set; }
    [XmlElementAttribute]
public CT_AnchorClientData clientData { get; public set; }
    public CT_Shape sp { get; public set; }
    public CT_GroupShape groupShape { get; public set; }
    public CT_GraphicalObjectFrame graphicFrame { get; public set; }
    public CT_Connector connector { get; public set; }
    public CT_Picture picture { get; public set; }
    public CT_Marker get_from();
    public void set_from(CT_Marker value);
    public CT_AlternateContent get_alternateContent();
    public void set_alternateContent(CT_AlternateContent value);
    public CT_PositiveSize2D get_ext();
    public void set_ext(CT_PositiveSize2D value);
    public CT_AnchorClientData AddNewClientData();
    public sealed virtual CT_AnchorClientData get_clientData();
    public sealed virtual void set_clientData(CT_AnchorClientData value);
    public sealed virtual CT_Shape get_sp();
    public sealed virtual void set_sp(CT_Shape value);
    public sealed virtual CT_GroupShape get_groupShape();
    public sealed virtual void set_groupShape(CT_GroupShape value);
    public sealed virtual CT_GraphicalObjectFrame get_graphicFrame();
    public sealed virtual void set_graphicFrame(CT_GraphicalObjectFrame value);
    public sealed virtual CT_Connector get_connector();
    public sealed virtual void set_connector(CT_Connector value);
    public sealed virtual CT_Picture get_picture();
    public sealed virtual void set_picture(CT_Picture value);
    public sealed virtual void Write(StreamWriter sw);
    internal static CT_OneCellAnchor Parse(XmlNode node, XmlNamespaceManager namespaceManager);
}
[XmlTypeAttribute]
public class NPOI.OpenXmlFormats.Dml.Spreadsheet.CT_Picture : object {
    private CT_PictureNonVisual nvPicPrField;
    private CT_BlipFillProperties blipFillField;
    private CT_ShapeProperties spPrField;
    private CT_ShapeStyle styleField;
    private string macroField;
    private bool fPublishedField;
    private bool styleSpecifiedField;
    private bool macroSpecifiedField;
    private bool fPublishedSpecifiedField;
    [XmlElementAttribute]
public CT_PictureNonVisual nvPicPr { get; public set; }
    [XmlElementAttribute]
public CT_BlipFillProperties blipFill { get; public set; }
    [XmlElementAttribute]
public CT_ShapeProperties spPr { get; public set; }
    [XmlElementAttribute]
public CT_ShapeStyle style { get; public set; }
    [XmlIgnoreAttribute]
public bool styleSpecified { get; public set; }
    [XmlAttributeAttribute]
public string macro { get; public set; }
    [XmlIgnoreAttribute]
public bool macroSpecified { get; public set; }
    [XmlAttributeAttribute]
public bool fPublished { get; public set; }
    [XmlIgnoreAttribute]
public bool fPublishedSpecified { get; public set; }
    public static CT_Picture Parse(XmlNode node, XmlNamespaceManager namespaceManager);
    internal void Write(StreamWriter sw, string nodeName);
    public CT_PictureNonVisual get_nvPicPr();
    public void set_nvPicPr(CT_PictureNonVisual value);
    public CT_BlipFillProperties get_blipFill();
    public void set_blipFill(CT_BlipFillProperties value);
    public CT_ShapeProperties get_spPr();
    public void set_spPr(CT_ShapeProperties value);
    public CT_ShapeStyle get_style();
    public void set_style(CT_ShapeStyle value);
    public bool get_styleSpecified();
    public void set_styleSpecified(bool value);
    public string get_macro();
    public void set_macro(string value);
    public bool get_macroSpecified();
    public void set_macroSpecified(bool value);
    public bool get_fPublished();
    public void set_fPublished(bool value);
    public bool get_fPublishedSpecified();
    public void set_fPublishedSpecified(bool value);
    public CT_PictureNonVisual AddNewNvPicPr();
    public CT_BlipFillProperties AddNewBlipFill();
    public CT_ShapeProperties AddNewSpPr();
    public void Set(CT_Picture pict);
}
[XmlTypeAttribute]
public class NPOI.OpenXmlFormats.Dml.Spreadsheet.CT_PictureNonVisual : object {
    private CT_NonVisualDrawingProps cNvPrField;
    private CT_NonVisualPictureProperties cNvPicPrField;
    [XmlElementAttribute]
public CT_NonVisualDrawingProps cNvPr { get; public set; }
    [XmlElementAttribute]
public CT_NonVisualPictureProperties cNvPicPr { get; public set; }
    public static CT_PictureNonVisual Parse(XmlNode node, XmlNamespaceManager namespaceManager);
    internal void Write(StreamWriter sw, string nodeName);
    public CT_NonVisualDrawingProps AddNewCNvPr();
    public CT_NonVisualPictureProperties AddNewCNvPicPr();
    public CT_NonVisualDrawingProps get_cNvPr();
    public void set_cNvPr(CT_NonVisualDrawingProps value);
    public CT_NonVisualPictureProperties get_cNvPicPr();
    public void set_cNvPicPr(CT_NonVisualPictureProperties value);
}
[XmlTypeAttribute]
public class NPOI.OpenXmlFormats.Dml.Spreadsheet.CT_Shape : object {
    private CT_ShapeNonVisual nvSpPrField;
    private CT_ShapeProperties spPrField;
    private CT_ShapeStyle styleField;
    private CT_TextBody txBodyField;
    private string macroField;
    private string textlinkField;
    private bool fLocksTextField;
    private bool fPublishedField;
    public CT_ShapeNonVisual nvSpPr { get; public set; }
    public CT_ShapeProperties spPr { get; public set; }
    public CT_TextBody txBody { get; public set; }
    public CT_ShapeStyle style { get; public set; }
    [XmlAttributeAttribute]
public string macro { get; public set; }
    [XmlAttributeAttribute]
public string textlink { get; public set; }
    [XmlAttributeAttribute]
public bool fLocksText { get; public set; }
    [XmlAttributeAttribute]
public bool fPublished { get; public set; }
    public void Set(CT_Shape obj);
    public static CT_Shape Parse(XmlNode node, XmlNamespaceManager namespaceManager);
    internal void Write(StreamWriter sw, string nodeName);
    public CT_ShapeNonVisual AddNewNvSpPr();
    public CT_ShapeProperties AddNewSpPr();
    public CT_ShapeStyle AddNewStyle();
    public CT_TextBody AddNewTxBody();
    public CT_ShapeNonVisual get_nvSpPr();
    public void set_nvSpPr(CT_ShapeNonVisual value);
    public CT_ShapeProperties get_spPr();
    public void set_spPr(CT_ShapeProperties value);
    public CT_TextBody get_txBody();
    public void set_txBody(CT_TextBody value);
    public CT_ShapeStyle get_style();
    public void set_style(CT_ShapeStyle value);
    public string get_macro();
    public void set_macro(string value);
    public string get_textlink();
    public void set_textlink(string value);
    public bool get_fLocksText();
    public void set_fLocksText(bool value);
    public bool get_fPublished();
    public void set_fPublished(bool value);
}
[XmlTypeAttribute]
public class NPOI.OpenXmlFormats.Dml.Spreadsheet.CT_ShapeNonVisual : object {
    private CT_NonVisualDrawingProps cNvPrField;
    private CT_NonVisualDrawingShapeProps cNvSpPrField;
    public CT_NonVisualDrawingProps cNvPr { get; public set; }
    public CT_NonVisualDrawingShapeProps cNvSpPr { get; public set; }
    public CT_NonVisualDrawingProps AddNewCNvPr();
    public CT_NonVisualDrawingShapeProps AddNewCNvSpPr();
    public CT_NonVisualDrawingProps get_cNvPr();
    public void set_cNvPr(CT_NonVisualDrawingProps value);
    public CT_NonVisualDrawingShapeProps get_cNvSpPr();
    public void set_cNvSpPr(CT_NonVisualDrawingShapeProps value);
    public static CT_ShapeNonVisual Parse(XmlNode node, XmlNamespaceManager namespaceManager);
    internal void Write(StreamWriter sw, string nodeName);
}
[XmlTypeAttribute]
public class NPOI.OpenXmlFormats.Dml.Spreadsheet.CT_ShapeProperties : object {
    private CT_Transform2D xfrmField;
    private CT_CustomGeometry2D custGeomField;
    private CT_PresetGeometry2D prstGeomField;
    private CT_NoFillProperties noFillField;
    private CT_SolidColorFillProperties solidFillField;
    private CT_GradientFillProperties gradFillField;
    private CT_BlipFillProperties blipFillField;
    private CT_PatternFillProperties pattFillField;
    private CT_GroupFillProperties grpFillField;
    private CT_LineProperties lnField;
    private CT_EffectList effectLstField;
    private CT_EffectContainer effectDagField;
    private CT_Scene3D scene3dField;
    private CT_Shape3D sp3dField;
    private CT_OfficeArtExtensionList extLstField;
    private ST_BlackWhiteMode bwModeField;
    [XmlElementAttribute]
public CT_Transform2D xfrm { get; public set; }
    [XmlElementAttribute]
public CT_CustomGeometry2D custGeom { get; public set; }
    [XmlElementAttribute]
public CT_PresetGeometry2D prstGeom { get; public set; }
    [XmlElementAttribute]
public CT_NoFillProperties noFill { get; public set; }
    [XmlElementAttribute]
public CT_SolidColorFillProperties solidFill { get; public set; }
    [XmlElementAttribute]
public CT_GradientFillProperties gradFill { get; public set; }
    [XmlElementAttribute]
public CT_BlipFillProperties blipFill { get; public set; }
    [XmlElementAttribute]
public CT_PatternFillProperties pattFill { get; public set; }
    [XmlElementAttribute]
public CT_GroupFillProperties grpFill { get; public set; }
    [XmlElementAttribute]
public CT_LineProperties ln { get; public set; }
    [XmlElementAttribute]
public CT_EffectList effectLst { get; public set; }
    [XmlElementAttribute]
public CT_EffectContainer effectDag { get; public set; }
    [XmlElementAttribute]
public CT_Scene3D scene3d { get; public set; }
    [XmlElementAttribute]
public CT_Shape3D sp3d { get; public set; }
    [XmlElementAttribute]
public CT_OfficeArtExtensionList extLst { get; public set; }
    [XmlAttributeAttribute]
public ST_BlackWhiteMode bwMode { get; public set; }
    [XmlIgnoreAttribute]
public bool bwModeSpecified { get; }
    public CT_PresetGeometry2D AddNewPrstGeom();
    public CT_Transform2D AddNewXfrm();
    public CT_SolidColorFillProperties AddNewSolidFill();
    public CT_CustomGeometry2D AddNewCustGeom();
    public bool IsSetPattFill();
    public bool IsSetSolidFill();
    public bool IsSetLn();
    public CT_LineProperties AddNewLn();
    public void unsetPattFill();
    public void unsetSolidFill();
    public CT_Transform2D get_xfrm();
    public void set_xfrm(CT_Transform2D value);
    public CT_CustomGeometry2D get_custGeom();
    public void set_custGeom(CT_CustomGeometry2D value);
    public CT_PresetGeometry2D get_prstGeom();
    public void set_prstGeom(CT_PresetGeometry2D value);
    public CT_NoFillProperties get_noFill();
    public void set_noFill(CT_NoFillProperties value);
    public CT_SolidColorFillProperties get_solidFill();
    public void set_solidFill(CT_SolidColorFillProperties value);
    public CT_GradientFillProperties get_gradFill();
    public void set_gradFill(CT_GradientFillProperties value);
    public CT_BlipFillProperties get_blipFill();
    public void set_blipFill(CT_BlipFillProperties value);
    public CT_PatternFillProperties get_pattFill();
    public void set_pattFill(CT_PatternFillProperties value);
    public CT_GroupFillProperties get_grpFill();
    public void set_grpFill(CT_GroupFillProperties value);
    public CT_LineProperties get_ln();
    public void set_ln(CT_LineProperties value);
    public CT_EffectList get_effectLst();
    public void set_effectLst(CT_EffectList value);
    public CT_EffectContainer get_effectDag();
    public void set_effectDag(CT_EffectContainer value);
    public CT_Scene3D get_scene3d();
    public void set_scene3d(CT_Scene3D value);
    public CT_Shape3D get_sp3d();
    public void set_sp3d(CT_Shape3D value);
    public CT_OfficeArtExtensionList get_extLst();
    public void set_extLst(CT_OfficeArtExtensionList value);
    public ST_BlackWhiteMode get_bwMode();
    public void set_bwMode(ST_BlackWhiteMode value);
    public bool get_bwModeSpecified();
    public static CT_ShapeProperties Parse(XmlNode node, XmlNamespaceManager namespaceManager);
    internal void Write(StreamWriter sw, string nodeName);
}
[DesignerCategoryAttribute("code")]
[XmlTypeAttribute]
public class NPOI.OpenXmlFormats.Dml.Spreadsheet.CT_ShapeStyle : object {
    private CT_StyleMatrixReference lnRefField;
    private CT_StyleMatrixReference fillRefField;
    private CT_StyleMatrixReference effectRefField;
    private CT_FontReference fontRefField;
    [XmlElementAttribute]
public CT_StyleMatrixReference lnRef { get; public set; }
    [XmlElementAttribute]
public CT_StyleMatrixReference fillRef { get; public set; }
    [XmlElementAttribute]
public CT_StyleMatrixReference effectRef { get; public set; }
    [XmlElementAttribute]
public CT_FontReference fontRef { get; public set; }
    public static CT_ShapeStyle Parse(XmlNode node, XmlNamespaceManager namespaceManager);
    internal void Write(StreamWriter sw, string nodeName);
    public CT_StyleMatrixReference AddNewFillRef();
    public CT_StyleMatrixReference AddNewLnRef();
    public CT_FontReference AddNewFontRef();
    public CT_StyleMatrixReference AddNewEffectRef();
    public CT_StyleMatrixReference get_lnRef();
    public void set_lnRef(CT_StyleMatrixReference value);
    public CT_StyleMatrixReference get_fillRef();
    public void set_fillRef(CT_StyleMatrixReference value);
    public CT_StyleMatrixReference get_effectRef();
    public void set_effectRef(CT_StyleMatrixReference value);
    public CT_FontReference get_fontRef();
    public void set_fontRef(CT_FontReference value);
}
[DesignerCategoryAttribute("code")]
[XmlTypeAttribute]
public class NPOI.OpenXmlFormats.Dml.Spreadsheet.CT_TextBody : object {
    private CT_TextBodyProperties bodyPrField;
    private CT_TextListStyle lstStyleField;
    private List`1<CT_TextParagraph> pField;
    public CT_TextBodyProperties bodyPr { get; public set; }
    public CT_TextListStyle lstStyle { get; public set; }
    [XmlElementAttribute("p")]
public List`1<CT_TextParagraph> p { get; public set; }
    public static CT_TextBody Parse(XmlNode node, XmlNamespaceManager namespaceManager);
    internal void Write(StreamWriter sw, string nodeName);
    public void SetPArray(CT_TextParagraph[] array);
    public CT_TextParagraph AddNewP();
    public CT_TextBodyProperties AddNewBodyPr();
    public CT_TextListStyle AddNewLstStyle();
    public CT_TextBodyProperties get_bodyPr();
    public void set_bodyPr(CT_TextBodyProperties value);
    public CT_TextListStyle get_lstStyle();
    public void set_lstStyle(CT_TextListStyle value);
    public virtual string ToString();
    public List`1<CT_TextParagraph> get_p();
    public void set_p(List`1<CT_TextParagraph> value);
    public CT_TextParagraph GetPArray(int pos);
    public int SizeOfPArray();
}
[XmlTypeAttribute]
public class NPOI.OpenXmlFormats.Dml.Spreadsheet.CT_TwoCellAnchor : object {
    private CT_Marker fromField;
    private CT_Marker toField;
    private CT_Shape shapeField;
    private CT_GroupShape groupShapeField;
    private CT_GraphicalObjectFrame graphicalObjectField;
    private CT_Connector connectorField;
    private CT_Picture pictureField;
    private CT_AnchorClientData clientDataField;
    private ST_EditAs editAsField;
    private bool editAsSpecifiedField;
    private CT_AlternateContent alternateContentField;
    [XmlElementAttribute]
public CT_AnchorClientData clientData { get; public set; }
    [XmlAttributeAttribute]
public ST_EditAs editAs { get; public set; }
    [XmlIgnoreAttribute]
public bool editAsSpecified { get; public set; }
    [XmlElementAttribute]
public CT_Marker from { get; public set; }
    [XmlElementAttribute]
public CT_Marker to { get; public set; }
    public CT_AlternateContent alternateContent { get; public set; }
    [XmlElementAttribute]
public CT_Shape sp { get; public set; }
    [XmlElementAttribute]
public CT_GroupShape groupShape { get; public set; }
    [XmlElementAttribute]
public CT_GraphicalObjectFrame graphicFrame { get; public set; }
    [XmlElementAttribute]
public CT_Connector connector { get; public set; }
    [XmlElementAttribute("pic")]
public CT_Picture picture { get; public set; }
    public CT_Shape AddNewSp();
    public CT_GroupShape AddNewGrpSp();
    public CT_GraphicalObjectFrame AddNewGraphicFrame();
    public CT_Connector AddNewCxnSp();
    public CT_Picture AddNewPic();
    public CT_AnchorClientData AddNewClientData();
    public sealed virtual CT_AnchorClientData get_clientData();
    public sealed virtual void set_clientData(CT_AnchorClientData value);
    public ST_EditAs get_editAs();
    public void set_editAs(ST_EditAs value);
    public bool get_editAsSpecified();
    public void set_editAsSpecified(bool value);
    public CT_Marker get_from();
    public void set_from(CT_Marker value);
    public CT_Marker get_to();
    public void set_to(CT_Marker value);
    public CT_AlternateContent get_alternateContent();
    public void set_alternateContent(CT_AlternateContent value);
    public sealed virtual CT_Shape get_sp();
    public sealed virtual void set_sp(CT_Shape value);
    public sealed virtual CT_GroupShape get_groupShape();
    public sealed virtual void set_groupShape(CT_GroupShape value);
    public sealed virtual CT_GraphicalObjectFrame get_graphicFrame();
    public sealed virtual void set_graphicFrame(CT_GraphicalObjectFrame value);
    public sealed virtual CT_Connector get_connector();
    public sealed virtual void set_connector(CT_Connector value);
    public sealed virtual CT_Picture get_picture();
    public sealed virtual void set_picture(CT_Picture value);
    public sealed virtual void Write(StreamWriter sw);
    internal static CT_TwoCellAnchor Parse(XmlNode node, XmlNamespaceManager namespaceManager);
}
public interface NPOI.OpenXmlFormats.Dml.Spreadsheet.IEG_Anchor {
    public CT_Shape sp { get; public set; }
    public CT_Connector connector { get; public set; }
    public CT_GraphicalObjectFrame graphicFrame { get; public set; }
    public CT_Picture picture { get; public set; }
    public CT_GroupShape groupShape { get; public set; }
    public CT_AnchorClientData clientData { get; public set; }
    public abstract virtual CT_Shape get_sp();
    public abstract virtual void set_sp(CT_Shape value);
    public abstract virtual CT_Connector get_connector();
    public abstract virtual void set_connector(CT_Connector value);
    public abstract virtual CT_GraphicalObjectFrame get_graphicFrame();
    public abstract virtual void set_graphicFrame(CT_GraphicalObjectFrame value);
    public abstract virtual CT_Picture get_picture();
    public abstract virtual void set_picture(CT_Picture value);
    public abstract virtual CT_GroupShape get_groupShape();
    public abstract virtual void set_groupShape(CT_GroupShape value);
    public abstract virtual CT_AnchorClientData get_clientData();
    public abstract virtual void set_clientData(CT_AnchorClientData value);
    public abstract virtual void Write(StreamWriter sw);
}
public enum NPOI.OpenXmlFormats.Dml.Spreadsheet.ST_EditAs : Enum {
    public int value__;
    public static ST_EditAs NONE;
    public static ST_EditAs twoCell;
    public static ST_EditAs oneCell;
    public static ST_EditAs absolute;
}
[XmlTypeAttribute]
public enum NPOI.OpenXmlFormats.Dml.ST_AnimationBuildType : Enum {
    public int value__;
    public static ST_AnimationBuildType allAtOnce;
}
[XmlTypeAttribute]
public enum NPOI.OpenXmlFormats.Dml.ST_AnimationChartOnlyBuildType : Enum {
    public int value__;
    public static ST_AnimationChartOnlyBuildType series;
    public static ST_AnimationChartOnlyBuildType category;
    public static ST_AnimationChartOnlyBuildType seriesEl;
    public static ST_AnimationChartOnlyBuildType categoryEl;
}
[XmlTypeAttribute]
public enum NPOI.OpenXmlFormats.Dml.ST_AnimationDgmOnlyBuildType : Enum {
    public int value__;
    public static ST_AnimationDgmOnlyBuildType one;
    public static ST_AnimationDgmOnlyBuildType lvlOne;
    public static ST_AnimationDgmOnlyBuildType lvlAtOnce;
}
[XmlTypeAttribute]
public enum NPOI.OpenXmlFormats.Dml.ST_BevelPresetType : Enum {
    public int value__;
    public static ST_BevelPresetType relaxedInset;
    public static ST_BevelPresetType circle;
    public static ST_BevelPresetType slope;
    public static ST_BevelPresetType cross;
    public static ST_BevelPresetType angle;
    public static ST_BevelPresetType softRound;
    public static ST_BevelPresetType convex;
    public static ST_BevelPresetType coolSlant;
    public static ST_BevelPresetType divot;
    public static ST_BevelPresetType riblet;
    public static ST_BevelPresetType hardEdge;
    public static ST_BevelPresetType artDeco;
}
public enum NPOI.OpenXmlFormats.Dml.ST_BlackWhiteMode : Enum {
    public int value__;
    public static ST_BlackWhiteMode none;
    public static ST_BlackWhiteMode clr;
    public static ST_BlackWhiteMode auto;
    public static ST_BlackWhiteMode gray;
    public static ST_BlackWhiteMode ltGray;
    public static ST_BlackWhiteMode invGray;
    public static ST_BlackWhiteMode grayWhite;
    public static ST_BlackWhiteMode blackGray;
    public static ST_BlackWhiteMode blackWhite;
    public static ST_BlackWhiteMode black;
    public static ST_BlackWhiteMode white;
    public static ST_BlackWhiteMode hidden;
}
[XmlTypeAttribute]
public enum NPOI.OpenXmlFormats.Dml.ST_BlendMode : Enum {
    public int value__;
    public static ST_BlendMode over;
    public static ST_BlendMode mult;
    public static ST_BlendMode screen;
    public static ST_BlendMode darken;
    public static ST_BlendMode lighten;
}
[XmlTypeAttribute]
public enum NPOI.OpenXmlFormats.Dml.ST_BlipCompression : Enum {
    public int value__;
    public static ST_BlipCompression email;
    public static ST_BlipCompression screen;
    public static ST_BlipCompression print;
    public static ST_BlipCompression hqprint;
    public static ST_BlipCompression none;
}
[XmlTypeAttribute]
public enum NPOI.OpenXmlFormats.Dml.ST_ChartBuildStep : Enum {
    public int value__;
    public static ST_ChartBuildStep category;
    public static ST_ChartBuildStep ptInCategory;
    public static ST_ChartBuildStep series;
    public static ST_ChartBuildStep ptInSeries;
    public static ST_ChartBuildStep allPts;
    public static ST_ChartBuildStep gridLegend;
}
[XmlTypeAttribute]
public enum NPOI.OpenXmlFormats.Dml.ST_ColorSchemeIndex : Enum {
    public int value__;
    public static ST_ColorSchemeIndex dk1;
    public static ST_ColorSchemeIndex lt1;
    public static ST_ColorSchemeIndex dk2;
    public static ST_ColorSchemeIndex lt2;
    public static ST_ColorSchemeIndex accent1;
    public static ST_ColorSchemeIndex accent2;
    public static ST_ColorSchemeIndex accent3;
    public static ST_ColorSchemeIndex accent4;
    public static ST_ColorSchemeIndex accent5;
    public static ST_ColorSchemeIndex accent6;
    public static ST_ColorSchemeIndex hlink;
    public static ST_ColorSchemeIndex folHlink;
}
[XmlTypeAttribute]
public enum NPOI.OpenXmlFormats.Dml.ST_CompoundLine : Enum {
    public int value__;
    public static ST_CompoundLine NONE;
    public static ST_CompoundLine sng;
    public static ST_CompoundLine dbl;
    public static ST_CompoundLine thickThin;
    public static ST_CompoundLine thinThick;
    public static ST_CompoundLine tri;
}
[XmlTypeAttribute]
public enum NPOI.OpenXmlFormats.Dml.ST_DgmBuildStep : Enum {
    public int value__;
    public static ST_DgmBuildStep sp;
    public static ST_DgmBuildStep bg;
}
[XmlTypeAttribute]
public enum NPOI.OpenXmlFormats.Dml.ST_EffectContainerType : Enum {
    public int value__;
    public static ST_EffectContainerType sib;
    public static ST_EffectContainerType tree;
}
[XmlTypeAttribute]
public enum NPOI.OpenXmlFormats.Dml.ST_FontCollectionIndex : Enum {
    public int value__;
    public static ST_FontCollectionIndex major;
    public static ST_FontCollectionIndex minor;
    public static ST_FontCollectionIndex none;
}
[XmlTypeAttribute]
public enum NPOI.OpenXmlFormats.Dml.ST_LightRigDirection : Enum {
    public int value__;
    public static ST_LightRigDirection tl;
    public static ST_LightRigDirection t;
    public static ST_LightRigDirection tr;
    public static ST_LightRigDirection l;
    public static ST_LightRigDirection r;
    public static ST_LightRigDirection bl;
    public static ST_LightRigDirection b;
    public static ST_LightRigDirection br;
}
[XmlTypeAttribute]
public enum NPOI.OpenXmlFormats.Dml.ST_LightRigType : Enum {
    public int value__;
    public static ST_LightRigType legacyFlat1;
    public static ST_LightRigType legacyFlat2;
    public static ST_LightRigType legacyFlat3;
    public static ST_LightRigType legacyFlat4;
    public static ST_LightRigType legacyNormal1;
    public static ST_LightRigType legacyNormal2;
    public static ST_LightRigType legacyNormal3;
    public static ST_LightRigType legacyNormal4;
    public static ST_LightRigType legacyHarsh1;
    public static ST_LightRigType legacyHarsh2;
    public static ST_LightRigType legacyHarsh3;
    public static ST_LightRigType legacyHarsh4;
    public static ST_LightRigType threePt;
    public static ST_LightRigType balanced;
    public static ST_LightRigType soft;
    public static ST_LightRigType harsh;
    public static ST_LightRigType flood;
    public static ST_LightRigType contrasting;
    public static ST_LightRigType morning;
    public static ST_LightRigType sunrise;
    public static ST_LightRigType sunset;
    public static ST_LightRigType chilly;
    public static ST_LightRigType freezing;
    public static ST_LightRigType flat;
    public static ST_LightRigType twoPt;
    public static ST_LightRigType glow;
    public static ST_LightRigType brightRoom;
}
[XmlTypeAttribute]
public enum NPOI.OpenXmlFormats.Dml.ST_LineCap : Enum {
    public int value__;
    public static ST_LineCap NONE;
    public static ST_LineCap rnd;
    public static ST_LineCap sq;
    public static ST_LineCap flat;
}
[XmlTypeAttribute]
public enum NPOI.OpenXmlFormats.Dml.ST_LineEndLength : Enum {
    public int value__;
    public static ST_LineEndLength sm;
    public static ST_LineEndLength med;
    public static ST_LineEndLength lg;
}
[XmlTypeAttribute]
public enum NPOI.OpenXmlFormats.Dml.ST_LineEndType : Enum {
    public int value__;
    public static ST_LineEndType none;
    public static ST_LineEndType triangle;
    public static ST_LineEndType stealth;
    public static ST_LineEndType diamond;
    public static ST_LineEndType oval;
    public static ST_LineEndType arrow;
}
[XmlTypeAttribute]
public enum NPOI.OpenXmlFormats.Dml.ST_LineEndWidth : Enum {
    public int value__;
    public static ST_LineEndWidth sm;
    public static ST_LineEndWidth med;
    public static ST_LineEndWidth lg;
}
[XmlTypeAttribute]
public enum NPOI.OpenXmlFormats.Dml.ST_OnOffStyleType : Enum {
    public int value__;
    public static ST_OnOffStyleType on;
    public static ST_OnOffStyleType off;
    public static ST_OnOffStyleType def;
}
[XmlTypeAttribute]
public enum NPOI.OpenXmlFormats.Dml.ST_PathFillMode : Enum {
    public int value__;
    public static ST_PathFillMode none;
    public static ST_PathFillMode norm;
    public static ST_PathFillMode lighten;
    public static ST_PathFillMode lightenLess;
    public static ST_PathFillMode darken;
    public static ST_PathFillMode darkenLess;
}
[XmlTypeAttribute]
public enum NPOI.OpenXmlFormats.Dml.ST_PathShadeType : Enum {
    public int value__;
    public static ST_PathShadeType shape;
    public static ST_PathShadeType circle;
    public static ST_PathShadeType rect;
}
[XmlTypeAttribute]
public enum NPOI.OpenXmlFormats.Dml.ST_PenAlignment : Enum {
    public int value__;
    public static ST_PenAlignment NONE;
    public static ST_PenAlignment ctr;
    public static ST_PenAlignment in;
}
[XmlTypeAttribute]
public enum NPOI.OpenXmlFormats.Dml.ST_PresetCameraType : Enum {
    public int value__;
    public static ST_PresetCameraType legacyObliqueTopLeft;
    public static ST_PresetCameraType legacyObliqueTop;
    public static ST_PresetCameraType legacyObliqueTopRight;
    public static ST_PresetCameraType legacyObliqueLeft;
    public static ST_PresetCameraType legacyObliqueFront;
    public static ST_PresetCameraType legacyObliqueRight;
    public static ST_PresetCameraType legacyObliqueBottomLeft;
    public static ST_PresetCameraType legacyObliqueBottom;
    public static ST_PresetCameraType legacyObliqueBottomRight;
    public static ST_PresetCameraType legacyPerspectiveTopLeft;
    public static ST_PresetCameraType legacyPerspectiveTop;
    public static ST_PresetCameraType legacyPerspectiveTopRight;
    public static ST_PresetCameraType legacyPerspectiveLeft;
    public static ST_PresetCameraType legacyPerspectiveFront;
    public static ST_PresetCameraType legacyPerspectiveRight;
    public static ST_PresetCameraType legacyPerspectiveBottomLeft;
    public static ST_PresetCameraType legacyPerspectiveBottom;
    public static ST_PresetCameraType legacyPerspectiveBottomRight;
    public static ST_PresetCameraType orthographicFront;
    public static ST_PresetCameraType isometricTopUp;
    public static ST_PresetCameraType isometricTopDown;
    public static ST_PresetCameraType isometricBottomUp;
    public static ST_PresetCameraType isometricBottomDown;
    public static ST_PresetCameraType isometricLeftUp;
    public static ST_PresetCameraType isometricLeftDown;
    public static ST_PresetCameraType isometricRightUp;
    public static ST_PresetCameraType isometricRightDown;
    public static ST_PresetCameraType isometricOffAxis1Left;
    public static ST_PresetCameraType isometricOffAxis1Right;
    public static ST_PresetCameraType isometricOffAxis1Top;
    public static ST_PresetCameraType isometricOffAxis2Left;
    public static ST_PresetCameraType isometricOffAxis2Right;
    public static ST_PresetCameraType isometricOffAxis2Top;
    public static ST_PresetCameraType isometricOffAxis3Left;
    public static ST_PresetCameraType isometricOffAxis3Right;
    public static ST_PresetCameraType isometricOffAxis3Bottom;
    public static ST_PresetCameraType isometricOffAxis4Left;
    public static ST_PresetCameraType isometricOffAxis4Right;
    public static ST_PresetCameraType isometricOffAxis4Bottom;
    public static ST_PresetCameraType obliqueTopLeft;
    public static ST_PresetCameraType obliqueTop;
    public static ST_PresetCameraType obliqueTopRight;
    public static ST_PresetCameraType obliqueLeft;
    public static ST_PresetCameraType obliqueRight;
    public static ST_PresetCameraType obliqueBottomLeft;
    public static ST_PresetCameraType obliqueBottom;
    public static ST_PresetCameraType obliqueBottomRight;
    public static ST_PresetCameraType perspectiveFront;
    public static ST_PresetCameraType perspectiveLeft;
    public static ST_PresetCameraType perspectiveRight;
    public static ST_PresetCameraType perspectiveAbove;
    public static ST_PresetCameraType perspectiveBelow;
    public static ST_PresetCameraType perspectiveAboveLeftFacing;
    public static ST_PresetCameraType perspectiveAboveRightFacing;
    public static ST_PresetCameraType perspectiveContrastingLeftFacing;
    public static ST_PresetCameraType perspectiveContrastingRightFacing;
    public static ST_PresetCameraType perspectiveHeroicLeftFacing;
    public static ST_PresetCameraType perspectiveHeroicRightFacing;
    public static ST_PresetCameraType perspectiveHeroicExtremeLeftFacing;
    public static ST_PresetCameraType perspectiveHeroicExtremeRightFacing;
    public static ST_PresetCameraType perspectiveRelaxed;
    public static ST_PresetCameraType perspectiveRelaxedModerately;
}
[XmlTypeAttribute]
public enum NPOI.OpenXmlFormats.Dml.ST_PresetColorVal : Enum {
    public int value__;
    public static ST_PresetColorVal aliceBlue;
    public static ST_PresetColorVal antiqueWhite;
    public static ST_PresetColorVal aqua;
    public static ST_PresetColorVal aquamarine;
    public static ST_PresetColorVal azure;
    public static ST_PresetColorVal beige;
    public static ST_PresetColorVal bisque;
    public static ST_PresetColorVal black;
    public static ST_PresetColorVal blanchedAlmond;
    public static ST_PresetColorVal blue;
    public static ST_PresetColorVal blueViolet;
    public static ST_PresetColorVal brown;
    public static ST_PresetColorVal burlyWood;
    public static ST_PresetColorVal cadetBlue;
    public static ST_PresetColorVal chartreuse;
    public static ST_PresetColorVal chocolate;
    public static ST_PresetColorVal coral;
    public static ST_PresetColorVal cornflowerBlue;
    public static ST_PresetColorVal cornsilk;
    public static ST_PresetColorVal crimson;
    public static ST_PresetColorVal cyan;
    public static ST_PresetColorVal dkBlue;
    public static ST_PresetColorVal dkCyan;
    public static ST_PresetColorVal dkGoldenrod;
    public static ST_PresetColorVal dkGray;
    public static ST_PresetColorVal dkGreen;
    public static ST_PresetColorVal dkKhaki;
    public static ST_PresetColorVal dkMagenta;
    public static ST_PresetColorVal dkOliveGreen;
    public static ST_PresetColorVal dkOrange;
    public static ST_PresetColorVal dkOrchid;
    public static ST_PresetColorVal dkRed;
    public static ST_PresetColorVal dkSalmon;
    public static ST_PresetColorVal dkSeaGreen;
    public static ST_PresetColorVal dkSlateBlue;
    public static ST_PresetColorVal dkSlateGray;
    public static ST_PresetColorVal dkTurquoise;
    public static ST_PresetColorVal dkViolet;
    public static ST_PresetColorVal deepPink;
    public static ST_PresetColorVal deepSkyBlue;
    public static ST_PresetColorVal dimGray;
    public static ST_PresetColorVal dodgerBlue;
    public static ST_PresetColorVal firebrick;
    public static ST_PresetColorVal floralWhite;
    public static ST_PresetColorVal forestGreen;
    public static ST_PresetColorVal fuchsia;
    public static ST_PresetColorVal gainsboro;
    public static ST_PresetColorVal ghostWhite;
    public static ST_PresetColorVal gold;
    public static ST_PresetColorVal goldenrod;
    public static ST_PresetColorVal gray;
    public static ST_PresetColorVal green;
    public static ST_PresetColorVal greenYellow;
    public static ST_PresetColorVal honeydew;
    public static ST_PresetColorVal hotPink;
    public static ST_PresetColorVal indianRed;
    public static ST_PresetColorVal indigo;
    public static ST_PresetColorVal ivory;
    public static ST_PresetColorVal khaki;
    public static ST_PresetColorVal lavender;
    public static ST_PresetColorVal lavenderBlush;
    public static ST_PresetColorVal lawnGreen;
    public static ST_PresetColorVal lemonChiffon;
    public static ST_PresetColorVal ltBlue;
    public static ST_PresetColorVal ltCoral;
    public static ST_PresetColorVal ltCyan;
    public static ST_PresetColorVal ltGoldenrodYellow;
    public static ST_PresetColorVal ltGray;
    public static ST_PresetColorVal ltGreen;
    public static ST_PresetColorVal ltPink;
    public static ST_PresetColorVal ltSalmon;
    public static ST_PresetColorVal ltSeaGreen;
    public static ST_PresetColorVal ltSkyBlue;
    public static ST_PresetColorVal ltSlateGray;
    public static ST_PresetColorVal ltSteelBlue;
    public static ST_PresetColorVal ltYellow;
    public static ST_PresetColorVal lime;
    public static ST_PresetColorVal limeGreen;
    public static ST_PresetColorVal linen;
    public static ST_PresetColorVal magenta;
    public static ST_PresetColorVal maroon;
    public static ST_PresetColorVal medAquamarine;
    public static ST_PresetColorVal medBlue;
    public static ST_PresetColorVal medOrchid;
    public static ST_PresetColorVal medPurple;
    public static ST_PresetColorVal medSeaGreen;
    public static ST_PresetColorVal medSlateBlue;
    public static ST_PresetColorVal medSpringGreen;
    public static ST_PresetColorVal medTurquoise;
    public static ST_PresetColorVal medVioletRed;
    public static ST_PresetColorVal midnightBlue;
    public static ST_PresetColorVal mintCream;
    public static ST_PresetColorVal mistyRose;
    public static ST_PresetColorVal moccasin;
    public static ST_PresetColorVal navajoWhite;
    public static ST_PresetColorVal navy;
    public static ST_PresetColorVal oldLace;
    public static ST_PresetColorVal olive;
    public static ST_PresetColorVal oliveDrab;
    public static ST_PresetColorVal orange;
    public static ST_PresetColorVal orangeRed;
    public static ST_PresetColorVal orchid;
    public static ST_PresetColorVal paleGoldenrod;
    public static ST_PresetColorVal paleGreen;
    public static ST_PresetColorVal paleTurquoise;
    public static ST_PresetColorVal paleVioletRed;
    public static ST_PresetColorVal papayaWhip;
    public static ST_PresetColorVal peachPuff;
    public static ST_PresetColorVal peru;
    public static ST_PresetColorVal pink;
    public static ST_PresetColorVal plum;
    public static ST_PresetColorVal powderBlue;
    public static ST_PresetColorVal purple;
    public static ST_PresetColorVal red;
    public static ST_PresetColorVal rosyBrown;
    public static ST_PresetColorVal royalBlue;
    public static ST_PresetColorVal saddleBrown;
    public static ST_PresetColorVal salmon;
    public static ST_PresetColorVal sandyBrown;
    public static ST_PresetColorVal seaGreen;
    public static ST_PresetColorVal seaShell;
    public static ST_PresetColorVal sienna;
    public static ST_PresetColorVal silver;
    public static ST_PresetColorVal skyBlue;
    public static ST_PresetColorVal slateBlue;
    public static ST_PresetColorVal slateGray;
    public static ST_PresetColorVal snow;
    public static ST_PresetColorVal springGreen;
    public static ST_PresetColorVal steelBlue;
    public static ST_PresetColorVal tan;
    public static ST_PresetColorVal teal;
    public static ST_PresetColorVal thistle;
    public static ST_PresetColorVal tomato;
    public static ST_PresetColorVal turquoise;
    public static ST_PresetColorVal violet;
    public static ST_PresetColorVal wheat;
    public static ST_PresetColorVal white;
    public static ST_PresetColorVal whiteSmoke;
    public static ST_PresetColorVal yellow;
    public static ST_PresetColorVal yellowGreen;
}
[XmlTypeAttribute]
public enum NPOI.OpenXmlFormats.Dml.ST_PresetLineDashVal : Enum {
    public int value__;
    public static ST_PresetLineDashVal solid;
    public static ST_PresetLineDashVal dot;
    public static ST_PresetLineDashVal dash;
    public static ST_PresetLineDashVal lgDash;
    public static ST_PresetLineDashVal dashDot;
    public static ST_PresetLineDashVal lgDashDot;
    public static ST_PresetLineDashVal lgDashDotDot;
    public static ST_PresetLineDashVal sysDash;
    public static ST_PresetLineDashVal sysDot;
    public static ST_PresetLineDashVal sysDashDot;
    public static ST_PresetLineDashVal sysDashDotDot;
}
[XmlTypeAttribute]
public enum NPOI.OpenXmlFormats.Dml.ST_PresetMaterialType : Enum {
    public int value__;
    public static ST_PresetMaterialType legacyMatte;
    public static ST_PresetMaterialType legacyPlastic;
    public static ST_PresetMaterialType legacyMetal;
    public static ST_PresetMaterialType legacyWireframe;
    public static ST_PresetMaterialType matte;
    public static ST_PresetMaterialType plastic;
    public static ST_PresetMaterialType metal;
    public static ST_PresetMaterialType warmMatte;
    public static ST_PresetMaterialType translucentPowder;
    public static ST_PresetMaterialType powder;
    public static ST_PresetMaterialType dkEdge;
    public static ST_PresetMaterialType softEdge;
    public static ST_PresetMaterialType clear;
    public static ST_PresetMaterialType flat;
    public static ST_PresetMaterialType softmetal;
}
[XmlTypeAttribute]
public enum NPOI.OpenXmlFormats.Dml.ST_PresetPatternVal : Enum {
    public int value__;
    public static ST_PresetPatternVal pct5;
    public static ST_PresetPatternVal pct10;
    public static ST_PresetPatternVal pct20;
    public static ST_PresetPatternVal pct25;
    public static ST_PresetPatternVal pct30;
    public static ST_PresetPatternVal pct40;
    public static ST_PresetPatternVal pct50;
    public static ST_PresetPatternVal pct60;
    public static ST_PresetPatternVal pct70;
    public static ST_PresetPatternVal pct75;
    public static ST_PresetPatternVal pct80;
    public static ST_PresetPatternVal pct90;
    public static ST_PresetPatternVal horz;
    public static ST_PresetPatternVal vert;
    public static ST_PresetPatternVal ltHorz;
    public static ST_PresetPatternVal ltVert;
    public static ST_PresetPatternVal dkHorz;
    public static ST_PresetPatternVal dkVert;
    public static ST_PresetPatternVal narHorz;
    public static ST_PresetPatternVal narVert;
    public static ST_PresetPatternVal dashHorz;
    public static ST_PresetPatternVal dashVert;
    public static ST_PresetPatternVal cross;
    public static ST_PresetPatternVal dnDiag;
    public static ST_PresetPatternVal upDiag;
    public static ST_PresetPatternVal ltDnDiag;
    public static ST_PresetPatternVal ltUpDiag;
    public static ST_PresetPatternVal dkDnDiag;
    public static ST_PresetPatternVal dkUpDiag;
    public static ST_PresetPatternVal wdDnDiag;
    public static ST_PresetPatternVal wdUpDiag;
    public static ST_PresetPatternVal dashDnDiag;
    public static ST_PresetPatternVal dashUpDiag;
    public static ST_PresetPatternVal diagCross;
    public static ST_PresetPatternVal smCheck;
    public static ST_PresetPatternVal lgCheck;
    public static ST_PresetPatternVal smGrid;
    public static ST_PresetPatternVal lgGrid;
    public static ST_PresetPatternVal dotGrid;
    public static ST_PresetPatternVal smConfetti;
    public static ST_PresetPatternVal lgConfetti;
    public static ST_PresetPatternVal horzBrick;
    public static ST_PresetPatternVal diagBrick;
    public static ST_PresetPatternVal solidDmnd;
    public static ST_PresetPatternVal openDmnd;
    public static ST_PresetPatternVal dotDmnd;
    public static ST_PresetPatternVal plaid;
    public static ST_PresetPatternVal sphere;
    public static ST_PresetPatternVal weave;
    public static ST_PresetPatternVal divot;
    public static ST_PresetPatternVal shingle;
    public static ST_PresetPatternVal wave;
    public static ST_PresetPatternVal trellis;
    public static ST_PresetPatternVal zigZag;
}
[XmlTypeAttribute]
public enum NPOI.OpenXmlFormats.Dml.ST_PresetShadowVal : Enum {
    public int value__;
    public static ST_PresetShadowVal shdw1;
    public static ST_PresetShadowVal shdw2;
    public static ST_PresetShadowVal shdw3;
    public static ST_PresetShadowVal shdw4;
    public static ST_PresetShadowVal shdw5;
    public static ST_PresetShadowVal shdw6;
    public static ST_PresetShadowVal shdw7;
    public static ST_PresetShadowVal shdw8;
    public static ST_PresetShadowVal shdw9;
    public static ST_PresetShadowVal shdw10;
    public static ST_PresetShadowVal shdw11;
    public static ST_PresetShadowVal shdw12;
    public static ST_PresetShadowVal shdw13;
    public static ST_PresetShadowVal shdw14;
    public static ST_PresetShadowVal shdw15;
    public static ST_PresetShadowVal shdw16;
    public static ST_PresetShadowVal shdw17;
    public static ST_PresetShadowVal shdw18;
    public static ST_PresetShadowVal shdw19;
    public static ST_PresetShadowVal shdw20;
}
[XmlTypeAttribute]
public enum NPOI.OpenXmlFormats.Dml.ST_RectAlignment : Enum {
    public int value__;
    public static ST_RectAlignment tl;
    public static ST_RectAlignment t;
    public static ST_RectAlignment tr;
    public static ST_RectAlignment l;
    public static ST_RectAlignment ctr;
    public static ST_RectAlignment r;
    public static ST_RectAlignment bl;
    public static ST_RectAlignment b;
    public static ST_RectAlignment br;
}
[XmlTypeAttribute]
public enum NPOI.OpenXmlFormats.Dml.ST_SchemeColorVal : Enum {
    public int value__;
    public static ST_SchemeColorVal bg1;
    public static ST_SchemeColorVal tx1;
    public static ST_SchemeColorVal bg2;
    public static ST_SchemeColorVal tx2;
    public static ST_SchemeColorVal accent1;
    public static ST_SchemeColorVal accent2;
    public static ST_SchemeColorVal accent3;
    public static ST_SchemeColorVal accent4;
    public static ST_SchemeColorVal accent5;
    public static ST_SchemeColorVal accent6;
    public static ST_SchemeColorVal hlink;
    public static ST_SchemeColorVal folHlink;
    public static ST_SchemeColorVal phClr;
    public static ST_SchemeColorVal dk1;
    public static ST_SchemeColorVal lt1;
    public static ST_SchemeColorVal dk2;
    public static ST_SchemeColorVal lt2;
}
[XmlTypeAttribute]
public enum NPOI.OpenXmlFormats.Dml.ST_ShapeType : Enum {
    public int value__;
    public static ST_ShapeType none;
    public static ST_ShapeType line;
    public static ST_ShapeType lineInv;
    public static ST_ShapeType triangle;
    public static ST_ShapeType rtTriangle;
    public static ST_ShapeType rect;
    public static ST_ShapeType diamond;
    public static ST_ShapeType parallelogram;
    public static ST_ShapeType trapezoid;
    public static ST_ShapeType nonIsoscelesTrapezoid;
    public static ST_ShapeType pentagon;
    public static ST_ShapeType hexagon;
    public static ST_ShapeType heptagon;
    public static ST_ShapeType octagon;
    public static ST_ShapeType decagon;
    public static ST_ShapeType dodecagon;
    public static ST_ShapeType star4;
    public static ST_ShapeType star5;
    public static ST_ShapeType star6;
    public static ST_ShapeType star7;
    public static ST_ShapeType star8;
    public static ST_ShapeType star10;
    public static ST_ShapeType star12;
    public static ST_ShapeType star16;
    public static ST_ShapeType star24;
    public static ST_ShapeType star32;
    public static ST_ShapeType roundRect;
    public static ST_ShapeType round1Rect;
    public static ST_ShapeType round2SameRect;
    public static ST_ShapeType round2DiagRect;
    public static ST_ShapeType snipRoundRect;
    public static ST_ShapeType snip1Rect;
    public static ST_ShapeType snip2SameRect;
    public static ST_ShapeType snip2DiagRect;
    public static ST_ShapeType plaque;
    public static ST_ShapeType ellipse;
    public static ST_ShapeType teardrop;
    public static ST_ShapeType homePlate;
    public static ST_ShapeType chevron;
    public static ST_ShapeType pieWedge;
    public static ST_ShapeType pie;
    public static ST_ShapeType blockArc;
    public static ST_ShapeType donut;
    public static ST_ShapeType noSmoking;
    public static ST_ShapeType rightArrow;
    public static ST_ShapeType leftArrow;
    public static ST_ShapeType upArrow;
    public static ST_ShapeType downArrow;
    public static ST_ShapeType stripedRightArrow;
    public static ST_ShapeType notchedRightArrow;
    public static ST_ShapeType bentUpArrow;
    public static ST_ShapeType leftRightArrow;
    public static ST_ShapeType upDownArrow;
    public static ST_ShapeType leftUpArrow;
    public static ST_ShapeType leftRightUpArrow;
    public static ST_ShapeType quadArrow;
    public static ST_ShapeType leftArrowCallout;
    public static ST_ShapeType rightArrowCallout;
    public static ST_ShapeType upArrowCallout;
    public static ST_ShapeType downArrowCallout;
    public static ST_ShapeType leftRightArrowCallout;
    public static ST_ShapeType upDownArrowCallout;
    public static ST_ShapeType quadArrowCallout;
    public static ST_ShapeType bentArrow;
    public static ST_ShapeType uturnArrow;
    public static ST_ShapeType circularArrow;
    public static ST_ShapeType leftCircularArrow;
    public static ST_ShapeType leftRightCircularArrow;
    public static ST_ShapeType curvedRightArrow;
    public static ST_ShapeType curvedLeftArrow;
    public static ST_ShapeType curvedUpArrow;
    public static ST_ShapeType curvedDownArrow;
    public static ST_ShapeType swooshArrow;
    public static ST_ShapeType cube;
    public static ST_ShapeType can;
    public static ST_ShapeType lightningBolt;
    public static ST_ShapeType heart;
    public static ST_ShapeType sun;
    public static ST_ShapeType moon;
    public static ST_ShapeType smileyFace;
    public static ST_ShapeType irregularSeal1;
    public static ST_ShapeType irregularSeal2;
    public static ST_ShapeType foldedCorner;
    public static ST_ShapeType bevel;
    public static ST_ShapeType frame;
    public static ST_ShapeType halfFrame;
    public static ST_ShapeType corner;
    public static ST_ShapeType diagStripe;
    public static ST_ShapeType chord;
    public static ST_ShapeType arc;
    public static ST_ShapeType leftBracket;
    public static ST_ShapeType rightBracket;
    public static ST_ShapeType leftBrace;
    public static ST_ShapeType rightBrace;
    public static ST_ShapeType bracketPair;
    public static ST_ShapeType bracePair;
    public static ST_ShapeType straightConnector1;
    public static ST_ShapeType bentConnector2;
    public static ST_ShapeType bentConnector3;
    public static ST_ShapeType bentConnector4;
    public static ST_ShapeType bentConnector5;
    public static ST_ShapeType curvedConnector2;
    public static ST_ShapeType curvedConnector3;
    public static ST_ShapeType curvedConnector4;
    public static ST_ShapeType curvedConnector5;
    public static ST_ShapeType callout1;
    public static ST_ShapeType callout2;
    public static ST_ShapeType callout3;
    public static ST_ShapeType accentCallout1;
    public static ST_ShapeType accentCallout2;
    public static ST_ShapeType accentCallout3;
    public static ST_ShapeType borderCallout1;
    public static ST_ShapeType borderCallout2;
    public static ST_ShapeType borderCallout3;
    public static ST_ShapeType accentBorderCallout1;
    public static ST_ShapeType accentBorderCallout2;
    public static ST_ShapeType accentBorderCallout3;
    public static ST_ShapeType wedgeRectCallout;
    public static ST_ShapeType wedgeRoundRectCallout;
    public static ST_ShapeType wedgeEllipseCallout;
    public static ST_ShapeType cloudCallout;
    public static ST_ShapeType cloud;
    public static ST_ShapeType ribbon;
    public static ST_ShapeType ribbon2;
    public static ST_ShapeType ellipseRibbon;
    public static ST_ShapeType ellipseRibbon2;
    public static ST_ShapeType leftRightRibbon;
    public static ST_ShapeType verticalScroll;
    public static ST_ShapeType horizontalScroll;
    public static ST_ShapeType wave;
    public static ST_ShapeType doubleWave;
    public static ST_ShapeType plus;
    public static ST_ShapeType flowChartProcess;
    public static ST_ShapeType flowChartDecision;
    public static ST_ShapeType flowChartInputOutput;
    public static ST_ShapeType flowChartPredefinedProcess;
    public static ST_ShapeType flowChartInternalStorage;
    public static ST_ShapeType flowChartDocument;
    public static ST_ShapeType flowChartMultidocument;
    public static ST_ShapeType flowChartTerminator;
    public static ST_ShapeType flowChartPreparation;
    public static ST_ShapeType flowChartManualInput;
    public static ST_ShapeType flowChartManualOperation;
    public static ST_ShapeType flowChartConnector;
    public static ST_ShapeType flowChartPunchedCard;
    public static ST_ShapeType flowChartPunchedTape;
    public static ST_ShapeType flowChartSummingJunction;
    public static ST_ShapeType flowChartOr;
    public static ST_ShapeType flowChartCollate;
    public static ST_ShapeType flowChartSort;
    public static ST_ShapeType flowChartExtract;
    public static ST_ShapeType flowChartMerge;
    public static ST_ShapeType flowChartOfflineStorage;
    public static ST_ShapeType flowChartOnlineStorage;
    public static ST_ShapeType flowChartMagneticTape;
    public static ST_ShapeType flowChartMagneticDisk;
    public static ST_ShapeType flowChartMagneticDrum;
    public static ST_ShapeType flowChartDisplay;
    public static ST_ShapeType flowChartDelay;
    public static ST_ShapeType flowChartAlternateProcess;
    public static ST_ShapeType flowChartOffpageConnector;
    public static ST_ShapeType actionButtonBlank;
    public static ST_ShapeType actionButtonHome;
    public static ST_ShapeType actionButtonHelp;
    public static ST_ShapeType actionButtonInformation;
    public static ST_ShapeType actionButtonForwardNext;
    public static ST_ShapeType actionButtonBackPrevious;
    public static ST_ShapeType actionButtonEnd;
    public static ST_ShapeType actionButtonBeginning;
    public static ST_ShapeType actionButtonReturn;
    public static ST_ShapeType actionButtonDocument;
    public static ST_ShapeType actionButtonSound;
    public static ST_ShapeType actionButtonMovie;
    public static ST_ShapeType gear6;
    public static ST_ShapeType gear9;
    public static ST_ShapeType funnel;
    public static ST_ShapeType mathPlus;
    public static ST_ShapeType mathMinus;
    public static ST_ShapeType mathMultiply;
    public static ST_ShapeType mathDivide;
    public static ST_ShapeType mathEqual;
    public static ST_ShapeType mathNotEqual;
    public static ST_ShapeType cornerTabs;
    public static ST_ShapeType squareTabs;
    public static ST_ShapeType plaqueTabs;
    public static ST_ShapeType chartX;
    public static ST_ShapeType chartStar;
    public static ST_ShapeType chartPlus;
}
[XmlTypeAttribute]
public enum NPOI.OpenXmlFormats.Dml.ST_SystemColorVal : Enum {
    public int value__;
    public static ST_SystemColorVal scrollBar;
    public static ST_SystemColorVal background;
    public static ST_SystemColorVal activeCaption;
    public static ST_SystemColorVal inactiveCaption;
    public static ST_SystemColorVal menu;
    public static ST_SystemColorVal window;
    public static ST_SystemColorVal windowFrame;
    public static ST_SystemColorVal menuText;
    public static ST_SystemColorVal windowText;
    public static ST_SystemColorVal captionText;
    public static ST_SystemColorVal activeBorder;
    public static ST_SystemColorVal inactiveBorder;
    public static ST_SystemColorVal appWorkspace;
    public static ST_SystemColorVal highlight;
    public static ST_SystemColorVal highlightText;
    public static ST_SystemColorVal btnFace;
    public static ST_SystemColorVal btnShadow;
    public static ST_SystemColorVal grayText;
    public static ST_SystemColorVal btnText;
    public static ST_SystemColorVal inactiveCaptionText;
    public static ST_SystemColorVal btnHighlight;
    [XmlEnumAttribute("3dDkShadow")]
public static ST_SystemColorVal Item3dDkShadow;
    [XmlEnumAttribute("3dLight")]
public static ST_SystemColorVal Item3dLight;
    public static ST_SystemColorVal infoText;
    public static ST_SystemColorVal infoBk;
    public static ST_SystemColorVal hotLight;
    public static ST_SystemColorVal gradientActiveCaption;
    public static ST_SystemColorVal gradientInactiveCaption;
    public static ST_SystemColorVal menuHighlight;
    public static ST_SystemColorVal menuBar;
}
[XmlTypeAttribute]
public enum NPOI.OpenXmlFormats.Dml.ST_TextAlignType : Enum {
    public int value__;
    public static ST_TextAlignType l;
    public static ST_TextAlignType ctr;
    public static ST_TextAlignType r;
    public static ST_TextAlignType just;
    public static ST_TextAlignType justLow;
    public static ST_TextAlignType dist;
    public static ST_TextAlignType thaiDist;
}
[XmlTypeAttribute]
[XmlRootAttribute]
public enum NPOI.OpenXmlFormats.Dml.ST_TextAnchoringType : Enum {
    public int value__;
    public static ST_TextAnchoringType t;
    public static ST_TextAnchoringType ctr;
    public static ST_TextAnchoringType b;
    public static ST_TextAnchoringType just;
    public static ST_TextAnchoringType dist;
}
[XmlTypeAttribute]
public enum NPOI.OpenXmlFormats.Dml.ST_TextAutonumberScheme : Enum {
    public int value__;
    public static ST_TextAutonumberScheme alphaLcParenBoth;
    public static ST_TextAutonumberScheme alphaUcParenBoth;
    public static ST_TextAutonumberScheme alphaLcParenR;
    public static ST_TextAutonumberScheme alphaUcParenR;
    public static ST_TextAutonumberScheme alphaLcPeriod;
    public static ST_TextAutonumberScheme alphaUcPeriod;
    public static ST_TextAutonumberScheme arabicParenBoth;
    public static ST_TextAutonumberScheme arabicParenR;
    public static ST_TextAutonumberScheme arabicPeriod;
    public static ST_TextAutonumberScheme arabicPlain;
    public static ST_TextAutonumberScheme romanLcParenBoth;
    public static ST_TextAutonumberScheme romanUcParenBoth;
    public static ST_TextAutonumberScheme romanLcParenR;
    public static ST_TextAutonumberScheme romanUcParenR;
    public static ST_TextAutonumberScheme romanLcPeriod;
    public static ST_TextAutonumberScheme romanUcPeriod;
    public static ST_TextAutonumberScheme circleNumDbPlain;
    public static ST_TextAutonumberScheme circleNumWdBlackPlain;
    public static ST_TextAutonumberScheme circleNumWdWhitePlain;
    public static ST_TextAutonumberScheme arabicDbPeriod;
    public static ST_TextAutonumberScheme arabicDbPlain;
    public static ST_TextAutonumberScheme ea1ChsPeriod;
    public static ST_TextAutonumberScheme ea1ChsPlain;
    public static ST_TextAutonumberScheme ea1ChtPeriod;
    public static ST_TextAutonumberScheme ea1ChtPlain;
    public static ST_TextAutonumberScheme ea1JpnChsDbPeriod;
    public static ST_TextAutonumberScheme ea1JpnKorPlain;
    public static ST_TextAutonumberScheme ea1JpnKorPeriod;
    public static ST_TextAutonumberScheme arabic1Minus;
    public static ST_TextAutonumberScheme arabic2Minus;
    public static ST_TextAutonumberScheme hebrew2Minus;
    public static ST_TextAutonumberScheme thaiAlphaPeriod;
    public static ST_TextAutonumberScheme thaiAlphaParenR;
    public static ST_TextAutonumberScheme thaiAlphaParenBoth;
    public static ST_TextAutonumberScheme thaiNumPeriod;
    public static ST_TextAutonumberScheme thaiNumParenR;
    public static ST_TextAutonumberScheme thaiNumParenBoth;
    public static ST_TextAutonumberScheme hindiAlphaPeriod;
    public static ST_TextAutonumberScheme hindiNumPeriod;
    public static ST_TextAutonumberScheme hindiNumParenR;
    public static ST_TextAutonumberScheme hindiAlpha1Period;
}
[XmlTypeAttribute]
public enum NPOI.OpenXmlFormats.Dml.ST_TextCapsType : Enum {
    public int value__;
    public static ST_TextCapsType none;
    public static ST_TextCapsType small;
    public static ST_TextCapsType all;
}
[XmlTypeAttribute]
public enum NPOI.OpenXmlFormats.Dml.ST_TextFontAlignType : Enum {
    public int value__;
    public static ST_TextFontAlignType auto;
    public static ST_TextFontAlignType t;
    public static ST_TextFontAlignType ctr;
    public static ST_TextFontAlignType base;
    public static ST_TextFontAlignType b;
}
[XmlTypeAttribute]
[XmlRootAttribute]
public enum NPOI.OpenXmlFormats.Dml.ST_TextHorzOverflowType : Enum {
    public int value__;
    public static ST_TextHorzOverflowType overflow;
    public static ST_TextHorzOverflowType clip;
}
[XmlTypeAttribute]
public enum NPOI.OpenXmlFormats.Dml.ST_TextShapeType : Enum {
    public int value__;
    public static ST_TextShapeType textNoShape;
    public static ST_TextShapeType textPlain;
    public static ST_TextShapeType textStop;
    public static ST_TextShapeType textTriangle;
    public static ST_TextShapeType textTriangleInverted;
    public static ST_TextShapeType textChevron;
    public static ST_TextShapeType textChevronInverted;
    public static ST_TextShapeType textRingInside;
    public static ST_TextShapeType textRingOutside;
    public static ST_TextShapeType textArchUp;
    public static ST_TextShapeType textArchDown;
    public static ST_TextShapeType textCircle;
    public static ST_TextShapeType textButton;
    public static ST_TextShapeType textArchUpPour;
    public static ST_TextShapeType textArchDownPour;
    public static ST_TextShapeType textCirclePour;
    public static ST_TextShapeType textButtonPour;
    public static ST_TextShapeType textCurveUp;
    public static ST_TextShapeType textCurveDown;
    public static ST_TextShapeType textCanUp;
    public static ST_TextShapeType textCanDown;
    public static ST_TextShapeType textWave1;
    public static ST_TextShapeType textWave2;
    public static ST_TextShapeType textDoubleWave1;
    public static ST_TextShapeType textWave4;
    public static ST_TextShapeType textInflate;
    public static ST_TextShapeType textDeflate;
    public static ST_TextShapeType textInflateBottom;
    public static ST_TextShapeType textDeflateBottom;
    public static ST_TextShapeType textInflateTop;
    public static ST_TextShapeType textDeflateTop;
    public static ST_TextShapeType textDeflateInflate;
    public static ST_TextShapeType textDeflateInflateDeflate;
    public static ST_TextShapeType textFadeRight;
    public static ST_TextShapeType textFadeLeft;
    public static ST_TextShapeType textFadeUp;
    public static ST_TextShapeType textFadeDown;
    public static ST_TextShapeType textSlantUp;
    public static ST_TextShapeType textSlantDown;
    public static ST_TextShapeType textCascadeUp;
    public static ST_TextShapeType textCascadeDown;
}
[XmlTypeAttribute]
public enum NPOI.OpenXmlFormats.Dml.ST_TextStrikeType : Enum {
    public int value__;
    public static ST_TextStrikeType noStrike;
    public static ST_TextStrikeType sngStrike;
    public static ST_TextStrikeType dblStrike;
}
[XmlTypeAttribute]
public enum NPOI.OpenXmlFormats.Dml.ST_TextTabAlignType : Enum {
    public int value__;
    public static ST_TextTabAlignType l;
    public static ST_TextTabAlignType ctr;
    public static ST_TextTabAlignType r;
    public static ST_TextTabAlignType dec;
}
[XmlTypeAttribute]
public enum NPOI.OpenXmlFormats.Dml.ST_TextUnderlineType : Enum {
    public int value__;
    public static ST_TextUnderlineType none;
    public static ST_TextUnderlineType words;
    public static ST_TextUnderlineType sng;
    public static ST_TextUnderlineType dbl;
    public static ST_TextUnderlineType heavy;
    public static ST_TextUnderlineType dotted;
    public static ST_TextUnderlineType dottedHeavy;
    public static ST_TextUnderlineType dash;
    public static ST_TextUnderlineType dashHeavy;
    public static ST_TextUnderlineType dashLong;
    public static ST_TextUnderlineType dashLongHeavy;
    public static ST_TextUnderlineType dotDash;
    public static ST_TextUnderlineType dotDashHeavy;
    public static ST_TextUnderlineType dotDotDash;
    public static ST_TextUnderlineType dotDotDashHeavy;
    public static ST_TextUnderlineType wavy;
    public static ST_TextUnderlineType wavyHeavy;
    public static ST_TextUnderlineType wavyDbl;
}
[XmlTypeAttribute]
[XmlRootAttribute]
public enum NPOI.OpenXmlFormats.Dml.ST_TextVerticalType : Enum {
    public int value__;
    public static ST_TextVerticalType horz;
    public static ST_TextVerticalType vert;
    public static ST_TextVerticalType vert270;
    public static ST_TextVerticalType wordArtVert;
    public static ST_TextVerticalType eaVert;
    public static ST_TextVerticalType mongolianVert;
    public static ST_TextVerticalType wordArtVertRtl;
}
[XmlTypeAttribute]
[XmlRootAttribute]
public enum NPOI.OpenXmlFormats.Dml.ST_TextVertOverflowType : Enum {
    public int value__;
    public static ST_TextVertOverflowType overflow;
    public static ST_TextVertOverflowType ellipsis;
    public static ST_TextVertOverflowType clip;
}
[XmlTypeAttribute]
[XmlRootAttribute]
public enum NPOI.OpenXmlFormats.Dml.ST_TextWrappingType : Enum {
    public int value__;
    public static ST_TextWrappingType none;
    public static ST_TextWrappingType square;
}
[XmlTypeAttribute]
public enum NPOI.OpenXmlFormats.Dml.ST_TileFlipMode : Enum {
    public int value__;
    public static ST_TileFlipMode none;
    public static ST_TileFlipMode x;
    public static ST_TileFlipMode y;
    public static ST_TileFlipMode xy;
}
[XmlTypeAttribute]
[XmlRootAttribute("anchor")]
public class NPOI.OpenXmlFormats.Dml.WordProcessing.CT_Anchor : object {
    private CT_Point2D simplePosField;
    private CT_PosH positionHField;
    private CT_PosV positionVField;
    private CT_PositiveSize2D extentField;
    private CT_EffectExtent effectExtentField;
    private CT_NonVisualDrawingProps docPrField;
    private CT_NonVisualGraphicFrameProperties cNvGraphicFramePrField;
    private CT_GraphicalObject graphicField;
    private UInt32 distTField;
    private bool distTFieldSpecified;
    private UInt32 distBField;
    private bool distBFieldSpecified;
    private UInt32 distLField;
    private bool distLFieldSpecified;
    private UInt32 distRField;
    private bool distRFieldSpecified;
    private bool simplePos1Field;
    private bool simplePos1FieldSpecified;
    private UInt32 relativeHeightField;
    private bool behindDocField;
    private bool lockedField;
    private bool layoutInCellField;
    private bool hiddenField;
    private bool hiddenFieldSpecified;
    private bool allowOverlapField;
    private CT_WrapNone wrapNoneField;
    private CT_WrapTight wrapTightField;
    private CT_WrapTopBottom wrapTopAndBottomField;
    private CT_WrapSquare wrapSquareField;
    private CT_WrapThrough wrapThroughField;
    private Byte[] anchorIdField;
    private Byte[] editIdField;
    [XmlElementAttribute]
public CT_Point2D simplePos { get; public set; }
    [XmlElementAttribute]
public CT_PosH positionH { get; public set; }
    [XmlElementAttribute]
public CT_PosV positionV { get; public set; }
    [XmlElementAttribute]
public CT_PositiveSize2D extent { get; public set; }
    [XmlElementAttribute]
public CT_EffectExtent effectExtent { get; public set; }
    public CT_WrapNone wrapNone { get; public set; }
    public CT_WrapTight wrapTight { get; public set; }
    public CT_WrapTopBottom wrapTopAndBottom { get; public set; }
    public CT_WrapSquare wrapSquare { get; public set; }
    public CT_WrapThrough wrapThrough { get; public set; }
    [XmlElementAttribute]
public CT_NonVisualDrawingProps docPr { get; public set; }
    [XmlElementAttribute]
public CT_NonVisualGraphicFrameProperties cNvGraphicFramePr { get; public set; }
    [XmlElementAttribute]
public CT_GraphicalObject graphic { get; public set; }
    [XmlAttributeAttribute]
public UInt32 distT { get; public set; }
    [XmlIgnoreAttribute]
public bool distTSpecified { get; public set; }
    [XmlAttributeAttribute]
public UInt32 distB { get; public set; }
    [XmlIgnoreAttribute]
public bool distBSpecified { get; public set; }
    [XmlAttributeAttribute]
public UInt32 distL { get; public set; }
    [XmlIgnoreAttribute]
public bool distLSpecified { get; public set; }
    [XmlAttributeAttribute]
public UInt32 distR { get; public set; }
    [XmlIgnoreAttribute]
public bool distRSpecified { get; public set; }
    [XmlAttributeAttribute("simplePos")]
public bool simplePos1 { get; public set; }
    [XmlIgnoreAttribute]
public bool simplePos1Specified { get; public set; }
    [XmlAttributeAttribute]
public UInt32 relativeHeight { get; public set; }
    [XmlAttributeAttribute]
public bool behindDoc { get; public set; }
    [XmlAttributeAttribute]
public bool locked { get; public set; }
    [XmlAttributeAttribute]
public bool layoutInCell { get; public set; }
    [XmlAttributeAttribute]
public bool hidden { get; public set; }
    [XmlIgnoreAttribute]
public bool hiddenSpecified { get; public set; }
    [XmlAttributeAttribute]
public bool allowOverlap { get; public set; }
    public CT_Point2D get_simplePos();
    public void set_simplePos(CT_Point2D value);
    public CT_PosH get_positionH();
    public void set_positionH(CT_PosH value);
    public CT_PosV get_positionV();
    public void set_positionV(CT_PosV value);
    public CT_PositiveSize2D get_extent();
    public void set_extent(CT_PositiveSize2D value);
    public CT_EffectExtent get_effectExtent();
    public void set_effectExtent(CT_EffectExtent value);
    public CT_WrapNone get_wrapNone();
    public void set_wrapNone(CT_WrapNone value);
    public CT_WrapTight get_wrapTight();
    public void set_wrapTight(CT_WrapTight value);
    public CT_WrapTopBottom get_wrapTopAndBottom();
    public void set_wrapTopAndBottom(CT_WrapTopBottom value);
    public CT_WrapSquare get_wrapSquare();
    public void set_wrapSquare(CT_WrapSquare value);
    public CT_WrapThrough get_wrapThrough();
    public void set_wrapThrough(CT_WrapThrough value);
    public CT_NonVisualDrawingProps get_docPr();
    public void set_docPr(CT_NonVisualDrawingProps value);
    public CT_NonVisualGraphicFrameProperties get_cNvGraphicFramePr();
    public void set_cNvGraphicFramePr(CT_NonVisualGraphicFrameProperties value);
    public CT_GraphicalObject get_graphic();
    public void set_graphic(CT_GraphicalObject value);
    public UInt32 get_distT();
    public void set_distT(UInt32 value);
    public bool get_distTSpecified();
    public void set_distTSpecified(bool value);
    public UInt32 get_distB();
    public void set_distB(UInt32 value);
    public bool get_distBSpecified();
    public void set_distBSpecified(bool value);
    public UInt32 get_distL();
    public void set_distL(UInt32 value);
    public bool get_distLSpecified();
    public void set_distLSpecified(bool value);
    public UInt32 get_distR();
    public void set_distR(UInt32 value);
    public bool get_distRSpecified();
    public void set_distRSpecified(bool value);
    public bool get_simplePos1();
    public void set_simplePos1(bool value);
    public bool get_simplePos1Specified();
    public void set_simplePos1Specified(bool value);
    public UInt32 get_relativeHeight();
    public void set_relativeHeight(UInt32 value);
    public bool get_behindDoc();
    public void set_behindDoc(bool value);
    public bool get_locked();
    public void set_locked(bool value);
    public bool get_layoutInCell();
    public void set_layoutInCell(bool value);
    public bool get_hidden();
    public void set_hidden(bool value);
    public bool get_hiddenSpecified();
    public void set_hiddenSpecified(bool value);
    public bool get_allowOverlap();
    public void set_allowOverlap(bool value);
    public static CT_Anchor Parse(XmlNode node, XmlNamespaceManager namespaceManager);
    internal void Write(StreamWriter sw, string nodeName);
}
[XmlTypeAttribute]
[XmlRootAttribute]
public class NPOI.OpenXmlFormats.Dml.WordProcessing.CT_Drawing : object {
    private List`1<CT_Anchor> anchorField;
    private List`1<CT_Inline> inlineField;
    public List`1<CT_Anchor> anchor { get; public set; }
    public List`1<CT_Inline> inline { get; public set; }
    public static CT_Drawing Parse(XmlNode node, XmlNamespaceManager namespaceManager);
    internal void Write(StreamWriter sw, string nodeName);
    public List`1<CT_Anchor> get_anchor();
    public void set_anchor(List`1<CT_Anchor> value);
    public List`1<CT_Inline> get_inline();
    public void set_inline(List`1<CT_Inline> value);
    public CT_Inline AddNewInline();
    public List`1<CT_Anchor> GetAnchorList();
    public List`1<CT_Inline> GetInlineList();
    public CT_Inline GetInlineArray(int p);
}
[XmlTypeAttribute]
[XmlRootAttribute]
public class NPOI.OpenXmlFormats.Dml.WordProcessing.CT_EffectExtent : object {
    private long lField;
    private long tField;
    private long rField;
    private long bField;
    [XmlAttributeAttribute]
public long l { get; public set; }
    [XmlAttributeAttribute]
public long t { get; public set; }
    [XmlAttributeAttribute]
public long r { get; public set; }
    [XmlAttributeAttribute]
public long b { get; public set; }
    public static CT_EffectExtent Parse(XmlNode node, XmlNamespaceManager namespaceManager);
    internal void Write(StreamWriter sw, string nodeName);
    public long get_l();
    public void set_l(long value);
    public long get_t();
    public void set_t(long value);
    public long get_r();
    public void set_r(long value);
    public long get_b();
    public void set_b(long value);
}
[XmlTypeAttribute]
[XmlRootAttribute("inline")]
public class NPOI.OpenXmlFormats.Dml.WordProcessing.CT_Inline : object {
    private CT_PositiveSize2D extentField;
    private CT_EffectExtent effectExtentField;
    private CT_NonVisualDrawingProps docPrField;
    private CT_NonVisualGraphicFrameProperties cNvGraphicFramePrField;
    private CT_GraphicalObject graphicField;
    private UInt32 distTField;
    private bool distTFieldSpecified;
    private UInt32 distBField;
    private bool distBFieldSpecified;
    private UInt32 distLField;
    private bool distLFieldSpecified;
    private UInt32 distRField;
    private bool distRFieldSpecified;
    [XmlElementAttribute]
public CT_PositiveSize2D extent { get; public set; }
    [XmlElementAttribute]
public CT_EffectExtent effectExtent { get; public set; }
    [XmlElementAttribute]
public CT_NonVisualDrawingProps docPr { get; public set; }
    [XmlElementAttribute]
public CT_NonVisualGraphicFrameProperties cNvGraphicFramePr { get; public set; }
    [XmlElementAttribute]
public CT_GraphicalObject graphic { get; public set; }
    [XmlAttributeAttribute]
public UInt32 distT { get; public set; }
    [XmlIgnoreAttribute]
public bool distTSpecified { get; public set; }
    [XmlAttributeAttribute]
public UInt32 distB { get; public set; }
    [XmlIgnoreAttribute]
public bool distBSpecified { get; public set; }
    [XmlAttributeAttribute]
public UInt32 distL { get; public set; }
    [XmlIgnoreAttribute]
public bool distLSpecified { get; public set; }
    [XmlAttributeAttribute]
public UInt32 distR { get; public set; }
    [XmlIgnoreAttribute]
public bool distRSpecified { get; public set; }
    public static CT_Inline Parse(XmlNode node, XmlNamespaceManager namespaceManager);
    internal void Write(StreamWriter sw, string nodeName);
    public CT_PositiveSize2D get_extent();
    public void set_extent(CT_PositiveSize2D value);
    public CT_EffectExtent get_effectExtent();
    public void set_effectExtent(CT_EffectExtent value);
    public CT_NonVisualDrawingProps get_docPr();
    public void set_docPr(CT_NonVisualDrawingProps value);
    public CT_NonVisualGraphicFrameProperties get_cNvGraphicFramePr();
    public void set_cNvGraphicFramePr(CT_NonVisualGraphicFrameProperties value);
    public CT_GraphicalObject get_graphic();
    public void set_graphic(CT_GraphicalObject value);
    public UInt32 get_distT();
    public void set_distT(UInt32 value);
    public bool get_distTSpecified();
    public void set_distTSpecified(bool value);
    public UInt32 get_distB();
    public void set_distB(UInt32 value);
    public bool get_distBSpecified();
    public void set_distBSpecified(bool value);
    public UInt32 get_distL();
    public void set_distL(UInt32 value);
    public bool get_distLSpecified();
    public void set_distLSpecified(bool value);
    public UInt32 get_distR();
    public void set_distR(UInt32 value);
    public bool get_distRSpecified();
    public void set_distRSpecified(bool value);
    public CT_PositiveSize2D AddNewExtent();
    public CT_NonVisualDrawingProps AddNewDocPr();
}
[DesignerCategoryAttribute("code")]
[XmlTypeAttribute]
[XmlRootAttribute]
public class NPOI.OpenXmlFormats.Dml.WordProcessing.CT_NonVisualDrawingProps : object {
    private CT_Hyperlink hlinkClickField;
    private CT_Hyperlink hlinkHoverField;
    private CT_OfficeArtExtensionList extLstField;
    private UInt32 idField;
    private string nameField;
    private string descrField;
    private Nullable`1<bool> hiddenField;
    [XmlElementAttribute]
public CT_Hyperlink hlinkClick { get; public set; }
    [XmlElementAttribute]
public CT_Hyperlink hlinkHover { get; public set; }
    [XmlElementAttribute]
public CT_OfficeArtExtensionList extLst { get; public set; }
    [XmlAttributeAttribute]
public UInt32 id { get; public set; }
    [XmlAttributeAttribute]
public string name { get; public set; }
    [XmlAttributeAttribute]
[DefaultValueAttribute("")]
public string descr { get; public set; }
    [XmlIgnoreAttribute]
public bool descrSpecified { get; }
    [XmlAttributeAttribute]
[DefaultValueAttribute("False")]
public bool hidden { get; public set; }
    [XmlIgnoreAttribute]
public bool hiddenSpecified { get; }
    public static CT_NonVisualDrawingProps Parse(XmlNode node, XmlNamespaceManager namespaceManager);
    internal void Write(StreamWriter sw, string nodeName);
    public CT_Hyperlink get_hlinkClick();
    public void set_hlinkClick(CT_Hyperlink value);
    public CT_Hyperlink get_hlinkHover();
    public void set_hlinkHover(CT_Hyperlink value);
    public CT_OfficeArtExtensionList get_extLst();
    public void set_extLst(CT_OfficeArtExtensionList value);
    public UInt32 get_id();
    public void set_id(UInt32 value);
    public string get_name();
    public void set_name(string value);
    public string get_descr();
    public void set_descr(string value);
    public bool get_descrSpecified();
    public bool get_hidden();
    public void set_hidden(bool value);
    public bool get_hiddenSpecified();
}
[DesignerCategoryAttribute("code")]
[XmlTypeAttribute]
[XmlRootAttribute("inline")]
public class NPOI.OpenXmlFormats.Dml.WordProcessing.CT_NonVisualGraphicFrameProperties : object {
    private CT_GraphicalObjectFrameLocking graphicFrameLocksField;
    private CT_OfficeArtExtensionList extLstField;
    [XmlElementAttribute]
public CT_GraphicalObjectFrameLocking graphicFrameLocks { get; public set; }
    [XmlElementAttribute]
public CT_OfficeArtExtensionList extLst { get; public set; }
    public static CT_NonVisualGraphicFrameProperties Parse(XmlNode node, XmlNamespaceManager namespaceManager);
    internal void Write(StreamWriter sw, string nodeName);
    public CT_GraphicalObjectFrameLocking get_graphicFrameLocks();
    public void set_graphicFrameLocks(CT_GraphicalObjectFrameLocking value);
    public CT_OfficeArtExtensionList get_extLst();
    public void set_extLst(CT_OfficeArtExtensionList value);
}
[XmlTypeAttribute]
[XmlRootAttribute]
public class NPOI.OpenXmlFormats.Dml.WordProcessing.CT_PosH : object {
    private ST_RelFromH relativeFromField;
    private Nullable`1<int> posOffsetField;
    private Nullable`1<ST_AlignH> alignField;
    public Nullable`1<int> posOffset { get; public set; }
    public Nullable`1<ST_AlignH> align { get; public set; }
    [XmlAttributeAttribute]
public ST_RelFromH relativeFrom { get; public set; }
    public static CT_PosH Parse(XmlNode node, XmlNamespaceManager namespaceManager);
    internal void Write(StreamWriter sw, string nodeName);
    public Nullable`1<int> get_posOffset();
    public void set_posOffset(Nullable`1<int> value);
    public Nullable`1<ST_AlignH> get_align();
    public void set_align(Nullable`1<ST_AlignH> value);
    public ST_RelFromH get_relativeFrom();
    public void set_relativeFrom(ST_RelFromH value);
}
[XmlTypeAttribute]
[XmlRootAttribute("inline")]
public class NPOI.OpenXmlFormats.Dml.WordProcessing.CT_PositiveSize2D : object {
    private long cxField;
    private long cyField;
    [XmlAttributeAttribute]
public long cx { get; public set; }
    [XmlAttributeAttribute]
public long cy { get; public set; }
    public static CT_PositiveSize2D Parse(XmlNode node, XmlNamespaceManager namespaceManager);
    internal void Write(StreamWriter sw, string nodeName);
    public long get_cx();
    public void set_cx(long value);
    public long get_cy();
    public void set_cy(long value);
}
[XmlTypeAttribute]
[XmlRootAttribute]
public class NPOI.OpenXmlFormats.Dml.WordProcessing.CT_PosV : object {
    private ST_RelFromV relativeFromField;
    private Nullable`1<int> posOffsetField;
    private Nullable`1<ST_AlignV> alignField;
    public Nullable`1<int> posOffset { get; public set; }
    public Nullable`1<ST_AlignV> align { get; public set; }
    [XmlAttributeAttribute]
public ST_RelFromV relativeFrom { get; public set; }
    public static CT_PosV Parse(XmlNode node, XmlNamespaceManager namespaceManager);
    internal void Write(StreamWriter sw, string nodeName);
    public Nullable`1<int> get_posOffset();
    public void set_posOffset(Nullable`1<int> value);
    public Nullable`1<ST_AlignV> get_align();
    public void set_align(Nullable`1<ST_AlignV> value);
    public ST_RelFromV get_relativeFrom();
    public void set_relativeFrom(ST_RelFromV value);
}
[XmlTypeAttribute]
[XmlRootAttribute]
public class NPOI.OpenXmlFormats.Dml.WordProcessing.CT_WrapNone : object {
    internal void Write(StreamWriter sw, string nodeName);
}
[XmlTypeAttribute]
[XmlRootAttribute]
public class NPOI.OpenXmlFormats.Dml.WordProcessing.CT_WrapPath : object {
    private CT_Point2D startField;
    private List`1<CT_Point2D> lineToField;
    private bool editedField;
    private bool editedFieldSpecified;
    [XmlElementAttribute]
public CT_Point2D start { get; public set; }
    [XmlElementAttribute("lineTo")]
public List`1<CT_Point2D> lineTo { get; public set; }
    [XmlAttributeAttribute]
public bool edited { get; public set; }
    [XmlIgnoreAttribute]
public bool editedSpecified { get; public set; }
    public CT_Point2D get_start();
    public void set_start(CT_Point2D value);
    public List`1<CT_Point2D> get_lineTo();
    public void set_lineTo(List`1<CT_Point2D> value);
    public bool get_edited();
    public void set_edited(bool value);
    public bool get_editedSpecified();
    public void set_editedSpecified(bool value);
    internal static CT_WrapPath Parse(XmlNode node, XmlNamespaceManager namespaceManager);
    internal void Write(StreamWriter sw, string nodeName);
}
[XmlTypeAttribute]
[XmlRootAttribute]
public class NPOI.OpenXmlFormats.Dml.WordProcessing.CT_WrapSquare : object {
    private CT_EffectExtent effectExtentField;
    private ST_WrapText wrapTextField;
    private UInt32 distTField;
    private bool distTFieldSpecified;
    private UInt32 distBField;
    private bool distBFieldSpecified;
    private UInt32 distLField;
    private bool distLFieldSpecified;
    private UInt32 distRField;
    private bool distRFieldSpecified;
    [XmlElementAttribute]
public CT_EffectExtent effectExtent { get; public set; }
    [XmlAttributeAttribute]
public ST_WrapText wrapText { get; public set; }
    [XmlAttributeAttribute]
public UInt32 distT { get; public set; }
    [XmlIgnoreAttribute]
public bool distTSpecified { get; public set; }
    [XmlAttributeAttribute]
public UInt32 distB { get; public set; }
    [XmlIgnoreAttribute]
public bool distBSpecified { get; public set; }
    [XmlAttributeAttribute]
public UInt32 distL { get; public set; }
    [XmlIgnoreAttribute]
public bool distLSpecified { get; public set; }
    [XmlAttributeAttribute]
public UInt32 distR { get; public set; }
    [XmlIgnoreAttribute]
public bool distRSpecified { get; public set; }
    public static CT_WrapSquare Parse(XmlNode node, XmlNamespaceManager namespaceManager);
    internal void Write(StreamWriter sw, string nodeName);
    public CT_EffectExtent get_effectExtent();
    public void set_effectExtent(CT_EffectExtent value);
    public ST_WrapText get_wrapText();
    public void set_wrapText(ST_WrapText value);
    public UInt32 get_distT();
    public void set_distT(UInt32 value);
    public bool get_distTSpecified();
    public void set_distTSpecified(bool value);
    public UInt32 get_distB();
    public void set_distB(UInt32 value);
    public bool get_distBSpecified();
    public void set_distBSpecified(bool value);
    public UInt32 get_distL();
    public void set_distL(UInt32 value);
    public bool get_distLSpecified();
    public void set_distLSpecified(bool value);
    public UInt32 get_distR();
    public void set_distR(UInt32 value);
    public bool get_distRSpecified();
    public void set_distRSpecified(bool value);
}
[XmlTypeAttribute]
[XmlRootAttribute]
public class NPOI.OpenXmlFormats.Dml.WordProcessing.CT_WrapThrough : object {
    private CT_WrapPath wrapPolygonField;
    private ST_WrapText wrapTextField;
    private UInt32 distLField;
    private bool distLFieldSpecified;
    private UInt32 distRField;
    private bool distRFieldSpecified;
    [XmlElementAttribute]
public CT_WrapPath wrapPolygon { get; public set; }
    [XmlAttributeAttribute]
public ST_WrapText wrapText { get; public set; }
    [XmlAttributeAttribute]
public UInt32 distL { get; public set; }
    [XmlIgnoreAttribute]
public bool distLSpecified { get; public set; }
    [XmlAttributeAttribute]
public UInt32 distR { get; public set; }
    [XmlIgnoreAttribute]
public bool distRSpecified { get; public set; }
    public CT_WrapPath get_wrapPolygon();
    public void set_wrapPolygon(CT_WrapPath value);
    public ST_WrapText get_wrapText();
    public void set_wrapText(ST_WrapText value);
    public UInt32 get_distL();
    public void set_distL(UInt32 value);
    public bool get_distLSpecified();
    public void set_distLSpecified(bool value);
    public UInt32 get_distR();
    public void set_distR(UInt32 value);
    public bool get_distRSpecified();
    public void set_distRSpecified(bool value);
}
[XmlTypeAttribute]
[XmlRootAttribute]
public class NPOI.OpenXmlFormats.Dml.WordProcessing.CT_WrapTight : object {
    private CT_WrapPath wrapPolygonField;
    private ST_WrapText wrapTextField;
    private UInt32 distLField;
    private bool distLFieldSpecified;
    private UInt32 distRField;
    private bool distRFieldSpecified;
    [XmlElementAttribute]
public CT_WrapPath wrapPolygon { get; public set; }
    [XmlAttributeAttribute]
public ST_WrapText wrapText { get; public set; }
    [XmlAttributeAttribute]
public UInt32 distL { get; public set; }
    [XmlIgnoreAttribute]
public bool distLSpecified { get; public set; }
    [XmlAttributeAttribute]
public UInt32 distR { get; public set; }
    [XmlIgnoreAttribute]
public bool distRSpecified { get; public set; }
    public CT_WrapPath get_wrapPolygon();
    public void set_wrapPolygon(CT_WrapPath value);
    public ST_WrapText get_wrapText();
    public void set_wrapText(ST_WrapText value);
    public UInt32 get_distL();
    public void set_distL(UInt32 value);
    public bool get_distLSpecified();
    public void set_distLSpecified(bool value);
    public UInt32 get_distR();
    public void set_distR(UInt32 value);
    public bool get_distRSpecified();
    public void set_distRSpecified(bool value);
    internal static CT_WrapTight Parse(XmlNode node, XmlNamespaceManager namespaceManager);
    internal void Write(StreamWriter sw, string nodeName);
}
public class NPOI.OpenXmlFormats.Dml.WordProcessing.CT_WrapTopBottom : object {
    private CT_EffectExtent effectExtentField;
    private UInt32 distTField;
    private bool distTFieldSpecified;
    private UInt32 distBField;
    private bool distBFieldSpecified;
    [XmlElementAttribute]
public CT_EffectExtent effectExtent { get; public set; }
    [XmlAttributeAttribute]
public UInt32 distT { get; public set; }
    [XmlIgnoreAttribute]
public bool distTSpecified { get; public set; }
    [XmlAttributeAttribute]
public UInt32 distB { get; public set; }
    [XmlIgnoreAttribute]
public bool distBSpecified { get; public set; }
    public CT_EffectExtent get_effectExtent();
    public void set_effectExtent(CT_EffectExtent value);
    public UInt32 get_distT();
    public void set_distT(UInt32 value);
    public bool get_distTSpecified();
    public void set_distTSpecified(bool value);
    public UInt32 get_distB();
    public void set_distB(UInt32 value);
    public bool get_distBSpecified();
    public void set_distBSpecified(bool value);
    internal static CT_WrapTopBottom Parse(XmlNode node, XmlNamespaceManager namespaceManager);
    internal void Write(StreamWriter sw, string nodeName);
}
[XmlTypeAttribute]
public enum NPOI.OpenXmlFormats.Dml.WordProcessing.ST_AlignH : Enum {
    public int value__;
    public static ST_AlignH left;
    public static ST_AlignH right;
    public static ST_AlignH center;
    public static ST_AlignH inside;
    public static ST_AlignH outside;
}
[XmlTypeAttribute]
public enum NPOI.OpenXmlFormats.Dml.WordProcessing.ST_AlignV : Enum {
    public int value__;
    public static ST_AlignV top;
    public static ST_AlignV bottom;
    public static ST_AlignV center;
    public static ST_AlignV inside;
    public static ST_AlignV outside;
}
[XmlTypeAttribute]
public enum NPOI.OpenXmlFormats.Dml.WordProcessing.ST_RelFromH : Enum {
    public int value__;
    public static ST_RelFromH margin;
    public static ST_RelFromH page;
    public static ST_RelFromH column;
    public static ST_RelFromH character;
    public static ST_RelFromH leftMargin;
    public static ST_RelFromH rightMargin;
    public static ST_RelFromH insideMargin;
    public static ST_RelFromH outsideMargin;
}
[XmlTypeAttribute]
public enum NPOI.OpenXmlFormats.Dml.WordProcessing.ST_RelFromV : Enum {
    public int value__;
    public static ST_RelFromV margin;
    public static ST_RelFromV page;
    public static ST_RelFromV paragraph;
    public static ST_RelFromV line;
    public static ST_RelFromV topMargin;
    public static ST_RelFromV bottomMargin;
    public static ST_RelFromV insideMargin;
    public static ST_RelFromV outsideMargin;
}
[XmlTypeAttribute]
public enum NPOI.OpenXmlFormats.Dml.WordProcessing.ST_WrapText : Enum {
    public int value__;
    public static ST_WrapText bothSides;
    public static ST_WrapText left;
    public static ST_WrapText right;
    public static ST_WrapText largest;
}
[GeneratedCodeAttribute("System.Xml", "4.8.3761.0")]
[DesignerCategoryAttribute("code")]
[XmlTypeAttribute]
[XmlRootAttribute("encryptedKey")]
public class NPOI.OpenXmlFormats.Encryption.CT_CertificateKeyEncryptor : object {
    private Byte[] encryptedKeyValueField;
    private Byte[] x509CertificateField;
    private Byte[] certVerifierField;
    [XmlAttributeAttribute]
public Byte[] encryptedKeyValue { get; public set; }
    [XmlAttributeAttribute]
public Byte[] X509Certificate { get; public set; }
    [XmlAttributeAttribute]
public Byte[] certVerifier { get; public set; }
    public Byte[] get_encryptedKeyValue();
    public void set_encryptedKeyValue(Byte[] value);
    public Byte[] get_X509Certificate();
    public void set_X509Certificate(Byte[] value);
    public Byte[] get_certVerifier();
    public void set_certVerifier(Byte[] value);
    public static CT_CertificateKeyEncryptor Parse(XmlNode node, XmlNamespaceManager nameSpaceManager);
}
[GeneratedCodeAttribute("System.Xml", "4.8.3761.0")]
[DesignerCategoryAttribute("code")]
[XmlTypeAttribute]
[XmlRootAttribute]
public class NPOI.OpenXmlFormats.Encryption.CT_DataIntegrity : object {
    private Byte[] encryptedHmacKeyField;
    private Byte[] encryptedHmacValueField;
    [XmlAttributeAttribute]
public Byte[] encryptedHmacKey { get; public set; }
    [XmlAttributeAttribute]
public Byte[] encryptedHmacValue { get; public set; }
    public Byte[] get_encryptedHmacKey();
    public void set_encryptedHmacKey(Byte[] value);
    public Byte[] get_encryptedHmacValue();
    public void set_encryptedHmacValue(Byte[] value);
    internal static CT_DataIntegrity Parse(XmlNode node, XmlNamespaceManager nameSpaceManager);
}
[GeneratedCodeAttribute("System.Xml", "4.8.3761.0")]
[DesignerCategoryAttribute("code")]
[XmlTypeAttribute]
[XmlRootAttribute("encryption")]
public class NPOI.OpenXmlFormats.Encryption.CT_Encryption : object {
    private CT_KeyData keyDataField;
    private CT_DataIntegrity dataIntegrityField;
    private CT_KeyEncryptors keyEncryptorsField;
    [XmlElementAttribute]
public CT_KeyData keyData { get; public set; }
    [XmlElementAttribute]
public CT_DataIntegrity dataIntegrity { get; public set; }
    [XmlElementAttribute]
public CT_KeyEncryptors keyEncryptors { get; public set; }
    public CT_KeyData get_keyData();
    public void set_keyData(CT_KeyData value);
    public CT_DataIntegrity get_dataIntegrity();
    public void set_dataIntegrity(CT_DataIntegrity value);
    public CT_KeyEncryptors get_keyEncryptors();
    public void set_keyEncryptors(CT_KeyEncryptors value);
    public CT_KeyData AddNewKeyData();
    public CT_KeyEncryptors AddNewKeyEncryptors();
    public CT_DataIntegrity AddNewDataIntegrity();
    internal static CT_Encryption Parse(XmlNode node, XmlNamespaceManager nameSpaceManager);
}
[GeneratedCodeAttribute("System.Xml", "4.8.3761.0")]
[DesignerCategoryAttribute("code")]
[XmlTypeAttribute]
[XmlRootAttribute]
public class NPOI.OpenXmlFormats.Encryption.CT_KeyData : object {
    private UInt32 saltSizeField;
    private UInt32 blockSizeField;
    private UInt32 keyBitsField;
    private UInt32 hashSizeField;
    private ST_CipherAlgorithm cipherAlgorithmField;
    private ST_CipherChaining cipherChainingField;
    private ST_HashAlgorithm hashAlgorithmField;
    private Byte[] saltValueField;
    [XmlAttributeAttribute]
public UInt32 saltSize { get; public set; }
    [XmlAttributeAttribute]
public UInt32 blockSize { get; public set; }
    [XmlAttributeAttribute]
public UInt32 keyBits { get; public set; }
    [XmlAttributeAttribute]
public UInt32 hashSize { get; public set; }
    [XmlAttributeAttribute]
public ST_CipherAlgorithm cipherAlgorithm { get; public set; }
    [XmlAttributeAttribute]
public ST_CipherChaining cipherChaining { get; public set; }
    [XmlAttributeAttribute]
public ST_HashAlgorithm hashAlgorithm { get; public set; }
    [XmlAttributeAttribute]
public Byte[] saltValue { get; public set; }
    public UInt32 get_saltSize();
    public void set_saltSize(UInt32 value);
    public UInt32 get_blockSize();
    public void set_blockSize(UInt32 value);
    public UInt32 get_keyBits();
    public void set_keyBits(UInt32 value);
    public UInt32 get_hashSize();
    public void set_hashSize(UInt32 value);
    public ST_CipherAlgorithm get_cipherAlgorithm();
    public void set_cipherAlgorithm(ST_CipherAlgorithm value);
    public ST_CipherChaining get_cipherChaining();
    public void set_cipherChaining(ST_CipherChaining value);
    public ST_HashAlgorithm get_hashAlgorithm();
    public void set_hashAlgorithm(ST_HashAlgorithm value);
    public Byte[] get_saltValue();
    public void set_saltValue(Byte[] value);
    internal static CT_KeyData Parse(XmlNode node, XmlNamespaceManager nameSpaceManager);
}
[GeneratedCodeAttribute("System.Xml", "4.8.3761.0")]
[DesignerCategoryAttribute("code")]
[XmlTypeAttribute]
[XmlRootAttribute]
public class NPOI.OpenXmlFormats.Encryption.CT_KeyEncryptor : object {
    private object itemField;
    private CT_KeyEncryptorUri uriField;
    private bool uriFieldSpecified;
    [XmlElementAttribute("encryptedKey", "NPOI.OpenXmlFormats.Encryption.CT_CertificateKeyEncryptor")]
[XmlElementAttribute("encryptedKey", "NPOI.OpenXmlFormats.Encryption.CT_PasswordKeyEncryptor")]
public object Item { get; public set; }
    [XmlAttributeAttribute]
public CT_KeyEncryptorUri uri { get; public set; }
    [XmlIgnoreAttribute]
public bool uriSpecified { get; public set; }
    public object get_Item();
    public void set_Item(object value);
    public CT_KeyEncryptorUri get_uri();
    public void set_uri(CT_KeyEncryptorUri value);
    public bool get_uriSpecified();
    public void set_uriSpecified(bool value);
    public CT_PasswordKeyEncryptor AddNewEncryptedPasswordKey();
    public CT_CertificateKeyEncryptor AddNewEncryptedCertificateKey();
    public static CT_KeyEncryptor Parse(XmlNode node, XmlNamespaceManager nameSpaceManager);
}
[GeneratedCodeAttribute("System.Xml", "4.8.3761.0")]
[DesignerCategoryAttribute("code")]
[XmlTypeAttribute]
[XmlRootAttribute]
public class NPOI.OpenXmlFormats.Encryption.CT_KeyEncryptors : object {
    private List`1<CT_KeyEncryptor> keyEncryptorField;
    [XmlElementAttribute("keyEncryptor")]
public List`1<CT_KeyEncryptor> keyEncryptor { get; public set; }
    public List`1<CT_KeyEncryptor> get_keyEncryptor();
    public void set_keyEncryptor(List`1<CT_KeyEncryptor> value);
    public CT_KeyEncryptor AddNewKeyEncryptor();
    internal static CT_KeyEncryptors Parse(XmlNode node, XmlNamespaceManager nameSpaceManager);
}
[GeneratedCodeAttribute("System.Xml", "4.8.3761.0")]
[XmlTypeAttribute]
public enum NPOI.OpenXmlFormats.Encryption.CT_KeyEncryptorUri : Enum {
    public int value__;
    [DescriptionAttribute("http://schemas.microsoft.com/office/2006/keyEncryptor/password")]
public static CT_KeyEncryptorUri httpschemasmicrosoftcomoffice2006keyEncryptorpassword;
    [DescriptionAttribute("http://schemas.microsoft.com/office/2006/keyEncryptor/certificate")]
public static CT_KeyEncryptorUri httpschemasmicrosoftcomoffice2006keyEncryptorcertificate;
}
[GeneratedCodeAttribute("System.Xml", "4.8.3761.0")]
[DesignerCategoryAttribute("code")]
[XmlTypeAttribute]
[XmlRootAttribute("encryptedKey")]
public class NPOI.OpenXmlFormats.Encryption.CT_PasswordKeyEncryptor : object {
    private UInt32 saltSizeField;
    private UInt32 blockSizeField;
    private UInt32 keyBitsField;
    private UInt32 hashSizeField;
    private ST_CipherAlgorithm cipherAlgorithmField;
    private ST_CipherChaining cipherChainingField;
    private ST_HashAlgorithm hashAlgorithmField;
    private Byte[] saltValueField;
    private UInt32 spinCountField;
    private Byte[] encryptedVerifierHashInputField;
    private Byte[] encryptedVerifierHashValueField;
    private Byte[] encryptedKeyValueField;
    [XmlAttributeAttribute]
public UInt32 saltSize { get; public set; }
    [XmlAttributeAttribute]
public UInt32 blockSize { get; public set; }
    [XmlAttributeAttribute]
public UInt32 keyBits { get; public set; }
    [XmlAttributeAttribute]
public UInt32 hashSize { get; public set; }
    [XmlAttributeAttribute]
public ST_CipherAlgorithm cipherAlgorithm { get; public set; }
    [XmlAttributeAttribute]
public ST_CipherChaining cipherChaining { get; public set; }
    [XmlAttributeAttribute]
public ST_HashAlgorithm hashAlgorithm { get; public set; }
    [XmlAttributeAttribute]
public Byte[] saltValue { get; public set; }
    [XmlAttributeAttribute]
public UInt32 spinCount { get; public set; }
    [XmlAttributeAttribute]
public Byte[] encryptedVerifierHashInput { get; public set; }
    [XmlAttributeAttribute]
public Byte[] encryptedVerifierHashValue { get; public set; }
    [XmlAttributeAttribute]
public Byte[] encryptedKeyValue { get; public set; }
    public UInt32 get_saltSize();
    public void set_saltSize(UInt32 value);
    public UInt32 get_blockSize();
    public void set_blockSize(UInt32 value);
    public UInt32 get_keyBits();
    public void set_keyBits(UInt32 value);
    public UInt32 get_hashSize();
    public void set_hashSize(UInt32 value);
    public ST_CipherAlgorithm get_cipherAlgorithm();
    public void set_cipherAlgorithm(ST_CipherAlgorithm value);
    public ST_CipherChaining get_cipherChaining();
    public void set_cipherChaining(ST_CipherChaining value);
    public ST_HashAlgorithm get_hashAlgorithm();
    public void set_hashAlgorithm(ST_HashAlgorithm value);
    public Byte[] get_saltValue();
    public void set_saltValue(Byte[] value);
    public UInt32 get_spinCount();
    public void set_spinCount(UInt32 value);
    public Byte[] get_encryptedVerifierHashInput();
    public void set_encryptedVerifierHashInput(Byte[] value);
    public Byte[] get_encryptedVerifierHashValue();
    public void set_encryptedVerifierHashValue(Byte[] value);
    public Byte[] get_encryptedKeyValue();
    public void set_encryptedKeyValue(Byte[] value);
    public static CT_PasswordKeyEncryptor Parse(XmlNode node, XmlNamespaceManager nameSpaceManager);
}
public class NPOI.OpenXmlFormats.Encryption.EncryptionDocument : object {
    public static string ENCRYPTION_DEFAULT;
    public static string ENCRYPTION_PASSWORD;
    public static string ENCRYPTION_CERTIFICATE;
    private static XmlNamespaceManager nsm;
    private CT_Encryption ctEncryption;
    public static XmlNamespaceManager EncryptionNamespaceManager { get; }
    public EncryptionDocument(CT_Encryption encryption);
    private static EncryptionDocument();
    public static XmlNamespaceManager get_EncryptionNamespaceManager();
    internal static XmlNamespaceManager CreateEncryptionNSM();
    public static EncryptionDocument Parse(XmlDocument xmlDoc, XmlNamespaceManager NameSpaceManager);
    public CT_Encryption GetEncryption();
    public void SetEncryption(CT_Encryption encryption);
    public CT_Encryption AddNewEncryption();
    public void Save(Stream stream);
    public static EncryptionDocument NewInstance();
    public static EncryptionDocument Parse(string descriptor);
    public static EncryptionDocument Parse(XmlDocument xmlDoc);
}
[GeneratedCodeAttribute("System.Xml", "4.8.3761.0")]
[XmlTypeAttribute]
[XmlRootAttribute]
public enum NPOI.OpenXmlFormats.Encryption.ST_CipherAlgorithm : Enum {
    public int value__;
    public static ST_CipherAlgorithm AES;
    public static ST_CipherAlgorithm RC2;
    public static ST_CipherAlgorithm RC4;
    public static ST_CipherAlgorithm DES;
    public static ST_CipherAlgorithm DESX;
    [XmlEnumAttribute("3DES")]
public static ST_CipherAlgorithm Item3DES;
    [XmlEnumAttribute("3DES_112")]
public static ST_CipherAlgorithm Item3DES_112;
}
[GeneratedCodeAttribute("System.Xml", "4.8.3761.0")]
[XmlTypeAttribute]
[XmlRootAttribute]
public enum NPOI.OpenXmlFormats.Encryption.ST_CipherChaining : Enum {
    public int value__;
    public static ST_CipherChaining ChainingModeCBC;
    public static ST_CipherChaining ChainingModeCFB;
}
[GeneratedCodeAttribute("System.Xml", "4.8.3761.0")]
[XmlTypeAttribute]
[XmlRootAttribute]
public enum NPOI.OpenXmlFormats.Encryption.ST_HashAlgorithm : Enum {
    public int value__;
    public static ST_HashAlgorithm SHA1;
    public static ST_HashAlgorithm SHA256;
    public static ST_HashAlgorithm SHA384;
    public static ST_HashAlgorithm SHA512;
    public static ST_HashAlgorithm MD5;
    public static ST_HashAlgorithm MD4;
    public static ST_HashAlgorithm MD2;
    [XmlEnumAttribute("RIPEMD-128")]
public static ST_HashAlgorithm RIPEMD128;
    [XmlEnumAttribute("RIPEMD-160")]
public static ST_HashAlgorithm RIPEMD160;
    public static ST_HashAlgorithm WHIRLPOOL;
}
public class NPOI.OpenXmlFormats.ExtendedPropertiesDocument : object {
    internal static XmlSerializer serializer;
    internal static XmlSerializerNamespaces namespaces;
    private CT_ExtendedProperties _props;
    public ExtendedPropertiesDocument(CT_ExtendedProperties prop);
    private static ExtendedPropertiesDocument();
    public CT_ExtendedProperties GetProperties();
    public CT_ExtendedProperties AddNewProperties();
    public ExtendedPropertiesDocument Copy();
    public static ExtendedPropertiesDocument Parse(Stream stream);
    public void Save(Stream stream);
    public virtual string ToString();
}
[XmlTypeAttribute]
public enum NPOI.OpenXmlFormats.ItemChoiceType : Enum {
    public int value__;
    [XmlEnumAttribute("http://schemas.openxmlformats.org/officeDocument/2006/docPropsVTypes:array")]
public static ItemChoiceType array;
    [XmlEnumAttribute("http://schemas.openxmlformats.org/officeDocument/2006/docPropsVTypes:blob")]
public static ItemChoiceType blob;
    [XmlEnumAttribute("http://schemas.openxmlformats.org/officeDocument/2006/docPropsVTypes:bool")]
public static ItemChoiceType bool;
    [XmlEnumAttribute("http://schemas.openxmlformats.org/officeDocument/2006/docPropsVTypes:bstr")]
public static ItemChoiceType bstr;
    [XmlEnumAttribute("http://schemas.openxmlformats.org/officeDocument/2006/docPropsVTypes:cf")]
public static ItemChoiceType cf;
    [XmlEnumAttribute("http://schemas.openxmlformats.org/officeDocument/2006/docPropsVTypes:clsid")]
public static ItemChoiceType clsid;
    [XmlEnumAttribute("http://schemas.openxmlformats.org/officeDocument/2006/docPropsVTypes:cy")]
public static ItemChoiceType cy;
    [XmlEnumAttribute("http://schemas.openxmlformats.org/officeDocument/2006/docPropsVTypes:date")]
public static ItemChoiceType date;
    [XmlEnumAttribute("http://schemas.openxmlformats.org/officeDocument/2006/docPropsVTypes:decimal")]
public static ItemChoiceType decimal;
    [XmlEnumAttribute("http://schemas.openxmlformats.org/officeDocument/2006/docPropsVTypes:empty")]
public static ItemChoiceType empty;
    [XmlEnumAttribute("http://schemas.openxmlformats.org/officeDocument/2006/docPropsVTypes:error")]
public static ItemChoiceType error;
    [XmlEnumAttribute("http://schemas.openxmlformats.org/officeDocument/2006/docPropsVTypes:filetime")]
public static ItemChoiceType filetime;
    [XmlEnumAttribute("http://schemas.openxmlformats.org/officeDocument/2006/docPropsVTypes:i1")]
public static ItemChoiceType i1;
    [XmlEnumAttribute("http://schemas.openxmlformats.org/officeDocument/2006/docPropsVTypes:i2")]
public static ItemChoiceType i2;
    [XmlEnumAttribute("http://schemas.openxmlformats.org/officeDocument/2006/docPropsVTypes:i4")]
public static ItemChoiceType i4;
    [XmlEnumAttribute("http://schemas.openxmlformats.org/officeDocument/2006/docPropsVTypes:i8")]
public static ItemChoiceType i8;
    [XmlEnumAttribute("http://schemas.openxmlformats.org/officeDocument/2006/docPropsVTypes:int")]
public static ItemChoiceType int;
    [XmlEnumAttribute("http://schemas.openxmlformats.org/officeDocument/2006/docPropsVTypes:lpstr")]
public static ItemChoiceType lpstr;
    [XmlEnumAttribute("http://schemas.openxmlformats.org/officeDocument/2006/docPropsVTypes:lpwstr")]
public static ItemChoiceType lpwstr;
    [XmlEnumAttribute("http://schemas.openxmlformats.org/officeDocument/2006/docPropsVTypes:null")]
public static ItemChoiceType null;
    [XmlEnumAttribute("http://schemas.openxmlformats.org/officeDocument/2006/docPropsVTypes:oblob")]
public static ItemChoiceType oblob;
    [XmlEnumAttribute("http://schemas.openxmlformats.org/officeDocument/2006/docPropsVTypes:ostorage")]
public static ItemChoiceType ostorage;
    [XmlEnumAttribute("http://schemas.openxmlformats.org/officeDocument/2006/docPropsVTypes:ostream")]
public static ItemChoiceType ostream;
    [XmlEnumAttribute("http://schemas.openxmlformats.org/officeDocument/2006/docPropsVTypes:r4")]
public static ItemChoiceType r4;
    [XmlEnumAttribute("http://schemas.openxmlformats.org/officeDocument/2006/docPropsVTypes:r8")]
public static ItemChoiceType r8;
    [XmlEnumAttribute("http://schemas.openxmlformats.org/officeDocument/2006/docPropsVTypes:storage")]
public static ItemChoiceType storage;
    [XmlEnumAttribute("http://schemas.openxmlformats.org/officeDocument/2006/docPropsVTypes:stream")]
public static ItemChoiceType stream;
    [XmlEnumAttribute("http://schemas.openxmlformats.org/officeDocument/2006/docPropsVTypes:ui1")]
public static ItemChoiceType ui1;
    [XmlEnumAttribute("http://schemas.openxmlformats.org/officeDocument/2006/docPropsVTypes:ui2")]
public static ItemChoiceType ui2;
    [XmlEnumAttribute("http://schemas.openxmlformats.org/officeDocument/2006/docPropsVTypes:ui4")]
public static ItemChoiceType ui4;
    [XmlEnumAttribute("http://schemas.openxmlformats.org/officeDocument/2006/docPropsVTypes:ui8")]
public static ItemChoiceType ui8;
    [XmlEnumAttribute("http://schemas.openxmlformats.org/officeDocument/2006/docPropsVTypes:uint")]
public static ItemChoiceType uint;
    [XmlEnumAttribute("http://schemas.openxmlformats.org/officeDocument/2006/docPropsVTypes:vector")]
public static ItemChoiceType vector;
    [XmlEnumAttribute("http://schemas.openxmlformats.org/officeDocument/2006/docPropsVTypes:vstream")]
public static ItemChoiceType vstream;
}
[XmlTypeAttribute]
public enum NPOI.OpenXmlFormats.ItemsChoiceType : Enum {
    public int value__;
    [XmlEnumAttribute("http://schemas.openxmlformats.org/officeDocument/2006/docPropsVTypes:bool")]
public static ItemsChoiceType bool;
    [XmlEnumAttribute("http://schemas.openxmlformats.org/officeDocument/2006/docPropsVTypes:bstr")]
public static ItemsChoiceType bstr;
    [XmlEnumAttribute("http://schemas.openxmlformats.org/officeDocument/2006/docPropsVTypes:cy")]
public static ItemsChoiceType cy;
    [XmlEnumAttribute("http://schemas.openxmlformats.org/officeDocument/2006/docPropsVTypes:date")]
public static ItemsChoiceType date;
    [XmlEnumAttribute("http://schemas.openxmlformats.org/officeDocument/2006/docPropsVTypes:decimal")]
public static ItemsChoiceType decimal;
    [XmlEnumAttribute("http://schemas.openxmlformats.org/officeDocument/2006/docPropsVTypes:error")]
public static ItemsChoiceType error;
    [XmlEnumAttribute("http://schemas.openxmlformats.org/officeDocument/2006/docPropsVTypes:i1")]
public static ItemsChoiceType i1;
    [XmlEnumAttribute("http://schemas.openxmlformats.org/officeDocument/2006/docPropsVTypes:i2")]
public static ItemsChoiceType i2;
    [XmlEnumAttribute("http://schemas.openxmlformats.org/officeDocument/2006/docPropsVTypes:i4")]
public static ItemsChoiceType i4;
    [XmlEnumAttribute("http://schemas.openxmlformats.org/officeDocument/2006/docPropsVTypes:int")]
public static ItemsChoiceType int;
    [XmlEnumAttribute("http://schemas.openxmlformats.org/officeDocument/2006/docPropsVTypes:r4")]
public static ItemsChoiceType r4;
    [XmlEnumAttribute("http://schemas.openxmlformats.org/officeDocument/2006/docPropsVTypes:r8")]
public static ItemsChoiceType r8;
    [XmlEnumAttribute("http://schemas.openxmlformats.org/officeDocument/2006/docPropsVTypes:ui1")]
public static ItemsChoiceType ui1;
    [XmlEnumAttribute("http://schemas.openxmlformats.org/officeDocument/2006/docPropsVTypes:ui2")]
public static ItemsChoiceType ui2;
    [XmlEnumAttribute("http://schemas.openxmlformats.org/officeDocument/2006/docPropsVTypes:ui4")]
public static ItemsChoiceType ui4;
    [XmlEnumAttribute("http://schemas.openxmlformats.org/officeDocument/2006/docPropsVTypes:uint")]
public static ItemsChoiceType uint;
    [XmlEnumAttribute("http://schemas.openxmlformats.org/officeDocument/2006/docPropsVTypes:variant")]
public static ItemsChoiceType variant;
}
[XmlTypeAttribute]
public enum NPOI.OpenXmlFormats.ItemsChoiceType1 : Enum {
    public int value__;
    public static ItemsChoiceType1 AbbreviatedCaseNumber;
    public static ItemsChoiceType1 AlbumTitle;
    public static ItemsChoiceType1 Author;
    public static ItemsChoiceType1 BookTitle;
    public static ItemsChoiceType1 BroadcastTitle;
    public static ItemsChoiceType1 Broadcaster;
    public static ItemsChoiceType1 CaseNumber;
    public static ItemsChoiceType1 ChapterNumber;
    public static ItemsChoiceType1 City;
    public static ItemsChoiceType1 Comments;
    public static ItemsChoiceType1 ConferenceName;
    public static ItemsChoiceType1 CountryRegion;
    public static ItemsChoiceType1 Court;
    public static ItemsChoiceType1 Day;
    public static ItemsChoiceType1 DayAccessed;
    public static ItemsChoiceType1 Department;
    public static ItemsChoiceType1 Distributor;
    public static ItemsChoiceType1 Edition;
    public static ItemsChoiceType1 Guid;
    public static ItemsChoiceType1 Institution;
    public static ItemsChoiceType1 InternetSiteTitle;
    public static ItemsChoiceType1 Issue;
    public static ItemsChoiceType1 JournalName;
    public static ItemsChoiceType1 LCID;
    public static ItemsChoiceType1 Medium;
    public static ItemsChoiceType1 Month;
    public static ItemsChoiceType1 MonthAccessed;
    public static ItemsChoiceType1 NumberVolumes;
    public static ItemsChoiceType1 Pages;
    public static ItemsChoiceType1 PatentNumber;
    public static ItemsChoiceType1 PeriodicalTitle;
    public static ItemsChoiceType1 ProductionCompany;
    public static ItemsChoiceType1 PublicationTitle;
    public static ItemsChoiceType1 Publisher;
    public static ItemsChoiceType1 RecordingNumber;
    public static ItemsChoiceType1 RefOrder;
    public static ItemsChoiceType1 Reporter;
    public static ItemsChoiceType1 ShortTitle;
    public static ItemsChoiceType1 SourceType;
    public static ItemsChoiceType1 StandardNumber;
    public static ItemsChoiceType1 StateProvince;
    public static ItemsChoiceType1 Station;
    public static ItemsChoiceType1 Tag;
    public static ItemsChoiceType1 Theater;
    public static ItemsChoiceType1 ThesisType;
    public static ItemsChoiceType1 Title;
    public static ItemsChoiceType1 Type;
    public static ItemsChoiceType1 URL;
    public static ItemsChoiceType1 Version;
    public static ItemsChoiceType1 Volume;
    public static ItemsChoiceType1 Year;
    public static ItemsChoiceType1 YearAccessed;
}
public class NPOI.OpenXmlFormats.OOXMLFactory`1 : object {
    private XmlSerializer serializerObj;
    public T Parse(Stream stream);
    public T Create();
}
[XmlTypeAttribute]
[XmlRootAttribute]
public class NPOI.OpenXmlFormats.Shared.CT_Acc : object {
    private CT_AccPr accPrField;
    private CT_OMathArg eField;
    [XmlElementAttribute]
public CT_AccPr accPr { get; public set; }
    [XmlElementAttribute]
public CT_OMathArg e { get; public set; }
    public static CT_Acc Parse(XmlNode node, XmlNamespaceManager namespaceManager);
    internal void Write(StreamWriter sw, string nodeName);
    public CT_AccPr get_accPr();
    public void set_accPr(CT_AccPr value);
    public CT_OMathArg get_e();
    public void set_e(CT_OMathArg value);
}
[XmlTypeAttribute]
[XmlRootAttribute]
public class NPOI.OpenXmlFormats.Shared.CT_AccPr : object {
    private CT_Char chrField;
    private CT_CtrlPr ctrlPrField;
    [XmlElementAttribute]
public CT_Char chr { get; public set; }
    [XmlElementAttribute]
public CT_CtrlPr ctrlPr { get; public set; }
    public static CT_AccPr Parse(XmlNode node, XmlNamespaceManager namespaceManager);
    internal void Write(StreamWriter sw, string nodeName);
    public CT_Char get_chr();
    public void set_chr(CT_Char value);
    public CT_CtrlPr get_ctrlPr();
    public void set_ctrlPr(CT_CtrlPr value);
}
[XmlTypeAttribute]
[XmlRootAttribute]
public class NPOI.OpenXmlFormats.Shared.CT_Bar : object {
    private CT_BarPr barPrField;
    private CT_OMathArg eField;
    [XmlElementAttribute]
public CT_BarPr barPr { get; public set; }
    [XmlElementAttribute]
public CT_OMathArg e { get; public set; }
    public static CT_Bar Parse(XmlNode node, XmlNamespaceManager namespaceManager);
    internal void Write(StreamWriter sw, string nodeName);
    public CT_BarPr get_barPr();
    public void set_barPr(CT_BarPr value);
    public CT_OMathArg get_e();
    public void set_e(CT_OMathArg value);
}
[XmlTypeAttribute]
[XmlRootAttribute]
public class NPOI.OpenXmlFormats.Shared.CT_BarPr : object {
    private CT_TopBot posField;
    private CT_CtrlPr ctrlPrField;
    [XmlElementAttribute]
public CT_TopBot pos { get; public set; }
    [XmlElementAttribute]
public CT_CtrlPr ctrlPr { get; public set; }
    public static CT_BarPr Parse(XmlNode node, XmlNamespaceManager namespaceManager);
    internal void Write(StreamWriter sw, string nodeName);
    public CT_TopBot get_pos();
    public void set_pos(CT_TopBot value);
    public CT_CtrlPr get_ctrlPr();
    public void set_ctrlPr(CT_CtrlPr value);
}
[XmlTypeAttribute]
[XmlRootAttribute]
public class NPOI.OpenXmlFormats.Shared.CT_BorderBox : object {
    private CT_BorderBoxPr borderBoxPrField;
    private CT_OMathArg eField;
    [XmlElementAttribute]
public CT_BorderBoxPr borderBoxPr { get; public set; }
    [XmlElementAttribute]
public CT_OMathArg e { get; public set; }
    public CT_BorderBoxPr get_borderBoxPr();
    public void set_borderBoxPr(CT_BorderBoxPr value);
    public CT_OMathArg get_e();
    public void set_e(CT_OMathArg value);
    public static CT_BorderBox Parse(XmlNode node, XmlNamespaceManager namespaceManager);
    internal void Write(StreamWriter sw, string nodeName);
}
[XmlTypeAttribute]
[XmlRootAttribute]
public class NPOI.OpenXmlFormats.Shared.CT_BorderBoxPr : object {
    private CT_OnOff hideTopField;
    private CT_OnOff hideBotField;
    private CT_OnOff hideLeftField;
    private CT_OnOff hideRightField;
    private CT_OnOff strikeHField;
    private CT_OnOff strikeVField;
    private CT_OnOff strikeBLTRField;
    private CT_OnOff strikeTLBRField;
    private CT_CtrlPr ctrlPrField;
    [XmlElementAttribute]
public CT_OnOff hideTop { get; public set; }
    [XmlElementAttribute]
public CT_OnOff hideBot { get; public set; }
    [XmlElementAttribute]
public CT_OnOff hideLeft { get; public set; }
    [XmlElementAttribute]
public CT_OnOff hideRight { get; public set; }
    [XmlElementAttribute]
public CT_OnOff strikeH { get; public set; }
    [XmlElementAttribute]
public CT_OnOff strikeV { get; public set; }
    [XmlElementAttribute]
public CT_OnOff strikeBLTR { get; public set; }
    [XmlElementAttribute]
public CT_OnOff strikeTLBR { get; public set; }
    [XmlElementAttribute]
public CT_CtrlPr ctrlPr { get; public set; }
    public static CT_BorderBoxPr Parse(XmlNode node, XmlNamespaceManager namespaceManager);
    internal void Write(StreamWriter sw, string nodeName);
    public CT_OnOff get_hideTop();
    public void set_hideTop(CT_OnOff value);
    public CT_OnOff get_hideBot();
    public void set_hideBot(CT_OnOff value);
    public CT_OnOff get_hideLeft();
    public void set_hideLeft(CT_OnOff value);
    public CT_OnOff get_hideRight();
    public void set_hideRight(CT_OnOff value);
    public CT_OnOff get_strikeH();
    public void set_strikeH(CT_OnOff value);
    public CT_OnOff get_strikeV();
    public void set_strikeV(CT_OnOff value);
    public CT_OnOff get_strikeBLTR();
    public void set_strikeBLTR(CT_OnOff value);
    public CT_OnOff get_strikeTLBR();
    public void set_strikeTLBR(CT_OnOff value);
    public CT_CtrlPr get_ctrlPr();
    public void set_ctrlPr(CT_CtrlPr value);
}
[XmlTypeAttribute]
[XmlRootAttribute]
public class NPOI.OpenXmlFormats.Shared.CT_Box : object {
    private CT_BoxPr boxPrField;
    private CT_OMathArg eField;
    [XmlElementAttribute]
public CT_BoxPr boxPr { get; public set; }
    [XmlElementAttribute]
public CT_OMathArg e { get; public set; }
    public static CT_Box Parse(XmlNode node, XmlNamespaceManager namespaceManager);
    internal void Write(StreamWriter sw, string nodeName);
    public CT_BoxPr get_boxPr();
    public void set_boxPr(CT_BoxPr value);
    public CT_OMathArg get_e();
    public void set_e(CT_OMathArg value);
}
[XmlTypeAttribute]
[XmlRootAttribute]
public class NPOI.OpenXmlFormats.Shared.CT_BoxPr : object {
    private CT_OnOff opEmuField;
    private CT_OnOff noBreakField;
    private CT_OnOff diffField;
    private CT_ManualBreak brkField;
    private CT_OnOff alnField;
    private CT_CtrlPr ctrlPrField;
    [XmlElementAttribute]
public CT_OnOff opEmu { get; public set; }
    [XmlElementAttribute]
public CT_OnOff noBreak { get; public set; }
    [XmlElementAttribute]
public CT_OnOff diff { get; public set; }
    [XmlElementAttribute]
public CT_ManualBreak brk { get; public set; }
    [XmlElementAttribute]
public CT_OnOff aln { get; public set; }
    [XmlElementAttribute]
public CT_CtrlPr ctrlPr { get; public set; }
    public static CT_BoxPr Parse(XmlNode node, XmlNamespaceManager namespaceManager);
    internal void Write(StreamWriter sw, string nodeName);
    public CT_OnOff get_opEmu();
    public void set_opEmu(CT_OnOff value);
    public CT_OnOff get_noBreak();
    public void set_noBreak(CT_OnOff value);
    public CT_OnOff get_diff();
    public void set_diff(CT_OnOff value);
    public CT_ManualBreak get_brk();
    public void set_brk(CT_ManualBreak value);
    public CT_OnOff get_aln();
    public void set_aln(CT_OnOff value);
    public CT_CtrlPr get_ctrlPr();
    public void set_ctrlPr(CT_CtrlPr value);
}
[XmlTypeAttribute]
[XmlRootAttribute]
public class NPOI.OpenXmlFormats.Shared.CT_BreakBin : object {
    private ST_BreakBin valField;
    private bool valFieldSpecified;
    [XmlAttributeAttribute]
public ST_BreakBin val { get; public set; }
    [XmlIgnoreAttribute]
public bool valSpecified { get; public set; }
    public static CT_BreakBin Parse(XmlNode node, XmlNamespaceManager namespaceManager);
    internal void Write(StreamWriter sw, string nodeName);
    public ST_BreakBin get_val();
    public void set_val(ST_BreakBin value);
    public bool get_valSpecified();
    public void set_valSpecified(bool value);
}
[XmlTypeAttribute]
[XmlRootAttribute]
public class NPOI.OpenXmlFormats.Shared.CT_BreakBinSub : object {
    private ST_BreakBinSub valField;
    private bool valFieldSpecified;
    [XmlAttributeAttribute]
public ST_BreakBinSub val { get; public set; }
    [XmlIgnoreAttribute]
public bool valSpecified { get; public set; }
    public static CT_BreakBinSub Parse(XmlNode node, XmlNamespaceManager namespaceManager);
    internal void Write(StreamWriter sw, string nodeName);
    public ST_BreakBinSub get_val();
    public void set_val(ST_BreakBinSub value);
    public bool get_valSpecified();
    public void set_valSpecified(bool value);
}
[XmlTypeAttribute]
[XmlRootAttribute]
public class NPOI.OpenXmlFormats.Shared.CT_Char : object {
    private string valField;
    [XmlAttributeAttribute]
public string val { get; public set; }
    public static CT_Char Parse(XmlNode node, XmlNamespaceManager namespaceManager);
    internal void Write(StreamWriter sw, string nodeName);
    public string get_val();
    public void set_val(string value);
}
[XmlTypeAttribute]
[XmlRootAttribute]
public class NPOI.OpenXmlFormats.Shared.CT_CtrlPr : object {
    private CT_RPr rPrField;
    private CT_RPrChange insField;
    private CT_RPrChange delField;
    [XmlElementAttribute]
public CT_RPr rPr { get; public set; }
    [XmlElementAttribute]
public CT_RPrChange ins { get; public set; }
    [XmlElementAttribute]
public CT_RPrChange del { get; public set; }
    public static CT_CtrlPr Parse(XmlNode node, XmlNamespaceManager namespaceManager);
    internal void Write(StreamWriter sw, string nodeName);
    public CT_RPr get_rPr();
    public void set_rPr(CT_RPr value);
    public CT_RPrChange get_ins();
    public void set_ins(CT_RPrChange value);
    public CT_RPrChange get_del();
    public void set_del(CT_RPrChange value);
}
[XmlTypeAttribute]
[XmlRootAttribute]
public class NPOI.OpenXmlFormats.Shared.CT_D : object {
    private CT_DPr dPrField;
    private List`1<CT_OMathArg> eField;
    [XmlElementAttribute]
public CT_DPr dPr { get; public set; }
    [XmlElementAttribute("e")]
public List`1<CT_OMathArg> e { get; public set; }
    public static CT_D Parse(XmlNode node, XmlNamespaceManager namespaceManager);
    internal void Write(StreamWriter sw, string nodeName);
    public CT_DPr get_dPr();
    public void set_dPr(CT_DPr value);
    public List`1<CT_OMathArg> get_e();
    public void set_e(List`1<CT_OMathArg> value);
}
[XmlTypeAttribute]
[XmlRootAttribute]
public class NPOI.OpenXmlFormats.Shared.CT_DPr : object {
    private CT_Char begChrField;
    private CT_Char sepChrField;
    private CT_Char endChrField;
    private CT_OnOff growField;
    private CT_Shp shpField;
    private CT_CtrlPr ctrlPrField;
    [XmlElementAttribute]
public CT_Char begChr { get; public set; }
    [XmlElementAttribute]
public CT_Char sepChr { get; public set; }
    [XmlElementAttribute]
public CT_Char endChr { get; public set; }
    [XmlElementAttribute]
public CT_OnOff grow { get; public set; }
    [XmlElementAttribute]
public CT_Shp shp { get; public set; }
    [XmlElementAttribute]
public CT_CtrlPr ctrlPr { get; public set; }
    public static CT_DPr Parse(XmlNode node, XmlNamespaceManager namespaceManager);
    internal void Write(StreamWriter sw, string nodeName);
    public CT_Char get_begChr();
    public void set_begChr(CT_Char value);
    public CT_Char get_sepChr();
    public void set_sepChr(CT_Char value);
    public CT_Char get_endChr();
    public void set_endChr(CT_Char value);
    public CT_OnOff get_grow();
    public void set_grow(CT_OnOff value);
    public CT_Shp get_shp();
    public void set_shp(CT_Shp value);
    public CT_CtrlPr get_ctrlPr();
    public void set_ctrlPr(CT_CtrlPr value);
}
[XmlTypeAttribute]
[XmlRootAttribute]
public class NPOI.OpenXmlFormats.Shared.CT_EqArr : object {
    private CT_EqArrPr eqArrPrField;
    private List`1<CT_OMathArg> eField;
    [XmlElementAttribute]
public CT_EqArrPr eqArrPr { get; public set; }
    [XmlElementAttribute("e")]
public List`1<CT_OMathArg> e { get; public set; }
    public static CT_EqArr Parse(XmlNode node, XmlNamespaceManager namespaceManager);
    internal void Write(StreamWriter sw, string nodeName);
    public CT_EqArrPr get_eqArrPr();
    public void set_eqArrPr(CT_EqArrPr value);
    public List`1<CT_OMathArg> get_e();
    public void set_e(List`1<CT_OMathArg> value);
}
[XmlTypeAttribute]
[XmlRootAttribute]
public class NPOI.OpenXmlFormats.Shared.CT_EqArrPr : object {
    private CT_YAlign baseJcField;
    private CT_OnOff maxDistField;
    private CT_OnOff objDistField;
    private CT_SpacingRule rSpRuleField;
    private CT_UnSignedInteger rSpField;
    private CT_CtrlPr ctrlPrField;
    [XmlElementAttribute]
public CT_YAlign baseJc { get; public set; }
    [XmlElementAttribute]
public CT_OnOff maxDist { get; public set; }
    [XmlElementAttribute]
public CT_OnOff objDist { get; public set; }
    [XmlElementAttribute]
public CT_SpacingRule rSpRule { get; public set; }
    [XmlElementAttribute]
public CT_UnSignedInteger rSp { get; public set; }
    [XmlElementAttribute]
public CT_CtrlPr ctrlPr { get; public set; }
    public CT_YAlign get_baseJc();
    public void set_baseJc(CT_YAlign value);
    public CT_OnOff get_maxDist();
    public void set_maxDist(CT_OnOff value);
    public CT_OnOff get_objDist();
    public void set_objDist(CT_OnOff value);
    public CT_SpacingRule get_rSpRule();
    public void set_rSpRule(CT_SpacingRule value);
    public CT_UnSignedInteger get_rSp();
    public void set_rSp(CT_UnSignedInteger value);
    public CT_CtrlPr get_ctrlPr();
    public void set_ctrlPr(CT_CtrlPr value);
    public static CT_EqArrPr Parse(XmlNode node, XmlNamespaceManager namespaceManager);
    internal void Write(StreamWriter sw, string nodeName);
}
[XmlTypeAttribute]
[XmlRootAttribute]
public class NPOI.OpenXmlFormats.Shared.CT_F : object {
    private CT_FPr fPrField;
    private CT_OMathArg numField;
    private CT_OMathArg denField;
    [XmlElementAttribute]
public CT_FPr fPr { get; public set; }
    [XmlElementAttribute]
public CT_OMathArg num { get; public set; }
    [XmlElementAttribute]
public CT_OMathArg den { get; public set; }
    public static CT_F Parse(XmlNode node, XmlNamespaceManager namespaceManager);
    internal void Write(StreamWriter sw, string nodeName);
    public CT_FPr get_fPr();
    public void set_fPr(CT_FPr value);
    public CT_OMathArg get_num();
    public void set_num(CT_OMathArg value);
    public CT_OMathArg get_den();
    public void set_den(CT_OMathArg value);
}
[XmlTypeAttribute]
[XmlRootAttribute]
public class NPOI.OpenXmlFormats.Shared.CT_FPr : object {
    private CT_FType typeField;
    private CT_CtrlPr ctrlPrField;
    [XmlElementAttribute]
public CT_FType type { get; public set; }
    [XmlElementAttribute]
public CT_CtrlPr ctrlPr { get; public set; }
    public static CT_FPr Parse(XmlNode node, XmlNamespaceManager namespaceManager);
    internal void Write(StreamWriter sw, string nodeName);
    public CT_FType get_type();
    public void set_type(CT_FType value);
    public CT_CtrlPr get_ctrlPr();
    public void set_ctrlPr(CT_CtrlPr value);
}
[XmlTypeAttribute]
[XmlRootAttribute]
public class NPOI.OpenXmlFormats.Shared.CT_FType : object {
    private ST_FType valField;
    [XmlAttributeAttribute]
public ST_FType val { get; public set; }
    public static CT_FType Parse(XmlNode node, XmlNamespaceManager namespaceManager);
    internal void Write(StreamWriter sw, string nodeName);
    public ST_FType get_val();
    public void set_val(ST_FType value);
}
[XmlTypeAttribute]
[XmlRootAttribute]
public class NPOI.OpenXmlFormats.Shared.CT_Func : object {
    private CT_FuncPr funcPrField;
    private CT_OMathArg fNameField;
    private CT_OMathArg eField;
    [XmlElementAttribute]
public CT_FuncPr funcPr { get; public set; }
    [XmlElementAttribute]
public CT_OMathArg fName { get; public set; }
    [XmlElementAttribute]
public CT_OMathArg e { get; public set; }
    public static CT_Func Parse(XmlNode node, XmlNamespaceManager namespaceManager);
    internal void Write(StreamWriter sw, string nodeName);
    public CT_FuncPr get_funcPr();
    public void set_funcPr(CT_FuncPr value);
    public CT_OMathArg get_fName();
    public void set_fName(CT_OMathArg value);
    public CT_OMathArg get_e();
    public void set_e(CT_OMathArg value);
}
[XmlTypeAttribute]
[XmlRootAttribute]
public class NPOI.OpenXmlFormats.Shared.CT_FuncPr : object {
    private CT_CtrlPr ctrlPrField;
    [XmlElementAttribute]
public CT_CtrlPr ctrlPr { get; public set; }
    public static CT_FuncPr Parse(XmlNode node, XmlNamespaceManager namespaceManager);
    internal void Write(StreamWriter sw, string nodeName);
    public CT_CtrlPr get_ctrlPr();
    public void set_ctrlPr(CT_CtrlPr value);
}
[XmlTypeAttribute]
[XmlRootAttribute]
public class NPOI.OpenXmlFormats.Shared.CT_GroupChr : object {
    private CT_GroupChrPr groupChrPrField;
    private CT_OMathArg eField;
    [XmlElementAttribute]
public CT_GroupChrPr groupChrPr { get; public set; }
    [XmlElementAttribute]
public CT_OMathArg e { get; public set; }
    public static CT_GroupChr Parse(XmlNode node, XmlNamespaceManager namespaceManager);
    internal void Write(StreamWriter sw, string nodeName);
    public CT_GroupChrPr get_groupChrPr();
    public void set_groupChrPr(CT_GroupChrPr value);
    public CT_OMathArg get_e();
    public void set_e(CT_OMathArg value);
}
[XmlTypeAttribute]
[XmlRootAttribute]
public class NPOI.OpenXmlFormats.Shared.CT_GroupChrPr : object {
    private CT_Char chrField;
    private CT_TopBot posField;
    private CT_TopBot vertJcField;
    private CT_CtrlPr ctrlPrField;
    [XmlElementAttribute]
public CT_Char chr { get; public set; }
    [XmlElementAttribute]
public CT_TopBot pos { get; public set; }
    [XmlElementAttribute]
public CT_TopBot vertJc { get; public set; }
    [XmlElementAttribute]
public CT_CtrlPr ctrlPr { get; public set; }
    public static CT_GroupChrPr Parse(XmlNode node, XmlNamespaceManager namespaceManager);
    internal void Write(StreamWriter sw, string nodeName);
    public CT_Char get_chr();
    public void set_chr(CT_Char value);
    public CT_TopBot get_pos();
    public void set_pos(CT_TopBot value);
    public CT_TopBot get_vertJc();
    public void set_vertJc(CT_TopBot value);
    public CT_CtrlPr get_ctrlPr();
    public void set_ctrlPr(CT_CtrlPr value);
}
[XmlTypeAttribute]
[XmlRootAttribute]
public class NPOI.OpenXmlFormats.Shared.CT_Integer2 : object {
    private string valField;
    [XmlAttributeAttribute]
public string val { get; public set; }
    public static CT_Integer2 Parse(XmlNode node, XmlNamespaceManager namespaceManager);
    internal void Write(StreamWriter sw, string nodeName);
    public string get_val();
    public void set_val(string value);
}
[XmlTypeAttribute]
[XmlRootAttribute]
public class NPOI.OpenXmlFormats.Shared.CT_Integer255 : object {
    private string valField;
    [XmlAttributeAttribute]
public string val { get; public set; }
    public static CT_Integer255 Parse(XmlNode node, XmlNamespaceManager namespaceManager);
    internal void Write(StreamWriter sw, string nodeName);
    public string get_val();
    public void set_val(string value);
}
[XmlTypeAttribute]
[XmlRootAttribute]
public class NPOI.OpenXmlFormats.Shared.CT_LimLoc : object {
    private ST_LimLoc valField;
    [XmlAttributeAttribute]
public ST_LimLoc val { get; public set; }
    public static CT_LimLoc Parse(XmlNode node, XmlNamespaceManager namespaceManager);
    internal void Write(StreamWriter sw, string nodeName);
    public ST_LimLoc get_val();
    public void set_val(ST_LimLoc value);
}
[XmlTypeAttribute]
[XmlRootAttribute]
public class NPOI.OpenXmlFormats.Shared.CT_LimLow : object {
    private CT_LimLowPr limLowPrField;
    private CT_OMathArg eField;
    private CT_OMathArg limField;
    [XmlElementAttribute]
public CT_LimLowPr limLowPr { get; public set; }
    [XmlElementAttribute]
public CT_OMathArg e { get; public set; }
    [XmlElementAttribute]
public CT_OMathArg lim { get; public set; }
    public static CT_LimLow Parse(XmlNode node, XmlNamespaceManager namespaceManager);
    internal void Write(StreamWriter sw, string nodeName);
    public CT_LimLowPr get_limLowPr();
    public void set_limLowPr(CT_LimLowPr value);
    public CT_OMathArg get_e();
    public void set_e(CT_OMathArg value);
    public CT_OMathArg get_lim();
    public void set_lim(CT_OMathArg value);
}
[XmlTypeAttribute]
[XmlRootAttribute]
public class NPOI.OpenXmlFormats.Shared.CT_LimLowPr : object {
    private CT_CtrlPr ctrlPrField;
    [XmlElementAttribute]
public CT_CtrlPr ctrlPr { get; public set; }
    public static CT_LimLowPr Parse(XmlNode node, XmlNamespaceManager namespaceManager);
    internal void Write(StreamWriter sw, string nodeName);
    public CT_CtrlPr get_ctrlPr();
    public void set_ctrlPr(CT_CtrlPr value);
}
[XmlTypeAttribute]
[XmlRootAttribute]
public class NPOI.OpenXmlFormats.Shared.CT_LimUpp : object {
    private CT_LimUppPr limUppPrField;
    private CT_OMathArg eField;
    private CT_OMathArg limField;
    [XmlElementAttribute]
public CT_LimUppPr limUppPr { get; public set; }
    [XmlElementAttribute]
public CT_OMathArg e { get; public set; }
    [XmlElementAttribute]
public CT_OMathArg lim { get; public set; }
    public static CT_LimUpp Parse(XmlNode node, XmlNamespaceManager namespaceManager);
    internal void Write(StreamWriter sw, string nodeName);
    public CT_LimUppPr get_limUppPr();
    public void set_limUppPr(CT_LimUppPr value);
    public CT_OMathArg get_e();
    public void set_e(CT_OMathArg value);
    public CT_OMathArg get_lim();
    public void set_lim(CT_OMathArg value);
}
[XmlTypeAttribute]
[XmlRootAttribute]
public class NPOI.OpenXmlFormats.Shared.CT_LimUppPr : object {
    private CT_CtrlPr ctrlPrField;
    [XmlElementAttribute]
public CT_CtrlPr ctrlPr { get; public set; }
    public static CT_LimUppPr Parse(XmlNode node, XmlNamespaceManager namespaceManager);
    internal void Write(StreamWriter sw, string nodeName);
    public CT_CtrlPr get_ctrlPr();
    public void set_ctrlPr(CT_CtrlPr value);
}
[XmlTypeAttribute]
[XmlRootAttribute]
public class NPOI.OpenXmlFormats.Shared.CT_M : object {
    private CT_MPr mPrField;
    private List`1<CT_OMathArg> mrField;
    [XmlElementAttribute]
public CT_MPr mPr { get; public set; }
    [XmlArrayAttribute]
[XmlArrayItemAttribute("e", "NPOI.OpenXmlFormats.Shared.CT_OMathArg")]
public List`1<CT_OMathArg> mr { get; public set; }
    public static CT_M Parse(XmlNode node, XmlNamespaceManager namespaceManager);
    internal void Write(StreamWriter sw, string nodeName);
    public CT_MPr get_mPr();
    public void set_mPr(CT_MPr value);
    public List`1<CT_OMathArg> get_mr();
    public void set_mr(List`1<CT_OMathArg> value);
}
[XmlTypeAttribute]
[XmlRootAttribute]
public class NPOI.OpenXmlFormats.Shared.CT_ManualBreak : object {
    private string alnAtField;
    [XmlAttributeAttribute]
public string alnAt { get; public set; }
    public static CT_ManualBreak Parse(XmlNode node, XmlNamespaceManager namespaceManager);
    internal void Write(StreamWriter sw, string nodeName);
    public string get_alnAt();
    public void set_alnAt(string value);
}
[XmlTypeAttribute]
[XmlRootAttribute("mathPr")]
public class NPOI.OpenXmlFormats.Shared.CT_MathPr : object {
    private CT_String mathFontField;
    private CT_BreakBin brkBinField;
    private CT_BreakBinSub brkBinSubField;
    private CT_OnOff smallFracField;
    private CT_OnOff dispDefField;
    private CT_TwipsMeasure lMarginField;
    private CT_TwipsMeasure rMarginField;
    private CT_OMathJc defJcField;
    private CT_TwipsMeasure preSpField;
    private CT_TwipsMeasure postSpField;
    private CT_TwipsMeasure interSpField;
    private CT_TwipsMeasure intraSpField;
    private object itemField;
    private string itemElementName;
    private CT_LimLoc intLimField;
    private CT_LimLoc naryLimField;
    [XmlElementAttribute]
public CT_String mathFont { get; public set; }
    [XmlElementAttribute]
public CT_BreakBin brkBin { get; public set; }
    [XmlElementAttribute]
public CT_BreakBinSub brkBinSub { get; public set; }
    [XmlElementAttribute]
public CT_OnOff smallFrac { get; public set; }
    [XmlElementAttribute]
public CT_OnOff dispDef { get; public set; }
    [XmlElementAttribute]
public CT_TwipsMeasure lMargin { get; public set; }
    [XmlElementAttribute]
public CT_TwipsMeasure rMargin { get; public set; }
    [XmlElementAttribute]
public CT_OMathJc defJc { get; public set; }
    [XmlElementAttribute]
public CT_TwipsMeasure preSp { get; public set; }
    [XmlElementAttribute]
public CT_TwipsMeasure postSp { get; public set; }
    [XmlElementAttribute]
public CT_TwipsMeasure interSp { get; public set; }
    [XmlElementAttribute]
public CT_TwipsMeasure intraSp { get; public set; }
    [XmlElementAttribute("wrapIndent", "NPOI.OpenXmlFormats.Shared.CT_TwipsMeasure")]
[XmlElementAttribute("wrapRight", "NPOI.OpenXmlFormats.Shared.CT_OnOff")]
public object Item { get; public set; }
    [XmlElementAttribute]
public CT_LimLoc intLim { get; public set; }
    [XmlElementAttribute]
public CT_LimLoc naryLim { get; public set; }
    public static CT_MathPr Parse(XmlNode node, XmlNamespaceManager namespaceManager);
    internal void Write(StreamWriter sw, string nodeName);
    public CT_String get_mathFont();
    public void set_mathFont(CT_String value);
    public CT_BreakBin get_brkBin();
    public void set_brkBin(CT_BreakBin value);
    public CT_BreakBinSub get_brkBinSub();
    public void set_brkBinSub(CT_BreakBinSub value);
    public CT_OnOff get_smallFrac();
    public void set_smallFrac(CT_OnOff value);
    public CT_OnOff get_dispDef();
    public void set_dispDef(CT_OnOff value);
    public CT_TwipsMeasure get_lMargin();
    public void set_lMargin(CT_TwipsMeasure value);
    public CT_TwipsMeasure get_rMargin();
    public void set_rMargin(CT_TwipsMeasure value);
    public CT_OMathJc get_defJc();
    public void set_defJc(CT_OMathJc value);
    public CT_TwipsMeasure get_preSp();
    public void set_preSp(CT_TwipsMeasure value);
    public CT_TwipsMeasure get_postSp();
    public void set_postSp(CT_TwipsMeasure value);
    public CT_TwipsMeasure get_interSp();
    public void set_interSp(CT_TwipsMeasure value);
    public CT_TwipsMeasure get_intraSp();
    public void set_intraSp(CT_TwipsMeasure value);
    public object get_Item();
    public void set_Item(object value);
    public CT_LimLoc get_intLim();
    public void set_intLim(CT_LimLoc value);
    public CT_LimLoc get_naryLim();
    public void set_naryLim(CT_LimLoc value);
}
[XmlTypeAttribute]
[XmlRootAttribute]
public class NPOI.OpenXmlFormats.Shared.CT_MC : object {
    private CT_MCPr mcPrField;
    [XmlElementAttribute]
public CT_MCPr mcPr { get; public set; }
    public static CT_MC Parse(XmlNode node, XmlNamespaceManager namespaceManager);
    internal void Write(StreamWriter sw, string nodeName);
    public CT_MCPr get_mcPr();
    public void set_mcPr(CT_MCPr value);
}
[XmlTypeAttribute]
[XmlRootAttribute]
public class NPOI.OpenXmlFormats.Shared.CT_MCPr : object {
    private CT_Integer255 countField;
    private CT_XAlign mcJcField;
    [XmlElementAttribute]
public CT_Integer255 count { get; public set; }
    [XmlElementAttribute]
public CT_XAlign mcJc { get; public set; }
    public static CT_MCPr Parse(XmlNode node, XmlNamespaceManager namespaceManager);
    internal void Write(StreamWriter sw, string nodeName);
    public CT_Integer255 get_count();
    public void set_count(CT_Integer255 value);
    public CT_XAlign get_mcJc();
    public void set_mcJc(CT_XAlign value);
}
[XmlTypeAttribute]
[XmlRootAttribute]
public class NPOI.OpenXmlFormats.Shared.CT_MCS : object {
    private List`1<CT_MC> mcField;
    [XmlElementAttribute("mc")]
public List`1<CT_MC> mc { get; public set; }
    public List`1<CT_MC> get_mc();
    public void set_mc(List`1<CT_MC> value);
}
[XmlTypeAttribute]
[XmlRootAttribute]
public class NPOI.OpenXmlFormats.Shared.CT_MPr : object {
    private CT_YAlign baseJcField;
    private CT_OnOff plcHideField;
    private CT_SpacingRule rSpRuleField;
    private CT_SpacingRule cGpRuleField;
    private CT_UnSignedInteger rSpField;
    private CT_UnSignedInteger cSpField;
    private CT_UnSignedInteger cGpField;
    private List`1<CT_MC> mcsField;
    private CT_CtrlPr ctrlPrField;
    [XmlElementAttribute]
public CT_YAlign baseJc { get; public set; }
    [XmlElementAttribute]
public CT_OnOff plcHide { get; public set; }
    [XmlElementAttribute]
public CT_SpacingRule rSpRule { get; public set; }
    [XmlElementAttribute]
public CT_SpacingRule cGpRule { get; public set; }
    [XmlElementAttribute]
public CT_UnSignedInteger rSp { get; public set; }
    [XmlElementAttribute]
public CT_UnSignedInteger cSp { get; public set; }
    [XmlElementAttribute]
public CT_UnSignedInteger cGp { get; public set; }
    [XmlArrayAttribute]
[XmlArrayItemAttribute("mc")]
public List`1<CT_MC> mcs { get; public set; }
    [XmlElementAttribute]
public CT_CtrlPr ctrlPr { get; public set; }
    public static CT_MPr Parse(XmlNode node, XmlNamespaceManager namespaceManager);
    internal void Write(StreamWriter sw, string nodeName);
    public CT_YAlign get_baseJc();
    public void set_baseJc(CT_YAlign value);
    public CT_OnOff get_plcHide();
    public void set_plcHide(CT_OnOff value);
    public CT_SpacingRule get_rSpRule();
    public void set_rSpRule(CT_SpacingRule value);
    public CT_SpacingRule get_cGpRule();
    public void set_cGpRule(CT_SpacingRule value);
    public CT_UnSignedInteger get_rSp();
    public void set_rSp(CT_UnSignedInteger value);
    public CT_UnSignedInteger get_cSp();
    public void set_cSp(CT_UnSignedInteger value);
    public CT_UnSignedInteger get_cGp();
    public void set_cGp(CT_UnSignedInteger value);
    public List`1<CT_MC> get_mcs();
    public void set_mcs(List`1<CT_MC> value);
    public CT_CtrlPr get_ctrlPr();
    public void set_ctrlPr(CT_CtrlPr value);
}
[XmlTypeAttribute]
[XmlRootAttribute]
public class NPOI.OpenXmlFormats.Shared.CT_MR : object {
    private List`1<CT_OMathArg> eField;
    [XmlElementAttribute("e")]
public List`1<CT_OMathArg> e { get; public set; }
    public List`1<CT_OMathArg> get_e();
    public void set_e(List`1<CT_OMathArg> value);
}
[XmlTypeAttribute]
[XmlRootAttribute]
public class NPOI.OpenXmlFormats.Shared.CT_Nary : object {
    private CT_NaryPr naryPrField;
    private CT_OMathArg subField;
    private CT_OMathArg supField;
    private CT_OMathArg eField;
    [XmlElementAttribute]
public CT_NaryPr naryPr { get; public set; }
    [XmlElementAttribute]
public CT_OMathArg sub { get; public set; }
    [XmlElementAttribute]
public CT_OMathArg sup { get; public set; }
    [XmlElementAttribute]
public CT_OMathArg e { get; public set; }
    public static CT_Nary Parse(XmlNode node, XmlNamespaceManager namespaceManager);
    internal void Write(StreamWriter sw, string nodeName);
    public CT_NaryPr get_naryPr();
    public void set_naryPr(CT_NaryPr value);
    public CT_OMathArg get_sub();
    public void set_sub(CT_OMathArg value);
    public CT_OMathArg get_sup();
    public void set_sup(CT_OMathArg value);
    public CT_OMathArg get_e();
    public void set_e(CT_OMathArg value);
}
[XmlTypeAttribute]
[XmlRootAttribute]
public class NPOI.OpenXmlFormats.Shared.CT_NaryPr : object {
    private CT_Char chrField;
    private CT_LimLoc limLocField;
    private CT_OnOff growField;
    private CT_OnOff subHideField;
    private CT_OnOff supHideField;
    private CT_CtrlPr ctrlPrField;
    [XmlElementAttribute]
public CT_Char chr { get; public set; }
    [XmlElementAttribute]
public CT_LimLoc limLoc { get; public set; }
    [XmlElementAttribute]
public CT_OnOff grow { get; public set; }
    [XmlElementAttribute]
public CT_OnOff subHide { get; public set; }
    [XmlElementAttribute]
public CT_OnOff supHide { get; public set; }
    [XmlElementAttribute]
public CT_CtrlPr ctrlPr { get; public set; }
    public static CT_NaryPr Parse(XmlNode node, XmlNamespaceManager namespaceManager);
    internal void Write(StreamWriter sw, string nodeName);
    public CT_Char get_chr();
    public void set_chr(CT_Char value);
    public CT_LimLoc get_limLoc();
    public void set_limLoc(CT_LimLoc value);
    public CT_OnOff get_grow();
    public void set_grow(CT_OnOff value);
    public CT_OnOff get_subHide();
    public void set_subHide(CT_OnOff value);
    public CT_OnOff get_supHide();
    public void set_supHide(CT_OnOff value);
    public CT_CtrlPr get_ctrlPr();
    public void set_ctrlPr(CT_CtrlPr value);
}
[XmlTypeAttribute]
[XmlRootAttribute]
public class NPOI.OpenXmlFormats.Shared.CT_OMath : object {
    private ArrayList itemsField;
    private List`1<ItemsChoiceType8> itemsElementNameField;
    [XmlElementAttribute("acc", "NPOI.OpenXmlFormats.Shared.CT_Acc")]
[XmlElementAttribute("bar", "NPOI.OpenXmlFormats.Shared.CT_Bar")]
[XmlElementAttribute("borderBox", "NPOI.OpenXmlFormats.Shared.CT_BorderBox")]
[XmlElementAttribute("box", "NPOI.OpenXmlFormats.Shared.CT_Box")]
[XmlElementAttribute("d", "NPOI.OpenXmlFormats.Shared.CT_D")]
[XmlElementAttribute("eqArr", "NPOI.OpenXmlFormats.Shared.CT_EqArr")]
[XmlElementAttribute("f", "NPOI.OpenXmlFormats.Shared.CT_F")]
[XmlElementAttribute("func", "NPOI.OpenXmlFormats.Shared.CT_Func")]
[XmlElementAttribute("groupChr", "NPOI.OpenXmlFormats.Shared.CT_GroupChr")]
[XmlElementAttribute("limLow", "NPOI.OpenXmlFormats.Shared.CT_LimLow")]
[XmlElementAttribute("limUpp", "NPOI.OpenXmlFormats.Shared.CT_LimUpp")]
[XmlElementAttribute("m", "NPOI.OpenXmlFormats.Shared.CT_M")]
[XmlElementAttribute("nary", "NPOI.OpenXmlFormats.Shared.CT_Nary")]
[XmlElementAttribute("oMath", "NPOI.OpenXmlFormats.Shared.CT_OMath")]
[XmlElementAttribute("oMathPara", "NPOI.OpenXmlFormats.Shared.CT_OMathPara")]
[XmlElementAttribute("phant", "NPOI.OpenXmlFormats.Shared.CT_Phant")]
[XmlElementAttribute("r", "NPOI.OpenXmlFormats.Shared.CT_R")]
[XmlElementAttribute("rad", "NPOI.OpenXmlFormats.Shared.CT_Rad")]
[XmlElementAttribute("sPre", "NPOI.OpenXmlFormats.Shared.CT_SPre")]
[XmlElementAttribute("sSub", "NPOI.OpenXmlFormats.Shared.CT_SSub")]
[XmlElementAttribute("sSubSup", "NPOI.OpenXmlFormats.Shared.CT_SSubSup")]
[XmlElementAttribute("sSup", "NPOI.OpenXmlFormats.Shared.CT_SSup")]
[XmlElementAttribute("bookmarkEnd", "NPOI.OpenXmlFormats.Wordprocessing.CT_MarkupRange")]
[XmlElementAttribute("bookmarkStart", "NPOI.OpenXmlFormats.Wordprocessing.CT_Bookmark")]
[XmlElementAttribute("commentRangeEnd", "NPOI.OpenXmlFormats.Wordprocessing.CT_MarkupRange")]
[XmlElementAttribute("commentRangeStart", "NPOI.OpenXmlFormats.Wordprocessing.CT_MarkupRange")]
[XmlElementAttribute("customXmlDelRangeEnd", "NPOI.OpenXmlFormats.Wordprocessing.CT_Markup")]
[XmlElementAttribute("customXmlDelRangeStart", "NPOI.OpenXmlFormats.Wordprocessing.CT_TrackChange")]
[XmlElementAttribute("customXmlInsRangeEnd", "NPOI.OpenXmlFormats.Wordprocessing.CT_Markup")]
[XmlElementAttribute("customXmlInsRangeStart", "NPOI.OpenXmlFormats.Wordprocessing.CT_TrackChange")]
[XmlElementAttribute("customXmlMoveFromRangeEnd", "NPOI.OpenXmlFormats.Wordprocessing.CT_Markup")]
[XmlElementAttribute("customXmlMoveFromRangeStart", "NPOI.OpenXmlFormats.Wordprocessing.CT_TrackChange")]
[XmlElementAttribute("customXmlMoveToRangeEnd", "NPOI.OpenXmlFormats.Wordprocessing.CT_Markup")]
[XmlElementAttribute("customXmlMoveToRangeStart", "NPOI.OpenXmlFormats.Wordprocessing.CT_TrackChange")]
[XmlElementAttribute("del", "NPOI.OpenXmlFormats.Wordprocessing.CT_RunTrackChange")]
[XmlElementAttribute("ins", "NPOI.OpenXmlFormats.Wordprocessing.CT_RunTrackChange")]
[XmlElementAttribute("moveFrom", "NPOI.OpenXmlFormats.Wordprocessing.CT_RunTrackChange")]
[XmlElementAttribute("moveFromRangeEnd", "NPOI.OpenXmlFormats.Wordprocessing.CT_MarkupRange")]
[XmlElementAttribute("moveFromRangeStart", "NPOI.OpenXmlFormats.Wordprocessing.CT_MoveBookmark")]
[XmlElementAttribute("moveTo", "NPOI.OpenXmlFormats.Wordprocessing.CT_RunTrackChange")]
[XmlElementAttribute("moveToRangeEnd", "NPOI.OpenXmlFormats.Wordprocessing.CT_MarkupRange")]
[XmlElementAttribute("moveToRangeStart", "NPOI.OpenXmlFormats.Wordprocessing.CT_MoveBookmark")]
[XmlElementAttribute("permEnd", "NPOI.OpenXmlFormats.Wordprocessing.CT_Perm")]
[XmlElementAttribute("permStart", "NPOI.OpenXmlFormats.Wordprocessing.CT_PermStart")]
[XmlElementAttribute("proofErr", "NPOI.OpenXmlFormats.Wordprocessing.CT_ProofErr")]
[XmlChoiceIdentifierAttribute("ItemsElementName")]
public ArrayList Items { get; public set; }
    [XmlElementAttribute("ItemsElementName")]
[XmlIgnoreAttribute]
public List`1<ItemsChoiceType8> ItemsElementName { get; public set; }
    public sealed virtual ArrayList get_Items();
    public void set_Items(ArrayList value);
    public List`1<ItemsChoiceType8> get_ItemsElementName();
    public void set_ItemsElementName(List`1<ItemsChoiceType8> value);
    public static CT_OMath Parse(XmlNode node, XmlNamespaceManager namespaceManager);
    public sealed virtual CT_Acc AddNewAcc();
    public sealed virtual CT_F AddNewF();
    public sealed virtual CT_Nary AddNewNary();
    public sealed virtual CT_R AddNewR();
    public sealed virtual CT_Rad AddNewRad();
    public sealed virtual CT_SSub AddNewSSub();
    public sealed virtual CT_SSup AddNewSSup();
    internal void Write(StreamWriter sw, string nodeName);
}
[XmlTypeAttribute]
[XmlRootAttribute]
public class NPOI.OpenXmlFormats.Shared.CT_OMathArg : object {
    private CT_OMathArgPr argPrField;
    private ArrayList itemsField;
    private List`1<ItemsChoiceType7> itemsElementNameField;
    private CT_CtrlPr ctrlPrField;
    [XmlElementAttribute]
public CT_OMathArgPr argPr { get; public set; }
    [XmlElementAttribute("acc", "NPOI.OpenXmlFormats.Shared.CT_Acc")]
[XmlElementAttribute("bar", "NPOI.OpenXmlFormats.Shared.CT_Bar")]
[XmlElementAttribute("borderBox", "NPOI.OpenXmlFormats.Shared.CT_BorderBox")]
[XmlElementAttribute("box", "NPOI.OpenXmlFormats.Shared.CT_Box")]
[XmlElementAttribute("d", "NPOI.OpenXmlFormats.Shared.CT_D")]
[XmlElementAttribute("eqArr", "NPOI.OpenXmlFormats.Shared.CT_EqArr")]
[XmlElementAttribute("f", "NPOI.OpenXmlFormats.Shared.CT_F")]
[XmlElementAttribute("func", "NPOI.OpenXmlFormats.Shared.CT_Func")]
[XmlElementAttribute("groupChr", "NPOI.OpenXmlFormats.Shared.CT_GroupChr")]
[XmlElementAttribute("limLow", "NPOI.OpenXmlFormats.Shared.CT_LimLow")]
[XmlElementAttribute("limUpp", "NPOI.OpenXmlFormats.Shared.CT_LimUpp")]
[XmlElementAttribute("m", "NPOI.OpenXmlFormats.Shared.CT_M")]
[XmlElementAttribute("nary", "NPOI.OpenXmlFormats.Shared.CT_Nary")]
[XmlElementAttribute("oMath", "NPOI.OpenXmlFormats.Shared.CT_OMath")]
[XmlElementAttribute("oMathPara", "NPOI.OpenXmlFormats.Shared.CT_OMathPara")]
[XmlElementAttribute("phant", "NPOI.OpenXmlFormats.Shared.CT_Phant")]
[XmlElementAttribute("r", "NPOI.OpenXmlFormats.Shared.CT_R")]
[XmlElementAttribute("rad", "NPOI.OpenXmlFormats.Shared.CT_Rad")]
[XmlElementAttribute("sPre", "NPOI.OpenXmlFormats.Shared.CT_SPre")]
[XmlElementAttribute("sSub", "NPOI.OpenXmlFormats.Shared.CT_SSub")]
[XmlElementAttribute("sSubSup", "NPOI.OpenXmlFormats.Shared.CT_SSubSup")]
[XmlElementAttribute("sSup", "NPOI.OpenXmlFormats.Shared.CT_SSup")]
[XmlElementAttribute("bookmarkEnd", "NPOI.OpenXmlFormats.Wordprocessing.CT_MarkupRange")]
[XmlElementAttribute("bookmarkStart", "NPOI.OpenXmlFormats.Wordprocessing.CT_Bookmark")]
[XmlElementAttribute("commentRangeEnd", "NPOI.OpenXmlFormats.Wordprocessing.CT_MarkupRange")]
[XmlElementAttribute("commentRangeStart", "NPOI.OpenXmlFormats.Wordprocessing.CT_MarkupRange")]
[XmlElementAttribute("customXmlDelRangeEnd", "NPOI.OpenXmlFormats.Wordprocessing.CT_Markup")]
[XmlElementAttribute("customXmlDelRangeStart", "NPOI.OpenXmlFormats.Wordprocessing.CT_TrackChange")]
[XmlElementAttribute("customXmlInsRangeEnd", "NPOI.OpenXmlFormats.Wordprocessing.CT_Markup")]
[XmlElementAttribute("customXmlInsRangeStart", "NPOI.OpenXmlFormats.Wordprocessing.CT_TrackChange")]
[XmlElementAttribute("customXmlMoveFromRangeEnd", "NPOI.OpenXmlFormats.Wordprocessing.CT_Markup")]
[XmlElementAttribute("customXmlMoveFromRangeStart", "NPOI.OpenXmlFormats.Wordprocessing.CT_TrackChange")]
[XmlElementAttribute("customXmlMoveToRangeEnd", "NPOI.OpenXmlFormats.Wordprocessing.CT_Markup")]
[XmlElementAttribute("customXmlMoveToRangeStart", "NPOI.OpenXmlFormats.Wordprocessing.CT_TrackChange")]
[XmlElementAttribute("del", "NPOI.OpenXmlFormats.Wordprocessing.CT_RunTrackChange")]
[XmlElementAttribute("ins", "NPOI.OpenXmlFormats.Wordprocessing.CT_RunTrackChange")]
[XmlElementAttribute("moveFrom", "NPOI.OpenXmlFormats.Wordprocessing.CT_RunTrackChange")]
[XmlElementAttribute("moveFromRangeEnd", "NPOI.OpenXmlFormats.Wordprocessing.CT_MarkupRange")]
[XmlElementAttribute("moveFromRangeStart", "NPOI.OpenXmlFormats.Wordprocessing.CT_MoveBookmark")]
[XmlElementAttribute("moveTo", "NPOI.OpenXmlFormats.Wordprocessing.CT_RunTrackChange")]
[XmlElementAttribute("moveToRangeEnd", "NPOI.OpenXmlFormats.Wordprocessing.CT_MarkupRange")]
[XmlElementAttribute("moveToRangeStart", "NPOI.OpenXmlFormats.Wordprocessing.CT_MoveBookmark")]
[XmlElementAttribute("permEnd", "NPOI.OpenXmlFormats.Wordprocessing.CT_Perm")]
[XmlElementAttribute("permStart", "NPOI.OpenXmlFormats.Wordprocessing.CT_PermStart")]
[XmlElementAttribute("proofErr", "NPOI.OpenXmlFormats.Wordprocessing.CT_ProofErr")]
[XmlChoiceIdentifierAttribute("ItemsElementName")]
public ArrayList Items { get; public set; }
    [XmlElementAttribute("ItemsElementName")]
[XmlIgnoreAttribute]
public List`1<ItemsChoiceType7> ItemsElementName { get; public set; }
    [XmlElementAttribute]
public CT_CtrlPr ctrlPr { get; public set; }
    public CT_OMathArgPr get_argPr();
    public void set_argPr(CT_OMathArgPr value);
    public sealed virtual ArrayList get_Items();
    public void set_Items(ArrayList value);
    public List`1<ItemsChoiceType7> get_ItemsElementName();
    public void set_ItemsElementName(List`1<ItemsChoiceType7> value);
    public CT_CtrlPr get_ctrlPr();
    public void set_ctrlPr(CT_CtrlPr value);
    public static CT_OMathArg Parse(XmlNode node, XmlNamespaceManager namespaceManager);
    public sealed virtual CT_Acc AddNewAcc();
    public sealed virtual CT_F AddNewF();
    public sealed virtual CT_Nary AddNewNary();
    public sealed virtual CT_R AddNewR();
    public sealed virtual CT_Rad AddNewRad();
    public sealed virtual CT_SSub AddNewSSub();
    public sealed virtual CT_SSup AddNewSSup();
    internal void Write(StreamWriter sw, string nodeName);
}
[XmlTypeAttribute]
[XmlRootAttribute]
public class NPOI.OpenXmlFormats.Shared.CT_OMathArgPr : object {
    private CT_Integer2 argSzField;
    [XmlElementAttribute]
public CT_Integer2 argSz { get; public set; }
    public static CT_OMathArgPr Parse(XmlNode node, XmlNamespaceManager namespaceManager);
    internal void Write(StreamWriter sw, string nodeName);
    public CT_Integer2 get_argSz();
    public void set_argSz(CT_Integer2 value);
}
[XmlTypeAttribute]
[XmlRootAttribute]
public class NPOI.OpenXmlFormats.Shared.CT_OMathJc : object {
    private ST_Jc valField;
    private bool valFieldSpecified;
    [XmlAttributeAttribute]
public ST_Jc val { get; public set; }
    [XmlIgnoreAttribute]
public bool valSpecified { get; public set; }
    public static CT_OMathJc Parse(XmlNode node, XmlNamespaceManager namespaceManager);
    internal void Write(StreamWriter sw, string nodeName);
    public ST_Jc get_val();
    public void set_val(ST_Jc value);
    public bool get_valSpecified();
    public void set_valSpecified(bool value);
}
[XmlTypeAttribute]
[XmlRootAttribute]
public class NPOI.OpenXmlFormats.Shared.CT_OMathPara : object {
    private CT_OMathParaPr oMathParaPrField;
    private List`1<CT_OMath> oMathField;
    [XmlElementAttribute]
public CT_OMathParaPr oMathParaPr { get; public set; }
    [XmlElementAttribute("oMath")]
public List`1<CT_OMath> oMath { get; public set; }
    public static CT_OMathPara Parse(XmlNode node, XmlNamespaceManager namespaceManager);
    internal void Write(StreamWriter sw, string nodeName);
    public CT_OMathParaPr get_oMathParaPr();
    public void set_oMathParaPr(CT_OMathParaPr value);
    public List`1<CT_OMath> get_oMath();
    public void set_oMath(List`1<CT_OMath> value);
}
[XmlTypeAttribute]
[XmlRootAttribute]
public class NPOI.OpenXmlFormats.Shared.CT_OMathParaPr : object {
    private CT_OMathJc jcField;
    [XmlElementAttribute]
public CT_OMathJc jc { get; public set; }
    public static CT_OMathParaPr Parse(XmlNode node, XmlNamespaceManager namespaceManager);
    internal void Write(StreamWriter sw, string nodeName);
    public CT_OMathJc get_jc();
    public void set_jc(CT_OMathJc value);
}
[XmlTypeAttribute]
[XmlRootAttribute]
public class NPOI.OpenXmlFormats.Shared.CT_OnOff : object {
    private ST_OnOff valField;
    private bool valFieldSpecified;
    [XmlAttributeAttribute]
public ST_OnOff val { get; public set; }
    [XmlIgnoreAttribute]
public bool valSpecified { get; public set; }
    public static CT_OnOff Parse(XmlNode node, XmlNamespaceManager namespaceManager);
    internal void Write(StreamWriter sw, string nodeName);
    public ST_OnOff get_val();
    public void set_val(ST_OnOff value);
    public bool get_valSpecified();
    public void set_valSpecified(bool value);
}
[XmlTypeAttribute]
[XmlRootAttribute]
public class NPOI.OpenXmlFormats.Shared.CT_Phant : object {
    private CT_PhantPr phantPrField;
    private CT_OMathArg eField;
    [XmlElementAttribute]
public CT_PhantPr phantPr { get; public set; }
    [XmlElementAttribute]
public CT_OMathArg e { get; public set; }
    public static CT_Phant Parse(XmlNode node, XmlNamespaceManager namespaceManager);
    internal void Write(StreamWriter sw, string nodeName);
    public CT_PhantPr get_phantPr();
    public void set_phantPr(CT_PhantPr value);
    public CT_OMathArg get_e();
    public void set_e(CT_OMathArg value);
}
[XmlTypeAttribute]
[XmlRootAttribute]
public class NPOI.OpenXmlFormats.Shared.CT_PhantPr : object {
    private CT_OnOff showField;
    private CT_OnOff zeroWidField;
    private CT_OnOff zeroAscField;
    private CT_OnOff zeroDescField;
    private CT_OnOff transpField;
    private CT_CtrlPr ctrlPrField;
    [XmlElementAttribute]
public CT_OnOff show { get; public set; }
    [XmlElementAttribute]
public CT_OnOff zeroWid { get; public set; }
    [XmlElementAttribute]
public CT_OnOff zeroAsc { get; public set; }
    [XmlElementAttribute]
public CT_OnOff zeroDesc { get; public set; }
    [XmlElementAttribute]
public CT_OnOff transp { get; public set; }
    [XmlElementAttribute]
public CT_CtrlPr ctrlPr { get; public set; }
    public static CT_PhantPr Parse(XmlNode node, XmlNamespaceManager namespaceManager);
    internal void Write(StreamWriter sw, string nodeName);
    public CT_OnOff get_show();
    public void set_show(CT_OnOff value);
    public CT_OnOff get_zeroWid();
    public void set_zeroWid(CT_OnOff value);
    public CT_OnOff get_zeroAsc();
    public void set_zeroAsc(CT_OnOff value);
    public CT_OnOff get_zeroDesc();
    public void set_zeroDesc(CT_OnOff value);
    public CT_OnOff get_transp();
    public void set_transp(CT_OnOff value);
    public CT_CtrlPr get_ctrlPr();
    public void set_ctrlPr(CT_CtrlPr value);
}
[XmlTypeAttribute]
[XmlRootAttribute]
public class NPOI.OpenXmlFormats.Shared.CT_R : object {
    private CT_RPR rPrField;
    private CT_RPr rPr1Field;
    private ArrayList itemsField;
    private List`1<ItemsChoiceType6> itemsElementNameField;
    [XmlElementAttribute]
public CT_RPR rPr { get; public set; }
    [XmlElementAttribute("rPr")]
public CT_RPr rPr1 { get; public set; }
    [XmlElementAttribute("t", "NPOI.OpenXmlFormats.Shared.CT_Text1")]
[XmlElementAttribute("annotationRef", "NPOI.OpenXmlFormats.CT_Empty")]
[XmlElementAttribute("br", "NPOI.OpenXmlFormats.Wordprocessing.CT_Br")]
[XmlElementAttribute("commentReference", "NPOI.OpenXmlFormats.Wordprocessing.CT_Markup")]
[XmlElementAttribute("continuationSeparator", "NPOI.OpenXmlFormats.CT_Empty")]
[XmlElementAttribute("cr", "NPOI.OpenXmlFormats.CT_Empty")]
[XmlElementAttribute("dayLong", "NPOI.OpenXmlFormats.CT_Empty")]
[XmlElementAttribute("dayShort", "NPOI.OpenXmlFormats.CT_Empty")]
[XmlElementAttribute("delInstrText", "NPOI.OpenXmlFormats.Wordprocessing.CT_Text")]
[XmlElementAttribute("delText", "NPOI.OpenXmlFormats.Wordprocessing.CT_Text")]
[XmlElementAttribute("drawing", "NPOI.OpenXmlFormats.Dml.WordProcessing.CT_Drawing")]
[XmlElementAttribute("endnoteRef", "NPOI.OpenXmlFormats.CT_Empty")]
[XmlElementAttribute("endnoteReference", "NPOI.OpenXmlFormats.Wordprocessing.CT_FtnEdnRef")]
[XmlElementAttribute("fldChar", "NPOI.OpenXmlFormats.Wordprocessing.CT_FldChar")]
[XmlElementAttribute("footnoteRef", "NPOI.OpenXmlFormats.CT_Empty")]
[XmlElementAttribute("footnoteReference", "NPOI.OpenXmlFormats.Wordprocessing.CT_FtnEdnRef")]
[XmlElementAttribute("instrText", "NPOI.OpenXmlFormats.Wordprocessing.CT_Text")]
[XmlElementAttribute("lastRenderedPageBreak", "NPOI.OpenXmlFormats.CT_Empty")]
[XmlElementAttribute("monthLong", "NPOI.OpenXmlFormats.CT_Empty")]
[XmlElementAttribute("monthShort", "NPOI.OpenXmlFormats.CT_Empty")]
[XmlElementAttribute("noBreakHyphen", "NPOI.OpenXmlFormats.CT_Empty")]
[XmlElementAttribute("object", "NPOI.OpenXmlFormats.Wordprocessing.CT_Object")]
[XmlElementAttribute("pgNum", "NPOI.OpenXmlFormats.CT_Empty")]
[XmlElementAttribute("pict", "NPOI.OpenXmlFormats.Wordprocessing.CT_Picture")]
[XmlElementAttribute("ptab", "NPOI.OpenXmlFormats.Wordprocessing.CT_PTab")]
[XmlElementAttribute("ruby", "NPOI.OpenXmlFormats.Wordprocessing.CT_Ruby")]
[XmlElementAttribute("separator", "NPOI.OpenXmlFormats.CT_Empty")]
[XmlElementAttribute("softHyphen", "NPOI.OpenXmlFormats.CT_Empty")]
[XmlElementAttribute("sym", "NPOI.OpenXmlFormats.Wordprocessing.CT_Sym")]
[XmlElementAttribute("t", "NPOI.OpenXmlFormats.Wordprocessing.CT_Text")]
[XmlElementAttribute("tab", "NPOI.OpenXmlFormats.CT_Empty")]
[XmlElementAttribute("yearLong", "NPOI.OpenXmlFormats.CT_Empty")]
[XmlElementAttribute("yearShort", "NPOI.OpenXmlFormats.CT_Empty")]
[XmlChoiceIdentifierAttribute("ItemsElementName")]
public ArrayList Items { get; public set; }
    [XmlElementAttribute("ItemsElementName")]
[XmlIgnoreAttribute]
public List`1<ItemsChoiceType6> ItemsElementName { get; public set; }
    public CT_RPR get_rPr();
    public void set_rPr(CT_RPR value);
    public CT_RPr get_rPr1();
    public void set_rPr1(CT_RPr value);
    public static CT_R Parse(XmlNode node, XmlNamespaceManager namespaceManager);
    internal void Write(StreamWriter sw, string nodeName);
    public CT_Text1 AddNewT();
    private T AddNewObject(ItemsChoiceType6 type);
    public int SizeOfTArray();
    private int SizeOfArray(ItemsChoiceType6 type);
    public CT_Text1 GetTArray(int pos);
    private T GetObjectArray(int p, ItemsChoiceType6 type);
    private int GetObjectIndex(ItemsChoiceType6 type, int p);
    public bool IsSetRPr1();
    public CT_RPr AddNewRPr1();
    public ArrayList get_Items();
    public void set_Items(ArrayList value);
    public List`1<ItemsChoiceType6> get_ItemsElementName();
    public void set_ItemsElementName(List`1<ItemsChoiceType6> value);
}
[XmlTypeAttribute]
[XmlRootAttribute]
public class NPOI.OpenXmlFormats.Shared.CT_Rad : object {
    private CT_RadPr radPrField;
    private CT_OMathArg degField;
    private CT_OMathArg eField;
    [XmlElementAttribute]
public CT_RadPr radPr { get; public set; }
    [XmlElementAttribute]
public CT_OMathArg deg { get; public set; }
    [XmlElementAttribute]
public CT_OMathArg e { get; public set; }
    public static CT_Rad Parse(XmlNode node, XmlNamespaceManager namespaceManager);
    internal void Write(StreamWriter sw, string nodeName);
    public CT_RadPr get_radPr();
    public void set_radPr(CT_RadPr value);
    public CT_OMathArg get_deg();
    public void set_deg(CT_OMathArg value);
    public CT_OMathArg get_e();
    public void set_e(CT_OMathArg value);
}
[XmlTypeAttribute]
[XmlRootAttribute]
public class NPOI.OpenXmlFormats.Shared.CT_RadPr : object {
    private CT_OnOff degHideField;
    private CT_CtrlPr ctrlPrField;
    [XmlElementAttribute]
public CT_OnOff degHide { get; public set; }
    [XmlElementAttribute]
public CT_CtrlPr ctrlPr { get; public set; }
    public static CT_RadPr Parse(XmlNode node, XmlNamespaceManager namespaceManager);
    internal void Write(StreamWriter sw, string nodeName);
    public CT_OnOff get_degHide();
    public void set_degHide(CT_OnOff value);
    public CT_CtrlPr get_ctrlPr();
    public void set_ctrlPr(CT_CtrlPr value);
}
[XmlTypeAttribute]
[XmlRootAttribute]
public class NPOI.OpenXmlFormats.Shared.CT_RPR : object {
    private CT_OnOff litField;
    private CT_OnOff norField;
    private CT_Script scrField;
    private CT_Style styField;
    private CT_ManualBreak brkField;
    private CT_OnOff alnField;
    [XmlElementAttribute]
public CT_OnOff lit { get; public set; }
    public CT_OnOff nor { get; public set; }
    public CT_Script scr { get; public set; }
    public CT_Style sty { get; public set; }
    [XmlElementAttribute]
public CT_ManualBreak brk { get; public set; }
    [XmlElementAttribute]
public CT_OnOff aln { get; public set; }
    public CT_OnOff get_lit();
    public void set_lit(CT_OnOff value);
    public CT_OnOff get_nor();
    public void set_nor(CT_OnOff value);
    public CT_Script get_scr();
    public void set_scr(CT_Script value);
    public CT_Style get_sty();
    public void set_sty(CT_Style value);
    public CT_ManualBreak get_brk();
    public void set_brk(CT_ManualBreak value);
    public CT_OnOff get_aln();
    public void set_aln(CT_OnOff value);
    internal static CT_RPR Parse(XmlNode node, XmlNamespaceManager namespaceManager);
    internal void Write(StreamWriter sw, string nodeName);
    public bool IsSetI();
    public CT_OnOff AddNewI();
}
[XmlTypeAttribute]
[XmlRootAttribute]
public class NPOI.OpenXmlFormats.Shared.CT_Script : object {
    private ST_Script valField;
    [XmlAttributeAttribute]
public ST_Script val { get; public set; }
    public ST_Script get_val();
    public void set_val(ST_Script value);
    public static CT_Script Parse(XmlNode node, XmlNamespaceManager namespaceManager);
    internal void Write(StreamWriter sw, string nodeName);
}
[XmlTypeAttribute]
[XmlRootAttribute]
public class NPOI.OpenXmlFormats.Shared.CT_Shp : object {
    private ST_Shp valField;
    [XmlAttributeAttribute]
public ST_Shp val { get; public set; }
    public static CT_Shp Parse(XmlNode node, XmlNamespaceManager namespaceManager);
    internal void Write(StreamWriter sw, string nodeName);
    public ST_Shp get_val();
    public void set_val(ST_Shp value);
}
[XmlTypeAttribute]
[XmlRootAttribute]
public class NPOI.OpenXmlFormats.Shared.CT_SpacingRule : object {
    private string valField;
    [XmlAttributeAttribute]
public string val { get; public set; }
    public static CT_SpacingRule Parse(XmlNode node, XmlNamespaceManager namespaceManager);
    internal void Write(StreamWriter sw, string nodeName);
    public string get_val();
    public void set_val(string value);
}
[XmlTypeAttribute]
[XmlRootAttribute]
public class NPOI.OpenXmlFormats.Shared.CT_SPre : object {
    private CT_SPrePr sPrePrField;
    private CT_OMathArg subField;
    private CT_OMathArg supField;
    private CT_OMathArg eField;
    [XmlElementAttribute]
public CT_SPrePr sPrePr { get; public set; }
    [XmlElementAttribute]
public CT_OMathArg sub { get; public set; }
    [XmlElementAttribute]
public CT_OMathArg sup { get; public set; }
    [XmlElementAttribute]
public CT_OMathArg e { get; public set; }
    public static CT_SPre Parse(XmlNode node, XmlNamespaceManager namespaceManager);
    internal void Write(StreamWriter sw, string nodeName);
    public CT_SPrePr get_sPrePr();
    public void set_sPrePr(CT_SPrePr value);
    public CT_OMathArg get_sub();
    public void set_sub(CT_OMathArg value);
    public CT_OMathArg get_sup();
    public void set_sup(CT_OMathArg value);
    public CT_OMathArg get_e();
    public void set_e(CT_OMathArg value);
}
[XmlTypeAttribute]
[XmlRootAttribute]
public class NPOI.OpenXmlFormats.Shared.CT_SPrePr : object {
    private CT_CtrlPr ctrlPrField;
    [XmlElementAttribute]
public CT_CtrlPr ctrlPr { get; public set; }
    public static CT_SPrePr Parse(XmlNode node, XmlNamespaceManager namespaceManager);
    internal void Write(StreamWriter sw, string nodeName);
    public CT_CtrlPr get_ctrlPr();
    public void set_ctrlPr(CT_CtrlPr value);
}
[XmlTypeAttribute]
[XmlRootAttribute]
public class NPOI.OpenXmlFormats.Shared.CT_SSub : object {
    private CT_SSubPr sSubPrField;
    private CT_OMathArg eField;
    private CT_OMathArg subField;
    [XmlElementAttribute]
public CT_SSubPr sSubPr { get; public set; }
    [XmlElementAttribute]
public CT_OMathArg e { get; public set; }
    [XmlElementAttribute]
public CT_OMathArg sub { get; public set; }
    public static CT_SSub Parse(XmlNode node, XmlNamespaceManager namespaceManager);
    internal void Write(StreamWriter sw, string nodeName);
    public CT_SSubPr get_sSubPr();
    public void set_sSubPr(CT_SSubPr value);
    public CT_OMathArg get_e();
    public void set_e(CT_OMathArg value);
    public CT_OMathArg get_sub();
    public void set_sub(CT_OMathArg value);
}
[XmlTypeAttribute]
[XmlRootAttribute]
public class NPOI.OpenXmlFormats.Shared.CT_SSubPr : object {
    private CT_CtrlPr ctrlPrField;
    [XmlElementAttribute]
public CT_CtrlPr ctrlPr { get; public set; }
    public static CT_SSubPr Parse(XmlNode node, XmlNamespaceManager namespaceManager);
    internal void Write(StreamWriter sw, string nodeName);
    public CT_CtrlPr get_ctrlPr();
    public void set_ctrlPr(CT_CtrlPr value);
}
[XmlTypeAttribute]
[XmlRootAttribute]
public class NPOI.OpenXmlFormats.Shared.CT_SSubSup : object {
    private CT_SSubSupPr sSubSupPrField;
    private CT_OMathArg eField;
    private CT_OMathArg subField;
    private CT_OMathArg supField;
    [XmlElementAttribute]
public CT_SSubSupPr sSubSupPr { get; public set; }
    [XmlElementAttribute]
public CT_OMathArg e { get; public set; }
    [XmlElementAttribute]
public CT_OMathArg sub { get; public set; }
    [XmlElementAttribute]
public CT_OMathArg sup { get; public set; }
    public static CT_SSubSup Parse(XmlNode node, XmlNamespaceManager namespaceManager);
    internal void Write(StreamWriter sw, string nodeName);
    public CT_SSubSupPr get_sSubSupPr();
    public void set_sSubSupPr(CT_SSubSupPr value);
    public CT_OMathArg get_e();
    public void set_e(CT_OMathArg value);
    public CT_OMathArg get_sub();
    public void set_sub(CT_OMathArg value);
    public CT_OMathArg get_sup();
    public void set_sup(CT_OMathArg value);
}
[XmlTypeAttribute]
[XmlRootAttribute]
public class NPOI.OpenXmlFormats.Shared.CT_SSubSupPr : object {
    private CT_OnOff alnScrField;
    private CT_CtrlPr ctrlPrField;
    [XmlElementAttribute]
public CT_OnOff alnScr { get; public set; }
    [XmlElementAttribute]
public CT_CtrlPr ctrlPr { get; public set; }
    public static CT_SSubSupPr Parse(XmlNode node, XmlNamespaceManager namespaceManager);
    internal void Write(StreamWriter sw, string nodeName);
    public CT_OnOff get_alnScr();
    public void set_alnScr(CT_OnOff value);
    public CT_CtrlPr get_ctrlPr();
    public void set_ctrlPr(CT_CtrlPr value);
}
[XmlTypeAttribute]
[XmlRootAttribute]
public class NPOI.OpenXmlFormats.Shared.CT_SSup : object {
    private CT_SSupPr sSupPrField;
    private CT_OMathArg eField;
    private CT_OMathArg supField;
    [XmlElementAttribute]
public CT_SSupPr sSupPr { get; public set; }
    [XmlElementAttribute]
public CT_OMathArg e { get; public set; }
    [XmlElementAttribute]
public CT_OMathArg sup { get; public set; }
    public static CT_SSup Parse(XmlNode node, XmlNamespaceManager namespaceManager);
    internal void Write(StreamWriter sw, string nodeName);
    public CT_SSupPr get_sSupPr();
    public void set_sSupPr(CT_SSupPr value);
    public CT_OMathArg get_e();
    public void set_e(CT_OMathArg value);
    public CT_OMathArg get_sup();
    public void set_sup(CT_OMathArg value);
}
[XmlTypeAttribute]
[XmlRootAttribute]
public class NPOI.OpenXmlFormats.Shared.CT_SSupPr : object {
    private CT_CtrlPr ctrlPrField;
    [XmlElementAttribute]
public CT_CtrlPr ctrlPr { get; public set; }
    public static CT_SSupPr Parse(XmlNode node, XmlNamespaceManager namespaceManager);
    internal void Write(StreamWriter sw, string nodeName);
    public CT_CtrlPr get_ctrlPr();
    public void set_ctrlPr(CT_CtrlPr value);
}
[XmlTypeAttribute]
[XmlRootAttribute]
public class NPOI.OpenXmlFormats.Shared.CT_String : object {
    private string valField;
    [XmlAttributeAttribute]
public string val { get; public set; }
    public static CT_String Parse(XmlNode node, XmlNamespaceManager namespaceManager);
    internal void Write(StreamWriter sw, string nodeName);
    public string get_val();
    public void set_val(string value);
}
[XmlTypeAttribute]
[XmlRootAttribute]
public class NPOI.OpenXmlFormats.Shared.CT_Style : object {
    private ST_Style valField;
    [XmlAttributeAttribute]
public ST_Style val { get; public set; }
    public ST_Style get_val();
    public void set_val(ST_Style value);
    public static CT_Style Parse(XmlNode node, XmlNamespaceManager namespaceManager);
    internal void Write(StreamWriter sw, string nodeName);
}
[XmlTypeAttribute]
[XmlRootAttribute]
public class NPOI.OpenXmlFormats.Shared.CT_Text1 : object {
    private string spaceField;
    private string valueField;
    [XmlAttributeAttribute]
public string space { get; public set; }
    [XmlTextAttribute]
public string Value { get; public set; }
    public static CT_Text1 Parse(XmlNode node, XmlNamespaceManager namespaceManager);
    internal void Write(StreamWriter sw, string nodeName);
    public string get_space();
    public void set_space(string value);
    public string get_Value();
    public void set_Value(string value);
}
[XmlTypeAttribute]
[XmlRootAttribute]
public class NPOI.OpenXmlFormats.Shared.CT_TopBot : object {
    private ST_TopBot valField;
    [XmlAttributeAttribute]
public ST_TopBot val { get; public set; }
    public static CT_TopBot Parse(XmlNode node, XmlNamespaceManager namespaceManager);
    internal void Write(StreamWriter sw, string nodeName);
    public ST_TopBot get_val();
    public void set_val(ST_TopBot value);
}
[XmlTypeAttribute]
[XmlRootAttribute]
public class NPOI.OpenXmlFormats.Shared.CT_TwipsMeasure : object {
    private UInt32 valField;
    [XmlAttributeAttribute]
public UInt32 val { get; public set; }
    public static CT_TwipsMeasure Parse(XmlNode node, XmlNamespaceManager namespaceManager);
    internal void Write(StreamWriter sw, string nodeName);
    public UInt32 get_val();
    public void set_val(UInt32 value);
}
[XmlTypeAttribute]
[XmlRootAttribute]
public class NPOI.OpenXmlFormats.Shared.CT_UnSignedInteger : object {
    private UInt32 valField;
    [XmlAttributeAttribute]
public UInt32 val { get; public set; }
    public static CT_UnSignedInteger Parse(XmlNode node, XmlNamespaceManager namespaceManager);
    internal void Write(StreamWriter sw, string nodeName);
    public UInt32 get_val();
    public void set_val(UInt32 value);
}
[XmlTypeAttribute]
[XmlRootAttribute]
public class NPOI.OpenXmlFormats.Shared.CT_XAlign : object {
    private ST_XAlign valField;
    [XmlAttributeAttribute]
public ST_XAlign val { get; public set; }
    public static CT_XAlign Parse(XmlNode node, XmlNamespaceManager namespaceManager);
    internal void Write(StreamWriter sw, string nodeName);
    public ST_XAlign get_val();
    public void set_val(ST_XAlign value);
}
[XmlTypeAttribute]
[XmlRootAttribute]
public class NPOI.OpenXmlFormats.Shared.CT_YAlign : object {
    private ST_YAlign valField;
    [XmlAttributeAttribute]
public ST_YAlign val { get; public set; }
    public static CT_YAlign Parse(XmlNode node, XmlNamespaceManager namespaceManager);
    internal void Write(StreamWriter sw, string nodeName);
    public ST_YAlign get_val();
    public void set_val(ST_YAlign value);
}
public interface NPOI.OpenXmlFormats.Shared.IOMathContainer {
    public ArrayList Items { get; }
    public abstract virtual ArrayList get_Items();
    public abstract virtual CT_R AddNewR();
    public abstract virtual CT_Acc AddNewAcc();
    public abstract virtual CT_Nary AddNewNary();
    public abstract virtual CT_SSub AddNewSSub();
    public abstract virtual CT_SSup AddNewSSup();
    public abstract virtual CT_F AddNewF();
    public abstract virtual CT_Rad AddNewRad();
}
[XmlTypeAttribute]
public enum NPOI.OpenXmlFormats.Shared.ItemsChoiceType6 : Enum {
    public int value__;
    public static ItemsChoiceType6 t;
    [XmlEnumAttribute("http://schemas.openxmlformats.org/wordprocessingml/2006/main:annotationRef")]
public static ItemsChoiceType6 annotationRef;
    [XmlEnumAttribute("http://schemas.openxmlformats.org/wordprocessingml/2006/main:br")]
public static ItemsChoiceType6 br;
    [XmlEnumAttribute("http://schemas.openxmlformats.org/wordprocessingml/2006/main:commentReference")]
public static ItemsChoiceType6 commentReference;
    [XmlEnumAttribute("http://schemas.openxmlformats.org/wordprocessingml/2006/main:continuationSeparator")]
public static ItemsChoiceType6 continuationSeparator;
    [XmlEnumAttribute("http://schemas.openxmlformats.org/wordprocessingml/2006/main:cr")]
public static ItemsChoiceType6 cr;
    [XmlEnumAttribute("http://schemas.openxmlformats.org/wordprocessingml/2006/main:dayLong")]
public static ItemsChoiceType6 dayLong;
    [XmlEnumAttribute("http://schemas.openxmlformats.org/wordprocessingml/2006/main:dayShort")]
public static ItemsChoiceType6 dayShort;
    [XmlEnumAttribute("http://schemas.openxmlformats.org/wordprocessingml/2006/main:delInstrText")]
public static ItemsChoiceType6 delInstrText;
    [XmlEnumAttribute("http://schemas.openxmlformats.org/wordprocessingml/2006/main:delText")]
public static ItemsChoiceType6 delText;
    [XmlEnumAttribute("http://schemas.openxmlformats.org/wordprocessingml/2006/main:drawing")]
public static ItemsChoiceType6 drawing;
    [XmlEnumAttribute("http://schemas.openxmlformats.org/wordprocessingml/2006/main:endnoteRef")]
public static ItemsChoiceType6 endnoteRef;
    [XmlEnumAttribute("http://schemas.openxmlformats.org/wordprocessingml/2006/main:endnoteReference")]
public static ItemsChoiceType6 endnoteReference;
    [XmlEnumAttribute("http://schemas.openxmlformats.org/wordprocessingml/2006/main:fldChar")]
public static ItemsChoiceType6 fldChar;
    [XmlEnumAttribute("http://schemas.openxmlformats.org/wordprocessingml/2006/main:footnoteRef")]
public static ItemsChoiceType6 footnoteRef;
    [XmlEnumAttribute("http://schemas.openxmlformats.org/wordprocessingml/2006/main:footnoteReference")]
public static ItemsChoiceType6 footnoteReference;
    [XmlEnumAttribute("http://schemas.openxmlformats.org/wordprocessingml/2006/main:instrText")]
public static ItemsChoiceType6 instrText;
    [XmlEnumAttribute("http://schemas.openxmlformats.org/wordprocessingml/2006/main:lastRenderedPageBreak")]
public static ItemsChoiceType6 lastRenderedPageBreak;
    [XmlEnumAttribute("http://schemas.openxmlformats.org/wordprocessingml/2006/main:monthLong")]
public static ItemsChoiceType6 monthLong;
    [XmlEnumAttribute("http://schemas.openxmlformats.org/wordprocessingml/2006/main:monthShort")]
public static ItemsChoiceType6 monthShort;
    [XmlEnumAttribute("http://schemas.openxmlformats.org/wordprocessingml/2006/main:noBreakHyphen")]
public static ItemsChoiceType6 noBreakHyphen;
    [XmlEnumAttribute("http://schemas.openxmlformats.org/wordprocessingml/2006/main:object")]
public static ItemsChoiceType6 object;
    [XmlEnumAttribute("http://schemas.openxmlformats.org/wordprocessingml/2006/main:pgNum")]
public static ItemsChoiceType6 pgNum;
    [XmlEnumAttribute("http://schemas.openxmlformats.org/wordprocessingml/2006/main:pict")]
public static ItemsChoiceType6 pict;
    [XmlEnumAttribute("http://schemas.openxmlformats.org/wordprocessingml/2006/main:ptab")]
public static ItemsChoiceType6 ptab;
    [XmlEnumAttribute("http://schemas.openxmlformats.org/wordprocessingml/2006/main:ruby")]
public static ItemsChoiceType6 ruby;
    [XmlEnumAttribute("http://schemas.openxmlformats.org/wordprocessingml/2006/main:separator")]
public static ItemsChoiceType6 separator;
    [XmlEnumAttribute("http://schemas.openxmlformats.org/wordprocessingml/2006/main:softHyphen")]
public static ItemsChoiceType6 softHyphen;
    [XmlEnumAttribute("http://schemas.openxmlformats.org/wordprocessingml/2006/main:sym")]
public static ItemsChoiceType6 sym;
    [XmlEnumAttribute("http://schemas.openxmlformats.org/wordprocessingml/2006/main:t")]
public static ItemsChoiceType6 t1;
    [XmlEnumAttribute("http://schemas.openxmlformats.org/wordprocessingml/2006/main:tab")]
public static ItemsChoiceType6 tab;
    [XmlEnumAttribute("http://schemas.openxmlformats.org/wordprocessingml/2006/main:yearLong")]
public static ItemsChoiceType6 yearLong;
    [XmlEnumAttribute("http://schemas.openxmlformats.org/wordprocessingml/2006/main:yearShort")]
public static ItemsChoiceType6 yearShort;
}
[XmlTypeAttribute]
public enum NPOI.OpenXmlFormats.Shared.ItemsChoiceType7 : Enum {
    public int value__;
    public static ItemsChoiceType7 acc;
    public static ItemsChoiceType7 bar;
    public static ItemsChoiceType7 borderBox;
    public static ItemsChoiceType7 box;
    public static ItemsChoiceType7 d;
    public static ItemsChoiceType7 eqArr;
    public static ItemsChoiceType7 f;
    public static ItemsChoiceType7 func;
    public static ItemsChoiceType7 groupChr;
    public static ItemsChoiceType7 limLow;
    public static ItemsChoiceType7 limUpp;
    public static ItemsChoiceType7 m;
    public static ItemsChoiceType7 nary;
    public static ItemsChoiceType7 oMath;
    public static ItemsChoiceType7 oMathPara;
    public static ItemsChoiceType7 phant;
    public static ItemsChoiceType7 r;
    public static ItemsChoiceType7 rad;
    public static ItemsChoiceType7 sPre;
    public static ItemsChoiceType7 sSub;
    public static ItemsChoiceType7 sSubSup;
    public static ItemsChoiceType7 sSup;
    [XmlEnumAttribute("http://schemas.openxmlformats.org/wordprocessingml/2006/main:bookmarkEnd")]
public static ItemsChoiceType7 bookmarkEnd;
    [XmlEnumAttribute("http://schemas.openxmlformats.org/wordprocessingml/2006/main:bookmarkStart")]
public static ItemsChoiceType7 bookmarkStart;
    [XmlEnumAttribute("http://schemas.openxmlformats.org/wordprocessingml/2006/main:commentRangeEnd")]
public static ItemsChoiceType7 commentRangeEnd;
    [XmlEnumAttribute("http://schemas.openxmlformats.org/wordprocessingml/2006/main:commentRangeStart")]
public static ItemsChoiceType7 commentRangeStart;
    [XmlEnumAttribute("http://schemas.openxmlformats.org/wordprocessingml/2006/main:customXmlDelRangeEnd")]
public static ItemsChoiceType7 customXmlDelRangeEnd;
    [XmlEnumAttribute("http://schemas.openxmlformats.org/wordprocessingml/2006/main:customXmlDelRangeStart")]
public static ItemsChoiceType7 customXmlDelRangeStart;
    [XmlEnumAttribute("http://schemas.openxmlformats.org/wordprocessingml/2006/main:customXmlInsRangeEnd")]
public static ItemsChoiceType7 customXmlInsRangeEnd;
    [XmlEnumAttribute("http://schemas.openxmlformats.org/wordprocessingml/2006/main:customXmlInsRangeStart")]
public static ItemsChoiceType7 customXmlInsRangeStart;
    [XmlEnumAttribute("http://schemas.openxmlformats.org/wordprocessingml/2006/main:customXmlMoveFromRangeEnd")]
public static ItemsChoiceType7 customXmlMoveFromRangeEnd;
    [XmlEnumAttribute("http://schemas.openxmlformats.org/wordprocessingml/2006/main:customXmlMoveFromRangeStart")]
public static ItemsChoiceType7 customXmlMoveFromRangeStart;
    [XmlEnumAttribute("http://schemas.openxmlformats.org/wordprocessingml/2006/main:customXmlMoveToRangeEnd")]
public static ItemsChoiceType7 customXmlMoveToRangeEnd;
    [XmlEnumAttribute("http://schemas.openxmlformats.org/wordprocessingml/2006/main:customXmlMoveToRangeStart")]
public static ItemsChoiceType7 customXmlMoveToRangeStart;
    [XmlEnumAttribute("http://schemas.openxmlformats.org/wordprocessingml/2006/main:del")]
public static ItemsChoiceType7 del;
    [XmlEnumAttribute("http://schemas.openxmlformats.org/wordprocessingml/2006/main:ins")]
public static ItemsChoiceType7 ins;
    [XmlEnumAttribute("http://schemas.openxmlformats.org/wordprocessingml/2006/main:moveFrom")]
public static ItemsChoiceType7 moveFrom;
    [XmlEnumAttribute("http://schemas.openxmlformats.org/wordprocessingml/2006/main:moveFromRangeEnd")]
public static ItemsChoiceType7 moveFromRangeEnd;
    [XmlEnumAttribute("http://schemas.openxmlformats.org/wordprocessingml/2006/main:moveFromRangeStart")]
public static ItemsChoiceType7 moveFromRangeStart;
    [XmlEnumAttribute("http://schemas.openxmlformats.org/wordprocessingml/2006/main:moveTo")]
public static ItemsChoiceType7 moveTo;
    [XmlEnumAttribute("http://schemas.openxmlformats.org/wordprocessingml/2006/main:moveToRangeEnd")]
public static ItemsChoiceType7 moveToRangeEnd;
    [XmlEnumAttribute("http://schemas.openxmlformats.org/wordprocessingml/2006/main:moveToRangeStart")]
public static ItemsChoiceType7 moveToRangeStart;
    [XmlEnumAttribute("http://schemas.openxmlformats.org/wordprocessingml/2006/main:permEnd")]
public static ItemsChoiceType7 permEnd;
    [XmlEnumAttribute("http://schemas.openxmlformats.org/wordprocessingml/2006/main:permStart")]
public static ItemsChoiceType7 permStart;
    [XmlEnumAttribute("http://schemas.openxmlformats.org/wordprocessingml/2006/main:proofErr")]
public static ItemsChoiceType7 proofErr;
}
[XmlTypeAttribute]
public enum NPOI.OpenXmlFormats.Shared.ItemsChoiceType8 : Enum {
    public int value__;
    public static ItemsChoiceType8 acc;
    public static ItemsChoiceType8 bar;
    public static ItemsChoiceType8 borderBox;
    public static ItemsChoiceType8 box;
    public static ItemsChoiceType8 d;
    public static ItemsChoiceType8 eqArr;
    public static ItemsChoiceType8 f;
    public static ItemsChoiceType8 func;
    public static ItemsChoiceType8 groupChr;
    public static ItemsChoiceType8 limLow;
    public static ItemsChoiceType8 limUpp;
    public static ItemsChoiceType8 m;
    public static ItemsChoiceType8 nary;
    public static ItemsChoiceType8 oMath;
    public static ItemsChoiceType8 oMathPara;
    public static ItemsChoiceType8 phant;
    public static ItemsChoiceType8 r;
    public static ItemsChoiceType8 rad;
    public static ItemsChoiceType8 sPre;
    public static ItemsChoiceType8 sSub;
    public static ItemsChoiceType8 sSubSup;
    public static ItemsChoiceType8 sSup;
    [XmlEnumAttribute("http://schemas.openxmlformats.org/wordprocessingml/2006/main:bookmarkEnd")]
public static ItemsChoiceType8 bookmarkEnd;
    [XmlEnumAttribute("http://schemas.openxmlformats.org/wordprocessingml/2006/main:bookmarkStart")]
public static ItemsChoiceType8 bookmarkStart;
    [XmlEnumAttribute("http://schemas.openxmlformats.org/wordprocessingml/2006/main:commentRangeEnd")]
public static ItemsChoiceType8 commentRangeEnd;
    [XmlEnumAttribute("http://schemas.openxmlformats.org/wordprocessingml/2006/main:commentRangeStart")]
public static ItemsChoiceType8 commentRangeStart;
    [XmlEnumAttribute("http://schemas.openxmlformats.org/wordprocessingml/2006/main:customXmlDelRangeEnd")]
public static ItemsChoiceType8 customXmlDelRangeEnd;
    [XmlEnumAttribute("http://schemas.openxmlformats.org/wordprocessingml/2006/main:customXmlDelRangeStart")]
public static ItemsChoiceType8 customXmlDelRangeStart;
    [XmlEnumAttribute("http://schemas.openxmlformats.org/wordprocessingml/2006/main:customXmlInsRangeEnd")]
public static ItemsChoiceType8 customXmlInsRangeEnd;
    [XmlEnumAttribute("http://schemas.openxmlformats.org/wordprocessingml/2006/main:customXmlInsRangeStart")]
public static ItemsChoiceType8 customXmlInsRangeStart;
    [XmlEnumAttribute("http://schemas.openxmlformats.org/wordprocessingml/2006/main:customXmlMoveFromRangeEnd")]
public static ItemsChoiceType8 customXmlMoveFromRangeEnd;
    [XmlEnumAttribute("http://schemas.openxmlformats.org/wordprocessingml/2006/main:customXmlMoveFromRangeStart")]
public static ItemsChoiceType8 customXmlMoveFromRangeStart;
    [XmlEnumAttribute("http://schemas.openxmlformats.org/wordprocessingml/2006/main:customXmlMoveToRangeEnd")]
public static ItemsChoiceType8 customXmlMoveToRangeEnd;
    [XmlEnumAttribute("http://schemas.openxmlformats.org/wordprocessingml/2006/main:customXmlMoveToRangeStart")]
public static ItemsChoiceType8 customXmlMoveToRangeStart;
    [XmlEnumAttribute("http://schemas.openxmlformats.org/wordprocessingml/2006/main:del")]
public static ItemsChoiceType8 del;
    [XmlEnumAttribute("http://schemas.openxmlformats.org/wordprocessingml/2006/main:ins")]
public static ItemsChoiceType8 ins;
    [XmlEnumAttribute("http://schemas.openxmlformats.org/wordprocessingml/2006/main:moveFrom")]
public static ItemsChoiceType8 moveFrom;
    [XmlEnumAttribute("http://schemas.openxmlformats.org/wordprocessingml/2006/main:moveFromRangeEnd")]
public static ItemsChoiceType8 moveFromRangeEnd;
    [XmlEnumAttribute("http://schemas.openxmlformats.org/wordprocessingml/2006/main:moveFromRangeStart")]
public static ItemsChoiceType8 moveFromRangeStart;
    [XmlEnumAttribute("http://schemas.openxmlformats.org/wordprocessingml/2006/main:moveTo")]
public static ItemsChoiceType8 moveTo;
    [XmlEnumAttribute("http://schemas.openxmlformats.org/wordprocessingml/2006/main:moveToRangeEnd")]
public static ItemsChoiceType8 moveToRangeEnd;
    [XmlEnumAttribute("http://schemas.openxmlformats.org/wordprocessingml/2006/main:moveToRangeStart")]
public static ItemsChoiceType8 moveToRangeStart;
    [XmlEnumAttribute("http://schemas.openxmlformats.org/wordprocessingml/2006/main:permEnd")]
public static ItemsChoiceType8 permEnd;
    [XmlEnumAttribute("http://schemas.openxmlformats.org/wordprocessingml/2006/main:permStart")]
public static ItemsChoiceType8 permStart;
    [XmlEnumAttribute("http://schemas.openxmlformats.org/wordprocessingml/2006/main:proofErr")]
public static ItemsChoiceType8 proofErr;
}
[XmlTypeAttribute]
public enum NPOI.OpenXmlFormats.Shared.ST_BreakBin : Enum {
    public int value__;
    public static ST_BreakBin NONE;
    public static ST_BreakBin before;
    public static ST_BreakBin after;
    public static ST_BreakBin repeat;
}
[XmlTypeAttribute]
public enum NPOI.OpenXmlFormats.Shared.ST_BreakBinSub : Enum {
    public int value__;
    [DescriptionAttribute("--")]
public static ST_BreakBinSub Item;
    [DescriptionAttribute("-+")]
public static ST_BreakBinSub Item1;
    [DescriptionAttribute("+-")]
public static ST_BreakBinSub Item2;
}
[XmlTypeAttribute]
public enum NPOI.OpenXmlFormats.Shared.ST_FType : Enum {
    public int value__;
    public static ST_FType bar;
    public static ST_FType skw;
    public static ST_FType lin;
    public static ST_FType noBar;
}
[XmlTypeAttribute]
public enum NPOI.OpenXmlFormats.Shared.ST_Jc : Enum {
    public int value__;
    public static ST_Jc left;
    public static ST_Jc right;
    public static ST_Jc center;
    public static ST_Jc centerGroup;
}
[XmlTypeAttribute]
public enum NPOI.OpenXmlFormats.Shared.ST_LimLoc : Enum {
    public int value__;
    public static ST_LimLoc undOvr;
    public static ST_LimLoc subSup;
}
[XmlTypeAttribute]
public enum NPOI.OpenXmlFormats.Shared.ST_OnOff : Enum {
    public int value__;
    [XmlEnumAttribute("0")]
public static ST_OnOff Value0;
    [XmlEnumAttribute("1")]
public static ST_OnOff Value1;
    public static ST_OnOff on;
    public static ST_OnOff off;
}
[XmlTypeAttribute]
public enum NPOI.OpenXmlFormats.Shared.ST_Script : Enum {
    public int value__;
    public static ST_Script roman;
    public static ST_Script script;
    public static ST_Script fraktur;
    [XmlEnumAttribute("double-struck")]
public static ST_Script doublestruck;
    [XmlEnumAttribute("sans-serif")]
public static ST_Script sansserif;
    public static ST_Script monospace;
}
[XmlTypeAttribute]
public enum NPOI.OpenXmlFormats.Shared.ST_Shp : Enum {
    public int value__;
    public static ST_Shp centered;
    public static ST_Shp match;
}
[XmlTypeAttribute]
public enum NPOI.OpenXmlFormats.Shared.ST_Style : Enum {
    public int value__;
    public static ST_Style p;
    public static ST_Style b;
    public static ST_Style i;
    public static ST_Style bi;
}
[XmlTypeAttribute]
public enum NPOI.OpenXmlFormats.Shared.ST_TopBot : Enum {
    public int value__;
    public static ST_TopBot top;
    public static ST_TopBot bot;
}
[XmlTypeAttribute]
public enum NPOI.OpenXmlFormats.Shared.ST_XAlign : Enum {
    public int value__;
    public static ST_XAlign left;
    public static ST_XAlign center;
    public static ST_XAlign right;
}
[XmlTypeAttribute]
public enum NPOI.OpenXmlFormats.Shared.ST_YAlign : Enum {
    public int value__;
    public static ST_YAlign top;
    public static ST_YAlign center;
    public static ST_YAlign bot;
}
public class NPOI.OpenXmlFormats.Spreadsheet.CalcChainDocument : object {
    private CT_CalcChain calcChain;
    internal CalcChainDocument(CT_CalcChain calcChain);
    public CT_CalcChain GetCalcChain();
    public void SetCalcChain(CT_CalcChain calcchain);
    public static CalcChainDocument Parse(XmlDocument xmlDoc, XmlNamespaceManager NameSpaceManager);
    public void Save(Stream stream);
}
public class NPOI.OpenXmlFormats.Spreadsheet.ChartsheetDocument : object {
    private CT_Chartsheet sheet;
    public ChartsheetDocument(CT_Chartsheet sheet);
    public static ChartsheetDocument Parse(XmlDocument xmldoc, XmlNamespaceManager nsmgr);
    public CT_Chartsheet GetChartsheet();
    public void SetChartsheet(CT_Chartsheet sheet);
    public void Save(Stream stream);
}
public class NPOI.OpenXmlFormats.Spreadsheet.CommentsDocument : object {
    private CT_Comments comments;
    public CommentsDocument(CT_Comments comments);
    public static CommentsDocument Parse(XmlDocument xmlDoc, XmlNamespaceManager namespaceManager);
    public CT_Comments GetComments();
    public void SetComments(CT_Comments comments);
    public void Save(Stream stream);
}
public class NPOI.OpenXmlFormats.Spreadsheet.CT_Authors : object {
    private List`1<string> authorField;
    [XmlElementAttribute("author")]
public List`1<string> author { get; public set; }
    public int SizeOfAuthorArray();
    public string GetAuthorArray(int index);
    public void Insert(int index, string author);
    public void AddAuthor(string name);
    public List`1<string> get_author();
    public void set_author(List`1<string> value);
    public static CT_Authors Parse(XmlNode node, XmlNamespaceManager namespaceManager);
    internal void Write(StreamWriter sw, string nodeName);
}
public class NPOI.OpenXmlFormats.Spreadsheet.CT_AutoFilter : object {
    private List`1<CT_FilterColumn> filterColumnField;
    private CT_SortState sortStateField;
    private CT_ExtensionList extLstField;
    private string refField;
    [XmlElementAttribute]
public List`1<CT_FilterColumn> filterColumn { get; public set; }
    [XmlElementAttribute]
public CT_SortState sortState { get; public set; }
    [XmlElementAttribute]
public CT_ExtensionList extLst { get; public set; }
    [XmlAttributeAttribute]
public string ref { get; public set; }
    public static CT_AutoFilter Parse(XmlNode node, XmlNamespaceManager namespaceManager);
    internal void Write(StreamWriter sw, string nodeName);
    public List`1<CT_FilterColumn> get_filterColumn();
    public void set_filterColumn(List`1<CT_FilterColumn> value);
    public CT_SortState get_sortState();
    public void set_sortState(CT_SortState value);
    public CT_ExtensionList get_extLst();
    public void set_extLst(CT_ExtensionList value);
    public string get_ref();
    public void set_ref(string value);
}
[XmlTypeAttribute]
[XmlRootAttribute]
public class NPOI.OpenXmlFormats.Spreadsheet.CT_AutoSortScope : object {
    private CT_PivotArea pivotAreaField;
    [XmlElementAttribute]
public CT_PivotArea pivotArea { get; public set; }
    public static CT_AutoSortScope Parse(XmlNode node, XmlNamespaceManager namespaceManager);
    internal void Write(StreamWriter sw, string nodeName);
    public CT_PivotArea get_pivotArea();
    public void set_pivotArea(CT_PivotArea value);
}
[XmlTypeAttribute]
public class NPOI.OpenXmlFormats.Spreadsheet.CT_BookView : object {
    private CT_ExtensionList extLstField;
    private ST_Visibility visibilityField;
    private bool minimizedField;
    private bool showHorizontalScrollField;
    private bool showVerticalScrollField;
    private bool showSheetTabsField;
    private int xWindowField;
    private bool xWindowFieldSpecified;
    private int yWindowField;
    private bool yWindowFieldSpecified;
    private UInt32 windowWidthField;
    private bool windowWidthFieldSpecified;
    private UInt32 windowHeightField;
    private bool windowHeightFieldSpecified;
    private UInt32 tabRatioField;
    private UInt32 firstSheetField;
    private UInt32 activeTabField;
    private bool autoFilterDateGroupingField;
    [XmlElementAttribute]
public CT_ExtensionList extLst { get; public set; }
    [XmlIgnoreAttribute]
public bool extLstSpecified { get; }
    [DefaultValueAttribute("Mono.Cecil.CustomAttributeArgument")]
[XmlAttributeAttribute]
public ST_Visibility visibility { get; public set; }
    [DefaultValueAttribute("False")]
[XmlAttributeAttribute]
public bool minimized { get; public set; }
    [DefaultValueAttribute("True")]
[XmlAttributeAttribute]
public bool showHorizontalScroll { get; public set; }
    [DefaultValueAttribute("True")]
[XmlAttributeAttribute]
public bool showVerticalScroll { get; public set; }
    [DefaultValueAttribute("True")]
[XmlAttributeAttribute]
public bool showSheetTabs { get; public set; }
    [XmlAttributeAttribute]
public int xWindow { get; public set; }
    [XmlIgnoreAttribute]
public bool xWindowSpecified { get; public set; }
    [XmlAttributeAttribute]
public int yWindow { get; public set; }
    [XmlIgnoreAttribute]
public bool yWindowSpecified { get; public set; }
    [XmlAttributeAttribute]
public UInt32 windowWidth { get; public set; }
    [XmlIgnoreAttribute]
public bool windowWidthSpecified { get; public set; }
    [XmlAttributeAttribute]
public UInt32 windowHeight { get; public set; }
    [XmlIgnoreAttribute]
public bool windowHeightSpecified { get; public set; }
    [DefaultValueAttribute("System.UInt32", "600")]
[XmlAttributeAttribute]
public UInt32 tabRatio { get; public set; }
    [DefaultValueAttribute("System.UInt32", "0")]
[XmlAttributeAttribute]
public UInt32 firstSheet { get; public set; }
    [DefaultValueAttribute("System.UInt32", "0")]
[XmlAttributeAttribute]
public UInt32 activeTab { get; public set; }
    [DefaultValueAttribute("True")]
[XmlAttributeAttribute]
public bool autoFilterDateGrouping { get; public set; }
    public static CT_BookView Parse(XmlNode node, XmlNamespaceManager namespaceManager);
    internal void Write(StreamWriter sw, string nodeName);
    public CT_ExtensionList get_extLst();
    public void set_extLst(CT_ExtensionList value);
    public bool get_extLstSpecified();
    public ST_Visibility get_visibility();
    public void set_visibility(ST_Visibility value);
    public bool get_minimized();
    public void set_minimized(bool value);
    public bool get_showHorizontalScroll();
    public void set_showHorizontalScroll(bool value);
    public bool get_showVerticalScroll();
    public void set_showVerticalScroll(bool value);
    public bool get_showSheetTabs();
    public void set_showSheetTabs(bool value);
    public int get_xWindow();
    public void set_xWindow(int value);
    public bool get_xWindowSpecified();
    public void set_xWindowSpecified(bool value);
    public int get_yWindow();
    public void set_yWindow(int value);
    public bool get_yWindowSpecified();
    public void set_yWindowSpecified(bool value);
    public UInt32 get_windowWidth();
    public void set_windowWidth(UInt32 value);
    public bool get_windowWidthSpecified();
    public void set_windowWidthSpecified(bool value);
    public UInt32 get_windowHeight();
    public void set_windowHeight(UInt32 value);
    public bool get_windowHeightSpecified();
    public void set_windowHeightSpecified(bool value);
    public UInt32 get_tabRatio();
    public void set_tabRatio(UInt32 value);
    public UInt32 get_firstSheet();
    public void set_firstSheet(UInt32 value);
    public UInt32 get_activeTab();
    public void set_activeTab(UInt32 value);
    public bool get_autoFilterDateGrouping();
    public void set_autoFilterDateGrouping(bool value);
}
[DesignerCategoryAttribute("code")]
[XmlTypeAttribute]
public class NPOI.OpenXmlFormats.Spreadsheet.CT_BookViews : object {
    private List`1<CT_BookView> workbookViewField;
    [XmlElementAttribute("workbookView")]
public List`1<CT_BookView> workbookView { get; public set; }
    public static CT_BookViews Parse(XmlNode node, XmlNamespaceManager namespaceManager);
    internal void Write(StreamWriter sw, string nodeName);
    public CT_BookView AddNewWorkbookView();
    public CT_BookView GetWorkbookViewArray(int index);
    public List`1<CT_BookView> get_workbookView();
    public void set_workbookView(List`1<CT_BookView> value);
}
[XmlTypeAttribute]
[XmlRootAttribute]
public class NPOI.OpenXmlFormats.Spreadsheet.CT_Boolean : object {
    private List`1<CT_X> xField;
    private bool vField;
    private bool uField;
    private bool uFieldSpecified;
    private bool fField;
    private bool fFieldSpecified;
    private string cField;
    private UInt32 cpField;
    private bool cpFieldSpecified;
    [XmlElementAttribute("x")]
public List`1<CT_X> x { get; public set; }
    [XmlAttributeAttribute]
public bool v { get; public set; }
    [XmlAttributeAttribute]
public bool u { get; public set; }
    [XmlIgnoreAttribute]
public bool uSpecified { get; public set; }
    [XmlAttributeAttribute]
public bool f { get; public set; }
    [XmlIgnoreAttribute]
public bool fSpecified { get; public set; }
    [XmlAttributeAttribute]
public string c { get; public set; }
    [XmlAttributeAttribute]
public UInt32 cp { get; public set; }
    [XmlIgnoreAttribute]
public bool cpSpecified { get; public set; }
    public static CT_Boolean Parse(XmlNode node, XmlNamespaceManager namespaceManager);
    internal void Write(StreamWriter sw, string nodeName);
    public List`1<CT_X> get_x();
    public void set_x(List`1<CT_X> value);
    public bool get_v();
    public void set_v(bool value);
    public bool get_u();
    public void set_u(bool value);
    public bool get_uSpecified();
    public void set_uSpecified(bool value);
    public bool get_f();
    public void set_f(bool value);
    public bool get_fSpecified();
    public void set_fSpecified(bool value);
    public string get_c();
    public void set_c(string value);
    public UInt32 get_cp();
    public void set_cp(UInt32 value);
    public bool get_cpSpecified();
    public void set_cpSpecified(bool value);
}
[XmlTypeAttribute]
public class NPOI.OpenXmlFormats.Spreadsheet.CT_BooleanProperty : object {
    private bool valField;
    [DefaultValueAttribute("True")]
[XmlAttributeAttribute]
public bool val { get; public set; }
    public static CT_BooleanProperty Parse(XmlNode node, XmlNamespaceManager namespaceManager);
    internal void Write(StreamWriter sw, string nodeName);
    public bool get_val();
    public void set_val(bool value);
}
[XmlTypeAttribute]
public class NPOI.OpenXmlFormats.Spreadsheet.CT_Border : object {
    private CT_BorderPr leftField;
    private CT_BorderPr rightField;
    private CT_BorderPr topField;
    private CT_BorderPr bottomField;
    private CT_BorderPr diagonalField;
    private CT_BorderPr verticalField;
    private CT_BorderPr horizontalField;
    private bool diagonalUpField;
    private bool diagonalUpFieldSpecified;
    private bool diagonalDownField;
    private bool diagonalDownFieldSpecified;
    private bool outlineField;
    [XmlElementAttribute]
public CT_BorderPr left { get; public set; }
    [XmlElementAttribute]
public CT_BorderPr right { get; public set; }
    [XmlElementAttribute]
public CT_BorderPr top { get; public set; }
    [XmlElementAttribute]
public CT_BorderPr bottom { get; public set; }
    [XmlElementAttribute]
public CT_BorderPr diagonal { get; public set; }
    [XmlElementAttribute]
public CT_BorderPr vertical { get; public set; }
    [XmlElementAttribute]
public CT_BorderPr horizontal { get; public set; }
    [XmlAttributeAttribute]
public bool diagonalUp { get; public set; }
    [XmlIgnoreAttribute]
public bool diagonalUpSpecified { get; public set; }
    [XmlAttributeAttribute]
public bool diagonalDown { get; public set; }
    [XmlIgnoreAttribute]
public bool diagonalDownSpecified { get; public set; }
    [XmlAttributeAttribute]
[DefaultValueAttribute("False")]
public bool outline { get; public set; }
    public virtual string ToString();
    public static CT_Border Parse(XmlNode node, XmlNamespaceManager namespaceManager);
    internal void Write(StreamWriter sw, string nodeName);
    public CT_Border Copy();
    public CT_BorderPr AddNewDiagonal();
    public bool IsSetDiagonal();
    public void unsetDiagonal();
    public void unsetRight();
    public void unsetLeft();
    public void unsetTop();
    public void UnsetBottom();
    public bool IsSetBottom();
    public bool IsSetLeft();
    public bool IsSetRight();
    public static CT_Border Parse(string p);
    public bool IsSetTop();
    public bool IsSetBorder();
    public CT_BorderPr AddNewTop();
    public CT_BorderPr AddNewRight();
    public CT_BorderPr AddNewLeft();
    public CT_BorderPr AddNewBottom();
    public CT_BorderPr get_left();
    public void set_left(CT_BorderPr value);
    public CT_BorderPr get_right();
    public void set_right(CT_BorderPr value);
    public CT_BorderPr get_top();
    public void set_top(CT_BorderPr value);
    public CT_BorderPr get_bottom();
    public void set_bottom(CT_BorderPr value);
    public CT_BorderPr get_diagonal();
    public void set_diagonal(CT_BorderPr value);
    public CT_BorderPr get_vertical();
    public void set_vertical(CT_BorderPr value);
    public CT_BorderPr get_horizontal();
    public void set_horizontal(CT_BorderPr value);
    public bool get_diagonalUp();
    public void set_diagonalUp(bool value);
    public bool get_diagonalUpSpecified();
    public void set_diagonalUpSpecified(bool value);
    public bool get_diagonalDown();
    public void set_diagonalDown(bool value);
    public bool get_diagonalDownSpecified();
    public void set_diagonalDownSpecified(bool value);
    public bool get_outline();
    public void set_outline(bool value);
}
[XmlTypeAttribute]
public class NPOI.OpenXmlFormats.Spreadsheet.CT_BorderPr : object {
    private CT_Color colorField;
    private ST_BorderStyle styleField;
    [XmlElementAttribute]
public CT_Color color { get; public set; }
    [XmlAttributeAttribute]
[DefaultValueAttribute("Mono.Cecil.CustomAttributeArgument")]
public ST_BorderStyle style { get; public set; }
    public static CT_BorderPr Parse(XmlNode node, XmlNamespaceManager namespaceManager);
    internal void Write(StreamWriter sw, string nodeName);
    public void SetColor(CT_Color color);
    public bool IsSetColor();
    public void UnsetColor();
    public bool IsSetStyle();
    public CT_Color get_color();
    public void set_color(CT_Color value);
    public ST_BorderStyle get_style();
    public void set_style(ST_BorderStyle value);
    public CT_BorderPr Copy();
}
[XmlTypeAttribute]
public class NPOI.OpenXmlFormats.Spreadsheet.CT_Borders : object {
    private List`1<CT_Border> borderField;
    private UInt32 countField;
    private bool countFieldSpecified;
    [XmlElementAttribute]
public List`1<CT_Border> border { get; public set; }
    [XmlAttributeAttribute]
public UInt32 count { get; public set; }
    [XmlIgnoreAttribute]
public bool countSpecified { get; public set; }
    public static CT_Borders Parse(XmlNode node, XmlNamespaceManager namespaceManager);
    internal void Write(StreamWriter sw, string nodeName);
    public CT_Border AddNewBorder();
    public List`1<CT_Border> get_border();
    public void set_border(List`1<CT_Border> value);
    public void SetBorderArray(List`1<CT_Border> array);
    public UInt32 get_count();
    public void set_count(UInt32 value);
    public bool get_countSpecified();
    public void set_countSpecified(bool value);
}
[XmlTypeAttribute]
public class NPOI.OpenXmlFormats.Spreadsheet.CT_Break : object {
    private UInt32 idField;
    private UInt32 minField;
    private UInt32 maxField;
    private bool manField;
    private bool ptField;
    [DefaultValueAttribute("System.UInt32", "0")]
public UInt32 id { get; public set; }
    [DefaultValueAttribute("System.UInt32", "0")]
public UInt32 min { get; public set; }
    [DefaultValueAttribute("System.UInt32", "0")]
public UInt32 max { get; public set; }
    [DefaultValueAttribute("False")]
public bool man { get; public set; }
    [DefaultValueAttribute("False")]
public bool pt { get; public set; }
    public UInt32 get_id();
    public void set_id(UInt32 value);
    public UInt32 get_min();
    public void set_min(UInt32 value);
    public UInt32 get_max();
    public void set_max(UInt32 value);
    public bool get_man();
    public void set_man(bool value);
    public bool get_pt();
    public void set_pt(bool value);
    public static CT_Break Parse(XmlNode node, XmlNamespaceManager namespaceManager);
    internal void Write(StreamWriter sw, string nodeName);
}
[XmlTypeAttribute]
[XmlRootAttribute]
public class NPOI.OpenXmlFormats.Spreadsheet.CT_CacheField : object {
    private CT_SharedItems sharedItemsField;
    private CT_FieldGroup fieldGroupField;
    private List`1<CT_X> mpMapField;
    private CT_ExtensionList extLstField;
    private string nameField;
    private string captionField;
    private string propertyNameField;
    private bool serverFieldField;
    private bool uniqueListField;
    private UInt32 numFmtIdField;
    private bool numFmtIdFieldSpecified;
    private string formulaField;
    private int sqlTypeField;
    private int hierarchyField;
    private UInt32 levelField;
    private bool databaseFieldField;
    private UInt32 mappingCountField;
    private bool mappingCountFieldSpecified;
    private bool memberPropertyFieldField;
    [XmlElementAttribute]
public CT_SharedItems sharedItems { get; public set; }
    [XmlElementAttribute]
public CT_FieldGroup fieldGroup { get; public set; }
    [XmlElementAttribute("mpMap")]
public List`1<CT_X> mpMap { get; public set; }
    [XmlElementAttribute]
public CT_ExtensionList extLst { get; public set; }
    [XmlAttributeAttribute]
public string name { get; public set; }
    [XmlAttributeAttribute]
public string caption { get; public set; }
    [XmlAttributeAttribute]
public string propertyName { get; public set; }
    [XmlAttributeAttribute]
[DefaultValueAttribute("False")]
public bool serverField { get; public set; }
    [XmlAttributeAttribute]
[DefaultValueAttribute("True")]
public bool uniqueList { get; public set; }
    [XmlAttributeAttribute]
public UInt32 numFmtId { get; public set; }
    [XmlIgnoreAttribute]
public bool numFmtIdSpecified { get; public set; }
    [XmlAttributeAttribute]
public string formula { get; public set; }
    [XmlAttributeAttribute]
[DefaultValueAttribute("0")]
public int sqlType { get; public set; }
    [XmlAttributeAttribute]
[DefaultValueAttribute("0")]
public int hierarchy { get; public set; }
    [XmlAttributeAttribute]
[DefaultValueAttribute("System.UInt32", "0")]
public UInt32 level { get; public set; }
    [XmlAttributeAttribute]
[DefaultValueAttribute("True")]
public bool databaseField { get; public set; }
    [XmlAttributeAttribute]
public UInt32 mappingCount { get; public set; }
    [XmlIgnoreAttribute]
public bool mappingCountSpecified { get; public set; }
    [XmlAttributeAttribute]
[DefaultValueAttribute("False")]
public bool memberPropertyField { get; public set; }
    public static CT_CacheField Parse(XmlNode node, XmlNamespaceManager namespaceManager);
    internal void Write(StreamWriter sw, string nodeName);
    public CT_SharedItems get_sharedItems();
    public void set_sharedItems(CT_SharedItems value);
    public CT_FieldGroup get_fieldGroup();
    public void set_fieldGroup(CT_FieldGroup value);
    public List`1<CT_X> get_mpMap();
    public void set_mpMap(List`1<CT_X> value);
    public CT_ExtensionList get_extLst();
    public void set_extLst(CT_ExtensionList value);
    public string get_name();
    public void set_name(string value);
    public string get_caption();
    public void set_caption(string value);
    public string get_propertyName();
    public void set_propertyName(string value);
    public bool get_serverField();
    public void set_serverField(bool value);
    public bool get_uniqueList();
    public void set_uniqueList(bool value);
    public UInt32 get_numFmtId();
    public void set_numFmtId(UInt32 value);
    public bool get_numFmtIdSpecified();
    public void set_numFmtIdSpecified(bool value);
    public string get_formula();
    public void set_formula(string value);
    public int get_sqlType();
    public void set_sqlType(int value);
    public int get_hierarchy();
    public void set_hierarchy(int value);
    public UInt32 get_level();
    public void set_level(UInt32 value);
    public bool get_databaseField();
    public void set_databaseField(bool value);
    public UInt32 get_mappingCount();
    public void set_mappingCount(UInt32 value);
    public bool get_mappingCountSpecified();
    public void set_mappingCountSpecified(bool value);
    public bool get_memberPropertyField();
    public void set_memberPropertyField(bool value);
    public CT_SharedItems AddNewSharedItems();
}
[XmlTypeAttribute]
[XmlRootAttribute]
public class NPOI.OpenXmlFormats.Spreadsheet.CT_CacheFields : object {
    private List`1<CT_CacheField> cacheFieldField;
    private UInt32 countField;
    private bool countFieldSpecified;
    [XmlElementAttribute("cacheField")]
public List`1<CT_CacheField> cacheField { get; public set; }
    [XmlAttributeAttribute]
public UInt32 count { get; public set; }
    [XmlIgnoreAttribute]
public bool countSpecified { get; public set; }
    public static CT_CacheFields Parse(XmlNode node, XmlNamespaceManager namespaceManager);
    internal void Write(StreamWriter sw, string nodeName);
    public List`1<CT_CacheField> get_cacheField();
    public void set_cacheField(List`1<CT_CacheField> value);
    public UInt32 get_count();
    public void set_count(UInt32 value);
    public bool get_countSpecified();
    public void set_countSpecified(bool value);
    public CT_CacheField AddNewCacheField();
    public UInt32 SizeOfCacheFieldArray();
}
[XmlTypeAttribute]
[XmlRootAttribute]
public class NPOI.OpenXmlFormats.Spreadsheet.CT_CacheHierarchies : object {
    private List`1<CT_CacheHierarchy> cacheHierarchyField;
    private UInt32 countField;
    private bool countFieldSpecified;
    [XmlElementAttribute("cacheHierarchy")]
public List`1<CT_CacheHierarchy> cacheHierarchy { get; public set; }
    [XmlAttributeAttribute]
public UInt32 count { get; public set; }
    [XmlIgnoreAttribute]
public bool countSpecified { get; public set; }
    public static CT_CacheHierarchies Parse(XmlNode node, XmlNamespaceManager namespaceManager);
    internal void Write(StreamWriter sw, string nodeName);
    public List`1<CT_CacheHierarchy> get_cacheHierarchy();
    public void set_cacheHierarchy(List`1<CT_CacheHierarchy> value);
    public UInt32 get_count();
    public void set_count(UInt32 value);
    public bool get_countSpecified();
    public void set_countSpecified(bool value);
}
[XmlTypeAttribute]
[XmlRootAttribute]
public class NPOI.OpenXmlFormats.Spreadsheet.CT_CacheHierarchy : object {
    private CT_FieldsUsage fieldsUsageField;
    private CT_GroupLevels groupLevelsField;
    private CT_ExtensionList extLstField;
    private string uniqueNameField;
    private string captionField;
    private bool measureField;
    private bool setField;
    private UInt32 parentSetField;
    private bool parentSetFieldSpecified;
    private int iconSetField;
    private bool attributeField;
    private bool timeField;
    private bool keyAttributeField;
    private string defaultMemberUniqueNameField;
    private string allUniqueNameField;
    private string allCaptionField;
    private string dimensionUniqueNameField;
    private string displayFolderField;
    private string measureGroupField;
    private bool measuresField;
    private UInt32 countField;
    private bool oneFieldField;
    private ushort memberValueDatatypeField;
    private bool memberValueDatatypeFieldSpecified;
    private bool unbalancedField;
    private bool unbalancedFieldSpecified;
    private bool unbalancedGroupField;
    private bool unbalancedGroupFieldSpecified;
    private bool hiddenField;
    [XmlElementAttribute]
public CT_FieldsUsage fieldsUsage { get; public set; }
    [XmlElementAttribute]
public CT_GroupLevels groupLevels { get; public set; }
    [XmlElementAttribute]
public CT_ExtensionList extLst { get; public set; }
    [XmlAttributeAttribute]
public string uniqueName { get; public set; }
    [XmlAttributeAttribute]
public string caption { get; public set; }
    [XmlAttributeAttribute]
[DefaultValueAttribute("False")]
public bool measure { get; public set; }
    [XmlAttributeAttribute]
[DefaultValueAttribute("False")]
public bool set { get; public set; }
    [XmlAttributeAttribute]
public UInt32 parentSet { get; public set; }
    [XmlIgnoreAttribute]
public bool parentSetSpecified { get; public set; }
    [XmlAttributeAttribute]
[DefaultValueAttribute("0")]
public int iconSet { get; public set; }
    [XmlAttributeAttribute]
[DefaultValueAttribute("False")]
public bool attribute { get; public set; }
    [XmlAttributeAttribute]
[DefaultValueAttribute("False")]
public bool time { get; public set; }
    [XmlAttributeAttribute]
[DefaultValueAttribute("False")]
public bool keyAttribute { get; public set; }
    [XmlAttributeAttribute]
public string defaultMemberUniqueName { get; public set; }
    [XmlAttributeAttribute]
public string allUniqueName { get; public set; }
    [XmlAttributeAttribute]
public string allCaption { get; public set; }
    [XmlAttributeAttribute]
public string dimensionUniqueName { get; public set; }
    [XmlAttributeAttribute]
public string displayFolder { get; public set; }
    [XmlAttributeAttribute]
public string measureGroup { get; public set; }
    [XmlAttributeAttribute]
[DefaultValueAttribute("False")]
public bool measures { get; public set; }
    [XmlAttributeAttribute]
public UInt32 count { get; public set; }
    [XmlAttributeAttribute]
[DefaultValueAttribute("False")]
public bool oneField { get; public set; }
    [XmlAttributeAttribute]
public ushort memberValueDatatype { get; public set; }
    [XmlIgnoreAttribute]
public bool memberValueDatatypeSpecified { get; public set; }
    [XmlAttributeAttribute]
public bool unbalanced { get; public set; }
    [XmlIgnoreAttribute]
public bool unbalancedSpecified { get; public set; }
    [XmlAttributeAttribute]
public bool unbalancedGroup { get; public set; }
    [XmlIgnoreAttribute]
public bool unbalancedGroupSpecified { get; public set; }
    [XmlAttributeAttribute]
[DefaultValueAttribute("False")]
public bool hidden { get; public set; }
    public static CT_CacheHierarchy Parse(XmlNode node, XmlNamespaceManager namespaceManager);
    internal void Write(StreamWriter sw, string nodeName);
    public CT_FieldsUsage get_fieldsUsage();
    public void set_fieldsUsage(CT_FieldsUsage value);
    public CT_GroupLevels get_groupLevels();
    public void set_groupLevels(CT_GroupLevels value);
    public CT_ExtensionList get_extLst();
    public void set_extLst(CT_ExtensionList value);
    public string get_uniqueName();
    public void set_uniqueName(string value);
    public string get_caption();
    public void set_caption(string value);
    public bool get_measure();
    public void set_measure(bool value);
    public bool get_set();
    public void set_set(bool value);
    public UInt32 get_parentSet();
    public void set_parentSet(UInt32 value);
    public bool get_parentSetSpecified();
    public void set_parentSetSpecified(bool value);
    public int get_iconSet();
    public void set_iconSet(int value);
    public bool get_attribute();
    public void set_attribute(bool value);
    public bool get_time();
    public void set_time(bool value);
    public bool get_keyAttribute();
    public void set_keyAttribute(bool value);
    public string get_defaultMemberUniqueName();
    public void set_defaultMemberUniqueName(string value);
    public string get_allUniqueName();
    public void set_allUniqueName(string value);
    public string get_allCaption();
    public void set_allCaption(string value);
    public string get_dimensionUniqueName();
    public void set_dimensionUniqueName(string value);
    public string get_displayFolder();
    public void set_displayFolder(string value);
    public string get_measureGroup();
    public void set_measureGroup(string value);
    public bool get_measures();
    public void set_measures(bool value);
    public UInt32 get_count();
    public void set_count(UInt32 value);
    public bool get_oneField();
    public void set_oneField(bool value);
    public ushort get_memberValueDatatype();
    public void set_memberValueDatatype(ushort value);
    public bool get_memberValueDatatypeSpecified();
    public void set_memberValueDatatypeSpecified(bool value);
    public bool get_unbalanced();
    public void set_unbalanced(bool value);
    public bool get_unbalancedSpecified();
    public void set_unbalancedSpecified(bool value);
    public bool get_unbalancedGroup();
    public void set_unbalancedGroup(bool value);
    public bool get_unbalancedGroupSpecified();
    public void set_unbalancedGroupSpecified(bool value);
    public bool get_hidden();
    public void set_hidden(bool value);
}
[XmlTypeAttribute]
[XmlRootAttribute]
public class NPOI.OpenXmlFormats.Spreadsheet.CT_CacheSource : object {
    private object itemField;
    private ST_SourceType typeField;
    private UInt32 connectionIdField;
    private CT_WorksheetSource worksheetSourceField;
    private CT_ExtensionList extLstField;
    private CT_Consolidation consolidationField;
    [XmlElementAttribute("consolidation", "NPOI.OpenXmlFormats.Spreadsheet.CT_Consolidation")]
[XmlElementAttribute("extLst", "NPOI.OpenXmlFormats.Spreadsheet.CT_ExtensionList")]
[XmlElementAttribute("worksheetSource", "NPOI.OpenXmlFormats.Spreadsheet.CT_WorksheetSource")]
public object Item { get; public set; }
    [XmlAttributeAttribute]
public ST_SourceType type { get; public set; }
    [XmlAttributeAttribute]
[DefaultValueAttribute("System.UInt32", "0")]
public UInt32 connectionId { get; public set; }
    public CT_WorksheetSource worksheetSource { get; public set; }
    public CT_Consolidation consolidation { get; public set; }
    public CT_ExtensionList extLst { get; public set; }
    public static CT_CacheSource Parse(XmlNode node, XmlNamespaceManager namespaceManager);
    internal void Write(StreamWriter sw, string nodeName);
    public object get_Item();
    public void set_Item(object value);
    public ST_SourceType get_type();
    public void set_type(ST_SourceType value);
    public UInt32 get_connectionId();
    public void set_connectionId(UInt32 value);
    public CT_WorksheetSource get_worksheetSource();
    public void set_worksheetSource(CT_WorksheetSource value);
    public CT_Consolidation get_consolidation();
    public void set_consolidation(CT_Consolidation value);
    public CT_ExtensionList get_extLst();
    public void set_extLst(CT_ExtensionList value);
    public CT_WorksheetSource AddNewWorksheetSource();
}
[XmlTypeAttribute]
public class NPOI.OpenXmlFormats.Spreadsheet.CT_CalcCell : object {
    private string rField;
    private int iField;
    private bool sField;
    private bool lField;
    private bool tField;
    private bool aField;
    private bool iSpecifiedField;
    [XmlAttributeAttribute]
public string r { get; public set; }
    [XmlAttributeAttribute]
[DefaultValueAttribute("0")]
public int i { get; public set; }
    [XmlIgnoreAttribute]
public bool iSpecified { get; public set; }
    [XmlAttributeAttribute]
[DefaultValueAttribute("False")]
public bool s { get; public set; }
    [XmlAttributeAttribute]
[DefaultValueAttribute("False")]
public bool l { get; public set; }
    [XmlAttributeAttribute]
[DefaultValueAttribute("False")]
public bool t { get; public set; }
    [XmlAttributeAttribute]
[DefaultValueAttribute("False")]
public bool a { get; public set; }
    public string get_r();
    public void set_r(string value);
    public int get_i();
    public void set_i(int value);
    public bool get_iSpecified();
    public void set_iSpecified(bool value);
    public bool get_s();
    public void set_s(bool value);
    public bool get_l();
    public void set_l(bool value);
    public bool get_t();
    public void set_t(bool value);
    public bool get_a();
    public void set_a(bool value);
}
[XmlTypeAttribute]
[XmlRootAttribute]
public class NPOI.OpenXmlFormats.Spreadsheet.CT_CalcChain : object {
    private List`1<CT_CalcCell> cField;
    private CT_ExtensionList extLstField;
    [XmlElementAttribute("c")]
public List`1<CT_CalcCell> c { get; public set; }
    [XmlElementAttribute("extLst")]
public CT_ExtensionList extLst { get; public set; }
    [XmlIgnoreAttribute]
public bool extLstSpecified { get; }
    public int SizeOfCArray();
    public CT_CalcCell GetCArray(int index);
    public void AddC(CT_CalcCell cell);
    public void RemoveC(int index);
    public List`1<CT_CalcCell> get_c();
    public void set_c(List`1<CT_CalcCell> value);
    public CT_ExtensionList get_extLst();
    public void set_extLst(CT_ExtensionList value);
    public bool get_extLstSpecified();
}
[XmlTypeAttribute]
public class NPOI.OpenXmlFormats.Spreadsheet.CT_CalcPr : object {
    private UInt32 calcIdField;
    private bool calcIdFieldSpecified;
    private ST_CalcMode calcModeField;
    private bool fullCalcOnLoadField;
    private ST_RefMode refModeField;
    private bool iterateField;
    private UInt32 iterateCountField;
    private double iterateDeltaField;
    private bool fullPrecisionField;
    private bool calcCompletedField;
    private bool calcOnSaveField;
    private bool concurrentCalcField;
    private UInt32 concurrentManualCountField;
    private bool concurrentManualCountFieldSpecified;
    private bool forceFullCalcField;
    private bool forceFullCalcFieldSpecified;
    [XmlAttributeAttribute]
public UInt32 calcId { get; public set; }
    [XmlIgnoreAttribute]
public bool calcIdSpecified { get; public set; }
    [XmlAttributeAttribute]
[DefaultValueAttribute("Mono.Cecil.CustomAttributeArgument")]
public ST_CalcMode calcMode { get; public set; }
    [XmlAttributeAttribute]
[DefaultValueAttribute("False")]
public bool fullCalcOnLoad { get; public set; }
    [XmlAttributeAttribute]
[DefaultValueAttribute("Mono.Cecil.CustomAttributeArgument")]
public ST_RefMode refMode { get; public set; }
    [XmlAttributeAttribute]
[DefaultValueAttribute("False")]
public bool iterate { get; public set; }
    [XmlAttributeAttribute]
[DefaultValueAttribute("System.UInt32", "100")]
public UInt32 iterateCount { get; public set; }
    [XmlAttributeAttribute]
[DefaultValueAttribute("0,001")]
public double iterateDelta { get; public set; }
    [XmlAttributeAttribute]
[DefaultValueAttribute("True")]
public bool fullPrecision { get; public set; }
    [XmlAttributeAttribute]
[DefaultValueAttribute("True")]
public bool calcCompleted { get; public set; }
    [XmlAttributeAttribute]
[DefaultValueAttribute("True")]
public bool calcOnSave { get; public set; }
    [XmlAttributeAttribute]
[DefaultValueAttribute("True")]
public bool concurrentCalc { get; public set; }
    [XmlAttributeAttribute]
public UInt32 concurrentManualCount { get; public set; }
    [XmlIgnoreAttribute]
public bool concurrentManualCountSpecified { get; public set; }
    [XmlAttributeAttribute]
public bool forceFullCalc { get; public set; }
    [XmlIgnoreAttribute]
public bool forceFullCalcSpecified { get; public set; }
    public static CT_CalcPr Parse(XmlNode node, XmlNamespaceManager namespaceManager);
    internal void Write(StreamWriter sw, string nodeName);
    public UInt32 get_calcId();
    public void set_calcId(UInt32 value);
    public bool get_calcIdSpecified();
    public void set_calcIdSpecified(bool value);
    public ST_CalcMode get_calcMode();
    public void set_calcMode(ST_CalcMode value);
    public bool get_fullCalcOnLoad();
    public void set_fullCalcOnLoad(bool value);
    public ST_RefMode get_refMode();
    public void set_refMode(ST_RefMode value);
    public bool get_iterate();
    public void set_iterate(bool value);
    public UInt32 get_iterateCount();
    public void set_iterateCount(UInt32 value);
    public double get_iterateDelta();
    public void set_iterateDelta(double value);
    public bool get_fullPrecision();
    public void set_fullPrecision(bool value);
    public bool get_calcCompleted();
    public void set_calcCompleted(bool value);
    public bool get_calcOnSave();
    public void set_calcOnSave(bool value);
    public bool get_concurrentCalc();
    public void set_concurrentCalc(bool value);
    public UInt32 get_concurrentManualCount();
    public void set_concurrentManualCount(UInt32 value);
    public bool get_concurrentManualCountSpecified();
    public void set_concurrentManualCountSpecified(bool value);
    public bool get_forceFullCalc();
    public void set_forceFullCalc(bool value);
    public bool get_forceFullCalcSpecified();
    public void set_forceFullCalcSpecified(bool value);
}
[XmlTypeAttribute]
[XmlRootAttribute]
public class NPOI.OpenXmlFormats.Spreadsheet.CT_CalculatedItem : object {
    private CT_PivotArea pivotAreaField;
    private CT_ExtensionList extLstField;
    private UInt32 fieldField;
    private bool fieldFieldSpecified;
    private string formulaField;
    [XmlElementAttribute]
public CT_PivotArea pivotArea { get; public set; }
    [XmlElementAttribute]
public CT_ExtensionList extLst { get; public set; }
    [XmlAttributeAttribute]
public UInt32 field { get; public set; }
    [XmlIgnoreAttribute]
public bool fieldSpecified { get; public set; }
    [XmlAttributeAttribute]
public string formula { get; public set; }
    public static CT_CalculatedItem Parse(XmlNode node, XmlNamespaceManager namespaceManager);
    internal void Write(StreamWriter sw, string nodeName);
    public CT_PivotArea get_pivotArea();
    public void set_pivotArea(CT_PivotArea value);
    public CT_ExtensionList get_extLst();
    public void set_extLst(CT_ExtensionList value);
    public UInt32 get_field();
    public void set_field(UInt32 value);
    public bool get_fieldSpecified();
    public void set_fieldSpecified(bool value);
    public string get_formula();
    public void set_formula(string value);
}
[XmlTypeAttribute]
[XmlRootAttribute]
public class NPOI.OpenXmlFormats.Spreadsheet.CT_CalculatedItems : object {
    private List`1<CT_CalculatedItem> calculatedItemField;
    private UInt32 countField;
    private bool countFieldSpecified;
    [XmlElementAttribute("calculatedItem")]
public List`1<CT_CalculatedItem> calculatedItem { get; public set; }
    [XmlAttributeAttribute]
public UInt32 count { get; public set; }
    [XmlIgnoreAttribute]
public bool countSpecified { get; public set; }
    public static CT_CalculatedItems Parse(XmlNode node, XmlNamespaceManager namespaceManager);
    internal void Write(StreamWriter sw, string nodeName);
    public List`1<CT_CalculatedItem> get_calculatedItem();
    public void set_calculatedItem(List`1<CT_CalculatedItem> value);
    public UInt32 get_count();
    public void set_count(UInt32 value);
    public bool get_countSpecified();
    public void set_countSpecified(bool value);
}
[XmlTypeAttribute]
[XmlRootAttribute]
public class NPOI.OpenXmlFormats.Spreadsheet.CT_CalculatedMember : object {
    private CT_ExtensionList extLstField;
    private string nameField;
    private string mdxField;
    private string memberNameField;
    private string hierarchyField;
    private string parentField;
    private int solveOrderField;
    private bool setField;
    [XmlElementAttribute]
public CT_ExtensionList extLst { get; public set; }
    [XmlAttributeAttribute]
public string name { get; public set; }
    [XmlAttributeAttribute]
public string mdx { get; public set; }
    [XmlAttributeAttribute]
public string memberName { get; public set; }
    [XmlAttributeAttribute]
public string hierarchy { get; public set; }
    [XmlAttributeAttribute]
public string parent { get; public set; }
    [XmlAttributeAttribute]
[DefaultValueAttribute("0")]
public int solveOrder { get; public set; }
    [XmlAttributeAttribute]
[DefaultValueAttribute("False")]
public bool set { get; public set; }
    public static CT_CalculatedMember Parse(XmlNode node, XmlNamespaceManager namespaceManager);
    internal void Write(StreamWriter sw, string nodeName);
    public CT_ExtensionList get_extLst();
    public void set_extLst(CT_ExtensionList value);
    public string get_name();
    public void set_name(string value);
    public string get_mdx();
    public void set_mdx(string value);
    public string get_memberName();
    public void set_memberName(string value);
    public string get_hierarchy();
    public void set_hierarchy(string value);
    public string get_parent();
    public void set_parent(string value);
    public int get_solveOrder();
    public void set_solveOrder(int value);
    public bool get_set();
    public void set_set(bool value);
}
[XmlTypeAttribute]
[XmlRootAttribute]
public class NPOI.OpenXmlFormats.Spreadsheet.CT_CalculatedMembers : object {
    private List`1<CT_CalculatedMember> calculatedMemberField;
    private UInt32 countField;
    private bool countFieldSpecified;
    [XmlElementAttribute("calculatedMember")]
public List`1<CT_CalculatedMember> calculatedMember { get; public set; }
    [XmlAttributeAttribute]
public UInt32 count { get; public set; }
    [XmlIgnoreAttribute]
public bool countSpecified { get; public set; }
    public static CT_CalculatedMembers Parse(XmlNode node, XmlNamespaceManager namespaceManager);
    internal void Write(StreamWriter sw, string nodeName);
    public List`1<CT_CalculatedMember> get_calculatedMember();
    public void set_calculatedMember(List`1<CT_CalculatedMember> value);
    public UInt32 get_count();
    public void set_count(UInt32 value);
    public bool get_countSpecified();
    public void set_countSpecified(bool value);
}
[XmlTypeAttribute]
public class NPOI.OpenXmlFormats.Spreadsheet.CT_Cell : object {
    private CT_CellFormula fField;
    private string vField;
    private CT_Rst isField;
    private CT_ExtensionList extLstField;
    private string rField;
    private Nullable`1<UInt32> sField;
    private Nullable`1<ST_CellType> tField;
    private Nullable`1<UInt32> cmField;
    private Nullable`1<UInt32> vmField;
    private Nullable`1<bool> phField;
    [XmlElementAttribute]
public CT_CellFormula f { get; public set; }
    [XmlElementAttribute]
public string v { get; public set; }
    [XmlElementAttribute("is")]
public CT_Rst is { get; public set; }
    [XmlElementAttribute]
public CT_ExtensionList extLst { get; public set; }
    [XmlAttributeAttribute]
public string r { get; public set; }
    [XmlAttributeAttribute]
[DefaultValueAttribute("System.UInt32", "0")]
public UInt32 s { get; public set; }
    [XmlAttributeAttribute]
[DefaultValueAttribute("Mono.Cecil.CustomAttributeArgument")]
public ST_CellType t { get; public set; }
    [XmlAttributeAttribute]
[DefaultValueAttribute("System.UInt32", "0")]
public UInt32 cm { get; public set; }
    [XmlAttributeAttribute]
[DefaultValueAttribute("System.UInt32", "0")]
public UInt32 vm { get; public set; }
    [XmlAttributeAttribute]
[DefaultValueAttribute("False")]
public bool ph { get; public set; }
    public static CT_Cell Parse(XmlNode node, XmlNamespaceManager namespaceManager);
    internal void Write(StreamWriter sw, string nodeName);
    public void Set(CT_Cell cell);
    public bool IsSetT();
    public bool IsSetS();
    public bool IsSetF();
    public bool IsSetV();
    public bool IsSetIs();
    public bool IsSetR();
    public void unsetF();
    public void unsetV();
    public void unsetS();
    public void unsetT();
    public void unsetIs();
    public void unsetR();
    public CT_CellFormula get_f();
    public void set_f(CT_CellFormula value);
    public string get_v();
    public void set_v(string value);
    public CT_Rst get_is();
    public void set_is(CT_Rst value);
    public CT_ExtensionList get_extLst();
    public void set_extLst(CT_ExtensionList value);
    public string get_r();
    public void set_r(string value);
    public UInt32 get_s();
    public void set_s(UInt32 value);
    public ST_CellType get_t();
    public void set_t(ST_CellType value);
    public UInt32 get_cm();
    public void set_cm(UInt32 value);
    public UInt32 get_vm();
    public void set_vm(UInt32 value);
    public bool get_ph();
    public void set_ph(bool value);
}
[XmlTypeAttribute]
public class NPOI.OpenXmlFormats.Spreadsheet.CT_CellAlignment : object {
    private ST_HorizontalAlignment horizontalField;
    private bool horizontalFieldSpecified;
    private ST_VerticalAlignment verticalField;
    private bool verticalFieldSpecified;
    private long textRotationField;
    private bool textRotationFieldSpecified;
    private bool wrapTextField;
    private bool wrapTextFieldSpecified;
    private long indentField;
    private bool indentFieldSpecified;
    private int relativeIndentField;
    private bool relativeIndentFieldSpecified;
    private bool justifyLastLineField;
    private bool justifyLastLineFieldSpecified;
    private bool shrinkToFitField;
    private bool shrinkToFitFieldSpecified;
    private long readingOrderField;
    private bool readingOrderFieldSpecified;
    [XmlAttributeAttribute]
[DefaultValueAttribute("Mono.Cecil.CustomAttributeArgument")]
public ST_HorizontalAlignment horizontal { get; public set; }
    [XmlIgnoreAttribute]
public bool horizontalSpecified { get; public set; }
    [XmlAttributeAttribute]
[DefaultValueAttribute("Mono.Cecil.CustomAttributeArgument")]
public ST_VerticalAlignment vertical { get; public set; }
    [XmlIgnoreAttribute]
public bool verticalSpecified { get; public set; }
    [XmlAttributeAttribute]
public long textRotation { get; public set; }
    [XmlIgnoreAttribute]
public bool textRotationSpecified { get; public set; }
    [XmlAttributeAttribute]
public bool wrapText { get; public set; }
    [XmlIgnoreAttribute]
public bool wrapTextSpecified { get; public set; }
    [XmlAttributeAttribute]
public long indent { get; public set; }
    [XmlIgnoreAttribute]
public bool indentSpecified { get; public set; }
    [XmlAttributeAttribute]
public int relativeIndent { get; public set; }
    [XmlIgnoreAttribute]
public bool relativeIndentSpecified { get; public set; }
    [XmlAttributeAttribute]
public bool justifyLastLine { get; public set; }
    [XmlIgnoreAttribute]
public bool justifyLastLineSpecified { get; public set; }
    [XmlAttributeAttribute]
public bool shrinkToFit { get; public set; }
    [XmlIgnoreAttribute]
public bool shrinkToFitSpecified { get; public set; }
    [XmlAttributeAttribute]
public long readingOrder { get; public set; }
    [XmlIgnoreAttribute]
public bool readingOrderSpecified { get; public set; }
    public static CT_CellAlignment Parse(XmlNode node, XmlNamespaceManager namespaceManager);
    internal void Write(StreamWriter sw, string nodeName);
    public bool IsSetHorizontal();
    public bool IsSetVertical();
    public ST_HorizontalAlignment get_horizontal();
    public void set_horizontal(ST_HorizontalAlignment value);
    public bool get_horizontalSpecified();
    public void set_horizontalSpecified(bool value);
    public ST_VerticalAlignment get_vertical();
    public void set_vertical(ST_VerticalAlignment value);
    public bool get_verticalSpecified();
    public void set_verticalSpecified(bool value);
    public long get_textRotation();
    public void set_textRotation(long value);
    public bool get_textRotationSpecified();
    public void set_textRotationSpecified(bool value);
    public bool get_wrapText();
    public void set_wrapText(bool value);
    public bool get_wrapTextSpecified();
    public void set_wrapTextSpecified(bool value);
    public long get_indent();
    public void set_indent(long value);
    public bool get_indentSpecified();
    public void set_indentSpecified(bool value);
    public int get_relativeIndent();
    public void set_relativeIndent(int value);
    public bool get_relativeIndentSpecified();
    public void set_relativeIndentSpecified(bool value);
    public bool get_justifyLastLine();
    public void set_justifyLastLine(bool value);
    public bool get_justifyLastLineSpecified();
    public void set_justifyLastLineSpecified(bool value);
    public bool get_shrinkToFit();
    public void set_shrinkToFit(bool value);
    public bool get_shrinkToFitSpecified();
    public void set_shrinkToFitSpecified(bool value);
    public long get_readingOrder();
    public void set_readingOrder(long value);
    public bool get_readingOrderSpecified();
    public void set_readingOrderSpecified(bool value);
    internal CT_CellAlignment Copy();
}
[XmlTypeAttribute]
public class NPOI.OpenXmlFormats.Spreadsheet.CT_CellFormula : object {
    private ST_CellFormulaType tField;
    private bool acaField;
    private string refField;
    private bool dt2DField;
    private bool dtrField;
    private bool del1Field;
    private bool del2Field;
    private string r1Field;
    private string r2Field;
    private bool caField;
    private UInt32 siField;
    private bool siFieldSpecified;
    private bool bxField;
    private string valueField;
    [XmlAttributeAttribute]
[DefaultValueAttribute("Mono.Cecil.CustomAttributeArgument")]
public ST_CellFormulaType t { get; public set; }
    [XmlAttributeAttribute]
[DefaultValueAttribute("False")]
public bool aca { get; public set; }
    [XmlAttributeAttribute]
public string ref { get; public set; }
    [XmlAttributeAttribute]
[DefaultValueAttribute("False")]
public bool dt2D { get; public set; }
    [XmlAttributeAttribute]
[DefaultValueAttribute("False")]
public bool dtr { get; public set; }
    [XmlAttributeAttribute]
[DefaultValueAttribute("False")]
public bool del1 { get; public set; }
    [XmlAttributeAttribute]
[DefaultValueAttribute("False")]
public bool del2 { get; public set; }
    [XmlAttributeAttribute]
public string r1 { get; public set; }
    [XmlAttributeAttribute]
public string r2 { get; public set; }
    [DefaultValueAttribute("False")]
public bool ca { get; public set; }
    [XmlAttributeAttribute]
public UInt32 si { get; public set; }
    [XmlIgnoreAttribute]
public bool siSpecified { get; public set; }
    [XmlAttributeAttribute]
[DefaultValueAttribute("False")]
public bool bx { get; public set; }
    [XmlTextAttribute]
public string Value { get; public set; }
    public static CT_CellFormula Parse(XmlNode node, XmlNamespaceManager namespaceManager);
    internal void Write(StreamWriter sw, string nodeName);
    public bool isSetRef();
    public CT_CellFormula Copy();
    public ST_CellFormulaType get_t();
    public void set_t(ST_CellFormulaType value);
    public bool get_aca();
    public void set_aca(bool value);
    public string get_ref();
    public void set_ref(string value);
    public bool get_dt2D();
    public void set_dt2D(bool value);
    public bool get_dtr();
    public void set_dtr(bool value);
    public bool get_del1();
    public void set_del1(bool value);
    public bool get_del2();
    public void set_del2(bool value);
    public string get_r1();
    public void set_r1(string value);
    public string get_r2();
    public void set_r2(string value);
    public bool get_ca();
    public void set_ca(bool value);
    public UInt32 get_si();
    public void set_si(UInt32 value);
    public bool get_siSpecified();
    public void set_siSpecified(bool value);
    public bool get_bx();
    public void set_bx(bool value);
    public string get_Value();
    public void set_Value(string value);
}
[XmlTypeAttribute]
public class NPOI.OpenXmlFormats.Spreadsheet.CT_CellProtection : object {
    private bool lockedField;
    private bool hiddenField;
    [XmlAttributeAttribute]
public bool locked { get; public set; }
    [XmlAttributeAttribute]
public bool hidden { get; public set; }
    public bool IsSetHidden();
    public bool IsSetLocked();
    public static CT_CellProtection Parse(XmlNode node, XmlNamespaceManager namespaceManager);
    internal void Write(StreamWriter sw, string nodeName);
    public bool get_locked();
    public void set_locked(bool value);
    public bool get_hidden();
    public void set_hidden(bool value);
}
[XmlTypeAttribute]
public class NPOI.OpenXmlFormats.Spreadsheet.CT_CellSmartTag : object {
    private List`1<CT_CellSmartTagPr> cellSmartTagPrField;
    private UInt32 typeField;
    private bool deletedField;
    private bool xmlBasedField;
    public List`1<CT_CellSmartTagPr> cellSmartTagPr { get; public set; }
    public UInt32 type { get; public set; }
    [DefaultValueAttribute("False")]
public bool deleted { get; public set; }
    [DefaultValueAttribute("False")]
public bool xmlBased { get; public set; }
    public List`1<CT_CellSmartTagPr> get_cellSmartTagPr();
    public void set_cellSmartTagPr(List`1<CT_CellSmartTagPr> value);
    public UInt32 get_type();
    public void set_type(UInt32 value);
    public bool get_deleted();
    public void set_deleted(bool value);
    public bool get_xmlBased();
    public void set_xmlBased(bool value);
    public static CT_CellSmartTag Parse(XmlNode node, XmlNamespaceManager namespaceManager);
    internal void Write(StreamWriter sw, string nodeName);
}
[XmlTypeAttribute]
public class NPOI.OpenXmlFormats.Spreadsheet.CT_CellSmartTagPr : object {
    private string keyField;
    private string valField;
    public string key { get; public set; }
    public string val { get; public set; }
    public string get_key();
    public void set_key(string value);
    public string get_val();
    public void set_val(string value);
    public static CT_CellSmartTagPr Parse(XmlNode node, XmlNamespaceManager namespaceManager);
    internal void Write(StreamWriter sw, string nodeName);
}
[XmlTypeAttribute]
public class NPOI.OpenXmlFormats.Spreadsheet.CT_CellSmartTags : object {
    private List`1<CT_CellSmartTag> cellSmartTagField;
    private string rField;
    public List`1<CT_CellSmartTag> cellSmartTag { get; public set; }
    public string r { get; public set; }
    public List`1<CT_CellSmartTag> get_cellSmartTag();
    public void set_cellSmartTag(List`1<CT_CellSmartTag> value);
    public string get_r();
    public void set_r(string value);
    public static CT_CellSmartTags Parse(XmlNode node, XmlNamespaceManager namespaceManager);
    internal void Write(StreamWriter sw, string nodeName);
}
[XmlTypeAttribute]
public class NPOI.OpenXmlFormats.Spreadsheet.CT_CellStyle : object {
    private CT_ExtensionList extLstField;
    private string nameField;
    private UInt32 xfIdField;
    private UInt32 builtinIdField;
    private bool builtinIdFieldSpecified;
    private UInt32 iLevelField;
    private bool iLevelFieldSpecified;
    private bool hiddenField;
    private bool hiddenFieldSpecified;
    private bool customBuiltinField;
    private bool customBuiltinFieldSpecified;
    [XmlElementAttribute]
public CT_ExtensionList extLst { get; public set; }
    [XmlAttributeAttribute]
public string name { get; public set; }
    [XmlAttributeAttribute]
public UInt32 xfId { get; public set; }
    [XmlAttributeAttribute]
public UInt32 builtinId { get; public set; }
    [XmlIgnoreAttribute]
public bool builtinIdSpecified { get; public set; }
    [XmlAttributeAttribute]
public UInt32 iLevel { get; public set; }
    [XmlIgnoreAttribute]
public bool iLevelSpecified { get; public set; }
    [XmlAttributeAttribute]
public bool hidden { get; public set; }
    [XmlIgnoreAttribute]
public bool hiddenSpecified { get; public set; }
    [XmlAttributeAttribute]
public bool customBuiltin { get; public set; }
    [XmlIgnoreAttribute]
public bool customBuiltinSpecified { get; public set; }
    public static CT_CellStyle Parse(XmlNode node, XmlNamespaceManager namespaceManager);
    internal void Write(StreamWriter sw, string nodeName);
    public CT_ExtensionList get_extLst();
    public void set_extLst(CT_ExtensionList value);
    public string get_name();
    public void set_name(string value);
    public UInt32 get_xfId();
    public void set_xfId(UInt32 value);
    public UInt32 get_builtinId();
    public void set_builtinId(UInt32 value);
    public bool get_builtinIdSpecified();
    public void set_builtinIdSpecified(bool value);
    public UInt32 get_iLevel();
    public void set_iLevel(UInt32 value);
    public bool get_iLevelSpecified();
    public void set_iLevelSpecified(bool value);
    public bool get_hidden();
    public void set_hidden(bool value);
    public bool get_hiddenSpecified();
    public void set_hiddenSpecified(bool value);
    public bool get_customBuiltin();
    public void set_customBuiltin(bool value);
    public bool get_customBuiltinSpecified();
    public void set_customBuiltinSpecified(bool value);
}
[XmlTypeAttribute]
public class NPOI.OpenXmlFormats.Spreadsheet.CT_CellStyles : object {
    private List`1<CT_CellStyle> cellStyleField;
    private UInt32 countField;
    private bool countFieldSpecified;
    [XmlElementAttribute]
public List`1<CT_CellStyle> cellStyle { get; public set; }
    [XmlAttributeAttribute]
public UInt32 count { get; public set; }
    [XmlIgnoreAttribute]
public bool countSpecified { get; public set; }
    public List`1<CT_CellStyle> get_cellStyle();
    public void set_cellStyle(List`1<CT_CellStyle> value);
    public UInt32 get_count();
    public void set_count(UInt32 value);
    public bool get_countSpecified();
    public void set_countSpecified(bool value);
    public static CT_CellStyles Parse(XmlNode node, XmlNamespaceManager namespaceManager);
    internal void Write(StreamWriter sw, string nodeName);
}
[XmlTypeAttribute]
public class NPOI.OpenXmlFormats.Spreadsheet.CT_CellStyleXfs : object {
    private List`1<CT_Xf> xfField;
    private UInt32 countField;
    private bool countFieldSpecified;
    [XmlElementAttribute]
public List`1<CT_Xf> xf { get; public set; }
    [XmlAttributeAttribute]
public UInt32 count { get; public set; }
    [XmlIgnoreAttribute]
public bool countSpecified { get; public set; }
    public static CT_CellStyleXfs Parse(XmlNode node, XmlNamespaceManager namespaceManager);
    internal void Write(StreamWriter sw, string nodeName);
    public CT_Xf AddNewXf();
    public List`1<CT_Xf> get_xf();
    public void set_xf(List`1<CT_Xf> value);
    public UInt32 get_count();
    public void set_count(UInt32 value);
    public bool get_countSpecified();
    public void set_countSpecified(bool value);
}
[XmlTypeAttribute]
public class NPOI.OpenXmlFormats.Spreadsheet.CT_CellWatch : object {
    private string rField;
    public string r { get; public set; }
    public string get_r();
    public void set_r(string value);
    public static CT_CellWatch Parse(XmlNode node, XmlNamespaceManager namespaceManager);
    internal void Write(StreamWriter sw, string nodeName);
}
[XmlTypeAttribute]
public class NPOI.OpenXmlFormats.Spreadsheet.CT_CellWatches : object {
    private List`1<CT_CellWatch> cellWatchField;
    public List`1<CT_CellWatch> cellWatch { get; public set; }
    public static CT_CellWatches Parse(XmlNode node, XmlNamespaceManager namespaceManager);
    internal void Write(StreamWriter sw, string nodeName);
    public List`1<CT_CellWatch> get_cellWatch();
    public void set_cellWatch(List`1<CT_CellWatch> value);
}
[XmlTypeAttribute]
public class NPOI.OpenXmlFormats.Spreadsheet.CT_CellXfs : object {
    private List`1<CT_Xf> xfField;
    private UInt32 countField;
    private bool countFieldSpecified;
    [XmlElementAttribute]
public List`1<CT_Xf> xf { get; public set; }
    [XmlAttributeAttribute]
public UInt32 count { get; public set; }
    [XmlIgnoreAttribute]
public bool countSpecified { get; public set; }
    public static CT_CellXfs Parse(XmlNode node, XmlNamespaceManager namespaceManager);
    internal void Write(StreamWriter sw, string nodeName);
    public CT_Xf AddNewXf();
    public List`1<CT_Xf> get_xf();
    public void set_xf(List`1<CT_Xf> value);
    public UInt32 get_count();
    public void set_count(UInt32 value);
    public bool get_countSpecified();
    public void set_countSpecified(bool value);
}
[XmlTypeAttribute]
public class NPOI.OpenXmlFormats.Spreadsheet.CT_CfRule : object {
    private List`1<string> formulaField;
    private CT_ColorScale colorScaleField;
    private CT_DataBar dataBarField;
    private CT_IconSet iconSetField;
    private CT_ExtensionList extLstField;
    private ST_CfType typeField;
    private bool typeFieldSpecified;
    private UInt32 dxfIdField;
    private bool dxfIdFieldSpecified;
    private int priorityField;
    private bool stopIfTrueField;
    private bool aboveAverageField;
    private bool percentField;
    private bool bottomField;
    private Nullable`1<ST_ConditionalFormattingOperator> operatorField;
    private bool operatorFieldSpecified;
    private string textField;
    private Nullable`1<ST_TimePeriod> timePeriodField;
    private bool timePeriodFieldSpecified;
    private UInt32 rankField;
    private bool rankFieldSpecified;
    private int stdDevField;
    private bool stdDevFieldSpecified;
    private bool equalAverageField;
    [XmlElementAttribute]
public List`1<string> formula { get; public set; }
    [XmlElementAttribute]
public CT_ColorScale colorScale { get; public set; }
    [XmlElementAttribute]
public CT_DataBar dataBar { get; public set; }
    [XmlElementAttribute]
public CT_IconSet iconSet { get; public set; }
    [XmlElementAttribute]
public CT_ExtensionList extLst { get; public set; }
    [XmlAttributeAttribute]
public ST_CfType type { get; public set; }
    [XmlIgnoreAttribute]
public bool typeSpecified { get; public set; }
    [XmlAttributeAttribute]
public UInt32 dxfId { get; public set; }
    [XmlIgnoreAttribute]
public bool dxfIdSpecified { get; public set; }
    [XmlAttributeAttribute]
public int priority { get; public set; }
    [XmlAttributeAttribute]
[DefaultValueAttribute("False")]
public bool stopIfTrue { get; public set; }
    [XmlAttributeAttribute]
[DefaultValueAttribute("True")]
public bool aboveAverage { get; public set; }
    [XmlAttributeAttribute]
[DefaultValueAttribute("False")]
public bool percent { get; public set; }
    [DefaultValueAttribute("False")]
public bool bottom { get; public set; }
    [XmlAttributeAttribute]
public Nullable`1<ST_ConditionalFormattingOperator> operator { get; public set; }
    [XmlIgnoreAttribute]
public bool operatorSpecified { get; public set; }
    [XmlAttributeAttribute]
public string text { get; public set; }
    [XmlAttributeAttribute]
public Nullable`1<ST_TimePeriod> timePeriod { get; public set; }
    [XmlIgnoreAttribute]
public bool timePeriodSpecified { get; public set; }
    [XmlAttributeAttribute]
public UInt32 rank { get; public set; }
    [XmlIgnoreAttribute]
public bool rankSpecified { get; public set; }
    [XmlAttributeAttribute]
public int stdDev { get; public set; }
    [XmlIgnoreAttribute]
public bool stdDevSpecified { get; public set; }
    [XmlAttributeAttribute]
[DefaultValueAttribute("False")]
public bool equalAverage { get; public set; }
    public static CT_CfRule Parse(XmlNode node, XmlNamespaceManager namespaceManager);
    internal void Write(StreamWriter sw, string nodeName);
    public bool IsSetDxfId();
    public void AddFormula(string formula);
    public void Set(CT_CfRule src);
    public int SizeOfFormulaArray();
    public string GetFormulaArray(int index);
    public CT_IconSet AddNewIconSet();
    public bool IsSetIconSet();
    public bool IsSetColorScale();
    public CT_ColorScale AddNewColorScale();
    public bool IsSetDataBar();
    public CT_DataBar AddNewDataBar();
    public List`1<string> get_formula();
    public void set_formula(List`1<string> value);
    public CT_ColorScale get_colorScale();
    public void set_colorScale(CT_ColorScale value);
    public CT_DataBar get_dataBar();
    public void set_dataBar(CT_DataBar value);
    public CT_IconSet get_iconSet();
    public void set_iconSet(CT_IconSet value);
    public CT_ExtensionList get_extLst();
    public void set_extLst(CT_ExtensionList value);
    public ST_CfType get_type();
    public void set_type(ST_CfType value);
    public bool get_typeSpecified();
    public void set_typeSpecified(bool value);
    public UInt32 get_dxfId();
    public void set_dxfId(UInt32 value);
    public bool get_dxfIdSpecified();
    public void set_dxfIdSpecified(bool value);
    public int get_priority();
    public void set_priority(int value);
    public bool get_stopIfTrue();
    public void set_stopIfTrue(bool value);
    public bool get_aboveAverage();
    public void set_aboveAverage(bool value);
    public bool get_percent();
    public void set_percent(bool value);
    public bool get_bottom();
    public void set_bottom(bool value);
    public Nullable`1<ST_ConditionalFormattingOperator> get_operator();
    public void set_operator(Nullable`1<ST_ConditionalFormattingOperator> value);
    public bool get_operatorSpecified();
    public void set_operatorSpecified(bool value);
    public string get_text();
    public void set_text(string value);
    public Nullable`1<ST_TimePeriod> get_timePeriod();
    public void set_timePeriod(Nullable`1<ST_TimePeriod> value);
    public bool get_timePeriodSpecified();
    public void set_timePeriodSpecified(bool value);
    public UInt32 get_rank();
    public void set_rank(UInt32 value);
    public bool get_rankSpecified();
    public void set_rankSpecified(bool value);
    public int get_stdDev();
    public void set_stdDev(int value);
    public bool get_stdDevSpecified();
    public void set_stdDevSpecified(bool value);
    public bool get_equalAverage();
    public void set_equalAverage(bool value);
}
[XmlTypeAttribute]
public class NPOI.OpenXmlFormats.Spreadsheet.CT_Cfvo : object {
    private CT_ExtensionList extLstField;
    private ST_CfvoType typeField;
    private string valField;
    private bool gteField;
    public CT_ExtensionList extLst { get; public set; }
    public ST_CfvoType type { get; public set; }
    public string val { get; public set; }
    [DefaultValueAttribute("True")]
public bool gte { get; public set; }
    public CT_ExtensionList get_extLst();
    public void set_extLst(CT_ExtensionList value);
    public ST_CfvoType get_type();
    public void set_type(ST_CfvoType value);
    public string get_val();
    public void set_val(string value);
    public bool get_gte();
    public void set_gte(bool value);
    public static CT_Cfvo Parse(XmlNode node, XmlNamespaceManager namespaceManager);
    public bool IsSetVal();
    public void UnsetVal();
    internal void Write(StreamWriter sw, string nodeName);
}
[XmlTypeAttribute]
[XmlRootAttribute]
public class NPOI.OpenXmlFormats.Spreadsheet.CT_ChartFormat : object {
    private CT_PivotArea pivotAreaField;
    private UInt32 chartField;
    private UInt32 formatField;
    private bool seriesField;
    [XmlElementAttribute]
public CT_PivotArea pivotArea { get; public set; }
    [XmlAttributeAttribute]
public UInt32 chart { get; public set; }
    [XmlAttributeAttribute]
public UInt32 format { get; public set; }
    [XmlAttributeAttribute]
[DefaultValueAttribute("False")]
public bool series { get; public set; }
    public static CT_ChartFormat Parse(XmlNode node, XmlNamespaceManager namespaceManager);
    internal void Write(StreamWriter sw, string nodeName);
    public CT_PivotArea get_pivotArea();
    public void set_pivotArea(CT_PivotArea value);
    public UInt32 get_chart();
    public void set_chart(UInt32 value);
    public UInt32 get_format();
    public void set_format(UInt32 value);
    public bool get_series();
    public void set_series(bool value);
}
[XmlTypeAttribute]
[XmlRootAttribute]
public class NPOI.OpenXmlFormats.Spreadsheet.CT_ChartFormats : object {
    private List`1<CT_ChartFormat> chartFormatField;
    private UInt32 countField;
    [XmlElementAttribute("chartFormat")]
public List`1<CT_ChartFormat> chartFormat { get; public set; }
    [XmlAttributeAttribute]
[DefaultValueAttribute("System.UInt32", "0")]
public UInt32 count { get; public set; }
    public static CT_ChartFormats Parse(XmlNode node, XmlNamespaceManager namespaceManager);
    internal void Write(StreamWriter sw, string nodeName);
    public List`1<CT_ChartFormat> get_chartFormat();
    public void set_chartFormat(List`1<CT_ChartFormat> value);
    public UInt32 get_count();
    public void set_count(UInt32 value);
}
[XmlTypeAttribute]
[XmlRootAttribute("chartsheet")]
public class NPOI.OpenXmlFormats.Spreadsheet.CT_Chartsheet : object {
    private CT_ChartsheetPr sheetPrField;
    private CT_ChartsheetViews sheetViewsField;
    private CT_ChartsheetProtection sheetProtectionField;
    private CT_CustomChartsheetViews customSheetViewsField;
    private CT_PageMargins pageMarginsField;
    private CT_CsPageSetup pageSetupField;
    private CT_HeaderFooter headerFooterField;
    private CT_Drawing drawingField;
    private CT_LegacyDrawing legacyDrawingField;
    private CT_LegacyDrawing legacyDrawingHFField;
    private CT_SheetBackgroundPicture pictureField;
    private CT_WebPublishItems webPublishItemsField;
    private CT_ExtensionList extLstField;
    [XmlElementAttribute]
public CT_ChartsheetPr sheetPr { get; public set; }
    [XmlElementAttribute]
public CT_ChartsheetViews sheetViews { get; public set; }
    [XmlElementAttribute]
public CT_ChartsheetProtection sheetProtection { get; public set; }
    [XmlElementAttribute]
public CT_CustomChartsheetViews customSheetViews { get; public set; }
    [XmlElementAttribute]
public CT_PageMargins pageMargins { get; public set; }
    [XmlElementAttribute]
public CT_CsPageSetup pageSetup { get; public set; }
    [XmlElementAttribute]
public CT_HeaderFooter headerFooter { get; public set; }
    [XmlElementAttribute]
public CT_Drawing drawing { get; public set; }
    [XmlElementAttribute]
public CT_LegacyDrawing legacyDrawing { get; public set; }
    [XmlElementAttribute]
public CT_LegacyDrawing legacyDrawingHF { get; public set; }
    [XmlElementAttribute]
public CT_SheetBackgroundPicture picture { get; public set; }
    [XmlElementAttribute]
public CT_WebPublishItems webPublishItems { get; public set; }
    [XmlElementAttribute]
public CT_ExtensionList extLst { get; public set; }
    public static CT_Chartsheet Parse(XmlNode node, XmlNamespaceManager namespaceManager);
    internal void Write(Stream stream);
    public CT_ChartsheetPr get_sheetPr();
    public void set_sheetPr(CT_ChartsheetPr value);
    public CT_ChartsheetViews get_sheetViews();
    public void set_sheetViews(CT_ChartsheetViews value);
    public CT_ChartsheetProtection get_sheetProtection();
    public void set_sheetProtection(CT_ChartsheetProtection value);
    public CT_CustomChartsheetViews get_customSheetViews();
    public void set_customSheetViews(CT_CustomChartsheetViews value);
    public CT_PageMargins get_pageMargins();
    public void set_pageMargins(CT_PageMargins value);
    public CT_CsPageSetup get_pageSetup();
    public void set_pageSetup(CT_CsPageSetup value);
    public CT_HeaderFooter get_headerFooter();
    public void set_headerFooter(CT_HeaderFooter value);
    public CT_Drawing get_drawing();
    public void set_drawing(CT_Drawing value);
    public CT_LegacyDrawing get_legacyDrawing();
    public void set_legacyDrawing(CT_LegacyDrawing value);
    public CT_LegacyDrawing get_legacyDrawingHF();
    public void set_legacyDrawingHF(CT_LegacyDrawing value);
    public CT_SheetBackgroundPicture get_picture();
    public void set_picture(CT_SheetBackgroundPicture value);
    public CT_WebPublishItems get_webPublishItems();
    public void set_webPublishItems(CT_WebPublishItems value);
    public CT_ExtensionList get_extLst();
    public void set_extLst(CT_ExtensionList value);
}
[XmlTypeAttribute]
public class NPOI.OpenXmlFormats.Spreadsheet.CT_ChartsheetPr : object {
    private CT_Color tabColorField;
    private bool publishedField;
    private string codeNameField;
    public CT_Color tabColor { get; public set; }
    [DefaultValueAttribute("True")]
public bool published { get; public set; }
    public string codeName { get; public set; }
    public static CT_ChartsheetPr Parse(XmlNode node, XmlNamespaceManager namespaceManager);
    internal void Write(StreamWriter sw, string nodeName);
    public CT_Color get_tabColor();
    public void set_tabColor(CT_Color value);
    public bool get_published();
    public void set_published(bool value);
    public string get_codeName();
    public void set_codeName(string value);
}
[XmlTypeAttribute]
public class NPOI.OpenXmlFormats.Spreadsheet.CT_ChartsheetProtection : object {
    private Byte[] passwordField;
    private bool contentField;
    private bool objectsField;
    public Byte[] password { get; public set; }
    [DefaultValueAttribute("False")]
public bool content { get; public set; }
    [DefaultValueAttribute("False")]
public bool objects { get; public set; }
    public Byte[] get_password();
    public void set_password(Byte[] value);
    public bool get_content();
    public void set_content(bool value);
    public bool get_objects();
    public void set_objects(bool value);
    public static CT_ChartsheetProtection Parse(XmlNode node, XmlNamespaceManager namespaceManager);
    internal void Write(StreamWriter sw, string nodeName);
}
[XmlTypeAttribute]
public class NPOI.OpenXmlFormats.Spreadsheet.CT_ChartsheetView : object {
    private CT_ExtensionList extLstField;
    private bool tabSelectedField;
    private UInt32 zoomScaleField;
    private UInt32 workbookViewIdField;
    private bool zoomToFitField;
    public CT_ExtensionList extLst { get; public set; }
    [DefaultValueAttribute("False")]
public bool tabSelected { get; public set; }
    [DefaultValueAttribute("System.UInt32", "100")]
public UInt32 zoomScale { get; public set; }
    public UInt32 workbookViewId { get; public set; }
    [DefaultValueAttribute("False")]
public bool zoomToFit { get; public set; }
    public CT_ExtensionList get_extLst();
    public void set_extLst(CT_ExtensionList value);
    public bool get_tabSelected();
    public void set_tabSelected(bool value);
    public UInt32 get_zoomScale();
    public void set_zoomScale(UInt32 value);
    public UInt32 get_workbookViewId();
    public void set_workbookViewId(UInt32 value);
    public bool get_zoomToFit();
    public void set_zoomToFit(bool value);
    public static CT_ChartsheetView Parse(XmlNode node, XmlNamespaceManager namespaceManager);
    internal void Write(StreamWriter sw, string nodeName);
}
[XmlTypeAttribute]
public class NPOI.OpenXmlFormats.Spreadsheet.CT_ChartsheetViews : object {
    private List`1<CT_ChartsheetView> sheetViewField;
    private CT_ExtensionList extLstField;
    public List`1<CT_ChartsheetView> sheetView { get; public set; }
    public CT_ExtensionList extLst { get; public set; }
    public static CT_ChartsheetViews Parse(XmlNode node, XmlNamespaceManager namespaceManager);
    internal void Write(StreamWriter sw, string nodeName);
    public List`1<CT_ChartsheetView> get_sheetView();
    public void set_sheetView(List`1<CT_ChartsheetView> value);
    public CT_ExtensionList get_extLst();
    public void set_extLst(CT_ExtensionList value);
}
[XmlTypeAttribute]
public class NPOI.OpenXmlFormats.Spreadsheet.CT_Col : object {
    private UInt32 minField;
    private UInt32 maxField;
    private double widthField;
    private bool widthSpecifiedField;
    private Nullable`1<UInt32> styleField;
    private bool hiddenField;
    private bool bestFitField;
    private bool customWidthField;
    private bool phoneticField;
    private byte outlineLevelField;
    private bool collapsedField;
    private bool collapsedSpecifiedField;
    [XmlAttributeAttribute]
public UInt32 min { get; public set; }
    [XmlAttributeAttribute]
public UInt32 max { get; public set; }
    [XmlAttributeAttribute]
public double width { get; public set; }
    [XmlIgnoreAttribute]
public bool widthSpecified { get; public set; }
    [XmlAttributeAttribute]
public Nullable`1<UInt32> style { get; public set; }
    [DefaultValueAttribute("False")]
[XmlAttributeAttribute]
public bool hidden { get; public set; }
    [DefaultValueAttribute("False")]
[XmlAttributeAttribute]
public bool bestFit { get; public set; }
    [DefaultValueAttribute("False")]
[XmlAttributeAttribute]
public bool customWidth { get; public set; }
    [DefaultValueAttribute("False")]
[XmlAttributeAttribute]
public bool phonetic { get; public set; }
    [DefaultValueAttribute("System.Byte", "0")]
[XmlAttributeAttribute]
public byte outlineLevel { get; public set; }
    [DefaultValueAttribute("True")]
[XmlAttributeAttribute]
public bool collapsed { get; public set; }
    [XmlIgnoreAttribute]
public bool collapsedSpecified { get; public set; }
    public UInt32 get_min();
    public void set_min(UInt32 value);
    public UInt32 get_max();
    public void set_max(UInt32 value);
    public double get_width();
    public void set_width(double value);
    public bool get_widthSpecified();
    public void set_widthSpecified(bool value);
    public bool IsSetBestFit();
    public bool IsSetCustomWidth();
    public bool IsSetHidden();
    public bool IsSetStyle();
    public bool IsSetWidth();
    public bool IsSetNumber();
    public bool IsSetCollapsed();
    public bool IsSetPhonetic();
    public bool IsSetOutlineLevel();
    public void SetNumber(UInt32 number);
    public void UnsetHidden();
    public void UnsetCollapsed();
    public void UnsetWidth();
    public void UnsetCustomWidth();
    public void UnsetStyle();
    public Nullable`1<UInt32> get_style();
    public void set_style(Nullable`1<UInt32> value);
    public bool get_hidden();
    public void set_hidden(bool value);
    public bool get_bestFit();
    public void set_bestFit(bool value);
    public bool get_customWidth();
    public void set_customWidth(bool value);
    public bool get_phonetic();
    public void set_phonetic(bool value);
    public byte get_outlineLevel();
    public void set_outlineLevel(byte value);
    public bool get_collapsed();
    public void set_collapsed(bool value);
    public bool get_collapsedSpecified();
    public void set_collapsedSpecified(bool value);
    public static CT_Col Parse(XmlNode node, XmlNamespaceManager namespaceManager);
    internal void Write(StreamWriter sw, string nodeName);
    public void Set(CT_Col col);
    public CT_Col Copy();
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
    public virtual string ToString();
}
[XmlTypeAttribute]
[XmlRootAttribute]
public class NPOI.OpenXmlFormats.Spreadsheet.CT_ColFields : object {
    private List`1<CT_Field> fieldField;
    private UInt32 countField;
    [XmlElementAttribute("field")]
public List`1<CT_Field> field { get; public set; }
    [XmlAttributeAttribute]
[DefaultValueAttribute("System.UInt32", "0")]
public UInt32 count { get; public set; }
    public static CT_ColFields Parse(XmlNode node, XmlNamespaceManager namespaceManager);
    internal void Write(StreamWriter sw, string nodeName);
    public List`1<CT_Field> get_field();
    public void set_field(List`1<CT_Field> value);
    public UInt32 get_count();
    public void set_count(UInt32 value);
    public UInt32 SizeOfFieldArray();
    public CT_Field AddNewField();
}
[XmlTypeAttribute]
[XmlRootAttribute]
public class NPOI.OpenXmlFormats.Spreadsheet.CT_ColHierarchiesUsage : object {
    private List`1<CT_HierarchyUsage> colHierarchyUsageField;
    private UInt32 countField;
    private bool countFieldSpecified;
    [XmlElementAttribute("colHierarchyUsage")]
public List`1<CT_HierarchyUsage> colHierarchyUsage { get; public set; }
    [XmlAttributeAttribute]
public UInt32 count { get; public set; }
    [XmlIgnoreAttribute]
public bool countSpecified { get; public set; }
    public static CT_ColHierarchiesUsage Parse(XmlNode node, XmlNamespaceManager namespaceManager);
    internal void Write(StreamWriter sw, string nodeName);
    public List`1<CT_HierarchyUsage> get_colHierarchyUsage();
    public void set_colHierarchyUsage(List`1<CT_HierarchyUsage> value);
    public UInt32 get_count();
    public void set_count(UInt32 value);
    public bool get_countSpecified();
    public void set_countSpecified(bool value);
}
[XmlTypeAttribute]
[XmlRootAttribute]
public class NPOI.OpenXmlFormats.Spreadsheet.CT_colItems : object {
    private List`1<CT_I> iField;
    private UInt32 countField;
    private bool countFieldSpecified;
    [XmlElementAttribute("i")]
public List`1<CT_I> i { get; public set; }
    [XmlAttributeAttribute]
public UInt32 count { get; public set; }
    [XmlIgnoreAttribute]
public bool countSpecified { get; public set; }
    public static CT_colItems Parse(XmlNode node, XmlNamespaceManager namespaceManager);
    internal void Write(StreamWriter sw, string nodeName);
    public List`1<CT_I> get_i();
    public void set_i(List`1<CT_I> value);
    public UInt32 get_count();
    public void set_count(UInt32 value);
    public bool get_countSpecified();
    public void set_countSpecified(bool value);
}
[XmlTypeAttribute]
[XmlRootAttribute("color")]
public class NPOI.OpenXmlFormats.Spreadsheet.CT_Color : object {
    private bool autoField;
    private UInt32 indexedField;
    private Byte[] rgbField;
    private UInt32 themeField;
    private double tintField;
    private bool autoSpecifiedField;
    private bool indexedSpecifiedField;
    private bool rgbSpecifiedField;
    private bool themeSpecifiedField;
    private bool tintSpecifiedField;
    [XmlAttributeAttribute]
public bool auto { get; public set; }
    [XmlIgnoreAttribute]
public bool autoSpecified { get; public set; }
    [XmlAttributeAttribute]
public UInt32 indexed { get; public set; }
    [XmlIgnoreAttribute]
public bool indexedSpecified { get; public set; }
    [XmlAttributeAttribute]
public Byte[] rgb { get; public set; }
    [XmlIgnoreAttribute]
public bool rgbSpecified { get; public set; }
    [XmlAttributeAttribute]
public UInt32 theme { get; public set; }
    [XmlIgnoreAttribute]
public bool themeSpecified { get; public set; }
    [DefaultValueAttribute("0")]
[XmlAttributeAttribute]
public double tint { get; public set; }
    [XmlIgnoreAttribute]
public bool tintSpecified { get; public set; }
    public bool get_auto();
    public void set_auto(bool value);
    public bool get_autoSpecified();
    public void set_autoSpecified(bool value);
    public bool IsSetAuto();
    public UInt32 get_indexed();
    public void set_indexed(UInt32 value);
    public bool get_indexedSpecified();
    public void set_indexedSpecified(bool value);
    public bool IsSetIndexed();
    public Byte[] get_rgb();
    public void set_rgb(Byte[] value);
    public bool get_rgbSpecified();
    public void set_rgbSpecified(bool value);
    public void SetRgb(byte R, byte G, byte B);
    public bool IsSetRgb();
    public void SetRgb(Byte[] rgb);
    public Byte[] GetRgb();
    public UInt32 get_theme();
    public void set_theme(UInt32 value);
    public bool get_themeSpecified();
    public void set_themeSpecified(bool value);
    public bool IsSetTheme();
    public double get_tint();
    public void set_tint(double value);
    public bool get_tintSpecified();
    public void set_tintSpecified(bool value);
    public bool IsSetTint();
    public static CT_Color Parse(XmlNode node, XmlNamespaceManager namespaceManager);
    internal void Write(StreamWriter sw, string nodeName);
    public CT_Color Copy();
    public void UnsetIndexed();
}
public class NPOI.OpenXmlFormats.Spreadsheet.CT_ColorFilter : object {
    private UInt32 dxfIdField;
    private bool dxfIdFieldSpecified;
    private bool cellColorField;
    public UInt32 dxfId { get; public set; }
    [XmlIgnoreAttribute]
public bool dxfIdSpecified { get; public set; }
    [DefaultValueAttribute("True")]
public bool cellColor { get; public set; }
    public UInt32 get_dxfId();
    public void set_dxfId(UInt32 value);
    public bool get_dxfIdSpecified();
    public void set_dxfIdSpecified(bool value);
    public bool get_cellColor();
    public void set_cellColor(bool value);
}
[XmlTypeAttribute]
public class NPOI.OpenXmlFormats.Spreadsheet.CT_Colors : object {
    private List`1<CT_RgbColor> indexedColorsField;
    private List`1<CT_Color> mruColorsField;
    [XmlArrayAttribute]
[XmlArrayItemAttribute("rgbColor")]
public List`1<CT_RgbColor> indexedColors { get; public set; }
    [XmlArrayAttribute]
[XmlArrayItemAttribute("color")]
public List`1<CT_Color> mruColors { get; public set; }
    public static CT_Colors Parse(XmlNode node, XmlNamespaceManager namespaceManager);
    internal void Write(StreamWriter sw, string nodeName);
    public List`1<CT_RgbColor> get_indexedColors();
    public void set_indexedColors(List`1<CT_RgbColor> value);
    public List`1<CT_Color> get_mruColors();
    public void set_mruColors(List`1<CT_Color> value);
}
[XmlTypeAttribute]
public class NPOI.OpenXmlFormats.Spreadsheet.CT_ColorScale : object {
    private List`1<CT_Cfvo> cfvoField;
    private List`1<CT_Color> colorField;
    public List`1<CT_Cfvo> cfvo { get; public set; }
    public List`1<CT_Color> color { get; public set; }
    public List`1<CT_Cfvo> get_cfvo();
    public void set_cfvo(List`1<CT_Cfvo> value);
    public List`1<CT_Color> get_color();
    public void set_color(List`1<CT_Color> value);
    public static CT_ColorScale Parse(XmlNode node, XmlNamespaceManager namespaceManager);
    public CT_Cfvo AddNewCfvo();
    public CT_Color AddNewColor();
    public void RemoveCfvo(int p);
    public void RemoveColor(int p);
    public int SizeOfCfvoArray();
    public int SizeOfColorArray();
    internal void Write(StreamWriter sw, string nodeName);
}
[XmlTypeAttribute]
public class NPOI.OpenXmlFormats.Spreadsheet.CT_Cols : object {
    private List`1<CT_Col> colField;
    [XmlElementAttribute]
public List`1<CT_Col> col { get; public set; }
    public void SetColArray(List`1<CT_Col> array);
    public CT_Col AddNewCol();
    public CT_Col InsertNewCol(int index);
    public void RemoveCol(int index);
    public void RemoveCols(IList`1<CT_Col> toRemove);
    public int sizeOfColArray();
    public CT_Col GetColArray(int index);
    public List`1<CT_Col> GetColList();
    public List`1<CT_Col> get_col();
    public void set_col(List`1<CT_Col> value);
    public static CT_Cols Parse(XmlNode node, XmlNamespaceManager namespaceManager);
    internal void Write(StreamWriter sw, string nodeName);
    public void SetColArray(CT_Col[] colArray);
}
[XmlTypeAttribute]
[XmlRootAttribute]
public class NPOI.OpenXmlFormats.Spreadsheet.CT_Comment : object {
    private CT_Rst textField;
    private string refField;
    private UInt32 authorIdField;
    private string guidField;
    [XmlElementAttribute("text")]
public CT_Rst text { get; public set; }
    [XmlAttributeAttribute("ref")]
public string ref { get; public set; }
    [XmlAttributeAttribute("authorId")]
public UInt32 authorId { get; public set; }
    [XmlAttributeAttribute("guid")]
public string guid { get; public set; }
    public static CT_Comment Parse(XmlNode node, XmlNamespaceManager namespaceManager);
    internal void Write(StreamWriter sw, string nodeName);
    public CT_Rst get_text();
    public void set_text(CT_Rst value);
    public string get_ref();
    public void set_ref(string value);
    public UInt32 get_authorId();
    public void set_authorId(UInt32 value);
    public string get_guid();
    public void set_guid(string value);
    public void Set(CT_Comment comment);
}
public class NPOI.OpenXmlFormats.Spreadsheet.CT_CommentList : object {
    private List`1<CT_Comment> commentField;
    [XmlElementAttribute("comment")]
public List`1<CT_Comment> comment { get; public set; }
    public static CT_CommentList Parse(XmlNode node, XmlNamespaceManager namespaceManager);
    internal void Write(StreamWriter sw, string nodeName);
    public CT_Comment GetCommentArray(int index);
    public void RemoveComment(int index);
    public int SizeOfCommentArray();
    public CT_Comment InsertNewComment(int index);
    public CT_Comment AddNewComment();
    public List`1<CT_Comment> get_comment();
    public void set_comment(List`1<CT_Comment> value);
    public CT_Comment[] GetCommentArray();
}
[XmlTypeAttribute]
[XmlRootAttribute]
public class NPOI.OpenXmlFormats.Spreadsheet.CT_Comments : object {
    private CT_Authors authorsField;
    private CT_CommentList commentListField;
    private CT_ExtensionList extLstField;
    [XmlElementAttribute("authors")]
public CT_Authors authors { get; public set; }
    [XmlElementAttribute("commentList")]
public CT_CommentList commentList { get; public set; }
    [XmlElementAttribute("extLst")]
public CT_ExtensionList extLst { get; public set; }
    public static CT_Comments Parse(XmlNode node, XmlNamespaceManager namespaceManager);
    internal void Write(StreamWriter sw);
    public CT_Authors AddNewAuthors();
    public void AddNewCommentList();
    public CT_Authors get_authors();
    public void set_authors(CT_Authors value);
    public CT_CommentList get_commentList();
    public void set_commentList(CT_CommentList value);
    public CT_ExtensionList get_extLst();
    public void set_extLst(CT_ExtensionList value);
}
[XmlTypeAttribute]
[XmlRootAttribute]
public class NPOI.OpenXmlFormats.Spreadsheet.CT_ConditionalFormat : object {
    private CT_PivotAreas pivotAreasField;
    private CT_ExtensionList extLstField;
    private ST_Scope scopeField;
    private ST_Type typeField;
    private UInt32 priorityField;
    [XmlElementAttribute]
public CT_PivotAreas pivotAreas { get; public set; }
    [XmlElementAttribute]
public CT_ExtensionList extLst { get; public set; }
    [XmlAttributeAttribute]
[DefaultValueAttribute("Mono.Cecil.CustomAttributeArgument")]
public ST_Scope scope { get; public set; }
    [XmlAttributeAttribute]
[DefaultValueAttribute("Mono.Cecil.CustomAttributeArgument")]
public ST_Type type { get; public set; }
    [XmlAttributeAttribute]
public UInt32 priority { get; public set; }
    public static CT_ConditionalFormat Parse(XmlNode node, XmlNamespaceManager namespaceManager);
    internal void Write(StreamWriter sw, string nodeName);
    public CT_PivotAreas get_pivotAreas();
    public void set_pivotAreas(CT_PivotAreas value);
    public CT_ExtensionList get_extLst();
    public void set_extLst(CT_ExtensionList value);
    public ST_Scope get_scope();
    public void set_scope(ST_Scope value);
    public ST_Type get_type();
    public void set_type(ST_Type value);
    public UInt32 get_priority();
    public void set_priority(UInt32 value);
}
[XmlTypeAttribute]
[XmlRootAttribute]
public class NPOI.OpenXmlFormats.Spreadsheet.CT_ConditionalFormats : object {
    private List`1<CT_ConditionalFormat> conditionalFormatField;
    private UInt32 countField;
    [XmlElementAttribute("conditionalFormat")]
public List`1<CT_ConditionalFormat> conditionalFormat { get; public set; }
    [XmlAttributeAttribute]
[DefaultValueAttribute("System.UInt32", "0")]
public UInt32 count { get; public set; }
    public static CT_ConditionalFormats Parse(XmlNode node, XmlNamespaceManager namespaceManager);
    internal void Write(StreamWriter sw, string nodeName);
    public List`1<CT_ConditionalFormat> get_conditionalFormat();
    public void set_conditionalFormat(List`1<CT_ConditionalFormat> value);
    public UInt32 get_count();
    public void set_count(UInt32 value);
}
[XmlTypeAttribute]
public class NPOI.OpenXmlFormats.Spreadsheet.CT_ConditionalFormatting : object {
    private List`1<CT_CfRule> cfRuleField;
    private CT_ExtensionList extLstField;
    private bool pivotField;
    private string sqrefField;
    [XmlElementAttribute]
public List`1<CT_CfRule> cfRule { get; public set; }
    [XmlElementAttribute]
public CT_ExtensionList extLst { get; public set; }
    [XmlAttributeAttribute]
[DefaultValueAttribute("False")]
public bool pivot { get; public set; }
    [XmlAttributeAttribute]
public string sqref { get; public set; }
    public static CT_ConditionalFormatting Parse(XmlNode node, XmlNamespaceManager namespaceManager);
    internal void Write(StreamWriter sw, string nodeName);
    public int sizeOfCfRuleArray();
    public void Set(CT_ConditionalFormatting obj);
    public CT_CfRule GetCfRuleArray(int index);
    public CT_CfRule AddNewCfRule();
    public List`1<CT_CfRule> get_cfRule();
    public void set_cfRule(List`1<CT_CfRule> value);
    public CT_ExtensionList get_extLst();
    public void set_extLst(CT_ExtensionList value);
    public bool get_pivot();
    public void set_pivot(bool value);
    public string get_sqref();
    public void set_sqref(string value);
}
[XmlTypeAttribute]
[XmlRootAttribute]
public class NPOI.OpenXmlFormats.Spreadsheet.CT_Consolidation : object {
    private CT_Pages pagesField;
    private CT_RangeSets rangeSetsField;
    private bool autoPageField;
    [XmlElementAttribute]
public CT_Pages pages { get; public set; }
    [XmlElementAttribute]
public CT_RangeSets rangeSets { get; public set; }
    [XmlAttributeAttribute]
[DefaultValueAttribute("True")]
public bool autoPage { get; public set; }
    public static CT_Consolidation Parse(XmlNode node, XmlNamespaceManager namespaceManager);
    internal void Write(StreamWriter sw, string nodeName);
    public CT_Pages get_pages();
    public void set_pages(CT_Pages value);
    public CT_RangeSets get_rangeSets();
    public void set_rangeSets(CT_RangeSets value);
    public bool get_autoPage();
    public void set_autoPage(bool value);
}
[XmlTypeAttribute]
public class NPOI.OpenXmlFormats.Spreadsheet.CT_Control : object {
    private UInt32 shapeIdField;
    private string idField;
    private string nameField;
    public UInt32 shapeId { get; public set; }
    [XmlAttributeAttribute]
public string id { get; public set; }
    public string name { get; public set; }
    public UInt32 get_shapeId();
    public void set_shapeId(UInt32 value);
    public string get_id();
    public void set_id(string value);
    public string get_name();
    public void set_name(string value);
    public static CT_Control Parse(XmlNode node, XmlNamespaceManager namespaceManager);
    internal void Write(StreamWriter sw, string nodeName);
}
[XmlTypeAttribute]
public class NPOI.OpenXmlFormats.Spreadsheet.CT_Controls : object {
    private List`1<CT_Control> controlField;
    public List`1<CT_Control> control { get; public set; }
    public static CT_Controls Parse(XmlNode node, XmlNamespaceManager namespaceManager);
    internal void Write(StreamWriter sw, string nodeName);
    public List`1<CT_Control> get_control();
    public void set_control(List`1<CT_Control> value);
}
[XmlTypeAttribute]
public class NPOI.OpenXmlFormats.Spreadsheet.CT_CsPageSetup : object {
    private UInt32 paperSizeField;
    private UInt32 firstPageNumberField;
    private ST_Orientation orientationField;
    private bool usePrinterDefaultsField;
    private bool blackAndWhiteField;
    private bool draftField;
    private bool useFirstPageNumberField;
    private UInt32 horizontalDpiField;
    private UInt32 verticalDpiField;
    private UInt32 copiesField;
    private string idField;
    [DefaultValueAttribute("System.UInt32", "1")]
public UInt32 paperSize { get; public set; }
    [DefaultValueAttribute("System.UInt32", "1")]
public UInt32 firstPageNumber { get; public set; }
    [DefaultValueAttribute("Mono.Cecil.CustomAttributeArgument")]
public ST_Orientation orientation { get; public set; }
    [DefaultValueAttribute("True")]
public bool usePrinterDefaults { get; public set; }
    [DefaultValueAttribute("False")]
public bool blackAndWhite { get; public set; }
    [DefaultValueAttribute("False")]
public bool draft { get; public set; }
    [DefaultValueAttribute("False")]
public bool useFirstPageNumber { get; public set; }
    [DefaultValueAttribute("System.UInt32", "600")]
public UInt32 horizontalDpi { get; public set; }
    [DefaultValueAttribute("System.UInt32", "600")]
public UInt32 verticalDpi { get; public set; }
    [DefaultValueAttribute("System.UInt32", "1")]
public UInt32 copies { get; public set; }
    [XmlAttributeAttribute]
public string id { get; public set; }
    public static CT_CsPageSetup Parse(XmlNode node, XmlNamespaceManager namespaceManager);
    internal void Write(StreamWriter sw, string nodeName);
    public UInt32 get_paperSize();
    public void set_paperSize(UInt32 value);
    public UInt32 get_firstPageNumber();
    public void set_firstPageNumber(UInt32 value);
    public ST_Orientation get_orientation();
    public void set_orientation(ST_Orientation value);
    public bool get_usePrinterDefaults();
    public void set_usePrinterDefaults(bool value);
    public bool get_blackAndWhite();
    public void set_blackAndWhite(bool value);
    public bool get_draft();
    public void set_draft(bool value);
    public bool get_useFirstPageNumber();
    public void set_useFirstPageNumber(bool value);
    public UInt32 get_horizontalDpi();
    public void set_horizontalDpi(UInt32 value);
    public UInt32 get_verticalDpi();
    public void set_verticalDpi(UInt32 value);
    public UInt32 get_copies();
    public void set_copies(UInt32 value);
    public string get_id();
    public void set_id(string value);
}
[XmlTypeAttribute]
public class NPOI.OpenXmlFormats.Spreadsheet.CT_CustomChartsheetView : object {
    private CT_PageMargins pageMarginsField;
    private CT_CsPageSetup pageSetupField;
    private CT_HeaderFooter headerFooterField;
    private string guidField;
    private UInt32 scaleField;
    private ST_SheetState stateField;
    private bool zoomToFitField;
    public CT_PageMargins pageMargins { get; public set; }
    public CT_CsPageSetup pageSetup { get; public set; }
    public CT_HeaderFooter headerFooter { get; public set; }
    public string guid { get; public set; }
    [DefaultValueAttribute("System.UInt32", "100")]
public UInt32 scale { get; public set; }
    [DefaultValueAttribute("Mono.Cecil.CustomAttributeArgument")]
public ST_SheetState state { get; public set; }
    [DefaultValueAttribute("False")]
public bool zoomToFit { get; public set; }
    public CT_PageMargins get_pageMargins();
    public void set_pageMargins(CT_PageMargins value);
    public CT_CsPageSetup get_pageSetup();
    public void set_pageSetup(CT_CsPageSetup value);
    public CT_HeaderFooter get_headerFooter();
    public void set_headerFooter(CT_HeaderFooter value);
    public string get_guid();
    public void set_guid(string value);
    public UInt32 get_scale();
    public void set_scale(UInt32 value);
    public ST_SheetState get_state();
    public void set_state(ST_SheetState value);
    public bool get_zoomToFit();
    public void set_zoomToFit(bool value);
    public static CT_CustomChartsheetView Parse(XmlNode node, XmlNamespaceManager namespaceManager);
    internal void Write(StreamWriter sw, string nodeName);
}
[XmlTypeAttribute]
public class NPOI.OpenXmlFormats.Spreadsheet.CT_CustomChartsheetViews : object {
    private List`1<CT_CustomChartsheetView> customSheetViewField;
    public List`1<CT_CustomChartsheetView> customSheetView { get; public set; }
    public List`1<CT_CustomChartsheetView> get_customSheetView();
    public void set_customSheetView(List`1<CT_CustomChartsheetView> value);
    public static CT_CustomChartsheetViews Parse(XmlNode node, XmlNamespaceManager namespaceManager);
    internal void Write(StreamWriter sw, string nodeName);
}
public class NPOI.OpenXmlFormats.Spreadsheet.CT_CustomFilter : object {
    private ST_FilterOperator operatorField;
    private string valField;
    [DefaultValueAttribute("Mono.Cecil.CustomAttributeArgument")]
public ST_FilterOperator operator { get; public set; }
    public string val { get; public set; }
    public ST_FilterOperator get_operator();
    public void set_operator(ST_FilterOperator value);
    public string get_val();
    public void set_val(string value);
    public static CT_CustomFilter Parse(XmlNode node, XmlNamespaceManager namespaceManager);
    internal void Write(StreamWriter sw, string nodeName);
}
public class NPOI.OpenXmlFormats.Spreadsheet.CT_CustomFilters : object {
    private List`1<CT_CustomFilter> customFilterField;
    private bool andField;
    public List`1<CT_CustomFilter> customFilter { get; public set; }
    [DefaultValueAttribute("False")]
public bool and { get; public set; }
    public List`1<CT_CustomFilter> get_customFilter();
    public void set_customFilter(List`1<CT_CustomFilter> value);
    public bool get_and();
    public void set_and(bool value);
    public static CT_CustomFilters Parse(XmlNode node, XmlNamespaceManager namespaceManager);
    internal void Write(StreamWriter sw, string nodeName);
}
[XmlTypeAttribute]
public class NPOI.OpenXmlFormats.Spreadsheet.CT_CustomProperties : object {
    private List`1<CT_CustomProperty> customPrField;
    public List`1<CT_CustomProperty> customPr { get; public set; }
    public static CT_CustomProperties Parse(XmlNode node, XmlNamespaceManager namespaceManager);
    internal void Write(StreamWriter sw, string nodeName);
    public List`1<CT_CustomProperty> get_customPr();
    public void set_customPr(List`1<CT_CustomProperty> value);
}
[XmlTypeAttribute]
public class NPOI.OpenXmlFormats.Spreadsheet.CT_CustomProperty : object {
    private string nameField;
    private string idField;
    public string name { get; public set; }
    [XmlAttributeAttribute]
public string id { get; public set; }
    public string get_name();
    public void set_name(string value);
    public string get_id();
    public void set_id(string value);
    public static CT_CustomProperty Parse(XmlNode node, XmlNamespaceManager namespaceManager);
    internal void Write(StreamWriter sw, string nodeName);
}
[XmlTypeAttribute("customSheetView")]
public class NPOI.OpenXmlFormats.Spreadsheet.CT_CustomSheetView : object {
    private CT_Pane paneField;
    private CT_Selection selectionField;
    private CT_PageBreak rowBreaksField;
    private CT_PageBreak colBreaksField;
    private CT_PageMargins pageMarginsField;
    private CT_PrintOptions printOptionsField;
    private CT_PageSetup pageSetupField;
    private CT_HeaderFooter headerFooterField;
    private CT_AutoFilter autoFilterField;
    private CT_ExtensionList extLstField;
    private string guidField;
    private UInt32 scaleField;
    private UInt32 colorIdField;
    private bool showPageBreaksField;
    private bool showFormulasField;
    private bool showGridLinesField;
    private bool showRowColField;
    private bool outlineSymbolsField;
    private bool zeroValuesField;
    private bool fitToPageField;
    private bool printAreaField;
    private bool filterField;
    private bool showAutoFilterField;
    private bool hiddenRowsField;
    private bool hiddenColumnsField;
    private ST_SheetState stateField;
    private bool filterUniqueField;
    private ST_SheetViewType viewField;
    private bool showRulerField;
    private string topLeftCellField;
    public CT_Pane pane { get; public set; }
    public CT_Selection selection { get; public set; }
    public CT_PageBreak rowBreaks { get; public set; }
    public CT_PageBreak colBreaks { get; public set; }
    public CT_PageMargins pageMargins { get; public set; }
    public CT_PrintOptions printOptions { get; public set; }
    public CT_PageSetup pageSetup { get; public set; }
    public CT_HeaderFooter headerFooter { get; public set; }
    public CT_AutoFilter autoFilter { get; public set; }
    public CT_ExtensionList extLst { get; public set; }
    public string guid { get; public set; }
    [DefaultValueAttribute("System.UInt32", "100")]
public UInt32 scale { get; public set; }
    [DefaultValueAttribute("System.UInt32", "64")]
public UInt32 colorId { get; public set; }
    [DefaultValueAttribute("False")]
public bool showPageBreaks { get; public set; }
    [DefaultValueAttribute("False")]
public bool showFormulas { get; public set; }
    [DefaultValueAttribute("True")]
public bool showGridLines { get; public set; }
    [DefaultValueAttribute("True")]
public bool showRowCol { get; public set; }
    [DefaultValueAttribute("True")]
public bool outlineSymbols { get; public set; }
    [DefaultValueAttribute("True")]
public bool zeroValues { get; public set; }
    [DefaultValueAttribute("False")]
public bool fitToPage { get; public set; }
    [DefaultValueAttribute("False")]
public bool printArea { get; public set; }
    [DefaultValueAttribute("False")]
public bool filter { get; public set; }
    [DefaultValueAttribute("False")]
public bool showAutoFilter { get; public set; }
    [DefaultValueAttribute("False")]
public bool hiddenRows { get; public set; }
    [DefaultValueAttribute("False")]
public bool hiddenColumns { get; public set; }
    [DefaultValueAttribute("Mono.Cecil.CustomAttributeArgument")]
public ST_SheetState state { get; public set; }
    [DefaultValueAttribute("False")]
public bool filterUnique { get; public set; }
    [DefaultValueAttribute("Mono.Cecil.CustomAttributeArgument")]
public ST_SheetViewType view { get; public set; }
    [DefaultValueAttribute("True")]
public bool showRuler { get; public set; }
    public string topLeftCell { get; public set; }
    public CT_Pane get_pane();
    public void set_pane(CT_Pane value);
    public CT_Selection get_selection();
    public void set_selection(CT_Selection value);
    public CT_PageBreak get_rowBreaks();
    public void set_rowBreaks(CT_PageBreak value);
    public CT_PageBreak get_colBreaks();
    public void set_colBreaks(CT_PageBreak value);
    public CT_PageMargins get_pageMargins();
    public void set_pageMargins(CT_PageMargins value);
    public CT_PrintOptions get_printOptions();
    public void set_printOptions(CT_PrintOptions value);
    public CT_PageSetup get_pageSetup();
    public void set_pageSetup(CT_PageSetup value);
    public CT_HeaderFooter get_headerFooter();
    public void set_headerFooter(CT_HeaderFooter value);
    public CT_AutoFilter get_autoFilter();
    public void set_autoFilter(CT_AutoFilter value);
    public CT_ExtensionList get_extLst();
    public void set_extLst(CT_ExtensionList value);
    public string get_guid();
    public void set_guid(string value);
    public UInt32 get_scale();
    public void set_scale(UInt32 value);
    public UInt32 get_colorId();
    public void set_colorId(UInt32 value);
    public bool get_showPageBreaks();
    public void set_showPageBreaks(bool value);
    public bool get_showFormulas();
    public void set_showFormulas(bool value);
    public bool get_showGridLines();
    public void set_showGridLines(bool value);
    public bool get_showRowCol();
    public void set_showRowCol(bool value);
    public bool get_outlineSymbols();
    public void set_outlineSymbols(bool value);
    public bool get_zeroValues();
    public void set_zeroValues(bool value);
    public bool get_fitToPage();
    public void set_fitToPage(bool value);
    public bool get_printArea();
    public void set_printArea(bool value);
    public bool get_filter();
    public void set_filter(bool value);
    public bool get_showAutoFilter();
    public void set_showAutoFilter(bool value);
    public bool get_hiddenRows();
    public void set_hiddenRows(bool value);
    public bool get_hiddenColumns();
    public void set_hiddenColumns(bool value);
    public ST_SheetState get_state();
    public void set_state(ST_SheetState value);
    public bool get_filterUnique();
    public void set_filterUnique(bool value);
    public ST_SheetViewType get_view();
    public void set_view(ST_SheetViewType value);
    public bool get_showRuler();
    public void set_showRuler(bool value);
    public string get_topLeftCell();
    public void set_topLeftCell(string value);
    public static CT_CustomSheetView Parse(XmlNode node, XmlNamespaceManager namespaceManager);
    internal void Write(StreamWriter sw, string nodeName);
}
[XmlTypeAttribute]
public class NPOI.OpenXmlFormats.Spreadsheet.CT_CustomSheetViews : object {
    private List`1<CT_CustomSheetView> customSheetViewField;
    public List`1<CT_CustomSheetView> customSheetView { get; public set; }
    public static CT_CustomSheetViews Parse(XmlNode node, XmlNamespaceManager namespaceManager);
    internal void Write(StreamWriter sw, string nodeName);
    public List`1<CT_CustomSheetView> get_customSheetView();
    public void set_customSheetView(List`1<CT_CustomSheetView> value);
}
[XmlTypeAttribute]
public class NPOI.OpenXmlFormats.Spreadsheet.CT_CustomWorkbookView : object {
    private CT_ExtensionList extLstField;
    private string nameField;
    private string guidField;
    private bool autoUpdateField;
    private UInt32 mergeIntervalField;
    private bool mergeIntervalFieldSpecified;
    private bool changesSavedWinField;
    private bool onlySyncField;
    private bool personalViewField;
    private bool includePrintSettingsField;
    private bool includeHiddenRowColField;
    private bool maximizedField;
    private bool minimizedField;
    private bool showHorizontalScrollField;
    private bool showVerticalScrollField;
    private bool showSheetTabsField;
    private int xWindowField;
    private int yWindowField;
    private UInt32 windowWidthField;
    private UInt32 windowHeightField;
    private UInt32 tabRatioField;
    private UInt32 activeSheetIdField;
    private bool showFormulaBarField;
    private bool showStatusbarField;
    private ST_Comments showCommentsField;
    private ST_Objects showObjectsField;
    [XmlElementAttribute]
public CT_ExtensionList extLst { get; public set; }
    [XmlAttributeAttribute]
public string name { get; public set; }
    [XmlAttributeAttribute]
public string guid { get; public set; }
    [XmlAttributeAttribute]
[DefaultValueAttribute("False")]
public bool autoUpdate { get; public set; }
    [XmlAttributeAttribute]
public UInt32 mergeInterval { get; public set; }
    [XmlIgnoreAttribute]
public bool mergeIntervalSpecified { get; public set; }
    [XmlAttributeAttribute]
[DefaultValueAttribute("False")]
public bool changesSavedWin { get; public set; }
    [XmlAttributeAttribute]
[DefaultValueAttribute("False")]
public bool onlySync { get; public set; }
    [XmlAttributeAttribute]
[DefaultValueAttribute("False")]
public bool personalView { get; public set; }
    [XmlAttributeAttribute]
[DefaultValueAttribute("True")]
public bool includePrintSettings { get; public set; }
    [XmlAttributeAttribute]
[DefaultValueAttribute("True")]
public bool includeHiddenRowCol { get; public set; }
    [XmlAttributeAttribute]
[DefaultValueAttribute("False")]
public bool maximized { get; public set; }
    [XmlAttributeAttribute]
[DefaultValueAttribute("False")]
public bool minimized { get; public set; }
    [XmlAttributeAttribute]
[DefaultValueAttribute("True")]
public bool showHorizontalScroll { get; public set; }
    [XmlAttributeAttribute]
[DefaultValueAttribute("True")]
public bool showVerticalScroll { get; public set; }
    [XmlAttributeAttribute]
[DefaultValueAttribute("True")]
public bool showSheetTabs { get; public set; }
    [XmlAttributeAttribute]
[DefaultValueAttribute("0")]
public int xWindow { get; public set; }
    [XmlAttributeAttribute]
[DefaultValueAttribute("0")]
public int yWindow { get; public set; }
    [XmlAttributeAttribute]
public UInt32 windowWidth { get; public set; }
    [XmlAttributeAttribute]
public UInt32 windowHeight { get; public set; }
    [XmlAttributeAttribute]
[DefaultValueAttribute("System.UInt32", "600")]
public UInt32 tabRatio { get; public set; }
    [XmlAttributeAttribute]
public UInt32 activeSheetId { get; public set; }
    [XmlAttributeAttribute]
[DefaultValueAttribute("True")]
public bool showFormulaBar { get; public set; }
    [XmlAttributeAttribute]
[DefaultValueAttribute("True")]
public bool showStatusbar { get; public set; }
    [XmlAttributeAttribute]
[DefaultValueAttribute("Mono.Cecil.CustomAttributeArgument")]
public ST_Comments showComments { get; public set; }
    [XmlAttributeAttribute]
[DefaultValueAttribute("Mono.Cecil.CustomAttributeArgument")]
public ST_Objects showObjects { get; public set; }
    public static CT_CustomWorkbookView Parse(XmlNode node, XmlNamespaceManager namespaceManager);
    internal void Write(StreamWriter sw, string nodeName);
    public CT_ExtensionList get_extLst();
    public void set_extLst(CT_ExtensionList value);
    public string get_name();
    public void set_name(string value);
    public string get_guid();
    public void set_guid(string value);
    public bool get_autoUpdate();
    public void set_autoUpdate(bool value);
    public UInt32 get_mergeInterval();
    public void set_mergeInterval(UInt32 value);
    public bool get_mergeIntervalSpecified();
    public void set_mergeIntervalSpecified(bool value);
    public bool get_changesSavedWin();
    public void set_changesSavedWin(bool value);
    public bool get_onlySync();
    public void set_onlySync(bool value);
    public bool get_personalView();
    public void set_personalView(bool value);
    public bool get_includePrintSettings();
    public void set_includePrintSettings(bool value);
    public bool get_includeHiddenRowCol();
    public void set_includeHiddenRowCol(bool value);
    public bool get_maximized();
    public void set_maximized(bool value);
    public bool get_minimized();
    public void set_minimized(bool value);
    public bool get_showHorizontalScroll();
    public void set_showHorizontalScroll(bool value);
    public bool get_showVerticalScroll();
    public void set_showVerticalScroll(bool value);
    public bool get_showSheetTabs();
    public void set_showSheetTabs(bool value);
    public int get_xWindow();
    public void set_xWindow(int value);
    public int get_yWindow();
    public void set_yWindow(int value);
    public UInt32 get_windowWidth();
    public void set_windowWidth(UInt32 value);
    public UInt32 get_windowHeight();
    public void set_windowHeight(UInt32 value);
    public UInt32 get_tabRatio();
    public void set_tabRatio(UInt32 value);
    public UInt32 get_activeSheetId();
    public void set_activeSheetId(UInt32 value);
    public bool get_showFormulaBar();
    public void set_showFormulaBar(bool value);
    public bool get_showStatusbar();
    public void set_showStatusbar(bool value);
    public ST_Comments get_showComments();
    public void set_showComments(ST_Comments value);
    public ST_Objects get_showObjects();
    public void set_showObjects(ST_Objects value);
}
[XmlTypeAttribute]
public class NPOI.OpenXmlFormats.Spreadsheet.CT_CustomWorkbookViews : object {
    private List`1<CT_CustomWorkbookView> customWorkbookViewField;
    [XmlElementAttribute]
public List`1<CT_CustomWorkbookView> customWorkbookView { get; public set; }
    public static CT_CustomWorkbookViews Parse(XmlNode node, XmlNamespaceManager namespaceManager);
    internal void Write(StreamWriter sw, string nodeName);
    public List`1<CT_CustomWorkbookView> get_customWorkbookView();
    public void set_customWorkbookView(List`1<CT_CustomWorkbookView> value);
}
[XmlTypeAttribute]
public class NPOI.OpenXmlFormats.Spreadsheet.CT_DataBar : object {
    private List`1<CT_Cfvo> cfvoField;
    private CT_Color colorField;
    private UInt32 minLengthField;
    private UInt32 maxLengthField;
    private bool showValueField;
    public List`1<CT_Cfvo> cfvo { get; public set; }
    public CT_Color color { get; public set; }
    [DefaultValueAttribute("System.UInt32", "10")]
public UInt32 minLength { get; public set; }
    [DefaultValueAttribute("System.UInt32", "90")]
public UInt32 maxLength { get; public set; }
    [DefaultValueAttribute("True")]
public bool showValue { get; public set; }
    public List`1<CT_Cfvo> get_cfvo();
    public void set_cfvo(List`1<CT_Cfvo> value);
    public CT_Color get_color();
    public void set_color(CT_Color value);
    public UInt32 get_minLength();
    public void set_minLength(UInt32 value);
    public UInt32 get_maxLength();
    public void set_maxLength(UInt32 value);
    public bool get_showValue();
    public void set_showValue(bool value);
    public static CT_DataBar Parse(XmlNode node, XmlNamespaceManager namespaceManager);
    public CT_Cfvo AddNewCfvo();
    public bool IsSetShowValue();
    internal void Write(StreamWriter sw, string nodeName);
}
[DebuggerStepThroughAttribute]
[DesignerCategoryAttribute("code")]
[XmlTypeAttribute]
public class NPOI.OpenXmlFormats.Spreadsheet.CT_DataBinding : object {
    private XmlElement anyField;
    private string dataBindingNameField;
    private Nullable`1<bool> fileBindingField;
    private Nullable`1<UInt32> connectionIDField;
    private string fileBindingNameField;
    private UInt32 dataBindingLoadModeField;
    [XmlAnyElementAttribute]
public XmlElement Any { get; public set; }
    [XmlAttributeAttribute]
public string DataBindingName { get; public set; }
    [XmlIgnoreAttribute]
public bool outlineSpecified { get; }
    [XmlAttributeAttribute]
public bool FileBinding { get; public set; }
    [XmlIgnoreAttribute]
public bool FileBindingSpecified { get; }
    [XmlAttributeAttribute]
public UInt32 ConnectionID { get; public set; }
    [XmlIgnoreAttribute]
public bool ConnectionIDSpecified { get; }
    [XmlAttributeAttribute]
public string FileBindingName { get; public set; }
    [XmlIgnoreAttribute]
public bool FileBindingNameSpecified { get; }
    [XmlAttributeAttribute]
public UInt32 DataBindingLoadMode { get; public set; }
    public static CT_DataBinding Parse(XmlNode ele, XmlNamespaceManager namespaceManager);
    internal void Write(StreamWriter sw, string nodeName);
    public XmlElement get_Any();
    public void set_Any(XmlElement value);
    public string get_DataBindingName();
    public void set_DataBindingName(string value);
    public bool get_outlineSpecified();
    public bool get_FileBinding();
    public void set_FileBinding(bool value);
    public bool get_FileBindingSpecified();
    public UInt32 get_ConnectionID();
    public void set_ConnectionID(UInt32 value);
    public bool get_ConnectionIDSpecified();
    public string get_FileBindingName();
    public void set_FileBindingName(string value);
    public bool get_FileBindingNameSpecified();
    public UInt32 get_DataBindingLoadMode();
    public void set_DataBindingLoadMode(UInt32 value);
}
[XmlTypeAttribute]
public class NPOI.OpenXmlFormats.Spreadsheet.CT_DataConsolidate : object {
    private CT_DataRefs dataRefsField;
    private ST_DataConsolidateFunction functionField;
    private bool leftLabelsField;
    private bool topLabelsField;
    private bool linkField;
    public CT_DataRefs dataRefs { get; public set; }
    [DefaultValueAttribute("Mono.Cecil.CustomAttributeArgument")]
public ST_DataConsolidateFunction function { get; public set; }
    [DefaultValueAttribute("False")]
public bool leftLabels { get; public set; }
    [DefaultValueAttribute("False")]
public bool topLabels { get; public set; }
    [DefaultValueAttribute("False")]
public bool link { get; public set; }
    public CT_DataRefs get_dataRefs();
    public void set_dataRefs(CT_DataRefs value);
    public ST_DataConsolidateFunction get_function();
    public void set_function(ST_DataConsolidateFunction value);
    public bool get_leftLabels();
    public void set_leftLabels(bool value);
    public bool get_topLabels();
    public void set_topLabels(bool value);
    public bool get_link();
    public void set_link(bool value);
    public static CT_DataConsolidate Parse(XmlNode node, XmlNamespaceManager namespaceManager);
    internal void Write(StreamWriter sw, string nodeName);
}
[XmlTypeAttribute]
[XmlRootAttribute]
public class NPOI.OpenXmlFormats.Spreadsheet.CT_DataField : object {
    private CT_ExtensionList extLstField;
    private string nameField;
    private UInt32 fldField;
    private ST_DataConsolidateFunction subtotalField;
    private ST_ShowDataAs showDataAsField;
    private int baseFieldField;
    private UInt32 baseItemField;
    private UInt32 numFmtIdField;
    private bool numFmtIdFieldSpecified;
    [XmlElementAttribute]
public CT_ExtensionList extLst { get; public set; }
    [XmlAttributeAttribute]
public string name { get; public set; }
    [XmlAttributeAttribute]
public UInt32 fld { get; public set; }
    [XmlAttributeAttribute]
[DefaultValueAttribute("Mono.Cecil.CustomAttributeArgument")]
public ST_DataConsolidateFunction subtotal { get; public set; }
    [XmlAttributeAttribute]
[DefaultValueAttribute("Mono.Cecil.CustomAttributeArgument")]
public ST_ShowDataAs showDataAs { get; public set; }
    [XmlAttributeAttribute]
[DefaultValueAttribute("-1")]
public int baseField { get; public set; }
    [XmlAttributeAttribute]
[DefaultValueAttribute("System.UInt32", "1048832")]
public UInt32 baseItem { get; public set; }
    [XmlAttributeAttribute]
public UInt32 numFmtId { get; public set; }
    [XmlIgnoreAttribute]
public bool numFmtIdSpecified { get; public set; }
    public static CT_DataField Parse(XmlNode node, XmlNamespaceManager namespaceManager);
    internal void Write(StreamWriter sw, string nodeName);
    public CT_ExtensionList get_extLst();
    public void set_extLst(CT_ExtensionList value);
    public string get_name();
    public void set_name(string value);
    public UInt32 get_fld();
    public void set_fld(UInt32 value);
    public ST_DataConsolidateFunction get_subtotal();
    public void set_subtotal(ST_DataConsolidateFunction value);
    public ST_ShowDataAs get_showDataAs();
    public void set_showDataAs(ST_ShowDataAs value);
    public int get_baseField();
    public void set_baseField(int value);
    public UInt32 get_baseItem();
    public void set_baseItem(UInt32 value);
    public UInt32 get_numFmtId();
    public void set_numFmtId(UInt32 value);
    public bool get_numFmtIdSpecified();
    public void set_numFmtIdSpecified(bool value);
}
[XmlTypeAttribute]
[XmlRootAttribute]
public class NPOI.OpenXmlFormats.Spreadsheet.CT_DataFields : object {
    private List`1<CT_DataField> dataFieldField;
    private UInt32 countField;
    private bool countFieldSpecified;
    [XmlElementAttribute("dataField")]
public List`1<CT_DataField> dataField { get; public set; }
    [XmlAttributeAttribute]
public UInt32 count { get; public set; }
    [XmlIgnoreAttribute]
public bool countSpecified { get; public set; }
    public static CT_DataFields Parse(XmlNode node, XmlNamespaceManager namespaceManager);
    internal void Write(StreamWriter sw, string nodeName);
    public List`1<CT_DataField> get_dataField();
    public void set_dataField(List`1<CT_DataField> value);
    public UInt32 get_count();
    public void set_count(UInt32 value);
    public bool get_countSpecified();
    public void set_countSpecified(bool value);
    public CT_DataField AddNewDataField();
    public UInt32 SizeOfDataFieldArray();
}
[XmlTypeAttribute]
public class NPOI.OpenXmlFormats.Spreadsheet.CT_DataRef : object {
    private string refField;
    private string nameField;
    private string sheetField;
    private string idField;
    public string ref { get; public set; }
    public string name { get; public set; }
    public string sheet { get; public set; }
    [XmlAttributeAttribute]
public string id { get; public set; }
    public string get_ref();
    public void set_ref(string value);
    public string get_name();
    public void set_name(string value);
    public string get_sheet();
    public void set_sheet(string value);
    public string get_id();
    public void set_id(string value);
    public static CT_DataRef Parse(XmlNode node, XmlNamespaceManager namespaceManager);
    internal void Write(StreamWriter sw, string nodeName);
}
[XmlTypeAttribute]
public class NPOI.OpenXmlFormats.Spreadsheet.CT_DataRefs : object {
    private List`1<CT_DataRef> dataRefField;
    private UInt32 countField;
    private bool countFieldSpecified;
    public List`1<CT_DataRef> dataRef { get; public set; }
    public UInt32 count { get; public set; }
    [XmlIgnoreAttribute]
public bool countSpecified { get; public set; }
    public List`1<CT_DataRef> get_dataRef();
    public void set_dataRef(List`1<CT_DataRef> value);
    public UInt32 get_count();
    public void set_count(UInt32 value);
    public bool get_countSpecified();
    public void set_countSpecified(bool value);
    public static CT_DataRefs Parse(XmlNode node, XmlNamespaceManager namespaceManager);
    internal void Write(StreamWriter sw, string nodeName);
}
[XmlTypeAttribute]
[XmlRootAttribute]
public class NPOI.OpenXmlFormats.Spreadsheet.CT_DataValidation : object {
    private string formula1Field;
    private string formula2Field;
    private ST_DataValidationType typeField;
    private ST_DataValidationErrorStyle errorStyleField;
    private ST_DataValidationImeMode imeModeField;
    private ST_DataValidationOperator operatorField;
    private bool allowBlankField;
    private bool showDropDownField;
    private bool showInputMessageField;
    private bool showErrorMessageField;
    private string errorTitleField;
    private string errorField;
    private string promptTitleField;
    private string promptField;
    private string sqrefField;
    [XmlElementAttribute]
public string formula1 { get; public set; }
    [XmlElementAttribute]
public string formula2 { get; public set; }
    [XmlAttributeAttribute]
[DefaultValueAttribute("Mono.Cecil.CustomAttributeArgument")]
public ST_DataValidationType type { get; public set; }
    [XmlAttributeAttribute]
[DefaultValueAttribute("Mono.Cecil.CustomAttributeArgument")]
public ST_DataValidationErrorStyle errorStyle { get; public set; }
    [XmlAttributeAttribute]
[DefaultValueAttribute("Mono.Cecil.CustomAttributeArgument")]
public ST_DataValidationImeMode imeMode { get; public set; }
    [XmlAttributeAttribute]
[DefaultValueAttribute("Mono.Cecil.CustomAttributeArgument")]
public ST_DataValidationOperator operator { get; public set; }
    [XmlAttributeAttribute]
[DefaultValueAttribute("False")]
public bool allowBlank { get; public set; }
    [XmlAttributeAttribute]
[DefaultValueAttribute("False")]
public bool showDropDown { get; public set; }
    [XmlAttributeAttribute]
[DefaultValueAttribute("False")]
public bool showInputMessage { get; public set; }
    [XmlAttributeAttribute]
[DefaultValueAttribute("False")]
public bool showErrorMessage { get; public set; }
    [XmlAttributeAttribute]
public string errorTitle { get; public set; }
    [XmlAttributeAttribute]
public string error { get; public set; }
    [XmlAttributeAttribute]
public string promptTitle { get; public set; }
    [XmlAttributeAttribute]
public string prompt { get; public set; }
    [XmlAttributeAttribute]
public string sqref { get; public set; }
    public static CT_DataValidation Parse(XmlNode node, XmlNamespaceManager namespaceManager);
    internal void Write(StreamWriter sw, string nodeName);
    public void Set(CT_DataValidation obj);
    public virtual bool Equals(object obj);
    public string get_formula1();
    public void set_formula1(string value);
    public string get_formula2();
    public void set_formula2(string value);
    public ST_DataValidationType get_type();
    public void set_type(ST_DataValidationType value);
    public ST_DataValidationErrorStyle get_errorStyle();
    public void set_errorStyle(ST_DataValidationErrorStyle value);
    public ST_DataValidationImeMode get_imeMode();
    public void set_imeMode(ST_DataValidationImeMode value);
    public ST_DataValidationOperator get_operator();
    public void set_operator(ST_DataValidationOperator value);
    public bool get_allowBlank();
    public void set_allowBlank(bool value);
    public bool get_showDropDown();
    public void set_showDropDown(bool value);
    public bool get_showInputMessage();
    public void set_showInputMessage(bool value);
    public bool get_showErrorMessage();
    public void set_showErrorMessage(bool value);
    public string get_errorTitle();
    public void set_errorTitle(string value);
    public string get_error();
    public void set_error(string value);
    public string get_promptTitle();
    public void set_promptTitle(string value);
    public string get_prompt();
    public void set_prompt(string value);
    public string get_sqref();
    public void set_sqref(string value);
}
[XmlTypeAttribute]
[XmlRootAttribute]
public class NPOI.OpenXmlFormats.Spreadsheet.CT_DataValidations : object {
    private List`1<CT_DataValidation> dataValidationField;
    private bool disablePromptsField;
    private UInt32 xWindowField;
    private bool xWindowFieldSpecified;
    private UInt32 yWindowField;
    private bool yWindowFieldSpecified;
    private UInt32 countField;
    private bool countFieldSpecified;
    [XmlElementAttribute("dataValidation")]
public List`1<CT_DataValidation> dataValidation { get; public set; }
    [DefaultValueAttribute("False")]
[XmlAttributeAttribute]
public bool disablePrompts { get; public set; }
    [XmlAttributeAttribute]
public UInt32 xWindow { get; public set; }
    [XmlIgnoreAttribute]
public bool xWindowSpecified { get; public set; }
    [XmlAttributeAttribute]
public UInt32 yWindow { get; public set; }
    [XmlIgnoreAttribute]
public bool yWindowSpecified { get; public set; }
    [XmlAttributeAttribute]
public UInt32 count { get; public set; }
    [XmlIgnoreAttribute]
public bool countSpecified { get; public set; }
    public static CT_DataValidations Parse(XmlNode node, XmlNamespaceManager namespaceManager);
    internal void Write(StreamWriter sw, string nodeName);
    public List`1<CT_DataValidation> get_dataValidation();
    public void set_dataValidation(List`1<CT_DataValidation> value);
    public bool get_disablePrompts();
    public void set_disablePrompts(bool value);
    public UInt32 get_xWindow();
    public void set_xWindow(UInt32 value);
    public bool get_xWindowSpecified();
    public void set_xWindowSpecified(bool value);
    public UInt32 get_yWindow();
    public void set_yWindow(UInt32 value);
    public bool get_yWindowSpecified();
    public void set_yWindowSpecified(bool value);
    public UInt32 get_count();
    public void set_count(UInt32 value);
    public bool get_countSpecified();
    public void set_countSpecified(bool value);
    public int sizeOfDataValidationArray();
    public CT_DataValidation AddNewDataValidation();
}
public class NPOI.OpenXmlFormats.Spreadsheet.CT_DateGroupItem : object {
    private ushort yearField;
    private ushort monthField;
    private bool monthFieldSpecified;
    private ushort dayField;
    private bool dayFieldSpecified;
    private ushort hourField;
    private bool hourFieldSpecified;
    private ushort minuteField;
    private bool minuteFieldSpecified;
    private ushort secondField;
    private bool secondFieldSpecified;
    private ST_DateTimeGrouping dateTimeGroupingField;
    public ushort year { get; public set; }
    public ushort month { get; public set; }
    [XmlIgnoreAttribute]
public bool monthSpecified { get; public set; }
    public ushort day { get; public set; }
    [XmlIgnoreAttribute]
public bool daySpecified { get; public set; }
    public ushort hour { get; public set; }
    [XmlIgnoreAttribute]
public bool hourSpecified { get; public set; }
    public ushort minute { get; public set; }
    [XmlIgnoreAttribute]
public bool minuteSpecified { get; public set; }
    public ushort second { get; public set; }
    [XmlIgnoreAttribute]
public bool secondSpecified { get; public set; }
    public ST_DateTimeGrouping dateTimeGrouping { get; public set; }
    public ushort get_year();
    public void set_year(ushort value);
    public ushort get_month();
    public void set_month(ushort value);
    public bool get_monthSpecified();
    public void set_monthSpecified(bool value);
    public ushort get_day();
    public void set_day(ushort value);
    public bool get_daySpecified();
    public void set_daySpecified(bool value);
    public ushort get_hour();
    public void set_hour(ushort value);
    public bool get_hourSpecified();
    public void set_hourSpecified(bool value);
    public ushort get_minute();
    public void set_minute(ushort value);
    public bool get_minuteSpecified();
    public void set_minuteSpecified(bool value);
    public ushort get_second();
    public void set_second(ushort value);
    public bool get_secondSpecified();
    public void set_secondSpecified(bool value);
    public ST_DateTimeGrouping get_dateTimeGrouping();
    public void set_dateTimeGrouping(ST_DateTimeGrouping value);
}
[XmlTypeAttribute]
[XmlRootAttribute]
public class NPOI.OpenXmlFormats.Spreadsheet.CT_DateTime : object {
    private List`1<CT_X> xField;
    private Nullable`1<DateTime> vField;
    private bool uField;
    private bool uFieldSpecified;
    private bool fField;
    private bool fFieldSpecified;
    private string cField;
    private UInt32 cpField;
    private bool cpFieldSpecified;
    [XmlElementAttribute("x")]
public List`1<CT_X> x { get; public set; }
    [XmlAttributeAttribute]
public Nullable`1<DateTime> v { get; public set; }
    [XmlAttributeAttribute]
public bool u { get; public set; }
    [XmlIgnoreAttribute]
public bool uSpecified { get; public set; }
    [XmlAttributeAttribute]
public bool f { get; public set; }
    [XmlIgnoreAttribute]
public bool fSpecified { get; public set; }
    [XmlAttributeAttribute]
public string c { get; public set; }
    [XmlAttributeAttribute]
public UInt32 cp { get; public set; }
    [XmlIgnoreAttribute]
public bool cpSpecified { get; public set; }
    public static CT_DateTime Parse(XmlNode node, XmlNamespaceManager namespaceManager);
    internal void Write(StreamWriter sw, string nodeName);
    public List`1<CT_X> get_x();
    public void set_x(List`1<CT_X> value);
    public Nullable`1<DateTime> get_v();
    public void set_v(Nullable`1<DateTime> value);
    public bool get_u();
    public void set_u(bool value);
    public bool get_uSpecified();
    public void set_uSpecified(bool value);
    public bool get_f();
    public void set_f(bool value);
    public bool get_fSpecified();
    public void set_fSpecified(bool value);
    public string get_c();
    public void set_c(string value);
    public UInt32 get_cp();
    public void set_cp(UInt32 value);
    public bool get_cpSpecified();
    public void set_cpSpecified(bool value);
}
[DesignerCategoryAttribute("code")]
[XmlTypeAttribute]
[XmlRootAttribute]
public class NPOI.OpenXmlFormats.Spreadsheet.CT_DdeItem : object {
    private CT_DdeValues valuesField;
    private string nameField;
    private bool oleField;
    private bool adviseField;
    private bool preferPicField;
    public CT_DdeValues values { get; public set; }
    [XmlAttributeAttribute]
[DefaultValueAttribute("0")]
public string name { get; public set; }
    [XmlAttributeAttribute]
[DefaultValueAttribute("False")]
public bool ole { get; public set; }
    [XmlAttributeAttribute]
[DefaultValueAttribute("False")]
public bool advise { get; public set; }
    [XmlAttributeAttribute]
[DefaultValueAttribute("False")]
public bool preferPic { get; public set; }
    public CT_DdeValues get_values();
    public void set_values(CT_DdeValues value);
    public string get_name();
    public void set_name(string value);
    public bool get_ole();
    public void set_ole(bool value);
    public bool get_advise();
    public void set_advise(bool value);
    public bool get_preferPic();
    public void set_preferPic(bool value);
}
[DesignerCategoryAttribute("code")]
[XmlTypeAttribute]
[XmlRootAttribute]
public class NPOI.OpenXmlFormats.Spreadsheet.CT_DdeItems : object {
    private CT_DdeItem[] ddeItemField;
    [XmlElementAttribute("ddeItem")]
public CT_DdeItem[] ddeItem { get; public set; }
    public CT_DdeItem[] get_ddeItem();
    public void set_ddeItem(CT_DdeItem[] value);
}
[DesignerCategoryAttribute("code")]
[XmlTypeAttribute]
[XmlRootAttribute]
public class NPOI.OpenXmlFormats.Spreadsheet.CT_DdeLink : object {
    private List`1<CT_DdeItem> ddeItemsField;
    private string ddeServiceField;
    private string ddeTopicField;
    [XmlArrayAttribute("ddeItems")]
[XmlArrayItemAttribute("ddeItem")]
public List`1<CT_DdeItem> ddeItems { get; public set; }
    [XmlAttributeAttribute]
public string ddeService { get; public set; }
    [XmlAttributeAttribute]
public string ddeTopic { get; public set; }
    public List`1<CT_DdeItem> get_ddeItems();
    public void set_ddeItems(List`1<CT_DdeItem> value);
    public string get_ddeService();
    public void set_ddeService(string value);
    public string get_ddeTopic();
    public void set_ddeTopic(string value);
    internal static CT_DdeLink Parse(XmlNode node, XmlNamespaceManager namespaceManager);
    internal void Write(StreamWriter sw, string p);
}
[DesignerCategoryAttribute("code")]
[XmlTypeAttribute]
[XmlRootAttribute]
public class NPOI.OpenXmlFormats.Spreadsheet.CT_DdeValue : object {
    private string valField;
    private ST_DdeValueType tField;
    public string val { get; public set; }
    [XmlAttributeAttribute]
[DefaultValueAttribute("Mono.Cecil.CustomAttributeArgument")]
public ST_DdeValueType t { get; public set; }
    public string get_val();
    public void set_val(string value);
    public ST_DdeValueType get_t();
    public void set_t(ST_DdeValueType value);
}
[DesignerCategoryAttribute("code")]
[XmlTypeAttribute]
[XmlRootAttribute]
public class NPOI.OpenXmlFormats.Spreadsheet.CT_DdeValues : object {
    private CT_DdeValue[] valueField;
    private UInt32 rowsField;
    private UInt32 colsField;
    [XmlElementAttribute("value")]
public CT_DdeValue[] value { get; public set; }
    [XmlAttributeAttribute]
[DefaultValueAttribute("System.UInt32", "1")]
public UInt32 rows { get; public set; }
    [XmlAttributeAttribute]
[DefaultValueAttribute("System.UInt32", "1")]
public UInt32 cols { get; public set; }
    public CT_DdeValue[] get_value();
    public void set_value(CT_DdeValue[] value);
    public UInt32 get_rows();
    public void set_rows(UInt32 value);
    public UInt32 get_cols();
    public void set_cols(UInt32 value);
}
[XmlTypeAttribute]
public class NPOI.OpenXmlFormats.Spreadsheet.CT_DefinedName : object {
    private string nameField;
    private string commentField;
    private string customMenuField;
    private string descriptionField;
    private string helpField;
    private string statusBarField;
    private UInt32 localSheetIdField;
    private bool localSheetIdFieldSpecified;
    private bool hiddenField;
    private bool functionField;
    private bool vbProcedureField;
    private bool xlmField;
    private UInt32 functionGroupIdField;
    private bool functionGroupIdFieldSpecified;
    private string shortcutKeyField;
    private bool publishToServerField;
    private bool workbookParameterField;
    private string valueField;
    [XmlAttributeAttribute]
public string name { get; public set; }
    [XmlAttributeAttribute]
public string comment { get; public set; }
    [XmlAttributeAttribute]
public string customMenu { get; public set; }
    [XmlAttributeAttribute]
public string description { get; public set; }
    [XmlAttributeAttribute]
public string help { get; public set; }
    [XmlAttributeAttribute]
public string statusBar { get; public set; }
    [XmlAttributeAttribute]
public UInt32 localSheetId { get; public set; }
    [XmlIgnoreAttribute]
public bool localSheetIdSpecified { get; public set; }
    [XmlAttributeAttribute]
[DefaultValueAttribute("False")]
public bool hidden { get; public set; }
    [XmlAttributeAttribute]
[DefaultValueAttribute("False")]
public bool function { get; public set; }
    [XmlAttributeAttribute]
[DefaultValueAttribute("False")]
public bool vbProcedure { get; public set; }
    [XmlAttributeAttribute]
[DefaultValueAttribute("False")]
public bool xlm { get; public set; }
    [XmlAttributeAttribute]
public UInt32 functionGroupId { get; public set; }
    [XmlIgnoreAttribute]
public bool functionGroupIdSpecified { get; public set; }
    [XmlAttributeAttribute]
public string shortcutKey { get; public set; }
    [XmlAttributeAttribute]
[DefaultValueAttribute("False")]
public bool publishToServer { get; public set; }
    [XmlAttributeAttribute]
[DefaultValueAttribute("False")]
public bool workbookParameter { get; public set; }
    [XmlTextAttribute]
public string Value { get; public set; }
    public static CT_DefinedName Parse(XmlNode node, XmlNamespaceManager namespaceManager);
    internal void Write(StreamWriter sw, string nodeName);
    public string get_name();
    public void set_name(string value);
    public string get_comment();
    public void set_comment(string value);
    public string get_customMenu();
    public void set_customMenu(string value);
    public string get_description();
    public void set_description(string value);
    public string get_help();
    public void set_help(string value);
    public string get_statusBar();
    public void set_statusBar(string value);
    public bool IsSetLocalSheetId();
    public void UnsetLocalSheetId();
    public UInt32 get_localSheetId();
    public void set_localSheetId(UInt32 value);
    public bool get_localSheetIdSpecified();
    public void set_localSheetIdSpecified(bool value);
    public bool get_hidden();
    public void set_hidden(bool value);
    public bool get_function();
    public void set_function(bool value);
    public bool get_vbProcedure();
    public void set_vbProcedure(bool value);
    public bool get_xlm();
    public void set_xlm(bool value);
    public UInt32 get_functionGroupId();
    public void set_functionGroupId(UInt32 value);
    public bool get_functionGroupIdSpecified();
    public void set_functionGroupIdSpecified(bool value);
    public string get_shortcutKey();
    public void set_shortcutKey(string value);
    public bool get_publishToServer();
    public void set_publishToServer(bool value);
    public bool get_workbookParameter();
    public void set_workbookParameter(bool value);
    public string get_Value();
    public void set_Value(string value);
}
[XmlTypeAttribute]
public class NPOI.OpenXmlFormats.Spreadsheet.CT_DefinedNames : object {
    private List`1<CT_DefinedName> definedNameField;
    [XmlElementAttribute]
public List`1<CT_DefinedName> definedName { get; public set; }
    public static CT_DefinedNames Parse(XmlNode node, XmlNamespaceManager namespaceManager);
    internal void Write(StreamWriter sw, string nodeName);
    public CT_DefinedName AddNewDefinedName();
    public void SetDefinedNameArray(List`1<CT_DefinedName> array);
    public List`1<CT_DefinedName> get_definedName();
    public void set_definedName(List`1<CT_DefinedName> value);
}
[DebuggerStepThroughAttribute]
[DesignerCategoryAttribute("code")]
[XmlTypeAttribute]
[XmlRootAttribute]
public class NPOI.OpenXmlFormats.Spreadsheet.CT_DeletedField : object {
    private string nameField;
    [XmlAttributeAttribute]
public string name { get; public set; }
    public string get_name();
    public void set_name(string value);
}
[XmlTypeAttribute]
public class NPOI.OpenXmlFormats.Spreadsheet.CT_Dialogsheet : object {
    private CT_SheetPr sheetPrField;
    private CT_SheetViews sheetViewsField;
    private CT_SheetFormatPr sheetFormatPrField;
    private CT_SheetProtection sheetProtectionField;
    private List`1<CT_CustomSheetView> customSheetViewsField;
    private CT_PrintOptions printOptionsField;
    private CT_PageMargins pageMarginsField;
    private CT_PageSetup pageSetupField;
    private CT_HeaderFooter headerFooterField;
    private CT_Drawing drawingField;
    private CT_LegacyDrawing legacyDrawingField;
    private CT_LegacyDrawing legacyDrawingHFField;
    private List`1<CT_OleObject> oleObjectsField;
    private CT_ExtensionList extLstField;
    public CT_SheetPr sheetPr { get; public set; }
    public CT_SheetViews sheetViews { get; public set; }
    public CT_SheetFormatPr sheetFormatPr { get; public set; }
    public CT_SheetProtection sheetProtection { get; public set; }
    [XmlArrayAttribute]
[XmlArrayItemAttribute("customSheetView")]
public List`1<CT_CustomSheetView> customSheetViews { get; public set; }
    public CT_PrintOptions printOptions { get; public set; }
    public CT_PageMargins pageMargins { get; public set; }
    public CT_PageSetup pageSetup { get; public set; }
    public CT_HeaderFooter headerFooter { get; public set; }
    public CT_Drawing drawing { get; public set; }
    public CT_LegacyDrawing legacyDrawing { get; public set; }
    public CT_LegacyDrawing legacyDrawingHF { get; public set; }
    [XmlArrayAttribute]
[XmlArrayItemAttribute("oleObject")]
public List`1<CT_OleObject> oleObjects { get; public set; }
    public CT_ExtensionList extLst { get; public set; }
    public CT_SheetPr get_sheetPr();
    public void set_sheetPr(CT_SheetPr value);
    public CT_SheetViews get_sheetViews();
    public void set_sheetViews(CT_SheetViews value);
    public CT_SheetFormatPr get_sheetFormatPr();
    public void set_sheetFormatPr(CT_SheetFormatPr value);
    public CT_SheetProtection get_sheetProtection();
    public void set_sheetProtection(CT_SheetProtection value);
    public List`1<CT_CustomSheetView> get_customSheetViews();
    public void set_customSheetViews(List`1<CT_CustomSheetView> value);
    public CT_PrintOptions get_printOptions();
    public void set_printOptions(CT_PrintOptions value);
    public CT_PageMargins get_pageMargins();
    public void set_pageMargins(CT_PageMargins value);
    public CT_PageSetup get_pageSetup();
    public void set_pageSetup(CT_PageSetup value);
    public CT_HeaderFooter get_headerFooter();
    public void set_headerFooter(CT_HeaderFooter value);
    public CT_Drawing get_drawing();
    public void set_drawing(CT_Drawing value);
    public CT_LegacyDrawing get_legacyDrawing();
    public void set_legacyDrawing(CT_LegacyDrawing value);
    public CT_LegacyDrawing get_legacyDrawingHF();
    public void set_legacyDrawingHF(CT_LegacyDrawing value);
    public List`1<CT_OleObject> get_oleObjects();
    public void set_oleObjects(List`1<CT_OleObject> value);
    public CT_ExtensionList get_extLst();
    public void set_extLst(CT_ExtensionList value);
}
[XmlTypeAttribute]
[XmlRootAttribute]
public class NPOI.OpenXmlFormats.Spreadsheet.CT_Dimensions : object {
    private List`1<CT_PivotDimension> dimensionField;
    private UInt32 countField;
    private bool countFieldSpecified;
    [XmlElementAttribute("dimension")]
public List`1<CT_PivotDimension> dimension { get; public set; }
    [XmlAttributeAttribute]
public UInt32 count { get; public set; }
    [XmlIgnoreAttribute]
public bool countSpecified { get; public set; }
    public static CT_Dimensions Parse(XmlNode node, XmlNamespaceManager namespaceManager);
    internal void Write(StreamWriter sw, string nodeName);
    public List`1<CT_PivotDimension> get_dimension();
    public void set_dimension(List`1<CT_PivotDimension> value);
    public UInt32 get_count();
    public void set_count(UInt32 value);
    public bool get_countSpecified();
    public void set_countSpecified(bool value);
}
[XmlTypeAttribute]
[XmlRootAttribute]
public class NPOI.OpenXmlFormats.Spreadsheet.CT_DiscretePr : object {
    private List`1<CT_Index> xField;
    private UInt32 countField;
    private bool countFieldSpecified;
    [XmlElementAttribute("x")]
public List`1<CT_Index> x { get; public set; }
    [XmlAttributeAttribute]
public UInt32 count { get; public set; }
    [XmlIgnoreAttribute]
public bool countSpecified { get; public set; }
    public static CT_DiscretePr Parse(XmlNode node, XmlNamespaceManager namespaceManager);
    internal void Write(StreamWriter sw, string nodeName);
    public List`1<CT_Index> get_x();
    public void set_x(List`1<CT_Index> value);
    public UInt32 get_count();
    public void set_count(UInt32 value);
    public bool get_countSpecified();
    public void set_countSpecified(bool value);
}
[XmlTypeAttribute]
public class NPOI.OpenXmlFormats.Spreadsheet.CT_Drawing : object {
    private string idField;
    [XmlAttributeAttribute]
public string id { get; public set; }
    public string get_id();
    public void set_id(string value);
    public static CT_Drawing Parse(XmlNode node, XmlNamespaceManager namespaceManager);
    internal void Write(StreamWriter sw, string nodeName);
}
public class NPOI.OpenXmlFormats.Spreadsheet.CT_Dxf : object {
    private CT_Font fontField;
    private CT_NumFmt numFmtField;
    private CT_Fill fillField;
    private CT_CellAlignment alignmentField;
    private CT_Border borderField;
    private CT_CellProtection protectionField;
    private CT_ExtensionList extLstField;
    [XmlElementAttribute]
public CT_Font font { get; public set; }
    [XmlElementAttribute]
public CT_NumFmt numFmt { get; public set; }
    [XmlElementAttribute]
public CT_Fill fill { get; public set; }
    [XmlElementAttribute]
public CT_CellAlignment alignment { get; public set; }
    [XmlElementAttribute]
public CT_Border border { get; public set; }
    [XmlElementAttribute]
public CT_CellProtection protection { get; public set; }
    [XmlElementAttribute]
public CT_ExtensionList extLst { get; public set; }
    public static CT_Dxf Parse(XmlNode node, XmlNamespaceManager namespaceManager);
    internal void Write(StreamWriter sw, string nodeName);
    public bool IsSetBorder();
    public CT_Font AddNewFont();
    public CT_Fill AddNewFill();
    public CT_Border AddNewBorder();
    public bool IsSetNumFmt();
    public bool IsSetFont();
    public bool IsSetFill();
    public CT_Font get_font();
    public void set_font(CT_Font value);
    public CT_NumFmt get_numFmt();
    public void set_numFmt(CT_NumFmt value);
    public CT_Fill get_fill();
    public void set_fill(CT_Fill value);
    public CT_CellAlignment get_alignment();
    public void set_alignment(CT_CellAlignment value);
    public CT_Border get_border();
    public void set_border(CT_Border value);
    public CT_CellProtection get_protection();
    public void set_protection(CT_CellProtection value);
    public CT_ExtensionList get_extLst();
    public void set_extLst(CT_ExtensionList value);
}
public class NPOI.OpenXmlFormats.Spreadsheet.CT_Dxfs : object {
    private List`1<CT_Dxf> dxfField;
    private UInt32 countField;
    private bool countFieldSpecified;
    [XmlElementAttribute]
public List`1<CT_Dxf> dxf { get; public set; }
    [XmlAttributeAttribute]
public UInt32 count { get; public set; }
    [XmlIgnoreAttribute]
public bool countSpecified { get; public set; }
    public static CT_Dxfs Parse(XmlNode node, XmlNamespaceManager namespaceManager);
    internal void Write(StreamWriter sw, string nodeName);
    public List`1<CT_Dxf> get_dxf();
    public void set_dxf(List`1<CT_Dxf> value);
    public UInt32 get_count();
    public void set_count(UInt32 value);
    public bool get_countSpecified();
    public void set_countSpecified(bool value);
}
public class NPOI.OpenXmlFormats.Spreadsheet.CT_DynamicFilter : object {
    private ST_DynamicFilterType typeField;
    private double valField;
    private bool valFieldSpecified;
    private double maxValField;
    private bool maxValFieldSpecified;
    public ST_DynamicFilterType type { get; public set; }
    public double val { get; public set; }
    [XmlIgnoreAttribute]
public bool valSpecified { get; public set; }
    public double maxVal { get; public set; }
    [XmlIgnoreAttribute]
public bool maxValSpecified { get; public set; }
    public ST_DynamicFilterType get_type();
    public void set_type(ST_DynamicFilterType value);
    public double get_val();
    public void set_val(double value);
    public bool get_valSpecified();
    public void set_valSpecified(bool value);
    public double get_maxVal();
    public void set_maxVal(double value);
    public bool get_maxValSpecified();
    public void set_maxValSpecified(bool value);
}
[XmlTypeAttribute]
[XmlRootAttribute]
public class NPOI.OpenXmlFormats.Spreadsheet.CT_Error : object {
    private CT_Tuples tplsField;
    private List`1<CT_X> xField;
    private string vField;
    private bool uField;
    private bool uFieldSpecified;
    private bool fField;
    private bool fFieldSpecified;
    private string cField;
    private UInt32 cpField;
    private bool cpFieldSpecified;
    private UInt32 inField;
    private bool inFieldSpecified;
    private Byte[] bcField;
    private Byte[] fcField;
    private bool iField;
    private bool unField;
    private bool stField;
    private bool bField;
    [XmlElementAttribute]
public CT_Tuples tpls { get; public set; }
    [XmlElementAttribute("x")]
public List`1<CT_X> x { get; public set; }
    [XmlAttributeAttribute]
public string v { get; public set; }
    [XmlAttributeAttribute]
public bool u { get; public set; }
    [XmlIgnoreAttribute]
public bool uSpecified { get; public set; }
    [XmlAttributeAttribute]
public bool f { get; public set; }
    [XmlIgnoreAttribute]
public bool fSpecified { get; public set; }
    [XmlAttributeAttribute]
public string c { get; public set; }
    [XmlAttributeAttribute]
public UInt32 cp { get; public set; }
    [XmlIgnoreAttribute]
public bool cpSpecified { get; public set; }
    [XmlAttributeAttribute]
public UInt32 in { get; public set; }
    [XmlIgnoreAttribute]
public bool inSpecified { get; public set; }
    [XmlAttributeAttribute]
public Byte[] bc { get; public set; }
    [XmlAttributeAttribute]
public Byte[] fc { get; public set; }
    [XmlAttributeAttribute]
[DefaultValueAttribute("False")]
public bool i { get; public set; }
    [XmlAttributeAttribute]
[DefaultValueAttribute("False")]
public bool un { get; public set; }
    [XmlAttributeAttribute]
[DefaultValueAttribute("False")]
public bool st { get; public set; }
    [XmlAttributeAttribute]
[DefaultValueAttribute("False")]
public bool b { get; public set; }
    public CT_Tuples get_tpls();
    public void set_tpls(CT_Tuples value);
    public List`1<CT_X> get_x();
    public void set_x(List`1<CT_X> value);
    public string get_v();
    public void set_v(string value);
    public bool get_u();
    public void set_u(bool value);
    public bool get_uSpecified();
    public void set_uSpecified(bool value);
    public bool get_f();
    public void set_f(bool value);
    public bool get_fSpecified();
    public void set_fSpecified(bool value);
    public string get_c();
    public void set_c(string value);
    public UInt32 get_cp();
    public void set_cp(UInt32 value);
    public bool get_cpSpecified();
    public void set_cpSpecified(bool value);
    public UInt32 get_in();
    public void set_in(UInt32 value);
    public bool get_inSpecified();
    public void set_inSpecified(bool value);
    public Byte[] get_bc();
    public void set_bc(Byte[] value);
    public Byte[] get_fc();
    public void set_fc(Byte[] value);
    public bool get_i();
    public void set_i(bool value);
    public bool get_un();
    public void set_un(bool value);
    public bool get_st();
    public void set_st(bool value);
    public bool get_b();
    public void set_b(bool value);
    public static CT_Error Parse(XmlNode node, XmlNamespaceManager namespaceManager);
    internal void Write(StreamWriter sw, string nodeName);
}
[DebuggerStepThroughAttribute]
[DesignerCategoryAttribute("code")]
[XmlTypeAttribute]
public class NPOI.OpenXmlFormats.Spreadsheet.CT_Extension : object {
    private string anyField;
    private string uriField;
    [XmlTextAttribute]
public string Any { get; public set; }
    [XmlAttributeAttribute]
public string uri { get; public set; }
    [XmlIgnoreAttribute]
public bool uriSpecified { get; }
    public static CT_Extension Parse(XmlNode node, XmlNamespaceManager namespaceManager);
    internal void Write(StreamWriter sw, string nodeName);
    public string get_Any();
    public void set_Any(string value);
    public string get_uri();
    public void set_uri(string value);
    public bool get_uriSpecified();
}
[DebuggerStepThroughAttribute]
[DesignerCategoryAttribute("code")]
[XmlTypeAttribute]
public class NPOI.OpenXmlFormats.Spreadsheet.CT_ExtensionList : object {
    private List`1<CT_Extension> extField;
    [XmlElementAttribute]
public List`1<CT_Extension> ext { get; public set; }
    public CT_ExtensionList Copy();
    public List`1<CT_Extension> get_ext();
    public void set_ext(List`1<CT_Extension> value);
    public static CT_ExtensionList Parse(XmlNode node, XmlNamespaceManager namespaceManager);
    internal void Write(StreamWriter sw, string nodeName);
}
[DesignerCategoryAttribute("code")]
[XmlTypeAttribute]
[XmlRootAttribute]
public class NPOI.OpenXmlFormats.Spreadsheet.CT_ExternalBook : object {
    private CT_ExternalSheetNames sheetNamesField;
    private CT_ExternalDefinedNames definedNamesField;
    private CT_ExternalSheetDataSet sheetDataSetField;
    private string idField;
    [XmlArrayItemAttribute("sheetName")]
public CT_ExternalSheetNames sheetNames { get; public set; }
    [XmlArrayItemAttribute("definedName")]
public CT_ExternalDefinedNames definedNames { get; public set; }
    [XmlArrayItemAttribute("sheetData")]
public CT_ExternalSheetDataSet sheetDataSet { get; public set; }
    [XmlAttributeAttribute]
public string id { get; public set; }
    public CT_ExternalSheetNames get_sheetNames();
    public void set_sheetNames(CT_ExternalSheetNames value);
    public CT_ExternalDefinedNames get_definedNames();
    public void set_definedNames(CT_ExternalDefinedNames value);
    public CT_ExternalSheetDataSet get_sheetDataSet();
    public void set_sheetDataSet(CT_ExternalSheetDataSet value);
    public string get_id();
    public void set_id(string value);
    internal static CT_ExternalBook Parse(XmlNode node, XmlNamespaceManager namespaceManager);
    internal void Write(StreamWriter sw, string nodeName);
}
[DesignerCategoryAttribute("code")]
[XmlTypeAttribute]
[XmlRootAttribute]
public class NPOI.OpenXmlFormats.Spreadsheet.CT_ExternalCell : object {
    private string vField;
    private string rField;
    private ST_CellType tField;
    private UInt32 vmField;
    public string v { get; public set; }
    [XmlAttributeAttribute]
public string r { get; public set; }
    [XmlAttributeAttribute]
[DefaultValueAttribute("Mono.Cecil.CustomAttributeArgument")]
public ST_CellType t { get; public set; }
    [XmlAttributeAttribute]
[DefaultValueAttribute("System.UInt32", "0")]
public UInt32 vm { get; public set; }
    public string get_v();
    public void set_v(string value);
    public string get_r();
    public void set_r(string value);
    public ST_CellType get_t();
    public void set_t(ST_CellType value);
    public UInt32 get_vm();
    public void set_vm(UInt32 value);
    internal static CT_ExternalCell Parse(XmlNode node, XmlNamespaceManager namespaceManager);
    internal void Write(StreamWriter sw, string nodeName);
}
[DesignerCategoryAttribute("code")]
[XmlTypeAttribute]
[XmlRootAttribute]
public class NPOI.OpenXmlFormats.Spreadsheet.CT_ExternalDefinedName : object {
    private string nameField;
    private string refersToField;
    private UInt32 sheetIdField;
    private bool sheetIdFieldSpecified;
    [XmlAttributeAttribute]
public string name { get; public set; }
    [XmlAttributeAttribute]
public string refersTo { get; public set; }
    [XmlAttributeAttribute]
public UInt32 sheetId { get; public set; }
    [XmlIgnoreAttribute]
public bool sheetIdSpecified { get; public set; }
    public string get_name();
    public void set_name(string value);
    public string get_refersTo();
    public void set_refersTo(string value);
    public UInt32 get_sheetId();
    public void set_sheetId(UInt32 value);
    public bool get_sheetIdSpecified();
    public void set_sheetIdSpecified(bool value);
    public bool IsSetSheetId();
    internal static CT_ExternalDefinedName Parse(XmlNode node, XmlNamespaceManager namespaceManager);
    internal void Write(StreamWriter sw, string nodeName);
}
[DesignerCategoryAttribute("code")]
[XmlTypeAttribute]
[XmlRootAttribute]
public class NPOI.OpenXmlFormats.Spreadsheet.CT_ExternalDefinedNames : object {
    private List`1<CT_ExternalDefinedName> definedNameField;
    [XmlElementAttribute("definedName")]
public CT_ExternalDefinedName[] definedName { get; public set; }
    public CT_ExternalDefinedName[] get_definedName();
    public void set_definedName(CT_ExternalDefinedName[] value);
    internal static CT_ExternalDefinedNames Parse(XmlNode node, XmlNamespaceManager namespaceManager);
    internal void Write(StreamWriter sw, string nodeName);
}
[XmlTypeAttribute]
[XmlRootAttribute]
public class NPOI.OpenXmlFormats.Spreadsheet.CT_ExternalLink : object {
    private object itemField;
    [CompilerGeneratedAttribute]
private ExternalLinkItem <itemType>k__BackingField;
    private CT_ExternalBook externalBookField;
    private CT_DdeLink ddeLinkField;
    private CT_OleLink oleLinkField;
    private CT_ExtensionList extLstField;
    public ExternalLinkItem itemType { get; public set; }
    [XmlElementAttribute("ddeLink", "NPOI.OpenXmlFormats.Spreadsheet.CT_DdeLink")]
[XmlElementAttribute("extLst", "NPOI.OpenXmlFormats.Spreadsheet.CT_ExtensionList")]
[XmlElementAttribute("externalBook", "NPOI.OpenXmlFormats.Spreadsheet.CT_ExternalBook")]
[XmlElementAttribute("oleLink", "NPOI.OpenXmlFormats.Spreadsheet.CT_OleLink")]
public object Item { get; public set; }
    public CT_ExternalBook externalBook { get; public set; }
    public CT_DdeLink ddlLink { get; public set; }
    public CT_OleLink oleLink { get; public set; }
    public CT_ExtensionList extLst { get; public set; }
    [CompilerGeneratedAttribute]
public ExternalLinkItem get_itemType();
    [CompilerGeneratedAttribute]
public void set_itemType(ExternalLinkItem value);
    public object get_Item();
    public void set_Item(object value);
    public CT_ExternalBook get_externalBook();
    public void set_externalBook(CT_ExternalBook value);
    public CT_DdeLink get_ddlLink();
    public void set_ddlLink(CT_DdeLink value);
    public CT_OleLink get_oleLink();
    public void set_oleLink(CT_OleLink value);
    public CT_ExtensionList get_extLst();
    public void set_extLst(CT_ExtensionList value);
    public static CT_ExternalLink Parse(XmlNode node, XmlNamespaceManager namespaceManager);
    internal void Write(StreamWriter sw);
    public void AddNewExternalBook();
}
[XmlTypeAttribute]
public class NPOI.OpenXmlFormats.Spreadsheet.CT_ExternalReference : object {
    private string idField;
    [XmlAttributeAttribute]
public string id { get; public set; }
    public static CT_ExternalReference Parse(XmlNode node, XmlNamespaceManager namespaceManager);
    internal void Write(StreamWriter sw, string nodeName);
    public string get_id();
    public void set_id(string value);
}
[XmlTypeAttribute]
public class NPOI.OpenXmlFormats.Spreadsheet.CT_ExternalReferences : object {
    private List`1<CT_ExternalReference> externalReferenceField;
    [XmlElementAttribute]
public List`1<CT_ExternalReference> externalReference { get; public set; }
    public static CT_ExternalReferences Parse(XmlNode node, XmlNamespaceManager namespaceManager);
    internal void Write(StreamWriter sw, string nodeName);
    public List`1<CT_ExternalReference> get_externalReference();
    public void set_externalReference(List`1<CT_ExternalReference> value);
}
[DesignerCategoryAttribute("code")]
[XmlTypeAttribute]
[XmlRootAttribute]
public class NPOI.OpenXmlFormats.Spreadsheet.CT_ExternalRow : object {
    private List`1<CT_ExternalCell> cellField;
    private UInt32 rField;
    [XmlElementAttribute("cell")]
public CT_ExternalCell[] cell { get; public set; }
    [XmlAttributeAttribute]
public UInt32 r { get; public set; }
    public CT_ExternalCell[] get_cell();
    public void set_cell(CT_ExternalCell[] value);
    public UInt32 get_r();
    public void set_r(UInt32 value);
    internal static CT_ExternalRow Parse(XmlNode node, XmlNamespaceManager namespaceManager);
    internal void Write(StreamWriter sw, string nodeName);
}
[DesignerCategoryAttribute("code")]
[XmlTypeAttribute]
[XmlRootAttribute]
public class NPOI.OpenXmlFormats.Spreadsheet.CT_ExternalSheetData : object {
    private List`1<CT_ExternalRow> rowField;
    private UInt32 sheetIdField;
    private bool refreshErrorField;
    [XmlElementAttribute("row")]
public CT_ExternalRow[] row { get; public set; }
    [XmlAttributeAttribute]
public UInt32 sheetId { get; public set; }
    [XmlAttributeAttribute]
[DefaultValueAttribute("False")]
public bool refreshError { get; public set; }
    public CT_ExternalRow[] get_row();
    public void set_row(CT_ExternalRow[] value);
    public UInt32 get_sheetId();
    public void set_sheetId(UInt32 value);
    public bool get_refreshError();
    public void set_refreshError(bool value);
    internal static CT_ExternalSheetData Parse(XmlNode node, XmlNamespaceManager namespaceManager);
    internal void Write(StreamWriter sw, string nodeName);
}
[DesignerCategoryAttribute("code")]
[XmlTypeAttribute]
[XmlRootAttribute]
public class NPOI.OpenXmlFormats.Spreadsheet.CT_ExternalSheetDataSet : object {
    private List`1<CT_ExternalSheetData> sheetDataField;
    [XmlElementAttribute("sheetData")]
public CT_ExternalSheetData[] sheetData { get; public set; }
    public CT_ExternalSheetData[] get_sheetData();
    public void set_sheetData(CT_ExternalSheetData[] value);
    internal static CT_ExternalSheetDataSet Parse(XmlNode node, XmlNamespaceManager namespaceManager);
    internal void Write(StreamWriter sw, string nodeName);
}
[XmlTypeAttribute]
[XmlRootAttribute]
public class NPOI.OpenXmlFormats.Spreadsheet.CT_ExternalSheetName : object {
    private string valField;
    [XmlAttributeAttribute]
public string val { get; public set; }
    public string get_val();
    public void set_val(string value);
    internal static CT_ExternalSheetName Parse(XmlNode node, XmlNamespaceManager namespaceManager);
    internal void Write(StreamWriter sw, string nodeName);
}
[DesignerCategoryAttribute("code")]
[XmlTypeAttribute]
[XmlRootAttribute]
public class NPOI.OpenXmlFormats.Spreadsheet.CT_ExternalSheetNames : object {
    private List`1<CT_ExternalSheetName> sheetNameField;
    [XmlElementAttribute("sheetName")]
public CT_ExternalSheetName[] sheetName { get; public set; }
    public CT_ExternalSheetName[] get_sheetName();
    public void set_sheetName(CT_ExternalSheetName[] value);
    internal static CT_ExternalSheetNames Parse(XmlNode node, XmlNamespaceManager namespaceManager);
    internal void Write(StreamWriter sw, string nodeName);
}
[XmlTypeAttribute]
[XmlRootAttribute]
public class NPOI.OpenXmlFormats.Spreadsheet.CT_Field : object {
    private int xField;
    [XmlAttributeAttribute]
public int x { get; public set; }
    public static CT_Field Parse(XmlNode node, XmlNamespaceManager namespaceManager);
    internal void Write(StreamWriter sw, string nodeName);
    public int get_x();
    public void set_x(int value);
}
[XmlTypeAttribute]
[XmlRootAttribute]
public class NPOI.OpenXmlFormats.Spreadsheet.CT_FieldGroup : object {
    private CT_RangePr rangePrField;
    private CT_DiscretePr discretePrField;
    private CT_GroupItems groupItemsField;
    private UInt32 parField;
    private bool parFieldSpecified;
    private UInt32 baseField;
    private bool baseFieldSpecified;
    [XmlElementAttribute]
public CT_RangePr rangePr { get; public set; }
    [XmlElementAttribute]
public CT_DiscretePr discretePr { get; public set; }
    [XmlElementAttribute]
public CT_GroupItems groupItems { get; public set; }
    [XmlAttributeAttribute]
public UInt32 par { get; public set; }
    [XmlIgnoreAttribute]
public bool parSpecified { get; public set; }
    [XmlAttributeAttribute]
public UInt32 base { get; public set; }
    [XmlIgnoreAttribute]
public bool baseSpecified { get; public set; }
    public static CT_FieldGroup Parse(XmlNode node, XmlNamespaceManager namespaceManager);
    internal void Write(StreamWriter sw, string nodeName);
    public CT_RangePr get_rangePr();
    public void set_rangePr(CT_RangePr value);
    public CT_DiscretePr get_discretePr();
    public void set_discretePr(CT_DiscretePr value);
    public CT_GroupItems get_groupItems();
    public void set_groupItems(CT_GroupItems value);
    public UInt32 get_par();
    public void set_par(UInt32 value);
    public bool get_parSpecified();
    public void set_parSpecified(bool value);
    public UInt32 get_base();
    public void set_base(UInt32 value);
    public bool get_baseSpecified();
    public void set_baseSpecified(bool value);
}
[XmlTypeAttribute]
[XmlRootAttribute]
public class NPOI.OpenXmlFormats.Spreadsheet.CT_FieldsUsage : object {
    private List`1<CT_FieldUsage> fieldUsageField;
    private UInt32 countField;
    private bool countFieldSpecified;
    [XmlElementAttribute("fieldUsage")]
public List`1<CT_FieldUsage> fieldUsage { get; public set; }
    [XmlAttributeAttribute]
public UInt32 count { get; public set; }
    [XmlIgnoreAttribute]
public bool countSpecified { get; public set; }
    public static CT_FieldsUsage Parse(XmlNode node, XmlNamespaceManager namespaceManager);
    internal void Write(StreamWriter sw, string nodeName);
    public List`1<CT_FieldUsage> get_fieldUsage();
    public void set_fieldUsage(List`1<CT_FieldUsage> value);
    public UInt32 get_count();
    public void set_count(UInt32 value);
    public bool get_countSpecified();
    public void set_countSpecified(bool value);
}
[XmlTypeAttribute]
[XmlRootAttribute]
public class NPOI.OpenXmlFormats.Spreadsheet.CT_FieldUsage : object {
    private int xField;
    [XmlAttributeAttribute]
public int x { get; public set; }
    public static CT_FieldUsage Parse(XmlNode node, XmlNamespaceManager namespaceManager);
    internal void Write(StreamWriter sw, string nodeName);
    public int get_x();
    public void set_x(int value);
}
[XmlTypeAttribute]
public class NPOI.OpenXmlFormats.Spreadsheet.CT_FileRecoveryPr : object {
    private bool autoRecoverField;
    private bool crashSaveField;
    private bool dataExtractLoadField;
    private bool repairLoadField;
    [DefaultValueAttribute("True")]
public bool autoRecover { get; public set; }
    [DefaultValueAttribute("False")]
public bool crashSave { get; public set; }
    [DefaultValueAttribute("False")]
public bool dataExtractLoad { get; public set; }
    [DefaultValueAttribute("False")]
public bool repairLoad { get; public set; }
    public static CT_FileRecoveryPr Parse(XmlNode node, XmlNamespaceManager namespaceManager);
    internal void Write(StreamWriter sw, string nodeName);
    public bool get_autoRecover();
    public void set_autoRecover(bool value);
    public bool get_crashSave();
    public void set_crashSave(bool value);
    public bool get_dataExtractLoad();
    public void set_dataExtractLoad(bool value);
    public bool get_repairLoad();
    public void set_repairLoad(bool value);
}
[XmlTypeAttribute]
public class NPOI.OpenXmlFormats.Spreadsheet.CT_FileSharing : object {
    private bool readOnlyRecommendedField;
    private string userNameField;
    private Byte[] reservationPasswordField;
    [XmlAttributeAttribute]
[DefaultValueAttribute("False")]
public bool readOnlyRecommended { get; public set; }
    [XmlAttributeAttribute]
public string userName { get; public set; }
    [XmlAttributeAttribute]
public Byte[] reservationPassword { get; public set; }
    public static CT_FileSharing Parse(XmlNode node, XmlNamespaceManager namespaceManager);
    internal void Write(StreamWriter sw, string nodeName);
    public bool get_readOnlyRecommended();
    public void set_readOnlyRecommended(bool value);
    public string get_userName();
    public void set_userName(string value);
    public Byte[] get_reservationPassword();
    public void set_reservationPassword(Byte[] value);
}
[XmlTypeAttribute]
public class NPOI.OpenXmlFormats.Spreadsheet.CT_FileVersion : object {
    private string appNameField;
    private string lastEditedField;
    private string lowestEditedField;
    private string rupBuildField;
    private string codeNameField;
    [XmlAttributeAttribute]
public string appName { get; public set; }
    [XmlAttributeAttribute]
public string lastEdited { get; public set; }
    [XmlAttributeAttribute]
public string lowestEdited { get; public set; }
    [XmlAttributeAttribute]
public string rupBuild { get; public set; }
    [XmlAttributeAttribute]
public string codeName { get; public set; }
    public static CT_FileVersion Parse(XmlNode node, XmlNamespaceManager namespaceManager);
    internal void Write(StreamWriter sw, string nodeName);
    public string get_appName();
    public void set_appName(string value);
    public string get_lastEdited();
    public void set_lastEdited(string value);
    public string get_lowestEdited();
    public void set_lowestEdited(string value);
    public string get_rupBuild();
    public void set_rupBuild(string value);
    public string get_codeName();
    public void set_codeName(string value);
}
[XmlTypeAttribute]
public class NPOI.OpenXmlFormats.Spreadsheet.CT_Fill : object {
    private CT_PatternFill patternFillField;
    private CT_GradientFill gradientFillField;
    [XmlElementAttribute]
public CT_PatternFill patternFill { get; public set; }
    [XmlElementAttribute]
public CT_GradientFill gradientFill { get; public set; }
    public CT_PatternFill get_patternFill();
    public void set_patternFill(CT_PatternFill value);
    public CT_GradientFill get_gradientFill();
    public void set_gradientFill(CT_GradientFill value);
    public CT_PatternFill GetPatternFill();
    public CT_PatternFill AddNewPatternFill();
    public CT_GradientFill AddNewGradientFill();
    public void UnsetPatternFill();
    public bool IsSetPatternFill();
    public CT_Fill Copy();
    public static CT_Fill Parse(XmlNode node, XmlNamespaceManager namespaceManager);
    internal void Write(StreamWriter sw, string nodeName);
    public virtual string ToString();
    public static CT_Fill Parse(string p);
    public static XmlNamespaceManager CreateDefaultNSM();
}
[XmlTypeAttribute]
public class NPOI.OpenXmlFormats.Spreadsheet.CT_Fills : object {
    private List`1<CT_Fill> fillField;
    private UInt32 countField;
    private bool countFieldSpecified;
    [XmlElementAttribute]
public List`1<CT_Fill> fill { get; public set; }
    [XmlAttributeAttribute]
public UInt32 count { get; public set; }
    [XmlIgnoreAttribute]
public bool countSpecified { get; public set; }
    public static CT_Fills Parse(XmlNode node, XmlNamespaceManager namespaceManager);
    internal void Write(StreamWriter sw, string nodeName);
    public List`1<CT_Fill> get_fill();
    public void set_fill(List`1<CT_Fill> value);
    public void SetFillArray(List`1<CT_Fill> array);
    public UInt32 get_count();
    public void set_count(UInt32 value);
    public bool get_countSpecified();
    public void set_countSpecified(bool value);
}
public class NPOI.OpenXmlFormats.Spreadsheet.CT_Filter : object {
    private string valField;
    public string val { get; public set; }
    public string get_val();
    public void set_val(string value);
}
public class NPOI.OpenXmlFormats.Spreadsheet.CT_FilterColumn : object {
    private UInt32 colIdField;
    private bool hiddenButtonField;
    private bool showButtonField;
    private CT_CustomFilters customFiltersField;
    [XmlAttributeAttribute]
public UInt32 colId { get; public set; }
    [XmlAttributeAttribute]
[DefaultValueAttribute("False")]
public bool hiddenButton { get; public set; }
    [XmlAttributeAttribute]
[DefaultValueAttribute("True")]
public bool showButton { get; public set; }
    [XmlAttributeAttribute]
public CT_CustomFilters customFilters { get; public set; }
    public UInt32 get_colId();
    public void set_colId(UInt32 value);
    public bool get_hiddenButton();
    public void set_hiddenButton(bool value);
    public bool get_showButton();
    public void set_showButton(bool value);
    public CT_CustomFilters get_customFilters();
    public void set_customFilters(CT_CustomFilters value);
    public static CT_FilterColumn Parse(XmlNode node, XmlNamespaceManager namespaceManager);
    internal void Write(StreamWriter sw, string nodeName);
}
public class NPOI.OpenXmlFormats.Spreadsheet.CT_Filters : object {
    private List`1<CT_Filter> filterField;
    private List`1<CT_DateGroupItem> dateGroupItemField;
    private bool blankField;
    private ST_CalendarType calendarTypeField;
    public List`1<CT_Filter> filter { get; public set; }
    public List`1<CT_DateGroupItem> dateGroupItem { get; public set; }
    [DefaultValueAttribute("False")]
public bool blank { get; public set; }
    [DefaultValueAttribute("Mono.Cecil.CustomAttributeArgument")]
public ST_CalendarType calendarType { get; public set; }
    public List`1<CT_Filter> get_filter();
    public void set_filter(List`1<CT_Filter> value);
    public List`1<CT_DateGroupItem> get_dateGroupItem();
    public void set_dateGroupItem(List`1<CT_DateGroupItem> value);
    public bool get_blank();
    public void set_blank(bool value);
    public ST_CalendarType get_calendarType();
    public void set_calendarType(ST_CalendarType value);
}
[XmlTypeAttribute]
[XmlRootAttribute]
public class NPOI.OpenXmlFormats.Spreadsheet.CT_Font : object {
    private CT_FontName nameField;
    private List`1<CT_IntProperty> charsetField;
    private List`1<CT_IntProperty> familyField;
    private List`1<CT_BooleanProperty> bField;
    private List`1<CT_BooleanProperty> iField;
    private List`1<CT_BooleanProperty> strikeField;
    private CT_BooleanProperty outlineField;
    private CT_BooleanProperty shadowField;
    private CT_BooleanProperty condenseField;
    private CT_BooleanProperty extendField;
    private List`1<CT_Color> colorField;
    private List`1<CT_FontSize> szField;
    private List`1<CT_UnderlineProperty> uField;
    private List`1<CT_VerticalAlignFontProperty> vertAlignField;
    private List`1<CT_FontScheme> schemeField;
    [XmlElementAttribute]
public CT_FontName name { get; public set; }
    [XmlElementAttribute]
public List`1<CT_IntProperty> charset { get; public set; }
    [XmlElementAttribute]
public List`1<CT_IntProperty> family { get; public set; }
    [XmlElementAttribute]
public List`1<CT_BooleanProperty> b { get; public set; }
    [XmlElementAttribute]
public List`1<CT_BooleanProperty> i { get; public set; }
    [XmlElementAttribute]
public List`1<CT_BooleanProperty> strike { get; public set; }
    [XmlElementAttribute]
public CT_BooleanProperty outline { get; public set; }
    [XmlElementAttribute]
public CT_BooleanProperty shadow { get; public set; }
    [XmlElementAttribute]
public CT_BooleanProperty condense { get; public set; }
    [XmlElementAttribute]
public CT_BooleanProperty extend { get; public set; }
    [XmlElementAttribute]
public List`1<CT_Color> color { get; public set; }
    [XmlElementAttribute]
public List`1<CT_FontSize> sz { get; public set; }
    [XmlElementAttribute]
public List`1<CT_UnderlineProperty> u { get; public set; }
    [XmlElementAttribute]
public List`1<CT_VerticalAlignFontProperty> vertAlign { get; public set; }
    [XmlElementAttribute]
public List`1<CT_FontScheme> scheme { get; public set; }
    public static CT_Font Parse(XmlNode node, XmlNamespaceManager namespaceManager);
    internal void Write(StreamWriter sw, string nodeName);
    public CT_FontName get_name();
    public void set_name(CT_FontName value);
    public int sizeOfNameArray();
    public CT_FontName AddNewName();
    public List`1<CT_IntProperty> get_charset();
    public void set_charset(List`1<CT_IntProperty> value);
    public int sizeOfCharsetArray();
    public CT_IntProperty AddNewCharset();
    public void SetCharsetArray(int index, CT_IntProperty value);
    public CT_IntProperty GetCharsetArray(int index);
    public List`1<CT_IntProperty> get_family();
    public void set_family(List`1<CT_IntProperty> value);
    public int sizeOfFamilyArray();
    public CT_IntProperty AddNewFamily();
    public void SetFamilyArray(int index, CT_IntProperty value);
    public CT_IntProperty GetFamilyArray(int index);
    public List`1<CT_BooleanProperty> get_b();
    public void set_b(List`1<CT_BooleanProperty> value);
    public int SizeOfBArray();
    public CT_BooleanProperty AddNewB();
    public void SetBArray(int index, CT_BooleanProperty value);
    public void SetBArray(List`1<CT_BooleanProperty> array);
    public CT_BooleanProperty GetBArray(int index);
    public List`1<CT_BooleanProperty> get_i();
    public void set_i(List`1<CT_BooleanProperty> value);
    public int sizeOfIArray();
    public CT_BooleanProperty AddNewI();
    public void SetIArray(int index, CT_BooleanProperty value);
    public void SetIArray(List`1<CT_BooleanProperty> array);
    public CT_BooleanProperty GetIArray(int index);
    public List`1<CT_BooleanProperty> get_strike();
    public void set_strike(List`1<CT_BooleanProperty> value);
    public int sizeOfStrikeArray();
    public CT_BooleanProperty AddNewStrike();
    public void SetStrikeArray(int index, CT_BooleanProperty value);
    public void SetStrikeArray(List`1<CT_BooleanProperty> array);
    public CT_BooleanProperty GetStrikeArray(int index);
    public CT_BooleanProperty get_outline();
    public void set_outline(CT_BooleanProperty value);
    public int sizeOfOutlineArray();
    public CT_BooleanProperty AddNewOutline();
    public void SetOutlineArray(CT_BooleanProperty[] array);
    public CT_BooleanProperty GetOutlineArray(int index);
    public CT_BooleanProperty get_shadow();
    public void set_shadow(CT_BooleanProperty value);
    public int sizeOfShadowArray();
    public CT_BooleanProperty AddNewShadow();
    public CT_BooleanProperty GetShadowArray(int index);
    public CT_BooleanProperty get_condense();
    public void set_condense(CT_BooleanProperty value);
    public int sizeOfCondenseArray();
    public CT_BooleanProperty AddNewCondense();
    public CT_BooleanProperty GetCondenseArray(int index);
    public CT_BooleanProperty get_extend();
    public void set_extend(CT_BooleanProperty value);
    public int sizeOfExtendArray();
    public CT_BooleanProperty AddNewExtend();
    public CT_BooleanProperty GetExtendArray(int index);
    public List`1<CT_Color> get_color();
    public void set_color(List`1<CT_Color> value);
    public int sizeOfColorArray();
    public CT_Color GetColorArray(int index);
    public void SetColorArray(int index, CT_Color value);
    public void SetColorArray(List`1<CT_Color> array);
    public CT_Color AddNewColor();
    public int AddColor(CT_Color value);
    public List`1<CT_FontSize> get_sz();
    public void set_sz(List`1<CT_FontSize> value);
    public int sizeOfSzArray();
    public CT_FontSize AddNewSz();
    public void SetSzArray(int index, CT_FontSize value);
    public void SetSzArray(List`1<CT_FontSize> array);
    public CT_FontSize GetSzArray(int index);
    public List`1<CT_UnderlineProperty> get_u();
    public void set_u(List`1<CT_UnderlineProperty> value);
    public int sizeOfUArray();
    public CT_UnderlineProperty AddNewU();
    public void SetUArray(int index, CT_UnderlineProperty value);
    public void SetUArray(List`1<CT_UnderlineProperty> array);
    public CT_UnderlineProperty GetUArray(int index);
    public List`1<CT_VerticalAlignFontProperty> get_vertAlign();
    public void set_vertAlign(List`1<CT_VerticalAlignFontProperty> value);
    public int sizeOfVertAlignArray();
    public CT_VerticalAlignFontProperty AddNewVertAlign();
    public void SetVertAlignArray(int index, CT_VerticalAlignFontProperty value);
    public void SetVertAlignArray(List`1<CT_VerticalAlignFontProperty> array);
    public CT_VerticalAlignFontProperty GetVertAlignArray(int index);
    public List`1<CT_FontScheme> get_scheme();
    public void set_scheme(List`1<CT_FontScheme> value);
    public int sizeOfSchemeArray();
    public CT_FontScheme AddNewScheme();
    public void SetSchemeArray(int index, CT_FontScheme value);
    public CT_FontScheme GetSchemeArray(int index);
    public virtual string ToString();
    public CT_Font Clone();
}
[XmlTypeAttribute]
public class NPOI.OpenXmlFormats.Spreadsheet.CT_FontName : object {
    private string valField;
    [XmlAttributeAttribute]
public string val { get; public set; }
    public static CT_FontName Parse(XmlNode node, XmlNamespaceManager namespaceManager);
    internal void Write(StreamWriter sw, string nodeName);
    public string get_val();
    public void set_val(string value);
}
[XmlTypeAttribute]
[XmlRootAttribute]
public class NPOI.OpenXmlFormats.Spreadsheet.CT_Fonts : object {
    private List`1<CT_Font> fontField;
    private UInt32 countField;
    private bool countFieldSpecified;
    private UInt32 knownFontsField;
    [XmlElementAttribute]
public List`1<CT_Font> font { get; public set; }
    [XmlAttributeAttribute]
public UInt32 count { get; public set; }
    [XmlIgnoreAttribute]
public bool countSpecified { get; public set; }
    public static CT_Fonts Parse(XmlNode node, XmlNamespaceManager namespaceManager);
    internal void Write(StreamWriter sw, string nodeName);
    public void SetFontArray(List`1<CT_Font> array);
    public List`1<CT_Font> get_font();
    public void set_font(List`1<CT_Font> value);
    public UInt32 get_count();
    public void set_count(UInt32 value);
    public bool get_countSpecified();
    public void set_countSpecified(bool value);
}
[XmlTypeAttribute]
public class NPOI.OpenXmlFormats.Spreadsheet.CT_FontScheme : object {
    private ST_FontScheme valField;
    [XmlAttributeAttribute]
public ST_FontScheme val { get; public set; }
    public ST_FontScheme get_val();
    public void set_val(ST_FontScheme value);
    public static CT_FontScheme Parse(XmlNode node, XmlNamespaceManager namespaceManager);
    internal void Write(StreamWriter sw, string nodeName);
}
[XmlTypeAttribute]
public class NPOI.OpenXmlFormats.Spreadsheet.CT_FontSize : object {
    private double valField;
    [XmlAttributeAttribute]
public double val { get; public set; }
    public static CT_FontSize Parse(XmlNode node, XmlNamespaceManager namespaceManager);
    internal void Write(StreamWriter sw, string nodeName);
    public double get_val();
    public void set_val(double value);
}
[XmlTypeAttribute]
[XmlRootAttribute]
public class NPOI.OpenXmlFormats.Spreadsheet.CT_Format : object {
    private CT_PivotArea pivotAreaField;
    private CT_ExtensionList extLstField;
    private ST_FormatAction actionField;
    private UInt32 dxfIdField;
    private bool dxfIdFieldSpecified;
    [XmlElementAttribute]
public CT_PivotArea pivotArea { get; public set; }
    [XmlElementAttribute]
public CT_ExtensionList extLst { get; public set; }
    [XmlAttributeAttribute]
[DefaultValueAttribute("Mono.Cecil.CustomAttributeArgument")]
public ST_FormatAction action { get; public set; }
    [XmlAttributeAttribute]
public UInt32 dxfId { get; public set; }
    [XmlIgnoreAttribute]
public bool dxfIdSpecified { get; public set; }
    public static CT_Format Parse(XmlNode node, XmlNamespaceManager namespaceManager);
    internal void Write(StreamWriter sw, string nodeName);
    public CT_PivotArea get_pivotArea();
    public void set_pivotArea(CT_PivotArea value);
    public CT_ExtensionList get_extLst();
    public void set_extLst(CT_ExtensionList value);
    public ST_FormatAction get_action();
    public void set_action(ST_FormatAction value);
    public UInt32 get_dxfId();
    public void set_dxfId(UInt32 value);
    public bool get_dxfIdSpecified();
    public void set_dxfIdSpecified(bool value);
}
[XmlTypeAttribute]
[XmlRootAttribute]
public class NPOI.OpenXmlFormats.Spreadsheet.CT_Formats : object {
    private List`1<CT_Format> formatField;
    private UInt32 countField;
    [XmlElementAttribute("format")]
public List`1<CT_Format> format { get; public set; }
    [XmlAttributeAttribute]
[DefaultValueAttribute("System.UInt32", "0")]
public UInt32 count { get; public set; }
    public static CT_Formats Parse(XmlNode node, XmlNamespaceManager namespaceManager);
    internal void Write(StreamWriter sw, string nodeName);
    public List`1<CT_Format> get_format();
    public void set_format(List`1<CT_Format> value);
    public UInt32 get_count();
    public void set_count(UInt32 value);
}
[XmlTypeAttribute]
public class NPOI.OpenXmlFormats.Spreadsheet.CT_FunctionGroup : object {
    private string nameField;
    [XmlAttributeAttribute]
public string name { get; public set; }
    public static CT_FunctionGroup Parse(XmlNode node, XmlNamespaceManager namespaceManager);
    internal void Write(StreamWriter sw, string nodeName);
    public string get_name();
    public void set_name(string value);
}
[XmlTypeAttribute]
public class NPOI.OpenXmlFormats.Spreadsheet.CT_FunctionGroups : object {
    private List`1<CT_FunctionGroup> functionGroupField;
    private UInt32 builtInGroupCountField;
    public List`1<CT_FunctionGroup> functionGroup { get; public set; }
    [DefaultValueAttribute("System.UInt32", "16")]
public UInt32 builtInGroupCount { get; public set; }
    public static CT_FunctionGroups Parse(XmlNode node, XmlNamespaceManager namespaceManager);
    internal void Write(StreamWriter sw, string nodeName);
    public List`1<CT_FunctionGroup> get_functionGroup();
    public void set_functionGroup(List`1<CT_FunctionGroup> value);
    public UInt32 get_builtInGroupCount();
    public void set_builtInGroupCount(UInt32 value);
}
public class NPOI.OpenXmlFormats.Spreadsheet.CT_FutureMetadata : object {
    private List`1<CT_FutureMetadataBlock> bkField;
    private CT_ExtensionList extLstField;
    private string nameField;
    private UInt32 countField;
    [XmlElementAttribute("bk")]
public List`1<CT_FutureMetadataBlock> bk { get; public set; }
    public CT_ExtensionList extLst { get; public set; }
    [XmlAttributeAttribute]
public string name { get; public set; }
    [XmlAttributeAttribute]
[DefaultValueAttribute("System.UInt32", "0")]
public UInt32 count { get; public set; }
    public List`1<CT_FutureMetadataBlock> get_bk();
    public void set_bk(List`1<CT_FutureMetadataBlock> value);
    public CT_ExtensionList get_extLst();
    public void set_extLst(CT_ExtensionList value);
    public string get_name();
    public void set_name(string value);
    public UInt32 get_count();
    public void set_count(UInt32 value);
}
[DebuggerStepThroughAttribute]
[DesignerCategoryAttribute("code")]
[XmlTypeAttribute]
[XmlRootAttribute]
public class NPOI.OpenXmlFormats.Spreadsheet.CT_FutureMetadataBlock : object {
    private CT_ExtensionList extLstField;
    public CT_ExtensionList extLst { get; public set; }
    public CT_ExtensionList get_extLst();
    public void set_extLst(CT_ExtensionList value);
}
[XmlTypeAttribute]
public class NPOI.OpenXmlFormats.Spreadsheet.CT_GradientFill : object {
    private List`1<CT_GradientStop> stopField;
    private ST_GradientType typeField;
    private double degreeField;
    private double leftField;
    private double rightField;
    private double topField;
    private double bottomField;
    [XmlElementAttribute]
public List`1<CT_GradientStop> stop { get; public set; }
    [XmlAttributeAttribute]
[DefaultValueAttribute("Mono.Cecil.CustomAttributeArgument")]
public ST_GradientType type { get; public set; }
    [XmlAttributeAttribute]
[DefaultValueAttribute("0")]
public double degree { get; public set; }
    [XmlAttributeAttribute]
[DefaultValueAttribute("0")]
public double left { get; public set; }
    [XmlAttributeAttribute]
[DefaultValueAttribute("0")]
public double right { get; public set; }
    [XmlAttributeAttribute]
[DefaultValueAttribute("0")]
public double top { get; public set; }
    [XmlAttributeAttribute]
[DefaultValueAttribute("0")]
public double bottom { get; public set; }
    public static CT_GradientFill Parse(XmlNode node, XmlNamespaceManager namespaceManager);
    internal void Write(StreamWriter sw, string nodeName);
    public CT_GradientStop AddNewStop();
    public CT_GradientStop GetStopArray(int index);
    public List`1<CT_GradientStop> get_stop();
    public void set_stop(List`1<CT_GradientStop> value);
    public ST_GradientType get_type();
    public void set_type(ST_GradientType value);
    public double get_degree();
    public void set_degree(double value);
    public double get_left();
    public void set_left(double value);
    public double get_right();
    public void set_right(double value);
    public double get_top();
    public void set_top(double value);
    public double get_bottom();
    public void set_bottom(double value);
}
public class NPOI.OpenXmlFormats.Spreadsheet.CT_GradientStop : object {
    private double positionField;
    private CT_Color colorField;
    public double position { get; public set; }
    public double get_position();
    public void set_position(double value);
    public CT_Color AddNewColor();
    public static CT_GradientStop Parse(XmlNode node, XmlNamespaceManager namespaceManager);
    internal void Write(StreamWriter sw, string nodeName);
}
[XmlTypeAttribute]
[XmlRootAttribute]
public class NPOI.OpenXmlFormats.Spreadsheet.CT_GroupItems : object {
    private List`1<object> itemsField;
    private UInt32 countField;
    private bool countFieldSpecified;
    [XmlElementAttribute("b", "NPOI.OpenXmlFormats.Spreadsheet.CT_Boolean")]
[XmlElementAttribute("d", "NPOI.OpenXmlFormats.Spreadsheet.CT_DateTime")]
[XmlElementAttribute("e", "NPOI.OpenXmlFormats.Spreadsheet.CT_Error")]
[XmlElementAttribute("m", "NPOI.OpenXmlFormats.Spreadsheet.CT_Missing")]
[XmlElementAttribute("n", "NPOI.OpenXmlFormats.Spreadsheet.CT_Number")]
[XmlElementAttribute("s", "NPOI.OpenXmlFormats.Spreadsheet.CT_String")]
public List`1<object> Items { get; public set; }
    [XmlAttributeAttribute]
public UInt32 count { get; public set; }
    [XmlIgnoreAttribute]
public bool countSpecified { get; public set; }
    public static CT_GroupItems Parse(XmlNode node, XmlNamespaceManager namespaceManager);
    internal void Write(StreamWriter sw, string nodeName);
    public List`1<object> get_Items();
    public void set_Items(List`1<object> value);
    public UInt32 get_count();
    public void set_count(UInt32 value);
    public bool get_countSpecified();
    public void set_countSpecified(bool value);
}
[XmlTypeAttribute]
[XmlRootAttribute]
public class NPOI.OpenXmlFormats.Spreadsheet.CT_GroupLevel : object {
    private CT_Groups groupsField;
    private CT_ExtensionList extLstField;
    private string uniqueNameField;
    private string captionField;
    private bool userField;
    private bool customRollUpField;
    [XmlElementAttribute]
public CT_Groups groups { get; public set; }
    [XmlElementAttribute]
public CT_ExtensionList extLst { get; public set; }
    [XmlAttributeAttribute]
public string uniqueName { get; public set; }
    [XmlAttributeAttribute]
public string caption { get; public set; }
    [XmlAttributeAttribute]
[DefaultValueAttribute("False")]
public bool user { get; public set; }
    [XmlAttributeAttribute]
[DefaultValueAttribute("False")]
public bool customRollUp { get; public set; }
    public static CT_GroupLevel Parse(XmlNode node, XmlNamespaceManager namespaceManager);
    internal void Write(StreamWriter sw, string nodeName);
    public CT_Groups get_groups();
    public void set_groups(CT_Groups value);
    public CT_ExtensionList get_extLst();
    public void set_extLst(CT_ExtensionList value);
    public string get_uniqueName();
    public void set_uniqueName(string value);
    public string get_caption();
    public void set_caption(string value);
    public bool get_user();
    public void set_user(bool value);
    public bool get_customRollUp();
    public void set_customRollUp(bool value);
}
[XmlTypeAttribute]
[XmlRootAttribute]
public class NPOI.OpenXmlFormats.Spreadsheet.CT_GroupLevels : object {
    private List`1<CT_GroupLevel> groupLevelField;
    private UInt32 countField;
    private bool countFieldSpecified;
    [XmlElementAttribute("groupLevel")]
public List`1<CT_GroupLevel> groupLevel { get; public set; }
    [XmlAttributeAttribute]
public UInt32 count { get; public set; }
    [XmlIgnoreAttribute]
public bool countSpecified { get; public set; }
    public static CT_GroupLevels Parse(XmlNode node, XmlNamespaceManager namespaceManager);
    internal void Write(StreamWriter sw, string nodeName);
    public List`1<CT_GroupLevel> get_groupLevel();
    public void set_groupLevel(List`1<CT_GroupLevel> value);
    public UInt32 get_count();
    public void set_count(UInt32 value);
    public bool get_countSpecified();
    public void set_countSpecified(bool value);
}
[XmlTypeAttribute]
[XmlRootAttribute]
public class NPOI.OpenXmlFormats.Spreadsheet.CT_GroupMember : object {
    private string uniqueNameField;
    private bool groupField;
    [XmlAttributeAttribute]
public string uniqueName { get; public set; }
    [XmlAttributeAttribute]
[DefaultValueAttribute("False")]
public bool group { get; public set; }
    public static CT_GroupMember Parse(XmlNode node, XmlNamespaceManager namespaceManager);
    internal void Write(StreamWriter sw, string nodeName);
    public string get_uniqueName();
    public void set_uniqueName(string value);
    public bool get_group();
    public void set_group(bool value);
}
[XmlTypeAttribute]
[XmlRootAttribute]
public class NPOI.OpenXmlFormats.Spreadsheet.CT_GroupMembers : object {
    private List`1<CT_GroupMember> groupMemberField;
    private UInt32 countField;
    private bool countFieldSpecified;
    [XmlElementAttribute("groupMember")]
public List`1<CT_GroupMember> groupMember { get; public set; }
    [XmlAttributeAttribute]
public UInt32 count { get; public set; }
    [XmlIgnoreAttribute]
public bool countSpecified { get; public set; }
    public static CT_GroupMembers Parse(XmlNode node, XmlNamespaceManager namespaceManager);
    internal void Write(StreamWriter sw, string nodeName);
    public List`1<CT_GroupMember> get_groupMember();
    public void set_groupMember(List`1<CT_GroupMember> value);
    public UInt32 get_count();
    public void set_count(UInt32 value);
    public bool get_countSpecified();
    public void set_countSpecified(bool value);
}
[XmlTypeAttribute]
[XmlRootAttribute]
public class NPOI.OpenXmlFormats.Spreadsheet.CT_Groups : object {
    private List`1<CT_LevelGroup> groupField;
    private UInt32 countField;
    private bool countFieldSpecified;
    [XmlElementAttribute("group")]
public List`1<CT_LevelGroup> group { get; public set; }
    [XmlAttributeAttribute]
public UInt32 count { get; public set; }
    [XmlIgnoreAttribute]
public bool countSpecified { get; public set; }
    public static CT_Groups Parse(XmlNode node, XmlNamespaceManager namespaceManager);
    internal void Write(StreamWriter sw, string nodeName);
    public List`1<CT_LevelGroup> get_group();
    public void set_group(List`1<CT_LevelGroup> value);
    public UInt32 get_count();
    public void set_count(UInt32 value);
    public bool get_countSpecified();
    public void set_countSpecified(bool value);
}
[XmlTypeAttribute]
public class NPOI.OpenXmlFormats.Spreadsheet.CT_HeaderFooter : object {
    private string oddHeaderField;
    private string oddFooterField;
    private string evenHeaderField;
    private string evenFooterField;
    private string firstHeaderField;
    private string firstFooterField;
    private bool differentOddEvenField;
    private bool differentFirstField;
    private bool scaleWithDocField;
    private bool alignWithMarginsField;
    [XmlElementAttribute]
public string oddHeader { get; public set; }
    [XmlElementAttribute]
public string oddFooter { get; public set; }
    [XmlElementAttribute]
public string evenHeader { get; public set; }
    [XmlElementAttribute]
public string evenFooter { get; public set; }
    [XmlElementAttribute]
public string firstHeader { get; public set; }
    [XmlElementAttribute]
public string firstFooter { get; public set; }
    [XmlAttributeAttribute]
[DefaultValueAttribute("False")]
public bool differentOddEven { get; public set; }
    [XmlAttributeAttribute]
[DefaultValueAttribute("False")]
public bool differentFirst { get; public set; }
    [XmlAttributeAttribute]
[DefaultValueAttribute("True")]
public bool scaleWithDoc { get; public set; }
    [XmlAttributeAttribute]
[DefaultValueAttribute("True")]
public bool alignWithMargins { get; public set; }
    public string get_oddHeader();
    public void set_oddHeader(string value);
    public string get_oddFooter();
    public void set_oddFooter(string value);
    public string get_evenHeader();
    public void set_evenHeader(string value);
    public string get_evenFooter();
    public void set_evenFooter(string value);
    public string get_firstHeader();
    public void set_firstHeader(string value);
    public string get_firstFooter();
    public void set_firstFooter(string value);
    public bool get_differentOddEven();
    public void set_differentOddEven(bool value);
    public bool get_differentFirst();
    public void set_differentFirst(bool value);
    public bool get_scaleWithDoc();
    public void set_scaleWithDoc(bool value);
    public bool get_alignWithMargins();
    public void set_alignWithMargins(bool value);
    public static CT_HeaderFooter Parse(XmlNode node, XmlNamespaceManager namespaceManager);
    internal void Write(StreamWriter sw, string nodeName);
}
[XmlTypeAttribute]
[XmlRootAttribute]
public class NPOI.OpenXmlFormats.Spreadsheet.CT_HierarchyUsage : object {
    private int hierarchyUsageField;
    [XmlAttributeAttribute]
public int hierarchyUsage { get; public set; }
    public static CT_HierarchyUsage Parse(XmlNode node, XmlNamespaceManager namespaceManager);
    internal void Write(StreamWriter sw, string nodeName);
    public int get_hierarchyUsage();
    public void set_hierarchyUsage(int value);
}
[XmlTypeAttribute]
public class NPOI.OpenXmlFormats.Spreadsheet.CT_Hyperlink : object {
    private string refField;
    private string idField;
    private string locationField;
    private string tooltipField;
    private string displayField;
    [XmlAttributeAttribute("ref")]
public string ref { get; public set; }
    [XmlAttributeAttribute]
public string id { get; public set; }
    [XmlAttributeAttribute]
public string location { get; public set; }
    [XmlAttributeAttribute]
public string tooltip { get; public set; }
    [XmlAttributeAttribute]
public string display { get; public set; }
    public string get_ref();
    public void set_ref(string value);
    public string get_id();
    public void set_id(string value);
    public string get_location();
    public void set_location(string value);
    public string get_tooltip();
    public void set_tooltip(string value);
    public string get_display();
    public void set_display(string value);
    public static CT_Hyperlink Parse(XmlNode node, XmlNamespaceManager namespaceManager);
    internal void Write(StreamWriter sw, string nodeName);
    public CT_Hyperlink Copy();
}
[XmlTypeAttribute]
public class NPOI.OpenXmlFormats.Spreadsheet.CT_Hyperlinks : object {
    private List`1<CT_Hyperlink> hyperlinkField;
    [XmlElementAttribute("hyperlink")]
public List`1<CT_Hyperlink> hyperlink { get; public set; }
    public static CT_Hyperlinks Parse(XmlNode node, XmlNamespaceManager namespaceManager);
    internal void Write(StreamWriter sw, string nodeName);
    public void SetHyperlinkArray(CT_Hyperlink[] array);
    public List`1<CT_Hyperlink> get_hyperlink();
    public void set_hyperlink(List`1<CT_Hyperlink> value);
}
[XmlTypeAttribute]
[XmlRootAttribute]
public class NPOI.OpenXmlFormats.Spreadsheet.CT_I : object {
    private List`1<CT_X> xField;
    private ST_ItemType tField;
    private UInt32 rField;
    private UInt32 iField;
    [XmlElementAttribute("x")]
public List`1<CT_X> x { get; public set; }
    [XmlAttributeAttribute]
[DefaultValueAttribute("Mono.Cecil.CustomAttributeArgument")]
public ST_ItemType t { get; public set; }
    [XmlAttributeAttribute]
[DefaultValueAttribute("System.UInt32", "0")]
public UInt32 r { get; public set; }
    [XmlAttributeAttribute]
[DefaultValueAttribute("System.UInt32", "0")]
public UInt32 i { get; public set; }
    public static CT_I Parse(XmlNode node, XmlNamespaceManager namespaceManager);
    internal void Write(StreamWriter sw, string nodeName);
    public List`1<CT_X> get_x();
    public void set_x(List`1<CT_X> value);
    public ST_ItemType get_t();
    public void set_t(ST_ItemType value);
    public UInt32 get_r();
    public void set_r(UInt32 value);
    public UInt32 get_i();
    public void set_i(UInt32 value);
}
public class NPOI.OpenXmlFormats.Spreadsheet.CT_IconFilter : object {
    private ST_IconSetType iconSetField;
    private UInt32 iconIdField;
    private bool iconIdFieldSpecified;
    public ST_IconSetType iconSet { get; public set; }
    public UInt32 iconId { get; public set; }
    [XmlIgnoreAttribute]
public bool iconIdSpecified { get; public set; }
    public ST_IconSetType get_iconSet();
    public void set_iconSet(ST_IconSetType value);
    public UInt32 get_iconId();
    public void set_iconId(UInt32 value);
    public bool get_iconIdSpecified();
    public void set_iconIdSpecified(bool value);
}
[XmlTypeAttribute]
public class NPOI.OpenXmlFormats.Spreadsheet.CT_IconSet : object {
    private List`1<CT_Cfvo> cfvoField;
    private ST_IconSetType iconSetField;
    private bool showValueField;
    private bool showValueFieldSpecified;
    private bool percentField;
    private bool reverseField;
    [XmlElementAttribute]
public List`1<CT_Cfvo> cfvo { get; public set; }
    [XmlAttributeAttribute]
[DefaultValueAttribute("Mono.Cecil.CustomAttributeArgument")]
public ST_IconSetType iconSet { get; public set; }
    [XmlAttributeAttribute]
[DefaultValueAttribute("True")]
public bool showValue { get; public set; }
    [XmlAttributeAttribute]
[DefaultValueAttribute("True")]
public bool percent { get; public set; }
    [XmlAttributeAttribute]
[DefaultValueAttribute("False")]
public bool reverse { get; public set; }
    public List`1<CT_Cfvo> get_cfvo();
    public void set_cfvo(List`1<CT_Cfvo> value);
    public ST_IconSetType get_iconSet();
    public void set_iconSet(ST_IconSetType value);
    public bool get_showValue();
    public void set_showValue(bool value);
    public bool get_percent();
    public void set_percent(bool value);
    public bool get_reverse();
    public void set_reverse(bool value);
    public static CT_IconSet Parse(XmlNode node, XmlNamespaceManager namespaceManager);
    public CT_Cfvo AddNewCfvo();
    public bool IsSetShowValue();
    internal void Write(StreamWriter sw, string nodeName);
}
[XmlTypeAttribute]
public class NPOI.OpenXmlFormats.Spreadsheet.CT_IgnoredError : object {
    private List`1<string> sqrefField;
    private bool evalErrorField;
    private bool twoDigitTextYearField;
    private bool numberStoredAsTextField;
    private bool formulaField;
    private bool formulaRangeField;
    private bool unlockedFormulaField;
    private bool emptyCellReferenceField;
    private bool listDataValidationField;
    private bool calculatedColumnField;
    [XmlAttributeAttribute]
public List`1<string> sqref { get; public set; }
    [XmlAttributeAttribute]
[DefaultValueAttribute("False")]
public bool evalError { get; public set; }
    [XmlAttributeAttribute]
[DefaultValueAttribute("False")]
public bool twoDigitTextYear { get; public set; }
    [XmlAttributeAttribute]
[DefaultValueAttribute("False")]
public bool numberStoredAsText { get; public set; }
    [XmlAttributeAttribute]
[DefaultValueAttribute("False")]
public bool formula { get; public set; }
    [XmlAttributeAttribute]
[DefaultValueAttribute("False")]
public bool formulaRange { get; public set; }
    [XmlAttributeAttribute]
[DefaultValueAttribute("False")]
public bool unlockedFormula { get; public set; }
    [XmlAttributeAttribute]
[DefaultValueAttribute("False")]
public bool emptyCellReference { get; public set; }
    [XmlAttributeAttribute]
[DefaultValueAttribute("False")]
public bool listDataValidation { get; public set; }
    [XmlAttributeAttribute]
[DefaultValueAttribute("False")]
public bool calculatedColumn { get; public set; }
    public static CT_IgnoredError Parse(XmlNode node, XmlNamespaceManager namespaceManager);
    internal void Write(StreamWriter sw, string nodeName);
    public List`1<string> get_sqref();
    public void set_sqref(List`1<string> value);
    public bool get_evalError();
    public void set_evalError(bool value);
    public bool get_twoDigitTextYear();
    public void set_twoDigitTextYear(bool value);
    public bool get_numberStoredAsText();
    public void set_numberStoredAsText(bool value);
    public bool get_formula();
    public void set_formula(bool value);
    public bool get_formulaRange();
    public void set_formulaRange(bool value);
    public bool get_unlockedFormula();
    public void set_unlockedFormula(bool value);
    public bool get_emptyCellReference();
    public void set_emptyCellReference(bool value);
    public bool get_listDataValidation();
    public void set_listDataValidation(bool value);
    public bool get_calculatedColumn();
    public void set_calculatedColumn(bool value);
}
[XmlTypeAttribute]
public class NPOI.OpenXmlFormats.Spreadsheet.CT_IgnoredErrors : object {
    private List`1<CT_IgnoredError> ignoredErrorField;
    private CT_ExtensionList extLstField;
    public List`1<CT_IgnoredError> ignoredError { get; public set; }
    public CT_ExtensionList extLst { get; public set; }
    public static CT_IgnoredErrors Parse(XmlNode node, XmlNamespaceManager namespaceManager);
    internal void Write(StreamWriter sw, string nodeName);
    public CT_IgnoredError AddNewIgnoredError();
    internal CT_IgnoredError GetIgnoredErrorArray(int v);
    public List`1<CT_IgnoredError> get_ignoredError();
    public void set_ignoredError(List`1<CT_IgnoredError> value);
    public CT_ExtensionList get_extLst();
    public void set_extLst(CT_ExtensionList value);
}
[XmlTypeAttribute]
public class NPOI.OpenXmlFormats.Spreadsheet.CT_Index : object {
    private UInt32 vField;
    [XmlAttributeAttribute]
public UInt32 v { get; public set; }
    public UInt32 get_v();
    public void set_v(UInt32 value);
    public static CT_Index Parse(XmlNode node, XmlNamespaceManager namespaceManager);
    internal void Write(StreamWriter sw, string nodeName);
}
[XmlTypeAttribute]
public class NPOI.OpenXmlFormats.Spreadsheet.CT_InputCells : object {
    private string rField;
    private bool deletedField;
    private bool undoneField;
    private string valField;
    private UInt32 numFmtIdField;
    private bool numFmtIdFieldSpecified;
    public string r { get; public set; }
    [DefaultValueAttribute("False")]
public bool deleted { get; public set; }
    [DefaultValueAttribute("False")]
public bool undone { get; public set; }
    public string val { get; public set; }
    public UInt32 numFmtId { get; public set; }
    public string get_r();
    public void set_r(string value);
    public bool get_deleted();
    public void set_deleted(bool value);
    public bool get_undone();
    public void set_undone(bool value);
    public string get_val();
    public void set_val(string value);
    public UInt32 get_numFmtId();
    public void set_numFmtId(UInt32 value);
    public static CT_InputCells Parse(XmlNode node, XmlNamespaceManager namespaceManager);
    internal void Write(StreamWriter sw, string nodeName);
}
[XmlTypeAttribute]
public class NPOI.OpenXmlFormats.Spreadsheet.CT_IntProperty : object {
    private int valField;
    [XmlAttributeAttribute]
public int val { get; public set; }
    public int get_val();
    public void set_val(int value);
    public static CT_IntProperty Parse(XmlNode node, XmlNamespaceManager namespaceManager);
    internal void Write(StreamWriter sw, string nodeName);
}
[XmlTypeAttribute]
[XmlRootAttribute]
public class NPOI.OpenXmlFormats.Spreadsheet.CT_Item : object {
    private string nField;
    private ST_ItemType tField;
    private bool hField;
    private bool sField;
    private bool sdField;
    private bool fField;
    private bool mField;
    private bool cField;
    private UInt32 xField;
    private bool xFieldSpecified;
    private bool dField;
    private bool eField;
    [XmlAttributeAttribute]
public string n { get; public set; }
    [XmlAttributeAttribute]
[DefaultValueAttribute("Mono.Cecil.CustomAttributeArgument")]
public ST_ItemType t { get; public set; }
    [XmlAttributeAttribute]
[DefaultValueAttribute("False")]
public bool h { get; public set; }
    [XmlAttributeAttribute]
[DefaultValueAttribute("False")]
public bool s { get; public set; }
    [XmlAttributeAttribute]
[DefaultValueAttribute("True")]
public bool sd { get; public set; }
    [XmlAttributeAttribute]
[DefaultValueAttribute("False")]
public bool f { get; public set; }
    [XmlAttributeAttribute]
[DefaultValueAttribute("False")]
public bool m { get; public set; }
    [XmlAttributeAttribute]
[DefaultValueAttribute("False")]
public bool c { get; public set; }
    [XmlAttributeAttribute]
public UInt32 x { get; public set; }
    [XmlIgnoreAttribute]
public bool xSpecified { get; public set; }
    [XmlAttributeAttribute]
[DefaultValueAttribute("False")]
public bool d { get; public set; }
    [XmlAttributeAttribute]
[DefaultValueAttribute("True")]
public bool e { get; public set; }
    public static CT_Item Parse(XmlNode node, XmlNamespaceManager namespaceManager);
    internal void Write(StreamWriter sw, string nodeName);
    public string get_n();
    public void set_n(string value);
    public ST_ItemType get_t();
    public void set_t(ST_ItemType value);
    public bool get_h();
    public void set_h(bool value);
    public bool get_s();
    public void set_s(bool value);
    public bool get_sd();
    public void set_sd(bool value);
    public bool get_f();
    public void set_f(bool value);
    public bool get_m();
    public void set_m(bool value);
    public bool get_c();
    public void set_c(bool value);
    public UInt32 get_x();
    public void set_x(UInt32 value);
    public bool get_xSpecified();
    public void set_xSpecified(bool value);
    public bool get_d();
    public void set_d(bool value);
    public bool get_e();
    public void set_e(bool value);
}
[XmlTypeAttribute]
[XmlRootAttribute]
public class NPOI.OpenXmlFormats.Spreadsheet.CT_Items : object {
    private List`1<CT_Item> itemField;
    private UInt32 countField;
    private bool countFieldSpecified;
    [XmlElementAttribute("item")]
public List`1<CT_Item> item { get; public set; }
    [XmlAttributeAttribute]
public UInt32 count { get; public set; }
    [XmlIgnoreAttribute]
public bool countSpecified { get; public set; }
    public static CT_Items Parse(XmlNode node, XmlNamespaceManager namespaceManager);
    internal void Write(StreamWriter sw, string nodeName);
    public List`1<CT_Item> get_item();
    public void set_item(List`1<CT_Item> value);
    public UInt32 get_count();
    public void set_count(UInt32 value);
    public bool get_countSpecified();
    public void set_countSpecified(bool value);
    public CT_Item AddNewItem();
    public UInt32 SizeOfItemArray();
}
[XmlTypeAttribute]
public class NPOI.OpenXmlFormats.Spreadsheet.CT_LegacyDrawing : object {
    private string idField;
    [XmlAttributeAttribute]
public string id { get; public set; }
    public static CT_LegacyDrawing Parse(XmlNode node, XmlNamespaceManager namespaceManager);
    internal void Write(StreamWriter sw, string nodeName);
    public string get_id();
    public void set_id(string value);
}
[XmlTypeAttribute]
[XmlRootAttribute]
public class NPOI.OpenXmlFormats.Spreadsheet.CT_LevelGroup : object {
    private CT_GroupMembers groupMembersField;
    private string nameField;
    private string uniqueNameField;
    private string captionField;
    private string uniqueParentField;
    private int idField;
    private bool idFieldSpecified;
    [XmlElementAttribute]
public CT_GroupMembers groupMembers { get; public set; }
    [XmlAttributeAttribute]
public string name { get; public set; }
    [XmlAttributeAttribute]
public string uniqueName { get; public set; }
    [XmlAttributeAttribute]
public string caption { get; public set; }
    [XmlAttributeAttribute]
public string uniqueParent { get; public set; }
    [XmlAttributeAttribute]
public int id { get; public set; }
    [XmlIgnoreAttribute]
public bool idSpecified { get; public set; }
    public static CT_LevelGroup Parse(XmlNode node, XmlNamespaceManager namespaceManager);
    internal void Write(StreamWriter sw, string nodeName);
    public CT_GroupMembers get_groupMembers();
    public void set_groupMembers(CT_GroupMembers value);
    public string get_name();
    public void set_name(string value);
    public string get_uniqueName();
    public void set_uniqueName(string value);
    public string get_caption();
    public void set_caption(string value);
    public string get_uniqueParent();
    public void set_uniqueParent(string value);
    public int get_id();
    public void set_id(int value);
    public bool get_idSpecified();
    public void set_idSpecified(bool value);
}
[XmlTypeAttribute]
[XmlRootAttribute]
public class NPOI.OpenXmlFormats.Spreadsheet.CT_Location : object {
    private string refField;
    private UInt32 firstHeaderRowField;
    private UInt32 firstDataRowField;
    private UInt32 firstDataColField;
    private UInt32 rowPageCountField;
    private UInt32 colPageCountField;
    [XmlAttributeAttribute]
public string ref { get; public set; }
    [XmlAttributeAttribute]
public UInt32 firstHeaderRow { get; public set; }
    [XmlAttributeAttribute]
public UInt32 firstDataRow { get; public set; }
    [XmlAttributeAttribute]
public UInt32 firstDataCol { get; public set; }
    [XmlAttributeAttribute]
[DefaultValueAttribute("System.UInt32", "0")]
public UInt32 rowPageCount { get; public set; }
    [XmlAttributeAttribute]
[DefaultValueAttribute("System.UInt32", "0")]
public UInt32 colPageCount { get; public set; }
    public static CT_Location Parse(XmlNode node, XmlNamespaceManager namespaceManager);
    internal void Write(StreamWriter sw, string nodeName);
    public string get_ref();
    public void set_ref(string value);
    public UInt32 get_firstHeaderRow();
    public void set_firstHeaderRow(UInt32 value);
    public UInt32 get_firstDataRow();
    public void set_firstDataRow(UInt32 value);
    public UInt32 get_firstDataCol();
    public void set_firstDataCol(UInt32 value);
    public UInt32 get_rowPageCount();
    public void set_rowPageCount(UInt32 value);
    public UInt32 get_colPageCount();
    public void set_colPageCount(UInt32 value);
}
[XmlTypeAttribute]
public class NPOI.OpenXmlFormats.Spreadsheet.CT_Macrosheet : object {
    private CT_SheetPr sheetPrField;
    private CT_SheetDimension dimensionField;
    private CT_SheetViews sheetViewsField;
    private CT_SheetFormatPr sheetFormatPrField;
    private List`1<CT_Col> colsField;
    private List`1<CT_Row> sheetDataField;
    private CT_SheetProtection sheetProtectionField;
    private CT_AutoFilter autoFilterField;
    private CT_SortState sortStateField;
    private CT_DataConsolidate dataConsolidateField;
    private List`1<CT_CustomSheetView> customSheetViewsField;
    private CT_PhoneticPr phoneticPrField;
    private List`1<CT_ConditionalFormatting> conditionalFormattingField;
    private CT_PrintOptions printOptionsField;
    private CT_PageMargins pageMarginsField;
    private CT_PageSetup pageSetupField;
    private CT_HeaderFooter headerFooterField;
    private CT_PageBreak rowBreaksField;
    private CT_PageBreak colBreaksField;
    private List`1<CT_CustomProperty> customPropertiesField;
    private CT_Drawing drawingField;
    private CT_LegacyDrawing legacyDrawingField;
    private CT_LegacyDrawing legacyDrawingHFField;
    private CT_SheetBackgroundPicture pictureField;
    private List`1<CT_OleObject> oleObjectsField;
    private CT_ExtensionList extLstField;
    public CT_SheetPr sheetPr { get; public set; }
    public CT_SheetDimension dimension { get; public set; }
    public CT_SheetViews sheetViews { get; public set; }
    public CT_SheetFormatPr sheetFormatPr { get; public set; }
    [XmlArrayAttribute]
[XmlArrayItemAttribute("col", "NPOI.OpenXmlFormats.Spreadsheet.CT_Col")]
public List`1<CT_Col> cols { get; public set; }
    [XmlArrayAttribute]
[XmlArrayItemAttribute("row")]
public List`1<CT_Row> sheetData { get; public set; }
    public CT_SheetProtection sheetProtection { get; public set; }
    public CT_AutoFilter autoFilter { get; public set; }
    public CT_SortState sortState { get; public set; }
    public CT_DataConsolidate dataConsolidate { get; public set; }
    [XmlArrayAttribute]
[XmlArrayItemAttribute("customSheetView")]
public List`1<CT_CustomSheetView> customSheetViews { get; public set; }
    public CT_PhoneticPr phoneticPr { get; public set; }
    public List`1<CT_ConditionalFormatting> conditionalFormatting { get; public set; }
    public CT_PrintOptions printOptions { get; public set; }
    public CT_PageMargins pageMargins { get; public set; }
    public CT_PageSetup pageSetup { get; public set; }
    public CT_HeaderFooter headerFooter { get; public set; }
    public CT_PageBreak rowBreaks { get; public set; }
    public CT_PageBreak colBreaks { get; public set; }
    [XmlArrayAttribute]
[XmlArrayItemAttribute("customPr")]
public List`1<CT_CustomProperty> customProperties { get; public set; }
    public CT_Drawing drawing { get; public set; }
    public CT_LegacyDrawing legacyDrawing { get; public set; }
    public CT_LegacyDrawing legacyDrawingHF { get; public set; }
    public CT_SheetBackgroundPicture picture { get; public set; }
    [XmlArrayAttribute]
[XmlArrayItemAttribute("oleObject")]
public List`1<CT_OleObject> oleObjects { get; public set; }
    public CT_ExtensionList extLst { get; public set; }
    public CT_SheetPr get_sheetPr();
    public void set_sheetPr(CT_SheetPr value);
    public CT_SheetDimension get_dimension();
    public void set_dimension(CT_SheetDimension value);
    public CT_SheetViews get_sheetViews();
    public void set_sheetViews(CT_SheetViews value);
    public CT_SheetFormatPr get_sheetFormatPr();
    public void set_sheetFormatPr(CT_SheetFormatPr value);
    public List`1<CT_Col> get_cols();
    public void set_cols(List`1<CT_Col> value);
    public List`1<CT_Row> get_sheetData();
    public void set_sheetData(List`1<CT_Row> value);
    public CT_SheetProtection get_sheetProtection();
    public void set_sheetProtection(CT_SheetProtection value);
    public CT_AutoFilter get_autoFilter();
    public void set_autoFilter(CT_AutoFilter value);
    public CT_SortState get_sortState();
    public void set_sortState(CT_SortState value);
    public CT_DataConsolidate get_dataConsolidate();
    public void set_dataConsolidate(CT_DataConsolidate value);
    public List`1<CT_CustomSheetView> get_customSheetViews();
    public void set_customSheetViews(List`1<CT_CustomSheetView> value);
    public CT_PhoneticPr get_phoneticPr();
    public void set_phoneticPr(CT_PhoneticPr value);
    public List`1<CT_ConditionalFormatting> get_conditionalFormatting();
    public void set_conditionalFormatting(List`1<CT_ConditionalFormatting> value);
    public CT_PrintOptions get_printOptions();
    public void set_printOptions(CT_PrintOptions value);
    public CT_PageMargins get_pageMargins();
    public void set_pageMargins(CT_PageMargins value);
    public CT_PageSetup get_pageSetup();
    public void set_pageSetup(CT_PageSetup value);
    public CT_HeaderFooter get_headerFooter();
    public void set_headerFooter(CT_HeaderFooter value);
    public CT_PageBreak get_rowBreaks();
    public void set_rowBreaks(CT_PageBreak value);
    public CT_PageBreak get_colBreaks();
    public void set_colBreaks(CT_PageBreak value);
    public List`1<CT_CustomProperty> get_customProperties();
    public void set_customProperties(List`1<CT_CustomProperty> value);
    public CT_Drawing get_drawing();
    public void set_drawing(CT_Drawing value);
    public CT_LegacyDrawing get_legacyDrawing();
    public void set_legacyDrawing(CT_LegacyDrawing value);
    public CT_LegacyDrawing get_legacyDrawingHF();
    public void set_legacyDrawingHF(CT_LegacyDrawing value);
    public CT_SheetBackgroundPicture get_picture();
    public void set_picture(CT_SheetBackgroundPicture value);
    public List`1<CT_OleObject> get_oleObjects();
    public void set_oleObjects(List`1<CT_OleObject> value);
    public CT_ExtensionList get_extLst();
    public void set_extLst(CT_ExtensionList value);
}
[DebuggerStepThroughAttribute]
[DesignerCategoryAttribute("code")]
[XmlTypeAttribute]
public class NPOI.OpenXmlFormats.Spreadsheet.CT_Map : object {
    private CT_DataBinding dataBindingField;
    private UInt32 idField;
    private string nameField;
    private string rootElementField;
    private string schemaIDField;
    private bool showImportExportValidationErrorsField;
    private bool autoFitField;
    private bool appendField;
    private bool preserveSortAFLayoutField;
    private bool preserveFormatField;
    [XmlElementAttribute]
public CT_DataBinding DataBinding { get; public set; }
    [XmlIgnoreAttribute]
public bool DataBindingSpecified { get; }
    [XmlAttributeAttribute]
public UInt32 ID { get; public set; }
    [XmlAttributeAttribute]
public string Name { get; public set; }
    [XmlAttributeAttribute]
public string RootElement { get; public set; }
    [XmlAttributeAttribute]
public string SchemaID { get; public set; }
    [XmlAttributeAttribute]
public bool ShowImportExportValidationErrors { get; public set; }
    [XmlAttributeAttribute]
public bool AutoFit { get; public set; }
    [XmlAttributeAttribute]
public bool Append { get; public set; }
    [XmlAttributeAttribute]
public bool PreserveSortAFLayout { get; public set; }
    [XmlAttributeAttribute]
public bool PreserveFormat { get; public set; }
    public static CT_Map Parse(XmlNode node, XmlNamespaceManager namespaceManager);
    internal void Write(StreamWriter sw, string nodeName);
    public CT_DataBinding get_DataBinding();
    public void set_DataBinding(CT_DataBinding value);
    public bool get_DataBindingSpecified();
    public UInt32 get_ID();
    public void set_ID(UInt32 value);
    public string get_Name();
    public void set_Name(string value);
    public string get_RootElement();
    public void set_RootElement(string value);
    public string get_SchemaID();
    public void set_SchemaID(string value);
    public bool get_ShowImportExportValidationErrors();
    public void set_ShowImportExportValidationErrors(bool value);
    public bool get_AutoFit();
    public void set_AutoFit(bool value);
    public bool get_Append();
    public void set_Append(bool value);
    public bool get_PreserveSortAFLayout();
    public void set_PreserveSortAFLayout(bool value);
    public bool get_PreserveFormat();
    public void set_PreserveFormat(bool value);
}
[DebuggerStepThroughAttribute]
[DesignerCategoryAttribute("code")]
[XmlTypeAttribute]
[XmlRootAttribute("MapInfo")]
public class NPOI.OpenXmlFormats.Spreadsheet.CT_MapInfo : object {
    private List`1<CT_Schema> schemaField;
    private List`1<CT_Map> mapField;
    private string selectionNamespacesField;
    [XmlElementAttribute("Schema")]
public List`1<CT_Schema> Schema { get; public set; }
    [XmlElementAttribute("Map")]
public List`1<CT_Map> Map { get; public set; }
    [XmlAttributeAttribute]
public string SelectionNamespaces { get; public set; }
    public static CT_MapInfo Parse(XmlNode node, XmlNamespaceManager namespaceManager);
    internal void Write(StreamWriter sw, string nodeName);
    public List`1<CT_Schema> get_Schema();
    public void set_Schema(List`1<CT_Schema> value);
    public List`1<CT_Map> get_Map();
    public void set_Map(List`1<CT_Map> value);
    public string get_SelectionNamespaces();
    public void set_SelectionNamespaces(string value);
}
public class NPOI.OpenXmlFormats.Spreadsheet.CT_Mdx : object {
    private object itemField;
    private UInt32 nField;
    private ST_MdxFunctionType fField;
    public object Item { get; public set; }
    public UInt32 n { get; public set; }
    public ST_MdxFunctionType f { get; public set; }
    public object get_Item();
    public void set_Item(object value);
    public UInt32 get_n();
    public void set_n(UInt32 value);
    public ST_MdxFunctionType get_f();
    public void set_f(ST_MdxFunctionType value);
}
public class NPOI.OpenXmlFormats.Spreadsheet.CT_MdxKPI : object {
    private UInt32 nField;
    private UInt32 npField;
    private ST_MdxKPIProperty pField;
    public UInt32 n { get; public set; }
    public UInt32 np { get; public set; }
    public ST_MdxKPIProperty p { get; public set; }
    public UInt32 get_n();
    public void set_n(UInt32 value);
    public UInt32 get_np();
    public void set_np(UInt32 value);
    public ST_MdxKPIProperty get_p();
    public void set_p(ST_MdxKPIProperty value);
}
public class NPOI.OpenXmlFormats.Spreadsheet.CT_MdxMemeberProp : object {
    private UInt32 nField;
    private UInt32 npField;
    public UInt32 n { get; public set; }
    public UInt32 np { get; public set; }
    public UInt32 get_n();
    public void set_n(UInt32 value);
    public UInt32 get_np();
    public void set_np(UInt32 value);
}
public class NPOI.OpenXmlFormats.Spreadsheet.CT_MdxMetadata : object {
    private List`1<CT_Mdx> mdxField;
    private UInt32 countField;
    public List`1<CT_Mdx> mdx { get; public set; }
    [DefaultValueAttribute("System.UInt32", "0")]
public UInt32 count { get; public set; }
    public List`1<CT_Mdx> get_mdx();
    public void set_mdx(List`1<CT_Mdx> value);
    public UInt32 get_count();
    public void set_count(UInt32 value);
}
public class NPOI.OpenXmlFormats.Spreadsheet.CT_MdxSet : object {
    private List`1<CT_MetadataStringIndex> nField;
    private UInt32 nsField;
    private UInt32 cField;
    private ST_MdxSetOrder oField;
    public List`1<CT_MetadataStringIndex> n { get; public set; }
    public UInt32 ns { get; public set; }
    [DefaultValueAttribute("System.UInt32", "0")]
public UInt32 c { get; public set; }
    [DefaultValueAttribute("Mono.Cecil.CustomAttributeArgument")]
public ST_MdxSetOrder o { get; public set; }
    public List`1<CT_MetadataStringIndex> get_n();
    public void set_n(List`1<CT_MetadataStringIndex> value);
    public UInt32 get_ns();
    public void set_ns(UInt32 value);
    public UInt32 get_c();
    public void set_c(UInt32 value);
    public ST_MdxSetOrder get_o();
    public void set_o(ST_MdxSetOrder value);
}
public class NPOI.OpenXmlFormats.Spreadsheet.CT_MdxTuple : object {
    private List`1<CT_MetadataStringIndex> nField;
    private UInt32 cField;
    private string ctField;
    private UInt32 siField;
    private bool siFieldSpecified;
    private UInt32 fiField;
    private bool fiFieldSpecified;
    private Byte[] bcField;
    private Byte[] fcField;
    private bool iField;
    private bool uField;
    private bool stField;
    private bool bField;
    public List`1<CT_MetadataStringIndex> n { get; public set; }
    [DefaultValueAttribute("System.UInt32", "0")]
public UInt32 c { get; public set; }
    public string ct { get; public set; }
    public UInt32 si { get; public set; }
    [XmlIgnoreAttribute]
public bool siSpecified { get; public set; }
    public UInt32 fi { get; public set; }
    [XmlIgnoreAttribute]
public bool fiSpecified { get; public set; }
    [XmlAttributeAttribute]
public Byte[] bc { get; public set; }
    [XmlAttributeAttribute]
public Byte[] fc { get; public set; }
    [DefaultValueAttribute("False")]
public bool i { get; public set; }
    [DefaultValueAttribute("False")]
public bool u { get; public set; }
    [DefaultValueAttribute("False")]
public bool st { get; public set; }
    [DefaultValueAttribute("False")]
public bool b { get; public set; }
    public List`1<CT_MetadataStringIndex> get_n();
    public void set_n(List`1<CT_MetadataStringIndex> value);
    public UInt32 get_c();
    public void set_c(UInt32 value);
    public string get_ct();
    public void set_ct(string value);
    public UInt32 get_si();
    public void set_si(UInt32 value);
    public bool get_siSpecified();
    public void set_siSpecified(bool value);
    public UInt32 get_fi();
    public void set_fi(UInt32 value);
    public bool get_fiSpecified();
    public void set_fiSpecified(bool value);
    public Byte[] get_bc();
    public void set_bc(Byte[] value);
    public Byte[] get_fc();
    public void set_fc(Byte[] value);
    public bool get_i();
    public void set_i(bool value);
    public bool get_u();
    public void set_u(bool value);
    public bool get_st();
    public void set_st(bool value);
    public bool get_b();
    public void set_b(bool value);
}
[XmlTypeAttribute]
[XmlRootAttribute]
public class NPOI.OpenXmlFormats.Spreadsheet.CT_MeasureDimensionMap : object {
    private UInt32 measureGroupField;
    private bool measureGroupFieldSpecified;
    private UInt32 dimensionField;
    private bool dimensionFieldSpecified;
    [XmlAttributeAttribute]
public UInt32 measureGroup { get; public set; }
    [XmlIgnoreAttribute]
public bool measureGroupSpecified { get; public set; }
    [XmlAttributeAttribute]
public UInt32 dimension { get; public set; }
    [XmlIgnoreAttribute]
public bool dimensionSpecified { get; public set; }
    public static CT_MeasureDimensionMap Parse(XmlNode node, XmlNamespaceManager namespaceManager);
    internal void Write(StreamWriter sw, string nodeName);
    public UInt32 get_measureGroup();
    public void set_measureGroup(UInt32 value);
    public bool get_measureGroupSpecified();
    public void set_measureGroupSpecified(bool value);
    public UInt32 get_dimension();
    public void set_dimension(UInt32 value);
    public bool get_dimensionSpecified();
    public void set_dimensionSpecified(bool value);
}
[XmlTypeAttribute]
[XmlRootAttribute]
public class NPOI.OpenXmlFormats.Spreadsheet.CT_MeasureDimensionMaps : object {
    private List`1<CT_MeasureDimensionMap> mapField;
    private UInt32 countField;
    private bool countFieldSpecified;
    [XmlElementAttribute("map")]
public List`1<CT_MeasureDimensionMap> map { get; public set; }
    [XmlAttributeAttribute]
public UInt32 count { get; public set; }
    [XmlIgnoreAttribute]
public bool countSpecified { get; public set; }
    public static CT_MeasureDimensionMaps Parse(XmlNode node, XmlNamespaceManager namespaceManager);
    internal void Write(StreamWriter sw, string nodeName);
    public List`1<CT_MeasureDimensionMap> get_map();
    public void set_map(List`1<CT_MeasureDimensionMap> value);
    public UInt32 get_count();
    public void set_count(UInt32 value);
    public bool get_countSpecified();
    public void set_countSpecified(bool value);
}
[XmlTypeAttribute]
[XmlRootAttribute]
public class NPOI.OpenXmlFormats.Spreadsheet.CT_MeasureGroup : object {
    private string nameField;
    private string captionField;
    [XmlAttributeAttribute]
public string name { get; public set; }
    [XmlAttributeAttribute]
public string caption { get; public set; }
    public static CT_MeasureGroup Parse(XmlNode node, XmlNamespaceManager namespaceManager);
    internal void Write(StreamWriter sw, string nodeName);
    public string get_name();
    public void set_name(string value);
    public string get_caption();
    public void set_caption(string value);
}
[XmlTypeAttribute]
[XmlRootAttribute]
public class NPOI.OpenXmlFormats.Spreadsheet.CT_MeasureGroups : object {
    private List`1<CT_MeasureGroup> measureGroupField;
    private UInt32 countField;
    private bool countFieldSpecified;
    [XmlElementAttribute("measureGroup")]
public List`1<CT_MeasureGroup> measureGroup { get; public set; }
    [XmlAttributeAttribute]
public UInt32 count { get; public set; }
    [XmlIgnoreAttribute]
public bool countSpecified { get; public set; }
    public static CT_MeasureGroups Parse(XmlNode node, XmlNamespaceManager namespaceManager);
    internal void Write(StreamWriter sw, string nodeName);
    public List`1<CT_MeasureGroup> get_measureGroup();
    public void set_measureGroup(List`1<CT_MeasureGroup> value);
    public UInt32 get_count();
    public void set_count(UInt32 value);
    public bool get_countSpecified();
    public void set_countSpecified(bool value);
}
[XmlTypeAttribute]
[XmlRootAttribute]
public class NPOI.OpenXmlFormats.Spreadsheet.CT_Member : object {
    private string nameField;
    [XmlAttributeAttribute]
public string name { get; public set; }
    public static CT_Member Parse(XmlNode node, XmlNamespaceManager namespaceManager);
    internal void Write(StreamWriter sw, string nodeName);
    public string get_name();
    public void set_name(string value);
}
[XmlTypeAttribute]
[XmlRootAttribute]
public class NPOI.OpenXmlFormats.Spreadsheet.CT_MemberProperties : object {
    private List`1<CT_MemberProperty> mpField;
    private UInt32 countField;
    private bool countFieldSpecified;
    [XmlElementAttribute("mp")]
public List`1<CT_MemberProperty> mp { get; public set; }
    [XmlAttributeAttribute]
public UInt32 count { get; public set; }
    [XmlIgnoreAttribute]
public bool countSpecified { get; public set; }
    public static CT_MemberProperties Parse(XmlNode node, XmlNamespaceManager namespaceManager);
    internal void Write(StreamWriter sw, string nodeName);
    public List`1<CT_MemberProperty> get_mp();
    public void set_mp(List`1<CT_MemberProperty> value);
    public UInt32 get_count();
    public void set_count(UInt32 value);
    public bool get_countSpecified();
    public void set_countSpecified(bool value);
}
[XmlTypeAttribute]
[XmlRootAttribute]
public class NPOI.OpenXmlFormats.Spreadsheet.CT_MemberProperty : object {
    private string nameField;
    private bool showCellField;
    private bool showTipField;
    private bool showAsCaptionField;
    private UInt32 nameLenField;
    private bool nameLenFieldSpecified;
    private UInt32 pPosField;
    private bool pPosFieldSpecified;
    private UInt32 pLenField;
    private bool pLenFieldSpecified;
    private UInt32 levelField;
    private bool levelFieldSpecified;
    private UInt32 fieldField;
    [XmlAttributeAttribute]
public string name { get; public set; }
    [XmlAttributeAttribute]
[DefaultValueAttribute("False")]
public bool showCell { get; public set; }
    [XmlAttributeAttribute]
[DefaultValueAttribute("False")]
public bool showTip { get; public set; }
    [XmlAttributeAttribute]
[DefaultValueAttribute("False")]
public bool showAsCaption { get; public set; }
    [XmlAttributeAttribute]
public UInt32 nameLen { get; public set; }
    [XmlIgnoreAttribute]
public bool nameLenSpecified { get; public set; }
    [XmlAttributeAttribute]
public UInt32 pPos { get; public set; }
    [XmlIgnoreAttribute]
public bool pPosSpecified { get; public set; }
    [XmlAttributeAttribute]
public UInt32 pLen { get; public set; }
    [XmlIgnoreAttribute]
public bool pLenSpecified { get; public set; }
    [XmlAttributeAttribute]
public UInt32 level { get; public set; }
    [XmlIgnoreAttribute]
public bool levelSpecified { get; public set; }
    [XmlAttributeAttribute]
public UInt32 field { get; public set; }
    public static CT_MemberProperty Parse(XmlNode node, XmlNamespaceManager namespaceManager);
    internal void Write(StreamWriter sw, string nodeName);
    public string get_name();
    public void set_name(string value);
    public bool get_showCell();
    public void set_showCell(bool value);
    public bool get_showTip();
    public void set_showTip(bool value);
    public bool get_showAsCaption();
    public void set_showAsCaption(bool value);
    public UInt32 get_nameLen();
    public void set_nameLen(UInt32 value);
    public bool get_nameLenSpecified();
    public void set_nameLenSpecified(bool value);
    public UInt32 get_pPos();
    public void set_pPos(UInt32 value);
    public bool get_pPosSpecified();
    public void set_pPosSpecified(bool value);
    public UInt32 get_pLen();
    public void set_pLen(UInt32 value);
    public bool get_pLenSpecified();
    public void set_pLenSpecified(bool value);
    public UInt32 get_level();
    public void set_level(UInt32 value);
    public bool get_levelSpecified();
    public void set_levelSpecified(bool value);
    public UInt32 get_field();
    public void set_field(UInt32 value);
}
[XmlTypeAttribute]
[XmlRootAttribute]
public class NPOI.OpenXmlFormats.Spreadsheet.CT_Members : object {
    private List`1<CT_Member> memberField;
    private UInt32 countField;
    private bool countFieldSpecified;
    private UInt32 levelField;
    private bool levelFieldSpecified;
    [XmlElementAttribute("member")]
public List`1<CT_Member> member { get; public set; }
    [XmlAttributeAttribute]
public UInt32 count { get; public set; }
    [XmlIgnoreAttribute]
public bool countSpecified { get; public set; }
    [XmlAttributeAttribute]
public UInt32 level { get; public set; }
    [XmlIgnoreAttribute]
public bool levelSpecified { get; public set; }
    public static CT_Members Parse(XmlNode node, XmlNamespaceManager namespaceManager);
    internal void Write(StreamWriter sw, string nodeName);
    public List`1<CT_Member> get_member();
    public void set_member(List`1<CT_Member> value);
    public UInt32 get_count();
    public void set_count(UInt32 value);
    public bool get_countSpecified();
    public void set_countSpecified(bool value);
    public UInt32 get_level();
    public void set_level(UInt32 value);
    public bool get_levelSpecified();
    public void set_levelSpecified(bool value);
}
[XmlTypeAttribute]
public class NPOI.OpenXmlFormats.Spreadsheet.CT_MergeCell : object {
    private string refField;
    [XmlAttributeAttribute]
public string ref { get; public set; }
    public static CT_MergeCell Parse(XmlNode node, XmlNamespaceManager namespaceManager);
    internal void Write(StreamWriter sw, string nodeName);
    public string get_ref();
    public void set_ref(string value);
}
[XmlTypeAttribute]
public class NPOI.OpenXmlFormats.Spreadsheet.CT_MergeCells : object {
    private List`1<CT_MergeCell> mergeCellField;
    private UInt32 countField;
    private bool countFieldSpecified;
    [XmlElementAttribute]
public List`1<CT_MergeCell> mergeCell { get; public set; }
    [XmlAttributeAttribute]
public UInt32 count { get; public set; }
    [XmlIgnoreAttribute]
public bool countSpecified { get; public set; }
    public static CT_MergeCells Parse(XmlNode node, XmlNamespaceManager namespaceManager);
    internal void Write(StreamWriter sw, string nodeName);
    public CT_MergeCell GetMergeCellArray(int index);
    public void SetMergeCellArray(CT_MergeCell[] array);
    public int sizeOfMergeCellArray();
    public CT_MergeCell AddNewMergeCell();
    public List`1<CT_MergeCell> get_mergeCell();
    public void set_mergeCell(List`1<CT_MergeCell> value);
    public UInt32 get_count();
    public void set_count(UInt32 value);
    public bool get_countSpecified();
    public void set_countSpecified(bool value);
}
[DebuggerStepThroughAttribute]
[DesignerCategoryAttribute("code")]
[XmlTypeAttribute]
[XmlRootAttribute]
public class NPOI.OpenXmlFormats.Spreadsheet.CT_Metadata : object {
    private CT_MetadataTypes metadataTypesField;
    private CT_MetadataStrings metadataStringsField;
    private CT_MdxMetadata mdxMetadataField;
    private List`1<CT_FutureMetadata> futureMetadataField;
    private CT_MetadataBlocks cellMetadataField;
    private CT_MetadataBlocks valueMetadataField;
    private CT_ExtensionList extLstField;
    public CT_MetadataTypes metadataTypes { get; public set; }
    public CT_MetadataStrings metadataStrings { get; public set; }
    public CT_MdxMetadata mdxMetadata { get; public set; }
    public List`1<CT_FutureMetadata> futureMetadata { get; public set; }
    public CT_MetadataBlocks cellMetadata { get; public set; }
    public CT_MetadataBlocks valueMetadata { get; public set; }
    public CT_ExtensionList extLst { get; public set; }
    public CT_MetadataTypes get_metadataTypes();
    public void set_metadataTypes(CT_MetadataTypes value);
    public CT_MetadataStrings get_metadataStrings();
    public void set_metadataStrings(CT_MetadataStrings value);
    public CT_MdxMetadata get_mdxMetadata();
    public void set_mdxMetadata(CT_MdxMetadata value);
    public List`1<CT_FutureMetadata> get_futureMetadata();
    public void set_futureMetadata(List`1<CT_FutureMetadata> value);
    public CT_MetadataBlocks get_cellMetadata();
    public void set_cellMetadata(CT_MetadataBlocks value);
    public CT_MetadataBlocks get_valueMetadata();
    public void set_valueMetadata(CT_MetadataBlocks value);
    public CT_ExtensionList get_extLst();
    public void set_extLst(CT_ExtensionList value);
}
[DebuggerStepThroughAttribute]
[DesignerCategoryAttribute("code")]
[XmlTypeAttribute]
[XmlRootAttribute]
public class NPOI.OpenXmlFormats.Spreadsheet.CT_MetadataBlock : object {
    private List`1<CT_MetadataRecord> rcField;
    public List`1<CT_MetadataRecord> rc { get; public set; }
    public List`1<CT_MetadataRecord> get_rc();
    public void set_rc(List`1<CT_MetadataRecord> value);
}
[DebuggerStepThroughAttribute]
[DesignerCategoryAttribute("code")]
[XmlTypeAttribute]
[XmlRootAttribute]
public class NPOI.OpenXmlFormats.Spreadsheet.CT_MetadataBlocks : object {
    private List`1<CT_MetadataRecord> bkField;
    private UInt32 countField;
    [XmlArrayAttribute]
[XmlArrayItemAttribute("rc", "NPOI.OpenXmlFormats.Spreadsheet.CT_MetadataRecord")]
public List`1<CT_MetadataRecord> bk { get; public set; }
    [XmlAttributeAttribute]
[DefaultValueAttribute("System.UInt32", "0")]
public UInt32 count { get; public set; }
    public List`1<CT_MetadataRecord> get_bk();
    public void set_bk(List`1<CT_MetadataRecord> value);
    public UInt32 get_count();
    public void set_count(UInt32 value);
}
[DebuggerStepThroughAttribute]
[DesignerCategoryAttribute("code")]
[XmlTypeAttribute]
[XmlRootAttribute]
public class NPOI.OpenXmlFormats.Spreadsheet.CT_MetadataRecord : object {
    private UInt32 tField;
    private UInt32 vField;
    [XmlAttributeAttribute]
public UInt32 t { get; public set; }
    [XmlAttributeAttribute]
public UInt32 v { get; public set; }
    public UInt32 get_t();
    public void set_t(UInt32 value);
    public UInt32 get_v();
    public void set_v(UInt32 value);
}
[DebuggerStepThroughAttribute]
[DesignerCategoryAttribute("code")]
[XmlTypeAttribute]
[XmlRootAttribute]
public class NPOI.OpenXmlFormats.Spreadsheet.CT_MetadataStringIndex : object {
    private UInt32 xField;
    private bool sField;
    public UInt32 x { get; public set; }
    [DefaultValueAttribute("False")]
public bool s { get; public set; }
    public UInt32 get_x();
    public void set_x(UInt32 value);
    public bool get_s();
    public void set_s(bool value);
}
[DebuggerStepThroughAttribute]
[DesignerCategoryAttribute("code")]
[XmlTypeAttribute]
[XmlRootAttribute]
public class NPOI.OpenXmlFormats.Spreadsheet.CT_MetadataStrings : object {
    private List`1<CT_XStringElement> sField;
    private UInt32 countField;
    public List`1<CT_XStringElement> s { get; public set; }
    [DefaultValueAttribute("System.UInt32", "0")]
public UInt32 count { get; public set; }
    public List`1<CT_XStringElement> get_s();
    public void set_s(List`1<CT_XStringElement> value);
    public UInt32 get_count();
    public void set_count(UInt32 value);
}
[DebuggerStepThroughAttribute]
[DesignerCategoryAttribute("code")]
[XmlTypeAttribute]
[XmlRootAttribute]
public class NPOI.OpenXmlFormats.Spreadsheet.CT_MetadataType : object {
    private string nameField;
    private UInt32 minSupportedVersionField;
    private bool ghostRowField;
    private bool ghostColField;
    private bool editField;
    private bool deleteField;
    private bool copyField;
    private bool pasteAllField;
    private bool pasteFormulasField;
    private bool pasteValuesField;
    private bool pasteFormatsField;
    private bool pasteCommentsField;
    private bool pasteDataValidationField;
    private bool pasteBordersField;
    private bool pasteColWidthsField;
    private bool pasteNumberFormatsField;
    private bool mergeField;
    private bool splitFirstField;
    private bool splitAllField;
    private bool rowColShiftField;
    private bool clearAllField;
    private bool clearFormatsField;
    private bool clearContentsField;
    private bool clearCommentsField;
    private bool assignField;
    private bool coerceField;
    private bool adjustField;
    private bool cellMetaField;
    public string name { get; public set; }
    public UInt32 minSupportedVersion { get; public set; }
    [DefaultValueAttribute("False")]
public bool ghostRow { get; public set; }
    [DefaultValueAttribute("False")]
public bool ghostCol { get; public set; }
    [DefaultValueAttribute("False")]
public bool edit { get; public set; }
    [DefaultValueAttribute("False")]
public bool delete { get; public set; }
    [DefaultValueAttribute("False")]
public bool copy { get; public set; }
    [DefaultValueAttribute("False")]
public bool pasteAll { get; public set; }
    [DefaultValueAttribute("False")]
public bool pasteFormulas { get; public set; }
    [DefaultValueAttribute("False")]
public bool pasteValues { get; public set; }
    [DefaultValueAttribute("False")]
public bool pasteFormats { get; public set; }
    [DefaultValueAttribute("False")]
public bool pasteComments { get; public set; }
    [DefaultValueAttribute("False")]
public bool pasteDataValidation { get; public set; }
    [DefaultValueAttribute("False")]
public bool pasteBorders { get; public set; }
    [DefaultValueAttribute("False")]
public bool pasteColWidths { get; public set; }
    [DefaultValueAttribute("False")]
public bool pasteNumberFormats { get; public set; }
    [DefaultValueAttribute("False")]
public bool merge { get; public set; }
    [DefaultValueAttribute("False")]
public bool splitFirst { get; public set; }
    [DefaultValueAttribute("False")]
public bool splitAll { get; public set; }
    [DefaultValueAttribute("False")]
public bool rowColShift { get; public set; }
    [DefaultValueAttribute("False")]
public bool clearAll { get; public set; }
    [DefaultValueAttribute("False")]
public bool clearFormats { get; public set; }
    [DefaultValueAttribute("False")]
public bool clearContents { get; public set; }
    [DefaultValueAttribute("False")]
public bool clearComments { get; public set; }
    [DefaultValueAttribute("False")]
public bool assign { get; public set; }
    [DefaultValueAttribute("False")]
public bool coerce { get; public set; }
    [DefaultValueAttribute("False")]
public bool adjust { get; public set; }
    [DefaultValueAttribute("False")]
public bool cellMeta { get; public set; }
    public string get_name();
    public void set_name(string value);
    public UInt32 get_minSupportedVersion();
    public void set_minSupportedVersion(UInt32 value);
    public bool get_ghostRow();
    public void set_ghostRow(bool value);
    public bool get_ghostCol();
    public void set_ghostCol(bool value);
    public bool get_edit();
    public void set_edit(bool value);
    public bool get_delete();
    public void set_delete(bool value);
    public bool get_copy();
    public void set_copy(bool value);
    public bool get_pasteAll();
    public void set_pasteAll(bool value);
    public bool get_pasteFormulas();
    public void set_pasteFormulas(bool value);
    public bool get_pasteValues();
    public void set_pasteValues(bool value);
    public bool get_pasteFormats();
    public void set_pasteFormats(bool value);
    public bool get_pasteComments();
    public void set_pasteComments(bool value);
    public bool get_pasteDataValidation();
    public void set_pasteDataValidation(bool value);
    public bool get_pasteBorders();
    public void set_pasteBorders(bool value);
    public bool get_pasteColWidths();
    public void set_pasteColWidths(bool value);
    public bool get_pasteNumberFormats();
    public void set_pasteNumberFormats(bool value);
    public bool get_merge();
    public void set_merge(bool value);
    public bool get_splitFirst();
    public void set_splitFirst(bool value);
    public bool get_splitAll();
    public void set_splitAll(bool value);
    public bool get_rowColShift();
    public void set_rowColShift(bool value);
    public bool get_clearAll();
    public void set_clearAll(bool value);
    public bool get_clearFormats();
    public void set_clearFormats(bool value);
    public bool get_clearContents();
    public void set_clearContents(bool value);
    public bool get_clearComments();
    public void set_clearComments(bool value);
    public bool get_assign();
    public void set_assign(bool value);
    public bool get_coerce();
    public void set_coerce(bool value);
    public bool get_adjust();
    public void set_adjust(bool value);
    public bool get_cellMeta();
    public void set_cellMeta(bool value);
}
[DebuggerStepThroughAttribute]
[DesignerCategoryAttribute("code")]
[XmlTypeAttribute]
[XmlRootAttribute]
public class NPOI.OpenXmlFormats.Spreadsheet.CT_MetadataTypes : object {
    private List`1<CT_MetadataType> metadataTypeField;
    private UInt32 countField;
    [XmlElementAttribute("metadataType")]
public List`1<CT_MetadataType> metadataType { get; public set; }
    [XmlAttributeAttribute]
[DefaultValueAttribute("System.UInt32", "0")]
public UInt32 count { get; public set; }
    public List`1<CT_MetadataType> get_metadataType();
    public void set_metadataType(List`1<CT_MetadataType> value);
    public UInt32 get_count();
    public void set_count(UInt32 value);
}
[XmlTypeAttribute]
[XmlRootAttribute]
public class NPOI.OpenXmlFormats.Spreadsheet.CT_Missing : object {
    private List`1<CT_Tuples> tplsField;
    private List`1<CT_X> xField;
    private bool uField;
    private bool uFieldSpecified;
    private bool fField;
    private bool fFieldSpecified;
    private string cField;
    private UInt32 cpField;
    private bool cpFieldSpecified;
    private UInt32 inField;
    private bool inFieldSpecified;
    private Byte[] bcField;
    private Byte[] fcField;
    private bool iField;
    private bool unField;
    private bool stField;
    private bool bField;
    [XmlElementAttribute("tpls")]
public List`1<CT_Tuples> tpls { get; public set; }
    [XmlElementAttribute("x")]
public List`1<CT_X> x { get; public set; }
    [XmlAttributeAttribute]
public bool u { get; public set; }
    [XmlIgnoreAttribute]
public bool uSpecified { get; public set; }
    [XmlAttributeAttribute]
public bool f { get; public set; }
    [XmlIgnoreAttribute]
public bool fSpecified { get; public set; }
    [XmlAttributeAttribute]
public string c { get; public set; }
    [XmlAttributeAttribute]
public UInt32 cp { get; public set; }
    [XmlIgnoreAttribute]
public bool cpSpecified { get; public set; }
    [XmlAttributeAttribute]
public UInt32 in { get; public set; }
    [XmlIgnoreAttribute]
public bool inSpecified { get; public set; }
    [XmlAttributeAttribute]
public Byte[] bc { get; public set; }
    [XmlAttributeAttribute]
public Byte[] fc { get; public set; }
    [XmlAttributeAttribute]
[DefaultValueAttribute("False")]
public bool i { get; public set; }
    [XmlAttributeAttribute]
[DefaultValueAttribute("False")]
public bool un { get; public set; }
    [XmlAttributeAttribute]
[DefaultValueAttribute("False")]
public bool st { get; public set; }
    [XmlAttributeAttribute]
[DefaultValueAttribute("False")]
public bool b { get; public set; }
    public List`1<CT_Tuples> get_tpls();
    public void set_tpls(List`1<CT_Tuples> value);
    public List`1<CT_X> get_x();
    public void set_x(List`1<CT_X> value);
    public bool get_u();
    public void set_u(bool value);
    public bool get_uSpecified();
    public void set_uSpecified(bool value);
    public bool get_f();
    public void set_f(bool value);
    public bool get_fSpecified();
    public void set_fSpecified(bool value);
    public string get_c();
    public void set_c(string value);
    public UInt32 get_cp();
    public void set_cp(UInt32 value);
    public bool get_cpSpecified();
    public void set_cpSpecified(bool value);
    public UInt32 get_in();
    public void set_in(UInt32 value);
    public bool get_inSpecified();
    public void set_inSpecified(bool value);
    public Byte[] get_bc();
    public void set_bc(Byte[] value);
    public Byte[] get_fc();
    public void set_fc(Byte[] value);
    public bool get_i();
    public void set_i(bool value);
    public bool get_un();
    public void set_un(bool value);
    public bool get_st();
    public void set_st(bool value);
    public bool get_b();
    public void set_b(bool value);
    public static CT_Missing Parse(XmlNode node, XmlNamespaceManager namespaceManager);
    internal void Write(StreamWriter sw, string nodeName);
}
[XmlTypeAttribute]
[XmlRootAttribute]
public class NPOI.OpenXmlFormats.Spreadsheet.CT_Number : object {
    private List`1<CT_Tuples> tplsField;
    private List`1<CT_X> xField;
    private double vField;
    private bool uField;
    private bool uFieldSpecified;
    private bool fField;
    private bool fFieldSpecified;
    private string cField;
    private UInt32 cpField;
    private bool cpFieldSpecified;
    private UInt32 inField;
    private bool inFieldSpecified;
    private Byte[] bcField;
    private Byte[] fcField;
    private bool iField;
    private bool unField;
    private bool stField;
    private bool bField;
    [XmlElementAttribute("tpls")]
public List`1<CT_Tuples> tpls { get; public set; }
    [XmlElementAttribute("x")]
public List`1<CT_X> x { get; public set; }
    [XmlAttributeAttribute]
public double v { get; public set; }
    [XmlAttributeAttribute]
public bool u { get; public set; }
    [XmlIgnoreAttribute]
public bool uSpecified { get; public set; }
    [XmlAttributeAttribute]
public bool f { get; public set; }
    [XmlIgnoreAttribute]
public bool fSpecified { get; public set; }
    [XmlAttributeAttribute]
public string c { get; public set; }
    [XmlAttributeAttribute]
public UInt32 cp { get; public set; }
    [XmlIgnoreAttribute]
public bool cpSpecified { get; public set; }
    [XmlAttributeAttribute]
public UInt32 in { get; public set; }
    [XmlIgnoreAttribute]
public bool inSpecified { get; public set; }
    [XmlAttributeAttribute]
public Byte[] bc { get; public set; }
    [XmlAttributeAttribute]
public Byte[] fc { get; public set; }
    [XmlAttributeAttribute]
[DefaultValueAttribute("False")]
public bool i { get; public set; }
    [XmlAttributeAttribute]
[DefaultValueAttribute("False")]
public bool un { get; public set; }
    [XmlAttributeAttribute]
[DefaultValueAttribute("False")]
public bool st { get; public set; }
    [XmlAttributeAttribute]
[DefaultValueAttribute("False")]
public bool b { get; public set; }
    public List`1<CT_Tuples> get_tpls();
    public void set_tpls(List`1<CT_Tuples> value);
    public List`1<CT_X> get_x();
    public void set_x(List`1<CT_X> value);
    public double get_v();
    public void set_v(double value);
    public bool get_u();
    public void set_u(bool value);
    public bool get_uSpecified();
    public void set_uSpecified(bool value);
    public bool get_f();
    public void set_f(bool value);
    public bool get_fSpecified();
    public void set_fSpecified(bool value);
    public string get_c();
    public void set_c(string value);
    public UInt32 get_cp();
    public void set_cp(UInt32 value);
    public bool get_cpSpecified();
    public void set_cpSpecified(bool value);
    public UInt32 get_in();
    public void set_in(UInt32 value);
    public bool get_inSpecified();
    public void set_inSpecified(bool value);
    public Byte[] get_bc();
    public void set_bc(Byte[] value);
    public Byte[] get_fc();
    public void set_fc(Byte[] value);
    public bool get_i();
    public void set_i(bool value);
    public bool get_un();
    public void set_un(bool value);
    public bool get_st();
    public void set_st(bool value);
    public bool get_b();
    public void set_b(bool value);
    public static CT_Number Parse(XmlNode node, XmlNamespaceManager namespaceManager);
    internal void Write(StreamWriter sw, string nodeName);
}
[XmlTypeAttribute]
public class NPOI.OpenXmlFormats.Spreadsheet.CT_NumFmt : object {
    private UInt32 numFmtIdField;
    private string formatCodeField;
    [XmlAttributeAttribute]
public UInt32 numFmtId { get; public set; }
    [XmlAttributeAttribute]
public string formatCode { get; public set; }
    public static CT_NumFmt Parse(XmlNode node, XmlNamespaceManager namespaceManager);
    internal void Write(StreamWriter sw, string nodeName);
    public UInt32 get_numFmtId();
    public void set_numFmtId(UInt32 value);
    public string get_formatCode();
    public void set_formatCode(string value);
}
[XmlTypeAttribute]
public class NPOI.OpenXmlFormats.Spreadsheet.CT_NumFmts : object {
    private List`1<CT_NumFmt> numFmtField;
    private UInt32 countField;
    private bool countFieldSpecified;
    [XmlElementAttribute]
public List`1<CT_NumFmt> numFmt { get; public set; }
    [XmlAttributeAttribute]
public UInt32 count { get; public set; }
    [XmlIgnoreAttribute]
public bool countSpecified { get; public set; }
    public static CT_NumFmts Parse(XmlNode node, XmlNamespaceManager namespaceManager);
    internal void Write(StreamWriter sw, string nodeName);
    public CT_NumFmt AddNewNumFmt();
    public List`1<CT_NumFmt> get_numFmt();
    public void set_numFmt(List`1<CT_NumFmt> value);
    public UInt32 get_count();
    public void set_count(UInt32 value);
    public bool get_countSpecified();
    public void set_countSpecified(bool value);
}
[DesignerCategoryAttribute("code")]
[XmlTypeAttribute]
[XmlRootAttribute]
public class NPOI.OpenXmlFormats.Spreadsheet.CT_OleItem : object {
    private string nameField;
    private bool iconField;
    private bool adviseField;
    private bool preferPicField;
    [XmlAttributeAttribute]
public string name { get; public set; }
    [XmlAttributeAttribute]
[DefaultValueAttribute("False")]
public bool icon { get; public set; }
    [XmlAttributeAttribute]
[DefaultValueAttribute("False")]
public bool advise { get; public set; }
    [XmlAttributeAttribute]
[DefaultValueAttribute("False")]
public bool preferPic { get; public set; }
    public string get_name();
    public void set_name(string value);
    public bool get_icon();
    public void set_icon(bool value);
    public bool get_advise();
    public void set_advise(bool value);
    public bool get_preferPic();
    public void set_preferPic(bool value);
    internal static CT_OleItem Parse(XmlNode node);
    internal void Write(StreamWriter sw, string nodeName);
}
[DesignerCategoryAttribute("code")]
[XmlTypeAttribute]
[XmlRootAttribute]
public class NPOI.OpenXmlFormats.Spreadsheet.CT_OleItems : object {
    private CT_OleItem[] oleItemField;
    [XmlElementAttribute("oleItem")]
public CT_OleItem[] oleItem { get; public set; }
    public CT_OleItem[] get_oleItem();
    public void set_oleItem(CT_OleItem[] value);
}
[DesignerCategoryAttribute("code")]
[XmlTypeAttribute]
[XmlRootAttribute]
public class NPOI.OpenXmlFormats.Spreadsheet.CT_OleLink : object {
    private List`1<CT_OleItem> oleItemsField;
    private string idField;
    private string progIdField;
    public List`1<CT_OleItem> oleItems { get; public set; }
    public string id { get; public set; }
    [XmlAttributeAttribute]
public string progId { get; public set; }
    public List`1<CT_OleItem> get_oleItems();
    public void set_oleItems(List`1<CT_OleItem> value);
    public string get_id();
    public void set_id(string value);
    public string get_progId();
    public void set_progId(string value);
    internal static CT_OleLink Parse(XmlNode node, XmlNamespaceManager namespaceManager);
    internal void Write(StreamWriter sw, string nodeName);
}
[XmlTypeAttribute]
public class NPOI.OpenXmlFormats.Spreadsheet.CT_OleObject : object {
    private string progIdField;
    private ST_DvAspect dvAspectField;
    private string linkField;
    private ST_OleUpdate oleUpdateField;
    private bool oleUpdateFieldSpecified;
    private bool autoLoadField;
    private UInt32 shapeIdField;
    private string idField;
    public string progId { get; public set; }
    [DefaultValueAttribute("Mono.Cecil.CustomAttributeArgument")]
public ST_DvAspect dvAspect { get; public set; }
    public string link { get; public set; }
    public ST_OleUpdate oleUpdate { get; public set; }
    [XmlIgnoreAttribute]
public bool oleUpdateSpecified { get; public set; }
    [DefaultValueAttribute("False")]
public bool autoLoad { get; public set; }
    public UInt32 shapeId { get; public set; }
    [XmlAttributeAttribute]
public string id { get; public set; }
    public string get_progId();
    public void set_progId(string value);
    public ST_DvAspect get_dvAspect();
    public void set_dvAspect(ST_DvAspect value);
    public string get_link();
    public void set_link(string value);
    public ST_OleUpdate get_oleUpdate();
    public void set_oleUpdate(ST_OleUpdate value);
    public bool get_oleUpdateSpecified();
    public void set_oleUpdateSpecified(bool value);
    public bool get_autoLoad();
    public void set_autoLoad(bool value);
    public UInt32 get_shapeId();
    public void set_shapeId(UInt32 value);
    public string get_id();
    public void set_id(string value);
    public static CT_OleObject Parse(XmlNode node, XmlNamespaceManager namespaceManager);
    internal void Write(StreamWriter sw, string nodeName);
}
[XmlTypeAttribute]
public class NPOI.OpenXmlFormats.Spreadsheet.CT_OleObjects : object {
    private List`1<CT_OleObject> oleObjectField;
    public List`1<CT_OleObject> oleObject { get; public set; }
    public static CT_OleObjects Parse(XmlNode node, XmlNamespaceManager namespaceManager);
    internal void Write(StreamWriter sw, string nodeName);
    public List`1<CT_OleObject> get_oleObject();
    public void set_oleObject(List`1<CT_OleObject> value);
}
[XmlTypeAttribute]
public class NPOI.OpenXmlFormats.Spreadsheet.CT_OleSize : object {
    private string refField;
    [XmlAttributeAttribute]
public string ref { get; public set; }
    public static CT_OleSize Parse(XmlNode node, XmlNamespaceManager namespaceManager);
    internal void Write(StreamWriter sw, string nodeName);
    public string get_ref();
    public void set_ref(string value);
}
[XmlTypeAttribute]
public class NPOI.OpenXmlFormats.Spreadsheet.CT_OutlinePr : object {
    private bool applyStylesField;
    private bool summaryBelowField;
    private bool summaryRightField;
    private bool showOutlineSymbolsField;
    [DefaultValueAttribute("False")]
public bool applyStyles { get; public set; }
    [DefaultValueAttribute("True")]
public bool summaryBelow { get; public set; }
    [DefaultValueAttribute("True")]
public bool summaryRight { get; public set; }
    [DefaultValueAttribute("True")]
public bool showOutlineSymbols { get; public set; }
    public static CT_OutlinePr Parse(XmlNode node, XmlNamespaceManager namespaceManager);
    internal void Write(StreamWriter sw, string nodeName);
    public CT_OutlinePr Clone();
    public bool get_applyStyles();
    public void set_applyStyles(bool value);
    public bool get_summaryBelow();
    public void set_summaryBelow(bool value);
    public bool get_summaryRight();
    public void set_summaryRight(bool value);
    public bool get_showOutlineSymbols();
    public void set_showOutlineSymbols(bool value);
}
[XmlTypeAttribute]
public class NPOI.OpenXmlFormats.Spreadsheet.CT_PageBreak : object {
    private List`1<CT_Break> brkField;
    private UInt32 countField;
    private UInt32 manualBreakCountField;
    public List`1<CT_Break> brk { get; public set; }
    [DefaultValueAttribute("System.UInt32", "0")]
public UInt32 count { get; public set; }
    [DefaultValueAttribute("System.UInt32", "0")]
public UInt32 manualBreakCount { get; public set; }
    public int sizeOfBrkArray();
    public CT_Break AddNewBrk();
    public void RemoveBrk(int index);
    public List`1<CT_Break> get_brk();
    public void set_brk(List`1<CT_Break> value);
    public UInt32 get_count();
    public void set_count(UInt32 value);
    public UInt32 get_manualBreakCount();
    public void set_manualBreakCount(UInt32 value);
    public static CT_PageBreak Parse(XmlNode node, XmlNamespaceManager namespaceManager);
    internal void Write(StreamWriter sw, string nodeName);
}
[XmlTypeAttribute]
[XmlRootAttribute]
public class NPOI.OpenXmlFormats.Spreadsheet.CT_PageField : object {
    private CT_ExtensionList extLstField;
    private int fldField;
    private UInt32 itemField;
    private bool itemFieldSpecified;
    private int hierField;
    private bool hierFieldSpecified;
    private string nameField;
    private string capField;
    [XmlElementAttribute]
public CT_ExtensionList extLst { get; public set; }
    [XmlAttributeAttribute]
public int fld { get; public set; }
    [XmlAttributeAttribute]
public UInt32 item { get; public set; }
    [XmlIgnoreAttribute]
public bool itemSpecified { get; public set; }
    [XmlAttributeAttribute]
public int hier { get; public set; }
    [XmlIgnoreAttribute]
public bool hierSpecified { get; public set; }
    [XmlAttributeAttribute]
public string name { get; public set; }
    [XmlAttributeAttribute]
public string cap { get; public set; }
    public static CT_PageField Parse(XmlNode node, XmlNamespaceManager namespaceManager);
    internal void Write(StreamWriter sw, string nodeName);
    public CT_ExtensionList get_extLst();
    public void set_extLst(CT_ExtensionList value);
    public int get_fld();
    public void set_fld(int value);
    public UInt32 get_item();
    public void set_item(UInt32 value);
    public bool get_itemSpecified();
    public void set_itemSpecified(bool value);
    public int get_hier();
    public void set_hier(int value);
    public bool get_hierSpecified();
    public void set_hierSpecified(bool value);
    public string get_name();
    public void set_name(string value);
    public string get_cap();
    public void set_cap(string value);
}
[XmlTypeAttribute]
[XmlRootAttribute]
public class NPOI.OpenXmlFormats.Spreadsheet.CT_PageFields : object {
    private List`1<CT_PageField> pageFieldField;
    private UInt32 countField;
    private bool countFieldSpecified;
    [XmlElementAttribute("pageField")]
public List`1<CT_PageField> pageField { get; public set; }
    [XmlAttributeAttribute]
public UInt32 count { get; public set; }
    [XmlIgnoreAttribute]
public bool countSpecified { get; public set; }
    public static CT_PageFields Parse(XmlNode node, XmlNamespaceManager namespaceManager);
    internal void Write(StreamWriter sw, string nodeName);
    public List`1<CT_PageField> get_pageField();
    public void set_pageField(List`1<CT_PageField> value);
    public UInt32 get_count();
    public void set_count(UInt32 value);
    public bool get_countSpecified();
    public void set_countSpecified(bool value);
    public CT_PageField AddNewPageField();
    public UInt32 SizeOfPageFieldArray();
}
[XmlTypeAttribute]
[XmlRootAttribute]
public class NPOI.OpenXmlFormats.Spreadsheet.CT_PageItem : object {
    private string nameField;
    [XmlAttributeAttribute]
public string name { get; public set; }
    public static CT_PageItem Parse(XmlNode node, XmlNamespaceManager namespaceManager);
    internal void Write(StreamWriter sw, string nodeName);
    public string get_name();
    public void set_name(string value);
}
[XmlTypeAttribute]
public class NPOI.OpenXmlFormats.Spreadsheet.CT_PageMargins : object {
    private double leftField;
    private double rightField;
    private double topField;
    private double bottomField;
    private double headerField;
    private double footerField;
    [XmlAttributeAttribute]
public double left { get; public set; }
    [XmlAttributeAttribute]
public double right { get; public set; }
    [XmlAttributeAttribute]
public double top { get; public set; }
    [XmlAttributeAttribute]
public double bottom { get; public set; }
    [XmlAttributeAttribute]
public double header { get; public set; }
    [XmlAttributeAttribute]
public double footer { get; public set; }
    public double get_left();
    public void set_left(double value);
    public double get_right();
    public void set_right(double value);
    public double get_top();
    public void set_top(double value);
    public double get_bottom();
    public void set_bottom(double value);
    public double get_header();
    public void set_header(double value);
    public double get_footer();
    public void set_footer(double value);
    public static CT_PageMargins Parse(XmlNode node, XmlNamespaceManager namespaceManager);
    internal void Write(StreamWriter sw, string nodeName);
}
[XmlTypeAttribute]
[XmlRootAttribute]
public class NPOI.OpenXmlFormats.Spreadsheet.CT_Pages : object {
    private List`1<CT_PCDSCPage> pageField;
    private UInt32 countField;
    private bool countFieldSpecified;
    [XmlElementAttribute("page")]
public List`1<CT_PCDSCPage> page { get; public set; }
    [XmlAttributeAttribute]
public UInt32 count { get; public set; }
    [XmlIgnoreAttribute]
public bool countSpecified { get; public set; }
    public static CT_Pages Parse(XmlNode node, XmlNamespaceManager namespaceManager);
    internal void Write(StreamWriter sw, string nodeName);
    public List`1<CT_PCDSCPage> get_page();
    public void set_page(List`1<CT_PCDSCPage> value);
    public UInt32 get_count();
    public void set_count(UInt32 value);
    public bool get_countSpecified();
    public void set_countSpecified(bool value);
}
[XmlTypeAttribute]
public class NPOI.OpenXmlFormats.Spreadsheet.CT_PageSetup : object {
    private UInt32 paperSizeField;
    private UInt32 scaleField;
    private UInt32 firstPageNumberField;
    private UInt32 fitToWidthField;
    private UInt32 fitToHeightField;
    private ST_PageOrder pageOrderField;
    private ST_Orientation orientationField;
    private bool usePrinterDefaultsField;
    private bool blackAndWhiteField;
    private bool draftField;
    private ST_CellComments cellCommentsField;
    private bool useFirstPageNumberField;
    private ST_PrintError errorsField;
    private UInt32 horizontalDpiField;
    private UInt32 verticalDpiField;
    private UInt32 copiesField;
    private string idField;
    [XmlAttributeAttribute]
[DefaultValueAttribute("System.UInt32", "1")]
public UInt32 paperSize { get; public set; }
    [XmlAttributeAttribute]
[DefaultValueAttribute("System.UInt32", "100")]
public UInt32 scale { get; public set; }
    [XmlAttributeAttribute]
[DefaultValueAttribute("System.UInt32", "1")]
public UInt32 firstPageNumber { get; public set; }
    [XmlAttributeAttribute]
[DefaultValueAttribute("System.UInt32", "1")]
public UInt32 fitToWidth { get; public set; }
    [XmlAttributeAttribute]
[DefaultValueAttribute("System.UInt32", "1")]
public UInt32 fitToHeight { get; public set; }
    [XmlAttributeAttribute]
[DefaultValueAttribute("Mono.Cecil.CustomAttributeArgument")]
public ST_PageOrder pageOrder { get; public set; }
    [XmlAttributeAttribute]
[DefaultValueAttribute("Mono.Cecil.CustomAttributeArgument")]
public ST_Orientation orientation { get; public set; }
    [XmlAttributeAttribute]
[DefaultValueAttribute("True")]
public bool usePrinterDefaults { get; public set; }
    [XmlAttributeAttribute]
[DefaultValueAttribute("False")]
public bool blackAndWhite { get; public set; }
    [XmlAttributeAttribute]
[DefaultValueAttribute("False")]
public bool draft { get; public set; }
    [XmlAttributeAttribute]
[DefaultValueAttribute("Mono.Cecil.CustomAttributeArgument")]
public ST_CellComments cellComments { get; public set; }
    [XmlAttributeAttribute]
[DefaultValueAttribute("False")]
public bool useFirstPageNumber { get; public set; }
    [XmlAttributeAttribute]
[DefaultValueAttribute("Mono.Cecil.CustomAttributeArgument")]
public ST_PrintError errors { get; public set; }
    [XmlAttributeAttribute]
[DefaultValueAttribute("System.UInt32", "600")]
public UInt32 horizontalDpi { get; public set; }
    [XmlAttributeAttribute]
[DefaultValueAttribute("System.UInt32", "600")]
public UInt32 verticalDpi { get; public set; }
    [XmlAttributeAttribute]
[DefaultValueAttribute("System.UInt32", "1")]
public UInt32 copies { get; public set; }
    [XmlAttributeAttribute]
public string id { get; public set; }
    public UInt32 get_paperSize();
    public void set_paperSize(UInt32 value);
    public UInt32 get_scale();
    public void set_scale(UInt32 value);
    public UInt32 get_firstPageNumber();
    public void set_firstPageNumber(UInt32 value);
    public UInt32 get_fitToWidth();
    public void set_fitToWidth(UInt32 value);
    public UInt32 get_fitToHeight();
    public void set_fitToHeight(UInt32 value);
    public ST_PageOrder get_pageOrder();
    public void set_pageOrder(ST_PageOrder value);
    public ST_Orientation get_orientation();
    public void set_orientation(ST_Orientation value);
    public bool get_usePrinterDefaults();
    public void set_usePrinterDefaults(bool value);
    public bool get_blackAndWhite();
    public void set_blackAndWhite(bool value);
    public bool get_draft();
    public void set_draft(bool value);
    public ST_CellComments get_cellComments();
    public void set_cellComments(ST_CellComments value);
    public bool get_useFirstPageNumber();
    public void set_useFirstPageNumber(bool value);
    public ST_PrintError get_errors();
    public void set_errors(ST_PrintError value);
    public UInt32 get_horizontalDpi();
    public void set_horizontalDpi(UInt32 value);
    public UInt32 get_verticalDpi();
    public void set_verticalDpi(UInt32 value);
    public UInt32 get_copies();
    public void set_copies(UInt32 value);
    public string get_id();
    public void set_id(string value);
    public static CT_PageSetup Parse(XmlNode node, XmlNamespaceManager namespaceManager);
    internal void Write(StreamWriter sw, string nodeName);
}
[XmlTypeAttribute]
public class NPOI.OpenXmlFormats.Spreadsheet.CT_PageSetUpPr : object {
    private bool autoPageBreaksField;
    private bool fitToPageField;
    [DefaultValueAttribute("True")]
public bool autoPageBreaks { get; public set; }
    [DefaultValueAttribute("False")]
public bool fitToPage { get; public set; }
    public static CT_PageSetUpPr Parse(XmlNode node, XmlNamespaceManager namespaceManager);
    internal void Write(StreamWriter sw, string nodeName);
    public CT_PageSetUpPr Clone();
    public bool get_autoPageBreaks();
    public void set_autoPageBreaks(bool value);
    public bool get_fitToPage();
    public void set_fitToPage(bool value);
}
[XmlTypeAttribute]
public class NPOI.OpenXmlFormats.Spreadsheet.CT_Pane : object {
    private double xSplitField;
    private double ySplitField;
    private string topLeftCellField;
    private ST_Pane activePaneField;
    private ST_PaneState stateField;
    [XmlAttributeAttribute]
[DefaultValueAttribute("0")]
public double xSplit { get; public set; }
    [XmlAttributeAttribute]
[DefaultValueAttribute("0")]
public double ySplit { get; public set; }
    [XmlAttributeAttribute]
public string topLeftCell { get; public set; }
    [XmlAttributeAttribute]
[DefaultValueAttribute("Mono.Cecil.CustomAttributeArgument")]
public ST_Pane activePane { get; public set; }
    [XmlAttributeAttribute]
[DefaultValueAttribute("Mono.Cecil.CustomAttributeArgument")]
public ST_PaneState state { get; public set; }
    public static CT_Pane Parse(XmlNode node, XmlNamespaceManager namespaceManager);
    internal void Write(StreamWriter sw, string nodeName);
    public bool IsSetTopLeftCell();
    public void UnsetTopLeftCell();
    public void UnsetYSplit();
    public void UnsetXSplit();
    public bool IsSetXSplit();
    public bool IsSetYSplit();
    public double get_xSplit();
    public void set_xSplit(double value);
    public double get_ySplit();
    public void set_ySplit(double value);
    public string get_topLeftCell();
    public void set_topLeftCell(string value);
    public ST_Pane get_activePane();
    public void set_activePane(ST_Pane value);
    public ST_PaneState get_state();
    public void set_state(ST_PaneState value);
}
[XmlTypeAttribute]
public class NPOI.OpenXmlFormats.Spreadsheet.CT_PatternFill : object {
    private CT_Color fgColorField;
    private CT_Color bgColorField;
    private Nullable`1<ST_PatternType> patternTypeField;
    [XmlElementAttribute]
public CT_Color fgColor { get; public set; }
    [XmlElementAttribute]
public CT_Color bgColor { get; public set; }
    [XmlAttributeAttribute]
public Nullable`1<ST_PatternType> patternType { get; public set; }
    public bool IsSetPatternType();
    public CT_Color AddNewFgColor();
    public CT_Color AddNewBgColor();
    public void UnsetPatternType();
    public void UnsetFgColor();
    public void UnsetBgColor();
    public static CT_PatternFill Parse(XmlNode node, XmlNamespaceManager namespaceManager);
    internal void Write(StreamWriter sw, string nodeName);
    public CT_Color get_fgColor();
    public void set_fgColor(CT_Color value);
    public bool IsSetBgColor();
    public bool IsSetFgColor();
    public CT_Color get_bgColor();
    public void set_bgColor(CT_Color value);
    public Nullable`1<ST_PatternType> get_patternType();
    public void set_patternType(Nullable`1<ST_PatternType> value);
}
[XmlTypeAttribute]
[XmlRootAttribute]
public class NPOI.OpenXmlFormats.Spreadsheet.CT_PCDKPI : object {
    private string uniqueNameField;
    private string captionField;
    private string displayFolderField;
    private string measureGroupField;
    private string parentField;
    private string valueField;
    private string goalField;
    private string statusField;
    private string trendField;
    private string weightField;
    private string timeField;
    [XmlAttributeAttribute]
public string uniqueName { get; public set; }
    [XmlAttributeAttribute]
public string caption { get; public set; }
    [XmlAttributeAttribute]
public string displayFolder { get; public set; }
    [XmlAttributeAttribute]
public string measureGroup { get; public set; }
    [XmlAttributeAttribute]
public string parent { get; public set; }
    [XmlAttributeAttribute]
public string value { get; public set; }
    [XmlAttributeAttribute]
public string goal { get; public set; }
    [XmlAttributeAttribute]
public string status { get; public set; }
    [XmlAttributeAttribute]
public string trend { get; public set; }
    [XmlAttributeAttribute]
public string weight { get; public set; }
    [XmlAttributeAttribute]
public string time { get; public set; }
    public static CT_PCDKPI Parse(XmlNode node, XmlNamespaceManager namespaceManager);
    internal void Write(StreamWriter sw, string nodeName);
    public string get_uniqueName();
    public void set_uniqueName(string value);
    public string get_caption();
    public void set_caption(string value);
    public string get_displayFolder();
    public void set_displayFolder(string value);
    public string get_measureGroup();
    public void set_measureGroup(string value);
    public string get_parent();
    public void set_parent(string value);
    public string get_value();
    public void set_value(string value);
    public string get_goal();
    public void set_goal(string value);
    public string get_status();
    public void set_status(string value);
    public string get_trend();
    public void set_trend(string value);
    public string get_weight();
    public void set_weight(string value);
    public string get_time();
    public void set_time(string value);
}
[XmlTypeAttribute]
[XmlRootAttribute]
public class NPOI.OpenXmlFormats.Spreadsheet.CT_PCDKPIs : object {
    private List`1<CT_PCDKPI> kpiField;
    private UInt32 countField;
    private bool countFieldSpecified;
    [XmlElementAttribute("kpi")]
public List`1<CT_PCDKPI> kpi { get; public set; }
    [XmlAttributeAttribute]
public UInt32 count { get; public set; }
    [XmlIgnoreAttribute]
public bool countSpecified { get; public set; }
    public static CT_PCDKPIs Parse(XmlNode node, XmlNamespaceManager namespaceManager);
    internal void Write(StreamWriter sw, string nodeName);
    public List`1<CT_PCDKPI> get_kpi();
    public void set_kpi(List`1<CT_PCDKPI> value);
    public UInt32 get_count();
    public void set_count(UInt32 value);
    public bool get_countSpecified();
    public void set_countSpecified(bool value);
}
[XmlTypeAttribute]
[XmlRootAttribute]
public class NPOI.OpenXmlFormats.Spreadsheet.CT_PCDSCPage : object {
    private List`1<CT_PageItem> pageItemField;
    private UInt32 countField;
    private bool countFieldSpecified;
    [XmlElementAttribute("pageItem")]
public List`1<CT_PageItem> pageItem { get; public set; }
    [XmlAttributeAttribute]
public UInt32 count { get; public set; }
    [XmlIgnoreAttribute]
public bool countSpecified { get; public set; }
    public static CT_PCDSCPage Parse(XmlNode node, XmlNamespaceManager namespaceManager);
    internal void Write(StreamWriter sw, string nodeName);
    public List`1<CT_PageItem> get_pageItem();
    public void set_pageItem(List`1<CT_PageItem> value);
    public UInt32 get_count();
    public void set_count(UInt32 value);
    public bool get_countSpecified();
    public void set_countSpecified(bool value);
}
[XmlTypeAttribute]
[XmlRootAttribute]
public class NPOI.OpenXmlFormats.Spreadsheet.CT_PCDSDTCEntries : object {
    private List`1<object> itemsField;
    private UInt32 countField;
    private bool countFieldSpecified;
    [XmlElementAttribute("e", "NPOI.OpenXmlFormats.Spreadsheet.CT_Error")]
[XmlElementAttribute("m", "NPOI.OpenXmlFormats.Spreadsheet.CT_Missing")]
[XmlElementAttribute("n", "NPOI.OpenXmlFormats.Spreadsheet.CT_Number")]
[XmlElementAttribute("s", "NPOI.OpenXmlFormats.Spreadsheet.CT_String")]
public List`1<object> Items { get; public set; }
    [XmlAttributeAttribute]
public UInt32 count { get; public set; }
    [XmlIgnoreAttribute]
public bool countSpecified { get; public set; }
    public static CT_PCDSDTCEntries Parse(XmlNode node, XmlNamespaceManager namespaceManager);
    internal void Write(StreamWriter sw, string nodeName);
    public List`1<object> get_Items();
    public void set_Items(List`1<object> value);
    public UInt32 get_count();
    public void set_count(UInt32 value);
    public bool get_countSpecified();
    public void set_countSpecified(bool value);
}
[XmlTypeAttribute]
[XmlRootAttribute]
public class NPOI.OpenXmlFormats.Spreadsheet.CT_PhoneticPr : object {
    private UInt32 fontIdField;
    private ST_PhoneticType typeField;
    private ST_PhoneticAlignment alignmentField;
    [XmlAttributeAttribute]
public UInt32 fontId { get; public set; }
    [XmlAttributeAttribute]
[DefaultValueAttribute("Mono.Cecil.CustomAttributeArgument")]
public ST_PhoneticType type { get; public set; }
    [XmlAttributeAttribute]
[DefaultValueAttribute("Mono.Cecil.CustomAttributeArgument")]
public ST_PhoneticAlignment alignment { get; public set; }
    public static CT_PhoneticPr Parse(XmlNode node, XmlNamespaceManager namespaceManager);
    internal void Write(StreamWriter sw, string nodeName);
    public UInt32 get_fontId();
    public void set_fontId(UInt32 value);
    public ST_PhoneticType get_type();
    public void set_type(ST_PhoneticType value);
    public ST_PhoneticAlignment get_alignment();
    public void set_alignment(ST_PhoneticAlignment value);
}
[XmlTypeAttribute]
[XmlRootAttribute]
public class NPOI.OpenXmlFormats.Spreadsheet.CT_PhoneticRun : object {
    private string tField;
    private UInt32 sbField;
    private UInt32 ebField;
    [XmlAttributeAttribute]
public string t { get; public set; }
    [XmlAttributeAttribute]
public UInt32 sb { get; public set; }
    [XmlAttributeAttribute]
public UInt32 eb { get; public set; }
    public string get_t();
    public void set_t(string value);
    public UInt32 get_sb();
    public void set_sb(UInt32 value);
    public UInt32 get_eb();
    public void set_eb(UInt32 value);
    public static CT_PhoneticRun Parse(XmlNode node, XmlNamespaceManager namespaceManager);
    internal void Write(StreamWriter sw, string nodeName);
}
[XmlTypeAttribute]
public class NPOI.OpenXmlFormats.Spreadsheet.CT_PivotArea : object {
    private CT_PivotAreaReferences referencesField;
    private CT_ExtensionList extLstField;
    private int fieldField;
    private bool fieldFieldSpecified;
    private ST_PivotAreaType typeField;
    private bool dataOnlyField;
    private bool labelOnlyField;
    private bool grandRowField;
    private bool grandColField;
    private bool cacheIndexField;
    private bool outlineField;
    private string offsetField;
    private bool collapsedLevelsAreSubtotalsField;
    private ST_Axis axisField;
    private bool axisFieldSpecified;
    private UInt32 fieldPositionField;
    private bool fieldPositionFieldSpecified;
    public CT_PivotAreaReferences references { get; public set; }
    public CT_ExtensionList extLst { get; public set; }
    [XmlAttributeAttribute]
public int field { get; public set; }
    [XmlIgnoreAttribute]
public bool fieldSpecified { get; public set; }
    [XmlAttributeAttribute]
[DefaultValueAttribute("Mono.Cecil.CustomAttributeArgument")]
public ST_PivotAreaType type { get; public set; }
    [XmlAttributeAttribute]
[DefaultValueAttribute("True")]
public bool dataOnly { get; public set; }
    [XmlAttributeAttribute]
[DefaultValueAttribute("False")]
public bool labelOnly { get; public set; }
    [XmlAttributeAttribute]
[DefaultValueAttribute("False")]
public bool grandRow { get; public set; }
    [XmlAttributeAttribute]
[DefaultValueAttribute("False")]
public bool grandCol { get; public set; }
    [XmlAttributeAttribute]
[DefaultValueAttribute("False")]
public bool cacheIndex { get; public set; }
    [XmlAttributeAttribute]
[DefaultValueAttribute("True")]
public bool outline { get; public set; }
    [XmlAttributeAttribute]
public string offset { get; public set; }
    [XmlAttributeAttribute]
[DefaultValueAttribute("False")]
public bool collapsedLevelsAreSubtotals { get; public set; }
    [XmlAttributeAttribute]
public ST_Axis axis { get; public set; }
    [XmlIgnoreAttribute]
public bool axisSpecified { get; public set; }
    [XmlAttributeAttribute]
public UInt32 fieldPosition { get; public set; }
    [XmlIgnoreAttribute]
public bool fieldPositionSpecified { get; public set; }
    public static CT_PivotArea Parse(XmlNode node, XmlNamespaceManager namespaceManager);
    internal void Write(StreamWriter sw, string nodeName);
    public CT_PivotAreaReferences get_references();
    public void set_references(CT_PivotAreaReferences value);
    public CT_ExtensionList get_extLst();
    public void set_extLst(CT_ExtensionList value);
    public int get_field();
    public void set_field(int value);
    public bool get_fieldSpecified();
    public void set_fieldSpecified(bool value);
    public ST_PivotAreaType get_type();
    public void set_type(ST_PivotAreaType value);
    public bool get_dataOnly();
    public void set_dataOnly(bool value);
    public bool get_labelOnly();
    public void set_labelOnly(bool value);
    public bool get_grandRow();
    public void set_grandRow(bool value);
    public bool get_grandCol();
    public void set_grandCol(bool value);
    public bool get_cacheIndex();
    public void set_cacheIndex(bool value);
    public bool get_outline();
    public void set_outline(bool value);
    public string get_offset();
    public void set_offset(string value);
    public bool get_collapsedLevelsAreSubtotals();
    public void set_collapsedLevelsAreSubtotals(bool value);
    public ST_Axis get_axis();
    public void set_axis(ST_Axis value);
    public bool get_axisSpecified();
    public void set_axisSpecified(bool value);
    public UInt32 get_fieldPosition();
    public void set_fieldPosition(UInt32 value);
    public bool get_fieldPositionSpecified();
    public void set_fieldPositionSpecified(bool value);
}
[XmlTypeAttribute]
public class NPOI.OpenXmlFormats.Spreadsheet.CT_PivotAreaReference : object {
    private List`1<CT_Index> xField;
    private CT_ExtensionList extLstField;
    private UInt32 fieldField;
    private bool fieldFieldSpecified;
    private UInt32 countField;
    private bool countFieldSpecified;
    private bool selectedField;
    private bool byPositionField;
    private bool relativeField;
    private bool defaultSubtotalField;
    private bool sumSubtotalField;
    private bool countASubtotalField;
    private bool avgSubtotalField;
    private bool maxSubtotalField;
    private bool minSubtotalField;
    private bool productSubtotalField;
    private bool countSubtotalField;
    private bool stdDevSubtotalField;
    private bool stdDevPSubtotalField;
    private bool varSubtotalField;
    private bool varPSubtotalField;
    [XmlAttributeAttribute]
public List`1<CT_Index> x { get; public set; }
    [XmlAttributeAttribute]
public CT_ExtensionList extLst { get; public set; }
    [XmlAttributeAttribute]
public UInt32 field { get; public set; }
    [XmlIgnoreAttribute]
public bool fieldSpecified { get; public set; }
    [XmlAttributeAttribute]
public UInt32 count { get; public set; }
    [XmlIgnoreAttribute]
public bool countSpecified { get; public set; }
    [XmlAttributeAttribute]
[DefaultValueAttribute("True")]
public bool selected { get; public set; }
    [XmlAttributeAttribute]
[DefaultValueAttribute("False")]
public bool byPosition { get; public set; }
    [XmlAttributeAttribute]
[DefaultValueAttribute("False")]
public bool relative { get; public set; }
    [XmlAttributeAttribute]
[DefaultValueAttribute("False")]
public bool defaultSubtotal { get; public set; }
    [XmlAttributeAttribute]
[DefaultValueAttribute("False")]
public bool sumSubtotal { get; public set; }
    [XmlAttributeAttribute]
[DefaultValueAttribute("False")]
public bool countASubtotal { get; public set; }
    [XmlAttributeAttribute]
[DefaultValueAttribute("False")]
public bool avgSubtotal { get; public set; }
    [XmlAttributeAttribute]
[DefaultValueAttribute("False")]
public bool maxSubtotal { get; public set; }
    [XmlAttributeAttribute]
[DefaultValueAttribute("False")]
public bool minSubtotal { get; public set; }
    [XmlAttributeAttribute]
[DefaultValueAttribute("False")]
public bool productSubtotal { get; public set; }
    [XmlAttributeAttribute]
[DefaultValueAttribute("False")]
public bool countSubtotal { get; public set; }
    [XmlAttributeAttribute]
[DefaultValueAttribute("False")]
public bool stdDevSubtotal { get; public set; }
    [XmlAttributeAttribute]
[DefaultValueAttribute("False")]
public bool stdDevPSubtotal { get; public set; }
    [XmlAttributeAttribute]
[DefaultValueAttribute("False")]
public bool varSubtotal { get; public set; }
    [XmlAttributeAttribute]
[DefaultValueAttribute("False")]
public bool varPSubtotal { get; public set; }
    public static CT_PivotAreaReference Parse(XmlNode node, XmlNamespaceManager namespaceManager);
    internal void Write(StreamWriter sw, string nodeName);
    public List`1<CT_Index> get_x();
    public void set_x(List`1<CT_Index> value);
    public CT_ExtensionList get_extLst();
    public void set_extLst(CT_ExtensionList value);
    public UInt32 get_field();
    public void set_field(UInt32 value);
    public bool get_fieldSpecified();
    public void set_fieldSpecified(bool value);
    public UInt32 get_count();
    public void set_count(UInt32 value);
    public bool get_countSpecified();
    public void set_countSpecified(bool value);
    public bool get_selected();
    public void set_selected(bool value);
    public bool get_byPosition();
    public void set_byPosition(bool value);
    public bool get_relative();
    public void set_relative(bool value);
    public bool get_defaultSubtotal();
    public void set_defaultSubtotal(bool value);
    public bool get_sumSubtotal();
    public void set_sumSubtotal(bool value);
    public bool get_countASubtotal();
    public void set_countASubtotal(bool value);
    public bool get_avgSubtotal();
    public void set_avgSubtotal(bool value);
    public bool get_maxSubtotal();
    public void set_maxSubtotal(bool value);
    public bool get_minSubtotal();
    public void set_minSubtotal(bool value);
    public bool get_productSubtotal();
    public void set_productSubtotal(bool value);
    public bool get_countSubtotal();
    public void set_countSubtotal(bool value);
    public bool get_stdDevSubtotal();
    public void set_stdDevSubtotal(bool value);
    public bool get_stdDevPSubtotal();
    public void set_stdDevPSubtotal(bool value);
    public bool get_varSubtotal();
    public void set_varSubtotal(bool value);
    public bool get_varPSubtotal();
    public void set_varPSubtotal(bool value);
}
[XmlTypeAttribute]
public class NPOI.OpenXmlFormats.Spreadsheet.CT_PivotAreaReferences : object {
    private List`1<CT_PivotAreaReference> referenceField;
    private UInt32 countField;
    private bool countFieldSpecified;
    public List`1<CT_PivotAreaReference> reference { get; public set; }
    [XmlAttributeAttribute]
public UInt32 count { get; public set; }
    [XmlIgnoreAttribute]
public bool countSpecified { get; public set; }
    public static CT_PivotAreaReferences Parse(XmlNode node, XmlNamespaceManager namespaceManager);
    internal void Write(StreamWriter sw, string nodeName);
    public List`1<CT_PivotAreaReference> get_reference();
    public void set_reference(List`1<CT_PivotAreaReference> value);
    public UInt32 get_count();
    public void set_count(UInt32 value);
    public bool get_countSpecified();
    public void set_countSpecified(bool value);
}
[XmlTypeAttribute]
[XmlRootAttribute]
public class NPOI.OpenXmlFormats.Spreadsheet.CT_PivotAreas : object {
    private List`1<CT_PivotArea> pivotAreaField;
    private UInt32 countField;
    private bool countFieldSpecified;
    [XmlElementAttribute("pivotArea")]
public List`1<CT_PivotArea> pivotArea { get; public set; }
    [XmlAttributeAttribute]
public UInt32 count { get; public set; }
    [XmlIgnoreAttribute]
public bool countSpecified { get; public set; }
    public static CT_PivotAreas Parse(XmlNode node, XmlNamespaceManager namespaceManager);
    internal void Write(StreamWriter sw, string nodeName);
    public List`1<CT_PivotArea> get_pivotArea();
    public void set_pivotArea(List`1<CT_PivotArea> value);
    public UInt32 get_count();
    public void set_count(UInt32 value);
    public bool get_countSpecified();
    public void set_countSpecified(bool value);
}
[XmlTypeAttribute]
public class NPOI.OpenXmlFormats.Spreadsheet.CT_PivotCache : object {
    private UInt32 cacheIdField;
    private string idField;
    [XmlAttributeAttribute]
public UInt32 cacheId { get; public set; }
    [XmlAttributeAttribute]
public string id { get; public set; }
    public static CT_PivotCache Parse(XmlNode node, XmlNamespaceManager namespaceManager);
    internal void Write(StreamWriter sw, string nodeName);
    public UInt32 get_cacheId();
    public void set_cacheId(UInt32 value);
    public string get_id();
    public void set_id(string value);
}
[XmlTypeAttribute]
[XmlRootAttribute("pivotCacheDefinition")]
public class NPOI.OpenXmlFormats.Spreadsheet.CT_PivotCacheDefinition : object {
    private CT_CacheSource cacheSourceField;
    private CT_CacheFields cacheFieldsField;
    private CT_CacheHierarchies cacheHierarchiesField;
    private CT_PCDKPIs kpisField;
    private CT_TupleCache tupleCacheField;
    private CT_CalculatedItems calculatedItemsField;
    private CT_CalculatedMembers calculatedMembersField;
    private CT_Dimensions dimensionsField;
    private CT_MeasureGroups measureGroupsField;
    private CT_MeasureDimensionMaps mapsField;
    private CT_ExtensionList extLstField;
    private string idField;
    private bool invalidField;
    private bool saveDataField;
    private bool refreshOnLoadField;
    private bool optimizeMemoryField;
    private bool enableRefreshField;
    private string refreshedByField;
    private double refreshedDateField;
    private bool refreshedDateFieldSpecified;
    private Nullable`1<DateTime> refreshedDateIsoField;
    private bool refreshedDateIsoFieldSpecified;
    private bool backgroundQueryField;
    private UInt32 missingItemsLimitField;
    private bool missingItemsLimitFieldSpecified;
    private byte createdVersionField;
    private byte refreshedVersionField;
    private byte minRefreshableVersionField;
    private UInt32 recordCountField;
    private bool recordCountFieldSpecified;
    private bool upgradeOnRefreshField;
    private bool tupleCache1Field;
    private bool supportSubqueryField;
    private bool supportAdvancedDrillField;
    [XmlElementAttribute]
public CT_CacheSource cacheSource { get; public set; }
    [XmlElementAttribute]
public CT_CacheFields cacheFields { get; public set; }
    [XmlElementAttribute]
public CT_CacheHierarchies cacheHierarchies { get; public set; }
    [XmlElementAttribute]
public CT_PCDKPIs kpis { get; public set; }
    [XmlElementAttribute]
public CT_TupleCache tupleCache { get; public set; }
    [XmlElementAttribute]
public CT_CalculatedItems calculatedItems { get; public set; }
    [XmlElementAttribute]
public CT_CalculatedMembers calculatedMembers { get; public set; }
    [XmlElementAttribute]
public CT_Dimensions dimensions { get; public set; }
    [XmlElementAttribute]
public CT_MeasureGroups measureGroups { get; public set; }
    [XmlElementAttribute]
public CT_MeasureDimensionMaps maps { get; public set; }
    [XmlElementAttribute]
public CT_ExtensionList extLst { get; public set; }
    [XmlAttributeAttribute]
public string id { get; public set; }
    [XmlAttributeAttribute]
[DefaultValueAttribute("False")]
public bool invalid { get; public set; }
    [XmlAttributeAttribute]
[DefaultValueAttribute("True")]
public bool saveData { get; public set; }
    [XmlAttributeAttribute]
[DefaultValueAttribute("False")]
public bool refreshOnLoad { get; public set; }
    [XmlAttributeAttribute]
[DefaultValueAttribute("False")]
public bool optimizeMemory { get; public set; }
    [XmlAttributeAttribute]
[DefaultValueAttribute("True")]
public bool enableRefresh { get; public set; }
    [XmlAttributeAttribute]
public string refreshedBy { get; public set; }
    [XmlAttributeAttribute]
public double refreshedDate { get; public set; }
    [XmlIgnoreAttribute]
public bool refreshedDateSpecified { get; public set; }
    [XmlAttributeAttribute]
public Nullable`1<DateTime> refreshedDateIso { get; public set; }
    [XmlIgnoreAttribute]
public bool refreshedDateIsoSpecified { get; public set; }
    [XmlAttributeAttribute]
[DefaultValueAttribute("False")]
public bool backgroundQuery { get; public set; }
    [XmlAttributeAttribute]
public UInt32 missingItemsLimit { get; public set; }
    [XmlIgnoreAttribute]
public bool missingItemsLimitSpecified { get; public set; }
    [XmlAttributeAttribute]
[DefaultValueAttribute("System.Byte", "0")]
public byte createdVersion { get; public set; }
    [XmlAttributeAttribute]
[DefaultValueAttribute("System.Byte", "0")]
public byte refreshedVersion { get; public set; }
    [XmlAttributeAttribute]
[DefaultValueAttribute("System.Byte", "0")]
public byte minRefreshableVersion { get; public set; }
    [XmlAttributeAttribute]
public UInt32 recordCount { get; public set; }
    [XmlIgnoreAttribute]
public bool recordCountSpecified { get; public set; }
    [XmlAttributeAttribute]
[DefaultValueAttribute("False")]
public bool upgradeOnRefresh { get; public set; }
    [XmlAttributeAttribute("tupleCache")]
[DefaultValueAttribute("False")]
public bool tupleCache1 { get; public set; }
    [XmlAttributeAttribute]
[DefaultValueAttribute("False")]
public bool supportSubquery { get; public set; }
    [XmlAttributeAttribute]
[DefaultValueAttribute("False")]
public bool supportAdvancedDrill { get; public set; }
    public static CT_PivotCacheDefinition Parse(XmlNode node, XmlNamespaceManager namespaceManager);
    internal void Write(StreamWriter sw);
    public void Save(Stream stream);
    public CT_CacheSource get_cacheSource();
    public void set_cacheSource(CT_CacheSource value);
    public CT_CacheFields get_cacheFields();
    public void set_cacheFields(CT_CacheFields value);
    public CT_CacheHierarchies get_cacheHierarchies();
    public void set_cacheHierarchies(CT_CacheHierarchies value);
    public CT_PCDKPIs get_kpis();
    public void set_kpis(CT_PCDKPIs value);
    public CT_TupleCache get_tupleCache();
    public void set_tupleCache(CT_TupleCache value);
    public CT_CalculatedItems get_calculatedItems();
    public void set_calculatedItems(CT_CalculatedItems value);
    public CT_CalculatedMembers get_calculatedMembers();
    public void set_calculatedMembers(CT_CalculatedMembers value);
    public CT_Dimensions get_dimensions();
    public void set_dimensions(CT_Dimensions value);
    public CT_MeasureGroups get_measureGroups();
    public void set_measureGroups(CT_MeasureGroups value);
    public CT_MeasureDimensionMaps get_maps();
    public void set_maps(CT_MeasureDimensionMaps value);
    public CT_ExtensionList get_extLst();
    public void set_extLst(CT_ExtensionList value);
    public string get_id();
    public void set_id(string value);
    public bool get_invalid();
    public void set_invalid(bool value);
    public bool get_saveData();
    public void set_saveData(bool value);
    public bool get_refreshOnLoad();
    public void set_refreshOnLoad(bool value);
    public bool get_optimizeMemory();
    public void set_optimizeMemory(bool value);
    public bool get_enableRefresh();
    public void set_enableRefresh(bool value);
    public string get_refreshedBy();
    public void set_refreshedBy(string value);
    public double get_refreshedDate();
    public void set_refreshedDate(double value);
    public bool get_refreshedDateSpecified();
    public void set_refreshedDateSpecified(bool value);
    public Nullable`1<DateTime> get_refreshedDateIso();
    public void set_refreshedDateIso(Nullable`1<DateTime> value);
    public bool get_refreshedDateIsoSpecified();
    public void set_refreshedDateIsoSpecified(bool value);
    public bool get_backgroundQuery();
    public void set_backgroundQuery(bool value);
    public UInt32 get_missingItemsLimit();
    public void set_missingItemsLimit(UInt32 value);
    public bool get_missingItemsLimitSpecified();
    public void set_missingItemsLimitSpecified(bool value);
    public byte get_createdVersion();
    public void set_createdVersion(byte value);
    public byte get_refreshedVersion();
    public void set_refreshedVersion(byte value);
    public byte get_minRefreshableVersion();
    public void set_minRefreshableVersion(byte value);
    public UInt32 get_recordCount();
    public void set_recordCount(UInt32 value);
    public bool get_recordCountSpecified();
    public void set_recordCountSpecified(bool value);
    public bool get_upgradeOnRefresh();
    public void set_upgradeOnRefresh(bool value);
    public bool get_tupleCache1();
    public void set_tupleCache1(bool value);
    public bool get_supportSubquery();
    public void set_supportSubquery(bool value);
    public bool get_supportAdvancedDrill();
    public void set_supportAdvancedDrill(bool value);
    public CT_CacheFields AddNewCacheFields();
    public CT_CacheSource AddNewCacheSource();
}
[XmlTypeAttribute]
[XmlRootAttribute]
public class NPOI.OpenXmlFormats.Spreadsheet.CT_PivotCacheRecord : object {
    private List`1<object> items;
    [XmlArrayItemAttribute("b", "NPOI.OpenXmlFormats.Spreadsheet.CT_Boolean")]
[XmlArrayItemAttribute("d", "NPOI.OpenXmlFormats.Spreadsheet.CT_DateTime")]
[XmlArrayItemAttribute("e", "NPOI.OpenXmlFormats.Spreadsheet.CT_Error")]
[XmlArrayItemAttribute("m", "NPOI.OpenXmlFormats.Spreadsheet.CT_Missing")]
[XmlArrayItemAttribute("n", "NPOI.OpenXmlFormats.Spreadsheet.CT_Number")]
[XmlArrayItemAttribute("s", "NPOI.OpenXmlFormats.Spreadsheet.CT_String")]
[XmlArrayItemAttribute("x", "NPOI.OpenXmlFormats.Spreadsheet.CT_Index")]
public List`1<object> fields { get; public set; }
    public static CT_PivotCacheRecord Parse(XmlNode node, XmlNamespaceManager namespaceManager);
    public List`1<object> get_fields();
    public void set_fields(List`1<object> value);
    internal void Write(StreamWriter sw);
}
[XmlTypeAttribute]
[XmlRootAttribute("pivotCacheRecords")]
public class NPOI.OpenXmlFormats.Spreadsheet.CT_PivotCacheRecords : object {
    private List`1<CT_PivotCacheRecord> rField;
    private CT_ExtensionList extLstField;
    private UInt32 countField;
    private bool countFieldSpecified;
    [XmlArrayAttribute]
public List`1<CT_PivotCacheRecord> r { get; public set; }
    [XmlElementAttribute]
public CT_ExtensionList extLst { get; public set; }
    [XmlAttributeAttribute]
public UInt32 count { get; public set; }
    [XmlIgnoreAttribute]
public bool countSpecified { get; public set; }
    public static CT_PivotCacheRecords Parse(XmlNode node, XmlNamespaceManager namespaceManager);
    internal void Write(StreamWriter sw);
    public void Save(Stream stream);
    public List`1<CT_PivotCacheRecord> get_r();
    public void set_r(List`1<CT_PivotCacheRecord> value);
    public CT_ExtensionList get_extLst();
    public void set_extLst(CT_ExtensionList value);
    public UInt32 get_count();
    public void set_count(UInt32 value);
    public bool get_countSpecified();
    public void set_countSpecified(bool value);
}
[XmlTypeAttribute]
public class NPOI.OpenXmlFormats.Spreadsheet.CT_PivotCaches : object {
    private List`1<CT_PivotCache> pivotCacheField;
    [XmlElementAttribute]
public List`1<CT_PivotCache> pivotCache { get; public set; }
    public static CT_PivotCaches Parse(XmlNode node, XmlNamespaceManager namespaceManager);
    internal void Write(StreamWriter sw, string nodeName);
    public List`1<CT_PivotCache> get_pivotCache();
    public void set_pivotCache(List`1<CT_PivotCache> value);
    public CT_PivotCache AddNewPivotCache();
    public CT_PivotCache GetPivotCacheArray(int p);
}
[XmlTypeAttribute]
[XmlRootAttribute]
public class NPOI.OpenXmlFormats.Spreadsheet.CT_PivotDimension : object {
    private bool measureField;
    private string nameField;
    private string uniqueNameField;
    private string captionField;
    [XmlAttributeAttribute]
[DefaultValueAttribute("False")]
public bool measure { get; public set; }
    [XmlAttributeAttribute]
public string name { get; public set; }
    [XmlAttributeAttribute]
public string uniqueName { get; public set; }
    [XmlAttributeAttribute]
public string caption { get; public set; }
    public static CT_PivotDimension Parse(XmlNode node, XmlNamespaceManager namespaceManager);
    internal void Write(StreamWriter sw, string nodeName);
    public bool get_measure();
    public void set_measure(bool value);
    public string get_name();
    public void set_name(string value);
    public string get_uniqueName();
    public void set_uniqueName(string value);
    public string get_caption();
    public void set_caption(string value);
}
[XmlTypeAttribute]
[XmlRootAttribute]
public class NPOI.OpenXmlFormats.Spreadsheet.CT_PivotField : object {
    private CT_Items itemsField;
    private CT_AutoSortScope autoSortScopeField;
    private CT_ExtensionList extLstField;
    private string nameField;
    private Nullable`1<ST_Axis> axisField;
    private bool axisFieldSpecified;
    private bool dataFieldField;
    private string subtotalCaptionField;
    private bool showDropDownsField;
    private bool hiddenLevelField;
    private string uniqueMemberPropertyField;
    private bool compactField;
    private bool allDrilledField;
    private UInt32 numFmtIdField;
    private bool numFmtIdFieldSpecified;
    private bool outlineField;
    private bool subtotalTopField;
    private bool dragToRowField;
    private bool dragToColField;
    private bool multipleItemSelectionAllowedField;
    private bool dragToPageField;
    private bool dragToDataField;
    private bool dragOffField;
    private bool showAllField;
    private bool insertBlankRowField;
    private bool serverFieldField;
    private bool insertPageBreakField;
    private bool autoShowField;
    private bool topAutoShowField;
    private bool hideNewItemsField;
    private bool measureFilterField;
    private bool includeNewItemsInFilterField;
    private UInt32 itemPageCountField;
    private ST_FieldSortType sortTypeField;
    private bool dataSourceSortField;
    private bool dataSourceSortFieldSpecified;
    private bool nonAutoSortDefaultField;
    private UInt32 rankByField;
    private bool rankByFieldSpecified;
    private bool defaultSubtotalField;
    private bool sumSubtotalField;
    private bool countASubtotalField;
    private bool avgSubtotalField;
    private bool maxSubtotalField;
    private bool minSubtotalField;
    private bool productSubtotalField;
    private bool countSubtotalField;
    private bool stdDevSubtotalField;
    private bool stdDevPSubtotalField;
    private bool varSubtotalField;
    private bool varPSubtotalField;
    private bool showPropCellField;
    private bool showPropTipField;
    private bool showPropAsCaptionField;
    private bool defaultAttributeDrillStateField;
    [XmlElementAttribute]
public CT_Items items { get; public set; }
    [XmlElementAttribute]
public CT_AutoSortScope autoSortScope { get; public set; }
    [XmlElementAttribute]
public CT_ExtensionList extLst { get; public set; }
    [XmlAttributeAttribute]
public string name { get; public set; }
    [XmlAttributeAttribute]
public Nullable`1<ST_Axis> axis { get; public set; }
    [XmlIgnoreAttribute]
public bool axisSpecified { get; public set; }
    [XmlAttributeAttribute]
[DefaultValueAttribute("False")]
public bool dataField { get; public set; }
    [XmlAttributeAttribute]
public string subtotalCaption { get; public set; }
    [XmlAttributeAttribute]
[DefaultValueAttribute("True")]
public bool showDropDowns { get; public set; }
    [XmlAttributeAttribute]
[DefaultValueAttribute("False")]
public bool hiddenLevel { get; public set; }
    [XmlAttributeAttribute]
public string uniqueMemberProperty { get; public set; }
    [XmlAttributeAttribute]
[DefaultValueAttribute("True")]
public bool compact { get; public set; }
    [XmlAttributeAttribute]
[DefaultValueAttribute("False")]
public bool allDrilled { get; public set; }
    [XmlAttributeAttribute]
public UInt32 numFmtId { get; public set; }
    [XmlIgnoreAttribute]
public bool numFmtIdSpecified { get; public set; }
    [XmlAttributeAttribute]
[DefaultValueAttribute("True")]
public bool outline { get; public set; }
    [XmlAttributeAttribute]
[DefaultValueAttribute("True")]
public bool subtotalTop { get; public set; }
    [XmlAttributeAttribute]
[DefaultValueAttribute("True")]
public bool dragToRow { get; public set; }
    [XmlAttributeAttribute]
[DefaultValueAttribute("True")]
public bool dragToCol { get; public set; }
    [XmlAttributeAttribute]
[DefaultValueAttribute("False")]
public bool multipleItemSelectionAllowed { get; public set; }
    [XmlAttributeAttribute]
[DefaultValueAttribute("True")]
public bool dragToPage { get; public set; }
    [XmlAttributeAttribute]
[DefaultValueAttribute("True")]
public bool dragToData { get; public set; }
    [XmlAttributeAttribute]
[DefaultValueAttribute("True")]
public bool dragOff { get; public set; }
    [XmlAttributeAttribute]
[DefaultValueAttribute("True")]
public bool showAll { get; public set; }
    [XmlAttributeAttribute]
[DefaultValueAttribute("False")]
public bool insertBlankRow { get; public set; }
    [XmlAttributeAttribute]
[DefaultValueAttribute("False")]
public bool serverField { get; public set; }
    [XmlAttributeAttribute]
[DefaultValueAttribute("False")]
public bool insertPageBreak { get; public set; }
    [XmlAttributeAttribute]
[DefaultValueAttribute("False")]
public bool autoShow { get; public set; }
    [XmlAttributeAttribute]
[DefaultValueAttribute("True")]
public bool topAutoShow { get; public set; }
    [XmlAttributeAttribute]
[DefaultValueAttribute("False")]
public bool hideNewItems { get; public set; }
    [XmlAttributeAttribute]
[DefaultValueAttribute("False")]
public bool measureFilter { get; public set; }
    [XmlAttributeAttribute]
[DefaultValueAttribute("False")]
public bool includeNewItemsInFilter { get; public set; }
    [XmlAttributeAttribute]
[DefaultValueAttribute("System.UInt32", "10")]
public UInt32 itemPageCount { get; public set; }
    [XmlAttributeAttribute]
[DefaultValueAttribute("Mono.Cecil.CustomAttributeArgument")]
public ST_FieldSortType sortType { get; public set; }
    [XmlAttributeAttribute]
public bool dataSourceSort { get; public set; }
    [XmlIgnoreAttribute]
public bool dataSourceSortSpecified { get; public set; }
    [XmlAttributeAttribute]
[DefaultValueAttribute("False")]
public bool nonAutoSortDefault { get; public set; }
    [XmlAttributeAttribute]
public UInt32 rankBy { get; public set; }
    [XmlIgnoreAttribute]
public bool rankBySpecified { get; public set; }
    [XmlAttributeAttribute]
[DefaultValueAttribute("True")]
public bool defaultSubtotal { get; public set; }
    [XmlAttributeAttribute]
[DefaultValueAttribute("False")]
public bool sumSubtotal { get; public set; }
    [XmlAttributeAttribute]
[DefaultValueAttribute("False")]
public bool countASubtotal { get; public set; }
    [XmlAttributeAttribute]
[DefaultValueAttribute("False")]
public bool avgSubtotal { get; public set; }
    [XmlAttributeAttribute]
[DefaultValueAttribute("False")]
public bool maxSubtotal { get; public set; }
    [XmlAttributeAttribute]
[DefaultValueAttribute("False")]
public bool minSubtotal { get; public set; }
    [XmlAttributeAttribute]
[DefaultValueAttribute("False")]
public bool productSubtotal { get; public set; }
    [XmlAttributeAttribute]
[DefaultValueAttribute("False")]
public bool countSubtotal { get; public set; }
    [XmlAttributeAttribute]
[DefaultValueAttribute("False")]
public bool stdDevSubtotal { get; public set; }
    [XmlAttributeAttribute]
[DefaultValueAttribute("False")]
public bool stdDevPSubtotal { get; public set; }
    [XmlAttributeAttribute]
[DefaultValueAttribute("False")]
public bool varSubtotal { get; public set; }
    [XmlAttributeAttribute]
[DefaultValueAttribute("False")]
public bool varPSubtotal { get; public set; }
    [XmlAttributeAttribute]
[DefaultValueAttribute("False")]
public bool showPropCell { get; public set; }
    [XmlAttributeAttribute]
[DefaultValueAttribute("False")]
public bool showPropTip { get; public set; }
    [XmlAttributeAttribute]
[DefaultValueAttribute("False")]
public bool showPropAsCaption { get; public set; }
    [XmlAttributeAttribute]
[DefaultValueAttribute("False")]
public bool defaultAttributeDrillState { get; public set; }
    public static CT_PivotField Parse(XmlNode node, XmlNamespaceManager namespaceManager);
    internal void Write(StreamWriter sw, string nodeName);
    public CT_Items get_items();
    public void set_items(CT_Items value);
    public CT_AutoSortScope get_autoSortScope();
    public void set_autoSortScope(CT_AutoSortScope value);
    public CT_ExtensionList get_extLst();
    public void set_extLst(CT_ExtensionList value);
    public string get_name();
    public void set_name(string value);
    public Nullable`1<ST_Axis> get_axis();
    public void set_axis(Nullable`1<ST_Axis> value);
    public bool get_axisSpecified();
    public void set_axisSpecified(bool value);
    public bool get_dataField();
    public void set_dataField(bool value);
    public string get_subtotalCaption();
    public void set_subtotalCaption(string value);
    public bool get_showDropDowns();
    public void set_showDropDowns(bool value);
    public bool get_hiddenLevel();
    public void set_hiddenLevel(bool value);
    public string get_uniqueMemberProperty();
    public void set_uniqueMemberProperty(string value);
    public bool get_compact();
    public void set_compact(bool value);
    public bool get_allDrilled();
    public void set_allDrilled(bool value);
    public UInt32 get_numFmtId();
    public void set_numFmtId(UInt32 value);
    public bool get_numFmtIdSpecified();
    public void set_numFmtIdSpecified(bool value);
    public bool get_outline();
    public void set_outline(bool value);
    public bool get_subtotalTop();
    public void set_subtotalTop(bool value);
    public bool get_dragToRow();
    public void set_dragToRow(bool value);
    public bool get_dragToCol();
    public void set_dragToCol(bool value);
    public bool get_multipleItemSelectionAllowed();
    public void set_multipleItemSelectionAllowed(bool value);
    public bool get_dragToPage();
    public void set_dragToPage(bool value);
    public bool get_dragToData();
    public void set_dragToData(bool value);
    public bool get_dragOff();
    public void set_dragOff(bool value);
    public bool get_showAll();
    public void set_showAll(bool value);
    public bool get_insertBlankRow();
    public void set_insertBlankRow(bool value);
    public bool get_serverField();
    public void set_serverField(bool value);
    public bool get_insertPageBreak();
    public void set_insertPageBreak(bool value);
    public bool get_autoShow();
    public void set_autoShow(bool value);
    public bool get_topAutoShow();
    public void set_topAutoShow(bool value);
    public bool get_hideNewItems();
    public void set_hideNewItems(bool value);
    public bool get_measureFilter();
    public void set_measureFilter(bool value);
    public bool get_includeNewItemsInFilter();
    public void set_includeNewItemsInFilter(bool value);
    public UInt32 get_itemPageCount();
    public void set_itemPageCount(UInt32 value);
    public ST_FieldSortType get_sortType();
    public void set_sortType(ST_FieldSortType value);
    public bool get_dataSourceSort();
    public void set_dataSourceSort(bool value);
    public bool get_dataSourceSortSpecified();
    public void set_dataSourceSortSpecified(bool value);
    public bool get_nonAutoSortDefault();
    public void set_nonAutoSortDefault(bool value);
    public UInt32 get_rankBy();
    public void set_rankBy(UInt32 value);
    public bool get_rankBySpecified();
    public void set_rankBySpecified(bool value);
    public bool get_defaultSubtotal();
    public void set_defaultSubtotal(bool value);
    public bool get_sumSubtotal();
    public void set_sumSubtotal(bool value);
    public bool get_countASubtotal();
    public void set_countASubtotal(bool value);
    public bool get_avgSubtotal();
    public void set_avgSubtotal(bool value);
    public bool get_maxSubtotal();
    public void set_maxSubtotal(bool value);
    public bool get_minSubtotal();
    public void set_minSubtotal(bool value);
    public bool get_productSubtotal();
    public void set_productSubtotal(bool value);
    public bool get_countSubtotal();
    public void set_countSubtotal(bool value);
    public bool get_stdDevSubtotal();
    public void set_stdDevSubtotal(bool value);
    public bool get_stdDevPSubtotal();
    public void set_stdDevPSubtotal(bool value);
    public bool get_varSubtotal();
    public void set_varSubtotal(bool value);
    public bool get_varPSubtotal();
    public void set_varPSubtotal(bool value);
    public bool get_showPropCell();
    public void set_showPropCell(bool value);
    public bool get_showPropTip();
    public void set_showPropTip(bool value);
    public bool get_showPropAsCaption();
    public void set_showPropAsCaption(bool value);
    public bool get_defaultAttributeDrillState();
    public void set_defaultAttributeDrillState(bool value);
    public CT_Items AddNewItems();
}
[XmlTypeAttribute]
[XmlRootAttribute]
public class NPOI.OpenXmlFormats.Spreadsheet.CT_PivotFields : object {
    private List`1<CT_PivotField> pivotFieldField;
    private UInt32 countField;
    private bool countFieldSpecified;
    [XmlElementAttribute("pivotField")]
public List`1<CT_PivotField> pivotField { get; public set; }
    [XmlAttributeAttribute]
public UInt32 count { get; public set; }
    [XmlIgnoreAttribute]
public bool countSpecified { get; public set; }
    public static CT_PivotFields Parse(XmlNode node, XmlNamespaceManager namespaceManager);
    internal void Write(StreamWriter sw, string nodeName);
    public List`1<CT_PivotField> get_pivotField();
    public void set_pivotField(List`1<CT_PivotField> value);
    public UInt32 get_count();
    public void set_count(UInt32 value);
    public bool get_countSpecified();
    public void set_countSpecified(bool value);
    public void SetPivotFieldArray(int columnIndex, CT_PivotField pivotField);
    public CT_PivotField AddNewPivotField();
    public UInt32 SizeOfPivotFieldArray();
    public CT_PivotField GetPivotFieldArray(int columnIndex);
}
[XmlTypeAttribute]
[XmlRootAttribute]
public class NPOI.OpenXmlFormats.Spreadsheet.CT_PivotFilter : object {
    private CT_AutoFilter autoFilterField;
    private CT_ExtensionList extLstField;
    private UInt32 fldField;
    private UInt32 mpFldField;
    private bool mpFldFieldSpecified;
    private ST_PivotFilterType typeField;
    private int evalOrderField;
    private UInt32 idField;
    private UInt32 iMeasureHierField;
    private bool iMeasureHierFieldSpecified;
    private UInt32 iMeasureFldField;
    private bool iMeasureFldFieldSpecified;
    private string nameField;
    private string descriptionField;
    private string stringValue1Field;
    private string stringValue2Field;
    [XmlElementAttribute]
public CT_AutoFilter autoFilter { get; public set; }
    [XmlElementAttribute]
public CT_ExtensionList extLst { get; public set; }
    [XmlAttributeAttribute]
public UInt32 fld { get; public set; }
    [XmlAttributeAttribute]
public UInt32 mpFld { get; public set; }
    [XmlIgnoreAttribute]
public bool mpFldSpecified { get; public set; }
    [XmlAttributeAttribute]
public ST_PivotFilterType type { get; public set; }
    [XmlAttributeAttribute]
[DefaultValueAttribute("0")]
public int evalOrder { get; public set; }
    [XmlAttributeAttribute]
public UInt32 id { get; public set; }
    [XmlAttributeAttribute]
public UInt32 iMeasureHier { get; public set; }
    [XmlIgnoreAttribute]
public bool iMeasureHierSpecified { get; public set; }
    [XmlAttributeAttribute]
public UInt32 iMeasureFld { get; public set; }
    [XmlIgnoreAttribute]
public bool iMeasureFldSpecified { get; public set; }
    [XmlAttributeAttribute]
public string name { get; public set; }
    [XmlAttributeAttribute]
public string description { get; public set; }
    [XmlAttributeAttribute]
public string stringValue1 { get; public set; }
    [XmlAttributeAttribute]
public string stringValue2 { get; public set; }
    public static CT_PivotFilter Parse(XmlNode node, XmlNamespaceManager namespaceManager);
    internal void Write(StreamWriter sw, string nodeName);
    public CT_AutoFilter get_autoFilter();
    public void set_autoFilter(CT_AutoFilter value);
    public CT_ExtensionList get_extLst();
    public void set_extLst(CT_ExtensionList value);
    public UInt32 get_fld();
    public void set_fld(UInt32 value);
    public UInt32 get_mpFld();
    public void set_mpFld(UInt32 value);
    public bool get_mpFldSpecified();
    public void set_mpFldSpecified(bool value);
    public ST_PivotFilterType get_type();
    public void set_type(ST_PivotFilterType value);
    public int get_evalOrder();
    public void set_evalOrder(int value);
    public UInt32 get_id();
    public void set_id(UInt32 value);
    public UInt32 get_iMeasureHier();
    public void set_iMeasureHier(UInt32 value);
    public bool get_iMeasureHierSpecified();
    public void set_iMeasureHierSpecified(bool value);
    public UInt32 get_iMeasureFld();
    public void set_iMeasureFld(UInt32 value);
    public bool get_iMeasureFldSpecified();
    public void set_iMeasureFldSpecified(bool value);
    public string get_name();
    public void set_name(string value);
    public string get_description();
    public void set_description(string value);
    public string get_stringValue1();
    public void set_stringValue1(string value);
    public string get_stringValue2();
    public void set_stringValue2(string value);
}
[XmlTypeAttribute]
[XmlRootAttribute]
public class NPOI.OpenXmlFormats.Spreadsheet.CT_PivotFilters : object {
    private List`1<CT_PivotFilter> filterField;
    private UInt32 countField;
    [XmlElementAttribute("filter")]
public List`1<CT_PivotFilter> filter { get; public set; }
    [XmlAttributeAttribute]
[DefaultValueAttribute("System.UInt32", "0")]
public UInt32 count { get; public set; }
    public static CT_PivotFilters Parse(XmlNode node, XmlNamespaceManager namespaceManager);
    internal void Write(StreamWriter sw, string nodeName);
    public List`1<CT_PivotFilter> get_filter();
    public void set_filter(List`1<CT_PivotFilter> value);
    public UInt32 get_count();
    public void set_count(UInt32 value);
}
[XmlTypeAttribute]
[XmlRootAttribute]
public class NPOI.OpenXmlFormats.Spreadsheet.CT_PivotHierarchies : object {
    private List`1<CT_PivotHierarchy> pivotHierarchyField;
    private UInt32 countField;
    private bool countFieldSpecified;
    [XmlElementAttribute("pivotHierarchy")]
public List`1<CT_PivotHierarchy> pivotHierarchy { get; public set; }
    [XmlAttributeAttribute]
public UInt32 count { get; public set; }
    [XmlIgnoreAttribute]
public bool countSpecified { get; public set; }
    public static CT_PivotHierarchies Parse(XmlNode node, XmlNamespaceManager namespaceManager);
    internal void Write(StreamWriter sw, string nodeName);
    public List`1<CT_PivotHierarchy> get_pivotHierarchy();
    public void set_pivotHierarchy(List`1<CT_PivotHierarchy> value);
    public UInt32 get_count();
    public void set_count(UInt32 value);
    public bool get_countSpecified();
    public void set_countSpecified(bool value);
}
[XmlTypeAttribute]
[XmlRootAttribute]
public class NPOI.OpenXmlFormats.Spreadsheet.CT_PivotHierarchy : object {
    private CT_MemberProperties mpsField;
    private List`1<CT_Members> membersField;
    private CT_ExtensionList extLstField;
    private bool outlineField;
    private bool multipleItemSelectionAllowedField;
    private bool subtotalTopField;
    private bool showInFieldListField;
    private bool dragToRowField;
    private bool dragToColField;
    private bool dragToPageField;
    private bool dragToDataField;
    private bool dragOffField;
    private bool includeNewItemsInFilterField;
    private string captionField;
    [XmlElementAttribute]
public CT_MemberProperties mps { get; public set; }
    [XmlElementAttribute("members")]
public List`1<CT_Members> members { get; public set; }
    [XmlElementAttribute]
public CT_ExtensionList extLst { get; public set; }
    [XmlAttributeAttribute]
[DefaultValueAttribute("False")]
public bool outline { get; public set; }
    [XmlAttributeAttribute]
[DefaultValueAttribute("False")]
public bool multipleItemSelectionAllowed { get; public set; }
    [XmlAttributeAttribute]
[DefaultValueAttribute("False")]
public bool subtotalTop { get; public set; }
    [XmlAttributeAttribute]
[DefaultValueAttribute("True")]
public bool showInFieldList { get; public set; }
    [XmlAttributeAttribute]
[DefaultValueAttribute("True")]
public bool dragToRow { get; public set; }
    [XmlAttributeAttribute]
[DefaultValueAttribute("True")]
public bool dragToCol { get; public set; }
    [XmlAttributeAttribute]
[DefaultValueAttribute("True")]
public bool dragToPage { get; public set; }
    [XmlAttributeAttribute]
[DefaultValueAttribute("False")]
public bool dragToData { get; public set; }
    [XmlAttributeAttribute]
[DefaultValueAttribute("True")]
public bool dragOff { get; public set; }
    [XmlAttributeAttribute]
[DefaultValueAttribute("False")]
public bool includeNewItemsInFilter { get; public set; }
    [XmlAttributeAttribute]
public string caption { get; public set; }
    public static CT_PivotHierarchy Parse(XmlNode node, XmlNamespaceManager namespaceManager);
    internal void Write(StreamWriter sw, string nodeName);
    public CT_MemberProperties get_mps();
    public void set_mps(CT_MemberProperties value);
    public List`1<CT_Members> get_members();
    public void set_members(List`1<CT_Members> value);
    public CT_ExtensionList get_extLst();
    public void set_extLst(CT_ExtensionList value);
    public bool get_outline();
    public void set_outline(bool value);
    public bool get_multipleItemSelectionAllowed();
    public void set_multipleItemSelectionAllowed(bool value);
    public bool get_subtotalTop();
    public void set_subtotalTop(bool value);
    public bool get_showInFieldList();
    public void set_showInFieldList(bool value);
    public bool get_dragToRow();
    public void set_dragToRow(bool value);
    public bool get_dragToCol();
    public void set_dragToCol(bool value);
    public bool get_dragToPage();
    public void set_dragToPage(bool value);
    public bool get_dragToData();
    public void set_dragToData(bool value);
    public bool get_dragOff();
    public void set_dragOff(bool value);
    public bool get_includeNewItemsInFilter();
    public void set_includeNewItemsInFilter(bool value);
    public string get_caption();
    public void set_caption(string value);
}
[XmlTypeAttribute]
public class NPOI.OpenXmlFormats.Spreadsheet.CT_PivotSelection : object {
    private CT_PivotArea pivotAreaField;
    private ST_Pane paneField;
    private bool showHeaderField;
    private bool labelField;
    private bool dataField;
    private bool extendableField;
    private UInt32 countField;
    private ST_Axis axisField;
    private bool axisFieldSpecified;
    private UInt32 dimensionField;
    private UInt32 startField;
    private UInt32 minField;
    private UInt32 maxField;
    private UInt32 activeRowField;
    private UInt32 activeColField;
    private UInt32 previousRowField;
    private UInt32 previousColField;
    private UInt32 clickField;
    private string idField;
    public CT_PivotArea pivotArea { get; public set; }
    [XmlAttributeAttribute]
[DefaultValueAttribute("Mono.Cecil.CustomAttributeArgument")]
public ST_Pane pane { get; public set; }
    [XmlAttributeAttribute]
[DefaultValueAttribute("False")]
public bool showHeader { get; public set; }
    [XmlAttributeAttribute]
[DefaultValueAttribute("False")]
public bool label { get; public set; }
    [XmlAttributeAttribute]
[DefaultValueAttribute("False")]
public bool data { get; public set; }
    [XmlAttributeAttribute]
[DefaultValueAttribute("False")]
public bool extendable { get; public set; }
    [XmlAttributeAttribute]
[DefaultValueAttribute("System.UInt32", "0")]
public UInt32 count { get; public set; }
    [XmlAttributeAttribute]
public ST_Axis axis { get; public set; }
    [XmlIgnoreAttribute]
public bool axisSpecified { get; public set; }
    [XmlAttributeAttribute]
[DefaultValueAttribute("System.UInt32", "0")]
public UInt32 dimension { get; public set; }
    [XmlAttributeAttribute]
[DefaultValueAttribute("System.UInt32", "0")]
public UInt32 start { get; public set; }
    [XmlAttributeAttribute]
[DefaultValueAttribute("System.UInt32", "0")]
public UInt32 min { get; public set; }
    [XmlAttributeAttribute]
[DefaultValueAttribute("System.UInt32", "0")]
public UInt32 max { get; public set; }
    [XmlAttributeAttribute]
[DefaultValueAttribute("System.UInt32", "0")]
public UInt32 activeRow { get; public set; }
    [XmlAttributeAttribute]
[DefaultValueAttribute("System.UInt32", "0")]
public UInt32 activeCol { get; public set; }
    [XmlAttributeAttribute]
[DefaultValueAttribute("System.UInt32", "0")]
public UInt32 previousRow { get; public set; }
    [XmlAttributeAttribute]
[DefaultValueAttribute("System.UInt32", "0")]
public UInt32 previousCol { get; public set; }
    [XmlAttributeAttribute]
[DefaultValueAttribute("System.UInt32", "0")]
public UInt32 click { get; public set; }
    [XmlAttributeAttribute]
public string id { get; public set; }
    public static CT_PivotSelection Parse(XmlNode node, XmlNamespaceManager namespaceManager);
    internal void Write(StreamWriter sw, string nodeName);
    public CT_PivotArea get_pivotArea();
    public void set_pivotArea(CT_PivotArea value);
    public ST_Pane get_pane();
    public void set_pane(ST_Pane value);
    public bool get_showHeader();
    public void set_showHeader(bool value);
    public bool get_label();
    public void set_label(bool value);
    public bool get_data();
    public void set_data(bool value);
    public bool get_extendable();
    public void set_extendable(bool value);
    public UInt32 get_count();
    public void set_count(UInt32 value);
    public ST_Axis get_axis();
    public void set_axis(ST_Axis value);
    public bool get_axisSpecified();
    public void set_axisSpecified(bool value);
    public UInt32 get_dimension();
    public void set_dimension(UInt32 value);
    public UInt32 get_start();
    public void set_start(UInt32 value);
    public UInt32 get_min();
    public void set_min(UInt32 value);
    public UInt32 get_max();
    public void set_max(UInt32 value);
    public UInt32 get_activeRow();
    public void set_activeRow(UInt32 value);
    public UInt32 get_activeCol();
    public void set_activeCol(UInt32 value);
    public UInt32 get_previousRow();
    public void set_previousRow(UInt32 value);
    public UInt32 get_previousCol();
    public void set_previousCol(UInt32 value);
    public UInt32 get_click();
    public void set_click(UInt32 value);
    public string get_id();
    public void set_id(string value);
}
[XmlTypeAttribute]
[XmlRootAttribute("pivotTableDefinition")]
public class NPOI.OpenXmlFormats.Spreadsheet.CT_PivotTableDefinition : object {
    private CT_Location locationField;
    private CT_PivotFields pivotFieldsField;
    private CT_RowFields rowFieldsField;
    private CT_rowItems rowItemsField;
    private CT_ColFields colFieldsField;
    private CT_colItems colItemsField;
    private CT_PageFields pageFieldsField;
    private CT_DataFields dataFieldsField;
    private CT_Formats formatsField;
    private CT_ConditionalFormats conditionalFormatsField;
    private CT_ChartFormats chartFormatsField;
    private CT_PivotHierarchies pivotHierarchiesField;
    private CT_PivotTableStyle pivotTableStyleInfoField;
    private CT_PivotFilters filtersField;
    private CT_RowHierarchiesUsage rowHierarchiesUsageField;
    private CT_ColHierarchiesUsage colHierarchiesUsageField;
    private CT_ExtensionList extLstField;
    private string nameField;
    private UInt32 cacheIdField;
    private bool dataOnRowsField;
    private UInt32 dataPositionField;
    private bool dataPositionFieldSpecified;
    private UInt32 autoFormatIdField;
    private bool autoFormatIdFieldSpecified;
    private bool applyNumberFormatsField;
    private bool applyNumberFormatsFieldSpecified;
    private bool applyBorderFormatsField;
    private bool applyBorderFormatsFieldSpecified;
    private bool applyFontFormatsField;
    private bool applyFontFormatsFieldSpecified;
    private bool applyPatternFormatsField;
    private bool applyPatternFormatsFieldSpecified;
    private bool applyAlignmentFormatsField;
    private bool applyAlignmentFormatsFieldSpecified;
    private bool applyWidthHeightFormatsField;
    private bool applyWidthHeightFormatsFieldSpecified;
    private string dataCaptionField;
    private string grandTotalCaptionField;
    private string errorCaptionField;
    private bool showErrorField;
    private string missingCaptionField;
    private bool showMissingField;
    private string pageStyleField;
    private string pivotTableStyleField;
    private string vacatedStyleField;
    private string tagField;
    private byte updatedVersionField;
    private byte minRefreshableVersionField;
    private bool asteriskTotalsField;
    private bool showItemsField;
    private bool editDataField;
    private bool disableFieldListField;
    private bool showCalcMbrsField;
    private bool visualTotalsField;
    private bool showMultipleLabelField;
    private bool showDataDropDownField;
    private bool showDrillField;
    private bool printDrillField;
    private bool showMemberPropertyTipsField;
    private bool showDataTipsField;
    private bool enableWizardField;
    private bool enableDrillField;
    private bool enableFieldPropertiesField;
    private bool preserveFormattingField;
    private bool useAutoFormattingField;
    private UInt32 pageWrapField;
    private bool pageOverThenDownField;
    private bool subtotalHiddenItemsField;
    private bool rowGrandTotalsField;
    private bool colGrandTotalsField;
    private bool fieldPrintTitlesField;
    private bool itemPrintTitlesField;
    private bool mergeItemField;
    private bool showDropZonesField;
    private byte createdVersionField;
    private UInt32 indentField;
    private bool showEmptyRowField;
    private bool showEmptyColField;
    private bool showHeadersField;
    private bool compactField;
    private bool outlineField;
    private bool outlineDataField;
    private bool compactDataField;
    private bool publishedField;
    private bool gridDropZonesField;
    private bool immersiveField;
    private bool multipleFieldFiltersField;
    private UInt32 chartFormatField;
    private string rowHeaderCaptionField;
    private string colHeaderCaptionField;
    private bool fieldListSortAscendingField;
    private bool mdxSubqueriesField;
    private bool customListSortField;
    [XmlElementAttribute]
public CT_Location location { get; public set; }
    [XmlElementAttribute]
public CT_PivotFields pivotFields { get; public set; }
    [XmlElementAttribute]
public CT_RowFields rowFields { get; public set; }
    [XmlElementAttribute]
public CT_rowItems rowItems { get; public set; }
    [XmlElementAttribute]
public CT_ColFields colFields { get; public set; }
    [XmlElementAttribute]
public CT_colItems colItems { get; public set; }
    [XmlElementAttribute]
public CT_PageFields pageFields { get; public set; }
    [XmlElementAttribute]
public CT_DataFields dataFields { get; public set; }
    [XmlElementAttribute]
public CT_Formats formats { get; public set; }
    [XmlElementAttribute]
public CT_ConditionalFormats conditionalFormats { get; public set; }
    [XmlElementAttribute]
public CT_ChartFormats chartFormats { get; public set; }
    [XmlElementAttribute]
public CT_PivotHierarchies pivotHierarchies { get; public set; }
    [XmlElementAttribute]
public CT_PivotTableStyle pivotTableStyleInfo { get; public set; }
    [XmlElementAttribute]
public CT_PivotFilters filters { get; public set; }
    [XmlElementAttribute]
public CT_RowHierarchiesUsage rowHierarchiesUsage { get; public set; }
    [XmlElementAttribute]
public CT_ColHierarchiesUsage colHierarchiesUsage { get; public set; }
    [XmlElementAttribute]
public CT_ExtensionList extLst { get; public set; }
    [XmlAttributeAttribute]
public string name { get; public set; }
    [XmlAttributeAttribute]
public UInt32 cacheId { get; public set; }
    [XmlAttributeAttribute]
[DefaultValueAttribute("False")]
public bool dataOnRows { get; public set; }
    [XmlAttributeAttribute]
public UInt32 dataPosition { get; public set; }
    [XmlIgnoreAttribute]
public bool dataPositionSpecified { get; public set; }
    [XmlAttributeAttribute]
public UInt32 autoFormatId { get; public set; }
    [XmlIgnoreAttribute]
public bool autoFormatIdSpecified { get; public set; }
    [XmlAttributeAttribute]
public bool applyNumberFormats { get; public set; }
    [XmlIgnoreAttribute]
public bool applyNumberFormatsSpecified { get; public set; }
    [XmlAttributeAttribute]
public bool applyBorderFormats { get; public set; }
    [XmlIgnoreAttribute]
public bool applyBorderFormatsSpecified { get; public set; }
    [XmlAttributeAttribute]
public bool applyFontFormats { get; public set; }
    [XmlIgnoreAttribute]
public bool applyFontFormatsSpecified { get; public set; }
    [XmlAttributeAttribute]
public bool applyPatternFormats { get; public set; }
    [XmlIgnoreAttribute]
public bool applyPatternFormatsSpecified { get; public set; }
    [XmlAttributeAttribute]
public bool applyAlignmentFormats { get; public set; }
    [XmlIgnoreAttribute]
public bool applyAlignmentFormatsSpecified { get; public set; }
    [XmlAttributeAttribute]
public bool applyWidthHeightFormats { get; public set; }
    [XmlIgnoreAttribute]
public bool applyWidthHeightFormatsSpecified { get; public set; }
    [XmlAttributeAttribute]
public string dataCaption { get; public set; }
    [XmlAttributeAttribute]
public string grandTotalCaption { get; public set; }
    [XmlAttributeAttribute]
public string errorCaption { get; public set; }
    [XmlAttributeAttribute]
[DefaultValueAttribute("False")]
public bool showError { get; public set; }
    [XmlAttributeAttribute]
public string missingCaption { get; public set; }
    [XmlAttributeAttribute]
[DefaultValueAttribute("True")]
public bool showMissing { get; public set; }
    [XmlAttributeAttribute]
public string pageStyle { get; public set; }
    [XmlAttributeAttribute]
public string pivotTableStyle { get; public set; }
    [XmlAttributeAttribute]
public string vacatedStyle { get; public set; }
    [XmlAttributeAttribute]
public string tag { get; public set; }
    [XmlAttributeAttribute]
[DefaultValueAttribute("System.Byte", "0")]
public byte updatedVersion { get; public set; }
    [XmlAttributeAttribute]
[DefaultValueAttribute("System.Byte", "0")]
public byte minRefreshableVersion { get; public set; }
    [XmlAttributeAttribute]
[DefaultValueAttribute("False")]
public bool asteriskTotals { get; public set; }
    [XmlAttributeAttribute]
[DefaultValueAttribute("True")]
public bool showItems { get; public set; }
    [XmlAttributeAttribute]
[DefaultValueAttribute("False")]
public bool editData { get; public set; }
    [XmlAttributeAttribute]
[DefaultValueAttribute("False")]
public bool disableFieldList { get; public set; }
    [XmlAttributeAttribute]
[DefaultValueAttribute("True")]
public bool showCalcMbrs { get; public set; }
    [XmlAttributeAttribute]
[DefaultValueAttribute("True")]
public bool visualTotals { get; public set; }
    [XmlAttributeAttribute]
[DefaultValueAttribute("True")]
public bool showMultipleLabel { get; public set; }
    [XmlAttributeAttribute]
[DefaultValueAttribute("True")]
public bool showDataDropDown { get; public set; }
    [XmlAttributeAttribute]
[DefaultValueAttribute("True")]
public bool showDrill { get; public set; }
    [XmlAttributeAttribute]
[DefaultValueAttribute("False")]
public bool printDrill { get; public set; }
    [XmlAttributeAttribute]
[DefaultValueAttribute("True")]
public bool showMemberPropertyTips { get; public set; }
    [XmlAttributeAttribute]
[DefaultValueAttribute("True")]
public bool showDataTips { get; public set; }
    [XmlAttributeAttribute]
[DefaultValueAttribute("True")]
public bool enableWizard { get; public set; }
    [XmlAttributeAttribute]
[DefaultValueAttribute("True")]
public bool enableDrill { get; public set; }
    [XmlAttributeAttribute]
[DefaultValueAttribute("True")]
public bool enableFieldProperties { get; public set; }
    [XmlAttributeAttribute]
[DefaultValueAttribute("True")]
public bool preserveFormatting { get; public set; }
    [XmlAttributeAttribute]
[DefaultValueAttribute("False")]
public bool useAutoFormatting { get; public set; }
    [XmlAttributeAttribute]
[DefaultValueAttribute("System.UInt32", "0")]
public UInt32 pageWrap { get; public set; }
    [XmlAttributeAttribute]
[DefaultValueAttribute("False")]
public bool pageOverThenDown { get; public set; }
    [XmlAttributeAttribute]
[DefaultValueAttribute("False")]
public bool subtotalHiddenItems { get; public set; }
    [XmlAttributeAttribute]
[DefaultValueAttribute("True")]
public bool rowGrandTotals { get; public set; }
    [XmlAttributeAttribute]
[DefaultValueAttribute("True")]
public bool colGrandTotals { get; public set; }
    [XmlAttributeAttribute]
[DefaultValueAttribute("False")]
public bool fieldPrintTitles { get; public set; }
    [XmlAttributeAttribute]
[DefaultValueAttribute("False")]
public bool itemPrintTitles { get; public set; }
    [XmlAttributeAttribute]
[DefaultValueAttribute("False")]
public bool mergeItem { get; public set; }
    [XmlAttributeAttribute]
[DefaultValueAttribute("True")]
public bool showDropZones { get; public set; }
    [XmlAttributeAttribute]
[DefaultValueAttribute("System.Byte", "0")]
public byte createdVersion { get; public set; }
    [XmlAttributeAttribute]
[DefaultValueAttribute("System.UInt32", "1")]
public UInt32 indent { get; public set; }
    [XmlAttributeAttribute]
[DefaultValueAttribute("False")]
public bool showEmptyRow { get; public set; }
    [XmlAttributeAttribute]
[DefaultValueAttribute("False")]
public bool showEmptyCol { get; public set; }
    [XmlAttributeAttribute]
[DefaultValueAttribute("True")]
public bool showHeaders { get; public set; }
    [XmlAttributeAttribute]
[DefaultValueAttribute("True")]
public bool compact { get; public set; }
    [XmlAttributeAttribute]
[DefaultValueAttribute("False")]
public bool outline { get; public set; }
    [XmlAttributeAttribute]
[DefaultValueAttribute("False")]
public bool outlineData { get; public set; }
    [XmlAttributeAttribute]
[DefaultValueAttribute("True")]
public bool compactData { get; public set; }
    [XmlAttributeAttribute]
[DefaultValueAttribute("False")]
public bool published { get; public set; }
    [XmlAttributeAttribute]
[DefaultValueAttribute("False")]
public bool gridDropZones { get; public set; }
    [XmlAttributeAttribute]
[DefaultValueAttribute("True")]
public bool immersive { get; public set; }
    [XmlAttributeAttribute]
[DefaultValueAttribute("True")]
public bool multipleFieldFilters { get; public set; }
    [XmlAttributeAttribute]
[DefaultValueAttribute("System.UInt32", "0")]
public UInt32 chartFormat { get; public set; }
    [XmlAttributeAttribute]
public string rowHeaderCaption { get; public set; }
    [XmlAttributeAttribute]
public string colHeaderCaption { get; public set; }
    [XmlAttributeAttribute]
[DefaultValueAttribute("False")]
public bool fieldListSortAscending { get; public set; }
    [XmlAttributeAttribute]
[DefaultValueAttribute("False")]
public bool mdxSubqueries { get; public set; }
    [XmlAttributeAttribute]
[DefaultValueAttribute("True")]
public bool customListSort { get; public set; }
    public static CT_PivotTableDefinition Parse(XmlNode node, XmlNamespaceManager namespaceManager);
    internal void Write(StreamWriter sw);
    public void Save(Stream stream);
    public CT_Location get_location();
    public void set_location(CT_Location value);
    public CT_PivotFields get_pivotFields();
    public void set_pivotFields(CT_PivotFields value);
    public CT_RowFields get_rowFields();
    public void set_rowFields(CT_RowFields value);
    public CT_rowItems get_rowItems();
    public void set_rowItems(CT_rowItems value);
    public CT_ColFields get_colFields();
    public void set_colFields(CT_ColFields value);
    public CT_colItems get_colItems();
    public void set_colItems(CT_colItems value);
    public CT_PageFields get_pageFields();
    public void set_pageFields(CT_PageFields value);
    public CT_DataFields get_dataFields();
    public void set_dataFields(CT_DataFields value);
    public CT_Formats get_formats();
    public void set_formats(CT_Formats value);
    public CT_ConditionalFormats get_conditionalFormats();
    public void set_conditionalFormats(CT_ConditionalFormats value);
    public CT_ChartFormats get_chartFormats();
    public void set_chartFormats(CT_ChartFormats value);
    public CT_PivotHierarchies get_pivotHierarchies();
    public void set_pivotHierarchies(CT_PivotHierarchies value);
    public CT_PivotTableStyle get_pivotTableStyleInfo();
    public void set_pivotTableStyleInfo(CT_PivotTableStyle value);
    public CT_PivotFilters get_filters();
    public void set_filters(CT_PivotFilters value);
    public CT_RowHierarchiesUsage get_rowHierarchiesUsage();
    public void set_rowHierarchiesUsage(CT_RowHierarchiesUsage value);
    public CT_ColHierarchiesUsage get_colHierarchiesUsage();
    public void set_colHierarchiesUsage(CT_ColHierarchiesUsage value);
    public CT_ExtensionList get_extLst();
    public void set_extLst(CT_ExtensionList value);
    public string get_name();
    public void set_name(string value);
    public UInt32 get_cacheId();
    public void set_cacheId(UInt32 value);
    public bool get_dataOnRows();
    public void set_dataOnRows(bool value);
    public UInt32 get_dataPosition();
    public void set_dataPosition(UInt32 value);
    public bool get_dataPositionSpecified();
    public void set_dataPositionSpecified(bool value);
    public UInt32 get_autoFormatId();
    public void set_autoFormatId(UInt32 value);
    public bool get_autoFormatIdSpecified();
    public void set_autoFormatIdSpecified(bool value);
    public bool get_applyNumberFormats();
    public void set_applyNumberFormats(bool value);
    public bool get_applyNumberFormatsSpecified();
    public void set_applyNumberFormatsSpecified(bool value);
    public bool get_applyBorderFormats();
    public void set_applyBorderFormats(bool value);
    public bool get_applyBorderFormatsSpecified();
    public void set_applyBorderFormatsSpecified(bool value);
    public bool get_applyFontFormats();
    public void set_applyFontFormats(bool value);
    public bool get_applyFontFormatsSpecified();
    public void set_applyFontFormatsSpecified(bool value);
    public bool get_applyPatternFormats();
    public void set_applyPatternFormats(bool value);
    public bool get_applyPatternFormatsSpecified();
    public void set_applyPatternFormatsSpecified(bool value);
    public bool get_applyAlignmentFormats();
    public void set_applyAlignmentFormats(bool value);
    public bool get_applyAlignmentFormatsSpecified();
    public void set_applyAlignmentFormatsSpecified(bool value);
    public bool get_applyWidthHeightFormats();
    public void set_applyWidthHeightFormats(bool value);
    public bool get_applyWidthHeightFormatsSpecified();
    public void set_applyWidthHeightFormatsSpecified(bool value);
    public string get_dataCaption();
    public void set_dataCaption(string value);
    public string get_grandTotalCaption();
    public void set_grandTotalCaption(string value);
    public string get_errorCaption();
    public void set_errorCaption(string value);
    public bool get_showError();
    public void set_showError(bool value);
    public string get_missingCaption();
    public void set_missingCaption(string value);
    public bool get_showMissing();
    public void set_showMissing(bool value);
    public string get_pageStyle();
    public void set_pageStyle(string value);
    public string get_pivotTableStyle();
    public void set_pivotTableStyle(string value);
    public string get_vacatedStyle();
    public void set_vacatedStyle(string value);
    public string get_tag();
    public void set_tag(string value);
    public byte get_updatedVersion();
    public void set_updatedVersion(byte value);
    public byte get_minRefreshableVersion();
    public void set_minRefreshableVersion(byte value);
    public bool get_asteriskTotals();
    public void set_asteriskTotals(bool value);
    public bool get_showItems();
    public void set_showItems(bool value);
    public bool get_editData();
    public void set_editData(bool value);
    public bool get_disableFieldList();
    public void set_disableFieldList(bool value);
    public bool get_showCalcMbrs();
    public void set_showCalcMbrs(bool value);
    public bool get_visualTotals();
    public void set_visualTotals(bool value);
    public bool get_showMultipleLabel();
    public void set_showMultipleLabel(bool value);
    public bool get_showDataDropDown();
    public void set_showDataDropDown(bool value);
    public bool get_showDrill();
    public void set_showDrill(bool value);
    public bool get_printDrill();
    public void set_printDrill(bool value);
    public bool get_showMemberPropertyTips();
    public void set_showMemberPropertyTips(bool value);
    public bool get_showDataTips();
    public void set_showDataTips(bool value);
    public bool get_enableWizard();
    public void set_enableWizard(bool value);
    public bool get_enableDrill();
    public void set_enableDrill(bool value);
    public bool get_enableFieldProperties();
    public void set_enableFieldProperties(bool value);
    public bool get_preserveFormatting();
    public void set_preserveFormatting(bool value);
    public bool get_useAutoFormatting();
    public void set_useAutoFormatting(bool value);
    public UInt32 get_pageWrap();
    public void set_pageWrap(UInt32 value);
    public bool get_pageOverThenDown();
    public void set_pageOverThenDown(bool value);
    public bool get_subtotalHiddenItems();
    public void set_subtotalHiddenItems(bool value);
    public bool get_rowGrandTotals();
    public void set_rowGrandTotals(bool value);
    public bool get_colGrandTotals();
    public void set_colGrandTotals(bool value);
    public bool get_fieldPrintTitles();
    public void set_fieldPrintTitles(bool value);
    public bool get_itemPrintTitles();
    public void set_itemPrintTitles(bool value);
    public bool get_mergeItem();
    public void set_mergeItem(bool value);
    public bool get_showDropZones();
    public void set_showDropZones(bool value);
    public byte get_createdVersion();
    public void set_createdVersion(byte value);
    public UInt32 get_indent();
    public void set_indent(UInt32 value);
    public bool get_showEmptyRow();
    public void set_showEmptyRow(bool value);
    public bool get_showEmptyCol();
    public void set_showEmptyCol(bool value);
    public bool get_showHeaders();
    public void set_showHeaders(bool value);
    public bool get_compact();
    public void set_compact(bool value);
    public bool get_outline();
    public void set_outline(bool value);
    public bool get_outlineData();
    public void set_outlineData(bool value);
    public bool get_compactData();
    public void set_compactData(bool value);
    public bool get_published();
    public void set_published(bool value);
    public bool get_gridDropZones();
    public void set_gridDropZones(bool value);
    public bool get_immersive();
    public void set_immersive(bool value);
    public bool get_multipleFieldFilters();
    public void set_multipleFieldFilters(bool value);
    public UInt32 get_chartFormat();
    public void set_chartFormat(UInt32 value);
    public string get_rowHeaderCaption();
    public void set_rowHeaderCaption(string value);
    public string get_colHeaderCaption();
    public void set_colHeaderCaption(string value);
    public bool get_fieldListSortAscending();
    public void set_fieldListSortAscending(bool value);
    public bool get_mdxSubqueries();
    public void set_mdxSubqueries(bool value);
    public bool get_customListSort();
    public void set_customListSort(bool value);
    public CT_PivotTableStyle AddNewPivotTableStyleInfo();
    public CT_RowFields AddNewRowFields();
    public CT_ColFields AddNewColFields();
    public CT_DataFields AddNewDataFields();
    public CT_PageFields AddNewPageFields();
    public CT_PivotFields AddNewPivotFields();
    public CT_Location AddNewLocation();
}
[XmlTypeAttribute]
[XmlRootAttribute]
public class NPOI.OpenXmlFormats.Spreadsheet.CT_PivotTableStyle : object {
    private string nameField;
    private bool showRowHeadersField;
    private bool showRowHeadersFieldSpecified;
    private bool showColHeadersField;
    private bool showColHeadersFieldSpecified;
    private bool showRowStripesField;
    private bool showRowStripesFieldSpecified;
    private bool showColStripesField;
    private bool showColStripesFieldSpecified;
    private bool showLastColumnField;
    private bool showLastColumnFieldSpecified;
    [XmlAttributeAttribute]
public string name { get; public set; }
    [XmlAttributeAttribute]
public bool showRowHeaders { get; public set; }
    [XmlIgnoreAttribute]
public bool showRowHeadersSpecified { get; public set; }
    [XmlAttributeAttribute]
public bool showColHeaders { get; public set; }
    [XmlIgnoreAttribute]
public bool showColHeadersSpecified { get; public set; }
    [XmlAttributeAttribute]
public bool showRowStripes { get; public set; }
    [XmlIgnoreAttribute]
public bool showRowStripesSpecified { get; public set; }
    [XmlAttributeAttribute]
public bool showColStripes { get; public set; }
    [XmlIgnoreAttribute]
public bool showColStripesSpecified { get; public set; }
    [XmlAttributeAttribute]
public bool showLastColumn { get; public set; }
    [XmlIgnoreAttribute]
public bool showLastColumnSpecified { get; public set; }
    public static CT_PivotTableStyle Parse(XmlNode node, XmlNamespaceManager namespaceManager);
    internal void Write(StreamWriter sw, string nodeName);
    public string get_name();
    public void set_name(string value);
    public bool get_showRowHeaders();
    public void set_showRowHeaders(bool value);
    public bool get_showRowHeadersSpecified();
    public void set_showRowHeadersSpecified(bool value);
    public bool get_showColHeaders();
    public void set_showColHeaders(bool value);
    public bool get_showColHeadersSpecified();
    public void set_showColHeadersSpecified(bool value);
    public bool get_showRowStripes();
    public void set_showRowStripes(bool value);
    public bool get_showRowStripesSpecified();
    public void set_showRowStripesSpecified(bool value);
    public bool get_showColStripes();
    public void set_showColStripes(bool value);
    public bool get_showColStripesSpecified();
    public void set_showColStripesSpecified(bool value);
    public bool get_showLastColumn();
    public void set_showLastColumn(bool value);
    public bool get_showLastColumnSpecified();
    public void set_showLastColumnSpecified(bool value);
}
[XmlTypeAttribute]
public class NPOI.OpenXmlFormats.Spreadsheet.CT_PrintOptions : object {
    private bool horizontalCenteredField;
    private bool verticalCenteredField;
    private bool headingsField;
    private bool gridLinesField;
    private bool gridLinesSetField;
    [XmlAttributeAttribute]
[DefaultValueAttribute("False")]
public bool horizontalCentered { get; public set; }
    [XmlAttributeAttribute]
[DefaultValueAttribute("False")]
public bool verticalCentered { get; public set; }
    [XmlAttributeAttribute]
[DefaultValueAttribute("False")]
public bool headings { get; public set; }
    [XmlAttributeAttribute]
[DefaultValueAttribute("False")]
public bool gridLines { get; public set; }
    [XmlAttributeAttribute]
[DefaultValueAttribute("True")]
public bool gridLinesSet { get; public set; }
    public static CT_PrintOptions Parse(XmlNode node, XmlNamespaceManager namespaceManager);
    internal void Write(StreamWriter sw, string nodeName);
    public bool get_horizontalCentered();
    public void set_horizontalCentered(bool value);
    public bool get_verticalCentered();
    public void set_verticalCentered(bool value);
    public bool get_headings();
    public void set_headings(bool value);
    public bool get_gridLines();
    public void set_gridLines(bool value);
    public bool get_gridLinesSet();
    public void set_gridLinesSet(bool value);
}
[XmlTypeAttribute]
public class NPOI.OpenXmlFormats.Spreadsheet.CT_ProtectedRange : object {
    private Byte[] passwordField;
    private string sqrefField;
    private string nameField;
    private string securityDescriptorField;
    public Byte[] password { get; public set; }
    public string sqref { get; public set; }
    public string name { get; public set; }
    public string securityDescriptor { get; public set; }
    public static CT_ProtectedRange Parse(XmlNode node, XmlNamespaceManager namespaceManager);
    internal void Write(StreamWriter sw, string nodeName);
    public Byte[] get_password();
    public void set_password(Byte[] value);
    public string get_sqref();
    public void set_sqref(string value);
    public string get_name();
    public void set_name(string value);
    public string get_securityDescriptor();
    public void set_securityDescriptor(string value);
}
[XmlTypeAttribute]
public class NPOI.OpenXmlFormats.Spreadsheet.CT_ProtectedRanges : object {
    private List`1<CT_ProtectedRange> protectedRangeField;
    public List`1<CT_ProtectedRange> protectedRange { get; public set; }
    public static CT_ProtectedRanges Parse(XmlNode node, XmlNamespaceManager namespaceManager);
    internal void Write(StreamWriter sw, string nodeName);
    public List`1<CT_ProtectedRange> get_protectedRange();
    public void set_protectedRange(List`1<CT_ProtectedRange> value);
}
[XmlTypeAttribute]
[XmlRootAttribute]
public class NPOI.OpenXmlFormats.Spreadsheet.CT_Query : object {
    private CT_Tuples tplsField;
    private string mdxField;
    [XmlElementAttribute]
public CT_Tuples tpls { get; public set; }
    [XmlAttributeAttribute]
public string mdx { get; public set; }
    public static CT_Query Parse(XmlNode node, XmlNamespaceManager namespaceManager);
    internal void Write(StreamWriter sw, string nodeName);
    public CT_Tuples get_tpls();
    public void set_tpls(CT_Tuples value);
    public string get_mdx();
    public void set_mdx(string value);
}
[XmlTypeAttribute]
[XmlRootAttribute]
public class NPOI.OpenXmlFormats.Spreadsheet.CT_QueryCache : object {
    private List`1<CT_Query> queryField;
    private UInt32 countField;
    private bool countFieldSpecified;
    [XmlElementAttribute("query")]
public List`1<CT_Query> query { get; public set; }
    [XmlAttributeAttribute]
public UInt32 count { get; public set; }
    [XmlIgnoreAttribute]
public bool countSpecified { get; public set; }
    public static CT_QueryCache Parse(XmlNode node, XmlNamespaceManager namespaceManager);
    internal void Write(StreamWriter sw, string nodeName);
    public List`1<CT_Query> get_query();
    public void set_query(List`1<CT_Query> value);
    public UInt32 get_count();
    public void set_count(UInt32 value);
    public bool get_countSpecified();
    public void set_countSpecified(bool value);
}
[DebuggerStepThroughAttribute]
[DesignerCategoryAttribute("code")]
[XmlTypeAttribute]
[XmlRootAttribute]
public class NPOI.OpenXmlFormats.Spreadsheet.CT_QueryTable : object {
    private CT_QueryTableRefresh queryTableRefreshField;
    private CT_ExtensionList extLstField;
    private string nameField;
    private bool headersField;
    private bool rowNumbersField;
    private bool disableRefreshField;
    private bool backgroundRefreshField;
    private bool firstBackgroundRefreshField;
    private bool refreshOnLoadField;
    private ST_GrowShrinkType growShrinkTypeField;
    private bool fillFormulasField;
    private bool removeDataOnSaveField;
    private bool disableEditField;
    private bool preserveFormattingField;
    private bool adjustColumnWidthField;
    private bool intermediateField;
    private UInt32 connectionIdField;
    private UInt32 autoFormatIdField;
    private bool autoFormatIdFieldSpecified;
    private bool applyNumberFormatsField;
    private bool applyNumberFormatsFieldSpecified;
    private bool applyBorderFormatsField;
    private bool applyBorderFormatsFieldSpecified;
    private bool applyFontFormatsField;
    private bool applyFontFormatsFieldSpecified;
    private bool applyPatternFormatsField;
    private bool applyPatternFormatsFieldSpecified;
    private bool applyAlignmentFormatsField;
    private bool applyAlignmentFormatsFieldSpecified;
    private bool applyWidthHeightFormatsField;
    private bool applyWidthHeightFormatsFieldSpecified;
    public CT_QueryTableRefresh queryTableRefresh { get; public set; }
    public CT_ExtensionList extLst { get; public set; }
    [XmlAttributeAttribute]
public string name { get; public set; }
    [XmlAttributeAttribute]
[DefaultValueAttribute("True")]
public bool headers { get; public set; }
    [XmlAttributeAttribute]
[DefaultValueAttribute("False")]
public bool rowNumbers { get; public set; }
    [XmlAttributeAttribute]
[DefaultValueAttribute("False")]
public bool disableRefresh { get; public set; }
    [XmlAttributeAttribute]
[DefaultValueAttribute("True")]
public bool backgroundRefresh { get; public set; }
    [XmlAttributeAttribute]
[DefaultValueAttribute("False")]
public bool firstBackgroundRefresh { get; public set; }
    [XmlAttributeAttribute]
[DefaultValueAttribute("False")]
public bool refreshOnLoad { get; public set; }
    [XmlAttributeAttribute]
[DefaultValueAttribute("Mono.Cecil.CustomAttributeArgument")]
public ST_GrowShrinkType growShrinkType { get; public set; }
    [XmlAttributeAttribute]
[DefaultValueAttribute("False")]
public bool fillFormulas { get; public set; }
    [XmlAttributeAttribute]
[DefaultValueAttribute("False")]
public bool removeDataOnSave { get; public set; }
    [XmlAttributeAttribute]
[DefaultValueAttribute("False")]
public bool disableEdit { get; public set; }
    [XmlAttributeAttribute]
[DefaultValueAttribute("True")]
public bool preserveFormatting { get; public set; }
    [XmlAttributeAttribute]
[DefaultValueAttribute("True")]
public bool adjustColumnWidth { get; public set; }
    [XmlAttributeAttribute]
[DefaultValueAttribute("False")]
public bool intermediate { get; public set; }
    [XmlAttributeAttribute]
public UInt32 connectionId { get; public set; }
    [XmlAttributeAttribute]
public UInt32 autoFormatId { get; public set; }
    [XmlIgnoreAttribute]
public bool autoFormatIdSpecified { get; public set; }
    [XmlAttributeAttribute]
public bool applyNumberFormats { get; public set; }
    [XmlIgnoreAttribute]
public bool applyNumberFormatsSpecified { get; public set; }
    [XmlAttributeAttribute]
public bool applyBorderFormats { get; public set; }
    [XmlIgnoreAttribute]
public bool applyBorderFormatsSpecified { get; public set; }
    [XmlAttributeAttribute]
public bool applyFontFormats { get; public set; }
    [XmlIgnoreAttribute]
public bool applyFontFormatsSpecified { get; public set; }
    [XmlAttributeAttribute]
public bool applyPatternFormats { get; public set; }
    [XmlIgnoreAttribute]
public bool applyPatternFormatsSpecified { get; public set; }
    [XmlAttributeAttribute]
public bool applyAlignmentFormats { get; public set; }
    [XmlIgnoreAttribute]
public bool applyAlignmentFormatsSpecified { get; public set; }
    [XmlAttributeAttribute]
public bool applyWidthHeightFormats { get; public set; }
    [XmlIgnoreAttribute]
public bool applyWidthHeightFormatsSpecified { get; public set; }
    public CT_QueryTableRefresh get_queryTableRefresh();
    public void set_queryTableRefresh(CT_QueryTableRefresh value);
    public CT_ExtensionList get_extLst();
    public void set_extLst(CT_ExtensionList value);
    public string get_name();
    public void set_name(string value);
    public bool get_headers();
    public void set_headers(bool value);
    public bool get_rowNumbers();
    public void set_rowNumbers(bool value);
    public bool get_disableRefresh();
    public void set_disableRefresh(bool value);
    public bool get_backgroundRefresh();
    public void set_backgroundRefresh(bool value);
    public bool get_firstBackgroundRefresh();
    public void set_firstBackgroundRefresh(bool value);
    public bool get_refreshOnLoad();
    public void set_refreshOnLoad(bool value);
    public ST_GrowShrinkType get_growShrinkType();
    public void set_growShrinkType(ST_GrowShrinkType value);
    public bool get_fillFormulas();
    public void set_fillFormulas(bool value);
    public bool get_removeDataOnSave();
    public void set_removeDataOnSave(bool value);
    public bool get_disableEdit();
    public void set_disableEdit(bool value);
    public bool get_preserveFormatting();
    public void set_preserveFormatting(bool value);
    public bool get_adjustColumnWidth();
    public void set_adjustColumnWidth(bool value);
    public bool get_intermediate();
    public void set_intermediate(bool value);
    public UInt32 get_connectionId();
    public void set_connectionId(UInt32 value);
    public UInt32 get_autoFormatId();
    public void set_autoFormatId(UInt32 value);
    public bool get_autoFormatIdSpecified();
    public void set_autoFormatIdSpecified(bool value);
    public bool get_applyNumberFormats();
    public void set_applyNumberFormats(bool value);
    public bool get_applyNumberFormatsSpecified();
    public void set_applyNumberFormatsSpecified(bool value);
    public bool get_applyBorderFormats();
    public void set_applyBorderFormats(bool value);
    public bool get_applyBorderFormatsSpecified();
    public void set_applyBorderFormatsSpecified(bool value);
    public bool get_applyFontFormats();
    public void set_applyFontFormats(bool value);
    public bool get_applyFontFormatsSpecified();
    public void set_applyFontFormatsSpecified(bool value);
    public bool get_applyPatternFormats();
    public void set_applyPatternFormats(bool value);
    public bool get_applyPatternFormatsSpecified();
    public void set_applyPatternFormatsSpecified(bool value);
    public bool get_applyAlignmentFormats();
    public void set_applyAlignmentFormats(bool value);
    public bool get_applyAlignmentFormatsSpecified();
    public void set_applyAlignmentFormatsSpecified(bool value);
    public bool get_applyWidthHeightFormats();
    public void set_applyWidthHeightFormats(bool value);
    public bool get_applyWidthHeightFormatsSpecified();
    public void set_applyWidthHeightFormatsSpecified(bool value);
}
[DebuggerStepThroughAttribute]
[DesignerCategoryAttribute("code")]
[XmlTypeAttribute]
[XmlRootAttribute]
public class NPOI.OpenXmlFormats.Spreadsheet.CT_QueryTableDeletedFields : object {
    private CT_DeletedField[] deletedFieldField;
    private UInt32 countField;
    private bool countFieldSpecified;
    [XmlElementAttribute("deletedField")]
public CT_DeletedField[] deletedField { get; public set; }
    [XmlAttributeAttribute]
public UInt32 count { get; public set; }
    [XmlIgnoreAttribute]
public bool countSpecified { get; public set; }
    public CT_DeletedField[] get_deletedField();
    public void set_deletedField(CT_DeletedField[] value);
    public UInt32 get_count();
    public void set_count(UInt32 value);
    public bool get_countSpecified();
    public void set_countSpecified(bool value);
}
[DebuggerStepThroughAttribute]
[DesignerCategoryAttribute("code")]
[XmlTypeAttribute]
[XmlRootAttribute]
public class NPOI.OpenXmlFormats.Spreadsheet.CT_QueryTableField : object {
    private CT_ExtensionList extLstField;
    private UInt32 idField;
    private string nameField;
    private bool dataBoundField;
    private bool rowNumbersField;
    private bool fillFormulasField;
    private bool clippedField;
    private UInt32 tableColumnIdField;
    public CT_ExtensionList extLst { get; public set; }
    [XmlAttributeAttribute]
public UInt32 id { get; public set; }
    [XmlAttributeAttribute]
public string name { get; public set; }
    [XmlAttributeAttribute]
[DefaultValueAttribute("True")]
public bool dataBound { get; public set; }
    [XmlAttributeAttribute]
[DefaultValueAttribute("False")]
public bool rowNumbers { get; public set; }
    [XmlAttributeAttribute]
[DefaultValueAttribute("False")]
public bool fillFormulas { get; public set; }
    [XmlAttributeAttribute]
[DefaultValueAttribute("False")]
public bool clipped { get; public set; }
    [XmlAttributeAttribute]
[DefaultValueAttribute("System.UInt32", "0")]
public UInt32 tableColumnId { get; public set; }
    public CT_ExtensionList get_extLst();
    public void set_extLst(CT_ExtensionList value);
    public UInt32 get_id();
    public void set_id(UInt32 value);
    public string get_name();
    public void set_name(string value);
    public bool get_dataBound();
    public void set_dataBound(bool value);
    public bool get_rowNumbers();
    public void set_rowNumbers(bool value);
    public bool get_fillFormulas();
    public void set_fillFormulas(bool value);
    public bool get_clipped();
    public void set_clipped(bool value);
    public UInt32 get_tableColumnId();
    public void set_tableColumnId(UInt32 value);
}
[DebuggerStepThroughAttribute]
[DesignerCategoryAttribute("code")]
[XmlTypeAttribute]
[XmlRootAttribute]
public class NPOI.OpenXmlFormats.Spreadsheet.CT_QueryTableFields : object {
    private List`1<CT_QueryTableField> queryTableFieldField;
    private UInt32 countField;
    [XmlElementAttribute("queryTableField")]
public List`1<CT_QueryTableField> queryTableField { get; public set; }
    [XmlAttributeAttribute]
[DefaultValueAttribute("System.UInt32", "0")]
public UInt32 count { get; public set; }
    public List`1<CT_QueryTableField> get_queryTableField();
    public void set_queryTableField(List`1<CT_QueryTableField> value);
    public UInt32 get_count();
    public void set_count(UInt32 value);
}
[DebuggerStepThroughAttribute]
[DesignerCategoryAttribute("code")]
[XmlTypeAttribute]
[XmlRootAttribute]
public class NPOI.OpenXmlFormats.Spreadsheet.CT_QueryTableRefresh : object {
    private CT_QueryTableFields queryTableFieldsField;
    private CT_QueryTableDeletedFields queryTableDeletedFieldsField;
    private CT_SortState sortStateField;
    private CT_ExtensionList extLstField;
    private bool preserveSortFilterLayoutField;
    private bool fieldIdWrappedField;
    private bool headersInLastRefreshField;
    private byte minimumVersionField;
    private UInt32 nextIdField;
    private UInt32 unboundColumnsLeftField;
    private UInt32 unboundColumnsRightField;
    public CT_QueryTableFields queryTableFields { get; public set; }
    public CT_QueryTableDeletedFields queryTableDeletedFields { get; public set; }
    public CT_SortState sortState { get; public set; }
    public CT_ExtensionList extLst { get; public set; }
    [XmlAttributeAttribute]
[DefaultValueAttribute("True")]
public bool preserveSortFilterLayout { get; public set; }
    [XmlAttributeAttribute]
[DefaultValueAttribute("False")]
public bool fieldIdWrapped { get; public set; }
    [XmlAttributeAttribute]
[DefaultValueAttribute("True")]
public bool headersInLastRefresh { get; public set; }
    [XmlAttributeAttribute]
[DefaultValueAttribute("System.Byte", "0")]
public byte minimumVersion { get; public set; }
    [XmlAttributeAttribute]
[DefaultValueAttribute("System.UInt32", "1")]
public UInt32 nextId { get; public set; }
    [XmlAttributeAttribute]
[DefaultValueAttribute("System.UInt32", "0")]
public UInt32 unboundColumnsLeft { get; public set; }
    [XmlAttributeAttribute]
[DefaultValueAttribute("System.UInt32", "0")]
public UInt32 unboundColumnsRight { get; public set; }
    public CT_QueryTableFields get_queryTableFields();
    public void set_queryTableFields(CT_QueryTableFields value);
    public CT_QueryTableDeletedFields get_queryTableDeletedFields();
    public void set_queryTableDeletedFields(CT_QueryTableDeletedFields value);
    public CT_SortState get_sortState();
    public void set_sortState(CT_SortState value);
    public CT_ExtensionList get_extLst();
    public void set_extLst(CT_ExtensionList value);
    public bool get_preserveSortFilterLayout();
    public void set_preserveSortFilterLayout(bool value);
    public bool get_fieldIdWrapped();
    public void set_fieldIdWrapped(bool value);
    public bool get_headersInLastRefresh();
    public void set_headersInLastRefresh(bool value);
    public byte get_minimumVersion();
    public void set_minimumVersion(byte value);
    public UInt32 get_nextId();
    public void set_nextId(UInt32 value);
    public UInt32 get_unboundColumnsLeft();
    public void set_unboundColumnsLeft(UInt32 value);
    public UInt32 get_unboundColumnsRight();
    public void set_unboundColumnsRight(UInt32 value);
}
[XmlTypeAttribute]
[XmlRootAttribute]
public class NPOI.OpenXmlFormats.Spreadsheet.CT_RangePr : object {
    private bool autoStartField;
    private bool autoEndField;
    private ST_GroupBy groupByField;
    private double startNumField;
    private bool startNumFieldSpecified;
    private double endNumField;
    private bool endNumFieldSpecified;
    private Nullable`1<DateTime> startDateField;
    private bool startDateFieldSpecified;
    private Nullable`1<DateTime> endDateField;
    private bool endDateFieldSpecified;
    private double groupIntervalField;
    [XmlAttributeAttribute]
[DefaultValueAttribute("True")]
public bool autoStart { get; public set; }
    [XmlAttributeAttribute]
[DefaultValueAttribute("True")]
public bool autoEnd { get; public set; }
    [XmlAttributeAttribute]
[DefaultValueAttribute("Mono.Cecil.CustomAttributeArgument")]
public ST_GroupBy groupBy { get; public set; }
    [XmlAttributeAttribute]
public double startNum { get; public set; }
    [XmlIgnoreAttribute]
public bool startNumSpecified { get; public set; }
    [XmlAttributeAttribute]
public double endNum { get; public set; }
    [XmlIgnoreAttribute]
public bool endNumSpecified { get; public set; }
    [XmlAttributeAttribute]
public Nullable`1<DateTime> startDate { get; public set; }
    [XmlIgnoreAttribute]
public bool startDateSpecified { get; public set; }
    [XmlAttributeAttribute]
public Nullable`1<DateTime> endDate { get; public set; }
    [XmlIgnoreAttribute]
public bool endDateSpecified { get; public set; }
    [XmlAttributeAttribute]
[DefaultValueAttribute("1")]
public double groupInterval { get; public set; }
    public static CT_RangePr Parse(XmlNode node, XmlNamespaceManager namespaceManager);
    internal void Write(StreamWriter sw, string nodeName);
    public bool get_autoStart();
    public void set_autoStart(bool value);
    public bool get_autoEnd();
    public void set_autoEnd(bool value);
    public ST_GroupBy get_groupBy();
    public void set_groupBy(ST_GroupBy value);
    public double get_startNum();
    public void set_startNum(double value);
    public bool get_startNumSpecified();
    public void set_startNumSpecified(bool value);
    public double get_endNum();
    public void set_endNum(double value);
    public bool get_endNumSpecified();
    public void set_endNumSpecified(bool value);
    public Nullable`1<DateTime> get_startDate();
    public void set_startDate(Nullable`1<DateTime> value);
    public bool get_startDateSpecified();
    public void set_startDateSpecified(bool value);
    public Nullable`1<DateTime> get_endDate();
    public void set_endDate(Nullable`1<DateTime> value);
    public bool get_endDateSpecified();
    public void set_endDateSpecified(bool value);
    public double get_groupInterval();
    public void set_groupInterval(double value);
}
[XmlTypeAttribute]
[XmlRootAttribute]
public class NPOI.OpenXmlFormats.Spreadsheet.CT_RangeSet : object {
    private UInt32 i1Field;
    private bool i1FieldSpecified;
    private UInt32 i2Field;
    private bool i2FieldSpecified;
    private UInt32 i3Field;
    private bool i3FieldSpecified;
    private UInt32 i4Field;
    private bool i4FieldSpecified;
    private string refField;
    private string nameField;
    private string sheetField;
    private string idField;
    [XmlAttributeAttribute]
public UInt32 i1 { get; public set; }
    [XmlIgnoreAttribute]
public bool i1Specified { get; public set; }
    [XmlAttributeAttribute]
public UInt32 i2 { get; public set; }
    [XmlIgnoreAttribute]
public bool i2Specified { get; public set; }
    [XmlAttributeAttribute]
public UInt32 i3 { get; public set; }
    [XmlIgnoreAttribute]
public bool i3Specified { get; public set; }
    [XmlAttributeAttribute]
public UInt32 i4 { get; public set; }
    [XmlIgnoreAttribute]
public bool i4Specified { get; public set; }
    [XmlAttributeAttribute]
public string ref { get; public set; }
    [XmlAttributeAttribute]
public string name { get; public set; }
    [XmlAttributeAttribute]
public string sheet { get; public set; }
    [XmlAttributeAttribute]
public string id { get; public set; }
    public static CT_RangeSet Parse(XmlNode node, XmlNamespaceManager namespaceManager);
    internal void Write(StreamWriter sw, string nodeName);
    public UInt32 get_i1();
    public void set_i1(UInt32 value);
    public bool get_i1Specified();
    public void set_i1Specified(bool value);
    public UInt32 get_i2();
    public void set_i2(UInt32 value);
    public bool get_i2Specified();
    public void set_i2Specified(bool value);
    public UInt32 get_i3();
    public void set_i3(UInt32 value);
    public bool get_i3Specified();
    public void set_i3Specified(bool value);
    public UInt32 get_i4();
    public void set_i4(UInt32 value);
    public bool get_i4Specified();
    public void set_i4Specified(bool value);
    public string get_ref();
    public void set_ref(string value);
    public string get_name();
    public void set_name(string value);
    public string get_sheet();
    public void set_sheet(string value);
    public string get_id();
    public void set_id(string value);
}
[XmlTypeAttribute]
[XmlRootAttribute]
public class NPOI.OpenXmlFormats.Spreadsheet.CT_RangeSets : object {
    private List`1<CT_RangeSet> rangeSetField;
    private UInt32 countField;
    private bool countFieldSpecified;
    [XmlElementAttribute("rangeSet")]
public List`1<CT_RangeSet> rangeSet { get; public set; }
    [XmlAttributeAttribute]
public UInt32 count { get; public set; }
    [XmlIgnoreAttribute]
public bool countSpecified { get; public set; }
    public static CT_RangeSets Parse(XmlNode node, XmlNamespaceManager namespaceManager);
    internal void Write(StreamWriter sw, string nodeName);
    public List`1<CT_RangeSet> get_rangeSet();
    public void set_rangeSet(List`1<CT_RangeSet> value);
    public UInt32 get_count();
    public void set_count(UInt32 value);
    public bool get_countSpecified();
    public void set_countSpecified(bool value);
}
[XmlTypeAttribute]
public class NPOI.OpenXmlFormats.Spreadsheet.CT_RElt : object {
    private CT_RPrElt rPrField;
    private string tField;
    [XmlElementAttribute("rPr")]
public CT_RPrElt rPr { get; public set; }
    [XmlElementAttribute("t")]
public string t { get; public set; }
    public static CT_RElt Parse(XmlNode node, XmlNamespaceManager namespaceManager);
    internal void Write(StreamWriter sw, string nodeName);
    public CT_RPrElt AddNewRPr();
    public CT_RPrElt get_rPr();
    public void set_rPr(CT_RPrElt value);
    public string get_t();
    public void set_t(string value);
    public bool isSetRPr();
}
public class NPOI.OpenXmlFormats.Spreadsheet.CT_Reviewed : object {
    private UInt32 rIdField;
    public UInt32 rId { get; public set; }
    public UInt32 get_rId();
    public void set_rId(UInt32 value);
}
public class NPOI.OpenXmlFormats.Spreadsheet.CT_ReviewedRevisions : object {
    private List`1<CT_Reviewed> reviewedField;
    private UInt32 countField;
    private bool countFieldSpecified;
    public List`1<CT_Reviewed> reviewed { get; public set; }
    public UInt32 count { get; public set; }
    [XmlIgnoreAttribute]
public bool countSpecified { get; public set; }
    public List`1<CT_Reviewed> get_reviewed();
    public void set_reviewed(List`1<CT_Reviewed> value);
    public UInt32 get_count();
    public void set_count(UInt32 value);
    public bool get_countSpecified();
    public void set_countSpecified(bool value);
}
public class NPOI.OpenXmlFormats.Spreadsheet.CT_RevisionAutoFormatting : object {
    private UInt32 sheetIdField;
    private UInt32 autoFormatIdField;
    private bool autoFormatIdFieldSpecified;
    private bool applyNumberFormatsField;
    private bool applyNumberFormatsFieldSpecified;
    private bool applyBorderFormatsField;
    private bool applyBorderFormatsFieldSpecified;
    private bool applyFontFormatsField;
    private bool applyFontFormatsFieldSpecified;
    private bool applyPatternFormatsField;
    private bool applyPatternFormatsFieldSpecified;
    private bool applyAlignmentFormatsField;
    private bool applyAlignmentFormatsFieldSpecified;
    private bool applyWidthHeightFormatsField;
    private bool applyWidthHeightFormatsFieldSpecified;
    private string refField;
    public UInt32 sheetId { get; public set; }
    public UInt32 autoFormatId { get; public set; }
    [XmlIgnoreAttribute]
public bool autoFormatIdSpecified { get; public set; }
    public bool applyNumberFormats { get; public set; }
    [XmlIgnoreAttribute]
public bool applyNumberFormatsSpecified { get; public set; }
    public bool applyBorderFormats { get; public set; }
    [XmlIgnoreAttribute]
public bool applyBorderFormatsSpecified { get; public set; }
    public bool applyFontFormats { get; public set; }
    [XmlIgnoreAttribute]
public bool applyFontFormatsSpecified { get; public set; }
    public bool applyPatternFormats { get; public set; }
    [XmlIgnoreAttribute]
public bool applyPatternFormatsSpecified { get; public set; }
    public bool applyAlignmentFormats { get; public set; }
    [XmlIgnoreAttribute]
public bool applyAlignmentFormatsSpecified { get; public set; }
    public bool applyWidthHeightFormats { get; public set; }
    [XmlIgnoreAttribute]
public bool applyWidthHeightFormatsSpecified { get; public set; }
    public string ref { get; public set; }
    public UInt32 get_sheetId();
    public void set_sheetId(UInt32 value);
    public UInt32 get_autoFormatId();
    public void set_autoFormatId(UInt32 value);
    public bool get_autoFormatIdSpecified();
    public void set_autoFormatIdSpecified(bool value);
    public bool get_applyNumberFormats();
    public void set_applyNumberFormats(bool value);
    public bool get_applyNumberFormatsSpecified();
    public void set_applyNumberFormatsSpecified(bool value);
    public bool get_applyBorderFormats();
    public void set_applyBorderFormats(bool value);
    public bool get_applyBorderFormatsSpecified();
    public void set_applyBorderFormatsSpecified(bool value);
    public bool get_applyFontFormats();
    public void set_applyFontFormats(bool value);
    public bool get_applyFontFormatsSpecified();
    public void set_applyFontFormatsSpecified(bool value);
    public bool get_applyPatternFormats();
    public void set_applyPatternFormats(bool value);
    public bool get_applyPatternFormatsSpecified();
    public void set_applyPatternFormatsSpecified(bool value);
    public bool get_applyAlignmentFormats();
    public void set_applyAlignmentFormats(bool value);
    public bool get_applyAlignmentFormatsSpecified();
    public void set_applyAlignmentFormatsSpecified(bool value);
    public bool get_applyWidthHeightFormats();
    public void set_applyWidthHeightFormats(bool value);
    public bool get_applyWidthHeightFormatsSpecified();
    public void set_applyWidthHeightFormatsSpecified(bool value);
    public string get_ref();
    public void set_ref(string value);
}
public class NPOI.OpenXmlFormats.Spreadsheet.CT_RevisionCellChange : object {
    private CT_Cell ocField;
    private CT_Cell ncField;
    private CT_Dxf odxfField;
    private CT_Dxf ndxfField;
    private CT_ExtensionList extLstField;
    private UInt32 rIdField;
    private bool uaField;
    private bool raField;
    private UInt32 sIdField;
    private bool odxf1Field;
    private bool xfDxfField;
    private bool sField;
    private bool dxfField;
    private UInt32 numFmtIdField;
    private bool numFmtIdFieldSpecified;
    private bool quotePrefixField;
    private bool oldQuotePrefixField;
    private bool phField;
    private bool oldPhField;
    private bool endOfListFormulaUpdateField;
    public CT_Cell oc { get; public set; }
    public CT_Cell nc { get; public set; }
    public CT_Dxf odxf { get; public set; }
    public CT_Dxf ndxf { get; public set; }
    public CT_ExtensionList extLst { get; public set; }
    public UInt32 rId { get; public set; }
    [DefaultValueAttribute("False")]
public bool ua { get; public set; }
    [DefaultValueAttribute("False")]
public bool ra { get; public set; }
    public UInt32 sId { get; public set; }
    [DefaultValueAttribute("False")]
public bool odxf1 { get; public set; }
    [DefaultValueAttribute("False")]
public bool xfDxf { get; public set; }
    [DefaultValueAttribute("False")]
public bool s { get; public set; }
    [DefaultValueAttribute("False")]
public bool dxf { get; public set; }
    public UInt32 numFmtId { get; public set; }
    [XmlIgnoreAttribute]
public bool numFmtIdSpecified { get; public set; }
    [DefaultValueAttribute("False")]
public bool quotePrefix { get; public set; }
    [DefaultValueAttribute("False")]
public bool oldQuotePrefix { get; public set; }
    [DefaultValueAttribute("False")]
public bool ph { get; public set; }
    [DefaultValueAttribute("False")]
public bool oldPh { get; public set; }
    [DefaultValueAttribute("False")]
public bool endOfListFormulaUpdate { get; public set; }
    public CT_Cell get_oc();
    public void set_oc(CT_Cell value);
    public CT_Cell get_nc();
    public void set_nc(CT_Cell value);
    public CT_Dxf get_odxf();
    public void set_odxf(CT_Dxf value);
    public CT_Dxf get_ndxf();
    public void set_ndxf(CT_Dxf value);
    public CT_ExtensionList get_extLst();
    public void set_extLst(CT_ExtensionList value);
    public UInt32 get_rId();
    public void set_rId(UInt32 value);
    public bool get_ua();
    public void set_ua(bool value);
    public bool get_ra();
    public void set_ra(bool value);
    public UInt32 get_sId();
    public void set_sId(UInt32 value);
    public bool get_odxf1();
    public void set_odxf1(bool value);
    public bool get_xfDxf();
    public void set_xfDxf(bool value);
    public bool get_s();
    public void set_s(bool value);
    public bool get_dxf();
    public void set_dxf(bool value);
    public UInt32 get_numFmtId();
    public void set_numFmtId(UInt32 value);
    public bool get_numFmtIdSpecified();
    public void set_numFmtIdSpecified(bool value);
    public bool get_quotePrefix();
    public void set_quotePrefix(bool value);
    public bool get_oldQuotePrefix();
    public void set_oldQuotePrefix(bool value);
    public bool get_ph();
    public void set_ph(bool value);
    public bool get_oldPh();
    public void set_oldPh(bool value);
    public bool get_endOfListFormulaUpdate();
    public void set_endOfListFormulaUpdate(bool value);
}
public class NPOI.OpenXmlFormats.Spreadsheet.CT_RevisionComment : object {
    private UInt32 sheetIdField;
    private string cellField;
    private string guidField;
    private ST_RevisionAction actionField;
    private bool alwaysShowField;
    private bool oldField;
    private bool hiddenRowField;
    private bool hiddenColumnField;
    private string authorField;
    private UInt32 oldLengthField;
    private UInt32 newLengthField;
    public UInt32 sheetId { get; public set; }
    public string cell { get; public set; }
    public string guid { get; public set; }
    [DefaultValueAttribute("Mono.Cecil.CustomAttributeArgument")]
public ST_RevisionAction action { get; public set; }
    [DefaultValueAttribute("False")]
public bool alwaysShow { get; public set; }
    [DefaultValueAttribute("False")]
public bool old { get; public set; }
    [DefaultValueAttribute("False")]
public bool hiddenRow { get; public set; }
    [DefaultValueAttribute("False")]
public bool hiddenColumn { get; public set; }
    public string author { get; public set; }
    [DefaultValueAttribute("System.UInt32", "0")]
public UInt32 oldLength { get; public set; }
    [DefaultValueAttribute("System.UInt32", "0")]
public UInt32 newLength { get; public set; }
    public UInt32 get_sheetId();
    public void set_sheetId(UInt32 value);
    public string get_cell();
    public void set_cell(string value);
    public string get_guid();
    public void set_guid(string value);
    public ST_RevisionAction get_action();
    public void set_action(ST_RevisionAction value);
    public bool get_alwaysShow();
    public void set_alwaysShow(bool value);
    public bool get_old();
    public void set_old(bool value);
    public bool get_hiddenRow();
    public void set_hiddenRow(bool value);
    public bool get_hiddenColumn();
    public void set_hiddenColumn(bool value);
    public string get_author();
    public void set_author(string value);
    public UInt32 get_oldLength();
    public void set_oldLength(UInt32 value);
    public UInt32 get_newLength();
    public void set_newLength(UInt32 value);
}
public class NPOI.OpenXmlFormats.Spreadsheet.CT_RevisionConflict : object {
    private UInt32 rIdField;
    private bool uaField;
    private bool raField;
    private UInt32 sheetIdField;
    private bool sheetIdFieldSpecified;
    public UInt32 rId { get; public set; }
    [DefaultValueAttribute("False")]
public bool ua { get; public set; }
    [DefaultValueAttribute("False")]
public bool ra { get; public set; }
    public UInt32 sheetId { get; public set; }
    [XmlIgnoreAttribute]
public bool sheetIdSpecified { get; public set; }
    public UInt32 get_rId();
    public void set_rId(UInt32 value);
    public bool get_ua();
    public void set_ua(bool value);
    public bool get_ra();
    public void set_ra(bool value);
    public UInt32 get_sheetId();
    public void set_sheetId(UInt32 value);
    public bool get_sheetIdSpecified();
    public void set_sheetIdSpecified(bool value);
}
public class NPOI.OpenXmlFormats.Spreadsheet.CT_RevisionCustomView : object {
    private string guidField;
    private ST_RevisionAction actionField;
    public string guid { get; public set; }
    public ST_RevisionAction action { get; public set; }
    public string get_guid();
    public void set_guid(string value);
    public ST_RevisionAction get_action();
    public void set_action(ST_RevisionAction value);
}
public class NPOI.OpenXmlFormats.Spreadsheet.CT_RevisionDefinedName : object {
    private string formulaField;
    private string oldFormulaField;
    private CT_ExtensionList extLstField;
    private UInt32 rIdField;
    private bool uaField;
    private bool raField;
    private UInt32 localSheetIdField;
    private bool localSheetIdFieldSpecified;
    private bool customViewField;
    private string nameField;
    private bool functionField;
    private bool oldFunctionField;
    private byte functionGroupIdField;
    private bool functionGroupIdFieldSpecified;
    private byte oldFunctionGroupIdField;
    private bool oldFunctionGroupIdFieldSpecified;
    private byte shortcutKeyField;
    private bool shortcutKeyFieldSpecified;
    private byte oldShortcutKeyField;
    private bool oldShortcutKeyFieldSpecified;
    private bool hiddenField;
    private bool oldHiddenField;
    private string customMenuField;
    private string oldCustomMenuField;
    private string descriptionField;
    private string oldDescriptionField;
    private string helpField;
    private string oldHelpField;
    private string statusBarField;
    private string oldStatusBarField;
    private string commentField;
    private string oldCommentField;
    public string formula { get; public set; }
    public string oldFormula { get; public set; }
    public CT_ExtensionList extLst { get; public set; }
    public UInt32 rId { get; public set; }
    [DefaultValueAttribute("False")]
public bool ua { get; public set; }
    [DefaultValueAttribute("False")]
public bool ra { get; public set; }
    public UInt32 localSheetId { get; public set; }
    [XmlIgnoreAttribute]
public bool localSheetIdSpecified { get; public set; }
    [DefaultValueAttribute("False")]
public bool customView { get; public set; }
    public string name { get; public set; }
    [DefaultValueAttribute("False")]
public bool function { get; public set; }
    [DefaultValueAttribute("False")]
public bool oldFunction { get; public set; }
    public byte functionGroupId { get; public set; }
    [XmlIgnoreAttribute]
public bool functionGroupIdSpecified { get; public set; }
    public byte oldFunctionGroupId { get; public set; }
    [XmlIgnoreAttribute]
public bool oldFunctionGroupIdSpecified { get; public set; }
    public byte shortcutKey { get; public set; }
    [XmlIgnoreAttribute]
public bool shortcutKeySpecified { get; public set; }
    public byte oldShortcutKey { get; public set; }
    [XmlIgnoreAttribute]
public bool oldShortcutKeySpecified { get; public set; }
    [DefaultValueAttribute("False")]
public bool hidden { get; public set; }
    [DefaultValueAttribute("False")]
public bool oldHidden { get; public set; }
    public string customMenu { get; public set; }
    public string oldCustomMenu { get; public set; }
    public string description { get; public set; }
    public string oldDescription { get; public set; }
    public string help { get; public set; }
    public string oldHelp { get; public set; }
    public string statusBar { get; public set; }
    public string oldStatusBar { get; public set; }
    public string comment { get; public set; }
    public string oldComment { get; public set; }
    public string get_formula();
    public void set_formula(string value);
    public string get_oldFormula();
    public void set_oldFormula(string value);
    public CT_ExtensionList get_extLst();
    public void set_extLst(CT_ExtensionList value);
    public UInt32 get_rId();
    public void set_rId(UInt32 value);
    public bool get_ua();
    public void set_ua(bool value);
    public bool get_ra();
    public void set_ra(bool value);
    public UInt32 get_localSheetId();
    public void set_localSheetId(UInt32 value);
    public bool get_localSheetIdSpecified();
    public void set_localSheetIdSpecified(bool value);
    public bool get_customView();
    public void set_customView(bool value);
    public string get_name();
    public void set_name(string value);
    public bool get_function();
    public void set_function(bool value);
    public bool get_oldFunction();
    public void set_oldFunction(bool value);
    public byte get_functionGroupId();
    public void set_functionGroupId(byte value);
    public bool get_functionGroupIdSpecified();
    public void set_functionGroupIdSpecified(bool value);
    public byte get_oldFunctionGroupId();
    public void set_oldFunctionGroupId(byte value);
    public bool get_oldFunctionGroupIdSpecified();
    public void set_oldFunctionGroupIdSpecified(bool value);
    public byte get_shortcutKey();
    public void set_shortcutKey(byte value);
    public bool get_shortcutKeySpecified();
    public void set_shortcutKeySpecified(bool value);
    public byte get_oldShortcutKey();
    public void set_oldShortcutKey(byte value);
    public bool get_oldShortcutKeySpecified();
    public void set_oldShortcutKeySpecified(bool value);
    public bool get_hidden();
    public void set_hidden(bool value);
    public bool get_oldHidden();
    public void set_oldHidden(bool value);
    public string get_customMenu();
    public void set_customMenu(string value);
    public string get_oldCustomMenu();
    public void set_oldCustomMenu(string value);
    public string get_description();
    public void set_description(string value);
    public string get_oldDescription();
    public void set_oldDescription(string value);
    public string get_help();
    public void set_help(string value);
    public string get_oldHelp();
    public void set_oldHelp(string value);
    public string get_statusBar();
    public void set_statusBar(string value);
    public string get_oldStatusBar();
    public void set_oldStatusBar(string value);
    public string get_comment();
    public void set_comment(string value);
    public string get_oldComment();
    public void set_oldComment(string value);
}
public class NPOI.OpenXmlFormats.Spreadsheet.CT_RevisionFormatting : object {
    private CT_Dxf dxfField;
    private CT_ExtensionList extLstField;
    private UInt32 sheetIdField;
    private bool xfDxfField;
    private bool sField;
    private List`1<string> sqrefField;
    private UInt32 startField;
    private bool startFieldSpecified;
    private UInt32 lengthField;
    private bool lengthFieldSpecified;
    public CT_Dxf dxf { get; public set; }
    public CT_ExtensionList extLst { get; public set; }
    public UInt32 sheetId { get; public set; }
    [DefaultValueAttribute("False")]
public bool xfDxf { get; public set; }
    [DefaultValueAttribute("False")]
public bool s { get; public set; }
    public List`1<string> sqref { get; public set; }
    public UInt32 start { get; public set; }
    [XmlIgnoreAttribute]
public bool startSpecified { get; public set; }
    public UInt32 length { get; public set; }
    [XmlIgnoreAttribute]
public bool lengthSpecified { get; public set; }
    public CT_Dxf get_dxf();
    public void set_dxf(CT_Dxf value);
    public CT_ExtensionList get_extLst();
    public void set_extLst(CT_ExtensionList value);
    public UInt32 get_sheetId();
    public void set_sheetId(UInt32 value);
    public bool get_xfDxf();
    public void set_xfDxf(bool value);
    public bool get_s();
    public void set_s(bool value);
    public List`1<string> get_sqref();
    public void set_sqref(List`1<string> value);
    public UInt32 get_start();
    public void set_start(UInt32 value);
    public bool get_startSpecified();
    public void set_startSpecified(bool value);
    public UInt32 get_length();
    public void set_length(UInt32 value);
    public bool get_lengthSpecified();
    public void set_lengthSpecified(bool value);
}
public class NPOI.OpenXmlFormats.Spreadsheet.CT_RevisionHeader : object {
    private CT_SheetIdMap sheetIdMapField;
    private CT_ReviewedRevisions reviewedListField;
    private CT_ExtensionList extLstField;
    private string guidField;
    private DateTime dateTimeField;
    private UInt32 maxSheetIdField;
    private string userNameField;
    private string idField;
    private UInt32 minRIdField;
    private bool minRIdFieldSpecified;
    private UInt32 maxRIdField;
    private bool maxRIdFieldSpecified;
    public CT_SheetIdMap sheetIdMap { get; public set; }
    public CT_ReviewedRevisions reviewedList { get; public set; }
    public CT_ExtensionList extLst { get; public set; }
    public string guid { get; public set; }
    public DateTime dateTime { get; public set; }
    public UInt32 maxSheetId { get; public set; }
    public string userName { get; public set; }
    [XmlAttributeAttribute]
public string id { get; public set; }
    public UInt32 minRId { get; public set; }
    [XmlIgnoreAttribute]
public bool minRIdSpecified { get; public set; }
    public UInt32 maxRId { get; public set; }
    [XmlIgnoreAttribute]
public bool maxRIdSpecified { get; public set; }
    public CT_SheetIdMap get_sheetIdMap();
    public void set_sheetIdMap(CT_SheetIdMap value);
    public CT_ReviewedRevisions get_reviewedList();
    public void set_reviewedList(CT_ReviewedRevisions value);
    public CT_ExtensionList get_extLst();
    public void set_extLst(CT_ExtensionList value);
    public string get_guid();
    public void set_guid(string value);
    public DateTime get_dateTime();
    public void set_dateTime(DateTime value);
    public UInt32 get_maxSheetId();
    public void set_maxSheetId(UInt32 value);
    public string get_userName();
    public void set_userName(string value);
    public string get_id();
    public void set_id(string value);
    public UInt32 get_minRId();
    public void set_minRId(UInt32 value);
    public bool get_minRIdSpecified();
    public void set_minRIdSpecified(bool value);
    public UInt32 get_maxRId();
    public void set_maxRId(UInt32 value);
    public bool get_maxRIdSpecified();
    public void set_maxRIdSpecified(bool value);
}
public class NPOI.OpenXmlFormats.Spreadsheet.CT_RevisionHeaders : object {
    private List`1<CT_RevisionHeader> headerField;
    private string guidField;
    private string lastGuidField;
    private bool sharedField;
    private bool diskRevisionsField;
    private bool historyField;
    private bool trackRevisionsField;
    private bool exclusiveField;
    private UInt32 revisionIdField;
    private int versionField;
    private bool keepChangeHistoryField;
    private bool protectedField;
    private UInt32 preserveHistoryField;
    public List`1<CT_RevisionHeader> header { get; public set; }
    public string guid { get; public set; }
    public string lastGuid { get; public set; }
    [DefaultValueAttribute("True")]
public bool shared { get; public set; }
    [DefaultValueAttribute("False")]
public bool diskRevisions { get; public set; }
    [DefaultValueAttribute("True")]
public bool history { get; public set; }
    [DefaultValueAttribute("True")]
public bool trackRevisions { get; public set; }
    [DefaultValueAttribute("False")]
public bool exclusive { get; public set; }
    [DefaultValueAttribute("System.UInt32", "0")]
public UInt32 revisionId { get; public set; }
    [DefaultValueAttribute("1")]
public int version { get; public set; }
    [DefaultValueAttribute("True")]
public bool keepChangeHistory { get; public set; }
    [DefaultValueAttribute("False")]
public bool protected { get; public set; }
    [DefaultValueAttribute("System.UInt32", "30")]
public UInt32 preserveHistory { get; public set; }
    public List`1<CT_RevisionHeader> get_header();
    public void set_header(List`1<CT_RevisionHeader> value);
    public string get_guid();
    public void set_guid(string value);
    public string get_lastGuid();
    public void set_lastGuid(string value);
    public bool get_shared();
    public void set_shared(bool value);
    public bool get_diskRevisions();
    public void set_diskRevisions(bool value);
    public bool get_history();
    public void set_history(bool value);
    public bool get_trackRevisions();
    public void set_trackRevisions(bool value);
    public bool get_exclusive();
    public void set_exclusive(bool value);
    public UInt32 get_revisionId();
    public void set_revisionId(UInt32 value);
    public int get_version();
    public void set_version(int value);
    public bool get_keepChangeHistory();
    public void set_keepChangeHistory(bool value);
    public bool get_protected();
    public void set_protected(bool value);
    public UInt32 get_preserveHistory();
    public void set_preserveHistory(UInt32 value);
}
public class NPOI.OpenXmlFormats.Spreadsheet.CT_RevisionInsertSheet : object {
    private UInt32 rIdField;
    private bool uaField;
    private bool raField;
    private UInt32 sheetIdField;
    private string nameField;
    private UInt32 sheetPositionField;
    public UInt32 rId { get; public set; }
    [DefaultValueAttribute("False")]
public bool ua { get; public set; }
    [DefaultValueAttribute("False")]
public bool ra { get; public set; }
    public UInt32 sheetId { get; public set; }
    public string name { get; public set; }
    public UInt32 sheetPosition { get; public set; }
    public UInt32 get_rId();
    public void set_rId(UInt32 value);
    public bool get_ua();
    public void set_ua(bool value);
    public bool get_ra();
    public void set_ra(bool value);
    public UInt32 get_sheetId();
    public void set_sheetId(UInt32 value);
    public string get_name();
    public void set_name(string value);
    public UInt32 get_sheetPosition();
    public void set_sheetPosition(UInt32 value);
}
public class NPOI.OpenXmlFormats.Spreadsheet.CT_RevisionMove : object {
    private List`1<object> itemsField;
    private UInt32 rIdField;
    private bool uaField;
    private bool raField;
    private UInt32 sheetIdField;
    private string sourceField;
    private string destinationField;
    private UInt32 sourceSheetIdField;
    public List`1<object> Items { get; public set; }
    public UInt32 rId { get; public set; }
    [DefaultValueAttribute("False")]
public bool ua { get; public set; }
    [DefaultValueAttribute("False")]
public bool ra { get; public set; }
    public UInt32 sheetId { get; public set; }
    public string source { get; public set; }
    public string destination { get; public set; }
    [DefaultValueAttribute("System.UInt32", "0")]
public UInt32 sourceSheetId { get; public set; }
    public List`1<object> get_Items();
    public void set_Items(List`1<object> value);
    public UInt32 get_rId();
    public void set_rId(UInt32 value);
    public bool get_ua();
    public void set_ua(bool value);
    public bool get_ra();
    public void set_ra(bool value);
    public UInt32 get_sheetId();
    public void set_sheetId(UInt32 value);
    public string get_source();
    public void set_source(string value);
    public string get_destination();
    public void set_destination(string value);
    public UInt32 get_sourceSheetId();
    public void set_sourceSheetId(UInt32 value);
}
public class NPOI.OpenXmlFormats.Spreadsheet.CT_RevisionQueryTableField : object {
    private UInt32 sheetIdField;
    private string refField;
    private UInt32 fieldIdField;
    public UInt32 sheetId { get; public set; }
    public string ref { get; public set; }
    public UInt32 fieldId { get; public set; }
    public UInt32 get_sheetId();
    public void set_sheetId(UInt32 value);
    public string get_ref();
    public void set_ref(string value);
    public UInt32 get_fieldId();
    public void set_fieldId(UInt32 value);
}
public class NPOI.OpenXmlFormats.Spreadsheet.CT_RevisionRowColumn : object {
    private List`1<object> itemsField;
    private UInt32 rIdField;
    private bool uaField;
    private bool raField;
    private UInt32 sIdField;
    private bool eolField;
    private string refField;
    private ST_rwColActionType actionField;
    private bool edgeField;
    public List`1<object> Items { get; public set; }
    public UInt32 rId { get; public set; }
    [DefaultValueAttribute("False")]
public bool ua { get; public set; }
    [DefaultValueAttribute("False")]
public bool ra { get; public set; }
    public UInt32 sId { get; public set; }
    [DefaultValueAttribute("False")]
public bool eol { get; public set; }
    public string ref { get; public set; }
    public ST_rwColActionType action { get; public set; }
    [DefaultValueAttribute("False")]
public bool edge { get; public set; }
    public List`1<object> get_Items();
    public void set_Items(List`1<object> value);
    public UInt32 get_rId();
    public void set_rId(UInt32 value);
    public bool get_ua();
    public void set_ua(bool value);
    public bool get_ra();
    public void set_ra(bool value);
    public UInt32 get_sId();
    public void set_sId(UInt32 value);
    public bool get_eol();
    public void set_eol(bool value);
    public string get_ref();
    public void set_ref(string value);
    public ST_rwColActionType get_action();
    public void set_action(ST_rwColActionType value);
    public bool get_edge();
    public void set_edge(bool value);
}
public class NPOI.OpenXmlFormats.Spreadsheet.CT_Revisions : object {
    private List`1<object> itemsField;
    public List`1<object> Items { get; public set; }
    public List`1<object> get_Items();
    public void set_Items(List`1<object> value);
}
public class NPOI.OpenXmlFormats.Spreadsheet.CT_RevisionSheetRename : object {
    private CT_ExtensionList extLstField;
    private UInt32 rIdField;
    private bool uaField;
    private bool raField;
    private UInt32 sheetIdField;
    private string oldNameField;
    private string newNameField;
    public CT_ExtensionList extLst { get; public set; }
    public UInt32 rId { get; public set; }
    [DefaultValueAttribute("False")]
public bool ua { get; public set; }
    [DefaultValueAttribute("False")]
public bool ra { get; public set; }
    public UInt32 sheetId { get; public set; }
    public string oldName { get; public set; }
    public string newName { get; public set; }
    public CT_ExtensionList get_extLst();
    public void set_extLst(CT_ExtensionList value);
    public UInt32 get_rId();
    public void set_rId(UInt32 value);
    public bool get_ua();
    public void set_ua(bool value);
    public bool get_ra();
    public void set_ra(bool value);
    public UInt32 get_sheetId();
    public void set_sheetId(UInt32 value);
    public string get_oldName();
    public void set_oldName(string value);
    public string get_newName();
    public void set_newName(string value);
}
[XmlTypeAttribute]
public class NPOI.OpenXmlFormats.Spreadsheet.CT_RgbColor : object {
    private Byte[] rgbField;
    [XmlAttributeAttribute]
public Byte[] rgb { get; public set; }
    public static CT_RgbColor Parse(XmlNode node, XmlNamespaceManager namespaceManager);
    internal void Write(StreamWriter sw, string nodeName);
    public Byte[] get_rgb();
    public void set_rgb(Byte[] value);
}
[XmlTypeAttribute]
public class NPOI.OpenXmlFormats.Spreadsheet.CT_Row : object {
    private List`1<CT_Cell> cField;
    private CT_ExtensionList extLstField;
    private UInt32 rField;
    private string spansField;
    private UInt32 sField;
    private bool customFormatField;
    private double htField;
    private bool hiddenField;
    private bool customHeightField;
    private byte outlineLevelField;
    private bool collapsedField;
    private bool thickTopField;
    private bool thickBotField;
    private bool phField;
    private double dyDescentField;
    [XmlElementAttribute("c")]
public List`1<CT_Cell> c { get; public set; }
    [XmlElementAttribute("extLst")]
public CT_ExtensionList extLst { get; public set; }
    [XmlAttributeAttribute("r")]
public UInt32 r { get; public set; }
    [XmlAttributeAttribute]
public string spans { get; public set; }
    [XmlAttributeAttribute]
public UInt32 s { get; public set; }
    [XmlAttributeAttribute]
public bool customFormat { get; public set; }
    [XmlAttributeAttribute]
public double ht { get; public set; }
    [XmlAttributeAttribute]
public bool hidden { get; public set; }
    [XmlAttributeAttribute]
public bool customHeight { get; public set; }
    [DefaultValueAttribute("System.Byte", "0")]
[XmlAttributeAttribute]
public byte outlineLevel { get; public set; }
    [XmlAttributeAttribute]
public bool collapsed { get; public set; }
    [DefaultValueAttribute("False")]
[XmlAttributeAttribute]
public bool thickTop { get; public set; }
    [DefaultValueAttribute("False")]
[XmlAttributeAttribute]
public bool thickBot { get; public set; }
    [DefaultValueAttribute("False")]
[XmlAttributeAttribute]
public bool ph { get; public set; }
    public static CT_Row Parse(XmlNode node, XmlNamespaceManager namespaceManager);
    public bool IsSetR();
    internal void Write(StreamWriter sw, string nodeName);
    public void Set(CT_Row row);
    public CT_Cell AddNewC();
    public void UnsetCollapsed();
    public void UnsetS();
    public void UnsetCustomFormat();
    public bool IsSetHidden();
    public bool IsSetCollapsed();
    public bool IsSetHt();
    public void UnsetHt();
    public bool IsSetCustomHeight();
    public void UnsetCustomHeight();
    public bool IsSetS();
    public void UnsetHidden();
    public int SizeOfCArray();
    public CT_Cell GetCArray(int index);
    public void SetCArray(CT_Cell[] array);
    public List`1<CT_Cell> get_c();
    public void set_c(List`1<CT_Cell> value);
    public CT_ExtensionList get_extLst();
    public void set_extLst(CT_ExtensionList value);
    public UInt32 get_r();
    public void set_r(UInt32 value);
    public string get_spans();
    public void set_spans(string value);
    public UInt32 get_s();
    public void set_s(UInt32 value);
    public bool get_customFormat();
    public void set_customFormat(bool value);
    public double get_ht();
    public void set_ht(double value);
    public bool get_hidden();
    public void set_hidden(bool value);
    public bool get_customHeight();
    public void set_customHeight(bool value);
    public byte get_outlineLevel();
    public void set_outlineLevel(byte value);
    public bool get_collapsed();
    public void set_collapsed(bool value);
    public bool get_thickTop();
    public void set_thickTop(bool value);
    public bool get_thickBot();
    public void set_thickBot(bool value);
    public bool get_ph();
    public void set_ph(bool value);
}
[XmlTypeAttribute]
[XmlRootAttribute]
public class NPOI.OpenXmlFormats.Spreadsheet.CT_RowFields : object {
    private List`1<CT_Field> fieldField;
    private UInt32 countField;
    [XmlElementAttribute("field")]
public List`1<CT_Field> field { get; public set; }
    [XmlAttributeAttribute]
[DefaultValueAttribute("System.UInt32", "0")]
public UInt32 count { get; public set; }
    public static CT_RowFields Parse(XmlNode node, XmlNamespaceManager namespaceManager);
    internal void Write(StreamWriter sw, string nodeName);
    public List`1<CT_Field> get_field();
    public void set_field(List`1<CT_Field> value);
    public UInt32 get_count();
    public void set_count(UInt32 value);
    public CT_Field AddNewField();
    public UInt32 SizeOfFieldArray();
    public List`1<CT_Field> GetFieldArray();
    public CT_Field GetFieldArray(int p);
}
[XmlTypeAttribute]
[XmlRootAttribute]
public class NPOI.OpenXmlFormats.Spreadsheet.CT_RowHierarchiesUsage : object {
    private List`1<CT_HierarchyUsage> rowHierarchyUsageField;
    private UInt32 countField;
    private bool countFieldSpecified;
    [XmlElementAttribute("rowHierarchyUsage")]
public List`1<CT_HierarchyUsage> rowHierarchyUsage { get; public set; }
    [XmlAttributeAttribute]
public UInt32 count { get; public set; }
    [XmlIgnoreAttribute]
public bool countSpecified { get; public set; }
    public static CT_RowHierarchiesUsage Parse(XmlNode node, XmlNamespaceManager namespaceManager);
    internal void Write(StreamWriter sw, string nodeName);
    public List`1<CT_HierarchyUsage> get_rowHierarchyUsage();
    public void set_rowHierarchyUsage(List`1<CT_HierarchyUsage> value);
    public UInt32 get_count();
    public void set_count(UInt32 value);
    public bool get_countSpecified();
    public void set_countSpecified(bool value);
}
[XmlTypeAttribute]
[XmlRootAttribute]
public class NPOI.OpenXmlFormats.Spreadsheet.CT_rowItems : object {
    private List`1<CT_I> iField;
    private UInt32 countField;
    private bool countFieldSpecified;
    [XmlElementAttribute("i")]
public List`1<CT_I> i { get; public set; }
    [XmlAttributeAttribute]
public UInt32 count { get; public set; }
    [XmlIgnoreAttribute]
public bool countSpecified { get; public set; }
    public static CT_rowItems Parse(XmlNode node, XmlNamespaceManager namespaceManager);
    internal void Write(StreamWriter sw, string nodeName);
    public List`1<CT_I> get_i();
    public void set_i(List`1<CT_I> value);
    public UInt32 get_count();
    public void set_count(UInt32 value);
    public bool get_countSpecified();
    public void set_countSpecified(bool value);
}
[XmlTypeAttribute]
public class NPOI.OpenXmlFormats.Spreadsheet.CT_RPrElt : object {
    private CT_FontName rFontField;
    private CT_IntProperty charsetField;
    private CT_IntProperty familyField;
    private CT_BooleanProperty bField;
    private CT_BooleanProperty iField;
    private CT_BooleanProperty strikeField;
    private CT_BooleanProperty outlineField;
    private CT_BooleanProperty shadowField;
    private CT_BooleanProperty condenseField;
    private CT_BooleanProperty extendField;
    private CT_Color colorField;
    private CT_FontSize szField;
    private CT_UnderlineProperty uField;
    private CT_VerticalAlignFontProperty vertAlignField;
    private CT_FontScheme schemeField;
    [XmlElementAttribute]
public CT_FontName rFont { get; public set; }
    [XmlIgnoreAttribute]
public bool rFontSpecified { get; }
    [XmlElementAttribute]
public CT_IntProperty charset { get; public set; }
    [XmlIgnoreAttribute]
public bool charsetSpecified { get; }
    [XmlElementAttribute]
public CT_IntProperty family { get; public set; }
    [XmlIgnoreAttribute]
public bool familySpecified { get; }
    [XmlElementAttribute]
public CT_BooleanProperty b { get; public set; }
    [XmlIgnoreAttribute]
public bool bSpecified { get; }
    [XmlElementAttribute]
public CT_BooleanProperty i { get; public set; }
    [XmlIgnoreAttribute]
public bool iSpecified { get; }
    [XmlElementAttribute]
public CT_BooleanProperty strike { get; public set; }
    [XmlIgnoreAttribute]
public bool strikeSpecified { get; }
    [XmlElementAttribute]
public CT_BooleanProperty outline { get; public set; }
    [XmlIgnoreAttribute]
public bool outlineSpecified { get; }
    [XmlElementAttribute]
public CT_BooleanProperty shadow { get; public set; }
    [XmlIgnoreAttribute]
public bool shadowSpecified { get; }
    [XmlElementAttribute]
public CT_BooleanProperty condense { get; public set; }
    [XmlIgnoreAttribute]
public bool condenseSpecified { get; }
    [XmlElementAttribute]
public CT_BooleanProperty extend { get; public set; }
    [XmlIgnoreAttribute]
public bool extendSpecified { get; }
    [XmlElementAttribute]
public CT_Color color { get; public set; }
    [XmlIgnoreAttribute]
public bool colorSpecified { get; }
    [XmlElementAttribute]
public CT_FontSize sz { get; public set; }
    [XmlIgnoreAttribute]
public bool szSpecified { get; }
    [XmlElementAttribute]
public CT_UnderlineProperty u { get; public set; }
    [XmlIgnoreAttribute]
public bool uSpecified { get; }
    [XmlElementAttribute]
public CT_VerticalAlignFontProperty vertAlign { get; public set; }
    [XmlIgnoreAttribute]
public bool vertAlignSpecified { get; }
    [XmlElementAttribute]
public CT_FontScheme scheme { get; public set; }
    [XmlIgnoreAttribute]
public bool schemeSpecified { get; }
    public static CT_RPrElt Parse(XmlNode node, XmlNamespaceManager namespaceManager);
    internal void Write(StreamWriter sw, string nodeName);
    public CT_FontName get_rFont();
    public void set_rFont(CT_FontName value);
    public bool get_rFontSpecified();
    public int SizeOfRFontArray();
    public CT_FontName AddNewRFont();
    public CT_FontName GetRFontArray(int index);
    public CT_IntProperty get_charset();
    public void set_charset(CT_IntProperty value);
    public bool get_charsetSpecified();
    public int sizeOfCharsetArray();
    public CT_IntProperty AddNewCharset();
    public CT_IntProperty GetCharsetArray(int index);
    public CT_IntProperty get_family();
    public void set_family(CT_IntProperty value);
    public bool get_familySpecified();
    public int SizeOfFamilyArray();
    public CT_IntProperty AddNewFamily();
    public CT_IntProperty GetFamilyArray(int index);
    public CT_BooleanProperty get_b();
    public void set_b(CT_BooleanProperty value);
    public bool get_bSpecified();
    public int SizeOfBArray();
    public CT_BooleanProperty AddNewB();
    public void SetBArray(CT_BooleanProperty[] array);
    public CT_BooleanProperty GetBArray(int index);
    public CT_BooleanProperty get_i();
    public void set_i(CT_BooleanProperty value);
    public bool get_iSpecified();
    public int SizeOfIArray();
    public CT_BooleanProperty AddNewI();
    public void SetIArray(CT_BooleanProperty[] array);
    public CT_BooleanProperty GetIArray(int index);
    public CT_BooleanProperty get_strike();
    public void set_strike(CT_BooleanProperty value);
    public bool get_strikeSpecified();
    public int sizeOfStrikeArray();
    public CT_BooleanProperty AddNewStrike();
    public void SetStrikeArray(CT_BooleanProperty[] array);
    public CT_BooleanProperty GetStrikeArray(int index);
    public CT_BooleanProperty get_outline();
    public void set_outline(CT_BooleanProperty value);
    public bool get_outlineSpecified();
    public int sizeOfOutlineArray();
    public CT_BooleanProperty AddNewOutline();
    public void SetOutlineArray(CT_BooleanProperty[] array);
    public CT_BooleanProperty GetOutlineArray(int index);
    public CT_BooleanProperty get_shadow();
    public void set_shadow(CT_BooleanProperty value);
    public bool get_shadowSpecified();
    public int sizeOfShadowArray();
    public CT_BooleanProperty AddNewShadow();
    public CT_BooleanProperty GetShadowArray(int index);
    public CT_BooleanProperty get_condense();
    public void set_condense(CT_BooleanProperty value);
    public bool get_condenseSpecified();
    public int sizeOfCondenseArray();
    public CT_BooleanProperty AddNewCondense();
    public CT_BooleanProperty GetCondenseArray(int index);
    public CT_BooleanProperty get_extend();
    public void set_extend(CT_BooleanProperty value);
    public bool get_extendSpecified();
    public int sizeOfExtendArray();
    public CT_BooleanProperty AddNewExtend();
    public CT_BooleanProperty GetExtendArray(int index);
    public CT_Color get_color();
    public void set_color(CT_Color value);
    public bool get_colorSpecified();
    public int SizeOfColorArray();
    public CT_Color GetColorArray(int index);
    public void SetColorArray(CT_Color[] array);
    public CT_Color AddNewColor();
    public CT_FontSize get_sz();
    public void set_sz(CT_FontSize value);
    public bool get_szSpecified();
    public int SizeOfSzArray();
    public CT_FontSize AddNewSz();
    public void SetSzArray(CT_FontSize[] array);
    public CT_FontSize GetSzArray(int index);
    public CT_UnderlineProperty get_u();
    public void set_u(CT_UnderlineProperty value);
    public bool get_uSpecified();
    public int SizeOfUArray();
    public CT_UnderlineProperty AddNewU();
    public void SetUArray(CT_UnderlineProperty[] array);
    public CT_UnderlineProperty GetUArray(int index);
    public CT_VerticalAlignFontProperty get_vertAlign();
    public void set_vertAlign(CT_VerticalAlignFontProperty value);
    public bool get_vertAlignSpecified();
    public int sizeOfVertAlignArray();
    public CT_VerticalAlignFontProperty AddNewVertAlign();
    public void SetVertAlignArray(CT_VerticalAlignFontProperty[] array);
    public CT_VerticalAlignFontProperty GetVertAlignArray(int index);
    public CT_FontScheme get_scheme();
    public void set_scheme(CT_FontScheme value);
    public bool get_schemeSpecified();
    public int sizeOfSchemeArray();
    public CT_FontScheme AddNewScheme();
    public CT_FontScheme GetSchemeArray(int index);
}
[XmlTypeAttribute]
public class NPOI.OpenXmlFormats.Spreadsheet.CT_Rst : object {
    private string tField;
    private List`1<CT_RElt> rField;
    private List`1<CT_PhoneticRun> rPhField;
    private CT_PhoneticPr phoneticPrField;
    private string xmltext;
    [XmlElementAttribute("t")]
public string t { get; public set; }
    [XmlElementAttribute("r")]
public List`1<CT_RElt> r { get; public set; }
    [XmlIgnoreAttribute]
public string XmlText { get; public set; }
    [XmlElementAttribute("rPh")]
public List`1<CT_PhoneticRun> rPh { get; public set; }
    [XmlElementAttribute("phoneticPr")]
public CT_PhoneticPr phoneticPr { get; public set; }
    public void Set(CT_Rst o);
    internal void Write(StreamWriter sw, string nodeName);
    public bool IsSetT();
    public void unsetT();
    public string get_t();
    public void set_t(string value);
    public List`1<CT_RElt> get_r();
    public void set_r(List`1<CT_RElt> value);
    public string get_XmlText();
    public void set_XmlText(string value);
    public CT_RElt AddNewR();
    public int sizeOfRArray();
    public CT_RElt GetRArray(int index);
    public List`1<CT_PhoneticRun> get_rPh();
    public void set_rPh(List`1<CT_PhoneticRun> value);
    public CT_PhoneticPr get_phoneticPr();
    public void set_phoneticPr(CT_PhoneticPr value);
    public static CT_Rst Parse(XmlNode node, XmlNamespaceManager namespaceManager);
    public int SizeOfRArray();
}
[XmlTypeAttribute]
public class NPOI.OpenXmlFormats.Spreadsheet.CT_Scenario : object {
    private List`1<CT_InputCells> inputCellsField;
    private string nameField;
    private bool lockedField;
    private bool hiddenField;
    private UInt32 countField;
    private bool countFieldSpecified;
    private string userField;
    private string commentField;
    public List`1<CT_InputCells> inputCells { get; public set; }
    public string name { get; public set; }
    [DefaultValueAttribute("False")]
public bool locked { get; public set; }
    [DefaultValueAttribute("False")]
public bool hidden { get; public set; }
    public UInt32 count { get; public set; }
    [XmlIgnoreAttribute]
public bool countSpecified { get; public set; }
    public string user { get; public set; }
    public string comment { get; public set; }
    public List`1<CT_InputCells> get_inputCells();
    public void set_inputCells(List`1<CT_InputCells> value);
    public string get_name();
    public void set_name(string value);
    public bool get_locked();
    public void set_locked(bool value);
    public bool get_hidden();
    public void set_hidden(bool value);
    public UInt32 get_count();
    public void set_count(UInt32 value);
    public bool get_countSpecified();
    public void set_countSpecified(bool value);
    public string get_user();
    public void set_user(string value);
    public string get_comment();
    public void set_comment(string value);
    public static CT_Scenario Parse(XmlNode node, XmlNamespaceManager namespaceManager);
    internal void Write(StreamWriter sw, string nodeName);
}
[XmlTypeAttribute]
public class NPOI.OpenXmlFormats.Spreadsheet.CT_Scenarios : object {
    private List`1<CT_Scenario> scenarioField;
    private UInt32 currentField;
    private bool currentFieldSpecified;
    private UInt32 showField;
    private bool showFieldSpecified;
    private string sqrefField;
    [XmlElementAttribute]
public List`1<CT_Scenario> scenario { get; public set; }
    [XmlAttributeAttribute]
public UInt32 current { get; public set; }
    [XmlIgnoreAttribute]
public bool currentSpecified { get; public set; }
    [XmlAttributeAttribute]
public UInt32 show { get; public set; }
    [XmlIgnoreAttribute]
public bool showSpecified { get; public set; }
    [XmlAttributeAttribute]
public string sqref { get; public set; }
    public static CT_Scenarios Parse(XmlNode node, XmlNamespaceManager namespaceManager);
    internal void Write(StreamWriter sw, string nodeName);
    public List`1<CT_Scenario> get_scenario();
    public void set_scenario(List`1<CT_Scenario> value);
    public UInt32 get_current();
    public void set_current(UInt32 value);
    public bool get_currentSpecified();
    public void set_currentSpecified(bool value);
    public UInt32 get_show();
    public void set_show(UInt32 value);
    public bool get_showSpecified();
    public void set_showSpecified(bool value);
    public string get_sqref();
    public void set_sqref(string value);
}
[DebuggerStepThroughAttribute]
[DesignerCategoryAttribute("code")]
[XmlTypeAttribute]
public class NPOI.OpenXmlFormats.Spreadsheet.CT_Schema : object {
    private XmlElement anyField;
    private string idField;
    private string schemaRefField;
    private string namespaceField;
    private string schemaLanguageField;
    [XmlAnyElementAttribute]
public XmlElement Any { get; public set; }
    [XmlAttributeAttribute]
public string ID { get; public set; }
    [XmlAttributeAttribute]
public string SchemaRef { get; public set; }
    [XmlIgnoreAttribute]
public bool SchemaRefSpecified { get; }
    [XmlAttributeAttribute]
public string Namespace { get; public set; }
    [XmlIgnoreAttribute]
public bool NamespaceSpecified { get; }
    public string SchemaLanguage { get; public set; }
    [XmlIgnoreAttribute]
public bool SchemaLanguageSpecified { get; }
    public static CT_Schema Parse(XmlNode node, XmlNamespaceManager namespaceManager);
    internal void Write(StreamWriter sw, string nodeName);
    public XmlElement get_Any();
    public void set_Any(XmlElement value);
    public string get_ID();
    public void set_ID(string value);
    public string get_SchemaRef();
    public void set_SchemaRef(string value);
    public bool get_SchemaRefSpecified();
    public string get_Namespace();
    public void set_Namespace(string value);
    public bool get_NamespaceSpecified();
    public string get_SchemaLanguage();
    public void set_SchemaLanguage(string value);
    public bool get_SchemaLanguageSpecified();
}
[XmlTypeAttribute]
public class NPOI.OpenXmlFormats.Spreadsheet.CT_Selection : object {
    private ST_Pane paneField;
    private string activeCellField;
    private UInt32 activeCellIdField;
    private string sqrefField;
    [XmlAttributeAttribute]
[DefaultValueAttribute("Mono.Cecil.CustomAttributeArgument")]
public ST_Pane pane { get; public set; }
    [XmlAttributeAttribute]
public string activeCell { get; public set; }
    [XmlAttributeAttribute]
[DefaultValueAttribute("System.UInt32", "0")]
public UInt32 activeCellId { get; public set; }
    [XmlAttributeAttribute]
public string sqref { get; public set; }
    public static CT_Selection Parse(XmlNode node, XmlNamespaceManager namespaceManager);
    internal void Write(StreamWriter sw, string nodeName);
    public void SetSqref(String[] array);
    public ST_Pane get_pane();
    public void set_pane(ST_Pane value);
    public string get_activeCell();
    public void set_activeCell(string value);
    public UInt32 get_activeCellId();
    public void set_activeCellId(UInt32 value);
    public string get_sqref();
    public void set_sqref(string value);
}
[XmlTypeAttribute]
[XmlRootAttribute]
public class NPOI.OpenXmlFormats.Spreadsheet.CT_ServerFormat : object {
    private string cultureField;
    private string formatField;
    [XmlAttributeAttribute]
public string culture { get; public set; }
    [XmlAttributeAttribute]
public string format { get; public set; }
    public static CT_ServerFormat Parse(XmlNode node, XmlNamespaceManager namespaceManager);
    internal void Write(StreamWriter sw, string nodeName);
    public string get_culture();
    public void set_culture(string value);
    public string get_format();
    public void set_format(string value);
}
[XmlTypeAttribute]
[XmlRootAttribute]
public class NPOI.OpenXmlFormats.Spreadsheet.CT_ServerFormats : object {
    private List`1<CT_ServerFormat> serverFormatField;
    private UInt32 countField;
    private bool countFieldSpecified;
    [XmlElementAttribute("serverFormat")]
public List`1<CT_ServerFormat> serverFormat { get; public set; }
    [XmlAttributeAttribute]
public UInt32 count { get; public set; }
    [XmlIgnoreAttribute]
public bool countSpecified { get; public set; }
    public static CT_ServerFormats Parse(XmlNode node, XmlNamespaceManager namespaceManager);
    internal void Write(StreamWriter sw, string nodeName);
    public List`1<CT_ServerFormat> get_serverFormat();
    public void set_serverFormat(List`1<CT_ServerFormat> value);
    public UInt32 get_count();
    public void set_count(UInt32 value);
    public bool get_countSpecified();
    public void set_countSpecified(bool value);
}
[XmlTypeAttribute]
[XmlRootAttribute]
public class NPOI.OpenXmlFormats.Spreadsheet.CT_Set : object {
    private List`1<CT_Tuples> tplsField;
    private CT_Tuples sortByTupleField;
    private UInt32 countField;
    private bool countFieldSpecified;
    private int maxRankField;
    private string setDefinitionField;
    private ST_SortType sortTypeField;
    private bool queryFailedField;
    [XmlElementAttribute("tpls")]
public List`1<CT_Tuples> tpls { get; public set; }
    [XmlElementAttribute]
public CT_Tuples sortByTuple { get; public set; }
    [XmlAttributeAttribute]
public UInt32 count { get; public set; }
    [XmlIgnoreAttribute]
public bool countSpecified { get; public set; }
    [XmlAttributeAttribute]
public int maxRank { get; public set; }
    [XmlAttributeAttribute]
public string setDefinition { get; public set; }
    [XmlAttributeAttribute]
[DefaultValueAttribute("Mono.Cecil.CustomAttributeArgument")]
public ST_SortType sortType { get; public set; }
    [XmlAttributeAttribute]
[DefaultValueAttribute("False")]
public bool queryFailed { get; public set; }
    public static CT_Set Parse(XmlNode node, XmlNamespaceManager namespaceManager);
    internal void Write(StreamWriter sw, string nodeName);
    public List`1<CT_Tuples> get_tpls();
    public void set_tpls(List`1<CT_Tuples> value);
    public CT_Tuples get_sortByTuple();
    public void set_sortByTuple(CT_Tuples value);
    public UInt32 get_count();
    public void set_count(UInt32 value);
    public bool get_countSpecified();
    public void set_countSpecified(bool value);
    public int get_maxRank();
    public void set_maxRank(int value);
    public string get_setDefinition();
    public void set_setDefinition(string value);
    public ST_SortType get_sortType();
    public void set_sortType(ST_SortType value);
    public bool get_queryFailed();
    public void set_queryFailed(bool value);
}
[XmlTypeAttribute]
[XmlRootAttribute]
public class NPOI.OpenXmlFormats.Spreadsheet.CT_Sets : object {
    private List`1<CT_Set> setField;
    private UInt32 countField;
    private bool countFieldSpecified;
    [XmlElementAttribute("set")]
public List`1<CT_Set> set { get; public set; }
    [XmlAttributeAttribute]
public UInt32 count { get; public set; }
    [XmlIgnoreAttribute]
public bool countSpecified { get; public set; }
    public static CT_Sets Parse(XmlNode node, XmlNamespaceManager namespaceManager);
    internal void Write(StreamWriter sw, string nodeName);
    public List`1<CT_Set> get_set();
    public void set_set(List`1<CT_Set> value);
    public UInt32 get_count();
    public void set_count(UInt32 value);
    public bool get_countSpecified();
    public void set_countSpecified(bool value);
}
[XmlTypeAttribute]
[XmlRootAttribute]
public class NPOI.OpenXmlFormats.Spreadsheet.CT_SharedItems : object {
    private List`1<object> itemsField;
    private bool containsSemiMixedTypesField;
    private bool containsNonDateField;
    private bool containsDateField;
    private bool containsStringField;
    private bool containsBlankField;
    private bool containsMixedTypesField;
    private bool containsNumberField;
    private bool containsIntegerField;
    private double minValueField;
    private bool minValueFieldSpecified;
    private double maxValueField;
    private bool maxValueFieldSpecified;
    private Nullable`1<DateTime> minDateField;
    private bool minDateFieldSpecified;
    private Nullable`1<DateTime> maxDateField;
    private bool maxDateFieldSpecified;
    private UInt32 countField;
    private bool countFieldSpecified;
    private bool longTextField;
    [XmlElementAttribute("b", "NPOI.OpenXmlFormats.Spreadsheet.CT_Boolean")]
[XmlElementAttribute("d", "NPOI.OpenXmlFormats.Spreadsheet.CT_DateTime")]
[XmlElementAttribute("e", "NPOI.OpenXmlFormats.Spreadsheet.CT_Error")]
[XmlElementAttribute("m", "NPOI.OpenXmlFormats.Spreadsheet.CT_Missing")]
[XmlElementAttribute("n", "NPOI.OpenXmlFormats.Spreadsheet.CT_Number")]
[XmlElementAttribute("s", "NPOI.OpenXmlFormats.Spreadsheet.CT_String")]
public List`1<object> Items { get; public set; }
    [XmlAttributeAttribute]
[DefaultValueAttribute("True")]
public bool containsSemiMixedTypes { get; public set; }
    [XmlAttributeAttribute]
[DefaultValueAttribute("True")]
public bool containsNonDate { get; public set; }
    [XmlAttributeAttribute]
[DefaultValueAttribute("False")]
public bool containsDate { get; public set; }
    [XmlAttributeAttribute]
[DefaultValueAttribute("True")]
public bool containsString { get; public set; }
    [XmlAttributeAttribute]
[DefaultValueAttribute("False")]
public bool containsBlank { get; public set; }
    [XmlAttributeAttribute]
[DefaultValueAttribute("False")]
public bool containsMixedTypes { get; public set; }
    [XmlAttributeAttribute]
[DefaultValueAttribute("False")]
public bool containsNumber { get; public set; }
    [XmlAttributeAttribute]
[DefaultValueAttribute("False")]
public bool containsInteger { get; public set; }
    [XmlAttributeAttribute]
public double minValue { get; public set; }
    [XmlIgnoreAttribute]
public bool minValueSpecified { get; public set; }
    [XmlAttributeAttribute]
public double maxValue { get; public set; }
    [XmlIgnoreAttribute]
public bool maxValueSpecified { get; public set; }
    [XmlAttributeAttribute]
public Nullable`1<DateTime> minDate { get; public set; }
    [XmlIgnoreAttribute]
public bool minDateSpecified { get; public set; }
    [XmlAttributeAttribute]
public Nullable`1<DateTime> maxDate { get; public set; }
    [XmlIgnoreAttribute]
public bool maxDateSpecified { get; public set; }
    [XmlAttributeAttribute]
public UInt32 count { get; public set; }
    [XmlIgnoreAttribute]
public bool countSpecified { get; public set; }
    [XmlAttributeAttribute]
[DefaultValueAttribute("False")]
public bool longText { get; public set; }
    public static CT_SharedItems Parse(XmlNode node, XmlNamespaceManager namespaceManager);
    internal void Write(StreamWriter sw, string nodeName);
    public List`1<object> get_Items();
    public void set_Items(List`1<object> value);
    public bool get_containsSemiMixedTypes();
    public void set_containsSemiMixedTypes(bool value);
    public bool get_containsNonDate();
    public void set_containsNonDate(bool value);
    public bool get_containsDate();
    public void set_containsDate(bool value);
    public bool get_containsString();
    public void set_containsString(bool value);
    public bool get_containsBlank();
    public void set_containsBlank(bool value);
    public bool get_containsMixedTypes();
    public void set_containsMixedTypes(bool value);
    public bool get_containsNumber();
    public void set_containsNumber(bool value);
    public bool get_containsInteger();
    public void set_containsInteger(bool value);
    public double get_minValue();
    public void set_minValue(double value);
    public bool get_minValueSpecified();
    public void set_minValueSpecified(bool value);
    public double get_maxValue();
    public void set_maxValue(double value);
    public bool get_maxValueSpecified();
    public void set_maxValueSpecified(bool value);
    public Nullable`1<DateTime> get_minDate();
    public void set_minDate(Nullable`1<DateTime> value);
    public bool get_minDateSpecified();
    public void set_minDateSpecified(bool value);
    public Nullable`1<DateTime> get_maxDate();
    public void set_maxDate(Nullable`1<DateTime> value);
    public bool get_maxDateSpecified();
    public void set_maxDateSpecified(bool value);
    public UInt32 get_count();
    public void set_count(UInt32 value);
    public bool get_countSpecified();
    public void set_countSpecified(bool value);
    public bool get_longText();
    public void set_longText(bool value);
}
public class NPOI.OpenXmlFormats.Spreadsheet.CT_SharedUser : object {
    private CT_ExtensionList extLstField;
    private string guidField;
    private string nameField;
    private int idField;
    private DateTime dateTimeField;
    public CT_ExtensionList extLst { get; public set; }
    public string guid { get; public set; }
    public string name { get; public set; }
    public int id { get; public set; }
    public DateTime dateTime { get; public set; }
    public CT_ExtensionList get_extLst();
    public void set_extLst(CT_ExtensionList value);
    public string get_guid();
    public void set_guid(string value);
    public string get_name();
    public void set_name(string value);
    public int get_id();
    public void set_id(int value);
    public DateTime get_dateTime();
    public void set_dateTime(DateTime value);
}
[DesignerCategoryAttribute("code")]
[XmlTypeAttribute]
[XmlRootAttribute("sheet")]
public class NPOI.OpenXmlFormats.Spreadsheet.CT_Sheet : object {
    private string nameField;
    private UInt32 sheetIdField;
    private ST_SheetState stateField;
    private string idField;
    [XmlAttributeAttribute("name")]
public string name { get; public set; }
    [XmlAttributeAttribute("sheetId")]
public UInt32 sheetId { get; public set; }
    [XmlAttributeAttribute("state")]
[DefaultValueAttribute("Mono.Cecil.CustomAttributeArgument")]
public ST_SheetState state { get; public set; }
    [XmlAttributeAttribute]
public string id { get; public set; }
    public static CT_Sheet Parse(XmlNode node, XmlNamespaceManager namespaceManager);
    internal void Write(StreamWriter sw, string nodeName);
    public void Set(CT_Sheet sheet);
    public CT_Sheet Copy();
    public string get_name();
    public void set_name(string value);
    public UInt32 get_sheetId();
    public void set_sheetId(UInt32 value);
    public ST_SheetState get_state();
    public void set_state(ST_SheetState value);
    public string get_id();
    public void set_id(string value);
}
[XmlTypeAttribute]
public class NPOI.OpenXmlFormats.Spreadsheet.CT_SheetBackgroundPicture : object {
    private string idField;
    [XmlAttributeAttribute]
public string id { get; public set; }
    public string get_id();
    public void set_id(string value);
    public static CT_SheetBackgroundPicture Parse(XmlNode node, XmlNamespaceManager namespaceManager);
    internal void Write(StreamWriter sw, string nodeName);
}
[XmlTypeAttribute]
public class NPOI.OpenXmlFormats.Spreadsheet.CT_SheetCalcPr : object {
    private bool fullCalcOnLoadField;
    [DefaultValueAttribute("False")]
public bool fullCalcOnLoad { get; public set; }
    public static CT_SheetCalcPr Parse(XmlNode node, XmlNamespaceManager namespaceManager);
    internal void Write(StreamWriter sw, string nodeName);
    public bool get_fullCalcOnLoad();
    public void set_fullCalcOnLoad(bool value);
}
[XmlTypeAttribute]
public class NPOI.OpenXmlFormats.Spreadsheet.CT_SheetData : object {
    private List`1<CT_Row> rowField;
    [XmlElementAttribute("row")]
public List`1<CT_Row> row { get; public set; }
    [XmlIgnoreAttribute]
public bool rowSpecified { get; }
    public static CT_SheetData Parse(XmlNode node, XmlNamespaceManager namespaceManager);
    internal void Write(StreamWriter sw, string nodeName);
    public CT_Row AddNewRow();
    public CT_Row InsertNewRow(int index);
    public void RemoveRows(IList`1<CT_Row> toRemove);
    public void RemoveRow(int rowNum);
    public int SizeOfRowArray();
    public CT_Row GetRowArray(int index);
    public List`1<CT_Row> get_row();
    public void set_row(List`1<CT_Row> value);
    public bool get_rowSpecified();
}
[XmlTypeAttribute]
public class NPOI.OpenXmlFormats.Spreadsheet.CT_SheetDimension : object {
    private string refField;
    [XmlAttributeAttribute("ref")]
public string ref { get; public set; }
    public string get_ref();
    public void set_ref(string value);
    public static CT_SheetDimension Parse(XmlNode node, XmlNamespaceManager namespaceManager);
    internal void Write(StreamWriter sw, string nodeName);
}
[XmlTypeAttribute]
public class NPOI.OpenXmlFormats.Spreadsheet.CT_SheetFormatPr : object {
    private UInt32 baseColWidthField;
    private double defaultColWidthField;
    private double defaultRowHeightField;
    private bool customHeightField;
    private bool zeroHeightField;
    private bool thickTopField;
    private bool thickBottomField;
    private byte outlineLevelRowField;
    private byte outlineLevelColField;
    private double dyDescentField;
    [XmlAttributeAttribute]
public UInt32 baseColWidth { get; public set; }
    [XmlAttributeAttribute]
[DefaultValueAttribute("System.Double", "8.43")]
public double defaultColWidth { get; public set; }
    [XmlAttributeAttribute]
public double defaultRowHeight { get; public set; }
    [XmlAttributeAttribute]
[DefaultValueAttribute("False")]
public bool customHeight { get; public set; }
    [XmlAttributeAttribute]
[DefaultValueAttribute("False")]
public bool zeroHeight { get; public set; }
    [XmlAttributeAttribute]
[DefaultValueAttribute("False")]
public bool thickTop { get; public set; }
    [XmlAttributeAttribute]
[DefaultValueAttribute("False")]
public bool thickBottom { get; public set; }
    [XmlAttributeAttribute]
[DefaultValueAttribute("System.Byte", "0")]
public byte outlineLevelRow { get; public set; }
    [XmlAttributeAttribute]
[DefaultValueAttribute("System.Byte", "0")]
public byte outlineLevelCol { get; public set; }
    public UInt32 get_baseColWidth();
    public void set_baseColWidth(UInt32 value);
    public double get_defaultColWidth();
    public void set_defaultColWidth(double value);
    public double get_defaultRowHeight();
    public void set_defaultRowHeight(double value);
    public bool get_customHeight();
    public void set_customHeight(bool value);
    public bool get_zeroHeight();
    public void set_zeroHeight(bool value);
    public bool get_thickTop();
    public void set_thickTop(bool value);
    public bool get_thickBottom();
    public void set_thickBottom(bool value);
    public byte get_outlineLevelRow();
    public void set_outlineLevelRow(byte value);
    public byte get_outlineLevelCol();
    public void set_outlineLevelCol(byte value);
    public static CT_SheetFormatPr Parse(XmlNode node, XmlNamespaceManager namespaceManager);
    internal void Write(StreamWriter sw, string nodeName);
}
public class NPOI.OpenXmlFormats.Spreadsheet.CT_SheetId : object {
    private UInt32 valField;
    public UInt32 val { get; public set; }
    public UInt32 get_val();
    public void set_val(UInt32 value);
}
public class NPOI.OpenXmlFormats.Spreadsheet.CT_SheetIdMap : object {
    private List`1<CT_SheetId> sheetIdField;
    private UInt32 countField;
    private bool countFieldSpecified;
    public List`1<CT_SheetId> sheetId { get; public set; }
    public UInt32 count { get; public set; }
    [XmlIgnoreAttribute]
public bool countSpecified { get; public set; }
    public List`1<CT_SheetId> get_sheetId();
    public void set_sheetId(List`1<CT_SheetId> value);
    public UInt32 get_count();
    public void set_count(UInt32 value);
    public bool get_countSpecified();
    public void set_countSpecified(bool value);
}
[XmlTypeAttribute]
public class NPOI.OpenXmlFormats.Spreadsheet.CT_SheetPr : object {
    private CT_Color tabColorField;
    private CT_OutlinePr outlinePrField;
    private CT_PageSetUpPr pageSetUpPrField;
    private bool syncHorizontalField;
    private bool syncVerticalField;
    private string syncRefField;
    private bool transitionEvaluationField;
    private bool transitionEntryField;
    private bool publishedField;
    private string codeNameField;
    private bool filterModeField;
    private bool enableFormatConditionsCalculationField;
    public CT_Color tabColor { get; public set; }
    public CT_OutlinePr outlinePr { get; public set; }
    public CT_PageSetUpPr pageSetUpPr { get; public set; }
    [DefaultValueAttribute("False")]
public bool syncHorizontal { get; public set; }
    [DefaultValueAttribute("False")]
public bool syncVertical { get; public set; }
    public string syncRef { get; public set; }
    [DefaultValueAttribute("False")]
public bool transitionEvaluation { get; public set; }
    [DefaultValueAttribute("False")]
public bool transitionEntry { get; public set; }
    [DefaultValueAttribute("True")]
public bool published { get; public set; }
    public string codeName { get; public set; }
    [DefaultValueAttribute("False")]
public bool filterMode { get; public set; }
    [DefaultValueAttribute("True")]
public bool enableFormatConditionsCalculation { get; public set; }
    public static CT_SheetPr Parse(XmlNode node, XmlNamespaceManager namespaceManager);
    internal void Write(StreamWriter sw, string nodeName);
    public CT_SheetPr Clone();
    public bool IsSetOutlinePr();
    public bool IsSetPageSetUpPr();
    public CT_PageSetUpPr AddNewPageSetUpPr();
    public CT_OutlinePr AddNewOutlinePr();
    public CT_Color get_tabColor();
    public void set_tabColor(CT_Color value);
    public CT_OutlinePr get_outlinePr();
    public void set_outlinePr(CT_OutlinePr value);
    public CT_PageSetUpPr get_pageSetUpPr();
    public void set_pageSetUpPr(CT_PageSetUpPr value);
    public bool get_syncHorizontal();
    public void set_syncHorizontal(bool value);
    public bool get_syncVertical();
    public void set_syncVertical(bool value);
    public string get_syncRef();
    public void set_syncRef(string value);
    public bool get_transitionEvaluation();
    public void set_transitionEvaluation(bool value);
    public bool get_transitionEntry();
    public void set_transitionEntry(bool value);
    public bool get_published();
    public void set_published(bool value);
    public string get_codeName();
    public void set_codeName(string value);
    public bool get_filterMode();
    public void set_filterMode(bool value);
    public bool get_enableFormatConditionsCalculation();
    public void set_enableFormatConditionsCalculation(bool value);
    public bool IsSetTabColor();
}
[XmlTypeAttribute]
public class NPOI.OpenXmlFormats.Spreadsheet.CT_SheetProtection : object {
    private string passwordField;
    private bool sheetField;
    private bool objectsField;
    private bool scenariosField;
    private bool formatCellsField;
    private bool formatColumnsField;
    private bool formatRowsField;
    private bool insertColumnsField;
    private bool insertRowsField;
    private bool insertHyperlinksField;
    private bool deleteColumnsField;
    private bool deleteRowsField;
    private bool selectLockedCellsField;
    private bool sortField;
    private bool autoFilterField;
    private bool pivotTablesField;
    private bool selectUnlockedCellsField;
    [CompilerGeneratedAttribute]
private string <algorithmName>k__BackingField;
    [CompilerGeneratedAttribute]
private string <hashValue>k__BackingField;
    [CompilerGeneratedAttribute]
private string <saltValue>k__BackingField;
    [CompilerGeneratedAttribute]
private string <spinCount>k__BackingField;
    public string algorithmName { get; public set; }
    public string hashValue { get; public set; }
    public string saltValue { get; public set; }
    public string spinCount { get; public set; }
    [XmlAttributeAttribute]
public string password { get; public set; }
    [XmlAttributeAttribute]
[DefaultValueAttribute("False")]
public bool sheet { get; public set; }
    [XmlAttributeAttribute]
[DefaultValueAttribute("False")]
public bool objects { get; public set; }
    [XmlAttributeAttribute]
[DefaultValueAttribute("False")]
public bool scenarios { get; public set; }
    [XmlAttributeAttribute]
[DefaultValueAttribute("True")]
public bool formatCells { get; public set; }
    [XmlAttributeAttribute]
[DefaultValueAttribute("True")]
public bool formatColumns { get; public set; }
    [XmlAttributeAttribute]
[DefaultValueAttribute("True")]
public bool formatRows { get; public set; }
    [XmlAttributeAttribute]
[DefaultValueAttribute("True")]
public bool insertColumns { get; public set; }
    [XmlAttributeAttribute]
[DefaultValueAttribute("True")]
public bool insertRows { get; public set; }
    [XmlAttributeAttribute]
[DefaultValueAttribute("True")]
public bool insertHyperlinks { get; public set; }
    [XmlAttributeAttribute]
[DefaultValueAttribute("True")]
public bool deleteColumns { get; public set; }
    [XmlAttributeAttribute]
[DefaultValueAttribute("True")]
public bool deleteRows { get; public set; }
    [XmlAttributeAttribute]
[DefaultValueAttribute("False")]
public bool selectLockedCells { get; public set; }
    [XmlAttributeAttribute]
[DefaultValueAttribute("True")]
public bool sort { get; public set; }
    [XmlAttributeAttribute]
[DefaultValueAttribute("True")]
public bool autoFilter { get; public set; }
    [XmlAttributeAttribute]
[DefaultValueAttribute("True")]
public bool pivotTables { get; public set; }
    [XmlAttributeAttribute]
[DefaultValueAttribute("False")]
public bool selectUnlockedCells { get; public set; }
    [CompilerGeneratedAttribute]
public string get_algorithmName();
    [CompilerGeneratedAttribute]
public void set_algorithmName(string value);
    [CompilerGeneratedAttribute]
public string get_hashValue();
    [CompilerGeneratedAttribute]
public void set_hashValue(string value);
    [CompilerGeneratedAttribute]
public string get_saltValue();
    [CompilerGeneratedAttribute]
public void set_saltValue(string value);
    [CompilerGeneratedAttribute]
public string get_spinCount();
    [CompilerGeneratedAttribute]
public void set_spinCount(string value);
    public string get_password();
    public void set_password(string value);
    public bool get_sheet();
    public void set_sheet(bool value);
    public bool get_objects();
    public void set_objects(bool value);
    public bool get_scenarios();
    public void set_scenarios(bool value);
    public bool get_formatCells();
    public void set_formatCells(bool value);
    public bool get_formatColumns();
    public void set_formatColumns(bool value);
    public bool get_formatRows();
    public void set_formatRows(bool value);
    public bool get_insertColumns();
    public void set_insertColumns(bool value);
    public bool get_insertRows();
    public void set_insertRows(bool value);
    public bool get_insertHyperlinks();
    public void set_insertHyperlinks(bool value);
    public bool get_deleteColumns();
    public void set_deleteColumns(bool value);
    public bool get_deleteRows();
    public void set_deleteRows(bool value);
    public bool get_selectLockedCells();
    public void set_selectLockedCells(bool value);
    public bool get_sort();
    public void set_sort(bool value);
    public bool get_autoFilter();
    public void set_autoFilter(bool value);
    public bool get_pivotTables();
    public void set_pivotTables(bool value);
    public bool get_selectUnlockedCells();
    public void set_selectUnlockedCells(bool value);
    public static CT_SheetProtection Parse(XmlNode node, XmlNamespaceManager namespaceManager);
    internal bool IsSetObjects();
    internal bool IsSetScenarios();
    internal bool IsSetSheet();
    internal void Write(StreamWriter sw, string nodeName);
}
[DesignerCategoryAttribute("code")]
[XmlTypeAttribute]
[XmlRootAttribute("sheets")]
public class NPOI.OpenXmlFormats.Spreadsheet.CT_Sheets : object {
    private List`1<CT_Sheet> sheetField;
    [XmlElementAttribute("sheet")]
public List`1<CT_Sheet> sheet { get; public set; }
    public static CT_Sheets Parse(XmlNode node, XmlNamespaceManager namespaceManager);
    internal void Write(StreamWriter sw, string nodeName);
    public CT_Sheet AddNewSheet();
    public void RemoveSheet(int index);
    public CT_Sheet InsertNewSheet(int index);
    public CT_Sheet GetSheetArray(int index);
    public List`1<CT_Sheet> get_sheet();
    public void set_sheet(List`1<CT_Sheet> value);
}
[XmlTypeAttribute]
public class NPOI.OpenXmlFormats.Spreadsheet.CT_SheetView : object {
    private CT_Pane paneField;
    private List`1<CT_Selection> selectionField;
    private List`1<CT_PivotSelection> pivotSelectionField;
    private CT_ExtensionList extLstField;
    private bool windowProtectionField;
    private bool showFormulasField;
    private bool showGridLinesField;
    private bool showRowColHeadersField;
    private bool showZerosField;
    private bool rightToLeftField;
    private bool tabSelectedField;
    private bool showRulerField;
    private bool showOutlineSymbolsField;
    private bool defaultGridColorField;
    private bool showWhiteSpaceField;
    private ST_SheetViewType viewField;
    private string topLeftCellField;
    private UInt32 colorIdField;
    private UInt32 zoomScaleField;
    private UInt32 zoomScaleNormalField;
    private UInt32 zoomScaleSheetLayoutViewField;
    private UInt32 zoomScalePageLayoutViewField;
    private UInt32 workbookViewIdField;
    [XmlElementAttribute]
public CT_Pane pane { get; public set; }
    [XmlElementAttribute]
public List`1<CT_Selection> selection { get; public set; }
    [XmlElementAttribute]
public List`1<CT_PivotSelection> pivotSelection { get; public set; }
    [XmlElementAttribute]
public CT_ExtensionList extLst { get; public set; }
    [XmlAttributeAttribute]
[DefaultValueAttribute("False")]
public bool windowProtection { get; public set; }
    [XmlAttributeAttribute]
[DefaultValueAttribute("False")]
public bool showFormulas { get; public set; }
    [XmlAttributeAttribute]
[DefaultValueAttribute("True")]
public bool showGridLines { get; public set; }
    [XmlAttributeAttribute]
[DefaultValueAttribute("True")]
public bool showRowColHeaders { get; public set; }
    [XmlAttributeAttribute]
[DefaultValueAttribute("True")]
public bool showZeros { get; public set; }
    [XmlAttributeAttribute]
[DefaultValueAttribute("False")]
public bool rightToLeft { get; public set; }
    [XmlAttributeAttribute]
[DefaultValueAttribute("False")]
public bool tabSelected { get; public set; }
    [XmlAttributeAttribute]
[DefaultValueAttribute("True")]
public bool showRuler { get; public set; }
    [XmlAttributeAttribute]
[DefaultValueAttribute("True")]
public bool showOutlineSymbols { get; public set; }
    [XmlAttributeAttribute]
[DefaultValueAttribute("True")]
public bool defaultGridColor { get; public set; }
    [XmlAttributeAttribute]
[DefaultValueAttribute("True")]
public bool showWhiteSpace { get; public set; }
    [XmlAttributeAttribute]
[DefaultValueAttribute("Mono.Cecil.CustomAttributeArgument")]
public ST_SheetViewType view { get; public set; }
    [XmlAttributeAttribute]
public string topLeftCell { get; public set; }
    [XmlAttributeAttribute]
[DefaultValueAttribute("System.UInt32", "64")]
public UInt32 colorId { get; public set; }
    [XmlAttributeAttribute]
[DefaultValueAttribute("System.UInt32", "100")]
public UInt32 zoomScale { get; public set; }
    [XmlAttributeAttribute]
[DefaultValueAttribute("System.UInt32", "0")]
public UInt32 zoomScaleNormal { get; public set; }
    [XmlAttributeAttribute]
[DefaultValueAttribute("System.UInt32", "0")]
public UInt32 zoomScaleSheetLayoutView { get; public set; }
    [XmlAttributeAttribute]
[DefaultValueAttribute("System.UInt32", "0")]
public UInt32 zoomScalePageLayoutView { get; public set; }
    [XmlAttributeAttribute]
public UInt32 workbookViewId { get; public set; }
    public static CT_SheetView Parse(XmlNode node, XmlNamespaceManager namespaceManager);
    internal void Write(StreamWriter sw, string nodeName);
    public bool IsSetPane();
    public CT_Pane AddNewPane();
    public CT_Selection AddNewSelection();
    public void UnsetPane();
    public CT_Selection GetSelectionArray(int index);
    public CT_Selection InsertNewSelection(int index);
    public int SizeOfSelectionArray();
    public void SetSelectionArray(List`1<CT_Selection> selectionArray);
    public CT_Pane get_pane();
    public void set_pane(CT_Pane value);
    public List`1<CT_Selection> get_selection();
    public void set_selection(List`1<CT_Selection> value);
    public List`1<CT_PivotSelection> get_pivotSelection();
    public void set_pivotSelection(List`1<CT_PivotSelection> value);
    public CT_ExtensionList get_extLst();
    public void set_extLst(CT_ExtensionList value);
    public bool get_windowProtection();
    public void set_windowProtection(bool value);
    public bool get_showFormulas();
    public void set_showFormulas(bool value);
    public bool get_showGridLines();
    public void set_showGridLines(bool value);
    public bool get_showRowColHeaders();
    public void set_showRowColHeaders(bool value);
    public bool get_showZeros();
    public void set_showZeros(bool value);
    public bool get_rightToLeft();
    public void set_rightToLeft(bool value);
    public bool get_tabSelected();
    public void set_tabSelected(bool value);
    public bool get_showRuler();
    public void set_showRuler(bool value);
    public bool get_showOutlineSymbols();
    public void set_showOutlineSymbols(bool value);
    public bool get_defaultGridColor();
    public void set_defaultGridColor(bool value);
    public bool get_showWhiteSpace();
    public void set_showWhiteSpace(bool value);
    public ST_SheetViewType get_view();
    public void set_view(ST_SheetViewType value);
    public string get_topLeftCell();
    public void set_topLeftCell(string value);
    public UInt32 get_colorId();
    public void set_colorId(UInt32 value);
    public UInt32 get_zoomScale();
    public void set_zoomScale(UInt32 value);
    public UInt32 get_zoomScaleNormal();
    public void set_zoomScaleNormal(UInt32 value);
    public UInt32 get_zoomScaleSheetLayoutView();
    public void set_zoomScaleSheetLayoutView(UInt32 value);
    public UInt32 get_zoomScalePageLayoutView();
    public void set_zoomScalePageLayoutView(UInt32 value);
    public UInt32 get_workbookViewId();
    public void set_workbookViewId(UInt32 value);
}
[XmlTypeAttribute]
public class NPOI.OpenXmlFormats.Spreadsheet.CT_SheetViews : object {
    private List`1<CT_SheetView> sheetViewField;
    private CT_ExtensionList extLstField;
    [XmlElementAttribute]
public List`1<CT_SheetView> sheetView { get; public set; }
    [XmlElementAttribute]
public CT_ExtensionList extLst { get; public set; }
    public static CT_SheetViews Parse(XmlNode node, XmlNamespaceManager namespaceManager);
    internal void Write(StreamWriter sw, string nodeName);
    public CT_SheetView AddNewSheetView();
    public CT_SheetView GetSheetViewArray(int index);
    public void SetSheetViewArray(int index, CT_SheetView array);
    public int sizeOfSheetViewArray();
    public List`1<CT_SheetView> get_sheetView();
    public void set_sheetView(List`1<CT_SheetView> value);
    public CT_ExtensionList get_extLst();
    public void set_extLst(CT_ExtensionList value);
}
[XmlTypeAttribute]
public class NPOI.OpenXmlFormats.Spreadsheet.CT_SingleXmlCell : object {
    private CT_XmlCellPr xmlCellPrField;
    private CT_ExtensionList extLstField;
    private UInt32 idField;
    private string rField;
    private UInt32 connectionIdField;
    [XmlElementAttribute]
public CT_XmlCellPr xmlCellPr { get; public set; }
    [XmlElementAttribute]
public CT_ExtensionList extLst { get; public set; }
    [XmlAttributeAttribute]
public UInt32 id { get; public set; }
    [XmlAttributeAttribute]
public string r { get; public set; }
    [XmlAttributeAttribute]
public UInt32 connectionId { get; public set; }
    public CT_XmlCellPr get_xmlCellPr();
    public void set_xmlCellPr(CT_XmlCellPr value);
    public CT_ExtensionList get_extLst();
    public void set_extLst(CT_ExtensionList value);
    public UInt32 get_id();
    public void set_id(UInt32 value);
    public string get_r();
    public void set_r(string value);
    public UInt32 get_connectionId();
    public void set_connectionId(UInt32 value);
}
[DebuggerStepThroughAttribute]
[DesignerCategoryAttribute("code")]
[XmlTypeAttribute]
[XmlRootAttribute("singleXmlCells")]
public class NPOI.OpenXmlFormats.Spreadsheet.CT_SingleXmlCells : object {
    private List`1<CT_SingleXmlCell> singleXmlCellField;
    [XmlElementAttribute]
public List`1<CT_SingleXmlCell> singleXmlCell { get; public set; }
    public List`1<CT_SingleXmlCell> get_singleXmlCell();
    public void set_singleXmlCell(List`1<CT_SingleXmlCell> value);
}
[XmlTypeAttribute]
public class NPOI.OpenXmlFormats.Spreadsheet.CT_SmartTagPr : object {
    private bool embedField;
    private ST_SmartTagShow showField;
    [XmlAttributeAttribute]
[DefaultValueAttribute("False")]
public bool embed { get; public set; }
    [XmlAttributeAttribute]
[DefaultValueAttribute("Mono.Cecil.CustomAttributeArgument")]
public ST_SmartTagShow show { get; public set; }
    public static CT_SmartTagPr Parse(XmlNode node, XmlNamespaceManager namespaceManager);
    internal void Write(StreamWriter sw, string nodeName);
    public bool get_embed();
    public void set_embed(bool value);
    public ST_SmartTagShow get_show();
    public void set_show(ST_SmartTagShow value);
}
[XmlTypeAttribute]
public class NPOI.OpenXmlFormats.Spreadsheet.CT_SmartTags : object {
    private List`1<CT_CellSmartTags> cellSmartTagsField;
    public List`1<CT_CellSmartTags> cellSmartTags { get; public set; }
    public List`1<CT_CellSmartTags> get_cellSmartTags();
    public void set_cellSmartTags(List`1<CT_CellSmartTags> value);
}
[XmlTypeAttribute]
public class NPOI.OpenXmlFormats.Spreadsheet.CT_SmartTagType : object {
    private string namespaceUriField;
    private string nameField;
    private string urlField;
    public string namespaceUri { get; public set; }
    public string name { get; public set; }
    public string url { get; public set; }
    public static CT_SmartTagType Parse(XmlNode node, XmlNamespaceManager namespaceManager);
    internal void Write(StreamWriter sw, string nodeName);
    public string get_namespaceUri();
    public void set_namespaceUri(string value);
    public string get_name();
    public void set_name(string value);
    public string get_url();
    public void set_url(string value);
}
[XmlTypeAttribute]
public class NPOI.OpenXmlFormats.Spreadsheet.CT_SmartTagTypes : object {
    private List`1<CT_SmartTagType> smartTagTypeField;
    [XmlElementAttribute]
public List`1<CT_SmartTagType> smartTagType { get; public set; }
    public static CT_SmartTagTypes Parse(XmlNode node, XmlNamespaceManager namespaceManager);
    internal void Write(StreamWriter sw, string nodeName);
    public List`1<CT_SmartTagType> get_smartTagType();
    public void set_smartTagType(List`1<CT_SmartTagType> value);
}
public class NPOI.OpenXmlFormats.Spreadsheet.CT_SortCondition : object {
    private bool descendingField;
    private ST_SortBy sortByField;
    private string refField;
    private string customListField;
    private UInt32 dxfIdField;
    private bool dxfIdFieldSpecified;
    private ST_IconSetType iconSetField;
    private UInt32 iconIdField;
    private bool iconIdFieldSpecified;
    [DefaultValueAttribute("False")]
public bool descending { get; public set; }
    [DefaultValueAttribute("Mono.Cecil.CustomAttributeArgument")]
public ST_SortBy sortBy { get; public set; }
    public string ref { get; public set; }
    public string customList { get; public set; }
    public UInt32 dxfId { get; public set; }
    [XmlIgnoreAttribute]
public bool dxfIdSpecified { get; public set; }
    [DefaultValueAttribute("Mono.Cecil.CustomAttributeArgument")]
public ST_IconSetType iconSet { get; public set; }
    public UInt32 iconId { get; public set; }
    [XmlIgnoreAttribute]
public bool iconIdSpecified { get; public set; }
    public static CT_SortCondition Parse(XmlNode node, XmlNamespaceManager namespaceManager);
    internal void Write(StreamWriter sw, string nodeName);
    public bool get_descending();
    public void set_descending(bool value);
    public ST_SortBy get_sortBy();
    public void set_sortBy(ST_SortBy value);
    public string get_ref();
    public void set_ref(string value);
    public string get_customList();
    public void set_customList(string value);
    public UInt32 get_dxfId();
    public void set_dxfId(UInt32 value);
    public bool get_dxfIdSpecified();
    public void set_dxfIdSpecified(bool value);
    public ST_IconSetType get_iconSet();
    public void set_iconSet(ST_IconSetType value);
    public UInt32 get_iconId();
    public void set_iconId(UInt32 value);
    public bool get_iconIdSpecified();
    public void set_iconIdSpecified(bool value);
}
public class NPOI.OpenXmlFormats.Spreadsheet.CT_SortState : object {
    private List`1<CT_SortCondition> sortConditionField;
    private CT_ExtensionList extLstField;
    private bool columnSortField;
    private bool caseSensitiveField;
    private ST_SortMethod sortMethodField;
    private string refField;
    [XmlElementAttribute]
public List`1<CT_SortCondition> sortCondition { get; public set; }
    [XmlElementAttribute]
public CT_ExtensionList extLst { get; public set; }
    [XmlAttributeAttribute]
[DefaultValueAttribute("False")]
public bool columnSort { get; public set; }
    [XmlAttributeAttribute]
[DefaultValueAttribute("False")]
public bool caseSensitive { get; public set; }
    [XmlAttributeAttribute]
[DefaultValueAttribute("Mono.Cecil.CustomAttributeArgument")]
public ST_SortMethod sortMethod { get; public set; }
    [XmlAttributeAttribute]
public string ref { get; public set; }
    public static CT_SortState Parse(XmlNode node, XmlNamespaceManager namespaceManager);
    internal void Write(StreamWriter sw, string nodeName);
    public List`1<CT_SortCondition> get_sortCondition();
    public void set_sortCondition(List`1<CT_SortCondition> value);
    public CT_ExtensionList get_extLst();
    public void set_extLst(CT_ExtensionList value);
    public bool get_columnSort();
    public void set_columnSort(bool value);
    public bool get_caseSensitive();
    public void set_caseSensitive(bool value);
    public ST_SortMethod get_sortMethod();
    public void set_sortMethod(ST_SortMethod value);
    public string get_ref();
    public void set_ref(string value);
}
[DebuggerStepThroughAttribute]
[DesignerCategoryAttribute("code")]
[XmlTypeAttribute]
[XmlRootAttribute]
public class NPOI.OpenXmlFormats.Spreadsheet.CT_Sst : object {
    private List`1<CT_Rst> siField;
    private CT_ExtensionList extLstField;
    private int countField;
    private bool countFieldSpecified;
    private int uniqueCountField;
    private bool uniqueCountFieldSpecified;
    [XmlElementAttribute]
public List`1<CT_Rst> si { get; public set; }
    [XmlElementAttribute]
public CT_ExtensionList extLst { get; public set; }
    [XmlAttributeAttribute]
public int count { get; public set; }
    public bool countSpecified { get; public set; }
    [XmlAttributeAttribute]
public int uniqueCount { get; public set; }
    public bool uniqueCountSpecified { get; public set; }
    public List`1<CT_Rst> get_si();
    public void set_si(List`1<CT_Rst> value);
    public CT_ExtensionList get_extLst();
    public void set_extLst(CT_ExtensionList value);
    public int get_count();
    public void set_count(int value);
    public bool get_countSpecified();
    public void set_countSpecified(bool value);
    public int get_uniqueCount();
    public void set_uniqueCount(int value);
    public bool get_uniqueCountSpecified();
    public void set_uniqueCountSpecified(bool value);
}
[XmlTypeAttribute]
[XmlRootAttribute]
public class NPOI.OpenXmlFormats.Spreadsheet.CT_String : object {
    private List`1<CT_Tuples> tplsField;
    private List`1<CT_X> xField;
    private string vField;
    private bool uField;
    private bool uFieldSpecified;
    private bool fField;
    private bool fFieldSpecified;
    private string cField;
    private UInt32 cpField;
    private bool cpFieldSpecified;
    private UInt32 inField;
    private bool inFieldSpecified;
    private Byte[] bcField;
    private Byte[] fcField;
    private bool iField;
    private bool unField;
    private bool stField;
    private bool bField;
    [XmlElementAttribute("tpls")]
public List`1<CT_Tuples> tpls { get; public set; }
    [XmlElementAttribute("x")]
public List`1<CT_X> x { get; public set; }
    [XmlAttributeAttribute]
public string v { get; public set; }
    [XmlAttributeAttribute]
public bool u { get; public set; }
    [XmlIgnoreAttribute]
public bool uSpecified { get; public set; }
    [XmlAttributeAttribute]
public bool f { get; public set; }
    [XmlIgnoreAttribute]
public bool fSpecified { get; public set; }
    [XmlAttributeAttribute]
public string c { get; public set; }
    [XmlAttributeAttribute]
public UInt32 cp { get; public set; }
    [XmlIgnoreAttribute]
public bool cpSpecified { get; public set; }
    [XmlAttributeAttribute]
public UInt32 in { get; public set; }
    [XmlIgnoreAttribute]
public bool inSpecified { get; public set; }
    [XmlAttributeAttribute]
public Byte[] bc { get; public set; }
    [XmlAttributeAttribute]
public Byte[] fc { get; public set; }
    [XmlAttributeAttribute]
[DefaultValueAttribute("False")]
public bool i { get; public set; }
    [XmlAttributeAttribute]
[DefaultValueAttribute("False")]
public bool un { get; public set; }
    [XmlAttributeAttribute]
[DefaultValueAttribute("False")]
public bool st { get; public set; }
    [XmlAttributeAttribute]
[DefaultValueAttribute("False")]
public bool b { get; public set; }
    public List`1<CT_Tuples> get_tpls();
    public void set_tpls(List`1<CT_Tuples> value);
    public List`1<CT_X> get_x();
    public void set_x(List`1<CT_X> value);
    public string get_v();
    public void set_v(string value);
    public bool get_u();
    public void set_u(bool value);
    public bool get_uSpecified();
    public void set_uSpecified(bool value);
    public bool get_f();
    public void set_f(bool value);
    public bool get_fSpecified();
    public void set_fSpecified(bool value);
    public string get_c();
    public void set_c(string value);
    public UInt32 get_cp();
    public void set_cp(UInt32 value);
    public bool get_cpSpecified();
    public void set_cpSpecified(bool value);
    public UInt32 get_in();
    public void set_in(UInt32 value);
    public bool get_inSpecified();
    public void set_inSpecified(bool value);
    public Byte[] get_bc();
    public void set_bc(Byte[] value);
    public Byte[] get_fc();
    public void set_fc(Byte[] value);
    public bool get_i();
    public void set_i(bool value);
    public bool get_un();
    public void set_un(bool value);
    public bool get_st();
    public void set_st(bool value);
    public bool get_b();
    public void set_b(bool value);
    public static CT_String Parse(XmlNode node, XmlNamespaceManager namespaceManager);
    internal void Write(StreamWriter sw, string nodeName);
}
[DesignerCategoryAttribute("code")]
[XmlTypeAttribute]
[XmlRootAttribute]
public class NPOI.OpenXmlFormats.Spreadsheet.CT_Stylesheet : object {
    private CT_NumFmts numFmtsField;
    private CT_Fonts fontsField;
    private CT_Fills fillsField;
    private CT_Borders bordersField;
    private CT_CellStyleXfs cellStyleXfsField;
    private CT_CellXfs cellXfsField;
    private CT_CellStyles cellStylesField;
    private CT_Dxfs dxfsField;
    private CT_TableStyles tableStylesField;
    private CT_Colors colorsField;
    private CT_ExtensionList extLstField;
    [XmlElementAttribute]
public CT_NumFmts numFmts { get; public set; }
    [XmlElementAttribute]
public CT_Fonts fonts { get; public set; }
    [XmlElementAttribute]
public CT_Fills fills { get; public set; }
    [XmlElementAttribute]
public CT_Borders borders { get; public set; }
    [XmlElementAttribute]
public CT_CellStyleXfs cellStyleXfs { get; public set; }
    [XmlElementAttribute]
public CT_CellXfs cellXfs { get; public set; }
    [XmlElementAttribute]
public CT_CellStyles cellStyles { get; public set; }
    [XmlElementAttribute]
public CT_Dxfs dxfs { get; public set; }
    [XmlElementAttribute]
public CT_TableStyles tableStyles { get; public set; }
    [XmlElementAttribute]
public CT_Colors colors { get; public set; }
    [XmlElementAttribute]
public CT_ExtensionList extLst { get; public set; }
    public static CT_Stylesheet Parse(XmlNode node, XmlNamespaceManager namespaceManager);
    internal void Write(StreamWriter sw);
    public CT_Borders AddNewBorders();
    public CT_CellStyleXfs AddNewCellStyleXfs();
    public CT_CellXfs AddNewCellXfs();
    public CT_NumFmts get_numFmts();
    public void set_numFmts(CT_NumFmts value);
    public CT_Fonts get_fonts();
    public void set_fonts(CT_Fonts value);
    public CT_Fills get_fills();
    public void set_fills(CT_Fills value);
    public CT_Borders get_borders();
    public void set_borders(CT_Borders value);
    public CT_CellStyleXfs get_cellStyleXfs();
    public void set_cellStyleXfs(CT_CellStyleXfs value);
    public CT_CellXfs get_cellXfs();
    public void set_cellXfs(CT_CellXfs value);
    public CT_CellStyles get_cellStyles();
    public void set_cellStyles(CT_CellStyles value);
    public CT_Dxfs get_dxfs();
    public void set_dxfs(CT_Dxfs value);
    public CT_TableStyles get_tableStyles();
    public void set_tableStyles(CT_TableStyles value);
    public CT_Colors get_colors();
    public void set_colors(CT_Colors value);
    public CT_ExtensionList get_extLst();
    public void set_extLst(CT_ExtensionList value);
}
[DebuggerStepThroughAttribute]
[DesignerCategoryAttribute("code")]
[XmlTypeAttribute]
[XmlRootAttribute("table")]
public class NPOI.OpenXmlFormats.Spreadsheet.CT_Table : object {
    private CT_AutoFilter autoFilterField;
    private CT_SortState sortStateField;
    private CT_TableColumns tableColumnsField;
    private CT_TableStyleInfo tableStyleInfoField;
    private CT_ExtensionList extLstField;
    private UInt32 idField;
    private string nameField;
    private string displayNameField;
    private string commentField;
    private string refField;
    private ST_TableType tableTypeField;
    private UInt32 headerRowCountField;
    private bool insertRowField;
    private bool insertRowShiftField;
    private UInt32 totalsRowCountField;
    private bool totalsRowShownField;
    private bool publishedField;
    private UInt32 headerRowDxfIdField;
    private bool headerRowDxfIdFieldSpecified;
    private UInt32 dataDxfIdField;
    private bool dataDxfIdFieldSpecified;
    private UInt32 totalsRowDxfIdField;
    private bool totalsRowDxfIdFieldSpecified;
    private UInt32 headerRowBorderDxfIdField;
    private bool headerRowBorderDxfIdFieldSpecified;
    private UInt32 tableBorderDxfIdField;
    private bool tableBorderDxfIdFieldSpecified;
    private UInt32 totalsRowBorderDxfIdField;
    private bool totalsRowBorderDxfIdFieldSpecified;
    private string headerRowCellStyleField;
    private string dataCellStyleField;
    private string totalsRowCellStyleField;
    private UInt32 connectionIdField;
    private bool connectionIdFieldSpecified;
    public bool IsSetAutoFilter { get; }
    [XmlElementAttribute]
public CT_AutoFilter autoFilter { get; public set; }
    [XmlElementAttribute]
public CT_SortState sortState { get; public set; }
    [XmlElementAttribute]
public CT_TableColumns tableColumns { get; public set; }
    [XmlElementAttribute]
public CT_TableStyleInfo tableStyleInfo { get; public set; }
    [XmlElementAttribute]
public CT_ExtensionList extLst { get; public set; }
    [XmlAttributeAttribute]
public UInt32 id { get; public set; }
    [XmlAttributeAttribute]
public string name { get; public set; }
    [XmlAttributeAttribute]
public string displayName { get; public set; }
    [XmlAttributeAttribute]
public string comment { get; public set; }
    [XmlAttributeAttribute]
public string ref { get; public set; }
    [XmlAttributeAttribute]
[DefaultValueAttribute("Mono.Cecil.CustomAttributeArgument")]
public ST_TableType tableType { get; public set; }
    [XmlAttributeAttribute]
[DefaultValueAttribute("System.UInt32", "1")]
public UInt32 headerRowCount { get; public set; }
    [XmlAttributeAttribute]
[DefaultValueAttribute("False")]
public bool insertRow { get; public set; }
    [XmlAttributeAttribute]
[DefaultValueAttribute("False")]
public bool insertRowShift { get; public set; }
    [XmlAttributeAttribute]
[DefaultValueAttribute("System.UInt32", "0")]
public UInt32 totalsRowCount { get; public set; }
    [XmlAttributeAttribute]
[DefaultValueAttribute("True")]
public bool totalsRowShown { get; public set; }
    [XmlAttributeAttribute]
[DefaultValueAttribute("False")]
public bool published { get; public set; }
    [XmlAttributeAttribute]
public UInt32 headerRowDxfId { get; public set; }
    [XmlIgnoreAttribute]
public bool headerRowDxfIdSpecified { get; public set; }
    [XmlAttributeAttribute]
public UInt32 dataDxfId { get; public set; }
    [XmlIgnoreAttribute]
public bool dataDxfIdSpecified { get; public set; }
    [XmlAttributeAttribute]
public UInt32 totalsRowDxfId { get; public set; }
    [XmlIgnoreAttribute]
public bool totalsRowDxfIdSpecified { get; public set; }
    [XmlAttributeAttribute]
public UInt32 headerRowBorderDxfId { get; public set; }
    [XmlIgnoreAttribute]
public bool headerRowBorderDxfIdSpecified { get; public set; }
    [XmlAttributeAttribute]
public UInt32 tableBorderDxfId { get; public set; }
    [XmlIgnoreAttribute]
public bool tableBorderDxfIdSpecified { get; public set; }
    [XmlAttributeAttribute]
public UInt32 totalsRowBorderDxfId { get; public set; }
    [XmlIgnoreAttribute]
public bool totalsRowBorderDxfIdSpecified { get; public set; }
    [XmlAttributeAttribute]
public string headerRowCellStyle { get; public set; }
    [XmlAttributeAttribute]
public string dataCellStyle { get; public set; }
    [XmlAttributeAttribute]
public string totalsRowCellStyle { get; public set; }
    [XmlAttributeAttribute]
public UInt32 connectionId { get; public set; }
    [XmlIgnoreAttribute]
public bool connectionIdSpecified { get; public set; }
    public static CT_Table Parse(XmlNode node, XmlNamespaceManager namespaceManager);
    internal void Write(StreamWriter sw);
    public bool get_IsSetAutoFilter();
    public CT_AutoFilter get_autoFilter();
    public void set_autoFilter(CT_AutoFilter value);
    public CT_SortState get_sortState();
    public void set_sortState(CT_SortState value);
    public CT_TableColumns get_tableColumns();
    public void set_tableColumns(CT_TableColumns value);
    public CT_TableStyleInfo get_tableStyleInfo();
    public void set_tableStyleInfo(CT_TableStyleInfo value);
    public CT_ExtensionList get_extLst();
    public void set_extLst(CT_ExtensionList value);
    public UInt32 get_id();
    public void set_id(UInt32 value);
    public string get_name();
    public void set_name(string value);
    public string get_displayName();
    public void set_displayName(string value);
    public string get_comment();
    public void set_comment(string value);
    public string get_ref();
    public void set_ref(string value);
    public ST_TableType get_tableType();
    public void set_tableType(ST_TableType value);
    public UInt32 get_headerRowCount();
    public void set_headerRowCount(UInt32 value);
    public bool get_insertRow();
    public void set_insertRow(bool value);
    public bool get_insertRowShift();
    public void set_insertRowShift(bool value);
    public UInt32 get_totalsRowCount();
    public void set_totalsRowCount(UInt32 value);
    public bool get_totalsRowShown();
    public void set_totalsRowShown(bool value);
    public bool get_published();
    public void set_published(bool value);
    public UInt32 get_headerRowDxfId();
    public void set_headerRowDxfId(UInt32 value);
    public bool get_headerRowDxfIdSpecified();
    public void set_headerRowDxfIdSpecified(bool value);
    public UInt32 get_dataDxfId();
    public void set_dataDxfId(UInt32 value);
    public bool get_dataDxfIdSpecified();
    public void set_dataDxfIdSpecified(bool value);
    public UInt32 get_totalsRowDxfId();
    public void set_totalsRowDxfId(UInt32 value);
    public bool get_totalsRowDxfIdSpecified();
    public void set_totalsRowDxfIdSpecified(bool value);
    public UInt32 get_headerRowBorderDxfId();
    public void set_headerRowBorderDxfId(UInt32 value);
    public bool get_headerRowBorderDxfIdSpecified();
    public void set_headerRowBorderDxfIdSpecified(bool value);
    public UInt32 get_tableBorderDxfId();
    public void set_tableBorderDxfId(UInt32 value);
    public bool get_tableBorderDxfIdSpecified();
    public void set_tableBorderDxfIdSpecified(bool value);
    public UInt32 get_totalsRowBorderDxfId();
    public void set_totalsRowBorderDxfId(UInt32 value);
    public bool get_totalsRowBorderDxfIdSpecified();
    public void set_totalsRowBorderDxfIdSpecified(bool value);
    public string get_headerRowCellStyle();
    public void set_headerRowCellStyle(string value);
    public string get_dataCellStyle();
    public void set_dataCellStyle(string value);
    public string get_totalsRowCellStyle();
    public void set_totalsRowCellStyle(string value);
    public UInt32 get_connectionId();
    public void set_connectionId(UInt32 value);
    public bool get_connectionIdSpecified();
    public void set_connectionIdSpecified(bool value);
    public CT_TableStyleInfo AddNewTableStyleInfo();
    public CT_TableColumns AddNewTableColumns();
    public bool IsSetTableStyleInfo();
}
[XmlTypeAttribute]
public class NPOI.OpenXmlFormats.Spreadsheet.CT_TableColumn : object {
    private CT_TableFormula calculatedColumnFormulaField;
    private CT_TableFormula totalsRowFormulaField;
    private CT_XmlColumnPr xmlColumnPrField;
    private CT_ExtensionList extLstField;
    private UInt32 idField;
    private string uniqueNameField;
    private string nameField;
    private ST_TotalsRowFunction totalsRowFunctionField;
    private string totalsRowLabelField;
    private UInt32 queryTableFieldIdField;
    private bool queryTableFieldIdFieldSpecified;
    private UInt32 headerRowDxfIdField;
    private bool headerRowDxfIdFieldSpecified;
    private UInt32 dataDxfIdField;
    private bool dataDxfIdFieldSpecified;
    private UInt32 totalsRowDxfIdField;
    private bool totalsRowDxfIdFieldSpecified;
    private string headerRowCellStyleField;
    private string dataCellStyleField;
    private string totalsRowCellStyleField;
    [XmlElementAttribute]
public CT_TableFormula calculatedColumnFormula { get; public set; }
    [XmlElementAttribute]
public CT_TableFormula totalsRowFormula { get; public set; }
    public CT_XmlColumnPr xmlColumnPr { get; public set; }
    [XmlElementAttribute]
public CT_ExtensionList extLst { get; public set; }
    [XmlAttributeAttribute]
public UInt32 id { get; public set; }
    [XmlAttributeAttribute]
public string uniqueName { get; public set; }
    [XmlAttributeAttribute]
public string name { get; public set; }
    [XmlAttributeAttribute]
[DefaultValueAttribute("Mono.Cecil.CustomAttributeArgument")]
public ST_TotalsRowFunction totalsRowFunction { get; public set; }
    [XmlAttributeAttribute]
public string totalsRowLabel { get; public set; }
    [XmlAttributeAttribute]
public UInt32 queryTableFieldId { get; public set; }
    [XmlIgnoreAttribute]
public bool queryTableFieldIdSpecified { get; public set; }
    [XmlAttributeAttribute]
public UInt32 headerRowDxfId { get; public set; }
    [XmlIgnoreAttribute]
public bool headerRowDxfIdSpecified { get; public set; }
    [XmlAttributeAttribute]
public UInt32 dataDxfId { get; public set; }
    [XmlIgnoreAttribute]
public bool dataDxfIdSpecified { get; public set; }
    [XmlAttributeAttribute]
public UInt32 totalsRowDxfId { get; public set; }
    [XmlIgnoreAttribute]
public bool totalsRowDxfIdSpecified { get; public set; }
    [XmlAttributeAttribute]
public string headerRowCellStyle { get; public set; }
    [XmlAttributeAttribute]
public string dataCellStyle { get; public set; }
    [XmlAttributeAttribute]
public string totalsRowCellStyle { get; public set; }
    public static CT_TableColumn Parse(XmlNode node, XmlNamespaceManager namespaceManager);
    internal void Write(StreamWriter sw, string nodeName);
    public CT_TableFormula get_calculatedColumnFormula();
    public void set_calculatedColumnFormula(CT_TableFormula value);
    public CT_TableFormula get_totalsRowFormula();
    public void set_totalsRowFormula(CT_TableFormula value);
    public CT_XmlColumnPr get_xmlColumnPr();
    public void set_xmlColumnPr(CT_XmlColumnPr value);
    public CT_ExtensionList get_extLst();
    public void set_extLst(CT_ExtensionList value);
    public UInt32 get_id();
    public void set_id(UInt32 value);
    public string get_uniqueName();
    public void set_uniqueName(string value);
    public string get_name();
    public void set_name(string value);
    public ST_TotalsRowFunction get_totalsRowFunction();
    public void set_totalsRowFunction(ST_TotalsRowFunction value);
    public string get_totalsRowLabel();
    public void set_totalsRowLabel(string value);
    public UInt32 get_queryTableFieldId();
    public void set_queryTableFieldId(UInt32 value);
    public bool get_queryTableFieldIdSpecified();
    public void set_queryTableFieldIdSpecified(bool value);
    public UInt32 get_headerRowDxfId();
    public void set_headerRowDxfId(UInt32 value);
    public bool get_headerRowDxfIdSpecified();
    public void set_headerRowDxfIdSpecified(bool value);
    public UInt32 get_dataDxfId();
    public void set_dataDxfId(UInt32 value);
    public bool get_dataDxfIdSpecified();
    public void set_dataDxfIdSpecified(bool value);
    public UInt32 get_totalsRowDxfId();
    public void set_totalsRowDxfId(UInt32 value);
    public bool get_totalsRowDxfIdSpecified();
    public void set_totalsRowDxfIdSpecified(bool value);
    public string get_headerRowCellStyle();
    public void set_headerRowCellStyle(string value);
    public string get_dataCellStyle();
    public void set_dataCellStyle(string value);
    public string get_totalsRowCellStyle();
    public void set_totalsRowCellStyle(string value);
}
[XmlTypeAttribute]
public class NPOI.OpenXmlFormats.Spreadsheet.CT_TableColumns : object {
    private List`1<CT_TableColumn> tableColumnField;
    private UInt32 countField;
    private bool countFieldSpecified;
    [XmlElementAttribute]
public List`1<CT_TableColumn> tableColumn { get; public set; }
    [XmlAttributeAttribute]
public UInt32 count { get; public set; }
    [XmlIgnoreAttribute]
public bool countSpecified { get; public set; }
    public static CT_TableColumns Parse(XmlNode node, XmlNamespaceManager namespaceManager);
    internal void Write(StreamWriter sw, string nodeName);
    public CT_TableColumn InsertNewTableColumn(int columnIndex);
    public List`1<CT_TableColumn> GetTableColumnList();
    public void RemoveTableColumn(int columnIndex);
    public List`1<CT_TableColumn> get_tableColumn();
    public void set_tableColumn(List`1<CT_TableColumn> value);
    public UInt32 get_count();
    public void set_count(UInt32 value);
    public bool get_countSpecified();
    public void set_countSpecified(bool value);
}
[XmlTypeAttribute]
public class NPOI.OpenXmlFormats.Spreadsheet.CT_TableFormula : object {
    private bool arrayField;
    private string valueField;
    [XmlAttributeAttribute]
[DefaultValueAttribute("False")]
public bool array { get; public set; }
    [XmlTextAttribute]
public string Value { get; public set; }
    public bool get_array();
    public void set_array(bool value);
    public string get_Value();
    public void set_Value(string value);
    public static CT_TableFormula Parse(XmlNode node, XmlNamespaceManager namespaceManager);
    internal void Write(StreamWriter sw, string nodeName);
}
[XmlTypeAttribute]
public class NPOI.OpenXmlFormats.Spreadsheet.CT_TablePart : object {
    private string idField;
    [XmlAttributeAttribute]
public string id { get; public set; }
    public string get_id();
    public void set_id(string value);
    public static CT_TablePart Parse(XmlNode node, XmlNamespaceManager namespaceManager);
    internal void Write(StreamWriter sw, string nodeName);
}
[XmlTypeAttribute]
public class NPOI.OpenXmlFormats.Spreadsheet.CT_TableParts : object {
    private List`1<CT_TablePart> tablePartField;
    private UInt32 countField;
    private bool countFieldSpecified;
    [XmlElementAttribute]
public List`1<CT_TablePart> tablePart { get; public set; }
    [XmlAttributeAttribute]
public UInt32 count { get; public set; }
    [XmlIgnoreAttribute]
public bool countSpecified { get; public set; }
    public CT_TablePart AddNewTablePart();
    public List`1<CT_TablePart> get_tablePart();
    public void set_tablePart(List`1<CT_TablePart> value);
    public UInt32 get_count();
    public void set_count(UInt32 value);
    public bool get_countSpecified();
    public void set_countSpecified(bool value);
    public static CT_TableParts Parse(XmlNode node, XmlNamespaceManager namespaceManager);
    internal void Write(StreamWriter sw, string nodeName);
}
public class NPOI.OpenXmlFormats.Spreadsheet.CT_TableStyle : object {
    private List`1<CT_TableStyleElement> tableStyleElementField;
    private string nameField;
    private bool pivotField;
    private bool tableField;
    private UInt32 countField;
    private bool countFieldSpecified;
    [XmlElementAttribute]
public List`1<CT_TableStyleElement> tableStyleElement { get; public set; }
    [XmlAttributeAttribute]
public string name { get; public set; }
    [XmlAttributeAttribute]
[DefaultValueAttribute("True")]
public bool pivot { get; public set; }
    [XmlAttributeAttribute]
[DefaultValueAttribute("True")]
public bool table { get; public set; }
    [XmlAttributeAttribute]
public UInt32 count { get; public set; }
    [XmlIgnoreAttribute]
public bool countSpecified { get; public set; }
    public static CT_TableStyle Parse(XmlNode node, XmlNamespaceManager namespaceManager);
    internal void Write(StreamWriter sw, string nodeName);
    public List`1<CT_TableStyleElement> get_tableStyleElement();
    public void set_tableStyleElement(List`1<CT_TableStyleElement> value);
    public string get_name();
    public void set_name(string value);
    public bool get_pivot();
    public void set_pivot(bool value);
    public bool get_table();
    public void set_table(bool value);
    public UInt32 get_count();
    public void set_count(UInt32 value);
    public bool get_countSpecified();
    public void set_countSpecified(bool value);
}
public class NPOI.OpenXmlFormats.Spreadsheet.CT_TableStyleElement : object {
    private ST_TableStyleType typeField;
    private UInt32 sizeField;
    private UInt32 dxfIdField;
    private bool dxfIdFieldSpecified;
    [XmlAttributeAttribute]
public ST_TableStyleType type { get; public set; }
    [DefaultValueAttribute("System.UInt32", "1")]
public UInt32 size { get; public set; }
    [XmlAttributeAttribute]
public UInt32 dxfId { get; public set; }
    [XmlIgnoreAttribute]
public bool dxfIdSpecified { get; public set; }
    public static CT_TableStyleElement Parse(XmlNode node, XmlNamespaceManager namespaceManager);
    internal void Write(StreamWriter sw, string nodeName);
    public ST_TableStyleType get_type();
    public void set_type(ST_TableStyleType value);
    public UInt32 get_size();
    public void set_size(UInt32 value);
    public UInt32 get_dxfId();
    public void set_dxfId(UInt32 value);
    public bool get_dxfIdSpecified();
    public void set_dxfIdSpecified(bool value);
}
[XmlTypeAttribute]
public class NPOI.OpenXmlFormats.Spreadsheet.CT_TableStyleInfo : object {
    private string nameField;
    private bool showFirstColumnField;
    private bool showFirstColumnFieldSpecified;
    private bool showLastColumnField;
    private bool showLastColumnFieldSpecified;
    private bool showRowStripesField;
    private bool showRowStripesFieldSpecified;
    private bool showColumnStripesField;
    private bool showColumnStripesFieldSpecified;
    [XmlAttributeAttribute]
public string name { get; public set; }
    [XmlAttributeAttribute]
public bool showFirstColumn { get; public set; }
    [XmlIgnoreAttribute]
public bool showFirstColumnSpecified { get; public set; }
    [XmlAttributeAttribute]
public bool showLastColumn { get; public set; }
    [XmlIgnoreAttribute]
public bool showLastColumnSpecified { get; public set; }
    [XmlAttributeAttribute]
public bool showRowStripes { get; public set; }
    [XmlIgnoreAttribute]
public bool showRowStripesSpecified { get; public set; }
    [XmlAttributeAttribute]
public bool showColumnStripes { get; public set; }
    [XmlIgnoreAttribute]
public bool showColumnStripesSpecified { get; public set; }
    public static CT_TableStyleInfo Parse(XmlNode node, XmlNamespaceManager namespaceManager);
    internal void Write(StreamWriter sw, string nodeName);
    public string get_name();
    public void set_name(string value);
    public bool get_showFirstColumn();
    public void set_showFirstColumn(bool value);
    public bool get_showFirstColumnSpecified();
    public void set_showFirstColumnSpecified(bool value);
    public bool get_showLastColumn();
    public void set_showLastColumn(bool value);
    public bool get_showLastColumnSpecified();
    public void set_showLastColumnSpecified(bool value);
    public bool get_showRowStripes();
    public void set_showRowStripes(bool value);
    public bool get_showRowStripesSpecified();
    public void set_showRowStripesSpecified(bool value);
    public bool get_showColumnStripes();
    public void set_showColumnStripes(bool value);
    public bool get_showColumnStripesSpecified();
    public void set_showColumnStripesSpecified(bool value);
}
public class NPOI.OpenXmlFormats.Spreadsheet.CT_TableStyles : object {
    private List`1<CT_TableStyle> tableStyleField;
    private UInt32 countField;
    private bool countFieldSpecified;
    private string defaultTableStyleField;
    private string defaultPivotStyleField;
    [XmlElementAttribute]
public List`1<CT_TableStyle> tableStyle { get; public set; }
    [XmlAttributeAttribute]
public UInt32 count { get; public set; }
    [XmlIgnoreAttribute]
public bool countSpecified { get; public set; }
    public string defaultTableStyle { get; public set; }
    public string defaultPivotStyle { get; public set; }
    public static CT_TableStyles Parse(XmlNode node, XmlNamespaceManager namespaceManager);
    internal void Write(StreamWriter sw, string nodeName);
    public List`1<CT_TableStyle> get_tableStyle();
    public void set_tableStyle(List`1<CT_TableStyle> value);
    public UInt32 get_count();
    public void set_count(UInt32 value);
    public bool get_countSpecified();
    public void set_countSpecified(bool value);
    public string get_defaultTableStyle();
    public void set_defaultTableStyle(string value);
    public string get_defaultPivotStyle();
    public void set_defaultPivotStyle(string value);
}
public class NPOI.OpenXmlFormats.Spreadsheet.CT_Top10 : object {
    private bool topField;
    private bool percentField;
    private double valField;
    private double filterValField;
    private bool filterValFieldSpecified;
    [DefaultValueAttribute("True")]
public bool top { get; public set; }
    [DefaultValueAttribute("False")]
public bool percent { get; public set; }
    public double val { get; public set; }
    public double filterVal { get; public set; }
    [XmlIgnoreAttribute]
public bool filterValSpecified { get; public set; }
    public bool get_top();
    public void set_top(bool value);
    public bool get_percent();
    public void set_percent(bool value);
    public double get_val();
    public void set_val(double value);
    public double get_filterVal();
    public void set_filterVal(double value);
    public bool get_filterValSpecified();
    public void set_filterValSpecified(bool value);
}
[XmlTypeAttribute]
[XmlRootAttribute]
public class NPOI.OpenXmlFormats.Spreadsheet.CT_Tuple : object {
    private UInt32 fldField;
    private bool fldFieldSpecified;
    private UInt32 hierField;
    private bool hierFieldSpecified;
    private UInt32 itemField;
    [XmlAttributeAttribute]
public UInt32 fld { get; public set; }
    [XmlIgnoreAttribute]
public bool fldSpecified { get; public set; }
    [XmlAttributeAttribute]
public UInt32 hier { get; public set; }
    [XmlIgnoreAttribute]
public bool hierSpecified { get; public set; }
    [XmlAttributeAttribute]
public UInt32 item { get; public set; }
    public UInt32 get_fld();
    public void set_fld(UInt32 value);
    public bool get_fldSpecified();
    public void set_fldSpecified(bool value);
    public UInt32 get_hier();
    public void set_hier(UInt32 value);
    public bool get_hierSpecified();
    public void set_hierSpecified(bool value);
    public UInt32 get_item();
    public void set_item(UInt32 value);
    public static CT_Tuple Parse(XmlNode node, XmlNamespaceManager namespaceManager);
    internal void Write(StreamWriter sw, string nodeName);
}
[XmlTypeAttribute]
[XmlRootAttribute]
public class NPOI.OpenXmlFormats.Spreadsheet.CT_TupleCache : object {
    private CT_PCDSDTCEntries entriesField;
    private CT_Sets setsField;
    private CT_QueryCache queryCacheField;
    private CT_ServerFormats serverFormatsField;
    private CT_ExtensionList extLstField;
    [XmlElementAttribute]
public CT_PCDSDTCEntries entries { get; public set; }
    [XmlElementAttribute]
public CT_Sets sets { get; public set; }
    [XmlElementAttribute]
public CT_QueryCache queryCache { get; public set; }
    [XmlElementAttribute]
public CT_ServerFormats serverFormats { get; public set; }
    [XmlElementAttribute]
public CT_ExtensionList extLst { get; public set; }
    public static CT_TupleCache Parse(XmlNode node, XmlNamespaceManager namespaceManager);
    internal void Write(StreamWriter sw, string nodeName);
    public CT_PCDSDTCEntries get_entries();
    public void set_entries(CT_PCDSDTCEntries value);
    public CT_Sets get_sets();
    public void set_sets(CT_Sets value);
    public CT_QueryCache get_queryCache();
    public void set_queryCache(CT_QueryCache value);
    public CT_ServerFormats get_serverFormats();
    public void set_serverFormats(CT_ServerFormats value);
    public CT_ExtensionList get_extLst();
    public void set_extLst(CT_ExtensionList value);
}
[XmlTypeAttribute]
[XmlRootAttribute]
public class NPOI.OpenXmlFormats.Spreadsheet.CT_Tuples : object {
    private List`1<CT_Tuple> tplField;
    private UInt32 cField;
    private bool cFieldSpecified;
    [XmlElementAttribute("tpl")]
public List`1<CT_Tuple> tpl { get; public set; }
    [XmlAttributeAttribute]
public UInt32 c { get; public set; }
    [XmlIgnoreAttribute]
public bool cSpecified { get; public set; }
    public List`1<CT_Tuple> get_tpl();
    public void set_tpl(List`1<CT_Tuple> value);
    public UInt32 get_c();
    public void set_c(UInt32 value);
    public bool get_cSpecified();
    public void set_cSpecified(bool value);
    public static CT_Tuples Parse(XmlNode node, XmlNamespaceManager namespaceManager);
    internal void Write(StreamWriter sw, string nodeName);
}
[XmlTypeAttribute]
public class NPOI.OpenXmlFormats.Spreadsheet.CT_UnderlineProperty : object {
    private Nullable`1<ST_UnderlineValues> valField;
    [DefaultValueAttribute("Mono.Cecil.CustomAttributeArgument")]
[XmlAttributeAttribute]
public ST_UnderlineValues val { get; public set; }
    [XmlIgnoreAttribute]
public bool valbSpecified { get; }
    public static CT_UnderlineProperty Parse(XmlNode node, XmlNamespaceManager namespaceManager);
    internal void Write(StreamWriter sw, string nodeName);
    public ST_UnderlineValues get_val();
    public void set_val(ST_UnderlineValues value);
    public bool get_valbSpecified();
}
public class NPOI.OpenXmlFormats.Spreadsheet.CT_UndoInfo : object {
    private UInt32 indexField;
    private ST_FormulaExpression expField;
    private bool ref3DField;
    private bool arrayField;
    private bool vField;
    private bool nfField;
    private bool csField;
    private string drField;
    private string dnField;
    private string rField;
    private UInt32 sIdField;
    private bool sIdFieldSpecified;
    public UInt32 index { get; public set; }
    public ST_FormulaExpression exp { get; public set; }
    [DefaultValueAttribute("False")]
public bool ref3D { get; public set; }
    [DefaultValueAttribute("False")]
public bool array { get; public set; }
    [DefaultValueAttribute("False")]
public bool v { get; public set; }
    [DefaultValueAttribute("False")]
public bool nf { get; public set; }
    [DefaultValueAttribute("False")]
public bool cs { get; public set; }
    public string dr { get; public set; }
    public string dn { get; public set; }
    public string r { get; public set; }
    public UInt32 sId { get; public set; }
    [XmlIgnoreAttribute]
public bool sIdSpecified { get; public set; }
    public UInt32 get_index();
    public void set_index(UInt32 value);
    public ST_FormulaExpression get_exp();
    public void set_exp(ST_FormulaExpression value);
    public bool get_ref3D();
    public void set_ref3D(bool value);
    public bool get_array();
    public void set_array(bool value);
    public bool get_v();
    public void set_v(bool value);
    public bool get_nf();
    public void set_nf(bool value);
    public bool get_cs();
    public void set_cs(bool value);
    public string get_dr();
    public void set_dr(string value);
    public string get_dn();
    public void set_dn(string value);
    public string get_r();
    public void set_r(string value);
    public UInt32 get_sId();
    public void set_sId(UInt32 value);
    public bool get_sIdSpecified();
    public void set_sIdSpecified(bool value);
}
public class NPOI.OpenXmlFormats.Spreadsheet.CT_Users : object {
    private List`1<CT_SharedUser> userInfoField;
    private UInt32 countField;
    private bool countFieldSpecified;
    public List`1<CT_SharedUser> userInfo { get; public set; }
    public UInt32 count { get; public set; }
    [XmlIgnoreAttribute]
public bool countSpecified { get; public set; }
    public List`1<CT_SharedUser> get_userInfo();
    public void set_userInfo(List`1<CT_SharedUser> value);
    public UInt32 get_count();
    public void set_count(UInt32 value);
    public bool get_countSpecified();
    public void set_countSpecified(bool value);
}
[XmlTypeAttribute]
public class NPOI.OpenXmlFormats.Spreadsheet.CT_VerticalAlignFontProperty : object {
    private ST_VerticalAlignRun valField;
    [XmlAttributeAttribute]
public ST_VerticalAlignRun val { get; public set; }
    public ST_VerticalAlignRun get_val();
    public void set_val(ST_VerticalAlignRun value);
    public static CT_VerticalAlignFontProperty Parse(XmlNode node, XmlNamespaceManager namespaceManager);
    internal void Write(StreamWriter sw, string nodeName);
}
[XmlTypeAttribute]
public class NPOI.OpenXmlFormats.Spreadsheet.CT_WebPublishing : object {
    private bool cssField;
    private bool thicketField;
    private bool longFileNamesField;
    private bool vmlField;
    private bool allowPngField;
    private ST_TargetScreenSize targetScreenSizeField;
    private UInt32 dpiField;
    private UInt32 codePageField;
    private bool codePageFieldSpecified;
    [DefaultValueAttribute("True")]
public bool css { get; public set; }
    [DefaultValueAttribute("True")]
public bool thicket { get; public set; }
    [DefaultValueAttribute("True")]
public bool longFileNames { get; public set; }
    [DefaultValueAttribute("False")]
public bool vml { get; public set; }
    [DefaultValueAttribute("False")]
public bool allowPng { get; public set; }
    [DefaultValueAttribute("Mono.Cecil.CustomAttributeArgument")]
public ST_TargetScreenSize targetScreenSize { get; public set; }
    [DefaultValueAttribute("System.UInt32", "96")]
public UInt32 dpi { get; public set; }
    public UInt32 codePage { get; public set; }
    [XmlIgnoreAttribute]
public bool codePageSpecified { get; public set; }
    public static CT_WebPublishing Parse(XmlNode node, XmlNamespaceManager namespaceManager);
    internal void Write(StreamWriter sw, string nodeName);
    public bool get_css();
    public void set_css(bool value);
    public bool get_thicket();
    public void set_thicket(bool value);
    public bool get_longFileNames();
    public void set_longFileNames(bool value);
    public bool get_vml();
    public void set_vml(bool value);
    public bool get_allowPng();
    public void set_allowPng(bool value);
    public ST_TargetScreenSize get_targetScreenSize();
    public void set_targetScreenSize(ST_TargetScreenSize value);
    public UInt32 get_dpi();
    public void set_dpi(UInt32 value);
    public UInt32 get_codePage();
    public void set_codePage(UInt32 value);
    public bool get_codePageSpecified();
    public void set_codePageSpecified(bool value);
}
[XmlTypeAttribute]
public class NPOI.OpenXmlFormats.Spreadsheet.CT_WebPublishItem : object {
    private UInt32 idField;
    private string divIdField;
    private ST_WebSourceType sourceTypeField;
    private string sourceRefField;
    private string sourceObjectField;
    private string destinationFileField;
    private string titleField;
    private bool autoRepublishField;
    public UInt32 id { get; public set; }
    public string divId { get; public set; }
    public ST_WebSourceType sourceType { get; public set; }
    public string sourceRef { get; public set; }
    public string sourceObject { get; public set; }
    public string destinationFile { get; public set; }
    public string title { get; public set; }
    [DefaultValueAttribute("False")]
public bool autoRepublish { get; public set; }
    public static CT_WebPublishItem Parse(XmlNode node, XmlNamespaceManager namespaceManager);
    internal void Write(StreamWriter sw, string nodeName);
    public UInt32 get_id();
    public void set_id(UInt32 value);
    public string get_divId();
    public void set_divId(string value);
    public ST_WebSourceType get_sourceType();
    public void set_sourceType(ST_WebSourceType value);
    public string get_sourceRef();
    public void set_sourceRef(string value);
    public string get_sourceObject();
    public void set_sourceObject(string value);
    public string get_destinationFile();
    public void set_destinationFile(string value);
    public string get_title();
    public void set_title(string value);
    public bool get_autoRepublish();
    public void set_autoRepublish(bool value);
}
[XmlTypeAttribute]
public class NPOI.OpenXmlFormats.Spreadsheet.CT_WebPublishItems : object {
    private List`1<CT_WebPublishItem> webPublishItemField;
    private UInt32 countField;
    private bool countFieldSpecified;
    public List`1<CT_WebPublishItem> webPublishItem { get; public set; }
    public UInt32 count { get; public set; }
    [XmlIgnoreAttribute]
public bool countSpecified { get; public set; }
    public static CT_WebPublishItems Parse(XmlNode node, XmlNamespaceManager namespaceManager);
    internal void Write(StreamWriter sw, string nodeName);
    public List`1<CT_WebPublishItem> get_webPublishItem();
    public void set_webPublishItem(List`1<CT_WebPublishItem> value);
    public UInt32 get_count();
    public void set_count(UInt32 value);
    public bool get_countSpecified();
    public void set_countSpecified(bool value);
}
[XmlTypeAttribute]
public class NPOI.OpenXmlFormats.Spreadsheet.CT_WebPublishObject : object {
    private UInt32 idField;
    private string divIdField;
    private string sourceObjectField;
    private string destinationFileField;
    private string titleField;
    private bool autoRepublishField;
    [XmlAnyAttributeAttribute]
public UInt32 id { get; public set; }
    [XmlAnyAttributeAttribute]
public string divId { get; public set; }
    [XmlAnyAttributeAttribute]
public string sourceObject { get; public set; }
    [XmlAnyAttributeAttribute]
public string destinationFile { get; public set; }
    [XmlAnyAttributeAttribute]
public string title { get; public set; }
    [XmlAnyAttributeAttribute]
[DefaultValueAttribute("False")]
public bool autoRepublish { get; public set; }
    public static CT_WebPublishObject Parse(XmlNode node, XmlNamespaceManager namespaceManager);
    internal void Write(StreamWriter sw, string nodeName);
    public UInt32 get_id();
    public void set_id(UInt32 value);
    public string get_divId();
    public void set_divId(string value);
    public string get_sourceObject();
    public void set_sourceObject(string value);
    public string get_destinationFile();
    public void set_destinationFile(string value);
    public string get_title();
    public void set_title(string value);
    public bool get_autoRepublish();
    public void set_autoRepublish(bool value);
}
[XmlTypeAttribute]
public class NPOI.OpenXmlFormats.Spreadsheet.CT_WebPublishObjects : object {
    private List`1<CT_WebPublishObject> webPublishObjectField;
    private UInt32 countField;
    private bool countFieldSpecified;
    [XmlElementAttribute]
public List`1<CT_WebPublishObject> webPublishObject { get; public set; }
    [XmlAttributeAttribute]
public UInt32 count { get; public set; }
    [XmlIgnoreAttribute]
public bool countSpecified { get; public set; }
    public static CT_WebPublishObjects Parse(XmlNode node, XmlNamespaceManager namespaceManager);
    internal void Write(StreamWriter sw, string nodeName);
    public List`1<CT_WebPublishObject> get_webPublishObject();
    public void set_webPublishObject(List`1<CT_WebPublishObject> value);
    public UInt32 get_count();
    public void set_count(UInt32 value);
    public bool get_countSpecified();
    public void set_countSpecified(bool value);
}
[XmlTypeAttribute]
[XmlRootAttribute]
public class NPOI.OpenXmlFormats.Spreadsheet.CT_Workbook : object {
    private CT_FileVersion fileVersionField;
    private CT_FileSharing fileSharingField;
    private CT_WorkbookPr workbookPrField;
    private CT_WorkbookProtection workbookProtectionField;
    private CT_BookViews bookViewsField;
    private CT_Sheets sheetsField;
    private CT_FunctionGroups functionGroupsField;
    private CT_ExternalReferences externalReferencesField;
    private CT_DefinedNames definedNamesField;
    private CT_CalcPr calcPrField;
    private CT_OleSize oleSizeField;
    private CT_CustomWorkbookViews customWorkbookViewsField;
    private CT_PivotCaches pivotCachesField;
    private CT_SmartTagPr smartTagPrField;
    private CT_SmartTagTypes smartTagTypesField;
    private CT_WebPublishing webPublishingField;
    private List`1<CT_FileRecoveryPr> fileRecoveryPrField;
    private CT_WebPublishObjects webPublishObjectsField;
    private CT_ExtensionList extLstField;
    [XmlElementAttribute]
public CT_FileVersion fileVersion { get; public set; }
    [XmlElementAttribute]
public CT_FileSharing fileSharing { get; public set; }
    [XmlElementAttribute]
public CT_WorkbookPr workbookPr { get; public set; }
    [XmlElementAttribute]
public CT_WorkbookProtection workbookProtection { get; public set; }
    [XmlElementAttribute("bookViews")]
public CT_BookViews bookViews { get; public set; }
    [XmlElementAttribute("sheets")]
public CT_Sheets sheets { get; public set; }
    [XmlElementAttribute]
public CT_FunctionGroups functionGroups { get; public set; }
    [XmlElementAttribute]
public CT_ExternalReferences externalReferences { get; public set; }
    [XmlElementAttribute]
public CT_DefinedNames definedNames { get; public set; }
    [XmlElementAttribute]
public CT_CalcPr calcPr { get; public set; }
    [XmlElementAttribute]
public CT_OleSize oleSize { get; public set; }
    [XmlElementAttribute]
public CT_CustomWorkbookViews customWorkbookViews { get; public set; }
    [XmlElementAttribute]
public CT_PivotCaches pivotCaches { get; public set; }
    [XmlElementAttribute]
public CT_SmartTagPr smartTagPr { get; public set; }
    [XmlElementAttribute]
public CT_SmartTagTypes smartTagTypes { get; public set; }
    [XmlElementAttribute]
public CT_WebPublishing webPublishing { get; public set; }
    [XmlElementAttribute]
public List`1<CT_FileRecoveryPr> fileRecoveryPr { get; public set; }
    [XmlElementAttribute]
public CT_WebPublishObjects webPublishObjects { get; public set; }
    [XmlElementAttribute]
public CT_ExtensionList extLst { get; public set; }
    public static CT_Workbook Parse(XmlNode node, XmlNamespaceManager namespaceManager);
    internal void Write(StreamWriter sw);
    public CT_WorkbookPr AddNewWorkbookPr();
    public CT_CalcPr AddNewCalcPr();
    public CT_Sheets AddNewSheets();
    public CT_BookViews AddNewBookViews();
    public bool IsSetWorkbookPr();
    public bool IsSetCalcPr();
    public bool IsSetSheets();
    public bool IsSetBookViews();
    public bool IsSetExternalReferences();
    public bool IsSetDefinedNames();
    public CT_DefinedNames AddNewDefinedNames();
    public void SetDefinedNames(CT_DefinedNames definedNames);
    public void unsetDefinedNames();
    public CT_FileVersion get_fileVersion();
    public void set_fileVersion(CT_FileVersion value);
    public CT_FileSharing get_fileSharing();
    public void set_fileSharing(CT_FileSharing value);
    public CT_WorkbookPr get_workbookPr();
    public void set_workbookPr(CT_WorkbookPr value);
    public CT_WorkbookProtection get_workbookProtection();
    public void set_workbookProtection(CT_WorkbookProtection value);
    public CT_BookViews get_bookViews();
    public void set_bookViews(CT_BookViews value);
    public CT_Sheets get_sheets();
    public void set_sheets(CT_Sheets value);
    public CT_FunctionGroups get_functionGroups();
    public void set_functionGroups(CT_FunctionGroups value);
    public CT_ExternalReferences get_externalReferences();
    public void set_externalReferences(CT_ExternalReferences value);
    public CT_DefinedNames get_definedNames();
    public void set_definedNames(CT_DefinedNames value);
    public CT_CalcPr get_calcPr();
    public void set_calcPr(CT_CalcPr value);
    public CT_OleSize get_oleSize();
    public void set_oleSize(CT_OleSize value);
    public CT_CustomWorkbookViews get_customWorkbookViews();
    public void set_customWorkbookViews(CT_CustomWorkbookViews value);
    public CT_PivotCaches get_pivotCaches();
    public void set_pivotCaches(CT_PivotCaches value);
    public CT_SmartTagPr get_smartTagPr();
    public void set_smartTagPr(CT_SmartTagPr value);
    public CT_SmartTagTypes get_smartTagTypes();
    public void set_smartTagTypes(CT_SmartTagTypes value);
    public CT_WebPublishing get_webPublishing();
    public void set_webPublishing(CT_WebPublishing value);
    public List`1<CT_FileRecoveryPr> get_fileRecoveryPr();
    public void set_fileRecoveryPr(List`1<CT_FileRecoveryPr> value);
    public CT_WebPublishObjects get_webPublishObjects();
    public void set_webPublishObjects(CT_WebPublishObjects value);
    public CT_ExtensionList get_extLst();
    public void set_extLst(CT_ExtensionList value);
    public bool IsSetPivotCaches();
    public CT_PivotCaches AddNewPivotCaches();
}
[XmlTypeAttribute]
public class NPOI.OpenXmlFormats.Spreadsheet.CT_WorkbookPr : object {
    private bool date1904Field;
    private bool date1904FieldSpecifiedField;
    private ST_Objects showObjectsField;
    private bool showBorderUnselectedTablesField;
    private bool filterPrivacyField;
    private bool promptedSolutionsField;
    private bool showInkAnnotationField;
    private bool backupFileField;
    private bool saveExternalLinkValuesField;
    private ST_UpdateLinks updateLinksField;
    private string codeNameField;
    private bool hidePivotFieldListField;
    private bool showPivotChartFilterField;
    private bool allowRefreshQueryField;
    private bool publishItemsField;
    private bool checkCompatibilityField;
    private bool autoCompressPicturesField;
    private bool refreshAllConnectionsField;
    private UInt32 defaultThemeVersionField;
    private bool defaultThemeVersionFieldSpecified;
    [XmlAttributeAttribute]
[DefaultValueAttribute("False")]
public bool date1904 { get; public set; }
    [XmlIgnoreAttribute]
public bool date1904Specified { get; public set; }
    [XmlAttributeAttribute]
[DefaultValueAttribute("Mono.Cecil.CustomAttributeArgument")]
public ST_Objects showObjects { get; public set; }
    [XmlAttributeAttribute]
[DefaultValueAttribute("True")]
public bool showBorderUnselectedTables { get; public set; }
    [XmlAttributeAttribute]
[DefaultValueAttribute("False")]
public bool filterPrivacy { get; public set; }
    [XmlAttributeAttribute]
[DefaultValueAttribute("False")]
public bool promptedSolutions { get; public set; }
    [XmlAttributeAttribute]
[DefaultValueAttribute("True")]
public bool showInkAnnotation { get; public set; }
    [XmlAttributeAttribute]
[DefaultValueAttribute("False")]
public bool backupFile { get; public set; }
    [XmlAttributeAttribute]
[DefaultValueAttribute("True")]
public bool saveExternalLinkValues { get; public set; }
    [XmlAttributeAttribute]
[DefaultValueAttribute("Mono.Cecil.CustomAttributeArgument")]
public ST_UpdateLinks updateLinks { get; public set; }
    [XmlAttributeAttribute]
public string codeName { get; public set; }
    [XmlAttributeAttribute]
[DefaultValueAttribute("False")]
public bool hidePivotFieldList { get; public set; }
    [XmlAttributeAttribute]
[DefaultValueAttribute("False")]
public bool showPivotChartFilter { get; public set; }
    [XmlAttributeAttribute]
[DefaultValueAttribute("False")]
public bool allowRefreshQuery { get; public set; }
    [XmlAttributeAttribute]
[DefaultValueAttribute("False")]
public bool publishItems { get; public set; }
    [XmlAttributeAttribute]
[DefaultValueAttribute("False")]
public bool checkCompatibility { get; public set; }
    [XmlAttributeAttribute]
[DefaultValueAttribute("True")]
public bool autoCompressPictures { get; public set; }
    [XmlAttributeAttribute]
[DefaultValueAttribute("False")]
public bool refreshAllConnections { get; public set; }
    [XmlAttributeAttribute]
public UInt32 defaultThemeVersion { get; public set; }
    [XmlIgnoreAttribute]
public bool defaultThemeVersionSpecified { get; public set; }
    public bool IsSetDate1904();
    public static CT_WorkbookPr Parse(XmlNode node, XmlNamespaceManager namespaceManager);
    internal void Write(StreamWriter sw, string nodeName);
    public bool get_date1904();
    public void set_date1904(bool value);
    public bool get_date1904Specified();
    public void set_date1904Specified(bool value);
    public ST_Objects get_showObjects();
    public void set_showObjects(ST_Objects value);
    public bool get_showBorderUnselectedTables();
    public void set_showBorderUnselectedTables(bool value);
    public bool get_filterPrivacy();
    public void set_filterPrivacy(bool value);
    public bool get_promptedSolutions();
    public void set_promptedSolutions(bool value);
    public bool get_showInkAnnotation();
    public void set_showInkAnnotation(bool value);
    public bool get_backupFile();
    public void set_backupFile(bool value);
    public bool get_saveExternalLinkValues();
    public void set_saveExternalLinkValues(bool value);
    public ST_UpdateLinks get_updateLinks();
    public void set_updateLinks(ST_UpdateLinks value);
    public string get_codeName();
    public void set_codeName(string value);
    public bool get_hidePivotFieldList();
    public void set_hidePivotFieldList(bool value);
    public bool get_showPivotChartFilter();
    public void set_showPivotChartFilter(bool value);
    public bool get_allowRefreshQuery();
    public void set_allowRefreshQuery(bool value);
    public bool get_publishItems();
    public void set_publishItems(bool value);
    public bool get_checkCompatibility();
    public void set_checkCompatibility(bool value);
    public bool get_autoCompressPictures();
    public void set_autoCompressPictures(bool value);
    public bool get_refreshAllConnections();
    public void set_refreshAllConnections(bool value);
    public UInt32 get_defaultThemeVersion();
    public void set_defaultThemeVersion(UInt32 value);
    public bool get_defaultThemeVersionSpecified();
    public void set_defaultThemeVersionSpecified(bool value);
}
[XmlTypeAttribute]
public class NPOI.OpenXmlFormats.Spreadsheet.CT_WorkbookProtection : object {
    private Byte[] workbookPasswordField;
    private Byte[] revisionsPasswordField;
    private bool lockStructureField;
    private bool lockWindowsField;
    private bool lockRevisionField;
    [XmlAttributeAttribute]
public Byte[] workbookPassword { get; public set; }
    [XmlAttributeAttribute]
public Byte[] revisionsPassword { get; public set; }
    [XmlAttributeAttribute]
[DefaultValueAttribute("False")]
public bool lockStructure { get; public set; }
    [XmlAttributeAttribute]
[DefaultValueAttribute("False")]
public bool lockWindows { get; public set; }
    [XmlAttributeAttribute]
[DefaultValueAttribute("False")]
public bool lockRevision { get; public set; }
    public static CT_WorkbookProtection Parse(XmlNode node, XmlNamespaceManager namespaceManager);
    internal void Write(StreamWriter sw, string nodeName);
    public Byte[] get_workbookPassword();
    public void set_workbookPassword(Byte[] value);
    public Byte[] get_revisionsPassword();
    public void set_revisionsPassword(Byte[] value);
    public bool get_lockStructure();
    public void set_lockStructure(bool value);
    public bool get_lockWindows();
    public void set_lockWindows(bool value);
    public bool get_lockRevision();
    public void set_lockRevision(bool value);
}
[XmlTypeAttribute]
[XmlRootAttribute]
public class NPOI.OpenXmlFormats.Spreadsheet.CT_Worksheet : object {
    private CT_SheetPr sheetPrField;
    private CT_SheetDimension dimensionField;
    private CT_SheetViews sheetViewsField;
    private CT_SheetFormatPr sheetFormatPrField;
    private List`1<CT_Cols> colsField;
    private CT_SheetData sheetDataField;
    private CT_SheetCalcPr sheetCalcPrField;
    private CT_SheetProtection sheetProtectionField;
    private CT_ProtectedRanges protectedRangesField;
    private CT_Scenarios scenariosField;
    private CT_AutoFilter autoFilterField;
    private CT_SortState sortStateField;
    private CT_DataConsolidate dataConsolidateField;
    private CT_CustomSheetViews customSheetViewsField;
    private CT_MergeCells mergeCellsField;
    private CT_PhoneticPr phoneticPrField;
    private List`1<CT_ConditionalFormatting> conditionalFormattingField;
    private CT_DataValidations dataValidationsField;
    private CT_Hyperlinks hyperlinksField;
    private CT_PrintOptions printOptionsField;
    private CT_PageMargins pageMarginsField;
    private CT_PageSetup pageSetupField;
    private CT_HeaderFooter headerFooterField;
    private CT_PageBreak rowBreaksField;
    private CT_PageBreak colBreaksField;
    private CT_CustomProperties customPropertiesField;
    private CT_CellWatches cellWatchesField;
    private CT_IgnoredErrors ignoredErrorsField;
    private CT_CellSmartTags smartTagsField;
    private CT_Drawing drawingField;
    private CT_LegacyDrawing legacyDrawingField;
    private CT_LegacyDrawing legacyDrawingHFField;
    private CT_SheetBackgroundPicture pictureField;
    private CT_OleObjects oleObjectsField;
    private CT_Controls controlsField;
    private CT_WebPublishItems webPublishItemsField;
    private CT_TableParts tablePartsField;
    private CT_ExtensionList extLstField;
    [XmlElementAttribute("sheetPr")]
public CT_SheetPr sheetPr { get; public set; }
    [XmlElementAttribute]
public CT_SheetDimension dimension { get; public set; }
    [XmlElementAttribute]
public CT_SheetViews sheetViews { get; public set; }
    [XmlElementAttribute]
public CT_SheetFormatPr sheetFormatPr { get; public set; }
    [XmlElementAttribute("cols")]
public List`1<CT_Cols> cols { get; public set; }
    [XmlElementAttribute("sheetData")]
public CT_SheetData sheetData { get; public set; }
    [XmlElementAttribute]
public CT_SheetCalcPr sheetCalcPr { get; public set; }
    [XmlElementAttribute]
public CT_SheetProtection sheetProtection { get; public set; }
    [XmlElementAttribute]
public CT_ProtectedRanges protectedRanges { get; public set; }
    public CT_Scenarios scenarios { get; public set; }
    public CT_AutoFilter autoFilter { get; public set; }
    public CT_SortState sortState { get; public set; }
    public CT_DataConsolidate dataConsolidate { get; public set; }
    [XmlElementAttribute]
public CT_CustomSheetViews customSheetViews { get; public set; }
    [XmlElementAttribute]
public CT_MergeCells mergeCells { get; public set; }
    [XmlElementAttribute]
public CT_PhoneticPr phoneticPr { get; public set; }
    [XmlElementAttribute]
public List`1<CT_ConditionalFormatting> conditionalFormatting { get; public set; }
    [XmlElementAttribute]
public CT_DataValidations dataValidations { get; public set; }
    [XmlElementAttribute]
public CT_Hyperlinks hyperlinks { get; public set; }
    [XmlElementAttribute]
public CT_PrintOptions printOptions { get; public set; }
    [XmlElementAttribute]
public CT_PageMargins pageMargins { get; public set; }
    [XmlElementAttribute]
public CT_PageSetup pageSetup { get; public set; }
    [XmlElementAttribute]
public CT_HeaderFooter headerFooter { get; public set; }
    [XmlElementAttribute]
public CT_PageBreak rowBreaks { get; public set; }
    [XmlElementAttribute]
public CT_PageBreak colBreaks { get; public set; }
    [XmlElementAttribute]
public CT_CustomProperties customProperties { get; public set; }
    [XmlElementAttribute]
public CT_CellWatches cellWatches { get; public set; }
    [XmlElementAttribute]
public CT_IgnoredErrors ignoredErrors { get; public set; }
    [XmlElementAttribute]
public CT_CellSmartTags smartTags { get; public set; }
    [XmlElementAttribute]
public CT_Drawing drawing { get; public set; }
    [XmlElementAttribute]
public CT_LegacyDrawing legacyDrawing { get; public set; }
    [XmlElementAttribute]
public CT_LegacyDrawing legacyDrawingHF { get; public set; }
    [XmlElementAttribute]
public CT_SheetBackgroundPicture picture { get; public set; }
    [XmlElementAttribute]
public CT_OleObjects oleObjects { get; public set; }
    [XmlElementAttribute]
public CT_Controls controls { get; public set; }
    [XmlElementAttribute]
public CT_WebPublishItems webPublishItems { get; public set; }
    [XmlElementAttribute]
public CT_TableParts tableParts { get; public set; }
    [XmlElementAttribute]
public CT_ExtensionList extLst { get; public set; }
    public static CT_Worksheet Parse(XmlNode node, XmlNamespaceManager namespaceManager);
    internal void Write(Stream stream, bool leaveOpen);
    public CT_AutoFilter AddNewAutoFilter();
    public bool IsSetRowBreaks();
    public CT_Drawing AddNewDrawing();
    public CT_LegacyDrawing AddNewLegacyDrawing();
    public CT_PageBreak AddNewRowBreaks();
    public CT_PageBreak AddNewColBreaks();
    public bool IsSetSheetFormatPr();
    public bool IsSetPrintOptions();
    public void UnsetMergeCells();
    public CT_PrintOptions AddNewPrintOptions();
    public CT_DataValidations AddNewDataValidations();
    public CT_SheetViews AddNewSheetViews();
    public CT_Hyperlinks AddNewHyperlinks();
    public CT_ConditionalFormatting AddNewConditionalFormatting();
    public CT_ConditionalFormatting GetConditionalFormattingArray(int index);
    public CT_MergeCells AddNewMergeCells();
    public bool IsSetColBreaks();
    public bool IsSetHyperlinks();
    public bool IsSetMergeCells();
    public bool IsSetSheetProtection();
    public bool IsSetDrawing();
    public void UnsetDrawing();
    public bool IsSetLegacyDrawing();
    public void UnsetLegacyDrawing();
    public bool IsSetPageSetup();
    public bool IsSetTableParts();
    public bool IsSetSheetCalcPr();
    public bool IsSetDimension();
    public CT_SheetProtection AddNewSheetProtection();
    public CT_TableParts AddNewTableParts();
    public CT_PageMargins AddNewPageMargins();
    public CT_PageSetup AddNewPageSetup();
    public void SetColsArray(List`1<CT_Cols> a);
    public int sizeOfColsArray();
    public void RemoveCols(int index);
    public CT_Cols AddNewCols();
    public void SetColsArray(int index, CT_Cols newCols);
    public CT_Cols GetColsArray(int index);
    public List`1<CT_Cols> GetColsList();
    public bool IsSetPageMargins();
    public bool IsSetHyperLinks();
    public bool IsSetSheetPr();
    public int SizeOfConditionalFormattingArray();
    public void UnsetSheetProtection();
    public CT_SheetFormatPr AddNewSheetFormatPr();
    public CT_SheetCalcPr AddNewSheetCalcPr();
    public CT_SheetPr AddNewSheetPr();
    public CT_SheetDimension AddNewDimension();
    public CT_SheetData AddNewSheetData();
    public CT_SheetPr get_sheetPr();
    public void set_sheetPr(CT_SheetPr value);
    public CT_SheetDimension get_dimension();
    public void set_dimension(CT_SheetDimension value);
    public CT_SheetViews get_sheetViews();
    public void set_sheetViews(CT_SheetViews value);
    public CT_SheetFormatPr get_sheetFormatPr();
    public void set_sheetFormatPr(CT_SheetFormatPr value);
    public List`1<CT_Cols> get_cols();
    public void set_cols(List`1<CT_Cols> value);
    public CT_SheetData get_sheetData();
    public void set_sheetData(CT_SheetData value);
    public CT_SheetCalcPr get_sheetCalcPr();
    public void set_sheetCalcPr(CT_SheetCalcPr value);
    public CT_SheetProtection get_sheetProtection();
    public void set_sheetProtection(CT_SheetProtection value);
    public CT_ProtectedRanges get_protectedRanges();
    public void set_protectedRanges(CT_ProtectedRanges value);
    public CT_Scenarios get_scenarios();
    public void set_scenarios(CT_Scenarios value);
    public CT_AutoFilter get_autoFilter();
    public void set_autoFilter(CT_AutoFilter value);
    public CT_SortState get_sortState();
    public void set_sortState(CT_SortState value);
    public CT_DataConsolidate get_dataConsolidate();
    public void set_dataConsolidate(CT_DataConsolidate value);
    public CT_CustomSheetViews get_customSheetViews();
    public void set_customSheetViews(CT_CustomSheetViews value);
    public CT_MergeCells get_mergeCells();
    public void set_mergeCells(CT_MergeCells value);
    public CT_PhoneticPr get_phoneticPr();
    public void set_phoneticPr(CT_PhoneticPr value);
    public List`1<CT_ConditionalFormatting> get_conditionalFormatting();
    public void set_conditionalFormatting(List`1<CT_ConditionalFormatting> value);
    public CT_DataValidations get_dataValidations();
    public void set_dataValidations(CT_DataValidations value);
    public CT_Hyperlinks get_hyperlinks();
    public void set_hyperlinks(CT_Hyperlinks value);
    public CT_PrintOptions get_printOptions();
    public void set_printOptions(CT_PrintOptions value);
    public CT_PageMargins get_pageMargins();
    public void set_pageMargins(CT_PageMargins value);
    public CT_PageSetup get_pageSetup();
    public void set_pageSetup(CT_PageSetup value);
    public CT_HeaderFooter get_headerFooter();
    public void set_headerFooter(CT_HeaderFooter value);
    public CT_PageBreak get_rowBreaks();
    public void set_rowBreaks(CT_PageBreak value);
    public CT_PageBreak get_colBreaks();
    public void set_colBreaks(CT_PageBreak value);
    public CT_CustomProperties get_customProperties();
    public void set_customProperties(CT_CustomProperties value);
    public CT_CellWatches get_cellWatches();
    public void set_cellWatches(CT_CellWatches value);
    public CT_IgnoredErrors get_ignoredErrors();
    public void set_ignoredErrors(CT_IgnoredErrors value);
    public CT_CellSmartTags get_smartTags();
    public void set_smartTags(CT_CellSmartTags value);
    public CT_Drawing get_drawing();
    public void set_drawing(CT_Drawing value);
    public CT_LegacyDrawing get_legacyDrawing();
    public void set_legacyDrawing(CT_LegacyDrawing value);
    public CT_LegacyDrawing get_legacyDrawingHF();
    public void set_legacyDrawingHF(CT_LegacyDrawing value);
    public CT_SheetBackgroundPicture get_picture();
    public void set_picture(CT_SheetBackgroundPicture value);
    public CT_OleObjects get_oleObjects();
    public void set_oleObjects(CT_OleObjects value);
    public CT_Controls get_controls();
    public void set_controls(CT_Controls value);
    public CT_WebPublishItems get_webPublishItems();
    public void set_webPublishItems(CT_WebPublishItems value);
    public CT_TableParts get_tableParts();
    public void set_tableParts(CT_TableParts value);
    public CT_ExtensionList get_extLst();
    public void set_extLst(CT_ExtensionList value);
    public void UnsetPageSetup();
    public bool IsSetIgnoredErrors();
    public CT_IgnoredErrors AddNewIgnoredErrors();
}
[XmlTypeAttribute]
[XmlRootAttribute]
public class NPOI.OpenXmlFormats.Spreadsheet.CT_WorksheetSource : object {
    private string refField;
    private string nameField;
    private string sheetField;
    private string idField;
    [XmlAttributeAttribute]
public string ref { get; public set; }
    [XmlAttributeAttribute]
public string name { get; public set; }
    [XmlAttributeAttribute]
public string sheet { get; public set; }
    [XmlAttributeAttribute]
public string id { get; public set; }
    public static CT_WorksheetSource Parse(XmlNode node, XmlNamespaceManager namespaceManager);
    internal void Write(StreamWriter sw, string nodeName);
    public string get_ref();
    public void set_ref(string value);
    public string get_name();
    public void set_name(string value);
    public string get_sheet();
    public void set_sheet(string value);
    public string get_id();
    public void set_id(string value);
}
[XmlTypeAttribute]
[XmlRootAttribute]
public class NPOI.OpenXmlFormats.Spreadsheet.CT_X : object {
    private int vField;
    [XmlAttributeAttribute]
[DefaultValueAttribute("0")]
public int v { get; public set; }
    public int get_v();
    public void set_v(int value);
    public static CT_X Parse(XmlNode node, XmlNamespaceManager namespaceManager);
    internal void Write(StreamWriter sw, string nodeName);
}
[XmlTypeAttribute]
[XmlRootAttribute]
public class NPOI.OpenXmlFormats.Spreadsheet.CT_Xf : object {
    private CT_CellAlignment alignmentField;
    private CT_CellProtection protectionField;
    private CT_ExtensionList extLstField;
    private UInt32 numFmtIdField;
    private UInt32 fontIdField;
    private UInt32 fillIdField;
    private UInt32 borderIdField;
    private UInt32 xfIdField;
    private bool quotePrefixField;
    private bool pivotButtonField;
    private bool applyNumberFormatField;
    private bool applyFontField;
    private bool applyFillField;
    private bool applyBorderField;
    private bool applyAlignmentField;
    private bool applyProtectionField;
    private bool numFmtIdSpecifiedField;
    private bool fontIdSpecifiedField;
    private bool fillIdSpecifiedField;
    private bool borderIdSpecifiedField;
    private bool xfIdSpecifiedField;
    [XmlElementAttribute]
public CT_CellAlignment alignment { get; public set; }
    [XmlElementAttribute]
public CT_CellProtection protection { get; public set; }
    [XmlElementAttribute]
public CT_ExtensionList extLst { get; public set; }
    [XmlAttributeAttribute]
public UInt32 numFmtId { get; public set; }
    [XmlIgnoreAttribute]
public bool numFmtIdSpecified { get; public set; }
    [XmlAttributeAttribute]
public UInt32 fontId { get; public set; }
    [XmlIgnoreAttribute]
public bool fontIdSpecified { get; public set; }
    [XmlAttributeAttribute]
public UInt32 fillId { get; public set; }
    [XmlIgnoreAttribute]
public bool fillIdSpecified { get; public set; }
    [XmlAttributeAttribute]
public UInt32 borderId { get; public set; }
    [XmlIgnoreAttribute]
public bool borderIdSpecified { get; public set; }
    [XmlAttributeAttribute]
public UInt32 xfId { get; public set; }
    [XmlIgnoreAttribute]
public bool xfIdSpecified { get; public set; }
    [XmlAttributeAttribute]
[DefaultValueAttribute("False")]
public bool quotePrefix { get; public set; }
    [XmlAttributeAttribute]
[DefaultValueAttribute("False")]
public bool pivotButton { get; public set; }
    [XmlAttributeAttribute]
[DefaultValueAttribute("False")]
public bool applyNumberFormat { get; public set; }
    [XmlAttributeAttribute]
[DefaultValueAttribute("False")]
public bool applyFont { get; public set; }
    [XmlAttributeAttribute]
[DefaultValueAttribute("False")]
public bool applyFill { get; public set; }
    [XmlAttributeAttribute]
[DefaultValueAttribute("False")]
public bool applyBorder { get; public set; }
    [XmlAttributeAttribute]
[DefaultValueAttribute("False")]
public bool applyAlignment { get; public set; }
    [XmlAttributeAttribute]
[DefaultValueAttribute("False")]
public bool applyProtection { get; public set; }
    public CT_Xf Copy();
    public CT_Xf CopyTo(CT_Xf obj);
    public static CT_Xf Parse(XmlNode node, XmlNamespaceManager namespaceManager);
    internal void Write(StreamWriter sw, string nodeName, bool writingCellStyle);
    public virtual string ToString();
    public bool IsSetFontId();
    public bool IsSetAlignment();
    public void UnsetAlignment();
    public bool IsSetExtLst();
    public void UnsetExtLst();
    public bool IsSetProtection();
    public void UnsetProtection();
    public bool IsSetLocked();
    public CT_CellProtection AddNewProtection();
    public CT_CellAlignment get_alignment();
    public void set_alignment(CT_CellAlignment value);
    public CT_CellProtection get_protection();
    public void set_protection(CT_CellProtection value);
    public CT_ExtensionList get_extLst();
    public void set_extLst(CT_ExtensionList value);
    public UInt32 get_numFmtId();
    public void set_numFmtId(UInt32 value);
    public bool get_numFmtIdSpecified();
    public void set_numFmtIdSpecified(bool value);
    public UInt32 get_fontId();
    public void set_fontId(UInt32 value);
    public bool get_fontIdSpecified();
    public void set_fontIdSpecified(bool value);
    public UInt32 get_fillId();
    public void set_fillId(UInt32 value);
    public bool get_fillIdSpecified();
    public void set_fillIdSpecified(bool value);
    public UInt32 get_borderId();
    public void set_borderId(UInt32 value);
    public bool get_borderIdSpecified();
    public void set_borderIdSpecified(bool value);
    public UInt32 get_xfId();
    public void set_xfId(UInt32 value);
    public bool get_xfIdSpecified();
    public void set_xfIdSpecified(bool value);
    public bool get_quotePrefix();
    public void set_quotePrefix(bool value);
    public bool get_pivotButton();
    public void set_pivotButton(bool value);
    public bool get_applyNumberFormat();
    public void set_applyNumberFormat(bool value);
    public bool get_applyFont();
    public void set_applyFont(bool value);
    public bool get_applyFill();
    public void set_applyFill(bool value);
    public bool get_applyBorder();
    public void set_applyBorder(bool value);
    public bool get_applyAlignment();
    public void set_applyAlignment(bool value);
    public bool get_applyProtection();
    public void set_applyProtection(bool value);
    public bool IsSetApplyFill();
}
[XmlTypeAttribute]
public class NPOI.OpenXmlFormats.Spreadsheet.CT_XmlCellPr : object {
    private CT_XmlPr xmlPrField;
    private CT_ExtensionList extLstField;
    private UInt32 idField;
    private string uniqueNameField;
    [XmlElementAttribute]
public CT_XmlPr xmlPr { get; public set; }
    [XmlElementAttribute]
public CT_ExtensionList extLst { get; public set; }
    [XmlAttributeAttribute]
public UInt32 id { get; public set; }
    [XmlAttributeAttribute]
public string uniqueName { get; public set; }
    public CT_XmlPr get_xmlPr();
    public void set_xmlPr(CT_XmlPr value);
    public CT_ExtensionList get_extLst();
    public void set_extLst(CT_ExtensionList value);
    public UInt32 get_id();
    public void set_id(UInt32 value);
    public string get_uniqueName();
    public void set_uniqueName(string value);
}
[XmlTypeAttribute]
public class NPOI.OpenXmlFormats.Spreadsheet.CT_XmlColumnPr : object {
    private CT_ExtensionList extLstField;
    private UInt32 mapIdField;
    private string xpathField;
    private bool denormalizedField;
    private ST_XmlDataType xmlDataTypeField;
    [XmlElementAttribute]
public CT_ExtensionList extLst { get; public set; }
    [XmlAttributeAttribute]
public UInt32 mapId { get; public set; }
    [XmlAttributeAttribute]
public string xpath { get; public set; }
    [XmlAttributeAttribute]
[DefaultValueAttribute("False")]
public bool denormalized { get; public set; }
    [XmlAttributeAttribute]
public ST_XmlDataType xmlDataType { get; public set; }
    public static CT_XmlColumnPr Parse(XmlNode node, XmlNamespaceManager namespaceManager);
    internal void Write(StreamWriter sw, string nodeName);
    public CT_ExtensionList get_extLst();
    public void set_extLst(CT_ExtensionList value);
    public UInt32 get_mapId();
    public void set_mapId(UInt32 value);
    public string get_xpath();
    public void set_xpath(string value);
    public bool get_denormalized();
    public void set_denormalized(bool value);
    public ST_XmlDataType get_xmlDataType();
    public void set_xmlDataType(ST_XmlDataType value);
}
[XmlTypeAttribute]
public class NPOI.OpenXmlFormats.Spreadsheet.CT_XmlPr : object {
    private CT_ExtensionList extLstField;
    private UInt32 mapIdField;
    private string xpathField;
    private ST_XmlDataType xmlDataTypeField;
    [XmlElementAttribute]
public CT_ExtensionList extLst { get; public set; }
    [XmlAttributeAttribute]
public UInt32 mapId { get; public set; }
    [XmlAttributeAttribute]
public string xpath { get; public set; }
    [XmlAttributeAttribute]
public ST_XmlDataType xmlDataType { get; public set; }
    public CT_ExtensionList get_extLst();
    public void set_extLst(CT_ExtensionList value);
    public UInt32 get_mapId();
    public void set_mapId(UInt32 value);
    public string get_xpath();
    public void set_xpath(string value);
    public ST_XmlDataType get_xmlDataType();
    public void set_xmlDataType(ST_XmlDataType value);
}
public class NPOI.OpenXmlFormats.Spreadsheet.CT_XStringElement : object {
    private string vField;
    public string v { get; public set; }
    public string get_v();
    public void set_v(string value);
}
public class NPOI.OpenXmlFormats.Spreadsheet.Document.ExternalLinkDocument : object {
    private CT_ExternalLink link;
    public CT_ExternalLink ExternalLink { get; public set; }
    public ExternalLinkDocument(CT_ExternalLink link);
    public static ExternalLinkDocument Parse(XmlDocument xmldoc, XmlNamespaceManager namespaceMgr);
    public CT_ExternalLink get_ExternalLink();
    public void set_ExternalLink(CT_ExternalLink value);
    public void Save(Stream stream);
}
public enum NPOI.OpenXmlFormats.Spreadsheet.ExternalLinkItem : Enum {
    public int value__;
    public static ExternalLinkItem none;
    public static ExternalLinkItem externalBook;
    public static ExternalLinkItem ddeLink;
    public static ExternalLinkItem extLst;
    public static ExternalLinkItem oleLink;
}
public enum NPOI.OpenXmlFormats.Spreadsheet.FontElementNameType : Enum {
    public int value__;
    public static FontElementNameType b;
    public static FontElementNameType charset;
    public static FontElementNameType color;
    public static FontElementNameType condense;
    public static FontElementNameType extend;
    public static FontElementNameType family;
    public static FontElementNameType i;
    public static FontElementNameType name;
    public static FontElementNameType outline;
    public static FontElementNameType rFont;
    public static FontElementNameType scheme;
    public static FontElementNameType shadow;
    public static FontElementNameType strike;
    public static FontElementNameType sz;
    public static FontElementNameType u;
    public static FontElementNameType vertAlign;
}
public class NPOI.OpenXmlFormats.Spreadsheet.MapInfoDocument : object {
    private CT_MapInfo mapInfo;
    [CompilerGeneratedAttribute]
private string <SelectionNamespaces>k__BackingField;
    public string SelectionNamespaces { get; public set; }
    public MapInfoDocument(CT_MapInfo map);
    public CT_MapInfo GetMapInfo();
    public void SetMapInfo(CT_MapInfo map);
    public void SetComments(CT_MapInfo map);
    [CompilerGeneratedAttribute]
public string get_SelectionNamespaces();
    [CompilerGeneratedAttribute]
public void set_SelectionNamespaces(string value);
    public void Save(Stream stream);
    public static MapInfoDocument Parse(XmlDocument xmlDoc, XmlNamespaceManager nameSpaceManager);
}
public class NPOI.OpenXmlFormats.Spreadsheet.SingleXmlCellsDocument : object {
    private static XmlSerializer serializer;
    private CT_SingleXmlCells cells;
    public SingleXmlCellsDocument(CT_SingleXmlCells cells);
    private static SingleXmlCellsDocument();
    public static SingleXmlCellsDocument Parse(Stream stream);
    public CT_SingleXmlCells GetSingleXmlCells();
    public void SetSingleXmlCells(CT_SingleXmlCells cells);
    public void Save(Stream stream);
}
public class NPOI.OpenXmlFormats.Spreadsheet.SstDocument : object {
    private CT_Sst sst;
    public SstDocument(CT_Sst sst);
    public void AddNewSst();
    public CT_Sst GetSst();
    public static SstDocument Parse(XmlDocument xml, XmlNamespaceManager namespaceManager);
    public void Save(Stream stream);
}
public enum NPOI.OpenXmlFormats.Spreadsheet.ST_Axis : Enum {
    public int value__;
    public static ST_Axis axisRow;
    public static ST_Axis axisCol;
    public static ST_Axis axisPage;
    public static ST_Axis axisValues;
}
public enum NPOI.OpenXmlFormats.Spreadsheet.ST_BorderStyle : Enum {
    public int value__;
    public static ST_BorderStyle none;
    public static ST_BorderStyle thin;
    public static ST_BorderStyle medium;
    public static ST_BorderStyle dashed;
    public static ST_BorderStyle dotted;
    public static ST_BorderStyle thick;
    public static ST_BorderStyle double;
    public static ST_BorderStyle hair;
    public static ST_BorderStyle mediumDashed;
    public static ST_BorderStyle dashDot;
    public static ST_BorderStyle mediumDashDot;
    public static ST_BorderStyle dashDotDot;
    public static ST_BorderStyle mediumDashDotDot;
    public static ST_BorderStyle slantDashDot;
}
public enum NPOI.OpenXmlFormats.Spreadsheet.ST_CalcMode : Enum {
    public int value__;
    public static ST_CalcMode manual;
    public static ST_CalcMode auto;
    public static ST_CalcMode autoNoTable;
}
public enum NPOI.OpenXmlFormats.Spreadsheet.ST_CalendarType : Enum {
    public int value__;
    public static ST_CalendarType none;
    public static ST_CalendarType gregorian;
    public static ST_CalendarType gregorianUs;
    public static ST_CalendarType japan;
    public static ST_CalendarType taiwan;
    public static ST_CalendarType korea;
    public static ST_CalendarType hijri;
    public static ST_CalendarType thai;
    public static ST_CalendarType hebrew;
    public static ST_CalendarType gregorianMeFrench;
    public static ST_CalendarType gregorianArabic;
    public static ST_CalendarType gregorianXlitEnglish;
    public static ST_CalendarType gregorianXlitFrench;
}
public enum NPOI.OpenXmlFormats.Spreadsheet.ST_CellComments : Enum {
    public int value__;
    public static ST_CellComments none;
    public static ST_CellComments asDisplayed;
    public static ST_CellComments atEnd;
}
public enum NPOI.OpenXmlFormats.Spreadsheet.ST_CellFormulaType : Enum {
    public int value__;
    public static ST_CellFormulaType normal;
    public static ST_CellFormulaType array;
    public static ST_CellFormulaType dataTable;
    public static ST_CellFormulaType shared;
}
[XmlTypeAttribute]
public enum NPOI.OpenXmlFormats.Spreadsheet.ST_CellType : Enum {
    public int value__;
    public static ST_CellType b;
    public static ST_CellType n;
    public static ST_CellType e;
    public static ST_CellType s;
    public static ST_CellType str;
    public static ST_CellType inlineStr;
}
public enum NPOI.OpenXmlFormats.Spreadsheet.ST_CfType : Enum {
    public int value__;
    public static ST_CfType expression;
    public static ST_CfType cellIs;
    public static ST_CfType colorScale;
    public static ST_CfType dataBar;
    public static ST_CfType iconSet;
    public static ST_CfType top10;
    public static ST_CfType uniqueValues;
    public static ST_CfType duplicateValues;
    public static ST_CfType containsText;
    public static ST_CfType notContainsText;
    public static ST_CfType beginsWith;
    public static ST_CfType endsWith;
    public static ST_CfType containsBlanks;
    public static ST_CfType notContainsBlanks;
    public static ST_CfType containsErrors;
    public static ST_CfType notContainsErrors;
    public static ST_CfType timePeriod;
    public static ST_CfType aboveAverage;
}
public enum NPOI.OpenXmlFormats.Spreadsheet.ST_CfvoType : Enum {
    public int value__;
    public static ST_CfvoType num;
    public static ST_CfvoType percent;
    public static ST_CfvoType max;
    public static ST_CfvoType min;
    public static ST_CfvoType formula;
    public static ST_CfvoType percentile;
    public static ST_CfvoType autoMin;
    public static ST_CfvoType autoMax;
}
public enum NPOI.OpenXmlFormats.Spreadsheet.ST_Comments : Enum {
    public int value__;
    public static ST_Comments commNone;
    public static ST_Comments commIndicator;
    public static ST_Comments commIndAndComment;
}
public enum NPOI.OpenXmlFormats.Spreadsheet.ST_ConditionalFormattingOperator : Enum {
    public int value__;
    public static ST_ConditionalFormattingOperator lessThan;
    public static ST_ConditionalFormattingOperator lessThanOrEqual;
    public static ST_ConditionalFormattingOperator equal;
    public static ST_ConditionalFormattingOperator notEqual;
    public static ST_ConditionalFormattingOperator greaterThanOrEqual;
    public static ST_ConditionalFormattingOperator greaterThan;
    public static ST_ConditionalFormattingOperator between;
    public static ST_ConditionalFormattingOperator notBetween;
    public static ST_ConditionalFormattingOperator containsText;
    public static ST_ConditionalFormattingOperator notContains;
    public static ST_ConditionalFormattingOperator beginsWith;
    public static ST_ConditionalFormattingOperator endsWith;
}
public enum NPOI.OpenXmlFormats.Spreadsheet.ST_DataConsolidateFunction : Enum {
    public int value__;
    public static ST_DataConsolidateFunction average;
    public static ST_DataConsolidateFunction count;
    public static ST_DataConsolidateFunction countNums;
    public static ST_DataConsolidateFunction max;
    public static ST_DataConsolidateFunction min;
    public static ST_DataConsolidateFunction product;
    public static ST_DataConsolidateFunction stdDev;
    public static ST_DataConsolidateFunction stdDevp;
    public static ST_DataConsolidateFunction sum;
    public static ST_DataConsolidateFunction var;
    public static ST_DataConsolidateFunction varp;
}
public enum NPOI.OpenXmlFormats.Spreadsheet.ST_DataValidationErrorStyle : Enum {
    public int value__;
    public static ST_DataValidationErrorStyle stop;
    public static ST_DataValidationErrorStyle warning;
    public static ST_DataValidationErrorStyle information;
}
public enum NPOI.OpenXmlFormats.Spreadsheet.ST_DataValidationImeMode : Enum {
    public int value__;
    public static ST_DataValidationImeMode noControl;
    public static ST_DataValidationImeMode off;
    public static ST_DataValidationImeMode on;
    public static ST_DataValidationImeMode disabled;
    public static ST_DataValidationImeMode hiragana;
    public static ST_DataValidationImeMode fullKatakana;
    public static ST_DataValidationImeMode halfKatakana;
    public static ST_DataValidationImeMode fullAlpha;
    public static ST_DataValidationImeMode halfAlpha;
    public static ST_DataValidationImeMode fullHangul;
    public static ST_DataValidationImeMode halfHangul;
}
public enum NPOI.OpenXmlFormats.Spreadsheet.ST_DataValidationOperator : Enum {
    public int value__;
    public static ST_DataValidationOperator between;
    public static ST_DataValidationOperator notBetween;
    public static ST_DataValidationOperator equal;
    public static ST_DataValidationOperator notEqual;
    public static ST_DataValidationOperator lessThan;
    public static ST_DataValidationOperator lessThanOrEqual;
    public static ST_DataValidationOperator greaterThan;
    public static ST_DataValidationOperator greaterThanOrEqual;
}
public enum NPOI.OpenXmlFormats.Spreadsheet.ST_DataValidationType : Enum {
    public int value__;
    public static ST_DataValidationType none;
    public static ST_DataValidationType whole;
    public static ST_DataValidationType decimal;
    public static ST_DataValidationType list;
    public static ST_DataValidationType date;
    public static ST_DataValidationType time;
    public static ST_DataValidationType textLength;
    public static ST_DataValidationType custom;
}
public enum NPOI.OpenXmlFormats.Spreadsheet.ST_DateTimeGrouping : Enum {
    public int value__;
    public static ST_DateTimeGrouping year;
    public static ST_DateTimeGrouping month;
    public static ST_DateTimeGrouping day;
    public static ST_DateTimeGrouping hour;
    public static ST_DateTimeGrouping minute;
    public static ST_DateTimeGrouping second;
}
[XmlTypeAttribute]
[XmlRootAttribute]
public enum NPOI.OpenXmlFormats.Spreadsheet.ST_DdeValueType : Enum {
    public int value__;
    public static ST_DdeValueType nil;
    public static ST_DdeValueType b;
    public static ST_DdeValueType n;
    public static ST_DdeValueType e;
    public static ST_DdeValueType str;
}
public enum NPOI.OpenXmlFormats.Spreadsheet.ST_DvAspect : Enum {
    public int value__;
    public static ST_DvAspect DVASPECT_CONTENT;
    public static ST_DvAspect DVASPECT_ICON;
}
public enum NPOI.OpenXmlFormats.Spreadsheet.ST_DynamicFilterType : Enum {
    public int value__;
    public static ST_DynamicFilterType null;
    public static ST_DynamicFilterType aboveAverage;
    public static ST_DynamicFilterType belowAverage;
    public static ST_DynamicFilterType tomorrow;
    public static ST_DynamicFilterType today;
    public static ST_DynamicFilterType yesterday;
    public static ST_DynamicFilterType nextWeek;
    public static ST_DynamicFilterType thisWeek;
    public static ST_DynamicFilterType lastWeek;
    public static ST_DynamicFilterType nextMonth;
    public static ST_DynamicFilterType thisMonth;
    public static ST_DynamicFilterType lastMonth;
    public static ST_DynamicFilterType nextQuarter;
    public static ST_DynamicFilterType thisQuarter;
    public static ST_DynamicFilterType lastQuarter;
    public static ST_DynamicFilterType nextYear;
    public static ST_DynamicFilterType thisYear;
    public static ST_DynamicFilterType lastYear;
    public static ST_DynamicFilterType yearToDate;
    public static ST_DynamicFilterType Q1;
    public static ST_DynamicFilterType Q2;
    public static ST_DynamicFilterType Q3;
    public static ST_DynamicFilterType Q4;
    public static ST_DynamicFilterType M1;
    public static ST_DynamicFilterType M2;
    public static ST_DynamicFilterType M3;
    public static ST_DynamicFilterType M4;
    public static ST_DynamicFilterType M5;
    public static ST_DynamicFilterType M6;
    public static ST_DynamicFilterType M7;
    public static ST_DynamicFilterType M8;
    public static ST_DynamicFilterType M9;
    public static ST_DynamicFilterType M10;
    public static ST_DynamicFilterType M11;
    public static ST_DynamicFilterType M12;
}
[XmlTypeAttribute]
[XmlRootAttribute]
public enum NPOI.OpenXmlFormats.Spreadsheet.ST_FieldSortType : Enum {
    public int value__;
    public static ST_FieldSortType manual;
    public static ST_FieldSortType ascending;
    public static ST_FieldSortType descending;
}
public enum NPOI.OpenXmlFormats.Spreadsheet.ST_FilterOperator : Enum {
    public int value__;
    public static ST_FilterOperator equal;
    public static ST_FilterOperator lessThan;
    public static ST_FilterOperator lessThanOrEqual;
    public static ST_FilterOperator notEqual;
    public static ST_FilterOperator greaterThanOrEqual;
    public static ST_FilterOperator greaterThan;
}
[XmlTypeAttribute]
public enum NPOI.OpenXmlFormats.Spreadsheet.ST_FontScheme : Enum {
    public int value__;
    public static ST_FontScheme none;
    public static ST_FontScheme major;
    public static ST_FontScheme minor;
}
[XmlTypeAttribute]
[XmlRootAttribute]
public enum NPOI.OpenXmlFormats.Spreadsheet.ST_FormatAction : Enum {
    public int value__;
    public static ST_FormatAction blank;
    public static ST_FormatAction formatting;
    public static ST_FormatAction drill;
    public static ST_FormatAction formula;
}
public enum NPOI.OpenXmlFormats.Spreadsheet.ST_FormulaExpression : Enum {
    public int value__;
    public static ST_FormulaExpression ref;
    public static ST_FormulaExpression refError;
    public static ST_FormulaExpression area;
    public static ST_FormulaExpression areaError;
    public static ST_FormulaExpression computedArea;
}
[XmlTypeAttribute]
public enum NPOI.OpenXmlFormats.Spreadsheet.ST_GradientType : Enum {
    public int value__;
    public static ST_GradientType NONE;
    public static ST_GradientType linear;
    public static ST_GradientType path;
}
[XmlTypeAttribute]
[XmlRootAttribute]
public enum NPOI.OpenXmlFormats.Spreadsheet.ST_GroupBy : Enum {
    public int value__;
    public static ST_GroupBy range;
    public static ST_GroupBy seconds;
    public static ST_GroupBy minutes;
    public static ST_GroupBy hours;
    public static ST_GroupBy days;
    public static ST_GroupBy months;
    public static ST_GroupBy quarters;
    public static ST_GroupBy years;
}
[XmlTypeAttribute]
[XmlRootAttribute]
public enum NPOI.OpenXmlFormats.Spreadsheet.ST_GrowShrinkType : Enum {
    public int value__;
    public static ST_GrowShrinkType insertDelete;
    public static ST_GrowShrinkType insertClear;
    public static ST_GrowShrinkType overwriteClear;
}
public enum NPOI.OpenXmlFormats.Spreadsheet.ST_HorizontalAlignment : Enum {
    public int value__;
    public static ST_HorizontalAlignment general;
    public static ST_HorizontalAlignment left;
    public static ST_HorizontalAlignment center;
    public static ST_HorizontalAlignment right;
    public static ST_HorizontalAlignment fill;
    public static ST_HorizontalAlignment justify;
    public static ST_HorizontalAlignment centerContinuous;
    public static ST_HorizontalAlignment distributed;
}
public enum NPOI.OpenXmlFormats.Spreadsheet.ST_IconSetType : Enum {
    public int value__;
    [DescriptionAttribute("3Arrows")]
public static ST_IconSetType Item3Arrows;
    [DescriptionAttribute("3ArrowsGray")]
public static ST_IconSetType Item3ArrowsGray;
    [DescriptionAttribute("3Flags")]
public static ST_IconSetType Item3Flags;
    [DescriptionAttribute("3TrafficLights1")]
public static ST_IconSetType Item3TrafficLights1;
    [DescriptionAttribute("3TrafficLights2")]
public static ST_IconSetType Item3TrafficLights2;
    [DescriptionAttribute("3Signs")]
public static ST_IconSetType Item3Signs;
    [DescriptionAttribute("3Symbols")]
public static ST_IconSetType Item3Symbols;
    [DescriptionAttribute("3Symbols2")]
public static ST_IconSetType Item3Symbols2;
    [DescriptionAttribute("4Arrows")]
public static ST_IconSetType Item4Arrows;
    [DescriptionAttribute("4ArrowsGray")]
public static ST_IconSetType Item4ArrowsGray;
    [DescriptionAttribute("4RedToBlack")]
public static ST_IconSetType Item4RedToBlack;
    [DescriptionAttribute("4Rating")]
public static ST_IconSetType Item4Rating;
    [DescriptionAttribute("4TrafficLights")]
public static ST_IconSetType Item4TrafficLights;
    [DescriptionAttribute("5Arrows")]
public static ST_IconSetType Item5Arrows;
    [DescriptionAttribute("5ArrowsGray")]
public static ST_IconSetType Item5ArrowsGray;
    [DescriptionAttribute("5Rating")]
public static ST_IconSetType Item5Rating;
    [DescriptionAttribute("5Quarters")]
public static ST_IconSetType Item5Quarters;
}
[XmlTypeAttribute]
[XmlRootAttribute]
public enum NPOI.OpenXmlFormats.Spreadsheet.ST_ItemType : Enum {
    public int value__;
    public static ST_ItemType data;
    public static ST_ItemType default;
    public static ST_ItemType sum;
    public static ST_ItemType countA;
    public static ST_ItemType avg;
    public static ST_ItemType max;
    public static ST_ItemType min;
    public static ST_ItemType product;
    public static ST_ItemType count;
    public static ST_ItemType stdDev;
    public static ST_ItemType stdDevP;
    public static ST_ItemType var;
    public static ST_ItemType varP;
    public static ST_ItemType grand;
    public static ST_ItemType blank;
}
public enum NPOI.OpenXmlFormats.Spreadsheet.ST_MdxFunctionType : Enum {
    public int value__;
    public static ST_MdxFunctionType m;
    public static ST_MdxFunctionType v;
    public static ST_MdxFunctionType s;
    public static ST_MdxFunctionType c;
    public static ST_MdxFunctionType r;
    public static ST_MdxFunctionType p;
    public static ST_MdxFunctionType k;
}
public enum NPOI.OpenXmlFormats.Spreadsheet.ST_MdxKPIProperty : Enum {
    public int value__;
    public static ST_MdxKPIProperty v;
    public static ST_MdxKPIProperty g;
    public static ST_MdxKPIProperty s;
    public static ST_MdxKPIProperty t;
    public static ST_MdxKPIProperty w;
    public static ST_MdxKPIProperty m;
}
public enum NPOI.OpenXmlFormats.Spreadsheet.ST_MdxSetOrder : Enum {
    public int value__;
    public static ST_MdxSetOrder u;
    public static ST_MdxSetOrder a;
    public static ST_MdxSetOrder d;
    public static ST_MdxSetOrder aa;
    public static ST_MdxSetOrder ad;
    public static ST_MdxSetOrder na;
    public static ST_MdxSetOrder nd;
}
public enum NPOI.OpenXmlFormats.Spreadsheet.ST_Objects : Enum {
    public int value__;
    public static ST_Objects all;
    public static ST_Objects placeholders;
    public static ST_Objects none;
}
public enum NPOI.OpenXmlFormats.Spreadsheet.ST_OleUpdate : Enum {
    public int value__;
    public static ST_OleUpdate OLEUPDATE_ALWAYS;
    public static ST_OleUpdate OLEUPDATE_ONCALL;
}
public enum NPOI.OpenXmlFormats.Spreadsheet.ST_Orientation : Enum {
    public int value__;
    public static ST_Orientation default;
    public static ST_Orientation portrait;
    public static ST_Orientation landscape;
}
public enum NPOI.OpenXmlFormats.Spreadsheet.ST_PageOrder : Enum {
    public int value__;
    public static ST_PageOrder downThenOver;
    public static ST_PageOrder overThenDown;
}
public enum NPOI.OpenXmlFormats.Spreadsheet.ST_Pane : Enum {
    public int value__;
    public static ST_Pane bottomRight;
    public static ST_Pane topRight;
    public static ST_Pane bottomLeft;
    public static ST_Pane topLeft;
}
public enum NPOI.OpenXmlFormats.Spreadsheet.ST_PaneState : Enum {
    public int value__;
    public static ST_PaneState split;
    public static ST_PaneState frozen;
    public static ST_PaneState frozenSplit;
}
[XmlTypeAttribute]
public enum NPOI.OpenXmlFormats.Spreadsheet.ST_PatternType : Enum {
    public int value__;
    public static ST_PatternType none;
    public static ST_PatternType solid;
    public static ST_PatternType mediumGray;
    public static ST_PatternType darkGray;
    public static ST_PatternType lightGray;
    public static ST_PatternType darkHorizontal;
    public static ST_PatternType darkVertical;
    public static ST_PatternType darkDown;
    public static ST_PatternType darkUp;
    public static ST_PatternType darkGrid;
    public static ST_PatternType darkTrellis;
    public static ST_PatternType lightHorizontal;
    public static ST_PatternType lightVertical;
    public static ST_PatternType lightDown;
    public static ST_PatternType lightUp;
    public static ST_PatternType lightGrid;
    public static ST_PatternType lightTrellis;
    public static ST_PatternType gray125;
    public static ST_PatternType gray0625;
}
public enum NPOI.OpenXmlFormats.Spreadsheet.ST_PhoneticAlignment : Enum {
    public int value__;
    public static ST_PhoneticAlignment noControl;
    public static ST_PhoneticAlignment left;
    public static ST_PhoneticAlignment center;
    public static ST_PhoneticAlignment distributed;
}
public enum NPOI.OpenXmlFormats.Spreadsheet.ST_PhoneticType : Enum {
    public int value__;
    public static ST_PhoneticType halfwidthKatakana;
    public static ST_PhoneticType fullwidthKatakana;
    public static ST_PhoneticType Hiragana;
    public static ST_PhoneticType noConversion;
}
public enum NPOI.OpenXmlFormats.Spreadsheet.ST_PivotAreaType : Enum {
    public int value__;
    public static ST_PivotAreaType none;
    public static ST_PivotAreaType normal;
    public static ST_PivotAreaType data;
    public static ST_PivotAreaType all;
    public static ST_PivotAreaType origin;
    public static ST_PivotAreaType button;
    public static ST_PivotAreaType topRight;
}
[XmlTypeAttribute]
[XmlRootAttribute]
public enum NPOI.OpenXmlFormats.Spreadsheet.ST_PivotFilterType : Enum {
    public int value__;
    public static ST_PivotFilterType unknown;
    public static ST_PivotFilterType count;
    public static ST_PivotFilterType percent;
    public static ST_PivotFilterType sum;
    public static ST_PivotFilterType captionEqual;
    public static ST_PivotFilterType captionNotEqual;
    public static ST_PivotFilterType captionBeginsWith;
    public static ST_PivotFilterType captionNotBeginsWith;
    public static ST_PivotFilterType captionEndsWith;
    public static ST_PivotFilterType captionNotEndsWith;
    public static ST_PivotFilterType captionContains;
    public static ST_PivotFilterType captionNotContains;
    public static ST_PivotFilterType captionGreaterThan;
    public static ST_PivotFilterType captionGreaterThanOrEqual;
    public static ST_PivotFilterType captionLessThan;
    public static ST_PivotFilterType captionLessThanOrEqual;
    public static ST_PivotFilterType captionBetween;
    public static ST_PivotFilterType captionNotBetween;
    public static ST_PivotFilterType valueEqual;
    public static ST_PivotFilterType valueNotEqual;
    public static ST_PivotFilterType valueGreaterThan;
    public static ST_PivotFilterType valueGreaterThanOrEqual;
    public static ST_PivotFilterType valueLessThan;
    public static ST_PivotFilterType valueLessThanOrEqual;
    public static ST_PivotFilterType valueBetween;
    public static ST_PivotFilterType valueNotBetween;
    public static ST_PivotFilterType dateEqual;
    public static ST_PivotFilterType dateNotEqual;
    public static ST_PivotFilterType dateOlderThan;
    public static ST_PivotFilterType dateOlderThanOrEqual;
    public static ST_PivotFilterType dateNewerThan;
    public static ST_PivotFilterType dateNewerThanOrEqual;
    public static ST_PivotFilterType dateBetween;
    public static ST_PivotFilterType dateNotBetween;
    public static ST_PivotFilterType tomorrow;
    public static ST_PivotFilterType today;
    public static ST_PivotFilterType yesterday;
    public static ST_PivotFilterType nextWeek;
    public static ST_PivotFilterType thisWeek;
    public static ST_PivotFilterType lastWeek;
    public static ST_PivotFilterType nextMonth;
    public static ST_PivotFilterType thisMonth;
    public static ST_PivotFilterType lastMonth;
    public static ST_PivotFilterType nextQuarter;
    public static ST_PivotFilterType thisQuarter;
    public static ST_PivotFilterType lastQuarter;
    public static ST_PivotFilterType nextYear;
    public static ST_PivotFilterType thisYear;
    public static ST_PivotFilterType lastYear;
    public static ST_PivotFilterType yearToDate;
    public static ST_PivotFilterType Q1;
    public static ST_PivotFilterType Q2;
    public static ST_PivotFilterType Q3;
    public static ST_PivotFilterType Q4;
    public static ST_PivotFilterType M1;
    public static ST_PivotFilterType M2;
    public static ST_PivotFilterType M3;
    public static ST_PivotFilterType M4;
    public static ST_PivotFilterType M5;
    public static ST_PivotFilterType M6;
    public static ST_PivotFilterType M7;
    public static ST_PivotFilterType M8;
    public static ST_PivotFilterType M9;
    public static ST_PivotFilterType M10;
    public static ST_PivotFilterType M11;
    public static ST_PivotFilterType M12;
}
public enum NPOI.OpenXmlFormats.Spreadsheet.ST_PrintError : Enum {
    public int value__;
    public static ST_PrintError displayed;
    public static ST_PrintError blank;
    public static ST_PrintError dash;
    public static ST_PrintError NA;
}
public enum NPOI.OpenXmlFormats.Spreadsheet.ST_RefMode : Enum {
    public int value__;
    public static ST_RefMode A1;
    public static ST_RefMode R1C1;
}
public enum NPOI.OpenXmlFormats.Spreadsheet.ST_RevisionAction : Enum {
    public int value__;
    public static ST_RevisionAction add;
    public static ST_RevisionAction delete;
}
public enum NPOI.OpenXmlFormats.Spreadsheet.ST_rwColActionType : Enum {
    public int value__;
    public static ST_rwColActionType insertRow;
    public static ST_rwColActionType deleteRow;
    public static ST_rwColActionType insertCol;
    public static ST_rwColActionType deleteCol;
}
[XmlTypeAttribute]
[XmlRootAttribute]
public enum NPOI.OpenXmlFormats.Spreadsheet.ST_Scope : Enum {
    public int value__;
    public static ST_Scope selection;
    public static ST_Scope data;
    public static ST_Scope field;
}
public enum NPOI.OpenXmlFormats.Spreadsheet.ST_SheetState : Enum {
    public int value__;
    public static ST_SheetState visible;
    public static ST_SheetState hidden;
    public static ST_SheetState veryHidden;
}
public enum NPOI.OpenXmlFormats.Spreadsheet.ST_SheetViewType : Enum {
    public int value__;
    public static ST_SheetViewType normal;
    public static ST_SheetViewType pageBreakPreview;
    public static ST_SheetViewType pageLayout;
}
[XmlTypeAttribute]
[XmlRootAttribute]
public enum NPOI.OpenXmlFormats.Spreadsheet.ST_ShowDataAs : Enum {
    public int value__;
    public static ST_ShowDataAs normal;
    public static ST_ShowDataAs difference;
    public static ST_ShowDataAs percent;
    public static ST_ShowDataAs percentDiff;
    public static ST_ShowDataAs runTotal;
    public static ST_ShowDataAs percentOfRow;
    public static ST_ShowDataAs percentOfCol;
    public static ST_ShowDataAs percentOfTotal;
    public static ST_ShowDataAs index;
}
public enum NPOI.OpenXmlFormats.Spreadsheet.ST_SmartTagShow : Enum {
    public int value__;
    public static ST_SmartTagShow all;
    public static ST_SmartTagShow none;
    public static ST_SmartTagShow noIndicator;
}
public enum NPOI.OpenXmlFormats.Spreadsheet.ST_SortBy : Enum {
    public int value__;
    public static ST_SortBy value;
    public static ST_SortBy cellColor;
    public static ST_SortBy fontColor;
    public static ST_SortBy icon;
}
public enum NPOI.OpenXmlFormats.Spreadsheet.ST_SortMethod : Enum {
    public int value__;
    public static ST_SortMethod stroke;
    public static ST_SortMethod pinYin;
    public static ST_SortMethod none;
}
[XmlTypeAttribute]
[XmlRootAttribute]
public enum NPOI.OpenXmlFormats.Spreadsheet.ST_SortType : Enum {
    public int value__;
    public static ST_SortType none;
    public static ST_SortType ascending;
    public static ST_SortType descending;
    public static ST_SortType ascendingAlpha;
    public static ST_SortType descendingAlpha;
    public static ST_SortType ascendingNatural;
    public static ST_SortType descendingNatural;
}
[XmlTypeAttribute]
[XmlRootAttribute]
public enum NPOI.OpenXmlFormats.Spreadsheet.ST_SourceType : Enum {
    public int value__;
    public static ST_SourceType worksheet;
    public static ST_SourceType external;
    public static ST_SourceType consolidation;
    public static ST_SourceType scenario;
}
public enum NPOI.OpenXmlFormats.Spreadsheet.ST_TableStyleType : Enum {
    public int value__;
    public static ST_TableStyleType wholeTable;
    public static ST_TableStyleType headerRow;
    public static ST_TableStyleType totalRow;
    public static ST_TableStyleType firstColumn;
    public static ST_TableStyleType lastColumn;
    public static ST_TableStyleType firstRowStripe;
    public static ST_TableStyleType secondRowStripe;
    public static ST_TableStyleType firstColumnStripe;
    public static ST_TableStyleType secondColumnStripe;
    public static ST_TableStyleType firstHeaderCell;
    public static ST_TableStyleType lastHeaderCell;
    public static ST_TableStyleType firstTotalCell;
    public static ST_TableStyleType lastTotalCell;
    public static ST_TableStyleType firstSubtotalColumn;
    public static ST_TableStyleType secondSubtotalColumn;
    public static ST_TableStyleType thirdSubtotalColumn;
    public static ST_TableStyleType firstSubtotalRow;
    public static ST_TableStyleType secondSubtotalRow;
    public static ST_TableStyleType thirdSubtotalRow;
    public static ST_TableStyleType blankRow;
    public static ST_TableStyleType firstColumnSubheading;
    public static ST_TableStyleType secondColumnSubheading;
    public static ST_TableStyleType thirdColumnSubheading;
    public static ST_TableStyleType firstRowSubheading;
    public static ST_TableStyleType secondRowSubheading;
    public static ST_TableStyleType thirdRowSubheading;
    public static ST_TableStyleType pageFieldLabels;
    public static ST_TableStyleType pageFieldValues;
}
public enum NPOI.OpenXmlFormats.Spreadsheet.ST_TableType : Enum {
    public int value__;
    public static ST_TableType worksheet;
    public static ST_TableType xml;
    public static ST_TableType queryTable;
}
public enum NPOI.OpenXmlFormats.Spreadsheet.ST_TargetScreenSize : Enum {
    public int value__;
    [DescriptionAttribute("544x376")]
public static ST_TargetScreenSize Item544x376;
    [DescriptionAttribute("640x480")]
public static ST_TargetScreenSize Item640x480;
    [DescriptionAttribute("720x512")]
public static ST_TargetScreenSize Item720x512;
    [DescriptionAttribute("800x600")]
public static ST_TargetScreenSize Item800x600;
    [DescriptionAttribute("1024x768")]
public static ST_TargetScreenSize Item1024x768;
    [DescriptionAttribute("1152x882")]
public static ST_TargetScreenSize Item1152x882;
    [DescriptionAttribute("1152x900")]
public static ST_TargetScreenSize Item1152x900;
    [DescriptionAttribute("1280x1024")]
public static ST_TargetScreenSize Item1280x1024;
    [DescriptionAttribute("1600x1200")]
public static ST_TargetScreenSize Item1600x1200;
    [DescriptionAttribute("1800x1440")]
public static ST_TargetScreenSize Item1800x1440;
    [DescriptionAttribute("1920x1200")]
public static ST_TargetScreenSize Item1920x1200;
}
public enum NPOI.OpenXmlFormats.Spreadsheet.ST_TimePeriod : Enum {
    public int value__;
    public static ST_TimePeriod today;
    public static ST_TimePeriod yesterday;
    public static ST_TimePeriod tomorrow;
    public static ST_TimePeriod last7Days;
    public static ST_TimePeriod thisMonth;
    public static ST_TimePeriod lastMonth;
    public static ST_TimePeriod nextMonth;
    public static ST_TimePeriod thisWeek;
    public static ST_TimePeriod lastWeek;
    public static ST_TimePeriod nextWeek;
}
public enum NPOI.OpenXmlFormats.Spreadsheet.ST_TotalsRowFunction : Enum {
    public int value__;
    public static ST_TotalsRowFunction none;
    public static ST_TotalsRowFunction sum;
    public static ST_TotalsRowFunction min;
    public static ST_TotalsRowFunction max;
    public static ST_TotalsRowFunction average;
    public static ST_TotalsRowFunction count;
    public static ST_TotalsRowFunction countNums;
    public static ST_TotalsRowFunction stdDev;
    public static ST_TotalsRowFunction var;
    public static ST_TotalsRowFunction custom;
}
[XmlTypeAttribute]
[XmlRootAttribute]
public enum NPOI.OpenXmlFormats.Spreadsheet.ST_Type : Enum {
    public int value__;
    public static ST_Type none;
    public static ST_Type all;
    public static ST_Type row;
    public static ST_Type column;
}
[XmlTypeAttribute]
public enum NPOI.OpenXmlFormats.Spreadsheet.ST_UnderlineValues : Enum {
    public int value__;
    public static ST_UnderlineValues none;
    public static ST_UnderlineValues single;
    [XmlEnumAttribute("double")]
public static ST_UnderlineValues double;
    public static ST_UnderlineValues singleAccounting;
    public static ST_UnderlineValues doubleAccounting;
}
public class NPOI.OpenXmlFormats.Spreadsheet.ST_UnsignedshortHex : object {
    private string stringValueField;
    public string StringValue { get; public set; }
    public string get_StringValue();
    public void set_StringValue(string value);
    public Byte[] ToBytes();
}
public enum NPOI.OpenXmlFormats.Spreadsheet.ST_UpdateLinks : Enum {
    public int value__;
    public static ST_UpdateLinks userSet;
    public static ST_UpdateLinks never;
    public static ST_UpdateLinks always;
}
public enum NPOI.OpenXmlFormats.Spreadsheet.ST_VerticalAlignment : Enum {
    public int value__;
    public static ST_VerticalAlignment top;
    public static ST_VerticalAlignment center;
    public static ST_VerticalAlignment bottom;
    public static ST_VerticalAlignment justify;
    public static ST_VerticalAlignment distributed;
}
[XmlTypeAttribute]
public enum NPOI.OpenXmlFormats.Spreadsheet.ST_VerticalAlignRun : Enum {
    public int value__;
    public static ST_VerticalAlignRun baseline;
    public static ST_VerticalAlignRun superscript;
    public static ST_VerticalAlignRun subscript;
}
public enum NPOI.OpenXmlFormats.Spreadsheet.ST_Visibility : Enum {
    public int value__;
    public static ST_Visibility visible;
    public static ST_Visibility hidden;
    public static ST_Visibility veryHidden;
}
public enum NPOI.OpenXmlFormats.Spreadsheet.ST_WebSourceType : Enum {
    public int value__;
    public static ST_WebSourceType sheet;
    public static ST_WebSourceType printArea;
    public static ST_WebSourceType autoFilter;
    public static ST_WebSourceType range;
    public static ST_WebSourceType chart;
    public static ST_WebSourceType pivotTable;
    public static ST_WebSourceType query;
    public static ST_WebSourceType label;
}
public enum NPOI.OpenXmlFormats.Spreadsheet.ST_XmlDataType : Enum {
    public int value__;
    public static ST_XmlDataType string;
    public static ST_XmlDataType normalizedString;
    public static ST_XmlDataType token;
    public static ST_XmlDataType byte;
    public static ST_XmlDataType unsignedByte;
    public static ST_XmlDataType base64Binary;
    public static ST_XmlDataType hexBinary;
    public static ST_XmlDataType integer;
    public static ST_XmlDataType positiveInteger;
    public static ST_XmlDataType negativeInteger;
    public static ST_XmlDataType nonPositiveInteger;
    public static ST_XmlDataType nonNegativeInteger;
    public static ST_XmlDataType int;
    public static ST_XmlDataType unsignedInt;
    public static ST_XmlDataType long;
    public static ST_XmlDataType unsignedLong;
    public static ST_XmlDataType short;
    public static ST_XmlDataType unsignedShort;
    public static ST_XmlDataType decimal;
    public static ST_XmlDataType float;
    public static ST_XmlDataType double;
    public static ST_XmlDataType boolean;
    public static ST_XmlDataType time;
    public static ST_XmlDataType dateTime;
    public static ST_XmlDataType duration;
    public static ST_XmlDataType date;
    public static ST_XmlDataType gMonth;
    public static ST_XmlDataType gYear;
    public static ST_XmlDataType gYearMonth;
    public static ST_XmlDataType gDay;
    public static ST_XmlDataType gMonthDay;
    public static ST_XmlDataType Name;
    public static ST_XmlDataType QName;
    public static ST_XmlDataType NCName;
    public static ST_XmlDataType anyURI;
    public static ST_XmlDataType language;
    public static ST_XmlDataType ID;
    public static ST_XmlDataType IDREF;
    public static ST_XmlDataType IDREFS;
    public static ST_XmlDataType ENTITY;
    public static ST_XmlDataType ENTITIES;
    public static ST_XmlDataType NOTATION;
    public static ST_XmlDataType NMTOKEN;
    public static ST_XmlDataType NMTOKENS;
    public static ST_XmlDataType anyType;
}
public class NPOI.OpenXmlFormats.Spreadsheet.StyleSheetDocument : object {
    private CT_Stylesheet stylesheet;
    public StyleSheetDocument(CT_Stylesheet stylesheet);
    public static StyleSheetDocument Parse(XmlDocument xmldoc, XmlNamespaceManager namespaceManager);
    public void AddNewStyleSheet();
    public CT_Stylesheet GetStyleSheet();
    public void Save(Stream stream);
}
public class NPOI.OpenXmlFormats.Spreadsheet.TableDocument : object {
    private CT_Table ctTable;
    public TableDocument(CT_Table table);
    public static TableDocument Parse(XmlDocument xmldoc, XmlNamespaceManager namespaceMgr);
    public CT_Table GetTable();
    public void SetTable(CT_Table table);
    public void Save(Stream stream);
}
public class NPOI.OpenXmlFormats.Spreadsheet.ThemeDocument : object {
    private CT_OfficeStyleSheet stylesheet;
    public ThemeDocument(CT_OfficeStyleSheet stylesheet);
    public CT_OfficeStyleSheet GetTheme();
    public void Save(Stream stream);
    public static ThemeDocument Parse(XmlDocument xmldoc, XmlNamespaceManager namespaceManager);
    public CT_OfficeStyleSheet AddNewTheme();
}
public class NPOI.OpenXmlFormats.Spreadsheet.WorkbookDocument : object {
    private CT_Workbook workbook;
    public CT_Workbook Workbook { get; }
    public WorkbookDocument(CT_Workbook workbook);
    public static WorkbookDocument Parse(XmlDocument xmlDoc, XmlNamespaceManager NameSpaceManager);
    public CT_Workbook get_Workbook();
    public void Save(Stream stream);
}
public class NPOI.OpenXmlFormats.Spreadsheet.WorksheetDocument : object {
    private CT_Worksheet sheet;
    public WorksheetDocument(CT_Worksheet sheet);
    public static WorksheetDocument Parse(XmlDocument xmldoc, XmlNamespaceManager namespaceMgr);
    public CT_Worksheet GetWorksheet();
    public void SetChartsheet(CT_Worksheet sheet);
    public void Save(Stream stream, bool leaveOpen);
}
[XmlTypeAttribute]
public enum NPOI.OpenXmlFormats.ST_ArrayBaseType : Enum {
    public int value__;
    public static ST_ArrayBaseType variant;
    public static ST_ArrayBaseType i1;
    public static ST_ArrayBaseType i2;
    public static ST_ArrayBaseType i4;
    public static ST_ArrayBaseType int;
    public static ST_ArrayBaseType ui1;
    public static ST_ArrayBaseType ui2;
    public static ST_ArrayBaseType ui4;
    public static ST_ArrayBaseType uint;
    public static ST_ArrayBaseType r4;
    public static ST_ArrayBaseType r8;
    public static ST_ArrayBaseType decimal;
    public static ST_ArrayBaseType bstr;
    public static ST_ArrayBaseType date;
    public static ST_ArrayBaseType bool;
    public static ST_ArrayBaseType cy;
    public static ST_ArrayBaseType error;
}
[XmlTypeAttribute]
[XmlRootAttribute]
public enum NPOI.OpenXmlFormats.ST_CredMethod : Enum {
    public int value__;
    public static ST_CredMethod integrated;
    public static ST_CredMethod none;
    public static ST_CredMethod stored;
    public static ST_CredMethod prompt;
}
[XmlTypeAttribute]
[XmlRootAttribute]
public enum NPOI.OpenXmlFormats.ST_ExternalConnectionType : Enum {
    public int value__;
    public static ST_ExternalConnectionType general;
    public static ST_ExternalConnectionType text;
    public static ST_ExternalConnectionType MDY;
    public static ST_ExternalConnectionType DMY;
    public static ST_ExternalConnectionType YMD;
    public static ST_ExternalConnectionType MYD;
    public static ST_ExternalConnectionType DYM;
    public static ST_ExternalConnectionType YDM;
    public static ST_ExternalConnectionType skip;
    public static ST_ExternalConnectionType EMD;
}
[XmlTypeAttribute]
[XmlRootAttribute]
public enum NPOI.OpenXmlFormats.ST_FileType : Enum {
    public int value__;
    public static ST_FileType mac;
    public static ST_FileType win;
    public static ST_FileType dos;
}
[XmlTypeAttribute]
[XmlRootAttribute]
public enum NPOI.OpenXmlFormats.ST_HtmlFmt : Enum {
    public int value__;
    public static ST_HtmlFmt none;
    public static ST_HtmlFmt rtf;
    public static ST_HtmlFmt all;
}
[XmlTypeAttribute]
[XmlRootAttribute]
public enum NPOI.OpenXmlFormats.ST_ParameterType : Enum {
    public int value__;
    public static ST_ParameterType prompt;
    public static ST_ParameterType value;
    public static ST_ParameterType cell;
}
[XmlTypeAttribute]
[XmlRootAttribute]
public enum NPOI.OpenXmlFormats.ST_Qualifier : Enum {
    public int value__;
    public static ST_Qualifier doubleQuote;
    public static ST_Qualifier singleQuote;
    public static ST_Qualifier none;
}
public enum NPOI.OpenXmlFormats.ST_Relation : Enum {
    public int value__;
    public static ST_Relation ge;
    public static ST_Relation le;
    public static ST_Relation gt;
    public static ST_Relation lt;
    public static ST_Relation eq;
}
[XmlTypeAttribute]
[XmlRootAttribute]
public class NPOI.OpenXmlFormats.ST_RelationshipId : object {
    public static string NamespaceURI { get; }
    public static string get_NamespaceURI();
}
public enum NPOI.OpenXmlFormats.ST_SourceType : Enum {
    public int value__;
    public static ST_SourceType ArticleInAPeriodical;
    public static ST_SourceType Book;
    public static ST_SourceType BookSection;
    public static ST_SourceType JournalArticle;
    public static ST_SourceType ConferenceProceedings;
    public static ST_SourceType Report;
    public static ST_SourceType SoundRecording;
    public static ST_SourceType Performance;
    public static ST_SourceType Art;
    public static ST_SourceType DocumentFromInternetSite;
    public static ST_SourceType InternetSite;
    public static ST_SourceType Film;
    public static ST_SourceType Interview;
    public static ST_SourceType Patent;
    public static ST_SourceType ElectronicSource;
    public static ST_SourceType Case;
    public static ST_SourceType Misc;
}
[XmlTypeAttribute]
public enum NPOI.OpenXmlFormats.ST_VectorBaseType : Enum {
    public int value__;
    public static ST_VectorBaseType variant;
    public static ST_VectorBaseType i1;
    public static ST_VectorBaseType i2;
    public static ST_VectorBaseType i4;
    public static ST_VectorBaseType i8;
    public static ST_VectorBaseType ui1;
    public static ST_VectorBaseType ui2;
    public static ST_VectorBaseType ui4;
    public static ST_VectorBaseType ui8;
    public static ST_VectorBaseType r4;
    public static ST_VectorBaseType r8;
    public static ST_VectorBaseType lpstr;
    public static ST_VectorBaseType lpwstr;
    public static ST_VectorBaseType bstr;
    public static ST_VectorBaseType date;
    public static ST_VectorBaseType filetime;
    public static ST_VectorBaseType bool;
    public static ST_VectorBaseType cy;
    public static ST_VectorBaseType error;
    public static ST_VectorBaseType clsid;
    public static ST_VectorBaseType cf;
}
[ExtensionAttribute]
internal static class NPOI.OpenXmlFormats.StreamWriterExtensions : object {
    [ExtensionAttribute]
public static void WriteAttribute(StreamWriter sw, string name, string value);
    [ExtensionAttribute]
public static void WriteAttribute(StreamWriter sw, string name, int value);
    [ExtensionAttribute]
public static void WriteBooleanAttribute(StreamWriter sw, string name, bool value);
    [ExtensionAttribute]
public static void WriteElementAndContent(StreamWriter sw, string name, string value);
    [ExtensionAttribute]
public static void WriteEndElement(StreamWriter sw, string name);
    [ExtensionAttribute]
public static void WriteEndW(StreamWriter sw, string nodeName);
}
public static class NPOI.OpenXmlFormats.Util.XmlHelper : object {
    public static ST_TrueFalseBlank ReadTrueFalseBlank(string attrValue);
    public static ST_TrueFalseBlank ReadTrueFalseBlank(XmlAttribute attr);
    public static ST_TrueFalse ReadTrueFalse(XmlAttribute attr);
    public static ST_BorderShadow ReadBorderShadow(XmlAttribute attr);
    public static ST_TrueFalse ReadTrueFalse2(XmlAttribute attr);
    public static void WriteAttribute(StreamWriter sw, string attributeName, ST_TrueFalse value);
    public static void WriteAttribute(StreamWriter sw, string attributeName, ST_TrueFalse value, bool defaultValue);
    public static void WriteAttribute(StreamWriter sw, string attributeName, ST_BorderShadow value);
    public static void WriteAttribute(StreamWriter sw, string attributeName, ST_BorderShadow value, bool defaultValue);
    public static void WriteAttribute(StreamWriter sw, string attributeName, ST_TrueFalse value);
    public static void WriteAttribute(StreamWriter sw, string attributeName, ST_TrueFalse value, bool defaultValue);
    public static void WriteAttribute(StreamWriter sw, string attributeName, ST_TrueFalseBlank value);
    public static void WriteAttribute(StreamWriter sw, string attributeName, ST_TrueFalseBlank value, Nullable`1<bool> defaultValue);
}
public class NPOI.OpenXmlFormats.Vml.CT_AlternateContent : object {
    [CompilerGeneratedAttribute]
private string <InnerXml>k__BackingField;
    public string InnerXml { get; public set; }
    [CompilerGeneratedAttribute]
public string get_InnerXml();
    [CompilerGeneratedAttribute]
public void set_InnerXml(string value);
    public static CT_AlternateContent Parse(XmlNode node, XmlNamespaceManager namespaceManager);
    internal void Write(StreamWriter sw, string nodeName);
}
[DesignerCategoryAttribute("code")]
[XmlTypeAttribute]
[XmlRootAttribute]
public class NPOI.OpenXmlFormats.Vml.CT_Arc : object {
    private List`1<CT_Path> pathField;
    private List`1<CT_Formulas> formulasField;
    private List`1<CT_Handles> handlesField;
    private List`1<CT_Fill> fillField;
    private List`1<CT_Stroke> strokeField;
    private List`1<CT_Shadow> shadowField;
    private List`1<CT_Textbox> textboxField;
    private List`1<CT_TextPath> textpathField;
    private List`1<CT_ImageData> imagedataField;
    private List`1<CT_Wrap> wrapField;
    private List`1<CT_AnchorLock> anchorlockField;
    private List`1<CT_Border> bordertopField;
    private List`1<CT_Border> borderbottomField;
    private List`1<CT_Border> borderleftField;
    private List`1<CT_Border> borderrightField;
    private List`1<CT_ClientData> clientDataField;
    private List`1<CT_Rel> textdataField;
    private decimal startAngleField;
    private bool startAngleFieldSpecified;
    private decimal endAngleField;
    private bool endAngleFieldSpecified;
    [XmlElementAttribute("path")]
public List`1<CT_Path> path { get; public set; }
    [XmlElementAttribute("formulas")]
public List`1<CT_Formulas> formulas { get; public set; }
    [XmlElementAttribute("handles")]
public List`1<CT_Handles> handles { get; public set; }
    [XmlElementAttribute("fill")]
public List`1<CT_Fill> fill { get; public set; }
    [XmlElementAttribute("stroke")]
public List`1<CT_Stroke> stroke { get; public set; }
    [XmlElementAttribute("shadow")]
public List`1<CT_Shadow> shadow { get; public set; }
    [XmlElementAttribute("textbox")]
public List`1<CT_Textbox> textbox { get; public set; }
    [XmlElementAttribute("textpath")]
public List`1<CT_TextPath> textpath { get; public set; }
    [XmlElementAttribute("imagedata")]
public List`1<CT_ImageData> imagedata { get; public set; }
    [XmlElementAttribute("wrap")]
public List`1<CT_Wrap> wrap { get; public set; }
    [XmlElementAttribute("anchorlock")]
public List`1<CT_AnchorLock> anchorlock { get; public set; }
    [XmlElementAttribute("bordertop")]
public List`1<CT_Border> bordertop { get; public set; }
    [XmlElementAttribute("borderbottom")]
public List`1<CT_Border> borderbottom { get; public set; }
    [XmlElementAttribute("borderleft")]
public List`1<CT_Border> borderleft { get; public set; }
    [XmlElementAttribute("borderright")]
public List`1<CT_Border> borderright { get; public set; }
    [XmlElementAttribute("ClientData")]
public List`1<CT_ClientData> ClientData { get; public set; }
    [XmlElementAttribute("textdata")]
public List`1<CT_Rel> textdata { get; public set; }
    [XmlAttributeAttribute]
public decimal startAngle { get; public set; }
    [XmlIgnoreAttribute]
public bool startAngleSpecified { get; public set; }
    [XmlAttributeAttribute]
public decimal endAngle { get; public set; }
    [XmlIgnoreAttribute]
public bool endAngleSpecified { get; public set; }
    public List`1<CT_Path> get_path();
    public void set_path(List`1<CT_Path> value);
    public List`1<CT_Formulas> get_formulas();
    public void set_formulas(List`1<CT_Formulas> value);
    public List`1<CT_Handles> get_handles();
    public void set_handles(List`1<CT_Handles> value);
    public List`1<CT_Fill> get_fill();
    public void set_fill(List`1<CT_Fill> value);
    public List`1<CT_Stroke> get_stroke();
    public void set_stroke(List`1<CT_Stroke> value);
    public List`1<CT_Shadow> get_shadow();
    public void set_shadow(List`1<CT_Shadow> value);
    public List`1<CT_Textbox> get_textbox();
    public void set_textbox(List`1<CT_Textbox> value);
    public List`1<CT_TextPath> get_textpath();
    public void set_textpath(List`1<CT_TextPath> value);
    public List`1<CT_ImageData> get_imagedata();
    public void set_imagedata(List`1<CT_ImageData> value);
    public List`1<CT_Wrap> get_wrap();
    public void set_wrap(List`1<CT_Wrap> value);
    public List`1<CT_AnchorLock> get_anchorlock();
    public void set_anchorlock(List`1<CT_AnchorLock> value);
    public List`1<CT_Border> get_bordertop();
    public void set_bordertop(List`1<CT_Border> value);
    public List`1<CT_Border> get_borderbottom();
    public void set_borderbottom(List`1<CT_Border> value);
    public List`1<CT_Border> get_borderleft();
    public void set_borderleft(List`1<CT_Border> value);
    public List`1<CT_Border> get_borderright();
    public void set_borderright(List`1<CT_Border> value);
    public List`1<CT_ClientData> get_ClientData();
    public void set_ClientData(List`1<CT_ClientData> value);
    public List`1<CT_Rel> get_textdata();
    public void set_textdata(List`1<CT_Rel> value);
    public decimal get_startAngle();
    public void set_startAngle(decimal value);
    public bool get_startAngleSpecified();
    public void set_startAngleSpecified(bool value);
    public decimal get_endAngle();
    public void set_endAngle(decimal value);
    public bool get_endAngleSpecified();
    public void set_endAngleSpecified(bool value);
}
[DesignerCategoryAttribute("code")]
[XmlTypeAttribute]
[XmlRootAttribute]
public class NPOI.OpenXmlFormats.Vml.CT_Background : object {
    private CT_Fill fillField;
    private string idField;
    private ST_TrueFalse filledField;
    private bool filledFieldSpecified;
    private string fillcolorField;
    public CT_Fill fill { get; public set; }
    [XmlAttributeAttribute]
public string id { get; public set; }
    [XmlAttributeAttribute]
public ST_TrueFalse filled { get; public set; }
    [XmlIgnoreAttribute]
public bool filledSpecified { get; public set; }
    [XmlAttributeAttribute]
public string fillcolor { get; public set; }
    public CT_Fill get_fill();
    public void set_fill(CT_Fill value);
    public string get_id();
    public void set_id(string value);
    public ST_TrueFalse get_filled();
    public void set_filled(ST_TrueFalse value);
    public bool get_filledSpecified();
    public void set_filledSpecified(bool value);
    public string get_fillcolor();
    public void set_fillcolor(string value);
}
[DesignerCategoryAttribute("code")]
[XmlTypeAttribute]
[XmlRootAttribute]
public class NPOI.OpenXmlFormats.Vml.CT_Curve : object {
    private List`1<CT_Path> pathField;
    private List`1<CT_Formulas> formulasField;
    private List`1<CT_Handles> handlesField;
    private List`1<CT_Fill> fillField;
    private List`1<CT_Stroke> strokeField;
    private List`1<CT_Shadow> shadowField;
    private List`1<CT_Textbox> textboxField;
    private List`1<CT_TextPath> textpathField;
    private List`1<CT_ImageData> imagedataField;
    private List`1<CT_Wrap> wrapField;
    private List`1<CT_AnchorLock> anchorlockField;
    private List`1<CT_Border> bordertopField;
    private List`1<CT_Border> borderbottomField;
    private List`1<CT_Border> borderleftField;
    private List`1<CT_Border> borderrightField;
    private List`1<CT_ClientData> clientDataField;
    private List`1<CT_Rel> textdataField;
    private string fromField;
    private string control1Field;
    private string control2Field;
    private string toField;
    [XmlElementAttribute("path")]
public List`1<CT_Path> path { get; public set; }
    [XmlElementAttribute("formulas")]
public List`1<CT_Formulas> formulas { get; public set; }
    [XmlElementAttribute("handles")]
public List`1<CT_Handles> handles { get; public set; }
    [XmlElementAttribute("fill")]
public List`1<CT_Fill> fill { get; public set; }
    [XmlElementAttribute("stroke")]
public List`1<CT_Stroke> stroke { get; public set; }
    [XmlElementAttribute("shadow")]
public List`1<CT_Shadow> shadow { get; public set; }
    [XmlElementAttribute("textbox")]
public List`1<CT_Textbox> textbox { get; public set; }
    [XmlElementAttribute("textpath")]
public List`1<CT_TextPath> textpath { get; public set; }
    [XmlElementAttribute("imagedata")]
public List`1<CT_ImageData> imagedata { get; public set; }
    [XmlElementAttribute("wrap")]
public List`1<CT_Wrap> wrap { get; public set; }
    [XmlElementAttribute("anchorlock")]
public List`1<CT_AnchorLock> anchorlock { get; public set; }
    [XmlElementAttribute("bordertop")]
public List`1<CT_Border> bordertop { get; public set; }
    [XmlElementAttribute("borderbottom")]
public List`1<CT_Border> borderbottom { get; public set; }
    [XmlElementAttribute("borderleft")]
public List`1<CT_Border> borderleft { get; public set; }
    [XmlElementAttribute("borderright")]
public List`1<CT_Border> borderright { get; public set; }
    [XmlElementAttribute("ClientData")]
public List`1<CT_ClientData> ClientData { get; public set; }
    [XmlElementAttribute("textdata")]
public List`1<CT_Rel> textdata { get; public set; }
    [XmlAttributeAttribute]
public string from { get; public set; }
    [XmlAttributeAttribute]
public string control1 { get; public set; }
    [XmlAttributeAttribute]
public string control2 { get; public set; }
    [XmlAttributeAttribute]
public string to { get; public set; }
    public List`1<CT_Path> get_path();
    public void set_path(List`1<CT_Path> value);
    public List`1<CT_Formulas> get_formulas();
    public void set_formulas(List`1<CT_Formulas> value);
    public List`1<CT_Handles> get_handles();
    public void set_handles(List`1<CT_Handles> value);
    public List`1<CT_Fill> get_fill();
    public void set_fill(List`1<CT_Fill> value);
    public List`1<CT_Stroke> get_stroke();
    public void set_stroke(List`1<CT_Stroke> value);
    public List`1<CT_Shadow> get_shadow();
    public void set_shadow(List`1<CT_Shadow> value);
    public List`1<CT_Textbox> get_textbox();
    public void set_textbox(List`1<CT_Textbox> value);
    public List`1<CT_TextPath> get_textpath();
    public void set_textpath(List`1<CT_TextPath> value);
    public List`1<CT_ImageData> get_imagedata();
    public void set_imagedata(List`1<CT_ImageData> value);
    public List`1<CT_Wrap> get_wrap();
    public void set_wrap(List`1<CT_Wrap> value);
    public List`1<CT_AnchorLock> get_anchorlock();
    public void set_anchorlock(List`1<CT_AnchorLock> value);
    public List`1<CT_Border> get_bordertop();
    public void set_bordertop(List`1<CT_Border> value);
    public List`1<CT_Border> get_borderbottom();
    public void set_borderbottom(List`1<CT_Border> value);
    public List`1<CT_Border> get_borderleft();
    public void set_borderleft(List`1<CT_Border> value);
    public List`1<CT_Border> get_borderright();
    public void set_borderright(List`1<CT_Border> value);
    public List`1<CT_ClientData> get_ClientData();
    public void set_ClientData(List`1<CT_ClientData> value);
    public List`1<CT_Rel> get_textdata();
    public void set_textdata(List`1<CT_Rel> value);
    public string get_from();
    public void set_from(string value);
    public string get_control1();
    public void set_control1(string value);
    public string get_control2();
    public void set_control2(string value);
    public string get_to();
    public void set_to(string value);
}
[DesignerCategoryAttribute("code")]
[XmlTypeAttribute]
public class NPOI.OpenXmlFormats.Vml.CT_F : object {
    private string eqnField;
    [XmlAttributeAttribute]
public string eqn { get; public set; }
    [XmlIgnoreAttribute]
public bool eqnSpecified { get; }
    public string get_eqn();
    public void set_eqn(string value);
    public bool get_eqnSpecified();
    public static CT_F Parse(XmlNode node, XmlNamespaceManager namespaceManager);
    internal void Write(StreamWriter sw, string nodeName);
}
[DesignerCategoryAttribute("code")]
[XmlTypeAttribute]
public class NPOI.OpenXmlFormats.Vml.CT_Fill : object {
    private string idField;
    private ST_FillType typeField;
    private bool typeFieldSpecified;
    private ST_TrueFalse onField;
    private bool onFieldSpecified;
    private string colorField;
    private string opacityField;
    private string color2Field;
    private string srcField;
    private string sizeField;
    private string originField;
    private string positionField;
    private ST_ImageAspect aspectField;
    private bool aspectFieldSpecified;
    private string colorsField;
    private decimal angleField;
    private bool angleFieldSpecified;
    private ST_TrueFalse alignshapeField;
    private bool alignshapeFieldSpecified;
    private string focusField;
    private string focussizeField;
    private string focuspositionField;
    private ST_FillMethod methodField;
    private bool methodFieldSpecified;
    private ST_TrueFalse recolorField;
    private bool recolorFieldSpecified;
    private ST_TrueFalse rotateField;
    private bool rotateFieldSpecified;
    [XmlAttributeAttribute]
public string id { get; public set; }
    [XmlAttributeAttribute]
public ST_FillType type { get; public set; }
    [XmlIgnoreAttribute]
public bool typeSpecified { get; public set; }
    [XmlAttributeAttribute]
public ST_TrueFalse on { get; public set; }
    [XmlIgnoreAttribute]
public bool onSpecified { get; public set; }
    [XmlAttributeAttribute]
public string color { get; public set; }
    [XmlAttributeAttribute]
public string opacity { get; public set; }
    [XmlAttributeAttribute]
public string color2 { get; public set; }
    [XmlAttributeAttribute]
public string src { get; public set; }
    [XmlAttributeAttribute]
public string size { get; public set; }
    [XmlAttributeAttribute]
public string origin { get; public set; }
    [XmlAttributeAttribute]
public string position { get; public set; }
    [XmlAttributeAttribute]
public ST_ImageAspect aspect { get; public set; }
    [XmlIgnoreAttribute]
public bool aspectSpecified { get; public set; }
    [XmlAttributeAttribute]
public string colors { get; public set; }
    [XmlAttributeAttribute]
public decimal angle { get; public set; }
    [XmlIgnoreAttribute]
public bool angleSpecified { get; public set; }
    [XmlAttributeAttribute]
public ST_TrueFalse alignshape { get; public set; }
    [XmlIgnoreAttribute]
public bool alignshapeSpecified { get; public set; }
    [XmlAttributeAttribute]
public string focus { get; public set; }
    [XmlAttributeAttribute]
public string focussize { get; public set; }
    [XmlAttributeAttribute]
public string focusposition { get; public set; }
    [XmlAttributeAttribute]
public ST_FillMethod method { get; public set; }
    [XmlIgnoreAttribute]
public bool methodSpecified { get; public set; }
    [XmlAttributeAttribute]
public ST_TrueFalse recolor { get; public set; }
    [XmlIgnoreAttribute]
public bool recolorSpecified { get; public set; }
    [XmlAttributeAttribute]
public ST_TrueFalse rotate { get; public set; }
    [XmlIgnoreAttribute]
public bool rotateSpecified { get; public set; }
    public static CT_Fill Parse(XmlNode node, XmlNamespaceManager namespaceManager);
    internal void Write(StreamWriter sw, string nodeName);
    public string get_id();
    public void set_id(string value);
    public ST_FillType get_type();
    public void set_type(ST_FillType value);
    public bool get_typeSpecified();
    public void set_typeSpecified(bool value);
    public ST_TrueFalse get_on();
    public void set_on(ST_TrueFalse value);
    public bool get_onSpecified();
    public void set_onSpecified(bool value);
    public string get_color();
    public void set_color(string value);
    public string get_opacity();
    public void set_opacity(string value);
    public string get_color2();
    public void set_color2(string value);
    public string get_src();
    public void set_src(string value);
    public string get_size();
    public void set_size(string value);
    public string get_origin();
    public void set_origin(string value);
    public string get_position();
    public void set_position(string value);
    public ST_ImageAspect get_aspect();
    public void set_aspect(ST_ImageAspect value);
    public bool get_aspectSpecified();
    public void set_aspectSpecified(bool value);
    public string get_colors();
    public void set_colors(string value);
    public decimal get_angle();
    public void set_angle(decimal value);
    public bool get_angleSpecified();
    public void set_angleSpecified(bool value);
    public ST_TrueFalse get_alignshape();
    public void set_alignshape(ST_TrueFalse value);
    public bool get_alignshapeSpecified();
    public void set_alignshapeSpecified(bool value);
    public string get_focus();
    public void set_focus(string value);
    public string get_focussize();
    public void set_focussize(string value);
    public string get_focusposition();
    public void set_focusposition(string value);
    public ST_FillMethod get_method();
    public void set_method(ST_FillMethod value);
    public bool get_methodSpecified();
    public void set_methodSpecified(bool value);
    public ST_TrueFalse get_recolor();
    public void set_recolor(ST_TrueFalse value);
    public bool get_recolorSpecified();
    public void set_recolorSpecified(bool value);
    public ST_TrueFalse get_rotate();
    public void set_rotate(ST_TrueFalse value);
    public bool get_rotateSpecified();
    public void set_rotateSpecified(bool value);
}
[DesignerCategoryAttribute("code")]
[XmlTypeAttribute]
public class NPOI.OpenXmlFormats.Vml.CT_Formulas : object {
    private List`1<CT_F> fField;
    [XmlElementAttribute("f")]
public List`1<CT_F> f { get; public set; }
    [XmlIgnoreAttribute]
public bool fSpecified { get; }
    public List`1<CT_F> get_f();
    public void set_f(List`1<CT_F> value);
    public bool get_fSpecified();
    public CT_F AddNewF();
    public static CT_Formulas Parse(XmlNode node, XmlNamespaceManager namespaceManager);
    internal void Write(StreamWriter sw, string nodeName);
}
[DesignerCategoryAttribute("code")]
[XmlTypeAttribute]
[XmlRootAttribute]
public class NPOI.OpenXmlFormats.Vml.CT_Group : object {
    private List`1<object> itemsField;
    private List`1<ItemsChoiceType6> itemsElementNameField;
    private ST_TrueFalse filledField;
    private bool filledFieldSpecified;
    private string fillcolorField;
    private ST_EditAs editasField;
    private bool editasFieldSpecified;
    [XmlElementAttribute("ClientData", "NPOI.OpenXmlFormats.Vml.Spreadsheet.CT_ClientData")]
[XmlElementAttribute("textdata", "NPOI.OpenXmlFormats.Vml.Presentation.CT_Rel")]
[XmlElementAttribute("anchorlock", "NPOI.OpenXmlFormats.Vml.Wordprocessing.CT_AnchorLock")]
[XmlElementAttribute("borderbottom", "NPOI.OpenXmlFormats.Vml.Wordprocessing.CT_Border")]
[XmlElementAttribute("borderleft", "NPOI.OpenXmlFormats.Vml.Wordprocessing.CT_Border")]
[XmlElementAttribute("borderright", "NPOI.OpenXmlFormats.Vml.Wordprocessing.CT_Border")]
[XmlElementAttribute("bordertop", "NPOI.OpenXmlFormats.Vml.Wordprocessing.CT_Border")]
[XmlElementAttribute("wrap", "NPOI.OpenXmlFormats.Vml.Wordprocessing.CT_Wrap")]
[XmlElementAttribute("arc", "NPOI.OpenXmlFormats.Vml.CT_Arc")]
[XmlElementAttribute("curve", "NPOI.OpenXmlFormats.Vml.CT_Curve")]
[XmlElementAttribute("fill", "NPOI.OpenXmlFormats.Vml.CT_Fill")]
[XmlElementAttribute("formulas", "NPOI.OpenXmlFormats.Vml.CT_Formulas")]
[XmlElementAttribute("group", "NPOI.OpenXmlFormats.Vml.CT_Group")]
[XmlElementAttribute("handles", "NPOI.OpenXmlFormats.Vml.CT_Handles")]
[XmlElementAttribute("image", "NPOI.OpenXmlFormats.Vml.CT_Image")]
[XmlElementAttribute("imagedata", "NPOI.OpenXmlFormats.Vml.CT_ImageData")]
[XmlElementAttribute("line", "NPOI.OpenXmlFormats.Vml.CT_Line")]
[XmlElementAttribute("oval", "NPOI.OpenXmlFormats.Vml.CT_Oval")]
[XmlElementAttribute("path", "NPOI.OpenXmlFormats.Vml.CT_Path")]
[XmlElementAttribute("polyline", "NPOI.OpenXmlFormats.Vml.CT_PolyLine")]
[XmlElementAttribute("rect", "NPOI.OpenXmlFormats.Vml.CT_Rect")]
[XmlElementAttribute("roundrect", "NPOI.OpenXmlFormats.Vml.CT_RoundRect")]
[XmlElementAttribute("shadow", "NPOI.OpenXmlFormats.Vml.CT_Shadow")]
[XmlElementAttribute("shape", "NPOI.OpenXmlFormats.Vml.CT_Shape")]
[XmlElementAttribute("shapetype", "NPOI.OpenXmlFormats.Vml.CT_Shapetype")]
[XmlElementAttribute("stroke", "NPOI.OpenXmlFormats.Vml.CT_Stroke")]
[XmlElementAttribute("textbox", "NPOI.OpenXmlFormats.Vml.CT_Textbox")]
[XmlElementAttribute("textpath", "NPOI.OpenXmlFormats.Vml.CT_TextPath")]
[XmlChoiceIdentifierAttribute("ItemsElementName")]
public Object[] Items { get; public set; }
    [XmlElementAttribute("ItemsElementName")]
[XmlIgnoreAttribute]
public ItemsChoiceType6[] ItemsElementName { get; public set; }
    [XmlAttributeAttribute]
public ST_TrueFalse filled { get; public set; }
    [XmlIgnoreAttribute]
public bool filledSpecified { get; public set; }
    [XmlAttributeAttribute]
public string fillcolor { get; public set; }
    [XmlAttributeAttribute]
public ST_EditAs editas { get; public set; }
    [XmlIgnoreAttribute]
public bool editasSpecified { get; public set; }
    public Object[] get_Items();
    public void set_Items(Object[] value);
    public ItemsChoiceType6[] get_ItemsElementName();
    public void set_ItemsElementName(ItemsChoiceType6[] value);
    public ST_TrueFalse get_filled();
    public void set_filled(ST_TrueFalse value);
    public bool get_filledSpecified();
    public void set_filledSpecified(bool value);
    public string get_fillcolor();
    public void set_fillcolor(string value);
    public ST_EditAs get_editas();
    public void set_editas(ST_EditAs value);
    public bool get_editasSpecified();
    public void set_editasSpecified(bool value);
    public CT_Shapetype AddNewShapetype();
    private List`1<T> GetObjectList(ItemsChoiceType6 type);
    private int SizeOfObjectArray(ItemsChoiceType6 type);
    private T GetObjectArray(int p, ItemsChoiceType6 type);
    private T InsertNewObject(ItemsChoiceType6 type, int p);
    private T AddNewObject(ItemsChoiceType6 type);
    private void SetObjectArray(ItemsChoiceType6 type, int p, T obj);
    private int GetObjectIndex(ItemsChoiceType6 type, int p);
    private void RemoveObject(ItemsChoiceType6 type, int p);
    public CT_Shape AddNewShape();
}
[DesignerCategoryAttribute("code")]
[XmlTypeAttribute]
public class NPOI.OpenXmlFormats.Vml.CT_H : object {
    private string positionField;
    private string polarField;
    private string mapField;
    private ST_TrueFalse invxField;
    private bool invxFieldSpecified;
    private ST_TrueFalse invyField;
    private bool invyFieldSpecified;
    private ST_TrueFalseBlank switchField;
    private bool switchFieldSpecified;
    private string xrangeField;
    private string yrangeField;
    private string radiusrangeField;
    [XmlAttributeAttribute]
public string position { get; public set; }
    [XmlAttributeAttribute]
public string polar { get; public set; }
    [XmlAttributeAttribute]
public string map { get; public set; }
    [XmlAttributeAttribute]
public ST_TrueFalse invx { get; public set; }
    [XmlIgnoreAttribute]
public bool invxSpecified { get; public set; }
    [XmlAttributeAttribute]
public ST_TrueFalse invy { get; public set; }
    [XmlIgnoreAttribute]
public bool invySpecified { get; public set; }
    [XmlAttributeAttribute]
public ST_TrueFalseBlank switch { get; public set; }
    [XmlIgnoreAttribute]
public bool switchSpecified { get; public set; }
    [XmlAttributeAttribute]
public string xrange { get; public set; }
    [XmlAttributeAttribute]
public string yrange { get; public set; }
    [XmlAttributeAttribute]
public string radiusrange { get; public set; }
    public string get_position();
    public void set_position(string value);
    public string get_polar();
    public void set_polar(string value);
    public string get_map();
    public void set_map(string value);
    public ST_TrueFalse get_invx();
    public void set_invx(ST_TrueFalse value);
    public bool get_invxSpecified();
    public void set_invxSpecified(bool value);
    public ST_TrueFalse get_invy();
    public void set_invy(ST_TrueFalse value);
    public bool get_invySpecified();
    public void set_invySpecified(bool value);
    public ST_TrueFalseBlank get_switch();
    public void set_switch(ST_TrueFalseBlank value);
    public bool get_switchSpecified();
    public void set_switchSpecified(bool value);
    public string get_xrange();
    public void set_xrange(string value);
    public string get_yrange();
    public void set_yrange(string value);
    public string get_radiusrange();
    public void set_radiusrange(string value);
    public static CT_H Parse(XmlNode node, XmlNamespaceManager namespaceManager);
    internal void Write(StreamWriter sw, string nodeName);
}
[DesignerCategoryAttribute("code")]
[XmlTypeAttribute]
public class NPOI.OpenXmlFormats.Vml.CT_Handles : object {
    private List`1<CT_H> hField;
    [XmlElementAttribute("h")]
public List`1<CT_H> h { get; public set; }
    [XmlIgnoreAttribute]
public bool hSpecified { get; }
    public List`1<CT_H> get_h();
    public void set_h(List`1<CT_H> value);
    public bool get_hSpecified();
    public CT_H AddNewH();
    public static CT_Handles Parse(XmlNode node, XmlNamespaceManager namespaceManager);
    internal void Write(StreamWriter sw, string nodeName);
}
[DesignerCategoryAttribute("code")]
[XmlTypeAttribute]
[XmlRootAttribute]
public class NPOI.OpenXmlFormats.Vml.CT_Image : object {
    private List`1<CT_Path> pathField;
    private List`1<CT_Formulas> formulasField;
    private List`1<CT_Handles> handlesField;
    private List`1<CT_Fill> fillField;
    private List`1<CT_Stroke> strokeField;
    private List`1<CT_Shadow> shadowField;
    private List`1<CT_Textbox> textboxField;
    private List`1<CT_TextPath> textpathField;
    private List`1<CT_ImageData> imagedataField;
    private List`1<CT_Wrap> wrapField;
    private List`1<CT_AnchorLock> anchorlockField;
    private List`1<CT_Border> bordertopField;
    private List`1<CT_Border> borderbottomField;
    private List`1<CT_Border> borderleftField;
    private List`1<CT_Border> borderrightField;
    private List`1<CT_ClientData> clientDataField;
    private List`1<CT_Rel> textdataField;
    private string srcField;
    private string cropleftField;
    private string croptopField;
    private string croprightField;
    private string cropbottomField;
    private string gainField;
    private string blacklevelField;
    private string gammaField;
    private ST_TrueFalse grayscaleField;
    private bool grayscaleFieldSpecified;
    private ST_TrueFalse bilevelField;
    private bool bilevelFieldSpecified;
    [XmlElementAttribute("path")]
public List`1<CT_Path> path { get; public set; }
    [XmlElementAttribute("formulas")]
public List`1<CT_Formulas> formulas { get; public set; }
    [XmlElementAttribute("handles")]
public List`1<CT_Handles> handles { get; public set; }
    [XmlElementAttribute("fill")]
public List`1<CT_Fill> fill { get; public set; }
    [XmlElementAttribute("stroke")]
public List`1<CT_Stroke> stroke { get; public set; }
    [XmlElementAttribute("shadow")]
public List`1<CT_Shadow> shadow { get; public set; }
    [XmlElementAttribute("textbox")]
public List`1<CT_Textbox> textbox { get; public set; }
    [XmlElementAttribute("textpath")]
public List`1<CT_TextPath> textpath { get; public set; }
    [XmlElementAttribute("imagedata")]
public List`1<CT_ImageData> imagedata { get; public set; }
    [XmlElementAttribute("wrap")]
public List`1<CT_Wrap> wrap { get; public set; }
    [XmlElementAttribute("anchorlock")]
public List`1<CT_AnchorLock> anchorlock { get; public set; }
    [XmlElementAttribute("bordertop")]
public List`1<CT_Border> bordertop { get; public set; }
    [XmlElementAttribute("borderbottom")]
public List`1<CT_Border> borderbottom { get; public set; }
    [XmlElementAttribute("borderleft")]
public List`1<CT_Border> borderleft { get; public set; }
    [XmlElementAttribute("borderright")]
public List`1<CT_Border> borderright { get; public set; }
    [XmlElementAttribute("ClientData")]
public List`1<CT_ClientData> ClientData { get; public set; }
    [XmlElementAttribute("textdata")]
public List`1<CT_Rel> textdata { get; public set; }
    [XmlAttributeAttribute]
public string src { get; public set; }
    [XmlAttributeAttribute]
public string cropleft { get; public set; }
    [XmlAttributeAttribute]
public string croptop { get; public set; }
    [XmlAttributeAttribute]
public string cropright { get; public set; }
    [XmlAttributeAttribute]
public string cropbottom { get; public set; }
    [XmlAttributeAttribute]
public string gain { get; public set; }
    [XmlAttributeAttribute]
public string blacklevel { get; public set; }
    [XmlAttributeAttribute]
public string gamma { get; public set; }
    [XmlAttributeAttribute]
public ST_TrueFalse grayscale { get; public set; }
    [XmlIgnoreAttribute]
public bool grayscaleSpecified { get; public set; }
    [XmlAttributeAttribute]
public ST_TrueFalse bilevel { get; public set; }
    [XmlIgnoreAttribute]
public bool bilevelSpecified { get; public set; }
    public List`1<CT_Path> get_path();
    public void set_path(List`1<CT_Path> value);
    public List`1<CT_Formulas> get_formulas();
    public void set_formulas(List`1<CT_Formulas> value);
    public List`1<CT_Handles> get_handles();
    public void set_handles(List`1<CT_Handles> value);
    public List`1<CT_Fill> get_fill();
    public void set_fill(List`1<CT_Fill> value);
    public List`1<CT_Stroke> get_stroke();
    public void set_stroke(List`1<CT_Stroke> value);
    public List`1<CT_Shadow> get_shadow();
    public void set_shadow(List`1<CT_Shadow> value);
    public List`1<CT_Textbox> get_textbox();
    public void set_textbox(List`1<CT_Textbox> value);
    public List`1<CT_TextPath> get_textpath();
    public void set_textpath(List`1<CT_TextPath> value);
    public List`1<CT_ImageData> get_imagedata();
    public void set_imagedata(List`1<CT_ImageData> value);
    public List`1<CT_Wrap> get_wrap();
    public void set_wrap(List`1<CT_Wrap> value);
    public List`1<CT_AnchorLock> get_anchorlock();
    public void set_anchorlock(List`1<CT_AnchorLock> value);
    public List`1<CT_Border> get_bordertop();
    public void set_bordertop(List`1<CT_Border> value);
    public List`1<CT_Border> get_borderbottom();
    public void set_borderbottom(List`1<CT_Border> value);
    public List`1<CT_Border> get_borderleft();
    public void set_borderleft(List`1<CT_Border> value);
    public List`1<CT_Border> get_borderright();
    public void set_borderright(List`1<CT_Border> value);
    public List`1<CT_ClientData> get_ClientData();
    public void set_ClientData(List`1<CT_ClientData> value);
    public List`1<CT_Rel> get_textdata();
    public void set_textdata(List`1<CT_Rel> value);
    public string get_src();
    public void set_src(string value);
    public string get_cropleft();
    public void set_cropleft(string value);
    public string get_croptop();
    public void set_croptop(string value);
    public string get_cropright();
    public void set_cropright(string value);
    public string get_cropbottom();
    public void set_cropbottom(string value);
    public string get_gain();
    public void set_gain(string value);
    public string get_blacklevel();
    public void set_blacklevel(string value);
    public string get_gamma();
    public void set_gamma(string value);
    public ST_TrueFalse get_grayscale();
    public void set_grayscale(ST_TrueFalse value);
    public bool get_grayscaleSpecified();
    public void set_grayscaleSpecified(bool value);
    public ST_TrueFalse get_bilevel();
    public void set_bilevel(ST_TrueFalse value);
    public bool get_bilevelSpecified();
    public void set_bilevelSpecified(bool value);
}
[DesignerCategoryAttribute("code")]
[XmlTypeAttribute]
[XmlRootAttribute]
public class NPOI.OpenXmlFormats.Vml.CT_ImageData : object {
    private string relidField;
    private string titleField;
    private string oleidField;
    private string movieField;
    private string idField;
    private string srcField;
    private string cropleftField;
    private string croptopField;
    private string croprightField;
    private string cropbottomField;
    private string gainField;
    private string blacklevelField;
    private string gammaField;
    private ST_TrueFalse grayscaleField;
    private bool grayscaleFieldSpecified;
    private ST_TrueFalse bilevelField;
    private bool bilevelFieldSpecified;
    private string chromakeyField;
    private string embosscolorField;
    private string recolortargetField;
    private string pictField;
    private string hrefField;
    [XmlAttributeAttribute]
public string id { get; public set; }
    [XmlAttributeAttribute]
public string src { get; public set; }
    [XmlAttributeAttribute]
public string cropleft { get; public set; }
    [XmlAttributeAttribute]
public string croptop { get; public set; }
    [XmlAttributeAttribute]
public string cropright { get; public set; }
    [XmlAttributeAttribute]
public string cropbottom { get; public set; }
    [XmlAttributeAttribute]
public string gain { get; public set; }
    [XmlAttributeAttribute]
public string blacklevel { get; public set; }
    [XmlAttributeAttribute]
public string gamma { get; public set; }
    [XmlAttributeAttribute]
public ST_TrueFalse grayscale { get; public set; }
    [XmlIgnoreAttribute]
public bool grayscaleSpecified { get; public set; }
    [XmlAttributeAttribute]
public ST_TrueFalse bilevel { get; public set; }
    [XmlIgnoreAttribute]
public bool bilevelSpecified { get; public set; }
    [XmlAttributeAttribute]
public string chromakey { get; public set; }
    [XmlAttributeAttribute]
public string embosscolor { get; public set; }
    [XmlAttributeAttribute]
public string recolortarget { get; public set; }
    [XmlAttributeAttribute]
public string pict { get; public set; }
    [XmlAttributeAttribute]
public string href { get; public set; }
    [XmlAttributeAttribute]
public string relid { get; public set; }
    [XmlAttributeAttribute]
public string title { get; public set; }
    [XmlAttributeAttribute]
public string movie { get; public set; }
    [XmlAttributeAttribute]
public string oleid { get; public set; }
    public static CT_ImageData Parse(XmlNode node, XmlNamespaceManager namespaceManager);
    internal void Write(StreamWriter sw, string nodeName);
    public string get_id();
    public void set_id(string value);
    public string get_src();
    public void set_src(string value);
    public string get_cropleft();
    public void set_cropleft(string value);
    public string get_croptop();
    public void set_croptop(string value);
    public string get_cropright();
    public void set_cropright(string value);
    public string get_cropbottom();
    public void set_cropbottom(string value);
    public string get_gain();
    public void set_gain(string value);
    public string get_blacklevel();
    public void set_blacklevel(string value);
    public string get_gamma();
    public void set_gamma(string value);
    public ST_TrueFalse get_grayscale();
    public void set_grayscale(ST_TrueFalse value);
    public bool get_grayscaleSpecified();
    public void set_grayscaleSpecified(bool value);
    public ST_TrueFalse get_bilevel();
    public void set_bilevel(ST_TrueFalse value);
    public bool get_bilevelSpecified();
    public void set_bilevelSpecified(bool value);
    public string get_chromakey();
    public void set_chromakey(string value);
    public string get_embosscolor();
    public void set_embosscolor(string value);
    public string get_recolortarget();
    public void set_recolortarget(string value);
    public string get_pict();
    public void set_pict(string value);
    public string get_href();
    public void set_href(string value);
    public string get_relid();
    public void set_relid(string value);
    public string get_title();
    public void set_title(string value);
    public string get_movie();
    public void set_movie(string value);
    public string get_oleid();
    public void set_oleid(string value);
}
[DesignerCategoryAttribute("code")]
[XmlTypeAttribute]
[XmlRootAttribute]
public class NPOI.OpenXmlFormats.Vml.CT_Line : object {
    private List`1<CT_Path> pathField;
    private List`1<CT_Formulas> formulasField;
    private List`1<CT_Handles> handlesField;
    private List`1<CT_Fill> fillField;
    private List`1<CT_Stroke> strokeField;
    private List`1<CT_Shadow> shadowField;
    private List`1<CT_Textbox> textboxField;
    private List`1<CT_TextPath> textpathField;
    private List`1<CT_ImageData> imagedataField;
    private List`1<CT_Wrap> wrapField;
    private List`1<CT_AnchorLock> anchorlockField;
    private List`1<CT_Border> bordertopField;
    private List`1<CT_Border> borderbottomField;
    private List`1<CT_Border> borderleftField;
    private List`1<CT_Border> borderrightField;
    private List`1<CT_ClientData> clientDataField;
    private List`1<CT_Rel> textdataField;
    private string fromField;
    private string toField;
    [XmlElementAttribute("path")]
public List`1<CT_Path> path { get; public set; }
    [XmlElementAttribute("formulas")]
public List`1<CT_Formulas> formulas { get; public set; }
    [XmlElementAttribute("handles")]
public List`1<CT_Handles> handles { get; public set; }
    [XmlElementAttribute("fill")]
public List`1<CT_Fill> fill { get; public set; }
    [XmlElementAttribute("stroke")]
public List`1<CT_Stroke> stroke { get; public set; }
    [XmlElementAttribute("shadow")]
public List`1<CT_Shadow> shadow { get; public set; }
    [XmlElementAttribute("textbox")]
public List`1<CT_Textbox> textbox { get; public set; }
    [XmlElementAttribute("textpath")]
public List`1<CT_TextPath> textpath { get; public set; }
    [XmlElementAttribute("imagedata")]
public List`1<CT_ImageData> imagedata { get; public set; }
    [XmlElementAttribute("wrap")]
public List`1<CT_Wrap> wrap { get; public set; }
    [XmlElementAttribute("anchorlock")]
public List`1<CT_AnchorLock> anchorlock { get; public set; }
    [XmlElementAttribute("bordertop")]
public List`1<CT_Border> bordertop { get; public set; }
    [XmlElementAttribute("borderbottom")]
public List`1<CT_Border> borderbottom { get; public set; }
    [XmlElementAttribute("borderleft")]
public List`1<CT_Border> borderleft { get; public set; }
    [XmlElementAttribute("borderright")]
public List`1<CT_Border> borderright { get; public set; }
    [XmlElementAttribute("ClientData")]
public List`1<CT_ClientData> ClientData { get; public set; }
    [XmlElementAttribute("textdata")]
public List`1<CT_Rel> textdata { get; public set; }
    [XmlAttributeAttribute]
public string from { get; public set; }
    [XmlAttributeAttribute]
public string to { get; public set; }
    public List`1<CT_Path> get_path();
    public void set_path(List`1<CT_Path> value);
    public List`1<CT_Formulas> get_formulas();
    public void set_formulas(List`1<CT_Formulas> value);
    public List`1<CT_Handles> get_handles();
    public void set_handles(List`1<CT_Handles> value);
    public List`1<CT_Fill> get_fill();
    public void set_fill(List`1<CT_Fill> value);
    public List`1<CT_Stroke> get_stroke();
    public void set_stroke(List`1<CT_Stroke> value);
    public List`1<CT_Shadow> get_shadow();
    public void set_shadow(List`1<CT_Shadow> value);
    public List`1<CT_Textbox> get_textbox();
    public void set_textbox(List`1<CT_Textbox> value);
    public List`1<CT_TextPath> get_textpath();
    public void set_textpath(List`1<CT_TextPath> value);
    public List`1<CT_ImageData> get_imagedata();
    public void set_imagedata(List`1<CT_ImageData> value);
    public List`1<CT_Wrap> get_wrap();
    public void set_wrap(List`1<CT_Wrap> value);
    public List`1<CT_AnchorLock> get_anchorlock();
    public void set_anchorlock(List`1<CT_AnchorLock> value);
    public List`1<CT_Border> get_bordertop();
    public void set_bordertop(List`1<CT_Border> value);
    public List`1<CT_Border> get_borderbottom();
    public void set_borderbottom(List`1<CT_Border> value);
    public List`1<CT_Border> get_borderleft();
    public void set_borderleft(List`1<CT_Border> value);
    public List`1<CT_Border> get_borderright();
    public void set_borderright(List`1<CT_Border> value);
    public List`1<CT_ClientData> get_ClientData();
    public void set_ClientData(List`1<CT_ClientData> value);
    public List`1<CT_Rel> get_textdata();
    public void set_textdata(List`1<CT_Rel> value);
    public string get_from();
    public void set_from(string value);
    public string get_to();
    public void set_to(string value);
}
[DesignerCategoryAttribute("code")]
[XmlTypeAttribute]
[XmlRootAttribute]
public class NPOI.OpenXmlFormats.Vml.CT_Oval : object {
    private List`1<object> itemsField;
    private List`1<ItemsChoiceType2> itemsElementNameField;
    [XmlElementAttribute("ClientData", "NPOI.OpenXmlFormats.Vml.Spreadsheet.CT_ClientData")]
[XmlElementAttribute("textdata", "NPOI.OpenXmlFormats.Vml.Presentation.CT_Rel")]
[XmlElementAttribute("anchorlock", "NPOI.OpenXmlFormats.Vml.Wordprocessing.CT_AnchorLock")]
[XmlElementAttribute("borderbottom", "NPOI.OpenXmlFormats.Vml.Wordprocessing.CT_Border")]
[XmlElementAttribute("borderleft", "NPOI.OpenXmlFormats.Vml.Wordprocessing.CT_Border")]
[XmlElementAttribute("borderright", "NPOI.OpenXmlFormats.Vml.Wordprocessing.CT_Border")]
[XmlElementAttribute("bordertop", "NPOI.OpenXmlFormats.Vml.Wordprocessing.CT_Border")]
[XmlElementAttribute("wrap", "NPOI.OpenXmlFormats.Vml.Wordprocessing.CT_Wrap")]
[XmlElementAttribute("fill", "NPOI.OpenXmlFormats.Vml.CT_Fill")]
[XmlElementAttribute("formulas", "NPOI.OpenXmlFormats.Vml.CT_Formulas")]
[XmlElementAttribute("handles", "NPOI.OpenXmlFormats.Vml.CT_Handles")]
[XmlElementAttribute("imagedata", "NPOI.OpenXmlFormats.Vml.CT_ImageData")]
[XmlElementAttribute("path", "NPOI.OpenXmlFormats.Vml.CT_Path")]
[XmlElementAttribute("shadow", "NPOI.OpenXmlFormats.Vml.CT_Shadow")]
[XmlElementAttribute("stroke", "NPOI.OpenXmlFormats.Vml.CT_Stroke")]
[XmlElementAttribute("textbox", "NPOI.OpenXmlFormats.Vml.CT_Textbox")]
[XmlElementAttribute("textpath", "NPOI.OpenXmlFormats.Vml.CT_TextPath")]
[XmlChoiceIdentifierAttribute("ItemsElementName")]
public Object[] Items { get; public set; }
    [XmlElementAttribute("ItemsElementName")]
[XmlIgnoreAttribute]
public ItemsChoiceType2[] ItemsElementName { get; public set; }
    public Object[] get_Items();
    public void set_Items(Object[] value);
    public ItemsChoiceType2[] get_ItemsElementName();
    public void set_ItemsElementName(ItemsChoiceType2[] value);
}
[DesignerCategoryAttribute("code")]
[XmlTypeAttribute]
[XmlRootAttribute]
public class NPOI.OpenXmlFormats.Vml.CT_Path : object {
    private string idField;
    private string vField;
    private string limoField;
    private string textboxrectField;
    private ST_TrueFalse fillokField;
    private bool fillokFieldSpecified;
    private ST_TrueFalse strokeokField;
    private bool strokeokFieldSpecified;
    private ST_TrueFalse shadowokField;
    private bool shadowokFieldSpecified;
    private ST_TrueFalse arrowokField;
    private bool arrowokFieldSpecified;
    private ST_TrueFalse gradientshapeokField;
    private bool gradientshapeokFieldSpecified;
    private ST_TrueFalse textpathokField;
    private bool textpathokFieldSpecified;
    private ST_TrueFalse insetpenokField;
    private bool insetpenokFieldSpecified;
    private ST_ConnectType connecttypeField;
    private string connectlocsField;
    private bool connectlocsFieldSpecified;
    private string connectanglesField;
    private bool connectanglesFieldSpecified;
    private ST_TrueFalse extrusionokField;
    private bool extrusionokFieldSpecified;
    [XmlAttributeAttribute]
public string id { get; public set; }
    [XmlAttributeAttribute]
public ST_ConnectType connecttype { get; public set; }
    [XmlAttributeAttribute]
public string v { get; public set; }
    [XmlAttributeAttribute]
public string limo { get; public set; }
    [XmlAttributeAttribute]
public string textboxrect { get; public set; }
    [XmlAttributeAttribute]
public ST_TrueFalse fillok { get; public set; }
    [XmlIgnoreAttribute]
public bool fillokSpecified { get; public set; }
    [XmlAttributeAttribute]
public ST_TrueFalse strokeok { get; public set; }
    [XmlIgnoreAttribute]
public bool strokeokSpecified { get; public set; }
    [XmlAttributeAttribute]
public ST_TrueFalse shadowok { get; public set; }
    [XmlIgnoreAttribute]
public bool shadowokSpecified { get; public set; }
    [XmlAttributeAttribute]
public ST_TrueFalse arrowok { get; public set; }
    [XmlIgnoreAttribute]
public bool arrowokSpecified { get; public set; }
    [XmlAttributeAttribute]
public ST_TrueFalse gradientshapeok { get; public set; }
    [XmlIgnoreAttribute]
public bool gradientshapeokSpecified { get; public set; }
    [XmlAttributeAttribute]
public ST_TrueFalse textpathok { get; public set; }
    [XmlIgnoreAttribute]
public bool textpathokSpecified { get; public set; }
    [XmlAttributeAttribute]
public ST_TrueFalse insetpenok { get; public set; }
    [XmlIgnoreAttribute]
public bool insetpenokSpecified { get; public set; }
    [XmlAttributeAttribute]
public string connectlocs { get; public set; }
    [XmlIgnoreAttribute]
public bool connectlocsSpecified { get; public set; }
    [XmlAttributeAttribute]
public string connectangles { get; public set; }
    [XmlIgnoreAttribute]
public bool connectanglesSpecified { get; public set; }
    [XmlAttributeAttribute]
public ST_TrueFalse extrusionok { get; public set; }
    [XmlIgnoreAttribute]
public bool extrusionokSpecified { get; public set; }
    public string get_id();
    public void set_id(string value);
    public ST_ConnectType get_connecttype();
    public void set_connecttype(ST_ConnectType value);
    public string get_v();
    public void set_v(string value);
    public string get_limo();
    public void set_limo(string value);
    public string get_textboxrect();
    public void set_textboxrect(string value);
    public ST_TrueFalse get_fillok();
    public void set_fillok(ST_TrueFalse value);
    public bool get_fillokSpecified();
    public void set_fillokSpecified(bool value);
    public ST_TrueFalse get_strokeok();
    public void set_strokeok(ST_TrueFalse value);
    public bool get_strokeokSpecified();
    public void set_strokeokSpecified(bool value);
    public ST_TrueFalse get_shadowok();
    public void set_shadowok(ST_TrueFalse value);
    public bool get_shadowokSpecified();
    public void set_shadowokSpecified(bool value);
    public ST_TrueFalse get_arrowok();
    public void set_arrowok(ST_TrueFalse value);
    public bool get_arrowokSpecified();
    public void set_arrowokSpecified(bool value);
    public ST_TrueFalse get_gradientshapeok();
    public void set_gradientshapeok(ST_TrueFalse value);
    public bool get_gradientshapeokSpecified();
    public void set_gradientshapeokSpecified(bool value);
    public ST_TrueFalse get_textpathok();
    public void set_textpathok(ST_TrueFalse value);
    public bool get_textpathokSpecified();
    public void set_textpathokSpecified(bool value);
    public ST_TrueFalse get_insetpenok();
    public void set_insetpenok(ST_TrueFalse value);
    public bool get_insetpenokSpecified();
    public void set_insetpenokSpecified(bool value);
    public string get_connectlocs();
    public void set_connectlocs(string value);
    public bool get_connectlocsSpecified();
    public void set_connectlocsSpecified(bool value);
    public string get_connectangles();
    public void set_connectangles(string value);
    public bool get_connectanglesSpecified();
    public void set_connectanglesSpecified(bool value);
    public ST_TrueFalse get_extrusionok();
    public void set_extrusionok(ST_TrueFalse value);
    public bool get_extrusionokSpecified();
    public void set_extrusionokSpecified(bool value);
    public static CT_Path Parse(XmlNode node, XmlNamespaceManager namespaceManager);
    internal void Write(StreamWriter sw, string nodeName);
}
[DesignerCategoryAttribute("code")]
[XmlTypeAttribute]
[XmlRootAttribute]
public class NPOI.OpenXmlFormats.Vml.CT_PolyLine : object {
    private List`1<object> itemsField;
    private List`1<ItemsChoiceType3> itemsElementNameField;
    private string pointsField;
    [XmlElementAttribute("ClientData", "NPOI.OpenXmlFormats.Vml.Spreadsheet.CT_ClientData")]
[XmlElementAttribute("textdata", "NPOI.OpenXmlFormats.Vml.Presentation.CT_Rel")]
[XmlElementAttribute("anchorlock", "NPOI.OpenXmlFormats.Vml.Wordprocessing.CT_AnchorLock")]
[XmlElementAttribute("borderbottom", "NPOI.OpenXmlFormats.Vml.Wordprocessing.CT_Border")]
[XmlElementAttribute("borderleft", "NPOI.OpenXmlFormats.Vml.Wordprocessing.CT_Border")]
[XmlElementAttribute("borderright", "NPOI.OpenXmlFormats.Vml.Wordprocessing.CT_Border")]
[XmlElementAttribute("bordertop", "NPOI.OpenXmlFormats.Vml.Wordprocessing.CT_Border")]
[XmlElementAttribute("wrap", "NPOI.OpenXmlFormats.Vml.Wordprocessing.CT_Wrap")]
[XmlElementAttribute("fill", "NPOI.OpenXmlFormats.Vml.CT_Fill")]
[XmlElementAttribute("formulas", "NPOI.OpenXmlFormats.Vml.CT_Formulas")]
[XmlElementAttribute("handles", "NPOI.OpenXmlFormats.Vml.CT_Handles")]
[XmlElementAttribute("imagedata", "NPOI.OpenXmlFormats.Vml.CT_ImageData")]
[XmlElementAttribute("path", "NPOI.OpenXmlFormats.Vml.CT_Path")]
[XmlElementAttribute("shadow", "NPOI.OpenXmlFormats.Vml.CT_Shadow")]
[XmlElementAttribute("stroke", "NPOI.OpenXmlFormats.Vml.CT_Stroke")]
[XmlElementAttribute("textbox", "NPOI.OpenXmlFormats.Vml.CT_Textbox")]
[XmlElementAttribute("textpath", "NPOI.OpenXmlFormats.Vml.CT_TextPath")]
[XmlChoiceIdentifierAttribute("ItemsElementName")]
public Object[] Items { get; public set; }
    [XmlElementAttribute("ItemsElementName")]
[XmlIgnoreAttribute]
public ItemsChoiceType3[] ItemsElementName { get; public set; }
    [XmlAttributeAttribute]
public string points { get; public set; }
    public Object[] get_Items();
    public void set_Items(Object[] value);
    public ItemsChoiceType3[] get_ItemsElementName();
    public void set_ItemsElementName(ItemsChoiceType3[] value);
    public string get_points();
    public void set_points(string value);
}
[DesignerCategoryAttribute("code")]
[XmlTypeAttribute]
[XmlRootAttribute]
public class NPOI.OpenXmlFormats.Vml.CT_Rect : object {
}
[DesignerCategoryAttribute("code")]
[XmlTypeAttribute]
[XmlRootAttribute]
public class NPOI.OpenXmlFormats.Vml.CT_RoundRect : object {
    private string arcsizeField;
    [XmlAttributeAttribute]
public string arcsize { get; public set; }
    public string get_arcsize();
    public void set_arcsize(string value);
}
[DesignerCategoryAttribute("code")]
[XmlTypeAttribute]
[XmlRootAttribute]
public class NPOI.OpenXmlFormats.Vml.CT_Shadow : object {
    private string idField;
    private ST_TrueFalse onField;
    private bool onFieldSpecified;
    private ST_ShadowType typeField;
    private bool typeFieldSpecified;
    private ST_TrueFalse obscuredField;
    private bool obscuredFieldSpecified;
    private string colorField;
    private string opacityField;
    private string offsetField;
    private string color2Field;
    private string offset2Field;
    private string originField;
    private string matrixField;
    [XmlAttributeAttribute]
public string id { get; public set; }
    [XmlAttributeAttribute]
public ST_TrueFalse on { get; public set; }
    [XmlIgnoreAttribute]
public bool onSpecified { get; public set; }
    [XmlAttributeAttribute]
public ST_ShadowType type { get; public set; }
    [XmlIgnoreAttribute]
public bool typeSpecified { get; public set; }
    [XmlAttributeAttribute]
public ST_TrueFalse obscured { get; public set; }
    [XmlIgnoreAttribute]
public bool obscuredSpecified { get; public set; }
    [XmlAttributeAttribute]
public string color { get; public set; }
    [XmlAttributeAttribute]
public string opacity { get; public set; }
    [XmlAttributeAttribute]
public string offset { get; public set; }
    [XmlAttributeAttribute]
public string color2 { get; public set; }
    [XmlAttributeAttribute]
public string offset2 { get; public set; }
    [XmlAttributeAttribute]
public string origin { get; public set; }
    [XmlAttributeAttribute]
public string matrix { get; public set; }
    public static CT_Shadow Parse(XmlNode node, XmlNamespaceManager namespaceManager);
    internal void Write(StreamWriter sw, string nodeName);
    public string get_id();
    public void set_id(string value);
    public ST_TrueFalse get_on();
    public void set_on(ST_TrueFalse value);
    public bool get_onSpecified();
    public void set_onSpecified(bool value);
    public ST_ShadowType get_type();
    public void set_type(ST_ShadowType value);
    public bool get_typeSpecified();
    public void set_typeSpecified(bool value);
    public ST_TrueFalse get_obscured();
    public void set_obscured(ST_TrueFalse value);
    public bool get_obscuredSpecified();
    public void set_obscuredSpecified(bool value);
    public string get_color();
    public void set_color(string value);
    public string get_opacity();
    public void set_opacity(string value);
    public string get_offset();
    public void set_offset(string value);
    public string get_color2();
    public void set_color2(string value);
    public string get_offset2();
    public void set_offset2(string value);
    public string get_origin();
    public void set_origin(string value);
    public string get_matrix();
    public void set_matrix(string value);
}
[DesignerCategoryAttribute("code")]
[XmlTypeAttribute]
[XmlRootAttribute("shape")]
public class NPOI.OpenXmlFormats.Vml.CT_Shape : object {
    private string typeField;
    private string adjField;
    private string styleField;
    private CT_Path pathField;
    private string equationxmlField;
    private string idField;
    private string fillcolorField;
    private ST_InsetMode insetmodeField;
    private ST_TrueFalse strokedField;
    private string wrapcoordsField;
    private string spidField;
    private CT_Wrap wrapField;
    private CT_Fill fillField;
    private CT_Formulas formulasField;
    private CT_Handles handlesField;
    private CT_ImageData imagedataField;
    private CT_Stroke strokeField;
    private CT_Shadow shadowField;
    private CT_Textbox textboxField;
    private CT_TextPath textpathField;
    private CT_Empty iscommentField;
    private CT_Lock lockField;
    private CT_Border bordertopField;
    private CT_Border borderrightField;
    private CT_Border borderleftField;
    private CT_Border borderbottomField;
    private CT_AnchorLock anchorlockField;
    private CT_Rel textdataField;
    private List`1<CT_ClientData> clientDataField;
    [XmlAttributeAttribute]
public string wrapcoords { get; public set; }
    [XmlAttributeAttribute]
[DefaultValueAttribute("Mono.Cecil.CustomAttributeArgument")]
public ST_TrueFalse stroked { get; public set; }
    [XmlAttributeAttribute]
public string spid { get; public set; }
    [XmlAttributeAttribute]
public string id { get; public set; }
    [XmlAttributeAttribute]
public string fillcolor { get; public set; }
    [XmlAttributeAttribute]
[DefaultValueAttribute("Mono.Cecil.CustomAttributeArgument")]
public ST_InsetMode insetmode { get; public set; }
    [XmlElementAttribute]
public CT_Rel textdata { get; public set; }
    [XmlElementAttribute]
public CT_AnchorLock anchorlock { get; public set; }
    [XmlElementAttribute]
public CT_Border borderright { get; public set; }
    [XmlElementAttribute]
public CT_Border borderleft { get; public set; }
    [XmlElementAttribute]
public CT_Border borderbottom { get; public set; }
    [XmlElementAttribute]
public CT_Border bordertop { get; public set; }
    [XmlElementAttribute]
public CT_Empty iscomment { get; public set; }
    [XmlElementAttribute]
public CT_Stroke stroke { get; public set; }
    [XmlElementAttribute]
public CT_Wrap wrap { get; public set; }
    [XmlElementAttribute]
public CT_Textbox textbox { get; public set; }
    [XmlElementAttribute]
public CT_Fill fill { get; public set; }
    [XmlElementAttribute]
public CT_Formulas formulas { get; public set; }
    [XmlElementAttribute]
public CT_Handles handles { get; public set; }
    [XmlElementAttribute]
public CT_ImageData imagedata { get; public set; }
    [XmlElementAttribute]
public CT_Lock lock { get; public set; }
    [XmlElementAttribute]
public CT_Shadow shadow { get; public set; }
    public List`1<CT_ClientData> ClientData { get; public set; }
    [XmlAttributeAttribute]
public string type { get; public set; }
    [XmlAttributeAttribute]
public string adj { get; public set; }
    [XmlElementAttribute]
public CT_Path path { get; public set; }
    [XmlAttributeAttribute]
public string equationxml { get; public set; }
    [XmlAttributeAttribute]
public string style { get; public set; }
    [XmlElementAttribute]
public CT_TextPath textpath { get; public set; }
    public static CT_Shape Parse(XmlNode node, XmlNamespaceManager namespaceManager);
    public void Write(StreamWriter sw, string nodeName);
    public string get_wrapcoords();
    public void set_wrapcoords(string value);
    public ST_TrueFalse get_stroked();
    public void set_stroked(ST_TrueFalse value);
    public string get_spid();
    public void set_spid(string value);
    public string get_id();
    public void set_id(string value);
    public string get_fillcolor();
    public void set_fillcolor(string value);
    public ST_InsetMode get_insetmode();
    public void set_insetmode(ST_InsetMode value);
    public CT_Textbox AddNewTextbox();
    public CT_Rel get_textdata();
    public void set_textdata(CT_Rel value);
    public CT_AnchorLock get_anchorlock();
    public void set_anchorlock(CT_AnchorLock value);
    public CT_Border get_borderright();
    public void set_borderright(CT_Border value);
    public CT_Border get_borderleft();
    public void set_borderleft(CT_Border value);
    public CT_Border get_borderbottom();
    public void set_borderbottom(CT_Border value);
    public CT_Border get_bordertop();
    public void set_bordertop(CT_Border value);
    public CT_Empty get_iscomment();
    public void set_iscomment(CT_Empty value);
    public CT_Stroke get_stroke();
    public void set_stroke(CT_Stroke value);
    public CT_Wrap get_wrap();
    public void set_wrap(CT_Wrap value);
    public CT_Textbox get_textbox();
    public void set_textbox(CT_Textbox value);
    public CT_Fill get_fill();
    public void set_fill(CT_Fill value);
    public CT_Formulas get_formulas();
    public void set_formulas(CT_Formulas value);
    public CT_Handles get_handles();
    public void set_handles(CT_Handles value);
    public CT_ImageData get_imagedata();
    public void set_imagedata(CT_ImageData value);
    public CT_Lock get_lock();
    public void set_lock(CT_Lock value);
    public CT_Shadow get_shadow();
    public void set_shadow(CT_Shadow value);
    public CT_Fill AddNewFill();
    public CT_Shadow AddNewShadow();
    public CT_Path AddNewPath();
    public List`1<CT_ClientData> get_ClientData();
    public void set_ClientData(List`1<CT_ClientData> value);
    public CT_ClientData GetClientDataArray(int index);
    public int sizeOfClientDataArray();
    public CT_ClientData AddNewClientData();
    public string get_type();
    public void set_type(string value);
    public string get_adj();
    public void set_adj(string value);
    public CT_Path get_path();
    public void set_path(CT_Path value);
    public string get_equationxml();
    public void set_equationxml(string value);
    public string get_style();
    public void set_style(string value);
    public CT_TextPath get_textpath();
    public void set_textpath(CT_TextPath value);
    public void Set(CT_Shape shape);
    public CT_TextPath AddNewTextpath();
    public int SizeOfClientDataArray();
}
[DesignerCategoryAttribute("code")]
[XmlTypeAttribute]
[XmlRootAttribute("shapetype")]
public class NPOI.OpenXmlFormats.Vml.CT_Shapetype : object {
    private CT_Path pathField;
    private List`1<CT_Formulas> formulasField;
    private List`1<CT_Handles> handlesField;
    private List`1<CT_Fill> fillField;
    private CT_Stroke strokeField;
    private List`1<CT_Shadow> shadowField;
    private List`1<CT_Textbox> textboxField;
    private List`1<CT_TextPath> textpathField;
    private List`1<CT_ImageData> imagedataField;
    private List`1<CT_Wrap> wrapField;
    private List`1<CT_AnchorLock> anchorlockField;
    private CT_Lock lockField;
    private List`1<CT_Border> bordertopField;
    private List`1<CT_Border> borderbottomField;
    private List`1<CT_Border> borderleftField;
    private List`1<CT_Border> borderrightField;
    private List`1<CT_ClientData> clientDataField;
    private List`1<CT_Rel> textdataField;
    private string adjField;
    private string idField;
    private ST_TrueFalse filledField;
    private ST_TrueFalse strokedField;
    private ST_TrueFalse preferrelativeField;
    private float sptField;
    private string coordsizeField;
    private string path1Field;
    [XmlAttributeAttribute]
public ST_TrueFalse stroked { get; public set; }
    [XmlAttributeAttribute]
public ST_TrueFalse filled { get; public set; }
    [XmlAttributeAttribute]
public ST_TrueFalse preferrelative { get; public set; }
    [XmlAttributeAttribute]
public string coordsize { get; public set; }
    [XmlAttributeAttribute]
public float spt { get; public set; }
    [XmlAttributeAttribute]
public string id { get; public set; }
    [XmlElementAttribute("stroke")]
public CT_Stroke stroke { get; public set; }
    [XmlElementAttribute("formulas")]
public List`1<CT_Formulas> formulas { get; public set; }
    [XmlElementAttribute("handles")]
public List`1<CT_Handles> handles { get; public set; }
    [XmlElementAttribute("fill")]
public List`1<CT_Fill> fill { get; public set; }
    [XmlElementAttribute("shadow")]
public List`1<CT_Shadow> shadow { get; public set; }
    [XmlElementAttribute("textbox")]
public List`1<CT_Textbox> textbox { get; public set; }
    [XmlElementAttribute("textpath")]
public List`1<CT_TextPath> textpath { get; public set; }
    [XmlElementAttribute("imagedata")]
public List`1<CT_ImageData> imagedata { get; public set; }
    [XmlElementAttribute("wrap")]
public List`1<CT_Wrap> wrap { get; public set; }
    [XmlElementAttribute("anchorlock")]
public List`1<CT_AnchorLock> anchorlock { get; public set; }
    [XmlElementAttribute("path")]
public CT_Path path { get; public set; }
    [XmlElementAttribute("lock")]
public CT_Lock lock { get; public set; }
    [XmlElementAttribute("bordertop")]
public List`1<CT_Border> bordertop { get; public set; }
    [XmlElementAttribute("borderbottom")]
public List`1<CT_Border> borderbottom { get; public set; }
    [XmlElementAttribute("borderleft")]
public List`1<CT_Border> borderleft { get; public set; }
    [XmlElementAttribute("borderright")]
public List`1<CT_Border> borderright { get; public set; }
    [XmlElementAttribute("clientdata")]
public List`1<CT_ClientData> Clientdata { get; public set; }
    [XmlElementAttribute("textdata")]
public List`1<CT_Rel> textdata { get; public set; }
    [XmlAttributeAttribute]
public string adj { get; public set; }
    [XmlAttributeAttribute("path")]
public string path2 { get; public set; }
    public static CT_Shapetype Parse(XmlNode node, XmlNamespaceManager namespaceManager);
    public void Write(StreamWriter sw, string nodeName);
    public ST_TrueFalse get_stroked();
    public void set_stroked(ST_TrueFalse value);
    public ST_TrueFalse get_filled();
    public void set_filled(ST_TrueFalse value);
    public ST_TrueFalse get_preferrelative();
    public void set_preferrelative(ST_TrueFalse value);
    public string get_coordsize();
    public void set_coordsize(string value);
    public float get_spt();
    public void set_spt(float value);
    public string get_id();
    public void set_id(string value);
    public CT_Stroke get_stroke();
    public void set_stroke(CT_Stroke value);
    public List`1<CT_Formulas> get_formulas();
    public void set_formulas(List`1<CT_Formulas> value);
    public List`1<CT_Handles> get_handles();
    public void set_handles(List`1<CT_Handles> value);
    public List`1<CT_Fill> get_fill();
    public void set_fill(List`1<CT_Fill> value);
    public List`1<CT_Shadow> get_shadow();
    public void set_shadow(List`1<CT_Shadow> value);
    public List`1<CT_Textbox> get_textbox();
    public void set_textbox(List`1<CT_Textbox> value);
    public List`1<CT_TextPath> get_textpath();
    public void set_textpath(List`1<CT_TextPath> value);
    public List`1<CT_ImageData> get_imagedata();
    public void set_imagedata(List`1<CT_ImageData> value);
    public List`1<CT_Wrap> get_wrap();
    public void set_wrap(List`1<CT_Wrap> value);
    public List`1<CT_AnchorLock> get_anchorlock();
    public void set_anchorlock(List`1<CT_AnchorLock> value);
    public CT_Path get_path();
    public void set_path(CT_Path value);
    public CT_Lock get_lock();
    public void set_lock(CT_Lock value);
    public List`1<CT_Border> get_bordertop();
    public void set_bordertop(List`1<CT_Border> value);
    public List`1<CT_Border> get_borderbottom();
    public void set_borderbottom(List`1<CT_Border> value);
    public List`1<CT_Border> get_borderleft();
    public void set_borderleft(List`1<CT_Border> value);
    public List`1<CT_Border> get_borderright();
    public void set_borderright(List`1<CT_Border> value);
    public List`1<CT_ClientData> get_Clientdata();
    public void set_Clientdata(List`1<CT_ClientData> value);
    public List`1<CT_Rel> get_textdata();
    public void set_textdata(List`1<CT_Rel> value);
    public string get_adj();
    public void set_adj(string value);
    public string get_path2();
    public void set_path2(string value);
    public CT_Stroke AddNewStroke();
    public CT_Path AddNewPath();
    public CT_Formulas AddNewFormulas();
    public CT_TextPath AddNewTextpath();
    public CT_Handles AddNewHandles();
    public CT_Lock AddNewLock();
}
[DesignerCategoryAttribute("code")]
[XmlTypeAttribute]
[XmlRootAttribute]
public class NPOI.OpenXmlFormats.Vml.CT_Stroke : object {
    private string idField;
    private ST_TrueFalse onField;
    private bool onFieldSpecified;
    private string weightField;
    private string colorField;
    private string opacityField;
    private ST_StrokeLineStyle linestyleField;
    private bool linestyleFieldSpecified;
    private decimal miterlimitField;
    private bool miterlimitFieldSpecified;
    private ST_StrokeJoinStyle joinstyleField;
    private bool joinstyleFieldSpecified;
    private ST_StrokeEndCap endcapField;
    private bool endcapFieldSpecified;
    private string dashstyleField;
    private ST_FillType filltypeField;
    private bool filltypeFieldSpecified;
    private string srcField;
    private ST_ImageAspect imageaspectField;
    private bool imageaspectFieldSpecified;
    private string imagesizeField;
    private ST_TrueFalse imagealignshapeField;
    private bool imagealignshapeFieldSpecified;
    private string color2Field;
    private ST_StrokeArrowType startarrowField;
    private bool startarrowFieldSpecified;
    private ST_StrokeArrowWidth startarrowwidthField;
    private bool startarrowwidthFieldSpecified;
    private ST_StrokeArrowLength startarrowlengthField;
    private bool startarrowlengthFieldSpecified;
    private ST_StrokeArrowType endarrowField;
    private bool endarrowFieldSpecified;
    private ST_StrokeArrowWidth endarrowwidthField;
    private bool endarrowwidthFieldSpecified;
    private ST_StrokeArrowLength endarrowlengthField;
    private bool endarrowlengthFieldSpecified;
    private ST_TrueFalse insetpenField;
    private bool insetpenFieldSpecified;
    [XmlAttributeAttribute]
public string id { get; public set; }
    [XmlAttributeAttribute]
public ST_TrueFalse on { get; public set; }
    [XmlIgnoreAttribute]
public bool onSpecified { get; public set; }
    [XmlAttributeAttribute]
public string weight { get; public set; }
    [XmlAttributeAttribute]
public string color { get; public set; }
    [XmlAttributeAttribute]
public string opacity { get; public set; }
    [XmlAttributeAttribute]
public ST_StrokeLineStyle linestyle { get; public set; }
    [XmlIgnoreAttribute]
public bool linestyleSpecified { get; public set; }
    [XmlAttributeAttribute]
public decimal miterlimit { get; public set; }
    [XmlIgnoreAttribute]
public bool miterlimitSpecified { get; public set; }
    [XmlAttributeAttribute]
public ST_StrokeJoinStyle joinstyle { get; public set; }
    [XmlIgnoreAttribute]
public bool joinstyleSpecified { get; public set; }
    [XmlAttributeAttribute]
public ST_StrokeEndCap endcap { get; public set; }
    [XmlIgnoreAttribute]
public bool endcapSpecified { get; public set; }
    [XmlAttributeAttribute]
public string dashstyle { get; public set; }
    [XmlAttributeAttribute]
public ST_FillType filltype { get; public set; }
    [XmlIgnoreAttribute]
public bool filltypeSpecified { get; public set; }
    [XmlAttributeAttribute]
public string src { get; public set; }
    [XmlAttributeAttribute]
public ST_ImageAspect imageaspect { get; public set; }
    [XmlIgnoreAttribute]
public bool imageaspectSpecified { get; public set; }
    [XmlAttributeAttribute]
public string imagesize { get; public set; }
    [XmlAttributeAttribute]
public ST_TrueFalse imagealignshape { get; public set; }
    [XmlIgnoreAttribute]
public bool imagealignshapeSpecified { get; public set; }
    [XmlAttributeAttribute]
public string color2 { get; public set; }
    [XmlAttributeAttribute]
public ST_StrokeArrowType startarrow { get; public set; }
    [XmlIgnoreAttribute]
public bool startarrowSpecified { get; public set; }
    [XmlAttributeAttribute]
public ST_StrokeArrowWidth startarrowwidth { get; public set; }
    [XmlIgnoreAttribute]
public bool startarrowwidthSpecified { get; public set; }
    [XmlAttributeAttribute]
public ST_StrokeArrowLength startarrowlength { get; public set; }
    [XmlIgnoreAttribute]
public bool startarrowlengthSpecified { get; public set; }
    [XmlAttributeAttribute]
public ST_StrokeArrowType endarrow { get; public set; }
    [XmlIgnoreAttribute]
public bool endarrowSpecified { get; public set; }
    [XmlAttributeAttribute]
public ST_StrokeArrowWidth endarrowwidth { get; public set; }
    [XmlIgnoreAttribute]
public bool endarrowwidthSpecified { get; public set; }
    [XmlAttributeAttribute]
public ST_StrokeArrowLength endarrowlength { get; public set; }
    [XmlIgnoreAttribute]
public bool endarrowlengthSpecified { get; public set; }
    [XmlAttributeAttribute]
public ST_TrueFalse insetpen { get; public set; }
    [XmlIgnoreAttribute]
public bool insetpenSpecified { get; public set; }
    public static CT_Stroke Parse(XmlNode node, XmlNamespaceManager namespaceManager);
    internal void Write(StreamWriter sw, string nodeName);
    public string get_id();
    public void set_id(string value);
    public ST_TrueFalse get_on();
    public void set_on(ST_TrueFalse value);
    public bool get_onSpecified();
    public void set_onSpecified(bool value);
    public string get_weight();
    public void set_weight(string value);
    public string get_color();
    public void set_color(string value);
    public string get_opacity();
    public void set_opacity(string value);
    public ST_StrokeLineStyle get_linestyle();
    public void set_linestyle(ST_StrokeLineStyle value);
    public bool get_linestyleSpecified();
    public void set_linestyleSpecified(bool value);
    public decimal get_miterlimit();
    public void set_miterlimit(decimal value);
    public bool get_miterlimitSpecified();
    public void set_miterlimitSpecified(bool value);
    public ST_StrokeJoinStyle get_joinstyle();
    public void set_joinstyle(ST_StrokeJoinStyle value);
    public bool get_joinstyleSpecified();
    public void set_joinstyleSpecified(bool value);
    public ST_StrokeEndCap get_endcap();
    public void set_endcap(ST_StrokeEndCap value);
    public bool get_endcapSpecified();
    public void set_endcapSpecified(bool value);
    public string get_dashstyle();
    public void set_dashstyle(string value);
    public ST_FillType get_filltype();
    public void set_filltype(ST_FillType value);
    public bool get_filltypeSpecified();
    public void set_filltypeSpecified(bool value);
    public string get_src();
    public void set_src(string value);
    public ST_ImageAspect get_imageaspect();
    public void set_imageaspect(ST_ImageAspect value);
    public bool get_imageaspectSpecified();
    public void set_imageaspectSpecified(bool value);
    public string get_imagesize();
    public void set_imagesize(string value);
    public ST_TrueFalse get_imagealignshape();
    public void set_imagealignshape(ST_TrueFalse value);
    public bool get_imagealignshapeSpecified();
    public void set_imagealignshapeSpecified(bool value);
    public string get_color2();
    public void set_color2(string value);
    public ST_StrokeArrowType get_startarrow();
    public void set_startarrow(ST_StrokeArrowType value);
    public bool get_startarrowSpecified();
    public void set_startarrowSpecified(bool value);
    public ST_StrokeArrowWidth get_startarrowwidth();
    public void set_startarrowwidth(ST_StrokeArrowWidth value);
    public bool get_startarrowwidthSpecified();
    public void set_startarrowwidthSpecified(bool value);
    public ST_StrokeArrowLength get_startarrowlength();
    public void set_startarrowlength(ST_StrokeArrowLength value);
    public bool get_startarrowlengthSpecified();
    public void set_startarrowlengthSpecified(bool value);
    public ST_StrokeArrowType get_endarrow();
    public void set_endarrow(ST_StrokeArrowType value);
    public bool get_endarrowSpecified();
    public void set_endarrowSpecified(bool value);
    public ST_StrokeArrowWidth get_endarrowwidth();
    public void set_endarrowwidth(ST_StrokeArrowWidth value);
    public bool get_endarrowwidthSpecified();
    public void set_endarrowwidthSpecified(bool value);
    public ST_StrokeArrowLength get_endarrowlength();
    public void set_endarrowlength(ST_StrokeArrowLength value);
    public bool get_endarrowlengthSpecified();
    public void set_endarrowlengthSpecified(bool value);
    public ST_TrueFalse get_insetpen();
    public void set_insetpen(ST_TrueFalse value);
    public bool get_insetpenSpecified();
    public void set_insetpenSpecified(bool value);
}
[DesignerCategoryAttribute("code")]
[XmlTypeAttribute]
[XmlRootAttribute]
public class NPOI.OpenXmlFormats.Vml.CT_Textbox : object {
    private string itemField;
    private string idField;
    private string styleField;
    private string insetField;
    public string ItemXml { get; public set; }
    [XmlAttributeAttribute]
public string id { get; public set; }
    [XmlAttributeAttribute]
public string style { get; public set; }
    [XmlAttributeAttribute]
public string inset { get; public set; }
    public string get_ItemXml();
    public void set_ItemXml(string value);
    public string get_id();
    public void set_id(string value);
    public string get_style();
    public void set_style(string value);
    public string get_inset();
    public void set_inset(string value);
    public static CT_Textbox Parse(XmlNode node, XmlNamespaceManager namespaceManager);
    internal void Write(StreamWriter sw, string nodeName);
}
[DesignerCategoryAttribute("code")]
[XmlTypeAttribute]
[XmlRootAttribute]
public class NPOI.OpenXmlFormats.Vml.CT_TextPath : object {
    private string idField;
    private string styleField;
    private ST_TrueFalse onField;
    private bool onFieldSpecified;
    private ST_TrueFalse fitshapeField;
    private bool fitshapeFieldSpecified;
    private ST_TrueFalse fitpathField;
    private bool fitpathFieldSpecified;
    private ST_TrueFalse trimField;
    private bool trimFieldSpecified;
    private ST_TrueFalse xscaleField;
    private bool xscaleFieldSpecified;
    private string stringField;
    [XmlAttributeAttribute]
public string id { get; public set; }
    [XmlAttributeAttribute]
public string style { get; public set; }
    [XmlAttributeAttribute]
public ST_TrueFalse on { get; public set; }
    [XmlIgnoreAttribute]
public bool onSpecified { get; public set; }
    [XmlAttributeAttribute]
public ST_TrueFalse fitshape { get; public set; }
    [XmlIgnoreAttribute]
public bool fitshapeSpecified { get; public set; }
    [XmlAttributeAttribute]
public ST_TrueFalse fitpath { get; public set; }
    [XmlIgnoreAttribute]
public bool fitpathSpecified { get; public set; }
    [XmlAttributeAttribute]
public ST_TrueFalse trim { get; public set; }
    [XmlIgnoreAttribute]
public bool trimSpecified { get; public set; }
    [XmlAttributeAttribute]
public ST_TrueFalse xscale { get; public set; }
    [XmlIgnoreAttribute]
public bool xscaleSpecified { get; public set; }
    [XmlAttributeAttribute]
public string string { get; public set; }
    public static CT_TextPath Parse(XmlNode node, XmlNamespaceManager namespaceManager);
    internal void Write(StreamWriter sw, string nodeName);
    public string get_id();
    public void set_id(string value);
    public string get_style();
    public void set_style(string value);
    public ST_TrueFalse get_on();
    public void set_on(ST_TrueFalse value);
    public bool get_onSpecified();
    public void set_onSpecified(bool value);
    public ST_TrueFalse get_fitshape();
    public void set_fitshape(ST_TrueFalse value);
    public bool get_fitshapeSpecified();
    public void set_fitshapeSpecified(bool value);
    public ST_TrueFalse get_fitpath();
    public void set_fitpath(ST_TrueFalse value);
    public bool get_fitpathSpecified();
    public void set_fitpathSpecified(bool value);
    public ST_TrueFalse get_trim();
    public void set_trim(ST_TrueFalse value);
    public bool get_trimSpecified();
    public void set_trimSpecified(bool value);
    public ST_TrueFalse get_xscale();
    public void set_xscale(ST_TrueFalse value);
    public bool get_xscaleSpecified();
    public void set_xscaleSpecified(bool value);
    public string get_string();
    public void set_string(string value);
}
[XmlTypeAttribute]
public enum NPOI.OpenXmlFormats.Vml.ItemsChoiceType1 : Enum {
    public int value__;
    [XmlEnumAttribute("urn:schemas-microsoft-com:office:excel:ClientData")]
public static ItemsChoiceType1 ClientData;
    [XmlEnumAttribute("urn:schemas-microsoft-com:office:powerpoint:iscomment")]
public static ItemsChoiceType1 iscomment;
    [XmlEnumAttribute("urn:schemas-microsoft-com:office:powerpoint:textdata")]
public static ItemsChoiceType1 textdata;
    [XmlEnumAttribute("urn:schemas-microsoft-com:office:word:anchorlock")]
public static ItemsChoiceType1 anchorlock;
    [XmlEnumAttribute("urn:schemas-microsoft-com:office:word:borderbottom")]
public static ItemsChoiceType1 borderbottom;
    [XmlEnumAttribute("urn:schemas-microsoft-com:office:word:borderleft")]
public static ItemsChoiceType1 borderleft;
    [XmlEnumAttribute("urn:schemas-microsoft-com:office:word:borderright")]
public static ItemsChoiceType1 borderright;
    [XmlEnumAttribute("urn:schemas-microsoft-com:office:word:bordertop")]
public static ItemsChoiceType1 bordertop;
    [XmlEnumAttribute("urn:schemas-microsoft-com:office:word:wrap")]
public static ItemsChoiceType1 wrap;
    public static ItemsChoiceType1 fill;
    public static ItemsChoiceType1 formulas;
    public static ItemsChoiceType1 handles;
    public static ItemsChoiceType1 imagedata;
    public static ItemsChoiceType1 path;
    public static ItemsChoiceType1 shadow;
    public static ItemsChoiceType1 stroke;
    public static ItemsChoiceType1 textbox;
    public static ItemsChoiceType1 textpath;
}
[XmlTypeAttribute]
public enum NPOI.OpenXmlFormats.Vml.ItemsChoiceType2 : Enum {
    public int value__;
    [XmlEnumAttribute("urn:schemas-microsoft-com:office:excel:ClientData")]
public static ItemsChoiceType2 ClientData;
    [XmlEnumAttribute("urn:schemas-microsoft-com:office:powerpoint:textdata")]
public static ItemsChoiceType2 textdata;
    [XmlEnumAttribute("urn:schemas-microsoft-com:office:word:anchorlock")]
public static ItemsChoiceType2 anchorlock;
    [XmlEnumAttribute("urn:schemas-microsoft-com:office:word:borderbottom")]
public static ItemsChoiceType2 borderbottom;
    [XmlEnumAttribute("urn:schemas-microsoft-com:office:word:borderleft")]
public static ItemsChoiceType2 borderleft;
    [XmlEnumAttribute("urn:schemas-microsoft-com:office:word:borderright")]
public static ItemsChoiceType2 borderright;
    [XmlEnumAttribute("urn:schemas-microsoft-com:office:word:bordertop")]
public static ItemsChoiceType2 bordertop;
    [XmlEnumAttribute("urn:schemas-microsoft-com:office:word:wrap")]
public static ItemsChoiceType2 wrap;
    public static ItemsChoiceType2 fill;
    public static ItemsChoiceType2 formulas;
    public static ItemsChoiceType2 handles;
    public static ItemsChoiceType2 imagedata;
    public static ItemsChoiceType2 path;
    public static ItemsChoiceType2 shadow;
    public static ItemsChoiceType2 stroke;
    public static ItemsChoiceType2 textbox;
    public static ItemsChoiceType2 textpath;
}
[XmlTypeAttribute]
public enum NPOI.OpenXmlFormats.Vml.ItemsChoiceType3 : Enum {
    public int value__;
    [XmlEnumAttribute("urn:schemas-microsoft-com:office:excel:ClientData")]
public static ItemsChoiceType3 ClientData;
    [XmlEnumAttribute("urn:schemas-microsoft-com:office:powerpoint:textdata")]
public static ItemsChoiceType3 textdata;
    [XmlEnumAttribute("urn:schemas-microsoft-com:office:word:anchorlock")]
public static ItemsChoiceType3 anchorlock;
    [XmlEnumAttribute("urn:schemas-microsoft-com:office:word:borderbottom")]
public static ItemsChoiceType3 borderbottom;
    [XmlEnumAttribute("urn:schemas-microsoft-com:office:word:borderleft")]
public static ItemsChoiceType3 borderleft;
    [XmlEnumAttribute("urn:schemas-microsoft-com:office:word:borderright")]
public static ItemsChoiceType3 borderright;
    [XmlEnumAttribute("urn:schemas-microsoft-com:office:word:bordertop")]
public static ItemsChoiceType3 bordertop;
    [XmlEnumAttribute("urn:schemas-microsoft-com:office:word:wrap")]
public static ItemsChoiceType3 wrap;
    public static ItemsChoiceType3 fill;
    public static ItemsChoiceType3 formulas;
    public static ItemsChoiceType3 handles;
    public static ItemsChoiceType3 imagedata;
    public static ItemsChoiceType3 path;
    public static ItemsChoiceType3 shadow;
    public static ItemsChoiceType3 stroke;
    public static ItemsChoiceType3 textbox;
    public static ItemsChoiceType3 textpath;
}
[XmlTypeAttribute]
public enum NPOI.OpenXmlFormats.Vml.ItemsChoiceType4 : Enum {
    public int value__;
    [XmlEnumAttribute("urn:schemas-microsoft-com:office:excel:ClientData")]
public static ItemsChoiceType4 ClientData;
    [XmlEnumAttribute("urn:schemas-microsoft-com:office:powerpoint:textdata")]
public static ItemsChoiceType4 textdata;
    [XmlEnumAttribute("urn:schemas-microsoft-com:office:word:anchorlock")]
public static ItemsChoiceType4 anchorlock;
    [XmlEnumAttribute("urn:schemas-microsoft-com:office:word:borderbottom")]
public static ItemsChoiceType4 borderbottom;
    [XmlEnumAttribute("urn:schemas-microsoft-com:office:word:borderleft")]
public static ItemsChoiceType4 borderleft;
    [XmlEnumAttribute("urn:schemas-microsoft-com:office:word:borderright")]
public static ItemsChoiceType4 borderright;
    [XmlEnumAttribute("urn:schemas-microsoft-com:office:word:bordertop")]
public static ItemsChoiceType4 bordertop;
    [XmlEnumAttribute("urn:schemas-microsoft-com:office:word:wrap")]
public static ItemsChoiceType4 wrap;
    public static ItemsChoiceType4 fill;
    public static ItemsChoiceType4 formulas;
    public static ItemsChoiceType4 handles;
    public static ItemsChoiceType4 imagedata;
    public static ItemsChoiceType4 path;
    public static ItemsChoiceType4 shadow;
    public static ItemsChoiceType4 stroke;
    public static ItemsChoiceType4 textbox;
    public static ItemsChoiceType4 textpath;
}
[XmlTypeAttribute]
public enum NPOI.OpenXmlFormats.Vml.ItemsChoiceType5 : Enum {
    public int value__;
    [XmlEnumAttribute("urn:schemas-microsoft-com:office:excel:ClientData")]
public static ItemsChoiceType5 ClientData;
    [XmlEnumAttribute("urn:schemas-microsoft-com:office:powerpoint:textdata")]
public static ItemsChoiceType5 textdata;
    [XmlEnumAttribute("urn:schemas-microsoft-com:office:word:anchorlock")]
public static ItemsChoiceType5 anchorlock;
    [XmlEnumAttribute("urn:schemas-microsoft-com:office:word:borderbottom")]
public static ItemsChoiceType5 borderbottom;
    [XmlEnumAttribute("urn:schemas-microsoft-com:office:word:borderleft")]
public static ItemsChoiceType5 borderleft;
    [XmlEnumAttribute("urn:schemas-microsoft-com:office:word:borderright")]
public static ItemsChoiceType5 borderright;
    [XmlEnumAttribute("urn:schemas-microsoft-com:office:word:bordertop")]
public static ItemsChoiceType5 bordertop;
    [XmlEnumAttribute("urn:schemas-microsoft-com:office:word:wrap")]
public static ItemsChoiceType5 wrap;
    public static ItemsChoiceType5 fill;
    public static ItemsChoiceType5 formulas;
    public static ItemsChoiceType5 handles;
    public static ItemsChoiceType5 imagedata;
    public static ItemsChoiceType5 path;
    public static ItemsChoiceType5 shadow;
    public static ItemsChoiceType5 stroke;
    public static ItemsChoiceType5 textbox;
    public static ItemsChoiceType5 textpath;
}
[XmlTypeAttribute]
public enum NPOI.OpenXmlFormats.Vml.ItemsChoiceType6 : Enum {
    public int value__;
    [XmlEnumAttribute("urn:schemas-microsoft-com:office:excel:ClientData")]
public static ItemsChoiceType6 ClientData;
    [XmlEnumAttribute("urn:schemas-microsoft-com:office:powerpoint:textdata")]
public static ItemsChoiceType6 textdata;
    [XmlEnumAttribute("urn:schemas-microsoft-com:office:word:anchorlock")]
public static ItemsChoiceType6 anchorlock;
    [XmlEnumAttribute("urn:schemas-microsoft-com:office:word:borderbottom")]
public static ItemsChoiceType6 borderbottom;
    [XmlEnumAttribute("urn:schemas-microsoft-com:office:word:borderleft")]
public static ItemsChoiceType6 borderleft;
    [XmlEnumAttribute("urn:schemas-microsoft-com:office:word:borderright")]
public static ItemsChoiceType6 borderright;
    [XmlEnumAttribute("urn:schemas-microsoft-com:office:word:bordertop")]
public static ItemsChoiceType6 bordertop;
    [XmlEnumAttribute("urn:schemas-microsoft-com:office:word:wrap")]
public static ItemsChoiceType6 wrap;
    public static ItemsChoiceType6 arc;
    public static ItemsChoiceType6 curve;
    public static ItemsChoiceType6 fill;
    public static ItemsChoiceType6 formulas;
    public static ItemsChoiceType6 group;
    public static ItemsChoiceType6 handles;
    public static ItemsChoiceType6 image;
    public static ItemsChoiceType6 imagedata;
    public static ItemsChoiceType6 line;
    public static ItemsChoiceType6 oval;
    public static ItemsChoiceType6 path;
    public static ItemsChoiceType6 polyline;
    public static ItemsChoiceType6 rect;
    public static ItemsChoiceType6 roundrect;
    public static ItemsChoiceType6 shadow;
    public static ItemsChoiceType6 shape;
    public static ItemsChoiceType6 shapetype;
    public static ItemsChoiceType6 stroke;
    public static ItemsChoiceType6 textbox;
    public static ItemsChoiceType6 textpath;
}
[DesignerCategoryAttribute("code")]
[XmlTypeAttribute]
[XmlRootAttribute]
public class NPOI.OpenXmlFormats.Vml.Office.CT_Callout : object {
    private ST_Ext extField;
    private ST_TrueFalse onField;
    private bool onFieldSpecified;
    private string typeField;
    private string gapField;
    private ST_Angle angleField;
    private bool angleFieldSpecified;
    private ST_TrueFalse dropautoField;
    private bool dropautoFieldSpecified;
    private string dropField;
    private string distanceField;
    private ST_TrueFalse lengthspecifiedField;
    private string lengthField;
    private ST_TrueFalse accentbarField;
    private bool accentbarFieldSpecified;
    private ST_TrueFalse textborderField;
    private bool textborderFieldSpecified;
    private ST_TrueFalse minusxField;
    private bool minusxFieldSpecified;
    private ST_TrueFalse minusyField;
    private bool minusyFieldSpecified;
    [XmlAttributeAttribute]
public ST_Ext ext { get; public set; }
    [XmlIgnoreAttribute]
public bool extSpecified { get; }
    [XmlAttributeAttribute]
public ST_TrueFalse on { get; public set; }
    [XmlIgnoreAttribute]
public bool onSpecified { get; public set; }
    [XmlAttributeAttribute]
public string type { get; public set; }
    [XmlAttributeAttribute]
public string gap { get; public set; }
    [XmlAttributeAttribute]
public ST_Angle angle { get; public set; }
    [XmlIgnoreAttribute]
public bool angleSpecified { get; public set; }
    [XmlAttributeAttribute]
public ST_TrueFalse dropauto { get; public set; }
    [XmlIgnoreAttribute]
public bool dropautoSpecified { get; public set; }
    [XmlAttributeAttribute]
public string drop { get; public set; }
    [XmlAttributeAttribute]
public string distance { get; public set; }
    [XmlAttributeAttribute]
[DefaultValueAttribute("Mono.Cecil.CustomAttributeArgument")]
public ST_TrueFalse lengthspecified { get; public set; }
    [XmlAttributeAttribute]
public string length { get; public set; }
    [XmlAttributeAttribute]
public ST_TrueFalse accentbar { get; public set; }
    [XmlIgnoreAttribute]
public bool accentbarSpecified { get; public set; }
    [XmlAttributeAttribute]
public ST_TrueFalse textborder { get; public set; }
    [XmlIgnoreAttribute]
public bool textborderSpecified { get; public set; }
    [XmlAttributeAttribute]
public ST_TrueFalse minusx { get; public set; }
    [XmlIgnoreAttribute]
public bool minusxSpecified { get; public set; }
    [XmlAttributeAttribute]
public ST_TrueFalse minusy { get; public set; }
    [XmlIgnoreAttribute]
public bool minusySpecified { get; public set; }
    public ST_Ext get_ext();
    public void set_ext(ST_Ext value);
    public bool get_extSpecified();
    public ST_TrueFalse get_on();
    public void set_on(ST_TrueFalse value);
    public bool get_onSpecified();
    public void set_onSpecified(bool value);
    public string get_type();
    public void set_type(string value);
    public string get_gap();
    public void set_gap(string value);
    public ST_Angle get_angle();
    public void set_angle(ST_Angle value);
    public bool get_angleSpecified();
    public void set_angleSpecified(bool value);
    public ST_TrueFalse get_dropauto();
    public void set_dropauto(ST_TrueFalse value);
    public bool get_dropautoSpecified();
    public void set_dropautoSpecified(bool value);
    public string get_drop();
    public void set_drop(string value);
    public string get_distance();
    public void set_distance(string value);
    public ST_TrueFalse get_lengthspecified();
    public void set_lengthspecified(ST_TrueFalse value);
    public string get_length();
    public void set_length(string value);
    public ST_TrueFalse get_accentbar();
    public void set_accentbar(ST_TrueFalse value);
    public bool get_accentbarSpecified();
    public void set_accentbarSpecified(bool value);
    public ST_TrueFalse get_textborder();
    public void set_textborder(ST_TrueFalse value);
    public bool get_textborderSpecified();
    public void set_textborderSpecified(bool value);
    public ST_TrueFalse get_minusx();
    public void set_minusx(ST_TrueFalse value);
    public bool get_minusxSpecified();
    public void set_minusxSpecified(bool value);
    public ST_TrueFalse get_minusy();
    public void set_minusy(ST_TrueFalse value);
    public bool get_minusySpecified();
    public void set_minusySpecified(bool value);
}
[DesignerCategoryAttribute("code")]
[XmlTypeAttribute]
[XmlRootAttribute]
public class NPOI.OpenXmlFormats.Vml.Office.CT_ClipPath : object {
    private string vField;
    [XmlAttributeAttribute]
public string v { get; public set; }
    public string get_v();
    public void set_v(string value);
}
[DesignerCategoryAttribute("code")]
[XmlTypeAttribute]
[XmlRootAttribute]
public class NPOI.OpenXmlFormats.Vml.Office.CT_ColorMenu : object {
    private ST_Ext extField;
    private string strokecolorField;
    private string fillcolorField;
    private string shadowcolorField;
    private string extrusioncolorField;
    [XmlAttributeAttribute]
public ST_Ext ext { get; public set; }
    [XmlIgnoreAttribute]
public bool extSpecified { get; }
    [XmlAttributeAttribute]
public string strokecolor { get; public set; }
    [XmlAttributeAttribute]
public string fillcolor { get; public set; }
    [XmlAttributeAttribute]
public string shadowcolor { get; public set; }
    [XmlAttributeAttribute]
public string extrusioncolor { get; public set; }
    public ST_Ext get_ext();
    public void set_ext(ST_Ext value);
    public bool get_extSpecified();
    public string get_strokecolor();
    public void set_strokecolor(string value);
    public string get_fillcolor();
    public void set_fillcolor(string value);
    public string get_shadowcolor();
    public void set_shadowcolor(string value);
    public string get_extrusioncolor();
    public void set_extrusioncolor(string value);
}
[DesignerCategoryAttribute("code")]
[XmlTypeAttribute]
[XmlRootAttribute]
public class NPOI.OpenXmlFormats.Vml.Office.CT_ColorMru : object {
    private ST_Ext extField;
    private string colorsField;
    [XmlAttributeAttribute]
public ST_Ext ext { get; public set; }
    [XmlIgnoreAttribute]
public bool extSpecified { get; }
    [XmlAttributeAttribute]
public string colors { get; public set; }
    public ST_Ext get_ext();
    public void set_ext(ST_Ext value);
    public bool get_extSpecified();
    public string get_colors();
    public void set_colors(string value);
}
[DesignerCategoryAttribute("code")]
[XmlTypeAttribute]
[XmlRootAttribute]
public class NPOI.OpenXmlFormats.Vml.Office.CT_Complex : object {
    private ST_Ext extField;
    [XmlAttributeAttribute]
public ST_Ext ext { get; public set; }
    [XmlIgnoreAttribute]
public bool extSpecified { get; }
    public ST_Ext get_ext();
    public void set_ext(ST_Ext value);
    public bool get_extSpecified();
}
[DesignerCategoryAttribute("code")]
[XmlTypeAttribute]
[XmlRootAttribute]
public class NPOI.OpenXmlFormats.Vml.Office.CT_Diagram : object {
    private CT_RelationTable relationtableField;
    private ST_Ext extField;
    private string dgmstyleField;
    private ST_TrueFalse autoformatField;
    private bool autoformatFieldSpecified;
    private ST_TrueFalse reverseField;
    private bool reverseFieldSpecified;
    private ST_TrueFalse autolayoutField;
    private bool autolayoutFieldSpecified;
    private string dgmscalexField;
    private string dgmscaleyField;
    private string dgmfontsizeField;
    private string constrainboundsField;
    private string dgmbasetextscaleField;
    public CT_RelationTable relationtable { get; public set; }
    [XmlAttributeAttribute]
public ST_Ext ext { get; public set; }
    [XmlIgnoreAttribute]
public bool extSpecified { get; }
    [XmlAttributeAttribute]
public string dgmstyle { get; public set; }
    [XmlAttributeAttribute]
public ST_TrueFalse autoformat { get; public set; }
    [XmlIgnoreAttribute]
public bool autoformatSpecified { get; public set; }
    [XmlAttributeAttribute]
public ST_TrueFalse reverse { get; public set; }
    [XmlIgnoreAttribute]
public bool reverseSpecified { get; public set; }
    [XmlAttributeAttribute]
public ST_TrueFalse autolayout { get; public set; }
    [XmlIgnoreAttribute]
public bool autolayoutSpecified { get; public set; }
    [XmlAttributeAttribute]
public string dgmscalex { get; public set; }
    [XmlAttributeAttribute]
public string dgmscaley { get; public set; }
    [XmlAttributeAttribute]
public string dgmfontsize { get; public set; }
    [XmlAttributeAttribute]
public string constrainbounds { get; public set; }
    [XmlAttributeAttribute]
public string dgmbasetextscale { get; public set; }
    public CT_RelationTable get_relationtable();
    public void set_relationtable(CT_RelationTable value);
    public ST_Ext get_ext();
    public void set_ext(ST_Ext value);
    public bool get_extSpecified();
    public string get_dgmstyle();
    public void set_dgmstyle(string value);
    public ST_TrueFalse get_autoformat();
    public void set_autoformat(ST_TrueFalse value);
    public bool get_autoformatSpecified();
    public void set_autoformatSpecified(bool value);
    public ST_TrueFalse get_reverse();
    public void set_reverse(ST_TrueFalse value);
    public bool get_reverseSpecified();
    public void set_reverseSpecified(bool value);
    public ST_TrueFalse get_autolayout();
    public void set_autolayout(ST_TrueFalse value);
    public bool get_autolayoutSpecified();
    public void set_autolayoutSpecified(bool value);
    public string get_dgmscalex();
    public void set_dgmscalex(string value);
    public string get_dgmscaley();
    public void set_dgmscaley(string value);
    public string get_dgmfontsize();
    public void set_dgmfontsize(string value);
    public string get_constrainbounds();
    public void set_constrainbounds(string value);
    public string get_dgmbasetextscale();
    public void set_dgmbasetextscale(string value);
}
[DesignerCategoryAttribute("code")]
[XmlTypeAttribute]
[XmlRootAttribute]
public class NPOI.OpenXmlFormats.Vml.Office.CT_Entry : object {
    private Nullable`1<int> newField;
    private Nullable`1<int> oldField;
    [XmlAttributeAttribute]
public Nullable`1<int> new { get; public set; }
    [XmlIgnoreAttribute]
public bool newSpecified { get; }
    [XmlAttributeAttribute]
public Nullable`1<int> old { get; public set; }
    [XmlIgnoreAttribute]
public bool oldSpecified { get; }
    public Nullable`1<int> get_new();
    public void set_new(Nullable`1<int> value);
    public bool get_newSpecified();
    public Nullable`1<int> get_old();
    public void set_old(Nullable`1<int> value);
    public bool get_oldSpecified();
    public static CT_Entry Parse(XmlNode node, XmlNamespaceManager namespaceManager);
    internal void Write(StreamWriter sw, string nodeName);
}
[DesignerCategoryAttribute("code")]
[XmlTypeAttribute]
[XmlRootAttribute]
public class NPOI.OpenXmlFormats.Vml.Office.CT_Extrusion : object {
    private ST_Ext extField;
    private ST_TrueFalse onField;
    private bool onFieldSpecified;
    private ST_ExtrusionType typeField;
    private ST_ExtrusionRender renderField;
    private string viewpointoriginField;
    private string viewpointField;
    private ST_ExtrusionPlane planeField;
    private float skewangleField;
    private bool skewangleFieldSpecified;
    private string skewamtField;
    private string foredepthField;
    private string backdepthField;
    private string orientationField;
    private float orientationangleField;
    private bool orientationangleFieldSpecified;
    private ST_TrueFalse lockrotationcenterField;
    private bool lockrotationcenterFieldSpecified;
    private ST_TrueFalse autorotationcenterField;
    private bool autorotationcenterFieldSpecified;
    private string rotationcenterField;
    private string rotationangleField;
    private ST_ColorMode colormodeField;
    private bool colormodeFieldSpecified;
    private string colorField;
    private float shininessField;
    private bool shininessFieldSpecified;
    private string specularityField;
    private string diffusityField;
    private ST_TrueFalse metalField;
    private bool metalFieldSpecified;
    private string edgeField;
    private string facetField;
    private ST_TrueFalse lightfaceField;
    private bool lightfaceFieldSpecified;
    private string brightnessField;
    private string lightpositionField;
    private string lightlevelField;
    private ST_TrueFalse lightharshField;
    private bool lightharshFieldSpecified;
    private string lightposition2Field;
    private string lightlevel2Field;
    private ST_TrueFalse lightharsh2Field;
    private bool lightharsh2FieldSpecified;
    [XmlAttributeAttribute]
public ST_Ext ext { get; public set; }
    [XmlIgnoreAttribute]
public bool extSpecified { get; }
    [XmlAttributeAttribute]
public ST_TrueFalse on { get; public set; }
    [XmlIgnoreAttribute]
public bool onSpecified { get; public set; }
    [XmlAttributeAttribute]
[DefaultValueAttribute("Mono.Cecil.CustomAttributeArgument")]
public ST_ExtrusionType type { get; public set; }
    [XmlAttributeAttribute]
[DefaultValueAttribute("Mono.Cecil.CustomAttributeArgument")]
public ST_ExtrusionRender render { get; public set; }
    [XmlAttributeAttribute]
public string viewpointorigin { get; public set; }
    [XmlAttributeAttribute]
public string viewpoint { get; public set; }
    [XmlAttributeAttribute]
[DefaultValueAttribute("Mono.Cecil.CustomAttributeArgument")]
public ST_ExtrusionPlane plane { get; public set; }
    [XmlAttributeAttribute]
public float skewangle { get; public set; }
    [XmlIgnoreAttribute]
public bool skewangleSpecified { get; public set; }
    [XmlAttributeAttribute]
public string skewamt { get; public set; }
    [XmlAttributeAttribute]
public string foredepth { get; public set; }
    [XmlAttributeAttribute]
public string backdepth { get; public set; }
    [XmlAttributeAttribute]
public string orientation { get; public set; }
    [XmlAttributeAttribute]
public float orientationangle { get; public set; }
    [XmlIgnoreAttribute]
public bool orientationangleSpecified { get; public set; }
    [XmlAttributeAttribute]
public ST_TrueFalse lockrotationcenter { get; public set; }
    [XmlIgnoreAttribute]
public bool lockrotationcenterSpecified { get; public set; }
    [XmlAttributeAttribute]
public ST_TrueFalse autorotationcenter { get; public set; }
    [XmlIgnoreAttribute]
public bool autorotationcenterSpecified { get; public set; }
    [XmlAttributeAttribute]
public string rotationcenter { get; public set; }
    [XmlAttributeAttribute]
public string rotationangle { get; public set; }
    [XmlAttributeAttribute]
public ST_ColorMode colormode { get; public set; }
    [XmlIgnoreAttribute]
public bool colormodeSpecified { get; public set; }
    [XmlAttributeAttribute]
public string color { get; public set; }
    [XmlAttributeAttribute]
public float shininess { get; public set; }
    [XmlIgnoreAttribute]
public bool shininessSpecified { get; public set; }
    [XmlAttributeAttribute]
public string specularity { get; public set; }
    [XmlAttributeAttribute]
public string diffusity { get; public set; }
    [XmlAttributeAttribute]
public ST_TrueFalse metal { get; public set; }
    [XmlIgnoreAttribute]
public bool metalSpecified { get; public set; }
    [XmlAttributeAttribute]
public string edge { get; public set; }
    [XmlAttributeAttribute]
public string facet { get; public set; }
    [XmlAttributeAttribute]
public ST_TrueFalse lightface { get; public set; }
    [XmlIgnoreAttribute]
public bool lightfaceSpecified { get; public set; }
    [XmlAttributeAttribute]
public string brightness { get; public set; }
    [XmlAttributeAttribute]
public string lightposition { get; public set; }
    [XmlAttributeAttribute]
public string lightlevel { get; public set; }
    [XmlAttributeAttribute]
public ST_TrueFalse lightharsh { get; public set; }
    [XmlIgnoreAttribute]
public bool lightharshSpecified { get; public set; }
    [XmlAttributeAttribute]
public string lightposition2 { get; public set; }
    [XmlAttributeAttribute]
public string lightlevel2 { get; public set; }
    [XmlAttributeAttribute]
public ST_TrueFalse lightharsh2 { get; public set; }
    [XmlIgnoreAttribute]
public bool lightharsh2Specified { get; public set; }
    public ST_Ext get_ext();
    public void set_ext(ST_Ext value);
    public bool get_extSpecified();
    public ST_TrueFalse get_on();
    public void set_on(ST_TrueFalse value);
    public bool get_onSpecified();
    public void set_onSpecified(bool value);
    public ST_ExtrusionType get_type();
    public void set_type(ST_ExtrusionType value);
    public ST_ExtrusionRender get_render();
    public void set_render(ST_ExtrusionRender value);
    public string get_viewpointorigin();
    public void set_viewpointorigin(string value);
    public string get_viewpoint();
    public void set_viewpoint(string value);
    public ST_ExtrusionPlane get_plane();
    public void set_plane(ST_ExtrusionPlane value);
    public float get_skewangle();
    public void set_skewangle(float value);
    public bool get_skewangleSpecified();
    public void set_skewangleSpecified(bool value);
    public string get_skewamt();
    public void set_skewamt(string value);
    public string get_foredepth();
    public void set_foredepth(string value);
    public string get_backdepth();
    public void set_backdepth(string value);
    public string get_orientation();
    public void set_orientation(string value);
    public float get_orientationangle();
    public void set_orientationangle(float value);
    public bool get_orientationangleSpecified();
    public void set_orientationangleSpecified(bool value);
    public ST_TrueFalse get_lockrotationcenter();
    public void set_lockrotationcenter(ST_TrueFalse value);
    public bool get_lockrotationcenterSpecified();
    public void set_lockrotationcenterSpecified(bool value);
    public ST_TrueFalse get_autorotationcenter();
    public void set_autorotationcenter(ST_TrueFalse value);
    public bool get_autorotationcenterSpecified();
    public void set_autorotationcenterSpecified(bool value);
    public string get_rotationcenter();
    public void set_rotationcenter(string value);
    public string get_rotationangle();
    public void set_rotationangle(string value);
    public ST_ColorMode get_colormode();
    public void set_colormode(ST_ColorMode value);
    public bool get_colormodeSpecified();
    public void set_colormodeSpecified(bool value);
    public string get_color();
    public void set_color(string value);
    public float get_shininess();
    public void set_shininess(float value);
    public bool get_shininessSpecified();
    public void set_shininessSpecified(bool value);
    public string get_specularity();
    public void set_specularity(string value);
    public string get_diffusity();
    public void set_diffusity(string value);
    public ST_TrueFalse get_metal();
    public void set_metal(ST_TrueFalse value);
    public bool get_metalSpecified();
    public void set_metalSpecified(bool value);
    public string get_edge();
    public void set_edge(string value);
    public string get_facet();
    public void set_facet(string value);
    public ST_TrueFalse get_lightface();
    public void set_lightface(ST_TrueFalse value);
    public bool get_lightfaceSpecified();
    public void set_lightfaceSpecified(bool value);
    public string get_brightness();
    public void set_brightness(string value);
    public string get_lightposition();
    public void set_lightposition(string value);
    public string get_lightlevel();
    public void set_lightlevel(string value);
    public ST_TrueFalse get_lightharsh();
    public void set_lightharsh(ST_TrueFalse value);
    public bool get_lightharshSpecified();
    public void set_lightharshSpecified(bool value);
    public string get_lightposition2();
    public void set_lightposition2(string value);
    public string get_lightlevel2();
    public void set_lightlevel2(string value);
    public ST_TrueFalse get_lightharsh2();
    public void set_lightharsh2(ST_TrueFalse value);
    public bool get_lightharsh2Specified();
    public void set_lightharsh2Specified(bool value);
}
[DesignerCategoryAttribute("code")]
[XmlTypeAttribute]
[XmlRootAttribute("CT_Fill")]
public class NPOI.OpenXmlFormats.Vml.Office.CT_Fill : object {
    private ST_Ext extField;
    private ST_FillType1 typeField;
    private bool typeFieldSpecified;
    [XmlAttributeAttribute]
public ST_Ext ext { get; public set; }
    [XmlIgnoreAttribute]
public bool extSpecified { get; }
    [XmlAttributeAttribute]
public ST_FillType1 type { get; public set; }
    [XmlIgnoreAttribute]
public bool typeSpecified { get; public set; }
    public ST_Ext get_ext();
    public void set_ext(ST_Ext value);
    public bool get_extSpecified();
    public ST_FillType1 get_type();
    public void set_type(ST_FillType1 value);
    public bool get_typeSpecified();
    public void set_typeSpecified(bool value);
}
[DesignerCategoryAttribute("code")]
[XmlTypeAttribute]
[XmlRootAttribute]
public class NPOI.OpenXmlFormats.Vml.Office.CT_IdMap : object {
    private ST_Ext extField;
    private string dataField;
    [XmlAttributeAttribute]
public ST_Ext ext { get; public set; }
    [XmlIgnoreAttribute]
public bool extSpecified { get; }
    [XmlAttributeAttribute]
public string data { get; public set; }
    [XmlIgnoreAttribute]
public bool dataSpecified { get; }
    public ST_Ext get_ext();
    public void set_ext(ST_Ext value);
    public bool get_extSpecified();
    public string get_data();
    public void set_data(string value);
    public bool get_dataSpecified();
    public static CT_IdMap Parse(XmlNode node, XmlNamespaceManager namespaceManager);
    internal void Write(StreamWriter sw, string nodeName);
}
[DesignerCategoryAttribute("code")]
[XmlTypeAttribute]
[XmlRootAttribute]
public class NPOI.OpenXmlFormats.Vml.Office.CT_Ink : object {
    private Byte[] iField;
    private ST_TrueFalse annotationField;
    private bool annotationFieldSpecified;
    [XmlAttributeAttribute]
public Byte[] i { get; public set; }
    [XmlAttributeAttribute]
public ST_TrueFalse annotation { get; public set; }
    [XmlIgnoreAttribute]
public bool annotationSpecified { get; public set; }
    public Byte[] get_i();
    public void set_i(Byte[] value);
    public ST_TrueFalse get_annotation();
    public void set_annotation(ST_TrueFalse value);
    public bool get_annotationSpecified();
    public void set_annotationSpecified(bool value);
}
[DesignerCategoryAttribute("code")]
[XmlTypeAttribute]
[XmlRootAttribute]
public class NPOI.OpenXmlFormats.Vml.Office.CT_Lock : object {
    private ST_Ext extField;
    private ST_TrueFalse positionField;
    private bool positionFieldSpecified;
    private ST_TrueFalse selectionField;
    private bool selectionFieldSpecified;
    private ST_TrueFalse groupingField;
    private bool groupingFieldSpecified;
    private ST_TrueFalse ungroupingField;
    private bool ungroupingFieldSpecified;
    private ST_TrueFalse rotationField;
    private bool rotationFieldSpecified;
    private ST_TrueFalse croppingField;
    private bool croppingFieldSpecified;
    private ST_TrueFalse verticiesField;
    private bool verticiesFieldSpecified;
    private ST_TrueFalse adjusthandlesField;
    private bool adjusthandlesFieldSpecified;
    private ST_TrueFalse textField;
    private bool textFieldSpecified;
    private ST_TrueFalse aspectratioField;
    private bool aspectratioFieldSpecified;
    private ST_TrueFalse shapetypeField;
    private bool shapetypeFieldSpecified;
    [XmlAttributeAttribute]
public ST_Ext ext { get; public set; }
    [XmlIgnoreAttribute]
public bool extSpecified { get; }
    [XmlAttributeAttribute]
public ST_TrueFalse position { get; public set; }
    [XmlIgnoreAttribute]
public bool positionSpecified { get; public set; }
    [XmlAttributeAttribute]
public ST_TrueFalse selection { get; public set; }
    [XmlIgnoreAttribute]
public bool selectionSpecified { get; public set; }
    [XmlAttributeAttribute]
public ST_TrueFalse grouping { get; public set; }
    [XmlIgnoreAttribute]
public bool groupingSpecified { get; public set; }
    [XmlAttributeAttribute]
public ST_TrueFalse ungrouping { get; public set; }
    [XmlIgnoreAttribute]
public bool ungroupingSpecified { get; public set; }
    [XmlAttributeAttribute]
public ST_TrueFalse rotation { get; public set; }
    [XmlIgnoreAttribute]
public bool rotationSpecified { get; public set; }
    [XmlAttributeAttribute]
public ST_TrueFalse cropping { get; public set; }
    [XmlIgnoreAttribute]
public bool croppingSpecified { get; public set; }
    [XmlAttributeAttribute]
public ST_TrueFalse verticies { get; public set; }
    [XmlIgnoreAttribute]
public bool verticiesSpecified { get; public set; }
    [XmlAttributeAttribute]
public ST_TrueFalse adjusthandles { get; public set; }
    [XmlIgnoreAttribute]
public bool adjusthandlesSpecified { get; public set; }
    [XmlAttributeAttribute]
public ST_TrueFalse text { get; public set; }
    [XmlIgnoreAttribute]
public bool textSpecified { get; public set; }
    [XmlAttributeAttribute]
public ST_TrueFalse aspectratio { get; public set; }
    [XmlIgnoreAttribute]
public bool aspectratioSpecified { get; public set; }
    [XmlAttributeAttribute]
public ST_TrueFalse shapetype { get; public set; }
    [XmlIgnoreAttribute]
public bool shapetypeSpecified { get; public set; }
    public ST_Ext get_ext();
    public void set_ext(ST_Ext value);
    public bool get_extSpecified();
    public ST_TrueFalse get_position();
    public void set_position(ST_TrueFalse value);
    public bool get_positionSpecified();
    public void set_positionSpecified(bool value);
    public ST_TrueFalse get_selection();
    public void set_selection(ST_TrueFalse value);
    public bool get_selectionSpecified();
    public void set_selectionSpecified(bool value);
    public ST_TrueFalse get_grouping();
    public void set_grouping(ST_TrueFalse value);
    public bool get_groupingSpecified();
    public void set_groupingSpecified(bool value);
    public ST_TrueFalse get_ungrouping();
    public void set_ungrouping(ST_TrueFalse value);
    public bool get_ungroupingSpecified();
    public void set_ungroupingSpecified(bool value);
    public ST_TrueFalse get_rotation();
    public void set_rotation(ST_TrueFalse value);
    public bool get_rotationSpecified();
    public void set_rotationSpecified(bool value);
    public ST_TrueFalse get_cropping();
    public void set_cropping(ST_TrueFalse value);
    public bool get_croppingSpecified();
    public void set_croppingSpecified(bool value);
    public ST_TrueFalse get_verticies();
    public void set_verticies(ST_TrueFalse value);
    public bool get_verticiesSpecified();
    public void set_verticiesSpecified(bool value);
    public ST_TrueFalse get_adjusthandles();
    public void set_adjusthandles(ST_TrueFalse value);
    public bool get_adjusthandlesSpecified();
    public void set_adjusthandlesSpecified(bool value);
    public ST_TrueFalse get_text();
    public void set_text(ST_TrueFalse value);
    public bool get_textSpecified();
    public void set_textSpecified(bool value);
    public ST_TrueFalse get_aspectratio();
    public void set_aspectratio(ST_TrueFalse value);
    public bool get_aspectratioSpecified();
    public void set_aspectratioSpecified(bool value);
    public ST_TrueFalse get_shapetype();
    public void set_shapetype(ST_TrueFalse value);
    public bool get_shapetypeSpecified();
    public void set_shapetypeSpecified(bool value);
    public static CT_Lock Parse(XmlNode node, XmlNamespaceManager namespaceManager);
    internal void Write(StreamWriter sw, string nodeName);
}
[DesignerCategoryAttribute("code")]
[XmlTypeAttribute]
[XmlRootAttribute]
public class NPOI.OpenXmlFormats.Vml.Office.CT_OLEObject : object {
    private ST_OLELinkType linkTypeField;
    private bool linkTypeFieldSpecified;
    private ST_TrueFalseBlank lockedFieldField;
    private bool lockedFieldFieldSpecified;
    private string fieldCodesField;
    private ST_OLEType typeField;
    private bool typeFieldSpecified;
    private string progIDField;
    private string shapeIDField;
    private ST_OLEDrawAspect drawAspectField;
    private bool drawAspectFieldSpecified;
    private string objectIDField;
    private string idField;
    private ST_OLEUpdateMode updateModeField;
    private bool updateModeFieldSpecified;
    public ST_OLELinkType LinkType { get; public set; }
    [XmlIgnoreAttribute]
public bool LinkTypeSpecified { get; public set; }
    public ST_TrueFalseBlank LockedField { get; public set; }
    [XmlIgnoreAttribute]
public bool LockedFieldSpecified { get; public set; }
    public string FieldCodes { get; public set; }
    [XmlAttributeAttribute]
public ST_OLEType Type { get; public set; }
    [XmlIgnoreAttribute]
public bool TypeSpecified { get; public set; }
    [XmlAttributeAttribute]
public string ProgID { get; public set; }
    [XmlAttributeAttribute]
public string ShapeID { get; public set; }
    [XmlAttributeAttribute]
public ST_OLEDrawAspect DrawAspect { get; public set; }
    [XmlIgnoreAttribute]
public bool DrawAspectSpecified { get; public set; }
    [XmlAttributeAttribute]
public string ObjectID { get; public set; }
    [XmlAttributeAttribute]
public string id { get; public set; }
    [XmlAttributeAttribute]
public ST_OLEUpdateMode UpdateMode { get; public set; }
    [XmlIgnoreAttribute]
public bool UpdateModeSpecified { get; public set; }
    public ST_OLELinkType get_LinkType();
    public void set_LinkType(ST_OLELinkType value);
    public bool get_LinkTypeSpecified();
    public void set_LinkTypeSpecified(bool value);
    public ST_TrueFalseBlank get_LockedField();
    public void set_LockedField(ST_TrueFalseBlank value);
    public bool get_LockedFieldSpecified();
    public void set_LockedFieldSpecified(bool value);
    public string get_FieldCodes();
    public void set_FieldCodes(string value);
    public ST_OLEType get_Type();
    public void set_Type(ST_OLEType value);
    public bool get_TypeSpecified();
    public void set_TypeSpecified(bool value);
    public string get_ProgID();
    public void set_ProgID(string value);
    public string get_ShapeID();
    public void set_ShapeID(string value);
    public ST_OLEDrawAspect get_DrawAspect();
    public void set_DrawAspect(ST_OLEDrawAspect value);
    public bool get_DrawAspectSpecified();
    public void set_DrawAspectSpecified(bool value);
    public string get_ObjectID();
    public void set_ObjectID(string value);
    public string get_id();
    public void set_id(string value);
    public ST_OLEUpdateMode get_UpdateMode();
    public void set_UpdateMode(ST_OLEUpdateMode value);
    public bool get_UpdateModeSpecified();
    public void set_UpdateModeSpecified(bool value);
}
[DesignerCategoryAttribute("code")]
[XmlTypeAttribute]
[XmlRootAttribute]
public class NPOI.OpenXmlFormats.Vml.Office.CT_Proxy : object {
    private ST_TrueFalseBlank startField;
    private ST_TrueFalseBlank endField;
    private string idrefField;
    private Nullable`1<int> connectlocField;
    [XmlAttributeAttribute]
[DefaultValueAttribute("Mono.Cecil.CustomAttributeArgument")]
public ST_TrueFalseBlank start { get; public set; }
    [XmlIgnoreAttribute]
public bool startSpecified { get; }
    [XmlAttributeAttribute]
[DefaultValueAttribute("Mono.Cecil.CustomAttributeArgument")]
public ST_TrueFalseBlank end { get; public set; }
    [XmlIgnoreAttribute]
public bool endSpecified { get; }
    [XmlAttributeAttribute]
public string idref { get; public set; }
    [XmlIgnoreAttribute]
public bool idrefSpecified { get; }
    [XmlAttributeAttribute]
public int connectloc { get; public set; }
    [XmlIgnoreAttribute]
public bool connectlocSpecified { get; }
    public ST_TrueFalseBlank get_start();
    public void set_start(ST_TrueFalseBlank value);
    public bool get_startSpecified();
    public ST_TrueFalseBlank get_end();
    public void set_end(ST_TrueFalseBlank value);
    public bool get_endSpecified();
    public string get_idref();
    public void set_idref(string value);
    public bool get_idrefSpecified();
    public int get_connectloc();
    public void set_connectloc(int value);
    public bool get_connectlocSpecified();
    public static CT_Proxy Parse(XmlNode node, XmlNamespaceManager namespaceManager);
    internal void Write(StreamWriter sw, string nodeName);
}
[DesignerCategoryAttribute("code")]
[XmlTypeAttribute]
[XmlRootAttribute]
public class NPOI.OpenXmlFormats.Vml.Office.CT_R : object {
    private List`1<CT_Proxy> proxyField;
    private string idField;
    private ST_RType typeField;
    private ST_How howField;
    private string idrefField;
    [XmlElementAttribute("proxy")]
public List`1<CT_Proxy> proxy { get; public set; }
    [XmlAttributeAttribute]
public string id { get; public set; }
    [XmlAttributeAttribute]
public ST_RType type { get; public set; }
    [XmlIgnoreAttribute]
public bool typeSpecified { get; }
    [XmlAttributeAttribute]
public ST_How how { get; public set; }
    [XmlIgnoreAttribute]
public bool howSpecified { get; }
    [XmlAttributeAttribute]
public string idref { get; public set; }
    [XmlIgnoreAttribute]
public bool idrefSpecified { get; }
    public List`1<CT_Proxy> get_proxy();
    public void set_proxy(List`1<CT_Proxy> value);
    public string get_id();
    public void set_id(string value);
    public ST_RType get_type();
    public void set_type(ST_RType value);
    public bool get_typeSpecified();
    public ST_How get_how();
    public void set_how(ST_How value);
    public bool get_howSpecified();
    public string get_idref();
    public void set_idref(string value);
    public bool get_idrefSpecified();
    public static CT_R Parse(XmlNode node, XmlNamespaceManager namespaceManager);
    internal void Write(StreamWriter sw, string nodeName);
}
[DesignerCategoryAttribute("code")]
[XmlTypeAttribute]
[XmlRootAttribute]
public class NPOI.OpenXmlFormats.Vml.Office.CT_RegroupTable : object {
    private List`1<CT_Entry> entryField;
    private ST_Ext extField;
    [XmlElementAttribute("entry")]
public List`1<CT_Entry> entry { get; public set; }
    [XmlAttributeAttribute]
public ST_Ext ext { get; public set; }
    [XmlIgnoreAttribute]
public bool extSpecified { get; }
    public static CT_RegroupTable Parse(XmlNode node, XmlNamespaceManager namespaceManager);
    internal void Write(StreamWriter sw, string nodeName);
    public List`1<CT_Entry> get_entry();
    public void set_entry(List`1<CT_Entry> value);
    public ST_Ext get_ext();
    public void set_ext(ST_Ext value);
    public bool get_extSpecified();
}
[DesignerCategoryAttribute("code")]
[XmlTypeAttribute]
[XmlRootAttribute]
public class NPOI.OpenXmlFormats.Vml.Office.CT_Relation : object {
    private ST_Ext extField;
    private string idsrcField;
    private string iddestField;
    private string idcntrField;
    [XmlAttributeAttribute]
public ST_Ext ext { get; public set; }
    [XmlIgnoreAttribute]
public bool extSpecified { get; }
    [XmlAttributeAttribute]
public string idsrc { get; public set; }
    [XmlAttributeAttribute]
public string iddest { get; public set; }
    [XmlAttributeAttribute]
public string idcntr { get; public set; }
    public ST_Ext get_ext();
    public void set_ext(ST_Ext value);
    public bool get_extSpecified();
    public string get_idsrc();
    public void set_idsrc(string value);
    public string get_iddest();
    public void set_iddest(string value);
    public string get_idcntr();
    public void set_idcntr(string value);
}
[DesignerCategoryAttribute("code")]
[XmlTypeAttribute]
[XmlRootAttribute]
public class NPOI.OpenXmlFormats.Vml.Office.CT_RelationTable : object {
    private List`1<CT_Relation> relField;
    private ST_Ext extField;
    [XmlElementAttribute("rel")]
public List`1<CT_Relation> rel { get; public set; }
    [XmlAttributeAttribute]
public ST_Ext ext { get; public set; }
    [XmlIgnoreAttribute]
public bool extSpecified { get; }
    public List`1<CT_Relation> get_rel();
    public void set_rel(List`1<CT_Relation> value);
    public ST_Ext get_ext();
    public void set_ext(ST_Ext value);
    public bool get_extSpecified();
}
[DesignerCategoryAttribute("code")]
[XmlTypeAttribute]
[XmlRootAttribute]
public class NPOI.OpenXmlFormats.Vml.Office.CT_Rules : object {
    private List`1<CT_R> rField;
    private ST_Ext extField;
    [XmlElementAttribute("r")]
public List`1<CT_R> r { get; public set; }
    [XmlAttributeAttribute]
public ST_Ext ext { get; public set; }
    [XmlIgnoreAttribute]
public bool extSpecified { get; }
    public List`1<CT_R> get_r();
    public void set_r(List`1<CT_R> value);
    public ST_Ext get_ext();
    public void set_ext(ST_Ext value);
    public bool get_extSpecified();
    public static CT_Rules Parse(XmlNode node, XmlNamespaceManager namespaceManager);
    internal void Write(StreamWriter sw, string nodeName);
}
[DesignerCategoryAttribute("code")]
[XmlTypeAttribute]
[XmlRootAttribute]
public class NPOI.OpenXmlFormats.Vml.Office.CT_ShapeDefaults : object {
    private CT_Fill fillField;
    private CT_Stroke strokeField;
    private CT_Textbox textboxField;
    private CT_Shadow shadowField;
    private CT_Skew skewField;
    private CT_Extrusion extrusionField;
    private CT_Callout calloutField;
    private CT_Lock lockField;
    private CT_ColorMru colormruField;
    private CT_ColorMenu colormenuField;
    private ST_Ext extField;
    private string spidmaxField;
    private string styleField;
    private ST_TrueFalse fill1Field;
    private bool fill1FieldSpecified;
    private string fillcolorField;
    private ST_TrueFalse stroke1Field;
    private bool stroke1FieldSpecified;
    private string strokecolorField;
    private ST_TrueFalse allowincellField;
    private bool allowincellFieldSpecified;
    [XmlElementAttribute]
public CT_Fill fill { get; public set; }
    [XmlElementAttribute]
public CT_Stroke stroke { get; public set; }
    [XmlElementAttribute]
public CT_Textbox textbox { get; public set; }
    [XmlElementAttribute]
public CT_Shadow shadow { get; public set; }
    public CT_Skew skew { get; public set; }
    public CT_Extrusion extrusion { get; public set; }
    public CT_Callout callout { get; public set; }
    public CT_Lock lock { get; public set; }
    public CT_ColorMru colormru { get; public set; }
    public CT_ColorMenu colormenu { get; public set; }
    [XmlAttributeAttribute]
public ST_Ext ext { get; public set; }
    [XmlIgnoreAttribute]
public bool extSpecified { get; }
    [XmlAttributeAttribute]
public string spidmax { get; public set; }
    [XmlAttributeAttribute]
public string style { get; public set; }
    [XmlAttributeAttribute("fill")]
public ST_TrueFalse fill1 { get; public set; }
    [XmlIgnoreAttribute]
public bool fill1Specified { get; public set; }
    [XmlAttributeAttribute]
public string fillcolor { get; public set; }
    [XmlAttributeAttribute("stroke")]
public ST_TrueFalse stroke1 { get; public set; }
    [XmlIgnoreAttribute]
public bool stroke1Specified { get; public set; }
    [XmlAttributeAttribute]
public string strokecolor { get; public set; }
    [XmlAttributeAttribute]
public ST_TrueFalse allowincell { get; public set; }
    [XmlIgnoreAttribute]
public bool allowincellSpecified { get; public set; }
    public CT_Fill get_fill();
    public void set_fill(CT_Fill value);
    public CT_Stroke get_stroke();
    public void set_stroke(CT_Stroke value);
    public CT_Textbox get_textbox();
    public void set_textbox(CT_Textbox value);
    public CT_Shadow get_shadow();
    public void set_shadow(CT_Shadow value);
    public CT_Skew get_skew();
    public void set_skew(CT_Skew value);
    public CT_Extrusion get_extrusion();
    public void set_extrusion(CT_Extrusion value);
    public CT_Callout get_callout();
    public void set_callout(CT_Callout value);
    public CT_Lock get_lock();
    public void set_lock(CT_Lock value);
    public CT_ColorMru get_colormru();
    public void set_colormru(CT_ColorMru value);
    public CT_ColorMenu get_colormenu();
    public void set_colormenu(CT_ColorMenu value);
    public ST_Ext get_ext();
    public void set_ext(ST_Ext value);
    public bool get_extSpecified();
    public string get_spidmax();
    public void set_spidmax(string value);
    public string get_style();
    public void set_style(string value);
    public ST_TrueFalse get_fill1();
    public void set_fill1(ST_TrueFalse value);
    public bool get_fill1Specified();
    public void set_fill1Specified(bool value);
    public string get_fillcolor();
    public void set_fillcolor(string value);
    public ST_TrueFalse get_stroke1();
    public void set_stroke1(ST_TrueFalse value);
    public bool get_stroke1Specified();
    public void set_stroke1Specified(bool value);
    public string get_strokecolor();
    public void set_strokecolor(string value);
    public ST_TrueFalse get_allowincell();
    public void set_allowincell(ST_TrueFalse value);
    public bool get_allowincellSpecified();
    public void set_allowincellSpecified(bool value);
}
[DesignerCategoryAttribute("code")]
[XmlTypeAttribute]
[XmlRootAttribute("shapelayout")]
public class NPOI.OpenXmlFormats.Vml.Office.CT_ShapeLayout : object {
    private CT_IdMap idmapField;
    private CT_RegroupTable regrouptableField;
    private CT_Rules rulesField;
    private ST_Ext extField;
    [XmlElementAttribute]
public CT_IdMap idmap { get; public set; }
    [XmlElementAttribute]
public CT_RegroupTable regrouptable { get; public set; }
    [XmlElementAttribute]
public CT_Rules rules { get; public set; }
    [XmlAttributeAttribute]
public ST_Ext ext { get; public set; }
    [XmlIgnoreAttribute]
public bool extSpecified { get; }
    public CT_IdMap AddNewIdmap();
    public CT_IdMap get_idmap();
    public void set_idmap(CT_IdMap value);
    public CT_RegroupTable get_regrouptable();
    public void set_regrouptable(CT_RegroupTable value);
    public CT_Rules get_rules();
    public void set_rules(CT_Rules value);
    public ST_Ext get_ext();
    public void set_ext(ST_Ext value);
    public bool get_extSpecified();
    public static CT_ShapeLayout Parse(XmlNode node, XmlNamespaceManager namespaceManager);
    public void Write(StreamWriter sw, string nodeName);
}
[DesignerCategoryAttribute("code")]
[XmlTypeAttribute]
[XmlRootAttribute]
public class NPOI.OpenXmlFormats.Vml.Office.CT_SignatureLine : object {
    private ST_Ext extField;
    private ST_TrueFalse issignaturelineField;
    private bool issignaturelineFieldSpecified;
    private string idField;
    private string providField;
    private ST_TrueFalse signinginstructionssetField;
    private bool signinginstructionssetFieldSpecified;
    private ST_TrueFalse allowcommentsField;
    private bool allowcommentsFieldSpecified;
    private ST_TrueFalse showsigndateField;
    private bool showsigndateFieldSpecified;
    private string suggestedsignerField;
    private string suggestedsigner2Field;
    private string suggestedsigneremailField;
    private string signinginstructionsField;
    private string addlxmlField;
    private string sigprovurlField;
    [XmlAttributeAttribute]
public ST_Ext ext { get; public set; }
    [XmlIgnoreAttribute]
public bool extSpecified { get; }
    [XmlAttributeAttribute]
public ST_TrueFalse issignatureline { get; public set; }
    [XmlIgnoreAttribute]
public bool issignaturelineSpecified { get; public set; }
    [XmlAttributeAttribute]
public string id { get; public set; }
    [XmlAttributeAttribute]
public string provid { get; public set; }
    [XmlAttributeAttribute]
public ST_TrueFalse signinginstructionsset { get; public set; }
    [XmlIgnoreAttribute]
public bool signinginstructionssetSpecified { get; public set; }
    [XmlAttributeAttribute]
public ST_TrueFalse allowcomments { get; public set; }
    [XmlIgnoreAttribute]
public bool allowcommentsSpecified { get; public set; }
    [XmlAttributeAttribute]
public ST_TrueFalse showsigndate { get; public set; }
    [XmlIgnoreAttribute]
public bool showsigndateSpecified { get; public set; }
    [XmlAttributeAttribute]
public string suggestedsigner { get; public set; }
    [XmlAttributeAttribute]
public string suggestedsigner2 { get; public set; }
    [XmlAttributeAttribute]
public string suggestedsigneremail { get; public set; }
    [XmlAttributeAttribute]
public string signinginstructions { get; public set; }
    [XmlAttributeAttribute]
public string addlxml { get; public set; }
    [XmlAttributeAttribute]
public string sigprovurl { get; public set; }
    public ST_Ext get_ext();
    public void set_ext(ST_Ext value);
    public bool get_extSpecified();
    public ST_TrueFalse get_issignatureline();
    public void set_issignatureline(ST_TrueFalse value);
    public bool get_issignaturelineSpecified();
    public void set_issignaturelineSpecified(bool value);
    public string get_id();
    public void set_id(string value);
    public string get_provid();
    public void set_provid(string value);
    public ST_TrueFalse get_signinginstructionsset();
    public void set_signinginstructionsset(ST_TrueFalse value);
    public bool get_signinginstructionssetSpecified();
    public void set_signinginstructionssetSpecified(bool value);
    public ST_TrueFalse get_allowcomments();
    public void set_allowcomments(ST_TrueFalse value);
    public bool get_allowcommentsSpecified();
    public void set_allowcommentsSpecified(bool value);
    public ST_TrueFalse get_showsigndate();
    public void set_showsigndate(ST_TrueFalse value);
    public bool get_showsigndateSpecified();
    public void set_showsigndateSpecified(bool value);
    public string get_suggestedsigner();
    public void set_suggestedsigner(string value);
    public string get_suggestedsigner2();
    public void set_suggestedsigner2(string value);
    public string get_suggestedsigneremail();
    public void set_suggestedsigneremail(string value);
    public string get_signinginstructions();
    public void set_signinginstructions(string value);
    public string get_addlxml();
    public void set_addlxml(string value);
    public string get_sigprovurl();
    public void set_sigprovurl(string value);
}
[DesignerCategoryAttribute("code")]
[XmlTypeAttribute]
[XmlRootAttribute]
public class NPOI.OpenXmlFormats.Vml.Office.CT_Skew : object {
    private ST_Ext extField;
    private string idField;
    private ST_TrueFalse onField;
    private bool onFieldSpecified;
    private string offsetField;
    private string originField;
    private string matrixField;
    [XmlAttributeAttribute]
public ST_Ext ext { get; public set; }
    [XmlIgnoreAttribute]
public bool extSpecified { get; }
    [XmlAttributeAttribute]
public string id { get; public set; }
    [XmlAttributeAttribute]
public ST_TrueFalse on { get; public set; }
    [XmlIgnoreAttribute]
public bool onSpecified { get; public set; }
    [XmlAttributeAttribute]
public string offset { get; public set; }
    [XmlAttributeAttribute]
public string origin { get; public set; }
    [XmlAttributeAttribute]
public string matrix { get; public set; }
    public ST_Ext get_ext();
    public void set_ext(ST_Ext value);
    public bool get_extSpecified();
    public string get_id();
    public void set_id(string value);
    public ST_TrueFalse get_on();
    public void set_on(ST_TrueFalse value);
    public bool get_onSpecified();
    public void set_onSpecified(bool value);
    public string get_offset();
    public void set_offset(string value);
    public string get_origin();
    public void set_origin(string value);
    public string get_matrix();
    public void set_matrix(string value);
}
[DesignerCategoryAttribute("code")]
[XmlTypeAttribute]
[XmlRootAttribute]
public class NPOI.OpenXmlFormats.Vml.Office.CT_StrokeChild : object {
    private ST_Ext extField;
    private ST_TrueFalse onField;
    private bool onFieldSpecified;
    private string weightField;
    private string colorField;
    private string color2Field;
    private string opacityField;
    private ST_StrokeLineStyle linestyleField;
    private bool linestyleFieldSpecified;
    private decimal miterlimitField;
    private bool miterlimitFieldSpecified;
    private ST_StrokeJoinStyle joinstyleField;
    private bool joinstyleFieldSpecified;
    private ST_StrokeEndCap endcapField;
    private bool endcapFieldSpecified;
    private string dashstyleField;
    private ST_TrueFalse insetpenField;
    private bool insetpenFieldSpecified;
    private ST_FillType filltypeField;
    private bool filltypeFieldSpecified;
    private string srcField;
    private ST_ImageAspect imageaspectField;
    private bool imageaspectFieldSpecified;
    private string imagesizeField;
    private ST_TrueFalse imagealignshapeField;
    private bool imagealignshapeFieldSpecified;
    private ST_StrokeArrowType startarrowField;
    private bool startarrowFieldSpecified;
    private ST_StrokeArrowWidth startarrowwidthField;
    private bool startarrowwidthFieldSpecified;
    private ST_StrokeArrowLength startarrowlengthField;
    private bool startarrowlengthFieldSpecified;
    private ST_StrokeArrowType endarrowField;
    private bool endarrowFieldSpecified;
    private ST_StrokeArrowWidth endarrowwidthField;
    private bool endarrowwidthFieldSpecified;
    private ST_StrokeArrowLength endarrowlengthField;
    private bool endarrowlengthFieldSpecified;
    private string hrefField;
    private string althrefField;
    private string titleField;
    private ST_TrueFalse forcedashField;
    private bool forcedashFieldSpecified;
    [XmlAttributeAttribute]
public ST_Ext ext { get; public set; }
    [XmlIgnoreAttribute]
public bool extSpecified { get; }
    [XmlAttributeAttribute]
public ST_TrueFalse on { get; public set; }
    [XmlIgnoreAttribute]
public bool onSpecified { get; public set; }
    [XmlAttributeAttribute]
public string weight { get; public set; }
    [XmlAttributeAttribute]
public string color { get; public set; }
    [XmlAttributeAttribute]
public string color2 { get; public set; }
    [XmlAttributeAttribute]
public string opacity { get; public set; }
    [XmlAttributeAttribute]
public ST_StrokeLineStyle linestyle { get; public set; }
    [XmlIgnoreAttribute]
public bool linestyleSpecified { get; public set; }
    [XmlAttributeAttribute]
public decimal miterlimit { get; public set; }
    [XmlIgnoreAttribute]
public bool miterlimitSpecified { get; public set; }
    [XmlAttributeAttribute]
public ST_StrokeJoinStyle joinstyle { get; public set; }
    [XmlIgnoreAttribute]
public bool joinstyleSpecified { get; public set; }
    [XmlAttributeAttribute]
public ST_StrokeEndCap endcap { get; public set; }
    [XmlIgnoreAttribute]
public bool endcapSpecified { get; public set; }
    [XmlAttributeAttribute]
public string dashstyle { get; public set; }
    [XmlAttributeAttribute]
public ST_TrueFalse insetpen { get; public set; }
    [XmlIgnoreAttribute]
public bool insetpenSpecified { get; public set; }
    [XmlAttributeAttribute]
public ST_FillType filltype { get; public set; }
    [XmlIgnoreAttribute]
public bool filltypeSpecified { get; public set; }
    [XmlAttributeAttribute]
public string src { get; public set; }
    [XmlAttributeAttribute]
public ST_ImageAspect imageaspect { get; public set; }
    [XmlIgnoreAttribute]
public bool imageaspectSpecified { get; public set; }
    [XmlAttributeAttribute]
public string imagesize { get; public set; }
    [XmlAttributeAttribute]
public ST_TrueFalse imagealignshape { get; public set; }
    [XmlIgnoreAttribute]
public bool imagealignshapeSpecified { get; public set; }
    [XmlAttributeAttribute]
public ST_StrokeArrowType startarrow { get; public set; }
    [XmlIgnoreAttribute]
public bool startarrowSpecified { get; public set; }
    [XmlAttributeAttribute]
public ST_StrokeArrowWidth startarrowwidth { get; public set; }
    [XmlIgnoreAttribute]
public bool startarrowwidthSpecified { get; public set; }
    [XmlAttributeAttribute]
public ST_StrokeArrowLength startarrowlength { get; public set; }
    [XmlIgnoreAttribute]
public bool startarrowlengthSpecified { get; public set; }
    [XmlAttributeAttribute]
public ST_StrokeArrowType endarrow { get; public set; }
    [XmlIgnoreAttribute]
public bool endarrowSpecified { get; public set; }
    [XmlAttributeAttribute]
public ST_StrokeArrowWidth endarrowwidth { get; public set; }
    [XmlIgnoreAttribute]
public bool endarrowwidthSpecified { get; public set; }
    [XmlAttributeAttribute]
public ST_StrokeArrowLength endarrowlength { get; public set; }
    [XmlIgnoreAttribute]
public bool endarrowlengthSpecified { get; public set; }
    [XmlAttributeAttribute]
public string href { get; public set; }
    [XmlAttributeAttribute]
public string althref { get; public set; }
    [XmlAttributeAttribute]
public string title { get; public set; }
    [XmlAttributeAttribute]
public ST_TrueFalse forcedash { get; public set; }
    [XmlIgnoreAttribute]
public bool forcedashSpecified { get; public set; }
    public ST_Ext get_ext();
    public void set_ext(ST_Ext value);
    public bool get_extSpecified();
    public ST_TrueFalse get_on();
    public void set_on(ST_TrueFalse value);
    public bool get_onSpecified();
    public void set_onSpecified(bool value);
    public string get_weight();
    public void set_weight(string value);
    public string get_color();
    public void set_color(string value);
    public string get_color2();
    public void set_color2(string value);
    public string get_opacity();
    public void set_opacity(string value);
    public ST_StrokeLineStyle get_linestyle();
    public void set_linestyle(ST_StrokeLineStyle value);
    public bool get_linestyleSpecified();
    public void set_linestyleSpecified(bool value);
    public decimal get_miterlimit();
    public void set_miterlimit(decimal value);
    public bool get_miterlimitSpecified();
    public void set_miterlimitSpecified(bool value);
    public ST_StrokeJoinStyle get_joinstyle();
    public void set_joinstyle(ST_StrokeJoinStyle value);
    public bool get_joinstyleSpecified();
    public void set_joinstyleSpecified(bool value);
    public ST_StrokeEndCap get_endcap();
    public void set_endcap(ST_StrokeEndCap value);
    public bool get_endcapSpecified();
    public void set_endcapSpecified(bool value);
    public string get_dashstyle();
    public void set_dashstyle(string value);
    public ST_TrueFalse get_insetpen();
    public void set_insetpen(ST_TrueFalse value);
    public bool get_insetpenSpecified();
    public void set_insetpenSpecified(bool value);
    public ST_FillType get_filltype();
    public void set_filltype(ST_FillType value);
    public bool get_filltypeSpecified();
    public void set_filltypeSpecified(bool value);
    public string get_src();
    public void set_src(string value);
    public ST_ImageAspect get_imageaspect();
    public void set_imageaspect(ST_ImageAspect value);
    public bool get_imageaspectSpecified();
    public void set_imageaspectSpecified(bool value);
    public string get_imagesize();
    public void set_imagesize(string value);
    public ST_TrueFalse get_imagealignshape();
    public void set_imagealignshape(ST_TrueFalse value);
    public bool get_imagealignshapeSpecified();
    public void set_imagealignshapeSpecified(bool value);
    public ST_StrokeArrowType get_startarrow();
    public void set_startarrow(ST_StrokeArrowType value);
    public bool get_startarrowSpecified();
    public void set_startarrowSpecified(bool value);
    public ST_StrokeArrowWidth get_startarrowwidth();
    public void set_startarrowwidth(ST_StrokeArrowWidth value);
    public bool get_startarrowwidthSpecified();
    public void set_startarrowwidthSpecified(bool value);
    public ST_StrokeArrowLength get_startarrowlength();
    public void set_startarrowlength(ST_StrokeArrowLength value);
    public bool get_startarrowlengthSpecified();
    public void set_startarrowlengthSpecified(bool value);
    public ST_StrokeArrowType get_endarrow();
    public void set_endarrow(ST_StrokeArrowType value);
    public bool get_endarrowSpecified();
    public void set_endarrowSpecified(bool value);
    public ST_StrokeArrowWidth get_endarrowwidth();
    public void set_endarrowwidth(ST_StrokeArrowWidth value);
    public bool get_endarrowwidthSpecified();
    public void set_endarrowwidthSpecified(bool value);
    public ST_StrokeArrowLength get_endarrowlength();
    public void set_endarrowlength(ST_StrokeArrowLength value);
    public bool get_endarrowlengthSpecified();
    public void set_endarrowlengthSpecified(bool value);
    public string get_href();
    public void set_href(string value);
    public string get_althref();
    public void set_althref(string value);
    public string get_title();
    public void set_title(string value);
    public ST_TrueFalse get_forcedash();
    public void set_forcedash(ST_TrueFalse value);
    public bool get_forcedashSpecified();
    public void set_forcedashSpecified(bool value);
}
[XmlTypeAttribute]
[XmlRootAttribute]
public enum NPOI.OpenXmlFormats.Vml.Office.ST_Angle : Enum {
    public int value__;
    public static ST_Angle any;
    [XmlEnumAttribute("30")]
public static ST_Angle Item30;
    [XmlEnumAttribute("45")]
public static ST_Angle Item45;
    [XmlEnumAttribute("60")]
public static ST_Angle Item60;
    [XmlEnumAttribute("90")]
public static ST_Angle Item90;
    public static ST_Angle auto;
}
[XmlTypeAttribute]
[XmlRootAttribute]
public enum NPOI.OpenXmlFormats.Vml.Office.ST_BWMode : Enum {
    public int value__;
    public static ST_BWMode color;
    public static ST_BWMode auto;
    public static ST_BWMode grayScale;
    public static ST_BWMode lightGrayscale;
    public static ST_BWMode inverseGray;
    public static ST_BWMode grayOutline;
    public static ST_BWMode highContrast;
    public static ST_BWMode black;
    public static ST_BWMode white;
    public static ST_BWMode hide;
    public static ST_BWMode undrawn;
    public static ST_BWMode blackTextAndLines;
}
[XmlTypeAttribute]
[XmlRootAttribute]
public enum NPOI.OpenXmlFormats.Vml.Office.ST_CalloutPlacement : Enum {
    public int value__;
    public static ST_CalloutPlacement top;
    public static ST_CalloutPlacement center;
    public static ST_CalloutPlacement bottom;
    public static ST_CalloutPlacement user;
}
[XmlTypeAttribute]
[XmlRootAttribute]
public enum NPOI.OpenXmlFormats.Vml.Office.ST_ColorMode : Enum {
    public int value__;
    public static ST_ColorMode auto;
    public static ST_ColorMode custom;
}
[XmlTypeAttribute]
[XmlRootAttribute]
public enum NPOI.OpenXmlFormats.Vml.Office.ST_ConnectorType : Enum {
    public int value__;
    public static ST_ConnectorType none;
    public static ST_ConnectorType straight;
    public static ST_ConnectorType elbow;
    public static ST_ConnectorType curved;
}
[XmlTypeAttribute]
[XmlRootAttribute]
public enum NPOI.OpenXmlFormats.Vml.Office.ST_ConnectType : Enum {
    public int value__;
    public static ST_ConnectType none;
    public static ST_ConnectType rect;
    public static ST_ConnectType segments;
    public static ST_ConnectType custom;
}
[XmlTypeAttribute]
[XmlRootAttribute]
public enum NPOI.OpenXmlFormats.Vml.Office.ST_ExtrusionPlane : Enum {
    public int value__;
    public static ST_ExtrusionPlane XY;
    public static ST_ExtrusionPlane ZX;
    public static ST_ExtrusionPlane YZ;
}
[XmlTypeAttribute]
[XmlRootAttribute]
public enum NPOI.OpenXmlFormats.Vml.Office.ST_ExtrusionRender : Enum {
    public int value__;
    public static ST_ExtrusionRender solid;
    public static ST_ExtrusionRender wireFrame;
    public static ST_ExtrusionRender boundingCube;
}
[XmlTypeAttribute]
[XmlRootAttribute]
public enum NPOI.OpenXmlFormats.Vml.Office.ST_ExtrusionType : Enum {
    public int value__;
    public static ST_ExtrusionType perspective;
    public static ST_ExtrusionType parallel;
}
[XmlTypeAttribute]
[XmlRootAttribute("ST_FillType")]
public enum NPOI.OpenXmlFormats.Vml.Office.ST_FillType1 : Enum {
    public int value__;
    public static ST_FillType1 gradientCenter;
    public static ST_FillType1 solid;
    public static ST_FillType1 pattern;
    public static ST_FillType1 tile;
    public static ST_FillType1 frame;
    public static ST_FillType1 gradientUnscaled;
    public static ST_FillType1 gradientRadial;
    public static ST_FillType1 gradient;
    public static ST_FillType1 background;
}
[XmlTypeAttribute]
[XmlRootAttribute]
public enum NPOI.OpenXmlFormats.Vml.Office.ST_How : Enum {
    public int value__;
    public static ST_How NONE;
    public static ST_How top;
    public static ST_How middle;
    public static ST_How bottom;
    public static ST_How left;
    public static ST_How center;
    public static ST_How right;
}
[XmlTypeAttribute]
[XmlRootAttribute]
public enum NPOI.OpenXmlFormats.Vml.Office.ST_HrAlign : Enum {
    public int value__;
    public static ST_HrAlign left;
    public static ST_HrAlign right;
    public static ST_HrAlign center;
}
[XmlTypeAttribute]
[XmlRootAttribute]
public enum NPOI.OpenXmlFormats.Vml.Office.ST_InsetMode : Enum {
    public int value__;
    public static ST_InsetMode auto;
    public static ST_InsetMode custom;
}
[XmlTypeAttribute]
[XmlRootAttribute]
public enum NPOI.OpenXmlFormats.Vml.Office.ST_OLEDrawAspect : Enum {
    public int value__;
    public static ST_OLEDrawAspect Content;
    public static ST_OLEDrawAspect Icon;
}
[XmlTypeAttribute]
[XmlRootAttribute]
public enum NPOI.OpenXmlFormats.Vml.Office.ST_OLELinkType : Enum {
    public int value__;
    public static ST_OLELinkType Picture;
    public static ST_OLELinkType Bitmap;
    public static ST_OLELinkType EnhancedMetaFile;
}
[XmlTypeAttribute]
[XmlRootAttribute]
public enum NPOI.OpenXmlFormats.Vml.Office.ST_OLEType : Enum {
    public int value__;
    public static ST_OLEType Embed;
    public static ST_OLEType Link;
}
[XmlTypeAttribute]
[XmlRootAttribute]
public enum NPOI.OpenXmlFormats.Vml.Office.ST_OLEUpdateMode : Enum {
    public int value__;
    public static ST_OLEUpdateMode Always;
    public static ST_OLEUpdateMode OnCall;
}
[XmlTypeAttribute]
[XmlRootAttribute]
public enum NPOI.OpenXmlFormats.Vml.Office.ST_RType : Enum {
    public int value__;
    public static ST_RType NONE;
    public static ST_RType arc;
    public static ST_RType callout;
    public static ST_RType connector;
    public static ST_RType align;
}
[XmlTypeAttribute]
[XmlRootAttribute]
public enum NPOI.OpenXmlFormats.Vml.Office.ST_ScreenSize : Enum {
    public int value__;
    [XmlEnumAttribute("544,376")]
public static ST_ScreenSize Item544376;
    [XmlEnumAttribute("640,480")]
public static ST_ScreenSize Item640480;
    [XmlEnumAttribute("720,512")]
public static ST_ScreenSize Item720512;
    [XmlEnumAttribute("800,600")]
public static ST_ScreenSize Item800600;
    [XmlEnumAttribute("1024,768")]
public static ST_ScreenSize Item1024768;
    [XmlEnumAttribute("1152,862")]
public static ST_ScreenSize Item1152862;
}
[XmlTypeAttribute]
[XmlRootAttribute("ST_TrueFalse")]
public enum NPOI.OpenXmlFormats.Vml.Office.ST_TrueFalse : Enum {
    public int value__;
    public static ST_TrueFalse f;
    public static ST_TrueFalse t;
    public static ST_TrueFalse true;
    public static ST_TrueFalse false;
}
[DesignerCategoryAttribute("code")]
[XmlTypeAttribute]
[XmlRootAttribute]
public class NPOI.OpenXmlFormats.Vml.Presentation.CT_Empty : object {
}
[DesignerCategoryAttribute("code")]
[XmlTypeAttribute]
[XmlRootAttribute]
public class NPOI.OpenXmlFormats.Vml.Presentation.CT_Rel : object {
    private string idField;
    [XmlAttributeAttribute]
public string id { get; public set; }
    public string get_id();
    public void set_id(string value);
    public static CT_Rel Parse(XmlNode node, XmlNamespaceManager namespaceManager);
    internal void Write(StreamWriter sw, string nodeName);
}
[DesignerCategoryAttribute("code")]
public class NPOI.OpenXmlFormats.Vml.Spreadsheet.CT_ClientData : object {
    private ST_ObjectType objectTypeField;
    private static XmlQualifiedName MOVEWITHCELLS;
    private static XmlQualifiedName SIZEWITHCELLS;
    private static XmlQualifiedName ANCHOR;
    private static XmlQualifiedName LOCKED;
    private static XmlQualifiedName DEFAULTSIZE;
    private static XmlQualifiedName PRINTOBJECT;
    private static XmlQualifiedName DISABLED;
    private static XmlQualifiedName AUTOFILL;
    private static XmlQualifiedName AUTOLINE;
    private static XmlQualifiedName AUTOPICT;
    private static XmlQualifiedName FMLAMACRO;
    private static XmlQualifiedName TEXTHALIGN;
    private static XmlQualifiedName TEXTVALIGN;
    private static XmlQualifiedName LOCKTEXT;
    private static XmlQualifiedName JUSTLASTX;
    private static XmlQualifiedName SECRETEDIT;
    private static XmlQualifiedName DEFAULT;
    private static XmlQualifiedName HELP;
    private static XmlQualifiedName CANCEL;
    private static XmlQualifiedName DISMISS;
    private static XmlQualifiedName ACCEL;
    private static XmlQualifiedName ACCEL2;
    private static XmlQualifiedName ROW;
    private static XmlQualifiedName COLUMN;
    private static XmlQualifiedName VISIBLE;
    private static XmlQualifiedName ROWHIDDEN;
    private static XmlQualifiedName COLHIDDEN;
    private static XmlQualifiedName VTEDIT;
    private static XmlQualifiedName MULTILINE;
    private static XmlQualifiedName VSCROLL;
    private static XmlQualifiedName VALIDIDS;
    private static XmlQualifiedName FMLARANGE;
    private static XmlQualifiedName WIDTHMIN;
    private static XmlQualifiedName SEL;
    private static XmlQualifiedName NOTHREED2;
    private static XmlQualifiedName SELTYPE;
    private static XmlQualifiedName MULTISEL;
    private static XmlQualifiedName LCT;
    private static XmlQualifiedName LISTITEM;
    private static XmlQualifiedName DROPSTYLE;
    private static XmlQualifiedName COLORED;
    private static XmlQualifiedName DROPLINES;
    private static XmlQualifiedName CHECKED;
    private static XmlQualifiedName FMLALINK;
    private static XmlQualifiedName FMLAPICT;
    private static XmlQualifiedName NOTHREED;
    private static XmlQualifiedName FIRSTBUTTON;
    private static XmlQualifiedName FMLAGROUP;
    private static XmlQualifiedName VAL;
    private static XmlQualifiedName MIN;
    private static XmlQualifiedName MAX;
    private static XmlQualifiedName INC;
    private static XmlQualifiedName PAGE;
    private static XmlQualifiedName HORIZ;
    private static XmlQualifiedName DX;
    private static XmlQualifiedName MAPOCX;
    private static XmlQualifiedName CF;
    private static XmlQualifiedName CAMERA;
    private static XmlQualifiedName RECALCALWAYS;
    private static XmlQualifiedName AUTOSCALE;
    private static XmlQualifiedName DDE;
    private static XmlQualifiedName UIOBJ;
    private static XmlQualifiedName SCRIPTTEXT;
    private static XmlQualifiedName SCRIPTEXTENDED;
    private static XmlQualifiedName SCRIPTLANGUAGE;
    private static XmlQualifiedName SCRIPTLOCATION;
    private static XmlQualifiedName FMLATXBX;
    private static XmlQualifiedName OBJECTTYPE;
    private string anchorField;
    private ST_TrueFalseBlank autoFillField;
    private bool autoFillFieldSpecified;
    private ST_TrueFalseBlank visibleField;
    private bool visibleFieldSpecified;
    private ST_TrueFalseBlank moveWithCellsField;
    private bool moveWithCellsFieldSpecified;
    private ST_TrueFalseBlank sizeWithCellsField;
    private bool sizeWithCellsFieldSpecified;
    private List`1<int> columnField;
    private List`1<int> rowField;
    [XmlElementAttribute]
public string anchor { get; public set; }
    [XmlElementAttribute]
[DefaultValueAttribute("Mono.Cecil.CustomAttributeArgument")]
public ST_TrueFalseBlank autoFill { get; public set; }
    [XmlIgnoreAttribute]
public bool autoFillSpecified { get; public set; }
    [XmlElementAttribute]
[DefaultValueAttribute("Mono.Cecil.CustomAttributeArgument")]
public ST_TrueFalseBlank visible { get; public set; }
    [XmlIgnoreAttribute]
public bool visibleSpecified { get; public set; }
    [XmlElementAttribute]
[DefaultValueAttribute("Mono.Cecil.CustomAttributeArgument")]
public ST_TrueFalseBlank moveWithCells { get; public set; }
    [XmlIgnoreAttribute]
public bool moveWithCellsSpecified { get; public set; }
    [XmlElementAttribute]
[DefaultValueAttribute("Mono.Cecil.CustomAttributeArgument")]
public ST_TrueFalseBlank sizeWithCells { get; public set; }
    [XmlIgnoreAttribute]
public bool sizeWithCellsSpecified { get; public set; }
    [XmlElementAttribute]
public List`1<int> column { get; public set; }
    [XmlElementAttribute]
public List`1<int> row { get; public set; }
    [XmlAttributeAttribute]
public ST_ObjectType ObjectType { get; public set; }
    private static CT_ClientData();
    public static CT_ClientData Parse(XmlNode node, XmlNamespaceManager namespaceManager);
    internal void Write(StreamWriter sw, string nodeName);
    public void AddNewRow(int rowNum);
    public void AddNewColumn(int columnNum);
    public void AddNewMoveWithCells();
    public void AddNewSizeWithCells();
    public string get_anchor();
    public void set_anchor(string value);
    public void AddNewAnchor(string name);
    public void AddNewAutoFill(ST_TrueFalseBlank value);
    public ST_TrueFalseBlank get_autoFill();
    public void set_autoFill(ST_TrueFalseBlank value);
    public bool get_autoFillSpecified();
    public void set_autoFillSpecified(bool value);
    public ST_TrueFalseBlank get_visible();
    public void set_visible(ST_TrueFalseBlank value);
    public bool get_visibleSpecified();
    public void set_visibleSpecified(bool value);
    public ST_TrueFalseBlank get_moveWithCells();
    public void set_moveWithCells(ST_TrueFalseBlank value);
    public bool get_moveWithCellsSpecified();
    public void set_moveWithCellsSpecified(bool value);
    public int SizeOfMoveWithCellsArray();
    public int SizeOfSizeWithCellsArray();
    public ST_TrueFalseBlank get_sizeWithCells();
    public void set_sizeWithCells(ST_TrueFalseBlank value);
    public bool get_sizeWithCellsSpecified();
    public void set_sizeWithCellsSpecified(bool value);
    public List`1<int> get_column();
    public void set_column(List`1<int> value);
    public int GetColumnArray(int index);
    public void SetColumnArray(int index, int value);
    public void SetRowArray(int index, int value);
    public void SetAnchorArray(int index, string value);
    public List`1<int> get_row();
    public void set_row(List`1<int> value);
    public int GetRowArray(int index);
    public ST_ObjectType get_ObjectType();
    public void set_ObjectType(ST_ObjectType value);
    public string GetAnchorArray(int p);
}
[XmlTypeAttribute]
public enum NPOI.OpenXmlFormats.Vml.Spreadsheet.ItemsChoiceType : Enum {
    public int value__;
    public static ItemsChoiceType Accel;
    public static ItemsChoiceType Accel2;
    public static ItemsChoiceType Anchor;
    public static ItemsChoiceType AutoFill;
    public static ItemsChoiceType AutoLine;
    public static ItemsChoiceType AutoPict;
    public static ItemsChoiceType AutoScale;
    public static ItemsChoiceType CF;
    public static ItemsChoiceType Camera;
    public static ItemsChoiceType Cancel;
    public static ItemsChoiceType Checked;
    public static ItemsChoiceType ColHidden;
    public static ItemsChoiceType Colored;
    public static ItemsChoiceType Column;
    public static ItemsChoiceType DDE;
    public static ItemsChoiceType Default;
    public static ItemsChoiceType DefaultSize;
    public static ItemsChoiceType Disabled;
    public static ItemsChoiceType Dismiss;
    public static ItemsChoiceType DropLines;
    public static ItemsChoiceType DropStyle;
    public static ItemsChoiceType Dx;
    public static ItemsChoiceType FirstButton;
    public static ItemsChoiceType FmlaGroup;
    public static ItemsChoiceType FmlaLink;
    public static ItemsChoiceType FmlaMacro;
    public static ItemsChoiceType FmlaPict;
    public static ItemsChoiceType FmlaRange;
    public static ItemsChoiceType FmlaTxbx;
    public static ItemsChoiceType Help;
    public static ItemsChoiceType Horiz;
    public static ItemsChoiceType Inc;
    public static ItemsChoiceType JustLastX;
    public static ItemsChoiceType LCT;
    public static ItemsChoiceType ListItem;
    public static ItemsChoiceType LockText;
    public static ItemsChoiceType Locked;
    public static ItemsChoiceType MapOCX;
    public static ItemsChoiceType Max;
    public static ItemsChoiceType Min;
    public static ItemsChoiceType MoveWithCells;
    public static ItemsChoiceType MultiLine;
    public static ItemsChoiceType MultiSel;
    public static ItemsChoiceType NoThreeD;
    public static ItemsChoiceType NoThreeD2;
    public static ItemsChoiceType Page;
    public static ItemsChoiceType PrintObject;
    public static ItemsChoiceType RecalcAlways;
    public static ItemsChoiceType Row;
    public static ItemsChoiceType RowHidden;
    public static ItemsChoiceType ScriptExtended;
    public static ItemsChoiceType ScriptLanguage;
    public static ItemsChoiceType ScriptLocation;
    public static ItemsChoiceType ScriptText;
    public static ItemsChoiceType SecretEdit;
    public static ItemsChoiceType Sel;
    public static ItemsChoiceType SelType;
    public static ItemsChoiceType SizeWithCells;
    public static ItemsChoiceType TextHAlign;
    public static ItemsChoiceType TextVAlign;
    public static ItemsChoiceType UIObj;
    public static ItemsChoiceType VScroll;
    public static ItemsChoiceType VTEdit;
    public static ItemsChoiceType Val;
    public static ItemsChoiceType ValidIds;
    public static ItemsChoiceType Visible;
    public static ItemsChoiceType WidthMin;
}
[XmlTypeAttribute]
[XmlRootAttribute]
public enum NPOI.OpenXmlFormats.Vml.Spreadsheet.ST_CF : Enum {
    public int value__;
    public static ST_CF PictOld;
    public static ST_CF Pict;
    public static ST_CF Bitmap;
    public static ST_CF PictPrint;
    public static ST_CF PictScreen;
}
[XmlTypeAttribute]
[XmlRootAttribute]
public enum NPOI.OpenXmlFormats.Vml.Spreadsheet.ST_ObjectType : Enum {
    public int value__;
    public static ST_ObjectType Button;
    public static ST_ObjectType Checkbox;
    public static ST_ObjectType Dialog;
    public static ST_ObjectType Drop;
    public static ST_ObjectType Edit;
    public static ST_ObjectType GBox;
    public static ST_ObjectType Label;
    public static ST_ObjectType LineA;
    public static ST_ObjectType List;
    public static ST_ObjectType Movie;
    public static ST_ObjectType Note;
    public static ST_ObjectType Pict;
    public static ST_ObjectType Radio;
    public static ST_ObjectType RectA;
    public static ST_ObjectType Scroll;
    public static ST_ObjectType Spin;
    public static ST_ObjectType Shape;
    public static ST_ObjectType Group;
    public static ST_ObjectType Rect;
}
[XmlTypeAttribute]
[XmlRootAttribute]
public enum NPOI.OpenXmlFormats.Vml.Spreadsheet.ST_TrueFalseBlank : Enum {
    public int value__;
    public static ST_TrueFalseBlank NONE;
    [XmlEnumAttribute("True")]
public static ST_TrueFalseBlank true;
    public static ST_TrueFalseBlank t;
    [XmlEnumAttribute("False")]
public static ST_TrueFalseBlank false;
    public static ST_TrueFalseBlank f;
}
[XmlTypeAttribute]
[XmlRootAttribute]
public enum NPOI.OpenXmlFormats.Vml.ST_EditAs : Enum {
    public int value__;
    public static ST_EditAs canvas;
    public static ST_EditAs orgchart;
    public static ST_EditAs radial;
    public static ST_EditAs cycle;
    public static ST_EditAs stacked;
    public static ST_EditAs venn;
    public static ST_EditAs bullseye;
}
[XmlTypeAttribute]
[XmlRootAttribute]
public enum NPOI.OpenXmlFormats.Vml.ST_Ext : Enum {
    public int value__;
    public static ST_Ext NONE;
    public static ST_Ext view;
    public static ST_Ext edit;
    public static ST_Ext backwardCompatible;
}
[XmlTypeAttribute]
public enum NPOI.OpenXmlFormats.Vml.ST_FillMethod : Enum {
    public int value__;
    public static ST_FillMethod none;
    public static ST_FillMethod linear;
    public static ST_FillMethod sigma;
    public static ST_FillMethod any;
    [XmlEnumAttribute("linear sigma")]
public static ST_FillMethod linearsigma;
}
[XmlTypeAttribute]
public enum NPOI.OpenXmlFormats.Vml.ST_FillType : Enum {
    public int value__;
    public static ST_FillType solid;
    public static ST_FillType gradient;
    public static ST_FillType gradientRadial;
    public static ST_FillType tile;
    public static ST_FillType pattern;
    public static ST_FillType frame;
}
[XmlTypeAttribute]
public enum NPOI.OpenXmlFormats.Vml.ST_ImageAspect : Enum {
    public int value__;
    public static ST_ImageAspect ignore;
    public static ST_ImageAspect atMost;
    public static ST_ImageAspect atLeast;
}
[XmlTypeAttribute]
[XmlRootAttribute]
public enum NPOI.OpenXmlFormats.Vml.ST_ShadowType : Enum {
    public int value__;
    public static ST_ShadowType single;
    public static ST_ShadowType double;
    public static ST_ShadowType emboss;
    public static ST_ShadowType perspective;
}
[XmlTypeAttribute]
[XmlRootAttribute]
public enum NPOI.OpenXmlFormats.Vml.ST_StrokeArrowLength : Enum {
    public int value__;
    public static ST_StrokeArrowLength short;
    public static ST_StrokeArrowLength medium;
    public static ST_StrokeArrowLength long;
}
[XmlTypeAttribute]
[XmlRootAttribute]
public enum NPOI.OpenXmlFormats.Vml.ST_StrokeArrowType : Enum {
    public int value__;
    public static ST_StrokeArrowType none;
    public static ST_StrokeArrowType block;
    public static ST_StrokeArrowType classic;
    public static ST_StrokeArrowType oval;
    public static ST_StrokeArrowType diamond;
    public static ST_StrokeArrowType open;
}
[XmlTypeAttribute]
[XmlRootAttribute]
public enum NPOI.OpenXmlFormats.Vml.ST_StrokeArrowWidth : Enum {
    public int value__;
    public static ST_StrokeArrowWidth narrow;
    public static ST_StrokeArrowWidth medium;
    public static ST_StrokeArrowWidth wide;
}
[XmlTypeAttribute]
[XmlRootAttribute]
public enum NPOI.OpenXmlFormats.Vml.ST_StrokeEndCap : Enum {
    public int value__;
    public static ST_StrokeEndCap flat;
    public static ST_StrokeEndCap square;
    public static ST_StrokeEndCap round;
}
[XmlTypeAttribute]
[XmlRootAttribute]
public enum NPOI.OpenXmlFormats.Vml.ST_StrokeJoinStyle : Enum {
    public int value__;
    public static ST_StrokeJoinStyle round;
    public static ST_StrokeJoinStyle bevel;
    public static ST_StrokeJoinStyle miter;
}
[XmlTypeAttribute]
[XmlRootAttribute]
public enum NPOI.OpenXmlFormats.Vml.ST_StrokeLineStyle : Enum {
    public int value__;
    public static ST_StrokeLineStyle single;
    public static ST_StrokeLineStyle thinThin;
    public static ST_StrokeLineStyle thinThick;
    public static ST_StrokeLineStyle thickThin;
    public static ST_StrokeLineStyle thickBetweenThin;
}
[XmlTypeAttribute]
public enum NPOI.OpenXmlFormats.Vml.ST_TrueFalse : Enum {
    public int value__;
    public static ST_TrueFalse f;
    public static ST_TrueFalse t;
    public static ST_TrueFalse true;
    public static ST_TrueFalse false;
}
[DesignerCategoryAttribute("code")]
[XmlTypeAttribute]
[XmlRootAttribute]
public class NPOI.OpenXmlFormats.Vml.Wordprocessing.CT_AnchorLock : object {
}
[DesignerCategoryAttribute("code")]
[XmlTypeAttribute]
[XmlRootAttribute]
public class NPOI.OpenXmlFormats.Vml.Wordprocessing.CT_Border : object {
    private ST_BorderType typeField;
    private bool typeFieldSpecified;
    private string widthField;
    private ST_BorderShadow shadowField;
    private bool shadowFieldSpecified;
    [XmlAttributeAttribute]
public ST_BorderType type { get; public set; }
    [XmlIgnoreAttribute]
public bool typeSpecified { get; public set; }
    [XmlAttributeAttribute]
public string width { get; public set; }
    [XmlAttributeAttribute]
public ST_BorderShadow shadow { get; public set; }
    [XmlIgnoreAttribute]
public bool shadowSpecified { get; public set; }
    public static CT_Border Parse(XmlNode node, XmlNamespaceManager namespaceManager);
    internal void Write(StreamWriter sw, string nodeName);
    public ST_BorderType get_type();
    public void set_type(ST_BorderType value);
    public bool get_typeSpecified();
    public void set_typeSpecified(bool value);
    public string get_width();
    public void set_width(string value);
    public ST_BorderShadow get_shadow();
    public void set_shadow(ST_BorderShadow value);
    public bool get_shadowSpecified();
    public void set_shadowSpecified(bool value);
}
[DesignerCategoryAttribute("code")]
[XmlTypeAttribute]
[XmlRootAttribute]
public class NPOI.OpenXmlFormats.Vml.Wordprocessing.CT_Wrap : object {
    private ST_WrapType typeField;
    private bool typeFieldSpecified;
    private ST_WrapSide sideField;
    private bool sideFieldSpecified;
    private ST_HorizontalAnchor anchorxField;
    private bool anchorxFieldSpecified;
    private ST_VerticalAnchor anchoryField;
    private bool anchoryFieldSpecified;
    [XmlAttributeAttribute]
public ST_WrapType type { get; public set; }
    [XmlIgnoreAttribute]
public bool typeSpecified { get; public set; }
    [XmlAttributeAttribute]
public ST_WrapSide side { get; public set; }
    [XmlIgnoreAttribute]
public bool sideSpecified { get; public set; }
    [XmlAttributeAttribute]
public ST_HorizontalAnchor anchorx { get; public set; }
    [XmlIgnoreAttribute]
public bool anchorxSpecified { get; public set; }
    [XmlAttributeAttribute]
public ST_VerticalAnchor anchory { get; public set; }
    [XmlIgnoreAttribute]
public bool anchorySpecified { get; public set; }
    public static CT_Wrap Parse(XmlNode node, XmlNamespaceManager namespaceManager);
    internal void Write(StreamWriter sw, string nodeName);
    public ST_WrapType get_type();
    public void set_type(ST_WrapType value);
    public bool get_typeSpecified();
    public void set_typeSpecified(bool value);
    public ST_WrapSide get_side();
    public void set_side(ST_WrapSide value);
    public bool get_sideSpecified();
    public void set_sideSpecified(bool value);
    public ST_HorizontalAnchor get_anchorx();
    public void set_anchorx(ST_HorizontalAnchor value);
    public bool get_anchorxSpecified();
    public void set_anchorxSpecified(bool value);
    public ST_VerticalAnchor get_anchory();
    public void set_anchory(ST_VerticalAnchor value);
    public bool get_anchorySpecified();
    public void set_anchorySpecified(bool value);
}
[XmlTypeAttribute]
[XmlRootAttribute]
public enum NPOI.OpenXmlFormats.Vml.Wordprocessing.ST_BorderShadow : Enum {
    public int value__;
    public static ST_BorderShadow t;
    public static ST_BorderShadow true;
    public static ST_BorderShadow f;
    public static ST_BorderShadow false;
}
[XmlTypeAttribute]
[XmlRootAttribute]
public enum NPOI.OpenXmlFormats.Vml.Wordprocessing.ST_BorderType : Enum {
    public int value__;
    public static ST_BorderType none;
    public static ST_BorderType single;
    public static ST_BorderType thick;
    public static ST_BorderType double;
    public static ST_BorderType hairline;
    public static ST_BorderType dot;
    public static ST_BorderType dash;
    public static ST_BorderType dotDash;
    public static ST_BorderType dashDotDot;
    public static ST_BorderType triple;
    public static ST_BorderType thinThickSmall;
    public static ST_BorderType thickThinSmall;
    public static ST_BorderType thickBetweenThinSmall;
    public static ST_BorderType thinThick;
    public static ST_BorderType thickThin;
    public static ST_BorderType thickBetweenThin;
    public static ST_BorderType thinThickLarge;
    public static ST_BorderType thickThinLarge;
    public static ST_BorderType thickBetweenThinLarge;
    public static ST_BorderType wave;
    public static ST_BorderType doubleWave;
    public static ST_BorderType dashedSmall;
    public static ST_BorderType dashDotStroked;
    public static ST_BorderType threeDEmboss;
    public static ST_BorderType threeDEngrave;
    public static ST_BorderType HTMLOutset;
    public static ST_BorderType HTMLInset;
}
[XmlTypeAttribute]
[XmlRootAttribute]
public enum NPOI.OpenXmlFormats.Vml.Wordprocessing.ST_HorizontalAnchor : Enum {
    public int value__;
    public static ST_HorizontalAnchor margin;
    public static ST_HorizontalAnchor page;
    public static ST_HorizontalAnchor text;
    public static ST_HorizontalAnchor char;
}
[XmlTypeAttribute]
[XmlRootAttribute]
public enum NPOI.OpenXmlFormats.Vml.Wordprocessing.ST_VerticalAnchor : Enum {
    public int value__;
    public static ST_VerticalAnchor margin;
    public static ST_VerticalAnchor page;
    public static ST_VerticalAnchor text;
    public static ST_VerticalAnchor line;
}
[XmlTypeAttribute]
[XmlRootAttribute]
public enum NPOI.OpenXmlFormats.Vml.Wordprocessing.ST_WrapSide : Enum {
    public int value__;
    public static ST_WrapSide both;
    public static ST_WrapSide left;
    public static ST_WrapSide right;
    public static ST_WrapSide largest;
}
[XmlTypeAttribute]
[XmlRootAttribute]
public enum NPOI.OpenXmlFormats.Vml.Wordprocessing.ST_WrapType : Enum {
    public int value__;
    public static ST_WrapType topAndBottom;
    public static ST_WrapType square;
    public static ST_WrapType none;
    public static ST_WrapType tight;
    public static ST_WrapType through;
}
public class NPOI.OpenXmlFormats.Wordprocessing.CommentsDocument : object {
    private CT_Comments comments;
    public CT_Comments Comments { get; }
    public CommentsDocument(CT_Comments comments);
    public static CommentsDocument Parse(XmlDocument doc, XmlNamespaceManager NameSpaceManager);
    public CT_Comments get_Comments();
    public CT_Comments AddNewComments();
    public void Save(Stream stream);
}
[XmlTypeAttribute]
[XmlRootAttribute]
public class NPOI.OpenXmlFormats.Wordprocessing.CT_AbstractNum : object {
    private CT_LongHexNumber nsidField;
    private CT_MultiLevelType multiLevelTypeField;
    private CT_LongHexNumber tmplField;
    private CT_String nameField;
    private CT_String styleLinkField;
    private CT_String numStyleLinkField;
    private List`1<CT_Lvl> lvlField;
    private string abstractNumIdField;
    [XmlElementAttribute]
public CT_LongHexNumber nsid { get; public set; }
    [XmlElementAttribute]
public CT_MultiLevelType multiLevelType { get; public set; }
    [XmlElementAttribute]
public CT_LongHexNumber tmpl { get; public set; }
    [XmlElementAttribute]
public CT_String name { get; public set; }
    [XmlElementAttribute]
public CT_String styleLink { get; public set; }
    [XmlElementAttribute]
public CT_String numStyleLink { get; public set; }
    [XmlElementAttribute("lvl")]
public List`1<CT_Lvl> lvl { get; public set; }
    [XmlAttributeAttribute]
public string abstractNumId { get; public set; }
    public CT_LongHexNumber get_nsid();
    public void set_nsid(CT_LongHexNumber value);
    public CT_MultiLevelType get_multiLevelType();
    public void set_multiLevelType(CT_MultiLevelType value);
    public CT_LongHexNumber get_tmpl();
    public void set_tmpl(CT_LongHexNumber value);
    public CT_String get_name();
    public void set_name(CT_String value);
    public CT_String get_styleLink();
    public void set_styleLink(CT_String value);
    public CT_String get_numStyleLink();
    public void set_numStyleLink(CT_String value);
    public List`1<CT_Lvl> get_lvl();
    public void set_lvl(List`1<CT_Lvl> value);
    public string get_abstractNumId();
    public void set_abstractNumId(string value);
    public CT_AbstractNum Copy();
    public bool ValueEquals(CT_AbstractNum cT_AbstractNum);
    public void Set(CT_AbstractNum cT_AbstractNum);
    public static CT_AbstractNum Parse(XmlNode node, XmlNamespaceManager namespaceManager);
    internal void Write(StreamWriter sw, string nodeName);
    public CT_Lvl AddNewLvl();
    public int SizeOfLvlArray();
    public CT_Lvl GetLvlArray(int i);
}
[XmlTypeAttribute]
[XmlRootAttribute]
public class NPOI.OpenXmlFormats.Wordprocessing.CT_AltChunk : object {
    private CT_AltChunkPr altChunkPrField;
    private string idField;
    [XmlElementAttribute]
public CT_AltChunkPr altChunkPr { get; public set; }
    [XmlAttributeAttribute]
public string id { get; public set; }
    public static CT_AltChunk Parse(XmlNode node, XmlNamespaceManager namespaceManager);
    internal void Write(StreamWriter sw, string nodeName);
    public CT_AltChunkPr get_altChunkPr();
    public void set_altChunkPr(CT_AltChunkPr value);
    public string get_id();
    public void set_id(string value);
}
[XmlTypeAttribute]
[XmlRootAttribute]
public class NPOI.OpenXmlFormats.Wordprocessing.CT_AltChunkPr : object {
    private CT_OnOff matchSrcField;
    [XmlElementAttribute]
public CT_OnOff matchSrc { get; public set; }
    public static CT_AltChunkPr Parse(XmlNode node, XmlNamespaceManager namespaceManager);
    internal void Write(StreamWriter sw, string nodeName);
    public CT_OnOff get_matchSrc();
    public void set_matchSrc(CT_OnOff value);
}
[XmlTypeAttribute]
[XmlRootAttribute]
public class NPOI.OpenXmlFormats.Wordprocessing.CT_Attr : object {
    private string uriField;
    private string nameField;
    private string valField;
    [XmlAttributeAttribute]
public string uri { get; public set; }
    [XmlAttributeAttribute]
public string name { get; public set; }
    [XmlAttributeAttribute]
public string val { get; public set; }
    public static CT_Attr Parse(XmlNode node, XmlNamespaceManager namespaceManager);
    internal void Write(StreamWriter sw, string nodeName);
    public string get_uri();
    public void set_uri(string value);
    public string get_name();
    public void set_name(string value);
    public string get_val();
    public void set_val(string value);
}
[XmlTypeAttribute]
[XmlRootAttribute]
public class NPOI.OpenXmlFormats.Wordprocessing.CT_AutoCaption : object {
    private string nameField;
    private string captionField;
    [XmlAttributeAttribute]
public string name { get; public set; }
    [XmlAttributeAttribute]
public string caption { get; public set; }
    public static CT_AutoCaption Parse(XmlNode node, XmlNamespaceManager namespaceManager);
    internal void Write(StreamWriter sw, string nodeName);
    public string get_name();
    public void set_name(string value);
    public string get_caption();
    public void set_caption(string value);
}
[XmlTypeAttribute]
[XmlRootAttribute]
public class NPOI.OpenXmlFormats.Wordprocessing.CT_AutoCaptions : object {
    private List`1<CT_AutoCaption> autoCaptionField;
    [XmlElementAttribute("autoCaption")]
public List`1<CT_AutoCaption> autoCaption { get; public set; }
    public List`1<CT_AutoCaption> get_autoCaption();
    public void set_autoCaption(List`1<CT_AutoCaption> value);
}
[XmlTypeAttribute]
[XmlRootAttribute]
public class NPOI.OpenXmlFormats.Wordprocessing.CT_Background : CT_PictureBase {
    private string colorField;
    private ST_ThemeColor themeColorField;
    private bool themeColorFieldSpecified;
    private Byte[] themeTintField;
    private Byte[] themeShadeField;
    [XmlAttributeAttribute]
public string color { get; public set; }
    [XmlAttributeAttribute]
public ST_ThemeColor themeColor { get; public set; }
    [XmlIgnoreAttribute]
public bool themeColorSpecified { get; public set; }
    [XmlAttributeAttribute]
public Byte[] themeTint { get; public set; }
    [XmlAttributeAttribute]
public Byte[] themeShade { get; public set; }
    public static CT_Background Parse(XmlNode node, XmlNamespaceManager namespaceManager);
    internal void Write(StreamWriter sw, string nodeName);
    public string get_color();
    public void set_color(string value);
    public ST_ThemeColor get_themeColor();
    public void set_themeColor(ST_ThemeColor value);
    public bool get_themeColorSpecified();
    public void set_themeColorSpecified(bool value);
    public Byte[] get_themeTint();
    public void set_themeTint(Byte[] value);
    public Byte[] get_themeShade();
    public void set_themeShade(Byte[] value);
}
[XmlTypeAttribute]
[XmlRootAttribute]
public class NPOI.OpenXmlFormats.Wordprocessing.CT_Body : object {
    private ArrayList itemsField;
    private List`1<DocumentBodyItemChoiceType> itemsElementNameField;
    private CT_SectPr sectPrField;
    [XmlElementAttribute("oMath", "NPOI.OpenXmlFormats.Shared.CT_OMath")]
[XmlElementAttribute("oMathPara", "NPOI.OpenXmlFormats.Shared.CT_OMathPara")]
[XmlElementAttribute("altChunk", "NPOI.OpenXmlFormats.Wordprocessing.CT_AltChunk")]
[XmlElementAttribute("bookmarkEnd", "NPOI.OpenXmlFormats.Wordprocessing.CT_MarkupRange")]
[XmlElementAttribute("bookmarkStart", "NPOI.OpenXmlFormats.Wordprocessing.CT_Bookmark")]
[XmlElementAttribute("commentRangeEnd", "NPOI.OpenXmlFormats.Wordprocessing.CT_MarkupRange")]
[XmlElementAttribute("commentRangeStart", "NPOI.OpenXmlFormats.Wordprocessing.CT_MarkupRange")]
[XmlElementAttribute("customXml", "NPOI.OpenXmlFormats.Wordprocessing.CT_CustomXmlBlock")]
[XmlElementAttribute("customXmlDelRangeEnd", "NPOI.OpenXmlFormats.Wordprocessing.CT_Markup")]
[XmlElementAttribute("customXmlDelRangeStart", "NPOI.OpenXmlFormats.Wordprocessing.CT_TrackChange")]
[XmlElementAttribute("customXmlInsRangeEnd", "NPOI.OpenXmlFormats.Wordprocessing.CT_Markup")]
[XmlElementAttribute("customXmlInsRangeStart", "NPOI.OpenXmlFormats.Wordprocessing.CT_TrackChange")]
[XmlElementAttribute("customXmlMoveFromRangeEnd", "NPOI.OpenXmlFormats.Wordprocessing.CT_Markup")]
[XmlElementAttribute("customXmlMoveFromRangeStart", "NPOI.OpenXmlFormats.Wordprocessing.CT_TrackChange")]
[XmlElementAttribute("customXmlMoveToRangeEnd", "NPOI.OpenXmlFormats.Wordprocessing.CT_Markup")]
[XmlElementAttribute("customXmlMoveToRangeStart", "NPOI.OpenXmlFormats.Wordprocessing.CT_TrackChange")]
[XmlElementAttribute("del")]
[XmlElementAttribute("ins")]
[XmlElementAttribute("moveFrom", "NPOI.OpenXmlFormats.Wordprocessing.CT_RunTrackChange")]
[XmlElementAttribute("moveFromRangeEnd", "NPOI.OpenXmlFormats.Wordprocessing.CT_MarkupRange")]
[XmlElementAttribute("moveFromRangeStart", "NPOI.OpenXmlFormats.Wordprocessing.CT_MoveBookmark")]
[XmlElementAttribute("moveTo", "NPOI.OpenXmlFormats.Wordprocessing.CT_RunTrackChange")]
[XmlElementAttribute("moveToRangeEnd", "NPOI.OpenXmlFormats.Wordprocessing.CT_MarkupRange")]
[XmlElementAttribute("moveToRangeStart", "NPOI.OpenXmlFormats.Wordprocessing.CT_MoveBookmark")]
[XmlElementAttribute("p", "NPOI.OpenXmlFormats.Wordprocessing.CT_P")]
[XmlElementAttribute("permEnd", "NPOI.OpenXmlFormats.Wordprocessing.CT_Perm")]
[XmlElementAttribute("permStart", "NPOI.OpenXmlFormats.Wordprocessing.CT_PermStart")]
[XmlElementAttribute("proofErr", "NPOI.OpenXmlFormats.Wordprocessing.CT_ProofErr")]
[XmlElementAttribute("sdt", "NPOI.OpenXmlFormats.Wordprocessing.CT_SdtBlock")]
[XmlElementAttribute("tbl", "NPOI.OpenXmlFormats.Wordprocessing.CT_Tbl")]
[XmlChoiceIdentifierAttribute("ItemsElementName")]
public ArrayList Items { get; public set; }
    [XmlElementAttribute("ItemsElementName")]
[XmlIgnoreAttribute]
public List`1<DocumentBodyItemChoiceType> ItemsElementName { get; public set; }
    [XmlElementAttribute]
public CT_SectPr sectPr { get; public set; }
    public static CT_Body Parse(XmlNode node, XmlNamespaceManager namespaceManager);
    public int SizeOfPArray();
    internal void Write(StreamWriter sw, string nodeName);
    public CT_SectPr AddNewSectPr();
    public bool IsSetSectPr();
    public ArrayList get_Items();
    public void set_Items(ArrayList value);
    public CT_P AddNewP();
    public List`1<DocumentBodyItemChoiceType> get_ItemsElementName();
    public void set_ItemsElementName(List`1<DocumentBodyItemChoiceType> value);
    public CT_SectPr get_sectPr();
    public void set_sectPr(CT_SectPr value);
    public CT_Tbl AddNewTbl(Nullable`1<int> pos);
    public int sizeOfTblArray();
    public List`1<CT_Tbl> getTblArray();
    public CT_Tbl insertNewTbl(int paramInt);
    public void removeTbl(int paramInt);
    public CT_Tbl GetTblArray(int i);
    public void SetTblArray(int pos, CT_Tbl cT_Tbl);
    public CT_Tbl[] GetTblArray();
    public CT_P GetPArray(int p);
    public void RemoveP(int paraPos);
    public void RemoveTbl(int tablePos);
    public CT_SdtBlock AddNewSdt();
    private List`1<T> GetObjectList(DocumentBodyItemChoiceType type);
    private int SizeOfArray(DocumentBodyItemChoiceType type);
    private T GetObjectArray(int p, DocumentBodyItemChoiceType type);
    private T AddNewObject(DocumentBodyItemChoiceType type);
    private void SetObject(DocumentBodyItemChoiceType type, int p, T obj);
    private int GetObjectIndex(DocumentBodyItemChoiceType type, int p);
    private void RemoveObject(DocumentBodyItemChoiceType type, int p);
    public void SetPArray(int pos, CT_P cT_P);
}
[XmlIncludeAttribute("NPOI.OpenXmlFormats.Wordprocessing.CT_MoveBookmark")]
[XmlTypeAttribute]
[XmlRootAttribute]
public class NPOI.OpenXmlFormats.Wordprocessing.CT_Bookmark : CT_BookmarkRange {
    private string nameField;
    [XmlAttributeAttribute]
public string name { get; public set; }
    public static CT_Bookmark Parse(XmlNode node, XmlNamespaceManager namespaceManager);
    internal void Write(StreamWriter sw, string nodeName);
    public string get_name();
    public void set_name(string value);
}
[XmlIncludeAttribute("NPOI.OpenXmlFormats.Wordprocessing.CT_Bookmark")]
[XmlIncludeAttribute("NPOI.OpenXmlFormats.Wordprocessing.CT_MoveBookmark")]
[XmlTypeAttribute]
[XmlRootAttribute]
public class NPOI.OpenXmlFormats.Wordprocessing.CT_BookmarkRange : CT_MarkupRange {
    private string colFirstField;
    private string colLastField;
    [XmlAttributeAttribute]
public string colFirst { get; public set; }
    [XmlAttributeAttribute]
public string colLast { get; public set; }
    public string get_colFirst();
    public void set_colFirst(string value);
    public string get_colLast();
    public void set_colLast(string value);
}
[XmlTypeAttribute]
[XmlRootAttribute]
public class NPOI.OpenXmlFormats.Wordprocessing.CT_Border : object {
    private ST_Border valField;
    private string colorField;
    private ST_ThemeColor themeColorField;
    private bool themeColorFieldSpecified;
    private Byte[] themeTintField;
    private Byte[] themeShadeField;
    private Nullable`1<ulong> szField;
    private Nullable`1<ulong> spaceField;
    private ST_OnOff shadowField;
    private bool shadowFieldSpecified;
    private ST_OnOff frameField;
    private bool frameFieldSpecified;
    [XmlAttributeAttribute]
public ST_Border val { get; public set; }
    [XmlAttributeAttribute]
public string color { get; public set; }
    [XmlAttributeAttribute]
public ST_ThemeColor themeColor { get; public set; }
    [XmlIgnoreAttribute]
public bool themeColorSpecified { get; public set; }
    [XmlAttributeAttribute]
public Byte[] themeTint { get; public set; }
    [XmlAttributeAttribute]
public Byte[] themeShade { get; public set; }
    [XmlAttributeAttribute]
public Nullable`1<ulong> sz { get; public set; }
    public Nullable`1<ulong> space { get; public set; }
    [XmlAttributeAttribute]
public ST_OnOff shadow { get; public set; }
    [XmlIgnoreAttribute]
public bool shadowSpecified { get; public set; }
    [XmlAttributeAttribute]
public ST_OnOff frame { get; public set; }
    [XmlIgnoreAttribute]
public bool frameSpecified { get; public set; }
    public static CT_Border Parse(XmlNode node, XmlNamespaceManager namespaceManager);
    internal void Write(StreamWriter sw, string nodeName);
    public ST_Border get_val();
    public void set_val(ST_Border value);
    public string get_color();
    public void set_color(string value);
    public ST_ThemeColor get_themeColor();
    public void set_themeColor(ST_ThemeColor value);
    public bool get_themeColorSpecified();
    public void set_themeColorSpecified(bool value);
    public Byte[] get_themeTint();
    public void set_themeTint(Byte[] value);
    public Byte[] get_themeShade();
    public void set_themeShade(Byte[] value);
    public Nullable`1<ulong> get_sz();
    public void set_sz(Nullable`1<ulong> value);
    public Nullable`1<ulong> get_space();
    public void set_space(Nullable`1<ulong> value);
    public ST_OnOff get_shadow();
    public void set_shadow(ST_OnOff value);
    public bool get_shadowSpecified();
    public void set_shadowSpecified(bool value);
    public ST_OnOff get_frame();
    public void set_frame(ST_OnOff value);
    public bool get_frameSpecified();
    public void set_frameSpecified(bool value);
}
[XmlTypeAttribute]
[XmlRootAttribute]
public class NPOI.OpenXmlFormats.Wordprocessing.CT_Br : object {
    private ST_BrType typeField;
    private bool typeFieldSpecified;
    private ST_BrClear clearField;
    private bool clearFieldSpecified;
    [XmlAttributeAttribute]
public ST_BrType type { get; public set; }
    [XmlIgnoreAttribute]
public bool typeSpecified { get; public set; }
    [XmlAttributeAttribute]
public ST_BrClear clear { get; public set; }
    [XmlIgnoreAttribute]
public bool clearSpecified { get; public set; }
    public static CT_Br Parse(XmlNode node, XmlNamespaceManager namespaceManager);
    internal void Write(StreamWriter sw, string nodeName);
    public ST_BrType get_type();
    public void set_type(ST_BrType value);
    public bool get_typeSpecified();
    public void set_typeSpecified(bool value);
    public ST_BrClear get_clear();
    public void set_clear(ST_BrClear value);
    public bool get_clearSpecified();
    public void set_clearSpecified(bool value);
}
[XmlTypeAttribute]
[XmlRootAttribute]
public class NPOI.OpenXmlFormats.Wordprocessing.CT_CalendarType : object {
    private ST_CalendarType valField;
    private bool valFieldSpecified;
    [XmlAttributeAttribute]
public ST_CalendarType val { get; public set; }
    [XmlIgnoreAttribute]
public bool valSpecified { get; public set; }
    public static CT_CalendarType Parse(XmlNode node, XmlNamespaceManager namespaceManager);
    internal void Write(StreamWriter sw, string nodeName);
    public ST_CalendarType get_val();
    public void set_val(ST_CalendarType value);
    public bool get_valSpecified();
    public void set_valSpecified(bool value);
}
[XmlTypeAttribute]
[XmlRootAttribute]
public class NPOI.OpenXmlFormats.Wordprocessing.CT_Caption : object {
    private string nameField;
    private ST_CaptionPos posField;
    private bool posFieldSpecified;
    private ST_OnOff chapNumField;
    private bool chapNumFieldSpecified;
    private string headingField;
    private ST_OnOff noLabelField;
    private bool noLabelFieldSpecified;
    private ST_NumberFormat numFmtField;
    private bool numFmtFieldSpecified;
    private ST_ChapterSep sepField;
    private bool sepFieldSpecified;
    [XmlAttributeAttribute]
public string name { get; public set; }
    [XmlAttributeAttribute]
public ST_CaptionPos pos { get; public set; }
    [XmlIgnoreAttribute]
public bool posSpecified { get; public set; }
    [XmlAttributeAttribute]
public ST_OnOff chapNum { get; public set; }
    [XmlIgnoreAttribute]
public bool chapNumSpecified { get; public set; }
    [XmlAttributeAttribute]
public string heading { get; public set; }
    [XmlAttributeAttribute]
public ST_OnOff noLabel { get; public set; }
    [XmlIgnoreAttribute]
public bool noLabelSpecified { get; public set; }
    [XmlAttributeAttribute]
public ST_NumberFormat numFmt { get; public set; }
    [XmlIgnoreAttribute]
public bool numFmtSpecified { get; public set; }
    [XmlAttributeAttribute]
public ST_ChapterSep sep { get; public set; }
    [XmlIgnoreAttribute]
public bool sepSpecified { get; public set; }
    public static CT_Caption Parse(XmlNode node, XmlNamespaceManager namespaceManager);
    internal void Write(StreamWriter sw, string nodeName);
    public string get_name();
    public void set_name(string value);
    public ST_CaptionPos get_pos();
    public void set_pos(ST_CaptionPos value);
    public bool get_posSpecified();
    public void set_posSpecified(bool value);
    public ST_OnOff get_chapNum();
    public void set_chapNum(ST_OnOff value);
    public bool get_chapNumSpecified();
    public void set_chapNumSpecified(bool value);
    public string get_heading();
    public void set_heading(string value);
    public ST_OnOff get_noLabel();
    public void set_noLabel(ST_OnOff value);
    public bool get_noLabelSpecified();
    public void set_noLabelSpecified(bool value);
    public ST_NumberFormat get_numFmt();
    public void set_numFmt(ST_NumberFormat value);
    public bool get_numFmtSpecified();
    public void set_numFmtSpecified(bool value);
    public ST_ChapterSep get_sep();
    public void set_sep(ST_ChapterSep value);
    public bool get_sepSpecified();
    public void set_sepSpecified(bool value);
}
[XmlTypeAttribute]
[XmlRootAttribute]
public class NPOI.OpenXmlFormats.Wordprocessing.CT_Captions : object {
    private List`1<CT_Caption> captionField;
    private List`1<CT_AutoCaption> autoCaptionsField;
    [XmlElementAttribute("caption")]
public List`1<CT_Caption> caption { get; public set; }
    [XmlArrayAttribute]
[XmlArrayItemAttribute("autoCaption")]
public List`1<CT_AutoCaption> autoCaptions { get; public set; }
    public static CT_Captions Parse(XmlNode node, XmlNamespaceManager namespaceManager);
    internal void Write(StreamWriter sw, string nodeName);
    public List`1<CT_Caption> get_caption();
    public void set_caption(List`1<CT_Caption> value);
    public List`1<CT_AutoCaption> get_autoCaptions();
    public void set_autoCaptions(List`1<CT_AutoCaption> value);
}
[XmlTypeAttribute]
[XmlRootAttribute]
public class NPOI.OpenXmlFormats.Wordprocessing.CT_CellMergeTrackChange : CT_TrackChange {
    private ST_AnnotationVMerge vMergeField;
    private bool vMergeFieldSpecified;
    private ST_AnnotationVMerge vMergeOrigField;
    private bool vMergeOrigFieldSpecified;
    [XmlAttributeAttribute]
public ST_AnnotationVMerge vMerge { get; public set; }
    [XmlIgnoreAttribute]
public bool vMergeSpecified { get; public set; }
    [XmlAttributeAttribute]
public ST_AnnotationVMerge vMergeOrig { get; public set; }
    [XmlIgnoreAttribute]
public bool vMergeOrigSpecified { get; public set; }
    public static CT_CellMergeTrackChange Parse(XmlNode node, XmlNamespaceManager namespaceManager);
    internal void Write(StreamWriter sw, string nodeName);
    public ST_AnnotationVMerge get_vMerge();
    public void set_vMerge(ST_AnnotationVMerge value);
    public bool get_vMergeSpecified();
    public void set_vMergeSpecified(bool value);
    public ST_AnnotationVMerge get_vMergeOrig();
    public void set_vMergeOrig(ST_AnnotationVMerge value);
    public bool get_vMergeOrigSpecified();
    public void set_vMergeOrigSpecified(bool value);
}
[XmlTypeAttribute]
[XmlRootAttribute]
public class NPOI.OpenXmlFormats.Wordprocessing.CT_CharacterSpacing : object {
    private ST_CharacterSpacing valField;
    [XmlAttributeAttribute]
public ST_CharacterSpacing val { get; public set; }
    public static CT_CharacterSpacing Parse(XmlNode node, XmlNamespaceManager namespaceManager);
    internal void Write(StreamWriter sw, string nodeName);
    public ST_CharacterSpacing get_val();
    public void set_val(ST_CharacterSpacing value);
}
[XmlTypeAttribute]
[XmlRootAttribute]
public class NPOI.OpenXmlFormats.Wordprocessing.CT_Cnf : object {
    private string valField;
    [XmlAttributeAttribute]
public string val { get; public set; }
    public static CT_Cnf Parse(XmlNode node, XmlNamespaceManager namespaceManager);
    internal void Write(StreamWriter sw, string nodeName);
    public string get_val();
    public void set_val(string value);
}
[XmlTypeAttribute]
[XmlRootAttribute]
public class NPOI.OpenXmlFormats.Wordprocessing.CT_Color : object {
    private string valField;
    private ST_ThemeColor themeColorField;
    private bool themeColorFieldSpecified;
    private Byte[] themeTintField;
    private Byte[] themeShadeField;
    [XmlAttributeAttribute]
public string val { get; public set; }
    [XmlAttributeAttribute]
public ST_ThemeColor themeColor { get; public set; }
    [XmlIgnoreAttribute]
public bool themeColorSpecified { get; public set; }
    [XmlAttributeAttribute]
public Byte[] themeTint { get; public set; }
    [XmlAttributeAttribute]
public Byte[] themeShade { get; public set; }
    public static CT_Color Parse(XmlNode node, XmlNamespaceManager namespaceManager);
    internal void Write(StreamWriter sw, string nodeName);
    public string get_val();
    public void set_val(string value);
    public ST_ThemeColor get_themeColor();
    public void set_themeColor(ST_ThemeColor value);
    public bool get_themeColorSpecified();
    public void set_themeColorSpecified(bool value);
    public Byte[] get_themeTint();
    public void set_themeTint(Byte[] value);
    public Byte[] get_themeShade();
    public void set_themeShade(Byte[] value);
}
[XmlTypeAttribute]
[XmlRootAttribute]
public class NPOI.OpenXmlFormats.Wordprocessing.CT_ColorSchemeMapping : object {
    private ST_ColorSchemeIndex bg1Field;
    private bool bg1FieldSpecified;
    private ST_ColorSchemeIndex t1Field;
    private bool t1FieldSpecified;
    private ST_ColorSchemeIndex bg2Field;
    private bool bg2FieldSpecified;
    private ST_ColorSchemeIndex t2Field;
    private bool t2FieldSpecified;
    private ST_ColorSchemeIndex accent1Field;
    private bool accent1FieldSpecified;
    private ST_ColorSchemeIndex accent2Field;
    private bool accent2FieldSpecified;
    private ST_ColorSchemeIndex accent3Field;
    private bool accent3FieldSpecified;
    private ST_ColorSchemeIndex accent4Field;
    private bool accent4FieldSpecified;
    private ST_ColorSchemeIndex accent5Field;
    private bool accent5FieldSpecified;
    private ST_ColorSchemeIndex accent6Field;
    private bool accent6FieldSpecified;
    private ST_ColorSchemeIndex hyperlinkField;
    private bool hyperlinkFieldSpecified;
    private ST_ColorSchemeIndex followedHyperlinkField;
    private bool followedHyperlinkFieldSpecified;
    [XmlAttributeAttribute]
public ST_ColorSchemeIndex bg1 { get; public set; }
    [XmlIgnoreAttribute]
public bool bg1Specified { get; public set; }
    [XmlAttributeAttribute]
public ST_ColorSchemeIndex t1 { get; public set; }
    [XmlIgnoreAttribute]
public bool t1Specified { get; public set; }
    [XmlAttributeAttribute]
public ST_ColorSchemeIndex bg2 { get; public set; }
    [XmlIgnoreAttribute]
public bool bg2Specified { get; public set; }
    [XmlAttributeAttribute]
public ST_ColorSchemeIndex t2 { get; public set; }
    [XmlIgnoreAttribute]
public bool t2Specified { get; public set; }
    [XmlAttributeAttribute]
public ST_ColorSchemeIndex accent1 { get; public set; }
    [XmlIgnoreAttribute]
public bool accent1Specified { get; public set; }
    [XmlAttributeAttribute]
public ST_ColorSchemeIndex accent2 { get; public set; }
    [XmlIgnoreAttribute]
public bool accent2Specified { get; public set; }
    [XmlAttributeAttribute]
public ST_ColorSchemeIndex accent3 { get; public set; }
    [XmlIgnoreAttribute]
public bool accent3Specified { get; public set; }
    [XmlAttributeAttribute]
public ST_ColorSchemeIndex accent4 { get; public set; }
    [XmlIgnoreAttribute]
public bool accent4Specified { get; public set; }
    [XmlAttributeAttribute]
public ST_ColorSchemeIndex accent5 { get; public set; }
    [XmlIgnoreAttribute]
public bool accent5Specified { get; public set; }
    [XmlAttributeAttribute]
public ST_ColorSchemeIndex accent6 { get; public set; }
    [XmlIgnoreAttribute]
public bool accent6Specified { get; public set; }
    [XmlAttributeAttribute]
public ST_ColorSchemeIndex hyperlink { get; public set; }
    [XmlIgnoreAttribute]
public bool hyperlinkSpecified { get; public set; }
    [XmlAttributeAttribute]
public ST_ColorSchemeIndex followedHyperlink { get; public set; }
    [XmlIgnoreAttribute]
public bool followedHyperlinkSpecified { get; public set; }
    public static CT_ColorSchemeMapping Parse(XmlNode node, XmlNamespaceManager namespaceManager);
    internal void Write(StreamWriter sw, string nodeName);
    public ST_ColorSchemeIndex get_bg1();
    public void set_bg1(ST_ColorSchemeIndex value);
    public bool get_bg1Specified();
    public void set_bg1Specified(bool value);
    public ST_ColorSchemeIndex get_t1();
    public void set_t1(ST_ColorSchemeIndex value);
    public bool get_t1Specified();
    public void set_t1Specified(bool value);
    public ST_ColorSchemeIndex get_bg2();
    public void set_bg2(ST_ColorSchemeIndex value);
    public bool get_bg2Specified();
    public void set_bg2Specified(bool value);
    public ST_ColorSchemeIndex get_t2();
    public void set_t2(ST_ColorSchemeIndex value);
    public bool get_t2Specified();
    public void set_t2Specified(bool value);
    public ST_ColorSchemeIndex get_accent1();
    public void set_accent1(ST_ColorSchemeIndex value);
    public bool get_accent1Specified();
    public void set_accent1Specified(bool value);
    public ST_ColorSchemeIndex get_accent2();
    public void set_accent2(ST_ColorSchemeIndex value);
    public bool get_accent2Specified();
    public void set_accent2Specified(bool value);
    public ST_ColorSchemeIndex get_accent3();
    public void set_accent3(ST_ColorSchemeIndex value);
    public bool get_accent3Specified();
    public void set_accent3Specified(bool value);
    public ST_ColorSchemeIndex get_accent4();
    public void set_accent4(ST_ColorSchemeIndex value);
    public bool get_accent4Specified();
    public void set_accent4Specified(bool value);
    public ST_ColorSchemeIndex get_accent5();
    public void set_accent5(ST_ColorSchemeIndex value);
    public bool get_accent5Specified();
    public void set_accent5Specified(bool value);
    public ST_ColorSchemeIndex get_accent6();
    public void set_accent6(ST_ColorSchemeIndex value);
    public bool get_accent6Specified();
    public void set_accent6Specified(bool value);
    public ST_ColorSchemeIndex get_hyperlink();
    public void set_hyperlink(ST_ColorSchemeIndex value);
    public bool get_hyperlinkSpecified();
    public void set_hyperlinkSpecified(bool value);
    public ST_ColorSchemeIndex get_followedHyperlink();
    public void set_followedHyperlink(ST_ColorSchemeIndex value);
    public bool get_followedHyperlinkSpecified();
    public void set_followedHyperlinkSpecified(bool value);
}
[XmlTypeAttribute]
[XmlRootAttribute]
public class NPOI.OpenXmlFormats.Wordprocessing.CT_Column : object {
    private ulong wField;
    private bool wFieldSpecified;
    private ulong spaceField;
    private bool spaceFieldSpecified;
    [XmlAttributeAttribute]
public ulong w { get; public set; }
    [XmlIgnoreAttribute]
public bool wSpecified { get; public set; }
    [XmlAttributeAttribute]
public ulong space { get; public set; }
    [XmlIgnoreAttribute]
public bool spaceSpecified { get; public set; }
    public static CT_Column Parse(XmlNode node, XmlNamespaceManager namespaceManager);
    internal void Write(StreamWriter sw, string nodeName);
    public ulong get_w();
    public void set_w(ulong value);
    public bool get_wSpecified();
    public void set_wSpecified(bool value);
    public ulong get_space();
    public void set_space(ulong value);
    public bool get_spaceSpecified();
    public void set_spaceSpecified(bool value);
}
[XmlTypeAttribute]
[XmlRootAttribute]
public class NPOI.OpenXmlFormats.Wordprocessing.CT_Columns : object {
    private List`1<CT_Column> colField;
    private ST_OnOff equalWidthField;
    private bool equalWidthFieldSpecified;
    private ulong spaceField;
    private bool spaceFieldSpecified;
    private string numField;
    private ST_OnOff sepField;
    private bool sepFieldSpecified;
    [XmlElementAttribute("col")]
public List`1<CT_Column> col { get; public set; }
    [XmlAttributeAttribute]
public ST_OnOff equalWidth { get; public set; }
    [XmlIgnoreAttribute]
public bool equalWidthSpecified { get; public set; }
    [XmlAttributeAttribute]
public ulong space { get; public set; }
    [XmlIgnoreAttribute]
public bool spaceSpecified { get; public set; }
    [XmlAttributeAttribute]
public string num { get; public set; }
    [XmlAttributeAttribute]
public ST_OnOff sep { get; public set; }
    [XmlIgnoreAttribute]
public bool sepSpecified { get; public set; }
    public static CT_Columns Parse(XmlNode node, XmlNamespaceManager namespaceManager);
    internal void Write(StreamWriter sw, string nodeName);
    public List`1<CT_Column> get_col();
    public void set_col(List`1<CT_Column> value);
    public ST_OnOff get_equalWidth();
    public void set_equalWidth(ST_OnOff value);
    public bool get_equalWidthSpecified();
    public void set_equalWidthSpecified(bool value);
    public ulong get_space();
    public void set_space(ulong value);
    public bool get_spaceSpecified();
    public void set_spaceSpecified(bool value);
    public string get_num();
    public void set_num(string value);
    public ST_OnOff get_sep();
    public void set_sep(ST_OnOff value);
    public bool get_sepSpecified();
    public void set_sepSpecified(bool value);
}
[XmlTypeAttribute]
[XmlRootAttribute]
public class NPOI.OpenXmlFormats.Wordprocessing.CT_Comment : CT_TrackChange {
    private ArrayList itemsField;
    private List`1<ItemsChoiceType50> itemsElementNameField;
    private string initialsField;
    [XmlElementAttribute("oMath", "NPOI.OpenXmlFormats.Shared.CT_OMath")]
[XmlElementAttribute("oMathPara", "NPOI.OpenXmlFormats.Shared.CT_OMathPara")]
[XmlElementAttribute("altChunk", "NPOI.OpenXmlFormats.Wordprocessing.CT_AltChunk")]
[XmlElementAttribute("bookmarkEnd", "NPOI.OpenXmlFormats.Wordprocessing.CT_MarkupRange")]
[XmlElementAttribute("bookmarkStart", "NPOI.OpenXmlFormats.Wordprocessing.CT_Bookmark")]
[XmlElementAttribute("commentRangeEnd", "NPOI.OpenXmlFormats.Wordprocessing.CT_MarkupRange")]
[XmlElementAttribute("commentRangeStart", "NPOI.OpenXmlFormats.Wordprocessing.CT_MarkupRange")]
[XmlElementAttribute("customXml", "NPOI.OpenXmlFormats.Wordprocessing.CT_CustomXmlBlock")]
[XmlElementAttribute("customXmlDelRangeEnd", "NPOI.OpenXmlFormats.Wordprocessing.CT_Markup")]
[XmlElementAttribute("customXmlDelRangeStart", "NPOI.OpenXmlFormats.Wordprocessing.CT_TrackChange")]
[XmlElementAttribute("customXmlInsRangeEnd", "NPOI.OpenXmlFormats.Wordprocessing.CT_Markup")]
[XmlElementAttribute("customXmlInsRangeStart", "NPOI.OpenXmlFormats.Wordprocessing.CT_TrackChange")]
[XmlElementAttribute("customXmlMoveFromRangeEnd", "NPOI.OpenXmlFormats.Wordprocessing.CT_Markup")]
[XmlElementAttribute("customXmlMoveFromRangeStart", "NPOI.OpenXmlFormats.Wordprocessing.CT_TrackChange")]
[XmlElementAttribute("customXmlMoveToRangeEnd", "NPOI.OpenXmlFormats.Wordprocessing.CT_Markup")]
[XmlElementAttribute("customXmlMoveToRangeStart", "NPOI.OpenXmlFormats.Wordprocessing.CT_TrackChange")]
[XmlElementAttribute("del", "NPOI.OpenXmlFormats.Wordprocessing.CT_RunTrackChange")]
[XmlElementAttribute("ins", "NPOI.OpenXmlFormats.Wordprocessing.CT_RunTrackChange")]
[XmlElementAttribute("moveFrom", "NPOI.OpenXmlFormats.Wordprocessing.CT_RunTrackChange")]
[XmlElementAttribute("moveFromRangeEnd", "NPOI.OpenXmlFormats.Wordprocessing.CT_MarkupRange")]
[XmlElementAttribute("moveFromRangeStart", "NPOI.OpenXmlFormats.Wordprocessing.CT_MoveBookmark")]
[XmlElementAttribute("moveTo", "NPOI.OpenXmlFormats.Wordprocessing.CT_RunTrackChange")]
[XmlElementAttribute("moveToRangeEnd", "NPOI.OpenXmlFormats.Wordprocessing.CT_MarkupRange")]
[XmlElementAttribute("moveToRangeStart", "NPOI.OpenXmlFormats.Wordprocessing.CT_MoveBookmark")]
[XmlElementAttribute("p", "NPOI.OpenXmlFormats.Wordprocessing.CT_P")]
[XmlElementAttribute("permEnd", "NPOI.OpenXmlFormats.Wordprocessing.CT_Perm")]
[XmlElementAttribute("permStart", "NPOI.OpenXmlFormats.Wordprocessing.CT_PermStart")]
[XmlElementAttribute("proofErr", "NPOI.OpenXmlFormats.Wordprocessing.CT_ProofErr")]
[XmlElementAttribute("sdt", "NPOI.OpenXmlFormats.Wordprocessing.CT_SdtBlock")]
[XmlElementAttribute("tbl", "NPOI.OpenXmlFormats.Wordprocessing.CT_Tbl")]
[XmlChoiceIdentifierAttribute("ItemsElementName")]
public ArrayList Items { get; public set; }
    [XmlElementAttribute("ItemsElementName")]
[XmlIgnoreAttribute]
public List`1<ItemsChoiceType50> ItemsElementName { get; public set; }
    [XmlAttributeAttribute]
public string initials { get; public set; }
    public static CT_Comment Parse(XmlNode node, XmlNamespaceManager namespaceManager);
    internal void Write(StreamWriter sw, string nodeName);
    public ArrayList get_Items();
    public void set_Items(ArrayList value);
    public List`1<ItemsChoiceType50> get_ItemsElementName();
    public void set_ItemsElementName(List`1<ItemsChoiceType50> value);
    public string get_initials();
    public void set_initials(string value);
    private List`1<T> GetObjectList(ItemsChoiceType50 type);
    private int SizeOfArray(ItemsChoiceType50 type);
    private T GetObjectArray(int p, ItemsChoiceType50 type);
    private T InsertNewObject(ItemsChoiceType50 type, int p);
    private T AddNewObject(ItemsChoiceType50 type);
    private void SetObject(ItemsChoiceType50 type, int p, T obj);
    private int GetObjectIndex(ItemsChoiceType50 type, int p);
    private void RemoveObject(ItemsChoiceType50 type, int p);
    public CT_AltChunk AddNewAltChunk();
    public CT_MarkupRange AddNewBookmarkEnd();
    public CT_Bookmark AddNewBookmarkStart();
    public CT_MarkupRange AddNewCommentRangeEnd();
    public CT_MarkupRange AddNewCommentRangeStart();
    public CT_CustomXmlBlock AddNewCustomXml();
    public CT_Markup AddNewCustomXmlDelRangeEnd();
    public CT_TrackChange AddNewCustomXmlDelRangeStart();
    public CT_Markup AddNewCustomXmlInsRangeEnd();
    public CT_TrackChange AddNewCustomXmlInsRangeStart();
    public CT_Markup AddNewCustomXmlMoveFromRangeEnd();
    public CT_TrackChange AddNewCustomXmlMoveFromRangeStart();
    public CT_Markup AddNewCustomXmlMoveToRangeEnd();
    public CT_TrackChange AddNewCustomXmlMoveToRangeStart();
    public CT_RunTrackChange AddNewDel();
    public CT_RunTrackChange AddNewIns();
    public CT_RunTrackChange AddNewMoveFrom();
    public CT_MarkupRange AddNewMoveFromRangeEnd();
    public CT_MoveBookmark AddNewMoveFromRangeStart();
    public CT_RunTrackChange AddNewMoveTo();
    public CT_MarkupRange AddNewMoveToRangeEnd();
    public CT_MoveBookmark AddNewMoveToRangeStart();
    public CT_OMath AddNewOMath();
    public CT_OMathPara AddNewOMathPara();
    public CT_P AddNewP();
    public CT_Perm AddNewPermEnd();
    public CT_PermStart AddNewPermStart();
    public CT_ProofErr AddNewProofErr();
    public CT_SdtBlock AddNewSdt();
    public CT_Tbl AddNewTbl();
    public CT_AltChunk GetAltChunkArray(int p);
    public CT_MarkupRange GetBookmarkEndArray(int p);
    public CT_Bookmark GetBookmarkStartArray(int p);
    public CT_MarkupRange GetCommentRangeEndArray(int p);
    public CT_MarkupRange GetCommentRangeStartArray(int p);
    public CT_CustomXmlBlock GetCustomXmlArray(int p);
    public CT_Markup GetCustomXmlDelRangeEndArray(int p);
    public CT_TrackChange GetCustomXmlDelRangeStartArray(int p);
    public CT_Markup GetCustomXmlInsRangeEndArray(int p);
    public CT_TrackChange GetCustomXmlInsRangeStartArray(int p);
    public CT_Markup GetCustomXmlMoveFromRangeEndArray(int p);
    public CT_TrackChange GetCustomXmlMoveFromRangeStartArray(int p);
    public CT_Markup GetCustomXmlMoveToRangeEndArray(int p);
    public CT_TrackChange GetCustomXmlMoveToRangeStartArray(int p);
    public CT_RunTrackChange GetDelArray(int p);
    public CT_RunTrackChange GetInsArray(int p);
    public CT_RunTrackChange GetMoveFromArray(int p);
    public CT_MarkupRange GetMoveFromRangeEndArray(int p);
    public CT_MoveBookmark GetMoveFromRangeStartArray(int p);
    public CT_RunTrackChange GetMoveToArray(int p);
    public CT_MarkupRange GetMoveToRangeEndArray(int p);
    public CT_MoveBookmark GetMoveToRangeStartArray(int p);
    public CT_OMath GetOMathArray(int p);
    public CT_OMathPara GetOMathParaArray(int p);
    public CT_P GetPArray(int p);
    public CT_Perm GetPermEndArray(int p);
    public CT_PermStart GetPermStartArray(int p);
    public CT_ProofErr GetProofErrArray(int p);
    public CT_SdtBlock GetSdtArray(int p);
    public CT_Tbl GetTblArray(int p);
    public IList`1<CT_AltChunk> GetAltChunkList();
    public IList`1<CT_MarkupRange> GetBookmarkEndList();
    public IList`1<CT_Bookmark> GetBookmarkStartList();
    public IList`1<CT_MarkupRange> GetCommentRangeEndList();
    public IList`1<CT_MarkupRange> GetCommentRangeStartList();
    public IList`1<CT_CustomXmlBlock> GetCustomXmlList();
    public IList`1<CT_Markup> GetCustomXmlDelRangeEndList();
    public IList`1<CT_TrackChange> GetCustomXmlDelRangeStartList();
    public IList`1<CT_Markup> GetCustomXmlInsRangeEndList();
    public IList`1<CT_TrackChange> GetCustomXmlInsRangeStartList();
    public IList`1<CT_Markup> GetCustomXmlMoveFromRangeEndList();
    public IList`1<CT_TrackChange> GetCustomXmlMoveFromRangeStartList();
    public IList`1<CT_Markup> GetCustomXmlMoveToRangeEndList();
    public IList`1<CT_TrackChange> GetCustomXmlMoveToRangeStartList();
    public IList`1<CT_RunTrackChange> GetDelList();
    public IList`1<CT_RunTrackChange> GetInsList();
    public IList`1<CT_RunTrackChange> GetMoveFromList();
    public IList`1<CT_MarkupRange> GetMoveFromRangeEndList();
    public IList`1<CT_MoveBookmark> GetMoveFromRangeStartList();
    public IList`1<CT_RunTrackChange> GetMoveToList();
    public IList`1<CT_MarkupRange> GetMoveToRangeEndList();
    public IList`1<CT_MoveBookmark> GetMoveToRangeStartList();
    public IList`1<CT_OMath> GetOMathList();
    public IList`1<CT_OMathPara> GetOMathParaList();
    public IList`1<CT_P> GetPList();
    public IList`1<CT_Perm> GetPermEndList();
    public IList`1<CT_PermStart> GetPermStartList();
    public IList`1<CT_ProofErr> GetProofErrList();
    public IList`1<CT_SdtBlock> GetSdtList();
    public IList`1<CT_Tbl> GetTblList();
    public CT_AltChunk InsertNewAltChunk(int p);
    public CT_MarkupRange InsertNewBookmarkEnd(int p);
    public CT_Bookmark InsertNewBookmarkStart(int p);
    public CT_MarkupRange InsertNewCommentRangeEnd(int p);
    public CT_MarkupRange InsertNewCommentRangeStart(int p);
    public CT_CustomXmlBlock InsertNewCustomXml(int p);
    public CT_Markup InsertNewCustomXmlDelRangeEnd(int p);
    public CT_TrackChange InsertNewCustomXmlDelRangeStart(int p);
    public CT_Markup InsertNewCustomXmlInsRangeEnd(int p);
    public CT_TrackChange InsertNewCustomXmlInsRangeStart(int p);
    public CT_Markup InsertNewCustomXmlMoveFromRangeEnd(int p);
    public CT_TrackChange InsertNewCustomXmlMoveFromRangeStart(int p);
    public CT_Markup InsertNewCustomXmlMoveToRangeEnd(int p);
    public CT_TrackChange InsertNewCustomXmlMoveToRangeStart(int p);
    public CT_RunTrackChange InsertNewDel(int p);
    public CT_RunTrackChange InsertNewIns(int p);
    public CT_RunTrackChange InsertNewMoveFrom(int p);
    public CT_MarkupRange InsertNewMoveFromRangeEnd(int p);
    public CT_MoveBookmark InsertNewMoveFromRangeStart(int p);
    public CT_RunTrackChange InsertNewMoveTo(int p);
    public CT_MarkupRange InsertNewMoveToRangeEnd(int p);
    public CT_MoveBookmark InsertNewMoveToRangeStart(int p);
    public CT_OMath InsertNewOMath(int p);
    public CT_OMathPara InsertNewOMathPara(int p);
    public CT_P InsertNewP(int p);
    public CT_Perm InsertNewPermEnd(int p);
    public CT_PermStart InsertNewPermStart(int p);
    public CT_ProofErr InsertNewProofErr(int p);
    public CT_SdtBlock InsertNewSdt(int p);
    public CT_Tbl InsertNewTbl(int p);
    public void RemoveAltChunk(int p);
    public void RemoveBookmarkEnd(int p);
    public void RemoveBookmarkStart(int p);
    public void RemoveCommentRangeEnd(int p);
    public void RemoveCommentRangeStart(int p);
    public void RemoveCustomXml(int p);
    public void RemoveCustomXmlDelRangeEnd(int p);
    public void RemoveCustomXmlDelRangeStart(int p);
    public void RemoveCustomXmlInsRangeEnd(int p);
    public void RemoveCustomXmlInsRangeStart(int p);
    public void RemoveCustomXmlMoveFromRangeEnd(int p);
    public void RemoveCustomXmlMoveFromRangeStart(int p);
    public void RemoveCustomXmlMoveToRangeEnd(int p);
    public void RemoveCustomXmlMoveToRangeStart(int p);
    public void RemoveDel(int p);
    public void RemoveIns(int p);
    public void RemoveMoveFrom(int p);
    public void RemoveMoveFromRangeEnd(int p);
    public void RemoveMoveFromRangeStart(int p);
    public void RemoveMoveTo(int p);
    public void RemoveMoveToRangeEnd(int p);
    public void RemoveMoveToRangeStart(int p);
    public void RemoveOMath(int p);
    public void RemoveOMathPara(int p);
    public void RemoveP(int p);
    public void RemovePermEnd(int p);
    public void RemovePermStart(int p);
    public void RemoveProofErr(int p);
    public void RemoveSdt(int p);
    public void RemoveTbl(int p);
    public void SetAltChunkArray(int p, CT_AltChunk obj);
    public void SetBookmarkEndArray(int p, CT_MarkupRange obj);
    public void SetBookmarkStartArray(int p, CT_Bookmark obj);
    public void SetCommentRangeEndArray(int p, CT_MarkupRange obj);
    public void SetCommentRangeStartArray(int p, CT_MarkupRange obj);
    public void SetCustomXmlArray(int p, CT_CustomXmlBlock obj);
    public void SetCustomXmlDelRangeEndArray(int p, CT_Markup obj);
    public void SetCustomXmlDelRangeStartArray(int p, CT_TrackChange obj);
    public void SetCustomXmlInsRangeEndArray(int p, CT_Markup obj);
    public void SetCustomXmlInsRangeStartArray(int p, CT_TrackChange obj);
    public void SetCustomXmlMoveFromRangeEndArray(int p, CT_Markup obj);
    public void SetCustomXmlMoveFromRangeStartArray(int p, CT_TrackChange obj);
    public void SetCustomXmlMoveToRangeEndArray(int p, CT_Markup obj);
    public void SetCustomXmlMoveToRangeStartArray(int p, CT_TrackChange obj);
    public void SetDelArray(int p, CT_RunTrackChange obj);
    public void SetInsArray(int p, CT_RunTrackChange obj);
    public void SetMoveFromArray(int p, CT_RunTrackChange obj);
    public void SetMoveFromRangeEndArray(int p, CT_MarkupRange obj);
    public void SetMoveFromRangeStartArray(int p, CT_MoveBookmark obj);
    public void SetMoveToArray(int p, CT_RunTrackChange obj);
    public void SetMoveToRangeEndArray(int p, CT_MarkupRange obj);
    public void SetMoveToRangeStartArray(int p, CT_MoveBookmark obj);
    public void SetOMathArray(int p, CT_OMath obj);
    public void SetOMathParaArray(int p, CT_OMathPara obj);
    public void SetPArray(int p, CT_P obj);
    public void SetPermEndArray(int p, CT_Perm obj);
    public void SetPermStartArray(int p, CT_PermStart obj);
    public void SetProofErrArray(int p, CT_ProofErr obj);
    public void SetSdtArray(int p, CT_SdtBlock obj);
    public void SetTblArray(int p, CT_Tbl obj);
    public int SizeOfAltChunkArray();
    public int SizeOfBookmarkEndArray();
    public int SizeOfBookmarkStartArray();
    public int SizeOfCommentRangeEndArray();
    public int SizeOfCommentRangeStartArray();
    public int SizeOfCustomXmlArray();
    public int SizeOfCustomXmlDelRangeEndArray();
    public int SizeOfCustomXmlDelRangeStartArray();
    public int SizeOfCustomXmlInsRangeEndArray();
    public int SizeOfCustomXmlInsRangeStartArray();
    public int SizeOfCustomXmlMoveFromRangeEndArray();
    public int SizeOfCustomXmlMoveFromRangeStartArray();
    public int SizeOfCustomXmlMoveToRangeEndArray();
    public int SizeOfCustomXmlMoveToRangeStartArray();
    public int SizeOfDelArray();
    public int SizeOfInsArray();
    public int SizeOfMoveFromArray();
    public int SizeOfMoveFromRangeEndArray();
    public int SizeOfMoveFromRangeStartArray();
    public int SizeOfMoveToArray();
    public int SizeOfMoveToRangeEndArray();
    public int SizeOfMoveToRangeStartArray();
    public int SizeOfOMathArray();
    public int SizeOfOMathParaArray();
    public int SizeOfPArray();
    public int SizeOfPermEndArray();
    public int SizeOfPermStartArray();
    public int SizeOfProofErrArray();
    public int SizeOfSdtArray();
    public int SizeOfTblArray();
}
[XmlTypeAttribute]
[XmlRootAttribute("comments")]
public class NPOI.OpenXmlFormats.Wordprocessing.CT_Comments : object {
    private List`1<CT_Comment> commentField;
    [XmlElementAttribute("comment")]
public List`1<CT_Comment> comment { get; public set; }
    public static CT_Comments Parse(XmlNode node, XmlNamespaceManager namespaceManager);
    internal void Write(StreamWriter sw);
    public List`1<CT_Comment> get_comment();
    public void set_comment(List`1<CT_Comment> value);
    public CT_Comment AddNewComment();
    public void RemoveComment(int i);
}
[XmlTypeAttribute]
[XmlRootAttribute]
public class NPOI.OpenXmlFormats.Wordprocessing.CT_Compat : object {
    private CT_OnOff useSingleBorderforContiguousCellsField;
    private CT_OnOff wpJustificationField;
    private CT_OnOff noTabHangIndField;
    private CT_OnOff noLeadingField;
    private CT_OnOff spaceForULField;
    private CT_OnOff noColumnBalanceField;
    private CT_OnOff balanceSingleByteDoubleByteWidthField;
    private CT_OnOff noExtraLineSpacingField;
    private CT_OnOff doNotLeaveBackslashAloneField;
    private CT_OnOff ulTrailSpaceField;
    private CT_OnOff doNotExpandShiftReturnField;
    private CT_OnOff spacingInWholePointsField;
    private CT_OnOff lineWrapLikeWord6Field;
    private CT_OnOff printBodyTextBeforeHeaderField;
    private CT_OnOff printColBlackField;
    private CT_OnOff wpSpaceWidthField;
    private CT_OnOff showBreaksInFramesField;
    private CT_OnOff subFontBySizeField;
    private CT_OnOff suppressBottomSpacingField;
    private CT_OnOff suppressTopSpacingField;
    private CT_OnOff suppressSpacingAtTopOfPageField;
    private CT_OnOff suppressTopSpacingWPField;
    private CT_OnOff suppressSpBfAfterPgBrkField;
    private CT_OnOff swapBordersFacingPagesField;
    private CT_OnOff convMailMergeEscField;
    private CT_OnOff truncateFontHeightsLikeWP6Field;
    private CT_OnOff mwSmallCapsField;
    private CT_OnOff usePrinterMetricsField;
    private CT_OnOff doNotSuppressParagraphBordersField;
    private CT_OnOff wrapTrailSpacesField;
    private CT_OnOff footnoteLayoutLikeWW8Field;
    private CT_OnOff shapeLayoutLikeWW8Field;
    private CT_OnOff alignTablesRowByRowField;
    private CT_OnOff forgetLastTabAlignmentField;
    private CT_OnOff adjustLineHeightInTableField;
    private CT_OnOff autoSpaceLikeWord95Field;
    private CT_OnOff noSpaceRaiseLowerField;
    private CT_OnOff doNotUseHTMLParagraphAutoSpacingField;
    private CT_OnOff layoutRawTableWidthField;
    private CT_OnOff layoutTableRowsApartField;
    private CT_OnOff useWord97LineBreakRulesField;
    private CT_OnOff doNotBreakWrappedTablesField;
    private CT_OnOff doNotSnapToGridInCellField;
    private CT_OnOff selectFldWithFirstOrLastCharField;
    private CT_OnOff applyBreakingRulesField;
    private CT_OnOff doNotWrapTextWithPunctField;
    private CT_OnOff doNotUseEastAsianBreakRulesField;
    private CT_OnOff useWord2002TableStyleRulesField;
    private CT_OnOff growAutofitField;
    private CT_OnOff useFELayoutField;
    private CT_OnOff useNormalStyleForListField;
    private CT_OnOff doNotUseIndentAsNumberingTabStopField;
    private CT_OnOff useAltKinsokuLineBreakRulesField;
    private CT_OnOff allowSpaceOfSameStyleInTableField;
    private CT_OnOff doNotSuppressIndentationField;
    private CT_OnOff doNotAutofitConstrainedTablesField;
    private CT_OnOff autofitToFirstFixedWidthCellField;
    private CT_OnOff underlineTabInNumListField;
    private CT_OnOff displayHangulFixedWidthField;
    private CT_OnOff splitPgBreakAndParaMarkField;
    private CT_OnOff doNotVertAlignCellWithSpField;
    private CT_OnOff doNotBreakConstrainedForcedTableField;
    private CT_OnOff doNotVertAlignInTxbxField;
    private CT_OnOff useAnsiKerningPairsField;
    private CT_OnOff cachedColBalanceField;
    [XmlElementAttribute]
public CT_OnOff useSingleBorderforContiguousCells { get; public set; }
    [XmlElementAttribute]
public CT_OnOff wpJustification { get; public set; }
    [XmlElementAttribute]
public CT_OnOff noTabHangInd { get; public set; }
    [XmlElementAttribute]
public CT_OnOff noLeading { get; public set; }
    [XmlElementAttribute]
public CT_OnOff spaceForUL { get; public set; }
    [XmlElementAttribute]
public CT_OnOff noColumnBalance { get; public set; }
    [XmlElementAttribute]
public CT_OnOff balanceSingleByteDoubleByteWidth { get; public set; }
    [XmlElementAttribute]
public CT_OnOff noExtraLineSpacing { get; public set; }
    [XmlElementAttribute]
public CT_OnOff doNotLeaveBackslashAlone { get; public set; }
    [XmlElementAttribute]
public CT_OnOff ulTrailSpace { get; public set; }
    [XmlElementAttribute]
public CT_OnOff doNotExpandShiftReturn { get; public set; }
    [XmlElementAttribute]
public CT_OnOff spacingInWholePoints { get; public set; }
    [XmlElementAttribute]
public CT_OnOff lineWrapLikeWord6 { get; public set; }
    [XmlElementAttribute]
public CT_OnOff printBodyTextBeforeHeader { get; public set; }
    [XmlElementAttribute]
public CT_OnOff printColBlack { get; public set; }
    [XmlElementAttribute]
public CT_OnOff wpSpaceWidth { get; public set; }
    [XmlElementAttribute]
public CT_OnOff showBreaksInFrames { get; public set; }
    [XmlElementAttribute]
public CT_OnOff subFontBySize { get; public set; }
    [XmlElementAttribute]
public CT_OnOff suppressBottomSpacing { get; public set; }
    [XmlElementAttribute]
public CT_OnOff suppressTopSpacing { get; public set; }
    [XmlElementAttribute]
public CT_OnOff suppressSpacingAtTopOfPage { get; public set; }
    [XmlElementAttribute]
public CT_OnOff suppressTopSpacingWP { get; public set; }
    [XmlElementAttribute]
public CT_OnOff suppressSpBfAfterPgBrk { get; public set; }
    [XmlElementAttribute]
public CT_OnOff swapBordersFacingPages { get; public set; }
    [XmlElementAttribute]
public CT_OnOff convMailMergeEsc { get; public set; }
    [XmlElementAttribute]
public CT_OnOff truncateFontHeightsLikeWP6 { get; public set; }
    [XmlElementAttribute]
public CT_OnOff mwSmallCaps { get; public set; }
    [XmlElementAttribute]
public CT_OnOff usePrinterMetrics { get; public set; }
    [XmlElementAttribute]
public CT_OnOff doNotSuppressParagraphBorders { get; public set; }
    [XmlElementAttribute]
public CT_OnOff wrapTrailSpaces { get; public set; }
    [XmlElementAttribute]
public CT_OnOff footnoteLayoutLikeWW8 { get; public set; }
    [XmlElementAttribute]
public CT_OnOff shapeLayoutLikeWW8 { get; public set; }
    [XmlElementAttribute]
public CT_OnOff alignTablesRowByRow { get; public set; }
    [XmlElementAttribute]
public CT_OnOff forgetLastTabAlignment { get; public set; }
    [XmlElementAttribute]
public CT_OnOff adjustLineHeightInTable { get; public set; }
    [XmlElementAttribute]
public CT_OnOff autoSpaceLikeWord95 { get; public set; }
    [XmlElementAttribute]
public CT_OnOff noSpaceRaiseLower { get; public set; }
    [XmlElementAttribute]
public CT_OnOff doNotUseHTMLParagraphAutoSpacing { get; public set; }
    [XmlElementAttribute]
public CT_OnOff layoutRawTableWidth { get; public set; }
    [XmlElementAttribute]
public CT_OnOff layoutTableRowsApart { get; public set; }
    [XmlElementAttribute]
public CT_OnOff useWord97LineBreakRules { get; public set; }
    [XmlElementAttribute]
public CT_OnOff doNotBreakWrappedTables { get; public set; }
    [XmlElementAttribute]
public CT_OnOff doNotSnapToGridInCell { get; public set; }
    [XmlElementAttribute]
public CT_OnOff selectFldWithFirstOrLastChar { get; public set; }
    [XmlElementAttribute]
public CT_OnOff applyBreakingRules { get; public set; }
    [XmlElementAttribute]
public CT_OnOff doNotWrapTextWithPunct { get; public set; }
    [XmlElementAttribute]
public CT_OnOff doNotUseEastAsianBreakRules { get; public set; }
    [XmlElementAttribute]
public CT_OnOff useWord2002TableStyleRules { get; public set; }
    [XmlElementAttribute]
public CT_OnOff growAutofit { get; public set; }
    [XmlElementAttribute]
public CT_OnOff useFELayout { get; public set; }
    [XmlElementAttribute]
public CT_OnOff useNormalStyleForList { get; public set; }
    [XmlElementAttribute]
public CT_OnOff doNotUseIndentAsNumberingTabStop { get; public set; }
    [XmlElementAttribute]
public CT_OnOff useAltKinsokuLineBreakRules { get; public set; }
    [XmlElementAttribute]
public CT_OnOff allowSpaceOfSameStyleInTable { get; public set; }
    [XmlElementAttribute]
public CT_OnOff doNotSuppressIndentation { get; public set; }
    [XmlElementAttribute]
public CT_OnOff doNotAutofitConstrainedTables { get; public set; }
    [XmlElementAttribute]
public CT_OnOff autofitToFirstFixedWidthCell { get; public set; }
    [XmlElementAttribute]
public CT_OnOff underlineTabInNumList { get; public set; }
    [XmlElementAttribute]
public CT_OnOff displayHangulFixedWidth { get; public set; }
    [XmlElementAttribute]
public CT_OnOff splitPgBreakAndParaMark { get; public set; }
    [XmlElementAttribute]
public CT_OnOff doNotVertAlignCellWithSp { get; public set; }
    [XmlElementAttribute]
public CT_OnOff doNotBreakConstrainedForcedTable { get; public set; }
    [XmlElementAttribute]
public CT_OnOff doNotVertAlignInTxbx { get; public set; }
    [XmlElementAttribute]
public CT_OnOff useAnsiKerningPairs { get; public set; }
    [XmlElementAttribute]
public CT_OnOff cachedColBalance { get; public set; }
    public static CT_Compat Parse(XmlNode node, XmlNamespaceManager namespaceManager);
    internal void Write(StreamWriter sw, string nodeName);
    public CT_OnOff get_useSingleBorderforContiguousCells();
    public void set_useSingleBorderforContiguousCells(CT_OnOff value);
    public CT_OnOff get_wpJustification();
    public void set_wpJustification(CT_OnOff value);
    public CT_OnOff get_noTabHangInd();
    public void set_noTabHangInd(CT_OnOff value);
    public CT_OnOff get_noLeading();
    public void set_noLeading(CT_OnOff value);
    public CT_OnOff get_spaceForUL();
    public void set_spaceForUL(CT_OnOff value);
    public CT_OnOff get_noColumnBalance();
    public void set_noColumnBalance(CT_OnOff value);
    public CT_OnOff get_balanceSingleByteDoubleByteWidth();
    public void set_balanceSingleByteDoubleByteWidth(CT_OnOff value);
    public CT_OnOff get_noExtraLineSpacing();
    public void set_noExtraLineSpacing(CT_OnOff value);
    public CT_OnOff get_doNotLeaveBackslashAlone();
    public void set_doNotLeaveBackslashAlone(CT_OnOff value);
    public CT_OnOff get_ulTrailSpace();
    public void set_ulTrailSpace(CT_OnOff value);
    public CT_OnOff get_doNotExpandShiftReturn();
    public void set_doNotExpandShiftReturn(CT_OnOff value);
    public CT_OnOff get_spacingInWholePoints();
    public void set_spacingInWholePoints(CT_OnOff value);
    public CT_OnOff get_lineWrapLikeWord6();
    public void set_lineWrapLikeWord6(CT_OnOff value);
    public CT_OnOff get_printBodyTextBeforeHeader();
    public void set_printBodyTextBeforeHeader(CT_OnOff value);
    public CT_OnOff get_printColBlack();
    public void set_printColBlack(CT_OnOff value);
    public CT_OnOff get_wpSpaceWidth();
    public void set_wpSpaceWidth(CT_OnOff value);
    public CT_OnOff get_showBreaksInFrames();
    public void set_showBreaksInFrames(CT_OnOff value);
    public CT_OnOff get_subFontBySize();
    public void set_subFontBySize(CT_OnOff value);
    public CT_OnOff get_suppressBottomSpacing();
    public void set_suppressBottomSpacing(CT_OnOff value);
    public CT_OnOff get_suppressTopSpacing();
    public void set_suppressTopSpacing(CT_OnOff value);
    public CT_OnOff get_suppressSpacingAtTopOfPage();
    public void set_suppressSpacingAtTopOfPage(CT_OnOff value);
    public CT_OnOff get_suppressTopSpacingWP();
    public void set_suppressTopSpacingWP(CT_OnOff value);
    public CT_OnOff get_suppressSpBfAfterPgBrk();
    public void set_suppressSpBfAfterPgBrk(CT_OnOff value);
    public CT_OnOff get_swapBordersFacingPages();
    public void set_swapBordersFacingPages(CT_OnOff value);
    public CT_OnOff get_convMailMergeEsc();
    public void set_convMailMergeEsc(CT_OnOff value);
    public CT_OnOff get_truncateFontHeightsLikeWP6();
    public void set_truncateFontHeightsLikeWP6(CT_OnOff value);
    public CT_OnOff get_mwSmallCaps();
    public void set_mwSmallCaps(CT_OnOff value);
    public CT_OnOff get_usePrinterMetrics();
    public void set_usePrinterMetrics(CT_OnOff value);
    public CT_OnOff get_doNotSuppressParagraphBorders();
    public void set_doNotSuppressParagraphBorders(CT_OnOff value);
    public CT_OnOff get_wrapTrailSpaces();
    public void set_wrapTrailSpaces(CT_OnOff value);
    public CT_OnOff get_footnoteLayoutLikeWW8();
    public void set_footnoteLayoutLikeWW8(CT_OnOff value);
    public CT_OnOff get_shapeLayoutLikeWW8();
    public void set_shapeLayoutLikeWW8(CT_OnOff value);
    public CT_OnOff get_alignTablesRowByRow();
    public void set_alignTablesRowByRow(CT_OnOff value);
    public CT_OnOff get_forgetLastTabAlignment();
    public void set_forgetLastTabAlignment(CT_OnOff value);
    public CT_OnOff get_adjustLineHeightInTable();
    public void set_adjustLineHeightInTable(CT_OnOff value);
    public CT_OnOff get_autoSpaceLikeWord95();
    public void set_autoSpaceLikeWord95(CT_OnOff value);
    public CT_OnOff get_noSpaceRaiseLower();
    public void set_noSpaceRaiseLower(CT_OnOff value);
    public CT_OnOff get_doNotUseHTMLParagraphAutoSpacing();
    public void set_doNotUseHTMLParagraphAutoSpacing(CT_OnOff value);
    public CT_OnOff get_layoutRawTableWidth();
    public void set_layoutRawTableWidth(CT_OnOff value);
    public CT_OnOff get_layoutTableRowsApart();
    public void set_layoutTableRowsApart(CT_OnOff value);
    public CT_OnOff get_useWord97LineBreakRules();
    public void set_useWord97LineBreakRules(CT_OnOff value);
    public CT_OnOff get_doNotBreakWrappedTables();
    public void set_doNotBreakWrappedTables(CT_OnOff value);
    public CT_OnOff get_doNotSnapToGridInCell();
    public void set_doNotSnapToGridInCell(CT_OnOff value);
    public CT_OnOff get_selectFldWithFirstOrLastChar();
    public void set_selectFldWithFirstOrLastChar(CT_OnOff value);
    public CT_OnOff get_applyBreakingRules();
    public void set_applyBreakingRules(CT_OnOff value);
    public CT_OnOff get_doNotWrapTextWithPunct();
    public void set_doNotWrapTextWithPunct(CT_OnOff value);
    public CT_OnOff get_doNotUseEastAsianBreakRules();
    public void set_doNotUseEastAsianBreakRules(CT_OnOff value);
    public CT_OnOff get_useWord2002TableStyleRules();
    public void set_useWord2002TableStyleRules(CT_OnOff value);
    public CT_OnOff get_growAutofit();
    public void set_growAutofit(CT_OnOff value);
    public CT_OnOff get_useFELayout();
    public void set_useFELayout(CT_OnOff value);
    public CT_OnOff get_useNormalStyleForList();
    public void set_useNormalStyleForList(CT_OnOff value);
    public CT_OnOff get_doNotUseIndentAsNumberingTabStop();
    public void set_doNotUseIndentAsNumberingTabStop(CT_OnOff value);
    public CT_OnOff get_useAltKinsokuLineBreakRules();
    public void set_useAltKinsokuLineBreakRules(CT_OnOff value);
    public CT_OnOff get_allowSpaceOfSameStyleInTable();
    public void set_allowSpaceOfSameStyleInTable(CT_OnOff value);
    public CT_OnOff get_doNotSuppressIndentation();
    public void set_doNotSuppressIndentation(CT_OnOff value);
    public CT_OnOff get_doNotAutofitConstrainedTables();
    public void set_doNotAutofitConstrainedTables(CT_OnOff value);
    public CT_OnOff get_autofitToFirstFixedWidthCell();
    public void set_autofitToFirstFixedWidthCell(CT_OnOff value);
    public CT_OnOff get_underlineTabInNumList();
    public void set_underlineTabInNumList(CT_OnOff value);
    public CT_OnOff get_displayHangulFixedWidth();
    public void set_displayHangulFixedWidth(CT_OnOff value);
    public CT_OnOff get_splitPgBreakAndParaMark();
    public void set_splitPgBreakAndParaMark(CT_OnOff value);
    public CT_OnOff get_doNotVertAlignCellWithSp();
    public void set_doNotVertAlignCellWithSp(CT_OnOff value);
    public CT_OnOff get_doNotBreakConstrainedForcedTable();
    public void set_doNotBreakConstrainedForcedTable(CT_OnOff value);
    public CT_OnOff get_doNotVertAlignInTxbx();
    public void set_doNotVertAlignInTxbx(CT_OnOff value);
    public CT_OnOff get_useAnsiKerningPairs();
    public void set_useAnsiKerningPairs(CT_OnOff value);
    public CT_OnOff get_cachedColBalance();
    public void set_cachedColBalance(CT_OnOff value);
}
[XmlTypeAttribute]
[XmlRootAttribute]
public class NPOI.OpenXmlFormats.Wordprocessing.CT_Control : object {
    private string nameField;
    private string shapeidField;
    private string idField;
    [XmlAttributeAttribute]
public string name { get; public set; }
    [XmlAttributeAttribute]
public string shapeid { get; public set; }
    [XmlAttributeAttribute]
public string id { get; public set; }
    public static CT_Control Parse(XmlNode node, XmlNamespaceManager namespaceManager);
    internal void Write(StreamWriter sw, string nodeName);
    public string get_name();
    public void set_name(string value);
    public string get_shapeid();
    public void set_shapeid(string value);
    public string get_id();
    public void set_id(string value);
}
[XmlTypeAttribute]
[XmlRootAttribute]
public class NPOI.OpenXmlFormats.Wordprocessing.CT_CustomXmlBlock : object {
    private CT_CustomXmlPr customXmlPrField;
    private ArrayList itemsField;
    private List`1<ItemsChoiceType26> itemsElementNameField;
    private string uriField;
    private string elementField;
    [XmlElementAttribute]
public CT_CustomXmlPr customXmlPr { get; public set; }
    [XmlElementAttribute("oMath", "NPOI.OpenXmlFormats.Shared.CT_OMath")]
[XmlElementAttribute("oMathPara", "NPOI.OpenXmlFormats.Shared.CT_OMathPara")]
[XmlElementAttribute("bookmarkEnd", "NPOI.OpenXmlFormats.Wordprocessing.CT_MarkupRange")]
[XmlElementAttribute("bookmarkStart", "NPOI.OpenXmlFormats.Wordprocessing.CT_Bookmark")]
[XmlElementAttribute("commentRangeEnd", "NPOI.OpenXmlFormats.Wordprocessing.CT_MarkupRange")]
[XmlElementAttribute("commentRangeStart", "NPOI.OpenXmlFormats.Wordprocessing.CT_MarkupRange")]
[XmlElementAttribute("customXml", "NPOI.OpenXmlFormats.Wordprocessing.CT_CustomXmlBlock")]
[XmlElementAttribute("customXmlDelRangeEnd", "NPOI.OpenXmlFormats.Wordprocessing.CT_Markup")]
[XmlElementAttribute("customXmlDelRangeStart", "NPOI.OpenXmlFormats.Wordprocessing.CT_TrackChange")]
[XmlElementAttribute("customXmlInsRangeEnd", "NPOI.OpenXmlFormats.Wordprocessing.CT_Markup")]
[XmlElementAttribute("customXmlInsRangeStart", "NPOI.OpenXmlFormats.Wordprocessing.CT_TrackChange")]
[XmlElementAttribute("customXmlMoveFromRangeEnd", "NPOI.OpenXmlFormats.Wordprocessing.CT_Markup")]
[XmlElementAttribute("customXmlMoveFromRangeStart", "NPOI.OpenXmlFormats.Wordprocessing.CT_TrackChange")]
[XmlElementAttribute("customXmlMoveToRangeEnd", "NPOI.OpenXmlFormats.Wordprocessing.CT_Markup")]
[XmlElementAttribute("customXmlMoveToRangeStart", "NPOI.OpenXmlFormats.Wordprocessing.CT_TrackChange")]
[XmlElementAttribute("del", "NPOI.OpenXmlFormats.Wordprocessing.CT_RunTrackChange")]
[XmlElementAttribute("ins", "NPOI.OpenXmlFormats.Wordprocessing.CT_RunTrackChange")]
[XmlElementAttribute("moveFrom", "NPOI.OpenXmlFormats.Wordprocessing.CT_RunTrackChange")]
[XmlElementAttribute("moveFromRangeEnd", "NPOI.OpenXmlFormats.Wordprocessing.CT_MarkupRange")]
[XmlElementAttribute("moveFromRangeStart", "NPOI.OpenXmlFormats.Wordprocessing.CT_MoveBookmark")]
[XmlElementAttribute("moveTo", "NPOI.OpenXmlFormats.Wordprocessing.CT_RunTrackChange")]
[XmlElementAttribute("moveToRangeEnd", "NPOI.OpenXmlFormats.Wordprocessing.CT_MarkupRange")]
[XmlElementAttribute("moveToRangeStart", "NPOI.OpenXmlFormats.Wordprocessing.CT_MoveBookmark")]
[XmlElementAttribute("p", "NPOI.OpenXmlFormats.Wordprocessing.CT_P")]
[XmlElementAttribute("permEnd", "NPOI.OpenXmlFormats.Wordprocessing.CT_Perm")]
[XmlElementAttribute("permStart", "NPOI.OpenXmlFormats.Wordprocessing.CT_PermStart")]
[XmlElementAttribute("proofErr", "NPOI.OpenXmlFormats.Wordprocessing.CT_ProofErr")]
[XmlElementAttribute("sdt", "NPOI.OpenXmlFormats.Wordprocessing.CT_SdtBlock")]
[XmlElementAttribute("tbl", "NPOI.OpenXmlFormats.Wordprocessing.CT_Tbl")]
[XmlChoiceIdentifierAttribute("ItemsElementName")]
public ArrayList Items { get; public set; }
    [XmlElementAttribute("ItemsElementName")]
[XmlIgnoreAttribute]
public List`1<ItemsChoiceType26> ItemsElementName { get; public set; }
    [XmlAttributeAttribute]
public string uri { get; public set; }
    [XmlAttributeAttribute]
public string element { get; public set; }
    public CT_CustomXmlPr get_customXmlPr();
    public void set_customXmlPr(CT_CustomXmlPr value);
    public static CT_CustomXmlBlock Parse(XmlNode node, XmlNamespaceManager namespaceManager);
    internal void Write(StreamWriter sw, string nodeName);
    public ArrayList get_Items();
    public void set_Items(ArrayList value);
    public List`1<ItemsChoiceType26> get_ItemsElementName();
    public void set_ItemsElementName(List`1<ItemsChoiceType26> value);
    public string get_uri();
    public void set_uri(string value);
    public string get_element();
    public void set_element(string value);
}
[XmlTypeAttribute]
[XmlRootAttribute]
public class NPOI.OpenXmlFormats.Wordprocessing.CT_CustomXmlCell : object {
    private CT_CustomXmlPr customXmlPrField;
    private ArrayList itemsField;
    private List`1<ItemsChoiceType27> itemsElementNameField;
    private string uriField;
    private string elementField;
    [XmlElementAttribute]
public CT_CustomXmlPr customXmlPr { get; public set; }
    [XmlElementAttribute("oMath", "NPOI.OpenXmlFormats.Shared.CT_OMath")]
[XmlElementAttribute("oMathPara", "NPOI.OpenXmlFormats.Shared.CT_OMathPara")]
[XmlElementAttribute("bookmarkEnd", "NPOI.OpenXmlFormats.Wordprocessing.CT_MarkupRange")]
[XmlElementAttribute("bookmarkStart", "NPOI.OpenXmlFormats.Wordprocessing.CT_Bookmark")]
[XmlElementAttribute("commentRangeEnd", "NPOI.OpenXmlFormats.Wordprocessing.CT_MarkupRange")]
[XmlElementAttribute("commentRangeStart", "NPOI.OpenXmlFormats.Wordprocessing.CT_MarkupRange")]
[XmlElementAttribute("customXml", "NPOI.OpenXmlFormats.Wordprocessing.CT_CustomXmlCell")]
[XmlElementAttribute("customXmlDelRangeEnd", "NPOI.OpenXmlFormats.Wordprocessing.CT_Markup")]
[XmlElementAttribute("customXmlDelRangeStart", "NPOI.OpenXmlFormats.Wordprocessing.CT_TrackChange")]
[XmlElementAttribute("customXmlInsRangeEnd", "NPOI.OpenXmlFormats.Wordprocessing.CT_Markup")]
[XmlElementAttribute("customXmlInsRangeStart", "NPOI.OpenXmlFormats.Wordprocessing.CT_TrackChange")]
[XmlElementAttribute("customXmlMoveFromRangeEnd", "NPOI.OpenXmlFormats.Wordprocessing.CT_Markup")]
[XmlElementAttribute("customXmlMoveFromRangeStart", "NPOI.OpenXmlFormats.Wordprocessing.CT_TrackChange")]
[XmlElementAttribute("customXmlMoveToRangeEnd", "NPOI.OpenXmlFormats.Wordprocessing.CT_Markup")]
[XmlElementAttribute("customXmlMoveToRangeStart", "NPOI.OpenXmlFormats.Wordprocessing.CT_TrackChange")]
[XmlElementAttribute("del", "NPOI.OpenXmlFormats.Wordprocessing.CT_RunTrackChange")]
[XmlElementAttribute("ins", "NPOI.OpenXmlFormats.Wordprocessing.CT_RunTrackChange")]
[XmlElementAttribute("moveFrom", "NPOI.OpenXmlFormats.Wordprocessing.CT_RunTrackChange")]
[XmlElementAttribute("moveFromRangeEnd", "NPOI.OpenXmlFormats.Wordprocessing.CT_MarkupRange")]
[XmlElementAttribute("moveFromRangeStart", "NPOI.OpenXmlFormats.Wordprocessing.CT_MoveBookmark")]
[XmlElementAttribute("moveTo", "NPOI.OpenXmlFormats.Wordprocessing.CT_RunTrackChange")]
[XmlElementAttribute("moveToRangeEnd", "NPOI.OpenXmlFormats.Wordprocessing.CT_MarkupRange")]
[XmlElementAttribute("moveToRangeStart", "NPOI.OpenXmlFormats.Wordprocessing.CT_MoveBookmark")]
[XmlElementAttribute("permEnd", "NPOI.OpenXmlFormats.Wordprocessing.CT_Perm")]
[XmlElementAttribute("permStart", "NPOI.OpenXmlFormats.Wordprocessing.CT_PermStart")]
[XmlElementAttribute("proofErr", "NPOI.OpenXmlFormats.Wordprocessing.CT_ProofErr")]
[XmlElementAttribute("sdt", "NPOI.OpenXmlFormats.Wordprocessing.CT_SdtCell")]
[XmlElementAttribute("tc", "NPOI.OpenXmlFormats.Wordprocessing.CT_Tc")]
[XmlChoiceIdentifierAttribute("ItemsElementName")]
public ArrayList Items { get; public set; }
    [XmlElementAttribute("ItemsElementName")]
[XmlIgnoreAttribute]
public List`1<ItemsChoiceType27> ItemsElementName { get; public set; }
    [XmlAttributeAttribute]
public string uri { get; public set; }
    [XmlAttributeAttribute]
public string element { get; public set; }
    public static CT_CustomXmlCell Parse(XmlNode node, XmlNamespaceManager namespaceManager);
    internal void Write(StreamWriter sw, string nodeName);
    public CT_CustomXmlPr get_customXmlPr();
    public void set_customXmlPr(CT_CustomXmlPr value);
    public ArrayList get_Items();
    public void set_Items(ArrayList value);
    public List`1<ItemsChoiceType27> get_ItemsElementName();
    public void set_ItemsElementName(List`1<ItemsChoiceType27> value);
    public string get_uri();
    public void set_uri(string value);
    public string get_element();
    public void set_element(string value);
}
[XmlTypeAttribute]
[XmlRootAttribute]
public class NPOI.OpenXmlFormats.Wordprocessing.CT_CustomXmlPr : object {
    private CT_String placeholderField;
    private List`1<CT_Attr> attrField;
    [XmlElementAttribute]
public CT_String placeholder { get; public set; }
    [XmlElementAttribute("attr")]
public List`1<CT_Attr> attr { get; public set; }
    public static CT_CustomXmlPr Parse(XmlNode node, XmlNamespaceManager namespaceManager);
    internal void Write(StreamWriter sw, string nodeName);
    public CT_String get_placeholder();
    public void set_placeholder(CT_String value);
    public List`1<CT_Attr> get_attr();
    public void set_attr(List`1<CT_Attr> value);
}
[XmlTypeAttribute]
[XmlRootAttribute]
public class NPOI.OpenXmlFormats.Wordprocessing.CT_CustomXmlRow : object {
    private CT_CustomXmlPr customXmlPrField;
    private ArrayList itemsField;
    private List`1<ItemsChoiceType21> itemsElementNameField;
    private string uriField;
    private string elementField;
    [XmlElementAttribute]
public CT_CustomXmlPr customXmlPr { get; public set; }
    [XmlElementAttribute("oMath", "NPOI.OpenXmlFormats.Shared.CT_OMath")]
[XmlElementAttribute("oMathPara", "NPOI.OpenXmlFormats.Shared.CT_OMathPara")]
[XmlElementAttribute("bookmarkEnd", "NPOI.OpenXmlFormats.Wordprocessing.CT_MarkupRange")]
[XmlElementAttribute("bookmarkStart", "NPOI.OpenXmlFormats.Wordprocessing.CT_Bookmark")]
[XmlElementAttribute("commentRangeEnd", "NPOI.OpenXmlFormats.Wordprocessing.CT_MarkupRange")]
[XmlElementAttribute("commentRangeStart", "NPOI.OpenXmlFormats.Wordprocessing.CT_MarkupRange")]
[XmlElementAttribute("customXml", "NPOI.OpenXmlFormats.Wordprocessing.CT_CustomXmlRow")]
[XmlElementAttribute("customXmlDelRangeEnd", "NPOI.OpenXmlFormats.Wordprocessing.CT_Markup")]
[XmlElementAttribute("customXmlDelRangeStart", "NPOI.OpenXmlFormats.Wordprocessing.CT_TrackChange")]
[XmlElementAttribute("customXmlInsRangeEnd", "NPOI.OpenXmlFormats.Wordprocessing.CT_Markup")]
[XmlElementAttribute("customXmlInsRangeStart", "NPOI.OpenXmlFormats.Wordprocessing.CT_TrackChange")]
[XmlElementAttribute("customXmlMoveFromRangeEnd", "NPOI.OpenXmlFormats.Wordprocessing.CT_Markup")]
[XmlElementAttribute("customXmlMoveFromRangeStart", "NPOI.OpenXmlFormats.Wordprocessing.CT_TrackChange")]
[XmlElementAttribute("customXmlMoveToRangeEnd", "NPOI.OpenXmlFormats.Wordprocessing.CT_Markup")]
[XmlElementAttribute("customXmlMoveToRangeStart", "NPOI.OpenXmlFormats.Wordprocessing.CT_TrackChange")]
[XmlElementAttribute("del", "NPOI.OpenXmlFormats.Wordprocessing.CT_RunTrackChange")]
[XmlElementAttribute("ins", "NPOI.OpenXmlFormats.Wordprocessing.CT_RunTrackChange")]
[XmlElementAttribute("moveFrom", "NPOI.OpenXmlFormats.Wordprocessing.CT_RunTrackChange")]
[XmlElementAttribute("moveFromRangeEnd", "NPOI.OpenXmlFormats.Wordprocessing.CT_MarkupRange")]
[XmlElementAttribute("moveFromRangeStart", "NPOI.OpenXmlFormats.Wordprocessing.CT_MoveBookmark")]
[XmlElementAttribute("moveTo", "NPOI.OpenXmlFormats.Wordprocessing.CT_RunTrackChange")]
[XmlElementAttribute("moveToRangeEnd", "NPOI.OpenXmlFormats.Wordprocessing.CT_MarkupRange")]
[XmlElementAttribute("moveToRangeStart", "NPOI.OpenXmlFormats.Wordprocessing.CT_MoveBookmark")]
[XmlElementAttribute("permEnd", "NPOI.OpenXmlFormats.Wordprocessing.CT_Perm")]
[XmlElementAttribute("permStart", "NPOI.OpenXmlFormats.Wordprocessing.CT_PermStart")]
[XmlElementAttribute("proofErr", "NPOI.OpenXmlFormats.Wordprocessing.CT_ProofErr")]
[XmlElementAttribute("sdt", "NPOI.OpenXmlFormats.Wordprocessing.CT_SdtRow")]
[XmlElementAttribute("tr", "NPOI.OpenXmlFormats.Wordprocessing.CT_Row")]
[XmlChoiceIdentifierAttribute("ItemsElementName")]
public ArrayList Items { get; public set; }
    [XmlElementAttribute("ItemsElementName")]
[XmlIgnoreAttribute]
public List`1<ItemsChoiceType21> ItemsElementName { get; public set; }
    [XmlAttributeAttribute]
public string uri { get; public set; }
    [XmlAttributeAttribute]
public string element { get; public set; }
    public static CT_CustomXmlRow Parse(XmlNode node, XmlNamespaceManager namespaceManager);
    internal void Write(StreamWriter sw, string nodeName);
    public CT_CustomXmlPr get_customXmlPr();
    public void set_customXmlPr(CT_CustomXmlPr value);
    public ArrayList get_Items();
    public void set_Items(ArrayList value);
    public List`1<ItemsChoiceType21> get_ItemsElementName();
    public void set_ItemsElementName(List`1<ItemsChoiceType21> value);
    public string get_uri();
    public void set_uri(string value);
    public string get_element();
    public void set_element(string value);
}
[XmlTypeAttribute]
[XmlRootAttribute]
public class NPOI.OpenXmlFormats.Wordprocessing.CT_CustomXmlRun : object {
    private CT_CustomXmlPr customXmlPrField;
    private ArrayList itemsField;
    private List`1<ItemsChoiceType24> itemsElementNameField;
    private string uriField;
    private string elementField;
    [XmlElementAttribute]
public CT_CustomXmlPr customXmlPr { get; public set; }
    [XmlElementAttribute("oMath", "NPOI.OpenXmlFormats.Shared.CT_OMath")]
[XmlElementAttribute("oMathPara", "NPOI.OpenXmlFormats.Shared.CT_OMathPara")]
[XmlElementAttribute("bookmarkEnd", "NPOI.OpenXmlFormats.Wordprocessing.CT_MarkupRange")]
[XmlElementAttribute("bookmarkStart", "NPOI.OpenXmlFormats.Wordprocessing.CT_Bookmark")]
[XmlElementAttribute("commentRangeEnd", "NPOI.OpenXmlFormats.Wordprocessing.CT_MarkupRange")]
[XmlElementAttribute("commentRangeStart", "NPOI.OpenXmlFormats.Wordprocessing.CT_MarkupRange")]
[XmlElementAttribute("customXml", "NPOI.OpenXmlFormats.Wordprocessing.CT_CustomXmlRun")]
[XmlElementAttribute("customXmlDelRangeEnd", "NPOI.OpenXmlFormats.Wordprocessing.CT_Markup")]
[XmlElementAttribute("customXmlDelRangeStart", "NPOI.OpenXmlFormats.Wordprocessing.CT_TrackChange")]
[XmlElementAttribute("customXmlInsRangeEnd", "NPOI.OpenXmlFormats.Wordprocessing.CT_Markup")]
[XmlElementAttribute("customXmlInsRangeStart", "NPOI.OpenXmlFormats.Wordprocessing.CT_TrackChange")]
[XmlElementAttribute("customXmlMoveFromRangeEnd", "NPOI.OpenXmlFormats.Wordprocessing.CT_Markup")]
[XmlElementAttribute("customXmlMoveFromRangeStart", "NPOI.OpenXmlFormats.Wordprocessing.CT_TrackChange")]
[XmlElementAttribute("customXmlMoveToRangeEnd", "NPOI.OpenXmlFormats.Wordprocessing.CT_Markup")]
[XmlElementAttribute("customXmlMoveToRangeStart", "NPOI.OpenXmlFormats.Wordprocessing.CT_TrackChange")]
[XmlElementAttribute("del", "NPOI.OpenXmlFormats.Wordprocessing.CT_RunTrackChange")]
[XmlElementAttribute("fldSimple", "NPOI.OpenXmlFormats.Wordprocessing.CT_SimpleField")]
[XmlElementAttribute("hyperlink", "NPOI.OpenXmlFormats.Wordprocessing.CT_Hyperlink1")]
[XmlElementAttribute("ins", "NPOI.OpenXmlFormats.Wordprocessing.CT_RunTrackChange")]
[XmlElementAttribute("moveFrom", "NPOI.OpenXmlFormats.Wordprocessing.CT_RunTrackChange")]
[XmlElementAttribute("moveFromRangeEnd", "NPOI.OpenXmlFormats.Wordprocessing.CT_MarkupRange")]
[XmlElementAttribute("moveFromRangeStart", "NPOI.OpenXmlFormats.Wordprocessing.CT_MoveBookmark")]
[XmlElementAttribute("moveTo", "NPOI.OpenXmlFormats.Wordprocessing.CT_RunTrackChange")]
[XmlElementAttribute("moveToRangeEnd", "NPOI.OpenXmlFormats.Wordprocessing.CT_MarkupRange")]
[XmlElementAttribute("moveToRangeStart", "NPOI.OpenXmlFormats.Wordprocessing.CT_MoveBookmark")]
[XmlElementAttribute("permEnd", "NPOI.OpenXmlFormats.Wordprocessing.CT_Perm")]
[XmlElementAttribute("permStart", "NPOI.OpenXmlFormats.Wordprocessing.CT_PermStart")]
[XmlElementAttribute("proofErr", "NPOI.OpenXmlFormats.Wordprocessing.CT_ProofErr")]
[XmlElementAttribute("r", "NPOI.OpenXmlFormats.Wordprocessing.CT_R")]
[XmlElementAttribute("sdt", "NPOI.OpenXmlFormats.Wordprocessing.CT_SdtRun")]
[XmlElementAttribute("smartTag", "NPOI.OpenXmlFormats.Wordprocessing.CT_SmartTagRun")]
[XmlElementAttribute("subDoc", "NPOI.OpenXmlFormats.Wordprocessing.CT_Rel")]
[XmlChoiceIdentifierAttribute("ItemsElementName")]
public ArrayList Items { get; public set; }
    [XmlElementAttribute("ItemsElementName")]
[XmlIgnoreAttribute]
public List`1<ItemsChoiceType24> ItemsElementName { get; public set; }
    [XmlAttributeAttribute]
public string uri { get; public set; }
    [XmlAttributeAttribute]
public string element { get; public set; }
    public CT_CustomXmlPr get_customXmlPr();
    public void set_customXmlPr(CT_CustomXmlPr value);
    public ArrayList get_Items();
    public void set_Items(ArrayList value);
    public List`1<ItemsChoiceType24> get_ItemsElementName();
    public void set_ItemsElementName(List`1<ItemsChoiceType24> value);
    public string get_uri();
    public void set_uri(string value);
    public string get_element();
    public void set_element(string value);
    public static CT_CustomXmlRun Parse(XmlNode node, XmlNamespaceManager namespaceManager);
    internal void Write(StreamWriter sw, string nodeName);
}
[XmlTypeAttribute]
[XmlRootAttribute]
public class NPOI.OpenXmlFormats.Wordprocessing.CT_DataBinding : object {
    private string prefixMappingsField;
    private string xpathField;
    private string storeItemIDField;
    [XmlAttributeAttribute]
public string prefixMappings { get; public set; }
    [XmlAttributeAttribute]
public string xpath { get; public set; }
    [XmlAttributeAttribute]
public string storeItemID { get; public set; }
    public static CT_DataBinding Parse(XmlNode node, XmlNamespaceManager namespaceManager);
    internal void Write(StreamWriter sw, string nodeName);
    public string get_prefixMappings();
    public void set_prefixMappings(string value);
    public string get_xpath();
    public void set_xpath(string value);
    public string get_storeItemID();
    public void set_storeItemID(string value);
}
[XmlTypeAttribute]
[XmlRootAttribute]
public class NPOI.OpenXmlFormats.Wordprocessing.CT_DecimalNumber : object {
    private string valField;
    [XmlAttributeAttribute]
public string val { get; public set; }
    public static CT_DecimalNumber Parse(XmlNode node, XmlNamespaceManager namespaceManager);
    internal void Write(StreamWriter sw, string nodeName);
    public string get_val();
    public void set_val(string value);
}
[XmlTypeAttribute]
[XmlRootAttribute]
public class NPOI.OpenXmlFormats.Wordprocessing.CT_Div : object {
    private CT_OnOff blockQuoteField;
    private CT_OnOff bodyDivField;
    private CT_SignedTwipsMeasure marLeftField;
    private CT_SignedTwipsMeasure marRightField;
    private CT_SignedTwipsMeasure marTopField;
    private CT_SignedTwipsMeasure marBottomField;
    private CT_DivBdr divBdrField;
    private List`1<CT_Divs> divsChildField;
    private string idField;
    [XmlElementAttribute]
public CT_OnOff blockQuote { get; public set; }
    [XmlElementAttribute]
public CT_OnOff bodyDiv { get; public set; }
    [XmlElementAttribute]
public CT_SignedTwipsMeasure marLeft { get; public set; }
    [XmlElementAttribute]
public CT_SignedTwipsMeasure marRight { get; public set; }
    [XmlElementAttribute]
public CT_SignedTwipsMeasure marTop { get; public set; }
    [XmlElementAttribute]
public CT_SignedTwipsMeasure marBottom { get; public set; }
    [XmlElementAttribute]
public CT_DivBdr divBdr { get; public set; }
    [XmlElementAttribute("divsChild")]
public List`1<CT_Divs> divsChild { get; public set; }
    [XmlAttributeAttribute]
public string id { get; public set; }
    public CT_OnOff get_blockQuote();
    public void set_blockQuote(CT_OnOff value);
    public CT_OnOff get_bodyDiv();
    public void set_bodyDiv(CT_OnOff value);
    public CT_SignedTwipsMeasure get_marLeft();
    public void set_marLeft(CT_SignedTwipsMeasure value);
    public CT_SignedTwipsMeasure get_marRight();
    public void set_marRight(CT_SignedTwipsMeasure value);
    public CT_SignedTwipsMeasure get_marTop();
    public void set_marTop(CT_SignedTwipsMeasure value);
    public CT_SignedTwipsMeasure get_marBottom();
    public void set_marBottom(CT_SignedTwipsMeasure value);
    public CT_DivBdr get_divBdr();
    public void set_divBdr(CT_DivBdr value);
    public List`1<CT_Divs> get_divsChild();
    public void set_divsChild(List`1<CT_Divs> value);
    public string get_id();
    public void set_id(string value);
}
[XmlTypeAttribute]
[XmlRootAttribute]
public class NPOI.OpenXmlFormats.Wordprocessing.CT_DivBdr : object {
    private CT_Border topField;
    private CT_Border leftField;
    private CT_Border bottomField;
    private CT_Border rightField;
    [XmlElementAttribute]
public CT_Border top { get; public set; }
    [XmlElementAttribute]
public CT_Border left { get; public set; }
    [XmlElementAttribute]
public CT_Border bottom { get; public set; }
    [XmlElementAttribute]
public CT_Border right { get; public set; }
    public CT_Border get_top();
    public void set_top(CT_Border value);
    public CT_Border get_left();
    public void set_left(CT_Border value);
    public CT_Border get_bottom();
    public void set_bottom(CT_Border value);
    public CT_Border get_right();
    public void set_right(CT_Border value);
}
[XmlTypeAttribute]
[XmlRootAttribute]
public class NPOI.OpenXmlFormats.Wordprocessing.CT_Divs : object {
    private List`1<CT_Div> divField;
    [XmlElementAttribute("div")]
public List`1<CT_Div> div { get; public set; }
    public List`1<CT_Div> get_div();
    public void set_div(List`1<CT_Div> value);
}
[XmlTypeAttribute]
[XmlRootAttribute]
public class NPOI.OpenXmlFormats.Wordprocessing.CT_DocDefaults : object {
    private CT_RPrDefault rPrDefaultField;
    private CT_PPrDefault pPrDefaultField;
    [XmlElementAttribute]
public CT_RPrDefault rPrDefault { get; public set; }
    [XmlElementAttribute]
public CT_PPrDefault pPrDefault { get; public set; }
    public static CT_DocDefaults Parse(XmlNode node, XmlNamespaceManager namespaceManager);
    internal void Write(StreamWriter sw, string nodeName);
    public CT_RPrDefault get_rPrDefault();
    public void set_rPrDefault(CT_RPrDefault value);
    public CT_PPrDefault get_pPrDefault();
    public void set_pPrDefault(CT_PPrDefault value);
    public bool IsSetRPrDefault();
    public CT_RPrDefault AddNewRPrDefault();
    public bool IsSetPPrDefault();
    public CT_PPrDefault AddNewPPrDefault();
}
[XmlTypeAttribute]
[XmlRootAttribute]
public class NPOI.OpenXmlFormats.Wordprocessing.CT_DocGrid : object {
    private ST_DocGrid typeField;
    private bool typeFieldSpecified;
    private string linePitchField;
    private string charSpaceField;
    [XmlAttributeAttribute]
public ST_DocGrid type { get; public set; }
    [XmlIgnoreAttribute]
public bool typeSpecified { get; public set; }
    [XmlAttributeAttribute]
public string linePitch { get; public set; }
    [XmlAttributeAttribute]
public string charSpace { get; public set; }
    public static CT_DocGrid Parse(XmlNode node, XmlNamespaceManager namespaceManager);
    internal void Write(StreamWriter sw, string nodeName);
    public ST_DocGrid get_type();
    public void set_type(ST_DocGrid value);
    public bool get_typeSpecified();
    public void set_typeSpecified(bool value);
    public string get_linePitch();
    public void set_linePitch(string value);
    public string get_charSpace();
    public void set_charSpace(string value);
}
[XmlTypeAttribute]
[XmlRootAttribute]
public class NPOI.OpenXmlFormats.Wordprocessing.CT_DocPart : object {
    private CT_DocPartPr docPartPrField;
    private CT_Body docPartBodyField;
    [XmlElementAttribute]
public CT_DocPartPr docPartPr { get; public set; }
    [XmlElementAttribute]
public CT_Body docPartBody { get; public set; }
    public CT_DocPartPr get_docPartPr();
    public void set_docPartPr(CT_DocPartPr value);
    public CT_Body get_docPartBody();
    public void set_docPartBody(CT_Body value);
}
[XmlTypeAttribute]
[XmlRootAttribute]
public class NPOI.OpenXmlFormats.Wordprocessing.CT_DocPartBehavior : object {
    private ST_DocPartBehavior valField;
    [XmlAttributeAttribute]
public ST_DocPartBehavior val { get; public set; }
    public ST_DocPartBehavior get_val();
    public void set_val(ST_DocPartBehavior value);
}
[XmlTypeAttribute]
[XmlRootAttribute]
public class NPOI.OpenXmlFormats.Wordprocessing.CT_DocPartBehaviors : object {
    private List`1<CT_DocPartBehavior> itemsField;
    [XmlElementAttribute("behavior")]
public List`1<CT_DocPartBehavior> Items { get; public set; }
    public List`1<CT_DocPartBehavior> get_Items();
    public void set_Items(List`1<CT_DocPartBehavior> value);
}
[XmlTypeAttribute]
[XmlRootAttribute]
public class NPOI.OpenXmlFormats.Wordprocessing.CT_DocPartCategory : object {
    private CT_String nameField;
    private CT_DocPartGallery galleryField;
    [XmlElementAttribute]
public CT_String name { get; public set; }
    [XmlElementAttribute]
public CT_DocPartGallery gallery { get; public set; }
    public CT_String get_name();
    public void set_name(CT_String value);
    public CT_DocPartGallery get_gallery();
    public void set_gallery(CT_DocPartGallery value);
}
[XmlTypeAttribute]
[XmlRootAttribute]
public class NPOI.OpenXmlFormats.Wordprocessing.CT_DocPartGallery : object {
    private ST_DocPartGallery valField;
    [XmlAttributeAttribute]
public ST_DocPartGallery val { get; public set; }
    public ST_DocPartGallery get_val();
    public void set_val(ST_DocPartGallery value);
}
[XmlTypeAttribute]
[XmlRootAttribute]
public class NPOI.OpenXmlFormats.Wordprocessing.CT_DocPartName : object {
    private string valField;
    private ST_OnOff decoratedField;
    private bool decoratedFieldSpecified;
    [XmlAttributeAttribute]
public string val { get; public set; }
    [XmlAttributeAttribute]
public ST_OnOff decorated { get; public set; }
    [XmlIgnoreAttribute]
public bool decoratedSpecified { get; public set; }
    public string get_val();
    public void set_val(string value);
    public ST_OnOff get_decorated();
    public void set_decorated(ST_OnOff value);
    public bool get_decoratedSpecified();
    public void set_decoratedSpecified(bool value);
}
[XmlTypeAttribute]
[XmlRootAttribute]
public class NPOI.OpenXmlFormats.Wordprocessing.CT_DocPartPr : object {
    private Object[] itemsField;
    private ItemsChoiceType11[] itemsElementNameField;
    [XmlElementAttribute("behaviors", "NPOI.OpenXmlFormats.Wordprocessing.CT_DocPartBehaviors")]
[XmlElementAttribute("category", "NPOI.OpenXmlFormats.Wordprocessing.CT_DocPartCategory")]
[XmlElementAttribute("description", "NPOI.OpenXmlFormats.Wordprocessing.CT_String")]
[XmlElementAttribute("guid", "NPOI.OpenXmlFormats.Wordprocessing.CT_Guid")]
[XmlElementAttribute("name", "NPOI.OpenXmlFormats.Wordprocessing.CT_DocPartName")]
[XmlElementAttribute("style", "NPOI.OpenXmlFormats.Wordprocessing.CT_String")]
[XmlElementAttribute("types", "NPOI.OpenXmlFormats.Wordprocessing.CT_DocPartTypes")]
[XmlChoiceIdentifierAttribute("ItemsElementName")]
public Object[] Items { get; public set; }
    [XmlElementAttribute("ItemsElementName")]
[XmlIgnoreAttribute]
public ItemsChoiceType11[] ItemsElementName { get; public set; }
    public Object[] get_Items();
    public void set_Items(Object[] value);
    public ItemsChoiceType11[] get_ItemsElementName();
    public void set_ItemsElementName(ItemsChoiceType11[] value);
}
[XmlTypeAttribute]
[XmlRootAttribute]
public class NPOI.OpenXmlFormats.Wordprocessing.CT_DocParts : object {
    private List`1<CT_DocPart> itemsField;
    [XmlElementAttribute("docPart")]
public List`1<CT_DocPart> Items { get; public set; }
    public List`1<CT_DocPart> get_Items();
    public void set_Items(List`1<CT_DocPart> value);
}
[XmlTypeAttribute]
[XmlRootAttribute]
public class NPOI.OpenXmlFormats.Wordprocessing.CT_DocPartType : object {
    private ST_DocPartType valField;
    [XmlAttributeAttribute]
public ST_DocPartType val { get; public set; }
    public ST_DocPartType get_val();
    public void set_val(ST_DocPartType value);
}
[XmlTypeAttribute]
[XmlRootAttribute]
public class NPOI.OpenXmlFormats.Wordprocessing.CT_DocPartTypes : object {
    private List`1<CT_DocPartType> itemsField;
    private ST_OnOff allField;
    private bool allFieldSpecified;
    [XmlElementAttribute("type")]
public List`1<CT_DocPartType> Items { get; public set; }
    [XmlAttributeAttribute]
public ST_OnOff all { get; public set; }
    [XmlIgnoreAttribute]
public bool allSpecified { get; public set; }
    public List`1<CT_DocPartType> get_Items();
    public void set_Items(List`1<CT_DocPartType> value);
    public ST_OnOff get_all();
    public void set_all(ST_OnOff value);
    public bool get_allSpecified();
    public void set_allSpecified(bool value);
}
[XmlTypeAttribute]
[XmlRootAttribute]
public class NPOI.OpenXmlFormats.Wordprocessing.CT_DocProtect : object {
    private ST_DocProtect editField;
    private bool editFieldSpecified;
    private ST_OnOff formattingField;
    private bool formattingFieldSpecified;
    private ST_OnOff enforcementField;
    private bool enforcementFieldSpecified;
    private Nullable`1<ST_CryptProv> cryptProviderTypeField;
    private bool cryptProviderTypeFieldSpecified;
    private Nullable`1<ST_AlgClass> cryptAlgorithmClassField;
    private bool cryptAlgorithmClassFieldSpecified;
    private Nullable`1<ST_AlgType> cryptAlgorithmTypeField;
    private bool cryptAlgorithmTypeFieldSpecified;
    private string cryptAlgorithmSidField;
    private string cryptSpinCountField;
    private string cryptProviderField;
    private Byte[] algIdExtField;
    private string algIdExtSourceField;
    private Byte[] cryptProviderTypeExtField;
    private string cryptProviderTypeExtSourceField;
    private string hashField;
    private string saltField;
    [XmlAttributeAttribute]
public ST_DocProtect edit { get; public set; }
    [XmlIgnoreAttribute]
public bool editSpecified { get; public set; }
    [XmlAttributeAttribute]
public ST_OnOff formatting { get; public set; }
    [XmlIgnoreAttribute]
public bool formattingSpecified { get; public set; }
    [XmlAttributeAttribute]
public ST_OnOff enforcement { get; public set; }
    [XmlIgnoreAttribute]
public bool enforcementSpecified { get; public set; }
    [XmlAttributeAttribute]
public Nullable`1<ST_CryptProv> cryptProviderType { get; public set; }
    [XmlIgnoreAttribute]
public bool cryptProviderTypeSpecified { get; public set; }
    [XmlAttributeAttribute]
public Nullable`1<ST_AlgClass> cryptAlgorithmClass { get; public set; }
    [XmlIgnoreAttribute]
public bool cryptAlgorithmClassSpecified { get; public set; }
    [XmlAttributeAttribute]
public Nullable`1<ST_AlgType> cryptAlgorithmType { get; public set; }
    [XmlIgnoreAttribute]
public bool cryptAlgorithmTypeSpecified { get; public set; }
    [XmlAttributeAttribute]
public string cryptAlgorithmSid { get; public set; }
    [XmlAttributeAttribute]
public string cryptSpinCount { get; public set; }
    [XmlAttributeAttribute]
public string cryptProvider { get; public set; }
    [XmlAttributeAttribute]
public Byte[] algIdExt { get; public set; }
    [XmlAttributeAttribute]
public string algIdExtSource { get; public set; }
    [XmlAttributeAttribute]
public Byte[] cryptProviderTypeExt { get; public set; }
    [XmlAttributeAttribute]
public string cryptProviderTypeExtSource { get; public set; }
    [XmlAttributeAttribute]
public string hash { get; public set; }
    [XmlAttributeAttribute]
public string salt { get; public set; }
    public static CT_DocProtect Parse(XmlNode node, XmlNamespaceManager namespaceManager);
    internal void Write(StreamWriter sw, string nodeName);
    public ST_DocProtect get_edit();
    public void set_edit(ST_DocProtect value);
    public bool get_editSpecified();
    public void set_editSpecified(bool value);
    public ST_OnOff get_formatting();
    public void set_formatting(ST_OnOff value);
    public bool get_formattingSpecified();
    public void set_formattingSpecified(bool value);
    public ST_OnOff get_enforcement();
    public void set_enforcement(ST_OnOff value);
    public bool get_enforcementSpecified();
    public void set_enforcementSpecified(bool value);
    public Nullable`1<ST_CryptProv> get_cryptProviderType();
    public void set_cryptProviderType(Nullable`1<ST_CryptProv> value);
    public bool get_cryptProviderTypeSpecified();
    public void set_cryptProviderTypeSpecified(bool value);
    public Nullable`1<ST_AlgClass> get_cryptAlgorithmClass();
    public void set_cryptAlgorithmClass(Nullable`1<ST_AlgClass> value);
    public bool get_cryptAlgorithmClassSpecified();
    public void set_cryptAlgorithmClassSpecified(bool value);
    public Nullable`1<ST_AlgType> get_cryptAlgorithmType();
    public void set_cryptAlgorithmType(Nullable`1<ST_AlgType> value);
    public bool get_cryptAlgorithmTypeSpecified();
    public void set_cryptAlgorithmTypeSpecified(bool value);
    public string get_cryptAlgorithmSid();
    public void set_cryptAlgorithmSid(string value);
    public string get_cryptSpinCount();
    public void set_cryptSpinCount(string value);
    public string get_cryptProvider();
    public void set_cryptProvider(string value);
    public Byte[] get_algIdExt();
    public void set_algIdExt(Byte[] value);
    public string get_algIdExtSource();
    public void set_algIdExtSource(string value);
    public Byte[] get_cryptProviderTypeExt();
    public void set_cryptProviderTypeExt(Byte[] value);
    public string get_cryptProviderTypeExtSource();
    public void set_cryptProviderTypeExtSource(string value);
    public string get_hash();
    public void set_hash(string value);
    public string get_salt();
    public void set_salt(string value);
    public bool IsSetCryptProviderType();
    public bool IsSetCryptAlgorithmClass();
    public bool IsSetCryptAlgorithmType();
    public bool IsSetCryptAlgorithmSid();
    public bool IsSetCryptSpinCount();
    public bool IsSetHash();
    public bool IsSetSalt();
    public void UnsetCryptProviderType();
    public void UnsetCryptAlgorithmClass();
    public void UnsetCryptAlgorithmType();
    public void UnsetCryptAlgorithmSid();
    public void UnsetCryptSpinCount();
    public void UnsetHash();
    public void UnsetSalt();
}
[XmlTypeAttribute]
[XmlRootAttribute]
public class NPOI.OpenXmlFormats.Wordprocessing.CT_DocRsids : object {
    private CT_LongHexNumber rsidRootField;
    private List`1<CT_LongHexNumber> rsidField;
    [XmlElementAttribute]
public CT_LongHexNumber rsidRoot { get; public set; }
    [XmlElementAttribute("rsid")]
public List`1<CT_LongHexNumber> rsid { get; public set; }
    public static CT_DocRsids Parse(XmlNode node, XmlNamespaceManager namespaceManager);
    internal void Write(StreamWriter sw, string nodeName);
    public CT_LongHexNumber get_rsidRoot();
    public void set_rsidRoot(CT_LongHexNumber value);
    public List`1<CT_LongHexNumber> get_rsid();
    public void set_rsid(List`1<CT_LongHexNumber> value);
}
[XmlTypeAttribute]
[XmlRootAttribute]
public class NPOI.OpenXmlFormats.Wordprocessing.CT_DocType : object {
    private ST_DocType valField;
    [XmlAttributeAttribute]
public ST_DocType val { get; public set; }
    public static CT_DocType Parse(XmlNode node, XmlNamespaceManager namespaceManager);
    internal void Write(StreamWriter sw, string nodeName);
    public ST_DocType get_val();
    public void set_val(ST_DocType value);
}
[XmlTypeAttribute]
[XmlRootAttribute("document")]
public class NPOI.OpenXmlFormats.Wordprocessing.CT_Document : CT_DocumentBase {
    private CT_Body bodyField;
    [XmlElementAttribute]
public CT_Body body { get; public set; }
    public static CT_Document Parse(XmlNode node, XmlNamespaceManager namespaceManager);
    internal void Write(StreamWriter sw);
    public CT_Body get_body();
    public void set_body(CT_Body value);
    public void AddNewBody();
}
[XmlIncludeAttribute("NPOI.OpenXmlFormats.Wordprocessing.CT_GlossaryDocument")]
[XmlIncludeAttribute("NPOI.OpenXmlFormats.Wordprocessing.CT_Document")]
[XmlTypeAttribute]
[XmlRootAttribute]
public class NPOI.OpenXmlFormats.Wordprocessing.CT_DocumentBase : object {
    private CT_Background backgroundField;
    [XmlElementAttribute]
public CT_Background background { get; public set; }
    public CT_Background get_background();
    public void set_background(CT_Background value);
}
[XmlTypeAttribute]
[XmlRootAttribute]
public class NPOI.OpenXmlFormats.Wordprocessing.CT_DocVar : object {
    private string nameField;
    private string valField;
    [XmlAttributeAttribute]
public string name { get; public set; }
    [XmlAttributeAttribute]
public string val { get; public set; }
    public static CT_DocVar Parse(XmlNode node, XmlNamespaceManager namespaceManager);
    internal void Write(StreamWriter sw, string nodeName);
    public string get_name();
    public void set_name(string value);
    public string get_val();
    public void set_val(string value);
}
[XmlTypeAttribute]
[XmlRootAttribute]
public class NPOI.OpenXmlFormats.Wordprocessing.CT_DocVars : object {
    private List`1<CT_DocVar> docVarField;
    [XmlElementAttribute("docVar")]
public List`1<CT_DocVar> docVar { get; public set; }
    public List`1<CT_DocVar> get_docVar();
    public void set_docVar(List`1<CT_DocVar> value);
    public static CT_DocVars Parse(XmlNode node, XmlNamespaceManager namespaceManager);
    internal void Write(StreamWriter sw, string nodeName);
}
[XmlTypeAttribute]
[XmlRootAttribute]
public class NPOI.OpenXmlFormats.Wordprocessing.CT_EastAsianLayout : object {
    private string idField;
    private ST_OnOff combineField;
    private bool combineFieldSpecified;
    private ST_CombineBrackets combineBracketsField;
    private bool combineBracketsFieldSpecified;
    private ST_OnOff vertField;
    private bool vertFieldSpecified;
    private ST_OnOff vertCompressField;
    private bool vertCompressFieldSpecified;
    [XmlAttributeAttribute]
public string id { get; public set; }
    [XmlAttributeAttribute]
public ST_OnOff combine { get; public set; }
    [XmlIgnoreAttribute]
public bool combineSpecified { get; public set; }
    [XmlAttributeAttribute]
public ST_CombineBrackets combineBrackets { get; public set; }
    [XmlIgnoreAttribute]
public bool combineBracketsSpecified { get; public set; }
    [XmlAttributeAttribute]
public ST_OnOff vert { get; public set; }
    [XmlIgnoreAttribute]
public bool vertSpecified { get; public set; }
    [XmlAttributeAttribute]
public ST_OnOff vertCompress { get; public set; }
    [XmlIgnoreAttribute]
public bool vertCompressSpecified { get; public set; }
    public static CT_EastAsianLayout Parse(XmlNode node, XmlNamespaceManager namespaceManager);
    internal void Write(StreamWriter sw, string nodeName);
    public string get_id();
    public void set_id(string value);
    public ST_OnOff get_combine();
    public void set_combine(ST_OnOff value);
    public bool get_combineSpecified();
    public void set_combineSpecified(bool value);
    public ST_CombineBrackets get_combineBrackets();
    public void set_combineBrackets(ST_CombineBrackets value);
    public bool get_combineBracketsSpecified();
    public void set_combineBracketsSpecified(bool value);
    public ST_OnOff get_vert();
    public void set_vert(ST_OnOff value);
    public bool get_vertSpecified();
    public void set_vertSpecified(bool value);
    public ST_OnOff get_vertCompress();
    public void set_vertCompress(ST_OnOff value);
    public bool get_vertCompressSpecified();
    public void set_vertCompressSpecified(bool value);
}
[XmlTypeAttribute]
[XmlRootAttribute]
public class NPOI.OpenXmlFormats.Wordprocessing.CT_EdnDocProps : CT_EdnProps {
    private List`1<CT_FtnEdnSepRef> endnoteField;
    [XmlElementAttribute("endnote")]
public List`1<CT_FtnEdnSepRef> endnote { get; public set; }
    public static CT_EdnDocProps Parse(XmlNode node, XmlNamespaceManager namespaceManager);
    internal void Write(StreamWriter sw, string nodeName);
    public List`1<CT_FtnEdnSepRef> get_endnote();
    public void set_endnote(List`1<CT_FtnEdnSepRef> value);
}
[XmlTypeAttribute]
[XmlRootAttribute]
public class NPOI.OpenXmlFormats.Wordprocessing.CT_EdnPos : object {
    private ST_EdnPos valField;
    [XmlAttributeAttribute]
public ST_EdnPos val { get; public set; }
    public static CT_EdnPos Parse(XmlNode node, XmlNamespaceManager namespaceManager);
    internal void Write(StreamWriter sw, string nodeName);
    public ST_EdnPos get_val();
    public void set_val(ST_EdnPos value);
}
[XmlIncludeAttribute("NPOI.OpenXmlFormats.Wordprocessing.CT_EdnDocProps")]
[XmlTypeAttribute]
public class NPOI.OpenXmlFormats.Wordprocessing.CT_EdnProps : object {
    private CT_EdnPos posField;
    private CT_NumFmt numFmtField;
    private CT_DecimalNumber numStartField;
    private CT_NumRestart numRestartField;
    [XmlElementAttribute]
public CT_EdnPos pos { get; public set; }
    [XmlElementAttribute]
public CT_NumFmt numFmt { get; public set; }
    [XmlElementAttribute]
public CT_DecimalNumber numStart { get; public set; }
    [XmlElementAttribute]
public CT_NumRestart numRestart { get; public set; }
    public static CT_EdnProps Parse(XmlNode node, XmlNamespaceManager namespaceManager);
    internal void Write(StreamWriter sw, string nodeName);
    public CT_EdnPos get_pos();
    public void set_pos(CT_EdnPos value);
    public CT_NumFmt get_numFmt();
    public void set_numFmt(CT_NumFmt value);
    public CT_DecimalNumber get_numStart();
    public void set_numStart(CT_DecimalNumber value);
    public CT_NumRestart get_numRestart();
    public void set_numRestart(CT_NumRestart value);
}
[XmlTypeAttribute]
[XmlRootAttribute]
public class NPOI.OpenXmlFormats.Wordprocessing.CT_Em : object {
    private ST_Em valField;
    [XmlAttributeAttribute]
public ST_Em val { get; public set; }
    public static CT_Em Parse(XmlNode node, XmlNamespaceManager namespaceManager);
    internal void Write(StreamWriter sw, string nodeName);
    public ST_Em get_val();
    public void set_val(ST_Em value);
}
[XmlTypeAttribute]
[XmlRootAttribute]
public class NPOI.OpenXmlFormats.Wordprocessing.CT_Empty : object {
}
public class NPOI.OpenXmlFormats.Wordprocessing.CT_Endnotes : object {
    private List`1<CT_FtnEdn> endnoteField;
    [XmlElementAttribute("endnote")]
public List`1<CT_FtnEdn> endnote { get; public set; }
    public static CT_Endnotes Parse(XmlNode node, XmlNamespaceManager namespaceManager);
    internal void Write(StreamWriter sw);
    public List`1<CT_FtnEdn> get_endnote();
    public void set_endnote(List`1<CT_FtnEdn> value);
}
[XmlTypeAttribute]
[XmlRootAttribute]
public class NPOI.OpenXmlFormats.Wordprocessing.CT_FFCheckBox : object {
    private object itemField;
    private CT_OnOff defaultField;
    private CT_OnOff checkedField;
    [XmlElementAttribute("size", "NPOI.OpenXmlFormats.Wordprocessing.CT_HpsMeasure")]
[XmlElementAttribute("sizeAuto", "NPOI.OpenXmlFormats.Wordprocessing.CT_OnOff")]
public object Item { get; public set; }
    [XmlElementAttribute]
public CT_OnOff default { get; public set; }
    [XmlElementAttribute]
public CT_OnOff checked { get; public set; }
    public object get_Item();
    public void set_Item(object value);
    public CT_OnOff get_default();
    public void set_default(CT_OnOff value);
    public CT_OnOff get_checked();
    public void set_checked(CT_OnOff value);
    public static CT_FFCheckBox Parse(XmlNode node, XmlNamespaceManager namespaceManager);
    internal void Write(StreamWriter sw, string nodeName);
}
[XmlTypeAttribute]
[XmlRootAttribute]
public class NPOI.OpenXmlFormats.Wordprocessing.CT_FFData : object {
    private List`1<object> itemsField;
    private List`1<FFDataItemsType> itemsElementNameField;
    [XmlElementAttribute("calcOnExit", "NPOI.OpenXmlFormats.Wordprocessing.CT_OnOff")]
[XmlElementAttribute("checkBox", "NPOI.OpenXmlFormats.Wordprocessing.CT_FFCheckBox")]
[XmlElementAttribute("ddList", "NPOI.OpenXmlFormats.Wordprocessing.CT_FFDDList")]
[XmlElementAttribute("enabled", "NPOI.OpenXmlFormats.Wordprocessing.CT_OnOff")]
[XmlElementAttribute("entryMacro", "NPOI.OpenXmlFormats.Wordprocessing.CT_MacroName")]
[XmlElementAttribute("exitMacro", "NPOI.OpenXmlFormats.Wordprocessing.CT_MacroName")]
[XmlElementAttribute("helpText", "NPOI.OpenXmlFormats.Wordprocessing.CT_FFHelpText")]
[XmlElementAttribute("name", "NPOI.OpenXmlFormats.Wordprocessing.CT_FFName")]
[XmlElementAttribute("statusText", "NPOI.OpenXmlFormats.Wordprocessing.CT_FFStatusText")]
[XmlElementAttribute("textInput", "NPOI.OpenXmlFormats.Wordprocessing.CT_FFTextInput")]
[XmlChoiceIdentifierAttribute("ItemsElementName")]
public Object[] Items { get; public set; }
    [XmlElementAttribute("ItemsElementName")]
[XmlIgnoreAttribute]
public FFDataItemsType[] ItemsElementName { get; public set; }
    public Object[] get_Items();
    public void set_Items(Object[] value);
    public FFDataItemsType[] get_ItemsElementName();
    public void set_ItemsElementName(FFDataItemsType[] value);
    internal static CT_FFData Parse(XmlNode node, XmlNamespaceManager namespaceManager);
    internal void Write(StreamWriter sw, string nodeName);
    private void AddNewObject(object obj, FFDataItemsType type);
    private List`1<T> GetObjectList(FFDataItemsType type);
    private int SizeOfObjectArray(FFDataItemsType type);
    private T GetObjectArray(int p, FFDataItemsType type);
    private T InsertNewObject(FFDataItemsType type, int p);
    private T AddNewObject(FFDataItemsType type);
    private void SetObjectArray(FFDataItemsType type, int p, T obj);
    private int GetObjectIndex(FFDataItemsType type, int p);
    private void RemoveObject(FFDataItemsType type, int p);
    public List`1<CT_FFCheckBox> GetCheckBoxList();
}
[XmlTypeAttribute]
[XmlRootAttribute]
public class NPOI.OpenXmlFormats.Wordprocessing.CT_FFDDList : object {
    private CT_DecimalNumber resultField;
    private CT_DecimalNumber defaultField;
    private List`1<CT_String> listEntryField;
    [XmlElementAttribute]
public CT_DecimalNumber result { get; public set; }
    [XmlElementAttribute]
public CT_DecimalNumber default { get; public set; }
    [XmlElementAttribute("listEntry")]
public List`1<CT_String> listEntry { get; public set; }
    public CT_DecimalNumber get_result();
    public void set_result(CT_DecimalNumber value);
    public CT_DecimalNumber get_default();
    public void set_default(CT_DecimalNumber value);
    public List`1<CT_String> get_listEntry();
    public void set_listEntry(List`1<CT_String> value);
    public static CT_FFDDList Parse(XmlNode node, XmlNamespaceManager namespaceManager);
    internal void Write(StreamWriter sw, string nodeName);
}
[XmlTypeAttribute]
[XmlRootAttribute]
public class NPOI.OpenXmlFormats.Wordprocessing.CT_FFHelpText : object {
    private ST_InfoTextType typeField;
    private bool typeFieldSpecified;
    private string valField;
    [XmlAttributeAttribute]
public ST_InfoTextType type { get; public set; }
    [XmlIgnoreAttribute]
public bool typeSpecified { get; public set; }
    [XmlAttributeAttribute]
public string val { get; public set; }
    public ST_InfoTextType get_type();
    public void set_type(ST_InfoTextType value);
    public bool get_typeSpecified();
    public void set_typeSpecified(bool value);
    public string get_val();
    public void set_val(string value);
    public static CT_FFHelpText Parse(XmlNode node, XmlNamespaceManager namespaceManager);
    internal void Write(StreamWriter sw, string nodeName);
}
[XmlTypeAttribute]
[XmlRootAttribute]
public class NPOI.OpenXmlFormats.Wordprocessing.CT_FFName : object {
    private string valField;
    [XmlAttributeAttribute]
public string val { get; public set; }
    public string get_val();
    public void set_val(string value);
    public static CT_FFName Parse(XmlNode node, XmlNamespaceManager namespaceManager);
    internal void Write(StreamWriter sw, string nodeName);
}
[XmlTypeAttribute]
[XmlRootAttribute]
public class NPOI.OpenXmlFormats.Wordprocessing.CT_FFStatusText : object {
    private ST_InfoTextType typeField;
    private bool typeFieldSpecified;
    private string valField;
    [XmlAttributeAttribute]
public ST_InfoTextType type { get; public set; }
    [XmlIgnoreAttribute]
public bool typeSpecified { get; public set; }
    [XmlAttributeAttribute]
public string val { get; public set; }
    public ST_InfoTextType get_type();
    public void set_type(ST_InfoTextType value);
    public bool get_typeSpecified();
    public void set_typeSpecified(bool value);
    public string get_val();
    public void set_val(string value);
    public static CT_FFStatusText Parse(XmlNode node, XmlNamespaceManager namespaceManager);
    internal void Write(StreamWriter sw, string nodeName);
}
[XmlTypeAttribute]
[XmlRootAttribute]
public class NPOI.OpenXmlFormats.Wordprocessing.CT_FFTextInput : object {
    private CT_FFTextType typeField;
    private CT_String defaultField;
    private CT_DecimalNumber maxLengthField;
    private CT_String formatField;
    [XmlElementAttribute]
public CT_FFTextType type { get; public set; }
    [XmlElementAttribute]
public CT_String default { get; public set; }
    [XmlElementAttribute]
public CT_DecimalNumber maxLength { get; public set; }
    [XmlElementAttribute]
public CT_String format { get; public set; }
    public CT_FFTextType get_type();
    public void set_type(CT_FFTextType value);
    public CT_String get_default();
    public void set_default(CT_String value);
    public CT_DecimalNumber get_maxLength();
    public void set_maxLength(CT_DecimalNumber value);
    public CT_String get_format();
    public void set_format(CT_String value);
    public static CT_FFTextInput Parse(XmlNode node, XmlNamespaceManager namespaceManager);
    internal void Write(StreamWriter sw, string nodeName);
}
[XmlTypeAttribute]
[XmlRootAttribute]
public class NPOI.OpenXmlFormats.Wordprocessing.CT_FFTextType : object {
    private ST_FFTextType valField;
    [XmlAttributeAttribute]
public ST_FFTextType val { get; public set; }
    public ST_FFTextType get_val();
    public void set_val(ST_FFTextType value);
    public static CT_FFTextType Parse(XmlNode node, XmlNamespaceManager namespaceManager);
    internal void Write(StreamWriter sw, string nodeName);
}
[XmlTypeAttribute]
[XmlRootAttribute]
public class NPOI.OpenXmlFormats.Wordprocessing.CT_FitText : object {
    private ulong valField;
    private string idField;
    [XmlAttributeAttribute]
public ulong val { get; public set; }
    [XmlAttributeAttribute]
public string id { get; public set; }
    public static CT_FitText Parse(XmlNode node, XmlNamespaceManager namespaceManager);
    internal void Write(StreamWriter sw, string nodeName);
    public ulong get_val();
    public void set_val(ulong value);
    public string get_id();
    public void set_id(string value);
}
[XmlTypeAttribute]
[XmlRootAttribute]
public class NPOI.OpenXmlFormats.Wordprocessing.CT_FldChar : object {
    private ST_FldCharType fldCharTypeField;
    private ST_OnOff fldLockField;
    private bool fldLockFieldSpecified;
    private ST_OnOff dirtyField;
    private bool dirtyFieldSpecified;
    private CT_FFData ffDataField;
    private CT_Text fldDataField;
    private CT_TrackChangeNumbering numberingChangeField;
    public CT_FFData ffData { get; public set; }
    public CT_Text fldData { get; public set; }
    public CT_TrackChangeNumbering numberingChange { get; public set; }
    [XmlAttributeAttribute]
public ST_FldCharType fldCharType { get; public set; }
    [XmlAttributeAttribute]
public ST_OnOff fldLock { get; public set; }
    [XmlIgnoreAttribute]
public bool fldLockSpecified { get; public set; }
    [XmlAttributeAttribute]
public ST_OnOff dirty { get; public set; }
    [XmlIgnoreAttribute]
public bool dirtySpecified { get; public set; }
    public CT_FFData get_ffData();
    public void set_ffData(CT_FFData value);
    public CT_Text get_fldData();
    public void set_fldData(CT_Text value);
    public CT_TrackChangeNumbering get_numberingChange();
    public void set_numberingChange(CT_TrackChangeNumbering value);
    public static CT_FldChar Parse(XmlNode node, XmlNamespaceManager namespaceManager);
    internal void Write(StreamWriter sw, string nodeName);
    public ST_FldCharType get_fldCharType();
    public void set_fldCharType(ST_FldCharType value);
    public ST_OnOff get_fldLock();
    public void set_fldLock(ST_OnOff value);
    public bool get_fldLockSpecified();
    public void set_fldLockSpecified(bool value);
    public ST_OnOff get_dirty();
    public void set_dirty(ST_OnOff value);
    public bool get_dirtySpecified();
    public void set_dirtySpecified(bool value);
}
[XmlTypeAttribute]
[XmlRootAttribute]
public class NPOI.OpenXmlFormats.Wordprocessing.CT_Font : object {
    private CT_String altNameField;
    private CT_Panose panose1Field;
    private CT_UcharHexNumber charsetField;
    private CT_FontFamily familyField;
    private CT_OnOff notTrueTypeField;
    private CT_Pitch pitchField;
    private CT_FontSig sigField;
    private CT_FontRel embedRegularField;
    private CT_FontRel embedBoldField;
    private CT_FontRel embedItalicField;
    private CT_FontRel embedBoldItalicField;
    private string nameField;
    [XmlElementAttribute]
public CT_String altName { get; public set; }
    [XmlElementAttribute]
public CT_Panose panose1 { get; public set; }
    [XmlElementAttribute]
public CT_UcharHexNumber charset { get; public set; }
    [XmlElementAttribute]
public CT_FontFamily family { get; public set; }
    [XmlElementAttribute]
public CT_OnOff notTrueType { get; public set; }
    [XmlElementAttribute]
public CT_Pitch pitch { get; public set; }
    [XmlElementAttribute]
public CT_FontSig sig { get; public set; }
    [XmlElementAttribute]
public CT_FontRel embedRegular { get; public set; }
    [XmlElementAttribute]
public CT_FontRel embedBold { get; public set; }
    [XmlElementAttribute]
public CT_FontRel embedItalic { get; public set; }
    [XmlElementAttribute]
public CT_FontRel embedBoldItalic { get; public set; }
    [XmlAttributeAttribute]
public string name { get; public set; }
    public CT_String get_altName();
    public void set_altName(CT_String value);
    public CT_Panose get_panose1();
    public void set_panose1(CT_Panose value);
    public CT_UcharHexNumber get_charset();
    public void set_charset(CT_UcharHexNumber value);
    public CT_FontFamily get_family();
    public void set_family(CT_FontFamily value);
    public CT_OnOff get_notTrueType();
    public void set_notTrueType(CT_OnOff value);
    public CT_Pitch get_pitch();
    public void set_pitch(CT_Pitch value);
    public CT_FontSig get_sig();
    public void set_sig(CT_FontSig value);
    public CT_FontRel get_embedRegular();
    public void set_embedRegular(CT_FontRel value);
    public CT_FontRel get_embedBold();
    public void set_embedBold(CT_FontRel value);
    public CT_FontRel get_embedItalic();
    public void set_embedItalic(CT_FontRel value);
    public CT_FontRel get_embedBoldItalic();
    public void set_embedBoldItalic(CT_FontRel value);
    public string get_name();
    public void set_name(string value);
}
[XmlTypeAttribute]
[XmlRootAttribute]
public class NPOI.OpenXmlFormats.Wordprocessing.CT_FontFamily : object {
    private ST_FontFamily valField;
    [XmlAttributeAttribute]
public ST_FontFamily val { get; public set; }
    public ST_FontFamily get_val();
    public void set_val(ST_FontFamily value);
}
[XmlTypeAttribute]
[XmlRootAttribute]
public class NPOI.OpenXmlFormats.Wordprocessing.CT_FontRel : CT_Rel {
    private string fontKeyField;
    private ST_OnOff subsettedField;
    private bool subsettedFieldSpecified;
    [XmlAttributeAttribute]
public string fontKey { get; public set; }
    [XmlAttributeAttribute]
public ST_OnOff subsetted { get; public set; }
    [XmlIgnoreAttribute]
public bool subsettedSpecified { get; public set; }
    public string get_fontKey();
    public void set_fontKey(string value);
    public ST_OnOff get_subsetted();
    public void set_subsetted(ST_OnOff value);
    public bool get_subsettedSpecified();
    public void set_subsettedSpecified(bool value);
}
[XmlTypeAttribute]
[XmlRootAttribute]
public class NPOI.OpenXmlFormats.Wordprocessing.CT_Fonts : object {
    private ST_Hint hintField;
    private bool hintFieldSpecified;
    private string asciiField;
    private string hAnsiField;
    private string eastAsiaField;
    private string csField;
    private Nullable`1<ST_Theme> asciiThemeField;
    private Nullable`1<ST_Theme> hAnsiThemeField;
    private Nullable`1<ST_Theme> eastAsiaThemeField;
    private Nullable`1<ST_Theme> csthemeField;
    [XmlAttributeAttribute]
public ST_Hint hint { get; public set; }
    [XmlIgnoreAttribute]
public bool hintSpecified { get; public set; }
    [XmlAttributeAttribute]
public string ascii { get; public set; }
    [XmlAttributeAttribute]
public string hAnsi { get; public set; }
    [XmlAttributeAttribute]
public string eastAsia { get; public set; }
    [XmlAttributeAttribute]
public string cs { get; public set; }
    public Nullable`1<ST_Theme> asciiTheme { get; public set; }
    public Nullable`1<ST_Theme> hAnsiTheme { get; public set; }
    public Nullable`1<ST_Theme> eastAsiaTheme { get; public set; }
    public Nullable`1<ST_Theme> cstheme { get; public set; }
    public static CT_Fonts Parse(XmlNode node, XmlNamespaceManager namespaceManager);
    internal void Write(StreamWriter sw, string nodeName);
    public ST_Hint get_hint();
    public void set_hint(ST_Hint value);
    public bool get_hintSpecified();
    public void set_hintSpecified(bool value);
    public string get_ascii();
    public void set_ascii(string value);
    public string get_hAnsi();
    public void set_hAnsi(string value);
    public string get_eastAsia();
    public void set_eastAsia(string value);
    public string get_cs();
    public void set_cs(string value);
    public Nullable`1<ST_Theme> get_asciiTheme();
    public void set_asciiTheme(Nullable`1<ST_Theme> value);
    public Nullable`1<ST_Theme> get_hAnsiTheme();
    public void set_hAnsiTheme(Nullable`1<ST_Theme> value);
    public Nullable`1<ST_Theme> get_eastAsiaTheme();
    public void set_eastAsiaTheme(Nullable`1<ST_Theme> value);
    public Nullable`1<ST_Theme> get_cstheme();
    public void set_cstheme(Nullable`1<ST_Theme> value);
    public bool IsSetHAnsi();
    public bool IsSetCs();
    public bool IsSetEastAsia();
}
[XmlTypeAttribute]
[XmlRootAttribute]
public class NPOI.OpenXmlFormats.Wordprocessing.CT_FontSig : object {
    private Byte[] usb0Field;
    private Byte[] usb1Field;
    private Byte[] usb2Field;
    private Byte[] usb3Field;
    private Byte[] csb0Field;
    private Byte[] csb1Field;
    [XmlAttributeAttribute]
public Byte[] usb0 { get; public set; }
    [XmlAttributeAttribute]
public Byte[] usb1 { get; public set; }
    [XmlAttributeAttribute]
public Byte[] usb2 { get; public set; }
    [XmlAttributeAttribute]
public Byte[] usb3 { get; public set; }
    [XmlAttributeAttribute]
public Byte[] csb0 { get; public set; }
    [XmlAttributeAttribute]
public Byte[] csb1 { get; public set; }
    public Byte[] get_usb0();
    public void set_usb0(Byte[] value);
    public Byte[] get_usb1();
    public void set_usb1(Byte[] value);
    public Byte[] get_usb2();
    public void set_usb2(Byte[] value);
    public Byte[] get_usb3();
    public void set_usb3(Byte[] value);
    public Byte[] get_csb0();
    public void set_csb0(Byte[] value);
    public Byte[] get_csb1();
    public void set_csb1(Byte[] value);
}
[XmlTypeAttribute]
[XmlRootAttribute("fonts")]
public class NPOI.OpenXmlFormats.Wordprocessing.CT_FontsList : object {
    private List`1<CT_Font> fontField;
    [XmlElementAttribute("font")]
public List`1<CT_Font> font { get; public set; }
    public List`1<CT_Font> get_font();
    public void set_font(List`1<CT_Font> value);
}
public class NPOI.OpenXmlFormats.Wordprocessing.CT_Footnotes : object {
    private List`1<CT_FtnEdn> footnoteField;
    [XmlElementAttribute("footnote")]
public List`1<CT_FtnEdn> footnote { get; public set; }
    public int SizeOfFootnoteArray { get; }
    public static CT_Footnotes Parse(XmlNode node, XmlNamespaceManager namespaceManager);
    internal void Write(StreamWriter sw);
    public List`1<CT_FtnEdn> get_footnote();
    public void set_footnote(List`1<CT_FtnEdn> value);
    public CT_FtnEdn AddNewFootnote();
    public void RemoveFootnote(int pos);
    public int get_SizeOfFootnoteArray();
}
[XmlTypeAttribute]
[XmlRootAttribute]
public class NPOI.OpenXmlFormats.Wordprocessing.CT_Frame : object {
    private CT_String szField;
    private CT_String nameField;
    private CT_Rel sourceFileNameField;
    private CT_PixelsMeasure marWField;
    private CT_PixelsMeasure marHField;
    private CT_FrameScrollbar scrollbarField;
    private CT_OnOff noResizeAllowedField;
    private CT_OnOff linkedToFileField;
    [XmlElementAttribute]
public CT_String sz { get; public set; }
    [XmlElementAttribute]
public CT_String name { get; public set; }
    [XmlElementAttribute]
public CT_Rel sourceFileName { get; public set; }
    [XmlElementAttribute]
public CT_PixelsMeasure marW { get; public set; }
    [XmlElementAttribute]
public CT_PixelsMeasure marH { get; public set; }
    [XmlElementAttribute]
public CT_FrameScrollbar scrollbar { get; public set; }
    [XmlElementAttribute]
public CT_OnOff noResizeAllowed { get; public set; }
    [XmlElementAttribute]
public CT_OnOff linkedToFile { get; public set; }
    public CT_String get_sz();
    public void set_sz(CT_String value);
    public CT_String get_name();
    public void set_name(CT_String value);
    public CT_Rel get_sourceFileName();
    public void set_sourceFileName(CT_Rel value);
    public CT_PixelsMeasure get_marW();
    public void set_marW(CT_PixelsMeasure value);
    public CT_PixelsMeasure get_marH();
    public void set_marH(CT_PixelsMeasure value);
    public CT_FrameScrollbar get_scrollbar();
    public void set_scrollbar(CT_FrameScrollbar value);
    public CT_OnOff get_noResizeAllowed();
    public void set_noResizeAllowed(CT_OnOff value);
    public CT_OnOff get_linkedToFile();
    public void set_linkedToFile(CT_OnOff value);
}
[XmlTypeAttribute]
[XmlRootAttribute]
public class NPOI.OpenXmlFormats.Wordprocessing.CT_FrameLayout : object {
    private ST_FrameLayout valField;
    [XmlAttributeAttribute]
public ST_FrameLayout val { get; public set; }
    public ST_FrameLayout get_val();
    public void set_val(ST_FrameLayout value);
}
[XmlTypeAttribute]
[XmlRootAttribute]
public class NPOI.OpenXmlFormats.Wordprocessing.CT_FramePr : object {
    private ST_DropCap dropCapField;
    private bool dropCapFieldSpecified;
    private string linesField;
    private ulong wField;
    private bool wFieldSpecified;
    private ulong hField;
    private bool hFieldSpecified;
    private ulong vSpaceField;
    private bool vSpaceFieldSpecified;
    private ulong hSpaceField;
    private bool hSpaceFieldSpecified;
    private ST_Wrap wrapField;
    private bool wrapFieldSpecified;
    private ST_HAnchor hAnchorField;
    private bool hAnchorFieldSpecified;
    private ST_VAnchor vAnchorField;
    private bool vAnchorFieldSpecified;
    private string xField;
    private ST_XAlign xAlignField;
    private bool xAlignFieldSpecified;
    private string yField;
    private ST_YAlign yAlignField;
    private bool yAlignFieldSpecified;
    private ST_HeightRule hRuleField;
    private bool hRuleFieldSpecified;
    private ST_OnOff anchorLockField;
    private bool anchorLockFieldSpecified;
    [XmlAttributeAttribute]
public ST_DropCap dropCap { get; public set; }
    [XmlIgnoreAttribute]
public bool dropCapSpecified { get; public set; }
    [XmlAttributeAttribute]
public string lines { get; public set; }
    [XmlAttributeAttribute]
public ulong w { get; public set; }
    [XmlIgnoreAttribute]
public bool wSpecified { get; public set; }
    [XmlAttributeAttribute]
public ulong h { get; public set; }
    [XmlIgnoreAttribute]
public bool hSpecified { get; public set; }
    [XmlAttributeAttribute]
public ulong vSpace { get; public set; }
    [XmlIgnoreAttribute]
public bool vSpaceSpecified { get; public set; }
    [XmlAttributeAttribute]
public ulong hSpace { get; public set; }
    [XmlIgnoreAttribute]
public bool hSpaceSpecified { get; public set; }
    [XmlAttributeAttribute]
public ST_Wrap wrap { get; public set; }
    [XmlIgnoreAttribute]
public bool wrapSpecified { get; public set; }
    [XmlAttributeAttribute]
public ST_HAnchor hAnchor { get; public set; }
    [XmlIgnoreAttribute]
public bool hAnchorSpecified { get; public set; }
    [XmlAttributeAttribute]
public ST_VAnchor vAnchor { get; public set; }
    [XmlIgnoreAttribute]
public bool vAnchorSpecified { get; public set; }
    [XmlAttributeAttribute]
public string x { get; public set; }
    [XmlAttributeAttribute]
public ST_XAlign xAlign { get; public set; }
    [XmlIgnoreAttribute]
public bool xAlignSpecified { get; public set; }
    [XmlAttributeAttribute]
public string y { get; public set; }
    [XmlAttributeAttribute]
public ST_YAlign yAlign { get; public set; }
    [XmlIgnoreAttribute]
public bool yAlignSpecified { get; public set; }
    [XmlAttributeAttribute]
public ST_HeightRule hRule { get; public set; }
    [XmlIgnoreAttribute]
public bool hRuleSpecified { get; public set; }
    [XmlAttributeAttribute]
public ST_OnOff anchorLock { get; public set; }
    [XmlIgnoreAttribute]
public bool anchorLockSpecified { get; public set; }
    public static CT_FramePr Parse(XmlNode node, XmlNamespaceManager namespaceManager);
    internal void Write(StreamWriter sw, string nodeName);
    public ST_DropCap get_dropCap();
    public void set_dropCap(ST_DropCap value);
    public bool get_dropCapSpecified();
    public void set_dropCapSpecified(bool value);
    public string get_lines();
    public void set_lines(string value);
    public ulong get_w();
    public void set_w(ulong value);
    public bool get_wSpecified();
    public void set_wSpecified(bool value);
    public ulong get_h();
    public void set_h(ulong value);
    public bool get_hSpecified();
    public void set_hSpecified(bool value);
    public ulong get_vSpace();
    public void set_vSpace(ulong value);
    public bool get_vSpaceSpecified();
    public void set_vSpaceSpecified(bool value);
    public ulong get_hSpace();
    public void set_hSpace(ulong value);
    public bool get_hSpaceSpecified();
    public void set_hSpaceSpecified(bool value);
    public ST_Wrap get_wrap();
    public void set_wrap(ST_Wrap value);
    public bool get_wrapSpecified();
    public void set_wrapSpecified(bool value);
    public ST_HAnchor get_hAnchor();
    public void set_hAnchor(ST_HAnchor value);
    public bool get_hAnchorSpecified();
    public void set_hAnchorSpecified(bool value);
    public ST_VAnchor get_vAnchor();
    public void set_vAnchor(ST_VAnchor value);
    public bool get_vAnchorSpecified();
    public void set_vAnchorSpecified(bool value);
    public string get_x();
    public void set_x(string value);
    public ST_XAlign get_xAlign();
    public void set_xAlign(ST_XAlign value);
    public bool get_xAlignSpecified();
    public void set_xAlignSpecified(bool value);
    public string get_y();
    public void set_y(string value);
    public ST_YAlign get_yAlign();
    public void set_yAlign(ST_YAlign value);
    public bool get_yAlignSpecified();
    public void set_yAlignSpecified(bool value);
    public ST_HeightRule get_hRule();
    public void set_hRule(ST_HeightRule value);
    public bool get_hRuleSpecified();
    public void set_hRuleSpecified(bool value);
    public ST_OnOff get_anchorLock();
    public void set_anchorLock(ST_OnOff value);
    public bool get_anchorLockSpecified();
    public void set_anchorLockSpecified(bool value);
}
[XmlTypeAttribute]
[XmlRootAttribute]
public class NPOI.OpenXmlFormats.Wordprocessing.CT_FrameScrollbar : object {
    private ST_FrameScrollbar valField;
    [XmlAttributeAttribute]
public ST_FrameScrollbar val { get; public set; }
    public ST_FrameScrollbar get_val();
    public void set_val(ST_FrameScrollbar value);
}
[XmlTypeAttribute]
[XmlRootAttribute]
public class NPOI.OpenXmlFormats.Wordprocessing.CT_Frameset : object {
    private CT_String szField;
    private CT_FramesetSplitbar framesetSplitbarField;
    private CT_FrameLayout frameLayoutField;
    private Object[] itemsField;
    [XmlElementAttribute]
public CT_String sz { get; public set; }
    [XmlElementAttribute]
public CT_FramesetSplitbar framesetSplitbar { get; public set; }
    [XmlElementAttribute]
public CT_FrameLayout frameLayout { get; public set; }
    [XmlElementAttribute("frame", "NPOI.OpenXmlFormats.Wordprocessing.CT_Frame")]
[XmlElementAttribute("frameset", "NPOI.OpenXmlFormats.Wordprocessing.CT_Frameset")]
public Object[] Items { get; public set; }
    public CT_String get_sz();
    public void set_sz(CT_String value);
    public CT_FramesetSplitbar get_framesetSplitbar();
    public void set_framesetSplitbar(CT_FramesetSplitbar value);
    public CT_FrameLayout get_frameLayout();
    public void set_frameLayout(CT_FrameLayout value);
    public Object[] get_Items();
    public void set_Items(Object[] value);
}
[XmlTypeAttribute]
[XmlRootAttribute]
public class NPOI.OpenXmlFormats.Wordprocessing.CT_FramesetSplitbar : object {
    private CT_TwipsMeasure wField;
    private CT_Color colorField;
    private CT_OnOff noBorderField;
    private CT_OnOff flatBordersField;
    [XmlElementAttribute]
public CT_TwipsMeasure w { get; public set; }
    [XmlElementAttribute]
public CT_Color color { get; public set; }
    [XmlElementAttribute]
public CT_OnOff noBorder { get; public set; }
    [XmlElementAttribute]
public CT_OnOff flatBorders { get; public set; }
    public CT_TwipsMeasure get_w();
    public void set_w(CT_TwipsMeasure value);
    public CT_Color get_color();
    public void set_color(CT_Color value);
    public CT_OnOff get_noBorder();
    public void set_noBorder(CT_OnOff value);
    public CT_OnOff get_flatBorders();
    public void set_flatBorders(CT_OnOff value);
}
[XmlTypeAttribute]
[XmlRootAttribute]
public class NPOI.OpenXmlFormats.Wordprocessing.CT_FtnDocProps : CT_FtnProps {
    private List`1<CT_FtnEdnSepRef> footnoteField;
    [XmlElementAttribute("footnote")]
public List`1<CT_FtnEdnSepRef> footnote { get; public set; }
    public static CT_FtnDocProps Parse(XmlNode node, XmlNamespaceManager namespaceManager);
    internal void Write(StreamWriter sw, string nodeName);
    public List`1<CT_FtnEdnSepRef> get_footnote();
    public void set_footnote(List`1<CT_FtnEdnSepRef> value);
}
[XmlTypeAttribute]
[XmlRootAttribute("endnote")]
public class NPOI.OpenXmlFormats.Wordprocessing.CT_FtnEdn : object {
    private ArrayList itemsField;
    private List`1<ItemsChoiceType7> itemsElementNameField;
    private ST_FtnEdn typeField;
    private bool typeFieldSpecified;
    private int idField;
    [XmlElementAttribute("oMath", "NPOI.OpenXmlFormats.Shared.CT_OMath")]
[XmlElementAttribute("oMathPara", "NPOI.OpenXmlFormats.Shared.CT_OMathPara")]
[XmlElementAttribute("altChunk", "NPOI.OpenXmlFormats.Wordprocessing.CT_AltChunk")]
[XmlElementAttribute("bookmarkEnd", "NPOI.OpenXmlFormats.Wordprocessing.CT_MarkupRange")]
[XmlElementAttribute("bookmarkStart", "NPOI.OpenXmlFormats.Wordprocessing.CT_Bookmark")]
[XmlElementAttribute("commentRangeEnd", "NPOI.OpenXmlFormats.Wordprocessing.CT_MarkupRange")]
[XmlElementAttribute("commentRangeStart", "NPOI.OpenXmlFormats.Wordprocessing.CT_MarkupRange")]
[XmlElementAttribute("customXml", "NPOI.OpenXmlFormats.Wordprocessing.CT_CustomXmlBlock")]
[XmlElementAttribute("customXmlDelRangeEnd", "NPOI.OpenXmlFormats.Wordprocessing.CT_Markup")]
[XmlElementAttribute("customXmlDelRangeStart", "NPOI.OpenXmlFormats.Wordprocessing.CT_TrackChange")]
[XmlElementAttribute("customXmlInsRangeEnd", "NPOI.OpenXmlFormats.Wordprocessing.CT_Markup")]
[XmlElementAttribute("customXmlInsRangeStart", "NPOI.OpenXmlFormats.Wordprocessing.CT_TrackChange")]
[XmlElementAttribute("customXmlMoveFromRangeEnd", "NPOI.OpenXmlFormats.Wordprocessing.CT_Markup")]
[XmlElementAttribute("customXmlMoveFromRangeStart", "NPOI.OpenXmlFormats.Wordprocessing.CT_TrackChange")]
[XmlElementAttribute("customXmlMoveToRangeEnd", "NPOI.OpenXmlFormats.Wordprocessing.CT_Markup")]
[XmlElementAttribute("customXmlMoveToRangeStart", "NPOI.OpenXmlFormats.Wordprocessing.CT_TrackChange")]
[XmlElementAttribute("del", "NPOI.OpenXmlFormats.Wordprocessing.CT_RunTrackChange")]
[XmlElementAttribute("ins", "NPOI.OpenXmlFormats.Wordprocessing.CT_RunTrackChange")]
[XmlElementAttribute("moveFrom", "NPOI.OpenXmlFormats.Wordprocessing.CT_RunTrackChange")]
[XmlElementAttribute("moveFromRangeEnd", "NPOI.OpenXmlFormats.Wordprocessing.CT_MarkupRange")]
[XmlElementAttribute("moveFromRangeStart", "NPOI.OpenXmlFormats.Wordprocessing.CT_MoveBookmark")]
[XmlElementAttribute("moveTo", "NPOI.OpenXmlFormats.Wordprocessing.CT_RunTrackChange")]
[XmlElementAttribute("moveToRangeEnd", "NPOI.OpenXmlFormats.Wordprocessing.CT_MarkupRange")]
[XmlElementAttribute("moveToRangeStart", "NPOI.OpenXmlFormats.Wordprocessing.CT_MoveBookmark")]
[XmlElementAttribute("p", "NPOI.OpenXmlFormats.Wordprocessing.CT_P")]
[XmlElementAttribute("permEnd", "NPOI.OpenXmlFormats.Wordprocessing.CT_Perm")]
[XmlElementAttribute("permStart", "NPOI.OpenXmlFormats.Wordprocessing.CT_PermStart")]
[XmlElementAttribute("proofErr", "NPOI.OpenXmlFormats.Wordprocessing.CT_ProofErr")]
[XmlElementAttribute("sdt", "NPOI.OpenXmlFormats.Wordprocessing.CT_SdtBlock")]
[XmlElementAttribute("tbl", "NPOI.OpenXmlFormats.Wordprocessing.CT_Tbl")]
[XmlChoiceIdentifierAttribute("ItemsElementName")]
public ArrayList Items { get; public set; }
    [XmlElementAttribute("ItemsElementName")]
[XmlIgnoreAttribute]
public List`1<ItemsChoiceType7> ItemsElementName { get; public set; }
    [XmlAttributeAttribute]
public ST_FtnEdn type { get; public set; }
    [XmlIgnoreAttribute]
public bool typeSpecified { get; public set; }
    [XmlAttributeAttribute]
public int id { get; public set; }
    public static CT_FtnEdn Parse(XmlNode node, XmlNamespaceManager namespaceManager);
    internal void Write(StreamWriter sw, string nodeName);
    public ArrayList get_Items();
    public void set_Items(ArrayList value);
    public List`1<ItemsChoiceType7> get_ItemsElementName();
    public void set_ItemsElementName(List`1<ItemsChoiceType7> value);
    public ST_FtnEdn get_type();
    public void set_type(ST_FtnEdn value);
    public bool get_typeSpecified();
    public void set_typeSpecified(bool value);
    public int get_id();
    public void set_id(int value);
    public void Set(CT_FtnEdn note);
    private List`1<T> GetObjectList(ItemsChoiceType7 type);
    private int SizeOfArray(ItemsChoiceType7 type);
    private T GetObjectArray(int p, ItemsChoiceType7 type);
    private T AddNewObject(ItemsChoiceType7 type);
    private T AddNewObject(ItemsChoiceType7 type, T t);
    public IList`1<CT_P> GetPList();
    public IList`1<CT_Tbl> GetTblList();
    public CT_Tbl GetTblArray(int i);
    public CT_Tbl AddNewTbl();
    public CT_P AddNewP();
    public CT_P AddNewP(CT_P paragraph);
}
[XmlTypeAttribute]
[XmlRootAttribute]
public class NPOI.OpenXmlFormats.Wordprocessing.CT_FtnEdnRef : object {
    [CompilerGeneratedAttribute]
private XmlNode <DomNode>k__BackingField;
    private ST_OnOff customMarkFollowsField;
    private bool customMarkFollowsFieldSpecified;
    private string idField;
    public XmlNode DomNode { get; public set; }
    [XmlAttributeAttribute]
public ST_OnOff customMarkFollows { get; public set; }
    [XmlIgnoreAttribute]
public bool customMarkFollowsSpecified { get; public set; }
    [XmlAttributeAttribute]
public string id { get; public set; }
    [CompilerGeneratedAttribute]
public XmlNode get_DomNode();
    [CompilerGeneratedAttribute]
public void set_DomNode(XmlNode value);
    public static CT_FtnEdnRef Parse(XmlNode node, XmlNamespaceManager namespaceManager);
    internal void Write(StreamWriter sw, string nodeName);
    public ST_OnOff get_customMarkFollows();
    public void set_customMarkFollows(ST_OnOff value);
    public bool get_customMarkFollowsSpecified();
    public void set_customMarkFollowsSpecified(bool value);
    public string get_id();
    public void set_id(string value);
}
[XmlTypeAttribute]
public class NPOI.OpenXmlFormats.Wordprocessing.CT_FtnEdnSepRef : object {
    private string idField;
    [XmlAttributeAttribute]
public string id { get; public set; }
    public static CT_FtnEdnSepRef Parse(XmlNode node, XmlNamespaceManager namespaceManager);
    internal void Write(StreamWriter sw, string nodeName);
    public string get_id();
    public void set_id(string value);
}
[XmlTypeAttribute]
[XmlRootAttribute]
public class NPOI.OpenXmlFormats.Wordprocessing.CT_FtnPos : object {
    private ST_FtnPos valField;
    [XmlAttributeAttribute]
public ST_FtnPos val { get; public set; }
    public static CT_FtnPos Parse(XmlNode node, XmlNamespaceManager namespaceManager);
    internal void Write(StreamWriter sw, string nodeName);
    public ST_FtnPos get_val();
    public void set_val(ST_FtnPos value);
}
[XmlIncludeAttribute("NPOI.OpenXmlFormats.Wordprocessing.CT_FtnDocProps")]
[XmlTypeAttribute]
[XmlRootAttribute]
public class NPOI.OpenXmlFormats.Wordprocessing.CT_FtnProps : object {
    private CT_FtnPos posField;
    private CT_NumFmt numFmtField;
    private CT_DecimalNumber numStartField;
    private CT_NumRestart numRestartField;
    [XmlElementAttribute]
public CT_FtnPos pos { get; public set; }
    [XmlElementAttribute]
public CT_NumFmt numFmt { get; public set; }
    [XmlElementAttribute]
public CT_DecimalNumber numStart { get; public set; }
    [XmlElementAttribute]
public CT_NumRestart numRestart { get; public set; }
    public static CT_FtnProps Parse(XmlNode node, XmlNamespaceManager namespaceManager);
    internal void Write(StreamWriter sw, string nodeName);
    public CT_FtnPos get_pos();
    public void set_pos(CT_FtnPos value);
    public CT_NumFmt get_numFmt();
    public void set_numFmt(CT_NumFmt value);
    public CT_DecimalNumber get_numStart();
    public void set_numStart(CT_DecimalNumber value);
    public CT_NumRestart get_numRestart();
    public void set_numRestart(CT_NumRestart value);
}
[XmlRootAttribute("ftr")]
public class NPOI.OpenXmlFormats.Wordprocessing.CT_Ftr : CT_HdrFtr {
    public static CT_Ftr Parse(XmlNode node, XmlNamespaceManager namespaceManager);
    internal void Write(StreamWriter sw);
}
[XmlTypeAttribute]
[XmlRootAttribute("glossaryDocument")]
public class NPOI.OpenXmlFormats.Wordprocessing.CT_GlossaryDocument : CT_DocumentBase {
    private CT_DocParts docPartsField;
    [XmlElementAttribute]
public CT_DocParts docParts { get; public set; }
    public CT_DocParts get_docParts();
    public void set_docParts(CT_DocParts value);
}
[XmlTypeAttribute]
[XmlRootAttribute]
public class NPOI.OpenXmlFormats.Wordprocessing.CT_Guid : object {
    private string valField;
    [XmlAttributeAttribute]
public string val { get; public set; }
    public string get_val();
    public void set_val(string value);
}
[XmlRootAttribute("hdr")]
public class NPOI.OpenXmlFormats.Wordprocessing.CT_Hdr : CT_HdrFtr {
    public static CT_Hdr Parse(XmlNode node, XmlNamespaceManager namespaceManager);
    internal void Write(StreamWriter sw);
}
[XmlTypeAttribute]
public class NPOI.OpenXmlFormats.Wordprocessing.CT_HdrFtr : object {
    private ArrayList itemsField;
    private List`1<ItemsChoiceType8> itemsElementNameField;
    public ArrayList Items { get; public set; }
    [XmlElementAttribute("ItemsElementName")]
[XmlIgnoreAttribute]
public List`1<ItemsChoiceType8> ItemsElementName { get; public set; }
    public static CT_HdrFtr Parse(CT_HdrFtr ctObj, XmlNode node, XmlNamespaceManager namespaceManager);
    internal void Write(StreamWriter sw, string nodeName);
    public ArrayList get_Items();
    public void set_Items(ArrayList value);
    public List`1<ItemsChoiceType8> get_ItemsElementName();
    public void set_ItemsElementName(List`1<ItemsChoiceType8> value);
    public CT_Tbl GetTblArray(int i);
    public IList`1<CT_Tbl> GetTblList();
    public CT_P AddNewP();
    public CT_Tbl AddNewTbl();
    public void SetPArray(int i, CT_P cT_P);
    private List`1<T> GetObjectList(ItemsChoiceType8 type);
    private int SizeOfArray(ItemsChoiceType8 type);
    private T GetObjectArray(int p, ItemsChoiceType8 type);
    private T AddNewObject(ItemsChoiceType8 type);
    private void SetObject(ItemsChoiceType8 type, int p, T obj);
    private int GetObjectIndex(ItemsChoiceType8 type, int p);
    private void RemoveObject(ItemsChoiceType8 type, int p);
}
[XmlTypeAttribute]
[XmlRootAttribute]
public class NPOI.OpenXmlFormats.Wordprocessing.CT_HdrFtrRef : CT_Rel {
    private ST_HdrFtr typeField;
    [XmlAttributeAttribute]
public ST_HdrFtr type { get; public set; }
    public static CT_HdrFtrRef Parse(XmlNode node, XmlNamespaceManager namespaceManager);
    internal void Write(StreamWriter sw, string nodeName);
    public ST_HdrFtr get_type();
    public void set_type(ST_HdrFtr value);
}
[XmlTypeAttribute]
[XmlRootAttribute]
public class NPOI.OpenXmlFormats.Wordprocessing.CT_Height : object {
    private ulong valField;
    private ST_HeightRule hRuleField;
    [XmlAttributeAttribute]
public ulong val { get; public set; }
    [XmlAttributeAttribute]
public ST_HeightRule hRule { get; public set; }
    public static CT_Height Parse(XmlNode node, XmlNamespaceManager namespaceManager);
    internal void Write(StreamWriter sw, string nodeName);
    public ulong get_val();
    public void set_val(ulong value);
    public ST_HeightRule get_hRule();
    public void set_hRule(ST_HeightRule value);
}
[XmlTypeAttribute]
[XmlRootAttribute]
public class NPOI.OpenXmlFormats.Wordprocessing.CT_Highlight : object {
    private ST_HighlightColor valField;
    [XmlAttributeAttribute]
public ST_HighlightColor val { get; public set; }
    public static CT_Highlight Parse(XmlNode node, XmlNamespaceManager namespaceManager);
    internal void Write(StreamWriter sw, string nodeName);
    public ST_HighlightColor get_val();
    public void set_val(ST_HighlightColor value);
}
[XmlTypeAttribute]
[XmlRootAttribute]
public class NPOI.OpenXmlFormats.Wordprocessing.CT_HMerge : object {
    private ST_Merge valField;
    private bool valFieldSpecified;
    [XmlAttributeAttribute]
public ST_Merge val { get; public set; }
    [XmlIgnoreAttribute]
public bool valSpecified { get; public set; }
    public static CT_HMerge Parse(XmlNode node, XmlNamespaceManager namespaceManager);
    internal void Write(StreamWriter sw, string nodeName);
    public ST_Merge get_val();
    public void set_val(ST_Merge value);
    public bool get_valSpecified();
    public void set_valSpecified(bool value);
}
[XmlTypeAttribute]
[XmlRootAttribute]
public class NPOI.OpenXmlFormats.Wordprocessing.CT_HpsMeasure : object {
    private ulong valField;
    [XmlAttributeAttribute]
public ulong val { get; public set; }
    public static CT_HpsMeasure Parse(XmlNode node, XmlNamespaceManager namespaceManager);
    internal void Write(StreamWriter sw, string nodeName);
    public ulong get_val();
    public void set_val(ulong value);
}
[XmlTypeAttribute]
public class NPOI.OpenXmlFormats.Wordprocessing.CT_Hyperlink : object {
    private CT_EmbeddedWAVAudioFile sndField;
    private CT_OfficeArtExtensionList extLstField;
    private string idField;
    private string invalidUrlField;
    private string actionField;
    private string tgtFrameField;
    private string tooltipField;
    private bool historyField;
    private bool highlightClickField;
    private bool endSndField;
    [XmlElementAttribute]
public CT_EmbeddedWAVAudioFile snd { get; public set; }
    [XmlElementAttribute]
public CT_OfficeArtExtensionList extLst { get; public set; }
    [XmlAttributeAttribute]
public string id { get; public set; }
    [XmlAttributeAttribute]
[DefaultValueAttribute("")]
public string invalidUrl { get; public set; }
    [XmlAttributeAttribute]
[DefaultValueAttribute("")]
public string action { get; public set; }
    [XmlAttributeAttribute]
[DefaultValueAttribute("")]
public string tgtFrame { get; public set; }
    [XmlAttributeAttribute]
[DefaultValueAttribute("")]
public string tooltip { get; public set; }
    [XmlAttributeAttribute]
[DefaultValueAttribute("True")]
public bool history { get; public set; }
    [XmlAttributeAttribute]
[DefaultValueAttribute("False")]
public bool highlightClick { get; public set; }
    [XmlAttributeAttribute]
[DefaultValueAttribute("False")]
public bool endSnd { get; public set; }
    public CT_EmbeddedWAVAudioFile get_snd();
    public void set_snd(CT_EmbeddedWAVAudioFile value);
    public CT_OfficeArtExtensionList get_extLst();
    public void set_extLst(CT_OfficeArtExtensionList value);
    public string get_id();
    public void set_id(string value);
    public string get_invalidUrl();
    public void set_invalidUrl(string value);
    public string get_action();
    public void set_action(string value);
    public string get_tgtFrame();
    public void set_tgtFrame(string value);
    public string get_tooltip();
    public void set_tooltip(string value);
    public bool get_history();
    public void set_history(bool value);
    public bool get_highlightClick();
    public void set_highlightClick(bool value);
    public bool get_endSnd();
    public void set_endSnd(bool value);
}
[XmlTypeAttribute]
[XmlRootAttribute("CT_Hyperlink")]
public class NPOI.OpenXmlFormats.Wordprocessing.CT_Hyperlink1 : object {
    private ArrayList itemsField;
    private List`1<ItemsChoiceType12> itemsElementNameField;
    private string tgtFrameField;
    private string tooltipField;
    private string docLocationField;
    private ST_OnOff historyField;
    private bool historyFieldSpecified;
    private string anchorField;
    private string idField;
    [XmlElementAttribute("oMath", "NPOI.OpenXmlFormats.Shared.CT_OMath")]
[XmlElementAttribute("oMathPara", "NPOI.OpenXmlFormats.Shared.CT_OMathPara")]
[XmlElementAttribute("bookmarkEnd", "NPOI.OpenXmlFormats.Wordprocessing.CT_MarkupRange")]
[XmlElementAttribute("bookmarkStart", "NPOI.OpenXmlFormats.Wordprocessing.CT_Bookmark")]
[XmlElementAttribute("commentRangeEnd", "NPOI.OpenXmlFormats.Wordprocessing.CT_MarkupRange")]
[XmlElementAttribute("commentRangeStart", "NPOI.OpenXmlFormats.Wordprocessing.CT_MarkupRange")]
[XmlElementAttribute("customXml", "NPOI.OpenXmlFormats.Wordprocessing.CT_CustomXmlRun")]
[XmlElementAttribute("customXmlDelRangeEnd", "NPOI.OpenXmlFormats.Wordprocessing.CT_Markup")]
[XmlElementAttribute("customXmlDelRangeStart", "NPOI.OpenXmlFormats.Wordprocessing.CT_TrackChange")]
[XmlElementAttribute("customXmlInsRangeEnd", "NPOI.OpenXmlFormats.Wordprocessing.CT_Markup")]
[XmlElementAttribute("customXmlInsRangeStart", "NPOI.OpenXmlFormats.Wordprocessing.CT_TrackChange")]
[XmlElementAttribute("customXmlMoveFromRangeEnd", "NPOI.OpenXmlFormats.Wordprocessing.CT_Markup")]
[XmlElementAttribute("customXmlMoveFromRangeStart", "NPOI.OpenXmlFormats.Wordprocessing.CT_TrackChange")]
[XmlElementAttribute("customXmlMoveToRangeEnd", "NPOI.OpenXmlFormats.Wordprocessing.CT_Markup")]
[XmlElementAttribute("customXmlMoveToRangeStart", "NPOI.OpenXmlFormats.Wordprocessing.CT_TrackChange")]
[XmlElementAttribute("del", "NPOI.OpenXmlFormats.Wordprocessing.CT_RunTrackChange")]
[XmlElementAttribute("fldSimple", "NPOI.OpenXmlFormats.Wordprocessing.CT_SimpleField")]
[XmlElementAttribute("hyperlink", "NPOI.OpenXmlFormats.Wordprocessing.CT_Hyperlink1")]
[XmlElementAttribute("ins", "NPOI.OpenXmlFormats.Wordprocessing.CT_RunTrackChange")]
[XmlElementAttribute("moveFrom", "NPOI.OpenXmlFormats.Wordprocessing.CT_RunTrackChange")]
[XmlElementAttribute("moveFromRangeEnd", "NPOI.OpenXmlFormats.Wordprocessing.CT_MarkupRange")]
[XmlElementAttribute("moveFromRangeStart", "NPOI.OpenXmlFormats.Wordprocessing.CT_MoveBookmark")]
[XmlElementAttribute("moveTo", "NPOI.OpenXmlFormats.Wordprocessing.CT_RunTrackChange")]
[XmlElementAttribute("moveToRangeEnd", "NPOI.OpenXmlFormats.Wordprocessing.CT_MarkupRange")]
[XmlElementAttribute("moveToRangeStart", "NPOI.OpenXmlFormats.Wordprocessing.CT_MoveBookmark")]
[XmlElementAttribute("permEnd", "NPOI.OpenXmlFormats.Wordprocessing.CT_Perm")]
[XmlElementAttribute("permStart", "NPOI.OpenXmlFormats.Wordprocessing.CT_PermStart")]
[XmlElementAttribute("proofErr", "NPOI.OpenXmlFormats.Wordprocessing.CT_ProofErr")]
[XmlElementAttribute("r", "NPOI.OpenXmlFormats.Wordprocessing.CT_R")]
[XmlElementAttribute("sdt", "NPOI.OpenXmlFormats.Wordprocessing.CT_SdtRun")]
[XmlElementAttribute("smartTag", "NPOI.OpenXmlFormats.Wordprocessing.CT_SmartTagRun")]
[XmlElementAttribute("subDoc", "NPOI.OpenXmlFormats.Wordprocessing.CT_Rel")]
[XmlChoiceIdentifierAttribute("ItemsElementName")]
public ArrayList Items { get; public set; }
    [XmlElementAttribute("ItemsElementName")]
[XmlIgnoreAttribute]
public List`1<ItemsChoiceType12> ItemsElementName { get; public set; }
    [XmlAttributeAttribute]
public string tgtFrame { get; public set; }
    [XmlAttributeAttribute]
public string tooltip { get; public set; }
    [XmlAttributeAttribute]
public string docLocation { get; public set; }
    [XmlAttributeAttribute]
public ST_OnOff history { get; public set; }
    [XmlIgnoreAttribute]
public bool historySpecified { get; public set; }
    [XmlAttributeAttribute]
public string anchor { get; public set; }
    [XmlAttributeAttribute]
public string id { get; public set; }
    public static CT_Hyperlink1 Parse(XmlNode node, XmlNamespaceManager namespaceManager);
    internal void Write(StreamWriter sw, string nodeName);
    public ArrayList get_Items();
    public void set_Items(ArrayList value);
    public List`1<ItemsChoiceType12> get_ItemsElementName();
    public void set_ItemsElementName(List`1<ItemsChoiceType12> value);
    public string get_tgtFrame();
    public void set_tgtFrame(string value);
    public string get_tooltip();
    public void set_tooltip(string value);
    public string get_docLocation();
    public void set_docLocation(string value);
    public ST_OnOff get_history();
    public void set_history(ST_OnOff value);
    public bool get_historySpecified();
    public void set_historySpecified(bool value);
    public string get_anchor();
    public void set_anchor(string value);
    public string get_id();
    public void set_id(string value);
    public IEnumerable`1<CT_R> GetRList();
    private List`1<T> GetObjectList(ItemsChoiceType12 type);
    private int SizeOfArray(ItemsChoiceType12 type);
    private T GetObjectArray(int p, ItemsChoiceType12 type);
    private T InsertNewObject(ItemsChoiceType12 type, int p);
    private T AddNewObject(ItemsChoiceType12 type);
    private void SetObject(ItemsChoiceType12 type, int p, T obj);
    private int GetObjectIndex(ItemsChoiceType12 type, int p);
    private void RemoveObject(ItemsChoiceType12 type, int p);
}
[XmlTypeAttribute]
[XmlRootAttribute]
public class NPOI.OpenXmlFormats.Wordprocessing.CT_Ind : object {
    private string leftField;
    private string leftCharsField;
    private string rightField;
    private string rightCharsField;
    private ulong hangingField;
    private bool hangingFieldSpecified;
    private string hangingCharsField;
    private long firstLineField;
    private bool firstLineFieldSpecified;
    private string firstLineCharsField;
    [XmlAttributeAttribute]
public string left { get; public set; }
    [XmlAttributeAttribute]
public string leftChars { get; public set; }
    [XmlAttributeAttribute]
public string right { get; public set; }
    [XmlAttributeAttribute]
public string rightChars { get; public set; }
    [XmlAttributeAttribute]
public ulong hanging { get; public set; }
    [XmlIgnoreAttribute]
public bool hangingSpecified { get; public set; }
    [XmlAttributeAttribute]
public string hangingChars { get; public set; }
    [XmlAttributeAttribute]
public long firstLine { get; public set; }
    [XmlIgnoreAttribute]
public bool firstLineSpecified { get; public set; }
    [XmlAttributeAttribute]
public string firstLineChars { get; public set; }
    public static CT_Ind Parse(XmlNode node, XmlNamespaceManager namespaceManager);
    internal void Write(StreamWriter sw, string nodeName);
    public string get_left();
    public void set_left(string value);
    public string get_leftChars();
    public void set_leftChars(string value);
    public string get_right();
    public void set_right(string value);
    public string get_rightChars();
    public void set_rightChars(string value);
    public ulong get_hanging();
    public void set_hanging(ulong value);
    public bool get_hangingSpecified();
    public void set_hangingSpecified(bool value);
    public string get_hangingChars();
    public void set_hangingChars(string value);
    public long get_firstLine();
    public void set_firstLine(long value);
    public bool get_firstLineSpecified();
    public void set_firstLineSpecified(bool value);
    public string get_firstLineChars();
    public void set_firstLineChars(string value);
    public bool IsSetLeft();
    public bool IsSetRight();
    public bool IsSetHanging();
    public bool IsSetFirstLine();
}
[XmlTypeAttribute]
[XmlRootAttribute]
public class NPOI.OpenXmlFormats.Wordprocessing.CT_Jc : object {
    private ST_Jc valField;
    [XmlAttributeAttribute]
public ST_Jc val { get; public set; }
    public static CT_Jc Parse(XmlNode node, XmlNamespaceManager namespaceManager);
    internal void Write(StreamWriter sw, string nodeName);
    public ST_Jc get_val();
    public void set_val(ST_Jc value);
}
[XmlTypeAttribute]
[XmlRootAttribute]
public class NPOI.OpenXmlFormats.Wordprocessing.CT_Kinsoku : object {
    private string langField;
    private string valField;
    [XmlAttributeAttribute]
public string lang { get; public set; }
    [XmlAttributeAttribute]
public string val { get; public set; }
    public static CT_Kinsoku Parse(XmlNode node, XmlNamespaceManager namespaceManager);
    internal void Write(StreamWriter sw, string nodeName);
    public string get_lang();
    public void set_lang(string value);
    public string get_val();
    public void set_val(string value);
}
[XmlTypeAttribute]
[XmlRootAttribute]
public class NPOI.OpenXmlFormats.Wordprocessing.CT_Lang : object {
    private string valField;
    [XmlAttributeAttribute]
public string val { get; public set; }
    public static CT_Lang Parse(XmlNode node, XmlNamespaceManager namespaceManager);
    internal void Write(StreamWriter sw, string nodeName);
    public string get_val();
    public void set_val(string value);
}
[XmlTypeAttribute]
[XmlRootAttribute]
public class NPOI.OpenXmlFormats.Wordprocessing.CT_Language : object {
    private string valField;
    private string eastAsiaField;
    private string bidiField;
    [XmlAttributeAttribute]
public string val { get; public set; }
    [XmlAttributeAttribute]
public string eastAsia { get; public set; }
    [XmlAttributeAttribute]
public string bidi { get; public set; }
    public static CT_Language Parse(XmlNode node, XmlNamespaceManager namespaceManager);
    internal void Write(StreamWriter sw, string nodeName);
    public string get_val();
    public void set_val(string value);
    public string get_eastAsia();
    public void set_eastAsia(string value);
    public string get_bidi();
    public void set_bidi(string value);
}
[XmlTypeAttribute]
[XmlRootAttribute]
public class NPOI.OpenXmlFormats.Wordprocessing.CT_LatentStyles : object {
    private List`1<CT_LsdException> lsdExceptionField;
    private ST_OnOff defLockedStateField;
    private bool defLockedStateFieldSpecified;
    private string defUIPriorityField;
    private ST_OnOff defSemiHiddenField;
    private bool defSemiHiddenFieldSpecified;
    private ST_OnOff defUnhideWhenUsedField;
    private bool defUnhideWhenUsedFieldSpecified;
    private ST_OnOff defQFormatField;
    private bool defQFormatFieldSpecified;
    private string countField;
    [XmlElementAttribute("lsdException")]
public List`1<CT_LsdException> lsdException { get; public set; }
    [XmlAttributeAttribute]
public ST_OnOff defLockedState { get; public set; }
    [XmlIgnoreAttribute]
public bool defLockedStateSpecified { get; public set; }
    [XmlAttributeAttribute]
public string defUIPriority { get; public set; }
    [XmlAttributeAttribute]
public ST_OnOff defSemiHidden { get; public set; }
    [XmlIgnoreAttribute]
public bool defSemiHiddenSpecified { get; public set; }
    [XmlAttributeAttribute]
public ST_OnOff defUnhideWhenUsed { get; public set; }
    [XmlIgnoreAttribute]
public bool defUnhideWhenUsedSpecified { get; public set; }
    [XmlAttributeAttribute]
public ST_OnOff defQFormat { get; public set; }
    [XmlIgnoreAttribute]
public bool defQFormatSpecified { get; public set; }
    [XmlAttributeAttribute]
public string count { get; public set; }
    public static CT_LatentStyles Parse(XmlNode node, XmlNamespaceManager namespaceManager);
    internal void Write(StreamWriter sw, string nodeName);
    public List`1<CT_LsdException> get_lsdException();
    public void set_lsdException(List`1<CT_LsdException> value);
    public ST_OnOff get_defLockedState();
    public void set_defLockedState(ST_OnOff value);
    public bool get_defLockedStateSpecified();
    public void set_defLockedStateSpecified(bool value);
    public string get_defUIPriority();
    public void set_defUIPriority(string value);
    public ST_OnOff get_defSemiHidden();
    public void set_defSemiHidden(ST_OnOff value);
    public bool get_defSemiHiddenSpecified();
    public void set_defSemiHiddenSpecified(bool value);
    public ST_OnOff get_defUnhideWhenUsed();
    public void set_defUnhideWhenUsed(ST_OnOff value);
    public bool get_defUnhideWhenUsedSpecified();
    public void set_defUnhideWhenUsedSpecified(bool value);
    public ST_OnOff get_defQFormat();
    public void set_defQFormat(ST_OnOff value);
    public bool get_defQFormatSpecified();
    public void set_defQFormatSpecified(bool value);
    public string get_count();
    public void set_count(string value);
    public CT_LsdException AddNewLsdException();
    public int SizeOfLsdExceptionArray();
}
[XmlTypeAttribute]
[XmlRootAttribute]
public class NPOI.OpenXmlFormats.Wordprocessing.CT_LevelSuffix : object {
    private ST_LevelSuffix valField;
    [XmlAttributeAttribute]
public ST_LevelSuffix val { get; public set; }
    public static CT_LevelSuffix Parse(XmlNode node, XmlNamespaceManager namespaceManager);
    internal void Write(StreamWriter sw, string nodeName);
    public ST_LevelSuffix get_val();
    public void set_val(ST_LevelSuffix value);
}
[XmlTypeAttribute]
[XmlRootAttribute]
public class NPOI.OpenXmlFormats.Wordprocessing.CT_LevelText : object {
    private string valField;
    private ST_OnOff nullField;
    private bool nullFieldSpecified;
    [XmlAttributeAttribute]
public string val { get; public set; }
    [XmlAttributeAttribute]
public ST_OnOff null { get; public set; }
    [XmlIgnoreAttribute]
public bool nullSpecified { get; public set; }
    public static CT_LevelText Parse(XmlNode node, XmlNamespaceManager namespaceManager);
    internal void Write(StreamWriter sw, string nodeName);
    public string get_val();
    public void set_val(string value);
    public ST_OnOff get_null();
    public void set_null(ST_OnOff value);
    public bool get_nullSpecified();
    public void set_nullSpecified(bool value);
}
[XmlTypeAttribute]
[XmlRootAttribute]
public class NPOI.OpenXmlFormats.Wordprocessing.CT_LineNumber : object {
    private string countByField;
    private string startField;
    private ulong distanceField;
    private bool distanceFieldSpecified;
    private ST_LineNumberRestart restartField;
    private bool restartFieldSpecified;
    [XmlAttributeAttribute]
public string countBy { get; public set; }
    [XmlAttributeAttribute]
public string start { get; public set; }
    [XmlAttributeAttribute]
public ulong distance { get; public set; }
    [XmlIgnoreAttribute]
public bool distanceSpecified { get; public set; }
    [XmlAttributeAttribute]
public ST_LineNumberRestart restart { get; public set; }
    [XmlIgnoreAttribute]
public bool restartSpecified { get; public set; }
    public static CT_LineNumber Parse(XmlNode node, XmlNamespaceManager namespaceManager);
    internal void Write(StreamWriter sw, string nodeName);
    public string get_countBy();
    public void set_countBy(string value);
    public string get_start();
    public void set_start(string value);
    public ulong get_distance();
    public void set_distance(ulong value);
    public bool get_distanceSpecified();
    public void set_distanceSpecified(bool value);
    public ST_LineNumberRestart get_restart();
    public void set_restart(ST_LineNumberRestart value);
    public bool get_restartSpecified();
    public void set_restartSpecified(bool value);
}
[XmlTypeAttribute]
[XmlRootAttribute]
public class NPOI.OpenXmlFormats.Wordprocessing.CT_Lock : object {
    private ST_Lock valField;
    private bool valFieldSpecified;
    [XmlAttributeAttribute]
public ST_Lock val { get; public set; }
    [XmlIgnoreAttribute]
public bool valSpecified { get; public set; }
    public static CT_Lock Parse(XmlNode node, XmlNamespaceManager namespaceManager);
    internal void Write(StreamWriter sw, string nodeName);
    public ST_Lock get_val();
    public void set_val(ST_Lock value);
    public bool get_valSpecified();
    public void set_valSpecified(bool value);
}
[XmlTypeAttribute]
[XmlRootAttribute]
public class NPOI.OpenXmlFormats.Wordprocessing.CT_LongHexNumber : object {
    private Byte[] valField;
    [XmlAttributeAttribute]
public Byte[] val { get; public set; }
    public static CT_LongHexNumber Parse(XmlNode node, XmlNamespaceManager namespaceManager);
    internal void Write(StreamWriter sw, string nodeName);
    public Byte[] get_val();
    public void set_val(Byte[] value);
}
[XmlTypeAttribute]
[XmlRootAttribute]
public class NPOI.OpenXmlFormats.Wordprocessing.CT_LsdException : object {
    private string nameField;
    private ST_OnOff lockedField;
    private bool lockedFieldSpecified;
    private string uiPriorityField;
    private ST_OnOff semiHiddenField;
    private bool semiHiddenFieldSpecified;
    private ST_OnOff unhideWhenUsedField;
    private bool unhideWhenUsedFieldSpecified;
    private ST_OnOff qFormatField;
    private bool qFormatFieldSpecified;
    [XmlAttributeAttribute]
public string name { get; public set; }
    [XmlAttributeAttribute]
public ST_OnOff locked { get; public set; }
    [XmlIgnoreAttribute]
public bool lockedSpecified { get; public set; }
    [XmlAttributeAttribute]
public string uiPriority { get; public set; }
    [XmlAttributeAttribute]
public ST_OnOff semiHidden { get; public set; }
    [XmlIgnoreAttribute]
public bool semiHiddenSpecified { get; public set; }
    [XmlAttributeAttribute]
public ST_OnOff unhideWhenUsed { get; public set; }
    [XmlIgnoreAttribute]
public bool unhideWhenUsedSpecified { get; public set; }
    [XmlAttributeAttribute]
public ST_OnOff qFormat { get; public set; }
    [XmlIgnoreAttribute]
public bool qFormatSpecified { get; public set; }
    public static CT_LsdException Parse(XmlNode node, XmlNamespaceManager namespaceManager);
    internal void Write(StreamWriter sw, string nodeName);
    public string get_name();
    public void set_name(string value);
    public ST_OnOff get_locked();
    public void set_locked(ST_OnOff value);
    public bool get_lockedSpecified();
    public void set_lockedSpecified(bool value);
    public string get_uiPriority();
    public void set_uiPriority(string value);
    public ST_OnOff get_semiHidden();
    public void set_semiHidden(ST_OnOff value);
    public bool get_semiHiddenSpecified();
    public void set_semiHiddenSpecified(bool value);
    public ST_OnOff get_unhideWhenUsed();
    public void set_unhideWhenUsed(ST_OnOff value);
    public bool get_unhideWhenUsedSpecified();
    public void set_unhideWhenUsedSpecified(bool value);
    public ST_OnOff get_qFormat();
    public void set_qFormat(ST_OnOff value);
    public bool get_qFormatSpecified();
    public void set_qFormatSpecified(bool value);
}
[XmlTypeAttribute]
[XmlRootAttribute]
public class NPOI.OpenXmlFormats.Wordprocessing.CT_Lvl : object {
    private CT_DecimalNumber startField;
    private CT_NumFmt numFmtField;
    private CT_DecimalNumber lvlRestartField;
    private CT_String pStyleField;
    private CT_OnOff isLglField;
    private CT_LevelSuffix suffField;
    private CT_LevelText lvlTextField;
    private CT_DecimalNumber lvlPicBulletIdField;
    private CT_LvlLegacy legacyField;
    private CT_Jc lvlJcField;
    private CT_PPr pPrField;
    private CT_RPr rPrField;
    private string ilvlField;
    private Byte[] tplcField;
    private ST_OnOff tentativeField;
    private bool tentativeFieldSpecified;
    [XmlElementAttribute]
public CT_DecimalNumber start { get; public set; }
    [XmlElementAttribute]
public CT_NumFmt numFmt { get; public set; }
    [XmlElementAttribute]
public CT_DecimalNumber lvlRestart { get; public set; }
    [XmlElementAttribute]
public CT_String pStyle { get; public set; }
    [XmlElementAttribute]
public CT_OnOff isLgl { get; public set; }
    [XmlElementAttribute]
public CT_LevelSuffix suff { get; public set; }
    [XmlElementAttribute]
public CT_LevelText lvlText { get; public set; }
    [XmlElementAttribute]
public CT_DecimalNumber lvlPicBulletId { get; public set; }
    [XmlElementAttribute]
public CT_LvlLegacy legacy { get; public set; }
    [XmlElementAttribute]
public CT_Jc lvlJc { get; public set; }
    [XmlElementAttribute]
public CT_PPr pPr { get; public set; }
    [XmlElementAttribute]
public CT_RPr rPr { get; public set; }
    [XmlAttributeAttribute]
public string ilvl { get; public set; }
    [XmlAttributeAttribute]
public Byte[] tplc { get; public set; }
    [XmlAttributeAttribute]
public ST_OnOff tentative { get; public set; }
    [XmlIgnoreAttribute]
public bool tentativeSpecified { get; public set; }
    public static CT_Lvl Parse(XmlNode node, XmlNamespaceManager namespaceManager);
    internal void Write(StreamWriter sw, string nodeName);
    public CT_DecimalNumber get_start();
    public void set_start(CT_DecimalNumber value);
    public CT_NumFmt get_numFmt();
    public void set_numFmt(CT_NumFmt value);
    public CT_DecimalNumber get_lvlRestart();
    public void set_lvlRestart(CT_DecimalNumber value);
    public CT_String get_pStyle();
    public void set_pStyle(CT_String value);
    public CT_OnOff get_isLgl();
    public void set_isLgl(CT_OnOff value);
    public CT_LevelSuffix get_suff();
    public void set_suff(CT_LevelSuffix value);
    public CT_LevelText get_lvlText();
    public void set_lvlText(CT_LevelText value);
    public CT_DecimalNumber get_lvlPicBulletId();
    public void set_lvlPicBulletId(CT_DecimalNumber value);
    public CT_LvlLegacy get_legacy();
    public void set_legacy(CT_LvlLegacy value);
    public CT_Jc get_lvlJc();
    public void set_lvlJc(CT_Jc value);
    public CT_PPr get_pPr();
    public void set_pPr(CT_PPr value);
    public CT_RPr get_rPr();
    public void set_rPr(CT_RPr value);
    public string get_ilvl();
    public void set_ilvl(string value);
    public Byte[] get_tplc();
    public void set_tplc(Byte[] value);
    public ST_OnOff get_tentative();
    public void set_tentative(ST_OnOff value);
    public bool get_tentativeSpecified();
    public void set_tentativeSpecified(bool value);
    public CT_NumFmt AddNewNumFmt();
    public CT_LevelText AddNewLvlText();
}
[XmlTypeAttribute]
[XmlRootAttribute]
public class NPOI.OpenXmlFormats.Wordprocessing.CT_LvlLegacy : object {
    private ST_OnOff legacyField;
    private bool legacyFieldSpecified;
    private ulong legacySpaceField;
    private bool legacySpaceFieldSpecified;
    private string legacyIndentField;
    [XmlAttributeAttribute]
public ST_OnOff legacy { get; public set; }
    [XmlIgnoreAttribute]
public bool legacySpecified { get; public set; }
    [XmlAttributeAttribute]
public ulong legacySpace { get; public set; }
    [XmlIgnoreAttribute]
public bool legacySpaceSpecified { get; public set; }
    [XmlAttributeAttribute]
public string legacyIndent { get; public set; }
    public static CT_LvlLegacy Parse(XmlNode node, XmlNamespaceManager namespaceManager);
    internal void Write(StreamWriter sw, string nodeName);
    public ST_OnOff get_legacy();
    public void set_legacy(ST_OnOff value);
    public bool get_legacySpecified();
    public void set_legacySpecified(bool value);
    public ulong get_legacySpace();
    public void set_legacySpace(ulong value);
    public bool get_legacySpaceSpecified();
    public void set_legacySpaceSpecified(bool value);
    public string get_legacyIndent();
    public void set_legacyIndent(string value);
}
[XmlTypeAttribute]
[XmlRootAttribute]
public class NPOI.OpenXmlFormats.Wordprocessing.CT_MacroName : object {
    private string valField;
    [XmlAttributeAttribute]
public string val { get; public set; }
    public string get_val();
    public void set_val(string value);
    public static CT_MacroName Parse(XmlNode node, XmlNamespaceManager namespaceManager);
    internal void Write(StreamWriter sw, string nodeName);
}
[XmlTypeAttribute]
[XmlRootAttribute]
public class NPOI.OpenXmlFormats.Wordprocessing.CT_MailMerge : object {
    private CT_MailMergeDocType mainDocumentTypeField;
    private CT_OnOff linkToQueryField;
    private CT_MailMergeDataType dataTypeField;
    private CT_String connectStringField;
    private CT_String queryField;
    private CT_Rel dataSourceField;
    private CT_Rel headerSourceField;
    private CT_OnOff doNotSuppressBlankLinesField;
    private CT_MailMergeDest destinationField;
    private CT_String addressFieldNameField;
    private CT_String mailSubjectField;
    private CT_OnOff mailAsAttachmentField;
    private CT_OnOff viewMergedDataField;
    private CT_DecimalNumber activeRecordField;
    private CT_DecimalNumber checkErrorsField;
    private CT_Odso odsoField;
    [XmlElementAttribute]
public CT_MailMergeDocType mainDocumentType { get; public set; }
    [XmlElementAttribute]
public CT_OnOff linkToQuery { get; public set; }
    [XmlElementAttribute]
public CT_MailMergeDataType dataType { get; public set; }
    [XmlElementAttribute]
public CT_String connectString { get; public set; }
    [XmlElementAttribute]
public CT_String query { get; public set; }
    [XmlElementAttribute]
public CT_Rel dataSource { get; public set; }
    [XmlElementAttribute]
public CT_Rel headerSource { get; public set; }
    [XmlElementAttribute]
public CT_OnOff doNotSuppressBlankLines { get; public set; }
    [XmlElementAttribute]
public CT_MailMergeDest destination { get; public set; }
    [XmlElementAttribute]
public CT_String addressFieldName { get; public set; }
    [XmlElementAttribute]
public CT_String mailSubject { get; public set; }
    [XmlElementAttribute]
public CT_OnOff mailAsAttachment { get; public set; }
    [XmlElementAttribute]
public CT_OnOff viewMergedData { get; public set; }
    [XmlElementAttribute]
public CT_DecimalNumber activeRecord { get; public set; }
    [XmlElementAttribute]
public CT_DecimalNumber checkErrors { get; public set; }
    [XmlElementAttribute]
public CT_Odso odso { get; public set; }
    public static CT_MailMerge Parse(XmlNode node, XmlNamespaceManager namespaceManager);
    internal void Write(StreamWriter sw, string nodeName);
    public CT_MailMergeDocType get_mainDocumentType();
    public void set_mainDocumentType(CT_MailMergeDocType value);
    public CT_OnOff get_linkToQuery();
    public void set_linkToQuery(CT_OnOff value);
    public CT_MailMergeDataType get_dataType();
    public void set_dataType(CT_MailMergeDataType value);
    public CT_String get_connectString();
    public void set_connectString(CT_String value);
    public CT_String get_query();
    public void set_query(CT_String value);
    public CT_Rel get_dataSource();
    public void set_dataSource(CT_Rel value);
    public CT_Rel get_headerSource();
    public void set_headerSource(CT_Rel value);
    public CT_OnOff get_doNotSuppressBlankLines();
    public void set_doNotSuppressBlankLines(CT_OnOff value);
    public CT_MailMergeDest get_destination();
    public void set_destination(CT_MailMergeDest value);
    public CT_String get_addressFieldName();
    public void set_addressFieldName(CT_String value);
    public CT_String get_mailSubject();
    public void set_mailSubject(CT_String value);
    public CT_OnOff get_mailAsAttachment();
    public void set_mailAsAttachment(CT_OnOff value);
    public CT_OnOff get_viewMergedData();
    public void set_viewMergedData(CT_OnOff value);
    public CT_DecimalNumber get_activeRecord();
    public void set_activeRecord(CT_DecimalNumber value);
    public CT_DecimalNumber get_checkErrors();
    public void set_checkErrors(CT_DecimalNumber value);
    public CT_Odso get_odso();
    public void set_odso(CT_Odso value);
}
[XmlTypeAttribute]
[XmlRootAttribute]
public class NPOI.OpenXmlFormats.Wordprocessing.CT_MailMergeDataType : object {
    private ST_MailMergeDataType valField;
    [XmlAttributeAttribute]
public ST_MailMergeDataType val { get; public set; }
    public static CT_MailMergeDataType Parse(XmlNode node, XmlNamespaceManager namespaceManager);
    internal void Write(StreamWriter sw, string nodeName);
    public ST_MailMergeDataType get_val();
    public void set_val(ST_MailMergeDataType value);
}
[XmlTypeAttribute]
[XmlRootAttribute]
public class NPOI.OpenXmlFormats.Wordprocessing.CT_MailMergeDest : object {
    private ST_MailMergeDest valField;
    [XmlAttributeAttribute]
public ST_MailMergeDest val { get; public set; }
    public static CT_MailMergeDest Parse(XmlNode node, XmlNamespaceManager namespaceManager);
    internal void Write(StreamWriter sw, string nodeName);
    public ST_MailMergeDest get_val();
    public void set_val(ST_MailMergeDest value);
}
[XmlTypeAttribute]
[XmlRootAttribute]
public class NPOI.OpenXmlFormats.Wordprocessing.CT_MailMergeDocType : object {
    private ST_MailMergeDocType valField;
    [XmlAttributeAttribute]
public ST_MailMergeDocType val { get; public set; }
    public static CT_MailMergeDocType Parse(XmlNode node, XmlNamespaceManager namespaceManager);
    internal void Write(StreamWriter sw, string nodeName);
    public ST_MailMergeDocType get_val();
    public void set_val(ST_MailMergeDocType value);
}
[XmlTypeAttribute]
[XmlRootAttribute]
public class NPOI.OpenXmlFormats.Wordprocessing.CT_MailMergeOdsoFMDFieldType : object {
    private ST_MailMergeOdsoFMDFieldType valField;
    [XmlAttributeAttribute]
public ST_MailMergeOdsoFMDFieldType val { get; public set; }
    public static CT_MailMergeOdsoFMDFieldType Parse(XmlNode node, XmlNamespaceManager namespaceManager);
    internal void Write(StreamWriter sw, string nodeName);
    public ST_MailMergeOdsoFMDFieldType get_val();
    public void set_val(ST_MailMergeOdsoFMDFieldType value);
}
[XmlTypeAttribute]
[XmlRootAttribute]
public class NPOI.OpenXmlFormats.Wordprocessing.CT_MailMergeSourceType : object {
    private ST_MailMergeSourceType valField;
    [XmlAttributeAttribute]
public ST_MailMergeSourceType val { get; public set; }
    public static CT_MailMergeSourceType Parse(XmlNode node, XmlNamespaceManager namespaceManager);
    internal void Write(StreamWriter sw, string nodeName);
    public ST_MailMergeSourceType get_val();
    public void set_val(ST_MailMergeSourceType value);
}
[XmlIncludeAttribute("NPOI.OpenXmlFormats.Wordprocessing.CT_TblGridChange")]
[XmlIncludeAttribute("NPOI.OpenXmlFormats.Wordprocessing.CT_MarkupRange")]
[XmlIncludeAttribute("NPOI.OpenXmlFormats.Wordprocessing.CT_BookmarkRange")]
[XmlIncludeAttribute("NPOI.OpenXmlFormats.Wordprocessing.CT_Bookmark")]
[XmlIncludeAttribute("NPOI.OpenXmlFormats.Wordprocessing.CT_MoveBookmark")]
[XmlIncludeAttribute("NPOI.OpenXmlFormats.Wordprocessing.CT_TrackChange")]
[XmlIncludeAttribute("NPOI.OpenXmlFormats.Wordprocessing.CT_RunTrackChange")]
[XmlIncludeAttribute("NPOI.OpenXmlFormats.Wordprocessing.CT_RPrChange")]
[XmlIncludeAttribute("NPOI.OpenXmlFormats.Wordprocessing.CT_ParaRPrChange")]
[XmlIncludeAttribute("NPOI.OpenXmlFormats.Wordprocessing.CT_PPrChange")]
[XmlIncludeAttribute("NPOI.OpenXmlFormats.Wordprocessing.CT_SectPrChange")]
[XmlIncludeAttribute("NPOI.OpenXmlFormats.Wordprocessing.CT_TblPrChange")]
[XmlIncludeAttribute("NPOI.OpenXmlFormats.Wordprocessing.CT_TrPrChange")]
[XmlIncludeAttribute("NPOI.OpenXmlFormats.Wordprocessing.CT_TcPrChange")]
[XmlIncludeAttribute("NPOI.OpenXmlFormats.Wordprocessing.CT_TblPrExChange")]
[XmlIncludeAttribute("NPOI.OpenXmlFormats.Wordprocessing.CT_TrackChangeNumbering")]
[XmlIncludeAttribute("NPOI.OpenXmlFormats.Wordprocessing.CT_Comment")]
[XmlIncludeAttribute("NPOI.OpenXmlFormats.Wordprocessing.CT_TrackChangeRange")]
[XmlIncludeAttribute("NPOI.OpenXmlFormats.Wordprocessing.CT_CellMergeTrackChange")]
[XmlTypeAttribute]
[XmlRootAttribute]
public class NPOI.OpenXmlFormats.Wordprocessing.CT_Markup : object {
    private string idField;
    public string id { get; public set; }
    public static CT_Markup Parse(XmlNode node, XmlNamespaceManager namespaceManager);
    internal void Write(StreamWriter sw, string nodeName);
    public string get_id();
    public void set_id(string value);
}
[XmlIncludeAttribute("NPOI.OpenXmlFormats.Wordprocessing.CT_BookmarkRange")]
[XmlIncludeAttribute("NPOI.OpenXmlFormats.Wordprocessing.CT_Bookmark")]
[XmlIncludeAttribute("NPOI.OpenXmlFormats.Wordprocessing.CT_MoveBookmark")]
[XmlTypeAttribute]
[XmlRootAttribute]
public class NPOI.OpenXmlFormats.Wordprocessing.CT_MarkupRange : CT_Markup {
    private ST_DisplacedByCustomXml displacedByCustomXmlField;
    private bool displacedByCustomXmlFieldSpecified;
    [XmlAttributeAttribute]
public ST_DisplacedByCustomXml displacedByCustomXml { get; public set; }
    [XmlIgnoreAttribute]
public bool displacedByCustomXmlSpecified { get; public set; }
    public static CT_MarkupRange Parse(XmlNode node, XmlNamespaceManager namespaceManager);
    internal void Write(StreamWriter sw, string nodeName);
    public ST_DisplacedByCustomXml get_displacedByCustomXml();
    public void set_displacedByCustomXml(ST_DisplacedByCustomXml value);
    public bool get_displacedByCustomXmlSpecified();
    public void set_displacedByCustomXmlSpecified(bool value);
}
[XmlTypeAttribute]
[XmlRootAttribute]
public class NPOI.OpenXmlFormats.Wordprocessing.CT_MoveBookmark : CT_Bookmark {
    private string authorField;
    private string dateField;
    [XmlAttributeAttribute]
public string author { get; public set; }
    [XmlAttributeAttribute]
public string date { get; public set; }
    public static CT_MoveBookmark Parse(XmlNode node, XmlNamespaceManager namespaceManager);
    internal void Write(StreamWriter sw, string nodeName);
    public string get_author();
    public void set_author(string value);
    public string get_date();
    public void set_date(string value);
}
[XmlTypeAttribute]
[XmlRootAttribute]
public class NPOI.OpenXmlFormats.Wordprocessing.CT_MultiLevelType : object {
    private ST_MultiLevelType valField;
    [XmlAttributeAttribute]
public ST_MultiLevelType val { get; public set; }
    public static CT_MultiLevelType Parse(XmlNode node, XmlNamespaceManager namespaceManager);
    internal void Write(StreamWriter sw, string nodeName);
    public ST_MultiLevelType get_val();
    public void set_val(ST_MultiLevelType value);
}
[XmlTypeAttribute]
[XmlRootAttribute]
public class NPOI.OpenXmlFormats.Wordprocessing.CT_Num : object {
    private CT_DecimalNumber abstractNumIdField;
    private List`1<CT_NumLvl> lvlOverrideField;
    private string numIdField;
    [XmlElementAttribute]
public CT_DecimalNumber abstractNumId { get; public set; }
    [XmlElementAttribute("lvlOverride")]
public List`1<CT_NumLvl> lvlOverride { get; public set; }
    [XmlAttributeAttribute]
public string numId { get; public set; }
    public static CT_Num Parse(XmlNode node, XmlNamespaceManager namespaceManager);
    internal void Write(StreamWriter sw, string nodeName);
    public CT_DecimalNumber get_abstractNumId();
    public void set_abstractNumId(CT_DecimalNumber value);
    public List`1<CT_NumLvl> get_lvlOverride();
    public void set_lvlOverride(List`1<CT_NumLvl> value);
    public string get_numId();
    public void set_numId(string value);
    public CT_DecimalNumber AddNewAbstractNumId();
    public int SizeOfLvlOverrideArray();
    public CT_NumLvl GetLvlOverrideArray(int i);
}
public class NPOI.OpenXmlFormats.Wordprocessing.CT_Numbering : object {
    private List`1<CT_NumPicBullet> numPicBulletField;
    private List`1<CT_AbstractNum> abstractNumField;
    private List`1<CT_Num> numField;
    private CT_DecimalNumber numIdMacAtCleanupField;
    [XmlElementAttribute("numPicBullet")]
public List`1<CT_NumPicBullet> numPicBullet { get; public set; }
    [XmlElementAttribute("abstractNum")]
public List`1<CT_AbstractNum> abstractNum { get; public set; }
    [XmlElementAttribute("num")]
public List`1<CT_Num> num { get; public set; }
    [XmlElementAttribute]
public CT_DecimalNumber numIdMacAtCleanup { get; public set; }
    public static CT_Numbering Parse(XmlNode node, XmlNamespaceManager namespaceManager);
    internal void Write(StreamWriter sw);
    public List`1<CT_NumPicBullet> get_numPicBullet();
    public void set_numPicBullet(List`1<CT_NumPicBullet> value);
    public List`1<CT_AbstractNum> get_abstractNum();
    public void set_abstractNum(List`1<CT_AbstractNum> value);
    public List`1<CT_Num> get_num();
    public void set_num(List`1<CT_Num> value);
    public CT_DecimalNumber get_numIdMacAtCleanup();
    public void set_numIdMacAtCleanup(CT_DecimalNumber value);
    public IList`1<CT_Num> GetNumList();
    public IList`1<CT_AbstractNum> GetAbstractNumList();
    public CT_Num AddNewNum();
    public void SetNumArray(int pos, CT_Num ct_Num);
    public CT_AbstractNum AddNewAbstractNum();
    public void SetAbstractNumArray(int pos, CT_AbstractNum cT_AbstractNum);
    public void RemoveAbstractNum(int p);
}
[XmlTypeAttribute]
[XmlRootAttribute]
public class NPOI.OpenXmlFormats.Wordprocessing.CT_NumFmt : object {
    private ST_NumberFormat valField;
    [XmlAttributeAttribute]
public ST_NumberFormat val { get; public set; }
    public static CT_NumFmt Parse(XmlNode node, XmlNamespaceManager namespaceManager);
    internal void Write(StreamWriter sw, string nodeName);
    public ST_NumberFormat get_val();
    public void set_val(ST_NumberFormat value);
}
[XmlTypeAttribute]
[XmlRootAttribute]
public class NPOI.OpenXmlFormats.Wordprocessing.CT_NumLvl : object {
    private CT_DecimalNumber startOverrideField;
    private CT_Lvl lvlField;
    private string ilvlField;
    [XmlElementAttribute]
public CT_DecimalNumber startOverride { get; public set; }
    [XmlElementAttribute]
public CT_Lvl lvl { get; public set; }
    [XmlAttributeAttribute]
public string ilvl { get; public set; }
    public static CT_NumLvl Parse(XmlNode node, XmlNamespaceManager namespaceManager);
    internal void Write(StreamWriter sw, string nodeName);
    public CT_DecimalNumber get_startOverride();
    public void set_startOverride(CT_DecimalNumber value);
    public CT_Lvl get_lvl();
    public void set_lvl(CT_Lvl value);
    public string get_ilvl();
    public void set_ilvl(string value);
}
[XmlTypeAttribute]
[XmlRootAttribute]
public class NPOI.OpenXmlFormats.Wordprocessing.CT_NumPicBullet : object {
    private CT_Picture pictField;
    private string numPicBulletIdField;
    [XmlElementAttribute]
public CT_Picture pict { get; public set; }
    [XmlAttributeAttribute]
public string numPicBulletId { get; public set; }
    public CT_Picture get_pict();
    public void set_pict(CT_Picture value);
    public string get_numPicBulletId();
    public void set_numPicBulletId(string value);
    public static CT_NumPicBullet Parse(XmlNode node, XmlNamespaceManager namespaceManager);
    internal void Write(StreamWriter sw, string nodeName);
}
[XmlTypeAttribute]
[XmlRootAttribute]
public class NPOI.OpenXmlFormats.Wordprocessing.CT_NumPr : object {
    private CT_DecimalNumber ilvlField;
    private CT_DecimalNumber numIdField;
    private CT_TrackChangeNumbering numberingChangeField;
    private CT_TrackChange insField;
    [XmlElementAttribute]
public CT_DecimalNumber ilvl { get; public set; }
    [XmlElementAttribute]
public CT_DecimalNumber numId { get; public set; }
    [XmlElementAttribute]
public CT_TrackChangeNumbering numberingChange { get; public set; }
    [XmlElementAttribute]
public CT_TrackChange ins { get; public set; }
    public static CT_NumPr Parse(XmlNode node, XmlNamespaceManager namespaceManager);
    internal void Write(StreamWriter sw, string nodeName);
    public CT_DecimalNumber AddNewIlvl();
    public CT_DecimalNumber get_ilvl();
    public void set_ilvl(CT_DecimalNumber value);
    public CT_DecimalNumber get_numId();
    public void set_numId(CT_DecimalNumber value);
    public CT_TrackChangeNumbering get_numberingChange();
    public void set_numberingChange(CT_TrackChangeNumbering value);
    public CT_TrackChange get_ins();
    public void set_ins(CT_TrackChange value);
    public CT_DecimalNumber AddNewNumId();
}
[XmlTypeAttribute]
[XmlRootAttribute]
public class NPOI.OpenXmlFormats.Wordprocessing.CT_NumRestart : object {
    private ST_RestartNumber valField;
    [XmlAttributeAttribute]
public ST_RestartNumber val { get; public set; }
    public static CT_NumRestart Parse(XmlNode node, XmlNamespaceManager namespaceManager);
    internal void Write(StreamWriter sw, string nodeName);
    public ST_RestartNumber get_val();
    public void set_val(ST_RestartNumber value);
}
[XmlTypeAttribute]
[XmlRootAttribute]
public class NPOI.OpenXmlFormats.Wordprocessing.CT_Object : CT_PictureBase {
    private CT_Control controlField;
    private ulong dxaOrigField;
    private bool dxaOrigFieldSpecified;
    private ulong dyaOrigField;
    private bool dyaOrigFieldSpecified;
    [XmlElementAttribute]
public CT_Control control { get; public set; }
    [XmlAttributeAttribute]
public ulong dxaOrig { get; public set; }
    [XmlIgnoreAttribute]
public bool dxaOrigSpecified { get; public set; }
    [XmlAttributeAttribute]
public ulong dyaOrig { get; public set; }
    [XmlIgnoreAttribute]
public bool dyaOrigSpecified { get; public set; }
    public CT_Control get_control();
    public void set_control(CT_Control value);
    public ulong get_dxaOrig();
    public void set_dxaOrig(ulong value);
    public bool get_dxaOrigSpecified();
    public void set_dxaOrigSpecified(bool value);
    public ulong get_dyaOrig();
    public void set_dyaOrig(ulong value);
    public bool get_dyaOrigSpecified();
    public void set_dyaOrigSpecified(bool value);
    public static CT_Object Parse(XmlNode node, XmlNamespaceManager namespaceManager);
    internal void Write(StreamWriter sw, string nodeName);
}
[XmlTypeAttribute]
[XmlRootAttribute]
public class NPOI.OpenXmlFormats.Wordprocessing.CT_Odso : object {
    private CT_String udlField;
    private CT_String tableField;
    private CT_Rel srcField;
    private CT_DecimalNumber colDelimField;
    private CT_MailMergeSourceType typeField;
    private CT_OnOff fHdrField;
    private List`1<CT_OdsoFieldMapData> fieldMapDataField;
    private List`1<CT_Rel> recipientDataField;
    [XmlElementAttribute]
public CT_String udl { get; public set; }
    [XmlElementAttribute]
public CT_String table { get; public set; }
    [XmlElementAttribute]
public CT_Rel src { get; public set; }
    [XmlElementAttribute]
public CT_DecimalNumber colDelim { get; public set; }
    [XmlElementAttribute]
public CT_MailMergeSourceType type { get; public set; }
    [XmlElementAttribute]
public CT_OnOff fHdr { get; public set; }
    [XmlElementAttribute("fieldMapData")]
public List`1<CT_OdsoFieldMapData> fieldMapData { get; public set; }
    [XmlElementAttribute("recipientData")]
public List`1<CT_Rel> recipientData { get; public set; }
    public static CT_Odso Parse(XmlNode node, XmlNamespaceManager namespaceManager);
    internal void Write(StreamWriter sw, string nodeName);
    public CT_String get_udl();
    public void set_udl(CT_String value);
    public CT_String get_table();
    public void set_table(CT_String value);
    public CT_Rel get_src();
    public void set_src(CT_Rel value);
    public CT_DecimalNumber get_colDelim();
    public void set_colDelim(CT_DecimalNumber value);
    public CT_MailMergeSourceType get_type();
    public void set_type(CT_MailMergeSourceType value);
    public CT_OnOff get_fHdr();
    public void set_fHdr(CT_OnOff value);
    public List`1<CT_OdsoFieldMapData> get_fieldMapData();
    public void set_fieldMapData(List`1<CT_OdsoFieldMapData> value);
    public List`1<CT_Rel> get_recipientData();
    public void set_recipientData(List`1<CT_Rel> value);
}
[XmlTypeAttribute]
[XmlRootAttribute]
public class NPOI.OpenXmlFormats.Wordprocessing.CT_OdsoFieldMapData : object {
    private CT_MailMergeOdsoFMDFieldType typeField;
    private CT_String nameField;
    private CT_String mappedNameField;
    private CT_DecimalNumber columnField;
    private CT_Lang lidField;
    private CT_OnOff dynamicAddressField;
    [XmlElementAttribute]
public CT_MailMergeOdsoFMDFieldType type { get; public set; }
    [XmlElementAttribute]
public CT_String name { get; public set; }
    [XmlElementAttribute]
public CT_String mappedName { get; public set; }
    [XmlElementAttribute]
public CT_DecimalNumber column { get; public set; }
    [XmlElementAttribute]
public CT_Lang lid { get; public set; }
    [XmlElementAttribute]
public CT_OnOff dynamicAddress { get; public set; }
    public static CT_OdsoFieldMapData Parse(XmlNode node, XmlNamespaceManager namespaceManager);
    internal void Write(StreamWriter sw, string nodeName);
    public CT_MailMergeOdsoFMDFieldType get_type();
    public void set_type(CT_MailMergeOdsoFMDFieldType value);
    public CT_String get_name();
    public void set_name(CT_String value);
    public CT_String get_mappedName();
    public void set_mappedName(CT_String value);
    public CT_DecimalNumber get_column();
    public void set_column(CT_DecimalNumber value);
    public CT_Lang get_lid();
    public void set_lid(CT_Lang value);
    public CT_OnOff get_dynamicAddress();
    public void set_dynamicAddress(CT_OnOff value);
}
[XmlTypeAttribute]
[XmlRootAttribute]
public class NPOI.OpenXmlFormats.Wordprocessing.CT_OnOff : object {
    private bool valField;
    private bool valFieldSpecified;
    [XmlAttributeAttribute]
public bool val { get; public set; }
    [XmlIgnoreAttribute]
public bool valSpecified { get; public set; }
    public static CT_OnOff Parse(XmlNode node, XmlNamespaceManager namespaceManager);
    internal void Write(StreamWriter sw, string nodeName);
    public bool get_val();
    public void set_val(bool value);
    public bool get_valSpecified();
    public void set_valSpecified(bool value);
    public void UnSetVal();
    public bool IsSetVal();
}
[XmlTypeAttribute]
[XmlRootAttribute]
public class NPOI.OpenXmlFormats.Wordprocessing.CT_P : object {
    private CT_PPr pPrField;
    private ArrayList itemsField;
    private List`1<ParagraphItemsChoiceType> itemsElementNameField;
    private Byte[] rsidRPrField;
    private Byte[] rsidRField;
    private Byte[] rsidDelField;
    private Byte[] rsidPField;
    private Byte[] rsidRDefaultField;
    private Byte[] paraIdField;
    private Byte[] textIdField;
    [XmlElementAttribute]
public CT_PPr pPr { get; public set; }
    [XmlElementAttribute("oMath", "NPOI.OpenXmlFormats.Shared.CT_OMath")]
[XmlElementAttribute("oMathPara", "NPOI.OpenXmlFormats.Shared.CT_OMathPara")]
[XmlElementAttribute("bookmarkEnd", "NPOI.OpenXmlFormats.Wordprocessing.CT_MarkupRange")]
[XmlElementAttribute("bookmarkStart", "NPOI.OpenXmlFormats.Wordprocessing.CT_Bookmark")]
[XmlElementAttribute("commentRangeEnd", "NPOI.OpenXmlFormats.Wordprocessing.CT_MarkupRange")]
[XmlElementAttribute("commentRangeStart", "NPOI.OpenXmlFormats.Wordprocessing.CT_MarkupRange")]
[XmlElementAttribute("customXml", "NPOI.OpenXmlFormats.Wordprocessing.CT_CustomXmlRun")]
[XmlElementAttribute("customXmlDelRangeEnd", "NPOI.OpenXmlFormats.Wordprocessing.CT_Markup")]
[XmlElementAttribute("customXmlDelRangeStart", "NPOI.OpenXmlFormats.Wordprocessing.CT_TrackChange")]
[XmlElementAttribute("customXmlInsRangeEnd", "NPOI.OpenXmlFormats.Wordprocessing.CT_Markup")]
[XmlElementAttribute("customXmlInsRangeStart", "NPOI.OpenXmlFormats.Wordprocessing.CT_TrackChange")]
[XmlElementAttribute("customXmlMoveFromRangeEnd", "NPOI.OpenXmlFormats.Wordprocessing.CT_Markup")]
[XmlElementAttribute("customXmlMoveFromRangeStart", "NPOI.OpenXmlFormats.Wordprocessing.CT_TrackChange")]
[XmlElementAttribute("customXmlMoveToRangeEnd", "NPOI.OpenXmlFormats.Wordprocessing.CT_Markup")]
[XmlElementAttribute("customXmlMoveToRangeStart", "NPOI.OpenXmlFormats.Wordprocessing.CT_TrackChange")]
[XmlElementAttribute("del", "NPOI.OpenXmlFormats.Wordprocessing.CT_RunTrackChange")]
[XmlElementAttribute("fldSimple", "NPOI.OpenXmlFormats.Wordprocessing.CT_SimpleField")]
[XmlElementAttribute("hyperlink", "NPOI.OpenXmlFormats.Wordprocessing.CT_Hyperlink1")]
[XmlElementAttribute("ins", "NPOI.OpenXmlFormats.Wordprocessing.CT_RunTrackChange")]
[XmlElementAttribute("moveFrom", "NPOI.OpenXmlFormats.Wordprocessing.CT_RunTrackChange")]
[XmlElementAttribute("moveFromRangeEnd", "NPOI.OpenXmlFormats.Wordprocessing.CT_MarkupRange")]
[XmlElementAttribute("moveFromRangeStart", "NPOI.OpenXmlFormats.Wordprocessing.CT_MoveBookmark")]
[XmlElementAttribute("moveTo", "NPOI.OpenXmlFormats.Wordprocessing.CT_RunTrackChange")]
[XmlElementAttribute("moveToRangeEnd", "NPOI.OpenXmlFormats.Wordprocessing.CT_MarkupRange")]
[XmlElementAttribute("moveToRangeStart", "NPOI.OpenXmlFormats.Wordprocessing.CT_MoveBookmark")]
[XmlElementAttribute("permEnd", "NPOI.OpenXmlFormats.Wordprocessing.CT_Perm")]
[XmlElementAttribute("permStart", "NPOI.OpenXmlFormats.Wordprocessing.CT_PermStart")]
[XmlElementAttribute("proofErr", "NPOI.OpenXmlFormats.Wordprocessing.CT_ProofErr")]
[XmlElementAttribute("r", "NPOI.OpenXmlFormats.Wordprocessing.CT_R")]
[XmlElementAttribute("sdt", "NPOI.OpenXmlFormats.Wordprocessing.CT_SdtRun")]
[XmlElementAttribute("smartTag", "NPOI.OpenXmlFormats.Wordprocessing.CT_SmartTagRun")]
[XmlElementAttribute("subDoc", "NPOI.OpenXmlFormats.Wordprocessing.CT_Rel")]
[XmlChoiceIdentifierAttribute("ItemsElementName")]
public ArrayList Items { get; public set; }
    [XmlElementAttribute("ItemsElementName")]
[XmlIgnoreAttribute]
public List`1<ParagraphItemsChoiceType> ItemsElementName { get; public set; }
    [XmlAttributeAttribute]
public Byte[] rsidRPr { get; public set; }
    [XmlAttributeAttribute]
public Byte[] rsidR { get; public set; }
    [XmlAttributeAttribute]
public Byte[] rsidDel { get; public set; }
    [XmlAttributeAttribute]
public Byte[] rsidP { get; public set; }
    [XmlAttributeAttribute]
public Byte[] rsidRDefault { get; public set; }
    public CT_PPr get_pPr();
    public void set_pPr(CT_PPr value);
    public bool IsSetPPr();
    public static CT_P Parse(XmlNode node, XmlNamespaceManager namespaceManager);
    public bool IsSetRsidR();
    internal void Write(StreamWriter sw, string nodeName);
    public ArrayList get_Items();
    public void set_Items(ArrayList value);
    public List`1<ParagraphItemsChoiceType> get_ItemsElementName();
    public void set_ItemsElementName(List`1<ParagraphItemsChoiceType> value);
    public Byte[] get_rsidRPr();
    public void set_rsidRPr(Byte[] value);
    public Byte[] get_rsidR();
    public void set_rsidR(Byte[] value);
    public Byte[] get_rsidDel();
    public void set_rsidDel(Byte[] value);
    public Byte[] get_rsidP();
    public void set_rsidP(Byte[] value);
    public Byte[] get_rsidRDefault();
    public void set_rsidRDefault(Byte[] value);
    public CT_PPr AddNewPPr();
    private List`1<T> GetObjectList(ParagraphItemsChoiceType type);
    private int SizeOfArray(ParagraphItemsChoiceType type);
    private T GetObjectArray(int p, ParagraphItemsChoiceType type);
    private T InsertNewObject(ParagraphItemsChoiceType type, int p);
    private T AddNewObject(ParagraphItemsChoiceType type);
    private void SetObject(ParagraphItemsChoiceType type, int p, T obj);
    private int GetObjectIndex(ParagraphItemsChoiceType type, int p);
    private void RemoveObject(ParagraphItemsChoiceType type, int p);
    public CT_MarkupRange AddNewBookmarkEnd();
    public CT_Bookmark AddNewBookmarkStart();
    public CT_MarkupRange AddNewCommentRangeEnd();
    public CT_MarkupRange AddNewCommentRangeStart();
    public CT_CustomXmlRun AddNewCustomXml();
    public CT_Markup AddNewCustomXmlDelRangeEnd();
    public CT_TrackChange AddNewCustomXmlDelRangeStart();
    public CT_Markup AddNewCustomXmlInsRangeEnd();
    public CT_TrackChange AddNewCustomXmlInsRangeStart();
    public CT_Markup AddNewCustomXmlMoveFromRangeEnd();
    public CT_TrackChange AddNewCustomXmlMoveFromRangeStart();
    public CT_Markup AddNewCustomXmlMoveToRangeEnd();
    public CT_TrackChange AddNewCustomXmlMoveToRangeStart();
    public CT_RunTrackChange AddNewDel();
    public CT_SimpleField AddNewFldSimple();
    public CT_Hyperlink1 AddNewHyperlink();
    public CT_RunTrackChange AddNewIns();
    public CT_RunTrackChange AddNewMoveFrom();
    public CT_MarkupRange AddNewMoveFromRangeEnd();
    public CT_MoveBookmark AddNewMoveFromRangeStart();
    public CT_RunTrackChange AddNewMoveTo();
    public CT_MarkupRange AddNewMoveToRangeEnd();
    public CT_MoveBookmark AddNewMoveToRangeStart();
    public CT_OMath AddNewOMath();
    public CT_OMathPara AddNewOMathPara();
    public CT_Perm AddNewPermEnd();
    public CT_PermStart AddNewPermStart();
    public CT_ProofErr AddNewProofErr();
    public CT_R AddNewR();
    public CT_SdtRun AddNewSdt();
    public CT_SmartTagRun AddNewSmartTag();
    public CT_Rel AddNewSubDoc();
    public CT_MarkupRange GetBookmarkEndArray(int p);
    public CT_Bookmark GetBookmarkStartArray(int p);
    public CT_MarkupRange GetCommentRangeEndArray(int p);
    public CT_MarkupRange GetCommentRangeStartArray(int p);
    public CT_CustomXmlRun GetCustomXmlArray(int p);
    public CT_Markup GetCustomXmlDelRangeEndArray(int p);
    public CT_TrackChange GetCustomXmlDelRangeStartArray(int p);
    public CT_Markup GetCustomXmlInsRangeEndArray(int p);
    public CT_TrackChange GetCustomXmlInsRangeStartArray(int p);
    public CT_Markup GetCustomXmlMoveFromRangeEndArray(int p);
    public CT_TrackChange GetCustomXmlMoveFromRangeStartArray(int p);
    public CT_Markup GetCustomXmlMoveToRangeEndArray(int p);
    public CT_TrackChange GetCustomXmlMoveToRangeStartArray(int p);
    public CT_RunTrackChange GetDelArray(int p);
    public CT_SimpleField GetFldSimpleArray(int p);
    public CT_Hyperlink1 GetHyperlinkArray(int p);
    public CT_RunTrackChange GetInsArray(int p);
    public CT_RunTrackChange GetMoveFromArray(int p);
    public CT_MarkupRange GetMoveFromRangeEndArray(int p);
    public CT_MoveBookmark GetMoveFromRangeStartArray(int p);
    public CT_RunTrackChange GetMoveToArray(int p);
    public CT_MarkupRange GetMoveToRangeEndArray(int p);
    public CT_MoveBookmark GetMoveToRangeStartArray(int p);
    public CT_OMath GetOMathArray(int p);
    public CT_OMathPara GetOMathParaArray(int p);
    public CT_Perm GetPermEndArray(int p);
    public CT_PermStart GetPermStartArray(int p);
    public CT_ProofErr GetProofErrArray(int p);
    public CT_R GetRArray(int p);
    public CT_SdtRun GetSdtArray(int p);
    public CT_SmartTagRun GetSmartTagArray(int p);
    public CT_Rel GetSubDocArray(int p);
    public IList`1<CT_MarkupRange> GetBookmarkEndList();
    public IList`1<CT_Bookmark> GetBookmarkStartList();
    public IList`1<CT_MarkupRange> GetCommentRangeEndList();
    public IList`1<CT_MarkupRange> GetCommentRangeStartList();
    public IList`1<CT_CustomXmlRun> GetCustomXmlList();
    public IList`1<CT_Markup> GetCustomXmlDelRangeEndList();
    public IList`1<CT_TrackChange> GetCustomXmlDelRangeStartList();
    public IList`1<CT_Markup> GetCustomXmlInsRangeEndList();
    public IList`1<CT_TrackChange> GetCustomXmlInsRangeStartList();
    public IList`1<CT_Markup> GetCustomXmlMoveFromRangeEndList();
    public IList`1<CT_TrackChange> GetCustomXmlMoveFromRangeStartList();
    public IList`1<CT_Markup> GetCustomXmlMoveToRangeEndList();
    public IList`1<CT_TrackChange> GetCustomXmlMoveToRangeStartList();
    public IList`1<CT_RunTrackChange> GetDelList();
    public IList`1<CT_SimpleField> GetFldSimpleList();
    public IList`1<CT_Hyperlink1> GetHyperlinkList();
    public IList`1<CT_RunTrackChange> GetInsList();
    public IList`1<CT_RunTrackChange> GetMoveFromList();
    public IList`1<CT_MarkupRange> GetMoveFromRangeEndList();
    public IList`1<CT_MoveBookmark> GetMoveFromRangeStartList();
    public IList`1<CT_RunTrackChange> GetMoveToList();
    public IList`1<CT_MarkupRange> GetMoveToRangeEndList();
    public IList`1<CT_MoveBookmark> GetMoveToRangeStartList();
    public IList`1<CT_OMath> GetOMathList();
    public IList`1<CT_OMathPara> GetOMathParaList();
    public IList`1<CT_Perm> GetPermEndList();
    public IList`1<CT_PermStart> GetPermStartList();
    public IList`1<CT_ProofErr> GetProofErrList();
    public IList`1<CT_R> GetRList();
    public IList`1<CT_SdtRun> GetSdtList();
    public IList`1<CT_SmartTagRun> GetSmartTagList();
    public IList`1<CT_Rel> GetSubDocList();
    public CT_MarkupRange InsertNewBookmarkEnd(int p);
    public CT_Bookmark InsertNewBookmarkStart(int p);
    public CT_MarkupRange InsertNewCommentRangeEnd(int p);
    public CT_MarkupRange InsertNewCommentRangeStart(int p);
    public CT_CustomXmlRun InsertNewCustomXml(int p);
    public CT_Markup InsertNewCustomXmlDelRangeEnd(int p);
    public CT_TrackChange InsertNewCustomXmlDelRangeStart(int p);
    public CT_Markup InsertNewCustomXmlInsRangeEnd(int p);
    public CT_TrackChange InsertNewCustomXmlInsRangeStart(int p);
    public CT_Markup InsertNewCustomXmlMoveFromRangeEnd(int p);
    public CT_TrackChange InsertNewCustomXmlMoveFromRangeStart(int p);
    public CT_Markup InsertNewCustomXmlMoveToRangeEnd(int p);
    public CT_TrackChange InsertNewCustomXmlMoveToRangeStart(int p);
    public CT_RunTrackChange InsertNewDel(int p);
    public CT_SimpleField InsertNewFldSimple(int p);
    public CT_Hyperlink1 InsertNewHyperlink(int p);
    public CT_RunTrackChange InsertNewIns(int p);
    public CT_RunTrackChange InsertNewMoveFrom(int p);
    public CT_MarkupRange InsertNewMoveFromRangeEnd(int p);
    public CT_MoveBookmark InsertNewMoveFromRangeStart(int p);
    public CT_RunTrackChange InsertNewMoveTo(int p);
    public CT_MarkupRange InsertNewMoveToRangeEnd(int p);
    public CT_MoveBookmark InsertNewMoveToRangeStart(int p);
    public CT_OMath InsertNewOMath(int p);
    public CT_OMathPara InsertNewOMathPara(int p);
    public CT_Perm InsertNewPermEnd(int p);
    public CT_PermStart InsertNewPermStart(int p);
    public CT_ProofErr InsertNewProofErr(int p);
    public CT_R InsertNewR(int p);
    public CT_SdtRun InsertNewSdt(int p);
    public CT_SmartTagRun InsertNewSmartTag(int p);
    public CT_Rel InsertNewSubDoc(int p);
    public void RemoveBookmarkEnd(int p);
    public void RemoveBookmarkStart(int p);
    public void RemoveCommentRangeEnd(int p);
    public void RemoveCommentRangeStart(int p);
    public void RemoveCustomXml(int p);
    public void RemoveCustomXmlDelRangeEnd(int p);
    public void RemoveCustomXmlDelRangeStart(int p);
    public void RemoveCustomXmlInsRangeEnd(int p);
    public void RemoveCustomXmlInsRangeStart(int p);
    public void RemoveCustomXmlMoveFromRangeEnd(int p);
    public void RemoveCustomXmlMoveFromRangeStart(int p);
    public void RemoveCustomXmlMoveToRangeEnd(int p);
    public void RemoveCustomXmlMoveToRangeStart(int p);
    public void RemoveDel(int p);
    public void RemoveFldSimple(int p);
    public void RemoveHyperlink(int p);
    public void RemoveIns(int p);
    public void RemoveMoveFrom(int p);
    public void RemoveMoveFromRangeEnd(int p);
    public void RemoveMoveFromRangeStart(int p);
    public void RemoveMoveTo(int p);
    public void RemoveMoveToRangeEnd(int p);
    public void RemoveMoveToRangeStart(int p);
    public void RemoveOMath(int p);
    public void RemoveOMathPara(int p);
    public void RemovePermEnd(int p);
    public void RemovePermStart(int p);
    public void RemoveProofErr(int p);
    public void RemoveR(int p);
    public void RemoveSdt(int p);
    public void RemoveSmartTag(int p);
    public void RemoveSubDoc(int p);
    public void SetBookmarkEndArray(int p, CT_MarkupRange obj);
    public void SetBookmarkStartArray(int p, CT_Bookmark obj);
    public void SetCommentRangeEndArray(int p, CT_MarkupRange obj);
    public void SetCommentRangeStartArray(int p, CT_MarkupRange obj);
    public void SetCustomXmlArray(int p, CT_CustomXmlRun obj);
    public void SetCustomXmlDelRangeEndArray(int p, CT_Markup obj);
    public void SetCustomXmlDelRangeStartArray(int p, CT_TrackChange obj);
    public void SetCustomXmlInsRangeEndArray(int p, CT_Markup obj);
    public void SetCustomXmlInsRangeStartArray(int p, CT_TrackChange obj);
    public void SetCustomXmlMoveFromRangeEndArray(int p, CT_Markup obj);
    public void SetCustomXmlMoveFromRangeStartArray(int p, CT_TrackChange obj);
    public void SetCustomXmlMoveToRangeEndArray(int p, CT_Markup obj);
    public void SetCustomXmlMoveToRangeStartArray(int p, CT_TrackChange obj);
    public void SetDelArray(int p, CT_RunTrackChange obj);
    public void SetFldSimpleArray(int p, CT_SimpleField obj);
    public void SetHyperlinkArray(int p, CT_Hyperlink1 obj);
    public void SetInsArray(int p, CT_RunTrackChange obj);
    public void SetMoveFromArray(int p, CT_RunTrackChange obj);
    public void SetMoveFromRangeEndArray(int p, CT_MarkupRange obj);
    public void SetMoveFromRangeStartArray(int p, CT_MoveBookmark obj);
    public void SetMoveToArray(int p, CT_RunTrackChange obj);
    public void SetMoveToRangeEndArray(int p, CT_MarkupRange obj);
    public void SetMoveToRangeStartArray(int p, CT_MoveBookmark obj);
    public void SetOMathArray(int p, CT_OMath obj);
    public void SetOMathParaArray(int p, CT_OMathPara obj);
    public void SetPermEndArray(int p, CT_Perm obj);
    public void SetPermStartArray(int p, CT_PermStart obj);
    public void SetProofErrArray(int p, CT_ProofErr obj);
    public void SetRArray(int p, CT_R obj);
    public void SetSdtArray(int p, CT_SdtRun obj);
    public void SetSmartTagArray(int p, CT_SmartTagRun obj);
    public void SetSubDocArray(int p, CT_Rel obj);
    public int SizeOfBookmarkEndArray();
    public int SizeOfBookmarkStartArray();
    public int SizeOfCommentRangeEndArray();
    public int SizeOfCommentRangeStartArray();
    public int SizeOfCustomXmlArray();
    public int SizeOfCustomXmlDelRangeEndArray();
    public int SizeOfCustomXmlDelRangeStartArray();
    public int SizeOfCustomXmlInsRangeEndArray();
    public int SizeOfCustomXmlInsRangeStartArray();
    public int SizeOfCustomXmlMoveFromRangeEndArray();
    public int SizeOfCustomXmlMoveFromRangeStartArray();
    public int SizeOfCustomXmlMoveToRangeEndArray();
    public int SizeOfCustomXmlMoveToRangeStartArray();
    public int SizeOfDelArray();
    public int SizeOfFldSimpleArray();
    public int SizeOfHyperlinkArray();
    public int SizeOfInsArray();
    public int SizeOfMoveFromArray();
    public int SizeOfMoveFromRangeEndArray();
    public int SizeOfMoveFromRangeStartArray();
    public int SizeOfMoveToArray();
    public int SizeOfMoveToRangeEndArray();
    public int SizeOfMoveToRangeStartArray();
    public int SizeOfOMathArray();
    public int SizeOfOMathParaArray();
    public int SizeOfPermEndArray();
    public int SizeOfPermStartArray();
    public int SizeOfProofErrArray();
    public int SizeOfRArray();
    public int SizeOfSdtArray();
    public int SizeOfSmartTagArray();
    public int SizeOfSubDocArray();
}
[XmlTypeAttribute]
[XmlRootAttribute]
public class NPOI.OpenXmlFormats.Wordprocessing.CT_PageBorders : object {
    private CT_Border topField;
    private CT_Border leftField;
    private CT_Border bottomField;
    private CT_Border rightField;
    private ST_PageBorderZOrder zOrderField;
    private bool zOrderFieldSpecified;
    private ST_PageBorderDisplay displayField;
    private bool displayFieldSpecified;
    private ST_PageBorderOffset offsetFromField;
    private bool offsetFromFieldSpecified;
    [XmlElementAttribute]
public CT_Border top { get; public set; }
    [XmlElementAttribute]
public CT_Border left { get; public set; }
    [XmlElementAttribute]
public CT_Border bottom { get; public set; }
    [XmlElementAttribute]
public CT_Border right { get; public set; }
    [XmlAttributeAttribute]
public ST_PageBorderZOrder zOrder { get; public set; }
    [XmlIgnoreAttribute]
public bool zOrderSpecified { get; public set; }
    [XmlAttributeAttribute]
public ST_PageBorderDisplay display { get; public set; }
    [XmlIgnoreAttribute]
public bool displaySpecified { get; public set; }
    [XmlAttributeAttribute]
public ST_PageBorderOffset offsetFrom { get; public set; }
    [XmlIgnoreAttribute]
public bool offsetFromSpecified { get; public set; }
    public static CT_PageBorders Parse(XmlNode node, XmlNamespaceManager namespaceManager);
    internal void Write(StreamWriter sw, string nodeName);
    public CT_Border get_top();
    public void set_top(CT_Border value);
    public CT_Border get_left();
    public void set_left(CT_Border value);
    public CT_Border get_bottom();
    public void set_bottom(CT_Border value);
    public CT_Border get_right();
    public void set_right(CT_Border value);
    public ST_PageBorderZOrder get_zOrder();
    public void set_zOrder(ST_PageBorderZOrder value);
    public bool get_zOrderSpecified();
    public void set_zOrderSpecified(bool value);
    public ST_PageBorderDisplay get_display();
    public void set_display(ST_PageBorderDisplay value);
    public bool get_displaySpecified();
    public void set_displaySpecified(bool value);
    public ST_PageBorderOffset get_offsetFrom();
    public void set_offsetFrom(ST_PageBorderOffset value);
    public bool get_offsetFromSpecified();
    public void set_offsetFromSpecified(bool value);
}
[XmlTypeAttribute]
[XmlRootAttribute]
public class NPOI.OpenXmlFormats.Wordprocessing.CT_PageMar : object {
    private ulong topField;
    private ulong rightField;
    private ulong bottomField;
    private ulong leftField;
    private ulong headerField;
    private ulong footerField;
    private ulong gutterField;
    [XmlAttributeAttribute]
public ulong top { get; public set; }
    [XmlAttributeAttribute]
public ulong right { get; public set; }
    [XmlAttributeAttribute]
public ulong bottom { get; public set; }
    [XmlAttributeAttribute]
public ulong left { get; public set; }
    [XmlAttributeAttribute]
public ulong header { get; public set; }
    [XmlAttributeAttribute]
public ulong footer { get; public set; }
    public ulong gutter { get; public set; }
    public static CT_PageMar Parse(XmlNode node, XmlNamespaceManager namespaceManager);
    internal void Write(StreamWriter sw, string nodeName);
    public ulong get_top();
    public void set_top(ulong value);
    public ulong get_right();
    public void set_right(ulong value);
    public ulong get_bottom();
    public void set_bottom(ulong value);
    public ulong get_left();
    public void set_left(ulong value);
    public ulong get_header();
    public void set_header(ulong value);
    public ulong get_footer();
    public void set_footer(ulong value);
    public ulong get_gutter();
    public void set_gutter(ulong value);
}
[XmlTypeAttribute]
[XmlRootAttribute]
public class NPOI.OpenXmlFormats.Wordprocessing.CT_PageNumber : object {
    private ST_NumberFormat fmtField;
    private bool fmtFieldSpecified;
    private string startField;
    private string chapStyleField;
    private ST_ChapterSep chapSepField;
    private bool chapSepFieldSpecified;
    [XmlAttributeAttribute]
public ST_NumberFormat fmt { get; public set; }
    [XmlIgnoreAttribute]
public bool fmtSpecified { get; public set; }
    [XmlAttributeAttribute]
public string start { get; public set; }
    [XmlAttributeAttribute]
public string chapStyle { get; public set; }
    [XmlAttributeAttribute]
public ST_ChapterSep chapSep { get; public set; }
    [XmlIgnoreAttribute]
public bool chapSepSpecified { get; public set; }
    public static CT_PageNumber Parse(XmlNode node, XmlNamespaceManager namespaceManager);
    internal void Write(StreamWriter sw, string nodeName);
    public ST_NumberFormat get_fmt();
    public void set_fmt(ST_NumberFormat value);
    public bool get_fmtSpecified();
    public void set_fmtSpecified(bool value);
    public string get_start();
    public void set_start(string value);
    public string get_chapStyle();
    public void set_chapStyle(string value);
    public ST_ChapterSep get_chapSep();
    public void set_chapSep(ST_ChapterSep value);
    public bool get_chapSepSpecified();
    public void set_chapSepSpecified(bool value);
}
[XmlTypeAttribute]
[XmlRootAttribute]
public class NPOI.OpenXmlFormats.Wordprocessing.CT_PageSz : object {
    private ulong wField;
    private bool wFieldSpecified;
    private ulong hField;
    private bool hFieldSpecified;
    private ST_PageOrientation orientField;
    private bool orientFieldSpecified;
    private string codeField;
    [XmlAttributeAttribute]
public ulong w { get; public set; }
    [XmlIgnoreAttribute]
public bool wSpecified { get; public set; }
    [XmlAttributeAttribute]
public ulong h { get; public set; }
    [XmlIgnoreAttribute]
public bool hSpecified { get; public set; }
    [XmlAttributeAttribute]
public ST_PageOrientation orient { get; public set; }
    [XmlIgnoreAttribute]
public bool orientSpecified { get; public set; }
    [XmlAttributeAttribute]
public string code { get; public set; }
    public static CT_PageSz Parse(XmlNode node, XmlNamespaceManager namespaceManager);
    internal void Write(StreamWriter sw, string nodeName);
    public ulong get_w();
    public void set_w(ulong value);
    public bool get_wSpecified();
    public void set_wSpecified(bool value);
    public ulong get_h();
    public void set_h(ulong value);
    public bool get_hSpecified();
    public void set_hSpecified(bool value);
    public ST_PageOrientation get_orient();
    public void set_orient(ST_PageOrientation value);
    public bool get_orientSpecified();
    public void set_orientSpecified(bool value);
    public string get_code();
    public void set_code(string value);
}
[XmlTypeAttribute]
[XmlRootAttribute]
public class NPOI.OpenXmlFormats.Wordprocessing.CT_Panose : object {
    private Byte[] valField;
    [XmlAttributeAttribute]
public Byte[] val { get; public set; }
    public Byte[] get_val();
    public void set_val(Byte[] value);
}
[XmlTypeAttribute]
[XmlRootAttribute]
public class NPOI.OpenXmlFormats.Wordprocessing.CT_PaperSource : object {
    private string firstField;
    private string otherField;
    [XmlAttributeAttribute]
public string first { get; public set; }
    [XmlAttributeAttribute]
public string other { get; public set; }
    public static CT_PaperSource Parse(XmlNode node, XmlNamespaceManager namespaceManager);
    internal void Write(StreamWriter sw, string nodeName);
    public string get_first();
    public void set_first(string value);
    public string get_other();
    public void set_other(string value);
}
[XmlTypeAttribute]
[XmlRootAttribute]
public class NPOI.OpenXmlFormats.Wordprocessing.CT_ParaRPr : object {
    private CT_TrackChange insField;
    private CT_TrackChange delField;
    private CT_TrackChange moveFromField;
    private CT_TrackChange moveToField;
    private CT_String rStyleField;
    private CT_Fonts rFontsField;
    private CT_OnOff bField;
    private CT_OnOff bCsField;
    private CT_OnOff iField;
    private CT_OnOff iCsField;
    private CT_OnOff capsField;
    private CT_OnOff smallCapsField;
    private CT_OnOff strikeField;
    private CT_OnOff dstrikeField;
    private CT_OnOff outlineField;
    private CT_OnOff shadowField;
    private CT_OnOff embossField;
    private CT_OnOff imprintField;
    private CT_OnOff noProofField;
    private CT_OnOff snapToGridField;
    private CT_OnOff vanishField;
    private CT_OnOff webHiddenField;
    private CT_Color colorField;
    private CT_SignedTwipsMeasure spacingField;
    private CT_TextScale wField;
    private CT_HpsMeasure kernField;
    private CT_SignedHpsMeasure positionField;
    private CT_HpsMeasure szField;
    private CT_HpsMeasure szCsField;
    private CT_Highlight highlightField;
    private CT_Underline uField;
    private CT_TextEffect effectField;
    private CT_Border bdrField;
    private CT_Shd shdField;
    private CT_FitText fitTextField;
    private CT_VerticalAlignRun vertAlignField;
    private CT_OnOff rtlField;
    private CT_OnOff csField;
    private CT_Em emField;
    private CT_Language langField;
    private CT_EastAsianLayout eastAsianLayoutField;
    private CT_OnOff specVanishField;
    private CT_OnOff oMathField;
    private CT_ParaRPrChange rPrChangeField;
    [XmlElementAttribute]
public CT_TrackChange ins { get; public set; }
    [XmlElementAttribute]
public CT_TrackChange del { get; public set; }
    [XmlElementAttribute]
public CT_TrackChange moveFrom { get; public set; }
    [XmlElementAttribute]
public CT_TrackChange moveTo { get; public set; }
    [XmlElementAttribute]
public CT_String rStyle { get; public set; }
    [XmlElementAttribute]
public CT_Fonts rFonts { get; public set; }
    [XmlElementAttribute]
public CT_OnOff b { get; public set; }
    [XmlElementAttribute]
public CT_OnOff bCs { get; public set; }
    [XmlElementAttribute]
public CT_OnOff i { get; public set; }
    [XmlElementAttribute]
public CT_OnOff iCs { get; public set; }
    [XmlElementAttribute]
public CT_OnOff caps { get; public set; }
    [XmlElementAttribute]
public CT_OnOff smallCaps { get; public set; }
    [XmlElementAttribute]
public CT_OnOff strike { get; public set; }
    [XmlElementAttribute]
public CT_OnOff dstrike { get; public set; }
    [XmlElementAttribute]
public CT_OnOff outline { get; public set; }
    [XmlElementAttribute]
public CT_OnOff shadow { get; public set; }
    [XmlElementAttribute]
public CT_OnOff emboss { get; public set; }
    [XmlElementAttribute]
public CT_OnOff imprint { get; public set; }
    [XmlElementAttribute]
public CT_OnOff noProof { get; public set; }
    [XmlElementAttribute]
public CT_OnOff snapToGrid { get; public set; }
    [XmlElementAttribute]
public CT_OnOff vanish { get; public set; }
    [XmlElementAttribute]
public CT_OnOff webHidden { get; public set; }
    [XmlElementAttribute]
public CT_Color color { get; public set; }
    [XmlElementAttribute]
public CT_SignedTwipsMeasure spacing { get; public set; }
    [XmlElementAttribute]
public CT_TextScale w { get; public set; }
    [XmlElementAttribute]
public CT_HpsMeasure kern { get; public set; }
    [XmlElementAttribute]
public CT_SignedHpsMeasure position { get; public set; }
    [XmlElementAttribute]
public CT_HpsMeasure sz { get; public set; }
    [XmlElementAttribute]
public CT_HpsMeasure szCs { get; public set; }
    [XmlElementAttribute]
public CT_Highlight highlight { get; public set; }
    [XmlElementAttribute]
public CT_Underline u { get; public set; }
    [XmlElementAttribute]
public CT_TextEffect effect { get; public set; }
    [XmlElementAttribute]
public CT_Border bdr { get; public set; }
    [XmlElementAttribute]
public CT_Shd shd { get; public set; }
    [XmlElementAttribute]
public CT_FitText fitText { get; public set; }
    [XmlElementAttribute]
public CT_VerticalAlignRun vertAlign { get; public set; }
    [XmlElementAttribute]
public CT_OnOff rtl { get; public set; }
    [XmlElementAttribute]
public CT_OnOff cs { get; public set; }
    [XmlElementAttribute]
public CT_Em em { get; public set; }
    [XmlElementAttribute]
public CT_Language lang { get; public set; }
    [XmlElementAttribute]
public CT_EastAsianLayout eastAsianLayout { get; public set; }
    [XmlElementAttribute]
public CT_OnOff specVanish { get; public set; }
    [XmlElementAttribute]
public CT_OnOff oMath { get; public set; }
    [XmlElementAttribute]
public CT_ParaRPrChange rPrChange { get; public set; }
    public CT_TrackChange get_ins();
    public void set_ins(CT_TrackChange value);
    public CT_TrackChange get_del();
    public void set_del(CT_TrackChange value);
    public CT_TrackChange get_moveFrom();
    public void set_moveFrom(CT_TrackChange value);
    public CT_TrackChange get_moveTo();
    public void set_moveTo(CT_TrackChange value);
    public CT_String get_rStyle();
    public void set_rStyle(CT_String value);
    public CT_Fonts get_rFonts();
    public void set_rFonts(CT_Fonts value);
    public CT_OnOff get_b();
    public void set_b(CT_OnOff value);
    public CT_OnOff get_bCs();
    public void set_bCs(CT_OnOff value);
    public CT_OnOff get_i();
    public void set_i(CT_OnOff value);
    public CT_OnOff get_iCs();
    public void set_iCs(CT_OnOff value);
    public CT_OnOff get_caps();
    public void set_caps(CT_OnOff value);
    public CT_OnOff get_smallCaps();
    public void set_smallCaps(CT_OnOff value);
    public CT_OnOff get_strike();
    public void set_strike(CT_OnOff value);
    public CT_OnOff get_dstrike();
    public void set_dstrike(CT_OnOff value);
    public CT_OnOff get_outline();
    public void set_outline(CT_OnOff value);
    public CT_OnOff get_shadow();
    public void set_shadow(CT_OnOff value);
    public CT_OnOff get_emboss();
    public void set_emboss(CT_OnOff value);
    public CT_OnOff get_imprint();
    public void set_imprint(CT_OnOff value);
    public CT_OnOff get_noProof();
    public void set_noProof(CT_OnOff value);
    public CT_OnOff get_snapToGrid();
    public void set_snapToGrid(CT_OnOff value);
    public CT_OnOff get_vanish();
    public void set_vanish(CT_OnOff value);
    public CT_OnOff get_webHidden();
    public void set_webHidden(CT_OnOff value);
    public CT_Color get_color();
    public void set_color(CT_Color value);
    public CT_SignedTwipsMeasure get_spacing();
    public void set_spacing(CT_SignedTwipsMeasure value);
    public CT_TextScale get_w();
    public void set_w(CT_TextScale value);
    public CT_HpsMeasure get_kern();
    public void set_kern(CT_HpsMeasure value);
    public CT_SignedHpsMeasure get_position();
    public void set_position(CT_SignedHpsMeasure value);
    public CT_HpsMeasure get_sz();
    public void set_sz(CT_HpsMeasure value);
    public CT_HpsMeasure get_szCs();
    public void set_szCs(CT_HpsMeasure value);
    public CT_Highlight get_highlight();
    public void set_highlight(CT_Highlight value);
    public CT_Underline get_u();
    public void set_u(CT_Underline value);
    public CT_TextEffect get_effect();
    public void set_effect(CT_TextEffect value);
    public CT_Border get_bdr();
    public void set_bdr(CT_Border value);
    public CT_Shd get_shd();
    public void set_shd(CT_Shd value);
    public CT_FitText get_fitText();
    public void set_fitText(CT_FitText value);
    public CT_VerticalAlignRun get_vertAlign();
    public void set_vertAlign(CT_VerticalAlignRun value);
    public CT_OnOff get_rtl();
    public void set_rtl(CT_OnOff value);
    public CT_OnOff get_cs();
    public void set_cs(CT_OnOff value);
    public CT_Em get_em();
    public void set_em(CT_Em value);
    public CT_Language get_lang();
    public void set_lang(CT_Language value);
    public CT_EastAsianLayout get_eastAsianLayout();
    public void set_eastAsianLayout(CT_EastAsianLayout value);
    public CT_OnOff get_specVanish();
    public void set_specVanish(CT_OnOff value);
    public CT_OnOff get_oMath();
    public void set_oMath(CT_OnOff value);
    public CT_ParaRPrChange get_rPrChange();
    public void set_rPrChange(CT_ParaRPrChange value);
    public CT_OnOff AddNewNoProof();
    public static CT_ParaRPr Parse(XmlNode node, XmlNamespaceManager namespaceManager);
    internal void Write(StreamWriter sw, string nodeName);
}
[XmlTypeAttribute]
[XmlRootAttribute]
public class NPOI.OpenXmlFormats.Wordprocessing.CT_ParaRPrChange : CT_TrackChange {
    private CT_ParaRPrOriginal rPrField;
    [XmlElementAttribute]
public CT_ParaRPrOriginal rPr { get; public set; }
    public static CT_ParaRPrChange Parse(XmlNode node, XmlNamespaceManager namespaceManager);
    internal void Write(StreamWriter sw, string nodeName);
    public CT_ParaRPrOriginal get_rPr();
    public void set_rPr(CT_ParaRPrOriginal value);
}
[XmlTypeAttribute]
[XmlRootAttribute]
public class NPOI.OpenXmlFormats.Wordprocessing.CT_ParaRPrOriginal : object {
    private CT_TrackChange insField;
    private CT_TrackChange delField;
    private CT_TrackChange moveFromField;
    private CT_TrackChange moveToField;
    private List`1<CT_OnOff> webHiddenField;
    private List`1<CT_OnOff> bField;
    private List`1<CT_OnOff> bCsField;
    private List`1<CT_Border> bdrField;
    private List`1<CT_OnOff> capsField;
    private List`1<CT_Color> colorField;
    private List`1<CT_OnOff> csField;
    private List`1<CT_OnOff> dstrikeField;
    private List`1<CT_EastAsianLayout> eastAsianLayoutField;
    private List`1<CT_TextEffect> effectField;
    private List`1<CT_Em> emField;
    private List`1<CT_OnOff> embossField;
    private List`1<CT_FitText> fitTextField;
    private List`1<CT_Highlight> highlightField;
    private List`1<CT_OnOff> iField;
    private List`1<CT_OnOff> iCsField;
    private List`1<CT_OnOff> imprintField;
    private List`1<CT_HpsMeasure> kernField;
    private List`1<CT_Language> langField;
    private List`1<CT_OnOff> noProofField;
    private List`1<CT_OnOff> oMathField;
    private List`1<CT_OnOff> outlineField;
    private List`1<CT_SignedHpsMeasure> positionField;
    private List`1<CT_Fonts> rFontsField;
    private List`1<CT_String> rStyleField;
    private List`1<CT_OnOff> rtlField;
    private List`1<CT_OnOff> shadowField;
    private List`1<CT_Shd> shdField;
    private List`1<CT_OnOff> smallCapsField;
    private List`1<CT_OnOff> snapToGridField;
    private List`1<CT_SignedTwipsMeasure> spacingField;
    private List`1<CT_OnOff> specVanishField;
    private List`1<CT_OnOff> strikeField;
    private List`1<CT_HpsMeasure> szField;
    private List`1<CT_HpsMeasure> szCsField;
    private List`1<CT_Underline> uField;
    private List`1<CT_OnOff> vanishField;
    private List`1<CT_VerticalAlignRun> vertAlignField;
    private List`1<CT_TextScale> wField;
    [XmlElementAttribute]
public CT_TrackChange ins { get; public set; }
    [XmlElementAttribute]
public CT_TrackChange del { get; public set; }
    [XmlElementAttribute]
public CT_TrackChange moveFrom { get; public set; }
    [XmlElementAttribute]
public CT_TrackChange moveTo { get; public set; }
    [XmlElementAttribute]
public List`1<CT_OnOff> webHidden { get; public set; }
    [XmlElementAttribute]
public List`1<CT_OnOff> b { get; public set; }
    [XmlElementAttribute]
public List`1<CT_OnOff> bCs { get; public set; }
    [XmlElementAttribute]
public List`1<CT_Border> bdr { get; public set; }
    [XmlElementAttribute]
public List`1<CT_OnOff> caps { get; public set; }
    [XmlElementAttribute]
public List`1<CT_Color> color { get; public set; }
    [XmlElementAttribute]
public List`1<CT_OnOff> cs { get; public set; }
    [XmlElementAttribute]
public List`1<CT_OnOff> dstrike { get; public set; }
    [XmlElementAttribute]
public List`1<CT_EastAsianLayout> eastAsianLayout { get; public set; }
    [XmlElementAttribute]
public List`1<CT_TextEffect> effect { get; public set; }
    [XmlElementAttribute]
public List`1<CT_Em> em { get; public set; }
    [XmlElementAttribute]
public List`1<CT_OnOff> emboss { get; public set; }
    [XmlElementAttribute]
public List`1<CT_FitText> fitText { get; public set; }
    [XmlElementAttribute]
public List`1<CT_Highlight> highlight { get; public set; }
    [XmlElementAttribute]
public List`1<CT_OnOff> i { get; public set; }
    [XmlElementAttribute]
public List`1<CT_OnOff> iCs { get; public set; }
    [XmlElementAttribute]
public List`1<CT_OnOff> imprint { get; public set; }
    [XmlElementAttribute]
public List`1<CT_HpsMeasure> kern { get; public set; }
    [XmlElementAttribute]
public List`1<CT_Language> lang { get; public set; }
    [XmlElementAttribute]
public List`1<CT_OnOff> noProof { get; public set; }
    [XmlElementAttribute]
public List`1<CT_OnOff> oMath { get; public set; }
    [XmlElementAttribute]
public List`1<CT_OnOff> outline { get; public set; }
    [XmlElementAttribute]
public List`1<CT_SignedHpsMeasure> position { get; public set; }
    [XmlElementAttribute]
public List`1<CT_Fonts> rFonts { get; public set; }
    [XmlElementAttribute]
public List`1<CT_String> rStyle { get; public set; }
    [XmlElementAttribute]
public List`1<CT_OnOff> rtl { get; public set; }
    [XmlElementAttribute]
public List`1<CT_OnOff> shadow { get; public set; }
    [XmlElementAttribute]
public List`1<CT_Shd> shd { get; public set; }
    [XmlElementAttribute]
public List`1<CT_OnOff> smallCaps { get; public set; }
    [XmlElementAttribute]
public List`1<CT_OnOff> snapToGrid { get; public set; }
    [XmlElementAttribute]
public List`1<CT_SignedTwipsMeasure> spacing { get; public set; }
    [XmlElementAttribute]
public List`1<CT_OnOff> specVanish { get; public set; }
    [XmlElementAttribute]
public List`1<CT_OnOff> strike { get; public set; }
    [XmlElementAttribute]
public List`1<CT_HpsMeasure> sz { get; public set; }
    [XmlElementAttribute]
public List`1<CT_HpsMeasure> szCs { get; public set; }
    [XmlElementAttribute]
public List`1<CT_Underline> u { get; public set; }
    [XmlElementAttribute]
public List`1<CT_OnOff> vanish { get; public set; }
    [XmlElementAttribute]
public List`1<CT_VerticalAlignRun> vertAlign { get; public set; }
    [XmlElementAttribute]
public List`1<CT_TextScale> w { get; public set; }
    public CT_TrackChange get_ins();
    public void set_ins(CT_TrackChange value);
    public CT_TrackChange get_del();
    public void set_del(CT_TrackChange value);
    public CT_TrackChange get_moveFrom();
    public void set_moveFrom(CT_TrackChange value);
    public CT_TrackChange get_moveTo();
    public void set_moveTo(CT_TrackChange value);
    public List`1<CT_OnOff> get_webHidden();
    public void set_webHidden(List`1<CT_OnOff> value);
    public List`1<CT_OnOff> get_b();
    public void set_b(List`1<CT_OnOff> value);
    public List`1<CT_OnOff> get_bCs();
    public void set_bCs(List`1<CT_OnOff> value);
    public List`1<CT_Border> get_bdr();
    public void set_bdr(List`1<CT_Border> value);
    public List`1<CT_OnOff> get_caps();
    public void set_caps(List`1<CT_OnOff> value);
    public List`1<CT_Color> get_color();
    public void set_color(List`1<CT_Color> value);
    public List`1<CT_OnOff> get_cs();
    public void set_cs(List`1<CT_OnOff> value);
    public List`1<CT_OnOff> get_dstrike();
    public void set_dstrike(List`1<CT_OnOff> value);
    public List`1<CT_EastAsianLayout> get_eastAsianLayout();
    public void set_eastAsianLayout(List`1<CT_EastAsianLayout> value);
    public List`1<CT_TextEffect> get_effect();
    public void set_effect(List`1<CT_TextEffect> value);
    public List`1<CT_Em> get_em();
    public void set_em(List`1<CT_Em> value);
    public List`1<CT_OnOff> get_emboss();
    public void set_emboss(List`1<CT_OnOff> value);
    public List`1<CT_FitText> get_fitText();
    public void set_fitText(List`1<CT_FitText> value);
    public List`1<CT_Highlight> get_highlight();
    public void set_highlight(List`1<CT_Highlight> value);
    public List`1<CT_OnOff> get_i();
    public void set_i(List`1<CT_OnOff> value);
    public List`1<CT_OnOff> get_iCs();
    public void set_iCs(List`1<CT_OnOff> value);
    public List`1<CT_OnOff> get_imprint();
    public void set_imprint(List`1<CT_OnOff> value);
    public List`1<CT_HpsMeasure> get_kern();
    public void set_kern(List`1<CT_HpsMeasure> value);
    public List`1<CT_Language> get_lang();
    public void set_lang(List`1<CT_Language> value);
    public List`1<CT_OnOff> get_noProof();
    public void set_noProof(List`1<CT_OnOff> value);
    public List`1<CT_OnOff> get_oMath();
    public void set_oMath(List`1<CT_OnOff> value);
    public List`1<CT_OnOff> get_outline();
    public void set_outline(List`1<CT_OnOff> value);
    public List`1<CT_SignedHpsMeasure> get_position();
    public void set_position(List`1<CT_SignedHpsMeasure> value);
    public List`1<CT_Fonts> get_rFonts();
    public void set_rFonts(List`1<CT_Fonts> value);
    public List`1<CT_String> get_rStyle();
    public void set_rStyle(List`1<CT_String> value);
    public List`1<CT_OnOff> get_rtl();
    public void set_rtl(List`1<CT_OnOff> value);
    public List`1<CT_OnOff> get_shadow();
    public void set_shadow(List`1<CT_OnOff> value);
    public List`1<CT_Shd> get_shd();
    public void set_shd(List`1<CT_Shd> value);
    public List`1<CT_OnOff> get_smallCaps();
    public void set_smallCaps(List`1<CT_OnOff> value);
    public List`1<CT_OnOff> get_snapToGrid();
    public void set_snapToGrid(List`1<CT_OnOff> value);
    public List`1<CT_SignedTwipsMeasure> get_spacing();
    public void set_spacing(List`1<CT_SignedTwipsMeasure> value);
    public List`1<CT_OnOff> get_specVanish();
    public void set_specVanish(List`1<CT_OnOff> value);
    public List`1<CT_OnOff> get_strike();
    public void set_strike(List`1<CT_OnOff> value);
    public List`1<CT_HpsMeasure> get_sz();
    public void set_sz(List`1<CT_HpsMeasure> value);
    public List`1<CT_HpsMeasure> get_szCs();
    public void set_szCs(List`1<CT_HpsMeasure> value);
    public List`1<CT_Underline> get_u();
    public void set_u(List`1<CT_Underline> value);
    public List`1<CT_OnOff> get_vanish();
    public void set_vanish(List`1<CT_OnOff> value);
    public List`1<CT_VerticalAlignRun> get_vertAlign();
    public void set_vertAlign(List`1<CT_VerticalAlignRun> value);
    public List`1<CT_TextScale> get_w();
    public void set_w(List`1<CT_TextScale> value);
    public static CT_ParaRPrOriginal Parse(XmlNode node, XmlNamespaceManager namespaceManager);
    internal void Write(StreamWriter sw, string nodeName);
}
[XmlTypeAttribute]
[XmlRootAttribute]
public class NPOI.OpenXmlFormats.Wordprocessing.CT_PBdr : object {
    private CT_Border topField;
    private CT_Border leftField;
    private CT_Border bottomField;
    private CT_Border rightField;
    private CT_Border betweenField;
    private CT_Border barField;
    [XmlElementAttribute]
public CT_Border top { get; public set; }
    [XmlElementAttribute]
public CT_Border left { get; public set; }
    [XmlElementAttribute]
public CT_Border bottom { get; public set; }
    [XmlElementAttribute]
public CT_Border right { get; public set; }
    [XmlElementAttribute]
public CT_Border between { get; public set; }
    [XmlElementAttribute]
public CT_Border bar { get; public set; }
    public static CT_PBdr Parse(XmlNode node, XmlNamespaceManager namespaceManager);
    internal void Write(StreamWriter sw, string nodeName);
    public CT_Border get_top();
    public void set_top(CT_Border value);
    public CT_Border get_left();
    public void set_left(CT_Border value);
    public CT_Border get_bottom();
    public void set_bottom(CT_Border value);
    public CT_Border get_right();
    public void set_right(CT_Border value);
    public CT_Border get_between();
    public void set_between(CT_Border value);
    public CT_Border get_bar();
    public void set_bar(CT_Border value);
    public bool IsSetTop();
    public CT_Border AddNewTop();
    public void UnsetTop();
    public bool IsSetBottom();
    public CT_Border AddNewBottom();
    public void UnsetBottom();
    public bool IsSetRight();
    public void UnsetRight();
    public CT_Border AddNewRight();
    public bool IsSetBetween();
    public CT_Border AddNewBetween();
    public void UnsetBetween();
    public bool IsSetLeft();
    public CT_Border AddNewLeft();
    public void UnsetLeft();
}
[XmlIncludeAttribute("NPOI.OpenXmlFormats.Wordprocessing.CT_PermStart")]
[XmlTypeAttribute]
[XmlRootAttribute]
public class NPOI.OpenXmlFormats.Wordprocessing.CT_Perm : object {
    private string idField;
    private ST_DisplacedByCustomXml displacedByCustomXmlField;
    private bool displacedByCustomXmlFieldSpecified;
    [XmlAttributeAttribute]
public string id { get; public set; }
    [XmlAttributeAttribute]
public ST_DisplacedByCustomXml displacedByCustomXml { get; public set; }
    [XmlIgnoreAttribute]
public bool displacedByCustomXmlSpecified { get; public set; }
    public static CT_Perm Parse(XmlNode node, XmlNamespaceManager namespaceManager);
    internal void Write(StreamWriter sw, string nodeName);
    public string get_id();
    public void set_id(string value);
    public ST_DisplacedByCustomXml get_displacedByCustomXml();
    public void set_displacedByCustomXml(ST_DisplacedByCustomXml value);
    public bool get_displacedByCustomXmlSpecified();
    public void set_displacedByCustomXmlSpecified(bool value);
}
[XmlTypeAttribute]
[XmlRootAttribute]
public class NPOI.OpenXmlFormats.Wordprocessing.CT_PermStart : CT_Perm {
    private ST_EdGrp edGrpField;
    private bool edGrpFieldSpecified;
    private string edField;
    private string colFirstField;
    private string colLastField;
    [XmlAttributeAttribute]
public ST_EdGrp edGrp { get; public set; }
    [XmlIgnoreAttribute]
public bool edGrpSpecified { get; public set; }
    [XmlAttributeAttribute]
public string ed { get; public set; }
    [XmlAttributeAttribute]
public string colFirst { get; public set; }
    [XmlAttributeAttribute]
public string colLast { get; public set; }
    public ST_EdGrp get_edGrp();
    public void set_edGrp(ST_EdGrp value);
    public bool get_edGrpSpecified();
    public void set_edGrpSpecified(bool value);
    public string get_ed();
    public void set_ed(string value);
    public string get_colFirst();
    public void set_colFirst(string value);
    public string get_colLast();
    public void set_colLast(string value);
    public static CT_PermStart Parse(XmlNode node, XmlNamespaceManager namespaceManager);
    internal void Write(StreamWriter sw, string nodeName);
}
[XmlTypeAttribute]
[XmlRootAttribute]
public class NPOI.OpenXmlFormats.Wordprocessing.CT_Picture : CT_PictureBase {
    private CT_Rel movieField;
    private CT_Control controlField;
    [XmlElementAttribute]
public CT_Rel movie { get; public set; }
    [XmlElementAttribute]
public CT_Control control { get; public set; }
    public CT_Rel get_movie();
    public void set_movie(CT_Rel value);
    public CT_Control get_control();
    public void set_control(CT_Control value);
    public CT_PictureNonVisual AddNewNvPicPr();
    public CT_BlipFillProperties AddNewBlipFill();
    public CT_ShapeProperties AddNewSpPr();
    public static CT_Picture Parse(XmlNode node, XmlNamespaceManager namespaceManager);
    internal void Write(StreamWriter sw, string nodeName);
}
[XmlIncludeAttribute("NPOI.OpenXmlFormats.Wordprocessing.CT_Picture")]
[XmlIncludeAttribute("NPOI.OpenXmlFormats.Wordprocessing.CT_Object")]
[XmlIncludeAttribute("NPOI.OpenXmlFormats.Wordprocessing.CT_Background")]
[XmlTypeAttribute]
[XmlRootAttribute]
public class NPOI.OpenXmlFormats.Wordprocessing.CT_PictureBase : object {
    private List`1<object> itemsField;
    private List`1<ItemsChoiceType9> itemsElementNameField;
    [XmlAnyElementAttribute]
[XmlAnyElementAttribute]
[XmlChoiceIdentifierAttribute("ItemsElementName")]
public List`1<object> Items { get; public set; }
    [XmlElementAttribute("ItemsElementName")]
[XmlIgnoreAttribute]
public List`1<ItemsChoiceType9> ItemsElementName { get; public set; }
    public List`1<object> get_Items();
    public void set_Items(List`1<object> value);
    public List`1<ItemsChoiceType9> get_ItemsElementName();
    public void set_ItemsElementName(List`1<ItemsChoiceType9> value);
    public void Set(object obj);
}
[XmlTypeAttribute]
[XmlRootAttribute]
public class NPOI.OpenXmlFormats.Wordprocessing.CT_Pitch : object {
    private ST_Pitch valField;
    [XmlAttributeAttribute]
public ST_Pitch val { get; public set; }
    public ST_Pitch get_val();
    public void set_val(ST_Pitch value);
}
[XmlTypeAttribute]
[XmlRootAttribute]
public class NPOI.OpenXmlFormats.Wordprocessing.CT_PixelsMeasure : object {
    private ulong valField;
    [XmlAttributeAttribute]
public ulong val { get; public set; }
    public ulong get_val();
    public void set_val(ulong value);
}
[XmlTypeAttribute]
[XmlRootAttribute]
public class NPOI.OpenXmlFormats.Wordprocessing.CT_Placeholder : object {
    private CT_String docPartField;
    [XmlElementAttribute]
public CT_String docPart { get; public set; }
    public static CT_Placeholder Parse(XmlNode node, XmlNamespaceManager namespaceManager);
    internal void Write(StreamWriter sw, string nodeName);
    public CT_String get_docPart();
    public void set_docPart(CT_String value);
}
[XmlTypeAttribute]
[XmlRootAttribute]
public class NPOI.OpenXmlFormats.Wordprocessing.CT_PPr : CT_PPrBase {
    private CT_ParaRPr rPrField;
    private CT_SectPr sectPrField;
    private CT_PPrChange pPrChangeField;
    public bool IsEmpty { get; }
    [XmlElementAttribute]
public CT_ParaRPr rPr { get; public set; }
    [XmlElementAttribute]
public CT_SectPr sectPr { get; public set; }
    [XmlElementAttribute]
public CT_PPrChange pPrChange { get; public set; }
    public CT_SectPr createSectPr();
    public virtual bool get_IsEmpty();
    public static CT_PPr Parse(XmlNode node, XmlNamespaceManager namespaceManager);
    internal void Write(StreamWriter sw, string nodeName);
    public CT_ParaRPr get_rPr();
    public void set_rPr(CT_ParaRPr value);
    public CT_SectPr get_sectPr();
    public void set_sectPr(CT_SectPr value);
    public CT_PPrChange get_pPrChange();
    public void set_pPrChange(CT_PPrChange value);
    public CT_ParaRPr AddNewRPr();
    public CT_NumPr AddNewNumPr();
    public bool IsSetSpacing();
}
[XmlIncludeAttribute("NPOI.OpenXmlFormats.Wordprocessing.CT_PPr")]
[XmlTypeAttribute]
[XmlRootAttribute]
public class NPOI.OpenXmlFormats.Wordprocessing.CT_PPrBase : object {
    private CT_String pStyleField;
    private CT_OnOff keepNextField;
    private CT_OnOff keepLinesField;
    private CT_OnOff pageBreakBeforeField;
    private CT_FramePr framePrField;
    private CT_OnOff widowControlField;
    private CT_NumPr numPrField;
    private CT_OnOff suppressLineNumbersField;
    private CT_PBdr pBdrField;
    private CT_Shd shdField;
    private List`1<CT_TabStop> tabsField;
    private CT_OnOff suppressAutoHyphensField;
    private CT_OnOff kinsokuField;
    private CT_OnOff wordWrapField;
    private CT_OnOff overflowPunctField;
    private CT_OnOff topLinePunctField;
    private CT_OnOff autoSpaceDEField;
    private CT_OnOff autoSpaceDNField;
    private CT_OnOff bidiField;
    private CT_OnOff adjustRightIndField;
    private CT_OnOff snapToGridField;
    private CT_Spacing spacingField;
    private CT_Ind indField;
    private CT_OnOff contextualSpacingField;
    private CT_OnOff mirrorIndentsField;
    private CT_OnOff suppressOverlapField;
    private CT_Jc jcField;
    private CT_TextDirection textDirectionField;
    private CT_TextAlignment textAlignmentField;
    private CT_TextboxTightWrap textboxTightWrapField;
    private CT_DecimalNumber outlineLvlField;
    private CT_DecimalNumber divIdField;
    private CT_Cnf cnfStyleField;
    public bool IsEmpty { get; }
    [XmlElementAttribute]
public CT_String pStyle { get; public set; }
    [XmlElementAttribute]
public CT_OnOff keepNext { get; public set; }
    [XmlElementAttribute]
public CT_OnOff keepLines { get; public set; }
    [XmlElementAttribute]
public CT_OnOff pageBreakBefore { get; public set; }
    [XmlElementAttribute]
public CT_FramePr framePr { get; public set; }
    [XmlElementAttribute]
public CT_OnOff widowControl { get; public set; }
    [XmlElementAttribute]
public CT_NumPr numPr { get; public set; }
    [XmlElementAttribute]
public CT_OnOff suppressLineNumbers { get; public set; }
    [XmlElementAttribute]
public CT_PBdr pBdr { get; public set; }
    [XmlElementAttribute]
public CT_Shd shd { get; public set; }
    [XmlArrayAttribute]
[XmlArrayItemAttribute("tab")]
public List`1<CT_TabStop> tabs { get; public set; }
    [XmlElementAttribute]
public CT_OnOff suppressAutoHyphens { get; public set; }
    [XmlElementAttribute]
public CT_OnOff kinsoku { get; public set; }
    [XmlElementAttribute]
public CT_OnOff wordWrap { get; public set; }
    [XmlElementAttribute]
public CT_OnOff overflowPunct { get; public set; }
    [XmlElementAttribute]
public CT_OnOff topLinePunct { get; public set; }
    [XmlElementAttribute]
public CT_OnOff autoSpaceDE { get; public set; }
    [XmlElementAttribute]
public CT_OnOff autoSpaceDN { get; public set; }
    [XmlElementAttribute]
public CT_OnOff bidi { get; public set; }
    [XmlElementAttribute]
public CT_OnOff adjustRightInd { get; public set; }
    [XmlElementAttribute]
public CT_OnOff snapToGrid { get; public set; }
    [XmlElementAttribute]
public CT_Spacing spacing { get; public set; }
    [XmlElementAttribute]
public CT_Ind ind { get; public set; }
    [XmlElementAttribute]
public CT_OnOff contextualSpacing { get; public set; }
    [XmlElementAttribute]
public CT_OnOff mirrorIndents { get; public set; }
    [XmlElementAttribute]
public CT_OnOff suppressOverlap { get; public set; }
    [XmlElementAttribute]
public CT_Jc jc { get; public set; }
    [XmlElementAttribute]
public CT_TextDirection textDirection { get; public set; }
    [XmlElementAttribute]
public CT_TextAlignment textAlignment { get; public set; }
    [XmlElementAttribute]
public CT_TextboxTightWrap textboxTightWrap { get; public set; }
    [XmlElementAttribute]
public CT_DecimalNumber outlineLvl { get; public set; }
    [XmlElementAttribute]
public CT_DecimalNumber divId { get; public set; }
    [XmlElementAttribute]
public CT_Cnf cnfStyle { get; public set; }
    public virtual bool get_IsEmpty();
    public static CT_PPrBase Parse(XmlNode node, XmlNamespaceManager namespaceManager);
    internal void Write(StreamWriter sw, string nodeName);
    public CT_String get_pStyle();
    public void set_pStyle(CT_String value);
    public CT_OnOff get_keepNext();
    public void set_keepNext(CT_OnOff value);
    public CT_OnOff get_keepLines();
    public void set_keepLines(CT_OnOff value);
    public CT_OnOff get_pageBreakBefore();
    public void set_pageBreakBefore(CT_OnOff value);
    public CT_FramePr get_framePr();
    public void set_framePr(CT_FramePr value);
    public CT_OnOff get_widowControl();
    public void set_widowControl(CT_OnOff value);
    public CT_NumPr get_numPr();
    public void set_numPr(CT_NumPr value);
    public CT_OnOff get_suppressLineNumbers();
    public void set_suppressLineNumbers(CT_OnOff value);
    public CT_PBdr get_pBdr();
    public void set_pBdr(CT_PBdr value);
    public CT_Shd get_shd();
    public void set_shd(CT_Shd value);
    public List`1<CT_TabStop> get_tabs();
    public void set_tabs(List`1<CT_TabStop> value);
    public CT_OnOff get_suppressAutoHyphens();
    public void set_suppressAutoHyphens(CT_OnOff value);
    public CT_OnOff get_kinsoku();
    public void set_kinsoku(CT_OnOff value);
    public CT_OnOff get_wordWrap();
    public void set_wordWrap(CT_OnOff value);
    public CT_OnOff get_overflowPunct();
    public void set_overflowPunct(CT_OnOff value);
    public CT_OnOff get_topLinePunct();
    public void set_topLinePunct(CT_OnOff value);
    public CT_OnOff get_autoSpaceDE();
    public void set_autoSpaceDE(CT_OnOff value);
    public CT_OnOff get_autoSpaceDN();
    public void set_autoSpaceDN(CT_OnOff value);
    public CT_OnOff get_bidi();
    public void set_bidi(CT_OnOff value);
    public CT_OnOff get_adjustRightInd();
    public void set_adjustRightInd(CT_OnOff value);
    public CT_OnOff get_snapToGrid();
    public void set_snapToGrid(CT_OnOff value);
    public CT_Spacing get_spacing();
    public void set_spacing(CT_Spacing value);
    public CT_Ind get_ind();
    public void set_ind(CT_Ind value);
    public CT_OnOff get_contextualSpacing();
    public void set_contextualSpacing(CT_OnOff value);
    public CT_OnOff get_mirrorIndents();
    public void set_mirrorIndents(CT_OnOff value);
    public CT_OnOff get_suppressOverlap();
    public void set_suppressOverlap(CT_OnOff value);
    public CT_Jc get_jc();
    public void set_jc(CT_Jc value);
    public CT_TextDirection get_textDirection();
    public void set_textDirection(CT_TextDirection value);
    public CT_TextAlignment get_textAlignment();
    public void set_textAlignment(CT_TextAlignment value);
    public CT_TextboxTightWrap get_textboxTightWrap();
    public void set_textboxTightWrap(CT_TextboxTightWrap value);
    public CT_DecimalNumber get_outlineLvl();
    public void set_outlineLvl(CT_DecimalNumber value);
    public CT_DecimalNumber get_divId();
    public void set_divId(CT_DecimalNumber value);
    public CT_Cnf get_cnfStyle();
    public void set_cnfStyle(CT_Cnf value);
    public bool IsSetTextAlignment();
    public CT_TextAlignment AddNewTextAlignment();
    public bool IsSetPStyle();
    public CT_String AddNewPStyle();
    public bool IsSetShd();
    public CT_Shd AddNewShd();
    public bool IsSetJc();
    public CT_Jc AddNewJc();
    public bool IsSetPBdr();
    public CT_Spacing AddNewSpacing();
    public bool IsSetPageBreakBefore();
    public CT_OnOff AddNewPageBreakBefore();
    public CT_PBdr AddNewPBdr();
    public bool IsSetWordWrap();
    public CT_OnOff AddNewWordWrap();
    public CT_Ind AddNewInd();
    public CT_Tabs AddNewTabs();
}
[XmlTypeAttribute]
[XmlRootAttribute]
public class NPOI.OpenXmlFormats.Wordprocessing.CT_PPrChange : CT_TrackChange {
    private CT_PPrBase pPrField;
    [XmlElementAttribute]
public CT_PPrBase pPr { get; public set; }
    public static CT_PPrChange Parse(XmlNode node, XmlNamespaceManager namespaceManager);
    internal void Write(StreamWriter sw, string nodeName);
    public CT_PPrBase get_pPr();
    public void set_pPr(CT_PPrBase value);
}
[XmlTypeAttribute]
[XmlRootAttribute]
public class NPOI.OpenXmlFormats.Wordprocessing.CT_PPrDefault : object {
    private CT_PPr pPrField;
    [XmlElementAttribute]
public CT_PPr pPr { get; public set; }
    public static CT_PPrDefault Parse(XmlNode node, XmlNamespaceManager namespaceManager);
    internal void Write(StreamWriter sw, string nodeName);
    public CT_PPr get_pPr();
    public void set_pPr(CT_PPr value);
    public CT_PPr AddNewPPr();
    public bool IsSetPPr();
}
[XmlTypeAttribute]
[XmlRootAttribute]
public class NPOI.OpenXmlFormats.Wordprocessing.CT_Proof : object {
    private ST_Proof spellingField;
    private bool spellingFieldSpecified;
    private ST_Proof grammarField;
    private bool grammarFieldSpecified;
    [XmlAttributeAttribute]
public ST_Proof spelling { get; public set; }
    [XmlIgnoreAttribute]
public bool spellingSpecified { get; public set; }
    [XmlAttributeAttribute]
public ST_Proof grammar { get; public set; }
    [XmlIgnoreAttribute]
public bool grammarSpecified { get; public set; }
    public static CT_Proof Parse(XmlNode node, XmlNamespaceManager namespaceManager);
    internal void Write(StreamWriter sw, string nodeName);
    public ST_Proof get_spelling();
    public void set_spelling(ST_Proof value);
    public bool get_spellingSpecified();
    public void set_spellingSpecified(bool value);
    public ST_Proof get_grammar();
    public void set_grammar(ST_Proof value);
    public bool get_grammarSpecified();
    public void set_grammarSpecified(bool value);
}
[XmlTypeAttribute]
[XmlRootAttribute]
public class NPOI.OpenXmlFormats.Wordprocessing.CT_ProofErr : object {
    private ST_ProofErr typeField;
    [XmlAttributeAttribute]
public ST_ProofErr type { get; public set; }
    public static CT_ProofErr Parse(XmlNode node, XmlNamespaceManager namespaceManager);
    internal void Write(StreamWriter sw, string nodeName);
    public ST_ProofErr get_type();
    public void set_type(ST_ProofErr value);
}
[XmlTypeAttribute]
[XmlRootAttribute]
public class NPOI.OpenXmlFormats.Wordprocessing.CT_PTab : object {
    private ST_PTabAlignment alignmentField;
    private ST_PTabRelativeTo relativeToField;
    private ST_PTabLeader leaderField;
    [XmlAttributeAttribute]
public ST_PTabAlignment alignment { get; public set; }
    [XmlAttributeAttribute]
public ST_PTabRelativeTo relativeTo { get; public set; }
    [XmlAttributeAttribute]
public ST_PTabLeader leader { get; public set; }
    public static CT_PTab Parse(XmlNode node, XmlNamespaceManager namespaceManager);
    internal void Write(StreamWriter sw, string nodeName);
    public ST_PTabAlignment get_alignment();
    public void set_alignment(ST_PTabAlignment value);
    public ST_PTabRelativeTo get_relativeTo();
    public void set_relativeTo(ST_PTabRelativeTo value);
    public ST_PTabLeader get_leader();
    public void set_leader(ST_PTabLeader value);
}
[XmlTypeAttribute]
[XmlRootAttribute]
public class NPOI.OpenXmlFormats.Wordprocessing.CT_R : object {
    private CT_RPr rPrField;
    private ArrayList itemsField;
    private List`1<RunItemsChoiceType> itemsElementNameField;
    private Byte[] rsidRPrField;
    private Byte[] rsidDelField;
    private Byte[] rsidRField;
    private CT_AlternateContent alternateContentField;
    [XmlElementAttribute]
public CT_RPr rPr { get; public set; }
    public CT_AlternateContent alternateContent { get; public set; }
    [XmlElementAttribute("annotationRef", "NPOI.OpenXmlFormats.Wordprocessing.CT_Empty")]
[XmlElementAttribute("br", "NPOI.OpenXmlFormats.Wordprocessing.CT_Br")]
[XmlElementAttribute("commentReference", "NPOI.OpenXmlFormats.Wordprocessing.CT_Markup")]
[XmlElementAttribute("continuationSeparator", "NPOI.OpenXmlFormats.Wordprocessing.CT_Empty")]
[XmlElementAttribute("cr", "NPOI.OpenXmlFormats.Wordprocessing.CT_Empty")]
[XmlElementAttribute("dayLong", "NPOI.OpenXmlFormats.Wordprocessing.CT_Empty")]
[XmlElementAttribute("dayShort", "NPOI.OpenXmlFormats.Wordprocessing.CT_Empty")]
[XmlElementAttribute("delInstrText", "NPOI.OpenXmlFormats.Wordprocessing.CT_Text")]
[XmlElementAttribute("delText", "NPOI.OpenXmlFormats.Wordprocessing.CT_Text")]
[XmlElementAttribute("drawing", "NPOI.OpenXmlFormats.Dml.WordProcessing.CT_Drawing")]
[XmlElementAttribute("endnoteRef", "NPOI.OpenXmlFormats.Wordprocessing.CT_Empty")]
[XmlElementAttribute("endnoteReference", "NPOI.OpenXmlFormats.Wordprocessing.CT_FtnEdnRef")]
[XmlElementAttribute("fldChar", "NPOI.OpenXmlFormats.Wordprocessing.CT_FldChar")]
[XmlElementAttribute("footnoteRef", "NPOI.OpenXmlFormats.Wordprocessing.CT_Empty")]
[XmlElementAttribute("footnoteReference", "NPOI.OpenXmlFormats.Wordprocessing.CT_FtnEdnRef")]
[XmlElementAttribute("instrText", "NPOI.OpenXmlFormats.Wordprocessing.CT_Text")]
[XmlElementAttribute("lastRenderedPageBreak", "NPOI.OpenXmlFormats.Wordprocessing.CT_Empty")]
[XmlElementAttribute("monthLong", "NPOI.OpenXmlFormats.Wordprocessing.CT_Empty")]
[XmlElementAttribute("monthShort", "NPOI.OpenXmlFormats.Wordprocessing.CT_Empty")]
[XmlElementAttribute("noBreakHyphen", "NPOI.OpenXmlFormats.Wordprocessing.CT_Empty")]
[XmlElementAttribute("object", "NPOI.OpenXmlFormats.Wordprocessing.CT_Object")]
[XmlElementAttribute("pgNum", "NPOI.OpenXmlFormats.Wordprocessing.CT_Empty")]
[XmlElementAttribute("pict", "NPOI.OpenXmlFormats.Wordprocessing.CT_Picture")]
[XmlElementAttribute("ptab", "NPOI.OpenXmlFormats.Wordprocessing.CT_PTab")]
[XmlElementAttribute("ruby", "NPOI.OpenXmlFormats.Wordprocessing.CT_Ruby")]
[XmlElementAttribute("separator", "NPOI.OpenXmlFormats.Wordprocessing.CT_Empty")]
[XmlElementAttribute("softHyphen", "NPOI.OpenXmlFormats.Wordprocessing.CT_Empty")]
[XmlElementAttribute("sym", "NPOI.OpenXmlFormats.Wordprocessing.CT_Sym")]
[XmlElementAttribute("t", "NPOI.OpenXmlFormats.Wordprocessing.CT_Text")]
[XmlElementAttribute("tab", "NPOI.OpenXmlFormats.Wordprocessing.CT_Empty")]
[XmlElementAttribute("yearLong", "NPOI.OpenXmlFormats.Wordprocessing.CT_Empty")]
[XmlElementAttribute("yearShort", "NPOI.OpenXmlFormats.Wordprocessing.CT_Empty")]
[XmlChoiceIdentifierAttribute("ItemsElementName")]
public ArrayList Items { get; public set; }
    [XmlElementAttribute("ItemsElementName")]
[XmlIgnoreAttribute]
public List`1<RunItemsChoiceType> ItemsElementName { get; public set; }
    [XmlAttributeAttribute]
public Byte[] rsidRPr { get; public set; }
    [XmlAttributeAttribute]
public Byte[] rsidDel { get; public set; }
    [XmlAttributeAttribute]
public Byte[] rsidR { get; public set; }
    public CT_RPr get_rPr();
    public void set_rPr(CT_RPr value);
    public bool IsSetRPr();
    public CT_RPr AddNewRPr();
    public CT_AlternateContent get_alternateContent();
    public void set_alternateContent(CT_AlternateContent value);
    public ArrayList get_Items();
    public void set_Items(ArrayList value);
    public List`1<RunItemsChoiceType> get_ItemsElementName();
    public void set_ItemsElementName(List`1<RunItemsChoiceType> value);
    public Byte[] get_rsidRPr();
    public void set_rsidRPr(Byte[] value);
    public bool IsSetRsidRPr();
    public Byte[] get_rsidDel();
    public void set_rsidDel(Byte[] value);
    public bool IsSetRsidDel();
    public Byte[] get_rsidR();
    public void set_rsidR(Byte[] value);
    public bool IsSetRsidR();
    private List`1<T> GetObjectList(RunItemsChoiceType type);
    private int SizeOfArray(RunItemsChoiceType type);
    private T GetObjectArray(int p, RunItemsChoiceType type);
    private T InsertNewObject(RunItemsChoiceType type, int p);
    private T AddNewObject(RunItemsChoiceType type);
    private void SetObject(RunItemsChoiceType type, int p, T obj);
    private int GetObjectIndex(RunItemsChoiceType type, int p);
    private void RemoveObject(RunItemsChoiceType type, int p);
    public CT_Empty AddNewAnnotationRef();
    public CT_Br AddNewBr();
    public CT_Markup AddNewCommentReference();
    public CT_Empty AddNewContinuationSeparator();
    public CT_Empty AddNewCr();
    public CT_Empty AddNewDayLong();
    public CT_Empty AddNewDayShort();
    public CT_Text AddNewDelInstrText();
    public CT_Text AddNewDelText();
    public CT_Drawing AddNewDrawing();
    public CT_Empty AddNewEndnoteRef();
    public CT_FtnEdnRef AddNewEndnoteReference();
    public CT_FldChar AddNewFldChar();
    public CT_Empty AddNewFootnoteRef();
    public CT_FtnEdnRef AddNewFootnoteReference();
    public CT_Text AddNewInstrText();
    public CT_Empty AddNewLastRenderedPageBreak();
    public CT_Empty AddNewMonthLong();
    public CT_Empty AddNewMonthShort();
    public CT_Empty AddNewNoBreakHyphen();
    public CT_Object AddNewObject();
    public CT_Empty AddNewPgNum();
    public CT_Picture AddNewPict();
    public CT_PTab AddNewPtab();
    public CT_Ruby AddNewRuby();
    public CT_Empty AddNewSeparator();
    public CT_Empty AddNewSoftHyphen();
    public CT_Sym AddNewSym();
    public CT_Text AddNewT();
    public CT_Empty AddNewTab();
    public CT_Empty AddNewYearLong();
    public CT_Empty AddNewYearShort();
    public CT_Empty GetAnnotationRefArray(int pos);
    public CT_Br GetBrArray(int pos);
    public CT_Markup GetCommentReferenceArray(int pos);
    public CT_Empty GetContinuationSeparatorArray(int pos);
    public CT_Empty GetCrArray(int pos);
    public CT_Empty GetDayLongArray(int pos);
    public CT_Empty GetDayShortArray(int pos);
    public CT_Text GetDelInstrTextArray(int pos);
    public CT_Text GetDelTextArray(int pos);
    public CT_Drawing GetDrawingArray(int pos);
    public CT_Empty GetEndnoteRefArray(int pos);
    public CT_FtnEdnRef GetEndnoteReferenceArray(int pos);
    public CT_FldChar GetFldCharArray(int pos);
    public CT_Empty GetFootnoteRefArray(int pos);
    public CT_FtnEdnRef GetFootnoteReferenceArray(int pos);
    public CT_Text GetInstrTextArray(int pos);
    public CT_Empty GetLastRenderedPageBreakArray(int pos);
    public CT_Empty GetMonthLongArray(int pos);
    public CT_Empty GetMonthShortArray(int pos);
    public CT_Empty GetNoBreakHyphenArray(int pos);
    public CT_Object GetObjectArray(int pos);
    public CT_Empty GetPgNumArray(int pos);
    public CT_Picture GetPictArray(int pos);
    public CT_PTab GetPtabArray(int pos);
    public CT_Ruby GetRubyArray(int pos);
    public CT_Empty GetSeparatorArray(int pos);
    public CT_Empty GetSoftHyphenArray(int pos);
    public CT_Sym GetSymArray(int pos);
    public CT_Text GetTArray(int pos);
    public CT_Empty GetTabArray(int pos);
    public CT_Empty GetYearLongArray(int pos);
    public CT_Empty GetYearShortArray(int pos);
    public IList`1<CT_Empty> GetAnnotationRefList();
    public IList`1<CT_Br> GetBrList();
    public IList`1<CT_Markup> GetCommentReferenceList();
    public IList`1<CT_Empty> GetContinuationSeparatorList();
    public IList`1<CT_Empty> GetCrList();
    public IList`1<CT_Empty> GetDayLongList();
    public IList`1<CT_Empty> GetDayShortList();
    public IList`1<CT_Text> GetDelInstrTextList();
    public IList`1<CT_Text> GetDelTextList();
    public IList`1<CT_Drawing> GetDrawingList();
    public IList`1<CT_Empty> GetEndnoteRefList();
    public IList`1<CT_FtnEdnRef> GetEndnoteReferenceList();
    public IList`1<CT_FldChar> GetFldCharList();
    public IList`1<CT_Empty> GetFootnoteRefList();
    public IList`1<CT_FtnEdnRef> GetFootnoteReferenceList();
    public IList`1<CT_Text> GetInstrTextList();
    public IList`1<CT_Empty> GetLastRenderedPageBreakList();
    public IList`1<CT_Empty> GetMonthLongList();
    public IList`1<CT_Empty> GetMonthShortList();
    public IList`1<CT_Empty> GetNoBreakHyphenList();
    public IList`1<CT_Object> GetObjectList();
    public IList`1<CT_Empty> GetPgNumList();
    public IList`1<CT_Picture> GetPictList();
    public IList`1<CT_PTab> GetPtabList();
    public IList`1<CT_Ruby> GetRubyList();
    public IList`1<CT_Empty> GetSeparatorList();
    public IList`1<CT_Empty> GetSoftHyphenList();
    public IList`1<CT_Sym> GetSymList();
    public IList`1<CT_Text> GetTList();
    public IList`1<CT_Empty> GetTabList();
    public IList`1<CT_Empty> GetYearLongList();
    public IList`1<CT_Empty> GetYearShortList();
    public CT_Empty InsertNewAnnotationRef(int p);
    public CT_Br InsertNewBr(int p);
    public CT_Markup InsertNewCommentReference(int p);
    public CT_Empty InsertNewContinuationSeparator(int p);
    public CT_Empty InsertNewCr(int p);
    public CT_Empty InsertNewDayLong(int p);
    public CT_Empty InsertNewDayShort(int p);
    public CT_Text InsertNewDelInstrText(int p);
    public CT_Text InsertNewDelText(int p);
    public CT_Drawing InsertNewDrawing(int p);
    public CT_Empty InsertNewEndnoteRef(int p);
    public CT_FtnEdnRef InsertNewEndnoteReference(int p);
    public CT_FldChar InsertNewFldChar(int p);
    public CT_Empty InsertNewFootnoteRef(int p);
    public CT_FtnEdnRef InsertNewFootnoteReference(int p);
    public CT_Text InsertNewInstrText(int p);
    public CT_Empty InsertNewLastRenderedPageBreak(int p);
    public CT_Empty InsertNewMonthLong(int p);
    public CT_Empty InsertNewMonthShort(int p);
    public CT_Empty InsertNewNoBreakHyphen(int p);
    public CT_Object InsertNewObject(int p);
    public CT_Empty InsertNewPgNum(int p);
    public CT_Picture InsertNewPict(int p);
    public CT_PTab InsertNewPtab(int p);
    public CT_Ruby InsertNewRuby(int p);
    public CT_Empty InsertNewSeparator(int p);
    public CT_Empty InsertNewSoftHyphen(int p);
    public CT_Sym InsertNewSym(int p);
    public CT_Text InsertNewT(int p);
    public CT_Empty InsertNewTab(int p);
    public CT_Empty InsertNewYearLong(int p);
    public CT_Empty InsertNewYearShort(int p);
    public void RemoveAnnotationRef(int p);
    public void RemoveBr(int p);
    public void RemoveCommentReference(int p);
    public void RemoveContinuationSeparator(int p);
    public void RemoveCr(int p);
    public void RemoveDayLong(int p);
    public void RemoveDayShort(int p);
    public void RemoveDelInstrText(int p);
    public void RemoveDelText(int p);
    public void RemoveDrawing(int p);
    public void RemoveEndnoteRef(int p);
    public void RemoveEndnoteReference(int p);
    public void RemoveFldChar(int p);
    public void RemoveFootnoteRef(int p);
    public void RemoveFootnoteReference(int p);
    public void RemoveInstrText(int p);
    public void RemoveLastRenderedPageBreak(int p);
    public void RemoveMonthLong(int p);
    public void RemoveMonthShort(int p);
    public void RemoveNoBreakHyphen(int p);
    public void RemoveObject(int p);
    public void RemovePgNum(int p);
    public void RemovePict(int p);
    public void RemovePtab(int p);
    public void RemoveRuby(int p);
    public void RemoveSeparator(int p);
    public void RemoveSoftHyphen(int p);
    public void RemoveSym(int p);
    public void RemoveT(int p);
    public void RemoveTab(int p);
    public void RemoveYearLong(int p);
    public void RemoveYearShort(int p);
    public void SetAnnotationRef(int p, CT_Empty obj);
    public void SetBr(int p, CT_Br obj);
    public void SetCommentReference(int p, CT_Markup obj);
    public void SetContinuationSeparator(int p, CT_Empty obj);
    public void SetCr(int p, CT_Empty obj);
    public void SetDayLong(int p, CT_Empty obj);
    public void SetDayShort(int p, CT_Empty obj);
    public void SetDelInstrText(int p, CT_Text obj);
    public void SetDelText(int p, CT_Text obj);
    public void SetDrawing(int p, CT_Drawing obj);
    public void SetEndnoteRef(int p, CT_Empty obj);
    public void SetEndnoteReference(int p, CT_FtnEdnRef obj);
    public void SetFldChar(int p, CT_FldChar obj);
    public void SetFootnoteRef(int p, CT_Empty obj);
    public void SetFootnoteReference(int p, CT_FtnEdnRef obj);
    public void SetInstrText(int p, CT_Text obj);
    public void SetLastRenderedPageBreak(int p, CT_Empty obj);
    public void SetMonthLong(int p, CT_Empty obj);
    public void SetMonthShort(int p, CT_Empty obj);
    public void SetNoBreakHyphen(int p, CT_Empty obj);
    public void SetObject(int p, CT_Object obj);
    public void SetPgNum(int p, CT_Empty obj);
    public void SetPict(int p, CT_Picture obj);
    public void SetPtab(int p, CT_PTab obj);
    public void SetRuby(int p, CT_Ruby obj);
    public void SetSeparator(int p, CT_Empty obj);
    public void SetSoftHyphen(int p, CT_Empty obj);
    public void SetSym(int p, CT_Sym obj);
    public void SetT(int p, CT_Text obj);
    public void SetTab(int p, CT_Empty obj);
    public void SetYearLong(int p, CT_Empty obj);
    public void SetYearShort(int p, CT_Empty obj);
    public int SizeOfAnnotationRefArray();
    public int SizeOfBrArray();
    public int SizeOfCommentReferenceArray();
    public int SizeOfContinuationSeparatorArray();
    public int SizeOfCrArray();
    public int SizeOfDayLongArray();
    public int SizeOfDayShortArray();
    public int SizeOfDelInstrTextArray();
    public int SizeOfDelTextArray();
    public int SizeOfDrawingArray();
    public int SizeOfEndnoteRefArray();
    public int SizeOfEndnoteReferenceArray();
    public int SizeOfFldCharArray();
    public int SizeOfFootnoteRefArray();
    public int SizeOfFootnoteReferenceArray();
    public int SizeOfInstrTextArray();
    public int SizeOfLastRenderedPageBreakArray();
    public int SizeOfMonthLongArray();
    public int SizeOfMonthShortArray();
    public int SizeOfNoBreakHyphenArray();
    public int SizeOfObjectArray();
    public int SizeOfPgNumArray();
    public int SizeOfPictArray();
    public int SizeOfPtabArray();
    public int SizeOfRubyArray();
    public int SizeOfSeparatorArray();
    public int SizeOfSoftHyphenArray();
    public int SizeOfSymArray();
    public int SizeOfTArray();
    public int SizeOfTabArray();
    public int SizeOfYearLongArray();
    public int SizeOfYearShortArray();
    public static CT_R Parse(XmlNode node, XmlNamespaceManager namespaceManager);
    internal void Write(StreamWriter sw, string nodeName);
}
[XmlTypeAttribute]
[XmlRootAttribute]
public class NPOI.OpenXmlFormats.Wordprocessing.CT_ReadingModeInkLockDown : object {
    private ST_OnOff actualPgField;
    private ulong wField;
    private ulong hField;
    private string fontSzField;
    [XmlAttributeAttribute]
public ST_OnOff actualPg { get; public set; }
    [XmlAttributeAttribute]
public ulong w { get; public set; }
    [XmlAttributeAttribute]
public ulong h { get; public set; }
    [XmlAttributeAttribute]
public string fontSz { get; public set; }
    public static CT_ReadingModeInkLockDown Parse(XmlNode node, XmlNamespaceManager namespaceManager);
    internal void Write(StreamWriter sw, string nodeName);
    public ST_OnOff get_actualPg();
    public void set_actualPg(ST_OnOff value);
    public ulong get_w();
    public void set_w(ulong value);
    public ulong get_h();
    public void set_h(ulong value);
    public string get_fontSz();
    public void set_fontSz(string value);
}
[XmlTypeAttribute]
[XmlRootAttribute]
public class NPOI.OpenXmlFormats.Wordprocessing.CT_RecipientData : object {
    private CT_OnOff activeField;
    private CT_DecimalNumber columnField;
    private Byte[] uniqueTagField;
    [XmlElementAttribute]
public CT_OnOff active { get; public set; }
    [XmlElementAttribute]
public CT_DecimalNumber column { get; public set; }
    [XmlElementAttribute]
public Byte[] uniqueTag { get; public set; }
    public CT_OnOff get_active();
    public void set_active(CT_OnOff value);
    public CT_DecimalNumber get_column();
    public void set_column(CT_DecimalNumber value);
    public Byte[] get_uniqueTag();
    public void set_uniqueTag(Byte[] value);
}
[XmlTypeAttribute]
[XmlRootAttribute("recipients")]
public class NPOI.OpenXmlFormats.Wordprocessing.CT_Recipients : object {
    private List`1<CT_RecipientData> recipientDataField;
    [XmlElementAttribute("recipientData")]
public List`1<CT_RecipientData> recipientData { get; public set; }
    public List`1<CT_RecipientData> get_recipientData();
    public void set_recipientData(List`1<CT_RecipientData> value);
}
[XmlIncludeAttribute("NPOI.OpenXmlFormats.Wordprocessing.CT_FontRel")]
[XmlIncludeAttribute("NPOI.OpenXmlFormats.Wordprocessing.CT_HdrFtrRef")]
[XmlTypeAttribute]
[XmlRootAttribute]
public class NPOI.OpenXmlFormats.Wordprocessing.CT_Rel : object {
    private string idField;
    [XmlAttributeAttribute]
public string id { get; public set; }
    public string get_id();
    public void set_id(string value);
    public static CT_Rel Parse(XmlNode node, XmlNamespaceManager namespaceManager);
    internal void Write(StreamWriter sw, string nodeName);
}
[XmlTypeAttribute]
[XmlRootAttribute]
public class NPOI.OpenXmlFormats.Wordprocessing.CT_Row : object {
    private CT_TblPrEx tblPrExField;
    private CT_TrPr trPrField;
    private ArrayList itemsField;
    private List`1<ItemsChoiceTableRowType> itemsElementNameField;
    private Byte[] rsidRPrField;
    private Byte[] rsidRField;
    private Byte[] rsidDelField;
    private Byte[] rsidTrField;
    private Byte[] paraIdField;
    private Byte[] textIdField;
    private object parent;
    private CT_Tbl _table;
    [XmlIgnoreAttribute]
public object Parent { get; }
    [XmlElementAttribute]
public CT_TblPrEx tblPrEx { get; public set; }
    [XmlElementAttribute]
public CT_TrPr trPr { get; public set; }
    [XmlElementAttribute("oMath", "NPOI.OpenXmlFormats.Shared.CT_OMath")]
[XmlElementAttribute("oMathPara", "NPOI.OpenXmlFormats.Shared.CT_OMathPara")]
[XmlElementAttribute("bookmarkEnd", "NPOI.OpenXmlFormats.Wordprocessing.CT_MarkupRange")]
[XmlElementAttribute("bookmarkStart", "NPOI.OpenXmlFormats.Wordprocessing.CT_Bookmark")]
[XmlElementAttribute("commentRangeEnd", "NPOI.OpenXmlFormats.Wordprocessing.CT_MarkupRange")]
[XmlElementAttribute("commentRangeStart", "NPOI.OpenXmlFormats.Wordprocessing.CT_MarkupRange")]
[XmlElementAttribute("customXml", "NPOI.OpenXmlFormats.Wordprocessing.CT_CustomXmlCell")]
[XmlElementAttribute("customXmlDelRangeEnd", "NPOI.OpenXmlFormats.Wordprocessing.CT_Markup")]
[XmlElementAttribute("customXmlDelRangeStart", "NPOI.OpenXmlFormats.Wordprocessing.CT_TrackChange")]
[XmlElementAttribute("customXmlInsRangeEnd", "NPOI.OpenXmlFormats.Wordprocessing.CT_Markup")]
[XmlElementAttribute("customXmlInsRangeStart", "NPOI.OpenXmlFormats.Wordprocessing.CT_TrackChange")]
[XmlElementAttribute("customXmlMoveFromRangeEnd", "NPOI.OpenXmlFormats.Wordprocessing.CT_Markup")]
[XmlElementAttribute("customXmlMoveFromRangeStart", "NPOI.OpenXmlFormats.Wordprocessing.CT_TrackChange")]
[XmlElementAttribute("customXmlMoveToRangeEnd", "NPOI.OpenXmlFormats.Wordprocessing.CT_Markup")]
[XmlElementAttribute("customXmlMoveToRangeStart", "NPOI.OpenXmlFormats.Wordprocessing.CT_TrackChange")]
[XmlElementAttribute("del", "NPOI.OpenXmlFormats.Wordprocessing.CT_RunTrackChange")]
[XmlElementAttribute("ins", "NPOI.OpenXmlFormats.Wordprocessing.CT_RunTrackChange")]
[XmlElementAttribute("moveFrom", "NPOI.OpenXmlFormats.Wordprocessing.CT_RunTrackChange")]
[XmlElementAttribute("moveFromRangeEnd", "NPOI.OpenXmlFormats.Wordprocessing.CT_MarkupRange")]
[XmlElementAttribute("moveFromRangeStart", "NPOI.OpenXmlFormats.Wordprocessing.CT_MoveBookmark")]
[XmlElementAttribute("moveTo", "NPOI.OpenXmlFormats.Wordprocessing.CT_RunTrackChange")]
[XmlElementAttribute("moveToRangeEnd", "NPOI.OpenXmlFormats.Wordprocessing.CT_MarkupRange")]
[XmlElementAttribute("moveToRangeStart", "NPOI.OpenXmlFormats.Wordprocessing.CT_MoveBookmark")]
[XmlElementAttribute("permEnd", "NPOI.OpenXmlFormats.Wordprocessing.CT_Perm")]
[XmlElementAttribute("permStart", "NPOI.OpenXmlFormats.Wordprocessing.CT_PermStart")]
[XmlElementAttribute("proofErr", "NPOI.OpenXmlFormats.Wordprocessing.CT_ProofErr")]
[XmlElementAttribute("sdt", "NPOI.OpenXmlFormats.Wordprocessing.CT_SdtCell")]
[XmlElementAttribute("tc", "NPOI.OpenXmlFormats.Wordprocessing.CT_Tc")]
[XmlChoiceIdentifierAttribute("ItemsElementName")]
public ArrayList Items { get; public set; }
    [XmlElementAttribute("ItemsElementName")]
[XmlIgnoreAttribute]
public List`1<ItemsChoiceTableRowType> ItemsElementName { get; public set; }
    [XmlAttributeAttribute]
public Byte[] rsidRPr { get; public set; }
    [XmlAttributeAttribute]
public Byte[] rsidR { get; public set; }
    [XmlAttributeAttribute]
public Byte[] rsidDel { get; public set; }
    [XmlAttributeAttribute]
public Byte[] rsidTr { get; public set; }
    [XmlIgnoreAttribute]
public CT_Tbl Table { get; public set; }
    public object get_Parent();
    public static CT_Row Parse(XmlNode node, XmlNamespaceManager namespaceManager, object parent);
    internal void Write(StreamWriter sw, string nodeName);
    public CT_Row Copy();
    public void RemoveTc(int pos);
    public CT_TblPrEx get_tblPrEx();
    public void set_tblPrEx(CT_TblPrEx value);
    public CT_TrPr get_trPr();
    public void set_trPr(CT_TrPr value);
    public ArrayList get_Items();
    public void set_Items(ArrayList value);
    public List`1<ItemsChoiceTableRowType> get_ItemsElementName();
    public void set_ItemsElementName(List`1<ItemsChoiceTableRowType> value);
    public Byte[] get_rsidRPr();
    public void set_rsidRPr(Byte[] value);
    public Byte[] get_rsidR();
    public void set_rsidR(Byte[] value);
    public Byte[] get_rsidDel();
    public void set_rsidDel(Byte[] value);
    public Byte[] get_rsidTr();
    public void set_rsidTr(Byte[] value);
    public CT_Tbl get_Table();
    public void set_Table(CT_Tbl value);
    public IList`1<CT_Tc> GetTcList();
    public bool IsSetTrPr();
    public CT_TrPr AddNewTrPr();
    public CT_Tc AddNewTc();
    public int SizeOfTcArray();
    public CT_Tc GetTcArray(int p);
    private List`1<T> GetObjectList(ItemsChoiceTableRowType type);
    private int SizeOfArray(ItemsChoiceTableRowType type);
    private T GetObjectArray(int p, ItemsChoiceTableRowType type);
    private T InsertNewObject(ItemsChoiceTableRowType type, int p);
    private T AddNewObject(ItemsChoiceTableRowType type);
    private void SetObject(ItemsChoiceTableRowType type, int p, T obj);
    private int GetObjectIndex(ItemsChoiceTableRowType type, int p);
    private void RemoveObject(ItemsChoiceTableRowType type, int p);
}
[XmlTypeAttribute]
[XmlRootAttribute]
public class NPOI.OpenXmlFormats.Wordprocessing.CT_RPr : object {
    private CT_String rStyleField;
    private CT_Fonts rFontsField;
    private CT_OnOff bField;
    private CT_OnOff bCsField;
    private CT_OnOff iField;
    private CT_OnOff iCsField;
    private CT_OnOff capsField;
    private CT_OnOff smallCapsField;
    private CT_OnOff strikeField;
    private CT_OnOff dstrikeField;
    private CT_OnOff outlineField;
    private CT_OnOff shadowField;
    private CT_OnOff embossField;
    private CT_OnOff imprintField;
    private CT_OnOff noProofField;
    private CT_OnOff snapToGridField;
    private CT_OnOff vanishField;
    private CT_OnOff webHiddenField;
    private CT_Color colorField;
    private CT_SignedTwipsMeasure spacingField;
    private CT_TextScale wField;
    private CT_HpsMeasure kernField;
    private CT_SignedHpsMeasure positionField;
    private CT_HpsMeasure szField;
    private CT_HpsMeasure szCsField;
    private CT_Highlight highlightField;
    private CT_Underline uField;
    private CT_TextEffect effectField;
    private CT_Border bdrField;
    private CT_Shd shdField;
    private CT_FitText fitTextField;
    private CT_VerticalAlignRun vertAlignField;
    private CT_OnOff rtlField;
    private CT_OnOff csField;
    private CT_Em emField;
    private CT_Language langField;
    private CT_EastAsianLayout eastAsianLayoutField;
    private CT_OnOff specVanishField;
    private CT_OnOff oMathField;
    private CT_RPrChange rPrChangeField;
    [XmlElementAttribute]
public CT_String rStyle { get; public set; }
    [XmlElementAttribute]
public CT_Fonts rFonts { get; public set; }
    [XmlElementAttribute]
public CT_OnOff b { get; public set; }
    [XmlElementAttribute]
public CT_OnOff bCs { get; public set; }
    [XmlElementAttribute]
public CT_OnOff i { get; public set; }
    [XmlElementAttribute]
public CT_OnOff iCs { get; public set; }
    [XmlElementAttribute]
public CT_OnOff caps { get; public set; }
    [XmlElementAttribute]
public CT_OnOff smallCaps { get; public set; }
    [XmlElementAttribute]
public CT_OnOff strike { get; public set; }
    [XmlElementAttribute]
public CT_OnOff dstrike { get; public set; }
    [XmlElementAttribute]
public CT_OnOff outline { get; public set; }
    [XmlElementAttribute]
public CT_OnOff shadow { get; public set; }
    [XmlElementAttribute]
public CT_OnOff emboss { get; public set; }
    [XmlElementAttribute]
public CT_OnOff imprint { get; public set; }
    [XmlElementAttribute]
public CT_OnOff noProof { get; public set; }
    [XmlElementAttribute]
public CT_OnOff snapToGrid { get; public set; }
    [XmlElementAttribute]
public CT_OnOff vanish { get; public set; }
    [XmlElementAttribute]
public CT_OnOff webHidden { get; public set; }
    [XmlElementAttribute]
public CT_Color color { get; public set; }
    [XmlElementAttribute]
public CT_SignedTwipsMeasure spacing { get; public set; }
    [XmlElementAttribute]
public CT_TextScale w { get; public set; }
    [XmlElementAttribute]
public CT_HpsMeasure kern { get; public set; }
    [XmlElementAttribute]
public CT_SignedHpsMeasure position { get; public set; }
    [XmlElementAttribute]
public CT_HpsMeasure sz { get; public set; }
    [XmlElementAttribute]
public CT_HpsMeasure szCs { get; public set; }
    [XmlElementAttribute]
public CT_Highlight highlight { get; public set; }
    [XmlElementAttribute]
public CT_Underline u { get; public set; }
    [XmlElementAttribute]
public CT_TextEffect effect { get; public set; }
    [XmlElementAttribute]
public CT_Border bdr { get; public set; }
    [XmlElementAttribute]
public CT_Shd shd { get; public set; }
    [XmlElementAttribute]
public CT_FitText fitText { get; public set; }
    [XmlElementAttribute]
public CT_VerticalAlignRun vertAlign { get; public set; }
    [XmlElementAttribute]
public CT_OnOff rtl { get; public set; }
    [XmlElementAttribute]
public CT_OnOff cs { get; public set; }
    [XmlElementAttribute]
public CT_Em em { get; public set; }
    [XmlElementAttribute]
public CT_Language lang { get; public set; }
    [XmlElementAttribute]
public CT_EastAsianLayout eastAsianLayout { get; public set; }
    [XmlElementAttribute]
public CT_OnOff specVanish { get; public set; }
    [XmlElementAttribute]
public CT_OnOff oMath { get; public set; }
    [XmlElementAttribute]
public CT_RPrChange rPrChange { get; public set; }
    public static CT_RPr Parse(XmlNode node, XmlNamespaceManager namespaceManager);
    internal void Write(StreamWriter sw, string nodeName);
    public CT_String AddNewRStyle();
    public CT_String get_rStyle();
    public void set_rStyle(CT_String value);
    public CT_Fonts get_rFonts();
    public void set_rFonts(CT_Fonts value);
    public CT_OnOff get_b();
    public void set_b(CT_OnOff value);
    public CT_OnOff get_bCs();
    public void set_bCs(CT_OnOff value);
    public CT_OnOff get_i();
    public void set_i(CT_OnOff value);
    public CT_OnOff get_iCs();
    public void set_iCs(CT_OnOff value);
    public CT_OnOff get_caps();
    public void set_caps(CT_OnOff value);
    public CT_OnOff get_smallCaps();
    public void set_smallCaps(CT_OnOff value);
    public CT_OnOff get_strike();
    public void set_strike(CT_OnOff value);
    public CT_OnOff get_dstrike();
    public void set_dstrike(CT_OnOff value);
    public CT_OnOff get_outline();
    public void set_outline(CT_OnOff value);
    public CT_OnOff get_shadow();
    public void set_shadow(CT_OnOff value);
    public CT_OnOff get_emboss();
    public void set_emboss(CT_OnOff value);
    public CT_OnOff get_imprint();
    public void set_imprint(CT_OnOff value);
    public CT_OnOff get_noProof();
    public void set_noProof(CT_OnOff value);
    public CT_OnOff get_snapToGrid();
    public void set_snapToGrid(CT_OnOff value);
    public CT_OnOff get_vanish();
    public void set_vanish(CT_OnOff value);
    public CT_OnOff get_webHidden();
    public void set_webHidden(CT_OnOff value);
    public CT_Color get_color();
    public void set_color(CT_Color value);
    public CT_SignedTwipsMeasure get_spacing();
    public void set_spacing(CT_SignedTwipsMeasure value);
    public CT_TextScale get_w();
    public void set_w(CT_TextScale value);
    public CT_HpsMeasure get_kern();
    public void set_kern(CT_HpsMeasure value);
    public CT_SignedHpsMeasure get_position();
    public void set_position(CT_SignedHpsMeasure value);
    public CT_HpsMeasure get_sz();
    public void set_sz(CT_HpsMeasure value);
    public CT_HpsMeasure get_szCs();
    public void set_szCs(CT_HpsMeasure value);
    public CT_Highlight get_highlight();
    public void set_highlight(CT_Highlight value);
    public CT_Underline get_u();
    public void set_u(CT_Underline value);
    public CT_TextEffect get_effect();
    public void set_effect(CT_TextEffect value);
    public CT_Border get_bdr();
    public void set_bdr(CT_Border value);
    public CT_Shd get_shd();
    public void set_shd(CT_Shd value);
    public CT_FitText get_fitText();
    public void set_fitText(CT_FitText value);
    public CT_VerticalAlignRun get_vertAlign();
    public void set_vertAlign(CT_VerticalAlignRun value);
    public CT_OnOff get_rtl();
    public void set_rtl(CT_OnOff value);
    public CT_OnOff get_cs();
    public void set_cs(CT_OnOff value);
    public CT_Em get_em();
    public void set_em(CT_Em value);
    public CT_Language get_lang();
    public void set_lang(CT_Language value);
    public CT_EastAsianLayout get_eastAsianLayout();
    public void set_eastAsianLayout(CT_EastAsianLayout value);
    public CT_OnOff get_specVanish();
    public void set_specVanish(CT_OnOff value);
    public CT_OnOff get_oMath();
    public void set_oMath(CT_OnOff value);
    public CT_RPrChange get_rPrChange();
    public void set_rPrChange(CT_RPrChange value);
    public bool IsSetLang();
    public CT_Language AddNewLang();
    public CT_Fonts AddNewRFonts();
    public CT_OnOff AddNewB();
    public CT_Shd AddNewShd();
    public CT_OnOff AddNewBCs();
    public CT_Color AddNewColor();
    public CT_HpsMeasure AddNewSz();
    public CT_HpsMeasure AddNewSzCs();
    public bool IsSetPosition();
    public CT_SignedHpsMeasure AddNewPosition();
    public bool IsSetB();
    public bool IsSetI();
    public CT_OnOff AddNewI();
    public void AddNewNoProof();
    public bool IsSetU();
    public CT_Underline AddNewU();
    public bool IsSetStrike();
    public CT_OnOff AddNewStrike();
    public bool IsSetVertAlign();
    public CT_VerticalAlignRun AddNewVertAlign();
    public bool IsSetRFonts();
    public bool IsSetSz();
    public bool IsSetColor();
    public bool IsSetDstrike();
    public CT_OnOff AddNewDstrike();
    public bool IsSetEmboss();
    public CT_OnOff AddNewEmboss();
    public bool IsSetImprint();
    public CT_OnOff AddNewImprint();
    public bool IsSetShadow();
    public CT_OnOff AddNewShadow();
    public bool IsSetCaps();
    public CT_OnOff AddNewCaps();
    public bool IsSetSmallCaps();
    public CT_OnOff AddNewSmallCaps();
    public bool IsSetKern();
    public CT_HpsMeasure AddNewKern();
    public bool IsSetSpacing();
    public CT_Highlight AddNewHighlight();
    public CT_SignedTwipsMeasure AddNewSpacing();
    public bool IsSetHighlight();
}
[XmlTypeAttribute]
[XmlRootAttribute]
public class NPOI.OpenXmlFormats.Wordprocessing.CT_RPrChange : CT_TrackChange {
    private CT_RPrOriginal rPrField;
    [XmlElementAttribute]
public CT_RPrOriginal rPr { get; public set; }
    public static CT_RPrChange Parse(XmlNode node, XmlNamespaceManager namespaceManager);
    internal void Write(StreamWriter sw, string nodeName);
    public CT_RPrOriginal get_rPr();
    public void set_rPr(CT_RPrOriginal value);
}
[XmlTypeAttribute]
[XmlRootAttribute]
public class NPOI.OpenXmlFormats.Wordprocessing.CT_RPrDefault : object {
    private CT_RPr rPrField;
    [XmlElementAttribute]
public CT_RPr rPr { get; public set; }
    public static CT_RPrDefault Parse(XmlNode node, XmlNamespaceManager namespaceManager);
    internal void Write(StreamWriter sw, string nodeName);
    public CT_RPr get_rPr();
    public void set_rPr(CT_RPr value);
    public bool IsSetRPr();
    public CT_RPr AddNewRPr();
}
[XmlTypeAttribute]
[XmlRootAttribute]
public class NPOI.OpenXmlFormats.Wordprocessing.CT_RPrOriginal : object {
    private List`1<CT_SignedTwipsMeasure> spacingField;
    private List`1<CT_VerticalAlignRun> vertAlignField;
    private List`1<CT_TextScale> wField;
    private List`1<CT_OnOff> noProofField;
    private List`1<CT_OnOff> snapToGridField;
    private List`1<CT_Language> langField;
    private List`1<CT_HpsMeasure> kernField;
    private List`1<CT_OnOff> outlineField;
    private List`1<CT_SignedHpsMeasure> positionField;
    private List`1<CT_Fonts> rFontsField;
    private List`1<CT_String> rStyleField;
    private List`1<CT_OnOff> rtlField;
    private List`1<CT_OnOff> shadowField;
    private List`1<CT_OnOff> strikeField;
    private List`1<CT_Shd> shdField;
    private List`1<CT_HpsMeasure> szField;
    private List`1<CT_HpsMeasure> szCsField;
    private List`1<CT_OnOff> smallCapsField;
    private List`1<CT_Underline> uField;
    private List`1<CT_OnOff> vanishField;
    private List`1<CT_OnOff> oMathField;
    private List`1<CT_OnOff> webHiddenField;
    private List`1<CT_OnOff> specVanishField;
    private List`1<CT_OnOff> bField;
    private List`1<CT_OnOff> bCsField;
    private List`1<CT_Border> bdrField;
    private List`1<CT_OnOff> capsField;
    private List`1<CT_Color> colorField;
    private List`1<CT_OnOff> csField;
    private List`1<CT_OnOff> dstrikeField;
    private List`1<CT_EastAsianLayout> eastAsianLayoutField;
    private List`1<CT_TextEffect> effectField;
    private List`1<CT_Em> emField;
    private List`1<CT_OnOff> embossField;
    private List`1<CT_FitText> fitTextField;
    private List`1<CT_Highlight> highlightField;
    private List`1<CT_OnOff> iField;
    private List`1<CT_OnOff> iCsField;
    private List`1<CT_OnOff> imprintField;
    public List`1<CT_SignedTwipsMeasure> spacing { get; public set; }
    public List`1<CT_VerticalAlignRun> vertAlign { get; public set; }
    public List`1<CT_TextScale> w { get; public set; }
    public List`1<CT_OnOff> noProof { get; public set; }
    public List`1<CT_OnOff> snapToGrid { get; public set; }
    public List`1<CT_Language> lang { get; public set; }
    public List`1<CT_HpsMeasure> kern { get; public set; }
    public List`1<CT_OnOff> outline { get; public set; }
    public List`1<CT_SignedHpsMeasure> position { get; public set; }
    public List`1<CT_Fonts> rFonts { get; public set; }
    public List`1<CT_String> rStyle { get; public set; }
    public List`1<CT_OnOff> rtl { get; public set; }
    public List`1<CT_OnOff> shadow { get; public set; }
    public List`1<CT_OnOff> strike { get; public set; }
    public List`1<CT_Shd> shd { get; public set; }
    public List`1<CT_HpsMeasure> sz { get; public set; }
    public List`1<CT_HpsMeasure> szCs { get; public set; }
    public List`1<CT_OnOff> smallCaps { get; public set; }
    public List`1<CT_Underline> u { get; public set; }
    public List`1<CT_OnOff> vanish { get; public set; }
    public List`1<CT_OnOff> oMath { get; public set; }
    public List`1<CT_OnOff> webHidden { get; public set; }
    public List`1<CT_OnOff> specVanish { get; public set; }
    public List`1<CT_OnOff> b { get; public set; }
    public List`1<CT_OnOff> bCs { get; public set; }
    public List`1<CT_Border> bdr { get; public set; }
    public List`1<CT_OnOff> caps { get; public set; }
    public List`1<CT_Color> color { get; public set; }
    public List`1<CT_OnOff> cs { get; public set; }
    public List`1<CT_OnOff> dstrike { get; public set; }
    public List`1<CT_EastAsianLayout> eastAsianLayout { get; public set; }
    public List`1<CT_TextEffect> effect { get; public set; }
    public List`1<CT_Em> em { get; public set; }
    public List`1<CT_OnOff> emboss { get; public set; }
    public List`1<CT_FitText> fitText { get; public set; }
    public List`1<CT_Highlight> highlight { get; public set; }
    public List`1<CT_OnOff> i { get; public set; }
    public List`1<CT_OnOff> iCs { get; public set; }
    public List`1<CT_OnOff> imprint { get; public set; }
    public List`1<CT_SignedTwipsMeasure> get_spacing();
    public void set_spacing(List`1<CT_SignedTwipsMeasure> value);
    public List`1<CT_VerticalAlignRun> get_vertAlign();
    public void set_vertAlign(List`1<CT_VerticalAlignRun> value);
    public List`1<CT_TextScale> get_w();
    public void set_w(List`1<CT_TextScale> value);
    public List`1<CT_OnOff> get_noProof();
    public void set_noProof(List`1<CT_OnOff> value);
    public List`1<CT_OnOff> get_snapToGrid();
    public void set_snapToGrid(List`1<CT_OnOff> value);
    public List`1<CT_Language> get_lang();
    public void set_lang(List`1<CT_Language> value);
    public List`1<CT_HpsMeasure> get_kern();
    public void set_kern(List`1<CT_HpsMeasure> value);
    public List`1<CT_OnOff> get_outline();
    public void set_outline(List`1<CT_OnOff> value);
    public List`1<CT_SignedHpsMeasure> get_position();
    public void set_position(List`1<CT_SignedHpsMeasure> value);
    public List`1<CT_Fonts> get_rFonts();
    public void set_rFonts(List`1<CT_Fonts> value);
    public List`1<CT_String> get_rStyle();
    public void set_rStyle(List`1<CT_String> value);
    public List`1<CT_OnOff> get_rtl();
    public void set_rtl(List`1<CT_OnOff> value);
    public List`1<CT_OnOff> get_shadow();
    public void set_shadow(List`1<CT_OnOff> value);
    public List`1<CT_OnOff> get_strike();
    public void set_strike(List`1<CT_OnOff> value);
    public List`1<CT_Shd> get_shd();
    public void set_shd(List`1<CT_Shd> value);
    public List`1<CT_HpsMeasure> get_sz();
    public void set_sz(List`1<CT_HpsMeasure> value);
    public List`1<CT_HpsMeasure> get_szCs();
    public void set_szCs(List`1<CT_HpsMeasure> value);
    public List`1<CT_OnOff> get_smallCaps();
    public void set_smallCaps(List`1<CT_OnOff> value);
    public List`1<CT_Underline> get_u();
    public void set_u(List`1<CT_Underline> value);
    public List`1<CT_OnOff> get_vanish();
    public void set_vanish(List`1<CT_OnOff> value);
    public List`1<CT_OnOff> get_oMath();
    public void set_oMath(List`1<CT_OnOff> value);
    public List`1<CT_OnOff> get_webHidden();
    public void set_webHidden(List`1<CT_OnOff> value);
    public List`1<CT_OnOff> get_specVanish();
    public void set_specVanish(List`1<CT_OnOff> value);
    public List`1<CT_OnOff> get_b();
    public void set_b(List`1<CT_OnOff> value);
    public List`1<CT_OnOff> get_bCs();
    public void set_bCs(List`1<CT_OnOff> value);
    public List`1<CT_Border> get_bdr();
    public void set_bdr(List`1<CT_Border> value);
    public List`1<CT_OnOff> get_caps();
    public void set_caps(List`1<CT_OnOff> value);
    public List`1<CT_Color> get_color();
    public void set_color(List`1<CT_Color> value);
    public List`1<CT_OnOff> get_cs();
    public void set_cs(List`1<CT_OnOff> value);
    public List`1<CT_OnOff> get_dstrike();
    public void set_dstrike(List`1<CT_OnOff> value);
    public List`1<CT_EastAsianLayout> get_eastAsianLayout();
    public void set_eastAsianLayout(List`1<CT_EastAsianLayout> value);
    public List`1<CT_TextEffect> get_effect();
    public void set_effect(List`1<CT_TextEffect> value);
    public List`1<CT_Em> get_em();
    public void set_em(List`1<CT_Em> value);
    public List`1<CT_OnOff> get_emboss();
    public void set_emboss(List`1<CT_OnOff> value);
    public List`1<CT_FitText> get_fitText();
    public void set_fitText(List`1<CT_FitText> value);
    public List`1<CT_Highlight> get_highlight();
    public void set_highlight(List`1<CT_Highlight> value);
    public List`1<CT_OnOff> get_i();
    public void set_i(List`1<CT_OnOff> value);
    public List`1<CT_OnOff> get_iCs();
    public void set_iCs(List`1<CT_OnOff> value);
    public List`1<CT_OnOff> get_imprint();
    public void set_imprint(List`1<CT_OnOff> value);
    public static CT_RPrOriginal Parse(XmlNode node, XmlNamespaceManager namespaceManager);
    internal void Write(StreamWriter sw, string nodeName);
}
[XmlTypeAttribute]
[XmlRootAttribute]
public class NPOI.OpenXmlFormats.Wordprocessing.CT_Ruby : object {
    private CT_RubyPr rubyPrField;
    private CT_RubyContent rtField;
    private CT_RubyContent rubyBaseField;
    [XmlElementAttribute]
public CT_RubyPr rubyPr { get; public set; }
    [XmlElementAttribute]
public CT_RubyContent rt { get; public set; }
    [XmlElementAttribute]
public CT_RubyContent rubyBase { get; public set; }
    public static CT_Ruby Parse(XmlNode node, XmlNamespaceManager namespaceManager);
    internal void Write(StreamWriter sw, string nodeName);
    public CT_RubyPr get_rubyPr();
    public void set_rubyPr(CT_RubyPr value);
    public CT_RubyContent get_rt();
    public void set_rt(CT_RubyContent value);
    public CT_RubyContent get_rubyBase();
    public void set_rubyBase(CT_RubyContent value);
}
[XmlTypeAttribute]
[XmlRootAttribute]
public class NPOI.OpenXmlFormats.Wordprocessing.CT_RubyAlign : object {
    private ST_RubyAlign valField;
    [XmlAttributeAttribute]
public ST_RubyAlign val { get; public set; }
    public static CT_RubyAlign Parse(XmlNode node, XmlNamespaceManager namespaceManager);
    internal void Write(StreamWriter sw, string nodeName);
    public ST_RubyAlign get_val();
    public void set_val(ST_RubyAlign value);
}
[XmlTypeAttribute]
[XmlRootAttribute]
public class NPOI.OpenXmlFormats.Wordprocessing.CT_RubyContent : object {
    private ArrayList itemsField;
    private List`1<ItemsChoiceType16> itemsElementNameField;
    [XmlElementAttribute("oMath", "NPOI.OpenXmlFormats.Shared.CT_OMath")]
[XmlElementAttribute("oMathPara", "NPOI.OpenXmlFormats.Shared.CT_OMathPara")]
[XmlElementAttribute("bookmarkEnd", "NPOI.OpenXmlFormats.Wordprocessing.CT_MarkupRange")]
[XmlElementAttribute("bookmarkStart", "NPOI.OpenXmlFormats.Wordprocessing.CT_Bookmark")]
[XmlElementAttribute("commentRangeEnd", "NPOI.OpenXmlFormats.Wordprocessing.CT_MarkupRange")]
[XmlElementAttribute("commentRangeStart", "NPOI.OpenXmlFormats.Wordprocessing.CT_MarkupRange")]
[XmlElementAttribute("customXmlDelRangeEnd", "NPOI.OpenXmlFormats.Wordprocessing.CT_Markup")]
[XmlElementAttribute("customXmlDelRangeStart", "NPOI.OpenXmlFormats.Wordprocessing.CT_TrackChange")]
[XmlElementAttribute("customXmlInsRangeEnd", "NPOI.OpenXmlFormats.Wordprocessing.CT_Markup")]
[XmlElementAttribute("customXmlInsRangeStart", "NPOI.OpenXmlFormats.Wordprocessing.CT_TrackChange")]
[XmlElementAttribute("customXmlMoveFromRangeEnd", "NPOI.OpenXmlFormats.Wordprocessing.CT_Markup")]
[XmlElementAttribute("customXmlMoveFromRangeStart", "NPOI.OpenXmlFormats.Wordprocessing.CT_TrackChange")]
[XmlElementAttribute("customXmlMoveToRangeEnd", "NPOI.OpenXmlFormats.Wordprocessing.CT_Markup")]
[XmlElementAttribute("customXmlMoveToRangeStart", "NPOI.OpenXmlFormats.Wordprocessing.CT_TrackChange")]
[XmlElementAttribute("del", "NPOI.OpenXmlFormats.Wordprocessing.CT_RunTrackChange")]
[XmlElementAttribute("ins", "NPOI.OpenXmlFormats.Wordprocessing.CT_RunTrackChange")]
[XmlElementAttribute("moveFrom", "NPOI.OpenXmlFormats.Wordprocessing.CT_RunTrackChange")]
[XmlElementAttribute("moveFromRangeEnd", "NPOI.OpenXmlFormats.Wordprocessing.CT_MarkupRange")]
[XmlElementAttribute("moveFromRangeStart", "NPOI.OpenXmlFormats.Wordprocessing.CT_MoveBookmark")]
[XmlElementAttribute("moveTo", "NPOI.OpenXmlFormats.Wordprocessing.CT_RunTrackChange")]
[XmlElementAttribute("moveToRangeEnd", "NPOI.OpenXmlFormats.Wordprocessing.CT_MarkupRange")]
[XmlElementAttribute("moveToRangeStart", "NPOI.OpenXmlFormats.Wordprocessing.CT_MoveBookmark")]
[XmlElementAttribute("permEnd", "NPOI.OpenXmlFormats.Wordprocessing.CT_Perm")]
[XmlElementAttribute("permStart", "NPOI.OpenXmlFormats.Wordprocessing.CT_PermStart")]
[XmlElementAttribute("proofErr", "NPOI.OpenXmlFormats.Wordprocessing.CT_ProofErr")]
[XmlElementAttribute("r", "NPOI.OpenXmlFormats.Wordprocessing.CT_R")]
[XmlChoiceIdentifierAttribute("ItemsElementName")]
public ArrayList Items { get; public set; }
    [XmlElementAttribute("ItemsElementName")]
[XmlIgnoreAttribute]
public List`1<ItemsChoiceType16> ItemsElementName { get; public set; }
    public ArrayList get_Items();
    public void set_Items(ArrayList value);
    public List`1<ItemsChoiceType16> get_ItemsElementName();
    public void set_ItemsElementName(List`1<ItemsChoiceType16> value);
    public static CT_RubyContent Parse(XmlNode node, XmlNamespaceManager namespaceManager);
    internal void Write(StreamWriter sw, string nodeName);
}
[XmlTypeAttribute]
[XmlRootAttribute]
public class NPOI.OpenXmlFormats.Wordprocessing.CT_RubyPr : object {
    private CT_RubyAlign rubyAlignField;
    private CT_HpsMeasure hpsField;
    private CT_HpsMeasure hpsRaiseField;
    private CT_HpsMeasure hpsBaseTextField;
    private CT_Lang lidField;
    private CT_OnOff dirtyField;
    [XmlElementAttribute]
public CT_RubyAlign rubyAlign { get; public set; }
    [XmlElementAttribute]
public CT_HpsMeasure hps { get; public set; }
    [XmlElementAttribute]
public CT_HpsMeasure hpsRaise { get; public set; }
    [XmlElementAttribute]
public CT_HpsMeasure hpsBaseText { get; public set; }
    [XmlElementAttribute]
public CT_Lang lid { get; public set; }
    [XmlElementAttribute]
public CT_OnOff dirty { get; public set; }
    public static CT_RubyPr Parse(XmlNode node, XmlNamespaceManager namespaceManager);
    internal void Write(StreamWriter sw, string nodeName);
    public CT_RubyAlign get_rubyAlign();
    public void set_rubyAlign(CT_RubyAlign value);
    public CT_HpsMeasure get_hps();
    public void set_hps(CT_HpsMeasure value);
    public CT_HpsMeasure get_hpsRaise();
    public void set_hpsRaise(CT_HpsMeasure value);
    public CT_HpsMeasure get_hpsBaseText();
    public void set_hpsBaseText(CT_HpsMeasure value);
    public CT_Lang get_lid();
    public void set_lid(CT_Lang value);
    public CT_OnOff get_dirty();
    public void set_dirty(CT_OnOff value);
}
[XmlTypeAttribute]
[XmlRootAttribute]
public class NPOI.OpenXmlFormats.Wordprocessing.CT_RunTrackChange : CT_TrackChange {
    private ArrayList itemsField;
    private List`1<ItemsChoiceType6> itemsElementNameField;
    [XmlElementAttribute("acc", "NPOI.OpenXmlFormats.Shared.CT_Acc")]
[XmlElementAttribute("bar", "NPOI.OpenXmlFormats.Shared.CT_Bar")]
[XmlElementAttribute("borderBox", "NPOI.OpenXmlFormats.Shared.CT_BorderBox")]
[XmlElementAttribute("box", "NPOI.OpenXmlFormats.Shared.CT_Box")]
[XmlElementAttribute("d", "NPOI.OpenXmlFormats.Shared.CT_D")]
[XmlElementAttribute("eqArr", "NPOI.OpenXmlFormats.Shared.CT_EqArr")]
[XmlElementAttribute("f", "NPOI.OpenXmlFormats.Shared.CT_F")]
[XmlElementAttribute("func", "NPOI.OpenXmlFormats.Shared.CT_Func")]
[XmlElementAttribute("groupChr", "NPOI.OpenXmlFormats.Shared.CT_GroupChr")]
[XmlElementAttribute("limLow", "NPOI.OpenXmlFormats.Shared.CT_LimLow")]
[XmlElementAttribute("limUpp", "NPOI.OpenXmlFormats.Shared.CT_LimUpp")]
[XmlElementAttribute("m", "NPOI.OpenXmlFormats.Shared.CT_M")]
[XmlElementAttribute("nary", "NPOI.OpenXmlFormats.Shared.CT_Nary")]
[XmlElementAttribute("oMath", "NPOI.OpenXmlFormats.Shared.CT_OMath")]
[XmlElementAttribute("oMathPara", "NPOI.OpenXmlFormats.Shared.CT_OMathPara")]
[XmlElementAttribute("phant", "NPOI.OpenXmlFormats.Shared.CT_Phant")]
[XmlElementAttribute("r", "NPOI.OpenXmlFormats.Shared.CT_R")]
[XmlElementAttribute("rad", "NPOI.OpenXmlFormats.Shared.CT_Rad")]
[XmlElementAttribute("sPre", "NPOI.OpenXmlFormats.Shared.CT_SPre")]
[XmlElementAttribute("sSub", "NPOI.OpenXmlFormats.Shared.CT_SSub")]
[XmlElementAttribute("sSubSup", "NPOI.OpenXmlFormats.Shared.CT_SSubSup")]
[XmlElementAttribute("sSup", "NPOI.OpenXmlFormats.Shared.CT_SSup")]
[XmlElementAttribute("bookmarkEnd", "NPOI.OpenXmlFormats.Wordprocessing.CT_MarkupRange")]
[XmlElementAttribute("bookmarkStart", "NPOI.OpenXmlFormats.Wordprocessing.CT_Bookmark")]
[XmlElementAttribute("commentRangeEnd", "NPOI.OpenXmlFormats.Wordprocessing.CT_MarkupRange")]
[XmlElementAttribute("commentRangeStart", "NPOI.OpenXmlFormats.Wordprocessing.CT_MarkupRange")]
[XmlElementAttribute("customXml", "NPOI.OpenXmlFormats.Wordprocessing.CT_CustomXmlRun")]
[XmlElementAttribute("customXmlDelRangeEnd", "NPOI.OpenXmlFormats.Wordprocessing.CT_Markup")]
[XmlElementAttribute("customXmlDelRangeStart", "NPOI.OpenXmlFormats.Wordprocessing.CT_TrackChange")]
[XmlElementAttribute("customXmlInsRangeEnd", "NPOI.OpenXmlFormats.Wordprocessing.CT_Markup")]
[XmlElementAttribute("customXmlInsRangeStart", "NPOI.OpenXmlFormats.Wordprocessing.CT_TrackChange")]
[XmlElementAttribute("customXmlMoveFromRangeEnd", "NPOI.OpenXmlFormats.Wordprocessing.CT_Markup")]
[XmlElementAttribute("customXmlMoveFromRangeStart", "NPOI.OpenXmlFormats.Wordprocessing.CT_TrackChange")]
[XmlElementAttribute("customXmlMoveToRangeEnd", "NPOI.OpenXmlFormats.Wordprocessing.CT_Markup")]
[XmlElementAttribute("customXmlMoveToRangeStart", "NPOI.OpenXmlFormats.Wordprocessing.CT_TrackChange")]
[XmlElementAttribute("del", "NPOI.OpenXmlFormats.Wordprocessing.CT_RunTrackChange")]
[XmlElementAttribute("ins", "NPOI.OpenXmlFormats.Wordprocessing.CT_RunTrackChange")]
[XmlElementAttribute("moveFrom", "NPOI.OpenXmlFormats.Wordprocessing.CT_RunTrackChange")]
[XmlElementAttribute("moveFromRangeEnd", "NPOI.OpenXmlFormats.Wordprocessing.CT_MarkupRange")]
[XmlElementAttribute("moveFromRangeStart", "NPOI.OpenXmlFormats.Wordprocessing.CT_MoveBookmark")]
[XmlElementAttribute("moveTo", "NPOI.OpenXmlFormats.Wordprocessing.CT_RunTrackChange")]
[XmlElementAttribute("moveToRangeEnd", "NPOI.OpenXmlFormats.Wordprocessing.CT_MarkupRange")]
[XmlElementAttribute("moveToRangeStart", "NPOI.OpenXmlFormats.Wordprocessing.CT_MoveBookmark")]
[XmlElementAttribute("permEnd", "NPOI.OpenXmlFormats.Wordprocessing.CT_Perm")]
[XmlElementAttribute("permStart", "NPOI.OpenXmlFormats.Wordprocessing.CT_PermStart")]
[XmlElementAttribute("proofErr", "NPOI.OpenXmlFormats.Wordprocessing.CT_ProofErr")]
[XmlElementAttribute("r", "NPOI.OpenXmlFormats.Wordprocessing.CT_R")]
[XmlElementAttribute("sdt", "NPOI.OpenXmlFormats.Wordprocessing.CT_SdtRun")]
[XmlElementAttribute("smartTag", "NPOI.OpenXmlFormats.Wordprocessing.CT_SmartTagRun")]
[XmlChoiceIdentifierAttribute("ItemsElementName")]
public ArrayList Items { get; public set; }
    [XmlElementAttribute("ItemsElementName")]
[XmlIgnoreAttribute]
public List`1<ItemsChoiceType6> ItemsElementName { get; public set; }
    public static CT_RunTrackChange Parse(XmlNode node, XmlNamespaceManager namespaceManager);
    internal void Write(StreamWriter sw, string nodeName);
    public ArrayList get_Items();
    public void set_Items(ArrayList value);
    public List`1<ItemsChoiceType6> get_ItemsElementName();
    public void set_ItemsElementName(List`1<ItemsChoiceType6> value);
    public List`1<CT_RunTrackChange> GetInsList();
    public List`1<CT_R> GetRList();
    private List`1<T> GetObjectList(ItemsChoiceType6 type);
    private int SizeOfArray(ItemsChoiceType6 type);
    private T GetObjectArray(int p, ItemsChoiceType6 type);
    private T InsertNewObject(ItemsChoiceType6 type, int p);
    private T AddNewObject(ItemsChoiceType6 type);
    private void SetObject(ItemsChoiceType6 type, int p, T obj);
    private int GetObjectIndex(ItemsChoiceType6 type, int p);
    private void RemoveObject(ItemsChoiceType6 type, int p);
}
[XmlTypeAttribute]
[XmlRootAttribute]
public class NPOI.OpenXmlFormats.Wordprocessing.CT_SaveThroughXslt : object {
    private string idField;
    private string solutionIDField;
    [XmlAttributeAttribute]
public string id { get; public set; }
    [XmlAttributeAttribute]
public string solutionID { get; public set; }
    public static CT_SaveThroughXslt Parse(XmlNode node, XmlNamespaceManager namespaceManager);
    internal void Write(StreamWriter sw, string nodeName);
    public string get_id();
    public void set_id(string value);
    public string get_solutionID();
    public void set_solutionID(string value);
}
[XmlTypeAttribute]
[XmlRootAttribute]
public class NPOI.OpenXmlFormats.Wordprocessing.CT_SdtBlock : object {
    private CT_SdtPr sdtPrField;
    private List`1<CT_RPr> sdtEndPrField;
    private CT_SdtContentBlock sdtContentField;
    [XmlElementAttribute]
public CT_SdtPr sdtPr { get; public set; }
    [XmlArrayAttribute]
[XmlArrayItemAttribute("rPr")]
public List`1<CT_RPr> sdtEndPr { get; public set; }
    [XmlElementAttribute]
public CT_SdtContentBlock sdtContent { get; public set; }
    public static CT_SdtBlock Parse(XmlNode node, XmlNamespaceManager namespaceManager);
    internal void Write(StreamWriter sw, string nodeName);
    public CT_SdtPr get_sdtPr();
    public void set_sdtPr(CT_SdtPr value);
    public List`1<CT_RPr> get_sdtEndPr();
    public void set_sdtEndPr(List`1<CT_RPr> value);
    public CT_SdtContentBlock get_sdtContent();
    public void set_sdtContent(CT_SdtContentBlock value);
    public CT_SdtPr AddNewSdtPr();
    public CT_SdtEndPr AddNewSdtEndPr();
    public CT_SdtContentBlock AddNewSdtContent();
}
[XmlTypeAttribute]
[XmlRootAttribute]
public class NPOI.OpenXmlFormats.Wordprocessing.CT_SdtCell : object {
    private CT_SdtPr sdtPrField;
    private List`1<CT_RPr> sdtEndPrField;
    private CT_SdtContentCell sdtContentField;
    [XmlElementAttribute]
public CT_SdtPr sdtPr { get; public set; }
    [XmlArrayAttribute]
[XmlArrayItemAttribute("rPr")]
public List`1<CT_RPr> sdtEndPr { get; public set; }
    [XmlElementAttribute]
public CT_SdtContentCell sdtContent { get; public set; }
    public static CT_SdtCell Parse(XmlNode node, XmlNamespaceManager namespaceManager);
    internal void Write(StreamWriter sw, string nodeName);
    public CT_SdtPr get_sdtPr();
    public void set_sdtPr(CT_SdtPr value);
    public List`1<CT_RPr> get_sdtEndPr();
    public void set_sdtEndPr(List`1<CT_RPr> value);
    public CT_SdtContentCell get_sdtContent();
    public void set_sdtContent(CT_SdtContentCell value);
}
[XmlTypeAttribute]
[XmlRootAttribute]
public class NPOI.OpenXmlFormats.Wordprocessing.CT_SdtComboBox : object {
    private List`1<CT_SdtListItem> listItemField;
    private string lastValueField;
    [XmlElementAttribute("listItem")]
public List`1<CT_SdtListItem> listItem { get; public set; }
    [XmlAttributeAttribute]
public string lastValue { get; public set; }
    public static CT_SdtComboBox Parse(XmlNode node, XmlNamespaceManager namespaceManager);
    internal void Write(StreamWriter sw, string nodeName);
    public List`1<CT_SdtListItem> get_listItem();
    public void set_listItem(List`1<CT_SdtListItem> value);
    public string get_lastValue();
    public void set_lastValue(string value);
}
[XmlTypeAttribute]
[XmlRootAttribute]
public class NPOI.OpenXmlFormats.Wordprocessing.CT_SdtContentBlock : object {
    private ArrayList itemsField;
    private List`1<ItemsChoiceType19> itemsElementNameField;
    [XmlElementAttribute("oMath", "NPOI.OpenXmlFormats.Shared.CT_OMath")]
[XmlElementAttribute("oMathPara", "NPOI.OpenXmlFormats.Shared.CT_OMathPara")]
[XmlElementAttribute("bookmarkEnd", "NPOI.OpenXmlFormats.Wordprocessing.CT_MarkupRange")]
[XmlElementAttribute("bookmarkStart", "NPOI.OpenXmlFormats.Wordprocessing.CT_Bookmark")]
[XmlElementAttribute("commentRangeEnd", "NPOI.OpenXmlFormats.Wordprocessing.CT_MarkupRange")]
[XmlElementAttribute("commentRangeStart", "NPOI.OpenXmlFormats.Wordprocessing.CT_MarkupRange")]
[XmlElementAttribute("customXml", "NPOI.OpenXmlFormats.Wordprocessing.CT_CustomXmlBlock")]
[XmlElementAttribute("customXmlDelRangeEnd", "NPOI.OpenXmlFormats.Wordprocessing.CT_Markup")]
[XmlElementAttribute("customXmlDelRangeStart", "NPOI.OpenXmlFormats.Wordprocessing.CT_TrackChange")]
[XmlElementAttribute("customXmlInsRangeEnd", "NPOI.OpenXmlFormats.Wordprocessing.CT_Markup")]
[XmlElementAttribute("customXmlInsRangeStart", "NPOI.OpenXmlFormats.Wordprocessing.CT_TrackChange")]
[XmlElementAttribute("customXmlMoveFromRangeEnd", "NPOI.OpenXmlFormats.Wordprocessing.CT_Markup")]
[XmlElementAttribute("customXmlMoveFromRangeStart", "NPOI.OpenXmlFormats.Wordprocessing.CT_TrackChange")]
[XmlElementAttribute("customXmlMoveToRangeEnd", "NPOI.OpenXmlFormats.Wordprocessing.CT_Markup")]
[XmlElementAttribute("customXmlMoveToRangeStart", "NPOI.OpenXmlFormats.Wordprocessing.CT_TrackChange")]
[XmlElementAttribute("del", "NPOI.OpenXmlFormats.Wordprocessing.CT_RunTrackChange")]
[XmlElementAttribute("ins", "NPOI.OpenXmlFormats.Wordprocessing.CT_RunTrackChange")]
[XmlElementAttribute("moveFrom", "NPOI.OpenXmlFormats.Wordprocessing.CT_RunTrackChange")]
[XmlElementAttribute("moveFromRangeEnd", "NPOI.OpenXmlFormats.Wordprocessing.CT_MarkupRange")]
[XmlElementAttribute("moveFromRangeStart", "NPOI.OpenXmlFormats.Wordprocessing.CT_MoveBookmark")]
[XmlElementAttribute("moveTo", "NPOI.OpenXmlFormats.Wordprocessing.CT_RunTrackChange")]
[XmlElementAttribute("moveToRangeEnd", "NPOI.OpenXmlFormats.Wordprocessing.CT_MarkupRange")]
[XmlElementAttribute("moveToRangeStart", "NPOI.OpenXmlFormats.Wordprocessing.CT_MoveBookmark")]
[XmlElementAttribute("p", "NPOI.OpenXmlFormats.Wordprocessing.CT_P")]
[XmlElementAttribute("permEnd", "NPOI.OpenXmlFormats.Wordprocessing.CT_Perm")]
[XmlElementAttribute("permStart", "NPOI.OpenXmlFormats.Wordprocessing.CT_PermStart")]
[XmlElementAttribute("proofErr", "NPOI.OpenXmlFormats.Wordprocessing.CT_ProofErr")]
[XmlElementAttribute("sdt", "NPOI.OpenXmlFormats.Wordprocessing.CT_SdtBlock")]
[XmlElementAttribute("tbl", "NPOI.OpenXmlFormats.Wordprocessing.CT_Tbl")]
[XmlChoiceIdentifierAttribute("ItemsElementName")]
public ArrayList Items { get; public set; }
    [XmlElementAttribute("ItemsElementName")]
[XmlIgnoreAttribute]
public List`1<ItemsChoiceType19> ItemsElementName { get; public set; }
    public static CT_SdtContentBlock Parse(XmlNode node, XmlNamespaceManager namespaceManager);
    internal void Write(StreamWriter sw, string nodeName);
    public ArrayList get_Items();
    public void set_Items(ArrayList value);
    public List`1<ItemsChoiceType19> get_ItemsElementName();
    public void set_ItemsElementName(List`1<ItemsChoiceType19> value);
    public CT_P AddNewP();
    private List`1<T> GetObjectList(ItemsChoiceType19 type);
    private int SizeOfArray(ItemsChoiceType19 type);
    private T GetObjectArray(int p, ItemsChoiceType19 type);
    private T InsertNewObject(ItemsChoiceType19 type, int p);
    private T AddNewObject(ItemsChoiceType19 type);
    private void SetObject(ItemsChoiceType19 type, int p, T obj);
    private int GetObjectIndex(ItemsChoiceType19 type, int p);
    private void RemoveObject(ItemsChoiceType19 type, int p);
}
[XmlTypeAttribute]
[XmlRootAttribute]
public class NPOI.OpenXmlFormats.Wordprocessing.CT_SdtContentCell : object {
    private ArrayList itemsField;
    private List`1<ItemsChoiceType23> itemsElementNameField;
    [XmlElementAttribute("oMath", "NPOI.OpenXmlFormats.Shared.CT_OMath")]
[XmlElementAttribute("oMathPara", "NPOI.OpenXmlFormats.Shared.CT_OMathPara")]
[XmlElementAttribute("bookmarkEnd", "NPOI.OpenXmlFormats.Wordprocessing.CT_MarkupRange")]
[XmlElementAttribute("bookmarkStart", "NPOI.OpenXmlFormats.Wordprocessing.CT_Bookmark")]
[XmlElementAttribute("commentRangeEnd", "NPOI.OpenXmlFormats.Wordprocessing.CT_MarkupRange")]
[XmlElementAttribute("commentRangeStart", "NPOI.OpenXmlFormats.Wordprocessing.CT_MarkupRange")]
[XmlElementAttribute("customXml", "NPOI.OpenXmlFormats.Wordprocessing.CT_CustomXmlCell")]
[XmlElementAttribute("customXmlDelRangeEnd", "NPOI.OpenXmlFormats.Wordprocessing.CT_Markup")]
[XmlElementAttribute("customXmlDelRangeStart", "NPOI.OpenXmlFormats.Wordprocessing.CT_TrackChange")]
[XmlElementAttribute("customXmlInsRangeEnd", "NPOI.OpenXmlFormats.Wordprocessing.CT_Markup")]
[XmlElementAttribute("customXmlInsRangeStart", "NPOI.OpenXmlFormats.Wordprocessing.CT_TrackChange")]
[XmlElementAttribute("customXmlMoveFromRangeEnd", "NPOI.OpenXmlFormats.Wordprocessing.CT_Markup")]
[XmlElementAttribute("customXmlMoveFromRangeStart", "NPOI.OpenXmlFormats.Wordprocessing.CT_TrackChange")]
[XmlElementAttribute("customXmlMoveToRangeEnd", "NPOI.OpenXmlFormats.Wordprocessing.CT_Markup")]
[XmlElementAttribute("customXmlMoveToRangeStart", "NPOI.OpenXmlFormats.Wordprocessing.CT_TrackChange")]
[XmlElementAttribute("del", "NPOI.OpenXmlFormats.Wordprocessing.CT_RunTrackChange")]
[XmlElementAttribute("ins", "NPOI.OpenXmlFormats.Wordprocessing.CT_RunTrackChange")]
[XmlElementAttribute("moveFrom", "NPOI.OpenXmlFormats.Wordprocessing.CT_RunTrackChange")]
[XmlElementAttribute("moveFromRangeEnd", "NPOI.OpenXmlFormats.Wordprocessing.CT_MarkupRange")]
[XmlElementAttribute("moveFromRangeStart", "NPOI.OpenXmlFormats.Wordprocessing.CT_MoveBookmark")]
[XmlElementAttribute("moveTo", "NPOI.OpenXmlFormats.Wordprocessing.CT_RunTrackChange")]
[XmlElementAttribute("moveToRangeEnd", "NPOI.OpenXmlFormats.Wordprocessing.CT_MarkupRange")]
[XmlElementAttribute("moveToRangeStart", "NPOI.OpenXmlFormats.Wordprocessing.CT_MoveBookmark")]
[XmlElementAttribute("permEnd", "NPOI.OpenXmlFormats.Wordprocessing.CT_Perm")]
[XmlElementAttribute("permStart", "NPOI.OpenXmlFormats.Wordprocessing.CT_PermStart")]
[XmlElementAttribute("proofErr", "NPOI.OpenXmlFormats.Wordprocessing.CT_ProofErr")]
[XmlElementAttribute("sdt", "NPOI.OpenXmlFormats.Wordprocessing.CT_SdtCell")]
[XmlElementAttribute("tc", "NPOI.OpenXmlFormats.Wordprocessing.CT_Tc")]
[XmlChoiceIdentifierAttribute("ItemsElementName")]
public ArrayList Items { get; public set; }
    [XmlElementAttribute("ItemsElementName")]
[XmlIgnoreAttribute]
public List`1<ItemsChoiceType23> ItemsElementName { get; public set; }
    public virtual string ToString();
    public static CT_SdtContentCell Parse(XmlNode node, XmlNamespaceManager namespaceManager);
    internal void Write(StreamWriter sw, string nodeName);
    public ArrayList get_Items();
    public void set_Items(ArrayList value);
    public List`1<ItemsChoiceType23> get_ItemsElementName();
    public void set_ItemsElementName(List`1<ItemsChoiceType23> value);
}
[XmlTypeAttribute]
[XmlRootAttribute]
public class NPOI.OpenXmlFormats.Wordprocessing.CT_SdtContentRow : object {
    private ArrayList itemsField;
    private List`1<ItemsChoiceType22> itemsElementNameField;
    [XmlElementAttribute("oMath", "NPOI.OpenXmlFormats.Shared.CT_OMath")]
[XmlElementAttribute("oMathPara", "NPOI.OpenXmlFormats.Shared.CT_OMathPara")]
[XmlElementAttribute("bookmarkEnd", "NPOI.OpenXmlFormats.Wordprocessing.CT_MarkupRange")]
[XmlElementAttribute("bookmarkStart", "NPOI.OpenXmlFormats.Wordprocessing.CT_Bookmark")]
[XmlElementAttribute("commentRangeEnd", "NPOI.OpenXmlFormats.Wordprocessing.CT_MarkupRange")]
[XmlElementAttribute("commentRangeStart", "NPOI.OpenXmlFormats.Wordprocessing.CT_MarkupRange")]
[XmlElementAttribute("customXml", "NPOI.OpenXmlFormats.Wordprocessing.CT_CustomXmlRow")]
[XmlElementAttribute("customXmlDelRangeEnd", "NPOI.OpenXmlFormats.Wordprocessing.CT_Markup")]
[XmlElementAttribute("customXmlDelRangeStart", "NPOI.OpenXmlFormats.Wordprocessing.CT_TrackChange")]
[XmlElementAttribute("customXmlInsRangeEnd", "NPOI.OpenXmlFormats.Wordprocessing.CT_Markup")]
[XmlElementAttribute("customXmlInsRangeStart", "NPOI.OpenXmlFormats.Wordprocessing.CT_TrackChange")]
[XmlElementAttribute("customXmlMoveFromRangeEnd", "NPOI.OpenXmlFormats.Wordprocessing.CT_Markup")]
[XmlElementAttribute("customXmlMoveFromRangeStart", "NPOI.OpenXmlFormats.Wordprocessing.CT_TrackChange")]
[XmlElementAttribute("customXmlMoveToRangeEnd", "NPOI.OpenXmlFormats.Wordprocessing.CT_Markup")]
[XmlElementAttribute("customXmlMoveToRangeStart", "NPOI.OpenXmlFormats.Wordprocessing.CT_TrackChange")]
[XmlElementAttribute("del", "NPOI.OpenXmlFormats.Wordprocessing.CT_RunTrackChange")]
[XmlElementAttribute("ins", "NPOI.OpenXmlFormats.Wordprocessing.CT_RunTrackChange")]
[XmlElementAttribute("moveFrom", "NPOI.OpenXmlFormats.Wordprocessing.CT_RunTrackChange")]
[XmlElementAttribute("moveFromRangeEnd", "NPOI.OpenXmlFormats.Wordprocessing.CT_MarkupRange")]
[XmlElementAttribute("moveFromRangeStart", "NPOI.OpenXmlFormats.Wordprocessing.CT_MoveBookmark")]
[XmlElementAttribute("moveTo", "NPOI.OpenXmlFormats.Wordprocessing.CT_RunTrackChange")]
[XmlElementAttribute("moveToRangeEnd", "NPOI.OpenXmlFormats.Wordprocessing.CT_MarkupRange")]
[XmlElementAttribute("moveToRangeStart", "NPOI.OpenXmlFormats.Wordprocessing.CT_MoveBookmark")]
[XmlElementAttribute("permEnd", "NPOI.OpenXmlFormats.Wordprocessing.CT_Perm")]
[XmlElementAttribute("permStart", "NPOI.OpenXmlFormats.Wordprocessing.CT_PermStart")]
[XmlElementAttribute("proofErr", "NPOI.OpenXmlFormats.Wordprocessing.CT_ProofErr")]
[XmlElementAttribute("sdt", "NPOI.OpenXmlFormats.Wordprocessing.CT_SdtRow")]
[XmlElementAttribute("tr", "NPOI.OpenXmlFormats.Wordprocessing.CT_Row")]
[XmlChoiceIdentifierAttribute("ItemsElementName")]
public ArrayList Items { get; public set; }
    [XmlElementAttribute("ItemsElementName")]
[XmlIgnoreAttribute]
public List`1<ItemsChoiceType22> ItemsElementName { get; public set; }
    public static CT_SdtContentRow Parse(XmlNode node, XmlNamespaceManager namespaceManager);
    internal void Write(StreamWriter sw, string nodeName);
    public ArrayList get_Items();
    public void set_Items(ArrayList value);
    public List`1<ItemsChoiceType22> get_ItemsElementName();
    public void set_ItemsElementName(List`1<ItemsChoiceType22> value);
}
[XmlTypeAttribute]
[XmlRootAttribute]
public class NPOI.OpenXmlFormats.Wordprocessing.CT_SdtContentRun : object {
    private ArrayList itemsField;
    private List`1<ItemsChoiceType18> itemsElementNameField;
    [XmlElementAttribute("oMath", "NPOI.OpenXmlFormats.Shared.CT_OMath")]
[XmlElementAttribute("oMathPara", "NPOI.OpenXmlFormats.Shared.CT_OMathPara")]
[XmlElementAttribute("bookmarkEnd", "NPOI.OpenXmlFormats.Wordprocessing.CT_MarkupRange")]
[XmlElementAttribute("bookmarkStart", "NPOI.OpenXmlFormats.Wordprocessing.CT_Bookmark")]
[XmlElementAttribute("commentRangeEnd", "NPOI.OpenXmlFormats.Wordprocessing.CT_MarkupRange")]
[XmlElementAttribute("commentRangeStart", "NPOI.OpenXmlFormats.Wordprocessing.CT_MarkupRange")]
[XmlElementAttribute("customXml", "NPOI.OpenXmlFormats.Wordprocessing.CT_CustomXmlRun")]
[XmlElementAttribute("customXmlDelRangeEnd", "NPOI.OpenXmlFormats.Wordprocessing.CT_Markup")]
[XmlElementAttribute("customXmlDelRangeStart", "NPOI.OpenXmlFormats.Wordprocessing.CT_TrackChange")]
[XmlElementAttribute("customXmlInsRangeEnd", "NPOI.OpenXmlFormats.Wordprocessing.CT_Markup")]
[XmlElementAttribute("customXmlInsRangeStart", "NPOI.OpenXmlFormats.Wordprocessing.CT_TrackChange")]
[XmlElementAttribute("customXmlMoveFromRangeEnd", "NPOI.OpenXmlFormats.Wordprocessing.CT_Markup")]
[XmlElementAttribute("customXmlMoveFromRangeStart", "NPOI.OpenXmlFormats.Wordprocessing.CT_TrackChange")]
[XmlElementAttribute("customXmlMoveToRangeEnd", "NPOI.OpenXmlFormats.Wordprocessing.CT_Markup")]
[XmlElementAttribute("customXmlMoveToRangeStart", "NPOI.OpenXmlFormats.Wordprocessing.CT_TrackChange")]
[XmlElementAttribute("del", "NPOI.OpenXmlFormats.Wordprocessing.CT_RunTrackChange")]
[XmlElementAttribute("fldSimple", "NPOI.OpenXmlFormats.Wordprocessing.CT_SimpleField")]
[XmlElementAttribute("hyperlink", "NPOI.OpenXmlFormats.Wordprocessing.CT_Hyperlink1")]
[XmlElementAttribute("ins", "NPOI.OpenXmlFormats.Wordprocessing.CT_RunTrackChange")]
[XmlElementAttribute("moveFrom", "NPOI.OpenXmlFormats.Wordprocessing.CT_RunTrackChange")]
[XmlElementAttribute("moveFromRangeEnd", "NPOI.OpenXmlFormats.Wordprocessing.CT_MarkupRange")]
[XmlElementAttribute("moveFromRangeStart", "NPOI.OpenXmlFormats.Wordprocessing.CT_MoveBookmark")]
[XmlElementAttribute("moveTo", "NPOI.OpenXmlFormats.Wordprocessing.CT_RunTrackChange")]
[XmlElementAttribute("moveToRangeEnd", "NPOI.OpenXmlFormats.Wordprocessing.CT_MarkupRange")]
[XmlElementAttribute("moveToRangeStart", "NPOI.OpenXmlFormats.Wordprocessing.CT_MoveBookmark")]
[XmlElementAttribute("permEnd", "NPOI.OpenXmlFormats.Wordprocessing.CT_Perm")]
[XmlElementAttribute("permStart", "NPOI.OpenXmlFormats.Wordprocessing.CT_PermStart")]
[XmlElementAttribute("proofErr", "NPOI.OpenXmlFormats.Wordprocessing.CT_ProofErr")]
[XmlElementAttribute("r", "NPOI.OpenXmlFormats.Wordprocessing.CT_R")]
[XmlElementAttribute("sdt", "NPOI.OpenXmlFormats.Wordprocessing.CT_SdtRun")]
[XmlElementAttribute("smartTag", "NPOI.OpenXmlFormats.Wordprocessing.CT_SmartTagRun")]
[XmlElementAttribute("subDoc", "NPOI.OpenXmlFormats.Wordprocessing.CT_Rel")]
[XmlChoiceIdentifierAttribute("ItemsElementName")]
public ArrayList Items { get; public set; }
    [XmlElementAttribute("ItemsElementName")]
[XmlIgnoreAttribute]
public List`1<ItemsChoiceType18> ItemsElementName { get; public set; }
    public static CT_SdtContentRun Parse(XmlNode node, XmlNamespaceManager namespaceManager);
    internal void Write(StreamWriter sw, string nodeName);
    public ArrayList get_Items();
    public void set_Items(ArrayList value);
    public List`1<ItemsChoiceType18> get_ItemsElementName();
    public void set_ItemsElementName(List`1<ItemsChoiceType18> value);
    public IEnumerable`1<CT_R> GetRList();
    private List`1<T> GetObjectList(ItemsChoiceType18 type);
    private int SizeOfArray(ItemsChoiceType18 type);
    private T GetObjectArray(int p, ItemsChoiceType18 type);
    private T InsertNewObject(ItemsChoiceType18 type, int p);
    private T AddNewObject(ItemsChoiceType18 type);
    private void SetObject(ItemsChoiceType18 type, int p, T obj);
    private int GetObjectIndex(ItemsChoiceType18 type, int p);
    private void RemoveObject(ItemsChoiceType18 type, int p);
}
[XmlTypeAttribute]
[XmlRootAttribute]
public class NPOI.OpenXmlFormats.Wordprocessing.CT_SdtDate : object {
    private CT_String dateFormatField;
    private CT_Lang lidField;
    private CT_SdtDateMappingType storeMappedDataAsField;
    private CT_CalendarType calendarField;
    private string fullDateField;
    private bool fullDateFieldSpecified;
    [XmlElementAttribute]
public CT_String dateFormat { get; public set; }
    [XmlElementAttribute]
public CT_Lang lid { get; public set; }
    [XmlElementAttribute]
public CT_SdtDateMappingType storeMappedDataAs { get; public set; }
    [XmlElementAttribute]
public CT_CalendarType calendar { get; public set; }
    [XmlAttributeAttribute]
public string fullDate { get; public set; }
    [XmlIgnoreAttribute]
public bool fullDateSpecified { get; public set; }
    public static CT_SdtDate Parse(XmlNode node, XmlNamespaceManager namespaceManager);
    internal void Write(StreamWriter sw, string nodeName);
    public CT_String get_dateFormat();
    public void set_dateFormat(CT_String value);
    public CT_Lang get_lid();
    public void set_lid(CT_Lang value);
    public CT_SdtDateMappingType get_storeMappedDataAs();
    public void set_storeMappedDataAs(CT_SdtDateMappingType value);
    public CT_CalendarType get_calendar();
    public void set_calendar(CT_CalendarType value);
    public string get_fullDate();
    public void set_fullDate(string value);
    public bool get_fullDateSpecified();
    public void set_fullDateSpecified(bool value);
}
[XmlTypeAttribute]
[XmlRootAttribute]
public class NPOI.OpenXmlFormats.Wordprocessing.CT_SdtDateMappingType : object {
    private ST_SdtDateMappingType valField;
    private bool valFieldSpecified;
    [XmlAttributeAttribute]
public ST_SdtDateMappingType val { get; public set; }
    [XmlIgnoreAttribute]
public bool valSpecified { get; public set; }
    public static CT_SdtDateMappingType Parse(XmlNode node, XmlNamespaceManager namespaceManager);
    internal void Write(StreamWriter sw, string nodeName);
    public ST_SdtDateMappingType get_val();
    public void set_val(ST_SdtDateMappingType value);
    public bool get_valSpecified();
    public void set_valSpecified(bool value);
}
[XmlTypeAttribute]
[XmlRootAttribute]
public class NPOI.OpenXmlFormats.Wordprocessing.CT_SdtDocPart : object {
    private CT_String docPartGalleryField;
    private CT_String docPartCategoryField;
    private CT_OnOff docPartUniqueField;
    [XmlElementAttribute]
public CT_String docPartGallery { get; public set; }
    [XmlElementAttribute]
public CT_String docPartCategory { get; public set; }
    [XmlElementAttribute]
public CT_OnOff docPartUnique { get; public set; }
    public static CT_SdtDocPart Parse(XmlNode node, XmlNamespaceManager namespaceManager);
    internal void Write(StreamWriter sw, string nodeName);
    public CT_String get_docPartGallery();
    public void set_docPartGallery(CT_String value);
    public CT_String get_docPartCategory();
    public void set_docPartCategory(CT_String value);
    public CT_OnOff get_docPartUnique();
    public void set_docPartUnique(CT_OnOff value);
    public CT_String AddNewDocPartGallery();
}
[XmlTypeAttribute]
[XmlRootAttribute]
public class NPOI.OpenXmlFormats.Wordprocessing.CT_SdtDropDownList : object {
    private List`1<CT_SdtListItem> listItemField;
    private string lastValueField;
    [XmlElementAttribute("listItem")]
public List`1<CT_SdtListItem> listItem { get; public set; }
    [XmlAttributeAttribute]
public string lastValue { get; public set; }
    public static CT_SdtDropDownList Parse(XmlNode node, XmlNamespaceManager namespaceManager);
    internal void Write(StreamWriter sw, string nodeName);
    public List`1<CT_SdtListItem> get_listItem();
    public void set_listItem(List`1<CT_SdtListItem> value);
    public string get_lastValue();
    public void set_lastValue(string value);
}
[XmlTypeAttribute]
[XmlRootAttribute]
public class NPOI.OpenXmlFormats.Wordprocessing.CT_SdtEndPr : object {
    private List`1<CT_RPr> itemsField;
    [XmlElementAttribute("rPr")]
public List`1<CT_RPr> Items { get; public set; }
    public List`1<CT_RPr> get_Items();
    public void set_Items(List`1<CT_RPr> value);
    public CT_RPr AddNewRPr();
}
[XmlTypeAttribute]
[XmlRootAttribute]
public class NPOI.OpenXmlFormats.Wordprocessing.CT_SdtListItem : object {
    private string displayTextField;
    private string valueField;
    [XmlAttributeAttribute]
public string displayText { get; public set; }
    [XmlAttributeAttribute]
public string value { get; public set; }
    public static CT_SdtListItem Parse(XmlNode node, XmlNamespaceManager namespaceManager);
    internal void Write(StreamWriter sw, string nodeName);
    public string get_displayText();
    public void set_displayText(string value);
    public string get_value();
    public void set_value(string value);
}
[XmlTypeAttribute]
[XmlRootAttribute]
public class NPOI.OpenXmlFormats.Wordprocessing.CT_SdtPr : object {
    private ArrayList itemsField;
    private List`1<SdtPrElementType> itemsElementNameField;
    [XmlElementAttribute("alias", "NPOI.OpenXmlFormats.Wordprocessing.CT_String")]
[XmlElementAttribute("bibliography", "NPOI.OpenXmlFormats.Wordprocessing.CT_Empty")]
[XmlElementAttribute("citation", "NPOI.OpenXmlFormats.Wordprocessing.CT_Empty")]
[XmlElementAttribute("comboBox", "NPOI.OpenXmlFormats.Wordprocessing.CT_SdtComboBox")]
[XmlElementAttribute("dataBinding", "NPOI.OpenXmlFormats.Wordprocessing.CT_DataBinding")]
[XmlElementAttribute("date", "NPOI.OpenXmlFormats.Wordprocessing.CT_SdtDate")]
[XmlElementAttribute("docPartList", "NPOI.OpenXmlFormats.Wordprocessing.CT_SdtDocPart")]
[XmlElementAttribute("docPartObj", "NPOI.OpenXmlFormats.Wordprocessing.CT_SdtDocPart")]
[XmlElementAttribute("dropDownList", "NPOI.OpenXmlFormats.Wordprocessing.CT_SdtDropDownList")]
[XmlElementAttribute("equation", "NPOI.OpenXmlFormats.Wordprocessing.CT_Empty")]
[XmlElementAttribute("group", "NPOI.OpenXmlFormats.Wordprocessing.CT_Empty")]
[XmlElementAttribute("id", "NPOI.OpenXmlFormats.Wordprocessing.CT_DecimalNumber")]
[XmlElementAttribute("lock", "NPOI.OpenXmlFormats.Wordprocessing.CT_Lock")]
[XmlElementAttribute("picture", "NPOI.OpenXmlFormats.Wordprocessing.CT_Empty")]
[XmlElementAttribute("placeholder", "NPOI.OpenXmlFormats.Wordprocessing.CT_Placeholder")]
[XmlElementAttribute("rPr", "NPOI.OpenXmlFormats.Wordprocessing.CT_RPr")]
[XmlElementAttribute("richText", "NPOI.OpenXmlFormats.Wordprocessing.CT_Empty")]
[XmlElementAttribute("showingPlcHdr", "NPOI.OpenXmlFormats.Wordprocessing.CT_OnOff")]
[XmlElementAttribute("tag", "NPOI.OpenXmlFormats.Wordprocessing.CT_String")]
[XmlElementAttribute("temporary", "NPOI.OpenXmlFormats.Wordprocessing.CT_OnOff")]
[XmlElementAttribute("text", "NPOI.OpenXmlFormats.Wordprocessing.CT_SdtText")]
[XmlChoiceIdentifierAttribute("ItemsElementName")]
public ArrayList Items { get; public set; }
    [XmlElementAttribute("ItemsElementName")]
[XmlIgnoreAttribute]
public List`1<SdtPrElementType> ItemsElementName { get; public set; }
    public ArrayList get_Items();
    public void set_Items(ArrayList value);
    public List`1<SdtPrElementType> get_ItemsElementName();
    public void set_ItemsElementName(List`1<SdtPrElementType> value);
    public static CT_SdtPr Parse(XmlNode node, XmlNamespaceManager namespaceManager);
    internal void Write(StreamWriter sw, string nodeName);
    public CT_DecimalNumber AddNewId();
    public CT_SdtDocPart AddNewDocPartObj();
    public CT_String[] GetAliasArray();
    public List`1<T> GetObjectList(SdtPrElementType type);
    private int SizeOfArray(SdtPrElementType type);
    private T GetObjectArray(int p, SdtPrElementType type);
    private T InsertNewObject(SdtPrElementType type, int p);
    private T AddNewObject(SdtPrElementType type);
    private void SetObject(SdtPrElementType type, int p, T obj);
    private int GetObjectIndex(SdtPrElementType type, int p);
    private void RemoveObject(SdtPrElementType type, int p);
}
[XmlTypeAttribute]
[XmlRootAttribute]
public class NPOI.OpenXmlFormats.Wordprocessing.CT_SdtRow : object {
    private CT_SdtPr sdtPrField;
    private List`1<CT_RPr> sdtEndPrField;
    private CT_SdtContentRow sdtContentField;
    [XmlElementAttribute]
public CT_SdtPr sdtPr { get; public set; }
    [XmlArrayAttribute]
[XmlArrayItemAttribute("rPr")]
public List`1<CT_RPr> sdtEndPr { get; public set; }
    [XmlElementAttribute]
public CT_SdtContentRow sdtContent { get; public set; }
    public static CT_SdtRow Parse(XmlNode node, XmlNamespaceManager namespaceManager);
    internal void Write(StreamWriter sw, string nodeName);
    public CT_SdtPr get_sdtPr();
    public void set_sdtPr(CT_SdtPr value);
    public List`1<CT_RPr> get_sdtEndPr();
    public void set_sdtEndPr(List`1<CT_RPr> value);
    public CT_SdtContentRow get_sdtContent();
    public void set_sdtContent(CT_SdtContentRow value);
}
[XmlTypeAttribute]
[XmlRootAttribute]
public class NPOI.OpenXmlFormats.Wordprocessing.CT_SdtRun : object {
    private CT_SdtPr sdtPrField;
    private List`1<CT_RPr> sdtEndPrField;
    private CT_SdtContentRun sdtContentField;
    [XmlElementAttribute]
public CT_SdtPr sdtPr { get; public set; }
    [XmlArrayAttribute]
[XmlArrayItemAttribute("rPr")]
public List`1<CT_RPr> sdtEndPr { get; public set; }
    [XmlElementAttribute]
public CT_SdtContentRun sdtContent { get; public set; }
    public static CT_SdtRun Parse(XmlNode node, XmlNamespaceManager namespaceManager);
    internal void Write(StreamWriter sw, string nodeName);
    public CT_SdtPr get_sdtPr();
    public void set_sdtPr(CT_SdtPr value);
    public List`1<CT_RPr> get_sdtEndPr();
    public void set_sdtEndPr(List`1<CT_RPr> value);
    public CT_SdtContentRun get_sdtContent();
    public void set_sdtContent(CT_SdtContentRun value);
}
[XmlTypeAttribute]
[XmlRootAttribute]
public class NPOI.OpenXmlFormats.Wordprocessing.CT_SdtText : object {
    private ST_OnOff multiLineField;
    private bool multiLineFieldSpecified;
    [XmlAttributeAttribute]
public ST_OnOff multiLine { get; public set; }
    [XmlIgnoreAttribute]
public bool multiLineSpecified { get; public set; }
    public static CT_SdtText Parse(XmlNode node, XmlNamespaceManager namespaceManager);
    internal void Write(StreamWriter sw, string nodeName);
    public ST_OnOff get_multiLine();
    public void set_multiLine(ST_OnOff value);
    public bool get_multiLineSpecified();
    public void set_multiLineSpecified(bool value);
}
[XmlTypeAttribute]
[XmlRootAttribute]
public class NPOI.OpenXmlFormats.Wordprocessing.CT_SectPr : object {
    private CT_FtnProps footnotePrField;
    private CT_EdnProps endnotePrField;
    private CT_SectType typeField;
    private CT_PageSz pgSzField;
    private CT_PageMar pgMarField;
    private CT_PaperSource paperSrcField;
    private CT_PageBorders pgBordersField;
    private CT_LineNumber lnNumTypeField;
    private CT_PageNumber pgNumTypeField;
    private CT_Columns colsField;
    private CT_OnOff formProtField;
    private CT_VerticalJc vAlignField;
    private CT_OnOff noEndnoteField;
    private CT_OnOff titlePgField;
    private CT_TextDirection textDirectionField;
    private CT_OnOff bidiField;
    private CT_OnOff rtlGutterField;
    private CT_DocGrid docGridField;
    private CT_Rel printerSettingsField;
    private CT_SectPrChange sectPrChangeField;
    private Byte[] rsidRPrField;
    private Byte[] rsidDelField;
    private Byte[] rsidRField;
    private Byte[] rsidSectField;
    private List`1<CT_HdrFtrRef> footerReferenceField;
    private List`1<CT_HdrFtrRef> headerReferenceField;
    public List`1<CT_HdrFtrRef> footerReference { get; public set; }
    public List`1<CT_HdrFtrRef> headerReference { get; public set; }
    [XmlElementAttribute]
public CT_FtnProps footnotePr { get; public set; }
    [XmlElementAttribute]
public CT_EdnProps endnotePr { get; public set; }
    [XmlElementAttribute]
public CT_SectType type { get; public set; }
    [XmlElementAttribute]
public CT_PageSz pgSz { get; public set; }
    [XmlElementAttribute]
public CT_PageMar pgMar { get; public set; }
    [XmlElementAttribute]
public CT_PaperSource paperSrc { get; public set; }
    [XmlElementAttribute]
public CT_PageBorders pgBorders { get; public set; }
    [XmlElementAttribute]
public CT_LineNumber lnNumType { get; public set; }
    [XmlElementAttribute]
public CT_PageNumber pgNumType { get; public set; }
    [XmlElementAttribute]
public CT_Columns cols { get; public set; }
    [XmlElementAttribute]
public CT_OnOff formProt { get; public set; }
    [XmlElementAttribute]
public CT_VerticalJc vAlign { get; public set; }
    [XmlElementAttribute]
public CT_OnOff noEndnote { get; public set; }
    [XmlElementAttribute]
public CT_OnOff titlePg { get; public set; }
    [XmlElementAttribute]
public CT_TextDirection textDirection { get; public set; }
    [XmlElementAttribute]
public CT_OnOff bidi { get; public set; }
    [XmlElementAttribute]
public CT_OnOff rtlGutter { get; public set; }
    [XmlElementAttribute]
public CT_DocGrid docGrid { get; public set; }
    [XmlElementAttribute]
public CT_Rel printerSettings { get; public set; }
    [XmlElementAttribute]
public CT_SectPrChange sectPrChange { get; public set; }
    [XmlAttributeAttribute]
public Byte[] rsidRPr { get; public set; }
    [XmlAttributeAttribute]
public Byte[] rsidDel { get; public set; }
    [XmlAttributeAttribute]
public Byte[] rsidR { get; public set; }
    [XmlAttributeAttribute]
public Byte[] rsidSect { get; public set; }
    public List`1<CT_HdrFtrRef> get_footerReference();
    public void set_footerReference(List`1<CT_HdrFtrRef> value);
    public List`1<CT_HdrFtrRef> get_headerReference();
    public void set_headerReference(List`1<CT_HdrFtrRef> value);
    public CT_FtnProps get_footnotePr();
    public void set_footnotePr(CT_FtnProps value);
    public CT_EdnProps get_endnotePr();
    public void set_endnotePr(CT_EdnProps value);
    public CT_SectType get_type();
    public void set_type(CT_SectType value);
    public CT_PageSz get_pgSz();
    public void set_pgSz(CT_PageSz value);
    public CT_PageMar get_pgMar();
    public void set_pgMar(CT_PageMar value);
    public CT_PaperSource get_paperSrc();
    public void set_paperSrc(CT_PaperSource value);
    public CT_PageBorders get_pgBorders();
    public void set_pgBorders(CT_PageBorders value);
    public CT_LineNumber get_lnNumType();
    public void set_lnNumType(CT_LineNumber value);
    public CT_PageNumber get_pgNumType();
    public void set_pgNumType(CT_PageNumber value);
    public CT_Columns get_cols();
    public void set_cols(CT_Columns value);
    public CT_OnOff get_formProt();
    public void set_formProt(CT_OnOff value);
    public CT_VerticalJc get_vAlign();
    public void set_vAlign(CT_VerticalJc value);
    public CT_OnOff get_noEndnote();
    public void set_noEndnote(CT_OnOff value);
    public CT_OnOff get_titlePg();
    public void set_titlePg(CT_OnOff value);
    public CT_TextDirection get_textDirection();
    public void set_textDirection(CT_TextDirection value);
    public CT_OnOff get_bidi();
    public void set_bidi(CT_OnOff value);
    public CT_OnOff get_rtlGutter();
    public void set_rtlGutter(CT_OnOff value);
    public CT_DocGrid get_docGrid();
    public void set_docGrid(CT_DocGrid value);
    public CT_Rel get_printerSettings();
    public void set_printerSettings(CT_Rel value);
    public CT_SectPrChange get_sectPrChange();
    public void set_sectPrChange(CT_SectPrChange value);
    public Byte[] get_rsidRPr();
    public void set_rsidRPr(Byte[] value);
    public Byte[] get_rsidDel();
    public void set_rsidDel(Byte[] value);
    public Byte[] get_rsidR();
    public void set_rsidR(Byte[] value);
    public Byte[] get_rsidSect();
    public void set_rsidSect(Byte[] value);
    public bool IsSetTitlePg();
    public CT_OnOff AddNewTitlePg();
    public CT_PageMar AddPageMar();
    public CT_HdrFtrRef AddNewHeaderReference();
    public CT_HdrFtrRef AddNewFooterReference();
    public int SizeOfHeaderReferenceArray();
    public CT_HdrFtrRef GetHeaderReferenceArray(int i);
    public int SizeOfFooterReferenceArray();
    public CT_HdrFtrRef GetFooterReferenceArray(int i);
    public static CT_SectPr Parse(XmlNode node, XmlNamespaceManager namespaceManager);
    internal void Write(StreamWriter sw, string nodeName);
}
[XmlTypeAttribute]
[XmlRootAttribute]
public class NPOI.OpenXmlFormats.Wordprocessing.CT_SectPrBase : object {
    private CT_FtnProps footnotePrField;
    private CT_EdnProps endnotePrField;
    private CT_SectType typeField;
    private CT_PageSz pgSzField;
    private CT_PageMar pgMarField;
    private CT_PaperSource paperSrcField;
    private CT_PageBorders pgBordersField;
    private CT_LineNumber lnNumTypeField;
    private CT_PageNumber pgNumTypeField;
    private CT_Columns colsField;
    private CT_OnOff formProtField;
    private CT_VerticalJc vAlignField;
    private CT_OnOff noEndnoteField;
    private CT_OnOff titlePgField;
    private CT_TextDirection textDirectionField;
    private CT_OnOff bidiField;
    private CT_OnOff rtlGutterField;
    private CT_DocGrid docGridField;
    private CT_Rel printerSettingsField;
    private Byte[] rsidRPrField;
    private Byte[] rsidDelField;
    private Byte[] rsidRField;
    private Byte[] rsidSectField;
    [XmlElementAttribute]
public CT_FtnProps footnotePr { get; public set; }
    [XmlElementAttribute]
public CT_EdnProps endnotePr { get; public set; }
    [XmlElementAttribute]
public CT_SectType type { get; public set; }
    [XmlElementAttribute]
public CT_PageSz pgSz { get; public set; }
    [XmlElementAttribute]
public CT_PageMar pgMar { get; public set; }
    [XmlElementAttribute]
public CT_PaperSource paperSrc { get; public set; }
    [XmlElementAttribute]
public CT_PageBorders pgBorders { get; public set; }
    [XmlElementAttribute]
public CT_LineNumber lnNumType { get; public set; }
    [XmlElementAttribute]
public CT_PageNumber pgNumType { get; public set; }
    [XmlElementAttribute]
public CT_Columns cols { get; public set; }
    [XmlElementAttribute]
public CT_OnOff formProt { get; public set; }
    [XmlElementAttribute]
public CT_VerticalJc vAlign { get; public set; }
    [XmlElementAttribute]
public CT_OnOff noEndnote { get; public set; }
    [XmlElementAttribute]
public CT_OnOff titlePg { get; public set; }
    [XmlElementAttribute]
public CT_TextDirection textDirection { get; public set; }
    [XmlElementAttribute]
public CT_OnOff bidi { get; public set; }
    [XmlElementAttribute]
public CT_OnOff rtlGutter { get; public set; }
    [XmlElementAttribute]
public CT_DocGrid docGrid { get; public set; }
    [XmlElementAttribute]
public CT_Rel printerSettings { get; public set; }
    [XmlAttributeAttribute]
public Byte[] rsidRPr { get; public set; }
    [XmlAttributeAttribute]
public Byte[] rsidDel { get; public set; }
    [XmlAttributeAttribute]
public Byte[] rsidR { get; public set; }
    [XmlAttributeAttribute]
public Byte[] rsidSect { get; public set; }
    public static CT_SectPrBase Parse(XmlNode node, XmlNamespaceManager namespaceManager);
    internal void Write(StreamWriter sw, string nodeName);
    public CT_FtnProps get_footnotePr();
    public void set_footnotePr(CT_FtnProps value);
    public CT_EdnProps get_endnotePr();
    public void set_endnotePr(CT_EdnProps value);
    public CT_SectType get_type();
    public void set_type(CT_SectType value);
    public CT_PageSz get_pgSz();
    public void set_pgSz(CT_PageSz value);
    public CT_PageMar get_pgMar();
    public void set_pgMar(CT_PageMar value);
    public CT_PaperSource get_paperSrc();
    public void set_paperSrc(CT_PaperSource value);
    public CT_PageBorders get_pgBorders();
    public void set_pgBorders(CT_PageBorders value);
    public CT_LineNumber get_lnNumType();
    public void set_lnNumType(CT_LineNumber value);
    public CT_PageNumber get_pgNumType();
    public void set_pgNumType(CT_PageNumber value);
    public CT_Columns get_cols();
    public void set_cols(CT_Columns value);
    public CT_OnOff get_formProt();
    public void set_formProt(CT_OnOff value);
    public CT_VerticalJc get_vAlign();
    public void set_vAlign(CT_VerticalJc value);
    public CT_OnOff get_noEndnote();
    public void set_noEndnote(CT_OnOff value);
    public CT_OnOff get_titlePg();
    public void set_titlePg(CT_OnOff value);
    public CT_TextDirection get_textDirection();
    public void set_textDirection(CT_TextDirection value);
    public CT_OnOff get_bidi();
    public void set_bidi(CT_OnOff value);
    public CT_OnOff get_rtlGutter();
    public void set_rtlGutter(CT_OnOff value);
    public CT_DocGrid get_docGrid();
    public void set_docGrid(CT_DocGrid value);
    public CT_Rel get_printerSettings();
    public void set_printerSettings(CT_Rel value);
    public Byte[] get_rsidRPr();
    public void set_rsidRPr(Byte[] value);
    public Byte[] get_rsidDel();
    public void set_rsidDel(Byte[] value);
    public Byte[] get_rsidR();
    public void set_rsidR(Byte[] value);
    public Byte[] get_rsidSect();
    public void set_rsidSect(Byte[] value);
}
[XmlTypeAttribute]
[XmlRootAttribute]
public class NPOI.OpenXmlFormats.Wordprocessing.CT_SectPrChange : CT_TrackChange {
    private CT_SectPrBase sectPrField;
    [XmlElementAttribute]
public CT_SectPrBase sectPr { get; public set; }
    public static CT_SectPrChange Parse(XmlNode node, XmlNamespaceManager namespaceManager);
    internal void Write(StreamWriter sw, string nodeName);
    public CT_SectPrBase get_sectPr();
    public void set_sectPr(CT_SectPrBase value);
}
[XmlTypeAttribute]
[XmlRootAttribute]
public class NPOI.OpenXmlFormats.Wordprocessing.CT_SectType : object {
    private ST_SectionMark valField;
    private bool valFieldSpecified;
    [XmlAttributeAttribute]
public ST_SectionMark val { get; public set; }
    [XmlIgnoreAttribute]
public bool valSpecified { get; public set; }
    public static CT_SectType Parse(XmlNode node, XmlNamespaceManager namespaceManager);
    internal void Write(StreamWriter sw, string nodeName);
    public ST_SectionMark get_val();
    public void set_val(ST_SectionMark value);
    public bool get_valSpecified();
    public void set_valSpecified(bool value);
}
[XmlTypeAttribute]
[XmlRootAttribute("settings")]
public class NPOI.OpenXmlFormats.Wordprocessing.CT_Settings : object {
    private CT_WriteProtection writeProtectionField;
    private CT_View viewField;
    private CT_Zoom zoomField;
    private CT_OnOff removePersonalInformationField;
    private CT_OnOff removeDateAndTimeField;
    private CT_OnOff doNotDisplayPageBoundariesField;
    private CT_OnOff displayBackgroundShapeField;
    private CT_OnOff printPostScriptOverTextField;
    private CT_OnOff printFractionalCharacterWidthField;
    private CT_OnOff printFormsDataField;
    private CT_OnOff embedTrueTypeFontsField;
    private CT_OnOff embedSystemFontsField;
    private CT_OnOff saveSubsetFontsField;
    private CT_OnOff saveFormsDataField;
    private CT_OnOff mirrorMarginsField;
    private CT_OnOff alignBordersAndEdgesField;
    private CT_OnOff bordersDoNotSurroundHeaderField;
    private CT_OnOff bordersDoNotSurroundFooterField;
    private CT_OnOff gutterAtTopField;
    private CT_OnOff hideSpellingErrorsField;
    private CT_OnOff hideGrammaticalErrorsField;
    private List`1<CT_WritingStyle> activeWritingStyleField;
    private CT_Proof proofStateField;
    private CT_OnOff formsDesignField;
    private CT_Rel attachedTemplateField;
    private CT_OnOff linkStylesField;
    private CT_ShortHexNumber stylePaneFormatFilterField;
    private CT_ShortHexNumber stylePaneSortMethodField;
    private CT_DocType documentTypeField;
    private CT_MailMerge mailMergeField;
    private CT_TrackChangesView revisionViewField;
    private CT_OnOff trackRevisionsField;
    private CT_OnOff doNotTrackMovesField;
    private CT_OnOff doNotTrackFormattingField;
    private CT_DocProtect documentProtectionField;
    private CT_OnOff autoFormatOverrideField;
    private CT_OnOff styleLockThemeField;
    private CT_OnOff styleLockQFSetField;
    private CT_TwipsMeasure defaultTabStopField;
    private CT_OnOff autoHyphenationField;
    private CT_DecimalNumber consecutiveHyphenLimitField;
    private CT_TwipsMeasure hyphenationZoneField;
    private CT_OnOff doNotHyphenateCapsField;
    private CT_OnOff showEnvelopeField;
    private CT_DecimalNumber summaryLengthField;
    private CT_String clickAndTypeStyleField;
    private CT_String defaultTableStyleField;
    private CT_OnOff evenAndOddHeadersField;
    private CT_OnOff bookFoldRevPrintingField;
    private CT_OnOff bookFoldPrintingField;
    private CT_DecimalNumber bookFoldPrintingSheetsField;
    private CT_TwipsMeasure drawingGridHorizontalSpacingField;
    private CT_TwipsMeasure drawingGridVerticalSpacingField;
    private CT_DecimalNumber displayHorizontalDrawingGridEveryField;
    private CT_DecimalNumber displayVerticalDrawingGridEveryField;
    private CT_OnOff doNotUseMarginsForDrawingGridOriginField;
    private CT_TwipsMeasure drawingGridHorizontalOriginField;
    private CT_TwipsMeasure drawingGridVerticalOriginField;
    private CT_OnOff doNotShadeFormDataField;
    private CT_OnOff noPunctuationKerningField;
    private CT_CharacterSpacing characterSpacingControlField;
    private CT_OnOff printTwoOnOneField;
    private CT_OnOff strictFirstAndLastCharsField;
    private CT_Kinsoku noLineBreaksAfterField;
    private CT_Kinsoku noLineBreaksBeforeField;
    private CT_OnOff savePreviewPictureField;
    private CT_OnOff doNotValidateAgainstSchemaField;
    private CT_OnOff saveInvalidXmlField;
    private CT_OnOff ignoreMixedContentField;
    private CT_OnOff alwaysShowPlaceholderTextField;
    private CT_OnOff doNotDemarcateInvalidXmlField;
    private CT_OnOff saveXmlDataOnlyField;
    private CT_OnOff useXSLTWhenSavingField;
    private CT_SaveThroughXslt saveThroughXsltField;
    private CT_OnOff showXMLTagsField;
    private CT_OnOff alwaysMergeEmptyNamespaceField;
    private CT_OnOff updateFieldsField;
    private XmlElement[] hdrShapeDefaultsField;
    private CT_FtnDocProps footnotePrField;
    private CT_EdnDocProps endnotePrField;
    private CT_Compat compatField;
    private CT_DocVars docVarsField;
    private CT_DocRsids rsidsField;
    private CT_MathPr mathPrField;
    private CT_OnOff uiCompat97To2003Field;
    private List`1<CT_String> attachedSchemaField;
    private CT_Language themeFontLangField;
    private CT_ColorSchemeMapping clrSchemeMappingField;
    private CT_OnOff doNotIncludeSubdocsInStatsField;
    private CT_OnOff doNotAutoCompressPicturesField;
    private CT_Empty forceUpgradeField;
    private CT_Captions captionsField;
    private CT_ReadingModeInkLockDown readModeInkLockDownField;
    private List`1<CT_SmartTagType> smartTagTypeField;
    private List`1<CT_Schema> schemaLibraryField;
    private XmlElement[] shapeDefaultsField;
    private CT_OnOff doNotEmbedSmartTagsField;
    private CT_String decimalSymbolField;
    private CT_String listSeparatorField;
    [XmlElementAttribute]
public CT_WriteProtection writeProtection { get; public set; }
    [XmlElementAttribute]
public CT_View view { get; public set; }
    [XmlElementAttribute]
public CT_Zoom zoom { get; public set; }
    [XmlElementAttribute]
public CT_OnOff removePersonalInformation { get; public set; }
    [XmlElementAttribute]
public CT_OnOff removeDateAndTime { get; public set; }
    [XmlElementAttribute]
public CT_OnOff doNotDisplayPageBoundaries { get; public set; }
    [XmlElementAttribute]
public CT_OnOff displayBackgroundShape { get; public set; }
    [XmlElementAttribute]
public CT_OnOff printPostScriptOverText { get; public set; }
    [XmlElementAttribute]
public CT_OnOff printFractionalCharacterWidth { get; public set; }
    [XmlElementAttribute]
public CT_OnOff printFormsData { get; public set; }
    [XmlElementAttribute]
public CT_OnOff embedTrueTypeFonts { get; public set; }
    [XmlElementAttribute]
public CT_OnOff embedSystemFonts { get; public set; }
    [XmlElementAttribute]
public CT_OnOff saveSubsetFonts { get; public set; }
    [XmlElementAttribute]
public CT_OnOff saveFormsData { get; public set; }
    [XmlElementAttribute]
public CT_OnOff mirrorMargins { get; public set; }
    [XmlElementAttribute]
public CT_OnOff alignBordersAndEdges { get; public set; }
    [XmlElementAttribute]
public CT_OnOff bordersDoNotSurroundHeader { get; public set; }
    [XmlElementAttribute]
public CT_OnOff bordersDoNotSurroundFooter { get; public set; }
    [XmlElementAttribute]
public CT_OnOff gutterAtTop { get; public set; }
    [XmlElementAttribute]
public CT_OnOff hideSpellingErrors { get; public set; }
    [XmlElementAttribute]
public CT_OnOff hideGrammaticalErrors { get; public set; }
    [XmlElementAttribute("activeWritingStyle")]
public List`1<CT_WritingStyle> activeWritingStyle { get; public set; }
    [XmlElementAttribute]
public CT_Proof proofState { get; public set; }
    [XmlElementAttribute]
public CT_OnOff formsDesign { get; public set; }
    [XmlElementAttribute]
public CT_Rel attachedTemplate { get; public set; }
    [XmlElementAttribute]
public CT_OnOff linkStyles { get; public set; }
    [XmlElementAttribute]
public CT_ShortHexNumber stylePaneFormatFilter { get; public set; }
    [XmlElementAttribute]
public CT_ShortHexNumber stylePaneSortMethod { get; public set; }
    [XmlElementAttribute]
public CT_DocType documentType { get; public set; }
    [XmlElementAttribute]
public CT_MailMerge mailMerge { get; public set; }
    [XmlElementAttribute]
public CT_TrackChangesView revisionView { get; public set; }
    [XmlElementAttribute]
public CT_OnOff trackRevisions { get; public set; }
    [XmlElementAttribute]
public CT_OnOff doNotTrackMoves { get; public set; }
    [XmlElementAttribute]
public CT_OnOff doNotTrackFormatting { get; public set; }
    [XmlElementAttribute]
public CT_DocProtect documentProtection { get; public set; }
    [XmlElementAttribute]
public CT_OnOff autoFormatOverride { get; public set; }
    [XmlElementAttribute]
public CT_OnOff styleLockTheme { get; public set; }
    [XmlElementAttribute]
public CT_OnOff styleLockQFSet { get; public set; }
    [XmlElementAttribute]
public CT_TwipsMeasure defaultTabStop { get; public set; }
    [XmlElementAttribute]
public CT_OnOff autoHyphenation { get; public set; }
    [XmlElementAttribute]
public CT_DecimalNumber consecutiveHyphenLimit { get; public set; }
    [XmlElementAttribute]
public CT_TwipsMeasure hyphenationZone { get; public set; }
    [XmlElementAttribute]
public CT_OnOff doNotHyphenateCaps { get; public set; }
    [XmlElementAttribute]
public CT_OnOff showEnvelope { get; public set; }
    [XmlElementAttribute]
public CT_DecimalNumber summaryLength { get; public set; }
    [XmlElementAttribute]
public CT_String clickAndTypeStyle { get; public set; }
    [XmlElementAttribute]
public CT_String defaultTableStyle { get; public set; }
    [XmlElementAttribute]
public CT_OnOff evenAndOddHeaders { get; public set; }
    [XmlElementAttribute]
public CT_OnOff bookFoldRevPrinting { get; public set; }
    [XmlElementAttribute]
public CT_OnOff bookFoldPrinting { get; public set; }
    [XmlElementAttribute]
public CT_DecimalNumber bookFoldPrintingSheets { get; public set; }
    [XmlElementAttribute]
public CT_TwipsMeasure drawingGridHorizontalSpacing { get; public set; }
    [XmlElementAttribute]
public CT_TwipsMeasure drawingGridVerticalSpacing { get; public set; }
    [XmlElementAttribute]
public CT_DecimalNumber displayHorizontalDrawingGridEvery { get; public set; }
    [XmlElementAttribute]
public CT_DecimalNumber displayVerticalDrawingGridEvery { get; public set; }
    [XmlElementAttribute]
public CT_OnOff doNotUseMarginsForDrawingGridOrigin { get; public set; }
    [XmlElementAttribute]
public CT_TwipsMeasure drawingGridHorizontalOrigin { get; public set; }
    [XmlElementAttribute]
public CT_TwipsMeasure drawingGridVerticalOrigin { get; public set; }
    [XmlElementAttribute]
public CT_OnOff doNotShadeFormData { get; public set; }
    [XmlElementAttribute]
public CT_OnOff noPunctuationKerning { get; public set; }
    [XmlElementAttribute]
public CT_CharacterSpacing characterSpacingControl { get; public set; }
    [XmlElementAttribute]
public CT_OnOff printTwoOnOne { get; public set; }
    [XmlElementAttribute]
public CT_OnOff strictFirstAndLastChars { get; public set; }
    [XmlElementAttribute]
public CT_Kinsoku noLineBreaksAfter { get; public set; }
    [XmlElementAttribute]
public CT_Kinsoku noLineBreaksBefore { get; public set; }
    [XmlElementAttribute]
public CT_OnOff savePreviewPicture { get; public set; }
    [XmlElementAttribute]
public CT_OnOff doNotValidateAgainstSchema { get; public set; }
    [XmlElementAttribute]
public CT_OnOff saveInvalidXml { get; public set; }
    [XmlElementAttribute]
public CT_OnOff ignoreMixedContent { get; public set; }
    [XmlElementAttribute]
public CT_OnOff alwaysShowPlaceholderText { get; public set; }
    [XmlElementAttribute]
public CT_OnOff doNotDemarcateInvalidXml { get; public set; }
    [XmlElementAttribute]
public CT_OnOff saveXmlDataOnly { get; public set; }
    [XmlElementAttribute]
public CT_OnOff useXSLTWhenSaving { get; public set; }
    [XmlElementAttribute]
public CT_SaveThroughXslt saveThroughXslt { get; public set; }
    [XmlElementAttribute]
public CT_OnOff showXMLTags { get; public set; }
    [XmlElementAttribute]
public CT_OnOff alwaysMergeEmptyNamespace { get; public set; }
    [XmlElementAttribute]
public CT_OnOff updateFields { get; public set; }
    [XmlArrayAttribute]
[XmlArrayItemAttribute("")]
public XmlElement[] hdrShapeDefaults { get; public set; }
    [XmlElementAttribute]
public CT_FtnDocProps footnotePr { get; public set; }
    [XmlElementAttribute]
public CT_EdnDocProps endnotePr { get; public set; }
    [XmlElementAttribute]
public CT_Compat compat { get; public set; }
    [XmlElementAttribute]
public CT_DocVars docVars { get; public set; }
    [XmlElementAttribute]
public CT_DocRsids rsids { get; public set; }
    [XmlElementAttribute]
public CT_MathPr mathPr { get; public set; }
    [XmlElementAttribute]
public CT_OnOff uiCompat97To2003 { get; public set; }
    [XmlElementAttribute("attachedSchema")]
public List`1<CT_String> attachedSchema { get; public set; }
    [XmlElementAttribute]
public CT_Language themeFontLang { get; public set; }
    [XmlElementAttribute]
public CT_ColorSchemeMapping clrSchemeMapping { get; public set; }
    [XmlElementAttribute]
public CT_OnOff doNotIncludeSubdocsInStats { get; public set; }
    [XmlElementAttribute]
public CT_OnOff doNotAutoCompressPictures { get; public set; }
    [XmlElementAttribute]
public CT_Empty forceUpgrade { get; public set; }
    [XmlElementAttribute]
public CT_Captions captions { get; public set; }
    [XmlElementAttribute]
public CT_ReadingModeInkLockDown readModeInkLockDown { get; public set; }
    [XmlElementAttribute("smartTagType")]
public List`1<CT_SmartTagType> smartTagType { get; public set; }
    [XmlArrayAttribute]
[XmlArrayItemAttribute("schema")]
public List`1<CT_Schema> schemaLibrary { get; public set; }
    [XmlArrayAttribute]
[XmlArrayItemAttribute("")]
public XmlElement[] shapeDefaults { get; public set; }
    [XmlElementAttribute]
public CT_OnOff doNotEmbedSmartTags { get; public set; }
    [XmlElementAttribute]
public CT_String decimalSymbol { get; public set; }
    [XmlElementAttribute]
public CT_String listSeparator { get; public set; }
    public static CT_Settings Parse(XmlNode node, XmlNamespaceManager namespaceManager);
    internal void Write(StreamWriter sw);
    public CT_WriteProtection get_writeProtection();
    public void set_writeProtection(CT_WriteProtection value);
    public CT_View get_view();
    public void set_view(CT_View value);
    public CT_Zoom get_zoom();
    public void set_zoom(CT_Zoom value);
    public CT_OnOff get_removePersonalInformation();
    public void set_removePersonalInformation(CT_OnOff value);
    public CT_OnOff get_removeDateAndTime();
    public void set_removeDateAndTime(CT_OnOff value);
    public CT_OnOff get_doNotDisplayPageBoundaries();
    public void set_doNotDisplayPageBoundaries(CT_OnOff value);
    public CT_OnOff get_displayBackgroundShape();
    public void set_displayBackgroundShape(CT_OnOff value);
    public CT_OnOff get_printPostScriptOverText();
    public void set_printPostScriptOverText(CT_OnOff value);
    public CT_OnOff get_printFractionalCharacterWidth();
    public void set_printFractionalCharacterWidth(CT_OnOff value);
    public CT_OnOff get_printFormsData();
    public void set_printFormsData(CT_OnOff value);
    public CT_OnOff get_embedTrueTypeFonts();
    public void set_embedTrueTypeFonts(CT_OnOff value);
    public CT_OnOff get_embedSystemFonts();
    public void set_embedSystemFonts(CT_OnOff value);
    public CT_OnOff get_saveSubsetFonts();
    public void set_saveSubsetFonts(CT_OnOff value);
    public CT_OnOff get_saveFormsData();
    public void set_saveFormsData(CT_OnOff value);
    public CT_OnOff get_mirrorMargins();
    public void set_mirrorMargins(CT_OnOff value);
    public CT_OnOff get_alignBordersAndEdges();
    public void set_alignBordersAndEdges(CT_OnOff value);
    public CT_OnOff get_bordersDoNotSurroundHeader();
    public void set_bordersDoNotSurroundHeader(CT_OnOff value);
    public CT_OnOff get_bordersDoNotSurroundFooter();
    public void set_bordersDoNotSurroundFooter(CT_OnOff value);
    public CT_OnOff get_gutterAtTop();
    public void set_gutterAtTop(CT_OnOff value);
    public CT_OnOff get_hideSpellingErrors();
    public void set_hideSpellingErrors(CT_OnOff value);
    public CT_OnOff get_hideGrammaticalErrors();
    public void set_hideGrammaticalErrors(CT_OnOff value);
    public List`1<CT_WritingStyle> get_activeWritingStyle();
    public void set_activeWritingStyle(List`1<CT_WritingStyle> value);
    public CT_Proof get_proofState();
    public void set_proofState(CT_Proof value);
    public CT_OnOff get_formsDesign();
    public void set_formsDesign(CT_OnOff value);
    public CT_Rel get_attachedTemplate();
    public void set_attachedTemplate(CT_Rel value);
    public CT_OnOff get_linkStyles();
    public void set_linkStyles(CT_OnOff value);
    public CT_ShortHexNumber get_stylePaneFormatFilter();
    public void set_stylePaneFormatFilter(CT_ShortHexNumber value);
    public CT_ShortHexNumber get_stylePaneSortMethod();
    public void set_stylePaneSortMethod(CT_ShortHexNumber value);
    public CT_DocType get_documentType();
    public void set_documentType(CT_DocType value);
    public CT_MailMerge get_mailMerge();
    public void set_mailMerge(CT_MailMerge value);
    public CT_TrackChangesView get_revisionView();
    public void set_revisionView(CT_TrackChangesView value);
    public CT_OnOff get_trackRevisions();
    public void set_trackRevisions(CT_OnOff value);
    public CT_OnOff get_doNotTrackMoves();
    public void set_doNotTrackMoves(CT_OnOff value);
    public CT_OnOff get_doNotTrackFormatting();
    public void set_doNotTrackFormatting(CT_OnOff value);
    public CT_DocProtect get_documentProtection();
    public void set_documentProtection(CT_DocProtect value);
    public CT_OnOff get_autoFormatOverride();
    public void set_autoFormatOverride(CT_OnOff value);
    public CT_OnOff get_styleLockTheme();
    public void set_styleLockTheme(CT_OnOff value);
    public CT_OnOff get_styleLockQFSet();
    public void set_styleLockQFSet(CT_OnOff value);
    public CT_TwipsMeasure get_defaultTabStop();
    public void set_defaultTabStop(CT_TwipsMeasure value);
    public CT_OnOff get_autoHyphenation();
    public void set_autoHyphenation(CT_OnOff value);
    public CT_DecimalNumber get_consecutiveHyphenLimit();
    public void set_consecutiveHyphenLimit(CT_DecimalNumber value);
    public CT_TwipsMeasure get_hyphenationZone();
    public void set_hyphenationZone(CT_TwipsMeasure value);
    public CT_OnOff get_doNotHyphenateCaps();
    public void set_doNotHyphenateCaps(CT_OnOff value);
    public CT_OnOff get_showEnvelope();
    public void set_showEnvelope(CT_OnOff value);
    public CT_DecimalNumber get_summaryLength();
    public void set_summaryLength(CT_DecimalNumber value);
    public CT_String get_clickAndTypeStyle();
    public void set_clickAndTypeStyle(CT_String value);
    public CT_String get_defaultTableStyle();
    public void set_defaultTableStyle(CT_String value);
    public CT_OnOff get_evenAndOddHeaders();
    public void set_evenAndOddHeaders(CT_OnOff value);
    public CT_OnOff get_bookFoldRevPrinting();
    public void set_bookFoldRevPrinting(CT_OnOff value);
    public CT_OnOff get_bookFoldPrinting();
    public void set_bookFoldPrinting(CT_OnOff value);
    public CT_DecimalNumber get_bookFoldPrintingSheets();
    public void set_bookFoldPrintingSheets(CT_DecimalNumber value);
    public CT_TwipsMeasure get_drawingGridHorizontalSpacing();
    public void set_drawingGridHorizontalSpacing(CT_TwipsMeasure value);
    public CT_TwipsMeasure get_drawingGridVerticalSpacing();
    public void set_drawingGridVerticalSpacing(CT_TwipsMeasure value);
    public CT_DecimalNumber get_displayHorizontalDrawingGridEvery();
    public void set_displayHorizontalDrawingGridEvery(CT_DecimalNumber value);
    public CT_DecimalNumber get_displayVerticalDrawingGridEvery();
    public void set_displayVerticalDrawingGridEvery(CT_DecimalNumber value);
    public CT_OnOff get_doNotUseMarginsForDrawingGridOrigin();
    public void set_doNotUseMarginsForDrawingGridOrigin(CT_OnOff value);
    public CT_TwipsMeasure get_drawingGridHorizontalOrigin();
    public void set_drawingGridHorizontalOrigin(CT_TwipsMeasure value);
    public CT_TwipsMeasure get_drawingGridVerticalOrigin();
    public void set_drawingGridVerticalOrigin(CT_TwipsMeasure value);
    public CT_OnOff get_doNotShadeFormData();
    public void set_doNotShadeFormData(CT_OnOff value);
    public CT_OnOff get_noPunctuationKerning();
    public void set_noPunctuationKerning(CT_OnOff value);
    public CT_CharacterSpacing get_characterSpacingControl();
    public void set_characterSpacingControl(CT_CharacterSpacing value);
    public CT_OnOff get_printTwoOnOne();
    public void set_printTwoOnOne(CT_OnOff value);
    public CT_OnOff get_strictFirstAndLastChars();
    public void set_strictFirstAndLastChars(CT_OnOff value);
    public CT_Kinsoku get_noLineBreaksAfter();
    public void set_noLineBreaksAfter(CT_Kinsoku value);
    public CT_Kinsoku get_noLineBreaksBefore();
    public void set_noLineBreaksBefore(CT_Kinsoku value);
    public CT_OnOff get_savePreviewPicture();
    public void set_savePreviewPicture(CT_OnOff value);
    public CT_OnOff get_doNotValidateAgainstSchema();
    public void set_doNotValidateAgainstSchema(CT_OnOff value);
    public CT_OnOff get_saveInvalidXml();
    public void set_saveInvalidXml(CT_OnOff value);
    public CT_OnOff get_ignoreMixedContent();
    public void set_ignoreMixedContent(CT_OnOff value);
    public CT_OnOff get_alwaysShowPlaceholderText();
    public void set_alwaysShowPlaceholderText(CT_OnOff value);
    public CT_OnOff get_doNotDemarcateInvalidXml();
    public void set_doNotDemarcateInvalidXml(CT_OnOff value);
    public CT_OnOff get_saveXmlDataOnly();
    public void set_saveXmlDataOnly(CT_OnOff value);
    public CT_OnOff get_useXSLTWhenSaving();
    public void set_useXSLTWhenSaving(CT_OnOff value);
    public CT_SaveThroughXslt get_saveThroughXslt();
    public void set_saveThroughXslt(CT_SaveThroughXslt value);
    public CT_OnOff get_showXMLTags();
    public void set_showXMLTags(CT_OnOff value);
    public CT_OnOff get_alwaysMergeEmptyNamespace();
    public void set_alwaysMergeEmptyNamespace(CT_OnOff value);
    public CT_OnOff get_updateFields();
    public void set_updateFields(CT_OnOff value);
    public XmlElement[] get_hdrShapeDefaults();
    public void set_hdrShapeDefaults(XmlElement[] value);
    public CT_FtnDocProps get_footnotePr();
    public void set_footnotePr(CT_FtnDocProps value);
    public CT_EdnDocProps get_endnotePr();
    public void set_endnotePr(CT_EdnDocProps value);
    public CT_Compat get_compat();
    public void set_compat(CT_Compat value);
    public CT_DocVars get_docVars();
    public void set_docVars(CT_DocVars value);
    public CT_DocRsids get_rsids();
    public void set_rsids(CT_DocRsids value);
    public CT_MathPr get_mathPr();
    public void set_mathPr(CT_MathPr value);
    public CT_OnOff get_uiCompat97To2003();
    public void set_uiCompat97To2003(CT_OnOff value);
    public List`1<CT_String> get_attachedSchema();
    public void set_attachedSchema(List`1<CT_String> value);
    public CT_Language get_themeFontLang();
    public void set_themeFontLang(CT_Language value);
    public CT_ColorSchemeMapping get_clrSchemeMapping();
    public void set_clrSchemeMapping(CT_ColorSchemeMapping value);
    public CT_OnOff get_doNotIncludeSubdocsInStats();
    public void set_doNotIncludeSubdocsInStats(CT_OnOff value);
    public CT_OnOff get_doNotAutoCompressPictures();
    public void set_doNotAutoCompressPictures(CT_OnOff value);
    public CT_Empty get_forceUpgrade();
    public void set_forceUpgrade(CT_Empty value);
    public CT_Captions get_captions();
    public void set_captions(CT_Captions value);
    public CT_ReadingModeInkLockDown get_readModeInkLockDown();
    public void set_readModeInkLockDown(CT_ReadingModeInkLockDown value);
    public List`1<CT_SmartTagType> get_smartTagType();
    public void set_smartTagType(List`1<CT_SmartTagType> value);
    public List`1<CT_Schema> get_schemaLibrary();
    public void set_schemaLibrary(List`1<CT_Schema> value);
    public XmlElement[] get_shapeDefaults();
    public void set_shapeDefaults(XmlElement[] value);
    public CT_OnOff get_doNotEmbedSmartTags();
    public void set_doNotEmbedSmartTags(CT_OnOff value);
    public CT_String get_decimalSymbol();
    public void set_decimalSymbol(CT_String value);
    public CT_String get_listSeparator();
    public void set_listSeparator(CT_String value);
    public bool IsSetZoom();
    public CT_Zoom AddNewZoom();
    public bool IsSetUpdateFields();
    public bool IsSetTrackRevisions();
    public CT_OnOff AddNewTrackRevisions();
    public void UnsetTrackRevisions();
}
[XmlTypeAttribute]
[XmlRootAttribute]
public class NPOI.OpenXmlFormats.Wordprocessing.CT_ShapeDefaults : object {
    private XmlElement[] itemsField;
    [XmlAnyElementAttribute]
public XmlElement[] Items { get; public set; }
    public XmlElement[] get_Items();
    public void set_Items(XmlElement[] value);
}
[XmlTypeAttribute]
[XmlRootAttribute]
public class NPOI.OpenXmlFormats.Wordprocessing.CT_Shd : object {
    private ST_Shd valField;
    private string colorField;
    private ST_ThemeColor themeColorField;
    private bool themeColorFieldSpecified;
    private Byte[] themeTintField;
    private Byte[] themeShadeField;
    private string fillField;
    private ST_ThemeColor themeFillField;
    private bool themeFillFieldSpecified;
    private Byte[] themeFillTintField;
    private Byte[] themeFillShadeField;
    [XmlAttributeAttribute]
public ST_Shd val { get; public set; }
    [XmlAttributeAttribute]
public string color { get; public set; }
    [XmlAttributeAttribute]
public ST_ThemeColor themeColor { get; public set; }
    [XmlIgnoreAttribute]
public bool themeColorSpecified { get; public set; }
    [XmlAttributeAttribute]
public Byte[] themeTint { get; public set; }
    [XmlAttributeAttribute]
public Byte[] themeShade { get; public set; }
    [XmlAttributeAttribute]
public string fill { get; public set; }
    [XmlAttributeAttribute]
public ST_ThemeColor themeFill { get; public set; }
    [XmlIgnoreAttribute]
public bool themeFillSpecified { get; public set; }
    [XmlAttributeAttribute]
public Byte[] themeFillTint { get; public set; }
    [XmlAttributeAttribute]
public Byte[] themeFillShade { get; public set; }
    public static CT_Shd Parse(XmlNode node, XmlNamespaceManager namespaceManager);
    internal void Write(StreamWriter sw, string nodeName);
    public ST_Shd get_val();
    public void set_val(ST_Shd value);
    public string get_color();
    public void set_color(string value);
    public ST_ThemeColor get_themeColor();
    public void set_themeColor(ST_ThemeColor value);
    public bool get_themeColorSpecified();
    public void set_themeColorSpecified(bool value);
    public Byte[] get_themeTint();
    public void set_themeTint(Byte[] value);
    public Byte[] get_themeShade();
    public void set_themeShade(Byte[] value);
    public string get_fill();
    public void set_fill(string value);
    public ST_ThemeColor get_themeFill();
    public void set_themeFill(ST_ThemeColor value);
    public bool get_themeFillSpecified();
    public void set_themeFillSpecified(bool value);
    public Byte[] get_themeFillTint();
    public void set_themeFillTint(Byte[] value);
    public Byte[] get_themeFillShade();
    public void set_themeFillShade(Byte[] value);
}
[XmlTypeAttribute]
[XmlRootAttribute]
public class NPOI.OpenXmlFormats.Wordprocessing.CT_ShortHexNumber : object {
    private Byte[] valField;
    [XmlAttributeAttribute]
public Byte[] val { get; public set; }
    public static CT_ShortHexNumber Parse(XmlNode node, XmlNamespaceManager namespaceManager);
    internal void Write(StreamWriter sw, string nodeName);
    public Byte[] get_val();
    public void set_val(Byte[] value);
}
[XmlTypeAttribute]
[XmlRootAttribute]
public class NPOI.OpenXmlFormats.Wordprocessing.CT_SignedHpsMeasure : object {
    private string valField;
    [XmlAttributeAttribute]
public string val { get; public set; }
    public static CT_SignedHpsMeasure Parse(XmlNode node, XmlNamespaceManager namespaceManager);
    internal void Write(StreamWriter sw, string nodeName);
    public string get_val();
    public void set_val(string value);
}
[XmlTypeAttribute]
[XmlRootAttribute]
public class NPOI.OpenXmlFormats.Wordprocessing.CT_SignedTwipsMeasure : object {
    private string valField;
    [XmlAttributeAttribute]
public string val { get; public set; }
    public static CT_SignedTwipsMeasure Parse(XmlNode node, XmlNamespaceManager namespaceManager);
    internal void Write(StreamWriter sw, string nodeName);
    public string get_val();
    public void set_val(string value);
}
[XmlTypeAttribute]
[XmlRootAttribute]
public class NPOI.OpenXmlFormats.Wordprocessing.CT_SimpleField : object {
    private CT_Text fldDataField;
    private ArrayList itemsField;
    private List`1<ItemsChoiceType13> itemsElementNameField;
    private string instrField;
    private ST_OnOff fldLockField;
    private bool fldLockFieldSpecified;
    private ST_OnOff dirtyField;
    private bool dirtyFieldSpecified;
    [XmlElementAttribute]
public CT_Text fldData { get; public set; }
    [XmlElementAttribute("oMath", "NPOI.OpenXmlFormats.Shared.CT_OMath")]
[XmlElementAttribute("oMathPara", "NPOI.OpenXmlFormats.Shared.CT_OMathPara")]
[XmlElementAttribute("bookmarkEnd", "NPOI.OpenXmlFormats.Wordprocessing.CT_MarkupRange")]
[XmlElementAttribute("bookmarkStart", "NPOI.OpenXmlFormats.Wordprocessing.CT_Bookmark")]
[XmlElementAttribute("commentRangeEnd", "NPOI.OpenXmlFormats.Wordprocessing.CT_MarkupRange")]
[XmlElementAttribute("commentRangeStart", "NPOI.OpenXmlFormats.Wordprocessing.CT_MarkupRange")]
[XmlElementAttribute("customXml", "NPOI.OpenXmlFormats.Wordprocessing.CT_CustomXmlRun")]
[XmlElementAttribute("customXmlDelRangeEnd", "NPOI.OpenXmlFormats.Wordprocessing.CT_Markup")]
[XmlElementAttribute("customXmlDelRangeStart", "NPOI.OpenXmlFormats.Wordprocessing.CT_TrackChange")]
[XmlElementAttribute("customXmlInsRangeEnd", "NPOI.OpenXmlFormats.Wordprocessing.CT_Markup")]
[XmlElementAttribute("customXmlInsRangeStart", "NPOI.OpenXmlFormats.Wordprocessing.CT_TrackChange")]
[XmlElementAttribute("customXmlMoveFromRangeEnd", "NPOI.OpenXmlFormats.Wordprocessing.CT_Markup")]
[XmlElementAttribute("customXmlMoveFromRangeStart", "NPOI.OpenXmlFormats.Wordprocessing.CT_TrackChange")]
[XmlElementAttribute("customXmlMoveToRangeEnd", "NPOI.OpenXmlFormats.Wordprocessing.CT_Markup")]
[XmlElementAttribute("customXmlMoveToRangeStart", "NPOI.OpenXmlFormats.Wordprocessing.CT_TrackChange")]
[XmlElementAttribute("del", "NPOI.OpenXmlFormats.Wordprocessing.CT_RunTrackChange")]
[XmlElementAttribute("fldSimple", "NPOI.OpenXmlFormats.Wordprocessing.CT_SimpleField")]
[XmlElementAttribute("hyperlink", "NPOI.OpenXmlFormats.Wordprocessing.CT_Hyperlink1")]
[XmlElementAttribute("ins", "NPOI.OpenXmlFormats.Wordprocessing.CT_RunTrackChange")]
[XmlElementAttribute("moveFrom", "NPOI.OpenXmlFormats.Wordprocessing.CT_RunTrackChange")]
[XmlElementAttribute("moveFromRangeEnd", "NPOI.OpenXmlFormats.Wordprocessing.CT_MarkupRange")]
[XmlElementAttribute("moveFromRangeStart", "NPOI.OpenXmlFormats.Wordprocessing.CT_MoveBookmark")]
[XmlElementAttribute("moveTo", "NPOI.OpenXmlFormats.Wordprocessing.CT_RunTrackChange")]
[XmlElementAttribute("moveToRangeEnd", "NPOI.OpenXmlFormats.Wordprocessing.CT_MarkupRange")]
[XmlElementAttribute("moveToRangeStart", "NPOI.OpenXmlFormats.Wordprocessing.CT_MoveBookmark")]
[XmlElementAttribute("permEnd", "NPOI.OpenXmlFormats.Wordprocessing.CT_Perm")]
[XmlElementAttribute("permStart", "NPOI.OpenXmlFormats.Wordprocessing.CT_PermStart")]
[XmlElementAttribute("proofErr", "NPOI.OpenXmlFormats.Wordprocessing.CT_ProofErr")]
[XmlElementAttribute("r", "NPOI.OpenXmlFormats.Wordprocessing.CT_R")]
[XmlElementAttribute("sdt", "NPOI.OpenXmlFormats.Wordprocessing.CT_SdtRun")]
[XmlElementAttribute("smartTag", "NPOI.OpenXmlFormats.Wordprocessing.CT_SmartTagRun")]
[XmlElementAttribute("subDoc", "NPOI.OpenXmlFormats.Wordprocessing.CT_Rel")]
[XmlChoiceIdentifierAttribute("ItemsElementName")]
public ArrayList Items { get; public set; }
    [XmlElementAttribute("ItemsElementName")]
[XmlIgnoreAttribute]
public List`1<ItemsChoiceType13> ItemsElementName { get; public set; }
    [XmlAttributeAttribute]
public string instr { get; public set; }
    [XmlAttributeAttribute]
public ST_OnOff fldLock { get; public set; }
    [XmlIgnoreAttribute]
public bool fldLockSpecified { get; public set; }
    [XmlAttributeAttribute]
public ST_OnOff dirty { get; public set; }
    [XmlIgnoreAttribute]
public bool dirtySpecified { get; public set; }
    public CT_Text get_fldData();
    public void set_fldData(CT_Text value);
    public static CT_SimpleField Parse(XmlNode node, XmlNamespaceManager namespaceManager);
    internal void Write(StreamWriter sw, string nodeName);
    public ArrayList get_Items();
    public void set_Items(ArrayList value);
    public List`1<ItemsChoiceType13> get_ItemsElementName();
    public void set_ItemsElementName(List`1<ItemsChoiceType13> value);
    public string get_instr();
    public void set_instr(string value);
    public ST_OnOff get_fldLock();
    public void set_fldLock(ST_OnOff value);
    public bool get_fldLockSpecified();
    public void set_fldLockSpecified(bool value);
    public ST_OnOff get_dirty();
    public void set_dirty(ST_OnOff value);
    public bool get_dirtySpecified();
    public void set_dirtySpecified(bool value);
    public IEnumerable`1<CT_R> GetRList();
    private List`1<T> GetObjectList(ItemsChoiceType13 type);
    private int SizeOfArray(ItemsChoiceType13 type);
    private T GetObjectArray(int p, ItemsChoiceType13 type);
    private T InsertNewObject(ItemsChoiceType13 type, int p);
    private T AddNewObject(ItemsChoiceType13 type);
    private void SetObject(ItemsChoiceType13 type, int p, T obj);
    private int GetObjectIndex(ItemsChoiceType13 type, int p);
    private void RemoveObject(ItemsChoiceType13 type, int p);
}
[XmlTypeAttribute]
[XmlRootAttribute]
public class NPOI.OpenXmlFormats.Wordprocessing.CT_SmartTagPr : object {
    private List`1<CT_Attr> attrField;
    [XmlElementAttribute("attr")]
public List`1<CT_Attr> attr { get; public set; }
    public List`1<CT_Attr> get_attr();
    public void set_attr(List`1<CT_Attr> value);
}
[XmlTypeAttribute]
[XmlRootAttribute]
public class NPOI.OpenXmlFormats.Wordprocessing.CT_SmartTagRun : object {
    private List`1<CT_Attr> smartTagPrField;
    private ArrayList itemsField;
    private List`1<ItemsChoiceType25> itemsElementNameField;
    private string uriField;
    private string elementField;
    [XmlArrayAttribute]
[XmlArrayItemAttribute("attr")]
public List`1<CT_Attr> smartTagPr { get; public set; }
    [XmlElementAttribute("oMath", "NPOI.OpenXmlFormats.Shared.CT_OMath")]
[XmlElementAttribute("oMathPara", "NPOI.OpenXmlFormats.Shared.CT_OMathPara")]
[XmlElementAttribute("bookmarkEnd", "NPOI.OpenXmlFormats.Wordprocessing.CT_MarkupRange")]
[XmlElementAttribute("bookmarkStart", "NPOI.OpenXmlFormats.Wordprocessing.CT_Bookmark")]
[XmlElementAttribute("commentRangeEnd", "NPOI.OpenXmlFormats.Wordprocessing.CT_MarkupRange")]
[XmlElementAttribute("commentRangeStart", "NPOI.OpenXmlFormats.Wordprocessing.CT_MarkupRange")]
[XmlElementAttribute("customXml", "NPOI.OpenXmlFormats.Wordprocessing.CT_CustomXmlRun")]
[XmlElementAttribute("customXmlDelRangeEnd", "NPOI.OpenXmlFormats.Wordprocessing.CT_Markup")]
[XmlElementAttribute("customXmlDelRangeStart", "NPOI.OpenXmlFormats.Wordprocessing.CT_TrackChange")]
[XmlElementAttribute("customXmlInsRangeEnd", "NPOI.OpenXmlFormats.Wordprocessing.CT_Markup")]
[XmlElementAttribute("customXmlInsRangeStart", "NPOI.OpenXmlFormats.Wordprocessing.CT_TrackChange")]
[XmlElementAttribute("customXmlMoveFromRangeEnd", "NPOI.OpenXmlFormats.Wordprocessing.CT_Markup")]
[XmlElementAttribute("customXmlMoveFromRangeStart", "NPOI.OpenXmlFormats.Wordprocessing.CT_TrackChange")]
[XmlElementAttribute("customXmlMoveToRangeEnd", "NPOI.OpenXmlFormats.Wordprocessing.CT_Markup")]
[XmlElementAttribute("customXmlMoveToRangeStart", "NPOI.OpenXmlFormats.Wordprocessing.CT_TrackChange")]
[XmlElementAttribute("del", "NPOI.OpenXmlFormats.Wordprocessing.CT_RunTrackChange")]
[XmlElementAttribute("fldSimple", "NPOI.OpenXmlFormats.Wordprocessing.CT_SimpleField")]
[XmlElementAttribute("hyperlink", "NPOI.OpenXmlFormats.Wordprocessing.CT_Hyperlink1")]
[XmlElementAttribute("ins", "NPOI.OpenXmlFormats.Wordprocessing.CT_RunTrackChange")]
[XmlElementAttribute("moveFrom", "NPOI.OpenXmlFormats.Wordprocessing.CT_RunTrackChange")]
[XmlElementAttribute("moveFromRangeEnd", "NPOI.OpenXmlFormats.Wordprocessing.CT_MarkupRange")]
[XmlElementAttribute("moveFromRangeStart", "NPOI.OpenXmlFormats.Wordprocessing.CT_MoveBookmark")]
[XmlElementAttribute("moveTo", "NPOI.OpenXmlFormats.Wordprocessing.CT_RunTrackChange")]
[XmlElementAttribute("moveToRangeEnd", "NPOI.OpenXmlFormats.Wordprocessing.CT_MarkupRange")]
[XmlElementAttribute("moveToRangeStart", "NPOI.OpenXmlFormats.Wordprocessing.CT_MoveBookmark")]
[XmlElementAttribute("permEnd", "NPOI.OpenXmlFormats.Wordprocessing.CT_Perm")]
[XmlElementAttribute("permStart", "NPOI.OpenXmlFormats.Wordprocessing.CT_PermStart")]
[XmlElementAttribute("proofErr", "NPOI.OpenXmlFormats.Wordprocessing.CT_ProofErr")]
[XmlElementAttribute("r", "NPOI.OpenXmlFormats.Wordprocessing.CT_R")]
[XmlElementAttribute("sdt", "NPOI.OpenXmlFormats.Wordprocessing.CT_SdtRun")]
[XmlElementAttribute("smartTag", "NPOI.OpenXmlFormats.Wordprocessing.CT_SmartTagRun")]
[XmlElementAttribute("subDoc", "NPOI.OpenXmlFormats.Wordprocessing.CT_Rel")]
[XmlChoiceIdentifierAttribute("ItemsElementName")]
public ArrayList Items { get; public set; }
    [XmlElementAttribute("ItemsElementName")]
[XmlIgnoreAttribute]
public List`1<ItemsChoiceType25> ItemsElementName { get; public set; }
    [XmlAttributeAttribute]
public string uri { get; public set; }
    [XmlAttributeAttribute]
public string element { get; public set; }
    public List`1<CT_Attr> get_smartTagPr();
    public void set_smartTagPr(List`1<CT_Attr> value);
    public ArrayList get_Items();
    public void set_Items(ArrayList value);
    public List`1<ItemsChoiceType25> get_ItemsElementName();
    public void set_ItemsElementName(List`1<ItemsChoiceType25> value);
    public string get_uri();
    public void set_uri(string value);
    public string get_element();
    public void set_element(string value);
    public static CT_SmartTagRun Parse(XmlNode node, XmlNamespaceManager namespaceManager);
    internal void Write(StreamWriter sw, string nodeName);
}
[XmlTypeAttribute]
[XmlRootAttribute]
public class NPOI.OpenXmlFormats.Wordprocessing.CT_SmartTagType : object {
    private string namespaceuriField;
    private string nameField;
    private string urlField;
    [XmlAttributeAttribute]
public string namespaceuri { get; public set; }
    [XmlAttributeAttribute]
public string name { get; public set; }
    [XmlAttributeAttribute]
public string url { get; public set; }
    public static CT_SmartTagType Parse(XmlNode node, XmlNamespaceManager namespaceManager);
    internal void Write(StreamWriter sw, string nodeName);
    public string get_namespaceuri();
    public void set_namespaceuri(string value);
    public string get_name();
    public void set_name(string value);
    public string get_url();
    public void set_url(string value);
}
[XmlTypeAttribute]
[XmlRootAttribute]
public class NPOI.OpenXmlFormats.Wordprocessing.CT_Spacing : object {
    private Nullable`1<ulong> beforeField;
    private string beforeLinesField;
    private ST_OnOff beforeAutospacingField;
    private bool beforeAutospacingFieldSpecified;
    private Nullable`1<ulong> afterField;
    private string afterLinesField;
    private ST_OnOff afterAutospacingField;
    private bool afterAutospacingFieldSpecified;
    private string lineField;
    private ST_LineSpacingRule lineRuleField;
    private bool lineRuleFieldSpecified;
    [XmlAttributeAttribute]
public Nullable`1<ulong> before { get; public set; }
    [XmlAttributeAttribute]
public string beforeLines { get; public set; }
    [XmlAttributeAttribute]
public ST_OnOff beforeAutospacing { get; public set; }
    [XmlIgnoreAttribute]
public bool beforeAutospacingSpecified { get; public set; }
    public Nullable`1<ulong> after { get; public set; }
    [XmlAttributeAttribute]
public string afterLines { get; public set; }
    [XmlAttributeAttribute]
public ST_OnOff afterAutospacing { get; public set; }
    [XmlIgnoreAttribute]
public bool afterAutospacingSpecified { get; public set; }
    [XmlAttributeAttribute]
public string line { get; public set; }
    [XmlAttributeAttribute]
public ST_LineSpacingRule lineRule { get; public set; }
    [XmlIgnoreAttribute]
public bool lineRuleSpecified { get; public set; }
    public static CT_Spacing Parse(XmlNode node, XmlNamespaceManager namespaceManager);
    internal void Write(StreamWriter sw, string nodeName);
    public Nullable`1<ulong> get_before();
    public void set_before(Nullable`1<ulong> value);
    public string get_beforeLines();
    public void set_beforeLines(string value);
    public ST_OnOff get_beforeAutospacing();
    public void set_beforeAutospacing(ST_OnOff value);
    public bool get_beforeAutospacingSpecified();
    public void set_beforeAutospacingSpecified(bool value);
    public Nullable`1<ulong> get_after();
    public void set_after(Nullable`1<ulong> value);
    public string get_afterLines();
    public void set_afterLines(string value);
    public ST_OnOff get_afterAutospacing();
    public void set_afterAutospacing(ST_OnOff value);
    public bool get_afterAutospacingSpecified();
    public void set_afterAutospacingSpecified(bool value);
    public string get_line();
    public void set_line(string value);
    public ST_LineSpacingRule get_lineRule();
    public void set_lineRule(ST_LineSpacingRule value);
    public bool get_lineRuleSpecified();
    public void set_lineRuleSpecified(bool value);
    public bool IsSetBefore();
    public bool IsSetBeforeLines();
    public bool IsSetLineRule();
    public bool IsSetLine();
    public bool IsSetBetweenLines();
    public bool IsSetAfter();
    public bool IsSetAfterLines();
}
[XmlTypeAttribute]
[XmlRootAttribute]
public class NPOI.OpenXmlFormats.Wordprocessing.CT_String : object {
    private string valField;
    [XmlAttributeAttribute]
public string val { get; public set; }
    public static CT_String Parse(XmlNode node, XmlNamespaceManager namespaceManager);
    internal void Write(StreamWriter sw, string nodeName);
    public string get_val();
    public void set_val(string value);
}
[XmlTypeAttribute]
[XmlRootAttribute]
public class NPOI.OpenXmlFormats.Wordprocessing.CT_Style : object {
    private CT_String nameField;
    private CT_String aliasesField;
    private CT_String basedOnField;
    private CT_String nextField;
    private CT_String linkField;
    private CT_OnOff autoRedefineField;
    private CT_OnOff hiddenField;
    private CT_DecimalNumber uiPriorityField;
    private CT_OnOff semiHiddenField;
    private CT_OnOff unhideWhenUsedField;
    private CT_OnOff qFormatField;
    private CT_OnOff lockedField;
    private CT_OnOff personalField;
    private CT_OnOff personalComposeField;
    private CT_OnOff personalReplyField;
    private CT_LongHexNumber rsidField;
    private CT_PPr pPrField;
    private CT_RPr rPrField;
    private CT_TblPrBase tblPrField;
    private CT_TrPr trPrField;
    private CT_TcPr tcPrField;
    private List`1<CT_TblStylePr> tblStylePrField;
    private ST_StyleType typeField;
    private bool typeFieldSpecified;
    private string styleIdField;
    private ST_OnOff defaultField;
    private bool defaultFieldSpecified;
    private ST_OnOff customStyleField;
    private bool customStyleFieldSpecified;
    [XmlElementAttribute]
public CT_String name { get; public set; }
    [XmlElementAttribute]
public CT_String aliases { get; public set; }
    [XmlElementAttribute]
public CT_String basedOn { get; public set; }
    [XmlElementAttribute]
public CT_String next { get; public set; }
    [XmlElementAttribute]
public CT_String link { get; public set; }
    [XmlElementAttribute]
public CT_OnOff autoRedefine { get; public set; }
    [XmlElementAttribute]
public CT_OnOff hidden { get; public set; }
    [XmlElementAttribute]
public CT_DecimalNumber uiPriority { get; public set; }
    [XmlElementAttribute]
public CT_OnOff semiHidden { get; public set; }
    [XmlElementAttribute]
public CT_OnOff unhideWhenUsed { get; public set; }
    [XmlElementAttribute]
public CT_OnOff qFormat { get; public set; }
    [XmlElementAttribute]
public CT_OnOff locked { get; public set; }
    [XmlElementAttribute]
public CT_OnOff personal { get; public set; }
    [XmlElementAttribute]
public CT_OnOff personalCompose { get; public set; }
    [XmlElementAttribute]
public CT_OnOff personalReply { get; public set; }
    [XmlElementAttribute]
public CT_LongHexNumber rsid { get; public set; }
    [XmlElementAttribute]
public CT_PPr pPr { get; public set; }
    [XmlElementAttribute]
public CT_RPr rPr { get; public set; }
    [XmlElementAttribute]
public CT_TblPrBase tblPr { get; public set; }
    [XmlElementAttribute]
public CT_TrPr trPr { get; public set; }
    [XmlElementAttribute]
public CT_TcPr tcPr { get; public set; }
    [XmlElementAttribute("tblStylePr")]
public List`1<CT_TblStylePr> tblStylePr { get; public set; }
    [XmlAttributeAttribute]
public ST_StyleType type { get; public set; }
    [XmlIgnoreAttribute]
public bool typeSpecified { get; public set; }
    [XmlAttributeAttribute]
public string styleId { get; public set; }
    [XmlAttributeAttribute]
public ST_OnOff default { get; public set; }
    [XmlIgnoreAttribute]
public bool defaultSpecified { get; public set; }
    [XmlAttributeAttribute]
public ST_OnOff customStyle { get; public set; }
    [XmlIgnoreAttribute]
public bool customStyleSpecified { get; public set; }
    public static CT_Style Parse(XmlNode node, XmlNamespaceManager namespaceManager);
    internal void Write(StreamWriter sw, string nodeName);
    public CT_String get_name();
    public void set_name(CT_String value);
    public CT_String get_aliases();
    public void set_aliases(CT_String value);
    public CT_String get_basedOn();
    public void set_basedOn(CT_String value);
    public CT_String get_next();
    public void set_next(CT_String value);
    public CT_String get_link();
    public void set_link(CT_String value);
    public CT_OnOff get_autoRedefine();
    public void set_autoRedefine(CT_OnOff value);
    public CT_OnOff get_hidden();
    public void set_hidden(CT_OnOff value);
    public CT_DecimalNumber get_uiPriority();
    public void set_uiPriority(CT_DecimalNumber value);
    public CT_OnOff get_semiHidden();
    public void set_semiHidden(CT_OnOff value);
    public CT_OnOff get_unhideWhenUsed();
    public void set_unhideWhenUsed(CT_OnOff value);
    public CT_OnOff get_qFormat();
    public void set_qFormat(CT_OnOff value);
    public CT_OnOff get_locked();
    public void set_locked(CT_OnOff value);
    public CT_OnOff get_personal();
    public void set_personal(CT_OnOff value);
    public CT_OnOff get_personalCompose();
    public void set_personalCompose(CT_OnOff value);
    public CT_OnOff get_personalReply();
    public void set_personalReply(CT_OnOff value);
    public CT_LongHexNumber get_rsid();
    public void set_rsid(CT_LongHexNumber value);
    public CT_PPr get_pPr();
    public void set_pPr(CT_PPr value);
    public CT_RPr get_rPr();
    public void set_rPr(CT_RPr value);
    public CT_TblPrBase get_tblPr();
    public void set_tblPr(CT_TblPrBase value);
    public CT_TrPr get_trPr();
    public void set_trPr(CT_TrPr value);
    public CT_TcPr get_tcPr();
    public void set_tcPr(CT_TcPr value);
    public List`1<CT_TblStylePr> get_tblStylePr();
    public void set_tblStylePr(List`1<CT_TblStylePr> value);
    public ST_StyleType get_type();
    public void set_type(ST_StyleType value);
    public bool get_typeSpecified();
    public void set_typeSpecified(bool value);
    public string get_styleId();
    public void set_styleId(string value);
    public ST_OnOff get_default();
    public void set_default(ST_OnOff value);
    public bool get_defaultSpecified();
    public void set_defaultSpecified(bool value);
    public ST_OnOff get_customStyle();
    public void set_customStyle(ST_OnOff value);
    public bool get_customStyleSpecified();
    public void set_customStyleSpecified(bool value);
    public bool IsSetName();
}
[XmlTypeAttribute]
[XmlRootAttribute("styles")]
public class NPOI.OpenXmlFormats.Wordprocessing.CT_Styles : object {
    private CT_DocDefaults docDefaultsField;
    private CT_LatentStyles latentStylesField;
    private List`1<CT_Style> styleField;
    [XmlElementAttribute]
public CT_DocDefaults docDefaults { get; public set; }
    [XmlElementAttribute]
public CT_LatentStyles latentStyles { get; public set; }
    [XmlElementAttribute("style")]
public List`1<CT_Style> style { get; public set; }
    public static CT_Styles Parse(XmlNode node, XmlNamespaceManager namespaceManager);
    internal void Write(StreamWriter sw);
    public CT_DocDefaults get_docDefaults();
    public void set_docDefaults(CT_DocDefaults value);
    public CT_LatentStyles get_latentStyles();
    public void set_latentStyles(CT_LatentStyles value);
    public List`1<CT_Style> get_style();
    public void set_style(List`1<CT_Style> value);
    public IList`1<CT_Style> GetStyleList();
    public CT_Style AddNewStyle();
    public void SetStyleArray(int pos, CT_Style cT_Style);
    public bool IsSetDocDefaults();
    public CT_DocDefaults AddNewDocDefaults();
}
[XmlTypeAttribute]
[XmlRootAttribute]
public class NPOI.OpenXmlFormats.Wordprocessing.CT_Sym : object {
    private string fontField;
    private Byte[] charField;
    [XmlAttributeAttribute]
public string font { get; public set; }
    [XmlAttributeAttribute]
public Byte[] char { get; public set; }
    public static CT_Sym Parse(XmlNode node, XmlNamespaceManager namespaceManager);
    internal void Write(StreamWriter sw, string nodeName);
    public string get_font();
    public void set_font(string value);
    public Byte[] get_char();
    public void set_char(Byte[] value);
}
[XmlTypeAttribute]
[XmlRootAttribute]
public class NPOI.OpenXmlFormats.Wordprocessing.CT_Tabs : object {
    private List`1<CT_TabStop> tabField;
    [XmlElementAttribute("tab")]
public List`1<CT_TabStop> tab { get; public set; }
    public List`1<CT_TabStop> get_tab();
    public void set_tab(List`1<CT_TabStop> value);
    public CT_TabStop AddNewTab();
}
[XmlTypeAttribute]
[XmlRootAttribute]
public class NPOI.OpenXmlFormats.Wordprocessing.CT_TabStop : object {
    private ST_TabJc valField;
    private ST_TabTlc leaderField;
    private bool leaderFieldSpecified;
    private string posField;
    [XmlAttributeAttribute]
public ST_TabJc val { get; public set; }
    [XmlAttributeAttribute]
public ST_TabTlc leader { get; public set; }
    [XmlIgnoreAttribute]
public bool leaderSpecified { get; public set; }
    [XmlAttributeAttribute]
public string pos { get; public set; }
    public static CT_TabStop Parse(XmlNode node, XmlNamespaceManager namespaceManager);
    internal void Write(StreamWriter sw, string nodeName);
    public ST_TabJc get_val();
    public void set_val(ST_TabJc value);
    public ST_TabTlc get_leader();
    public void set_leader(ST_TabTlc value);
    public bool get_leaderSpecified();
    public void set_leaderSpecified(bool value);
    public string get_pos();
    public void set_pos(string value);
}
[XmlTypeAttribute]
[XmlRootAttribute]
public class NPOI.OpenXmlFormats.Wordprocessing.CT_TargetScreenSz : object {
    private ST_TargetScreenSz valField;
    [XmlAttributeAttribute]
public ST_TargetScreenSz val { get; public set; }
    public ST_TargetScreenSz get_val();
    public void set_val(ST_TargetScreenSz value);
}
[XmlTypeAttribute]
[XmlRootAttribute]
public class NPOI.OpenXmlFormats.Wordprocessing.CT_Tbl : object {
    private ArrayList itemsField;
    private List`1<ItemsChoiceType30> itemsElementNameField;
    private CT_TblPr tblPrField;
    private CT_TblGrid tblGridField;
    private ArrayList items1Field;
    private List`1<Items1ChoiceType> items1ElementNameField;
    [XmlElementAttribute("bookmarkEnd", "NPOI.OpenXmlFormats.Wordprocessing.CT_MarkupRange")]
[XmlElementAttribute("bookmarkStart", "NPOI.OpenXmlFormats.Wordprocessing.CT_Bookmark")]
[XmlElementAttribute("commentRangeEnd", "NPOI.OpenXmlFormats.Wordprocessing.CT_MarkupRange")]
[XmlElementAttribute("commentRangeStart", "NPOI.OpenXmlFormats.Wordprocessing.CT_MarkupRange")]
[XmlElementAttribute("customXmlDelRangeEnd", "NPOI.OpenXmlFormats.Wordprocessing.CT_Markup")]
[XmlElementAttribute("customXmlDelRangeStart", "NPOI.OpenXmlFormats.Wordprocessing.CT_TrackChange")]
[XmlElementAttribute("customXmlInsRangeEnd", "NPOI.OpenXmlFormats.Wordprocessing.CT_Markup")]
[XmlElementAttribute("customXmlInsRangeStart", "NPOI.OpenXmlFormats.Wordprocessing.CT_TrackChange")]
[XmlElementAttribute("customXmlMoveFromRangeEnd", "NPOI.OpenXmlFormats.Wordprocessing.CT_Markup")]
[XmlElementAttribute("customXmlMoveFromRangeStart", "NPOI.OpenXmlFormats.Wordprocessing.CT_TrackChange")]
[XmlElementAttribute("customXmlMoveToRangeEnd", "NPOI.OpenXmlFormats.Wordprocessing.CT_Markup")]
[XmlElementAttribute("customXmlMoveToRangeStart", "NPOI.OpenXmlFormats.Wordprocessing.CT_TrackChange")]
[XmlElementAttribute("moveFromRangeEnd", "NPOI.OpenXmlFormats.Wordprocessing.CT_MarkupRange")]
[XmlElementAttribute("moveFromRangeStart", "NPOI.OpenXmlFormats.Wordprocessing.CT_MoveBookmark")]
[XmlElementAttribute("moveToRangeEnd", "NPOI.OpenXmlFormats.Wordprocessing.CT_MarkupRange")]
[XmlElementAttribute("moveToRangeStart", "NPOI.OpenXmlFormats.Wordprocessing.CT_MoveBookmark")]
[XmlChoiceIdentifierAttribute("ItemsElementName")]
public ArrayList Items { get; public set; }
    [XmlElementAttribute("ItemsElementName")]
[XmlIgnoreAttribute]
public List`1<ItemsChoiceType30> ItemsElementName { get; public set; }
    [XmlElementAttribute]
public CT_TblPr tblPr { get; public set; }
    [XmlElementAttribute]
public CT_TblGrid tblGrid { get; public set; }
    [XmlElementAttribute("oMath", "NPOI.OpenXmlFormats.Shared.CT_OMath")]
[XmlElementAttribute("oMathPara", "NPOI.OpenXmlFormats.Shared.CT_OMathPara")]
[XmlElementAttribute("bookmarkEnd", "NPOI.OpenXmlFormats.Wordprocessing.CT_MarkupRange")]
[XmlElementAttribute("bookmarkStart", "NPOI.OpenXmlFormats.Wordprocessing.CT_Bookmark")]
[XmlElementAttribute("commentRangeEnd", "NPOI.OpenXmlFormats.Wordprocessing.CT_MarkupRange")]
[XmlElementAttribute("commentRangeStart", "NPOI.OpenXmlFormats.Wordprocessing.CT_MarkupRange")]
[XmlElementAttribute("customXml", "NPOI.OpenXmlFormats.Wordprocessing.CT_CustomXmlRow")]
[XmlElementAttribute("customXmlDelRangeEnd", "NPOI.OpenXmlFormats.Wordprocessing.CT_Markup")]
[XmlElementAttribute("customXmlDelRangeStart", "NPOI.OpenXmlFormats.Wordprocessing.CT_TrackChange")]
[XmlElementAttribute("customXmlInsRangeEnd", "NPOI.OpenXmlFormats.Wordprocessing.CT_Markup")]
[XmlElementAttribute("customXmlInsRangeStart", "NPOI.OpenXmlFormats.Wordprocessing.CT_TrackChange")]
[XmlElementAttribute("customXmlMoveFromRangeEnd", "NPOI.OpenXmlFormats.Wordprocessing.CT_Markup")]
[XmlElementAttribute("customXmlMoveFromRangeStart", "NPOI.OpenXmlFormats.Wordprocessing.CT_TrackChange")]
[XmlElementAttribute("customXmlMoveToRangeEnd", "NPOI.OpenXmlFormats.Wordprocessing.CT_Markup")]
[XmlElementAttribute("customXmlMoveToRangeStart", "NPOI.OpenXmlFormats.Wordprocessing.CT_TrackChange")]
[XmlElementAttribute("del", "NPOI.OpenXmlFormats.Wordprocessing.CT_RunTrackChange")]
[XmlElementAttribute("ins", "NPOI.OpenXmlFormats.Wordprocessing.CT_RunTrackChange")]
[XmlElementAttribute("moveFrom", "NPOI.OpenXmlFormats.Wordprocessing.CT_RunTrackChange")]
[XmlElementAttribute("moveFromRangeEnd", "NPOI.OpenXmlFormats.Wordprocessing.CT_MarkupRange")]
[XmlElementAttribute("moveFromRangeStart", "NPOI.OpenXmlFormats.Wordprocessing.CT_MoveBookmark")]
[XmlElementAttribute("moveTo", "NPOI.OpenXmlFormats.Wordprocessing.CT_RunTrackChange")]
[XmlElementAttribute("moveToRangeEnd", "NPOI.OpenXmlFormats.Wordprocessing.CT_MarkupRange")]
[XmlElementAttribute("moveToRangeStart", "NPOI.OpenXmlFormats.Wordprocessing.CT_MoveBookmark")]
[XmlElementAttribute("permEnd", "NPOI.OpenXmlFormats.Wordprocessing.CT_Perm")]
[XmlElementAttribute("permStart", "NPOI.OpenXmlFormats.Wordprocessing.CT_PermStart")]
[XmlElementAttribute("proofErr", "NPOI.OpenXmlFormats.Wordprocessing.CT_ProofErr")]
[XmlElementAttribute("sdt", "NPOI.OpenXmlFormats.Wordprocessing.CT_SdtRow")]
[XmlElementAttribute("tr", "NPOI.OpenXmlFormats.Wordprocessing.CT_Row")]
[XmlChoiceIdentifierAttribute("Items1ElementName")]
public ArrayList Items1 { get; public set; }
    [XmlElementAttribute("Items1ElementName")]
[XmlIgnoreAttribute]
public List`1<Items1ChoiceType> Items1ElementName { get; public set; }
    public static CT_Tbl Parse(XmlNode node, XmlNamespaceManager namespaceManager);
    internal void Write(StreamWriter sw, string nodeName);
    public ArrayList get_Items();
    public void set_Items(ArrayList value);
    public List`1<ItemsChoiceType30> get_ItemsElementName();
    public void set_ItemsElementName(List`1<ItemsChoiceType30> value);
    public CT_TblPr get_tblPr();
    public void set_tblPr(CT_TblPr value);
    public CT_TblGrid get_tblGrid();
    public void set_tblGrid(CT_TblGrid value);
    public ArrayList get_Items1();
    public void set_Items1(ArrayList value);
    public List`1<Items1ChoiceType> get_Items1ElementName();
    public void set_Items1ElementName(List`1<Items1ChoiceType> value);
    public void Set(CT_Tbl table);
    public void RemoveTr(int pos);
    public CT_Row InsertNewTr(int pos);
    public void SetTrArray(int pos, CT_Row cT_Row);
    public CT_Row AddNewTr();
    public CT_TblPr AddNewTblPr();
    public int SizeOfTrArray();
    public CT_Row GetTrArray(int p);
    public List`1<CT_Row> GetTrList();
    private List`1<T> GetItems1List(Items1ChoiceType type);
    private int SizeOfItems1Array(Items1ChoiceType type);
    private T GetItems1Array(int p, Items1ChoiceType type);
    private T InsertNewItems1(Items1ChoiceType type, int p);
    private T AddNewItems1(Items1ChoiceType type);
    private void SetItems1Array(Items1ChoiceType type, int p, T obj);
    private int GetItems1Index(Items1ChoiceType type, int p);
    private void RemoveItems1(Items1ChoiceType type, int p);
    public CT_TblGrid AddNewTblGrid();
}
[XmlTypeAttribute]
[XmlRootAttribute]
public class NPOI.OpenXmlFormats.Wordprocessing.CT_TblBorders : object {
    private CT_Border topField;
    private CT_Border leftField;
    private CT_Border bottomField;
    private CT_Border rightField;
    private CT_Border insideHField;
    private CT_Border insideVField;
    [XmlElementAttribute]
public CT_Border top { get; public set; }
    [XmlElementAttribute]
public CT_Border left { get; public set; }
    [XmlElementAttribute]
public CT_Border bottom { get; public set; }
    [XmlElementAttribute]
public CT_Border right { get; public set; }
    [XmlElementAttribute]
public CT_Border insideH { get; public set; }
    [XmlElementAttribute]
public CT_Border insideV { get; public set; }
    public static CT_TblBorders Parse(XmlNode node, XmlNamespaceManager namespaceManager);
    internal void Write(StreamWriter sw, string nodeName);
    public CT_Border get_top();
    public void set_top(CT_Border value);
    public CT_Border get_left();
    public void set_left(CT_Border value);
    public CT_Border get_bottom();
    public void set_bottom(CT_Border value);
    public CT_Border get_right();
    public void set_right(CT_Border value);
    public CT_Border get_insideH();
    public void set_insideH(CT_Border value);
    public CT_Border get_insideV();
    public void set_insideV(CT_Border value);
    public CT_Border AddNewBottom();
    public CT_Border AddNewLeft();
    public CT_Border AddNewRight();
    public CT_Border AddNewTop();
    public CT_Border AddNewInsideH();
    public CT_Border AddNewInsideV();
    public bool IsSetInsideH();
    public bool IsSetInsideV();
}
[XmlTypeAttribute]
[XmlRootAttribute]
public class NPOI.OpenXmlFormats.Wordprocessing.CT_TblCellMar : object {
    private CT_TblWidth topField;
    private CT_TblWidth leftField;
    private CT_TblWidth bottomField;
    private CT_TblWidth rightField;
    [XmlElementAttribute]
public CT_TblWidth top { get; public set; }
    [XmlElementAttribute]
public CT_TblWidth left { get; public set; }
    [XmlElementAttribute]
public CT_TblWidth bottom { get; public set; }
    [XmlElementAttribute]
public CT_TblWidth right { get; public set; }
    public static CT_TblCellMar Parse(XmlNode node, XmlNamespaceManager namespaceManager);
    internal void Write(StreamWriter sw, string nodeName);
    public CT_TblWidth get_top();
    public void set_top(CT_TblWidth value);
    public CT_TblWidth get_left();
    public void set_left(CT_TblWidth value);
    public CT_TblWidth get_bottom();
    public void set_bottom(CT_TblWidth value);
    public CT_TblWidth get_right();
    public void set_right(CT_TblWidth value);
    public bool IsSetLeft();
    public bool IsSetTop();
    public bool IsSetBottom();
    public bool IsSetRight();
    public CT_TblWidth AddNewLeft();
    public CT_TblWidth AddNewTop();
    public CT_TblWidth AddNewBottom();
    public CT_TblWidth AddNewRight();
}
[XmlTypeAttribute]
[XmlRootAttribute]
public class NPOI.OpenXmlFormats.Wordprocessing.CT_TblGrid : CT_TblGridBase {
    private CT_TblGridChange tblGridChangeField;
    [XmlElementAttribute]
public CT_TblGridChange tblGridChange { get; public set; }
    public static CT_TblGrid Parse(XmlNode node, XmlNamespaceManager namespaceManager);
    internal void Write(StreamWriter sw, string nodeName);
    public CT_TblGridChange get_tblGridChange();
    public void set_tblGridChange(CT_TblGridChange value);
    public CT_TblGridCol AddNewGridCol();
}
[XmlIncludeAttribute("NPOI.OpenXmlFormats.Wordprocessing.CT_TblGrid")]
[XmlTypeAttribute]
[XmlRootAttribute]
public class NPOI.OpenXmlFormats.Wordprocessing.CT_TblGridBase : object {
    private List`1<CT_TblGridCol> gridColField;
    [XmlElementAttribute("gridCol")]
public List`1<CT_TblGridCol> gridCol { get; public set; }
    public List`1<CT_TblGridCol> get_gridCol();
    public void set_gridCol(List`1<CT_TblGridCol> value);
}
[XmlTypeAttribute]
[XmlRootAttribute]
public class NPOI.OpenXmlFormats.Wordprocessing.CT_TblGridChange : CT_Markup {
    private List`1<CT_TblGridCol> tblGridField;
    [XmlArrayAttribute]
[XmlArrayItemAttribute("gridCol")]
public List`1<CT_TblGridCol> tblGrid { get; public set; }
    public static CT_TblGridChange Parse(XmlNode node, XmlNamespaceManager namespaceManager);
    internal void Write(StreamWriter sw, string nodeName);
    public List`1<CT_TblGridCol> get_tblGrid();
    public void set_tblGrid(List`1<CT_TblGridCol> value);
}
[XmlTypeAttribute]
[XmlRootAttribute]
public class NPOI.OpenXmlFormats.Wordprocessing.CT_TblGridCol : object {
    private ulong wField;
    private bool wFieldSpecified;
    [XmlAttributeAttribute]
public ulong w { get; public set; }
    public bool wSpecified { get; public set; }
    public static CT_TblGridCol Parse(XmlNode node, XmlNamespaceManager namespaceManager);
    internal void Write(StreamWriter sw, string nodeName);
    public ulong get_w();
    public void set_w(ulong value);
    public bool get_wSpecified();
    public void set_wSpecified(bool value);
}
[XmlTypeAttribute]
[XmlRootAttribute]
public class NPOI.OpenXmlFormats.Wordprocessing.CT_TblLayoutType : object {
    private ST_TblLayoutType typeField;
    private bool typeFieldSpecified;
    [XmlAttributeAttribute]
public ST_TblLayoutType type { get; public set; }
    [XmlIgnoreAttribute]
public bool typeSpecified { get; public set; }
    public static CT_TblLayoutType Parse(XmlNode node, XmlNamespaceManager namespaceManager);
    internal void Write(StreamWriter sw, string nodeName);
    public ST_TblLayoutType get_type();
    public void set_type(ST_TblLayoutType value);
    public bool get_typeSpecified();
    public void set_typeSpecified(bool value);
}
[XmlTypeAttribute]
[XmlRootAttribute]
public class NPOI.OpenXmlFormats.Wordprocessing.CT_TblOverlap : object {
    private ST_TblOverlap valField;
    [XmlAttributeAttribute]
public ST_TblOverlap val { get; public set; }
    public static CT_TblOverlap Parse(XmlNode node, XmlNamespaceManager namespaceManager);
    internal void Write(StreamWriter sw, string nodeName);
    public ST_TblOverlap get_val();
    public void set_val(ST_TblOverlap value);
}
[XmlTypeAttribute]
[XmlRootAttribute]
public class NPOI.OpenXmlFormats.Wordprocessing.CT_TblPPr : object {
    private ulong leftFromTextField;
    private bool leftFromTextFieldSpecified;
    private ulong rightFromTextField;
    private bool rightFromTextFieldSpecified;
    private ulong topFromTextField;
    private bool topFromTextFieldSpecified;
    private ulong bottomFromTextField;
    private bool bottomFromTextFieldSpecified;
    private ST_VAnchor vertAnchorField;
    private bool vertAnchorFieldSpecified;
    private ST_HAnchor horzAnchorField;
    private bool horzAnchorFieldSpecified;
    private ST_XAlign tblpXSpecField;
    private bool tblpXSpecFieldSpecified;
    private string tblpXField;
    private ST_YAlign tblpYSpecField;
    private bool tblpYSpecFieldSpecified;
    private string tblpYField;
    [XmlAttributeAttribute]
public ulong leftFromText { get; public set; }
    [XmlIgnoreAttribute]
public bool leftFromTextSpecified { get; public set; }
    [XmlAttributeAttribute]
public ulong rightFromText { get; public set; }
    [XmlIgnoreAttribute]
public bool rightFromTextSpecified { get; public set; }
    [XmlAttributeAttribute]
public ulong topFromText { get; public set; }
    [XmlIgnoreAttribute]
public bool topFromTextSpecified { get; public set; }
    [XmlAttributeAttribute]
public ulong bottomFromText { get; public set; }
    [XmlIgnoreAttribute]
public bool bottomFromTextSpecified { get; public set; }
    [XmlAttributeAttribute]
public ST_VAnchor vertAnchor { get; public set; }
    [XmlIgnoreAttribute]
public bool vertAnchorSpecified { get; public set; }
    [XmlAttributeAttribute]
public ST_HAnchor horzAnchor { get; public set; }
    [XmlIgnoreAttribute]
public bool horzAnchorSpecified { get; public set; }
    [XmlAttributeAttribute]
public ST_XAlign tblpXSpec { get; public set; }
    [XmlIgnoreAttribute]
public bool tblpXSpecSpecified { get; public set; }
    [XmlAttributeAttribute]
public string tblpX { get; public set; }
    [XmlAttributeAttribute]
public ST_YAlign tblpYSpec { get; public set; }
    [XmlIgnoreAttribute]
public bool tblpYSpecSpecified { get; public set; }
    [XmlAttributeAttribute]
public string tblpY { get; public set; }
    public static CT_TblPPr Parse(XmlNode node, XmlNamespaceManager namespaceManager);
    internal void Write(StreamWriter sw, string nodeName);
    public ulong get_leftFromText();
    public void set_leftFromText(ulong value);
    public bool get_leftFromTextSpecified();
    public void set_leftFromTextSpecified(bool value);
    public ulong get_rightFromText();
    public void set_rightFromText(ulong value);
    public bool get_rightFromTextSpecified();
    public void set_rightFromTextSpecified(bool value);
    public ulong get_topFromText();
    public void set_topFromText(ulong value);
    public bool get_topFromTextSpecified();
    public void set_topFromTextSpecified(bool value);
    public ulong get_bottomFromText();
    public void set_bottomFromText(ulong value);
    public bool get_bottomFromTextSpecified();
    public void set_bottomFromTextSpecified(bool value);
    public ST_VAnchor get_vertAnchor();
    public void set_vertAnchor(ST_VAnchor value);
    public bool get_vertAnchorSpecified();
    public void set_vertAnchorSpecified(bool value);
    public ST_HAnchor get_horzAnchor();
    public void set_horzAnchor(ST_HAnchor value);
    public bool get_horzAnchorSpecified();
    public void set_horzAnchorSpecified(bool value);
    public ST_XAlign get_tblpXSpec();
    public void set_tblpXSpec(ST_XAlign value);
    public bool get_tblpXSpecSpecified();
    public void set_tblpXSpecSpecified(bool value);
    public string get_tblpX();
    public void set_tblpX(string value);
    public ST_YAlign get_tblpYSpec();
    public void set_tblpYSpec(ST_YAlign value);
    public bool get_tblpYSpecSpecified();
    public void set_tblpYSpecSpecified(bool value);
    public string get_tblpY();
    public void set_tblpY(string value);
}
[XmlTypeAttribute]
[XmlRootAttribute]
public class NPOI.OpenXmlFormats.Wordprocessing.CT_TblPr : CT_TblPrBase {
    private CT_TblPrChange tblPrChangeField;
    [XmlElementAttribute]
public CT_TblPrChange tblPrChange { get; public set; }
    public static CT_TblPr Parse(XmlNode node, XmlNamespaceManager namespaceManager);
    internal void Write(StreamWriter sw, string nodeName);
    public CT_TblPrChange get_tblPrChange();
    public void set_tblPrChange(CT_TblPrChange value);
    public CT_TblLayoutType AddNewTblLayout();
    public CT_TblPPr AddNewTblPPr();
}
[XmlIncludeAttribute("NPOI.OpenXmlFormats.Wordprocessing.CT_TblPr")]
[XmlTypeAttribute]
[XmlRootAttribute]
public class NPOI.OpenXmlFormats.Wordprocessing.CT_TblPrBase : object {
    private CT_String tblStyleField;
    private CT_TblPPr tblpPrField;
    private CT_TblOverlap tblOverlapField;
    private CT_OnOff bidiVisualField;
    private CT_DecimalNumber tblStyleRowBandSizeField;
    private CT_DecimalNumber tblStyleColBandSizeField;
    private CT_TblWidth tblWField;
    private CT_Jc jcField;
    private CT_TblWidth tblCellSpacingField;
    private CT_TblWidth tblIndField;
    private CT_TblBorders tblBordersField;
    private CT_Shd shdField;
    private CT_TblLayoutType tblLayoutField;
    private CT_TblCellMar tblCellMarField;
    private CT_ShortHexNumber tblLookField;
    private CT_String tblCaptionField;
    private CT_String tblDescriptionField;
    [XmlElementAttribute]
public CT_String tblStyle { get; public set; }
    [XmlElementAttribute]
public CT_TblPPr tblpPr { get; public set; }
    [XmlElementAttribute]
public CT_TblOverlap tblOverlap { get; public set; }
    [XmlElementAttribute]
public CT_OnOff bidiVisual { get; public set; }
    [XmlElementAttribute]
public CT_DecimalNumber tblStyleRowBandSize { get; public set; }
    [XmlElementAttribute]
public CT_DecimalNumber tblStyleColBandSize { get; public set; }
    [XmlElementAttribute]
public CT_TblWidth tblW { get; public set; }
    [XmlElementAttribute]
public CT_Jc jc { get; public set; }
    [XmlElementAttribute]
public CT_TblWidth tblCellSpacing { get; public set; }
    [XmlElementAttribute]
public CT_TblWidth tblInd { get; public set; }
    [XmlElementAttribute]
public CT_TblBorders tblBorders { get; public set; }
    [XmlElementAttribute]
public CT_Shd shd { get; public set; }
    [XmlElementAttribute]
public CT_TblLayoutType tblLayout { get; public set; }
    [XmlElementAttribute]
public CT_TblCellMar tblCellMar { get; public set; }
    [XmlElementAttribute]
public CT_ShortHexNumber tblLook { get; public set; }
    [XmlElementAttribute]
public CT_String tblCaption { get; public set; }
    [XmlElementAttribute]
public CT_String tblDescription { get; public set; }
    public static CT_TblPrBase Parse(XmlNode node, XmlNamespaceManager namespaceManager);
    internal void Write(StreamWriter sw, string nodeName);
    public CT_String get_tblStyle();
    public void set_tblStyle(CT_String value);
    public CT_TblPPr get_tblpPr();
    public void set_tblpPr(CT_TblPPr value);
    public CT_TblOverlap get_tblOverlap();
    public void set_tblOverlap(CT_TblOverlap value);
    public CT_OnOff get_bidiVisual();
    public void set_bidiVisual(CT_OnOff value);
    public CT_DecimalNumber get_tblStyleRowBandSize();
    public void set_tblStyleRowBandSize(CT_DecimalNumber value);
    public CT_DecimalNumber get_tblStyleColBandSize();
    public void set_tblStyleColBandSize(CT_DecimalNumber value);
    public CT_TblWidth get_tblW();
    public void set_tblW(CT_TblWidth value);
    public CT_Jc get_jc();
    public void set_jc(CT_Jc value);
    public CT_TblWidth get_tblCellSpacing();
    public void set_tblCellSpacing(CT_TblWidth value);
    public CT_TblWidth get_tblInd();
    public void set_tblInd(CT_TblWidth value);
    public CT_TblBorders get_tblBorders();
    public void set_tblBorders(CT_TblBorders value);
    public CT_Shd get_shd();
    public void set_shd(CT_Shd value);
    public CT_TblLayoutType get_tblLayout();
    public void set_tblLayout(CT_TblLayoutType value);
    public CT_TblCellMar get_tblCellMar();
    public void set_tblCellMar(CT_TblCellMar value);
    public CT_ShortHexNumber get_tblLook();
    public void set_tblLook(CT_ShortHexNumber value);
    public CT_String get_tblCaption();
    public void set_tblCaption(CT_String value);
    public CT_String get_tblDescription();
    public void set_tblDescription(CT_String value);
    public bool IsSetTblW();
    public CT_TblWidth AddNewTblW();
    public CT_TblBorders AddNewTblBorders();
    public CT_String AddNewTblStyle();
    public bool IsSetTblBorders();
    public bool IsSetTblStyleRowBandSize();
    public CT_DecimalNumber AddNewTblStyleRowBandSize();
    public bool IsSetTblStyleColBandSize();
    public CT_DecimalNumber AddNewTblStyleColBandSize();
    public bool IsSetTblCellMar();
    public CT_TblCellMar AddNewTblCellMar();
}
[XmlTypeAttribute]
[XmlRootAttribute]
public class NPOI.OpenXmlFormats.Wordprocessing.CT_TblPrChange : CT_TrackChange {
    private CT_TblPrBase tblPrField;
    [XmlElementAttribute]
public CT_TblPrBase tblPr { get; public set; }
    public static CT_TblPrChange Parse(XmlNode node, XmlNamespaceManager namespaceManager);
    internal void Write(StreamWriter sw, string nodeName);
    public CT_TblPrBase get_tblPr();
    public void set_tblPr(CT_TblPrBase value);
}
[XmlTypeAttribute]
[XmlRootAttribute]
public class NPOI.OpenXmlFormats.Wordprocessing.CT_TblPrEx : CT_TblPrExBase {
    private CT_TblPrExChange tblPrExChangeField;
    [XmlElementAttribute]
public CT_TblPrExChange tblPrExChange { get; public set; }
    public static CT_TblPrEx Parse(XmlNode node, XmlNamespaceManager namespaceManager);
    internal void Write(StreamWriter sw, string nodeName);
    public CT_TblPrExChange get_tblPrExChange();
    public void set_tblPrExChange(CT_TblPrExChange value);
}
[XmlIncludeAttribute("NPOI.OpenXmlFormats.Wordprocessing.CT_TblPrEx")]
[XmlTypeAttribute]
[XmlRootAttribute]
public class NPOI.OpenXmlFormats.Wordprocessing.CT_TblPrExBase : object {
    private CT_TblWidth tblWField;
    private CT_Jc jcField;
    private CT_TblWidth tblCellSpacingField;
    private CT_TblWidth tblIndField;
    private CT_TblBorders tblBordersField;
    private CT_Shd shdField;
    private CT_TblLayoutType tblLayoutField;
    private CT_TblCellMar tblCellMarField;
    private CT_ShortHexNumber tblLookField;
    [XmlElementAttribute]
public CT_TblWidth tblW { get; public set; }
    [XmlElementAttribute]
public CT_Jc jc { get; public set; }
    [XmlElementAttribute]
public CT_TblWidth tblCellSpacing { get; public set; }
    [XmlElementAttribute]
public CT_TblWidth tblInd { get; public set; }
    [XmlElementAttribute]
public CT_TblBorders tblBorders { get; public set; }
    [XmlElementAttribute]
public CT_Shd shd { get; public set; }
    [XmlElementAttribute]
public CT_TblLayoutType tblLayout { get; public set; }
    [XmlElementAttribute]
public CT_TblCellMar tblCellMar { get; public set; }
    [XmlElementAttribute]
public CT_ShortHexNumber tblLook { get; public set; }
    public static CT_TblPrExBase Parse(XmlNode node, XmlNamespaceManager namespaceManager);
    internal void Write(StreamWriter sw, string nodeName);
    public CT_TblWidth get_tblW();
    public void set_tblW(CT_TblWidth value);
    public CT_Jc get_jc();
    public void set_jc(CT_Jc value);
    public CT_TblWidth get_tblCellSpacing();
    public void set_tblCellSpacing(CT_TblWidth value);
    public CT_TblWidth get_tblInd();
    public void set_tblInd(CT_TblWidth value);
    public CT_TblBorders get_tblBorders();
    public void set_tblBorders(CT_TblBorders value);
    public CT_Shd get_shd();
    public void set_shd(CT_Shd value);
    public CT_TblLayoutType get_tblLayout();
    public void set_tblLayout(CT_TblLayoutType value);
    public CT_TblCellMar get_tblCellMar();
    public void set_tblCellMar(CT_TblCellMar value);
    public CT_ShortHexNumber get_tblLook();
    public void set_tblLook(CT_ShortHexNumber value);
}
[XmlTypeAttribute]
[XmlRootAttribute]
public class NPOI.OpenXmlFormats.Wordprocessing.CT_TblPrExChange : CT_TrackChange {
    private CT_TblPrExBase tblPrExField;
    [XmlElementAttribute]
public CT_TblPrExBase tblPrEx { get; public set; }
    public static CT_TblPrExChange Parse(XmlNode node, XmlNamespaceManager namespaceManager);
    internal void Write(StreamWriter sw, string nodeName);
    public CT_TblPrExBase get_tblPrEx();
    public void set_tblPrEx(CT_TblPrExBase value);
}
[XmlTypeAttribute]
[XmlRootAttribute]
public class NPOI.OpenXmlFormats.Wordprocessing.CT_TblStylePr : object {
    private CT_PPr pPrField;
    private CT_RPr rPrField;
    private CT_TblPrBase tblPrField;
    private CT_TrPr trPrField;
    private CT_TcPr tcPrField;
    private ST_TblStyleOverrideType typeField;
    [XmlElementAttribute]
public CT_PPr pPr { get; public set; }
    [XmlElementAttribute]
public CT_RPr rPr { get; public set; }
    [XmlElementAttribute]
public CT_TblPrBase tblPr { get; public set; }
    [XmlElementAttribute]
public CT_TrPr trPr { get; public set; }
    [XmlElementAttribute]
public CT_TcPr tcPr { get; public set; }
    [XmlAttributeAttribute]
public ST_TblStyleOverrideType type { get; public set; }
    public static CT_TblStylePr Parse(XmlNode node, XmlNamespaceManager namespaceManager);
    internal void Write(StreamWriter sw, string nodeName);
    public CT_PPr get_pPr();
    public void set_pPr(CT_PPr value);
    public CT_RPr get_rPr();
    public void set_rPr(CT_RPr value);
    public CT_TblPrBase get_tblPr();
    public void set_tblPr(CT_TblPrBase value);
    public CT_TrPr get_trPr();
    public void set_trPr(CT_TrPr value);
    public CT_TcPr get_tcPr();
    public void set_tcPr(CT_TcPr value);
    public ST_TblStyleOverrideType get_type();
    public void set_type(ST_TblStyleOverrideType value);
}
[XmlTypeAttribute]
[XmlRootAttribute]
public class NPOI.OpenXmlFormats.Wordprocessing.CT_TblWidth : object {
    private string wField;
    private ST_TblWidth typeField;
    private bool typeFieldSpecified;
    [XmlAttributeAttribute]
public string w { get; public set; }
    [XmlAttributeAttribute]
public ST_TblWidth type { get; public set; }
    [XmlIgnoreAttribute]
public bool typeSpecified { get; public set; }
    public static CT_TblWidth Parse(XmlNode node, XmlNamespaceManager namespaceManager);
    internal void Write(StreamWriter sw, string nodeName);
    public string get_w();
    public void set_w(string value);
    public ST_TblWidth get_type();
    public void set_type(ST_TblWidth value);
    public bool get_typeSpecified();
    public void set_typeSpecified(bool value);
}
[XmlTypeAttribute]
[XmlRootAttribute]
public class NPOI.OpenXmlFormats.Wordprocessing.CT_Tc : object {
    private CT_TcPr tcPrField;
    private ArrayList itemsField;
    private List`1<ItemsChoiceTableCellType> itemsElementNameField;
    private object parent;
    [XmlElementAttribute]
public CT_TcPr tcPr { get; public set; }
    [XmlElementAttribute("oMath", "NPOI.OpenXmlFormats.Shared.CT_OMath")]
[XmlElementAttribute("oMathPara", "NPOI.OpenXmlFormats.Shared.CT_OMathPara")]
[XmlElementAttribute("altChunk", "NPOI.OpenXmlFormats.Wordprocessing.CT_AltChunk")]
[XmlElementAttribute("bookmarkEnd", "NPOI.OpenXmlFormats.Wordprocessing.CT_MarkupRange")]
[XmlElementAttribute("bookmarkStart", "NPOI.OpenXmlFormats.Wordprocessing.CT_Bookmark")]
[XmlElementAttribute("commentRangeEnd", "NPOI.OpenXmlFormats.Wordprocessing.CT_MarkupRange")]
[XmlElementAttribute("commentRangeStart", "NPOI.OpenXmlFormats.Wordprocessing.CT_MarkupRange")]
[XmlElementAttribute("customXml", "NPOI.OpenXmlFormats.Wordprocessing.CT_CustomXmlBlock")]
[XmlElementAttribute("customXmlDelRangeEnd", "NPOI.OpenXmlFormats.Wordprocessing.CT_Markup")]
[XmlElementAttribute("customXmlDelRangeStart", "NPOI.OpenXmlFormats.Wordprocessing.CT_TrackChange")]
[XmlElementAttribute("customXmlInsRangeEnd", "NPOI.OpenXmlFormats.Wordprocessing.CT_Markup")]
[XmlElementAttribute("customXmlInsRangeStart", "NPOI.OpenXmlFormats.Wordprocessing.CT_TrackChange")]
[XmlElementAttribute("customXmlMoveFromRangeEnd", "NPOI.OpenXmlFormats.Wordprocessing.CT_Markup")]
[XmlElementAttribute("customXmlMoveFromRangeStart", "NPOI.OpenXmlFormats.Wordprocessing.CT_TrackChange")]
[XmlElementAttribute("customXmlMoveToRangeEnd", "NPOI.OpenXmlFormats.Wordprocessing.CT_Markup")]
[XmlElementAttribute("customXmlMoveToRangeStart", "NPOI.OpenXmlFormats.Wordprocessing.CT_TrackChange")]
[XmlElementAttribute("del", "NPOI.OpenXmlFormats.Wordprocessing.CT_RunTrackChange")]
[XmlElementAttribute("ins", "NPOI.OpenXmlFormats.Wordprocessing.CT_RunTrackChange")]
[XmlElementAttribute("moveFrom", "NPOI.OpenXmlFormats.Wordprocessing.CT_RunTrackChange")]
[XmlElementAttribute("moveFromRangeEnd", "NPOI.OpenXmlFormats.Wordprocessing.CT_MarkupRange")]
[XmlElementAttribute("moveFromRangeStart", "NPOI.OpenXmlFormats.Wordprocessing.CT_MoveBookmark")]
[XmlElementAttribute("moveTo", "NPOI.OpenXmlFormats.Wordprocessing.CT_RunTrackChange")]
[XmlElementAttribute("moveToRangeEnd", "NPOI.OpenXmlFormats.Wordprocessing.CT_MarkupRange")]
[XmlElementAttribute("moveToRangeStart", "NPOI.OpenXmlFormats.Wordprocessing.CT_MoveBookmark")]
[XmlElementAttribute("p", "NPOI.OpenXmlFormats.Wordprocessing.CT_P")]
[XmlElementAttribute("permEnd", "NPOI.OpenXmlFormats.Wordprocessing.CT_Perm")]
[XmlElementAttribute("permStart", "NPOI.OpenXmlFormats.Wordprocessing.CT_PermStart")]
[XmlElementAttribute("proofErr", "NPOI.OpenXmlFormats.Wordprocessing.CT_ProofErr")]
[XmlElementAttribute("sdt", "NPOI.OpenXmlFormats.Wordprocessing.CT_SdtBlock")]
[XmlElementAttribute("tbl", "NPOI.OpenXmlFormats.Wordprocessing.CT_Tbl")]
[XmlChoiceIdentifierAttribute("ItemsElementName")]
public ArrayList Items { get; public set; }
    [XmlElementAttribute("ItemsElementName")]
[XmlIgnoreAttribute]
public List`1<ItemsChoiceTableCellType> ItemsElementName { get; public set; }
    [XmlIgnoreAttribute]
public object Parent { get; }
    public CT_TcPr get_tcPr();
    public void set_tcPr(CT_TcPr value);
    public static CT_Tc Parse(XmlNode node, XmlNamespaceManager namespaceManager, object parent);
    internal void Write(StreamWriter sw, string nodeName);
    public ArrayList get_Items();
    public void set_Items(ArrayList value);
    public List`1<ItemsChoiceTableCellType> get_ItemsElementName();
    public void set_ItemsElementName(List`1<ItemsChoiceTableCellType> value);
    public object get_Parent();
    private List`1<T> GetObjectList(ItemsChoiceTableCellType type);
    private int SizeOfArray(ItemsChoiceTableCellType type);
    private T GetObjectArray(int p, ItemsChoiceTableCellType type);
    private int GetObjectIndex(ItemsChoiceTableCellType type, int p);
    private void RemoveObject(ItemsChoiceTableCellType type, int p);
    private void SetObject(ItemsChoiceTableCellType type, int p, T obj);
    private T AddNewObject(ItemsChoiceTableCellType type);
    public CT_P AddNewP();
    public IList`1<CT_P> GetPList();
    public int SizeOfPArray();
    public void SetPArray(int p, CT_P cT_P);
    public void RemoveP(int pos);
    public CT_P GetPArray(int p);
    public IList`1<CT_Tbl> GetTblList();
    public CT_Tbl GetTblArray(int p);
    public CT_TcPr AddNewTcPr();
    public bool IsSetTcPr();
    public CT_Tbl AddNewTbl();
}
[XmlTypeAttribute]
[XmlRootAttribute]
public class NPOI.OpenXmlFormats.Wordprocessing.CT_TcBorders : object {
    private CT_Border topField;
    private CT_Border leftField;
    private CT_Border bottomField;
    private CT_Border rightField;
    private CT_Border insideHField;
    private CT_Border insideVField;
    private CT_Border tl2brField;
    private CT_Border tr2blField;
    [XmlElementAttribute]
public CT_Border top { get; public set; }
    [XmlElementAttribute]
public CT_Border left { get; public set; }
    [XmlElementAttribute]
public CT_Border bottom { get; public set; }
    [XmlElementAttribute]
public CT_Border right { get; public set; }
    [XmlElementAttribute]
public CT_Border insideH { get; public set; }
    [XmlElementAttribute]
public CT_Border insideV { get; public set; }
    [XmlElementAttribute]
public CT_Border tl2br { get; public set; }
    [XmlElementAttribute]
public CT_Border tr2bl { get; public set; }
    public static CT_TcBorders Parse(XmlNode node, XmlNamespaceManager namespaceManager);
    internal void Write(StreamWriter sw, string nodeName);
    public CT_Border get_top();
    public void set_top(CT_Border value);
    public CT_Border get_left();
    public void set_left(CT_Border value);
    public CT_Border get_bottom();
    public void set_bottom(CT_Border value);
    public CT_Border get_right();
    public void set_right(CT_Border value);
    public CT_Border get_insideH();
    public void set_insideH(CT_Border value);
    public CT_Border get_insideV();
    public void set_insideV(CT_Border value);
    public CT_Border get_tl2br();
    public void set_tl2br(CT_Border value);
    public CT_Border get_tr2bl();
    public void set_tr2bl(CT_Border value);
}
[XmlTypeAttribute]
[XmlRootAttribute]
public class NPOI.OpenXmlFormats.Wordprocessing.CT_TcMar : object {
    private CT_TblWidth topField;
    private CT_TblWidth leftField;
    private CT_TblWidth bottomField;
    private CT_TblWidth rightField;
    [XmlElementAttribute]
public CT_TblWidth top { get; public set; }
    [XmlElementAttribute]
public CT_TblWidth left { get; public set; }
    [XmlElementAttribute]
public CT_TblWidth bottom { get; public set; }
    [XmlElementAttribute]
public CT_TblWidth right { get; public set; }
    public static CT_TcMar Parse(XmlNode node, XmlNamespaceManager namespaceManager);
    internal void Write(StreamWriter sw, string nodeName);
    public CT_TblWidth get_top();
    public void set_top(CT_TblWidth value);
    public CT_TblWidth get_left();
    public void set_left(CT_TblWidth value);
    public CT_TblWidth get_bottom();
    public void set_bottom(CT_TblWidth value);
    public CT_TblWidth get_right();
    public void set_right(CT_TblWidth value);
}
[XmlTypeAttribute]
[XmlRootAttribute]
public class NPOI.OpenXmlFormats.Wordprocessing.CT_TcPr : CT_TcPrInner {
    private CT_TcPrChange tcPrChangeField;
    [XmlElementAttribute]
public CT_TcPrChange tcPrChange { get; public set; }
    public static CT_TcPr Parse(XmlNode node, XmlNamespaceManager namespaceManager);
    public CT_TblWidth AddNewTcW();
    internal void Write(StreamWriter sw, string nodeName);
    public CT_TcPrChange get_tcPrChange();
    public void set_tcPrChange(CT_TcPrChange value);
}
[XmlIncludeAttribute("NPOI.OpenXmlFormats.Wordprocessing.CT_TcPrInner")]
[XmlIncludeAttribute("NPOI.OpenXmlFormats.Wordprocessing.CT_TcPr")]
[XmlTypeAttribute]
[XmlRootAttribute]
public class NPOI.OpenXmlFormats.Wordprocessing.CT_TcPrBase : object {
    private CT_Cnf cnfStyleField;
    private CT_TblWidth tcWField;
    private CT_DecimalNumber gridSpanField;
    private CT_HMerge hMergeField;
    private CT_VMerge vMergeField;
    private CT_TcBorders tcBordersField;
    private CT_Shd shdField;
    private CT_OnOff noWrapField;
    private CT_TcMar tcMarField;
    private CT_TextDirection textDirectionField;
    private CT_OnOff tcFitTextField;
    private CT_VerticalJc vAlignField;
    private CT_OnOff hideMarkField;
    [XmlElementAttribute]
public CT_Cnf cnfStyle { get; public set; }
    [XmlElementAttribute]
public CT_TblWidth tcW { get; public set; }
    [XmlElementAttribute]
public CT_DecimalNumber gridSpan { get; public set; }
    [XmlElementAttribute]
public CT_HMerge hMerge { get; public set; }
    [XmlElementAttribute]
public CT_VMerge vMerge { get; public set; }
    [XmlElementAttribute]
public CT_TcBorders tcBorders { get; public set; }
    [XmlElementAttribute]
public CT_Shd shd { get; public set; }
    [XmlElementAttribute]
public CT_OnOff noWrap { get; public set; }
    [XmlElementAttribute]
public CT_TcMar tcMar { get; public set; }
    [XmlElementAttribute]
public CT_TextDirection textDirection { get; public set; }
    [XmlElementAttribute]
public CT_OnOff tcFitText { get; public set; }
    [XmlElementAttribute]
public CT_VerticalJc vAlign { get; public set; }
    [XmlElementAttribute]
public CT_OnOff hideMark { get; public set; }
    public CT_Cnf get_cnfStyle();
    public void set_cnfStyle(CT_Cnf value);
    public CT_TblWidth get_tcW();
    public void set_tcW(CT_TblWidth value);
    public CT_DecimalNumber get_gridSpan();
    public void set_gridSpan(CT_DecimalNumber value);
    public CT_HMerge get_hMerge();
    public void set_hMerge(CT_HMerge value);
    public CT_VMerge get_vMerge();
    public void set_vMerge(CT_VMerge value);
    public CT_TcBorders get_tcBorders();
    public void set_tcBorders(CT_TcBorders value);
    public CT_Shd get_shd();
    public void set_shd(CT_Shd value);
    public CT_OnOff get_noWrap();
    public void set_noWrap(CT_OnOff value);
    public CT_TcMar get_tcMar();
    public void set_tcMar(CT_TcMar value);
    public CT_TextDirection get_textDirection();
    public void set_textDirection(CT_TextDirection value);
    public CT_OnOff get_tcFitText();
    public void set_tcFitText(CT_OnOff value);
    public CT_VerticalJc get_vAlign();
    public void set_vAlign(CT_VerticalJc value);
    public CT_OnOff get_hideMark();
    public void set_hideMark(CT_OnOff value);
    public CT_Shd AddNewShd();
    public bool IsSetShd();
    public CT_VerticalJc AddNewVAlign();
    public CT_VMerge AddNewVMerge();
    public CT_TcBorders AddNewTcBorders();
    public CT_HMerge AddNewHMerge();
    public CT_DecimalNumber AddNewGridspan();
}
[XmlTypeAttribute]
[XmlRootAttribute]
public class NPOI.OpenXmlFormats.Wordprocessing.CT_TcPrChange : CT_TrackChange {
    private CT_TcPrInner tcPrField;
    [XmlElementAttribute]
public CT_TcPrInner tcPr { get; public set; }
    public static CT_TcPrChange Parse(XmlNode node, XmlNamespaceManager namespaceManager);
    internal void Write(StreamWriter sw, string nodeName);
    public CT_TcPrInner get_tcPr();
    public void set_tcPr(CT_TcPrInner value);
}
[XmlIncludeAttribute("NPOI.OpenXmlFormats.Wordprocessing.CT_TcPr")]
[XmlTypeAttribute]
[XmlRootAttribute]
public class NPOI.OpenXmlFormats.Wordprocessing.CT_TcPrInner : CT_TcPrBase {
    private CT_TrackChange cellInsField;
    private CT_TrackChange cellDelField;
    private CT_CellMergeTrackChange cellMergeField;
    [XmlElementAttribute]
public CT_TrackChange cellIns { get; public set; }
    [XmlElementAttribute]
public CT_TrackChange cellDel { get; public set; }
    [XmlElementAttribute]
public CT_CellMergeTrackChange cellMerge { get; public set; }
    public static CT_TcPrInner Parse(XmlNode node, XmlNamespaceManager namespaceManager);
    internal void Write(StreamWriter sw, string nodeName);
    public CT_TrackChange get_cellIns();
    public void set_cellIns(CT_TrackChange value);
    public CT_TrackChange get_cellDel();
    public void set_cellDel(CT_TrackChange value);
    public CT_CellMergeTrackChange get_cellMerge();
    public void set_cellMerge(CT_CellMergeTrackChange value);
}
[XmlTypeAttribute]
[XmlRootAttribute]
public class NPOI.OpenXmlFormats.Wordprocessing.CT_Text : object {
    private string spaceField;
    private string valueField;
    [XmlAttributeAttribute]
public string space { get; public set; }
    [XmlTextAttribute]
public string Value { get; public set; }
    public static CT_Text Parse(XmlNode node, XmlNamespaceManager namespaceManager);
    internal void Write(StreamWriter sw, string nodeName);
    public string get_space();
    public void set_space(string value);
    public string get_Value();
    public void set_Value(string value);
}
[XmlTypeAttribute]
[XmlRootAttribute]
public class NPOI.OpenXmlFormats.Wordprocessing.CT_TextAlignment : object {
    private ST_TextAlignment valField;
    [XmlAttributeAttribute]
public ST_TextAlignment val { get; public set; }
    public static CT_TextAlignment Parse(XmlNode node, XmlNamespaceManager namespaceManager);
    internal void Write(StreamWriter sw, string nodeName);
    public ST_TextAlignment get_val();
    public void set_val(ST_TextAlignment value);
}
[XmlTypeAttribute]
[XmlRootAttribute]
public class NPOI.OpenXmlFormats.Wordprocessing.CT_TextboxTightWrap : object {
    private ST_TextboxTightWrap valField;
    [XmlAttributeAttribute]
public ST_TextboxTightWrap val { get; public set; }
    public static CT_TextboxTightWrap Parse(XmlNode node, XmlNamespaceManager namespaceManager);
    internal void Write(StreamWriter sw, string nodeName);
    public ST_TextboxTightWrap get_val();
    public void set_val(ST_TextboxTightWrap value);
}
[XmlTypeAttribute]
[XmlRootAttribute]
public class NPOI.OpenXmlFormats.Wordprocessing.CT_TextDirection : object {
    private ST_TextDirection valField;
    [XmlAttributeAttribute]
public ST_TextDirection val { get; public set; }
    public static CT_TextDirection Parse(XmlNode node, XmlNamespaceManager namespaceManager);
    internal void Write(StreamWriter sw, string nodeName);
    public ST_TextDirection get_val();
    public void set_val(ST_TextDirection value);
}
[XmlTypeAttribute]
[XmlRootAttribute]
public class NPOI.OpenXmlFormats.Wordprocessing.CT_TextEffect : object {
    private ST_TextEffect valField;
    [XmlAttributeAttribute]
public ST_TextEffect val { get; public set; }
    public static CT_TextEffect Parse(XmlNode node, XmlNamespaceManager namespaceManager);
    internal void Write(StreamWriter sw, string nodeName);
    public ST_TextEffect get_val();
    public void set_val(ST_TextEffect value);
}
[XmlTypeAttribute]
[XmlRootAttribute]
public class NPOI.OpenXmlFormats.Wordprocessing.CT_TextScale : object {
    private string valField;
    [XmlAttributeAttribute]
public string val { get; public set; }
    public static CT_TextScale Parse(XmlNode node, XmlNamespaceManager namespaceManager);
    internal void Write(StreamWriter sw, string nodeName);
    public string get_val();
    public void set_val(string value);
}
[XmlIncludeAttribute("NPOI.OpenXmlFormats.Wordprocessing.CT_RunTrackChange")]
[XmlIncludeAttribute("NPOI.OpenXmlFormats.Wordprocessing.CT_RPrChange")]
[XmlIncludeAttribute("NPOI.OpenXmlFormats.Wordprocessing.CT_ParaRPrChange")]
[XmlIncludeAttribute("NPOI.OpenXmlFormats.Wordprocessing.CT_PPrChange")]
[XmlIncludeAttribute("NPOI.OpenXmlFormats.Wordprocessing.CT_SectPrChange")]
[XmlIncludeAttribute("NPOI.OpenXmlFormats.Wordprocessing.CT_TblPrChange")]
[XmlIncludeAttribute("NPOI.OpenXmlFormats.Wordprocessing.CT_TrPrChange")]
[XmlIncludeAttribute("NPOI.OpenXmlFormats.Wordprocessing.CT_TcPrChange")]
[XmlIncludeAttribute("NPOI.OpenXmlFormats.Wordprocessing.CT_TblPrExChange")]
[XmlIncludeAttribute("NPOI.OpenXmlFormats.Wordprocessing.CT_TrackChangeNumbering")]
[XmlIncludeAttribute("NPOI.OpenXmlFormats.Wordprocessing.CT_Comment")]
[XmlIncludeAttribute("NPOI.OpenXmlFormats.Wordprocessing.CT_TrackChangeRange")]
[XmlIncludeAttribute("NPOI.OpenXmlFormats.Wordprocessing.CT_CellMergeTrackChange")]
[XmlTypeAttribute]
[XmlRootAttribute]
public class NPOI.OpenXmlFormats.Wordprocessing.CT_TrackChange : CT_Markup {
    private string authorField;
    private string dateField;
    private bool dateFieldSpecified;
    [XmlAttributeAttribute]
public string author { get; public set; }
    [XmlAttributeAttribute]
public string date { get; public set; }
    [XmlIgnoreAttribute]
public bool dateSpecified { get; public set; }
    public string get_author();
    public void set_author(string value);
    public string get_date();
    public void set_date(string value);
    public bool get_dateSpecified();
    public void set_dateSpecified(bool value);
    public static CT_TrackChange Parse(XmlNode node, XmlNamespaceManager namespaceManager);
    internal void Write(StreamWriter sw, string nodeName);
}
[XmlTypeAttribute]
[XmlRootAttribute]
public class NPOI.OpenXmlFormats.Wordprocessing.CT_TrackChangeNumbering : CT_TrackChange {
    private string originalField;
    [XmlAttributeAttribute]
public string original { get; public set; }
    public static CT_TrackChangeNumbering Parse(XmlNode node, XmlNamespaceManager namespaceManager);
    internal void Write(StreamWriter sw, string nodeName);
    public string get_original();
    public void set_original(string value);
}
[XmlTypeAttribute]
[XmlRootAttribute]
public class NPOI.OpenXmlFormats.Wordprocessing.CT_TrackChangeRange : CT_TrackChange {
    private ST_DisplacedByCustomXml displacedByCustomXmlField;
    private bool displacedByCustomXmlFieldSpecified;
    [XmlAttributeAttribute]
public ST_DisplacedByCustomXml displacedByCustomXml { get; public set; }
    [XmlIgnoreAttribute]
public bool displacedByCustomXmlSpecified { get; public set; }
    public ST_DisplacedByCustomXml get_displacedByCustomXml();
    public void set_displacedByCustomXml(ST_DisplacedByCustomXml value);
    public bool get_displacedByCustomXmlSpecified();
    public void set_displacedByCustomXmlSpecified(bool value);
}
[XmlTypeAttribute]
[XmlRootAttribute]
public class NPOI.OpenXmlFormats.Wordprocessing.CT_TrackChangesView : object {
    private ST_OnOff markupField;
    private bool markupFieldSpecified;
    private ST_OnOff commentsField;
    private bool commentsFieldSpecified;
    private ST_OnOff insDelField;
    private bool insDelFieldSpecified;
    private ST_OnOff formattingField;
    private bool formattingFieldSpecified;
    private ST_OnOff inkAnnotationsField;
    private bool inkAnnotationsFieldSpecified;
    [XmlAttributeAttribute]
public ST_OnOff markup { get; public set; }
    [XmlIgnoreAttribute]
public bool markupSpecified { get; public set; }
    [XmlAttributeAttribute]
public ST_OnOff comments { get; public set; }
    [XmlIgnoreAttribute]
public bool commentsSpecified { get; public set; }
    [XmlAttributeAttribute]
public ST_OnOff insDel { get; public set; }
    [XmlIgnoreAttribute]
public bool insDelSpecified { get; public set; }
    [XmlAttributeAttribute]
public ST_OnOff formatting { get; public set; }
    [XmlIgnoreAttribute]
public bool formattingSpecified { get; public set; }
    [XmlAttributeAttribute]
public ST_OnOff inkAnnotations { get; public set; }
    [XmlIgnoreAttribute]
public bool inkAnnotationsSpecified { get; public set; }
    public static CT_TrackChangesView Parse(XmlNode node, XmlNamespaceManager namespaceManager);
    internal void Write(StreamWriter sw, string nodeName);
    public ST_OnOff get_markup();
    public void set_markup(ST_OnOff value);
    public bool get_markupSpecified();
    public void set_markupSpecified(bool value);
    public ST_OnOff get_comments();
    public void set_comments(ST_OnOff value);
    public bool get_commentsSpecified();
    public void set_commentsSpecified(bool value);
    public ST_OnOff get_insDel();
    public void set_insDel(ST_OnOff value);
    public bool get_insDelSpecified();
    public void set_insDelSpecified(bool value);
    public ST_OnOff get_formatting();
    public void set_formatting(ST_OnOff value);
    public bool get_formattingSpecified();
    public void set_formattingSpecified(bool value);
    public ST_OnOff get_inkAnnotations();
    public void set_inkAnnotations(ST_OnOff value);
    public bool get_inkAnnotationsSpecified();
    public void set_inkAnnotationsSpecified(bool value);
}
[XmlTypeAttribute]
[XmlRootAttribute]
public class NPOI.OpenXmlFormats.Wordprocessing.CT_TrPr : CT_TrPrBase {
    private CT_TrackChange insField;
    private CT_TrackChange delField;
    private CT_TrPrChange trPrChangeField;
    [XmlElementAttribute]
public CT_TrackChange ins { get; public set; }
    [XmlElementAttribute]
public CT_TrackChange del { get; public set; }
    [XmlElementAttribute]
public CT_TrPrChange trPrChange { get; public set; }
    public static CT_TrPr Parse(XmlNode node, XmlNamespaceManager namespaceManager);
    internal void Write(StreamWriter sw, string nodeName);
    public CT_TrackChange get_ins();
    public void set_ins(CT_TrackChange value);
    public CT_TrackChange get_del();
    public void set_del(CT_TrackChange value);
    public CT_TrPrChange get_trPrChange();
    public void set_trPrChange(CT_TrPrChange value);
}
[XmlIncludeAttribute("NPOI.OpenXmlFormats.Wordprocessing.CT_TrPr")]
[XmlTypeAttribute]
[XmlRootAttribute]
public class NPOI.OpenXmlFormats.Wordprocessing.CT_TrPrBase : object {
    private ArrayList itemsField;
    private List`1<ItemsChoiceType2> itemsElementNameField;
    [XmlElementAttribute("cantSplit", "NPOI.OpenXmlFormats.Wordprocessing.CT_OnOff")]
[XmlElementAttribute("cnfStyle", "NPOI.OpenXmlFormats.Wordprocessing.CT_Cnf")]
[XmlElementAttribute("divId", "NPOI.OpenXmlFormats.Wordprocessing.CT_DecimalNumber")]
[XmlElementAttribute("gridAfter", "NPOI.OpenXmlFormats.Wordprocessing.CT_DecimalNumber")]
[XmlElementAttribute("gridBefore", "NPOI.OpenXmlFormats.Wordprocessing.CT_DecimalNumber")]
[XmlElementAttribute("hidden", "NPOI.OpenXmlFormats.Wordprocessing.CT_OnOff")]
[XmlElementAttribute("jc", "NPOI.OpenXmlFormats.Wordprocessing.CT_Jc")]
[XmlElementAttribute("tblCellSpacing", "NPOI.OpenXmlFormats.Wordprocessing.CT_TblWidth")]
[XmlElementAttribute("tblHeader", "NPOI.OpenXmlFormats.Wordprocessing.CT_OnOff")]
[XmlElementAttribute("trHeight", "NPOI.OpenXmlFormats.Wordprocessing.CT_Height")]
[XmlElementAttribute("wAfter", "NPOI.OpenXmlFormats.Wordprocessing.CT_TblWidth")]
[XmlElementAttribute("wBefore", "NPOI.OpenXmlFormats.Wordprocessing.CT_TblWidth")]
[XmlChoiceIdentifierAttribute("ItemsElementName")]
public ArrayList Items { get; public set; }
    [XmlElementAttribute("ItemsElementName")]
[XmlIgnoreAttribute]
public List`1<ItemsChoiceType2> ItemsElementName { get; public set; }
    public static CT_TrPrBase Parse(XmlNode node, XmlNamespaceManager namespaceManager);
    internal void Write(StreamWriter sw, string nodeName);
    public ArrayList get_Items();
    public void set_Items(ArrayList value);
    public List`1<ItemsChoiceType2> get_ItemsElementName();
    public void set_ItemsElementName(List`1<ItemsChoiceType2> value);
    public List`1<CT_OnOff> GetCantSplitList();
    public List`1<CT_Cnf> GetCnfStyleList();
    public List`1<CT_DecimalNumber> GetDivIdList();
    public List`1<CT_DecimalNumber> GetGridAfterList();
    public List`1<CT_DecimalNumber> GetGridBeforeList();
    public List`1<CT_OnOff> GetHiddenList();
    public List`1<CT_Jc> GetJcList();
    public List`1<CT_TblWidth> GetTblCellSpacingList();
    public List`1<CT_OnOff> GetTblHeaderList();
    public List`1<CT_Height> GetTrHeightList();
    public List`1<CT_TblWidth> GetWAfterList();
    public List`1<CT_TblWidth> GetWBeforeList();
    public int SizeOfCantSplitArray();
    public int SizeOfCnfStyleArray();
    public int SizeOfDivIdArray();
    public int SizeOfGridAfterArray();
    public int SizeOfGridBeforeArray();
    public int SizeOfHiddenArray();
    public int SizeOfJcArray();
    public int SizeOfTblCellSpacingArray();
    public int SizeOfTblHeaderArray();
    public int SizeOfTrHeightArray();
    public int SizeOfWAfterArray();
    public int SizeOfWBeforeArray();
    public CT_OnOff GetCantSplitArray(int p);
    public CT_Cnf GetCnfStyleArray(int p);
    public CT_DecimalNumber GetDivIdArray(int p);
    public CT_DecimalNumber GetGridAfterArray(int p);
    public CT_DecimalNumber GetGridBeforeArray(int p);
    public CT_OnOff GetHiddenArray(int p);
    public CT_Jc GetJcArray(int p);
    public CT_TblWidth GetTblCellSpacingArray(int p);
    public CT_OnOff GetTblHeaderArray(int p);
    public CT_Height GetTrHeightArray(int p);
    public CT_TblWidth GetWAfterArray(int p);
    public CT_TblWidth GetWBeforeArray(int p);
    public CT_OnOff InsertNewNewCantSplit(int p);
    public CT_Cnf InsertNewNewCnfStyle(int p);
    public CT_DecimalNumber InsertNewNewDivId(int p);
    public CT_DecimalNumber InsertNewNewGridAfter(int p);
    public CT_DecimalNumber InsertNewNewGridBefore(int p);
    public CT_OnOff InsertNewNewHidden(int p);
    public CT_Jc InsertNewNewJc(int p);
    public CT_TblWidth InsertNewNewTblCellSpacing(int p);
    public CT_OnOff InsertNewNewTblHeader(int p);
    public CT_Height InsertNewNewTrHeight(int p);
    public CT_TblWidth InsertNewNewWAfter(int p);
    public CT_TblWidth InsertNewNewWBefore(int p);
    public CT_OnOff AddNewCantSplit();
    public CT_Cnf AddNewCnfStyle();
    public CT_DecimalNumber AddNewDivId();
    public CT_DecimalNumber AddNewGridAfter();
    public CT_DecimalNumber AddNewGridBefore();
    public CT_OnOff AddNewHidden();
    public CT_Jc AddNewJc();
    public CT_TblWidth AddNewTblCellSpacing();
    public CT_OnOff AddNewTblHeader();
    public CT_Height AddNewTrHeight();
    public CT_TblWidth AddNewWAfter();
    public CT_TblWidth AddNewWBefore();
    public void SetCantSplit(int p, CT_OnOff obj);
    public void SetCnfStyle(int p, CT_Cnf obj);
    public void SetDivId(int p, CT_DecimalNumber obj);
    public void SetGridAfter(int p, CT_DecimalNumber obj);
    public void SetGridBefore(int p, CT_DecimalNumber obj);
    public void SetHidden(int p, CT_OnOff obj);
    public void SetJc(int p, CT_Jc obj);
    public void SetTblCellSpacing(int p, CT_TblWidth obj);
    public void SetTblHeader(int p, CT_OnOff obj);
    public void SetTrHeight(int p, CT_Height obj);
    public void SetWAfter(int p, CT_TblWidth obj);
    public void SetWBefore(int p, CT_TblWidth obj);
    public void RemoveCantSplit(int p);
    public void RemoveCnfStyle(int p);
    public void RemoveDivId(int p);
    public void RemoveGridAfter(int p);
    public void RemoveGridBefore(int p);
    public void RemoveHidden(int p);
    public void RemoveJc(int p);
    public void RemoveTblCellSpacing(int p);
    public void RemoveTblHeader(int p);
    public void RemoveTrHeight(int p);
    public void RemoveWAfter(int p);
    public void RemoveWBefore(int p);
    private List`1<T> GetObjectList(ItemsChoiceType2 type);
    private int SizeOfArray(ItemsChoiceType2 type);
    private T GetObjectArray(int p, ItemsChoiceType2 type);
    private T InsertNewObject(ItemsChoiceType2 type, int p);
    private T AddNewObject(ItemsChoiceType2 type);
    private void SetObject(ItemsChoiceType2 type, int p, T obj);
    private int GetObjectIndex(ItemsChoiceType2 type, int p);
    private void RemoveObject(ItemsChoiceType2 type, int p);
}
[XmlTypeAttribute]
[XmlRootAttribute]
public class NPOI.OpenXmlFormats.Wordprocessing.CT_TrPrChange : CT_TrackChange {
    private CT_TrPrBase trPrField;
    [XmlElementAttribute]
public CT_TrPrBase trPr { get; public set; }
    public static CT_TrPrChange Parse(XmlNode node, XmlNamespaceManager namespaceManager);
    internal void Write(StreamWriter sw, string nodeName);
    public CT_TrPrBase get_trPr();
    public void set_trPr(CT_TrPrBase value);
}
[XmlTypeAttribute]
[XmlRootAttribute]
public class NPOI.OpenXmlFormats.Wordprocessing.CT_TwipsMeasure : object {
    private ulong valField;
    [XmlAttributeAttribute]
public ulong val { get; public set; }
    public static CT_TwipsMeasure Parse(XmlNode node, XmlNamespaceManager namespaceManager);
    internal void Write(StreamWriter sw, string nodeName);
    public ulong get_val();
    public void set_val(ulong value);
}
[XmlTypeAttribute]
[XmlRootAttribute("txbxContent")]
public class NPOI.OpenXmlFormats.Wordprocessing.CT_TxbxContent : object {
    private Object[] itemsField;
    private ItemsChoiceType[] itemsElementNameField;
    [XmlElementAttribute("oMath", "NPOI.OpenXmlFormats.Shared.CT_OMath")]
[XmlElementAttribute("oMathPara", "NPOI.OpenXmlFormats.Shared.CT_OMathPara")]
[XmlElementAttribute("altChunk", "NPOI.OpenXmlFormats.Wordprocessing.CT_AltChunk")]
[XmlElementAttribute("bookmarkEnd", "NPOI.OpenXmlFormats.Wordprocessing.CT_MarkupRange")]
[XmlElementAttribute("bookmarkStart", "NPOI.OpenXmlFormats.Wordprocessing.CT_Bookmark")]
[XmlElementAttribute("commentRangeEnd", "NPOI.OpenXmlFormats.Wordprocessing.CT_MarkupRange")]
[XmlElementAttribute("commentRangeStart", "NPOI.OpenXmlFormats.Wordprocessing.CT_MarkupRange")]
[XmlElementAttribute("customXml", "NPOI.OpenXmlFormats.Wordprocessing.CT_CustomXmlBlock")]
[XmlElementAttribute("customXmlDelRangeEnd", "NPOI.OpenXmlFormats.Wordprocessing.CT_Markup")]
[XmlElementAttribute("customXmlDelRangeStart", "NPOI.OpenXmlFormats.Wordprocessing.CT_TrackChange")]
[XmlElementAttribute("customXmlInsRangeEnd", "NPOI.OpenXmlFormats.Wordprocessing.CT_Markup")]
[XmlElementAttribute("customXmlInsRangeStart", "NPOI.OpenXmlFormats.Wordprocessing.CT_TrackChange")]
[XmlElementAttribute("customXmlMoveFromRangeEnd", "NPOI.OpenXmlFormats.Wordprocessing.CT_Markup")]
[XmlElementAttribute("customXmlMoveFromRangeStart", "NPOI.OpenXmlFormats.Wordprocessing.CT_TrackChange")]
[XmlElementAttribute("customXmlMoveToRangeEnd", "NPOI.OpenXmlFormats.Wordprocessing.CT_Markup")]
[XmlElementAttribute("customXmlMoveToRangeStart", "NPOI.OpenXmlFormats.Wordprocessing.CT_TrackChange")]
[XmlElementAttribute("del", "NPOI.OpenXmlFormats.Wordprocessing.CT_RunTrackChange")]
[XmlElementAttribute("ins", "NPOI.OpenXmlFormats.Wordprocessing.CT_RunTrackChange")]
[XmlElementAttribute("moveFrom", "NPOI.OpenXmlFormats.Wordprocessing.CT_RunTrackChange")]
[XmlElementAttribute("moveFromRangeEnd", "NPOI.OpenXmlFormats.Wordprocessing.CT_MarkupRange")]
[XmlElementAttribute("moveFromRangeStart", "NPOI.OpenXmlFormats.Wordprocessing.CT_MoveBookmark")]
[XmlElementAttribute("moveTo", "NPOI.OpenXmlFormats.Wordprocessing.CT_RunTrackChange")]
[XmlElementAttribute("moveToRangeEnd", "NPOI.OpenXmlFormats.Wordprocessing.CT_MarkupRange")]
[XmlElementAttribute("moveToRangeStart", "NPOI.OpenXmlFormats.Wordprocessing.CT_MoveBookmark")]
[XmlElementAttribute("p", "NPOI.OpenXmlFormats.Wordprocessing.CT_P")]
[XmlElementAttribute("permEnd", "NPOI.OpenXmlFormats.Wordprocessing.CT_Perm")]
[XmlElementAttribute("permStart", "NPOI.OpenXmlFormats.Wordprocessing.CT_PermStart")]
[XmlElementAttribute("proofErr", "NPOI.OpenXmlFormats.Wordprocessing.CT_ProofErr")]
[XmlElementAttribute("sdt", "NPOI.OpenXmlFormats.Wordprocessing.CT_SdtBlock")]
[XmlElementAttribute("tbl", "NPOI.OpenXmlFormats.Wordprocessing.CT_Tbl")]
[XmlChoiceIdentifierAttribute("ItemsElementName")]
public Object[] Items { get; public set; }
    [XmlElementAttribute("ItemsElementName")]
[XmlIgnoreAttribute]
public ItemsChoiceType[] ItemsElementName { get; public set; }
    public Object[] get_Items();
    public void set_Items(Object[] value);
    public ItemsChoiceType[] get_ItemsElementName();
    public void set_ItemsElementName(ItemsChoiceType[] value);
}
[XmlTypeAttribute]
[XmlRootAttribute]
public class NPOI.OpenXmlFormats.Wordprocessing.CT_UcharHexNumber : object {
    private Byte[] valField;
    [XmlAttributeAttribute]
public Byte[] val { get; public set; }
    public Byte[] get_val();
    public void set_val(Byte[] value);
}
[XmlTypeAttribute]
[XmlRootAttribute]
public class NPOI.OpenXmlFormats.Wordprocessing.CT_Underline : object {
    private ST_Underline valField;
    private bool valFieldSpecified;
    private string colorField;
    private ST_ThemeColor themeColorField;
    private bool themeColorFieldSpecified;
    private Byte[] themeTintField;
    private Byte[] themeShadeField;
    [XmlAttributeAttribute]
public ST_Underline val { get; public set; }
    [XmlIgnoreAttribute]
public bool valSpecified { get; public set; }
    [XmlAttributeAttribute]
public string color { get; public set; }
    [XmlAttributeAttribute]
public ST_ThemeColor themeColor { get; public set; }
    [XmlIgnoreAttribute]
public bool themeColorSpecified { get; public set; }
    [XmlAttributeAttribute]
public Byte[] themeTint { get; public set; }
    [XmlAttributeAttribute]
public Byte[] themeShade { get; public set; }
    public static CT_Underline Parse(XmlNode node, XmlNamespaceManager namespaceManager);
    internal void Write(StreamWriter sw, string nodeName);
    public ST_Underline get_val();
    public void set_val(ST_Underline value);
    public bool get_valSpecified();
    public void set_valSpecified(bool value);
    public string get_color();
    public void set_color(string value);
    public ST_ThemeColor get_themeColor();
    public void set_themeColor(ST_ThemeColor value);
    public bool get_themeColorSpecified();
    public void set_themeColorSpecified(bool value);
    public Byte[] get_themeTint();
    public void set_themeTint(Byte[] value);
    public Byte[] get_themeShade();
    public void set_themeShade(Byte[] value);
}
[XmlTypeAttribute]
[XmlRootAttribute]
public class NPOI.OpenXmlFormats.Wordprocessing.CT_VerticalAlignRun : object {
    private ST_VerticalAlignRun valField;
    [XmlAttributeAttribute]
public ST_VerticalAlignRun val { get; public set; }
    public static CT_VerticalAlignRun Parse(XmlNode node, XmlNamespaceManager namespaceManager);
    internal void Write(StreamWriter sw, string nodeName);
    public ST_VerticalAlignRun get_val();
    public void set_val(ST_VerticalAlignRun value);
}
[XmlTypeAttribute]
[XmlRootAttribute]
public class NPOI.OpenXmlFormats.Wordprocessing.CT_VerticalJc : object {
    private Nullable`1<ST_VerticalJc> valField;
    [XmlAttributeAttribute]
public Nullable`1<ST_VerticalJc> val { get; public set; }
    public static CT_VerticalJc Parse(XmlNode node, XmlNamespaceManager namespaceManager);
    internal void Write(StreamWriter sw, string nodeName);
    public Nullable`1<ST_VerticalJc> get_val();
    public void set_val(Nullable`1<ST_VerticalJc> value);
}
[XmlTypeAttribute]
[XmlRootAttribute]
public class NPOI.OpenXmlFormats.Wordprocessing.CT_View : object {
    private ST_View valField;
    [XmlAttributeAttribute]
public ST_View val { get; public set; }
    public static CT_View Parse(XmlNode node, XmlNamespaceManager namespaceManager);
    internal void Write(StreamWriter sw, string nodeName);
    public ST_View get_val();
    public void set_val(ST_View value);
}
[XmlTypeAttribute]
[XmlRootAttribute]
public class NPOI.OpenXmlFormats.Wordprocessing.CT_VMerge : object {
    private ST_Merge valField;
    private bool valFieldSpecified;
    public ST_Merge val { get; public set; }
    [XmlIgnoreAttribute]
public bool valSpecified { get; public set; }
    public static CT_VMerge Parse(XmlNode node, XmlNamespaceManager namespaceManager);
    internal void Write(StreamWriter sw, string nodeName);
    public ST_Merge get_val();
    public void set_val(ST_Merge value);
    public bool get_valSpecified();
    public void set_valSpecified(bool value);
}
[XmlTypeAttribute]
[XmlRootAttribute("webSettings")]
public class NPOI.OpenXmlFormats.Wordprocessing.CT_WebSettings : object {
    private CT_Frameset framesetField;
    private CT_Divs divsField;
    private CT_String encodingField;
    private CT_OnOff optimizeForBrowserField;
    private CT_OnOff relyOnVMLField;
    private CT_OnOff allowPNGField;
    private CT_OnOff doNotRelyOnCSSField;
    private CT_OnOff doNotSaveAsSingleFileField;
    private CT_OnOff doNotOrganizeInFolderField;
    private CT_OnOff doNotUseLongFileNamesField;
    private CT_DecimalNumber pixelsPerInchField;
    private CT_TargetScreenSz targetScreenSzField;
    private CT_OnOff saveSmartTagsAsXmlField;
    [XmlElementAttribute]
public CT_Frameset frameset { get; public set; }
    [XmlElementAttribute]
public CT_Divs divs { get; public set; }
    [XmlElementAttribute]
public CT_String encoding { get; public set; }
    [XmlElementAttribute]
public CT_OnOff optimizeForBrowser { get; public set; }
    [XmlElementAttribute]
public CT_OnOff relyOnVML { get; public set; }
    [XmlElementAttribute]
public CT_OnOff allowPNG { get; public set; }
    [XmlElementAttribute]
public CT_OnOff doNotRelyOnCSS { get; public set; }
    [XmlElementAttribute]
public CT_OnOff doNotSaveAsSingleFile { get; public set; }
    [XmlElementAttribute]
public CT_OnOff doNotOrganizeInFolder { get; public set; }
    [XmlElementAttribute]
public CT_OnOff doNotUseLongFileNames { get; public set; }
    [XmlElementAttribute]
public CT_DecimalNumber pixelsPerInch { get; public set; }
    [XmlElementAttribute]
public CT_TargetScreenSz targetScreenSz { get; public set; }
    [XmlElementAttribute]
public CT_OnOff saveSmartTagsAsXml { get; public set; }
    public CT_Frameset get_frameset();
    public void set_frameset(CT_Frameset value);
    public CT_Divs get_divs();
    public void set_divs(CT_Divs value);
    public CT_String get_encoding();
    public void set_encoding(CT_String value);
    public CT_OnOff get_optimizeForBrowser();
    public void set_optimizeForBrowser(CT_OnOff value);
    public CT_OnOff get_relyOnVML();
    public void set_relyOnVML(CT_OnOff value);
    public CT_OnOff get_allowPNG();
    public void set_allowPNG(CT_OnOff value);
    public CT_OnOff get_doNotRelyOnCSS();
    public void set_doNotRelyOnCSS(CT_OnOff value);
    public CT_OnOff get_doNotSaveAsSingleFile();
    public void set_doNotSaveAsSingleFile(CT_OnOff value);
    public CT_OnOff get_doNotOrganizeInFolder();
    public void set_doNotOrganizeInFolder(CT_OnOff value);
    public CT_OnOff get_doNotUseLongFileNames();
    public void set_doNotUseLongFileNames(CT_OnOff value);
    public CT_DecimalNumber get_pixelsPerInch();
    public void set_pixelsPerInch(CT_DecimalNumber value);
    public CT_TargetScreenSz get_targetScreenSz();
    public void set_targetScreenSz(CT_TargetScreenSz value);
    public CT_OnOff get_saveSmartTagsAsXml();
    public void set_saveSmartTagsAsXml(CT_OnOff value);
}
[XmlTypeAttribute]
[XmlRootAttribute]
public class NPOI.OpenXmlFormats.Wordprocessing.CT_WriteProtection : object {
    private ST_OnOff recommendedField;
    private bool recommendedFieldSpecified;
    private ST_CryptProv cryptProviderTypeField;
    private bool cryptProviderTypeFieldSpecified;
    private ST_AlgClass cryptAlgorithmClassField;
    private bool cryptAlgorithmClassFieldSpecified;
    private ST_AlgType cryptAlgorithmTypeField;
    private bool cryptAlgorithmTypeFieldSpecified;
    private string cryptAlgorithmSidField;
    private string cryptSpinCountField;
    private string cryptProviderField;
    private Byte[] algIdExtField;
    private string algIdExtSourceField;
    private Byte[] cryptProviderTypeExtField;
    private string cryptProviderTypeExtSourceField;
    private Byte[] hashField;
    private Byte[] saltField;
    [XmlAttributeAttribute]
public ST_OnOff recommended { get; public set; }
    [XmlIgnoreAttribute]
public bool recommendedSpecified { get; public set; }
    [XmlAttributeAttribute]
public ST_CryptProv cryptProviderType { get; public set; }
    [XmlIgnoreAttribute]
public bool cryptProviderTypeSpecified { get; public set; }
    [XmlAttributeAttribute]
public ST_AlgClass cryptAlgorithmClass { get; public set; }
    [XmlIgnoreAttribute]
public bool cryptAlgorithmClassSpecified { get; public set; }
    [XmlAttributeAttribute]
public ST_AlgType cryptAlgorithmType { get; public set; }
    [XmlIgnoreAttribute]
public bool cryptAlgorithmTypeSpecified { get; public set; }
    [XmlAttributeAttribute]
public string cryptAlgorithmSid { get; public set; }
    [XmlAttributeAttribute]
public string cryptSpinCount { get; public set; }
    [XmlAttributeAttribute]
public string cryptProvider { get; public set; }
    [XmlAttributeAttribute]
public Byte[] algIdExt { get; public set; }
    [XmlAttributeAttribute]
public string algIdExtSource { get; public set; }
    [XmlAttributeAttribute]
public Byte[] cryptProviderTypeExt { get; public set; }
    [XmlAttributeAttribute]
public string cryptProviderTypeExtSource { get; public set; }
    [XmlAttributeAttribute]
public Byte[] hash { get; public set; }
    [XmlAttributeAttribute]
public Byte[] salt { get; public set; }
    public static CT_WriteProtection Parse(XmlNode node, XmlNamespaceManager namespaceManager);
    internal void Write(StreamWriter sw, string nodeName);
    public ST_OnOff get_recommended();
    public void set_recommended(ST_OnOff value);
    public bool get_recommendedSpecified();
    public void set_recommendedSpecified(bool value);
    public ST_CryptProv get_cryptProviderType();
    public void set_cryptProviderType(ST_CryptProv value);
    public bool get_cryptProviderTypeSpecified();
    public void set_cryptProviderTypeSpecified(bool value);
    public ST_AlgClass get_cryptAlgorithmClass();
    public void set_cryptAlgorithmClass(ST_AlgClass value);
    public bool get_cryptAlgorithmClassSpecified();
    public void set_cryptAlgorithmClassSpecified(bool value);
    public ST_AlgType get_cryptAlgorithmType();
    public void set_cryptAlgorithmType(ST_AlgType value);
    public bool get_cryptAlgorithmTypeSpecified();
    public void set_cryptAlgorithmTypeSpecified(bool value);
    public string get_cryptAlgorithmSid();
    public void set_cryptAlgorithmSid(string value);
    public string get_cryptSpinCount();
    public void set_cryptSpinCount(string value);
    public string get_cryptProvider();
    public void set_cryptProvider(string value);
    public Byte[] get_algIdExt();
    public void set_algIdExt(Byte[] value);
    public string get_algIdExtSource();
    public void set_algIdExtSource(string value);
    public Byte[] get_cryptProviderTypeExt();
    public void set_cryptProviderTypeExt(Byte[] value);
    public string get_cryptProviderTypeExtSource();
    public void set_cryptProviderTypeExtSource(string value);
    public Byte[] get_hash();
    public void set_hash(Byte[] value);
    public Byte[] get_salt();
    public void set_salt(Byte[] value);
}
[XmlTypeAttribute]
[XmlRootAttribute]
public class NPOI.OpenXmlFormats.Wordprocessing.CT_WritingStyle : object {
    private string langField;
    private string vendorIDField;
    private string dllVersionField;
    private ST_OnOff nlCheckField;
    private bool nlCheckFieldSpecified;
    private ST_OnOff checkStyleField;
    private string appNameField;
    [XmlAttributeAttribute]
public string lang { get; public set; }
    [XmlAttributeAttribute]
public string vendorID { get; public set; }
    [XmlAttributeAttribute]
public string dllVersion { get; public set; }
    [XmlAttributeAttribute]
public ST_OnOff nlCheck { get; public set; }
    [XmlIgnoreAttribute]
public bool nlCheckSpecified { get; public set; }
    [XmlAttributeAttribute]
public ST_OnOff checkStyle { get; public set; }
    [XmlAttributeAttribute]
public string appName { get; public set; }
    public static CT_WritingStyle Parse(XmlNode node, XmlNamespaceManager namespaceManager);
    internal void Write(StreamWriter sw, string nodeName);
    public string get_lang();
    public void set_lang(string value);
    public string get_vendorID();
    public void set_vendorID(string value);
    public string get_dllVersion();
    public void set_dllVersion(string value);
    public ST_OnOff get_nlCheck();
    public void set_nlCheck(ST_OnOff value);
    public bool get_nlCheckSpecified();
    public void set_nlCheckSpecified(bool value);
    public ST_OnOff get_checkStyle();
    public void set_checkStyle(ST_OnOff value);
    public string get_appName();
    public void set_appName(string value);
}
[XmlTypeAttribute]
[XmlRootAttribute]
public class NPOI.OpenXmlFormats.Wordprocessing.CT_Zoom : object {
    private ST_Zoom valField;
    private bool valFieldSpecified;
    private string percentField;
    [XmlAttributeAttribute]
public ST_Zoom val { get; public set; }
    [XmlIgnoreAttribute]
public bool valSpecified { get; public set; }
    [XmlAttributeAttribute]
public string percent { get; public set; }
    public static CT_Zoom Parse(XmlNode node, XmlNamespaceManager namespaceManager);
    internal void Write(StreamWriter sw, string nodeName);
    public ST_Zoom get_val();
    public void set_val(ST_Zoom value);
    public bool get_valSpecified();
    public void set_valSpecified(bool value);
    public string get_percent();
    public void set_percent(string value);
}
[XmlTypeAttribute]
public enum NPOI.OpenXmlFormats.Wordprocessing.DocumentBodyItemChoiceType : Enum {
    public int value__;
    [XmlEnumAttribute("http://schemas.openxmlformats.org/officeDocument/2006/math:oMath")]
public static DocumentBodyItemChoiceType oMath;
    [XmlEnumAttribute("http://schemas.openxmlformats.org/officeDocument/2006/math:oMathPara")]
public static DocumentBodyItemChoiceType oMathPara;
    public static DocumentBodyItemChoiceType altChunk;
    public static DocumentBodyItemChoiceType bookmarkEnd;
    public static DocumentBodyItemChoiceType bookmarkStart;
    public static DocumentBodyItemChoiceType commentRangeEnd;
    public static DocumentBodyItemChoiceType commentRangeStart;
    public static DocumentBodyItemChoiceType customXml;
    public static DocumentBodyItemChoiceType customXmlDelRangeEnd;
    public static DocumentBodyItemChoiceType customXmlDelRangeStart;
    public static DocumentBodyItemChoiceType customXmlInsRangeEnd;
    public static DocumentBodyItemChoiceType customXmlInsRangeStart;
    public static DocumentBodyItemChoiceType customXmlMoveFromRangeEnd;
    public static DocumentBodyItemChoiceType customXmlMoveFromRangeStart;
    public static DocumentBodyItemChoiceType customXmlMoveToRangeEnd;
    public static DocumentBodyItemChoiceType customXmlMoveToRangeStart;
    public static DocumentBodyItemChoiceType del;
    public static DocumentBodyItemChoiceType ins;
    public static DocumentBodyItemChoiceType moveFrom;
    public static DocumentBodyItemChoiceType moveFromRangeEnd;
    public static DocumentBodyItemChoiceType moveFromRangeStart;
    public static DocumentBodyItemChoiceType moveTo;
    public static DocumentBodyItemChoiceType moveToRangeEnd;
    public static DocumentBodyItemChoiceType moveToRangeStart;
    public static DocumentBodyItemChoiceType p;
    public static DocumentBodyItemChoiceType permEnd;
    public static DocumentBodyItemChoiceType permStart;
    public static DocumentBodyItemChoiceType proofErr;
    public static DocumentBodyItemChoiceType sdt;
    public static DocumentBodyItemChoiceType tbl;
}
public class NPOI.OpenXmlFormats.Wordprocessing.DocumentDocument : object {
    private CT_Document document;
    public CT_Document Document { get; }
    public DocumentDocument(CT_Document document);
    public static DocumentDocument Parse(XmlDocument doc, XmlNamespaceManager namespaceMgr);
    public CT_Document get_Document();
    public void Save(Stream stream);
}
public class NPOI.OpenXmlFormats.Wordprocessing.EndnotesDocument : object {
    private CT_Endnotes endnotes;
    public CT_Endnotes Endnotes { get; }
    public EndnotesDocument(CT_Endnotes endnotes);
    public static EndnotesDocument Parse(XmlDocument doc, XmlNamespaceManager namespaceMgr);
    public CT_Endnotes get_Endnotes();
    public void Save(Stream stream);
}
[XmlTypeAttribute]
public enum NPOI.OpenXmlFormats.Wordprocessing.FFDataItemsType : Enum {
    public int value__;
    public static FFDataItemsType calcOnExit;
    public static FFDataItemsType checkBox;
    public static FFDataItemsType ddList;
    public static FFDataItemsType enabled;
    public static FFDataItemsType entryMacro;
    public static FFDataItemsType exitMacro;
    public static FFDataItemsType helpText;
    public static FFDataItemsType name;
    public static FFDataItemsType statusText;
    public static FFDataItemsType textInput;
}
public class NPOI.OpenXmlFormats.Wordprocessing.FootnotesDocument : object {
    private CT_Footnotes footnotes;
    public CT_Footnotes Footnotes { get; }
    public FootnotesDocument(CT_Footnotes footnotes);
    public static FootnotesDocument Parse(XmlDocument doc, XmlNamespaceManager namespaceMgr);
    public CT_Footnotes get_Footnotes();
    public void Save(Stream stream);
}
public class NPOI.OpenXmlFormats.Wordprocessing.FtrDocument : object {
    private CT_Ftr ftr;
    public CT_Ftr Ftr { get; }
    public FtrDocument(CT_Ftr ftr);
    public static FtrDocument Parse(XmlDocument doc, XmlNamespaceManager namespaceMgr);
    public void Save(Stream stream);
    public CT_Ftr get_Ftr();
    public void SetFtr(CT_Ftr ftr);
}
public class NPOI.OpenXmlFormats.Wordprocessing.HdrDocument : object {
    private CT_Hdr hdr;
    public CT_Hdr Hdr { get; }
    public HdrDocument(CT_Hdr hdr);
    public static HdrDocument Parse(XmlDocument doc, XmlNamespaceManager namespaceMgr);
    public void Save(Stream stream);
    public CT_Hdr get_Hdr();
    public void SetHdr(CT_Hdr hdr);
}
[XmlTypeAttribute]
public enum NPOI.OpenXmlFormats.Wordprocessing.Items1ChoiceType : Enum {
    public int value__;
    [XmlEnumAttribute("http://schemas.openxmlformats.org/officeDocument/2006/math:oMath")]
public static Items1ChoiceType oMath;
    [XmlEnumAttribute("http://schemas.openxmlformats.org/officeDocument/2006/math:oMathPara")]
public static Items1ChoiceType oMathPara;
    public static Items1ChoiceType bookmarkEnd;
    public static Items1ChoiceType bookmarkStart;
    public static Items1ChoiceType commentRangeEnd;
    public static Items1ChoiceType commentRangeStart;
    public static Items1ChoiceType customXml;
    public static Items1ChoiceType customXmlDelRangeEnd;
    public static Items1ChoiceType customXmlDelRangeStart;
    public static Items1ChoiceType customXmlInsRangeEnd;
    public static Items1ChoiceType customXmlInsRangeStart;
    public static Items1ChoiceType customXmlMoveFromRangeEnd;
    public static Items1ChoiceType customXmlMoveFromRangeStart;
    public static Items1ChoiceType customXmlMoveToRangeEnd;
    public static Items1ChoiceType customXmlMoveToRangeStart;
    public static Items1ChoiceType del;
    public static Items1ChoiceType ins;
    public static Items1ChoiceType moveFrom;
    public static Items1ChoiceType moveFromRangeEnd;
    public static Items1ChoiceType moveFromRangeStart;
    public static Items1ChoiceType moveTo;
    public static Items1ChoiceType moveToRangeEnd;
    public static Items1ChoiceType moveToRangeStart;
    public static Items1ChoiceType permEnd;
    public static Items1ChoiceType permStart;
    public static Items1ChoiceType proofErr;
    public static Items1ChoiceType sdt;
    public static Items1ChoiceType tr;
}
[XmlTypeAttribute]
public enum NPOI.OpenXmlFormats.Wordprocessing.ItemsChoiceHdrFtrRefType : Enum {
    public int value__;
    public static ItemsChoiceHdrFtrRefType footerReference;
    public static ItemsChoiceHdrFtrRefType headerReference;
}
[XmlTypeAttribute]
public enum NPOI.OpenXmlFormats.Wordprocessing.ItemsChoiceTableCellType : Enum {
    public int value__;
    [XmlEnumAttribute("http://schemas.openxmlformats.org/officeDocument/2006/math:oMath")]
public static ItemsChoiceTableCellType oMath;
    [XmlEnumAttribute("http://schemas.openxmlformats.org/officeDocument/2006/math:oMathPara")]
public static ItemsChoiceTableCellType oMathPara;
    public static ItemsChoiceTableCellType altChunk;
    public static ItemsChoiceTableCellType bookmarkEnd;
    public static ItemsChoiceTableCellType bookmarkStart;
    public static ItemsChoiceTableCellType commentRangeEnd;
    public static ItemsChoiceTableCellType commentRangeStart;
    public static ItemsChoiceTableCellType customXml;
    public static ItemsChoiceTableCellType customXmlDelRangeEnd;
    public static ItemsChoiceTableCellType customXmlDelRangeStart;
    public static ItemsChoiceTableCellType customXmlInsRangeEnd;
    public static ItemsChoiceTableCellType customXmlInsRangeStart;
    public static ItemsChoiceTableCellType customXmlMoveFromRangeEnd;
    public static ItemsChoiceTableCellType customXmlMoveFromRangeStart;
    public static ItemsChoiceTableCellType customXmlMoveToRangeEnd;
    public static ItemsChoiceTableCellType customXmlMoveToRangeStart;
    public static ItemsChoiceTableCellType del;
    public static ItemsChoiceTableCellType ins;
    public static ItemsChoiceTableCellType moveFrom;
    public static ItemsChoiceTableCellType moveFromRangeEnd;
    public static ItemsChoiceTableCellType moveFromRangeStart;
    public static ItemsChoiceTableCellType moveTo;
    public static ItemsChoiceTableCellType moveToRangeEnd;
    public static ItemsChoiceTableCellType moveToRangeStart;
    public static ItemsChoiceTableCellType p;
    public static ItemsChoiceTableCellType permEnd;
    public static ItemsChoiceTableCellType permStart;
    public static ItemsChoiceTableCellType proofErr;
    public static ItemsChoiceTableCellType sdt;
    public static ItemsChoiceTableCellType tbl;
}
[XmlTypeAttribute]
public enum NPOI.OpenXmlFormats.Wordprocessing.ItemsChoiceTableRowType : Enum {
    public int value__;
    [XmlEnumAttribute("http://schemas.openxmlformats.org/officeDocument/2006/math:oMath")]
public static ItemsChoiceTableRowType oMath;
    [XmlEnumAttribute("http://schemas.openxmlformats.org/officeDocument/2006/math:oMathPara")]
public static ItemsChoiceTableRowType oMathPara;
    public static ItemsChoiceTableRowType bookmarkEnd;
    public static ItemsChoiceTableRowType bookmarkStart;
    public static ItemsChoiceTableRowType commentRangeEnd;
    public static ItemsChoiceTableRowType commentRangeStart;
    public static ItemsChoiceTableRowType customXml;
    public static ItemsChoiceTableRowType customXmlDelRangeEnd;
    public static ItemsChoiceTableRowType customXmlDelRangeStart;
    public static ItemsChoiceTableRowType customXmlInsRangeEnd;
    public static ItemsChoiceTableRowType customXmlInsRangeStart;
    public static ItemsChoiceTableRowType customXmlMoveFromRangeEnd;
    public static ItemsChoiceTableRowType customXmlMoveFromRangeStart;
    public static ItemsChoiceTableRowType customXmlMoveToRangeEnd;
    public static ItemsChoiceTableRowType customXmlMoveToRangeStart;
    public static ItemsChoiceTableRowType del;
    public static ItemsChoiceTableRowType ins;
    public static ItemsChoiceTableRowType moveFrom;
    public static ItemsChoiceTableRowType moveFromRangeEnd;
    public static ItemsChoiceTableRowType moveFromRangeStart;
    public static ItemsChoiceTableRowType moveTo;
    public static ItemsChoiceTableRowType moveToRangeEnd;
    public static ItemsChoiceTableRowType moveToRangeStart;
    public static ItemsChoiceTableRowType permEnd;
    public static ItemsChoiceTableRowType permStart;
    public static ItemsChoiceTableRowType proofErr;
    public static ItemsChoiceTableRowType sdt;
    public static ItemsChoiceTableRowType tc;
}
[XmlTypeAttribute]
public enum NPOI.OpenXmlFormats.Wordprocessing.ItemsChoiceType : Enum {
    public int value__;
    [XmlEnumAttribute("http://schemas.openxmlformats.org/officeDocument/2006/math:oMath")]
public static ItemsChoiceType oMath;
    [XmlEnumAttribute("http://schemas.openxmlformats.org/officeDocument/2006/math:oMathPara")]
public static ItemsChoiceType oMathPara;
    public static ItemsChoiceType altChunk;
    public static ItemsChoiceType bookmarkEnd;
    public static ItemsChoiceType bookmarkStart;
    public static ItemsChoiceType commentRangeEnd;
    public static ItemsChoiceType commentRangeStart;
    public static ItemsChoiceType customXml;
    public static ItemsChoiceType customXmlDelRangeEnd;
    public static ItemsChoiceType customXmlDelRangeStart;
    public static ItemsChoiceType customXmlInsRangeEnd;
    public static ItemsChoiceType customXmlInsRangeStart;
    public static ItemsChoiceType customXmlMoveFromRangeEnd;
    public static ItemsChoiceType customXmlMoveFromRangeStart;
    public static ItemsChoiceType customXmlMoveToRangeEnd;
    public static ItemsChoiceType customXmlMoveToRangeStart;
    public static ItemsChoiceType del;
    public static ItemsChoiceType ins;
    public static ItemsChoiceType moveFrom;
    public static ItemsChoiceType moveFromRangeEnd;
    public static ItemsChoiceType moveFromRangeStart;
    public static ItemsChoiceType moveTo;
    public static ItemsChoiceType moveToRangeEnd;
    public static ItemsChoiceType moveToRangeStart;
    public static ItemsChoiceType p;
    public static ItemsChoiceType permEnd;
    public static ItemsChoiceType permStart;
    public static ItemsChoiceType proofErr;
    public static ItemsChoiceType sdt;
    public static ItemsChoiceType tbl;
}
[XmlTypeAttribute]
public enum NPOI.OpenXmlFormats.Wordprocessing.ItemsChoiceType11 : Enum {
    public int value__;
    public static ItemsChoiceType11 behaviors;
    public static ItemsChoiceType11 category;
    public static ItemsChoiceType11 description;
    public static ItemsChoiceType11 guid;
    public static ItemsChoiceType11 name;
    public static ItemsChoiceType11 style;
    public static ItemsChoiceType11 types;
}
[XmlTypeAttribute]
public enum NPOI.OpenXmlFormats.Wordprocessing.ItemsChoiceType12 : Enum {
    public int value__;
    [XmlEnumAttribute("http://schemas.openxmlformats.org/officeDocument/2006/math:oMath")]
public static ItemsChoiceType12 oMath;
    [XmlEnumAttribute("http://schemas.openxmlformats.org/officeDocument/2006/math:oMathPara")]
public static ItemsChoiceType12 oMathPara;
    public static ItemsChoiceType12 bookmarkEnd;
    public static ItemsChoiceType12 bookmarkStart;
    public static ItemsChoiceType12 commentRangeEnd;
    public static ItemsChoiceType12 commentRangeStart;
    public static ItemsChoiceType12 customXml;
    public static ItemsChoiceType12 customXmlDelRangeEnd;
    public static ItemsChoiceType12 customXmlDelRangeStart;
    public static ItemsChoiceType12 customXmlInsRangeEnd;
    public static ItemsChoiceType12 customXmlInsRangeStart;
    public static ItemsChoiceType12 customXmlMoveFromRangeEnd;
    public static ItemsChoiceType12 customXmlMoveFromRangeStart;
    public static ItemsChoiceType12 customXmlMoveToRangeEnd;
    public static ItemsChoiceType12 customXmlMoveToRangeStart;
    public static ItemsChoiceType12 del;
    public static ItemsChoiceType12 fldSimple;
    public static ItemsChoiceType12 hyperlink;
    public static ItemsChoiceType12 ins;
    public static ItemsChoiceType12 moveFrom;
    public static ItemsChoiceType12 moveFromRangeEnd;
    public static ItemsChoiceType12 moveFromRangeStart;
    public static ItemsChoiceType12 moveTo;
    public static ItemsChoiceType12 moveToRangeEnd;
    public static ItemsChoiceType12 moveToRangeStart;
    public static ItemsChoiceType12 permEnd;
    public static ItemsChoiceType12 permStart;
    public static ItemsChoiceType12 proofErr;
    public static ItemsChoiceType12 r;
    public static ItemsChoiceType12 sdt;
    public static ItemsChoiceType12 smartTag;
    public static ItemsChoiceType12 subDoc;
}
[XmlTypeAttribute]
public enum NPOI.OpenXmlFormats.Wordprocessing.ItemsChoiceType13 : Enum {
    public int value__;
    [XmlEnumAttribute("http://schemas.openxmlformats.org/officeDocument/2006/math:oMath")]
public static ItemsChoiceType13 oMath;
    [XmlEnumAttribute("http://schemas.openxmlformats.org/officeDocument/2006/math:oMathPara")]
public static ItemsChoiceType13 oMathPara;
    public static ItemsChoiceType13 bookmarkEnd;
    public static ItemsChoiceType13 bookmarkStart;
    public static ItemsChoiceType13 commentRangeEnd;
    public static ItemsChoiceType13 commentRangeStart;
    public static ItemsChoiceType13 customXml;
    public static ItemsChoiceType13 customXmlDelRangeEnd;
    public static ItemsChoiceType13 customXmlDelRangeStart;
    public static ItemsChoiceType13 customXmlInsRangeEnd;
    public static ItemsChoiceType13 customXmlInsRangeStart;
    public static ItemsChoiceType13 customXmlMoveFromRangeEnd;
    public static ItemsChoiceType13 customXmlMoveFromRangeStart;
    public static ItemsChoiceType13 customXmlMoveToRangeEnd;
    public static ItemsChoiceType13 customXmlMoveToRangeStart;
    public static ItemsChoiceType13 del;
    public static ItemsChoiceType13 fldSimple;
    public static ItemsChoiceType13 hyperlink;
    public static ItemsChoiceType13 ins;
    public static ItemsChoiceType13 moveFrom;
    public static ItemsChoiceType13 moveFromRangeEnd;
    public static ItemsChoiceType13 moveFromRangeStart;
    public static ItemsChoiceType13 moveTo;
    public static ItemsChoiceType13 moveToRangeEnd;
    public static ItemsChoiceType13 moveToRangeStart;
    public static ItemsChoiceType13 permEnd;
    public static ItemsChoiceType13 permStart;
    public static ItemsChoiceType13 proofErr;
    public static ItemsChoiceType13 r;
    public static ItemsChoiceType13 sdt;
    public static ItemsChoiceType13 smartTag;
    public static ItemsChoiceType13 subDoc;
}
[XmlTypeAttribute]
public enum NPOI.OpenXmlFormats.Wordprocessing.ItemsChoiceType16 : Enum {
    public int value__;
    [XmlEnumAttribute("http://schemas.openxmlformats.org/officeDocument/2006/math:oMath")]
public static ItemsChoiceType16 oMath;
    [XmlEnumAttribute("http://schemas.openxmlformats.org/officeDocument/2006/math:oMathPara")]
public static ItemsChoiceType16 oMathPara;
    public static ItemsChoiceType16 bookmarkEnd;
    public static ItemsChoiceType16 bookmarkStart;
    public static ItemsChoiceType16 commentRangeEnd;
    public static ItemsChoiceType16 commentRangeStart;
    public static ItemsChoiceType16 customXmlDelRangeEnd;
    public static ItemsChoiceType16 customXmlDelRangeStart;
    public static ItemsChoiceType16 customXmlInsRangeEnd;
    public static ItemsChoiceType16 customXmlInsRangeStart;
    public static ItemsChoiceType16 customXmlMoveFromRangeEnd;
    public static ItemsChoiceType16 customXmlMoveFromRangeStart;
    public static ItemsChoiceType16 customXmlMoveToRangeEnd;
    public static ItemsChoiceType16 customXmlMoveToRangeStart;
    public static ItemsChoiceType16 del;
    public static ItemsChoiceType16 ins;
    public static ItemsChoiceType16 moveFrom;
    public static ItemsChoiceType16 moveFromRangeEnd;
    public static ItemsChoiceType16 moveFromRangeStart;
    public static ItemsChoiceType16 moveTo;
    public static ItemsChoiceType16 moveToRangeEnd;
    public static ItemsChoiceType16 moveToRangeStart;
    public static ItemsChoiceType16 permEnd;
    public static ItemsChoiceType16 permStart;
    public static ItemsChoiceType16 proofErr;
    public static ItemsChoiceType16 r;
}
[XmlTypeAttribute]
public enum NPOI.OpenXmlFormats.Wordprocessing.ItemsChoiceType18 : Enum {
    public int value__;
    [XmlEnumAttribute("http://schemas.openxmlformats.org/officeDocument/2006/math:oMath")]
public static ItemsChoiceType18 oMath;
    [XmlEnumAttribute("http://schemas.openxmlformats.org/officeDocument/2006/math:oMathPara")]
public static ItemsChoiceType18 oMathPara;
    public static ItemsChoiceType18 bookmarkEnd;
    public static ItemsChoiceType18 bookmarkStart;
    public static ItemsChoiceType18 commentRangeEnd;
    public static ItemsChoiceType18 commentRangeStart;
    public static ItemsChoiceType18 customXml;
    public static ItemsChoiceType18 customXmlDelRangeEnd;
    public static ItemsChoiceType18 customXmlDelRangeStart;
    public static ItemsChoiceType18 customXmlInsRangeEnd;
    public static ItemsChoiceType18 customXmlInsRangeStart;
    public static ItemsChoiceType18 customXmlMoveFromRangeEnd;
    public static ItemsChoiceType18 customXmlMoveFromRangeStart;
    public static ItemsChoiceType18 customXmlMoveToRangeEnd;
    public static ItemsChoiceType18 customXmlMoveToRangeStart;
    public static ItemsChoiceType18 del;
    public static ItemsChoiceType18 fldSimple;
    public static ItemsChoiceType18 hyperlink;
    public static ItemsChoiceType18 ins;
    public static ItemsChoiceType18 moveFrom;
    public static ItemsChoiceType18 moveFromRangeEnd;
    public static ItemsChoiceType18 moveFromRangeStart;
    public static ItemsChoiceType18 moveTo;
    public static ItemsChoiceType18 moveToRangeEnd;
    public static ItemsChoiceType18 moveToRangeStart;
    public static ItemsChoiceType18 permEnd;
    public static ItemsChoiceType18 permStart;
    public static ItemsChoiceType18 proofErr;
    public static ItemsChoiceType18 r;
    public static ItemsChoiceType18 sdt;
    public static ItemsChoiceType18 smartTag;
    public static ItemsChoiceType18 subDoc;
}
[XmlTypeAttribute]
public enum NPOI.OpenXmlFormats.Wordprocessing.ItemsChoiceType19 : Enum {
    public int value__;
    [XmlEnumAttribute("http://schemas.openxmlformats.org/officeDocument/2006/math:oMath")]
public static ItemsChoiceType19 oMath;
    [XmlEnumAttribute("http://schemas.openxmlformats.org/officeDocument/2006/math:oMathPara")]
public static ItemsChoiceType19 oMathPara;
    public static ItemsChoiceType19 bookmarkEnd;
    public static ItemsChoiceType19 bookmarkStart;
    public static ItemsChoiceType19 commentRangeEnd;
    public static ItemsChoiceType19 commentRangeStart;
    public static ItemsChoiceType19 customXml;
    public static ItemsChoiceType19 customXmlDelRangeEnd;
    public static ItemsChoiceType19 customXmlDelRangeStart;
    public static ItemsChoiceType19 customXmlInsRangeEnd;
    public static ItemsChoiceType19 customXmlInsRangeStart;
    public static ItemsChoiceType19 customXmlMoveFromRangeEnd;
    public static ItemsChoiceType19 customXmlMoveFromRangeStart;
    public static ItemsChoiceType19 customXmlMoveToRangeEnd;
    public static ItemsChoiceType19 customXmlMoveToRangeStart;
    public static ItemsChoiceType19 del;
    public static ItemsChoiceType19 ins;
    public static ItemsChoiceType19 moveFrom;
    public static ItemsChoiceType19 moveFromRangeEnd;
    public static ItemsChoiceType19 moveFromRangeStart;
    public static ItemsChoiceType19 moveTo;
    public static ItemsChoiceType19 moveToRangeEnd;
    public static ItemsChoiceType19 moveToRangeStart;
    public static ItemsChoiceType19 p;
    public static ItemsChoiceType19 permEnd;
    public static ItemsChoiceType19 permStart;
    public static ItemsChoiceType19 proofErr;
    public static ItemsChoiceType19 sdt;
    public static ItemsChoiceType19 tbl;
}
[XmlTypeAttribute]
public enum NPOI.OpenXmlFormats.Wordprocessing.ItemsChoiceType2 : Enum {
    public int value__;
    public static ItemsChoiceType2 cantSplit;
    public static ItemsChoiceType2 cnfStyle;
    public static ItemsChoiceType2 divId;
    public static ItemsChoiceType2 gridAfter;
    public static ItemsChoiceType2 gridBefore;
    public static ItemsChoiceType2 hidden;
    public static ItemsChoiceType2 jc;
    public static ItemsChoiceType2 tblCellSpacing;
    public static ItemsChoiceType2 tblHeader;
    public static ItemsChoiceType2 trHeight;
    public static ItemsChoiceType2 wAfter;
    public static ItemsChoiceType2 wBefore;
}
[XmlTypeAttribute]
public enum NPOI.OpenXmlFormats.Wordprocessing.ItemsChoiceType21 : Enum {
    public int value__;
    [XmlEnumAttribute("http://schemas.openxmlformats.org/officeDocument/2006/math:oMath")]
public static ItemsChoiceType21 oMath;
    [XmlEnumAttribute("http://schemas.openxmlformats.org/officeDocument/2006/math:oMathPara")]
public static ItemsChoiceType21 oMathPara;
    public static ItemsChoiceType21 bookmarkEnd;
    public static ItemsChoiceType21 bookmarkStart;
    public static ItemsChoiceType21 commentRangeEnd;
    public static ItemsChoiceType21 commentRangeStart;
    public static ItemsChoiceType21 customXml;
    public static ItemsChoiceType21 customXmlDelRangeEnd;
    public static ItemsChoiceType21 customXmlDelRangeStart;
    public static ItemsChoiceType21 customXmlInsRangeEnd;
    public static ItemsChoiceType21 customXmlInsRangeStart;
    public static ItemsChoiceType21 customXmlMoveFromRangeEnd;
    public static ItemsChoiceType21 customXmlMoveFromRangeStart;
    public static ItemsChoiceType21 customXmlMoveToRangeEnd;
    public static ItemsChoiceType21 customXmlMoveToRangeStart;
    public static ItemsChoiceType21 del;
    public static ItemsChoiceType21 ins;
    public static ItemsChoiceType21 moveFrom;
    public static ItemsChoiceType21 moveFromRangeEnd;
    public static ItemsChoiceType21 moveFromRangeStart;
    public static ItemsChoiceType21 moveTo;
    public static ItemsChoiceType21 moveToRangeEnd;
    public static ItemsChoiceType21 moveToRangeStart;
    public static ItemsChoiceType21 permEnd;
    public static ItemsChoiceType21 permStart;
    public static ItemsChoiceType21 proofErr;
    public static ItemsChoiceType21 sdt;
    public static ItemsChoiceType21 tr;
}
[XmlTypeAttribute]
public enum NPOI.OpenXmlFormats.Wordprocessing.ItemsChoiceType22 : Enum {
    public int value__;
    [XmlEnumAttribute("http://schemas.openxmlformats.org/officeDocument/2006/math:oMath")]
public static ItemsChoiceType22 oMath;
    [XmlEnumAttribute("http://schemas.openxmlformats.org/officeDocument/2006/math:oMathPara")]
public static ItemsChoiceType22 oMathPara;
    public static ItemsChoiceType22 bookmarkEnd;
    public static ItemsChoiceType22 bookmarkStart;
    public static ItemsChoiceType22 commentRangeEnd;
    public static ItemsChoiceType22 commentRangeStart;
    public static ItemsChoiceType22 customXml;
    public static ItemsChoiceType22 customXmlDelRangeEnd;
    public static ItemsChoiceType22 customXmlDelRangeStart;
    public static ItemsChoiceType22 customXmlInsRangeEnd;
    public static ItemsChoiceType22 customXmlInsRangeStart;
    public static ItemsChoiceType22 customXmlMoveFromRangeEnd;
    public static ItemsChoiceType22 customXmlMoveFromRangeStart;
    public static ItemsChoiceType22 customXmlMoveToRangeEnd;
    public static ItemsChoiceType22 customXmlMoveToRangeStart;
    public static ItemsChoiceType22 del;
    public static ItemsChoiceType22 ins;
    public static ItemsChoiceType22 moveFrom;
    public static ItemsChoiceType22 moveFromRangeEnd;
    public static ItemsChoiceType22 moveFromRangeStart;
    public static ItemsChoiceType22 moveTo;
    public static ItemsChoiceType22 moveToRangeEnd;
    public static ItemsChoiceType22 moveToRangeStart;
    public static ItemsChoiceType22 permEnd;
    public static ItemsChoiceType22 permStart;
    public static ItemsChoiceType22 proofErr;
    public static ItemsChoiceType22 sdt;
    public static ItemsChoiceType22 tr;
}
[XmlTypeAttribute]
public enum NPOI.OpenXmlFormats.Wordprocessing.ItemsChoiceType23 : Enum {
    public int value__;
    [XmlEnumAttribute("http://schemas.openxmlformats.org/officeDocument/2006/math:oMath")]
public static ItemsChoiceType23 oMath;
    [XmlEnumAttribute("http://schemas.openxmlformats.org/officeDocument/2006/math:oMathPara")]
public static ItemsChoiceType23 oMathPara;
    public static ItemsChoiceType23 bookmarkEnd;
    public static ItemsChoiceType23 bookmarkStart;
    public static ItemsChoiceType23 commentRangeEnd;
    public static ItemsChoiceType23 commentRangeStart;
    public static ItemsChoiceType23 customXml;
    public static ItemsChoiceType23 customXmlDelRangeEnd;
    public static ItemsChoiceType23 customXmlDelRangeStart;
    public static ItemsChoiceType23 customXmlInsRangeEnd;
    public static ItemsChoiceType23 customXmlInsRangeStart;
    public static ItemsChoiceType23 customXmlMoveFromRangeEnd;
    public static ItemsChoiceType23 customXmlMoveFromRangeStart;
    public static ItemsChoiceType23 customXmlMoveToRangeEnd;
    public static ItemsChoiceType23 customXmlMoveToRangeStart;
    public static ItemsChoiceType23 del;
    public static ItemsChoiceType23 ins;
    public static ItemsChoiceType23 moveFrom;
    public static ItemsChoiceType23 moveFromRangeEnd;
    public static ItemsChoiceType23 moveFromRangeStart;
    public static ItemsChoiceType23 moveTo;
    public static ItemsChoiceType23 moveToRangeEnd;
    public static ItemsChoiceType23 moveToRangeStart;
    public static ItemsChoiceType23 permEnd;
    public static ItemsChoiceType23 permStart;
    public static ItemsChoiceType23 proofErr;
    public static ItemsChoiceType23 sdt;
    public static ItemsChoiceType23 tc;
}
[XmlTypeAttribute]
public enum NPOI.OpenXmlFormats.Wordprocessing.ItemsChoiceType24 : Enum {
    public int value__;
    [XmlEnumAttribute("http://schemas.openxmlformats.org/officeDocument/2006/math:oMath")]
public static ItemsChoiceType24 oMath;
    [XmlEnumAttribute("http://schemas.openxmlformats.org/officeDocument/2006/math:oMathPara")]
public static ItemsChoiceType24 oMathPara;
    public static ItemsChoiceType24 bookmarkEnd;
    public static ItemsChoiceType24 bookmarkStart;
    public static ItemsChoiceType24 commentRangeEnd;
    public static ItemsChoiceType24 commentRangeStart;
    public static ItemsChoiceType24 customXml;
    public static ItemsChoiceType24 customXmlDelRangeEnd;
    public static ItemsChoiceType24 customXmlDelRangeStart;
    public static ItemsChoiceType24 customXmlInsRangeEnd;
    public static ItemsChoiceType24 customXmlInsRangeStart;
    public static ItemsChoiceType24 customXmlMoveFromRangeEnd;
    public static ItemsChoiceType24 customXmlMoveFromRangeStart;
    public static ItemsChoiceType24 customXmlMoveToRangeEnd;
    public static ItemsChoiceType24 customXmlMoveToRangeStart;
    public static ItemsChoiceType24 del;
    public static ItemsChoiceType24 fldSimple;
    public static ItemsChoiceType24 hyperlink;
    public static ItemsChoiceType24 ins;
    public static ItemsChoiceType24 moveFrom;
    public static ItemsChoiceType24 moveFromRangeEnd;
    public static ItemsChoiceType24 moveFromRangeStart;
    public static ItemsChoiceType24 moveTo;
    public static ItemsChoiceType24 moveToRangeEnd;
    public static ItemsChoiceType24 moveToRangeStart;
    public static ItemsChoiceType24 permEnd;
    public static ItemsChoiceType24 permStart;
    public static ItemsChoiceType24 proofErr;
    public static ItemsChoiceType24 r;
    public static ItemsChoiceType24 sdt;
    public static ItemsChoiceType24 smartTag;
    public static ItemsChoiceType24 subDoc;
}
[XmlTypeAttribute]
public enum NPOI.OpenXmlFormats.Wordprocessing.ItemsChoiceType25 : Enum {
    public int value__;
    [XmlEnumAttribute("http://schemas.openxmlformats.org/officeDocument/2006/math:oMath")]
public static ItemsChoiceType25 oMath;
    [XmlEnumAttribute("http://schemas.openxmlformats.org/officeDocument/2006/math:oMathPara")]
public static ItemsChoiceType25 oMathPara;
    public static ItemsChoiceType25 bookmarkEnd;
    public static ItemsChoiceType25 bookmarkStart;
    public static ItemsChoiceType25 commentRangeEnd;
    public static ItemsChoiceType25 commentRangeStart;
    public static ItemsChoiceType25 customXml;
    public static ItemsChoiceType25 customXmlDelRangeEnd;
    public static ItemsChoiceType25 customXmlDelRangeStart;
    public static ItemsChoiceType25 customXmlInsRangeEnd;
    public static ItemsChoiceType25 customXmlInsRangeStart;
    public static ItemsChoiceType25 customXmlMoveFromRangeEnd;
    public static ItemsChoiceType25 customXmlMoveFromRangeStart;
    public static ItemsChoiceType25 customXmlMoveToRangeEnd;
    public static ItemsChoiceType25 customXmlMoveToRangeStart;
    public static ItemsChoiceType25 del;
    public static ItemsChoiceType25 fldSimple;
    public static ItemsChoiceType25 hyperlink;
    public static ItemsChoiceType25 ins;
    public static ItemsChoiceType25 moveFrom;
    public static ItemsChoiceType25 moveFromRangeEnd;
    public static ItemsChoiceType25 moveFromRangeStart;
    public static ItemsChoiceType25 moveTo;
    public static ItemsChoiceType25 moveToRangeEnd;
    public static ItemsChoiceType25 moveToRangeStart;
    public static ItemsChoiceType25 permEnd;
    public static ItemsChoiceType25 permStart;
    public static ItemsChoiceType25 proofErr;
    public static ItemsChoiceType25 r;
    public static ItemsChoiceType25 sdt;
    public static ItemsChoiceType25 smartTag;
    public static ItemsChoiceType25 subDoc;
}
[XmlTypeAttribute]
public enum NPOI.OpenXmlFormats.Wordprocessing.ItemsChoiceType26 : Enum {
    public int value__;
    [XmlEnumAttribute("http://schemas.openxmlformats.org/officeDocument/2006/math:oMath")]
public static ItemsChoiceType26 oMath;
    [XmlEnumAttribute("http://schemas.openxmlformats.org/officeDocument/2006/math:oMathPara")]
public static ItemsChoiceType26 oMathPara;
    public static ItemsChoiceType26 bookmarkEnd;
    public static ItemsChoiceType26 bookmarkStart;
    public static ItemsChoiceType26 commentRangeEnd;
    public static ItemsChoiceType26 commentRangeStart;
    public static ItemsChoiceType26 customXml;
    public static ItemsChoiceType26 customXmlDelRangeEnd;
    public static ItemsChoiceType26 customXmlDelRangeStart;
    public static ItemsChoiceType26 customXmlInsRangeEnd;
    public static ItemsChoiceType26 customXmlInsRangeStart;
    public static ItemsChoiceType26 customXmlMoveFromRangeEnd;
    public static ItemsChoiceType26 customXmlMoveFromRangeStart;
    public static ItemsChoiceType26 customXmlMoveToRangeEnd;
    public static ItemsChoiceType26 customXmlMoveToRangeStart;
    public static ItemsChoiceType26 del;
    public static ItemsChoiceType26 ins;
    public static ItemsChoiceType26 moveFrom;
    public static ItemsChoiceType26 moveFromRangeEnd;
    public static ItemsChoiceType26 moveFromRangeStart;
    public static ItemsChoiceType26 moveTo;
    public static ItemsChoiceType26 moveToRangeEnd;
    public static ItemsChoiceType26 moveToRangeStart;
    public static ItemsChoiceType26 p;
    public static ItemsChoiceType26 permEnd;
    public static ItemsChoiceType26 permStart;
    public static ItemsChoiceType26 proofErr;
    public static ItemsChoiceType26 sdt;
    public static ItemsChoiceType26 tbl;
}
[XmlTypeAttribute]
public enum NPOI.OpenXmlFormats.Wordprocessing.ItemsChoiceType27 : Enum {
    public int value__;
    [XmlEnumAttribute("http://schemas.openxmlformats.org/officeDocument/2006/math:oMath")]
public static ItemsChoiceType27 oMath;
    [XmlEnumAttribute("http://schemas.openxmlformats.org/officeDocument/2006/math:oMathPara")]
public static ItemsChoiceType27 oMathPara;
    public static ItemsChoiceType27 bookmarkEnd;
    public static ItemsChoiceType27 bookmarkStart;
    public static ItemsChoiceType27 commentRangeEnd;
    public static ItemsChoiceType27 commentRangeStart;
    public static ItemsChoiceType27 customXml;
    public static ItemsChoiceType27 customXmlDelRangeEnd;
    public static ItemsChoiceType27 customXmlDelRangeStart;
    public static ItemsChoiceType27 customXmlInsRangeEnd;
    public static ItemsChoiceType27 customXmlInsRangeStart;
    public static ItemsChoiceType27 customXmlMoveFromRangeEnd;
    public static ItemsChoiceType27 customXmlMoveFromRangeStart;
    public static ItemsChoiceType27 customXmlMoveToRangeEnd;
    public static ItemsChoiceType27 customXmlMoveToRangeStart;
    public static ItemsChoiceType27 del;
    public static ItemsChoiceType27 ins;
    public static ItemsChoiceType27 moveFrom;
    public static ItemsChoiceType27 moveFromRangeEnd;
    public static ItemsChoiceType27 moveFromRangeStart;
    public static ItemsChoiceType27 moveTo;
    public static ItemsChoiceType27 moveToRangeEnd;
    public static ItemsChoiceType27 moveToRangeStart;
    public static ItemsChoiceType27 permEnd;
    public static ItemsChoiceType27 permStart;
    public static ItemsChoiceType27 proofErr;
    public static ItemsChoiceType27 sdt;
    public static ItemsChoiceType27 tc;
}
[XmlTypeAttribute]
public enum NPOI.OpenXmlFormats.Wordprocessing.ItemsChoiceType3 : Enum {
    public int value__;
    public static ItemsChoiceType3 b;
    public static ItemsChoiceType3 bCs;
    public static ItemsChoiceType3 bdr;
    public static ItemsChoiceType3 caps;
    public static ItemsChoiceType3 color;
    public static ItemsChoiceType3 cs;
    public static ItemsChoiceType3 dstrike;
    public static ItemsChoiceType3 eastAsianLayout;
    public static ItemsChoiceType3 effect;
    public static ItemsChoiceType3 em;
    public static ItemsChoiceType3 emboss;
    public static ItemsChoiceType3 fitText;
    public static ItemsChoiceType3 highlight;
    public static ItemsChoiceType3 i;
    public static ItemsChoiceType3 iCs;
    public static ItemsChoiceType3 imprint;
    public static ItemsChoiceType3 kern;
    public static ItemsChoiceType3 lang;
    public static ItemsChoiceType3 noProof;
    public static ItemsChoiceType3 oMath;
    public static ItemsChoiceType3 outline;
    public static ItemsChoiceType3 position;
    public static ItemsChoiceType3 rFonts;
    public static ItemsChoiceType3 rStyle;
    public static ItemsChoiceType3 rtl;
    public static ItemsChoiceType3 shadow;
    public static ItemsChoiceType3 shd;
    public static ItemsChoiceType3 smallCaps;
    public static ItemsChoiceType3 snapToGrid;
    public static ItemsChoiceType3 spacing;
    public static ItemsChoiceType3 specVanish;
    public static ItemsChoiceType3 strike;
    public static ItemsChoiceType3 sz;
    public static ItemsChoiceType3 szCs;
    public static ItemsChoiceType3 u;
    public static ItemsChoiceType3 vanish;
    public static ItemsChoiceType3 vertAlign;
    public static ItemsChoiceType3 w;
    public static ItemsChoiceType3 webHidden;
}
[XmlTypeAttribute]
public enum NPOI.OpenXmlFormats.Wordprocessing.ItemsChoiceType30 : Enum {
    public int value__;
    public static ItemsChoiceType30 bookmarkEnd;
    public static ItemsChoiceType30 bookmarkStart;
    public static ItemsChoiceType30 commentRangeEnd;
    public static ItemsChoiceType30 commentRangeStart;
    public static ItemsChoiceType30 customXmlDelRangeEnd;
    public static ItemsChoiceType30 customXmlDelRangeStart;
    public static ItemsChoiceType30 customXmlInsRangeEnd;
    public static ItemsChoiceType30 customXmlInsRangeStart;
    public static ItemsChoiceType30 customXmlMoveFromRangeEnd;
    public static ItemsChoiceType30 customXmlMoveFromRangeStart;
    public static ItemsChoiceType30 customXmlMoveToRangeEnd;
    public static ItemsChoiceType30 customXmlMoveToRangeStart;
    public static ItemsChoiceType30 moveFromRangeEnd;
    public static ItemsChoiceType30 moveFromRangeStart;
    public static ItemsChoiceType30 moveToRangeEnd;
    public static ItemsChoiceType30 moveToRangeStart;
}
[XmlTypeAttribute]
public enum NPOI.OpenXmlFormats.Wordprocessing.ItemsChoiceType5 : Enum {
    public int value__;
    public static ItemsChoiceType5 b;
    public static ItemsChoiceType5 bCs;
    public static ItemsChoiceType5 bdr;
    public static ItemsChoiceType5 caps;
    public static ItemsChoiceType5 color;
    public static ItemsChoiceType5 cs;
    public static ItemsChoiceType5 dstrike;
    public static ItemsChoiceType5 eastAsianLayout;
    public static ItemsChoiceType5 effect;
    public static ItemsChoiceType5 em;
    public static ItemsChoiceType5 emboss;
    public static ItemsChoiceType5 fitText;
    public static ItemsChoiceType5 highlight;
    public static ItemsChoiceType5 i;
    public static ItemsChoiceType5 iCs;
    public static ItemsChoiceType5 imprint;
    public static ItemsChoiceType5 kern;
    public static ItemsChoiceType5 lang;
    public static ItemsChoiceType5 noProof;
    public static ItemsChoiceType5 oMath;
    public static ItemsChoiceType5 outline;
    public static ItemsChoiceType5 position;
    public static ItemsChoiceType5 rFonts;
    public static ItemsChoiceType5 rStyle;
    public static ItemsChoiceType5 rtl;
    public static ItemsChoiceType5 shadow;
    public static ItemsChoiceType5 shd;
    public static ItemsChoiceType5 smallCaps;
    public static ItemsChoiceType5 snapToGrid;
    public static ItemsChoiceType5 spacing;
    public static ItemsChoiceType5 specVanish;
    public static ItemsChoiceType5 strike;
    public static ItemsChoiceType5 sz;
    public static ItemsChoiceType5 szCs;
    public static ItemsChoiceType5 u;
    public static ItemsChoiceType5 vanish;
    public static ItemsChoiceType5 vertAlign;
    public static ItemsChoiceType5 w;
    public static ItemsChoiceType5 webHidden;
}
[XmlTypeAttribute]
public enum NPOI.OpenXmlFormats.Wordprocessing.ItemsChoiceType50 : Enum {
    public int value__;
    [XmlEnumAttribute("http://schemas.openxmlformats.org/officeDocument/2006/math:oMath")]
public static ItemsChoiceType50 oMath;
    [XmlEnumAttribute("http://schemas.openxmlformats.org/officeDocument/2006/math:oMathPara")]
public static ItemsChoiceType50 oMathPara;
    public static ItemsChoiceType50 altChunk;
    public static ItemsChoiceType50 bookmarkEnd;
    public static ItemsChoiceType50 bookmarkStart;
    public static ItemsChoiceType50 commentRangeEnd;
    public static ItemsChoiceType50 commentRangeStart;
    public static ItemsChoiceType50 customXml;
    public static ItemsChoiceType50 customXmlDelRangeEnd;
    public static ItemsChoiceType50 customXmlDelRangeStart;
    public static ItemsChoiceType50 customXmlInsRangeEnd;
    public static ItemsChoiceType50 customXmlInsRangeStart;
    public static ItemsChoiceType50 customXmlMoveFromRangeEnd;
    public static ItemsChoiceType50 customXmlMoveFromRangeStart;
    public static ItemsChoiceType50 customXmlMoveToRangeEnd;
    public static ItemsChoiceType50 customXmlMoveToRangeStart;
    public static ItemsChoiceType50 del;
    public static ItemsChoiceType50 ins;
    public static ItemsChoiceType50 moveFrom;
    public static ItemsChoiceType50 moveFromRangeEnd;
    public static ItemsChoiceType50 moveFromRangeStart;
    public static ItemsChoiceType50 moveTo;
    public static ItemsChoiceType50 moveToRangeEnd;
    public static ItemsChoiceType50 moveToRangeStart;
    public static ItemsChoiceType50 p;
    public static ItemsChoiceType50 permEnd;
    public static ItemsChoiceType50 permStart;
    public static ItemsChoiceType50 proofErr;
    public static ItemsChoiceType50 sdt;
    public static ItemsChoiceType50 tbl;
}
[XmlTypeAttribute]
public enum NPOI.OpenXmlFormats.Wordprocessing.ItemsChoiceType6 : Enum {
    public int value__;
    [XmlEnumAttribute("http://schemas.openxmlformats.org/officeDocument/2006/math:acc")]
public static ItemsChoiceType6 acc;
    [XmlEnumAttribute("http://schemas.openxmlformats.org/officeDocument/2006/math:bar")]
public static ItemsChoiceType6 bar;
    [XmlEnumAttribute("http://schemas.openxmlformats.org/officeDocument/2006/math:borderBox")]
public static ItemsChoiceType6 borderBox;
    [XmlEnumAttribute("http://schemas.openxmlformats.org/officeDocument/2006/math:box")]
public static ItemsChoiceType6 box;
    [XmlEnumAttribute("http://schemas.openxmlformats.org/officeDocument/2006/math:d")]
public static ItemsChoiceType6 d;
    [XmlEnumAttribute("http://schemas.openxmlformats.org/officeDocument/2006/math:eqArr")]
public static ItemsChoiceType6 eqArr;
    [XmlEnumAttribute("http://schemas.openxmlformats.org/officeDocument/2006/math:f")]
public static ItemsChoiceType6 f;
    [XmlEnumAttribute("http://schemas.openxmlformats.org/officeDocument/2006/math:func")]
public static ItemsChoiceType6 func;
    [XmlEnumAttribute("http://schemas.openxmlformats.org/officeDocument/2006/math:groupChr")]
public static ItemsChoiceType6 groupChr;
    [XmlEnumAttribute("http://schemas.openxmlformats.org/officeDocument/2006/math:limLow")]
public static ItemsChoiceType6 limLow;
    [XmlEnumAttribute("http://schemas.openxmlformats.org/officeDocument/2006/math:limUpp")]
public static ItemsChoiceType6 limUpp;
    [XmlEnumAttribute("http://schemas.openxmlformats.org/officeDocument/2006/math:m")]
public static ItemsChoiceType6 m;
    [XmlEnumAttribute("http://schemas.openxmlformats.org/officeDocument/2006/math:nary")]
public static ItemsChoiceType6 nary;
    [XmlEnumAttribute("http://schemas.openxmlformats.org/officeDocument/2006/math:oMath")]
public static ItemsChoiceType6 oMath;
    [XmlEnumAttribute("http://schemas.openxmlformats.org/officeDocument/2006/math:oMathPara")]
public static ItemsChoiceType6 oMathPara;
    [XmlEnumAttribute("http://schemas.openxmlformats.org/officeDocument/2006/math:phant")]
public static ItemsChoiceType6 phant;
    [XmlEnumAttribute("http://schemas.openxmlformats.org/officeDocument/2006/math:r")]
public static ItemsChoiceType6 r;
    [XmlEnumAttribute("http://schemas.openxmlformats.org/officeDocument/2006/math:rad")]
public static ItemsChoiceType6 rad;
    [XmlEnumAttribute("http://schemas.openxmlformats.org/officeDocument/2006/math:sPre")]
public static ItemsChoiceType6 sPre;
    [XmlEnumAttribute("http://schemas.openxmlformats.org/officeDocument/2006/math:sSub")]
public static ItemsChoiceType6 sSub;
    [XmlEnumAttribute("http://schemas.openxmlformats.org/officeDocument/2006/math:sSubSup")]
public static ItemsChoiceType6 sSubSup;
    [XmlEnumAttribute("http://schemas.openxmlformats.org/officeDocument/2006/math:sSup")]
public static ItemsChoiceType6 sSup;
    public static ItemsChoiceType6 bookmarkEnd;
    public static ItemsChoiceType6 bookmarkStart;
    public static ItemsChoiceType6 commentRangeEnd;
    public static ItemsChoiceType6 commentRangeStart;
    public static ItemsChoiceType6 customXml;
    public static ItemsChoiceType6 customXmlDelRangeEnd;
    public static ItemsChoiceType6 customXmlDelRangeStart;
    public static ItemsChoiceType6 customXmlInsRangeEnd;
    public static ItemsChoiceType6 customXmlInsRangeStart;
    public static ItemsChoiceType6 customXmlMoveFromRangeEnd;
    public static ItemsChoiceType6 customXmlMoveFromRangeStart;
    public static ItemsChoiceType6 customXmlMoveToRangeEnd;
    public static ItemsChoiceType6 customXmlMoveToRangeStart;
    public static ItemsChoiceType6 del;
    public static ItemsChoiceType6 ins;
    public static ItemsChoiceType6 moveFrom;
    public static ItemsChoiceType6 moveFromRangeEnd;
    public static ItemsChoiceType6 moveFromRangeStart;
    public static ItemsChoiceType6 moveTo;
    public static ItemsChoiceType6 moveToRangeEnd;
    public static ItemsChoiceType6 moveToRangeStart;
    public static ItemsChoiceType6 permEnd;
    public static ItemsChoiceType6 permStart;
    public static ItemsChoiceType6 proofErr;
    [XmlEnumAttribute("r")]
public static ItemsChoiceType6 r1;
    public static ItemsChoiceType6 sdt;
    public static ItemsChoiceType6 smartTag;
}
[XmlTypeAttribute]
public enum NPOI.OpenXmlFormats.Wordprocessing.ItemsChoiceType7 : Enum {
    public int value__;
    [XmlEnumAttribute("http://schemas.openxmlformats.org/officeDocument/2006/math:oMath")]
public static ItemsChoiceType7 oMath;
    [XmlEnumAttribute("http://schemas.openxmlformats.org/officeDocument/2006/math:oMathPara")]
public static ItemsChoiceType7 oMathPara;
    public static ItemsChoiceType7 altChunk;
    public static ItemsChoiceType7 bookmarkEnd;
    public static ItemsChoiceType7 bookmarkStart;
    public static ItemsChoiceType7 commentRangeEnd;
    public static ItemsChoiceType7 commentRangeStart;
    public static ItemsChoiceType7 customXml;
    public static ItemsChoiceType7 customXmlDelRangeEnd;
    public static ItemsChoiceType7 customXmlDelRangeStart;
    public static ItemsChoiceType7 customXmlInsRangeEnd;
    public static ItemsChoiceType7 customXmlInsRangeStart;
    public static ItemsChoiceType7 customXmlMoveFromRangeEnd;
    public static ItemsChoiceType7 customXmlMoveFromRangeStart;
    public static ItemsChoiceType7 customXmlMoveToRangeEnd;
    public static ItemsChoiceType7 customXmlMoveToRangeStart;
    public static ItemsChoiceType7 del;
    public static ItemsChoiceType7 ins;
    public static ItemsChoiceType7 moveFrom;
    public static ItemsChoiceType7 moveFromRangeEnd;
    public static ItemsChoiceType7 moveFromRangeStart;
    public static ItemsChoiceType7 moveTo;
    public static ItemsChoiceType7 moveToRangeEnd;
    public static ItemsChoiceType7 moveToRangeStart;
    public static ItemsChoiceType7 p;
    public static ItemsChoiceType7 permEnd;
    public static ItemsChoiceType7 permStart;
    public static ItemsChoiceType7 proofErr;
    public static ItemsChoiceType7 sdt;
    public static ItemsChoiceType7 tbl;
}
[XmlTypeAttribute]
public enum NPOI.OpenXmlFormats.Wordprocessing.ItemsChoiceType8 : Enum {
    public int value__;
    [XmlEnumAttribute("http://schemas.openxmlformats.org/officeDocument/2006/math:oMath")]
public static ItemsChoiceType8 oMath;
    [XmlEnumAttribute("http://schemas.openxmlformats.org/officeDocument/2006/math:oMathPara")]
public static ItemsChoiceType8 oMathPara;
    public static ItemsChoiceType8 altChunk;
    public static ItemsChoiceType8 bookmarkEnd;
    public static ItemsChoiceType8 bookmarkStart;
    public static ItemsChoiceType8 commentRangeEnd;
    public static ItemsChoiceType8 commentRangeStart;
    public static ItemsChoiceType8 customXml;
    public static ItemsChoiceType8 customXmlDelRangeEnd;
    public static ItemsChoiceType8 customXmlDelRangeStart;
    public static ItemsChoiceType8 customXmlInsRangeEnd;
    public static ItemsChoiceType8 customXmlInsRangeStart;
    public static ItemsChoiceType8 customXmlMoveFromRangeEnd;
    public static ItemsChoiceType8 customXmlMoveFromRangeStart;
    public static ItemsChoiceType8 customXmlMoveToRangeEnd;
    public static ItemsChoiceType8 customXmlMoveToRangeStart;
    public static ItemsChoiceType8 del;
    public static ItemsChoiceType8 ins;
    public static ItemsChoiceType8 moveFrom;
    public static ItemsChoiceType8 moveFromRangeEnd;
    public static ItemsChoiceType8 moveFromRangeStart;
    public static ItemsChoiceType8 moveTo;
    public static ItemsChoiceType8 moveToRangeEnd;
    public static ItemsChoiceType8 moveToRangeStart;
    public static ItemsChoiceType8 p;
    public static ItemsChoiceType8 permEnd;
    public static ItemsChoiceType8 permStart;
    public static ItemsChoiceType8 proofErr;
    public static ItemsChoiceType8 sdt;
    public static ItemsChoiceType8 tbl;
}
[XmlTypeAttribute]
public enum NPOI.OpenXmlFormats.Wordprocessing.ItemsChoiceType9 : Enum {
    public int value__;
    [XmlEnumAttribute("urn:schemas-microsoft-com:office:office:")]
public static ItemsChoiceType9 office;
    [XmlEnumAttribute("urn:schemas-microsoft-com:vml:")]
public static ItemsChoiceType9 vml;
}
public class NPOI.OpenXmlFormats.Wordprocessing.NumberingDocument : object {
    private CT_Numbering numbering;
    public CT_Numbering Numbering { get; }
    public NumberingDocument(CT_Numbering numbering);
    public CT_Numbering get_Numbering();
    public void Save(Stream stream);
    public static NumberingDocument Parse(XmlDocument doc, XmlNamespaceManager NameSpaceManager);
}
[XmlTypeAttribute]
public enum NPOI.OpenXmlFormats.Wordprocessing.ParagraphItemsChoiceType : Enum {
    public int value__;
    [XmlEnumAttribute("http://schemas.openxmlformats.org/officeDocument/2006/math:oMath")]
public static ParagraphItemsChoiceType oMath;
    [XmlEnumAttribute("http://schemas.openxmlformats.org/officeDocument/2006/math:oMathPara")]
public static ParagraphItemsChoiceType oMathPara;
    public static ParagraphItemsChoiceType bookmarkEnd;
    public static ParagraphItemsChoiceType bookmarkStart;
    public static ParagraphItemsChoiceType commentRangeEnd;
    public static ParagraphItemsChoiceType commentRangeStart;
    public static ParagraphItemsChoiceType customXml;
    public static ParagraphItemsChoiceType customXmlDelRangeEnd;
    public static ParagraphItemsChoiceType customXmlDelRangeStart;
    public static ParagraphItemsChoiceType customXmlInsRangeEnd;
    public static ParagraphItemsChoiceType customXmlInsRangeStart;
    public static ParagraphItemsChoiceType customXmlMoveFromRangeEnd;
    public static ParagraphItemsChoiceType customXmlMoveFromRangeStart;
    public static ParagraphItemsChoiceType customXmlMoveToRangeEnd;
    public static ParagraphItemsChoiceType customXmlMoveToRangeStart;
    public static ParagraphItemsChoiceType del;
    public static ParagraphItemsChoiceType fldSimple;
    public static ParagraphItemsChoiceType hyperlink;
    public static ParagraphItemsChoiceType ins;
    public static ParagraphItemsChoiceType moveFrom;
    public static ParagraphItemsChoiceType moveFromRangeEnd;
    public static ParagraphItemsChoiceType moveFromRangeStart;
    public static ParagraphItemsChoiceType moveTo;
    public static ParagraphItemsChoiceType moveToRangeEnd;
    public static ParagraphItemsChoiceType moveToRangeStart;
    public static ParagraphItemsChoiceType permEnd;
    public static ParagraphItemsChoiceType permStart;
    public static ParagraphItemsChoiceType proofErr;
    public static ParagraphItemsChoiceType r;
    public static ParagraphItemsChoiceType sdt;
    public static ParagraphItemsChoiceType smartTag;
    public static ParagraphItemsChoiceType subDoc;
}
[XmlTypeAttribute]
public enum NPOI.OpenXmlFormats.Wordprocessing.RunItemsChoiceType : Enum {
    public int value__;
    public static RunItemsChoiceType annotationRef;
    public static RunItemsChoiceType br;
    public static RunItemsChoiceType commentReference;
    public static RunItemsChoiceType continuationSeparator;
    public static RunItemsChoiceType cr;
    public static RunItemsChoiceType dayLong;
    public static RunItemsChoiceType dayShort;
    public static RunItemsChoiceType delInstrText;
    public static RunItemsChoiceType delText;
    public static RunItemsChoiceType drawing;
    public static RunItemsChoiceType endnoteRef;
    public static RunItemsChoiceType endnoteReference;
    public static RunItemsChoiceType fldChar;
    public static RunItemsChoiceType footnoteRef;
    public static RunItemsChoiceType footnoteReference;
    public static RunItemsChoiceType instrText;
    public static RunItemsChoiceType lastRenderedPageBreak;
    public static RunItemsChoiceType monthLong;
    public static RunItemsChoiceType monthShort;
    public static RunItemsChoiceType noBreakHyphen;
    public static RunItemsChoiceType object;
    public static RunItemsChoiceType pgNum;
    public static RunItemsChoiceType pict;
    public static RunItemsChoiceType ptab;
    public static RunItemsChoiceType ruby;
    public static RunItemsChoiceType separator;
    public static RunItemsChoiceType softHyphen;
    public static RunItemsChoiceType sym;
    public static RunItemsChoiceType t;
    public static RunItemsChoiceType tab;
    public static RunItemsChoiceType yearLong;
    public static RunItemsChoiceType yearShort;
}
[XmlTypeAttribute]
public enum NPOI.OpenXmlFormats.Wordprocessing.SdtPrElementType : Enum {
    public int value__;
    public static SdtPrElementType alias;
    public static SdtPrElementType bibliography;
    public static SdtPrElementType citation;
    public static SdtPrElementType comboBox;
    public static SdtPrElementType dataBinding;
    public static SdtPrElementType date;
    public static SdtPrElementType docPartList;
    public static SdtPrElementType docPartObj;
    public static SdtPrElementType dropDownList;
    public static SdtPrElementType equation;
    public static SdtPrElementType group;
    public static SdtPrElementType id;
    public static SdtPrElementType lock;
    public static SdtPrElementType picture;
    public static SdtPrElementType placeholder;
    public static SdtPrElementType rPr;
    public static SdtPrElementType richText;
    public static SdtPrElementType showingPlcHdr;
    public static SdtPrElementType tag;
    public static SdtPrElementType temporary;
    public static SdtPrElementType text;
}
public class NPOI.OpenXmlFormats.Wordprocessing.SettingsDocument : object {
    private CT_Settings settings;
    public CT_Settings Settings { get; }
    public SettingsDocument(CT_Settings settings);
    public static SettingsDocument Parse(XmlDocument doc, XmlNamespaceManager NameSpaceManager);
    public void Save(Stream stream);
    public CT_Settings get_Settings();
}
[XmlTypeAttribute]
public enum NPOI.OpenXmlFormats.Wordprocessing.ST_AlgClass : Enum {
    public int value__;
    public static ST_AlgClass hash;
}
[XmlTypeAttribute]
public enum NPOI.OpenXmlFormats.Wordprocessing.ST_AlgType : Enum {
    public int value__;
    public static ST_AlgType typeAny;
}
[XmlTypeAttribute]
public enum NPOI.OpenXmlFormats.Wordprocessing.ST_AnnotationVMerge : Enum {
    public int value__;
    public static ST_AnnotationVMerge cont;
    public static ST_AnnotationVMerge rest;
}
[XmlTypeAttribute]
public enum NPOI.OpenXmlFormats.Wordprocessing.ST_Border : Enum {
    public int value__;
    public static ST_Border nil;
    public static ST_Border none;
    public static ST_Border single;
    public static ST_Border thick;
    public static ST_Border double;
    public static ST_Border dotted;
    public static ST_Border dashed;
    public static ST_Border dotDash;
    public static ST_Border dotDotDash;
    public static ST_Border triple;
    public static ST_Border thinThickSmallGap;
    public static ST_Border thickThinSmallGap;
    public static ST_Border thinThickThinSmallGap;
    public static ST_Border thinThickMediumGap;
    public static ST_Border thickThinMediumGap;
    public static ST_Border thinThickThinMediumGap;
    public static ST_Border thinThickLargeGap;
    public static ST_Border thickThinLargeGap;
    public static ST_Border thinThickThinLargeGap;
    public static ST_Border wave;
    public static ST_Border doubleWave;
    public static ST_Border dashSmallGap;
    public static ST_Border dashDotStroked;
    public static ST_Border threeDEmboss;
    public static ST_Border threeDEngrave;
    public static ST_Border outset;
    public static ST_Border inset;
    public static ST_Border apples;
    public static ST_Border archedScallops;
    public static ST_Border babyPacifier;
    public static ST_Border babyRattle;
    public static ST_Border balloons3Colors;
    public static ST_Border balloonsHotAir;
    public static ST_Border basicBlackDashes;
    public static ST_Border basicBlackDots;
    public static ST_Border basicBlackSquares;
    public static ST_Border basicThinLines;
    public static ST_Border basicWhiteDashes;
    public static ST_Border basicWhiteDots;
    public static ST_Border basicWhiteSquares;
    public static ST_Border basicWideInline;
    public static ST_Border basicWideMidline;
    public static ST_Border basicWideOutline;
    public static ST_Border bats;
    public static ST_Border birds;
    public static ST_Border birdsFlight;
    public static ST_Border cabins;
    public static ST_Border cakeSlice;
    public static ST_Border candyCorn;
    public static ST_Border celticKnotwork;
    public static ST_Border certificateBanner;
    public static ST_Border chainLink;
    public static ST_Border champagneBottle;
    public static ST_Border checkedBarBlack;
    public static ST_Border checkedBarColor;
    public static ST_Border checkered;
    public static ST_Border christmasTree;
    public static ST_Border circlesLines;
    public static ST_Border circlesRectangles;
    public static ST_Border classicalWave;
    public static ST_Border clocks;
    public static ST_Border compass;
    public static ST_Border confetti;
    public static ST_Border confettiGrays;
    public static ST_Border confettiOutline;
    public static ST_Border confettiStreamers;
    public static ST_Border confettiWhite;
    public static ST_Border cornerTriangles;
    public static ST_Border couponCutoutDashes;
    public static ST_Border couponCutoutDots;
    public static ST_Border crazyMaze;
    public static ST_Border creaturesButterfly;
    public static ST_Border creaturesFish;
    public static ST_Border creaturesInsects;
    public static ST_Border creaturesLadyBug;
    public static ST_Border crossStitch;
    public static ST_Border cup;
    public static ST_Border decoArch;
    public static ST_Border decoArchColor;
    public static ST_Border decoBlocks;
    public static ST_Border diamondsGray;
    public static ST_Border doubleD;
    public static ST_Border doubleDiamonds;
    public static ST_Border earth1;
    public static ST_Border earth2;
    public static ST_Border eclipsingSquares1;
    public static ST_Border eclipsingSquares2;
    public static ST_Border eggsBlack;
    public static ST_Border fans;
    public static ST_Border film;
    public static ST_Border firecrackers;
    public static ST_Border flowersBlockPrint;
    public static ST_Border flowersDaisies;
    public static ST_Border flowersModern1;
    public static ST_Border flowersModern2;
    public static ST_Border flowersPansy;
    public static ST_Border flowersRedRose;
    public static ST_Border flowersRoses;
    public static ST_Border flowersTeacup;
    public static ST_Border flowersTiny;
    public static ST_Border gems;
    public static ST_Border gingerbreadMan;
    public static ST_Border gradient;
    public static ST_Border handmade1;
    public static ST_Border handmade2;
    public static ST_Border heartBalloon;
    public static ST_Border heartGray;
    public static ST_Border hearts;
    public static ST_Border heebieJeebies;
    public static ST_Border holly;
    public static ST_Border houseFunky;
    public static ST_Border hypnotic;
    public static ST_Border iceCreamCones;
    public static ST_Border lightBulb;
    public static ST_Border lightning1;
    public static ST_Border lightning2;
    public static ST_Border mapPins;
    public static ST_Border mapleLeaf;
    public static ST_Border mapleMuffins;
    public static ST_Border marquee;
    public static ST_Border marqueeToothed;
    public static ST_Border moons;
    public static ST_Border mosaic;
    public static ST_Border musicNotes;
    public static ST_Border northwest;
    public static ST_Border ovals;
    public static ST_Border packages;
    public static ST_Border palmsBlack;
    public static ST_Border palmsColor;
    public static ST_Border paperClips;
    public static ST_Border papyrus;
    public static ST_Border partyFavor;
    public static ST_Border partyGlass;
    public static ST_Border pencils;
    public static ST_Border people;
    public static ST_Border peopleWaving;
    public static ST_Border peopleHats;
    public static ST_Border poinsettias;
    public static ST_Border postageStamp;
    public static ST_Border pumpkin1;
    public static ST_Border pushPinNote2;
    public static ST_Border pushPinNote1;
    public static ST_Border pyramids;
    public static ST_Border pyramidsAbove;
    public static ST_Border quadrants;
    public static ST_Border rings;
    public static ST_Border safari;
    public static ST_Border sawtooth;
    public static ST_Border sawtoothGray;
    public static ST_Border scaredCat;
    public static ST_Border seattle;
    public static ST_Border shadowedSquares;
    public static ST_Border sharksTeeth;
    public static ST_Border shorebirdTracks;
    public static ST_Border skyrocket;
    public static ST_Border snowflakeFancy;
    public static ST_Border snowflakes;
    public static ST_Border sombrero;
    public static ST_Border southwest;
    public static ST_Border stars;
    public static ST_Border starsTop;
    public static ST_Border stars3d;
    public static ST_Border starsBlack;
    public static ST_Border starsShadowed;
    public static ST_Border sun;
    public static ST_Border swirligig;
    public static ST_Border tornPaper;
    public static ST_Border tornPaperBlack;
    public static ST_Border trees;
    public static ST_Border triangleParty;
    public static ST_Border triangles;
    public static ST_Border tribal1;
    public static ST_Border tribal2;
    public static ST_Border tribal3;
    public static ST_Border tribal4;
    public static ST_Border tribal5;
    public static ST_Border tribal6;
    public static ST_Border twistedLines1;
    public static ST_Border twistedLines2;
    public static ST_Border vine;
    public static ST_Border waveline;
    public static ST_Border weavingAngles;
    public static ST_Border weavingBraid;
    public static ST_Border weavingRibbon;
    public static ST_Border weavingStrips;
    public static ST_Border whiteFlowers;
    public static ST_Border woodwork;
    public static ST_Border xIllusions;
    public static ST_Border zanyTriangles;
    public static ST_Border zigZag;
    public static ST_Border zigZagStitch;
}
[XmlTypeAttribute]
public enum NPOI.OpenXmlFormats.Wordprocessing.ST_BrClear : Enum {
    public int value__;
    public static ST_BrClear none;
    public static ST_BrClear left;
    public static ST_BrClear right;
    public static ST_BrClear all;
}
[XmlTypeAttribute]
public enum NPOI.OpenXmlFormats.Wordprocessing.ST_BrType : Enum {
    public int value__;
    public static ST_BrType page;
    public static ST_BrType column;
    public static ST_BrType textWrapping;
}
[XmlTypeAttribute]
public enum NPOI.OpenXmlFormats.Wordprocessing.ST_CalendarType : Enum {
    public int value__;
    public static ST_CalendarType gregorian;
    public static ST_CalendarType hijri;
    public static ST_CalendarType hebrew;
    public static ST_CalendarType taiwan;
    public static ST_CalendarType japan;
    public static ST_CalendarType thai;
    public static ST_CalendarType korea;
    public static ST_CalendarType saka;
    public static ST_CalendarType gregorianXlitEnglish;
    public static ST_CalendarType gregorianXlitFrench;
}
[XmlTypeAttribute]
public enum NPOI.OpenXmlFormats.Wordprocessing.ST_CaptionPos : Enum {
    public int value__;
    public static ST_CaptionPos above;
    public static ST_CaptionPos below;
    public static ST_CaptionPos left;
    public static ST_CaptionPos right;
}
[XmlTypeAttribute]
public enum NPOI.OpenXmlFormats.Wordprocessing.ST_ChapterSep : Enum {
    public int value__;
    public static ST_ChapterSep hyphen;
    public static ST_ChapterSep period;
    public static ST_ChapterSep colon;
    public static ST_ChapterSep emDash;
    public static ST_ChapterSep enDash;
}
[XmlTypeAttribute]
public enum NPOI.OpenXmlFormats.Wordprocessing.ST_CharacterSpacing : Enum {
    public int value__;
    public static ST_CharacterSpacing doNotCompress;
    public static ST_CharacterSpacing compressPunctuation;
    public static ST_CharacterSpacing compressPunctuationAndJapaneseKana;
}
[XmlTypeAttribute]
public enum NPOI.OpenXmlFormats.Wordprocessing.ST_ColorSchemeIndex : Enum {
    public int value__;
    public static ST_ColorSchemeIndex dark1;
    public static ST_ColorSchemeIndex light1;
    public static ST_ColorSchemeIndex dark2;
    public static ST_ColorSchemeIndex light2;
    public static ST_ColorSchemeIndex accent1;
    public static ST_ColorSchemeIndex accent2;
    public static ST_ColorSchemeIndex accent3;
    public static ST_ColorSchemeIndex accent4;
    public static ST_ColorSchemeIndex accent5;
    public static ST_ColorSchemeIndex accent6;
    public static ST_ColorSchemeIndex hyperlink;
    public static ST_ColorSchemeIndex followedHyperlink;
}
[XmlTypeAttribute]
public enum NPOI.OpenXmlFormats.Wordprocessing.ST_CombineBrackets : Enum {
    public int value__;
    public static ST_CombineBrackets none;
    public static ST_CombineBrackets round;
    public static ST_CombineBrackets square;
    public static ST_CombineBrackets angle;
    public static ST_CombineBrackets curly;
}
[XmlTypeAttribute]
public enum NPOI.OpenXmlFormats.Wordprocessing.ST_CryptProv : Enum {
    public int value__;
    public static ST_CryptProv rsaAES;
    public static ST_CryptProv rsaFull;
}
[XmlTypeAttribute]
public enum NPOI.OpenXmlFormats.Wordprocessing.ST_DisplacedByCustomXml : Enum {
    public int value__;
    public static ST_DisplacedByCustomXml next;
    public static ST_DisplacedByCustomXml prev;
}
[XmlTypeAttribute]
public enum NPOI.OpenXmlFormats.Wordprocessing.ST_DocGrid : Enum {
    public int value__;
    public static ST_DocGrid default;
    public static ST_DocGrid lines;
    public static ST_DocGrid linesAndChars;
    public static ST_DocGrid snapToChars;
}
[XmlTypeAttribute]
public enum NPOI.OpenXmlFormats.Wordprocessing.ST_DocPartBehavior : Enum {
    public int value__;
    public static ST_DocPartBehavior content;
    public static ST_DocPartBehavior p;
    public static ST_DocPartBehavior pg;
}
[XmlTypeAttribute]
public enum NPOI.OpenXmlFormats.Wordprocessing.ST_DocPartGallery : Enum {
    public int value__;
    public static ST_DocPartGallery placeholder;
    public static ST_DocPartGallery any;
    public static ST_DocPartGallery default;
    public static ST_DocPartGallery docParts;
    public static ST_DocPartGallery coverPg;
    public static ST_DocPartGallery eq;
    public static ST_DocPartGallery ftrs;
    public static ST_DocPartGallery hdrs;
    public static ST_DocPartGallery pgNum;
    public static ST_DocPartGallery tbls;
    public static ST_DocPartGallery watermarks;
    public static ST_DocPartGallery autoTxt;
    public static ST_DocPartGallery txtBox;
    public static ST_DocPartGallery pgNumT;
    public static ST_DocPartGallery pgNumB;
    public static ST_DocPartGallery pgNumMargins;
    public static ST_DocPartGallery tblOfContents;
    public static ST_DocPartGallery bib;
    public static ST_DocPartGallery custQuickParts;
    public static ST_DocPartGallery custCoverPg;
    public static ST_DocPartGallery custEq;
    public static ST_DocPartGallery custFtrs;
    public static ST_DocPartGallery custHdrs;
    public static ST_DocPartGallery custPgNum;
    public static ST_DocPartGallery custTbls;
    public static ST_DocPartGallery custWatermarks;
    public static ST_DocPartGallery custAutoTxt;
    public static ST_DocPartGallery custTxtBox;
    public static ST_DocPartGallery custPgNumT;
    public static ST_DocPartGallery custPgNumB;
    public static ST_DocPartGallery custPgNumMargins;
    public static ST_DocPartGallery custTblOfContents;
    public static ST_DocPartGallery custBib;
    public static ST_DocPartGallery custom1;
    public static ST_DocPartGallery custom2;
    public static ST_DocPartGallery custom3;
    public static ST_DocPartGallery custom4;
    public static ST_DocPartGallery custom5;
}
[XmlTypeAttribute]
public enum NPOI.OpenXmlFormats.Wordprocessing.ST_DocPartType : Enum {
    public int value__;
    public static ST_DocPartType none;
    public static ST_DocPartType normal;
    public static ST_DocPartType autoExp;
    public static ST_DocPartType toolbar;
    public static ST_DocPartType speller;
    public static ST_DocPartType formFld;
    public static ST_DocPartType bbPlcHdr;
}
[XmlTypeAttribute]
public enum NPOI.OpenXmlFormats.Wordprocessing.ST_DocProtect : Enum {
    public int value__;
    public static ST_DocProtect none;
    public static ST_DocProtect readOnly;
    public static ST_DocProtect comments;
    public static ST_DocProtect trackedChanges;
    public static ST_DocProtect forms;
}
[XmlTypeAttribute]
public enum NPOI.OpenXmlFormats.Wordprocessing.ST_DocType : Enum {
    public int value__;
    public static ST_DocType notSpecified;
    public static ST_DocType letter;
    public static ST_DocType eMail;
}
[XmlTypeAttribute]
public enum NPOI.OpenXmlFormats.Wordprocessing.ST_DropCap : Enum {
    public int value__;
    public static ST_DropCap none;
    public static ST_DropCap drop;
    public static ST_DropCap margin;
}
[XmlTypeAttribute]
public enum NPOI.OpenXmlFormats.Wordprocessing.ST_EdGrp : Enum {
    public int value__;
    public static ST_EdGrp none;
    public static ST_EdGrp everyone;
    public static ST_EdGrp administrators;
    public static ST_EdGrp contributors;
    public static ST_EdGrp editors;
    public static ST_EdGrp owners;
    public static ST_EdGrp current;
}
[XmlTypeAttribute]
public enum NPOI.OpenXmlFormats.Wordprocessing.ST_EdnPos : Enum {
    public int value__;
    public static ST_EdnPos sectEnd;
    public static ST_EdnPos docEnd;
}
[XmlTypeAttribute]
public enum NPOI.OpenXmlFormats.Wordprocessing.ST_Em : Enum {
    public int value__;
    public static ST_Em none;
    public static ST_Em dot;
    public static ST_Em comma;
    public static ST_Em circle;
    public static ST_Em underDot;
}
[XmlTypeAttribute]
public enum NPOI.OpenXmlFormats.Wordprocessing.ST_FFTextType : Enum {
    public int value__;
    public static ST_FFTextType regular;
    public static ST_FFTextType number;
    public static ST_FFTextType date;
    public static ST_FFTextType currentTime;
    public static ST_FFTextType currentDate;
    public static ST_FFTextType calculated;
}
[XmlTypeAttribute]
public enum NPOI.OpenXmlFormats.Wordprocessing.ST_FldCharType : Enum {
    public int value__;
    public static ST_FldCharType begin;
    public static ST_FldCharType separate;
    public static ST_FldCharType end;
}
[XmlTypeAttribute]
public enum NPOI.OpenXmlFormats.Wordprocessing.ST_FontFamily : Enum {
    public int value__;
    public static ST_FontFamily decorative;
    public static ST_FontFamily modern;
    public static ST_FontFamily roman;
    public static ST_FontFamily script;
    public static ST_FontFamily swiss;
    public static ST_FontFamily auto;
}
[XmlTypeAttribute]
public enum NPOI.OpenXmlFormats.Wordprocessing.ST_FrameLayout : Enum {
    public int value__;
    public static ST_FrameLayout rows;
    public static ST_FrameLayout cols;
    public static ST_FrameLayout none;
}
[XmlTypeAttribute]
public enum NPOI.OpenXmlFormats.Wordprocessing.ST_FrameScrollbar : Enum {
    public int value__;
    public static ST_FrameScrollbar on;
    public static ST_FrameScrollbar off;
    public static ST_FrameScrollbar auto;
}
[XmlTypeAttribute]
public enum NPOI.OpenXmlFormats.Wordprocessing.ST_FtnEdn : Enum {
    public int value__;
    public static ST_FtnEdn normal;
    public static ST_FtnEdn separator;
    public static ST_FtnEdn continuationSeparator;
    public static ST_FtnEdn continuationNotice;
}
[XmlTypeAttribute]
public enum NPOI.OpenXmlFormats.Wordprocessing.ST_FtnPos : Enum {
    public int value__;
    public static ST_FtnPos pageBottom;
    public static ST_FtnPos beneathText;
    public static ST_FtnPos sectEnd;
    public static ST_FtnPos docEnd;
}
[XmlTypeAttribute]
public enum NPOI.OpenXmlFormats.Wordprocessing.ST_HAnchor : Enum {
    public int value__;
    public static ST_HAnchor text;
    public static ST_HAnchor margin;
    public static ST_HAnchor page;
}
[XmlTypeAttribute]
public enum NPOI.OpenXmlFormats.Wordprocessing.ST_HdrFtr : Enum {
    public int value__;
    [XmlEnumAttribute("even")]
public static ST_HdrFtr even;
    [XmlEnumAttribute("default")]
public static ST_HdrFtr default;
    [XmlEnumAttribute("first")]
public static ST_HdrFtr first;
}
[XmlTypeAttribute]
public enum NPOI.OpenXmlFormats.Wordprocessing.ST_HeightRule : Enum {
    public int value__;
    public static ST_HeightRule auto;
    public static ST_HeightRule exact;
    public static ST_HeightRule atLeast;
}
[XmlTypeAttribute]
public enum NPOI.OpenXmlFormats.Wordprocessing.ST_HighlightColor : Enum {
    public int value__;
    public static ST_HighlightColor black;
    public static ST_HighlightColor blue;
    public static ST_HighlightColor cyan;
    public static ST_HighlightColor green;
    public static ST_HighlightColor magenta;
    public static ST_HighlightColor red;
    public static ST_HighlightColor yellow;
    public static ST_HighlightColor white;
    public static ST_HighlightColor darkBlue;
    public static ST_HighlightColor darkCyan;
    public static ST_HighlightColor darkGreen;
    public static ST_HighlightColor darkMagenta;
    public static ST_HighlightColor darkRed;
    public static ST_HighlightColor darkYellow;
    public static ST_HighlightColor darkGray;
    public static ST_HighlightColor lightGray;
    public static ST_HighlightColor none;
}
[XmlTypeAttribute]
public enum NPOI.OpenXmlFormats.Wordprocessing.ST_Hint : Enum {
    public int value__;
    public static ST_Hint default;
    public static ST_Hint eastAsia;
    public static ST_Hint cs;
}
[XmlTypeAttribute]
public enum NPOI.OpenXmlFormats.Wordprocessing.ST_InfoTextType : Enum {
    public int value__;
    public static ST_InfoTextType text;
    public static ST_InfoTextType autoText;
}
[XmlTypeAttribute]
public enum NPOI.OpenXmlFormats.Wordprocessing.ST_Jc : Enum {
    public int value__;
    public static ST_Jc left;
    public static ST_Jc center;
    public static ST_Jc right;
    public static ST_Jc both;
    public static ST_Jc mediumKashida;
    public static ST_Jc distribute;
    public static ST_Jc numTab;
    public static ST_Jc highKashida;
    public static ST_Jc lowKashida;
    public static ST_Jc thaiDistribute;
}
[XmlTypeAttribute]
public enum NPOI.OpenXmlFormats.Wordprocessing.ST_LevelSuffix : Enum {
    public int value__;
    public static ST_LevelSuffix tab;
    public static ST_LevelSuffix space;
    public static ST_LevelSuffix nothing;
}
[XmlTypeAttribute]
public enum NPOI.OpenXmlFormats.Wordprocessing.ST_LineNumberRestart : Enum {
    public int value__;
    public static ST_LineNumberRestart newPage;
    public static ST_LineNumberRestart newSection;
    public static ST_LineNumberRestart continuous;
}
[XmlTypeAttribute]
public enum NPOI.OpenXmlFormats.Wordprocessing.ST_LineSpacingRule : Enum {
    public int value__;
    public static ST_LineSpacingRule nil;
    public static ST_LineSpacingRule auto;
    public static ST_LineSpacingRule exact;
    public static ST_LineSpacingRule atLeast;
}
[XmlTypeAttribute]
public enum NPOI.OpenXmlFormats.Wordprocessing.ST_Lock : Enum {
    public int value__;
    public static ST_Lock sdtLocked;
    public static ST_Lock contentLocked;
    public static ST_Lock unlocked;
    public static ST_Lock sdtContentLocked;
}
[XmlTypeAttribute]
public enum NPOI.OpenXmlFormats.Wordprocessing.ST_MailMergeDataType : Enum {
    public int value__;
    public static ST_MailMergeDataType textFile;
    public static ST_MailMergeDataType database;
    public static ST_MailMergeDataType spreadsheet;
    public static ST_MailMergeDataType query;
    public static ST_MailMergeDataType odbc;
    public static ST_MailMergeDataType native;
}
[XmlTypeAttribute]
public enum NPOI.OpenXmlFormats.Wordprocessing.ST_MailMergeDest : Enum {
    public int value__;
    public static ST_MailMergeDest newDocument;
    public static ST_MailMergeDest printer;
    public static ST_MailMergeDest email;
    public static ST_MailMergeDest fax;
}
[XmlTypeAttribute]
public enum NPOI.OpenXmlFormats.Wordprocessing.ST_MailMergeDocType : Enum {
    public int value__;
    public static ST_MailMergeDocType catalog;
    public static ST_MailMergeDocType envelopes;
    public static ST_MailMergeDocType mailingLabels;
    public static ST_MailMergeDocType formLetters;
    public static ST_MailMergeDocType email;
    public static ST_MailMergeDocType fax;
}
[XmlTypeAttribute]
public enum NPOI.OpenXmlFormats.Wordprocessing.ST_MailMergeOdsoFMDFieldType : Enum {
    public int value__;
    public static ST_MailMergeOdsoFMDFieldType null;
    public static ST_MailMergeOdsoFMDFieldType dbColumn;
}
[XmlTypeAttribute]
public enum NPOI.OpenXmlFormats.Wordprocessing.ST_MailMergeSourceType : Enum {
    public int value__;
    public static ST_MailMergeSourceType database;
    public static ST_MailMergeSourceType addressBook;
    public static ST_MailMergeSourceType document1;
    public static ST_MailMergeSourceType document2;
    public static ST_MailMergeSourceType text;
    public static ST_MailMergeSourceType email;
    public static ST_MailMergeSourceType native;
    public static ST_MailMergeSourceType legacy;
    public static ST_MailMergeSourceType master;
}
[XmlTypeAttribute]
public enum NPOI.OpenXmlFormats.Wordprocessing.ST_Merge : Enum {
    public int value__;
    public static ST_Merge continue;
    public static ST_Merge restart;
}
[XmlTypeAttribute]
public enum NPOI.OpenXmlFormats.Wordprocessing.ST_MultiLevelType : Enum {
    public int value__;
    public static ST_MultiLevelType singleLevel;
    public static ST_MultiLevelType multilevel;
    public static ST_MultiLevelType hybridMultilevel;
}
[XmlTypeAttribute]
public enum NPOI.OpenXmlFormats.Wordprocessing.ST_NumberFormat : Enum {
    public int value__;
    [XmlEnumAttribute("decimal")]
public static ST_NumberFormat decimal;
    public static ST_NumberFormat upperRoman;
    public static ST_NumberFormat lowerRoman;
    public static ST_NumberFormat upperLetter;
    public static ST_NumberFormat lowerLetter;
    public static ST_NumberFormat ordinal;
    public static ST_NumberFormat cardinalText;
    public static ST_NumberFormat ordinalText;
    public static ST_NumberFormat hex;
    public static ST_NumberFormat chicago;
    public static ST_NumberFormat ideographDigital;
    public static ST_NumberFormat japaneseCounting;
    public static ST_NumberFormat aiueo;
    public static ST_NumberFormat iroha;
    public static ST_NumberFormat decimalFullWidth;
    public static ST_NumberFormat decimalHalfWidth;
    public static ST_NumberFormat japaneseLegal;
    public static ST_NumberFormat japaneseDigitalTenThousand;
    public static ST_NumberFormat decimalEnclosedCircle;
    public static ST_NumberFormat decimalFullWidth2;
    public static ST_NumberFormat aiueoFullWidth;
    public static ST_NumberFormat irohaFullWidth;
    public static ST_NumberFormat decimalZero;
    public static ST_NumberFormat bullet;
    public static ST_NumberFormat ganada;
    public static ST_NumberFormat chosung;
    public static ST_NumberFormat decimalEnclosedFullstop;
    public static ST_NumberFormat decimalEnclosedParen;
    public static ST_NumberFormat decimalEnclosedCircleChinese;
    public static ST_NumberFormat ideographEnclosedCircle;
    public static ST_NumberFormat ideographTraditional;
    public static ST_NumberFormat ideographZodiac;
    public static ST_NumberFormat ideographZodiacTraditional;
    public static ST_NumberFormat taiwaneseCounting;
    public static ST_NumberFormat ideographLegalTraditional;
    public static ST_NumberFormat taiwaneseCountingThousand;
    public static ST_NumberFormat taiwaneseDigital;
    public static ST_NumberFormat chineseCounting;
    public static ST_NumberFormat chineseLegalSimplified;
    public static ST_NumberFormat chineseCountingThousand;
    public static ST_NumberFormat koreanDigital;
    public static ST_NumberFormat koreanCounting;
    public static ST_NumberFormat koreanLegal;
    public static ST_NumberFormat koreanDigital2;
    public static ST_NumberFormat vietnameseCounting;
    public static ST_NumberFormat russianLower;
    public static ST_NumberFormat russianUpper;
    public static ST_NumberFormat none;
    public static ST_NumberFormat numberInDash;
    public static ST_NumberFormat hebrew1;
    public static ST_NumberFormat hebrew2;
    public static ST_NumberFormat arabicAlpha;
    public static ST_NumberFormat arabicAbjad;
    public static ST_NumberFormat hindiVowels;
    public static ST_NumberFormat hindiConsonants;
    public static ST_NumberFormat hindiNumbers;
    public static ST_NumberFormat hindiCounting;
    public static ST_NumberFormat thaiLetters;
    public static ST_NumberFormat thaiNumbers;
    public static ST_NumberFormat thaiCounting;
}
[XmlTypeAttribute]
public enum NPOI.OpenXmlFormats.Wordprocessing.ST_OnOff : Enum {
    public int value__;
    public static ST_OnOff off;
    public static ST_OnOff on;
    [XmlEnumAttribute("true")]
public static ST_OnOff True;
    [XmlEnumAttribute("false")]
public static ST_OnOff False;
}
[XmlTypeAttribute]
public enum NPOI.OpenXmlFormats.Wordprocessing.ST_PageBorderDisplay : Enum {
    public int value__;
    public static ST_PageBorderDisplay allPages;
    public static ST_PageBorderDisplay firstPage;
    public static ST_PageBorderDisplay notFirstPage;
}
[XmlTypeAttribute]
public enum NPOI.OpenXmlFormats.Wordprocessing.ST_PageBorderOffset : Enum {
    public int value__;
    public static ST_PageBorderOffset page;
    public static ST_PageBorderOffset text;
}
[XmlTypeAttribute]
public enum NPOI.OpenXmlFormats.Wordprocessing.ST_PageBorderZOrder : Enum {
    public int value__;
    public static ST_PageBorderZOrder front;
    public static ST_PageBorderZOrder back;
}
[XmlTypeAttribute]
public enum NPOI.OpenXmlFormats.Wordprocessing.ST_PageOrientation : Enum {
    public int value__;
    public static ST_PageOrientation portrait;
    public static ST_PageOrientation landscape;
}
[XmlTypeAttribute]
public enum NPOI.OpenXmlFormats.Wordprocessing.ST_Pitch : Enum {
    public int value__;
    public static ST_Pitch fixed;
    public static ST_Pitch variable;
    public static ST_Pitch default;
}
[XmlTypeAttribute]
public enum NPOI.OpenXmlFormats.Wordprocessing.ST_Proof : Enum {
    public int value__;
    public static ST_Proof clean;
    public static ST_Proof dirty;
}
[XmlTypeAttribute]
public enum NPOI.OpenXmlFormats.Wordprocessing.ST_ProofErr : Enum {
    public int value__;
    public static ST_ProofErr spellStart;
    public static ST_ProofErr spellEnd;
    public static ST_ProofErr gramStart;
    public static ST_ProofErr gramEnd;
}
[XmlTypeAttribute]
public enum NPOI.OpenXmlFormats.Wordprocessing.ST_PTabAlignment : Enum {
    public int value__;
    public static ST_PTabAlignment left;
    public static ST_PTabAlignment center;
    public static ST_PTabAlignment right;
}
[XmlTypeAttribute]
public enum NPOI.OpenXmlFormats.Wordprocessing.ST_PTabLeader : Enum {
    public int value__;
    public static ST_PTabLeader none;
    public static ST_PTabLeader dot;
    public static ST_PTabLeader hyphen;
    public static ST_PTabLeader underscore;
    public static ST_PTabLeader middleDot;
}
[XmlTypeAttribute]
public enum NPOI.OpenXmlFormats.Wordprocessing.ST_PTabRelativeTo : Enum {
    public int value__;
    public static ST_PTabRelativeTo margin;
    public static ST_PTabRelativeTo indent;
}
[XmlTypeAttribute]
public enum NPOI.OpenXmlFormats.Wordprocessing.ST_RestartNumber : Enum {
    public int value__;
    public static ST_RestartNumber continuous;
    public static ST_RestartNumber eachSect;
    public static ST_RestartNumber eachPage;
}
[XmlTypeAttribute]
public enum NPOI.OpenXmlFormats.Wordprocessing.ST_RubyAlign : Enum {
    public int value__;
    public static ST_RubyAlign center;
    public static ST_RubyAlign distributeLetter;
    public static ST_RubyAlign distributeSpace;
    public static ST_RubyAlign left;
    public static ST_RubyAlign right;
    public static ST_RubyAlign rightVertical;
}
[XmlTypeAttribute]
public enum NPOI.OpenXmlFormats.Wordprocessing.ST_SdtDateMappingType : Enum {
    public int value__;
    public static ST_SdtDateMappingType text;
    public static ST_SdtDateMappingType date;
    public static ST_SdtDateMappingType dateTime;
}
[XmlTypeAttribute]
public enum NPOI.OpenXmlFormats.Wordprocessing.ST_SectionMark : Enum {
    public int value__;
    public static ST_SectionMark nextPage;
    public static ST_SectionMark nextColumn;
    public static ST_SectionMark continuous;
    public static ST_SectionMark evenPage;
    public static ST_SectionMark oddPage;
}
[XmlTypeAttribute]
public enum NPOI.OpenXmlFormats.Wordprocessing.ST_Shd : Enum {
    public int value__;
    public static ST_Shd nil;
    public static ST_Shd clear;
    public static ST_Shd solid;
    public static ST_Shd horzStripe;
    public static ST_Shd vertStripe;
    public static ST_Shd reverseDiagStripe;
    public static ST_Shd diagStripe;
    public static ST_Shd horzCross;
    public static ST_Shd diagCross;
    public static ST_Shd thinHorzStripe;
    public static ST_Shd thinVertStripe;
    public static ST_Shd thinReverseDiagStripe;
    public static ST_Shd thinDiagStripe;
    public static ST_Shd thinHorzCross;
    public static ST_Shd thinDiagCross;
    public static ST_Shd pct5;
    public static ST_Shd pct10;
    public static ST_Shd pct12;
    public static ST_Shd pct15;
    public static ST_Shd pct20;
    public static ST_Shd pct25;
    public static ST_Shd pct30;
    public static ST_Shd pct35;
    public static ST_Shd pct37;
    public static ST_Shd pct40;
    public static ST_Shd pct45;
    public static ST_Shd pct50;
    public static ST_Shd pct55;
    public static ST_Shd pct60;
    public static ST_Shd pct62;
    public static ST_Shd pct65;
    public static ST_Shd pct70;
    public static ST_Shd pct75;
    public static ST_Shd pct80;
    public static ST_Shd pct85;
    public static ST_Shd pct87;
    public static ST_Shd pct90;
    public static ST_Shd pct95;
}
[XmlTypeAttribute]
public enum NPOI.OpenXmlFormats.Wordprocessing.ST_StyleType : Enum {
    public int value__;
    public static ST_StyleType paragraph;
    public static ST_StyleType character;
    public static ST_StyleType table;
    public static ST_StyleType numbering;
}
[XmlTypeAttribute]
public enum NPOI.OpenXmlFormats.Wordprocessing.ST_TabJc : Enum {
    public int value__;
    public static ST_TabJc clear;
    public static ST_TabJc left;
    public static ST_TabJc center;
    public static ST_TabJc right;
    public static ST_TabJc decimal;
    public static ST_TabJc bar;
    public static ST_TabJc num;
}
[XmlTypeAttribute]
public enum NPOI.OpenXmlFormats.Wordprocessing.ST_TabTlc : Enum {
    public int value__;
    public static ST_TabTlc none;
    public static ST_TabTlc dot;
    public static ST_TabTlc hyphen;
    public static ST_TabTlc underscore;
    public static ST_TabTlc heavy;
    public static ST_TabTlc middleDot;
}
[XmlTypeAttribute]
public enum NPOI.OpenXmlFormats.Wordprocessing.ST_TargetScreenSz : Enum {
    public int value__;
    [XmlEnumAttribute("544x376")]
public static ST_TargetScreenSz Item544x376;
    [XmlEnumAttribute("640x480")]
public static ST_TargetScreenSz Item640x480;
    [XmlEnumAttribute("720x512")]
public static ST_TargetScreenSz Item720x512;
    [XmlEnumAttribute("800x600")]
public static ST_TargetScreenSz Item800x600;
    [XmlEnumAttribute("1024x768")]
public static ST_TargetScreenSz Item1024x768;
    [XmlEnumAttribute("1152x882")]
public static ST_TargetScreenSz Item1152x882;
    [XmlEnumAttribute("1152x900")]
public static ST_TargetScreenSz Item1152x900;
    [XmlEnumAttribute("1280x1024")]
public static ST_TargetScreenSz Item1280x1024;
    [XmlEnumAttribute("1600x1200")]
public static ST_TargetScreenSz Item1600x1200;
    [XmlEnumAttribute("1800x1440")]
public static ST_TargetScreenSz Item1800x1440;
    [XmlEnumAttribute("1920x1200")]
public static ST_TargetScreenSz Item1920x1200;
}
[XmlTypeAttribute]
public enum NPOI.OpenXmlFormats.Wordprocessing.ST_TblLayoutType : Enum {
    public int value__;
    public static ST_TblLayoutType fixed;
    public static ST_TblLayoutType autofit;
}
[XmlTypeAttribute]
public enum NPOI.OpenXmlFormats.Wordprocessing.ST_TblOverlap : Enum {
    public int value__;
    public static ST_TblOverlap never;
    public static ST_TblOverlap overlap;
}
[XmlTypeAttribute]
public enum NPOI.OpenXmlFormats.Wordprocessing.ST_TblStyleOverrideType : Enum {
    public int value__;
    public static ST_TblStyleOverrideType wholeTable;
    public static ST_TblStyleOverrideType firstRow;
    public static ST_TblStyleOverrideType lastRow;
    public static ST_TblStyleOverrideType firstCol;
    public static ST_TblStyleOverrideType lastCol;
    public static ST_TblStyleOverrideType band1Vert;
    public static ST_TblStyleOverrideType band2Vert;
    public static ST_TblStyleOverrideType band1Horz;
    public static ST_TblStyleOverrideType band2Horz;
    public static ST_TblStyleOverrideType neCell;
    public static ST_TblStyleOverrideType nwCell;
    public static ST_TblStyleOverrideType seCell;
    public static ST_TblStyleOverrideType swCell;
}
[XmlTypeAttribute]
public enum NPOI.OpenXmlFormats.Wordprocessing.ST_TblWidth : Enum {
    public int value__;
    public static ST_TblWidth nil;
    public static ST_TblWidth pct;
    public static ST_TblWidth dxa;
    public static ST_TblWidth auto;
}
[XmlTypeAttribute]
public enum NPOI.OpenXmlFormats.Wordprocessing.ST_TextAlignment : Enum {
    public int value__;
    public static ST_TextAlignment top;
    public static ST_TextAlignment center;
    public static ST_TextAlignment baseline;
    public static ST_TextAlignment bottom;
    public static ST_TextAlignment auto;
}
[XmlTypeAttribute]
public enum NPOI.OpenXmlFormats.Wordprocessing.ST_TextboxTightWrap : Enum {
    public int value__;
    public static ST_TextboxTightWrap none;
    public static ST_TextboxTightWrap allLines;
    public static ST_TextboxTightWrap firstAndLastLine;
    public static ST_TextboxTightWrap firstLineOnly;
    public static ST_TextboxTightWrap lastLineOnly;
}
[XmlTypeAttribute]
public enum NPOI.OpenXmlFormats.Wordprocessing.ST_TextDirection : Enum {
    public int value__;
    public static ST_TextDirection lrTb;
    public static ST_TextDirection tbRl;
    public static ST_TextDirection btLr;
    public static ST_TextDirection lrTbV;
    public static ST_TextDirection tbRlV;
    public static ST_TextDirection tbLrV;
}
[XmlTypeAttribute]
public enum NPOI.OpenXmlFormats.Wordprocessing.ST_TextEffect : Enum {
    public int value__;
    public static ST_TextEffect blinkBackground;
    public static ST_TextEffect lights;
    public static ST_TextEffect antsBlack;
    public static ST_TextEffect antsRed;
    public static ST_TextEffect shimmer;
    public static ST_TextEffect sparkle;
    public static ST_TextEffect none;
}
[XmlTypeAttribute]
public enum NPOI.OpenXmlFormats.Wordprocessing.ST_Theme : Enum {
    public int value__;
    public static ST_Theme majorEastAsia;
    public static ST_Theme majorBidi;
    public static ST_Theme majorAscii;
    public static ST_Theme majorHAnsi;
    public static ST_Theme minorEastAsia;
    public static ST_Theme minorBidi;
    public static ST_Theme minorAscii;
    public static ST_Theme minorHAnsi;
}
[XmlTypeAttribute]
public enum NPOI.OpenXmlFormats.Wordprocessing.ST_ThemeColor : Enum {
    public int value__;
    public static ST_ThemeColor none;
    public static ST_ThemeColor dark1;
    public static ST_ThemeColor light1;
    public static ST_ThemeColor dark2;
    public static ST_ThemeColor light2;
    public static ST_ThemeColor accent1;
    public static ST_ThemeColor accent2;
    public static ST_ThemeColor accent3;
    public static ST_ThemeColor accent4;
    public static ST_ThemeColor accent5;
    public static ST_ThemeColor accent6;
    public static ST_ThemeColor hyperlink;
    public static ST_ThemeColor followedHyperlink;
    public static ST_ThemeColor background1;
    public static ST_ThemeColor text1;
    public static ST_ThemeColor background2;
    public static ST_ThemeColor text2;
}
[XmlTypeAttribute]
public enum NPOI.OpenXmlFormats.Wordprocessing.ST_Underline : Enum {
    public int value__;
    public static ST_Underline single;
    public static ST_Underline words;
    public static ST_Underline double;
    public static ST_Underline thick;
    public static ST_Underline dotted;
    public static ST_Underline dottedHeavy;
    public static ST_Underline dash;
    public static ST_Underline dashedHeavy;
    public static ST_Underline dashLong;
    public static ST_Underline dashLongHeavy;
    public static ST_Underline dotDash;
    public static ST_Underline dashDotHeavy;
    public static ST_Underline dotDotDash;
    public static ST_Underline dashDotDotHeavy;
    public static ST_Underline wave;
    public static ST_Underline wavyHeavy;
    public static ST_Underline wavyDouble;
    public static ST_Underline none;
}
[XmlTypeAttribute]
public enum NPOI.OpenXmlFormats.Wordprocessing.ST_VAnchor : Enum {
    public int value__;
    public static ST_VAnchor text;
    public static ST_VAnchor margin;
    public static ST_VAnchor page;
}
[XmlTypeAttribute]
public enum NPOI.OpenXmlFormats.Wordprocessing.ST_VerticalAlignRun : Enum {
    public int value__;
    public static ST_VerticalAlignRun baseline;
    public static ST_VerticalAlignRun superscript;
    public static ST_VerticalAlignRun subscript;
}
[XmlTypeAttribute]
public enum NPOI.OpenXmlFormats.Wordprocessing.ST_VerticalJc : Enum {
    public int value__;
    public static ST_VerticalJc top;
    public static ST_VerticalJc center;
    public static ST_VerticalJc both;
    public static ST_VerticalJc bottom;
}
[XmlTypeAttribute]
public enum NPOI.OpenXmlFormats.Wordprocessing.ST_View : Enum {
    public int value__;
    public static ST_View none;
    public static ST_View print;
    public static ST_View outline;
    public static ST_View masterPages;
    public static ST_View normal;
    public static ST_View web;
}
[XmlTypeAttribute]
public enum NPOI.OpenXmlFormats.Wordprocessing.ST_Wrap : Enum {
    public int value__;
    public static ST_Wrap auto;
    public static ST_Wrap notBeside;
    public static ST_Wrap around;
    public static ST_Wrap tight;
    public static ST_Wrap through;
    public static ST_Wrap none;
}
[XmlTypeAttribute]
public enum NPOI.OpenXmlFormats.Wordprocessing.ST_XAlign : Enum {
    public int value__;
    public static ST_XAlign left;
    public static ST_XAlign center;
    public static ST_XAlign right;
    public static ST_XAlign inside;
    public static ST_XAlign outside;
}
[XmlTypeAttribute]
public enum NPOI.OpenXmlFormats.Wordprocessing.ST_YAlign : Enum {
    public int value__;
    public static ST_YAlign inline;
    public static ST_YAlign top;
    public static ST_YAlign center;
    public static ST_YAlign bottom;
    public static ST_YAlign inside;
    public static ST_YAlign outside;
}
[XmlTypeAttribute]
public enum NPOI.OpenXmlFormats.Wordprocessing.ST_Zoom : Enum {
    public int value__;
    public static ST_Zoom none;
    public static ST_Zoom fullPage;
    public static ST_Zoom bestFit;
    public static ST_Zoom textFit;
}
public class NPOI.OpenXmlFormats.Wordprocessing.StylesDocument : object {
    private CT_Styles styles;
    public CT_Styles Styles { get; }
    public StylesDocument(CT_Styles styles);
    public static StylesDocument Parse(XmlDocument doc, XmlNamespaceManager namespaceMgr);
    public CT_Styles get_Styles();
    public void Save(Stream stream);
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
[AttributeUsageAttribute("2")]
internal class System.Runtime.CompilerServices.RefSafetyRulesAttribute : Attribute {
    public int Version;
    public RefSafetyRulesAttribute(int );
}
