[CompilerGeneratedAttribute]
[EmbeddedAttribute]
internal class Microsoft.CodeAnalysis.EmbeddedAttribute : Attribute {
}
public class NPOI.CoreProperties : object {
    private PackagePropertiesPart part;
    public string Category { get; public set; }
    public string ContentStatus { get; public set; }
    public string ContentType { get; public set; }
    public Nullable`1<DateTime> Created { get; public set; }
    public string Creator { get; public set; }
    public string Description { get; public set; }
    public string Identifier { get; public set; }
    public string Keywords { get; public set; }
    public Nullable`1<DateTime> LastPrinted { get; public set; }
    public string LastModifiedByUser { get; public set; }
    public Nullable`1<DateTime> Modified { get; public set; }
    public string Subject { get; public set; }
    public string Title { get; public set; }
    public string Revision { get; public set; }
    internal CoreProperties(PackagePropertiesPart part);
    public string get_Category();
    public void set_Category(string value);
    public string get_ContentStatus();
    public void set_ContentStatus(string value);
    public string get_ContentType();
    public void set_ContentType(string value);
    public Nullable`1<DateTime> get_Created();
    public void set_Created(Nullable`1<DateTime> value);
    public void SetCreated(string date);
    public string get_Creator();
    public void set_Creator(string value);
    public string get_Description();
    public void set_Description(string value);
    public string get_Identifier();
    public void set_Identifier(string value);
    public string get_Keywords();
    public void set_Keywords(string value);
    public Nullable`1<DateTime> get_LastPrinted();
    public void set_LastPrinted(Nullable`1<DateTime> value);
    public void SetLastPrinted(string date);
    public string get_LastModifiedByUser();
    public void set_LastModifiedByUser(string value);
    public Nullable`1<DateTime> get_Modified();
    public void set_Modified(Nullable`1<DateTime> value);
    public void SetModified(string date);
    public string get_Subject();
    public void set_Subject(string value);
    public string get_Title();
    public void set_Title(string value);
    public string get_Revision();
    public void set_Revision(string value);
    public PackagePropertiesPart GetUnderlyingProperties();
}
public class NPOI.CustomProperties : object {
    public static string FORMAT_ID;
    public CustomPropertiesDocument props;
    internal CustomProperties(CustomPropertiesDocument props);
    private static CustomProperties();
    public CT_CustomProperties GetUnderlyingProperties();
    private CT_Property Add(string name);
    public void AddProperty(string name, string value);
    public void AddProperty(string name, double value);
    public void AddProperty(string name, int value);
    public void AddProperty(string name, bool value);
    protected int NextPid();
    public bool Contains(string name);
    public CT_Property GetProperty(string name);
}
public class NPOI.ExtendedProperties : object {
    public ExtendedPropertiesDocument props;
    public string Template { get; }
    public string Manager { get; }
    public string Company { get; }
    public string PresentationFormat { get; }
    public string Application { get; }
    public string AppVersion { get; }
    public int Pages { get; }
    public int Words { get; }
    public int Characters { get; }
    public int CharactersWithSpaces { get; }
    public int Lines { get; }
    public int Paragraphs { get; }
    public int Slides { get; }
    public int Notes { get; }
    public int TotalTime { get; }
    public int HiddenSlides { get; }
    public int MMClips { get; }
    public string HyperlinkBase { get; }
    internal ExtendedProperties(ExtendedPropertiesDocument props);
    public CT_ExtendedProperties GetUnderlyingProperties();
    public string get_Template();
    public string get_Manager();
    public string get_Company();
    public string get_PresentationFormat();
    public string get_Application();
    public string get_AppVersion();
    public int get_Pages();
    public int get_Words();
    public int get_Characters();
    public int get_CharactersWithSpaces();
    public int get_Lines();
    public int get_Paragraphs();
    public int get_Slides();
    public int get_Notes();
    public int get_TotalTime();
    public int get_HiddenSlides();
    public int get_MMClips();
    public string get_HyperlinkBase();
}
public class NPOI.OOXML.XSSF.UserModel.DefaultIndexedColorMap : object {
    public sealed virtual Byte[] GetRGB(int index);
    public static Byte[] GetDefaultRGB(int index);
}
public class NPOI.OOXML.XSSF.UserModel.Helpers.XSSFRowColShifter : object {
    public static void UpdateNamedRanges(ISheet sheet, FormulaShifter shifter);
    public static void UpdateFormulas(ISheet sheet, FormulaShifter shifter);
    public static void UpdateSheetFormulas(ISheet sh, FormulaShifter Shifter);
    public static void UpdateRowFormulas(IRow row, FormulaShifter Shifter);
    private static void UpdateRefInCTCellFormula(IRow row, FormulaShifter Shifter, CT_CellFormula f);
    private static string ShiftFormula(IRow row, string formula, FormulaShifter Shifter);
    public static void UpdateHyperlinks(ISheet sheet, FormulaShifter shifter);
    public static void UpdateConditionalFormatting(ISheet sheet, FormulaShifter Shifter);
}
public interface NPOI.OOXML.XSSF.UserModel.IIndexedColorMap {
    public abstract virtual Byte[] GetRGB(int index);
}
public class NPOI.OOXML.XSSF.UserModel.XSSFConditionFilterData : object {
    private CT_CfRule _cfRule;
    public bool AboveAverage { get; }
    public bool Bottom { get; }
    public bool EqualAverage { get; }
    public bool Percent { get; }
    public long Rank { get; }
    public int StdDev { get; }
    public XSSFConditionFilterData(CT_CfRule cfRule);
    public sealed virtual bool get_AboveAverage();
    public sealed virtual bool get_Bottom();
    public sealed virtual bool get_EqualAverage();
    public sealed virtual bool get_Percent();
    public sealed virtual long get_Rank();
    public sealed virtual int get_StdDev();
}
public class NPOI.OOXML.XSSF.UserModel.XSSFDxfStyleProvider : object {
    private IIndexedColorMap colorMap;
    private IBorderFormatting border;
    private IFontFormatting font;
    private ExcelNumberFormat number;
    private IPatternFormatting fill;
    private int stripeSize;
    public IBorderFormatting BorderFormatting { get; }
    public IFontFormatting FontFormatting { get; }
    public IPatternFormatting PatternFormatting { get; }
    public ExcelNumberFormat NumberFormat { get; }
    public int StripeSize { get; }
    public XSSFDxfStyleProvider(CT_Dxf dxf, int stripeSize, IIndexedColorMap colorMap);
    public sealed virtual IBorderFormatting get_BorderFormatting();
    public sealed virtual IFontFormatting get_FontFormatting();
    public sealed virtual IPatternFormatting get_PatternFormatting();
    public sealed virtual ExcelNumberFormat get_NumberFormat();
    public sealed virtual int get_StripeSize();
}
public class NPOI.OOXML.XSSF.UserModel.XSSFPivotTableStyleInfo : object {
    private CT_PivotTableStyle _pivotStyle;
    private StylesTable _stylesTable;
    private bool _showColStripes;
    private bool _showRowStripes;
    private bool _showColHeaders;
    private bool _showRowHeaders;
    private bool _showLastColumn;
    [CompilerGeneratedAttribute]
private ITableStyle <Style>k__BackingField;
    public bool IsShowColumnStripes { get; public set; }
    public bool IsShowRowStripes { get; public set; }
    public bool IsShowColumnHeaders { get; public set; }
    public bool IsShowRowHeaders { get; public set; }
    public bool IsShowLastColumn { get; public set; }
    public bool IsShowFirstColumn { get; public set; }
    public string Name { get; public set; }
    public ITableStyle Style { get; private set; }
    public XSSFPivotTableStyleInfo(StylesTable stylesTable, CT_PivotTableStyle pivotTableStyle);
    public sealed virtual bool get_IsShowColumnStripes();
    public sealed virtual void set_IsShowColumnStripes(bool value);
    public sealed virtual bool get_IsShowRowStripes();
    public sealed virtual void set_IsShowRowStripes(bool value);
    public sealed virtual bool get_IsShowColumnHeaders();
    public sealed virtual void set_IsShowColumnHeaders(bool value);
    public sealed virtual bool get_IsShowRowHeaders();
    public sealed virtual void set_IsShowRowHeaders(bool value);
    public sealed virtual bool get_IsShowLastColumn();
    public sealed virtual void set_IsShowLastColumn(bool value);
    public sealed virtual bool get_IsShowFirstColumn();
    public sealed virtual void set_IsShowFirstColumn(bool value);
    public sealed virtual string get_Name();
    public sealed virtual void set_Name(string value);
    [CompilerGeneratedAttribute]
public sealed virtual ITableStyle get_Style();
    [CompilerGeneratedAttribute]
private void set_Style(ITableStyle value);
}
public class NPOI.OOXML.XSSF.UserModel.XSSFTableStyle : object {
    private string name;
    private int index;
    private Dictionary`2<TableStyleType, DifferentialStyleProvider> elementMap;
    public string Name { get; }
    public int Index { get; }
    public bool IsBuiltin { get; }
    public XSSFTableStyle(int index, CT_Dxfs dxfs, CT_TableStyle tableStyle, IIndexedColorMap colorMap);
    public sealed virtual string get_Name();
    public sealed virtual int get_Index();
    public sealed virtual bool get_IsBuiltin();
    public sealed virtual DifferentialStyleProvider GetStyle(TableStyleType type);
}
public class NPOI.OOXML.XSSF.UserModel.XSSFTableStyleInfo : object {
    private CT_TableStyleInfo styleInfo;
    private StylesTable stylesTable;
    private ITableStyle style;
    private bool columnStripes;
    private bool rowStripes;
    private bool firstColumn;
    private bool lastColumn;
    public bool IsShowColumnStripes { get; public set; }
    public bool IsShowRowStripes { get; public set; }
    public bool IsShowFirstColumn { get; public set; }
    public bool IsShowLastColumn { get; public set; }
    public string Name { get; public set; }
    public ITableStyle Style { get; }
    public XSSFTableStyleInfo(StylesTable stylesTable, CT_TableStyleInfo tableStyleInfo);
    public sealed virtual bool get_IsShowColumnStripes();
    public sealed virtual void set_IsShowColumnStripes(bool value);
    public sealed virtual bool get_IsShowRowStripes();
    public sealed virtual void set_IsShowRowStripes(bool value);
    public sealed virtual bool get_IsShowFirstColumn();
    public sealed virtual void set_IsShowFirstColumn(bool value);
    public sealed virtual bool get_IsShowLastColumn();
    public sealed virtual void set_IsShowLastColumn(bool value);
    public sealed virtual string get_Name();
    public sealed virtual void set_Name(string value);
    public sealed virtual ITableStyle get_Style();
}
public class NPOI.OOXML.XWPF.Util.DocumentStylesBuilder : object {
    private XWPFStyles documentStyles;
    private CT_Styles ctStyles;
    public DocumentStylesBuilder(XWPFDocument docxDocument);
    public void AddDefaultStyle();
    public void AddCustomHeadingStyle(string name, int headingLevel, int outlineLevel, int ptSize);
    public CT_Styles Build();
    public static CT_Styles BuildStylesForTOC(XWPFDocument doc);
}
public class NPOI.POIFS.Crypt.Agile.AgileDecryptor : Decryptor {
    private long _length;
    protected internal static Byte[] kVerifierInputBlock;
    protected internal static Byte[] kHashedVerifierBlock;
    protected internal static Byte[] kCryptoKeyBlock;
    protected internal static Byte[] kIntegrityKeyBlock;
    protected internal static Byte[] kIntegrityValueBlock;
    private static AgileDecryptor();
    protected internal AgileDecryptor(AgileEncryptionInfoBuilder builder);
    public virtual bool VerifyPassword(string password);
    public bool VerifyPassword(KeyPair keyPair, X509Certificate x509);
    protected internal static int GetNextBlockSize(int inputLen, int blockSize);
    protected internal static Byte[] hashInput(IEncryptionInfoBuilder builder, Byte[] pwHash, Byte[] blockKey, Byte[] inputKey, int cipherMode);
    public virtual InputStream GetDataStream(DirectoryNode dir);
    public virtual long GetLength();
    protected internal static Cipher InitCipherForBlock(Cipher existing, int block, bool lastChunk, IEncryptionInfoBuilder builder, ISecretKey skey, int encryptionMode);
}
public class NPOI.POIFS.Crypt.Agile.AgileEncryptionHeader : EncryptionHeader {
    private Byte[] encryptedHmacKey;
    private Byte[] encryptedHmacValue;
    public AgileEncryptionHeader(string descriptor);
    protected internal AgileEncryptionHeader(EncryptionDocument ed);
    public AgileEncryptionHeader(CipherAlgorithm algorithm, HashAlgorithm hashAlgorithm, int keyBits, int blockSize, ChainingMode chainingMode);
    protected void SetKeySalt(Byte[] salt);
    public Byte[] GetEncryptedHmacKey();
    public void SetEncryptedHmacKey(Byte[] encryptedHmacKey);
    public Byte[] GetEncryptedHmacValue();
    public void SetEncryptedHmacValue(Byte[] encryptedHmacValue);
}
public class NPOI.POIFS.Crypt.Agile.AgileEncryptionInfoBuilder : object {
    private EncryptionInfo info;
    private AgileEncryptionHeader header;
    private AgileEncryptionVerifier verifier;
    private AgileDecryptor decryptor;
    private AgileEncryptor encryptor;
    public sealed virtual void Initialize(EncryptionInfo info, ILittleEndianInput dis);
    public sealed virtual void Initialize(EncryptionInfo info, CipherAlgorithm cipherAlgorithm, HashAlgorithm hashAlgorithm, int keyBits, int blockSize, ChainingMode chainingMode);
    public AgileEncryptionHeader GetHeader();
    public AgileEncryptionVerifier GetVerifier();
    public AgileDecryptor GetDecryptor();
    public AgileEncryptor GetEncryptor();
    public EncryptionInfo GetInfo();
    public static EncryptionDocument ParseDescriptor(string descriptor);
    protected static EncryptionDocument ParseDescriptor(DocumentInputStream descriptor);
    private sealed virtual override EncryptionHeader NPOI.POIFS.Crypt.IEncryptionInfoBuilder.GetHeader();
    private sealed virtual override EncryptionVerifier NPOI.POIFS.Crypt.IEncryptionInfoBuilder.GetVerifier();
    private sealed virtual override Decryptor NPOI.POIFS.Crypt.IEncryptionInfoBuilder.GetDecryptor();
    private sealed virtual override Encryptor NPOI.POIFS.Crypt.IEncryptionInfoBuilder.GetEncryptor();
}
public class NPOI.POIFS.Crypt.Agile.AgileEncryptionVerifier : EncryptionVerifier {
    private List`1<AgileCertificateEntry> certList;
    public AgileEncryptionVerifier(string descriptor);
    protected internal AgileEncryptionVerifier(EncryptionDocument ed);
    public AgileEncryptionVerifier(CipherAlgorithm cipherAlgorithm, HashAlgorithm hashAlgorithm, int keyBits, int blockSize, ChainingMode chainingMode);
    protected void SetSalt(Byte[] salt);
    protected void SetEncryptedVerifier(Byte[] encryptedVerifier);
    protected void SetEncryptedVerifierHash(Byte[] encryptedVerifierHash);
    protected void SetEncryptedKey(Byte[] encryptedKey);
    public void AddCertificate(X509Certificate x509);
    public List`1<AgileCertificateEntry> GetCertificates();
}
public class NPOI.POIFS.Crypt.Agile.AgileEncryptor : Encryptor {
    private AgileEncryptionInfoBuilder builder;
    private Byte[] integritySalt;
    private Byte[] pwHash;
    private CT_KeyEncryptorUri passwordUri;
    private CT_KeyEncryptorUri certificateUri;
    protected internal AgileEncryptor(AgileEncryptionInfoBuilder builder);
    public virtual void ConfirmPassword(string password);
    public virtual void ConfirmPassword(string password, Byte[] keySpec, Byte[] keySalt, Byte[] verifier, Byte[] verifierSalt, Byte[] integritySalt);
    public virtual OutputStream GetDataStream(DirectoryNode dir);
    protected void UpdateIntegrityHMAC(FileInfo tmpFile, int oleStreamSize);
    protected EncryptionDocument CreateEncryptionDocument();
    protected void marshallEncryptionDocument(EncryptionDocument ed, LittleEndianByteArrayOutputStream os);
    protected void CreateEncryptionInfoEntry(DirectoryNode dir, FileInfo tmpFile);
}
internal class NPOI.POIFS.Crypt.Agile.CertificateFactory : object {
    internal static CertificateFactory GetInstance(string v);
    internal X509Certificate GenerateCertificate(MemoryStream memoryStream);
}
public interface NPOI.POIFS.Crypt.Agile.IPrivateKey {
}
public interface NPOI.POIFS.Crypt.Agile.IPublicKey {
}
public class NPOI.POIFS.Crypt.Agile.KeyPair : object {
    private IPrivateKey privateKey;
    private IPublicKey publicKey;
    public KeyPair(IPublicKey publicKey, IPrivateKey privateKey);
    public IPublicKey getPublic();
    public IPrivateKey getPrivate();
}
public class NPOI.POIFS.Crypt.Dsig.CertificateSecurityException : SecurityException {
    private static long serialVersionUID;
    private static CertificateSecurityException();
}
public class NPOI.POIFS.Crypt.Dsig.DigestInfo : object {
    private static long serialVersionUID;
    public Byte[] digestValue;
    public string description;
    public HashAlgorithm hashAlgo;
    public DigestInfo(Byte[] digestValue, HashAlgorithm hashAlgo, string description);
    private static DigestInfo();
    public sealed virtual void GetObjectData(SerializationInfo info, StreamingContext context);
}
public class NPOI.POIFS.Crypt.Dsig.ExpiredCertificateSecurityException : CertificateSecurityException {
}
public class NPOI.POIFS.Crypt.Dsig.Facets.EnvelopedSignatureFacet : SignatureFacet {
    public virtual void preSign(XmlDocument document, List`1<Reference> references, List`1<XmlNode> objects);
}
public class NPOI.POIFS.Crypt.Dsig.Facets.KeyInfoSignatureFacet : SignatureFacet {
    public virtual void postSign(XmlDocument document);
}
public class NPOI.POIFS.Crypt.Dsig.Facets.Office2010SignatureFacet : SignatureFacet {
    public virtual void postSign(XmlDocument document);
}
public class NPOI.POIFS.Crypt.Dsig.Facets.OOXMLSignatureFacet : SignatureFacet {
    public static String[] contentTypes;
    public static String[] signed;
    private static OOXMLSignatureFacet();
    public virtual void preSign(XmlDocument document, List`1<Reference> references, List`1<XmlNode> objects);
    protected void AddManifestObject(XmlDocument document, List`1<Reference> references, List`1<XmlNode> objects);
    protected void AddManifestReferences(List`1<Reference> manifestReferences);
    protected void AddSignatureTime(XmlDocument document, List`1<XmlNode> objectContent);
    protected void AddSignatureInfo(XmlDocument document, List`1<Reference> references, List`1<XmlNode> objects);
    protected static string GetRelationshipReferenceURI(string zipEntryName);
    protected static string GetResourceReferenceURI(string resourceName, string contentType);
    protected static bool IsSignedRelationship(string relationshipType);
}
public abstract class NPOI.POIFS.Crypt.Dsig.Facets.SignatureFacet : object {
    public static string XML_NS;
    public static string XML_DIGSIG_NS;
    public static string OO_DIGSIG_NS;
    public static string MS_DIGSIG_NS;
    public static string XADES_132_NS;
    public static string XADES_141_NS;
    protected SignatureConfig signatureConfig;
    private static SignatureFacet();
    public sealed virtual void SetSignatureConfig(SignatureConfig signatureConfig);
    public virtual void preSign(XmlDocument document, List`1<Reference> references, List`1<XmlNode> objects);
    public virtual void postSign(XmlDocument document);
    protected Transform newTransform(string canonicalizationMethod);
    protected Reference newReference(string uri, List`1<Transform> transforms, string type, string id, Byte[] digestValue);
    public static Reference newReference(string uri, List`1<Transform> transforms, string type, string id, Byte[] digestValue, SignatureConfig signatureConfig);
    public static void brokenJvmWorkaround(Reference reference);
}
public class NPOI.POIFS.Crypt.Dsig.Facets.XAdESSignatureFacet : SignatureFacet {
    private static string XADES_TYPE;
    private Dictionary`2<string, string> dataObjectFormatMimeTypes;
    private static XAdESSignatureFacet();
    public void preSign(XmlDocument document, List`1<Reference> references, List`1<XmlNode> objects);
    public void AddMimeType(string dsReferenceUri, string mimetype);
    protected static void insertXChild(XmlNode root, XmlNode child);
}
public class NPOI.POIFS.Crypt.Dsig.Facets.XAdESXLSignatureFacet : SignatureFacet {
    public virtual void postSign(XmlDocument document);
    public static Byte[] GetC14nValue(List`1<XmlNode> nodeList, string c14nAlgoId);
}
public interface NPOI.POIFS.Crypt.Dsig.IData {
}
public interface NPOI.POIFS.Crypt.Dsig.IEvent {
}
public interface NPOI.POIFS.Crypt.Dsig.IEventListener {
    public abstract virtual void handleEvent(IEvent evt);
}
public interface NPOI.POIFS.Crypt.Dsig.ISignatureConfigurable {
    public abstract virtual void SetSignatureConfig(SignatureConfig signatureConfig);
}
public interface NPOI.POIFS.Crypt.Dsig.IURIDereferencer {
    public abstract virtual IData dereference(IURIReference uriReference, SignedXml context);
}
public interface NPOI.POIFS.Crypt.Dsig.IURIReference {
    public abstract virtual string getURI();
    public abstract virtual string getType();
}
public class NPOI.POIFS.Crypt.Dsig.OOXMLURIDereferencer : object {
    private SignatureConfig signatureConfig;
    private IURIDereferencer baseUriDereferencer;
    public sealed virtual void SetSignatureConfig(SignatureConfig signatureConfig);
    public sealed virtual IData dereference(IURIReference uriReference, SignedXml context);
    private PackagePart FindPart(Uri uri);
}
public class NPOI.POIFS.Crypt.Dsig.RevokedCertificateSecurityException : CertificateSecurityException {
    private static long serialVersionUID;
    private static RevokedCertificateSecurityException();
}
internal class NPOI.POIFS.Crypt.Dsig.Services.CRLException : Exception {
    public CRLException(string message);
    public CRLException(string message, Exception innerException);
    protected CRLException(SerializationInfo info, StreamingContext context);
}
public interface NPOI.POIFS.Crypt.Dsig.Services.IRevocationDataService {
    public abstract virtual RevocationData GetRevocationData(List`1<X509Certificate> certificateChain);
}
public interface NPOI.POIFS.Crypt.Dsig.Services.ISignaturePolicyService {
    public abstract virtual string GetSignaturePolicyIdentifier();
    public abstract virtual string GetSignaturePolicyDescription();
    public abstract virtual string GetSignaturePolicyDownloadUrl();
    public abstract virtual Byte[] GetSignaturePolicyDocument();
}
public interface NPOI.POIFS.Crypt.Dsig.Services.ITimeStampService {
    public abstract virtual Byte[] TimeStamp(Byte[] data, RevocationData revocationData);
}
public interface NPOI.POIFS.Crypt.Dsig.Services.ITimeStampServiceValidator {
    public abstract virtual void Validate(List`1<X509Certificate> certificateChain, RevocationData revocationData);
}
public class NPOI.POIFS.Crypt.Dsig.Services.RevocationData : object {
    private List`1<Byte[]> crls;
    private List`1<Byte[]> ocsps;
    public void AddCRL(Byte[] encodedCrl);
    public void AddCRL(X509CRL crl);
    public void AddOCSP(Byte[] encodedOcsp);
    public List`1<Byte[]> GetCRLs();
    public List`1<Byte[]> GetOCSPs();
    public bool HasOCSPs();
    public bool HasCRLs();
    public bool HasRevocationDataEntries();
}
public class NPOI.POIFS.Crypt.Dsig.Services.TSPTimeStampService : object {
    private SignatureConfig signatureConfig;
    public DerObjectIdentifier mapDigestAlgoToOID(HashAlgorithm digestAlgo);
    public sealed virtual Byte[] TimeStamp(Byte[] data, RevocationData revocationData);
    public sealed virtual void SetSignatureConfig(SignatureConfig signatureConfig);
}
public class NPOI.POIFS.Crypt.Dsig.Services.X509CRL : object {
    public Byte[] getEncoded();
}
public class NPOI.POIFS.Crypt.Dsig.SignatureConfig : object {
    private ThreadLocal`1<OPCPackage> opcPackage;
    private List`1<SignatureFacet> signatureFacets;
    private HashAlgorithm digestAlgo;
    private DateTime executionTime;
    private IPrivateKey key;
    private List`1<X509Certificate> signingCertificateChain;
    private ISignaturePolicyService signaturePolicyService;
    private IURIDereferencer uriDereferencer;
    private string canonicalizationMethod;
    private bool includeEntireCertificateChain;
    private bool includeIssuerSerial;
    private bool includeKeyValue;
    private ITimeStampService tspService;
    private string tspUrl;
    private bool tspOldProtocol;
    private HashAlgorithm tspDigestAlgo;
    private string tspUser;
    private string tspPass;
    private ITimeStampServiceValidator tspValidator;
    private string tspRequestPolicy;
    private string userAgent;
    private string proxyUrl;
    private IRevocationDataService revocationDataService;
    private HashAlgorithm xadesDigestAlgo;
    private string xadesRole;
    private string xadesSignatureId;
    private bool xadesSignaturePolicyImplied;
    private string xadesCanonicalizationMethod;
    private bool xadesIssuerNameNoReverseOrder;
    private string packageSignatureId;
    private string signatureDescription;
    private IEventListener signatureMarshalListener;
    private Dictionary`2<string, string> namespacePrefixes;
    protected internal void Init(bool onlyValidation);
    public void AddSignatureFacet(SignatureFacet signatureFacet);
    public List`1<SignatureFacet> GetSignatureFacets();
    public void SetSignatureFacets(List`1<SignatureFacet> signatureFacets);
    public HashAlgorithm GetDigestAlgo();
    public void SetDigestAlgo(HashAlgorithm digestAlgo);
    public OPCPackage GetOpcPackage();
    public void SetOpcPackage(OPCPackage opcPackage);
    public IPrivateKey GetKey();
    public void SetKey(IPrivateKey key);
    public List`1<X509Certificate> GetSigningCertificateChain();
    public void SetSigningCertificateChain(List`1<X509Certificate> signingCertificateChain);
    public DateTime GetExecutionTime();
    public void SetExecutionTime(DateTime executionTime);
    public ISignaturePolicyService GetSignaturePolicyService();
    public void SetSignaturePolicyService(ISignaturePolicyService signaturePolicyService);
    public string GetSignatureDescription();
    public void SetSignatureDescription(string signatureDescription);
    public string GetCanonicalizationMethod();
    public void SetCanonicalizationMethod(string canonicalizationMethod);
    public string GetPackageSignatureId();
    public void SetPackageSignatureId(string packageSignatureId);
    public string GetTspUrl();
    public void SetTspUrl(string tspUrl);
    public bool IsTspOldProtocol();
    public void SetTspOldProtocol(bool tspOldProtocol);
    public HashAlgorithm GetTspDigestAlgo();
    public void SetTspDigestAlgo(HashAlgorithm tspDigestAlgo);
    public string GetProxyUrl();
    public void SetProxyUrl(string proxyUrl);
    public ITimeStampService GetTspService();
    public void SetTspService(ITimeStampService tspService);
    public string GetTspUser();
    public void SetTspUser(string tspUser);
    public string GetTspPass();
    public void SetTspPass(string tspPass);
    public ITimeStampServiceValidator GetTspValidator();
    public void SetTspValidator(ITimeStampServiceValidator tspValidator);
    public IRevocationDataService GetRevocationDataService();
    public void SetRevocationDataService(IRevocationDataService revocationDataService);
    public HashAlgorithm GetXadesDigestAlgo();
    public void SetXadesDigestAlgo(HashAlgorithm xadesDigestAlgo);
    public string GetUserAgent();
    public void SetUserAgent(string userAgent);
    public string GetTspRequestPolicy();
    public void SetTspRequestPolicy(string tspRequestPolicy);
    public bool IsIncludeEntireCertificateChain();
    public void SetIncludeEntireCertificateChain(bool includeEntireCertificateChain);
    public bool IsIncludeIssuerSerial();
    public void SetIncludeIssuerSerial(bool includeIssuerSerial);
    public bool IsIncludeKeyValue();
    public void SetIncludeKeyValue(bool includeKeyValue);
    public string GetXadesRole();
    public void SetXadesRole(string xadesRole);
    public string GetXadesSignatureId();
    public void SetXadesSignatureId(string xadesSignatureId);
    public bool IsXadesSignaturePolicyImplied();
    public void SetXadesSignaturePolicyImplied(bool xadesSignaturePolicyImplied);
    public bool IsXadesIssuerNameNoReverseOrder();
    public void SetXadesIssuerNameNoReverseOrder(bool xadesIssuerNameNoReverseOrder);
    public Dictionary`2<string, string> GetNamespacePrefixes();
    public void SetNamespacePrefixes(Dictionary`2<string, string> namespacePrefixes);
    protected static T nvl(T value, T defaultValue);
    public Byte[] GetHashMagic();
    public string GetSignatureMethodUri();
    public string GetDigestMethodUri();
    public static string GetDigestMethodUri(HashAlgorithm digestAlgo);
    public string GetXadesCanonicalizationMethod();
    public void SetXadesCanonicalizationMethod(string xadesCanonicalizationMethod);
}
public class NPOI.POIFS.Crypt.Dsig.SignatureInfo : object {
    private static bool IsInitialized;
    protected internal SignatureConfig signatureConfig;
    public SignatureConfig GetSignatureConfig();
    public sealed virtual void SetSignatureConfig(SignatureConfig signatureConfig);
    public bool VerifySignature();
    public void ConfirmSignature();
    public Byte[] signDigest(Byte[] digest);
    public IEnumerable`1<SignaturePart> GetSignatureParts();
    protected static void InitXmlProvider();
    public DigestInfo preSign(XmlDocument document, List`1<DigestInfo> digestInfos);
    public void postSign(XmlDocument document, Byte[] signatureValue);
    protected void WriteDocument(XmlDocument document);
    private static List`1<T> safe(List`1<T> other);
}
public class NPOI.POIFS.Crypt.Dsig.SignatureMarshalListener : object {
    private SignatureConfig signatureConfig;
    public sealed virtual void handleEvent(IEvent e);
    public void handleElement(XmlElement el);
    protected void SetPrefix(XmlNode el);
    public sealed virtual void SetSignatureConfig(SignatureConfig signatureConfig);
}
public class NPOI.POIFS.Crypt.Dsig.TrustCertificateSecurityException : CertificateSecurityException {
}
public class NPOI.POIFS.Crypt.Dsig.XMLSignature : object {
    public static string ALGO_ID_MAC_HMAC_SHA1;
    public static string ALGO_ID_SIGNATURE_DSA;
    public static string ALGO_ID_SIGNATURE_DSA_SHA256;
    public static string ALGO_ID_SIGNATURE_RSA;
    public static string ALGO_ID_SIGNATURE_RSA_SHA1;
    public static string ALGO_ID_SIGNATURE_NOT_RECOMMENDED_RSA_MD5;
    public static string ALGO_ID_SIGNATURE_RSA_RIPEMD160;
    public static string ALGO_ID_SIGNATURE_RSA_SHA224;
    public static string ALGO_ID_SIGNATURE_RSA_SHA256;
    public static string ALGO_ID_SIGNATURE_RSA_SHA384;
    public static string ALGO_ID_SIGNATURE_RSA_SHA512;
    public static string ALGO_ID_SIGNATURE_RSA_SHA1_MGF1;
    public static string ALGO_ID_SIGNATURE_RSA_SHA224_MGF1;
    public static string ALGO_ID_SIGNATURE_RSA_SHA256_MGF1;
    public static string ALGO_ID_SIGNATURE_RSA_SHA384_MGF1;
    public static string ALGO_ID_SIGNATURE_RSA_SHA512_MGF1;
    public static string ALGO_ID_MAC_HMAC_NOT_RECOMMENDED_MD5;
    public static string ALGO_ID_MAC_HMAC_RIPEMD160;
    public static string ALGO_ID_MAC_HMAC_SHA224;
    public static string ALGO_ID_MAC_HMAC_SHA256;
    public static string ALGO_ID_MAC_HMAC_SHA384;
    public static string ALGO_ID_MAC_HMAC_SHA512;
    public static string ALGO_ID_SIGNATURE_ECDSA_SHA1;
    public static string ALGO_ID_SIGNATURE_ECDSA_SHA224;
    public static string ALGO_ID_SIGNATURE_ECDSA_SHA256;
    public static string ALGO_ID_SIGNATURE_ECDSA_SHA384;
    public static string ALGO_ID_SIGNATURE_ECDSA_SHA512;
    public static string ALGO_ID_SIGNATURE_ECDSA_RIPEMD160;
    private static XMLSignature();
}
public abstract class NPOI.POIXMLDocument : POIXMLDocumentPart {
    public static string DOCUMENT_CREATOR;
    public static string OLE_OBJECT_REL_TYPE;
    public static string PACK_OBJECT_REL_TYPE;
    private OPCPackage pkg;
    private POIXMLProperties properties;
    public OPCPackage Package { get; }
    protected PackagePart CorePart { get; }
    protected POIXMLDocument(OPCPackage pkg);
    protected POIXMLDocument(OPCPackage pkg, string coreDocumentRel);
    private static POIXMLDocument();
    private void init(OPCPackage pkg);
    public static OPCPackage OpenPackage(string path, bool readOnly);
    public OPCPackage get_Package();
    protected PackagePart get_CorePart();
    protected PackagePart[] GetRelatedByType(string contentType);
    [ObsoleteAttribute("Use the method from DocumentFactoryHelper")]
public static bool HasOOXMLHeader(Stream inp);
    public POIXMLProperties GetProperties();
    public abstract virtual List`1<PackagePart> GetAllEmbedds();
    protected void Load(POIXMLFactory factory);
    public sealed virtual void Close();
    public void Write(Stream stream);
}
public class NPOI.POIXMLDocumentPart : object {
    private static POILogger logger;
    private string coreDocumentRel;
    private PackagePart packagePart;
    private POIXMLDocumentPart parent;
    private Dictionary`2<string, RelationPart> relations;
    private int relationCounter;
    private static XmlNamespaceManager nsm;
    public static XmlNamespaceManager NamespaceManager { get; }
    public IList`1<RelationPart> RelationParts { get; }
    public POIXMLDocumentPart(OPCPackage pkg);
    public POIXMLDocumentPart(OPCPackage pkg, string coreDocumentRel);
    public POIXMLDocumentPart(PackagePart part);
    public POIXMLDocumentPart(POIXMLDocumentPart parent, PackagePart part);
    [ObsoleteAttribute("deprecated in POI 3.14, scheduled for removal in POI 3.16")]
public POIXMLDocumentPart(PackagePart part, PackageRelationship rel);
    [ObsoleteAttribute("deprecated in POI 3.14, scheduled for removal in POI 3.16")]
public POIXMLDocumentPart(POIXMLDocumentPart parent, PackagePart part, PackageRelationship rel);
    private static POIXMLDocumentPart();
    private int IncrementRelationCounter();
    private int DecrementRelationCounter();
    private int GetRelationCounter();
    protected void Rebase(OPCPackage pkg);
    public static XmlNamespaceManager get_NamespaceManager();
    internal static XmlNamespaceManager CreateDefaultNSM();
    public PackagePart GetPackagePart();
    public static XmlDocument ConvertStreamToXml(Stream xmlStream);
    [ObsoleteAttribute("deprecated in POI 3.14, scheduled for removal in POI 3.16")]
public PackageRelationship GetPackageRelationship();
    public IList`1<POIXMLDocumentPart> GetRelations();
    public IList`1<RelationPart> get_RelationParts();
    public POIXMLDocumentPart GetRelationById(string id);
    public string GetRelationId(POIXMLDocumentPart part);
    [ObsoleteAttribute("deprecated in POI 3.14, scheduled for removal in POI 3.16")]
public void AddRelation(string id, POIXMLDocumentPart part);
    public RelationPart AddRelation(string relId, POIXMLRelation relationshipType, POIXMLDocumentPart part);
    private void AddRelation(PackageRelationship pr, POIXMLDocumentPart part);
    protected internal void RemoveRelation(POIXMLDocumentPart part);
    protected internal bool RemoveRelation(POIXMLDocumentPart part, bool RemoveUnusedParts);
    public POIXMLDocumentPart GetParent();
    public virtual string ToString();
    protected internal virtual void Commit();
    protected internal void OnSave(List`1<PackagePart> alreadySaved);
    protected internal virtual void PrepareForCommit();
    public POIXMLDocumentPart CreateRelationship(POIXMLRelation descriptor, POIXMLFactory factory);
    public POIXMLDocumentPart CreateRelationship(POIXMLRelation descriptor, POIXMLFactory factory, int idx);
    protected internal int GetNextPartNumber(POIXMLRelation descriptor, int minIdx);
    protected RelationPart CreateRelationship(POIXMLRelation descriptor, POIXMLFactory factory, int idx, bool noRelation);
    public TValue PutDictionary(Dictionary`2<TKey, TValue> dict, TKey key, TValue value);
    public TValue GetDictionary(Dictionary`2<TKey, TValue> dict, TKey key);
    protected void Read(POIXMLFactory factory, Dictionary`2<PackagePart, POIXMLDocumentPart> context);
    protected PackagePart GetTargetPart(PackageRelationship rel);
    internal virtual void OnDocumentCreate();
    internal virtual void OnDocumentRead();
    protected virtual void onDocumentRemove();
    private static PackagePart GetPartFromOPCPackage(OPCPackage pkg, string coreDocumentRel);
}
public class NPOI.POIXMLException : Exception {
    public POIXMLException(string msg);
    public POIXMLException(string msg, Exception ex);
    public POIXMLException(Exception ex);
}
public abstract class NPOI.POIXMLFactory : object {
    private static POILogger LOGGER;
    private static Type[] PARENT_PART;
    private static Type[] ORPHAN_PART;
    private static POIXMLFactory();
    public virtual POIXMLDocumentPart CreateDocumentPart(POIXMLDocumentPart parent, PackagePart part);
    protected abstract virtual POIXMLDocumentPart CreateDocumentPart(Type cls, Type[] classes, Object[] values);
    protected abstract virtual POIXMLRelation GetDescriptor(string relationshipType);
    [ObsoleteAttribute("deprecated in POI 3.14, scheduled for removal in POI 3.16")]
public virtual POIXMLDocumentPart CreateDocumentPart(POIXMLDocumentPart parent, PackageRelationship rel, PackagePart part);
    public POIXMLDocumentPart NewDocumentPart(POIXMLRelation descriptor);
    protected PackageRelationship GetPackageRelationship(POIXMLDocumentPart parent, PackagePart part);
}
public class NPOI.POIXMLProperties : object {
    private OPCPackage pkg;
    private CoreProperties core;
    private ExtendedProperties ext;
    private CustomProperties cust;
    private PackagePart extPart;
    private PackagePart custPart;
    private static ExtendedPropertiesDocument NEW_EXT_INSTANCE;
    private static CustomPropertiesDocument NEW_CUST_INSTANCE;
    public CoreProperties CoreProperties { get; }
    public ExtendedProperties ExtendedProperties { get; }
    public CustomProperties CustomProperties { get; }
    protected internal PackagePart ThumbnailPart { get; }
    public string ThumbnailFilename { get; }
    public Stream ThumbnailImage { get; }
    private static POIXMLProperties();
    public POIXMLProperties(OPCPackage docPackage);
    public CoreProperties get_CoreProperties();
    public ExtendedProperties get_ExtendedProperties();
    public CustomProperties get_CustomProperties();
    protected internal PackagePart get_ThumbnailPart();
    public string get_ThumbnailFilename();
    public Stream get_ThumbnailImage();
    public void SetThumbnail(string filename, Stream imageData);
    public virtual void Commit();
}
public class NPOI.POIXMLPropertiesTextExtractor : POIXMLTextExtractor {
    public string Text { get; }
    public POITextExtractor MetadataTextExtractor { get; }
    public POIXMLPropertiesTextExtractor(POIXMLDocument doc);
    public POIXMLPropertiesTextExtractor(POIXMLTextExtractor otherExtractor);
    private void AppendIfPresent(StringBuilder text, string thing, bool value);
    private void AppendIfPresent(StringBuilder text, string thing, int value);
    private void AppendIfPresent(StringBuilder text, string thing, Nullable`1<DateTime> value);
    private void AppendIfPresent(StringBuilder text, string thing, string value);
    public string GetCorePropertiesText();
    public string GetExtendedPropertiesText();
    public string GetCustomPropertiesText();
    public virtual string get_Text();
    public virtual POITextExtractor get_MetadataTextExtractor();
}
public abstract class NPOI.POIXMLRelation : object {
    private string _type;
    private string _relation;
    private string _defaultName;
    private Type _cls;
    public string ContentType { get; }
    public string Relation { get; }
    public string DefaultFileName { get; }
    public Type RelationClass { get; }
    public POIXMLRelation(string type, string rel, string defaultName, Type cls);
    public POIXMLRelation(string type, string rel, string defaultName);
    public string get_ContentType();
    public string get_Relation();
    public string get_DefaultFileName();
    public string GetFileName(int index);
    public int GetFileNameIndex(POIXMLDocumentPart part);
    public Type get_RelationClass();
}
public abstract class NPOI.POIXMLTextExtractor : POITextExtractor {
    private POIXMLDocument _document;
    public POIXMLDocument Document { get; }
    public OPCPackage Package { get; }
    public POITextExtractor MetadataTextExtractor { get; }
    public POIXMLTextExtractor(POIXMLDocument document);
    public CoreProperties GetCoreProperties();
    public ExtendedProperties GetExtendedProperties();
    public CustomProperties GetCustomProperties();
    public POIXMLDocument get_Document();
    public OPCPackage get_Package();
    public virtual POITextExtractor get_MetadataTextExtractor();
    public virtual void Close();
}
public class NPOI.SS.Converter.ExcelToHtmlConverter : object {
    private POILogger logger;
    private DataFormatter _formatter;
    private string cssClassContainerCell;
    private string cssClassContainerDiv;
    private string cssClassTable;
    private Dictionary`2<short, string> excelStyleToClass;
    private HtmlDocumentFacade htmlDocumentFacade;
    private bool outputColumnHeaders;
    private bool outputHiddenColumns;
    private bool outputHiddenRows;
    private bool outputLeadingSpacesAsNonBreaking;
    private bool outputRowNumbers;
    private bool useDivsToSpan;
    public bool OutputColumnHeaders { get; public set; }
    public bool OutputHiddenColumns { get; public set; }
    public bool OutputHiddenRows { get; public set; }
    public bool OutputLeadingSpacesAsNonBreaking { get; public set; }
    public bool OutputRowNumbers { get; public set; }
    public bool UseDivsToSpan { get; public set; }
    public XmlDocument Document { get; }
    protected static double GetColumnWidth(ISheet sheet, int columnIndex);
    public bool get_OutputColumnHeaders();
    public void set_OutputColumnHeaders(bool value);
    public bool get_OutputHiddenColumns();
    public void set_OutputHiddenColumns(bool value);
    public bool get_OutputHiddenRows();
    public void set_OutputHiddenRows(bool value);
    public bool get_OutputLeadingSpacesAsNonBreaking();
    public void set_OutputLeadingSpacesAsNonBreaking(bool value);
    public bool get_OutputRowNumbers();
    public void set_OutputRowNumbers(bool value);
    public bool get_UseDivsToSpan();
    public void set_UseDivsToSpan(bool value);
    public static XmlDocument Process(string excelFile);
    public XmlDocument get_Document();
    public void ProcessWorkbook(IWorkbook workbook);
    protected void ProcessSheet(ISheet sheet);
    protected void ProcessSheetHeader(XmlElement htmlBody, ISheet sheet);
    protected void ProcessDocumentInformation(IWorkbook workbook);
    protected int ProcessRow(CellRangeAddress[][] mergedRanges, IRow row, XmlElement tableRowElement);
    private string GetRowName(IRow row);
    protected void ProcessRowNumber(IRow row, XmlElement tableRowNumberCellElement);
    protected void ProcessColumnWidths(ISheet sheet, int maxSheetColumns, XmlElement table);
    protected void ProcessColumnHeaders(ISheet sheet, int maxSheetColumns, XmlElement table);
    protected string GetColumnName(int columnIndex);
    protected bool IsTextEmpty(ICell cell);
    protected bool ProcessCell(ICell cell, XmlElement tableCellElement, double normalWidthPx, double maxSpannedWidthPx, float normalHeightPt);
    protected string GetStyleClassName(IWorkbook workbook, ICellStyle cellStyle);
    protected string BuildStyle(IWorkbook workbook, ICellStyle cellStyle);
    private void BuildStyle_Border(IWorkbook workbook, StringBuilder style, string type, BorderStyle xlsBorder, short borderColor);
    private void BuildStyle_Font(IWorkbook workbook, StringBuilder style, IFont font);
}
public class NPOI.SS.Converter.ExcelToHtmlUtils : object {
    private static short EXCEL_COLUMN_WIDTH_FACTOR;
    private static int UNIT_OFFSET_LENGTH;
    public static void AppendAlign(StringBuilder style, HorizontalAlignment alignment);
    public static CellRangeAddress[][] BuildMergedRangesMap(ISheet sheet);
    public static string GetBorderStyle(BorderStyle xlsBorder);
    public static string GetBorderWidth(BorderStyle xlsBorder);
    public static string GetColor(XSSFColor color);
    public static string GetColor(HSSFColor color);
    public static double GetColumnWidthInPx(double widthUnits);
    public static CellRangeAddress GetMergedRange(CellRangeAddress[][] mergedRanges, int rowNumber, int columnNumber);
    public static HSSFWorkbook LoadXls(string xlsFile);
}
public enum NPOI.SS.UserModel.ImportOption : Enum {
    public int value__;
    public static ImportOption NONE;
    public static ImportOption SheetContentOnly;
    public static ImportOption TextOnly;
    public static ImportOption All;
}
public static class NPOI.SS.UserModel.WorkbookFactory : object {
    public static IWorkbook Create(POIFSFileSystem fs);
    public static IWorkbook Create(NPOIFSFileSystem fs);
    private static IWorkbook Create(NPOIFSFileSystem fs, string password);
    public static IWorkbook Create(OPCPackage pkg);
    public static IWorkbook Create(Stream inputStream, bool readOnly);
    public static IWorkbook Create(Stream inputStream);
    public static IWorkbook Create(string file, string password, bool readOnly);
    public static IWorkbook Create(string file);
    public static IWorkbook Create(string file, string password);
    public static IWorkbook Create(Stream inputStream, string password, bool readOnly);
    public static IWorkbook Create(Stream inputStream, ImportOption importOption);
    public static IFormulaEvaluator CreateFormulaEvaluator(IWorkbook workbook);
    public static void SetImportOption(ImportOption importOption);
}
public static class NPOI.Util.EnumConverter : object {
    public static ST_Jc ValueOf(ParagraphAlignment val);
    public static ParagraphAlignment ValueOf(ST_Jc val);
    public static T ValueOf(F val);
}
public class NPOI.Util.IdentifierManager : object {
    public static long MAX_ID;
    public static long MIN_ID;
    private long upperbound;
    private long lowerbound;
    private List`1<Segment> segments;
    public IdentifierManager(long lowerbound, long upperbound);
    private static IdentifierManager();
    public long Reserve(long id);
    public long ReserveNew();
    public bool Release(long id);
    public long GetRemainingIdentifiers();
    private void VerifyIdentifiersLeft();
}
public class NPOI.Util.PackageHelper : object {
    public static OPCPackage Open(Stream stream, bool readOnly);
    public static OPCPackage Clone(OPCPackage pkg, string path);
    public string CreateTempFile();
    private static void Copy(OPCPackage pkg, PackagePart part, OPCPackage tgt, PackagePart part_tgt);
    private static void CopyProperties(PackageProperties src, PackageProperties tgt);
}
public class NPOI.XSSF.Extractor.XSSFExcelExtractor : POIXMLTextExtractor {
    public static XSSFRelation[] SUPPORTED_TYPES;
    private XSSFWorkbook workbook;
    private DataFormatter dataFormatter;
    private bool includeSheetNames;
    private bool formulasNotResults;
    private bool includeCellComments;
    private bool includeHeadersFooters;
    private bool includeTextBoxes;
    private CultureInfo locale;
    public bool IncludeHeaderFooter { get; public set; }
    public bool IncludeSheetNames { get; public set; }
    public bool FormulasNotResults { get; public set; }
    public bool IncludeCellComments { get; public set; }
    public bool IncludeTextBoxes { get; public set; }
    public string Text { get; }
    public XSSFExcelExtractor(OPCPackage Container);
    public XSSFExcelExtractor(XSSFWorkbook workbook);
    private static XSSFExcelExtractor();
    public sealed virtual bool get_IncludeHeaderFooter();
    public sealed virtual void set_IncludeHeaderFooter(bool value);
    public sealed virtual bool get_IncludeSheetNames();
    public sealed virtual void set_IncludeSheetNames(bool value);
    public sealed virtual bool get_FormulasNotResults();
    public sealed virtual void set_FormulasNotResults(bool value);
    public sealed virtual bool get_IncludeCellComments();
    public sealed virtual void set_IncludeCellComments(bool value);
    public bool get_IncludeTextBoxes();
    public void set_IncludeTextBoxes(bool value);
    public void SetIncludeSheetNames(bool includeSheetNames);
    public void SetFormulasNotResults(bool formulasNotResults);
    public void SetIncludeCellComments(bool includeCellComments);
    public void SetIncludeHeadersFooters(bool includeHeadersFooters);
    public void SetIncludeTextBoxes(bool includeTextBoxes);
    public void SetLocale(CultureInfo locale);
    public virtual string get_Text();
    private void HandleStringCell(StringBuilder text, ICell cell);
    private void HandleNonStringCell(StringBuilder text, ICell cell, DataFormatter formatter);
    private string ExtractHeaderFooter(IHeaderFooter hf);
}
public class NPOI.XSSF.Extractor.XSSFExportToXml : object {
    private XSSFMap map;
    public XSSFExportToXml(XSSFMap map);
    public void ExportToXML(Stream os, bool validate);
    private XmlDocument GetEmptyDocument();
    public void ExportToXML(Stream os, string encoding, bool validate);
    private bool IsValid(XmlDocument xml);
    private void mapCellOnNode(XSSFCell cell, XmlNode node);
    private string RemoveNamespace(string elementName);
    private string GetFormattedDate(XSSFCell cell);
    private XmlNode GetNodeByXPath(string xpath, XmlNode rootNode, XmlDocument doc, bool CreateMultipleInstances);
    private XmlNode CreateAttribute(XmlDocument doc, XmlNode currentNode, string axisName);
    private XmlNode CreateElement(XmlDocument doc, XmlNode currentNode, string axisName);
    private XmlNode selectNode(string axisName, XmlNodeList list);
    private bool IsNamespaceDeclared();
    private string GetNamespace();
    public sealed virtual int Compare(string leftXpath, string rightXpath);
    private int IndexOfElementInComplexType(string elementName, XmlNode complexType);
    private XmlNode GetNameOrRefElement(XmlNode node);
    private XmlNode GetComplexTypeForElement(string elementName, XmlNode xmlSchema, XmlNode localComplexTypeRootNode);
    private string GetComplexTypeNameFromChildren(XmlNode localComplexTypeRootNode, string elementNameWithoutNamespace);
    private XmlNode GetComplexTypeNodeFromSchemaChildren(XmlNode xmlSchema, XmlNode complexTypeNode, string complexTypeName);
}
public class NPOI.XSSF.Model.CalculationChain : POIXMLDocumentPart {
    private CT_CalcChain chain;
    internal CalculationChain(PackagePart part);
    [ObsoleteAttribute("deprecated in POI 3.14, scheduled for removal in POI 3.16")]
public CalculationChain(PackagePart part, PackageRelationship rel);
    public void ReadFrom(XmlDocument xml);
    public void WriteTo(Stream out1);
    protected internal virtual void Commit();
    public CT_CalcChain GetCTCalcChain();
    public void RemoveItem(int sheetId, string ref1);
}
public class NPOI.XSSF.Model.CommentsTable : POIXMLDocumentPart {
    public static string DEFAULT_AUTHOR;
    public static int DEFAULT_AUTHOR_ID;
    private CT_Comments comments;
    private Dictionary`2<CellAddress, CT_Comment> commentRefs;
    internal CommentsTable(PackagePart part);
    [ObsoleteAttribute("deprecated in POI 3.14, scheduled for removal in POI 3.16")]
public CommentsTable(PackagePart part, PackageRelationship rel);
    private static CommentsTable();
    public void ReadFrom(Stream is1);
    public void WriteTo(Stream out1);
    protected internal virtual void Commit();
    [ObsoleteAttribute("2015-11-23 (circa POI 3.14beta1). Use {@link #referenceUpdated(CellAddress, CTComment)} instead")]
public void ReferenceUpdated(string oldReference, CT_Comment comment);
    public void ReferenceUpdated(CellAddress oldReference, CT_Comment comment);
    public int GetNumberOfComments();
    public int GetNumberOfAuthors();
    public string GetAuthor(long authorId);
    public int FindAuthor(string author);
    [ObsoleteAttribute("deprecated 2015-11-23 (circa POI 3.14beta1). Use {@link #findCellComment(CellAddress)} instead")]
public XSSFComment FindCellComment(string cellRef);
    public XSSFComment FindCellComment(CellAddress cellAddress);
    [ObsoleteAttribute("deprecated 2015-11-23 (circa POI 3.14beta1). Use {@link CommentsTable#getCTComment(CellAddress)} instead")]
public CT_Comment GetCTComment(string ref1);
    public List`1<CellAddress> GetCellAddresses();
    public CT_Comment GetCTComment(CellAddress cellRef);
    public Dictionary`2<CellAddress, IComment> GetCellComments();
    private void PrepareCTCommentCache();
    [ObsoleteAttribute("deprecated 2015-11-23 (circa POI 3.14beta1). Use {@link #newComment(CellAddress)} instead")]
public CT_Comment NewComment(string ref1);
    public CT_Comment NewComment(CellAddress ref1);
    [ObsoleteAttribute("deprecated 2015-11-23 (circa POI 3.14beta1). Use {@link #removeComment(CellAddress)} instead")]
public bool RemoveComment(string cellRef);
    public bool RemoveComment(CellAddress cellRef);
    private int AddNewAuthor(string author);
    public CT_Comments GetCTComments();
    private void prepareCTCommentCache();
}
public class NPOI.XSSF.Model.ExternalLinksTable : POIXMLDocumentPart {
    private CT_ExternalLink link;
    public CT_ExternalLink CTExternalLink { get; }
    public string LinkedFileName { get; public set; }
    public List`1<string> SheetNames { get; }
    public List`1<IName> DefinedNames { get; }
    internal ExternalLinksTable(PackagePart part);
    [ObsoleteAttribute("deprecated in POI 3.14, scheduled for removal in POI 3.16")]
public ExternalLinksTable(PackagePart part, PackageRelationship rel);
    public void ReadFrom(Stream is1);
    public void WriteTo(Stream out1);
    protected internal virtual void Commit();
    public CT_ExternalLink get_CTExternalLink();
    public virtual string get_LinkedFileName();
    public virtual void set_LinkedFileName(string value);
    public List`1<string> get_SheetNames();
    public List`1<IName> get_DefinedNames();
}
public class NPOI.XSSF.Model.MapInfo : POIXMLDocumentPart {
    private CT_MapInfo mapInfo;
    private Dictionary`2<int, XSSFMap> maps;
    public XSSFWorkbook Workbook { get; }
    internal MapInfo(PackagePart part);
    [ObsoleteAttribute("deprecated in POI 3.14, scheduled for removal in POI 3.16")]
public MapInfo(PackagePart part, PackageRelationship rel);
    public void ReadFrom(Stream is1);
    public XSSFWorkbook get_Workbook();
    public CT_MapInfo GetCTMapInfo();
    public CT_Schema GetCTSchemaById(string schemaId);
    public XSSFMap GetXSSFMapById(int id);
    public XSSFMap GetXSSFMapByName(string name);
    public List`1<XSSFMap> GetAllXSSFMaps();
    protected void WriteTo(Stream out1);
    protected internal virtual void Commit();
}
public abstract class NPOI.XSSF.Model.ParagraphPropertyFetcher : object {
    public abstract virtual bool Fetch(CT_TextParagraphProperties props);
    public abstract virtual bool Fetch(CT_Shape props);
}
public abstract class NPOI.XSSF.Model.ParagraphPropertyFetcher`1 : ParagraphPropertyFetcher {
    private T _value;
    private int _level;
    public ParagraphPropertyFetcher`1(int level);
    public T GetValue();
    public void SetValue(T val);
    public virtual bool Fetch(CT_Shape shape);
}
public class NPOI.XSSF.Model.SharedStringsTable : POIXMLDocumentPart {
    private List`1<CT_Rst> strings;
    private Dictionary`2<string, int> stmap;
    private int count;
    private int uniqueCount;
    private SstDocument _sstDoc;
    public int Count { get; }
    public int UniqueCount { get; }
    public IList`1<CT_Rst> Items { get; }
    public SharedStringsTable(PackagePart part);
    [ObsoleteAttribute("deprecated in POI 3.14, scheduled for removal in POI 3.16")]
public SharedStringsTable(PackagePart part, PackageRelationship rel);
    public void ReadFrom(Stream is1);
    private string GetKey(CT_Rst st);
    public CT_Rst GetEntryAt(int idx);
    public int get_Count();
    public int get_UniqueCount();
    public int AddEntry(CT_Rst st);
    public IList`1<CT_Rst> get_Items();
    public void WriteTo(Stream out1);
    protected internal virtual void Commit();
}
public class NPOI.XSSF.Model.SingleXmlCells : POIXMLDocumentPart {
    private CT_SingleXmlCells SingleXMLCells;
    public SingleXmlCells(PackagePart part);
    [ObsoleteAttribute("deprecated in POI 3.14, scheduled for removal in POI 3.16")]
public SingleXmlCells(PackagePart part, PackageRelationship rel);
    public void ReadFrom(Stream is1);
    public XSSFSheet GetXSSFSheet();
    protected void WriteTo(Stream out1);
    protected internal virtual void Commit();
    public CT_SingleXmlCells GetCTSingleXMLCells();
    public List`1<XSSFSingleXmlCell> GetAllSimpleXmlCell();
}
public class NPOI.XSSF.Model.StylesTable : POIXMLDocumentPart {
    private SortedDictionary`2<short, string> numberFormats;
    private List`1<XSSFFont> fonts;
    private List`1<XSSFCellFill> fills;
    private List`1<XSSFCellBorder> borders;
    private List`1<CT_Xf> styleXfs;
    private List`1<CT_Xf> xfs;
    private List`1<CT_Dxf> dxfs;
    private Dictionary`2<string, ITableStyle> tableStyles;
    private IIndexedColorMap indexedColors;
    public static int FIRST_CUSTOM_STYLE_ID;
    private static int MAXIMUM_STYLE_ID;
    private static short FIRST_USER_DEFINED_NUMBER_FORMAT_ID;
    private int MAXIMUM_NUMBER_OF_DATA_FORMATS;
    private StyleSheetDocument doc;
    private XSSFWorkbook workbook;
    private ThemesTable theme;
    public int MaxNumberOfDataFormats { get; public set; }
    public int NumCellStyles { get; }
    public int NumDataFormats { get; }
    [ObsoleteAttribute("deprecated POI 3.14 beta 2. Use {@link #getNumDataFormats()} instead.")]
internal int NumberFormatSize { get; }
    internal int XfsSize { get; }
    internal int StyleXfsSize { get; }
    internal int DXfsSize { get; }
    internal StylesTable(PackagePart part);
    [ObsoleteAttribute("deprecated in POI 3.14, scheduled for removal in POI 3.16")]
public StylesTable(PackagePart part, PackageRelationship rel);
    private static StylesTable();
    public int get_MaxNumberOfDataFormats();
    public void set_MaxNumberOfDataFormats(int value);
    public void SetWorkbook(XSSFWorkbook wb);
    public ThemesTable GetTheme();
    public void SetTheme(ThemesTable theme);
    public ITableStyle GetTableStyle(string name);
    public ITableStyle GetExplicitTableStyle(string name);
    public void EnsureThemesTable();
    internal void ReadFrom(XmlDocument xmldoc);
    [ObsoleteAttribute("To be removed NPOI 2.8. GetNumberFormatAt(short) instead.")]
public string GetNumberFormatAt(int idx);
    public string GetNumberFormatAt(short fmtId);
    private short GetNumberFormatId(string fmt);
    public int PutNumberFormat(string fmt);
    public void PutNumberFormat(short index, string fmt);
    public bool RemoveNumberFormat(short index);
    public bool RemoveNumberFormat(string fmt);
    public XSSFFont GetFontAt(int idx);
    public int PutFont(XSSFFont font, bool forceRegistration);
    public int PutFont(XSSFFont font);
    public XSSFCellStyle GetStyleAt(int idx);
    public int PutStyle(XSSFCellStyle style);
    public XSSFCellBorder GetBorderAt(int idx);
    public int PutBorder(XSSFCellBorder border);
    public XSSFCellFill GetFillAt(int idx);
    public ReadOnlyCollection`1<XSSFCellBorder> GetBorders();
    public ReadOnlyCollection`1<XSSFCellFill> GetFills();
    public ReadOnlyCollection`1<XSSFFont> GetFonts();
    public IDictionary`2<short, string> GetNumberFormats();
    public int PutFill(XSSFCellFill fill);
    internal CT_Xf GetCellXfAt(int idx);
    internal int PutCellXf(CT_Xf cellXf);
    internal void ReplaceCellXfAt(int idx, CT_Xf cellXf);
    internal CT_Xf GetCellStyleXfAt(int idx);
    internal int PutCellStyleXf(CT_Xf cellStyleXf);
    internal void ReplaceCellStyleXfAt(int idx, CT_Xf cellStyleXf);
    public int get_NumCellStyles();
    public int get_NumDataFormats();
    internal int get_NumberFormatSize();
    internal int get_XfsSize();
    internal int get_StyleXfsSize();
    internal CT_Stylesheet GetCTStylesheet();
    internal int get_DXfsSize();
    public void WriteTo(Stream out1);
    protected internal virtual void Commit();
    private void Initialize();
    private static CT_Xf CreateDefaultXf();
    private static CT_Border CreateDefaultBorder();
    private static CT_Fill[] CreateDefaultFills();
    private static XSSFFont CreateDefaultFont();
    public CT_Dxf GetDxfAt(int idx);
    public int PutDxf(CT_Dxf dxf);
    public XSSFCellStyle CreateCellStyle();
    [ObsoleteAttribute("deprecated POI 3.15 beta 2. Use {@link #findFont(boolean, short, short, String, boolean, boolean, short, byte)} instead.")]
public XSSFFont FindFont(short boldWeight, short color, short fontHeight, string name, bool italic, bool strikeout, FontSuperScript typeOffset, FontUnderlineType underline);
    public XSSFFont FindFont(bool bold, short color, short fontHeight, string name, bool italic, bool strikeout, FontSuperScript typeOffset, FontUnderlineType underline);
    public IIndexedColorMap GetIndexedColors();
}
public class NPOI.XSSF.Model.ThemeElement : object {
    private static SortedDictionary`2<int, ThemeElement> values;
    public static ThemeElement LT1;
    public static ThemeElement DK1;
    public static ThemeElement LT2;
    public static ThemeElement DK2;
    public static ThemeElement ACCENT1;
    public static ThemeElement ACCENT2;
    public static ThemeElement ACCENT3;
    public static ThemeElement ACCENT4;
    public static ThemeElement ACCENT5;
    public static ThemeElement ACCENT6;
    public static ThemeElement HLINK;
    public static ThemeElement FOLHLINK;
    public static ThemeElement UNKNOWN;
    public int idx;
    public string name;
    private ThemeElement(int idx, string name);
    private static ThemeElement();
    public static ThemeElement ById(int idx);
}
public class NPOI.XSSF.Model.ThemesTable : POIXMLDocumentPart {
    public static int THEME_LT1;
    public static int THEME_DK1;
    public static int THEME_LT2;
    public static int THEME_DK2;
    public static int THEME_ACCENT1;
    public static int THEME_ACCENT2;
    public static int THEME_ACCENT3;
    public static int THEME_ACCENT4;
    public static int THEME_ACCENT5;
    public static int THEME_ACCENT6;
    public static int THEME_HLINK;
    public static int THEME_FOLHLINK;
    private ThemeDocument theme;
    public ThemesTable(PackagePart part);
    [ObsoleteAttribute("deprecated in POI 3.14, scheduled for removal in POI 3.16")]
public ThemesTable(PackagePart part, PackageRelationship rel);
    internal ThemesTable(ThemeDocument theme);
    public XSSFColor GetThemeColor(int idx);
    public void InheritFromThemeAsRequired(XSSFColor color);
    public void writeTo(Stream out1);
    protected internal virtual void Commit();
}
public class NPOI.XSSF.Streaming.AutoSizeColumnTracker : object {
    private int defaultCharWidth;
    private DataFormatter dataFormatter;
    private Dictionary`2<int, ColumnWidthPair> maxColumnWidths;
    private HashSet`1<int> untrackedColumns;
    private bool trackAllColumns;
    public ISet`1<int> TrackedColumns { get; }
    public AutoSizeColumnTracker(ISheet sheet);
    public ISet`1<int> get_TrackedColumns();
    public bool IsColumnTracked(int column);
    public bool IsAllColumnsTracked();
    public void TrackAllColumns();
    public void UntrackAllColumns();
    public void TrackColumns(ICollection`1<int> columns);
    public bool TrackColumn(int column);
    private bool ImplicitlyTrackColumn(int column);
    public bool UntrackColumns(ICollection`1<int> columns);
    public bool UntrackColumn(int column);
    public int GetBestFitColumnWidth(int column, bool useMergedCells);
    public void UpdateColumnWidths(IRow row);
    private void ImplicitlyTrackColumnsInRow(IRow row);
    private void UpdateColumnWidth(ICell cell, ColumnWidthPair pair);
}
public class NPOI.XSSF.Streaming.GZIPSheetDataWriter : SheetDataWriter {
    public GZIPSheetDataWriter(SharedStringsTable sharedStringsTable);
    public virtual FileInfo CreateTempFile();
    protected virtual Stream DecorateInputStream(Stream fis);
    protected virtual Stream DecorateOutputStream(Stream fos);
}
public class NPOI.XSSF.Streaming.Properties.CommentProperty : Property {
    public CommentProperty(object value);
    public virtual int GetType();
}
public class NPOI.XSSF.Streaming.Properties.HyperlinkProperty : Property {
    public HyperlinkProperty(object value);
    public virtual int GetType();
}
public abstract class NPOI.XSSF.Streaming.Properties.Property : object {
    public static int COMMENT;
    public static int HYPERLINK;
    public object _value;
    public Property _next;
    protected Property(object value);
    public abstract virtual int GetType();
}
public class NPOI.XSSF.Streaming.RowFlushedException : Exception {
    public RowFlushedException(int rowNum);
}
public class NPOI.XSSF.Streaming.SheetDataWriter : object {
    private static POILogger logger;
    [CompilerGeneratedAttribute]
private FileInfo <TemporaryFileInfo>k__BackingField;
    [CompilerGeneratedAttribute]
private Stream <OutputStream>k__BackingField;
    [CompilerGeneratedAttribute]
private int <RowNum>k__BackingField;
    [CompilerGeneratedAttribute]
private int <NumberOfFlushedRows>k__BackingField;
    [CompilerGeneratedAttribute]
private int <LowestIndexOfFlushedRows>k__BackingField;
    [CompilerGeneratedAttribute]
private int <NumberOfCellsOfLastFlushedRow>k__BackingField;
    public int NumberLastFlushedRow;
    private SharedStringsTable _sharedStringSource;
    private StreamWriter _outputWriter;
    protected FileInfo TemporaryFileInfo { get; protected set; }
    protected Stream OutputStream { get; private set; }
    private int RowNum { get; private set; }
    public int NumberOfFlushedRows { get; public set; }
    public int LowestIndexOfFlushedRows { get; public set; }
    public int NumberOfCellsOfLastFlushedRow { get; public set; }
    public FileInfo TempFileInfo { get; }
    public SheetDataWriter(SharedStringsTable sharedStringsTable);
    private static SheetDataWriter();
    [CompilerGeneratedAttribute]
protected FileInfo get_TemporaryFileInfo();
    [CompilerGeneratedAttribute]
protected void set_TemporaryFileInfo(FileInfo value);
    [CompilerGeneratedAttribute]
protected Stream get_OutputStream();
    [CompilerGeneratedAttribute]
private void set_OutputStream(Stream value);
    [CompilerGeneratedAttribute]
private int get_RowNum();
    [CompilerGeneratedAttribute]
private void set_RowNum(int value);
    [CompilerGeneratedAttribute]
public int get_NumberOfFlushedRows();
    [CompilerGeneratedAttribute]
public void set_NumberOfFlushedRows(int value);
    [CompilerGeneratedAttribute]
public int get_LowestIndexOfFlushedRows();
    [CompilerGeneratedAttribute]
public void set_LowestIndexOfFlushedRows(int value);
    [CompilerGeneratedAttribute]
public int get_NumberOfCellsOfLastFlushedRow();
    [CompilerGeneratedAttribute]
public void set_NumberOfCellsOfLastFlushedRow(int value);
    public virtual FileInfo CreateTempFile();
    public virtual Stream CreateWriter(FileInfo fd);
    protected virtual Stream DecorateOutputStream(Stream fos);
    public void Close();
    public FileInfo get_TempFileInfo();
    public Stream GetWorksheetXmlInputStream();
    protected virtual Stream DecorateInputStream(Stream fis);
    protected void FinalizeWriter();
    public void WriteRow(int rownum, SXSSFRow row);
    public void FlushRows(int rowCount, int lastRowNum, int lastRowCellsCount);
    private void BeginRow(int rownum, SXSSFRow row);
    private void EndRow();
    public void WriteCell(int columnIndex, ICell cell);
    private void WriteAsBytes(string text);
    private void WriteAsBytes(ArraySegment`1<char> chars);
    private void WriteAsBytes(int value);
    private void WriteAsBytes(float value);
    private void WriteAsBytes(double value);
    private bool HasLeadingTrailingSpaces(string str);
    protected void OutputQuotedString(string s);
    private static ArraySegment`1<char> GetSubArray(Char[] oldArray, int skip, int take);
    public bool Dispose();
    public string TemporaryFilePath();
}
public class NPOI.XSSF.Streaming.SheetsFlushedException : Exception {
}
public class NPOI.XSSF.Streaming.SXSSFCell : object {
    private static POILogger logger;
    private SXSSFRow _row;
    private Value _value;
    private ICellStyle _style;
    private Property _firstProperty;
    public CellRangeAddress ArrayFormulaRange { get; }
    public bool BooleanCellValue { get; }
    public CellType CachedFormulaResultType { get; }
    public IComment CellComment { get; public set; }
    public string CellFormula { get; public set; }
    public ICellStyle CellStyle { get; public set; }
    public CellType CellType { get; }
    public int ColumnIndex { get; }
    public Nullable`1<DateTime> DateCellValue { get; }
    public Nullable`1<DateOnly> DateOnlyCellValue { get; }
    public Nullable`1<TimeOnly> TimeOnlyCellValue { get; }
    public byte ErrorCellValue { get; }
    public IHyperlink Hyperlink { get; public set; }
    public bool IsMergedCell { get; }
    public bool IsPartOfArrayFormulaGroup { get; }
    public double NumericCellValue { get; }
    public IRichTextString RichStringCellValue { get; }
    public IRow Row { get; }
    public int RowIndex { get; }
    public CellAddress Address { get; }
    public ISheet Sheet { get; }
    public string StringCellValue { get; }
    public SXSSFCell(SXSSFRow row, CellType cellType);
    private static SXSSFCell();
    public sealed virtual CellRangeAddress get_ArrayFormulaRange();
    public sealed virtual bool get_BooleanCellValue();
    public sealed virtual CellType get_CachedFormulaResultType();
    [ObsoleteAttribute("Will be removed at NPOI 2.8, Use CachedFormulaResultType instead.")]
public sealed virtual CellType GetCachedFormulaResultTypeEnum();
    public sealed virtual IComment get_CellComment();
    public sealed virtual void set_CellComment(IComment value);
    public sealed virtual string get_CellFormula();
    public sealed virtual void set_CellFormula(string value);
    public sealed virtual void RemoveFormula();
    public sealed virtual ICellStyle get_CellStyle();
    public sealed virtual void set_CellStyle(ICellStyle value);
    public sealed virtual CellType get_CellType();
    public sealed virtual int get_ColumnIndex();
    public sealed virtual Nullable`1<DateTime> get_DateCellValue();
    public sealed virtual Nullable`1<DateOnly> get_DateOnlyCellValue();
    public sealed virtual Nullable`1<TimeOnly> get_TimeOnlyCellValue();
    public sealed virtual byte get_ErrorCellValue();
    public sealed virtual IHyperlink get_Hyperlink();
    public sealed virtual void set_Hyperlink(IHyperlink value);
    public sealed virtual bool get_IsMergedCell();
    public sealed virtual bool get_IsPartOfArrayFormulaGroup();
    public sealed virtual double get_NumericCellValue();
    public sealed virtual IRichTextString get_RichStringCellValue();
    public sealed virtual IRow get_Row();
    public sealed virtual int get_RowIndex();
    public sealed virtual CellAddress get_Address();
    public sealed virtual ISheet get_Sheet();
    public sealed virtual string get_StringCellValue();
    public sealed virtual ICell CopyCellTo(int targetIndex);
    public sealed virtual void RemoveCellComment();
    public sealed virtual void RemoveHyperlink();
    public sealed virtual void SetAsActiveCell();
    public sealed virtual void SetCellErrorValue(byte value);
    public sealed virtual void SetCellFormula(string formula);
    public sealed virtual void SetCellType(CellType cellType);
    public sealed virtual void SetCellValue(string value);
    public sealed virtual void SetCellValue(bool value);
    public sealed virtual void SetCellValue(IRichTextString value);
    public void SetCellValue(Nullable`1<DateTime> value);
    public sealed virtual void SetCellValue(double value);
    public virtual string ToString();
    private void RemoveProperty(int type);
    private void SetProperty(int type, object value);
    private object GetPropertyValue(int type);
    private object GetPropertyValue(int type, string defaultValue);
    private void EnsurePlainStringType();
    private void EnsureRichTextStringType();
    private void EnsureType(CellType type);
    private void EnsureFormulaType(CellType type);
    private void EnsureTypeOrFormulaType(CellType type);
    private void SetType(CellType type);
    private void SetFormulaType(CellType type);
    private CellType ComputeTypeFromFormula(string formula);
    private static InvalidOperationException typeMismatch(CellType expectedTypeCode, CellType actualTypeCode, bool isFormulaCell);
    private bool ConvertCellValueToBoolean();
    private string ConvertCellValueToString();
    private string ConvertCellValueToString(CellType cellType);
    public sealed virtual void SetCellValue(DateTime value);
    public sealed virtual void SetCellValue(DateOnly value);
    public void SetCellValue(Nullable`1<DateOnly> value);
    public sealed virtual void SetBlank();
}
public class NPOI.XSSF.Streaming.SXSSFCreationHelper : object {
    private static POILogger logger;
    private SXSSFWorkbook wb;
    private XSSFCreationHelper helper;
    public SXSSFCreationHelper(SXSSFWorkbook workbook);
    private static SXSSFCreationHelper();
    public sealed virtual IClientAnchor CreateClientAnchor();
    public sealed virtual IDataFormat CreateDataFormat();
    public sealed virtual ExtendedColor CreateExtendedColor();
    public sealed virtual IFormulaEvaluator CreateFormulaEvaluator();
    public sealed virtual IHyperlink CreateHyperlink(HyperlinkType type);
    public sealed virtual IRichTextString CreateRichTextString(string text);
}
public class NPOI.XSSF.Streaming.SXSSFDrawing : object {
    private SXSSFWorkbook _wb;
    private XSSFDrawing _drawing;
    public SXSSFDrawing(SXSSFWorkbook workbook, XSSFDrawing Drawing);
    public sealed virtual IPicture CreatePicture(IClientAnchor anchor, int pictureIndex);
    public sealed virtual IComment CreateCellComment(IClientAnchor anchor);
    public sealed virtual IChart CreateChart(IClientAnchor anchor);
    public sealed virtual IClientAnchor CreateAnchor(int dx1, int dy1, int dx2, int dy2, int col1, int row1, int col2, int row2);
}
public class NPOI.XSSF.Streaming.SXSSFEvaluationCell : object {
    private SXSSFEvaluationSheet _evalSheet;
    private SXSSFCell _cell;
    public object IdentityKey { get; }
    public bool BooleanCellValue { get; }
    public CellType CellType { get; }
    public CellType CellTypeEnum { get; }
    public int ColumnIndex { get; }
    public int ErrorCellValue { get; }
    public double NumericCellValue { get; }
    public int RowIndex { get; }
    public IEvaluationSheet Sheet { get; }
    public string StringCellValue { get; }
    public bool IsPartOfArrayFormulaGroup { get; }
    public CellRangeAddress ArrayFormulaRange { get; }
    public CellType CachedFormulaResultType { get; }
    public SXSSFEvaluationCell(SXSSFCell cell, SXSSFEvaluationSheet evaluationSheet);
    public SXSSFEvaluationCell(SXSSFCell cell);
    public sealed virtual object get_IdentityKey();
    public SXSSFCell GetSXSSFCell();
    public sealed virtual bool get_BooleanCellValue();
    public sealed virtual CellType get_CellType();
    public CellType get_CellTypeEnum();
    public sealed virtual int get_ColumnIndex();
    public sealed virtual int get_ErrorCellValue();
    public sealed virtual double get_NumericCellValue();
    public sealed virtual int get_RowIndex();
    public sealed virtual IEvaluationSheet get_Sheet();
    public sealed virtual string get_StringCellValue();
    public sealed virtual bool get_IsPartOfArrayFormulaGroup();
    public sealed virtual CellRangeAddress get_ArrayFormulaRange();
    public sealed virtual CellType get_CachedFormulaResultType();
    [ObsoleteAttribute("Will be removed at NPOI 2.8, Use CachedFormulaResultType instead.")]
public CellType GetCachedFormulaResultTypeEnum();
}
public class NPOI.XSSF.Streaming.SXSSFEvaluationSheet : object {
    private SXSSFSheet _xs;
    public SXSSFEvaluationSheet(SXSSFSheet sheet);
    public SXSSFSheet GetSXSSFSheet();
    public sealed virtual IEvaluationCell GetCell(int rowIndex, int columnIndex);
    public sealed virtual void ClearAllCachedResultValues();
}
public class NPOI.XSSF.Streaming.SXSSFEvaluationWorkbook : BaseXSSFEvaluationWorkbook {
    private SXSSFWorkbook _xBook;
    private SXSSFEvaluationWorkbook(SXSSFWorkbook book);
    public static SXSSFEvaluationWorkbook Create(SXSSFWorkbook book);
    public virtual int GetSheetIndex(IEvaluationSheet evalSheet);
    public virtual IEvaluationSheet GetSheet(int sheetIndex);
    public virtual Ptg[] GetFormulaTokens(IEvaluationCell evalCell);
}
public class NPOI.XSSF.Streaming.SXSSFFormulaEvaluator : BaseXSSFFormulaEvaluator {
    private static POILogger logger;
    private IWorkbook wb;
    public SXSSFFormulaEvaluator(SXSSFWorkbook workbook);
    private SXSSFFormulaEvaluator(SXSSFWorkbook workbook, IStabilityClassifier stabilityClassifier, UDFFinder udfFinder);
    private SXSSFFormulaEvaluator(SXSSFWorkbook workbook, WorkbookEvaluator bookEvaluator);
    private static SXSSFFormulaEvaluator();
    public static SXSSFFormulaEvaluator Create(SXSSFWorkbook workbook, IStabilityClassifier stabilityClassifier, UDFFinder udfFinder);
    protected virtual IEvaluationCell ToEvaluationCell(ICell cell);
    public static void EvaluateAllFormulaCells(SXSSFWorkbook wb, bool skipOutOfWindow);
    public virtual void EvaluateAll();
}
public class NPOI.XSSF.Streaming.SXSSFPicture : object {
    private static POILogger logger;
    private static float DEFAULT_COLUMN_WIDTH;
    private SXSSFWorkbook _wb;
    private XSSFPicture _picture;
    public IPictureData PictureData { get; }
    public IClientAnchor ClientAnchor { get; }
    public ISheet Sheet { get; }
    public bool IsNoFill { get; public set; }
    public SXSSFPicture(SXSSFWorkbook _wb, XSSFPicture _picture);
    private static SXSSFPicture();
    public CT_Picture GetCTPicture();
    public sealed virtual void Resize();
    public sealed virtual void Resize(double scale);
    public sealed virtual IClientAnchor GetPreferredSize();
    public XSSFClientAnchor GetPreferredSize(double scale);
    private float GetColumnWidthInPixels(int columnIndex);
    private float GetRowHeightInPixels(int rowIndex);
    protected static Size GetImageDimension(PackagePart part, PictureType type);
    public sealed virtual IPictureData get_PictureData();
    protected CT_ShapeProperties GetShapeProperties();
    public XSSFAnchor GetAnchor();
    public sealed virtual void Resize(double scaleX, double scaleY);
    public sealed virtual IClientAnchor GetPreferredSize(double scaleX, double scaleY);
    public sealed virtual Size GetImageDimension();
    public sealed virtual IClientAnchor get_ClientAnchor();
    public XSSFDrawing GetDrawing();
    public sealed virtual ISheet get_Sheet();
    public string GetShapeName();
    public IShape GetParent();
    public bool get_IsNoFill();
    public void set_IsNoFill(bool value);
    public void SetFillColor(int red, int green, int blue);
    public void SetLineStyleColor(int red, int green, int blue);
}
public class NPOI.XSSF.Streaming.SXSSFRow : object {
    private SXSSFSheet _sheet;
    private IDictionary`2<int, SXSSFCell> _cells;
    private short _style;
    private bool _zHeight;
    private float _height;
    private int _firstCellNum;
    private int _lastCellNum;
    [CompilerGeneratedAttribute]
private Nullable`1<bool> <Hidden>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<bool> <Collapsed>k__BackingField;
    [CompilerGeneratedAttribute]
private int <OutlineLevel>k__BackingField;
    public Nullable`1<bool> Hidden { get; public set; }
    public Nullable`1<bool> Collapsed { get; public set; }
    public List`1<ICell> Cells { get; }
    public short FirstCellNum { get; }
    public short Height { get; public set; }
    public float HeightInPoints { get; public set; }
    public bool IsFormatted { get; }
    public short LastCellNum { get; }
    public int OutlineLevel { get; public set; }
    public int PhysicalNumberOfCells { get; }
    public int RowNum { get; public set; }
    internal int RowStyleIndex { get; }
    public ICellStyle RowStyle { get; public set; }
    public ISheet Sheet { get; }
    public bool ZeroHeight { get; public set; }
    public SXSSFRow(SXSSFSheet sheet);
    [CompilerGeneratedAttribute]
public virtual Nullable`1<bool> get_Hidden();
    [CompilerGeneratedAttribute]
public virtual void set_Hidden(Nullable`1<bool> value);
    [CompilerGeneratedAttribute]
public virtual Nullable`1<bool> get_Collapsed();
    [CompilerGeneratedAttribute]
public virtual void set_Collapsed(Nullable`1<bool> value);
    public CellIterator AllCellsIterator();
    public virtual bool HasCustomHeight();
    public sealed virtual List`1<ICell> get_Cells();
    public sealed virtual short get_FirstCellNum();
    public sealed virtual short get_Height();
    public sealed virtual void set_Height(short value);
    public sealed virtual float get_HeightInPoints();
    public sealed virtual void set_HeightInPoints(float value);
    public virtual bool get_IsFormatted();
    public sealed virtual short get_LastCellNum();
    [CompilerGeneratedAttribute]
public virtual int get_OutlineLevel();
    [CompilerGeneratedAttribute]
public virtual void set_OutlineLevel(int value);
    public sealed virtual int get_PhysicalNumberOfCells();
    public sealed virtual int get_RowNum();
    public sealed virtual void set_RowNum(int value);
    internal int get_RowStyleIndex();
    public virtual ICellStyle get_RowStyle();
    public virtual void set_RowStyle(ICellStyle value);
    public sealed virtual ISheet get_Sheet();
    public virtual bool get_ZeroHeight();
    public virtual void set_ZeroHeight(bool value);
    public sealed virtual int CompareTo(SXSSFRow other);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
    public sealed virtual ICell CopyCell(int sourceIndex, int targetIndex);
    public sealed virtual IRow CopyRowTo(int targetIndex);
    public sealed virtual ICell CreateCell(int column);
    public sealed virtual ICell CreateCell(int column, CellType type);
    private void UpdateIndexWhenAdd(int cellnum);
    private static void CheckBounds(int cellIndex);
    public sealed virtual ICell GetCell(int cellnum);
    public sealed virtual ICell GetCell(int cellnum, MissingCellPolicy policy);
    public sealed virtual IEnumerator`1<ICell> GetEnumerator();
    public sealed virtual void MoveCell(ICell cell, int newColumn);
    public sealed virtual void RemoveCell(ICell cell);
    private void InvalidateFirstCellNum();
    private void InvalidateLastCellNum();
    public int GetCellIndex(SXSSFCell cell);
    private sealed virtual override IEnumerator System.Collections.IEnumerable.GetEnumerator();
}
public class NPOI.XSSF.Streaming.SXSSFSheet : object {
    internal XSSFSheet _sh;
    private SXSSFWorkbook _workbook;
    private IDictionary`2<int, SXSSFRow> _rows;
    private SheetDataWriter _writer;
    private int _randomAccessWindowSize;
    private Lazy`1<AutoSizeColumnTracker> _autoSizeColumnTracker;
    private int outlineLevelRow;
    private int lastFlushedRowNumber;
    private bool allFlushed;
    private int _FirstRowNum;
    private int _LastRowNum;
    public bool Autobreaks { get; public set; }
    public Int32[] ColumnBreaks { get; }
    public double DefaultColumnWidth { get; public set; }
    public short DefaultRowHeight { get; public set; }
    public float DefaultRowHeightInPoints { get; public set; }
    public bool DisplayFormulas { get; public set; }
    public bool DisplayGridlines { get; public set; }
    public bool DisplayGuts { get; public set; }
    public bool DisplayRowColHeadings { get; public set; }
    public bool DisplayZeros { get; public set; }
    public IDrawing DrawingPatriarch { get; }
    public int FirstRowNum { get; }
    public bool FitToPage { get; public set; }
    public IFooter Footer { get; }
    public bool ForceFormulaRecalculation { get; public set; }
    public IHeader Header { get; }
    public bool HorizontallyCenter { get; public set; }
    public bool IsActive { get; public set; }
    public bool IsPrintGridlines { get; public set; }
    public bool IsPrintRowAndColumnHeadings { get; public set; }
    public bool IsRightToLeft { get; public set; }
    public bool IsSelected { get; public set; }
    public int LastRowNum { get; }
    public short LeftCol { get; public set; }
    public int NumMergedRegions { get; }
    public List`1<CellRangeAddress> MergedRegions { get; }
    public PaneInformation PaneInformation { get; }
    public int PhysicalNumberOfRows { get; }
    public IPrintSetup PrintSetup { get; }
    public bool Protect { get; }
    public CellRangeAddress RepeatingColumns { get; public set; }
    public CellRangeAddress RepeatingRows { get; public set; }
    public Int32[] RowBreaks { get; }
    public bool RowSumsBelow { get; public set; }
    public bool RowSumsRight { get; public set; }
    public bool ScenarioProtect { get; }
    public ISheetConditionalFormatting SheetConditionalFormatting { get; }
    public string SheetName { get; }
    public short TabColorIndex { get; public set; }
    public short TopRow { get; public set; }
    public bool VerticallyCenter { get; public set; }
    public IWorkbook Workbook { get; }
    public ISet`1<int> TrackedColumnsForAutoSizing { get; }
    public bool AllRowsFlushed { get; }
    public int LastFlushedRowNumber { get; }
    public SheetDataWriter SheetDataWriter { get; }
    public CellAddress ActiveCell { get; public set; }
    public XSSFColor TabColor { get; public set; }
    public SXSSFSheet(SXSSFWorkbook workbook, XSSFSheet xSheet);
    public void SetRandomAccessWindowSize(int value);
    public sealed virtual bool get_Autobreaks();
    public sealed virtual void set_Autobreaks(bool value);
    public sealed virtual Int32[] get_ColumnBreaks();
    public sealed virtual double get_DefaultColumnWidth();
    public sealed virtual void set_DefaultColumnWidth(double value);
    public sealed virtual short get_DefaultRowHeight();
    public sealed virtual void set_DefaultRowHeight(short value);
    public sealed virtual float get_DefaultRowHeightInPoints();
    public sealed virtual void set_DefaultRowHeightInPoints(float value);
    public sealed virtual bool get_DisplayFormulas();
    public sealed virtual void set_DisplayFormulas(bool value);
    public sealed virtual bool get_DisplayGridlines();
    public sealed virtual void set_DisplayGridlines(bool value);
    public sealed virtual bool get_DisplayGuts();
    public sealed virtual void set_DisplayGuts(bool value);
    public sealed virtual bool get_DisplayRowColHeadings();
    public sealed virtual void set_DisplayRowColHeadings(bool value);
    public sealed virtual bool get_DisplayZeros();
    public sealed virtual void set_DisplayZeros(bool value);
    public sealed virtual IDrawing get_DrawingPatriarch();
    public sealed virtual int get_FirstRowNum();
    public sealed virtual bool get_FitToPage();
    public sealed virtual void set_FitToPage(bool value);
    public sealed virtual IFooter get_Footer();
    public sealed virtual bool get_ForceFormulaRecalculation();
    public sealed virtual void set_ForceFormulaRecalculation(bool value);
    public sealed virtual IHeader get_Header();
    public sealed virtual bool get_HorizontallyCenter();
    public sealed virtual void set_HorizontallyCenter(bool value);
    public sealed virtual bool get_IsActive();
    public sealed virtual void set_IsActive(bool value);
    public sealed virtual bool get_IsPrintGridlines();
    public sealed virtual void set_IsPrintGridlines(bool value);
    public sealed virtual bool get_IsPrintRowAndColumnHeadings();
    public sealed virtual void set_IsPrintRowAndColumnHeadings(bool value);
    public sealed virtual bool get_IsRightToLeft();
    public sealed virtual void set_IsRightToLeft(bool value);
    public sealed virtual bool get_IsSelected();
    public sealed virtual void set_IsSelected(bool value);
    public sealed virtual int get_LastRowNum();
    public sealed virtual short get_LeftCol();
    public sealed virtual void set_LeftCol(short value);
    public sealed virtual int get_NumMergedRegions();
    public sealed virtual List`1<CellRangeAddress> get_MergedRegions();
    public sealed virtual PaneInformation get_PaneInformation();
    public sealed virtual int get_PhysicalNumberOfRows();
    public sealed virtual IPrintSetup get_PrintSetup();
    public sealed virtual bool get_Protect();
    public sealed virtual CellRangeAddress get_RepeatingColumns();
    public sealed virtual void set_RepeatingColumns(CellRangeAddress value);
    public sealed virtual CellRangeAddress get_RepeatingRows();
    public sealed virtual void set_RepeatingRows(CellRangeAddress value);
    public sealed virtual Int32[] get_RowBreaks();
    public sealed virtual bool get_RowSumsBelow();
    public sealed virtual void set_RowSumsBelow(bool value);
    public sealed virtual bool get_RowSumsRight();
    public sealed virtual void set_RowSumsRight(bool value);
    public sealed virtual bool get_ScenarioProtect();
    public sealed virtual ISheetConditionalFormatting get_SheetConditionalFormatting();
    public sealed virtual string get_SheetName();
    public sealed virtual short get_TabColorIndex();
    public sealed virtual void set_TabColorIndex(short value);
    public sealed virtual short get_TopRow();
    public sealed virtual void set_TopRow(short value);
    public sealed virtual bool get_VerticallyCenter();
    public sealed virtual void set_VerticallyCenter(bool value);
    public sealed virtual IWorkbook get_Workbook();
    public sealed virtual int AddMergedRegion(CellRangeAddress region);
    public sealed virtual int AddMergedRegionUnsafe(CellRangeAddress region);
    public sealed virtual void ValidateMergedRegions();
    public sealed virtual void AddValidationData(IDataValidation dataValidation);
    public sealed virtual void RemoveDataValidation(IDataValidation dataValidation);
    public sealed virtual void AutoSizeColumn(int column);
    public sealed virtual void AutoSizeColumn(int column, bool useMergedCells);
    public sealed virtual IRow CopyRow(int sourceIndex, int targetIndex);
    public sealed virtual IComment CopyComment(ICell sourceCell, ICell targetCell);
    public sealed virtual ISheet CopySheet(string Name);
    public ISheet CopySheet(string Name, string newName, bool copyStyle);
    public sealed virtual ISheet CopySheet(string Name, bool copyStyle);
    public sealed virtual IHyperlink GetHyperlink(int row, int column);
    public sealed virtual IHyperlink GetHyperlink(CellAddress addr);
    public sealed virtual List`1<IHyperlink> GetHyperlinkList();
    public sealed virtual IDrawing CreateDrawingPatriarch();
    public sealed virtual void CreateFreezePane(int colSplit, int rowSplit);
    public sealed virtual void CreateFreezePane(int colSplit, int rowSplit, int leftmostColumn, int topRow);
    public sealed virtual IRow CreateRow(int rownum);
    private void UpdateIndexWhenAdd(int rownum);
    public sealed virtual void CreateSplitPane(int xSplitPos, int ySplitPos, int leftmostColumn, int topRow, PanePosition activePane);
    [ObsoleteAttribute("deprecated as of 2015-11-23 (circa POI 3.14beta1). Use {@link #getCellComment(CellAddress)} instead.")]
public sealed virtual IComment GetCellComment(int row, int column);
    public sealed virtual IComment GetCellComment(CellAddress ref1);
    public sealed virtual Dictionary`2<CellAddress, IComment> GetCellComments();
    public sealed virtual int GetColumnOutlineLevel(int columnIndex);
    public sealed virtual ICellStyle GetColumnStyle(int column);
    public sealed virtual double GetColumnWidth(int columnIndex);
    public sealed virtual double GetColumnWidthInPixels(int columnIndex);
    public sealed virtual IDataValidationHelper GetDataValidationHelper();
    public sealed virtual List`1<IDataValidation> GetDataValidations();
    public sealed virtual IEnumerator GetEnumerator();
    public sealed virtual double GetMargin(MarginType margin);
    public sealed virtual CellRangeAddress GetMergedRegion(int index);
    public sealed virtual IRow GetRow(int rownum);
    public sealed virtual IEnumerator GetRowEnumerator();
    public sealed virtual void GroupColumn(int fromColumn, int toColumn);
    public sealed virtual void GroupRow(int fromRow, int toRow);
    public void SetRowOutlineLevel(int rownum, int level);
    private void SetWorksheetOutlineLevelRow();
    public sealed virtual bool IsColumnBroken(int column);
    public sealed virtual bool IsColumnHidden(int columnIndex);
    public sealed virtual bool IsMergedRegion(CellRangeAddress mergedRegion);
    public sealed virtual bool IsRowBroken(int row);
    public sealed virtual void ProtectSheet(string password);
    public sealed virtual ICellRange`1<ICell> RemoveArrayFormula(ICell cell);
    public sealed virtual void RemoveColumnBreak(int column);
    public sealed virtual void RemoveMergedRegion(int index);
    public sealed virtual void RemoveMergedRegions(IList`1<int> indices);
    public sealed virtual void RemoveRow(IRow row);
    private void InvalidateFirstRowNum();
    private void InvalidateLastRowNum();
    public sealed virtual void RemoveRowBreak(int row);
    public sealed virtual void SetActive(bool value);
    public void SetActiveCell(int row, int column);
    public sealed virtual void SetActiveCellRange(List`1<CellRangeAddress8Bit> cellranges, int activeRange, int activeRow, int activeColumn);
    public sealed virtual void SetActiveCellRange(int firstRow, int lastRow, int firstColumn, int lastColumn);
    public sealed virtual ICellRange`1<ICell> SetArrayFormula(string formula, CellRangeAddress range);
    public sealed virtual IAutoFilter SetAutoFilter(CellRangeAddress range);
    public sealed virtual void SetColumnBreak(int column);
    public sealed virtual void SetColumnGroupCollapsed(int columnNumber, bool collapsed);
    public sealed virtual void SetColumnHidden(int columnIndex, bool hidden);
    public sealed virtual void SetColumnWidth(int columnIndex, double width);
    public sealed virtual void SetDefaultColumnStyle(int column, ICellStyle style);
    public void TrackColumnForAutoSizing(int column);
    public void TrackColumnsForAutoSizing(ICollection`1<int> columns);
    public void TrackAllColumnsForAutoSizing();
    public bool UntrackColumnForAutoSizing(int column);
    public bool UntrackColumnsForAutoSizing(ICollection`1<int> columns);
    public void UntrackAllColumnsForAutoSizing();
    public bool IsColumnTrackedForAutoSizing(int column);
    public ISet`1<int> get_TrackedColumnsForAutoSizing();
    public sealed virtual void SetMargin(MarginType margin, double size);
    public sealed virtual void SetRowBreak(int row);
    public sealed virtual void SetRowGroupCollapsed(int row, bool collapse);
    private void collapseRow(int rowIndex);
    private int FindStartOfRowOutlineGroup(int rowIndex);
    private int WriteHidden(SXSSFRow xRow, int rowIndex, bool hidden);
    [ObsoleteAttribute("deprecated 2015-11-23 (circa POI 3.14beta1). Use {@link #setZoom(int)} instead.")]
public sealed virtual void SetZoom(int numerator, int denominator);
    public sealed virtual void SetZoom(int scale);
    public sealed virtual void ShiftRows(int startRow, int endRow, int n);
    public sealed virtual void ShiftRows(int startRow, int endRow, int n, bool copyRowHeight, bool resetOriginalRowHeight);
    public sealed virtual void ShowInPane(int toprow, int leftcol);
    public sealed virtual void UngroupColumn(int fromColumn, int toColumn);
    public sealed virtual void UngroupRow(int fromRow, int toRow);
    public sealed virtual bool IsDate1904();
    public int GetRowNum(SXSSFRow row);
    public void ChangeRowNum(SXSSFRow row, int newRowNum);
    public bool Dispose();
    private void FlushRows(int remaining, bool flushOnDisk);
    public bool get_AllRowsFlushed();
    public int get_LastFlushedRowNumber();
    public void FlushRows();
    private Nullable`1<KeyValuePair`2<int, SXSSFRow>> flushOneRow();
    public Stream GetWorksheetXMLInputStream();
    public SheetDataWriter get_SheetDataWriter();
    public sealed virtual CellAddress get_ActiveCell();
    public sealed virtual void set_ActiveCell(CellAddress value);
    public XSSFColor get_TabColor();
    public void set_TabColor(XSSFColor value);
    public sealed virtual void CopyTo(IWorkbook dest, string name, bool copyStyle, bool keepFormulas);
    public sealed virtual void AutoSizeRow(int row);
    public sealed virtual void AutoSizeRow(int row, bool useMergedCells);
    [CompilerGeneratedAttribute]
private AutoSizeColumnTracker <.ctor>b__11_0();
}
public class NPOI.XSSF.Streaming.SXSSFWorkbook : object {
    private static POILogger logger;
    public static int DEFAULT_WINDOW_SIZE;
    private XSSFWorkbook _wb;
    private Dictionary`2<SXSSFSheet, XSSFSheet> _sxFromXHash;
    private Dictionary`2<XSSFSheet, SXSSFSheet> _xFromSxHash;
    private int _randomAccessWindowSize;
    private bool _compressTmpFiles;
    private UseZip64 _useZip64;
    private SharedStringsTable _sharedStringSource;
    public XSSFWorkbook XssfWorkbook { get; }
    public int RandomAccessWindowSize { get; public set; }
    public int ActiveSheetIndex { get; }
    public int FirstVisibleTab { get; public set; }
    public int NumberOfSheets { get; }
    public short NumberOfFonts { get; }
    public int NumCellStyles { get; }
    public int NumberOfNames { get; }
    public MissingCellPolicy MissingCellPolicy { get; public set; }
    public bool IsHidden { get; public set; }
    public UseZip64 UseZip64 { get; public set; }
    public bool CompressTempFiles { get; public set; }
    public SpreadsheetVersion SpreadsheetVersion { get; }
    public SXSSFWorkbook(int rowAccessWindowSize);
    public SXSSFWorkbook(XSSFWorkbook workbook);
    public SXSSFWorkbook(XSSFWorkbook workbook, int rowAccessWindowSize);
    public SXSSFWorkbook(XSSFWorkbook workbook, int rowAccessWindowSize, bool compressTmpFiles);
    public SXSSFWorkbook(XSSFWorkbook workbook, int rowAccessWindowSize, bool compressTmpFiles, bool useSharedStringsTable);
    private static SXSSFWorkbook();
    public XSSFWorkbook get_XssfWorkbook();
    public int get_RandomAccessWindowSize();
    public void set_RandomAccessWindowSize(int value);
    public sealed virtual int get_ActiveSheetIndex();
    public sealed virtual int get_FirstVisibleTab();
    public sealed virtual void set_FirstVisibleTab(int value);
    public sealed virtual int get_NumberOfSheets();
    public sealed virtual short get_NumberOfFonts();
    public sealed virtual int get_NumCellStyles();
    public sealed virtual int get_NumberOfNames();
    public sealed virtual MissingCellPolicy get_MissingCellPolicy();
    public sealed virtual void set_MissingCellPolicy(MissingCellPolicy value);
    public sealed virtual bool get_IsHidden();
    public sealed virtual void set_IsHidden(bool value);
    public UseZip64 get_UseZip64();
    public void set_UseZip64(UseZip64 value);
    private SXSSFSheet CreateAndRegisterSXSSFSheet(ISheet xSheet);
    private void RegisterSheetMapping(SXSSFSheet sxSheet, XSSFSheet xSheet);
    private void DeregisterSheetMapping(XSSFSheet xSheet);
    public XSSFSheet GetXSSFSheet(SXSSFSheet sheet);
    public SXSSFSheet GetSXSSFSheet(XSSFSheet sheet);
    public bool get_CompressTempFiles();
    public void set_CompressTempFiles(bool value);
    public SheetDataWriter CreateSheetDataWriter();
    private XSSFSheet GetSheetFromZipEntryName(string sheetRef);
    private void InjectData(FileInfo zipfile, Stream outStream, bool leaveOpen);
    private static void CopyStreamAndInjectWorksheet(Stream inputStream, Stream outputStream, Stream worksheetData);
    public sealed virtual void SetSheetOrder(string sheetname, int pos);
    public sealed virtual void SetSelectedTab(int index);
    public sealed virtual void SetActiveSheet(int sheetIndex);
    public sealed virtual string GetSheetName(int sheet);
    public sealed virtual void SetSheetName(int sheet, string name);
    public sealed virtual int GetSheetIndex(string name);
    public sealed virtual int GetSheetIndex(ISheet sheet);
    public sealed virtual ISheet CreateSheet();
    public sealed virtual ISheet CreateSheet(string sheetname);
    public sealed virtual ISheet CloneSheet(int sheetNum);
    public sealed virtual ISheet GetSheetAt(int index);
    public sealed virtual ISheet GetSheet(string name);
    public sealed virtual void RemoveSheetAt(int index);
    public sealed virtual IEnumerator`1<ISheet> GetEnumerator();
    public sealed virtual IFont CreateFont();
    [ObsoleteAttribute("deprecated in poi 3.16")]
public sealed virtual IFont FindFont(short boldWeight, short color, short fontHeight, string name, bool italic, bool strikeout, FontSuperScript typeOffset, FontUnderlineType underline);
    public sealed virtual IFont FindFont(bool bold, short color, short fontHeight, string name, bool italic, bool strikeout, FontSuperScript typeOffset, FontUnderlineType underline);
    public sealed virtual IFont GetFontAt(short idx);
    public sealed virtual ICellStyle CreateCellStyle();
    public sealed virtual ICellStyle GetCellStyleAt(int idx);
    public sealed virtual void Close();
    public sealed virtual void Write(Stream stream, bool leaveOpen);
    private void FlushSheets();
    public bool Dispose();
    public sealed virtual IName GetName(string name);
    public sealed virtual IList`1<IName> GetNames(string name);
    public sealed virtual IList`1<IName> GetAllNames();
    [ObsoleteAttribute("Deprecated 3.16, New projects should avoid accessing named ranges by index.")]
public sealed virtual IName GetNameAt(int nameIndex);
    public sealed virtual IName CreateName();
    [ObsoleteAttribute("deprecated in 3.16 New projects should avoid accessing named ranges by index. GetName(String)} instead.")]
public sealed virtual int GetNameIndex(string name);
    [ObsoleteAttribute("deprecated in 3.16 New projects should use RemoveName(Name)")]
public sealed virtual void RemoveName(int index);
    [ObsoleteAttribute("deprecated in 3.16 New projects should use RemoveName(IName Name)")]
public sealed virtual void RemoveName(string name);
    public sealed virtual void RemoveName(IName name);
    public sealed virtual int LinkExternalWorkbook(string name, IWorkbook workbook);
    public sealed virtual void SetPrintArea(int sheetIndex, string reference);
    public sealed virtual void SetPrintArea(int sheetIndex, int startColumn, int endColumn, int startRow, int endRow);
    public sealed virtual string GetPrintArea(int sheetIndex);
    public sealed virtual void RemovePrintArea(int sheetIndex);
    public sealed virtual IDataFormat CreateDataFormat();
    public sealed virtual int AddPicture(Byte[] pictureData, PictureType format);
    public sealed virtual IList GetAllPictures();
    public sealed virtual ICreationHelper GetCreationHelper();
    public sealed virtual bool IsSheetHidden(int sheetIx);
    public sealed virtual bool IsSheetVeryHidden(int sheetIx);
    public sealed virtual void SetSheetHidden(int sheetIx, SheetState hidden);
    public sealed virtual void SetSheetHidden(int sheetIx, int hidden);
    public sealed virtual void AddToolPack(UDFFinder toopack);
    public sealed virtual SpreadsheetVersion get_SpreadsheetVersion();
    public sealed virtual bool IsDate1904();
    private sealed virtual override void System.IDisposable.Dispose();
}
public class NPOI.XSSF.Streaming.Values.BlankValue : object {
    private sealed virtual override CellType NPOI.XSSF.Streaming.Values.Value.GetType();
}
public class NPOI.XSSF.Streaming.Values.BooleanFormulaValue : FormulaValue {
    [CompilerGeneratedAttribute]
private bool <PreEvaluatedValue>k__BackingField;
    public bool PreEvaluatedValue { get; public set; }
    [CompilerGeneratedAttribute]
public bool get_PreEvaluatedValue();
    [CompilerGeneratedAttribute]
public void set_PreEvaluatedValue(bool value);
    public virtual CellType GetFormulaType();
}
public class NPOI.XSSF.Streaming.Values.BooleanValue : object {
    [CompilerGeneratedAttribute]
private bool <Value>k__BackingField;
    public bool Value { get; public set; }
    [CompilerGeneratedAttribute]
public bool get_Value();
    [CompilerGeneratedAttribute]
public void set_Value(bool value);
    public sealed virtual CellType GetType();
}
public class NPOI.XSSF.Streaming.Values.ErrorFormulaValue : FormulaValue {
    public byte PreEvaluatedValue;
    public virtual CellType GetFormulaType();
}
public class NPOI.XSSF.Streaming.Values.ErrorValue : object {
    public byte Value;
    public sealed virtual CellType GetType();
}
public abstract class NPOI.XSSF.Streaming.Values.FormulaValue : object {
    public string Value;
    public sealed virtual CellType GetType();
    public abstract virtual CellType GetFormulaType();
}
public class NPOI.XSSF.Streaming.Values.NumericFormulaValue : FormulaValue {
    public double PreEvaluatedValue;
    public virtual CellType GetFormulaType();
}
public class NPOI.XSSF.Streaming.Values.NumericValue : object {
    public double Value;
    public sealed virtual CellType GetType();
}
public class NPOI.XSSF.Streaming.Values.PlainStringValue : StringValue {
    public string Value;
    public virtual bool IsRichText();
}
public class NPOI.XSSF.Streaming.Values.RichTextValue : StringValue {
    public IRichTextString Value;
    public CellType GetType();
    public virtual bool IsRichText();
}
public class NPOI.XSSF.Streaming.Values.StringFormulaValue : FormulaValue {
    public string PreEvaluatedValue;
    public virtual CellType GetFormulaType();
}
public abstract class NPOI.XSSF.Streaming.Values.StringValue : object {
    public sealed virtual CellType GetType();
    public abstract virtual bool IsRichText();
}
public interface NPOI.XSSF.Streaming.Values.Value {
    public abstract virtual CellType GetType();
}
public abstract class NPOI.XSSF.UserModel.BaseXSSFEvaluationWorkbook : object {
    protected XSSFWorkbook _uBook;
    private Dictionary`2<string, XSSFTable> _tableCache;
    protected BaseXSSFEvaluationWorkbook(XSSFWorkbook book);
    public virtual void ClearAllCachedResultValues();
    private int ConvertFromExternalSheetIndex(int externSheetIndex);
    public sealed virtual int ConvertFromExternSheetIndex(int externSheetIndex);
    private int ConvertToExternalSheetIndex(int sheetIndex);
    public sealed virtual int GetExternalSheetIndex(string sheetName);
    private int ResolveBookIndex(string bookName);
    private int FindExternalLinkIndex(string bookName, List`1<ExternalLinksTable> tables);
    public sealed virtual IEvaluationName GetName(string name, int sheetIndex);
    public sealed virtual string GetSheetName(int sheetIndex);
    public sealed virtual ExternalName GetExternalName(int externSheetIndex, int externNameIndex);
    public sealed virtual ExternalName GetExternalName(string nameName, string sheetName, int externalWorkbookNumber);
    public sealed virtual Ptg GetNameXPtg(string name, SheetIdentifier sheet);
    public sealed virtual Ptg Get3DReferencePtg(CellReference cell, SheetIdentifier sheet);
    public sealed virtual Ptg Get3DReferencePtg(AreaReference area, SheetIdentifier sheet);
    public sealed virtual string ResolveNameXText(NameXPtg n);
    public sealed virtual ExternalSheet GetExternalSheet(int externSheetIndex);
    public sealed virtual ExternalSheet GetExternalSheet(string firstSheetName, string lastSheetName, int externalWorkbookNumber);
    public sealed virtual int GetExternalSheetIndex(string workbookName, string sheetName);
    public sealed virtual int GetSheetIndex(string sheetName);
    public sealed virtual string GetSheetFirstNameByExternSheet(int externSheetIndex);
    public sealed virtual string GetSheetLastNameByExternSheet(int externSheetIndex);
    public sealed virtual string GetNameText(NamePtg namePtg);
    public sealed virtual IEvaluationName GetName(NamePtg namePtg);
    public sealed virtual IName CreateName();
    private Dictionary`2<string, XSSFTable> GetTableCache();
    public sealed virtual ITable GetTable(string name);
    public sealed virtual UDFFinder GetUDFFinder();
    public sealed virtual SpreadsheetVersion GetSpreadsheetVersion();
    public abstract virtual int GetSheetIndex(IEvaluationSheet sheet);
    public abstract virtual IEvaluationSheet GetSheet(int sheetIndex);
    public abstract virtual Ptg[] GetFormulaTokens(IEvaluationCell cell);
}
public abstract class NPOI.XSSF.UserModel.BaseXSSFFormulaEvaluator : BaseFormulaEvaluator {
    protected BaseXSSFFormulaEvaluator(WorkbookEvaluator bookEvaluator);
    protected virtual IRichTextString CreateRichTextString(string str);
    public virtual void NotifySetFormula(ICell cell);
    public virtual void NotifyDeleteCell(ICell cell);
    public virtual void NotifyUpdateCell(ICell cell);
    protected abstract virtual IEvaluationCell ToEvaluationCell(ICell cell);
    protected virtual CellValue EvaluateFormulaCellValue(ICell cell);
}
public class NPOI.XSSF.UserModel.BuildFreeForm : object {
    private DblVect2D mMin;
    private DblVect2D mMax;
    [CompilerGeneratedAttribute]
private LinkedList`1<DblVect2D> <mPoints>k__BackingField;
    [CompilerGeneratedAttribute]
private LinkedList`1<DblVect2D> <mInterVect>k__BackingField;
    [CompilerGeneratedAttribute]
private LinkedList`1<DblVect2D> <mCtrlPoint>k__BackingField;
    public long Left { get; }
    public long Rigth { get; }
    public long Top { get; }
    public long Bottom { get; }
    internal double dLeft { get; }
    internal double dTop { get; }
    protected LinkedList`1<DblVect2D> mPoints { get; }
    protected LinkedList`1<DblVect2D> mInterVect { get; }
    public LinkedList`1<DblVect2D> mCtrlPoint { get; private set; }
    public long Width { get; }
    public long Height { get; }
    public LinkedList`1<Coords> Points { get; }
    public long get_Left();
    public long get_Rigth();
    public long get_Top();
    public long get_Bottom();
    internal double get_dLeft();
    internal double get_dTop();
    [CompilerGeneratedAttribute]
protected LinkedList`1<DblVect2D> get_mPoints();
    [CompilerGeneratedAttribute]
protected LinkedList`1<DblVect2D> get_mInterVect();
    [CompilerGeneratedAttribute]
public LinkedList`1<DblVect2D> get_mCtrlPoint();
    [CompilerGeneratedAttribute]
private void set_mCtrlPoint(LinkedList`1<DblVect2D> value);
    public long get_Width();
    public long get_Height();
    public LinkedList`1<Coords> get_Points();
    public void AddNode(Coords Pt);
    public bool Build();
    private DblVect2D Bezier(List`1<DblVect2D> p, double t);
    private long BinomialCoefficients(int n, int k);
    private long Factorial(int n);
}
public class NPOI.XSSF.UserModel.Charts.AbstractXSSFChartSeries : object {
    private string titleValue;
    private CellReference titleRef;
    private Nullable`1<TitleType> titleType;
    protected bool IsTitleSet { get; }
    public sealed virtual void SetTitle(string title);
    public sealed virtual void SetTitle(CellReference titleReference);
    public sealed virtual string GetTitleString();
    public sealed virtual CellReference GetTitleCellReference();
    public sealed virtual Nullable`1<TitleType> GetTitleType();
    protected bool get_IsTitleSet();
    protected CT_SerTx GetCTSerTx();
}
public class NPOI.XSSF.UserModel.Charts.XSSFAreaChartData`2 : object {
    private List`1<IAreaChartSeries`2<Tx, Ty>> series;
    public sealed virtual IAreaChartSeries`2<Tx, Ty> AddSeries(IChartDataSource`1<Tx> categoryAxisData, IChartDataSource`1<Ty> values);
    public sealed virtual List`1<IAreaChartSeries`2<Tx, Ty>> GetSeries();
    public sealed virtual void FillChart(IChart chart, IChartAxis[] axis);
}
public class NPOI.XSSF.UserModel.Charts.XSSFBarChartData`2 : object {
    private List`1<IBarChartSeries`2<Tx, Ty>> series;
    public sealed virtual IBarChartSeries`2<Tx, Ty> AddSeries(IChartDataSource`1<Tx> categoryAxisData, IChartDataSource`1<Ty> values);
    public sealed virtual List`1<IBarChartSeries`2<Tx, Ty>> GetSeries();
    public sealed virtual void FillChart(IChart chart, IChartAxis[] axis);
}
public class NPOI.XSSF.UserModel.Charts.XSSFCategoryAxis : XSSFChartAxis {
    private CT_CatAx ctCatAx;
    public long Id { get; }
    public XSSFCategoryAxis(XSSFChart chart, long id, AxisPosition pos);
    public XSSFCategoryAxis(XSSFChart chart, CT_CatAx ctCatAx);
    public virtual long get_Id();
    protected virtual CT_AxPos GetCTAxPos();
    protected virtual CT_NumFmt GetCTNumFmt();
    protected virtual CT_Scaling GetCTScaling();
    protected virtual CT_Crosses GetCTCrosses();
    protected virtual CT_Boolean GetDelete();
    protected virtual CT_TickMark GetMajorCTTickMark();
    public void SetMajorCTTickMark(CT_TickMark tm);
    protected virtual CT_TickMark GetMinorCTTickMark();
    public virtual void CrossAxis(IChartAxis axis);
    public void SetAuto(CT_Boolean au);
    private void createAxis(long id, AxisPosition pos);
}
public abstract class NPOI.XSSF.UserModel.Charts.XSSFChartAxis : object {
    protected XSSFChart chart;
    private static double Min_LOG_BASE;
    private static double Max_LOG_BASE;
    public long Id { get; }
    public AxisPosition Position { get; public set; }
    public string NumberFormat { get; public set; }
    public bool IsSetLogBase { get; }
    public double LogBase { get; public set; }
    public bool IsSetMinimum { get; }
    public double Minimum { get; public set; }
    public bool IsSetMaximum { get; }
    public double Maximum { get; public set; }
    public AxisOrientation Orientation { get; public set; }
    public AxisCrosses Crosses { get; public set; }
    public bool IsVisible { get; public set; }
    public AxisTickMark MajorTickMark { get; public set; }
    public AxisTickMark MinorTickMark { get; public set; }
    protected XSSFChartAxis(XSSFChart chart);
    private static XSSFChartAxis();
    public abstract virtual long get_Id();
    public abstract virtual void CrossAxis(IChartAxis axis);
    public sealed virtual AxisPosition get_Position();
    public sealed virtual void set_Position(AxisPosition value);
    public sealed virtual string get_NumberFormat();
    public sealed virtual void set_NumberFormat(string value);
    public sealed virtual bool get_IsSetLogBase();
    public sealed virtual double get_LogBase();
    public sealed virtual void set_LogBase(double value);
    public sealed virtual bool get_IsSetMinimum();
    public sealed virtual double get_Minimum();
    public sealed virtual void set_Minimum(double value);
    public sealed virtual bool get_IsSetMaximum();
    public sealed virtual double get_Maximum();
    public sealed virtual void set_Maximum(double value);
    public sealed virtual AxisOrientation get_Orientation();
    public sealed virtual void set_Orientation(AxisOrientation value);
    public sealed virtual AxisCrosses get_Crosses();
    public sealed virtual void set_Crosses(AxisCrosses value);
    public sealed virtual bool get_IsVisible();
    public sealed virtual void set_IsVisible(bool value);
    public sealed virtual AxisTickMark get_MajorTickMark();
    public sealed virtual void set_MajorTickMark(AxisTickMark value);
    public sealed virtual AxisTickMark get_MinorTickMark();
    public sealed virtual void set_MinorTickMark(AxisTickMark value);
    protected abstract virtual CT_AxPos GetCTAxPos();
    protected abstract virtual CT_NumFmt GetCTNumFmt();
    protected abstract virtual CT_Scaling GetCTScaling();
    protected abstract virtual CT_Crosses GetCTCrosses();
    protected abstract virtual CT_Boolean GetDelete();
    protected abstract virtual CT_TickMark GetMajorCTTickMark();
    protected abstract virtual CT_TickMark GetMinorCTTickMark();
    private static ST_Orientation fromAxisOrientation(AxisOrientation orientation);
    private static AxisOrientation toAxisOrientation(CT_Orientation ctOrientation);
    private static ST_Crosses fromAxisCrosses(AxisCrosses crosses);
    private static AxisCrosses toAxisCrosses(CT_Crosses ctCrosses);
    private static ST_AxPos fromAxisPosition(AxisPosition position);
    private static AxisPosition toAxisPosition(CT_AxPos ctAxPos);
    private static ST_TickMark fromAxisTickMark(AxisTickMark tickMark);
    private static AxisTickMark toAxisTickMark(CT_TickMark ctTickMark);
}
public class NPOI.XSSF.UserModel.Charts.XSSFChartDataFactory : object {
    private static XSSFChartDataFactory instance;
    public sealed virtual IScatterChartData`2<Tx, Ty> CreateScatterChartData();
    public sealed virtual ILineChartData`2<Tx, Ty> CreateLineChartData();
    public sealed virtual IBarChartData`2<Tx, Ty> CreateBarChartData();
    public sealed virtual IPieChartData`2<Tx, Ty> CreatePieChartData();
    public sealed virtual IColumnChartData`2<Tx, Ty> CreateColumnChartData();
    public sealed virtual IAreaChartData`2<Tx, Ty> CreateAreaChartData();
    public static XSSFChartDataFactory GetInstance();
}
public class NPOI.XSSF.UserModel.Charts.XSSFChartLegend : object {
    private CT_Legend legend;
    public LegendPosition Position { get; public set; }
    public bool IsOverlay { get; public set; }
    public XSSFChartLegend(XSSFChart chart);
    private void SetDefaults();
    internal CT_Legend GetCTLegend();
    public sealed virtual LegendPosition get_Position();
    public sealed virtual void set_Position(LegendPosition value);
    public sealed virtual bool get_IsOverlay();
    public sealed virtual void set_IsOverlay(bool value);
    public sealed virtual IManualLayout GetManualLayout();
    private ST_LegendPos FromLegendPosition(LegendPosition position);
    private LegendPosition ToLegendPosition(CT_LegendPos ctLegendPos);
}
internal class NPOI.XSSF.UserModel.Charts.XSSFChartUtil : object {
    public static void BuildAxDataSource(CT_AxDataSource ctAxDataSource, IChartDataSource`1<T> dataSource);
    public static void BuildNumDataSource(CT_NumDataSource ctNumDataSource, IChartDataSource`1<T> dataSource);
    private static void BuildNumRef(CT_NumRef ctNumRef, IChartDataSource`1<T> dataSource);
    private static void BuildNumLit(CT_NumData ctNumData, IChartDataSource`1<T> dataSource);
    private static void BuildStrRef(CT_StrRef ctStrRef, IChartDataSource`1<T> dataSource);
    private static void BuildStrLit(CT_StrData ctStrData, IChartDataSource`1<T> dataSource);
    private static void FillStringCache(CT_StrData cache, IChartDataSource`1<T> dataSource);
    private static void FillNumCache(CT_NumData cache, IChartDataSource`1<T> dataSource);
}
public class NPOI.XSSF.UserModel.Charts.XSSFColumnChartData`2 : object {
    private List`1<IColumnChartSeries`2<Tx, Ty>> series;
    public sealed virtual IColumnChartSeries`2<Tx, Ty> AddSeries(IChartDataSource`1<Tx> categoryAxisData, IChartDataSource`1<Ty> values);
    public sealed virtual List`1<IColumnChartSeries`2<Tx, Ty>> GetSeries();
    public sealed virtual void FillChart(IChart chart, IChartAxis[] axis);
}
public class NPOI.XSSF.UserModel.Charts.XSSFDateAxis : XSSFChartAxis {
    private CT_DateAx ctDateAx;
    public long Id { get; }
    public CT_ShapeProperties Line { get; }
    public XSSFDateAxis(XSSFChart chart, long id, AxisPosition pos);
    public XSSFDateAxis(XSSFChart chart, CT_DateAx ctDateAx);
    public virtual long get_Id();
    public CT_ShapeProperties get_Line();
    protected virtual CT_AxPos GetCTAxPos();
    protected virtual CT_NumFmt GetCTNumFmt();
    protected virtual CT_Scaling GetCTScaling();
    protected virtual CT_Crosses GetCTCrosses();
    protected virtual CT_Boolean GetDelete();
    protected virtual CT_TickMark GetMajorCTTickMark();
    public void SetMajorCTTickMark(CT_TickMark tm);
    protected virtual CT_TickMark GetMinorCTTickMark();
    protected CT_ChartLines GetMajorGridLines();
    public virtual void CrossAxis(IChartAxis axis);
    public CT_TimeUnit GetBaseTimeUnit();
    public void SetBaseTimeUnit(CT_TimeUnit unit);
    public void SetAuto(CT_Boolean au);
    private void createAxis(long id, AxisPosition pos);
}
public class NPOI.XSSF.UserModel.Charts.XSSFLineChartData`2 : object {
    private List`1<ILineChartSeries`2<Tx, Ty>> series;
    public sealed virtual ILineChartSeries`2<Tx, Ty> AddSeries(IChartDataSource`1<Tx> categoryAxisData, IChartDataSource`1<Ty> values);
    public sealed virtual List`1<ILineChartSeries`2<Tx, Ty>> GetSeries();
    public sealed virtual void FillChart(IChart chart, IChartAxis[] axis);
}
public class NPOI.XSSF.UserModel.Charts.XSSFManualLayout : object {
    private CT_ManualLayout layout;
    private static LayoutMode defaultLayoutMode;
    private static LayoutTarget defaultLayoutTarget;
    public XSSFManualLayout(CT_Layout ctLayout);
    public XSSFManualLayout(XSSFChart chart);
    public CT_ManualLayout GetCTManualLayout();
    public sealed virtual void SetWidthRatio(double ratio);
    public sealed virtual double GetWidthRatio();
    public sealed virtual void SetHeightRatio(double ratio);
    public sealed virtual double GetHeightRatio();
    public sealed virtual LayoutTarget GetTarget();
    public sealed virtual void SetTarget(LayoutTarget target);
    public sealed virtual LayoutMode GetXMode();
    public sealed virtual void SetXMode(LayoutMode mode);
    public sealed virtual LayoutMode GetYMode();
    public sealed virtual void SetYMode(LayoutMode mode);
    public sealed virtual double GetX();
    public sealed virtual void SetX(double x);
    public sealed virtual double GetY();
    public sealed virtual void SetY(double y);
    public sealed virtual LayoutMode GetWidthMode();
    public sealed virtual void SetWidthMode(LayoutMode mode);
    public sealed virtual LayoutMode GetHeightMode();
    public sealed virtual void SetHeightMode(LayoutMode mode);
    private void InitLayout(CT_Layout ctLayout);
    private ST_LayoutMode fromLayoutMode(LayoutMode mode);
    private LayoutMode toLayoutMode(CT_LayoutMode ctLayoutMode);
    private ST_LayoutTarget fromLayoutTarget(LayoutTarget target);
    private LayoutTarget toLayoutTarget(CT_LayoutTarget ctLayoutTarget);
}
public class NPOI.XSSF.UserModel.Charts.XSSFPieChartData`2 : object {
    private List`1<IPieChartSeries`2<Tx, Ty>> series;
    public sealed virtual IPieChartSeries`2<Tx, Ty> AddSeries(IChartDataSource`1<Tx> categoryAxisData, IChartDataSource`1<Ty> values);
    public sealed virtual List`1<IPieChartSeries`2<Tx, Ty>> GetSeries();
    public sealed virtual void FillChart(IChart chart, IChartAxis[] axis);
}
public class NPOI.XSSF.UserModel.Charts.XSSFScatterChartData`2 : object {
    private List`1<IScatterChartSeries`2<Tx, Ty>> series;
    public sealed virtual IScatterChartSeries`2<Tx, Ty> AddSeries(IChartDataSource`1<Tx> xs, IChartDataSource`1<Ty> ys);
    public sealed virtual IScatterChartSeries`2<Tx, Ty> AddSeries(IChartDataSource`1<Ty> values);
    public sealed virtual void FillChart(IChart chart, IChartAxis[] axis);
    public sealed virtual List`1<IScatterChartSeries`2<Tx, Ty>> GetSeries();
    private void AddStyle(CT_ScatterChart ctScatterChart);
}
public class NPOI.XSSF.UserModel.Charts.XSSFValueAxis : XSSFChartAxis {
    private CT_ValAx ctValAx;
    public long Id { get; }
    public XSSFValueAxis(XSSFChart chart, long id, AxisPosition pos);
    public XSSFValueAxis(XSSFChart chart, CT_ValAx ctValAx);
    public virtual long get_Id();
    public sealed virtual void SetCrossBetween(AxisCrossBetween crossBetween);
    public sealed virtual AxisCrossBetween GetCrossBetween();
    protected virtual CT_Boolean GetDelete();
    protected virtual CT_TickMark GetMajorCTTickMark();
    public void SetMajorCTTickMark(CT_TickMark tm);
    protected virtual CT_TickMark GetMinorCTTickMark();
    protected virtual CT_AxPos GetCTAxPos();
    protected virtual CT_NumFmt GetCTNumFmt();
    protected virtual CT_Scaling GetCTScaling();
    protected virtual CT_Crosses GetCTCrosses();
    public virtual void CrossAxis(IChartAxis axis);
    private void CreateAxis(long id, AxisPosition pos);
    private static ST_CrossBetween fromCrossBetween(AxisCrossBetween crossBetween);
    private static AxisCrossBetween ToCrossBetween(ST_CrossBetween ctCrossBetween);
}
public enum NPOI.XSSF.UserModel.Extensions.BorderSide : Enum {
    public int value__;
    public static BorderSide TOP;
    public static BorderSide RIGHT;
    public static BorderSide BOTTOM;
    public static BorderSide LEFT;
    public static BorderSide DIAGONAL;
}
public class NPOI.XSSF.UserModel.Extensions.XSSFCellAlignment : object {
    private CT_CellAlignment cellAlignement;
    public VerticalAlignment Vertical { get; public set; }
    public HorizontalAlignment Horizontal { get; public set; }
    public long Indent { get; public set; }
    public long TextRotation { get; public set; }
    public bool WrapText { get; public set; }
    public bool ShrinkToFit { get; public set; }
    public XSSFCellAlignment(CT_CellAlignment cellAlignment);
    public VerticalAlignment get_Vertical();
    public void set_Vertical(VerticalAlignment value);
    public HorizontalAlignment get_Horizontal();
    public void set_Horizontal(HorizontalAlignment value);
    public long get_Indent();
    public void set_Indent(long value);
    public long get_TextRotation();
    public void set_TextRotation(long value);
    public bool get_WrapText();
    public void set_WrapText(bool value);
    public bool get_ShrinkToFit();
    public void set_ShrinkToFit(bool value);
    public CT_CellAlignment GetCTCellAlignment();
}
public class NPOI.XSSF.UserModel.Extensions.XSSFCellBorder : object {
    private ThemesTable _theme;
    private CT_Border border;
    public XSSFCellBorder(CT_Border border, ThemesTable theme);
    public XSSFCellBorder(CT_Border border);
    public void SetThemesTable(ThemesTable themes);
    public CT_Border GetCTBorder();
    public BorderStyle GetBorderStyle(BorderSide side);
    public void SetBorderStyle(BorderSide side, BorderStyle style);
    public XSSFColor GetBorderColor(BorderSide side);
    public void SetBorderColor(BorderSide side, XSSFColor color);
    private CT_BorderPr GetBorder(BorderSide side);
    private CT_BorderPr GetBorder(BorderSide side, bool ensure);
    public virtual int GetHashCode();
    public virtual bool Equals(object o);
}
public class NPOI.XSSF.UserModel.Extensions.XSSFCellFill : object {
    private CT_Fill _fill;
    public XSSFCellFill(CT_Fill fill);
    public XSSFColor GetFillBackgroundColor();
    public void SetFillBackgroundColor(int index);
    public void SetFillBackgroundColor(XSSFColor color);
    public XSSFColor GetFillForegroundColor();
    public void SetFillForegroundColor(int index);
    public void SetFillForegroundColor(XSSFColor color);
    public ST_PatternType GetPatternType();
    public void SetPatternType(ST_PatternType patternType);
    private CT_PatternFill EnsureCTPatternFill();
    public CT_Fill GetCTFill();
    public virtual int GetHashCode();
    public virtual bool Equals(object o);
}
public abstract class NPOI.XSSF.UserModel.Extensions.XSSFHeaderFooter : object {
    private HeaderFooterHelper helper;
    private CT_HeaderFooter headerFooter;
    private bool stripFields;
    public string Text { get; public set; }
    public string Center { get; public set; }
    public string Left { get; public set; }
    public string Right { get; public set; }
    public XSSFHeaderFooter(CT_HeaderFooter headerFooter);
    public CT_HeaderFooter GetHeaderFooter();
    public string GetValue();
    public bool AreFieldsStripped();
    public void SetAreFieldsStripped(bool stripFields);
    public abstract virtual string get_Text();
    public abstract virtual void set_Text(string value);
    public static string StripFields(string text);
    public sealed virtual string get_Center();
    public sealed virtual void set_Center(string value);
    public sealed virtual string get_Left();
    public sealed virtual void set_Left(string value);
    public sealed virtual string get_Right();
    public sealed virtual void set_Right(string value);
}
public class NPOI.XSSF.UserModel.Helpers.ColumnHelper : object {
    private CT_Worksheet worksheet;
    public ColumnHelper(CT_Worksheet worksheet);
    public void CleanColumns();
    public CT_Cols AddCleanColIntoCols(CT_Cols cols, CT_Col newCol);
    public static void SortColumns(CT_Cols newCols);
    public CT_Col CloneCol(CT_Cols cols, CT_Col col);
    public CT_Col GetColumn(long index, bool splitColumns);
    public CT_Col GetColumn1Based(long index1, bool splitColumns);
    public bool ColumnExists(CT_Cols cols, long index);
    public void SetColumnAttributes(CT_Col fromCol, CT_Col toCol);
    public void SetColBestFit(long index, bool bestFit);
    public void SetCustomWidth(long index, bool width);
    public void SetColWidth(long index, double width);
    public void SetColHidden(long index, bool hidden);
    public void SetColDefaultStyle(long index, ICellStyle style);
    public void SetColDefaultStyle(long index, int styleId);
    public int GetColDefaultStyle(long index);
    public int GetIndexOfColumn(CT_Cols cols, CT_Col searchCol);
    internal CT_Col GetOrCreateColumn1Based(long index1, bool splitColumns);
    private void AddCleanColIntoCols(CT_Cols cols, CT_Col newCol, TreeSet`1<CT_Col> trackedCols);
    private CT_Col CloneCol(CT_Cols cols, CT_Col col, Int64[] newRange);
    private Int64[] GetOverlap(CT_Col col1, CT_Col col2);
    private List`1<CT_Col> GetOverlappingCols(CT_Col newCol, TreeSet`1<CT_Col> trackedCols);
    private bool Overlaps(CT_Col col1, CT_Col col2);
    private Int64[] GetOverlappingRange(CT_Col col1, CT_Col col2);
    private Int64[] ToRange(CT_Col col);
    private CT_Col InsertCol(CT_Cols cols, long min, long max, CT_Col[] colsWithAttributes);
    private CT_Col InsertCol(CT_Cols cols, long min, long max, CT_Col[] colsWithAttributes, bool ignoreExistsCheck, CT_Col overrideColumn);
    private bool ColumnExists1Based(CT_Cols cols, long index1);
    private bool ColumnExists(CT_Cols cols, long min, long max);
}
public class NPOI.XSSF.UserModel.Helpers.HeaderFooterHelper : object {
    private static string HeaderFooterEntity_L;
    private static string HeaderFooterEntity_C;
    private static string HeaderFooterEntity_R;
    public static string HeaderFooterEntity_File;
    public static string HeaderFooterEntity_Date;
    public static string HeaderFooterEntity_Time;
    private static HeaderFooterHelper();
    public string GetLeftSection(string str);
    public string GetCenterSection(string str);
    public string GetRightSection(string str);
    public string SetLeftSection(string str, string newLeft);
    public string SetCenterSection(string str, string newCenter);
    public string SetRightSection(string str, string newRight);
    private String[] GetParts(string str);
    private string JoinParts(String[] parts);
    private string JoinParts(string l, string c, string r);
}
public class NPOI.XSSF.UserModel.Helpers.XSSFFormulaUtils : object {
    private XSSFWorkbook _wb;
    private XSSFEvaluationWorkbook _fpwb;
    public XSSFFormulaUtils(XSSFWorkbook wb);
    public void UpdateSheetName(int sheetIndex, string oldName, string newName);
    private void UpdateFormula(XSSFCell cell, string oldName, string newName);
    private void UpdateName(IName name, string oldName, string newName);
    private void UpdatePtg(Ptg ptg, string oldName, string newName);
}
public class NPOI.XSSF.UserModel.Helpers.XSSFIgnoredErrorHelper : object {
    public static bool IsSet(IgnoredErrorType errorType, CT_IgnoredError error);
    public static void Set(IgnoredErrorType errorType, CT_IgnoredError error);
    public static void AddIgnoredErrors(CT_IgnoredError err, string ref1, IgnoredErrorType[] ignoredErrorTypes);
    public static ISet`1<IgnoredErrorType> GetErrorTypes(CT_IgnoredError err);
}
public class NPOI.XSSF.UserModel.Helpers.XSSFPasswordHelper : object {
    public static void SetPassword(CT_SheetProtection xobj, string password, HashAlgorithm hashAlgo, string prefix);
    public static void SetPassword(XmlNode xobj, string password, HashAlgorithm hashAlgo, string prefix);
    public static bool ValidatePassword(CT_SheetProtection xobj, string password, string prefix);
    public static bool ValidatePassword(XmlNode xobj, string password, string prefix);
    private static XmlQualifiedName GetAttrName(string prefix, string name);
}
public class NPOI.XSSF.UserModel.Helpers.XSSFRowShifter : RowShifter {
    public XSSFRowShifter(XSSFSheet sh);
    public virtual void UpdateConditionalFormatting(FormulaShifter formulaShifter);
    public virtual void UpdateFormulas(FormulaShifter formulaShifter);
    public virtual void UpdateHyperlinks(FormulaShifter formulaShifter);
    public virtual void UpdateNamedRanges(FormulaShifter formulaShifter);
    public virtual void UpdateRowFormulas(IRow row, FormulaShifter formulaShifter);
}
public class NPOI.XSSF.UserModel.Helpers.XSSFSingleXmlCell : object {
    private CT_SingleXmlCell SingleXmlCell;
    private SingleXmlCells parent;
    public XSSFSingleXmlCell(CT_SingleXmlCell SingleXmlCell, SingleXmlCells parent);
    public ICell GetReferencedCell();
    public string GetXpath();
    public long GetMapId();
    public ST_XmlDataType GetXmlDataType();
}
public class NPOI.XSSF.UserModel.Helpers.XSSFXmlColumnPr : object {
    private XSSFTable table;
    private XSSFTableColumn tableColumn;
    private CT_XmlColumnPr ctXmlColumnPr;
    public long MapId { get; }
    public string XPath { get; }
    public long Id { get; }
    public string LocalXPath { get; }
    internal XSSFXmlColumnPr(XSSFTableColumn tableColumn, CT_XmlColumnPr ctXmlColumnPr);
    [ObsoleteAttribute]
public XSSFXmlColumnPr(XSSFTable table, CT_TableColumn ctTableColum, CT_XmlColumnPr CT_XmlColumnPr);
    public long get_MapId();
    public string get_XPath();
    public long get_Id();
    public string get_LocalXPath();
    public ST_XmlDataType GetXmlDataType();
}
public enum NPOI.XSSF.UserModel.ListAutoNumber : Enum {
    public int value__;
    public static ListAutoNumber ALPHA_LC_PARENT_BOTH;
    public static ListAutoNumber ALPHA_UC_PARENT_BOTH;
    public static ListAutoNumber ALPHA_LC_PARENT_R;
    public static ListAutoNumber ALPHA_UC_PARENT_R;
    public static ListAutoNumber ALPHA_LC_PERIOD;
    public static ListAutoNumber ALPHA_UC_PERIOD;
    public static ListAutoNumber ARABIC_PARENT_BOTH;
    public static ListAutoNumber ARABIC_PARENT_R;
    public static ListAutoNumber ARABIC_PERIOD;
    public static ListAutoNumber ARABIC_PLAIN;
    public static ListAutoNumber ROMAN_LC_PARENT_BOTH;
    public static ListAutoNumber ROMAN_UC_PARENT_BOTH;
    public static ListAutoNumber ROMAN_LC_PARENT_R;
    public static ListAutoNumber ROMAN_UC_PARENT_R;
    public static ListAutoNumber ROMAN_LC_PERIOD;
    public static ListAutoNumber ROMAN_UC_PERIOD;
    public static ListAutoNumber CIRCLE_NUM_DB_PLAIN;
    public static ListAutoNumber CIRCLE_NUM_WD_BLACK_PLAIN;
    public static ListAutoNumber CIRCLE_NUM_WD_WHITE_PLAIN;
}
public enum NPOI.XSSF.UserModel.TextAlign : Enum {
    public int value__;
    public static TextAlign None;
    public static TextAlign LEFT;
    public static TextAlign CENTER;
    public static TextAlign RIGHT;
    public static TextAlign JUSTIFY;
    public static TextAlign JUSTIFY_LOW;
    public static TextAlign DIST;
    public static TextAlign THAI_DIST;
}
public enum NPOI.XSSF.UserModel.TextAutofit : Enum {
    public int value__;
    public static TextAutofit NONE;
    public static TextAutofit NORMAL;
    public static TextAutofit SHAPE;
}
public enum NPOI.XSSF.UserModel.TextCap : Enum {
    public int value__;
    public static TextCap NONE;
    public static TextCap SMALL;
    public static TextCap ALL;
}
public enum NPOI.XSSF.UserModel.TextDirection : Enum {
    public int value__;
    public static TextDirection None;
    public static TextDirection HORIZONTAL;
    public static TextDirection VERTICAL;
    public static TextDirection VERTICAL_270;
    public static TextDirection STACKED;
}
public enum NPOI.XSSF.UserModel.TextFontAlign : Enum {
    public int value__;
    public static TextFontAlign None;
    public static TextFontAlign AUTO;
    public static TextFontAlign TOP;
    public static TextFontAlign CENTER;
    public static TextFontAlign BASELINE;
    public static TextFontAlign BOTTOM;
}
public enum NPOI.XSSF.UserModel.TextHorizontalOverflow : Enum {
    public int value__;
    public static TextHorizontalOverflow None;
    public static TextHorizontalOverflow OVERFLOW;
    public static TextHorizontalOverflow CLIP;
}
public enum NPOI.XSSF.UserModel.TextVerticalOverflow : Enum {
    public int value__;
    public static TextVerticalOverflow None;
    public static TextVerticalOverflow OVERFLOW;
    public static TextVerticalOverflow ELLIPSIS;
    public static TextVerticalOverflow CLIP;
}
public abstract class NPOI.XSSF.UserModel.XSSFAnchor : object {
    public int Dx1 { get; public set; }
    public int Dy1 { get; public set; }
    public int Dy2 { get; public set; }
    public int Dx2 { get; public set; }
    public abstract virtual int get_Dx1();
    public abstract virtual void set_Dx1(int value);
    public abstract virtual int get_Dy1();
    public abstract virtual void set_Dy1(int value);
    public abstract virtual int get_Dy2();
    public abstract virtual void set_Dy2(int value);
    public abstract virtual int get_Dx2();
    public abstract virtual void set_Dx2(int value);
}
public class NPOI.XSSF.UserModel.XSSFAutoFilter : object {
    private XSSFSheet _sheet;
    public XSSFAutoFilter(XSSFSheet sheet);
}
public class NPOI.XSSF.UserModel.XSSFBorderFormatting : object {
    private CT_Border _border;
    public BorderStyle BorderBottom { get; public set; }
    public BorderStyle BorderDiagonal { get; public set; }
    public BorderStyle BorderLeft { get; public set; }
    public BorderStyle BorderRight { get; public set; }
    public BorderStyle BorderTop { get; public set; }
    public short BottomBorderColor { get; public set; }
    public short DiagonalBorderColor { get; public set; }
    public short LeftBorderColor { get; public set; }
    public short RightBorderColor { get; public set; }
    public short TopBorderColor { get; public set; }
    public IColor BottomBorderColorColor { get; public set; }
    public IColor DiagonalBorderColorColor { get; public set; }
    public IColor LeftBorderColorColor { get; public set; }
    public IColor RightBorderColorColor { get; public set; }
    public IColor TopBorderColorColor { get; public set; }
    internal XSSFBorderFormatting(CT_Border border);
    public sealed virtual BorderStyle get_BorderBottom();
    public sealed virtual void set_BorderBottom(BorderStyle value);
    public sealed virtual BorderStyle get_BorderDiagonal();
    public sealed virtual void set_BorderDiagonal(BorderStyle value);
    public sealed virtual BorderStyle get_BorderLeft();
    public sealed virtual void set_BorderLeft(BorderStyle value);
    public sealed virtual BorderStyle get_BorderRight();
    public sealed virtual void set_BorderRight(BorderStyle value);
    public sealed virtual BorderStyle get_BorderTop();
    public sealed virtual void set_BorderTop(BorderStyle value);
    public sealed virtual short get_BottomBorderColor();
    public sealed virtual void set_BottomBorderColor(short value);
    public sealed virtual short get_DiagonalBorderColor();
    public sealed virtual void set_DiagonalBorderColor(short value);
    public sealed virtual short get_LeftBorderColor();
    public sealed virtual void set_LeftBorderColor(short value);
    public sealed virtual short get_RightBorderColor();
    public sealed virtual void set_RightBorderColor(short value);
    public sealed virtual short get_TopBorderColor();
    public sealed virtual void set_TopBorderColor(short value);
    public sealed virtual IColor get_BottomBorderColorColor();
    public sealed virtual void set_BottomBorderColorColor(IColor value);
    public void setBottomBorderColor(CT_Color color);
    public sealed virtual IColor get_DiagonalBorderColorColor();
    public sealed virtual void set_DiagonalBorderColorColor(IColor value);
    public void setDiagonalBorderColor(CT_Color color);
    public sealed virtual IColor get_LeftBorderColorColor();
    public sealed virtual void set_LeftBorderColorColor(IColor value);
    public void setLeftBorderColor(CT_Color color);
    public sealed virtual IColor get_RightBorderColorColor();
    public sealed virtual void set_RightBorderColorColor(IColor value);
    public void setRightBorderColor(CT_Color color);
    public sealed virtual IColor get_TopBorderColorColor();
    public sealed virtual void set_TopBorderColorColor(IColor value);
    public void setTopBorderColor(CT_Color color);
}
public class NPOI.XSSF.UserModel.XSSFBuiltinTableStyle : object {
    private static string presetTableStylesResourceName;
    private static Dictionary`2<XSSFBuiltinTableStyleEnum, ITableStyle> styleMap;
    private static XSSFBuiltinTableStyle();
    public static ITableStyle GetStyle(XSSFBuiltinTableStyleEnum style);
    public static bool IsBuiltinStyle(ITableStyle style);
    private static void Init();
    private static string StyleXML(XmlNode dxfsNode, XmlNode tableStyleNode);
}
public enum NPOI.XSSF.UserModel.XSSFBuiltinTableStyleEnum : Enum {
    public int value__;
    public static XSSFBuiltinTableStyleEnum TableStyleDark1;
    public static XSSFBuiltinTableStyleEnum TableStyleDark2;
    public static XSSFBuiltinTableStyleEnum TableStyleDark3;
    public static XSSFBuiltinTableStyleEnum TableStyleDark4;
    public static XSSFBuiltinTableStyleEnum TableStyleDark5;
    public static XSSFBuiltinTableStyleEnum TableStyleDark6;
    public static XSSFBuiltinTableStyleEnum TableStyleDark7;
    public static XSSFBuiltinTableStyleEnum TableStyleDark8;
    public static XSSFBuiltinTableStyleEnum TableStyleDark9;
    public static XSSFBuiltinTableStyleEnum TableStyleDark10;
    public static XSSFBuiltinTableStyleEnum TableStyleDark11;
    public static XSSFBuiltinTableStyleEnum TableStyleLight1;
    public static XSSFBuiltinTableStyleEnum TableStyleLight2;
    public static XSSFBuiltinTableStyleEnum TableStyleLight3;
    public static XSSFBuiltinTableStyleEnum TableStyleLight4;
    public static XSSFBuiltinTableStyleEnum TableStyleLight5;
    public static XSSFBuiltinTableStyleEnum TableStyleLight6;
    public static XSSFBuiltinTableStyleEnum TableStyleLight7;
    public static XSSFBuiltinTableStyleEnum TableStyleLight8;
    public static XSSFBuiltinTableStyleEnum TableStyleLight9;
    public static XSSFBuiltinTableStyleEnum TableStyleLight10;
    public static XSSFBuiltinTableStyleEnum TableStyleLight11;
    public static XSSFBuiltinTableStyleEnum TableStyleLight12;
    public static XSSFBuiltinTableStyleEnum TableStyleLight13;
    public static XSSFBuiltinTableStyleEnum TableStyleLight14;
    public static XSSFBuiltinTableStyleEnum TableStyleLight15;
    public static XSSFBuiltinTableStyleEnum TableStyleLight16;
    public static XSSFBuiltinTableStyleEnum TableStyleLight17;
    public static XSSFBuiltinTableStyleEnum TableStyleLight18;
    public static XSSFBuiltinTableStyleEnum TableStyleLight19;
    public static XSSFBuiltinTableStyleEnum TableStyleLight20;
    public static XSSFBuiltinTableStyleEnum TableStyleLight21;
    public static XSSFBuiltinTableStyleEnum TableStyleMedium1;
    public static XSSFBuiltinTableStyleEnum TableStyleMedium2;
    public static XSSFBuiltinTableStyleEnum TableStyleMedium3;
    public static XSSFBuiltinTableStyleEnum TableStyleMedium4;
    public static XSSFBuiltinTableStyleEnum TableStyleMedium5;
    public static XSSFBuiltinTableStyleEnum TableStyleMedium6;
    public static XSSFBuiltinTableStyleEnum TableStyleMedium7;
    public static XSSFBuiltinTableStyleEnum TableStyleMedium8;
    public static XSSFBuiltinTableStyleEnum TableStyleMedium9;
    public static XSSFBuiltinTableStyleEnum TableStyleMedium10;
    public static XSSFBuiltinTableStyleEnum TableStyleMedium11;
    public static XSSFBuiltinTableStyleEnum TableStyleMedium12;
    public static XSSFBuiltinTableStyleEnum TableStyleMedium13;
    public static XSSFBuiltinTableStyleEnum TableStyleMedium14;
    public static XSSFBuiltinTableStyleEnum TableStyleMedium15;
    public static XSSFBuiltinTableStyleEnum TableStyleMedium16;
    public static XSSFBuiltinTableStyleEnum TableStyleMedium17;
    public static XSSFBuiltinTableStyleEnum TableStyleMedium18;
    public static XSSFBuiltinTableStyleEnum TableStyleMedium19;
    public static XSSFBuiltinTableStyleEnum TableStyleMedium20;
    public static XSSFBuiltinTableStyleEnum TableStyleMedium21;
    public static XSSFBuiltinTableStyleEnum TableStyleMedium22;
    public static XSSFBuiltinTableStyleEnum TableStyleMedium23;
    public static XSSFBuiltinTableStyleEnum TableStyleMedium24;
    public static XSSFBuiltinTableStyleEnum TableStyleMedium25;
    public static XSSFBuiltinTableStyleEnum TableStyleMedium26;
    public static XSSFBuiltinTableStyleEnum TableStyleMedium27;
    public static XSSFBuiltinTableStyleEnum TableStyleMedium28;
    public static XSSFBuiltinTableStyleEnum PivotStyleMedium1;
    public static XSSFBuiltinTableStyleEnum PivotStyleMedium2;
    public static XSSFBuiltinTableStyleEnum PivotStyleMedium3;
    public static XSSFBuiltinTableStyleEnum PivotStyleMedium4;
    public static XSSFBuiltinTableStyleEnum PivotStyleMedium5;
    public static XSSFBuiltinTableStyleEnum PivotStyleMedium6;
    public static XSSFBuiltinTableStyleEnum PivotStyleMedium7;
    public static XSSFBuiltinTableStyleEnum PivotStyleMedium8;
    public static XSSFBuiltinTableStyleEnum PivotStyleMedium9;
    public static XSSFBuiltinTableStyleEnum PivotStyleMedium10;
    public static XSSFBuiltinTableStyleEnum PivotStyleMedium11;
    public static XSSFBuiltinTableStyleEnum PivotStyleMedium12;
    public static XSSFBuiltinTableStyleEnum PivotStyleMedium13;
    public static XSSFBuiltinTableStyleEnum PivotStyleMedium14;
    public static XSSFBuiltinTableStyleEnum PivotStyleMedium15;
    public static XSSFBuiltinTableStyleEnum PivotStyleMedium16;
    public static XSSFBuiltinTableStyleEnum PivotStyleMedium17;
    public static XSSFBuiltinTableStyleEnum PivotStyleMedium18;
    public static XSSFBuiltinTableStyleEnum PivotStyleMedium19;
    public static XSSFBuiltinTableStyleEnum PivotStyleMedium20;
    public static XSSFBuiltinTableStyleEnum PivotStyleMedium21;
    public static XSSFBuiltinTableStyleEnum PivotStyleMedium22;
    public static XSSFBuiltinTableStyleEnum PivotStyleMedium23;
    public static XSSFBuiltinTableStyleEnum PivotStyleMedium24;
    public static XSSFBuiltinTableStyleEnum PivotStyleMedium25;
    public static XSSFBuiltinTableStyleEnum PivotStyleMedium26;
    public static XSSFBuiltinTableStyleEnum PivotStyleMedium27;
    public static XSSFBuiltinTableStyleEnum PivotStyleMedium28;
    public static XSSFBuiltinTableStyleEnum PivotStyleLight1;
    public static XSSFBuiltinTableStyleEnum PivotStyleLight2;
    public static XSSFBuiltinTableStyleEnum PivotStyleLight3;
    public static XSSFBuiltinTableStyleEnum PivotStyleLight4;
    public static XSSFBuiltinTableStyleEnum PivotStyleLight5;
    public static XSSFBuiltinTableStyleEnum PivotStyleLight6;
    public static XSSFBuiltinTableStyleEnum PivotStyleLight7;
    public static XSSFBuiltinTableStyleEnum PivotStyleLight8;
    public static XSSFBuiltinTableStyleEnum PivotStyleLight9;
    public static XSSFBuiltinTableStyleEnum PivotStyleLight10;
    public static XSSFBuiltinTableStyleEnum PivotStyleLight11;
    public static XSSFBuiltinTableStyleEnum PivotStyleLight12;
    public static XSSFBuiltinTableStyleEnum PivotStyleLight13;
    public static XSSFBuiltinTableStyleEnum PivotStyleLight14;
    public static XSSFBuiltinTableStyleEnum PivotStyleLight15;
    public static XSSFBuiltinTableStyleEnum PivotStyleLight16;
    public static XSSFBuiltinTableStyleEnum PivotStyleLight17;
    public static XSSFBuiltinTableStyleEnum PivotStyleLight18;
    public static XSSFBuiltinTableStyleEnum PivotStyleLight19;
    public static XSSFBuiltinTableStyleEnum PivotStyleLight20;
    public static XSSFBuiltinTableStyleEnum PivotStyleLight21;
    public static XSSFBuiltinTableStyleEnum PivotStyleLight22;
    public static XSSFBuiltinTableStyleEnum PivotStyleLight23;
    public static XSSFBuiltinTableStyleEnum PivotStyleLight24;
    public static XSSFBuiltinTableStyleEnum PivotStyleLight25;
    public static XSSFBuiltinTableStyleEnum PivotStyleLight26;
    public static XSSFBuiltinTableStyleEnum PivotStyleLight27;
    public static XSSFBuiltinTableStyleEnum PivotStyleLight28;
    public static XSSFBuiltinTableStyleEnum PivotStyleDark1;
    public static XSSFBuiltinTableStyleEnum PivotStyleDark2;
    public static XSSFBuiltinTableStyleEnum PivotStyleDark3;
    public static XSSFBuiltinTableStyleEnum PivotStyleDark4;
    public static XSSFBuiltinTableStyleEnum PivotStyleDark5;
    public static XSSFBuiltinTableStyleEnum PivotStyleDark6;
    public static XSSFBuiltinTableStyleEnum PivotStyleDark7;
    public static XSSFBuiltinTableStyleEnum PivotStyleDark8;
    public static XSSFBuiltinTableStyleEnum PivotStyleDark9;
    public static XSSFBuiltinTableStyleEnum PivotStyleDark10;
    public static XSSFBuiltinTableStyleEnum PivotStyleDark11;
    public static XSSFBuiltinTableStyleEnum PivotStyleDark12;
    public static XSSFBuiltinTableStyleEnum PivotStyleDark13;
    public static XSSFBuiltinTableStyleEnum PivotStyleDark14;
    public static XSSFBuiltinTableStyleEnum PivotStyleDark15;
    public static XSSFBuiltinTableStyleEnum PivotStyleDark16;
    public static XSSFBuiltinTableStyleEnum PivotStyleDark17;
    public static XSSFBuiltinTableStyleEnum PivotStyleDark18;
    public static XSSFBuiltinTableStyleEnum PivotStyleDark19;
    public static XSSFBuiltinTableStyleEnum PivotStyleDark20;
    public static XSSFBuiltinTableStyleEnum PivotStyleDark21;
    public static XSSFBuiltinTableStyleEnum PivotStyleDark22;
    public static XSSFBuiltinTableStyleEnum PivotStyleDark23;
    public static XSSFBuiltinTableStyleEnum PivotStyleDark24;
    public static XSSFBuiltinTableStyleEnum PivotStyleDark25;
    public static XSSFBuiltinTableStyleEnum PivotStyleDark26;
    public static XSSFBuiltinTableStyleEnum PivotStyleDark27;
    public static XSSFBuiltinTableStyleEnum PivotStyleDark28;
}
public class NPOI.XSSF.UserModel.XSSFCell : object {
    private static string FALSE_AS_STRING;
    private static string TRUE_AS_STRING;
    private CT_Cell _cell;
    private XSSFRow _row;
    private int _cellNum;
    private SharedStringsTable _sharedStringSource;
    private StylesTable _stylesSource;
    public ISheet Sheet { get; }
    public IRow Row { get; }
    public bool BooleanCellValue { get; }
    public double NumericCellValue { get; }
    public string StringCellValue { get; }
    public IRichTextString RichStringCellValue { get; }
    public string CellFormula { get; public set; }
    public int ColumnIndex { get; }
    public int RowIndex { get; }
    public CellAddress Address { get; }
    public ICellStyle CellStyle { get; public set; }
    private bool IsFormulaCell { get; }
    public CellType CellType { get; }
    public CellType CachedFormulaResultType { get; }
    public Nullable`1<DateTime> DateCellValue { get; }
    public Nullable`1<DateOnly> DateOnlyCellValue { get; }
    public Nullable`1<TimeOnly> TimeOnlyCellValue { get; }
    public string ErrorCellString { get; }
    public byte ErrorCellValue { get; }
    public IComment CellComment { get; public set; }
    public IHyperlink Hyperlink { get; public set; }
    public CellRangeAddress ArrayFormulaRange { get; }
    public bool IsPartOfArrayFormulaGroup { get; }
    public bool IsMergedCell { get; }
    public XSSFCell(XSSFRow row, CT_Cell cell);
    private static XSSFCell();
    public void CopyCellFrom(ICell srcCell, CellCopyPolicy policy);
    protected SharedStringsTable GetSharedStringSource();
    protected StylesTable GetStylesSource();
    public sealed virtual ISheet get_Sheet();
    public sealed virtual IRow get_Row();
    public sealed virtual bool get_BooleanCellValue();
    public sealed virtual void SetCellValue(bool value);
    public sealed virtual double get_NumericCellValue();
    public sealed virtual void SetCellValue(double value);
    public sealed virtual string get_StringCellValue();
    public sealed virtual IRichTextString get_RichStringCellValue();
    private static void CheckFormulaCachedValueType(CellType expectedTypeCode, CellType cachedValueType);
    public sealed virtual void SetCellValue(string str);
    public sealed virtual void SetCellValue(IRichTextString str);
    public sealed virtual string get_CellFormula();
    public sealed virtual void set_CellFormula(string value);
    public sealed virtual void RemoveFormula();
    protected internal string GetCellFormula(XSSFEvaluationWorkbook fpb);
    private string ConvertSharedFormula(int si, XSSFEvaluationWorkbook fpb);
    public sealed virtual void SetCellFormula(string formula);
    internal void SetCellArrayFormula(string formula, CellRangeAddress range);
    internal void TryToDeleteArrayFormula(string message);
    private void SetFormula(string formula, FormulaType formulaType);
    public sealed virtual int get_ColumnIndex();
    public sealed virtual int get_RowIndex();
    public string GetReference();
    public sealed virtual CellAddress get_Address();
    public sealed virtual ICellStyle get_CellStyle();
    public sealed virtual void set_CellStyle(ICellStyle value);
    private bool get_IsFormulaCell();
    public sealed virtual CellType get_CellType();
    public sealed virtual CellType get_CachedFormulaResultType();
    private CellType GetBaseCellType(bool blankCells);
    public sealed virtual Nullable`1<DateTime> get_DateCellValue();
    public sealed virtual Nullable`1<DateOnly> get_DateOnlyCellValue();
    public sealed virtual Nullable`1<TimeOnly> get_TimeOnlyCellValue();
    public void SetCellValue(Nullable`1<DateTime> value);
    public sealed virtual void SetCellValue(DateTime value);
    public sealed virtual void SetCellValue(DateOnly value);
    public void SetCellValue(Nullable`1<DateOnly> value);
    public string get_ErrorCellString();
    public sealed virtual byte get_ErrorCellValue();
    public sealed virtual void SetCellErrorValue(byte errorCode);
    public void SetCellErrorValue(FormulaError error);
    public sealed virtual void SetAsActiveCell();
    private void SetBlankInternal();
    public sealed virtual void SetBlank();
    internal void SetCellNum(int num);
    public sealed virtual void SetCellType(CellType cellType);
    public virtual string ToString();
    public string GetRawValue();
    private static string GetCellTypeName(CellType cellTypeCode);
    private static Exception TypeMismatch(CellType expectedTypeCode, CellType actualTypeCode, bool isFormulaCell);
    private static void CheckBounds(int cellIndex);
    public sealed virtual IComment get_CellComment();
    public sealed virtual void set_CellComment(IComment value);
    public sealed virtual void RemoveCellComment();
    public sealed virtual IHyperlink get_Hyperlink();
    public sealed virtual void set_Hyperlink(IHyperlink value);
    public sealed virtual void RemoveHyperlink();
    internal CT_Cell GetCTCell();
    private bool ConvertCellValueToBoolean();
    private string ConvertCellValueToString();
    public sealed virtual CellRangeAddress get_ArrayFormulaRange();
    public sealed virtual bool get_IsPartOfArrayFormulaGroup();
    internal void NotifyArrayFormulaChanging(string msg);
    internal void NotifyArrayFormulaChanging();
    public sealed virtual bool get_IsMergedCell();
    public sealed virtual ICell CopyCellTo(int targetIndex);
    [ObsoleteAttribute("Will be removed at NPOI 2.8, Use CachedFormulaResultType instead.")]
public sealed virtual CellType GetCachedFormulaResultTypeEnum();
}
public class NPOI.XSSF.UserModel.XSSFCellStyle : object {
    private int _cellXfId;
    private StylesTable _stylesSource;
    private CT_Xf _cellXf;
    private CT_Xf _cellStyleXf;
    private XSSFFont _font;
    private XSSFCellAlignment _cellAlignment;
    private ThemesTable _theme;
    public HorizontalAlignment Alignment { get; public set; }
    public BorderStyle BorderBottom { get; public set; }
    public BorderStyle BorderLeft { get; public set; }
    public BorderStyle BorderRight { get; public set; }
    public BorderStyle BorderTop { get; public set; }
    public short BottomBorderColor { get; public set; }
    public XSSFColor BottomBorderXSSFColor { get; }
    public short DataFormat { get; public set; }
    public short FillBackgroundColor { get; public set; }
    public IColor FillBackgroundColorColor { get; public set; }
    public XSSFColor FillBackgroundXSSFColor { get; public set; }
    public short FillForegroundColor { get; public set; }
    public IColor FillForegroundColorColor { get; public set; }
    public XSSFColor FillForegroundXSSFColor { get; public set; }
    public FillPattern FillPattern { get; public set; }
    public short FontIndex { get; }
    public bool IsHidden { get; public set; }
    public short Indention { get; public set; }
    public short Index { get; }
    protected internal int UIndex { get; }
    public short LeftBorderColor { get; public set; }
    public XSSFColor DiagonalBorderXSSFColor { get; }
    public XSSFColor LeftBorderXSSFColor { get; }
    public bool IsLocked { get; public set; }
    public bool IsQuotePrefixed { get; public set; }
    public short RightBorderColor { get; public set; }
    public XSSFColor RightBorderXSSFColor { get; }
    public short Rotation { get; public set; }
    public short TopBorderColor { get; public set; }
    public XSSFColor TopBorderXSSFColor { get; }
    public VerticalAlignment VerticalAlignment { get; public set; }
    public bool WrapText { get; public set; }
    private int FontId { get; }
    public bool ShrinkToFit { get; public set; }
    public short BorderDiagonalColor { get; public set; }
    public BorderStyle BorderDiagonalLineStyle { get; public set; }
    public BorderDiagonal BorderDiagonal { get; public set; }
    public XSSFCellStyle(int cellXfId, int cellStyleXfId, StylesTable stylesSource, ThemesTable theme);
    public XSSFCellStyle(StylesTable stylesSource);
    public CT_Xf GetCoreXf();
    public CT_Xf GetStyleXf();
    public void VerifyBelongsToStylesSource(StylesTable src);
    public sealed virtual void CloneStyleFrom(ICellStyle source);
    private void AddFill(CT_Fill fill);
    private void AddBorder(CT_Border border);
    private UInt32 FindAddBorder(CT_Border border);
    public sealed virtual HorizontalAlignment get_Alignment();
    public sealed virtual void set_Alignment(HorizontalAlignment value);
    internal HorizontalAlignment GetAlignmentEnum();
    public sealed virtual BorderStyle get_BorderBottom();
    public sealed virtual void set_BorderBottom(BorderStyle value);
    public sealed virtual BorderStyle get_BorderLeft();
    public sealed virtual void set_BorderLeft(BorderStyle value);
    public sealed virtual BorderStyle get_BorderRight();
    public sealed virtual void set_BorderRight(BorderStyle value);
    public sealed virtual BorderStyle get_BorderTop();
    public sealed virtual void set_BorderTop(BorderStyle value);
    public sealed virtual short get_BottomBorderColor();
    public sealed virtual void set_BottomBorderColor(short value);
    public XSSFColor get_BottomBorderXSSFColor();
    public sealed virtual short get_DataFormat();
    public sealed virtual void set_DataFormat(short value);
    public void SetDataFormat(int fmt);
    public sealed virtual string GetDataFormatString();
    public sealed virtual short get_FillBackgroundColor();
    public sealed virtual void set_FillBackgroundColor(short value);
    public sealed virtual IColor get_FillBackgroundColorColor();
    public void set_FillBackgroundColorColor(IColor value);
    public XSSFColor get_FillBackgroundXSSFColor();
    public void set_FillBackgroundXSSFColor(XSSFColor value);
    public sealed virtual short get_FillForegroundColor();
    public sealed virtual void set_FillForegroundColor(short value);
    public sealed virtual IColor get_FillForegroundColorColor();
    public void set_FillForegroundColorColor(IColor value);
    public XSSFColor get_FillForegroundXSSFColor();
    public void set_FillForegroundXSSFColor(XSSFColor value);
    public sealed virtual FillPattern get_FillPattern();
    public sealed virtual void set_FillPattern(FillPattern value);
    public XSSFFont GetFont();
    public sealed virtual short get_FontIndex();
    public sealed virtual bool get_IsHidden();
    public sealed virtual void set_IsHidden(bool value);
    public sealed virtual short get_Indention();
    public sealed virtual void set_Indention(short value);
    public sealed virtual short get_Index();
    protected internal int get_UIndex();
    public sealed virtual short get_LeftBorderColor();
    public sealed virtual void set_LeftBorderColor(short value);
    public XSSFColor get_DiagonalBorderXSSFColor();
    public XSSFColor get_LeftBorderXSSFColor();
    public sealed virtual bool get_IsLocked();
    public sealed virtual void set_IsLocked(bool value);
    public sealed virtual bool get_IsQuotePrefixed();
    public sealed virtual void set_IsQuotePrefixed(bool value);
    public sealed virtual short get_RightBorderColor();
    public sealed virtual void set_RightBorderColor(short value);
    public XSSFColor get_RightBorderXSSFColor();
    public sealed virtual short get_Rotation();
    public sealed virtual void set_Rotation(short value);
    public sealed virtual short get_TopBorderColor();
    public sealed virtual void set_TopBorderColor(short value);
    public XSSFColor get_TopBorderXSSFColor();
    public sealed virtual VerticalAlignment get_VerticalAlignment();
    public sealed virtual void set_VerticalAlignment(VerticalAlignment value);
    internal VerticalAlignment GetVerticalAlignmentEnum();
    public sealed virtual bool get_WrapText();
    public sealed virtual void set_WrapText(bool value);
    public void SetBottomBorderColor(XSSFColor color);
    public void SetFillBackgroundColor(XSSFColor color);
    public void SetFillForegroundColor(XSSFColor color);
    public CT_Fill GetCTFill();
    public CT_Border GetCTBorder(bool copy);
    public sealed virtual void SetFont(IFont font);
    public void SetDiagonalBorderColor(XSSFColor color);
    public void SetLeftBorderColor(XSSFColor color);
    public void SetRightBorderColor(XSSFColor color);
    public void SetTopBorderColor(XSSFColor color);
    public void SetVerticalAlignment(short align);
    public XSSFColor GetBorderColor(BorderSide side);
    public void SetBorderColor(BorderSide side, XSSFColor color);
    private int get_FontId();
    internal XSSFCellAlignment GetCellAlignment();
    internal CT_CellAlignment GetCTCellAlignment();
    public virtual int GetHashCode();
    public virtual bool Equals(object o);
    public object Clone();
    public sealed virtual IFont GetFont(IWorkbook parentWorkbook);
    public sealed virtual bool get_ShrinkToFit();
    public sealed virtual void set_ShrinkToFit(bool value);
    public sealed virtual short get_BorderDiagonalColor();
    public sealed virtual void set_BorderDiagonalColor(short value);
    public sealed virtual BorderStyle get_BorderDiagonalLineStyle();
    public sealed virtual void set_BorderDiagonalLineStyle(BorderStyle value);
    public sealed virtual BorderDiagonal get_BorderDiagonal();
    public sealed virtual void set_BorderDiagonal(BorderDiagonal value);
}
public class NPOI.XSSF.UserModel.XSSFChart : POIXMLDocumentPart {
    private XSSFGraphicFrame frame;
    private ChartSpaceDocument chartSpaceDocument;
    private CT_Chart chart;
    private List`1<IChartAxis> axis;
    public IChartDataFactory ChartDataFactory { get; }
    public IChartAxisFactory ChartAxisFactory { get; }
    public XSSFRichTextString Title { get; }
    protected XSSFChart(PackagePart part);
    [ObsoleteAttribute("deprecated in POI 3.14, scheduled for removal in POI 3.16")]
protected XSSFChart(PackagePart part, PackageRelationship rel);
    private void CreateChart();
    public CT_ChartSpace GetCTChartSpace();
    public CT_Chart GetCTChart();
    protected internal virtual void Commit();
    public XSSFGraphicFrame GetGraphicFrame();
    internal void SetGraphicFrame(XSSFGraphicFrame frame);
    public sealed virtual IChartDataFactory get_ChartDataFactory();
    public sealed virtual IChartAxisFactory get_ChartAxisFactory();
    public sealed virtual void Plot(IChartData data, IChartAxis[] axis);
    public sealed virtual IValueAxis CreateValueAxis(AxisPosition pos);
    public sealed virtual IChartAxis CreateCategoryAxis(AxisPosition pos);
    public sealed virtual IChartAxis CreateDateAxis(AxisPosition pos);
    public sealed virtual List`1<IChartAxis> GetAxis();
    public sealed virtual IManualLayout GetManualLayout();
    public bool IsPlotOnlyVisibleCells();
    public void SetPlotOnlyVisibleCells(bool plotVisOnly);
    public XSSFRichTextString get_Title();
    public sealed virtual void SetTitle(string newTitle);
    public sealed virtual IChartLegend GetOrCreateLegend();
    public sealed virtual void DeleteLegend();
    public void SetCTDispBlanksAs(CT_DispBlanksAs disp);
    private bool HasAxis();
    private void ParseAxis();
    private void ParseCategoryAxis();
    private void ParseValueAxis();
}
public class NPOI.XSSF.UserModel.XSSFChartSheet : XSSFSheet {
    private static Byte[] BLANK_WORKSHEET;
    protected CT_Chartsheet chartsheet;
    protected XSSFChartSheet(PackagePart part);
    [ObsoleteAttribute("deprecated in POI 3.14, scheduled for removal in POI 3.16")]
protected XSSFChartSheet(PackagePart part, PackageRelationship rel);
    private static XSSFChartSheet();
    internal virtual void Read(Stream is1);
    public CT_Chartsheet GetCTChartsheet();
    protected virtual CT_Drawing GetCTDrawing();
    protected virtual CT_LegacyDrawing GetCTLegacyDrawing();
    internal virtual void Write(Stream out1, bool leaveOpen);
    private static Byte[] blankWorksheet();
}
public class NPOI.XSSF.UserModel.XSSFChildAnchor : XSSFAnchor {
    private CT_Transform2D t2d;
    public int Dx1 { get; public set; }
    public int Dy1 { get; public set; }
    public int Dy2 { get; public set; }
    public int Dx2 { get; public set; }
    public XSSFChildAnchor(int x, int y, int cx, int cy);
    public XSSFChildAnchor(CT_Transform2D t2d);
    public CT_Transform2D GetCTTransform2D();
    public virtual int get_Dx1();
    public virtual void set_Dx1(int value);
    public virtual int get_Dy1();
    public virtual void set_Dy1(int value);
    public virtual int get_Dy2();
    public virtual void set_Dy2(int value);
    public virtual int get_Dx2();
    public virtual void set_Dx2(int value);
}
public class NPOI.XSSF.UserModel.XSSFChildGroupAnchor : XSSFAnchor {
    private CT_GroupTransform2D gt2d;
    public int Dx1 { get; public set; }
    public int Dy1 { get; public set; }
    public int Dy2 { get; public set; }
    public int Dx2 { get; public set; }
    public XSSFChildGroupAnchor(int x, int y, int cx, int cy);
    public XSSFChildGroupAnchor(CT_GroupTransform2D gt2d);
    public CT_GroupTransform2D GetCTTransform2D();
    public virtual int get_Dx1();
    public virtual void set_Dx1(int value);
    public virtual int get_Dy1();
    public virtual void set_Dy1(int value);
    public virtual int get_Dy2();
    public virtual void set_Dy2(int value);
    public virtual int get_Dx2();
    public virtual void set_Dx2(int value);
}
public class NPOI.XSSF.UserModel.XSSFClientAnchor : XSSFAnchor {
    private int anchorType;
    private CT_Marker cell1;
    private CT_Marker cell2;
    [CompilerGeneratedAttribute]
private int <left>k__BackingField;
    [CompilerGeneratedAttribute]
private int <top>k__BackingField;
    [CompilerGeneratedAttribute]
private int <width>k__BackingField;
    [CompilerGeneratedAttribute]
private int <height>k__BackingField;
    public int left { get; }
    public int top { get; }
    public int width { get; }
    public int height { get; }
    internal CT_Marker From { get; internal set; }
    internal CT_Marker To { get; internal set; }
    public int Dx1 { get; public set; }
    public int Dy1 { get; public set; }
    public int Dy2 { get; public set; }
    public int Dx2 { get; public set; }
    public AnchorType AnchorType { get; public set; }
    public int Col1 { get; public set; }
    public int Col2 { get; public set; }
    public int Row1 { get; public set; }
    public int Row2 { get; public set; }
    public XSSFClientAnchor(int dx1, int dy1, int dx2, int dy2, int col1, int row1, int col2, int row2);
    public XSSFClientAnchor(ISheet Sheet, int dx1, int dy1, int dx2, int dy2);
    internal XSSFClientAnchor(CT_Marker cell1, CT_Marker cell2);
    internal XSSFClientAnchor(CT_Marker cell1, CT_Marker cell2, int left, int top, int right, int bottom);
    [CompilerGeneratedAttribute]
public int get_left();
    [CompilerGeneratedAttribute]
public int get_top();
    [CompilerGeneratedAttribute]
public int get_width();
    [CompilerGeneratedAttribute]
public int get_height();
    protected long EMUtoMakerCol(ISheet Sheet, double MDW, double Colwith, int EMU, CT_Marker Mkr);
    protected long EMUtoMakerRow(ISheet Sheet, int EMU, CT_Marker Mkr);
    public virtual bool Equals(object o);
    public virtual string ToString();
    internal CT_Marker get_From();
    internal void set_From(CT_Marker value);
    internal CT_Marker get_To();
    internal void set_To(CT_Marker value);
    internal bool IsSet();
    public virtual int get_Dx1();
    public virtual void set_Dx1(int value);
    public virtual int get_Dy1();
    public virtual void set_Dy1(int value);
    public virtual int get_Dy2();
    public virtual void set_Dy2(int value);
    public virtual int get_Dx2();
    public virtual void set_Dx2(int value);
    public sealed virtual AnchorType get_AnchorType();
    public sealed virtual void set_AnchorType(AnchorType value);
    public sealed virtual int get_Col1();
    public sealed virtual void set_Col1(int value);
    public sealed virtual int get_Col2();
    public sealed virtual void set_Col2(int value);
    public sealed virtual int get_Row1();
    public sealed virtual void set_Row1(int value);
    public sealed virtual int get_Row2();
    public sealed virtual void set_Row2(int value);
}
public class NPOI.XSSF.UserModel.XSSFColor : ExtendedColor {
    private CT_Color ctColor;
    public bool IsAuto { get; public set; }
    public bool IsIndexed { get; }
    public bool IsRGB { get; }
    public bool IsThemed { get; }
    public bool HasAlpha { get; }
    public bool HasTint { get; }
    public short Index { get; }
    public short Indexed { get; public set; }
    protected Byte[] StoredRGB { get; }
    public Byte[] RGB { get; public set; }
    public Byte[] ARGB { get; }
    public int Theme { get; public set; }
    public double Tint { get; public set; }
    public XSSFColor(CT_Color color);
    public XSSFColor(Color clr);
    public XSSFColor(Rgb24 clr);
    public XSSFColor(Byte[] rgb);
    public XSSFColor(IndexedColors indexedColor);
    public virtual bool get_IsAuto();
    public virtual void set_IsAuto(bool value);
    public virtual bool get_IsIndexed();
    public virtual bool get_IsRGB();
    public virtual bool get_IsThemed();
    public bool get_HasAlpha();
    public bool get_HasTint();
    public virtual short get_Index();
    public short get_Indexed();
    public void set_Indexed(short value);
    [ObsoleteAttribute("use property RGB")]
public Byte[] GetRgb();
    protected virtual Byte[] get_StoredRGB();
    public virtual Byte[] get_RGB();
    public virtual void set_RGB(Byte[] value);
    public virtual Byte[] get_ARGB();
    [ObsoleteAttribute("use property ARGB")]
public Byte[] GetARgb();
    public Byte[] GetRgbWithTint();
    private static byte ApplyTint(int lum, double tint);
    public void SetRgb(Byte[] rgb);
    public virtual int get_Theme();
    public virtual void set_Theme(int value);
    public virtual double get_Tint();
    public virtual void set_Tint(double value);
    internal CT_Color GetCTColor();
    public static XSSFColor ToXSSFColor(IColor color);
    private bool SameIndexed(XSSFColor other);
    private bool SameARGB(XSSFColor other);
    private bool SameTheme(XSSFColor other);
    private bool SameTint(XSSFColor other);
    private bool SameAuto(XSSFColor other);
    public virtual int GetHashCode();
    public virtual bool Equals(object o);
}
public class NPOI.XSSF.UserModel.XSSFColorScaleFormatting : object {
    private CT_ColorScale _scale;
    public int NumControlPoints { get; public set; }
    public IColor[] Colors { get; public set; }
    public IConditionalFormattingThreshold[] Thresholds { get; public set; }
    public XSSFColorScaleFormatting(CT_ColorScale scale);
    public sealed virtual int get_NumControlPoints();
    public sealed virtual void set_NumControlPoints(int value);
    public sealed virtual IColor[] get_Colors();
    public sealed virtual void set_Colors(IColor[] value);
    public sealed virtual IConditionalFormattingThreshold[] get_Thresholds();
    public sealed virtual void set_Thresholds(IConditionalFormattingThreshold[] value);
    public XSSFColor CreateColor();
    public sealed virtual IConditionalFormattingThreshold CreateThreshold();
}
public class NPOI.XSSF.UserModel.XSSFComment : object {
    private CT_Comment _comment;
    private CommentsTable _comments;
    private CT_Shape _vmlShape;
    private XSSFRichTextString _str;
    public string Author { get; public set; }
    public CellAddress Address { get; public set; }
    public int Column { get; public set; }
    public int Row { get; public set; }
    public bool Visible { get; public set; }
    public IRichTextString String { get; public set; }
    public IClientAnchor ClientAnchor { get; }
    public XSSFComment(CommentsTable comments, CT_Comment comment, CT_Shape vmlShape);
    public sealed virtual string get_Author();
    public sealed virtual void set_Author(string value);
    public sealed virtual CellAddress get_Address();
    public sealed virtual void set_Address(CellAddress value);
    public sealed virtual void SetAddress(int row, int col);
    public sealed virtual int get_Column();
    public sealed virtual void set_Column(int value);
    public sealed virtual int get_Row();
    public sealed virtual void set_Row(int value);
    public sealed virtual bool get_Visible();
    public sealed virtual void set_Visible(bool value);
    public sealed virtual IRichTextString get_String();
    public sealed virtual void set_String(IRichTextString value);
    public void SetString(string str);
    public sealed virtual IClientAnchor get_ClientAnchor();
    internal CT_Comment GetCTComment();
    internal CT_Shape GetCTShape();
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
}
public class NPOI.XSSF.UserModel.XSSFConditionalFormatting : object {
    private CT_ConditionalFormatting _cf;
    private XSSFSheet _sh;
    public int NumberOfRules { get; }
    internal XSSFConditionalFormatting(XSSFSheet sh);
    internal XSSFConditionalFormatting(XSSFSheet sh, CT_ConditionalFormatting cf);
    internal CT_ConditionalFormatting GetCTConditionalFormatting();
    public sealed virtual CellRangeAddress[] GetFormattingRanges();
    public sealed virtual void SetFormattingRanges(CellRangeAddress[] ranges);
    public sealed virtual void SetRule(int idx, IConditionalFormattingRule cfRule);
    public sealed virtual void AddRule(IConditionalFormattingRule cfRule);
    public sealed virtual IConditionalFormattingRule GetRule(int idx);
    public sealed virtual int get_NumberOfRules();
    public virtual string ToString();
}
public class NPOI.XSSF.UserModel.XSSFConditionalFormattingRule : object {
    private CT_CfRule _cfRule;
    private XSSFSheet _sh;
    private static Dictionary`2<ST_CfType, ConditionType> typeLookup;
    private static Dictionary`2<ST_CfType, ConditionFilterType> filterTypeLookup;
    public IBorderFormatting BorderFormatting { get; }
    public IFontFormatting FontFormatting { get; }
    public IPatternFormatting PatternFormatting { get; }
    public IDataBarFormatting DataBarFormatting { get; }
    public IIconMultiStateFormatting MultiStateFormatting { get; }
    public IColorScaleFormatting ColorScaleFormatting { get; }
    public ConditionType ConditionType { get; }
    public ComparisonOperator ComparisonOperation { get; }
    public string Formula1 { get; }
    public string Formula2 { get; }
    public bool StopIfTrue { get; }
    public string Text { get; }
    public int Priority { get; }
    public ExcelNumberFormat NumberFormat { get; }
    public Nullable`1<ConditionFilterType> ConditionFilterType { get; }
    public IConditionFilterData FilterConfiguration { get; }
    private static XSSFConditionalFormattingRule();
    public XSSFConditionalFormattingRule(XSSFSheet sh);
    internal XSSFConditionalFormattingRule(XSSFSheet sh, CT_CfRule cfRule);
    internal CT_CfRule GetCTCfRule();
    internal CT_Dxf GetDxf(bool create);
    public sealed virtual IBorderFormatting CreateBorderFormatting();
    public sealed virtual IBorderFormatting get_BorderFormatting();
    public sealed virtual IFontFormatting CreateFontFormatting();
    public sealed virtual IFontFormatting get_FontFormatting();
    public sealed virtual IPatternFormatting CreatePatternFormatting();
    public sealed virtual IPatternFormatting get_PatternFormatting();
    public XSSFDataBarFormatting CreateDataBarFormatting(XSSFColor color);
    public sealed virtual IDataBarFormatting get_DataBarFormatting();
    public XSSFIconMultiStateFormatting CreateMultiStateFormatting(IconSet iconSet);
    public sealed virtual IIconMultiStateFormatting get_MultiStateFormatting();
    public XSSFColorScaleFormatting CreateColorScaleFormatting();
    public sealed virtual IColorScaleFormatting get_ColorScaleFormatting();
    public sealed virtual ConditionType get_ConditionType();
    public sealed virtual ComparisonOperator get_ComparisonOperation();
    public sealed virtual string get_Formula1();
    public sealed virtual string get_Formula2();
    public sealed virtual bool get_StopIfTrue();
    public sealed virtual string get_Text();
    public sealed virtual int get_Priority();
    public sealed virtual ExcelNumberFormat get_NumberFormat();
    public sealed virtual Nullable`1<ConditionFilterType> get_ConditionFilterType();
    public sealed virtual IConditionFilterData get_FilterConfiguration();
}
public class NPOI.XSSF.UserModel.XSSFConditionalFormattingThreshold : object {
    private CT_Cfvo cfvo;
    protected internal CT_Cfvo CTCfvo { get; }
    public RangeType RangeType { get; public set; }
    public string Formula { get; public set; }
    public Nullable`1<double> Value { get; public set; }
    protected internal XSSFConditionalFormattingThreshold(CT_Cfvo cfvo);
    protected internal CT_Cfvo get_CTCfvo();
    public sealed virtual RangeType get_RangeType();
    public sealed virtual void set_RangeType(RangeType value);
    public sealed virtual string get_Formula();
    public sealed virtual void set_Formula(string value);
    public sealed virtual Nullable`1<double> get_Value();
    public sealed virtual void set_Value(Nullable`1<double> value);
}
public class NPOI.XSSF.UserModel.XSSFConnector : XSSFShape {
    private static CT_Connector prototype;
    private CT_Connector ctShape;
    public ST_ShapeType ShapeType { get; public set; }
    public UInt32 ID { get; }
    public string Name { get; public set; }
    public XSSFConnector(XSSFDrawing drawing, CT_Connector ctShape);
    public static CT_Connector Prototype();
    public CT_Connector GetCTConnector();
    public ST_ShapeType get_ShapeType();
    public void set_ShapeType(ST_ShapeType value);
    public virtual UInt32 get_ID();
    public virtual string get_Name();
    public virtual void set_Name(string value);
    protected internal virtual CT_ShapeProperties GetShapeProperties();
}
public class NPOI.XSSF.UserModel.XSSFCreationHelper : object {
    private XSSFWorkbook workbook;
    public XSSFCreationHelper(XSSFWorkbook wb);
    public sealed virtual IRichTextString CreateRichTextString(string text);
    public sealed virtual IDataFormat CreateDataFormat();
    public sealed virtual IHyperlink CreateHyperlink(HyperlinkType type);
    public sealed virtual IFormulaEvaluator CreateFormulaEvaluator();
    public sealed virtual IClientAnchor CreateClientAnchor();
    public sealed virtual ExtendedColor CreateExtendedColor();
}
public class NPOI.XSSF.UserModel.XSSFDataBarFormatting : object {
    private CT_DataBar _databar;
    public bool IsIconOnly { get; public set; }
    public bool IsLeftToRight { get; public set; }
    public int WidthMin { get; public set; }
    public int WidthMax { get; public set; }
    public IColor Color { get; public set; }
    public IConditionalFormattingThreshold MinThreshold { get; }
    public IConditionalFormattingThreshold MaxThreshold { get; }
    public XSSFDataBarFormatting(CT_DataBar databar);
    public sealed virtual bool get_IsIconOnly();
    public sealed virtual void set_IsIconOnly(bool value);
    public sealed virtual bool get_IsLeftToRight();
    public sealed virtual void set_IsLeftToRight(bool value);
    public sealed virtual int get_WidthMin();
    public sealed virtual void set_WidthMin(int value);
    public sealed virtual int get_WidthMax();
    public sealed virtual void set_WidthMax(int value);
    public sealed virtual IColor get_Color();
    public sealed virtual void set_Color(IColor value);
    public sealed virtual IConditionalFormattingThreshold get_MinThreshold();
    public sealed virtual IConditionalFormattingThreshold get_MaxThreshold();
    public XSSFConditionalFormattingThreshold CreateThreshold();
}
public class NPOI.XSSF.UserModel.XSSFDataFormat : object {
    private StylesTable stylesSource;
    public XSSFDataFormat(StylesTable stylesSource);
    public sealed virtual short GetFormat(string format);
    public sealed virtual string GetFormat(short index);
    [ObsoleteAttribute("use GetFormat(short) instead, schedule to remove NPOI 2.8")]
public string GetFormat(int index);
    public void PutFormat(short index, string format);
}
public class NPOI.XSSF.UserModel.XSSFDataValidation : object {
    private static int MAX_TEXT_LENGTH;
    private CT_DataValidation ctDdataValidation;
    private XSSFDataValidationConstraint validationConstraint;
    private CellRangeAddressList regions;
    internal static Dictionary`2<int, ST_DataValidationOperator> operatorTypeMappings;
    internal static Dictionary`2<ST_DataValidationOperator, int> operatorTypeReverseMappings;
    internal static Dictionary`2<int, ST_DataValidationType> validationTypeMappings;
    internal static Dictionary`2<ST_DataValidationType, int> validationTypeReverseMappings;
    internal static Dictionary`2<int, ST_DataValidationErrorStyle> errorStyleMappings;
    public bool EmptyCellAllowed { get; public set; }
    public string ErrorBoxText { get; }
    public string ErrorBoxTitle { get; }
    public int ErrorStyle { get; public set; }
    public string PromptBoxText { get; }
    public string PromptBoxTitle { get; }
    public bool ShowErrorBox { get; public set; }
    public bool ShowPromptBox { get; public set; }
    public bool SuppressDropDownArrow { get; public set; }
    public IDataValidationConstraint ValidationConstraint { get; }
    public CellRangeAddressList Regions { get; }
    private static XSSFDataValidation();
    public XSSFDataValidation(CellRangeAddressList regions, CT_DataValidation ctDataValidation);
    public XSSFDataValidation(XSSFDataValidationConstraint constraint, CellRangeAddressList regions, CT_DataValidation ctDataValidation);
    internal CT_DataValidation GetCTDataValidation();
    public sealed virtual void CreateErrorBox(string title, string text);
    public sealed virtual void CreatePromptBox(string title, string text);
    private string EncodeUtf(string text);
    public sealed virtual bool get_EmptyCellAllowed();
    public sealed virtual void set_EmptyCellAllowed(bool value);
    public sealed virtual string get_ErrorBoxText();
    public sealed virtual string get_ErrorBoxTitle();
    public sealed virtual int get_ErrorStyle();
    public sealed virtual void set_ErrorStyle(int value);
    public sealed virtual string get_PromptBoxText();
    public sealed virtual string get_PromptBoxTitle();
    public sealed virtual bool get_ShowErrorBox();
    public sealed virtual void set_ShowErrorBox(bool value);
    public sealed virtual bool get_ShowPromptBox();
    public sealed virtual void set_ShowPromptBox(bool value);
    public sealed virtual bool get_SuppressDropDownArrow();
    public sealed virtual void set_SuppressDropDownArrow(bool value);
    public sealed virtual IDataValidationConstraint get_ValidationConstraint();
    public sealed virtual CellRangeAddressList get_Regions();
    public string PrettyPrint();
    private static XSSFDataValidationConstraint GetConstraint(CT_DataValidation ctDataValidation);
}
public class NPOI.XSSF.UserModel.XSSFDataValidationConstraint : object {
    private static string LIST_SEPARATOR;
    private static Regex LIST_SPLIT_REGEX;
    private static string QUOTE;
    private string formula1;
    private string formula2;
    private int validationType;
    private int operator1;
    private String[] explicitListOfValues;
    public String[] ExplicitListValues { get; public set; }
    public string Formula1 { get; public set; }
    public string Formula2 { get; public set; }
    public int Operator { get; public set; }
    public XSSFDataValidationConstraint(String[] explicitListOfValues);
    public XSSFDataValidationConstraint(int validationType, string formula1);
    public XSSFDataValidationConstraint(int validationType, int operator1, string formula1);
    public XSSFDataValidationConstraint(int validationType, int operator1, string formula1, string formula2);
    private static XSSFDataValidationConstraint();
    public sealed virtual String[] get_ExplicitListValues();
    public sealed virtual void set_ExplicitListValues(String[] value);
    public sealed virtual string get_Formula1();
    public sealed virtual void set_Formula1(string value);
    public sealed virtual string get_Formula2();
    public sealed virtual void set_Formula2(string value);
    public sealed virtual int get_Operator();
    public sealed virtual void set_Operator(int value);
    public sealed virtual int GetValidationType();
    protected static string RemoveLeadingEquals(string formula1);
    private static bool IsQuoted(string s);
    private static string Unquote(string s);
    protected static bool IsFormulaEmpty(string formula1);
    public void Validate();
    public string PrettyPrint();
}
public class NPOI.XSSF.UserModel.XSSFDataValidationHelper : object {
    public XSSFDataValidationHelper(XSSFSheet xssfSheet);
    public sealed virtual IDataValidationConstraint CreateDateConstraint(int operatorType, string formula1, string formula2, string dateFormat);
    public sealed virtual IDataValidationConstraint CreateDecimalConstraint(int operatorType, string formula1, string formula2);
    public sealed virtual IDataValidationConstraint CreateExplicitListConstraint(String[] listOfValues);
    public sealed virtual IDataValidationConstraint CreateFormulaListConstraint(string listFormula);
    public sealed virtual IDataValidationConstraint CreateNumericConstraint(int validationType, int operatorType, string formula1, string formula2);
    public sealed virtual IDataValidationConstraint CreateintConstraint(int operatorType, string formula1, string formula2);
    public sealed virtual IDataValidationConstraint CreateTextLengthConstraint(int operatorType, string formula1, string formula2);
    public sealed virtual IDataValidationConstraint CreateTimeConstraint(int operatorType, string formula1, string formula2);
    public sealed virtual IDataValidationConstraint CreateCustomConstraint(string formula);
    public sealed virtual IDataValidation CreateValidation(IDataValidationConstraint constraint, CellRangeAddressList cellRangeAddressList);
}
public class NPOI.XSSF.UserModel.XSSFDialogsheet : XSSFSheet {
    protected CT_Dialogsheet dialogsheet;
    private int NPOI.SS.UserModel.ISheet.PhysicalNumberOfRows { get; }
    private int NPOI.SS.UserModel.ISheet.FirstRowNum { get; }
    private int NPOI.SS.UserModel.ISheet.LastRowNum { get; }
    private bool NPOI.SS.UserModel.ISheet.ForceFormulaRecalculation { get; private set; }
    private double NPOI.SS.UserModel.ISheet.DefaultColumnWidth { get; private set; }
    private short NPOI.SS.UserModel.ISheet.DefaultRowHeight { get; private set; }
    private float NPOI.SS.UserModel.ISheet.DefaultRowHeightInPoints { get; private set; }
    private bool NPOI.SS.UserModel.ISheet.HorizontallyCenter { get; private set; }
    private bool NPOI.SS.UserModel.ISheet.VerticallyCenter { get; private set; }
    private int NPOI.SS.UserModel.ISheet.NumMergedRegions { get; }
    private bool NPOI.SS.UserModel.ISheet.DisplayZeros { get; private set; }
    private bool NPOI.SS.UserModel.ISheet.Autobreaks { get; private set; }
    private bool NPOI.SS.UserModel.ISheet.DisplayGuts { get; private set; }
    private bool NPOI.SS.UserModel.ISheet.FitToPage { get; private set; }
    private bool NPOI.SS.UserModel.ISheet.RowSumsBelow { get; private set; }
    private bool NPOI.SS.UserModel.ISheet.RowSumsRight { get; private set; }
    private bool NPOI.SS.UserModel.ISheet.IsPrintGridlines { get; private set; }
    private IPrintSetup NPOI.SS.UserModel.ISheet.PrintSetup { get; }
    private IHeader NPOI.SS.UserModel.ISheet.Header { get; }
    private IFooter NPOI.SS.UserModel.ISheet.Footer { get; }
    private bool NPOI.SS.UserModel.ISheet.Protect { get; }
    private bool NPOI.SS.UserModel.ISheet.ScenarioProtect { get; }
    private short NPOI.SS.UserModel.ISheet.TabColorIndex { get; private set; }
    private IDrawing NPOI.SS.UserModel.ISheet.DrawingPatriarch { get; }
    private short NPOI.SS.UserModel.ISheet.TopRow { get; private set; }
    private short NPOI.SS.UserModel.ISheet.LeftCol { get; private set; }
    private PaneInformation NPOI.SS.UserModel.ISheet.PaneInformation { get; }
    private bool NPOI.SS.UserModel.ISheet.DisplayGridlines { get; private set; }
    private bool NPOI.SS.UserModel.ISheet.DisplayFormulas { get; private set; }
    private bool NPOI.SS.UserModel.ISheet.DisplayRowColHeadings { get; private set; }
    private bool NPOI.SS.UserModel.ISheet.IsActive { get; private set; }
    private Int32[] NPOI.SS.UserModel.ISheet.RowBreaks { get; }
    private Int32[] NPOI.SS.UserModel.ISheet.ColumnBreaks { get; }
    private IWorkbook NPOI.SS.UserModel.ISheet.Workbook { get; }
    private string NPOI.SS.UserModel.ISheet.SheetName { get; }
    private bool NPOI.SS.UserModel.ISheet.IsSelected { get; private set; }
    private ISheetConditionalFormatting NPOI.SS.UserModel.ISheet.SheetConditionalFormatting { get; }
    private bool IsRightToLeft { get; private set; }
    public XSSFDialogsheet(XSSFSheet sheet, PackageRelationship rel);
    public virtual IRow CreateRow(int rowNum);
    protected CT_HeaderFooter GetSheetTypeHeaderFooter();
    protected CT_SheetPr GetSheetTypeSheetPr();
    protected CT_PageBreak GetSheetTypeColumnBreaks();
    protected CT_SheetFormatPr GetSheetTypeSheetFormatPr();
    protected CT_PageMargins GetSheetTypePageMargins();
    protected CT_PageBreak GetSheetTypeRowBreaks();
    protected CT_SheetViews GetSheetTypeSheetViews();
    protected CT_PrintOptions GetSheetTypePrintOptions();
    protected CT_SheetProtection GetSheetTypeProtection();
    public bool GetDialog();
    private sealed virtual override IRow NPOI.SS.UserModel.ISheet.CreateRow(int rownum);
    private sealed virtual override void NPOI.SS.UserModel.ISheet.RemoveRow(IRow row);
    private sealed virtual override IRow NPOI.SS.UserModel.ISheet.GetRow(int rownum);
    private sealed virtual override int NPOI.SS.UserModel.ISheet.get_PhysicalNumberOfRows();
    private sealed virtual override int NPOI.SS.UserModel.ISheet.get_FirstRowNum();
    private sealed virtual override int NPOI.SS.UserModel.ISheet.get_LastRowNum();
    private sealed virtual override bool NPOI.SS.UserModel.ISheet.get_ForceFormulaRecalculation();
    private sealed virtual override void NPOI.SS.UserModel.ISheet.set_ForceFormulaRecalculation(bool value);
    private sealed virtual override void NPOI.SS.UserModel.ISheet.SetColumnHidden(int columnIndex, bool hidden);
    private sealed virtual override bool NPOI.SS.UserModel.ISheet.IsColumnHidden(int columnIndex);
    private sealed virtual override void NPOI.SS.UserModel.ISheet.SetColumnWidth(int columnIndex, double width);
    private sealed virtual override double NPOI.SS.UserModel.ISheet.GetColumnWidth(int columnIndex);
    private sealed virtual override double NPOI.SS.UserModel.ISheet.get_DefaultColumnWidth();
    private sealed virtual override void NPOI.SS.UserModel.ISheet.set_DefaultColumnWidth(double value);
    private sealed virtual override short NPOI.SS.UserModel.ISheet.get_DefaultRowHeight();
    private sealed virtual override void NPOI.SS.UserModel.ISheet.set_DefaultRowHeight(short value);
    private sealed virtual override float NPOI.SS.UserModel.ISheet.get_DefaultRowHeightInPoints();
    private sealed virtual override void NPOI.SS.UserModel.ISheet.set_DefaultRowHeightInPoints(float value);
    private sealed virtual override ICellStyle NPOI.SS.UserModel.ISheet.GetColumnStyle(int column);
    private sealed virtual override int NPOI.SS.UserModel.ISheet.AddMergedRegion(CellRangeAddress region);
    private sealed virtual override bool NPOI.SS.UserModel.ISheet.get_HorizontallyCenter();
    private sealed virtual override void NPOI.SS.UserModel.ISheet.set_HorizontallyCenter(bool value);
    private sealed virtual override bool NPOI.SS.UserModel.ISheet.get_VerticallyCenter();
    private sealed virtual override void NPOI.SS.UserModel.ISheet.set_VerticallyCenter(bool value);
    private sealed virtual override void NPOI.SS.UserModel.ISheet.RemoveMergedRegion(int index);
    private sealed virtual override int NPOI.SS.UserModel.ISheet.get_NumMergedRegions();
    private sealed virtual override CellRangeAddress NPOI.SS.UserModel.ISheet.GetMergedRegion(int index);
    private sealed virtual override IEnumerator NPOI.SS.UserModel.ISheet.GetRowEnumerator();
    private sealed virtual override bool NPOI.SS.UserModel.ISheet.get_DisplayZeros();
    private sealed virtual override void NPOI.SS.UserModel.ISheet.set_DisplayZeros(bool value);
    private sealed virtual override bool NPOI.SS.UserModel.ISheet.get_Autobreaks();
    private sealed virtual override void NPOI.SS.UserModel.ISheet.set_Autobreaks(bool value);
    private sealed virtual override bool NPOI.SS.UserModel.ISheet.get_DisplayGuts();
    private sealed virtual override void NPOI.SS.UserModel.ISheet.set_DisplayGuts(bool value);
    private sealed virtual override bool NPOI.SS.UserModel.ISheet.get_FitToPage();
    private sealed virtual override void NPOI.SS.UserModel.ISheet.set_FitToPage(bool value);
    private sealed virtual override bool NPOI.SS.UserModel.ISheet.get_RowSumsBelow();
    private sealed virtual override void NPOI.SS.UserModel.ISheet.set_RowSumsBelow(bool value);
    private sealed virtual override bool NPOI.SS.UserModel.ISheet.get_RowSumsRight();
    private sealed virtual override void NPOI.SS.UserModel.ISheet.set_RowSumsRight(bool value);
    private sealed virtual override bool NPOI.SS.UserModel.ISheet.get_IsPrintGridlines();
    private sealed virtual override void NPOI.SS.UserModel.ISheet.set_IsPrintGridlines(bool value);
    private sealed virtual override IPrintSetup NPOI.SS.UserModel.ISheet.get_PrintSetup();
    private sealed virtual override IHeader NPOI.SS.UserModel.ISheet.get_Header();
    private sealed virtual override IFooter NPOI.SS.UserModel.ISheet.get_Footer();
    private sealed virtual override double NPOI.SS.UserModel.ISheet.GetMargin(MarginType margin);
    private sealed virtual override void NPOI.SS.UserModel.ISheet.SetMargin(MarginType margin, double size);
    private sealed virtual override bool NPOI.SS.UserModel.ISheet.get_Protect();
    private sealed virtual override void NPOI.SS.UserModel.ISheet.ProtectSheet(string password);
    private sealed virtual override bool NPOI.SS.UserModel.ISheet.get_ScenarioProtect();
    private sealed virtual override short NPOI.SS.UserModel.ISheet.get_TabColorIndex();
    private sealed virtual override void NPOI.SS.UserModel.ISheet.set_TabColorIndex(short value);
    private sealed virtual override IDrawing NPOI.SS.UserModel.ISheet.get_DrawingPatriarch();
    private sealed virtual override void NPOI.SS.UserModel.ISheet.SetZoom(int numerator, int denominator);
    private sealed virtual override short NPOI.SS.UserModel.ISheet.get_TopRow();
    private sealed virtual override void NPOI.SS.UserModel.ISheet.set_TopRow(short value);
    private sealed virtual override short NPOI.SS.UserModel.ISheet.get_LeftCol();
    private sealed virtual override void NPOI.SS.UserModel.ISheet.set_LeftCol(short value);
    private sealed virtual override void NPOI.SS.UserModel.ISheet.ShiftRows(int startRow, int endRow, int n);
    private sealed virtual override void NPOI.SS.UserModel.ISheet.ShiftRows(int startRow, int endRow, int n, bool copyRowHeight, bool resetOriginalRowHeight);
    private sealed virtual override void NPOI.SS.UserModel.ISheet.CreateFreezePane(int colSplit, int rowSplit, int leftmostColumn, int topRow);
    private sealed virtual override void NPOI.SS.UserModel.ISheet.CreateFreezePane(int colSplit, int rowSplit);
    private sealed virtual override void NPOI.SS.UserModel.ISheet.CreateSplitPane(int xSplitPos, int ySplitPos, int leftmostColumn, int topRow, PanePosition activePane);
    private sealed virtual override PaneInformation NPOI.SS.UserModel.ISheet.get_PaneInformation();
    private sealed virtual override bool NPOI.SS.UserModel.ISheet.get_DisplayGridlines();
    private sealed virtual override void NPOI.SS.UserModel.ISheet.set_DisplayGridlines(bool value);
    private sealed virtual override bool NPOI.SS.UserModel.ISheet.get_DisplayFormulas();
    private sealed virtual override void NPOI.SS.UserModel.ISheet.set_DisplayFormulas(bool value);
    private sealed virtual override bool NPOI.SS.UserModel.ISheet.get_DisplayRowColHeadings();
    private sealed virtual override void NPOI.SS.UserModel.ISheet.set_DisplayRowColHeadings(bool value);
    private sealed virtual override bool NPOI.SS.UserModel.ISheet.get_IsActive();
    private sealed virtual override void NPOI.SS.UserModel.ISheet.set_IsActive(bool value);
    private sealed virtual override bool NPOI.SS.UserModel.ISheet.IsRowBroken(int row);
    private sealed virtual override void NPOI.SS.UserModel.ISheet.RemoveRowBreak(int row);
    private sealed virtual override Int32[] NPOI.SS.UserModel.ISheet.get_RowBreaks();
    private sealed virtual override Int32[] NPOI.SS.UserModel.ISheet.get_ColumnBreaks();
    private sealed virtual override void NPOI.SS.UserModel.ISheet.SetActiveCellRange(int firstRow, int lastRow, int firstColumn, int lastColumn);
    private sealed virtual override void NPOI.SS.UserModel.ISheet.SetActiveCellRange(List`1<CellRangeAddress8Bit> cellranges, int activeRange, int activeRow, int activeColumn);
    private sealed virtual override void NPOI.SS.UserModel.ISheet.SetColumnBreak(int column);
    private sealed virtual override void NPOI.SS.UserModel.ISheet.SetRowBreak(int row);
    private sealed virtual override bool NPOI.SS.UserModel.ISheet.IsColumnBroken(int column);
    private sealed virtual override void NPOI.SS.UserModel.ISheet.RemoveColumnBreak(int column);
    private sealed virtual override void NPOI.SS.UserModel.ISheet.SetColumnGroupCollapsed(int columnNumber, bool collapsed);
    private sealed virtual override void NPOI.SS.UserModel.ISheet.GroupColumn(int fromColumn, int toColumn);
    private sealed virtual override void NPOI.SS.UserModel.ISheet.UngroupColumn(int fromColumn, int toColumn);
    private sealed virtual override void NPOI.SS.UserModel.ISheet.GroupRow(int fromRow, int toRow);
    private sealed virtual override void NPOI.SS.UserModel.ISheet.UngroupRow(int fromRow, int toRow);
    private sealed virtual override void NPOI.SS.UserModel.ISheet.SetRowGroupCollapsed(int row, bool collapse);
    private sealed virtual override void NPOI.SS.UserModel.ISheet.SetDefaultColumnStyle(int column, ICellStyle style);
    private sealed virtual override void NPOI.SS.UserModel.ISheet.AutoSizeColumn(int column);
    private sealed virtual override void NPOI.SS.UserModel.ISheet.AutoSizeColumn(int column, bool useMergedCells);
    private sealed virtual override IComment NPOI.SS.UserModel.ISheet.GetCellComment(int row, int column);
    private sealed virtual override IDrawing NPOI.SS.UserModel.ISheet.CreateDrawingPatriarch();
    private sealed virtual override IWorkbook NPOI.SS.UserModel.ISheet.get_Workbook();
    private sealed virtual override string NPOI.SS.UserModel.ISheet.get_SheetName();
    private sealed virtual override bool NPOI.SS.UserModel.ISheet.get_IsSelected();
    private sealed virtual override void NPOI.SS.UserModel.ISheet.set_IsSelected(bool value);
    private sealed virtual override void NPOI.SS.UserModel.ISheet.SetActive(bool sel);
    private sealed virtual override ICellRange`1<ICell> NPOI.SS.UserModel.ISheet.SetArrayFormula(string formula, CellRangeAddress range);
    private sealed virtual override ICellRange`1<ICell> NPOI.SS.UserModel.ISheet.RemoveArrayFormula(ICell cell);
    private sealed virtual override bool NPOI.SS.UserModel.ISheet.IsMergedRegion(CellRangeAddress mergedRegion);
    private sealed virtual override IDataValidationHelper NPOI.SS.UserModel.ISheet.GetDataValidationHelper();
    private sealed virtual override void NPOI.SS.UserModel.ISheet.AddValidationData(IDataValidation dataValidation);
    private sealed virtual override IAutoFilter NPOI.SS.UserModel.ISheet.SetAutoFilter(CellRangeAddress range);
    private sealed virtual override ISheetConditionalFormatting NPOI.SS.UserModel.ISheet.get_SheetConditionalFormatting();
    private bool get_IsRightToLeft();
    private void set_IsRightToLeft(bool value);
}
public class NPOI.XSSF.UserModel.XSSFDrawing : POIXMLDocumentPart {
    public static string NAMESPACE_A;
    public static string NAMESPACE_C;
    private CT_Drawing drawing;
    private long numOfGraphicFrames;
    internal XSSFDrawing(PackagePart part);
    [ObsoleteAttribute("deprecated in POI 3.14, scheduled for removal in POI 3.16")]
public XSSFDrawing(PackagePart part, PackageRelationship rel);
    private static XSSFDrawing();
    private static CT_Drawing NewDrawing();
    public CT_Drawing GetCTDrawing();
    protected internal virtual void Commit();
    public sealed virtual IClientAnchor CreateAnchor(int dx1, int dy1, int dx2, int dy2, int col1, int row1, int col2, int row2);
    public XSSFTextBox CreateTextbox(IClientAnchor anchor);
    public IPicture CreatePicture(XSSFClientAnchor anchor, int pictureIndex);
    public sealed virtual IPicture CreatePicture(IClientAnchor anchor, int pictureIndex);
    public sealed virtual IChart CreateChart(IClientAnchor anchor);
    public void RemoveChart(XSSFChart chart);
    private int GetNewChartNumber();
    internal PackageRelationship AddPictureReference(int pictureIndex);
    public XSSFSimpleShape CreateSimpleShape(XSSFClientAnchor anchor);
    public XSSFConnector CreateConnector(XSSFClientAnchor anchor);
    public XSSFFreeform CreateFreeform(ISheet Sheet, BuildFreeForm BFF);
    public XSSFShapeGroup CreateGroup(XSSFClientAnchor anchor);
    public sealed virtual IComment CreateCellComment(IClientAnchor anchor);
    private XSSFGraphicFrame CreateGraphicFrame(XSSFClientAnchor anchor);
    public List`1<XSSFChart> GetCharts();
    private CT_TwoCellAnchor CreateTwoCellAnchor(IClientAnchor anchor);
    private long newShapeId();
    public bool ContainsChart();
    public List`1<XSSFShape> GetShapes();
    private XSSFAnchor GetAnchorFromIEGAnchor(IEG_Anchor ctAnchor);
    private XSSFAnchor GetAnchorFromParent(XmlNode obj);
}
public class NPOI.XSSF.UserModel.XSSFEvaluationCell : object {
    private IEvaluationSheet _evalSheet;
    private XSSFCell _cell;
    public object IdentityKey { get; }
    public bool BooleanCellValue { get; }
    public CellType CellType { get; }
    public int ColumnIndex { get; }
    public int ErrorCellValue { get; }
    public double NumericCellValue { get; }
    public int RowIndex { get; }
    public IEvaluationSheet Sheet { get; }
    public string StringCellValue { get; }
    public bool IsPartOfArrayFormulaGroup { get; }
    public CellRangeAddress ArrayFormulaRange { get; }
    public CellType CachedFormulaResultType { get; }
    public XSSFEvaluationCell(ICell cell, XSSFEvaluationSheet EvaluationSheet);
    public XSSFEvaluationCell(ICell cell);
    public sealed virtual object get_IdentityKey();
    public XSSFCell GetXSSFCell();
    public virtual bool get_BooleanCellValue();
    public virtual CellType get_CellType();
    public virtual int get_ColumnIndex();
    public virtual int get_ErrorCellValue();
    public virtual double get_NumericCellValue();
    public virtual int get_RowIndex();
    public virtual IEvaluationSheet get_Sheet();
    public virtual string get_StringCellValue();
    public sealed virtual bool get_IsPartOfArrayFormulaGroup();
    public sealed virtual CellRangeAddress get_ArrayFormulaRange();
    public virtual CellType get_CachedFormulaResultType();
}
public class NPOI.XSSF.UserModel.XSSFEvaluationSheet : object {
    private XSSFSheet _xs;
    private Dictionary`2<CellKey, IEvaluationCell> _cellCache;
    public XSSFSheet XSSFSheet { get; }
    public XSSFEvaluationSheet(ISheet sheet);
    public sealed virtual void ClearAllCachedResultValues();
    public XSSFSheet get_XSSFSheet();
    public sealed virtual IEvaluationCell GetCell(int rowIndex, int columnIndex);
}
public class NPOI.XSSF.UserModel.XSSFEvaluationWorkbook : BaseXSSFEvaluationWorkbook {
    private XSSFEvaluationSheet[] _sheetCache;
    protected XSSFEvaluationWorkbook(XSSFWorkbook book);
    public static XSSFEvaluationWorkbook Create(IWorkbook book);
    public virtual void ClearAllCachedResultValues();
    public virtual int GetSheetIndex(IEvaluationSheet evalSheet);
    public virtual IEvaluationSheet GetSheet(int sheetIndex);
    public virtual Ptg[] GetFormulaTokens(IEvaluationCell evalCell);
}
public class NPOI.XSSF.UserModel.XSSFEvenFooter : XSSFHeaderFooter {
    public string Text { get; public set; }
    public XSSFEvenFooter(CT_HeaderFooter headerFooter);
    public virtual string get_Text();
    public virtual void set_Text(string value);
}
public class NPOI.XSSF.UserModel.XSSFEvenHeader : XSSFHeaderFooter {
    public string Text { get; public set; }
    public XSSFEvenHeader(CT_HeaderFooter headerFooter);
    public virtual string get_Text();
    public virtual void set_Text(string value);
}
public class NPOI.XSSF.UserModel.XSSFFactory : POIXMLFactory {
    private static XSSFFactory inst;
    private static XSSFFactory();
    public static XSSFFactory GetInstance();
    protected virtual POIXMLRelation GetDescriptor(string relationshipType);
    protected virtual POIXMLDocumentPart CreateDocumentPart(Type cls, Type[] classes, Object[] values);
}
public class NPOI.XSSF.UserModel.XSSFFirstFooter : XSSFHeaderFooter {
    public string Text { get; public set; }
    public XSSFFirstFooter(CT_HeaderFooter headerFooter);
    public virtual string get_Text();
    public virtual void set_Text(string value);
}
public class NPOI.XSSF.UserModel.XSSFFirstHeader : XSSFHeaderFooter {
    public string Text { get; public set; }
    public XSSFFirstHeader(CT_HeaderFooter headerFooter);
    public virtual string get_Text();
    public virtual void set_Text(string value);
}
public class NPOI.XSSF.UserModel.XSSFFont : object {
    public static string DEFAULT_FONT_NAME;
    public static short DEFAULT_FONT_SIZE;
    public static short DEFAULT_FONT_COLOR;
    private ThemesTable _themes;
    private CT_Font _ctFont;
    private short _index;
    public bool IsBold { get; public set; }
    public short Charset { get; public set; }
    public short Color { get; public set; }
    public double FontHeight { get; public set; }
    public double FontHeightInPoints { get; public set; }
    private double FontHeightRaw { get; private set; }
    public string FontName { get; public set; }
    public bool IsItalic { get; public set; }
    public bool IsStrikeout { get; public set; }
    public FontSuperScript TypeOffset { get; public set; }
    public FontUnderlineType Underline { get; public set; }
    [ObsoleteAttribute("deprecated POI 3.15 beta 2. Use IsBold instead.")]
public short Boldweight { get; public set; }
    public int Family { get; public set; }
    public short Index { get; }
    public XSSFFont(CT_Font font);
    public XSSFFont(CT_Font font, int index);
    private static XSSFFont();
    public CT_Font GetCTFont();
    public sealed virtual bool get_IsBold();
    public sealed virtual void set_IsBold(bool value);
    public sealed virtual short get_Charset();
    public sealed virtual void set_Charset(short value);
    public sealed virtual short get_Color();
    public sealed virtual void set_Color(short value);
    public XSSFColor GetXSSFColor();
    public short GetThemeColor();
    public sealed virtual double get_FontHeight();
    public sealed virtual void set_FontHeight(double value);
    public sealed virtual double get_FontHeightInPoints();
    public sealed virtual void set_FontHeightInPoints(double value);
    private double get_FontHeightRaw();
    private void set_FontHeightRaw(double value);
    public sealed virtual string get_FontName();
    public sealed virtual void set_FontName(string value);
    public sealed virtual bool get_IsItalic();
    public sealed virtual void set_IsItalic(bool value);
    public sealed virtual bool get_IsStrikeout();
    public sealed virtual void set_IsStrikeout(bool value);
    public sealed virtual FontSuperScript get_TypeOffset();
    public sealed virtual void set_TypeOffset(FontSuperScript value);
    public sealed virtual FontUnderlineType get_Underline();
    public sealed virtual void set_Underline(FontUnderlineType value);
    public sealed virtual short get_Boldweight();
    public sealed virtual void set_Boldweight(short value);
    public void SetCharSet(byte charset);
    public void SetCharSet(int charset);
    public void SetCharSet(FontCharset charset);
    public void SetColor(XSSFColor color);
    public void SetThemeColor(short theme);
    internal void SetUnderline(FontUnderlineType underline);
    public virtual string ToString();
    public long RegisterTo(StylesTable styles);
    public void SetThemesTable(ThemesTable themes);
    public FontScheme GetScheme();
    public void SetScheme(FontScheme scheme);
    public int get_Family();
    public void set_Family(int value);
    public void SetFamily(FontFamily family);
    public sealed virtual short get_Index();
    public virtual int GetHashCode();
    public virtual bool Equals(object o);
    public sealed virtual void CloneStyleFrom(IFont src);
}
public class NPOI.XSSF.UserModel.XSSFFontFormatting : object {
    private CT_Font _font;
    public FontSuperScript EscapementType { get; public set; }
    public short FontColorIndex { get; public set; }
    public IColor FontColor { get; public set; }
    public int FontHeight { get; public set; }
    public FontUnderlineType UnderlineType { get; public set; }
    public bool IsBold { get; }
    public bool IsItalic { get; }
    internal XSSFFontFormatting(CT_Font font);
    public sealed virtual FontSuperScript get_EscapementType();
    public sealed virtual void set_EscapementType(FontSuperScript value);
    public sealed virtual short get_FontColorIndex();
    public sealed virtual void set_FontColorIndex(short value);
    public sealed virtual IColor get_FontColor();
    public sealed virtual void set_FontColor(IColor value);
    public sealed virtual int get_FontHeight();
    public sealed virtual void set_FontHeight(int value);
    public sealed virtual FontUnderlineType get_UnderlineType();
    public sealed virtual void set_UnderlineType(FontUnderlineType value);
    public sealed virtual bool get_IsBold();
    public sealed virtual bool get_IsItalic();
    public sealed virtual void SetFontStyle(bool italic, bool bold);
    public sealed virtual void ResetFontStyle();
}
public class NPOI.XSSF.UserModel.XSSFFormulaEvaluator : BaseXSSFFormulaEvaluator {
    private XSSFWorkbook _book;
    public XSSFFormulaEvaluator(IWorkbook workbook);
    public XSSFFormulaEvaluator(XSSFWorkbook workbook);
    private XSSFFormulaEvaluator(XSSFWorkbook workbook, IStabilityClassifier stabilityClassifier, UDFFinder udfFinder);
    protected XSSFFormulaEvaluator(XSSFWorkbook workbook, WorkbookEvaluator bookEvaluator);
    public static XSSFFormulaEvaluator Create(XSSFWorkbook workbook, IStabilityClassifier stabilityClassifier, UDFFinder udfFinder);
    public static void EvaluateAllFormulaCells(XSSFWorkbook wb);
    public virtual void EvaluateAll();
    protected virtual IEvaluationCell ToEvaluationCell(ICell cell);
}
public class NPOI.XSSF.UserModel.XSSFFreeform : XSSFShape {
    private static CT_Shape prototype;
    private CT_Shape ctShape;
    public UInt32 ID { get; }
    public string Name { get; public set; }
    protected internal XSSFFreeform(XSSFDrawing Drawing, CT_Shape ctShape);
    protected internal static CT_Shape Prototype();
    public CT_Shape GetCTShape();
    public virtual UInt32 get_ID();
    public virtual string get_Name();
    public virtual void set_Name(string value);
    protected internal virtual CT_ShapeProperties GetShapeProperties();
    public void Build(BuildFreeForm BFF);
}
public class NPOI.XSSF.UserModel.XSSFGraphicFrame : XSSFShape {
    private static CT_GraphicalObjectFrame prototype;
    private CT_GraphicalObjectFrame graphicFrame;
    private XSSFClientAnchor anchor;
    public UInt32 ID { get; }
    public string Name { get; public set; }
    public XSSFClientAnchor Anchor { get; public set; }
    public long Id { get; public set; }
    public XSSFGraphicFrame(XSSFDrawing Drawing, CT_GraphicalObjectFrame ctGraphicFrame);
    internal CT_GraphicalObjectFrame GetCTGraphicalObjectFrame();
    public static CT_GraphicalObjectFrame Prototype();
    public void SetMacro(string macro);
    public virtual UInt32 get_ID();
    public virtual string get_Name();
    public virtual void set_Name(string value);
    private CT_NonVisualDrawingProps GetNonVisualProperties();
    public XSSFClientAnchor get_Anchor();
    public void set_Anchor(XSSFClientAnchor value);
    internal void SetChart(XSSFChart chart, string relId);
    public long get_Id();
    public void set_Id(long value);
    private void AppendChartElement(CT_GraphicalObjectData data, string id);
    protected internal virtual CT_ShapeProperties GetShapeProperties();
}
public class NPOI.XSSF.UserModel.XSSFHyperlink : object {
    private HyperlinkType _type;
    private PackageRelationship _externalRel;
    private CT_Hyperlink _ctHyperlink;
    private string _location;
    public HyperlinkType Type { get; }
    public string CellRef { get; }
    public string Address { get; public set; }
    public string Label { get; public set; }
    public string Location { get; public set; }
    public int FirstColumn { get; public set; }
    public int LastColumn { get; public set; }
    public int FirstRow { get; public set; }
    public int LastRow { get; public set; }
    public string TextMark { get; public set; }
    public string Tooltip { get; public set; }
    public XSSFHyperlink(HyperlinkType type);
    public XSSFHyperlink(CT_Hyperlink ctHyperlink, PackageRelationship hyperlinkRel);
    public XSSFHyperlink(IHyperlink other);
    public CT_Hyperlink GetCTHyperlink();
    public bool NeedsRelationToo();
    internal void GenerateRelationIfNeeded(PackagePart sheetPart);
    public sealed virtual HyperlinkType get_Type();
    [ObsoleteAttribute("use property CellRef")]
public string GetCellRef();
    public string get_CellRef();
    public sealed virtual string get_Address();
    public sealed virtual void set_Address(string value);
    private void Validate(string address);
    public sealed virtual string get_Label();
    public sealed virtual void set_Label(string value);
    public string get_Location();
    public void set_Location(string value);
    public void SetCellReference(string ref1);
    public void SetCellReference(CellReference ref1);
    private CellReference buildCellReference();
    public sealed virtual int get_FirstColumn();
    public sealed virtual void set_FirstColumn(int value);
    public sealed virtual int get_LastColumn();
    public sealed virtual void set_LastColumn(int value);
    public sealed virtual int get_FirstRow();
    public sealed virtual void set_FirstRow(int value);
    public sealed virtual int get_LastRow();
    public sealed virtual void set_LastRow(int value);
    public sealed virtual string get_TextMark();
    public sealed virtual void set_TextMark(string value);
    public string get_Tooltip();
    public void set_Tooltip(string value);
}
public class NPOI.XSSF.UserModel.XSSFIconMultiStateFormatting : object {
    private CT_IconSet _iconset;
    public IconSet IconSet { get; public set; }
    public bool IsIconOnly { get; public set; }
    public bool IsReversed { get; public set; }
    public IConditionalFormattingThreshold[] Thresholds { get; public set; }
    internal XSSFIconMultiStateFormatting(CT_IconSet iconset);
    public sealed virtual IconSet get_IconSet();
    public sealed virtual void set_IconSet(IconSet value);
    public sealed virtual bool get_IsIconOnly();
    public sealed virtual void set_IsIconOnly(bool value);
    public sealed virtual bool get_IsReversed();
    public sealed virtual void set_IsReversed(bool value);
    public sealed virtual IConditionalFormattingThreshold[] get_Thresholds();
    public sealed virtual void set_Thresholds(IConditionalFormattingThreshold[] value);
    public sealed virtual IConditionalFormattingThreshold CreateThreshold();
}
public class NPOI.XSSF.UserModel.XSSFLineBreak : XSSFTextRun {
    private CT_TextCharacterProperties _brProps;
    public XSSFLineBreak(CT_RegularTextRun r, XSSFTextParagraph p, CT_TextCharacterProperties brProps);
    protected CT_TextCharacterProperties GetRPr();
    public void SetText(string text);
}
public class NPOI.XSSF.UserModel.XSSFMap : object {
    private CT_Map ctMap;
    private MapInfo mapInfo;
    public XSSFMap(CT_Map ctMap, MapInfo mapInfo);
    public CT_Map GetCTMap();
    public CT_Schema GetCTSchema();
    public string GetSchema();
    public List`1<XSSFSingleXmlCell> GetRelatedSingleXMLCell();
    public List`1<XSSFTable> GetRelatedTables();
}
public class NPOI.XSSF.UserModel.XSSFName : object {
    public static string BUILTIN_PRINT_AREA;
    public static string BUILTIN_PRINT_TITLE;
    public static string BUILTIN_CRITERIA;
    public static string BUILTIN_EXTRACT;
    public static string BUILTIN_FILTER_DB;
    public static string BUILTIN_CONSOLIDATE_AREA;
    public static string BUILTIN_DATABASE;
    public static string BUILTIN_SHEET_TITLE;
    private XSSFWorkbook _workbook;
    private CT_DefinedName _ctName;
    public string NameName { get; public set; }
    public string RefersToFormula { get; public set; }
    public bool IsDeleted { get; }
    public int SheetIndex { get; public set; }
    public bool Function { get; public set; }
    public int FunctionGroupId { get; public set; }
    public string SheetName { get; }
    public bool IsFunctionName { get; }
    public string Comment { get; public set; }
    public XSSFName(CT_DefinedName name, XSSFWorkbook workbook);
    private static XSSFName();
    internal CT_DefinedName GetCTName();
    public sealed virtual string get_NameName();
    public sealed virtual void set_NameName(string value);
    public sealed virtual string get_RefersToFormula();
    public sealed virtual void set_RefersToFormula(string value);
    public sealed virtual bool get_IsDeleted();
    public sealed virtual int get_SheetIndex();
    public sealed virtual void set_SheetIndex(int value);
    public bool get_Function();
    public void set_Function(bool value);
    public sealed virtual void SetFunction(bool value);
    public int get_FunctionGroupId();
    public void set_FunctionGroupId(int value);
    public sealed virtual string get_SheetName();
    public sealed virtual bool get_IsFunctionName();
    public sealed virtual string get_Comment();
    public sealed virtual void set_Comment(string value);
    public virtual int GetHashCode();
    public virtual bool Equals(object o);
    private static void ValidateName(string name);
}
public class NPOI.XSSF.UserModel.XSSFOddFooter : XSSFHeaderFooter {
    public string Text { get; public set; }
    public XSSFOddFooter(CT_HeaderFooter headerFooter);
    public virtual string get_Text();
    public virtual void set_Text(string value);
}
public class NPOI.XSSF.UserModel.XSSFOddHeader : XSSFHeaderFooter {
    public string Text { get; public set; }
    public XSSFOddHeader(CT_HeaderFooter headerFooter);
    public virtual string get_Text();
    public virtual void set_Text(string value);
}
public class NPOI.XSSF.UserModel.XSSFPatternFormatting : object {
    private CT_Fill _fill;
    public IColor FillBackgroundColorColor { get; public set; }
    public IColor FillForegroundColorColor { get; public set; }
    public short FillBackgroundColor { get; public set; }
    public short FillForegroundColor { get; public set; }
    public FillPattern FillPattern { get; public set; }
    public XSSFPatternFormatting(CT_Fill fill);
    public sealed virtual IColor get_FillBackgroundColorColor();
    public sealed virtual void set_FillBackgroundColorColor(IColor value);
    private void SetFillBackgroundColor(CT_Color color);
    public sealed virtual IColor get_FillForegroundColorColor();
    public sealed virtual void set_FillForegroundColorColor(IColor value);
    private void SetFillForegroundColor(CT_Color color);
    public sealed virtual short get_FillBackgroundColor();
    public sealed virtual void set_FillBackgroundColor(short value);
    public sealed virtual short get_FillForegroundColor();
    public sealed virtual void set_FillForegroundColor(short value);
    public sealed virtual FillPattern get_FillPattern();
    public sealed virtual void set_FillPattern(FillPattern value);
}
public class NPOI.XSSF.UserModel.XSSFPicture : XSSFShape {
    private static POILogger logger;
    private static CT_Picture prototype;
    private CT_Picture ctPicture;
    public UInt32 ID { get; }
    public string Name { get; public set; }
    public int CountOfAllChildren { get; }
    public int FillColor { get; public set; }
    public LineStyle LineStyle { get; public set; }
    public int LineStyleColor { get; }
    public int LineWidth { get; public set; }
    public IPictureData PictureData { get; }
    public IClientAnchor ClientAnchor { get; }
    public ISheet Sheet { get; }
    public XSSFPicture(XSSFDrawing drawing, CT_Picture ctPicture);
    public XSSFPicture(XSSFDrawing drawing, XmlNode ctPicture);
    private static XSSFPicture();
    internal static CT_Picture Prototype();
    public virtual UInt32 get_ID();
    public virtual string get_Name();
    public virtual void set_Name(string value);
    internal void SetPictureReference(PackageRelationship rel);
    public CT_Picture GetCTPicture();
    public sealed virtual void Resize();
    public sealed virtual void Resize(double scale);
    public sealed virtual void Resize(double scaleX, double scaleY);
    public sealed virtual IClientAnchor GetPreferredSize();
    public IClientAnchor GetPreferredSize(double scale);
    public sealed virtual IClientAnchor GetPreferredSize(double scaleX, double scaleY);
    protected static Size GetImageDimension(PackagePart part, PictureType type);
    public sealed virtual Size GetImageDimension();
    protected internal virtual CT_ShapeProperties GetShapeProperties();
    public int get_CountOfAllChildren();
    public int get_FillColor();
    public void set_FillColor(int value);
    public LineStyle get_LineStyle();
    public void set_LineStyle(LineStyle value);
    public int get_LineStyleColor();
    public int get_LineWidth();
    public void set_LineWidth(int value);
    public void SetLineStyleColor(int lineStyleColor);
    public sealed virtual IPictureData get_PictureData();
    public sealed virtual IClientAnchor get_ClientAnchor();
    public sealed virtual ISheet get_Sheet();
}
public class NPOI.XSSF.UserModel.XSSFPictureData : POIXMLDocumentPart {
    internal static Dictionary`2<int, POIXMLRelation> RELATIONS;
    public PictureType PictureType { get; }
    public Byte[] Data { get; }
    public string MimeType { get; }
    private static XSSFPictureData();
    public XSSFPictureData(PackagePart part);
    [ObsoleteAttribute("deprecated in POI 3.14, scheduled for removal in POI 3.16")]
internal XSSFPictureData(PackagePart part, PackageRelationship rel);
    public sealed virtual string SuggestFileExtension();
    public sealed virtual PictureType get_PictureType();
    public sealed virtual Byte[] get_Data();
    public sealed virtual string get_MimeType();
    protected internal virtual void PrepareForCommit();
}
public class NPOI.XSSF.UserModel.XSSFPivotCache : POIXMLDocumentPart {
    private CT_PivotCache ctPivotCache;
    public XSSFPivotCache(CT_PivotCache ctPivotCache);
    protected XSSFPivotCache(PackagePart part);
    [ObsoleteAttribute("deprecated in POI 3.14, scheduled for removal in POI 3.16")]
protected XSSFPivotCache(PackagePart part, PackageRelationship rel);
    protected void ReadFrom(Stream is1);
    public CT_PivotCache GetCTPivotCache();
}
public class NPOI.XSSF.UserModel.XSSFPivotCacheDefinition : POIXMLDocumentPart {
    private CT_PivotCacheDefinition ctPivotCacheDefinition;
    protected XSSFPivotCacheDefinition(PackagePart part);
    [ObsoleteAttribute("deprecated in POI 3.14, scheduled for removal in POI 3.16")]
protected XSSFPivotCacheDefinition(PackagePart part, PackageRelationship rel);
    public void ReadFrom(Stream is1);
    public CT_PivotCacheDefinition GetCTPivotCacheDefinition();
    private void CreateDefaultValues();
    protected internal virtual void Commit();
    public AreaReference GetPivotArea(IWorkbook wb);
    protected internal void CreateCacheFields(ISheet sheet);
}
public class NPOI.XSSF.UserModel.XSSFPivotCacheRecords : POIXMLDocumentPart {
    private CT_PivotCacheRecords ctPivotCacheRecords;
    protected XSSFPivotCacheRecords(PackagePart part);
    [ObsoleteAttribute("deprecated in POI 3.14, scheduled for removal in POI 3.16")]
protected XSSFPivotCacheRecords(PackagePart part, PackageRelationship rel);
    protected void ReadFrom(Stream is1);
    public CT_PivotCacheRecords GetCtPivotCacheRecords();
    protected internal virtual void Commit();
}
public class NPOI.XSSF.UserModel.XSSFPivotTable : POIXMLDocumentPart {
    protected internal static short CREATED_VERSION;
    protected internal static short MIN_REFRESHABLE_VERSION;
    protected internal static short UPDATED_VERSION;
    private CT_PivotTableDefinition pivotTableDefinition;
    private XSSFPivotCacheDefinition pivotCacheDefinition;
    private XSSFPivotCache pivotCache;
    private XSSFPivotCacheRecords pivotCacheRecords;
    private ISheet parentSheet;
    private ISheet dataSheet;
    private IPivotTableStyleInfo styleInfo;
    public string StyleName { get; public set; }
    public IPivotTableStyleInfo Style { get; }
    protected StylesTable StylesSource { get; }
    protected XSSFPivotTable(PackagePart part);
    [ObsoleteAttribute("deprecated in POI 3.14, scheduled for removal in POI 3.16")]
protected XSSFPivotTable(PackagePart part, PackageRelationship rel);
    private static XSSFPivotTable();
    public void ReadFrom(Stream is1);
    public void SetPivotCache(XSSFPivotCache pivotCache);
    public XSSFPivotCache GetPivotCache();
    public ISheet GetParentSheet();
    public void SetParentSheet(XSSFSheet parentSheet);
    public CT_PivotTableDefinition GetCTPivotTableDefinition();
    public void SetCTPivotTableDefinition(CT_PivotTableDefinition pivotTableDefinition);
    public XSSFPivotCacheDefinition GetPivotCacheDefinition();
    public void SetPivotCacheDefinition(XSSFPivotCacheDefinition pivotCacheDefinition);
    public XSSFPivotCacheRecords GetPivotCacheRecords();
    public void SetPivotCacheRecords(XSSFPivotCacheRecords pivotCacheRecords);
    public ISheet GetDataSheet();
    public string get_StyleName();
    public void set_StyleName(string value);
    public IPivotTableStyleInfo get_Style();
    protected StylesTable get_StylesSource();
    private void SetDataSheet(ISheet dataSheet);
    protected internal virtual void Commit();
    protected internal void SetDefaultPivotTableDefinition();
    protected AreaReference GetPivotArea();
    private void CheckColumnIndex(int columnIndex);
    public void AddRowLabel(int columnIndex);
    public IList`1<int> GetRowLabelColumns();
    public void AddColumnLabel(DataConsolidateFunction function, int columnIndex, string valueFieldName);
    public void AddColumnLabel(DataConsolidateFunction function, int columnIndex);
    private void AddDataField(DataConsolidateFunction function, int columnIndex, string valueFieldName);
    public void AddDataColumn(int columnIndex, bool isDataField);
    public void AddReportFilter(int columnIndex);
    protected internal void CreateSourceReferences(CellReference position, ISheet sourceSheet, IPivotTableReferenceConfigurator refConfig);
    protected internal void CreateDefaultDataColumns();
}
public class NPOI.XSSF.UserModel.XSSFPrintSetup : object {
    private CT_Worksheet ctWorksheet;
    private CT_PageSetup pageSetup;
    private CT_PageMargins pageMargins;
    public PrintOrientation Orientation { get; public set; }
    public PageOrder PageOrder { get; public set; }
    public short PaperSize { get; public set; }
    public short Scale { get; public set; }
    public short PageStart { get; public set; }
    public short FitWidth { get; public set; }
    public short FitHeight { get; public set; }
    public bool LeftToRight { get; public set; }
    public bool Landscape { get; public set; }
    public bool ValidSettings { get; public set; }
    public bool NoColor { get; public set; }
    public bool Draft { get; public set; }
    public bool Notes { get; public set; }
    public bool NoOrientation { get; public set; }
    public bool UsePage { get; public set; }
    public short HResolution { get; public set; }
    public short VResolution { get; public set; }
    public double HeaderMargin { get; public set; }
    public double FooterMargin { get; public set; }
    public double TopMargin { get; public set; }
    public double LeftMargin { get; public set; }
    public double RightMargin { get; public set; }
    public double BottomMargin { get; public set; }
    public short Copies { get; public set; }
    public DisplayCellErrorType CellError { get; public set; }
    public bool EndNote { get; public set; }
    public XSSFPrintSetup(CT_Worksheet worksheet);
    public void SetPaperSize(PaperSize size);
    public PrintOrientation get_Orientation();
    public void set_Orientation(PrintOrientation value);
    public PrintCellComments GetCellComment();
    public PageOrder get_PageOrder();
    public void set_PageOrder(PageOrder value);
    public sealed virtual short get_PaperSize();
    public sealed virtual void set_PaperSize(short value);
    public PaperSize GetPaperSizeEnum();
    public sealed virtual short get_Scale();
    public sealed virtual void set_Scale(short value);
    public sealed virtual short get_PageStart();
    public sealed virtual void set_PageStart(short value);
    public sealed virtual short get_FitWidth();
    public sealed virtual void set_FitWidth(short value);
    public sealed virtual short get_FitHeight();
    public sealed virtual void set_FitHeight(short value);
    public sealed virtual bool get_LeftToRight();
    public sealed virtual void set_LeftToRight(bool value);
    public sealed virtual bool get_Landscape();
    public sealed virtual void set_Landscape(bool value);
    public sealed virtual bool get_ValidSettings();
    public sealed virtual void set_ValidSettings(bool value);
    public sealed virtual bool get_NoColor();
    public sealed virtual void set_NoColor(bool value);
    public sealed virtual bool get_Draft();
    public sealed virtual void set_Draft(bool value);
    public sealed virtual bool get_Notes();
    public sealed virtual void set_Notes(bool value);
    public sealed virtual bool get_NoOrientation();
    public sealed virtual void set_NoOrientation(bool value);
    public sealed virtual bool get_UsePage();
    public sealed virtual void set_UsePage(bool value);
    public sealed virtual short get_HResolution();
    public sealed virtual void set_HResolution(short value);
    public sealed virtual short get_VResolution();
    public sealed virtual void set_VResolution(short value);
    public sealed virtual double get_HeaderMargin();
    public sealed virtual void set_HeaderMargin(double value);
    public sealed virtual double get_FooterMargin();
    public sealed virtual void set_FooterMargin(double value);
    public double get_TopMargin();
    public void set_TopMargin(double value);
    public double get_LeftMargin();
    public void set_LeftMargin(double value);
    public double get_RightMargin();
    public void set_RightMargin(double value);
    public double get_BottomMargin();
    public void set_BottomMargin(double value);
    public sealed virtual short get_Copies();
    public sealed virtual void set_Copies(short value);
    public sealed virtual DisplayCellErrorType get_CellError();
    public sealed virtual void set_CellError(DisplayCellErrorType value);
    public sealed virtual bool get_EndNote();
    public sealed virtual void set_EndNote(bool value);
}
public class NPOI.XSSF.UserModel.XSSFRelation : POIXMLRelation {
    private static POILogger log;
    protected static Dictionary`2<string, XSSFRelation> _table;
    public static XSSFRelation WORKBOOK;
    public static XSSFRelation MACROS_WORKBOOK;
    public static XSSFRelation TEMPLATE_WORKBOOK;
    public static XSSFRelation MACRO_TEMPLATE_WORKBOOK;
    public static XSSFRelation MACRO_ADDIN_WORKBOOK;
    public static XSSFRelation XLSB_BINARY_WORKBOOK;
    public static XSSFRelation WORKSHEET;
    public static XSSFRelation CHARTSHEET;
    public static XSSFRelation SHARED_STRINGS;
    public static XSSFRelation STYLES;
    public static XSSFRelation DRAWINGS;
    public static XSSFRelation VML_DRAWINGS;
    public static XSSFRelation CHART;
    public static XSSFRelation CUSTOM_XML_MAPPINGS;
    public static XSSFRelation SINGLE_XML_CELLS;
    public static XSSFRelation TABLE;
    public static XSSFRelation IMAGES;
    public static XSSFRelation IMAGE_EMF;
    public static XSSFRelation IMAGE_WMF;
    public static XSSFRelation IMAGE_PICT;
    public static XSSFRelation IMAGE_JPEG;
    public static XSSFRelation IMAGE_JPG;
    public static XSSFRelation IMAGE_PNG;
    public static XSSFRelation IMAGE_DIB;
    public static XSSFRelation IMAGE_GIF;
    public static XSSFRelation IMAGE_TIFF;
    public static XSSFRelation IMAGE_EPS;
    public static XSSFRelation IMAGE_BMP;
    public static XSSFRelation IMAGE_WPG;
    public static XSSFRelation SHEET_COMMENTS;
    public static XSSFRelation SHEET_HYPERLINKS;
    public static XSSFRelation OLEEMBEDDINGS;
    public static XSSFRelation PACKEMBEDDINGS;
    public static XSSFRelation VBA_MACROS;
    public static XSSFRelation ACTIVEX_CONTROLS;
    public static XSSFRelation ACTIVEX_BINS;
    public static XSSFRelation THEME;
    public static XSSFRelation CALC_CHAIN;
    public static XSSFRelation EXTERNAL_LINKS;
    public static XSSFRelation PRINTER_SETTINGS;
    public static XSSFRelation PIVOT_TABLE;
    public static XSSFRelation PIVOT_CACHE_DEFINITION;
    public static XSSFRelation PIVOT_CACHE_RECORDS;
    public static XSSFRelation CTRL_PROP_RECORDS;
    public static string NS_SPREADSHEETML;
    public static string NS_DRAWINGML;
    public static string NS_CHART;
    private XSSFRelation(string type, string rel, string defaultName, Type cls);
    private static XSSFRelation();
    public Stream GetContents(PackagePart corePart);
    public static XSSFRelation GetInstance(string rel);
    public static void RemoveRelation(XSSFRelation relation);
    internal static void AddRelation(XSSFRelation relation);
}
public class NPOI.XSSF.UserModel.XSSFRichTextString : object {
    private static Regex utfPtrn;
    private CT_Rst st;
    private StylesTable styles;
    public string String { get; public set; }
    public int Length { get; }
    public int NumFormattingRuns { get; }
    public XSSFRichTextString(string str);
    public XSSFRichTextString(CT_Rst st);
    private static XSSFRichTextString();
    public void SetStylesTableReference(StylesTable stylestable);
    public sealed virtual void ApplyFont(int startIndex, int endIndex, short fontIndex);
    internal void ApplyFont(SortedDictionary`2<int, CT_RPrElt> formats, int startIndex, int endIndex, CT_RPrElt fmt);
    public sealed virtual void ApplyFont(int startIndex, int endIndex, IFont font);
    internal SortedDictionary`2<int, CT_RPrElt> GetFormatMap(CT_Rst entry);
    public sealed virtual void ApplyFont(IFont font);
    public sealed virtual void ApplyFont(short fontIndex);
    public void Append(string text, XSSFFont font);
    public void Append(string text);
    private void SetRunAttributes(CT_Font ctFont, CT_RPrElt pr);
    public bool HasFormatting();
    public sealed virtual void ClearFormatting();
    public sealed virtual int GetIndexOfFormattingRun(int index);
    public int GetLengthOfFormattingRun(int index);
    public sealed virtual string get_String();
    public void set_String(string value);
    public virtual string ToString();
    public sealed virtual int get_Length();
    public sealed virtual int get_NumFormattingRuns();
    public IFont GetFontOfFormattingRun(int index);
    public XSSFFont GetFontAtIndex(int index);
    public CT_Rst GetCTRst();
    protected static CT_Font ToCTFont(CT_RPrElt pr);
    protected static void PreserveSpaces(string xs);
    private static string UtfDecode(string value);
    public int GetLastKey(KeyCollection<int, CT_RPrElt> keys);
    private CT_Rst BuildCTRst(string text, SortedDictionary`2<int, CT_RPrElt> formats);
    private ThemesTable GetThemesTable();
}
public class NPOI.XSSF.UserModel.XSSFRow : object {
    private static POILogger _logger;
    private CT_Row _row;
    private SortedDictionary`2<int, ICell> _cells;
    private XSSFSheet _sheet;
    private StylesTable _stylesSource;
    public ISheet Sheet { get; }
    public short FirstCellNum { get; }
    public short LastCellNum { get; }
    public short Height { get; public set; }
    public float HeightInPoints { get; public set; }
    public int PhysicalNumberOfCells { get; }
    public int RowNum { get; public set; }
    public bool ZeroHeight { get; public set; }
    public bool IsFormatted { get; }
    public ICellStyle RowStyle { get; public set; }
    public List`1<ICell> Cells { get; }
    public int OutlineLevel { get; public set; }
    public Nullable`1<bool> Hidden { get; public set; }
    public Nullable`1<bool> Collapsed { get; public set; }
    public XSSFRow(CT_Row row, XSSFSheet sheet);
    private static XSSFRow();
    public sealed virtual ISheet get_Sheet();
    public sealed virtual short get_FirstCellNum();
    public sealed virtual short get_LastCellNum();
    public sealed virtual short get_Height();
    public sealed virtual void set_Height(short value);
    public sealed virtual float get_HeightInPoints();
    public sealed virtual void set_HeightInPoints(float value);
    public sealed virtual int get_PhysicalNumberOfCells();
    public sealed virtual int get_RowNum();
    public sealed virtual void set_RowNum(int value);
    public sealed virtual bool get_ZeroHeight();
    public sealed virtual void set_ZeroHeight(bool value);
    public sealed virtual bool get_IsFormatted();
    public sealed virtual ICellStyle get_RowStyle();
    public sealed virtual void set_RowStyle(ICellStyle value);
    public sealed virtual ICell CreateCell(int columnIndex);
    public sealed virtual ICell CreateCell(int columnIndex, CellType type);
    public sealed virtual ICell GetCell(int cellnum);
    public sealed virtual ICell GetCell(int cellnum, MissingCellPolicy policy);
    public sealed virtual void RemoveCell(ICell cell);
    public void CopyRowFrom(IRow srcRow, CellCopyPolicy policy);
    public void SetRowStyle(ICellStyle style);
    public CT_Row GetCTRow();
    internal void OnDocumentWrite();
    internal void Shift(int n);
    internal void RebuildCells();
    public Enumerator<int, ICell> CellIterator();
    public sealed virtual IEnumerator`1<ICell> GetEnumerator();
    public sealed virtual int CompareTo(XSSFRow other);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
    public sealed virtual List`1<ICell> get_Cells();
    public sealed virtual void MoveCell(ICell cell, int newColumn);
    public sealed virtual IRow CopyRowTo(int targetIndex);
    public sealed virtual ICell CopyCell(int sourceIndex, int targetIndex);
    private sealed virtual override IEnumerator System.Collections.IEnumerable.GetEnumerator();
    public sealed virtual bool HasCustomHeight();
    public sealed virtual int get_OutlineLevel();
    public void set_OutlineLevel(int value);
    public sealed virtual Nullable`1<bool> get_Hidden();
    public sealed virtual void set_Hidden(Nullable`1<bool> value);
    public sealed virtual Nullable`1<bool> get_Collapsed();
    public sealed virtual void set_Collapsed(Nullable`1<bool> value);
    public virtual string ToString();
    private ICell RetrieveCell(int cellnum);
    private int GetFirstKey();
    private int GetLastKey();
}
public abstract class NPOI.XSSF.UserModel.XSSFShape : object {
    public static int EMU_PER_PIXEL;
    public static int EMU_PER_POINT;
    public static int POINT_DPI;
    public static int PIXEL_DPI;
    protected XSSFDrawing drawing;
    protected IEG_Anchor IEGanchor;
    public XSSFShapeGroup parent;
    internal XSSFAnchor anchor;
    public IShape Parent { get; }
    public IEG_Anchor cellanchor { get; public set; }
    public UInt32 ID { get; }
    public string Name { get; public set; }
    public bool IsNoFill { get; public set; }
    public int CountOfAllChildren { get; }
    public int FillColor { get; public set; }
    public LineStyle LineStyle { get; public set; }
    public int LineStyleColor { get; public set; }
    public double LineWidth { get; public set; }
    public LineEndingCapType LineEndingCapType { get; public set; }
    public CompoundLineType CompoundLineType { get; public set; }
    private static XSSFShape();
    public XSSFDrawing GetDrawing();
    public sealed virtual IShape get_Parent();
    public XSSFAnchor GetAnchor();
    public IEG_Anchor get_cellanchor();
    public void set_cellanchor(IEG_Anchor value);
    protected internal abstract virtual CT_ShapeProperties GetShapeProperties();
    public abstract virtual UInt32 get_ID();
    public abstract virtual string get_Name();
    public abstract virtual void set_Name(string value);
    public sealed virtual bool get_IsNoFill();
    public sealed virtual void set_IsNoFill(bool value);
    public sealed virtual void SetFillColor(int red, int green, int blue);
    public sealed virtual void SetLineStyleColor(int red, int green, int blue);
    public sealed virtual int get_CountOfAllChildren();
    public sealed virtual int get_FillColor();
    public sealed virtual void set_FillColor(int value);
    public virtual LineStyle get_LineStyle();
    public virtual void set_LineStyle(LineStyle value);
    public virtual int get_LineStyleColor();
    public virtual void set_LineStyleColor(int value);
    public virtual double get_LineWidth();
    public virtual void set_LineWidth(double value);
    public sealed virtual void SetLineStyleColor(int lineStyleColor);
    public virtual LineEndingCapType get_LineEndingCapType();
    public virtual void set_LineEndingCapType(LineEndingCapType value);
    public virtual CompoundLineType get_CompoundLineType();
    public virtual void set_CompoundLineType(CompoundLineType value);
}
public class NPOI.XSSF.UserModel.XSSFShapeGroup : XSSFShape {
    private static CT_GroupShape prototype;
    private CT_GroupShape ctGroup;
    public UInt32 ID { get; }
    public string Name { get; public set; }
    public XSSFShapeGroup(XSSFDrawing drawing, CT_GroupShape ctGroup);
    internal static CT_GroupShape Prototype();
    public virtual UInt32 get_ID();
    public virtual string get_Name();
    public virtual void set_Name(string value);
    public XSSFTextBox CreateTextbox(XSSFChildAnchor anchor);
    public XSSFSimpleShape CreateSimpleShape(XSSFChildAnchor anchor);
    public XSSFConnector CreateConnector(XSSFChildAnchor anchor);
    public XSSFPicture CreatePicture(XSSFChildAnchor anchor, int pictureIndex);
    public XSSFFreeform CreateFreeform(BuildFreeForm BFF);
    public XSSFShapeGroup CreateGroup(XSSFChildGroupAnchor anchor);
    public CT_GroupShape GetCTGroupShape();
    public void SetCoordinates(int x1, int y1, int x2, int y2);
    protected internal virtual CT_ShapeProperties GetShapeProperties();
    public void AutoFit(ISheet Sheet);
    private void AutoFit(CT_GroupShape CtGroup, Coords Min, Coords Max);
}
public class NPOI.XSSF.UserModel.XSSFSheet : POIXMLDocumentPart {
    private static POILogger logger;
    private static double DEFAULT_ROW_HEIGHT;
    private static double DEFAULT_MARGIN_HEADER;
    private static double DEFAULT_MARGIN_FOOTER;
    private static double DEFAULT_MARGIN_TOP;
    private static double DEFAULT_MARGIN_BOTTOM;
    private static double DEFAULT_MARGIN_LEFT;
    private static double DEFAULT_MARGIN_RIGHT;
    public static int TWIPS_PER_POINT;
    internal CT_Sheet sheet;
    internal CT_Worksheet worksheet;
    private SortedList`2<int, XSSFRow> _rows;
    private List`1<XSSFHyperlink> hyperlinks;
    private ColumnHelper columnHelper;
    private CommentsTable sheetComments;
    private Dictionary`2<int, CT_CellFormula> sharedFormulas;
    private Dictionary`2<string, XSSFTable> tables;
    private List`1<CellRangeAddress> arrayFormulas;
    private XSSFDataValidationHelper dataValidationHelper;
    private XSSFDrawing drawing;
    [CompilerGeneratedAttribute]
private double <MaximumDigitWidth>k__BackingField;
    private CT_Pane Pane { get; }
    public IWorkbook Workbook { get; }
    public string SheetName { get; }
    public Int32[] ColumnBreaks { get; }
    public double DefaultColumnWidth { get; public set; }
    public short DefaultRowHeight { get; public set; }
    public float DefaultRowHeightInPoints { get; public set; }
    public bool RightToLeft { get; public set; }
    public bool DisplayGuts { get; public set; }
    public bool DisplayZeros { get; public set; }
    public int FirstRowNum { get; }
    public bool FitToPage { get; public set; }
    public IFooter Footer { get; }
    public IHeader Header { get; }
    public IFooter OddFooter { get; }
    public IFooter EvenFooter { get; }
    public IFooter FirstFooter { get; }
    public IHeader OddHeader { get; }
    public IHeader EvenHeader { get; }
    public IHeader FirstHeader { get; }
    public bool HorizontallyCenter { get; public set; }
    public int LastRowNum { get; }
    public List`1<CellRangeAddress> MergedRegions { get; }
    public int NumMergedRegions { get; }
    public int NumHyperlinks { get; }
    public PaneInformation PaneInformation { get; }
    public int PhysicalNumberOfRows { get; }
    public IPrintSetup PrintSetup { get; }
    public bool Protect { get; }
    public Int32[] RowBreaks { get; }
    public bool RowSumsBelow { get; public set; }
    public bool RowSumsRight { get; public set; }
    public bool ScenarioProtect { get; }
    public short LeftCol { get; public set; }
    public short TopRow { get; public set; }
    public bool VerticallyCenter { get; public set; }
    public bool DisplayFormulas { get; public set; }
    public bool DisplayGridlines { get; public set; }
    public bool DisplayRowColHeadings { get; public set; }
    public bool IsPrintGridlines { get; public set; }
    public bool IsPrintRowAndColumnHeadings { get; public set; }
    public bool ForceFormulaRecalculation { get; public set; }
    public bool Autobreaks { get; public set; }
    public bool IsSelected { get; public set; }
    public CellAddress ActiveCell { get; public set; }
    public bool HasComments { get; }
    internal int NumberOfComments { get; }
    public bool IsAutoFilterLocked { get; }
    public bool IsDeleteColumnsLocked { get; }
    public bool IsDeleteRowsLocked { get; }
    public bool IsFormatCellsLocked { get; }
    public bool IsFormatColumnsLocked { get; }
    public bool IsFormatRowsLocked { get; }
    public bool IsInsertColumnsLocked { get; }
    public bool IsInsertHyperlinksLocked { get; }
    public bool IsInsertRowsLocked { get; }
    public bool IsPivotTablesLocked { get; }
    public bool IsSortLocked { get; }
    public bool IsObjectsLocked { get; }
    public bool IsScenariosLocked { get; }
    public bool IsSelectLockedCellsLocked { get; }
    public bool IsSelectUnlockedCellsLocked { get; }
    public bool IsSheetLocked { get; }
    public ISheetConditionalFormatting SheetConditionalFormatting { get; }
    public XSSFColor TabColor { get; public set; }
    public CellRangeAddress RepeatingRows { get; public set; }
    public CellRangeAddress RepeatingColumns { get; public set; }
    public IDrawing DrawingPatriarch { get; }
    public bool IsActive { get; public set; }
    public short TabColorIndex { get; public set; }
    public bool IsRightToLeft { get; public set; }
    [ObsoleteAttribute("")]
public double MaximumDigitWidth { get; public set; }
    protected internal XSSFSheet(PackagePart part);
    [ObsoleteAttribute("deprecated in POI 3.14, scheduled for removal in POI 3.16")]
internal XSSFSheet(PackagePart part, PackageRelationship rel);
    private static XSSFSheet();
    private CT_Pane get_Pane();
    public sealed virtual IWorkbook get_Workbook();
    public sealed virtual string get_SheetName();
    public sealed virtual Int32[] get_ColumnBreaks();
    public sealed virtual double get_DefaultColumnWidth();
    public sealed virtual void set_DefaultColumnWidth(double value);
    public sealed virtual short get_DefaultRowHeight();
    public sealed virtual void set_DefaultRowHeight(short value);
    public sealed virtual float get_DefaultRowHeightInPoints();
    public sealed virtual void set_DefaultRowHeightInPoints(float value);
    public bool get_RightToLeft();
    public void set_RightToLeft(bool value);
    public sealed virtual bool get_DisplayGuts();
    public sealed virtual void set_DisplayGuts(bool value);
    public sealed virtual bool get_DisplayZeros();
    public sealed virtual void set_DisplayZeros(bool value);
    public sealed virtual int get_FirstRowNum();
    public sealed virtual bool get_FitToPage();
    public sealed virtual void set_FitToPage(bool value);
    public sealed virtual IFooter get_Footer();
    public sealed virtual IHeader get_Header();
    public IFooter get_OddFooter();
    public IFooter get_EvenFooter();
    public IFooter get_FirstFooter();
    public IHeader get_OddHeader();
    public IHeader get_EvenHeader();
    public IHeader get_FirstHeader();
    public sealed virtual bool get_HorizontallyCenter();
    public sealed virtual void set_HorizontallyCenter(bool value);
    public sealed virtual int get_LastRowNum();
    public sealed virtual List`1<CellRangeAddress> get_MergedRegions();
    public sealed virtual int get_NumMergedRegions();
    public int get_NumHyperlinks();
    public sealed virtual PaneInformation get_PaneInformation();
    public sealed virtual int get_PhysicalNumberOfRows();
    public sealed virtual IPrintSetup get_PrintSetup();
    public sealed virtual bool get_Protect();
    public sealed virtual Int32[] get_RowBreaks();
    public sealed virtual bool get_RowSumsBelow();
    public sealed virtual void set_RowSumsBelow(bool value);
    public sealed virtual bool get_RowSumsRight();
    public sealed virtual void set_RowSumsRight(bool value);
    public sealed virtual bool get_ScenarioProtect();
    public sealed virtual short get_LeftCol();
    public sealed virtual void set_LeftCol(short value);
    public sealed virtual short get_TopRow();
    public sealed virtual void set_TopRow(short value);
    public sealed virtual bool get_VerticallyCenter();
    public sealed virtual void set_VerticallyCenter(bool value);
    public sealed virtual bool get_DisplayFormulas();
    public sealed virtual void set_DisplayFormulas(bool value);
    public sealed virtual bool get_DisplayGridlines();
    public sealed virtual void set_DisplayGridlines(bool value);
    public sealed virtual bool get_DisplayRowColHeadings();
    public sealed virtual void set_DisplayRowColHeadings(bool value);
    public sealed virtual bool get_IsPrintGridlines();
    public sealed virtual void set_IsPrintGridlines(bool value);
    public sealed virtual bool get_IsPrintRowAndColumnHeadings();
    public sealed virtual void set_IsPrintRowAndColumnHeadings(bool value);
    public sealed virtual bool get_ForceFormulaRecalculation();
    public sealed virtual void set_ForceFormulaRecalculation(bool value);
    public sealed virtual bool get_Autobreaks();
    public sealed virtual void set_Autobreaks(bool value);
    public sealed virtual bool get_IsSelected();
    public sealed virtual void set_IsSelected(bool value);
    public sealed virtual CellAddress get_ActiveCell();
    public sealed virtual void set_ActiveCell(CellAddress value);
    public bool get_HasComments();
    internal int get_NumberOfComments();
    public bool get_IsAutoFilterLocked();
    public bool get_IsDeleteColumnsLocked();
    public bool get_IsDeleteRowsLocked();
    public bool get_IsFormatCellsLocked();
    public bool get_IsFormatColumnsLocked();
    public bool get_IsFormatRowsLocked();
    public bool get_IsInsertColumnsLocked();
    public bool get_IsInsertHyperlinksLocked();
    public bool get_IsInsertRowsLocked();
    public bool get_IsPivotTablesLocked();
    public bool get_IsSortLocked();
    public bool get_IsObjectsLocked();
    public bool get_IsScenariosLocked();
    public bool get_IsSelectLockedCellsLocked();
    public bool get_IsSelectUnlockedCellsLocked();
    public bool get_IsSheetLocked();
    public sealed virtual ISheetConditionalFormatting get_SheetConditionalFormatting();
    public XSSFColor get_TabColor();
    public void set_TabColor(XSSFColor value);
    public sealed virtual CellRangeAddress get_RepeatingRows();
    public sealed virtual void set_RepeatingRows(CellRangeAddress value);
    public sealed virtual CellRangeAddress get_RepeatingColumns();
    public sealed virtual void set_RepeatingColumns(CellRangeAddress value);
    internal virtual void OnDocumentRead();
    internal virtual void Read(Stream is1);
    internal virtual void OnDocumentCreate();
    internal XSSFVMLDrawing GetVMLDrawing(bool autoCreate);
    protected internal CommentsTable GetCommentsTable(bool create);
    internal CT_CellFormula GetSharedFormula(int sid);
    internal void OnReadCell(XSSFCell cell);
    protected internal virtual void Commit();
    protected virtual CT_Drawing GetCTDrawing();
    protected virtual CT_LegacyDrawing GetCTLegacyDrawing();
    internal virtual void Write(Stream stream, bool leaveOpen);
    internal bool IsCellInArrayFormulaContext(ICell cell);
    internal XSSFCell GetFirstCellInArrayFormula(ICell cell);
    internal void OnDeleteFormula(XSSFCell cell, XSSFEvaluationWorkbook evalWb);
    public CT_Worksheet GetCTWorksheet();
    public ColumnHelper GetColumnHelper();
    public sealed virtual int AddMergedRegion(CellRangeAddress region);
    public sealed virtual int AddMergedRegionUnsafe(CellRangeAddress region);
    public sealed virtual void ValidateMergedRegions();
    public sealed virtual void AutoSizeColumn(int column);
    public sealed virtual void AutoSizeColumn(int column, bool useMergedCells);
    public sealed virtual void AutoSizeRow(int row);
    public sealed virtual void AutoSizeRow(int row, bool useMergedCells);
    public XSSFDrawing GetDrawingPatriarch();
    public sealed virtual IDrawing CreateDrawingPatriarch();
    public sealed virtual void CreateFreezePane(int colSplit, int rowSplit);
    public sealed virtual void CreateFreezePane(int colSplit, int rowSplit, int leftmostColumn, int topRow);
    public virtual IRow CreateRow(int rownum);
    public sealed virtual void CreateSplitPane(int xSplitPos, int ySplitPos, int leftmostColumn, int topRow, PanePosition activePane);
    [ObsoleteAttribute("deprecated as of 2015-11-23 (circa POI 3.14beta1). Use {@link #getCellComment(CellAddress)} instead.")]
public sealed virtual IComment GetCellComment(int row, int column);
    public sealed virtual IComment GetCellComment(CellAddress address);
    public sealed virtual Dictionary`2<CellAddress, IComment> GetCellComments();
    public sealed virtual IHyperlink GetHyperlink(int row, int column);
    public sealed virtual IHyperlink GetHyperlink(CellAddress addr);
    public sealed virtual List`1<IHyperlink> GetHyperlinkList();
    public sealed virtual double GetColumnWidth(int columnIndex);
    public sealed virtual double GetColumnWidthInPixels(int columnIndex);
    public sealed virtual double GetMargin(MarginType margin);
    public sealed virtual void SetMargin(MarginType margin, double size);
    public sealed virtual CellRangeAddress GetMergedRegion(int index);
    public CellRangeAddress GetMergedRegion(CellRangeAddress mergedRegion);
    public sealed virtual void ProtectSheet(string password);
    public void SetSheetPassword(string password, HashAlgorithm hashAlgo);
    public bool ValidateSheetPassword(string password);
    public sealed virtual IRow GetRow(int rownum);
    public sealed virtual void GroupColumn(int fromColumn, int toColumn);
    public sealed virtual bool IsColumnBroken(int column);
    public sealed virtual bool IsColumnHidden(int columnIndex);
    public sealed virtual bool IsRowBroken(int row);
    public sealed virtual void SetRowBreak(int row);
    public sealed virtual void RemoveColumnBreak(int column);
    public sealed virtual void RemoveMergedRegion(int index);
    public sealed virtual void RemoveMergedRegions(IList`1<int> indices);
    public sealed virtual void RemoveRow(IRow row);
    public sealed virtual void RemoveRowBreak(int row);
    public sealed virtual void SetColumnBreak(int column);
    public sealed virtual void SetColumnGroupCollapsed(int columnNumber, bool collapsed);
    public sealed virtual void SetColumnHidden(int columnIndex, bool hidden);
    public sealed virtual void SetColumnWidth(int columnIndex, double width);
    public sealed virtual void SetDefaultColumnStyle(int column, ICellStyle style);
    public sealed virtual void SetRowGroupCollapsed(int rowIndex, bool collapse);
    [ObsoleteAttribute("deprecated 2015-11-23 (circa POI 3.14beta1). Use {@link #setZoom(int)} instead.")]
public sealed virtual void SetZoom(int numerator, int denominator);
    public sealed virtual void SetZoom(int scale);
    public void CopyRows(List`1<XSSFRow> srcRows, int destStartRow, CellCopyPolicy policy);
    public void CopyRows(int srcStartRow, int srcEndRow, int destStartRow, CellCopyPolicy cellCopyPolicy);
    public sealed virtual void ShiftRows(int startRow, int endRow, int n);
    public sealed virtual void ShiftRows(int startRow, int endRow, int n, bool copyRowHeight, bool resetOriginalRowHeight);
    public sealed virtual ICellStyle GetColumnStyle(int column);
    public sealed virtual void GroupRow(int fromRow, int toRow);
    public int FindEndOfRowOutlineGroup(int row);
    public sealed virtual void UngroupColumn(int fromColumn, int toColumn);
    public sealed virtual void UngroupRow(int fromRow, int toRow);
    public void AddHyperlink(XSSFHyperlink hyperlink);
    public void RemoveHyperlink(int row, int column);
    [ObsoleteAttribute("deprecated 3.14beta2 (circa 2015-12-05). Use {@link #setActiveCell(CellAddress)} instead.")]
public void SetActiveCell(string cellref);
    public void EnableLocking();
    public void DisableLocking();
    public void LockAutoFilter(bool enabled);
    public void LockDeleteColumns(bool enabled);
    public void LockDeleteRows(bool enabled);
    public void LockFormatCells(bool enabled);
    public void LockFormatColumns(bool enabled);
    public void LockFormatRows(bool enabled);
    public void LockInsertColumns(bool enabled);
    public void LockInsertHyperlinks(bool enabled);
    public void LockInsertRows(bool enabled);
    public void LockPivotTables(bool enabled);
    public void LockSort(bool enabled);
    public void LockObjects(bool enabled);
    public void LockScenarios(bool enabled);
    public void LockSelectLockedCells(bool enabled);
    public void LockSelectUnlockedCells(bool enabled);
    public sealed virtual ICellRange`1<ICell> SetArrayFormula(string formula, CellRangeAddress range);
    public sealed virtual ICellRange`1<ICell> RemoveArrayFormula(ICell cell);
    public sealed virtual IDataValidationHelper GetDataValidationHelper();
    public sealed virtual List`1<IDataValidation> GetDataValidations();
    public sealed virtual void AddValidationData(IDataValidation dataValidation);
    public sealed virtual void RemoveDataValidation(IDataValidation dataValidation);
    public sealed virtual IAutoFilter SetAutoFilter(CellRangeAddress range);
    public XSSFTable CreateTable();
    public List`1<XSSFTable> GetTables();
    [ObsoleteAttribute("deprecated 3.15-beta2. Removed in 3.17. Use {@link #setTabColor(XSSFColor)}.")]
public void SetTabColor(int colorIndex);
    public sealed virtual IDrawing get_DrawingPatriarch();
    public sealed virtual IEnumerator GetEnumerator();
    public sealed virtual IEnumerator GetRowEnumerator();
    public sealed virtual bool get_IsActive();
    public sealed virtual void set_IsActive(bool value);
    public sealed virtual bool IsMergedRegion(CellRangeAddress mergedRegion);
    public sealed virtual void SetActive(bool value);
    public sealed virtual void SetActiveCellRange(List`1<CellRangeAddress8Bit> cellranges, int activeRange, int activeRow, int activeColumn);
    public sealed virtual void SetActiveCellRange(int firstRow, int lastRow, int firstColumn, int lastColumn);
    public sealed virtual short get_TabColorIndex();
    public sealed virtual void set_TabColorIndex(short value);
    public sealed virtual bool get_IsRightToLeft();
    public sealed virtual void set_IsRightToLeft(bool value);
    public sealed virtual IRow CopyRow(int sourceIndex, int targetIndex);
    public sealed virtual void ShowInPane(int toprow, int leftcol);
    public sealed virtual ISheet CopySheet(string Name);
    public sealed virtual ISheet CopySheet(string name, bool copyStyle);
    public sealed virtual void CopyTo(IWorkbook dest, string name, bool copyStyle, bool keepFormulas);
    public XSSFWorkbook GetWorkbook();
    public XSSFPivotTable CreatePivotTable(AreaReference source, CellReference position, ISheet sourceSheet);
    public XSSFPivotTable CreatePivotTable(AreaReference source, CellReference position);
    public XSSFPivotTable CreatePivotTable(IName source, CellReference position, ISheet sourceSheet);
    public XSSFPivotTable CreatePivotTable(IName source, CellReference position);
    public XSSFPivotTable CreatePivotTable(ITable source, CellReference position);
    public List`1<XSSFPivotTable> GetPivotTables();
    public sealed virtual int GetColumnOutlineLevel(int columnIndex);
    public sealed virtual bool IsDate1904();
    public void AddIgnoredErrors(CellReference cell, IgnoredErrorType[] ignoredErrorTypes);
    public void AddIgnoredErrors(CellRangeAddress region, IgnoredErrorType[] ignoredErrorTypes);
    public Dictionary`2<IgnoredErrorType, ISet`1<CellRangeAddress>> GetIgnoredErrors();
    public sealed virtual IComment CopyComment(ICell sourceCell, ICell targetCell);
    private void InitHyperlinks();
    private void InitRows(CT_Worksheet worksheetParam);
    private static CT_Worksheet NewSheet();
    private int AddMergedRegion(CellRangeAddress region, bool validate);
    private void ValidateArrayFormulas(CellRangeAddress region);
    private void CheckForMergedRegionsIntersectingArrayFormulas();
    private void ValidateMergedRegions(CellRangeAddress candidateRegion);
    private void CheckForIntersectingMergedRegions();
    private int GetLastKey(IList`1<int> keys);
    private int HeadMapCount(IList`1<int> keys, int rownum);
    private CT_SheetFormatPr GetSheetTypeSheetFormatPr();
    private CT_SheetPr GetSheetTypeSheetPr();
    private CT_HeaderFooter GetSheetTypeHeaderFooter();
    private List`1<XSSFRow> GetRows(int startRowNum, int endRowNum, bool createRowIfMissing);
    private CT_OutlinePr EnsureOutlinePr();
    private void GroupColumn1Based(int fromColumn, int toColumn);
    private void SetColWidthAttribute(CT_Cols ctCols);
    private short GetMaxOutlineLevelRows();
    [ObsoleteAttribute]
private short GetMaxOutlineLevelCols();
    private bool ListIsEmpty(List`1<CT_MergeCell> list);
    private void CollapseColumn(int columnNumber);
    private void SetColumn(int targetColumnIx, Nullable`1<int> style, Nullable`1<int> level, Nullable`1<bool> hidden, Nullable`1<bool> collapsed);
    private void UnsetCollapsed(bool collapsed, CT_Col ci);
    private int SetGroupHidden(int pIdx, int level, bool hidden);
    private bool IsAdjacentBefore(CT_Col col, CT_Col other_col);
    private int FindStartOfColumnOutlineGroup(int pIdx);
    private int FindEndOfColumnOutlineGroup(int colInfoIndex);
    private void ExpandColumn(int columnIndex);
    private bool IsColumnGroupHiddenByParent(int idx);
    private int FindColInfoIdx(int columnValue, int fromColInfoIdx);
    private bool ContainsColumn(CT_Col col, int columnIndex);
    private bool IsColumnGroupCollapsed(int idx);
    private CT_SheetView GetSheetTypeSheetView();
    private void CollapseRow(int rowIndex);
    private int FindStartOfRowOutlineGroup(int rowIndex);
    private int WriteHidden(XSSFRow xRow, int rowIndex, bool hidden);
    private void ExpandRow(int rowNumber);
    private bool IsRowGroupHiddenByParent(int row);
    private bool IsRowGroupCollapsed(int row);
    private void RemoveOverwrittenRows(int startRow, int endRow, int n);
    private void RebuildRows();
    private void ShiftCommentsAndRows(int startRow, int endRow, int n, bool copyRowHeight);
    private void ValidateCellsForCopyComment(ICell sourceCell, ICell targetCell);
    private int ShiftedRowOrColumnNumber(int startIndex, int endIndex, int n, int index);
    private CT_Selection GetSheetTypeSelection();
    private CT_SheetView GetDefaultSheetView();
    private CT_PageSetUpPr GetSheetTypePageSetUpPr();
    private static bool ShouldRemoveAtIndex(int startIndex, int endIndex, int n, int currentIndex);
    private CT_Pane GetPane();
    private void SetSheetFormatPrOutlineLevelRow();
    private void SetSheetFormatPrOutlineLevelCol();
    private CT_SheetViews GetSheetTypeSheetViews();
    private CT_SheetProtection SafeGetProtectionField();
    private bool IsSheetProtectionEnabled();
    private ICellRange`1<ICell> GetCellRange(CellRangeAddress range);
    private static string GetReferenceBuiltInRecord(string sheetName, int startC, int endC, int startR, int endR);
    private CellRangeAddress GetRepeatingRowsOrColums(bool rows);
    private void SetRepeatingRowsAndColumns(CellRangeAddress rowDef, CellRangeAddress colDef);
    private void CopySheetImages(XSSFWorkbook destWorkbook, XSSFSheet destSheet);
    private XSSFPictureData FindPicture(IList`1<POIXMLDocumentPart> sheetPictures, string id);
    private static void CopyRow(XSSFSheet srcSheet, XSSFSheet destSheet, XSSFRow srcRow, XSSFRow destRow, IDictionary`2<int, ICellStyle> styleMap, bool keepFormulas, bool keepMergedRegion);
    private static void CopyCell(ICell oldCell, ICell newCell, IDictionary`2<int, ICellStyle> styleMap, bool keepFormulas);
    private XSSFPivotTable CreatePivotTable();
    private XSSFPivotTable CreatePivotTable(CellReference position, ISheet sourceSheet, IPivotTableReferenceConfigurator refConfig);
    private void AddIgnoredErrors(string ref1, IgnoredErrorType[] ignoredErrorTypes);
    private ISet`1<IgnoredErrorType> GetErrorTypes(CT_IgnoredError err);
    public void SetDefaultColWidth(int Width);
    [CompilerGeneratedAttribute]
public void set_MaximumDigitWidth(double value);
    [CompilerGeneratedAttribute]
public double get_MaximumDigitWidth();
    [ObsoleteAttribute("")]
public double GetDefaultColWidthInPixel();
    [ObsoleteAttribute("")]
public XSSFClientAnchor CreateClientAnchor(int dx1, int dy1, int dx2, int dy2);
    [ObsoleteAttribute("")]
private CT_Marker EMUtoMarker(int x, int y);
    [ObsoleteAttribute("")]
public int EMUtoRowOff(int y, Int32& cell);
    [ObsoleteAttribute("")]
public int EMUtoColOff(int x, Int32& cell);
}
public class NPOI.XSSF.UserModel.XSSFSheetConditionalFormatting : object {
    protected static string CF_EXT_2009_NS_X14;
    private XSSFSheet _sheet;
    public int NumConditionalFormattings { get; }
    internal XSSFSheetConditionalFormatting(XSSFSheet sheet);
    private static XSSFSheetConditionalFormatting();
    public sealed virtual IConditionalFormattingRule CreateConditionalFormattingRule(ComparisonOperator comparisonOperation, string formula1, string formula2);
    public sealed virtual IConditionalFormattingRule CreateConditionalFormattingRule(ComparisonOperator comparisonOperation, string formula);
    public sealed virtual IConditionalFormattingRule CreateConditionalFormattingRule(string formula);
    public sealed virtual IConditionalFormattingRule CreateConditionalFormattingRule(IconSet iconSet);
    public XSSFConditionalFormattingRule CreateConditionalFormattingRule(XSSFColor color);
    public sealed virtual IConditionalFormattingRule CreateConditionalFormattingRule(ExtendedColor color);
    public sealed virtual IConditionalFormattingRule CreateConditionalFormattingColorScaleRule();
    public sealed virtual int AddConditionalFormatting(CellRangeAddress[] regions, IConditionalFormattingRule[] cfRules);
    public sealed virtual int AddConditionalFormatting(CellRangeAddress[] regions, IConditionalFormattingRule rule1);
    public sealed virtual int AddConditionalFormatting(CellRangeAddress[] regions, IConditionalFormattingRule rule1, IConditionalFormattingRule rule2);
    public sealed virtual int AddConditionalFormatting(IConditionalFormatting cf);
    public sealed virtual IConditionalFormatting GetConditionalFormattingAt(int index);
    public sealed virtual int get_NumConditionalFormattings();
    public sealed virtual void RemoveConditionalFormatting(int index);
    private void CheckIndex(int index);
}
public class NPOI.XSSF.UserModel.XSSFSimpleShape : XSSFShape {
    private List`1<XSSFTextParagraph> _paragraphs;
    private static CT_Shape prototype;
    private CT_Shape ctShape;
    private static String[] _romanChars;
    private static Int32[] _romanAlphaValues;
    public UInt32 ID { get; }
    public string Name { get; public set; }
    public string Text { get; }
    public List`1<XSSFTextParagraph> TextParagraphs { get; }
    public TextHorizontalOverflow TextHorizontalOverflow { get; public set; }
    public TextVerticalOverflow TextVerticalOverflow { get; public set; }
    public VerticalAlignment VerticalAlignment { get; public set; }
    public TextDirection TextDirection { get; public set; }
    public double BottomInset { get; public set; }
    public double LeftInset { get; public set; }
    public double RightInset { get; public set; }
    public double TopInset { get; public set; }
    public bool WordWrap { get; public set; }
    public TextAutofit TextAutofit { get; public set; }
    public int ShapeType { get; public set; }
    protected internal XSSFSimpleShape(XSSFDrawing Drawing, CT_Shape ctShape);
    private static XSSFSimpleShape();
    protected internal static CT_Shape Prototype();
    public CT_Shape GetCTShape();
    public virtual UInt32 get_ID();
    public virtual string get_Name();
    public virtual void set_Name(string value);
    public sealed virtual IEnumerator`1<XSSFTextParagraph> GetEnumerator();
    private sealed virtual override IEnumerator System.Collections.IEnumerable.GetEnumerator();
    public string get_Text();
    private int ProcessAutoNumGroup(int index, int level, List`1<int> levelCount, StringBuilder out1);
    private string GetBulletPrefix(ListAutoNumber scheme, int value);
    private string valueToAlpha(int value);
    private string valueToRoman(int value);
    public void ClearText();
    public void SetText(string text);
    public void SetText(XSSFRichTextString str);
    public List`1<XSSFTextParagraph> get_TextParagraphs();
    public XSSFTextParagraph AddNewTextParagraph();
    public XSSFTextParagraph AddNewTextParagraph(string text);
    public XSSFTextParagraph AddNewTextParagraph(XSSFRichTextString str);
    public TextHorizontalOverflow get_TextHorizontalOverflow();
    public void set_TextHorizontalOverflow(TextHorizontalOverflow value);
    public TextVerticalOverflow get_TextVerticalOverflow();
    public void set_TextVerticalOverflow(TextVerticalOverflow value);
    public VerticalAlignment get_VerticalAlignment();
    public void set_VerticalAlignment(VerticalAlignment value);
    public TextDirection get_TextDirection();
    public void set_TextDirection(TextDirection value);
    public double get_BottomInset();
    public void set_BottomInset(double value);
    public double get_LeftInset();
    public void set_LeftInset(double value);
    public double get_RightInset();
    public void set_RightInset(double value);
    public double get_TopInset();
    public void set_TopInset(double value);
    public bool get_WordWrap();
    public void set_WordWrap(bool value);
    public TextAutofit get_TextAutofit();
    public void set_TextAutofit(TextAutofit value);
    public int get_ShapeType();
    public void set_ShapeType(int value);
    protected internal virtual CT_ShapeProperties GetShapeProperties();
    private static void ApplyAttributes(CT_RPrElt pr, CT_TextCharacterProperties rPr);
}
public class NPOI.XSSF.UserModel.XSSFTable : POIXMLDocumentPart {
    private CT_Table ctTable;
    private List`1<XSSFXmlColumnPr> xmlColumnPrs;
    private List`1<XSSFTableColumn> tableColumns;
    private Dictionary`2<string, int> columnMap;
    private CellReference startCellReference;
    private CellReference endCellReference;
    private string commonXPath;
    private string name;
    private string styleName;
    public string Name { get; public set; }
    public string StyleName { get; public set; }
    public ITableStyleInfo Style { get; }
    public string DisplayName { get; public set; }
    [ObsoleteAttribute]
public long NumberOfMappedColumns { get; }
    public int ColumnCount { get; }
    public int TotalsRowCount { get; }
    public int HeaderRowCount { get; }
    public CellReference StartCellReference { get; }
    public CellReference EndCellReference { get; }
    public int RowCount { get; }
    public string SheetName { get; }
    public bool IsHasTotalsRow { get; public set; }
    public int StartColIndex { get; }
    public int StartRowIndex { get; }
    public int EndColIndex { get; }
    public int EndRowIndex { get; }
    internal XSSFTable(PackagePart part);
    [ObsoleteAttribute("deprecated in POI 3.14, scheduled for removal in POI 3.16")]
protected XSSFTable(PackagePart part, PackageRelationship rel);
    public void ReadFrom(XmlDocument xmlDoc);
    public XSSFSheet GetXSSFSheet();
    public void WriteTo(Stream out1);
    protected internal virtual void Commit();
    public CT_Table GetCTTable();
    public bool MapsTo(long id);
    public string GetCommonXpath();
    [ObsoleteAttribute]
public List`1<XSSFXmlColumnPr> GetXmlColumnPrs();
    public sealed virtual string get_Name();
    public void set_Name(string value);
    public XSSFTableColumn CreateColumn(string columnName);
    public XSSFTableColumn CreateColumn(string columnName, int columnIndex);
    public AreaReference GetCellReferences();
    public void SetCellReferences(AreaReference refs);
    protected void SetCellRef(AreaReference refs);
    public string get_StyleName();
    public void set_StyleName(string value);
    public ITableStyleInfo get_Style();
    public string get_DisplayName();
    public void set_DisplayName(string value);
    public long get_NumberOfMappedColumns();
    public int get_ColumnCount();
    public int get_TotalsRowCount();
    public int get_HeaderRowCount();
    public CellReference get_StartCellReference();
    public CellReference get_EndCellReference();
    private void SetCellReferences();
    public void UpdateReferences();
    public int get_RowCount();
    public void UpdateHeaders();
    public sealed virtual int FindColumnIndex(string columnHeader);
    public List`1<XSSFTableColumn> GetColumns();
    public void RemoveColumn(XSSFTableColumn column);
    public sealed virtual string get_SheetName();
    public sealed virtual bool get_IsHasTotalsRow();
    public void set_IsHasTotalsRow(bool value);
    public sealed virtual int get_StartColIndex();
    public sealed virtual int get_StartRowIndex();
    public sealed virtual int get_EndColIndex();
    public sealed virtual int get_EndRowIndex();
    public bool Contains(CellReference cell);
}
public class NPOI.XSSF.UserModel.XSSFTableColumn : object {
    private XSSFTable table;
    private CT_TableColumn ctTableColumn;
    private XSSFXmlColumnPr xmlColumnPr;
    public long Id { get; public set; }
    public string Name { get; public set; }
    public int ColumnIndex { get; }
    internal XSSFTableColumn(XSSFTable table, CT_TableColumn ctTableColumn);
    public XSSFTable GetTable();
    public long get_Id();
    public void set_Id(long value);
    public string get_Name();
    public void set_Name(string value);
    public XSSFXmlColumnPr GetXmlColumnPr();
    public int get_ColumnIndex();
}
public class NPOI.XSSF.UserModel.XSSFTextBox : XSSFSimpleShape {
    internal XSSFTextBox(XSSFDrawing drawing, CT_Shape ctShape);
}
public class NPOI.XSSF.UserModel.XSSFTextParagraph : object {
    private CT_TextParagraph _p;
    private CT_Shape _shape;
    private List`1<XSSFTextRun> _Runs;
    public string Text { get; }
    public CT_Shape ParentShape { get; }
    public List`1<XSSFTextRun> TextRuns { get; }
    public TextAlign TextAlign { get; public set; }
    public TextFontAlign TextFontAlign { get; public set; }
    public string BulletFont { get; public set; }
    public string BulletCharacter { get; public set; }
    public Rgb24 BulletFontColor { get; public set; }
    public double BulletFontSize { get; public set; }
    public double Indent { get; public set; }
    public double LeftMargin { get; public set; }
    public double RightMargin { get; public set; }
    public double DefaultTabSize { get; }
    public double LineSpacing { get; public set; }
    public double SpaceBefore { get; public set; }
    public double SpaceAfter { get; public set; }
    public int Level { get; public set; }
    public bool IsBullet { get; public set; }
    public bool IsBulletAutoNumber { get; }
    public int BulletAutoNumberStart { get; }
    public ListAutoNumber BulletAutoNumberScheme { get; }
    public XSSFTextRun Current { get; }
    private object System.Collections.IEnumerator.Current { get; }
    public XSSFTextParagraph(CT_TextParagraph p, CT_Shape ctShape);
    public string get_Text();
    public CT_TextParagraph GetXmlObject();
    public CT_Shape get_ParentShape();
    public List`1<XSSFTextRun> get_TextRuns();
    public XSSFTextRun AddNewTextRun();
    public XSSFTextRun AddLineBreak();
    public TextAlign get_TextAlign();
    public void set_TextAlign(TextAlign value);
    public TextFontAlign get_TextFontAlign();
    public void set_TextFontAlign(TextFontAlign value);
    public string get_BulletFont();
    public void set_BulletFont(string value);
    public string get_BulletCharacter();
    public void set_BulletCharacter(string value);
    public Rgb24 get_BulletFontColor();
    public void set_BulletFontColor(Rgb24 value);
    public double get_BulletFontSize();
    public void set_BulletFontSize(double value);
    public double get_Indent();
    public void set_Indent(double value);
    public double get_LeftMargin();
    public void set_LeftMargin(double value);
    public double get_RightMargin();
    public void set_RightMargin(double value);
    public double get_DefaultTabSize();
    public double GetTabStop(int idx);
    public void AddTabStop(double value);
    public double get_LineSpacing();
    public void set_LineSpacing(double value);
    public double get_SpaceBefore();
    public void set_SpaceBefore(double value);
    public double get_SpaceAfter();
    public void set_SpaceAfter(double value);
    public int get_Level();
    public void set_Level(int value);
    public bool get_IsBullet();
    public void set_IsBullet(bool value);
    public void SetBullet(bool flag);
    public void SetBullet(ListAutoNumber scheme, int startAt);
    public void SetBullet(ListAutoNumber scheme);
    public bool get_IsBulletAutoNumber();
    public int get_BulletAutoNumberStart();
    public ListAutoNumber get_BulletAutoNumberScheme();
    private bool fetchParagraphProperty(ParagraphPropertyFetcher visitor);
    public virtual string ToString();
    public sealed virtual XSSFTextRun get_Current();
    public sealed virtual void Dispose();
    private sealed virtual override object System.Collections.IEnumerator.get_Current();
    public sealed virtual bool MoveNext();
    public sealed virtual void Reset();
    public sealed virtual IEnumerator`1<XSSFTextRun> GetEnumerator();
    private sealed virtual override IEnumerator System.Collections.IEnumerable.GetEnumerator();
}
public class NPOI.XSSF.UserModel.XSSFTextRun : object {
    private CT_RegularTextRun _r;
    private XSSFTextParagraph _p;
    public XSSFTextParagraph ParentParagraph { get; }
    public string Text { get; public set; }
    public Rgb24 FontColor { get; public set; }
    public double FontSize { get; public set; }
    public double CharacterSpacing { get; public set; }
    public string FontFamily { get; }
    public byte PitchAndFamily { get; }
    public bool IsStrikethrough { get; public set; }
    public bool IsSuperscript { get; public set; }
    public bool IsSubscript { get; public set; }
    public TextCap TextCap { get; }
    public bool IsBold { get; public set; }
    public bool IsItalic { get; public set; }
    public bool IsUnderline { get; public set; }
    public XSSFTextRun(CT_RegularTextRun r, XSSFTextParagraph p);
    public XSSFTextParagraph get_ParentParagraph();
    public string get_Text();
    public void set_Text(string value);
    public CT_RegularTextRun GetXmlObject();
    public Rgb24 get_FontColor();
    public void set_FontColor(Rgb24 value);
    public double get_FontSize();
    public void set_FontSize(double value);
    public double get_CharacterSpacing();
    public void set_CharacterSpacing(double value);
    public void SetFont(string typeface);
    public void SetFontFamily(string typeface, byte charset, byte pictAndFamily, bool isSymbol);
    public string get_FontFamily();
    public byte get_PitchAndFamily();
    public bool get_IsStrikethrough();
    public void set_IsStrikethrough(bool value);
    public bool get_IsSuperscript();
    public void set_IsSuperscript(bool value);
    public void SetBaselineOffset(double baselineOffset);
    public bool get_IsSubscript();
    public void set_IsSubscript(bool value);
    public TextCap get_TextCap();
    public bool get_IsBold();
    public void set_IsBold(bool value);
    public bool get_IsItalic();
    public void set_IsItalic(bool value);
    public bool get_IsUnderline();
    public void set_IsUnderline(bool value);
    internal CT_TextCharacterProperties GetRPr();
    public virtual string ToString();
}
public class NPOI.XSSF.UserModel.XSSFVBAPart : POIXMLDocumentPart {
    public XSSFVBAPart(PackagePart part);
    [ObsoleteAttribute("deprecated in POI 3.14, scheduled for removal in POI 3.16")]
protected XSSFVBAPart(PackagePart part, PackageRelationship rel);
    protected internal virtual void PrepareForCommit();
}
public class NPOI.XSSF.UserModel.XSSFVMLDrawing : POIXMLDocumentPart {
    private static XmlQualifiedName QNAME_SHAPE_LAYOUT;
    private static XmlQualifiedName QNAME_SHAPE_TYPE;
    private static XmlQualifiedName QNAME_SHAPE;
    private static string COMMENT_SHAPE_TYPE_ID;
    private static Regex ptrn_shapeId;
    private static Regex ptrn_shapeTypeId;
    private ArrayList _items;
    private string _shapeTypeId;
    private int _shapeId;
    protected XSSFVMLDrawing(PackagePart part);
    [ObsoleteAttribute("deprecated in POI 3.14, scheduled for removal in POI 3.16")]
protected XSSFVMLDrawing(PackagePart part, PackageRelationship rel);
    private static XSSFVMLDrawing();
    internal void Read(Stream is1);
    internal ArrayList GetItems();
    internal void Write(Stream out1);
    protected internal virtual void Commit();
    private void newDrawing();
    internal CT_Shape newCommentShape();
    internal CT_Shape FindCommentShape(int row, int col);
    internal bool RemoveCommentShape(int row, int col);
}
[DefaultMemberAttribute("Item")]
public class NPOI.XSSF.UserModel.XSSFWorkbook : POIXMLDocument {
    private static Regex COMMA_PATTERN;
    public static float DEFAULT_CHARACTER_WIDTH;
    private static int Max_SENSITIVE_SHEET_NAME_LEN;
    public static int PICTURE_TYPE_EMF;
    public static int PICTURE_TYPE_WMF;
    public static int PICTURE_TYPE_PICT;
    public static int PICTURE_TYPE_JPEG;
    public static int PICTURE_TYPE_PNG;
    public static int PICTURE_TYPE_DIB;
    public static int PICTURE_TYPE_GIF;
    public static int PICTURE_TYPE_TIFF;
    public static int PICTURE_TYPE_EPS;
    public static int PICTURE_TYPE_BMP;
    public static int PICTURE_TYPE_WPG;
    public static int PICTURE_TYPE_JPG;
    private CT_Workbook workbook;
    private List`1<XSSFSheet> sheets;
    private Dictionary`2<string, List`1<XSSFName>> namedRangesByName;
    private List`1<XSSFName> namedRanges;
    private SharedStringsTable sharedStringSource;
    private StylesTable stylesSource;
    private IndexedUDFFinder _udfFinder;
    private CalculationChain calcChain;
    private List`1<ExternalLinksTable> externalLinks;
    private MapInfo mapInfo;
    private XSSFDataFormat formatter;
    private MissingCellPolicy _missingCellPolicy;
    private bool cellFormulaValidation;
    private List`1<XSSFPictureData> pictures;
    private static POILogger logger;
    private XSSFCreationHelper _creationHelper;
    private List`1<XSSFPivotTable> pivotTables;
    private List`1<CT_PivotCache> pivotCaches;
    private WorkbookDocument doc;
    public int ActiveSheetIndex { get; }
    public int NumCellStyles { get; }
    public short NumberOfFonts { get; }
    public int NumberOfNames { get; }
    public int NumberOfSheets { get; }
    public MissingCellPolicy MissingCellPolicy { get; public set; }
    public int FirstVisibleTab { get; public set; }
    public bool IsHidden { get; public set; }
    public List`1<ExternalLinksTable> ExternalLinksTable { get; }
    public SpreadsheetVersion SpreadsheetVersion { get; }
    public List`1<XSSFPivotTable> PivotTables { get; public set; }
    public bool CellFormulaValidation { get; public set; }
    public XSSFWorkbookType WorkbookType { get; public set; }
    public ISheet Item { get; public set; }
    public int Count { get; }
    public bool IsReadOnly { get; }
    public XSSFWorkbook(XSSFWorkbookType workbookType);
    public XSSFWorkbook(OPCPackage pkg);
    public XSSFWorkbook(Stream fileStream, bool readOnly);
    public XSSFWorkbook(FileInfo file, bool readOnly);
    public XSSFWorkbook(string path, bool readOnly);
    private static XSSFWorkbook();
    protected void BeforeDocumentRead();
    internal virtual void OnDocumentRead();
    private void ParseSheet(Dictionary`2<string, XSSFSheet> shIdMap, CT_Sheet ctSheet);
    private void OnWorkbookCreate();
    protected static OPCPackage newPackage(XSSFWorkbookType workbookType);
    public CT_Workbook GetCTWorkbook();
    public int AddPicture(Byte[] pictureData, int format);
    public int AddPicture(Stream picStream, int format);
    public sealed virtual ISheet CloneSheet(int sheetNum);
    public ISheet CloneSheet(int sheetNum, string newName);
    private static void AddRelation(RelationPart rp, POIXMLDocumentPart target);
    private string GetUniqueSheetName(string srcName);
    public sealed virtual ICellStyle CreateCellStyle();
    public sealed virtual IDataFormat CreateDataFormat();
    public sealed virtual IFont CreateFont();
    public sealed virtual IName CreateName();
    private void PutValuesMapping(string key, XSSFName name);
    private XSSFName CreateAndStoreName(CT_DefinedName ctName);
    public sealed virtual ISheet CreateSheet();
    public sealed virtual ISheet CreateSheet(string sheetname);
    private void ValidateSheetName(string sheetName);
    protected XSSFDialogsheet CreateDialogsheet(string sheetname, CT_Dialogsheet dialogsheet);
    private CT_Sheet AddSheet(string sheetname);
    [ObsoleteAttribute("deprecated POI 3.15. Use {@link #findFont(boolean, short, short, String, boolean, boolean, short, byte)} instead.")]
public sealed virtual IFont FindFont(short boldWeight, short color, short fontHeight, string name, bool italic, bool strikeout, FontSuperScript typeOffset, FontUnderlineType underline);
    public sealed virtual IFont FindFont(bool bold, short color, short fontHeight, string name, bool italic, bool strikeout, FontSuperScript typeOffset, FontUnderlineType underline);
    public sealed virtual int get_ActiveSheetIndex();
    public sealed virtual IList GetAllPictures();
    public sealed virtual ICellStyle GetCellStyleAt(int idx);
    public sealed virtual IFont GetFontAt(short idx);
    public sealed virtual IName GetName(string name);
    public sealed virtual IList`1<IName> GetNames(string name);
    [ObsoleteAttribute("deprecated 3.16. New projects should avoid accessing named ranges by index.")]
public sealed virtual IName GetNameAt(int nameIndex);
    public sealed virtual IList`1<IName> GetAllNames();
    [ObsoleteAttribute("deprecated 3.16. New projects should avoid accessing named ranges by index. Use {@link #getName(String)} instead.")]
public sealed virtual int GetNameIndex(string name);
    public sealed virtual int get_NumCellStyles();
    public sealed virtual short get_NumberOfFonts();
    public sealed virtual int get_NumberOfNames();
    public sealed virtual int get_NumberOfSheets();
    public sealed virtual string GetPrintArea(int sheetIndex);
    public sealed virtual ISheet GetSheet(string name);
    public sealed virtual ISheet GetSheetAt(int index);
    public sealed virtual int GetSheetIndex(string name);
    public sealed virtual int GetSheetIndex(ISheet sheet);
    public sealed virtual string GetSheetName(int sheetIx);
    public sealed virtual IEnumerator`1<ISheet> GetEnumerator();
    public bool IsMacroEnabled();
    [ObsoleteAttribute("deprecated 3.16. New projects should use {@link #removeName(Name)}.")]
public sealed virtual void RemoveName(int nameIndex);
    public sealed virtual void RemoveName(string name);
    private bool RemoveMapping(string key, XSSFName item);
    public sealed virtual void RemoveName(IName name);
    internal void UpdateName(XSSFName name, string oldName);
    public sealed virtual void RemovePrintArea(int sheetIndex);
    public sealed virtual void RemoveSheetAt(int index);
    private void OnSheetDelete(int index);
    public sealed virtual MissingCellPolicy get_MissingCellPolicy();
    public sealed virtual void set_MissingCellPolicy(MissingCellPolicy value);
    private void ValidateSheetIndex(int index);
    public sealed virtual int get_FirstVisibleTab();
    public sealed virtual void set_FirstVisibleTab(int value);
    public sealed virtual void SetPrintArea(int sheetIndex, string reference);
    public sealed virtual void SetPrintArea(int sheetIndex, int startColumn, int endColumn, int startRow, int endRow);
    private static string GetReferenceBuiltInRecord(string sheetName, int startC, int endC, int startR, int endR);
    private static string GetReferencePrintArea(string sheetName, int startC, int endC, int startR, int endR);
    public XSSFName GetBuiltInName(string builtInCode, int sheetNumber);
    internal XSSFName CreateBuiltInName(string builtInName, int sheetNumber);
    public sealed virtual void SetSelectedTab(int index);
    public sealed virtual void SetSheetName(int sheetIndex, string sheetname);
    public sealed virtual void SetSheetOrder(string sheetname, int pos);
    private void UpdateNamedRangesAfterSheetReorder(int oldIndex, int newIndex);
    private void UpdateActiveSheetAfterSheetReorder(int oldIndex, int newIndex);
    private void SaveNamedRanges();
    private void ReprocessNamedRanges();
    private void SaveCalculationChain();
    protected internal virtual void Commit();
    public sealed virtual void Write(Stream stream, bool leaveOpen);
    public SharedStringsTable GetSharedStringSource();
    public StylesTable GetStylesSource();
    public ThemesTable GetTheme();
    public sealed virtual ICreationHelper GetCreationHelper();
    private bool ContainsSheet(string name, int excludeSheetIdx);
    public sealed virtual bool IsDate1904();
    public virtual List`1<PackagePart> GetAllEmbedds();
    public sealed virtual bool get_IsHidden();
    public sealed virtual void set_IsHidden(bool value);
    public sealed virtual bool IsSheetHidden(int sheetIx);
    public sealed virtual bool IsSheetVeryHidden(int sheetIx);
    public void SetSheetHidden(int sheetIx, bool hidden);
    public sealed virtual void SetSheetHidden(int sheetIx, SheetState state);
    public sealed virtual void SetSheetHidden(int sheetIx, int hidden);
    internal void OnDeleteFormula(XSSFCell cell);
    public CalculationChain GetCalculationChain();
    public List`1<ExternalLinksTable> get_ExternalLinksTable();
    public List`1<XSSFMap> GetCustomXMLMappings();
    public MapInfo GetMapInfo();
    public sealed virtual int LinkExternalWorkbook(string name, IWorkbook workbook);
    public bool IsStructureLocked();
    public bool IsWindowsLocked();
    public bool IsRevisionLocked();
    public void LockStructure();
    public void UnlockStructure();
    public void LockWindows();
    public void UnlockWindows();
    public void LockRevision();
    public void UnlockRevision();
    public void RemovePivotTables();
    private bool WorkbookProtectionPresent();
    private void CreateProtectionFieldIfNotPresent();
    internal UDFFinder GetUDFFinder();
    public sealed virtual void AddToolPack(UDFFinder toopack);
    public void SetForceFormulaRecalculation(bool value);
    public bool GetForceFormulaRecalculation();
    public sealed virtual SpreadsheetVersion get_SpreadsheetVersion();
    public XSSFTable GetTable(string name);
    public sealed virtual void SetActiveSheet(int sheetIndex);
    protected internal CT_PivotCache AddPivotCache(string rId);
    public List`1<XSSFPivotTable> get_PivotTables();
    public void set_PivotTables(List`1<XSSFPivotTable> value);
    public bool get_CellFormulaValidation();
    public void set_CellFormulaValidation(bool value);
    public sealed virtual int AddPicture(Byte[] pictureData, PictureType format);
    public XSSFWorkbookType get_WorkbookType();
    public void set_WorkbookType(XSSFWorkbookType value);
    public void SetVBAProject(Stream vbaProjectStream);
    public void SetVBAProject(XSSFWorkbook macroWorkbook);
    public int IndexOf(ISheet item);
    public void Insert(int index, ISheet item);
    public void RemoveAt(int index);
    public ISheet get_Item(int index);
    public void set_Item(int index, ISheet value);
    public void Add(ISheet item);
    public void Clear();
    public bool Contains(ISheet item);
    public void CopyTo(ISheet[] array, int arrayIndex);
    public int get_Count();
    public bool get_IsReadOnly();
    public bool Remove(ISheet item);
    public sealed virtual void Dispose();
}
public class NPOI.XSSF.UserModel.XSSFWorkbookType : object {
    public static XSSFWorkbookType XLSX;
    public static XSSFWorkbookType XLSM;
    private string _contentType;
    private string _extension;
    public string ContentType { get; }
    public string Extension { get; }
    private XSSFWorkbookType(string contentType, string extension);
    private static XSSFWorkbookType();
    public string get_ContentType();
    public string get_Extension();
}
public class NPOI.XSSF.Util.CTColComparator : Comparer`1<CT_Col> {
    public static IComparer`1<CT_Col> BY_MAX;
    public static IComparer`1<CT_Col> BY_MIN_MAX;
    private static CTColComparator();
    public virtual int Compare(CT_Col o1, CT_Col o2);
}
public class NPOI.XSSF.Util.EvilUnclosedBRFixingInputStream : Stream {
    private Stream source;
    private Byte[] spare;
    private static Byte[] detect;
    public bool CanRead { get; }
    public bool CanSeek { get; }
    public bool CanWrite { get; }
    public long Length { get; }
    public long Position { get; public set; }
    public EvilUnclosedBRFixingInputStream(Stream source);
    private static EvilUnclosedBRFixingInputStream();
    public int Read();
    public virtual int Read(Byte[] b, int off, int len);
    public int Read(Byte[] b);
    private int ReadFromSpare(Byte[] b, int offset, int len);
    private void AddToSpare(Byte[] b, int offset, int len, bool atTheEnd);
    private int fixUp(Byte[] b, int offset, int read);
    public virtual bool get_CanRead();
    public virtual bool get_CanSeek();
    public virtual bool get_CanWrite();
    public virtual void Flush();
    public virtual long get_Length();
    public virtual long get_Position();
    public virtual void set_Position(long value);
    public virtual long Seek(long offset, SeekOrigin origin);
    public virtual void SetLength(long value);
    public virtual void Write(Byte[] buffer, int offset, int count);
}
public class NPOI.XSSF.Util.NumericRanges : object {
    public static int NO_OVERLAPS;
    public static int OVERLAPS_1_MINOR;
    public static int OVERLAPS_2_MINOR;
    public static int OVERLAPS_1_WRAPS;
    public static int OVERLAPS_2_WRAPS;
    public static Int64[] GetOverlappingRange(Int64[] range1, Int64[] range2);
    public static int GetOverlappingType(Int64[] range1, Int64[] range2);
}
[ObsoleteAttribute]
public class NPOI.XSSF.Util.XmlEnumParser`1 : object {
    private static Dictionary`2<string, TReturn> values;
    private static XmlEnumParser`1();
    public static TReturn ForName(string name, TReturn defaultValue);
}
public class NPOI.XSSF.XLSBUnsupportedException : UnsupportedFileFormatException {
    public static string MESSAGE;
    private static XLSBUnsupportedException();
}
public class NPOI.XWPF.Extractor.XWPFWordExtractor : POIXMLTextExtractor {
    public static XWPFRelation[] SUPPORTED_TYPES;
    private XWPFDocument document;
    private bool fetchHyperlinks;
    public string Text { get; }
    public XWPFWordExtractor(OPCPackage Container);
    public XWPFWordExtractor(XWPFDocument document);
    private static XWPFWordExtractor();
    public void SetFetchHyperlinks(bool fetch);
    public virtual string get_Text();
    public void AppendBodyElementText(StringBuilder text, IBodyElement e);
    public void AppendParagraphText(StringBuilder text, XWPFParagraph paragraph);
    private void AppendTableText(StringBuilder text, XWPFTable table);
    private void ExtractFooters(StringBuilder text, XWPFHeaderFooterPolicy hfPolicy);
    private void ExtractHeaders(StringBuilder text, XWPFHeaderFooterPolicy hfPolicy);
}
public class NPOI.XWPF.Model.WMLHelper : object {
    public static bool ConvertSTOnOffToBoolean(ST_OnOff value);
    public static ST_OnOff ConvertBooleanToSTOnOff(bool value);
}
[ObsoleteAttribute("deprecated 3.16 beta1, scheduled for removal in 3.18")]
public class NPOI.XWPF.Model.XMLParagraph : object {
    protected CT_P paragraph;
    public XMLParagraph(CT_P paragraph);
    public CT_P GetCTP();
}
public class NPOI.XWPF.Model.XWPFCommentsDecorator : XWPFParagraphDecorator {
    private StringBuilder commentText;
    public string Text { get; }
    public XWPFCommentsDecorator(XWPFParagraphDecorator nextDecorator);
    public XWPFCommentsDecorator(XWPFParagraph paragraph, XWPFParagraphDecorator nextDecorator);
    public string GetCommentText();
    public virtual string get_Text();
}
public class NPOI.XWPF.Model.XWPFHeaderFooterPolicy : object {
    public static ST_HdrFtr DEFAULT;
    public static ST_HdrFtr EVEN;
    public static ST_HdrFtr FIRST;
    private XWPFDocument doc;
    private XWPFHeader firstPageHeader;
    private XWPFFooter firstPageFooter;
    private XWPFHeader evenPageHeader;
    private XWPFFooter evenPageFooter;
    private XWPFHeader defaultHeader;
    private XWPFFooter defaultFooter;
    public XWPFHeaderFooterPolicy(XWPFDocument doc);
    public XWPFHeaderFooterPolicy(XWPFDocument doc, CT_SectPr sectPr);
    private static XWPFHeaderFooterPolicy();
    private void assignFooter(XWPFFooter ftr, ST_HdrFtr type);
    private void assignHeader(XWPFHeader hdr, ST_HdrFtr type);
    public XWPFHeader CreateHeader(ST_HdrFtr type);
    public XWPFHeader CreateHeader(ST_HdrFtr type, XWPFParagraph[] pars);
    public XWPFFooter CreateFooter(ST_HdrFtr type);
    public XWPFFooter CreateFooter(ST_HdrFtr type, XWPFParagraph[] pars);
    private int GetRelationIndex(XWPFRelation relation);
    private CT_HdrFtr buildFtr(ST_HdrFtr type, string pStyle, XWPFHeaderFooter wrapper, XWPFParagraph[] pars);
    private CT_HdrFtr buildHdr(ST_HdrFtr type, string pStyle, XWPFHeaderFooter wrapper, XWPFParagraph[] pars);
    private CT_HdrFtr buildHdrFtr(string pStyle, XWPFParagraph[] paragraphs, XWPFHeaderFooter wrapper);
    private void SetFooterReference(ST_HdrFtr type, XWPFHeaderFooter wrapper);
    private void SetHeaderReference(ST_HdrFtr type, XWPFHeaderFooter wrapper);
    private XmlSerializerNamespaces Commit(XWPFHeaderFooter wrapper);
    public XWPFHeader GetFirstPageHeader();
    public XWPFFooter GetFirstPageFooter();
    public XWPFHeader GetOddPageHeader();
    public XWPFFooter GetOddPageFooter();
    public XWPFHeader GetEvenPageHeader();
    public XWPFFooter GetEvenPageFooter();
    public XWPFHeader GetDefaultHeader();
    public XWPFFooter GetDefaultFooter();
    public XWPFHeader GetHeader(int pageNumber);
    public XWPFHeader GetHeader(ST_HdrFtr type);
    public XWPFFooter GetFooter(int pageNumber);
    public XWPFFooter GetFooter(ST_HdrFtr type);
    public void CreateWatermark(string text);
    private XWPFParagraph GetWatermarkParagraph(string text, int idx);
}
public abstract class NPOI.XWPF.Model.XWPFParagraphDecorator : object {
    internal XWPFParagraph paragraph;
    internal XWPFParagraphDecorator nextDecorator;
    public string Text { get; }
    public XWPFParagraphDecorator(XWPFParagraph paragraph);
    public XWPFParagraphDecorator(XWPFParagraph paragraph, XWPFParagraphDecorator nextDecorator);
    public virtual string get_Text();
}
public abstract class NPOI.XWPF.UserModel.AbstractXWPFSDT : object {
    private string title;
    private string tag;
    private IBody part;
    public ISDTContent Content { get; }
    public AbstractXWPFSDT(CT_SdtPr pr, IBody part);
    public string GetTitle();
    public string GetTag();
    public abstract virtual ISDTContent get_Content();
    public IBody GetBody();
    public POIXMLDocumentPart GetPart();
    public BodyType GetPartType();
    public BodyElementType GetElementType();
    public XWPFDocument GetDocument();
}
public enum NPOI.XWPF.UserModel.BodyElementType : Enum {
    public int value__;
    public static BodyElementType CONTENTCONTROL;
    public static BodyElementType PARAGRAPH;
    public static BodyElementType TABLE;
}
public enum NPOI.XWPF.UserModel.BodyType : Enum {
    public int value__;
    public static BodyType CONTENTCONTROL;
    public static BodyType DOCUMENT;
    public static BodyType HEADER;
    public static BodyType FOOTER;
    public static BodyType FOOTNOTE;
    public static BodyType TABLECELL;
    public static BodyType COMMENT;
}
public enum NPOI.XWPF.UserModel.Borders : Enum {
    public int value__;
    public static Borders Nil;
    public static Borders None;
    public static Borders Single;
    public static Borders Thick;
    public static Borders Double;
    public static Borders Dotted;
    public static Borders Dashed;
    public static Borders DotDash;
    public static Borders DotDotDash;
    public static Borders Triple;
    public static Borders ThinThickSmallGap;
    public static Borders ThickThinSmallGap;
    public static Borders ThinThickThinSmallGap;
    public static Borders ThinThickMediumGap;
    public static Borders ThickThinMediumGap;
    public static Borders ThinThickThinMediumGap;
    public static Borders ThinThickLargeGap;
    public static Borders ThickThinLargeGap;
    public static Borders ThinThickThinLargeGap;
    public static Borders Wave;
    public static Borders DoubleWave;
    public static Borders DashSmallGap;
    public static Borders DashDotStroked;
    public static Borders ThreeDEmboss;
    public static Borders ThreeDEngrave;
    public static Borders Outset;
    public static Borders Inset;
    public static Borders Apples;
    public static Borders ArchedScallops;
    public static Borders BabyPacifier;
    public static Borders BabyRattle;
    public static Borders Balloons3Colors;
    public static Borders BalloonsHotAir;
    public static Borders BasicBlackDashes;
    public static Borders BasicBlackDots;
    public static Borders BasicBlackSquares;
    public static Borders BasicThinLines;
    public static Borders BasicWhiteDashes;
    public static Borders BasicWhiteDots;
    public static Borders BasicWhiteSquares;
    public static Borders BasicWideInline;
    public static Borders BasicWideMidline;
    public static Borders BasicWideOutline;
    public static Borders Bats;
    public static Borders Birds;
    public static Borders BirdsFlight;
    public static Borders Cabins;
    public static Borders CakeSlice;
    public static Borders CandyCorn;
    public static Borders CelticKnotwork;
    public static Borders CertificateBanner;
    public static Borders ChainLink;
    public static Borders ChampagneBottle;
    public static Borders CheckedBarBlack;
    public static Borders CheckedBarColor;
    public static Borders Checkered;
    public static Borders ChristmasTree;
    public static Borders CirclesLines;
    public static Borders CirclesRectangles;
    public static Borders ClassicalWave;
    public static Borders Clocks;
    public static Borders Compass;
    public static Borders Confetti;
    public static Borders ConfettiGrays;
    public static Borders ConfettiOutline;
    public static Borders ConfettiStreamers;
    public static Borders ConfettiWhite;
    public static Borders CornerTriangles;
    public static Borders CouponCutoutDashes;
    public static Borders CouponCutoutDots;
    public static Borders CrazyMaze;
    public static Borders CreaturesButterfly;
    public static Borders CreaturesFish;
    public static Borders CreaturesInsects;
    public static Borders CreaturesLadyBug;
    public static Borders CrossStitch;
    public static Borders Cup;
    public static Borders DecoArch;
    public static Borders DecoArchColor;
    public static Borders DecoBlocks;
    public static Borders DiamondsGray;
    public static Borders DoubleD;
    public static Borders DoubleDiamonds;
    public static Borders Earth1;
    public static Borders Earth2;
    public static Borders EclipsingSquares1;
    public static Borders EclipsingSquares2;
    public static Borders EggsBlack;
    public static Borders Fans;
    public static Borders Film;
    public static Borders Firecrackers;
    public static Borders FlowersBlockPrint;
    public static Borders FlowersDaisies;
    public static Borders FlowersModern1;
    public static Borders FlowersModern2;
    public static Borders FlowersPansy;
    public static Borders FlowersRedRose;
    public static Borders FlowersRoses;
    public static Borders FlowersTeacup;
    public static Borders FlowersTiny;
    public static Borders Gems;
    public static Borders GingerbreadMan;
    public static Borders Gradient;
    public static Borders Handmade1;
    public static Borders Handmade2;
    public static Borders HeartBalloon;
    public static Borders HeartGray;
    public static Borders Hearts;
    public static Borders HeebieJeebies;
    public static Borders Holly;
    public static Borders HouseFunky;
    public static Borders Hypnotic;
    public static Borders IceCreamCones;
    public static Borders LightBulb;
    public static Borders Lightning1;
    public static Borders Lightning2;
    public static Borders MapPins;
    public static Borders MapleLeaf;
    public static Borders MapleMuffins;
    public static Borders Marquee;
    public static Borders MarqueeToothed;
    public static Borders Moons;
    public static Borders Mosaic;
    public static Borders MusicNotes;
    public static Borders Northwest;
    public static Borders Ovals;
    public static Borders Packages;
    public static Borders PalmsBlack;
    public static Borders PalmsColor;
    public static Borders PaperClips;
    public static Borders Papyrus;
    public static Borders PartyFavor;
    public static Borders PartyGlass;
    public static Borders Pencils;
    public static Borders People;
    public static Borders PeopleWaving;
    public static Borders PeopleHats;
    public static Borders Poinsettias;
    public static Borders PostageStamp;
    public static Borders Pumpkin1;
    public static Borders PushPinNote2;
    public static Borders PushPinNote1;
    public static Borders Pyramids;
    public static Borders PyramidsAbove;
    public static Borders Quadrants;
    public static Borders Rings;
    public static Borders Safari;
    public static Borders Sawtooth;
    public static Borders SawtoothGray;
    public static Borders ScaredCat;
    public static Borders Seattle;
    public static Borders ShadowedSquares;
    public static Borders SharksTeeth;
    public static Borders ShorebirdTracks;
    public static Borders Skyrocket;
    public static Borders SnowflakeFancy;
    public static Borders Snowflakes;
    public static Borders Sombrero;
    public static Borders Southwest;
    public static Borders Stars;
    public static Borders StarsTop;
    public static Borders Stars3D;
    public static Borders StarsBlack;
    public static Borders StarsShadowed;
    public static Borders Sun;
    public static Borders Swirligig;
    public static Borders TornPaper;
    public static Borders TornPaperBlack;
    public static Borders Trees;
    public static Borders TriangleParty;
    public static Borders Triangles;
    public static Borders Tribal1;
    public static Borders Tribal2;
    public static Borders Tribal3;
    public static Borders Tribal4;
    public static Borders Tribal5;
    public static Borders Tribal6;
    public static Borders TwistedLines1;
    public static Borders TwistedLines2;
    public static Borders Vine;
    public static Borders Waveline;
    public static Borders WeavingAngles;
    public static Borders WeavingBraid;
    public static Borders WeavingRibbon;
    public static Borders WeavingStrips;
    public static Borders WhiteFlowers;
    public static Borders Woodwork;
    public static Borders XIllusions;
    public static Borders ZanyTriangles;
    public static Borders ZigZag;
    public static Borders ZigZagStitch;
}
public enum NPOI.XWPF.UserModel.BreakClear : Enum {
    public int value__;
    public static BreakClear NONE;
    public static BreakClear LEFT;
    public static BreakClear RIGHT;
    public static BreakClear ALL;
}
public enum NPOI.XWPF.UserModel.BreakType : Enum {
    public int value__;
    public static BreakType PAGE;
    public static BreakType COLUMN;
    public static BreakType TEXTWRAPPING;
}
public interface NPOI.XWPF.UserModel.Document {
}
public enum NPOI.XWPF.UserModel.FontCharRange : Enum {
    public int value__;
    public static FontCharRange None;
    public static FontCharRange Ascii;
    public static FontCharRange CS;
    public static FontCharRange EastAsia;
    public static FontCharRange HAnsi;
}
public interface NPOI.XWPF.UserModel.IBody {
    public POIXMLDocumentPart Part { get; }
    public BodyType PartType { get; }
    public IList`1<IBodyElement> BodyElements { get; }
    public IList`1<XWPFParagraph> Paragraphs { get; }
    public IList`1<XWPFTable> Tables { get; }
    public abstract virtual POIXMLDocumentPart get_Part();
    public abstract virtual BodyType get_PartType();
    public abstract virtual IList`1<IBodyElement> get_BodyElements();
    public abstract virtual IList`1<XWPFParagraph> get_Paragraphs();
    public abstract virtual IList`1<XWPFTable> get_Tables();
    public abstract virtual XWPFParagraph GetParagraph(CT_P p);
    public abstract virtual XWPFTable GetTable(CT_Tbl ctTable);
    public abstract virtual XWPFParagraph GetParagraphArray(int pos);
    public abstract virtual XWPFTable GetTableArray(int pos);
    public abstract virtual XWPFParagraph InsertNewParagraph(XmlDocument cursor);
    public abstract virtual XWPFTable InsertNewTbl(XmlDocument cursor);
    public abstract virtual void InsertTable(int pos, XWPFTable table);
    public abstract virtual XWPFTableCell GetTableCell(CT_Tc cell);
    public abstract virtual XWPFDocument GetXWPFDocument();
}
public interface NPOI.XWPF.UserModel.IBodyElement {
    public IBody Body { get; }
    public POIXMLDocumentPart Part { get; }
    public BodyType PartType { get; }
    public BodyElementType ElementType { get; }
    public abstract virtual IBody get_Body();
    public abstract virtual POIXMLDocumentPart get_Part();
    public abstract virtual BodyType get_PartType();
    public abstract virtual BodyElementType get_ElementType();
}
public interface NPOI.XWPF.UserModel.ICell {
}
public interface NPOI.XWPF.UserModel.IRunBody {
    public XWPFDocument Document { get; }
    public POIXMLDocumentPart Part { get; }
    public abstract virtual XWPFDocument get_Document();
    public abstract virtual POIXMLDocumentPart get_Part();
}
public interface NPOI.XWPF.UserModel.IRunElement {
}
public interface NPOI.XWPF.UserModel.ISDTContent {
    public string Text { get; }
    public abstract virtual string get_Text();
    public abstract virtual string ToString();
}
public interface NPOI.XWPF.UserModel.ISDTContents {
}
public enum NPOI.XWPF.UserModel.LineSpacingRule : Enum {
    public int value__;
    public static LineSpacingRule AUTO;
    public static LineSpacingRule EXACT;
    public static LineSpacingRule ATLEAST;
}
public abstract class NPOI.XWPF.Usermodel.MathContainer : object {
    protected IRunBody parent;
    protected XWPFDocument document;
    protected IOMathContainer container;
    protected List`1<XWPFSharedRun> runs;
    protected List`1<XWPFNary> naries;
    protected List`1<XWPFAcc> accs;
    protected List`1<XWPFSSub> sSubs;
    protected List`1<XWPFSSup> sSups;
    protected List`1<XWPFF> fs;
    protected List`1<XWPFRad> rads;
    public XWPFDocument Document { get; }
    public POIXMLDocumentPart Part { get; }
    public IList`1<XWPFSharedRun> Runs { get; }
    public IList`1<XWPFAcc> Accs { get; }
    public IList`1<XWPFNary> Naries { get; }
    public IList`1<XWPFSSub> SSubs { get; }
    public IList`1<XWPFF> Fs { get; }
    public IList`1<XWPFRad> Rads { get; }
    public MathContainer(IOMathContainer c, IRunBody p);
    public sealed virtual XWPFDocument get_Document();
    public sealed virtual POIXMLDocumentPart get_Part();
    private void FillLists(ArrayList items);
    private void BuildListsInOrderFromXml(ArrayList items);
    public XWPFSharedRun CreateRun();
    public XWPFAcc CreateAcc();
    public XWPFNary CreateNary();
    public XWPFSSub CreateSSub();
    public XWPFSSup CreateSSup();
    public XWPFF CreateF();
    public XWPFRad CreateRad();
    public IList`1<XWPFSharedRun> get_Runs();
    public IList`1<XWPFAcc> get_Accs();
    public IList`1<XWPFNary> get_Naries();
    public IList`1<XWPFSSub> get_SSubs();
    public IList`1<XWPFF> get_Fs();
    public IList`1<XWPFRad> get_Rads();
}
public enum NPOI.XWPF.UserModel.MultiLevelType : Enum {
    public int value__;
    public static MultiLevelType SingleLevel;
    public static MultiLevelType Multilevel;
    public static MultiLevelType HybridMultilevel;
}
public enum NPOI.XWPF.UserModel.NumberFormat : Enum {
    public int value__;
    public static NumberFormat Decimal;
    public static NumberFormat UpperRoman;
    public static NumberFormat LowerRoman;
    public static NumberFormat UpperLetter;
    public static NumberFormat LowerLetter;
    public static NumberFormat Ordinal;
    public static NumberFormat CardinalText;
    public static NumberFormat OrdinalText;
    public static NumberFormat Hex;
    public static NumberFormat Chicago;
    public static NumberFormat IdeographDigital;
    public static NumberFormat JapaneseCounting;
    public static NumberFormat Aiueo;
    public static NumberFormat Iroha;
    public static NumberFormat DecimalFullWidth;
    public static NumberFormat DecimalHalfWidth;
    public static NumberFormat JapaneseLegal;
    public static NumberFormat JapaneseDigitalTenThousand;
    public static NumberFormat DecimalEnclosedCircle;
    public static NumberFormat DecimalFullWidth2;
    public static NumberFormat AiueoFullWidth;
    public static NumberFormat IrohaFullWidth;
    public static NumberFormat DecimalZero;
    public static NumberFormat Bullet;
    public static NumberFormat Ganada;
    public static NumberFormat Chosung;
    public static NumberFormat DecimalEnclosedFullstop;
    public static NumberFormat DecimalEnclosedParen;
    public static NumberFormat DecimalEnclosedCircleChinese;
    public static NumberFormat IdeographEnclosedCircle;
    public static NumberFormat IdeographTraditional;
    public static NumberFormat IdeographZodiac;
    public static NumberFormat IdeographZodiacTraditional;
    public static NumberFormat TaiwaneseCounting;
    public static NumberFormat IdeographLegalTraditional;
    public static NumberFormat TaiwaneseCountingThousand;
    public static NumberFormat TaiwaneseDigital;
    public static NumberFormat ChineseCounting;
    public static NumberFormat ChineseLegalSimplified;
    public static NumberFormat ChineseCountingThousand;
    public static NumberFormat KoreanDigital;
    public static NumberFormat KoreanCounting;
    public static NumberFormat KoreanLegal;
    public static NumberFormat KoreanDigital2;
    public static NumberFormat VietnameseCounting;
    public static NumberFormat RussianLower;
    public static NumberFormat RussianUpper;
    public static NumberFormat None;
    public static NumberFormat NumberInDash;
    public static NumberFormat Hebrew1;
    public static NumberFormat Hebrew2;
    public static NumberFormat ArabicAlpha;
    public static NumberFormat ArabicAbjad;
    public static NumberFormat HindiVowels;
    public static NumberFormat HindiConsonants;
    public static NumberFormat HindiNumbers;
    public static NumberFormat HindiCounting;
    public static NumberFormat ThaiLetters;
    public static NumberFormat ThaiNumbers;
    public static NumberFormat ThaiCounting;
}
public enum NPOI.XWPF.UserModel.ParagraphAlignment : Enum {
    public int value__;
    public static ParagraphAlignment LEFT;
    public static ParagraphAlignment CENTER;
    public static ParagraphAlignment RIGHT;
    public static ParagraphAlignment BOTH;
    public static ParagraphAlignment MEDIUM_KASHIDA;
    public static ParagraphAlignment DISTRIBUTE;
    public static ParagraphAlignment NUM_TAB;
    public static ParagraphAlignment HIGH_KASHIDA;
    public static ParagraphAlignment LOW_KASHIDA;
    public static ParagraphAlignment THAI_DISTRIBUTE;
}
public enum NPOI.XWPF.UserModel.PictureType : Enum {
    public int value__;
    public static PictureType EMF;
    public static PictureType WMF;
    public static PictureType PICT;
    public static PictureType JPEG;
    public static PictureType PNG;
    public static PictureType DIB;
    public static PictureType GIF;
    public static PictureType TIFF;
    public static PictureType EPS;
    public static PictureType BMP;
    public static PictureType WPG;
    public static PictureType SVG;
}
public class NPOI.XWPF.UserModel.PositionInParagraph : object {
    private int posRun;
    private int posText;
    private int posChar;
    public int Run { get; public set; }
    public int Text { get; public set; }
    public int Char { get; public set; }
    public PositionInParagraph(int posRun, int posText, int posChar);
    public int get_Run();
    public void set_Run(int value);
    public int get_Text();
    public void set_Text(int value);
    public int get_Char();
    public void set_Char(int value);
}
public enum NPOI.XWPF.UserModel.TextAlignment : Enum {
    public int value__;
    public static TextAlignment TOP;
    public static TextAlignment CENTER;
    public static TextAlignment BASELINE;
    public static TextAlignment BOTTOM;
    public static TextAlignment AUTO;
}
public class NPOI.XWPF.UserModel.TextSegment : object {
    private PositionInParagraph beginPos;
    private PositionInParagraph endPos;
    public PositionInParagraph BeginPos { get; public set; }
    public PositionInParagraph EndPos { get; }
    public int BeginRun { get; public set; }
    public int BeginText { get; public set; }
    public int BeginChar { get; public set; }
    public int EndRun { get; public set; }
    public int EndText { get; public set; }
    public int EndChar { get; public set; }
    public TextSegment(int beginRun, int endRun, int beginText, int endText, int beginChar, int endChar);
    public TextSegment(PositionInParagraph beginPos, PositionInParagraph endPos);
    public PositionInParagraph get_BeginPos();
    public void set_BeginPos(PositionInParagraph value);
    public PositionInParagraph get_EndPos();
    public int get_BeginRun();
    public void set_BeginRun(int value);
    public int get_BeginText();
    public void set_BeginText(int value);
    public int get_BeginChar();
    public void set_BeginChar(int value);
    public int get_EndRun();
    public void set_EndRun(int value);
    public int get_EndText();
    public void set_EndText(int value);
    public int get_EndChar();
    public void set_EndChar(int value);
}
public class NPOI.XWPF.UserModel.TOC : object {
    private CT_SdtBlock block;
    private bool isBuilt;
    public TOC(CT_SdtBlock block);
    public CT_SdtBlock GetBlock();
    public void AddRow(int level, string title, int page, string bookmarkRef);
    public CT_SdtBlock Build();
}
public enum NPOI.XWPF.UserModel.UnderlinePatterns : Enum {
    public int value__;
    public static UnderlinePatterns Single;
    public static UnderlinePatterns Words;
    public static UnderlinePatterns Double;
    public static UnderlinePatterns Thick;
    public static UnderlinePatterns Dotted;
    public static UnderlinePatterns DottedHeavy;
    public static UnderlinePatterns Dash;
    public static UnderlinePatterns DashedHeavy;
    public static UnderlinePatterns DashLong;
    public static UnderlinePatterns DashLongHeavy;
    public static UnderlinePatterns DotDash;
    public static UnderlinePatterns DashDotHeavy;
    public static UnderlinePatterns DotDotDash;
    public static UnderlinePatterns DashDotDotHeavy;
    public static UnderlinePatterns Wave;
    public static UnderlinePatterns WavyHeavy;
    public static UnderlinePatterns WavyDouble;
    public static UnderlinePatterns None;
}
public enum NPOI.XWPF.UserModel.VerticalAlign : Enum {
    public int value__;
    public static VerticalAlign BASELINE;
    public static VerticalAlign SUPERSCRIPT;
    public static VerticalAlign SUBSCRIPT;
}
public class NPOI.XWPF.UserModel.XWPFAbstractNum : object {
    private CT_AbstractNum ctAbstractNum;
    protected XWPFNumbering numbering;
    private Char[] lvlText;
    public MultiLevelType MultiLevelType { get; public set; }
    public string AbstractNumId { get; public set; }
    public XWPFAbstractNum(CT_AbstractNum abstractNum);
    public XWPFAbstractNum(CT_AbstractNum ctAbstractNum, XWPFNumbering numbering);
    public CT_AbstractNum GetAbstractNum();
    public XWPFNumbering GetNumbering();
    public CT_AbstractNum GetCTAbstractNum();
    public void SetNumbering(XWPFNumbering numbering);
    public MultiLevelType get_MultiLevelType();
    public void set_MultiLevelType(MultiLevelType value);
    public string get_AbstractNumId();
    public void set_AbstractNumId(string value);
    internal void InitLvl();
    internal void SetLevelTentative(int lvl, bool tentative);
}
public class NPOI.XWPF.Usermodel.XWPFAcc : object {
    private CT_Acc acc;
    private IRunBody parent;
    private XWPFOMathArg e;
    public string AccPr { get; public set; }
    public XWPFOMathArg Element { get; }
    public XWPFDocument Document { get; }
    public POIXMLDocumentPart Part { get; }
    public XWPFAcc(CT_Acc acc, IRunBody p);
    public string get_AccPr();
    public void set_AccPr(string value);
    public XWPFOMathArg get_Element();
    public sealed virtual XWPFDocument get_Document();
    public sealed virtual POIXMLDocumentPart get_Part();
}
public class NPOI.XWPF.UserModel.XWPFComment : object {
    protected CT_Comment ctComment;
    protected XWPFComments comments;
    protected XWPFDocument document;
    private List`1<XWPFParagraph> paragraphs;
    private List`1<XWPFTable> tables;
    private List`1<IBodyElement> bodyElements;
    public string Id { get; }
    public string Author { get; public set; }
    public string Text { get; }
    public string Initials { get; public set; }
    public string Date { get; public set; }
    public POIXMLDocumentPart Part { get; }
    public BodyType PartType { get; }
    public IList`1<IBodyElement> BodyElements { get; }
    public IList`1<XWPFParagraph> Paragraphs { get; }
    public IList`1<XWPFTable> Tables { get; }
    public XWPFComment(CT_Comment ctComment, XWPFComments comments);
    protected void Init();
    public string get_Id();
    public string get_Author();
    public void set_Author(string value);
    public string get_Text();
    public string get_Initials();
    public void set_Initials(string value);
    public string get_Date();
    public void set_Date(string value);
    public sealed virtual POIXMLDocumentPart get_Part();
    public sealed virtual BodyType get_PartType();
    public sealed virtual IList`1<IBodyElement> get_BodyElements();
    public sealed virtual IList`1<XWPFParagraph> get_Paragraphs();
    public sealed virtual IList`1<XWPFTable> get_Tables();
    public sealed virtual XWPFParagraph GetParagraph(CT_P p);
    public sealed virtual XWPFTable GetTable(CT_Tbl ctTable);
    public sealed virtual XWPFParagraph GetParagraphArray(int pos);
    public sealed virtual XWPFTable GetTableArray(int pos);
    public sealed virtual XWPFParagraph InsertNewParagraph(XmlDocument cursor);
    public sealed virtual XWPFTable InsertNewTbl(XmlDocument cursor);
    public sealed virtual void InsertTable(int pos, XWPFTable table);
    public sealed virtual XWPFTableCell GetTableCell(CT_Tc cell);
    public sealed virtual XWPFDocument GetXWPFDocument();
    public string GetText();
    public XWPFParagraph CreateParagraph();
    public XWPFTable CreateTable(int rows, int cols);
    public CT_Comment GetCtComment();
    public XWPFComments GetComments();
    public string GetId();
    public string GetAuthor();
    public void SetAuthor(string author);
    public string GetInitials();
    public void SetInitials(string initials);
    public string GetDate();
    public void SetDate(string date);
}
public class NPOI.XWPF.UserModel.XWPFComments : POIXMLDocumentPart {
    private XWPFDocument document;
    private List`1<XWPFComment> comments;
    private List`1<XWPFPictureData> pictures;
    private CT_Comments ctComments;
    public XWPFComments(POIXMLDocumentPart parent, PackagePart part);
    internal virtual void OnDocumentRead();
    public string AddPictureData(Stream is, int format);
    public string AddPictureData(Byte[] pictureData, int format);
    protected internal virtual void Commit();
    public IList`1<XWPFPictureData> GetAllPictures();
    public CT_Comments GetCtComments();
    internal void SetCtComments(CT_Comments ctComments);
    public List`1<XWPFComment> GetComments();
    public XWPFComment GetComment(int pos);
    public XWPFComment GetCommentByID(string id);
    public XWPFComment GetComment(CT_Comment ctComment);
    public XWPFComment CreateComment(string cid);
    public bool RemoveComment(int pos);
    public XWPFDocument GetXWPFDocument();
    public void SetXWPFDocument(XWPFDocument document);
}
public class NPOI.XWPF.UserModel.XWPFDefaultParagraphStyle : object {
    private CT_PPr ppr;
    public int SpacingAfter { get; }
    public XWPFDefaultParagraphStyle(CT_PPr ppr);
    protected internal CT_PPr GetPPr();
    public int get_SpacingAfter();
}
public class NPOI.XWPF.UserModel.XWPFDefaultRunStyle : object {
    private CT_RPr rpr;
    public int FontSize { get; }
    public XWPFDefaultRunStyle(CT_RPr rpr);
    protected internal CT_RPr GetRPr();
    public int get_FontSize();
}
public class NPOI.XWPF.UserModel.XWPFDocument : POIXMLDocument {
    private CT_Document ctDocument;
    private XWPFSettings settings;
    private IdentifierManager drawingIdManager;
    protected List`1<XWPFFooter> footers;
    protected List`1<XWPFHeader> headers;
    protected List`1<XWPFHyperlink> hyperlinks;
    protected List`1<XWPFParagraph> paragraphs;
    protected List`1<XWPFTable> tables;
    protected List`1<XWPFSDT> contentControls;
    protected List`1<IBodyElement> bodyElements;
    protected List`1<XWPFPictureData> pictures;
    protected Dictionary`2<long, List`1<XWPFPictureData>> packagePictures;
    protected Dictionary`2<int, XWPFFootnote> endnotes;
    protected XWPFNumbering numbering;
    protected XWPFStyles styles;
    protected XWPFFootnotes footnotes;
    private XWPFComments comments;
    private XWPFHeaderFooterPolicy headerFooterPolicy;
    public CT_Document Document { get; public set; }
    public int ColumnCount { get; public set; }
    public ST_TextDirection TextDirection { get; public set; }
    internal IdentifierManager DrawingIdManager { get; }
    public IList`1<IBodyElement> BodyElements { get; }
    public IList`1<XWPFParagraph> Paragraphs { get; }
    public IList`1<XWPFTable> Tables { get; }
    public IList`1<XWPFFooter> FooterList { get; }
    public IList`1<XWPFHeader> HeaderList { get; }
    public Dictionary`2<int, XWPFFootnote> Endnotes { get; }
    public bool IsTrackRevisions { get; public set; }
    public IList`1<XWPFPictureData> AllPictures { get; }
    public IList`1<XWPFPictureData> AllPackagePictures { get; }
    public POIXMLDocumentPart Part { get; }
    public BodyType PartType { get; }
    public XWPFDocument(OPCPackage pkg);
    public XWPFDocument(Stream is1);
    internal virtual void OnDocumentRead();
    private void InitHyperlinks();
    private void InitFootnotes();
    protected static OPCPackage NewPackage();
    internal virtual void OnDocumentCreate();
    public CT_Document get_Document();
    public void set_Document(CT_Document value);
    public int get_ColumnCount();
    public void set_ColumnCount(int value);
    public ST_TextDirection get_TextDirection();
    public void set_TextDirection(ST_TextDirection value);
    internal IdentifierManager get_DrawingIdManager();
    public sealed virtual IList`1<IBodyElement> get_BodyElements();
    public IEnumerator`1<IBodyElement> GetBodyElementsIterator();
    public sealed virtual IList`1<XWPFParagraph> get_Paragraphs();
    public sealed virtual IList`1<XWPFTable> get_Tables();
    public sealed virtual XWPFTable GetTableArray(int pos);
    public IList`1<XWPFFooter> get_FooterList();
    public XWPFFooter GetFooterArray(int pos);
    public IList`1<XWPFHeader> get_HeaderList();
    public XWPFHeader GetHeaderArray(int pos);
    public string GetTblStyle(XWPFTable table);
    public XWPFHyperlink GetHyperlinkByID(string id);
    public XWPFFootnote GetFootnoteByID(int id);
    public Dictionary`2<int, XWPFFootnote> get_Endnotes();
    public XWPFFootnote GetEndnoteByID(int id);
    public List`1<XWPFFootnote> GetFootnotes();
    public XWPFHyperlink[] GetHyperlinks();
    public XWPFComments GetDocComments();
    public XWPFComment GetCommentByID(string id);
    public XWPFComment[] GetComments();
    public PackagePart GetPartById(string id);
    public XWPFHeaderFooterPolicy GetHeaderFooterPolicy();
    public XWPFHeaderFooterPolicy CreateHeaderFooterPolicy();
    public XWPFHeader CreateHeader(HeaderFooterType type);
    public XWPFFooter CreateFooter(HeaderFooterType type);
    private CT_SectPr GetSection();
    public CT_Styles GetCTStyle();
    public virtual List`1<PackagePart> GetAllEmbedds();
    private int GetBodyElementSpecificPos(int pos, List`1<IBodyElement> list);
    public int GetParagraphPos(int pos);
    public int GetTablePos(int pos);
    public sealed virtual XWPFParagraph InsertNewParagraph(XmlDocument cursor);
    public sealed virtual XWPFTable InsertNewTbl(XmlDocument cursor);
    private bool IsCursorInBody(XmlDocument cursor);
    private int GetPosOfBodyElement(IBodyElement needle);
    public int GetPosOfParagraph(XWPFParagraph p);
    public int GetPosOfTable(XWPFTable t);
    protected internal virtual void Commit();
    private int GetRelationIndex(XWPFRelation relation);
    public XWPFParagraph CreateParagraph();
    public XWPFComments CreateComments();
    public XWPFNumbering CreateNumbering();
    public XWPFStyles CreateStyles();
    public XWPFFootnotes CreateFootnotes();
    public XWPFFootnote AddFootnote(CT_FtnEdn note);
    public XWPFFootnote AddEndnote(CT_FtnEdn note);
    public XWPFFootnote CreateFootnote();
    public bool RemoveFootnote(int pos);
    public bool RemoveBodyElement(int pos);
    public void SetParagraph(XWPFParagraph paragraph, int pos);
    public XWPFParagraph GetLastParagraph();
    public XWPFTable CreateTable(Nullable`1<int> pos);
    public XWPFTable CreateTable(int rows, int cols, Nullable`1<int> pos);
    public void CreateTOC();
    public void SetTable(int pos, XWPFTable table);
    public bool IsEnforcedProtection();
    public bool IsEnforcedReadonlyProtection();
    public bool IsEnforcedFillingFormsProtection();
    public bool IsEnforcedCommentsProtection();
    public bool IsEnforcedTrackedChangesProtection();
    public bool IsEnforcedUpdateFields();
    public void EnforceReadonlyProtection();
    public void EnforceReadonlyProtection(string password, HashAlgorithm hashAlgo);
    public void EnforceFillingFormsProtection();
    public void EnforceFillingFormsProtection(string password, HashAlgorithm hashAlgo);
    public void EnforceCommentsProtection();
    public void EnforceCommentsProtection(string password, HashAlgorithm hashAlgo);
    public void EnforceTrackedChangesProtection();
    public void EnforceTrackedChangesProtection(string password, HashAlgorithm hashAlgo);
    public bool ValidateProtectionPassword(string password);
    public void RemoveProtectionEnforcement();
    public void EnforceUpdateFields();
    public bool get_IsTrackRevisions();
    public void set_IsTrackRevisions(bool value);
    public sealed virtual void InsertTable(int pos, XWPFTable table);
    public IList`1<XWPFPictureData> get_AllPictures();
    public IList`1<XWPFPictureData> get_AllPackagePictures();
    public void RegisterPackagePictureData(XWPFPictureData picData);
    public XWPFPictureData FindPackagePictureData(Byte[] pictureData, int format);
    public string AddPictureData(Byte[] pictureData, int format);
    public string AddPictureData(Stream is1, int format);
    public int GetNextPicNameNumber(int format);
    public XWPFPictureData GetPictureDataByID(string blipID);
    public XWPFNumbering GetNumbering();
    public XWPFStyles GetStyles();
    public sealed virtual XWPFParagraph GetParagraph(CT_P p);
    public sealed virtual XWPFTable GetTable(CT_Tbl ctTbl);
    public IEnumerator`1<XWPFTable> GetTablesEnumerator();
    public void ChangeOrientation(ST_PageOrientation orientation);
    public IEnumerator`1<XWPFParagraph> GetParagraphsEnumerator();
    public sealed virtual XWPFParagraph GetParagraphArray(int pos);
    public sealed virtual POIXMLDocumentPart get_Part();
    public sealed virtual BodyType get_PartType();
    public sealed virtual XWPFTableCell GetTableCell(CT_Tc cell);
    public sealed virtual XWPFDocument GetXWPFDocument();
    private void FindAndReplaceTextInParagraph(XWPFParagraph paragraph, string oldValue, string newValue);
    private void FindAndReplaceTextInTable(XWPFTable table, string oldValue, string newValue);
    public void FindAndReplaceText(string oldValue, string newValue);
    public sealed virtual void Dispose();
}
public class NPOI.XWPF.Usermodel.XWPFF : object {
    private CT_F f;
    private IRunBody parent;
    private XWPFOMathArg num;
    private XWPFOMathArg den;
    public ST_FType FractionType { get; public set; }
    public XWPFDocument Document { get; }
    public POIXMLDocumentPart Part { get; }
    public XWPFOMathArg Numerator { get; }
    public XWPFOMathArg Denominator { get; }
    public XWPFF(CT_F f, IRunBody p);
    public ST_FType get_FractionType();
    public void set_FractionType(ST_FType value);
    public sealed virtual XWPFDocument get_Document();
    public sealed virtual POIXMLDocumentPart get_Part();
    public XWPFOMathArg get_Numerator();
    public XWPFOMathArg get_Denominator();
}
public class NPOI.XWPF.UserModel.XWPFFactory : POIXMLFactory {
    private static XWPFFactory inst;
    private static XWPFFactory();
    public static XWPFFactory GetInstance();
    protected virtual POIXMLRelation GetDescriptor(string relationshipType);
    protected virtual POIXMLDocumentPart CreateDocumentPart(Type cls, Type[] classes, Object[] values);
}
public class NPOI.XWPF.UserModel.XWPFFieldRun : XWPFRun {
    private CT_SimpleField field;
    public string FieldInstruction { get; public set; }
    public XWPFFieldRun(CT_SimpleField field, CT_R run, IRunBody p);
    public CT_SimpleField GetCTField();
    public string get_FieldInstruction();
    public void set_FieldInstruction(string value);
}
public class NPOI.XWPF.UserModel.XWPFFooter : XWPFHeaderFooter {
    protected List`1<XWPFHyperlink> hyperlinks;
    public BodyType PartType { get; }
    public XWPFFooter(XWPFDocument doc, CT_HdrFtr hdrFtr);
    public XWPFFooter(POIXMLDocumentPart parent, PackagePart part);
    [ObsoleteAttribute("deprecated in POI 3.14, scheduled for removal in POI 3.16")]
public XWPFFooter(POIXMLDocumentPart parent, PackagePart part, PackageRelationship rel);
    protected internal virtual void Commit();
    internal virtual void OnDocumentRead();
    private void InitHyperlinks();
    public List`1<XWPFHyperlink> GetHyperlinks();
    public XWPFHyperlink GetHyperlinkByID(string id);
    public virtual BodyType get_PartType();
}
public class NPOI.XWPF.UserModel.XWPFFootnote : object {
    private List`1<XWPFParagraph> paragraphs;
    private List`1<XWPFTable> tables;
    private List`1<XWPFPictureData> pictures;
    private List`1<IBodyElement> bodyElements;
    private CT_FtnEdn ctFtnEdn;
    private XWPFFootnotes footnotes;
    private XWPFDocument document;
    public IList`1<XWPFParagraph> Paragraphs { get; }
    public IList`1<XWPFTable> Tables { get; }
    public IList`1<XWPFPictureData> Pictures { get; }
    public IList`1<IBodyElement> BodyElements { get; }
    public POIXMLDocumentPart Owner { get; }
    public int Id { get; }
    public POIXMLDocumentPart Part { get; }
    public BodyType PartType { get; }
    public XWPFParagraph Current { get; }
    private object System.Collections.IEnumerator.Current { get; }
    public XWPFFootnote(CT_FtnEdn note, XWPFFootnotes xFootnotes);
    public XWPFFootnote(XWPFDocument document, CT_FtnEdn body);
    private void Init();
    public sealed virtual IList`1<XWPFParagraph> get_Paragraphs();
    public IEnumerator`1<XWPFParagraph> GetEnumerator();
    public sealed virtual IList`1<XWPFTable> get_Tables();
    public IList`1<XWPFPictureData> get_Pictures();
    public sealed virtual IList`1<IBodyElement> get_BodyElements();
    public CT_FtnEdn GetCTFtnEdn();
    public void SetCTFtnEdn(CT_FtnEdn footnote);
    public sealed virtual XWPFTable GetTableArray(int pos);
    public sealed virtual void InsertTable(int pos, XWPFTable table);
    public sealed virtual XWPFTable GetTable(CT_Tbl ctTable);
    public sealed virtual XWPFParagraph GetParagraph(CT_P p);
    public sealed virtual XWPFParagraph GetParagraphArray(int pos);
    public sealed virtual XWPFTableCell GetTableCell(CT_Tc cell);
    private bool IsCursorInFtn(XmlDocument cursor);
    public POIXMLDocumentPart get_Owner();
    public int get_Id();
    public List`1<XWPFParagraph> GetParagraphs();
    public XWPFParagraph CreateParagraph();
    public void EnsureFootnoteRef(XWPFParagraph p);
    public XWPFTable CreateTable();
    public XWPFTable CreateTable(int rows, int cols);
    public sealed virtual XWPFTable InsertNewTbl(XmlDocument cursor);
    public sealed virtual XWPFParagraph InsertNewParagraph(XmlDocument cursor);
    public XWPFTable AddNewTbl(CT_Tbl table);
    public XWPFParagraph AddNewParagraph(CT_P paragraph);
    public sealed virtual XWPFDocument GetXWPFDocument();
    public sealed virtual POIXMLDocumentPart get_Part();
    public sealed virtual BodyType get_PartType();
    public sealed virtual XWPFParagraph get_Current();
    public sealed virtual void Dispose();
    private sealed virtual override object System.Collections.IEnumerator.get_Current();
    public sealed virtual bool MoveNext();
    public sealed virtual void Reset();
}
public class NPOI.XWPF.UserModel.XWPFFootnotes : POIXMLDocumentPart {
    private List`1<XWPFFootnote> listFootnote;
    private CT_Footnotes ctFootnotes;
    private List`1<XWPFHyperlink> hyperlinks;
    protected XWPFDocument document;
    public XWPFFootnotes(PackagePart part);
    [ObsoleteAttribute("deprecated in POI 3.14, scheduled for removal in POI 3.16")]
public XWPFFootnotes(PackagePart part, PackageRelationship rel);
    internal virtual void OnDocumentRead();
    private void InitHyperlinks();
    protected internal virtual void Commit();
    public List`1<XWPFFootnote> GetFootnotesList();
    public XWPFFootnote GetFootnoteById(int id);
    public void SetFootnotes(CT_Footnotes footnotes);
    public void AddFootnote(XWPFFootnote footnote);
    public XWPFFootnote AddFootnote(CT_FtnEdn note);
    public void SetXWPFDocument(XWPFDocument doc);
    public XWPFFootnote CreateFootnote();
    public bool RemoveFootnote(int pos);
    public XWPFDocument GetXWPFDocument();
    public XWPFHyperlink GetHyperlinkByID(string id);
    public List`1<XWPFHyperlink> GetHyperlinks();
}
public class NPOI.XWPF.UserModel.XWPFHeader : XWPFHeaderFooter {
    public BodyType PartType { get; }
    public XWPFHeader(POIXMLDocumentPart parent, PackagePart part);
    [ObsoleteAttribute("deprecated in POI 3.14, scheduled for removal in POI 3.16")]
public XWPFHeader(POIXMLDocumentPart parent, PackagePart part, PackageRelationship rel);
    public XWPFHeader(XWPFDocument doc, CT_HdrFtr hdrFtr);
    protected internal virtual void Commit();
    internal virtual void OnDocumentRead();
    public virtual BodyType get_PartType();
}
public abstract class NPOI.XWPF.UserModel.XWPFHeaderFooter : POIXMLDocumentPart {
    protected List`1<XWPFParagraph> paragraphs;
    protected List`1<XWPFTable> tables;
    protected List`1<XWPFPictureData> pictures;
    protected List`1<IBodyElement> bodyElements;
    protected CT_HdrFtr headerFooter;
    protected XWPFDocument document;
    public IList`1<IBodyElement> BodyElements { get; }
    public IList`1<XWPFParagraph> Paragraphs { get; }
    public IList`1<XWPFTable> Tables { get; }
    public string Text { get; }
    public IList`1<XWPFPictureData> AllPictures { get; }
    public IList`1<XWPFPictureData> AllPackagePictures { get; }
    public POIXMLDocumentPart Owner { get; }
    public POIXMLDocumentPart Part { get; }
    public BodyType PartType { get; }
    public XWPFHeaderFooter(XWPFDocument doc, CT_HdrFtr hdrFtr);
    public XWPFHeaderFooter(POIXMLDocumentPart parent, PackagePart part);
    [ObsoleteAttribute("deprecated in POI 3.14, scheduled for removal in POI 3.16")]
public XWPFHeaderFooter(POIXMLDocumentPart parent, PackagePart part, PackageRelationship rel);
    internal virtual void OnDocumentRead();
    public CT_HdrFtr _getHdrFtr();
    public sealed virtual IList`1<IBodyElement> get_BodyElements();
    public sealed virtual IList`1<XWPFParagraph> get_Paragraphs();
    public sealed virtual IList`1<XWPFTable> get_Tables();
    public string get_Text();
    public void SetHeaderFooter(CT_HdrFtr headerFooter);
    public sealed virtual XWPFTable GetTable(CT_Tbl ctTable);
    public sealed virtual XWPFParagraph GetParagraph(CT_P p);
    public sealed virtual XWPFParagraph GetParagraphArray(int pos);
    public List`1<XWPFParagraph> GetListParagraph();
    public IList`1<XWPFPictureData> get_AllPictures();
    public IList`1<XWPFPictureData> get_AllPackagePictures();
    public string AddPictureData(Byte[] pictureData, int format);
    public string AddPictureData(Stream is1, int format);
    public XWPFPictureData GetPictureDataByID(string blipID);
    public XWPFParagraph CreateParagraph();
    public XWPFTable CreateTable(int rows, int cols);
    public void RemoveParagraph(XWPFParagraph paragraph);
    public void RemoveTable(XWPFTable table);
    public void ClearHeaderFooter();
    public POIXMLDocumentPart get_Owner();
    public sealed virtual XWPFTable GetTableArray(int pos);
    public sealed virtual void InsertTable(int pos, XWPFTable table);
    public void ReadHdrFtr();
    public sealed virtual XWPFTableCell GetTableCell(CT_Tc cell);
    public void SetXWPFDocument(XWPFDocument doc);
    public sealed virtual XWPFDocument GetXWPFDocument();
    public sealed virtual POIXMLDocumentPart get_Part();
    public virtual BodyType get_PartType();
    public sealed virtual XWPFParagraph InsertNewParagraph(XmlDocument cursor);
    public sealed virtual XWPFTable InsertNewTbl(XmlDocument cursor);
    protected internal virtual void PrepareForCommit();
}
public class NPOI.XWPF.UserModel.XWPFHyperlink : object {
    private string id;
    private string url;
    public string Id { get; }
    public string URL { get; }
    public XWPFHyperlink(string id, string url);
    public string get_Id();
    public string get_URL();
}
public class NPOI.XWPF.UserModel.XWPFHyperlinkRun : XWPFRun {
    private CT_Hyperlink1 hyperlink;
    public string Anchor { get; }
    public string HyperlinkId { get; public set; }
    public XWPFHyperlinkRun(CT_Hyperlink1 hyperlink, CT_R Run, IRunBody p);
    public CT_Hyperlink1 GetCTHyperlink();
    public string get_Anchor();
    public string get_HyperlinkId();
    public void set_HyperlinkId(string value);
    public XWPFHyperlink GetHyperlink(XWPFDocument document);
}
public class NPOI.XWPF.UserModel.XWPFLatentStyles : object {
    private CT_LatentStyles latentStyles;
    protected XWPFStyles styles;
    public int NumberOfStyles { get; }
    public XWPFLatentStyles(CT_LatentStyles latentStyles);
    public XWPFLatentStyles(CT_LatentStyles latentStyles, XWPFStyles styles);
    public int get_NumberOfStyles();
    public bool IsLatentStyle(string latentStyleID);
}
public class NPOI.XWPF.Usermodel.XWPFNary : object {
    private CT_Nary nary;
    private IRunBody parent;
    private XWPFOMathArg e;
    private XWPFOMathArg sub;
    private XWPFOMathArg sup;
    public XWPFDocument Document { get; }
    public POIXMLDocumentPart Part { get; }
    public XWPFOMathArg Element { get; }
    public XWPFOMathArg Subscript { get; }
    public XWPFOMathArg Superscript { get; }
    public string NaryPr { get; }
    public XWPFNary(CT_Nary nary, IRunBody p);
    public sealed virtual XWPFDocument get_Document();
    public sealed virtual POIXMLDocumentPart get_Part();
    public XWPFOMathArg get_Element();
    public XWPFOMathArg get_Subscript();
    public XWPFOMathArg get_Superscript();
    public string get_NaryPr();
    public XWPFNary SetSumm();
    public XWPFNary SetUnion();
    public XWPFNary SetIntegral();
    public XWPFNary SetAnd();
}
public class NPOI.XWPF.UserModel.XWPFNum : object {
    private CT_Num ctNum;
    protected XWPFNumbering numbering;
    public XWPFNum(CT_Num ctNum);
    public XWPFNum(XWPFNumbering numbering);
    public XWPFNum(CT_Num ctNum, XWPFNumbering numbering);
    public XWPFNumbering GetNumbering();
    public CT_Num GetCTNum();
    public void SetNumbering(XWPFNumbering numbering);
    public void SetCTNum(CT_Num ctNum);
}
public class NPOI.XWPF.UserModel.XWPFNumbering : POIXMLDocumentPart {
    protected List`1<XWPFAbstractNum> abstractNums;
    protected List`1<XWPFNum> nums;
    private CT_Numbering ctNumbering;
    private bool isNew;
    public XWPFNumbering(PackagePart part);
    [ObsoleteAttribute("deprecated in POI 3.14, scheduled for removal in POI 3.16")]
public XWPFNumbering(PackagePart part, PackageRelationship rel);
    internal virtual void OnDocumentRead();
    protected internal virtual void Commit();
    public void SetNumbering(CT_Numbering numbering);
    public bool NumExist(string numID);
    public string AddNum(XWPFNum num);
    public string AddNum(string abstractNumID);
    public void AddNum(string abstractNumID, string numID);
    public XWPFNum GetNum(string numID);
    public XWPFAbstractNum GetAbstractNum(string abstractNumID);
    public string GetIdOfAbstractNum(XWPFAbstractNum abstractNum);
    public string AddAbstractNum(XWPFAbstractNum abstractNum);
    public string AddAbstractNum();
    public bool RemoveAbstractNum(string abstractNumID);
    public string GetAbstractNumID(string numID);
}
public class NPOI.XWPF.UserModel.XWPFOMath : MathContainer {
    protected CT_OMath oMath { get; }
    public XWPFOMath(CT_OMath oMath, IRunBody p);
    protected CT_OMath get_oMath();
}
public class NPOI.XWPF.Usermodel.XWPFOMathArg : MathContainer {
    public XWPFOMathArg(IOMathContainer c, IRunBody p);
}
public class NPOI.XWPF.UserModel.XWPFParagraph : object {
    private CT_P paragraph;
    protected IBody part;
    protected XWPFDocument document;
    protected List`1<XWPFRun> runs;
    protected List`1<IRunElement> iRuns;
    protected List`1<XWPFOMath> oMaths;
    private StringBuilder footnoteText;
    public IList`1<XWPFRun> Runs { get; }
    public List`1<IRunElement> IRuns { get; }
    public IList`1<XWPFOMath> OMaths { get; }
    public bool IsEmpty { get; }
    public XWPFDocument Document { get; }
    public string Text { get; }
    public string StyleID { get; }
    public string NumLevelText { get; }
    public string ParagraphText { get; }
    public string PictureText { get; }
    public string FootnoteText { get; }
    public ParagraphAlignment Alignment { get; public set; }
    public int FontAlignment { get; public set; }
    public TextAlignment VerticalAlignment { get; public set; }
    public Borders BorderTop { get; public set; }
    public Borders BorderBottom { get; public set; }
    public Borders BorderLeft { get; public set; }
    public Borders BorderRight { get; public set; }
    public ST_Shd FillPattern { get; public set; }
    public string FillBackgroundColor { get; public set; }
    public Borders BorderBetween { get; public set; }
    public bool IsPageBreak { get; public set; }
    public int SpacingAfter { get; public set; }
    public int SpacingAfterLines { get; public set; }
    public int SpacingBefore { get; public set; }
    public int SpacingBeforeLines { get; public set; }
    public LineSpacingRule SpacingLineRule { get; public set; }
    public double SpacingBetween { get; public set; }
    public int IndentationLeft { get; public set; }
    public int IndentationRight { get; public set; }
    public int IndentationHanging { get; public set; }
    public int IndentationFirstLine { get; public set; }
    public int IndentFromLeft { get; public set; }
    public int IndentFromRight { get; public set; }
    public int FirstLineIndent { get; public set; }
    public bool IsWordWrapped { get; public set; }
    [ObsoleteAttribute]
public bool IsWordWrap { get; public set; }
    public string Style { get; public set; }
    public BodyElementType ElementType { get; }
    public IBody Body { get; }
    public POIXMLDocumentPart Part { get; }
    public BodyType PartType { get; }
    public XWPFParagraph(CT_P prgrph, IBody part);
    private void BuildRunsInOrderFromXml(ArrayList items);
    private void BuildOMathsInOrderFromXml(ArrayList items);
    public CT_P GetCTP();
    public IList`1<XWPFRun> get_Runs();
    public List`1<IRunElement> get_IRuns();
    public IList`1<XWPFOMath> get_OMaths();
    public bool get_IsEmpty();
    public sealed virtual XWPFDocument get_Document();
    public string get_Text();
    public string get_StyleID();
    public string GetNumID();
    public void SetNumILvl(string iLvl);
    public string GetNumIlvl();
    public string GetNumFmt();
    public string get_NumLevelText();
    public string GetNumStartOverride();
    public void SetNumID(string numId);
    public void SetNumID(string numId, string ilvl);
    public string get_ParagraphText();
    public string get_PictureText();
    public string get_FootnoteText();
    public ParagraphAlignment get_Alignment();
    public void set_Alignment(ParagraphAlignment value);
    public sealed virtual int get_FontAlignment();
    public sealed virtual void set_FontAlignment(int value);
    public TextAlignment get_VerticalAlignment();
    public void set_VerticalAlignment(TextAlignment value);
    public Borders get_BorderTop();
    public void set_BorderTop(Borders value);
    public Borders get_BorderBottom();
    public void set_BorderBottom(Borders value);
    public Borders get_BorderLeft();
    public void set_BorderLeft(Borders value);
    public Borders get_BorderRight();
    public void set_BorderRight(Borders value);
    public ST_Shd get_FillPattern();
    public void set_FillPattern(ST_Shd value);
    public string get_FillBackgroundColor();
    public void set_FillBackgroundColor(string value);
    public Borders get_BorderBetween();
    public void set_BorderBetween(Borders value);
    public bool get_IsPageBreak();
    public void set_IsPageBreak(bool value);
    public int get_SpacingAfter();
    public void set_SpacingAfter(int value);
    public int get_SpacingAfterLines();
    public void set_SpacingAfterLines(int value);
    public int get_SpacingBefore();
    public void set_SpacingBefore(int value);
    public int get_SpacingBeforeLines();
    public void set_SpacingBeforeLines(int value);
    public LineSpacingRule get_SpacingLineRule();
    public void set_SpacingLineRule(LineSpacingRule value);
    public double get_SpacingBetween();
    public void set_SpacingBetween(double value);
    public double GetSpacingBetween();
    public void SetSpacingBetween(double spacing);
    public void SetSpacingBetween(double spacing, LineSpacingRule rule);
    public int get_IndentationLeft();
    public void set_IndentationLeft(int value);
    public int get_IndentationRight();
    public void set_IndentationRight(int value);
    public int get_IndentationHanging();
    public void set_IndentationHanging(int value);
    public int get_IndentationFirstLine();
    public void set_IndentationFirstLine(int value);
    public sealed virtual int get_IndentFromLeft();
    public sealed virtual void set_IndentFromLeft(int value);
    public sealed virtual int get_IndentFromRight();
    public sealed virtual void set_IndentFromRight(int value);
    public sealed virtual int get_FirstLineIndent();
    public sealed virtual void set_FirstLineIndent(int value);
    public sealed virtual bool get_IsWordWrapped();
    public sealed virtual void set_IsWordWrapped(bool value);
    public bool get_IsWordWrap();
    public void set_IsWordWrap(bool value);
    public string get_Style();
    public void set_Style(string value);
    private CT_PBdr GetCTPBrd(bool create);
    private CT_Spacing GetCTSpacing(bool create);
    private CT_Ind GetCTInd(bool create);
    internal CT_PPr GetCTPPr();
    protected internal void AddRun(CT_R run);
    public void ReplaceText(string oldText, string newText);
    public TextSegment SearchText(string searched, PositionInParagraph startPos);
    public XWPFRun CreateRun();
    public XWPFOMath CreateOMath();
    public XWPFRun InsertNewRun(int pos);
    public string GetText(TextSegment segment);
    public bool RemoveRun(int pos);
    public sealed virtual BodyElementType get_ElementType();
    public sealed virtual IBody get_Body();
    public sealed virtual POIXMLDocumentPart get_Part();
    public sealed virtual BodyType get_PartType();
    public void AddRun(XWPFRun r);
    public XWPFRun GetRun(CT_R r);
    public XWPFHyperlinkRun CreateHyperlinkRun(string rId);
    public void AddFootnoteReference(XWPFFootnote footnote);
}
public class NPOI.XWPF.UserModel.XWPFPicture : object {
    private CT_Picture ctPic;
    private string description;
    private XWPFRun run;
    public long Width { get; }
    public long Height { get; }
    public XWPFPicture(CT_Picture ctPic, XWPFRun Run);
    public void SetPictureReference(PackageRelationship rel);
    public CT_Picture GetCTPicture();
    public XWPFPictureData GetPictureData();
    public string GetDescription();
    public long get_Width();
    public long get_Height();
}
public class NPOI.XWPF.UserModel.XWPFPictureData : POIXMLDocumentPart {
    internal static POIXMLRelation[] RELATIONS;
    private Nullable`1<long> checksum;
    public Byte[] Data { get; }
    public string FileName { get; }
    public long Checksum { get; }
    private static XWPFPictureData();
    public XWPFPictureData(PackagePart part);
    [ObsoleteAttribute("deprecated in POI 3.14, scheduled for removal in POI 3.16")]
public XWPFPictureData(PackagePart part, PackageRelationship rel);
    internal virtual void OnDocumentRead();
    public Byte[] get_Data();
    public string get_FileName();
    public string SuggestFileExtension();
    public int GetPictureType();
    public long get_Checksum();
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
    protected internal virtual void PrepareForCommit();
}
public class NPOI.XWPF.Usermodel.XWPFRad : object {
    private CT_Rad rad;
    private IRunBody parent;
    private XWPFOMathArg deg;
    private XWPFOMathArg e;
    public XWPFDocument Document { get; }
    public POIXMLDocumentPart Part { get; }
    public XWPFOMathArg Degree { get; }
    public XWPFOMathArg Element { get; }
    public XWPFRad(CT_Rad rad, IRunBody p);
    public sealed virtual XWPFDocument get_Document();
    public sealed virtual POIXMLDocumentPart get_Part();
    public XWPFOMathArg get_Degree();
    public XWPFOMathArg get_Element();
}
public class NPOI.XWPF.UserModel.XWPFRelation : POIXMLRelation {
    private static Dictionary`2<string, XWPFRelation> _table;
    public static XWPFRelation DOCUMENT;
    public static XWPFRelation TEMPLATE;
    public static XWPFRelation MACRO_DOCUMENT;
    public static XWPFRelation MACRO_TEMPLATE_DOCUMENT;
    public static XWPFRelation GLOSSARY_DOCUMENT;
    public static XWPFRelation NUMBERING;
    public static XWPFRelation FONT_TABLE;
    public static XWPFRelation SETTINGS;
    public static XWPFRelation STYLES;
    public static XWPFRelation WEB_SETTINGS;
    public static XWPFRelation HEADER;
    public static XWPFRelation FOOTER;
    public static XWPFRelation THEME;
    public static XWPFRelation HYPERLINK;
    public static XWPFRelation COMMENT;
    public static XWPFRelation FOOTNOTE;
    public static XWPFRelation ENDNOTE;
    public static XWPFRelation IMAGE_EMF;
    public static XWPFRelation IMAGE_WMF;
    public static XWPFRelation IMAGE_PICT;
    public static XWPFRelation IMAGE_JPEG;
    public static XWPFRelation IMAGE_PNG;
    public static XWPFRelation IMAGE_DIB;
    public static XWPFRelation IMAGE_GIF;
    public static XWPFRelation IMAGE_TIFF;
    public static XWPFRelation IMAGE_EPS;
    public static XWPFRelation IMAGE_BMP;
    public static XWPFRelation IMAGE_WPG;
    public static XWPFRelation IMAGE_SVG;
    public static XWPFRelation IMAGES;
    private XWPFRelation(string type, string rel, string defaultName, Type cls);
    private static XWPFRelation();
    public static XWPFRelation GetInstance(string rel);
}
public class NPOI.XWPF.UserModel.XWPFRun : object {
    private CT_R run;
    private string pictureText;
    private IRunBody parent;
    private List`1<XWPFPicture> pictures;
    public IRunBody Parent { get; }
    public XWPFParagraph Paragraph { get; }
    public XWPFDocument Document { get; }
    public bool IsBold { get; public set; }
    public string PictureText { get; }
    public bool IsItalic { get; public set; }
    public UnderlinePatterns Underline { get; public set; }
    public string Text { get; }
    public bool IsStrikeThrough { get; public set; }
    [ObsoleteAttribute]
public bool IsStrike { get; public set; }
    public bool IsDoubleStrikeThrough { get; public set; }
    public bool IsSmallCaps { get; public set; }
    public bool IsCapitalized { get; public set; }
    public bool IsShadowed { get; public set; }
    public bool IsImprinted { get; public set; }
    public bool IsEmbossed { get; public set; }
    public VerticalAlign Subscript { get; public set; }
    public int Kerning { get; public set; }
    public bool IsHighlighted { get; }
    public int CharacterSpacing { get; public set; }
    public string FontFamily { get; public set; }
    public string FontName { get; }
    public double FontSize { get; public set; }
    public int TextPosition { get; public set; }
    public string Lang { get; public set; }
    public XWPFRun(CT_R r, IRunBody p);
    [ObsoleteAttribute("Use XWPFRun(CTR, IRunBody)")]
public XWPFRun(CT_R r, XWPFParagraph p);
    private List`1<CT_Picture> GetCTPictures(object o);
    private void GetPictures(CT_GraphicalObjectData god, List`1<CT_Picture> pictures);
    public CT_R GetCTR();
    public IRunBody get_Parent();
    public XWPFParagraph get_Paragraph();
    public XWPFDocument get_Document();
    private bool IsCTOnOff(CT_OnOff onoff);
    public sealed virtual bool get_IsBold();
    public sealed virtual void set_IsBold(bool value);
    public string GetColor();
    public void SetColor(string rgbStr);
    public string GetText(int pos);
    public string get_PictureText();
    public void ReplaceText(string oldText, string newText);
    public void SetText(string value);
    public void AppendText(string value);
    public void SetText(string value, int pos);
    public sealed virtual bool get_IsItalic();
    public sealed virtual void set_IsItalic(bool value);
    public UnderlinePatterns get_Underline();
    public void set_Underline(UnderlinePatterns value);
    private CT_Underline GetCTUnderline(bool create);
    internal void InsertText(CT_Text text, int textIndex);
    public void InsertText(string text, int startIndex);
    public sealed virtual string get_Text();
    public sealed virtual bool get_IsStrikeThrough();
    public sealed virtual void set_IsStrikeThrough(bool value);
    public bool get_IsStrike();
    public void set_IsStrike(bool value);
    public sealed virtual bool get_IsDoubleStrikeThrough();
    public sealed virtual void set_IsDoubleStrikeThrough(bool value);
    public sealed virtual bool get_IsSmallCaps();
    public sealed virtual void set_IsSmallCaps(bool value);
    public sealed virtual bool get_IsCapitalized();
    public sealed virtual void set_IsCapitalized(bool value);
    public sealed virtual bool get_IsShadowed();
    public sealed virtual void set_IsShadowed(bool value);
    public sealed virtual bool get_IsImprinted();
    public sealed virtual void set_IsImprinted(bool value);
    public sealed virtual bool get_IsEmbossed();
    public sealed virtual void set_IsEmbossed(bool value);
    [ObsoleteAttribute]
public void SetStrike(bool value);
    public VerticalAlign get_Subscript();
    public void set_Subscript(VerticalAlign value);
    public sealed virtual int get_Kerning();
    public sealed virtual void set_Kerning(int value);
    public sealed virtual bool get_IsHighlighted();
    public sealed virtual int get_CharacterSpacing();
    public sealed virtual void set_CharacterSpacing(int value);
    public string get_FontFamily();
    public void set_FontFamily(string value);
    public sealed virtual string get_FontName();
    public string GetFontFamily(FontCharRange fcr);
    public void SetFontFamily(string fontFamily, FontCharRange fcr);
    public sealed virtual double get_FontSize();
    public sealed virtual void set_FontSize(double value);
    public int get_TextPosition();
    public void set_TextPosition(int value);
    public void RemoveBreak();
    public void AddBreak();
    public void AddBreak(BreakType type);
    public void AddBreak(BreakClear Clear);
    public void AddTab();
    public void RemoveTab();
    public void AddCarriageReturn();
    public void RemoveCarriageReturn(int i);
    private XWPFPicture AddPicture(Stream pictureData, int pictureType, string filename, int width, int height, Action`2<XWPFDocument, CT_Blip> extAct);
    public XWPFPicture AddSvg(Stream svgData, Stream altPictureData, int altPictureType, string filename, int width, int height);
    public XWPFPicture AddPicture(Stream pictureData, int pictureType, string filename, int width, int height);
    public List`1<XWPFPicture> GetEmbeddedPictures();
    public void SetStyle(string styleId);
    public string GetStyle();
    private static void preserveSpaces(CT_Text xs);
    public string get_Lang();
    public void set_Lang(string value);
    protected CT_RPr GetRunProperties(bool create);
    public virtual string ToString();
}
public class NPOI.XWPF.UserModel.XWPFSDT : AbstractXWPFSDT {
    private ISDTContent content;
    public ISDTContent Content { get; }
    public XWPFDocument Document { get; }
    public POIXMLDocumentPart Part { get; }
    public IBody Body { get; }
    public BodyType PartType { get; }
    public BodyElementType ElementType { get; }
    public XWPFSDT(CT_SdtRun sdtRun, IBody part);
    public XWPFSDT(CT_SdtBlock block, IBody part);
    public virtual ISDTContent get_Content();
    public sealed virtual XWPFDocument get_Document();
    public sealed virtual POIXMLDocumentPart get_Part();
    public sealed virtual IBody get_Body();
    public sealed virtual BodyType get_PartType();
    public sealed virtual BodyElementType get_ElementType();
}
public class NPOI.XWPF.UserModel.XWPFSDTCell : AbstractXWPFSDT {
    private XWPFSDTContentCell cellContent;
    public ISDTContent Content { get; }
    public XWPFSDTCell(CT_SdtCell sdtCell, XWPFTableRow xwpfTableRow, IBody part);
    public virtual ISDTContent get_Content();
}
public class NPOI.XWPF.UserModel.XWPFSDTContent : object {
    private List`1<XWPFParagraph> paragraphs;
    private List`1<XWPFTable> tables;
    private List`1<XWPFRun> runs;
    private List`1<XWPFSDT> contentControls;
    private List`1<ISDTContents> bodyElements;
    public string Text { get; }
    public XWPFSDTContent(CT_SdtContentRun sdtRun, IBody part, IRunBody parent);
    public XWPFSDTContent(CT_SdtContentBlock block, IBody part, IRunBody parent);
    public sealed virtual string get_Text();
    private void AppendTable(XWPFTable table, StringBuilder text);
    private void AppendParagraph(XWPFParagraph paragraph, StringBuilder text);
    public virtual string ToString();
}
public class NPOI.XWPF.UserModel.XWPFSDTContentCell : object {
    private string text;
    public string Text { get; }
    public XWPFSDTContentCell(CT_SdtContentCell sdtContentCell, XWPFTableRow xwpfTableRow, IBody part);
    private bool IsStartToken(XmlReader cursor, string string1);
    private bool IsStartToken(object cursor, string string1);
    public sealed virtual string get_Text();
    public virtual string ToString();
}
public class NPOI.XWPF.UserModel.XWPFSettings : POIXMLDocumentPart {
    private CT_Settings ctSettings;
    public bool IsTrackRevisions { get; public set; }
    public XWPFSettings(PackagePart part);
    [ObsoleteAttribute("deprecated in POI 3.14, scheduled for removal in POI 3.16")]
public XWPFSettings(PackagePart part, PackageRelationship rel);
    internal virtual void OnDocumentRead();
    public long GetZoomPercent();
    public void SetZoomPercent(long zoomPercent);
    public bool IsEnforcedWith();
    public bool IsEnforcedWith(ST_DocProtect editValue);
    public void SetEnforcementEditValue(ST_DocProtect editValue);
    public void SetEnforcementEditValue(ST_DocProtect editValue, string password, HashAlgorithm hashAlgo);
    public bool ValidateProtectionPassword(string password);
    public void RemoveEnforcement();
    public void SetUpdateFields();
    public bool IsUpdateFields();
    public bool get_IsTrackRevisions();
    public void set_IsTrackRevisions(bool value);
    protected internal virtual void Commit();
    private CT_DocProtect SafeGetDocumentProtection();
    private void ReadFrom(Stream inputStream);
}
public class NPOI.XWPF.Usermodel.XWPFSharedRun : object {
    private CT_R run;
    private IRunBody parent;
    [CompilerGeneratedAttribute]
private bool <IsBold>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsSmallCaps>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsCapitalized>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsStrikeThrough>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsDoubleStrikeThrough>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsShadowed>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsEmbossed>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsImprinted>k__BackingField;
    [CompilerGeneratedAttribute]
private int <CharacterSpacing>k__BackingField;
    [CompilerGeneratedAttribute]
private int <Kerning>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsHighlighted>k__BackingField;
    public bool IsBold { get; public set; }
    public bool IsItalic { get; public set; }
    public bool IsSmallCaps { get; public set; }
    public bool IsCapitalized { get; public set; }
    public bool IsStrikeThrough { get; public set; }
    public bool IsDoubleStrikeThrough { get; public set; }
    public bool IsShadowed { get; public set; }
    public bool IsEmbossed { get; public set; }
    public bool IsImprinted { get; public set; }
    public int CharacterSpacing { get; public set; }
    public int Kerning { get; public set; }
    public bool IsHighlighted { get; public set; }
    public string FontName { get; }
    public string FontFamily { get; public set; }
    public double FontSize { get; public set; }
    public string Text { get; }
    public XWPFSharedRun(CT_R ctR, IRunBody p);
    [CompilerGeneratedAttribute]
public sealed virtual bool get_IsBold();
    [CompilerGeneratedAttribute]
public sealed virtual void set_IsBold(bool value);
    public sealed virtual bool get_IsItalic();
    public sealed virtual void set_IsItalic(bool value);
    private bool IsCTOnOff(CT_OnOff onoff);
    [CompilerGeneratedAttribute]
public sealed virtual bool get_IsSmallCaps();
    [CompilerGeneratedAttribute]
public sealed virtual void set_IsSmallCaps(bool value);
    [CompilerGeneratedAttribute]
public sealed virtual bool get_IsCapitalized();
    [CompilerGeneratedAttribute]
public sealed virtual void set_IsCapitalized(bool value);
    [CompilerGeneratedAttribute]
public sealed virtual bool get_IsStrikeThrough();
    [CompilerGeneratedAttribute]
public sealed virtual void set_IsStrikeThrough(bool value);
    [CompilerGeneratedAttribute]
public sealed virtual bool get_IsDoubleStrikeThrough();
    [CompilerGeneratedAttribute]
public sealed virtual void set_IsDoubleStrikeThrough(bool value);
    [CompilerGeneratedAttribute]
public sealed virtual bool get_IsShadowed();
    [CompilerGeneratedAttribute]
public sealed virtual void set_IsShadowed(bool value);
    [CompilerGeneratedAttribute]
public sealed virtual bool get_IsEmbossed();
    [CompilerGeneratedAttribute]
public sealed virtual void set_IsEmbossed(bool value);
    [CompilerGeneratedAttribute]
public sealed virtual bool get_IsImprinted();
    [CompilerGeneratedAttribute]
public sealed virtual void set_IsImprinted(bool value);
    [CompilerGeneratedAttribute]
public sealed virtual int get_CharacterSpacing();
    [CompilerGeneratedAttribute]
public sealed virtual void set_CharacterSpacing(int value);
    [CompilerGeneratedAttribute]
public sealed virtual int get_Kerning();
    [CompilerGeneratedAttribute]
public sealed virtual void set_Kerning(int value);
    [CompilerGeneratedAttribute]
public sealed virtual bool get_IsHighlighted();
    [CompilerGeneratedAttribute]
public void set_IsHighlighted(bool value);
    public sealed virtual string get_FontName();
    public string get_FontFamily();
    public void set_FontFamily(string value);
    public void SetFontFamily(string fontFamily, FontCharRange fcr);
    public string GetFontFamily(FontCharRange fcr);
    public sealed virtual double get_FontSize();
    public sealed virtual void set_FontSize(double value);
    public sealed virtual string get_Text();
    public XWPFSharedRun SetText(string value);
    private XWPFSharedRun SetText(string value, int pos);
    private static void preserveSpaces(CT_Text1 xs);
}
public class NPOI.XWPF.Usermodel.XWPFSSub : object {
    private CT_SSub ssub;
    private IRunBody parent;
    private XWPFOMathArg e;
    private XWPFOMathArg sub;
    public XWPFDocument Document { get; }
    public POIXMLDocumentPart Part { get; }
    public XWPFOMathArg Element { get; }
    public XWPFOMathArg Subscript { get; }
    public XWPFSSub(CT_SSub ssub, IRunBody p);
    public sealed virtual XWPFDocument get_Document();
    public sealed virtual POIXMLDocumentPart get_Part();
    public XWPFOMathArg get_Element();
    public XWPFOMathArg get_Subscript();
}
public class NPOI.XWPF.Usermodel.XWPFSSup : object {
    private CT_SSup ssup;
    private IRunBody parent;
    private XWPFOMathArg e;
    private XWPFOMathArg sup;
    public XWPFDocument Document { get; }
    public POIXMLDocumentPart Part { get; }
    public XWPFOMathArg Element { get; }
    public XWPFOMathArg Superscript { get; }
    public XWPFSSup(CT_SSup ssup, IRunBody p);
    public sealed virtual XWPFDocument get_Document();
    public sealed virtual POIXMLDocumentPart get_Part();
    public XWPFOMathArg get_Element();
    public XWPFOMathArg get_Superscript();
}
public class NPOI.XWPF.UserModel.XWPFStyle : object {
    private CT_Style ctStyle;
    protected XWPFStyles styles;
    public string StyleId { get; public set; }
    public ST_StyleType StyleType { get; public set; }
    public string BasisStyleID { get; }
    public string LinkStyleID { get; }
    public string NextStyleID { get; }
    public string Name { get; }
    public XWPFStyle(CT_Style style);
    public XWPFStyle(CT_Style style, XWPFStyles styles);
    public string get_StyleId();
    public void set_StyleId(string value);
    public ST_StyleType get_StyleType();
    public void set_StyleType(ST_StyleType value);
    public void SetStyle(CT_Style style);
    public CT_Style GetCTStyle();
    public XWPFStyles GetStyles();
    public string get_BasisStyleID();
    public string get_LinkStyleID();
    public string get_NextStyleID();
    public string get_Name();
    public bool HasSameName(XWPFStyle compStyle);
}
public class NPOI.XWPF.UserModel.XWPFStyles : POIXMLDocumentPart {
    private CT_Styles ctStyles;
    private List`1<XWPFStyle> listStyle;
    private XWPFLatentStyles latentStyles;
    private XWPFDefaultRunStyle defaultRunStyle;
    private XWPFDefaultParagraphStyle defaultParaStyle;
    public IReadOnlyList`1<XWPFStyle> listOfStyles { get; }
    public int NumberOfStyles { get; }
    public XWPFDefaultRunStyle DefaultRunStyle { get; }
    public XWPFDefaultParagraphStyle DefaultParagraphStyle { get; }
    public XWPFLatentStyles LatentStyles { get; }
    public XWPFStyles(PackagePart part);
    [ObsoleteAttribute("deprecated in POI 3.14, scheduled for removal in POI 3.16")]
public XWPFStyles(PackagePart part, PackageRelationship rel);
    public IReadOnlyList`1<XWPFStyle> get_listOfStyles();
    internal virtual void OnDocumentRead();
    protected internal virtual void Commit();
    protected void EnsureDocDefaults();
    public void SetStyles(CT_Styles styles);
    public bool StyleExist(string styleID);
    public void AddStyle(XWPFStyle style);
    public XWPFStyle GetStyle(string styleID);
    public XWPFStyle GetStyleWithName(string styleName);
    public int get_NumberOfStyles();
    public List`1<XWPFStyle> GetUsedStyleList(XWPFStyle style);
    private List`1<XWPFStyle> GetUsedStyleList(XWPFStyle style, List`1<XWPFStyle> usedStyleList);
    protected CT_Language GetCTLanguage();
    public void SetSpellingLanguage(string strSpellingLanguage);
    public void SetEastAsia(string strEastAsia);
    public void SetDefaultFonts(CT_Fonts fonts);
    public XWPFStyle GetStyleWithSameName(XWPFStyle style);
    public XWPFDefaultRunStyle get_DefaultRunStyle();
    public XWPFDefaultParagraphStyle get_DefaultParagraphStyle();
    public XWPFLatentStyles get_LatentStyles();
}
public class NPOI.XWPF.UserModel.XWPFTable : object {
    protected StringBuilder text;
    private CT_Tbl ctTbl;
    protected internal List`1<XWPFTableRow> tableRows;
    internal static Dictionary`2<XWPFBorderType, ST_Border> xwpfBorderTypeMap;
    internal static Dictionary`2<ST_Border, XWPFBorderType> stBorderTypeMap;
    protected IBody part;
    public string Text { get; }
    public int Width { get; public set; }
    public int NumberOfRows { get; }
    public string StyleID { get; public set; }
    public XWPFBorderType InsideHBorderType { get; }
    public int InsideHBorderSize { get; }
    public int InsideHBorderSpace { get; }
    public string InsideHBorderColor { get; }
    public XWPFBorderType InsideVBorderType { get; }
    public int InsideVBorderSize { get; }
    public int InsideVBorderSpace { get; }
    public string InsideVBorderColor { get; }
    public int RowBandSize { get; public set; }
    public int ColBandSize { get; public set; }
    public int CellMarginTop { get; }
    public int CellMarginLeft { get; }
    public int CellMarginBottom { get; }
    public int CellMarginRight { get; }
    public string TableCaption { get; public set; }
    public string TableDescription { get; public set; }
    public List`1<XWPFTableRow> Rows { get; }
    public BodyElementType ElementType { get; }
    public IBody Body { get; }
    public POIXMLDocumentPart Part { get; }
    public BodyType PartType { get; }
    private static XWPFTable();
    public XWPFTable(CT_Tbl table, IBody part, int row, int col);
    public XWPFTable(CT_Tbl table, IBody part);
    public void SetColumnWidth(int columnIndex, ulong width);
    private void CreateEmptyTable(CT_Tbl table);
    public CT_Tbl GetCTTbl();
    public string get_Text();
    public void AddNewCol();
    public XWPFTableRow CreateRow();
    public XWPFTableRow GetRow(int pos);
    public int get_Width();
    public void set_Width(int value);
    public int get_NumberOfRows();
    public CT_TblPr GetTrPr();
    private void AddColumn(XWPFTableRow tabRow, int sizeCol);
    public string get_StyleID();
    public void set_StyleID(string value);
    public XWPFBorderType get_InsideHBorderType();
    public int get_InsideHBorderSize();
    public int get_InsideHBorderSpace();
    public string get_InsideHBorderColor();
    public XWPFBorderType get_InsideVBorderType();
    public int get_InsideVBorderSize();
    public int get_InsideVBorderSpace();
    public string get_InsideVBorderColor();
    public int get_RowBandSize();
    public void set_RowBandSize(int value);
    public int get_ColBandSize();
    public void set_ColBandSize(int value);
    public void SetTopBorder(XWPFBorderType type, int size, int space, string rgbColor);
    public void SetBottomBorder(XWPFBorderType type, int size, int space, string rgbColor);
    public void SetLeftBorder(XWPFBorderType type, int size, int space, string rgbColor);
    public void SetRightBorder(XWPFBorderType type, int size, int space, string rgbColor);
    public void SetInsideHBorder(XWPFBorderType type, int size, int space, string rgbColor);
    public void SetInsideVBorder(XWPFBorderType type, int size, int space, string rgbColor);
    public int get_CellMarginTop();
    public int get_CellMarginLeft();
    public int get_CellMarginBottom();
    public int get_CellMarginRight();
    public string get_TableCaption();
    public void set_TableCaption(string value);
    public string get_TableDescription();
    public void set_TableDescription(string value);
    public void SetCellMargins(int top, int left, int bottom, int right);
    public void AddRow(XWPFTableRow row);
    public bool AddRow(XWPFTableRow row, int pos);
    public XWPFTableRow InsertNewTableRow(int pos);
    public bool RemoveRow(int pos);
    public List`1<XWPFTableRow> get_Rows();
    public sealed virtual BodyElementType get_ElementType();
    public sealed virtual IBody get_Body();
    public sealed virtual POIXMLDocumentPart get_Part();
    public sealed virtual BodyType get_PartType();
    public XWPFTableRow GetRow(CT_Row row);
}
public class NPOI.XWPF.UserModel.XWPFTableCell : object {
    private CT_Tc ctTc;
    protected List`1<XWPFParagraph> paragraphs;
    protected List`1<XWPFTable> tables;
    protected List`1<IBodyElement> bodyElements;
    protected IBody part;
    private XWPFTableRow tableRow;
    private static Dictionary`2<XWPFVertAlign, ST_VerticalJc> alignMap;
    private static Dictionary`2<ST_VerticalJc, XWPFVertAlign> stVertAlignTypeMap;
    public IList`1<IBodyElement> BodyElements { get; }
    public IList`1<XWPFParagraph> Paragraphs { get; }
    public POIXMLDocumentPart Part { get; }
    public BodyType PartType { get; }
    public IList`1<XWPFTable> Tables { get; }
    private static XWPFTableCell();
    public XWPFTableCell(CT_Tc cell, XWPFTableRow tableRow, IBody part);
    public CT_Tc GetCTTc();
    public sealed virtual IList`1<IBodyElement> get_BodyElements();
    public void SetParagraph(XWPFParagraph p);
    public sealed virtual IList`1<XWPFParagraph> get_Paragraphs();
    public XWPFParagraph AddParagraph();
    public void AddParagraph(XWPFParagraph p);
    public void RemoveParagraph(int pos);
    public sealed virtual XWPFParagraph GetParagraph(CT_P p);
    public void SetBorderBottom(XWPFBorderType type, int size, int space, string rgbColor);
    public void SetBorderTop(XWPFBorderType type, int size, int space, string rgbColor);
    public void SetBorderLeft(XWPFBorderType type, int size, int space, string rgbColor);
    public void SetBorderRight(XWPFBorderType type, int size, int space, string rgbColor);
    private static CT_Border CreateBorder(XWPFBorderType type, int size, int space, string rgbColor);
    public void SetText(string text);
    public XWPFTableRow GetTableRow();
    public void SetColor(string rgbStr);
    public string GetColor();
    public void SetVerticalAlignment(XWPFVertAlign vAlign);
    public Nullable`1<XWPFVertAlign> GetVerticalAlignment();
    public sealed virtual XWPFParagraph InsertNewParagraph(XmlDocument cursor);
    public sealed virtual XWPFTable InsertNewTbl(XmlDocument cursor);
    private bool IsCursorInTableCell(XmlDocument cursor);
    public sealed virtual XWPFParagraph GetParagraphArray(int pos);
    public sealed virtual POIXMLDocumentPart get_Part();
    public sealed virtual BodyType get_PartType();
    public sealed virtual XWPFTable GetTable(CT_Tbl ctTable);
    public sealed virtual XWPFTable GetTableArray(int pos);
    public sealed virtual IList`1<XWPFTable> get_Tables();
    public sealed virtual void InsertTable(int pos, XWPFTable table);
    public string GetText();
    public string GetTextRecursively();
    private void AppendBodyElementText(StringBuilder text, IBodyElement e, bool isLast);
    public sealed virtual XWPFTableCell GetTableCell(CT_Tc cell);
    public sealed virtual XWPFDocument GetXWPFDocument();
}
public class NPOI.XWPF.UserModel.XWPFTableRow : object {
    private CT_Row ctRow;
    private XWPFTable table;
    private List`1<XWPFTableCell> tableCells;
    public int Height { get; public set; }
    public bool IsCantSplitRow { get; public set; }
    public bool IsRepeatHeader { get; public set; }
    public XWPFTableRow(CT_Row row, XWPFTable table);
    public CT_Row GetCTRow();
    public XWPFTableCell CreateCell();
    public void MergeCells(int startIndex, int endIndex);
    public XWPFTableCell GetCell(int pos);
    public void RemoveCell(int pos);
    public XWPFTableCell AddNewTableCell();
    public XWPFTableRow CloneRow();
    public int get_Height();
    public void set_Height(int value);
    private CT_TrPr GetTrPr();
    public XWPFTable GetTable();
    public List`1<ICell> GetTableICells();
    public List`1<XWPFTableCell> GetTableCells();
    public XWPFTableCell GetTableCell(CT_Tc cell);
    public bool get_IsCantSplitRow();
    public void set_IsCantSplitRow(bool value);
    public void SetCantSplitRow(bool split);
    public bool get_IsRepeatHeader();
    public void set_IsRepeatHeader(bool value);
    private bool GetRepeat();
    public void SetRepeatHeader(bool repeat);
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
[AttributeUsageAttribute("27524")]
internal class System.Runtime.CompilerServices.NullableAttribute : Attribute {
    public Byte[] NullableFlags;
    public NullableAttribute(byte );
    public NullableAttribute(Byte[] );
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
[AttributeUsageAttribute("2")]
internal class System.Runtime.CompilerServices.RefSafetyRulesAttribute : Attribute {
    public int Version;
    public RefSafetyRulesAttribute(int );
}
