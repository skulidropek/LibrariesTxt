[CompilerGeneratedAttribute]
[EmbeddedAttribute]
internal class Microsoft.CodeAnalysis.EmbeddedAttribute : Attribute {
}
public class NPOI.OpenXml4Net.Exceptions.InvalidFormatException : OpenXml4NetException {
    public InvalidFormatException(string message);
    public InvalidFormatException(string message, Exception innerException);
}
public class NPOI.Openxml4Net.Exceptions.NotOfficeXmlFileException : UnsupportedFileFormatException {
    public NotOfficeXmlFileException(string message);
}
public class NPOI.Openxml4Net.Exceptions.ODFNotOfficeXmlFileException : NotOfficeXmlFileException {
    public ODFNotOfficeXmlFileException(string message);
}
public class NPOI.Openxml4Net.Exceptions.OLE2NotOfficeXmlFileException : NotOfficeXmlFileException {
    public OLE2NotOfficeXmlFileException(string message);
}
public class NPOI.OpenXml4Net.Exceptions.OpenXML4NetRuntimeException : RuntimeException {
    public OpenXML4NetRuntimeException(string msg);
    public OpenXML4NetRuntimeException(string msg, Exception reason);
}
public class NPOI.OpenXml4Net.Exceptions.PartAlreadyExistsException : InvalidOperationException {
    public PartAlreadyExistsException(string message);
}
public enum NPOI.OpenXml4Net.OPC.CertificateEmbeddingOption : Enum {
    public int value__;
    public static CertificateEmbeddingOption IN_CERTIFICATE_PART;
    public static CertificateEmbeddingOption IN_SIGNATURE_PART;
    public static CertificateEmbeddingOption NOT_EMBEDDED;
}
public class NPOI.OpenXml4Net.OPC.ContentTypes : object {
    public static string CORE_PROPERTIES_PART;
    public static string DIGITAL_SIGNATURE_CERTIFICATE_PART;
    public static string DIGITAL_SIGNATURE_ORIGIN_PART;
    public static string DIGITAL_SIGNATURE_XML_SIGNATURE_PART;
    public static string RELATIONSHIPS_PART;
    public static string CUSTOM_XML_PART;
    public static string PLAIN_OLD_XML;
    public static string IMAGE_JPEG;
    public static string EXTENSION_JPG_1;
    public static string EXTENSION_JPG_2;
    public static string IMAGE_PNG;
    public static string EXTENSION_PNG;
    public static string IMAGE_GIF;
    public static string EXTENSION_GIF;
    public static string IMAGE_TIFF;
    public static string EXTENSION_TIFF;
    public static string IMAGE_PICT;
    public static string EXTENSION_PICT;
    public static string XML;
    public static string EXTENSION_XML;
    private static ContentTypes();
    public static string GetContentTypeFromFileExtension(string filename);
}
public enum NPOI.OpenXml4Net.OPC.EncryptionOption : Enum {
    public int value__;
    public static EncryptionOption NONE;
}
public class NPOI.OpenXml4Net.OPC.Internal.ContentType : object {
    private string type;
    private string subType;
    private Dictionary`2<string, string> parameters;
    private static Regex patternTypeSubType;
    private static Regex patternTypeSubTypeParams;
    private static Regex patternParams;
    public string SubType { get; }
    public string Type { get; }
    private static ContentType();
    public ContentType(string contentType);
    public virtual string ToString();
    public string ToString(bool withParameters);
    public string ToStringWithParameters();
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
    public string get_SubType();
    public string get_Type();
    public bool HasParameters();
    public String[] GetParameterKeys();
    public string GetParameter(string key);
    public sealed virtual int CompareTo(object obj);
}
public abstract class NPOI.OpenXml4Net.OPC.Internal.ContentTypeManager : object {
    public static string CONTENT_TYPES_PART_NAME;
    public static string TYPES_NAMESPACE_URI;
    private static string TYPES_TAG_NAME;
    private static string DEFAULT_TAG_NAME;
    private static string EXTENSION_ATTRIBUTE_NAME;
    private static string CONTENT_TYPE_ATTRIBUTE_NAME;
    private static string OVERRIDE_TAG_NAME;
    private static string PART_NAME_ATTRIBUTE_NAME;
    protected OPCPackage container;
    private SortedList`2<string, string> defaultContentType;
    private SortedList`2<PackagePartName, string> overrideContentType;
    public ContentTypeManager(Stream in1, OPCPackage pkg);
    public void AddContentType(PackagePartName partName, string contentType);
    private void AddOverrideContentType(PackagePartName partName, string contentType);
    private void AddDefaultContentType(string extension, string contentType);
    public void RemoveContentType(PackagePartName partName);
    public bool IsContentTypeRegister(string contentType);
    public string GetContentType(PackagePartName partName);
    public void ClearAll();
    public void ClearOverrideContentTypes();
    private void ParseContentTypesFile(Stream in1);
    public bool Save(Stream outStream);
    private void AppendSpecificTypes(XmlDocument xmldoc, XmlElement root, KeyValuePair`2<PackagePartName, string> entry);
    private void AppendDefaultType(XmlDocument xmldoc, XmlElement root, KeyValuePair`2<string, string> entry);
    public abstract virtual bool SaveImpl(XmlDocument content, Stream out1);
}
public class NPOI.OpenXml4Net.OPC.Internal.FileHelper : object {
    public static string GetDirectory(string filepath);
    public static void CopyFile(string inpath, string outpath);
    public static void CopyFile(FileInfo inpath, FileInfo outpath);
    public static string GetFilename(string filepath);
}
public class NPOI.OpenXml4Net.OPC.Internal.Marshallers.DefaultMarshaller : object {
    public sealed virtual bool Marshall(PackagePart part, Stream out1);
}
public class NPOI.OpenXml4Net.OPC.Internal.Marshallers.PackagePropertiesMarshaller : object {
    private static string namespaceDC;
    private static string namespaceCoreProperties;
    private static string namespaceDcTerms;
    private static string namespaceXSI;
    protected static string KEYWORD_CATEGORY;
    protected static string KEYWORD_CONTENT_STATUS;
    protected static string KEYWORD_CONTENT_TYPE;
    protected static string KEYWORD_CREATED;
    protected static string KEYWORD_CREATOR;
    protected static string KEYWORD_DESCRIPTION;
    protected static string KEYWORD_IDENTIFIER;
    protected static string KEYWORD_KEYWORDS;
    protected static string KEYWORD_LANGUAGE;
    protected static string KEYWORD_LAST_MODIFIED_BY;
    protected static string KEYWORD_LAST_PRINTED;
    protected static string KEYWORD_MODIFIED;
    protected static string KEYWORD_REVISION;
    protected static string KEYWORD_SUBJECT;
    protected static string KEYWORD_TITLE;
    protected static string KEYWORD_VERSION;
    private PackagePropertiesPart propsPart;
    protected XmlDocument xmlDoc;
    protected XmlNamespaceManager nsmgr;
    private static PackagePropertiesMarshaller();
    public virtual bool Marshall(PackagePart part, Stream out1);
    private void AddCategory();
    private void AddContentStatus();
    private void AddContentType();
    private void AddCreated();
    private void AddCreator();
    private void AddDescription();
    private void AddIdentifier();
    private void AddKeywords();
    private void AddLanguage();
    private void AddLastModifiedBy();
    private void AddLastPrinted();
    private void AddModified();
    private void AddRevision();
    private void AddSubject();
    private void AddTitle();
    private void AddVersion();
}
public class NPOI.OpenXml4Net.OPC.Internal.Marshallers.ZipPackagePropertiesMarshaller : PackagePropertiesMarshaller {
    public virtual bool Marshall(PackagePart part, Stream out1);
}
public class NPOI.OpenXml4Net.OPC.Internal.Marshallers.ZipPartMarshaller : object {
    private static POILogger logger;
    private static ZipPartMarshaller();
    public sealed virtual bool Marshall(PackagePart part, Stream os);
    public static bool MarshallRelationshipPart(PackageRelationshipCollection rels, PackagePartName relPartName, ZipOutputStream zos);
}
public class NPOI.OpenXml4Net.OPC.Internal.MemoryPackagePart : PackagePart {
    internal MemoryStream data;
    public long Size { get; }
    public MemoryPackagePart(OPCPackage pack, PackagePartName partName, string contentType);
    public MemoryPackagePart(OPCPackage pack, PackagePartName partName, string contentType, bool loadRelationships);
    protected virtual Stream GetInputStreamImpl();
    protected virtual Stream GetOutputStreamImpl();
    public virtual long get_Size();
    public virtual void Clear();
    public virtual bool Save(Stream os);
    public virtual bool Load(Stream ios);
    public virtual void Close();
    public virtual void Flush();
}
public class NPOI.OpenXml4Net.OPC.Internal.MemoryPackagePartOutputStream : Stream {
    private MemoryPackagePart _part;
    private MemoryStream _buff;
    public bool CanRead { get; }
    public bool CanWrite { get; }
    public bool CanSeek { get; }
    public long Length { get; }
    public long Position { get; public set; }
    public MemoryPackagePartOutputStream(MemoryPackagePart part);
    public virtual int Read(Byte[] buffer, int offset, int count);
    public virtual bool get_CanRead();
    public virtual bool get_CanWrite();
    public virtual bool get_CanSeek();
    public virtual long get_Length();
    public void Write(int b);
    public virtual void SetLength(long value);
    public virtual long Seek(long offset, SeekOrigin origin);
    public virtual long get_Position();
    public virtual void set_Position(long value);
    public virtual void Close();
    public virtual void Flush();
    public virtual void Write(Byte[] b, int off, int len);
    public void Write(Byte[] b);
}
public class NPOI.OpenXml4Net.OPC.Internal.PackagePropertiesPart : PackagePart {
    public static string NAMESPACE_DC;
    public static string NAMESPACE_DC_URI;
    public static string NAMESPACE_CP_URI;
    public static string NAMESPACE_DCTERMS_URI;
    public static string NAMESPACE_XSI_URI;
    private static string DEFAULT_DATEFORMAT;
    private static String[] DATE_FORMATS;
    private String[] TZ_DATE_FORMATS;
    private Regex TIME_ZONE_PAT;
    protected string category;
    protected string contentStatus;
    protected string contentType;
    protected Nullable`1<DateTime> created;
    protected string creator;
    protected string description;
    protected string identifier;
    protected string keywords;
    protected string language;
    protected string lastModifiedBy;
    protected Nullable`1<DateTime> lastPrinted;
    protected Nullable`1<DateTime> modified;
    protected string revision;
    protected string subject;
    protected string title;
    protected string version;
    public PackagePropertiesPart(OPCPackage pack, PackagePartName partName);
    private static PackagePropertiesPart();
    public sealed virtual string GetCategoryProperty();
    public sealed virtual string GetContentStatusProperty();
    public sealed virtual string GetContentTypeProperty();
    public sealed virtual Nullable`1<DateTime> GetCreatedProperty();
    public string GetCreatedPropertyString();
    public sealed virtual string GetCreatorProperty();
    public sealed virtual string GetDescriptionProperty();
    public sealed virtual string GetIdentifierProperty();
    public sealed virtual string GetKeywordsProperty();
    public sealed virtual string GetLanguageProperty();
    public sealed virtual string GetLastModifiedByProperty();
    public sealed virtual Nullable`1<DateTime> GetLastPrintedProperty();
    public string GetLastPrintedPropertyString();
    public sealed virtual Nullable`1<DateTime> GetModifiedProperty();
    public string GetModifiedPropertyString();
    public sealed virtual string GetRevisionProperty();
    public sealed virtual string GetSubjectProperty();
    public sealed virtual string GetTitleProperty();
    public sealed virtual string GetVersionProperty();
    public sealed virtual void SetCategoryProperty(string category);
    public sealed virtual void SetContentStatusProperty(string contentStatus);
    public sealed virtual void SetContentTypeProperty(string contentType);
    public sealed virtual void SetCreatedProperty(string created);
    public sealed virtual void SetCreatedProperty(Nullable`1<DateTime> created);
    public sealed virtual void SetCreatorProperty(string creator);
    public sealed virtual void SetDescriptionProperty(string description);
    public sealed virtual void SetIdentifierProperty(string identifier);
    public sealed virtual void SetKeywordsProperty(string keywords);
    public sealed virtual void SetLanguageProperty(string language);
    public sealed virtual void SetLastModifiedByProperty(string lastModifiedBy);
    public sealed virtual void SetLastPrintedProperty(string lastPrinted);
    public sealed virtual void SetLastPrintedProperty(Nullable`1<DateTime> lastPrinted);
    public sealed virtual void SetModifiedProperty(string modified);
    public sealed virtual void SetModifiedProperty(Nullable`1<DateTime> modified);
    public sealed virtual void SetRevisionProperty(string revision);
    public sealed virtual void SetSubjectProperty(string subject);
    public sealed virtual void SetTitleProperty(string title);
    public sealed virtual void SetVersionProperty(string version);
    private string SetStringValue(string s);
    private Nullable`1<DateTime> SetDateValue(string dateStr);
    private string GetDateValue(Nullable`1<DateTime> d);
    protected virtual Stream GetInputStreamImpl();
    protected virtual Stream GetOutputStreamImpl();
    public virtual bool Save(Stream zos);
    public virtual bool Load(Stream ios);
    public virtual void Close();
    public virtual void Flush();
}
public interface NPOI.OpenXml4Net.OPC.Internal.PartMarshaller {
    public abstract virtual bool Marshall(PackagePart part, Stream out1);
}
public interface NPOI.OpenXml4Net.OPC.Internal.PartUnmarshaller {
    public abstract virtual PackagePart Unmarshall(UnmarshallContext context, Stream in1);
}
public class NPOI.OpenXml4Net.OPC.Internal.Unmarshallers.PackagePropertiesUnmarshaller : object {
    private static string namespaceDC;
    private static string namespaceCP;
    private static string namespaceDcTerms;
    private static string namespaceXML;
    private static string namespaceXSI;
    protected static string KEYWORD_CATEGORY;
    protected static string KEYWORD_CONTENT_STATUS;
    protected static string KEYWORD_CONTENT_TYPE;
    protected static string KEYWORD_CREATED;
    protected static string KEYWORD_CREATOR;
    protected static string KEYWORD_DESCRIPTION;
    protected static string KEYWORD_IDENTIFIER;
    protected static string KEYWORD_KEYWORDS;
    protected static string KEYWORD_LANGUAGE;
    protected static string KEYWORD_LAST_MODIFIED_BY;
    protected static string KEYWORD_LAST_PRINTED;
    protected static string KEYWORD_MODIFIED;
    protected static string KEYWORD_REVISION;
    protected static string KEYWORD_SUBJECT;
    protected static string KEYWORD_TITLE;
    protected static string KEYWORD_VERSION;
    protected XmlNamespaceManager nsmgr;
    private static PackagePropertiesUnmarshaller();
    public sealed virtual PackagePart Unmarshall(UnmarshallContext context, Stream in1);
    private string LoadCategory(XmlDocument xmlDoc);
    private string LoadContentStatus(XmlDocument xmlDoc);
    private string LoadContentType(XmlDocument xmlDoc);
    private string LoadCreated(XmlDocument xmlDoc);
    private string LoadCreator(XmlDocument xmlDoc);
    private string LoadDescription(XmlDocument xmlDoc);
    private string LoadIdentifier(XmlDocument xmlDoc);
    private string LoadKeywords(XmlDocument xmlDoc);
    private string LoadLanguage(XmlDocument xmlDoc);
    private string LoadLastModifiedBy(XmlDocument xmlDoc);
    private string LoadLastPrinted(XmlDocument xmlDoc);
    private string LoadModified(XmlDocument xmlDoc);
    private string LoadRevision(XmlDocument xmlDoc);
    private string LoadSubject(XmlDocument xmlDoc);
    private string LoadTitle(XmlDocument xmlDoc);
    private string LoadVersion(XmlDocument xmlDoc);
    public void CheckElementForOPCCompliance(XmlElement el);
}
public class NPOI.OpenXml4Net.OPC.Internal.Unmarshallers.UnmarshallContext : object {
    private OPCPackage _package;
    private PackagePartName partName;
    private ZipEntry zipEntry;
    internal OPCPackage Package { get; internal set; }
    internal PackagePartName PartName { get; internal set; }
    internal ZipEntry ZipEntry { get; internal set; }
    public UnmarshallContext(OPCPackage targetPackage, PackagePartName partName);
    internal OPCPackage get_Package();
    internal void set_Package(OPCPackage value);
    internal PackagePartName get_PartName();
    internal void set_PartName(PackagePartName value);
    internal ZipEntry get_ZipEntry();
    internal void set_ZipEntry(ZipEntry value);
}
public class NPOI.OpenXml4Net.OPC.Internal.ZipContentTypeManager : ContentTypeManager {
    private static POILogger logger;
    public ZipContentTypeManager(Stream in1, OPCPackage pkg);
    private static ZipContentTypeManager();
    public virtual bool SaveImpl(XmlDocument content, Stream out1);
}
public class NPOI.OpenXml4Net.OPC.Internal.ZipHelper : object {
    private static string FORWARD_SLASH;
    public static int READ_WRITE_FILE_BUFFER_SIZE;
    private static ZipHelper();
    public static ZipEntry GetCorePropertiesZipEntry(ZipPackage pkg);
    public static ZipEntry GetContentTypeZipEntry(ZipPackage pkg);
    public static string GetOPCNameFromZipItemName(string zipItemName);
    public static string GetZipItemNameFromOPCName(string opcItemName);
    public static Uri GetZipURIFromOPCName(string opcItemName);
    public static void VerifyZipHeader(InputStream stream);
    private static InputStream PrepareToCheckHeader(InputStream stream);
    public static ZipInputStream OpenZipStream(Stream stream);
    public static ZipFile OpenZipFile(FileInfo file);
    public static ZipFile OpenZipFile(string path);
}
public abstract class NPOI.OpenXml4Net.OPC.OPCPackage : object {
    private static POILogger logger;
    protected static PackageAccess defaultPackageAccess;
    private PackageAccess packageAccess;
    protected PackagePartCollection partList;
    protected PackageRelationshipCollection relationships;
    protected SortedList`2<ContentType, PartMarshaller> partMarshallers;
    protected PartMarshaller defaultPartMarshaller;
    protected SortedList`2<ContentType, PartUnmarshaller> partUnmarshallers;
    protected PackagePropertiesPart packageProperties;
    protected ContentTypeManager contentTypeManager;
    protected bool isDirty;
    protected string originalPackagePath;
    protected Stream output;
    public PackageRelationshipCollection Relationships { get; }
    public bool HasRelationships { get; }
    public OPCPackage(PackageAccess access);
    private static OPCPackage();
    private void Init();
    public static OPCPackage Open(string path);
    public static OPCPackage Open(FileInfo file);
    public static OPCPackage Open(ZipEntrySource zipEntry);
    public static OPCPackage Open(string path, PackageAccess access);
    public static OPCPackage Open(FileInfo file, PackageAccess access);
    public static OPCPackage Open(Stream stream);
    public static OPCPackage Open(Stream stream, bool readOnly);
    public static OPCPackage OpenOrCreate(string path);
    public static OPCPackage Create(string path);
    public static OPCPackage Create(Stream output);
    private static void ConfigurePackage(OPCPackage pkg);
    public void Flush();
    public sealed virtual void Close();
    public void Revert();
    public void AddThumbnail(string path);
    public void AddThumbnail(string filename, Stream data);
    internal void ThrowExceptionIfReadOnly();
    internal void ThrowExceptionIfWriteOnly();
    public PackageProperties GetPackageProperties();
    public bool PartExists(Uri uri);
    public PackagePart GetPart(Uri uri);
    public PackagePart GetPart(PackagePartName partName);
    public List`1<PackagePart> GetPartsByContentType(string contentType);
    public List`1<PackagePart> GetPartsByRelationshipType(string relationshipType);
    public List`1<PackagePart> GetPartsByName(Regex namePattern);
    public PackagePart GetPart(PackageRelationship partRel);
    public List`1<PackagePart> GetParts();
    public PackagePart CreatePart(Uri partName, string contentType);
    public PackagePart CreatePart(PackagePartName partName, string contentType);
    public PackagePart CreatePart(PackagePartName partName, string contentType, bool loadRelationships);
    public PackagePart CreatePart(PackagePartName partName, string contentType, MemoryStream content);
    protected PackagePart AddPackagePart(PackagePart part);
    public void RemovePart(PackagePart part);
    public void RemovePart(PackagePartName PartName);
    public void RemovePartRecursive(PackagePartName PartName);
    public void DeletePart(Uri uri);
    public void DeletePart(PackagePartName partName);
    public void DeletePartRecursive(PackagePartName partName);
    public bool ContainPart(PackagePartName partName);
    public sealed virtual PackageRelationship AddRelationship(PackagePartName targetPartName, TargetMode targetMode, string relationshipType, string relID);
    public sealed virtual PackageRelationship AddRelationship(PackagePartName targetPartName, TargetMode targetMode, string relationshipType);
    public sealed virtual PackageRelationship AddExternalRelationship(string target, string relationshipType);
    public sealed virtual PackageRelationship AddExternalRelationship(string target, string relationshipType, string id);
    public sealed virtual void RemoveRelationship(string id);
    public sealed virtual PackageRelationshipCollection get_Relationships();
    public sealed virtual PackageRelationshipCollection GetRelationshipsByType(string relationshipType);
    private PackageRelationshipCollection GetRelationshipsHelper(string id);
    public sealed virtual void ClearRelationships();
    public void EnsureRelationships();
    public sealed virtual PackageRelationship GetRelationship(string id);
    public sealed virtual bool get_HasRelationships();
    public sealed virtual bool IsRelationshipExists(PackageRelationship rel);
    public void AddMarshaller(string contentType, PartMarshaller marshaller);
    public void AddUnmarshaller(string contentType, PartUnmarshaller unmarshaller);
    public void RemoveMarshaller(string contentType);
    public void RemoveUnmarshaller(string contentType);
    public PackageAccess GetPackageAccess();
    public bool ValidatePackage(OPCPackage pkg);
    public void Save(string path);
    public void Save(Stream outputStream);
    protected abstract virtual PackagePart CreatePartImpl(PackagePartName PartName, string contentType, bool loadRelationships);
    protected abstract virtual void RemovePartImpl(PackagePartName PartName);
    protected abstract virtual void FlushImpl();
    protected abstract virtual void CloseImpl();
    protected abstract virtual void RevertImpl();
    protected abstract virtual void SaveImpl(Stream outputStream);
    protected abstract virtual PackagePart GetPartImpl(PackagePartName PartName);
    protected abstract virtual PackagePart[] GetPartsImpl();
    public bool ReplaceContentType(string oldContentType, string newContentType);
    public void RegisterPartAndContentType(PackagePart part);
    public void UnregisterPartAndContentType(PackagePartName partName);
}
public enum NPOI.OpenXml4Net.OPC.PackageAccess : Enum {
    public int value__;
    public static PackageAccess READ;
    public static PackageAccess WRITE;
    public static PackageAccess READ_WRITE;
}
public class NPOI.OpenXml4Net.OPC.PackageNamespaces : object {
    public static string NAMESPACE_DCTERMS;
    public static string NAMESPACE_DC;
    public static string CONTENT_TYPES;
    public static string CORE_PROPERTIES;
    public static string DIGITAL_SIGNATURE;
    public static string RELATIONSHIPS;
    public static string MARKUP_COMPATIBILITY;
    public static string DCMITYPE;
    public static string SCHEMA_MAIN;
    public static string SCHEMA_DRAWING;
    public static string SCHEMA_SHEETDRAWINGS;
    public static string SCHEMA_VT;
    public static string SCHEMA_CHART;
    public static string SCHEMA_RELATIONSHIPS;
}
public abstract class NPOI.OpenXml4Net.OPC.PackagePart : object {
    internal OPCPackage _container;
    protected PackagePartName _partName;
    internal ContentType _contentType;
    private bool _isRelationshipPart;
    private bool _isDeleted;
    private PackageRelationshipCollection _relationships;
    public PackageRelationshipCollection Relationships { get; }
    public bool HasRelationships { get; }
    public PackagePartName PartName { get; }
    public string ContentType { get; public set; }
    public ContentType ContentTypeDetails { get; }
    public OPCPackage Package { get; }
    public bool IsRelationshipPart { get; }
    public bool IsDeleted { get; public set; }
    public long Size { get; }
    protected PackagePart(OPCPackage pack, PackagePartName partName, ContentType contentType);
    protected PackagePart(OPCPackage pack, PackagePartName partName, ContentType contentType, bool loadRelationships);
    public PackagePart(OPCPackage pack, PackagePartName partName, string contentType);
    public PackageRelationship FindExistingRelation(PackagePart packagePart);
    public sealed virtual PackageRelationship AddExternalRelationship(string target, string relationshipType);
    public sealed virtual PackageRelationship AddExternalRelationship(string target, string relationshipType, string id);
    public sealed virtual PackageRelationship AddRelationship(PackagePartName targetPartName, TargetMode targetMode, string relationshipType);
    public sealed virtual PackageRelationship AddRelationship(PackagePartName targetPartName, TargetMode targetMode, string relationshipType, string id);
    public PackageRelationship AddRelationship(Uri targetURI, TargetMode targetMode, string relationshipType);
    public PackageRelationship AddRelationship(Uri targetURI, TargetMode targetMode, string relationshipType, string id);
    public sealed virtual void ClearRelationships();
    public sealed virtual void RemoveRelationship(string id);
    public sealed virtual PackageRelationshipCollection get_Relationships();
    public sealed virtual PackageRelationship GetRelationship(string id);
    public sealed virtual PackageRelationshipCollection GetRelationshipsByType(string relationshipType);
    private PackageRelationshipCollection GetRelationshipsCore(string filter);
    public sealed virtual bool get_HasRelationships();
    public sealed virtual bool IsRelationshipExists(PackageRelationship rel);
    public PackagePart GetRelatedPart(PackageRelationship rel);
    public Stream GetStream(FileMode mode);
    public Stream GetStream(FileMode mode, FileAccess access);
    public Stream GetInputStream();
    public Stream GetOutputStream();
    private void ThrowExceptionIfRelationship();
    private void LoadRelationships();
    public PackagePartName get_PartName();
    public string get_ContentType();
    public void set_ContentType(string value);
    public ContentType get_ContentTypeDetails();
    public OPCPackage get_Package();
    public bool get_IsRelationshipPart();
    public bool get_IsDeleted();
    public void set_IsDeleted(bool value);
    public virtual long get_Size();
    public virtual string ToString();
    public sealed virtual int CompareTo(PackagePart other);
    protected abstract virtual Stream GetInputStreamImpl();
    protected abstract virtual Stream GetOutputStreamImpl();
    public abstract virtual bool Save(Stream zos);
    public abstract virtual bool Load(Stream ios);
    public abstract virtual void Close();
    public abstract virtual void Flush();
    public virtual void Clear();
}
public class NPOI.OpenXml4Net.OPC.PackagePartCollection : SortedList`2<PackagePartName, PackagePart> {
    private static long serialVersionUID;
    private List`1<string> registerPartNameStr;
    private static PackagePartCollection();
    public PackagePart Put(PackagePartName partName, PackagePart part);
    public void Remove(PackagePartName key);
}
public class NPOI.OpenXml4Net.OPC.PackagePartName : object {
    private Uri partNameURI;
    private static String[] RFC3986_PCHAR_SUB_DELIMS;
    private static String[] RFC3986_PCHAR_UNRESERVED_SUP;
    private static String[] RFC3986_PCHAR_AUTHORIZED_SUP;
    private bool isRelationship;
    public string Extension { get; }
    public string Name { get; }
    public Uri URI { get; }
    public PackagePartName(Uri uri, bool checkConformance);
    internal PackagePartName(string partName, bool checkConformance);
    private static PackagePartName();
    private bool IsRelationshipPartURI(Uri partUri);
    public bool IsRelationshipPartURI();
    private static void ThrowExceptionIfInvalidPartUri(Uri partUri);
    private static void ThrowExceptionIfEmptyURI(Uri partURI);
    private static void ThrowExceptionIfPartNameHaveInvalidSegments(Uri partUri);
    private static void CheckPCharCompliance(string segment);
    private static void ThrowExceptionIfPartNameNotStartsWithForwardSlashChar(Uri partUri);
    private static void ThrowExceptionIfPartNameEndsWithForwardSlashChar(Uri partUri);
    private static void ThrowExceptionIfAbsoluteUri(Uri partUri);
    public sealed virtual int CompareTo(PackagePartName other);
    public string get_Extension();
    public string get_Name();
    public virtual bool Equals(object other);
    public virtual int GetHashCode();
    public virtual string ToString();
    public Uri get_URI();
    public static int Compare(PackagePartName obj1, PackagePartName obj2);
    public static int Compare(string str1, string str2);
}
public interface NPOI.OpenXml4Net.OPC.PackageProperties {
    public abstract virtual string GetCategoryProperty();
    public abstract virtual void SetCategoryProperty(string category);
    public abstract virtual string GetContentStatusProperty();
    public abstract virtual void SetContentStatusProperty(string contentStatus);
    public abstract virtual string GetContentTypeProperty();
    public abstract virtual void SetContentTypeProperty(string contentType);
    public abstract virtual Nullable`1<DateTime> GetCreatedProperty();
    public abstract virtual void SetCreatedProperty(string created);
    public abstract virtual void SetCreatedProperty(Nullable`1<DateTime> created);
    public abstract virtual string GetCreatorProperty();
    public abstract virtual void SetCreatorProperty(string creator);
    public abstract virtual string GetDescriptionProperty();
    public abstract virtual void SetDescriptionProperty(string description);
    public abstract virtual string GetIdentifierProperty();
    public abstract virtual void SetIdentifierProperty(string identifier);
    public abstract virtual string GetKeywordsProperty();
    public abstract virtual void SetKeywordsProperty(string keywords);
    public abstract virtual string GetLanguageProperty();
    public abstract virtual void SetLanguageProperty(string language);
    public abstract virtual string GetLastModifiedByProperty();
    public abstract virtual void SetLastModifiedByProperty(string lastModifiedBy);
    public abstract virtual Nullable`1<DateTime> GetLastPrintedProperty();
    public abstract virtual void SetLastPrintedProperty(string lastPrinted);
    public abstract virtual void SetLastPrintedProperty(Nullable`1<DateTime> lastPrinted);
    public abstract virtual Nullable`1<DateTime> GetModifiedProperty();
    public abstract virtual void SetModifiedProperty(string modified);
    public abstract virtual void SetModifiedProperty(Nullable`1<DateTime> modified);
    public abstract virtual string GetRevisionProperty();
    public abstract virtual void SetRevisionProperty(string revision);
    public abstract virtual string GetSubjectProperty();
    public abstract virtual void SetSubjectProperty(string subject);
    public abstract virtual string GetTitleProperty();
    public abstract virtual void SetTitleProperty(string title);
    public abstract virtual string GetVersionProperty();
    public abstract virtual void SetVersionProperty(string version);
}
public class NPOI.OpenXml4Net.OPC.PackageRelationship : object {
    private static Uri containerRelationshipPart;
    public static string ID_ATTRIBUTE_NAME;
    public static string RELATIONSHIPS_TAG_NAME;
    public static string RELATIONSHIP_TAG_NAME;
    public static string TARGET_ATTRIBUTE_NAME;
    public static string TARGET_MODE_ATTRIBUTE_NAME;
    public static string TYPE_ATTRIBUTE_NAME;
    private string id;
    private OPCPackage container;
    private string relationshipType;
    private PackagePart source;
    private Nullable`1<TargetMode> targetMode;
    private Uri targetUri;
    public static Uri ContainerPartRelationship { get; }
    public OPCPackage Package { get; }
    public string Id { get; }
    public string RelationshipType { get; }
    public PackagePart Source { get; }
    public Uri SourceUri { get; }
    public Nullable`1<TargetMode> TargetMode { get; }
    public Uri TargetUri { get; }
    public PackageRelationship(OPCPackage pkg, PackagePart sourcePart, Uri targetUri, TargetMode targetMode, string relationshipType, string id);
    private static PackageRelationship();
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
    public static Uri get_ContainerPartRelationship();
    public OPCPackage get_Package();
    public string get_Id();
    public string get_RelationshipType();
    public PackagePart get_Source();
    public Uri get_SourceUri();
    public Nullable`1<TargetMode> get_TargetMode();
    public Uri get_TargetUri();
    public virtual string ToString();
}
public class NPOI.OpenXml4Net.OPC.PackageRelationshipCollection : object {
    private static POILogger logger;
    private SortedList`2<string, PackageRelationship> relationshipsByID;
    private SortedList`2<string, PackageRelationship> internalRelationshipsByTargetName;
    private PackagePart relationshipPart;
    private PackagePart sourcePart;
    private PackagePartName partName;
    private OPCPackage container;
    private int nextRelationshipId;
    public int Size { get; }
    private PackageRelationship System.Collections.Generic.IEnumerator<NPOI.OpenXml4Net.OPC.PackageRelationship>.Current { get; }
    private object System.Collections.IEnumerator.Current { get; }
    public PackageRelationshipCollection(PackageRelationshipCollection coll, string filter);
    public PackageRelationshipCollection(OPCPackage container);
    public PackageRelationshipCollection(PackagePart part);
    public PackageRelationshipCollection(OPCPackage container, PackagePart part);
    private static PackageRelationshipCollection();
    private static PackagePartName GetRelationshipPartName(PackagePart part);
    public void AddRelationship(PackageRelationship relPart);
    public PackageRelationship AddRelationship(Uri targetUri, TargetMode targetMode, string relationshipType, string id);
    public void RemoveRelationship(string id);
    public void RemoveRelationship(PackageRelationship rel);
    public PackageRelationship GetRelationship(int index);
    public PackageRelationship GetRelationshipByID(string id);
    public int get_Size();
    private void ParseRelationshipsPart(PackagePart relPart);
    public PackageRelationshipCollection GetRelationships(string typeFilter);
    public IEnumerator`1<PackageRelationship> GetEnumerator();
    public IEnumerator`1<PackageRelationship> Iterator(string typeFilter);
    public void Clear();
    public PackageRelationship FindExistingInternalRelation(PackagePart packagePart);
    public virtual string ToString();
    private sealed virtual override PackageRelationship System.Collections.Generic.IEnumerator<NPOI.OpenXml4Net.OPC.PackageRelationship>.get_Current();
    private sealed virtual override void System.IDisposable.Dispose();
    private sealed virtual override object System.Collections.IEnumerator.get_Current();
    private sealed virtual override bool System.Collections.IEnumerator.MoveNext();
    private sealed virtual override void System.Collections.IEnumerator.Reset();
}
public static class NPOI.OpenXml4Net.OPC.PackageRelationshipTypes : object {
    public static string CORE_PROPERTIES;
    public static string CORE_PROPERTIES_ECMA376;
    public static string DIGITAL_SIGNATURE;
    public static string DIGITAL_SIGNATURE_CERTIFICATE;
    public static string DIGITAL_SIGNATURE_ORIGIN;
    public static string THUMBNAIL;
    public static string EXTENDED_PROPERTIES;
    public static string STRICT_EXTENDED_PROPERTIES;
    public static string CUSTOM_PROPERTIES;
    public static string CORE_DOCUMENT;
    public static string STRICT_CORE_DOCUMENT;
    public static string CUSTOM_XML;
    public static string IMAGE_PART;
    public static string HYPERLINK_PART;
    public static string STYLE_PART;
    public static string EXTERNAL_LINK_PATH;
    public static string VISIO_CORE_DOCUMENT;
}
public class NPOI.OpenXml4Net.OPC.PackagingUriHelper : object {
    private static Uri packageRootUri;
    public static string RELATIONSHIP_PART_EXTENSION_NAME;
    public static string RELATIONSHIP_PART_SEGMENT_NAME;
    public static string PACKAGE_PROPERTIES_SEGMENT_NAME;
    public static string PACKAGE_CORE_PROPERTIES_NAME;
    public static char FORWARD_SLASH_CHAR;
    public static string FORWARD_SLASH_STRING;
    public static Uri PACKAGE_RELATIONSHIPS_ROOT_URI;
    public static PackagePartName PACKAGE_RELATIONSHIPS_ROOT_PART_NAME;
    public static Uri CORE_PROPERTIES_URI;
    public static PackagePartName CORE_PROPERTIES_PART_NAME;
    public static Uri PACKAGE_ROOT_URI;
    public static PackagePartName PACKAGE_ROOT_PART_NAME;
    private static Regex missingAuthPattern;
    private static bool IsMono;
    private static Char[] hexDigits;
    public static Uri PackageRootUri { get; }
    private static PackagingUriHelper();
    public static Uri get_PackageRootUri();
    public static Uri ParseUri(string s, UriKind kind);
    public static bool IsRelationshipPartURI(Uri partUri);
    public static string GetFilename(Uri uri);
    public static string GetFilenameWithoutExtension(Uri uri);
    public static Uri GetPath(Uri uri);
    public static Uri Combine(Uri prefix, Uri suffix);
    public static string Combine(string prefix, string suffix);
    public static Uri RelativizeUri(Uri sourceURI, Uri targetURI, bool msCompatible);
    public static Uri RelativizeUri(Uri sourceURI, Uri targetURI);
    public static Uri ResolvePartUri(Uri sourcePartUri, Uri targetUri);
    public static Uri GetURIFromPath(string path);
    public static Uri GetSourcePartUriFromRelationshipPartUri(Uri relationshipPartUri);
    public static PackagePartName CreatePartName(Uri partUri);
    public static PackagePartName CreatePartName(string partName);
    public static PackagePartName CreatePartName(string partName, PackagePart relativePart);
    public static PackagePartName CreatePartName(Uri partName, PackagePart relativePart);
    public static bool IsValidPartName(Uri partUri);
    public static string DecodeURI(Uri uri);
    public static Uri ToUri(string value);
    public static string Encode(string s);
    private static bool IsUnsafe(int ch);
    public static PackagePartName GetRelationshipPartName(PackagePartName partName);
}
internal interface NPOI.OpenXml4Net.OPC.RelationshipSource {
    public PackageRelationshipCollection Relationships { get; }
    public bool HasRelationships { get; }
    public abstract virtual PackageRelationship AddRelationship(PackagePartName targetPartName, TargetMode targetMode, string relationshipType);
    public abstract virtual PackageRelationship AddRelationship(PackagePartName targetPartName, TargetMode targetMode, string relationshipType, string id);
    public abstract virtual PackageRelationship AddExternalRelationship(string target, string relationshipType);
    public abstract virtual PackageRelationship AddExternalRelationship(string target, string relationshipType, string id);
    public abstract virtual void ClearRelationships();
    public abstract virtual void RemoveRelationship(string id);
    public abstract virtual PackageRelationshipCollection get_Relationships();
    public abstract virtual PackageRelationship GetRelationship(string id);
    public abstract virtual PackageRelationshipCollection GetRelationshipsByType(string relationshipType);
    public abstract virtual bool get_HasRelationships();
    public abstract virtual bool IsRelationshipExists(PackageRelationship rel);
}
public class NPOI.OpenXml4Net.OPC.StreamHelper : object {
    public static void SaveXmlInStream(XmlDocument xmlContent, Stream outStream);
    public static void CopyStream(Stream inStream, Stream outStream);
}
public enum NPOI.OpenXml4Net.OPC.TargetMode : Enum {
    public int value__;
    public static TargetMode Internal;
    public static TargetMode External;
}
public class NPOI.OpenXml4Net.OPC.ZipPackage : OPCPackage {
    private static string MIMETYPE;
    private static string SETTINGS_XML;
    private static POILogger logger;
    private ZipEntrySource zipArchive;
    private bool isStream;
    public bool IsExternalStream { get; public set; }
    public ZipEntrySource ZipArchive { get; }
    public ZipPackage(Stream in1, PackageAccess access);
    public ZipPackage(string path, PackageAccess access);
    public ZipPackage(FileInfo file, PackageAccess access);
    public ZipPackage(ZipEntrySource zipEntry, PackageAccess access);
    private static ZipPackage();
    public bool get_IsExternalStream();
    public void set_IsExternalStream(bool value);
    protected virtual PackagePart[] GetPartsImpl();
    private PackagePartName BuildPartName(ZipEntry entry);
    protected virtual PackagePart CreatePartImpl(PackagePartName partName, string contentType, bool loadRelationships);
    protected virtual void RemovePartImpl(PackagePartName partName);
    protected virtual void FlushImpl();
    protected virtual void CloseImpl();
    private string GenerateTempFileName(string directory);
    protected virtual void RevertImpl();
    protected virtual PackagePart GetPartImpl(PackagePartName partName);
    protected virtual void SaveImpl(Stream outputStream);
    public ZipEntrySource get_ZipArchive();
}
public class NPOI.OpenXml4Net.OPC.ZipPackagePart : PackagePart {
    private ZipEntry zipEntry;
    public ZipEntry ZipArchive { get; }
    public long Size { get; }
    public ZipPackagePart(OPCPackage container, PackagePartName partName, string contentType);
    public ZipPackagePart(OPCPackage container, ZipEntry zipEntry, PackagePartName partName, string contentType);
    public ZipEntry get_ZipArchive();
    protected virtual Stream GetInputStreamImpl();
    protected virtual Stream GetOutputStreamImpl();
    public virtual long get_Size();
    public virtual bool Save(Stream os);
    public virtual bool Load(Stream ios);
    public virtual void Close();
    public virtual void Flush();
}
public class NPOI.OpenXml4Net.OpenXml4NetException : Exception {
    public OpenXml4NetException(string msg);
    public OpenXml4NetException(string message, Exception innerException);
}
public static class NPOI.OpenXml4Net.Util.XmlHelper : object {
    private static Char[] xmlEncodeCharsToReplace;
    private static XmlHelper();
    public static T ReadEnum(XmlAttribute attr);
    public static string GetEnumValue(Enum e);
    public static string GetXmlAttrNameFromEnumValue(T pEnumVal);
    public static T GetEnumValueFromString(string value);
    public static int ReadInt(XmlAttribute attr, Nullable`1<int> defaultValue);
    public static long ReadLong(XmlAttribute attr);
    public static Nullable`1<int> ReadIntNull(XmlAttribute attr);
    public static string ReadString(XmlAttribute attr);
    public static decimal ReadDecimal(XmlAttribute attr);
    public static UInt32 ReadUInt(XmlAttribute attr, UInt32 defaultValue);
    public static UInt32 ReadUInt(XmlAttribute attr);
    public static ulong ReadULong(XmlAttribute attr);
    public static bool ReadBool(XmlAttribute attr);
    public static double ReadDouble(XmlAttribute attr);
    public static Nullable`1<double> ReadDoubleNull(XmlAttribute attr);
    public static bool ReadBool(XmlAttribute attr, bool blankValue);
    public static Nullable`1<DateTime> ReadDateTime(XmlAttribute attr);
    public static string ExcelEncodeString(string t);
    public static string ExcelDecodeString(string t);
    public static string EncodeXml(string xml);
    public static void WriteAttribute(StreamWriter sw, string attributeName, bool value);
    public static void WriteAttribute(StreamWriter sw, string attributeName, bool value, bool writeIfBlank, bool defaultValue);
    public static void WriteAttribute(StreamWriter sw, string attributeName, double value);
    public static void WriteAttribute(StreamWriter sw, string attributeName, double value, bool writeIfBlank);
    public static void WriteAttribute(StreamWriter sw, string attributeName, int value, bool writeIfBlank);
    public static void WriteAttribute(StreamWriter sw, string attributeName, int value, int defaultValue);
    public static void WriteAttribute(StreamWriter sw, string attributeName, int value);
    public static void WriteAttribute(StreamWriter sw, string attributeName, UInt32 value, bool writeIfBlank);
    public static void WriteAttribute(StreamWriter sw, string attributeName, UInt32 value);
    public static void WriteAttribute(StreamWriter sw, string attributeName, string value);
    public static void WriteAttribute(StreamWriter sw, string attributeName, string value, bool writeIfBlank);
    public static void WriteAttribute(StreamWriter sw, string attributeName, string value, bool writeIfBlank, string defaultValue);
    public static void WriteAttribute(StreamWriter sw, string attributeName, Byte[] value);
    public static void WriteAttribute(StreamWriter sw, string attributeName, UInt32 value, UInt32 defaultValue, bool writeIfBlank);
    public static void WriteAttribute(StreamWriter sw, string attributeName, Nullable`1<DateTime> value);
    public static void LoadXmlSafe(XmlDocument xmlDoc, Stream stream);
    public static void LoadXmlSafe(XmlDocument xmlDoc, string xml, Encoding encoding);
    public static Byte[] ReadBytes(XmlAttribute attr);
    public static sbyte ReadSByte(XmlAttribute attr);
    public static ushort ReadUShort(XmlAttribute attr);
    public static byte ReadByte(XmlAttribute attr);
}
public interface NPOI.OpenXml4Net.Util.ZipEntrySource {
    public IEnumerator Entries { get; }
    public bool IsClosed { get; }
    public abstract virtual IEnumerator get_Entries();
    public abstract virtual Stream GetInputStream(ZipEntry entry);
    public abstract virtual void Close();
    public abstract virtual bool get_IsClosed();
}
public class NPOI.OpenXml4Net.Util.ZipFileZipEntrySource : object {
    private ZipFile zipArchive;
    public bool IsClosed { get; }
    public IEnumerator Entries { get; }
    public ZipFileZipEntrySource(ZipFile zipFile);
    public sealed virtual void Close();
    public sealed virtual bool get_IsClosed();
    public sealed virtual IEnumerator get_Entries();
    public sealed virtual Stream GetInputStream(ZipEntry entry);
}
public class NPOI.OpenXml4Net.Util.ZipInputStreamZipEntrySource : object {
    private List`1<FakeZipEntry> zipEntries;
    public IEnumerator Entries { get; }
    public bool IsClosed { get; }
    public ZipInputStreamZipEntrySource(ZipInputStream inp);
    public sealed virtual IEnumerator get_Entries();
    public sealed virtual Stream GetInputStream(ZipEntry zipEntry);
    public sealed virtual void Close();
    public sealed virtual bool get_IsClosed();
}
public class NPOI.OpenXml4Net.Util.ZipSecureFile : ZipFile {
    private static double MIN_INFLATE_RATIO;
    private static long MAX_ENTRY_SIZE;
    public ZipSecureFile(FileStream file, int mode);
    public ZipSecureFile(FileStream file);
    public ZipSecureFile(string name);
    private static ZipSecureFile();
    public static void SetMinInflateRatio(double ratio);
    public static double GetMinInflateRatio();
    public static void SetMaxEntrySize(long maxEntrySize);
    public static long GetMaxEntrySize();
    public Stream GetInputStream(ZipEntry entry);
    public static ThresholdInputStream AddThreshold(Stream zipIS);
}
public class NPOI.Util.DocumentHelper : object {
    public static XPathDocument ReadDocument(Stream stream);
    public static XmlDocument LoadDocument(Stream stream);
    public static XPathDocument CreateDocument();
}
public static class NPOI.Util.XMLConstants : object {
    public static string NULL_NS_URI;
    public static string DEFAULT_NS_PREFIX;
    public static string XML_NS_URI;
    public static string XML_NS_PREFIX;
    public static string XMLNS_ATTRIBUTE_NS_URI;
    public static string XMLNS_ATTRIBUTE;
    public static string W3C_XML_SCHEMA_NS_URI;
    public static string W3C_XML_SCHEMA_INSTANCE_NS_URI;
    public static string W3C_XPATH_DATATYPE_NS_URI;
    public static string XML_DTD_NS_URI;
    public static string RELAXNG_NS_URI;
    private static XMLConstants();
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
[AttributeUsageAttribute("2")]
internal class System.Runtime.CompilerServices.RefSafetyRulesAttribute : Attribute {
    public int Version;
    public RefSafetyRulesAttribute(int );
}
