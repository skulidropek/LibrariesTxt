public class NReco.PdfGenerator.HtmlToPdfConverter : object {
    [CompilerGeneratedAttribute]
private string <PdfToolPath>k__BackingField;
    [CompilerGeneratedAttribute]
private string <WkHtmlToPdfExeName>k__BackingField;
    [CompilerGeneratedAttribute]
private string <TempFilesPath>k__BackingField;
    [CompilerGeneratedAttribute]
private PageOrientation <Orientation>k__BackingField;
    [CompilerGeneratedAttribute]
private PageSize <Size>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <LowQuality>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <Grayscale>k__BackingField;
    [CompilerGeneratedAttribute]
private float <Zoom>k__BackingField;
    [CompilerGeneratedAttribute]
private PageMargins <Margins>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<float> <PageWidth>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<float> <PageHeight>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <GenerateToc>k__BackingField;
    [CompilerGeneratedAttribute]
private string <TocHeaderText>k__BackingField;
    [CompilerGeneratedAttribute]
private string <CustomWkHtmlArgs>k__BackingField;
    [CompilerGeneratedAttribute]
private string <CustomWkHtmlPageArgs>k__BackingField;
    [CompilerGeneratedAttribute]
private string <CustomWkHtmlCoverArgs>k__BackingField;
    [CompilerGeneratedAttribute]
private string <CustomWkHtmlTocArgs>k__BackingField;
    [CompilerGeneratedAttribute]
private string <PageHeaderHtml>k__BackingField;
    [CompilerGeneratedAttribute]
private string <PageFooterHtml>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<TimeSpan> <ExecutionTimeout>k__BackingField;
    [CompilerGeneratedAttribute]
private ProcessPriorityClass <ProcessPriority>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<IntPtr> <ProcessProcessorAffinity>k__BackingField;
    [CompilerGeneratedAttribute]
private EventHandler`1<DataReceivedEventArgs> LogReceived;
    [CompilerGeneratedAttribute]
private bool <Quiet>k__BackingField;
    [CompilerGeneratedAttribute]
private LicenseInfo <License>k__BackingField;
    private Process WkHtmlToPdfProcess;
    private bool batchMode;
    private static string headerFooterHtmlTpl;
    private static object globalObj;
    private static String[] ignoreWkHtmlToPdfErrLines;
    public string PdfToolPath { get; public set; }
    public string WkHtmlToPdfExeName { get; public set; }
    public string TempFilesPath { get; public set; }
    public PageOrientation Orientation { get; public set; }
    public PageSize Size { get; public set; }
    public bool LowQuality { get; public set; }
    public bool Grayscale { get; public set; }
    public float Zoom { get; public set; }
    public PageMargins Margins { get; public set; }
    public Nullable`1<float> PageWidth { get; public set; }
    public Nullable`1<float> PageHeight { get; public set; }
    public bool GenerateToc { get; public set; }
    public string TocHeaderText { get; public set; }
    public string CustomWkHtmlArgs { get; public set; }
    public string CustomWkHtmlPageArgs { get; public set; }
    public string CustomWkHtmlCoverArgs { get; public set; }
    public string CustomWkHtmlTocArgs { get; public set; }
    public string PageHeaderHtml { get; public set; }
    public string PageFooterHtml { get; public set; }
    public Nullable`1<TimeSpan> ExecutionTimeout { get; public set; }
    public ProcessPriorityClass ProcessPriority { get; public set; }
    public Nullable`1<IntPtr> ProcessProcessorAffinity { get; public set; }
    public bool Quiet { get; public set; }
    public LicenseInfo License { get; private set; }
    private static HtmlToPdfConverter();
    [CompilerGeneratedAttribute]
public string get_PdfToolPath();
    [CompilerGeneratedAttribute]
public void set_PdfToolPath(string value);
    [CompilerGeneratedAttribute]
public string get_WkHtmlToPdfExeName();
    [CompilerGeneratedAttribute]
public void set_WkHtmlToPdfExeName(string value);
    [CompilerGeneratedAttribute]
public string get_TempFilesPath();
    [CompilerGeneratedAttribute]
public void set_TempFilesPath(string value);
    [CompilerGeneratedAttribute]
public PageOrientation get_Orientation();
    [CompilerGeneratedAttribute]
public void set_Orientation(PageOrientation value);
    [CompilerGeneratedAttribute]
public PageSize get_Size();
    [CompilerGeneratedAttribute]
public void set_Size(PageSize value);
    [CompilerGeneratedAttribute]
public bool get_LowQuality();
    [CompilerGeneratedAttribute]
public void set_LowQuality(bool value);
    [CompilerGeneratedAttribute]
public bool get_Grayscale();
    [CompilerGeneratedAttribute]
public void set_Grayscale(bool value);
    [CompilerGeneratedAttribute]
public float get_Zoom();
    [CompilerGeneratedAttribute]
public void set_Zoom(float value);
    [CompilerGeneratedAttribute]
public PageMargins get_Margins();
    [CompilerGeneratedAttribute]
public void set_Margins(PageMargins value);
    [CompilerGeneratedAttribute]
public Nullable`1<float> get_PageWidth();
    [CompilerGeneratedAttribute]
public void set_PageWidth(Nullable`1<float> value);
    [CompilerGeneratedAttribute]
public Nullable`1<float> get_PageHeight();
    [CompilerGeneratedAttribute]
public void set_PageHeight(Nullable`1<float> value);
    [CompilerGeneratedAttribute]
public bool get_GenerateToc();
    [CompilerGeneratedAttribute]
public void set_GenerateToc(bool value);
    [CompilerGeneratedAttribute]
public string get_TocHeaderText();
    [CompilerGeneratedAttribute]
public void set_TocHeaderText(string value);
    [CompilerGeneratedAttribute]
public string get_CustomWkHtmlArgs();
    [CompilerGeneratedAttribute]
public void set_CustomWkHtmlArgs(string value);
    [CompilerGeneratedAttribute]
public string get_CustomWkHtmlPageArgs();
    [CompilerGeneratedAttribute]
public void set_CustomWkHtmlPageArgs(string value);
    [CompilerGeneratedAttribute]
public string get_CustomWkHtmlCoverArgs();
    [CompilerGeneratedAttribute]
public void set_CustomWkHtmlCoverArgs(string value);
    [CompilerGeneratedAttribute]
public string get_CustomWkHtmlTocArgs();
    [CompilerGeneratedAttribute]
public void set_CustomWkHtmlTocArgs(string value);
    [CompilerGeneratedAttribute]
public string get_PageHeaderHtml();
    [CompilerGeneratedAttribute]
public void set_PageHeaderHtml(string value);
    [CompilerGeneratedAttribute]
public string get_PageFooterHtml();
    [CompilerGeneratedAttribute]
public void set_PageFooterHtml(string value);
    [CompilerGeneratedAttribute]
public Nullable`1<TimeSpan> get_ExecutionTimeout();
    [CompilerGeneratedAttribute]
public void set_ExecutionTimeout(Nullable`1<TimeSpan> value);
    [CompilerGeneratedAttribute]
public ProcessPriorityClass get_ProcessPriority();
    [CompilerGeneratedAttribute]
public void set_ProcessPriority(ProcessPriorityClass value);
    [CompilerGeneratedAttribute]
public Nullable`1<IntPtr> get_ProcessProcessorAffinity();
    [CompilerGeneratedAttribute]
public void set_ProcessProcessorAffinity(Nullable`1<IntPtr> value);
    [CompilerGeneratedAttribute]
public void add_LogReceived(EventHandler`1<DataReceivedEventArgs> value);
    [CompilerGeneratedAttribute]
public void remove_LogReceived(EventHandler`1<DataReceivedEventArgs> value);
    [CompilerGeneratedAttribute]
public bool get_Quiet();
    [CompilerGeneratedAttribute]
public void set_Quiet(bool value);
    [CompilerGeneratedAttribute]
public LicenseInfo get_License();
    [CompilerGeneratedAttribute]
private void set_License(LicenseInfo value);
    private void EnsureWkHtmlLibs();
    public Byte[] GeneratePdf(string htmlContent);
    public Byte[] GeneratePdf(string htmlContent, string coverHtml);
    public void GeneratePdf(string htmlContent, string coverHtml, Stream output);
    public void GeneratePdf(string htmlContent, string coverHtml, string outputPdfFilePath);
    public Byte[] GeneratePdfFromFile(string htmlFilePath, string coverHtml);
    public void GeneratePdfFromFile(string htmlFilePath, string coverHtml, Stream output);
    public void GeneratePdfFromFile(string htmlFilePath, string coverHtml, string outputPdfFilePath);
    public void GeneratePdfFromFiles(String[] htmlFiles, string coverHtml, Stream output);
    private WkHtmlInput[] GetWkHtmlInputFromFiles(String[] files);
    public void GeneratePdfFromFiles(String[] htmlFiles, string coverHtml, string outputPdfFilePath);
    public void GeneratePdfFromFiles(WkHtmlInput[] inputs, string coverHtml, string outputPdfFilePath);
    private void GeneratePdfInternal(String[] htmlFiles, string coverHtml, Stream output);
    private void CheckWkHtmlProcess();
    private string GetTempPath();
    private string GetToolExePath();
    private string CreateTempFile(string content, string tempPath, List`1<string> tempFilesList);
    private string ComposeArgs(PdfSettings pdfSettings);
    private void GeneratePdfInternal(WkHtmlInput[] htmlFiles, string inputContent, string coverHtml, string outputPdfFilePath, Stream outputStream);
    private void InvokeWkHtmlToPdfInBatch(PdfSettings pdfSettings);
    private void WaitForFile(string fullPath);
    private void InvokeWkHtmlToPdf(PdfSettings pdfSettings, string inputContent, Stream outputStream);
    public void BeginBatch();
    public void EndBatch();
    private void WaitWkHtmlProcessForExit();
    private void EnsureWkHtmlProcessStopped();
    private int ReadStdOutToStream(Process proc, Stream outputStream);
    private void CheckExitCode(int exitCode, string lastErrLine, bool outputNotEmpty);
    private void DeleteFileIfExists(string filePath);
    private void CopyStream(Stream inputStream, Stream outputStream, int bufSize);
}
public static class NReco.PdfGenerator.License : object {
    [CompilerGeneratedAttribute]
private static LicenseInfo <SharedLicense>k__BackingField;
    private static object lockObj;
    internal static LicenseInfo SharedLicense { get; private set; }
    private static License();
    [CompilerGeneratedAttribute]
internal static LicenseInfo get_SharedLicense();
    [CompilerGeneratedAttribute]
private static void set_SharedLicense(LicenseInfo value);
    public static void SetLicenseKey(string owner, string key);
}
public class NReco.PdfGenerator.LicenseInfo : object {
    private Info I;
    private static int magic_pub_idx;
    private static int magic_size;
    public bool IsLicensed { get; }
    public string LicenseOwner { get; }
    public bool get_IsLicensed();
    public string get_LicenseOwner();
    internal void Check();
    public void SetLicenseKey(string owner, string key);
    private Byte[] GetLicenseKeyBytes(string key);
    private static RSAParameters GetPublicKeyRSAParameters(Byte[] keyBytes);
    private static Byte[] BlockCopy(Byte[] source, int startAt, int size);
}
public class NReco.PdfGenerator.PageMargins : object {
    [CompilerGeneratedAttribute]
private Nullable`1<float> <Top>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<float> <Bottom>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<float> <Left>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<float> <Right>k__BackingField;
    public Nullable`1<float> Top { get; public set; }
    public Nullable`1<float> Bottom { get; public set; }
    public Nullable`1<float> Left { get; public set; }
    public Nullable`1<float> Right { get; public set; }
    [CompilerGeneratedAttribute]
public Nullable`1<float> get_Top();
    [CompilerGeneratedAttribute]
public void set_Top(Nullable`1<float> value);
    [CompilerGeneratedAttribute]
public Nullable`1<float> get_Bottom();
    [CompilerGeneratedAttribute]
public void set_Bottom(Nullable`1<float> value);
    [CompilerGeneratedAttribute]
public Nullable`1<float> get_Left();
    [CompilerGeneratedAttribute]
public void set_Left(Nullable`1<float> value);
    [CompilerGeneratedAttribute]
public Nullable`1<float> get_Right();
    [CompilerGeneratedAttribute]
public void set_Right(Nullable`1<float> value);
}
public enum NReco.PdfGenerator.PageOrientation : Enum {
    public int value__;
    public static PageOrientation Default;
    public static PageOrientation Landscape;
    public static PageOrientation Portrait;
}
public enum NReco.PdfGenerator.PageSize : Enum {
    public int value__;
    public static PageSize Default;
    public static PageSize A9;
    public static PageSize A8;
    public static PageSize A7;
    public static PageSize A6;
    public static PageSize A5;
    public static PageSize A4;
    public static PageSize A3;
    public static PageSize A2;
    public static PageSize A1;
    public static PageSize A0;
    public static PageSize B0;
    public static PageSize B1;
    public static PageSize B2;
    public static PageSize B3;
    public static PageSize B4;
    public static PageSize B5;
    public static PageSize B6;
    public static PageSize B7;
    public static PageSize B8;
    public static PageSize B9;
    public static PageSize B10;
    public static PageSize Letter;
    public static PageSize Legal;
    public static PageSize Tabloid;
}
public class NReco.PdfGenerator.WkHtmlInput : object {
    [CompilerGeneratedAttribute]
private string <Input>k__BackingField;
    [CompilerGeneratedAttribute]
private string <CustomWkHtmlPageArgs>k__BackingField;
    [CompilerGeneratedAttribute]
private string <PageHeaderHtml>k__BackingField;
    [CompilerGeneratedAttribute]
private string <PageFooterHtml>k__BackingField;
    [CompilerGeneratedAttribute]
private string <HeaderFilePath>k__BackingField;
    [CompilerGeneratedAttribute]
private string <FooterFilePath>k__BackingField;
    public string Input { get; public set; }
    public string CustomWkHtmlPageArgs { get; public set; }
    public string PageHeaderHtml { get; public set; }
    public string PageFooterHtml { get; public set; }
    internal string HeaderFilePath { get; internal set; }
    internal string FooterFilePath { get; internal set; }
    public WkHtmlInput(string inputFileOrUrl);
    [CompilerGeneratedAttribute]
public string get_Input();
    [CompilerGeneratedAttribute]
public void set_Input(string value);
    [CompilerGeneratedAttribute]
public string get_CustomWkHtmlPageArgs();
    [CompilerGeneratedAttribute]
public void set_CustomWkHtmlPageArgs(string value);
    [CompilerGeneratedAttribute]
public string get_PageHeaderHtml();
    [CompilerGeneratedAttribute]
public void set_PageHeaderHtml(string value);
    [CompilerGeneratedAttribute]
public string get_PageFooterHtml();
    [CompilerGeneratedAttribute]
public void set_PageFooterHtml(string value);
    [CompilerGeneratedAttribute]
internal string get_HeaderFilePath();
    [CompilerGeneratedAttribute]
internal void set_HeaderFilePath(string value);
    [CompilerGeneratedAttribute]
internal string get_FooterFilePath();
    [CompilerGeneratedAttribute]
internal void set_FooterFilePath(string value);
}
public class NReco.PdfGenerator.WkHtmlToPdfException : Exception {
    [CompilerGeneratedAttribute]
private int <ErrorCode>k__BackingField;
    public int ErrorCode { get; private set; }
    public WkHtmlToPdfException(int errCode, string message);
    [CompilerGeneratedAttribute]
public int get_ErrorCode();
    [CompilerGeneratedAttribute]
private void set_ErrorCode(int value);
}
