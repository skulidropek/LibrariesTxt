internal class NServiceBus.Extensions.Hosting.DeferredLogger : object {
    [CompilerGeneratedAttribute]
private string <name>P;
    [TupleElementNamesAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private ConcurrentQueue`1<ValueTuple`2<LogLevel, string>> deferredMessageLogs;
    [TupleElementNamesAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private ConcurrentQueue`1<ValueTuple`3<LogLevel, string, Exception>> deferredExceptionLogs;
    [TupleElementNamesAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private ConcurrentQueue`1<ValueTuple`3<LogLevel, string, Object[]>> deferredFormatLogs;
    private ILog logger;
    public bool IsDebugEnabled { get; }
    public bool IsInfoEnabled { get; }
    public bool IsWarnEnabled { get; }
    public bool IsErrorEnabled { get; }
    public bool IsFatalEnabled { get; }
    public DeferredLogger(string name);
    public sealed virtual bool get_IsDebugEnabled();
    public sealed virtual bool get_IsInfoEnabled();
    public sealed virtual bool get_IsWarnEnabled();
    public sealed virtual bool get_IsErrorEnabled();
    public sealed virtual bool get_IsFatalEnabled();
    public sealed virtual void Debug(string message);
    public sealed virtual void Debug(string message, Exception exception);
    public sealed virtual void DebugFormat(string format, Object[] args);
    public sealed virtual void Info(string message);
    public sealed virtual void Info(string message, Exception exception);
    public sealed virtual void InfoFormat(string format, Object[] args);
    public sealed virtual void Warn(string message);
    public sealed virtual void Warn(string message, Exception exception);
    public sealed virtual void WarnFormat(string format, Object[] args);
    public sealed virtual void Error(string message);
    public sealed virtual void Error(string message, Exception exception);
    public sealed virtual void ErrorFormat(string format, Object[] args);
    public sealed virtual void Fatal(string message);
    public sealed virtual void Fatal(string message, Exception exception);
    public sealed virtual void FatalFormat(string format, Object[] args);
    public void Flush(ILoggerFactory loggerFactory);
}
internal class NServiceBus.Extensions.Hosting.DeferredLoggerFactory : object {
    private ConcurrentBag`1<DeferredLogger> acquiredLoggers;
    public sealed virtual ILog GetLogger(Type type);
    public sealed virtual ILog GetLogger(string name);
    public void FlushAll(ILoggerFactory loggerFactory);
}
internal class NServiceBus.Extensions.Hosting.EndpointStarter : object {
    [CompilerGeneratedAttribute]
private IStartableEndpointWithExternallyManagedContainer <startableEndpoint>P;
    [CompilerGeneratedAttribute]
private IServiceProvider <serviceProvider>P;
    [CompilerGeneratedAttribute]
private ILoggerFactory <loggerFactory>P;
    [CompilerGeneratedAttribute]
private DeferredLoggerFactory <deferredLoggerFactory>P;
    private SemaphoreSlim startSemaphore;
    private IEndpointInstance endpoint;
    public EndpointStarter(IStartableEndpointWithExternallyManagedContainer startableEndpoint, IServiceProvider serviceProvider, ILoggerFactory loggerFactory, DeferredLoggerFactory deferredLoggerFactory);
    [AsyncStateMachineAttribute("NServiceBus.Extensions.Hosting.EndpointStarter/<GetOrStart>d__5")]
public ValueTask`1<IEndpointInstance> GetOrStart(CancellationToken cancellationToken);
}
internal class NServiceBus.Extensions.Hosting.HostAwareMessageSession : object {
    [CompilerGeneratedAttribute]
private EndpointStarter <endpointStarter>P;
    public HostAwareMessageSession(EndpointStarter endpointStarter);
    [AsyncStateMachineAttribute("NServiceBus.Extensions.Hosting.HostAwareMessageSession/<Send>d__2")]
public sealed virtual Task Send(object message, SendOptions options, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("NServiceBus.Extensions.Hosting.HostAwareMessageSession/<Send>d__3`1")]
public sealed virtual Task Send(Action`1<T> messageConstructor, SendOptions options, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("NServiceBus.Extensions.Hosting.HostAwareMessageSession/<Publish>d__4")]
public sealed virtual Task Publish(object message, PublishOptions options, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("NServiceBus.Extensions.Hosting.HostAwareMessageSession/<Publish>d__5`1")]
public sealed virtual Task Publish(Action`1<T> messageConstructor, PublishOptions options, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("NServiceBus.Extensions.Hosting.HostAwareMessageSession/<Subscribe>d__6")]
public sealed virtual Task Subscribe(Type eventType, SubscribeOptions options, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("NServiceBus.Extensions.Hosting.HostAwareMessageSession/<Unsubscribe>d__7")]
public sealed virtual Task Unsubscribe(Type eventType, UnsubscribeOptions options, CancellationToken cancellationToken);
}
internal class NServiceBus.Extensions.Hosting.Logger : object {
    private ILogger logger;
    public bool IsDebugEnabled { get; }
    public bool IsInfoEnabled { get; }
    public bool IsWarnEnabled { get; }
    public bool IsErrorEnabled { get; }
    public bool IsFatalEnabled { get; }
    public Logger(ILogger logger);
    public sealed virtual bool get_IsDebugEnabled();
    public sealed virtual bool get_IsInfoEnabled();
    public sealed virtual bool get_IsWarnEnabled();
    public sealed virtual bool get_IsErrorEnabled();
    public sealed virtual bool get_IsFatalEnabled();
    public sealed virtual void Debug(string message);
    public sealed virtual void Debug(string message, Exception exception);
    public sealed virtual void DebugFormat(string format, Object[] args);
    public sealed virtual void Info(string message);
    public sealed virtual void Info(string message, Exception exception);
    public sealed virtual void InfoFormat(string format, Object[] args);
    public sealed virtual void Warn(string message);
    public sealed virtual void Warn(string message, Exception exception);
    public sealed virtual void WarnFormat(string format, Object[] args);
    public sealed virtual void Error(string message);
    public sealed virtual void Error(string message, Exception exception);
    public sealed virtual void ErrorFormat(string format, Object[] args);
    public sealed virtual void Fatal(string message);
    public sealed virtual void Fatal(string message, Exception exception);
    public sealed virtual void FatalFormat(string format, Object[] args);
}
internal class NServiceBus.Extensions.Hosting.LoggerFactory : object {
    private ILoggerFactory loggerFactory;
    public LoggerFactory(ILoggerFactory loggerFactory);
    public sealed virtual ILog GetLogger(Type type);
    public sealed virtual ILog GetLogger(string name);
}
internal class NServiceBus.Extensions.Hosting.NServiceBusHostedService : object {
    [CompilerGeneratedAttribute]
private EndpointStarter <endpointStarter>P;
    private IEndpointInstance endpoint;
    public NServiceBusHostedService(EndpointStarter endpointStarter);
    [AsyncStateMachineAttribute("NServiceBus.Extensions.Hosting.NServiceBusHostedService/<StartAsync>d__2")]
public sealed virtual Task StartAsync(CancellationToken cancellationToken);
    public sealed virtual Task StopAsync(CancellationToken cancellationToken);
}
[ExtensionAttribute]
internal static class NServiceBus.Extensions.Hosting.ServiceCollectionExtensions : object {
    [ExtensionAttribute]
public static void AddNServiceBus(IServiceCollection services, EndpointConfiguration endpointConfiguration, DeferredLoggerFactory loggerFactory);
}
[ExtensionAttribute]
public static class NServiceBus.HostApplicationBuilderExtensions : object {
    private static string HostBuilderExtensionInUse;
    [ExtensionAttribute]
public static IHostApplicationBuilder UseNServiceBus(IHostApplicationBuilder builder, EndpointConfiguration endpointConfiguration);
}
[ExtensionAttribute]
public static class NServiceBus.HostBuilderExtensions : object {
    private static string HostBuilderExtensionInUse;
    [ExtensionAttribute]
public static IHostBuilder UseNServiceBus(IHostBuilder hostBuilder, Func`2<HostBuilderContext, EndpointConfiguration> endpointConfigurationBuilder);
}
