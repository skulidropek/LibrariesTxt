internal class NServiceBus.Heartbeat.HeartbeatSender : FeatureStartupTask {
    private CancellationTokenSource stopSendingTokenSource;
    private IMessageDispatcher dispatcher;
    private HostInformation hostInfo;
    private ServiceControlBackend backend;
    private TimeSpan interval;
    private TimeSpan timeToLive;
    private string endpointName;
    private static TimeSpan registrationRetryInterval;
    private static ILog Logger;
    public HeartbeatSender(IMessageDispatcher dispatcher, HostInformation hostInfo, ServiceControlBackend backend, string endpointName, TimeSpan interval, TimeSpan timeToLive);
    private static HeartbeatSender();
    public sealed virtual void Dispose();
    protected virtual Task OnStart(IMessageSession session, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("NServiceBus.Heartbeat.HeartbeatSender/<SendHeartbeatsAndSwallowExceptions>d__3")]
private Task SendHeartbeatsAndSwallowExceptions(CancellationToken cancellationToken);
    protected virtual Task OnStop(IMessageSession session, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("NServiceBus.Heartbeat.HeartbeatSender/<SendEndpointStartupMessageAndSwallowExceptions>d__5")]
private Task SendEndpointStartupMessageAndSwallowExceptions(DateTime startupTime, TimeSpan delay, bool retry, CancellationToken cancellationToken);
}
internal class NServiceBus.Heartbeat.HeartbeatsFeature : Feature {
    protected virtual void Setup(FeatureConfigurationContext context);
}
internal class NServiceBus.Heartbeat.ServiceControlBackend : object {
    private string sendIntent;
    private string destinationQueue;
    private ReceiveAddresses receiveAddresses;
    public ServiceControlBackend(string destinationQueue, ReceiveAddresses receiveAddresses);
    public Task Send(object messageToSend, TimeSpan timeToBeReceived, IMessageDispatcher dispatcher, CancellationToken cancellationToken);
    internal static Byte[] Serialize(object messageToSend);
    private Task Send(Byte[] body, string messageType, TimeSpan timeToBeReceived, IMessageDispatcher dispatcher, CancellationToken cancellationToken);
}
[ExtensionAttribute]
public static class NServiceBus.HeartbeatConfigurationExtensions : object {
    [ExtensionAttribute]
public static void SendHeartbeatTo(EndpointConfiguration config, string serviceControlQueue, Nullable`1<TimeSpan> frequency, Nullable`1<TimeSpan> timeToLive);
}
internal class ServiceControl.Plugin.Heartbeat.Messages.EndpointHeartbeat : object {
    [CompilerGeneratedAttribute]
private DateTime <ExecutedAt>k__BackingField;
    [CompilerGeneratedAttribute]
private string <EndpointName>k__BackingField;
    [CompilerGeneratedAttribute]
private Guid <HostId>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Host>k__BackingField;
    public DateTime ExecutedAt { get; public set; }
    public string EndpointName { get; public set; }
    public Guid HostId { get; public set; }
    public string Host { get; public set; }
    [CompilerGeneratedAttribute]
public DateTime get_ExecutedAt();
    [CompilerGeneratedAttribute]
public void set_ExecutedAt(DateTime value);
    [CompilerGeneratedAttribute]
public string get_EndpointName();
    [CompilerGeneratedAttribute]
public void set_EndpointName(string value);
    [CompilerGeneratedAttribute]
public Guid get_HostId();
    [CompilerGeneratedAttribute]
public void set_HostId(Guid value);
    [CompilerGeneratedAttribute]
public string get_Host();
    [CompilerGeneratedAttribute]
public void set_Host(string value);
}
internal class ServiceControl.Plugin.Heartbeat.Messages.RegisterEndpointStartup : object {
    [CompilerGeneratedAttribute]
private Guid <HostId>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Endpoint>k__BackingField;
    [CompilerGeneratedAttribute]
private DateTime <StartedAt>k__BackingField;
    [CompilerGeneratedAttribute]
private Dictionary`2<string, string> <HostProperties>k__BackingField;
    [CompilerGeneratedAttribute]
private string <HostDisplayName>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Host>k__BackingField;
    public Guid HostId { get; public set; }
    public string Endpoint { get; public set; }
    public DateTime StartedAt { get; public set; }
    public Dictionary`2<string, string> HostProperties { get; public set; }
    public string HostDisplayName { get; public set; }
    public string Host { get; public set; }
    [CompilerGeneratedAttribute]
public Guid get_HostId();
    [CompilerGeneratedAttribute]
public void set_HostId(Guid value);
    [CompilerGeneratedAttribute]
public string get_Endpoint();
    [CompilerGeneratedAttribute]
public void set_Endpoint(string value);
    [CompilerGeneratedAttribute]
public DateTime get_StartedAt();
    [CompilerGeneratedAttribute]
public void set_StartedAt(DateTime value);
    [CompilerGeneratedAttribute]
public Dictionary`2<string, string> get_HostProperties();
    [CompilerGeneratedAttribute]
public void set_HostProperties(Dictionary`2<string, string> value);
    [CompilerGeneratedAttribute]
public string get_HostDisplayName();
    [CompilerGeneratedAttribute]
public void set_HostDisplayName(string value);
    [CompilerGeneratedAttribute]
public string get_Host();
    [CompilerGeneratedAttribute]
public void set_Host(string value);
}
