[ProbePropertiesAttribute("Critical Time", "The time it took from sending to processing the message.")]
internal class CriticalTimeProbeBuilder : DurationProbeBuilder {
    [CompilerGeneratedAttribute]
private FeatureConfigurationContext <context>P;
    public static string CriticalTime;
    public CriticalTimeProbeBuilder(FeatureConfigurationContext context);
    protected virtual void WireUp(DurationProbe probe);
}
internal class DurationProbe : Probe {
    private OnEvent`1 modreq(System.Runtime.CompilerServices.IsVolatile) observers;
    private object Lock;
    public DurationProbe(string name, string description);
    public sealed virtual void Register(OnEvent`1<DurationEvent> observer);
    public void Register(Action`1<TimeSpan> observer);
    internal void Record(DurationEvent& e);
    private static void Empty(DurationEvent& e);
}
internal abstract class DurationProbeBuilder : object {
    protected abstract virtual void WireUp(DurationProbe probe);
    public DurationProbe Build();
    private DurationProbe GetProbe();
}
[ExtensionAttribute]
internal static class Extensions : object {
    [ExtensionAttribute]
public static bool TryGetTimeSent(ReceivePipelineCompleted completed, DateTimeOffset& timeSent);
    [ExtensionAttribute]
public static bool TryGetDeliverAt(ReceivePipelineCompleted completed, DateTimeOffset& deliverAt);
    [ExtensionAttribute]
public static bool TryGetMessageType(ReceivePipelineCompleted completed, String& processedMessageType);
    [ExtensionAttribute]
internal static bool TryGetMessageType(IReadOnlyDictionary`2<string, string> headers, String& processedMessageType);
    [ExtensionAttribute]
public static void ThrowIfSendOnly(IReadOnlySettings settings);
}
[ProbePropertiesAttribute("# of msgs failures / sec", "The current number of failed processed messages by the transport per second.")]
internal class MessageProcessingFailureProbeBuilder : SignalProbeBuilder {
    [CompilerGeneratedAttribute]
private ReceivePerformanceDiagnosticsBehavior <behavior>P;
    public MessageProcessingFailureProbeBuilder(ReceivePerformanceDiagnosticsBehavior behavior);
    protected virtual void WireUp(SignalProbe probe);
}
[ProbePropertiesAttribute("# of msgs successfully processed / sec", "The current number of messages processed successfully by the transport per second.")]
internal class MessageProcessingSuccessProbeBuilder : SignalProbeBuilder {
    [CompilerGeneratedAttribute]
private ReceivePerformanceDiagnosticsBehavior <behavior>P;
    public MessageProcessingSuccessProbeBuilder(ReceivePerformanceDiagnosticsBehavior behavior);
    protected virtual void WireUp(SignalProbe probe);
}
[ProbePropertiesAttribute("# of msgs pulled from the input queue /sec", "The current number of messages pulled from the input queue by the transport per second.")]
internal class MessagePulledFromQueueProbeBuilder : SignalProbeBuilder {
    [CompilerGeneratedAttribute]
private ReceivePerformanceDiagnosticsBehavior <behavior>P;
    public MessagePulledFromQueueProbeBuilder(ReceivePerformanceDiagnosticsBehavior behavior);
    protected virtual void WireUp(SignalProbe probe);
}
[IsReadOnlyAttribute]
public class NServiceBus.DurationEvent : ValueType {
    public TimeSpan Duration;
    public string MessageType;
    public DurationEvent(TimeSpan duration, string messageType);
}
[ExtensionAttribute]
internal static class NServiceBus.ExceptionExtensions : object {
    [ExtensionAttribute]
public static bool IsCausedBy(Exception ex, CancellationToken cancellationToken);
}
public interface NServiceBus.IDurationProbe {
    public abstract virtual void Register(OnEvent`1<DurationEvent> observer);
}
public interface NServiceBus.IProbe {
    public string Name { get; }
    public string Description { get; }
    public abstract virtual string get_Name();
    public abstract virtual string get_Description();
}
public interface NServiceBus.ISignalProbe {
    public abstract virtual void Register(OnEvent`1<SignalEvent> observer);
}
internal static class NServiceBus.Metrics.MetricHeaders : object {
    public static string MetricType;
    public static string MetricInstanceId;
}
public class NServiceBus.Metrics.MetricsFeature : Feature {
    protected virtual void Setup(FeatureConfigurationContext context);
    private static ProbeContext BuildProbes(FeatureConfigurationContext context, MetricsOptions options);
}
[ProbePropertiesAttribute("Retries", "A message has been scheduled for retry (FLR or SLR)")]
internal class NServiceBus.Metrics.ProbeBuilders.RetriesProbeBuilder : SignalProbeBuilder {
    [CompilerGeneratedAttribute]
private MetricsOptions <options>P;
    public static string Retries;
    public RetriesProbeBuilder(MetricsOptions options);
    protected virtual void WireUp(SignalProbe probe);
    private static Task Signal(Dictionary`2<string, string> messageHeaders, SignalProbe probe, CancellationToken cancellationToken);
}
[ExtensionAttribute]
public static class NServiceBus.MetricsConfigurationExtensions : object {
    [ExtensionAttribute]
public static MetricsOptions EnableMetrics(EndpointConfiguration endpointConfiguration);
}
public class NServiceBus.MetricsOptions : object {
    [CompilerGeneratedAttribute]
private Func`3<ImmediateRetryMessage, CancellationToken, Task> <Immediate>k__BackingField;
    [CompilerGeneratedAttribute]
private Func`3<DelayedRetryMessage, CancellationToken, Task> <Delayed>k__BackingField;
    private Action`1<ProbeContext> registerObservers;
    internal Func`3<ImmediateRetryMessage, CancellationToken, Task> Immediate { get; internal set; }
    internal Func`3<DelayedRetryMessage, CancellationToken, Task> Delayed { get; internal set; }
    [CompilerGeneratedAttribute]
internal Func`3<ImmediateRetryMessage, CancellationToken, Task> get_Immediate();
    [CompilerGeneratedAttribute]
internal void set_Immediate(Func`3<ImmediateRetryMessage, CancellationToken, Task> value);
    [CompilerGeneratedAttribute]
internal Func`3<DelayedRetryMessage, CancellationToken, Task> get_Delayed();
    [CompilerGeneratedAttribute]
internal void set_Delayed(Func`3<DelayedRetryMessage, CancellationToken, Task> value);
    public void RegisterObservers(Action`1<ProbeContext> register);
    internal void SetUpObservers(ProbeContext probeContext);
}
public class NServiceBus.OnEvent`1 : MulticastDelegate {
    public OnEvent`1(object object, IntPtr method);
    public virtual void Invoke(TEventType& e);
    public virtual IAsyncResult BeginInvoke(TEventType& e, AsyncCallback callback, object object);
    public virtual void EndInvoke(TEventType& e, IAsyncResult result);
}
public class NServiceBus.ProbeContext : object {
    [CompilerGeneratedAttribute]
private IReadOnlyCollection`1<IDurationProbe> <Durations>k__BackingField;
    [CompilerGeneratedAttribute]
private IReadOnlyCollection`1<ISignalProbe> <Signals>k__BackingField;
    public IReadOnlyCollection`1<IDurationProbe> Durations { get; }
    public IReadOnlyCollection`1<ISignalProbe> Signals { get; }
    public ProbeContext(IReadOnlyCollection`1<IDurationProbe> durations, IReadOnlyCollection`1<ISignalProbe> signals);
    [CompilerGeneratedAttribute]
public IReadOnlyCollection`1<IDurationProbe> get_Durations();
    [CompilerGeneratedAttribute]
public IReadOnlyCollection`1<ISignalProbe> get_Signals();
}
[IsReadOnlyAttribute]
public class NServiceBus.SignalEvent : ValueType {
    public string MessageType;
    public SignalEvent(string messageType);
}
internal class NServiceBusMetrics_ProcessedByFody : object {
    internal static string FodyVersion;
    internal static string Obsolete;
}
internal abstract class Probe : object {
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Description>k__BackingField;
    public string Name { get; }
    public string Description { get; }
    protected Probe(string name, string description);
    [CompilerGeneratedAttribute]
public sealed virtual string get_Name();
    [CompilerGeneratedAttribute]
public sealed virtual string get_Description();
}
[AttributeUsageAttribute("4")]
internal class ProbePropertiesAttribute : Attribute {
    public string Name;
    public string Description;
    public ProbePropertiesAttribute(string name, string description);
}
[ProbePropertiesAttribute("Processing Time", "The time it took to successfully process a message.")]
internal class ProcessingTimeProbeBuilder : DurationProbeBuilder {
    [CompilerGeneratedAttribute]
private FeatureConfigurationContext <context>P;
    public static string ProcessingTime;
    public ProcessingTimeProbeBuilder(FeatureConfigurationContext context);
    protected virtual void WireUp(DurationProbe probe);
}
internal class ReceivePerformanceDiagnosticsBehavior : object {
    public SignalProbe MessagePulledFromQueue;
    public SignalProbe ProcessingFailure;
    public SignalProbe ProcessingSuccess;
    [AsyncStateMachineAttribute("ReceivePerformanceDiagnosticsBehavior/<Invoke>d__0")]
public sealed virtual Task Invoke(IIncomingPhysicalMessageContext context, Func`2<IIncomingPhysicalMessageContext, Task> next);
}
internal class SignalProbe : Probe {
    private OnEvent`1 modreq(System.Runtime.CompilerServices.IsVolatile) observers;
    private object Lock;
    public SignalProbe(string name, string description);
    public sealed virtual void Register(OnEvent`1<SignalEvent> observer);
    public void Register(Action observer);
    internal void Signal(SignalEvent& e);
    private static void Empty(SignalEvent& e);
}
internal abstract class SignalProbeBuilder : object {
    protected abstract virtual void WireUp(SignalProbe probe);
    public SignalProbe Build();
    private SignalProbe GetProbe();
}
