internal class NServiceBus.Newtonsoft.Json.DataBusPropertyConverter : JsonConverter`1<IDataBusProperty> {
    public bool CanRead { get; }
    public virtual void WriteJson(JsonWriter writer, IDataBusProperty value, JsonSerializer serializer);
    public virtual IDataBusProperty ReadJson(JsonReader reader, Type objectType, IDataBusProperty existingValue, bool hasExistingValue, JsonSerializer serializer);
    public virtual bool get_CanRead();
}
internal class NServiceBus.Newtonsoft.Json.JsonMessageSerializer : object {
    private IMessageMapper messageMapper;
    private Func`2<Stream, JsonReader> readerCreator;
    private Func`2<Stream, JsonWriter> writerCreator;
    private JsonSerializer jsonSerializer;
    [CompilerGeneratedAttribute]
private string <ContentType>k__BackingField;
    private static ILog log;
    public string ContentType { get; }
    public JsonMessageSerializer(IMessageMapper messageMapper, Func`2<Stream, JsonReader> readerCreator, Func`2<Stream, JsonWriter> writerCreator, JsonSerializerSettings settings, string contentType);
    private static JsonMessageSerializer();
    public sealed virtual void Serialize(object message, Stream stream);
    public sealed virtual Object[] Deserialize(ReadOnlyMemory`1<byte> body, IList`1<Type> messageTypes);
    private object ReadObject(Stream stream, bool isArrayStream, Type type);
    [CompilerGeneratedAttribute]
public sealed virtual string get_ContentType();
    private Object[] DeserializeMultipleMessageTypes(Stream stream, IList`1<Type> messageTypes, bool isArrayStream);
    private Type GetMappedType(Type messageType);
    private bool IsArrayStream(Stream stream);
    [IteratorStateMachineAttribute("NServiceBus.Newtonsoft.Json.JsonMessageSerializer/<FindRootTypes>d__14")]
private static IEnumerable`1<Type> FindRootTypes(IEnumerable`1<Type> messageTypesToDeserialize);
}
[ExtensionAttribute]
public static class NServiceBus.NewtonsoftConfigurationExtensions : object {
    [ExtensionAttribute]
public static void ReaderCreator(SerializationExtensions`1<NewtonsoftJsonSerializer> config, Func`2<Stream, JsonReader> readerCreator);
    [ExtensionAttribute]
internal static Func`2<Stream, JsonReader> GetReaderCreator(IReadOnlySettings settings);
    [ExtensionAttribute]
public static void WriterCreator(SerializationExtensions`1<NewtonsoftJsonSerializer> config, Func`2<Stream, JsonWriter> writerCreator);
    [ExtensionAttribute]
internal static Func`2<Stream, JsonWriter> GetWriterCreator(IReadOnlySettings settings);
    [ExtensionAttribute]
public static void Settings(SerializationExtensions`1<NewtonsoftJsonSerializer> config, JsonSerializerSettings settings);
    [ExtensionAttribute]
internal static JsonSerializerSettings GetSettings(IReadOnlySettings settings);
    [ExtensionAttribute]
public static void ContentTypeKey(SerializationExtensions`1<NewtonsoftJsonSerializer> config, string contentTypeKey);
    [ExtensionAttribute]
internal static string GetContentTypeKey(IReadOnlySettings settings);
}
public class NServiceBus.NewtonsoftJsonSerializer : SerializationDefinition {
    public virtual Func`2<IMessageMapper, IMessageSerializer> Configure(IReadOnlySettings settings);
}
internal class NServiceBus.ReadOnlyStream : Stream {
    private ReadOnlyMemory`1<byte> memory;
    private long position;
    public bool CanRead { get; }
    public bool CanSeek { get; }
    public bool CanWrite { get; }
    public long Length { get; }
    public long Position { get; public set; }
    public ReadOnlyStream(ReadOnlyMemory`1<byte> memory);
    public virtual void Flush();
    public virtual long Seek(long offset, SeekOrigin origin);
    public virtual void SetLength(long value);
    public virtual int Read(Byte[] buffer, int offset, int count);
    public virtual void Write(Byte[] buffer, int offset, int count);
    public virtual bool get_CanRead();
    public virtual bool get_CanSeek();
    public virtual bool get_CanWrite();
    public virtual long get_Length();
    public virtual long get_Position();
    public virtual void set_Position(long value);
}
internal class NServiceBusNewtonsoftJson_ProcessedByFody : object {
    internal static string FodyVersion;
    internal static string Obsolete;
}
