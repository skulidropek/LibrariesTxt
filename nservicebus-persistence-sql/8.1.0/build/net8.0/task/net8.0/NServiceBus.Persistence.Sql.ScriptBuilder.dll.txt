internal class AllSagaDefinitionReader : object {
    private ModuleDefinition module;
    public AllSagaDefinitionReader(ModuleDefinition module);
    public IList`1<SagaDefinition> GetSagas(Action`2<string, string> logger);
}
[ExtensionAttribute]
internal static class CecilExtensions : object {
    [ExtensionAttribute]
public static T FindInTypeHierarchy(TypeDefinition type, Func`2<TypeDefinition, T> search);
    [ExtensionAttribute]
public static string GetStringProperty(ICustomAttribute attribute, string name);
    [ExtensionAttribute]
public static bool GetBoolProperty(ICustomAttribute attribute, string name, bool fallback);
    [ExtensionAttribute]
public static PropertyDefinition GetProperty(TypeDefinition type, string propertyName);
    [ExtensionAttribute]
public static bool TryGetProperty(TypeDefinition type, string propertyName, PropertyDefinition& property);
    [ExtensionAttribute]
public static bool TryGetPropertyAssignment(PropertyDefinition property, String& value);
    private static bool TryGetExpressionBodyPropertyAssignment(Collection`1<Instruction> instructions, String& value);
    private static bool TryGetStatementBodyPropertyAssignment(Collection`1<Instruction> instructions, String& value);
    [ExtensionAttribute]
public static CustomAttribute GetSingleAttribute(TypeDefinition type, string attributeName);
    [ExtensionAttribute]
public static IEnumerable`1<TypeDefinition> AllClasses(ModuleDefinition module);
    [ExtensionAttribute]
public static string GetFileName(TypeDefinition type);
}
internal static class CorrelationPropertyTypeReader : object {
    internal static CorrelationPropertyType GetCorrelationPropertyType(TypeReference typeReference);
    internal static CorrelationPropertyType GetCorrelationPropertyType(Type type);
    private static CorrelationPropertyType GetCorrelationPropertyType(string fullName);
}
internal static class DirectoryExtensions : object {
    public static void Delete(string path);
    public static void DuplicateDirectory(string source, string destination);
}
internal static class Guard : object {
    public static void AgainstNull(string argumentName, object value);
    public static void AgainstNullAndEmpty(string argumentName, string value);
}
internal static class InstructionAnalyzer : object {
    private static HashSet`1<string> allowedMethods;
    private static InstructionAnalyzer();
    public static IList`1<Instruction> GetConfigureHowToFindSagaInstructions(TypeDefinition sagaTypeDefinition);
    public static bool ContainsBranchingLogic(IList`1<Instruction> instructions);
    public static string GetCorrelationId(IList`1<Instruction> instructions, string sagaDataTypeName);
    public static bool CallsUnmanagedMethods(IList`1<Instruction> instructions);
    public static bool CallsUnexpectedMethods(IList`1<Instruction> instructions);
    private static bool IsMessageMapping(MethodReference methodRef);
    private static bool IsSagaMapping(MethodReference methodRef);
    private static bool IsConfigureHeaderMapping(MethodReference methodRef);
    private static bool IsConfigureMappingMethodCall(MethodReference methodRef);
    private static bool IsMapSagaMappingMethodCall(MethodReference methodRef);
    private static bool IsToSagaMethodCall(MethodReference methodRef);
    private static bool IsToMessageMethodCall(MethodReference methodRef);
    private static bool IsToMessageHeaderMethodCall(MethodReference methodRef);
    private static bool IsExpressionCall(MethodReference methodRef);
}
internal interface ISagaScriptWriter {
    public abstract virtual void Initialize();
    public abstract virtual void WriteTableNameVariable();
    public abstract virtual void WriteDropTable();
    public abstract virtual void WritePurgeObsoleteProperties();
    public abstract virtual void WriteCreateTable();
    public abstract virtual void AddProperty(CorrelationProperty sagaCorrelationProperty);
    public abstract virtual void VerifyColumnType(CorrelationProperty sagaCorrelationProperty);
    public abstract virtual void WriteCreateIndex(CorrelationProperty sagaCorrelationProperty);
    public abstract virtual void WritePurgeObsoleteIndex();
    public abstract virtual void CreateComplete();
}
internal class MsSqlServerSagaScriptWriter : object {
    private TextWriter writer;
    private SagaDefinition saga;
    public MsSqlServerSagaScriptWriter(TextWriter textWriter, SagaDefinition saga);
    public sealed virtual void Initialize();
    public sealed virtual void WriteTableNameVariable();
    public sealed virtual void CreateComplete();
    public sealed virtual void AddProperty(CorrelationProperty correlationProperty);
    public sealed virtual void VerifyColumnType(CorrelationProperty correlationProperty);
    public sealed virtual void WriteCreateIndex(CorrelationProperty correlationProperty);
    public sealed virtual void WritePurgeObsoleteProperties();
    public sealed virtual void WritePurgeObsoleteIndex();
    public sealed virtual void WriteCreateTable();
    public sealed virtual void WriteDropTable();
}
internal class MySqlSagaScriptWriter : object {
    private TextWriter writer;
    private SagaDefinition saga;
    public MySqlSagaScriptWriter(TextWriter textWriter, SagaDefinition saga);
    public sealed virtual void Initialize();
    public sealed virtual void WriteTableNameVariable();
    public sealed virtual void CreateComplete();
    public sealed virtual void AddProperty(CorrelationProperty correlationProperty);
    public sealed virtual void VerifyColumnType(CorrelationProperty correlationProperty);
    public sealed virtual void WriteCreateIndex(CorrelationProperty correlationProperty);
    public sealed virtual void WritePurgeObsoleteIndex();
    public sealed virtual void WritePurgeObsoleteProperties();
    public sealed virtual void WriteCreateTable();
    public sealed virtual void WriteDropTable();
}
public class NServiceBus.Persistence.Sql.ErrorsException : Exception {
    [CompilerGeneratedAttribute]
private string <FileName>k__BackingField;
    public string FileName { get; public set; }
    public ErrorsException(string message);
    [CompilerGeneratedAttribute]
public string get_FileName();
    [CompilerGeneratedAttribute]
public void set_FileName(string value);
}
public enum NServiceBus.Persistence.Sql.ScriptBuilder.BuildSqlDialect : Enum {
    public int value__;
    public static BuildSqlDialect MsSqlServer;
    public static BuildSqlDialect MySql;
    public static BuildSqlDialect Oracle;
    public static BuildSqlDialect PostgreSql;
}
public class NServiceBus.Persistence.Sql.ScriptBuilder.CorrelationProperty : object {
    [CompilerGeneratedAttribute]
private CorrelationPropertyType <Type>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    public CorrelationPropertyType Type { get; }
    public string Name { get; }
    public CorrelationProperty(string name, CorrelationPropertyType type);
    [CompilerGeneratedAttribute]
public CorrelationPropertyType get_Type();
    [CompilerGeneratedAttribute]
public string get_Name();
}
public enum NServiceBus.Persistence.Sql.ScriptBuilder.CorrelationPropertyType : Enum {
    public int value__;
    public static CorrelationPropertyType String;
    public static CorrelationPropertyType DateTime;
    public static CorrelationPropertyType DateTimeOffset;
    public static CorrelationPropertyType Int;
    public static CorrelationPropertyType Guid;
}
public static class NServiceBus.Persistence.Sql.ScriptBuilder.MsSqlServerCorrelationPropertyTypeConverter : object {
    public static string GetColumnType(CorrelationPropertyType propertyType);
}
public static class NServiceBus.Persistence.Sql.ScriptBuilder.MySqlCorrelationPropertyTypeConverter : object {
    public static string GetColumnType(CorrelationPropertyType propertyType);
}
public static class NServiceBus.Persistence.Sql.ScriptBuilder.OracleCorrelationPropertyTypeConverter : object {
    public static string GetColumnType(CorrelationPropertyType propertyType);
}
public static class NServiceBus.Persistence.Sql.ScriptBuilder.OutboxScriptBuilder : object {
    public static void BuildCreateScript(TextWriter writer, BuildSqlDialect sqlDialect);
    public static string BuildCreateScript(BuildSqlDialect sqlDialect);
    public static void BuildDropScript(TextWriter writer, BuildSqlDialect sqlDialect);
    public static string BuildDropScript(BuildSqlDialect sqlDialect);
}
public static class NServiceBus.Persistence.Sql.ScriptBuilder.PostgreSqlCorrelationPropertyTypeConverter : object {
    public static string GetColumnType(CorrelationPropertyType propertyType);
}
public class NServiceBus.Persistence.Sql.ScriptBuilder.SagaDefinition : object {
    [CompilerGeneratedAttribute]
private string <TableSuffix>k__BackingField;
    [CompilerGeneratedAttribute]
private CorrelationProperty <CorrelationProperty>k__BackingField;
    [CompilerGeneratedAttribute]
private CorrelationProperty <TransitionalCorrelationProperty>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    public string TableSuffix { get; }
    public CorrelationProperty CorrelationProperty { get; }
    public CorrelationProperty TransitionalCorrelationProperty { get; }
    public string Name { get; }
    public SagaDefinition(string tableSuffix, string name, CorrelationProperty correlationProperty, CorrelationProperty transitionalCorrelationProperty);
    [CompilerGeneratedAttribute]
public string get_TableSuffix();
    [CompilerGeneratedAttribute]
public CorrelationProperty get_CorrelationProperty();
    [CompilerGeneratedAttribute]
public CorrelationProperty get_TransitionalCorrelationProperty();
    [CompilerGeneratedAttribute]
public string get_Name();
}
public static class NServiceBus.Persistence.Sql.ScriptBuilder.SagaScriptBuilder : object {
    public static string BuildCreateScript(SagaDefinition saga, BuildSqlDialect sqlDialect);
    public static void BuildCreateScript(SagaDefinition saga, BuildSqlDialect sqlDialect, TextWriter writer);
    private static void WriteComment(TextWriter writer, string text);
    private static ISagaScriptWriter GetSqlDialectWriter(BuildSqlDialect sqlDialect, TextWriter textWriter, SagaDefinition saga);
    public static void BuildDropScript(SagaDefinition saga, BuildSqlDialect sqlDialect, TextWriter writer);
    public static string BuildDropScript(SagaDefinition saga, BuildSqlDialect sqlDialect);
}
public static class NServiceBus.Persistence.Sql.ScriptBuilder.SubscriptionScriptBuilder : object {
    public static void BuildCreateScript(TextWriter writer, BuildSqlDialect sqlDialect);
    public static string BuildCreateScript(BuildSqlDialect sqlDialect);
    public static void BuildDropScript(TextWriter writer, BuildSqlDialect sqlDialect);
    public static string BuildDropScript(BuildSqlDialect sqlDialect);
}
public static class NServiceBus.Persistence.Sql.ScriptBuilder.TimeoutScriptBuilder : object {
    public static void BuildCreateScript(TextWriter writer, BuildSqlDialect sqlDialect);
    public static string BuildCreateScript(BuildSqlDialect sqlDialect);
    public static void BuildDropScript(TextWriter writer, BuildSqlDialect sqlDialect);
    public static string BuildDropScript(BuildSqlDialect sqlDialect);
}
internal class OracleSagaScriptWriter : object {
    private TextWriter writer;
    private SagaDefinition saga;
    private string tableName;
    public OracleSagaScriptWriter(TextWriter textWriter, SagaDefinition saga);
    public sealed virtual void Initialize();
    public sealed virtual void WriteTableNameVariable();
    public sealed virtual void CreateComplete();
    public sealed virtual void AddProperty(CorrelationProperty correlationProperty);
    public sealed virtual void VerifyColumnType(CorrelationProperty correlationProperty);
    public sealed virtual void WriteCreateIndex(CorrelationProperty correlationProperty);
    public sealed virtual void WritePurgeObsoleteProperties();
    public sealed virtual void WritePurgeObsoleteIndex();
    public sealed virtual void WriteCreateTable();
    public sealed virtual void WriteDropTable();
    private string OracleCorrelationPropertyName(CorrelationProperty property);
    private string CreateSagaIndexName(string sagaName, string correlationPropertyName);
}
internal class OutboxWriter : ScriptWriter {
    public OutboxWriter(bool clean, bool overwrite, string scriptPath);
    public virtual void WriteScripts(BuildSqlDialect dialect);
}
internal class PostgreSqlSagaScriptWriter : object {
    private TextWriter writer;
    private SagaDefinition saga;
    public PostgreSqlSagaScriptWriter(TextWriter textWriter, SagaDefinition saga);
    public sealed virtual void Initialize();
    public sealed virtual void WriteTableNameVariable();
    public sealed virtual void AddProperty(CorrelationProperty correlationProperty);
    public sealed virtual void VerifyColumnType(CorrelationProperty correlationProperty);
    public sealed virtual void WriteCreateIndex(CorrelationProperty correlationProperty);
    public sealed virtual void WritePurgeObsoleteIndex();
    public sealed virtual void WritePurgeObsoleteProperties();
    public sealed virtual void WriteCreateTable();
    public sealed virtual void CreateComplete();
    public sealed virtual void WriteDropTable();
    private string CreateSagaIndexName(string sagaName, string correlationPropertyName);
}
internal static class ResourceReader : object {
    private static Assembly assembly;
    private static ResourceReader();
    public static string ReadResource(BuildSqlDialect sqlDialect, string prefix);
}
internal static class SagaDefinitionReader : object {
    public static bool TryGetSagaDefinition(TypeDefinition type, SagaDefinition& definition);
    private static bool TryGetSqlSagaDefinition(TypeDefinition type, SagaDefinition& definition);
    private static bool TryGetCoreSagaDefinition(TypeDefinition type, SagaDefinition& definition);
    private static string GetCoreSagaCorrelationId(TypeDefinition type, TypeDefinition sagaDataType);
    private static string GetCorrelationPropertyName(TypeDefinition type);
    private static string GetTransitionalCorrelationPropertyName(TypeDefinition type);
    private static string GetSqlSagaTableSuffix(TypeDefinition type);
    private static void CheckIsValidSaga(TypeDefinition type);
    private static bool IsSqlSaga(TypeDefinition type);
    private static TypeDefinition GetSagaDataTypeFromSagaType(TypeDefinition sagaType);
    private static CorrelationProperty BuildConstraintProperty(TypeDefinition sagaDataTypeDefinition, string propertyName);
    private static CorrelationProperty BuildConstraintProperty(PropertyDefinition member);
}
internal static class SagaDefinitionValidator : object {
    internal static void ValidateSagaDefinition(string correlationProperty, string sagaName, string transitionalProperty, string tableSuffix);
}
internal class SagaWriter : ScriptWriter {
    private ModuleDefinition moduleDefinition;
    private Action`2<string, string> logError;
    private string sagaPath;
    public SagaWriter(bool clean, bool overwrite, string scriptPath, ModuleDefinition moduleDefinition, Action`2<string, string> logError);
    public virtual void WriteScripts(BuildSqlDialect dialect);
}
public class ScriptGenerator : object {
    private string assemblyPath;
    private string scriptBasePath;
    private bool overwrite;
    private bool clean;
    private Func`2<string, string> promotionFinder;
    private Action`2<string, string> logError;
    private IReadOnlyList`1<BuildSqlDialect> dialectOptions;
    public ScriptGenerator(string assemblyPath, string destinationDirectory, bool clean, bool overwrite, IReadOnlyList`1<BuildSqlDialect> dialectOptions, Func`2<string, string> promotionFinder, Action`2<string, string> logError);
    public static void Generate(string assemblyPath, string targetDirectory, Action`2<string, string> logError, Func`2<string, string> promotionPathFinder);
    public void Generate();
    private bool ShouldGenerateDialect(BuildSqlDialect dialect);
    private void CreateDialectDirectory(string dialectPath);
    private void CreateDirectories();
    private void PurgeDialectDirs(string scriptPath);
    private IEnumerable`1<string> GetSelectedDialects();
    private static IEnumerable`1<string> GetKnownScripts(string dialectDirectory);
    private void Promote(string replicationPath);
}
public abstract class ScriptWriter : object {
    [CompilerGeneratedAttribute]
private bool <Clean>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <Overwrite>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ScriptPath>k__BackingField;
    protected bool Clean { get; }
    protected bool Overwrite { get; }
    protected string ScriptPath { get; }
    protected ScriptWriter(bool clean, bool overwrite, string scriptPath);
    [CompilerGeneratedAttribute]
protected bool get_Clean();
    [CompilerGeneratedAttribute]
protected bool get_Overwrite();
    [CompilerGeneratedAttribute]
protected string get_ScriptPath();
    public abstract virtual void WriteScripts(BuildSqlDialect dialect);
    protected void WriteScript(string fileName, Action`1<StreamWriter> action);
    private string EnsureFile(string file);
}
internal class Settings : object {
    [CompilerGeneratedAttribute]
private List`1<BuildSqlDialect> <BuildDialects>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ScriptPromotionPath>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <ProduceOutboxScripts>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <ProduceSubscriptionScripts>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <ProduceTimeoutScripts>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <ProduceSagaScripts>k__BackingField;
    public List`1<BuildSqlDialect> BuildDialects { get; public set; }
    public string ScriptPromotionPath { get; public set; }
    public bool ProduceOutboxScripts { get; public set; }
    public bool ProduceSubscriptionScripts { get; public set; }
    public bool ProduceTimeoutScripts { get; public set; }
    public bool ProduceSagaScripts { get; public set; }
    [CompilerGeneratedAttribute]
public List`1<BuildSqlDialect> get_BuildDialects();
    [CompilerGeneratedAttribute]
public void set_BuildDialects(List`1<BuildSqlDialect> value);
    [CompilerGeneratedAttribute]
public string get_ScriptPromotionPath();
    [CompilerGeneratedAttribute]
public void set_ScriptPromotionPath(string value);
    [CompilerGeneratedAttribute]
public bool get_ProduceOutboxScripts();
    [CompilerGeneratedAttribute]
public void set_ProduceOutboxScripts(bool value);
    [CompilerGeneratedAttribute]
public bool get_ProduceSubscriptionScripts();
    [CompilerGeneratedAttribute]
public void set_ProduceSubscriptionScripts(bool value);
    [CompilerGeneratedAttribute]
public bool get_ProduceTimeoutScripts();
    [CompilerGeneratedAttribute]
public void set_ProduceTimeoutScripts(bool value);
    [CompilerGeneratedAttribute]
public bool get_ProduceSagaScripts();
    [CompilerGeneratedAttribute]
public void set_ProduceSagaScripts(bool value);
}
internal static class SettingsAttributeReader : object {
    public static Settings Read(ModuleDefinition module);
    public static Settings ReadFromAttribute(ICustomAttribute attribute);
    private static string ReadScriptPromotionPath(ICustomAttribute attribute);
    [IteratorStateMachineAttribute("SettingsAttributeReader/<ReadBuildDialects>d__3")]
private static IEnumerable`1<BuildSqlDialect> ReadBuildDialects(ICustomAttribute attribute);
}
internal class SubscriptionWriter : ScriptWriter {
    public SubscriptionWriter(bool clean, bool overwrite, string scriptPath);
    public virtual void WriteScripts(BuildSqlDialect dialect);
}
internal class TimeoutWriter : ScriptWriter {
    public TimeoutWriter(bool clean, bool overwrite, string scriptPath);
    public virtual void WriteScripts(BuildSqlDialect dialect);
}
