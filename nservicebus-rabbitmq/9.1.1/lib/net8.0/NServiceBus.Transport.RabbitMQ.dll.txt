[ExtensionAttribute]
internal static class NServiceBus.ExceptionExtensions : object {
    [ExtensionAttribute]
public static bool IsCausedBy(Exception ex, CancellationToken cancellationToken);
}
[ExtensionAttribute]
public static class NServiceBus.NonPersistentDeliveryModeExtensions : object {
    [ExtensionAttribute]
public static void UseNonPersistentDeliveryMode(SendOptions options);
    [ExtensionAttribute]
public static void UseNonPersistentDeliveryMode(PublishOptions options);
    [ExtensionAttribute]
public static void UseNonPersistentDeliveryMode(ReplyOptions options);
}
public class NServiceBus.PrefetchCountCalculation : MulticastDelegate {
    public PrefetchCountCalculation(object object, IntPtr method);
    public virtual long Invoke(int maximumConcurrency);
    public virtual IAsyncResult BeginInvoke(int maximumConcurrency, AsyncCallback callback, object object);
    public virtual long EndInvoke(IAsyncResult result);
}
[AttributeUsageAttribute("32767")]
internal class NServiceBus.PreObsoleteAttribute : Attribute {
    [CompilerGeneratedAttribute]
private string <ContextUrl>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ReplacementTypeOrMember>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Message>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Note>k__BackingField;
    public string ContextUrl { get; }
    public string ReplacementTypeOrMember { get; public set; }
    public string Message { get; public set; }
    public string Note { get; public set; }
    public PreObsoleteAttribute(string contextUrl);
    [CompilerGeneratedAttribute]
public string get_ContextUrl();
    [CompilerGeneratedAttribute]
public string get_ReplacementTypeOrMember();
    [CompilerGeneratedAttribute]
public void set_ReplacementTypeOrMember(string value);
    [CompilerGeneratedAttribute]
public string get_Message();
    [CompilerGeneratedAttribute]
public void set_Message(string value);
    [CompilerGeneratedAttribute]
public string get_Note();
    [CompilerGeneratedAttribute]
public void set_Note(string value);
}
public enum NServiceBus.QueueType : Enum {
    public int value__;
    public static QueueType Classic;
    public static QueueType Quorum;
}
public class NServiceBus.RabbitMQTransport : TransportDefinition {
    private TimeSpan heartbeatInterval;
    private TimeSpan networkRecoveryInterval;
    private Func`2<BasicDeliverEventArgs, string> messageIdStrategy;
    private PrefetchCountCalculation prefetchCountCalculation;
    private TimeSpan timeToWaitBeforeTriggeringCircuitBreaker;
    [TupleElementNamesAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private List`1<ValueTuple`3<string, int, bool>> additionalClusterNodes;
    [CompilerGeneratedAttribute]
private ConnectionConfiguration <ConnectionConfiguration>k__BackingField;
    [CompilerGeneratedAttribute]
private IRoutingTopology <RoutingTopology>k__BackingField;
    [CompilerGeneratedAttribute]
private X509Certificate2 <ClientCertificate>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <ValidateRemoteCertificate>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <UseExternalAuthMechanism>k__BackingField;
    [CompilerGeneratedAttribute]
private string <LegacyApiConnectionString>k__BackingField;
    [CompilerGeneratedAttribute]
private Func`2<bool, IRoutingTopology> <TopologyFactory>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <UseDurableExchangesAndQueues>k__BackingField;
    private bool legacyMode;
    internal ConnectionConfiguration ConnectionConfiguration { get; internal set; }
    internal IRoutingTopology RoutingTopology { get; internal set; }
    public Func`2<BasicDeliverEventArgs, string> MessageIdStrategy { get; public set; }
    public TimeSpan TimeToWaitBeforeTriggeringCircuitBreaker { get; public set; }
    public PrefetchCountCalculation PrefetchCountCalculation { get; public set; }
    public X509Certificate2 ClientCertificate { get; public set; }
    public bool ValidateRemoteCertificate { get; public set; }
    public bool UseExternalAuthMechanism { get; public set; }
    public TimeSpan HeartbeatInterval { get; public set; }
    public TimeSpan NetworkRecoveryInterval { get; public set; }
    internal string LegacyApiConnectionString { get; internal set; }
    internal Func`2<bool, IRoutingTopology> TopologyFactory { get; internal set; }
    internal bool UseDurableExchangesAndQueues { get; internal set; }
    public RabbitMQTransport(RoutingTopology routingTopology, string connectionString);
    public RabbitMQTransport(RoutingTopology routingTopology, string connectionString, bool enableDelayedDelivery);
    [CompilerGeneratedAttribute]
internal ConnectionConfiguration get_ConnectionConfiguration();
    [CompilerGeneratedAttribute]
internal void set_ConnectionConfiguration(ConnectionConfiguration value);
    [CompilerGeneratedAttribute]
internal IRoutingTopology get_RoutingTopology();
    [CompilerGeneratedAttribute]
internal void set_RoutingTopology(IRoutingTopology value);
    public Func`2<BasicDeliverEventArgs, string> get_MessageIdStrategy();
    public void set_MessageIdStrategy(Func`2<BasicDeliverEventArgs, string> value);
    public TimeSpan get_TimeToWaitBeforeTriggeringCircuitBreaker();
    public void set_TimeToWaitBeforeTriggeringCircuitBreaker(TimeSpan value);
    public PrefetchCountCalculation get_PrefetchCountCalculation();
    public void set_PrefetchCountCalculation(PrefetchCountCalculation value);
    [CompilerGeneratedAttribute]
public X509Certificate2 get_ClientCertificate();
    [CompilerGeneratedAttribute]
public void set_ClientCertificate(X509Certificate2 value);
    [CompilerGeneratedAttribute]
public bool get_ValidateRemoteCertificate();
    [CompilerGeneratedAttribute]
public void set_ValidateRemoteCertificate(bool value);
    [CompilerGeneratedAttribute]
public bool get_UseExternalAuthMechanism();
    [CompilerGeneratedAttribute]
public void set_UseExternalAuthMechanism(bool value);
    public TimeSpan get_HeartbeatInterval();
    public void set_HeartbeatInterval(TimeSpan value);
    public TimeSpan get_NetworkRecoveryInterval();
    public void set_NetworkRecoveryInterval(TimeSpan value);
    public void AddClusterNode(string hostName, bool useTls);
    public void AddClusterNode(string hostName, int port, bool useTls);
    public virtual Task`1<TransportInfrastructure> Initialize(HostSettings hostSettings, ReceiveSettings[] receivers, String[] sendingAddresses, CancellationToken cancellationToken);
    public virtual IReadOnlyCollection`1<TransportTransactionMode> GetSupportedTransactionModes();
    [CompilerGeneratedAttribute]
internal string get_LegacyApiConnectionString();
    [CompilerGeneratedAttribute]
internal void set_LegacyApiConnectionString(string value);
    [CompilerGeneratedAttribute]
internal Func`2<bool, IRoutingTopology> get_TopologyFactory();
    [CompilerGeneratedAttribute]
internal void set_TopologyFactory(Func`2<bool, IRoutingTopology> value);
    [CompilerGeneratedAttribute]
internal bool get_UseDurableExchangesAndQueues();
    [CompilerGeneratedAttribute]
internal void set_UseDurableExchangesAndQueues(bool value);
    private void ValidateAndApplyLegacyConfiguration();
}
[ExtensionAttribute]
[PreObsoleteAttribute("https://github.com/Particular/NServiceBus/issues/6811")]
public static class NServiceBus.RabbitMQTransportSettingsExtensions : object {
    [ExtensionAttribute]
[PreObsoleteAttribute("https://github.com/Particular/NServiceBus/issues/6811")]
public static TransportExtensions`1<RabbitMQTransport> UseTransport(EndpointConfiguration config);
    [ExtensionAttribute]
[PreObsoleteAttribute("https://github.com/Particular/NServiceBus/issues/6811")]
public static TransportExtensions`1<RabbitMQTransport> AddClusterNode(TransportExtensions`1<RabbitMQTransport> transportExtensions, string hostName, bool useTls);
    [ExtensionAttribute]
[PreObsoleteAttribute("https://github.com/Particular/NServiceBus/issues/6811")]
public static TransportExtensions`1<RabbitMQTransport> AddClusterNode(TransportExtensions`1<RabbitMQTransport> transportExtensions, string hostName, int port, bool useTls);
    [ExtensionAttribute]
[PreObsoleteAttribute("https://github.com/Particular/NServiceBus/issues/6811")]
public static TransportExtensions`1<RabbitMQTransport> ConnectionString(TransportExtensions`1<RabbitMQTransport> transportExtensions, string connectionString);
    [ExtensionAttribute]
[PreObsoleteAttribute("https://github.com/Particular/NServiceBus/issues/6811")]
public static TransportExtensions`1<RabbitMQTransport> ConnectionString(TransportExtensions`1<RabbitMQTransport> transportExtensions, Func`1<string> getConnectionString);
    [ExtensionAttribute]
[PreObsoleteAttribute("https://github.com/Particular/NServiceBus/issues/6811")]
public static TransportExtensions`1<RabbitMQTransport> CustomMessageIdStrategy(TransportExtensions`1<RabbitMQTransport> transportExtensions, Func`2<BasicDeliverEventArgs, string> customIdStrategy);
    [ExtensionAttribute]
[PreObsoleteAttribute("https://github.com/Particular/NServiceBus/issues/6811")]
public static TransportExtensions`1<RabbitMQTransport> DisableDurableExchangesAndQueues(TransportExtensions`1<RabbitMQTransport> transportExtensions);
    [ExtensionAttribute]
[PreObsoleteAttribute("https://github.com/Particular/NServiceBus/issues/6811")]
public static TransportExtensions`1<RabbitMQTransport> DisableRemoteCertificateValidation(TransportExtensions`1<RabbitMQTransport> transportExtensions);
    [ExtensionAttribute]
[PreObsoleteAttribute("https://github.com/Particular/NServiceBus/issues/6811")]
public static TransportExtensions`1<RabbitMQTransport> PrefetchCount(TransportExtensions`1<RabbitMQTransport> transportExtensions, ushort prefetchCount);
    [ExtensionAttribute]
[PreObsoleteAttribute("https://github.com/Particular/NServiceBus/issues/6811")]
public static TransportExtensions`1<RabbitMQTransport> PrefetchMultiplier(TransportExtensions`1<RabbitMQTransport> transportExtensions, int prefetchMultiplier);
    [ExtensionAttribute]
[PreObsoleteAttribute("https://github.com/Particular/NServiceBus/issues/6811")]
public static TransportExtensions`1<RabbitMQTransport> SetClientCertificate(TransportExtensions`1<RabbitMQTransport> transportExtensions, X509Certificate2 clientCertificate);
    [ExtensionAttribute]
[PreObsoleteAttribute("https://github.com/Particular/NServiceBus/issues/6811")]
public static TransportExtensions`1<RabbitMQTransport> SetClientCertificate(TransportExtensions`1<RabbitMQTransport> transportExtensions, string path, string password);
    [ExtensionAttribute]
[PreObsoleteAttribute("https://github.com/Particular/NServiceBus/issues/6811")]
public static TransportExtensions`1<RabbitMQTransport> SetHeartbeatInterval(TransportExtensions`1<RabbitMQTransport> transportExtensions, TimeSpan heartbeatInterval);
    [ExtensionAttribute]
[PreObsoleteAttribute("https://github.com/Particular/NServiceBus/issues/6811")]
public static TransportExtensions`1<RabbitMQTransport> SetNetworkRecoveryInterval(TransportExtensions`1<RabbitMQTransport> transportExtensions, TimeSpan networkRecoveryInterval);
    [ExtensionAttribute]
[PreObsoleteAttribute("https://github.com/Particular/NServiceBus/issues/6811")]
public static TransportExtensions`1<RabbitMQTransport> TimeToWaitBeforeTriggeringCircuitBreaker(TransportExtensions`1<RabbitMQTransport> transportExtensions, TimeSpan waitTime);
    [ExtensionAttribute]
[PreObsoleteAttribute("https://github.com/Particular/NServiceBus/issues/6811")]
public static TransportExtensions`1<RabbitMQTransport> UseConventionalRoutingTopology(TransportExtensions`1<RabbitMQTransport> transportExtensions, QueueType queueType);
    [ExtensionAttribute]
[PreObsoleteAttribute("https://github.com/Particular/NServiceBus/issues/6811")]
public static TransportExtensions`1<RabbitMQTransport> UseCustomRoutingTopology(TransportExtensions`1<RabbitMQTransport> transportExtensions, Func`2<bool, IRoutingTopology> topologyFactory);
    [ExtensionAttribute]
[PreObsoleteAttribute("https://github.com/Particular/NServiceBus/issues/6811")]
public static TransportExtensions`1<RabbitMQTransport> UseDirectRoutingTopology(TransportExtensions`1<RabbitMQTransport> transportExtensions, QueueType queueType, Func`2<Type, string> routingKeyConvention, Func`1<string> exchangeNameConvention);
    [ExtensionAttribute]
[PreObsoleteAttribute("https://github.com/Particular/NServiceBus/issues/6811")]
public static TransportExtensions`1<RabbitMQTransport> UseExternalAuthMechanism(TransportExtensions`1<RabbitMQTransport> transportExtensions);
}
public class NServiceBus.RoutingTopology : object {
    private Func`1<IRoutingTopology> routingTopology;
    private RoutingTopology(Func`1<IRoutingTopology> routingTopology);
    public static RoutingTopology Conventional(QueueType queueType, bool useDurableEntities);
    internal static RoutingTopology Conventional(QueueType queueType, Func`2<Type, string> exchangeNameConvention, bool useDurable);
    public static RoutingTopology Direct(QueueType queueType, bool useDurableEntities, Func`2<Type, string> routingKeyConvention, Func`1<string> exchangeNameConvention);
    public static RoutingTopology Custom(IRoutingTopology routingTopology);
    internal IRoutingTopology Create();
}
[ExtensionAttribute]
internal static class NServiceBus.Transport.RabbitMQ.BasicPropertiesExtensions : object {
    public static string ConfirmationIdHeader;
    public static string UseNonPersistentDeliveryHeader;
    [ExtensionAttribute]
public static void Fill(IBasicProperties properties, OutgoingMessage message, DispatchProperties dispatchProperties);
    private static bool CalculateDelay(DispatchProperties dispatchProperties, Int64& delay);
    [ExtensionAttribute]
public static void SetConfirmationId(IBasicProperties properties, ulong confirmationId);
    [ExtensionAttribute]
public static bool TryGetConfirmationId(IBasicProperties properties, UInt64& confirmationId);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class NServiceBus.Transport.RabbitMQ.ChannelProvider : object {
    private ConnectionFactory connectionFactory;
    private TimeSpan retryDelay;
    private IRoutingTopology routingTopology;
    private ConcurrentQueue`1<ConfirmsAwareChannel> channels;
    private CancellationTokenSource stoppingTokenSource;
    [NullableAttribute("2")]
private IConnection modreq(System.Runtime.CompilerServices.IsVolatile) connection;
    private bool disposed;
    private static ILog Logger;
    public ChannelProvider(ConnectionFactory connectionFactory, TimeSpan retryDelay, IRoutingTopology routingTopology);
    private static ChannelProvider();
    public void CreateConnection();
    protected virtual IConnection CreatePublishConnection();
    private IConnection CreateConnectionWithShutdownListener();
    private void Connection_ConnectionShutdown(object sender, ShutdownEventArgs e);
    [AsyncStateMachineAttribute("NServiceBus.Transport.RabbitMQ.ChannelProvider/<ReconnectSwallowingExceptions>d__5")]
private Task ReconnectSwallowingExceptions(string connectionName, CancellationToken cancellationToken);
    protected virtual void FireAndForget(Func`2<CancellationToken, Task> action, CancellationToken cancellationToken);
    protected virtual Task DelayReconnect(CancellationToken cancellationToken);
    public ConfirmsAwareChannel GetPublishChannel();
    public void ReturnPublishChannel(ConfirmsAwareChannel channel);
    public sealed virtual void Dispose();
}
internal class NServiceBus.Transport.RabbitMQ.ConfirmsAwareChannel : object {
    private IModel channel;
    private IRoutingTopology routingTopology;
    private ConcurrentDictionary`2<ulong, TaskCompletionSource`1<bool>> messages;
    private static ILog Logger;
    public bool IsOpen { get; }
    public bool IsClosed { get; }
    public ConfirmsAwareChannel(IConnection connection, IRoutingTopology routingTopology);
    private static ConfirmsAwareChannel();
    public IBasicProperties CreateBasicProperties();
    public bool get_IsOpen();
    public bool get_IsClosed();
    public Task SendMessage(string address, OutgoingMessage message, IBasicProperties properties, CancellationToken cancellationToken);
    public Task PublishMessage(Type type, OutgoingMessage message, IBasicProperties properties, CancellationToken cancellationToken);
    public Task RawSendInCaseOfFailure(string address, ReadOnlyMemory`1<byte> body, IBasicProperties properties, CancellationToken cancellationToken);
    private Task GetConfirmationTask(CancellationToken cancellationToken);
    private void Channel_BasicAcks(object sender, BasicAckEventArgs e);
    private void Channel_BasicNacks(object sender, BasicNackEventArgs e);
    private void Channel_BasicReturn(object sender, BasicReturnEventArgs e);
    private void Channel_ModelShutdown(object sender, ShutdownEventArgs e);
    private void SetResult(ulong key);
    private void SetException(ulong key, string exceptionMessage);
    public sealed virtual void Dispose();
}
internal class NServiceBus.Transport.RabbitMQ.ConnectionConfiguration : object {
    private static bool defaultUseTls;
    private static int defaultPort;
    private static int defaultTlsPort;
    private static string defaultVirtualHost;
    private static string defaultUserName;
    private static string defaultPassword;
    [CompilerGeneratedAttribute]
private string <Host>k__BackingField;
    [CompilerGeneratedAttribute]
private int <Port>k__BackingField;
    [CompilerGeneratedAttribute]
private string <VirtualHost>k__BackingField;
    [CompilerGeneratedAttribute]
private string <UserName>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Password>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <UseTls>k__BackingField;
    public string Host { get; }
    public int Port { get; }
    public string VirtualHost { get; }
    public string UserName { get; }
    public string Password { get; }
    public bool UseTls { get; }
    private ConnectionConfiguration(string host, int port, string virtualHost, string userName, string password, bool useTls);
    [CompilerGeneratedAttribute]
public string get_Host();
    [CompilerGeneratedAttribute]
public int get_Port();
    [CompilerGeneratedAttribute]
public string get_VirtualHost();
    [CompilerGeneratedAttribute]
public string get_UserName();
    [CompilerGeneratedAttribute]
public string get_Password();
    [CompilerGeneratedAttribute]
public bool get_UseTls();
    public static ConnectionConfiguration Create(string connectionString);
    private static Dictionary`2<string, string> ParseAmqpConnectionString(string connectionString, StringBuilder invalidOptionsMessage);
    private static Dictionary`2<string, string> ParseNServiceBusConnectionString(string connectionString, StringBuilder invalidOptionsMessage);
    private static void RegisterDeprecatedSettingsAsInvalidOptions(Dictionary`2<string, string> dictionary, StringBuilder invalidOptionsMessage);
    private static string GetValue(Dictionary`2<string, string> dictionary, string key, string defaultValue);
    private static string UriDecode(string value);
    private static T GetValue(Dictionary`2<string, string> dictionary, string key, Convert`1<T> convert, T defaultValue, StringBuilder invalidOptionsMessage);
}
[ExtensionAttribute]
internal static class NServiceBus.Transport.RabbitMQ.ConnectionExtensions : object {
    [ExtensionAttribute]
public static void VerifyBrokerRequirements(IConnection connection);
}
internal class NServiceBus.Transport.RabbitMQ.ConnectionFactory : object {
    private static ILog Logger;
    private string endpointName;
    private ConnectionFactory connectionFactory;
    private List`1<AmqpTcpEndpoint> endpoints;
    private object lockObject;
    public ConnectionFactory(string endpointName, ConnectionConfiguration connectionConfiguration, X509Certificate2Collection clientCertificateCollection, bool disableRemoteCertificateValidation, bool useExternalAuthMechanism, TimeSpan heartbeatInterval, TimeSpan networkRecoveryInterval, List`1<ValueTuple`3<string, int, bool>> additionalClusterNodes);
    private static ConnectionFactory();
    private static AmqpTcpEndpoint CreateAmqpTcpEndpoint(string hostName, int port, bool useTls, X509Certificate2Collection certificateCollection, bool disableRemoteCertificateValidation);
    private void SetClientProperties(string endpointName, string userName);
    public IConnection CreatePublishConnection();
    public IConnection CreateAdministrationConnection();
    public IConnection CreateConnection(string connectionName, bool automaticRecoveryEnabled, int consumerDispatchConcurrency);
}
internal class NServiceBus.Transport.RabbitMQ.ConventionalRoutingTopology : object {
    private bool durable;
    private QueueType queueType;
    private ConcurrentDictionary`2<Type, string> typeTopologyConfiguredSet;
    private Func`2<Type, string> exchangeNameConvention;
    private static ILog Logger;
    public ConventionalRoutingTopology(bool durable, QueueType queueType);
    internal ConventionalRoutingTopology(bool durable, QueueType queueType, Func`2<Type, string> exchangeNameConvention);
    private static ConventionalRoutingTopology();
    public sealed virtual void SetupSubscription(IModel channel, MessageMetadata type, string subscriberName);
    public sealed virtual void TeardownSubscription(IModel channel, MessageMetadata type, string subscriberName);
    public sealed virtual void Publish(IModel channel, Type type, OutgoingMessage message, IBasicProperties properties);
    public sealed virtual void Send(IModel channel, string address, OutgoingMessage message, IBasicProperties properties);
    public sealed virtual void RawSendInCaseOfFailure(IModel channel, string address, ReadOnlyMemory`1<byte> body, IBasicProperties properties);
    public sealed virtual void Initialize(IModel channel, IEnumerable`1<string> receivingAddresses, IEnumerable`1<string> sendingAddresses);
    public sealed virtual void BindToDelayInfrastructure(IModel channel, string address, string deliveryExchange, string routingKey);
    private void SetupTypeSubscriptions(IModel channel, Type type);
    private void MarkTypeConfigured(Type eventType);
    private bool IsTypeTopologyKnownConfigured(Type eventType);
    private void CreateExchange(IModel channel, string exchangeName);
}
internal class NServiceBus.Transport.RabbitMQ.DefaultRoutingKeyConvention : object {
    private static Byte[] MsPublicKeyToken;
    private static ConcurrentDictionary`2<Type, bool> IsSystemTypeCache;
    private static ILog Logger;
    private static DefaultRoutingKeyConvention();
    public static string GenerateRoutingKey(Type eventType);
    private static string GetRoutingKey(Type type, string key);
    private static bool IsSystemType(Type type);
    private static bool IsClrType(Byte[] a1);
    private static bool IsNServiceBusMarkerInterface(Type type);
}
internal static class NServiceBus.Transport.RabbitMQ.DelayInfrastructure : object {
    private static int MaxNumberOfBitsToUse;
    public static int MaxLevel;
    public static int MaxDelayInSeconds;
    public static string DelayHeader;
    public static string XDeathHeader;
    public static string XFirstDeathExchangeHeader;
    public static string XFirstDeathQueueHeader;
    public static string XFirstDeathReasonHeader;
    public static string DeliveryExchange;
    public static string LevelName(int level);
    public static string BindingKey(string address);
    public static void Build(IModel channel);
    public static void TearDown(IModel channel);
    public static string CalculateRoutingKey(int delayInSeconds, string address, Int32& startingDelayLevel);
    [CompilerGeneratedAttribute]
internal static void <CalculateRoutingKey>g__Action|13_0(Span`1<char> span, ValueTuple`3<int, string, IntPtr> state);
}
internal class NServiceBus.Transport.RabbitMQ.DirectRoutingTopology : object {
    private static string amqpTopicExchange;
    private bool durable;
    private QueueType queueType;
    private Func`2<Type, string> routingKeyConvention;
    private Func`1<string> exchangeNameConvention;
    private static ILog Logger;
    public DirectRoutingTopology(bool durable, QueueType queueType, Func`2<Type, string> routingKeyConvention, Func`1<string> exchangeNameConvention);
    private static DirectRoutingTopology();
    public sealed virtual void SetupSubscription(IModel channel, MessageMetadata type, string subscriberName);
    public sealed virtual void TeardownSubscription(IModel channel, MessageMetadata type, string subscriberName);
    public sealed virtual void Publish(IModel channel, Type type, OutgoingMessage message, IBasicProperties properties);
    public sealed virtual void Send(IModel channel, string address, OutgoingMessage message, IBasicProperties properties);
    public sealed virtual void RawSendInCaseOfFailure(IModel channel, string address, ReadOnlyMemory`1<byte> body, IBasicProperties properties);
    public sealed virtual void Initialize(IModel channel, IEnumerable`1<string> receivingAddresses, IEnumerable`1<string> sendingAddresses);
    public sealed virtual void BindToDelayInfrastructure(IModel channel, string address, string deliveryExchange, string routingKey);
    private void CreateExchange(IModel channel, string exchangeName);
    private string GetRoutingKeyForPublish(Type eventType);
    private string GetRoutingKeyForBinding(Type eventType);
}
public interface NServiceBus.Transport.RabbitMQ.IRoutingTopology {
    public abstract virtual void SetupSubscription(IModel channel, MessageMetadata type, string subscriberName);
    public abstract virtual void TeardownSubscription(IModel channel, MessageMetadata type, string subscriberName);
    public abstract virtual void Publish(IModel channel, Type type, OutgoingMessage message, IBasicProperties properties);
    public abstract virtual void Send(IModel channel, string address, OutgoingMessage message, IBasicProperties properties);
    public abstract virtual void RawSendInCaseOfFailure(IModel channel, string address, ReadOnlyMemory`1<byte> body, IBasicProperties properties);
    public abstract virtual void Initialize(IModel channel, IEnumerable`1<string> receivingAddresses, IEnumerable`1<string> sendingAddresses);
    public abstract virtual void BindToDelayInfrastructure(IModel channel, string address, string deliveryExchange, string routingKey);
}
internal class NServiceBus.Transport.RabbitMQ.MessageConverter : object {
    private Func`2<BasicDeliverEventArgs, string> messageIdStrategy;
    private static DateTimeOffset UnixEpoch;
    public MessageConverter(Func`2<BasicDeliverEventArgs, string> messageIdStrategy);
    private static MessageConverter();
    public string RetrieveMessageId(BasicDeliverEventArgs message, Dictionary`2<string, string> headers);
    public Dictionary`2<string, string> RetrieveHeaders(BasicDeliverEventArgs message);
    public static string DefaultMessageIdStrategy(BasicDeliverEventArgs message);
    private static Dictionary`2<string, string> DeserializeHeaders(IDictionary`2<string, object> headers, int extraCapacity);
    private static string ValueToString(object value);
}
internal class NServiceBus.Transport.RabbitMQ.MessageDispatcher : object {
    private ChannelProvider channelProvider;
    private bool supportsDelayedDelivery;
    public MessageDispatcher(ChannelProvider channelProvider, bool supportsDelayedDelivery);
    public sealed virtual Task Dispatch(TransportOperations outgoingMessages, TransportTransaction transaction, CancellationToken cancellationToken);
    private Task SendMessage(UnicastTransportOperation transportOperation, ConfirmsAwareChannel channel, CancellationToken cancellationToken);
    private Task PublishMessage(MulticastTransportOperation transportOperation, ConfirmsAwareChannel channel, CancellationToken cancellationToken);
    private void ThrowIfDelayedDeliveryIsDisabledAndMessageIsDelayed(IOutgoingTransportOperation transportOperation);
}
internal class NServiceBus.Transport.RabbitMQ.MessagePump : object {
    private static ILog Logger;
    private static TransportTransaction transportTransaction;
    private ReceiveSettings settings;
    private ConnectionFactory connectionFactory;
    private MessageConverter messageConverter;
    private string consumerTag;
    private ChannelProvider channelProvider;
    private TimeSpan timeToWaitBeforeTriggeringCircuitBreaker;
    private QueuePurger queuePurger;
    private PrefetchCountCalculation prefetchCountCalculation;
    private Action`3<string, Exception, CancellationToken> criticalErrorAction;
    private TimeSpan retryDelay;
    private string name;
    private FastConcurrentLru`2<string, int> deliveryAttempts;
    private FastConcurrentLru`2<string, bool> failedBasicAckMessages;
    private OnMessage onMessage;
    private OnError onError;
    private int maxConcurrency;
    private long numberOfMessagesBeingProcessed;
    private CancellationTokenSource messagePumpCancellationTokenSource;
    private CancellationTokenSource messageProcessingCancellationTokenSource;
    private MessagePumpConnectionFailedCircuitBreaker circuitBreaker;
    private IConnection connection;
    private TaskCompletionSource`1<bool> connectionShutdownCompleted;
    [CompilerGeneratedAttribute]
private ISubscriptionManager <Subscriptions>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ReceiveAddress>k__BackingField;
    public ISubscriptionManager Subscriptions { get; }
    public string Id { get; }
    public string ReceiveAddress { get; }
    public MessagePump(ReceiveSettings settings, ConnectionFactory connectionFactory, IRoutingTopology routingTopology, MessageConverter messageConverter, string consumerTag, ChannelProvider channelProvider, TimeSpan timeToWaitBeforeTriggeringCircuitBreaker, PrefetchCountCalculation prefetchCountCalculation, Action`3<string, Exception, CancellationToken> criticalErrorAction, TimeSpan retryDelay);
    private static MessagePump();
    [CompilerGeneratedAttribute]
public sealed virtual ISubscriptionManager get_Subscriptions();
    public sealed virtual string get_Id();
    [CompilerGeneratedAttribute]
public sealed virtual string get_ReceiveAddress();
    public sealed virtual Task Initialize(PushRuntimeSettings limitations, OnMessage onMessage, OnError onError, CancellationToken cancellationToken);
    public sealed virtual Task StartReceive(CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("NServiceBus.Transport.RabbitMQ.MessagePump/<ChangeConcurrency>d__35")]
public sealed virtual Task ChangeConcurrency(PushRuntimeSettings limitations, CancellationToken cancellationToken);
    private void ConnectToBroker();
    [AsyncStateMachineAttribute("NServiceBus.Transport.RabbitMQ.MessagePump/<StopReceive>d__37")]
public sealed virtual Task StopReceive(CancellationToken cancellationToken);
    private Task Consumer_Registered(object sender, ConsumerEventArgs e);
    private void Connection_ConnectionShutdown(object sender, ShutdownEventArgs e);
    private void Channel_ModelShutdown(object sender, ShutdownEventArgs e);
    private Task Consumer_ConsumerCancelled(object sender, ConsumerEventArgs e);
    [AsyncStateMachineAttribute("NServiceBus.Transport.RabbitMQ.MessagePump/<Reconnect>d__42")]
private Task Reconnect(CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("NServiceBus.Transport.RabbitMQ.MessagePump/<Consumer_Received>d__43")]
private Task Consumer_Received(object sender, BasicDeliverEventArgs eventArgs);
    [AsyncStateMachineAttribute("NServiceBus.Transport.RabbitMQ.MessagePump/<ProcessAndSwallowExceptions>d__44")]
private Task ProcessAndSwallowExceptions(AsyncEventingBasicConsumer consumer, BasicDeliverEventArgs message, CancellationToken messageProcessingCancellationToken);
    [AsyncStateMachineAttribute("NServiceBus.Transport.RabbitMQ.MessagePump/<Process>d__45")]
private Task Process(AsyncEventingBasicConsumer consumer, BasicDeliverEventArgs message, CancellationToken messageProcessingCancellationToken);
    private static string CreateMessageIdKey(Dictionary`2<string, string> headers, string messageId);
    private int GetDeliveryAttempts(BasicDeliverEventArgs message, string messageIdKey);
    [AsyncStateMachineAttribute("NServiceBus.Transport.RabbitMQ.MessagePump/<MovePoisonMessage>d__48")]
private Task MovePoisonMessage(AsyncEventingBasicConsumer consumer, BasicDeliverEventArgs message, string queue, CancellationToken messageProcessingCancellationToken);
    [CompilerGeneratedAttribute]
private void <StartReceive>b__34_0(string message, Exception exception);
    [CompilerGeneratedAttribute]
private void <StopReceive>b__37_0();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
private Task <Connection_ConnectionShutdown>b__39_0();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
private Task <Channel_ModelShutdown>b__40_0();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
private Task <Consumer_ConsumerCancelled>b__41_0();
}
internal class NServiceBus.Transport.RabbitMQ.MessagePumpConnectionFailedCircuitBreaker : object {
    private static TimeSpan NoPeriodicTriggering;
    private static ILog Logger;
    private string name;
    private TimeSpan timeToWaitBeforeTriggering;
    private Timer timer;
    private Action`2<string, Exception> criticalErrorAction;
    private long failureCount;
    private Exception lastException;
    public bool Disarmed { get; }
    public MessagePumpConnectionFailedCircuitBreaker(string name, TimeSpan timeToWaitBeforeTriggering, Action`2<string, Exception> criticalErrorAction);
    private static MessagePumpConnectionFailedCircuitBreaker();
    public bool get_Disarmed();
    public void Success();
    public void Failure(Exception exception);
    public sealed virtual void Dispose();
    private void CircuitBreakerTriggered(object state);
}
[ExtensionAttribute]
internal static class NServiceBus.Transport.RabbitMQ.ModelExtensions : object {
    [ExtensionAttribute]
public static void BasicAckSingle(IModel channel, ulong deliveryTag);
    [ExtensionAttribute]
public static void BasicRejectAndRequeueIfOpen(IModel channel, ulong deliveryTag);
}
internal class NServiceBus.Transport.RabbitMQ.QueuePurger : object {
    private ConnectionFactory connectionFactory;
    public QueuePurger(ConnectionFactory connectionFactory);
    public void Purge(string queue);
}
internal class NServiceBus.Transport.RabbitMQ.RabbitMQTransportInfrastructure : TransportInfrastructure {
    private ConnectionFactory connectionFactory;
    private ChannelProvider channelProvider;
    private IRoutingTopology routingTopology;
    private TimeSpan networkRecoveryInterval;
    private bool supportsDelayedDelivery;
    public RabbitMQTransportInfrastructure(HostSettings hostSettings, ReceiveSettings[] receiverSettings, ConnectionFactory connectionFactory, IRoutingTopology routingTopology, ChannelProvider channelProvider, MessageConverter messageConverter, TimeSpan timeToWaitBeforeTriggeringCircuitBreaker, PrefetchCountCalculation prefetchCountCalculation, TimeSpan networkRecoveryInterval, bool supportsDelayedDelivery);
    private IMessageReceiver CreateMessagePump(HostSettings hostSettings, ReceiveSettings settings, MessageConverter messageConverter, TimeSpan timeToWaitBeforeTriggeringCircuitBreaker, PrefetchCountCalculation prefetchCountCalculation);
    internal void SetupInfrastructure(String[] sendingQueues);
    [AsyncStateMachineAttribute("NServiceBus.Transport.RabbitMQ.RabbitMQTransportInfrastructure/<Shutdown>d__8")]
public virtual Task Shutdown(CancellationToken cancellationToken);
    public virtual string ToTransportAddress(QueueAddress address);
    internal static string TranslateAddress(QueueAddress address);
}
internal class NServiceBus.Transport.RabbitMQ.SubscriptionManager : object {
    private ConnectionFactory connectionFactory;
    private IRoutingTopology routingTopology;
    private string localQueue;
    public SubscriptionManager(ConnectionFactory connectionFactory, IRoutingTopology routingTopology, string localQueue);
    public sealed virtual Task SubscribeAll(MessageMetadata[] eventTypes, ContextBag context, CancellationToken cancellationToken);
    public sealed virtual Task Unsubscribe(MessageMetadata eventType, ContextBag context, CancellationToken cancellationToken);
}
internal class NServiceBusTransportRabbitMQ_ProcessedByFody : object {
    internal static string FodyVersion;
    internal static string Obsolete;
}
