internal class NServiceBus.NonDurableTransaction : object {
    private List`1<Action> actions;
    public void Enlist(Action action);
    public void Commit();
    public void Rollback();
}
internal static class NServiceBus.Testing.CachedSagaDataTask`1 : object {
    public static Task`1<TSagaData> Default;
    private static CachedSagaDataTask`1();
}
internal class NServiceBus.Testing.DefaultTestingLoggerFactory : object {
    public static bool IsDebugEnabled { get; }
    public static bool IsInfoEnabled { get; }
    public static bool IsWarnEnabled { get; }
    public static bool IsErrorEnabled { get; }
    public static bool IsFatalEnabled { get; }
    private static LogLevel FilterLevel { get; }
    private static TextWriter TextWriter { get; }
    public static bool get_IsDebugEnabled();
    public static bool get_IsInfoEnabled();
    public static bool get_IsWarnEnabled();
    public static bool get_IsErrorEnabled();
    public static bool get_IsFatalEnabled();
    private static LogLevel get_FilterLevel();
    private static TextWriter get_TextWriter();
    public sealed virtual ILog GetLogger(Type type);
    public sealed virtual ILog GetLogger(string name);
    public static void Write(string name, LogLevel messageLevel, string message);
}
internal class NServiceBus.Testing.NamedLogger : object {
    private string name;
    public bool IsDebugEnabled { get; }
    public bool IsInfoEnabled { get; }
    public bool IsWarnEnabled { get; }
    public bool IsErrorEnabled { get; }
    public bool IsFatalEnabled { get; }
    public NamedLogger(string name);
    public sealed virtual bool get_IsDebugEnabled();
    public sealed virtual bool get_IsInfoEnabled();
    public sealed virtual bool get_IsWarnEnabled();
    public sealed virtual bool get_IsErrorEnabled();
    public sealed virtual bool get_IsFatalEnabled();
    public sealed virtual void Debug(string message);
    public sealed virtual void Debug(string message, Exception exception);
    public sealed virtual void DebugFormat(string format, Object[] args);
    public sealed virtual void Info(string message);
    public sealed virtual void Info(string message, Exception exception);
    public sealed virtual void InfoFormat(string format, Object[] args);
    public sealed virtual void Warn(string message);
    public sealed virtual void Warn(string message, Exception exception);
    public sealed virtual void WarnFormat(string format, Object[] args);
    public sealed virtual void Error(string message);
    public sealed virtual void Error(string message, Exception exception);
    public sealed virtual void ErrorFormat(string format, Object[] args);
    public sealed virtual void Fatal(string message);
    public sealed virtual void Fatal(string message, Exception exception);
    public sealed virtual void FatalFormat(string format, Object[] args);
}
internal class NServiceBus.Testing.NonDurableSagaPersister : object {
    private ConcurrentDictionary`2<Guid, Entry> sagas;
    private ConcurrentDictionary`2<CorrelationId, Guid> byCorrelationId;
    private ICollection`1<KeyValuePair`2<Guid, Entry>> sagasCollection;
    private ICollection`1<KeyValuePair`2<CorrelationId, Guid>> byCorrelationIdCollection;
    private static string ContextKey;
    private static CorrelationId NoCorrelationId;
    private static NonDurableSagaPersister();
    public sealed virtual Task Complete(IContainSagaData sagaData, ISynchronizedStorageSession session, ContextBag context, CancellationToken cancellationToken);
    public sealed virtual Task`1<TSagaData> Get(Guid sagaId, ISynchronizedStorageSession session, ContextBag context, CancellationToken cancellationToken);
    public sealed virtual Task`1<TSagaData> Get(string propertyName, object propertyValue, ISynchronizedStorageSession session, ContextBag context, CancellationToken cancellationToken);
    public sealed virtual Task Save(IContainSagaData sagaData, SagaCorrelationProperty correlationProperty, ISynchronizedStorageSession session, ContextBag context, CancellationToken cancellationToken);
    public sealed virtual Task Update(IContainSagaData sagaData, ISynchronizedStorageSession session, ContextBag context, CancellationToken cancellationToken);
    private static void SetEntry(ContextBag context, Guid sagaId, Entry value);
    private static Entry GetEntry(IReadOnlyContextBag context, Guid sagaDataId);
}
internal class NServiceBus.Testing.NonDurableSynchronizedStorageSession : object {
    [CompilerGeneratedAttribute]
private NonDurableTransaction <Transaction>k__BackingField;
    private bool ownsTransaction;
    public NonDurableTransaction Transaction { get; private set; }
    [CompilerGeneratedAttribute]
public NonDurableTransaction get_Transaction();
    [CompilerGeneratedAttribute]
private void set_Transaction(NonDurableTransaction value);
    public sealed virtual void Dispose();
    public sealed virtual ValueTask`1<bool> TryOpen(IOutboxTransaction transaction, ContextBag context, CancellationToken cancellationToken);
    public sealed virtual ValueTask`1<bool> TryOpen(TransportTransaction transportTransaction, ContextBag context, CancellationToken cancellationToken);
    public sealed virtual Task Open(ContextBag contextBag, CancellationToken cancellationToken);
    public sealed virtual Task CompleteAsync(CancellationToken cancellationToken);
    public void Enlist(Action action);
}
public class NServiceBus.Testing.OutgoingMessage`2 : object {
    [CompilerGeneratedAttribute]
private TMessage <Message>k__BackingField;
    [CompilerGeneratedAttribute]
private TOptions <Options>k__BackingField;
    public TMessage Message { get; }
    public TOptions Options { get; }
    protected OutgoingMessage`2(TMessage message, TOptions options);
    [CompilerGeneratedAttribute]
public TMessage get_Message();
    [CompilerGeneratedAttribute]
public TOptions get_Options();
}
[ExtensionAttribute]
public static class NServiceBus.Testing.OutgoingMessageExtensions : object {
    [ExtensionAttribute]
public static IEnumerable`1<RepliedMessage`1<TMessage>> Containing(IEnumerable`1<RepliedMessage`1<object>> repliedMessages);
    [ExtensionAttribute]
public static IEnumerable`1<PublishedMessage`1<TMessage>> Containing(IEnumerable`1<PublishedMessage`1<object>> publishedMessages);
    [ExtensionAttribute]
public static IEnumerable`1<SentMessage`1<TMessage>> Containing(IEnumerable`1<SentMessage`1<object>> sentMessages);
    [ExtensionAttribute]
public static TMessage Message(RepliedMessage`1<object> sentMessage);
    [ExtensionAttribute]
public static TMessage Message(PublishedMessage`1<object> sentMessage);
    [ExtensionAttribute]
public static TMessage Message(SentMessage`1<object> sentMessage);
}
public class NServiceBus.Testing.PublishedMessage`1 : OutgoingMessage`2<TMessage, PublishOptions> {
    public PublishedMessage`1(TMessage message, PublishOptions options);
}
[DebuggerDisplayAttribute("QueuedSagaMessage: {Message}")]
public class NServiceBus.Testing.QueuedSagaMessage : object {
    [CompilerGeneratedAttribute]
private Type <Type>k__BackingField;
    [CompilerGeneratedAttribute]
private object <Message>k__BackingField;
    [CompilerGeneratedAttribute]
private IReadOnlyDictionary`2<string, string> <Headers>k__BackingField;
    public Type Type { get; private set; }
    public object Message { get; private set; }
    public IReadOnlyDictionary`2<string, string> Headers { get; private set; }
    internal QueuedSagaMessage(Type type, object message, IReadOnlyDictionary`2<string, string> headers, Nullable`1<Guid> autoCorrelatedSagaId);
    [CompilerGeneratedAttribute]
public Type get_Type();
    [CompilerGeneratedAttribute]
private void set_Type(Type value);
    [CompilerGeneratedAttribute]
public object get_Message();
    [CompilerGeneratedAttribute]
private void set_Message(object value);
    [CompilerGeneratedAttribute]
public IReadOnlyDictionary`2<string, string> get_Headers();
    [CompilerGeneratedAttribute]
private void set_Headers(IReadOnlyDictionary`2<string, string> value);
}
public class NServiceBus.Testing.RepliedMessage`1 : OutgoingMessage`2<TMessage, ReplyOptions> {
    public RepliedMessage`1(TMessage message, ReplyOptions options);
}
internal class NServiceBus.Testing.SagaMapper : object {
    private static ConcurrentDictionary`2<Type, SagaMapper> sagaMappers;
    private SagaMetadata metadata;
    private IReadOnlyDictionary`2<Type, Func`2<QueuedSagaMessage, object>> mappings;
    private CorrelationPropertyMetadata correlationProperty;
    private PropertyInfo correlationPropertyInfo;
    [TupleElementNamesAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private ConcurrentDictionary`2<ValueTuple`2<Type, string>, MethodInfo> handlerMethods;
    public string CorrelationPropertyName { get; }
    private SagaMapper(Type sagaType, Type sagaDataType, object dummySagaForReflection);
    private static SagaMapper();
    public string get_CorrelationPropertyName();
    public static SagaMapper Get(Func`1<TSaga> sagaFactory);
    public bool HandlesMessageType(Type messageType);
    public SagaMessage GetMessageMetadata(Type messageType);
    public object GetMessageMappedValue(QueuedSagaMessage message);
    public void SetCorrelationPropertyValue(IContainSagaData sagaEntity, object value);
    public Task InvokeHandlerMethod(TSaga saga, string methodName, QueuedSagaMessage message, TestableMessageHandlerContext context);
}
public class NServiceBus.Testing.SentMessage`1 : OutgoingMessage`2<TMessage, SendOptions> {
    public SentMessage`1(TMessage message, SendOptions options);
}
public class NServiceBus.Testing.Subscription : OutgoingMessage`2<Type, SubscribeOptions> {
    public Subscription(Type message, SubscribeOptions options);
}
public class NServiceBus.Testing.TestableAuditContext : TestableBehaviorContext {
    [CompilerGeneratedAttribute]
private string <AuditAddress>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<TimeSpan> <TimeToBeReceived>k__BackingField;
    [CompilerGeneratedAttribute]
private OutgoingMessage <Message>k__BackingField;
    [CompilerGeneratedAttribute]
private Dictionary`2<string, string> <AuditMetadata>k__BackingField;
    [CompilerGeneratedAttribute]
private AuditAction <AuditAction>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsLocked>k__BackingField;
    public string AuditAddress { get; public set; }
    public Nullable`1<TimeSpan> TimeToBeReceived { get; }
    public OutgoingMessage Message { get; public set; }
    public Dictionary`2<string, string> AuditMetadata { get; public set; }
    public AuditAction AuditAction { get; public set; }
    private IReadOnlyDictionary`2<string, string> NServiceBus.Pipeline.IAuditActionContext.AuditMetadata { get; }
    public bool IsLocked { get; private set; }
    [CompilerGeneratedAttribute]
public sealed virtual string get_AuditAddress();
    [CompilerGeneratedAttribute]
public void set_AuditAddress(string value);
    [CompilerGeneratedAttribute]
public sealed virtual Nullable`1<TimeSpan> get_TimeToBeReceived();
    [CompilerGeneratedAttribute]
public sealed virtual OutgoingMessage get_Message();
    [CompilerGeneratedAttribute]
public void set_Message(OutgoingMessage value);
    [CompilerGeneratedAttribute]
public sealed virtual Dictionary`2<string, string> get_AuditMetadata();
    [CompilerGeneratedAttribute]
public void set_AuditMetadata(Dictionary`2<string, string> value);
    public sealed virtual void AddAuditData(string key, string value);
    [CompilerGeneratedAttribute]
public sealed virtual AuditAction get_AuditAction();
    [CompilerGeneratedAttribute]
public sealed virtual void set_AuditAction(AuditAction value);
    private sealed virtual override IReadOnlyDictionary`2<string, string> NServiceBus.Pipeline.IAuditActionContext.get_AuditMetadata();
    public sealed virtual IAuditActionContext PreventChanges();
    [CompilerGeneratedAttribute]
public bool get_IsLocked();
    [CompilerGeneratedAttribute]
private void set_IsLocked(bool value);
}
public class NServiceBus.Testing.TestableBatchDispatchContext : TestableBehaviorContext {
    [CompilerGeneratedAttribute]
private IList`1<TransportOperation> <Operations>k__BackingField;
    public IList`1<TransportOperation> Operations { get; public set; }
    private IReadOnlyCollection`1<TransportOperation> NServiceBus.Pipeline.IBatchDispatchContext.Operations { get; }
    [CompilerGeneratedAttribute]
public IList`1<TransportOperation> get_Operations();
    [CompilerGeneratedAttribute]
public void set_Operations(IList`1<TransportOperation> value);
    private sealed virtual override IReadOnlyCollection`1<TransportOperation> NServiceBus.Pipeline.IBatchDispatchContext.get_Operations();
}
public abstract class NServiceBus.Testing.TestableBehaviorContext : object {
    [CompilerGeneratedAttribute]
private IServiceCollection <ServiceCollection>k__BackingField;
    [CompilerGeneratedAttribute]
private ContextBag <Extensions>k__BackingField;
    [CompilerGeneratedAttribute]
private CancellationToken <CancellationToken>k__BackingField;
    public IServiceCollection ServiceCollection { get; public set; }
    public ContextBag Extensions { get; public set; }
    public CancellationToken CancellationToken { get; public set; }
    private IServiceProvider NServiceBus.Pipeline.IBehaviorContext.Builder { get; }
    [CompilerGeneratedAttribute]
public IServiceCollection get_ServiceCollection();
    [CompilerGeneratedAttribute]
public void set_ServiceCollection(IServiceCollection value);
    [CompilerGeneratedAttribute]
public sealed virtual ContextBag get_Extensions();
    [CompilerGeneratedAttribute]
public void set_Extensions(ContextBag value);
    [CompilerGeneratedAttribute]
public sealed virtual CancellationToken get_CancellationToken();
    [CompilerGeneratedAttribute]
public void set_CancellationToken(CancellationToken value);
    private sealed virtual override IServiceProvider NServiceBus.Pipeline.IBehaviorContext.get_Builder();
    protected virtual IServiceProvider GetBuilder();
}
public class NServiceBus.Testing.TestableDispatchContext : TestableBehaviorContext {
    [CompilerGeneratedAttribute]
private IList`1<TransportOperation> <Operations>k__BackingField;
    public IList`1<TransportOperation> Operations { get; public set; }
    private IEnumerable`1<TransportOperation> NServiceBus.Pipeline.IDispatchContext.Operations { get; }
    [CompilerGeneratedAttribute]
public IList`1<TransportOperation> get_Operations();
    [CompilerGeneratedAttribute]
public void set_Operations(IList`1<TransportOperation> value);
    private sealed virtual override IEnumerable`1<TransportOperation> NServiceBus.Pipeline.IDispatchContext.get_Operations();
}
public class NServiceBus.Testing.TestableEndpointInstance : TestableMessageSession {
    [CompilerGeneratedAttribute]
private bool <EndpointStopped>k__BackingField;
    public bool EndpointStopped { get; private set; }
    [CompilerGeneratedAttribute]
public bool get_EndpointStopped();
    [CompilerGeneratedAttribute]
private void set_EndpointStopped(bool value);
    public virtual Task Stop(CancellationToken cancellationToken);
}
public abstract class NServiceBus.Testing.TestableIncomingContext : TestableMessageProcessingContext {
    [CompilerGeneratedAttribute]
private IServiceCollection <ServiceCollection>k__BackingField;
    public IServiceCollection ServiceCollection { get; public set; }
    private IServiceProvider NServiceBus.Pipeline.IBehaviorContext.Builder { get; }
    protected TestableIncomingContext(IMessageCreator messageCreator);
    [CompilerGeneratedAttribute]
public IServiceCollection get_ServiceCollection();
    [CompilerGeneratedAttribute]
public void set_ServiceCollection(IServiceCollection value);
    private sealed virtual override IServiceProvider NServiceBus.Pipeline.IBehaviorContext.get_Builder();
    protected virtual IServiceProvider GetBuilder();
}
public class NServiceBus.Testing.TestableIncomingLogicalMessageContext : TestableIncomingContext {
    [CompilerGeneratedAttribute]
private LogicalMessage <Message>k__BackingField;
    [CompilerGeneratedAttribute]
private Dictionary`2<string, string> <Headers>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <MessageHandled>k__BackingField;
    public LogicalMessage Message { get; public set; }
    public Dictionary`2<string, string> Headers { get; public set; }
    public bool MessageHandled { get; public set; }
    public TestableIncomingLogicalMessageContext(IMessageCreator messageCreator);
    [CompilerGeneratedAttribute]
public sealed virtual LogicalMessage get_Message();
    [CompilerGeneratedAttribute]
public void set_Message(LogicalMessage value);
    [CompilerGeneratedAttribute]
public sealed virtual Dictionary`2<string, string> get_Headers();
    [CompilerGeneratedAttribute]
public void set_Headers(Dictionary`2<string, string> value);
    [CompilerGeneratedAttribute]
public sealed virtual bool get_MessageHandled();
    [CompilerGeneratedAttribute]
public sealed virtual void set_MessageHandled(bool value);
    public virtual void UpdateMessageInstance(object newInstance);
}
public class NServiceBus.Testing.TestableIncomingPhysicalMessageContext : TestableIncomingContext {
    [CompilerGeneratedAttribute]
private IncomingMessage <Message>k__BackingField;
    public IncomingMessage Message { get; public set; }
    public virtual void UpdateMessage(ReadOnlyMemory`1<byte> body);
    [CompilerGeneratedAttribute]
public sealed virtual IncomingMessage get_Message();
    [CompilerGeneratedAttribute]
public void set_Message(IncomingMessage value);
}
public class NServiceBus.Testing.TestableInvokeHandlerContext : TestableIncomingContext {
    [CompilerGeneratedAttribute]
private bool <DoNotContinueDispatchingCurrentMessageToHandlersWasCalled>k__BackingField;
    [CompilerGeneratedAttribute]
private ISynchronizedStorageSession <SynchronizedStorageSession>k__BackingField;
    [CompilerGeneratedAttribute]
private MessageHandler <MessageHandler>k__BackingField;
    [CompilerGeneratedAttribute]
private Dictionary`2<string, string> <Headers>k__BackingField;
    [CompilerGeneratedAttribute]
private object <MessageBeingHandled>k__BackingField;
    [CompilerGeneratedAttribute]
private MessageMetadata <MessageMetadata>k__BackingField;
    public bool DoNotContinueDispatchingCurrentMessageToHandlersWasCalled { get; public set; }
    public ISynchronizedStorageSession SynchronizedStorageSession { get; public set; }
    public MessageHandler MessageHandler { get; public set; }
    public Dictionary`2<string, string> Headers { get; public set; }
    public object MessageBeingHandled { get; public set; }
    public bool HandlerInvocationAborted { get; }
    public MessageMetadata MessageMetadata { get; public set; }
    public TestableInvokeHandlerContext(IMessageCreator messageCreator);
    [CompilerGeneratedAttribute]
public bool get_DoNotContinueDispatchingCurrentMessageToHandlersWasCalled();
    [CompilerGeneratedAttribute]
public void set_DoNotContinueDispatchingCurrentMessageToHandlersWasCalled(bool value);
    public sealed virtual void DoNotContinueDispatchingCurrentMessageToHandlers();
    [CompilerGeneratedAttribute]
public sealed virtual ISynchronizedStorageSession get_SynchronizedStorageSession();
    [CompilerGeneratedAttribute]
public void set_SynchronizedStorageSession(ISynchronizedStorageSession value);
    [CompilerGeneratedAttribute]
public sealed virtual MessageHandler get_MessageHandler();
    [CompilerGeneratedAttribute]
public void set_MessageHandler(MessageHandler value);
    [CompilerGeneratedAttribute]
public sealed virtual Dictionary`2<string, string> get_Headers();
    [CompilerGeneratedAttribute]
public void set_Headers(Dictionary`2<string, string> value);
    [CompilerGeneratedAttribute]
public sealed virtual object get_MessageBeingHandled();
    [CompilerGeneratedAttribute]
public void set_MessageBeingHandled(object value);
    public sealed virtual bool get_HandlerInvocationAborted();
    [CompilerGeneratedAttribute]
public sealed virtual MessageMetadata get_MessageMetadata();
    [CompilerGeneratedAttribute]
public void set_MessageMetadata(MessageMetadata value);
}
public class NServiceBus.Testing.TestableMessageHandlerContext : TestableInvokeHandlerContext {
    public TestableMessageHandlerContext(IMessageCreator messageCreator);
}
public class NServiceBus.Testing.TestableMessageProcessingContext : TestablePipelineContext {
    [CompilerGeneratedAttribute]
private IDictionary`2<string, string> <MessageHeaders>k__BackingField;
    [CompilerGeneratedAttribute]
private string <MessageId>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ReplyToAddress>k__BackingField;
    private ConcurrentQueue`1<string> forwardedMessages;
    private ConcurrentQueue`1<RepliedMessage`1<object>> repliedMessages;
    public RepliedMessage`1[] RepliedMessages { get; }
    public String[] ForwardedMessages { get; }
    public IDictionary`2<string, string> MessageHeaders { get; public set; }
    public string MessageId { get; public set; }
    public string ReplyToAddress { get; public set; }
    private IReadOnlyDictionary`2<string, string> NServiceBus.IMessageProcessingContext.MessageHeaders { get; }
    public TestableMessageProcessingContext(IMessageCreator messageCreator);
    public virtual RepliedMessage`1[] get_RepliedMessages();
    public virtual String[] get_ForwardedMessages();
    [CompilerGeneratedAttribute]
public IDictionary`2<string, string> get_MessageHeaders();
    [CompilerGeneratedAttribute]
public void set_MessageHeaders(IDictionary`2<string, string> value);
    public virtual Task Reply(object message, ReplyOptions options);
    public virtual Task Reply(Action`1<T> messageConstructor, ReplyOptions options);
    public virtual Task ForwardCurrentMessageTo(string destination);
    [CompilerGeneratedAttribute]
public sealed virtual string get_MessageId();
    [CompilerGeneratedAttribute]
public void set_MessageId(string value);
    [CompilerGeneratedAttribute]
public sealed virtual string get_ReplyToAddress();
    [CompilerGeneratedAttribute]
public void set_ReplyToAddress(string value);
    private sealed virtual override IReadOnlyDictionary`2<string, string> NServiceBus.IMessageProcessingContext.get_MessageHeaders();
}
public class NServiceBus.Testing.TestableMessageSession : object {
    protected IMessageCreator messageCreator;
    private ConcurrentQueue`1<Subscription> subscriptions;
    private ConcurrentQueue`1<Unsubscription> unsubscriptions;
    private ConcurrentQueue`1<PublishedMessage`1<object>> publishedMessages;
    private ConcurrentQueue`1<SentMessage`1<object>> sentMessages;
    private ConcurrentQueue`1<TimeoutMessage`1<object>> timeoutMessages;
    public TimeoutMessage`1[] TimeoutMessages { get; }
    public SentMessage`1[] SentMessages { get; }
    public PublishedMessage`1[] PublishedMessages { get; }
    public Subscription[] Subscriptions { get; }
    public Unsubscription[] Unsubscription { get; }
    public TestableMessageSession(IMessageCreator messageCreator);
    public TimeoutMessage`1[] get_TimeoutMessages();
    public virtual SentMessage`1[] get_SentMessages();
    public virtual PublishedMessage`1[] get_PublishedMessages();
    public virtual Subscription[] get_Subscriptions();
    public virtual Unsubscription[] get_Unsubscription();
    public virtual Task Subscribe(Type eventType, SubscribeOptions options, CancellationToken cancellationToken);
    public virtual Task Unsubscribe(Type eventType, UnsubscribeOptions options, CancellationToken cancellationToken);
    public virtual Task Send(object message, SendOptions sendOptions, CancellationToken cancellationToken);
    public virtual Task Send(Action`1<T> messageConstructor, SendOptions sendOptions, CancellationToken cancellationToken);
    public virtual Task Publish(object message, PublishOptions publishOptions, CancellationToken cancellationToken);
    public virtual Task Publish(Action`1<T> messageConstructor, PublishOptions publishOptions, CancellationToken cancellationToken);
    private static TimeoutMessage`1<object> GetTimeoutMessage(object message, SendOptions options);
}
public class NServiceBus.Testing.TestableOutgoingContext : TestablePipelineContext {
    [CompilerGeneratedAttribute]
private IServiceCollection <ServiceCollection>k__BackingField;
    [CompilerGeneratedAttribute]
private string <MessageId>k__BackingField;
    [CompilerGeneratedAttribute]
private Dictionary`2<string, string> <Headers>k__BackingField;
    public IServiceCollection ServiceCollection { get; public set; }
    private IServiceProvider NServiceBus.Pipeline.IBehaviorContext.Builder { get; }
    public string MessageId { get; public set; }
    public Dictionary`2<string, string> Headers { get; public set; }
    [CompilerGeneratedAttribute]
public IServiceCollection get_ServiceCollection();
    [CompilerGeneratedAttribute]
public void set_ServiceCollection(IServiceCollection value);
    private sealed virtual override IServiceProvider NServiceBus.Pipeline.IBehaviorContext.get_Builder();
    [CompilerGeneratedAttribute]
public sealed virtual string get_MessageId();
    [CompilerGeneratedAttribute]
public void set_MessageId(string value);
    [CompilerGeneratedAttribute]
public sealed virtual Dictionary`2<string, string> get_Headers();
    [CompilerGeneratedAttribute]
public void set_Headers(Dictionary`2<string, string> value);
    protected virtual IServiceProvider GetBuilder();
}
public class NServiceBus.Testing.TestableOutgoingLogicalMessageContext : TestableOutgoingContext {
    [CompilerGeneratedAttribute]
private OutgoingLogicalMessage <Message>k__BackingField;
    [CompilerGeneratedAttribute]
private IReadOnlyCollection`1<RoutingStrategy> <RoutingStrategies>k__BackingField;
    public OutgoingLogicalMessage Message { get; public set; }
    public IReadOnlyCollection`1<RoutingStrategy> RoutingStrategies { get; public set; }
    public virtual void UpdateMessage(object newInstance);
    [CompilerGeneratedAttribute]
public sealed virtual OutgoingLogicalMessage get_Message();
    [CompilerGeneratedAttribute]
public void set_Message(OutgoingLogicalMessage value);
    [CompilerGeneratedAttribute]
public sealed virtual IReadOnlyCollection`1<RoutingStrategy> get_RoutingStrategies();
    [CompilerGeneratedAttribute]
public void set_RoutingStrategies(IReadOnlyCollection`1<RoutingStrategy> value);
}
public class NServiceBus.Testing.TestableOutgoingPhysicalMessageContext : TestableOutgoingContext {
    [CompilerGeneratedAttribute]
private ReadOnlyMemory`1<byte> <Body>k__BackingField;
    [CompilerGeneratedAttribute]
private IReadOnlyCollection`1<RoutingStrategy> <RoutingStrategies>k__BackingField;
    public ReadOnlyMemory`1<byte> Body { get; public set; }
    public IReadOnlyCollection`1<RoutingStrategy> RoutingStrategies { get; public set; }
    public virtual void UpdateMessage(ReadOnlyMemory`1<byte> body);
    [CompilerGeneratedAttribute]
public sealed virtual ReadOnlyMemory`1<byte> get_Body();
    [CompilerGeneratedAttribute]
public void set_Body(ReadOnlyMemory`1<byte> value);
    [CompilerGeneratedAttribute]
public sealed virtual IReadOnlyCollection`1<RoutingStrategy> get_RoutingStrategies();
    [CompilerGeneratedAttribute]
public void set_RoutingStrategies(IReadOnlyCollection`1<RoutingStrategy> value);
}
public class NServiceBus.Testing.TestableOutgoingPublishContext : TestableOutgoingContext {
    [CompilerGeneratedAttribute]
private OutgoingLogicalMessage <Message>k__BackingField;
    public OutgoingLogicalMessage Message { get; public set; }
    [CompilerGeneratedAttribute]
public sealed virtual OutgoingLogicalMessage get_Message();
    [CompilerGeneratedAttribute]
public void set_Message(OutgoingLogicalMessage value);
}
public class NServiceBus.Testing.TestableOutgoingReplyContext : TestableOutgoingContext {
    [CompilerGeneratedAttribute]
private OutgoingLogicalMessage <Message>k__BackingField;
    public OutgoingLogicalMessage Message { get; public set; }
    [CompilerGeneratedAttribute]
public sealed virtual OutgoingLogicalMessage get_Message();
    [CompilerGeneratedAttribute]
public void set_Message(OutgoingLogicalMessage value);
}
public class NServiceBus.Testing.TestableOutgoingSendContext : TestableOutgoingContext {
    [CompilerGeneratedAttribute]
private OutgoingLogicalMessage <Message>k__BackingField;
    public OutgoingLogicalMessage Message { get; public set; }
    [CompilerGeneratedAttribute]
public sealed virtual OutgoingLogicalMessage get_Message();
    [CompilerGeneratedAttribute]
public void set_Message(OutgoingLogicalMessage value);
}
public class NServiceBus.Testing.TestablePipelineContext : object {
    [CompilerGeneratedAttribute]
private ContextBag <Extensions>k__BackingField;
    [CompilerGeneratedAttribute]
private CancellationToken <CancellationToken>k__BackingField;
    protected IMessageCreator messageCreator;
    private ConcurrentQueue`1<PublishedMessage`1<object>> publishedMessages;
    private ConcurrentQueue`1<SentMessage`1<object>> sentMessages;
    private ConcurrentQueue`1<TimeoutMessage`1<object>> timeoutMessages;
    public TimeoutMessage`1[] TimeoutMessages { get; }
    public SentMessage`1[] SentMessages { get; }
    public PublishedMessage`1[] PublishedMessages { get; }
    public ContextBag Extensions { get; public set; }
    public CancellationToken CancellationToken { get; public set; }
    public TestablePipelineContext(IMessageCreator messageCreator);
    public TimeoutMessage`1[] get_TimeoutMessages();
    public virtual SentMessage`1[] get_SentMessages();
    public virtual PublishedMessage`1[] get_PublishedMessages();
    [CompilerGeneratedAttribute]
public sealed virtual ContextBag get_Extensions();
    [CompilerGeneratedAttribute]
public void set_Extensions(ContextBag value);
    [CompilerGeneratedAttribute]
public sealed virtual CancellationToken get_CancellationToken();
    [CompilerGeneratedAttribute]
public void set_CancellationToken(CancellationToken value);
    public virtual Task Send(object message, SendOptions options);
    public virtual Task Send(Action`1<T> messageConstructor, SendOptions options);
    public virtual Task Publish(object message, PublishOptions options);
    public virtual Task Publish(Action`1<T> messageConstructor, PublishOptions publishOptions);
    private static TimeoutMessage`1<object> GetTimeoutMessage(object message, SendOptions options);
}
public class NServiceBus.Testing.TestableRecoverabilityContext : TestableBehaviorContext {
    [CompilerGeneratedAttribute]
private IncomingMessage <FailedMessage>k__BackingField;
    [CompilerGeneratedAttribute]
private Exception <Exception>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ReceiveAddress>k__BackingField;
    [CompilerGeneratedAttribute]
private int <ImmediateProcessingFailures>k__BackingField;
    [CompilerGeneratedAttribute]
private int <DelayedDeliveriesPerformed>k__BackingField;
    [CompilerGeneratedAttribute]
private RecoverabilityConfig <RecoverabilityConfiguration>k__BackingField;
    [CompilerGeneratedAttribute]
private RecoverabilityAction <RecoverabilityAction>k__BackingField;
    [CompilerGeneratedAttribute]
private Dictionary`2<string, string> <Metadata>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsLocked>k__BackingField;
    public IncomingMessage FailedMessage { get; public set; }
    public Exception Exception { get; public set; }
    public string ReceiveAddress { get; public set; }
    public int ImmediateProcessingFailures { get; public set; }
    public int DelayedDeliveriesPerformed { get; public set; }
    private IReadOnlyDictionary`2<string, string> NServiceBus.Pipeline.IRecoverabilityActionContext.Metadata { get; }
    public RecoverabilityConfig RecoverabilityConfiguration { get; public set; }
    public RecoverabilityAction RecoverabilityAction { get; public set; }
    public Dictionary`2<string, string> Metadata { get; public set; }
    public bool IsLocked { get; private set; }
    [CompilerGeneratedAttribute]
public sealed virtual IncomingMessage get_FailedMessage();
    [CompilerGeneratedAttribute]
public void set_FailedMessage(IncomingMessage value);
    [CompilerGeneratedAttribute]
public sealed virtual Exception get_Exception();
    [CompilerGeneratedAttribute]
public void set_Exception(Exception value);
    [CompilerGeneratedAttribute]
public sealed virtual string get_ReceiveAddress();
    [CompilerGeneratedAttribute]
public void set_ReceiveAddress(string value);
    [CompilerGeneratedAttribute]
public sealed virtual int get_ImmediateProcessingFailures();
    [CompilerGeneratedAttribute]
public void set_ImmediateProcessingFailures(int value);
    [CompilerGeneratedAttribute]
public sealed virtual int get_DelayedDeliveriesPerformed();
    [CompilerGeneratedAttribute]
public void set_DelayedDeliveriesPerformed(int value);
    private sealed virtual override IReadOnlyDictionary`2<string, string> NServiceBus.Pipeline.IRecoverabilityActionContext.get_Metadata();
    [CompilerGeneratedAttribute]
public sealed virtual RecoverabilityConfig get_RecoverabilityConfiguration();
    [CompilerGeneratedAttribute]
public void set_RecoverabilityConfiguration(RecoverabilityConfig value);
    [CompilerGeneratedAttribute]
public sealed virtual RecoverabilityAction get_RecoverabilityAction();
    [CompilerGeneratedAttribute]
public sealed virtual void set_RecoverabilityAction(RecoverabilityAction value);
    [CompilerGeneratedAttribute]
public sealed virtual Dictionary`2<string, string> get_Metadata();
    [CompilerGeneratedAttribute]
public void set_Metadata(Dictionary`2<string, string> value);
    public sealed virtual IRecoverabilityActionContext PreventChanges();
    [CompilerGeneratedAttribute]
public bool get_IsLocked();
    [CompilerGeneratedAttribute]
private void set_IsLocked(bool value);
}
public class NServiceBus.Testing.TestableRoutingContext : TestableBehaviorContext {
    [CompilerGeneratedAttribute]
private OutgoingMessage <Message>k__BackingField;
    [CompilerGeneratedAttribute]
private IReadOnlyCollection`1<RoutingStrategy> <RoutingStrategies>k__BackingField;
    public OutgoingMessage Message { get; public set; }
    public IReadOnlyCollection`1<RoutingStrategy> RoutingStrategies { get; public set; }
    [CompilerGeneratedAttribute]
public sealed virtual OutgoingMessage get_Message();
    [CompilerGeneratedAttribute]
public void set_Message(OutgoingMessage value);
    [CompilerGeneratedAttribute]
public sealed virtual IReadOnlyCollection`1<RoutingStrategy> get_RoutingStrategies();
    [CompilerGeneratedAttribute]
public sealed virtual void set_RoutingStrategies(IReadOnlyCollection`1<RoutingStrategy> value);
}
[DebuggerDisplayAttribute("TestableSaga for {typeof(TSaga).FullName}")]
public class NServiceBus.Testing.TestableSaga`2 : object {
    private Func`1<TSaga> sagaFactory;
    private Queue`1<QueuedSagaMessage> queue;
    private ISagaPersister persister;
    private SagaMapper sagaMapper;
    [TupleElementNamesAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private List`1<ValueTuple`2<DateTime, OutgoingMessage`2<object, SendOptions>>> storedTimeouts;
    private Dictionary`2<Type, List`1<ValueTuple`2<Type, Func`2<object, object>>>> replySimulators;
    [CompilerGeneratedAttribute]
private DateTime <CurrentTime>k__BackingField;
    public DateTime CurrentTime { get; private set; }
    public bool HasQueuedMessages { get; }
    public int QueueLength { get; }
    public TestableSaga`2(Func`1<TSaga> sagaFactory, Nullable`1<DateTime> initialCurrentTime);
    [CompilerGeneratedAttribute]
public DateTime get_CurrentTime();
    [CompilerGeneratedAttribute]
private void set_CurrentTime(DateTime value);
    public bool get_HasQueuedMessages();
    public int get_QueueLength();
    public QueuedSagaMessage QueuePeek();
    public Task`1<HandleResult<TSaga, TSagaData>> Handle(TMessage message, TestableMessageHandlerContext context, IReadOnlyDictionary`2<string, string> messageHeaders);
    public Task`1<HandleResult<TSaga, TSagaData>> HandleReply(Guid sagaId, TMessage message, TestableMessageHandlerContext context, IReadOnlyDictionary`2<string, string> messageHeaders);
    public Task`1<HandleResult<TSaga, TSagaData>> HandleQueuedMessage(TestableMessageHandlerContext context);
    public void SimulateReply(Func`2<TSagaMessage, TReplyMessage> simulateReply);
    [AsyncStateMachineAttribute("NServiceBus.Testing.TestableSaga`2/<InnerHandle>d__20")]
private Task`1<HandleResult<TSaga, TSagaData>> InnerHandle(QueuedSagaMessage message, string handleMethodName, TestableMessageHandlerContext context);
    [AsyncStateMachineAttribute("NServiceBus.Testing.TestableSaga`2/<AdvanceTime>d__21")]
public Task`1<HandleResult[]> AdvanceTime(TimeSpan timeToAdvance, Func`2<OutgoingMessage`2<object, SendOptions>, TestableMessageHandlerContext> provideContext, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("NServiceBus.Testing.TestableSaga`2/<HandleTimeout>d__22")]
private Task`1<HandleResult<TSaga, TSagaData>> HandleTimeout(OutgoingMessage`2<object, SendOptions> timeoutMessage, TestableMessageHandlerContext context);
    [AsyncStateMachineAttribute("NServiceBus.Testing.TestableSaga`2/<LoadSagaData>d__23")]
private Task`1<SagaLoadResult<TSaga, TSagaData>> LoadSagaData(QueuedSagaMessage message, ISynchronizedStorageSession session, TestableMessageHandlerContext context);
    [AsyncStateMachineAttribute("NServiceBus.Testing.TestableSaga`2/<SaveSagaData>d__24")]
private Task SaveSagaData(TSaga saga, bool isNew, object mappedValue, ISynchronizedStorageSession session, ContextBag contextBag, CancellationToken cancellationToken);
    private void EnqueueMessagesAndTimeouts(TestableMessageHandlerContext context, Guid sagaId);
}
public class NServiceBus.Testing.TestableSubscribeContext : TestableBehaviorContext {
    [CompilerGeneratedAttribute]
private Type <EventType>k__BackingField;
    [CompilerGeneratedAttribute]
private Type[] <EventTypes>k__BackingField;
    public Type EventType { get; public set; }
    public Type[] EventTypes { get; public set; }
    [CompilerGeneratedAttribute]
public Type get_EventType();
    [CompilerGeneratedAttribute]
public void set_EventType(Type value);
    [CompilerGeneratedAttribute]
public sealed virtual Type[] get_EventTypes();
    [CompilerGeneratedAttribute]
public void set_EventTypes(Type[] value);
}
public class NServiceBus.Testing.TestableTransportReceiveContext : TestableBehaviorContext {
    [CompilerGeneratedAttribute]
private bool <ReceiveOperationAborted>k__BackingField;
    [CompilerGeneratedAttribute]
private IncomingMessage <Message>k__BackingField;
    public bool ReceiveOperationAborted { get; public set; }
    public IncomingMessage Message { get; public set; }
    [CompilerGeneratedAttribute]
public bool get_ReceiveOperationAborted();
    [CompilerGeneratedAttribute]
public void set_ReceiveOperationAborted(bool value);
    public virtual void AbortReceiveOperation();
    [CompilerGeneratedAttribute]
public sealed virtual IncomingMessage get_Message();
    [CompilerGeneratedAttribute]
public void set_Message(IncomingMessage value);
}
public class NServiceBus.Testing.TestableUnsubscribeContext : TestableBehaviorContext {
    [CompilerGeneratedAttribute]
private Type <EventType>k__BackingField;
    public Type EventType { get; public set; }
    [CompilerGeneratedAttribute]
public sealed virtual Type get_EventType();
    [CompilerGeneratedAttribute]
public void set_EventType(Type value);
}
[ExtensionAttribute]
public static class NServiceBus.Testing.TestingExtensions : object {
    [ExtensionAttribute]
public static TMessage FindPublishedMessage(TestablePipelineContext context);
    [ExtensionAttribute]
public static TMessage FindPublishedMessage(TestableMessageSession context);
    [ExtensionAttribute]
public static TMessage FindTimeoutMessage(TestablePipelineContext context);
    [ExtensionAttribute]
public static TMessage FindTimeoutMessage(TestableMessageSession context);
    [ExtensionAttribute]
public static TMessage FindSentMessage(TestableMessageSession context);
    [ExtensionAttribute]
public static TMessage FindSentMessage(TestablePipelineContext context);
    [ExtensionAttribute]
public static TMessage FindReplyMessage(TestableMessageProcessingContext context);
}
public class NServiceBus.Testing.TestingLoggerFactory : LoggingFactoryDefinition {
    internal static AsyncLocal`1<Tuple`2<TextWriter, LogLevel>> currentScope;
    internal static Lazy`1<LogLevel> lazyLevel;
    internal static Lazy`1<TextWriter> lazyWriter;
    private static DefaultTestingLoggerFactory testingLoggerFactory;
    private static TestingLoggerFactory();
    public void Level(LogLevel level);
    public void WriteTo(TextWriter writer);
    public IDisposable BeginScope(TextWriter writer, LogLevel level);
    protected virtual ILoggerFactory GetLoggingFactory();
}
internal class NServiceBus.Testing.TextWriterLogger : object {
    private TextWriter writer;
    public TextWriterLogger(TextWriter textWriter);
    public void Write(string message);
}
public class NServiceBus.Testing.TimeoutMessage`1 : OutgoingMessage`2<TMessage, SendOptions> {
    [CompilerGeneratedAttribute]
private Nullable`1<TimeSpan> <Within>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<DateTimeOffset> <At>k__BackingField;
    public Nullable`1<TimeSpan> Within { get; }
    public Nullable`1<DateTimeOffset> At { get; }
    public TimeoutMessage`1(TMessage message, SendOptions options, TimeSpan within);
    public TimeoutMessage`1(TMessage message, SendOptions options, DateTimeOffset at);
    [CompilerGeneratedAttribute]
public Nullable`1<TimeSpan> get_Within();
    [CompilerGeneratedAttribute]
public Nullable`1<DateTimeOffset> get_At();
}
public class NServiceBus.Testing.Unsubscription : OutgoingMessage`2<Type, UnsubscribeOptions> {
    public Unsubscription(Type message, UnsubscribeOptions options);
}
internal class NServiceBusTesting_ProcessedByFody : object {
    internal static string FodyVersion;
    internal static string Obsolete;
}
[ExtensionAttribute]
internal static class System.ArrayExtensions.ArrayExtensions : object {
    [ExtensionAttribute]
public static void ForEach(Array array, Action`2<Array, Int32[]> action);
}
internal class System.ArrayExtensions.ArrayTraverse : object {
    public Int32[] Position;
    private Int32[] maxLengths;
    public ArrayTraverse(Array array);
    public bool Step();
}
[ExtensionAttribute]
internal static class System.ObjectExtensions : object {
    private static MethodInfo CloneMethod;
    private static ObjectExtensions();
    [ExtensionAttribute]
public static bool IsPrimitive(Type type);
    [ExtensionAttribute]
public static object DeepCopy(object originalObject);
    private static object InternalCopy(object originalObject, IDictionary`2<object, object> visited);
    private static void RecursiveCopyBaseTypePrivateFields(object originalObject, IDictionary`2<object, object> visited, object cloneObject, Type typeToReflect);
    private static void CopyFields(object originalObject, IDictionary`2<object, object> visited, object cloneObject, Type typeToReflect, BindingFlags bindingFlags, Func`2<FieldInfo, bool> filter);
    [ExtensionAttribute]
public static T DeepCopy(T original);
}
internal class System.ReferenceEqualityComparer : EqualityComparer`1<object> {
    public virtual bool Equals(object x, object y);
    public virtual int GetHashCode(object obj);
}
