public class NServiceBus.AzureServiceBusTransport : TransportDefinition {
    [CompilerGeneratedAttribute]
private TopicTopology <Topology>k__BackingField;
    private int entityMaximumSize;
    [CompilerGeneratedAttribute]
private bool <EnablePartitioning>k__BackingField;
    private int prefetchMultiplier;
    private Nullable`1<int> prefetchCount;
    private TimeSpan timeToWaitBeforeTriggeringCircuitBreaker;
    private Nullable`1<TimeSpan> maxAutoLockRenewalDuration;
    private Func`2<string, string> subscriptionNamingConvention;
    private Func`2<Type, string> subscriptionRuleNamingConvention;
    [CompilerGeneratedAttribute]
private bool <UseWebSockets>k__BackingField;
    private ServiceBusRetryOptions retryPolicy;
    private IWebProxy webProxy;
    [CompilerGeneratedAttribute]
private string <ConnectionString>k__BackingField;
    [CompilerGeneratedAttribute]
private string <FullyQualifiedNamespace>k__BackingField;
    [CompilerGeneratedAttribute]
private TokenCredential <TokenCredential>k__BackingField;
    public TopicTopology Topology { get; public set; }
    public int EntityMaximumSize { get; public set; }
    public bool EnablePartitioning { get; public set; }
    public int PrefetchMultiplier { get; public set; }
    public Nullable`1<int> PrefetchCount { get; public set; }
    public TimeSpan TimeToWaitBeforeTriggeringCircuitBreaker { get; public set; }
    public Nullable`1<TimeSpan> MaxAutoLockRenewalDuration { get; public set; }
    public Func`2<string, string> SubscriptionNamingConvention { get; public set; }
    public Func`2<Type, string> SubscriptionRuleNamingConvention { get; public set; }
    public bool UseWebSockets { get; public set; }
    public ServiceBusRetryOptions RetryPolicyOptions { get; public set; }
    public IWebProxy WebProxy { get; public set; }
    internal string ConnectionString { get; internal set; }
    internal string FullyQualifiedNamespace { get; internal set; }
    internal TokenCredential TokenCredential { get; internal set; }
    [ObsoleteAttribute("It is possible to represent the publish and subscribe topic separately by specifying a topology. Use `Topology` instead. The member currently throws a NotImplementedException. Will be removed in version 5.0.0.", "True")]
[EditorBrowsableAttribute("1")]
public string TopicName { get; public set; }
    public AzureServiceBusTransport(string connectionString);
    public AzureServiceBusTransport(string fullyQualifiedNamespace, TokenCredential tokenCredential);
    [AsyncStateMachineAttribute("NServiceBus.AzureServiceBusTransport/<Initialize>d__3")]
public virtual Task`1<TransportInfrastructure> Initialize(HostSettings hostSettings, ReceiveSettings[] receivers, String[] sendingAddresses, CancellationToken cancellationToken);
    private void ApplyRetryPolicyOptionsIfNeeded(ServiceBusClientOptions options);
    private void ApplyWebProxyIfNeeded(ServiceBusClientOptions options);
    public virtual IReadOnlyCollection`1<TransportTransactionMode> GetSupportedTransactionModes();
    [CompilerGeneratedAttribute]
public TopicTopology get_Topology();
    [CompilerGeneratedAttribute]
public void set_Topology(TopicTopology value);
    public int get_EntityMaximumSize();
    public void set_EntityMaximumSize(int value);
    [CompilerGeneratedAttribute]
public bool get_EnablePartitioning();
    [CompilerGeneratedAttribute]
public void set_EnablePartitioning(bool value);
    public int get_PrefetchMultiplier();
    public void set_PrefetchMultiplier(int value);
    public Nullable`1<int> get_PrefetchCount();
    public void set_PrefetchCount(Nullable`1<int> value);
    public TimeSpan get_TimeToWaitBeforeTriggeringCircuitBreaker();
    public void set_TimeToWaitBeforeTriggeringCircuitBreaker(TimeSpan value);
    public Nullable`1<TimeSpan> get_MaxAutoLockRenewalDuration();
    public void set_MaxAutoLockRenewalDuration(Nullable`1<TimeSpan> value);
    public Func`2<string, string> get_SubscriptionNamingConvention();
    public void set_SubscriptionNamingConvention(Func`2<string, string> value);
    public Func`2<Type, string> get_SubscriptionRuleNamingConvention();
    public void set_SubscriptionRuleNamingConvention(Func`2<Type, string> value);
    [CompilerGeneratedAttribute]
public bool get_UseWebSockets();
    [CompilerGeneratedAttribute]
public void set_UseWebSockets(bool value);
    public ServiceBusRetryOptions get_RetryPolicyOptions();
    public void set_RetryPolicyOptions(ServiceBusRetryOptions value);
    public IWebProxy get_WebProxy();
    public void set_WebProxy(IWebProxy value);
    [CompilerGeneratedAttribute]
internal string get_ConnectionString();
    [CompilerGeneratedAttribute]
internal void set_ConnectionString(string value);
    [CompilerGeneratedAttribute]
internal string get_FullyQualifiedNamespace();
    [CompilerGeneratedAttribute]
internal void set_FullyQualifiedNamespace(string value);
    [CompilerGeneratedAttribute]
internal TokenCredential get_TokenCredential();
    [CompilerGeneratedAttribute]
internal void set_TokenCredential(TokenCredential value);
    public string get_TopicName();
    public void set_TopicName(string value);
}
[ExtensionAttribute]
public static class NServiceBus.AzureServiceBusTransportSettingsExtensions : object {
    [ExtensionAttribute]
[PreObsoleteAttribute("https://github.com/Particular/NServiceBus/issues/6811")]
public static TransportExtensions`1<AzureServiceBusTransport> UseTransport(EndpointConfiguration endpointConfiguration);
    [ExtensionAttribute]
[PreObsoleteAttribute("https://github.com/Particular/NServiceBus/issues/6811")]
public static TransportExtensions`1<AzureServiceBusTransport> ConnectionString(TransportExtensions`1<AzureServiceBusTransport> transportExtensions, string connectionString);
    [ExtensionAttribute]
[PreObsoleteAttribute("https://github.com/Particular/NServiceBus/issues/6811")]
public static TransportExtensions`1<AzureServiceBusTransport> ConnectionString(TransportExtensions`1<AzureServiceBusTransport> transportExtensions, Func`1<string> connectionString);
    [ExtensionAttribute]
[PreObsoleteAttribute("https://github.com/Particular/NServiceBus/issues/6811")]
public static TransportExtensions`1<AzureServiceBusTransport> TopicName(TransportExtensions`1<AzureServiceBusTransport> transportExtensions, string topicName);
    [ExtensionAttribute]
[PreObsoleteAttribute("https://github.com/Particular/NServiceBus/issues/6811")]
public static TransportExtensions`1<AzureServiceBusTransport> EntityMaximumSize(TransportExtensions`1<AzureServiceBusTransport> transportExtensions, int maximumSizeInGB);
    [ExtensionAttribute]
[PreObsoleteAttribute("https://github.com/Particular/NServiceBus/issues/6811")]
public static TransportExtensions`1<AzureServiceBusTransport> EnablePartitioning(TransportExtensions`1<AzureServiceBusTransport> transportExtensions);
    [ExtensionAttribute]
[PreObsoleteAttribute("https://github.com/Particular/NServiceBus/issues/6811")]
public static TransportExtensions`1<AzureServiceBusTransport> PrefetchMultiplier(TransportExtensions`1<AzureServiceBusTransport> transportExtensions, int prefetchMultiplier);
    [ExtensionAttribute]
[PreObsoleteAttribute("https://github.com/Particular/NServiceBus/issues/6811")]
public static TransportExtensions`1<AzureServiceBusTransport> PrefetchCount(TransportExtensions`1<AzureServiceBusTransport> transportExtensions, int prefetchCount);
    [ExtensionAttribute]
[PreObsoleteAttribute("https://github.com/Particular/NServiceBus/issues/6811")]
public static TransportExtensions`1<AzureServiceBusTransport> TimeToWaitBeforeTriggeringCircuitBreaker(TransportExtensions`1<AzureServiceBusTransport> transportExtensions, TimeSpan timeToWait);
    [ExtensionAttribute]
[PreObsoleteAttribute("https://github.com/Particular/NServiceBus/issues/6811")]
public static TransportExtensions`1<AzureServiceBusTransport> SubscriptionNamingConvention(TransportExtensions`1<AzureServiceBusTransport> transportExtensions, Func`2<string, string> subscriptionNamingConvention);
    [ExtensionAttribute]
[PreObsoleteAttribute("https://github.com/Particular/NServiceBus/issues/6811")]
public static TransportExtensions`1<AzureServiceBusTransport> SubscriptionRuleNamingConvention(TransportExtensions`1<AzureServiceBusTransport> transportExtensions, Func`2<Type, string> subscriptionRuleNamingConvention);
    [ExtensionAttribute]
[PreObsoleteAttribute("https://github.com/Particular/NServiceBus/issues/6811")]
public static TransportExtensions`1<AzureServiceBusTransport> UseWebSockets(TransportExtensions`1<AzureServiceBusTransport> transportExtensions, IWebProxy webProxy);
    [ExtensionAttribute]
[PreObsoleteAttribute("https://github.com/Particular/NServiceBus/issues/6811")]
public static TransportExtensions`1<AzureServiceBusTransport> CustomRetryPolicy(TransportExtensions`1<AzureServiceBusTransport> transportExtensions, ServiceBusRetryOptions retryPolicy);
    [ExtensionAttribute]
[PreObsoleteAttribute("https://github.com/Particular/NServiceBus/issues/6811")]
public static TransportExtensions`1<AzureServiceBusTransport> CustomTokenCredential(TransportExtensions`1<AzureServiceBusTransport> transportExtensions, string fullyQualifiedNamespace, TokenCredential tokenCredential);
    [ExtensionAttribute]
[PreObsoleteAttribute("https://github.com/Particular/NServiceBus/issues/6811")]
public static TransportExtensions`1<AzureServiceBusTransport> MaxAutoLockRenewalDuration(TransportExtensions`1<AzureServiceBusTransport> transportExtensions, TimeSpan maximumAutoLockRenewalDuration);
}
[ExtensionAttribute]
public static class NServiceBus.CustomizeNativeMessageExtensions : object {
    [ExtensionAttribute]
public static void CustomizeNativeMessage(ExtendableOptions options, Action`1<ServiceBusMessage> customization);
}
[ExtensionAttribute]
internal static class NServiceBus.ExceptionExtensions : object {
    [ExtensionAttribute]
public static bool IsCausedBy(Exception ex, CancellationToken cancellationToken);
}
internal class NServiceBus.NativeMessageCustomizationBehavior : Behavior`1<IRoutingContext> {
    private bool isOutboxEnabled;
    internal static string CustomizationKey;
    public NativeMessageCustomizationBehavior(bool isOutboxEnabled);
    public virtual Task Invoke(IRoutingContext context, Func`1<Task> next);
}
internal class NServiceBus.NativeMessageCustomizationFeature : Feature {
    protected virtual void Setup(FeatureConfigurationContext context);
}
internal class NServiceBus.NativeMessageCustomizer : object {
    private ConcurrentDictionary`2<string, Action`1<ServiceBusMessage>> customizations;
    public ConcurrentDictionary`2<string, Action`1<ServiceBusMessage>> Customizations { get; }
    public ConcurrentDictionary`2<string, Action`1<ServiceBusMessage>> get_Customizations();
}
[AttributeUsageAttribute("32767")]
internal class NServiceBus.PreObsoleteAttribute : Attribute {
    [CompilerGeneratedAttribute]
private string <ContextUrl>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ReplacementTypeOrMember>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Message>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Note>k__BackingField;
    public string ContextUrl { get; }
    public string ReplacementTypeOrMember { get; public set; }
    public string Message { get; public set; }
    public string Note { get; public set; }
    public PreObsoleteAttribute(string contextUrl);
    [CompilerGeneratedAttribute]
public string get_ContextUrl();
    [CompilerGeneratedAttribute]
public string get_ReplacementTypeOrMember();
    [CompilerGeneratedAttribute]
public void set_ReplacementTypeOrMember(string value);
    [CompilerGeneratedAttribute]
public string get_Message();
    [CompilerGeneratedAttribute]
public void set_Message(string value);
    [CompilerGeneratedAttribute]
public string get_Note();
    [CompilerGeneratedAttribute]
public void set_Note(string value);
}
[ExtensionAttribute]
public static class NServiceBus.Testing.TestableCustomizeNativeMessageExtensions : object {
    [ExtensionAttribute]
public static Action`1<ServiceBusMessage> GetNativeMessageCustomization(ExtendableOptions options);
}
[IsReadOnlyAttribute]
public class NServiceBus.TopicTopology : ValueType {
    [CompilerGeneratedAttribute]
private string <TopicToPublishTo>k__BackingField;
    [CompilerGeneratedAttribute]
private string <TopicToSubscribeOn>k__BackingField;
    public string TopicToPublishTo { get; }
    public string TopicToSubscribeOn { get; }
    public bool IsHierarchy { get; }
    public static TopicTopology DefaultBundle { get; }
    private TopicTopology(string topicToPublishTo, string topicToSubscribeOn);
    [CompilerGeneratedAttribute]
public string get_TopicToPublishTo();
    [CompilerGeneratedAttribute]
public string get_TopicToSubscribeOn();
    public bool get_IsHierarchy();
    public static TopicTopology get_DefaultBundle();
    public static TopicTopology Single(string topicName);
    public static TopicTopology Hierarchy(string topicToPublishTo, string topicToSubscribeOn);
    public sealed virtual bool Equals(TopicTopology other);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
    public static bool op_Equality(TopicTopology left, TopicTopology right);
    public static bool op_Inequality(TopicTopology left, TopicTopology right);
}
internal class NServiceBus.Transport.AzureServiceBus.AzureServiceBusTransportInfrastructure : TransportInfrastructure {
    private AzureServiceBusTransport transportSettings;
    private MessageSenderRegistry messageSenderRegistry;
    private HostSettings hostSettings;
    private ServiceBusClient defaultClient;
    [TupleElementNamesAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private ValueTuple`2[] receiveSettingsAndClientPairs;
    public AzureServiceBusTransportInfrastructure(AzureServiceBusTransport transportSettings, HostSettings hostSettings, ValueTuple`2[] receiveSettingsAndClientPairs, ServiceBusClient defaultClient);
    private void WriteStartupDiagnostics(StartupDiagnosticEntries startupDiagnostic);
    private IMessageReceiver CreateMessagePump(ReceiveSettings receiveSettings, ServiceBusClient receiveClient);
    [AsyncStateMachineAttribute("NServiceBus.Transport.AzureServiceBus.AzureServiceBusTransportInfrastructure/<Shutdown>d__8")]
public virtual Task Shutdown(CancellationToken cancellationToken);
    public virtual string ToTransportAddress(QueueAddress address);
    [CompilerGeneratedAttribute]
private IMessageReceiver <.ctor>b__5_1(ValueTuple`2<ReceiveSettings, ServiceBusClient> settingsAndClient);
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
public class NServiceBus.Transport.AzureServiceBus.AzureServiceBusTransportTransaction : object {
    [NullableAttribute("1")]
[CompilerGeneratedAttribute]
private TransportTransaction <TransportTransaction>k__BackingField;
    [CompilerGeneratedAttribute]
private ServiceBusClient <ServiceBusClient>k__BackingField;
    [CompilerGeneratedAttribute]
private string <IncomingQueuePartitionKey>k__BackingField;
    private Nullable`1<TransactionOptions> transactionOptions;
    private CommittableTransaction transaction;
    private bool transactionIsInitialized;
    [NullableAttribute("1")]
public TransportTransaction TransportTransaction { get; }
    internal Transaction Transaction { get; }
    internal bool HasTransaction { get; }
    internal ServiceBusClient ServiceBusClient { get; }
    internal string IncomingQueuePartitionKey { get; }
    public AzureServiceBusTransportTransaction(TransportTransaction transportTransaction);
    [NullableContextAttribute("1")]
public AzureServiceBusTransportTransaction(ServiceBusClient serviceBusClient, string incomingQueuePartitionKey, TransactionOptions transactionOptions, TransportTransaction transportTransaction);
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
public TransportTransaction get_TransportTransaction();
    internal Transaction get_Transaction();
    internal bool get_HasTransaction();
    [CompilerGeneratedAttribute]
internal ServiceBusClient get_ServiceBusClient();
    [CompilerGeneratedAttribute]
internal string get_IncomingQueuePartitionKey();
    public void Commit();
    public sealed virtual void Dispose();
}
[ExtensionAttribute]
public static class NServiceBus.Transport.AzureServiceBus.AzureServiceBusTransportTransactionExtensions : object {
    [ExtensionAttribute]
public static TransactionScope ToTransactionScope(AzureServiceBusTransportTransaction azureServiceBusTransaction);
}
internal static class NServiceBus.Transport.AzureServiceBus.Configuration.TransportMessageHeaders : object {
    public static string TransportEncoding;
}
internal static class NServiceBus.Transport.AzureServiceBus.Guard : object {
    public static void TypeHasDefaultConstructor(Type type, string argumentName);
    public static void AgainstNull(string argumentName, object value);
    public static void AgainstNullAndEmpty(string argumentName, string value);
    public static void AgainstNullAndEmpty(string argumentName, ICollection value);
    public static void AgainstNegativeAndZero(string argumentName, int value);
    public static void AgainstNegative(string argumentName, int value);
    public static void AgainstNegativeAndZero(string argumentName, TimeSpan value);
    public static void AgainstNegative(string argumentName, TimeSpan value);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class NServiceBus.Transport.AzureServiceBus.MessageDispatcher : object {
    private static int MaxMessageThresholdForTransaction;
    private static ILog Log;
    private static Dictionary`2<string, List`1<IOutgoingTransportOperation>> emptyDestinationAndOperations;
    private MessageSenderRegistry messageSenderRegistry;
    private string topicName;
    public MessageDispatcher(MessageSenderRegistry messageSenderRegistry, string topicName);
    private static MessageDispatcher();
    [AsyncStateMachineAttribute("NServiceBus.Transport.AzureServiceBus.MessageDispatcher/<Dispatch>d__6")]
public sealed virtual Task Dispatch(TransportOperations outgoingMessages, TransportTransaction transaction, CancellationToken cancellationToken);
    private void AddBatchedOperationsTo(List`1<Task> dispatchTasks, Dictionary`2<string, List`1<IOutgoingTransportOperation>> transportOperationsPerDestination, TransportTransaction transportTransaction, AzureServiceBusTransportTransaction azureServiceBusTransportTransaction, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("NServiceBus.Transport.AzureServiceBus.MessageDispatcher/<DispatchBatchOrFallbackToIndividualSendsForDestination>d__8")]
private Task DispatchBatchOrFallbackToIndividualSendsForDestination(string destination, ServiceBusClient client, Transaction transaction, Queue`1<ServiceBusMessage> messagesToSend, CancellationToken cancellationToken);
    private void AddIsolatedOperationsTo(List`1<Task> dispatchTasks, Dictionary`2<string, List`1<IOutgoingTransportOperation>> transportOperationsPerDestination, TransportTransaction transportTransaction, AzureServiceBusTransportTransaction azureServiceBusTransportTransaction, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("NServiceBus.Transport.AzureServiceBus.MessageDispatcher/<DispatchForDestination>d__10")]
private Task DispatchForDestination(string destination, ServiceBusClient client, Transaction transaction, ServiceBusMessage message, CancellationToken cancellationToken);
}
[ExtensionAttribute]
internal static class NServiceBus.Transport.AzureServiceBus.MessageExtensions : object {
    private static DataContractSerializer Deserializer;
    private static MessageExtensions();
    [ExtensionAttribute]
public static Dictionary`2<string, string> GetNServiceBusHeaders(ServiceBusReceivedMessage message);
    [ExtensionAttribute]
public static string GetMessageId(ServiceBusReceivedMessage message);
    [ExtensionAttribute]
public static BinaryData GetBody(ServiceBusReceivedMessage message);
}
internal class NServiceBus.Transport.AzureServiceBus.MessagePump : object {
    private AzureServiceBusTransport transportSettings;
    private ReceiveSettings receiveSettings;
    private Action`3<string, Exception, CancellationToken> criticalErrorAction;
    private ServiceBusClient serviceBusClient;
    private FastConcurrentLru`2<string, bool> messagesToBeCompleted;
    private OnMessage onMessage;
    private OnError onError;
    private RepeatedFailuresOverTimeCircuitBreaker circuitBreaker;
    private CancellationTokenSource messageProcessingCancellationTokenSource;
    private ServiceBusProcessor processor;
    private static ILog Logger;
    private PushRuntimeSettings limitations;
    [CompilerGeneratedAttribute]
private ISubscriptionManager <Subscriptions>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Id>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ReceiveAddress>k__BackingField;
    private TransportTransactionMode TransactionMode { get; }
    public ISubscriptionManager Subscriptions { get; }
    public string Id { get; }
    public string ReceiveAddress { get; }
    public MessagePump(ServiceBusClient serviceBusClient, AzureServiceBusTransport transportSettings, string receiveAddress, ReceiveSettings receiveSettings, Action`3<string, Exception, CancellationToken> criticalErrorAction, SubscriptionManager subscriptionManager);
    private static MessagePump();
    public sealed virtual Task Initialize(PushRuntimeSettings limitations, OnMessage onMessage, OnError onError, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("NServiceBus.Transport.AzureServiceBus.MessagePump/<StartReceive>d__14")]
public sealed virtual Task StartReceive(CancellationToken cancellationToken);
    private TransportTransactionMode get_TransactionMode();
    private int CalculatePrefetchCount();
    [AsyncStateMachineAttribute("NServiceBus.Transport.AzureServiceBus.MessagePump/<OnProcessMessage>d__18")]
private Task OnProcessMessage(ProcessMessageEventArgs arg);
    [AsyncStateMachineAttribute("NServiceBus.Transport.AzureServiceBus.MessagePump/<OnProcessorError>d__19")]
private Task OnProcessorError(ProcessErrorEventArgs processErrorEventArgs);
    public sealed virtual Task ChangeConcurrency(PushRuntimeSettings newLimitations, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("NServiceBus.Transport.AzureServiceBus.MessagePump/<StopReceive>d__21")]
public sealed virtual Task StopReceive(CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("NServiceBus.Transport.AzureServiceBus.MessagePump/<ProcessMessage>d__22")]
private Task ProcessMessage(ServiceBusReceivedMessage message, ProcessMessageEventArgs processMessageEventArgs, string messageId, Dictionary`2<string, string> headers, BinaryData body, CancellationToken messageProcessingCancellationToken);
    private AzureServiceBusTransportTransaction CreateTransaction(string incomingQueuePartitionKey);
    [CompilerGeneratedAttribute]
public sealed virtual ISubscriptionManager get_Subscriptions();
    [CompilerGeneratedAttribute]
public sealed virtual string get_Id();
    [CompilerGeneratedAttribute]
public sealed virtual string get_ReceiveAddress();
    [CompilerGeneratedAttribute]
private void <StartReceive>b__14_0(Exception ex);
    [CompilerGeneratedAttribute]
private void <StartReceive>b__14_1();
    [CompilerGeneratedAttribute]
private void <StartReceive>b__14_2();
}
internal class NServiceBus.Transport.AzureServiceBus.MessageSenderRegistry : object {
    private ServiceBusClient defaultClient;
    [TupleElementNamesAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private ConcurrentDictionary`2<ValueTuple`2<string, ServiceBusClient>, Lazy`1<ServiceBusSender>> destinationToSenderMapping;
    public MessageSenderRegistry(ServiceBusClient defaultClient);
    public ServiceBusSender GetMessageSender(string destination, ServiceBusClient client);
    public Task Close(CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("NServiceBus.Transport.AzureServiceBus.MessageSenderRegistry/<<Close>g__CloseAndDispose|2_0>d")]
[CompilerGeneratedAttribute]
internal static Task <Close>g__CloseAndDispose|2_0(ServiceBusSender sender, CancellationToken cancellationToken);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class NServiceBus.Transport.AzureServiceBus.NamespacePermissions : object {
    private ServiceBusAdministrationClient adminClient;
    public NamespacePermissions(TokenCredential tokenCredential, string fullyQualifiedNamespace, string connectionString);
    [AsyncStateMachineAttribute("NServiceBus.Transport.AzureServiceBus.NamespacePermissions/<CanManage>d__2")]
public ValueTask`1<ServiceBusAdministrationClient> CanManage(CancellationToken cancellationToken);
}
[ExtensionAttribute]
internal static class NServiceBus.Transport.AzureServiceBus.OutgoingMessageExtensions : object {
    [ExtensionAttribute]
public static ServiceBusMessage ToAzureServiceBusMessage(OutgoingMessage outgoingMessage, DispatchProperties dispatchProperties, string incomingQueuePartitionKey);
    private static void ApplyDeliveryConstraints(ServiceBusMessage message, DispatchProperties dispatchProperties);
    private static void ApplyCorrelationId(ServiceBusMessage message, Dictionary`2<string, string> headers);
    private static void ApplyContentType(ServiceBusMessage message, Dictionary`2<string, string> headers);
    private static void SetReplyToAddress(ServiceBusMessage message, Dictionary`2<string, string> headers);
    private static void CopyHeaders(ServiceBusMessage outgoingMessage, Dictionary`2<string, string> headers);
}
[ExtensionAttribute]
internal static class NServiceBus.Transport.AzureServiceBus.OutgoingTransportOperationExtensions : object {
    [ExtensionAttribute]
public static void ApplyCustomizationToOutgoingNativeMessage(IOutgoingTransportOperation transportOperation, ServiceBusMessage message, TransportTransaction transportTransaction, ILog logger);
    [ExtensionAttribute]
public static string ExtractDestination(IOutgoingTransportOperation outgoingTransportOperation, string defaultMulticastRoute);
}
[ExtensionAttribute]
internal static class NServiceBus.Transport.AzureServiceBus.ProcessMessageEventArgsExtensions : object {
    private static ILog Logger;
    private static ProcessMessageEventArgsExtensions();
    [AsyncStateMachineAttribute("NServiceBus.Transport.AzureServiceBus.ProcessMessageEventArgsExtensions/<TrySafeCompleteMessage>d__0")]
[ExtensionAttribute]
public static ValueTask`1<bool> TrySafeCompleteMessage(ProcessMessageEventArgs args, ServiceBusReceivedMessage message, TransportTransactionMode transportTransactionMode, ICache`2<string, bool> messagesToBeCompleted, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("NServiceBus.Transport.AzureServiceBus.ProcessMessageEventArgsExtensions/<TrySafeAbandonMessage>d__1")]
[ExtensionAttribute]
public static ValueTask`1<bool> TrySafeAbandonMessage(ProcessMessageEventArgs args, ServiceBusReceivedMessage message, TransportTransactionMode transportTransactionMode, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("NServiceBus.Transport.AzureServiceBus.ProcessMessageEventArgsExtensions/<SafeDeadLetterMessage>d__2")]
[ExtensionAttribute]
public static Task SafeDeadLetterMessage(ProcessMessageEventArgs args, ServiceBusReceivedMessage message, TransportTransactionMode transportTransactionMode, Exception exception, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("NServiceBus.Transport.AzureServiceBus.ProcessMessageEventArgsExtensions/<SafeCompleteMessage>d__3")]
[ExtensionAttribute]
public static Task SafeCompleteMessage(ProcessMessageEventArgs args, ServiceBusReceivedMessage message, TransportTransactionMode transportTransactionMode, AzureServiceBusTransportTransaction azureServiceBusTransaction, ICache`2<string, bool> messagesToBeCompleted, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("NServiceBus.Transport.AzureServiceBus.ProcessMessageEventArgsExtensions/<SafeAbandonMessage>d__4")]
[ExtensionAttribute]
public static Task SafeAbandonMessage(ProcessMessageEventArgs args, ServiceBusReceivedMessage message, TransportTransactionMode transportTransactionMode, CancellationToken cancellationToken);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class NServiceBus.Transport.AzureServiceBus.QueueCreator : object {
    private static ILog Logger;
    private AzureServiceBusTransport transportSettings;
    private int maxSizeInMb;
    public QueueCreator(AzureServiceBusTransport transportSettings);
    private static QueueCreator();
    [AsyncStateMachineAttribute("NServiceBus.Transport.AzureServiceBus.QueueCreator/<CreateQueues>d__4")]
public Task CreateQueues(ServiceBusAdministrationClient adminClient, String[] queues, CancellationToken cancellationToken);
}
internal class NServiceBus.Transport.AzureServiceBus.RepeatedFailuresOverTimeCircuitBreaker : object {
    private long failureCount;
    private Boolean modreq(System.Runtime.CompilerServices.IsVolatile) triggered;
    private Exception lastException;
    private string name;
    private Timer timer;
    private TimeSpan timeToWaitBeforeTriggering;
    private Action`1<Exception> triggerAction;
    private Action armedAction;
    private Action disarmedAction;
    private static TimeSpan NoPeriodicTriggering;
    private static ILog Logger;
    public RepeatedFailuresOverTimeCircuitBreaker(string name, TimeSpan timeToWaitBeforeTriggering, Action`1<Exception> triggerAction, Action armedAction, Action disarmedAction);
    private static RepeatedFailuresOverTimeCircuitBreaker();
    public void Success();
    public Task Failure(Exception exception, CancellationToken cancellationToken);
    public void Dispose();
    private void CircuitBreakerTriggered(object state);
}
internal static class NServiceBus.Transport.AzureServiceBus.SettingsKeys : object {
    private static string Base;
    public static string TopicName;
    public static string MaximumSizeInGB;
    public static string EnablePartitioning;
    public static string PrefetchMultiplier;
    public static string PrefetchCount;
    public static string TimeToWaitBeforeTriggeringCircuitBreaker;
    public static string SubscriptionNamingConvention;
    public static string SubscriptionRuleNamingConvention;
    public static string TransportType;
    public static string CustomTokenProvider;
    public static string CustomRetryPolicy;
}
internal class NServiceBus.Transport.AzureServiceBus.SubscriptionManager : object {
    private static ILog Logger;
    private AzureServiceBusTransport transportSettings;
    private ServiceBusClient client;
    private string subscribingQueue;
    private string subscriptionName;
    public SubscriptionManager(string subscribingQueue, AzureServiceBusTransport transportSettings, ServiceBusClient client);
    private static SubscriptionManager();
    [AsyncStateMachineAttribute("NServiceBus.Transport.AzureServiceBus.SubscriptionManager/<SubscribeAll>d__6")]
public sealed virtual Task SubscribeAll(MessageMetadata[] eventTypes, ContextBag context, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("NServiceBus.Transport.AzureServiceBus.SubscriptionManager/<SubscribeEvent>d__7")]
private Task SubscribeEvent(ServiceBusRuleManager ruleManager, Type eventType, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("NServiceBus.Transport.AzureServiceBus.SubscriptionManager/<Unsubscribe>d__8")]
public sealed virtual Task Unsubscribe(MessageMetadata eventType, ContextBag context, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("NServiceBus.Transport.AzureServiceBus.SubscriptionManager/<CreateSubscription>d__9")]
public Task CreateSubscription(ServiceBusAdministrationClient adminClient, CancellationToken cancellationToken);
}
internal static class NServiceBus.Transport.AzureServiceBus.Time : object {
    public static Func`1<DateTimeOffset> UtcNow;
    private static Time();
}
[ExtensionAttribute]
internal static class NServiceBus.Transport.AzureServiceBus.TransactionExtensions : object {
    [NullableContextAttribute("1")]
[ExtensionAttribute]
public static TransactionScope ToScope(Transaction transaction);
}
internal class NServiceBusTransportAzureServiceBus_ProcessedByFody : object {
    internal static string FodyVersion;
    internal static string Obsolete;
}
