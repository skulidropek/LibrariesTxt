[CompilerGeneratedAttribute]
[EmbeddedAttribute]
internal class Microsoft.CodeAnalysis.EmbeddedAttribute : Attribute {
}
[ExtensionAttribute]
internal static class NServiceBus.Core.Analyzer.AnalysisContextExtensions : object {
    [ExtensionAttribute]
public static bool ContainsSyntax(SyntaxNodeAnalysisContext context, SyntaxNode node);
}
[DiagnosticAnalyzerAttribute("C#", "Mono.Cecil.CustomAttributeArgument[]")]
public class NServiceBus.Core.Analyzer.AwaitOrCaptureTasksAnalyzer : DiagnosticAnalyzer {
    public static string DiagnosticId;
    [CompilerGeneratedAttribute]
private ImmutableArray`1<DiagnosticDescriptor> <SupportedDiagnostics>k__BackingField;
    private static DiagnosticDescriptor diagnostic;
    private static ImmutableHashSet`1<string> methods;
    private static ImmutableHashSet`1<string> methodNames;
    public ImmutableArray`1<DiagnosticDescriptor> SupportedDiagnostics { get; }
    private static AwaitOrCaptureTasksAnalyzer();
    [CompilerGeneratedAttribute]
public virtual ImmutableArray`1<DiagnosticDescriptor> get_SupportedDiagnostics();
    public virtual void Initialize(AnalysisContext context);
    private static void Analyze(SyntaxNodeAnalysisContext context);
    private static bool CouldBeMethodRequiringAwait(SyntaxToken syntaxToken);
    private static bool IsMethodRequiringAwait(ExpressionSyntax call, SyntaxNodeAnalysisContext context);
}
internal class NServiceBus.Core.Analyzer.FindSagaByDataSymbolVisitor : SymbolVisitor {
    private INamedTypeSymbol sagaDataType;
    private INamedTypeSymbol genericBaseSaga;
    private bool done;
    [CompilerGeneratedAttribute]
private INamedTypeSymbol <FoundSaga>k__BackingField;
    public INamedTypeSymbol FoundSaga { get; private set; }
    public FindSagaByDataSymbolVisitor(INamedTypeSymbol sagaDataType, INamedTypeSymbol genericBaseSaga);
    [CompilerGeneratedAttribute]
public INamedTypeSymbol get_FoundSaga();
    [CompilerGeneratedAttribute]
private void set_FoundSaga(INamedTypeSymbol value);
    public virtual void VisitNamespace(INamespaceSymbol symbol);
    public virtual void VisitNamedType(INamedTypeSymbol symbol);
}
[DiagnosticAnalyzerAttribute("C#", "Mono.Cecil.CustomAttributeArgument[]")]
public class NServiceBus.Core.Analyzer.ForwardCancellationTokenAnalyzer : DiagnosticAnalyzer {
    public static string DiagnosticId;
    [CompilerGeneratedAttribute]
private ImmutableArray`1<DiagnosticDescriptor> <SupportedDiagnostics>k__BackingField;
    private static DiagnosticDescriptor diagnosticDescriptor;
    public ImmutableArray`1<DiagnosticDescriptor> SupportedDiagnostics { get; }
    private static ForwardCancellationTokenAnalyzer();
    [CompilerGeneratedAttribute]
public virtual ImmutableArray`1<DiagnosticDescriptor> get_SupportedDiagnostics();
    public virtual void Initialize(AnalysisContext context);
    private static void Analyze(CompilationStartAnalysisContext startContext);
    private static void Analyze(SyntaxNodeAnalysisContext context, INamedTypeSymbol cancellableContextInterface, INamedTypeSymbol cancellationTokenType, INamedTypeSymbol genericTaskType, INamedTypeSymbol genericValueTaskType);
    private static void Analyze(InvocationExpressionSyntax call, IParameterSymbol callerCancellableContextParam, INamedTypeSymbol cancellableContextInterface, INamedTypeSymbol cancellationTokenType, INamedTypeSymbol genericTaskType, INamedTypeSymbol genericValueTaskType, SyntaxNodeAnalysisContext context);
    private static bool CouldBeCancellationToken(ExpressionSyntax expression);
    private static bool LooksLikeCancellationToken(ExpressionSyntax expression, string callerCancellableContextParam);
    private static bool TypeSyntaxLooksLikeCancellationToken(TypeSyntax typeSyntax);
    private static bool IsCancellationToken(ExpressionSyntax expressionSyntax, SyntaxNodeAnalysisContext context, INamedTypeSymbol cancellationTokenType);
    private static ITypeSymbol GetTypeSymbolFromExpression(ExpressionSyntax expression, SyntaxNodeAnalysisContext context);
    private static IMethodSymbol GetRecommendedMethod(IMethodSymbol calledMethod, INamedTypeSymbol cancellationTokenType, INamedTypeSymbol genericTaskType, INamedTypeSymbol genericValueTaskType, InvocationExpressionSyntax call, SyntaxNodeAnalysisContext context, String& requiredArgName);
    private static string GetRequiredArgName(IMethodSymbol recommendedMethod, IParameterSymbol extraParam, SeparatedSyntaxList`1<ArgumentSyntax> args);
    private static INamedTypeSymbol GetCalledType(InvocationExpressionSyntax call, IMethodSymbol calledMethod, SyntaxNodeAnalysisContext context);
    private static bool HasSameParametersPlusCancellationToken(INamedTypeSymbol genericTask, INamedTypeSymbol genericValueTask, IMethodSymbol originalMethod, IMethodSymbol methodToCompare);
    [CompilerGeneratedAttribute]
internal static bool <HasSameParametersPlusCancellationToken>g__IsTaskLikeType|16_0(ITypeSymbol typeSymbol, <>c__DisplayClass16_0& );
    [CompilerGeneratedAttribute]
internal static bool <HasSameParametersPlusCancellationToken>g__TypeArgumentsAreConvertable|16_1(INamedTypeSymbol left, INamedTypeSymbol right);
}
[SharedAttribute]
[ExportCodeFixProviderAttribute("C#", "Mono.Cecil.CustomAttributeArgument[]")]
public class NServiceBus.Core.Analyzer.ForwardCancellationTokenFixer : CodeFixProvider {
    private static string EquivalenceKey;
    public ImmutableArray`1<string> FixableDiagnosticIds { get; }
    private static ForwardCancellationTokenFixer();
    public virtual ImmutableArray`1<string> get_FixableDiagnosticIds();
    public virtual FixAllProvider GetFixAllProvider();
    [AsyncStateMachineAttribute("NServiceBus.Core.Analyzer.ForwardCancellationTokenFixer/<RegisterCodeFixesAsync>d__3")]
public sealed virtual Task RegisterCodeFixesAsync(CodeFixContext context);
    [AsyncStateMachineAttribute("NServiceBus.Core.Analyzer.ForwardCancellationTokenFixer/<ForwardCancellationToken>d__4")]
private static Task`1<Document> ForwardCancellationToken(Document document, InvocationExpressionSyntax invocation, string callerCancellableContextParamName, string requiredArgName, CancellationToken cancellationToken);
}
[SharedAttribute]
[ExportCodeFixProviderAttribute("C#", "Mono.Cecil.CustomAttributeArgument[]")]
public class NServiceBus.Core.Analyzer.RewriteConfigureHowToFindSagaFixer : CodeFixProvider {
    private static string EquivalenceKey;
    public ImmutableArray`1<string> FixableDiagnosticIds { get; }
    private static RewriteConfigureHowToFindSagaFixer();
    public virtual ImmutableArray`1<string> get_FixableDiagnosticIds();
    public virtual FixAllProvider GetFixAllProvider();
    [AsyncStateMachineAttribute("NServiceBus.Core.Analyzer.RewriteConfigureHowToFindSagaFixer/<RegisterCodeFixesAsync>d__3")]
public sealed virtual Task RegisterCodeFixesAsync(CodeFixContext context);
    [AsyncStateMachineAttribute("NServiceBus.Core.Analyzer.RewriteConfigureHowToFindSagaFixer/<RewriteConfigureHowToFindSagaMethod>d__4")]
private static Task`1<Document> RewriteConfigureHowToFindSagaMethod(Document document, MethodDeclarationSyntax method, string correlationId, string mapperParamName, ImmutableArray`1<SagaMessageMapping> mappings, CancellationToken cancellationToken);
    private static GenericNameSyntax CreateGenericMappingMethod(string methodName, string messageType);
    private static ArgumentListSyntax CreateCorrelationIdMapping(string correlationId);
    [AsyncStateMachineAttribute("NServiceBus.Core.Analyzer.RewriteConfigureHowToFindSagaFixer/<GetIndentString>d__7")]
private static Task`1<string> GetIndentString(Document document, CancellationToken cancellationToken);
    [CompilerGeneratedAttribute]
internal static SyntaxTrivia <RewriteConfigureHowToFindSagaMethod>g__Indent|4_0(int levels, <>c__DisplayClass4_0& );
}
[DiagnosticAnalyzerAttribute("C#", "Mono.Cecil.CustomAttributeArgument[]")]
public class NServiceBus.Core.Analyzer.SagaAnalyzer : DiagnosticAnalyzer {
    public ImmutableArray`1<DiagnosticDescriptor> SupportedDiagnostics { get; }
    public virtual ImmutableArray`1<DiagnosticDescriptor> get_SupportedDiagnostics();
    public virtual void Initialize(AnalysisContext context);
    private static void Analyze(CompilationStartAnalysisContext startContext);
    private static void Analyze(SyntaxNodeAnalysisContext context, KnownTypes knownTypes);
    private static void AnalyzeSagaClass(SyntaxNodeAnalysisContext context, ClassDeclarationSyntax classDeclaration, INamedTypeSymbol sagaType, KnownTypes knownTypes);
    private static void AnalyzeSagaDataClass(SyntaxNodeAnalysisContext context, ClassDeclarationSyntax sagaDataClass, INamedTypeSymbol sagaDataType, KnownTypes knownTypes);
    private static bool IsSupportedCorrelationPropertyType(ITypeSymbol type);
    private static bool TypeContainsMessageType(ITypeSymbol type, SagaDetails saga, KnownTypes knownTypes);
    private static Diagnostic CreateMappingRewritingDiagnostic(string fixerTitle, DiagnosticDescriptor descriptor, Location location, string newMappingForLocation, string correlationId, SagaDetails saga, Object[] messageArgs);
    private static bool TryGetSagaDetails(SyntaxNodeAnalysisContext context, SemanticModelCache semanticModels, KnownTypes knownTypes, INamedTypeSymbol sagaType, SagaDetails& saga);
    private static void TryFillSagaMappings(SyntaxNodeAnalysisContext context, KnownTypes knownTypes, SemanticModelCache semanticModels, SagaDetails saga);
    private static void AddSagaMappingsFromExpression(SyntaxNodeAnalysisContext context, SemanticModel semanticModel, SyntaxNode statement, SagaDetails saga, bool raiseDiagnostics);
    private static bool TryAddSagaMappingsFromExpression(SemanticModel semanticModel, SyntaxNode statement, SagaDetails saga, CancellationToken cancellationToken);
    private static bool IsMessageHeaderMapping(string methodName);
    private static INamedTypeSymbol GetSagaDataType(INamedTypeSymbol sagaType, KnownTypes knownTypes);
    private static bool IsHandlerInterfaceName(string interfaceName);
}
internal class NServiceBus.Core.Analyzer.SagaDetails : object {
    [CompilerGeneratedAttribute]
private INamedTypeSymbol <SagaType>k__BackingField;
    [CompilerGeneratedAttribute]
private INamedTypeSymbol <DataType>k__BackingField;
    [CompilerGeneratedAttribute]
private MethodDeclarationSyntax <ConfigureHowToFindMethod>k__BackingField;
    [CompilerGeneratedAttribute]
private ImmutableArray`1<SagaHandlerDeclaration> <StartedBy>k__BackingField;
    [CompilerGeneratedAttribute]
private ImmutableArray`1<SagaHandlerDeclaration> <Handles>k__BackingField;
    [CompilerGeneratedAttribute]
private ImmutableArray`1<SagaHandlerDeclaration> <Timeouts>k__BackingField;
    [CompilerGeneratedAttribute]
private List`1<SagaMessageMapping> <MessageMappings>k__BackingField;
    [CompilerGeneratedAttribute]
private ImmutableHashSet`1<ITypeSymbol> <MessageTypesHandled>k__BackingField;
    [CompilerGeneratedAttribute]
private ParameterSyntax <MapperParameterSyntax>k__BackingField;
    public INamedTypeSymbol SagaType { get; }
    public INamedTypeSymbol DataType { get; }
    public MethodDeclarationSyntax ConfigureHowToFindMethod { get; }
    public ImmutableArray`1<SagaHandlerDeclaration> StartedBy { get; }
    public ImmutableArray`1<SagaHandlerDeclaration> Handles { get; }
    public ImmutableArray`1<SagaHandlerDeclaration> Timeouts { get; }
    public List`1<SagaMessageMapping> MessageMappings { get; }
    public ImmutableHashSet`1<ITypeSymbol> MessageTypesHandled { get; }
    public ParameterSyntax MapperParameterSyntax { get; public set; }
    internal SagaDetails(INamedTypeSymbol sagaType, INamedTypeSymbol dataType, MethodDeclarationSyntax configureHowToFindMethod, ImmutableArray`1<SagaHandlerDeclaration> handles, ImmutableArray`1<SagaHandlerDeclaration> startedBy, ImmutableArray`1<SagaHandlerDeclaration> timeouts);
    [CompilerGeneratedAttribute]
public INamedTypeSymbol get_SagaType();
    [CompilerGeneratedAttribute]
public INamedTypeSymbol get_DataType();
    [CompilerGeneratedAttribute]
public MethodDeclarationSyntax get_ConfigureHowToFindMethod();
    [CompilerGeneratedAttribute]
public ImmutableArray`1<SagaHandlerDeclaration> get_StartedBy();
    [CompilerGeneratedAttribute]
public ImmutableArray`1<SagaHandlerDeclaration> get_Handles();
    [CompilerGeneratedAttribute]
public ImmutableArray`1<SagaHandlerDeclaration> get_Timeouts();
    [CompilerGeneratedAttribute]
public List`1<SagaMessageMapping> get_MessageMappings();
    [CompilerGeneratedAttribute]
public ImmutableHashSet`1<ITypeSymbol> get_MessageTypesHandled();
    [CompilerGeneratedAttribute]
public ParameterSyntax get_MapperParameterSyntax();
    [CompilerGeneratedAttribute]
public void set_MapperParameterSyntax(ParameterSyntax value);
}
public static class NServiceBus.Core.Analyzer.SagaDiagnostics : object {
    public static string NonMappingExpressionUsedInConfigureHowToFindSagaId;
    public static string SagaMappingExpressionCanBeSimplifiedId;
    public static string MultipleCorrelationIdValuesId;
    public static string MessageStartsSagaButNoMappingId;
    public static string SagaDataPropertyNotWriteableId;
    public static string MessageMappingNotNeededForTimeoutId;
    public static string CannotMapToSagasIdPropertyId;
    public static string DoNotUseMessageTypeAsSagaDataPropertyId;
    public static string CorrelationIdMustBeSupportedTypeId;
    public static string EasierToInheritContainSagaDataId;
    public static string SagaReplyShouldBeToOriginatorId;
    public static string SagaShouldNotHaveIntermediateBaseClassId;
    public static string SagaShouldNotImplementNotFoundHandlerId;
    public static string CorrelationPropertyTypeMustMatchMessageMappingExpressionsId;
    public static string ToSagaMappingMustBeToAPropertyId;
    public static string SagaMappingExpressionCanBeRewrittenId;
    private static string DiagnosticCategory;
    internal static DiagnosticDescriptor NonMappingExpressionUsedInConfigureHowToFindSaga;
    internal static DiagnosticDescriptor SagaMappingExpressionCanBeSimplified;
    internal static DiagnosticDescriptor MultipleCorrelationIdValues;
    internal static DiagnosticDescriptor MessageStartsSagaButNoMapping;
    internal static DiagnosticDescriptor SagaDataPropertyNotWriteable;
    internal static DiagnosticDescriptor MessageMappingNotNeededForTimeout;
    internal static DiagnosticDescriptor CannotMapToSagasIdProperty;
    internal static DiagnosticDescriptor DoNotUseMessageTypeAsSagaDataProperty;
    internal static DiagnosticDescriptor CorrelationIdMustBeSupportedType;
    internal static DiagnosticDescriptor EasierToInheritContainSagaData;
    internal static DiagnosticDescriptor SagaReplyShouldBeToOriginator;
    internal static DiagnosticDescriptor SagaShouldNotHaveIntermediateBaseClass;
    internal static DiagnosticDescriptor SagaShouldNotImplementNotFoundHandler;
    internal static DiagnosticDescriptor CorrelationPropertyTypeMustMatchMessageMappingExpressions;
    internal static DiagnosticDescriptor ToSagaMappingMustBeToAProperty;
    internal static DiagnosticDescriptor SagaMappingExpressionCanBeRewritten;
    private static SagaDiagnostics();
}
internal class NServiceBus.Core.Analyzer.SagaHandlerDeclaration : object {
    [CompilerGeneratedAttribute]
private BaseTypeSyntax <Syntax>k__BackingField;
    [CompilerGeneratedAttribute]
private TypeSyntax <MessageTypeSyntax>k__BackingField;
    [CompilerGeneratedAttribute]
private INamedTypeSymbol <InterfaceType>k__BackingField;
    [CompilerGeneratedAttribute]
private INamedTypeSymbol <MessageType>k__BackingField;
    public BaseTypeSyntax Syntax { get; }
    public TypeSyntax MessageTypeSyntax { get; }
    public INamedTypeSymbol InterfaceType { get; }
    public INamedTypeSymbol MessageType { get; }
    public SagaHandlerDeclaration(BaseTypeSyntax syntax, INamedTypeSymbol interfaceType);
    [CompilerGeneratedAttribute]
public BaseTypeSyntax get_Syntax();
    [CompilerGeneratedAttribute]
public TypeSyntax get_MessageTypeSyntax();
    [CompilerGeneratedAttribute]
public INamedTypeSymbol get_InterfaceType();
    [CompilerGeneratedAttribute]
public INamedTypeSymbol get_MessageType();
    public virtual string ToString();
}
internal class NServiceBus.Core.Analyzer.SagaMessageMapping : object {
    [CompilerGeneratedAttribute]
private TypeSyntax <MessageTypeSyntax>k__BackingField;
    [CompilerGeneratedAttribute]
private INamedTypeSymbol <MessageType>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsHeader>k__BackingField;
    [CompilerGeneratedAttribute]
private ArgumentSyntax <MessageMappingExpression>k__BackingField;
    [CompilerGeneratedAttribute]
private LambdaExpressionSyntax <ToSagaSyntax>k__BackingField;
    [CompilerGeneratedAttribute]
private string <CorrelationId>k__BackingField;
    [CompilerGeneratedAttribute]
private string <NewMappingPropertyName>k__BackingField;
    public TypeSyntax MessageTypeSyntax { get; }
    public INamedTypeSymbol MessageType { get; public set; }
    public bool IsHeader { get; }
    public ArgumentSyntax MessageMappingExpression { get; }
    public LambdaExpressionSyntax ToSagaSyntax { get; }
    public string CorrelationId { get; }
    public string NewMappingPropertyName { get; }
    public SagaMessageMapping(TypeSyntax messageTypeSyntax, INamedTypeSymbol messageType, bool isHeader, ArgumentSyntax messageMappingExpression, LambdaExpressionSyntax toSagaSyntax);
    private SagaMessageMapping(TypeSyntax messageTypeSyntax, string propertyName, string correlationId);
    public static SagaMessageMapping CreateNewMapping(TypeSyntax messageTypeSyntax, string propertyName, string correlationId);
    [CompilerGeneratedAttribute]
public TypeSyntax get_MessageTypeSyntax();
    [CompilerGeneratedAttribute]
public INamedTypeSymbol get_MessageType();
    [CompilerGeneratedAttribute]
public void set_MessageType(INamedTypeSymbol value);
    [CompilerGeneratedAttribute]
public bool get_IsHeader();
    [CompilerGeneratedAttribute]
public ArgumentSyntax get_MessageMappingExpression();
    [CompilerGeneratedAttribute]
public LambdaExpressionSyntax get_ToSagaSyntax();
    [CompilerGeneratedAttribute]
public string get_CorrelationId();
    [CompilerGeneratedAttribute]
public string get_NewMappingPropertyName();
    public virtual string ToString();
}
internal class NServiceBus.Core.Analyzer.SemanticModelCache : object {
    private Compilation compilation;
    private Dictionary`2<SyntaxTree, SemanticModel> dict;
    public SemanticModelCache(Compilation compilation, SyntaxTree originalSyntaxTree, SemanticModel originalSemanticModel);
    public SemanticModel GetFor(SyntaxNode node);
    public SemanticModel GetFor(SyntaxTree tree);
}
[ExtensionAttribute]
internal static class NServiceBus.Core.Analyzer.SymbolExtensions : object {
    [ExtensionAttribute]
public static string GetFullName(IMethodSymbol method);
    [ExtensionAttribute]
public static bool Implements(ITypeSymbol type, INamedTypeSymbol nonGenericInterface);
    [ExtensionAttribute]
public static bool Extends(IMethodSymbol method, INamedTypeSymbol nonGenericType);
    [ExtensionAttribute]
public static ITypeSymbol GetTypeSymbolOrDefault(ISymbol symbol);
    [IteratorStateMachineAttribute("NServiceBus.Core.Analyzer.SymbolExtensions/<BaseTypesAndSelf>d__4")]
[ExtensionAttribute]
public static IEnumerable`1<ITypeSymbol> BaseTypesAndSelf(ITypeSymbol type, bool includeInterfaces);
    [ExtensionAttribute]
public static bool IsSystemObjectType(ITypeSymbol type);
    [ExtensionAttribute]
public static bool IsAssignableTo(ITypeSymbol fromSymbol, ITypeSymbol toSymbol);
    [ExtensionAttribute]
public static bool TypeCanAcceptWithNullability(ITypeSymbol type, ITypeSymbol possiblyNullableTypeToAcceptValueFrom);
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
[AttributeUsageAttribute("27524")]
internal class System.Runtime.CompilerServices.NullableAttribute : Attribute {
    public Byte[] NullableFlags;
    public NullableAttribute(byte );
    public NullableAttribute(Byte[] );
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
[AttributeUsageAttribute("5196")]
internal class System.Runtime.CompilerServices.NullableContextAttribute : Attribute {
    public byte Flag;
    public NullableContextAttribute(byte );
}
