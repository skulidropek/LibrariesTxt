[CompilerGeneratedAttribute]
[EmbeddedAttribute]
internal class Microsoft.CodeAnalysis.EmbeddedAttribute : Attribute {
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ExportCodeFixProviderAttribute("C#", "Mono.Cecil.CustomAttributeArgument[]")]
internal class NSubstitute.Analyzers.CSharp.CodeFixProviders.ConstructorArgumentsForInterfaceCodeFixProvider : AbstractConstructorArgumentsForInterfaceCodeFixProvider {
    protected virtual SyntaxNode GetInvocationExpressionSyntaxWithEmptyArgumentList(IInvocationOperation invocationOperation);
    protected virtual SyntaxNode GetInvocationExpressionSyntaxWithNullConstructorArgument(IInvocationOperation invocationOperation);
}
[NullableContextAttribute("1")]
[NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[ExportCodeFixProviderAttribute("C#", "Mono.Cecil.CustomAttributeArgument[]")]
internal class NSubstitute.Analyzers.CSharp.CodeFixProviders.InternalSetupSpecificationCodeFixProvider : AbstractInternalSetupSpecificationCodeFixProvider`1<CompilationUnitSyntax> {
    [CompilerGeneratedAttribute]
private string <ReplaceModifierCodeFixTitle>k__BackingField;
    protected string ReplaceModifierCodeFixTitle { get; }
    [CompilerGeneratedAttribute]
protected virtual string get_ReplaceModifierCodeFixTitle();
    protected virtual Task`1<Document> AddModifierRefactoring(Document document, SyntaxNode node, Accessibility accessibility, CancellationToken cancellationToken);
    protected virtual Task`1<Document> ReplaceModifierRefactoring(Document document, SyntaxNode node, Accessibility fromAccessibility, Accessibility toAccessibility, CancellationToken cancellationToken);
    protected virtual void RegisterAddInternalsVisibleToAttributeCodeFix(CodeFixContext context, CompilationUnitSyntax compilationUnitSyntax);
}
[ExportCodeFixProviderAttribute("C#", "Mono.Cecil.CustomAttributeArgument[]")]
internal class NSubstitute.Analyzers.CSharp.CodeFixProviders.NonSubstitutableMemberArgumentMatcherSuppressDiagnosticsCodeFixProvider : AbstractNonSubstitutableMemberArgumentMatcherSuppressDiagnosticsCodeFixProvider {
}
[ExportCodeFixProviderAttribute("C#", "Mono.Cecil.CustomAttributeArgument[]")]
internal class NSubstitute.Analyzers.CSharp.CodeFixProviders.NonSubstitutableMemberSuppressDiagnosticsCodeFixProvider : AbstractNonSubstitutableMemberSuppressDiagnosticsCodeFixProvider {
}
[ExportCodeFixProviderAttribute("C#", "Mono.Cecil.CustomAttributeArgument[]")]
internal class NSubstitute.Analyzers.CSharp.CodeFixProviders.PartialSubstituteUsedForUnsupportedTypeCodeFixProvider : AbstractPartialSubstituteUsedForUnsupportedTypeCodeFixProvider {
    [NullableContextAttribute("1")]
protected virtual SyntaxNode UpdateInvocationExpression(IInvocationOperation invocationOperation, string identifierName);
}
[ExportCodeFixProviderAttribute("C#", "Mono.Cecil.CustomAttributeArgument[]")]
internal class NSubstitute.Analyzers.CSharp.CodeFixProviders.ReceivedInReceivedInOrderCodeFixProvider : AbstractReceivedInReceivedInOrderCodeFixProvider {
}
[NullableContextAttribute("1")]
[NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[ExportCodeFixProviderAttribute("C#", "Mono.Cecil.CustomAttributeArgument[]")]
internal class NSubstitute.Analyzers.CSharp.CodeFixProviders.ReEntrantSetupCodeFixProvider : AbstractReEntrantSetupCodeFixProvider`1<ArgumentSyntax> {
    protected string LambdaParameterName { get; }
    protected virtual string get_LambdaParameterName();
    protected virtual ArgumentSyntax UpdateArgumentExpression(ArgumentSyntax argument, SyntaxNode expression);
    protected virtual SyntaxNode GetArgumentExpression(ArgumentSyntax argument);
    protected virtual SyntaxNode CreateArrayCreationExpression(SyntaxNode typeSyntax, IEnumerable`1<SyntaxNode> elements);
    protected virtual IReadOnlyList`1<ArgumentSyntax> GetArguments(IInvocationOperation invocationOperation);
}
[NullableContextAttribute("1")]
[NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[ExportCodeFixProviderAttribute("C#", "Mono.Cecil.CustomAttributeArgument[]")]
internal class NSubstitute.Analyzers.CSharp.CodeFixProviders.SubstituteForInternalMemberCodeFixProvider : AbstractSubstituteForInternalMemberCodeFixProvider`1<CompilationUnitSyntax> {
    protected virtual void RegisterCodeFix(CodeFixContext context, CompilationUnitSyntax compilationUnitSyntax);
}
[ExportCodeFixProviderAttribute("C#", "Mono.Cecil.CustomAttributeArgument[]")]
internal class NSubstitute.Analyzers.CSharp.CodeFixProviders.SyncOverAsyncThrowsCodeFixProvider : AbstractSyncOverAsyncThrowsCodeFixProvider {
    [NullableContextAttribute("1")]
protected virtual SyntaxNode UpdateMemberExpression(IInvocationOperation invocationOperation, SyntaxNode updatedNameSyntax);
}
[NullableContextAttribute("1")]
[NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[ExportCodeRefactoringProviderAttribute("C#", "Mono.Cecil.CustomAttributeArgument[]")]
internal class NSubstitute.Analyzers.CSharp.CodeRefactoringProviders.IntroduceSubstituteCodeRefactoringProvider : AbstractIntroduceSubstituteCodeRefactoringProvider`3<ObjectCreationExpressionSyntax, ArgumentListSyntax, ArgumentSyntax> {
    protected virtual IReadOnlyList`1<ArgumentSyntax> GetArgumentSyntaxNodes(ArgumentListSyntax argumentListSyntax, TextSpan span);
    protected virtual ObjectCreationExpressionSyntax UpdateObjectCreationExpression(ObjectCreationExpressionSyntax objectCreationExpressionSyntax, IReadOnlyList`1<ArgumentSyntax> updatedArguments);
    protected virtual SyntaxNode FindSiblingNodeForLocalSubstitute(ObjectCreationExpressionSyntax creationExpression);
    protected virtual SyntaxNode FindSiblingNodeForReadonlySubstitute(SyntaxNode creationExpression);
    private static ArgumentListSyntax UpdateArgumentListTrivia(ArgumentListSyntax originalArgumentList, ArgumentListSyntax updatedArgumentList);
}
[DiagnosticAnalyzerAttribute("C#", "Mono.Cecil.CustomAttributeArgument[]")]
internal class NSubstitute.Analyzers.CSharp.DiagnosticAnalyzers.AsyncReceivedInOrderCallbackAnalyzer : AbstractAsyncReceivedInOrderCallbackAnalyzer {
    [NullableContextAttribute("1")]
protected virtual Nullable`1<SyntaxToken> GetAsyncToken(SyntaxNode node);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[DiagnosticAnalyzerAttribute("C#", "Mono.Cecil.CustomAttributeArgument[]")]
internal class NSubstitute.Analyzers.CSharp.DiagnosticAnalyzers.CallInfoAnalyzer : AbstractCallInfoAnalyzer {
    protected virtual bool CanCast(Compilation compilation, ITypeSymbol sourceSymbol, ITypeSymbol destinationSymbol);
    protected virtual bool IsAssignableTo(Compilation compilation, ITypeSymbol fromSymbol, ITypeSymbol toSymbol);
}
[DiagnosticAnalyzerAttribute("C#", "Mono.Cecil.CustomAttributeArgument[]")]
internal class NSubstitute.Analyzers.CSharp.DiagnosticAnalyzers.ConflictingArgumentAssignmentsAnalyzer : AbstractConflictingArgumentAssignmentsAnalyzer {
}
[DiagnosticAnalyzerAttribute("C#", "Mono.Cecil.CustomAttributeArgument[]")]
internal class NSubstitute.Analyzers.CSharp.DiagnosticAnalyzers.NonSubstitutableMemberAnalyzer : AbstractNonSubstitutableMemberAnalyzer {
}
[DiagnosticAnalyzerAttribute("C#", "Mono.Cecil.CustomAttributeArgument[]")]
internal class NSubstitute.Analyzers.CSharp.DiagnosticAnalyzers.NonSubstitutableMemberArgumentMatcherAnalyzer : AbstractNonSubstitutableMemberArgumentMatcherAnalyzer {
}
[DiagnosticAnalyzerAttribute("C#", "Mono.Cecil.CustomAttributeArgument[]")]
internal class NSubstitute.Analyzers.CSharp.DiagnosticAnalyzers.NonSubstitutableMemberReceivedAnalyzer : AbstractNonSubstitutableMemberReceivedAnalyzer {
}
[DiagnosticAnalyzerAttribute("C#", "Mono.Cecil.CustomAttributeArgument[]")]
internal class NSubstitute.Analyzers.CSharp.DiagnosticAnalyzers.NonSubstitutableMemberReceivedInOrderAnalyzer : AbstractNonSubstitutableMemberReceivedInOrderAnalyzer {
}
[DiagnosticAnalyzerAttribute("C#", "Mono.Cecil.CustomAttributeArgument[]")]
internal class NSubstitute.Analyzers.CSharp.DiagnosticAnalyzers.NonSubstitutableMemberWhenAnalyzer : AbstractNonSubstitutableMemberWhenAnalyzer {
}
[DiagnosticAnalyzerAttribute("C#", "Mono.Cecil.CustomAttributeArgument[]")]
internal class NSubstitute.Analyzers.CSharp.DiagnosticAnalyzers.ReceivedInReceivedInOrderAnalyzer : AbstractReceivedInReceivedInOrderAnalyzer {
}
[DiagnosticAnalyzerAttribute("C#", "Mono.Cecil.CustomAttributeArgument[]")]
internal class NSubstitute.Analyzers.CSharp.DiagnosticAnalyzers.ReEntrantSetupAnalyzer : AbstractReEntrantSetupAnalyzer {
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[DiagnosticAnalyzerAttribute("C#", "Mono.Cecil.CustomAttributeArgument[]")]
internal class NSubstitute.Analyzers.CSharp.DiagnosticAnalyzers.SubstituteAnalyzer : AbstractSubstituteAnalyzer {
    protected virtual SyntaxNode GetCorrespondingSubstituteInvocationExpressionSyntax(IInvocationOperation invocationOperation, string substituteName);
    protected virtual SyntaxNode GetSubstituteInvocationExpressionSyntaxWithoutConstructorArguments(IInvocationOperation invocationOperation);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class NSubstitute.Analyzers.CSharp.DiagnosticAnalyzers.SubstituteConstructorMatcher : AbstractSubstituteConstructorMatcher {
    [CompilerGeneratedAttribute]
private static SubstituteConstructorMatcher <Instance>k__BackingField;
    public static SubstituteConstructorMatcher Instance { get; }
    private static SubstituteConstructorMatcher();
    [CompilerGeneratedAttribute]
public static SubstituteConstructorMatcher get_Instance();
    protected virtual bool IsConvertible(Compilation compilation, ITypeSymbol source, ITypeSymbol destination);
}
[DiagnosticAnalyzerAttribute("C#", "Mono.Cecil.CustomAttributeArgument[]")]
internal class NSubstitute.Analyzers.CSharp.DiagnosticAnalyzers.SyncOverAsyncThrowsAnalyzer : AbstractSyncOverAsyncThrowsAnalyzer {
}
[DiagnosticAnalyzerAttribute("C#", "Mono.Cecil.CustomAttributeArgument[]")]
internal class NSubstitute.Analyzers.CSharp.DiagnosticAnalyzers.UnusedReceivedAnalyzer : AbstractUnusedReceivedAnalyzer {
}
[DiagnosticAnalyzerAttribute("C#", "Mono.Cecil.CustomAttributeArgument[]")]
internal class NSubstitute.Analyzers.CSharp.DiagnosticAnalyzers.WithAnyArgsArgumentMatcherAnalyzer : AbstractWithAnyArgsArgumentMatcherAnalyzer {
}
[NullableContextAttribute("1")]
[NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
internal class NSubstitute.Analyzers.CSharp.DiagnosticDescriptorsProvider : AbstractDiagnosticDescriptorsProvider`1<DiagnosticDescriptorsProvider> {
    [CompilerGeneratedAttribute]
private static DiagnosticDescriptorsProvider <Instance>k__BackingField;
    public static DiagnosticDescriptorsProvider Instance { get; }
    private static DiagnosticDescriptorsProvider();
    [CompilerGeneratedAttribute]
public static DiagnosticDescriptorsProvider get_Instance();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal static class NSubstitute.Analyzers.CSharp.Refactorings.AddInternalsVisibleToAttributeRefactoring : object {
    public static Task`1<Document> RefactorAsync(Document document, CompilationUnitSyntax compilationUnitSyntax, CancellationToken cancellationToken);
    public static void RegisterCodeFix(CodeFixContext context, CompilationUnitSyntax compilationUnitSyntax);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal static class NSubstitute.Analyzers.CSharp.Refactorings.AddModifierRefactoring : object {
    public static Task`1<Document> RefactorAsync(Document document, SyntaxNode node, Accessibility accessibility, CancellationToken cancellationToken);
    private static SyntaxNode Insert(SyntaxNode node, SyntaxKind syntaxKind);
    private static SyntaxTokenList UpdateModifiers(SyntaxTokenList modifiers, SyntaxKind modifier);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class NSubstitute.Analyzers.CSharp.Refactorings.ReplaceModifierRefactoring : object {
    public static Task`1<Document> RefactorAsync(Document document, SyntaxNode node, Accessibility fromAccessibility, Accessibility toAccessibility, CancellationToken cancellationToken);
    private static SyntaxKind InferSyntaxKind(Accessibility fromAccessibility);
    private static SyntaxNode ReplaceModifier(SyntaxNode node, SyntaxKind fromSyntaxKind, SyntaxKind toSyntaxKind);
    private static SyntaxTokenList ReplaceModifier(SyntaxTokenList modifiers, SyntaxKind fromModifier, SyntaxKind toModifier);
}
[GeneratedCodeAttribute("System.Resources.Tools.StronglyTypedResourceBuilder", "4.0.0.0")]
[DebuggerNonUserCodeAttribute]
[CompilerGeneratedAttribute]
internal class NSubstitute.Analyzers.CSharp.Resources : object {
    private static ResourceManager resourceMan;
    private static CultureInfo resourceCulture;
    [EditorBrowsableAttribute("2")]
internal static ResourceManager ResourceManager { get; }
    [EditorBrowsableAttribute("2")]
internal static CultureInfo Culture { get; internal set; }
    internal static string NonVirtualSetupSpecificationMessageFormat { get; }
    internal static string SubstituteForInternalMemberMessageFormat { get; }
    internal static string NonVirtualReceivedSetupSpecificationMessageFormat { get; }
    internal static string NonVirtualWhenSetupSpecificationMessageFormat { get; }
    internal static string NonVirtualReceivedInOrderSetupSpecificationMessageFormat { get; }
    internal static string ReEntrantSubstituteCallMessageFormat { get; }
    internal static string InternalSetupSpecificationMessageFormat { get; }
    internal static ResourceManager get_ResourceManager();
    internal static CultureInfo get_Culture();
    internal static void set_Culture(CultureInfo value);
    internal static string get_NonVirtualSetupSpecificationMessageFormat();
    internal static string get_SubstituteForInternalMemberMessageFormat();
    internal static string get_NonVirtualReceivedSetupSpecificationMessageFormat();
    internal static string get_NonVirtualWhenSetupSpecificationMessageFormat();
    internal static string get_NonVirtualReceivedInOrderSetupSpecificationMessageFormat();
    internal static string get_ReEntrantSubstituteCallMessageFormat();
    internal static string get_InternalSetupSpecificationMessageFormat();
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
[AttributeUsageAttribute("27524")]
internal class System.Runtime.CompilerServices.NullableAttribute : Attribute {
    public Byte[] NullableFlags;
    public NullableAttribute(byte );
    public NullableAttribute(Byte[] );
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
[AttributeUsageAttribute("5196")]
internal class System.Runtime.CompilerServices.NullableContextAttribute : Attribute {
    public byte Flag;
    public NullableContextAttribute(byte );
}
