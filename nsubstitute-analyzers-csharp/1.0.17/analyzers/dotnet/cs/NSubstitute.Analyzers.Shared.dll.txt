[CompilerGeneratedAttribute]
[EmbeddedAttribute]
internal class Microsoft.CodeAnalysis.EmbeddedAttribute : Attribute {
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class NSubstitute.Analyzers.Shared.AbstractDiagnosticDescriptorsProvider`1 : object {
    [CompilerGeneratedAttribute]
private DiagnosticDescriptor <NonVirtualSetupSpecification>k__BackingField;
    [CompilerGeneratedAttribute]
private DiagnosticDescriptor <NonVirtualReceivedInOrderSetupSpecification>k__BackingField;
    [CompilerGeneratedAttribute]
private DiagnosticDescriptor <InternalSetupSpecification>k__BackingField;
    [CompilerGeneratedAttribute]
private DiagnosticDescriptor <UnusedReceived>k__BackingField;
    [CompilerGeneratedAttribute]
private DiagnosticDescriptor <UnusedReceivedForOrdinaryMethod>k__BackingField;
    [CompilerGeneratedAttribute]
private DiagnosticDescriptor <PartialSubstituteForUnsupportedType>k__BackingField;
    [CompilerGeneratedAttribute]
private DiagnosticDescriptor <SubstituteForWithoutAccessibleConstructor>k__BackingField;
    [CompilerGeneratedAttribute]
private DiagnosticDescriptor <SubstituteForConstructorParametersMismatch>k__BackingField;
    [CompilerGeneratedAttribute]
private DiagnosticDescriptor <SubstituteForInternalMember>k__BackingField;
    [CompilerGeneratedAttribute]
private DiagnosticDescriptor <SubstituteConstructorMismatch>k__BackingField;
    [CompilerGeneratedAttribute]
private DiagnosticDescriptor <SubstituteMultipleClasses>k__BackingField;
    [CompilerGeneratedAttribute]
private DiagnosticDescriptor <SubstituteConstructorArgumentsForInterface>k__BackingField;
    [CompilerGeneratedAttribute]
private DiagnosticDescriptor <SubstituteConstructorArgumentsForDelegate>k__BackingField;
    [CompilerGeneratedAttribute]
private DiagnosticDescriptor <NonVirtualReceivedSetupSpecification>k__BackingField;
    [CompilerGeneratedAttribute]
private DiagnosticDescriptor <NonVirtualWhenSetupSpecification>k__BackingField;
    [CompilerGeneratedAttribute]
private DiagnosticDescriptor <ReEntrantSubstituteCall>k__BackingField;
    [CompilerGeneratedAttribute]
private DiagnosticDescriptor <CallInfoArgumentOutOfRange>k__BackingField;
    [CompilerGeneratedAttribute]
private DiagnosticDescriptor <CallInfoCouldNotConvertParameterAtPosition>k__BackingField;
    [CompilerGeneratedAttribute]
private DiagnosticDescriptor <CallInfoCouldNotFindArgumentToThisCall>k__BackingField;
    [CompilerGeneratedAttribute]
private DiagnosticDescriptor <CallInfoMoreThanOneArgumentOfType>k__BackingField;
    [CompilerGeneratedAttribute]
private DiagnosticDescriptor <CallInfoArgumentSetWithIncompatibleValue>k__BackingField;
    [CompilerGeneratedAttribute]
private DiagnosticDescriptor <CallInfoArgumentIsNotOutOrRef>k__BackingField;
    [CompilerGeneratedAttribute]
private DiagnosticDescriptor <ConflictingArgumentAssignments>k__BackingField;
    [CompilerGeneratedAttribute]
private DiagnosticDescriptor <NonSubstitutableMemberArgumentMatcherUsage>k__BackingField;
    [CompilerGeneratedAttribute]
private DiagnosticDescriptor <WithAnyArgsArgumentMatcherUsage>k__BackingField;
    [CompilerGeneratedAttribute]
private DiagnosticDescriptor <ReceivedUsedInReceivedInOrder>k__BackingField;
    [CompilerGeneratedAttribute]
private DiagnosticDescriptor <AsyncCallbackUsedInReceivedInOrder>k__BackingField;
    [CompilerGeneratedAttribute]
private DiagnosticDescriptor <SyncOverAsyncThrows>k__BackingField;
    public DiagnosticDescriptor NonVirtualSetupSpecification { get; }
    public DiagnosticDescriptor NonVirtualReceivedInOrderSetupSpecification { get; }
    public DiagnosticDescriptor InternalSetupSpecification { get; }
    public DiagnosticDescriptor UnusedReceived { get; }
    public DiagnosticDescriptor UnusedReceivedForOrdinaryMethod { get; }
    public DiagnosticDescriptor PartialSubstituteForUnsupportedType { get; }
    public DiagnosticDescriptor SubstituteForWithoutAccessibleConstructor { get; }
    public DiagnosticDescriptor SubstituteForConstructorParametersMismatch { get; }
    public DiagnosticDescriptor SubstituteForInternalMember { get; }
    public DiagnosticDescriptor SubstituteConstructorMismatch { get; }
    public DiagnosticDescriptor SubstituteMultipleClasses { get; }
    public DiagnosticDescriptor SubstituteConstructorArgumentsForInterface { get; }
    public DiagnosticDescriptor SubstituteConstructorArgumentsForDelegate { get; }
    public DiagnosticDescriptor NonVirtualReceivedSetupSpecification { get; }
    public DiagnosticDescriptor NonVirtualWhenSetupSpecification { get; }
    public DiagnosticDescriptor ReEntrantSubstituteCall { get; }
    public DiagnosticDescriptor CallInfoArgumentOutOfRange { get; }
    public DiagnosticDescriptor CallInfoCouldNotConvertParameterAtPosition { get; }
    public DiagnosticDescriptor CallInfoCouldNotFindArgumentToThisCall { get; }
    public DiagnosticDescriptor CallInfoMoreThanOneArgumentOfType { get; }
    public DiagnosticDescriptor CallInfoArgumentSetWithIncompatibleValue { get; }
    public DiagnosticDescriptor CallInfoArgumentIsNotOutOrRef { get; }
    public DiagnosticDescriptor ConflictingArgumentAssignments { get; }
    public DiagnosticDescriptor NonSubstitutableMemberArgumentMatcherUsage { get; }
    public DiagnosticDescriptor WithAnyArgsArgumentMatcherUsage { get; }
    public DiagnosticDescriptor ReceivedUsedInReceivedInOrder { get; }
    public DiagnosticDescriptor AsyncCallbackUsedInReceivedInOrder { get; }
    public DiagnosticDescriptor SyncOverAsyncThrows { get; }
    [CompilerGeneratedAttribute]
public sealed virtual DiagnosticDescriptor get_NonVirtualSetupSpecification();
    [CompilerGeneratedAttribute]
public sealed virtual DiagnosticDescriptor get_NonVirtualReceivedInOrderSetupSpecification();
    [CompilerGeneratedAttribute]
public sealed virtual DiagnosticDescriptor get_InternalSetupSpecification();
    [CompilerGeneratedAttribute]
public sealed virtual DiagnosticDescriptor get_UnusedReceived();
    [CompilerGeneratedAttribute]
public sealed virtual DiagnosticDescriptor get_UnusedReceivedForOrdinaryMethod();
    [CompilerGeneratedAttribute]
public sealed virtual DiagnosticDescriptor get_PartialSubstituteForUnsupportedType();
    [CompilerGeneratedAttribute]
public sealed virtual DiagnosticDescriptor get_SubstituteForWithoutAccessibleConstructor();
    [CompilerGeneratedAttribute]
public sealed virtual DiagnosticDescriptor get_SubstituteForConstructorParametersMismatch();
    [CompilerGeneratedAttribute]
public sealed virtual DiagnosticDescriptor get_SubstituteForInternalMember();
    [CompilerGeneratedAttribute]
public sealed virtual DiagnosticDescriptor get_SubstituteConstructorMismatch();
    [CompilerGeneratedAttribute]
public sealed virtual DiagnosticDescriptor get_SubstituteMultipleClasses();
    [CompilerGeneratedAttribute]
public sealed virtual DiagnosticDescriptor get_SubstituteConstructorArgumentsForInterface();
    [CompilerGeneratedAttribute]
public sealed virtual DiagnosticDescriptor get_SubstituteConstructorArgumentsForDelegate();
    [CompilerGeneratedAttribute]
public sealed virtual DiagnosticDescriptor get_NonVirtualReceivedSetupSpecification();
    [CompilerGeneratedAttribute]
public sealed virtual DiagnosticDescriptor get_NonVirtualWhenSetupSpecification();
    [CompilerGeneratedAttribute]
public sealed virtual DiagnosticDescriptor get_ReEntrantSubstituteCall();
    [CompilerGeneratedAttribute]
public sealed virtual DiagnosticDescriptor get_CallInfoArgumentOutOfRange();
    [CompilerGeneratedAttribute]
public sealed virtual DiagnosticDescriptor get_CallInfoCouldNotConvertParameterAtPosition();
    [CompilerGeneratedAttribute]
public sealed virtual DiagnosticDescriptor get_CallInfoCouldNotFindArgumentToThisCall();
    [CompilerGeneratedAttribute]
public sealed virtual DiagnosticDescriptor get_CallInfoMoreThanOneArgumentOfType();
    [CompilerGeneratedAttribute]
public sealed virtual DiagnosticDescriptor get_CallInfoArgumentSetWithIncompatibleValue();
    [CompilerGeneratedAttribute]
public sealed virtual DiagnosticDescriptor get_CallInfoArgumentIsNotOutOrRef();
    [CompilerGeneratedAttribute]
public sealed virtual DiagnosticDescriptor get_ConflictingArgumentAssignments();
    [CompilerGeneratedAttribute]
public sealed virtual DiagnosticDescriptor get_NonSubstitutableMemberArgumentMatcherUsage();
    [CompilerGeneratedAttribute]
public sealed virtual DiagnosticDescriptor get_WithAnyArgsArgumentMatcherUsage();
    [CompilerGeneratedAttribute]
public sealed virtual DiagnosticDescriptor get_ReceivedUsedInReceivedInOrder();
    [CompilerGeneratedAttribute]
public sealed virtual DiagnosticDescriptor get_AsyncCallbackUsedInReceivedInOrder();
    [CompilerGeneratedAttribute]
public sealed virtual DiagnosticDescriptor get_SyncOverAsyncThrows();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal abstract class NSubstitute.Analyzers.Shared.CodeFixProviders.AbstractConstructorArgumentsForInterfaceCodeFixProvider : CodeFixProvider {
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[CompilerGeneratedAttribute]
private ImmutableArray`1<string> <FixableDiagnosticIds>k__BackingField;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public ImmutableArray`1<string> FixableDiagnosticIds { get; }
    public sealed virtual FixAllProvider GetFixAllProvider();
    [CompilerGeneratedAttribute]
public sealed virtual ImmutableArray`1<string> get_FixableDiagnosticIds();
    public sealed virtual Task RegisterCodeFixesAsync(CodeFixContext context);
    protected abstract virtual SyntaxNode GetInvocationExpressionSyntaxWithEmptyArgumentList(IInvocationOperation invocationOperation);
    protected abstract virtual SyntaxNode GetInvocationExpressionSyntaxWithNullConstructorArgument(IInvocationOperation invocationOperation);
    [AsyncStateMachineAttribute("NSubstitute.Analyzers.Shared.CodeFixProviders.AbstractConstructorArgumentsForInterfaceCodeFixProvider/<CreateChangedDocument>d__7")]
private Task`1<Document> CreateChangedDocument(CodeFixContext context, CancellationToken cancellationToken);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal abstract class NSubstitute.Analyzers.Shared.CodeFixProviders.AbstractInternalSetupSpecificationCodeFixProvider`1 : CodeFixProvider {
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[CompilerGeneratedAttribute]
private ImmutableArray`1<string> <FixableDiagnosticIds>k__BackingField;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public ImmutableArray`1<string> FixableDiagnosticIds { get; }
    protected string ReplaceModifierCodeFixTitle { get; }
    [CompilerGeneratedAttribute]
public sealed virtual ImmutableArray`1<string> get_FixableDiagnosticIds();
    protected abstract virtual string get_ReplaceModifierCodeFixTitle();
    [AsyncStateMachineAttribute("NSubstitute.Analyzers.Shared.CodeFixProviders.AbstractInternalSetupSpecificationCodeFixProvider`1/<RegisterCodeFixesAsync>d__5")]
public sealed virtual Task RegisterCodeFixesAsync(CodeFixContext context);
    protected abstract virtual Task`1<Document> AddModifierRefactoring(Document document, SyntaxNode node, Accessibility accessibility, CancellationToken cancellationToken);
    protected abstract virtual Task`1<Document> ReplaceModifierRefactoring(Document document, SyntaxNode node, Accessibility fromAccessibility, Accessibility toAccessibility, CancellationToken cancellationToken);
    protected abstract virtual void RegisterAddInternalsVisibleToAttributeCodeFix(CodeFixContext context, TCompilationUnitSyntax compilationUnitSyntax);
    [AsyncStateMachineAttribute("NSubstitute.Analyzers.Shared.CodeFixProviders.AbstractInternalSetupSpecificationCodeFixProvider`1/<GetDeclaringSyntaxReference>d__9")]
private Task`1<SyntaxReference> GetDeclaringSyntaxReference(CodeFixContext context, SyntaxNode invocationExpression);
    private TCompilationUnitSyntax FindCompilationUnitSyntax(SyntaxNode syntaxNode);
}
internal abstract class NSubstitute.Analyzers.Shared.CodeFixProviders.AbstractNonSubstitutableMemberArgumentMatcherSuppressDiagnosticsCodeFixProvider : AbstractSuppressDiagnosticsCodeFixProvider {
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[CompilerGeneratedAttribute]
private ImmutableArray`1<string> <FixableDiagnosticIds>k__BackingField;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public ImmutableArray`1<string> FixableDiagnosticIds { get; }
    [CompilerGeneratedAttribute]
public sealed virtual ImmutableArray`1<string> get_FixableDiagnosticIds();
    [NullableContextAttribute("1")]
protected virtual IEnumerable`1<ISymbol> GetSuppressibleSymbol(SemanticModel model, SyntaxNode syntaxNode, ISymbol symbol);
}
internal class NSubstitute.Analyzers.Shared.CodeFixProviders.AbstractNonSubstitutableMemberSuppressDiagnosticsCodeFixProvider : AbstractSuppressDiagnosticsCodeFixProvider {
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[CompilerGeneratedAttribute]
private ImmutableArray`1<string> <FixableDiagnosticIds>k__BackingField;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public ImmutableArray`1<string> FixableDiagnosticIds { get; }
    [CompilerGeneratedAttribute]
public sealed virtual ImmutableArray`1<string> get_FixableDiagnosticIds();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal abstract class NSubstitute.Analyzers.Shared.CodeFixProviders.AbstractPartialSubstituteUsedForUnsupportedTypeCodeFixProvider : CodeFixProvider {
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[CompilerGeneratedAttribute]
private ImmutableArray`1<string> <FixableDiagnosticIds>k__BackingField;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public ImmutableArray`1<string> FixableDiagnosticIds { get; }
    public sealed virtual FixAllProvider GetFixAllProvider();
    [CompilerGeneratedAttribute]
public sealed virtual ImmutableArray`1<string> get_FixableDiagnosticIds();
    [AsyncStateMachineAttribute("NSubstitute.Analyzers.Shared.CodeFixProviders.AbstractPartialSubstituteUsedForUnsupportedTypeCodeFixProvider/<RegisterCodeFixesAsync>d__4")]
public sealed virtual Task RegisterCodeFixesAsync(CodeFixContext context);
    protected abstract virtual SyntaxNode UpdateInvocationExpression(IInvocationOperation invocationOperation, string identifierName);
    [AsyncStateMachineAttribute("NSubstitute.Analyzers.Shared.CodeFixProviders.AbstractPartialSubstituteUsedForUnsupportedTypeCodeFixProvider/<CreateChangedDocument>d__6")]
private Task`1<Document> CreateChangedDocument(CodeFixContext context, IInvocationOperation invocationOperation, CancellationToken cancellationToken);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal abstract class NSubstitute.Analyzers.Shared.CodeFixProviders.AbstractReceivedInReceivedInOrderCodeFixProvider : CodeFixProvider {
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[CompilerGeneratedAttribute]
private ImmutableArray`1<string> <FixableDiagnosticIds>k__BackingField;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public ImmutableArray`1<string> FixableDiagnosticIds { get; }
    public sealed virtual FixAllProvider GetFixAllProvider();
    [CompilerGeneratedAttribute]
public sealed virtual ImmutableArray`1<string> get_FixableDiagnosticIds();
    public sealed virtual Task RegisterCodeFixesAsync(CodeFixContext context);
    [AsyncStateMachineAttribute("NSubstitute.Analyzers.Shared.CodeFixProviders.AbstractReceivedInReceivedInOrderCodeFixProvider/<CreateChangedDocument>d__5")]
private Task`1<Document> CreateChangedDocument(CancellationToken cancellationToken, CodeFixContext context);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal abstract class NSubstitute.Analyzers.Shared.CodeFixProviders.AbstractReEntrantSetupCodeFixProvider`1 : CodeFixProvider {
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[CompilerGeneratedAttribute]
private ImmutableArray`1<string> <FixableDiagnosticIds>k__BackingField;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public ImmutableArray`1<string> FixableDiagnosticIds { get; }
    protected string LambdaParameterName { get; }
    [CompilerGeneratedAttribute]
public sealed virtual ImmutableArray`1<string> get_FixableDiagnosticIds();
    [AsyncStateMachineAttribute("NSubstitute.Analyzers.Shared.CodeFixProviders.AbstractReEntrantSetupCodeFixProvider`1/<RegisterCodeFixesAsync>d__3")]
public sealed virtual Task RegisterCodeFixesAsync(CodeFixContext context);
    protected abstract virtual string get_LambdaParameterName();
    protected abstract virtual IReadOnlyList`1<TArgumentSyntax> GetArguments(IInvocationOperation invocationOperation);
    protected abstract virtual TArgumentSyntax UpdateArgumentExpression(TArgumentSyntax argument, SyntaxNode expression);
    protected abstract virtual SyntaxNode GetArgumentExpression(TArgumentSyntax argument);
    protected abstract virtual SyntaxNode CreateArrayCreationExpression(SyntaxNode typeSyntax, IEnumerable`1<SyntaxNode> elements);
    [AsyncStateMachineAttribute("NSubstitute.Analyzers.Shared.CodeFixProviders.AbstractReEntrantSetupCodeFixProvider`1/<CreateChangedDocument>d__10")]
private Task`1<Document> CreateChangedDocument(CodeFixContext context, SemanticModel semanticModel, IInvocationOperation invocationOperation, IMethodSymbol methodSymbol, CancellationToken ct);
    private TArgumentSyntax CreateUpdatedParamsArgument(SemanticModel semanticModel, IMethodSymbol methodSymbol, IArgumentOperation argumentOperation, SyntaxGenerator syntaxGenerator, TArgumentSyntax argumentSyntax);
    private TArgumentSyntax CreateUpdatedArgument(SyntaxGenerator syntaxGenerator, TArgumentSyntax argument);
    private static ITypeSymbol ConstructCallInfoLambdaType(IMethodSymbol methodSymbol, Compilation compilation);
    private bool IsFixSupported(IInvocationOperation invocationOperation);
    [NullableContextAttribute("2")]
private bool IsArrayParamsArgument(IArgumentOperation operation);
    private SyntaxNode CreateLambdaExpression(SyntaxGenerator syntaxGenerator, SyntaxNode statement);
    [NullableContextAttribute("0")]
[CompilerGeneratedAttribute]
private bool <IsFixSupported>b__14_0(IArgumentOperation argumentOperation);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal abstract class NSubstitute.Analyzers.Shared.CodeFixProviders.AbstractSubstituteForInternalMemberCodeFixProvider`1 : AbstractSuppressDiagnosticsCodeFixProvider {
    private ISubstituteProxyAnalysis _substituteProxyAnalysis;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[CompilerGeneratedAttribute]
private ImmutableArray`1<string> <FixableDiagnosticIds>k__BackingField;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public ImmutableArray`1<string> FixableDiagnosticIds { get; }
    protected AbstractSubstituteForInternalMemberCodeFixProvider`1(ISubstituteProxyAnalysis substituteProxyAnalysis);
    [CompilerGeneratedAttribute]
public sealed virtual ImmutableArray`1<string> get_FixableDiagnosticIds();
    [AsyncStateMachineAttribute("NSubstitute.Analyzers.Shared.CodeFixProviders.AbstractSubstituteForInternalMemberCodeFixProvider`1/<RegisterCodeFixesAsync>d__5")]
public sealed virtual Task RegisterCodeFixesAsync(CodeFixContext context);
    protected abstract virtual void RegisterCodeFix(CodeFixContext context, TCompilationUnitSyntax compilationUnitSyntax);
    private SyntaxReference GetDeclaringSyntaxReference(IInvocationOperation invocationOperation);
    private TCompilationUnitSyntax FindCompilationUnitSyntax(SyntaxNode syntaxNode);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal abstract class NSubstitute.Analyzers.Shared.CodeFixProviders.AbstractSuppressDiagnosticsCodeFixProvider : CodeFixProvider {
    [AsyncStateMachineAttribute("NSubstitute.Analyzers.Shared.CodeFixProviders.AbstractSuppressDiagnosticsCodeFixProvider/<RegisterCodeFixesAsync>d__0")]
public virtual Task RegisterCodeFixesAsync(CodeFixContext context);
    [IteratorStateMachineAttribute("NSubstitute.Analyzers.Shared.CodeFixProviders.AbstractSuppressDiagnosticsCodeFixProvider/<GetSuppressibleSymbol>d__1")]
protected virtual IEnumerable`1<ISymbol> GetSuppressibleSymbol(SemanticModel model, SyntaxNode syntaxNode, ISymbol symbol);
    private static string CreateCodeFixTitle(Diagnostic diagnostic, ISymbol innerSymbol);
    private static string GetSymbolTitlePrefix(ISymbol innerSymbol);
    private Task`1<Solution> GetTransformedSolutionAsync(CodeFixContext context, Diagnostic diagnostic, TextDocument settingsFile, ISymbol symbol, CancellationToken cancellationToken);
    private static AnalyzersSettings GetUpdatedAnalyzersOptions(CodeFixContext context, Diagnostic diagnostic, ISymbol symbol, CancellationToken cancellationToken);
    private static string CreateSuppressionTarget(ISymbol symbol);
    private static TextDocument GetSettingsFile(Project project);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal abstract class NSubstitute.Analyzers.Shared.CodeFixProviders.AbstractSyncOverAsyncThrowsCodeFixProvider : CodeFixProvider {
    private ISubstitutionOperationFinder _substitutionOperationFinder;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[CompilerGeneratedAttribute]
private ImmutableArray`1<string> <FixableDiagnosticIds>k__BackingField;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public ImmutableArray`1<string> FixableDiagnosticIds { get; }
    protected AbstractSyncOverAsyncThrowsCodeFixProvider(ISubstitutionOperationFinder substitutionOperationFinder);
    [CompilerGeneratedAttribute]
public sealed virtual ImmutableArray`1<string> get_FixableDiagnosticIds();
    public sealed virtual FixAllProvider GetFixAllProvider();
    [AsyncStateMachineAttribute("NSubstitute.Analyzers.Shared.CodeFixProviders.AbstractSyncOverAsyncThrowsCodeFixProvider/<RegisterCodeFixesAsync>d__6")]
public sealed virtual Task RegisterCodeFixesAsync(CodeFixContext context);
    protected abstract virtual SyntaxNode UpdateMemberExpression(IInvocationOperation invocationOperation, SyntaxNode updatedNameSyntax);
    [AsyncStateMachineAttribute("NSubstitute.Analyzers.Shared.CodeFixProviders.AbstractSyncOverAsyncThrowsCodeFixProvider/<CreateChangedDocument>d__8")]
private Task`1<Document> CreateChangedDocument(CodeFixContext context, SemanticModel semanticModel, IInvocationOperation invocationOperation, bool useModernSyntax, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("NSubstitute.Analyzers.Shared.CodeFixProviders.AbstractSyncOverAsyncThrowsCodeFixProvider/<CreateThrowsAsyncInvocationExpression>d__9")]
private Task`1<SyntaxNode> CreateThrowsAsyncInvocationExpression(IInvocationOperation invocationOperation, IMethodSymbol invocationSymbol, CodeFixContext context);
    [AsyncStateMachineAttribute("NSubstitute.Analyzers.Shared.CodeFixProviders.AbstractSyncOverAsyncThrowsCodeFixProvider/<CreateReturnInvocationExpression>d__10")]
private Task`1<SyntaxNode> CreateReturnInvocationExpression(IInvocationOperation invocationOperation, IMethodSymbol invocationSymbol, CodeFixContext context);
    private static SyntaxNode CreateReturnOrdinalInvocationExpression(IInvocationOperation invocationOperation, SyntaxGenerator syntaxGenerator, SyntaxNode fromExceptionInvocationExpression, string returnsMethodName);
    private SyntaxNode CreateReturnExtensionInvocationExpression(IInvocationOperation invocationOperation, SyntaxGenerator syntaxGenerator, SyntaxNode fromExceptionInvocationExpression, string returnsMethodName);
    private static SyntaxNode CreateFromExceptionInvocationExpression(SyntaxGenerator syntaxGenerator, IInvocationOperation invocationOperation);
    private static SyntaxNode GetExceptionCreationExpression(IInvocationOperation invocationOperation, SyntaxGenerator syntaxGenerator);
    private static bool SupportsThrowsAsync(Compilation compilation);
    private static string GetReplacementMethodName(IInvocationOperation invocationOperation, bool useModernSyntax);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal abstract class NSubstitute.Analyzers.Shared.CodeRefactoringProviders.AbstractIntroduceSubstituteCodeRefactoringProvider`3 : CodeRefactoringProvider {
    [AsyncStateMachineAttribute("NSubstitute.Analyzers.Shared.CodeRefactoringProviders.AbstractIntroduceSubstituteCodeRefactoringProvider`3/<ComputeRefactoringsAsync>d__0")]
public sealed virtual Task ComputeRefactoringsAsync(CodeRefactoringContext context);
    protected abstract virtual IReadOnlyList`1<TArgumentSyntax> GetArgumentSyntaxNodes(TArgumentListSyntax argumentListSyntax, TextSpan span);
    protected abstract virtual TObjectCreationExpressionSyntax UpdateObjectCreationExpression(TObjectCreationExpressionSyntax objectCreationExpressionSyntax, IReadOnlyList`1<TArgumentSyntax> argumentSyntax);
    protected virtual bool IsMissing(TArgumentSyntax argumentSyntax);
    protected abstract virtual SyntaxNode FindSiblingNodeForLocalSubstitute(TObjectCreationExpressionSyntax creationExpression);
    protected abstract virtual SyntaxNode FindSiblingNodeForReadonlySubstitute(SyntaxNode creationExpression);
    [IteratorStateMachineAttribute("NSubstitute.Analyzers.Shared.CodeRefactoringProviders.AbstractIntroduceSubstituteCodeRefactoringProvider`3/<CreateRefactoringActions>d__6")]
private IEnumerable`1<CodeAction> CreateRefactoringActions(CodeRefactoringContext context, SemanticModel semanticModel, TObjectCreationExpressionSyntax objectCreationExpressionSyntax, TArgumentListSyntax argumentListSyntax);
    [AsyncStateMachineAttribute("NSubstitute.Analyzers.Shared.CodeRefactoringProviders.AbstractIntroduceSubstituteCodeRefactoringProvider`3/<IntroduceReadonlySubstitute>d__7")]
private Task`1<Document> IntroduceReadonlySubstitute(CodeRefactoringContext context, TObjectCreationExpressionSyntax objectCreationExpressionSyntax, IReadOnlyList`1<TArgumentSyntax> existingArguments, IReadOnlyList`1<IParameterSymbol> constructorParameters, IReadOnlyList`1<int> missingArgumentsPositions, SyntaxNode siblingNode);
    [AsyncStateMachineAttribute("NSubstitute.Analyzers.Shared.CodeRefactoringProviders.AbstractIntroduceSubstituteCodeRefactoringProvider`3/<IntroduceLocalSubstitute>d__8")]
private Task`1<Document> IntroduceLocalSubstitute(CodeRefactoringContext context, TObjectCreationExpressionSyntax objectCreationExpressionSyntax, IReadOnlyList`1<TArgumentSyntax> existingArguments, IReadOnlyList`1<IParameterSymbol> constructorParameters, IReadOnlyList`1<int> missingArgumentsPositions, SyntaxNode siblingNode);
    [AsyncStateMachineAttribute("NSubstitute.Analyzers.Shared.CodeRefactoringProviders.AbstractIntroduceSubstituteCodeRefactoringProvider`3/<IntroduceSubstitute>d__9")]
private Task`1<Document> IntroduceSubstitute(CodeRefactoringContext context, TObjectCreationExpressionSyntax objectCreationExpressionSyntax, IReadOnlyList`1<TArgumentSyntax> existingArguments, IReadOnlyList`1<IParameterSymbol> constructorParameters, IReadOnlyList`1<int> missingArgumentsPositions, SyntaxNode siblingNode, Func`4<SyntaxGenerator, IParameterSymbol, SyntaxNode, SyntaxNode> declarationFactory);
    private IMethodSymbol GetKnownConstructorSymbol(SemanticModel semanticModel, TObjectCreationExpressionSyntax objectCreationExpressionSyntax);
    private IReadOnlyList`1<int> GetMissingArgumentsPositions(IReadOnlyList`1<TArgumentSyntax> argumentSyntaxNodes, IReadOnlyList`1<IParameterSymbol> parameterSymbols);
    private int FindArgumentIndexAtSpan(IReadOnlyList`1<TArgumentSyntax> argumentSyntaxNodes, TextSpan span);
    [CompilerGeneratedAttribute]
internal static SyntaxNode <IntroduceReadonlySubstitute>g__CreateFieldDeclaration|7_0(SyntaxGenerator syntaxGenerator, IParameterSymbol parameterSymbol, SyntaxNode invocationExpression);
    [CompilerGeneratedAttribute]
internal static SyntaxNode <IntroduceLocalSubstitute>g__CreateLocalDeclaration|8_0(SyntaxGenerator syntaxGenerator, IParameterSymbol parameterSymbol, SyntaxNode invocationExpression);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal abstract class NSubstitute.Analyzers.Shared.DiagnosticAnalyzers.AbstractAsyncReceivedInOrderCallbackAnalyzer : AbstractDiagnosticAnalyzer {
    private Action`1<OperationAnalysisContext> _analyzeInvocationAction;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[CompilerGeneratedAttribute]
private ImmutableArray`1<DiagnosticDescriptor> <SupportedDiagnostics>k__BackingField;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public ImmutableArray`1<DiagnosticDescriptor> SupportedDiagnostics { get; }
    protected AbstractAsyncReceivedInOrderCallbackAnalyzer(IDiagnosticDescriptorsProvider diagnosticDescriptorsProvider);
    [CompilerGeneratedAttribute]
public sealed virtual ImmutableArray`1<DiagnosticDescriptor> get_SupportedDiagnostics();
    protected abstract virtual Nullable`1<SyntaxToken> GetAsyncToken(SyntaxNode node);
    protected sealed virtual void InitializeAnalyzer(AnalysisContext context);
    private void AnalyzeInvocation(OperationAnalysisContext operationAnalysisContext);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal abstract class NSubstitute.Analyzers.Shared.DiagnosticAnalyzers.AbstractCallInfoAnalyzer : AbstractDiagnosticAnalyzer {
    private ICallInfoFinder _callInfoFinder;
    private ISubstitutionOperationFinder _substitutionOperationFinder;
    private Action`1<OperationAnalysisContext> _analyzeInvocationAction;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[CompilerGeneratedAttribute]
private ImmutableArray`1<DiagnosticDescriptor> <SupportedDiagnostics>k__BackingField;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public ImmutableArray`1<DiagnosticDescriptor> SupportedDiagnostics { get; }
    protected AbstractCallInfoAnalyzer(IDiagnosticDescriptorsProvider diagnosticDescriptorsProvider, ICallInfoFinder callInfoFinder, ISubstitutionOperationFinder substitutionOperationFinder);
    [CompilerGeneratedAttribute]
public sealed virtual ImmutableArray`1<DiagnosticDescriptor> get_SupportedDiagnostics();
    protected sealed virtual void InitializeAnalyzer(AnalysisContext context);
    protected abstract virtual bool CanCast(Compilation compilation, ITypeSymbol sourceSymbol, ITypeSymbol destinationSymbol);
    protected abstract virtual bool IsAssignableTo(Compilation compilation, ITypeSymbol fromSymbol, ITypeSymbol toSymbol);
    private bool SupportsCallInfo(Compilation compilation, IInvocationOperation invocationOperation);
    private void AnalyzeInvocation(OperationAnalysisContext operationAnalysisContext);
    private void AnalyzeIndexerInvocations(OperationAnalysisContext operationAnalysisContext, CallInfoContext callInfoContext, IReadOnlyList`1<IArgumentOperation> substituteCallParameters);
    private void AnalyzeArgAtInvocations(OperationAnalysisContext operationAnalysisContext, CallInfoContext callInfoContext, IReadOnlyList`1<IArgumentOperation> substituteCallParameters);
    private void AnalyzeArgInvocations(OperationAnalysisContext operationAnalysisContext, CallInfoContext callInfoContext, IReadOnlyList`1<IArgumentOperation> substituteCallParameters);
    private bool AnalyzeArgumentAccess(OperationAnalysisContext syntaxNodeContext, IReadOnlyList`1<IArgumentOperation> substituteCallParameters, IOperation indexerOperation, Nullable`1<int> position);
    private bool AnalyzeCast(OperationAnalysisContext operationAnalysisContext, IReadOnlyList`1<IArgumentOperation> substituteCallParameters, IOperation indexer, IndexerInfo& indexerInfo, Nullable`1<int> position);
    private bool AnalyzeAssignment(OperationAnalysisContext operationAnalysisContext, IReadOnlyList`1<IArgumentOperation> substituteCallParameters, IOperation indexerOperation, IndexerInfo& indexerInfo, Nullable`1<int> position);
    private IReadOnlyList`1<IArgumentOperation> GetSubstituteCallArgumentOperations(OperationAnalysisContext operationAnalysisContext, IInvocationOperation invocationOperation);
    private static IEnumerable`1<IArgumentOperation> GetArgumentOperations(IOperation substituteOperation);
    private IndexerInfo GetIndexerInfo(IOperation indexerOperation);
    private int GetMatchingParametersCount(Compilation compilation, IReadOnlyList`1<IArgumentOperation> substituteCallParameters, ITypeSymbol typeSymbol);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal abstract class NSubstitute.Analyzers.Shared.DiagnosticAnalyzers.AbstractConflictingArgumentAssignmentsAnalyzer : AbstractDiagnosticAnalyzer {
    private ICallInfoFinder _callInfoFinder;
    private Action`1<OperationAnalysisContext> _analyzeInvocationAction;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[CompilerGeneratedAttribute]
private ImmutableArray`1<DiagnosticDescriptor> <SupportedDiagnostics>k__BackingField;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public ImmutableArray`1<DiagnosticDescriptor> SupportedDiagnostics { get; }
    protected AbstractConflictingArgumentAssignmentsAnalyzer(IDiagnosticDescriptorsProvider diagnosticDescriptorsProvider, ICallInfoFinder callInfoFinder);
    [CompilerGeneratedAttribute]
public sealed virtual ImmutableArray`1<DiagnosticDescriptor> get_SupportedDiagnostics();
    protected sealed virtual void InitializeAnalyzer(AnalysisContext context);
    private void AnalyzeInvocation(OperationAnalysisContext syntaxNodeContext);
    [IteratorStateMachineAttribute("NSubstitute.Analyzers.Shared.DiagnosticAnalyzers.AbstractConflictingArgumentAssignmentsAnalyzer/<FindCallInfoIndexers>d__8")]
private IEnumerable`1<IOperation> FindCallInfoIndexers(IInvocationOperation invocationOperation);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal abstract class NSubstitute.Analyzers.Shared.DiagnosticAnalyzers.AbstractDiagnosticAnalyzer : DiagnosticAnalyzer {
    [CompilerGeneratedAttribute]
private IDiagnosticDescriptorsProvider <DiagnosticDescriptorsProvider>k__BackingField;
    protected IDiagnosticDescriptorsProvider DiagnosticDescriptorsProvider { get; }
    protected AbstractDiagnosticAnalyzer(IDiagnosticDescriptorsProvider diagnosticDescriptorsProvider);
    [CompilerGeneratedAttribute]
protected IDiagnosticDescriptorsProvider get_DiagnosticDescriptorsProvider();
    public sealed virtual void Initialize(AnalysisContext context);
    protected abstract virtual void InitializeAnalyzer(AnalysisContext context);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal abstract class NSubstitute.Analyzers.Shared.DiagnosticAnalyzers.AbstractNonSubstitutableMemberAnalyzer : AbstractNonSubstitutableSetupAnalyzer {
    private ISubstitutionOperationFinder _substitutionOperationFinder;
    private Action`1<OperationAnalysisContext> _analyzeInvocationAction;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[CompilerGeneratedAttribute]
private ImmutableArray`1<DiagnosticDescriptor> <SupportedDiagnostics>k__BackingField;
    [CompilerGeneratedAttribute]
private DiagnosticDescriptor <NonVirtualSetupDescriptor>k__BackingField;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public ImmutableArray`1<DiagnosticDescriptor> SupportedDiagnostics { get; }
    protected DiagnosticDescriptor NonVirtualSetupDescriptor { get; }
    protected AbstractNonSubstitutableMemberAnalyzer(IDiagnosticDescriptorsProvider diagnosticDescriptorsProvider, ISubstitutionOperationFinder substitutionOperationFinder, INonSubstitutableMemberAnalysis nonSubstitutableMemberAnalysis);
    [CompilerGeneratedAttribute]
public sealed virtual ImmutableArray`1<DiagnosticDescriptor> get_SupportedDiagnostics();
    [CompilerGeneratedAttribute]
protected sealed virtual DiagnosticDescriptor get_NonVirtualSetupDescriptor();
    protected sealed virtual void InitializeAnalyzer(AnalysisContext context);
    private void AnalyzeInvocation(OperationAnalysisContext operationAnalysisContext);
    [NullableContextAttribute("2")]
private void AnalyzeMember(OperationAnalysisContext operationAnalysisContext, IOperation accessedMember);
    private bool IsValidForAnalysis(IOperation accessedMember);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal abstract class NSubstitute.Analyzers.Shared.DiagnosticAnalyzers.AbstractNonSubstitutableMemberArgumentMatcherAnalyzer : AbstractDiagnosticAnalyzer {
    [CompilerGeneratedAttribute]
private static ImmutableHashSet`1<OperationKind> <MaybeAllowedAncestors>k__BackingField;
    private static ImmutableHashSet`1<OperationKind> IgnoredAncestors;
    private static ImmutableHashSet`1<OperationKind> DynamicOperations;
    private Action`1<OperationAnalysisContext> _analyzeInvocationAction;
    private INonSubstitutableMemberAnalysis _nonSubstitutableMemberAnalysis;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[CompilerGeneratedAttribute]
private ImmutableArray`1<DiagnosticDescriptor> <SupportedDiagnostics>k__BackingField;
    internal static ImmutableHashSet`1<OperationKind> MaybeAllowedAncestors { get; }
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public ImmutableArray`1<DiagnosticDescriptor> SupportedDiagnostics { get; }
    protected AbstractNonSubstitutableMemberArgumentMatcherAnalyzer(INonSubstitutableMemberAnalysis nonSubstitutableMemberAnalysis, IDiagnosticDescriptorsProvider diagnosticDescriptorsProvider);
    private static AbstractNonSubstitutableMemberArgumentMatcherAnalyzer();
    [CompilerGeneratedAttribute]
internal static ImmutableHashSet`1<OperationKind> get_MaybeAllowedAncestors();
    [CompilerGeneratedAttribute]
public sealed virtual ImmutableArray`1<DiagnosticDescriptor> get_SupportedDiagnostics();
    protected sealed virtual void InitializeAnalyzer(AnalysisContext context);
    private void AnalyzeInvocation(OperationAnalysisContext operationAnalysisContext);
    private void AnalyzeArgLikeMethod(OperationAnalysisContext context, IInvocationOperation invocationOperation);
    private bool AnalyzeEnclosingExpression(OperationAnalysisContext context, IInvocationOperation argInvocation, IOperation enclosingOperation, IMemberReferenceOperation memberReferenceOperation);
    private void AnalyzeAssignment(OperationAnalysisContext context, IInvocationOperation invocationOperation, IMemberReferenceOperation memberReferenceOperation);
    private bool IsPrecededByReceivedLikeMethod(IOperation operation);
    private bool IsWithinWhenLikeMethod(IOperation operation);
    private static IMemberReferenceOperation GetMemberReferenceOperation(IOperation operation);
    private IOperation FindMaybeAllowedEnclosingExpression(IOperation operation);
    private IOperation FindIgnoredEnclosingExpression(IOperation operation);
    private static IOperation FindEnclosingExpression(IOperation operation, ImmutableHashSet`1<OperationKind> ancestors);
    private void TryReportDiagnostic(OperationAnalysisContext context, IInvocationOperation argInvocation, ISymbol enclosingExpressionSymbol);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal abstract class NSubstitute.Analyzers.Shared.DiagnosticAnalyzers.AbstractNonSubstitutableMemberReceivedAnalyzer : AbstractNonSubstitutableSetupAnalyzer {
    private Action`1<OperationAnalysisContext> _analyzeInvocationOperation;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[CompilerGeneratedAttribute]
private ImmutableArray`1<DiagnosticDescriptor> <SupportedDiagnostics>k__BackingField;
    [CompilerGeneratedAttribute]
private DiagnosticDescriptor <NonVirtualSetupDescriptor>k__BackingField;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public ImmutableArray`1<DiagnosticDescriptor> SupportedDiagnostics { get; }
    protected DiagnosticDescriptor NonVirtualSetupDescriptor { get; }
    protected AbstractNonSubstitutableMemberReceivedAnalyzer(IDiagnosticDescriptorsProvider diagnosticDescriptorsProvider, INonSubstitutableMemberAnalysis nonSubstitutableMemberAnalysis);
    [CompilerGeneratedAttribute]
public sealed virtual ImmutableArray`1<DiagnosticDescriptor> get_SupportedDiagnostics();
    [CompilerGeneratedAttribute]
protected sealed virtual DiagnosticDescriptor get_NonVirtualSetupDescriptor();
    protected sealed virtual void InitializeAnalyzer(AnalysisContext context);
    private void AnalyzeInvocation(OperationAnalysisContext syntaxNodeContext);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal abstract class NSubstitute.Analyzers.Shared.DiagnosticAnalyzers.AbstractNonSubstitutableMemberReceivedInOrderAnalyzer : AbstractNonSubstitutableSetupAnalyzer {
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[CompilerGeneratedAttribute]
private ImmutableArray`1<DiagnosticDescriptor> <SupportedDiagnostics>k__BackingField;
    [NullableAttribute("0")]
[CompilerGeneratedAttribute]
private ImmutableArray`1<OperationKind> <IgnoredAncestorPaths>k__BackingField;
    private Action`1<OperationAnalysisContext> _analyzeInvocationAction;
    private ISubstitutionOperationFinder _substitutionOperationFinder;
    [CompilerGeneratedAttribute]
private DiagnosticDescriptor <NonVirtualSetupDescriptor>k__BackingField;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public ImmutableArray`1<DiagnosticDescriptor> SupportedDiagnostics { get; }
    [NullableAttribute("0")]
protected ImmutableArray`1<OperationKind> IgnoredAncestorPaths { get; }
    protected DiagnosticDescriptor NonVirtualSetupDescriptor { get; }
    protected AbstractNonSubstitutableMemberReceivedInOrderAnalyzer(ISubstitutionOperationFinder substitutionOperationFinder, INonSubstitutableMemberAnalysis nonSubstitutableMemberAnalysis, IDiagnosticDescriptorsProvider diagnosticDescriptorsProvider);
    [CompilerGeneratedAttribute]
public sealed virtual ImmutableArray`1<DiagnosticDescriptor> get_SupportedDiagnostics();
    [NullableContextAttribute("0")]
[CompilerGeneratedAttribute]
protected ImmutableArray`1<OperationKind> get_IgnoredAncestorPaths();
    [CompilerGeneratedAttribute]
protected sealed virtual DiagnosticDescriptor get_NonVirtualSetupDescriptor();
    protected sealed virtual void InitializeAnalyzer(AnalysisContext context);
    private void AnalyzeInvocation(OperationAnalysisContext operationAnalysisContext);
    private bool ShouldAnalyzeNode(OperationAnalysisContext operationAnalysisContext, IOperation operation);
    private static ILocalSymbol GetVariableDeclaratorSymbol(IOperation operation);
    private IOperation FindIgnoredEnclosingOperation(IOperation operation);
    [NullableContextAttribute("0")]
[CompilerGeneratedAttribute]
private bool <FindIgnoredEnclosingOperation>b__16_0(IOperation ancestor);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal abstract class NSubstitute.Analyzers.Shared.DiagnosticAnalyzers.AbstractNonSubstitutableMemberWhenAnalyzer : AbstractNonSubstitutableSetupAnalyzer {
    private ISubstitutionOperationFinder _substitutionOperationFinder;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[CompilerGeneratedAttribute]
private ImmutableArray`1<DiagnosticDescriptor> <SupportedDiagnostics>k__BackingField;
    private Action`1<OperationAnalysisContext> _analyzeInvocationAction;
    [CompilerGeneratedAttribute]
private DiagnosticDescriptor <NonVirtualSetupDescriptor>k__BackingField;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public ImmutableArray`1<DiagnosticDescriptor> SupportedDiagnostics { get; }
    protected DiagnosticDescriptor NonVirtualSetupDescriptor { get; }
    protected AbstractNonSubstitutableMemberWhenAnalyzer(IDiagnosticDescriptorsProvider diagnosticDescriptorsProvider, ISubstitutionOperationFinder substitutionOperationFinder, INonSubstitutableMemberAnalysis nonSubstitutableMemberAnalysis);
    [CompilerGeneratedAttribute]
public sealed virtual ImmutableArray`1<DiagnosticDescriptor> get_SupportedDiagnostics();
    [CompilerGeneratedAttribute]
protected sealed virtual DiagnosticDescriptor get_NonVirtualSetupDescriptor();
    protected sealed virtual void InitializeAnalyzer(AnalysisContext context);
    private void AnalyzeInvocation(OperationAnalysisContext context);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal abstract class NSubstitute.Analyzers.Shared.DiagnosticAnalyzers.AbstractNonSubstitutableSetupAnalyzer : AbstractDiagnosticAnalyzer {
    private INonSubstitutableMemberAnalysis _nonSubstitutableMemberAnalysis;
    private DiagnosticDescriptor _internalSetupSpecificationDescriptor;
    protected DiagnosticDescriptor NonVirtualSetupDescriptor { get; }
    protected AbstractNonSubstitutableSetupAnalyzer(IDiagnosticDescriptorsProvider diagnosticDescriptorsProvider, INonSubstitutableMemberAnalysis nonSubstitutableMemberAnalysis);
    protected abstract virtual DiagnosticDescriptor get_NonVirtualSetupDescriptor();
    protected void Analyze(OperationAnalysisContext operationAnalysisContext, IOperation operation);
    private void ReportDiagnostics(OperationAnalysisContext context, NonSubstitutableMemberAnalysisResult& analysisResult);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal abstract class NSubstitute.Analyzers.Shared.DiagnosticAnalyzers.AbstractReceivedInReceivedInOrderAnalyzer : AbstractDiagnosticAnalyzer {
    private ISubstitutionOperationFinder _substitutionOperationFinder;
    private Action`1<OperationAnalysisContext> _analyzeInvocationAction;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[CompilerGeneratedAttribute]
private ImmutableArray`1<DiagnosticDescriptor> <SupportedDiagnostics>k__BackingField;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public ImmutableArray`1<DiagnosticDescriptor> SupportedDiagnostics { get; }
    protected AbstractReceivedInReceivedInOrderAnalyzer(ISubstitutionOperationFinder substitutionOperationFinder, IDiagnosticDescriptorsProvider diagnosticDescriptorsProvider);
    [CompilerGeneratedAttribute]
public sealed virtual ImmutableArray`1<DiagnosticDescriptor> get_SupportedDiagnostics();
    protected sealed virtual void InitializeAnalyzer(AnalysisContext context);
    private void AnalyzeInvocation(OperationAnalysisContext operationAnalysisContext);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal abstract class NSubstitute.Analyzers.Shared.DiagnosticAnalyzers.AbstractReEntrantSetupAnalyzer : AbstractDiagnosticAnalyzer {
    private IReEntrantCallFinder _reEntrantCallFinder;
    private Action`1<OperationAnalysisContext> _analyzeInvocationAction;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[CompilerGeneratedAttribute]
private ImmutableArray`1<DiagnosticDescriptor> <SupportedDiagnostics>k__BackingField;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public ImmutableArray`1<DiagnosticDescriptor> SupportedDiagnostics { get; }
    protected AbstractReEntrantSetupAnalyzer(IDiagnosticDescriptorsProvider diagnosticDescriptorsProvider, IReEntrantCallFinder reEntrantCallFinder);
    [CompilerGeneratedAttribute]
public sealed virtual ImmutableArray`1<DiagnosticDescriptor> get_SupportedDiagnostics();
    protected sealed virtual void InitializeAnalyzer(AnalysisContext context);
    private void AnalyzeInvocation(OperationAnalysisContext operationAnalysisContext);
    private void AnalyzeParamsArgument(OperationAnalysisContext context, IArgumentOperation argumentOperation, IInvocationOperation invocationOperation);
    private void AnalyzeExpression(OperationAnalysisContext context, IOperation operation, IInvocationOperation invocationOperation);
    [NullableContextAttribute("2")]
private bool IsPassedByParamsArray(IArgumentOperation argumentOperation);
    private bool IsPassedByParamsArrayOfCallInfoFunc(Compilation compilation, IArgumentOperation argumentOperation);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal abstract class NSubstitute.Analyzers.Shared.DiagnosticAnalyzers.AbstractSubstituteAnalyzer : AbstractDiagnosticAnalyzer {
    private ISubstituteProxyAnalysis _substituteProxyAnalysis;
    private ISubstituteConstructorAnalysis _substituteConstructorAnalysis;
    private ISubstituteConstructorMatcher _substituteConstructorMatcher;
    private Action`1<OperationAnalysisContext> _analyzeInvocationAction;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[CompilerGeneratedAttribute]
private ImmutableArray`1<DiagnosticDescriptor> <SupportedDiagnostics>k__BackingField;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public ImmutableArray`1<DiagnosticDescriptor> SupportedDiagnostics { get; }
    protected AbstractSubstituteAnalyzer(IDiagnosticDescriptorsProvider diagnosticDescriptorsProvider, ISubstituteProxyAnalysis substituteProxyAnalysis, ISubstituteConstructorAnalysis substituteConstructorAnalysis, ISubstituteConstructorMatcher substituteConstructorMatcher);
    protected abstract virtual SyntaxNode GetCorrespondingSubstituteInvocationExpressionSyntax(IInvocationOperation invocationOperation, string substituteName);
    protected abstract virtual SyntaxNode GetSubstituteInvocationExpressionSyntaxWithoutConstructorArguments(IInvocationOperation invocationOperation);
    [CompilerGeneratedAttribute]
public sealed virtual ImmutableArray`1<DiagnosticDescriptor> get_SupportedDiagnostics();
    protected sealed virtual void InitializeAnalyzer(AnalysisContext context);
    private void AnalyzeInvocation(OperationAnalysisContext operationAnalysisContext);
    private void AnalyzeSubstitute(SubstituteContext substituteContext);
    private void AnalyzePartialSubstitute(SubstituteContext substituteContext);
    private void AnalyzeConstructor(SubstituteContext substituteContext, ConstructorContext constructorContext);
    private bool AnalyzeProxies(SubstituteContext substituteContext);
    private bool AnalyzeConstructorParametersCount(SubstituteContext substituteContext, ConstructorContext constructorContext);
    private bool AnalyzeTypeKind(SubstituteContext substituteContext, ITypeSymbol proxyType);
    private bool AnalyzeTypeAccessibility(SubstituteContext substituteContext, ITypeSymbol proxyType);
    private bool AnalyzeConstructorInvocation(SubstituteContext substituteContext, ConstructorContext constructorContext);
    private bool AnalyzeConstructorAccessibility(SubstituteContext substituteContext, ConstructorContext constructorContext);
    private string GetCorrespondingSubstituteMethod(IInvocationOperation invocationOperation);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal abstract class NSubstitute.Analyzers.Shared.DiagnosticAnalyzers.AbstractSubstituteConstructorMatcher : object {
    private static IReadOnlyDictionary`2<SpecialType, SpecialType> WellKnownUnsupportedConversions;
    private static IReadOnlyDictionary`2<SpecialType, HashSet`1<SpecialType>> WellKnownSupportedConversions;
    private static AbstractSubstituteConstructorMatcher();
    public sealed virtual bool MatchesInvocation(Compilation compilation, IMethodSymbol methodSymbol, IReadOnlyList`1<ITypeSymbol> invocationParameters);
    protected abstract virtual bool IsConvertible(Compilation compilation, ITypeSymbol source, ITypeSymbol destination);
    private bool MatchesInvocation(Compilation compilation, IParameterSymbol symbol, IReadOnlyList`1<ITypeSymbol> invocationParameters);
    private bool ClassifyConversion(Compilation compilation, ITypeSymbol source, ITypeSymbol destination);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal abstract class NSubstitute.Analyzers.Shared.DiagnosticAnalyzers.AbstractSyncOverAsyncThrowsAnalyzer : AbstractDiagnosticAnalyzer {
    private ISubstitutionOperationFinder _substitutionOperationFinder;
    private Action`1<OperationAnalysisContext> _analyzeInvocationAction;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[CompilerGeneratedAttribute]
private ImmutableArray`1<DiagnosticDescriptor> <SupportedDiagnostics>k__BackingField;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public ImmutableArray`1<DiagnosticDescriptor> SupportedDiagnostics { get; }
    protected AbstractSyncOverAsyncThrowsAnalyzer(IDiagnosticDescriptorsProvider diagnosticDescriptorsProvider, ISubstitutionOperationFinder substitutionOperationFinder);
    [CompilerGeneratedAttribute]
public sealed virtual ImmutableArray`1<DiagnosticDescriptor> get_SupportedDiagnostics();
    protected sealed virtual void InitializeAnalyzer(AnalysisContext context);
    private void AnalyzeInvocation(OperationAnalysisContext operationAnalysisContext);
    private static ITypeSymbol GetReturnTypeSymbol(IOperation substituteOperation);
    private static bool IsTask(ITypeSymbol returnType, Compilation compilation);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal abstract class NSubstitute.Analyzers.Shared.DiagnosticAnalyzers.AbstractUnusedReceivedAnalyzer : AbstractDiagnosticAnalyzer {
    private Action`1<OperationAnalysisContext> _analyzeInvocationAction;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[CompilerGeneratedAttribute]
private ImmutableArray`1<DiagnosticDescriptor> <SupportedDiagnostics>k__BackingField;
    private static ImmutableHashSet`1<OperationKind> PossibleParents;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public ImmutableArray`1<DiagnosticDescriptor> SupportedDiagnostics { get; }
    protected AbstractUnusedReceivedAnalyzer(IDiagnosticDescriptorsProvider diagnosticDescriptorsProvider);
    private static AbstractUnusedReceivedAnalyzer();
    [CompilerGeneratedAttribute]
public sealed virtual ImmutableArray`1<DiagnosticDescriptor> get_SupportedDiagnostics();
    protected sealed virtual void InitializeAnalyzer(AnalysisContext context);
    private void AnalyzeInvocation(OperationAnalysisContext operationAnalysisContext);
    private bool IsConsideredAsUsed(IOperation operation);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal abstract class NSubstitute.Analyzers.Shared.DiagnosticAnalyzers.AbstractWithAnyArgsArgumentMatcherAnalyzer : AbstractDiagnosticAnalyzer {
    private ISubstitutionOperationFinder _substitutionOperationFinder;
    private Action`1<OperationAnalysisContext> _analyzeInvocationAction;
    private static ImmutableHashSet`1<OperationKind> MaybeAllowedArgMatcherAncestors;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[CompilerGeneratedAttribute]
private ImmutableArray`1<DiagnosticDescriptor> <SupportedDiagnostics>k__BackingField;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public ImmutableArray`1<DiagnosticDescriptor> SupportedDiagnostics { get; }
    protected AbstractWithAnyArgsArgumentMatcherAnalyzer(IDiagnosticDescriptorsProvider diagnosticDescriptorsProvider, ISubstitutionOperationFinder substitutionOperationFinder);
    private static AbstractWithAnyArgsArgumentMatcherAnalyzer();
    [CompilerGeneratedAttribute]
public sealed virtual ImmutableArray`1<DiagnosticDescriptor> get_SupportedDiagnostics();
    protected sealed virtual void InitializeAnalyzer(AnalysisContext context);
    private void AnalyzeInvocation(OperationAnalysisContext context);
    private void AnalyzeWhenLikeMethod(OperationAnalysisContext context, IInvocationOperation invocationOperation);
    private void AnalyzeReturnsLikeMethod(OperationAnalysisContext context, IInvocationOperation invocationOperation);
    private static IReadOnlyList`1<IOperation> GetArguments(IOperation substitutedOperation);
    private void AnalyzeArgument(OperationAnalysisContext context, IOperation operation);
    private void AnalyzeArgLikeMethodForReceivedWithAnyArgs(OperationAnalysisContext context, IInvocationOperation argInvocationOperation);
    private static IMemberReferenceOperation GetMemberReferenceOperation(IOperation operation);
    private IOperation FindMaybeAllowedEnclosingOperation(IInvocationOperation invocationOperation);
    private static IOperation FindEnclosingOperation(IInvocationOperation invocationOperation, ImmutableHashSet`1<OperationKind> ancestors);
    [CompilerGeneratedAttribute]
internal static ImmutableArray`1<IOperation> <AnalyzeWhenLikeMethod>g__Arguments|9_0(IPropertyReferenceOperation propertyReferenceOperation);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class NSubstitute.Analyzers.Shared.DiagnosticAnalyzers.CallInfoContext : object {
    [CompilerGeneratedAttribute]
private static CallInfoContext <Empty>k__BackingField;
    [CompilerGeneratedAttribute]
private IReadOnlyList`1<IOperation> <IndexerAccessesOperations>k__BackingField;
    [CompilerGeneratedAttribute]
private IReadOnlyList`1<IInvocationOperation> <ArgAtInvocationsOperations>k__BackingField;
    [CompilerGeneratedAttribute]
private IReadOnlyList`1<IInvocationOperation> <ArgInvocationsOperations>k__BackingField;
    public static CallInfoContext Empty { get; }
    public IReadOnlyList`1<IOperation> IndexerAccessesOperations { get; }
    public IReadOnlyList`1<IInvocationOperation> ArgAtInvocationsOperations { get; }
    public IReadOnlyList`1<IInvocationOperation> ArgInvocationsOperations { get; }
    public CallInfoContext(IReadOnlyList`1<IInvocationOperation> argAtInvocations, IReadOnlyList`1<IInvocationOperation> argInvocations, IReadOnlyList`1<IOperation> indexerAccesses);
    private static CallInfoContext();
    [CompilerGeneratedAttribute]
public static CallInfoContext get_Empty();
    [CompilerGeneratedAttribute]
public IReadOnlyList`1<IOperation> get_IndexerAccessesOperations();
    [CompilerGeneratedAttribute]
public IReadOnlyList`1<IInvocationOperation> get_ArgAtInvocationsOperations();
    [CompilerGeneratedAttribute]
public IReadOnlyList`1<IInvocationOperation> get_ArgInvocationsOperations();
    public CallInfoContext Merge(CallInfoContext callInfoContext);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class NSubstitute.Analyzers.Shared.DiagnosticAnalyzers.CallInfoFinder : object {
    [CompilerGeneratedAttribute]
private static CallInfoFinder <Instance>k__BackingField;
    public static CallInfoFinder Instance { get; }
    private static CallInfoFinder();
    [CompilerGeneratedAttribute]
public static CallInfoFinder get_Instance();
    public sealed virtual CallInfoContext GetCallInfoContext(IArgumentOperation argumentOperation);
    private static CallInfoContext CreateFilteredCallInfoContext(CallInfoContext callContext, IParameterSymbol callInfoParameterSymbol);
    private static IReadOnlyList`1<T> GetMatchingNodes(IReadOnlyList`1<T> nodes, IParameterSymbol parameterSymbol);
    private static bool HasMatchingParameterReference(IOperation operation, IParameterSymbol callInfoParameterSymbol);
    private static IParameterReferenceOperation FindMatchingParameterReference(IOperation operation);
    [IteratorStateMachineAttribute("NSubstitute.Analyzers.Shared.DiagnosticAnalyzers.CallInfoFinder/<GetCallInfoOperations>d__8")]
private static IEnumerable`1<IOperation> GetCallInfoOperations(IArgumentOperation argumentOperation);
    private static IParameterSymbol GetCallInfoParameterSymbol(IOperation operation);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class NSubstitute.Analyzers.Shared.DiagnosticAnalyzers.ConstructorContext : ValueType {
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[CompilerGeneratedAttribute]
private IMethodSymbol[] <AccessibleConstructors>k__BackingField;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[CompilerGeneratedAttribute]
private IMethodSymbol[] <PossibleConstructors>k__BackingField;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[CompilerGeneratedAttribute]
private ITypeSymbol[] <InvocationParameters>k__BackingField;
    [CompilerGeneratedAttribute]
private ITypeSymbol <ConstructorType>k__BackingField;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public IMethodSymbol[] AccessibleConstructors { get; }
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public IMethodSymbol[] PossibleConstructors { get; }
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public ITypeSymbol[] InvocationParameters { get; }
    public ITypeSymbol ConstructorType { get; }
    public ConstructorContext(ITypeSymbol constructorType, IMethodSymbol[] accessibleConstructors, IMethodSymbol[] possibleConstructors, ITypeSymbol[] invocationParameters);
    [IsReadOnlyAttribute]
[CompilerGeneratedAttribute]
public IMethodSymbol[] get_AccessibleConstructors();
    [IsReadOnlyAttribute]
[CompilerGeneratedAttribute]
public IMethodSymbol[] get_PossibleConstructors();
    [IsReadOnlyAttribute]
[CompilerGeneratedAttribute]
public ITypeSymbol[] get_InvocationParameters();
    [IsReadOnlyAttribute]
[CompilerGeneratedAttribute]
public ITypeSymbol get_ConstructorType();
}
[NullableContextAttribute("1")]
internal interface NSubstitute.Analyzers.Shared.DiagnosticAnalyzers.ICallInfoFinder {
    public abstract virtual CallInfoContext GetCallInfoContext(IArgumentOperation argumentOperation);
}
[NullableContextAttribute("1")]
internal interface NSubstitute.Analyzers.Shared.DiagnosticAnalyzers.INonSubstitutableMemberAnalysis {
    public abstract virtual NonSubstitutableMemberAnalysisResult Analyze(IOperation operation);
}
[NullableContextAttribute("1")]
internal interface NSubstitute.Analyzers.Shared.DiagnosticAnalyzers.IReEntrantCallFinder {
    public abstract virtual IReadOnlyList`1<IOperation> GetReEntrantCalls(Compilation compilation, IInvocationOperation invocationOperation, IOperation rootNode);
}
[NullableContextAttribute("1")]
internal interface NSubstitute.Analyzers.Shared.DiagnosticAnalyzers.ISubstituteConstructorAnalysis {
    public abstract virtual ConstructorContext CollectConstructorContext(SubstituteContext substituteContext, ITypeSymbol proxyTypeSymbol);
}
[NullableContextAttribute("1")]
internal interface NSubstitute.Analyzers.Shared.DiagnosticAnalyzers.ISubstituteConstructorMatcher {
    public abstract virtual bool MatchesInvocation(Compilation compilation, IMethodSymbol methodSymbol, IReadOnlyList`1<ITypeSymbol> invocationParameters);
}
[NullableContextAttribute("1")]
internal interface NSubstitute.Analyzers.Shared.DiagnosticAnalyzers.ISubstituteProxyAnalysis {
    public abstract virtual ITypeSymbol GetActualProxyTypeSymbol(IInvocationOperation invocationOperation);
    public abstract virtual ImmutableArray`1<ITypeSymbol> GetProxySymbols(IInvocationOperation invocationOperation);
}
[NullableContextAttribute("1")]
internal interface NSubstitute.Analyzers.Shared.DiagnosticAnalyzers.ISubstitutionOperationFinder {
    public abstract virtual IEnumerable`1<IOperation> Find(Compilation compilation, IInvocationOperation invocationOperation);
    public abstract virtual IEnumerable`1<IOperation> FindForWhenExpression(Compilation compilation, IInvocationOperation invocationOperation);
    public abstract virtual IEnumerable`1<IOperation> FindForReceivedInOrderExpression(Compilation compilation, IInvocationOperation invocationOperation, bool includeAll);
    public abstract virtual IOperation FindForStandardExpression(IInvocationOperation invocationOperation);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class NSubstitute.Analyzers.Shared.DiagnosticAnalyzers.NonSubstitutableMemberAnalysis : object {
    public static INonSubstitutableMemberAnalysis Instance;
    private static ImmutableHashSet`1<OperationKind> KnownNonVirtualOperationKinds;
    private static NonSubstitutableMemberAnalysis();
    public sealed virtual NonSubstitutableMemberAnalysisResult Analyze(IOperation operation);
    private bool CanBeSubstituted(IOperation operation, ISymbol symbol);
    private NonSubstitutableMemberAnalysisResult Analyze(IOperation operation, ISymbol symbol);
    [NullableContextAttribute("2")]
private static bool CanBeSubstituted(ISymbol symbol);
    [NullableContextAttribute("2")]
private static bool IsInterfaceMember(ISymbol symbol);
    [NullableContextAttribute("2")]
private static bool IsVirtual(ISymbol symbol);
    private static IOperation ExtractActualOperation(IOperation operation);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[IsReadOnlyAttribute]
internal class NSubstitute.Analyzers.Shared.DiagnosticAnalyzers.NonSubstitutableMemberAnalysisResult : ValueType {
    [CompilerGeneratedAttribute]
private bool <CanBeSubstituted>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <NonVirtualMemberSubstitution>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <InternalMemberSubstitution>k__BackingField;
    [NullableAttribute("2")]
[CompilerGeneratedAttribute]
private ISymbol <Symbol>k__BackingField;
    [CompilerGeneratedAttribute]
private string <MemberName>k__BackingField;
    [CompilerGeneratedAttribute]
private SyntaxNode <Member>k__BackingField;
    public bool CanBeSubstituted { get; }
    public bool NonVirtualMemberSubstitution { get; }
    public bool InternalMemberSubstitution { get; }
    [NullableAttribute("2")]
public ISymbol Symbol { get; }
    public string MemberName { get; }
    public SyntaxNode Member { get; }
    public NonSubstitutableMemberAnalysisResult(bool nonVirtualMemberSubstitution, bool internalMemberSubstitution, ISymbol symbol, SyntaxNode member, string memberName);
    [CompilerGeneratedAttribute]
public bool get_CanBeSubstituted();
    [CompilerGeneratedAttribute]
public bool get_NonVirtualMemberSubstitution();
    [CompilerGeneratedAttribute]
public bool get_InternalMemberSubstitution();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public ISymbol get_Symbol();
    [CompilerGeneratedAttribute]
public string get_MemberName();
    [CompilerGeneratedAttribute]
public SyntaxNode get_Member();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class NSubstitute.Analyzers.Shared.DiagnosticAnalyzers.ReEntrantCallFinder : object {
    private ISubstitutionOperationFinder _substitutionOperationFinder;
    [CompilerGeneratedAttribute]
private static ReEntrantCallFinder <Instance>k__BackingField;
    public static ReEntrantCallFinder Instance { get; }
    protected ReEntrantCallFinder(ISubstitutionOperationFinder substitutionOperationFinder);
    private static ReEntrantCallFinder();
    [CompilerGeneratedAttribute]
public static ReEntrantCallFinder get_Instance();
    public sealed virtual IReadOnlyList`1<IOperation> GetReEntrantCalls(Compilation compilation, IInvocationOperation invocationOperation, IOperation rootNode);
    [IteratorStateMachineAttribute("NSubstitute.Analyzers.Shared.DiagnosticAnalyzers.ReEntrantCallFinder/<GetPotentialOtherSubstituteInvocations>d__6")]
private IEnumerable`1<IInvocationOperation> GetPotentialOtherSubstituteInvocations(Compilation compilation, IEnumerable`1<IOperation> operations);
    [IteratorStateMachineAttribute("NSubstitute.Analyzers.Shared.DiagnosticAnalyzers.ReEntrantCallFinder/<GetOtherSubstitutionsForSymbol>d__7")]
private IEnumerable`1<IOperation> GetOtherSubstitutionsForSymbol(Compilation compilation, IOperation rootOperation, ISymbol rootNodeSymbol);
    [IteratorStateMachineAttribute("NSubstitute.Analyzers.Shared.DiagnosticAnalyzers.ReEntrantCallFinder/<GetConstructorOperations>d__8")]
private static IEnumerable`1<IOperation> GetConstructorOperations(Compilation compilation, ISymbol fieldReferenceOperation);
    [NullableContextAttribute("2")]
private IOperation GetLocalReferenceOperation(IOperation node);
    private IEnumerable`1<IOperation> GetReEntrantSymbols(Compilation compilation, IInvocationOperation invocationOperation, IOperation rootNode);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class NSubstitute.Analyzers.Shared.DiagnosticAnalyzers.SubstituteConstructorAnalysis : object {
    [CompilerGeneratedAttribute]
private static SubstituteConstructorAnalysis <Instance>k__BackingField;
    public static SubstituteConstructorAnalysis Instance { get; }
    private static SubstituteConstructorAnalysis();
    [CompilerGeneratedAttribute]
public static SubstituteConstructorAnalysis get_Instance();
    public sealed virtual ConstructorContext CollectConstructorContext(SubstituteContext substituteContext, ITypeSymbol proxyTypeSymbol);
    private ITypeSymbol[] GetInvocationArgumentTypes(SubstituteContext substituteContext);
    private ITypeSymbol[] GetGenericInvocationArgumentTypes(SubstituteContext substituteContext);
    private ITypeSymbol[] GetNonGenericInvocationArgumentTypes(SubstituteContext substituteContext);
    private IMethodSymbol[] GetAccessibleConstructors(ITypeSymbol genericArgument);
    private ITypeSymbol[] GetTypeSymbols(IArrayCreationOperation arrayInitializerOperation);
    private ITypeSymbol[] GetArgumentTypes(IArgumentOperation argumentOperation);
    [CompilerGeneratedAttribute]
internal static bool <GetAccessibleConstructors>g__IsAccessible|7_0(IMethodSymbol symbol);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class NSubstitute.Analyzers.Shared.DiagnosticAnalyzers.SubstituteContext : ValueType {
    [CompilerGeneratedAttribute]
private OperationAnalysisContext <OperationAnalysisContext>k__BackingField;
    [CompilerGeneratedAttribute]
private IInvocationOperation <InvocationOperation>k__BackingField;
    public OperationAnalysisContext OperationAnalysisContext { get; }
    public IInvocationOperation InvocationOperation { get; }
    public SubstituteContext(OperationAnalysisContext operationAnalysisContext, IInvocationOperation invocationOperation);
    [IsReadOnlyAttribute]
[CompilerGeneratedAttribute]
public OperationAnalysisContext get_OperationAnalysisContext();
    [IsReadOnlyAttribute]
[CompilerGeneratedAttribute]
public IInvocationOperation get_InvocationOperation();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class NSubstitute.Analyzers.Shared.DiagnosticAnalyzers.SubstituteProxyAnalysis : object {
    [CompilerGeneratedAttribute]
private static SubstituteProxyAnalysis <Instance>k__BackingField;
    public static SubstituteProxyAnalysis Instance { get; }
    private static SubstituteProxyAnalysis();
    [CompilerGeneratedAttribute]
public static SubstituteProxyAnalysis get_Instance();
    public sealed virtual ITypeSymbol GetActualProxyTypeSymbol(IInvocationOperation invocationOperation);
    public sealed virtual ImmutableArray`1<ITypeSymbol> GetProxySymbols(IInvocationOperation invocationOperation);
    private IArrayInitializerOperation GetArrayInitializerArguments(IInvocationOperation invocationOperation);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class NSubstitute.Analyzers.Shared.DiagnosticAnalyzers.SubstitutionOperationFinder : object {
    [CompilerGeneratedAttribute]
private static SubstitutionOperationFinder <Instance>k__BackingField;
    public static SubstitutionOperationFinder Instance { get; }
    private static SubstitutionOperationFinder();
    [CompilerGeneratedAttribute]
public static SubstitutionOperationFinder get_Instance();
    public sealed virtual IEnumerable`1<IOperation> Find(Compilation compilation, IInvocationOperation invocationOperation);
    [IteratorStateMachineAttribute("NSubstitute.Analyzers.Shared.DiagnosticAnalyzers.SubstitutionOperationFinder/<FindForWhenExpression>d__4")]
public sealed virtual IEnumerable`1<IOperation> FindForWhenExpression(Compilation compilation, IInvocationOperation invocationOperation);
    public sealed virtual IEnumerable`1<IOperation> FindForReceivedInOrderExpression(Compilation compilation, IInvocationOperation invocationOperation, bool includeAll);
    public sealed virtual IOperation FindForStandardExpression(IInvocationOperation invocationOperation);
    private bool ContainsSymbol(ITypeSymbol containerSymbol, ISymbol symbol);
    [IteratorStateMachineAttribute("NSubstitute.Analyzers.Shared.DiagnosticAnalyzers.SubstitutionOperationFinder/<GetBaseTypesAndThis>d__8")]
private static IEnumerable`1<ITypeSymbol> GetBaseTypesAndThis(ITypeSymbol type);
    private IOperation FindForAndDoesExpression(IInvocationOperation invocationOperation);
}
internal enum NSubstitute.Analyzers.Shared.DiagnosticCategory : Enum {
    public int value__;
    [DisplayNameAttribute("Non-substitutable member")]
public static DiagnosticCategory NonVirtualSubstitution;
    [DisplayNameAttribute("Substitute creation")]
public static DiagnosticCategory SubstituteCreation;
    [DisplayNameAttribute("Argument specification")]
public static DiagnosticCategory ArgumentSpecification;
    [DisplayNameAttribute("Call configuration")]
public static DiagnosticCategory CallConfiguration;
    [DisplayNameAttribute("Usage")]
public static DiagnosticCategory Usage;
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class NSubstitute.Analyzers.Shared.DiagnosticDescriptors`1 : object {
    private static ResourceManager SpecificResourceManager;
    private static string helpLinkUriFormat;
    [CompilerGeneratedAttribute]
private static DiagnosticDescriptor <NonVirtualSetupSpecification>k__BackingField;
    [CompilerGeneratedAttribute]
private static DiagnosticDescriptor <InternalSetupSpecification>k__BackingField;
    [CompilerGeneratedAttribute]
private static DiagnosticDescriptor <NonVirtualReceivedSetupSpecification>k__BackingField;
    [CompilerGeneratedAttribute]
private static DiagnosticDescriptor <NonVirtualWhenSetupSpecification>k__BackingField;
    [CompilerGeneratedAttribute]
private static DiagnosticDescriptor <NonVirtualReceivedInOrderSetupSpecification>k__BackingField;
    [CompilerGeneratedAttribute]
private static DiagnosticDescriptor <PartialSubstituteForUnsupportedType>k__BackingField;
    [CompilerGeneratedAttribute]
private static DiagnosticDescriptor <SubstituteForWithoutAccessibleConstructor>k__BackingField;
    [CompilerGeneratedAttribute]
private static DiagnosticDescriptor <SubstituteForConstructorParametersMismatch>k__BackingField;
    [CompilerGeneratedAttribute]
private static DiagnosticDescriptor <SubstituteForInternalMember>k__BackingField;
    [CompilerGeneratedAttribute]
private static DiagnosticDescriptor <SubstituteConstructorMismatch>k__BackingField;
    [CompilerGeneratedAttribute]
private static DiagnosticDescriptor <SubstituteMultipleClasses>k__BackingField;
    [CompilerGeneratedAttribute]
private static DiagnosticDescriptor <SubstituteConstructorArgumentsForInterface>k__BackingField;
    [CompilerGeneratedAttribute]
private static DiagnosticDescriptor <SubstituteConstructorArgumentsForDelegate>k__BackingField;
    [CompilerGeneratedAttribute]
private static DiagnosticDescriptor <CallInfoArgumentOutOfRange>k__BackingField;
    [CompilerGeneratedAttribute]
private static DiagnosticDescriptor <CallInfoCouldNotConvertParameterAtPosition>k__BackingField;
    [CompilerGeneratedAttribute]
private static DiagnosticDescriptor <CallInfoCouldNotFindArgumentToThisCall>k__BackingField;
    [CompilerGeneratedAttribute]
private static DiagnosticDescriptor <CallInfoMoreThanOneArgumentOfType>k__BackingField;
    [CompilerGeneratedAttribute]
private static DiagnosticDescriptor <CallInfoArgumentSetWithIncompatibleValue>k__BackingField;
    [CompilerGeneratedAttribute]
private static DiagnosticDescriptor <CallInfoArgumentIsNotOutOrRef>k__BackingField;
    [CompilerGeneratedAttribute]
private static DiagnosticDescriptor <ReEntrantSubstituteCall>k__BackingField;
    [CompilerGeneratedAttribute]
private static DiagnosticDescriptor <UnusedReceived>k__BackingField;
    [CompilerGeneratedAttribute]
private static DiagnosticDescriptor <UnusedReceivedForOrdinaryMethod>k__BackingField;
    [CompilerGeneratedAttribute]
private static DiagnosticDescriptor <ConflictingArgumentAssignments>k__BackingField;
    [CompilerGeneratedAttribute]
private static DiagnosticDescriptor <NonSubstitutableMemberArgumentMatcherUsage>k__BackingField;
    [CompilerGeneratedAttribute]
private static DiagnosticDescriptor <WithAnyArgsArgumentMatcherUsage>k__BackingField;
    [CompilerGeneratedAttribute]
private static DiagnosticDescriptor <ReceivedUsedInReceivedInOrder>k__BackingField;
    [CompilerGeneratedAttribute]
private static DiagnosticDescriptor <AsyncCallbackUsedInReceivedInOrder>k__BackingField;
    [CompilerGeneratedAttribute]
private static DiagnosticDescriptor <SyncOverAsyncThrows>k__BackingField;
    public static DiagnosticDescriptor NonVirtualSetupSpecification { get; }
    public static DiagnosticDescriptor InternalSetupSpecification { get; }
    public static DiagnosticDescriptor NonVirtualReceivedSetupSpecification { get; }
    public static DiagnosticDescriptor NonVirtualWhenSetupSpecification { get; }
    public static DiagnosticDescriptor NonVirtualReceivedInOrderSetupSpecification { get; }
    public static DiagnosticDescriptor PartialSubstituteForUnsupportedType { get; }
    public static DiagnosticDescriptor SubstituteForWithoutAccessibleConstructor { get; }
    public static DiagnosticDescriptor SubstituteForConstructorParametersMismatch { get; }
    public static DiagnosticDescriptor SubstituteForInternalMember { get; }
    public static DiagnosticDescriptor SubstituteConstructorMismatch { get; }
    public static DiagnosticDescriptor SubstituteMultipleClasses { get; }
    public static DiagnosticDescriptor SubstituteConstructorArgumentsForInterface { get; }
    public static DiagnosticDescriptor SubstituteConstructorArgumentsForDelegate { get; }
    public static DiagnosticDescriptor CallInfoArgumentOutOfRange { get; }
    public static DiagnosticDescriptor CallInfoCouldNotConvertParameterAtPosition { get; }
    public static DiagnosticDescriptor CallInfoCouldNotFindArgumentToThisCall { get; }
    public static DiagnosticDescriptor CallInfoMoreThanOneArgumentOfType { get; }
    public static DiagnosticDescriptor CallInfoArgumentSetWithIncompatibleValue { get; }
    public static DiagnosticDescriptor CallInfoArgumentIsNotOutOrRef { get; }
    public static DiagnosticDescriptor ReEntrantSubstituteCall { get; }
    public static DiagnosticDescriptor UnusedReceived { get; }
    public static DiagnosticDescriptor UnusedReceivedForOrdinaryMethod { get; }
    public static DiagnosticDescriptor ConflictingArgumentAssignments { get; }
    public static DiagnosticDescriptor NonSubstitutableMemberArgumentMatcherUsage { get; }
    public static DiagnosticDescriptor WithAnyArgsArgumentMatcherUsage { get; }
    public static DiagnosticDescriptor ReceivedUsedInReceivedInOrder { get; }
    public static DiagnosticDescriptor AsyncCallbackUsedInReceivedInOrder { get; }
    public static DiagnosticDescriptor SyncOverAsyncThrows { get; }
    private static DiagnosticDescriptors`1();
    [CompilerGeneratedAttribute]
public static DiagnosticDescriptor get_NonVirtualSetupSpecification();
    [CompilerGeneratedAttribute]
public static DiagnosticDescriptor get_InternalSetupSpecification();
    [CompilerGeneratedAttribute]
public static DiagnosticDescriptor get_NonVirtualReceivedSetupSpecification();
    [CompilerGeneratedAttribute]
public static DiagnosticDescriptor get_NonVirtualWhenSetupSpecification();
    [CompilerGeneratedAttribute]
public static DiagnosticDescriptor get_NonVirtualReceivedInOrderSetupSpecification();
    [CompilerGeneratedAttribute]
public static DiagnosticDescriptor get_PartialSubstituteForUnsupportedType();
    [CompilerGeneratedAttribute]
public static DiagnosticDescriptor get_SubstituteForWithoutAccessibleConstructor();
    [CompilerGeneratedAttribute]
public static DiagnosticDescriptor get_SubstituteForConstructorParametersMismatch();
    [CompilerGeneratedAttribute]
public static DiagnosticDescriptor get_SubstituteForInternalMember();
    [CompilerGeneratedAttribute]
public static DiagnosticDescriptor get_SubstituteConstructorMismatch();
    [CompilerGeneratedAttribute]
public static DiagnosticDescriptor get_SubstituteMultipleClasses();
    [CompilerGeneratedAttribute]
public static DiagnosticDescriptor get_SubstituteConstructorArgumentsForInterface();
    [CompilerGeneratedAttribute]
public static DiagnosticDescriptor get_SubstituteConstructorArgumentsForDelegate();
    [CompilerGeneratedAttribute]
public static DiagnosticDescriptor get_CallInfoArgumentOutOfRange();
    [CompilerGeneratedAttribute]
public static DiagnosticDescriptor get_CallInfoCouldNotConvertParameterAtPosition();
    [CompilerGeneratedAttribute]
public static DiagnosticDescriptor get_CallInfoCouldNotFindArgumentToThisCall();
    [CompilerGeneratedAttribute]
public static DiagnosticDescriptor get_CallInfoMoreThanOneArgumentOfType();
    [CompilerGeneratedAttribute]
public static DiagnosticDescriptor get_CallInfoArgumentSetWithIncompatibleValue();
    [CompilerGeneratedAttribute]
public static DiagnosticDescriptor get_CallInfoArgumentIsNotOutOrRef();
    [CompilerGeneratedAttribute]
public static DiagnosticDescriptor get_ReEntrantSubstituteCall();
    [CompilerGeneratedAttribute]
public static DiagnosticDescriptor get_UnusedReceived();
    [CompilerGeneratedAttribute]
public static DiagnosticDescriptor get_UnusedReceivedForOrdinaryMethod();
    [CompilerGeneratedAttribute]
public static DiagnosticDescriptor get_ConflictingArgumentAssignments();
    [CompilerGeneratedAttribute]
public static DiagnosticDescriptor get_NonSubstitutableMemberArgumentMatcherUsage();
    [CompilerGeneratedAttribute]
public static DiagnosticDescriptor get_WithAnyArgsArgumentMatcherUsage();
    [CompilerGeneratedAttribute]
public static DiagnosticDescriptor get_ReceivedUsedInReceivedInOrder();
    [CompilerGeneratedAttribute]
public static DiagnosticDescriptor get_AsyncCallbackUsedInReceivedInOrder();
    [CompilerGeneratedAttribute]
public static DiagnosticDescriptor get_SyncOverAsyncThrows();
    private static DiagnosticDescriptor CreateDiagnosticDescriptor(string name, string id, string category, DiagnosticSeverity defaultSeverity, bool isEnabledByDefault);
    private static LocalizableResourceString GetDiagnosticResourceString(string name, string propertyName);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class NSubstitute.Analyzers.Shared.DiagnosticIdentifiers : object {
    public static string NonVirtualSetupSpecification;
    public static string NonVirtualReceivedSetupSpecification;
    public static string NonVirtualWhenSetupSpecification;
    public static string InternalSetupSpecification;
    public static string NonSubstitutableMemberArgumentMatcherUsage;
    public static string NonVirtualReceivedInOrderSetupSpecification;
    public static string PartialSubstituteForUnsupportedType;
    public static string SubstituteForWithoutAccessibleConstructor;
    public static string SubstituteForConstructorParametersMismatch;
    public static string SubstituteForInternalMember;
    public static string SubstituteConstructorMismatch;
    public static string SubstituteMultipleClasses;
    public static string SubstituteConstructorArgumentsForInterface;
    public static string SubstituteConstructorArgumentsForDelegate;
    public static string CallInfoArgumentOutOfRange;
    public static string CallInfoCouldNotConvertParameterAtPosition;
    public static string CallInfoCouldNotFindArgumentToThisCall;
    public static string CallInfoMoreThanOneArgumentOfType;
    public static string CallInfoArgumentSetWithIncompatibleValue;
    public static string CallInfoArgumentIsNotOutOrRef;
    public static string ConflictingArgumentAssignments;
    public static string ReEntrantSubstituteCall;
    public static string UnusedReceived;
    public static string ReceivedUsedInReceivedInOrder;
    public static string AsyncCallbackUsedInReceivedInOrder;
    public static string SyncOverAsyncThrows;
    public static string WithAnyArgsArgumentMatcherUsage;
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[AttributeUsageAttribute("256")]
internal class NSubstitute.Analyzers.Shared.DisplayNameAttribute : Attribute {
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    public string Name { get; }
    public DisplayNameAttribute(string name);
    [CompilerGeneratedAttribute]
public string get_Name();
}
internal class NSubstitute.Analyzers.Shared.ExcludeFromCodeCoverageAttribute : Attribute {
}
[ExtensionAttribute]
internal static class NSubstitute.Analyzers.Shared.Extensions.AnalyzerOptionsExtensions : object {
    [NullableContextAttribute("1")]
[ExtensionAttribute]
public static AnalyzersSettings GetSettings(AnalyzerOptions options, CancellationToken cancellationToken);
}
[ExtensionAttribute]
internal static class NSubstitute.Analyzers.Shared.Extensions.CompilationExtensions : object {
    [NullableContextAttribute("1")]
[ExtensionAttribute]
public static SemanticModel TryGetSemanticModel(Compilation compilation, SyntaxTree syntaxTree);
}
[ExtensionAttribute]
internal static class NSubstitute.Analyzers.Shared.Extensions.DocumentExtensions : object {
    [NullableContextAttribute("1")]
[AsyncStateMachineAttribute("NSubstitute.Analyzers.Shared.Extensions.DocumentExtensions/<ReplaceNodeAsync>d__0")]
[ExtensionAttribute]
public static Task`1<Document> ReplaceNodeAsync(Document document, SyntaxNode oldNode, SyntaxNode newNode, CancellationToken cancellationToken);
}
[ExtensionAttribute]
internal static class NSubstitute.Analyzers.Shared.Extensions.EnumExtensions : object {
    [NullableContextAttribute("1")]
[ExtensionAttribute]
public static string GetDisplayName(Enum enum);
}
[ExtensionAttribute]
internal static class NSubstitute.Analyzers.Shared.Extensions.IArgumentOperationExtensions : object {
    [NullableContextAttribute("1")]
[ExtensionAttribute]
public static ITypeSymbol GetArgumentOperationDeclaredTypeSymbol(IArgumentOperation argumentOperation);
}
[ExtensionAttribute]
internal static class NSubstitute.Analyzers.Shared.Extensions.IEnumerableExtensions : object {
    [NullableContextAttribute("1")]
[ExtensionAttribute]
public static int IndexOf(IEnumerable`1<T> source, Func`2<T, bool> predicate);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ExtensionAttribute]
internal static class NSubstitute.Analyzers.Shared.Extensions.IOperationExtensions : object {
    [ExtensionAttribute]
public static bool IsEventAssignmentOperation(IOperation operation);
    [ExtensionAttribute]
public static IOperation GetSubstituteOperation(IPropertyReferenceOperation propertyReferenceOperation);
    [ExtensionAttribute]
public static IOperation GetSubstituteOperation(IInvocationOperation invocationOperation);
    [ExtensionAttribute]
public static IEnumerable`1<IArgumentOperation> GetOrderedArgumentOperations(IInvocationOperation invocationOperation);
    [ExtensionAttribute]
public static IEnumerable`1<IArgumentOperation> GetOrderedArgumentOperationsWithoutInstanceArgument(IInvocationOperation invocationOperation);
    [ExtensionAttribute]
public static Nullable`1<int> GetIndexerPosition(IOperation operation);
    [ExtensionAttribute]
public static ITypeSymbol GetTypeSymbol(IArgumentOperation argumentOperation);
    [ExtensionAttribute]
public static ITypeSymbol GetTypeSymbol(IAssignmentOperation assignmentOperation);
    [IteratorStateMachineAttribute("NSubstitute.Analyzers.Shared.Extensions.IOperationExtensions/<Ancestors>d__8")]
[ExtensionAttribute]
public static IEnumerable`1<IOperation> Ancestors(IOperation operation);
    [NullableContextAttribute("2")]
[ExtensionAttribute]
public static ISymbol ExtractSymbol(IOperation operation);
    [ExtensionAttribute]
public static IEnumerable`1<IOperation> GetArrayElementValues(IOperation operation);
    private static bool IsImplicitlyProvidedArrayWithoutValues(IArgumentOperation arg);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ExtensionAttribute]
internal static class NSubstitute.Analyzers.Shared.Extensions.ISymbolExtensions : object {
    [ExtensionAttribute]
public static bool MemberVisibleToProxyGenerator(ISymbol symbol);
    [ExtensionAttribute]
public static bool InternalsVisibleToProxyGenerator(ISymbol typeSymbol);
    [ExtensionAttribute]
public static string ToMinimalMethodString(ISymbol symbol, SemanticModel semanticModel);
    [ExtensionAttribute]
public static string ToMinimalSymbolString(ISymbol symbol, SemanticModel semanticModel);
}
[ExtensionAttribute]
internal static class NSubstitute.Analyzers.Shared.Extensions.ObjectExtensions : object {
    [NullableContextAttribute("1")]
[ExtensionAttribute]
public static T Cast(object source);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ExtensionAttribute]
internal static class NSubstitute.Analyzers.Shared.Extensions.OperationAnalysisContextExtensions : object {
    [ExtensionAttribute]
internal static void TryReportDiagnostic(OperationAnalysisContext syntaxNodeContext, Diagnostic diagnostic, ISymbol symbol);
    private static bool IsSuppressed(AnalyzersSettings analyzersSettings, Compilation compilation, ISymbol symbol, string diagnosticId);
    [IteratorStateMachineAttribute("NSubstitute.Analyzers.Shared.Extensions.OperationAnalysisContextExtensions/<GetPossibleSymbols>d__2")]
private static IEnumerable`1<ISymbol> GetPossibleSymbols(ISymbol symbol);
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
[ExtensionAttribute]
internal static class NSubstitute.Analyzers.Shared.Extensions.SubstituteSymbolExtensions : object {
    [ExtensionAttribute]
public static bool IsAndDoesLikeMethod(ISymbol symbol);
    [ExtensionAttribute]
public static bool IsCallInfoSupportingMethod(ISymbol symbol);
    [ExtensionAttribute]
public static bool IsInitialReEntryLikeMethod(ISymbol symbol);
    [ExtensionAttribute]
public static bool IsInnerReEntryLikeMethod(ISymbol symbol);
    [ExtensionAttribute]
public static bool IsReturnOrThrowLikeMethod(ISymbol symbol);
    [ExtensionAttribute]
public static bool IsReturnLikeMethod(ISymbol symbol);
    [ExtensionAttribute]
public static bool IsReturnForAnyArgsLikeMethod(ISymbol symbol);
    [ExtensionAttribute]
public static bool IsThrowLikeMethod(ISymbol symbol);
    [ExtensionAttribute]
public static bool IsThrowForAnyArgsLikeMethod(ISymbol symbol);
    [ExtensionAttribute]
public static bool IsThrowSyncLikeMethod(ISymbol symbol);
    [ExtensionAttribute]
public static bool IsThrowsSyncMethod(ISymbol symbol);
    [ExtensionAttribute]
public static bool IsReceivedLikeMethod(ISymbol symbol);
    [ExtensionAttribute]
public static bool IsReceivedWithAnyArgsLikeMethod(ISymbol symbol);
    [ExtensionAttribute]
public static bool IsReceivedInOrderMethod(ISymbol symbol);
    [ExtensionAttribute]
public static bool IsWhenLikeMethod(ISymbol symbol);
    [ExtensionAttribute]
public static bool IsWhenForAnyArgsLikeMethod(ISymbol symbol);
    [ExtensionAttribute]
public static bool IsArgMatcherLikeMethod(ISymbol symbol);
    [ExtensionAttribute]
public static bool IsWithAnyArgsIncompatibleArgMatcherLikeMethod(ISymbol symbol);
    [ExtensionAttribute]
public static bool IsArgDoLikeMethod(ISymbol symbol);
    [ExtensionAttribute]
public static bool IsSubstituteCreateLikeMethod(ISymbol symbol);
    [NullableContextAttribute("1")]
[ExtensionAttribute]
private static bool IsMember(ISymbol symbol, IReadOnlyDictionary`2<string, string> memberTypeMap);
    [NullableContextAttribute("1")]
private static bool IsMember(ISymbol symbol, string memberName, string containingType);
    [NullableContextAttribute("1")]
private static bool IsMember(ISymbol symbol, string containingType);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ExtensionAttribute]
internal static class NSubstitute.Analyzers.Shared.Extensions.SyntaxGeneratorExtensions : object {
    [ExtensionAttribute]
public static SyntaxNode SubstituteForInvocationExpression(SyntaxGenerator syntaxGenerator, IParameterSymbol parameterSymbol);
    [ExtensionAttribute]
public static SyntaxNode InternalVisibleToDynamicProxyAttributeList(SyntaxGenerator syntaxGenerator);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ExtensionAttribute]
internal static class NSubstitute.Analyzers.Shared.Extensions.TypeInfoExtensions : object {
    [ExtensionAttribute]
public static bool IsCallInfoDelegate(ITypeSymbol typeSymbol, Compilation compilation);
    [ExtensionAttribute]
public static bool IsArgAnyType(ITypeSymbol typeSymbol, Compilation compilation);
    [ExtensionAttribute]
public static bool IsCallInfoSymbol(ITypeSymbol symbol);
    [NullableContextAttribute("2")]
private static bool IsCallInfoSymbolInternal(ISymbol symbol);
}
[NullableContextAttribute("1")]
internal interface NSubstitute.Analyzers.Shared.IDiagnosticDescriptorsProvider {
    public DiagnosticDescriptor NonVirtualSetupSpecification { get; }
    public DiagnosticDescriptor NonVirtualReceivedSetupSpecification { get; }
    public DiagnosticDescriptor NonVirtualWhenSetupSpecification { get; }
    public DiagnosticDescriptor NonVirtualReceivedInOrderSetupSpecification { get; }
    public DiagnosticDescriptor InternalSetupSpecification { get; }
    public DiagnosticDescriptor UnusedReceived { get; }
    public DiagnosticDescriptor UnusedReceivedForOrdinaryMethod { get; }
    public DiagnosticDescriptor PartialSubstituteForUnsupportedType { get; }
    public DiagnosticDescriptor SubstituteForWithoutAccessibleConstructor { get; }
    public DiagnosticDescriptor SubstituteForConstructorParametersMismatch { get; }
    public DiagnosticDescriptor SubstituteForInternalMember { get; }
    public DiagnosticDescriptor SubstituteConstructorMismatch { get; }
    public DiagnosticDescriptor SubstituteMultipleClasses { get; }
    public DiagnosticDescriptor SubstituteConstructorArgumentsForInterface { get; }
    public DiagnosticDescriptor SubstituteConstructorArgumentsForDelegate { get; }
    public DiagnosticDescriptor ReEntrantSubstituteCall { get; }
    public DiagnosticDescriptor CallInfoArgumentOutOfRange { get; }
    public DiagnosticDescriptor CallInfoCouldNotConvertParameterAtPosition { get; }
    public DiagnosticDescriptor CallInfoCouldNotFindArgumentToThisCall { get; }
    public DiagnosticDescriptor CallInfoMoreThanOneArgumentOfType { get; }
    public DiagnosticDescriptor CallInfoArgumentSetWithIncompatibleValue { get; }
    public DiagnosticDescriptor CallInfoArgumentIsNotOutOrRef { get; }
    public DiagnosticDescriptor ConflictingArgumentAssignments { get; }
    public DiagnosticDescriptor NonSubstitutableMemberArgumentMatcherUsage { get; }
    public DiagnosticDescriptor WithAnyArgsArgumentMatcherUsage { get; }
    public DiagnosticDescriptor ReceivedUsedInReceivedInOrder { get; }
    public DiagnosticDescriptor AsyncCallbackUsedInReceivedInOrder { get; }
    public DiagnosticDescriptor SyncOverAsyncThrows { get; }
    public abstract virtual DiagnosticDescriptor get_NonVirtualSetupSpecification();
    public abstract virtual DiagnosticDescriptor get_NonVirtualReceivedSetupSpecification();
    public abstract virtual DiagnosticDescriptor get_NonVirtualWhenSetupSpecification();
    public abstract virtual DiagnosticDescriptor get_NonVirtualReceivedInOrderSetupSpecification();
    public abstract virtual DiagnosticDescriptor get_InternalSetupSpecification();
    public abstract virtual DiagnosticDescriptor get_UnusedReceived();
    public abstract virtual DiagnosticDescriptor get_UnusedReceivedForOrdinaryMethod();
    public abstract virtual DiagnosticDescriptor get_PartialSubstituteForUnsupportedType();
    public abstract virtual DiagnosticDescriptor get_SubstituteForWithoutAccessibleConstructor();
    public abstract virtual DiagnosticDescriptor get_SubstituteForConstructorParametersMismatch();
    public abstract virtual DiagnosticDescriptor get_SubstituteForInternalMember();
    public abstract virtual DiagnosticDescriptor get_SubstituteConstructorMismatch();
    public abstract virtual DiagnosticDescriptor get_SubstituteMultipleClasses();
    public abstract virtual DiagnosticDescriptor get_SubstituteConstructorArgumentsForInterface();
    public abstract virtual DiagnosticDescriptor get_SubstituteConstructorArgumentsForDelegate();
    public abstract virtual DiagnosticDescriptor get_ReEntrantSubstituteCall();
    public abstract virtual DiagnosticDescriptor get_CallInfoArgumentOutOfRange();
    public abstract virtual DiagnosticDescriptor get_CallInfoCouldNotConvertParameterAtPosition();
    public abstract virtual DiagnosticDescriptor get_CallInfoCouldNotFindArgumentToThisCall();
    public abstract virtual DiagnosticDescriptor get_CallInfoMoreThanOneArgumentOfType();
    public abstract virtual DiagnosticDescriptor get_CallInfoArgumentSetWithIncompatibleValue();
    public abstract virtual DiagnosticDescriptor get_CallInfoArgumentIsNotOutOrRef();
    public abstract virtual DiagnosticDescriptor get_ConflictingArgumentAssignments();
    public abstract virtual DiagnosticDescriptor get_NonSubstitutableMemberArgumentMatcherUsage();
    public abstract virtual DiagnosticDescriptor get_WithAnyArgsArgumentMatcherUsage();
    public abstract virtual DiagnosticDescriptor get_ReceivedUsedInReceivedInOrder();
    public abstract virtual DiagnosticDescriptor get_AsyncCallbackUsedInReceivedInOrder();
    public abstract virtual DiagnosticDescriptor get_SyncOverAsyncThrows();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class NSubstitute.Analyzers.Shared.MetadataNames : object {
    public static string NSubstituteAssemblyName;
    public static string NSubstituteArgFullTypeName;
    public static string NSubstituteArgCompatFullTypeName;
    public static string NSubstituteSubstituteExtensionsFullTypeName;
    public static string NSubstituteReceivedExtensionsFullTypeName;
    public static string NSubstituteReturnsExtensionsFullTypeName;
    public static string NSubstituteExceptionExtensionsFullTypeName;
    public static string NSubstituteCallInfoFullTypeName;
    public static string NSubstituteArgAnyTypeFullTypeName;
    public static string NSubstituteConfiguredCallFullTypeName;
    public static string NSubstituteSubstituteFullTypeName;
    public static string NSubstituteFactoryFullTypeName;
    public static string NSubstituteReturnsMethod;
    public static string NSubstituteReturnsForAnyArgsMethod;
    public static string NSubstituteThrowsMethod;
    public static string NSubstituteThrowsAsyncMethod;
    public static string NSubstituteThrowsForAnyArgsMethod;
    public static string NSubstituteThrowsAsyncForAnyArgsMethod;
    public static string NSubstituteAndDoesMethod;
    public static string NSubstituteReturnsNullMethod;
    public static string NSubstituteReturnsNullForAnyArgsMethod;
    public static string NSubstituteDoMethod;
    public static string NSubstituteReceivedMethod;
    public static string NSubstituteReceivedWithAnyArgsMethod;
    public static string NSubstituteDidNotReceiveMethod;
    public static string NSubstituteDidNotReceiveWithAnyArgsMethod;
    public static string NSubstituteInOrderMethod;
    public static string NSubstituteReceivedFullTypeName;
    public static string NSubstituteForMethod;
    public static string NSubstituteForPartsOfMethod;
    public static string SubstituteFactoryCreate;
    public static string SubstituteFactoryCreatePartial;
    public static string InternalsVisibleToAttributeFullTypeName;
    public static string CastleDynamicProxyGenAssembly2Name;
    public static string NSubstituteWhenMethod;
    public static string NSubstituteWhenForAnyArgsMethod;
    public static string NSubstituteWhenCalledType;
    public static string CallInfoArgAtMethod;
    public static string CallInfoArgMethod;
    public static string CallInfoArgTypesMethod;
    public static string ArgIsMethodName;
    public static string ArgAnyMethodName;
    public static string ArgDoMethodName;
    public static string ArgInvokeMethodName;
    public static string ArgInvokeDelegateMethodName;
    public static IReadOnlyDictionary`2<string, string> ReturnsMethodNames;
    public static IReadOnlyDictionary`2<string, string> ReturnsForAnyArgsMethodNames;
    public static IReadOnlyDictionary`2<string, string> ThrowsMethodNames;
    public static IReadOnlyDictionary`2<string, string> ThrowsForAnyArgsMethodNames;
    public static IReadOnlyDictionary`2<string, string> ThrowsSyncMethodNames;
    public static IReadOnlyDictionary`2<string, string> ReceivedMethodNames;
    public static IReadOnlyDictionary`2<string, string> ReceivedWithQuantityMethodNames;
    public static IReadOnlyDictionary`2<string, string> ReceivedWithAnyArgsMethodNames;
    public static IReadOnlyDictionary`2<string, string> ReceivedWithAnyArgsQuantityMethodNames;
    public static IReadOnlyDictionary`2<string, string> WhenMethodNames;
    public static IReadOnlyDictionary`2<string, string> WhenForAnyArgsMethodNames;
    public static IReadOnlyDictionary`2<string, string> ArgMatchersMethodNames;
    public static IReadOnlyDictionary`2<string, string> ArgMatchersCompatMethodNames;
    public static IReadOnlyDictionary`2<string, string> ArgMatchersIncompatibleWithForAnyArgsMethodNames;
    public static IReadOnlyDictionary`2<string, string> ArgMatchersCompatIncompatibleWithForAnyArgsMethodNames;
    public static IReadOnlyDictionary`2<string, string> InitialReEntryMethodNames;
    public static IReadOnlyDictionary`2<string, string> CreateSubstituteMethodNames;
    public static IReadOnlyDictionary`2<string, string> SupportingCallInfoMethodNames;
    private static MetadataNames();
}
[GeneratedCodeAttribute("System.Resources.Tools.StronglyTypedResourceBuilder", "4.0.0.0")]
[DebuggerNonUserCodeAttribute]
[CompilerGeneratedAttribute]
internal class NSubstitute.Analyzers.Shared.Resources : object {
    private static ResourceManager resourceMan;
    private static CultureInfo resourceCulture;
    [EditorBrowsableAttribute("2")]
internal static ResourceManager ResourceManager { get; }
    [EditorBrowsableAttribute("2")]
internal static CultureInfo Culture { get; internal set; }
    internal static string NonVirtualSetupSpecificationDescription { get; }
    internal static string NonVirtualSetupSpecificationTitle { get; }
    internal static string InternalSetupSpecificationDescription { get; }
    internal static string InternalSetupSpecificationTitle { get; }
    internal static string UnusedReceivedDescription { get; }
    internal static string UnusedReceivedMessageFormat { get; }
    internal static string UnusedReceivedTitle { get; }
    internal static string UnusedReceivedForOrdinaryMethodDescription { get; }
    internal static string UnusedReceivedForOrdinaryMethodMessageFormat { get; }
    internal static string UnusedReceivedForOrdinaryMethodTitle { get; }
    internal static string PartialSubstituteForUnsupportedTypeDescription { get; }
    internal static string PartialSubstituteForUnsupportedTypeMessageFormat { get; }
    internal static string PartialSubstituteForUnsupportedTypeTitle { get; }
    internal static string SubstituteForWithoutAccessibleConstructorDescription { get; }
    internal static string SubstituteForWithoutAccessibleConstructorMessageFormat { get; }
    internal static string SubstituteForWithoutAccessibleConstructorTitle { get; }
    internal static string SubstituteForConstructorParametersMismatchDescription { get; }
    internal static string SubstituteForConstructorParametersMismatchMessageFormat { get; }
    internal static string SubstituteForConstructorParametersMismatchTitle { get; }
    internal static string SubstituteForInternalMemberDescription { get; }
    internal static string SubstituteForInternalMemberTitle { get; }
    internal static string SubstituteConstructorMismatchDescription { get; }
    internal static string SubstituteConstructorMismatchMessageFormat { get; }
    internal static string SubstituteConstructorMismatchTitle { get; }
    internal static string SubstituteMultipleClassesDescription { get; }
    internal static string SubstituteMultipleClassesMessageFormat { get; }
    internal static string SubstituteMultipleClassesTitle { get; }
    internal static string SubstituteConstructorArgumentsForInterfaceDescription { get; }
    internal static string SubstituteConstructorArgumentsForInterfaceMessageFormat { get; }
    internal static string SubstituteConstructorArgumentsForInterfaceTitle { get; }
    internal static string SubstituteConstructorArgumentsForDelegateDescription { get; }
    internal static string SubstituteConstructorArgumentsForDelegateMessageFormat { get; }
    internal static string SubstituteConstructorArgumentsForDelegateTitle { get; }
    internal static string NonVirtualReceivedSetupSpecificationDescription { get; }
    internal static string NonVirtualReceivedSetupSpecificationTitle { get; }
    internal static string NonVirtualWhenSetupSpecificationDescription { get; }
    internal static string NonVirtualWhenSetupSpecificationTitle { get; }
    internal static string ReEntrantSubstituteCallDescription { get; }
    internal static string ReEntrantSubstituteCallTitle { get; }
    internal static string CallInfoArgumentOutOfRangeDescription { get; }
    internal static string CallInfoArgumentOutOfRangeMessageFormat { get; }
    internal static string CallInfoArgumentOutOfRangeTitle { get; }
    internal static string CallInfoCouldNotConvertParameterAtPositionDescription { get; }
    internal static string CallInfoCouldNotConvertParameterAtPositionMessageFormat { get; }
    internal static string CallInfoCouldNotConvertParameterAtPositionTitle { get; }
    internal static string CallInfoCouldNotFindArgumentToThisCallDescription { get; }
    internal static string CallInfoCouldNotFindArgumentToThisCallMessageFormat { get; }
    internal static string CallInfoCouldNotFindArgumentToThisCallTitle { get; }
    internal static string CallInfoMoreThanOneArgumentOfTypeDescription { get; }
    internal static string CallInfoMoreThanOneArgumentOfTypeMessageFormat { get; }
    internal static string CallInfoMoreThanOneArgumentOfTypeTitle { get; }
    internal static string CallInfoArgumentSetWithIncompatibleValueDescription { get; }
    internal static string CallInfoArgumentSetWithIncompatibleValueMessageFormat { get; }
    internal static string CallInfoArgumentSetWithIncompatibleValueTitle { get; }
    internal static string CallInfoArgumentIsNotOutOrRefDescription { get; }
    internal static string CallInfoArgumentIsNotOutOrRefMessageFormat { get; }
    internal static string CallInfoArgumentIsNotOutOrRefTitle { get; }
    internal static string ConflictingArgumentAssignmentsDescription { get; }
    internal static string ConflictingArgumentAssignmentsMessageFormat { get; }
    internal static string ConflictingArgumentAssignmentsTitle { get; }
    internal static string NonSubstitutableMemberArgumentMatcherUsageDescription { get; }
    internal static string NonSubstitutableMemberArgumentMatcherUsageMessageFormat { get; }
    internal static string NonSubstitutableMemberArgumentMatcherUsageTitle { get; }
    internal static string WithAnyArgsArgumentMatcherUsageDescription { get; }
    internal static string WithAnyArgsArgumentMatcherUsageMessageFormat { get; }
    internal static string WithAnyArgsArgumentMatcherUsageTitle { get; }
    internal static string ReceivedUsedInReceivedInOrderDescription { get; }
    internal static string ReceivedUsedInReceivedInOrderMessageFormat { get; }
    internal static string ReceivedUsedInReceivedInOrderTitle { get; }
    internal static string AsyncCallbackUsedInReceivedInOrderDescription { get; }
    internal static string AsyncCallbackUsedInReceivedInOrderMessageFormat { get; }
    internal static string AsyncCallbackUsedInReceivedInOrderTitle { get; }
    internal static string NonVirtualReceivedInOrderSetupSpecificationDescription { get; }
    internal static string NonVirtualReceivedInOrderSetupSpecificationTitle { get; }
    internal static string SyncOverAsyncThrowsDescription { get; }
    internal static string SyncOverAsyncThrowsMessageFormat { get; }
    internal static string SyncOverAsyncThrowsTitle { get; }
    internal static ResourceManager get_ResourceManager();
    internal static CultureInfo get_Culture();
    internal static void set_Culture(CultureInfo value);
    internal static string get_NonVirtualSetupSpecificationDescription();
    internal static string get_NonVirtualSetupSpecificationTitle();
    internal static string get_InternalSetupSpecificationDescription();
    internal static string get_InternalSetupSpecificationTitle();
    internal static string get_UnusedReceivedDescription();
    internal static string get_UnusedReceivedMessageFormat();
    internal static string get_UnusedReceivedTitle();
    internal static string get_UnusedReceivedForOrdinaryMethodDescription();
    internal static string get_UnusedReceivedForOrdinaryMethodMessageFormat();
    internal static string get_UnusedReceivedForOrdinaryMethodTitle();
    internal static string get_PartialSubstituteForUnsupportedTypeDescription();
    internal static string get_PartialSubstituteForUnsupportedTypeMessageFormat();
    internal static string get_PartialSubstituteForUnsupportedTypeTitle();
    internal static string get_SubstituteForWithoutAccessibleConstructorDescription();
    internal static string get_SubstituteForWithoutAccessibleConstructorMessageFormat();
    internal static string get_SubstituteForWithoutAccessibleConstructorTitle();
    internal static string get_SubstituteForConstructorParametersMismatchDescription();
    internal static string get_SubstituteForConstructorParametersMismatchMessageFormat();
    internal static string get_SubstituteForConstructorParametersMismatchTitle();
    internal static string get_SubstituteForInternalMemberDescription();
    internal static string get_SubstituteForInternalMemberTitle();
    internal static string get_SubstituteConstructorMismatchDescription();
    internal static string get_SubstituteConstructorMismatchMessageFormat();
    internal static string get_SubstituteConstructorMismatchTitle();
    internal static string get_SubstituteMultipleClassesDescription();
    internal static string get_SubstituteMultipleClassesMessageFormat();
    internal static string get_SubstituteMultipleClassesTitle();
    internal static string get_SubstituteConstructorArgumentsForInterfaceDescription();
    internal static string get_SubstituteConstructorArgumentsForInterfaceMessageFormat();
    internal static string get_SubstituteConstructorArgumentsForInterfaceTitle();
    internal static string get_SubstituteConstructorArgumentsForDelegateDescription();
    internal static string get_SubstituteConstructorArgumentsForDelegateMessageFormat();
    internal static string get_SubstituteConstructorArgumentsForDelegateTitle();
    internal static string get_NonVirtualReceivedSetupSpecificationDescription();
    internal static string get_NonVirtualReceivedSetupSpecificationTitle();
    internal static string get_NonVirtualWhenSetupSpecificationDescription();
    internal static string get_NonVirtualWhenSetupSpecificationTitle();
    internal static string get_ReEntrantSubstituteCallDescription();
    internal static string get_ReEntrantSubstituteCallTitle();
    internal static string get_CallInfoArgumentOutOfRangeDescription();
    internal static string get_CallInfoArgumentOutOfRangeMessageFormat();
    internal static string get_CallInfoArgumentOutOfRangeTitle();
    internal static string get_CallInfoCouldNotConvertParameterAtPositionDescription();
    internal static string get_CallInfoCouldNotConvertParameterAtPositionMessageFormat();
    internal static string get_CallInfoCouldNotConvertParameterAtPositionTitle();
    internal static string get_CallInfoCouldNotFindArgumentToThisCallDescription();
    internal static string get_CallInfoCouldNotFindArgumentToThisCallMessageFormat();
    internal static string get_CallInfoCouldNotFindArgumentToThisCallTitle();
    internal static string get_CallInfoMoreThanOneArgumentOfTypeDescription();
    internal static string get_CallInfoMoreThanOneArgumentOfTypeMessageFormat();
    internal static string get_CallInfoMoreThanOneArgumentOfTypeTitle();
    internal static string get_CallInfoArgumentSetWithIncompatibleValueDescription();
    internal static string get_CallInfoArgumentSetWithIncompatibleValueMessageFormat();
    internal static string get_CallInfoArgumentSetWithIncompatibleValueTitle();
    internal static string get_CallInfoArgumentIsNotOutOrRefDescription();
    internal static string get_CallInfoArgumentIsNotOutOrRefMessageFormat();
    internal static string get_CallInfoArgumentIsNotOutOrRefTitle();
    internal static string get_ConflictingArgumentAssignmentsDescription();
    internal static string get_ConflictingArgumentAssignmentsMessageFormat();
    internal static string get_ConflictingArgumentAssignmentsTitle();
    internal static string get_NonSubstitutableMemberArgumentMatcherUsageDescription();
    internal static string get_NonSubstitutableMemberArgumentMatcherUsageMessageFormat();
    internal static string get_NonSubstitutableMemberArgumentMatcherUsageTitle();
    internal static string get_WithAnyArgsArgumentMatcherUsageDescription();
    internal static string get_WithAnyArgsArgumentMatcherUsageMessageFormat();
    internal static string get_WithAnyArgsArgumentMatcherUsageTitle();
    internal static string get_ReceivedUsedInReceivedInOrderDescription();
    internal static string get_ReceivedUsedInReceivedInOrderMessageFormat();
    internal static string get_ReceivedUsedInReceivedInOrderTitle();
    internal static string get_AsyncCallbackUsedInReceivedInOrderDescription();
    internal static string get_AsyncCallbackUsedInReceivedInOrderMessageFormat();
    internal static string get_AsyncCallbackUsedInReceivedInOrderTitle();
    internal static string get_NonVirtualReceivedInOrderSetupSpecificationDescription();
    internal static string get_NonVirtualReceivedInOrderSetupSpecificationTitle();
    internal static string get_SyncOverAsyncThrowsDescription();
    internal static string get_SyncOverAsyncThrowsMessageFormat();
    internal static string get_SyncOverAsyncThrowsTitle();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class NSubstitute.Analyzers.Shared.Settings.AnalyzersSettings : object {
    [CompilerGeneratedAttribute]
private List`1<Suppression> <Suppressions>k__BackingField;
    [CompilerGeneratedAttribute]
private static string <AnalyzerFileName>k__BackingField;
    public static AnalyzersSettings Default { get; }
    public List`1<Suppression> Suppressions { get; public set; }
    internal static string AnalyzerFileName { get; }
    public AnalyzersSettings(List`1<Suppression> suppressions);
    private static AnalyzersSettings();
    public static AnalyzersSettings get_Default();
    [CompilerGeneratedAttribute]
public List`1<Suppression> get_Suppressions();
    [CompilerGeneratedAttribute]
public void set_Suppressions(List`1<Suppression> value);
    [CompilerGeneratedAttribute]
internal static string get_AnalyzerFileName();
    public static AnalyzersSettings CreateWithSuppressions(string target, string ruleId);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class NSubstitute.Analyzers.Shared.Settings.Suppression : object {
    [CompilerGeneratedAttribute]
private string <Target>k__BackingField;
    [CompilerGeneratedAttribute]
private List`1<string> <Rules>k__BackingField;
    public string Target { get; public set; }
    public List`1<string> Rules { get; public set; }
    [CompilerGeneratedAttribute]
public string get_Target();
    [CompilerGeneratedAttribute]
public void set_Target(string value);
    [CompilerGeneratedAttribute]
public List`1<string> get_Rules();
    [CompilerGeneratedAttribute]
public void set_Rules(List`1<string> value);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class NSubstitute.Analyzers.Shared.SharedResourceManager : object {
    [CompilerGeneratedAttribute]
private static ResourceManager <Instance>k__BackingField;
    internal static ResourceManager Instance { get; }
    private static SharedResourceManager();
    [CompilerGeneratedAttribute]
internal static ResourceManager get_Instance();
}
[ExcludeFromCodeCoverageAttribute]
internal static class NSubstitute.Analyzers.Shared.TinyJson.Json : object {
    public static string Version;
    public static T Decode(string json);
    public static string Encode(object value, bool pretty);
}
[ExcludeFromCodeCoverageAttribute]
internal class NSubstitute.Analyzers.Shared.TinyJson.JsonBuilder : object {
    private StringBuilder _builder;
    private bool _pretty;
    private int _level;
    public JsonBuilder(bool pretty);
    public void AppendBeginObject();
    public void AppendEndObject();
    public void AppendBeginArray();
    public void AppendEndArray();
    public void AppendSeperator();
    public void AppendNull();
    public void AppendBool(bool b);
    public void AppendNumber(object number);
    public void AppendString(string str);
    public void AppendValue(object value);
    public void AppendName(string name);
    public virtual string ToString();
    internal static bool IsNumber(object value);
    internal static bool IsEnum(object value);
    internal static bool IsSupported(object obj);
    private bool HasPrettyLineBreak();
    private void RemovePrettyLineBreak();
    private void AppendPrettyLineBreak();
}
[ExtensionAttribute]
[ExcludeFromCodeCoverageAttribute]
internal static class NSubstitute.Analyzers.Shared.TinyJson.JsonExtensions : object {
    [ExtensionAttribute]
public static bool IsNullable(Type type);
    [ExtensionAttribute]
public static bool IsNumeric(Type type, object value);
    [ExtensionAttribute]
public static bool IsFloatingPoint(Type type, object value);
    [ExtensionAttribute]
public static void Clear(StringBuilder sb);
    [ExtensionAttribute]
public static bool IsInstanceOfGenericType(Type type, Type genericType);
    [ExtensionAttribute]
public static bool HasGenericInterface(Type type, Type genericInterface);
    private static TypeCode GetTypeCode(object value);
}
[ExcludeFromCodeCoverageAttribute]
internal static class NSubstitute.Analyzers.Shared.TinyJson.JsonMapper : object {
    private static Action`2<object, JsonBuilder> genericEncoder;
    private static Func`3<Type, object, object> genericDecoder;
    private static Dictionary`2<Type, Action`2<object, JsonBuilder>> encoders;
    private static Dictionary`2<Type, Func`3<Type, object, object>> decoders;
    internal static Action`2<object, JsonBuilder> GenericEncoder { get; internal set; }
    internal static Func`3<Type, object, object> GenericDecoder { get; internal set; }
    internal static Dictionary`2<Type, Action`2<object, JsonBuilder>> Encoders { get; internal set; }
    private static JsonMapper();
    internal static Action`2<object, JsonBuilder> get_GenericEncoder();
    internal static void set_GenericEncoder(Action`2<object, JsonBuilder> value);
    internal static Func`3<Type, object, object> get_GenericDecoder();
    internal static void set_GenericDecoder(Func`3<Type, object, object> value);
    internal static Dictionary`2<Type, Action`2<object, JsonBuilder>> get_Encoders();
    internal static void set_Encoders(Dictionary`2<Type, Action`2<object, JsonBuilder>> value);
    public static void RegisterDecoder(Func`3<Type, object, object> decoder);
    public static void RegisterEncoder(Action`2<object, JsonBuilder> encoder);
    public static Func`3<Type, object, object> GetDecoder(Type type);
    public static Action`2<object, JsonBuilder> GetEncoder(Type type);
    public static T DecodeJsonObject(object jsonObj);
    public static void EncodeValue(object value, JsonBuilder builder);
    public static void EncodeNameValue(string name, object value, JsonBuilder builder);
    public static string UnwrapName(string name);
    public static bool DecodeValue(object target, string name, object value);
    private static object ConvertValue(object value, Type type);
    private static object DecodeValue(object value, Type targetType);
    private static void RegisterDefaultEncoder();
    private static void RegisterDefaultDecoder();
}
[ExcludeFromCodeCoverageAttribute]
internal class NSubstitute.Analyzers.Shared.TinyJson.JsonParser : object {
    private StringReader _json;
    private StringBuilder _sb;
    internal JsonParser(string jsonString);
    public static object ParseValue(string jsonString);
    public sealed virtual void Dispose();
    private bool EndReached();
    private bool PeekWordbreak();
    private bool PeekWhitespace();
    private char PeekChar();
    private char ReadChar();
    private string ReadWord();
    private void EatWhitespace();
    private Token PeekToken();
    private object ParseBoolOrNull();
    private object ParseNumber();
    private string ParseString();
    private Dictionary`2<string, object> ParseObject();
    private List`1<object> ParseArray();
    private object ParseValue();
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
internal class System.Runtime.CompilerServices.IsReadOnlyAttribute : Attribute {
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
[AttributeUsageAttribute("27524")]
internal class System.Runtime.CompilerServices.NullableAttribute : Attribute {
    public Byte[] NullableFlags;
    public NullableAttribute(byte );
    public NullableAttribute(Byte[] );
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
[AttributeUsageAttribute("5196")]
internal class System.Runtime.CompilerServices.NullableContextAttribute : Attribute {
    public byte Flag;
    public NullableContextAttribute(byte );
}
