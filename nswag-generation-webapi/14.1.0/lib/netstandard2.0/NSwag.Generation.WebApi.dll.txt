[CompilerGeneratedAttribute]
[EmbeddedAttribute]
internal class Microsoft.CodeAnalysis.EmbeddedAttribute : Attribute {
}
internal class NSwag.Generation.WebApi.Infrastructure.RouteAttributeFacade : object {
    private PropertyInfo _template;
    [CompilerGeneratedAttribute]
private Attribute <Attribute>k__BackingField;
    public Attribute Attribute { get; }
    public string Template { get; }
    private RouteAttributeFacade(Attribute attr, PropertyInfo template);
    public RouteAttributeFacade(Attribute attr);
    [CompilerGeneratedAttribute]
public Attribute get_Attribute();
    public string get_Template();
    public static RouteAttributeFacade TryMake(Attribute a);
}
internal class NSwag.Generation.WebApi.Infrastructure.RoutePrefixAttributeFacade : object {
    private PropertyInfo _prefix;
    [CompilerGeneratedAttribute]
private Attribute <Attribute>k__BackingField;
    public Attribute Attribute { get; }
    public string Prefix { get; }
    public RoutePrefixAttributeFacade(Attribute attr);
    [CompilerGeneratedAttribute]
public Attribute get_Attribute();
    public string get_Prefix();
    public static RoutePrefixAttributeFacade TryMake(Attribute a);
}
public class NSwag.Generation.WebApi.Processors.OperationConsumesProcessor : object {
    public sealed virtual bool Process(OperationProcessorContext context);
}
public class NSwag.Generation.WebApi.Processors.OperationParameterProcessor : object {
    private WebApiOpenApiDocumentGeneratorSettings _settings;
    public OperationParameterProcessor(WebApiOpenApiDocumentGeneratorSettings settings);
    public sealed virtual bool Process(OperationProcessorContext context);
    private void ApplyOpenApiBodyParameterAttribute(OpenApiOperationDescription operationDescription, MethodInfo methodInfo);
    private void UpdateNullableRawOperationParameters(OpenApiOperationDescription operationDescription, SchemaType schemaType);
    private void EnsureSingleBodyParameter(OpenApiOperationDescription operationDescription);
    private void UpdateConsumedTypes(OpenApiOperationDescription operationDescription);
    private void RemoveUnusedPathParameters(OpenApiOperationDescription operationDescription, string httpPath);
    private OpenApiParameter TryAddFileParameter(OperationProcessorContext context, JsonTypeDescription typeInfo, ContextualParameterInfo contextualParameter);
    private OpenApiParameter AddFileParameter(OperationProcessorContext context, ContextualParameterInfo contextualParameter, bool isFileArray);
    private bool IsFileArray(Type type, JsonTypeDescription typeInfo);
    private OpenApiParameter AddBodyParameter(OperationProcessorContext context, string name, ContextualParameterInfo contextualParameter);
    private OpenApiParameter AddPrimitiveParametersFromUri(OperationProcessorContext context, string httpPath, string name, ContextualParameterInfo contextualParameter, JsonTypeDescription typeDescription);
    private OpenApiParameter AddPrimitiveParameter(string name, OperationProcessorContext context, ContextualParameterInfo contextualParameter);
    private void InitializeFileParameter(OpenApiParameter operationParameter, bool isFileArray);
}
public class NSwag.Generation.WebApi.Processors.OperationResponseProcessor : OperationResponseProcessorBase {
    private WebApiOpenApiDocumentGeneratorSettings _settings;
    public OperationResponseProcessor(WebApiOpenApiDocumentGeneratorSettings settings);
    public sealed virtual bool Process(OperationProcessorContext context);
    protected virtual string GetVoidResponseStatusCode();
}
public class NSwag.Generation.WebApi.WebApiOpenApiDocumentGenerator : object {
    [CompilerGeneratedAttribute]
private WebApiOpenApiDocumentGeneratorSettings <Settings>k__BackingField;
    public WebApiOpenApiDocumentGeneratorSettings Settings { get; }
    public WebApiOpenApiDocumentGenerator(WebApiOpenApiDocumentGeneratorSettings settings);
    public static IEnumerable`1<Type> GetControllerClasses(Assembly assembly);
    [CompilerGeneratedAttribute]
public WebApiOpenApiDocumentGeneratorSettings get_Settings();
    public Task`1<OpenApiDocument> GenerateForControllerAsync();
    public Task`1<OpenApiDocument> GenerateForControllerAsync(Type controllerType);
    [AsyncStateMachineAttribute("NSwag.Generation.WebApi.WebApiOpenApiDocumentGenerator/<GenerateForControllersAsync>d__7")]
public Task`1<OpenApiDocument> GenerateForControllersAsync(IEnumerable`1<Type> controllerTypes);
    [AsyncStateMachineAttribute("NSwag.Generation.WebApi.WebApiOpenApiDocumentGenerator/<CreateDocumentAsync>d__8")]
private Task`1<OpenApiDocument> CreateDocumentAsync();
    private bool GenerateForController(OpenApiDocument document, Type controllerType, OpenApiDocumentGenerator swaggerGenerator, OpenApiSchemaResolver schemaResolver);
    private bool AddOperationDescriptionsToDocument(OpenApiDocument document, Type controllerType, List`1<Tuple`2<OpenApiOperationDescription, MethodInfo>> operations, OpenApiDocumentGenerator swaggerGenerator, OpenApiSchemaResolver schemaResolver);
    private bool RunOperationProcessors(OpenApiDocument document, Type controllerType, MethodInfo methodInfo, OpenApiOperationDescription operationDescription, List`1<OpenApiOperationDescription> allOperations, OpenApiDocumentGenerator generator, OpenApiSchemaResolver schemaResolver);
    private static IEnumerable`1<MethodInfo> GetActionMethods(Type controllerType);
    private string GetOperationId(OpenApiDocument document, string controllerName, MethodInfo method, string httpMethod);
    private IEnumerable`1<string> GetHttpPaths(Type controllerType, MethodInfo method);
    [IteratorStateMachineAttribute("NSwag.Generation.WebApi.WebApiOpenApiDocumentGenerator/<ExpandOptionalHttpPathParameters>d__15")]
private IEnumerable`1<string> ExpandOptionalHttpPathParameters(string path, MethodInfo method);
    private IEnumerable`1<RouteAttributeFacade> GetAllRouteAttributes(Type type);
    private RoutePrefixAttributeFacade GetRoutePrefixAttribute(Type type);
    private IEnumerable`1<RouteAttributeFacade> GetRouteAttributes(IEnumerable`1<Attribute> attributes);
    private IEnumerable`1<RoutePrefixAttributeFacade> GetRoutePrefixAttributes(IEnumerable`1<Attribute> attributes);
    private string GetActionName(MethodInfo method);
    [IteratorStateMachineAttribute("NSwag.Generation.WebApi.WebApiOpenApiDocumentGenerator/<GetSupportedHttpMethods>d__21")]
private IEnumerable`1<string> GetSupportedHttpMethods(MethodInfo method);
    [IteratorStateMachineAttribute("NSwag.Generation.WebApi.WebApiOpenApiDocumentGenerator/<GetSupportedHttpMethodsFromAttributes>d__22")]
private IEnumerable`1<string> GetSupportedHttpMethodsFromAttributes(MethodInfo method);
}
public class NSwag.Generation.WebApi.WebApiOpenApiDocumentGeneratorSettings : OpenApiDocumentGeneratorSettings {
    [CompilerGeneratedAttribute]
private string <DefaultUrlTemplate>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsAspNetCore>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <AddMissingPathParameters>k__BackingField;
    public string DefaultUrlTemplate { get; public set; }
    public bool IsAspNetCore { get; public set; }
    public bool AddMissingPathParameters { get; public set; }
    [CompilerGeneratedAttribute]
public string get_DefaultUrlTemplate();
    [CompilerGeneratedAttribute]
public void set_DefaultUrlTemplate(string value);
    [CompilerGeneratedAttribute]
public bool get_IsAspNetCore();
    [CompilerGeneratedAttribute]
public void set_IsAspNetCore(bool value);
    [CompilerGeneratedAttribute]
public bool get_AddMissingPathParameters();
    [CompilerGeneratedAttribute]
public void set_AddMissingPathParameters(bool value);
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
[AttributeUsageAttribute("2")]
internal class System.Runtime.CompilerServices.RefSafetyRulesAttribute : Attribute {
    public int Version;
    public RefSafetyRulesAttribute(int );
}
