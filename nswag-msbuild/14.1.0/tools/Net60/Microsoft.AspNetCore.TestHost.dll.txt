[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal abstract class Microsoft.AspNetCore.TestHost.ApplicationWrapper : object {
    internal abstract virtual object CreateContext(IFeatureCollection features);
    internal abstract virtual Task ProcessRequestAsync(object context);
    internal abstract virtual void DisposeContext(object context, Exception exception);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Microsoft.AspNetCore.TestHost.ApplicationWrapper`1 : ApplicationWrapper {
    private IHttpApplication`1<TContext> _application;
    private Action _preProcessRequestAsync;
    public ApplicationWrapper`1(IHttpApplication`1<TContext> application, Action preProcessRequestAsync);
    internal virtual object CreateContext(IFeatureCollection features);
    private sealed virtual override TContext Microsoft.AspNetCore.Hosting.Server.IHttpApplication<TContext>.CreateContext(IFeatureCollection features);
    internal virtual void DisposeContext(object context, Exception exception);
    private sealed virtual override void Microsoft.AspNetCore.Hosting.Server.IHttpApplication<TContext>.DisposeContext(TContext context, Exception exception);
    internal virtual Task ProcessRequestAsync(object context);
    private sealed virtual override Task Microsoft.AspNetCore.Hosting.Server.IHttpApplication<TContext>.ProcessRequestAsync(TContext context);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Microsoft.AspNetCore.TestHost.AsyncStreamWrapper : Stream {
    private Stream _inner;
    private Func`1<bool> _allowSynchronousIO;
    public bool CanRead { get; }
    public bool CanSeek { get; }
    public bool CanWrite { get; }
    public long Length { get; }
    public long Position { get; public set; }
    internal AsyncStreamWrapper(Stream inner, Func`1<bool> allowSynchronousIO);
    public virtual bool get_CanRead();
    public virtual bool get_CanSeek();
    public virtual bool get_CanWrite();
    public virtual long get_Length();
    public virtual long get_Position();
    public virtual void set_Position(long value);
    public virtual void Flush();
    public virtual Task FlushAsync(CancellationToken cancellationToken);
    public virtual int Read(Byte[] buffer, int offset, int count);
    public virtual Task`1<int> ReadAsync(Byte[] buffer, int offset, int count, CancellationToken cancellationToken);
    [NullableContextAttribute("0")]
public virtual ValueTask`1<int> ReadAsync(Memory`1<byte> buffer, CancellationToken cancellationToken);
    public virtual IAsyncResult BeginRead(Byte[] buffer, int offset, int count, AsyncCallback callback, object state);
    public virtual int EndRead(IAsyncResult asyncResult);
    public virtual long Seek(long offset, SeekOrigin origin);
    public virtual void SetLength(long value);
    public virtual void Write(Byte[] buffer, int offset, int count);
    public virtual IAsyncResult BeginWrite(Byte[] buffer, int offset, int count, AsyncCallback callback, object state);
    public virtual void EndWrite(IAsyncResult asyncResult);
    public virtual Task WriteAsync(Byte[] buffer, int offset, int count, CancellationToken cancellationToken);
    [NullableContextAttribute("0")]
public virtual ValueTask WriteAsync(ReadOnlyMemory`1<byte> buffer, CancellationToken cancellationToken);
    public virtual void Close();
    protected virtual void Dispose(bool disposing);
    public virtual ValueTask DisposeAsync();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Microsoft.AspNetCore.TestHost.ClientHandler : HttpMessageHandler {
    private ApplicationWrapper _application;
    private PathString _pathBase;
    [CompilerGeneratedAttribute]
private bool <AllowSynchronousIO>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <PreserveExecutionContext>k__BackingField;
    internal bool AllowSynchronousIO { get; internal set; }
    internal bool PreserveExecutionContext { get; internal set; }
    internal ClientHandler(PathString pathBase, ApplicationWrapper application);
    [CompilerGeneratedAttribute]
internal bool get_AllowSynchronousIO();
    [CompilerGeneratedAttribute]
internal void set_AllowSynchronousIO(bool value);
    [CompilerGeneratedAttribute]
internal bool get_PreserveExecutionContext();
    [CompilerGeneratedAttribute]
internal void set_PreserveExecutionContext(bool value);
    [AsyncStateMachineAttribute("Microsoft.AspNetCore.TestHost.ClientHandler/<SendAsync>d__11")]
protected virtual Task`1<HttpResponseMessage> SendAsync(HttpRequestMessage request, CancellationToken cancellationToken);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ExtensionAttribute]
public static class Microsoft.AspNetCore.TestHost.HostBuilderTestServerExtensions : object {
    [ExtensionAttribute]
public static TestServer GetTestServer(IHost host);
    [ExtensionAttribute]
public static HttpClient GetTestClient(IHost host);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Microsoft.AspNetCore.TestHost.HttpContextBuilder : object {
    private ApplicationWrapper _application;
    private bool _preserveExecutionContext;
    private HttpContext _httpContext;
    private TaskCompletionSource`1<HttpContext> _responseTcs;
    private ResponseBodyReaderStream _responseReaderStream;
    private ResponseBodyPipeWriter _responsePipeWriter;
    private ResponseFeature _responseFeature;
    private RequestLifetimeFeature _requestLifetimeFeature;
    private ResponseTrailersFeature _responseTrailersFeature;
    private bool _pipelineFinished;
    private bool _returningResponse;
    private object _testContext;
    private Pipe _requestPipe;
    private Action`1<HttpContext> _responseReadCompleteCallback;
    private Task _sendRequestStreamTask;
    [CompilerGeneratedAttribute]
private bool <AllowSynchronousIO>k__BackingField;
    public bool AllowSynchronousIO { get; public set; }
    internal HttpContextBuilder(ApplicationWrapper application, bool allowSynchronousIO, bool preserveExecutionContext);
    [CompilerGeneratedAttribute]
public sealed virtual bool get_AllowSynchronousIO();
    [CompilerGeneratedAttribute]
public sealed virtual void set_AllowSynchronousIO(bool value);
    internal void Configure(Action`2<HttpContext, PipeReader> configureContext);
    internal void SendRequestStream(Func`2<PipeWriter, Task> sendRequestStream);
    internal void RegisterResponseReadCompleteCallback(Action`1<HttpContext> responseReadCompleteCallback);
    internal Task`1<HttpContext> SendAsync(CancellationToken cancellationToken);
    internal void ClientInitiatedAbort();
    private void ResponseBodyReadComplete();
    private bool RequestBodyReadInProgress();
    [AsyncStateMachineAttribute("Microsoft.AspNetCore.TestHost.HttpContextBuilder/<CompleteResponseAsync>d__27")]
internal Task CompleteResponseAsync();
    [AsyncStateMachineAttribute("Microsoft.AspNetCore.TestHost.HttpContextBuilder/<ReturnResponseMessageAsync>d__28")]
internal Task ReturnResponseMessageAsync();
    internal void Abort(Exception exception);
    private void CancelRequestBody();
    private sealed virtual override void Microsoft.AspNetCore.Http.Features.IHttpResetFeature.Reset(int errorCode);
    [CompilerGeneratedAttribute]
private bool <.ctor>b__15_0();
}
public class Microsoft.AspNetCore.TestHost.HttpResetTestException : Exception {
    [CompilerGeneratedAttribute]
private int <ErrorCode>k__BackingField;
    public int ErrorCode { get; }
    public HttpResetTestException(int errorCode);
    [CompilerGeneratedAttribute]
public int get_ErrorCode();
}
internal class Microsoft.AspNetCore.TestHost.NoopHostLifetime : object {
    [NullableContextAttribute("1")]
public sealed virtual Task StopAsync(CancellationToken cancellationToken);
    [NullableContextAttribute("1")]
public sealed virtual Task WaitForStartAsync(CancellationToken cancellationToken);
}
internal class Microsoft.AspNetCore.TestHost.RequestBodyDetectionFeature : object {
    [CompilerGeneratedAttribute]
private bool <CanHaveBody>k__BackingField;
    public bool CanHaveBody { get; }
    public RequestBodyDetectionFeature(bool canHaveBody);
    [CompilerGeneratedAttribute]
public sealed virtual bool get_CanHaveBody();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Microsoft.AspNetCore.TestHost.RequestBuilder : object {
    private HttpRequestMessage _req;
    [CompilerGeneratedAttribute]
private TestServer <TestServer>k__BackingField;
    public TestServer TestServer { get; }
    public RequestBuilder(TestServer server, string path);
    [CompilerGeneratedAttribute]
public TestServer get_TestServer();
    public RequestBuilder And(Action`1<HttpRequestMessage> configure);
    public RequestBuilder AddHeader(string name, string value);
    public Task`1<HttpResponseMessage> SendAsync(string method);
    public Task`1<HttpResponseMessage> GetAsync();
    public Task`1<HttpResponseMessage> PostAsync();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Microsoft.AspNetCore.TestHost.RequestFeature : object {
    [CompilerGeneratedAttribute]
private Stream <Body>k__BackingField;
    [CompilerGeneratedAttribute]
private IHeaderDictionary <Headers>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Method>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Path>k__BackingField;
    [CompilerGeneratedAttribute]
private string <PathBase>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Protocol>k__BackingField;
    [CompilerGeneratedAttribute]
private string <QueryString>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Scheme>k__BackingField;
    [CompilerGeneratedAttribute]
private string <RawTarget>k__BackingField;
    public Stream Body { get; public set; }
    public IHeaderDictionary Headers { get; public set; }
    public string Method { get; public set; }
    public string Path { get; public set; }
    public string PathBase { get; public set; }
    public string Protocol { get; public set; }
    public string QueryString { get; public set; }
    public string Scheme { get; public set; }
    public string RawTarget { get; public set; }
    [CompilerGeneratedAttribute]
public sealed virtual Stream get_Body();
    [CompilerGeneratedAttribute]
public sealed virtual void set_Body(Stream value);
    [CompilerGeneratedAttribute]
public sealed virtual IHeaderDictionary get_Headers();
    [CompilerGeneratedAttribute]
public sealed virtual void set_Headers(IHeaderDictionary value);
    [CompilerGeneratedAttribute]
public sealed virtual string get_Method();
    [CompilerGeneratedAttribute]
public sealed virtual void set_Method(string value);
    [CompilerGeneratedAttribute]
public sealed virtual string get_Path();
    [CompilerGeneratedAttribute]
public sealed virtual void set_Path(string value);
    [CompilerGeneratedAttribute]
public sealed virtual string get_PathBase();
    [CompilerGeneratedAttribute]
public sealed virtual void set_PathBase(string value);
    [CompilerGeneratedAttribute]
public sealed virtual string get_Protocol();
    [CompilerGeneratedAttribute]
public sealed virtual void set_Protocol(string value);
    [CompilerGeneratedAttribute]
public sealed virtual string get_QueryString();
    [CompilerGeneratedAttribute]
public sealed virtual void set_QueryString(string value);
    [CompilerGeneratedAttribute]
public sealed virtual string get_Scheme();
    [CompilerGeneratedAttribute]
public sealed virtual void set_Scheme(string value);
    [CompilerGeneratedAttribute]
public sealed virtual string get_RawTarget();
    [CompilerGeneratedAttribute]
public sealed virtual void set_RawTarget(string value);
}
internal class Microsoft.AspNetCore.TestHost.RequestLifetimeFeature : object {
    private CancellationTokenSource _cancellationTokenSource;
    private Action`1<Exception> _abort;
    [CompilerGeneratedAttribute]
private CancellationToken <RequestAborted>k__BackingField;
    public CancellationToken RequestAborted { get; public set; }
    [NullableContextAttribute("1")]
public RequestLifetimeFeature(Action`1<Exception> abort);
    [CompilerGeneratedAttribute]
public sealed virtual CancellationToken get_RequestAborted();
    [CompilerGeneratedAttribute]
public sealed virtual void set_RequestAborted(CancellationToken value);
    internal void Cancel();
    private sealed virtual override void Microsoft.AspNetCore.Http.Features.IHttpRequestLifetimeFeature.Abort();
}
internal class Microsoft.AspNetCore.TestHost.ResponseBodyPipeWriter : PipeWriter {
    private Func`1<Task> _onFirstWriteAsync;
    private Pipe _pipe;
    private bool _firstWrite;
    private bool _complete;
    [NullableContextAttribute("1")]
internal ResponseBodyPipeWriter(Pipe pipe, Func`1<Task> onFirstWriteAsync);
    [AsyncStateMachineAttribute("Microsoft.AspNetCore.TestHost.ResponseBodyPipeWriter/<FlushAsync>d__5")]
public virtual ValueTask`1<FlushResult> FlushAsync(CancellationToken cancellationToken);
    private Task FirstWriteAsync();
    [NullableContextAttribute("1")]
internal void Abort(Exception innerException);
    internal void Complete();
    private void CheckNotComplete();
    [NullableContextAttribute("2")]
public virtual void Complete(Exception exception);
    public virtual void CancelPendingFlush();
    public virtual void Advance(int bytes);
    public virtual Memory`1<byte> GetMemory(int sizeHint);
    public virtual Span`1<byte> GetSpan(int sizeHint);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Microsoft.AspNetCore.TestHost.ResponseBodyReaderStream : Stream {
    private bool _readerComplete;
    private bool _aborted;
    private Exception _abortException;
    private object _abortLock;
    private Action _abortRequest;
    private Action _readComplete;
    private Pipe _pipe;
    public bool CanRead { get; }
    public bool CanSeek { get; }
    public bool CanWrite { get; }
    public long Length { get; }
    public long Position { get; public set; }
    internal ResponseBodyReaderStream(Pipe pipe, Action abortRequest, Action readComplete);
    public virtual bool get_CanRead();
    public virtual bool get_CanSeek();
    public virtual bool get_CanWrite();
    public virtual long get_Length();
    public virtual long get_Position();
    public virtual void set_Position(long value);
    public virtual long Seek(long offset, SeekOrigin origin);
    public virtual void SetLength(long value);
    public virtual void Flush();
    public virtual Task FlushAsync(CancellationToken cancellationToken);
    public virtual void Write(Byte[] buffer, int offset, int count);
    public virtual Task WriteAsync(Byte[] buffer, int offset, int count, CancellationToken cancellationToken);
    public virtual int Read(Byte[] buffer, int offset, int count);
    [AsyncStateMachineAttribute("Microsoft.AspNetCore.TestHost.ResponseBodyReaderStream/<ReadAsync>d__26")]
public virtual Task`1<int> ReadAsync(Byte[] buffer, int offset, int count, CancellationToken cancellationToken);
    private static void VerifyBuffer(Byte[] buffer, int offset, int count);
    internal void Cancel();
    internal void Abort(Exception innerException);
    private void CheckAborted();
    protected virtual void Dispose(bool disposing);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Microsoft.AspNetCore.TestHost.ResponseBodyWriterStream : Stream {
    private ResponseBodyPipeWriter _responseWriter;
    private Func`1<bool> _allowSynchronousIO;
    public bool CanRead { get; }
    public bool CanSeek { get; }
    public bool CanWrite { get; }
    public long Length { get; }
    public long Position { get; public set; }
    public ResponseBodyWriterStream(ResponseBodyPipeWriter responseWriter, Func`1<bool> allowSynchronousIO);
    public virtual bool get_CanRead();
    public virtual bool get_CanSeek();
    public virtual bool get_CanWrite();
    public virtual long get_Length();
    public virtual long get_Position();
    public virtual void set_Position(long value);
    public virtual int Read(Byte[] buffer, int offset, int count);
    public virtual long Seek(long offset, SeekOrigin origin);
    public virtual void SetLength(long value);
    public virtual void Flush();
    [AsyncStateMachineAttribute("Microsoft.AspNetCore.TestHost.ResponseBodyWriterStream/<FlushAsync>d__18")]
public virtual Task FlushAsync(CancellationToken cancellationToken);
    public virtual void Write(Byte[] buffer, int offset, int count);
    [AsyncStateMachineAttribute("Microsoft.AspNetCore.TestHost.ResponseBodyWriterStream/<WriteAsync>d__20")]
public virtual Task WriteAsync(Byte[] buffer, int offset, int count, CancellationToken cancellationToken);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Microsoft.AspNetCore.TestHost.ResponseFeature : object {
    private HeaderDictionary _headers;
    private Action`1<Exception> _abort;
    private Func`1<Task> _responseStartingAsync;
    private Func`1<Task> _responseCompletedAsync;
    private int _statusCode;
    private string _reasonPhrase;
    [CompilerGeneratedAttribute]
private IHeaderDictionary <Headers>k__BackingField;
    [CompilerGeneratedAttribute]
private Stream <Body>k__BackingField;
    [CompilerGeneratedAttribute]
private PipeWriter <BodyWriter>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <HasStarted>k__BackingField;
    public int StatusCode { get; public set; }
    [NullableAttribute("2")]
public string ReasonPhrase { get; public set; }
    public IHeaderDictionary Headers { get; public set; }
    public Stream Body { get; public set; }
    public Stream Stream { get; }
    internal PipeWriter BodyWriter { get; internal set; }
    public PipeWriter Writer { get; }
    public bool HasStarted { get; public set; }
    public ResponseFeature(Action`1<Exception> abort);
    public sealed virtual int get_StatusCode();
    public sealed virtual void set_StatusCode(int value);
    [NullableContextAttribute("2")]
public sealed virtual string get_ReasonPhrase();
    [NullableContextAttribute("2")]
public sealed virtual void set_ReasonPhrase(string value);
    [CompilerGeneratedAttribute]
public sealed virtual IHeaderDictionary get_Headers();
    [CompilerGeneratedAttribute]
public sealed virtual void set_Headers(IHeaderDictionary value);
    [CompilerGeneratedAttribute]
public sealed virtual Stream get_Body();
    [CompilerGeneratedAttribute]
public sealed virtual void set_Body(Stream value);
    public sealed virtual Stream get_Stream();
    [CompilerGeneratedAttribute]
internal PipeWriter get_BodyWriter();
    [CompilerGeneratedAttribute]
internal void set_BodyWriter(PipeWriter value);
    public sealed virtual PipeWriter get_Writer();
    [CompilerGeneratedAttribute]
public sealed virtual bool get_HasStarted();
    [CompilerGeneratedAttribute]
public void set_HasStarted(bool value);
    public sealed virtual void OnStarting(Func`2<object, Task> callback, object state);
    public sealed virtual void OnCompleted(Func`2<object, Task> callback, object state);
    [AsyncStateMachineAttribute("Microsoft.AspNetCore.TestHost.ResponseFeature/<FireOnSendingHeadersAsync>d__35")]
public Task FireOnSendingHeadersAsync();
    public Task FireOnResponseCompletedAsync();
    [AsyncStateMachineAttribute("Microsoft.AspNetCore.TestHost.ResponseFeature/<StartAsync>d__37")]
public sealed virtual Task StartAsync(CancellationToken token);
    public sealed virtual void DisableBuffering();
    public sealed virtual Task SendFileAsync(string path, long offset, Nullable`1<long> count, CancellationToken cancellation);
    public sealed virtual Task CompleteAsync();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Microsoft.AspNetCore.TestHost.ResponseTrailersFeature : object {
    [CompilerGeneratedAttribute]
private IHeaderDictionary <Trailers>k__BackingField;
    public IHeaderDictionary Trailers { get; public set; }
    [CompilerGeneratedAttribute]
public sealed virtual IHeaderDictionary get_Trailers();
    [CompilerGeneratedAttribute]
public sealed virtual void set_Trailers(IHeaderDictionary value);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Microsoft.AspNetCore.TestHost.TestServer : object {
    private IWebHost _hostInstance;
    private bool _disposed;
    private ApplicationWrapper _application;
    [CompilerGeneratedAttribute]
private Uri <BaseAddress>k__BackingField;
    [CompilerGeneratedAttribute]
private IServiceProvider <Services>k__BackingField;
    [CompilerGeneratedAttribute]
private IFeatureCollection <Features>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <AllowSynchronousIO>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <PreserveExecutionContext>k__BackingField;
    public Uri BaseAddress { get; public set; }
    public IWebHost Host { get; }
    public IServiceProvider Services { get; }
    public IFeatureCollection Features { get; }
    public bool AllowSynchronousIO { get; public set; }
    public bool PreserveExecutionContext { get; public set; }
    private ApplicationWrapper Application { get; }
    public TestServer(IServiceProvider services, IOptions`1<TestServerOptions> optionsAccessor);
    public TestServer(IServiceProvider services, IFeatureCollection featureCollection, IOptions`1<TestServerOptions> optionsAccessor);
    public TestServer(IServiceProvider services);
    public TestServer(IServiceProvider services, IFeatureCollection featureCollection);
    public TestServer(IWebHostBuilder builder);
    public TestServer(IWebHostBuilder builder, IFeatureCollection featureCollection);
    [CompilerGeneratedAttribute]
public Uri get_BaseAddress();
    [CompilerGeneratedAttribute]
public void set_BaseAddress(Uri value);
    public IWebHost get_Host();
    [CompilerGeneratedAttribute]
public IServiceProvider get_Services();
    [CompilerGeneratedAttribute]
public sealed virtual IFeatureCollection get_Features();
    [CompilerGeneratedAttribute]
public bool get_AllowSynchronousIO();
    [CompilerGeneratedAttribute]
public void set_AllowSynchronousIO(bool value);
    [CompilerGeneratedAttribute]
public bool get_PreserveExecutionContext();
    [CompilerGeneratedAttribute]
public void set_PreserveExecutionContext(bool value);
    private ApplicationWrapper get_Application();
    public HttpMessageHandler CreateHandler();
    public HttpClient CreateClient();
    public WebSocketClient CreateWebSocketClient();
    public RequestBuilder CreateRequest(string path);
    [AsyncStateMachineAttribute("Microsoft.AspNetCore.TestHost.TestServer/<SendAsync>d__35")]
public Task`1<HttpContext> SendAsync(Action`1<HttpContext> configureContext, CancellationToken cancellationToken);
    public sealed virtual void Dispose();
    private sealed virtual override Task Microsoft.AspNetCore.Hosting.Server.IServer.StartAsync(IHttpApplication`1<TContext> application, CancellationToken cancellationToken);
    private sealed virtual override Task Microsoft.AspNetCore.Hosting.Server.IServer.StopAsync(CancellationToken cancellationToken);
    [CompilerGeneratedAttribute]
private void <Microsoft.AspNetCore.Hosting.Server.IServer.StartAsync>b__37_0();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Microsoft.AspNetCore.TestHost.TestServerOptions : object {
    [CompilerGeneratedAttribute]
private bool <AllowSynchronousIO>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <PreserveExecutionContext>k__BackingField;
    [CompilerGeneratedAttribute]
private Uri <BaseAddress>k__BackingField;
    public bool AllowSynchronousIO { get; public set; }
    public bool PreserveExecutionContext { get; public set; }
    public Uri BaseAddress { get; public set; }
    [CompilerGeneratedAttribute]
public bool get_AllowSynchronousIO();
    [CompilerGeneratedAttribute]
public void set_AllowSynchronousIO(bool value);
    [CompilerGeneratedAttribute]
public bool get_PreserveExecutionContext();
    [CompilerGeneratedAttribute]
public void set_PreserveExecutionContext(bool value);
    [CompilerGeneratedAttribute]
public Uri get_BaseAddress();
    [CompilerGeneratedAttribute]
public void set_BaseAddress(Uri value);
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
internal class Microsoft.AspNetCore.TestHost.TestWebSocket : WebSocket {
    private ReceiverSenderBuffer _receiveBuffer;
    private ReceiverSenderBuffer _sendBuffer;
    private string _subProtocol;
    private WebSocketState _state;
    private Nullable`1<WebSocketCloseStatus> _closeStatus;
    private string _closeStatusDescription;
    private Message _receiveMessage;
    public Nullable`1<WebSocketCloseStatus> CloseStatus { get; }
    public string CloseStatusDescription { get; }
    public WebSocketState State { get; }
    public string SubProtocol { get; }
    private TestWebSocket(string subProtocol, ReceiverSenderBuffer readBuffer, ReceiverSenderBuffer writeBuffer);
    [NullableContextAttribute("1")]
public static Tuple`2<TestWebSocket, TestWebSocket> CreatePair(string subProtocol);
    public virtual Nullable`1<WebSocketCloseStatus> get_CloseStatus();
    public virtual string get_CloseStatusDescription();
    public virtual WebSocketState get_State();
    public virtual string get_SubProtocol();
    [NullableContextAttribute("1")]
[AsyncStateMachineAttribute("Microsoft.AspNetCore.TestHost.TestWebSocket/<CloseAsync>d__16")]
public virtual Task CloseAsync(WebSocketCloseStatus closeStatus, string statusDescription, CancellationToken cancellationToken);
    [NullableContextAttribute("1")]
[AsyncStateMachineAttribute("Microsoft.AspNetCore.TestHost.TestWebSocket/<CloseOutputAsync>d__17")]
public virtual Task CloseOutputAsync(WebSocketCloseStatus closeStatus, string statusDescription, CancellationToken cancellationToken);
    public virtual void Abort();
    public virtual void Dispose();
    [NullableContextAttribute("0")]
[AsyncStateMachineAttribute("Microsoft.AspNetCore.TestHost.TestWebSocket/<ReceiveAsync>d__20")]
public virtual Task`1<WebSocketReceiveResult> ReceiveAsync(ArraySegment`1<byte> buffer, CancellationToken cancellationToken);
    [NullableContextAttribute("0")]
public virtual Task SendAsync(ArraySegment`1<byte> buffer, WebSocketMessageType messageType, bool endOfMessage, CancellationToken cancellationToken);
    private void Close();
    private void ThrowIfDisposed();
    private void ThrowIfOutputClosed();
    private void ThrowIfInputClosed();
    private void ValidateSegment(ArraySegment`1<byte> buffer);
}
internal class Microsoft.AspNetCore.TestHost.UpgradeFeature : object {
    public bool IsUpgradableRequest { get; }
    public sealed virtual bool get_IsUpgradableRequest();
    [NullableContextAttribute("1")]
public sealed virtual Task`1<Stream> UpgradeAsync();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ExtensionAttribute]
public static class Microsoft.AspNetCore.TestHost.WebHostBuilderExtensions : object {
    [ExtensionAttribute]
public static IWebHostBuilder UseTestServer(IWebHostBuilder builder);
    [ExtensionAttribute]
public static IWebHostBuilder UseTestServer(IWebHostBuilder builder, Action`1<TestServerOptions> configureOptions);
    [ExtensionAttribute]
public static TestServer GetTestServer(IWebHost host);
    [ExtensionAttribute]
public static HttpClient GetTestClient(IWebHost host);
    [ExtensionAttribute]
public static IWebHostBuilder ConfigureTestServices(IWebHostBuilder webHostBuilder, Action`1<IServiceCollection> servicesConfiguration);
    [ExtensionAttribute]
public static IWebHostBuilder ConfigureTestContainer(IWebHostBuilder webHostBuilder, Action`1<TContainer> servicesConfiguration);
    [ExtensionAttribute]
public static IWebHostBuilder UseSolutionRelativeContentRoot(IWebHostBuilder builder, string solutionRelativePath, string solutionName);
    [ExtensionAttribute]
public static IWebHostBuilder UseSolutionRelativeContentRoot(IWebHostBuilder builder, string solutionRelativePath, string applicationBasePath, string solutionName);
}
public static class Microsoft.AspNetCore.TestHost.WebHostBuilderFactory : object {
    [NullableContextAttribute("1")]
public static IWebHostBuilder CreateFromAssemblyEntryPoint(Assembly assembly, String[] args);
    [NullableContextAttribute("2")]
public static IWebHostBuilder CreateFromTypesAssemblyEntryPoint(String[] args);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Microsoft.AspNetCore.TestHost.WebSocketClient : object {
    private ApplicationWrapper _application;
    private PathString _pathBase;
    [CompilerGeneratedAttribute]
private IList`1<string> <SubProtocols>k__BackingField;
    [CompilerGeneratedAttribute]
private Action`1<HttpRequest> <ConfigureRequest>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <AllowSynchronousIO>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <PreserveExecutionContext>k__BackingField;
    public IList`1<string> SubProtocols { get; }
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public Action`1<HttpRequest> ConfigureRequest { get; public set; }
    internal bool AllowSynchronousIO { get; internal set; }
    internal bool PreserveExecutionContext { get; internal set; }
    internal WebSocketClient(PathString pathBase, ApplicationWrapper application);
    [CompilerGeneratedAttribute]
public IList`1<string> get_SubProtocols();
    [CompilerGeneratedAttribute]
public Action`1<HttpRequest> get_ConfigureRequest();
    [CompilerGeneratedAttribute]
public void set_ConfigureRequest(Action`1<HttpRequest> value);
    [CompilerGeneratedAttribute]
internal bool get_AllowSynchronousIO();
    [CompilerGeneratedAttribute]
internal void set_AllowSynchronousIO(bool value);
    [CompilerGeneratedAttribute]
internal bool get_PreserveExecutionContext();
    [CompilerGeneratedAttribute]
internal void set_PreserveExecutionContext(bool value);
    [AsyncStateMachineAttribute("Microsoft.AspNetCore.TestHost.WebSocketClient/<ConnectAsync>d__18")]
public Task`1<WebSocket> ConnectAsync(Uri uri, CancellationToken cancellationToken);
    private string CreateRequestKey();
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
internal class Microsoft.CodeAnalysis.EmbeddedAttribute : Attribute {
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Microsoft.Extensions.Hosting.HostFactoryResolver : object {
    private static BindingFlags DeclaredOnlyLookup;
    public static string BuildWebHost;
    public static string CreateWebHostBuilder;
    public static string CreateHostBuilder;
    private static TimeSpan s_defaultWaitTimeout;
    private static HostFactoryResolver();
    public static Func`2<String[], TWebHost> ResolveWebHostFactory(Assembly assembly);
    public static Func`2<String[], TWebHostBuilder> ResolveWebHostBuilderFactory(Assembly assembly);
    public static Func`2<String[], THostBuilder> ResolveHostBuilderFactory(Assembly assembly);
    public static Func`2<String[], object> ResolveHostFactory(Assembly assembly, Nullable`1<TimeSpan> waitTimeout, bool stopApplication, Action`1<object> configureHostBuilder, Action`1<Exception> entrypointCompleted);
    private static Func`2<String[], T> ResolveFactory(Assembly assembly, string name);
    private static bool IsFactory(MethodInfo factory);
    public static Func`2<String[], IServiceProvider> ResolveServiceProviderFactory(Assembly assembly, Nullable`1<TimeSpan> waitTimeout);
    private static object Build(object builder);
    private static IServiceProvider GetServiceProvider(object host);
    [CompilerGeneratedAttribute]
internal static bool <ResolveServiceProviderFactory>g__IsApplicationNameArg|11_4(string arg);
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
[AttributeUsageAttribute("27524")]
internal class System.Runtime.CompilerServices.NullableAttribute : Attribute {
    public Byte[] NullableFlags;
    public NullableAttribute(byte );
    public NullableAttribute(Byte[] );
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
[AttributeUsageAttribute("5196")]
internal class System.Runtime.CompilerServices.NullableContextAttribute : Attribute {
    public byte Flag;
    public NullableContextAttribute(byte );
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
[AttributeUsageAttribute("2")]
internal class System.Runtime.CompilerServices.NullablePublicOnlyAttribute : Attribute {
    public bool IncludesInternals;
    public NullablePublicOnlyAttribute(bool );
}
