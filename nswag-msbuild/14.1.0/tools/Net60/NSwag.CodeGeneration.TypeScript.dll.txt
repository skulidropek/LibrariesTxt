[CompilerGeneratedAttribute]
[EmbeddedAttribute]
internal class Microsoft.CodeAnalysis.EmbeddedAttribute : Attribute {
}
public enum NSwag.CodeGeneration.TypeScript.HttpClass : Enum {
    public int value__;
    public static HttpClass Http;
    public static HttpClass HttpClient;
}
public enum NSwag.CodeGeneration.TypeScript.InjectionTokenType : Enum {
    public int value__;
    public static InjectionTokenType OpaqueToken;
    public static InjectionTokenType InjectionToken;
}
public class NSwag.CodeGeneration.TypeScript.Models.TypeScriptClientTemplateModel : object {
    private TypeScriptExtensionCode _extensionCode;
    private TypeScriptClientGeneratorSettings _settings;
    private OpenApiDocument _document;
    [CompilerGeneratedAttribute]
private TypeScriptFrameworkModel <Framework>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Class>k__BackingField;
    [CompilerGeneratedAttribute]
private string <BaseClass>k__BackingField;
    [CompilerGeneratedAttribute]
private IEnumerable`1<TypeScriptOperationModel> <Operations>k__BackingField;
    public TypeScriptFrameworkModel Framework { get; public set; }
    public string Class { get; }
    public bool HasBaseClass { get; }
    public string BaseClass { get; }
    public bool UseGetBaseUrlMethod { get; }
    public string ConfigurationClass { get; }
    public bool HasConfigurationClass { get; }
    public bool UseTransformOptionsMethod { get; }
    public bool UseTransformResultMethod { get; }
    public bool GenerateOptionalParameters { get; }
    public bool HasExtensionCode { get; }
    public string ExtensionCode { get; }
    public bool HasExtendedConstructor { get; }
    public bool HasOperations { get; }
    public IEnumerable`1<TypeScriptOperationModel> Operations { get; }
    public string BaseUrl { get; }
    public bool GenerateClientInterfaces { get; }
    public string PromiseType { get; }
    public string PromiseConstructor { get; }
    public bool UseAureliaHttpInjection { get; }
    public bool SupportsStrictNullChecks { get; }
    public bool WrapDtoExceptions { get; }
    public string QueryNullValue { get; }
    public bool ExportTypes { get; }
    public bool UseAbortSignal { get; }
    public bool IncludeHttpContext { get; }
    public TypeScriptClientTemplateModel(string controllerName, string controllerClassName, IEnumerable`1<TypeScriptOperationModel> operations, TypeScriptExtensionCode extensionCode, OpenApiDocument document, TypeScriptClientGeneratorSettings settings);
    [CompilerGeneratedAttribute]
public TypeScriptFrameworkModel get_Framework();
    [CompilerGeneratedAttribute]
public void set_Framework(TypeScriptFrameworkModel value);
    [CompilerGeneratedAttribute]
public string get_Class();
    public bool get_HasBaseClass();
    [CompilerGeneratedAttribute]
public string get_BaseClass();
    public bool get_UseGetBaseUrlMethod();
    public string get_ConfigurationClass();
    public bool get_HasConfigurationClass();
    public bool get_UseTransformOptionsMethod();
    public bool get_UseTransformResultMethod();
    public bool get_GenerateOptionalParameters();
    public bool get_HasExtensionCode();
    public string get_ExtensionCode();
    public bool get_HasExtendedConstructor();
    public bool get_HasOperations();
    [CompilerGeneratedAttribute]
public IEnumerable`1<TypeScriptOperationModel> get_Operations();
    public string get_BaseUrl();
    public bool get_GenerateClientInterfaces();
    public string get_PromiseType();
    public string get_PromiseConstructor();
    public bool get_UseAureliaHttpInjection();
    public bool get_SupportsStrictNullChecks();
    public bool get_WrapDtoExceptions();
    public string get_QueryNullValue();
    public bool get_ExportTypes();
    public bool get_UseAbortSignal();
    public bool get_IncludeHttpContext();
    [CompilerGeneratedAttribute]
private bool <get_HasExtensionCode>b__29_0(string c);
}
public class NSwag.CodeGeneration.TypeScript.Models.TypeScriptFileTemplateModel : object {
    private TypeScriptClientGeneratorSettings _settings;
    private TypeScriptTypeResolver _resolver;
    private string _clientCode;
    private IEnumerable`1<CodeArtifact> _clientTypes;
    private OpenApiDocument _document;
    private TypeScriptExtensionCode _extensionCode;
    [CompilerGeneratedAttribute]
private TypeScriptFrameworkModel <Framework>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Types>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ExtensionCodeBottom>k__BackingField;
    public TypeScriptFrameworkModel Framework { get; public set; }
    public bool GenerateClientClasses { get; }
    public bool WrapDtoExceptions { get; }
    public bool WrapResponses { get; }
    public bool GenerateResponseClasses { get; }
    public IEnumerable`1<string> ResponseClassNames { get; }
    public bool ImportRequiredTypes { get; }
    public bool UseTransformOptionsMethod { get; }
    public bool IncludeHttpContext { get; }
    public string Clients { get; }
    public string Types { get; }
    public string ExtensionCodeImport { get; }
    public string ExtensionCodeTop { get; }
    public string ExtensionCodeBottom { get; }
    public bool HasModuleName { get; }
    public string ModuleName { get; }
    public bool HasNamespace { get; }
    public string Namespace { get; }
    public bool ExportTypes { get; }
    public bool RequiresFileParameterInterface { get; }
    public bool RequiresFileResponseInterface { get; }
    public bool RequiresClientFunctions { get; }
    public string ExceptionClassName { get; }
    public bool RequiresExceptionClass { get; }
    public bool HandleReferences { get; }
    public bool RequiresMomentJSDuration { get; }
    public bool SupportsOverrideKeyword { get; }
    public bool SupportsTypeOnlyImports { get; }
    public TypeScriptFileTemplateModel(IEnumerable`1<CodeArtifact> clientTypes, IEnumerable`1<CodeArtifact> dtoTypes, OpenApiDocument document, TypeScriptExtensionCode extensionCode, TypeScriptClientGeneratorSettings settings, TypeScriptTypeResolver resolver);
    [CompilerGeneratedAttribute]
public TypeScriptFrameworkModel get_Framework();
    [CompilerGeneratedAttribute]
public void set_Framework(TypeScriptFrameworkModel value);
    public bool get_GenerateClientClasses();
    public bool get_WrapDtoExceptions();
    public bool get_WrapResponses();
    public bool get_GenerateResponseClasses();
    public IEnumerable`1<string> get_ResponseClassNames();
    public bool get_ImportRequiredTypes();
    public bool get_UseTransformOptionsMethod();
    public bool get_IncludeHttpContext();
    public string get_Clients();
    [CompilerGeneratedAttribute]
public string get_Types();
    public string get_ExtensionCodeImport();
    public string get_ExtensionCodeTop();
    [CompilerGeneratedAttribute]
public string get_ExtensionCodeBottom();
    public bool get_HasModuleName();
    public string get_ModuleName();
    public bool get_HasNamespace();
    public string get_Namespace();
    public bool get_ExportTypes();
    public bool get_RequiresFileParameterInterface();
    public bool get_RequiresFileResponseInterface();
    public bool get_RequiresClientFunctions();
    public string get_ExceptionClassName();
    public bool get_RequiresExceptionClass();
    public bool get_HandleReferences();
    public bool get_RequiresMomentJSDuration();
    public bool get_SupportsOverrideKeyword();
    public bool get_SupportsTypeOnlyImports();
    private string GenerateExtensionCodeAfter();
    [CompilerGeneratedAttribute]
private string <get_ResponseClassNames>b__20_0(OpenApiOperationDescription o);
    [CompilerGeneratedAttribute]
private string <get_ResponseClassNames>b__20_1(IGrouping`2<string, OpenApiOperationDescription> g);
    [CompilerGeneratedAttribute]
private bool <get_ResponseClassNames>b__20_2(string a);
}
public class NSwag.CodeGeneration.TypeScript.Models.TypeScriptFrameworkAngularModel : object {
    private TypeScriptClientGeneratorSettings _settings;
    public string InjectionTokenType { get; }
    public string BaseUrlTokenName { get; }
    public string HttpClass { get; }
    public bool UseHttpClient { get; }
    public bool WithCredentials { get; }
    public bool UseSingletonProvider { get; }
    public bool ExportTypes { get; }
    internal TypeScriptFrameworkAngularModel(TypeScriptClientGeneratorSettings settings);
    public string get_InjectionTokenType();
    public string get_BaseUrlTokenName();
    public string get_HttpClass();
    public bool get_UseHttpClient();
    public bool get_WithCredentials();
    public bool get_UseSingletonProvider();
    public bool get_ExportTypes();
}
public class NSwag.CodeGeneration.TypeScript.Models.TypeScriptFrameworkModel : object {
    private TypeScriptClientGeneratorSettings _settings;
    [CompilerGeneratedAttribute]
private TypeScriptFrameworkRxJsModel <RxJs>k__BackingField;
    [CompilerGeneratedAttribute]
private TypeScriptFrameworkAngularModel <Angular>k__BackingField;
    public bool IsAngular { get; }
    public bool IsAurelia { get; }
    public bool IsAngularJS { get; }
    public bool IsKnockout { get; }
    public bool IsJQuery { get; }
    public bool IsFetchOrAurelia { get; }
    public bool IsAxios { get; }
    public bool UseMomentJS { get; }
    public bool UseDayJS { get; }
    public bool UseLuxon { get; }
    public bool UseRxJs5 { get; }
    public bool UseRxJs6 { get; }
    public bool UseRxJs7 { get; }
    public TypeScriptFrameworkRxJsModel RxJs { get; }
    public TypeScriptFrameworkAngularModel Angular { get; public set; }
    internal TypeScriptFrameworkModel(TypeScriptClientGeneratorSettings settings);
    public bool get_IsAngular();
    public bool get_IsAurelia();
    public bool get_IsAngularJS();
    public bool get_IsKnockout();
    public bool get_IsJQuery();
    public bool get_IsFetchOrAurelia();
    public bool get_IsAxios();
    public bool get_UseMomentJS();
    public bool get_UseDayJS();
    public bool get_UseLuxon();
    public bool get_UseRxJs5();
    public bool get_UseRxJs6();
    public bool get_UseRxJs7();
    [CompilerGeneratedAttribute]
public TypeScriptFrameworkRxJsModel get_RxJs();
    [CompilerGeneratedAttribute]
public TypeScriptFrameworkAngularModel get_Angular();
    [CompilerGeneratedAttribute]
public void set_Angular(TypeScriptFrameworkAngularModel value);
}
public class NSwag.CodeGeneration.TypeScript.Models.TypeScriptFrameworkRxJsModel : object {
    private TypeScriptFrameworkModel _model;
    public string ObservableMergeMapMethod { get; }
    public string ObservableCatchMethod { get; }
    public string ObservableOfMethod { get; }
    public string ObservableFromMethod { get; }
    public string ObservableThrowMethod { get; }
    public string ResponseTextProperty { get; }
    internal TypeScriptFrameworkRxJsModel(TypeScriptFrameworkModel model);
    public string get_ObservableMergeMapMethod();
    public string get_ObservableCatchMethod();
    public string get_ObservableOfMethod();
    public string get_ObservableFromMethod();
    public string get_ObservableThrowMethod();
    public string get_ResponseTextProperty();
}
public class NSwag.CodeGeneration.TypeScript.Models.TypeScriptOperationModel : OperationModelBase`2<TypeScriptParameterModel, TypeScriptResponseModel> {
    private TypeScriptClientGeneratorSettings _settings;
    private TypeScriptClientGenerator _generator;
    private OpenApiOperation _operation;
    public string ActualOperationName { get; }
    public string ActualOperationNameUpper { get; }
    public string ResultType { get; }
    public bool RequiresMappings { get; }
    public bool SupportsStrictNullChecks { get; }
    public bool HandleReferences { get; }
    public bool CanRequestBlobs { get; }
    public bool RequestAngularBlobs { get; }
    public bool RequestAngularJSBlobs { get; }
    public bool IsAngularJS { get; }
    public bool IsAngular { get; }
    public bool IsJQuery { get; }
    public bool IsFetchOrAurelia { get; }
    public bool UseAngularHttpClient { get; }
    public string ExceptionType { get; }
    public string MethodAccessModifier { get; }
    public bool WrapResponses { get; }
    public string ResponseClass { get; }
    public TypeScriptOperationModel(OpenApiOperation operation, TypeScriptClientGeneratorSettings settings, TypeScriptClientGenerator generator, TypeResolverBase resolver);
    public virtual string get_ActualOperationName();
    public string get_ActualOperationNameUpper();
    public virtual string get_ResultType();
    public bool get_RequiresMappings();
    public bool get_SupportsStrictNullChecks();
    public bool get_HandleReferences();
    public bool get_CanRequestBlobs();
    public bool get_RequestAngularBlobs();
    public bool get_RequestAngularJSBlobs();
    public bool get_IsAngularJS();
    public bool get_IsAngular();
    public bool get_IsJQuery();
    public bool get_IsFetchOrAurelia();
    public bool get_UseAngularHttpClient();
    public virtual string get_ExceptionType();
    public string get_MethodAccessModifier();
    public bool get_WrapResponses();
    public string get_ResponseClass();
    protected virtual string ResolveParameterType(OpenApiParameter parameter);
    protected virtual TypeScriptResponseModel CreateResponseModel(OpenApiOperation operation, string statusCode, OpenApiResponse response, JsonSchema exceptionSchema, IClientGenerator generator, TypeResolverBase resolver, ClientGeneratorBaseSettings settings);
    [CompilerGeneratedAttribute]
private string <get_ExceptionType>b__33_2(KeyValuePair`2<string, OpenApiResponse> r);
}
public class NSwag.CodeGeneration.TypeScript.Models.TypeScriptParameterModel : ParameterModelBase {
    private TypeScriptClientGeneratorSettings _settings;
    private JsonSchema _schema;
    public string TypePostfix { get; }
    public string GetDateTimeToString { get; }
    public TypeScriptParameterModel(string parameterName, string variableName, string typeName, OpenApiParameter parameter, IList`1<OpenApiParameter> allParameters, TypeScriptClientGeneratorSettings settings, TypeScriptClientGenerator generator, TypeResolverBase typeResolver);
    public string get_TypePostfix();
    public string get_GetDateTimeToString();
}
public class NSwag.CodeGeneration.TypeScript.Models.TypeScriptResponseModel : ResponseModelBase {
    private TypeScriptClientGeneratorSettings _settings;
    [CompilerGeneratedAttribute]
private string <DataConversionCode>k__BackingField;
    public string DataConversionCode { get; public set; }
    public bool UseDtoClass { get; }
    public TypeScriptResponseModel(IOperationModel operationModel, OpenApiOperation operation, string statusCode, OpenApiResponse response, bool isPrimarySuccessResponse, JsonSchema exceptionSchema, IClientGenerator generator, TypeResolverBase resolver, TypeScriptClientGeneratorSettings settings);
    [CompilerGeneratedAttribute]
public string get_DataConversionCode();
    [CompilerGeneratedAttribute]
public void set_DataConversionCode(string value);
    public bool get_UseDtoClass();
}
public enum NSwag.CodeGeneration.TypeScript.PromiseType : Enum {
    public int value__;
    public static PromiseType Promise;
    public static PromiseType QPromise;
}
public class NSwag.CodeGeneration.TypeScript.TypeScriptClientGenerator : ClientGeneratorBase`3<TypeScriptOperationModel, TypeScriptParameterModel, TypeScriptResponseModel> {
    private OpenApiDocument _document;
    private TypeScriptTypeResolver _resolver;
    private TypeScriptExtensionCode _extensionCode;
    [CompilerGeneratedAttribute]
private TypeScriptClientGeneratorSettings <Settings>k__BackingField;
    public TypeScriptClientGeneratorSettings Settings { get; public set; }
    public ClientGeneratorBaseSettings BaseSettings { get; }
    public TypeScriptClientGenerator(OpenApiDocument document, TypeScriptClientGeneratorSettings settings);
    public TypeScriptClientGenerator(OpenApiDocument document, TypeScriptClientGeneratorSettings settings, TypeScriptTypeResolver resolver);
    [CompilerGeneratedAttribute]
public TypeScriptClientGeneratorSettings get_Settings();
    [CompilerGeneratedAttribute]
public void set_Settings(TypeScriptClientGeneratorSettings value);
    public virtual ClientGeneratorBaseSettings get_BaseSettings();
    public virtual string GetTypeName(JsonSchema schema, bool isNullable, string typeNameHint);
    public virtual string GetBinaryResponseTypeName();
    protected virtual string GenerateFile(IEnumerable`1<CodeArtifact> clientTypes, IEnumerable`1<CodeArtifact> dtoTypes, ClientGeneratorOutputType outputType);
    [IteratorStateMachineAttribute("NSwag.CodeGeneration.TypeScript.TypeScriptClientGenerator/<GenerateClientTypes>d__14")]
protected virtual IEnumerable`1<CodeArtifact> GenerateClientTypes(string controllerName, string controllerClassName, IEnumerable`1<TypeScriptOperationModel> operations);
    protected virtual IEnumerable`1<CodeArtifact> GenerateDtoTypes();
    protected virtual TypeScriptOperationModel CreateOperationModel(OpenApiOperation operation, ClientGeneratorBaseSettings settings);
    private void UpdateUseDtoClassAndDataConversionCodeProperties(IEnumerable`1<TypeScriptOperationModel> operations);
}
public class NSwag.CodeGeneration.TypeScript.TypeScriptClientGeneratorSettings : ClientGeneratorBaseSettings {
    [CompilerGeneratedAttribute]
private TypeScriptGeneratorSettings <TypeScriptGeneratorSettings>k__BackingField;
    [CompilerGeneratedAttribute]
private TypeScriptTemplate <Template>k__BackingField;
    [CompilerGeneratedAttribute]
private PromiseType <PromiseType>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <WrapDtoExceptions>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ClientBaseClass>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ConfigurationClass>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <UseTransformOptionsMethod>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <UseTransformResultMethod>k__BackingField;
    [CompilerGeneratedAttribute]
private string <BaseUrlTokenName>k__BackingField;
    [CompilerGeneratedAttribute]
private String[] <ProtectedMethods>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <ImportRequiredTypes>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <UseGetBaseUrlMethod>k__BackingField;
    [CompilerGeneratedAttribute]
private string <QueryNullValue>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ExceptionClass>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <UseAbortSignal>k__BackingField;
    [CompilerGeneratedAttribute]
private HttpClass <HttpClass>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <WithCredentials>k__BackingField;
    [CompilerGeneratedAttribute]
private decimal <RxJsVersion>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <UseSingletonProvider>k__BackingField;
    [CompilerGeneratedAttribute]
private InjectionTokenType <InjectionTokenType>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IncludeHttpContext>k__BackingField;
    public TypeScriptGeneratorSettings TypeScriptGeneratorSettings { get; }
    [JsonIgnoreAttribute]
public CodeGeneratorSettingsBase CodeGeneratorSettings { get; }
    public TypeScriptTemplate Template { get; public set; }
    public PromiseType PromiseType { get; public set; }
    public bool WrapDtoExceptions { get; public set; }
    public string ClientBaseClass { get; public set; }
    public string ConfigurationClass { get; public set; }
    public bool UseTransformOptionsMethod { get; public set; }
    public bool UseTransformResultMethod { get; public set; }
    public string BaseUrlTokenName { get; public set; }
    public String[] ProtectedMethods { get; public set; }
    public bool ImportRequiredTypes { get; public set; }
    public bool UseGetBaseUrlMethod { get; public set; }
    public string QueryNullValue { get; public set; }
    public string ExceptionClass { get; public set; }
    public bool UseAbortSignal { get; public set; }
    public HttpClass HttpClass { get; public set; }
    public bool WithCredentials { get; public set; }
    public decimal RxJsVersion { get; public set; }
    public bool UseSingletonProvider { get; public set; }
    public InjectionTokenType InjectionTokenType { get; public set; }
    public bool IncludeHttpContext { get; public set; }
    [CompilerGeneratedAttribute]
public TypeScriptGeneratorSettings get_TypeScriptGeneratorSettings();
    public virtual CodeGeneratorSettingsBase get_CodeGeneratorSettings();
    [CompilerGeneratedAttribute]
public TypeScriptTemplate get_Template();
    [CompilerGeneratedAttribute]
public void set_Template(TypeScriptTemplate value);
    [CompilerGeneratedAttribute]
public PromiseType get_PromiseType();
    [CompilerGeneratedAttribute]
public void set_PromiseType(PromiseType value);
    [CompilerGeneratedAttribute]
public bool get_WrapDtoExceptions();
    [CompilerGeneratedAttribute]
public void set_WrapDtoExceptions(bool value);
    [CompilerGeneratedAttribute]
public string get_ClientBaseClass();
    [CompilerGeneratedAttribute]
public void set_ClientBaseClass(string value);
    [CompilerGeneratedAttribute]
public string get_ConfigurationClass();
    [CompilerGeneratedAttribute]
public void set_ConfigurationClass(string value);
    [CompilerGeneratedAttribute]
public bool get_UseTransformOptionsMethod();
    [CompilerGeneratedAttribute]
public void set_UseTransformOptionsMethod(bool value);
    [CompilerGeneratedAttribute]
public bool get_UseTransformResultMethod();
    [CompilerGeneratedAttribute]
public void set_UseTransformResultMethod(bool value);
    [CompilerGeneratedAttribute]
public string get_BaseUrlTokenName();
    [CompilerGeneratedAttribute]
public void set_BaseUrlTokenName(string value);
    [CompilerGeneratedAttribute]
public String[] get_ProtectedMethods();
    [CompilerGeneratedAttribute]
public void set_ProtectedMethods(String[] value);
    [CompilerGeneratedAttribute]
public bool get_ImportRequiredTypes();
    [CompilerGeneratedAttribute]
public void set_ImportRequiredTypes(bool value);
    [CompilerGeneratedAttribute]
public bool get_UseGetBaseUrlMethod();
    [CompilerGeneratedAttribute]
public void set_UseGetBaseUrlMethod(bool value);
    [CompilerGeneratedAttribute]
public string get_QueryNullValue();
    [CompilerGeneratedAttribute]
public void set_QueryNullValue(string value);
    [CompilerGeneratedAttribute]
public string get_ExceptionClass();
    [CompilerGeneratedAttribute]
public void set_ExceptionClass(string value);
    [CompilerGeneratedAttribute]
public bool get_UseAbortSignal();
    [CompilerGeneratedAttribute]
public void set_UseAbortSignal(bool value);
    [CompilerGeneratedAttribute]
public HttpClass get_HttpClass();
    [CompilerGeneratedAttribute]
public void set_HttpClass(HttpClass value);
    [CompilerGeneratedAttribute]
public bool get_WithCredentials();
    [CompilerGeneratedAttribute]
public void set_WithCredentials(bool value);
    [CompilerGeneratedAttribute]
public decimal get_RxJsVersion();
    [CompilerGeneratedAttribute]
public void set_RxJsVersion(decimal value);
    [CompilerGeneratedAttribute]
public bool get_UseSingletonProvider();
    [CompilerGeneratedAttribute]
public void set_UseSingletonProvider(bool value);
    [CompilerGeneratedAttribute]
public InjectionTokenType get_InjectionTokenType();
    [CompilerGeneratedAttribute]
public void set_InjectionTokenType(InjectionTokenType value);
    [CompilerGeneratedAttribute]
public bool get_IncludeHttpContext();
    [CompilerGeneratedAttribute]
public void set_IncludeHttpContext(bool value);
    internal ITemplate CreateTemplate(object model);
}
public enum NSwag.CodeGeneration.TypeScript.TypeScriptTemplate : Enum {
    public int value__;
    public static TypeScriptTemplate JQueryCallbacks;
    public static TypeScriptTemplate JQueryPromises;
    public static TypeScriptTemplate AngularJS;
    public static TypeScriptTemplate Angular;
    public static TypeScriptTemplate Fetch;
    public static TypeScriptTemplate Aurelia;
    public static TypeScriptTemplate Axios;
}
public class NSwag.CodeGeneration.TypeScript.TypeScriptTypeNameGenerator : DefaultTypeNameGenerator {
    protected virtual string Generate(JsonSchema schema, string typeNameHint);
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
[AttributeUsageAttribute("2")]
internal class System.Runtime.CompilerServices.RefSafetyRulesAttribute : Attribute {
    public int Version;
    public RefSafetyRulesAttribute(int );
}
