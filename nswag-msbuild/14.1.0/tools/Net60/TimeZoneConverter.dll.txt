[CompilerGeneratedAttribute]
[EmbeddedAttribute]
internal class Microsoft.CodeAnalysis.EmbeddedAttribute : Attribute {
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
[AttributeUsageAttribute("27524")]
internal class System.Runtime.CompilerServices.NullableAttribute : Attribute {
    public Byte[] NullableFlags;
    public NullableAttribute(byte );
    public NullableAttribute(Byte[] );
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
[AttributeUsageAttribute("5196")]
internal class System.Runtime.CompilerServices.NullableContextAttribute : Attribute {
    public byte Flag;
    public NullableContextAttribute(byte );
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal static class TimeZoneConverter.CustomTimeZoneFactory : object {
    private static string TrollTimeZoneId;
    private static Lazy`1<TimeZoneInfo> TrollTimeZone;
    private static CustomTimeZoneFactory();
    public static bool TryGetTimeZoneInfo(string timeZoneId, TimeZoneInfo& timeZoneInfo);
    private static TimeZoneInfo CreateTrollTimeZone();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal static class TimeZoneConverter.DataLoader : object {
    public static void Populate(IDictionary`2<string, string> ianaMap, IDictionary`2<string, string> windowsMap, IDictionary`2<string, string> railsMap, IDictionary`2<string, IList`1<string>> inverseRailsMap, IDictionary`2<string, string> links, IDictionary`2<string, IList`1<string>> ianaTerritoryZones);
    [IteratorStateMachineAttribute("TimeZoneConverter.DataLoader/<GetEmbeddedData>d__1")]
private static IEnumerable`1<string> GetEmbeddedData(string resourceName);
}
public enum TimeZoneConverter.LinkResolution : Enum {
    public int value__;
    public static LinkResolution Default;
    public static LinkResolution Canonical;
    public static LinkResolution Original;
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public static class TimeZoneConverter.TZConvert : object {
    private static bool IsWindows;
    private static Dictionary`2<string, string> IanaMap;
    private static Dictionary`2<string, string> WindowsMap;
    private static Dictionary`2<string, string> RailsMap;
    private static Dictionary`2<string, IList`1<string>> InverseRailsMap;
    private static Dictionary`2<string, string> Links;
    private static Dictionary`2<string, TimeZoneInfo> SystemTimeZones;
    private static IDictionary`2<string, IList`1<string>> IanaTerritoryZones;
    [CompilerGeneratedAttribute]
private static IReadOnlyCollection`1<string> <KnownIanaTimeZoneNames>k__BackingField;
    [CompilerGeneratedAttribute]
private static IReadOnlyCollection`1<string> <KnownWindowsTimeZoneIds>k__BackingField;
    [CompilerGeneratedAttribute]
private static IReadOnlyCollection`1<string> <KnownRailsTimeZoneNames>k__BackingField;
    public static IReadOnlyCollection`1<string> KnownIanaTimeZoneNames { get; }
    public static IReadOnlyCollection`1<string> KnownWindowsTimeZoneIds { get; }
    public static IReadOnlyCollection`1<string> KnownRailsTimeZoneNames { get; }
    private static TZConvert();
    [CompilerGeneratedAttribute]
public static IReadOnlyCollection`1<string> get_KnownIanaTimeZoneNames();
    [CompilerGeneratedAttribute]
public static IReadOnlyCollection`1<string> get_KnownWindowsTimeZoneIds();
    [CompilerGeneratedAttribute]
public static IReadOnlyCollection`1<string> get_KnownRailsTimeZoneNames();
    public static IReadOnlyDictionary`2<string, IReadOnlyCollection`1<string>> GetIanaTimeZoneNamesByTerritory(bool fullList);
    public static string IanaToWindows(string ianaTimeZoneName);
    public static bool TryIanaToWindows(string ianaTimeZoneName, String& windowsTimeZoneId);
    public static string WindowsToIana(string windowsTimeZoneId, string territoryCode);
    public static string WindowsToIana(string windowsTimeZoneId, LinkResolution linkResolutionMode);
    public static string WindowsToIana(string windowsTimeZoneId, string territoryCode, LinkResolution linkResolutionMode);
    public static bool TryWindowsToIana(string windowsTimeZoneId, String& ianaTimeZoneName);
    public static bool TryWindowsToIana(string windowsTimeZoneId, String& ianaTimeZoneName, LinkResolution linkResolutionMode);
    public static bool TryWindowsToIana(string windowsTimeZoneId, string territoryCode, String& ianaTimeZoneName);
    public static bool TryWindowsToIana(string windowsTimeZoneId, string territoryCode, String& ianaTimeZoneName, LinkResolution linkResolutionMode);
    private static string ResolveLink(string linkOrZone);
    public static TimeZoneInfo GetTimeZoneInfo(string windowsOrIanaTimeZoneId);
    public static bool TryGetTimeZoneInfo(string windowsOrIanaTimeZoneId, TimeZoneInfo& timeZoneInfo);
    public static IList`1<string> IanaToRails(string ianaTimeZoneName);
    public static bool TryIanaToRails(string ianaTimeZoneName, IList`1& railsTimeZoneNames);
    public static string RailsToIana(string railsTimeZoneName);
    public static bool TryRailsToIana(string railsTimeZoneName, String& ianaTimeZoneName);
    public static string RailsToWindows(string railsTimeZoneName);
    public static bool TryRailsToWindows(string railsTimeZoneName, String& windowsTimeZoneId);
    public static IList`1<string> WindowsToRails(string windowsTimeZoneId, string territoryCode);
    public static bool TryWindowsToRails(string windowsTimeZoneId, IList`1& railsTimeZoneNames);
    public static bool TryWindowsToRails(string windowsTimeZoneId, string territoryCode, IList`1& railsTimeZoneNames);
    private static Dictionary`2<string, TimeZoneInfo> GetSystemTimeZones();
}
