public class NConsole.ArgumentAttribute : ArgumentAttributeBase {
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Description>k__BackingField;
    [CompilerGeneratedAttribute]
private int <Position>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsRequired>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <AcceptsCommandInput>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <ShowPrompt>k__BackingField;
    public string Name { get; public set; }
    public string Description { get; public set; }
    public int Position { get; public set; }
    public bool IsRequired { get; public set; }
    public bool AcceptsCommandInput { get; public set; }
    public bool ShowPrompt { get; public set; }
    [CompilerGeneratedAttribute]
public string get_Name();
    [CompilerGeneratedAttribute]
public void set_Name(string value);
    [CompilerGeneratedAttribute]
public string get_Description();
    [CompilerGeneratedAttribute]
public void set_Description(string value);
    [CompilerGeneratedAttribute]
public int get_Position();
    [CompilerGeneratedAttribute]
public void set_Position(int value);
    [CompilerGeneratedAttribute]
public bool get_IsRequired();
    [CompilerGeneratedAttribute]
public void set_IsRequired(bool value);
    [CompilerGeneratedAttribute]
public bool get_AcceptsCommandInput();
    [CompilerGeneratedAttribute]
public void set_AcceptsCommandInput(bool value);
    [CompilerGeneratedAttribute]
public bool get_ShowPrompt();
    [CompilerGeneratedAttribute]
public void set_ShowPrompt(bool value);
    public virtual object GetValue(IConsoleHost consoleHost, String[] args, PropertyInfo property, IConsoleCommand command, object input, String& used);
    private bool IsInteractiveMode(String[] args);
    private bool TryGetPositionalArgumentValue(String[] args, String& used, String& value);
    private bool TryGetNamedArgumentValue(String[] args, String& used, String& value);
    private string GetFullParameterDescription(PropertyInfo property, IConsoleCommand command);
    [CompilerGeneratedAttribute]
private bool <TryGetNamedArgumentValue>b__27_0(string a);
}
public abstract class NConsole.ArgumentAttributeBase : Attribute {
    public abstract virtual object GetValue(IConsoleHost consoleHost, String[] args, PropertyInfo property, IConsoleCommand command, object input, String& used);
    protected object ConvertToType(string value, Type type);
}
public class NConsole.CommandAttribute : Attribute {
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Description>k__BackingField;
    public string Name { get; public set; }
    public string Description { get; public set; }
    [CompilerGeneratedAttribute]
public string get_Name();
    [CompilerGeneratedAttribute]
public void set_Name(string value);
    [CompilerGeneratedAttribute]
public string get_Description();
    [CompilerGeneratedAttribute]
public void set_Description(string value);
}
public class NConsole.CommandLineProcessor : object {
    private IConsoleHost _consoleHost;
    private Dictionary`2<string, Type> _commands;
    private IDependencyResolver _dependencyResolver;
    public IReadOnlyDictionary`2<string, Type> Commands { get; }
    public CommandLineProcessor(IConsoleHost consoleHost, IDependencyResolver dependencyResolver);
    public IReadOnlyDictionary`2<string, Type> get_Commands();
    public void RegisterCommand(string name);
    public void RegisterCommand();
    public void RegisterCommandsFromAssembly(Assembly assembly);
    public void RegisterCommand(Type commandType);
    public void RegisterCommand(string name, Type commandType);
    [AsyncStateMachineAttribute("NConsole.CommandLineProcessor/<ProcessAsync>d__11")]
public Task`1<IList`1<CommandResult>> ProcessAsync(String[] args, object input);
    [AsyncStateMachineAttribute("NConsole.CommandLineProcessor/<ProcessSingleAsync>d__12")]
public Task`1<CommandResult> ProcessSingleAsync(String[] args, object input);
    public IList`1<CommandResult> Process(String[] args, object input);
    public IList`1<CommandResult> ProcessWithExceptionHandling(String[] args, object input);
    protected string GetCommandName(String[] args);
    private IConsoleCommand CreateCommand(Type commandType);
    [CompilerGeneratedAttribute]
private object <CreateCommand>b__16_1(ParameterInfo param);
}
public class NConsole.CommandResult : object {
    [CompilerGeneratedAttribute]
private IConsoleCommand <Command>k__BackingField;
    [CompilerGeneratedAttribute]
private object <Output>k__BackingField;
    public IConsoleCommand Command { get; public set; }
    public object Output { get; public set; }
    [CompilerGeneratedAttribute]
public IConsoleCommand get_Command();
    [CompilerGeneratedAttribute]
public void set_Command(IConsoleCommand value);
    [CompilerGeneratedAttribute]
public object get_Output();
    [CompilerGeneratedAttribute]
public void set_Output(object value);
}
public class NConsole.ConsoleHost : object {
    private Type _consoleType;
    private MethodInfo _consoleWriteMethod;
    private MethodInfo _consoleReadLineMethod;
    private PropertyInfo _consoleForegroundColorProperty;
    [CompilerGeneratedAttribute]
private bool <InteractiveMode>k__BackingField;
    public bool InteractiveMode { get; public set; }
    public ConsoleHost(bool interactiveMode);
    [CompilerGeneratedAttribute]
public bool get_InteractiveMode();
    [CompilerGeneratedAttribute]
public void set_InteractiveMode(bool value);
    public sealed virtual void WriteMessage(string message);
    public sealed virtual void WriteError(string message);
    public sealed virtual string ReadValue(string message);
}
public class NConsole.HelpCommand : object {
    [CompilerGeneratedAttribute]
private string <Command>k__BackingField;
    [ArgumentAttribute]
public string Command { get; public set; }
    [CompilerGeneratedAttribute]
public string get_Command();
    [CompilerGeneratedAttribute]
public void set_Command(string value);
    public sealed virtual Task`1<object> RunAsync(CommandLineProcessor processor, IConsoleHost host);
    private void PrintCommand(IConsoleHost host, KeyValuePair`2<string, Type> pair);
    [CompilerGeneratedAttribute]
private bool <RunAsync>b__4_0(KeyValuePair`2<string, Type> c);
}
public interface NConsole.IConsoleCommand {
    public abstract virtual Task`1<object> RunAsync(CommandLineProcessor processor, IConsoleHost host);
}
public interface NConsole.IConsoleHost {
    public abstract virtual void WriteMessage(string message);
    public abstract virtual void WriteError(string message);
    public abstract virtual string ReadValue(string message);
}
public interface NConsole.IDependencyResolver {
    public abstract virtual object GetService(Type serviceType);
}
public class NConsole.SwitchAttribute : ArgumentAttributeBase {
    [CompilerGeneratedAttribute]
private string <ShortName>k__BackingField;
    [CompilerGeneratedAttribute]
private string <LongName>k__BackingField;
    public string ShortName { get; public set; }
    public string LongName { get; public set; }
    [CompilerGeneratedAttribute]
public string get_ShortName();
    [CompilerGeneratedAttribute]
public void set_ShortName(string value);
    [CompilerGeneratedAttribute]
public string get_LongName();
    [CompilerGeneratedAttribute]
public void set_LongName(string value);
    public virtual object GetValue(IConsoleHost consoleHost, String[] args, PropertyInfo property, IConsoleCommand command, object input, String& used);
}
public class NConsole.UnusedArgumentException : Exception {
    internal UnusedArgumentException(string arg);
}
