internal class Newtonsoft.Json.Bson.AsyncBinaryReader : BinaryReader {
    private Byte[] _buffer;
    private Byte[] Buffer { get; }
    public AsyncBinaryReader(Stream input);
    private Byte[] get_Buffer();
    private void EndOfStream();
    private void FileNotOpen();
    [AsyncStateMachineAttribute("Newtonsoft.Json.Bson.AsyncBinaryReader/<ReadBufferAsync>d__6")]
private Task`1<Byte[]> ReadBufferAsync(int size, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Newtonsoft.Json.Bson.AsyncBinaryReader/<ReadByteAsync>d__7")]
public Task`1<byte> ReadByteAsync(CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Newtonsoft.Json.Bson.AsyncBinaryReader/<ReadBsonTypeAsync>d__8")]
public Task`1<BsonType> ReadBsonTypeAsync(CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Newtonsoft.Json.Bson.AsyncBinaryReader/<ReadInt64Async>d__9")]
public Task`1<long> ReadInt64Async(CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Newtonsoft.Json.Bson.AsyncBinaryReader/<ReadInt32Async>d__10")]
public Task`1<int> ReadInt32Async(CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Newtonsoft.Json.Bson.AsyncBinaryReader/<ReadDoubleAsync>d__11")]
public Task`1<double> ReadDoubleAsync(CancellationToken cancellationToken);
    public Task`1<int> ReadAsync(Byte[] buffer, int index, int count, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Newtonsoft.Json.Bson.AsyncBinaryReader/<ReadBytesAsync>d__13")]
public Task`1<Byte[]> ReadBytesAsync(int count, CancellationToken cancellationToken);
}
internal class Newtonsoft.Json.Bson.AsyncBinaryReaderOwningReader : AsyncBinaryReader {
    private BinaryReader _reader;
    public AsyncBinaryReaderOwningReader(BinaryReader reader);
    public virtual void Close();
    protected virtual void Dispose(bool disposing);
}
internal class Newtonsoft.Json.Bson.AsyncBinaryWriter : BinaryWriter {
    private static Byte[] ByteValueBuffer;
    private Byte[] _buffer;
    private Byte[] Buffer { get; }
    public AsyncBinaryWriter(Stream stream);
    private static AsyncBinaryWriter();
    private Byte[] get_Buffer();
    public Task FlushAsync(CancellationToken cancellationToken);
    public Task WriteAsync(bool value, CancellationToken cancellationToken);
    public Task WriteAsync(int value, CancellationToken cancellationToken);
    public Task WriteAsync(long value, CancellationToken cancellationToken);
    public Task WriteAsync(byte value, CancellationToken cancellationToken);
    public Task WriteAsync(double value, CancellationToken cancellationToken);
    public Task WriteAsync(Byte[] buffer, CancellationToken cancellationToken);
    public Task WriteAsync(Byte[] buffer, int index, int count, CancellationToken cancellationToken);
}
internal class Newtonsoft.Json.Bson.AsyncBinaryWriterOwningWriter : AsyncBinaryWriter {
    private BinaryWriter _writer;
    public AsyncBinaryWriterOwningWriter(BinaryWriter writer);
    public virtual void Close();
    protected virtual void Dispose(bool disposing);
}
internal class Newtonsoft.Json.Bson.BsonArray : BsonToken {
    private List`1<BsonToken> _children;
    public BsonType Type { get; }
    public void Add(BsonToken token);
    public virtual BsonType get_Type();
    public sealed virtual IEnumerator`1<BsonToken> GetEnumerator();
    private sealed virtual override IEnumerator System.Collections.IEnumerable.GetEnumerator();
}
internal class Newtonsoft.Json.Bson.BsonBinary : BsonValue {
    [CompilerGeneratedAttribute]
private BsonBinaryType <BinaryType>k__BackingField;
    public BsonBinaryType BinaryType { get; public set; }
    public BsonBinary(Byte[] value, BsonBinaryType binaryType);
    [CompilerGeneratedAttribute]
public BsonBinaryType get_BinaryType();
    [CompilerGeneratedAttribute]
public void set_BinaryType(BsonBinaryType value);
}
internal enum Newtonsoft.Json.Bson.BsonBinaryType : Enum {
    public byte value__;
    public static BsonBinaryType Binary;
    public static BsonBinaryType Function;
    [ObsoleteAttribute("This type has been deprecated in the BSON specification. Use Binary instead.")]
public static BsonBinaryType BinaryOld;
    [ObsoleteAttribute("This type has been deprecated in the BSON specification. Use Uuid instead.")]
public static BsonBinaryType UuidOld;
    public static BsonBinaryType Uuid;
    public static BsonBinaryType Md5;
    public static BsonBinaryType UserDefined;
}
internal class Newtonsoft.Json.Bson.BsonBinaryWriter : object {
    private AsyncBinaryWriter _asyncWriter;
    private static Encoding Encoding;
    private BinaryWriter _writer;
    private Byte[] _largeByteBuffer;
    [CompilerGeneratedAttribute]
private DateTimeKind <DateTimeKindHandling>k__BackingField;
    public DateTimeKind DateTimeKindHandling { get; public set; }
    public BsonBinaryWriter(BinaryWriter writer);
    private static BsonBinaryWriter();
    public Task FlushAsync(CancellationToken cancellationToken);
    public Task WriteTokenAsync(BsonToken t, CancellationToken cancellationToken);
    private Task WriteTokenInternalAsync(BsonToken t, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Newtonsoft.Json.Bson.BsonBinaryWriter/<WriteObjectAsync>d__4")]
private Task WriteObjectAsync(BsonObject value, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Newtonsoft.Json.Bson.BsonBinaryWriter/<WriteArrayAsync>d__5")]
private Task WriteArrayAsync(BsonArray value, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Newtonsoft.Json.Bson.BsonBinaryWriter/<WriteBinaryAsync>d__6")]
private Task WriteBinaryAsync(BsonBinary value, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Newtonsoft.Json.Bson.BsonBinaryWriter/<WriteRegexAsync>d__7")]
private Task WriteRegexAsync(BsonRegex value, CancellationToken cancellationToken);
    private Task WriteStringAsync(string s, int byteCount, Nullable`1<int> calculatedlengthPrefix, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Newtonsoft.Json.Bson.BsonBinaryWriter/<WritePrefixedStringAsync>d__9")]
private Task WritePrefixedStringAsync(string s, int byteCount, int calculatedlengthPrefix, CancellationToken cancellationToken);
    private Task WriteUtf8BytesAsync(string s, int byteCount, CancellationToken cancellationToken);
    [CompilerGeneratedAttribute]
public DateTimeKind get_DateTimeKindHandling();
    [CompilerGeneratedAttribute]
public void set_DateTimeKindHandling(DateTimeKind value);
    public void Flush();
    public void Close();
    public void WriteToken(BsonToken t);
    private void WriteTokenInternal(BsonToken t);
    private long TicksFromDateObject(object value);
    private void WriteString(string s, int byteCount, Nullable`1<int> calculatedlengthPrefix);
    public void WriteUtf8Bytes(string s, int byteCount);
    private int CalculateSize(int stringByteCount);
    private int CalculateSizeWithLength(int stringByteCount, bool includeSize);
    private int CalculateSize(BsonToken t);
}
internal class Newtonsoft.Json.Bson.BsonBoolean : BsonValue {
    public static BsonBoolean False;
    public static BsonBoolean True;
    private BsonBoolean(bool value);
    private static BsonBoolean();
}
public class Newtonsoft.Json.Bson.BsonDataObjectId : object {
    [CompilerGeneratedAttribute]
private Byte[] <Value>k__BackingField;
    public Byte[] Value { get; private set; }
    public BsonDataObjectId(Byte[] value);
    [CompilerGeneratedAttribute]
public Byte[] get_Value();
    [CompilerGeneratedAttribute]
private void set_Value(Byte[] value);
}
public class Newtonsoft.Json.Bson.BsonDataReader : JsonReader {
    private AsyncBinaryReader _asyncReader;
    private static int MaxCharBytesSize;
    private static Byte[] SeqRange1;
    private static Byte[] SeqRange2;
    private static Byte[] SeqRange3;
    private static Byte[] SeqRange4;
    private BinaryReader _reader;
    private List`1<ContainerContext> _stack;
    private Byte[] _byteBuffer;
    private Char[] _charBuffer;
    private BsonType _currentElementType;
    private BsonReaderState _bsonReaderState;
    private ContainerContext _currentContext;
    private bool _readRootValueAsArray;
    private bool _jsonNet35BinaryCompatibility;
    private DateTimeKind _dateTimeKindHandling;
    [ObsoleteAttribute("JsonNet35BinaryCompatibility will be removed in a future version of Json.NET.")]
public bool JsonNet35BinaryCompatibility { get; public set; }
    public bool ReadRootValueAsArray { get; public set; }
    public DateTimeKind DateTimeKindHandling { get; public set; }
    public BsonDataReader(Stream stream);
    public BsonDataReader(BinaryReader reader);
    public BsonDataReader(Stream stream, bool readRootValueAsArray, DateTimeKind dateTimeKindHandling);
    public BsonDataReader(BinaryReader reader, bool readRootValueAsArray, DateTimeKind dateTimeKindHandling);
    private static BsonDataReader();
    private Task`1<string> ReadElementAsync(CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Newtonsoft.Json.Bson.BsonDataReader/<ReadElementAsync>d__2")]
private Task`1<string> ReadElementAsync(Task`1<BsonType> typeReadTask, CancellationToken cancellationToken);
    public virtual Task`1<bool> ReadAsync(CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Newtonsoft.Json.Bson.BsonDataReader/<ReadCatchingEndOfStreamAsync>d__4")]
private Task`1<bool> ReadCatchingEndOfStreamAsync(Task`1<bool> task);
    [AsyncStateMachineAttribute("Newtonsoft.Json.Bson.BsonDataReader/<ReadCodeWScopeCodeAsync>d__5")]
private Task`1<bool> ReadCodeWScopeCodeAsync(CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Newtonsoft.Json.Bson.BsonDataReader/<ReadCodeWScopeScopeAsync>d__6")]
private Task`1<bool> ReadCodeWScopeScopeAsync(CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Newtonsoft.Json.Bson.BsonDataReader/<ReadCodeWScopeScopeObjectAsync>d__7")]
private Task`1<bool> ReadCodeWScopeScopeObjectAsync(CancellationToken cancellationToken);
    private Task`1<bool> ReadCodeWScopeAsync(CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Newtonsoft.Json.Bson.BsonDataReader/<ReadPropertyReferenceAsync>d__9")]
private Task`1<bool> ReadPropertyReferenceAsync(CancellationToken cancellationToken);
    private Task`1<bool> ReadReferenceAsync(CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Newtonsoft.Json.Bson.BsonDataReader/<ReadNormalStartAsync>d__11")]
private Task`1<bool> ReadNormalStartAsync(CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Newtonsoft.Json.Bson.BsonDataReader/<ReadNormalPropertyAsync>d__12")]
private Task`1<bool> ReadNormalPropertyAsync(CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Newtonsoft.Json.Bson.BsonDataReader/<ReadNormalPostValueAsync>d__13")]
private Task`1<bool> ReadNormalPostValueAsync(ContainerContext context, CancellationToken cancellationToken);
    private Task`1<bool> ReadNormalAsync(CancellationToken cancellationToken);
    private Task`1<byte> ReadByteAsync(CancellationToken cancellationToken);
    private Task ReadTypeAsync(BsonType type, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Newtonsoft.Json.Bson.BsonDataReader/<ReadTypeTrulyAsync>d__17")]
private Task ReadTypeTrulyAsync(BsonType type, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Newtonsoft.Json.Bson.BsonDataReader/<ReadBinaryAsync>d__18")]
private Task`1<Tuple`2<Byte[], BsonBinaryType>> ReadBinaryAsync(CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Newtonsoft.Json.Bson.BsonDataReader/<ReadStringAsync>d__19")]
private Task`1<string> ReadStringAsync(CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Newtonsoft.Json.Bson.BsonDataReader/<ReadLengthStringAsync>d__20")]
private Task`1<string> ReadLengthStringAsync(CancellationToken cancellationToken);
    private Task`1<string> GetStringAsync(int length, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Newtonsoft.Json.Bson.BsonDataReader/<GetNonEmptyStringAsync>d__22")]
private Task`1<string> GetNonEmptyStringAsync(int length, CancellationToken cancellationToken);
    private Task`1<double> ReadDoubleAsync(CancellationToken cancellationToken);
    private Task`1<int> ReadInt32Async(CancellationToken cancellationToken);
    private Task`1<long> ReadInt64Async(CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Newtonsoft.Json.Bson.BsonDataReader/<ReadTypeAsync>d__26")]
private Task`1<BsonType> ReadTypeAsync(CancellationToken cancellationToken);
    private Task`1<Byte[]> ReadBytesAsync(int count, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Newtonsoft.Json.Bson.BsonDataReader/<GetContentTokenAsync>d__28")]
private Task`1<JsonToken> GetContentTokenAsync(CancellationToken cancellationToken);
    public virtual Task`1<Nullable`1<bool>> ReadAsBooleanAsync(CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Newtonsoft.Json.Bson.BsonDataReader/<DoReadAsBooleanAsync>d__30")]
private Task`1<Nullable`1<bool>> DoReadAsBooleanAsync(CancellationToken cancellationToken);
    public virtual Task`1<Byte[]> ReadAsBytesAsync(CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Newtonsoft.Json.Bson.BsonDataReader/<DoReadAsBytesAsync>d__32")]
private Task`1<Byte[]> DoReadAsBytesAsync(CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Newtonsoft.Json.Bson.BsonDataReader/<ReadIntoWrappedTypeObjectAsync>d__33")]
private Task ReadIntoWrappedTypeObjectAsync(CancellationToken cancellationToken);
    public virtual Task`1<Nullable`1<DateTime>> ReadAsDateTimeAsync(CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Newtonsoft.Json.Bson.BsonDataReader/<DoReadAsDateTimeAsync>d__35")]
private Task`1<Nullable`1<DateTime>> DoReadAsDateTimeAsync(CancellationToken cancellationToken);
    public virtual Task`1<Nullable`1<DateTimeOffset>> ReadAsDateTimeOffsetAsync(CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Newtonsoft.Json.Bson.BsonDataReader/<DoReadAsDateTimeOffsetAsync>d__37")]
private Task`1<Nullable`1<DateTimeOffset>> DoReadAsDateTimeOffsetAsync(CancellationToken cancellationToken);
    internal Nullable`1<DateTimeOffset> ReadDateTimeOffsetString(string s);
    public virtual Task`1<Nullable`1<decimal>> ReadAsDecimalAsync(CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Newtonsoft.Json.Bson.BsonDataReader/<DoReadAsDecimalAsync>d__40")]
private Task`1<Nullable`1<decimal>> DoReadAsDecimalAsync(CancellationToken cancellationToken);
    public virtual Task`1<Nullable`1<double>> ReadAsDoubleAsync(CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Newtonsoft.Json.Bson.BsonDataReader/<DoReadAsDoubleAsync>d__42")]
private Task`1<Nullable`1<double>> DoReadAsDoubleAsync(CancellationToken cancellationToken);
    public virtual Task`1<Nullable`1<int>> ReadAsInt32Async(CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Newtonsoft.Json.Bson.BsonDataReader/<DoReadAsInt32Async>d__44")]
private Task`1<Nullable`1<int>> DoReadAsInt32Async(CancellationToken cancellationToken);
    public virtual Task`1<string> ReadAsStringAsync(CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Newtonsoft.Json.Bson.BsonDataReader/<DoReadAsStringAsync>d__46")]
private Task`1<string> DoReadAsStringAsync(CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Newtonsoft.Json.Bson.BsonDataReader/<ReaderReadAndAssertAsync>d__47")]
internal Task ReaderReadAndAssertAsync(CancellationToken cancellationToken);
    internal JsonReaderException CreateUnexpectedEndException();
    [AsyncStateMachineAttribute("Newtonsoft.Json.Bson.BsonDataReader/<ReadArrayIntoByteArrayAsync>d__49")]
internal Task`1<Byte[]> ReadArrayIntoByteArrayAsync(CancellationToken cancellationToken);
    private bool ReadArrayElementIntoByteArrayReportDone(List`1<byte> buffer);
    internal Nullable`1<int> ReadInt32String(string s);
    internal Nullable`1<double> ReadDoubleString(string s);
    internal Nullable`1<decimal> ReadDecimalString(string s);
    internal Nullable`1<DateTime> ReadDateTimeString(string s);
    internal Nullable`1<bool> ReadBooleanString(string s);
    public bool get_JsonNet35BinaryCompatibility();
    public void set_JsonNet35BinaryCompatibility(bool value);
    public bool get_ReadRootValueAsArray();
    public void set_ReadRootValueAsArray(bool value);
    public DateTimeKind get_DateTimeKindHandling();
    public void set_DateTimeKindHandling(DateTimeKind value);
    private string ReadElement();
    public virtual bool Read();
    public virtual void Close();
    private bool ReadCodeWScope();
    private bool ReadReference();
    private bool ReadNormal();
    private void PopContext();
    private void PushContext(ContainerContext newContext);
    private byte ReadByte();
    private void ReadType(BsonType type);
    private Byte[] ReadBinary(BsonBinaryType& binaryType);
    private string ReadString();
    private string ReadLengthString();
    private string GetString(int length);
    private int GetLastFullCharStop(int start);
    private int BytesInSequence(byte b);
    private void EnsureBuffers();
    private double ReadDouble();
    private int ReadInt32();
    private long ReadInt64();
    private BsonType ReadType();
    private void MovePosition(int count);
    private Byte[] ReadBytes(int count);
}
public class Newtonsoft.Json.Bson.BsonDataWriter : JsonWriter {
    private bool _safeAsync;
    private bool _finishingAsync;
    private BsonBinaryWriter _writer;
    private BsonToken _root;
    private BsonToken _parent;
    private string _propertyName;
    public DateTimeKind DateTimeKindHandling { get; public set; }
    public BsonDataWriter(Stream stream);
    public BsonDataWriter(BinaryWriter writer);
    public virtual Task FlushAsync(CancellationToken cancellationToken);
    public virtual Task WriteEndAsync(CancellationToken cancellationToken);
    private bool WillCloseAll(BsonType type);
    public virtual Task WriteEndArrayAsync(CancellationToken cancellationToken);
    public virtual Task WriteEndObjectAsync(CancellationToken cancellationToken);
    public virtual Task CloseAsync(CancellationToken cancellationToken);
    private Task CompleteAsync(CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Newtonsoft.Json.Bson.BsonDataWriter/<CompleteAndCloseOutputAsync>d__9")]
private Task CompleteAndCloseOutputAsync(CancellationToken cancellationToken);
    public DateTimeKind get_DateTimeKindHandling();
    public void set_DateTimeKindHandling(DateTimeKind value);
    public virtual void Flush();
    protected virtual void WriteEnd(JsonToken token);
    public virtual void WriteComment(string text);
    public virtual void WriteStartConstructor(string name);
    public virtual void WriteRaw(string json);
    public virtual void WriteRawValue(string json);
    public virtual void WriteStartArray();
    public virtual void WriteStartObject();
    public virtual void WritePropertyName(string name);
    public virtual void Close();
    private void AddParent(BsonToken container);
    private void RemoveParent();
    private void AddValue(object value, BsonType type);
    internal void AddToken(BsonToken token);
    public virtual void WriteValue(object value);
    public virtual void WriteNull();
    public virtual void WriteUndefined();
    public virtual void WriteValue(string value);
    public virtual void WriteValue(int value);
    [CLSCompliantAttribute("False")]
public virtual void WriteValue(UInt32 value);
    public virtual void WriteValue(long value);
    [CLSCompliantAttribute("False")]
public virtual void WriteValue(ulong value);
    public virtual void WriteValue(float value);
    public virtual void WriteValue(double value);
    public virtual void WriteValue(bool value);
    public virtual void WriteValue(short value);
    [CLSCompliantAttribute("False")]
public virtual void WriteValue(ushort value);
    public virtual void WriteValue(char value);
    public virtual void WriteValue(byte value);
    [CLSCompliantAttribute("False")]
public virtual void WriteValue(sbyte value);
    public virtual void WriteValue(decimal value);
    public virtual void WriteValue(DateTime value);
    public virtual void WriteValue(DateTimeOffset value);
    public virtual void WriteValue(Byte[] value);
    public virtual void WriteValue(Guid value);
    public virtual void WriteValue(TimeSpan value);
    public virtual void WriteValue(Uri value);
    public void WriteObjectId(Byte[] value);
    public void WriteRegex(string pattern, string options);
}
internal class Newtonsoft.Json.Bson.BsonEmpty : BsonToken {
    public static BsonToken Null;
    public static BsonToken Undefined;
    [CompilerGeneratedAttribute]
private BsonType <Type>k__BackingField;
    public BsonType Type { get; }
    private BsonEmpty(BsonType type);
    private static BsonEmpty();
    [CompilerGeneratedAttribute]
public virtual BsonType get_Type();
}
internal class Newtonsoft.Json.Bson.BsonObject : BsonToken {
    private List`1<BsonProperty> _children;
    public BsonType Type { get; }
    public void Add(string name, BsonToken token);
    public virtual BsonType get_Type();
    public sealed virtual IEnumerator`1<BsonProperty> GetEnumerator();
    private sealed virtual override IEnumerator System.Collections.IEnumerable.GetEnumerator();
}
internal class Newtonsoft.Json.Bson.BsonProperty : object {
    [CompilerGeneratedAttribute]
private BsonString <Name>k__BackingField;
    [CompilerGeneratedAttribute]
private BsonToken <Value>k__BackingField;
    public BsonString Name { get; public set; }
    public BsonToken Value { get; public set; }
    [CompilerGeneratedAttribute]
public BsonString get_Name();
    [CompilerGeneratedAttribute]
public void set_Name(BsonString value);
    [CompilerGeneratedAttribute]
public BsonToken get_Value();
    [CompilerGeneratedAttribute]
public void set_Value(BsonToken value);
}
internal class Newtonsoft.Json.Bson.BsonRegex : BsonToken {
    [CompilerGeneratedAttribute]
private BsonString <Pattern>k__BackingField;
    [CompilerGeneratedAttribute]
private BsonString <Options>k__BackingField;
    public BsonString Pattern { get; public set; }
    public BsonString Options { get; public set; }
    public BsonType Type { get; }
    public BsonRegex(string pattern, string options);
    [CompilerGeneratedAttribute]
public BsonString get_Pattern();
    [CompilerGeneratedAttribute]
public void set_Pattern(BsonString value);
    [CompilerGeneratedAttribute]
public BsonString get_Options();
    [CompilerGeneratedAttribute]
public void set_Options(BsonString value);
    public virtual BsonType get_Type();
}
internal class Newtonsoft.Json.Bson.BsonString : BsonValue {
    [CompilerGeneratedAttribute]
private int <ByteCount>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IncludeLength>k__BackingField;
    public int ByteCount { get; public set; }
    public bool IncludeLength { get; }
    public BsonString(object value, bool includeLength);
    [CompilerGeneratedAttribute]
public int get_ByteCount();
    [CompilerGeneratedAttribute]
public void set_ByteCount(int value);
    [CompilerGeneratedAttribute]
public bool get_IncludeLength();
}
internal abstract class Newtonsoft.Json.Bson.BsonToken : object {
    [CompilerGeneratedAttribute]
private BsonToken <Parent>k__BackingField;
    [CompilerGeneratedAttribute]
private int <CalculatedSize>k__BackingField;
    public BsonType Type { get; }
    public BsonToken Parent { get; public set; }
    public int CalculatedSize { get; public set; }
    public abstract virtual BsonType get_Type();
    [CompilerGeneratedAttribute]
public BsonToken get_Parent();
    [CompilerGeneratedAttribute]
public void set_Parent(BsonToken value);
    [CompilerGeneratedAttribute]
public int get_CalculatedSize();
    [CompilerGeneratedAttribute]
public void set_CalculatedSize(int value);
}
internal enum Newtonsoft.Json.Bson.BsonType : Enum {
    public sbyte value__;
    public static BsonType Number;
    public static BsonType String;
    public static BsonType Object;
    public static BsonType Array;
    public static BsonType Binary;
    public static BsonType Undefined;
    public static BsonType Oid;
    public static BsonType Boolean;
    public static BsonType Date;
    public static BsonType Null;
    public static BsonType Regex;
    public static BsonType Reference;
    public static BsonType Code;
    public static BsonType Symbol;
    public static BsonType CodeWScope;
    public static BsonType Integer;
    public static BsonType TimeStamp;
    public static BsonType Long;
    public static BsonType MinKey;
    public static BsonType MaxKey;
}
internal class Newtonsoft.Json.Bson.BsonValue : BsonToken {
    private object _value;
    private BsonType _type;
    public object Value { get; }
    public BsonType Type { get; }
    public BsonValue(object value, BsonType type);
    public object get_Value();
    public virtual BsonType get_Type();
}
public class Newtonsoft.Json.Bson.Converters.BsonDataObjectIdConverter : JsonConverter {
    public virtual void WriteJson(JsonWriter writer, object value, JsonSerializer serializer);
    public virtual object ReadJson(JsonReader reader, Type objectType, object existingValue, JsonSerializer serializer);
    public virtual bool CanConvert(Type objectType);
}
public class Newtonsoft.Json.Bson.Converters.BsonDataRegexConverter : JsonConverter {
    private static string PatternName;
    private static string OptionsName;
    public virtual void WriteJson(JsonWriter writer, object value, JsonSerializer serializer);
    private bool HasFlag(RegexOptions options, RegexOptions flag);
    private void WriteBson(BsonDataWriter writer, Regex regex);
    public virtual object ReadJson(JsonReader reader, Type objectType, object existingValue, JsonSerializer serializer);
    private object ReadRegexString(JsonReader reader);
    private Regex ReadRegexObject(JsonReader reader, JsonSerializer serializer);
    public virtual bool CanConvert(Type objectType);
}
[ExtensionAttribute]
internal static class Newtonsoft.Json.Bson.Utilities.AsyncUtils : object {
    public static Task`1<bool> False;
    public static Task`1<bool> True;
    private static Task`1<string> s_EmptyString;
    internal static Task CompletedTask;
    public static Task`1<string> EmptyString { get; }
    private static AsyncUtils();
    [ExtensionAttribute]
internal static Task`1<bool> ToAsync(bool value);
    [ExtensionAttribute]
public static Task CancelIfRequestedAsync(CancellationToken cancellationToken);
    [ExtensionAttribute]
public static Task`1<T> CancelIfRequestedAsync(CancellationToken cancellationToken);
    [ExtensionAttribute]
public static Task FromCanceled(CancellationToken cancellationToken);
    [ExtensionAttribute]
public static Task`1<T> FromCanceled(CancellationToken cancellationToken);
    public static Task`1<string> get_EmptyString();
    [ExtensionAttribute]
public static Task WriteAsync(TextWriter writer, char value, CancellationToken cancellationToken);
    [ExtensionAttribute]
public static Task WriteAsync(TextWriter writer, string value, CancellationToken cancellationToken);
    [ExtensionAttribute]
public static Task WriteAsync(TextWriter writer, Char[] value, CancellationToken cancellationToken);
    [ExtensionAttribute]
public static Task WriteAsync(TextWriter writer, Char[] value, int start, int count, CancellationToken cancellationToken);
    [ExtensionAttribute]
public static Task`1<int> ReadAsync(TextReader reader, Char[] buffer, int index, int count, CancellationToken cancellationToken);
}
internal class Newtonsoft.Json.Bson.Utilities.Base64Encoder : object {
    private static int Base64LineSize;
    private static int LineSizeInBytes;
    private Char[] _charsLine;
    private TextWriter _writer;
    private Byte[] _leftOverBytes;
    private int _leftOverBytesCount;
    public Base64Encoder(TextWriter writer);
    private void ValidateEncode(Byte[] buffer, int index, int count);
    public void Encode(Byte[] buffer, int index, int count);
    private void StoreLeftOverBytes(Byte[] buffer, int index, Int32& count);
    private bool FulfillFromLeftover(Byte[] buffer, int index, Int32& count);
    public void Flush();
    private void WriteChars(Char[] chars, int index, int count);
    [AsyncStateMachineAttribute("Newtonsoft.Json.Bson.Utilities.Base64Encoder/<EncodeAsync>d__13")]
public Task EncodeAsync(Byte[] buffer, int index, int count, CancellationToken cancellationToken);
    private Task WriteCharsAsync(Char[] chars, int index, int count, CancellationToken cancellationToken);
    public Task FlushAsync(CancellationToken cancellationToken);
}
internal static class Newtonsoft.Json.Bson.Utilities.CollectionUtils : object {
    public static T[] ArrayEmpty();
}
internal static class Newtonsoft.Json.Bson.Utilities.ConvertUtils : object {
    public static bool TryConvertGuid(string s, Guid& g);
}
internal class Newtonsoft.Json.Bson.Utilities.DateTimeParser : ValueType {
    public int Year;
    public int Month;
    public int Day;
    public int Hour;
    public int Minute;
    public int Second;
    public int Fraction;
    public int ZoneHour;
    public int ZoneMinute;
    public ParserTimeZone Zone;
    private string _text;
    private int _end;
    private static Int32[] Power10;
    private static int Lzyyyy;
    private static int Lzyyyy_;
    private static int Lzyyyy_MM;
    private static int Lzyyyy_MM_;
    private static int Lzyyyy_MM_dd;
    private static int Lzyyyy_MM_ddT;
    private static int LzHH;
    private static int LzHH_;
    private static int LzHH_mm;
    private static int LzHH_mm_;
    private static int LzHH_mm_ss;
    private static int Lz_;
    private static int Lz_zz;
    private static short MaxFractionDigits;
    private static DateTimeParser();
    public bool Parse(string text, int startIndex, int length);
    private bool ParseDate(int start);
    private bool ParseTimeAndZoneAndWhitespace(int start);
    private bool ParseTime(Int32& start);
    private bool ParseZone(int start);
    private bool Parse4Digit(int start, Int32& num);
    private bool Parse2Digit(int start, Int32& num);
    private bool ParseChar(int start, char ch);
}
[ExtensionAttribute]
internal static class Newtonsoft.Json.Bson.Utilities.DateTimeUtils : object {
    internal static long InitialJavaScriptDateTicks;
    private static string IsoDateFormat;
    private static int DaysPer100Years;
    private static int DaysPer400Years;
    private static int DaysPer4Years;
    private static int DaysPerYear;
    private static long TicksPerDay;
    private static Int32[] DaysToMonth365;
    private static Int32[] DaysToMonth366;
    private static DateTimeUtils();
    [ExtensionAttribute]
public static TimeSpan GetUtcOffset(DateTime d);
    public static string ToDateTimeFormat(DateTimeKind kind);
    internal static DateTime EnsureDateTime(DateTime value, DateTimeZoneHandling timeZone);
    private static DateTime SwitchToLocalTime(DateTime value);
    private static DateTime SwitchToUtcTime(DateTime value);
    private static long ToUniversalTicks(DateTime dateTime);
    private static long ToUniversalTicks(DateTime dateTime, TimeSpan offset);
    internal static long ConvertDateTimeToJavaScriptTicks(DateTime dateTime, TimeSpan offset);
    internal static long ConvertDateTimeToJavaScriptTicks(DateTime dateTime);
    internal static long ConvertDateTimeToJavaScriptTicks(DateTime dateTime, bool convertToUtc);
    private static long UniversialTicksToJavaScriptTicks(long universialTicks);
    internal static DateTime ConvertJavaScriptTicksToDateTime(long javaScriptTicks);
    internal static bool TryParseDateTimeIso(string text, DateTimeZoneHandling dateTimeZoneHandling, DateTime& dt);
    internal static bool TryParseDateTimeOffsetIso(string text, DateTimeOffset& dt);
    private static DateTime CreateDateTime(DateTimeParser dateTimeParser);
    internal static bool TryParseDateTime(string s, DateTimeZoneHandling dateTimeZoneHandling, string dateFormatString, CultureInfo culture, DateTime& dt);
    internal static bool TryParseDateTimeOffset(string s, string dateFormatString, CultureInfo culture, DateTimeOffset& dt);
    private static bool TryParseMicrosoftDate(string text, Int64& ticks, TimeSpan& offset, DateTimeKind& kind);
    private static bool TryParseDateTimeMicrosoft(string text, DateTimeZoneHandling dateTimeZoneHandling, DateTime& dt);
    private static bool TryParseDateTimeExact(string text, DateTimeZoneHandling dateTimeZoneHandling, string dateFormatString, CultureInfo culture, DateTime& dt);
    private static bool TryParseDateTimeOffsetMicrosoft(string text, DateTimeOffset& dt);
    private static bool TryParseDateTimeOffsetExact(string text, string dateFormatString, CultureInfo culture, DateTimeOffset& dt);
    private static bool TryReadOffset(string offsetText, int startIndex, TimeSpan& offset);
}
internal static class Newtonsoft.Json.Bson.Utilities.ExceptionUtils : object {
    internal static JsonReaderException CreateJsonReaderException(JsonReader reader, string message);
    internal static JsonReaderException CreateJsonReaderException(JsonReader reader, string message, Exception ex);
    internal static JsonReaderException CreateJsonReaderException(IJsonLineInfo lineInfo, string path, string message, Exception ex);
    internal static JsonWriterException CreateJsonWriterException(JsonWriter writer, string message, Exception ex);
    internal static JsonWriterException CreateJsonWriterException(string path, string message, Exception ex);
    internal static JsonSerializationException CreateJsonSerializationException(IJsonLineInfo lineInfo, string path, string message, Exception ex);
    private static string FormatMessage(IJsonLineInfo lineInfo, string path, string message);
}
internal static class Newtonsoft.Json.Bson.Utilities.JsonTokenUtils : object {
    internal static bool IsPrimitiveToken(JsonToken token);
}
internal static class Newtonsoft.Json.Bson.Utilities.MathUtils : object {
    public static int IntLength(ulong i);
    public static char IntToHex(int n);
}
internal static class Newtonsoft.Json.Bson.Utilities.MiscellaneousUtils : object {
    public static ArgumentOutOfRangeException CreateArgumentOutOfRangeException(string paramName, object actualValue, string message);
}
internal enum Newtonsoft.Json.Bson.Utilities.ParserTimeZone : Enum {
    public int value__;
    public static ParserTimeZone Unspecified;
    public static ParserTimeZone Utc;
    public static ParserTimeZone LocalWestOfUtc;
    public static ParserTimeZone LocalEastOfUtc;
}
[ExtensionAttribute]
internal static class Newtonsoft.Json.Bson.Utilities.StringUtils : object {
    public static string CarriageReturnLineFeed;
    public static string Empty;
    public static char CarriageReturn;
    public static char LineFeed;
    public static char Tab;
    [ExtensionAttribute]
public static string FormatWith(string format, IFormatProvider provider, object arg0);
    [ExtensionAttribute]
public static string FormatWith(string format, IFormatProvider provider, object arg0, object arg1);
    [ExtensionAttribute]
public static string FormatWith(string format, IFormatProvider provider, object arg0, object arg1, object arg2);
    [ExtensionAttribute]
public static string FormatWith(string format, IFormatProvider provider, object arg0, object arg1, object arg2, object arg3);
    [ExtensionAttribute]
private static string FormatWith(string format, IFormatProvider provider, Object[] args);
    [ExtensionAttribute]
public static bool StartsWith(string source, char value);
    [ExtensionAttribute]
public static bool EndsWith(string source, char value);
}
internal static class Newtonsoft.Json.Bson.Utilities.ValidationUtils : object {
    public static void ArgumentNotNull(object value, string parameterName);
}
