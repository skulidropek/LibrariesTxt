public interface Microsoft.AspNetCore.Authorization.Policy.IPolicyEvaluator {
    public abstract virtual Task`1<AuthenticateResult> AuthenticateAsync(AuthorizationPolicy policy, HttpContext context);
    public abstract virtual Task`1<PolicyAuthorizationResult> AuthorizeAsync(AuthorizationPolicy policy, AuthenticateResult authenticationResult, HttpContext context, object resource);
}
public class Microsoft.AspNetCore.Authorization.Policy.PolicyAuthorizationResult : object {
    [CompilerGeneratedAttribute]
private bool <Challenged>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <Forbidden>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <Succeeded>k__BackingField;
    public bool Challenged { get; private set; }
    public bool Forbidden { get; private set; }
    public bool Succeeded { get; private set; }
    [CompilerGeneratedAttribute]
public bool get_Challenged();
    [CompilerGeneratedAttribute]
private void set_Challenged(bool value);
    [CompilerGeneratedAttribute]
public bool get_Forbidden();
    [CompilerGeneratedAttribute]
private void set_Forbidden(bool value);
    [CompilerGeneratedAttribute]
public bool get_Succeeded();
    [CompilerGeneratedAttribute]
private void set_Succeeded(bool value);
    public static PolicyAuthorizationResult Challenge();
    public static PolicyAuthorizationResult Forbid();
    public static PolicyAuthorizationResult Success();
}
public class Microsoft.AspNetCore.Authorization.Policy.PolicyEvaluator : object {
    private IAuthorizationService _authorization;
    public PolicyEvaluator(IAuthorizationService authorization);
    [AsyncStateMachineAttribute("Microsoft.AspNetCore.Authorization.Policy.PolicyEvaluator/<AuthenticateAsync>d__2")]
public virtual Task`1<AuthenticateResult> AuthenticateAsync(AuthorizationPolicy policy, HttpContext context);
    [AsyncStateMachineAttribute("Microsoft.AspNetCore.Authorization.Policy.PolicyEvaluator/<AuthorizeAsync>d__3")]
public virtual Task`1<PolicyAuthorizationResult> AuthorizeAsync(AuthorizationPolicy policy, AuthenticateResult authenticationResult, HttpContext context, object resource);
}
[ExtensionAttribute]
public static class Microsoft.Extensions.DependencyInjection.PolicyServiceCollectionExtensions : object {
    [ExtensionAttribute]
public static IServiceCollection AddAuthorizationPolicyEvaluator(IServiceCollection services);
}
internal static class Microsoft.Extensions.Internal.SecurityHelper : object {
    public static ClaimsPrincipal MergeUserPrincipal(ClaimsPrincipal existingPrincipal, ClaimsPrincipal additionalPrincipal);
}
