[AttributeUsageAttribute("68")]
public class Microsoft.AspNetCore.Authorization.AllowAnonymousAttribute : Attribute {
}
public class Microsoft.AspNetCore.Authorization.AuthorizationFailure : object {
    [CompilerGeneratedAttribute]
private bool <FailCalled>k__BackingField;
    [CompilerGeneratedAttribute]
private IEnumerable`1<IAuthorizationRequirement> <FailedRequirements>k__BackingField;
    public bool FailCalled { get; private set; }
    public IEnumerable`1<IAuthorizationRequirement> FailedRequirements { get; private set; }
    [CompilerGeneratedAttribute]
public bool get_FailCalled();
    [CompilerGeneratedAttribute]
private void set_FailCalled(bool value);
    [CompilerGeneratedAttribute]
public IEnumerable`1<IAuthorizationRequirement> get_FailedRequirements();
    [CompilerGeneratedAttribute]
private void set_FailedRequirements(IEnumerable`1<IAuthorizationRequirement> value);
    public static AuthorizationFailure ExplicitFail();
    public static AuthorizationFailure Failed(IEnumerable`1<IAuthorizationRequirement> failed);
}
public abstract class Microsoft.AspNetCore.Authorization.AuthorizationHandler`1 : object {
    [AsyncStateMachineAttribute("Microsoft.AspNetCore.Authorization.AuthorizationHandler`1/<HandleAsync>d__0")]
public virtual Task HandleAsync(AuthorizationHandlerContext context);
    protected abstract virtual Task HandleRequirementAsync(AuthorizationHandlerContext context, TRequirement requirement);
}
public abstract class Microsoft.AspNetCore.Authorization.AuthorizationHandler`2 : object {
    [AsyncStateMachineAttribute("Microsoft.AspNetCore.Authorization.AuthorizationHandler`2/<HandleAsync>d__0")]
public virtual Task HandleAsync(AuthorizationHandlerContext context);
    protected abstract virtual Task HandleRequirementAsync(AuthorizationHandlerContext context, TRequirement requirement, TResource resource);
}
public class Microsoft.AspNetCore.Authorization.AuthorizationHandlerContext : object {
    private HashSet`1<IAuthorizationRequirement> _pendingRequirements;
    private bool _failCalled;
    private bool _succeedCalled;
    [CompilerGeneratedAttribute]
private IEnumerable`1<IAuthorizationRequirement> <Requirements>k__BackingField;
    [CompilerGeneratedAttribute]
private ClaimsPrincipal <User>k__BackingField;
    [CompilerGeneratedAttribute]
private object <Resource>k__BackingField;
    public IEnumerable`1<IAuthorizationRequirement> Requirements { get; }
    public ClaimsPrincipal User { get; }
    public object Resource { get; }
    public IEnumerable`1<IAuthorizationRequirement> PendingRequirements { get; }
    public bool HasFailed { get; }
    public bool HasSucceeded { get; }
    public AuthorizationHandlerContext(IEnumerable`1<IAuthorizationRequirement> requirements, ClaimsPrincipal user, object resource);
    [CompilerGeneratedAttribute]
public virtual IEnumerable`1<IAuthorizationRequirement> get_Requirements();
    [CompilerGeneratedAttribute]
public virtual ClaimsPrincipal get_User();
    [CompilerGeneratedAttribute]
public virtual object get_Resource();
    public virtual IEnumerable`1<IAuthorizationRequirement> get_PendingRequirements();
    public virtual bool get_HasFailed();
    public virtual bool get_HasSucceeded();
    public virtual void Fail();
    public virtual void Succeed(IAuthorizationRequirement requirement);
}
public class Microsoft.AspNetCore.Authorization.AuthorizationOptions : object {
    [CompilerGeneratedAttribute]
private IDictionary`2<string, AuthorizationPolicy> <PolicyMap>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <InvokeHandlersAfterFailure>k__BackingField;
    [CompilerGeneratedAttribute]
private AuthorizationPolicy <DefaultPolicy>k__BackingField;
    private IDictionary`2<string, AuthorizationPolicy> PolicyMap { get; }
    public bool InvokeHandlersAfterFailure { get; public set; }
    public AuthorizationPolicy DefaultPolicy { get; public set; }
    [CompilerGeneratedAttribute]
private IDictionary`2<string, AuthorizationPolicy> get_PolicyMap();
    [CompilerGeneratedAttribute]
public bool get_InvokeHandlersAfterFailure();
    [CompilerGeneratedAttribute]
public void set_InvokeHandlersAfterFailure(bool value);
    [CompilerGeneratedAttribute]
public AuthorizationPolicy get_DefaultPolicy();
    [CompilerGeneratedAttribute]
public void set_DefaultPolicy(AuthorizationPolicy value);
    public void AddPolicy(string name, AuthorizationPolicy policy);
    public void AddPolicy(string name, Action`1<AuthorizationPolicyBuilder> configurePolicy);
    public AuthorizationPolicy GetPolicy(string name);
}
public class Microsoft.AspNetCore.Authorization.AuthorizationPolicy : object {
    [CompilerGeneratedAttribute]
private IReadOnlyList`1<IAuthorizationRequirement> <Requirements>k__BackingField;
    [CompilerGeneratedAttribute]
private IReadOnlyList`1<string> <AuthenticationSchemes>k__BackingField;
    public IReadOnlyList`1<IAuthorizationRequirement> Requirements { get; }
    public IReadOnlyList`1<string> AuthenticationSchemes { get; }
    public AuthorizationPolicy(IEnumerable`1<IAuthorizationRequirement> requirements, IEnumerable`1<string> authenticationSchemes);
    [CompilerGeneratedAttribute]
public IReadOnlyList`1<IAuthorizationRequirement> get_Requirements();
    [CompilerGeneratedAttribute]
public IReadOnlyList`1<string> get_AuthenticationSchemes();
    public static AuthorizationPolicy Combine(AuthorizationPolicy[] policies);
    public static AuthorizationPolicy Combine(IEnumerable`1<AuthorizationPolicy> policies);
    [AsyncStateMachineAttribute("Microsoft.AspNetCore.Authorization.AuthorizationPolicy/<CombineAsync>d__9")]
public static Task`1<AuthorizationPolicy> CombineAsync(IAuthorizationPolicyProvider policyProvider, IEnumerable`1<IAuthorizeData> authorizeData);
}
public class Microsoft.AspNetCore.Authorization.AuthorizationPolicyBuilder : object {
    [CompilerGeneratedAttribute]
private IList`1<IAuthorizationRequirement> <Requirements>k__BackingField;
    [CompilerGeneratedAttribute]
private IList`1<string> <AuthenticationSchemes>k__BackingField;
    public IList`1<IAuthorizationRequirement> Requirements { get; public set; }
    public IList`1<string> AuthenticationSchemes { get; public set; }
    public AuthorizationPolicyBuilder(String[] authenticationSchemes);
    public AuthorizationPolicyBuilder(AuthorizationPolicy policy);
    [CompilerGeneratedAttribute]
public IList`1<IAuthorizationRequirement> get_Requirements();
    [CompilerGeneratedAttribute]
public void set_Requirements(IList`1<IAuthorizationRequirement> value);
    [CompilerGeneratedAttribute]
public IList`1<string> get_AuthenticationSchemes();
    [CompilerGeneratedAttribute]
public void set_AuthenticationSchemes(IList`1<string> value);
    public AuthorizationPolicyBuilder AddAuthenticationSchemes(String[] schemes);
    public AuthorizationPolicyBuilder AddRequirements(IAuthorizationRequirement[] requirements);
    public AuthorizationPolicyBuilder Combine(AuthorizationPolicy policy);
    public AuthorizationPolicyBuilder RequireClaim(string claimType, String[] requiredValues);
    public AuthorizationPolicyBuilder RequireClaim(string claimType, IEnumerable`1<string> requiredValues);
    public AuthorizationPolicyBuilder RequireClaim(string claimType);
    public AuthorizationPolicyBuilder RequireRole(String[] roles);
    public AuthorizationPolicyBuilder RequireRole(IEnumerable`1<string> roles);
    public AuthorizationPolicyBuilder RequireUserName(string userName);
    public AuthorizationPolicyBuilder RequireAuthenticatedUser();
    public AuthorizationPolicyBuilder RequireAssertion(Func`2<AuthorizationHandlerContext, bool> handler);
    public AuthorizationPolicyBuilder RequireAssertion(Func`2<AuthorizationHandlerContext, Task`1<bool>> handler);
    public AuthorizationPolicy Build();
}
public class Microsoft.AspNetCore.Authorization.AuthorizationResult : object {
    [CompilerGeneratedAttribute]
private bool <Succeeded>k__BackingField;
    [CompilerGeneratedAttribute]
private AuthorizationFailure <Failure>k__BackingField;
    public bool Succeeded { get; private set; }
    public AuthorizationFailure Failure { get; private set; }
    [CompilerGeneratedAttribute]
public bool get_Succeeded();
    [CompilerGeneratedAttribute]
private void set_Succeeded(bool value);
    [CompilerGeneratedAttribute]
public AuthorizationFailure get_Failure();
    [CompilerGeneratedAttribute]
private void set_Failure(AuthorizationFailure value);
    public static AuthorizationResult Success();
    public static AuthorizationResult Failed(AuthorizationFailure failure);
    public static AuthorizationResult Failed();
}
[ExtensionAttribute]
public static class Microsoft.AspNetCore.Authorization.AuthorizationServiceExtensions : object {
    [ExtensionAttribute]
public static Task`1<AuthorizationResult> AuthorizeAsync(IAuthorizationService service, ClaimsPrincipal user, object resource, IAuthorizationRequirement requirement);
    [ExtensionAttribute]
public static Task`1<AuthorizationResult> AuthorizeAsync(IAuthorizationService service, ClaimsPrincipal user, object resource, AuthorizationPolicy policy);
    [ExtensionAttribute]
public static Task`1<AuthorizationResult> AuthorizeAsync(IAuthorizationService service, ClaimsPrincipal user, AuthorizationPolicy policy);
    [ExtensionAttribute]
public static Task`1<AuthorizationResult> AuthorizeAsync(IAuthorizationService service, ClaimsPrincipal user, string policyName);
}
[AttributeUsageAttribute("68")]
public class Microsoft.AspNetCore.Authorization.AuthorizeAttribute : Attribute {
    [CompilerGeneratedAttribute]
private string <Policy>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Roles>k__BackingField;
    [CompilerGeneratedAttribute]
private string <AuthenticationSchemes>k__BackingField;
    public string Policy { get; public set; }
    public string Roles { get; public set; }
    public string AuthenticationSchemes { get; public set; }
    [ObsoleteAttribute("Use AuthenticationSchemes instead.", "False")]
public string ActiveAuthenticationSchemes { get; public set; }
    public AuthorizeAttribute(string policy);
    [CompilerGeneratedAttribute]
public sealed virtual string get_Policy();
    [CompilerGeneratedAttribute]
public sealed virtual void set_Policy(string value);
    [CompilerGeneratedAttribute]
public sealed virtual string get_Roles();
    [CompilerGeneratedAttribute]
public sealed virtual void set_Roles(string value);
    [CompilerGeneratedAttribute]
public sealed virtual string get_AuthenticationSchemes();
    [CompilerGeneratedAttribute]
public sealed virtual void set_AuthenticationSchemes(string value);
    public string get_ActiveAuthenticationSchemes();
    public void set_ActiveAuthenticationSchemes(string value);
}
public class Microsoft.AspNetCore.Authorization.DefaultAuthorizationEvaluator : object {
    public sealed virtual AuthorizationResult Evaluate(AuthorizationHandlerContext context);
}
public class Microsoft.AspNetCore.Authorization.DefaultAuthorizationHandlerContextFactory : object {
    public virtual AuthorizationHandlerContext CreateContext(IEnumerable`1<IAuthorizationRequirement> requirements, ClaimsPrincipal user, object resource);
}
public class Microsoft.AspNetCore.Authorization.DefaultAuthorizationHandlerProvider : object {
    private IEnumerable`1<IAuthorizationHandler> _handlers;
    public DefaultAuthorizationHandlerProvider(IEnumerable`1<IAuthorizationHandler> handlers);
    public sealed virtual Task`1<IEnumerable`1<IAuthorizationHandler>> GetHandlersAsync(AuthorizationHandlerContext context);
}
public class Microsoft.AspNetCore.Authorization.DefaultAuthorizationPolicyProvider : object {
    private AuthorizationOptions _options;
    public DefaultAuthorizationPolicyProvider(IOptions`1<AuthorizationOptions> options);
    public sealed virtual Task`1<AuthorizationPolicy> GetDefaultPolicyAsync();
    public virtual Task`1<AuthorizationPolicy> GetPolicyAsync(string policyName);
}
public class Microsoft.AspNetCore.Authorization.DefaultAuthorizationService : object {
    private AuthorizationOptions _options;
    private IAuthorizationHandlerContextFactory _contextFactory;
    private IAuthorizationHandlerProvider _handlers;
    private IAuthorizationEvaluator _evaluator;
    private IAuthorizationPolicyProvider _policyProvider;
    private ILogger _logger;
    public DefaultAuthorizationService(IAuthorizationPolicyProvider policyProvider, IAuthorizationHandlerProvider handlers, ILogger`1<DefaultAuthorizationService> logger, IAuthorizationHandlerContextFactory contextFactory, IAuthorizationEvaluator evaluator, IOptions`1<AuthorizationOptions> options);
    [AsyncStateMachineAttribute("Microsoft.AspNetCore.Authorization.DefaultAuthorizationService/<AuthorizeAsync>d__7")]
public sealed virtual Task`1<AuthorizationResult> AuthorizeAsync(ClaimsPrincipal user, object resource, IEnumerable`1<IAuthorizationRequirement> requirements);
    [AsyncStateMachineAttribute("Microsoft.AspNetCore.Authorization.DefaultAuthorizationService/<AuthorizeAsync>d__8")]
public sealed virtual Task`1<AuthorizationResult> AuthorizeAsync(ClaimsPrincipal user, object resource, string policyName);
}
public interface Microsoft.AspNetCore.Authorization.IAllowAnonymous {
}
public interface Microsoft.AspNetCore.Authorization.IAuthorizationEvaluator {
    public abstract virtual AuthorizationResult Evaluate(AuthorizationHandlerContext context);
}
public interface Microsoft.AspNetCore.Authorization.IAuthorizationHandler {
    public abstract virtual Task HandleAsync(AuthorizationHandlerContext context);
}
public interface Microsoft.AspNetCore.Authorization.IAuthorizationHandlerContextFactory {
    public abstract virtual AuthorizationHandlerContext CreateContext(IEnumerable`1<IAuthorizationRequirement> requirements, ClaimsPrincipal user, object resource);
}
public interface Microsoft.AspNetCore.Authorization.IAuthorizationHandlerProvider {
    public abstract virtual Task`1<IEnumerable`1<IAuthorizationHandler>> GetHandlersAsync(AuthorizationHandlerContext context);
}
public interface Microsoft.AspNetCore.Authorization.IAuthorizationPolicyProvider {
    public abstract virtual Task`1<AuthorizationPolicy> GetPolicyAsync(string policyName);
    public abstract virtual Task`1<AuthorizationPolicy> GetDefaultPolicyAsync();
}
public interface Microsoft.AspNetCore.Authorization.IAuthorizationRequirement {
}
public interface Microsoft.AspNetCore.Authorization.IAuthorizationService {
    public abstract virtual Task`1<AuthorizationResult> AuthorizeAsync(ClaimsPrincipal user, object resource, IEnumerable`1<IAuthorizationRequirement> requirements);
    public abstract virtual Task`1<AuthorizationResult> AuthorizeAsync(ClaimsPrincipal user, object resource, string policyName);
}
public interface Microsoft.AspNetCore.Authorization.IAuthorizeData {
    public string Policy { get; public set; }
    public string Roles { get; public set; }
    public string AuthenticationSchemes { get; public set; }
    public abstract virtual string get_Policy();
    public abstract virtual void set_Policy(string value);
    public abstract virtual string get_Roles();
    public abstract virtual void set_Roles(string value);
    public abstract virtual string get_AuthenticationSchemes();
    public abstract virtual void set_AuthenticationSchemes(string value);
}
public class Microsoft.AspNetCore.Authorization.Infrastructure.AssertionRequirement : object {
    [CompilerGeneratedAttribute]
private Func`2<AuthorizationHandlerContext, Task`1<bool>> <Handler>k__BackingField;
    public Func`2<AuthorizationHandlerContext, Task`1<bool>> Handler { get; }
    public AssertionRequirement(Func`2<AuthorizationHandlerContext, bool> handler);
    public AssertionRequirement(Func`2<AuthorizationHandlerContext, Task`1<bool>> handler);
    [CompilerGeneratedAttribute]
public Func`2<AuthorizationHandlerContext, Task`1<bool>> get_Handler();
    [AsyncStateMachineAttribute("Microsoft.AspNetCore.Authorization.Infrastructure.AssertionRequirement/<HandleAsync>d__5")]
public sealed virtual Task HandleAsync(AuthorizationHandlerContext context);
}
public class Microsoft.AspNetCore.Authorization.Infrastructure.ClaimsAuthorizationRequirement : AuthorizationHandler`1<ClaimsAuthorizationRequirement> {
    [CompilerGeneratedAttribute]
private string <ClaimType>k__BackingField;
    [CompilerGeneratedAttribute]
private IEnumerable`1<string> <AllowedValues>k__BackingField;
    public string ClaimType { get; }
    public IEnumerable`1<string> AllowedValues { get; }
    public ClaimsAuthorizationRequirement(string claimType, IEnumerable`1<string> allowedValues);
    [CompilerGeneratedAttribute]
public string get_ClaimType();
    [CompilerGeneratedAttribute]
public IEnumerable`1<string> get_AllowedValues();
    protected virtual Task HandleRequirementAsync(AuthorizationHandlerContext context, ClaimsAuthorizationRequirement requirement);
}
public class Microsoft.AspNetCore.Authorization.Infrastructure.DenyAnonymousAuthorizationRequirement : AuthorizationHandler`1<DenyAnonymousAuthorizationRequirement> {
    protected virtual Task HandleRequirementAsync(AuthorizationHandlerContext context, DenyAnonymousAuthorizationRequirement requirement);
}
public class Microsoft.AspNetCore.Authorization.Infrastructure.NameAuthorizationRequirement : AuthorizationHandler`1<NameAuthorizationRequirement> {
    [CompilerGeneratedAttribute]
private string <RequiredName>k__BackingField;
    public string RequiredName { get; }
    public NameAuthorizationRequirement(string requiredName);
    [CompilerGeneratedAttribute]
public string get_RequiredName();
    protected virtual Task HandleRequirementAsync(AuthorizationHandlerContext context, NameAuthorizationRequirement requirement);
}
public class Microsoft.AspNetCore.Authorization.Infrastructure.OperationAuthorizationRequirement : object {
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    public string Name { get; public set; }
    [CompilerGeneratedAttribute]
public string get_Name();
    [CompilerGeneratedAttribute]
public void set_Name(string value);
}
public class Microsoft.AspNetCore.Authorization.Infrastructure.PassThroughAuthorizationHandler : object {
    [AsyncStateMachineAttribute("Microsoft.AspNetCore.Authorization.Infrastructure.PassThroughAuthorizationHandler/<HandleAsync>d__0")]
public sealed virtual Task HandleAsync(AuthorizationHandlerContext context);
}
public class Microsoft.AspNetCore.Authorization.Infrastructure.RolesAuthorizationRequirement : AuthorizationHandler`1<RolesAuthorizationRequirement> {
    [CompilerGeneratedAttribute]
private IEnumerable`1<string> <AllowedRoles>k__BackingField;
    public IEnumerable`1<string> AllowedRoles { get; }
    public RolesAuthorizationRequirement(IEnumerable`1<string> allowedRoles);
    [CompilerGeneratedAttribute]
public IEnumerable`1<string> get_AllowedRoles();
    protected virtual Task HandleRequirementAsync(AuthorizationHandlerContext context, RolesAuthorizationRequirement requirement);
}
internal static class Microsoft.AspNetCore.Authorization.Resources : object {
    private static ResourceManager _resourceManager;
    internal static string Exception_AuthorizationPolicyEmpty { get; }
    internal static string Exception_AuthorizationPolicyNotFound { get; }
    internal static string Exception_RoleRequirementEmpty { get; }
    private static Resources();
    internal static string get_Exception_AuthorizationPolicyEmpty();
    internal static string FormatException_AuthorizationPolicyEmpty();
    internal static string get_Exception_AuthorizationPolicyNotFound();
    internal static string FormatException_AuthorizationPolicyNotFound(object p0);
    internal static string get_Exception_RoleRequirementEmpty();
    internal static string FormatException_RoleRequirementEmpty();
    private static string GetString(string name, String[] formatterNames);
}
[ExtensionAttribute]
public static class Microsoft.Extensions.DependencyInjection.AuthorizationServiceCollectionExtensions : object {
    [ExtensionAttribute]
public static IServiceCollection AddAuthorization(IServiceCollection services);
    [ExtensionAttribute]
public static IServiceCollection AddAuthorization(IServiceCollection services, Action`1<AuthorizationOptions> configure);
}
[ExtensionAttribute]
internal static class Microsoft.Extensions.Logging.LoggingExtensions : object {
    private static Action`2<ILogger, Exception> _userAuthorizationFailed;
    private static Action`2<ILogger, Exception> _userAuthorizationSucceeded;
    private static LoggingExtensions();
    [ExtensionAttribute]
public static void UserAuthorizationSucceeded(ILogger logger);
    [ExtensionAttribute]
public static void UserAuthorizationFailed(ILogger logger);
}
