public interface Microsoft.AspNetCore.JsonPatch.Adapters.IObjectAdapter {
    public abstract virtual void Add(Operation operation, object objectToApplyTo);
    public abstract virtual void Copy(Operation operation, object objectToApplyTo);
    public abstract virtual void Move(Operation operation, object objectToApplyTo);
    public abstract virtual void Remove(Operation operation, object objectToApplyTo);
    public abstract virtual void Replace(Operation operation, object objectToApplyTo);
}
public interface Microsoft.AspNetCore.JsonPatch.Adapters.IObjectAdapterWithTest {
    public abstract virtual void Test(Operation operation, object objectToApplyTo);
}
public class Microsoft.AspNetCore.JsonPatch.Adapters.ObjectAdapter : object {
    [CompilerGeneratedAttribute]
private IContractResolver <ContractResolver>k__BackingField;
    [CompilerGeneratedAttribute]
private Action`1<JsonPatchError> <LogErrorAction>k__BackingField;
    public IContractResolver ContractResolver { get; }
    public Action`1<JsonPatchError> LogErrorAction { get; }
    private Action`1<JsonPatchError> ErrorReporter { get; }
    public ObjectAdapter(IContractResolver contractResolver, Action`1<JsonPatchError> logErrorAction);
    [CompilerGeneratedAttribute]
public IContractResolver get_ContractResolver();
    [CompilerGeneratedAttribute]
public Action`1<JsonPatchError> get_LogErrorAction();
    public sealed virtual void Add(Operation operation, object objectToApplyTo);
    private void Add(string path, object value, object objectToApplyTo, Operation operation);
    public sealed virtual void Move(Operation operation, object objectToApplyTo);
    public sealed virtual void Remove(Operation operation, object objectToApplyTo);
    private void Remove(string path, object objectToApplyTo, Operation operationToReport);
    public sealed virtual void Replace(Operation operation, object objectToApplyTo);
    public sealed virtual void Copy(Operation operation, object objectToApplyTo);
    public sealed virtual void Test(Operation operation, object objectToApplyTo);
    private bool TryGetValue(string fromLocation, object objectToGetValueFrom, Operation operation, Object& propertyValue);
    private Action`1<JsonPatchError> get_ErrorReporter();
    private JsonPatchError CreateOperationFailedError(object target, string path, Operation operation, string errorMessage);
    private JsonPatchError CreatePathNotFoundError(object target, string path, Operation operation, string errorMessage);
}
public class Microsoft.AspNetCore.JsonPatch.Converters.JsonPatchDocumentConverter : JsonConverter {
    public virtual bool CanConvert(Type objectType);
    public virtual object ReadJson(JsonReader reader, Type objectType, object existingValue, JsonSerializer serializer);
    public virtual void WriteJson(JsonWriter writer, object value, JsonSerializer serializer);
}
public class Microsoft.AspNetCore.JsonPatch.Converters.TypedJsonPatchDocumentConverter : JsonPatchDocumentConverter {
    public virtual object ReadJson(JsonReader reader, Type objectType, object existingValue, JsonSerializer serializer);
}
public class Microsoft.AspNetCore.JsonPatch.Exceptions.JsonPatchException : Exception {
    [CompilerGeneratedAttribute]
private Operation <FailedOperation>k__BackingField;
    [CompilerGeneratedAttribute]
private object <AffectedObject>k__BackingField;
    public Operation FailedOperation { get; private set; }
    public object AffectedObject { get; private set; }
    public JsonPatchException(JsonPatchError jsonPatchError, Exception innerException);
    public JsonPatchException(JsonPatchError jsonPatchError);
    public JsonPatchException(string message, Exception innerException);
    [CompilerGeneratedAttribute]
public Operation get_FailedOperation();
    [CompilerGeneratedAttribute]
private void set_FailedOperation(Operation value);
    [CompilerGeneratedAttribute]
public object get_AffectedObject();
    [CompilerGeneratedAttribute]
private void set_AffectedObject(object value);
}
public class Microsoft.AspNetCore.JsonPatch.Helpers.GetValueResult : object {
    [CompilerGeneratedAttribute]
private object <PropertyValue>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <HasError>k__BackingField;
    public object PropertyValue { get; private set; }
    public bool HasError { get; private set; }
    public GetValueResult(object propertyValue, bool hasError);
    [CompilerGeneratedAttribute]
public object get_PropertyValue();
    [CompilerGeneratedAttribute]
private void set_PropertyValue(object value);
    [CompilerGeneratedAttribute]
public bool get_HasError();
    [CompilerGeneratedAttribute]
private void set_HasError(bool value);
}
public interface Microsoft.AspNetCore.JsonPatch.IJsonPatchDocument {
    public IContractResolver ContractResolver { get; public set; }
    public abstract virtual IContractResolver get_ContractResolver();
    public abstract virtual void set_ContractResolver(IContractResolver value);
    public abstract virtual IList`1<Operation> GetOperations();
}
public class Microsoft.AspNetCore.JsonPatch.Internal.ConversionResult : object {
    [CompilerGeneratedAttribute]
private bool <CanBeConverted>k__BackingField;
    [CompilerGeneratedAttribute]
private object <ConvertedInstance>k__BackingField;
    public bool CanBeConverted { get; }
    public object ConvertedInstance { get; }
    public ConversionResult(bool canBeConverted, object convertedInstance);
    [CompilerGeneratedAttribute]
public bool get_CanBeConverted();
    [CompilerGeneratedAttribute]
public object get_ConvertedInstance();
}
public static class Microsoft.AspNetCore.JsonPatch.Internal.ConversionResultProvider : object {
    public static ConversionResult ConvertTo(object value, Type typeToConvertTo);
    public static ConversionResult CopyTo(object value, Type typeToConvertTo);
    private static bool IsNullableType(Type type);
}
public class Microsoft.AspNetCore.JsonPatch.Internal.DictionaryAdapter`2 : object {
    public sealed virtual bool TryAdd(object target, string segment, IContractResolver contractResolver, object value, String& errorMessage);
    public sealed virtual bool TryGet(object target, string segment, IContractResolver contractResolver, Object& value, String& errorMessage);
    public sealed virtual bool TryRemove(object target, string segment, IContractResolver contractResolver, String& errorMessage);
    public sealed virtual bool TryReplace(object target, string segment, IContractResolver contractResolver, object value, String& errorMessage);
    public sealed virtual bool TryTest(object target, string segment, IContractResolver contractResolver, object value, String& errorMessage);
    public sealed virtual bool TryTraverse(object target, string segment, IContractResolver contractResolver, Object& nextTarget, String& errorMessage);
    private bool TryConvertKey(string key, TKey& convertedKey, String& errorMessage);
    private bool TryConvertValue(object value, TValue& convertedValue, String& errorMessage);
}
public class Microsoft.AspNetCore.JsonPatch.Internal.DynamicObjectAdapter : object {
    public sealed virtual bool TryAdd(object target, string segment, IContractResolver contractResolver, object value, String& errorMessage);
    public sealed virtual bool TryGet(object target, string segment, IContractResolver contractResolver, Object& value, String& errorMessage);
    public sealed virtual bool TryRemove(object target, string segment, IContractResolver contractResolver, String& errorMessage);
    public sealed virtual bool TryReplace(object target, string segment, IContractResolver contractResolver, object value, String& errorMessage);
    public sealed virtual bool TryTest(object target, string segment, IContractResolver contractResolver, object value, String& errorMessage);
    public sealed virtual bool TryTraverse(object target, string segment, IContractResolver contractResolver, Object& nextTarget, String& errorMessage);
    private bool TryGetDynamicObjectProperty(object target, IContractResolver contractResolver, string segment, Object& value, String& errorMessage);
    private bool TrySetDynamicObjectProperty(object target, IContractResolver contractResolver, string segment, object value, String& errorMessage);
    private bool TryConvertValue(object value, Type propertyType, Object& convertedValue);
}
internal static class Microsoft.AspNetCore.JsonPatch.Internal.ErrorReporter : object {
    public static Action`1<JsonPatchError> Default;
    private static ErrorReporter();
}
public interface Microsoft.AspNetCore.JsonPatch.Internal.IAdapter {
    public abstract virtual bool TryTraverse(object target, string segment, IContractResolver contractResolver, Object& nextTarget, String& errorMessage);
    public abstract virtual bool TryAdd(object target, string segment, IContractResolver contractResolver, object value, String& errorMessage);
    public abstract virtual bool TryRemove(object target, string segment, IContractResolver contractResolver, String& errorMessage);
    public abstract virtual bool TryGet(object target, string segment, IContractResolver contractResolver, Object& value, String& errorMessage);
    public abstract virtual bool TryReplace(object target, string segment, IContractResolver contractResolver, object value, String& errorMessage);
    public abstract virtual bool TryTest(object target, string segment, IContractResolver contractResolver, object value, String& errorMessage);
}
public class Microsoft.AspNetCore.JsonPatch.Internal.ListAdapter : object {
    public sealed virtual bool TryAdd(object target, string segment, IContractResolver contractResolver, object value, String& errorMessage);
    public sealed virtual bool TryGet(object target, string segment, IContractResolver contractResolver, Object& value, String& errorMessage);
    public sealed virtual bool TryRemove(object target, string segment, IContractResolver contractResolver, String& errorMessage);
    public sealed virtual bool TryReplace(object target, string segment, IContractResolver contractResolver, object value, String& errorMessage);
    public sealed virtual bool TryTest(object target, string segment, IContractResolver contractResolver, object value, String& errorMessage);
    public sealed virtual bool TryTraverse(object target, string segment, IContractResolver contractResolver, Object& value, String& errorMessage);
    private bool TryConvertValue(object originalValue, Type listTypeArgument, string segment, Object& convertedValue, String& errorMessage);
    private bool TryGetListTypeArgument(IList list, Type& listTypeArgument, String& errorMessage);
    private bool TryGetPositionInfo(IList list, string segment, OperationType operationType, PositionInfo& positionInfo, String& errorMessage);
}
public class Microsoft.AspNetCore.JsonPatch.Internal.ObjectVisitor : object {
    private IContractResolver _contractResolver;
    private ParsedPath _path;
    public ObjectVisitor(ParsedPath path, IContractResolver contractResolver);
    public bool TryVisit(Object& target, IAdapter& adapter, String& errorMessage);
    private IAdapter SelectAdapter(object targetObject);
}
public class Microsoft.AspNetCore.JsonPatch.Internal.ParsedPath : ValueType {
    private static String[] Empty;
    private String[] _segments;
    public string LastSegment { get; }
    public IReadOnlyList`1<string> Segments { get; }
    public ParsedPath(string path);
    private static ParsedPath();
    public string get_LastSegment();
    public IReadOnlyList`1<string> get_Segments();
    private static String[] ParsePath(string path);
}
internal static class Microsoft.AspNetCore.JsonPatch.Internal.PathHelpers : object {
    internal static string ValidateAndNormalizePath(string path);
}
public class Microsoft.AspNetCore.JsonPatch.Internal.PocoAdapter : object {
    public sealed virtual bool TryAdd(object target, string segment, IContractResolver contractResolver, object value, String& errorMessage);
    public sealed virtual bool TryGet(object target, string segment, IContractResolver contractResolver, Object& value, String& errorMessage);
    public sealed virtual bool TryRemove(object target, string segment, IContractResolver contractResolver, String& errorMessage);
    public sealed virtual bool TryReplace(object target, string segment, IContractResolver contractResolver, object value, String& errorMessage);
    public sealed virtual bool TryTest(object target, string segment, IContractResolver contractResolver, object value, String& errorMessage);
    public sealed virtual bool TryTraverse(object target, string segment, IContractResolver contractResolver, Object& value, String& errorMessage);
    private bool TryGetJsonProperty(object target, IContractResolver contractResolver, string segment, JsonProperty& jsonProperty);
    private bool TryConvertValue(object value, Type propertyType, Object& convertedValue);
}
[JsonConverterAttribute("Microsoft.AspNetCore.JsonPatch.Converters.JsonPatchDocumentConverter")]
public class Microsoft.AspNetCore.JsonPatch.JsonPatchDocument : object {
    [CompilerGeneratedAttribute]
private List`1<Operation> <Operations>k__BackingField;
    [CompilerGeneratedAttribute]
private IContractResolver <ContractResolver>k__BackingField;
    public List`1<Operation> Operations { get; private set; }
    [JsonIgnoreAttribute]
public IContractResolver ContractResolver { get; public set; }
    public JsonPatchDocument(List`1<Operation> operations, IContractResolver contractResolver);
    [CompilerGeneratedAttribute]
public List`1<Operation> get_Operations();
    [CompilerGeneratedAttribute]
private void set_Operations(List`1<Operation> value);
    [CompilerGeneratedAttribute]
public sealed virtual IContractResolver get_ContractResolver();
    [CompilerGeneratedAttribute]
public sealed virtual void set_ContractResolver(IContractResolver value);
    public JsonPatchDocument Add(string path, object value);
    public JsonPatchDocument Remove(string path);
    public JsonPatchDocument Replace(string path, object value);
    public JsonPatchDocument Test(string path, object value);
    public JsonPatchDocument Move(string from, string path);
    public JsonPatchDocument Copy(string from, string path);
    public void ApplyTo(object objectToApplyTo);
    public void ApplyTo(object objectToApplyTo, Action`1<JsonPatchError> logErrorAction);
    public void ApplyTo(object objectToApplyTo, IObjectAdapter adapter);
    private sealed virtual override IList`1<Operation> Microsoft.AspNetCore.JsonPatch.IJsonPatchDocument.GetOperations();
}
[JsonConverterAttribute("Microsoft.AspNetCore.JsonPatch.Converters.TypedJsonPatchDocumentConverter")]
public class Microsoft.AspNetCore.JsonPatch.JsonPatchDocument`1 : object {
    [CompilerGeneratedAttribute]
private List`1<Operation`1<TModel>> <Operations>k__BackingField;
    [CompilerGeneratedAttribute]
private IContractResolver <ContractResolver>k__BackingField;
    public List`1<Operation`1<TModel>> Operations { get; private set; }
    [JsonIgnoreAttribute]
public IContractResolver ContractResolver { get; public set; }
    public JsonPatchDocument`1(List`1<Operation`1<TModel>> operations, IContractResolver contractResolver);
    [CompilerGeneratedAttribute]
public List`1<Operation`1<TModel>> get_Operations();
    [CompilerGeneratedAttribute]
private void set_Operations(List`1<Operation`1<TModel>> value);
    [CompilerGeneratedAttribute]
public sealed virtual IContractResolver get_ContractResolver();
    [CompilerGeneratedAttribute]
public sealed virtual void set_ContractResolver(IContractResolver value);
    public JsonPatchDocument`1<TModel> Add(Expression`1<Func`2<TModel, TProp>> path, TProp value);
    public JsonPatchDocument`1<TModel> Add(Expression`1<Func`2<TModel, IList`1<TProp>>> path, TProp value, int position);
    public JsonPatchDocument`1<TModel> Add(Expression`1<Func`2<TModel, IList`1<TProp>>> path, TProp value);
    public JsonPatchDocument`1<TModel> Remove(Expression`1<Func`2<TModel, TProp>> path);
    public JsonPatchDocument`1<TModel> Remove(Expression`1<Func`2<TModel, IList`1<TProp>>> path, int position);
    public JsonPatchDocument`1<TModel> Remove(Expression`1<Func`2<TModel, IList`1<TProp>>> path);
    public JsonPatchDocument`1<TModel> Replace(Expression`1<Func`2<TModel, TProp>> path, TProp value);
    public JsonPatchDocument`1<TModel> Replace(Expression`1<Func`2<TModel, IList`1<TProp>>> path, TProp value, int position);
    public JsonPatchDocument`1<TModel> Replace(Expression`1<Func`2<TModel, IList`1<TProp>>> path, TProp value);
    public JsonPatchDocument`1<TModel> Test(Expression`1<Func`2<TModel, TProp>> path, TProp value);
    public JsonPatchDocument`1<TModel> Test(Expression`1<Func`2<TModel, IList`1<TProp>>> path, TProp value, int position);
    public JsonPatchDocument`1<TModel> Test(Expression`1<Func`2<TModel, IList`1<TProp>>> path, TProp value);
    public JsonPatchDocument`1<TModel> Move(Expression`1<Func`2<TModel, TProp>> from, Expression`1<Func`2<TModel, TProp>> path);
    public JsonPatchDocument`1<TModel> Move(Expression`1<Func`2<TModel, IList`1<TProp>>> from, int positionFrom, Expression`1<Func`2<TModel, TProp>> path);
    public JsonPatchDocument`1<TModel> Move(Expression`1<Func`2<TModel, TProp>> from, Expression`1<Func`2<TModel, IList`1<TProp>>> path, int positionTo);
    public JsonPatchDocument`1<TModel> Move(Expression`1<Func`2<TModel, IList`1<TProp>>> from, int positionFrom, Expression`1<Func`2<TModel, IList`1<TProp>>> path, int positionTo);
    public JsonPatchDocument`1<TModel> Move(Expression`1<Func`2<TModel, IList`1<TProp>>> from, int positionFrom, Expression`1<Func`2<TModel, IList`1<TProp>>> path);
    public JsonPatchDocument`1<TModel> Move(Expression`1<Func`2<TModel, TProp>> from, Expression`1<Func`2<TModel, IList`1<TProp>>> path);
    public JsonPatchDocument`1<TModel> Copy(Expression`1<Func`2<TModel, TProp>> from, Expression`1<Func`2<TModel, TProp>> path);
    public JsonPatchDocument`1<TModel> Copy(Expression`1<Func`2<TModel, IList`1<TProp>>> from, int positionFrom, Expression`1<Func`2<TModel, TProp>> path);
    public JsonPatchDocument`1<TModel> Copy(Expression`1<Func`2<TModel, TProp>> from, Expression`1<Func`2<TModel, IList`1<TProp>>> path, int positionTo);
    public JsonPatchDocument`1<TModel> Copy(Expression`1<Func`2<TModel, IList`1<TProp>>> from, int positionFrom, Expression`1<Func`2<TModel, IList`1<TProp>>> path, int positionTo);
    public JsonPatchDocument`1<TModel> Copy(Expression`1<Func`2<TModel, IList`1<TProp>>> from, int positionFrom, Expression`1<Func`2<TModel, IList`1<TProp>>> path);
    public JsonPatchDocument`1<TModel> Copy(Expression`1<Func`2<TModel, TProp>> from, Expression`1<Func`2<TModel, IList`1<TProp>>> path);
    public void ApplyTo(TModel objectToApplyTo);
    public void ApplyTo(TModel objectToApplyTo, Action`1<JsonPatchError> logErrorAction);
    public void ApplyTo(TModel objectToApplyTo, IObjectAdapter adapter);
    private sealed virtual override IList`1<Operation> Microsoft.AspNetCore.JsonPatch.IJsonPatchDocument.GetOperations();
    internal string GetPath(Expression`1<Func`2<TModel, TProp>> expr, string position);
    private List`1<string> GetPathSegments(Expression expr);
    private string GetPropertyNameFromMemberExpression(MemberExpression memberExpression);
    private static bool ContinueWithSubPath(ExpressionType expressionType);
    private static string EvaluateExpression(Expression expression);
}
public class Microsoft.AspNetCore.JsonPatch.JsonPatchError : object {
    [CompilerGeneratedAttribute]
private object <AffectedObject>k__BackingField;
    [CompilerGeneratedAttribute]
private Operation <Operation>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ErrorMessage>k__BackingField;
    public object AffectedObject { get; }
    public Operation Operation { get; }
    public string ErrorMessage { get; }
    public JsonPatchError(object affectedObject, Operation operation, string errorMessage);
    [CompilerGeneratedAttribute]
public object get_AffectedObject();
    [CompilerGeneratedAttribute]
public Operation get_Operation();
    [CompilerGeneratedAttribute]
public string get_ErrorMessage();
}
public class Microsoft.AspNetCore.JsonPatch.JsonPatchProperty : object {
    [CompilerGeneratedAttribute]
private JsonProperty <Property>k__BackingField;
    [CompilerGeneratedAttribute]
private object <Parent>k__BackingField;
    public JsonProperty Property { get; public set; }
    public object Parent { get; public set; }
    public JsonPatchProperty(JsonProperty property, object parent);
    [CompilerGeneratedAttribute]
public JsonProperty get_Property();
    [CompilerGeneratedAttribute]
public void set_Property(JsonProperty value);
    [CompilerGeneratedAttribute]
public object get_Parent();
    [CompilerGeneratedAttribute]
public void set_Parent(object value);
}
public class Microsoft.AspNetCore.JsonPatch.Operations.Operation : OperationBase {
    [CompilerGeneratedAttribute]
private object <value>k__BackingField;
    [JsonPropertyAttribute("value")]
public object value { get; public set; }
    public Operation(string op, string path, string from, object value);
    public Operation(string op, string path, string from);
    [CompilerGeneratedAttribute]
public object get_value();
    [CompilerGeneratedAttribute]
public void set_value(object value);
    public void Apply(object objectToApplyTo, IObjectAdapter adapter);
    public bool ShouldSerializevalue();
}
public class Microsoft.AspNetCore.JsonPatch.Operations.Operation`1 : Operation {
    public Operation`1(string op, string path, string from, object value);
    public Operation`1(string op, string path, string from);
    public void Apply(TModel objectToApplyTo, IObjectAdapter adapter);
}
public class Microsoft.AspNetCore.JsonPatch.Operations.OperationBase : object {
    private string _op;
    private OperationType _operationType;
    [CompilerGeneratedAttribute]
private string <path>k__BackingField;
    [CompilerGeneratedAttribute]
private string <from>k__BackingField;
    [JsonIgnoreAttribute]
public OperationType OperationType { get; }
    [JsonPropertyAttribute("path")]
public string path { get; public set; }
    [JsonPropertyAttribute("op")]
public string op { get; public set; }
    [JsonPropertyAttribute("from")]
public string from { get; public set; }
    public OperationBase(string op, string path, string from);
    public OperationType get_OperationType();
    [CompilerGeneratedAttribute]
public string get_path();
    [CompilerGeneratedAttribute]
public void set_path(string value);
    public string get_op();
    public void set_op(string value);
    [CompilerGeneratedAttribute]
public string get_from();
    [CompilerGeneratedAttribute]
public void set_from(string value);
    public bool ShouldSerializefrom();
}
public enum Microsoft.AspNetCore.JsonPatch.Operations.OperationType : Enum {
    public int value__;
    public static OperationType Add;
    public static OperationType Remove;
    public static OperationType Replace;
    public static OperationType Move;
    public static OperationType Copy;
    public static OperationType Test;
    public static OperationType Invalid;
}
internal static class Microsoft.AspNetCore.JsonPatch.Resources : object {
    private static ResourceManager _resourceManager;
    internal static string CannotCopyProperty { get; }
    internal static string CannotDeterminePropertyType { get; }
    internal static string CannotPerformOperation { get; }
    internal static string CannotReadProperty { get; }
    internal static string CannotUpdateProperty { get; }
    internal static string ExpressionTypeNotSupported { get; }
    internal static string IndexOutOfBounds { get; }
    internal static string InvalidIndexValue { get; }
    internal static string InvalidJsonPatchDocument { get; }
    internal static string InvalidJsonPatchOperation { get; }
    internal static string InvalidPathSegment { get; }
    internal static string InvalidValueForPath { get; }
    internal static string InvalidValueForProperty { get; }
    internal static string ParameterMustMatchType { get; }
    internal static string PatchNotSupportedForArrays { get; }
    internal static string PatchNotSupportedForNonGenericLists { get; }
    internal static string TargetLocationAtPathSegmentNotFound { get; }
    internal static string TargetLocationNotFound { get; }
    internal static string TestOperationNotSupported { get; }
    internal static string ValueAtListPositionNotEqualToTestValue { get; }
    internal static string ValueForTargetSegmentCannotBeNullOrEmpty { get; }
    internal static string ValueNotEqualToTestValue { get; }
    private static Resources();
    internal static string get_CannotCopyProperty();
    internal static string FormatCannotCopyProperty(object p0);
    internal static string get_CannotDeterminePropertyType();
    internal static string FormatCannotDeterminePropertyType(object p0);
    internal static string get_CannotPerformOperation();
    internal static string FormatCannotPerformOperation(object p0, object p1);
    internal static string get_CannotReadProperty();
    internal static string FormatCannotReadProperty(object p0);
    internal static string get_CannotUpdateProperty();
    internal static string FormatCannotUpdateProperty(object p0);
    internal static string get_ExpressionTypeNotSupported();
    internal static string FormatExpressionTypeNotSupported(object p0);
    internal static string get_IndexOutOfBounds();
    internal static string FormatIndexOutOfBounds(object p0);
    internal static string get_InvalidIndexValue();
    internal static string FormatInvalidIndexValue(object p0);
    internal static string get_InvalidJsonPatchDocument();
    internal static string FormatInvalidJsonPatchDocument();
    internal static string get_InvalidJsonPatchOperation();
    internal static string FormatInvalidJsonPatchOperation(object p0);
    internal static string get_InvalidPathSegment();
    internal static string FormatInvalidPathSegment(object p0);
    internal static string get_InvalidValueForPath();
    internal static string FormatInvalidValueForPath(object p0);
    internal static string get_InvalidValueForProperty();
    internal static string FormatInvalidValueForProperty(object p0);
    internal static string get_ParameterMustMatchType();
    internal static string FormatParameterMustMatchType(object p0, object p1);
    internal static string get_PatchNotSupportedForArrays();
    internal static string FormatPatchNotSupportedForArrays(object p0);
    internal static string get_PatchNotSupportedForNonGenericLists();
    internal static string FormatPatchNotSupportedForNonGenericLists(object p0);
    internal static string get_TargetLocationAtPathSegmentNotFound();
    internal static string FormatTargetLocationAtPathSegmentNotFound(object p0);
    internal static string get_TargetLocationNotFound();
    internal static string FormatTargetLocationNotFound(object p0, object p1);
    internal static string get_TestOperationNotSupported();
    internal static string FormatTestOperationNotSupported();
    internal static string get_ValueAtListPositionNotEqualToTestValue();
    internal static string FormatValueAtListPositionNotEqualToTestValue(object p0, object p1, object p2);
    internal static string get_ValueForTargetSegmentCannotBeNullOrEmpty();
    internal static string FormatValueForTargetSegmentCannotBeNullOrEmpty(object p0);
    internal static string get_ValueNotEqualToTestValue();
    internal static string FormatValueNotEqualToTestValue(object p0, object p1, object p2);
    private static string GetString(string name, String[] formatterNames);
}
internal static class Microsoft.Extensions.Internal.ClosedGenericMatcher : object {
    public static Type ExtractGenericInterface(Type queryType, Type interfaceType);
    private static bool IsGenericInstantiation(Type candidate, Type interfaceType);
    private static Type GetGenericInstantiation(Type queryType, Type interfaceType);
}
