[ExtensionAttribute]
public static class Microsoft.AspNetCore.Mvc.ApiExplorer.ApiDescriptionExtensions : object {
    [ExtensionAttribute]
public static T GetProperty(ApiDescription apiDescription);
    [ExtensionAttribute]
public static void SetProperty(ApiDescription apiDescription, T value);
}
public class Microsoft.AspNetCore.Mvc.ApiExplorer.ApiDescriptionGroup : object {
    [CompilerGeneratedAttribute]
private string <GroupName>k__BackingField;
    [CompilerGeneratedAttribute]
private IReadOnlyList`1<ApiDescription> <Items>k__BackingField;
    public string GroupName { get; }
    public IReadOnlyList`1<ApiDescription> Items { get; }
    public ApiDescriptionGroup(string groupName, IReadOnlyList`1<ApiDescription> items);
    [CompilerGeneratedAttribute]
public string get_GroupName();
    [CompilerGeneratedAttribute]
public IReadOnlyList`1<ApiDescription> get_Items();
}
public class Microsoft.AspNetCore.Mvc.ApiExplorer.ApiDescriptionGroupCollection : object {
    [CompilerGeneratedAttribute]
private IReadOnlyList`1<ApiDescriptionGroup> <Items>k__BackingField;
    [CompilerGeneratedAttribute]
private int <Version>k__BackingField;
    public IReadOnlyList`1<ApiDescriptionGroup> Items { get; }
    public int Version { get; }
    public ApiDescriptionGroupCollection(IReadOnlyList`1<ApiDescriptionGroup> items, int version);
    [CompilerGeneratedAttribute]
public IReadOnlyList`1<ApiDescriptionGroup> get_Items();
    [CompilerGeneratedAttribute]
public int get_Version();
}
public class Microsoft.AspNetCore.Mvc.ApiExplorer.ApiDescriptionGroupCollectionProvider : object {
    private IActionDescriptorCollectionProvider _actionDescriptorCollectionProvider;
    private IApiDescriptionProvider[] _apiDescriptionProviders;
    private ApiDescriptionGroupCollection _apiDescriptionGroups;
    public ApiDescriptionGroupCollection ApiDescriptionGroups { get; }
    public ApiDescriptionGroupCollectionProvider(IActionDescriptorCollectionProvider actionDescriptorCollectionProvider, IEnumerable`1<IApiDescriptionProvider> apiDescriptionProviders);
    public sealed virtual ApiDescriptionGroupCollection get_ApiDescriptionGroups();
    private ApiDescriptionGroupCollection GetCollection(ActionDescriptorCollection actionDescriptors);
}
public class Microsoft.AspNetCore.Mvc.ApiExplorer.DefaultApiDescriptionProvider : object {
    private MvcOptions _mvcOptions;
    private IActionResultTypeMapper _mapper;
    private IInlineConstraintResolver _constraintResolver;
    private IModelMetadataProvider _modelMetadataProvider;
    public int Order { get; }
    [ObsoleteAttribute("This constructor is obsolete and will be removed in a future release.")]
public DefaultApiDescriptionProvider(IOptions`1<MvcOptions> optionsAccessor, IInlineConstraintResolver constraintResolver, IModelMetadataProvider modelMetadataProvider);
    public DefaultApiDescriptionProvider(IOptions`1<MvcOptions> optionsAccessor, IInlineConstraintResolver constraintResolver, IModelMetadataProvider modelMetadataProvider, IActionResultTypeMapper mapper);
    public sealed virtual int get_Order();
    public sealed virtual void OnProvidersExecuting(ApiDescriptionProviderContext context);
    public sealed virtual void OnProvidersExecuted(ApiDescriptionProviderContext context);
    private ApiDescription CreateApiDescription(ControllerActionDescriptor action, string httpMethod, string groupName);
    private IList`1<ApiParameterDescription> GetParameters(ApiParameterContext context);
    private ApiParameterRouteInfo CreateRouteInfo(TemplatePart routeParameter);
    private IEnumerable`1<string> GetHttpMethods(ControllerActionDescriptor action);
    private RouteTemplate ParseTemplate(ControllerActionDescriptor action);
    private string GetRelativePath(RouteTemplate parsedTemplate);
    private IReadOnlyList`1<ApiRequestFormat> GetSupportedFormats(MediaTypeCollection contentTypes, Type type);
    private static MediaTypeCollection GetDeclaredContentTypes(IApiRequestMetadataProvider[] requestMetadataAttributes);
    private IReadOnlyList`1<ApiResponseType> GetApiResponseTypes(IApiResponseMetadataProvider[] responseMetadataAttributes, Type type);
    private Type GetDeclaredReturnType(ControllerActionDescriptor action);
    private Type GetRuntimeReturnType(Type declaredReturnType);
    private IApiRequestMetadataProvider[] GetRequestMetadataAttributes(ControllerActionDescriptor action);
    private IApiResponseMetadataProvider[] GetResponseMetadataAttributes(ControllerActionDescriptor action);
}
public interface Microsoft.AspNetCore.Mvc.ApiExplorer.IApiDescriptionGroupCollectionProvider {
    public ApiDescriptionGroupCollection ApiDescriptionGroups { get; }
    public abstract virtual ApiDescriptionGroupCollection get_ApiDescriptionGroups();
}
[ExtensionAttribute]
public static class Microsoft.Extensions.DependencyInjection.MvcApiExplorerMvcCoreBuilderExtensions : object {
    [ExtensionAttribute]
public static IMvcCoreBuilder AddApiExplorer(IMvcCoreBuilder builder);
    internal static void AddApiExplorerServices(IServiceCollection services);
}
internal static class Microsoft.Extensions.Internal.ClosedGenericMatcher : object {
    public static Type ExtractGenericInterface(Type queryType, Type interfaceType);
    private static bool IsGenericInstantiation(Type candidate, Type interfaceType);
    private static Type GetGenericInstantiation(Type queryType, Type interfaceType);
}
internal class Microsoft.Extensions.Internal.HashCodeCombiner : ValueType {
    private long _combinedHash64;
    public int CombinedHash { get; }
    private HashCodeCombiner(long seed);
    public int get_CombinedHash();
    public void Add(IEnumerable e);
    public static int op_Implicit(HashCodeCombiner self);
    public void Add(int i);
    public void Add(string s);
    public void Add(object o);
    public void Add(TValue value, IEqualityComparer`1<TValue> comparer);
    public static HashCodeCombiner Start();
}
internal class Microsoft.Extensions.Internal.PropertyHelper : object {
    private static MethodInfo CallPropertyGetterOpenGenericMethod;
    private static MethodInfo CallPropertyGetterByReferenceOpenGenericMethod;
    private static MethodInfo CallNullSafePropertyGetterOpenGenericMethod;
    private static MethodInfo CallNullSafePropertyGetterByReferenceOpenGenericMethod;
    private static MethodInfo CallPropertySetterOpenGenericMethod;
    private static ConcurrentDictionary`2<Type, PropertyHelper[]> PropertiesCache;
    private static ConcurrentDictionary`2<Type, PropertyHelper[]> VisiblePropertiesCache;
    private Action`2<object, object> _valueSetter;
    private Func`2<object, object> _valueGetter;
    [CompilerGeneratedAttribute]
private PropertyInfo <Property>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    public PropertyInfo Property { get; }
    public string Name { get; protected set; }
    public Func`2<object, object> ValueGetter { get; }
    public Action`2<object, object> ValueSetter { get; }
    public PropertyHelper(PropertyInfo property);
    private static PropertyHelper();
    [CompilerGeneratedAttribute]
public PropertyInfo get_Property();
    [CompilerGeneratedAttribute]
public virtual string get_Name();
    [CompilerGeneratedAttribute]
protected virtual void set_Name(string value);
    public Func`2<object, object> get_ValueGetter();
    public Action`2<object, object> get_ValueSetter();
    public object GetValue(object instance);
    public void SetValue(object instance, object value);
    public static PropertyHelper[] GetProperties(TypeInfo typeInfo);
    public static PropertyHelper[] GetProperties(Type type);
    public static PropertyHelper[] GetVisibleProperties(TypeInfo typeInfo);
    public static PropertyHelper[] GetVisibleProperties(Type type);
    public static Func`2<object, object> MakeFastPropertyGetter(PropertyInfo propertyInfo);
    public static Func`2<object, object> MakeNullSafeFastPropertyGetter(PropertyInfo propertyInfo);
    private static Func`2<object, object> MakeFastPropertyGetter(PropertyInfo propertyInfo, MethodInfo propertyGetterWrapperMethod, MethodInfo propertyGetterByRefWrapperMethod);
    private static Func`2<object, object> MakeFastPropertyGetter(Type openGenericDelegateType, MethodInfo propertyGetMethod, MethodInfo openGenericWrapperMethod);
    public static Action`2<object, object> MakeFastPropertySetter(PropertyInfo propertyInfo);
    public static IDictionary`2<string, object> ObjectToDictionary(object value);
    private static PropertyHelper CreateInstance(PropertyInfo property);
    private static object CallPropertyGetter(Func`2<TDeclaringType, TValue> getter, object target);
    private static object CallPropertyGetterByReference(ByRefFunc`2<TDeclaringType, TValue> getter, object target);
    private static object CallNullSafePropertyGetter(Func`2<TDeclaringType, TValue> getter, object target);
    private static object CallNullSafePropertyGetterByReference(ByRefFunc`2<TDeclaringType, TValue> getter, object target);
    private static void CallPropertySetter(Action`2<TDeclaringType, TValue> setter, object target, object value);
    protected static PropertyHelper[] GetVisibleProperties(Type type, Func`2<PropertyInfo, PropertyHelper> createPropertyHelper, ConcurrentDictionary`2<Type, PropertyHelper[]> allPropertiesCache, ConcurrentDictionary`2<Type, PropertyHelper[]> visiblePropertiesCache);
    protected static PropertyHelper[] GetProperties(Type type, Func`2<PropertyInfo, PropertyHelper> createPropertyHelper, ConcurrentDictionary`2<Type, PropertyHelper[]> cache);
    private static bool IsInterestingProperty(PropertyInfo property);
}
