[ExtensionAttribute]
public static class Microsoft.AspNetCore.Builder.MvcApplicationBuilderExtensions : object {
    [ExtensionAttribute]
public static IApplicationBuilder UseMvc(IApplicationBuilder app);
    [ExtensionAttribute]
public static IApplicationBuilder UseMvcWithDefaultRoute(IApplicationBuilder app);
    [ExtensionAttribute]
public static IApplicationBuilder UseMvc(IApplicationBuilder app, Action`1<IRouteBuilder> configureRoutes);
}
[ExtensionAttribute]
public static class Microsoft.AspNetCore.Builder.MvcAreaRouteBuilderExtensions : object {
    [ExtensionAttribute]
public static IRouteBuilder MapAreaRoute(IRouteBuilder routeBuilder, string name, string areaName, string template);
    [ExtensionAttribute]
public static IRouteBuilder MapAreaRoute(IRouteBuilder routeBuilder, string name, string areaName, string template, object defaults);
    [ExtensionAttribute]
public static IRouteBuilder MapAreaRoute(IRouteBuilder routeBuilder, string name, string areaName, string template, object defaults, object constraints);
    [ExtensionAttribute]
public static IRouteBuilder MapAreaRoute(IRouteBuilder routeBuilder, string name, string areaName, string template, object defaults, object constraints, object dataTokens);
}
internal static class Microsoft.AspNetCore.Internal.RangeHelper : object {
    public static ValueTuple`2<bool, RangeItemHeaderValue> ParseRange(HttpContext context, RequestHeaders requestHeaders, long length, ILogger logger);
    internal static RangeItemHeaderValue NormalizeRange(RangeItemHeaderValue range, long length);
}
public class Microsoft.AspNetCore.Mvc.AcceptedAtActionResult : ObjectResult {
    [CompilerGeneratedAttribute]
private IUrlHelper <UrlHelper>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ActionName>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ControllerName>k__BackingField;
    [CompilerGeneratedAttribute]
private RouteValueDictionary <RouteValues>k__BackingField;
    public IUrlHelper UrlHelper { get; public set; }
    public string ActionName { get; public set; }
    public string ControllerName { get; public set; }
    public RouteValueDictionary RouteValues { get; public set; }
    public AcceptedAtActionResult(string actionName, string controllerName, object routeValues, object value);
    [CompilerGeneratedAttribute]
public IUrlHelper get_UrlHelper();
    [CompilerGeneratedAttribute]
public void set_UrlHelper(IUrlHelper value);
    [CompilerGeneratedAttribute]
public string get_ActionName();
    [CompilerGeneratedAttribute]
public void set_ActionName(string value);
    [CompilerGeneratedAttribute]
public string get_ControllerName();
    [CompilerGeneratedAttribute]
public void set_ControllerName(string value);
    [CompilerGeneratedAttribute]
public RouteValueDictionary get_RouteValues();
    [CompilerGeneratedAttribute]
public void set_RouteValues(RouteValueDictionary value);
    public virtual void OnFormatting(ActionContext context);
}
public class Microsoft.AspNetCore.Mvc.AcceptedAtRouteResult : ObjectResult {
    [CompilerGeneratedAttribute]
private IUrlHelper <UrlHelper>k__BackingField;
    [CompilerGeneratedAttribute]
private string <RouteName>k__BackingField;
    [CompilerGeneratedAttribute]
private RouteValueDictionary <RouteValues>k__BackingField;
    public IUrlHelper UrlHelper { get; public set; }
    public string RouteName { get; public set; }
    public RouteValueDictionary RouteValues { get; public set; }
    public AcceptedAtRouteResult(object routeValues, object value);
    public AcceptedAtRouteResult(string routeName, object routeValues, object value);
    [CompilerGeneratedAttribute]
public IUrlHelper get_UrlHelper();
    [CompilerGeneratedAttribute]
public void set_UrlHelper(IUrlHelper value);
    [CompilerGeneratedAttribute]
public string get_RouteName();
    [CompilerGeneratedAttribute]
public void set_RouteName(string value);
    [CompilerGeneratedAttribute]
public RouteValueDictionary get_RouteValues();
    [CompilerGeneratedAttribute]
public void set_RouteValues(RouteValueDictionary value);
    public virtual void OnFormatting(ActionContext context);
}
public class Microsoft.AspNetCore.Mvc.AcceptedResult : ObjectResult {
    [CompilerGeneratedAttribute]
private string <Location>k__BackingField;
    public string Location { get; public set; }
    public AcceptedResult(string location, object value);
    public AcceptedResult(Uri locationUri, object value);
    [CompilerGeneratedAttribute]
public string get_Location();
    [CompilerGeneratedAttribute]
public void set_Location(string value);
    public virtual void OnFormatting(ActionContext context);
}
[AttributeUsageAttribute("64")]
public class Microsoft.AspNetCore.Mvc.AcceptVerbsAttribute : Attribute {
    private Nullable`1<int> _order;
    [CompilerGeneratedAttribute]
private IEnumerable`1<string> <HttpMethods>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Route>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    public IEnumerable`1<string> HttpMethods { get; }
    public string Route { get; public set; }
    private string Microsoft.AspNetCore.Mvc.Routing.IRouteTemplateProvider.Template { get; }
    public int Order { get; public set; }
    private Nullable`1<int> Microsoft.AspNetCore.Mvc.Routing.IRouteTemplateProvider.Order { get; }
    public string Name { get; public set; }
    public AcceptVerbsAttribute(string method);
    public AcceptVerbsAttribute(String[] methods);
    [CompilerGeneratedAttribute]
public sealed virtual IEnumerable`1<string> get_HttpMethods();
    [CompilerGeneratedAttribute]
public string get_Route();
    [CompilerGeneratedAttribute]
public void set_Route(string value);
    private sealed virtual override string Microsoft.AspNetCore.Mvc.Routing.IRouteTemplateProvider.get_Template();
    public int get_Order();
    public void set_Order(int value);
    private sealed virtual override Nullable`1<int> Microsoft.AspNetCore.Mvc.Routing.IRouteTemplateProvider.get_Order();
    [CompilerGeneratedAttribute]
public sealed virtual string get_Name();
    [CompilerGeneratedAttribute]
public void set_Name(string value);
}
[AttributeUsageAttribute("64")]
public abstract class Microsoft.AspNetCore.Mvc.ActionConstraints.ActionMethodSelectorAttribute : Attribute {
    [CompilerGeneratedAttribute]
private int <Order>k__BackingField;
    public int Order { get; public set; }
    [CompilerGeneratedAttribute]
public sealed virtual int get_Order();
    [CompilerGeneratedAttribute]
public void set_Order(int value);
    public sealed virtual bool Accept(ActionConstraintContext context);
    public abstract virtual bool IsValidForRequest(RouteContext routeContext, ActionDescriptor action);
}
[AttributeUsageAttribute("128")]
public class Microsoft.AspNetCore.Mvc.ActionContextAttribute : Attribute {
}
[AttributeUsageAttribute("64")]
public class Microsoft.AspNetCore.Mvc.ActionNameAttribute : Attribute {
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    public string Name { get; }
    public ActionNameAttribute(string name);
    [CompilerGeneratedAttribute]
public string get_Name();
}
public abstract class Microsoft.AspNetCore.Mvc.ActionResult : object {
    public virtual Task ExecuteResultAsync(ActionContext context);
    public virtual void ExecuteResult(ActionContext context);
}
public class Microsoft.AspNetCore.Mvc.ActionResult`1 : object {
    [CompilerGeneratedAttribute]
private ActionResult <Result>k__BackingField;
    [CompilerGeneratedAttribute]
private TValue <Value>k__BackingField;
    public ActionResult Result { get; }
    public TValue Value { get; }
    public ActionResult`1(TValue value);
    public ActionResult`1(ActionResult result);
    [CompilerGeneratedAttribute]
public ActionResult get_Result();
    [CompilerGeneratedAttribute]
public TValue get_Value();
    public static ActionResult`1<TValue> op_Implicit(TValue value);
    public static ActionResult`1<TValue> op_Implicit(ActionResult result);
    private sealed virtual override IActionResult Microsoft.AspNetCore.Mvc.Infrastructure.IConvertToActionResult.Convert();
}
public class Microsoft.AspNetCore.Mvc.ApiBehaviorOptions : object {
    private Func`2<ActionContext, IActionResult> _invalidModelStateResponseFactory;
    [CompilerGeneratedAttribute]
private bool <SuppressModelStateInvalidFilter>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <SuppressInferBindingSourcesForParameters>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <SuppressConsumesConstraintForFormFileParameters>k__BackingField;
    public Func`2<ActionContext, IActionResult> InvalidModelStateResponseFactory { get; public set; }
    public bool SuppressModelStateInvalidFilter { get; public set; }
    public bool SuppressInferBindingSourcesForParameters { get; public set; }
    public bool SuppressConsumesConstraintForFormFileParameters { get; public set; }
    public Func`2<ActionContext, IActionResult> get_InvalidModelStateResponseFactory();
    public void set_InvalidModelStateResponseFactory(Func`2<ActionContext, IActionResult> value);
    [CompilerGeneratedAttribute]
public bool get_SuppressModelStateInvalidFilter();
    [CompilerGeneratedAttribute]
public void set_SuppressModelStateInvalidFilter(bool value);
    [CompilerGeneratedAttribute]
public bool get_SuppressInferBindingSourcesForParameters();
    [CompilerGeneratedAttribute]
public void set_SuppressInferBindingSourcesForParameters(bool value);
    [CompilerGeneratedAttribute]
public bool get_SuppressConsumesConstraintForFormFileParameters();
    [CompilerGeneratedAttribute]
public void set_SuppressConsumesConstraintForFormFileParameters(bool value);
}
[AttributeUsageAttribute("4")]
public class Microsoft.AspNetCore.Mvc.ApiControllerAttribute : ControllerAttribute {
}
public interface Microsoft.AspNetCore.Mvc.ApiExplorer.IApiDescriptionGroupNameProvider {
    public string GroupName { get; }
    public abstract virtual string get_GroupName();
}
public interface Microsoft.AspNetCore.Mvc.ApiExplorer.IApiDescriptionVisibilityProvider {
    public bool IgnoreApi { get; }
    public abstract virtual bool get_IgnoreApi();
}
public interface Microsoft.AspNetCore.Mvc.ApiExplorer.IApiRequestFormatMetadataProvider {
    public abstract virtual IReadOnlyList`1<string> GetSupportedContentTypes(string contentType, Type objectType);
}
public interface Microsoft.AspNetCore.Mvc.ApiExplorer.IApiRequestMetadataProvider {
    public abstract virtual void SetContentTypes(MediaTypeCollection contentTypes);
}
public interface Microsoft.AspNetCore.Mvc.ApiExplorer.IApiResponseMetadataProvider {
    public Type Type { get; }
    public int StatusCode { get; }
    public abstract virtual Type get_Type();
    public abstract virtual int get_StatusCode();
    public abstract virtual void SetContentTypes(MediaTypeCollection contentTypes);
}
public interface Microsoft.AspNetCore.Mvc.ApiExplorer.IApiResponseTypeMetadataProvider {
    public abstract virtual IReadOnlyList`1<string> GetSupportedContentTypes(string contentType, Type objectType);
}
[AttributeUsageAttribute("68")]
public class Microsoft.AspNetCore.Mvc.ApiExplorerSettingsAttribute : Attribute {
    [CompilerGeneratedAttribute]
private string <GroupName>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IgnoreApi>k__BackingField;
    public string GroupName { get; public set; }
    public bool IgnoreApi { get; public set; }
    [CompilerGeneratedAttribute]
public sealed virtual string get_GroupName();
    [CompilerGeneratedAttribute]
public void set_GroupName(string value);
    [CompilerGeneratedAttribute]
public sealed virtual bool get_IgnoreApi();
    [CompilerGeneratedAttribute]
public void set_IgnoreApi(bool value);
}
[DebuggerDisplayAttribute("{DisplayName}")]
public class Microsoft.AspNetCore.Mvc.ApplicationModels.ActionModel : object {
    [CompilerGeneratedAttribute]
private MethodInfo <ActionMethod>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ActionName>k__BackingField;
    [CompilerGeneratedAttribute]
private ApiExplorerModel <ApiExplorer>k__BackingField;
    [CompilerGeneratedAttribute]
private IReadOnlyList`1<object> <Attributes>k__BackingField;
    [CompilerGeneratedAttribute]
private ControllerModel <Controller>k__BackingField;
    [CompilerGeneratedAttribute]
private IList`1<IFilterMetadata> <Filters>k__BackingField;
    [CompilerGeneratedAttribute]
private IList`1<ParameterModel> <Parameters>k__BackingField;
    [CompilerGeneratedAttribute]
private IDictionary`2<string, string> <RouteValues>k__BackingField;
    [CompilerGeneratedAttribute]
private IDictionary`2<object, object> <Properties>k__BackingField;
    [CompilerGeneratedAttribute]
private IList`1<SelectorModel> <Selectors>k__BackingField;
    public MethodInfo ActionMethod { get; }
    public string ActionName { get; public set; }
    public ApiExplorerModel ApiExplorer { get; public set; }
    public IReadOnlyList`1<object> Attributes { get; }
    public ControllerModel Controller { get; public set; }
    public IList`1<IFilterMetadata> Filters { get; }
    public IList`1<ParameterModel> Parameters { get; }
    public IDictionary`2<string, string> RouteValues { get; }
    public IDictionary`2<object, object> Properties { get; }
    private MemberInfo Microsoft.AspNetCore.Mvc.ApplicationModels.ICommonModel.MemberInfo { get; }
    private string Microsoft.AspNetCore.Mvc.ApplicationModels.ICommonModel.Name { get; }
    public IList`1<SelectorModel> Selectors { get; }
    public string DisplayName { get; }
    public ActionModel(MethodInfo actionMethod, IReadOnlyList`1<object> attributes);
    public ActionModel(ActionModel other);
    [CompilerGeneratedAttribute]
public MethodInfo get_ActionMethod();
    [CompilerGeneratedAttribute]
public string get_ActionName();
    [CompilerGeneratedAttribute]
public void set_ActionName(string value);
    [CompilerGeneratedAttribute]
public sealed virtual ApiExplorerModel get_ApiExplorer();
    [CompilerGeneratedAttribute]
public sealed virtual void set_ApiExplorer(ApiExplorerModel value);
    [CompilerGeneratedAttribute]
public sealed virtual IReadOnlyList`1<object> get_Attributes();
    [CompilerGeneratedAttribute]
public ControllerModel get_Controller();
    [CompilerGeneratedAttribute]
public void set_Controller(ControllerModel value);
    [CompilerGeneratedAttribute]
public sealed virtual IList`1<IFilterMetadata> get_Filters();
    [CompilerGeneratedAttribute]
public IList`1<ParameterModel> get_Parameters();
    [CompilerGeneratedAttribute]
public IDictionary`2<string, string> get_RouteValues();
    [CompilerGeneratedAttribute]
public sealed virtual IDictionary`2<object, object> get_Properties();
    private sealed virtual override MemberInfo Microsoft.AspNetCore.Mvc.ApplicationModels.ICommonModel.get_MemberInfo();
    private sealed virtual override string Microsoft.AspNetCore.Mvc.ApplicationModels.ICommonModel.get_Name();
    [CompilerGeneratedAttribute]
public IList`1<SelectorModel> get_Selectors();
    public string get_DisplayName();
    [CompilerGeneratedAttribute]
private ParameterModel <.ctor>b__1_0(ParameterModel p);
}
public class Microsoft.AspNetCore.Mvc.ApplicationModels.ApiExplorerModel : object {
    [CompilerGeneratedAttribute]
private Nullable`1<bool> <IsVisible>k__BackingField;
    [CompilerGeneratedAttribute]
private string <GroupName>k__BackingField;
    public Nullable`1<bool> IsVisible { get; public set; }
    public string GroupName { get; public set; }
    public ApiExplorerModel(ApiExplorerModel other);
    [CompilerGeneratedAttribute]
public Nullable`1<bool> get_IsVisible();
    [CompilerGeneratedAttribute]
public void set_IsVisible(Nullable`1<bool> value);
    [CompilerGeneratedAttribute]
public string get_GroupName();
    [CompilerGeneratedAttribute]
public void set_GroupName(string value);
}
[DebuggerDisplayAttribute("ApplicationModel: Controllers: {Controllers.Count}, Filters: {Filters.Count}")]
public class Microsoft.AspNetCore.Mvc.ApplicationModels.ApplicationModel : object {
    [CompilerGeneratedAttribute]
private ApiExplorerModel <ApiExplorer>k__BackingField;
    [CompilerGeneratedAttribute]
private IList`1<ControllerModel> <Controllers>k__BackingField;
    [CompilerGeneratedAttribute]
private IList`1<IFilterMetadata> <Filters>k__BackingField;
    [CompilerGeneratedAttribute]
private IDictionary`2<object, object> <Properties>k__BackingField;
    public ApiExplorerModel ApiExplorer { get; public set; }
    public IList`1<ControllerModel> Controllers { get; }
    public IList`1<IFilterMetadata> Filters { get; }
    public IDictionary`2<object, object> Properties { get; }
    [CompilerGeneratedAttribute]
public sealed virtual ApiExplorerModel get_ApiExplorer();
    [CompilerGeneratedAttribute]
public sealed virtual void set_ApiExplorer(ApiExplorerModel value);
    [CompilerGeneratedAttribute]
public IList`1<ControllerModel> get_Controllers();
    [CompilerGeneratedAttribute]
public sealed virtual IList`1<IFilterMetadata> get_Filters();
    [CompilerGeneratedAttribute]
public sealed virtual IDictionary`2<object, object> get_Properties();
}
public class Microsoft.AspNetCore.Mvc.ApplicationModels.ApplicationModelProviderContext : object {
    [CompilerGeneratedAttribute]
private IEnumerable`1<TypeInfo> <ControllerTypes>k__BackingField;
    [CompilerGeneratedAttribute]
private ApplicationModel <Result>k__BackingField;
    public IEnumerable`1<TypeInfo> ControllerTypes { get; }
    public ApplicationModel Result { get; }
    public ApplicationModelProviderContext(IEnumerable`1<TypeInfo> controllerTypes);
    [CompilerGeneratedAttribute]
public IEnumerable`1<TypeInfo> get_ControllerTypes();
    [CompilerGeneratedAttribute]
public ApplicationModel get_Result();
}
public class Microsoft.AspNetCore.Mvc.ApplicationModels.AttributeRouteModel : object {
    private static AttributeRouteModel _default;
    [CompilerGeneratedAttribute]
private IRouteTemplateProvider <Attribute>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Template>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<int> <Order>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <SuppressLinkGeneration>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <SuppressPathMatching>k__BackingField;
    public IRouteTemplateProvider Attribute { get; }
    public string Template { get; public set; }
    public Nullable`1<int> Order { get; public set; }
    public string Name { get; public set; }
    public bool SuppressLinkGeneration { get; public set; }
    public bool SuppressPathMatching { get; public set; }
    public bool IsAbsoluteTemplate { get; }
    public AttributeRouteModel(IRouteTemplateProvider templateProvider);
    public AttributeRouteModel(AttributeRouteModel other);
    private static AttributeRouteModel();
    [CompilerGeneratedAttribute]
public IRouteTemplateProvider get_Attribute();
    [CompilerGeneratedAttribute]
public string get_Template();
    [CompilerGeneratedAttribute]
public void set_Template(string value);
    [CompilerGeneratedAttribute]
public Nullable`1<int> get_Order();
    [CompilerGeneratedAttribute]
public void set_Order(Nullable`1<int> value);
    [CompilerGeneratedAttribute]
public string get_Name();
    [CompilerGeneratedAttribute]
public void set_Name(string value);
    [CompilerGeneratedAttribute]
public bool get_SuppressLinkGeneration();
    [CompilerGeneratedAttribute]
public void set_SuppressLinkGeneration(bool value);
    [CompilerGeneratedAttribute]
public bool get_SuppressPathMatching();
    [CompilerGeneratedAttribute]
public void set_SuppressPathMatching(bool value);
    public bool get_IsAbsoluteTemplate();
    public static AttributeRouteModel CombineAttributeRouteModel(AttributeRouteModel left, AttributeRouteModel right);
    public static string CombineTemplates(string prefix, string template);
    public static bool IsOverridePattern(string template);
    private static string ChooseName(AttributeRouteModel left, AttributeRouteModel right);
    private static string CombineCore(string left, string right);
    private static bool IsEmptyLeftSegment(string template);
    private static string CleanTemplate(string result);
    public static string ReplaceTokens(string template, IDictionary`2<string, string> values);
}
[DebuggerDisplayAttribute("{DisplayName}")]
public class Microsoft.AspNetCore.Mvc.ApplicationModels.ControllerModel : object {
    [CompilerGeneratedAttribute]
private IList`1<ActionModel> <Actions>k__BackingField;
    [CompilerGeneratedAttribute]
private ApiExplorerModel <ApiExplorer>k__BackingField;
    [CompilerGeneratedAttribute]
private ApplicationModel <Application>k__BackingField;
    [CompilerGeneratedAttribute]
private IReadOnlyList`1<object> <Attributes>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ControllerName>k__BackingField;
    [CompilerGeneratedAttribute]
private TypeInfo <ControllerType>k__BackingField;
    [CompilerGeneratedAttribute]
private IList`1<PropertyModel> <ControllerProperties>k__BackingField;
    [CompilerGeneratedAttribute]
private IList`1<IFilterMetadata> <Filters>k__BackingField;
    [CompilerGeneratedAttribute]
private IDictionary`2<string, string> <RouteValues>k__BackingField;
    [CompilerGeneratedAttribute]
private IDictionary`2<object, object> <Properties>k__BackingField;
    [CompilerGeneratedAttribute]
private IList`1<SelectorModel> <Selectors>k__BackingField;
    public IList`1<ActionModel> Actions { get; }
    public ApiExplorerModel ApiExplorer { get; public set; }
    public ApplicationModel Application { get; public set; }
    public IReadOnlyList`1<object> Attributes { get; }
    private MemberInfo Microsoft.AspNetCore.Mvc.ApplicationModels.ICommonModel.MemberInfo { get; }
    private string Microsoft.AspNetCore.Mvc.ApplicationModels.ICommonModel.Name { get; }
    public string ControllerName { get; public set; }
    public TypeInfo ControllerType { get; }
    public IList`1<PropertyModel> ControllerProperties { get; }
    public IList`1<IFilterMetadata> Filters { get; }
    public IDictionary`2<string, string> RouteValues { get; }
    public IDictionary`2<object, object> Properties { get; }
    public IList`1<SelectorModel> Selectors { get; }
    public string DisplayName { get; }
    public ControllerModel(TypeInfo controllerType, IReadOnlyList`1<object> attributes);
    public ControllerModel(ControllerModel other);
    [CompilerGeneratedAttribute]
public IList`1<ActionModel> get_Actions();
    [CompilerGeneratedAttribute]
public sealed virtual ApiExplorerModel get_ApiExplorer();
    [CompilerGeneratedAttribute]
public sealed virtual void set_ApiExplorer(ApiExplorerModel value);
    [CompilerGeneratedAttribute]
public ApplicationModel get_Application();
    [CompilerGeneratedAttribute]
public void set_Application(ApplicationModel value);
    [CompilerGeneratedAttribute]
public sealed virtual IReadOnlyList`1<object> get_Attributes();
    private sealed virtual override MemberInfo Microsoft.AspNetCore.Mvc.ApplicationModels.ICommonModel.get_MemberInfo();
    private sealed virtual override string Microsoft.AspNetCore.Mvc.ApplicationModels.ICommonModel.get_Name();
    [CompilerGeneratedAttribute]
public string get_ControllerName();
    [CompilerGeneratedAttribute]
public void set_ControllerName(string value);
    [CompilerGeneratedAttribute]
public TypeInfo get_ControllerType();
    [CompilerGeneratedAttribute]
public IList`1<PropertyModel> get_ControllerProperties();
    [CompilerGeneratedAttribute]
public sealed virtual IList`1<IFilterMetadata> get_Filters();
    [CompilerGeneratedAttribute]
public IDictionary`2<string, string> get_RouteValues();
    [CompilerGeneratedAttribute]
public sealed virtual IDictionary`2<object, object> get_Properties();
    [CompilerGeneratedAttribute]
public IList`1<SelectorModel> get_Selectors();
    public string get_DisplayName();
    [CompilerGeneratedAttribute]
private ActionModel <.ctor>b__1_0(ActionModel a);
    [CompilerGeneratedAttribute]
private PropertyModel <.ctor>b__1_1(PropertyModel p);
}
public interface Microsoft.AspNetCore.Mvc.ApplicationModels.IActionModelConvention {
    public abstract virtual void Apply(ActionModel action);
}
public interface Microsoft.AspNetCore.Mvc.ApplicationModels.IApiExplorerModel {
    public ApiExplorerModel ApiExplorer { get; public set; }
    public abstract virtual ApiExplorerModel get_ApiExplorer();
    public abstract virtual void set_ApiExplorer(ApiExplorerModel value);
}
public interface Microsoft.AspNetCore.Mvc.ApplicationModels.IApplicationModelConvention {
    public abstract virtual void Apply(ApplicationModel application);
}
public interface Microsoft.AspNetCore.Mvc.ApplicationModels.IApplicationModelProvider {
    public int Order { get; }
    public abstract virtual int get_Order();
    public abstract virtual void OnProvidersExecuting(ApplicationModelProviderContext context);
    public abstract virtual void OnProvidersExecuted(ApplicationModelProviderContext context);
}
public interface Microsoft.AspNetCore.Mvc.ApplicationModels.IBindingModel {
    public BindingInfo BindingInfo { get; public set; }
    public abstract virtual BindingInfo get_BindingInfo();
    public abstract virtual void set_BindingInfo(BindingInfo value);
}
public interface Microsoft.AspNetCore.Mvc.ApplicationModels.ICommonModel {
    public IReadOnlyList`1<object> Attributes { get; }
    public MemberInfo MemberInfo { get; }
    public string Name { get; }
    public abstract virtual IReadOnlyList`1<object> get_Attributes();
    public abstract virtual MemberInfo get_MemberInfo();
    public abstract virtual string get_Name();
}
public interface Microsoft.AspNetCore.Mvc.ApplicationModels.IControllerModelConvention {
    public abstract virtual void Apply(ControllerModel controller);
}
public interface Microsoft.AspNetCore.Mvc.ApplicationModels.IFilterModel {
    public IList`1<IFilterMetadata> Filters { get; }
    public abstract virtual IList`1<IFilterMetadata> get_Filters();
}
public interface Microsoft.AspNetCore.Mvc.ApplicationModels.IParameterModelBaseConvention {
    public abstract virtual void Apply(ParameterModelBase parameter);
}
public interface Microsoft.AspNetCore.Mvc.ApplicationModels.IParameterModelConvention {
    public abstract virtual void Apply(ParameterModel parameter);
}
public interface Microsoft.AspNetCore.Mvc.ApplicationModels.IPropertyModel {
    public IDictionary`2<object, object> Properties { get; }
    public abstract virtual IDictionary`2<object, object> get_Properties();
}
[DebuggerDisplayAttribute("ParameterModel: Name={ParameterName}")]
public class Microsoft.AspNetCore.Mvc.ApplicationModels.ParameterModel : ParameterModelBase {
    [CompilerGeneratedAttribute]
private ActionModel <Action>k__BackingField;
    [CompilerGeneratedAttribute]
private ParameterInfo <ParameterInfo>k__BackingField;
    public ActionModel Action { get; public set; }
    public IDictionary`2<object, object> Properties { get; }
    public IReadOnlyList`1<object> Attributes { get; }
    private MemberInfo Microsoft.AspNetCore.Mvc.ApplicationModels.ICommonModel.MemberInfo { get; }
    public ParameterInfo ParameterInfo { get; }
    public string ParameterName { get; public set; }
    public string DisplayName { get; }
    public ParameterModel(ParameterInfo parameterInfo, IReadOnlyList`1<object> attributes);
    public ParameterModel(ParameterModel other);
    [CompilerGeneratedAttribute]
public ActionModel get_Action();
    [CompilerGeneratedAttribute]
public void set_Action(ActionModel value);
    public sealed virtual IDictionary`2<object, object> get_Properties();
    public sealed virtual IReadOnlyList`1<object> get_Attributes();
    private sealed virtual override MemberInfo Microsoft.AspNetCore.Mvc.ApplicationModels.ICommonModel.get_MemberInfo();
    [CompilerGeneratedAttribute]
public ParameterInfo get_ParameterInfo();
    public string get_ParameterName();
    public void set_ParameterName(string value);
    public string get_DisplayName();
}
public abstract class Microsoft.AspNetCore.Mvc.ApplicationModels.ParameterModelBase : object {
    [CompilerGeneratedAttribute]
private IReadOnlyList`1<object> <Attributes>k__BackingField;
    [CompilerGeneratedAttribute]
private IDictionary`2<object, object> <Properties>k__BackingField;
    [CompilerGeneratedAttribute]
private Type <ParameterType>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    [CompilerGeneratedAttribute]
private BindingInfo <BindingInfo>k__BackingField;
    public IReadOnlyList`1<object> Attributes { get; }
    public IDictionary`2<object, object> Properties { get; }
    public Type ParameterType { get; }
    public string Name { get; protected set; }
    public BindingInfo BindingInfo { get; public set; }
    protected ParameterModelBase(Type parameterType, IReadOnlyList`1<object> attributes);
    protected ParameterModelBase(ParameterModelBase other);
    [CompilerGeneratedAttribute]
public IReadOnlyList`1<object> get_Attributes();
    [CompilerGeneratedAttribute]
public IDictionary`2<object, object> get_Properties();
    [CompilerGeneratedAttribute]
public Type get_ParameterType();
    [CompilerGeneratedAttribute]
public sealed virtual string get_Name();
    [CompilerGeneratedAttribute]
protected void set_Name(string value);
    [CompilerGeneratedAttribute]
public sealed virtual BindingInfo get_BindingInfo();
    [CompilerGeneratedAttribute]
public sealed virtual void set_BindingInfo(BindingInfo value);
}
[DebuggerDisplayAttribute("PropertyModel: Name={PropertyName}")]
public class Microsoft.AspNetCore.Mvc.ApplicationModels.PropertyModel : ParameterModelBase {
    [CompilerGeneratedAttribute]
private ControllerModel <Controller>k__BackingField;
    [CompilerGeneratedAttribute]
private PropertyInfo <PropertyInfo>k__BackingField;
    public ControllerModel Controller { get; public set; }
    private MemberInfo Microsoft.AspNetCore.Mvc.ApplicationModels.ICommonModel.MemberInfo { get; }
    public IDictionary`2<object, object> Properties { get; }
    public IReadOnlyList`1<object> Attributes { get; }
    public PropertyInfo PropertyInfo { get; }
    public string PropertyName { get; public set; }
    public PropertyModel(PropertyInfo propertyInfo, IReadOnlyList`1<object> attributes);
    public PropertyModel(PropertyModel other);
    [CompilerGeneratedAttribute]
public ControllerModel get_Controller();
    [CompilerGeneratedAttribute]
public void set_Controller(ControllerModel value);
    private sealed virtual override MemberInfo Microsoft.AspNetCore.Mvc.ApplicationModels.ICommonModel.get_MemberInfo();
    public sealed virtual IDictionary`2<object, object> get_Properties();
    public sealed virtual IReadOnlyList`1<object> get_Attributes();
    [CompilerGeneratedAttribute]
public PropertyInfo get_PropertyInfo();
    public string get_PropertyName();
    public void set_PropertyName(string value);
}
public class Microsoft.AspNetCore.Mvc.ApplicationModels.SelectorModel : object {
    [CompilerGeneratedAttribute]
private AttributeRouteModel <AttributeRouteModel>k__BackingField;
    [CompilerGeneratedAttribute]
private IList`1<IActionConstraintMetadata> <ActionConstraints>k__BackingField;
    public AttributeRouteModel AttributeRouteModel { get; public set; }
    public IList`1<IActionConstraintMetadata> ActionConstraints { get; }
    public SelectorModel(SelectorModel other);
    [CompilerGeneratedAttribute]
public AttributeRouteModel get_AttributeRouteModel();
    [CompilerGeneratedAttribute]
public void set_AttributeRouteModel(AttributeRouteModel value);
    [CompilerGeneratedAttribute]
public IList`1<IActionConstraintMetadata> get_ActionConstraints();
}
internal class Microsoft.AspNetCore.Mvc.ApplicationParts.ApplicationAssembliesProvider : object {
    [CompilerGeneratedAttribute]
private static HashSet`1<string> <ReferenceAssemblies>k__BackingField;
    internal static HashSet`1<string> ReferenceAssemblies { get; }
    private static ApplicationAssembliesProvider();
    [CompilerGeneratedAttribute]
internal static HashSet`1<string> get_ReferenceAssemblies();
    [IteratorStateMachineAttribute("Microsoft.AspNetCore.Mvc.ApplicationParts.ApplicationAssembliesProvider/<ResolveAssemblies>d__3")]
public IEnumerable`1<Assembly> ResolveAssemblies(Assembly entryAssembly);
    protected virtual DependencyContext LoadDependencyContext(Assembly assembly);
    private List`1<AssemblyItem> ResolveFromDependencyContext(DependencyContext dependencyContext);
    [IteratorStateMachineAttribute("Microsoft.AspNetCore.Mvc.ApplicationParts.ApplicationAssembliesProvider/<GetLibraryAssemblies>d__6")]
protected virtual IEnumerable`1<Assembly> GetLibraryAssemblies(DependencyContext dependencyContext, RuntimeLibrary runtimeLibrary);
    protected virtual IReadOnlyList`1<Assembly> GetRelatedAssemblies(Assembly assembly);
    private AssemblyItem GetAssemblyItem(Assembly assembly);
    [IteratorStateMachineAttribute("Microsoft.AspNetCore.Mvc.ApplicationParts.ApplicationAssembliesProvider/<GetCandidateLibraries>d__9")]
internal static IEnumerable`1<RuntimeLibrary> GetCandidateLibraries(DependencyContext dependencyContext);
}
public abstract class Microsoft.AspNetCore.Mvc.ApplicationParts.ApplicationPart : object {
    public string Name { get; }
    public abstract virtual string get_Name();
}
public abstract class Microsoft.AspNetCore.Mvc.ApplicationParts.ApplicationPartFactory : object {
    public abstract virtual IEnumerable`1<ApplicationPart> GetApplicationParts(Assembly assembly);
    public static ApplicationPartFactory GetApplicationPartFactory(Assembly assembly);
}
public class Microsoft.AspNetCore.Mvc.ApplicationParts.ApplicationPartManager : object {
    [CompilerGeneratedAttribute]
private IList`1<IApplicationFeatureProvider> <FeatureProviders>k__BackingField;
    [CompilerGeneratedAttribute]
private IList`1<ApplicationPart> <ApplicationParts>k__BackingField;
    public IList`1<IApplicationFeatureProvider> FeatureProviders { get; }
    public IList`1<ApplicationPart> ApplicationParts { get; }
    [CompilerGeneratedAttribute]
public IList`1<IApplicationFeatureProvider> get_FeatureProviders();
    [CompilerGeneratedAttribute]
public IList`1<ApplicationPart> get_ApplicationParts();
    public void PopulateFeature(TFeature feature);
    internal void PopulateDefaultParts(string entryAssemblyName);
}
public class Microsoft.AspNetCore.Mvc.ApplicationParts.AssemblyPart : ApplicationPart {
    [CompilerGeneratedAttribute]
private Assembly <Assembly>k__BackingField;
    public Assembly Assembly { get; }
    public string Name { get; }
    public IEnumerable`1<TypeInfo> Types { get; }
    public AssemblyPart(Assembly assembly);
    [CompilerGeneratedAttribute]
public Assembly get_Assembly();
    public virtual string get_Name();
    public sealed virtual IEnumerable`1<TypeInfo> get_Types();
    public sealed virtual IEnumerable`1<string> GetReferencePaths();
}
public class Microsoft.AspNetCore.Mvc.ApplicationParts.DefaultApplicationPartFactory : ApplicationPartFactory {
    [CompilerGeneratedAttribute]
private static DefaultApplicationPartFactory <Instance>k__BackingField;
    public static DefaultApplicationPartFactory Instance { get; }
    private static DefaultApplicationPartFactory();
    [CompilerGeneratedAttribute]
public static DefaultApplicationPartFactory get_Instance();
    [IteratorStateMachineAttribute("Microsoft.AspNetCore.Mvc.ApplicationParts.DefaultApplicationPartFactory/<GetDefaultApplicationParts>d__3")]
public static IEnumerable`1<ApplicationPart> GetDefaultApplicationParts(Assembly assembly);
    public virtual IEnumerable`1<ApplicationPart> GetApplicationParts(Assembly assembly);
}
public interface Microsoft.AspNetCore.Mvc.ApplicationParts.IApplicationFeatureProvider {
}
public interface Microsoft.AspNetCore.Mvc.ApplicationParts.IApplicationFeatureProvider`1 {
    public abstract virtual void PopulateFeature(IEnumerable`1<ApplicationPart> parts, TFeature feature);
}
public interface Microsoft.AspNetCore.Mvc.ApplicationParts.IApplicationPartTypeProvider {
    public IEnumerable`1<TypeInfo> Types { get; }
    public abstract virtual IEnumerable`1<TypeInfo> get_Types();
}
public interface Microsoft.AspNetCore.Mvc.ApplicationParts.ICompilationReferencesProvider {
    public abstract virtual IEnumerable`1<string> GetReferencePaths();
}
public class Microsoft.AspNetCore.Mvc.ApplicationParts.NullApplicationPartFactory : ApplicationPartFactory {
    public virtual IEnumerable`1<ApplicationPart> GetApplicationParts(Assembly assembly);
}
[AttributeUsageAttribute("1")]
public class Microsoft.AspNetCore.Mvc.ApplicationParts.ProvideApplicationPartFactoryAttribute : Attribute {
    private Type _applicationPartFactoryType;
    private string _applicationPartFactoryTypeName;
    public ProvideApplicationPartFactoryAttribute(Type factoryType);
    public ProvideApplicationPartFactoryAttribute(string factoryTypeName);
    public Type GetFactoryType();
}
[AttributeUsageAttribute("1")]
public class Microsoft.AspNetCore.Mvc.ApplicationParts.RelatedAssemblyAttribute : Attribute {
    private static Func`2<string, Assembly> AssemblyLoadFileDelegate;
    [CompilerGeneratedAttribute]
private string <AssemblyFileName>k__BackingField;
    public string AssemblyFileName { get; }
    public RelatedAssemblyAttribute(string assemblyFileName);
    private static RelatedAssemblyAttribute();
    [CompilerGeneratedAttribute]
public string get_AssemblyFileName();
    public static IReadOnlyList`1<Assembly> GetRelatedAssemblies(Assembly assembly, bool throwOnError);
    internal static IReadOnlyList`1<Assembly> GetRelatedAssemblies(Assembly assembly, bool throwOnError, Func`2<string, bool> fileExists, Func`2<string, Assembly> loadFile);
    internal static string GetAssemblyLocation(Assembly assembly);
}
[AttributeUsageAttribute("68")]
public class Microsoft.AspNetCore.Mvc.AreaAttribute : RouteValueAttribute {
    public AreaAttribute(string areaName);
}
public class Microsoft.AspNetCore.Mvc.Authorization.AllowAnonymousFilter : object {
}
public class Microsoft.AspNetCore.Mvc.Authorization.AuthorizeFilter : object {
    private MvcOptions _mvcOptions;
    private AuthorizationPolicy _effectivePolicy;
    [CompilerGeneratedAttribute]
private IAuthorizationPolicyProvider <PolicyProvider>k__BackingField;
    [CompilerGeneratedAttribute]
private IEnumerable`1<IAuthorizeData> <AuthorizeData>k__BackingField;
    [CompilerGeneratedAttribute]
private AuthorizationPolicy <Policy>k__BackingField;
    public IAuthorizationPolicyProvider PolicyProvider { get; }
    public IEnumerable`1<IAuthorizeData> AuthorizeData { get; }
    public AuthorizationPolicy Policy { get; }
    private bool Microsoft.AspNetCore.Mvc.Filters.IFilterFactory.IsReusable { get; }
    public AuthorizeFilter(AuthorizationPolicy policy);
    public AuthorizeFilter(IAuthorizationPolicyProvider policyProvider, IEnumerable`1<IAuthorizeData> authorizeData);
    public AuthorizeFilter(IEnumerable`1<IAuthorizeData> authorizeData);
    public AuthorizeFilter(string policy);
    [CompilerGeneratedAttribute]
public IAuthorizationPolicyProvider get_PolicyProvider();
    [CompilerGeneratedAttribute]
public IEnumerable`1<IAuthorizeData> get_AuthorizeData();
    [CompilerGeneratedAttribute]
public AuthorizationPolicy get_Policy();
    private sealed virtual override bool Microsoft.AspNetCore.Mvc.Filters.IFilterFactory.get_IsReusable();
    [AsyncStateMachineAttribute("Microsoft.AspNetCore.Mvc.Authorization.AuthorizeFilter/<GetEffectivePolicyAsync>d__18")]
private Task`1<AuthorizationPolicy> GetEffectivePolicyAsync(AuthorizationFilterContext context);
    [AsyncStateMachineAttribute("Microsoft.AspNetCore.Mvc.Authorization.AuthorizeFilter/<OnAuthorizationAsync>d__19")]
public virtual Task OnAuthorizationAsync(AuthorizationFilterContext context);
    private sealed virtual override IFilterMetadata Microsoft.AspNetCore.Mvc.Filters.IFilterFactory.CreateInstance(IServiceProvider serviceProvider);
}
public class Microsoft.AspNetCore.Mvc.BadRequestObjectResult : ObjectResult {
    public BadRequestObjectResult(object error);
    public BadRequestObjectResult(ModelStateDictionary modelState);
}
public class Microsoft.AspNetCore.Mvc.BadRequestResult : StatusCodeResult {
}
[AttributeUsageAttribute("2052")]
public class Microsoft.AspNetCore.Mvc.BindAttribute : Attribute {
    private static Func`2<ModelMetadata, bool> _default;
    private Func`2<ModelMetadata, bool> _propertyFilter;
    [CompilerGeneratedAttribute]
private String[] <Include>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Prefix>k__BackingField;
    public String[] Include { get; }
    public string Prefix { get; public set; }
    private string Microsoft.AspNetCore.Mvc.ModelBinding.IModelNameProvider.Name { get; }
    public Func`2<ModelMetadata, bool> PropertyFilter { get; }
    public BindAttribute(String[] include);
    private static BindAttribute();
    [CompilerGeneratedAttribute]
public String[] get_Include();
    [CompilerGeneratedAttribute]
public string get_Prefix();
    [CompilerGeneratedAttribute]
public void set_Prefix(string value);
    private sealed virtual override string Microsoft.AspNetCore.Mvc.ModelBinding.IModelNameProvider.get_Name();
    public sealed virtual Func`2<ModelMetadata, bool> get_PropertyFilter();
    private static IEnumerable`1<string> SplitString(string original);
    [CompilerGeneratedAttribute]
private bool <get_PropertyFilter>b__13_0(ModelMetadata m);
}
[AttributeUsageAttribute("4")]
public class Microsoft.AspNetCore.Mvc.BindPropertiesAttribute : Attribute {
    [CompilerGeneratedAttribute]
private bool <SupportsGet>k__BackingField;
    public bool SupportsGet { get; public set; }
    [CompilerGeneratedAttribute]
public bool get_SupportsGet();
    [CompilerGeneratedAttribute]
public void set_SupportsGet(bool value);
}
[AttributeUsageAttribute("128")]
public class Microsoft.AspNetCore.Mvc.BindPropertyAttribute : Attribute {
    private static Func`2<ActionContext, bool> _supportsAllRequests;
    private static Func`2<ActionContext, bool> _supportsNonGetRequests;
    private BindingSource _bindingSource;
    [CompilerGeneratedAttribute]
private bool <SupportsGet>k__BackingField;
    [CompilerGeneratedAttribute]
private Type <BinderType>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    public bool SupportsGet { get; public set; }
    public Type BinderType { get; public set; }
    public BindingSource BindingSource { get; protected set; }
    public string Name { get; public set; }
    private Func`2<ActionContext, bool> Microsoft.AspNetCore.Mvc.ModelBinding.IRequestPredicateProvider.RequestPredicate { get; }
    private static BindPropertyAttribute();
    [CompilerGeneratedAttribute]
public bool get_SupportsGet();
    [CompilerGeneratedAttribute]
public void set_SupportsGet(bool value);
    [CompilerGeneratedAttribute]
public sealed virtual Type get_BinderType();
    [CompilerGeneratedAttribute]
public void set_BinderType(Type value);
    public virtual BindingSource get_BindingSource();
    protected virtual void set_BindingSource(BindingSource value);
    [CompilerGeneratedAttribute]
public sealed virtual string get_Name();
    [CompilerGeneratedAttribute]
public void set_Name(string value);
    private sealed virtual override Func`2<ActionContext, bool> Microsoft.AspNetCore.Mvc.ModelBinding.IRequestPredicateProvider.get_RequestPredicate();
    private static bool IsNonGetRequest(ActionContext context);
}
public class Microsoft.AspNetCore.Mvc.CacheProfile : object {
    [CompilerGeneratedAttribute]
private Nullable`1<int> <Duration>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<ResponseCacheLocation> <Location>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<bool> <NoStore>k__BackingField;
    [CompilerGeneratedAttribute]
private string <VaryByHeader>k__BackingField;
    [CompilerGeneratedAttribute]
private String[] <VaryByQueryKeys>k__BackingField;
    public Nullable`1<int> Duration { get; public set; }
    public Nullable`1<ResponseCacheLocation> Location { get; public set; }
    public Nullable`1<bool> NoStore { get; public set; }
    public string VaryByHeader { get; public set; }
    public String[] VaryByQueryKeys { get; public set; }
    [CompilerGeneratedAttribute]
public Nullable`1<int> get_Duration();
    [CompilerGeneratedAttribute]
public void set_Duration(Nullable`1<int> value);
    [CompilerGeneratedAttribute]
public Nullable`1<ResponseCacheLocation> get_Location();
    [CompilerGeneratedAttribute]
public void set_Location(Nullable`1<ResponseCacheLocation> value);
    [CompilerGeneratedAttribute]
public Nullable`1<bool> get_NoStore();
    [CompilerGeneratedAttribute]
public void set_NoStore(Nullable`1<bool> value);
    [CompilerGeneratedAttribute]
public string get_VaryByHeader();
    [CompilerGeneratedAttribute]
public void set_VaryByHeader(string value);
    [CompilerGeneratedAttribute]
public String[] get_VaryByQueryKeys();
    [CompilerGeneratedAttribute]
public void set_VaryByQueryKeys(String[] value);
}
public class Microsoft.AspNetCore.Mvc.ChallengeResult : ActionResult {
    [CompilerGeneratedAttribute]
private IList`1<string> <AuthenticationSchemes>k__BackingField;
    [CompilerGeneratedAttribute]
private AuthenticationProperties <Properties>k__BackingField;
    public IList`1<string> AuthenticationSchemes { get; public set; }
    public AuthenticationProperties Properties { get; public set; }
    public ChallengeResult(string authenticationScheme);
    public ChallengeResult(IList`1<string> authenticationSchemes);
    public ChallengeResult(AuthenticationProperties properties);
    public ChallengeResult(string authenticationScheme, AuthenticationProperties properties);
    public ChallengeResult(IList`1<string> authenticationSchemes, AuthenticationProperties properties);
    [CompilerGeneratedAttribute]
public IList`1<string> get_AuthenticationSchemes();
    [CompilerGeneratedAttribute]
public void set_AuthenticationSchemes(IList`1<string> value);
    [CompilerGeneratedAttribute]
public AuthenticationProperties get_Properties();
    [CompilerGeneratedAttribute]
public void set_Properties(AuthenticationProperties value);
    [AsyncStateMachineAttribute("Microsoft.AspNetCore.Mvc.ChallengeResult/<ExecuteResultAsync>d__14")]
public virtual Task ExecuteResultAsync(ActionContext context);
}
public enum Microsoft.AspNetCore.Mvc.CompatibilityVersion : Enum {
    public int value__;
    public static CompatibilityVersion Version_2_0;
    public static CompatibilityVersion Version_2_1;
    public static CompatibilityVersion Latest;
}
public class Microsoft.AspNetCore.Mvc.ConflictObjectResult : ObjectResult {
    public ConflictObjectResult(object error);
    public ConflictObjectResult(ModelStateDictionary modelState);
}
public class Microsoft.AspNetCore.Mvc.ConflictResult : StatusCodeResult {
}
[AttributeUsageAttribute("68")]
public class Microsoft.AspNetCore.Mvc.ConsumesAttribute : Attribute {
    public static int ConsumesActionConstraintOrder;
    [CompilerGeneratedAttribute]
private MediaTypeCollection <ContentTypes>k__BackingField;
    private int Microsoft.AspNetCore.Mvc.ActionConstraints.IActionConstraint.Order { get; }
    public MediaTypeCollection ContentTypes { get; public set; }
    public ConsumesAttribute(string contentType, String[] otherContentTypes);
    private static ConsumesAttribute();
    private sealed virtual override int Microsoft.AspNetCore.Mvc.ActionConstraints.IActionConstraint.get_Order();
    [CompilerGeneratedAttribute]
public MediaTypeCollection get_ContentTypes();
    [CompilerGeneratedAttribute]
public void set_ContentTypes(MediaTypeCollection value);
    public sealed virtual void OnResourceExecuting(ResourceExecutingContext context);
    private bool IsSubsetOfAnyContentType(string requestMediaType);
    public sealed virtual void OnResourceExecuted(ResourceExecutedContext context);
    public sealed virtual bool Accept(ActionConstraintContext context);
    private bool IsApplicable(ActionDescriptor actionDescriptor);
    private MediaTypeCollection GetContentTypes(string firstArg, String[] args);
    public sealed virtual void SetContentTypes(MediaTypeCollection contentTypes);
}
public class Microsoft.AspNetCore.Mvc.ContentResult : ActionResult {
    [CompilerGeneratedAttribute]
private string <Content>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ContentType>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<int> <StatusCode>k__BackingField;
    public string Content { get; public set; }
    public string ContentType { get; public set; }
    public Nullable`1<int> StatusCode { get; public set; }
    [CompilerGeneratedAttribute]
public string get_Content();
    [CompilerGeneratedAttribute]
public void set_Content(string value);
    [CompilerGeneratedAttribute]
public string get_ContentType();
    [CompilerGeneratedAttribute]
public void set_ContentType(string value);
    [CompilerGeneratedAttribute]
public Nullable`1<int> get_StatusCode();
    [CompilerGeneratedAttribute]
public void set_StatusCode(Nullable`1<int> value);
    public virtual Task ExecuteResultAsync(ActionContext context);
}
[AttributeUsageAttribute("4")]
public class Microsoft.AspNetCore.Mvc.ControllerAttribute : Attribute {
}
[ControllerAttribute]
public abstract class Microsoft.AspNetCore.Mvc.ControllerBase : object {
    private ControllerContext _controllerContext;
    private IModelMetadataProvider _metadataProvider;
    private IModelBinderFactory _modelBinderFactory;
    private IObjectModelValidator _objectValidator;
    private IUrlHelper _url;
    public HttpContext HttpContext { get; }
    public HttpRequest Request { get; }
    public HttpResponse Response { get; }
    public RouteData RouteData { get; }
    public ModelStateDictionary ModelState { get; }
    [ControllerContextAttribute]
public ControllerContext ControllerContext { get; public set; }
    public IModelMetadataProvider MetadataProvider { get; public set; }
    public IModelBinderFactory ModelBinderFactory { get; public set; }
    public IUrlHelper Url { get; public set; }
    public IObjectModelValidator ObjectValidator { get; public set; }
    public ClaimsPrincipal User { get; }
    public HttpContext get_HttpContext();
    public HttpRequest get_Request();
    public HttpResponse get_Response();
    public RouteData get_RouteData();
    public ModelStateDictionary get_ModelState();
    public ControllerContext get_ControllerContext();
    public void set_ControllerContext(ControllerContext value);
    public IModelMetadataProvider get_MetadataProvider();
    public void set_MetadataProvider(IModelMetadataProvider value);
    public IModelBinderFactory get_ModelBinderFactory();
    public void set_ModelBinderFactory(IModelBinderFactory value);
    public IUrlHelper get_Url();
    public void set_Url(IUrlHelper value);
    public IObjectModelValidator get_ObjectValidator();
    public void set_ObjectValidator(IObjectModelValidator value);
    public ClaimsPrincipal get_User();
    [NonActionAttribute]
public virtual StatusCodeResult StatusCode(int statusCode);
    [NonActionAttribute]
public virtual ObjectResult StatusCode(int statusCode, object value);
    [NonActionAttribute]
public virtual ContentResult Content(string content);
    [NonActionAttribute]
public virtual ContentResult Content(string content, string contentType);
    [NonActionAttribute]
public virtual ContentResult Content(string content, string contentType, Encoding contentEncoding);
    [NonActionAttribute]
public virtual ContentResult Content(string content, MediaTypeHeaderValue contentType);
    [NonActionAttribute]
public virtual NoContentResult NoContent();
    [NonActionAttribute]
public virtual OkResult Ok();
    [NonActionAttribute]
public virtual OkObjectResult Ok(object value);
    [NonActionAttribute]
public virtual RedirectResult Redirect(string url);
    [NonActionAttribute]
public virtual RedirectResult RedirectPermanent(string url);
    [NonActionAttribute]
public virtual RedirectResult RedirectPreserveMethod(string url);
    [NonActionAttribute]
public virtual RedirectResult RedirectPermanentPreserveMethod(string url);
    [NonActionAttribute]
public virtual LocalRedirectResult LocalRedirect(string localUrl);
    [NonActionAttribute]
public virtual LocalRedirectResult LocalRedirectPermanent(string localUrl);
    [NonActionAttribute]
public virtual LocalRedirectResult LocalRedirectPreserveMethod(string localUrl);
    [NonActionAttribute]
public virtual LocalRedirectResult LocalRedirectPermanentPreserveMethod(string localUrl);
    [NonActionAttribute]
public virtual RedirectToActionResult RedirectToAction();
    [NonActionAttribute]
public virtual RedirectToActionResult RedirectToAction(string actionName);
    [NonActionAttribute]
public virtual RedirectToActionResult RedirectToAction(string actionName, object routeValues);
    [NonActionAttribute]
public virtual RedirectToActionResult RedirectToAction(string actionName, string controllerName);
    [NonActionAttribute]
public virtual RedirectToActionResult RedirectToAction(string actionName, string controllerName, object routeValues);
    [NonActionAttribute]
public virtual RedirectToActionResult RedirectToAction(string actionName, string controllerName, string fragment);
    [NonActionAttribute]
public virtual RedirectToActionResult RedirectToAction(string actionName, string controllerName, object routeValues, string fragment);
    [NonActionAttribute]
public virtual RedirectToActionResult RedirectToActionPreserveMethod(string actionName, string controllerName, object routeValues, string fragment);
    [NonActionAttribute]
public virtual RedirectToActionResult RedirectToActionPermanent(string actionName);
    [NonActionAttribute]
public virtual RedirectToActionResult RedirectToActionPermanent(string actionName, object routeValues);
    [NonActionAttribute]
public virtual RedirectToActionResult RedirectToActionPermanent(string actionName, string controllerName);
    [NonActionAttribute]
public virtual RedirectToActionResult RedirectToActionPermanent(string actionName, string controllerName, string fragment);
    [NonActionAttribute]
public virtual RedirectToActionResult RedirectToActionPermanent(string actionName, string controllerName, object routeValues);
    [NonActionAttribute]
public virtual RedirectToActionResult RedirectToActionPermanent(string actionName, string controllerName, object routeValues, string fragment);
    [NonActionAttribute]
public virtual RedirectToActionResult RedirectToActionPermanentPreserveMethod(string actionName, string controllerName, object routeValues, string fragment);
    [NonActionAttribute]
public virtual RedirectToRouteResult RedirectToRoute(string routeName);
    [NonActionAttribute]
public virtual RedirectToRouteResult RedirectToRoute(object routeValues);
    [NonActionAttribute]
public virtual RedirectToRouteResult RedirectToRoute(string routeName, object routeValues);
    [NonActionAttribute]
public virtual RedirectToRouteResult RedirectToRoute(string routeName, string fragment);
    [NonActionAttribute]
public virtual RedirectToRouteResult RedirectToRoute(string routeName, object routeValues, string fragment);
    [NonActionAttribute]
public virtual RedirectToRouteResult RedirectToRoutePreserveMethod(string routeName, object routeValues, string fragment);
    [NonActionAttribute]
public virtual RedirectToRouteResult RedirectToRoutePermanent(string routeName);
    [NonActionAttribute]
public virtual RedirectToRouteResult RedirectToRoutePermanent(object routeValues);
    [NonActionAttribute]
public virtual RedirectToRouteResult RedirectToRoutePermanent(string routeName, object routeValues);
    [NonActionAttribute]
public virtual RedirectToRouteResult RedirectToRoutePermanent(string routeName, string fragment);
    [NonActionAttribute]
public virtual RedirectToRouteResult RedirectToRoutePermanent(string routeName, object routeValues, string fragment);
    [NonActionAttribute]
public virtual RedirectToRouteResult RedirectToRoutePermanentPreserveMethod(string routeName, object routeValues, string fragment);
    [NonActionAttribute]
public virtual RedirectToPageResult RedirectToPage(string pageName);
    [NonActionAttribute]
public virtual RedirectToPageResult RedirectToPage(string pageName, object routeValues);
    [NonActionAttribute]
public virtual RedirectToPageResult RedirectToPage(string pageName, string pageHandler);
    [NonActionAttribute]
public virtual RedirectToPageResult RedirectToPage(string pageName, string pageHandler, object routeValues);
    [NonActionAttribute]
public virtual RedirectToPageResult RedirectToPage(string pageName, string pageHandler, string fragment);
    [NonActionAttribute]
public virtual RedirectToPageResult RedirectToPage(string pageName, string pageHandler, object routeValues, string fragment);
    [NonActionAttribute]
public virtual RedirectToPageResult RedirectToPagePermanent(string pageName);
    [NonActionAttribute]
public virtual RedirectToPageResult RedirectToPagePermanent(string pageName, object routeValues);
    [NonActionAttribute]
public virtual RedirectToPageResult RedirectToPagePermanent(string pageName, string pageHandler);
    [NonActionAttribute]
public virtual RedirectToPageResult RedirectToPagePermanent(string pageName, string pageHandler, string fragment);
    [NonActionAttribute]
public virtual RedirectToPageResult RedirectToPagePermanent(string pageName, string pageHandler, object routeValues, string fragment);
    [NonActionAttribute]
public virtual RedirectToPageResult RedirectToPagePreserveMethod(string pageName, string pageHandler, object routeValues, string fragment);
    [NonActionAttribute]
public virtual RedirectToPageResult RedirectToPagePermanentPreserveMethod(string pageName, string pageHandler, object routeValues, string fragment);
    [NonActionAttribute]
public virtual FileContentResult File(Byte[] fileContents, string contentType);
    [NonActionAttribute]
public virtual FileContentResult File(Byte[] fileContents, string contentType, bool enableRangeProcessing);
    [NonActionAttribute]
public virtual FileContentResult File(Byte[] fileContents, string contentType, string fileDownloadName);
    [NonActionAttribute]
public virtual FileContentResult File(Byte[] fileContents, string contentType, string fileDownloadName, bool enableRangeProcessing);
    [NonActionAttribute]
public virtual FileContentResult File(Byte[] fileContents, string contentType, Nullable`1<DateTimeOffset> lastModified, EntityTagHeaderValue entityTag);
    [NonActionAttribute]
public virtual FileContentResult File(Byte[] fileContents, string contentType, Nullable`1<DateTimeOffset> lastModified, EntityTagHeaderValue entityTag, bool enableRangeProcessing);
    [NonActionAttribute]
public virtual FileContentResult File(Byte[] fileContents, string contentType, string fileDownloadName, Nullable`1<DateTimeOffset> lastModified, EntityTagHeaderValue entityTag);
    [NonActionAttribute]
public virtual FileContentResult File(Byte[] fileContents, string contentType, string fileDownloadName, Nullable`1<DateTimeOffset> lastModified, EntityTagHeaderValue entityTag, bool enableRangeProcessing);
    [NonActionAttribute]
public virtual FileStreamResult File(Stream fileStream, string contentType);
    [NonActionAttribute]
public virtual FileStreamResult File(Stream fileStream, string contentType, bool enableRangeProcessing);
    [NonActionAttribute]
public virtual FileStreamResult File(Stream fileStream, string contentType, string fileDownloadName);
    [NonActionAttribute]
public virtual FileStreamResult File(Stream fileStream, string contentType, string fileDownloadName, bool enableRangeProcessing);
    [NonActionAttribute]
public virtual FileStreamResult File(Stream fileStream, string contentType, Nullable`1<DateTimeOffset> lastModified, EntityTagHeaderValue entityTag);
    [NonActionAttribute]
public virtual FileStreamResult File(Stream fileStream, string contentType, Nullable`1<DateTimeOffset> lastModified, EntityTagHeaderValue entityTag, bool enableRangeProcessing);
    [NonActionAttribute]
public virtual FileStreamResult File(Stream fileStream, string contentType, string fileDownloadName, Nullable`1<DateTimeOffset> lastModified, EntityTagHeaderValue entityTag);
    [NonActionAttribute]
public virtual FileStreamResult File(Stream fileStream, string contentType, string fileDownloadName, Nullable`1<DateTimeOffset> lastModified, EntityTagHeaderValue entityTag, bool enableRangeProcessing);
    [NonActionAttribute]
public virtual VirtualFileResult File(string virtualPath, string contentType);
    [NonActionAttribute]
public virtual VirtualFileResult File(string virtualPath, string contentType, bool enableRangeProcessing);
    [NonActionAttribute]
public virtual VirtualFileResult File(string virtualPath, string contentType, string fileDownloadName);
    [NonActionAttribute]
public virtual VirtualFileResult File(string virtualPath, string contentType, string fileDownloadName, bool enableRangeProcessing);
    [NonActionAttribute]
public virtual VirtualFileResult File(string virtualPath, string contentType, Nullable`1<DateTimeOffset> lastModified, EntityTagHeaderValue entityTag);
    [NonActionAttribute]
public virtual VirtualFileResult File(string virtualPath, string contentType, Nullable`1<DateTimeOffset> lastModified, EntityTagHeaderValue entityTag, bool enableRangeProcessing);
    [NonActionAttribute]
public virtual VirtualFileResult File(string virtualPath, string contentType, string fileDownloadName, Nullable`1<DateTimeOffset> lastModified, EntityTagHeaderValue entityTag);
    [NonActionAttribute]
public virtual VirtualFileResult File(string virtualPath, string contentType, string fileDownloadName, Nullable`1<DateTimeOffset> lastModified, EntityTagHeaderValue entityTag, bool enableRangeProcessing);
    [NonActionAttribute]
public virtual PhysicalFileResult PhysicalFile(string physicalPath, string contentType);
    [NonActionAttribute]
public virtual PhysicalFileResult PhysicalFile(string physicalPath, string contentType, bool enableRangeProcessing);
    [NonActionAttribute]
public virtual PhysicalFileResult PhysicalFile(string physicalPath, string contentType, string fileDownloadName);
    [NonActionAttribute]
public virtual PhysicalFileResult PhysicalFile(string physicalPath, string contentType, string fileDownloadName, bool enableRangeProcessing);
    [NonActionAttribute]
public virtual PhysicalFileResult PhysicalFile(string physicalPath, string contentType, Nullable`1<DateTimeOffset> lastModified, EntityTagHeaderValue entityTag);
    [NonActionAttribute]
public virtual PhysicalFileResult PhysicalFile(string physicalPath, string contentType, Nullable`1<DateTimeOffset> lastModified, EntityTagHeaderValue entityTag, bool enableRangeProcessing);
    [NonActionAttribute]
public virtual PhysicalFileResult PhysicalFile(string physicalPath, string contentType, string fileDownloadName, Nullable`1<DateTimeOffset> lastModified, EntityTagHeaderValue entityTag);
    [NonActionAttribute]
public virtual PhysicalFileResult PhysicalFile(string physicalPath, string contentType, string fileDownloadName, Nullable`1<DateTimeOffset> lastModified, EntityTagHeaderValue entityTag, bool enableRangeProcessing);
    [NonActionAttribute]
public virtual UnauthorizedResult Unauthorized();
    [NonActionAttribute]
public virtual NotFoundResult NotFound();
    [NonActionAttribute]
public virtual NotFoundObjectResult NotFound(object value);
    [NonActionAttribute]
public virtual BadRequestResult BadRequest();
    [NonActionAttribute]
public virtual BadRequestObjectResult BadRequest(object error);
    [NonActionAttribute]
public virtual BadRequestObjectResult BadRequest(ModelStateDictionary modelState);
    [NonActionAttribute]
public virtual UnprocessableEntityResult UnprocessableEntity();
    [NonActionAttribute]
public virtual UnprocessableEntityObjectResult UnprocessableEntity(object error);
    [NonActionAttribute]
public virtual UnprocessableEntityObjectResult UnprocessableEntity(ModelStateDictionary modelState);
    [NonActionAttribute]
public virtual ConflictResult Conflict();
    [NonActionAttribute]
public virtual ConflictObjectResult Conflict(object error);
    [NonActionAttribute]
public virtual ConflictObjectResult Conflict(ModelStateDictionary modelState);
    [NonActionAttribute]
public virtual ActionResult ValidationProblem(ValidationProblemDetails descriptor);
    [NonActionAttribute]
public virtual ActionResult ValidationProblem(ModelStateDictionary modelStateDictionary);
    [NonActionAttribute]
public virtual ActionResult ValidationProblem();
    [NonActionAttribute]
public virtual CreatedResult Created(string uri, object value);
    [NonActionAttribute]
public virtual CreatedResult Created(Uri uri, object value);
    [NonActionAttribute]
public virtual CreatedAtActionResult CreatedAtAction(string actionName, object value);
    [NonActionAttribute]
public virtual CreatedAtActionResult CreatedAtAction(string actionName, object routeValues, object value);
    [NonActionAttribute]
public virtual CreatedAtActionResult CreatedAtAction(string actionName, string controllerName, object routeValues, object value);
    [NonActionAttribute]
public virtual CreatedAtRouteResult CreatedAtRoute(string routeName, object value);
    [NonActionAttribute]
public virtual CreatedAtRouteResult CreatedAtRoute(object routeValues, object value);
    [NonActionAttribute]
public virtual CreatedAtRouteResult CreatedAtRoute(string routeName, object routeValues, object value);
    [NonActionAttribute]
public virtual AcceptedResult Accepted();
    [NonActionAttribute]
public virtual AcceptedResult Accepted(object value);
    [NonActionAttribute]
public virtual AcceptedResult Accepted(Uri uri);
    [NonActionAttribute]
public virtual AcceptedResult Accepted(string uri);
    [NonActionAttribute]
public virtual AcceptedResult Accepted(string uri, object value);
    [NonActionAttribute]
public virtual AcceptedResult Accepted(Uri uri, object value);
    [NonActionAttribute]
public virtual AcceptedAtActionResult AcceptedAtAction(string actionName);
    [NonActionAttribute]
public virtual AcceptedAtActionResult AcceptedAtAction(string actionName, string controllerName);
    [NonActionAttribute]
public virtual AcceptedAtActionResult AcceptedAtAction(string actionName, object value);
    [NonActionAttribute]
public virtual AcceptedAtActionResult AcceptedAtAction(string actionName, string controllerName, object routeValues);
    [NonActionAttribute]
public virtual AcceptedAtActionResult AcceptedAtAction(string actionName, object routeValues, object value);
    [NonActionAttribute]
public virtual AcceptedAtActionResult AcceptedAtAction(string actionName, string controllerName, object routeValues, object value);
    [NonActionAttribute]
public virtual AcceptedAtRouteResult AcceptedAtRoute(object routeValues);
    [NonActionAttribute]
public virtual AcceptedAtRouteResult AcceptedAtRoute(string routeName);
    [NonActionAttribute]
public virtual AcceptedAtRouteResult AcceptedAtRoute(string routeName, object routeValues);
    [NonActionAttribute]
public virtual AcceptedAtRouteResult AcceptedAtRoute(object routeValues, object value);
    [NonActionAttribute]
public virtual AcceptedAtRouteResult AcceptedAtRoute(string routeName, object routeValues, object value);
    [NonActionAttribute]
public virtual ChallengeResult Challenge();
    [NonActionAttribute]
public virtual ChallengeResult Challenge(String[] authenticationSchemes);
    [NonActionAttribute]
public virtual ChallengeResult Challenge(AuthenticationProperties properties);
    [NonActionAttribute]
public virtual ChallengeResult Challenge(AuthenticationProperties properties, String[] authenticationSchemes);
    [NonActionAttribute]
public virtual ForbidResult Forbid();
    [NonActionAttribute]
public virtual ForbidResult Forbid(String[] authenticationSchemes);
    [NonActionAttribute]
public virtual ForbidResult Forbid(AuthenticationProperties properties);
    [NonActionAttribute]
public virtual ForbidResult Forbid(AuthenticationProperties properties, String[] authenticationSchemes);
    [NonActionAttribute]
public virtual SignInResult SignIn(ClaimsPrincipal principal, string authenticationScheme);
    [NonActionAttribute]
public virtual SignInResult SignIn(ClaimsPrincipal principal, AuthenticationProperties properties, string authenticationScheme);
    [NonActionAttribute]
public virtual SignOutResult SignOut(String[] authenticationSchemes);
    [NonActionAttribute]
public virtual SignOutResult SignOut(AuthenticationProperties properties, String[] authenticationSchemes);
    [NonActionAttribute]
public virtual Task`1<bool> TryUpdateModelAsync(TModel model);
    [AsyncStateMachineAttribute("Microsoft.AspNetCore.Mvc.ControllerBase/<TryUpdateModelAsync>d__174`1")]
[NonActionAttribute]
public virtual Task`1<bool> TryUpdateModelAsync(TModel model, string prefix);
    [NonActionAttribute]
public virtual Task`1<bool> TryUpdateModelAsync(TModel model, string prefix, IValueProvider valueProvider);
    [AsyncStateMachineAttribute("Microsoft.AspNetCore.Mvc.ControllerBase/<TryUpdateModelAsync>d__176`1")]
[NonActionAttribute]
public Task`1<bool> TryUpdateModelAsync(TModel model, string prefix, Expression`1[] includeExpressions);
    [AsyncStateMachineAttribute("Microsoft.AspNetCore.Mvc.ControllerBase/<TryUpdateModelAsync>d__177`1")]
[NonActionAttribute]
public Task`1<bool> TryUpdateModelAsync(TModel model, string prefix, Func`2<ModelMetadata, bool> propertyFilter);
    [NonActionAttribute]
public Task`1<bool> TryUpdateModelAsync(TModel model, string prefix, IValueProvider valueProvider, Expression`1[] includeExpressions);
    [NonActionAttribute]
public Task`1<bool> TryUpdateModelAsync(TModel model, string prefix, IValueProvider valueProvider, Func`2<ModelMetadata, bool> propertyFilter);
    [AsyncStateMachineAttribute("Microsoft.AspNetCore.Mvc.ControllerBase/<TryUpdateModelAsync>d__180")]
[NonActionAttribute]
public virtual Task`1<bool> TryUpdateModelAsync(object model, Type modelType, string prefix);
    [NonActionAttribute]
public Task`1<bool> TryUpdateModelAsync(object model, Type modelType, string prefix, IValueProvider valueProvider, Func`2<ModelMetadata, bool> propertyFilter);
    [NonActionAttribute]
public virtual bool TryValidateModel(object model);
    [NonActionAttribute]
public virtual bool TryValidateModel(object model, string prefix);
}
public class Microsoft.AspNetCore.Mvc.ControllerContext : ActionContext {
    private IList`1<IValueProviderFactory> _valueProviderFactories;
    public ControllerActionDescriptor ActionDescriptor { get; public set; }
    public IList`1<IValueProviderFactory> ValueProviderFactories { get; public set; }
    public ControllerContext(ActionContext context);
    public ControllerActionDescriptor get_ActionDescriptor();
    public void set_ActionDescriptor(ControllerActionDescriptor value);
    public virtual IList`1<IValueProviderFactory> get_ValueProviderFactories();
    public virtual void set_ValueProviderFactories(IList`1<IValueProviderFactory> value);
}
[AttributeUsageAttribute("128")]
public class Microsoft.AspNetCore.Mvc.ControllerContextAttribute : Attribute {
}
[DebuggerDisplayAttribute("{DisplayName}")]
public class Microsoft.AspNetCore.Mvc.Controllers.ControllerActionDescriptor : ActionDescriptor {
    [CompilerGeneratedAttribute]
private string <ControllerName>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ActionName>k__BackingField;
    [CompilerGeneratedAttribute]
private MethodInfo <MethodInfo>k__BackingField;
    [CompilerGeneratedAttribute]
private TypeInfo <ControllerTypeInfo>k__BackingField;
    public string ControllerName { get; public set; }
    public string ActionName { get; public set; }
    public MethodInfo MethodInfo { get; public set; }
    public TypeInfo ControllerTypeInfo { get; public set; }
    public string DisplayName { get; public set; }
    [CompilerGeneratedAttribute]
public string get_ControllerName();
    [CompilerGeneratedAttribute]
public void set_ControllerName(string value);
    [CompilerGeneratedAttribute]
public virtual string get_ActionName();
    [CompilerGeneratedAttribute]
public virtual void set_ActionName(string value);
    [CompilerGeneratedAttribute]
public MethodInfo get_MethodInfo();
    [CompilerGeneratedAttribute]
public void set_MethodInfo(MethodInfo value);
    [CompilerGeneratedAttribute]
public TypeInfo get_ControllerTypeInfo();
    [CompilerGeneratedAttribute]
public void set_ControllerTypeInfo(TypeInfo value);
    public virtual string get_DisplayName();
    public virtual void set_DisplayName(string value);
}
public class Microsoft.AspNetCore.Mvc.Controllers.ControllerActivatorProvider : object {
    private static Action`2<ControllerContext, object> _dispose;
    private Func`2<ControllerContext, object> _controllerActivatorCreate;
    private Action`2<ControllerContext, object> _controllerActivatorRelease;
    public ControllerActivatorProvider(IControllerActivator controllerActivator);
    private static ControllerActivatorProvider();
    public sealed virtual Func`2<ControllerContext, object> CreateActivator(ControllerActionDescriptor descriptor);
    public sealed virtual Action`2<ControllerContext, object> CreateReleaser(ControllerActionDescriptor descriptor);
    private static void Dispose(ControllerContext context, object controller);
}
public class Microsoft.AspNetCore.Mvc.Controllers.ControllerBoundPropertyDescriptor : ParameterDescriptor {
    [CompilerGeneratedAttribute]
private PropertyInfo <PropertyInfo>k__BackingField;
    public PropertyInfo PropertyInfo { get; public set; }
    [CompilerGeneratedAttribute]
public sealed virtual PropertyInfo get_PropertyInfo();
    [CompilerGeneratedAttribute]
public void set_PropertyInfo(PropertyInfo value);
}
public class Microsoft.AspNetCore.Mvc.Controllers.ControllerFactoryProvider : object {
    private IControllerActivatorProvider _activatorProvider;
    private Func`2<ControllerContext, object> _factoryCreateController;
    private Action`2<ControllerContext, object> _factoryReleaseController;
    private IControllerPropertyActivator[] _propertyActivators;
    public ControllerFactoryProvider(IControllerActivatorProvider activatorProvider, IControllerFactory controllerFactory, IEnumerable`1<IControllerPropertyActivator> propertyActivators);
    public sealed virtual Func`2<ControllerContext, object> CreateControllerFactory(ControllerActionDescriptor descriptor);
    public sealed virtual Action`2<ControllerContext, object> CreateControllerReleaser(ControllerActionDescriptor descriptor);
    private Action`2[] GetPropertiesToActivate(ControllerActionDescriptor actionDescriptor);
}
public class Microsoft.AspNetCore.Mvc.Controllers.ControllerFeature : object {
    [CompilerGeneratedAttribute]
private IList`1<TypeInfo> <Controllers>k__BackingField;
    public IList`1<TypeInfo> Controllers { get; }
    [CompilerGeneratedAttribute]
public IList`1<TypeInfo> get_Controllers();
}
public class Microsoft.AspNetCore.Mvc.Controllers.ControllerFeatureProvider : object {
    private static string ControllerTypeNameSuffix;
    public sealed virtual void PopulateFeature(IEnumerable`1<ApplicationPart> parts, ControllerFeature feature);
    protected virtual bool IsController(TypeInfo typeInfo);
}
public class Microsoft.AspNetCore.Mvc.Controllers.ControllerParameterDescriptor : ParameterDescriptor {
    [CompilerGeneratedAttribute]
private ParameterInfo <ParameterInfo>k__BackingField;
    public ParameterInfo ParameterInfo { get; public set; }
    [CompilerGeneratedAttribute]
public sealed virtual ParameterInfo get_ParameterInfo();
    [CompilerGeneratedAttribute]
public void set_ParameterInfo(ParameterInfo value);
}
public class Microsoft.AspNetCore.Mvc.Controllers.DefaultControllerActivator : object {
    private ITypeActivatorCache _typeActivatorCache;
    public DefaultControllerActivator(ITypeActivatorCache typeActivatorCache);
    public virtual object Create(ControllerContext controllerContext);
    public virtual void Release(ControllerContext context, object controller);
}
public class Microsoft.AspNetCore.Mvc.Controllers.DefaultControllerFactory : object {
    private IControllerActivator _controllerActivator;
    private IControllerPropertyActivator[] _propertyActivators;
    protected IControllerActivator ControllerActivator { get; }
    public DefaultControllerFactory(IControllerActivator controllerActivator, IEnumerable`1<IControllerPropertyActivator> propertyActivators);
    protected IControllerActivator get_ControllerActivator();
    public virtual object CreateController(ControllerContext context);
    public virtual void ReleaseController(ControllerContext context, object controller);
}
public interface Microsoft.AspNetCore.Mvc.Controllers.IControllerActivator {
    public abstract virtual object Create(ControllerContext context);
    public abstract virtual void Release(ControllerContext context, object controller);
}
public interface Microsoft.AspNetCore.Mvc.Controllers.IControllerActivatorProvider {
    public abstract virtual Func`2<ControllerContext, object> CreateActivator(ControllerActionDescriptor descriptor);
    public abstract virtual Action`2<ControllerContext, object> CreateReleaser(ControllerActionDescriptor descriptor);
}
public interface Microsoft.AspNetCore.Mvc.Controllers.IControllerFactory {
    public abstract virtual object CreateController(ControllerContext context);
    public abstract virtual void ReleaseController(ControllerContext context, object controller);
}
public interface Microsoft.AspNetCore.Mvc.Controllers.IControllerFactoryProvider {
    public abstract virtual Func`2<ControllerContext, object> CreateControllerFactory(ControllerActionDescriptor descriptor);
    public abstract virtual Action`2<ControllerContext, object> CreateControllerReleaser(ControllerActionDescriptor descriptor);
}
public class Microsoft.AspNetCore.Mvc.Controllers.ServiceBasedControllerActivator : object {
    public sealed virtual object Create(ControllerContext actionContext);
    public virtual void Release(ControllerContext context, object controller);
}
internal static class Microsoft.AspNetCore.Mvc.Core.Resources : object {
    private static ResourceManager _resourceManager;
    internal static string MatchAllContentTypeIsNotAllowed { get; }
    internal static string ObjectResult_MatchAllContentType { get; }
    internal static string ActionExecutor_WrappedTaskInstance { get; }
    internal static string ActionExecutor_UnexpectedTaskInstance { get; }
    internal static string ActionInvokerFactory_CouldNotCreateInvoker { get; }
    internal static string ActionDescriptorMustBeBasedOnControllerAction { get; }
    internal static string ArgumentCannotBeNullOrEmpty { get; }
    internal static string PropertyOfTypeCannotBeNull { get; }
    internal static string TypeMethodMustReturnNotNullValue { get; }
    internal static string ModelBinding_NullValueNotValid { get; }
    internal static string Invalid_IncludePropertyExpression { get; }
    internal static string NoRoutesMatched { get; }
    internal static string AsyncActionFilter_InvalidShortCircuit { get; }
    internal static string AsyncResultFilter_InvalidShortCircuit { get; }
    internal static string FilterFactoryAttribute_TypeMustImplementIFilter { get; }
    internal static string ActionResult_ActionReturnValueCannotBeNull { get; }
    internal static string TypeMustDeriveFromType { get; }
    internal static string InputFormatterNoEncoding { get; }
    internal static string UnsupportedContentType { get; }
    internal static string OutputFormatterNoMediaType { get; }
    internal static string AttributeRoute_AggregateErrorMessage { get; }
    internal static string AttributeRoute_CannotContainParameter { get; }
    internal static string AttributeRoute_IndividualErrorMessage { get; }
    internal static string AttributeRoute_TokenReplacement_EmptyTokenNotAllowed { get; }
    internal static string AttributeRoute_TokenReplacement_ImbalancedSquareBrackets { get; }
    internal static string AttributeRoute_TokenReplacement_InvalidSyntax { get; }
    internal static string AttributeRoute_TokenReplacement_ReplacementValueNotFound { get; }
    internal static string AttributeRoute_TokenReplacement_UnclosedToken { get; }
    internal static string AttributeRoute_TokenReplacement_UnescapedBraceInToken { get; }
    internal static string UnableToFindServices { get; }
    internal static string AttributeRoute_DuplicateNames_Item { get; }
    internal static string AttributeRoute_DuplicateNames { get; }
    internal static string AttributeRoute_AggregateErrorMessage_ErrorNumber { get; }
    internal static string AttributeRoute_MixedAttributeAndConventionallyRoutedActions_ForMethod { get; }
    internal static string AttributeRoute_MixedAttributeAndConventionallyRoutedActions_ForMethod_Item { get; }
    internal static string AttributeRoute_NullTemplateRepresentation { get; }
    internal static string DefaultActionSelector_AmbiguousActions { get; }
    internal static string FileResult_InvalidPath { get; }
    internal static string SerializableError_DefaultError { get; }
    internal static string AsyncResourceFilter_InvalidShortCircuit { get; }
    internal static string ResponseCache_SpecifyDuration { get; }
    internal static string ApiExplorer_UnsupportedAction { get; }
    internal static string FormatterMappings_NotValidMediaType { get; }
    internal static string Format_NotValid { get; }
    internal static string CacheProfileNotFound { get; }
    internal static string ModelType_WrongType { get; }
    internal static string ValueInterfaceAbstractOrOpenGenericTypesCannotBeActivated { get; }
    internal static string BinderType_MustBeIModelBinder { get; }
    internal static string BindingSource_CannotBeComposite { get; }
    internal static string BindingSource_CannotBeGreedy { get; }
    internal static string Common_PropertyNotFound { get; }
    internal static string JQueryFormValueProviderFactory_MissingClosingBracket { get; }
    internal static string KeyValuePair_BothKeyAndValueMustBePresent { get; }
    internal static string ModelBinderUtil_ModelCannotBeNull { get; }
    internal static string ModelBinderUtil_ModelInstanceIsWrong { get; }
    internal static string ModelBinderUtil_ModelMetadataCannotBeNull { get; }
    internal static string ModelBinding_MissingBindRequiredMember { get; }
    internal static string ModelBinding_MissingRequestBodyRequiredMember { get; }
    internal static string ValueProviderResult_NoConverterExists { get; }
    internal static string FileResult_PathNotRooted { get; }
    internal static string UrlNotLocal { get; }
    internal static string FormatFormatterMappings_GetMediaTypeMappingForFormat_InvalidFormat { get; }
    internal static string AcceptHeaderParser_ParseAcceptHeader_InvalidValues { get; }
    internal static string ModelState_AttemptedValueIsInvalid { get; }
    internal static string ModelState_NonPropertyAttemptedValueIsInvalid { get; }
    internal static string ModelState_UnknownValueIsInvalid { get; }
    internal static string ModelState_NonPropertyUnknownValueIsInvalid { get; }
    internal static string HtmlGeneration_ValueIsInvalid { get; }
    internal static string HtmlGeneration_ValueMustBeNumber { get; }
    internal static string HtmlGeneration_NonPropertyValueMustBeNumber { get; }
    internal static string TextInputFormatter_SupportedEncodingsMustNotBeEmpty { get; }
    internal static string TextOutputFormatter_SupportedEncodingsMustNotBeEmpty { get; }
    internal static string TextOutputFormatter_WriteResponseBodyAsyncNotSupported { get; }
    internal static string Formatter_NoMediaTypes { get; }
    internal static string CouldNotCreateIModelBinder { get; }
    internal static string InputFormattersAreRequired { get; }
    internal static string ModelBinderProvidersAreRequired { get; }
    internal static string OutputFormattersAreRequired { get; }
    internal static string MiddewareFilter_ConfigureMethodOverload { get; }
    internal static string MiddewareFilter_NoConfigureMethod { get; }
    internal static string MiddlewareFilterBuilder_NoMiddlewareFeature { get; }
    internal static string MiddlewareFilterBuilder_NullApplicationBuilder { get; }
    internal static string MiddlewareFilter_InvalidConfigureReturnType { get; }
    internal static string MiddlewareFilter_ServiceResolutionFail { get; }
    internal static string AuthorizeFilter_AuthorizationPolicyCannotBeCreated { get; }
    internal static string FormCollectionModelBinder_CannotBindToFormCollection { get; }
    internal static string VaryByQueryKeys_Requires_ResponseCachingMiddleware { get; }
    internal static string CandidateResolver_DifferentCasedReference { get; }
    internal static string MiddlewareFilterConfigurationProvider_CreateConfigureDelegate_CannotCreateType { get; }
    internal static string Argument_InvalidOffsetLength { get; }
    internal static string ComplexTypeModelBinder_NoParameterlessConstructor_ForType { get; }
    internal static string ComplexTypeModelBinder_NoParameterlessConstructor_ForProperty { get; }
    internal static string NoRoutesMatchedForPage { get; }
    internal static string UrlHelper_RelativePagePathIsNotSupported { get; }
    internal static string ValidationProblemDescription_Title { get; }
    internal static string ApiController_AttributeRouteRequired { get; }
    internal static string VirtualFileResultExecutor_NoFileProviderConfigured { get; }
    internal static string ApplicationPartFactory_InvalidFactoryType { get; }
    internal static string RelatedAssemblyAttribute_AssemblyCannotReferenceSelf { get; }
    internal static string RelatedAssemblyAttribute_CouldNotBeFound { get; }
    internal static string ApplicationAssembliesProvider_DuplicateRelatedAssembly { get; }
    internal static string ApplicationAssembliesProvider_RelatedAssemblyCannotDefineAdditional { get; }
    internal static string ComplexTypeModelBinder_NoParameterlessConstructor_ForParameter { get; }
    internal static string ApiController_MultipleBodyParametersFound { get; }
    private static Resources();
    internal static string get_MatchAllContentTypeIsNotAllowed();
    internal static string FormatMatchAllContentTypeIsNotAllowed(object p0);
    internal static string get_ObjectResult_MatchAllContentType();
    internal static string FormatObjectResult_MatchAllContentType(object p0, object p1);
    internal static string get_ActionExecutor_WrappedTaskInstance();
    internal static string FormatActionExecutor_WrappedTaskInstance(object p0, object p1, object p2);
    internal static string get_ActionExecutor_UnexpectedTaskInstance();
    internal static string FormatActionExecutor_UnexpectedTaskInstance(object p0, object p1);
    internal static string get_ActionInvokerFactory_CouldNotCreateInvoker();
    internal static string FormatActionInvokerFactory_CouldNotCreateInvoker(object p0);
    internal static string get_ActionDescriptorMustBeBasedOnControllerAction();
    internal static string FormatActionDescriptorMustBeBasedOnControllerAction(object p0);
    internal static string get_ArgumentCannotBeNullOrEmpty();
    internal static string FormatArgumentCannotBeNullOrEmpty();
    internal static string get_PropertyOfTypeCannotBeNull();
    internal static string FormatPropertyOfTypeCannotBeNull(object p0, object p1);
    internal static string get_TypeMethodMustReturnNotNullValue();
    internal static string FormatTypeMethodMustReturnNotNullValue(object p0, object p1);
    internal static string get_ModelBinding_NullValueNotValid();
    internal static string FormatModelBinding_NullValueNotValid(object p0);
    internal static string get_Invalid_IncludePropertyExpression();
    internal static string FormatInvalid_IncludePropertyExpression(object p0);
    internal static string get_NoRoutesMatched();
    internal static string FormatNoRoutesMatched();
    internal static string get_AsyncActionFilter_InvalidShortCircuit();
    internal static string FormatAsyncActionFilter_InvalidShortCircuit(object p0, object p1, object p2, object p3);
    internal static string get_AsyncResultFilter_InvalidShortCircuit();
    internal static string FormatAsyncResultFilter_InvalidShortCircuit(object p0, object p1, object p2, object p3);
    internal static string get_FilterFactoryAttribute_TypeMustImplementIFilter();
    internal static string FormatFilterFactoryAttribute_TypeMustImplementIFilter(object p0, object p1);
    internal static string get_ActionResult_ActionReturnValueCannotBeNull();
    internal static string FormatActionResult_ActionReturnValueCannotBeNull(object p0);
    internal static string get_TypeMustDeriveFromType();
    internal static string FormatTypeMustDeriveFromType(object p0, object p1);
    internal static string get_InputFormatterNoEncoding();
    internal static string FormatInputFormatterNoEncoding(object p0);
    internal static string get_UnsupportedContentType();
    internal static string FormatUnsupportedContentType(object p0);
    internal static string get_OutputFormatterNoMediaType();
    internal static string FormatOutputFormatterNoMediaType(object p0);
    internal static string get_AttributeRoute_AggregateErrorMessage();
    internal static string FormatAttributeRoute_AggregateErrorMessage(object p0, object p1);
    internal static string get_AttributeRoute_CannotContainParameter();
    internal static string FormatAttributeRoute_CannotContainParameter(object p0, object p1, object p2);
    internal static string get_AttributeRoute_IndividualErrorMessage();
    internal static string FormatAttributeRoute_IndividualErrorMessage(object p0, object p1, object p2);
    internal static string get_AttributeRoute_TokenReplacement_EmptyTokenNotAllowed();
    internal static string FormatAttributeRoute_TokenReplacement_EmptyTokenNotAllowed();
    internal static string get_AttributeRoute_TokenReplacement_ImbalancedSquareBrackets();
    internal static string FormatAttributeRoute_TokenReplacement_ImbalancedSquareBrackets();
    internal static string get_AttributeRoute_TokenReplacement_InvalidSyntax();
    internal static string FormatAttributeRoute_TokenReplacement_InvalidSyntax(object p0, object p1);
    internal static string get_AttributeRoute_TokenReplacement_ReplacementValueNotFound();
    internal static string FormatAttributeRoute_TokenReplacement_ReplacementValueNotFound(object p0, object p1, object p2);
    internal static string get_AttributeRoute_TokenReplacement_UnclosedToken();
    internal static string FormatAttributeRoute_TokenReplacement_UnclosedToken();
    internal static string get_AttributeRoute_TokenReplacement_UnescapedBraceInToken();
    internal static string FormatAttributeRoute_TokenReplacement_UnescapedBraceInToken();
    internal static string get_UnableToFindServices();
    internal static string FormatUnableToFindServices(object p0, object p1, object p2);
    internal static string get_AttributeRoute_DuplicateNames_Item();
    internal static string FormatAttributeRoute_DuplicateNames_Item(object p0, object p1);
    internal static string get_AttributeRoute_DuplicateNames();
    internal static string FormatAttributeRoute_DuplicateNames(object p0, object p1, object p2);
    internal static string get_AttributeRoute_AggregateErrorMessage_ErrorNumber();
    internal static string FormatAttributeRoute_AggregateErrorMessage_ErrorNumber(object p0, object p1, object p2);
    internal static string get_AttributeRoute_MixedAttributeAndConventionallyRoutedActions_ForMethod();
    internal static string FormatAttributeRoute_MixedAttributeAndConventionallyRoutedActions_ForMethod(object p0, object p1, object p2);
    internal static string get_AttributeRoute_MixedAttributeAndConventionallyRoutedActions_ForMethod_Item();
    internal static string FormatAttributeRoute_MixedAttributeAndConventionallyRoutedActions_ForMethod_Item(object p0, object p1, object p2);
    internal static string get_AttributeRoute_NullTemplateRepresentation();
    internal static string FormatAttributeRoute_NullTemplateRepresentation();
    internal static string get_DefaultActionSelector_AmbiguousActions();
    internal static string FormatDefaultActionSelector_AmbiguousActions(object p0, object p1);
    internal static string get_FileResult_InvalidPath();
    internal static string FormatFileResult_InvalidPath(object p0);
    internal static string get_SerializableError_DefaultError();
    internal static string FormatSerializableError_DefaultError();
    internal static string get_AsyncResourceFilter_InvalidShortCircuit();
    internal static string FormatAsyncResourceFilter_InvalidShortCircuit(object p0, object p1, object p2, object p3);
    internal static string get_ResponseCache_SpecifyDuration();
    internal static string FormatResponseCache_SpecifyDuration(object p0, object p1);
    internal static string get_ApiExplorer_UnsupportedAction();
    internal static string FormatApiExplorer_UnsupportedAction(object p0);
    internal static string get_FormatterMappings_NotValidMediaType();
    internal static string FormatFormatterMappings_NotValidMediaType(object p0);
    internal static string get_Format_NotValid();
    internal static string FormatFormat_NotValid(object p0);
    internal static string get_CacheProfileNotFound();
    internal static string FormatCacheProfileNotFound(object p0);
    internal static string get_ModelType_WrongType();
    internal static string FormatModelType_WrongType(object p0, object p1);
    internal static string get_ValueInterfaceAbstractOrOpenGenericTypesCannotBeActivated();
    internal static string FormatValueInterfaceAbstractOrOpenGenericTypesCannotBeActivated(object p0, object p1);
    internal static string get_BinderType_MustBeIModelBinder();
    internal static string FormatBinderType_MustBeIModelBinder(object p0, object p1);
    internal static string get_BindingSource_CannotBeComposite();
    internal static string FormatBindingSource_CannotBeComposite(object p0, object p1);
    internal static string get_BindingSource_CannotBeGreedy();
    internal static string FormatBindingSource_CannotBeGreedy(object p0, object p1);
    internal static string get_Common_PropertyNotFound();
    internal static string FormatCommon_PropertyNotFound(object p0, object p1);
    internal static string get_JQueryFormValueProviderFactory_MissingClosingBracket();
    internal static string FormatJQueryFormValueProviderFactory_MissingClosingBracket(object p0);
    internal static string get_KeyValuePair_BothKeyAndValueMustBePresent();
    internal static string FormatKeyValuePair_BothKeyAndValueMustBePresent();
    internal static string get_ModelBinderUtil_ModelCannotBeNull();
    internal static string FormatModelBinderUtil_ModelCannotBeNull(object p0);
    internal static string get_ModelBinderUtil_ModelInstanceIsWrong();
    internal static string FormatModelBinderUtil_ModelInstanceIsWrong(object p0, object p1);
    internal static string get_ModelBinderUtil_ModelMetadataCannotBeNull();
    internal static string FormatModelBinderUtil_ModelMetadataCannotBeNull();
    internal static string get_ModelBinding_MissingBindRequiredMember();
    internal static string FormatModelBinding_MissingBindRequiredMember(object p0);
    internal static string get_ModelBinding_MissingRequestBodyRequiredMember();
    internal static string FormatModelBinding_MissingRequestBodyRequiredMember();
    internal static string get_ValueProviderResult_NoConverterExists();
    internal static string FormatValueProviderResult_NoConverterExists(object p0, object p1);
    internal static string get_FileResult_PathNotRooted();
    internal static string FormatFileResult_PathNotRooted(object p0);
    internal static string get_UrlNotLocal();
    internal static string FormatUrlNotLocal();
    internal static string get_FormatFormatterMappings_GetMediaTypeMappingForFormat_InvalidFormat();
    internal static string FormatFormatFormatterMappings_GetMediaTypeMappingForFormat_InvalidFormat(object p0);
    internal static string get_AcceptHeaderParser_ParseAcceptHeader_InvalidValues();
    internal static string FormatAcceptHeaderParser_ParseAcceptHeader_InvalidValues(object p0);
    internal static string get_ModelState_AttemptedValueIsInvalid();
    internal static string FormatModelState_AttemptedValueIsInvalid(object p0, object p1);
    internal static string get_ModelState_NonPropertyAttemptedValueIsInvalid();
    internal static string FormatModelState_NonPropertyAttemptedValueIsInvalid(object p0);
    internal static string get_ModelState_UnknownValueIsInvalid();
    internal static string FormatModelState_UnknownValueIsInvalid(object p0);
    internal static string get_ModelState_NonPropertyUnknownValueIsInvalid();
    internal static string FormatModelState_NonPropertyUnknownValueIsInvalid();
    internal static string get_HtmlGeneration_ValueIsInvalid();
    internal static string FormatHtmlGeneration_ValueIsInvalid(object p0);
    internal static string get_HtmlGeneration_ValueMustBeNumber();
    internal static string FormatHtmlGeneration_ValueMustBeNumber(object p0);
    internal static string get_HtmlGeneration_NonPropertyValueMustBeNumber();
    internal static string FormatHtmlGeneration_NonPropertyValueMustBeNumber();
    internal static string get_TextInputFormatter_SupportedEncodingsMustNotBeEmpty();
    internal static string FormatTextInputFormatter_SupportedEncodingsMustNotBeEmpty(object p0);
    internal static string get_TextOutputFormatter_SupportedEncodingsMustNotBeEmpty();
    internal static string FormatTextOutputFormatter_SupportedEncodingsMustNotBeEmpty(object p0);
    internal static string get_TextOutputFormatter_WriteResponseBodyAsyncNotSupported();
    internal static string FormatTextOutputFormatter_WriteResponseBodyAsyncNotSupported(object p0, object p1, object p2);
    internal static string get_Formatter_NoMediaTypes();
    internal static string FormatFormatter_NoMediaTypes(object p0, object p1);
    internal static string get_CouldNotCreateIModelBinder();
    internal static string FormatCouldNotCreateIModelBinder(object p0);
    internal static string get_InputFormattersAreRequired();
    internal static string FormatInputFormattersAreRequired(object p0, object p1, object p2);
    internal static string get_ModelBinderProvidersAreRequired();
    internal static string FormatModelBinderProvidersAreRequired(object p0, object p1, object p2);
    internal static string get_OutputFormattersAreRequired();
    internal static string FormatOutputFormattersAreRequired(object p0, object p1, object p2);
    internal static string get_MiddewareFilter_ConfigureMethodOverload();
    internal static string FormatMiddewareFilter_ConfigureMethodOverload(object p0);
    internal static string get_MiddewareFilter_NoConfigureMethod();
    internal static string FormatMiddewareFilter_NoConfigureMethod(object p0, object p1);
    internal static string get_MiddlewareFilterBuilder_NoMiddlewareFeature();
    internal static string FormatMiddlewareFilterBuilder_NoMiddlewareFeature(object p0);
    internal static string get_MiddlewareFilterBuilder_NullApplicationBuilder();
    internal static string FormatMiddlewareFilterBuilder_NullApplicationBuilder(object p0);
    internal static string get_MiddlewareFilter_InvalidConfigureReturnType();
    internal static string FormatMiddlewareFilter_InvalidConfigureReturnType(object p0, object p1, object p2);
    internal static string get_MiddlewareFilter_ServiceResolutionFail();
    internal static string FormatMiddlewareFilter_ServiceResolutionFail(object p0, object p1, object p2, object p3);
    internal static string get_AuthorizeFilter_AuthorizationPolicyCannotBeCreated();
    internal static string FormatAuthorizeFilter_AuthorizationPolicyCannotBeCreated(object p0, object p1);
    internal static string get_FormCollectionModelBinder_CannotBindToFormCollection();
    internal static string FormatFormCollectionModelBinder_CannotBindToFormCollection(object p0, object p1, object p2);
    internal static string get_VaryByQueryKeys_Requires_ResponseCachingMiddleware();
    internal static string FormatVaryByQueryKeys_Requires_ResponseCachingMiddleware(object p0);
    internal static string get_CandidateResolver_DifferentCasedReference();
    internal static string FormatCandidateResolver_DifferentCasedReference(object p0);
    internal static string get_MiddlewareFilterConfigurationProvider_CreateConfigureDelegate_CannotCreateType();
    internal static string FormatMiddlewareFilterConfigurationProvider_CreateConfigureDelegate_CannotCreateType(object p0, object p1);
    internal static string get_Argument_InvalidOffsetLength();
    internal static string FormatArgument_InvalidOffsetLength(object p0, object p1);
    internal static string get_ComplexTypeModelBinder_NoParameterlessConstructor_ForType();
    internal static string FormatComplexTypeModelBinder_NoParameterlessConstructor_ForType(object p0);
    internal static string get_ComplexTypeModelBinder_NoParameterlessConstructor_ForProperty();
    internal static string FormatComplexTypeModelBinder_NoParameterlessConstructor_ForProperty(object p0, object p1, object p2);
    internal static string get_NoRoutesMatchedForPage();
    internal static string FormatNoRoutesMatchedForPage(object p0);
    internal static string get_UrlHelper_RelativePagePathIsNotSupported();
    internal static string FormatUrlHelper_RelativePagePathIsNotSupported(object p0);
    internal static string get_ValidationProblemDescription_Title();
    internal static string FormatValidationProblemDescription_Title();
    internal static string get_ApiController_AttributeRouteRequired();
    internal static string FormatApiController_AttributeRouteRequired(object p0, object p1);
    internal static string get_VirtualFileResultExecutor_NoFileProviderConfigured();
    internal static string FormatVirtualFileResultExecutor_NoFileProviderConfigured();
    internal static string get_ApplicationPartFactory_InvalidFactoryType();
    internal static string FormatApplicationPartFactory_InvalidFactoryType(object p0, object p1, object p2);
    internal static string get_RelatedAssemblyAttribute_AssemblyCannotReferenceSelf();
    internal static string FormatRelatedAssemblyAttribute_AssemblyCannotReferenceSelf(object p0, object p1);
    internal static string get_RelatedAssemblyAttribute_CouldNotBeFound();
    internal static string FormatRelatedAssemblyAttribute_CouldNotBeFound(object p0, object p1, object p2);
    internal static string get_ApplicationAssembliesProvider_DuplicateRelatedAssembly();
    internal static string FormatApplicationAssembliesProvider_DuplicateRelatedAssembly(object p0);
    internal static string get_ApplicationAssembliesProvider_RelatedAssemblyCannotDefineAdditional();
    internal static string FormatApplicationAssembliesProvider_RelatedAssemblyCannotDefineAdditional(object p0, object p1);
    internal static string get_ComplexTypeModelBinder_NoParameterlessConstructor_ForParameter();
    internal static string FormatComplexTypeModelBinder_NoParameterlessConstructor_ForParameter(object p0, object p1);
    internal static string get_ApiController_MultipleBodyParametersFound();
    internal static string FormatApiController_MultipleBodyParametersFound(object p0, object p1, object p2, object p3);
    private static string GetString(string name, String[] formatterNames);
}
public class Microsoft.AspNetCore.Mvc.CreatedAtActionResult : ObjectResult {
    [CompilerGeneratedAttribute]
private IUrlHelper <UrlHelper>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ActionName>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ControllerName>k__BackingField;
    [CompilerGeneratedAttribute]
private RouteValueDictionary <RouteValues>k__BackingField;
    public IUrlHelper UrlHelper { get; public set; }
    public string ActionName { get; public set; }
    public string ControllerName { get; public set; }
    public RouteValueDictionary RouteValues { get; public set; }
    public CreatedAtActionResult(string actionName, string controllerName, object routeValues, object value);
    [CompilerGeneratedAttribute]
public IUrlHelper get_UrlHelper();
    [CompilerGeneratedAttribute]
public void set_UrlHelper(IUrlHelper value);
    [CompilerGeneratedAttribute]
public string get_ActionName();
    [CompilerGeneratedAttribute]
public void set_ActionName(string value);
    [CompilerGeneratedAttribute]
public string get_ControllerName();
    [CompilerGeneratedAttribute]
public void set_ControllerName(string value);
    [CompilerGeneratedAttribute]
public RouteValueDictionary get_RouteValues();
    [CompilerGeneratedAttribute]
public void set_RouteValues(RouteValueDictionary value);
    public virtual void OnFormatting(ActionContext context);
}
public class Microsoft.AspNetCore.Mvc.CreatedAtRouteResult : ObjectResult {
    [CompilerGeneratedAttribute]
private IUrlHelper <UrlHelper>k__BackingField;
    [CompilerGeneratedAttribute]
private string <RouteName>k__BackingField;
    [CompilerGeneratedAttribute]
private RouteValueDictionary <RouteValues>k__BackingField;
    public IUrlHelper UrlHelper { get; public set; }
    public string RouteName { get; public set; }
    public RouteValueDictionary RouteValues { get; public set; }
    public CreatedAtRouteResult(object routeValues, object value);
    public CreatedAtRouteResult(string routeName, object routeValues, object value);
    [CompilerGeneratedAttribute]
public IUrlHelper get_UrlHelper();
    [CompilerGeneratedAttribute]
public void set_UrlHelper(IUrlHelper value);
    [CompilerGeneratedAttribute]
public string get_RouteName();
    [CompilerGeneratedAttribute]
public void set_RouteName(string value);
    [CompilerGeneratedAttribute]
public RouteValueDictionary get_RouteValues();
    [CompilerGeneratedAttribute]
public void set_RouteValues(RouteValueDictionary value);
    public virtual void OnFormatting(ActionContext context);
}
public class Microsoft.AspNetCore.Mvc.CreatedResult : ObjectResult {
    private string _location;
    public string Location { get; public set; }
    public CreatedResult(string location, object value);
    public CreatedResult(Uri location, object value);
    public string get_Location();
    public void set_Location(string value);
    public virtual void OnFormatting(ActionContext context);
}
[AttributeUsageAttribute("68")]
public class Microsoft.AspNetCore.Mvc.DisableRequestSizeLimitAttribute : Attribute {
    [CompilerGeneratedAttribute]
private int <Order>k__BackingField;
    public int Order { get; public set; }
    public bool IsReusable { get; }
    [CompilerGeneratedAttribute]
public sealed virtual int get_Order();
    [CompilerGeneratedAttribute]
public void set_Order(int value);
    public sealed virtual bool get_IsReusable();
    public sealed virtual IFilterMetadata CreateInstance(IServiceProvider serviceProvider);
}
public class Microsoft.AspNetCore.Mvc.EmptyResult : ActionResult {
    public virtual void ExecuteResult(ActionContext context);
}
public class Microsoft.AspNetCore.Mvc.FileContentResult : FileResult {
    private Byte[] _fileContents;
    public Byte[] FileContents { get; public set; }
    public FileContentResult(Byte[] fileContents, string contentType);
    public FileContentResult(Byte[] fileContents, MediaTypeHeaderValue contentType);
    public Byte[] get_FileContents();
    public void set_FileContents(Byte[] value);
    public virtual Task ExecuteResultAsync(ActionContext context);
}
public abstract class Microsoft.AspNetCore.Mvc.FileResult : ActionResult {
    private string _fileDownloadName;
    [CompilerGeneratedAttribute]
private string <ContentType>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<DateTimeOffset> <LastModified>k__BackingField;
    [CompilerGeneratedAttribute]
private EntityTagHeaderValue <EntityTag>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <EnableRangeProcessing>k__BackingField;
    public string ContentType { get; }
    public string FileDownloadName { get; public set; }
    public Nullable`1<DateTimeOffset> LastModified { get; public set; }
    public EntityTagHeaderValue EntityTag { get; public set; }
    public bool EnableRangeProcessing { get; public set; }
    protected FileResult(string contentType);
    [CompilerGeneratedAttribute]
public string get_ContentType();
    public string get_FileDownloadName();
    public void set_FileDownloadName(string value);
    [CompilerGeneratedAttribute]
public Nullable`1<DateTimeOffset> get_LastModified();
    [CompilerGeneratedAttribute]
public void set_LastModified(Nullable`1<DateTimeOffset> value);
    [CompilerGeneratedAttribute]
public EntityTagHeaderValue get_EntityTag();
    [CompilerGeneratedAttribute]
public void set_EntityTag(EntityTagHeaderValue value);
    [CompilerGeneratedAttribute]
public bool get_EnableRangeProcessing();
    [CompilerGeneratedAttribute]
public void set_EnableRangeProcessing(bool value);
}
public class Microsoft.AspNetCore.Mvc.FileStreamResult : FileResult {
    private Stream _fileStream;
    public Stream FileStream { get; public set; }
    public FileStreamResult(Stream fileStream, string contentType);
    public FileStreamResult(Stream fileStream, MediaTypeHeaderValue contentType);
    public Stream get_FileStream();
    public void set_FileStream(Stream value);
    public virtual Task ExecuteResultAsync(ActionContext context);
}
[AttributeUsageAttribute("68")]
public abstract class Microsoft.AspNetCore.Mvc.Filters.ActionFilterAttribute : Attribute {
    [CompilerGeneratedAttribute]
private int <Order>k__BackingField;
    public int Order { get; public set; }
    [CompilerGeneratedAttribute]
public sealed virtual int get_Order();
    [CompilerGeneratedAttribute]
public void set_Order(int value);
    public virtual void OnActionExecuting(ActionExecutingContext context);
    public virtual void OnActionExecuted(ActionExecutedContext context);
    [AsyncStateMachineAttribute("Microsoft.AspNetCore.Mvc.Filters.ActionFilterAttribute/<OnActionExecutionAsync>d__6")]
public virtual Task OnActionExecutionAsync(ActionExecutingContext context, ActionExecutionDelegate next);
    public virtual void OnResultExecuting(ResultExecutingContext context);
    public virtual void OnResultExecuted(ResultExecutedContext context);
    [AsyncStateMachineAttribute("Microsoft.AspNetCore.Mvc.Filters.ActionFilterAttribute/<OnResultExecutionAsync>d__9")]
public virtual Task OnResultExecutionAsync(ResultExecutingContext context, ResultExecutionDelegate next);
}
[AttributeUsageAttribute("68")]
public abstract class Microsoft.AspNetCore.Mvc.Filters.ExceptionFilterAttribute : Attribute {
    [CompilerGeneratedAttribute]
private int <Order>k__BackingField;
    public int Order { get; public set; }
    [CompilerGeneratedAttribute]
public sealed virtual int get_Order();
    [CompilerGeneratedAttribute]
public void set_Order(int value);
    public virtual Task OnExceptionAsync(ExceptionContext context);
    public virtual void OnException(ExceptionContext context);
}
public class Microsoft.AspNetCore.Mvc.Filters.FilterCollection : Collection`1<IFilterMetadata> {
    public IFilterMetadata Add();
    public IFilterMetadata Add(Type filterType);
    public IFilterMetadata Add(int order);
    public IFilterMetadata Add(Type filterType, int order);
    public IFilterMetadata AddService();
    public IFilterMetadata AddService(Type filterType);
    public IFilterMetadata AddService(int order);
    public IFilterMetadata AddService(Type filterType, int order);
}
public static class Microsoft.AspNetCore.Mvc.Filters.FilterScope : object {
    public static int First;
    public static int Global;
    public static int Controller;
    public static int Action;
    public static int Last;
    private static FilterScope();
}
[AttributeUsageAttribute("68")]
public abstract class Microsoft.AspNetCore.Mvc.Filters.ResultFilterAttribute : Attribute {
    [CompilerGeneratedAttribute]
private int <Order>k__BackingField;
    public int Order { get; public set; }
    [CompilerGeneratedAttribute]
public sealed virtual int get_Order();
    [CompilerGeneratedAttribute]
public void set_Order(int value);
    public virtual void OnResultExecuting(ResultExecutingContext context);
    public virtual void OnResultExecuted(ResultExecutedContext context);
    [AsyncStateMachineAttribute("Microsoft.AspNetCore.Mvc.Filters.ResultFilterAttribute/<OnResultExecutionAsync>d__6")]
public virtual Task OnResultExecutionAsync(ResultExecutingContext context, ResultExecutionDelegate next);
}
public class Microsoft.AspNetCore.Mvc.ForbidResult : ActionResult {
    [CompilerGeneratedAttribute]
private IList`1<string> <AuthenticationSchemes>k__BackingField;
    [CompilerGeneratedAttribute]
private AuthenticationProperties <Properties>k__BackingField;
    public IList`1<string> AuthenticationSchemes { get; public set; }
    public AuthenticationProperties Properties { get; public set; }
    public ForbidResult(string authenticationScheme);
    public ForbidResult(IList`1<string> authenticationSchemes);
    public ForbidResult(AuthenticationProperties properties);
    public ForbidResult(string authenticationScheme, AuthenticationProperties properties);
    public ForbidResult(IList`1<string> authenticationSchemes, AuthenticationProperties properties);
    [CompilerGeneratedAttribute]
public IList`1<string> get_AuthenticationSchemes();
    [CompilerGeneratedAttribute]
public void set_AuthenticationSchemes(IList`1<string> value);
    [CompilerGeneratedAttribute]
public AuthenticationProperties get_Properties();
    [CompilerGeneratedAttribute]
public void set_Properties(AuthenticationProperties value);
    [AsyncStateMachineAttribute("Microsoft.AspNetCore.Mvc.ForbidResult/<ExecuteResultAsync>d__14")]
public virtual Task ExecuteResultAsync(ActionContext context);
}
[AttributeUsageAttribute("68")]
public class Microsoft.AspNetCore.Mvc.FormatFilterAttribute : Attribute {
    public bool IsReusable { get; }
    public sealed virtual bool get_IsReusable();
    public sealed virtual IFilterMetadata CreateInstance(IServiceProvider serviceProvider);
}
public class Microsoft.AspNetCore.Mvc.Formatters.FormatFilter : object {
    private MvcOptions _options;
    private ILogger _logger;
    [ObsoleteAttribute("This constructor is obsolete and will be removed in a future version.")]
public FormatFilter(IOptions`1<MvcOptions> options);
    public FormatFilter(IOptions`1<MvcOptions> options, ILoggerFactory loggerFactory);
    public virtual string GetFormat(ActionContext context);
    public sealed virtual void OnResourceExecuting(ResourceExecutingContext context);
    private bool IsSuperSetOfAnySupportedMediaType(string contentType, MediaTypeCollection supportedMediaTypes);
    public sealed virtual void OnResourceExecuted(ResourceExecutedContext context);
    public sealed virtual void OnResultExecuting(ResultExecutingContext context);
    public sealed virtual void OnResultExecuted(ResultExecutedContext context);
}
public class Microsoft.AspNetCore.Mvc.Formatters.FormatterMappings : object {
    private Dictionary`2<string, string> _map;
    public void SetMediaTypeMappingForFormat(string format, string contentType);
    public void SetMediaTypeMappingForFormat(string format, MediaTypeHeaderValue contentType);
    public string GetMediaTypeMappingForFormat(string format);
    public bool ClearMediaTypeMappingForFormat(string format);
    private void ValidateContentType(MediaTypeHeaderValue contentType);
    private string RemovePeriodIfPresent(string format);
}
public class Microsoft.AspNetCore.Mvc.Formatters.HttpNoContentOutputFormatter : object {
    [CompilerGeneratedAttribute]
private bool <TreatNullValueAsNoContent>k__BackingField;
    public bool TreatNullValueAsNoContent { get; public set; }
    [CompilerGeneratedAttribute]
public bool get_TreatNullValueAsNoContent();
    [CompilerGeneratedAttribute]
public void set_TreatNullValueAsNoContent(bool value);
    public sealed virtual bool CanWriteResult(OutputFormatterCanWriteContext context);
    public sealed virtual Task WriteAsync(OutputFormatterWriteContext context);
}
public abstract class Microsoft.AspNetCore.Mvc.Formatters.InputFormatter : object {
    [CompilerGeneratedAttribute]
private MediaTypeCollection <SupportedMediaTypes>k__BackingField;
    public MediaTypeCollection SupportedMediaTypes { get; }
    [CompilerGeneratedAttribute]
public MediaTypeCollection get_SupportedMediaTypes();
    protected virtual object GetDefaultValueForType(Type modelType);
    public virtual bool CanRead(InputFormatterContext context);
    private bool IsSubsetOfAnySupportedContentType(string contentType);
    protected virtual bool CanReadType(Type type);
    public virtual Task`1<InputFormatterResult> ReadAsync(InputFormatterContext context);
    public abstract virtual Task`1<InputFormatterResult> ReadRequestBodyAsync(InputFormatterContext context);
    public virtual IReadOnlyList`1<string> GetSupportedContentTypes(string contentType, Type objectType);
}
public static class Microsoft.AspNetCore.Mvc.Formatters.Internal.AcceptHeaderParser : object {
    public static IList`1<MediaTypeSegmentWithQuality> ParseAcceptHeader(IList`1<string> acceptHeaders);
    public static void ParseAcceptHeader(IList`1<string> acceptHeaders, IList`1<MediaTypeSegmentWithQuality> parsedValues);
    private static bool TryParseValue(string value, Int32& index, MediaTypeSegmentWithQuality& parsedValue);
    private static int GetNextNonEmptyOrWhitespaceIndex(string input, int startIndex, Boolean& separatorFound);
    private static int GetMediaTypeWithQualityLength(string input, int start, MediaTypeSegmentWithQuality& result);
}
public enum Microsoft.AspNetCore.Mvc.Formatters.Internal.HttpParseResult : Enum {
    public int value__;
    public static HttpParseResult Parsed;
    public static HttpParseResult NotParsed;
    public static HttpParseResult InvalidFormat;
}
public static class Microsoft.AspNetCore.Mvc.Formatters.Internal.HttpTokenParsingRules : object {
    private static Boolean[] TokenChars;
    private static int MaxNestedCount;
    internal static char CR;
    internal static char LF;
    internal static char SP;
    internal static char Tab;
    internal static int MaxInt64Digits;
    internal static int MaxInt32Digits;
    internal static Encoding DefaultHttpEncoding;
    private static HttpTokenParsingRules();
    internal static bool IsTokenChar(char character);
    internal static int GetTokenLength(string input, int startIndex);
    internal static int GetWhitespaceLength(string input, int startIndex);
    internal static HttpParseResult GetQuotedStringLength(string input, int startIndex, Int32& length);
    internal static HttpParseResult GetQuotedPairLength(string input, int startIndex, Int32& length);
    private static HttpParseResult GetExpressionLength(string input, int startIndex, char openChar, char closeChar, bool supportsNesting, Int32& nestedCount, Int32& length);
}
public interface Microsoft.AspNetCore.Mvc.Formatters.Internal.IFormatFilter {
    public abstract virtual string GetFormat(ActionContext context);
}
public class Microsoft.AspNetCore.Mvc.Formatters.Internal.MediaTypeSegmentWithQuality : ValueType {
    [CompilerGeneratedAttribute]
private StringSegment <MediaType>k__BackingField;
    [CompilerGeneratedAttribute]
private double <Quality>k__BackingField;
    public StringSegment MediaType { get; }
    public double Quality { get; }
    public MediaTypeSegmentWithQuality(StringSegment mediaType, double quality);
    [CompilerGeneratedAttribute]
public StringSegment get_MediaType();
    [CompilerGeneratedAttribute]
public double get_Quality();
    public virtual string ToString();
}
public class Microsoft.AspNetCore.Mvc.Formatters.MediaType : ValueType {
    private static StringSegment QualityParameter;
    private MediaTypeParameterParser _parameterParser;
    [CompilerGeneratedAttribute]
private StringSegment <Type>k__BackingField;
    [CompilerGeneratedAttribute]
private StringSegment <SubType>k__BackingField;
    [CompilerGeneratedAttribute]
private StringSegment <SubTypeWithoutSuffix>k__BackingField;
    [CompilerGeneratedAttribute]
private StringSegment <SubTypeSuffix>k__BackingField;
    public StringSegment Type { get; }
    public bool MatchesAllTypes { get; }
    public StringSegment SubType { get; }
    public StringSegment SubTypeWithoutSuffix { get; }
    public StringSegment SubTypeSuffix { get; }
    public bool MatchesAllSubTypes { get; }
    public bool MatchesAllSubTypesWithoutSuffix { get; }
    public Encoding Encoding { get; }
    public StringSegment Charset { get; }
    public bool HasWildcard { get; }
    public MediaType(string mediaType);
    public MediaType(StringSegment mediaType);
    public MediaType(string mediaType, int offset, Nullable`1<int> length);
    private static MediaType();
    private static int GetTypeLength(string input, int offset, StringSegment& type);
    private static int GetSubtypeLength(string input, int offset, StringSegment& subType);
    private static bool TryGetSuffixLength(StringSegment subType, Int32& suffixLength);
    [CompilerGeneratedAttribute]
public StringSegment get_Type();
    public bool get_MatchesAllTypes();
    [CompilerGeneratedAttribute]
public StringSegment get_SubType();
    [CompilerGeneratedAttribute]
public StringSegment get_SubTypeWithoutSuffix();
    [CompilerGeneratedAttribute]
public StringSegment get_SubTypeSuffix();
    public bool get_MatchesAllSubTypes();
    public bool get_MatchesAllSubTypesWithoutSuffix();
    public Encoding get_Encoding();
    public StringSegment get_Charset();
    public bool get_HasWildcard();
    public bool IsSubsetOf(MediaType set);
    public StringSegment GetParameter(string parameterName);
    public StringSegment GetParameter(StringSegment parameterName);
    public static string ReplaceEncoding(string mediaType, Encoding encoding);
    public static string ReplaceEncoding(StringSegment mediaType, Encoding encoding);
    public static Encoding GetEncoding(string mediaType);
    public static Encoding GetEncoding(StringSegment mediaType);
    public static MediaTypeSegmentWithQuality CreateMediaTypeSegmentWithQuality(string mediaType, int start);
    private static Encoding GetEncodingFromCharset(StringSegment charset);
    private static string CreateMediaTypeWithEncoding(StringSegment mediaType, Encoding encoding);
    private bool MatchesType(MediaType set);
    private bool MatchesSubtype(MediaType set);
    private bool MatchesSubtypeWithoutSuffix(MediaType set);
    private bool MatchesSubtypeSuffix(MediaType set);
    private bool ContainsAllParameters(MediaTypeParameterParser setParameters);
}
public class Microsoft.AspNetCore.Mvc.Formatters.MediaTypeCollection : Collection`1<string> {
    public void Add(MediaTypeHeaderValue item);
    public void Insert(int index, MediaTypeHeaderValue item);
    public bool Remove(MediaTypeHeaderValue item);
}
public abstract class Microsoft.AspNetCore.Mvc.Formatters.OutputFormatter : object {
    [CompilerGeneratedAttribute]
private MediaTypeCollection <SupportedMediaTypes>k__BackingField;
    public MediaTypeCollection SupportedMediaTypes { get; }
    [CompilerGeneratedAttribute]
public MediaTypeCollection get_SupportedMediaTypes();
    protected virtual bool CanWriteType(Type type);
    public virtual IReadOnlyList`1<string> GetSupportedContentTypes(string contentType, Type objectType);
    public virtual bool CanWriteResult(OutputFormatterCanWriteContext context);
    public virtual Task WriteAsync(OutputFormatterWriteContext context);
    public virtual void WriteResponseHeaders(OutputFormatterWriteContext context);
    public abstract virtual Task WriteResponseBodyAsync(OutputFormatterWriteContext context);
}
public class Microsoft.AspNetCore.Mvc.Formatters.StreamOutputFormatter : object {
    public sealed virtual bool CanWriteResult(OutputFormatterCanWriteContext context);
    [AsyncStateMachineAttribute("Microsoft.AspNetCore.Mvc.Formatters.StreamOutputFormatter/<WriteAsync>d__1")]
public sealed virtual Task WriteAsync(OutputFormatterWriteContext context);
}
public class Microsoft.AspNetCore.Mvc.Formatters.StringOutputFormatter : TextOutputFormatter {
    public virtual bool CanWriteResult(OutputFormatterCanWriteContext context);
    public virtual Task WriteResponseBodyAsync(OutputFormatterWriteContext context, Encoding encoding);
}
public abstract class Microsoft.AspNetCore.Mvc.Formatters.TextInputFormatter : InputFormatter {
    protected static Encoding UTF8EncodingWithoutBOM;
    protected static Encoding UTF16EncodingLittleEndian;
    [CompilerGeneratedAttribute]
private IList`1<Encoding> <SupportedEncodings>k__BackingField;
    public IList`1<Encoding> SupportedEncodings { get; }
    private static TextInputFormatter();
    [CompilerGeneratedAttribute]
public IList`1<Encoding> get_SupportedEncodings();
    public virtual Task`1<InputFormatterResult> ReadRequestBodyAsync(InputFormatterContext context);
    public abstract virtual Task`1<InputFormatterResult> ReadRequestBodyAsync(InputFormatterContext context, Encoding encoding);
    protected Encoding SelectCharacterEncoding(InputFormatterContext context);
}
public abstract class Microsoft.AspNetCore.Mvc.Formatters.TextOutputFormatter : OutputFormatter {
    private IDictionary`2<string, string> _outputMediaTypeCache;
    [CompilerGeneratedAttribute]
private IList`1<Encoding> <SupportedEncodings>k__BackingField;
    public IList`1<Encoding> SupportedEncodings { get; }
    private IDictionary`2<string, string> OutputMediaTypeCache { get; }
    [CompilerGeneratedAttribute]
public IList`1<Encoding> get_SupportedEncodings();
    private IDictionary`2<string, string> get_OutputMediaTypeCache();
    public virtual Encoding SelectCharacterEncoding(OutputFormatterWriteContext context);
    public virtual Task WriteAsync(OutputFormatterWriteContext context);
    public sealed virtual Task WriteResponseBodyAsync(OutputFormatterWriteContext context);
    public abstract virtual Task WriteResponseBodyAsync(OutputFormatterWriteContext context, Encoding selectedEncoding);
    internal static IList`1<StringWithQualityHeaderValue> GetAcceptCharsetHeaderValues(OutputFormatterWriteContext context);
    private string GetMediaTypeWithCharset(string mediaType, Encoding encoding);
    private Encoding MatchAcceptCharacterEncoding(IList`1<StringWithQualityHeaderValue> acceptCharsetHeaders);
    private IList`1<StringWithQualityHeaderValue> Sort(IList`1<StringWithQualityHeaderValue> values);
}
[AttributeUsageAttribute("2176")]
public class Microsoft.AspNetCore.Mvc.FromBodyAttribute : Attribute {
    public BindingSource BindingSource { get; }
    public sealed virtual BindingSource get_BindingSource();
}
[AttributeUsageAttribute("2176")]
public class Microsoft.AspNetCore.Mvc.FromFormAttribute : Attribute {
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    public BindingSource BindingSource { get; }
    public string Name { get; public set; }
    public sealed virtual BindingSource get_BindingSource();
    [CompilerGeneratedAttribute]
public sealed virtual string get_Name();
    [CompilerGeneratedAttribute]
public void set_Name(string value);
}
[AttributeUsageAttribute("2176")]
public class Microsoft.AspNetCore.Mvc.FromHeaderAttribute : Attribute {
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    public BindingSource BindingSource { get; }
    public string Name { get; public set; }
    public sealed virtual BindingSource get_BindingSource();
    [CompilerGeneratedAttribute]
public sealed virtual string get_Name();
    [CompilerGeneratedAttribute]
public void set_Name(string value);
}
[AttributeUsageAttribute("2176")]
public class Microsoft.AspNetCore.Mvc.FromQueryAttribute : Attribute {
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    public BindingSource BindingSource { get; }
    public string Name { get; public set; }
    public sealed virtual BindingSource get_BindingSource();
    [CompilerGeneratedAttribute]
public sealed virtual string get_Name();
    [CompilerGeneratedAttribute]
public void set_Name(string value);
}
[AttributeUsageAttribute("2176")]
public class Microsoft.AspNetCore.Mvc.FromRouteAttribute : Attribute {
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    public BindingSource BindingSource { get; }
    public string Name { get; public set; }
    public sealed virtual BindingSource get_BindingSource();
    [CompilerGeneratedAttribute]
public sealed virtual string get_Name();
    [CompilerGeneratedAttribute]
public void set_Name(string value);
}
[AttributeUsageAttribute("2048")]
public class Microsoft.AspNetCore.Mvc.FromServicesAttribute : Attribute {
    public BindingSource BindingSource { get; }
    public sealed virtual BindingSource get_BindingSource();
}
public class Microsoft.AspNetCore.Mvc.HttpDeleteAttribute : HttpMethodAttribute {
    private static IEnumerable`1<string> _supportedMethods;
    public HttpDeleteAttribute(string template);
    private static HttpDeleteAttribute();
}
public class Microsoft.AspNetCore.Mvc.HttpGetAttribute : HttpMethodAttribute {
    private static IEnumerable`1<string> _supportedMethods;
    public HttpGetAttribute(string template);
    private static HttpGetAttribute();
}
public class Microsoft.AspNetCore.Mvc.HttpHeadAttribute : HttpMethodAttribute {
    private static IEnumerable`1<string> _supportedMethods;
    public HttpHeadAttribute(string template);
    private static HttpHeadAttribute();
}
public class Microsoft.AspNetCore.Mvc.HttpOptionsAttribute : HttpMethodAttribute {
    private static IEnumerable`1<string> _supportedMethods;
    public HttpOptionsAttribute(string template);
    private static HttpOptionsAttribute();
}
public class Microsoft.AspNetCore.Mvc.HttpPatchAttribute : HttpMethodAttribute {
    private static IEnumerable`1<string> _supportedMethods;
    public HttpPatchAttribute(string template);
    private static HttpPatchAttribute();
}
public class Microsoft.AspNetCore.Mvc.HttpPostAttribute : HttpMethodAttribute {
    private static IEnumerable`1<string> _supportedMethods;
    public HttpPostAttribute(string template);
    private static HttpPostAttribute();
}
public class Microsoft.AspNetCore.Mvc.HttpPutAttribute : HttpMethodAttribute {
    private static IEnumerable`1<string> _supportedMethods;
    public HttpPutAttribute(string template);
    private static HttpPutAttribute();
}
public interface Microsoft.AspNetCore.Mvc.IDesignTimeMvcBuilderConfiguration {
    public abstract virtual void ConfigureMvc(IMvcBuilder builder);
}
public class Microsoft.AspNetCore.Mvc.Infrastructure.ActionContextAccessor : object {
    private static AsyncLocal`1<ActionContext> _storage;
    public ActionContext ActionContext { get; public set; }
    private static ActionContextAccessor();
    public sealed virtual ActionContext get_ActionContext();
    public sealed virtual void set_ActionContext(ActionContext value);
}
public class Microsoft.AspNetCore.Mvc.Infrastructure.ActionDescriptorCollection : object {
    [CompilerGeneratedAttribute]
private IReadOnlyList`1<ActionDescriptor> <Items>k__BackingField;
    [CompilerGeneratedAttribute]
private int <Version>k__BackingField;
    public IReadOnlyList`1<ActionDescriptor> Items { get; }
    public int Version { get; }
    public ActionDescriptorCollection(IReadOnlyList`1<ActionDescriptor> items, int version);
    [CompilerGeneratedAttribute]
public IReadOnlyList`1<ActionDescriptor> get_Items();
    [CompilerGeneratedAttribute]
public int get_Version();
}
public class Microsoft.AspNetCore.Mvc.Infrastructure.CompatibilitySwitch`1 : object {
    private TValue _value;
    [CompilerGeneratedAttribute]
private bool <IsValueSet>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    public bool IsValueSet { get; private set; }
    public string Name { get; }
    public TValue Value { get; public set; }
    private object Microsoft.AspNetCore.Mvc.Infrastructure.ICompatibilitySwitch.Value { get; private set; }
    public CompatibilitySwitch`1(string name);
    public CompatibilitySwitch`1(string name, TValue initialValue);
    [CompilerGeneratedAttribute]
public sealed virtual bool get_IsValueSet();
    [CompilerGeneratedAttribute]
private void set_IsValueSet(bool value);
    [CompilerGeneratedAttribute]
public sealed virtual string get_Name();
    public TValue get_Value();
    public void set_Value(TValue value);
    private sealed virtual override object Microsoft.AspNetCore.Mvc.Infrastructure.ICompatibilitySwitch.get_Value();
    private sealed virtual override void Microsoft.AspNetCore.Mvc.Infrastructure.ICompatibilitySwitch.set_Value(object value);
}
public abstract class Microsoft.AspNetCore.Mvc.Infrastructure.ConfigureCompatibilityOptions`1 : object {
    private ILogger _logger;
    [CompilerGeneratedAttribute]
private CompatibilityVersion <Version>k__BackingField;
    protected IReadOnlyDictionary`2<string, object> DefaultValues { get; }
    protected CompatibilityVersion Version { get; }
    protected ConfigureCompatibilityOptions`1(ILoggerFactory loggerFactory, IOptions`1<MvcCompatibilityOptions> compatibilityOptions);
    protected abstract virtual IReadOnlyDictionary`2<string, object> get_DefaultValues();
    [CompilerGeneratedAttribute]
protected CompatibilityVersion get_Version();
    public virtual void PostConfigure(string name, TOptions options);
    private void ConfigureSwitch(ICompatibilitySwitch switch, IReadOnlyDictionary`2<string, object> defaultValues);
}
public class Microsoft.AspNetCore.Mvc.Infrastructure.ContentResultExecutor : object {
    private static string DefaultContentType;
    private ILogger`1<ContentResultExecutor> _logger;
    private IHttpResponseStreamWriterFactory _httpResponseStreamWriterFactory;
    public ContentResultExecutor(ILogger`1<ContentResultExecutor> logger, IHttpResponseStreamWriterFactory httpResponseStreamWriterFactory);
    [AsyncStateMachineAttribute("Microsoft.AspNetCore.Mvc.Infrastructure.ContentResultExecutor/<ExecuteAsync>d__4")]
public virtual Task ExecuteAsync(ActionContext context, ContentResult result);
}
public class Microsoft.AspNetCore.Mvc.Infrastructure.DefaultOutputFormatterSelector : OutputFormatterSelector {
    private static Comparison`1<MediaTypeSegmentWithQuality> _sortFunction;
    private ILogger _logger;
    private IList`1<IOutputFormatter> _formatters;
    private bool _respectBrowserAcceptHeader;
    private bool _returnHttpNotAcceptable;
    public DefaultOutputFormatterSelector(IOptions`1<MvcOptions> options, ILoggerFactory loggerFactory);
    private static DefaultOutputFormatterSelector();
    public virtual IOutputFormatter SelectFormatter(OutputFormatterCanWriteContext context, IList`1<IOutputFormatter> formatters, MediaTypeCollection contentTypes);
    private List`1<MediaTypeSegmentWithQuality> GetAcceptableMediaTypes(HttpRequest request);
    private IOutputFormatter SelectFormatterNotUsingContentType(OutputFormatterCanWriteContext formatterContext, IList`1<IOutputFormatter> formatters);
    private IOutputFormatter SelectFormatterUsingSortedAcceptHeaders(OutputFormatterCanWriteContext formatterContext, IList`1<IOutputFormatter> formatters, IList`1<MediaTypeSegmentWithQuality> sortedAcceptHeaders);
    private IOutputFormatter SelectFormatterUsingAnyAcceptableContentType(OutputFormatterCanWriteContext formatterContext, IList`1<IOutputFormatter> formatters, MediaTypeCollection acceptableContentTypes);
    private IOutputFormatter SelectFormatterUsingSortedAcceptHeadersAndContentTypes(OutputFormatterCanWriteContext formatterContext, IList`1<IOutputFormatter> formatters, IList`1<MediaTypeSegmentWithQuality> sortedAcceptableContentTypes, MediaTypeCollection possibleOutputContentTypes);
    private void ValidateContentTypes(MediaTypeCollection contentTypes);
}
public class Microsoft.AspNetCore.Mvc.Infrastructure.FileContentResultExecutor : FileResultExecutorBase {
    public FileContentResultExecutor(ILoggerFactory loggerFactory);
    public virtual Task ExecuteAsync(ActionContext context, FileContentResult result);
    protected virtual Task WriteFileAsync(ActionContext context, FileContentResult result, RangeItemHeaderValue range, long rangeLength);
}
public class Microsoft.AspNetCore.Mvc.Infrastructure.FileResultExecutorBase : object {
    private static string AcceptRangeHeaderValue;
    protected static int BufferSize;
    [CompilerGeneratedAttribute]
private ILogger <Logger>k__BackingField;
    protected ILogger Logger { get; }
    public FileResultExecutorBase(ILogger logger);
    [CompilerGeneratedAttribute]
protected ILogger get_Logger();
    protected virtual ValueTuple`3<RangeItemHeaderValue, long, bool> SetHeadersAndLog(ActionContext context, FileResult result, Nullable`1<long> fileLength, bool enableRangeProcessing, Nullable`1<DateTimeOffset> lastModified, EntityTagHeaderValue etag);
    private static void SetContentType(ActionContext context, FileResult result);
    private static void SetContentDispositionHeader(ActionContext context, FileResult result);
    private static void SetLastModifiedAndEtagHeaders(HttpResponse response, Nullable`1<DateTimeOffset> lastModified, EntityTagHeaderValue etag);
    private static void SetAcceptRangeHeader(HttpResponse response);
    internal bool IfRangeValid(RequestHeaders httpRequestHeaders, Nullable`1<DateTimeOffset> lastModified, EntityTagHeaderValue etag);
    internal PreconditionState GetPreconditionState(RequestHeaders httpRequestHeaders, Nullable`1<DateTimeOffset> lastModified, EntityTagHeaderValue etag);
    private static PreconditionState GetEtagMatchState(bool useStrongComparison, IList`1<EntityTagHeaderValue> etagHeader, EntityTagHeaderValue etag, PreconditionState matchFoundState, PreconditionState matchNotFoundState);
    private static PreconditionState GetMaxPreconditionState(PreconditionState[] states);
    private ValueTuple`3<RangeItemHeaderValue, long, bool> SetRangeHeaders(ActionContext context, RequestHeaders httpRequestHeaders, long fileLength);
    private static long SetContentLength(HttpResponse response, RangeItemHeaderValue range);
    protected static ILogger CreateLogger(ILoggerFactory factory);
    [AsyncStateMachineAttribute("Microsoft.AspNetCore.Mvc.Infrastructure.FileResultExecutorBase/<WriteFileAsync>d__19")]
protected static Task WriteFileAsync(HttpContext context, Stream fileStream, RangeItemHeaderValue range, long rangeLength);
    private static DateTimeOffset RoundDownToWholeSeconds(DateTimeOffset dateTimeOffset);
}
public class Microsoft.AspNetCore.Mvc.Infrastructure.FileStreamResultExecutor : FileResultExecutorBase {
    public FileStreamResultExecutor(ILoggerFactory loggerFactory);
    [AsyncStateMachineAttribute("Microsoft.AspNetCore.Mvc.Infrastructure.FileStreamResultExecutor/<ExecuteAsync>d__1")]
public virtual Task ExecuteAsync(ActionContext context, FileStreamResult result);
    protected virtual Task WriteFileAsync(ActionContext context, FileStreamResult result, RangeItemHeaderValue range, long rangeLength);
}
public interface Microsoft.AspNetCore.Mvc.Infrastructure.IActionContextAccessor {
    public ActionContext ActionContext { get; public set; }
    public abstract virtual ActionContext get_ActionContext();
    public abstract virtual void set_ActionContext(ActionContext value);
}
public interface Microsoft.AspNetCore.Mvc.Infrastructure.IActionDescriptorChangeProvider {
    public abstract virtual IChangeToken GetChangeToken();
}
public interface Microsoft.AspNetCore.Mvc.Infrastructure.IActionDescriptorCollectionProvider {
    public ActionDescriptorCollection ActionDescriptors { get; }
    public abstract virtual ActionDescriptorCollection get_ActionDescriptors();
}
public interface Microsoft.AspNetCore.Mvc.Infrastructure.IActionInvokerFactory {
    public abstract virtual IActionInvoker CreateInvoker(ActionContext actionContext);
}
public interface Microsoft.AspNetCore.Mvc.Infrastructure.IActionResultExecutor`1 {
    public abstract virtual Task ExecuteAsync(ActionContext context, TResult result);
}
public interface Microsoft.AspNetCore.Mvc.Infrastructure.IActionResultTypeMapper {
    public abstract virtual Type GetResultDataType(Type returnType);
    public abstract virtual IActionResult Convert(object value, Type returnType);
}
public interface Microsoft.AspNetCore.Mvc.Infrastructure.IActionSelector {
    public abstract virtual IReadOnlyList`1<ActionDescriptor> SelectCandidates(RouteContext context);
    public abstract virtual ActionDescriptor SelectBestCandidate(RouteContext context, IReadOnlyList`1<ActionDescriptor> candidates);
}
public interface Microsoft.AspNetCore.Mvc.Infrastructure.ICompatibilitySwitch {
    public bool IsValueSet { get; }
    public string Name { get; }
    public object Value { get; public set; }
    public abstract virtual bool get_IsValueSet();
    public abstract virtual string get_Name();
    public abstract virtual object get_Value();
    public abstract virtual void set_Value(object value);
}
public interface Microsoft.AspNetCore.Mvc.Infrastructure.IConvertToActionResult {
    public abstract virtual IActionResult Convert();
}
public interface Microsoft.AspNetCore.Mvc.Infrastructure.IHttpRequestStreamReaderFactory {
    public abstract virtual TextReader CreateReader(Stream stream, Encoding encoding);
}
public interface Microsoft.AspNetCore.Mvc.Infrastructure.IHttpResponseStreamWriterFactory {
    public abstract virtual TextWriter CreateWriter(Stream stream, Encoding encoding);
}
public class Microsoft.AspNetCore.Mvc.Infrastructure.LocalRedirectResultExecutor : object {
    private ILogger _logger;
    private IUrlHelperFactory _urlHelperFactory;
    public LocalRedirectResultExecutor(ILoggerFactory loggerFactory, IUrlHelperFactory urlHelperFactory);
    public virtual Task ExecuteAsync(ActionContext context, LocalRedirectResult result);
}
public class Microsoft.AspNetCore.Mvc.Infrastructure.ModelStateInvalidFilter : object {
    private ApiBehaviorOptions _apiBehaviorOptions;
    private ILogger _logger;
    public int Order { get; }
    public bool IsReusable { get; }
    public ModelStateInvalidFilter(ApiBehaviorOptions apiBehaviorOptions, ILogger logger);
    public sealed virtual int get_Order();
    public bool get_IsReusable();
    public sealed virtual void OnActionExecuted(ActionExecutedContext context);
    public sealed virtual void OnActionExecuting(ActionExecutingContext context);
}
public class Microsoft.AspNetCore.Mvc.Infrastructure.MvcCompatibilityOptions : object {
    [CompilerGeneratedAttribute]
private CompatibilityVersion <CompatibilityVersion>k__BackingField;
    public CompatibilityVersion CompatibilityVersion { get; public set; }
    [CompilerGeneratedAttribute]
public CompatibilityVersion get_CompatibilityVersion();
    [CompilerGeneratedAttribute]
public void set_CompatibilityVersion(CompatibilityVersion value);
}
internal class Microsoft.AspNetCore.Mvc.Infrastructure.MvcOptionsConfigureCompatibilityOptions : ConfigureCompatibilityOptions`1<MvcOptions> {
    protected IReadOnlyDictionary`2<string, object> DefaultValues { get; }
    public MvcOptionsConfigureCompatibilityOptions(ILoggerFactory loggerFactory, IOptions`1<MvcCompatibilityOptions> compatibilityOptions);
    protected virtual IReadOnlyDictionary`2<string, object> get_DefaultValues();
}
public class Microsoft.AspNetCore.Mvc.Infrastructure.ObjectResultExecutor : object {
    [CompilerGeneratedAttribute]
private ILogger <Logger>k__BackingField;
    [CompilerGeneratedAttribute]
private OutputFormatterSelector <FormatterSelector>k__BackingField;
    [CompilerGeneratedAttribute]
private Func`3<Stream, Encoding, TextWriter> <WriterFactory>k__BackingField;
    protected ILogger Logger { get; }
    protected OutputFormatterSelector FormatterSelector { get; }
    protected Func`3<Stream, Encoding, TextWriter> WriterFactory { get; }
    public ObjectResultExecutor(OutputFormatterSelector formatterSelector, IHttpResponseStreamWriterFactory writerFactory, ILoggerFactory loggerFactory);
    [CompilerGeneratedAttribute]
protected ILogger get_Logger();
    [CompilerGeneratedAttribute]
protected OutputFormatterSelector get_FormatterSelector();
    [CompilerGeneratedAttribute]
protected Func`3<Stream, Encoding, TextWriter> get_WriterFactory();
    public virtual Task ExecuteAsync(ActionContext context, ObjectResult result);
}
public abstract class Microsoft.AspNetCore.Mvc.Infrastructure.OutputFormatterSelector : object {
    public abstract virtual IOutputFormatter SelectFormatter(OutputFormatterCanWriteContext context, IList`1<IOutputFormatter> formatters, MediaTypeCollection mediaTypes);
}
public class Microsoft.AspNetCore.Mvc.Infrastructure.PhysicalFileResultExecutor : FileResultExecutorBase {
    public PhysicalFileResultExecutor(ILoggerFactory loggerFactory);
    public virtual Task ExecuteAsync(ActionContext context, PhysicalFileResult result);
    protected virtual Task WriteFileAsync(ActionContext context, PhysicalFileResult result, RangeItemHeaderValue range, long rangeLength);
    protected virtual Stream GetFileStream(string path);
    protected virtual FileMetadata GetFileInfo(string path);
}
public class Microsoft.AspNetCore.Mvc.Infrastructure.RedirectResultExecutor : object {
    private ILogger _logger;
    private IUrlHelperFactory _urlHelperFactory;
    public RedirectResultExecutor(ILoggerFactory loggerFactory, IUrlHelperFactory urlHelperFactory);
    public virtual Task ExecuteAsync(ActionContext context, RedirectResult result);
}
public class Microsoft.AspNetCore.Mvc.Infrastructure.RedirectToActionResultExecutor : object {
    private ILogger _logger;
    private IUrlHelperFactory _urlHelperFactory;
    public RedirectToActionResultExecutor(ILoggerFactory loggerFactory, IUrlHelperFactory urlHelperFactory);
    public virtual Task ExecuteAsync(ActionContext context, RedirectToActionResult result);
}
public class Microsoft.AspNetCore.Mvc.Infrastructure.RedirectToPageResultExecutor : object {
    private ILogger _logger;
    private IUrlHelperFactory _urlHelperFactory;
    public RedirectToPageResultExecutor(ILoggerFactory loggerFactory, IUrlHelperFactory urlHelperFactory);
    public virtual Task ExecuteAsync(ActionContext context, RedirectToPageResult result);
}
public class Microsoft.AspNetCore.Mvc.Infrastructure.RedirectToRouteResultExecutor : object {
    private ILogger _logger;
    private IUrlHelperFactory _urlHelperFactory;
    public RedirectToRouteResultExecutor(ILoggerFactory loggerFactory, IUrlHelperFactory urlHelperFactory);
    public virtual Task ExecuteAsync(ActionContext context, RedirectToRouteResult result);
}
public class Microsoft.AspNetCore.Mvc.Infrastructure.VirtualFileResultExecutor : FileResultExecutorBase {
    private IHostingEnvironment _hostingEnvironment;
    public VirtualFileResultExecutor(ILoggerFactory loggerFactory, IHostingEnvironment hostingEnvironment);
    public virtual Task ExecuteAsync(ActionContext context, VirtualFileResult result);
    protected virtual Task WriteFileAsync(ActionContext context, VirtualFileResult result, IFileInfo fileInfo, RangeItemHeaderValue range, long rangeLength);
    private IFileInfo GetFileInformation(VirtualFileResult result);
    private IFileProvider GetFileProvider(VirtualFileResult result);
    protected virtual Stream GetFileStream(IFileInfo fileInfo);
}
public static class Microsoft.AspNetCore.Mvc.Internal.ActionAttributeRouteModel : object {
    [IteratorStateMachineAttribute("Microsoft.AspNetCore.Mvc.Internal.ActionAttributeRouteModel/<GetAttributeRoutes>d__0")]
public static IEnumerable`1<ValueTuple`3<AttributeRouteModel, SelectorModel, SelectorModel>> GetAttributeRoutes(ActionModel actionModel);
}
public class Microsoft.AspNetCore.Mvc.Internal.ActionConstraintCache : object {
    private IActionDescriptorCollectionProvider _collectionProvider;
    private IActionConstraintProvider[] _actionConstraintProviders;
    private InnerCache modreq(System.Runtime.CompilerServices.IsVolatile) _currentCache;
    private InnerCache CurrentCache { get; }
    public ActionConstraintCache(IActionDescriptorCollectionProvider collectionProvider, IEnumerable`1<IActionConstraintProvider> actionConstraintProviders);
    private InnerCache get_CurrentCache();
    public IReadOnlyList`1<IActionConstraint> GetActionConstraints(HttpContext httpContext, ActionDescriptor action);
    private IReadOnlyList`1<IActionConstraint> GetActionConstraintsFromEntry(CacheEntry entry, HttpContext httpContext, ActionDescriptor action);
    private void ExecuteProviders(HttpContext httpContext, ActionDescriptor action, List`1<ActionConstraintItem> items);
    private IReadOnlyList`1<IActionConstraint> ExtractActionConstraints(List`1<ActionConstraintItem> items);
}
public class Microsoft.AspNetCore.Mvc.Internal.ActionDescriptorCollectionProvider : object {
    private IActionDescriptorProvider[] _actionDescriptorProviders;
    private IActionDescriptorChangeProvider[] _actionDescriptorChangeProviders;
    private ActionDescriptorCollection _collection;
    private int _version;
    public ActionDescriptorCollection ActionDescriptors { get; }
    public ActionDescriptorCollectionProvider(IEnumerable`1<IActionDescriptorProvider> actionDescriptorProviders, IEnumerable`1<IActionDescriptorChangeProvider> actionDescriptorChangeProviders);
    private IChangeToken GetCompositeChangeToken();
    public sealed virtual ActionDescriptorCollection get_ActionDescriptors();
    private void UpdateCollection();
}
public class Microsoft.AspNetCore.Mvc.Internal.ActionInvokerFactory : object {
    private IActionInvokerProvider[] _actionInvokerProviders;
    public ActionInvokerFactory(IEnumerable`1<IActionInvokerProvider> actionInvokerProviders);
    public sealed virtual IActionInvoker CreateInvoker(ActionContext actionContext);
}
internal abstract class Microsoft.AspNetCore.Mvc.Internal.ActionMethodExecutor : object {
    private static ActionMethodExecutor[] Executors;
    private static ActionMethodExecutor();
    public abstract virtual ValueTask`1<IActionResult> Execute(IActionResultTypeMapper mapper, ObjectMethodExecutor executor, object controller, Object[] arguments);
    protected abstract virtual bool CanExecute(ObjectMethodExecutor executor);
    public static ActionMethodExecutor GetExecutor(ObjectMethodExecutor executor);
    private static void EnsureActionResultNotNull(ObjectMethodExecutor executor, IActionResult actionResult);
    private IActionResult ConvertToActionResult(IActionResultTypeMapper mapper, object returnValue, Type declaredType);
}
public class Microsoft.AspNetCore.Mvc.Internal.ActionResultTypeMapper : object {
    public sealed virtual Type GetResultDataType(Type returnType);
    public sealed virtual IActionResult Convert(object value, Type returnType);
}
public class Microsoft.AspNetCore.Mvc.Internal.ActionSelector : object {
    private static IReadOnlyList`1<ActionDescriptor> EmptyActions;
    private IActionDescriptorCollectionProvider _actionDescriptorCollectionProvider;
    private ActionConstraintCache _actionConstraintCache;
    private ILogger _logger;
    private Cache _cache;
    private Cache Current { get; }
    public ActionSelector(IActionDescriptorCollectionProvider actionDescriptorCollectionProvider, ActionConstraintCache actionConstraintCache, ILoggerFactory loggerFactory);
    private static ActionSelector();
    private Cache get_Current();
    public sealed virtual IReadOnlyList`1<ActionDescriptor> SelectCandidates(RouteContext context);
    public sealed virtual ActionDescriptor SelectBestCandidate(RouteContext context, IReadOnlyList`1<ActionDescriptor> candidates);
    protected virtual IReadOnlyList`1<ActionDescriptor> SelectBestActions(IReadOnlyList`1<ActionDescriptor> actions);
    private IReadOnlyList`1<ActionDescriptor> EvaluateActionConstraints(RouteContext context, IReadOnlyList`1<ActionDescriptor> actions);
    private IReadOnlyList`1<ActionSelectorCandidate> EvaluateActionConstraintsCore(RouteContext context, IReadOnlyList`1<ActionSelectorCandidate> candidates, Nullable`1<int> startingOrder);
}
public class Microsoft.AspNetCore.Mvc.Internal.AmbiguousActionException : InvalidOperationException {
    public AmbiguousActionException(string message);
    protected AmbiguousActionException(SerializationInfo info, StreamingContext context);
}
public class Microsoft.AspNetCore.Mvc.Internal.ApiBehaviorApplicationModelProvider : object {
    private ApiBehaviorOptions _apiBehaviorOptions;
    private IModelMetadataProvider _modelMetadataProvider;
    private ModelStateInvalidFilter _modelStateInvalidFilter;
    private ILogger _logger;
    public int Order { get; }
    public ApiBehaviorApplicationModelProvider(IOptions`1<ApiBehaviorOptions> apiBehaviorOptions, IModelMetadataProvider modelMetadataProvider, ILoggerFactory loggerFactory);
    public sealed virtual int get_Order();
    public sealed virtual void OnProvidersExecuted(ApplicationModelProviderContext context);
    public sealed virtual void OnProvidersExecuting(ApplicationModelProviderContext context);
    internal void AddMultipartFormDataConsumesAttribute(ActionModel actionModel);
    private static void EnsureActionIsAttributeRouted(bool controllerHasSelectorModel, ActionModel actionModel);
    private void AddInvalidModelStateFilter(ActionModel actionModel);
    internal void InferParameterBindingSources(ActionModel actionModel);
    internal void InferBoundPropertyModelPrefixes(ControllerModel controllerModel);
    internal void InferParameterModelPrefixes(ActionModel actionModel);
    internal BindingSource InferBindingSourceForParameter(ParameterModel parameter);
    private bool ParameterExistsInAnyRoute(ActionModel actionModel, string parameterName);
    private bool IsComplexTypeParameter(ParameterModel parameter);
}
public class Microsoft.AspNetCore.Mvc.Internal.ApiBehaviorOptionsSetup : object {
    public sealed virtual void Configure(ApiBehaviorOptions options);
}
public class Microsoft.AspNetCore.Mvc.Internal.ApiDescriptionActionData : object {
    [CompilerGeneratedAttribute]
private string <GroupName>k__BackingField;
    public string GroupName { get; public set; }
    [CompilerGeneratedAttribute]
public string get_GroupName();
    [CompilerGeneratedAttribute]
public void set_GroupName(string value);
}
public static class Microsoft.AspNetCore.Mvc.Internal.ApplicationModelConventions : object {
    public static void ApplyConventions(ApplicationModel applicationModel, IEnumerable`1<IApplicationModelConvention> conventions);
    private static IEnumerable`1<TConvention> GetConventions(IEnumerable`1<IApplicationModelConvention> conventions, IReadOnlyList`1<object> attributes);
}
public class Microsoft.AspNetCore.Mvc.Internal.AttributeRoute : object {
    private IActionDescriptorCollectionProvider _actionDescriptorCollectionProvider;
    private IServiceProvider _services;
    private Func`2<ActionDescriptor[], IRouter> _handlerFactory;
    private TreeRouter _router;
    public AttributeRoute(IActionDescriptorCollectionProvider actionDescriptorCollectionProvider, IServiceProvider services, Func`2<ActionDescriptor[], IRouter> handlerFactory);
    public sealed virtual VirtualPathData GetVirtualPath(VirtualPathContext context);
    public sealed virtual Task RouteAsync(RouteContext context);
    private TreeRouter GetTreeRouter();
    internal void AddEntries(TreeRouteBuilder builder, ActionDescriptorCollection actions);
    private static IEnumerable`1<IGrouping`2<RouteInfo, ActionDescriptor>> GetInboundRouteGroups(List`1<RouteInfo> routeInfos);
    private static List`1<RouteInfo> GetRouteInfos(IReadOnlyList`1<ActionDescriptor> actions);
    private static RouteInfo GetRouteInfo(Dictionary`2<string, RouteTemplate> templateCache, ActionDescriptor action);
}
public static class Microsoft.AspNetCore.Mvc.Internal.AttributeRouting : object {
    public static IRouter CreateAttributeMegaRoute(IServiceProvider services);
}
public class Microsoft.AspNetCore.Mvc.Internal.AuthorizationApplicationModelProvider : object {
    private IAuthorizationPolicyProvider _policyProvider;
    public int Order { get; }
    public AuthorizationApplicationModelProvider(IAuthorizationPolicyProvider policyProvider);
    public sealed virtual int get_Order();
    public sealed virtual void OnProvidersExecuted(ApplicationModelProviderContext context);
    public sealed virtual void OnProvidersExecuting(ApplicationModelProviderContext context);
    public static AuthorizeFilter GetFilter(IAuthorizationPolicyProvider policyProvider, IEnumerable`1<IAuthorizeData> authData);
}
public class Microsoft.AspNetCore.Mvc.Internal.ClientValidatorCache : object {
    private ConcurrentDictionary`2<ModelMetadata, CacheEntry> _cacheEntries;
    public IReadOnlyList`1<IClientModelValidator> GetValidators(ModelMetadata metadata, IClientModelValidatorProvider validatorProvider);
    private IReadOnlyList`1<IClientModelValidator> GetValidatorsFromEntry(CacheEntry entry, ModelMetadata metadata, IClientModelValidatorProvider validationProvider);
    private void ExecuteProvider(IClientModelValidatorProvider validatorProvider, ModelMetadata metadata, List`1<ClientValidatorItem> items);
    private IReadOnlyList`1<IClientModelValidator> ExtractValidators(List`1<ClientValidatorItem> items);
}
public static class Microsoft.AspNetCore.Mvc.Internal.ControllerActionDescriptorBuilder : object {
    private static int DefaultAttributeRouteOrder;
    public static IList`1<ControllerActionDescriptor> Build(ApplicationModel application);
    private static IList`1<ControllerActionDescriptor> CreateActionDescriptors(ApplicationModel application, ControllerModel controller, ActionModel action);
    private static ControllerActionDescriptor CreateActionDescriptor(ActionModel action, AttributeRouteModel routeModel);
    private static ParameterDescriptor CreateParameterDescriptor(ParameterModel parameterModel);
    private static ParameterDescriptor CreateParameterDescriptor(PropertyModel propertyModel);
    private static void AddApiExplorerInfo(ControllerActionDescriptor actionDescriptor, ApplicationModel application, ControllerModel controller, ActionModel action);
    private static void AddProperties(ControllerActionDescriptor actionDescriptor, ActionModel action, ControllerModel controller, ApplicationModel application);
    private static void AddActionFilters(ControllerActionDescriptor actionDescriptor, IEnumerable`1<IFilterMetadata> actionFilters, IEnumerable`1<IFilterMetadata> controllerFilters, IEnumerable`1<IFilterMetadata> globalFilters);
    private static AttributeRouteInfo CreateAttributeRouteInfo(AttributeRouteModel routeModel);
    private static void AddActionConstraints(ControllerActionDescriptor actionDescriptor, SelectorModel selectorModel, IEnumerable`1<IActionConstraintMetadata> controllerConstraints);
    public static void AddRouteValues(ControllerActionDescriptor actionDescriptor, ControllerModel controller, ActionModel action);
    private static void ReplaceAttributeRouteTokens(ControllerActionDescriptor actionDescriptor, IList`1<string> routeTemplateErrors);
    private static void AddActionToNamedGroup(IDictionary`2<string, IList`1<ActionDescriptor>> actionsByRouteName, string routeName, ControllerActionDescriptor actionDescriptor);
    private static bool IsAttributeRoutedAction(ControllerActionDescriptor actionDescriptor);
    private static IList`1<string> AddErrorNumbers(IEnumerable`1<string> namedRoutedErrors);
    private static IList`1<string> ValidateNamedAttributeRoutedActions(IDictionary`2<string, IList`1<ActionDescriptor>> actionsGroupedByRouteName);
    private static void ValidateActionGroupConfiguration(IDictionary`2<MethodInfo, IDictionary`2<ActionModel, IList`1<ControllerActionDescriptor>>> methodMap, ControllerActionDescriptor actionDescriptor, IDictionary`2<MethodInfo, string> routingConfigurationErrors);
    private static string CreateMixedRoutedActionDescriptorsErrorMessage(ControllerActionDescriptor actionDescriptor, IDictionary`2<ActionModel, IList`1<ControllerActionDescriptor>> actionsForMethod);
    private static string CreateAttributeRoutingAggregateErrorMessage(IEnumerable`1<string> individualErrors);
}
public class Microsoft.AspNetCore.Mvc.Internal.ControllerActionDescriptorProvider : object {
    private ApplicationPartManager _partManager;
    private IApplicationModelProvider[] _applicationModelProviders;
    private IEnumerable`1<IApplicationModelConvention> _conventions;
    public int Order { get; }
    public ControllerActionDescriptorProvider(ApplicationPartManager partManager, IEnumerable`1<IApplicationModelProvider> applicationModelProviders, IOptions`1<MvcOptions> optionsAccessor);
    public sealed virtual int get_Order();
    public sealed virtual void OnProvidersExecuting(ActionDescriptorProviderContext context);
    public sealed virtual void OnProvidersExecuted(ActionDescriptorProviderContext context);
    protected internal IEnumerable`1<ControllerActionDescriptor> GetDescriptors();
    protected internal ApplicationModel BuildModel();
    private IEnumerable`1<TypeInfo> GetControllerTypes();
}
public class Microsoft.AspNetCore.Mvc.Internal.ControllerActionFilter : object {
    [CompilerGeneratedAttribute]
private int <Order>k__BackingField;
    public int Order { get; public set; }
    [CompilerGeneratedAttribute]
public sealed virtual int get_Order();
    [CompilerGeneratedAttribute]
public void set_Order(int value);
    public sealed virtual Task OnActionExecutionAsync(ActionExecutingContext context, ActionExecutionDelegate next);
    [AsyncStateMachineAttribute("Microsoft.AspNetCore.Mvc.Internal.ControllerActionFilter/<ExecuteActionFilter>d__5")]
private static Task ExecuteActionFilter(ActionExecutingContext context, ActionExecutionDelegate next, IActionFilter actionFilter);
}
public class Microsoft.AspNetCore.Mvc.Internal.ControllerActionInvoker : ResourceInvoker {
    private ControllerActionInvokerCacheEntry _cacheEntry;
    private ControllerContext _controllerContext;
    private Dictionary`2<string, object> _arguments;
    private ActionExecutingContext _actionExecutingContext;
    private ActionExecutedContext _actionExecutedContext;
    internal ControllerContext ControllerContext { get; }
    internal ControllerActionInvoker(ILogger logger, DiagnosticSource diagnosticSource, IActionResultTypeMapper mapper, ControllerContext controllerContext, ControllerActionInvokerCacheEntry cacheEntry, IFilterMetadata[] filters);
    internal ControllerContext get_ControllerContext();
    protected virtual void ReleaseResources();
    private Task Next(State& next, Scope& scope, Object& state, Boolean& isCompleted);
    [AsyncStateMachineAttribute("Microsoft.AspNetCore.Mvc.Internal.ControllerActionInvoker/<InvokeNextActionFilterAsync>d__10")]
private Task InvokeNextActionFilterAsync();
    [AsyncStateMachineAttribute("Microsoft.AspNetCore.Mvc.Internal.ControllerActionInvoker/<InvokeNextActionFilterAwaitedAsync>d__11")]
private Task`1<ActionExecutedContext> InvokeNextActionFilterAwaitedAsync();
    [AsyncStateMachineAttribute("Microsoft.AspNetCore.Mvc.Internal.ControllerActionInvoker/<InvokeActionMethodAsync>d__12")]
private Task InvokeActionMethodAsync();
    [AsyncStateMachineAttribute("Microsoft.AspNetCore.Mvc.Internal.ControllerActionInvoker/<InvokeInnerFilterAsync>d__13")]
protected virtual Task InvokeInnerFilterAsync();
    private static void Rethrow(ActionExecutedContext context);
    private Task BindArgumentsAsync();
    private static Object[] PrepareArguments(IDictionary`2<string, object> actionParameters, ObjectMethodExecutor actionMethodExecutor);
}
public class Microsoft.AspNetCore.Mvc.Internal.ControllerActionInvokerCache : object {
    private IActionDescriptorCollectionProvider _collectionProvider;
    private ParameterBinder _parameterBinder;
    private IModelBinderFactory _modelBinderFactory;
    private IModelMetadataProvider _modelMetadataProvider;
    private IFilterProvider[] _filterProviders;
    private IControllerFactoryProvider _controllerFactoryProvider;
    private MvcOptions _mvcOptions;
    private InnerCache modreq(System.Runtime.CompilerServices.IsVolatile) _currentCache;
    private InnerCache CurrentCache { get; }
    public ControllerActionInvokerCache(IActionDescriptorCollectionProvider collectionProvider, ParameterBinder parameterBinder, IModelBinderFactory modelBinderFactory, IModelMetadataProvider modelMetadataProvider, IEnumerable`1<IFilterProvider> filterProviders, IControllerFactoryProvider factoryProvider, IOptions`1<MvcOptions> mvcOptions);
    private InnerCache get_CurrentCache();
    public ValueTuple`2<ControllerActionInvokerCacheEntry, IFilterMetadata[]> GetCachedResult(ControllerContext controllerContext);
}
public class Microsoft.AspNetCore.Mvc.Internal.ControllerActionInvokerCacheEntry : object {
    [CompilerGeneratedAttribute]
private FilterItem[] <CachedFilters>k__BackingField;
    [CompilerGeneratedAttribute]
private Func`2<ControllerContext, object> <ControllerFactory>k__BackingField;
    [CompilerGeneratedAttribute]
private Action`2<ControllerContext, object> <ControllerReleaser>k__BackingField;
    [CompilerGeneratedAttribute]
private ControllerBinderDelegate <ControllerBinderDelegate>k__BackingField;
    [CompilerGeneratedAttribute]
private ObjectMethodExecutor <ObjectMethodExecutor>k__BackingField;
    [CompilerGeneratedAttribute]
private ActionMethodExecutor <ActionMethodExecutor>k__BackingField;
    public FilterItem[] CachedFilters { get; }
    public Func`2<ControllerContext, object> ControllerFactory { get; }
    public Action`2<ControllerContext, object> ControllerReleaser { get; }
    public ControllerBinderDelegate ControllerBinderDelegate { get; }
    internal ObjectMethodExecutor ObjectMethodExecutor { get; }
    internal ActionMethodExecutor ActionMethodExecutor { get; }
    internal ControllerActionInvokerCacheEntry(FilterItem[] cachedFilters, Func`2<ControllerContext, object> controllerFactory, Action`2<ControllerContext, object> controllerReleaser, ControllerBinderDelegate controllerBinderDelegate, ObjectMethodExecutor objectMethodExecutor, ActionMethodExecutor actionMethodExecutor);
    [CompilerGeneratedAttribute]
public FilterItem[] get_CachedFilters();
    [CompilerGeneratedAttribute]
public Func`2<ControllerContext, object> get_ControllerFactory();
    [CompilerGeneratedAttribute]
public Action`2<ControllerContext, object> get_ControllerReleaser();
    [CompilerGeneratedAttribute]
public ControllerBinderDelegate get_ControllerBinderDelegate();
    [CompilerGeneratedAttribute]
internal ObjectMethodExecutor get_ObjectMethodExecutor();
    [CompilerGeneratedAttribute]
internal ActionMethodExecutor get_ActionMethodExecutor();
}
public class Microsoft.AspNetCore.Mvc.Internal.ControllerActionInvokerProvider : object {
    private ControllerActionInvokerCache _controllerActionInvokerCache;
    private IReadOnlyList`1<IValueProviderFactory> _valueProviderFactories;
    private int _maxModelValidationErrors;
    private ILogger _logger;
    private DiagnosticSource _diagnosticSource;
    private IActionResultTypeMapper _mapper;
    public int Order { get; }
    public ControllerActionInvokerProvider(ControllerActionInvokerCache controllerActionInvokerCache, IOptions`1<MvcOptions> optionsAccessor, ILoggerFactory loggerFactory, DiagnosticSource diagnosticSource, IActionResultTypeMapper mapper);
    public sealed virtual int get_Order();
    public sealed virtual void OnProvidersExecuting(ActionInvokerProviderContext context);
    public sealed virtual void OnProvidersExecuted(ActionInvokerProviderContext context);
}
public class Microsoft.AspNetCore.Mvc.Internal.ControllerBinderDelegate : MulticastDelegate {
    public ControllerBinderDelegate(object object, IntPtr method);
    public virtual Task Invoke(ControllerContext controllerContext, object controller, Dictionary`2<string, object> arguments);
    public virtual IAsyncResult BeginInvoke(ControllerContext controllerContext, object controller, Dictionary`2<string, object> arguments, AsyncCallback callback, object object);
    public virtual Task EndInvoke(IAsyncResult result);
}
public static class Microsoft.AspNetCore.Mvc.Internal.ControllerBinderDelegateProvider : object {
    public static ControllerBinderDelegate CreateBinderDelegate(ParameterBinder parameterBinder, IModelBinderFactory modelBinderFactory, IModelMetadataProvider modelMetadataProvider, ControllerActionDescriptor actionDescriptor, MvcOptions mvcOptions);
    private static BinderItem[] GetParameterBindingInfo(IModelBinderFactory modelBinderFactory, IModelMetadataProvider modelMetadataProvider, ControllerActionDescriptor actionDescriptor, MvcOptions mvcOptions);
    private static BinderItem[] GetPropertyBindingInfo(IModelBinderFactory modelBinderFactory, IModelMetadataProvider modelMetadataProvider, ControllerActionDescriptor actionDescriptor);
}
public class Microsoft.AspNetCore.Mvc.Internal.ControllerResultFilter : object {
    [CompilerGeneratedAttribute]
private int <Order>k__BackingField;
    public int Order { get; public set; }
    [CompilerGeneratedAttribute]
public sealed virtual int get_Order();
    [CompilerGeneratedAttribute]
public void set_Order(int value);
    public sealed virtual Task OnResultExecutionAsync(ResultExecutingContext context, ResultExecutionDelegate next);
    [AsyncStateMachineAttribute("Microsoft.AspNetCore.Mvc.Internal.ControllerResultFilter/<ExecuteResultFilter>d__5")]
private static Task ExecuteResultFilter(ResultExecutingContext context, ResultExecutionDelegate next, IResultFilter resultFilter);
}
[DefaultMemberAttribute("Item")]
public class Microsoft.AspNetCore.Mvc.Internal.CopyOnWriteList`1 : object {
    private IReadOnlyList`1<T> _source;
    private List`1<T> _copy;
    protected IReadOnlyList`1<T> Readable { get; }
    protected List`1<T> Writable { get; }
    public T Item { get; public set; }
    public int Count { get; }
    public bool IsReadOnly { get; }
    public CopyOnWriteList`1(IReadOnlyList`1<T> source);
    protected IReadOnlyList`1<T> get_Readable();
    protected List`1<T> get_Writable();
    public sealed virtual T get_Item(int index);
    public sealed virtual void set_Item(int index, T value);
    public sealed virtual int get_Count();
    public sealed virtual bool get_IsReadOnly();
    public sealed virtual void Add(T item);
    public sealed virtual void Clear();
    public sealed virtual bool Contains(T item);
    public sealed virtual void CopyTo(T[] array, int arrayIndex);
    public sealed virtual IEnumerator`1<T> GetEnumerator();
    public sealed virtual int IndexOf(T item);
    public sealed virtual void Insert(int index, T item);
    public sealed virtual bool Remove(T item);
    public sealed virtual void RemoveAt(int index);
    private sealed virtual override IEnumerator System.Collections.IEnumerable.GetEnumerator();
}
public class Microsoft.AspNetCore.Mvc.Internal.DefaultActionConstraintProvider : object {
    public int Order { get; }
    public sealed virtual int get_Order();
    public sealed virtual void OnProvidersExecuting(ActionConstraintProviderContext context);
    public sealed virtual void OnProvidersExecuted(ActionConstraintProviderContext context);
    private void ProvideConstraint(ActionConstraintItem item, IServiceProvider services);
}
public class Microsoft.AspNetCore.Mvc.Internal.DefaultApplicationModelProvider : object {
    private MvcOptions _mvcOptions;
    private IModelMetadataProvider _modelMetadataProvider;
    private Func`2<ActionContext, bool> _supportsAllRequests;
    private Func`2<ActionContext, bool> _supportsNonGetRequests;
    public int Order { get; }
    public DefaultApplicationModelProvider(IOptions`1<MvcOptions> mvcOptionsAccessor, IModelMetadataProvider modelMetadataProvider);
    public sealed virtual int get_Order();
    public virtual void OnProvidersExecuting(ApplicationModelProviderContext context);
    public virtual void OnProvidersExecuted(ApplicationModelProviderContext context);
    protected virtual ControllerModel CreateControllerModel(TypeInfo typeInfo);
    protected virtual PropertyModel CreatePropertyModel(PropertyInfo propertyInfo);
    protected virtual ActionModel CreateActionModel(TypeInfo typeInfo, MethodInfo methodInfo);
    protected virtual bool IsAction(TypeInfo typeInfo, MethodInfo methodInfo);
    protected virtual ParameterModel CreateParameterModel(ParameterInfo parameterInfo);
    private IList`1<SelectorModel> CreateSelectors(IList`1<object> attributes);
    private static bool InRouteProviders(List`1<IRouteTemplateProvider> routeProviders, object attribute);
    private static SelectorModel CreateSelectorModel(IRouteTemplateProvider route, IList`1<object> attributes);
    private bool IsIDisposableMethod(MethodInfo methodInfo);
    private bool IsSilentRouteAttribute(IRouteTemplateProvider routeTemplateProvider);
    private static void AddRange(IList`1<T> list, IEnumerable`1<T> items);
}
public class Microsoft.AspNetCore.Mvc.Internal.DefaultBindingMetadataProvider : object {
    public sealed virtual void CreateBindingMetadata(BindingMetadataProviderContext context);
    private static BindingBehaviorAttribute FindBindingBehavior(BindingMetadataProviderContext context);
}
public class Microsoft.AspNetCore.Mvc.Internal.DefaultCollectionValidationStrategy : object {
    private static MethodInfo _getEnumerator;
    public static DefaultCollectionValidationStrategy Instance;
    private ConcurrentDictionary`2<Type, Func`2<object, IEnumerator>> _genericGetEnumeratorCache;
    private static DefaultCollectionValidationStrategy();
    public sealed virtual IEnumerator`1<ValidationEntry> GetChildren(ModelMetadata metadata, string key, object model);
    public IEnumerator GetEnumeratorForElementType(ModelMetadata metadata, object model);
    private static IEnumerator GetEnumerator(object model);
}
public class Microsoft.AspNetCore.Mvc.Internal.DefaultComplexObjectValidationStrategy : object {
    private static bool IsMono;
    public static IValidationStrategy Instance;
    private static DefaultComplexObjectValidationStrategy();
    public sealed virtual IEnumerator`1<ValidationEntry> GetChildren(ModelMetadata metadata, string key, object model);
}
public class Microsoft.AspNetCore.Mvc.Internal.DefaultCompositeMetadataDetailsProvider : object {
    private IEnumerable`1<IMetadataDetailsProvider> _providers;
    public DefaultCompositeMetadataDetailsProvider(IEnumerable`1<IMetadataDetailsProvider> providers);
    public virtual void CreateBindingMetadata(BindingMetadataProviderContext context);
    public virtual void CreateDisplayMetadata(DisplayMetadataProviderContext context);
    public virtual void CreateValidationMetadata(ValidationMetadataProviderContext context);
}
public class Microsoft.AspNetCore.Mvc.Internal.DefaultControllerPropertyActivator : object {
    private static Func`2<Type, PropertyActivator`1[]> _getPropertiesToActivate;
    private object _initializeLock;
    private bool _initialized;
    private ConcurrentDictionary`2<Type, PropertyActivator`1[]> _activateActions;
    private static DefaultControllerPropertyActivator();
    public sealed virtual void Activate(ControllerContext context, object controller);
    public sealed virtual Action`2<ControllerContext, object> GetActivatorDelegate(ControllerActionDescriptor actionDescriptor);
    private static PropertyActivator`1[] GetPropertiesToActivate(Type type);
}
public class Microsoft.AspNetCore.Mvc.Internal.DefaultFilterProvider : object {
    public int Order { get; }
    public sealed virtual int get_Order();
    public sealed virtual void OnProvidersExecuting(FilterProviderContext context);
    public sealed virtual void OnProvidersExecuted(FilterProviderContext context);
    public virtual void ProvideFilter(FilterProviderContext context, FilterItem filterItem);
    private void ApplyFilterToContainer(object actualFilter, IFilterMetadata filterMetadata);
}
public class Microsoft.AspNetCore.Mvc.Internal.DefaultModelValidatorProvider : object {
    public sealed virtual void CreateValidators(ModelValidatorProviderContext context);
}
public class Microsoft.AspNetCore.Mvc.Internal.DefaultObjectValidator : ObjectModelValidator {
    public DefaultObjectValidator(IModelMetadataProvider modelMetadataProvider, IList`1<IModelValidatorProvider> validatorProviders);
    public virtual ValidationVisitor GetValidationVisitor(ActionContext actionContext, IModelValidatorProvider validatorProvider, ValidatorCache validatorCache, IModelMetadataProvider metadataProvider, ValidationStateDictionary validationState);
}
public class Microsoft.AspNetCore.Mvc.Internal.DefaultValidationMetadataProvider : object {
    public sealed virtual void CreateValidationMetadata(ValidationMetadataProviderContext context);
}
public class Microsoft.AspNetCore.Mvc.Internal.DisableRequestSizeLimitFilter : object {
    private ILogger _logger;
    public DisableRequestSizeLimitFilter(ILoggerFactory loggerFactory);
    public sealed virtual void OnAuthorization(AuthorizationFilterContext context);
}
public class Microsoft.AspNetCore.Mvc.Internal.ElementalValueProvider : object {
    [CompilerGeneratedAttribute]
private CultureInfo <Culture>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Key>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Value>k__BackingField;
    public CultureInfo Culture { get; }
    public string Key { get; }
    public string Value { get; }
    public ElementalValueProvider(string key, string value, CultureInfo culture);
    [CompilerGeneratedAttribute]
public CultureInfo get_Culture();
    [CompilerGeneratedAttribute]
public string get_Key();
    [CompilerGeneratedAttribute]
public string get_Value();
    public sealed virtual bool ContainsPrefix(string prefix);
    public sealed virtual ValueProviderResult GetValue(string key);
}
public class Microsoft.AspNetCore.Mvc.Internal.ExplicitIndexCollectionValidationStrategy : object {
    [CompilerGeneratedAttribute]
private IEnumerable`1<string> <ElementKeys>k__BackingField;
    public IEnumerable`1<string> ElementKeys { get; }
    public ExplicitIndexCollectionValidationStrategy(IEnumerable`1<string> elementKeys);
    [CompilerGeneratedAttribute]
public IEnumerable`1<string> get_ElementKeys();
    public sealed virtual IEnumerator`1<ValidationEntry> GetChildren(ModelMetadata metadata, string key, object model);
}
public class Microsoft.AspNetCore.Mvc.Internal.FilterCursor : ValueType {
    private IFilterMetadata[] _filters;
    private int _index;
    public FilterCursor(IFilterMetadata[] filters);
    public void Reset();
    public FilterCursorItem`2<TFilter, TFilterAsync> GetNextFilter();
}
public class Microsoft.AspNetCore.Mvc.Internal.FilterCursorItem`2 : ValueType {
    [CompilerGeneratedAttribute]
private TFilter <Filter>k__BackingField;
    [CompilerGeneratedAttribute]
private TFilterAsync <FilterAsync>k__BackingField;
    public TFilter Filter { get; }
    public TFilterAsync FilterAsync { get; }
    public FilterCursorItem`2(TFilter filter, TFilterAsync filterAsync);
    [CompilerGeneratedAttribute]
public TFilter get_Filter();
    [CompilerGeneratedAttribute]
public TFilterAsync get_FilterAsync();
}
public class Microsoft.AspNetCore.Mvc.Internal.FilterDescriptorOrderComparer : object {
    [CompilerGeneratedAttribute]
private static FilterDescriptorOrderComparer <Comparer>k__BackingField;
    public static FilterDescriptorOrderComparer Comparer { get; }
    private static FilterDescriptorOrderComparer();
    [CompilerGeneratedAttribute]
public static FilterDescriptorOrderComparer get_Comparer();
    public sealed virtual int Compare(FilterDescriptor x, FilterDescriptor y);
}
public static class Microsoft.AspNetCore.Mvc.Internal.FilterFactory : object {
    public static FilterFactoryResult GetAllFilters(IFilterProvider[] filterProviders, ActionContext actionContext);
    public static IFilterMetadata[] CreateUncachedFilters(IFilterProvider[] filterProviders, ActionContext actionContext, FilterItem[] cachedFilterItems);
    private static IFilterMetadata[] CreateUncachedFiltersCore(IFilterProvider[] filterProviders, ActionContext actionContext, List`1<FilterItem> filterItems);
}
public class Microsoft.AspNetCore.Mvc.Internal.FilterFactoryResult : ValueType {
    [CompilerGeneratedAttribute]
private FilterItem[] <CacheableFilters>k__BackingField;
    [CompilerGeneratedAttribute]
private IFilterMetadata[] <Filters>k__BackingField;
    public FilterItem[] CacheableFilters { get; }
    public IFilterMetadata[] Filters { get; }
    public FilterFactoryResult(FilterItem[] cacheableFilters, IFilterMetadata[] filters);
    [CompilerGeneratedAttribute]
public FilterItem[] get_CacheableFilters();
    [CompilerGeneratedAttribute]
public IFilterMetadata[] get_Filters();
}
public class Microsoft.AspNetCore.Mvc.Internal.HttpMethodActionConstraint : object {
    public static int HttpMethodConstraintOrder;
    private IReadOnlyList`1<string> _httpMethods;
    public IEnumerable`1<string> HttpMethods { get; }
    public int Order { get; }
    public HttpMethodActionConstraint(IEnumerable`1<string> httpMethods);
    private static HttpMethodActionConstraint();
    public IEnumerable`1<string> get_HttpMethods();
    public sealed virtual int get_Order();
    public virtual bool Accept(ActionConstraintContext context);
}
public interface Microsoft.AspNetCore.Mvc.Internal.IApiBehaviorMetadata {
}
public interface Microsoft.AspNetCore.Mvc.Internal.IConsumesActionConstraint {
}
public interface Microsoft.AspNetCore.Mvc.Internal.IControllerPropertyActivator {
    public abstract virtual void Activate(ControllerContext context, object controller);
    public abstract virtual Action`2<ControllerContext, object> GetActivatorDelegate(ControllerActionDescriptor actionDescriptor);
}
public interface Microsoft.AspNetCore.Mvc.Internal.IMiddlewareFilterFeature {
    public ResourceExecutingContext ResourceExecutingContext { get; }
    public ResourceExecutionDelegate ResourceExecutionDelegate { get; }
    public abstract virtual ResourceExecutingContext get_ResourceExecutingContext();
    public abstract virtual ResourceExecutionDelegate get_ResourceExecutionDelegate();
}
public interface Microsoft.AspNetCore.Mvc.Internal.IParameterInfoParameterDescriptor {
    public ParameterInfo ParameterInfo { get; }
    public abstract virtual ParameterInfo get_ParameterInfo();
}
public interface Microsoft.AspNetCore.Mvc.Internal.IPropertyInfoParameterDescriptor {
    public PropertyInfo PropertyInfo { get; }
    public abstract virtual PropertyInfo get_PropertyInfo();
}
public interface Microsoft.AspNetCore.Mvc.Internal.IResponseCacheFilter {
}
public interface Microsoft.AspNetCore.Mvc.Internal.ITypeActivatorCache {
    public abstract virtual TInstance CreateInstance(IServiceProvider serviceProvider, Type optionType);
}
public class Microsoft.AspNetCore.Mvc.Internal.MemoryPoolHttpRequestStreamReaderFactory : object {
    public static int DefaultBufferSize;
    private ArrayPool`1<byte> _bytePool;
    private ArrayPool`1<char> _charPool;
    public MemoryPoolHttpRequestStreamReaderFactory(ArrayPool`1<byte> bytePool, ArrayPool`1<char> charPool);
    private static MemoryPoolHttpRequestStreamReaderFactory();
    public sealed virtual TextReader CreateReader(Stream stream, Encoding encoding);
}
public class Microsoft.AspNetCore.Mvc.Internal.MemoryPoolHttpResponseStreamWriterFactory : object {
    public static int DefaultBufferSize;
    private ArrayPool`1<byte> _bytePool;
    private ArrayPool`1<char> _charPool;
    public MemoryPoolHttpResponseStreamWriterFactory(ArrayPool`1<byte> bytePool, ArrayPool`1<char> charPool);
    private static MemoryPoolHttpResponseStreamWriterFactory();
    public sealed virtual TextWriter CreateWriter(Stream stream, Encoding encoding);
}
internal class Microsoft.AspNetCore.Mvc.Internal.MiddlewareFilter : object {
    private RequestDelegate _middlewarePipeline;
    public MiddlewareFilter(RequestDelegate middlewarePipeline);
    public sealed virtual Task OnResourceExecutionAsync(ResourceExecutingContext context, ResourceExecutionDelegate next);
}
public class Microsoft.AspNetCore.Mvc.Internal.MiddlewareFilterBuilder : object {
    private ConcurrentDictionary`2<Type, Lazy`1<RequestDelegate>> _pipelinesCache;
    private MiddlewareFilterConfigurationProvider _configurationProvider;
    [CompilerGeneratedAttribute]
private IApplicationBuilder <ApplicationBuilder>k__BackingField;
    public IApplicationBuilder ApplicationBuilder { get; public set; }
    public MiddlewareFilterBuilder(MiddlewareFilterConfigurationProvider configurationProvider);
    [CompilerGeneratedAttribute]
public IApplicationBuilder get_ApplicationBuilder();
    [CompilerGeneratedAttribute]
public void set_ApplicationBuilder(IApplicationBuilder value);
    public RequestDelegate GetPipeline(Type configurationType);
    private RequestDelegate BuildPipeline(Type middlewarePipelineProviderType);
    [CompilerGeneratedAttribute]
private Lazy`1<RequestDelegate> <GetPipeline>b__7_0(Type key);
}
public class Microsoft.AspNetCore.Mvc.Internal.MiddlewareFilterConfigurationProvider : object {
    public Action`1<IApplicationBuilder> CreateConfigureDelegate(Type configurationType);
    private static ConfigureBuilder GetConfigureDelegateBuilder(Type startupType);
    private static MethodInfo FindMethod(Type startupType, Type returnType);
    private static bool HasParameterlessConstructor(TypeInfo modelTypeInfo);
}
public class Microsoft.AspNetCore.Mvc.Internal.MiddlewareFilterFeature : object {
    [CompilerGeneratedAttribute]
private ResourceExecutingContext <ResourceExecutingContext>k__BackingField;
    [CompilerGeneratedAttribute]
private ResourceExecutionDelegate <ResourceExecutionDelegate>k__BackingField;
    public ResourceExecutingContext ResourceExecutingContext { get; public set; }
    public ResourceExecutionDelegate ResourceExecutionDelegate { get; public set; }
    [CompilerGeneratedAttribute]
public sealed virtual ResourceExecutingContext get_ResourceExecutingContext();
    [CompilerGeneratedAttribute]
public void set_ResourceExecutingContext(ResourceExecutingContext value);
    [CompilerGeneratedAttribute]
public sealed virtual ResourceExecutionDelegate get_ResourceExecutionDelegate();
    [CompilerGeneratedAttribute]
public void set_ResourceExecutionDelegate(ResourceExecutionDelegate value);
}
public class Microsoft.AspNetCore.Mvc.Internal.MvcAttributeRouteHandler : object {
    private IActionContextAccessor _actionContextAccessor;
    private IActionInvokerFactory _actionInvokerFactory;
    private IActionSelector _actionSelector;
    private ILogger _logger;
    private DiagnosticSource _diagnosticSource;
    [CompilerGeneratedAttribute]
private ActionDescriptor[] <Actions>k__BackingField;
    public ActionDescriptor[] Actions { get; public set; }
    public MvcAttributeRouteHandler(IActionInvokerFactory actionInvokerFactory, IActionSelector actionSelector, DiagnosticSource diagnosticSource, ILoggerFactory loggerFactory);
    public MvcAttributeRouteHandler(IActionInvokerFactory actionInvokerFactory, IActionSelector actionSelector, DiagnosticSource diagnosticSource, ILoggerFactory loggerFactory, IActionContextAccessor actionContextAccessor);
    [CompilerGeneratedAttribute]
public ActionDescriptor[] get_Actions();
    [CompilerGeneratedAttribute]
public void set_Actions(ActionDescriptor[] value);
    public sealed virtual VirtualPathData GetVirtualPath(VirtualPathContext context);
    public sealed virtual Task RouteAsync(RouteContext context);
}
public class Microsoft.AspNetCore.Mvc.Internal.MvcBuilder : object {
    [CompilerGeneratedAttribute]
private IServiceCollection <Services>k__BackingField;
    [CompilerGeneratedAttribute]
private ApplicationPartManager <PartManager>k__BackingField;
    public IServiceCollection Services { get; }
    public ApplicationPartManager PartManager { get; }
    public MvcBuilder(IServiceCollection services, ApplicationPartManager manager);
    [CompilerGeneratedAttribute]
public sealed virtual IServiceCollection get_Services();
    [CompilerGeneratedAttribute]
public sealed virtual ApplicationPartManager get_PartManager();
}
public class Microsoft.AspNetCore.Mvc.Internal.MvcCoreBuilder : object {
    [CompilerGeneratedAttribute]
private ApplicationPartManager <PartManager>k__BackingField;
    [CompilerGeneratedAttribute]
private IServiceCollection <Services>k__BackingField;
    public ApplicationPartManager PartManager { get; }
    public IServiceCollection Services { get; }
    public MvcCoreBuilder(IServiceCollection services, ApplicationPartManager manager);
    [CompilerGeneratedAttribute]
public sealed virtual ApplicationPartManager get_PartManager();
    [CompilerGeneratedAttribute]
public sealed virtual IServiceCollection get_Services();
}
[ExtensionAttribute]
public static class Microsoft.AspNetCore.Mvc.Internal.MvcCoreDiagnosticSourceExtensions : object {
    [ExtensionAttribute]
public static void BeforeAction(DiagnosticSource diagnosticSource, ActionDescriptor actionDescriptor, HttpContext httpContext, RouteData routeData);
    [ExtensionAttribute]
public static void AfterAction(DiagnosticSource diagnosticSource, ActionDescriptor actionDescriptor, HttpContext httpContext, RouteData routeData);
    [ExtensionAttribute]
public static void BeforeOnAuthorizationAsync(DiagnosticSource diagnosticSource, AuthorizationFilterContext authorizationContext, IAsyncAuthorizationFilter filter);
    [ExtensionAttribute]
public static void AfterOnAuthorizationAsync(DiagnosticSource diagnosticSource, AuthorizationFilterContext authorizationContext, IAsyncAuthorizationFilter filter);
    [ExtensionAttribute]
public static void BeforeOnAuthorization(DiagnosticSource diagnosticSource, AuthorizationFilterContext authorizationContext, IAuthorizationFilter filter);
    [ExtensionAttribute]
public static void AfterOnAuthorization(DiagnosticSource diagnosticSource, AuthorizationFilterContext authorizationContext, IAuthorizationFilter filter);
    [ExtensionAttribute]
public static void BeforeOnResourceExecution(DiagnosticSource diagnosticSource, ResourceExecutingContext resourceExecutingContext, IAsyncResourceFilter filter);
    [ExtensionAttribute]
public static void AfterOnResourceExecution(DiagnosticSource diagnosticSource, ResourceExecutedContext resourceExecutedContext, IAsyncResourceFilter filter);
    [ExtensionAttribute]
public static void BeforeOnResourceExecuting(DiagnosticSource diagnosticSource, ResourceExecutingContext resourceExecutingContext, IResourceFilter filter);
    [ExtensionAttribute]
public static void AfterOnResourceExecuting(DiagnosticSource diagnosticSource, ResourceExecutingContext resourceExecutingContext, IResourceFilter filter);
    [ExtensionAttribute]
public static void BeforeOnResourceExecuted(DiagnosticSource diagnosticSource, ResourceExecutedContext resourceExecutedContext, IResourceFilter filter);
    [ExtensionAttribute]
public static void AfterOnResourceExecuted(DiagnosticSource diagnosticSource, ResourceExecutedContext resourceExecutedContext, IResourceFilter filter);
    [ExtensionAttribute]
public static void BeforeOnExceptionAsync(DiagnosticSource diagnosticSource, ExceptionContext exceptionContext, IAsyncExceptionFilter filter);
    [ExtensionAttribute]
public static void AfterOnExceptionAsync(DiagnosticSource diagnosticSource, ExceptionContext exceptionContext, IAsyncExceptionFilter filter);
    [ExtensionAttribute]
public static void BeforeOnException(DiagnosticSource diagnosticSource, ExceptionContext exceptionContext, IExceptionFilter filter);
    [ExtensionAttribute]
public static void AfterOnException(DiagnosticSource diagnosticSource, ExceptionContext exceptionContext, IExceptionFilter filter);
    [ExtensionAttribute]
public static void BeforeOnActionExecution(DiagnosticSource diagnosticSource, ActionExecutingContext actionExecutingContext, IAsyncActionFilter filter);
    [ExtensionAttribute]
public static void AfterOnActionExecution(DiagnosticSource diagnosticSource, ActionExecutedContext actionExecutedContext, IAsyncActionFilter filter);
    [ExtensionAttribute]
public static void BeforeOnActionExecuting(DiagnosticSource diagnosticSource, ActionExecutingContext actionExecutingContext, IActionFilter filter);
    [ExtensionAttribute]
public static void AfterOnActionExecuting(DiagnosticSource diagnosticSource, ActionExecutingContext actionExecutingContext, IActionFilter filter);
    [ExtensionAttribute]
public static void BeforeOnActionExecuted(DiagnosticSource diagnosticSource, ActionExecutedContext actionExecutedContext, IActionFilter filter);
    [ExtensionAttribute]
public static void AfterOnActionExecuted(DiagnosticSource diagnosticSource, ActionExecutedContext actionExecutedContext, IActionFilter filter);
    [ExtensionAttribute]
public static void BeforeActionMethod(DiagnosticSource diagnosticSource, ActionContext actionContext, IDictionary`2<string, object> actionArguments, object controller);
    [ExtensionAttribute]
public static void AfterActionMethod(DiagnosticSource diagnosticSource, ActionContext actionContext, IDictionary`2<string, object> actionArguments, object controller, IActionResult result);
    [ExtensionAttribute]
public static void BeforeOnResultExecution(DiagnosticSource diagnosticSource, ResultExecutingContext resultExecutingContext, IAsyncResultFilter filter);
    [ExtensionAttribute]
public static void AfterOnResultExecution(DiagnosticSource diagnosticSource, ResultExecutedContext resultExecutedContext, IAsyncResultFilter filter);
    [ExtensionAttribute]
public static void BeforeOnResultExecuting(DiagnosticSource diagnosticSource, ResultExecutingContext resultExecutingContext, IResultFilter filter);
    [ExtensionAttribute]
public static void AfterOnResultExecuting(DiagnosticSource diagnosticSource, ResultExecutingContext resultExecutingContext, IResultFilter filter);
    [ExtensionAttribute]
public static void BeforeOnResultExecuted(DiagnosticSource diagnosticSource, ResultExecutedContext resultExecutedContext, IResultFilter filter);
    [ExtensionAttribute]
public static void AfterOnResultExecuted(DiagnosticSource diagnosticSource, ResultExecutedContext resultExecutedContext, IResultFilter filter);
    [ExtensionAttribute]
public static void BeforeActionResult(DiagnosticSource diagnosticSource, ActionContext actionContext, IActionResult result);
    [ExtensionAttribute]
public static void AfterActionResult(DiagnosticSource diagnosticSource, ActionContext actionContext, IActionResult result);
}
[ExtensionAttribute]
internal static class Microsoft.AspNetCore.Mvc.Internal.MvcCoreLoggerExtensions : object {
    public static string ActionFilter;
    private static String[] _noFilters;
    private static double TimestampToTicks;
    private static Action`4<ILogger, string, string, Exception> _actionExecuting;
    private static Action`4<ILogger, string, double, Exception> _actionExecuted;
    private static Action`3<ILogger, String[], Exception> _challengeResultExecuting;
    private static Action`3<ILogger, string, Exception> _contentResultExecuting;
    private static Action`4<ILogger, string, ModelValidationState, Exception> _actionMethodExecuting;
    private static Action`5<ILogger, string, String[], ModelValidationState, Exception> _actionMethodExecutingWithArguments;
    private static Action`5<ILogger, string, string, double, Exception> _actionMethodExecuted;
    private static Action`4<ILogger, string, String[], Exception> _logFilterExecutionPlan;
    private static Action`5<ILogger, string, string, Type, Exception> _beforeExecutingMethodOnFilter;
    private static Action`5<ILogger, string, string, Type, Exception> _afterExecutingMethodOnFilter;
    private static Action`3<ILogger, Type, Exception> _beforeExecutingActionResult;
    private static Action`3<ILogger, Type, Exception> _afterExecutingActionResult;
    private static Action`3<ILogger, string, Exception> _ambiguousActions;
    private static Action`5<ILogger, string, string, IActionConstraint, Exception> _constraintMismatch;
    private static Action`5<ILogger, FileResult, string, string, Exception> _executingFileResult;
    private static Action`4<ILogger, FileResult, string, Exception> _executingFileResultWithNoFileName;
    private static Action`2<ILogger, Exception> _notEnabledForRangeProcessing;
    private static Action`2<ILogger, Exception> _writingRangeToBody;
    private static Action`3<ILogger, object, Exception> _authorizationFailure;
    private static Action`3<ILogger, object, Exception> _resourceFilterShortCircuit;
    private static Action`3<ILogger, object, Exception> _resultFilterShortCircuit;
    private static Action`3<ILogger, object, Exception> _actionFilterShortCircuit;
    private static Action`3<ILogger, object, Exception> _exceptionFilterShortCircuit;
    private static Action`3<ILogger, String[], Exception> _forbidResultExecuting;
    private static Action`4<ILogger, string, ClaimsPrincipal, Exception> _signInResultExecuting;
    private static Action`3<ILogger, String[], Exception> _signOutResultExecuting;
    private static Action`3<ILogger, int, Exception> _httpStatusCodeResultExecuting;
    private static Action`3<ILogger, string, Exception> _localRedirectResultExecuting;
    private static Action`3<ILogger, string, Exception> _objectResultExecuting;
    private static Action`3<ILogger, string, Exception> _noFormatter;
    private static Action`4<ILogger, IOutputFormatter, string, Exception> _formatterSelected;
    private static Action`3<ILogger, string, Exception> _skippedContentNegotiation;
    private static Action`2<ILogger, Exception> _noAcceptForNegotiation;
    private static Action`3<ILogger, IEnumerable`1<MediaTypeSegmentWithQuality>, Exception> _noFormatterFromNegotiation;
    private static Action`4<ILogger, IInputFormatter, string, Exception> _inputFormatterSelected;
    private static Action`4<ILogger, IInputFormatter, string, Exception> _inputFormatterRejected;
    private static Action`3<ILogger, string, Exception> _noInputFormatterSelected;
    private static Action`4<ILogger, string, string, Exception> _removeFromBodyAttribute;
    private static Action`3<ILogger, string, Exception> _redirectResultExecuting;
    private static Action`3<ILogger, string, Exception> _redirectToActionResultExecuting;
    private static Action`4<ILogger, string, string, Exception> _redirectToRouteResultExecuting;
    private static Action`3<ILogger, String[], Exception> _noActionsMatched;
    private static Action`3<ILogger, string, Exception> _redirectToPageResultExecuting;
    private static Action`2<ILogger, Exception> _featureNotFound;
    private static Action`2<ILogger, Exception> _featureIsReadOnly;
    private static Action`3<ILogger, string, Exception> _maxRequestBodySizeSet;
    private static Action`2<ILogger, Exception> _requestBodySizeLimitDisabled;
    private static Action`2<ILogger, Exception> _cannotApplyRequestFormLimits;
    private static Action`2<ILogger, Exception> _appliedRequestFormLimits;
    private static Action`2<ILogger, Exception> _modelStateInvalidFilterExecuting;
    private static Action`5<ILogger, MethodInfo, string, string, Exception> _inferredParameterSource;
    private static Action`3<ILogger, IModelBinderProvider[], Exception> _registeredModelBinderProviders;
    private static Action`6<ILogger, string, Type, string, Type, Exception> _foundNoValueForPropertyInRequest;
    private static Action`5<ILogger, string, string, Type, Exception> _foundNoValueForParameterInRequest;
    private static Action`4<ILogger, string, Type, Exception> _foundNoValueInRequest;
    private static Action`4<ILogger, string, Type, Exception> _noPublicSettableProperties;
    private static Action`3<ILogger, Type, Exception> _cannotBindToComplexType;
    private static Action`4<ILogger, string, Type, Exception> _cannotBindToFilesCollectionDueToUnsupportedContentType;
    private static Action`3<ILogger, Type, Exception> _cannotCreateHeaderModelBinder;
    private static Action`3<ILogger, Type, Exception> _cannotCreateHeaderModelBinderCompatVersion_2_0;
    private static Action`2<ILogger, Exception> _noFilesFoundInRequest;
    private static Action`4<ILogger, string, string, Exception> _noNonIndexBasedFormatFoundForCollection;
    private static Action`8<ILogger, string, string, string, string, string, string, Exception> _attemptingToBindCollectionUsingIndices;
    private static Action`8<ILogger, string, string, string, string, string, string, Exception> _attemptingToBindCollectionOfKeyValuePair;
    private static Action`5<ILogger, string, string, string, Exception> _noKeyValueFormatForDictionaryModelBinder;
    private static Action`5<ILogger, string, Type, string, Exception> _attemptingToBindParameterModel;
    private static Action`4<ILogger, string, Type, Exception> _doneAttemptingToBindParameterModel;
    private static Action`6<ILogger, Type, string, Type, string, Exception> _attemptingToBindPropertyModel;
    private static Action`5<ILogger, Type, string, Type, Exception> _doneAttemptingToBindPropertyModel;
    private static Action`4<ILogger, Type, string, Exception> _attemptingToBindModel;
    private static Action`4<ILogger, Type, string, Exception> _doneAttemptingToBindModel;
    private static Action`4<ILogger, string, Type, Exception> _attemptingToBindParameter;
    private static Action`4<ILogger, string, Type, Exception> _doneAttemptingToBindParameter;
    private static Action`5<ILogger, Type, string, Type, Exception> _attemptingToBindProperty;
    private static Action`5<ILogger, Type, string, Type, Exception> _doneAttemptingToBindProperty;
    private static Action`5<ILogger, Type, string, Type, Exception> _attemptingToValidateProperty;
    private static Action`5<ILogger, Type, string, Type, Exception> _doneAttemptingToValidateProperty;
    private static Action`4<ILogger, string, Type, Exception> _attemptingToValidateParameter;
    private static Action`4<ILogger, string, Type, Exception> _doneAttemptingToValidateParameter;
    private static Action`3<ILogger, string, Exception> _unsupportedFormatFilterContentType;
    private static Action`4<ILogger, string, MediaTypeCollection, Exception> _actionDoesNotSupportFormatFilterContentType;
    private static Action`3<ILogger, string, Exception> _cannotApplyFormatFilterContentType;
    private static Action`2<ILogger, Exception> _actionDoesNotExplicitlySpecifyContentTypes;
    private static Action`3<ILogger, IEnumerable`1<MediaTypeSegmentWithQuality>, Exception> _selectingOutputFormatterUsingAcceptHeader;
    private static Action`3<ILogger, EntityTagHeaderValue, Exception> _ifMatchPreconditionFailed;
    private static Action`4<ILogger, Nullable`1<DateTimeOffset>, Nullable`1<DateTimeOffset>, Exception> _ifUnmodifiedSincePreconditionFailed;
    private static Action`4<ILogger, Nullable`1<DateTimeOffset>, Nullable`1<DateTimeOffset>, Exception> _ifRangeLastModifiedPreconditionFailed;
    private static Action`4<ILogger, EntityTagHeaderValue, EntityTagHeaderValue, Exception> _ifRangeETagPreconditionFailed;
    private static Action`4<ILogger, IEnumerable`1<MediaTypeSegmentWithQuality>, MediaTypeCollection, Exception> _selectingOutputFormatterUsingAcceptHeaderAndExplicitContentTypes;
    private static Action`2<ILogger, Exception> _selectingOutputFormatterWithoutUsingContentTypes;
    private static Action`3<ILogger, MediaTypeCollection, Exception> _selectingOutputFormatterUsingContentTypes;
    private static Action`2<ILogger, Exception> _selectingFirstCanWriteFormatter;
    private static Action`5<ILogger, Type, Type, Type, Exception> _notMostEffectiveFilter;
    private static Action`3<ILogger, IEnumerable`1<IOutputFormatter>, Exception> _registeredOutputFormatters;
    private static MvcCoreLoggerExtensions();
    [ExtensionAttribute]
public static void RegisteredOutputFormatters(ILogger logger, IEnumerable`1<IOutputFormatter> outputFormatters);
    [ExtensionAttribute]
public static void SelectingOutputFormatterUsingAcceptHeaderAndExplicitContentTypes(ILogger logger, IEnumerable`1<MediaTypeSegmentWithQuality> acceptHeader, MediaTypeCollection mediaTypeCollection);
    [ExtensionAttribute]
public static void SelectingOutputFormatterUsingAcceptHeader(ILogger logger, IEnumerable`1<MediaTypeSegmentWithQuality> acceptHeader);
    [ExtensionAttribute]
public static void SelectingOutputFormatterUsingContentTypes(ILogger logger, MediaTypeCollection mediaTypeCollection);
    [ExtensionAttribute]
public static void SelectingOutputFormatterWithoutUsingContentTypes(ILogger logger);
    [ExtensionAttribute]
public static void SelectFirstCanWriteFormatter(ILogger logger);
    [ExtensionAttribute]
public static IDisposable ActionScope(ILogger logger, ActionDescriptor action);
    [ExtensionAttribute]
public static void ExecutingAction(ILogger logger, ActionDescriptor action);
    [ExtensionAttribute]
public static void AuthorizationFiltersExecutionPlan(ILogger logger, IEnumerable`1<IFilterMetadata> filters);
    [ExtensionAttribute]
public static void ResourceFiltersExecutionPlan(ILogger logger, IEnumerable`1<IFilterMetadata> filters);
    [ExtensionAttribute]
public static void ActionFiltersExecutionPlan(ILogger logger, IEnumerable`1<IFilterMetadata> filters);
    [ExtensionAttribute]
public static void ExceptionFiltersExecutionPlan(ILogger logger, IEnumerable`1<IFilterMetadata> filters);
    [ExtensionAttribute]
public static void ResultFiltersExecutionPlan(ILogger logger, IEnumerable`1<IFilterMetadata> filters);
    [ExtensionAttribute]
public static void BeforeExecutingMethodOnFilter(ILogger logger, string filterType, string methodName, IFilterMetadata filter);
    [ExtensionAttribute]
public static void AfterExecutingMethodOnFilter(ILogger logger, string filterType, string methodName, IFilterMetadata filter);
    [ExtensionAttribute]
public static void ExecutedAction(ILogger logger, ActionDescriptor action, TimeSpan timeSpan);
    [ExtensionAttribute]
public static void NoActionsMatched(ILogger logger, IDictionary`2<string, object> routeValueDictionary);
    [ExtensionAttribute]
public static void ChallengeResultExecuting(ILogger logger, IList`1<string> schemes);
    [ExtensionAttribute]
public static void ContentResultExecuting(ILogger logger, string contentType);
    [ExtensionAttribute]
public static void BeforeExecutingActionResult(ILogger logger, IActionResult actionResult);
    [ExtensionAttribute]
public static void AfterExecutingActionResult(ILogger logger, IActionResult actionResult);
    [ExtensionAttribute]
public static void ActionMethodExecuting(ILogger logger, ControllerContext context, Object[] arguments);
    [ExtensionAttribute]
public static void ActionMethodExecuted(ILogger logger, ControllerContext context, IActionResult result, TimeSpan timeSpan);
    [ExtensionAttribute]
public static void AmbiguousActions(ILogger logger, string actionNames);
    [ExtensionAttribute]
public static void ConstraintMismatch(ILogger logger, string actionName, string actionId, IActionConstraint actionConstraint);
    [ExtensionAttribute]
public static void ExecutingFileResult(ILogger logger, FileResult fileResult);
    [ExtensionAttribute]
public static void ExecutingFileResult(ILogger logger, FileResult fileResult, string fileName);
    [ExtensionAttribute]
public static void NotEnabledForRangeProcessing(ILogger logger);
    [ExtensionAttribute]
public static void WritingRangeToBody(ILogger logger);
    [ExtensionAttribute]
public static void AuthorizationFailure(ILogger logger, IFilterMetadata filter);
    [ExtensionAttribute]
public static void ResourceFilterShortCircuited(ILogger logger, IFilterMetadata filter);
    [ExtensionAttribute]
public static void ResultFilterShortCircuited(ILogger logger, IFilterMetadata filter);
    [ExtensionAttribute]
public static void ExceptionFilterShortCircuited(ILogger logger, IFilterMetadata filter);
    [ExtensionAttribute]
public static void ActionFilterShortCircuited(ILogger logger, IFilterMetadata filter);
    [ExtensionAttribute]
public static void ForbidResultExecuting(ILogger logger, IList`1<string> authenticationSchemes);
    [ExtensionAttribute]
public static void SignInResultExecuting(ILogger logger, string authenticationScheme, ClaimsPrincipal principal);
    [ExtensionAttribute]
public static void SignOutResultExecuting(ILogger logger, IList`1<string> authenticationSchemes);
    [ExtensionAttribute]
public static void HttpStatusCodeResultExecuting(ILogger logger, int statusCode);
    [ExtensionAttribute]
public static void LocalRedirectResultExecuting(ILogger logger, string destination);
    [ExtensionAttribute]
public static void ObjectResultExecuting(ILogger logger, object value);
    [ExtensionAttribute]
public static void NoFormatter(ILogger logger, OutputFormatterCanWriteContext formatterContext);
    [ExtensionAttribute]
public static void FormatterSelected(ILogger logger, IOutputFormatter outputFormatter, OutputFormatterCanWriteContext context);
    [ExtensionAttribute]
public static void SkippedContentNegotiation(ILogger logger, string contentType);
    [ExtensionAttribute]
public static void NoAcceptForNegotiation(ILogger logger);
    [ExtensionAttribute]
public static void NoFormatterFromNegotiation(ILogger logger, IList`1<MediaTypeSegmentWithQuality> acceptTypes);
    [ExtensionAttribute]
public static void InputFormatterSelected(ILogger logger, IInputFormatter inputFormatter, InputFormatterContext formatterContext);
    [ExtensionAttribute]
public static void InputFormatterRejected(ILogger logger, IInputFormatter inputFormatter, InputFormatterContext formatterContext);
    [ExtensionAttribute]
public static void NoInputFormatterSelected(ILogger logger, InputFormatterContext formatterContext);
    [ExtensionAttribute]
public static void RedirectResultExecuting(ILogger logger, string destination);
    [ExtensionAttribute]
public static void RedirectToActionResultExecuting(ILogger logger, string destination);
    [ExtensionAttribute]
public static void RedirectToRouteResultExecuting(ILogger logger, string destination, string routeName);
    [ExtensionAttribute]
public static void RedirectToPageResultExecuting(ILogger logger, string page);
    [ExtensionAttribute]
public static void FeatureNotFound(ILogger logger);
    [ExtensionAttribute]
public static void FeatureIsReadOnly(ILogger logger);
    [ExtensionAttribute]
public static void MaxRequestBodySizeSet(ILogger logger, string requestSize);
    [ExtensionAttribute]
public static void RequestBodySizeLimitDisabled(ILogger logger);
    [ExtensionAttribute]
public static void CannotApplyRequestFormLimits(ILogger logger);
    [ExtensionAttribute]
public static void AppliedRequestFormLimits(ILogger logger);
    [ExtensionAttribute]
public static void NotMostEffectiveFilter(ILogger logger, Type overridenFilter, Type overridingFilter, Type policyType);
    [ExtensionAttribute]
public static void UnsupportedFormatFilterContentType(ILogger logger, string format);
    [ExtensionAttribute]
public static void ActionDoesNotSupportFormatFilterContentType(ILogger logger, string format, MediaTypeCollection supportedMediaTypes);
    [ExtensionAttribute]
public static void CannotApplyFormatFilterContentType(ILogger logger, string format);
    [ExtensionAttribute]
public static void ActionDoesNotExplicitlySpecifyContentTypes(ILogger logger);
    [ExtensionAttribute]
public static void ModelStateInvalidFilterExecuting(ILogger logger);
    [ExtensionAttribute]
public static void InferredParameterBindingSource(ILogger logger, ParameterModel parameterModel, BindingSource bindingSource);
    [ExtensionAttribute]
public static void IfMatchPreconditionFailed(ILogger logger, EntityTagHeaderValue etag);
    [ExtensionAttribute]
public static void IfUnmodifiedSincePreconditionFailed(ILogger logger, Nullable`1<DateTimeOffset> lastModified, Nullable`1<DateTimeOffset> ifUnmodifiedSinceDate);
    [ExtensionAttribute]
public static void IfRangeLastModifiedPreconditionFailed(ILogger logger, Nullable`1<DateTimeOffset> lastModified, Nullable`1<DateTimeOffset> ifRangeLastModifiedDate);
    [ExtensionAttribute]
public static void IfRangeETagPreconditionFailed(ILogger logger, EntityTagHeaderValue currentETag, EntityTagHeaderValue ifRangeTag);
    [ExtensionAttribute]
public static void RegisteredModelBinderProviders(ILogger logger, IModelBinderProvider[] providers);
    [ExtensionAttribute]
public static void FoundNoValueInRequest(ILogger logger, ModelBindingContext bindingContext);
    [ExtensionAttribute]
public static void NoPublicSettableProperties(ILogger logger, ModelBindingContext bindingContext);
    [ExtensionAttribute]
public static void CannotBindToComplexType(ILogger logger, ModelBindingContext bindingContext);
    [ExtensionAttribute]
public static void CannotBindToFilesCollectionDueToUnsupportedContentType(ILogger logger, ModelBindingContext bindingContext);
    [ExtensionAttribute]
public static void CannotCreateHeaderModelBinderCompatVersion_2_0(ILogger logger, Type modelType);
    [ExtensionAttribute]
public static void CannotCreateHeaderModelBinder(ILogger logger, Type modelType);
    [ExtensionAttribute]
public static void NoFilesFoundInRequest(ILogger logger);
    [ExtensionAttribute]
public static void AttemptingToBindModel(ILogger logger, ModelBindingContext bindingContext);
    [ExtensionAttribute]
public static void DoneAttemptingToBindModel(ILogger logger, ModelBindingContext bindingContext);
    [ExtensionAttribute]
public static void AttemptingToBindParameterOrProperty(ILogger logger, ParameterDescriptor parameter, ModelBindingContext bindingContext);
    [ExtensionAttribute]
public static void DoneAttemptingToBindParameterOrProperty(ILogger logger, ParameterDescriptor parameter, ModelBindingContext bindingContext);
    [ExtensionAttribute]
public static void AttemptingToValidateParameterOrProperty(ILogger logger, ParameterDescriptor parameter, ModelBindingContext bindingContext);
    [ExtensionAttribute]
public static void DoneAttemptingToValidateParameterOrProperty(ILogger logger, ParameterDescriptor parameter, ModelBindingContext bindingContext);
    [ExtensionAttribute]
public static void NoNonIndexBasedFormatFoundForCollection(ILogger logger, ModelBindingContext bindingContext);
    [ExtensionAttribute]
public static void AttemptingToBindCollectionUsingIndices(ILogger logger, ModelBindingContext bindingContext);
    [ExtensionAttribute]
public static void NoKeyValueFormatForDictionaryModelBinder(ILogger logger, ModelBindingContext bindingContext);
    private static void LogFilterExecutionPlan(ILogger logger, string filterType, IEnumerable`1<IFilterMetadata> filters);
    private static String[] GetFilterList(IEnumerable`1<IFilterMetadata> filters);
}
public class Microsoft.AspNetCore.Mvc.Internal.MvcCoreMvcOptionsSetup : object {
    private IHttpRequestStreamReaderFactory _readerFactory;
    private ILoggerFactory _loggerFactory;
    public MvcCoreMvcOptionsSetup(IHttpRequestStreamReaderFactory readerFactory);
    public MvcCoreMvcOptionsSetup(IHttpRequestStreamReaderFactory readerFactory, ILoggerFactory loggerFactory);
    public sealed virtual void Configure(MvcOptions options);
    internal static void ConfigureAdditionalModelMetadataDetailsProvider(IList`1<IMetadataDetailsProvider> modelMetadataDetailsProviders);
}
public class Microsoft.AspNetCore.Mvc.Internal.MvcCoreRouteOptionsSetup : object {
    public sealed virtual void Configure(RouteOptions options);
}
public class Microsoft.AspNetCore.Mvc.Internal.MvcMarkerService : object {
}
public class Microsoft.AspNetCore.Mvc.Internal.MvcRouteHandler : object {
    private IActionContextAccessor _actionContextAccessor;
    private IActionInvokerFactory _actionInvokerFactory;
    private IActionSelector _actionSelector;
    private ILogger _logger;
    private DiagnosticSource _diagnosticSource;
    public MvcRouteHandler(IActionInvokerFactory actionInvokerFactory, IActionSelector actionSelector, DiagnosticSource diagnosticSource, ILoggerFactory loggerFactory);
    public MvcRouteHandler(IActionInvokerFactory actionInvokerFactory, IActionSelector actionSelector, DiagnosticSource diagnosticSource, ILoggerFactory loggerFactory, IActionContextAccessor actionContextAccessor);
    public sealed virtual VirtualPathData GetVirtualPath(VirtualPathContext context);
    public sealed virtual Task RouteAsync(RouteContext context);
}
public class Microsoft.AspNetCore.Mvc.Internal.NonDisposableStream : Stream {
    private Stream _innerStream;
    protected Stream InnerStream { get; }
    public bool CanRead { get; }
    public bool CanSeek { get; }
    public bool CanWrite { get; }
    public long Length { get; }
    public long Position { get; public set; }
    public int ReadTimeout { get; public set; }
    public bool CanTimeout { get; }
    public int WriteTimeout { get; public set; }
    public NonDisposableStream(Stream innerStream);
    protected Stream get_InnerStream();
    public virtual bool get_CanRead();
    public virtual bool get_CanSeek();
    public virtual bool get_CanWrite();
    public virtual long get_Length();
    public virtual long get_Position();
    public virtual void set_Position(long value);
    public virtual int get_ReadTimeout();
    public virtual void set_ReadTimeout(int value);
    public virtual bool get_CanTimeout();
    public virtual int get_WriteTimeout();
    public virtual void set_WriteTimeout(int value);
    public virtual long Seek(long offset, SeekOrigin origin);
    public virtual int Read(Byte[] buffer, int offset, int count);
    public virtual Task`1<int> ReadAsync(Byte[] buffer, int offset, int count, CancellationToken cancellationToken);
    public virtual IAsyncResult BeginRead(Byte[] buffer, int offset, int count, AsyncCallback callback, object state);
    public virtual int EndRead(IAsyncResult asyncResult);
    public virtual IAsyncResult BeginWrite(Byte[] buffer, int offset, int count, AsyncCallback callback, object state);
    public virtual void EndWrite(IAsyncResult asyncResult);
    public virtual void Close();
    public virtual int ReadByte();
    public virtual void Flush();
    public virtual Task CopyToAsync(Stream destination, int bufferSize, CancellationToken cancellationToken);
    public virtual Task FlushAsync(CancellationToken cancellationToken);
    public virtual void SetLength(long value);
    public virtual void Write(Byte[] buffer, int offset, int count);
    public virtual Task WriteAsync(Byte[] buffer, int offset, int count, CancellationToken cancellationToken);
    public virtual void WriteByte(byte value);
    protected virtual void Dispose(bool disposing);
}
public class Microsoft.AspNetCore.Mvc.Internal.NoOpBinder : object {
    public static IModelBinder Instance;
    private static NoOpBinder();
    public sealed virtual Task BindModelAsync(ModelBindingContext bindingContext);
}
public static class Microsoft.AspNetCore.Mvc.Internal.NormalizedRouteValue : object {
    public static string GetNormalizedRouteValue(ActionContext context, string key);
}
public static class Microsoft.AspNetCore.Mvc.Internal.ParameterDefaultValues : object {
    public static Object[] GetParameterDefaultValues(MethodInfo methodInfo);
    private static object GetParameterDefaultValue(ParameterInfo parameterInfo);
}
public class Microsoft.AspNetCore.Mvc.Internal.PlaceholderBinder : object {
    [CompilerGeneratedAttribute]
private IModelBinder <Inner>k__BackingField;
    public IModelBinder Inner { get; public set; }
    [CompilerGeneratedAttribute]
public IModelBinder get_Inner();
    [CompilerGeneratedAttribute]
public void set_Inner(IModelBinder value);
    public sealed virtual Task BindModelAsync(ModelBindingContext bindingContext);
}
public class Microsoft.AspNetCore.Mvc.Internal.PrefixContainer : object {
    private static Char[] Delimiters;
    private ICollection`1<string> _originalValues;
    private String[] _sortedValues;
    public PrefixContainer(ICollection`1<string> values);
    private static PrefixContainer();
    public bool ContainsPrefix(string prefix);
    public IDictionary`2<string, string> GetKeysFromPrefix(string prefix);
    private static void GetKeyFromEmptyPrefix(string entry, IDictionary`2<string, string> results);
    private static void GetKeyFromNonEmptyPrefix(string prefix, string entry, IDictionary`2<string, string> results);
    private int BinarySearch(string prefix);
    private int LinearSearch(string prefix, int start, int end);
}
public static class Microsoft.AspNetCore.Mvc.Internal.PropertyValueSetter : object {
    private static MethodInfo CallPropertyAddRangeOpenGenericMethod;
    private static PropertyValueSetter();
    public static void SetValue(ModelMetadata metadata, object instance, object value);
    private static void CallPropertyAddRange(object target, object source);
}
internal class Microsoft.AspNetCore.Mvc.Internal.ReferenceEqualityComparer : object {
    private static bool IsMono;
    [CompilerGeneratedAttribute]
private static ReferenceEqualityComparer <Instance>k__BackingField;
    public static ReferenceEqualityComparer Instance { get; }
    private static ReferenceEqualityComparer();
    [CompilerGeneratedAttribute]
public static ReferenceEqualityComparer get_Instance();
    public sealed virtual bool Equals(object x, object y);
    public sealed virtual int GetHashCode(object obj);
}
public class Microsoft.AspNetCore.Mvc.Internal.RequestFormLimitsFilter : object {
    private ILogger _logger;
    [CompilerGeneratedAttribute]
private FormOptions <FormOptions>k__BackingField;
    public FormOptions FormOptions { get; public set; }
    public RequestFormLimitsFilter(ILoggerFactory loggerFactory);
    [CompilerGeneratedAttribute]
public FormOptions get_FormOptions();
    [CompilerGeneratedAttribute]
public void set_FormOptions(FormOptions value);
    public sealed virtual void OnAuthorization(AuthorizationFilterContext context);
}
public class Microsoft.AspNetCore.Mvc.Internal.RequestSizeLimitFilter : object {
    private ILogger _logger;
    [CompilerGeneratedAttribute]
private long <Bytes>k__BackingField;
    public long Bytes { get; public set; }
    public RequestSizeLimitFilter(ILoggerFactory loggerFactory);
    [CompilerGeneratedAttribute]
public long get_Bytes();
    [CompilerGeneratedAttribute]
public void set_Bytes(long value);
    public sealed virtual void OnAuthorization(AuthorizationFilterContext context);
}
public abstract class Microsoft.AspNetCore.Mvc.Internal.ResourceInvoker : object {
    protected DiagnosticSource _diagnosticSource;
    protected ILogger _logger;
    protected IActionResultTypeMapper _mapper;
    protected ActionContext _actionContext;
    protected IFilterMetadata[] _filters;
    protected IList`1<IValueProviderFactory> _valueProviderFactories;
    private AuthorizationFilterContext _authorizationContext;
    private ResourceExecutingContext _resourceExecutingContext;
    private ResourceExecutedContext _resourceExecutedContext;
    private ExceptionContext _exceptionContext;
    private ResultExecutingContext _resultExecutingContext;
    private ResultExecutedContext _resultExecutedContext;
    protected FilterCursor _cursor;
    protected IActionResult _result;
    protected object _instance;
    public ResourceInvoker(DiagnosticSource diagnosticSource, ILogger logger, IActionResultTypeMapper mapper, ActionContext actionContext, IFilterMetadata[] filters, IList`1<IValueProviderFactory> valueProviderFactories);
    [AsyncStateMachineAttribute("Microsoft.AspNetCore.Mvc.Internal.ResourceInvoker/<InvokeAsync>d__16")]
public virtual Task InvokeAsync();
    protected abstract virtual void ReleaseResources();
    [AsyncStateMachineAttribute("Microsoft.AspNetCore.Mvc.Internal.ResourceInvoker/<InvokeFilterPipelineAsync>d__18")]
private Task InvokeFilterPipelineAsync();
    protected abstract virtual Task InvokeInnerFilterAsync();
    [AsyncStateMachineAttribute("Microsoft.AspNetCore.Mvc.Internal.ResourceInvoker/<InvokeResultAsync>d__20")]
protected virtual Task InvokeResultAsync(IActionResult result);
    private Task Next(State& next, Scope& scope, Object& state, Boolean& isCompleted);
    [AsyncStateMachineAttribute("Microsoft.AspNetCore.Mvc.Internal.ResourceInvoker/<InvokeNextResourceFilterAwaitedAsync>d__22")]
private Task`1<ResourceExecutedContext> InvokeNextResourceFilterAwaitedAsync();
    [AsyncStateMachineAttribute("Microsoft.AspNetCore.Mvc.Internal.ResourceInvoker/<InvokeNextResourceFilter>d__23")]
private Task InvokeNextResourceFilter();
    [AsyncStateMachineAttribute("Microsoft.AspNetCore.Mvc.Internal.ResourceInvoker/<InvokeNextExceptionFilterAsync>d__24")]
private Task InvokeNextExceptionFilterAsync();
    [AsyncStateMachineAttribute("Microsoft.AspNetCore.Mvc.Internal.ResourceInvoker/<InvokeAlwaysRunResultFilters>d__25")]
private Task InvokeAlwaysRunResultFilters();
    [AsyncStateMachineAttribute("Microsoft.AspNetCore.Mvc.Internal.ResourceInvoker/<InvokeResultFilters>d__26")]
private Task InvokeResultFilters();
    private Task ResultNext(State& next, Scope& scope, Object& state, Boolean& isCompleted);
    [AsyncStateMachineAttribute("Microsoft.AspNetCore.Mvc.Internal.ResourceInvoker/<InvokeNextResultFilterAsync>d__28`2")]
private Task InvokeNextResultFilterAsync();
    [AsyncStateMachineAttribute("Microsoft.AspNetCore.Mvc.Internal.ResourceInvoker/<InvokeNextResultFilterAwaitedAsync>d__29`2")]
private Task`1<ResultExecutedContext> InvokeNextResultFilterAwaitedAsync();
    private static void Rethrow(ResourceExecutedContext context);
    private static void Rethrow(ExceptionContext context);
    private static void Rethrow(ResultExecutedContext context);
}
public class Microsoft.AspNetCore.Mvc.Internal.ResponseCacheFilter : object {
    private ResponseCacheFilterExecutor _executor;
    private ILogger _logger;
    public int Duration { get; public set; }
    public ResponseCacheLocation Location { get; public set; }
    public bool NoStore { get; public set; }
    public string VaryByHeader { get; public set; }
    public String[] VaryByQueryKeys { get; public set; }
    public ResponseCacheFilter(CacheProfile cacheProfile, ILoggerFactory loggerFactory);
    public int get_Duration();
    public void set_Duration(int value);
    public ResponseCacheLocation get_Location();
    public void set_Location(ResponseCacheLocation value);
    public bool get_NoStore();
    public void set_NoStore(bool value);
    public string get_VaryByHeader();
    public void set_VaryByHeader(string value);
    public String[] get_VaryByQueryKeys();
    public void set_VaryByQueryKeys(String[] value);
    public sealed virtual void OnActionExecuting(ActionExecutingContext context);
    public sealed virtual void OnActionExecuted(ActionExecutedContext context);
}
public class Microsoft.AspNetCore.Mvc.Internal.ResponseCacheFilterExecutor : object {
    private CacheProfile _cacheProfile;
    private Nullable`1<int> _cacheDuration;
    private Nullable`1<ResponseCacheLocation> _cacheLocation;
    private Nullable`1<bool> _cacheNoStore;
    private string _cacheVaryByHeader;
    private String[] _cacheVaryByQueryKeys;
    public int Duration { get; public set; }
    public ResponseCacheLocation Location { get; public set; }
    public bool NoStore { get; public set; }
    public string VaryByHeader { get; public set; }
    public String[] VaryByQueryKeys { get; public set; }
    public ResponseCacheFilterExecutor(CacheProfile cacheProfile);
    public int get_Duration();
    public void set_Duration(int value);
    public ResponseCacheLocation get_Location();
    public void set_Location(ResponseCacheLocation value);
    public bool get_NoStore();
    public void set_NoStore(bool value);
    public string get_VaryByHeader();
    public void set_VaryByHeader(string value);
    public String[] get_VaryByQueryKeys();
    public void set_VaryByQueryKeys(String[] value);
    public void Execute(FilterContext context);
}
public static class Microsoft.AspNetCore.Mvc.Internal.ResponseContentTypeHelper : object {
    public static void ResolveContentTypeAndEncoding(string actionResultContentType, string httpResponseContentType, string defaultContentType, String& resolvedContentType, Encoding& resolvedContentTypeEncoding);
}
public class Microsoft.AspNetCore.Mvc.Internal.ShortFormDictionaryValidationStrategy`2 : object {
    private ModelMetadata _valueMetadata;
    [CompilerGeneratedAttribute]
private IEnumerable`1<KeyValuePair`2<string, TKey>> <KeyMappings>k__BackingField;
    public IEnumerable`1<KeyValuePair`2<string, TKey>> KeyMappings { get; }
    public ShortFormDictionaryValidationStrategy`2(IEnumerable`1<KeyValuePair`2<string, TKey>> keyMappings, ModelMetadata valueMetadata);
    [CompilerGeneratedAttribute]
public IEnumerable`1<KeyValuePair`2<string, TKey>> get_KeyMappings();
    public sealed virtual IEnumerator`1<ValidationEntry> GetChildren(ModelMetadata metadata, string key, object model);
}
public class Microsoft.AspNetCore.Mvc.Internal.TypeActivatorCache : object {
    private Func`2<Type, ObjectFactory> _createFactory;
    private ConcurrentDictionary`2<Type, ObjectFactory> _typeActivatorCache;
    public sealed virtual TInstance CreateInstance(IServiceProvider serviceProvider, Type implementationType);
}
public class Microsoft.AspNetCore.Mvc.Internal.ValidatorCache : object {
    private ConcurrentDictionary`2<ModelMetadata, CacheEntry> _cacheEntries;
    public IReadOnlyList`1<IModelValidator> GetValidators(ModelMetadata metadata, IModelValidatorProvider validatorProvider);
    private IReadOnlyList`1<IModelValidator> GetValidatorsFromEntry(CacheEntry entry, ModelMetadata metadata, IModelValidatorProvider validationProvider);
    private void ExecuteProvider(IModelValidatorProvider validatorProvider, ModelMetadata metadata, List`1<ValidatorItem> items);
    private IReadOnlyList`1<IModelValidator> ExtractValidators(List`1<ValidatorItem> items);
}
public static class Microsoft.AspNetCore.Mvc.Internal.ViewEnginePath : object {
    public static Char[] PathSeparators;
    private static string CurrentDirectoryToken;
    private static string ParentDirectoryToken;
    private static ViewEnginePath();
    public static string CombinePath(string first, string second);
    public static string ResolvePath(string path);
}
public interface Microsoft.AspNetCore.Mvc.IRequestFormLimitsPolicy {
}
public interface Microsoft.AspNetCore.Mvc.IRequestSizePolicy {
}
public class Microsoft.AspNetCore.Mvc.LocalRedirectResult : ActionResult {
    private string _localUrl;
    [CompilerGeneratedAttribute]
private bool <Permanent>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <PreserveMethod>k__BackingField;
    [CompilerGeneratedAttribute]
private IUrlHelper <UrlHelper>k__BackingField;
    public bool Permanent { get; public set; }
    public bool PreserveMethod { get; public set; }
    public string Url { get; public set; }
    public IUrlHelper UrlHelper { get; public set; }
    public LocalRedirectResult(string localUrl);
    public LocalRedirectResult(string localUrl, bool permanent);
    public LocalRedirectResult(string localUrl, bool permanent, bool preserveMethod);
    [CompilerGeneratedAttribute]
public bool get_Permanent();
    [CompilerGeneratedAttribute]
public void set_Permanent(bool value);
    [CompilerGeneratedAttribute]
public bool get_PreserveMethod();
    [CompilerGeneratedAttribute]
public void set_PreserveMethod(bool value);
    public string get_Url();
    public void set_Url(string value);
    [CompilerGeneratedAttribute]
public IUrlHelper get_UrlHelper();
    [CompilerGeneratedAttribute]
public void set_UrlHelper(IUrlHelper value);
    public virtual Task ExecuteResultAsync(ActionContext context);
    [ObsoleteAttribute("This implementation will be removed in a future release, use ExecuteResultAsync.")]
public virtual void ExecuteResult(ActionContext context);
}
[AttributeUsageAttribute("68")]
public class Microsoft.AspNetCore.Mvc.MiddlewareFilterAttribute : Attribute {
    [CompilerGeneratedAttribute]
private Type <ConfigurationType>k__BackingField;
    [CompilerGeneratedAttribute]
private int <Order>k__BackingField;
    public Type ConfigurationType { get; }
    public int Order { get; public set; }
    public bool IsReusable { get; }
    public MiddlewareFilterAttribute(Type configurationType);
    [CompilerGeneratedAttribute]
public Type get_ConfigurationType();
    [CompilerGeneratedAttribute]
public sealed virtual int get_Order();
    [CompilerGeneratedAttribute]
public void set_Order(int value);
    public sealed virtual bool get_IsReusable();
    public sealed virtual IFilterMetadata CreateInstance(IServiceProvider serviceProvider);
}
[AttributeUsageAttribute("2204")]
public class Microsoft.AspNetCore.Mvc.ModelBinderAttribute : Attribute {
    private BindingSource _bindingSource;
    [CompilerGeneratedAttribute]
private Type <BinderType>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    public Type BinderType { get; public set; }
    public BindingSource BindingSource { get; protected set; }
    public string Name { get; public set; }
    public ModelBinderAttribute(Type binderType);
    [CompilerGeneratedAttribute]
public sealed virtual Type get_BinderType();
    [CompilerGeneratedAttribute]
public void set_BinderType(Type value);
    public virtual BindingSource get_BindingSource();
    protected virtual void set_BindingSource(BindingSource value);
    [CompilerGeneratedAttribute]
public sealed virtual string get_Name();
    [CompilerGeneratedAttribute]
public void set_Name(string value);
}
public class Microsoft.AspNetCore.Mvc.ModelBinding.Binders.ArrayModelBinder`1 : CollectionModelBinder`1<TElement> {
    [ObsoleteAttribute("This constructor is obsolete and will be removed in a future version. The recommended alternative is the overload that also takes an ILoggerFactory.")]
public ArrayModelBinder`1(IModelBinder elementBinder);
    public ArrayModelBinder`1(IModelBinder elementBinder, ILoggerFactory loggerFactory);
    public virtual bool CanCreateInstance(Type targetType);
    protected virtual object CreateEmptyCollection(Type targetType);
    protected virtual object ConvertToCollectionType(Type targetType, IEnumerable`1<TElement> collection);
    protected virtual void CopyToModel(object target, IEnumerable`1<TElement> sourceCollection);
}
public class Microsoft.AspNetCore.Mvc.ModelBinding.Binders.ArrayModelBinderProvider : object {
    public sealed virtual IModelBinder GetBinder(ModelBinderProviderContext context);
}
public class Microsoft.AspNetCore.Mvc.ModelBinding.Binders.BinderTypeModelBinder : object {
    private ObjectFactory _factory;
    public BinderTypeModelBinder(Type binderType);
    [AsyncStateMachineAttribute("Microsoft.AspNetCore.Mvc.ModelBinding.Binders.BinderTypeModelBinder/<BindModelAsync>d__2")]
public sealed virtual Task BindModelAsync(ModelBindingContext bindingContext);
}
public class Microsoft.AspNetCore.Mvc.ModelBinding.Binders.BinderTypeModelBinderProvider : object {
    public sealed virtual IModelBinder GetBinder(ModelBinderProviderContext context);
}
public class Microsoft.AspNetCore.Mvc.ModelBinding.Binders.BodyModelBinder : object {
    private IList`1<IInputFormatter> _formatters;
    private Func`3<Stream, Encoding, TextReader> _readerFactory;
    private ILogger _logger;
    private MvcOptions _options;
    public BodyModelBinder(IList`1<IInputFormatter> formatters, IHttpRequestStreamReaderFactory readerFactory);
    public BodyModelBinder(IList`1<IInputFormatter> formatters, IHttpRequestStreamReaderFactory readerFactory, ILoggerFactory loggerFactory);
    public BodyModelBinder(IList`1<IInputFormatter> formatters, IHttpRequestStreamReaderFactory readerFactory, ILoggerFactory loggerFactory, MvcOptions options);
    [AsyncStateMachineAttribute("Microsoft.AspNetCore.Mvc.ModelBinding.Binders.BodyModelBinder/<BindModelAsync>d__7")]
public sealed virtual Task BindModelAsync(ModelBindingContext bindingContext);
    private bool ShouldHandleException(IInputFormatter formatter);
}
public class Microsoft.AspNetCore.Mvc.ModelBinding.Binders.BodyModelBinderProvider : object {
    private IList`1<IInputFormatter> _formatters;
    private IHttpRequestStreamReaderFactory _readerFactory;
    private ILoggerFactory _loggerFactory;
    private MvcOptions _options;
    public BodyModelBinderProvider(IList`1<IInputFormatter> formatters, IHttpRequestStreamReaderFactory readerFactory);
    public BodyModelBinderProvider(IList`1<IInputFormatter> formatters, IHttpRequestStreamReaderFactory readerFactory, ILoggerFactory loggerFactory);
    public BodyModelBinderProvider(IList`1<IInputFormatter> formatters, IHttpRequestStreamReaderFactory readerFactory, ILoggerFactory loggerFactory, MvcOptions options);
    public sealed virtual IModelBinder GetBinder(ModelBinderProviderContext context);
}
public class Microsoft.AspNetCore.Mvc.ModelBinding.Binders.ByteArrayModelBinder : object {
    private ILogger _logger;
    public ByteArrayModelBinder(ILoggerFactory loggerFactory);
    public sealed virtual Task BindModelAsync(ModelBindingContext bindingContext);
}
public class Microsoft.AspNetCore.Mvc.ModelBinding.Binders.ByteArrayModelBinderProvider : object {
    public sealed virtual IModelBinder GetBinder(ModelBinderProviderContext context);
}
public class Microsoft.AspNetCore.Mvc.ModelBinding.Binders.CancellationTokenModelBinder : object {
    public sealed virtual Task BindModelAsync(ModelBindingContext bindingContext);
}
public class Microsoft.AspNetCore.Mvc.ModelBinding.Binders.CancellationTokenModelBinderProvider : object {
    public sealed virtual IModelBinder GetBinder(ModelBinderProviderContext context);
}
public class Microsoft.AspNetCore.Mvc.ModelBinding.Binders.CollectionModelBinder`1 : object {
    private static IValueProvider EmptyValueProvider;
    private Func`1<object> _modelCreator;
    [CompilerGeneratedAttribute]
private IModelBinder <ElementBinder>k__BackingField;
    [CompilerGeneratedAttribute]
private ILogger <Logger>k__BackingField;
    protected IModelBinder ElementBinder { get; }
    protected ILogger Logger { get; }
    [ObsoleteAttribute("This constructor is obsolete and will be removed in a future version. The recommended alternative is the overload that also takes an ILoggerFactory.")]
public CollectionModelBinder`1(IModelBinder elementBinder);
    public CollectionModelBinder`1(IModelBinder elementBinder, ILoggerFactory loggerFactory);
    private static CollectionModelBinder`1();
    [CompilerGeneratedAttribute]
protected IModelBinder get_ElementBinder();
    [CompilerGeneratedAttribute]
protected ILogger get_Logger();
    [AsyncStateMachineAttribute("Microsoft.AspNetCore.Mvc.ModelBinding.Binders.CollectionModelBinder`1/<BindModelAsync>d__10")]
public virtual Task BindModelAsync(ModelBindingContext bindingContext);
    public virtual bool CanCreateInstance(Type targetType);
    protected virtual object CreateEmptyCollection(Type targetType);
    protected object CreateInstance(Type targetType);
    [AsyncStateMachineAttribute("Microsoft.AspNetCore.Mvc.ModelBinding.Binders.CollectionModelBinder`1/<BindSimpleCollection>d__14")]
internal Task`1<CollectionResult<TElement>> BindSimpleCollection(ModelBindingContext bindingContext, ValueProviderResult values);
    private Task`1<CollectionResult<TElement>> BindComplexCollection(ModelBindingContext bindingContext);
    [AsyncStateMachineAttribute("Microsoft.AspNetCore.Mvc.ModelBinding.Binders.CollectionModelBinder`1/<BindComplexCollectionFromIndexes>d__16")]
internal Task`1<CollectionResult<TElement>> BindComplexCollectionFromIndexes(ModelBindingContext bindingContext, IEnumerable`1<string> indexNames);
    protected virtual object ConvertToCollectionType(Type targetType, IEnumerable`1<TElement> collection);
    protected virtual void CopyToModel(object target, IEnumerable`1<TElement> sourceCollection);
    private static IEnumerable`1<string> GetIndexNamesFromValueProviderResult(ValueProviderResult valueProviderResult);
}
public class Microsoft.AspNetCore.Mvc.ModelBinding.Binders.CollectionModelBinderProvider : object {
    public sealed virtual IModelBinder GetBinder(ModelBinderProviderContext context);
}
public class Microsoft.AspNetCore.Mvc.ModelBinding.Binders.ComplexTypeModelBinder : object {
    private IDictionary`2<ModelMetadata, IModelBinder> _propertyBinders;
    private ILogger _logger;
    private Func`1<object> _modelCreator;
    [ObsoleteAttribute("This constructor is obsolete and will be removed in a future version. The recommended alternative is the overload that also takes an ILoggerFactory.")]
public ComplexTypeModelBinder(IDictionary`2<ModelMetadata, IModelBinder> propertyBinders);
    public ComplexTypeModelBinder(IDictionary`2<ModelMetadata, IModelBinder> propertyBinders, ILoggerFactory loggerFactory);
    public sealed virtual Task BindModelAsync(ModelBindingContext bindingContext);
    [AsyncStateMachineAttribute("Microsoft.AspNetCore.Mvc.ModelBinding.Binders.ComplexTypeModelBinder/<BindModelCoreAsync>d__6")]
private Task BindModelCoreAsync(ModelBindingContext bindingContext);
    protected virtual bool CanBindProperty(ModelBindingContext bindingContext, ModelMetadata propertyMetadata);
    protected virtual Task BindProperty(ModelBindingContext bindingContext);
    internal bool CanCreateModel(ModelBindingContext bindingContext);
    private bool CanValueBindAnyModelProperties(ModelBindingContext bindingContext);
    internal static bool CanUpdatePropertyInternal(ModelMetadata propertyMetadata);
    private static bool CanUpdateReadOnlyProperty(Type propertyType);
    protected virtual object CreateModel(ModelBindingContext bindingContext);
    protected virtual void SetProperty(ModelBindingContext bindingContext, string modelName, ModelMetadata propertyMetadata, ModelBindingResult result);
    private static void AddModelError(Exception exception, string modelName, ModelBindingContext bindingContext);
}
public class Microsoft.AspNetCore.Mvc.ModelBinding.Binders.ComplexTypeModelBinderProvider : object {
    public sealed virtual IModelBinder GetBinder(ModelBinderProviderContext context);
}
public class Microsoft.AspNetCore.Mvc.ModelBinding.Binders.DecimalModelBinder : object {
    private NumberStyles _supportedStyles;
    private ILogger _logger;
    [ObsoleteAttribute("This constructor is obsolete and will be removed in a future version. The recommended alternative is the overload that also takes an ILoggerFactory.")]
public DecimalModelBinder(NumberStyles supportedStyles);
    public DecimalModelBinder(NumberStyles supportedStyles, ILoggerFactory loggerFactory);
    public sealed virtual Task BindModelAsync(ModelBindingContext bindingContext);
}
public class Microsoft.AspNetCore.Mvc.ModelBinding.Binders.DictionaryModelBinder`2 : CollectionModelBinder`1<KeyValuePair`2<TKey, TValue>> {
    private IModelBinder _valueBinder;
    [ObsoleteAttribute("This constructor is obsolete and will be removed in a future version. The recommended alternative is the overload that also takes an ILoggerFactory.")]
public DictionaryModelBinder`2(IModelBinder keyBinder, IModelBinder valueBinder);
    public DictionaryModelBinder`2(IModelBinder keyBinder, IModelBinder valueBinder, ILoggerFactory loggerFactory);
    [AsyncStateMachineAttribute("Microsoft.AspNetCore.Mvc.ModelBinding.Binders.DictionaryModelBinder`2/<BindModelAsync>d__3")]
public virtual Task BindModelAsync(ModelBindingContext bindingContext);
    protected virtual object ConvertToCollectionType(Type targetType, IEnumerable`1<KeyValuePair`2<TKey, TValue>> collection);
    protected virtual object CreateEmptyCollection(Type targetType);
    public virtual bool CanCreateInstance(Type targetType);
    [CompilerGeneratedAttribute]
[DebuggerHiddenAttribute]
private Task <>n__0(ModelBindingContext bindingContext);
}
public class Microsoft.AspNetCore.Mvc.ModelBinding.Binders.DictionaryModelBinderProvider : object {
    public sealed virtual IModelBinder GetBinder(ModelBinderProviderContext context);
}
public class Microsoft.AspNetCore.Mvc.ModelBinding.Binders.DoubleModelBinder : object {
    private NumberStyles _supportedStyles;
    private ILogger _logger;
    [ObsoleteAttribute("This constructor is obsolete and will be removed in a future version. The recommended alternative is the overload that also takes an ILoggerFactory.")]
public DoubleModelBinder(NumberStyles supportedStyles);
    public DoubleModelBinder(NumberStyles supportedStyles, ILoggerFactory loggerFactory);
    public sealed virtual Task BindModelAsync(ModelBindingContext bindingContext);
}
public class Microsoft.AspNetCore.Mvc.ModelBinding.Binders.EnumTypeModelBinder : SimpleTypeModelBinder {
    private bool _suppressBindingUndefinedValueToEnumType;
    public EnumTypeModelBinder(bool suppressBindingUndefinedValueToEnumType, Type modelType, ILoggerFactory loggerFactory);
    protected virtual void CheckModel(ModelBindingContext bindingContext, ValueProviderResult valueProviderResult, object model);
    private bool IsDefinedInEnum(object model, ModelBindingContext bindingContext);
}
public class Microsoft.AspNetCore.Mvc.ModelBinding.Binders.EnumTypeModelBinderProvider : object {
    private MvcOptions _options;
    public EnumTypeModelBinderProvider(MvcOptions options);
    public sealed virtual IModelBinder GetBinder(ModelBinderProviderContext context);
}
public class Microsoft.AspNetCore.Mvc.ModelBinding.Binders.FloatingPointTypeModelBinderProvider : object {
    internal static NumberStyles SupportedStyles;
    private static FloatingPointTypeModelBinderProvider();
    public sealed virtual IModelBinder GetBinder(ModelBinderProviderContext context);
}
public class Microsoft.AspNetCore.Mvc.ModelBinding.Binders.FloatModelBinder : object {
    private NumberStyles _supportedStyles;
    private ILogger _logger;
    [ObsoleteAttribute("This constructor is obsolete and will be removed in a future version. The recommended alternative is the overload that also takes an ILoggerFactory.")]
public FloatModelBinder(NumberStyles supportedStyles);
    public FloatModelBinder(NumberStyles supportedStyles, ILoggerFactory loggerFactory);
    public sealed virtual Task BindModelAsync(ModelBindingContext bindingContext);
}
public class Microsoft.AspNetCore.Mvc.ModelBinding.Binders.FormCollectionModelBinder : object {
    private ILogger _logger;
    public FormCollectionModelBinder(ILoggerFactory loggerFactory);
    [AsyncStateMachineAttribute("Microsoft.AspNetCore.Mvc.ModelBinding.Binders.FormCollectionModelBinder/<BindModelAsync>d__3")]
public sealed virtual Task BindModelAsync(ModelBindingContext bindingContext);
}
public class Microsoft.AspNetCore.Mvc.ModelBinding.Binders.FormCollectionModelBinderProvider : object {
    public sealed virtual IModelBinder GetBinder(ModelBinderProviderContext context);
}
public class Microsoft.AspNetCore.Mvc.ModelBinding.Binders.FormFileModelBinder : object {
    private ILogger _logger;
    public FormFileModelBinder(ILoggerFactory loggerFactory);
    [AsyncStateMachineAttribute("Microsoft.AspNetCore.Mvc.ModelBinding.Binders.FormFileModelBinder/<BindModelAsync>d__3")]
public sealed virtual Task BindModelAsync(ModelBindingContext bindingContext);
    [AsyncStateMachineAttribute("Microsoft.AspNetCore.Mvc.ModelBinding.Binders.FormFileModelBinder/<GetFormFilesAsync>d__4")]
private Task GetFormFilesAsync(string modelName, ModelBindingContext bindingContext, ICollection`1<IFormFile> postedFiles);
}
public class Microsoft.AspNetCore.Mvc.ModelBinding.Binders.FormFileModelBinderProvider : object {
    public sealed virtual IModelBinder GetBinder(ModelBinderProviderContext context);
}
public class Microsoft.AspNetCore.Mvc.ModelBinding.Binders.HeaderModelBinder : object {
    private ILogger _logger;
    [CompilerGeneratedAttribute]
private IModelBinder <InnerModelBinder>k__BackingField;
    internal IModelBinder InnerModelBinder { get; }
    public HeaderModelBinder(ILoggerFactory loggerFactory);
    public HeaderModelBinder(ILoggerFactory loggerFactory, IModelBinder innerModelBinder);
    [CompilerGeneratedAttribute]
internal IModelBinder get_InnerModelBinder();
    [AsyncStateMachineAttribute("Microsoft.AspNetCore.Mvc.ModelBinding.Binders.HeaderModelBinder/<BindModelAsync>d__7")]
public sealed virtual Task BindModelAsync(ModelBindingContext bindingContext);
    private HeaderValueProvider GetHeaderValueProvider(string headerName, ModelBindingContext bindingContext);
    private void BindWithoutInnerBinder(ModelBindingContext bindingContext);
    private static object GetCompatibleCollection(ModelBindingContext bindingContext, String[] values);
}
public class Microsoft.AspNetCore.Mvc.ModelBinding.Binders.HeaderModelBinderProvider : object {
    public sealed virtual IModelBinder GetBinder(ModelBinderProviderContext context);
    private bool IsSimpleType(ModelMetadata modelMetadata);
}
public class Microsoft.AspNetCore.Mvc.ModelBinding.Binders.KeyValuePairModelBinder`2 : object {
    private IModelBinder _keyBinder;
    private IModelBinder _valueBinder;
    private ILogger _logger;
    [ObsoleteAttribute("This constructor is obsolete and will be removed in a future version. The recommended alternative is the overload that also takes an ILoggerFactory.")]
public KeyValuePairModelBinder`2(IModelBinder keyBinder, IModelBinder valueBinder);
    public KeyValuePairModelBinder`2(IModelBinder keyBinder, IModelBinder valueBinder, ILoggerFactory loggerFactory);
    [AsyncStateMachineAttribute("Microsoft.AspNetCore.Mvc.ModelBinding.Binders.KeyValuePairModelBinder`2/<BindModelAsync>d__5")]
public sealed virtual Task BindModelAsync(ModelBindingContext bindingContext);
    [AsyncStateMachineAttribute("Microsoft.AspNetCore.Mvc.ModelBinding.Binders.KeyValuePairModelBinder`2/<TryBindStrongModel>d__6`1")]
internal Task`1<ModelBindingResult> TryBindStrongModel(ModelBindingContext bindingContext, IModelBinder binder, string propertyName, string propertyModelName);
}
public class Microsoft.AspNetCore.Mvc.ModelBinding.Binders.KeyValuePairModelBinderProvider : object {
    public sealed virtual IModelBinder GetBinder(ModelBinderProviderContext context);
}
public class Microsoft.AspNetCore.Mvc.ModelBinding.Binders.ServicesModelBinder : object {
    public sealed virtual Task BindModelAsync(ModelBindingContext bindingContext);
}
public class Microsoft.AspNetCore.Mvc.ModelBinding.Binders.ServicesModelBinderProvider : object {
    public sealed virtual IModelBinder GetBinder(ModelBinderProviderContext context);
}
public class Microsoft.AspNetCore.Mvc.ModelBinding.Binders.SimpleTypeModelBinder : object {
    private TypeConverter _typeConverter;
    private ILogger _logger;
    [ObsoleteAttribute("This constructor is obsolete and will be removed in a future version. The recommended alternative is the overload that also takes an ILoggerFactory.")]
public SimpleTypeModelBinder(Type type);
    public SimpleTypeModelBinder(Type type, ILoggerFactory loggerFactory);
    public sealed virtual Task BindModelAsync(ModelBindingContext bindingContext);
    protected virtual void CheckModel(ModelBindingContext bindingContext, ValueProviderResult valueProviderResult, object model);
}
public class Microsoft.AspNetCore.Mvc.ModelBinding.Binders.SimpleTypeModelBinderProvider : object {
    public sealed virtual IModelBinder GetBinder(ModelBinderProviderContext context);
}
public enum Microsoft.AspNetCore.Mvc.ModelBinding.BindingBehavior : Enum {
    public int value__;
    public static BindingBehavior Optional;
    public static BindingBehavior Never;
    public static BindingBehavior Required;
}
[AttributeUsageAttribute("2180")]
public class Microsoft.AspNetCore.Mvc.ModelBinding.BindingBehaviorAttribute : Attribute {
    [CompilerGeneratedAttribute]
private BindingBehavior <Behavior>k__BackingField;
    public BindingBehavior Behavior { get; }
    public BindingBehaviorAttribute(BindingBehavior behavior);
    [CompilerGeneratedAttribute]
public BindingBehavior get_Behavior();
}
public abstract class Microsoft.AspNetCore.Mvc.ModelBinding.BindingSourceValueProvider : object {
    [CompilerGeneratedAttribute]
private BindingSource <BindingSource>k__BackingField;
    protected BindingSource BindingSource { get; }
    public BindingSourceValueProvider(BindingSource bindingSource);
    [CompilerGeneratedAttribute]
protected BindingSource get_BindingSource();
    public abstract virtual bool ContainsPrefix(string prefix);
    public abstract virtual ValueProviderResult GetValue(string key);
    public virtual IValueProvider Filter(BindingSource bindingSource);
}
[AttributeUsageAttribute("2180")]
public class Microsoft.AspNetCore.Mvc.ModelBinding.BindNeverAttribute : BindingBehaviorAttribute {
}
[AttributeUsageAttribute("2180")]
public class Microsoft.AspNetCore.Mvc.ModelBinding.BindRequiredAttribute : BindingBehaviorAttribute {
}
public class Microsoft.AspNetCore.Mvc.ModelBinding.CompositeValueProvider : Collection`1<IValueProvider> {
    public CompositeValueProvider(IList`1<IValueProvider> valueProviders);
    [AsyncStateMachineAttribute("Microsoft.AspNetCore.Mvc.ModelBinding.CompositeValueProvider/<CreateAsync>d__2")]
public static Task`1<CompositeValueProvider> CreateAsync(ControllerContext controllerContext);
    [AsyncStateMachineAttribute("Microsoft.AspNetCore.Mvc.ModelBinding.CompositeValueProvider/<CreateAsync>d__3")]
public static Task`1<CompositeValueProvider> CreateAsync(ActionContext actionContext, IList`1<IValueProviderFactory> factories);
    public virtual bool ContainsPrefix(string prefix);
    public virtual ValueProviderResult GetValue(string key);
    public virtual IDictionary`2<string, string> GetKeysFromPrefix(string prefix);
    protected virtual void InsertItem(int index, IValueProvider item);
    protected virtual void SetItem(int index, IValueProvider item);
    public sealed virtual IValueProvider Filter(BindingSource bindingSource);
    public sealed virtual IValueProvider Filter();
}
public class Microsoft.AspNetCore.Mvc.ModelBinding.DefaultModelBindingContext : ModelBindingContext {
    private static IValueProvider EmptyValueProvider;
    private IValueProvider _originalValueProvider;
    private ActionContext _actionContext;
    private ModelStateDictionary _modelState;
    private ValidationStateDictionary _validationState;
    private State _state;
    private Stack`1<State> _stack;
    public ActionContext ActionContext { get; public set; }
    public string FieldName { get; public set; }
    public object Model { get; public set; }
    public ModelMetadata ModelMetadata { get; public set; }
    public string ModelName { get; public set; }
    public ModelStateDictionary ModelState { get; public set; }
    public string BinderModelName { get; public set; }
    public BindingSource BindingSource { get; public set; }
    public bool IsTopLevelObject { get; public set; }
    public IValueProvider OriginalValueProvider { get; public set; }
    public IValueProvider ValueProvider { get; public set; }
    public Func`2<ModelMetadata, bool> PropertyFilter { get; public set; }
    public ValidationStateDictionary ValidationState { get; public set; }
    public ModelBindingResult Result { get; public set; }
    private static DefaultModelBindingContext();
    public virtual ActionContext get_ActionContext();
    public virtual void set_ActionContext(ActionContext value);
    public virtual string get_FieldName();
    public virtual void set_FieldName(string value);
    public virtual object get_Model();
    public virtual void set_Model(object value);
    public virtual ModelMetadata get_ModelMetadata();
    public virtual void set_ModelMetadata(ModelMetadata value);
    public virtual string get_ModelName();
    public virtual void set_ModelName(string value);
    public virtual ModelStateDictionary get_ModelState();
    public virtual void set_ModelState(ModelStateDictionary value);
    public virtual string get_BinderModelName();
    public virtual void set_BinderModelName(string value);
    public virtual BindingSource get_BindingSource();
    public virtual void set_BindingSource(BindingSource value);
    public virtual bool get_IsTopLevelObject();
    public virtual void set_IsTopLevelObject(bool value);
    public IValueProvider get_OriginalValueProvider();
    public void set_OriginalValueProvider(IValueProvider value);
    public virtual IValueProvider get_ValueProvider();
    public virtual void set_ValueProvider(IValueProvider value);
    public virtual Func`2<ModelMetadata, bool> get_PropertyFilter();
    public virtual void set_PropertyFilter(Func`2<ModelMetadata, bool> value);
    public virtual ValidationStateDictionary get_ValidationState();
    public virtual void set_ValidationState(ValidationStateDictionary value);
    public virtual ModelBindingResult get_Result();
    public virtual void set_Result(ModelBindingResult value);
    public static ModelBindingContext CreateBindingContext(ActionContext actionContext, IValueProvider valueProvider, ModelMetadata metadata, BindingInfo bindingInfo, string modelName);
    public virtual NestedScope EnterNestedScope(ModelMetadata modelMetadata, string fieldName, string modelName, object model);
    public virtual NestedScope EnterNestedScope();
    protected virtual void ExitNestedScope();
    private static IValueProvider FilterValueProvider(IValueProvider valueProvider, BindingSource bindingSource);
}
public class Microsoft.AspNetCore.Mvc.ModelBinding.DefaultPropertyFilterProvider`1 : object {
    private static Func`2<ModelMetadata, bool> _default;
    public string Prefix { get; }
    public IEnumerable`1<Expression`1<Func`2<TModel, object>>> PropertyIncludeExpressions { get; }
    public Func`2<ModelMetadata, bool> PropertyFilter { get; }
    private static DefaultPropertyFilterProvider`1();
    public virtual string get_Prefix();
    public virtual IEnumerable`1<Expression`1<Func`2<TModel, object>>> get_PropertyIncludeExpressions();
    public virtual Func`2<ModelMetadata, bool> get_PropertyFilter();
    private Func`2<ModelMetadata, bool> GetPropertyFilterFromExpression(IEnumerable`1<Expression`1<Func`2<TModel, object>>> includeExpressions);
}
public class Microsoft.AspNetCore.Mvc.ModelBinding.EmptyModelMetadataProvider : DefaultModelMetadataProvider {
}
public class Microsoft.AspNetCore.Mvc.ModelBinding.FormValueProvider : BindingSourceValueProvider {
    private CultureInfo _culture;
    private IFormCollection _values;
    private PrefixContainer _prefixContainer;
    public CultureInfo Culture { get; }
    protected PrefixContainer PrefixContainer { get; }
    public FormValueProvider(BindingSource bindingSource, IFormCollection values, CultureInfo culture);
    public CultureInfo get_Culture();
    protected PrefixContainer get_PrefixContainer();
    public virtual bool ContainsPrefix(string prefix);
    public virtual IDictionary`2<string, string> GetKeysFromPrefix(string prefix);
    public virtual ValueProviderResult GetValue(string key);
}
public class Microsoft.AspNetCore.Mvc.ModelBinding.FormValueProviderFactory : object {
    public sealed virtual Task CreateValueProviderAsync(ValueProviderFactoryContext context);
    [AsyncStateMachineAttribute("Microsoft.AspNetCore.Mvc.ModelBinding.FormValueProviderFactory/<AddValueProviderAsync>d__1")]
private static Task AddValueProviderAsync(ValueProviderFactoryContext context);
}
public interface Microsoft.AspNetCore.Mvc.ModelBinding.IBindingSourceValueProvider {
    public abstract virtual IValueProvider Filter(BindingSource bindingSource);
}
public interface Microsoft.AspNetCore.Mvc.ModelBinding.ICollectionModelBinder {
    public abstract virtual bool CanCreateInstance(Type targetType);
}
public interface Microsoft.AspNetCore.Mvc.ModelBinding.IEnumerableValueProvider {
    public abstract virtual IDictionary`2<string, string> GetKeysFromPrefix(string prefix);
}
public interface Microsoft.AspNetCore.Mvc.ModelBinding.IKeyRewriterValueProvider {
    public abstract virtual IValueProvider Filter();
}
public interface Microsoft.AspNetCore.Mvc.ModelBinding.IModelBinderFactory {
    public abstract virtual IModelBinder CreateBinder(ModelBinderFactoryContext context);
}
internal interface Microsoft.AspNetCore.Mvc.ModelBinding.IModelMetadataProvider2 {
    public abstract virtual ModelMetadata GetMetadataForParameter(ParameterInfo parameter, Type modelType);
    public abstract virtual ModelMetadata GetMetadataForProperty(PropertyInfo propertyInfo, Type modelType);
}
public static class Microsoft.AspNetCore.Mvc.ModelBinding.Internal.ModelBindingHelper : object {
    public static Task`1<bool> TryUpdateModelAsync(TModel model, string prefix, ActionContext actionContext, IModelMetadataProvider metadataProvider, IModelBinderFactory modelBinderFactory, IValueProvider valueProvider, IObjectModelValidator objectModelValidator);
    public static Task`1<bool> TryUpdateModelAsync(TModel model, string prefix, ActionContext actionContext, IModelMetadataProvider metadataProvider, IModelBinderFactory modelBinderFactory, IValueProvider valueProvider, IObjectModelValidator objectModelValidator, Expression`1[] includeExpressions);
    public static Task`1<bool> TryUpdateModelAsync(TModel model, string prefix, ActionContext actionContext, IModelMetadataProvider metadataProvider, IModelBinderFactory modelBinderFactory, IValueProvider valueProvider, IObjectModelValidator objectModelValidator, Func`2<ModelMetadata, bool> propertyFilter);
    public static Task`1<bool> TryUpdateModelAsync(object model, Type modelType, string prefix, ActionContext actionContext, IModelMetadataProvider metadataProvider, IModelBinderFactory modelBinderFactory, IValueProvider valueProvider, IObjectModelValidator objectModelValidator);
    [AsyncStateMachineAttribute("Microsoft.AspNetCore.Mvc.ModelBinding.Internal.ModelBindingHelper/<TryUpdateModelAsync>d__4")]
public static Task`1<bool> TryUpdateModelAsync(object model, Type modelType, string prefix, ActionContext actionContext, IModelMetadataProvider metadataProvider, IModelBinderFactory modelBinderFactory, IValueProvider valueProvider, IObjectModelValidator objectModelValidator, Func`2<ModelMetadata, bool> propertyFilter);
    internal static string GetPropertyName(Expression expression);
    public static Expression`1<Func`2<ModelMetadata, bool>> GetPropertyFilterExpression(Expression`1[] expressions);
    private static Expression`1<Func`2<ModelMetadata, bool>> GetPredicateExpression(Expression`1<Func`2<TModel, object>> expression);
    public static void ClearValidationStateForModel(Type modelType, ModelStateDictionary modelState, IModelMetadataProvider metadataProvider, string modelKey);
    public static void ClearValidationStateForModel(ModelMetadata modelMetadata, ModelStateDictionary modelState, string modelKey);
    internal static TModel CastOrDefault(object model);
    public static bool CanGetCompatibleCollection(ModelBindingContext bindingContext);
    public static ICollection`1<T> GetCompatibleCollection(ModelBindingContext bindingContext);
    public static ICollection`1<T> GetCompatibleCollection(ModelBindingContext bindingContext, int capacity);
    private static ICollection`1<T> GetCompatibleCollection(ModelBindingContext bindingContext, Nullable`1<int> capacity);
    private static List`1<T> CreateList(Nullable`1<int> capacity);
    public static T ConvertTo(object value, CultureInfo culture);
    public static object ConvertTo(object value, Type type, CultureInfo culture);
    private static object UnwrapPossibleArrayType(object value, Type destinationType, CultureInfo culture);
    private static object ConvertSimpleType(object value, Type destinationType, CultureInfo culture);
    private static Type UnwrapNullableType(Type destinationType);
}
public class Microsoft.AspNetCore.Mvc.ModelBinding.Internal.ValidationStack : object {
    internal static int CutOff;
    [CompilerGeneratedAttribute]
private List`1<object> <List>k__BackingField;
    [CompilerGeneratedAttribute]
private HashSet`1<object> <HashSet>k__BackingField;
    public int Count { get; }
    internal List`1<object> List { get; }
    internal HashSet`1<object> HashSet { get; internal set; }
    public int get_Count();
    [CompilerGeneratedAttribute]
internal List`1<object> get_List();
    [CompilerGeneratedAttribute]
internal HashSet`1<object> get_HashSet();
    [CompilerGeneratedAttribute]
internal void set_HashSet(HashSet`1<object> value);
    public bool Push(object model);
    public void Pop(object model);
    private bool ListContains(object model);
}
public class Microsoft.AspNetCore.Mvc.ModelBinding.JQueryFormValueProvider : JQueryValueProvider {
    public JQueryFormValueProvider(BindingSource bindingSource, IDictionary`2<string, StringValues> values, CultureInfo culture);
}
public class Microsoft.AspNetCore.Mvc.ModelBinding.JQueryFormValueProviderFactory : object {
    public sealed virtual Task CreateValueProviderAsync(ValueProviderFactoryContext context);
    [AsyncStateMachineAttribute("Microsoft.AspNetCore.Mvc.ModelBinding.JQueryFormValueProviderFactory/<AddValueProviderAsync>d__1")]
private static Task AddValueProviderAsync(ValueProviderFactoryContext context);
}
internal static class Microsoft.AspNetCore.Mvc.ModelBinding.JQueryKeyValuePairNormalizer : object {
    public static IDictionary`2<string, StringValues> GetValues(IEnumerable`1<KeyValuePair`2<string, StringValues>> originalValues, int valueCount);
    private static string NormalizeJQueryToMvc(StringBuilder builder, string key);
}
public class Microsoft.AspNetCore.Mvc.ModelBinding.JQueryQueryStringValueProvider : JQueryValueProvider {
    public JQueryQueryStringValueProvider(BindingSource bindingSource, IDictionary`2<string, StringValues> values, CultureInfo culture);
}
public class Microsoft.AspNetCore.Mvc.ModelBinding.JQueryQueryStringValueProviderFactory : object {
    public sealed virtual Task CreateValueProviderAsync(ValueProviderFactoryContext context);
}
public abstract class Microsoft.AspNetCore.Mvc.ModelBinding.JQueryValueProvider : BindingSourceValueProvider {
    private IDictionary`2<string, StringValues> _values;
    private PrefixContainer _prefixContainer;
    [CompilerGeneratedAttribute]
private CultureInfo <Culture>k__BackingField;
    public CultureInfo Culture { get; }
    protected PrefixContainer PrefixContainer { get; }
    protected JQueryValueProvider(BindingSource bindingSource, IDictionary`2<string, StringValues> values, CultureInfo culture);
    [CompilerGeneratedAttribute]
public CultureInfo get_Culture();
    protected PrefixContainer get_PrefixContainer();
    public virtual bool ContainsPrefix(string prefix);
    public sealed virtual IDictionary`2<string, string> GetKeysFromPrefix(string prefix);
    public virtual ValueProviderResult GetValue(string key);
    public sealed virtual IValueProvider Filter();
}
public class Microsoft.AspNetCore.Mvc.ModelBinding.Metadata.BindingMetadata : object {
    private DefaultModelBindingMessageProvider _messageProvider;
    [CompilerGeneratedAttribute]
private BindingSource <BindingSource>k__BackingField;
    [CompilerGeneratedAttribute]
private string <BinderModelName>k__BackingField;
    [CompilerGeneratedAttribute]
private Type <BinderType>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsBindingAllowed>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsBindingRequired>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<bool> <IsReadOnly>k__BackingField;
    [CompilerGeneratedAttribute]
private IPropertyFilterProvider <PropertyFilterProvider>k__BackingField;
    public BindingSource BindingSource { get; public set; }
    public string BinderModelName { get; public set; }
    public Type BinderType { get; public set; }
    public bool IsBindingAllowed { get; public set; }
    public bool IsBindingRequired { get; public set; }
    public Nullable`1<bool> IsReadOnly { get; public set; }
    public DefaultModelBindingMessageProvider ModelBindingMessageProvider { get; public set; }
    public IPropertyFilterProvider PropertyFilterProvider { get; public set; }
    [CompilerGeneratedAttribute]
public BindingSource get_BindingSource();
    [CompilerGeneratedAttribute]
public void set_BindingSource(BindingSource value);
    [CompilerGeneratedAttribute]
public string get_BinderModelName();
    [CompilerGeneratedAttribute]
public void set_BinderModelName(string value);
    [CompilerGeneratedAttribute]
public Type get_BinderType();
    [CompilerGeneratedAttribute]
public void set_BinderType(Type value);
    [CompilerGeneratedAttribute]
public bool get_IsBindingAllowed();
    [CompilerGeneratedAttribute]
public void set_IsBindingAllowed(bool value);
    [CompilerGeneratedAttribute]
public bool get_IsBindingRequired();
    [CompilerGeneratedAttribute]
public void set_IsBindingRequired(bool value);
    [CompilerGeneratedAttribute]
public Nullable`1<bool> get_IsReadOnly();
    [CompilerGeneratedAttribute]
public void set_IsReadOnly(Nullable`1<bool> value);
    public DefaultModelBindingMessageProvider get_ModelBindingMessageProvider();
    public void set_ModelBindingMessageProvider(DefaultModelBindingMessageProvider value);
    [CompilerGeneratedAttribute]
public IPropertyFilterProvider get_PropertyFilterProvider();
    [CompilerGeneratedAttribute]
public void set_PropertyFilterProvider(IPropertyFilterProvider value);
}
public class Microsoft.AspNetCore.Mvc.ModelBinding.Metadata.BindingMetadataProviderContext : object {
    [CompilerGeneratedAttribute]
private IReadOnlyList`1<object> <Attributes>k__BackingField;
    [CompilerGeneratedAttribute]
private ModelMetadataIdentity <Key>k__BackingField;
    [CompilerGeneratedAttribute]
private IReadOnlyList`1<object> <ParameterAttributes>k__BackingField;
    [CompilerGeneratedAttribute]
private IReadOnlyList`1<object> <PropertyAttributes>k__BackingField;
    [CompilerGeneratedAttribute]
private IReadOnlyList`1<object> <TypeAttributes>k__BackingField;
    [CompilerGeneratedAttribute]
private BindingMetadata <BindingMetadata>k__BackingField;
    public IReadOnlyList`1<object> Attributes { get; }
    public ModelMetadataIdentity Key { get; }
    public IReadOnlyList`1<object> ParameterAttributes { get; }
    public IReadOnlyList`1<object> PropertyAttributes { get; }
    public IReadOnlyList`1<object> TypeAttributes { get; }
    public BindingMetadata BindingMetadata { get; }
    public BindingMetadataProviderContext(ModelMetadataIdentity key, ModelAttributes attributes);
    [CompilerGeneratedAttribute]
public IReadOnlyList`1<object> get_Attributes();
    [CompilerGeneratedAttribute]
public ModelMetadataIdentity get_Key();
    [CompilerGeneratedAttribute]
public IReadOnlyList`1<object> get_ParameterAttributes();
    [CompilerGeneratedAttribute]
public IReadOnlyList`1<object> get_PropertyAttributes();
    [CompilerGeneratedAttribute]
public IReadOnlyList`1<object> get_TypeAttributes();
    [CompilerGeneratedAttribute]
public BindingMetadata get_BindingMetadata();
}
public class Microsoft.AspNetCore.Mvc.ModelBinding.Metadata.BindingSourceMetadataProvider : object {
    [CompilerGeneratedAttribute]
private Type <Type>k__BackingField;
    [CompilerGeneratedAttribute]
private BindingSource <BindingSource>k__BackingField;
    public Type Type { get; }
    public BindingSource BindingSource { get; }
    public BindingSourceMetadataProvider(Type type, BindingSource bindingSource);
    [CompilerGeneratedAttribute]
public Type get_Type();
    [CompilerGeneratedAttribute]
public BindingSource get_BindingSource();
    public sealed virtual void CreateBindingMetadata(BindingMetadataProviderContext context);
}
public class Microsoft.AspNetCore.Mvc.ModelBinding.Metadata.DefaultMetadataDetails : object {
    [CompilerGeneratedAttribute]
private ModelAttributes <ModelAttributes>k__BackingField;
    [CompilerGeneratedAttribute]
private BindingMetadata <BindingMetadata>k__BackingField;
    [CompilerGeneratedAttribute]
private DisplayMetadata <DisplayMetadata>k__BackingField;
    [CompilerGeneratedAttribute]
private ModelMetadataIdentity <Key>k__BackingField;
    [CompilerGeneratedAttribute]
private ModelMetadata[] <Properties>k__BackingField;
    [CompilerGeneratedAttribute]
private Func`2<object, object> <PropertyGetter>k__BackingField;
    [CompilerGeneratedAttribute]
private Action`2<object, object> <PropertySetter>k__BackingField;
    [CompilerGeneratedAttribute]
private ValidationMetadata <ValidationMetadata>k__BackingField;
    [CompilerGeneratedAttribute]
private ModelMetadata <ContainerMetadata>k__BackingField;
    public ModelAttributes ModelAttributes { get; }
    public BindingMetadata BindingMetadata { get; public set; }
    public DisplayMetadata DisplayMetadata { get; public set; }
    public ModelMetadataIdentity Key { get; }
    public ModelMetadata[] Properties { get; public set; }
    public Func`2<object, object> PropertyGetter { get; public set; }
    public Action`2<object, object> PropertySetter { get; public set; }
    public ValidationMetadata ValidationMetadata { get; public set; }
    public ModelMetadata ContainerMetadata { get; public set; }
    public DefaultMetadataDetails(ModelMetadataIdentity key, ModelAttributes attributes);
    [CompilerGeneratedAttribute]
public ModelAttributes get_ModelAttributes();
    [CompilerGeneratedAttribute]
public BindingMetadata get_BindingMetadata();
    [CompilerGeneratedAttribute]
public void set_BindingMetadata(BindingMetadata value);
    [CompilerGeneratedAttribute]
public DisplayMetadata get_DisplayMetadata();
    [CompilerGeneratedAttribute]
public void set_DisplayMetadata(DisplayMetadata value);
    [CompilerGeneratedAttribute]
public ModelMetadataIdentity get_Key();
    [CompilerGeneratedAttribute]
public ModelMetadata[] get_Properties();
    [CompilerGeneratedAttribute]
public void set_Properties(ModelMetadata[] value);
    [CompilerGeneratedAttribute]
public Func`2<object, object> get_PropertyGetter();
    [CompilerGeneratedAttribute]
public void set_PropertyGetter(Func`2<object, object> value);
    [CompilerGeneratedAttribute]
public Action`2<object, object> get_PropertySetter();
    [CompilerGeneratedAttribute]
public void set_PropertySetter(Action`2<object, object> value);
    [CompilerGeneratedAttribute]
public ValidationMetadata get_ValidationMetadata();
    [CompilerGeneratedAttribute]
public void set_ValidationMetadata(ValidationMetadata value);
    [CompilerGeneratedAttribute]
public ModelMetadata get_ContainerMetadata();
    [CompilerGeneratedAttribute]
public void set_ContainerMetadata(ModelMetadata value);
}
public class Microsoft.AspNetCore.Mvc.ModelBinding.Metadata.DefaultModelBindingMessageProvider : ModelBindingMessageProvider {
    private Func`2<string, string> _missingBindRequiredValueAccessor;
    private Func`1<string> _missingKeyOrValueAccessor;
    private Func`1<string> _missingRequestBodyRequiredValueAccessor;
    private Func`2<string, string> _valueMustNotBeNullAccessor;
    private Func`3<string, string, string> _attemptedValueIsInvalidAccessor;
    private Func`2<string, string> _nonPropertyAttemptedValueIsInvalidAccessor;
    private Func`2<string, string> _unknownValueIsInvalidAccessor;
    private Func`1<string> _nonPropertyUnknownValueIsInvalidAccessor;
    private Func`2<string, string> _valueIsInvalidAccessor;
    private Func`2<string, string> _valueMustBeANumberAccessor;
    private Func`1<string> _nonPropertyValueMustBeANumberAccessor;
    public Func`2<string, string> MissingBindRequiredValueAccessor { get; }
    public Func`1<string> MissingKeyOrValueAccessor { get; }
    public Func`1<string> MissingRequestBodyRequiredValueAccessor { get; }
    public Func`2<string, string> ValueMustNotBeNullAccessor { get; }
    public Func`3<string, string, string> AttemptedValueIsInvalidAccessor { get; }
    public Func`2<string, string> NonPropertyAttemptedValueIsInvalidAccessor { get; }
    public Func`2<string, string> UnknownValueIsInvalidAccessor { get; }
    public Func`1<string> NonPropertyUnknownValueIsInvalidAccessor { get; }
    public Func`2<string, string> ValueIsInvalidAccessor { get; }
    public Func`2<string, string> ValueMustBeANumberAccessor { get; }
    public Func`1<string> NonPropertyValueMustBeANumberAccessor { get; }
    public DefaultModelBindingMessageProvider(DefaultModelBindingMessageProvider originalProvider);
    public virtual Func`2<string, string> get_MissingBindRequiredValueAccessor();
    public void SetMissingBindRequiredValueAccessor(Func`2<string, string> missingBindRequiredValueAccessor);
    public virtual Func`1<string> get_MissingKeyOrValueAccessor();
    public void SetMissingKeyOrValueAccessor(Func`1<string> missingKeyOrValueAccessor);
    public virtual Func`1<string> get_MissingRequestBodyRequiredValueAccessor();
    public void SetMissingRequestBodyRequiredValueAccessor(Func`1<string> missingRequestBodyRequiredValueAccessor);
    public virtual Func`2<string, string> get_ValueMustNotBeNullAccessor();
    public void SetValueMustNotBeNullAccessor(Func`2<string, string> valueMustNotBeNullAccessor);
    public virtual Func`3<string, string, string> get_AttemptedValueIsInvalidAccessor();
    public void SetAttemptedValueIsInvalidAccessor(Func`3<string, string, string> attemptedValueIsInvalidAccessor);
    public virtual Func`2<string, string> get_NonPropertyAttemptedValueIsInvalidAccessor();
    public void SetNonPropertyAttemptedValueIsInvalidAccessor(Func`2<string, string> nonPropertyAttemptedValueIsInvalidAccessor);
    public virtual Func`2<string, string> get_UnknownValueIsInvalidAccessor();
    public void SetUnknownValueIsInvalidAccessor(Func`2<string, string> unknownValueIsInvalidAccessor);
    public virtual Func`1<string> get_NonPropertyUnknownValueIsInvalidAccessor();
    public void SetNonPropertyUnknownValueIsInvalidAccessor(Func`1<string> nonPropertyUnknownValueIsInvalidAccessor);
    public virtual Func`2<string, string> get_ValueIsInvalidAccessor();
    public void SetValueIsInvalidAccessor(Func`2<string, string> valueIsInvalidAccessor);
    public virtual Func`2<string, string> get_ValueMustBeANumberAccessor();
    public void SetValueMustBeANumberAccessor(Func`2<string, string> valueMustBeANumberAccessor);
    public virtual Func`1<string> get_NonPropertyValueMustBeANumberAccessor();
    public void SetNonPropertyValueMustBeANumberAccessor(Func`1<string> nonPropertyValueMustBeANumberAccessor);
}
public class Microsoft.AspNetCore.Mvc.ModelBinding.Metadata.DefaultModelMetadata : ModelMetadata {
    private IModelMetadataProvider _provider;
    private ICompositeMetadataDetailsProvider _detailsProvider;
    private DefaultMetadataDetails _details;
    private DefaultModelBindingMessageProvider _modelBindingMessageProvider;
    private ReadOnlyDictionary`2<object, object> _additionalValues;
    private ModelMetadata _elementMetadata;
    private Nullable`1<bool> _isBindingRequired;
    private Nullable`1<bool> _isReadOnly;
    private Nullable`1<bool> _isRequired;
    private ModelPropertyCollection _properties;
    private Nullable`1<bool> _validateChildren;
    private ReadOnlyCollection`1<object> _validatorMetadata;
    public ModelAttributes Attributes { get; }
    public ModelMetadata ContainerMetadata { get; }
    public BindingMetadata BindingMetadata { get; }
    public DisplayMetadata DisplayMetadata { get; }
    public ValidationMetadata ValidationMetadata { get; }
    public IReadOnlyDictionary`2<object, object> AdditionalValues { get; }
    public BindingSource BindingSource { get; }
    public string BinderModelName { get; }
    public Type BinderType { get; }
    public bool ConvertEmptyStringToNull { get; }
    public string DataTypeName { get; }
    public string Description { get; }
    public string DisplayFormatString { get; }
    public string DisplayName { get; }
    public string EditFormatString { get; }
    public ModelMetadata ElementMetadata { get; }
    public IEnumerable`1<KeyValuePair`2<EnumGroupAndName, string>> EnumGroupedDisplayNamesAndValues { get; }
    public IReadOnlyDictionary`2<string, string> EnumNamesAndValues { get; }
    public bool HasNonDefaultEditFormat { get; }
    public bool HideSurroundingHtml { get; }
    public bool HtmlEncode { get; }
    public bool IsBindingAllowed { get; }
    public bool IsBindingRequired { get; }
    public bool IsEnum { get; }
    public bool IsFlagsEnum { get; }
    public bool IsReadOnly { get; }
    public bool IsRequired { get; }
    public ModelBindingMessageProvider ModelBindingMessageProvider { get; }
    public string NullDisplayText { get; }
    public int Order { get; }
    public string Placeholder { get; }
    public ModelPropertyCollection Properties { get; }
    public IPropertyFilterProvider PropertyFilterProvider { get; }
    public bool ShowForDisplay { get; }
    public bool ShowForEdit { get; }
    public string SimpleDisplayProperty { get; }
    public string TemplateHint { get; }
    public IPropertyValidationFilter PropertyValidationFilter { get; }
    public bool ValidateChildren { get; }
    public IReadOnlyList`1<object> ValidatorMetadata { get; }
    public Func`2<object, object> PropertyGetter { get; }
    public Action`2<object, object> PropertySetter { get; }
    public DefaultModelMetadata(IModelMetadataProvider provider, ICompositeMetadataDetailsProvider detailsProvider, DefaultMetadataDetails details);
    public DefaultModelMetadata(IModelMetadataProvider provider, ICompositeMetadataDetailsProvider detailsProvider, DefaultMetadataDetails details, DefaultModelBindingMessageProvider modelBindingMessageProvider);
    public ModelAttributes get_Attributes();
    public virtual ModelMetadata get_ContainerMetadata();
    public BindingMetadata get_BindingMetadata();
    public DisplayMetadata get_DisplayMetadata();
    public ValidationMetadata get_ValidationMetadata();
    public virtual IReadOnlyDictionary`2<object, object> get_AdditionalValues();
    public virtual BindingSource get_BindingSource();
    public virtual string get_BinderModelName();
    public virtual Type get_BinderType();
    public virtual bool get_ConvertEmptyStringToNull();
    public virtual string get_DataTypeName();
    public virtual string get_Description();
    public virtual string get_DisplayFormatString();
    public virtual string get_DisplayName();
    public virtual string get_EditFormatString();
    public virtual ModelMetadata get_ElementMetadata();
    public virtual IEnumerable`1<KeyValuePair`2<EnumGroupAndName, string>> get_EnumGroupedDisplayNamesAndValues();
    public virtual IReadOnlyDictionary`2<string, string> get_EnumNamesAndValues();
    public virtual bool get_HasNonDefaultEditFormat();
    public virtual bool get_HideSurroundingHtml();
    public virtual bool get_HtmlEncode();
    public virtual bool get_IsBindingAllowed();
    public virtual bool get_IsBindingRequired();
    public virtual bool get_IsEnum();
    public virtual bool get_IsFlagsEnum();
    public virtual bool get_IsReadOnly();
    public virtual bool get_IsRequired();
    public virtual ModelBindingMessageProvider get_ModelBindingMessageProvider();
    public virtual string get_NullDisplayText();
    public virtual int get_Order();
    public virtual string get_Placeholder();
    public virtual ModelPropertyCollection get_Properties();
    public virtual IPropertyFilterProvider get_PropertyFilterProvider();
    public virtual bool get_ShowForDisplay();
    public virtual bool get_ShowForEdit();
    public virtual string get_SimpleDisplayProperty();
    public virtual string get_TemplateHint();
    public virtual IPropertyValidationFilter get_PropertyValidationFilter();
    public virtual bool get_ValidateChildren();
    public virtual IReadOnlyList`1<object> get_ValidatorMetadata();
    public virtual Func`2<object, object> get_PropertyGetter();
    public virtual Action`2<object, object> get_PropertySetter();
    public virtual ModelMetadata GetMetadataForType(Type modelType);
    public virtual IEnumerable`1<ModelMetadata> GetMetadataForProperties(Type modelType);
}
public class Microsoft.AspNetCore.Mvc.ModelBinding.Metadata.DefaultModelMetadataProvider : ModelMetadataProvider {
    private static Func`3<ParameterInfo, Type, ModelMetadataIdentity> _modelMetadataIdentityForParameter;
    private TypeCache _typeCache;
    private Func`2<ModelMetadataIdentity, ModelMetadataCacheEntry> _cacheEntryFactory;
    private ModelMetadataCacheEntry _metadataCacheEntryForObjectType;
    [CompilerGeneratedAttribute]
private ICompositeMetadataDetailsProvider <DetailsProvider>k__BackingField;
    [CompilerGeneratedAttribute]
private DefaultModelBindingMessageProvider <ModelBindingMessageProvider>k__BackingField;
    protected ICompositeMetadataDetailsProvider DetailsProvider { get; }
    protected DefaultModelBindingMessageProvider ModelBindingMessageProvider { get; }
    private static DefaultModelMetadataProvider();
    public DefaultModelMetadataProvider(ICompositeMetadataDetailsProvider detailsProvider);
    public DefaultModelMetadataProvider(ICompositeMetadataDetailsProvider detailsProvider, IOptions`1<MvcOptions> optionsAccessor);
    private DefaultModelMetadataProvider(ICompositeMetadataDetailsProvider detailsProvider, DefaultModelBindingMessageProvider modelBindingMessageProvider);
    [CompilerGeneratedAttribute]
protected ICompositeMetadataDetailsProvider get_DetailsProvider();
    [CompilerGeneratedAttribute]
protected DefaultModelBindingMessageProvider get_ModelBindingMessageProvider();
    public virtual IEnumerable`1<ModelMetadata> GetMetadataForProperties(Type modelType);
    public virtual ModelMetadata GetMetadataForParameter(ParameterInfo parameter);
    private sealed virtual override ModelMetadata Microsoft.AspNetCore.Mvc.ModelBinding.IModelMetadataProvider2.GetMetadataForParameter(ParameterInfo parameter, Type modelType);
    internal ModelMetadata GetMetadataForParameter(ParameterInfo parameter, Type modelType);
    public virtual ModelMetadata GetMetadataForType(Type modelType);
    private sealed virtual override ModelMetadata Microsoft.AspNetCore.Mvc.ModelBinding.IModelMetadataProvider2.GetMetadataForProperty(PropertyInfo parameter, Type modelType);
    internal ModelMetadata GetMetadataForProperty(PropertyInfo propertyInfo, Type modelType);
    private static DefaultModelBindingMessageProvider GetMessageProvider(IOptions`1<MvcOptions> optionsAccessor);
    private ModelMetadataCacheEntry GetCacheEntry(Type modelType);
    private ModelMetadataCacheEntry GetCacheEntry(ParameterInfo parameter, Type modelType);
    private ModelMetadataCacheEntry GetCacheEntry(PropertyInfo property, Type modelType);
    private ModelMetadataCacheEntry CreateCacheEntry(ModelMetadataIdentity key);
    private DefaultMetadataDetails CreateSinglePropertyDetails(ModelMetadataIdentity propertyKey);
    private ModelMetadataCacheEntry GetMetadataCacheEntryForObjectType();
    protected virtual ModelMetadata CreateModelMetadata(DefaultMetadataDetails entry);
    protected virtual DefaultMetadataDetails[] CreatePropertyDetails(ModelMetadataIdentity key);
    private DefaultMetadataDetails CreateSinglePropertyDetails(ModelMetadataIdentity propertyKey, PropertyHelper propertyHelper);
    protected virtual DefaultMetadataDetails CreateTypeDetails(ModelMetadataIdentity key);
    protected virtual DefaultMetadataDetails CreateParameterDetails(ModelMetadataIdentity key);
}
public class Microsoft.AspNetCore.Mvc.ModelBinding.Metadata.DisplayMetadata : object {
    private Func`1<string> _displayFormatStringProvider;
    private Func`1<string> _editFormatStringProvider;
    private Func`1<string> _nullDisplayTextProvider;
    [CompilerGeneratedAttribute]
private IDictionary`2<object, object> <AdditionalValues>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <ConvertEmptyStringToNull>k__BackingField;
    [CompilerGeneratedAttribute]
private string <DataTypeName>k__BackingField;
    [CompilerGeneratedAttribute]
private Func`1<string> <Description>k__BackingField;
    [CompilerGeneratedAttribute]
private Func`1<string> <DisplayName>k__BackingField;
    [CompilerGeneratedAttribute]
private IEnumerable`1<KeyValuePair`2<EnumGroupAndName, string>> <EnumGroupedDisplayNamesAndValues>k__BackingField;
    [CompilerGeneratedAttribute]
private IReadOnlyDictionary`2<string, string> <EnumNamesAndValues>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <HasNonDefaultEditFormat>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <HideSurroundingHtml>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <HtmlEncode>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsEnum>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsFlagsEnum>k__BackingField;
    [CompilerGeneratedAttribute]
private int <Order>k__BackingField;
    [CompilerGeneratedAttribute]
private Func`1<string> <Placeholder>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <ShowForDisplay>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <ShowForEdit>k__BackingField;
    [CompilerGeneratedAttribute]
private string <SimpleDisplayProperty>k__BackingField;
    [CompilerGeneratedAttribute]
private string <TemplateHint>k__BackingField;
    public IDictionary`2<object, object> AdditionalValues { get; }
    public bool ConvertEmptyStringToNull { get; public set; }
    public string DataTypeName { get; public set; }
    public Func`1<string> Description { get; public set; }
    public string DisplayFormatString { get; public set; }
    public Func`1<string> DisplayFormatStringProvider { get; public set; }
    public Func`1<string> DisplayName { get; public set; }
    public string EditFormatString { get; public set; }
    public Func`1<string> EditFormatStringProvider { get; public set; }
    public IEnumerable`1<KeyValuePair`2<EnumGroupAndName, string>> EnumGroupedDisplayNamesAndValues { get; public set; }
    public IReadOnlyDictionary`2<string, string> EnumNamesAndValues { get; public set; }
    public bool HasNonDefaultEditFormat { get; public set; }
    public bool HideSurroundingHtml { get; public set; }
    public bool HtmlEncode { get; public set; }
    public bool IsEnum { get; public set; }
    public bool IsFlagsEnum { get; public set; }
    public string NullDisplayText { get; public set; }
    public Func`1<string> NullDisplayTextProvider { get; public set; }
    public int Order { get; public set; }
    public Func`1<string> Placeholder { get; public set; }
    public bool ShowForDisplay { get; public set; }
    public bool ShowForEdit { get; public set; }
    public string SimpleDisplayProperty { get; public set; }
    public string TemplateHint { get; public set; }
    [CompilerGeneratedAttribute]
public IDictionary`2<object, object> get_AdditionalValues();
    [CompilerGeneratedAttribute]
public bool get_ConvertEmptyStringToNull();
    [CompilerGeneratedAttribute]
public void set_ConvertEmptyStringToNull(bool value);
    [CompilerGeneratedAttribute]
public string get_DataTypeName();
    [CompilerGeneratedAttribute]
public void set_DataTypeName(string value);
    [CompilerGeneratedAttribute]
public Func`1<string> get_Description();
    [CompilerGeneratedAttribute]
public void set_Description(Func`1<string> value);
    public string get_DisplayFormatString();
    public void set_DisplayFormatString(string value);
    public Func`1<string> get_DisplayFormatStringProvider();
    public void set_DisplayFormatStringProvider(Func`1<string> value);
    [CompilerGeneratedAttribute]
public Func`1<string> get_DisplayName();
    [CompilerGeneratedAttribute]
public void set_DisplayName(Func`1<string> value);
    public string get_EditFormatString();
    public void set_EditFormatString(string value);
    public Func`1<string> get_EditFormatStringProvider();
    public void set_EditFormatStringProvider(Func`1<string> value);
    [CompilerGeneratedAttribute]
public IEnumerable`1<KeyValuePair`2<EnumGroupAndName, string>> get_EnumGroupedDisplayNamesAndValues();
    [CompilerGeneratedAttribute]
public void set_EnumGroupedDisplayNamesAndValues(IEnumerable`1<KeyValuePair`2<EnumGroupAndName, string>> value);
    [CompilerGeneratedAttribute]
public IReadOnlyDictionary`2<string, string> get_EnumNamesAndValues();
    [CompilerGeneratedAttribute]
public void set_EnumNamesAndValues(IReadOnlyDictionary`2<string, string> value);
    [CompilerGeneratedAttribute]
public bool get_HasNonDefaultEditFormat();
    [CompilerGeneratedAttribute]
public void set_HasNonDefaultEditFormat(bool value);
    [CompilerGeneratedAttribute]
public bool get_HideSurroundingHtml();
    [CompilerGeneratedAttribute]
public void set_HideSurroundingHtml(bool value);
    [CompilerGeneratedAttribute]
public bool get_HtmlEncode();
    [CompilerGeneratedAttribute]
public void set_HtmlEncode(bool value);
    [CompilerGeneratedAttribute]
public bool get_IsEnum();
    [CompilerGeneratedAttribute]
public void set_IsEnum(bool value);
    [CompilerGeneratedAttribute]
public bool get_IsFlagsEnum();
    [CompilerGeneratedAttribute]
public void set_IsFlagsEnum(bool value);
    public string get_NullDisplayText();
    public void set_NullDisplayText(string value);
    public Func`1<string> get_NullDisplayTextProvider();
    public void set_NullDisplayTextProvider(Func`1<string> value);
    [CompilerGeneratedAttribute]
public int get_Order();
    [CompilerGeneratedAttribute]
public void set_Order(int value);
    [CompilerGeneratedAttribute]
public Func`1<string> get_Placeholder();
    [CompilerGeneratedAttribute]
public void set_Placeholder(Func`1<string> value);
    [CompilerGeneratedAttribute]
public bool get_ShowForDisplay();
    [CompilerGeneratedAttribute]
public void set_ShowForDisplay(bool value);
    [CompilerGeneratedAttribute]
public bool get_ShowForEdit();
    [CompilerGeneratedAttribute]
public void set_ShowForEdit(bool value);
    [CompilerGeneratedAttribute]
public string get_SimpleDisplayProperty();
    [CompilerGeneratedAttribute]
public void set_SimpleDisplayProperty(string value);
    [CompilerGeneratedAttribute]
public string get_TemplateHint();
    [CompilerGeneratedAttribute]
public void set_TemplateHint(string value);
}
public class Microsoft.AspNetCore.Mvc.ModelBinding.Metadata.DisplayMetadataProviderContext : object {
    [CompilerGeneratedAttribute]
private IReadOnlyList`1<object> <Attributes>k__BackingField;
    [CompilerGeneratedAttribute]
private DisplayMetadata <DisplayMetadata>k__BackingField;
    [CompilerGeneratedAttribute]
private ModelMetadataIdentity <Key>k__BackingField;
    [CompilerGeneratedAttribute]
private IReadOnlyList`1<object> <PropertyAttributes>k__BackingField;
    [CompilerGeneratedAttribute]
private IReadOnlyList`1<object> <TypeAttributes>k__BackingField;
    public IReadOnlyList`1<object> Attributes { get; }
    public DisplayMetadata DisplayMetadata { get; }
    public ModelMetadataIdentity Key { get; }
    public IReadOnlyList`1<object> PropertyAttributes { get; }
    public IReadOnlyList`1<object> TypeAttributes { get; }
    public DisplayMetadataProviderContext(ModelMetadataIdentity key, ModelAttributes attributes);
    [CompilerGeneratedAttribute]
public IReadOnlyList`1<object> get_Attributes();
    [CompilerGeneratedAttribute]
public DisplayMetadata get_DisplayMetadata();
    [CompilerGeneratedAttribute]
public ModelMetadataIdentity get_Key();
    [CompilerGeneratedAttribute]
public IReadOnlyList`1<object> get_PropertyAttributes();
    [CompilerGeneratedAttribute]
public IReadOnlyList`1<object> get_TypeAttributes();
}
public class Microsoft.AspNetCore.Mvc.ModelBinding.Metadata.ExcludeBindingMetadataProvider : object {
    private Type _type;
    public ExcludeBindingMetadataProvider(Type type);
    public sealed virtual void CreateBindingMetadata(BindingMetadataProviderContext context);
}
public interface Microsoft.AspNetCore.Mvc.ModelBinding.Metadata.IBindingMetadataProvider {
    public abstract virtual void CreateBindingMetadata(BindingMetadataProviderContext context);
}
public interface Microsoft.AspNetCore.Mvc.ModelBinding.Metadata.ICompositeMetadataDetailsProvider {
}
public interface Microsoft.AspNetCore.Mvc.ModelBinding.Metadata.IDisplayMetadataProvider {
    public abstract virtual void CreateDisplayMetadata(DisplayMetadataProviderContext context);
}
public interface Microsoft.AspNetCore.Mvc.ModelBinding.Metadata.IMetadataDetailsProvider {
}
public interface Microsoft.AspNetCore.Mvc.ModelBinding.Metadata.IValidationMetadataProvider {
    public abstract virtual void CreateValidationMetadata(ValidationMetadataProviderContext context);
}
[ExtensionAttribute]
public static class Microsoft.AspNetCore.Mvc.ModelBinding.Metadata.MetadataDetailsProviderExtensions : object {
    [ExtensionAttribute]
public static void RemoveType(IList`1<IMetadataDetailsProvider> list);
    [ExtensionAttribute]
public static void RemoveType(IList`1<IMetadataDetailsProvider> list, Type type);
}
public class Microsoft.AspNetCore.Mvc.ModelBinding.Metadata.ValidationMetadata : object {
    [CompilerGeneratedAttribute]
private Nullable`1<bool> <IsRequired>k__BackingField;
    [CompilerGeneratedAttribute]
private IPropertyValidationFilter <PropertyValidationFilter>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<bool> <ValidateChildren>k__BackingField;
    [CompilerGeneratedAttribute]
private IList`1<object> <ValidatorMetadata>k__BackingField;
    public Nullable`1<bool> IsRequired { get; public set; }
    public IPropertyValidationFilter PropertyValidationFilter { get; public set; }
    public Nullable`1<bool> ValidateChildren { get; public set; }
    public IList`1<object> ValidatorMetadata { get; }
    [CompilerGeneratedAttribute]
public Nullable`1<bool> get_IsRequired();
    [CompilerGeneratedAttribute]
public void set_IsRequired(Nullable`1<bool> value);
    [CompilerGeneratedAttribute]
public IPropertyValidationFilter get_PropertyValidationFilter();
    [CompilerGeneratedAttribute]
public void set_PropertyValidationFilter(IPropertyValidationFilter value);
    [CompilerGeneratedAttribute]
public Nullable`1<bool> get_ValidateChildren();
    [CompilerGeneratedAttribute]
public void set_ValidateChildren(Nullable`1<bool> value);
    [CompilerGeneratedAttribute]
public IList`1<object> get_ValidatorMetadata();
}
public class Microsoft.AspNetCore.Mvc.ModelBinding.Metadata.ValidationMetadataProviderContext : object {
    [CompilerGeneratedAttribute]
private IReadOnlyList`1<object> <Attributes>k__BackingField;
    [CompilerGeneratedAttribute]
private ModelMetadataIdentity <Key>k__BackingField;
    [CompilerGeneratedAttribute]
private IReadOnlyList`1<object> <PropertyAttributes>k__BackingField;
    [CompilerGeneratedAttribute]
private IReadOnlyList`1<object> <TypeAttributes>k__BackingField;
    [CompilerGeneratedAttribute]
private ValidationMetadata <ValidationMetadata>k__BackingField;
    public IReadOnlyList`1<object> Attributes { get; }
    public ModelMetadataIdentity Key { get; }
    public IReadOnlyList`1<object> PropertyAttributes { get; }
    public IReadOnlyList`1<object> TypeAttributes { get; }
    public ValidationMetadata ValidationMetadata { get; }
    public ValidationMetadataProviderContext(ModelMetadataIdentity key, ModelAttributes attributes);
    [CompilerGeneratedAttribute]
public IReadOnlyList`1<object> get_Attributes();
    [CompilerGeneratedAttribute]
public ModelMetadataIdentity get_Key();
    [CompilerGeneratedAttribute]
public IReadOnlyList`1<object> get_PropertyAttributes();
    [CompilerGeneratedAttribute]
public IReadOnlyList`1<object> get_TypeAttributes();
    [CompilerGeneratedAttribute]
public ValidationMetadata get_ValidationMetadata();
}
public class Microsoft.AspNetCore.Mvc.ModelBinding.ModelAttributes : object {
    private static IEnumerable`1<object> _emptyAttributesCollection;
    [CompilerGeneratedAttribute]
private IReadOnlyList`1<object> <Attributes>k__BackingField;
    [CompilerGeneratedAttribute]
private IReadOnlyList`1<object> <PropertyAttributes>k__BackingField;
    [CompilerGeneratedAttribute]
private IReadOnlyList`1<object> <ParameterAttributes>k__BackingField;
    [CompilerGeneratedAttribute]
private IReadOnlyList`1<object> <TypeAttributes>k__BackingField;
    public IReadOnlyList`1<object> Attributes { get; }
    public IReadOnlyList`1<object> PropertyAttributes { get; }
    public IReadOnlyList`1<object> ParameterAttributes { get; }
    public IReadOnlyList`1<object> TypeAttributes { get; }
    [ObsoleteAttribute("This constructor is obsolete and will be removed in a future version. The recommended alternative is ModelAttributes.GetAttributesForType.")]
public ModelAttributes(IEnumerable`1<object> typeAttributes);
    [ObsoleteAttribute("This constructor is obsolete and will be removed in a future version. The recommended alternative is ModelAttributes.GetAttributesForProperty.")]
public ModelAttributes(IEnumerable`1<object> propertyAttributes, IEnumerable`1<object> typeAttributes);
    internal ModelAttributes(IEnumerable`1<object> typeAttributes, IEnumerable`1<object> propertyAttributes, IEnumerable`1<object> parameterAttributes);
    private static ModelAttributes();
    [CompilerGeneratedAttribute]
public IReadOnlyList`1<object> get_Attributes();
    [CompilerGeneratedAttribute]
public IReadOnlyList`1<object> get_PropertyAttributes();
    [CompilerGeneratedAttribute]
public IReadOnlyList`1<object> get_ParameterAttributes();
    [CompilerGeneratedAttribute]
public IReadOnlyList`1<object> get_TypeAttributes();
    public static ModelAttributes GetAttributesForProperty(Type type, PropertyInfo property);
    internal static ModelAttributes GetAttributesForProperty(Type containerType, PropertyInfo property, Type modelType);
    public static ModelAttributes GetAttributesForType(Type type);
    public static ModelAttributes GetAttributesForParameter(ParameterInfo parameterInfo);
    internal static ModelAttributes GetAttributesForParameter(ParameterInfo parameterInfo, Type modelType);
    private static Type GetMetadataType(Type type);
}
public class Microsoft.AspNetCore.Mvc.ModelBinding.ModelBinderFactory : object {
    private IModelMetadataProvider _metadataProvider;
    private IModelBinderProvider[] _providers;
    private ConcurrentDictionary`2<Key, IModelBinder> _cache;
    private IServiceProvider _serviceProvider;
    [ObsoleteAttribute("This constructor is obsolete and will be removed in a future version. The recommended alternative is the overload that also takes an IServiceProvider.")]
public ModelBinderFactory(IModelMetadataProvider metadataProvider, IOptions`1<MvcOptions> options);
    public ModelBinderFactory(IModelMetadataProvider metadataProvider, IOptions`1<MvcOptions> options, IServiceProvider serviceProvider);
    public sealed virtual IModelBinder CreateBinder(ModelBinderFactoryContext context);
    private IModelBinder CreateBinderCoreCached(DefaultModelBinderProviderContext providerContext, object token);
    private IModelBinder CreateBinderCoreUncached(DefaultModelBinderProviderContext providerContext, object token);
    private void AddToCache(ModelMetadata metadata, object cacheToken, IModelBinder binder);
    private bool TryGetCachedBinder(ModelMetadata metadata, object cacheToken, IModelBinder& binder);
    private static IServiceProvider GetDefaultServices();
}
public class Microsoft.AspNetCore.Mvc.ModelBinding.ModelBinderFactoryContext : object {
    [CompilerGeneratedAttribute]
private BindingInfo <BindingInfo>k__BackingField;
    [CompilerGeneratedAttribute]
private ModelMetadata <Metadata>k__BackingField;
    [CompilerGeneratedAttribute]
private object <CacheToken>k__BackingField;
    public BindingInfo BindingInfo { get; public set; }
    public ModelMetadata Metadata { get; public set; }
    public object CacheToken { get; public set; }
    [CompilerGeneratedAttribute]
public BindingInfo get_BindingInfo();
    [CompilerGeneratedAttribute]
public void set_BindingInfo(BindingInfo value);
    [CompilerGeneratedAttribute]
public ModelMetadata get_Metadata();
    [CompilerGeneratedAttribute]
public void set_Metadata(ModelMetadata value);
    [CompilerGeneratedAttribute]
public object get_CacheToken();
    [CompilerGeneratedAttribute]
public void set_CacheToken(object value);
}
[ExtensionAttribute]
public static class Microsoft.AspNetCore.Mvc.ModelBinding.ModelBinderProviderExtensions : object {
    [ExtensionAttribute]
public static void RemoveType(IList`1<IModelBinderProvider> list);
    [ExtensionAttribute]
public static void RemoveType(IList`1<IModelBinderProvider> list, Type type);
}
[ExtensionAttribute]
public static class Microsoft.AspNetCore.Mvc.ModelBinding.ModelMetadataProviderExtensions : object {
    [ExtensionAttribute]
public static ModelMetadata GetMetadataForProperty(IModelMetadataProvider provider, Type containerType, string propertyName);
}
public static class Microsoft.AspNetCore.Mvc.ModelBinding.ModelNames : object {
    public static string CreateIndexModelName(string parentName, int index);
    public static string CreateIndexModelName(string parentName, string index);
    public static string CreatePropertyModelName(string prefix, string propertyName);
}
public abstract class Microsoft.AspNetCore.Mvc.ModelBinding.ObjectModelValidator : object {
    private IModelMetadataProvider _modelMetadataProvider;
    private ValidatorCache _validatorCache;
    private CompositeModelValidatorProvider _validatorProvider;
    public ObjectModelValidator(IModelMetadataProvider modelMetadataProvider, IList`1<IModelValidatorProvider> validatorProviders);
    public virtual void Validate(ActionContext actionContext, ValidationStateDictionary validationState, string prefix, object model);
    public virtual void Validate(ActionContext actionContext, ValidationStateDictionary validationState, string prefix, object model, ModelMetadata metadata);
    public abstract virtual ValidationVisitor GetValidationVisitor(ActionContext actionContext, IModelValidatorProvider validatorProvider, ValidatorCache validatorCache, IModelMetadataProvider metadataProvider, ValidationStateDictionary validationState);
}
public class Microsoft.AspNetCore.Mvc.ModelBinding.ParameterBinder : object {
    private IModelMetadataProvider _modelMetadataProvider;
    private IModelBinderFactory _modelBinderFactory;
    private MvcOptions _mvcOptions;
    private IObjectModelValidator _objectModelValidator;
    [CompilerGeneratedAttribute]
private ILogger <Logger>k__BackingField;
    protected ILogger Logger { get; }
    [ObsoleteAttribute("This constructor is obsolete and will be removed in a future version. The recommended alternative is the overload that also takes a MvcOptions accessor and an ILoggerFactory .")]
public ParameterBinder(IModelMetadataProvider modelMetadataProvider, IModelBinderFactory modelBinderFactory, IObjectModelValidator validator);
    public ParameterBinder(IModelMetadataProvider modelMetadataProvider, IModelBinderFactory modelBinderFactory, IObjectModelValidator validator, IOptions`1<MvcOptions> mvcOptions, ILoggerFactory loggerFactory);
    [CompilerGeneratedAttribute]
protected ILogger get_Logger();
    public Task`1<ModelBindingResult> BindModelAsync(ActionContext actionContext, IValueProvider valueProvider, ParameterDescriptor parameter);
    public virtual Task`1<ModelBindingResult> BindModelAsync(ActionContext actionContext, IValueProvider valueProvider, ParameterDescriptor parameter, object value);
    [AsyncStateMachineAttribute("Microsoft.AspNetCore.Mvc.ModelBinding.ParameterBinder/<BindModelAsync>d__11")]
public virtual Task`1<ModelBindingResult> BindModelAsync(ActionContext actionContext, IModelBinder modelBinder, IValueProvider valueProvider, ParameterDescriptor parameter, ModelMetadata metadata, object value);
    private void EnforceBindRequiredAndValidate(ObjectModelValidator baseObjectValidator, ActionContext actionContext, ParameterDescriptor parameter, ModelMetadata metadata, ModelBindingContext modelBindingContext, ModelBindingResult modelBindingResult);
    private void RecalculateModelMetadata(ParameterDescriptor parameter, ModelBindingResult modelBindingResult, ModelMetadata& metadata);
}
public class Microsoft.AspNetCore.Mvc.ModelBinding.QueryStringValueProvider : BindingSourceValueProvider {
    private CultureInfo _culture;
    private IQueryCollection _values;
    private PrefixContainer _prefixContainer;
    public CultureInfo Culture { get; }
    protected PrefixContainer PrefixContainer { get; }
    public QueryStringValueProvider(BindingSource bindingSource, IQueryCollection values, CultureInfo culture);
    public CultureInfo get_Culture();
    protected PrefixContainer get_PrefixContainer();
    public virtual bool ContainsPrefix(string prefix);
    public virtual IDictionary`2<string, string> GetKeysFromPrefix(string prefix);
    public virtual ValueProviderResult GetValue(string key);
}
public class Microsoft.AspNetCore.Mvc.ModelBinding.QueryStringValueProviderFactory : object {
    public sealed virtual Task CreateValueProviderAsync(ValueProviderFactoryContext context);
}
public class Microsoft.AspNetCore.Mvc.ModelBinding.RouteValueProvider : BindingSourceValueProvider {
    private RouteValueDictionary _values;
    private PrefixContainer _prefixContainer;
    [CompilerGeneratedAttribute]
private CultureInfo <Culture>k__BackingField;
    protected PrefixContainer PrefixContainer { get; }
    protected CultureInfo Culture { get; }
    public RouteValueProvider(BindingSource bindingSource, RouteValueDictionary values);
    public RouteValueProvider(BindingSource bindingSource, RouteValueDictionary values, CultureInfo culture);
    protected PrefixContainer get_PrefixContainer();
    [CompilerGeneratedAttribute]
protected CultureInfo get_Culture();
    public virtual bool ContainsPrefix(string key);
    public virtual ValueProviderResult GetValue(string key);
}
public class Microsoft.AspNetCore.Mvc.ModelBinding.RouteValueProviderFactory : object {
    public sealed virtual Task CreateValueProviderAsync(ValueProviderFactoryContext context);
}
public class Microsoft.AspNetCore.Mvc.ModelBinding.SuppressChildValidationMetadataProvider : object {
    [CompilerGeneratedAttribute]
private Type <Type>k__BackingField;
    [CompilerGeneratedAttribute]
private string <FullTypeName>k__BackingField;
    public Type Type { get; }
    public string FullTypeName { get; }
    public SuppressChildValidationMetadataProvider(Type type);
    public SuppressChildValidationMetadataProvider(string fullTypeName);
    [CompilerGeneratedAttribute]
public Type get_Type();
    [CompilerGeneratedAttribute]
public string get_FullTypeName();
    public sealed virtual void CreateValidationMetadata(ValidationMetadataProviderContext context);
    private bool IsMatchingName(Type type);
}
public class Microsoft.AspNetCore.Mvc.ModelBinding.UnsupportedContentTypeException : Exception {
    public UnsupportedContentTypeException(string message);
}
public class Microsoft.AspNetCore.Mvc.ModelBinding.UnsupportedContentTypeFilter : object {
    public sealed virtual void OnActionExecuting(ActionExecutingContext context);
    private bool HasUnsupportedContentTypeError(ActionExecutingContext context);
    public sealed virtual void OnActionExecuted(ActionExecutedContext context);
}
public class Microsoft.AspNetCore.Mvc.ModelBinding.Validation.CompositeClientModelValidatorProvider : object {
    [CompilerGeneratedAttribute]
private IReadOnlyList`1<IClientModelValidatorProvider> <ValidatorProviders>k__BackingField;
    public IReadOnlyList`1<IClientModelValidatorProvider> ValidatorProviders { get; }
    public CompositeClientModelValidatorProvider(IEnumerable`1<IClientModelValidatorProvider> providers);
    [CompilerGeneratedAttribute]
public IReadOnlyList`1<IClientModelValidatorProvider> get_ValidatorProviders();
    public sealed virtual void CreateValidators(ClientValidatorProviderContext context);
}
public class Microsoft.AspNetCore.Mvc.ModelBinding.Validation.CompositeModelValidatorProvider : object {
    [CompilerGeneratedAttribute]
private IList`1<IModelValidatorProvider> <ValidatorProviders>k__BackingField;
    public IList`1<IModelValidatorProvider> ValidatorProviders { get; }
    public CompositeModelValidatorProvider(IList`1<IModelValidatorProvider> providers);
    [CompilerGeneratedAttribute]
public IList`1<IModelValidatorProvider> get_ValidatorProviders();
    public sealed virtual void CreateValidators(ModelValidatorProviderContext context);
}
public interface Microsoft.AspNetCore.Mvc.ModelBinding.Validation.IObjectModelValidator {
    public abstract virtual void Validate(ActionContext actionContext, ValidationStateDictionary validationState, string prefix, object model);
}
[ExtensionAttribute]
public static class Microsoft.AspNetCore.Mvc.ModelBinding.Validation.ModelValidatorProviderExtensions : object {
    [ExtensionAttribute]
public static void RemoveType(IList`1<IModelValidatorProvider> list);
    [ExtensionAttribute]
public static void RemoveType(IList`1<IModelValidatorProvider> list, Type type);
}
[AttributeUsageAttribute("132")]
public class Microsoft.AspNetCore.Mvc.ModelBinding.Validation.ValidateNeverAttribute : Attribute {
    public sealed virtual bool ShouldValidateEntry(ValidationEntry entry, ValidationEntry parentEntry);
}
public class Microsoft.AspNetCore.Mvc.ModelBinding.Validation.ValidationVisitor : object {
    [CompilerGeneratedAttribute]
private IModelValidatorProvider <ValidatorProvider>k__BackingField;
    [CompilerGeneratedAttribute]
private IModelMetadataProvider <MetadataProvider>k__BackingField;
    [CompilerGeneratedAttribute]
private ValidatorCache <Cache>k__BackingField;
    [CompilerGeneratedAttribute]
private ActionContext <Context>k__BackingField;
    [CompilerGeneratedAttribute]
private ModelStateDictionary <ModelState>k__BackingField;
    [CompilerGeneratedAttribute]
private ValidationStateDictionary <ValidationState>k__BackingField;
    [CompilerGeneratedAttribute]
private ValidationStack <CurrentPath>k__BackingField;
    [CompilerGeneratedAttribute]
private object <Container>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Key>k__BackingField;
    [CompilerGeneratedAttribute]
private object <Model>k__BackingField;
    [CompilerGeneratedAttribute]
private ModelMetadata <Metadata>k__BackingField;
    [CompilerGeneratedAttribute]
private IValidationStrategy <Strategy>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <ValidateComplexTypesIfChildValidationFails>k__BackingField;
    protected IModelValidatorProvider ValidatorProvider { get; }
    protected IModelMetadataProvider MetadataProvider { get; }
    protected ValidatorCache Cache { get; }
    protected ActionContext Context { get; }
    protected ModelStateDictionary ModelState { get; }
    protected ValidationStateDictionary ValidationState { get; }
    protected ValidationStack CurrentPath { get; }
    protected object Container { get; protected set; }
    protected string Key { get; protected set; }
    protected object Model { get; protected set; }
    protected ModelMetadata Metadata { get; protected set; }
    protected IValidationStrategy Strategy { get; protected set; }
    public bool ValidateComplexTypesIfChildValidationFails { get; public set; }
    public ValidationVisitor(ActionContext actionContext, IModelValidatorProvider validatorProvider, ValidatorCache validatorCache, IModelMetadataProvider metadataProvider, ValidationStateDictionary validationState);
    [CompilerGeneratedAttribute]
protected IModelValidatorProvider get_ValidatorProvider();
    [CompilerGeneratedAttribute]
protected IModelMetadataProvider get_MetadataProvider();
    [CompilerGeneratedAttribute]
protected ValidatorCache get_Cache();
    [CompilerGeneratedAttribute]
protected ActionContext get_Context();
    [CompilerGeneratedAttribute]
protected ModelStateDictionary get_ModelState();
    [CompilerGeneratedAttribute]
protected ValidationStateDictionary get_ValidationState();
    [CompilerGeneratedAttribute]
protected ValidationStack get_CurrentPath();
    [CompilerGeneratedAttribute]
protected object get_Container();
    [CompilerGeneratedAttribute]
protected void set_Container(object value);
    [CompilerGeneratedAttribute]
protected string get_Key();
    [CompilerGeneratedAttribute]
protected void set_Key(string value);
    [CompilerGeneratedAttribute]
protected object get_Model();
    [CompilerGeneratedAttribute]
protected void set_Model(object value);
    [CompilerGeneratedAttribute]
protected ModelMetadata get_Metadata();
    [CompilerGeneratedAttribute]
protected void set_Metadata(ModelMetadata value);
    [CompilerGeneratedAttribute]
protected IValidationStrategy get_Strategy();
    [CompilerGeneratedAttribute]
protected void set_Strategy(IValidationStrategy value);
    [CompilerGeneratedAttribute]
public bool get_ValidateComplexTypesIfChildValidationFails();
    [CompilerGeneratedAttribute]
public void set_ValidateComplexTypesIfChildValidationFails(bool value);
    public bool Validate(ModelMetadata metadata, string key, object model);
    public virtual bool Validate(ModelMetadata metadata, string key, object model, bool alwaysValidateAtTopLevel);
    protected virtual bool ValidateNode();
    protected virtual bool Visit(ModelMetadata metadata, string key, object model);
    protected virtual bool VisitComplexType(IValidationStrategy defaultStrategy);
    protected virtual bool VisitSimpleType();
    protected virtual bool VisitChildren(IValidationStrategy strategy);
    protected virtual void SuppressValidation(string key);
    protected virtual ValidationStateEntry GetValidationEntry(object model);
}
[ExtensionAttribute]
public static class Microsoft.AspNetCore.Mvc.ModelBinding.ValueProviderFactoryExtensions : object {
    [ExtensionAttribute]
public static void RemoveType(IList`1<IValueProviderFactory> list);
    [ExtensionAttribute]
public static void RemoveType(IList`1<IValueProviderFactory> list, Type type);
}
[AttributeUsageAttribute("4")]
public class Microsoft.AspNetCore.Mvc.ModelMetadataTypeAttribute : Attribute {
    [CompilerGeneratedAttribute]
private Type <MetadataType>k__BackingField;
    public Type MetadataType { get; }
    public ModelMetadataTypeAttribute(Type type);
    [CompilerGeneratedAttribute]
public Type get_MetadataType();
}
public class Microsoft.AspNetCore.Mvc.MvcOptions : object {
    private int _maxModelStateErrors;
    private CompatibilitySwitch`1<bool> _allowBindingHeaderValuesToNonStringModelTypes;
    private CompatibilitySwitch`1<bool> _allowCombiningAuthorizeFilters;
    private CompatibilitySwitch`1<bool> _allowValidatingTopLevelNodes;
    private CompatibilitySwitch`1<InputFormatterExceptionPolicy> _inputFormatterExceptionPolicy;
    private CompatibilitySwitch`1<bool> _suppressBindingUndefinedValueToEnumType;
    private ICompatibilitySwitch[] _switches;
    [CompilerGeneratedAttribute]
private bool <AllowEmptyInputInBodyModelBinding>k__BackingField;
    [CompilerGeneratedAttribute]
private IDictionary`2<string, CacheProfile> <CacheProfiles>k__BackingField;
    [CompilerGeneratedAttribute]
private IList`1<IApplicationModelConvention> <Conventions>k__BackingField;
    [CompilerGeneratedAttribute]
private FilterCollection <Filters>k__BackingField;
    [CompilerGeneratedAttribute]
private FormatterMappings <FormatterMappings>k__BackingField;
    [CompilerGeneratedAttribute]
private FormatterCollection`1<IInputFormatter> <InputFormatters>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <SuppressInputFormatterBuffering>k__BackingField;
    [CompilerGeneratedAttribute]
private IList`1<IModelBinderProvider> <ModelBinderProviders>k__BackingField;
    [CompilerGeneratedAttribute]
private DefaultModelBindingMessageProvider <ModelBindingMessageProvider>k__BackingField;
    [CompilerGeneratedAttribute]
private IList`1<IMetadataDetailsProvider> <ModelMetadataDetailsProviders>k__BackingField;
    [CompilerGeneratedAttribute]
private IList`1<IModelValidatorProvider> <ModelValidatorProviders>k__BackingField;
    [CompilerGeneratedAttribute]
private FormatterCollection`1<IOutputFormatter> <OutputFormatters>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <RespectBrowserAcceptHeader>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <ReturnHttpNotAcceptable>k__BackingField;
    [CompilerGeneratedAttribute]
private IList`1<IValueProviderFactory> <ValueProviderFactories>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<int> <SslPort>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <RequireHttpsPermanent>k__BackingField;
    public bool AllowEmptyInputInBodyModelBinding { get; public set; }
    public bool AllowCombiningAuthorizeFilters { get; public set; }
    public bool AllowBindingHeaderValuesToNonStringModelTypes { get; public set; }
    public bool AllowValidatingTopLevelNodes { get; public set; }
    public IDictionary`2<string, CacheProfile> CacheProfiles { get; }
    public IList`1<IApplicationModelConvention> Conventions { get; }
    public FilterCollection Filters { get; }
    public FormatterMappings FormatterMappings { get; }
    public InputFormatterExceptionPolicy InputFormatterExceptionPolicy { get; public set; }
    public FormatterCollection`1<IInputFormatter> InputFormatters { get; }
    public bool SuppressBindingUndefinedValueToEnumType { get; public set; }
    public bool SuppressInputFormatterBuffering { get; public set; }
    public int MaxModelValidationErrors { get; public set; }
    public IList`1<IModelBinderProvider> ModelBinderProviders { get; }
    public DefaultModelBindingMessageProvider ModelBindingMessageProvider { get; }
    public IList`1<IMetadataDetailsProvider> ModelMetadataDetailsProviders { get; }
    public IList`1<IModelValidatorProvider> ModelValidatorProviders { get; }
    public FormatterCollection`1<IOutputFormatter> OutputFormatters { get; }
    public bool RespectBrowserAcceptHeader { get; public set; }
    public bool ReturnHttpNotAcceptable { get; public set; }
    public IList`1<IValueProviderFactory> ValueProviderFactories { get; }
    public Nullable`1<int> SslPort { get; public set; }
    public bool RequireHttpsPermanent { get; public set; }
    [CompilerGeneratedAttribute]
public bool get_AllowEmptyInputInBodyModelBinding();
    [CompilerGeneratedAttribute]
public void set_AllowEmptyInputInBodyModelBinding(bool value);
    public bool get_AllowCombiningAuthorizeFilters();
    public void set_AllowCombiningAuthorizeFilters(bool value);
    public bool get_AllowBindingHeaderValuesToNonStringModelTypes();
    public void set_AllowBindingHeaderValuesToNonStringModelTypes(bool value);
    public bool get_AllowValidatingTopLevelNodes();
    public void set_AllowValidatingTopLevelNodes(bool value);
    [CompilerGeneratedAttribute]
public IDictionary`2<string, CacheProfile> get_CacheProfiles();
    [CompilerGeneratedAttribute]
public IList`1<IApplicationModelConvention> get_Conventions();
    [CompilerGeneratedAttribute]
public FilterCollection get_Filters();
    [CompilerGeneratedAttribute]
public FormatterMappings get_FormatterMappings();
    public InputFormatterExceptionPolicy get_InputFormatterExceptionPolicy();
    public void set_InputFormatterExceptionPolicy(InputFormatterExceptionPolicy value);
    [CompilerGeneratedAttribute]
public FormatterCollection`1<IInputFormatter> get_InputFormatters();
    public bool get_SuppressBindingUndefinedValueToEnumType();
    public void set_SuppressBindingUndefinedValueToEnumType(bool value);
    [CompilerGeneratedAttribute]
public bool get_SuppressInputFormatterBuffering();
    [CompilerGeneratedAttribute]
public void set_SuppressInputFormatterBuffering(bool value);
    public int get_MaxModelValidationErrors();
    public void set_MaxModelValidationErrors(int value);
    [CompilerGeneratedAttribute]
public IList`1<IModelBinderProvider> get_ModelBinderProviders();
    [CompilerGeneratedAttribute]
public DefaultModelBindingMessageProvider get_ModelBindingMessageProvider();
    [CompilerGeneratedAttribute]
public IList`1<IMetadataDetailsProvider> get_ModelMetadataDetailsProviders();
    [CompilerGeneratedAttribute]
public IList`1<IModelValidatorProvider> get_ModelValidatorProviders();
    [CompilerGeneratedAttribute]
public FormatterCollection`1<IOutputFormatter> get_OutputFormatters();
    [CompilerGeneratedAttribute]
public bool get_RespectBrowserAcceptHeader();
    [CompilerGeneratedAttribute]
public void set_RespectBrowserAcceptHeader(bool value);
    [CompilerGeneratedAttribute]
public bool get_ReturnHttpNotAcceptable();
    [CompilerGeneratedAttribute]
public void set_ReturnHttpNotAcceptable(bool value);
    [CompilerGeneratedAttribute]
public IList`1<IValueProviderFactory> get_ValueProviderFactories();
    [CompilerGeneratedAttribute]
public Nullable`1<int> get_SslPort();
    [CompilerGeneratedAttribute]
public void set_SslPort(Nullable`1<int> value);
    [CompilerGeneratedAttribute]
public bool get_RequireHttpsPermanent();
    [CompilerGeneratedAttribute]
public void set_RequireHttpsPermanent(bool value);
    private sealed virtual override IEnumerator`1<ICompatibilitySwitch> System.Collections.Generic.IEnumerable<Microsoft.AspNetCore.Mvc.Infrastructure.ICompatibilitySwitch>.GetEnumerator();
    private sealed virtual override IEnumerator System.Collections.IEnumerable.GetEnumerator();
}
public class Microsoft.AspNetCore.Mvc.NoContentResult : StatusCodeResult {
}
[AttributeUsageAttribute("64")]
public class Microsoft.AspNetCore.Mvc.NonActionAttribute : Attribute {
}
[AttributeUsageAttribute("4")]
public class Microsoft.AspNetCore.Mvc.NonControllerAttribute : Attribute {
}
[AttributeUsageAttribute("4")]
public class Microsoft.AspNetCore.Mvc.NonViewComponentAttribute : Attribute {
}
public class Microsoft.AspNetCore.Mvc.NotFoundObjectResult : ObjectResult {
    public NotFoundObjectResult(object value);
}
public class Microsoft.AspNetCore.Mvc.NotFoundResult : StatusCodeResult {
}
public class Microsoft.AspNetCore.Mvc.ObjectResult : ActionResult {
    [CompilerGeneratedAttribute]
private object <Value>k__BackingField;
    [CompilerGeneratedAttribute]
private FormatterCollection`1<IOutputFormatter> <Formatters>k__BackingField;
    [CompilerGeneratedAttribute]
private MediaTypeCollection <ContentTypes>k__BackingField;
    [CompilerGeneratedAttribute]
private Type <DeclaredType>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<int> <StatusCode>k__BackingField;
    public object Value { get; public set; }
    public FormatterCollection`1<IOutputFormatter> Formatters { get; public set; }
    public MediaTypeCollection ContentTypes { get; public set; }
    public Type DeclaredType { get; public set; }
    public Nullable`1<int> StatusCode { get; public set; }
    public ObjectResult(object value);
    [CompilerGeneratedAttribute]
public object get_Value();
    [CompilerGeneratedAttribute]
public void set_Value(object value);
    [CompilerGeneratedAttribute]
public FormatterCollection`1<IOutputFormatter> get_Formatters();
    [CompilerGeneratedAttribute]
public void set_Formatters(FormatterCollection`1<IOutputFormatter> value);
    [CompilerGeneratedAttribute]
public MediaTypeCollection get_ContentTypes();
    [CompilerGeneratedAttribute]
public void set_ContentTypes(MediaTypeCollection value);
    [CompilerGeneratedAttribute]
public Type get_DeclaredType();
    [CompilerGeneratedAttribute]
public void set_DeclaredType(Type value);
    [CompilerGeneratedAttribute]
public Nullable`1<int> get_StatusCode();
    [CompilerGeneratedAttribute]
public void set_StatusCode(Nullable`1<int> value);
    public virtual Task ExecuteResultAsync(ActionContext context);
    public virtual void OnFormatting(ActionContext context);
}
public class Microsoft.AspNetCore.Mvc.OkObjectResult : ObjectResult {
    public OkObjectResult(object value);
}
public class Microsoft.AspNetCore.Mvc.OkResult : StatusCodeResult {
}
public class Microsoft.AspNetCore.Mvc.PhysicalFileResult : FileResult {
    private string _fileName;
    public string FileName { get; public set; }
    public PhysicalFileResult(string fileName, string contentType);
    public PhysicalFileResult(string fileName, MediaTypeHeaderValue contentType);
    public string get_FileName();
    public void set_FileName(string value);
    public virtual Task ExecuteResultAsync(ActionContext context);
}
public class Microsoft.AspNetCore.Mvc.ProblemDetails : object {
    [CompilerGeneratedAttribute]
private string <Type>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Title>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<int> <Status>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Detail>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Instance>k__BackingField;
    public string Type { get; public set; }
    public string Title { get; public set; }
    public Nullable`1<int> Status { get; public set; }
    public string Detail { get; public set; }
    public string Instance { get; public set; }
    [CompilerGeneratedAttribute]
public string get_Type();
    [CompilerGeneratedAttribute]
public void set_Type(string value);
    [CompilerGeneratedAttribute]
public string get_Title();
    [CompilerGeneratedAttribute]
public void set_Title(string value);
    [CompilerGeneratedAttribute]
public Nullable`1<int> get_Status();
    [CompilerGeneratedAttribute]
public void set_Status(Nullable`1<int> value);
    [CompilerGeneratedAttribute]
public string get_Detail();
    [CompilerGeneratedAttribute]
public void set_Detail(string value);
    [CompilerGeneratedAttribute]
public string get_Instance();
    [CompilerGeneratedAttribute]
public void set_Instance(string value);
}
[AttributeUsageAttribute("68")]
public class Microsoft.AspNetCore.Mvc.ProducesAttribute : Attribute {
    [CompilerGeneratedAttribute]
private Type <Type>k__BackingField;
    [CompilerGeneratedAttribute]
private MediaTypeCollection <ContentTypes>k__BackingField;
    [CompilerGeneratedAttribute]
private int <Order>k__BackingField;
    public Type Type { get; public set; }
    public MediaTypeCollection ContentTypes { get; public set; }
    public int StatusCode { get; }
    public int Order { get; public set; }
    public ProducesAttribute(Type type);
    public ProducesAttribute(string contentType, String[] additionalContentTypes);
    [CompilerGeneratedAttribute]
public sealed virtual Type get_Type();
    [CompilerGeneratedAttribute]
public void set_Type(Type value);
    [CompilerGeneratedAttribute]
public MediaTypeCollection get_ContentTypes();
    [CompilerGeneratedAttribute]
public void set_ContentTypes(MediaTypeCollection value);
    public sealed virtual int get_StatusCode();
    [CompilerGeneratedAttribute]
public sealed virtual int get_Order();
    [CompilerGeneratedAttribute]
public void set_Order(int value);
    public virtual void OnResultExecuting(ResultExecutingContext context);
    public virtual void OnResultExecuted(ResultExecutedContext context);
    public sealed virtual void SetContentTypes(MediaTypeCollection contentTypes);
    private MediaTypeCollection GetContentTypes(string firstArg, String[] args);
}
[AttributeUsageAttribute("68")]
public class Microsoft.AspNetCore.Mvc.ProducesResponseTypeAttribute : Attribute {
    [CompilerGeneratedAttribute]
private Type <Type>k__BackingField;
    [CompilerGeneratedAttribute]
private int <StatusCode>k__BackingField;
    public Type Type { get; public set; }
    public int StatusCode { get; public set; }
    public ProducesResponseTypeAttribute(int statusCode);
    public ProducesResponseTypeAttribute(Type type, int statusCode);
    [CompilerGeneratedAttribute]
public sealed virtual Type get_Type();
    [CompilerGeneratedAttribute]
public void set_Type(Type value);
    [CompilerGeneratedAttribute]
public sealed virtual int get_StatusCode();
    [CompilerGeneratedAttribute]
public void set_StatusCode(int value);
    private sealed virtual override void Microsoft.AspNetCore.Mvc.ApiExplorer.IApiResponseMetadataProvider.SetContentTypes(MediaTypeCollection contentTypes);
}
public class Microsoft.AspNetCore.Mvc.RedirectResult : ActionResult {
    private string _url;
    [CompilerGeneratedAttribute]
private bool <Permanent>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <PreserveMethod>k__BackingField;
    [CompilerGeneratedAttribute]
private IUrlHelper <UrlHelper>k__BackingField;
    public bool Permanent { get; public set; }
    public bool PreserveMethod { get; public set; }
    public string Url { get; public set; }
    public IUrlHelper UrlHelper { get; public set; }
    public RedirectResult(string url);
    public RedirectResult(string url, bool permanent);
    public RedirectResult(string url, bool permanent, bool preserveMethod);
    [CompilerGeneratedAttribute]
public bool get_Permanent();
    [CompilerGeneratedAttribute]
public void set_Permanent(bool value);
    [CompilerGeneratedAttribute]
public bool get_PreserveMethod();
    [CompilerGeneratedAttribute]
public void set_PreserveMethod(bool value);
    public string get_Url();
    public void set_Url(string value);
    [CompilerGeneratedAttribute]
public IUrlHelper get_UrlHelper();
    [CompilerGeneratedAttribute]
public void set_UrlHelper(IUrlHelper value);
    public virtual Task ExecuteResultAsync(ActionContext context);
    [ObsoleteAttribute("This implementation will be removed in a future release, use ExecuteResultAsync.")]
public virtual void ExecuteResult(ActionContext context);
}
public class Microsoft.AspNetCore.Mvc.RedirectToActionResult : ActionResult {
    [CompilerGeneratedAttribute]
private IUrlHelper <UrlHelper>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ActionName>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ControllerName>k__BackingField;
    [CompilerGeneratedAttribute]
private RouteValueDictionary <RouteValues>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <Permanent>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <PreserveMethod>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Fragment>k__BackingField;
    public IUrlHelper UrlHelper { get; public set; }
    public string ActionName { get; public set; }
    public string ControllerName { get; public set; }
    public RouteValueDictionary RouteValues { get; public set; }
    public bool Permanent { get; public set; }
    public bool PreserveMethod { get; public set; }
    public string Fragment { get; public set; }
    public RedirectToActionResult(string actionName, string controllerName, object routeValues);
    public RedirectToActionResult(string actionName, string controllerName, object routeValues, string fragment);
    public RedirectToActionResult(string actionName, string controllerName, object routeValues, bool permanent);
    public RedirectToActionResult(string actionName, string controllerName, object routeValues, bool permanent, bool preserveMethod);
    public RedirectToActionResult(string actionName, string controllerName, object routeValues, bool permanent, string fragment);
    public RedirectToActionResult(string actionName, string controllerName, object routeValues, bool permanent, bool preserveMethod, string fragment);
    [CompilerGeneratedAttribute]
public IUrlHelper get_UrlHelper();
    [CompilerGeneratedAttribute]
public void set_UrlHelper(IUrlHelper value);
    [CompilerGeneratedAttribute]
public string get_ActionName();
    [CompilerGeneratedAttribute]
public void set_ActionName(string value);
    [CompilerGeneratedAttribute]
public string get_ControllerName();
    [CompilerGeneratedAttribute]
public void set_ControllerName(string value);
    [CompilerGeneratedAttribute]
public RouteValueDictionary get_RouteValues();
    [CompilerGeneratedAttribute]
public void set_RouteValues(RouteValueDictionary value);
    [CompilerGeneratedAttribute]
public bool get_Permanent();
    [CompilerGeneratedAttribute]
public void set_Permanent(bool value);
    [CompilerGeneratedAttribute]
public bool get_PreserveMethod();
    [CompilerGeneratedAttribute]
public void set_PreserveMethod(bool value);
    [CompilerGeneratedAttribute]
public string get_Fragment();
    [CompilerGeneratedAttribute]
public void set_Fragment(string value);
    public virtual Task ExecuteResultAsync(ActionContext context);
    [ObsoleteAttribute("This implementation will be removed in a future release, use ExecuteResultAsync.")]
public virtual void ExecuteResult(ActionContext context);
}
public class Microsoft.AspNetCore.Mvc.RedirectToPageResult : ActionResult {
    [CompilerGeneratedAttribute]
private IUrlHelper <UrlHelper>k__BackingField;
    [CompilerGeneratedAttribute]
private string <PageName>k__BackingField;
    [CompilerGeneratedAttribute]
private string <PageHandler>k__BackingField;
    [CompilerGeneratedAttribute]
private RouteValueDictionary <RouteValues>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <Permanent>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <PreserveMethod>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Fragment>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Protocol>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Host>k__BackingField;
    public IUrlHelper UrlHelper { get; public set; }
    public string PageName { get; public set; }
    public string PageHandler { get; public set; }
    public RouteValueDictionary RouteValues { get; public set; }
    public bool Permanent { get; public set; }
    public bool PreserveMethod { get; public set; }
    public string Fragment { get; public set; }
    public string Protocol { get; public set; }
    public string Host { get; public set; }
    public RedirectToPageResult(string pageName);
    public RedirectToPageResult(string pageName, string pageHandler);
    public RedirectToPageResult(string pageName, object routeValues);
    public RedirectToPageResult(string pageName, string pageHandler, object routeValues);
    public RedirectToPageResult(string pageName, string pageHandler, object routeValues, bool permanent);
    public RedirectToPageResult(string pageName, string pageHandler, object routeValues, bool permanent, bool preserveMethod);
    public RedirectToPageResult(string pageName, string pageHandler, object routeValues, string fragment);
    public RedirectToPageResult(string pageName, string pageHandler, object routeValues, bool permanent, string fragment);
    public RedirectToPageResult(string pageName, string pageHandler, object routeValues, bool permanent, bool preserveMethod, string fragment);
    [CompilerGeneratedAttribute]
public IUrlHelper get_UrlHelper();
    [CompilerGeneratedAttribute]
public void set_UrlHelper(IUrlHelper value);
    [CompilerGeneratedAttribute]
public string get_PageName();
    [CompilerGeneratedAttribute]
public void set_PageName(string value);
    [CompilerGeneratedAttribute]
public string get_PageHandler();
    [CompilerGeneratedAttribute]
public void set_PageHandler(string value);
    [CompilerGeneratedAttribute]
public RouteValueDictionary get_RouteValues();
    [CompilerGeneratedAttribute]
public void set_RouteValues(RouteValueDictionary value);
    [CompilerGeneratedAttribute]
public bool get_Permanent();
    [CompilerGeneratedAttribute]
public void set_Permanent(bool value);
    [CompilerGeneratedAttribute]
public bool get_PreserveMethod();
    [CompilerGeneratedAttribute]
public void set_PreserveMethod(bool value);
    [CompilerGeneratedAttribute]
public string get_Fragment();
    [CompilerGeneratedAttribute]
public void set_Fragment(string value);
    [CompilerGeneratedAttribute]
public string get_Protocol();
    [CompilerGeneratedAttribute]
public void set_Protocol(string value);
    [CompilerGeneratedAttribute]
public string get_Host();
    [CompilerGeneratedAttribute]
public void set_Host(string value);
    public virtual Task ExecuteResultAsync(ActionContext context);
    [ObsoleteAttribute("This implementation will be removed in a future release, use ExecuteResultAsync.")]
public virtual void ExecuteResult(ActionContext context);
}
public class Microsoft.AspNetCore.Mvc.RedirectToRouteResult : ActionResult {
    [CompilerGeneratedAttribute]
private IUrlHelper <UrlHelper>k__BackingField;
    [CompilerGeneratedAttribute]
private string <RouteName>k__BackingField;
    [CompilerGeneratedAttribute]
private RouteValueDictionary <RouteValues>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <Permanent>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <PreserveMethod>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Fragment>k__BackingField;
    public IUrlHelper UrlHelper { get; public set; }
    public string RouteName { get; public set; }
    public RouteValueDictionary RouteValues { get; public set; }
    public bool Permanent { get; public set; }
    public bool PreserveMethod { get; public set; }
    public string Fragment { get; public set; }
    public RedirectToRouteResult(object routeValues);
    public RedirectToRouteResult(string routeName, object routeValues);
    public RedirectToRouteResult(string routeName, object routeValues, bool permanent);
    public RedirectToRouteResult(string routeName, object routeValues, bool permanent, bool preserveMethod);
    public RedirectToRouteResult(string routeName, object routeValues, string fragment);
    public RedirectToRouteResult(string routeName, object routeValues, bool permanent, string fragment);
    public RedirectToRouteResult(string routeName, object routeValues, bool permanent, bool preserveMethod, string fragment);
    [CompilerGeneratedAttribute]
public IUrlHelper get_UrlHelper();
    [CompilerGeneratedAttribute]
public void set_UrlHelper(IUrlHelper value);
    [CompilerGeneratedAttribute]
public string get_RouteName();
    [CompilerGeneratedAttribute]
public void set_RouteName(string value);
    [CompilerGeneratedAttribute]
public RouteValueDictionary get_RouteValues();
    [CompilerGeneratedAttribute]
public void set_RouteValues(RouteValueDictionary value);
    [CompilerGeneratedAttribute]
public bool get_Permanent();
    [CompilerGeneratedAttribute]
public void set_Permanent(bool value);
    [CompilerGeneratedAttribute]
public bool get_PreserveMethod();
    [CompilerGeneratedAttribute]
public void set_PreserveMethod(bool value);
    [CompilerGeneratedAttribute]
public string get_Fragment();
    [CompilerGeneratedAttribute]
public void set_Fragment(string value);
    public virtual Task ExecuteResultAsync(ActionContext context);
    [ObsoleteAttribute("This implementation will be removed in a future release, use ExecuteResultAsync.")]
public virtual void ExecuteResult(ActionContext context);
}
[AttributeUsageAttribute("68")]
public class Microsoft.AspNetCore.Mvc.RequestFormLimitsAttribute : Attribute {
    [CompilerGeneratedAttribute]
private int <Order>k__BackingField;
    [CompilerGeneratedAttribute]
private FormOptions <FormOptions>k__BackingField;
    public int Order { get; public set; }
    public bool IsReusable { get; }
    internal FormOptions FormOptions { get; }
    public bool BufferBody { get; public set; }
    public int MemoryBufferThreshold { get; public set; }
    public long BufferBodyLengthLimit { get; public set; }
    public int ValueCountLimit { get; public set; }
    public int KeyLengthLimit { get; public set; }
    public int ValueLengthLimit { get; public set; }
    public int MultipartBoundaryLengthLimit { get; public set; }
    public int MultipartHeadersCountLimit { get; public set; }
    public int MultipartHeadersLengthLimit { get; public set; }
    public long MultipartBodyLengthLimit { get; public set; }
    [CompilerGeneratedAttribute]
public sealed virtual int get_Order();
    [CompilerGeneratedAttribute]
public void set_Order(int value);
    public sealed virtual bool get_IsReusable();
    [CompilerGeneratedAttribute]
internal FormOptions get_FormOptions();
    public bool get_BufferBody();
    public void set_BufferBody(bool value);
    public int get_MemoryBufferThreshold();
    public void set_MemoryBufferThreshold(int value);
    public long get_BufferBodyLengthLimit();
    public void set_BufferBodyLengthLimit(long value);
    public int get_ValueCountLimit();
    public void set_ValueCountLimit(int value);
    public int get_KeyLengthLimit();
    public void set_KeyLengthLimit(int value);
    public int get_ValueLengthLimit();
    public void set_ValueLengthLimit(int value);
    public int get_MultipartBoundaryLengthLimit();
    public void set_MultipartBoundaryLengthLimit(int value);
    public int get_MultipartHeadersCountLimit();
    public void set_MultipartHeadersCountLimit(int value);
    public int get_MultipartHeadersLengthLimit();
    public void set_MultipartHeadersLengthLimit(int value);
    public long get_MultipartBodyLengthLimit();
    public void set_MultipartBodyLengthLimit(long value);
    public sealed virtual IFilterMetadata CreateInstance(IServiceProvider serviceProvider);
}
[AttributeUsageAttribute("68")]
public class Microsoft.AspNetCore.Mvc.RequestSizeLimitAttribute : Attribute {
    private long _bytes;
    [CompilerGeneratedAttribute]
private int <Order>k__BackingField;
    public int Order { get; public set; }
    public bool IsReusable { get; }
    public RequestSizeLimitAttribute(long bytes);
    [CompilerGeneratedAttribute]
public sealed virtual int get_Order();
    [CompilerGeneratedAttribute]
public void set_Order(int value);
    public sealed virtual bool get_IsReusable();
    public sealed virtual IFilterMetadata CreateInstance(IServiceProvider serviceProvider);
}
[AttributeUsageAttribute("68")]
public class Microsoft.AspNetCore.Mvc.RequireHttpsAttribute : Attribute {
    private Nullable`1<bool> _permanent;
    [CompilerGeneratedAttribute]
private int <Order>k__BackingField;
    public bool Permanent { get; public set; }
    public int Order { get; public set; }
    public bool get_Permanent();
    public void set_Permanent(bool value);
    [CompilerGeneratedAttribute]
public sealed virtual int get_Order();
    [CompilerGeneratedAttribute]
public void set_Order(int value);
    public virtual void OnAuthorization(AuthorizationFilterContext filterContext);
    protected virtual void HandleNonHttpsRequest(AuthorizationFilterContext filterContext);
}
[AttributeUsageAttribute("68")]
public class Microsoft.AspNetCore.Mvc.ResponseCacheAttribute : Attribute {
    private Nullable`1<int> _duration;
    private Nullable`1<ResponseCacheLocation> _location;
    private Nullable`1<bool> _noStore;
    [CompilerGeneratedAttribute]
private string <VaryByHeader>k__BackingField;
    [CompilerGeneratedAttribute]
private String[] <VaryByQueryKeys>k__BackingField;
    [CompilerGeneratedAttribute]
private string <CacheProfileName>k__BackingField;
    [CompilerGeneratedAttribute]
private int <Order>k__BackingField;
    public int Duration { get; public set; }
    public ResponseCacheLocation Location { get; public set; }
    public bool NoStore { get; public set; }
    public string VaryByHeader { get; public set; }
    public String[] VaryByQueryKeys { get; public set; }
    public string CacheProfileName { get; public set; }
    public int Order { get; public set; }
    public bool IsReusable { get; }
    public int get_Duration();
    public void set_Duration(int value);
    public ResponseCacheLocation get_Location();
    public void set_Location(ResponseCacheLocation value);
    public bool get_NoStore();
    public void set_NoStore(bool value);
    [CompilerGeneratedAttribute]
public string get_VaryByHeader();
    [CompilerGeneratedAttribute]
public void set_VaryByHeader(string value);
    [CompilerGeneratedAttribute]
public String[] get_VaryByQueryKeys();
    [CompilerGeneratedAttribute]
public void set_VaryByQueryKeys(String[] value);
    [CompilerGeneratedAttribute]
public string get_CacheProfileName();
    [CompilerGeneratedAttribute]
public void set_CacheProfileName(string value);
    [CompilerGeneratedAttribute]
public sealed virtual int get_Order();
    [CompilerGeneratedAttribute]
public void set_Order(int value);
    public sealed virtual bool get_IsReusable();
    public CacheProfile GetCacheProfile(MvcOptions options);
    public sealed virtual IFilterMetadata CreateInstance(IServiceProvider serviceProvider);
}
public enum Microsoft.AspNetCore.Mvc.ResponseCacheLocation : Enum {
    public int value__;
    public static ResponseCacheLocation Any;
    public static ResponseCacheLocation Client;
    public static ResponseCacheLocation None;
}
[AttributeUsageAttribute("68")]
public class Microsoft.AspNetCore.Mvc.RouteAttribute : Attribute {
    private Nullable`1<int> _order;
    [CompilerGeneratedAttribute]
private string <Template>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    public string Template { get; }
    public int Order { get; public set; }
    private Nullable`1<int> Microsoft.AspNetCore.Mvc.Routing.IRouteTemplateProvider.Order { get; }
    public string Name { get; public set; }
    public RouteAttribute(string template);
    [CompilerGeneratedAttribute]
public sealed virtual string get_Template();
    public int get_Order();
    public void set_Order(int value);
    private sealed virtual override Nullable`1<int> Microsoft.AspNetCore.Mvc.Routing.IRouteTemplateProvider.get_Order();
    [CompilerGeneratedAttribute]
public sealed virtual string get_Name();
    [CompilerGeneratedAttribute]
public void set_Name(string value);
}
[AttributeUsageAttribute("64")]
public abstract class Microsoft.AspNetCore.Mvc.Routing.HttpMethodAttribute : Attribute {
    private Nullable`1<int> _order;
    [CompilerGeneratedAttribute]
private IEnumerable`1<string> <HttpMethods>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Template>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    public IEnumerable`1<string> HttpMethods { get; }
    public string Template { get; }
    public int Order { get; public set; }
    private Nullable`1<int> Microsoft.AspNetCore.Mvc.Routing.IRouteTemplateProvider.Order { get; }
    public string Name { get; public set; }
    public HttpMethodAttribute(IEnumerable`1<string> httpMethods);
    public HttpMethodAttribute(IEnumerable`1<string> httpMethods, string template);
    [CompilerGeneratedAttribute]
public sealed virtual IEnumerable`1<string> get_HttpMethods();
    [CompilerGeneratedAttribute]
public sealed virtual string get_Template();
    public int get_Order();
    public void set_Order(int value);
    private sealed virtual override Nullable`1<int> Microsoft.AspNetCore.Mvc.Routing.IRouteTemplateProvider.get_Order();
    [CompilerGeneratedAttribute]
public sealed virtual string get_Name();
    [CompilerGeneratedAttribute]
public void set_Name(string value);
}
public interface Microsoft.AspNetCore.Mvc.Routing.IActionHttpMethodProvider {
    public IEnumerable`1<string> HttpMethods { get; }
    public abstract virtual IEnumerable`1<string> get_HttpMethods();
}
public interface Microsoft.AspNetCore.Mvc.Routing.IRouteTemplateProvider {
    public string Template { get; }
    public Nullable`1<int> Order { get; }
    public string Name { get; }
    public abstract virtual string get_Template();
    public abstract virtual Nullable`1<int> get_Order();
    public abstract virtual string get_Name();
}
public interface Microsoft.AspNetCore.Mvc.Routing.IRouteValueProvider {
    public string RouteKey { get; }
    public string RouteValue { get; }
    public abstract virtual string get_RouteKey();
    public abstract virtual string get_RouteValue();
}
public interface Microsoft.AspNetCore.Mvc.Routing.IUrlHelperFactory {
    public abstract virtual IUrlHelper GetUrlHelper(ActionContext context);
}
public class Microsoft.AspNetCore.Mvc.Routing.KnownRouteValueConstraint : object {
    private RouteValuesCollection _cachedValuesCollection;
    public sealed virtual bool Match(HttpContext httpContext, IRouter route, string routeKey, RouteValueDictionary values, RouteDirection routeDirection);
    private String[] GetAndCacheAllMatchingValues(string routeKey, HttpContext httpContext);
    private static ActionDescriptorCollection GetAndValidateActionDescriptorCollection(HttpContext httpContext);
}
[AttributeUsageAttribute("68")]
public abstract class Microsoft.AspNetCore.Mvc.Routing.RouteValueAttribute : Attribute {
    [CompilerGeneratedAttribute]
private string <RouteKey>k__BackingField;
    [CompilerGeneratedAttribute]
private string <RouteValue>k__BackingField;
    public string RouteKey { get; }
    public string RouteValue { get; }
    protected RouteValueAttribute(string routeKey, string routeValue);
    [CompilerGeneratedAttribute]
public sealed virtual string get_RouteKey();
    [CompilerGeneratedAttribute]
public sealed virtual string get_RouteValue();
}
public class Microsoft.AspNetCore.Mvc.Routing.UrlHelper : object {
    private StringBuilder _stringBuilder;
    private RouteValueDictionary _routeValueDictionary;
    [CompilerGeneratedAttribute]
private ActionContext <ActionContext>k__BackingField;
    public ActionContext ActionContext { get; }
    protected RouteValueDictionary AmbientValues { get; }
    protected HttpContext HttpContext { get; }
    protected IRouter Router { get; }
    public UrlHelper(ActionContext actionContext);
    [CompilerGeneratedAttribute]
public sealed virtual ActionContext get_ActionContext();
    protected RouteValueDictionary get_AmbientValues();
    protected HttpContext get_HttpContext();
    protected IRouter get_Router();
    public virtual string Action(UrlActionContext actionContext);
    public virtual bool IsLocalUrl(string url);
    public virtual string RouteUrl(UrlRouteContext routeContext);
    protected virtual VirtualPathData GetVirtualPathData(string routeName, RouteValueDictionary values);
    internal void AppendPathAndFragment(StringBuilder builder, VirtualPathData pathData, string fragment);
    public virtual string Content(string contentPath);
    public virtual string Link(string routeName, object values);
    private RouteValueDictionary GetValuesDictionary(object values);
    private StringBuilder GetStringBuilder();
    protected virtual string GenerateUrl(string protocol, string host, VirtualPathData pathData, string fragment);
    private bool TryFastGenerateUrl(string protocol, string host, VirtualPathData pathData, string fragment, String& url);
}
public class Microsoft.AspNetCore.Mvc.Routing.UrlHelperFactory : object {
    public sealed virtual IUrlHelper GetUrlHelper(ActionContext context);
}
public class Microsoft.AspNetCore.Mvc.SerializableError : Dictionary`2<string, object> {
    public SerializableError(ModelStateDictionary modelState);
}
[AttributeUsageAttribute("68")]
[DebuggerDisplayAttribute("ServiceFilter: Type={ServiceType} Order={Order}")]
public class Microsoft.AspNetCore.Mvc.ServiceFilterAttribute : Attribute {
    [CompilerGeneratedAttribute]
private int <Order>k__BackingField;
    [CompilerGeneratedAttribute]
private Type <ServiceType>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsReusable>k__BackingField;
    public int Order { get; public set; }
    public Type ServiceType { get; }
    public bool IsReusable { get; public set; }
    public ServiceFilterAttribute(Type type);
    [CompilerGeneratedAttribute]
public sealed virtual int get_Order();
    [CompilerGeneratedAttribute]
public void set_Order(int value);
    [CompilerGeneratedAttribute]
public Type get_ServiceType();
    [CompilerGeneratedAttribute]
public sealed virtual bool get_IsReusable();
    [CompilerGeneratedAttribute]
public void set_IsReusable(bool value);
    public sealed virtual IFilterMetadata CreateInstance(IServiceProvider serviceProvider);
}
public class Microsoft.AspNetCore.Mvc.SignInResult : ActionResult {
    [CompilerGeneratedAttribute]
private string <AuthenticationScheme>k__BackingField;
    [CompilerGeneratedAttribute]
private ClaimsPrincipal <Principal>k__BackingField;
    [CompilerGeneratedAttribute]
private AuthenticationProperties <Properties>k__BackingField;
    public string AuthenticationScheme { get; public set; }
    public ClaimsPrincipal Principal { get; public set; }
    public AuthenticationProperties Properties { get; public set; }
    public SignInResult(string authenticationScheme, ClaimsPrincipal principal);
    public SignInResult(string authenticationScheme, ClaimsPrincipal principal, AuthenticationProperties properties);
    [CompilerGeneratedAttribute]
public string get_AuthenticationScheme();
    [CompilerGeneratedAttribute]
public void set_AuthenticationScheme(string value);
    [CompilerGeneratedAttribute]
public ClaimsPrincipal get_Principal();
    [CompilerGeneratedAttribute]
public void set_Principal(ClaimsPrincipal value);
    [CompilerGeneratedAttribute]
public AuthenticationProperties get_Properties();
    [CompilerGeneratedAttribute]
public void set_Properties(AuthenticationProperties value);
    [AsyncStateMachineAttribute("Microsoft.AspNetCore.Mvc.SignInResult/<ExecuteResultAsync>d__14")]
public virtual Task ExecuteResultAsync(ActionContext context);
}
public class Microsoft.AspNetCore.Mvc.SignOutResult : ActionResult {
    [CompilerGeneratedAttribute]
private IList`1<string> <AuthenticationSchemes>k__BackingField;
    [CompilerGeneratedAttribute]
private AuthenticationProperties <Properties>k__BackingField;
    public IList`1<string> AuthenticationSchemes { get; public set; }
    public AuthenticationProperties Properties { get; public set; }
    public SignOutResult(string authenticationScheme);
    public SignOutResult(IList`1<string> authenticationSchemes);
    public SignOutResult(string authenticationScheme, AuthenticationProperties properties);
    public SignOutResult(IList`1<string> authenticationSchemes, AuthenticationProperties properties);
    [CompilerGeneratedAttribute]
public IList`1<string> get_AuthenticationSchemes();
    [CompilerGeneratedAttribute]
public void set_AuthenticationSchemes(IList`1<string> value);
    [CompilerGeneratedAttribute]
public AuthenticationProperties get_Properties();
    [CompilerGeneratedAttribute]
public void set_Properties(AuthenticationProperties value);
    [AsyncStateMachineAttribute("Microsoft.AspNetCore.Mvc.SignOutResult/<ExecuteResultAsync>d__13")]
public virtual Task ExecuteResultAsync(ActionContext context);
}
public class Microsoft.AspNetCore.Mvc.StatusCodeResult : ActionResult {
    [CompilerGeneratedAttribute]
private int <StatusCode>k__BackingField;
    public int StatusCode { get; }
    public StatusCodeResult(int statusCode);
    [CompilerGeneratedAttribute]
public int get_StatusCode();
    public virtual void ExecuteResult(ActionContext context);
}
[AttributeUsageAttribute("68")]
[DebuggerDisplayAttribute("TypeFilter: Type={ImplementationType} Order={Order}")]
public class Microsoft.AspNetCore.Mvc.TypeFilterAttribute : Attribute {
    private ObjectFactory _factory;
    [CompilerGeneratedAttribute]
private Object[] <Arguments>k__BackingField;
    [CompilerGeneratedAttribute]
private Type <ImplementationType>k__BackingField;
    [CompilerGeneratedAttribute]
private int <Order>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsReusable>k__BackingField;
    public Object[] Arguments { get; public set; }
    public Type ImplementationType { get; }
    public int Order { get; public set; }
    public bool IsReusable { get; public set; }
    public TypeFilterAttribute(Type type);
    [CompilerGeneratedAttribute]
public Object[] get_Arguments();
    [CompilerGeneratedAttribute]
public void set_Arguments(Object[] value);
    [CompilerGeneratedAttribute]
public Type get_ImplementationType();
    [CompilerGeneratedAttribute]
public sealed virtual int get_Order();
    [CompilerGeneratedAttribute]
public void set_Order(int value);
    [CompilerGeneratedAttribute]
public sealed virtual bool get_IsReusable();
    [CompilerGeneratedAttribute]
public void set_IsReusable(bool value);
    public sealed virtual IFilterMetadata CreateInstance(IServiceProvider serviceProvider);
}
public class Microsoft.AspNetCore.Mvc.UnauthorizedResult : StatusCodeResult {
}
public class Microsoft.AspNetCore.Mvc.UnprocessableEntityObjectResult : ObjectResult {
    public UnprocessableEntityObjectResult(ModelStateDictionary modelState);
    public UnprocessableEntityObjectResult(object error);
}
public class Microsoft.AspNetCore.Mvc.UnprocessableEntityResult : StatusCodeResult {
}
public class Microsoft.AspNetCore.Mvc.UnsupportedMediaTypeResult : StatusCodeResult {
}
[ExtensionAttribute]
public static class Microsoft.AspNetCore.Mvc.UrlHelperExtensions : object {
    [ExtensionAttribute]
public static string Action(IUrlHelper helper);
    [ExtensionAttribute]
public static string Action(IUrlHelper helper, string action);
    [ExtensionAttribute]
public static string Action(IUrlHelper helper, string action, object values);
    [ExtensionAttribute]
public static string Action(IUrlHelper helper, string action, string controller);
    [ExtensionAttribute]
public static string Action(IUrlHelper helper, string action, string controller, object values);
    [ExtensionAttribute]
public static string Action(IUrlHelper helper, string action, string controller, object values, string protocol);
    [ExtensionAttribute]
public static string Action(IUrlHelper helper, string action, string controller, object values, string protocol, string host);
    [ExtensionAttribute]
public static string Action(IUrlHelper helper, string action, string controller, object values, string protocol, string host, string fragment);
    [ExtensionAttribute]
public static string RouteUrl(IUrlHelper helper, object values);
    [ExtensionAttribute]
public static string RouteUrl(IUrlHelper helper, string routeName);
    [ExtensionAttribute]
public static string RouteUrl(IUrlHelper helper, string routeName, object values);
    [ExtensionAttribute]
public static string RouteUrl(IUrlHelper helper, string routeName, object values, string protocol);
    [ExtensionAttribute]
public static string RouteUrl(IUrlHelper helper, string routeName, object values, string protocol, string host);
    [ExtensionAttribute]
public static string RouteUrl(IUrlHelper helper, string routeName, object values, string protocol, string host, string fragment);
    [ExtensionAttribute]
public static string Page(IUrlHelper urlHelper, string pageName);
    [ExtensionAttribute]
public static string Page(IUrlHelper urlHelper, string pageName, string pageHandler);
    [ExtensionAttribute]
public static string Page(IUrlHelper urlHelper, string pageName, object values);
    [ExtensionAttribute]
public static string Page(IUrlHelper urlHelper, string pageName, string pageHandler, object values);
    [ExtensionAttribute]
public static string Page(IUrlHelper urlHelper, string pageName, string pageHandler, object values, string protocol);
    [ExtensionAttribute]
public static string Page(IUrlHelper urlHelper, string pageName, string pageHandler, object values, string protocol, string host);
    [ExtensionAttribute]
public static string Page(IUrlHelper urlHelper, string pageName, string pageHandler, object values, string protocol, string host, string fragment);
    private static object CalculatePageName(ActionContext actionContext, string pageName);
}
public class Microsoft.AspNetCore.Mvc.ValidationProblemDetails : ProblemDetails {
    [CompilerGeneratedAttribute]
private IDictionary`2<string, String[]> <Errors>k__BackingField;
    public IDictionary`2<string, String[]> Errors { get; }
    public ValidationProblemDetails(ModelStateDictionary modelState);
    [CompilerGeneratedAttribute]
public IDictionary`2<string, String[]> get_Errors();
    [CompilerGeneratedAttribute]
internal static string <.ctor>g__GetErrorMessage|1_0(ModelError error);
}
public interface Microsoft.AspNetCore.Mvc.ViewFeatures.IKeepTempDataResult {
}
public class Microsoft.AspNetCore.Mvc.VirtualFileResult : FileResult {
    private string _fileName;
    [CompilerGeneratedAttribute]
private IFileProvider <FileProvider>k__BackingField;
    public string FileName { get; public set; }
    public IFileProvider FileProvider { get; public set; }
    public VirtualFileResult(string fileName, string contentType);
    public VirtualFileResult(string fileName, MediaTypeHeaderValue contentType);
    public string get_FileName();
    public void set_FileName(string value);
    [CompilerGeneratedAttribute]
public IFileProvider get_FileProvider();
    [CompilerGeneratedAttribute]
public void set_FileProvider(IFileProvider value);
    public virtual Task ExecuteResultAsync(ActionContext context);
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
internal class Microsoft.CodeAnalysis.EmbeddedAttribute : Attribute {
}
[ExtensionAttribute]
public static class Microsoft.Extensions.DependencyInjection.ApplicationModelConventionExtensions : object {
    [ExtensionAttribute]
public static void RemoveType(IList`1<IApplicationModelConvention> list);
    [ExtensionAttribute]
public static void RemoveType(IList`1<IApplicationModelConvention> list, Type type);
    [ExtensionAttribute]
public static void Add(IList`1<IApplicationModelConvention> conventions, IControllerModelConvention controllerModelConvention);
    [ExtensionAttribute]
public static void Add(IList`1<IApplicationModelConvention> conventions, IActionModelConvention actionModelConvention);
    [ExtensionAttribute]
public static void Add(IList`1<IApplicationModelConvention> conventions, IParameterModelConvention parameterModelConvention);
    [ExtensionAttribute]
public static void Add(IList`1<IApplicationModelConvention> conventions, IParameterModelBaseConvention parameterModelConvention);
}
public interface Microsoft.Extensions.DependencyInjection.IMvcBuilder {
    public IServiceCollection Services { get; }
    public ApplicationPartManager PartManager { get; }
    public abstract virtual IServiceCollection get_Services();
    public abstract virtual ApplicationPartManager get_PartManager();
}
public interface Microsoft.Extensions.DependencyInjection.IMvcCoreBuilder {
    public IServiceCollection Services { get; }
    public ApplicationPartManager PartManager { get; }
    public abstract virtual IServiceCollection get_Services();
    public abstract virtual ApplicationPartManager get_PartManager();
}
[ExtensionAttribute]
public static class Microsoft.Extensions.DependencyInjection.MvcCoreMvcBuilderExtensions : object {
    [ExtensionAttribute]
public static IMvcBuilder AddMvcOptions(IMvcBuilder builder, Action`1<MvcOptions> setupAction);
    [ExtensionAttribute]
public static IMvcBuilder AddFormatterMappings(IMvcBuilder builder, Action`1<FormatterMappings> setupAction);
    [ExtensionAttribute]
public static IMvcBuilder AddApplicationPart(IMvcBuilder builder, Assembly assembly);
    [ExtensionAttribute]
public static IMvcBuilder ConfigureApplicationPartManager(IMvcBuilder builder, Action`1<ApplicationPartManager> setupAction);
    [ExtensionAttribute]
public static IMvcBuilder AddControllersAsServices(IMvcBuilder builder);
    [ExtensionAttribute]
public static IMvcBuilder SetCompatibilityVersion(IMvcBuilder builder, CompatibilityVersion version);
}
[ExtensionAttribute]
public static class Microsoft.Extensions.DependencyInjection.MvcCoreMvcCoreBuilderExtensions : object {
    [ExtensionAttribute]
public static IMvcCoreBuilder AddMvcOptions(IMvcCoreBuilder builder, Action`1<MvcOptions> setupAction);
    [ExtensionAttribute]
public static IMvcCoreBuilder AddFormatterMappings(IMvcCoreBuilder builder);
    [ExtensionAttribute]
public static IMvcCoreBuilder AddFormatterMappings(IMvcCoreBuilder builder, Action`1<FormatterMappings> setupAction);
    internal static void AddFormatterMappingsServices(IServiceCollection services);
    [ExtensionAttribute]
public static IMvcCoreBuilder AddAuthorization(IMvcCoreBuilder builder);
    [ExtensionAttribute]
public static IMvcCoreBuilder AddAuthorization(IMvcCoreBuilder builder, Action`1<AuthorizationOptions> setupAction);
    internal static void AddAuthorizationServices(IServiceCollection services);
    [ExtensionAttribute]
public static IMvcCoreBuilder AddControllersAsServices(IMvcCoreBuilder builder);
    [ExtensionAttribute]
public static IMvcCoreBuilder AddApplicationPart(IMvcCoreBuilder builder, Assembly assembly);
    [ExtensionAttribute]
public static IMvcCoreBuilder ConfigureApplicationPartManager(IMvcCoreBuilder builder, Action`1<ApplicationPartManager> setupAction);
    [ExtensionAttribute]
public static IMvcCoreBuilder SetCompatibilityVersion(IMvcCoreBuilder builder, CompatibilityVersion version);
}
[ExtensionAttribute]
public static class Microsoft.Extensions.DependencyInjection.MvcCoreServiceCollectionExtensions : object {
    [ExtensionAttribute]
public static IMvcCoreBuilder AddMvcCore(IServiceCollection services);
    private static void ConfigureDefaultFeatureProviders(ApplicationPartManager manager);
    private static ApplicationPartManager GetApplicationPartManager(IServiceCollection services);
    private static T GetServiceFromCollection(IServiceCollection services);
    [ExtensionAttribute]
public static IMvcCoreBuilder AddMvcCore(IServiceCollection services, Action`1<MvcOptions> setupAction);
    internal static void AddMvcCoreServices(IServiceCollection services);
    private static void ConfigureDefaultServices(IServiceCollection services);
}
internal class Microsoft.Extensions.Internal.AwaitableInfo : ValueType {
    [CompilerGeneratedAttribute]
private Type <AwaiterType>k__BackingField;
    [CompilerGeneratedAttribute]
private PropertyInfo <AwaiterIsCompletedProperty>k__BackingField;
    [CompilerGeneratedAttribute]
private MethodInfo <AwaiterGetResultMethod>k__BackingField;
    [CompilerGeneratedAttribute]
private MethodInfo <AwaiterOnCompletedMethod>k__BackingField;
    [CompilerGeneratedAttribute]
private MethodInfo <AwaiterUnsafeOnCompletedMethod>k__BackingField;
    [CompilerGeneratedAttribute]
private Type <ResultType>k__BackingField;
    [CompilerGeneratedAttribute]
private MethodInfo <GetAwaiterMethod>k__BackingField;
    public Type AwaiterType { get; }
    public PropertyInfo AwaiterIsCompletedProperty { get; }
    public MethodInfo AwaiterGetResultMethod { get; }
    public MethodInfo AwaiterOnCompletedMethod { get; }
    public MethodInfo AwaiterUnsafeOnCompletedMethod { get; }
    public Type ResultType { get; }
    public MethodInfo GetAwaiterMethod { get; }
    public AwaitableInfo(Type awaiterType, PropertyInfo awaiterIsCompletedProperty, MethodInfo awaiterGetResultMethod, MethodInfo awaiterOnCompletedMethod, MethodInfo awaiterUnsafeOnCompletedMethod, Type resultType, MethodInfo getAwaiterMethod);
    [CompilerGeneratedAttribute]
public Type get_AwaiterType();
    [CompilerGeneratedAttribute]
public PropertyInfo get_AwaiterIsCompletedProperty();
    [CompilerGeneratedAttribute]
public MethodInfo get_AwaiterGetResultMethod();
    [CompilerGeneratedAttribute]
public MethodInfo get_AwaiterOnCompletedMethod();
    [CompilerGeneratedAttribute]
public MethodInfo get_AwaiterUnsafeOnCompletedMethod();
    [CompilerGeneratedAttribute]
public Type get_ResultType();
    [CompilerGeneratedAttribute]
public MethodInfo get_GetAwaiterMethod();
    public static bool IsTypeAwaitable(Type type, AwaitableInfo& awaitableInfo);
}
internal static class Microsoft.Extensions.Internal.ClosedGenericMatcher : object {
    public static Type ExtractGenericInterface(Type queryType, Type interfaceType);
    private static bool IsGenericInstantiation(Type candidate, Type interfaceType);
    private static Type GetGenericInstantiation(Type queryType, Type interfaceType);
}
internal class Microsoft.Extensions.Internal.CoercedAwaitableInfo : ValueType {
    [CompilerGeneratedAttribute]
private AwaitableInfo <AwaitableInfo>k__BackingField;
    [CompilerGeneratedAttribute]
private Expression <CoercerExpression>k__BackingField;
    [CompilerGeneratedAttribute]
private Type <CoercerResultType>k__BackingField;
    public AwaitableInfo AwaitableInfo { get; }
    public Expression CoercerExpression { get; }
    public Type CoercerResultType { get; }
    public bool RequiresCoercion { get; }
    public CoercedAwaitableInfo(AwaitableInfo awaitableInfo);
    public CoercedAwaitableInfo(Expression coercerExpression, Type coercerResultType, AwaitableInfo coercedAwaitableInfo);
    [CompilerGeneratedAttribute]
public AwaitableInfo get_AwaitableInfo();
    [CompilerGeneratedAttribute]
public Expression get_CoercerExpression();
    [CompilerGeneratedAttribute]
public Type get_CoercerResultType();
    public bool get_RequiresCoercion();
    public static bool IsTypeAwaitable(Type type, CoercedAwaitableInfo& info);
}
internal class Microsoft.Extensions.Internal.HashCodeCombiner : ValueType {
    private long _combinedHash64;
    public int CombinedHash { get; }
    private HashCodeCombiner(long seed);
    public int get_CombinedHash();
    public void Add(IEnumerable e);
    public static int op_Implicit(HashCodeCombiner self);
    public void Add(int i);
    public void Add(string s);
    public void Add(object o);
    public void Add(TValue value, IEqualityComparer`1<TValue> comparer);
    public static HashCodeCombiner Start();
}
internal class Microsoft.Extensions.Internal.ObjectMethodExecutor : object {
    private Object[] _parameterDefaultValues;
    private MethodExecutorAsync _executorAsync;
    private MethodExecutor _executor;
    private static ConstructorInfo _objectMethodExecutorAwaitableConstructor;
    [CompilerGeneratedAttribute]
private MethodInfo <MethodInfo>k__BackingField;
    [CompilerGeneratedAttribute]
private ParameterInfo[] <MethodParameters>k__BackingField;
    [CompilerGeneratedAttribute]
private TypeInfo <TargetTypeInfo>k__BackingField;
    [CompilerGeneratedAttribute]
private Type <AsyncResultType>k__BackingField;
    [CompilerGeneratedAttribute]
private Type <MethodReturnType>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsMethodAsync>k__BackingField;
    public MethodInfo MethodInfo { get; }
    public ParameterInfo[] MethodParameters { get; }
    public TypeInfo TargetTypeInfo { get; }
    public Type AsyncResultType { get; }
    public Type MethodReturnType { get; internal set; }
    public bool IsMethodAsync { get; }
    private ObjectMethodExecutor(MethodInfo methodInfo, TypeInfo targetTypeInfo, Object[] parameterDefaultValues);
    private static ObjectMethodExecutor();
    [CompilerGeneratedAttribute]
public MethodInfo get_MethodInfo();
    [CompilerGeneratedAttribute]
public ParameterInfo[] get_MethodParameters();
    [CompilerGeneratedAttribute]
public TypeInfo get_TargetTypeInfo();
    [CompilerGeneratedAttribute]
public Type get_AsyncResultType();
    [CompilerGeneratedAttribute]
public Type get_MethodReturnType();
    [CompilerGeneratedAttribute]
internal void set_MethodReturnType(Type value);
    [CompilerGeneratedAttribute]
public bool get_IsMethodAsync();
    public static ObjectMethodExecutor Create(MethodInfo methodInfo, TypeInfo targetTypeInfo);
    public static ObjectMethodExecutor Create(MethodInfo methodInfo, TypeInfo targetTypeInfo, Object[] parameterDefaultValues);
    public object Execute(object target, Object[] parameters);
    public ObjectMethodExecutorAwaitable ExecuteAsync(object target, Object[] parameters);
    public object GetDefaultValueForParameter(int index);
    private static MethodExecutor GetExecutor(MethodInfo methodInfo, TypeInfo targetTypeInfo);
    private static MethodExecutor WrapVoidMethod(VoidMethodExecutor executor);
    private static MethodExecutorAsync GetExecutorAsync(MethodInfo methodInfo, TypeInfo targetTypeInfo, CoercedAwaitableInfo coercedAwaitableInfo);
}
internal class Microsoft.Extensions.Internal.ObjectMethodExecutorAwaitable : ValueType {
    private object _customAwaitable;
    private Func`2<object, object> _getAwaiterMethod;
    private Func`2<object, bool> _isCompletedMethod;
    private Func`2<object, object> _getResultMethod;
    private Action`2<object, Action> _onCompletedMethod;
    private Action`2<object, Action> _unsafeOnCompletedMethod;
    public ObjectMethodExecutorAwaitable(object customAwaitable, Func`2<object, object> getAwaiterMethod, Func`2<object, bool> isCompletedMethod, Func`2<object, object> getResultMethod, Action`2<object, Action> onCompletedMethod, Action`2<object, Action> unsafeOnCompletedMethod);
    public Awaiter GetAwaiter();
}
internal static class Microsoft.Extensions.Internal.ObjectMethodExecutorFSharpSupport : object {
    private static object _fsharpValuesCacheLock;
    private static Assembly _fsharpCoreAssembly;
    private static MethodInfo _fsharpAsyncStartAsTaskGenericMethod;
    private static PropertyInfo _fsharpOptionOfTaskCreationOptionsNoneProperty;
    private static PropertyInfo _fsharpOptionOfCancellationTokenNoneProperty;
    private static ObjectMethodExecutorFSharpSupport();
    public static bool TryBuildCoercerFromFSharpAsyncToAwaitable(Type possibleFSharpAsyncType, Expression& coerceToAwaitableExpression, Type& awaitableType);
    private static bool IsFSharpAsyncOpenGenericType(Type possibleFSharpAsyncGenericType);
    private static bool TryPopulateFSharpValueCaches(Type possibleFSharpAsyncGenericType);
    private static bool TypesHaveSameIdentity(Type type1, Type type2);
}
internal class Microsoft.Extensions.Internal.ParameterDefaultValue : object {
    public static bool TryGetDefaultValue(ParameterInfo parameter, Object& defaultValue);
}
internal class Microsoft.Extensions.Internal.PropertyActivator`1 : object {
    private Func`2<TContext, object> _valueAccessor;
    private Action`2<object, object> _fastPropertySetter;
    [CompilerGeneratedAttribute]
private PropertyInfo <PropertyInfo>k__BackingField;
    public PropertyInfo PropertyInfo { get; private set; }
    public PropertyActivator`1(PropertyInfo propertyInfo, Func`2<TContext, object> valueAccessor);
    [CompilerGeneratedAttribute]
public PropertyInfo get_PropertyInfo();
    [CompilerGeneratedAttribute]
private void set_PropertyInfo(PropertyInfo value);
    public object Activate(object instance, TContext context);
    public static PropertyActivator`1[] GetPropertiesToActivate(Type type, Type activateAttributeType, Func`2<PropertyInfo, PropertyActivator`1<TContext>> createActivateInfo);
    public static PropertyActivator`1[] GetPropertiesToActivate(Type type, Type activateAttributeType, Func`2<PropertyInfo, PropertyActivator`1<TContext>> createActivateInfo, bool includeNonPublic);
}
internal class Microsoft.Extensions.Internal.PropertyHelper : object {
    private static MethodInfo CallPropertyGetterOpenGenericMethod;
    private static MethodInfo CallPropertyGetterByReferenceOpenGenericMethod;
    private static MethodInfo CallNullSafePropertyGetterOpenGenericMethod;
    private static MethodInfo CallNullSafePropertyGetterByReferenceOpenGenericMethod;
    private static MethodInfo CallPropertySetterOpenGenericMethod;
    private static ConcurrentDictionary`2<Type, PropertyHelper[]> PropertiesCache;
    private static ConcurrentDictionary`2<Type, PropertyHelper[]> VisiblePropertiesCache;
    private Action`2<object, object> _valueSetter;
    private Func`2<object, object> _valueGetter;
    [CompilerGeneratedAttribute]
private PropertyInfo <Property>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    public PropertyInfo Property { get; }
    public string Name { get; protected set; }
    public Func`2<object, object> ValueGetter { get; }
    public Action`2<object, object> ValueSetter { get; }
    public PropertyHelper(PropertyInfo property);
    private static PropertyHelper();
    [CompilerGeneratedAttribute]
public PropertyInfo get_Property();
    [CompilerGeneratedAttribute]
public virtual string get_Name();
    [CompilerGeneratedAttribute]
protected virtual void set_Name(string value);
    public Func`2<object, object> get_ValueGetter();
    public Action`2<object, object> get_ValueSetter();
    public object GetValue(object instance);
    public void SetValue(object instance, object value);
    public static PropertyHelper[] GetProperties(TypeInfo typeInfo);
    public static PropertyHelper[] GetProperties(Type type);
    public static PropertyHelper[] GetVisibleProperties(TypeInfo typeInfo);
    public static PropertyHelper[] GetVisibleProperties(Type type);
    public static Func`2<object, object> MakeFastPropertyGetter(PropertyInfo propertyInfo);
    public static Func`2<object, object> MakeNullSafeFastPropertyGetter(PropertyInfo propertyInfo);
    private static Func`2<object, object> MakeFastPropertyGetter(PropertyInfo propertyInfo, MethodInfo propertyGetterWrapperMethod, MethodInfo propertyGetterByRefWrapperMethod);
    private static Func`2<object, object> MakeFastPropertyGetter(Type openGenericDelegateType, MethodInfo propertyGetMethod, MethodInfo openGenericWrapperMethod);
    public static Action`2<object, object> MakeFastPropertySetter(PropertyInfo propertyInfo);
    public static IDictionary`2<string, object> ObjectToDictionary(object value);
    private static PropertyHelper CreateInstance(PropertyInfo property);
    private static object CallPropertyGetter(Func`2<TDeclaringType, TValue> getter, object target);
    private static object CallPropertyGetterByReference(ByRefFunc`2<TDeclaringType, TValue> getter, object target);
    private static object CallNullSafePropertyGetter(Func`2<TDeclaringType, TValue> getter, object target);
    private static object CallNullSafePropertyGetterByReference(ByRefFunc`2<TDeclaringType, TValue> getter, object target);
    private static void CallPropertySetter(Action`2<TDeclaringType, TValue> setter, object target, object value);
    protected static PropertyHelper[] GetVisibleProperties(Type type, Func`2<PropertyInfo, PropertyHelper> createPropertyHelper, ConcurrentDictionary`2<Type, PropertyHelper[]> allPropertiesCache, ConcurrentDictionary`2<Type, PropertyHelper[]> visiblePropertiesCache);
    protected static PropertyHelper[] GetProperties(Type type, Func`2<PropertyInfo, PropertyHelper> createPropertyHelper, ConcurrentDictionary`2<Type, PropertyHelper[]> cache);
    private static bool IsInterestingProperty(PropertyInfo property);
}
internal static class Microsoft.Extensions.Internal.SecurityHelper : object {
    public static ClaimsPrincipal MergeUserPrincipal(ClaimsPrincipal existingPrincipal, ClaimsPrincipal additionalPrincipal);
}
internal class Microsoft.Extensions.Internal.TypeNameHelper : object {
    private static Dictionary`2<Type, string> _builtInTypeNames;
    private static TypeNameHelper();
    public static string GetTypeDisplayName(object item, bool fullName);
    public static string GetTypeDisplayName(Type type, bool fullName, bool includeGenericParameterNames);
    private static void ProcessType(StringBuilder builder, Type type, DisplayNameOptions options);
    private static void ProcessArrayType(StringBuilder builder, Type type, DisplayNameOptions options);
    private static void ProcessGenericType(StringBuilder builder, Type type, Type[] genericArguments, int length, DisplayNameOptions options);
}
internal class Microsoft.Extensions.Internal.ValueStopwatch : ValueType {
    private static double TimestampToTicks;
    private long _startTimestamp;
    public bool IsActive { get; }
    private ValueStopwatch(long startTimestamp);
    private static ValueStopwatch();
    public bool get_IsActive();
    public static ValueStopwatch StartNew();
    public TimeSpan GetElapsedTime();
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
internal class System.Runtime.CompilerServices.IsReadOnlyAttribute : Attribute {
}
