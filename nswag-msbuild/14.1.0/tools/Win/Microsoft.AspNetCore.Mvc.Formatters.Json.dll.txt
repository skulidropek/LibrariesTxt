public class Microsoft.AspNetCore.Mvc.Formatters.Json.Internal.JsonArrayPool`1 : object {
    private ArrayPool`1<T> _inner;
    public JsonArrayPool`1(ArrayPool`1<T> inner);
    public sealed virtual T[] Rent(int minimumLength);
    public sealed virtual void Return(T[] array);
}
public class Microsoft.AspNetCore.Mvc.Formatters.Json.Internal.JsonResultExecutor : object {
    private static string DefaultContentType;
    private IArrayPool`1<char> _charPool;
    [CompilerGeneratedAttribute]
private ILogger <Logger>k__BackingField;
    [CompilerGeneratedAttribute]
private MvcJsonOptions <Options>k__BackingField;
    [CompilerGeneratedAttribute]
private IHttpResponseStreamWriterFactory <WriterFactory>k__BackingField;
    protected ILogger Logger { get; }
    protected MvcJsonOptions Options { get; }
    protected IHttpResponseStreamWriterFactory WriterFactory { get; }
    public JsonResultExecutor(IHttpResponseStreamWriterFactory writerFactory, ILogger`1<JsonResultExecutor> logger, IOptions`1<MvcJsonOptions> options, ArrayPool`1<char> charPool);
    private static JsonResultExecutor();
    [CompilerGeneratedAttribute]
protected ILogger get_Logger();
    [CompilerGeneratedAttribute]
protected MvcJsonOptions get_Options();
    [CompilerGeneratedAttribute]
protected IHttpResponseStreamWriterFactory get_WriterFactory();
    public virtual Task ExecuteAsync(ActionContext context, JsonResult result);
}
public class Microsoft.AspNetCore.Mvc.Formatters.Json.Internal.JsonSerializerObjectPolicy : object {
    private JsonSerializerSettings _serializerSettings;
    public JsonSerializerObjectPolicy(JsonSerializerSettings serializerSettings);
    public sealed virtual JsonSerializer Create();
    public sealed virtual bool Return(JsonSerializer serializer);
}
internal class Microsoft.AspNetCore.Mvc.Formatters.Json.Internal.MediaTypeHeaderValues : object {
    public static MediaTypeHeaderValue ApplicationJson;
    public static MediaTypeHeaderValue TextJson;
    public static MediaTypeHeaderValue ApplicationJsonPatch;
    public static MediaTypeHeaderValue ApplicationAnyJsonSyntax;
    private static MediaTypeHeaderValues();
}
[ExtensionAttribute]
internal static class Microsoft.AspNetCore.Mvc.Formatters.Json.Internal.MvcJsonLoggerExtensions : object {
    private static Action`2<ILogger, Exception> _jsonInputFormatterCrashed;
    private static Action`3<ILogger, string, Exception> _jsonResultExecuting;
    private static MvcJsonLoggerExtensions();
    [ExtensionAttribute]
public static void JsonInputException(ILogger logger, Exception exception);
    [ExtensionAttribute]
public static void JsonResultExecuting(ILogger logger, object value);
}
public class Microsoft.AspNetCore.Mvc.Formatters.Json.Internal.MvcJsonMvcOptionsSetup : object {
    private ILoggerFactory _loggerFactory;
    private MvcJsonOptions _jsonOptions;
    private ArrayPool`1<char> _charPool;
    private ObjectPoolProvider _objectPoolProvider;
    public MvcJsonMvcOptionsSetup(ILoggerFactory loggerFactory, IOptions`1<MvcJsonOptions> jsonOptions, ArrayPool`1<char> charPool, ObjectPoolProvider objectPoolProvider);
    public sealed virtual void Configure(MvcOptions options);
}
public class Microsoft.AspNetCore.Mvc.Formatters.Json.JsonPatchOperationsArrayProvider : object {
    private IModelMetadataProvider _modelMetadataProvider;
    public int Order { get; }
    public JsonPatchOperationsArrayProvider(IModelMetadataProvider modelMetadataProvider);
    public sealed virtual int get_Order();
    public sealed virtual void OnProvidersExecuting(ApiDescriptionProviderContext context);
    public sealed virtual void OnProvidersExecuted(ApiDescriptionProviderContext context);
}
public class Microsoft.AspNetCore.Mvc.Formatters.JsonInputFormatter : TextInputFormatter {
    private IArrayPool`1<char> _charPool;
    private ILogger _logger;
    private ObjectPoolProvider _objectPoolProvider;
    private MvcOptions _options;
    private MvcJsonOptions _jsonOptions;
    private bool _suppressInputFormatterBuffering;
    private bool _allowInputFormatterExceptionMessages;
    private ObjectPool`1<JsonSerializer> _jsonSerializerPool;
    [CompilerGeneratedAttribute]
private JsonSerializerSettings <SerializerSettings>k__BackingField;
    public InputFormatterExceptionPolicy ExceptionPolicy { get; }
    protected JsonSerializerSettings SerializerSettings { get; }
    [ObsoleteAttribute("This constructor is obsolete and will be removed in a future version.")]
public JsonInputFormatter(ILogger logger, JsonSerializerSettings serializerSettings, ArrayPool`1<char> charPool, ObjectPoolProvider objectPoolProvider);
    [ObsoleteAttribute("This constructor is obsolete and will be removed in a future version.")]
public JsonInputFormatter(ILogger logger, JsonSerializerSettings serializerSettings, ArrayPool`1<char> charPool, ObjectPoolProvider objectPoolProvider, bool suppressInputFormatterBuffering);
    [ObsoleteAttribute("This constructor is obsolete and will be removed in a future version.")]
public JsonInputFormatter(ILogger logger, JsonSerializerSettings serializerSettings, ArrayPool`1<char> charPool, ObjectPoolProvider objectPoolProvider, bool suppressInputFormatterBuffering, bool allowInputFormatterExceptionMessages);
    public JsonInputFormatter(ILogger logger, JsonSerializerSettings serializerSettings, ArrayPool`1<char> charPool, ObjectPoolProvider objectPoolProvider, MvcOptions options, MvcJsonOptions jsonOptions);
    public virtual InputFormatterExceptionPolicy get_ExceptionPolicy();
    [CompilerGeneratedAttribute]
protected JsonSerializerSettings get_SerializerSettings();
    [AsyncStateMachineAttribute("Microsoft.AspNetCore.Mvc.Formatters.JsonInputFormatter/<ReadRequestBodyAsync>d__17")]
public virtual Task`1<InputFormatterResult> ReadRequestBodyAsync(InputFormatterContext context, Encoding encoding);
    protected virtual JsonSerializer CreateJsonSerializer();
    protected virtual void ReleaseJsonSerializer(JsonSerializer serializer);
    private ModelMetadata GetPathMetadata(ModelMetadata metadata, string path);
    private Exception WrapExceptionForModelState(Exception exception);
}
public class Microsoft.AspNetCore.Mvc.Formatters.JsonOutputFormatter : TextOutputFormatter {
    private IArrayPool`1<char> _charPool;
    private JsonSerializerSettings _serializerSettings;
    [CompilerGeneratedAttribute]
private JsonSerializerSettings <SerializerSettings>k__BackingField;
    protected JsonSerializerSettings SerializerSettings { get; }
    [EditorBrowsableAttribute("1")]
public JsonSerializerSettings PublicSerializerSettings { get; }
    public JsonOutputFormatter(JsonSerializerSettings serializerSettings, ArrayPool`1<char> charPool);
    [CompilerGeneratedAttribute]
protected JsonSerializerSettings get_SerializerSettings();
    public JsonSerializerSettings get_PublicSerializerSettings();
    public void WriteObject(TextWriter writer, object value);
    protected virtual JsonWriter CreateJsonWriter(TextWriter writer);
    protected virtual JsonSerializer CreateJsonSerializer();
    [AsyncStateMachineAttribute("Microsoft.AspNetCore.Mvc.Formatters.JsonOutputFormatter/<WriteResponseBodyAsync>d__11")]
public virtual Task WriteResponseBodyAsync(OutputFormatterWriteContext context, Encoding selectedEncoding);
    private static JsonSerializerSettings ShallowCopy(JsonSerializerSettings settings);
}
public class Microsoft.AspNetCore.Mvc.Formatters.JsonPatchInputFormatter : JsonInputFormatter {
    public InputFormatterExceptionPolicy ExceptionPolicy { get; }
    [ObsoleteAttribute("This constructor is obsolete and will be removed in a future version.")]
public JsonPatchInputFormatter(ILogger logger, JsonSerializerSettings serializerSettings, ArrayPool`1<char> charPool, ObjectPoolProvider objectPoolProvider);
    [ObsoleteAttribute("This constructor is obsolete and will be removed in a future version.")]
public JsonPatchInputFormatter(ILogger logger, JsonSerializerSettings serializerSettings, ArrayPool`1<char> charPool, ObjectPoolProvider objectPoolProvider, bool suppressInputFormatterBuffering);
    [ObsoleteAttribute("This constructor is obsolete and will be removed in a future version.")]
public JsonPatchInputFormatter(ILogger logger, JsonSerializerSettings serializerSettings, ArrayPool`1<char> charPool, ObjectPoolProvider objectPoolProvider, bool suppressInputFormatterBuffering, bool allowInputFormatterExceptionMessages);
    public JsonPatchInputFormatter(ILogger logger, JsonSerializerSettings serializerSettings, ArrayPool`1<char> charPool, ObjectPoolProvider objectPoolProvider, MvcOptions options, MvcJsonOptions jsonOptions);
    public virtual InputFormatterExceptionPolicy get_ExceptionPolicy();
    [AsyncStateMachineAttribute("Microsoft.AspNetCore.Mvc.Formatters.JsonPatchInputFormatter/<ReadRequestBodyAsync>d__6")]
public virtual Task`1<InputFormatterResult> ReadRequestBodyAsync(InputFormatterContext context, Encoding encoding);
    public virtual bool CanRead(InputFormatterContext context);
    [CompilerGeneratedAttribute]
[DebuggerHiddenAttribute]
private Task`1<InputFormatterResult> <>n__0(InputFormatterContext context, Encoding encoding);
}
public static class Microsoft.AspNetCore.Mvc.Formatters.JsonSerializerSettingsProvider : object {
    private static int DefaultMaxDepth;
    private static DefaultContractResolver SharedContractResolver;
    private static JsonSerializerSettingsProvider();
    public static JsonSerializerSettings CreateSerializerSettings();
}
[ExtensionAttribute]
public static class Microsoft.AspNetCore.Mvc.JsonPatchExtensions : object {
    [ExtensionAttribute]
public static void ApplyTo(JsonPatchDocument`1<T> patchDoc, T objectToApplyTo, ModelStateDictionary modelState);
    [ExtensionAttribute]
public static void ApplyTo(JsonPatchDocument`1<T> patchDoc, T objectToApplyTo, ModelStateDictionary modelState, string prefix);
}
public class Microsoft.AspNetCore.Mvc.JsonResult : ActionResult {
    [CompilerGeneratedAttribute]
private string <ContentType>k__BackingField;
    [CompilerGeneratedAttribute]
private JsonSerializerSettings <SerializerSettings>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<int> <StatusCode>k__BackingField;
    [CompilerGeneratedAttribute]
private object <Value>k__BackingField;
    public string ContentType { get; public set; }
    public JsonSerializerSettings SerializerSettings { get; public set; }
    public Nullable`1<int> StatusCode { get; public set; }
    public object Value { get; public set; }
    public JsonResult(object value);
    public JsonResult(object value, JsonSerializerSettings serializerSettings);
    [CompilerGeneratedAttribute]
public string get_ContentType();
    [CompilerGeneratedAttribute]
public void set_ContentType(string value);
    [CompilerGeneratedAttribute]
public JsonSerializerSettings get_SerializerSettings();
    [CompilerGeneratedAttribute]
public void set_SerializerSettings(JsonSerializerSettings value);
    [CompilerGeneratedAttribute]
public Nullable`1<int> get_StatusCode();
    [CompilerGeneratedAttribute]
public void set_StatusCode(Nullable`1<int> value);
    [CompilerGeneratedAttribute]
public object get_Value();
    [CompilerGeneratedAttribute]
public void set_Value(object value);
    public virtual Task ExecuteResultAsync(ActionContext context);
}
public class Microsoft.AspNetCore.Mvc.MvcJsonOptions : object {
    private CompatibilitySwitch`1<bool> _allowInputFormatterExceptionMessages;
    private ICompatibilitySwitch[] _switches;
    [CompilerGeneratedAttribute]
private JsonSerializerSettings <SerializerSettings>k__BackingField;
    public bool AllowInputFormatterExceptionMessages { get; public set; }
    public JsonSerializerSettings SerializerSettings { get; }
    public bool get_AllowInputFormatterExceptionMessages();
    public void set_AllowInputFormatterExceptionMessages(bool value);
    [CompilerGeneratedAttribute]
public JsonSerializerSettings get_SerializerSettings();
    private sealed virtual override IEnumerator`1<ICompatibilitySwitch> System.Collections.Generic.IEnumerable<Microsoft.AspNetCore.Mvc.Infrastructure.ICompatibilitySwitch>.GetEnumerator();
    private sealed virtual override IEnumerator System.Collections.IEnumerable.GetEnumerator();
}
internal class Microsoft.AspNetCore.Mvc.MvcJsonOptionsConfigureCompatibilityOptions : ConfigureCompatibilityOptions`1<MvcJsonOptions> {
    protected IReadOnlyDictionary`2<string, object> DefaultValues { get; }
    public MvcJsonOptionsConfigureCompatibilityOptions(ILoggerFactory loggerFactory, IOptions`1<MvcCompatibilityOptions> compatibilityOptions);
    protected virtual IReadOnlyDictionary`2<string, object> get_DefaultValues();
}
[ExtensionAttribute]
public static class Microsoft.Extensions.DependencyInjection.MvcJsonMvcBuilderExtensions : object {
    [ExtensionAttribute]
public static IMvcBuilder AddJsonOptions(IMvcBuilder builder, Action`1<MvcJsonOptions> setupAction);
}
[ExtensionAttribute]
public static class Microsoft.Extensions.DependencyInjection.MvcJsonMvcCoreBuilderExtensions : object {
    [ExtensionAttribute]
public static IMvcCoreBuilder AddJsonFormatters(IMvcCoreBuilder builder);
    [ExtensionAttribute]
public static IMvcCoreBuilder AddJsonFormatters(IMvcCoreBuilder builder, Action`1<JsonSerializerSettings> setupAction);
    [ExtensionAttribute]
public static IMvcCoreBuilder AddJsonOptions(IMvcCoreBuilder builder, Action`1<MvcJsonOptions> setupAction);
    internal static void AddJsonFormatterServices(IServiceCollection services);
}
internal static class Microsoft.Extensions.Internal.ClosedGenericMatcher : object {
    public static Type ExtractGenericInterface(Type queryType, Type interfaceType);
    private static bool IsGenericInstantiation(Type candidate, Type interfaceType);
    private static Type GetGenericInstantiation(Type queryType, Type interfaceType);
}
