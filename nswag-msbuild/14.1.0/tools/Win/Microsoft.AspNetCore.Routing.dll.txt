[ExtensionAttribute]
public static class Microsoft.AspNetCore.Builder.MapRouteRouteBuilderExtensions : object {
    [ExtensionAttribute]
public static IRouteBuilder MapRoute(IRouteBuilder routeBuilder, string name, string template);
    [ExtensionAttribute]
public static IRouteBuilder MapRoute(IRouteBuilder routeBuilder, string name, string template, object defaults);
    [ExtensionAttribute]
public static IRouteBuilder MapRoute(IRouteBuilder routeBuilder, string name, string template, object defaults, object constraints);
    [ExtensionAttribute]
public static IRouteBuilder MapRoute(IRouteBuilder routeBuilder, string name, string template, object defaults, object constraints, object dataTokens);
}
public class Microsoft.AspNetCore.Builder.RouterMiddleware : object {
    private ILogger _logger;
    private RequestDelegate _next;
    private IRouter _router;
    public RouterMiddleware(RequestDelegate next, ILoggerFactory loggerFactory, IRouter router);
    [AsyncStateMachineAttribute("Microsoft.AspNetCore.Builder.RouterMiddleware/<Invoke>d__4")]
public Task Invoke(HttpContext httpContext);
}
[ExtensionAttribute]
public static class Microsoft.AspNetCore.Builder.RoutingBuilderExtensions : object {
    [ExtensionAttribute]
public static IApplicationBuilder UseRouter(IApplicationBuilder builder, IRouter router);
    [ExtensionAttribute]
public static IApplicationBuilder UseRouter(IApplicationBuilder builder, Action`1<IRouteBuilder> action);
}
public class Microsoft.AspNetCore.Routing.Constraints.AlphaRouteConstraint : RegexRouteConstraint {
}
public class Microsoft.AspNetCore.Routing.Constraints.BoolRouteConstraint : object {
    public sealed virtual bool Match(HttpContext httpContext, IRouter route, string routeKey, RouteValueDictionary values, RouteDirection routeDirection);
}
public class Microsoft.AspNetCore.Routing.Constraints.CompositeRouteConstraint : object {
    [CompilerGeneratedAttribute]
private IEnumerable`1<IRouteConstraint> <Constraints>k__BackingField;
    public IEnumerable`1<IRouteConstraint> Constraints { get; private set; }
    public CompositeRouteConstraint(IEnumerable`1<IRouteConstraint> constraints);
    [CompilerGeneratedAttribute]
public IEnumerable`1<IRouteConstraint> get_Constraints();
    [CompilerGeneratedAttribute]
private void set_Constraints(IEnumerable`1<IRouteConstraint> value);
    public sealed virtual bool Match(HttpContext httpContext, IRouter route, string routeKey, RouteValueDictionary values, RouteDirection routeDirection);
}
public class Microsoft.AspNetCore.Routing.Constraints.DateTimeRouteConstraint : object {
    public sealed virtual bool Match(HttpContext httpContext, IRouter route, string routeKey, RouteValueDictionary values, RouteDirection routeDirection);
}
public class Microsoft.AspNetCore.Routing.Constraints.DecimalRouteConstraint : object {
    public sealed virtual bool Match(HttpContext httpContext, IRouter route, string routeKey, RouteValueDictionary values, RouteDirection routeDirection);
}
public class Microsoft.AspNetCore.Routing.Constraints.DoubleRouteConstraint : object {
    public sealed virtual bool Match(HttpContext httpContext, IRouter route, string routeKey, RouteValueDictionary values, RouteDirection routeDirection);
}
public class Microsoft.AspNetCore.Routing.Constraints.FloatRouteConstraint : object {
    public sealed virtual bool Match(HttpContext httpContext, IRouter route, string routeKey, RouteValueDictionary values, RouteDirection routeDirection);
}
public class Microsoft.AspNetCore.Routing.Constraints.GuidRouteConstraint : object {
    public sealed virtual bool Match(HttpContext httpContext, IRouter route, string routeKey, RouteValueDictionary values, RouteDirection routeDirection);
}
public class Microsoft.AspNetCore.Routing.Constraints.HttpMethodRouteConstraint : object {
    [CompilerGeneratedAttribute]
private IList`1<string> <AllowedMethods>k__BackingField;
    public IList`1<string> AllowedMethods { get; }
    public HttpMethodRouteConstraint(String[] allowedMethods);
    [CompilerGeneratedAttribute]
public IList`1<string> get_AllowedMethods();
    public virtual bool Match(HttpContext httpContext, IRouter route, string routeKey, RouteValueDictionary values, RouteDirection routeDirection);
}
public class Microsoft.AspNetCore.Routing.Constraints.IntRouteConstraint : object {
    public sealed virtual bool Match(HttpContext httpContext, IRouter route, string routeKey, RouteValueDictionary values, RouteDirection routeDirection);
}
public class Microsoft.AspNetCore.Routing.Constraints.LengthRouteConstraint : object {
    [CompilerGeneratedAttribute]
private int <MinLength>k__BackingField;
    [CompilerGeneratedAttribute]
private int <MaxLength>k__BackingField;
    public int MinLength { get; }
    public int MaxLength { get; }
    public LengthRouteConstraint(int length);
    public LengthRouteConstraint(int minLength, int maxLength);
    [CompilerGeneratedAttribute]
public int get_MinLength();
    [CompilerGeneratedAttribute]
public int get_MaxLength();
    public sealed virtual bool Match(HttpContext httpContext, IRouter route, string routeKey, RouteValueDictionary values, RouteDirection routeDirection);
}
public class Microsoft.AspNetCore.Routing.Constraints.LongRouteConstraint : object {
    public sealed virtual bool Match(HttpContext httpContext, IRouter route, string routeKey, RouteValueDictionary values, RouteDirection routeDirection);
}
public class Microsoft.AspNetCore.Routing.Constraints.MaxLengthRouteConstraint : object {
    [CompilerGeneratedAttribute]
private int <MaxLength>k__BackingField;
    public int MaxLength { get; }
    public MaxLengthRouteConstraint(int maxLength);
    [CompilerGeneratedAttribute]
public int get_MaxLength();
    public sealed virtual bool Match(HttpContext httpContext, IRouter route, string routeKey, RouteValueDictionary values, RouteDirection routeDirection);
}
public class Microsoft.AspNetCore.Routing.Constraints.MaxRouteConstraint : object {
    [CompilerGeneratedAttribute]
private long <Max>k__BackingField;
    public long Max { get; private set; }
    public MaxRouteConstraint(long max);
    [CompilerGeneratedAttribute]
public long get_Max();
    [CompilerGeneratedAttribute]
private void set_Max(long value);
    public sealed virtual bool Match(HttpContext httpContext, IRouter route, string routeKey, RouteValueDictionary values, RouteDirection routeDirection);
}
public class Microsoft.AspNetCore.Routing.Constraints.MinLengthRouteConstraint : object {
    [CompilerGeneratedAttribute]
private int <MinLength>k__BackingField;
    public int MinLength { get; private set; }
    public MinLengthRouteConstraint(int minLength);
    [CompilerGeneratedAttribute]
public int get_MinLength();
    [CompilerGeneratedAttribute]
private void set_MinLength(int value);
    public sealed virtual bool Match(HttpContext httpContext, IRouter route, string routeKey, RouteValueDictionary values, RouteDirection routeDirection);
}
public class Microsoft.AspNetCore.Routing.Constraints.MinRouteConstraint : object {
    [CompilerGeneratedAttribute]
private long <Min>k__BackingField;
    public long Min { get; }
    public MinRouteConstraint(long min);
    [CompilerGeneratedAttribute]
public long get_Min();
    public sealed virtual bool Match(HttpContext httpContext, IRouter route, string routeKey, RouteValueDictionary values, RouteDirection routeDirection);
}
public class Microsoft.AspNetCore.Routing.Constraints.OptionalRouteConstraint : object {
    [CompilerGeneratedAttribute]
private IRouteConstraint <InnerConstraint>k__BackingField;
    public IRouteConstraint InnerConstraint { get; }
    public OptionalRouteConstraint(IRouteConstraint innerConstraint);
    [CompilerGeneratedAttribute]
public IRouteConstraint get_InnerConstraint();
    public sealed virtual bool Match(HttpContext httpContext, IRouter route, string routeKey, RouteValueDictionary values, RouteDirection routeDirection);
}
public class Microsoft.AspNetCore.Routing.Constraints.RangeRouteConstraint : object {
    [CompilerGeneratedAttribute]
private long <Min>k__BackingField;
    [CompilerGeneratedAttribute]
private long <Max>k__BackingField;
    public long Min { get; private set; }
    public long Max { get; private set; }
    public RangeRouteConstraint(long min, long max);
    [CompilerGeneratedAttribute]
public long get_Min();
    [CompilerGeneratedAttribute]
private void set_Min(long value);
    [CompilerGeneratedAttribute]
public long get_Max();
    [CompilerGeneratedAttribute]
private void set_Max(long value);
    public sealed virtual bool Match(HttpContext httpContext, IRouter route, string routeKey, RouteValueDictionary values, RouteDirection routeDirection);
}
public class Microsoft.AspNetCore.Routing.Constraints.RegexInlineRouteConstraint : RegexRouteConstraint {
    public RegexInlineRouteConstraint(string regexPattern);
}
public class Microsoft.AspNetCore.Routing.Constraints.RegexRouteConstraint : object {
    private static TimeSpan RegexMatchTimeout;
    [CompilerGeneratedAttribute]
private Regex <Constraint>k__BackingField;
    public Regex Constraint { get; private set; }
    public RegexRouteConstraint(Regex regex);
    public RegexRouteConstraint(string regexPattern);
    private static RegexRouteConstraint();
    [CompilerGeneratedAttribute]
public Regex get_Constraint();
    [CompilerGeneratedAttribute]
private void set_Constraint(Regex value);
    public sealed virtual bool Match(HttpContext httpContext, IRouter route, string routeKey, RouteValueDictionary values, RouteDirection routeDirection);
}
public class Microsoft.AspNetCore.Routing.Constraints.RequiredRouteConstraint : object {
    public sealed virtual bool Match(HttpContext httpContext, IRouter route, string routeKey, RouteValueDictionary values, RouteDirection routeDirection);
}
public class Microsoft.AspNetCore.Routing.Constraints.StringRouteConstraint : object {
    private string _value;
    public StringRouteConstraint(string value);
    public sealed virtual bool Match(HttpContext httpContext, IRouter route, string routeKey, RouteValueDictionary values, RouteDirection routeDirection);
}
internal class Microsoft.AspNetCore.Routing.DecisionTree.DecisionCriterion`1 : object {
    [CompilerGeneratedAttribute]
private string <Key>k__BackingField;
    [CompilerGeneratedAttribute]
private Dictionary`2<object, DecisionTreeNode`1<TItem>> <Branches>k__BackingField;
    public string Key { get; public set; }
    public Dictionary`2<object, DecisionTreeNode`1<TItem>> Branches { get; public set; }
    [CompilerGeneratedAttribute]
public string get_Key();
    [CompilerGeneratedAttribute]
public void set_Key(string value);
    [CompilerGeneratedAttribute]
public Dictionary`2<object, DecisionTreeNode`1<TItem>> get_Branches();
    [CompilerGeneratedAttribute]
public void set_Branches(Dictionary`2<object, DecisionTreeNode`1<TItem>> value);
}
internal class Microsoft.AspNetCore.Routing.DecisionTree.DecisionCriterionValue : ValueType {
    private object _value;
    public object Value { get; }
    public DecisionCriterionValue(object value);
    public object get_Value();
}
internal class Microsoft.AspNetCore.Routing.DecisionTree.DecisionCriterionValueEqualityComparer : object {
    [CompilerGeneratedAttribute]
private IEqualityComparer`1<object> <InnerComparer>k__BackingField;
    public IEqualityComparer`1<object> InnerComparer { get; private set; }
    public DecisionCriterionValueEqualityComparer(IEqualityComparer`1<object> innerComparer);
    [CompilerGeneratedAttribute]
public IEqualityComparer`1<object> get_InnerComparer();
    [CompilerGeneratedAttribute]
private void set_InnerComparer(IEqualityComparer`1<object> value);
    public sealed virtual bool Equals(DecisionCriterionValue x, DecisionCriterionValue y);
    public sealed virtual int GetHashCode(DecisionCriterionValue obj);
}
internal static class Microsoft.AspNetCore.Routing.DecisionTree.DecisionTreeBuilder`1 : object {
    public static DecisionTreeNode`1<TItem> GenerateTree(IReadOnlyList`1<TItem> items, IClassifier`1<TItem> classifier);
    private static DecisionTreeNode`1<TItem> GenerateNode(TreeBuilderContext<TItem> context, DecisionCriterionValueEqualityComparer comparer, IList`1<ItemDescriptor`1<TItem>> items);
}
internal class Microsoft.AspNetCore.Routing.DecisionTree.DecisionTreeNode`1 : object {
    [CompilerGeneratedAttribute]
private IList`1<TItem> <Matches>k__BackingField;
    [CompilerGeneratedAttribute]
private IList`1<DecisionCriterion`1<TItem>> <Criteria>k__BackingField;
    public IList`1<TItem> Matches { get; public set; }
    public IList`1<DecisionCriterion`1<TItem>> Criteria { get; public set; }
    [CompilerGeneratedAttribute]
public IList`1<TItem> get_Matches();
    [CompilerGeneratedAttribute]
public void set_Matches(IList`1<TItem> value);
    [CompilerGeneratedAttribute]
public IList`1<DecisionCriterion`1<TItem>> get_Criteria();
    [CompilerGeneratedAttribute]
public void set_Criteria(IList`1<DecisionCriterion`1<TItem>> value);
}
internal interface Microsoft.AspNetCore.Routing.DecisionTree.IClassifier`1 {
    public IEqualityComparer`1<object> ValueComparer { get; }
    public abstract virtual IDictionary`2<string, DecisionCriterionValue> GetCriteria(TItem item);
    public abstract virtual IEqualityComparer`1<object> get_ValueComparer();
}
internal class Microsoft.AspNetCore.Routing.DecisionTree.ItemDescriptor`1 : object {
    [CompilerGeneratedAttribute]
private IDictionary`2<string, DecisionCriterionValue> <Criteria>k__BackingField;
    [CompilerGeneratedAttribute]
private int <Index>k__BackingField;
    [CompilerGeneratedAttribute]
private TItem <Item>k__BackingField;
    public IDictionary`2<string, DecisionCriterionValue> Criteria { get; public set; }
    public int Index { get; public set; }
    public TItem Item { get; public set; }
    [CompilerGeneratedAttribute]
public IDictionary`2<string, DecisionCriterionValue> get_Criteria();
    [CompilerGeneratedAttribute]
public void set_Criteria(IDictionary`2<string, DecisionCriterionValue> value);
    [CompilerGeneratedAttribute]
public int get_Index();
    [CompilerGeneratedAttribute]
public void set_Index(int value);
    [CompilerGeneratedAttribute]
public TItem get_Item();
    [CompilerGeneratedAttribute]
public void set_Item(TItem value);
}
public class Microsoft.AspNetCore.Routing.DefaultInlineConstraintResolver : object {
    private IDictionary`2<string, Type> _inlineConstraintMap;
    public DefaultInlineConstraintResolver(IOptions`1<RouteOptions> routeOptions);
    public virtual IRouteConstraint ResolveConstraint(string inlineConstraint);
    private static IRouteConstraint CreateConstraint(Type constraintType, string argumentString);
    private static Object[] ConvertArguments(ParameterInfo[] parameterInfos, String[] arguments);
}
public interface Microsoft.AspNetCore.Routing.IInlineConstraintResolver {
    public abstract virtual IRouteConstraint ResolveConstraint(string inlineConstraint);
}
public interface Microsoft.AspNetCore.Routing.INamedRouter {
    public string Name { get; }
    public abstract virtual string get_Name();
}
public static class Microsoft.AspNetCore.Routing.InlineRouteParameterParser : object {
    public static TemplatePart ParseRouteParameter(string routeParameter);
    private static ConstraintParseResults ParseConstraints(string routeParameter, int currentIndex, int endIndex);
}
public class Microsoft.AspNetCore.Routing.Internal.BufferValue : ValueType {
    [CompilerGeneratedAttribute]
private bool <RequiresEncoding>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Value>k__BackingField;
    public bool RequiresEncoding { get; }
    public string Value { get; }
    public BufferValue(string value, bool requiresEncoding);
    [CompilerGeneratedAttribute]
public bool get_RequiresEncoding();
    [CompilerGeneratedAttribute]
public string get_Value();
}
public class Microsoft.AspNetCore.Routing.Internal.LinkGenerationDecisionTree : object {
    private DecisionTreeNode`1<OutboundMatch> _root;
    public LinkGenerationDecisionTree(IReadOnlyList`1<OutboundMatch> entries);
    public IList`1<OutboundMatchResult> GetMatches(VirtualPathContext context);
    private void Walk(List`1<OutboundMatchResult> results, VirtualPathContext context, DecisionTreeNode`1<OutboundMatch> node, bool isFallbackPath);
}
public class Microsoft.AspNetCore.Routing.Internal.OutboundMatchResult : ValueType {
    [CompilerGeneratedAttribute]
private OutboundMatch <Match>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsFallbackMatch>k__BackingField;
    public OutboundMatch Match { get; }
    public bool IsFallbackMatch { get; }
    public OutboundMatchResult(OutboundMatch match, bool isFallbackMatch);
    [CompilerGeneratedAttribute]
public OutboundMatch get_Match();
    [CompilerGeneratedAttribute]
public bool get_IsFallbackMatch();
}
[DefaultMemberAttribute("Item")]
public class Microsoft.AspNetCore.Routing.Internal.PathTokenizer : ValueType {
    private string _path;
    private int _count;
    public int Count { get; }
    public StringSegment Item { get; }
    public PathTokenizer(PathString path);
    public sealed virtual int get_Count();
    public sealed virtual StringSegment get_Item(int index);
    public Enumerator GetEnumerator();
    private sealed virtual override IEnumerator`1<StringSegment> System.Collections.Generic.IEnumerable<Microsoft.Extensions.Primitives.StringSegment>.GetEnumerator();
    private sealed virtual override IEnumerator System.Collections.IEnumerable.GetEnumerator();
}
public class Microsoft.AspNetCore.Routing.Internal.RoutingMarkerService : object {
}
public enum Microsoft.AspNetCore.Routing.Internal.SegmentState : Enum {
    public int value__;
    public static SegmentState Beginning;
    public static SegmentState Inside;
}
public class Microsoft.AspNetCore.Routing.Internal.UriBuilderContextPooledObjectPolicy : object {
    public sealed virtual UriBuildingContext Create();
    public sealed virtual bool Return(UriBuildingContext obj);
}
[DebuggerDisplayAttribute("{DebuggerToString(),nq}")]
public class Microsoft.AspNetCore.Routing.Internal.UriBuildingContext : object {
    private StringBuilder _uri;
    private List`1<BufferValue> _buffer;
    private UrlEncoder _urlEncoder;
    private bool _hasEmptySegment;
    private int _lastValueOffset;
    [CompilerGeneratedAttribute]
private SegmentState <BufferState>k__BackingField;
    [CompilerGeneratedAttribute]
private SegmentState <UriState>k__BackingField;
    [CompilerGeneratedAttribute]
private TextWriter <Writer>k__BackingField;
    public SegmentState BufferState { get; private set; }
    public SegmentState UriState { get; private set; }
    public TextWriter Writer { get; }
    public UriBuildingContext(UrlEncoder urlEncoder);
    [CompilerGeneratedAttribute]
public SegmentState get_BufferState();
    [CompilerGeneratedAttribute]
private void set_BufferState(SegmentState value);
    [CompilerGeneratedAttribute]
public SegmentState get_UriState();
    [CompilerGeneratedAttribute]
private void set_UriState(SegmentState value);
    [CompilerGeneratedAttribute]
public TextWriter get_Writer();
    public bool Accept(string value);
    public void Remove(string literal);
    public bool Buffer(string value);
    public void EndSegment();
    public void Clear();
    public virtual string ToString();
    private string DebuggerToString();
}
public interface Microsoft.AspNetCore.Routing.IRouteBuilder {
    public IApplicationBuilder ApplicationBuilder { get; }
    public IRouter DefaultHandler { get; public set; }
    public IServiceProvider ServiceProvider { get; }
    public IList`1<IRouter> Routes { get; }
    public abstract virtual IApplicationBuilder get_ApplicationBuilder();
    public abstract virtual IRouter get_DefaultHandler();
    public abstract virtual void set_DefaultHandler(IRouter value);
    public abstract virtual IServiceProvider get_ServiceProvider();
    public abstract virtual IList`1<IRouter> get_Routes();
    public abstract virtual IRouter Build();
}
public interface Microsoft.AspNetCore.Routing.IRouteCollection {
    public abstract virtual void Add(IRouter router);
}
[ExtensionAttribute]
internal static class Microsoft.AspNetCore.Routing.Logging.RouteConstraintMatcherExtensions : object {
    private static Action`5<ILogger, object, string, IRouteConstraint, Exception> _routeValueDoesNotMatchConstraint;
    private static RouteConstraintMatcherExtensions();
    [ExtensionAttribute]
public static void RouteValueDoesNotMatchConstraint(ILogger logger, object routeValue, string routeKey, IRouteConstraint routeConstraint);
}
[ExtensionAttribute]
internal static class Microsoft.AspNetCore.Routing.Logging.RouterMiddlewareLoggerExtensions : object {
    private static Action`2<ILogger, Exception> _requestDidNotMatchRoutes;
    private static RouterMiddlewareLoggerExtensions();
    [ExtensionAttribute]
public static void RequestDidNotMatchRoutes(ILogger logger);
}
[ExtensionAttribute]
internal static class Microsoft.AspNetCore.Routing.Logging.TreeRouterLoggerExtensions : object {
    private static Action`4<ILogger, string, string, Exception> _matchedRoute;
    private static TreeRouterLoggerExtensions();
    [ExtensionAttribute]
public static void MatchedRoute(ILogger logger, string routeName, string routeTemplate);
}
[ExtensionAttribute]
public static class Microsoft.AspNetCore.Routing.RequestDelegateRouteBuilderExtensions : object {
    [ExtensionAttribute]
public static IRouteBuilder MapRoute(IRouteBuilder builder, string template, RequestDelegate handler);
    [ExtensionAttribute]
public static IRouteBuilder MapMiddlewareRoute(IRouteBuilder builder, string template, Action`1<IApplicationBuilder> action);
    [ExtensionAttribute]
public static IRouteBuilder MapDelete(IRouteBuilder builder, string template, RequestDelegate handler);
    [ExtensionAttribute]
public static IRouteBuilder MapMiddlewareDelete(IRouteBuilder builder, string template, Action`1<IApplicationBuilder> action);
    [ExtensionAttribute]
public static IRouteBuilder MapDelete(IRouteBuilder builder, string template, Func`4<HttpRequest, HttpResponse, RouteData, Task> handler);
    [ExtensionAttribute]
public static IRouteBuilder MapGet(IRouteBuilder builder, string template, RequestDelegate handler);
    [ExtensionAttribute]
public static IRouteBuilder MapMiddlewareGet(IRouteBuilder builder, string template, Action`1<IApplicationBuilder> action);
    [ExtensionAttribute]
public static IRouteBuilder MapGet(IRouteBuilder builder, string template, Func`4<HttpRequest, HttpResponse, RouteData, Task> handler);
    [ExtensionAttribute]
public static IRouteBuilder MapPost(IRouteBuilder builder, string template, RequestDelegate handler);
    [ExtensionAttribute]
public static IRouteBuilder MapMiddlewarePost(IRouteBuilder builder, string template, Action`1<IApplicationBuilder> action);
    [ExtensionAttribute]
public static IRouteBuilder MapPost(IRouteBuilder builder, string template, Func`4<HttpRequest, HttpResponse, RouteData, Task> handler);
    [ExtensionAttribute]
public static IRouteBuilder MapPut(IRouteBuilder builder, string template, RequestDelegate handler);
    [ExtensionAttribute]
public static IRouteBuilder MapMiddlewarePut(IRouteBuilder builder, string template, Action`1<IApplicationBuilder> action);
    [ExtensionAttribute]
public static IRouteBuilder MapPut(IRouteBuilder builder, string template, Func`4<HttpRequest, HttpResponse, RouteData, Task> handler);
    [ExtensionAttribute]
public static IRouteBuilder MapVerb(IRouteBuilder builder, string verb, string template, Func`4<HttpRequest, HttpResponse, RouteData, Task> handler);
    [ExtensionAttribute]
public static IRouteBuilder MapVerb(IRouteBuilder builder, string verb, string template, RequestDelegate handler);
    [ExtensionAttribute]
public static IRouteBuilder MapMiddlewareVerb(IRouteBuilder builder, string verb, string template, Action`1<IApplicationBuilder> action);
    private static IInlineConstraintResolver GetConstraintResolver(IRouteBuilder builder);
}
internal static class Microsoft.AspNetCore.Routing.Resources : object {
    private static ResourceManager _resourceManager;
    internal static string ArgumentMustBeGreaterThanOrEqualTo { get; }
    internal static string RangeConstraint_MinShouldBeLessThanOrEqualToMax { get; }
    internal static string PropertyOfTypeCannotBeNull { get; }
    internal static string NamedRoutes_AmbiguousRoutesFound { get; }
    internal static string DefaultHandler_MustBeSet { get; }
    internal static string DefaultInlineConstraintResolver_AmbiguousCtors { get; }
    internal static string DefaultInlineConstraintResolver_CouldNotFindCtor { get; }
    internal static string DefaultInlineConstraintResolver_TypeNotConstraint { get; }
    internal static string TemplateRoute_CannotHaveCatchAllInMultiSegment { get; }
    internal static string TemplateRoute_CannotHaveDefaultValueSpecifiedInlineAndExplicitly { get; }
    internal static string TemplateRoute_CannotHaveConsecutiveParameters { get; }
    internal static string TemplateRoute_CannotHaveConsecutiveSeparators { get; }
    internal static string TemplateRoute_CatchAllCannotBeOptional { get; }
    internal static string TemplateRoute_OptionalCannotHaveDefaultValue { get; }
    internal static string TemplateRoute_CatchAllMustBeLast { get; }
    internal static string TemplateRoute_InvalidLiteral { get; }
    internal static string TemplateRoute_InvalidParameterName { get; }
    internal static string TemplateRoute_InvalidRouteTemplate { get; }
    internal static string TemplateRoute_MismatchedParameter { get; }
    internal static string TemplateRoute_RepeatedParameter { get; }
    internal static string RouteConstraintBuilder_ValidationMustBeStringOrCustomConstraint { get; }
    internal static string RouteConstraintBuilder_CouldNotResolveConstraint { get; }
    internal static string TemplateRoute_UnescapedBrace { get; }
    internal static string TemplateRoute_OptionalParameterCanbBePrecededByPeriod { get; }
    internal static string TemplateRoute_OptionalParameterHasTobeTheLast { get; }
    internal static string AttributeRoute_DifferentLinkGenerationEntries_SameName { get; }
    internal static string UnableToFindServices { get; }
    internal static string TemplateRoute_Exception { get; }
    private static Resources();
    internal static string get_ArgumentMustBeGreaterThanOrEqualTo();
    internal static string FormatArgumentMustBeGreaterThanOrEqualTo(object p0);
    internal static string get_RangeConstraint_MinShouldBeLessThanOrEqualToMax();
    internal static string FormatRangeConstraint_MinShouldBeLessThanOrEqualToMax(object p0, object p1);
    internal static string get_PropertyOfTypeCannotBeNull();
    internal static string FormatPropertyOfTypeCannotBeNull(object p0, object p1);
    internal static string get_NamedRoutes_AmbiguousRoutesFound();
    internal static string FormatNamedRoutes_AmbiguousRoutesFound(object p0);
    internal static string get_DefaultHandler_MustBeSet();
    internal static string FormatDefaultHandler_MustBeSet(object p0);
    internal static string get_DefaultInlineConstraintResolver_AmbiguousCtors();
    internal static string FormatDefaultInlineConstraintResolver_AmbiguousCtors(object p0, object p1);
    internal static string get_DefaultInlineConstraintResolver_CouldNotFindCtor();
    internal static string FormatDefaultInlineConstraintResolver_CouldNotFindCtor(object p0, object p1);
    internal static string get_DefaultInlineConstraintResolver_TypeNotConstraint();
    internal static string FormatDefaultInlineConstraintResolver_TypeNotConstraint(object p0, object p1, object p2);
    internal static string get_TemplateRoute_CannotHaveCatchAllInMultiSegment();
    internal static string FormatTemplateRoute_CannotHaveCatchAllInMultiSegment();
    internal static string get_TemplateRoute_CannotHaveDefaultValueSpecifiedInlineAndExplicitly();
    internal static string FormatTemplateRoute_CannotHaveDefaultValueSpecifiedInlineAndExplicitly(object p0);
    internal static string get_TemplateRoute_CannotHaveConsecutiveParameters();
    internal static string FormatTemplateRoute_CannotHaveConsecutiveParameters();
    internal static string get_TemplateRoute_CannotHaveConsecutiveSeparators();
    internal static string FormatTemplateRoute_CannotHaveConsecutiveSeparators();
    internal static string get_TemplateRoute_CatchAllCannotBeOptional();
    internal static string FormatTemplateRoute_CatchAllCannotBeOptional();
    internal static string get_TemplateRoute_OptionalCannotHaveDefaultValue();
    internal static string FormatTemplateRoute_OptionalCannotHaveDefaultValue();
    internal static string get_TemplateRoute_CatchAllMustBeLast();
    internal static string FormatTemplateRoute_CatchAllMustBeLast();
    internal static string get_TemplateRoute_InvalidLiteral();
    internal static string FormatTemplateRoute_InvalidLiteral(object p0);
    internal static string get_TemplateRoute_InvalidParameterName();
    internal static string FormatTemplateRoute_InvalidParameterName(object p0);
    internal static string get_TemplateRoute_InvalidRouteTemplate();
    internal static string FormatTemplateRoute_InvalidRouteTemplate();
    internal static string get_TemplateRoute_MismatchedParameter();
    internal static string FormatTemplateRoute_MismatchedParameter();
    internal static string get_TemplateRoute_RepeatedParameter();
    internal static string FormatTemplateRoute_RepeatedParameter(object p0);
    internal static string get_RouteConstraintBuilder_ValidationMustBeStringOrCustomConstraint();
    internal static string FormatRouteConstraintBuilder_ValidationMustBeStringOrCustomConstraint(object p0, object p1, object p2, object p3);
    internal static string get_RouteConstraintBuilder_CouldNotResolveConstraint();
    internal static string FormatRouteConstraintBuilder_CouldNotResolveConstraint(object p0, object p1, object p2, object p3);
    internal static string get_TemplateRoute_UnescapedBrace();
    internal static string FormatTemplateRoute_UnescapedBrace();
    internal static string get_TemplateRoute_OptionalParameterCanbBePrecededByPeriod();
    internal static string FormatTemplateRoute_OptionalParameterCanbBePrecededByPeriod(object p0, object p1, object p2);
    internal static string get_TemplateRoute_OptionalParameterHasTobeTheLast();
    internal static string FormatTemplateRoute_OptionalParameterHasTobeTheLast(object p0, object p1, object p2);
    internal static string get_AttributeRoute_DifferentLinkGenerationEntries_SameName();
    internal static string FormatAttributeRoute_DifferentLinkGenerationEntries_SameName(object p0);
    internal static string get_UnableToFindServices();
    internal static string FormatUnableToFindServices(object p0, object p1, object p2);
    internal static string get_TemplateRoute_Exception();
    internal static string FormatTemplateRoute_Exception(object p0, object p1);
    private static string GetString(string name, String[] formatterNames);
}
public class Microsoft.AspNetCore.Routing.Route : RouteBase {
    private IRouter _target;
    public string RouteTemplate { get; }
    public Route(IRouter target, string routeTemplate, IInlineConstraintResolver inlineConstraintResolver);
    public Route(IRouter target, string routeTemplate, RouteValueDictionary defaults, IDictionary`2<string, object> constraints, RouteValueDictionary dataTokens, IInlineConstraintResolver inlineConstraintResolver);
    public Route(IRouter target, string routeName, string routeTemplate, RouteValueDictionary defaults, IDictionary`2<string, object> constraints, RouteValueDictionary dataTokens, IInlineConstraintResolver inlineConstraintResolver);
    public string get_RouteTemplate();
    protected virtual Task OnRouteMatched(RouteContext context);
    protected virtual VirtualPathData OnVirtualPathGenerated(VirtualPathContext context);
}
public abstract class Microsoft.AspNetCore.Routing.RouteBase : object {
    private TemplateMatcher _matcher;
    private TemplateBinder _binder;
    private ILogger _logger;
    private ILogger _constraintLogger;
    [CompilerGeneratedAttribute]
private IDictionary`2<string, IRouteConstraint> <Constraints>k__BackingField;
    [CompilerGeneratedAttribute]
private IInlineConstraintResolver <ConstraintResolver>k__BackingField;
    [CompilerGeneratedAttribute]
private RouteValueDictionary <DataTokens>k__BackingField;
    [CompilerGeneratedAttribute]
private RouteValueDictionary <Defaults>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    [CompilerGeneratedAttribute]
private RouteTemplate <ParsedTemplate>k__BackingField;
    public IDictionary`2<string, IRouteConstraint> Constraints { get; protected set; }
    protected IInlineConstraintResolver ConstraintResolver { get; protected set; }
    public RouteValueDictionary DataTokens { get; protected set; }
    public RouteValueDictionary Defaults { get; protected set; }
    public string Name { get; protected set; }
    public RouteTemplate ParsedTemplate { get; protected set; }
    public RouteBase(string template, string name, IInlineConstraintResolver constraintResolver, RouteValueDictionary defaults, IDictionary`2<string, object> constraints, RouteValueDictionary dataTokens);
    [CompilerGeneratedAttribute]
public virtual IDictionary`2<string, IRouteConstraint> get_Constraints();
    [CompilerGeneratedAttribute]
protected virtual void set_Constraints(IDictionary`2<string, IRouteConstraint> value);
    [CompilerGeneratedAttribute]
protected virtual IInlineConstraintResolver get_ConstraintResolver();
    [CompilerGeneratedAttribute]
protected virtual void set_ConstraintResolver(IInlineConstraintResolver value);
    [CompilerGeneratedAttribute]
public virtual RouteValueDictionary get_DataTokens();
    [CompilerGeneratedAttribute]
protected virtual void set_DataTokens(RouteValueDictionary value);
    [CompilerGeneratedAttribute]
public virtual RouteValueDictionary get_Defaults();
    [CompilerGeneratedAttribute]
protected virtual void set_Defaults(RouteValueDictionary value);
    [CompilerGeneratedAttribute]
public virtual string get_Name();
    [CompilerGeneratedAttribute]
protected virtual void set_Name(string value);
    [CompilerGeneratedAttribute]
public virtual RouteTemplate get_ParsedTemplate();
    [CompilerGeneratedAttribute]
protected virtual void set_ParsedTemplate(RouteTemplate value);
    protected abstract virtual Task OnRouteMatched(RouteContext context);
    protected abstract virtual VirtualPathData OnVirtualPathGenerated(VirtualPathContext context);
    public virtual Task RouteAsync(RouteContext context);
    public virtual VirtualPathData GetVirtualPath(VirtualPathContext context);
    protected static IDictionary`2<string, IRouteConstraint> GetConstraints(IInlineConstraintResolver inlineConstraintResolver, RouteTemplate parsedTemplate, IDictionary`2<string, object> constraints);
    protected static RouteValueDictionary GetDefaults(RouteTemplate parsedTemplate, RouteValueDictionary defaults);
    private static void MergeValues(RouteValueDictionary destination, RouteValueDictionary values);
    private void EnsureBinder(HttpContext context);
    private void EnsureLoggers(HttpContext context);
    private void EnsureMatcher();
    public virtual string ToString();
}
public class Microsoft.AspNetCore.Routing.RouteBuilder : object {
    [CompilerGeneratedAttribute]
private IApplicationBuilder <ApplicationBuilder>k__BackingField;
    [CompilerGeneratedAttribute]
private IRouter <DefaultHandler>k__BackingField;
    [CompilerGeneratedAttribute]
private IServiceProvider <ServiceProvider>k__BackingField;
    [CompilerGeneratedAttribute]
private IList`1<IRouter> <Routes>k__BackingField;
    public IApplicationBuilder ApplicationBuilder { get; }
    public IRouter DefaultHandler { get; public set; }
    public IServiceProvider ServiceProvider { get; }
    public IList`1<IRouter> Routes { get; }
    public RouteBuilder(IApplicationBuilder applicationBuilder);
    public RouteBuilder(IApplicationBuilder applicationBuilder, IRouter defaultHandler);
    [CompilerGeneratedAttribute]
public sealed virtual IApplicationBuilder get_ApplicationBuilder();
    [CompilerGeneratedAttribute]
public sealed virtual IRouter get_DefaultHandler();
    [CompilerGeneratedAttribute]
public sealed virtual void set_DefaultHandler(IRouter value);
    [CompilerGeneratedAttribute]
public sealed virtual IServiceProvider get_ServiceProvider();
    [CompilerGeneratedAttribute]
public sealed virtual IList`1<IRouter> get_Routes();
    public sealed virtual IRouter Build();
}
[DefaultMemberAttribute("Item")]
public class Microsoft.AspNetCore.Routing.RouteCollection : object {
    private static Char[] UrlQueryDelimiters;
    private List`1<IRouter> _routes;
    private List`1<IRouter> _unnamedRoutes;
    private Dictionary`2<string, INamedRouter> _namedRoutes;
    private RouteOptions _options;
    public IRouter Item { get; }
    public int Count { get; }
    private static RouteCollection();
    public IRouter get_Item(int index);
    public int get_Count();
    public sealed virtual void Add(IRouter router);
    [AsyncStateMachineAttribute("Microsoft.AspNetCore.Routing.RouteCollection/<RouteAsync>d__10")]
public virtual Task RouteAsync(RouteContext context);
    public virtual VirtualPathData GetVirtualPath(VirtualPathContext context);
    private VirtualPathData GetVirtualPath(VirtualPathContext context, List`1<IRouter> routes);
    private VirtualPathData NormalizeVirtualPath(VirtualPathData pathData);
    private void EnsureOptions(HttpContext context);
}
public class Microsoft.AspNetCore.Routing.RouteConstraintBuilder : object {
    private IInlineConstraintResolver _inlineConstraintResolver;
    private string _displayName;
    private Dictionary`2<string, List`1<IRouteConstraint>> _constraints;
    private HashSet`1<string> _optionalParameters;
    public RouteConstraintBuilder(IInlineConstraintResolver inlineConstraintResolver, string displayName);
    public IDictionary`2<string, IRouteConstraint> Build();
    public void AddConstraint(string key, object value);
    public void AddResolvedConstraint(string key, string constraintText);
    public void SetOptional(string key);
    private void Add(string key, IRouteConstraint constraint);
}
public static class Microsoft.AspNetCore.Routing.RouteConstraintMatcher : object {
    public static bool Match(IDictionary`2<string, IRouteConstraint> constraints, RouteValueDictionary routeValues, HttpContext httpContext, IRouter route, RouteDirection routeDirection, ILogger logger);
}
public class Microsoft.AspNetCore.Routing.RouteCreationException : Exception {
    public RouteCreationException(string message);
    public RouteCreationException(string message, Exception innerException);
}
public class Microsoft.AspNetCore.Routing.RouteHandler : object {
    private RequestDelegate _requestDelegate;
    public RouteHandler(RequestDelegate requestDelegate);
    public sealed virtual RequestDelegate GetRequestHandler(HttpContext httpContext, RouteData routeData);
    public sealed virtual VirtualPathData GetVirtualPath(VirtualPathContext context);
    public sealed virtual Task RouteAsync(RouteContext context);
}
public class Microsoft.AspNetCore.Routing.RouteOptions : object {
    [CompilerGeneratedAttribute]
private bool <LowercaseUrls>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <AppendTrailingSlash>k__BackingField;
    private IDictionary`2<string, Type> _constraintTypeMap;
    public bool LowercaseUrls { get; public set; }
    public bool AppendTrailingSlash { get; public set; }
    public IDictionary`2<string, Type> ConstraintMap { get; public set; }
    [CompilerGeneratedAttribute]
public bool get_LowercaseUrls();
    [CompilerGeneratedAttribute]
public void set_LowercaseUrls(bool value);
    [CompilerGeneratedAttribute]
public bool get_AppendTrailingSlash();
    [CompilerGeneratedAttribute]
public void set_AppendTrailingSlash(bool value);
    public IDictionary`2<string, Type> get_ConstraintMap();
    public void set_ConstraintMap(IDictionary`2<string, Type> value);
    private static IDictionary`2<string, Type> GetDefaultConstraintMap();
}
public class Microsoft.AspNetCore.Routing.RouteValueEqualityComparer : object {
    public sealed virtual bool Equals(object x, object y);
    public sealed virtual int GetHashCode(object obj);
}
public class Microsoft.AspNetCore.Routing.RoutingFeature : object {
    [CompilerGeneratedAttribute]
private RouteData <RouteData>k__BackingField;
    public RouteData RouteData { get; public set; }
    [CompilerGeneratedAttribute]
public sealed virtual RouteData get_RouteData();
    [CompilerGeneratedAttribute]
public sealed virtual void set_RouteData(RouteData value);
}
public class Microsoft.AspNetCore.Routing.Template.InlineConstraint : object {
    [CompilerGeneratedAttribute]
private string <Constraint>k__BackingField;
    public string Constraint { get; }
    public InlineConstraint(string constraint);
    [CompilerGeneratedAttribute]
public string get_Constraint();
}
public static class Microsoft.AspNetCore.Routing.Template.RoutePrecedence : object {
    public static decimal ComputeInbound(RouteTemplate template);
    public static decimal ComputeOutbound(RouteTemplate template);
    private static int ComputeOutboundPrecedenceDigit(TemplateSegment segment);
    private static int ComputeInboundPrecedenceDigit(TemplateSegment segment);
}
[DebuggerDisplayAttribute("{DebuggerToString()}")]
public class Microsoft.AspNetCore.Routing.Template.RouteTemplate : object {
    private static string SeparatorString;
    [CompilerGeneratedAttribute]
private string <TemplateText>k__BackingField;
    [CompilerGeneratedAttribute]
private IList`1<TemplatePart> <Parameters>k__BackingField;
    [CompilerGeneratedAttribute]
private IList`1<TemplateSegment> <Segments>k__BackingField;
    public string TemplateText { get; }
    public IList`1<TemplatePart> Parameters { get; }
    public IList`1<TemplateSegment> Segments { get; }
    public RouteTemplate(string template, List`1<TemplateSegment> segments);
    [CompilerGeneratedAttribute]
public string get_TemplateText();
    [CompilerGeneratedAttribute]
public IList`1<TemplatePart> get_Parameters();
    [CompilerGeneratedAttribute]
public IList`1<TemplateSegment> get_Segments();
    public TemplateSegment GetSegment(int index);
    private string DebuggerToString();
    public TemplatePart GetParameter(string name);
}
public class Microsoft.AspNetCore.Routing.Template.TemplateBinder : object {
    private UrlEncoder _urlEncoder;
    private ObjectPool`1<UriBuildingContext> _pool;
    private RouteValueDictionary _defaults;
    private RouteValueDictionary _filters;
    private RouteTemplate _template;
    public TemplateBinder(UrlEncoder urlEncoder, ObjectPool`1<UriBuildingContext> pool, RouteTemplate template, RouteValueDictionary defaults);
    public TemplateValuesResult GetValues(RouteValueDictionary ambientValues, RouteValueDictionary values);
    public string BindValues(RouteValueDictionary acceptedValues);
    private string BindValues(UriBuildingContext context, RouteValueDictionary acceptedValues);
    private bool AddParameterToContext(UriBuildingContext context, string key, object value, bool wroteFirst);
    private TemplatePart GetParameter(string name);
    public static bool RoutePartsEqual(object a, object b);
    private static bool IsRoutePartNonEmpty(object routePart);
}
public class Microsoft.AspNetCore.Routing.Template.TemplateMatcher : object {
    private static string SeparatorString;
    private static char SeparatorChar;
    private Boolean[] _hasDefaultValue;
    private Object[] _defaultValues;
    private static Char[] Delimiters;
    [CompilerGeneratedAttribute]
private RouteValueDictionary <Defaults>k__BackingField;
    [CompilerGeneratedAttribute]
private RouteTemplate <Template>k__BackingField;
    public RouteValueDictionary Defaults { get; }
    public RouteTemplate Template { get; }
    public TemplateMatcher(RouteTemplate template, RouteValueDictionary defaults);
    private static TemplateMatcher();
    [CompilerGeneratedAttribute]
public RouteValueDictionary get_Defaults();
    [CompilerGeneratedAttribute]
public RouteTemplate get_Template();
    public bool TryMatch(PathString path, RouteValueDictionary values);
    private bool MatchComplexSegment(TemplateSegment routeSegment, string requestSegment, IReadOnlyDictionary`2<string, object> defaults, RouteValueDictionary values);
    private bool MatchComplexSegmentCore(TemplateSegment routeSegment, string requestSegment, IReadOnlyDictionary`2<string, object> defaults, RouteValueDictionary values, int indexOfLastSegmentUsed);
}
public static class Microsoft.AspNetCore.Routing.Template.TemplateParser : object {
    private static char Separator;
    private static char OpenBrace;
    private static char CloseBrace;
    private static char EqualsSign;
    private static char QuestionMark;
    private static char Asterisk;
    private static string PeriodString;
    public static RouteTemplate Parse(string routeTemplate);
    private static string TrimPrefix(string routeTemplate);
    private static bool ParseSegment(TemplateParserContext context, List`1<TemplateSegment> segments);
    private static bool ParseParameter(TemplateParserContext context, TemplateSegment segment);
    private static bool ParseLiteral(TemplateParserContext context, TemplateSegment segment);
    private static bool IsAllValid(TemplateParserContext context, List`1<TemplateSegment> segments);
    private static bool IsSegmentValid(TemplateParserContext context, TemplateSegment segment);
    private static bool IsValidParameterName(TemplateParserContext context, string parameterName);
    private static bool IsValidLiteral(TemplateParserContext context, string literal);
    private static bool IsInvalidRouteTemplate(string routeTemplate);
}
[DebuggerDisplayAttribute("{DebuggerToString()}")]
public class Microsoft.AspNetCore.Routing.Template.TemplatePart : object {
    [CompilerGeneratedAttribute]
private bool <IsCatchAll>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsLiteral>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsParameter>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsOptional>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsOptionalSeperator>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Text>k__BackingField;
    [CompilerGeneratedAttribute]
private object <DefaultValue>k__BackingField;
    [CompilerGeneratedAttribute]
private IEnumerable`1<InlineConstraint> <InlineConstraints>k__BackingField;
    public bool IsCatchAll { get; private set; }
    public bool IsLiteral { get; private set; }
    public bool IsParameter { get; private set; }
    public bool IsOptional { get; private set; }
    public bool IsOptionalSeperator { get; public set; }
    public string Name { get; private set; }
    public string Text { get; private set; }
    public object DefaultValue { get; private set; }
    public IEnumerable`1<InlineConstraint> InlineConstraints { get; private set; }
    public static TemplatePart CreateLiteral(string text);
    public static TemplatePart CreateParameter(string name, bool isCatchAll, bool isOptional, object defaultValue, IEnumerable`1<InlineConstraint> inlineConstraints);
    [CompilerGeneratedAttribute]
public bool get_IsCatchAll();
    [CompilerGeneratedAttribute]
private void set_IsCatchAll(bool value);
    [CompilerGeneratedAttribute]
public bool get_IsLiteral();
    [CompilerGeneratedAttribute]
private void set_IsLiteral(bool value);
    [CompilerGeneratedAttribute]
public bool get_IsParameter();
    [CompilerGeneratedAttribute]
private void set_IsParameter(bool value);
    [CompilerGeneratedAttribute]
public bool get_IsOptional();
    [CompilerGeneratedAttribute]
private void set_IsOptional(bool value);
    [CompilerGeneratedAttribute]
public bool get_IsOptionalSeperator();
    [CompilerGeneratedAttribute]
public void set_IsOptionalSeperator(bool value);
    [CompilerGeneratedAttribute]
public string get_Name();
    [CompilerGeneratedAttribute]
private void set_Name(string value);
    [CompilerGeneratedAttribute]
public string get_Text();
    [CompilerGeneratedAttribute]
private void set_Text(string value);
    [CompilerGeneratedAttribute]
public object get_DefaultValue();
    [CompilerGeneratedAttribute]
private void set_DefaultValue(object value);
    [CompilerGeneratedAttribute]
public IEnumerable`1<InlineConstraint> get_InlineConstraints();
    [CompilerGeneratedAttribute]
private void set_InlineConstraints(IEnumerable`1<InlineConstraint> value);
    internal string DebuggerToString();
}
[DebuggerDisplayAttribute("{DebuggerToString()}")]
public class Microsoft.AspNetCore.Routing.Template.TemplateSegment : object {
    [CompilerGeneratedAttribute]
private List`1<TemplatePart> <Parts>k__BackingField;
    public bool IsSimple { get; }
    public List`1<TemplatePart> Parts { get; }
    public bool get_IsSimple();
    [CompilerGeneratedAttribute]
public List`1<TemplatePart> get_Parts();
    internal string DebuggerToString();
}
public class Microsoft.AspNetCore.Routing.Template.TemplateValuesResult : object {
    [CompilerGeneratedAttribute]
private RouteValueDictionary <AcceptedValues>k__BackingField;
    [CompilerGeneratedAttribute]
private RouteValueDictionary <CombinedValues>k__BackingField;
    public RouteValueDictionary AcceptedValues { get; public set; }
    public RouteValueDictionary CombinedValues { get; public set; }
    [CompilerGeneratedAttribute]
public RouteValueDictionary get_AcceptedValues();
    [CompilerGeneratedAttribute]
public void set_AcceptedValues(RouteValueDictionary value);
    [CompilerGeneratedAttribute]
public RouteValueDictionary get_CombinedValues();
    [CompilerGeneratedAttribute]
public void set_CombinedValues(RouteValueDictionary value);
}
[DebuggerDisplayAttribute("{DebuggerToString(),nq}")]
public class Microsoft.AspNetCore.Routing.Tree.InboundMatch : object {
    [CompilerGeneratedAttribute]
private InboundRouteEntry <Entry>k__BackingField;
    [CompilerGeneratedAttribute]
private TemplateMatcher <TemplateMatcher>k__BackingField;
    public InboundRouteEntry Entry { get; public set; }
    public TemplateMatcher TemplateMatcher { get; public set; }
    [CompilerGeneratedAttribute]
public InboundRouteEntry get_Entry();
    [CompilerGeneratedAttribute]
public void set_Entry(InboundRouteEntry value);
    [CompilerGeneratedAttribute]
public TemplateMatcher get_TemplateMatcher();
    [CompilerGeneratedAttribute]
public void set_TemplateMatcher(TemplateMatcher value);
    private string DebuggerToString();
}
public class Microsoft.AspNetCore.Routing.Tree.InboundRouteEntry : object {
    [CompilerGeneratedAttribute]
private IDictionary`2<string, IRouteConstraint> <Constraints>k__BackingField;
    [CompilerGeneratedAttribute]
private RouteValueDictionary <Defaults>k__BackingField;
    [CompilerGeneratedAttribute]
private IRouter <Handler>k__BackingField;
    [CompilerGeneratedAttribute]
private int <Order>k__BackingField;
    [CompilerGeneratedAttribute]
private decimal <Precedence>k__BackingField;
    [CompilerGeneratedAttribute]
private string <RouteName>k__BackingField;
    [CompilerGeneratedAttribute]
private RouteTemplate <RouteTemplate>k__BackingField;
    public IDictionary`2<string, IRouteConstraint> Constraints { get; public set; }
    public RouteValueDictionary Defaults { get; public set; }
    public IRouter Handler { get; public set; }
    public int Order { get; public set; }
    public decimal Precedence { get; public set; }
    public string RouteName { get; public set; }
    public RouteTemplate RouteTemplate { get; public set; }
    [CompilerGeneratedAttribute]
public IDictionary`2<string, IRouteConstraint> get_Constraints();
    [CompilerGeneratedAttribute]
public void set_Constraints(IDictionary`2<string, IRouteConstraint> value);
    [CompilerGeneratedAttribute]
public RouteValueDictionary get_Defaults();
    [CompilerGeneratedAttribute]
public void set_Defaults(RouteValueDictionary value);
    [CompilerGeneratedAttribute]
public IRouter get_Handler();
    [CompilerGeneratedAttribute]
public void set_Handler(IRouter value);
    [CompilerGeneratedAttribute]
public int get_Order();
    [CompilerGeneratedAttribute]
public void set_Order(int value);
    [CompilerGeneratedAttribute]
public decimal get_Precedence();
    [CompilerGeneratedAttribute]
public void set_Precedence(decimal value);
    [CompilerGeneratedAttribute]
public string get_RouteName();
    [CompilerGeneratedAttribute]
public void set_RouteName(string value);
    [CompilerGeneratedAttribute]
public RouteTemplate get_RouteTemplate();
    [CompilerGeneratedAttribute]
public void set_RouteTemplate(RouteTemplate value);
}
public class Microsoft.AspNetCore.Routing.Tree.OutboundMatch : object {
    [CompilerGeneratedAttribute]
private OutboundRouteEntry <Entry>k__BackingField;
    [CompilerGeneratedAttribute]
private TemplateBinder <TemplateBinder>k__BackingField;
    public OutboundRouteEntry Entry { get; public set; }
    public TemplateBinder TemplateBinder { get; public set; }
    [CompilerGeneratedAttribute]
public OutboundRouteEntry get_Entry();
    [CompilerGeneratedAttribute]
public void set_Entry(OutboundRouteEntry value);
    [CompilerGeneratedAttribute]
public TemplateBinder get_TemplateBinder();
    [CompilerGeneratedAttribute]
public void set_TemplateBinder(TemplateBinder value);
}
public class Microsoft.AspNetCore.Routing.Tree.OutboundRouteEntry : object {
    [CompilerGeneratedAttribute]
private IDictionary`2<string, IRouteConstraint> <Constraints>k__BackingField;
    [CompilerGeneratedAttribute]
private RouteValueDictionary <Defaults>k__BackingField;
    [CompilerGeneratedAttribute]
private IRouter <Handler>k__BackingField;
    [CompilerGeneratedAttribute]
private int <Order>k__BackingField;
    [CompilerGeneratedAttribute]
private decimal <Precedence>k__BackingField;
    [CompilerGeneratedAttribute]
private string <RouteName>k__BackingField;
    [CompilerGeneratedAttribute]
private RouteValueDictionary <RequiredLinkValues>k__BackingField;
    [CompilerGeneratedAttribute]
private RouteTemplate <RouteTemplate>k__BackingField;
    public IDictionary`2<string, IRouteConstraint> Constraints { get; public set; }
    public RouteValueDictionary Defaults { get; public set; }
    public IRouter Handler { get; public set; }
    public int Order { get; public set; }
    public decimal Precedence { get; public set; }
    public string RouteName { get; public set; }
    public RouteValueDictionary RequiredLinkValues { get; public set; }
    public RouteTemplate RouteTemplate { get; public set; }
    [CompilerGeneratedAttribute]
public IDictionary`2<string, IRouteConstraint> get_Constraints();
    [CompilerGeneratedAttribute]
public void set_Constraints(IDictionary`2<string, IRouteConstraint> value);
    [CompilerGeneratedAttribute]
public RouteValueDictionary get_Defaults();
    [CompilerGeneratedAttribute]
public void set_Defaults(RouteValueDictionary value);
    [CompilerGeneratedAttribute]
public IRouter get_Handler();
    [CompilerGeneratedAttribute]
public void set_Handler(IRouter value);
    [CompilerGeneratedAttribute]
public int get_Order();
    [CompilerGeneratedAttribute]
public void set_Order(int value);
    [CompilerGeneratedAttribute]
public decimal get_Precedence();
    [CompilerGeneratedAttribute]
public void set_Precedence(decimal value);
    [CompilerGeneratedAttribute]
public string get_RouteName();
    [CompilerGeneratedAttribute]
public void set_RouteName(string value);
    [CompilerGeneratedAttribute]
public RouteValueDictionary get_RequiredLinkValues();
    [CompilerGeneratedAttribute]
public void set_RequiredLinkValues(RouteValueDictionary value);
    [CompilerGeneratedAttribute]
public RouteTemplate get_RouteTemplate();
    [CompilerGeneratedAttribute]
public void set_RouteTemplate(RouteTemplate value);
}
public class Microsoft.AspNetCore.Routing.Tree.TreeRouteBuilder : object {
    private ILogger _logger;
    private ILogger _constraintLogger;
    private UrlEncoder _urlEncoder;
    private ObjectPool`1<UriBuildingContext> _objectPool;
    private IInlineConstraintResolver _constraintResolver;
    [CompilerGeneratedAttribute]
private IList`1<InboundRouteEntry> <InboundEntries>k__BackingField;
    [CompilerGeneratedAttribute]
private IList`1<OutboundRouteEntry> <OutboundEntries>k__BackingField;
    public IList`1<InboundRouteEntry> InboundEntries { get; }
    public IList`1<OutboundRouteEntry> OutboundEntries { get; }
    [ObsoleteAttribute("This constructor is obsolete and will be removed in a future version. The recommended alternative is the overload that does not take a UrlEncoder.")]
public TreeRouteBuilder(ILoggerFactory loggerFactory, UrlEncoder urlEncoder, ObjectPool`1<UriBuildingContext> objectPool, IInlineConstraintResolver constraintResolver);
    public TreeRouteBuilder(ILoggerFactory loggerFactory, ObjectPool`1<UriBuildingContext> objectPool, IInlineConstraintResolver constraintResolver);
    public InboundRouteEntry MapInbound(IRouter handler, RouteTemplate routeTemplate, string routeName, int order);
    public OutboundRouteEntry MapOutbound(IRouter handler, RouteTemplate routeTemplate, RouteValueDictionary requiredLinkValues, string routeName, int order);
    [CompilerGeneratedAttribute]
public IList`1<InboundRouteEntry> get_InboundEntries();
    [CompilerGeneratedAttribute]
public IList`1<OutboundRouteEntry> get_OutboundEntries();
    public TreeRouter Build();
    public TreeRouter Build(int version);
    public void Clear();
    private void AddEntryToTree(UrlMatchingTree tree, InboundRouteEntry entry);
    private static bool RemainingSegmentsAreOptional(IList`1<TemplateSegment> segments, int currentParameterIndex);
}
public class Microsoft.AspNetCore.Routing.Tree.TreeRouter : object {
    public static string RouteGroupKey;
    private LinkGenerationDecisionTree _linkGenerationTree;
    private UrlMatchingTree[] _trees;
    private IDictionary`2<string, OutboundMatch> _namedEntries;
    private ILogger _logger;
    private ILogger _constraintLogger;
    [CompilerGeneratedAttribute]
private int <Version>k__BackingField;
    public int Version { get; }
    internal IEnumerable`1<UrlMatchingTree> MatchingTrees { get; }
    public TreeRouter(UrlMatchingTree[] trees, IEnumerable`1<OutboundRouteEntry> linkGenerationEntries, UrlEncoder urlEncoder, ObjectPool`1<UriBuildingContext> objectPool, ILogger routeLogger, ILogger constraintLogger, int version);
    private static TreeRouter();
    [CompilerGeneratedAttribute]
public int get_Version();
    internal IEnumerable`1<UrlMatchingTree> get_MatchingTrees();
    public sealed virtual VirtualPathData GetVirtualPath(VirtualPathContext context);
    [AsyncStateMachineAttribute("Microsoft.AspNetCore.Routing.Tree.TreeRouter/<RouteAsync>d__13")]
public sealed virtual Task RouteAsync(RouteContext context);
    private VirtualPathData GetVirtualPathForNamedRoute(VirtualPathContext context);
    private VirtualPathData GenerateVirtualPath(VirtualPathContext context, OutboundRouteEntry entry, TemplateBinder binder);
}
[DebuggerDisplayAttribute("{DebuggerToString(),nq}")]
public class Microsoft.AspNetCore.Routing.Tree.UrlMatchingNode : object {
    [CompilerGeneratedAttribute]
private int <Depth>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsCatchAll>k__BackingField;
    [CompilerGeneratedAttribute]
private List`1<InboundMatch> <Matches>k__BackingField;
    [CompilerGeneratedAttribute]
private Dictionary`2<string, UrlMatchingNode> <Literals>k__BackingField;
    [CompilerGeneratedAttribute]
private UrlMatchingNode <ConstrainedParameters>k__BackingField;
    [CompilerGeneratedAttribute]
private UrlMatchingNode <Parameters>k__BackingField;
    [CompilerGeneratedAttribute]
private UrlMatchingNode <ConstrainedCatchAlls>k__BackingField;
    [CompilerGeneratedAttribute]
private UrlMatchingNode <CatchAlls>k__BackingField;
    public int Depth { get; }
    public bool IsCatchAll { get; public set; }
    public List`1<InboundMatch> Matches { get; }
    public Dictionary`2<string, UrlMatchingNode> Literals { get; }
    public UrlMatchingNode ConstrainedParameters { get; public set; }
    public UrlMatchingNode Parameters { get; public set; }
    public UrlMatchingNode ConstrainedCatchAlls { get; public set; }
    public UrlMatchingNode CatchAlls { get; public set; }
    public UrlMatchingNode(int length);
    [CompilerGeneratedAttribute]
public int get_Depth();
    [CompilerGeneratedAttribute]
public bool get_IsCatchAll();
    [CompilerGeneratedAttribute]
public void set_IsCatchAll(bool value);
    [CompilerGeneratedAttribute]
public List`1<InboundMatch> get_Matches();
    [CompilerGeneratedAttribute]
public Dictionary`2<string, UrlMatchingNode> get_Literals();
    [CompilerGeneratedAttribute]
public UrlMatchingNode get_ConstrainedParameters();
    [CompilerGeneratedAttribute]
public void set_ConstrainedParameters(UrlMatchingNode value);
    [CompilerGeneratedAttribute]
public UrlMatchingNode get_Parameters();
    [CompilerGeneratedAttribute]
public void set_Parameters(UrlMatchingNode value);
    [CompilerGeneratedAttribute]
public UrlMatchingNode get_ConstrainedCatchAlls();
    [CompilerGeneratedAttribute]
public void set_ConstrainedCatchAlls(UrlMatchingNode value);
    [CompilerGeneratedAttribute]
public UrlMatchingNode get_CatchAlls();
    [CompilerGeneratedAttribute]
public void set_CatchAlls(UrlMatchingNode value);
    private string DebuggerToString();
}
public class Microsoft.AspNetCore.Routing.Tree.UrlMatchingTree : object {
    [CompilerGeneratedAttribute]
private int <Order>k__BackingField;
    [CompilerGeneratedAttribute]
private UrlMatchingNode <Root>k__BackingField;
    public int Order { get; }
    public UrlMatchingNode Root { get; }
    public UrlMatchingTree(int order);
    [CompilerGeneratedAttribute]
public int get_Order();
    [CompilerGeneratedAttribute]
public UrlMatchingNode get_Root();
}
[ExtensionAttribute]
public static class Microsoft.Extensions.DependencyInjection.RoutingServiceCollectionExtensions : object {
    [ExtensionAttribute]
public static IServiceCollection AddRouting(IServiceCollection services);
    [ExtensionAttribute]
public static IServiceCollection AddRouting(IServiceCollection services, Action`1<RouteOptions> configureOptions);
}
internal class Microsoft.Extensions.Internal.HashCodeCombiner : ValueType {
    private long _combinedHash64;
    public int CombinedHash { get; }
    private HashCodeCombiner(long seed);
    public int get_CombinedHash();
    public void Add(IEnumerable e);
    public static int op_Implicit(HashCodeCombiner self);
    public void Add(int i);
    public void Add(string s);
    public void Add(object o);
    public void Add(TValue value, IEqualityComparer`1<TValue> comparer);
    public static HashCodeCombiner Start();
}
internal class Microsoft.Extensions.Internal.PropertyHelper : object {
    private static MethodInfo CallPropertyGetterOpenGenericMethod;
    private static MethodInfo CallPropertyGetterByReferenceOpenGenericMethod;
    private static MethodInfo CallNullSafePropertyGetterOpenGenericMethod;
    private static MethodInfo CallNullSafePropertyGetterByReferenceOpenGenericMethod;
    private static MethodInfo CallPropertySetterOpenGenericMethod;
    private static ConcurrentDictionary`2<Type, PropertyHelper[]> PropertiesCache;
    private static ConcurrentDictionary`2<Type, PropertyHelper[]> VisiblePropertiesCache;
    private Action`2<object, object> _valueSetter;
    private Func`2<object, object> _valueGetter;
    [CompilerGeneratedAttribute]
private PropertyInfo <Property>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    public PropertyInfo Property { get; }
    public string Name { get; protected set; }
    public Func`2<object, object> ValueGetter { get; }
    public Action`2<object, object> ValueSetter { get; }
    public PropertyHelper(PropertyInfo property);
    private static PropertyHelper();
    [CompilerGeneratedAttribute]
public PropertyInfo get_Property();
    [CompilerGeneratedAttribute]
public virtual string get_Name();
    [CompilerGeneratedAttribute]
protected virtual void set_Name(string value);
    public Func`2<object, object> get_ValueGetter();
    public Action`2<object, object> get_ValueSetter();
    public object GetValue(object instance);
    public void SetValue(object instance, object value);
    public static PropertyHelper[] GetProperties(TypeInfo typeInfo);
    public static PropertyHelper[] GetProperties(Type type);
    public static PropertyHelper[] GetVisibleProperties(TypeInfo typeInfo);
    public static PropertyHelper[] GetVisibleProperties(Type type);
    public static Func`2<object, object> MakeFastPropertyGetter(PropertyInfo propertyInfo);
    public static Func`2<object, object> MakeNullSafeFastPropertyGetter(PropertyInfo propertyInfo);
    private static Func`2<object, object> MakeFastPropertyGetter(PropertyInfo propertyInfo, MethodInfo propertyGetterWrapperMethod, MethodInfo propertyGetterByRefWrapperMethod);
    private static Func`2<object, object> MakeFastPropertyGetter(Type openGenericDelegateType, MethodInfo propertyGetMethod, MethodInfo openGenericWrapperMethod);
    public static Action`2<object, object> MakeFastPropertySetter(PropertyInfo propertyInfo);
    public static IDictionary`2<string, object> ObjectToDictionary(object value);
    private static PropertyHelper CreateInstance(PropertyInfo property);
    private static object CallPropertyGetter(Func`2<TDeclaringType, TValue> getter, object target);
    private static object CallPropertyGetterByReference(ByRefFunc`2<TDeclaringType, TValue> getter, object target);
    private static object CallNullSafePropertyGetter(Func`2<TDeclaringType, TValue> getter, object target);
    private static object CallNullSafePropertyGetterByReference(ByRefFunc`2<TDeclaringType, TValue> getter, object target);
    private static void CallPropertySetter(Action`2<TDeclaringType, TValue> setter, object target, object value);
    protected static PropertyHelper[] GetVisibleProperties(Type type, Func`2<PropertyInfo, PropertyHelper> createPropertyHelper, ConcurrentDictionary`2<Type, PropertyHelper[]> allPropertiesCache, ConcurrentDictionary`2<Type, PropertyHelper[]> visiblePropertiesCache);
    protected static PropertyHelper[] GetProperties(Type type, Func`2<PropertyInfo, PropertyHelper> createPropertyHelper, ConcurrentDictionary`2<Type, PropertyHelper[]> cache);
    private static bool IsInterestingProperty(PropertyInfo property);
}
