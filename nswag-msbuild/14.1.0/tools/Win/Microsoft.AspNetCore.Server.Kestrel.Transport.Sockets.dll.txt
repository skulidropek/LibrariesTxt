[ExtensionAttribute]
public static class Microsoft.AspNetCore.Hosting.WebHostBuilderSocketExtensions : object {
    [ExtensionAttribute]
public static IWebHostBuilder UseSockets(IWebHostBuilder hostBuilder);
    [ExtensionAttribute]
public static IWebHostBuilder UseSockets(IWebHostBuilder hostBuilder, Action`1<SocketTransportOptions> configureOptions);
}
[ExtensionAttribute]
public static class Microsoft.AspNetCore.Server.Kestrel.Transport.Sockets.Internal.BufferExtensions : object {
    [ExtensionAttribute]
public static ArraySegment`1<byte> GetArray(Memory`1<byte> memory);
    [ExtensionAttribute]
public static ArraySegment`1<byte> GetArray(ReadOnlyMemory`1<byte> memory);
}
public class Microsoft.AspNetCore.Server.Kestrel.Transport.Sockets.Internal.IOQueue : PipeScheduler {
    private static WaitCallback _doWorkCallback;
    private object _workSync;
    private ConcurrentQueue`1<Work> _workItems;
    private bool _doingWork;
    private static IOQueue();
    public virtual void Schedule(Action`1<object> action, object state);
    private void DoWork();
}
public interface Microsoft.AspNetCore.Server.Kestrel.Transport.Sockets.Internal.ISocketsTrace {
    public abstract virtual void ConnectionReadFin(string connectionId);
    public abstract virtual void ConnectionWriteFin(string connectionId);
    public abstract virtual void ConnectionWriteRst(string connectionId);
    public abstract virtual void ConnectionError(string connectionId, Exception ex);
    public abstract virtual void ConnectionReset(string connectionId);
    public abstract virtual void ConnectionPause(string connectionId);
    public abstract virtual void ConnectionResume(string connectionId);
}
public class Microsoft.AspNetCore.Server.Kestrel.Transport.Sockets.Internal.SocketAwaitable : object {
    private static Action _callbackCompleted;
    private PipeScheduler _ioScheduler;
    private Action _callback;
    private int _bytesTransferred;
    private SocketError _error;
    public bool IsCompleted { get; }
    public SocketAwaitable(PipeScheduler ioScheduler);
    private static SocketAwaitable();
    public SocketAwaitable GetAwaiter();
    public bool get_IsCompleted();
    public int GetResult();
    public sealed virtual void OnCompleted(Action continuation);
    public sealed virtual void UnsafeOnCompleted(Action continuation);
    public void Complete(int bytesTransferred, SocketError socketError);
}
internal class Microsoft.AspNetCore.Server.Kestrel.Transport.Sockets.Internal.SocketConnection : TransportConnection {
    private static int MinAllocBufferSize;
    private static bool IsWindows;
    private Socket _socket;
    private PipeScheduler _scheduler;
    private ISocketsTrace _trace;
    private SocketReceiver _receiver;
    private SocketSender _sender;
    private CancellationTokenSource _connectionClosedTokenSource;
    private object _shutdownLock;
    private Boolean modreq(System.Runtime.CompilerServices.IsVolatile) _aborted;
    private ConnectionAbortedException modreq(System.Runtime.CompilerServices.IsVolatile) _abortReason;
    private long _totalBytesWritten;
    private bool _finOnError;
    [CompilerGeneratedAttribute]
private MemoryPool`1<byte> <MemoryPool>k__BackingField;
    public MemoryPool`1<byte> MemoryPool { get; }
    public PipeScheduler InputWriterScheduler { get; }
    public PipeScheduler OutputReaderScheduler { get; }
    public long TotalBytesWritten { get; }
    internal SocketConnection(Socket socket, MemoryPool`1<byte> memoryPool, PipeScheduler scheduler, ISocketsTrace trace, bool finOnError);
    private static SocketConnection();
    [CompilerGeneratedAttribute]
public virtual MemoryPool`1<byte> get_MemoryPool();
    public virtual PipeScheduler get_InputWriterScheduler();
    public virtual PipeScheduler get_OutputReaderScheduler();
    public virtual long get_TotalBytesWritten();
    [AsyncStateMachineAttribute("Microsoft.AspNetCore.Server.Kestrel.Transport.Sockets.Internal.SocketConnection/<StartAsync>d__23")]
public Task StartAsync();
    public virtual void Abort(ConnectionAbortedException abortReason);
    [AsyncStateMachineAttribute("Microsoft.AspNetCore.Server.Kestrel.Transport.Sockets.Internal.SocketConnection/<DoReceive>d__25")]
private Task DoReceive();
    [AsyncStateMachineAttribute("Microsoft.AspNetCore.Server.Kestrel.Transport.Sockets.Internal.SocketConnection/<ProcessReceives>d__26")]
private Task ProcessReceives();
    [AsyncStateMachineAttribute("Microsoft.AspNetCore.Server.Kestrel.Transport.Sockets.Internal.SocketConnection/<DoSend>d__27")]
private Task DoSend();
    [AsyncStateMachineAttribute("Microsoft.AspNetCore.Server.Kestrel.Transport.Sockets.Internal.SocketConnection/<ProcessSends>d__28")]
private Task ProcessSends();
    private void Shutdown(Exception shutdownReason);
    private void CancelConnectionClosedToken();
    private static bool IsConnectionResetError(SocketError errorCode);
    private static bool IsConnectionAbortError(SocketError errorCode);
}
public class Microsoft.AspNetCore.Server.Kestrel.Transport.Sockets.Internal.SocketReceiver : object {
    private Socket _socket;
    private SocketAsyncEventArgs _eventArgs;
    private SocketAwaitable _awaitable;
    public SocketReceiver(Socket socket, PipeScheduler scheduler);
    public SocketAwaitable ReceiveAsync(Memory`1<byte> buffer);
    public sealed virtual void Dispose();
}
public class Microsoft.AspNetCore.Server.Kestrel.Transport.Sockets.Internal.SocketSender : object {
    private Socket _socket;
    private SocketAsyncEventArgs _eventArgs;
    private SocketAwaitable _awaitable;
    private List`1<ArraySegment`1<byte>> _bufferList;
    public SocketSender(Socket socket, PipeScheduler scheduler);
    public SocketAwaitable SendAsync(ReadOnlySequence`1<byte> buffers);
    private SocketAwaitable SendAsync(ReadOnlyMemory`1<byte> memory);
    private List`1<ArraySegment`1<byte>> GetBufferList(ReadOnlySequence`1<byte> buffer);
    public sealed virtual void Dispose();
}
public class Microsoft.AspNetCore.Server.Kestrel.Transport.Sockets.Internal.SocketsTrace : object {
    private static Action`3<ILogger, string, Exception> _connectionPause;
    private static Action`3<ILogger, string, Exception> _connectionResume;
    private static Action`3<ILogger, string, Exception> _connectionReadFin;
    private static Action`3<ILogger, string, Exception> _connectionWriteFin;
    private static Action`3<ILogger, string, Exception> _connectionWriteRst;
    private static Action`3<ILogger, string, Exception> _connectionError;
    private static Action`3<ILogger, string, Exception> _connectionReset;
    private ILogger _logger;
    public SocketsTrace(ILogger logger);
    private static SocketsTrace();
    public void ConnectionRead(string connectionId, int count);
    public sealed virtual void ConnectionReadFin(string connectionId);
    public sealed virtual void ConnectionWriteFin(string connectionId);
    public sealed virtual void ConnectionWriteRst(string connectionId);
    public void ConnectionWrite(string connectionId, int count);
    public void ConnectionWriteCallback(string connectionId, int status);
    public sealed virtual void ConnectionError(string connectionId, Exception ex);
    public sealed virtual void ConnectionReset(string connectionId);
    public sealed virtual void ConnectionPause(string connectionId);
    public sealed virtual void ConnectionResume(string connectionId);
    public sealed virtual IDisposable BeginScope(TState state);
    public sealed virtual bool IsEnabled(LogLevel logLevel);
    public sealed virtual void Log(LogLevel logLevel, EventId eventId, TState state, Exception exception, Func`3<TState, Exception, string> formatter);
}
internal static class Microsoft.AspNetCore.Server.Kestrel.Transport.Sockets.SocketsStrings : object {
    private static ResourceManager _resourceManager;
    internal static string OnlyIPEndPointsSupported { get; }
    internal static string TransportAlreadyBound { get; }
    private static SocketsStrings();
    internal static string get_OnlyIPEndPointsSupported();
    internal static string FormatOnlyIPEndPointsSupported();
    internal static string get_TransportAlreadyBound();
    internal static string FormatTransportAlreadyBound();
    private static string GetString(string name, String[] formatterNames);
}
internal class Microsoft.AspNetCore.Server.Kestrel.Transport.Sockets.SocketTransport : object {
    private static PipeScheduler[] ThreadPoolSchedulerArray;
    private MemoryPool`1<byte> _memoryPool;
    private IEndPointInformation _endPointInformation;
    private IConnectionDispatcher _dispatcher;
    private IApplicationLifetime _appLifetime;
    private int _numSchedulers;
    private PipeScheduler[] _schedulers;
    private ISocketsTrace _trace;
    private Socket _listenSocket;
    private Task _listenTask;
    private Exception _listenException;
    private Boolean modreq(System.Runtime.CompilerServices.IsVolatile) _unbinding;
    private bool _finOnError;
    private static int SOL_SOCKET_OSX;
    private static int SO_REUSEADDR_OSX;
    private static int SOL_SOCKET_LINUX;
    private static int SO_REUSEADDR_LINUX;
    internal SocketTransport(IEndPointInformation endPointInformation, IConnectionDispatcher dispatcher, IApplicationLifetime applicationLifetime, int ioQueueCount, ISocketsTrace trace, bool finOnError);
    private static SocketTransport();
    public sealed virtual Task BindAsync();
    [AsyncStateMachineAttribute("Microsoft.AspNetCore.Server.Kestrel.Transport.Sockets.SocketTransport/<UnbindAsync>d__15")]
public sealed virtual Task UnbindAsync();
    public sealed virtual Task StopAsync();
    [AsyncStateMachineAttribute("Microsoft.AspNetCore.Server.Kestrel.Transport.Sockets.SocketTransport/<RunAcceptLoopAsync>d__17")]
private Task RunAcceptLoopAsync();
    private void HandleConnectionAsync(SocketConnection connection);
    private static int setsockopt(int socket, int level, int option_name, IntPtr option_value, UInt32 option_len);
    private void EnableRebinding(Socket listenSocket);
    [CompilerGeneratedAttribute]
private Task <BindAsync>b__14_0();
}
public class Microsoft.AspNetCore.Server.Kestrel.Transport.Sockets.SocketTransportFactory : object {
    private SocketTransportOptions _options;
    private IApplicationLifetime _appLifetime;
    private SocketsTrace _trace;
    public SocketTransportFactory(IOptions`1<SocketTransportOptions> options, IApplicationLifetime applicationLifetime, ILoggerFactory loggerFactory);
    public sealed virtual ITransport Create(IEndPointInformation endPointInformation, IConnectionDispatcher dispatcher);
}
public class Microsoft.AspNetCore.Server.Kestrel.Transport.Sockets.SocketTransportOptions : object {
    private static string FinOnErrorSwitch;
    private static bool _finOnError;
    [CompilerGeneratedAttribute]
private bool <FinOnError>k__BackingField;
    [CompilerGeneratedAttribute]
private int <IOQueueCount>k__BackingField;
    internal bool FinOnError { get; internal set; }
    public int IOQueueCount { get; public set; }
    private static SocketTransportOptions();
    [CompilerGeneratedAttribute]
internal bool get_FinOnError();
    [CompilerGeneratedAttribute]
internal void set_FinOnError(bool value);
    [CompilerGeneratedAttribute]
public int get_IOQueueCount();
    [CompilerGeneratedAttribute]
public void set_IOQueueCount(int value);
}
