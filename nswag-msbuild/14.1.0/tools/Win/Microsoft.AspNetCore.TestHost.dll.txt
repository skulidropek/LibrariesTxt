internal class Microsoft.AspNetCore.Hosting.WebHostBuilderFactory.FactoryResolutionResult`2 : object {
    [CompilerGeneratedAttribute]
private FactoryResolutionResultKind <ResultKind>k__BackingField;
    [CompilerGeneratedAttribute]
private Type <ProgramType>k__BackingField;
    [CompilerGeneratedAttribute]
private Func`2<String[], TWebHost> <WebHostFactory>k__BackingField;
    [CompilerGeneratedAttribute]
private Func`2<String[], TWebHostBuilder> <WebHostBuilderFactory>k__BackingField;
    public FactoryResolutionResultKind ResultKind { get; public set; }
    public Type ProgramType { get; public set; }
    public Func`2<String[], TWebHost> WebHostFactory { get; public set; }
    public Func`2<String[], TWebHostBuilder> WebHostBuilderFactory { get; public set; }
    [CompilerGeneratedAttribute]
public FactoryResolutionResultKind get_ResultKind();
    [CompilerGeneratedAttribute]
public void set_ResultKind(FactoryResolutionResultKind value);
    [CompilerGeneratedAttribute]
public Type get_ProgramType();
    [CompilerGeneratedAttribute]
public void set_ProgramType(Type value);
    [CompilerGeneratedAttribute]
public Func`2<String[], TWebHost> get_WebHostFactory();
    [CompilerGeneratedAttribute]
public void set_WebHostFactory(Func`2<String[], TWebHost> value);
    [CompilerGeneratedAttribute]
public Func`2<String[], TWebHostBuilder> get_WebHostBuilderFactory();
    [CompilerGeneratedAttribute]
public void set_WebHostBuilderFactory(Func`2<String[], TWebHostBuilder> value);
    internal static FactoryResolutionResult`2<TWebHost, TWebHostBuilder> NoBuildWebHost(Type programType);
    internal static FactoryResolutionResult`2<TWebHost, TWebHostBuilder> NoCreateWebHostBuilder(Type programType);
    internal static FactoryResolutionResult`2<TWebHost, TWebHostBuilder> NoEntryPoint();
    internal static FactoryResolutionResult`2<TWebHost, TWebHostBuilder> Succeded(Func`2<String[], TWebHost> factory, Type programType);
    internal static FactoryResolutionResult`2<TWebHost, TWebHostBuilder> Succeded(Func`2<String[], TWebHostBuilder> factory, Type programType);
}
internal enum Microsoft.AspNetCore.Hosting.WebHostBuilderFactory.FactoryResolutionResultKind : Enum {
    public int value__;
    public static FactoryResolutionResultKind Success;
    public static FactoryResolutionResultKind NoEntryPoint;
    public static FactoryResolutionResultKind NoCreateWebHostBuilder;
    public static FactoryResolutionResultKind NoBuildWebHost;
}
internal class Microsoft.AspNetCore.Hosting.WebHostBuilderFactory.WebHostFactoryResolver : object {
    public static string CreateWebHostBuilder;
    public static string BuildWebHost;
    private static WebHostFactoryResolver();
    public static FactoryResolutionResult`2<TWebhost, TWebhostBuilder> ResolveWebHostBuilderFactory(Assembly assembly);
    public static FactoryResolutionResult`2<TWebhost, TWebhostBuilder> ResolveWebHostFactory(Assembly assembly);
}
public class Microsoft.AspNetCore.TestHost.ClientHandler : HttpMessageHandler {
    private IHttpApplication`1<Context> _application;
    private PathString _pathBase;
    public ClientHandler(PathString pathBase, IHttpApplication`1<Context> application);
    [AsyncStateMachineAttribute("Microsoft.AspNetCore.TestHost.ClientHandler/<SendAsync>d__3")]
protected virtual Task`1<HttpResponseMessage> SendAsync(HttpRequestMessage request, CancellationToken cancellationToken);
}
internal class Microsoft.AspNetCore.TestHost.HttpContextBuilder : object {
    private IHttpApplication`1<Context> _application;
    private HttpContext _httpContext;
    private TaskCompletionSource`1<HttpContext> _responseTcs;
    private ResponseStream _responseStream;
    private ResponseFeature _responseFeature;
    private CancellationTokenSource _requestAbortedSource;
    private bool _pipelineFinished;
    private Context _testContext;
    internal HttpContextBuilder(IHttpApplication`1<Context> application);
    internal void Configure(Action`1<HttpContext> configureContext);
    internal Task`1<HttpContext> SendAsync(CancellationToken cancellationToken);
    internal void AbortRequest();
    [AsyncStateMachineAttribute("Microsoft.AspNetCore.TestHost.HttpContextBuilder/<CompleteResponseAsync>d__12")]
internal Task CompleteResponseAsync();
    [AsyncStateMachineAttribute("Microsoft.AspNetCore.TestHost.HttpContextBuilder/<ReturnResponseMessageAsync>d__13")]
internal Task ReturnResponseMessageAsync();
    internal void Abort(Exception exception);
}
public class Microsoft.AspNetCore.TestHost.RequestBuilder : object {
    private TestServer _server;
    private HttpRequestMessage _req;
    public RequestBuilder(TestServer server, string path);
    public RequestBuilder And(Action`1<HttpRequestMessage> configure);
    public RequestBuilder AddHeader(string name, string value);
    public Task`1<HttpResponseMessage> SendAsync(string method);
    public Task`1<HttpResponseMessage> GetAsync();
    public Task`1<HttpResponseMessage> PostAsync();
}
internal class Microsoft.AspNetCore.TestHost.RequestFeature : object {
    [CompilerGeneratedAttribute]
private Stream <Body>k__BackingField;
    [CompilerGeneratedAttribute]
private IHeaderDictionary <Headers>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Method>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Path>k__BackingField;
    [CompilerGeneratedAttribute]
private string <PathBase>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Protocol>k__BackingField;
    [CompilerGeneratedAttribute]
private string <QueryString>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Scheme>k__BackingField;
    [CompilerGeneratedAttribute]
private string <RawTarget>k__BackingField;
    public Stream Body { get; public set; }
    public IHeaderDictionary Headers { get; public set; }
    public string Method { get; public set; }
    public string Path { get; public set; }
    public string PathBase { get; public set; }
    public string Protocol { get; public set; }
    public string QueryString { get; public set; }
    public string Scheme { get; public set; }
    public string RawTarget { get; public set; }
    [CompilerGeneratedAttribute]
public sealed virtual Stream get_Body();
    [CompilerGeneratedAttribute]
public sealed virtual void set_Body(Stream value);
    [CompilerGeneratedAttribute]
public sealed virtual IHeaderDictionary get_Headers();
    [CompilerGeneratedAttribute]
public sealed virtual void set_Headers(IHeaderDictionary value);
    [CompilerGeneratedAttribute]
public sealed virtual string get_Method();
    [CompilerGeneratedAttribute]
public sealed virtual void set_Method(string value);
    [CompilerGeneratedAttribute]
public sealed virtual string get_Path();
    [CompilerGeneratedAttribute]
public sealed virtual void set_Path(string value);
    [CompilerGeneratedAttribute]
public sealed virtual string get_PathBase();
    [CompilerGeneratedAttribute]
public sealed virtual void set_PathBase(string value);
    [CompilerGeneratedAttribute]
public sealed virtual string get_Protocol();
    [CompilerGeneratedAttribute]
public sealed virtual void set_Protocol(string value);
    [CompilerGeneratedAttribute]
public sealed virtual string get_QueryString();
    [CompilerGeneratedAttribute]
public sealed virtual void set_QueryString(string value);
    [CompilerGeneratedAttribute]
public sealed virtual string get_Scheme();
    [CompilerGeneratedAttribute]
public sealed virtual void set_Scheme(string value);
    [CompilerGeneratedAttribute]
public sealed virtual string get_RawTarget();
    [CompilerGeneratedAttribute]
public sealed virtual void set_RawTarget(string value);
}
internal class Microsoft.AspNetCore.TestHost.ResponseFeature : object {
    private Func`1<Task> _responseStartingAsync;
    private Func`1<Task> _responseCompletedAsync;
    private HeaderDictionary _headers;
    private int _statusCode;
    private string _reasonPhrase;
    [CompilerGeneratedAttribute]
private IHeaderDictionary <Headers>k__BackingField;
    [CompilerGeneratedAttribute]
private Stream <Body>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <HasStarted>k__BackingField;
    public int StatusCode { get; public set; }
    public string ReasonPhrase { get; public set; }
    public IHeaderDictionary Headers { get; public set; }
    public Stream Body { get; public set; }
    public bool HasStarted { get; public set; }
    public sealed virtual int get_StatusCode();
    public sealed virtual void set_StatusCode(int value);
    public sealed virtual string get_ReasonPhrase();
    public sealed virtual void set_ReasonPhrase(string value);
    [CompilerGeneratedAttribute]
public sealed virtual IHeaderDictionary get_Headers();
    [CompilerGeneratedAttribute]
public sealed virtual void set_Headers(IHeaderDictionary value);
    [CompilerGeneratedAttribute]
public sealed virtual Stream get_Body();
    [CompilerGeneratedAttribute]
public sealed virtual void set_Body(Stream value);
    [CompilerGeneratedAttribute]
public sealed virtual bool get_HasStarted();
    [CompilerGeneratedAttribute]
public void set_HasStarted(bool value);
    public sealed virtual void OnStarting(Func`2<object, Task> callback, object state);
    public sealed virtual void OnCompleted(Func`2<object, Task> callback, object state);
    [AsyncStateMachineAttribute("Microsoft.AspNetCore.TestHost.ResponseFeature/<FireOnSendingHeadersAsync>d__26")]
public Task FireOnSendingHeadersAsync();
    public Task FireOnResponseCompletedAsync();
}
internal class Microsoft.AspNetCore.TestHost.ResponseStream : Stream {
    private bool _complete;
    private bool _aborted;
    private Exception _abortException;
    private SemaphoreSlim _writeLock;
    private Func`1<Task> _onFirstWriteAsync;
    private bool _firstWrite;
    private Action _abortRequest;
    private Pipe _pipe;
    public bool CanRead { get; }
    public bool CanSeek { get; }
    public bool CanWrite { get; }
    public long Length { get; }
    public long Position { get; public set; }
    internal ResponseStream(Func`1<Task> onFirstWriteAsync, Action abortRequest);
    public virtual bool get_CanRead();
    public virtual bool get_CanSeek();
    public virtual bool get_CanWrite();
    public virtual long get_Length();
    public virtual long get_Position();
    public virtual void set_Position(long value);
    public virtual long Seek(long offset, SeekOrigin origin);
    public virtual void SetLength(long value);
    public virtual void Flush();
    [AsyncStateMachineAttribute("Microsoft.AspNetCore.TestHost.ResponseStream/<FlushAsync>d__23")]
public virtual Task FlushAsync(CancellationToken cancellationToken);
    public virtual int Read(Byte[] buffer, int offset, int count);
    [AsyncStateMachineAttribute("Microsoft.AspNetCore.TestHost.ResponseStream/<ReadAsync>d__25")]
public virtual Task`1<int> ReadAsync(Byte[] buffer, int offset, int count, CancellationToken cancellationToken);
    private Task FirstWriteAsync();
    public virtual void Write(Byte[] buffer, int offset, int count);
    [AsyncStateMachineAttribute("Microsoft.AspNetCore.TestHost.ResponseStream/<WriteAsync>d__28")]
public virtual Task WriteAsync(Byte[] buffer, int offset, int count, CancellationToken cancellationToken);
    private static void VerifyBuffer(Byte[] buffer, int offset, int count, bool allowEmpty);
    internal void Cancel();
    internal void Abort(Exception innerException);
    internal void CompleteWrites();
    private void CheckAborted();
    protected virtual void Dispose(bool disposing);
    private void CheckNotComplete();
}
public class Microsoft.AspNetCore.TestHost.TestServer : object {
    private static string ServerName;
    private IWebHost _hostInstance;
    private bool _disposed;
    private IHttpApplication`1<Context> _application;
    [CompilerGeneratedAttribute]
private Uri <BaseAddress>k__BackingField;
    [CompilerGeneratedAttribute]
private IFeatureCollection <Features>k__BackingField;
    public Uri BaseAddress { get; public set; }
    public IWebHost Host { get; }
    public IFeatureCollection Features { get; }
    public TestServer(IWebHostBuilder builder);
    public TestServer(IWebHostBuilder builder, IFeatureCollection featureCollection);
    [CompilerGeneratedAttribute]
public Uri get_BaseAddress();
    [CompilerGeneratedAttribute]
public void set_BaseAddress(Uri value);
    public IWebHost get_Host();
    [CompilerGeneratedAttribute]
public sealed virtual IFeatureCollection get_Features();
    public HttpMessageHandler CreateHandler();
    public HttpClient CreateClient();
    public WebSocketClient CreateWebSocketClient();
    public RequestBuilder CreateRequest(string path);
    [AsyncStateMachineAttribute("Microsoft.AspNetCore.TestHost.TestServer/<SendAsync>d__19")]
public Task`1<HttpContext> SendAsync(Action`1<HttpContext> configureContext, CancellationToken cancellationToken);
    public sealed virtual void Dispose();
    private sealed virtual override Task Microsoft.AspNetCore.Hosting.Server.IServer.StartAsync(IHttpApplication`1<TContext> application, CancellationToken cancellationToken);
    private sealed virtual override Task Microsoft.AspNetCore.Hosting.Server.IServer.StopAsync(CancellationToken cancellationToken);
    [CompilerGeneratedAttribute]
private void <SendAsync>b__19_0(HttpContext context);
    [CompilerGeneratedAttribute]
private void <Microsoft.AspNetCore.Hosting.Server.IServer.StartAsync>b__21_0();
}
internal class Microsoft.AspNetCore.TestHost.TestWebSocket : WebSocket {
    private ReceiverSenderBuffer _receiveBuffer;
    private ReceiverSenderBuffer _sendBuffer;
    private string _subProtocol;
    private WebSocketState _state;
    private Nullable`1<WebSocketCloseStatus> _closeStatus;
    private string _closeStatusDescription;
    private Message _receiveMessage;
    public Nullable`1<WebSocketCloseStatus> CloseStatus { get; }
    public string CloseStatusDescription { get; }
    public WebSocketState State { get; }
    public string SubProtocol { get; }
    private TestWebSocket(string subProtocol, ReceiverSenderBuffer readBuffer, ReceiverSenderBuffer writeBuffer);
    public static Tuple`2<TestWebSocket, TestWebSocket> CreatePair(string subProtocol);
    public virtual Nullable`1<WebSocketCloseStatus> get_CloseStatus();
    public virtual string get_CloseStatusDescription();
    public virtual WebSocketState get_State();
    public virtual string get_SubProtocol();
    [AsyncStateMachineAttribute("Microsoft.AspNetCore.TestHost.TestWebSocket/<CloseAsync>d__16")]
public virtual Task CloseAsync(WebSocketCloseStatus closeStatus, string statusDescription, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Microsoft.AspNetCore.TestHost.TestWebSocket/<CloseOutputAsync>d__17")]
public virtual Task CloseOutputAsync(WebSocketCloseStatus closeStatus, string statusDescription, CancellationToken cancellationToken);
    public virtual void Abort();
    public virtual void Dispose();
    [AsyncStateMachineAttribute("Microsoft.AspNetCore.TestHost.TestWebSocket/<ReceiveAsync>d__20")]
public virtual Task`1<WebSocketReceiveResult> ReceiveAsync(ArraySegment`1<byte> buffer, CancellationToken cancellationToken);
    public virtual Task SendAsync(ArraySegment`1<byte> buffer, WebSocketMessageType messageType, bool endOfMessage, CancellationToken cancellationToken);
    private void Close();
    private void ThrowIfDisposed();
    private void ThrowIfOutputClosed();
    private void ThrowIfInputClosed();
    private void ValidateSegment(ArraySegment`1<byte> buffer);
}
[ExtensionAttribute]
public static class Microsoft.AspNetCore.TestHost.WebHostBuilderExtensions : object {
    [ExtensionAttribute]
public static IWebHostBuilder ConfigureTestServices(IWebHostBuilder webHostBuilder, Action`1<IServiceCollection> servicesConfiguration);
    [ExtensionAttribute]
public static IWebHostBuilder ConfigureTestContainer(IWebHostBuilder webHostBuilder, Action`1<TContainer> servicesConfiguration);
    [ExtensionAttribute]
public static IWebHostBuilder UseSolutionRelativeContentRoot(IWebHostBuilder builder, string solutionRelativePath, string solutionName);
    [ExtensionAttribute]
public static IWebHostBuilder UseSolutionRelativeContentRoot(IWebHostBuilder builder, string solutionRelativePath, string applicationBasePath, string solutionName);
}
public static class Microsoft.AspNetCore.TestHost.WebHostBuilderFactory : object {
    public static IWebHostBuilder CreateFromAssemblyEntryPoint(Assembly assembly, String[] args);
    public static IWebHostBuilder CreateFromTypesAssemblyEntryPoint(String[] args);
}
public class Microsoft.AspNetCore.TestHost.WebSocketClient : object {
    private IHttpApplication`1<Context> _application;
    private PathString _pathBase;
    [CompilerGeneratedAttribute]
private IList`1<string> <SubProtocols>k__BackingField;
    [CompilerGeneratedAttribute]
private Action`1<HttpRequest> <ConfigureRequest>k__BackingField;
    public IList`1<string> SubProtocols { get; private set; }
    public Action`1<HttpRequest> ConfigureRequest { get; public set; }
    internal WebSocketClient(PathString pathBase, IHttpApplication`1<Context> application);
    [CompilerGeneratedAttribute]
public IList`1<string> get_SubProtocols();
    [CompilerGeneratedAttribute]
private void set_SubProtocols(IList`1<string> value);
    [CompilerGeneratedAttribute]
public Action`1<HttpRequest> get_ConfigureRequest();
    [CompilerGeneratedAttribute]
public void set_ConfigureRequest(Action`1<HttpRequest> value);
    [AsyncStateMachineAttribute("Microsoft.AspNetCore.TestHost.WebSocketClient/<ConnectAsync>d__11")]
public Task`1<WebSocket> ConnectAsync(Uri uri, CancellationToken cancellationToken);
    private string CreateRequestKey();
}
