public class Microsoft.Extensions.Logging.Abstractions.Internal.NullScope : object {
    [CompilerGeneratedAttribute]
private static NullScope <Instance>k__BackingField;
    public static NullScope Instance { get; }
    private static NullScope();
    [CompilerGeneratedAttribute]
public static NullScope get_Instance();
    public sealed virtual void Dispose();
}
public class Microsoft.Extensions.Logging.Abstractions.Internal.TypeNameHelper : object {
    private static Dictionary`2<Type, string> _builtInTypeNames;
    private static TypeNameHelper();
    public static string GetTypeDisplayName(Type type);
}
public class Microsoft.Extensions.Logging.Abstractions.NullLogger : object {
    [CompilerGeneratedAttribute]
private static NullLogger <Instance>k__BackingField;
    public static NullLogger Instance { get; }
    private static NullLogger();
    [CompilerGeneratedAttribute]
public static NullLogger get_Instance();
    public sealed virtual IDisposable BeginScope(TState state);
    public sealed virtual bool IsEnabled(LogLevel logLevel);
    public sealed virtual void Log(LogLevel logLevel, EventId eventId, TState state, Exception exception, Func`3<TState, Exception, string> formatter);
}
public class Microsoft.Extensions.Logging.Abstractions.NullLogger`1 : object {
    public static NullLogger`1<T> Instance;
    private static NullLogger`1();
    public sealed virtual IDisposable BeginScope(TState state);
    public sealed virtual void Log(LogLevel logLevel, EventId eventId, TState state, Exception exception, Func`3<TState, Exception, string> formatter);
    public sealed virtual bool IsEnabled(LogLevel logLevel);
}
public class Microsoft.Extensions.Logging.Abstractions.NullLoggerFactory : object {
    public static NullLoggerFactory Instance;
    private static NullLoggerFactory();
    public sealed virtual ILogger CreateLogger(string name);
    public sealed virtual void AddProvider(ILoggerProvider provider);
    public sealed virtual void Dispose();
}
public class Microsoft.Extensions.Logging.Abstractions.NullLoggerProvider : object {
    [CompilerGeneratedAttribute]
private static NullLoggerProvider <Instance>k__BackingField;
    public static NullLoggerProvider Instance { get; }
    private static NullLoggerProvider();
    [CompilerGeneratedAttribute]
public static NullLoggerProvider get_Instance();
    public sealed virtual ILogger CreateLogger(string categoryName);
    public sealed virtual void Dispose();
}
internal static class Microsoft.Extensions.Logging.Abstractions.Resource : object {
    private static ResourceManager _resourceManager;
    internal static string UnexpectedNumberOfNamedParameters { get; }
    private static Resource();
    internal static string get_UnexpectedNumberOfNamedParameters();
    internal static string FormatUnexpectedNumberOfNamedParameters(object p0, object p1, object p2);
    private static string GetString(string name, String[] formatterNames);
}
public class Microsoft.Extensions.Logging.EventId : ValueType {
    [CompilerGeneratedAttribute]
private int <Id>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    public int Id { get; }
    public string Name { get; }
    public EventId(int id, string name);
    public static EventId op_Implicit(int i);
    public static bool op_Equality(EventId left, EventId right);
    public static bool op_Inequality(EventId left, EventId right);
    [CompilerGeneratedAttribute]
public int get_Id();
    [CompilerGeneratedAttribute]
public string get_Name();
    public virtual string ToString();
    public bool Equals(EventId other);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
}
public interface Microsoft.Extensions.Logging.IExternalScopeProvider {
    public abstract virtual void ForEachScope(Action`2<object, TState> callback, TState state);
    public abstract virtual IDisposable Push(object state);
}
public interface Microsoft.Extensions.Logging.ILogger {
    public abstract virtual void Log(LogLevel logLevel, EventId eventId, TState state, Exception exception, Func`3<TState, Exception, string> formatter);
    public abstract virtual bool IsEnabled(LogLevel logLevel);
    public abstract virtual IDisposable BeginScope(TState state);
}
public interface Microsoft.Extensions.Logging.ILogger`1 {
}
public interface Microsoft.Extensions.Logging.ILoggerFactory {
    public abstract virtual ILogger CreateLogger(string categoryName);
    public abstract virtual void AddProvider(ILoggerProvider provider);
}
public interface Microsoft.Extensions.Logging.ILoggerProvider {
    public abstract virtual ILogger CreateLogger(string categoryName);
}
[DefaultMemberAttribute("Item")]
public class Microsoft.Extensions.Logging.Internal.FormattedLogValues : object {
    internal static int MaxCachedFormatters;
    private static string NullFormat;
    private static int _count;
    private static ConcurrentDictionary`2<string, LogValuesFormatter> _formatters;
    private LogValuesFormatter _formatter;
    private Object[] _values;
    private string _originalMessage;
    internal LogValuesFormatter Formatter { get; }
    public KeyValuePair`2<string, object> Item { get; }
    public int Count { get; }
    public FormattedLogValues(string format, Object[] values);
    private static FormattedLogValues();
    internal LogValuesFormatter get_Formatter();
    public sealed virtual KeyValuePair`2<string, object> get_Item(int index);
    public sealed virtual int get_Count();
    [IteratorStateMachineAttribute("Microsoft.Extensions.Logging.Internal.FormattedLogValues/<GetEnumerator>d__14")]
public sealed virtual IEnumerator`1<KeyValuePair`2<string, object>> GetEnumerator();
    public virtual string ToString();
    private sealed virtual override IEnumerator System.Collections.IEnumerable.GetEnumerator();
}
public class Microsoft.Extensions.Logging.Internal.LogValuesFormatter : object {
    private static string NullValue;
    private static Object[] EmptyArray;
    private static Char[] FormatDelimiters;
    private string _format;
    private List`1<string> _valueNames;
    [CompilerGeneratedAttribute]
private string <OriginalFormat>k__BackingField;
    public string OriginalFormat { get; private set; }
    public List`1<string> ValueNames { get; }
    public LogValuesFormatter(string format);
    private static LogValuesFormatter();
    [CompilerGeneratedAttribute]
public string get_OriginalFormat();
    [CompilerGeneratedAttribute]
private void set_OriginalFormat(string value);
    public List`1<string> get_ValueNames();
    private static int FindBraceIndex(string format, char brace, int startIndex, int endIndex);
    private static int FindIndexOfAny(string format, Char[] chars, int startIndex, int endIndex);
    public string Format(Object[] values);
    public KeyValuePair`2<string, object> GetValue(Object[] values, int index);
    public IEnumerable`1<KeyValuePair`2<string, object>> GetValues(Object[] values);
}
public interface Microsoft.Extensions.Logging.ISupportExternalScope {
    public abstract virtual void SetScopeProvider(IExternalScopeProvider scopeProvider);
}
public class Microsoft.Extensions.Logging.Logger`1 : object {
    private ILogger _logger;
    public Logger`1(ILoggerFactory factory);
    private sealed virtual override IDisposable Microsoft.Extensions.Logging.ILogger.BeginScope(TState state);
    private sealed virtual override bool Microsoft.Extensions.Logging.ILogger.IsEnabled(LogLevel logLevel);
    private sealed virtual override void Microsoft.Extensions.Logging.ILogger.Log(LogLevel logLevel, EventId eventId, TState state, Exception exception, Func`3<TState, Exception, string> formatter);
}
[ExtensionAttribute]
public static class Microsoft.Extensions.Logging.LoggerExtensions : object {
    private static Func`3<object, Exception, string> _messageFormatter;
    private static LoggerExtensions();
    [ExtensionAttribute]
public static void LogDebug(ILogger logger, EventId eventId, Exception exception, string message, Object[] args);
    [ExtensionAttribute]
public static void LogDebug(ILogger logger, EventId eventId, string message, Object[] args);
    [ExtensionAttribute]
public static void LogDebug(ILogger logger, Exception exception, string message, Object[] args);
    [ExtensionAttribute]
public static void LogDebug(ILogger logger, string message, Object[] args);
    [ExtensionAttribute]
public static void LogTrace(ILogger logger, EventId eventId, Exception exception, string message, Object[] args);
    [ExtensionAttribute]
public static void LogTrace(ILogger logger, EventId eventId, string message, Object[] args);
    [ExtensionAttribute]
public static void LogTrace(ILogger logger, Exception exception, string message, Object[] args);
    [ExtensionAttribute]
public static void LogTrace(ILogger logger, string message, Object[] args);
    [ExtensionAttribute]
public static void LogInformation(ILogger logger, EventId eventId, Exception exception, string message, Object[] args);
    [ExtensionAttribute]
public static void LogInformation(ILogger logger, EventId eventId, string message, Object[] args);
    [ExtensionAttribute]
public static void LogInformation(ILogger logger, Exception exception, string message, Object[] args);
    [ExtensionAttribute]
public static void LogInformation(ILogger logger, string message, Object[] args);
    [ExtensionAttribute]
public static void LogWarning(ILogger logger, EventId eventId, Exception exception, string message, Object[] args);
    [ExtensionAttribute]
public static void LogWarning(ILogger logger, EventId eventId, string message, Object[] args);
    [ExtensionAttribute]
public static void LogWarning(ILogger logger, Exception exception, string message, Object[] args);
    [ExtensionAttribute]
public static void LogWarning(ILogger logger, string message, Object[] args);
    [ExtensionAttribute]
public static void LogError(ILogger logger, EventId eventId, Exception exception, string message, Object[] args);
    [ExtensionAttribute]
public static void LogError(ILogger logger, EventId eventId, string message, Object[] args);
    [ExtensionAttribute]
public static void LogError(ILogger logger, Exception exception, string message, Object[] args);
    [ExtensionAttribute]
public static void LogError(ILogger logger, string message, Object[] args);
    [ExtensionAttribute]
public static void LogCritical(ILogger logger, EventId eventId, Exception exception, string message, Object[] args);
    [ExtensionAttribute]
public static void LogCritical(ILogger logger, EventId eventId, string message, Object[] args);
    [ExtensionAttribute]
public static void LogCritical(ILogger logger, Exception exception, string message, Object[] args);
    [ExtensionAttribute]
public static void LogCritical(ILogger logger, string message, Object[] args);
    [ExtensionAttribute]
public static void Log(ILogger logger, LogLevel logLevel, string message, Object[] args);
    [ExtensionAttribute]
public static void Log(ILogger logger, LogLevel logLevel, EventId eventId, string message, Object[] args);
    [ExtensionAttribute]
public static void Log(ILogger logger, LogLevel logLevel, Exception exception, string message, Object[] args);
    [ExtensionAttribute]
public static void Log(ILogger logger, LogLevel logLevel, EventId eventId, Exception exception, string message, Object[] args);
    [ExtensionAttribute]
public static IDisposable BeginScope(ILogger logger, string messageFormat, Object[] args);
    private static string MessageFormatter(object state, Exception error);
}
public class Microsoft.Extensions.Logging.LoggerExternalScopeProvider : object {
    private AsyncLocal`1<Scope> _currentScope;
    public sealed virtual void ForEachScope(Action`2<object, TState> callback, TState state);
    public sealed virtual IDisposable Push(object state);
    [CompilerGeneratedAttribute]
internal static void <ForEachScope>g__Report|1_0(Scope current, <>c__DisplayClass1_0`1& );
}
[ExtensionAttribute]
public static class Microsoft.Extensions.Logging.LoggerFactoryExtensions : object {
    [ExtensionAttribute]
public static ILogger`1<T> CreateLogger(ILoggerFactory factory);
    [ExtensionAttribute]
public static ILogger CreateLogger(ILoggerFactory factory, Type type);
}
public static class Microsoft.Extensions.Logging.LoggerMessage : object {
    public static Func`2<ILogger, IDisposable> DefineScope(string formatString);
    public static Func`3<ILogger, T1, IDisposable> DefineScope(string formatString);
    public static Func`4<ILogger, T1, T2, IDisposable> DefineScope(string formatString);
    public static Func`5<ILogger, T1, T2, T3, IDisposable> DefineScope(string formatString);
    public static Action`2<ILogger, Exception> Define(LogLevel logLevel, EventId eventId, string formatString);
    public static Action`3<ILogger, T1, Exception> Define(LogLevel logLevel, EventId eventId, string formatString);
    public static Action`4<ILogger, T1, T2, Exception> Define(LogLevel logLevel, EventId eventId, string formatString);
    public static Action`5<ILogger, T1, T2, T3, Exception> Define(LogLevel logLevel, EventId eventId, string formatString);
    public static Action`6<ILogger, T1, T2, T3, T4, Exception> Define(LogLevel logLevel, EventId eventId, string formatString);
    public static Action`7<ILogger, T1, T2, T3, T4, T5, Exception> Define(LogLevel logLevel, EventId eventId, string formatString);
    public static Action`8<ILogger, T1, T2, T3, T4, T5, T6, Exception> Define(LogLevel logLevel, EventId eventId, string formatString);
    private static LogValuesFormatter CreateLogValuesFormatter(string formatString, int expectedNamedParameterCount);
}
public enum Microsoft.Extensions.Logging.LogLevel : Enum {
    public int value__;
    public static LogLevel Trace;
    public static LogLevel Debug;
    public static LogLevel Information;
    public static LogLevel Warning;
    public static LogLevel Error;
    public static LogLevel Critical;
    public static LogLevel None;
}
