public interface Microsoft.Extensions.Logging.Configuration.ILoggerProviderConfiguration`1 {
    public IConfiguration Configuration { get; }
    public abstract virtual IConfiguration get_Configuration();
}
public interface Microsoft.Extensions.Logging.Configuration.ILoggerProviderConfigurationFactory {
    public abstract virtual IConfiguration GetConfiguration(Type providerType);
}
internal class Microsoft.Extensions.Logging.Configuration.LoggerProviderConfiguration`1 : object {
    [CompilerGeneratedAttribute]
private IConfiguration <Configuration>k__BackingField;
    public IConfiguration Configuration { get; }
    public LoggerProviderConfiguration`1(ILoggerProviderConfigurationFactory providerConfigurationFactory);
    [CompilerGeneratedAttribute]
public sealed virtual IConfiguration get_Configuration();
}
internal class Microsoft.Extensions.Logging.Configuration.LoggerProviderConfigurationFactory : object {
    private IEnumerable`1<LoggingConfiguration> _configurations;
    public LoggerProviderConfigurationFactory(IEnumerable`1<LoggingConfiguration> configurations);
    public sealed virtual IConfiguration GetConfiguration(Type providerType);
}
public class Microsoft.Extensions.Logging.Configuration.LoggerProviderOptionsChangeTokenSource`2 : ConfigurationChangeTokenSource`1<TOptions> {
    public LoggerProviderOptionsChangeTokenSource`2(ILoggerProviderConfiguration`1<TProvider> providerConfiguration);
}
[ExtensionAttribute]
public static class Microsoft.Extensions.Logging.Configuration.LoggingBuilderConfigurationExtensions : object {
    [ExtensionAttribute]
public static void AddConfiguration(ILoggingBuilder builder);
}
internal class Microsoft.Extensions.Logging.Configuration.LoggingConfiguration : object {
    [CompilerGeneratedAttribute]
private IConfiguration <Configuration>k__BackingField;
    public IConfiguration Configuration { get; }
    public LoggingConfiguration(IConfiguration configuration);
    [CompilerGeneratedAttribute]
public IConfiguration get_Configuration();
}
internal class Microsoft.Extensions.Logging.LoggerFilterConfigureOptions : object {
    private static string LogLevelKey;
    private static string DefaultCategory;
    private IConfiguration _configuration;
    public LoggerFilterConfigureOptions(IConfiguration configuration);
    public sealed virtual void Configure(LoggerFilterOptions options);
    private void LoadDefaultConfigValues(LoggerFilterOptions options);
    private void LoadRules(LoggerFilterOptions options, IConfigurationSection configurationSection, string logger);
    private static bool TryGetSwitch(string value, LogLevel& level);
}
[ExtensionAttribute]
public static class Microsoft.Extensions.Logging.LoggingBuilderExtensions : object {
    [ExtensionAttribute]
public static ILoggingBuilder AddConfiguration(ILoggingBuilder builder, IConfiguration configuration);
}
