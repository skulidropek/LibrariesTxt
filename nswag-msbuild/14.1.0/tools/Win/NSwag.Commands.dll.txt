[CompilerGeneratedAttribute]
[EmbeddedAttribute]
internal class Microsoft.CodeAnalysis.EmbeddedAttribute : Attribute {
}
internal class Microsoft.Extensions.Hosting.HostFactoryResolver : object {
    private static BindingFlags DeclaredOnlyLookup;
    public static string BuildWebHost;
    public static string CreateWebHostBuilder;
    public static string CreateHostBuilder;
    private static TimeSpan s_defaultWaitTimeout;
    private static HostFactoryResolver();
    public static Func`2<String[], TWebHost> ResolveWebHostFactory(Assembly assembly);
    public static Func`2<String[], TWebHostBuilder> ResolveWebHostBuilderFactory(Assembly assembly);
    public static Func`2<String[], THostBuilder> ResolveHostBuilderFactory(Assembly assembly);
    public static Func`2<String[], object> ResolveHostFactory(Assembly assembly, Nullable`1<TimeSpan> waitTimeout, bool stopApplication, Action`1<object> configureHostBuilder, Action`1<Exception> entrypointCompleted);
    private static Func`2<String[], T> ResolveFactory(Assembly assembly, string name);
    private static bool IsFactory(MethodInfo factory);
    public static Func`2<String[], IServiceProvider> ResolveServiceProviderFactory(Assembly assembly, Nullable`1<TimeSpan> waitTimeout);
    private static object Build(object builder);
    private static IServiceProvider GetServiceProvider(object host);
}
public abstract class NSwag.Commands.CodeGeneration.CodeGeneratorCommandBase`1 : InputOutputCommandBase {
    [CompilerGeneratedAttribute]
private TSettings <Settings>k__BackingField;
    [JsonIgnoreAttribute]
public TSettings Settings { get; }
    [ArgumentAttribute]
public string TemplateDirectory { get; public set; }
    protected CodeGeneratorCommandBase`1(TSettings settings);
    [CompilerGeneratedAttribute]
public TSettings get_Settings();
    public string get_TemplateDirectory();
    public void set_TemplateDirectory(string value);
}
[CommandAttribute]
public class NSwag.Commands.CodeGeneration.JsonSchemaToCSharpCommand : InputOutputCommandBase {
    [CompilerGeneratedAttribute]
private CSharpGeneratorSettings <Settings>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    [JsonIgnoreAttribute]
public CSharpGeneratorSettings Settings { get; public set; }
    [ArgumentAttribute]
public string Name { get; public set; }
    [ArgumentAttribute]
public string Namespace { get; public set; }
    [ArgumentAttribute]
public bool RequiredPropertiesMustBeDefined { get; public set; }
    [ArgumentAttribute]
public string DateType { get; public set; }
    [ArgumentAttribute]
public String[] JsonConverters { get; public set; }
    [ArgumentAttribute]
public string AnyType { get; public set; }
    [ArgumentAttribute]
public string DateTimeType { get; public set; }
    [ArgumentAttribute]
public string TimeType { get; public set; }
    [ArgumentAttribute]
public string TimeSpanType { get; public set; }
    [ArgumentAttribute]
public string ArrayType { get; public set; }
    [ArgumentAttribute]
public string ArrayInstanceType { get; public set; }
    [ArgumentAttribute]
public string DictionaryType { get; public set; }
    [ArgumentAttribute]
public string DictionaryInstanceType { get; public set; }
    [ArgumentAttribute]
public string ArrayBaseType { get; public set; }
    [ArgumentAttribute]
public string DictionaryBaseType { get; public set; }
    [ArgumentAttribute]
public CSharpClassStyle ClassStyle { get; public set; }
    [ArgumentAttribute]
public CSharpJsonLibrary JsonLibrary { get; public set; }
    [ArgumentAttribute]
public bool GenerateDefaultValues { get; public set; }
    [ArgumentAttribute]
public bool GenerateDataAnnotations { get; public set; }
    [ArgumentAttribute]
public String[] ExcludedTypeNames { get; public set; }
    [ArgumentAttribute]
public bool HandleReferences { get; public set; }
    [ArgumentAttribute]
public bool GenerateImmutableArrayProperties { get; public set; }
    [ArgumentAttribute]
public bool GenerateImmutableDictionaryProperties { get; public set; }
    [ArgumentAttribute]
public string JsonSerializerSettingsTransformationMethod { get; public set; }
    [ArgumentAttribute]
public bool InlineNamedArrays { get; public set; }
    [ArgumentAttribute]
public bool InlineNamedDictionaries { get; public set; }
    [ArgumentAttribute]
public bool InlineNamedTuples { get; public set; }
    [ArgumentAttribute]
public bool InlineNamedAny { get; public set; }
    [ArgumentAttribute]
public bool GenerateOptionalPropertiesAsNullable { get; public set; }
    [ArgumentAttribute]
public bool GenerateNullableReferenceTypes { get; public set; }
    [CompilerGeneratedAttribute]
public CSharpGeneratorSettings get_Settings();
    [CompilerGeneratedAttribute]
public void set_Settings(CSharpGeneratorSettings value);
    [CompilerGeneratedAttribute]
public string get_Name();
    [CompilerGeneratedAttribute]
public void set_Name(string value);
    public string get_Namespace();
    public void set_Namespace(string value);
    public bool get_RequiredPropertiesMustBeDefined();
    public void set_RequiredPropertiesMustBeDefined(bool value);
    public string get_DateType();
    public void set_DateType(string value);
    public String[] get_JsonConverters();
    public void set_JsonConverters(String[] value);
    public string get_AnyType();
    public void set_AnyType(string value);
    public string get_DateTimeType();
    public void set_DateTimeType(string value);
    public string get_TimeType();
    public void set_TimeType(string value);
    public string get_TimeSpanType();
    public void set_TimeSpanType(string value);
    public string get_ArrayType();
    public void set_ArrayType(string value);
    public string get_ArrayInstanceType();
    public void set_ArrayInstanceType(string value);
    public string get_DictionaryType();
    public void set_DictionaryType(string value);
    public string get_DictionaryInstanceType();
    public void set_DictionaryInstanceType(string value);
    public string get_ArrayBaseType();
    public void set_ArrayBaseType(string value);
    public string get_DictionaryBaseType();
    public void set_DictionaryBaseType(string value);
    public CSharpClassStyle get_ClassStyle();
    public void set_ClassStyle(CSharpClassStyle value);
    public CSharpJsonLibrary get_JsonLibrary();
    public void set_JsonLibrary(CSharpJsonLibrary value);
    public bool get_GenerateDefaultValues();
    public void set_GenerateDefaultValues(bool value);
    public bool get_GenerateDataAnnotations();
    public void set_GenerateDataAnnotations(bool value);
    public String[] get_ExcludedTypeNames();
    public void set_ExcludedTypeNames(String[] value);
    public bool get_HandleReferences();
    public void set_HandleReferences(bool value);
    public bool get_GenerateImmutableArrayProperties();
    public void set_GenerateImmutableArrayProperties(bool value);
    public bool get_GenerateImmutableDictionaryProperties();
    public void set_GenerateImmutableDictionaryProperties(bool value);
    public string get_JsonSerializerSettingsTransformationMethod();
    public void set_JsonSerializerSettingsTransformationMethod(string value);
    public bool get_InlineNamedArrays();
    public void set_InlineNamedArrays(bool value);
    public bool get_InlineNamedDictionaries();
    public void set_InlineNamedDictionaries(bool value);
    public bool get_InlineNamedTuples();
    public void set_InlineNamedTuples(bool value);
    public bool get_InlineNamedAny();
    public void set_InlineNamedAny(bool value);
    public bool get_GenerateOptionalPropertiesAsNullable();
    public void set_GenerateOptionalPropertiesAsNullable(bool value);
    public bool get_GenerateNullableReferenceTypes();
    public void set_GenerateNullableReferenceTypes(bool value);
    [AsyncStateMachineAttribute("NSwag.Commands.CodeGeneration.JsonSchemaToCSharpCommand/<RunAsync>d__96")]
public virtual Task`1<object> RunAsync(CommandLineProcessor processor, IConsoleHost host);
}
public class NSwag.Commands.CodeGeneration.JsonSchemaToOpenApiCommand : OutputCommandBase {
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Schema>k__BackingField;
    [JsonPropertyAttribute("name")]
public string Name { get; public set; }
    [JsonPropertyAttribute("schema")]
public string Schema { get; public set; }
    [CompilerGeneratedAttribute]
public string get_Name();
    [CompilerGeneratedAttribute]
public void set_Name(string value);
    [CompilerGeneratedAttribute]
public string get_Schema();
    [CompilerGeneratedAttribute]
public void set_Schema(string value);
    [AsyncStateMachineAttribute("NSwag.Commands.CodeGeneration.JsonSchemaToOpenApiCommand/<RunAsync>d__8")]
public virtual Task`1<object> RunAsync(CommandLineProcessor processor, IConsoleHost host);
    [AsyncStateMachineAttribute("NSwag.Commands.CodeGeneration.JsonSchemaToOpenApiCommand/<RunAsync>d__9")]
public Task`1<OpenApiDocument> RunAsync();
}
[CommandAttribute]
public class NSwag.Commands.CodeGeneration.JsonSchemaToTypeScriptCommand : InputOutputCommandBase {
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    [ArgumentAttribute]
public string Name { get; public set; }
    [CompilerGeneratedAttribute]
public string get_Name();
    [CompilerGeneratedAttribute]
public void set_Name(string value);
    [AsyncStateMachineAttribute("NSwag.Commands.CodeGeneration.JsonSchemaToTypeScriptCommand/<RunAsync>d__4")]
public virtual Task`1<object> RunAsync(CommandLineProcessor processor, IConsoleHost host);
}
[CommandAttribute]
public class NSwag.Commands.CodeGeneration.OpenApiToCSharpClientCommand : OpenApiToCSharpCommandBase`1<CSharpClientGeneratorSettings> {
    [CompilerGeneratedAttribute]
private bool <GenerateContractsOutput>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ContractsNamespace>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ContractsOutputFilePath>k__BackingField;
    [ArgumentAttribute]
public string ClientBaseClass { get; public set; }
    [ArgumentAttribute]
public string ConfigurationClass { get; public set; }
    [ArgumentAttribute]
public bool GenerateClientClasses { get; public set; }
    [ArgumentAttribute]
public bool SuppressClientClassesOutput { get; public set; }
    [ArgumentAttribute]
public bool GenerateClientInterfaces { get; public set; }
    [ArgumentAttribute]
public bool SuppressClientInterfacesOutput { get; public set; }
    [ArgumentAttribute]
public string ClientBaseInterface { get; public set; }
    [ArgumentAttribute]
public bool InjectHttpClient { get; public set; }
    [ArgumentAttribute]
public bool DisposeHttpClient { get; public set; }
    [ArgumentAttribute]
public String[] ProtectedMethods { get; public set; }
    [ArgumentAttribute]
public bool GenerateExceptionClasses { get; public set; }
    [ArgumentAttribute]
public string ExceptionClass { get; public set; }
    [ArgumentAttribute]
public bool WrapDtoExceptions { get; public set; }
    [ArgumentAttribute]
public bool UseHttpClientCreationMethod { get; public set; }
    [ArgumentAttribute]
public string HttpClientType { get; public set; }
    [ArgumentAttribute]
public bool UseHttpRequestMessageCreationMethod { get; public set; }
    [ArgumentAttribute]
public bool UseBaseUrl { get; public set; }
    [ArgumentAttribute]
public bool GenerateBaseUrlProperty { get; public set; }
    [ArgumentAttribute]
public bool GenerateSyncMethods { get; public set; }
    [ArgumentAttribute]
public bool GeneratePrepareRequestAndProcessResponseAsAsyncMethods { get; public set; }
    [ArgumentAttribute]
public bool ExposeJsonSerializerSettings { get; public set; }
    [ArgumentAttribute]
public string ClientClassAccessModifier { get; public set; }
    [ArgumentAttribute]
public string TypeAccessModifier { get; public set; }
    [ArgumentAttribute]
public string PropertySetterAccessModifier { get; public set; }
    [ArgumentAttribute]
public bool GenerateNativeRecords { get; public set; }
    [ArgumentAttribute]
public bool GenerateContractsOutput { get; public set; }
    [ArgumentAttribute]
public string ContractsNamespace { get; public set; }
    [ArgumentAttribute]
public string ContractsOutputFilePath { get; public set; }
    [ArgumentAttribute]
public string ParameterDateTimeFormat { get; public set; }
    [ArgumentAttribute]
public string ParameterDateFormat { get; public set; }
    [ArgumentAttribute]
public bool GenerateUpdateJsonSerializerSettingsMethod { get; public set; }
    [ArgumentAttribute]
public bool UseRequestAndResponseSerializationSettings { get; public set; }
    [ArgumentAttribute]
public bool SerializeTypeInformation { get; public set; }
    [ArgumentAttribute]
public string QueryNullValue { get; public set; }
    public string get_ClientBaseClass();
    public void set_ClientBaseClass(string value);
    public string get_ConfigurationClass();
    public void set_ConfigurationClass(string value);
    public bool get_GenerateClientClasses();
    public void set_GenerateClientClasses(bool value);
    public bool get_SuppressClientClassesOutput();
    public void set_SuppressClientClassesOutput(bool value);
    public bool get_GenerateClientInterfaces();
    public void set_GenerateClientInterfaces(bool value);
    public bool get_SuppressClientInterfacesOutput();
    public void set_SuppressClientInterfacesOutput(bool value);
    public string get_ClientBaseInterface();
    public void set_ClientBaseInterface(string value);
    public bool get_InjectHttpClient();
    public void set_InjectHttpClient(bool value);
    public bool get_DisposeHttpClient();
    public void set_DisposeHttpClient(bool value);
    public String[] get_ProtectedMethods();
    public void set_ProtectedMethods(String[] value);
    public bool get_GenerateExceptionClasses();
    public void set_GenerateExceptionClasses(bool value);
    public string get_ExceptionClass();
    public void set_ExceptionClass(string value);
    public bool get_WrapDtoExceptions();
    public void set_WrapDtoExceptions(bool value);
    public bool get_UseHttpClientCreationMethod();
    public void set_UseHttpClientCreationMethod(bool value);
    public string get_HttpClientType();
    public void set_HttpClientType(string value);
    public bool get_UseHttpRequestMessageCreationMethod();
    public void set_UseHttpRequestMessageCreationMethod(bool value);
    public bool get_UseBaseUrl();
    public void set_UseBaseUrl(bool value);
    public bool get_GenerateBaseUrlProperty();
    public void set_GenerateBaseUrlProperty(bool value);
    public bool get_GenerateSyncMethods();
    public void set_GenerateSyncMethods(bool value);
    public bool get_GeneratePrepareRequestAndProcessResponseAsAsyncMethods();
    public void set_GeneratePrepareRequestAndProcessResponseAsAsyncMethods(bool value);
    public bool get_ExposeJsonSerializerSettings();
    public void set_ExposeJsonSerializerSettings(bool value);
    public string get_ClientClassAccessModifier();
    public void set_ClientClassAccessModifier(string value);
    public string get_TypeAccessModifier();
    public void set_TypeAccessModifier(string value);
    public string get_PropertySetterAccessModifier();
    public void set_PropertySetterAccessModifier(string value);
    public bool get_GenerateNativeRecords();
    public void set_GenerateNativeRecords(bool value);
    [CompilerGeneratedAttribute]
public bool get_GenerateContractsOutput();
    [CompilerGeneratedAttribute]
public void set_GenerateContractsOutput(bool value);
    [CompilerGeneratedAttribute]
public string get_ContractsNamespace();
    [CompilerGeneratedAttribute]
public void set_ContractsNamespace(string value);
    [CompilerGeneratedAttribute]
public string get_ContractsOutputFilePath();
    [CompilerGeneratedAttribute]
public void set_ContractsOutputFilePath(string value);
    public string get_ParameterDateTimeFormat();
    public void set_ParameterDateTimeFormat(string value);
    public string get_ParameterDateFormat();
    public void set_ParameterDateFormat(string value);
    public bool get_GenerateUpdateJsonSerializerSettingsMethod();
    public void set_GenerateUpdateJsonSerializerSettingsMethod(bool value);
    public bool get_UseRequestAndResponseSerializationSettings();
    public void set_UseRequestAndResponseSerializationSettings(bool value);
    public bool get_SerializeTypeInformation();
    public void set_SerializeTypeInformation(bool value);
    public string get_QueryNullValue();
    public void set_QueryNullValue(string value);
    [AsyncStateMachineAttribute("NSwag.Commands.CodeGeneration.OpenApiToCSharpClientCommand/<RunAsync>d__106")]
public virtual Task`1<object> RunAsync(CommandLineProcessor processor, IConsoleHost host);
    [AsyncStateMachineAttribute("NSwag.Commands.CodeGeneration.OpenApiToCSharpClientCommand/<RunAsync>d__107")]
public Task`1<Dictionary`2<string, string>> RunAsync();
    private void GenerateImplementation(Dictionary`2<string, string> result, CSharpClientGenerator clientGenerator);
    private void GenerateContracts(Dictionary`2<string, string> result, CSharpClientGenerator clientGenerator);
}
public abstract class NSwag.Commands.CodeGeneration.OpenApiToCSharpCommandBase`1 : CodeGeneratorCommandBase`1<TSettings> {
    [ArgumentAttribute]
public string ClassName { get; public set; }
    [ArgumentAttribute]
public OperationGenerationMode OperationGenerationMode { get; public set; }
    [ArgumentAttribute]
public String[] AdditionalNamespaceUsages { get; public set; }
    [ArgumentAttribute]
public String[] AdditionalContractNamespaceUsages { get; public set; }
    [ArgumentAttribute]
public bool GenerateOptionalParameters { get; public set; }
    [ArgumentAttribute]
public bool GenerateJsonMethods { get; public set; }
    [ArgumentAttribute]
public bool EnforceFlagEnums { get; public set; }
    [ArgumentAttribute]
public string ParameterArrayType { get; public set; }
    [ArgumentAttribute]
public string ParameterDictionaryType { get; public set; }
    [ArgumentAttribute]
public string ResponseArrayType { get; public set; }
    [ArgumentAttribute]
public string ResponseDictionaryType { get; public set; }
    [ArgumentAttribute]
public bool WrapResponses { get; public set; }
    [ArgumentAttribute]
public String[] WrapResponseMethods { get; public set; }
    [ArgumentAttribute]
public bool GenerateResponseClasses { get; public set; }
    [ArgumentAttribute]
public string ResponseClass { get; public set; }
    [ArgumentAttribute]
public string Namespace { get; public set; }
    [ArgumentAttribute]
public bool RequiredPropertiesMustBeDefined { get; public set; }
    [ArgumentAttribute]
public string DateType { get; public set; }
    [ArgumentAttribute]
public String[] JsonConverters { get; public set; }
    [ArgumentAttribute]
public string AnyType { get; public set; }
    [ArgumentAttribute]
public string DateTimeType { get; public set; }
    [ArgumentAttribute]
public string TimeType { get; public set; }
    [ArgumentAttribute]
public string TimeSpanType { get; public set; }
    [ArgumentAttribute]
public string ArrayType { get; public set; }
    [ArgumentAttribute]
public string ArrayInstanceType { get; public set; }
    [ArgumentAttribute]
public string DictionaryType { get; public set; }
    [ArgumentAttribute]
public string DictionaryInstanceType { get; public set; }
    [ArgumentAttribute]
public string ArrayBaseType { get; public set; }
    [ArgumentAttribute]
public string DictionaryBaseType { get; public set; }
    [ArgumentAttribute]
public CSharpClassStyle ClassStyle { get; public set; }
    [ArgumentAttribute]
public CSharpJsonLibrary JsonLibrary { get; public set; }
    [ArgumentAttribute]
public bool GenerateDefaultValues { get; public set; }
    [ArgumentAttribute]
public bool GenerateDataAnnotations { get; public set; }
    [ArgumentAttribute]
public String[] ExcludedTypeNames { get; public set; }
    [ArgumentAttribute]
public String[] ExcludedParameterNames { get; public set; }
    [ArgumentAttribute]
public bool HandleReferences { get; public set; }
    [ArgumentAttribute]
public bool GenerateImmutableArrayProperties { get; public set; }
    [ArgumentAttribute]
public bool GenerateImmutableDictionaryProperties { get; public set; }
    [ArgumentAttribute]
public string JsonSerializerSettingsTransformationMethod { get; public set; }
    [ArgumentAttribute]
public bool InlineNamedArrays { get; public set; }
    [ArgumentAttribute]
public bool InlineNamedDictionaries { get; public set; }
    [ArgumentAttribute]
public bool InlineNamedTuples { get; public set; }
    [ArgumentAttribute]
public bool InlineNamedAny { get; public set; }
    [ArgumentAttribute]
public bool GenerateDtoTypes { get; public set; }
    [ArgumentAttribute]
public bool GenerateOptionalPropertiesAsNullable { get; public set; }
    [ArgumentAttribute]
public bool GenerateNullableReferenceTypes { get; public set; }
    protected OpenApiToCSharpCommandBase`1(TSettings settings);
    public string get_ClassName();
    public void set_ClassName(string value);
    public OperationGenerationMode get_OperationGenerationMode();
    public void set_OperationGenerationMode(OperationGenerationMode value);
    public String[] get_AdditionalNamespaceUsages();
    public void set_AdditionalNamespaceUsages(String[] value);
    public String[] get_AdditionalContractNamespaceUsages();
    public void set_AdditionalContractNamespaceUsages(String[] value);
    public bool get_GenerateOptionalParameters();
    public void set_GenerateOptionalParameters(bool value);
    public bool get_GenerateJsonMethods();
    public void set_GenerateJsonMethods(bool value);
    public bool get_EnforceFlagEnums();
    public void set_EnforceFlagEnums(bool value);
    public string get_ParameterArrayType();
    public void set_ParameterArrayType(string value);
    public string get_ParameterDictionaryType();
    public void set_ParameterDictionaryType(string value);
    public string get_ResponseArrayType();
    public void set_ResponseArrayType(string value);
    public string get_ResponseDictionaryType();
    public void set_ResponseDictionaryType(string value);
    public bool get_WrapResponses();
    public void set_WrapResponses(bool value);
    public String[] get_WrapResponseMethods();
    public void set_WrapResponseMethods(String[] value);
    public bool get_GenerateResponseClasses();
    public void set_GenerateResponseClasses(bool value);
    public string get_ResponseClass();
    public void set_ResponseClass(string value);
    public string get_Namespace();
    public void set_Namespace(string value);
    public bool get_RequiredPropertiesMustBeDefined();
    public void set_RequiredPropertiesMustBeDefined(bool value);
    public string get_DateType();
    public void set_DateType(string value);
    public String[] get_JsonConverters();
    public void set_JsonConverters(String[] value);
    public string get_AnyType();
    public void set_AnyType(string value);
    public string get_DateTimeType();
    public void set_DateTimeType(string value);
    public string get_TimeType();
    public void set_TimeType(string value);
    public string get_TimeSpanType();
    public void set_TimeSpanType(string value);
    public string get_ArrayType();
    public void set_ArrayType(string value);
    public string get_ArrayInstanceType();
    public void set_ArrayInstanceType(string value);
    public string get_DictionaryType();
    public void set_DictionaryType(string value);
    public string get_DictionaryInstanceType();
    public void set_DictionaryInstanceType(string value);
    public string get_ArrayBaseType();
    public void set_ArrayBaseType(string value);
    public string get_DictionaryBaseType();
    public void set_DictionaryBaseType(string value);
    public CSharpClassStyle get_ClassStyle();
    public void set_ClassStyle(CSharpClassStyle value);
    public CSharpJsonLibrary get_JsonLibrary();
    public void set_JsonLibrary(CSharpJsonLibrary value);
    public bool get_GenerateDefaultValues();
    public void set_GenerateDefaultValues(bool value);
    public bool get_GenerateDataAnnotations();
    public void set_GenerateDataAnnotations(bool value);
    public String[] get_ExcludedTypeNames();
    public void set_ExcludedTypeNames(String[] value);
    public String[] get_ExcludedParameterNames();
    public void set_ExcludedParameterNames(String[] value);
    public bool get_HandleReferences();
    public void set_HandleReferences(bool value);
    public bool get_GenerateImmutableArrayProperties();
    public void set_GenerateImmutableArrayProperties(bool value);
    public bool get_GenerateImmutableDictionaryProperties();
    public void set_GenerateImmutableDictionaryProperties(bool value);
    public string get_JsonSerializerSettingsTransformationMethod();
    public void set_JsonSerializerSettingsTransformationMethod(string value);
    public bool get_InlineNamedArrays();
    public void set_InlineNamedArrays(bool value);
    public bool get_InlineNamedDictionaries();
    public void set_InlineNamedDictionaries(bool value);
    public bool get_InlineNamedTuples();
    public void set_InlineNamedTuples(bool value);
    public bool get_InlineNamedAny();
    public void set_InlineNamedAny(bool value);
    public bool get_GenerateDtoTypes();
    public void set_GenerateDtoTypes(bool value);
    public bool get_GenerateOptionalPropertiesAsNullable();
    public void set_GenerateOptionalPropertiesAsNullable(bool value);
    public bool get_GenerateNullableReferenceTypes();
    public void set_GenerateNullableReferenceTypes(bool value);
}
[CommandAttribute]
public class NSwag.Commands.CodeGeneration.OpenApiToCSharpControllerCommand : OpenApiToCSharpCommandBase`1<CSharpControllerGeneratorSettings> {
    [ArgumentAttribute]
public string ControllerBaseClass { get; public set; }
    [ArgumentAttribute]
public CSharpControllerStyle ControllerStyle { get; public set; }
    [ArgumentAttribute]
public CSharpControllerTarget ControllerTarget { get; public set; }
    [ArgumentAttribute]
public bool UseCancellationToken { get; public set; }
    [ArgumentAttribute]
public bool UseActionResultType { get; public set; }
    [ArgumentAttribute]
public bool GenerateModelValidationAttributes { get; public set; }
    [ArgumentAttribute]
public CSharpControllerRouteNamingStrategy RouteNamingStrategy { get; public set; }
    [ArgumentAttribute]
public string BasePath { get; public set; }
    public string get_ControllerBaseClass();
    public void set_ControllerBaseClass(string value);
    public CSharpControllerStyle get_ControllerStyle();
    public void set_ControllerStyle(CSharpControllerStyle value);
    public CSharpControllerTarget get_ControllerTarget();
    public void set_ControllerTarget(CSharpControllerTarget value);
    public bool get_UseCancellationToken();
    public void set_UseCancellationToken(bool value);
    public bool get_UseActionResultType();
    public void set_UseActionResultType(bool value);
    public bool get_GenerateModelValidationAttributes();
    public void set_GenerateModelValidationAttributes(bool value);
    public CSharpControllerRouteNamingStrategy get_RouteNamingStrategy();
    public void set_RouteNamingStrategy(CSharpControllerRouteNamingStrategy value);
    public string get_BasePath();
    public void set_BasePath(string value);
    [AsyncStateMachineAttribute("NSwag.Commands.CodeGeneration.OpenApiToCSharpControllerCommand/<RunAsync>d__25")]
public virtual Task`1<object> RunAsync(CommandLineProcessor processor, IConsoleHost host);
    [AsyncStateMachineAttribute("NSwag.Commands.CodeGeneration.OpenApiToCSharpControllerCommand/<RunAsync>d__26")]
public Task`1<string> RunAsync();
}
[CommandAttribute]
public class NSwag.Commands.CodeGeneration.OpenApiToTypeScriptClientCommand : CodeGeneratorCommandBase`1<TypeScriptClientGeneratorSettings> {
    [CompilerGeneratedAttribute]
private string <ExtensionCode>k__BackingField;
    [ArgumentAttribute]
public string ClassName { get; public set; }
    [ArgumentAttribute]
public string ModuleName { get; public set; }
    [ArgumentAttribute]
public string Namespace { get; public set; }
    [ArgumentAttribute]
public decimal TypeScriptVersion { get; public set; }
    [ArgumentAttribute]
public TypeScriptTemplate Template { get; public set; }
    [ArgumentAttribute]
public PromiseType PromiseType { get; public set; }
    [ArgumentAttribute]
public HttpClass HttpClass { get; public set; }
    [ArgumentAttribute]
public bool WithCredentials { get; public set; }
    [ArgumentAttribute]
public bool UseSingletonProvider { get; public set; }
    [ArgumentAttribute]
public InjectionTokenType InjectionTokenType { get; public set; }
    [ArgumentAttribute]
public decimal RxJsVersion { get; public set; }
    [ArgumentAttribute]
public TypeScriptDateTimeType DateTimeType { get; public set; }
    [ArgumentAttribute]
public TypeScriptNullValue NullValue { get; public set; }
    [ArgumentAttribute]
public bool GenerateClientClasses { get; public set; }
    [ArgumentAttribute]
public bool GenerateClientInterfaces { get; public set; }
    [ArgumentAttribute]
public bool GenerateOptionalParameters { get; public set; }
    [ArgumentAttribute]
public bool ExportTypes { get; public set; }
    [ArgumentAttribute]
public bool WrapDtoExceptions { get; public set; }
    [ArgumentAttribute]
public string ExceptionClass { get; public set; }
    [ArgumentAttribute]
public string ClientBaseClass { get; public set; }
    [ArgumentAttribute]
public bool WrapResponses { get; public set; }
    [ArgumentAttribute]
public String[] WrapResponseMethods { get; public set; }
    [ArgumentAttribute]
public bool GenerateResponseClasses { get; public set; }
    [ArgumentAttribute]
public string ResponseClass { get; public set; }
    [ArgumentAttribute]
public String[] ProtectedMethods { get; public set; }
    [ArgumentAttribute]
public string ConfigurationClass { get; public set; }
    [ArgumentAttribute]
public bool UseTransformOptionsMethod { get; public set; }
    [ArgumentAttribute]
public bool UseTransformResultMethod { get; public set; }
    [ArgumentAttribute]
public bool GenerateDtoTypes { get; public set; }
    [ArgumentAttribute]
public OperationGenerationMode OperationGenerationMode { get; public set; }
    [ArgumentAttribute]
public bool MarkOptionalProperties { get; public set; }
    [ArgumentAttribute]
public bool GenerateCloneMethod { get; public set; }
    [ArgumentAttribute]
public TypeScriptTypeStyle TypeStyle { get; public set; }
    [ArgumentAttribute]
public TypeScriptEnumStyle EnumStyle { get; public set; }
    [ArgumentAttribute]
public bool UseLeafType { get; public set; }
    [ArgumentAttribute]
public String[] ClassTypes { get; public set; }
    [ArgumentAttribute]
public String[] ExtendedClasses { get; public set; }
    [ArgumentAttribute]
public string ExtensionCode { get; public set; }
    [ArgumentAttribute]
public bool GenerateDefaultValues { get; public set; }
    [ArgumentAttribute]
public String[] ExcludedTypeNames { get; public set; }
    [ArgumentAttribute]
public String[] ExcludedParameterNames { get; public set; }
    [ArgumentAttribute]
public bool HandleReferences { get; public set; }
    [ArgumentAttribute]
public bool GenerateTypeCheckFunctions { get; public set; }
    [ArgumentAttribute]
public bool GenerateConstructorInterface { get; public set; }
    [ArgumentAttribute]
public bool ConvertConstructorInterfaceData { get; public set; }
    [ArgumentAttribute]
public bool ImportRequiredTypes { get; public set; }
    [ArgumentAttribute]
public bool UseGetBaseUrlMethod { get; public set; }
    [ArgumentAttribute]
public string BaseUrlTokenName { get; public set; }
    [ArgumentAttribute]
public string QueryNullValue { get; public set; }
    [ArgumentAttribute]
public bool UseAbortSignal { get; public set; }
    [ArgumentAttribute]
public bool InlineNamedDictionaries { get; public set; }
    [ArgumentAttribute]
public bool InlineNamedAny { get; public set; }
    [ArgumentAttribute]
public bool IncludeHttpContext { get; public set; }
    public string get_ClassName();
    public void set_ClassName(string value);
    public string get_ModuleName();
    public void set_ModuleName(string value);
    public string get_Namespace();
    public void set_Namespace(string value);
    public decimal get_TypeScriptVersion();
    public void set_TypeScriptVersion(decimal value);
    public TypeScriptTemplate get_Template();
    public void set_Template(TypeScriptTemplate value);
    public PromiseType get_PromiseType();
    public void set_PromiseType(PromiseType value);
    public HttpClass get_HttpClass();
    public void set_HttpClass(HttpClass value);
    public bool get_WithCredentials();
    public void set_WithCredentials(bool value);
    public bool get_UseSingletonProvider();
    public void set_UseSingletonProvider(bool value);
    public InjectionTokenType get_InjectionTokenType();
    public void set_InjectionTokenType(InjectionTokenType value);
    public decimal get_RxJsVersion();
    public void set_RxJsVersion(decimal value);
    public TypeScriptDateTimeType get_DateTimeType();
    public void set_DateTimeType(TypeScriptDateTimeType value);
    public TypeScriptNullValue get_NullValue();
    public void set_NullValue(TypeScriptNullValue value);
    public bool get_GenerateClientClasses();
    public void set_GenerateClientClasses(bool value);
    public bool get_GenerateClientInterfaces();
    public void set_GenerateClientInterfaces(bool value);
    public bool get_GenerateOptionalParameters();
    public void set_GenerateOptionalParameters(bool value);
    public bool get_ExportTypes();
    public void set_ExportTypes(bool value);
    public bool get_WrapDtoExceptions();
    public void set_WrapDtoExceptions(bool value);
    public string get_ExceptionClass();
    public void set_ExceptionClass(string value);
    public string get_ClientBaseClass();
    public void set_ClientBaseClass(string value);
    public bool get_WrapResponses();
    public void set_WrapResponses(bool value);
    public String[] get_WrapResponseMethods();
    public void set_WrapResponseMethods(String[] value);
    public bool get_GenerateResponseClasses();
    public void set_GenerateResponseClasses(bool value);
    public string get_ResponseClass();
    public void set_ResponseClass(string value);
    public String[] get_ProtectedMethods();
    public void set_ProtectedMethods(String[] value);
    public string get_ConfigurationClass();
    public void set_ConfigurationClass(string value);
    public bool get_UseTransformOptionsMethod();
    public void set_UseTransformOptionsMethod(bool value);
    public bool get_UseTransformResultMethod();
    public void set_UseTransformResultMethod(bool value);
    public bool get_GenerateDtoTypes();
    public void set_GenerateDtoTypes(bool value);
    public OperationGenerationMode get_OperationGenerationMode();
    public void set_OperationGenerationMode(OperationGenerationMode value);
    public bool get_MarkOptionalProperties();
    public void set_MarkOptionalProperties(bool value);
    public bool get_GenerateCloneMethod();
    public void set_GenerateCloneMethod(bool value);
    public TypeScriptTypeStyle get_TypeStyle();
    public void set_TypeStyle(TypeScriptTypeStyle value);
    public TypeScriptEnumStyle get_EnumStyle();
    public void set_EnumStyle(TypeScriptEnumStyle value);
    public bool get_UseLeafType();
    public void set_UseLeafType(bool value);
    public String[] get_ClassTypes();
    public void set_ClassTypes(String[] value);
    public String[] get_ExtendedClasses();
    public void set_ExtendedClasses(String[] value);
    [CompilerGeneratedAttribute]
public string get_ExtensionCode();
    [CompilerGeneratedAttribute]
public void set_ExtensionCode(string value);
    public bool get_GenerateDefaultValues();
    public void set_GenerateDefaultValues(bool value);
    public String[] get_ExcludedTypeNames();
    public void set_ExcludedTypeNames(String[] value);
    public String[] get_ExcludedParameterNames();
    public void set_ExcludedParameterNames(String[] value);
    public bool get_HandleReferences();
    public void set_HandleReferences(bool value);
    public bool get_GenerateTypeCheckFunctions();
    public void set_GenerateTypeCheckFunctions(bool value);
    public bool get_GenerateConstructorInterface();
    public void set_GenerateConstructorInterface(bool value);
    public bool get_ConvertConstructorInterfaceData();
    public void set_ConvertConstructorInterfaceData(bool value);
    public bool get_ImportRequiredTypes();
    public void set_ImportRequiredTypes(bool value);
    public bool get_UseGetBaseUrlMethod();
    public void set_UseGetBaseUrlMethod(bool value);
    public string get_BaseUrlTokenName();
    public void set_BaseUrlTokenName(string value);
    public string get_QueryNullValue();
    public void set_QueryNullValue(string value);
    public bool get_UseAbortSignal();
    public void set_UseAbortSignal(bool value);
    public bool get_InlineNamedDictionaries();
    public void set_InlineNamedDictionaries(bool value);
    public bool get_InlineNamedAny();
    public void set_InlineNamedAny(bool value);
    public bool get_IncludeHttpContext();
    public void set_IncludeHttpContext(bool value);
    [AsyncStateMachineAttribute("NSwag.Commands.CodeGeneration.OpenApiToTypeScriptClientCommand/<RunAsync>d__161")]
public virtual Task`1<object> RunAsync(CommandLineProcessor processor, IConsoleHost host);
    [AsyncStateMachineAttribute("NSwag.Commands.CodeGeneration.OpenApiToTypeScriptClientCommand/<RunAsync>d__162")]
public Task`1<string> RunAsync();
}
public enum NSwag.Commands.CodeGeneration.OperationGenerationMode : Enum {
    public int value__;
    public static OperationGenerationMode MultipleClientsFromOperationId;
    public static OperationGenerationMode MultipleClientsFromPathSegments;
    public static OperationGenerationMode MultipleClientsFromFirstTagAndPathSegments;
    public static OperationGenerationMode MultipleClientsFromFirstTagAndOperationId;
    public static OperationGenerationMode SingleClientFromOperationId;
    public static OperationGenerationMode SingleClientFromPathSegments;
    public static OperationGenerationMode MultipleClientsFromFirstTagAndOperationName;
}
public class NSwag.Commands.CodeGeneratorCollection : object {
    [CompilerGeneratedAttribute]
private OpenApiToTypeScriptClientCommand <OpenApiToTypeScriptClientCommand>k__BackingField;
    [CompilerGeneratedAttribute]
private OpenApiToCSharpClientCommand <OpenApiToCSharpClientCommand>k__BackingField;
    [CompilerGeneratedAttribute]
private OpenApiToCSharpControllerCommand <OpenApiToCSharpControllerCommand>k__BackingField;
    [JsonPropertyAttribute("OpenApiToTypeScriptClient")]
public OpenApiToTypeScriptClientCommand OpenApiToTypeScriptClientCommand { get; public set; }
    [JsonPropertyAttribute("OpenApiToCSharpClient")]
public OpenApiToCSharpClientCommand OpenApiToCSharpClientCommand { get; public set; }
    [JsonPropertyAttribute("OpenApiToCSharpController")]
public OpenApiToCSharpControllerCommand OpenApiToCSharpControllerCommand { get; public set; }
    [JsonIgnoreAttribute]
public IEnumerable`1<InputOutputCommandBase> Items { get; }
    [CompilerGeneratedAttribute]
public OpenApiToTypeScriptClientCommand get_OpenApiToTypeScriptClientCommand();
    [CompilerGeneratedAttribute]
public void set_OpenApiToTypeScriptClientCommand(OpenApiToTypeScriptClientCommand value);
    [CompilerGeneratedAttribute]
public OpenApiToCSharpClientCommand get_OpenApiToCSharpClientCommand();
    [CompilerGeneratedAttribute]
public void set_OpenApiToCSharpClientCommand(OpenApiToCSharpClientCommand value);
    [CompilerGeneratedAttribute]
public OpenApiToCSharpControllerCommand get_OpenApiToCSharpControllerCommand();
    [CompilerGeneratedAttribute]
public void set_OpenApiToCSharpControllerCommand(OpenApiToCSharpControllerCommand value);
    public IEnumerable`1<InputOutputCommandBase> get_Items();
}
[CommandAttribute]
public class NSwag.Commands.Document.CreateDocumentCommand : object {
    [AsyncStateMachineAttribute("NSwag.Commands.Document.CreateDocumentCommand/<RunAsync>d__0")]
public sealed virtual Task`1<object> RunAsync(CommandLineProcessor processor, IConsoleHost host);
    [AsyncStateMachineAttribute("NSwag.Commands.Document.CreateDocumentCommand/<CreateDocumentAsync>d__1")]
private Task CreateDocumentAsync(string filePath);
}
[CommandAttribute]
public class NSwag.Commands.Document.ExecuteDocumentCommand : object {
    [CompilerGeneratedAttribute]
private string <Input>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Variables>k__BackingField;
    [ArgumentAttribute]
public string Input { get; public set; }
    [ArgumentAttribute]
public string Variables { get; public set; }
    [CompilerGeneratedAttribute]
public string get_Input();
    [CompilerGeneratedAttribute]
public void set_Input(string value);
    [CompilerGeneratedAttribute]
public string get_Variables();
    [CompilerGeneratedAttribute]
public void set_Variables(string value);
    [AsyncStateMachineAttribute("NSwag.Commands.Document.ExecuteDocumentCommand/<RunAsync>d__8")]
public sealed virtual Task`1<object> RunAsync(CommandLineProcessor processor, IConsoleHost host);
    [AsyncStateMachineAttribute("NSwag.Commands.Document.ExecuteDocumentCommand/<ExecuteDocumentAsync>d__9")]
private Task ExecuteDocumentAsync(IConsoleHost host, string filePath);
}
[CommandAttribute]
public class NSwag.Commands.Generation.AspNetCore.AspNetCoreToOpenApiCommand : OutputCommandBase {
    private static string LauncherBinaryName;
    [CompilerGeneratedAttribute]
private string <Project>k__BackingField;
    [CompilerGeneratedAttribute]
private string <DocumentName>k__BackingField;
    [CompilerGeneratedAttribute]
private string <MSBuildProjectExtensionsPath>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Configuration>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Runtime>k__BackingField;
    [CompilerGeneratedAttribute]
private string <TargetFramework>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <NoBuild>k__BackingField;
    [CompilerGeneratedAttribute]
private string <MSBuildOutputPath>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <Verbose>k__BackingField;
    [CompilerGeneratedAttribute]
private string <WorkingDirectory>k__BackingField;
    [CompilerGeneratedAttribute]
private string <AspNetCoreEnvironment>k__BackingField;
    [ArgumentAttribute]
public string Project { get; public set; }
    [ArgumentAttribute]
public string DocumentName { get; public set; }
    [ArgumentAttribute]
public string MSBuildProjectExtensionsPath { get; public set; }
    [ArgumentAttribute]
public string Configuration { get; public set; }
    [ArgumentAttribute]
public string Runtime { get; public set; }
    [ArgumentAttribute]
public string TargetFramework { get; public set; }
    [ArgumentAttribute]
public bool NoBuild { get; public set; }
    [ArgumentAttribute]
public string MSBuildOutputPath { get; public set; }
    [ArgumentAttribute]
public bool Verbose { get; public set; }
    [ArgumentAttribute]
public string WorkingDirectory { get; public set; }
    [ArgumentAttribute]
public string AspNetCoreEnvironment { get; public set; }
    [CompilerGeneratedAttribute]
public string get_Project();
    [CompilerGeneratedAttribute]
public void set_Project(string value);
    [CompilerGeneratedAttribute]
public string get_DocumentName();
    [CompilerGeneratedAttribute]
public void set_DocumentName(string value);
    [CompilerGeneratedAttribute]
public string get_MSBuildProjectExtensionsPath();
    [CompilerGeneratedAttribute]
public void set_MSBuildProjectExtensionsPath(string value);
    [CompilerGeneratedAttribute]
public string get_Configuration();
    [CompilerGeneratedAttribute]
public void set_Configuration(string value);
    [CompilerGeneratedAttribute]
public string get_Runtime();
    [CompilerGeneratedAttribute]
public void set_Runtime(string value);
    [CompilerGeneratedAttribute]
public string get_TargetFramework();
    [CompilerGeneratedAttribute]
public void set_TargetFramework(string value);
    [CompilerGeneratedAttribute]
public bool get_NoBuild();
    [CompilerGeneratedAttribute]
public void set_NoBuild(bool value);
    [CompilerGeneratedAttribute]
public string get_MSBuildOutputPath();
    [CompilerGeneratedAttribute]
public void set_MSBuildOutputPath(string value);
    [CompilerGeneratedAttribute]
public bool get_Verbose();
    [CompilerGeneratedAttribute]
public void set_Verbose(bool value);
    [CompilerGeneratedAttribute]
public string get_WorkingDirectory();
    [CompilerGeneratedAttribute]
public void set_WorkingDirectory(string value);
    [CompilerGeneratedAttribute]
public string get_AspNetCoreEnvironment();
    [CompilerGeneratedAttribute]
public void set_AspNetCoreEnvironment(string value);
    [AsyncStateMachineAttribute("NSwag.Commands.Generation.AspNetCore.AspNetCoreToOpenApiCommand/<RunAsync>d__45")]
public virtual Task`1<object> RunAsync(CommandLineProcessor processor, IConsoleHost host);
    internal string ChangeWorkingDirectoryAndSetAspNetCoreEnvironment();
    [AsyncStateMachineAttribute("NSwag.Commands.Generation.AspNetCore.AspNetCoreToOpenApiCommand/<GenerateDocumentAsync>d__47")]
public Task`1<OpenApiDocument> GenerateDocumentAsync(IServiceProvider serviceProvider, string currentWorkingDirectory);
    [AsyncStateMachineAttribute("NSwag.Commands.Generation.AspNetCore.AspNetCoreToOpenApiCommand/<GenerateDocumentWithDocumentProviderAsync>d__48")]
private Task`1<OpenApiDocument> GenerateDocumentWithDocumentProviderAsync(IServiceProvider serviceProvider);
    private static void TryDeleteFiles(List`1<string> files);
}
internal class NSwag.Commands.Generation.AspNetCore.AspNetCoreToOpenApiGeneratorCommandEntryPoint : object {
    public static void Process(string commandContent, string outputFile, string applicationName);
}
internal static class NSwag.Commands.Generation.AspNetCore.Exe : object {
    [AsyncStateMachineAttribute("NSwag.Commands.Generation.AspNetCore.Exe/<RunAsync>d__0")]
public static Task`1<int> RunAsync(string executable, IReadOnlyList`1<string> args, IConsoleHost console, Nullable`1<TimeSpan> timeout);
    private static string ToArguments(IReadOnlyList`1<string> args);
}
internal class NSwag.Commands.Generation.AspNetCore.ProjectMetadata : object {
    private static string GetMetadataTarget;
    private string _file;
    private string _framework;
    private string _configuration;
    private string _runtime;
    [CompilerGeneratedAttribute]
private string <ProjectName>k__BackingField;
    [CompilerGeneratedAttribute]
private string <AssemblyName>k__BackingField;
    [CompilerGeneratedAttribute]
private string <OutputPath>k__BackingField;
    [CompilerGeneratedAttribute]
private string <PlatformTarget>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ProjectDepsFilePath>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ProjectDir>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ProjectRuntimeConfigFilePath>k__BackingField;
    [CompilerGeneratedAttribute]
private string <TargetFileName>k__BackingField;
    [CompilerGeneratedAttribute]
private string <TargetFrameworkIdentifier>k__BackingField;
    public string ProjectName { get; }
    public string AssemblyName { get; public set; }
    public string OutputPath { get; public set; }
    public string PlatformTarget { get; public set; }
    public string ProjectDepsFilePath { get; public set; }
    public string ProjectDir { get; public set; }
    public string ProjectRuntimeConfigFilePath { get; public set; }
    public string TargetFileName { get; public set; }
    public string TargetFrameworkIdentifier { get; public set; }
    public ProjectMetadata(string file, string framework, string configuration, string runtime);
    [CompilerGeneratedAttribute]
public string get_ProjectName();
    [CompilerGeneratedAttribute]
public string get_AssemblyName();
    [CompilerGeneratedAttribute]
public void set_AssemblyName(string value);
    [CompilerGeneratedAttribute]
public string get_OutputPath();
    [CompilerGeneratedAttribute]
public void set_OutputPath(string value);
    [CompilerGeneratedAttribute]
public string get_PlatformTarget();
    [CompilerGeneratedAttribute]
public void set_PlatformTarget(string value);
    [CompilerGeneratedAttribute]
public string get_ProjectDepsFilePath();
    [CompilerGeneratedAttribute]
public void set_ProjectDepsFilePath(string value);
    [CompilerGeneratedAttribute]
public string get_ProjectDir();
    [CompilerGeneratedAttribute]
public void set_ProjectDir(string value);
    [CompilerGeneratedAttribute]
public string get_ProjectRuntimeConfigFilePath();
    [CompilerGeneratedAttribute]
public void set_ProjectRuntimeConfigFilePath(string value);
    [CompilerGeneratedAttribute]
public string get_TargetFileName();
    [CompilerGeneratedAttribute]
public void set_TargetFileName(string value);
    [CompilerGeneratedAttribute]
public string get_TargetFrameworkIdentifier();
    [CompilerGeneratedAttribute]
public void set_TargetFrameworkIdentifier(string value);
    public static string FindProject(string path);
    [AsyncStateMachineAttribute("NSwag.Commands.Generation.AspNetCore.ProjectMetadata/<GetProjectMetadata>d__42")]
public static Task`1<ProjectMetadata> GetProjectMetadata(string file, string buildExtensionsDir, string framework, string configuration, string runtime, bool noBuild, string outputPath, IConsoleHost console);
    [AsyncStateMachineAttribute("NSwag.Commands.Generation.AspNetCore.ProjectMetadata/<ReadUsingMsBuildTargets>d__43")]
private static Task`1<Dictionary`2<string, string>> ReadUsingMsBuildTargets(List`1<string> args, string file, string buildExtensionsDir, IConsoleHost console);
    private static List`1<string> CreateMsBuildArguments(string file, string framework, string configuration, string runtime, bool noBuild, string outputPath);
    [AsyncStateMachineAttribute("NSwag.Commands.Generation.AspNetCore.ProjectMetadata/<TryReadingUsingGetProperties>d__45")]
private static Task`1<Dictionary`2<string, string>> TryReadingUsingGetProperties(List`1<string> args, string file, bool noBuild);
}
public class NSwag.Commands.Generation.FromDocumentCommand : OutputCommandBase {
    private string _json;
    private string _url;
    [CompilerGeneratedAttribute]
private PropertyChangedEventHandler PropertyChanged;
    [JsonPropertyAttribute("json")]
public string Json { get; public set; }
    [JsonPropertyAttribute("url")]
public string Url { get; public set; }
    public string get_Json();
    public void set_Json(string value);
    public string get_Url();
    public void set_Url(string value);
    [AsyncStateMachineAttribute("NSwag.Commands.Generation.FromDocumentCommand/<RunAsync>d__8")]
public virtual Task`1<object> RunAsync(CommandLineProcessor processor, IConsoleHost host);
    [AsyncStateMachineAttribute("NSwag.Commands.Generation.FromDocumentCommand/<RunAsync>d__9")]
public Task`1<OpenApiDocument> RunAsync();
    [CompilerGeneratedAttribute]
public sealed virtual void add_PropertyChanged(PropertyChangedEventHandler value);
    [CompilerGeneratedAttribute]
public sealed virtual void remove_PropertyChanged(PropertyChangedEventHandler value);
    protected virtual void OnPropertyChanged(string propertyName);
}
public abstract class NSwag.Commands.InputOutputCommandBase : OutputCommandBase {
    [CompilerGeneratedAttribute]
private object <Input>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ServiceHost>k__BackingField;
    [CompilerGeneratedAttribute]
private String[] <ServiceSchemes>k__BackingField;
    [JsonIgnoreAttribute]
[ArgumentAttribute]
public object Input { get; public set; }
    [ArgumentAttribute]
public string ServiceHost { get; public set; }
    [ArgumentAttribute]
public String[] ServiceSchemes { get; public set; }
    [CompilerGeneratedAttribute]
public object get_Input();
    [CompilerGeneratedAttribute]
public void set_Input(object value);
    [CompilerGeneratedAttribute]
public string get_ServiceHost();
    [CompilerGeneratedAttribute]
public void set_ServiceHost(string value);
    [CompilerGeneratedAttribute]
public String[] get_ServiceSchemes();
    [CompilerGeneratedAttribute]
public void set_ServiceSchemes(String[] value);
    [AsyncStateMachineAttribute("NSwag.Commands.InputOutputCommandBase/<GetInputSwaggerDocument>d__12")]
protected Task`1<OpenApiDocument> GetInputSwaggerDocument();
    [AsyncStateMachineAttribute("NSwag.Commands.InputOutputCommandBase/<GetJsonSchemaAsync>d__13")]
protected Task`1<JsonSchema> GetJsonSchemaAsync();
}
public interface NSwag.Commands.IOutputCommand {
    public string OutputFilePath { get; public set; }
    public abstract virtual string get_OutputFilePath();
    public abstract virtual void set_OutputFilePath(string value);
}
public enum NSwag.Commands.NewLineBehavior : Enum {
    public int value__;
    public static NewLineBehavior Auto;
    public static NewLineBehavior CRLF;
    public static NewLineBehavior LF;
}
public class NSwag.Commands.NSwagCommandProcessor : object {
    private IConsoleHost _host;
    public NSwagCommandProcessor(IConsoleHost host);
    public int Process(String[] args);
    [AsyncStateMachineAttribute("NSwag.Commands.NSwagCommandProcessor/<ProcessAsync>d__3")]
public Task`1<int> ProcessAsync(String[] args);
    private void WriteBinDirectory();
    private void WaitWhenDebuggerAttached();
}
public class NSwag.Commands.NSwagDocument : NSwagDocumentBase {
    [CompilerGeneratedAttribute]
private static string <RootBinaryDirectory>k__BackingField;
    public static string RootBinaryDirectory { get; public set; }
    private static NSwagDocument();
    [CompilerGeneratedAttribute]
public static string get_RootBinaryDirectory();
    [CompilerGeneratedAttribute]
public static void set_RootBinaryDirectory(string value);
    public static NSwagDocument Create();
    public static Task`1<NSwagDocument> LoadAsync(string filePath);
    public static Task`1<NSwagDocument> LoadWithTransformationsAsync(string filePath, string variables);
    [AsyncStateMachineAttribute("NSwag.Commands.NSwagDocument/<ExecuteAsync>d__8")]
public virtual Task`1<OpenApiDocumentExecutionResult> ExecuteAsync();
    [AsyncStateMachineAttribute("NSwag.Commands.NSwagDocument/<ExecuteCommandLineAsync>d__9")]
public Task`1<OpenApiDocumentExecutionResult> ExecuteCommandLineAsync(bool redirectOutput);
    protected virtual string ConvertToAbsolutePath(string pathToConvert);
    protected virtual string ConvertToRelativePath(string pathToConvert);
    private OpenApiDocumentExecutionResult ProcessExecutionResult(string output, string baseFilename, bool redirectOutput);
    [AsyncStateMachineAttribute("NSwag.Commands.NSwagDocument/<StartCommandLineProcessAsync>d__13")]
private Task`1<string> StartCommandLineProcessAsync(string command);
    private string GetDocumentDirectory();
    private string GetArgumentsPrefix();
    private string GetProgramName();
    private string ReadFileIfExists(string filename);
    private void DeleteFileIfExists(string filename);
}
public abstract class NSwag.Commands.NSwagDocumentBase : object {
    private string _path;
    private string _latestData;
    private IOutputCommand _selectedSwaggerGenerator;
    [CompilerGeneratedAttribute]
private Runtime <Runtime>k__BackingField;
    [CompilerGeneratedAttribute]
private string <DefaultVariables>k__BackingField;
    [CompilerGeneratedAttribute]
private OpenApiGeneratorCollection <SwaggerGenerators>k__BackingField;
    [CompilerGeneratedAttribute]
private CodeGeneratorCollection <CodeGenerators>k__BackingField;
    [CompilerGeneratedAttribute]
private PropertyChangedEventHandler PropertyChanged;
    public Runtime Runtime { get; public set; }
    public string DefaultVariables { get; public set; }
    [JsonPropertyAttribute("DocumentGenerator")]
internal JObject SelectedSwaggerGeneratorRaw { get; internal set; }
    [JsonIgnoreAttribute]
public OpenApiGeneratorCollection SwaggerGenerators { get; }
    [JsonPropertyAttribute("CodeGenerators")]
public CodeGeneratorCollection CodeGenerators { get; }
    [JsonIgnoreAttribute]
public string Path { get; public set; }
    [JsonIgnoreAttribute]
public string Name { get; }
    [JsonIgnoreAttribute]
public bool IsDirty { get; }
    [JsonIgnoreAttribute]
public IOutputCommand SelectedSwaggerGenerator { get; public set; }
    protected abstract virtual string ConvertToAbsolutePath(string pathToConvert);
    protected abstract virtual string ConvertToRelativePath(string pathToConvert);
    public abstract virtual Task`1<OpenApiDocumentExecutionResult> ExecuteAsync();
    [CompilerGeneratedAttribute]
public Runtime get_Runtime();
    [CompilerGeneratedAttribute]
public void set_Runtime(Runtime value);
    [CompilerGeneratedAttribute]
public string get_DefaultVariables();
    [CompilerGeneratedAttribute]
public void set_DefaultVariables(string value);
    internal JObject get_SelectedSwaggerGeneratorRaw();
    internal void set_SelectedSwaggerGeneratorRaw(JObject value);
    [CompilerGeneratedAttribute]
public OpenApiGeneratorCollection get_SwaggerGenerators();
    [CompilerGeneratedAttribute]
public CodeGeneratorCollection get_CodeGenerators();
    public string get_Path();
    public void set_Path(string value);
    public string get_Name();
    public bool get_IsDirty();
    public IOutputCommand get_SelectedSwaggerGenerator();
    public void set_SelectedSwaggerGenerator(IOutputCommand value);
    protected static TDocument Create();
    [AsyncStateMachineAttribute("NSwag.Commands.NSwagDocumentBase/<LoadAsync>d__35`1")]
protected static Task`1<TDocument> LoadAsync(string filePath, string variables, bool applyTransformations);
    private static TDocument LoadDocument(string filePath, string data);
    public static TDocument FromJson(string filePath, string data);
    public Task SaveAsync();
    public string ToJsonWithRelativePaths();
    public string ToJson();
    [AsyncStateMachineAttribute("NSwag.Commands.NSwagDocumentBase/<GenerateSwaggerDocumentAsync>d__41")]
protected Task`1<OpenApiDocument> GenerateSwaggerDocumentAsync();
    private static string EscapeJsonString(string value);
    private static Dictionary`2<string, string> ConvertVariables(string variables);
    private static JsonSerializerSettings GetSerializerSettings();
    private void ConvertToAbsolutePaths();
    private void ConvertToRelativePaths();
    [CompilerGeneratedAttribute]
public sealed virtual void add_PropertyChanged(PropertyChangedEventHandler value);
    [CompilerGeneratedAttribute]
public sealed virtual void remove_PropertyChanged(PropertyChangedEventHandler value);
    private void OnPropertyChanged(string propertyName);
    public void RaiseAllPropertiesChanged();
    private static string TransformLegacyDocument(string data, Boolean& saveFile);
}
public class NSwag.Commands.OpenApiDocumentExecutionResult : object {
    private IDictionary`2<Type, string> _generatorOutputs;
    [CompilerGeneratedAttribute]
private string <Output>k__BackingField;
    [CompilerGeneratedAttribute]
private string <SwaggerOutput>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsRedirectedOutput>k__BackingField;
    public string Output { get; }
    public string SwaggerOutput { get; }
    public bool IsRedirectedOutput { get; }
    public OpenApiDocumentExecutionResult(string output, string swaggerOutput, bool isRedirectedOutput);
    [CompilerGeneratedAttribute]
public string get_Output();
    [CompilerGeneratedAttribute]
public string get_SwaggerOutput();
    [CompilerGeneratedAttribute]
public bool get_IsRedirectedOutput();
    public void AddGeneratorOutput(Type key, string output);
    public string GetGeneratorOutput();
}
public class NSwag.Commands.OpenApiGeneratorCollection : object {
    [CompilerGeneratedAttribute]
private FromDocumentCommand <FromDocumentCommand>k__BackingField;
    [CompilerGeneratedAttribute]
private JsonSchemaToOpenApiCommand <JsonSchemaToOpenApiCommand>k__BackingField;
    [CompilerGeneratedAttribute]
private AspNetCoreToOpenApiCommand <AspNetCoreToOpenApiCommand>k__BackingField;
    [JsonIgnoreAttribute]
public FromDocumentCommand FromDocumentCommand { get; public set; }
    [JsonIgnoreAttribute]
public JsonSchemaToOpenApiCommand JsonSchemaToOpenApiCommand { get; public set; }
    [JsonIgnoreAttribute]
public AspNetCoreToOpenApiCommand AspNetCoreToOpenApiCommand { get; public set; }
    [JsonIgnoreAttribute]
public IEnumerable`1<IOutputCommand> Items { get; }
    [CompilerGeneratedAttribute]
public FromDocumentCommand get_FromDocumentCommand();
    [CompilerGeneratedAttribute]
public void set_FromDocumentCommand(FromDocumentCommand value);
    [CompilerGeneratedAttribute]
public JsonSchemaToOpenApiCommand get_JsonSchemaToOpenApiCommand();
    [CompilerGeneratedAttribute]
public void set_JsonSchemaToOpenApiCommand(JsonSchemaToOpenApiCommand value);
    [CompilerGeneratedAttribute]
public AspNetCoreToOpenApiCommand get_AspNetCoreToOpenApiCommand();
    [CompilerGeneratedAttribute]
public void set_AspNetCoreToOpenApiCommand(AspNetCoreToOpenApiCommand value);
    public IEnumerable`1<IOutputCommand> get_Items();
}
internal class NSwag.Commands.OperationGenerationModeConverter : object {
    internal static OperationGenerationMode GetOperationGenerationMode(IOperationNameGenerator operationNameGenerator);
    internal static IOperationNameGenerator GetOperationNameGenerator(OperationGenerationMode operationGenerationMode);
}
public abstract class NSwag.Commands.OutputCommandBase : object {
    [CompilerGeneratedAttribute]
private string <OutputFilePath>k__BackingField;
    [CompilerGeneratedAttribute]
private NewLineBehavior <NewLineBehavior>k__BackingField;
    [ArgumentAttribute]
[JsonPropertyAttribute("output")]
public string OutputFilePath { get; public set; }
    [ArgumentAttribute]
[JsonPropertyAttribute("newLineBehavior")]
public NewLineBehavior NewLineBehavior { get; public set; }
    [CompilerGeneratedAttribute]
public sealed virtual string get_OutputFilePath();
    [CompilerGeneratedAttribute]
public sealed virtual void set_OutputFilePath(string value);
    [CompilerGeneratedAttribute]
public NewLineBehavior get_NewLineBehavior();
    [CompilerGeneratedAttribute]
public void set_NewLineBehavior(NewLineBehavior value);
    public abstract virtual Task`1<object> RunAsync(CommandLineProcessor processor, IConsoleHost host);
    protected Task`1<OpenApiDocument> ReadSwaggerDocumentAsync(string input);
    protected bool IsJson(string data);
    protected bool IsYaml(string data);
    protected Task`1<bool> TryWriteFileOutputAsync(IConsoleHost host, Func`1<string> generator);
    protected Task`1<bool> TryWriteDocumentOutputAsync(IConsoleHost host, Func`1<OpenApiDocument> generator);
    protected Task`1<bool> TryWriteFileOutputAsync(string path, IConsoleHost host, Func`1<string> generator);
}
[ExtensionAttribute]
public static class NSwag.Commands.OutputCommandExtensions : object {
    [ExtensionAttribute]
public static Task`1<bool> TryWriteFileOutputAsync(IOutputCommand command, IConsoleHost host, NewLineBehavior newLineBehavior, Func`1<string> generator);
    [ExtensionAttribute]
public static Task`1<bool> TryWriteDocumentOutputAsync(IOutputCommand command, IConsoleHost host, NewLineBehavior newLineBehavior, Func`1<OpenApiDocument> generator);
    [ExtensionAttribute]
public static Task`1<bool> TryWriteFileOutputAsync(IOutputCommand command, string path, IConsoleHost host, NewLineBehavior newLineBehavior, Func`1<string> generator);
}
public static class NSwag.Commands.PathUtilities : object {
    public static IEnumerable`1<string> ExpandFileWildcards(string path);
    public static IEnumerable`1<string> ExpandFileWildcards(IEnumerable`1<string> paths);
    public static IEnumerable`1<string> FindWildcardMatches(string selector, IEnumerable`1<string> items, char delimiter);
    public static string MakeAbsolutePath(string relativePath, string relativeTo);
    public static string MakeRelativePath(string absolutePath, string relativeTo);
}
public enum NSwag.Commands.Runtime : Enum {
    public int value__;
    public static Runtime Default;
    public static Runtime WinX64;
    public static Runtime WinX86;
    public static Runtime Net60;
    public static Runtime Net80;
    public static Runtime Debug;
}
public class NSwag.Commands.RuntimeUtilities : object {
    public static Runtime CurrentRuntime { get; }
    public static Runtime get_CurrentRuntime();
}
internal static class NSwag.Commands.ServiceProviderResolver : object {
    public static IServiceProvider GetServiceProvider(Assembly assembly);
    internal static IServiceProvider GetServiceProviderWithHostFactoryResolver(Assembly assembly);
}
[CommandAttribute]
public class NSwag.Commands.Tooling.VersionCommand : object {
    public sealed virtual Task`1<object> RunAsync(CommandLineProcessor processor, IConsoleHost host);
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
[AttributeUsageAttribute("2")]
internal class System.Runtime.CompilerServices.RefSafetyRulesAttribute : Attribute {
    public int Version;
    public RefSafetyRulesAttribute(int );
}
