internal static class FxResources.System.IO.Pipelines.SR : object {
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
internal class Microsoft.CodeAnalysis.EmbeddedAttribute : Attribute {
}
internal class System.IO.Pipelines.BufferSegment : ReadOnlySequenceSegment`1<byte> {
    private IMemoryOwner`1<byte> _memoryOwner;
    private BufferSegment _next;
    private int _end;
    [CompilerGeneratedAttribute]
private int <Start>k__BackingField;
    [CompilerGeneratedAttribute]
private Memory`1<byte> <AvailableMemory>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <ReadOnly>k__BackingField;
    public int Start { get; private set; }
    public int End { get; public set; }
    public BufferSegment NextSegment { get; public set; }
    internal IMemoryOwner`1<byte> MemoryOwner { get; }
    public Memory`1<byte> AvailableMemory { get; private set; }
    public int Length { get; }
    public bool ReadOnly { get; private set; }
    public int WritableBytes { get; }
    [CompilerGeneratedAttribute]
public int get_Start();
    [CompilerGeneratedAttribute]
private void set_Start(int value);
    public int get_End();
    public void set_End(int value);
    public BufferSegment get_NextSegment();
    public void set_NextSegment(BufferSegment value);
    public void SetMemory(IMemoryOwner`1<byte> memoryOwner);
    public void SetMemory(IMemoryOwner`1<byte> memoryOwner, int start, int end, bool readOnly);
    public void ResetMemory();
    internal IMemoryOwner`1<byte> get_MemoryOwner();
    [CompilerGeneratedAttribute]
public Memory`1<byte> get_AvailableMemory();
    [CompilerGeneratedAttribute]
private void set_AvailableMemory(Memory`1<byte> value);
    public int get_Length();
    [CompilerGeneratedAttribute]
public bool get_ReadOnly();
    [CompilerGeneratedAttribute]
private void set_ReadOnly(bool value);
    public int get_WritableBytes();
    public void SetNext(BufferSegment segment);
}
[IsReadOnlyAttribute]
internal class System.IO.Pipelines.CompletionData : ValueType {
    [CompilerGeneratedAttribute]
private Action`1<object> <Completion>k__BackingField;
    [CompilerGeneratedAttribute]
private object <CompletionState>k__BackingField;
    [CompilerGeneratedAttribute]
private ExecutionContext <ExecutionContext>k__BackingField;
    [CompilerGeneratedAttribute]
private SynchronizationContext <SynchronizationContext>k__BackingField;
    public Action`1<object> Completion { get; }
    public object CompletionState { get; }
    public ExecutionContext ExecutionContext { get; }
    public SynchronizationContext SynchronizationContext { get; }
    public CompletionData(Action`1<object> completion, object completionState, ExecutionContext executionContext, SynchronizationContext synchronizationContext);
    [CompilerGeneratedAttribute]
public Action`1<object> get_Completion();
    [CompilerGeneratedAttribute]
public object get_CompletionState();
    [CompilerGeneratedAttribute]
public ExecutionContext get_ExecutionContext();
    [CompilerGeneratedAttribute]
public SynchronizationContext get_SynchronizationContext();
}
internal enum System.IO.Pipelines.ExceptionArgument : Enum {
    public int value__;
    public static ExceptionArgument minimumSize;
    public static ExceptionArgument bytesWritten;
    public static ExceptionArgument callback;
    public static ExceptionArgument options;
    public static ExceptionArgument pauseWriterThreshold;
    public static ExceptionArgument resumeWriterThreshold;
}
public class System.IO.Pipelines.FlushResult : ValueType {
    internal ResultFlags _resultFlags;
    public bool IsCanceled { get; }
    public bool IsCompleted { get; }
    public FlushResult(bool isCanceled, bool isCompleted);
    public bool get_IsCanceled();
    public bool get_IsCompleted();
}
public interface System.IO.Pipelines.IDuplexPipe {
    public PipeReader Input { get; }
    public PipeWriter Output { get; }
    public abstract virtual PipeReader get_Input();
    public abstract virtual PipeWriter get_Output();
}
internal class System.IO.Pipelines.InlineScheduler : PipeScheduler {
    public virtual void Schedule(Action`1<object> action, object state);
}
public class System.IO.Pipelines.Pipe : object {
    internal static int SegmentPoolSize;
    private static Action`1<object> s_signalReaderAwaitable;
    private static Action`1<object> s_signalWriterAwaitable;
    private static Action`1<object> s_invokeCompletionCallbacks;
    private static ContextCallback s_executionContextCallback;
    private static ContextCallback s_executionContextRawCallback;
    private static SendOrPostCallback s_syncContextExecutionContextCallback;
    private static SendOrPostCallback s_syncContextExecuteWithoutExecutionContextCallback;
    private static Action`1<object> s_scheduleWithExecutionContextCallback;
    private object _sync;
    private MemoryPool`1<byte> _pool;
    private int _minimumSegmentSize;
    private long _pauseWriterThreshold;
    private long _resumeWriterThreshold;
    private PipeScheduler _readerScheduler;
    private PipeScheduler _writerScheduler;
    private BufferSegment[] _bufferSegmentPool;
    private DefaultPipeReader _reader;
    private DefaultPipeWriter _writer;
    private long _length;
    private long _currentWriteLength;
    private int _pooledSegmentCount;
    private PipeAwaitable _readerAwaitable;
    private PipeAwaitable _writerAwaitable;
    private PipeCompletion _writerCompletion;
    private PipeCompletion _readerCompletion;
    private BufferSegment _readHead;
    private int _readHeadIndex;
    private BufferSegment _commitHead;
    private int _commitHeadIndex;
    private BufferSegment _writingHead;
    private PipeReaderState _readingState;
    private bool _disposed;
    internal long Length { get; }
    public PipeReader Reader { get; }
    public PipeWriter Writer { get; }
    public Pipe(PipeOptions options);
    private static Pipe();
    internal long get_Length();
    private void ResetState();
    internal Memory`1<byte> GetMemory(int sizeHint);
    private BufferSegment AllocateWriteHeadUnsynchronized(int sizeHint);
    private int GetSegmentSize(int sizeHint);
    private BufferSegment CreateSegmentUnsynchronized();
    private void ReturnSegmentUnsynchronized(BufferSegment segment);
    internal bool CommitUnsynchronized();
    internal void Advance(int bytesWritten);
    internal ValueTask`1<FlushResult> FlushAsync(CancellationToken cancellationToken);
    internal void CompleteWriter(Exception exception);
    internal void AdvanceReader(SequencePosition& consumed);
    internal void AdvanceReader(SequencePosition& consumed, SequencePosition& examined);
    internal void AdvanceReader(BufferSegment consumedSegment, int consumedIndex, BufferSegment examinedSegment, int examinedIndex);
    internal void CompleteReader(Exception exception);
    internal void OnWriterCompleted(Action`2<Exception, object> callback, object state);
    internal void CancelPendingRead();
    internal void CancelPendingFlush();
    internal void OnReaderCompleted(Action`2<Exception, object> callback, object state);
    internal ValueTask`1<ReadResult> ReadAsync(CancellationToken token);
    internal bool TryRead(ReadResult& result);
    private static void TrySchedule(PipeScheduler scheduler, Action`1<object> action, object state);
    private static void TrySchedule(PipeScheduler scheduler, CompletionData& completionData);
    private static void ExecuteWithoutExecutionContext(object state);
    private static void ExecuteWithExecutionContext(object state);
    private void CompletePipe();
    internal ValueTaskSourceStatus GetReadAsyncStatus();
    internal void OnReadAsyncCompleted(Action`1<object> continuation, object state, ValueTaskSourceOnCompletedFlags flags);
    internal ReadResult GetReadAsyncResult();
    private void GetReadResult(ReadResult& result);
    internal ValueTaskSourceStatus GetFlushAsyncStatus();
    internal FlushResult GetFlushAsyncResult();
    private void GetFlushResult(FlushResult& result);
    internal void OnFlushAsyncCompleted(Action`1<object> continuation, object state, ValueTaskSourceOnCompletedFlags flags);
    private void ReaderCancellationRequested();
    private void WriterCancellationRequested();
    public PipeReader get_Reader();
    public PipeWriter get_Writer();
    public void Reset();
}
[DebuggerDisplayAttribute("CanceledState: {_canceledState}, IsCompleted: {IsCompleted}")]
internal class System.IO.Pipelines.PipeAwaitable : ValueType {
    private static Action`1<object> s_awaitableIsCompleted;
    private static Action`1<object> s_awaitableIsNotCompleted;
    private CanceledState _canceledState;
    private Action`1<object> _completion;
    private object _completionState;
    private CancellationToken _cancellationToken;
    private CancellationTokenRegistration _cancellationTokenRegistration;
    private SynchronizationContext _synchronizationContext;
    private ExecutionContext _executionContext;
    private bool _useSynchronizationContext;
    public bool IsCompleted { get; }
    public bool HasContinuation { get; }
    public PipeAwaitable(bool completed, bool useSynchronizationContext);
    private static PipeAwaitable();
    public bool get_IsCompleted();
    public bool get_HasContinuation();
    public CancellationTokenRegistration AttachToken(CancellationToken cancellationToken, Action`1<object> callback, object state);
    public void Complete(CompletionData& completionData);
    public void Reset();
    public void OnCompleted(Action`1<object> continuation, object state, ValueTaskSourceOnCompletedFlags flags, CompletionData& completionData, Boolean& doubleCompletion);
    public void Cancel(CompletionData& completionData);
    public bool ObserveCancelation();
}
[DebuggerDisplayAttribute("IsCompleted: {IsCompleted}")]
internal class System.IO.Pipelines.PipeCompletion : ValueType {
    private static ArrayPool`1<PipeCompletionCallback> s_completionCallbackPool;
    private static int InitialCallbacksSize;
    private bool _isCompleted;
    private ExceptionDispatchInfo _exceptionInfo;
    private PipeCompletionCallback[] _callbacks;
    private int _callbackCount;
    public bool IsCompleted { get; }
    public bool IsFaulted { get; }
    private static PipeCompletion();
    public bool get_IsCompleted();
    public bool get_IsFaulted();
    public PipeCompletionCallbacks TryComplete(Exception exception);
    public PipeCompletionCallbacks AddCallback(Action`2<Exception, object> callback, object state);
    public bool IsCompletedOrThrow();
    private PipeCompletionCallbacks GetCallbacks();
    public void Reset();
    private void ThrowLatchedException();
    public virtual string ToString();
}
internal class System.IO.Pipelines.PipeCompletionCallback : ValueType {
    public Action`2<Exception, object> Callback;
    public object State;
}
internal class System.IO.Pipelines.PipeCompletionCallbacks : object {
    private ArrayPool`1<PipeCompletionCallback> _pool;
    private int _count;
    private Exception _exception;
    private PipeCompletionCallback[] _callbacks;
    public PipeCompletionCallbacks(ArrayPool`1<PipeCompletionCallback> pool, int count, Exception exception, PipeCompletionCallback[] callbacks);
    public void Execute();
}
public class System.IO.Pipelines.PipeOptions : object {
    private static int DefaultMinimumSegmentSize;
    private static int DefaultResumeWriterThreshold;
    private static int DefaultPauseWriterThreshold;
    [CompilerGeneratedAttribute]
private static PipeOptions <Default>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <UseSynchronizationContext>k__BackingField;
    [CompilerGeneratedAttribute]
private long <PauseWriterThreshold>k__BackingField;
    [CompilerGeneratedAttribute]
private long <ResumeWriterThreshold>k__BackingField;
    [CompilerGeneratedAttribute]
private int <MinimumSegmentSize>k__BackingField;
    [CompilerGeneratedAttribute]
private PipeScheduler <WriterScheduler>k__BackingField;
    [CompilerGeneratedAttribute]
private PipeScheduler <ReaderScheduler>k__BackingField;
    [CompilerGeneratedAttribute]
private MemoryPool`1<byte> <Pool>k__BackingField;
    public static PipeOptions Default { get; }
    public bool UseSynchronizationContext { get; }
    public long PauseWriterThreshold { get; }
    public long ResumeWriterThreshold { get; }
    public int MinimumSegmentSize { get; }
    public PipeScheduler WriterScheduler { get; }
    public PipeScheduler ReaderScheduler { get; }
    public MemoryPool`1<byte> Pool { get; }
    public PipeOptions(MemoryPool`1<byte> pool, PipeScheduler readerScheduler, PipeScheduler writerScheduler, long pauseWriterThreshold, long resumeWriterThreshold, int minimumSegmentSize, bool useSynchronizationContext);
    private static PipeOptions();
    [CompilerGeneratedAttribute]
public static PipeOptions get_Default();
    [CompilerGeneratedAttribute]
public bool get_UseSynchronizationContext();
    [CompilerGeneratedAttribute]
public long get_PauseWriterThreshold();
    [CompilerGeneratedAttribute]
public long get_ResumeWriterThreshold();
    [CompilerGeneratedAttribute]
public int get_MinimumSegmentSize();
    [CompilerGeneratedAttribute]
public PipeScheduler get_WriterScheduler();
    [CompilerGeneratedAttribute]
public PipeScheduler get_ReaderScheduler();
    [CompilerGeneratedAttribute]
public MemoryPool`1<byte> get_Pool();
}
public abstract class System.IO.Pipelines.PipeReader : object {
    public abstract virtual bool TryRead(ReadResult& result);
    public abstract virtual ValueTask`1<ReadResult> ReadAsync(CancellationToken cancellationToken);
    public abstract virtual void AdvanceTo(SequencePosition consumed);
    public abstract virtual void AdvanceTo(SequencePosition consumed, SequencePosition examined);
    public abstract virtual void CancelPendingRead();
    public abstract virtual void Complete(Exception exception);
    public abstract virtual void OnWriterCompleted(Action`2<Exception, object> callback, object state);
}
[DebuggerDisplayAttribute("State: {_state}")]
internal class System.IO.Pipelines.PipeReaderState : ValueType {
    private State _state;
    public bool IsActive { get; }
    public void Begin();
    public void BeginTentative();
    public void End();
    public bool get_IsActive();
}
public abstract class System.IO.Pipelines.PipeScheduler : object {
    private static ThreadPoolScheduler s_threadPoolScheduler;
    private static InlineScheduler s_inlineScheduler;
    public static PipeScheduler ThreadPool { get; }
    public static PipeScheduler Inline { get; }
    private static PipeScheduler();
    public static PipeScheduler get_ThreadPool();
    public static PipeScheduler get_Inline();
    public abstract virtual void Schedule(Action`1<object> action, object state);
}
public abstract class System.IO.Pipelines.PipeWriter : object {
    public abstract virtual void Complete(Exception exception);
    public abstract virtual void CancelPendingFlush();
    public abstract virtual void OnReaderCompleted(Action`2<Exception, object> callback, object state);
    public abstract virtual ValueTask`1<FlushResult> FlushAsync(CancellationToken cancellationToken);
    public abstract virtual void Advance(int bytes);
    public abstract virtual Memory`1<byte> GetMemory(int sizeHint);
    public abstract virtual Span`1<byte> GetSpan(int sizeHint);
    public virtual ValueTask`1<FlushResult> WriteAsync(ReadOnlyMemory`1<byte> source, CancellationToken cancellationToken);
}
public class System.IO.Pipelines.ReadResult : ValueType {
    internal ReadOnlySequence`1<byte> _resultBuffer;
    internal ResultFlags _resultFlags;
    public ReadOnlySequence`1<byte> Buffer { get; }
    public bool IsCanceled { get; }
    public bool IsCompleted { get; }
    public ReadResult(ReadOnlySequence`1<byte> buffer, bool isCanceled, bool isCompleted);
    public ReadOnlySequence`1<byte> get_Buffer();
    public bool get_IsCanceled();
    public bool get_IsCompleted();
}
[FlagsAttribute]
internal enum System.IO.Pipelines.ResultFlags : Enum {
    public byte value__;
    public static ResultFlags None;
    public static ResultFlags Canceled;
    public static ResultFlags Completed;
}
internal class System.IO.Pipelines.ThreadPoolScheduler : PipeScheduler {
    public virtual void Schedule(Action`1<object> action, object state);
}
internal static class System.IO.Pipelines.ThrowHelper : object {
    internal static void ThrowArgumentOutOfRangeException(ExceptionArgument argument);
    private static Exception CreateArgumentOutOfRangeException(ExceptionArgument argument);
    internal static void ThrowArgumentNullException(ExceptionArgument argument);
    private static Exception CreateArgumentNullException(ExceptionArgument argument);
    public static void ThrowInvalidOperationException_NotWritingNoAlloc();
    public static Exception CreateInvalidOperationException_NotWritingNoAlloc();
    public static void ThrowInvalidOperationException_AlreadyReading();
    public static Exception CreateInvalidOperationException_AlreadyReading();
    public static void ThrowInvalidOperationException_NoReadToComplete();
    public static Exception CreateInvalidOperationException_NoReadToComplete();
    public static void ThrowInvalidOperationException_NoConcurrentOperation();
    public static Exception CreateInvalidOperationException_NoConcurrentOperation();
    public static void ThrowInvalidOperationException_GetResultNotCompleted();
    public static Exception CreateInvalidOperationException_GetResultNotCompleted();
    public static void ThrowInvalidOperationException_NoWritingAllowed();
    public static Exception CreateInvalidOperationException_NoWritingAllowed();
    public static void ThrowInvalidOperationException_NoReadingAllowed();
    public static Exception CreateInvalidOperationException_NoReadingAllowed();
    public static void ThrowInvalidOperationException_AdvancingPastBufferSize();
    public static Exception CreateInvalidOperationException_AdvancingPastBufferSize();
    public static void ThrowInvalidOperationException_BackpressureDeadlock();
    public static Exception CreateInvalidOperationException_BackpressureDeadlock();
    public static void ThrowInvalidOperationException_AdvanceToInvalidCursor();
    public static Exception CreateInvalidOperationException_AdvanceToInvalidCursor();
    public static void ThrowInvalidOperationException_ResetIncompleteReaderWriter();
    public static Exception CreateInvalidOperationException_ResetIncompleteReaderWriter();
}
[AttributeUsageAttribute("32767")]
internal class System.Runtime.CompilerServices.__BlockReflectionAttribute : Attribute {
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
internal class System.Runtime.CompilerServices.IsReadOnlyAttribute : Attribute {
}
internal static class System.SR : object {
    private static ResourceManager s_resourceManager;
    [CompilerGeneratedAttribute]
private static Type <ResourceType>k__BackingField;
    private static ResourceManager ResourceManager { get; }
    internal static Type ResourceType { get; }
    internal static string AdvanceToInvalidCursor { get; }
    internal static string BackpressureDeadlock { get; }
    internal static string CannotAdvancePastCurrentBufferSize { get; }
    internal static string CannotCompleteWhileReading { get; }
    internal static string CannotCompleteWhiteWriting { get; }
    internal static string ConcurrentOperationsNotSupported { get; }
    internal static string GetResultBeforeCompleted { get; }
    internal static string NoReadingOperationToComplete { get; }
    internal static string NoWritingOperation { get; }
    internal static string ReaderAndWriterHasToBeCompleted { get; }
    internal static string ReadingAfterCompleted { get; }
    internal static string ReadingIsInProgress { get; }
    internal static string WritingAfterCompleted { get; }
    private static SR();
    private static ResourceManager get_ResourceManager();
    private static bool UsingResourceKeys();
    internal static string GetResourceString(string resourceKey, string defaultString);
    internal static string Format(string resourceFormat, Object[] args);
    internal static string Format(string resourceFormat, object p1);
    internal static string Format(string resourceFormat, object p1, object p2);
    internal static string Format(string resourceFormat, object p1, object p2, object p3);
    [CompilerGeneratedAttribute]
internal static Type get_ResourceType();
    internal static string get_AdvanceToInvalidCursor();
    internal static string get_BackpressureDeadlock();
    internal static string get_CannotAdvancePastCurrentBufferSize();
    internal static string get_CannotCompleteWhileReading();
    internal static string get_CannotCompleteWhiteWriting();
    internal static string get_ConcurrentOperationsNotSupported();
    internal static string get_GetResultBeforeCompleted();
    internal static string get_NoReadingOperationToComplete();
    internal static string get_NoWritingOperation();
    internal static string get_ReaderAndWriterHasToBeCompleted();
    internal static string get_ReadingAfterCompleted();
    internal static string get_ReadingIsInProgress();
    internal static string get_WritingAfterCompleted();
}
