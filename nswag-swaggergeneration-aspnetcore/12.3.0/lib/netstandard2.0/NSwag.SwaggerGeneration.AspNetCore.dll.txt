public class NSwag.SwaggerGeneration.AspNetCore.AspNetCoreOperationProcessorContext : OperationProcessorContext {
    [CompilerGeneratedAttribute]
private ApiDescription <ApiDescription>k__BackingField;
    public ApiDescription ApiDescription { get; public set; }
    public AspNetCoreOperationProcessorContext(SwaggerDocument document, SwaggerOperationDescription operationDescription, Type controllerType, MethodInfo methodInfo, SwaggerGenerator swaggerGenerator, JsonSchemaGenerator schemaGenerator, JsonSchemaResolver schemaResolver, SwaggerGeneratorSettings settings, IList`1<SwaggerOperationDescription> allOperationDescriptions);
    [CompilerGeneratedAttribute]
public ApiDescription get_ApiDescription();
    [CompilerGeneratedAttribute]
public void set_ApiDescription(ApiDescription value);
}
public class NSwag.SwaggerGeneration.AspNetCore.AspNetCoreToSwaggerGenerator : object {
    private SwaggerJsonSchemaGenerator _schemaGenerator;
    [CompilerGeneratedAttribute]
private AspNetCoreToSwaggerGeneratorSettings <Settings>k__BackingField;
    public AspNetCoreToSwaggerGeneratorSettings Settings { get; }
    public AspNetCoreToSwaggerGenerator(AspNetCoreToSwaggerGeneratorSettings settings);
    public AspNetCoreToSwaggerGenerator(AspNetCoreToSwaggerGeneratorSettings settings, SwaggerJsonSchemaGenerator schemaGenerator);
    [CompilerGeneratedAttribute]
public AspNetCoreToSwaggerGeneratorSettings get_Settings();
    [AsyncStateMachineAttribute("NSwag.SwaggerGeneration.AspNetCore.AspNetCoreToSwaggerGenerator/<GenerateAsync>d__6")]
public sealed virtual Task`1<SwaggerDocument> GenerateAsync(object serviceProvider);
    public static JsonSerializerSettings GetJsonSerializerSettings(IServiceProvider serviceProvider);
    [AsyncStateMachineAttribute("NSwag.SwaggerGeneration.AspNetCore.AspNetCoreToSwaggerGenerator/<GenerateAsync>d__8")]
public Task`1<SwaggerDocument> GenerateAsync(ApiDescriptionGroupCollection apiDescriptionGroups);
    [AsyncStateMachineAttribute("NSwag.SwaggerGeneration.AspNetCore.AspNetCoreToSwaggerGenerator/<GenerateForControllersAsync>d__9")]
private Task`1<List`1<Type>> GenerateForControllersAsync(SwaggerDocument document, IGrouping`2[] apiGroups, SwaggerSchemaResolver schemaResolver);
    [AsyncStateMachineAttribute("NSwag.SwaggerGeneration.AspNetCore.AspNetCoreToSwaggerGenerator/<AddOperationDescriptionsToDocumentAsync>d__10")]
private Task`1<List`1<Tuple`3<SwaggerOperationDescription, ApiDescription, MethodInfo>>> AddOperationDescriptionsToDocumentAsync(SwaggerDocument document, Type controllerType, List`1<Tuple`3<SwaggerOperationDescription, ApiDescription, MethodInfo>> operations, SwaggerGenerator swaggerGenerator, SwaggerSchemaResolver schemaResolver);
    private void UpdateConsumesAndProduces(SwaggerDocument document, List`1<Tuple`3<SwaggerOperationDescription, ApiDescription, MethodInfo>> allOperations);
    [AsyncStateMachineAttribute("NSwag.SwaggerGeneration.AspNetCore.AspNetCoreToSwaggerGenerator/<CreateDocumentAsync>d__12")]
private Task`1<SwaggerDocument> CreateDocumentAsync();
    [AsyncStateMachineAttribute("NSwag.SwaggerGeneration.AspNetCore.AspNetCoreToSwaggerGenerator/<RunOperationProcessorsAsync>d__13")]
private Task`1<bool> RunOperationProcessorsAsync(SwaggerDocument document, ApiDescription apiDescription, Type controllerType, MethodInfo methodInfo, SwaggerOperationDescription operationDescription, List`1<SwaggerOperationDescription> allOperations, SwaggerGenerator swaggerGenerator, SwaggerSchemaResolver schemaResolver);
    private string GetOperationId(SwaggerDocument document, ControllerActionDescriptor actionDescriptor, MethodInfo method);
    private static string GetActionName(string actionName);
    [CompilerGeneratedAttribute]
private bool <GenerateAsync>b__8_0(ApiDescriptionGroup group);
}
public class NSwag.SwaggerGeneration.AspNetCore.AspNetCoreToSwaggerGeneratorSettings : SwaggerGeneratorSettings {
    [CompilerGeneratedAttribute]
private String[] <ApiGroupNames>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <RequireParametersWithoutDefault>k__BackingField;
    public String[] ApiGroupNames { get; public set; }
    public bool RequireParametersWithoutDefault { get; public set; }
    [CompilerGeneratedAttribute]
public String[] get_ApiGroupNames();
    [CompilerGeneratedAttribute]
public void set_ApiGroupNames(String[] value);
    [CompilerGeneratedAttribute]
public bool get_RequireParametersWithoutDefault();
    [CompilerGeneratedAttribute]
public void set_RequireParametersWithoutDefault(bool value);
}
public class NSwag.SwaggerGeneration.AspNetCore.Processors.AspNetCoreOperationTagsProcessor : OperationTagsProcessor {
    protected virtual void AddControllerNameTag(OperationProcessorContext context);
}
internal class NSwag.SwaggerGeneration.AspNetCore.Processors.OperationParameterProcessor : object {
    private AspNetCoreToSwaggerGeneratorSettings _settings;
    public OperationParameterProcessor(AspNetCoreToSwaggerGeneratorSettings settings);
    [AsyncStateMachineAttribute("NSwag.SwaggerGeneration.AspNetCore.Processors.OperationParameterProcessor/<ProcessAsync>d__2")]
public sealed virtual Task`1<bool> ProcessAsync(OperationProcessorContext operationProcessorContext);
    private void EnsureSingleBodyParameter(SwaggerOperationDescription operationDescription);
    private void UpdateConsumedTypes(SwaggerOperationDescription operationDescription);
    private void RemoveUnusedPathParameters(SwaggerOperationDescription operationDescription, string httpPath);
    private bool IsNullable(ParameterInfo parameter);
    [AsyncStateMachineAttribute("NSwag.SwaggerGeneration.AspNetCore.Processors.OperationParameterProcessor/<TryAddFileParameterAsync>d__7")]
private Task`1<bool> TryAddFileParameterAsync(OperationProcessorContext context, ExtendedApiParameterDescription extendedApiParameter);
    [AsyncStateMachineAttribute("NSwag.SwaggerGeneration.AspNetCore.Processors.OperationParameterProcessor/<AddFileParameterAsync>d__8")]
private Task AddFileParameterAsync(OperationProcessorContext context, ExtendedApiParameterDescription extendedApiParameter, bool isFileArray);
    private bool IsFileArray(Type type, JsonTypeDescription typeInfo);
    [AsyncStateMachineAttribute("NSwag.SwaggerGeneration.AspNetCore.Processors.OperationParameterProcessor/<AddBodyParameterAsync>d__10")]
private Task`1<SwaggerParameter> AddBodyParameterAsync(OperationProcessorContext context, ExtendedApiParameterDescription extendedApiParameter);
    [AsyncStateMachineAttribute("NSwag.SwaggerGeneration.AspNetCore.Processors.OperationParameterProcessor/<CreatePrimitiveParameterAsync>d__11")]
private Task`1<SwaggerParameter> CreatePrimitiveParameterAsync(OperationProcessorContext context, ExtendedApiParameterDescription extendedApiParameter);
    private void InitializeFileParameter(SwaggerParameter operationParameter, bool isFileArray);
}
public class NSwag.SwaggerGeneration.AspNetCore.Processors.OperationResponseProcessor : OperationResponseProcessorBase {
    private AspNetCoreToSwaggerGeneratorSettings _settings;
    public OperationResponseProcessor(AspNetCoreToSwaggerGeneratorSettings settings);
    [AsyncStateMachineAttribute("NSwag.SwaggerGeneration.AspNetCore.Processors.OperationResponseProcessor/<ProcessAsync>d__2")]
public sealed virtual Task`1<bool> ProcessAsync(OperationProcessorContext operationProcessorContext);
    protected virtual string GetVoidResponseStatusCode();
    private bool IsVoidResponse(Type returnType);
}
public class NSwag.SwaggerGeneration.Processors.Security.AspNetCoreOperationSecurityScopeProcessor : object {
    private string _name;
    public AspNetCoreOperationSecurityScopeProcessor(string name);
    public sealed virtual Task`1<bool> ProcessAsync(OperationProcessorContext context);
    protected virtual IEnumerable`1<string> GetScopes(IEnumerable`1<AuthorizeAttribute> authorizeAttributes);
}
