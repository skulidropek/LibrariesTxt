internal class NSwag.SwaggerGeneration.WebApi.Infrastructure.RouteAttributeFacade : object {
    private PropertyInfo _template;
    [CompilerGeneratedAttribute]
private Attribute <Attribute>k__BackingField;
    public Attribute Attribute { get; }
    public string Template { get; }
    private RouteAttributeFacade(Attribute attr, PropertyInfo template);
    public RouteAttributeFacade(Attribute attr);
    [CompilerGeneratedAttribute]
public Attribute get_Attribute();
    public string get_Template();
    public static RouteAttributeFacade TryMake(Attribute a);
}
internal class NSwag.SwaggerGeneration.WebApi.Infrastructure.RoutePrefixAttributeFacade : object {
    private PropertyInfo _prefix;
    [CompilerGeneratedAttribute]
private Attribute <Attribute>k__BackingField;
    public Attribute Attribute { get; }
    public string Prefix { get; }
    public RoutePrefixAttributeFacade(Attribute attr);
    [CompilerGeneratedAttribute]
public Attribute get_Attribute();
    public string get_Prefix();
    public static RoutePrefixAttributeFacade TryMake(Attribute a);
}
public class NSwag.SwaggerGeneration.WebApi.Processors.OperationConsumesProcessor : object {
    public sealed virtual Task`1<bool> ProcessAsync(OperationProcessorContext context);
}
public class NSwag.SwaggerGeneration.WebApi.Processors.OperationParameterProcessor : object {
    private WebApiToSwaggerGeneratorSettings _settings;
    public OperationParameterProcessor(WebApiToSwaggerGeneratorSettings settings);
    [AsyncStateMachineAttribute("NSwag.SwaggerGeneration.WebApi.Processors.OperationParameterProcessor/<ProcessAsync>d__2")]
public sealed virtual Task`1<bool> ProcessAsync(OperationProcessorContext context);
    private void EnsureSingleBodyParameter(SwaggerOperationDescription operationDescription);
    private void UpdateConsumedTypes(SwaggerOperationDescription operationDescription);
    private void RemoveUnusedPathParameters(SwaggerOperationDescription operationDescription, string httpPath);
    [AsyncStateMachineAttribute("NSwag.SwaggerGeneration.WebApi.Processors.OperationParameterProcessor/<TryAddFileParameterAsync>d__6")]
private Task`1<SwaggerParameter> TryAddFileParameterAsync(OperationProcessorContext context, JsonTypeDescription typeInfo, ParameterInfo parameter);
    [AsyncStateMachineAttribute("NSwag.SwaggerGeneration.WebApi.Processors.OperationParameterProcessor/<AddFileParameterAsync>d__7")]
private Task`1<SwaggerParameter> AddFileParameterAsync(OperationProcessorContext context, ParameterInfo parameter, bool isFileArray);
    private bool IsFileArray(Type type, JsonTypeDescription typeInfo);
    [AsyncStateMachineAttribute("NSwag.SwaggerGeneration.WebApi.Processors.OperationParameterProcessor/<AddBodyParameterAsync>d__9")]
private Task`1<SwaggerParameter> AddBodyParameterAsync(OperationProcessorContext context, string name, ParameterInfo parameter);
    [AsyncStateMachineAttribute("NSwag.SwaggerGeneration.WebApi.Processors.OperationParameterProcessor/<AddPrimitiveParametersFromUriAsync>d__10")]
private Task`1<SwaggerParameter> AddPrimitiveParametersFromUriAsync(OperationProcessorContext context, string httpPath, string name, ParameterInfo parameter, JsonTypeDescription typeDescription);
    [AsyncStateMachineAttribute("NSwag.SwaggerGeneration.WebApi.Processors.OperationParameterProcessor/<AddPrimitiveParameterAsync>d__11")]
private Task`1<SwaggerParameter> AddPrimitiveParameterAsync(string name, SwaggerOperation operation, ParameterInfo parameter, SwaggerGenerator swaggerGenerator);
    private void InitializeFileParameter(SwaggerParameter operationParameter, bool isFileArray);
}
public class NSwag.SwaggerGeneration.WebApi.Processors.OperationResponseProcessor : OperationResponseProcessorBase {
    private WebApiToSwaggerGeneratorSettings _settings;
    public OperationResponseProcessor(WebApiToSwaggerGeneratorSettings settings);
    [AsyncStateMachineAttribute("NSwag.SwaggerGeneration.WebApi.Processors.OperationResponseProcessor/<ProcessAsync>d__2")]
public sealed virtual Task`1<bool> ProcessAsync(OperationProcessorContext context);
    protected virtual string GetVoidResponseStatusCode();
}
public class NSwag.SwaggerGeneration.WebApi.WebApiToSwaggerGenerator : object {
    private SwaggerJsonSchemaGenerator _schemaGenerator;
    [CompilerGeneratedAttribute]
private WebApiToSwaggerGeneratorSettings <Settings>k__BackingField;
    public WebApiToSwaggerGeneratorSettings Settings { get; }
    public WebApiToSwaggerGenerator(WebApiToSwaggerGeneratorSettings settings);
    public WebApiToSwaggerGenerator(WebApiToSwaggerGeneratorSettings settings, SwaggerJsonSchemaGenerator schemaGenerator);
    public static IEnumerable`1<Type> GetControllerClasses(Assembly assembly);
    [CompilerGeneratedAttribute]
public WebApiToSwaggerGeneratorSettings get_Settings();
    public Task`1<SwaggerDocument> GenerateForControllerAsync();
    public Task`1<SwaggerDocument> GenerateForControllerAsync(Type controllerType);
    [AsyncStateMachineAttribute("NSwag.SwaggerGeneration.WebApi.WebApiToSwaggerGenerator/<GenerateForControllersAsync>d__9")]
public Task`1<SwaggerDocument> GenerateForControllersAsync(IEnumerable`1<Type> controllerTypes);
    [AsyncStateMachineAttribute("NSwag.SwaggerGeneration.WebApi.WebApiToSwaggerGenerator/<CreateDocumentAsync>d__10")]
private Task`1<SwaggerDocument> CreateDocumentAsync();
    [AsyncStateMachineAttribute("NSwag.SwaggerGeneration.WebApi.WebApiToSwaggerGenerator/<GenerateForControllerAsync>d__11")]
private Task`1<bool> GenerateForControllerAsync(SwaggerDocument document, Type controllerType, SwaggerGenerator swaggerGenerator, SwaggerSchemaResolver schemaResolver);
    [AsyncStateMachineAttribute("NSwag.SwaggerGeneration.WebApi.WebApiToSwaggerGenerator/<AddOperationDescriptionsToDocumentAsync>d__12")]
private Task`1<bool> AddOperationDescriptionsToDocumentAsync(SwaggerDocument document, Type controllerType, List`1<Tuple`2<SwaggerOperationDescription, MethodInfo>> operations, SwaggerGenerator swaggerGenerator, SwaggerSchemaResolver schemaResolver);
    [AsyncStateMachineAttribute("NSwag.SwaggerGeneration.WebApi.WebApiToSwaggerGenerator/<RunOperationProcessorsAsync>d__13")]
private Task`1<bool> RunOperationProcessorsAsync(SwaggerDocument document, Type controllerType, MethodInfo methodInfo, SwaggerOperationDescription operationDescription, List`1<SwaggerOperationDescription> allOperations, SwaggerGenerator swaggerGenerator, SwaggerSchemaResolver schemaResolver);
    private static IEnumerable`1<MethodInfo> GetActionMethods(Type controllerType);
    private string GetOperationId(SwaggerDocument document, string controllerName, MethodInfo method);
    private IEnumerable`1<string> GetHttpPaths(Type controllerType, MethodInfo method);
    [IteratorStateMachineAttribute("NSwag.SwaggerGeneration.WebApi.WebApiToSwaggerGenerator/<ExpandOptionalHttpPathParameters>d__17")]
private IEnumerable`1<string> ExpandOptionalHttpPathParameters(string path, MethodInfo method);
    private RouteAttributeFacade GetRouteAttribute(Type type);
    private RoutePrefixAttributeFacade GetRoutePrefixAttribute(Type type);
    private IEnumerable`1<RouteAttributeFacade> GetRouteAttributes(IEnumerable`1<Attribute> attributes);
    private IEnumerable`1<RoutePrefixAttributeFacade> GetRoutePrefixAttributes(IEnumerable`1<Attribute> attributes);
    private string GetActionName(MethodInfo method);
    [IteratorStateMachineAttribute("NSwag.SwaggerGeneration.WebApi.WebApiToSwaggerGenerator/<GetSupportedHttpMethods>d__23")]
private IEnumerable`1<string> GetSupportedHttpMethods(MethodInfo method);
    [IteratorStateMachineAttribute("NSwag.SwaggerGeneration.WebApi.WebApiToSwaggerGenerator/<GetSupportedHttpMethodsFromAttributes>d__24")]
private IEnumerable`1<string> GetSupportedHttpMethodsFromAttributes(MethodInfo method);
}
public class NSwag.SwaggerGeneration.WebApi.WebApiToSwaggerGeneratorSettings : SwaggerGeneratorSettings {
    [CompilerGeneratedAttribute]
private string <DefaultUrlTemplate>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsAspNetCore>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <AddMissingPathParameters>k__BackingField;
    public string DefaultUrlTemplate { get; public set; }
    public bool IsAspNetCore { get; public set; }
    public bool AddMissingPathParameters { get; public set; }
    [CompilerGeneratedAttribute]
public string get_DefaultUrlTemplate();
    [CompilerGeneratedAttribute]
public void set_DefaultUrlTemplate(string value);
    [CompilerGeneratedAttribute]
public bool get_IsAspNetCore();
    [CompilerGeneratedAttribute]
public void set_IsAspNetCore(bool value);
    [CompilerGeneratedAttribute]
public bool get_AddMissingPathParameters();
    [CompilerGeneratedAttribute]
public void set_AddMissingPathParameters(bool value);
}
