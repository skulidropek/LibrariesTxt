[CompilerGeneratedAttribute]
[EmbeddedAttribute]
internal class Microsoft.CodeAnalysis.EmbeddedAttribute : Attribute {
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class NuGet.LibraryModel.CentralPackageVersion : object {
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    [CompilerGeneratedAttribute]
private VersionRange <VersionRange>k__BackingField;
    public string Name { get; }
    public VersionRange VersionRange { get; }
    public CentralPackageVersion(string name, VersionRange versionRange);
    [CompilerGeneratedAttribute]
public string get_Name();
    [CompilerGeneratedAttribute]
public VersionRange get_VersionRange();
    public virtual string ToString();
    public virtual int GetHashCode();
    [NullableContextAttribute("2")]
public virtual bool Equals(object obj);
    [NullableContextAttribute("2")]
public sealed virtual bool Equals(CentralPackageVersion other);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class NuGet.LibraryModel.CentralPackageVersionNameComparer : object {
    [CompilerGeneratedAttribute]
private static CentralPackageVersionNameComparer <Default>k__BackingField;
    public static CentralPackageVersionNameComparer Default { get; }
    private static CentralPackageVersionNameComparer();
    [CompilerGeneratedAttribute]
public static CentralPackageVersionNameComparer get_Default();
    [NullableContextAttribute("2")]
public sealed virtual bool Equals(CentralPackageVersion x, CentralPackageVersion y);
    public sealed virtual int GetHashCode(CentralPackageVersion obj);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class NuGet.LibraryModel.DownloadDependency : object {
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    [CompilerGeneratedAttribute]
private VersionRange <VersionRange>k__BackingField;
    public string Name { get; }
    public VersionRange VersionRange { get; }
    public DownloadDependency(string name, VersionRange versionRange);
    [CompilerGeneratedAttribute]
public string get_Name();
    [CompilerGeneratedAttribute]
public VersionRange get_VersionRange();
    public static LibraryRange op_Implicit(DownloadDependency library);
    [NullableContextAttribute("2")]
public sealed virtual int CompareTo(DownloadDependency other);
    public virtual string ToString();
    public virtual int GetHashCode();
    [NullableContextAttribute("2")]
public virtual bool Equals(object obj);
    [NullableContextAttribute("2")]
public sealed virtual bool Equals(DownloadDependency other);
    [ObsoleteAttribute("This type is immutable, so there is no need or point to clone it.")]
public DownloadDependency Clone();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class NuGet.LibraryModel.FrameworkDependency : object {
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    [CompilerGeneratedAttribute]
private FrameworkDependencyFlags <PrivateAssets>k__BackingField;
    public string Name { get; }
    public FrameworkDependencyFlags PrivateAssets { get; }
    public FrameworkDependency(string name, FrameworkDependencyFlags privateAssets);
    [CompilerGeneratedAttribute]
public string get_Name();
    [CompilerGeneratedAttribute]
public FrameworkDependencyFlags get_PrivateAssets();
    [NullableContextAttribute("2")]
public sealed virtual int CompareTo(FrameworkDependency other);
    [NullableContextAttribute("2")]
public sealed virtual bool Equals(FrameworkDependency other);
    public virtual int GetHashCode();
}
[FlagsAttribute]
public enum NuGet.LibraryModel.FrameworkDependencyFlags : Enum {
    public ushort value__;
    public static FrameworkDependencyFlags None;
    public static FrameworkDependencyFlags All;
}
public static class NuGet.LibraryModel.FrameworkDependencyFlagsUtils : object {
    public static FrameworkDependencyFlags Default;
    public static FrameworkDependencyFlags GetFlags(IEnumerable`1<string> values);
    [NullableContextAttribute("1")]
public static string GetFlagString(FrameworkDependencyFlags flags);
    [NullableContextAttribute("2")]
public static FrameworkDependencyFlags GetFlags(string flags);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public static class NuGet.LibraryModel.KnownLibraryProperties : object {
    public static string AssemblyPath;
    public static string LockFileLibrary;
    public static string LockFileTargetLibrary;
    public static string PackageSpec;
    public static string TargetFrameworkInformation;
    public static string MSBuildProjectPath;
    public static string ProjectRestoreMetadataFiles;
    public static string FrameworkAssemblies;
    public static string ProjectFrameworks;
    public static string ProjectStyle;
    public static string FrameworkReferences;
    private static KnownLibraryProperties();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[DefaultMemberAttribute("Item")]
[RequiredMemberAttribute]
public class NuGet.LibraryModel.Library : object {
    public static IEqualityComparer`1<Library> IdentityComparer;
    [CompilerGeneratedAttribute]
private LibraryRange <LibraryRange>k__BackingField;
    [CompilerGeneratedAttribute]
private LibraryIdentity <Identity>k__BackingField;
    [CompilerGeneratedAttribute]
private IEnumerable`1<LibraryDependency> <Dependencies>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <Resolved>k__BackingField;
    [NullableAttribute("2")]
[CompilerGeneratedAttribute]
private string <Path>k__BackingField;
    [CompilerGeneratedAttribute]
private IDictionary`2<string, object> <Items>k__BackingField;
    [RequiredMemberAttribute]
public LibraryRange LibraryRange { get; public set; }
    [RequiredMemberAttribute]
public LibraryIdentity Identity { get; public set; }
    [RequiredMemberAttribute]
public IEnumerable`1<LibraryDependency> Dependencies { get; public set; }
    public bool Resolved { get; public set; }
    [NullableAttribute("2")]
public string Path { get; public set; }
    public IDictionary`2<string, object> Items { get; public set; }
    public object Item { get; public set; }
    [SetsRequiredMembersAttribute]
public Library(LibraryRange libraryRange, LibraryIdentity identity, IEnumerable`1<LibraryDependency> dependencies);
    private static Library();
    [CompilerGeneratedAttribute]
public LibraryRange get_LibraryRange();
    [CompilerGeneratedAttribute]
public void set_LibraryRange(LibraryRange value);
    [CompilerGeneratedAttribute]
public LibraryIdentity get_Identity();
    [CompilerGeneratedAttribute]
public void set_Identity(LibraryIdentity value);
    [CompilerGeneratedAttribute]
public IEnumerable`1<LibraryDependency> get_Dependencies();
    [CompilerGeneratedAttribute]
public void set_Dependencies(IEnumerable`1<LibraryDependency> value);
    [CompilerGeneratedAttribute]
public bool get_Resolved();
    [CompilerGeneratedAttribute]
public void set_Resolved(bool value);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public string get_Path();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public void set_Path(string value);
    [CompilerGeneratedAttribute]
public IDictionary`2<string, object> get_Items();
    [CompilerGeneratedAttribute]
public void set_Items(IDictionary`2<string, object> value);
    public object get_Item(string key);
    public void set_Item(string key, object value);
    public virtual string ToString();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[RequiredMemberAttribute]
public class NuGet.LibraryModel.LibraryDependency : object {
    [CompilerGeneratedAttribute]
private LibraryRange <LibraryRange>k__BackingField;
    [CompilerGeneratedAttribute]
private LibraryIncludeFlags <IncludeType>k__BackingField;
    [CompilerGeneratedAttribute]
private LibraryIncludeFlags <SuppressParent>k__BackingField;
    [CompilerGeneratedAttribute]
private IList`1<NuGetLogCode> <NoWarn>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <AutoReferenced>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <VersionCentrallyManaged>k__BackingField;
    [CompilerGeneratedAttribute]
private LibraryDependencyReferenceType <ReferenceType>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <GeneratePathProperty>k__BackingField;
    [NullableAttribute("2")]
[CompilerGeneratedAttribute]
private string <Aliases>k__BackingField;
    [NullableAttribute("2")]
[CompilerGeneratedAttribute]
private VersionRange <VersionOverride>k__BackingField;
    [RequiredMemberAttribute]
public LibraryRange LibraryRange { get; public set; }
    public LibraryIncludeFlags IncludeType { get; public set; }
    public LibraryIncludeFlags SuppressParent { get; public set; }
    public IList`1<NuGetLogCode> NoWarn { get; public set; }
    public string Name { get; }
    public bool AutoReferenced { get; public set; }
    public bool VersionCentrallyManaged { get; public set; }
    public LibraryDependencyReferenceType ReferenceType { get; public set; }
    public bool GeneratePathProperty { get; public set; }
    [NullableAttribute("2")]
public string Aliases { get; public set; }
    [NullableAttribute("2")]
public VersionRange VersionOverride { get; public set; }
    [ObsoleteAttribute("Constructors of types with required members are not supported in this version of your compiler.", "True")]
[CompilerFeatureRequiredAttribute("RequiredMembers")]
public LibraryDependency(IList`1<NuGetLogCode> noWarn);
    [SetsRequiredMembersAttribute]
public LibraryDependency(LibraryRange libraryRange);
    [SetsRequiredMembersAttribute]
internal LibraryDependency(LibraryRange libraryRange, LibraryIncludeFlags includeType, LibraryIncludeFlags suppressParent, IList`1<NuGetLogCode> noWarn, bool autoReferenced, bool generatePathProperty, bool versionCentrallyManaged, LibraryDependencyReferenceType libraryDependencyReferenceType, string aliases, VersionRange versionOverride);
    [CompilerGeneratedAttribute]
public LibraryRange get_LibraryRange();
    [CompilerGeneratedAttribute]
public void set_LibraryRange(LibraryRange value);
    [CompilerGeneratedAttribute]
public LibraryIncludeFlags get_IncludeType();
    [CompilerGeneratedAttribute]
public void set_IncludeType(LibraryIncludeFlags value);
    [CompilerGeneratedAttribute]
public LibraryIncludeFlags get_SuppressParent();
    [CompilerGeneratedAttribute]
public void set_SuppressParent(LibraryIncludeFlags value);
    [CompilerGeneratedAttribute]
public IList`1<NuGetLogCode> get_NoWarn();
    [CompilerGeneratedAttribute]
public void set_NoWarn(IList`1<NuGetLogCode> value);
    public string get_Name();
    [CompilerGeneratedAttribute]
public bool get_AutoReferenced();
    [CompilerGeneratedAttribute]
public void set_AutoReferenced(bool value);
    [CompilerGeneratedAttribute]
public bool get_VersionCentrallyManaged();
    [CompilerGeneratedAttribute]
public void set_VersionCentrallyManaged(bool value);
    [CompilerGeneratedAttribute]
public LibraryDependencyReferenceType get_ReferenceType();
    [CompilerGeneratedAttribute]
public void set_ReferenceType(LibraryDependencyReferenceType value);
    [CompilerGeneratedAttribute]
public bool get_GeneratePathProperty();
    [CompilerGeneratedAttribute]
public void set_GeneratePathProperty(bool value);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public string get_Aliases();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public void set_Aliases(string value);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public VersionRange get_VersionOverride();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public void set_VersionOverride(VersionRange value);
    public virtual string ToString();
    public virtual int GetHashCode();
    [NullableContextAttribute("2")]
public virtual bool Equals(object obj);
    [NullableContextAttribute("2")]
public sealed virtual bool Equals(LibraryDependency other);
    public LibraryDependency Clone();
    public static void ApplyCentralVersionInformation(IList`1<LibraryDependency> packageReferences, IDictionary`2<string, CentralPackageVersion> centralPackageVersions);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class NuGet.LibraryModel.LibraryDependencyInfo : object {
    [CompilerGeneratedAttribute]
private bool <Resolved>k__BackingField;
    [CompilerGeneratedAttribute]
private LibraryIdentity <Library>k__BackingField;
    [CompilerGeneratedAttribute]
private IEnumerable`1<LibraryDependency> <Dependencies>k__BackingField;
    [CompilerGeneratedAttribute]
private NuGetFramework <Framework>k__BackingField;
    public bool Resolved { get; }
    public LibraryIdentity Library { get; }
    public IEnumerable`1<LibraryDependency> Dependencies { get; }
    public NuGetFramework Framework { get; }
    public LibraryDependencyInfo(LibraryIdentity library, bool resolved, NuGetFramework framework, IEnumerable`1<LibraryDependency> dependencies);
    [CompilerGeneratedAttribute]
public bool get_Resolved();
    [CompilerGeneratedAttribute]
public LibraryIdentity get_Library();
    [CompilerGeneratedAttribute]
public IEnumerable`1<LibraryDependency> get_Dependencies();
    [CompilerGeneratedAttribute]
public NuGetFramework get_Framework();
    public static LibraryDependencyInfo CreateUnresolved(LibraryIdentity library, NuGetFramework framework);
    public static LibraryDependencyInfo Create(LibraryIdentity library, NuGetFramework framework, IEnumerable`1<LibraryDependency> dependencies);
}
public enum NuGet.LibraryModel.LibraryDependencyReferenceType : Enum {
    public int value__;
    public static LibraryDependencyReferenceType None;
    public static LibraryDependencyReferenceType Transitive;
    public static LibraryDependencyReferenceType Direct;
}
[FlagsAttribute]
public enum NuGet.LibraryModel.LibraryDependencyTarget : Enum {
    public ushort value__;
    public static LibraryDependencyTarget None;
    public static LibraryDependencyTarget Package;
    public static LibraryDependencyTarget Project;
    public static LibraryDependencyTarget ExternalProject;
    public static LibraryDependencyTarget Assembly;
    public static LibraryDependencyTarget Reference;
    public static LibraryDependencyTarget WinMD;
    public static LibraryDependencyTarget All;
    public static LibraryDependencyTarget PackageProjectExternal;
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ExtensionAttribute]
public static class NuGet.LibraryModel.LibraryDependencyTargetUtils : object {
    private static ConcurrentDictionary`2<LibraryDependencyTarget, string> LibraryDependencyTargetCache;
    private static LibraryDependencyTargetUtils();
    [NullableContextAttribute("2")]
public static LibraryDependencyTarget Parse(string flag);
    private static LibraryDependencyTarget ParseMultiFlag(string flag, int end);
    private static LibraryDependencyTarget ParseSingleFlag(StringSegment flag);
    public static string GetFlagString(LibraryDependencyTarget flags);
    [ExtensionAttribute]
public static string AsString(LibraryDependencyTarget includeFlags);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ExtensionAttribute]
public static class NuGet.LibraryModel.LibraryExtensions : object {
    [ExtensionAttribute]
public static bool IsEclipsedBy(LibraryRange library, LibraryRange other);
    [ExtensionAttribute]
public static T GetItem(Library library, string key);
    [ExtensionAttribute]
public static T GetRequiredItem(Library library, string key);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[RequiredMemberAttribute]
public class NuGet.LibraryModel.LibraryIdentity : object {
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    [CompilerGeneratedAttribute]
private NuGetVersion <Version>k__BackingField;
    [CompilerGeneratedAttribute]
private LibraryType <Type>k__BackingField;
    [RequiredMemberAttribute]
public string Name { get; public set; }
    [RequiredMemberAttribute]
public NuGetVersion Version { get; public set; }
    [RequiredMemberAttribute]
public LibraryType Type { get; public set; }
    [SetsRequiredMembersAttribute]
public LibraryIdentity(string name, NuGetVersion version, LibraryType type);
    [CompilerGeneratedAttribute]
public string get_Name();
    [CompilerGeneratedAttribute]
public void set_Name(string value);
    [CompilerGeneratedAttribute]
public NuGetVersion get_Version();
    [CompilerGeneratedAttribute]
public void set_Version(NuGetVersion value);
    [CompilerGeneratedAttribute]
public LibraryType get_Type();
    [CompilerGeneratedAttribute]
public void set_Type(LibraryType value);
    public virtual string ToString();
    [NullableContextAttribute("2")]
public sealed virtual bool Equals(LibraryIdentity other);
    [NullableContextAttribute("2")]
public virtual bool Equals(object obj);
    public virtual int GetHashCode();
    [NullableContextAttribute("2")]
public static bool op_Equality(LibraryIdentity left, LibraryIdentity right);
    [NullableContextAttribute("2")]
public static bool op_Inequality(LibraryIdentity left, LibraryIdentity right);
    public static LibraryRange op_Implicit(LibraryIdentity library);
    [NullableContextAttribute("2")]
public sealed virtual int CompareTo(LibraryIdentity other);
}
[FlagsAttribute]
public enum NuGet.LibraryModel.LibraryIncludeFlags : Enum {
    public ushort value__;
    public static LibraryIncludeFlags None;
    public static LibraryIncludeFlags Runtime;
    public static LibraryIncludeFlags Compile;
    public static LibraryIncludeFlags Build;
    public static LibraryIncludeFlags Native;
    public static LibraryIncludeFlags ContentFiles;
    public static LibraryIncludeFlags Analyzers;
    public static LibraryIncludeFlags BuildTransitive;
    public static LibraryIncludeFlags All;
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ExtensionAttribute]
public static class NuGet.LibraryModel.LibraryIncludeFlagUtils : object {
    public static LibraryIncludeFlags DefaultSuppressParent;
    public static LibraryIncludeFlags NoContent;
    private static ConcurrentDictionary`2<LibraryIncludeFlags, string> LibraryIncludeFlagsCache;
    private static LibraryIncludeFlagUtils();
    public static LibraryIncludeFlags GetFlags(IEnumerable`1<string> flags);
    public static string GetFlagString(LibraryIncludeFlags flags);
    public static LibraryIncludeFlags GetFlags(string flags, LibraryIncludeFlags defaultFlags);
    [ExtensionAttribute]
public static string AsString(LibraryIncludeFlags includeFlags);
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
[RequiredMemberAttribute]
public class NuGet.LibraryModel.LibraryRange : object {
    [NullableAttribute("1")]
[CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    [CompilerGeneratedAttribute]
private VersionRange <VersionRange>k__BackingField;
    [CompilerGeneratedAttribute]
private LibraryDependencyTarget <TypeConstraint>k__BackingField;
    [NullableAttribute("1")]
[RequiredMemberAttribute]
public string Name { get; public set; }
    public VersionRange VersionRange { get; public set; }
    public LibraryDependencyTarget TypeConstraint { get; public set; }
    [NullableContextAttribute("1")]
[SetsRequiredMembersAttribute]
public LibraryRange(string name);
    [NullableContextAttribute("1")]
[SetsRequiredMembersAttribute]
public LibraryRange(string name, LibraryDependencyTarget typeConstraint);
    [NullableContextAttribute("1")]
[SetsRequiredMembersAttribute]
public LibraryRange(string name, VersionRange versionRange, LibraryDependencyTarget typeConstraint);
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
public string get_Name();
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
public void set_Name(string value);
    [CompilerGeneratedAttribute]
public VersionRange get_VersionRange();
    [CompilerGeneratedAttribute]
public void set_VersionRange(VersionRange value);
    [CompilerGeneratedAttribute]
public LibraryDependencyTarget get_TypeConstraint();
    [CompilerGeneratedAttribute]
public void set_TypeConstraint(LibraryDependencyTarget value);
    [NullableContextAttribute("1")]
public virtual string ToString();
    public string ToLockFileDependencyGroupString();
    public bool TypeConstraintAllows(LibraryDependencyTarget flag);
    public bool TypeConstraintAllowsAnyOf(LibraryDependencyTarget flag);
    public sealed virtual bool Equals(LibraryRange other);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
    public static bool op_Equality(LibraryRange left, LibraryRange right);
    public static bool op_Inequality(LibraryRange left, LibraryRange right);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class NuGet.LibraryModel.LibraryType : ValueType {
    private static ConcurrentDictionary`2<string, LibraryType> _knownLibraryTypes;
    public static LibraryType Project;
    public static LibraryType ExternalProject;
    public static LibraryType Package;
    public static LibraryType Assembly;
    public static LibraryType Reference;
    public static LibraryType WinMD;
    public static LibraryType Unresolved;
    [CompilerGeneratedAttribute]
private string <Value>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsKnown>k__BackingField;
    public string Value { get; }
    public bool IsKnown { get; }
    private LibraryType(string value, bool isKnown);
    private static LibraryType();
    [IsReadOnlyAttribute]
[CompilerGeneratedAttribute]
public string get_Value();
    [IsReadOnlyAttribute]
[CompilerGeneratedAttribute]
public bool get_IsKnown();
    public static LibraryType Parse(string value);
    public virtual string ToString();
    public sealed virtual bool Equals(LibraryType other);
    [NullableContextAttribute("2")]
public virtual bool Equals(object obj);
    public static bool op_Equality(LibraryType left, LibraryType right);
    public static bool op_Inequality(LibraryType left, LibraryType right);
    public static string op_Implicit(LibraryType libraryType);
    public virtual int GetHashCode();
    private static LibraryType Define(string name);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ExtensionAttribute]
internal static class NuGet.NoAllocEnumerateExtensions : object {
    [ExtensionAttribute]
public static OptimisticallyNonAllocatingListEnumerable`1<T> NoAllocEnumerate(IList`1<T> list);
    [ExtensionAttribute]
public static OptimisticallyNonAllocatingEnumerable`1<T> NoAllocEnumerate(IEnumerable`1<T> source);
    [ExtensionAttribute]
public static OptimisticallyNonAllocatingDictionaryEnumerable`2<TKey, TValue> NoAllocEnumerate(IDictionary`2<TKey, TValue> dictionary);
}
internal static class NuGet.Shared.EncodingUtility : object {
    [NullableContextAttribute("1")]
internal static string ToHex(Byte[] bytes, int length);
    private static char ToHexChar(int input);
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
[ExtensionAttribute]
internal static class NuGet.Shared.EqualityUtility : object {
    [ExtensionAttribute]
internal static bool OrderedEquals(IEnumerable`1<TSource> self, IEnumerable`1<TSource> other, Func`2<TSource, TKey> keySelector, IComparer`1<TKey> orderComparer, IEqualityComparer`1<TSource> sequenceComparer);
    [ExtensionAttribute]
internal static bool OrderedEquals(ICollection`1<TSource> self, ICollection`1<TSource> other, Func`2<TSource, TKey> keySelector, IComparer`1<TKey> orderComparer, IEqualityComparer`1<TSource> sequenceComparer);
    [ExtensionAttribute]
internal static bool OrderedEquals(IList`1<TSource> self, IList`1<TSource> other, Func`2<TSource, TKey> keySelector, IComparer`1<TKey> orderComparer, IEqualityComparer`1<TSource> sequenceComparer);
    [ExtensionAttribute]
internal static bool SequenceEqualWithNullCheck(IEnumerable`1<T> self, IEnumerable`1<T> other, IEqualityComparer`1<T> comparer);
    [ExtensionAttribute]
internal static bool SequenceEqualWithNullCheck(ICollection`1<T> self, ICollection`1<T> other, IEqualityComparer`1<T> comparer);
    [ExtensionAttribute]
internal static bool SequenceEqualWithNullCheck(IList`1<T> self, IList`1<T> other, IEqualityComparer`1<T> comparer);
    [ExtensionAttribute]
internal static bool SetEqualsWithNullCheck(ISet`1<T> self, ISet`1<T> other, IEqualityComparer`1<T> comparer);
    [NullableContextAttribute("1")]
internal static bool DictionaryEquals(IDictionary`2<TKey, TValue> self, IDictionary`2<TKey, TValue> other, Func`3<TValue, TValue, bool> compareValues);
    [NullableContextAttribute("1")]
internal static bool DictionaryOfSequenceEquals(IDictionary`2<TKey, IEnumerable`1<TValue>> self, IDictionary`2<TKey, IEnumerable`1<TValue>> other);
    [NullableContextAttribute("1")]
internal static bool EqualsWithNullCheck(T self, T other);
    [NullableContextAttribute("1")]
[ExtensionAttribute]
internal static bool EqualsFalse(string value);
    private static bool TryIdentityEquals(T self, T other, Boolean& equals);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ExtensionAttribute]
internal static class NuGet.Shared.Extensions : object {
    [ExtensionAttribute]
public static List`1<T> AsList(IEnumerable`1<T> enumerable);
    [ExtensionAttribute]
public static HashSet`1<T> AsHashSet(ISet`1<T> enumerable, IEqualityComparer`1<T> comparer);
    [ExtensionAttribute]
public static void ForEach(IEnumerable`1<T> enumeration, Action`1<T> action);
    [ExtensionAttribute]
public static void AppendInt(StringBuilder sb, int value);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[IsByRefLikeAttribute]
[ObsoleteAttribute("Types with embedded references are not supported in this version of your compiler.", "True")]
[CompilerFeatureRequiredAttribute("RefStructs")]
internal class NuGet.Shared.HashCodeCombiner : ValueType {
    private static long Seed;
    private long _combinedHash;
    internal int CombinedHash { get; }
    internal int get_CombinedHash();
    private void AddHashCode(int i);
    internal void AddObject(int i);
    internal void AddObject(bool b);
    internal void AddObject(T o, IEqualityComparer`1<T> comparer);
    internal void AddObject(T o);
    [NullableContextAttribute("0")]
internal void AddStruct(Nullable`1<T> o);
    [NullableContextAttribute("0")]
internal void AddStruct(T o);
    [NullableContextAttribute("2")]
internal void AddStringIgnoreCase(string s);
    internal void AddSequence(IEnumerable`1<T> sequence);
    internal void AddSequence(T[] array);
    internal void AddSequence(IList`1<T> list);
    internal void AddSequence(IReadOnlyList`1<T> list);
    internal void AddUnorderedSequence(IEnumerable`1<T> list);
    internal void AddUnorderedSequence(IEnumerable`1<T> list, IEqualityComparer`1<T> comparer);
    internal void AddDictionary(IEnumerable`1<KeyValuePair`2<TKey, TValue>> dictionary);
    internal static int GetHashCode(T1 o1, T2 o2);
    internal static int GetHashCode(T1 o1, T2 o2, T3 o3);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal static class NuGet.Shared.XmlUtility : object {
    internal static XDocument Load(string path);
    internal static XDocument Load(string path, LoadOptions options);
    internal static XDocument Load(Stream input);
    internal static XDocument Load(Stream input, LoadOptions options);
    internal static string GetEncodedXMLName(string name);
    internal static XmlReaderSettings GetXmlReaderSettings(LoadOptions options);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class NuGet.SimplePool`1 : object {
    private object _lockObj;
    private Stack`1<T> _values;
    private Func`1<T> _allocate;
    public SimplePool`1(Func`1<T> allocate);
    public T Allocate();
    public void Free(T value);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class NuGet.StringBuilderPool : object {
    private static int MaxPoolSize;
    private SimplePool`1<StringBuilder> _pool;
    public static StringBuilderPool Shared;
    private static StringBuilderPool();
    public StringBuilder Rent(int minimumCapacity);
    public string ToStringAndReturn(StringBuilder builder);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal static class NuGet.TaskResult : object {
    [CompilerGeneratedAttribute]
private static Task`1<bool> <True>k__BackingField;
    [CompilerGeneratedAttribute]
private static Task`1<bool> <False>k__BackingField;
    [CompilerGeneratedAttribute]
private static Task`1<int> <Zero>k__BackingField;
    [CompilerGeneratedAttribute]
private static Task`1<int> <One>k__BackingField;
    public static Task`1<bool> True { get; }
    public static Task`1<bool> False { get; }
    public static Task`1<int> Zero { get; }
    public static Task`1<int> One { get; }
    private static TaskResult();
    [CompilerGeneratedAttribute]
public static Task`1<bool> get_True();
    [CompilerGeneratedAttribute]
public static Task`1<bool> get_False();
    public static Task`1<bool> Boolean(bool b);
    [CompilerGeneratedAttribute]
public static Task`1<int> get_Zero();
    [CompilerGeneratedAttribute]
public static Task`1<int> get_One();
    public static Task`1<int> Integer(int i);
    public static Task`1<T> Null();
    public static Task`1<IEnumerable`1<T>> EmptyEnumerable();
    public static Task`1<T[]> EmptyArray();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class NuGet.TaskResultCache`2 : object {
    private ConcurrentDictionary`2<TKey, Task`1<TValue>> _cache;
    private ConcurrentDictionary`2<TKey, object> _perTaskLock;
    public TaskResultCache`2(IEqualityComparer`1<TKey> comparer);
    public Task`1<TValue> GetOrAddAsync(TKey key, Func`2<TState, Task`1<TValue>> valueFactory, TState state, CancellationToken cancellationToken);
    public Task`1<TValue> GetOrAddAsync(TKey key, bool refresh, Func`2<TState, Task`1<TValue>> valueFactory, TState state, CancellationToken cancellationToken);
}
[ExtensionAttribute]
internal static class System.Collections.Generic.DeconstructionExtensions : object {
    [NullableContextAttribute("1")]
[ExtensionAttribute]
[DebuggerStepThroughAttribute]
public static void Deconstruct(KeyValuePair`2<TKey, TValue> pair, TKey& key, TValue& value);
}
[AttributeUsageAttribute("2432")]
internal class System.Diagnostics.CodeAnalysis.AllowNullAttribute : Attribute {
}
[AttributeUsageAttribute("2432")]
internal class System.Diagnostics.CodeAnalysis.DisallowNullAttribute : Attribute {
}
[AttributeUsageAttribute("64")]
internal class System.Diagnostics.CodeAnalysis.DoesNotReturnAttribute : Attribute {
}
[AttributeUsageAttribute("2048")]
internal class System.Diagnostics.CodeAnalysis.DoesNotReturnIfAttribute : Attribute {
    [CompilerGeneratedAttribute]
private bool <ParameterValue>k__BackingField;
    public bool ParameterValue { get; }
    public DoesNotReturnIfAttribute(bool parameterValue);
    [CompilerGeneratedAttribute]
public bool get_ParameterValue();
}
[AttributeUsageAttribute("10624")]
internal class System.Diagnostics.CodeAnalysis.MaybeNullAttribute : Attribute {
}
[AttributeUsageAttribute("2048")]
internal class System.Diagnostics.CodeAnalysis.MaybeNullWhenAttribute : Attribute {
    [CompilerGeneratedAttribute]
private bool <ReturnValue>k__BackingField;
    public bool ReturnValue { get; }
    public MaybeNullWhenAttribute(bool returnValue);
    [CompilerGeneratedAttribute]
public bool get_ReturnValue();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[AttributeUsageAttribute("192")]
internal class System.Diagnostics.CodeAnalysis.MemberNotNullAttribute : Attribute {
    [CompilerGeneratedAttribute]
private String[] <Members>k__BackingField;
    public String[] Members { get; }
    public MemberNotNullAttribute(string member);
    public MemberNotNullAttribute(String[] members);
    [CompilerGeneratedAttribute]
public String[] get_Members();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[AttributeUsageAttribute("192")]
internal class System.Diagnostics.CodeAnalysis.MemberNotNullWhenAttribute : Attribute {
    [CompilerGeneratedAttribute]
private bool <ReturnValue>k__BackingField;
    [CompilerGeneratedAttribute]
private String[] <Members>k__BackingField;
    public bool ReturnValue { get; }
    public String[] Members { get; }
    public MemberNotNullWhenAttribute(bool returnValue, string member);
    public MemberNotNullWhenAttribute(bool returnValue, String[] members);
    [CompilerGeneratedAttribute]
public bool get_ReturnValue();
    [CompilerGeneratedAttribute]
public String[] get_Members();
}
[AttributeUsageAttribute("10624")]
internal class System.Diagnostics.CodeAnalysis.NotNullAttribute : Attribute {
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[AttributeUsageAttribute("10368")]
internal class System.Diagnostics.CodeAnalysis.NotNullIfNotNullAttribute : Attribute {
    [CompilerGeneratedAttribute]
private string <ParameterName>k__BackingField;
    public string ParameterName { get; }
    public NotNullIfNotNullAttribute(string parameterName);
    [CompilerGeneratedAttribute]
public string get_ParameterName();
}
[AttributeUsageAttribute("2048")]
internal class System.Diagnostics.CodeAnalysis.NotNullWhenAttribute : Attribute {
    [CompilerGeneratedAttribute]
private bool <ReturnValue>k__BackingField;
    public bool ReturnValue { get; }
    public NotNullWhenAttribute(bool returnValue);
    [CompilerGeneratedAttribute]
public bool get_ReturnValue();
}
[AttributeUsageAttribute("32")]
internal class System.Diagnostics.CodeAnalysis.SetsRequiredMembersAttribute : Attribute {
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[AttributeUsageAttribute("32767")]
internal class System.Runtime.CompilerServices.CompilerFeatureRequiredAttribute : Attribute {
    [CompilerGeneratedAttribute]
private string <FeatureName>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsOptional>k__BackingField;
    public static string RefStructs;
    public static string RequiredMembers;
    public string FeatureName { get; }
    public bool IsOptional { get; public set; }
    public CompilerFeatureRequiredAttribute(string featureName);
    [CompilerGeneratedAttribute]
public string get_FeatureName();
    [CompilerGeneratedAttribute]
public bool get_IsOptional();
    [CompilerGeneratedAttribute]
public Void modreq(System.Runtime.CompilerServices.IsExternalInit) set_IsOptional(bool value);
}
[DebuggerNonUserCodeAttribute]
internal static class System.Runtime.CompilerServices.IsExternalInit : object {
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
[AttributeUsageAttribute("27524")]
internal class System.Runtime.CompilerServices.NullableAttribute : Attribute {
    public Byte[] NullableFlags;
    public NullableAttribute(byte );
    public NullableAttribute(Byte[] );
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
[AttributeUsageAttribute("5196")]
internal class System.Runtime.CompilerServices.NullableContextAttribute : Attribute {
    public byte Flag;
    public NullableContextAttribute(byte );
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
[AttributeUsageAttribute("2")]
internal class System.Runtime.CompilerServices.RefSafetyRulesAttribute : Attribute {
    public int Version;
    public RefSafetyRulesAttribute(int );
}
[AttributeUsageAttribute("396")]
[EditorBrowsableAttribute("1")]
internal class System.Runtime.CompilerServices.RequiredMemberAttribute : Attribute {
}
