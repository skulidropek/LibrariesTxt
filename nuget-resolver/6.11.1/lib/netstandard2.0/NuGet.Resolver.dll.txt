[CompilerGeneratedAttribute]
[EmbeddedAttribute]
internal class Microsoft.CodeAnalysis.EmbeddedAttribute : Attribute {
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ExtensionAttribute]
internal static class NuGet.NoAllocEnumerateExtensions : object {
    [ExtensionAttribute]
public static OptimisticallyNonAllocatingListEnumerable`1<T> NoAllocEnumerate(IList`1<T> list);
    [ExtensionAttribute]
public static OptimisticallyNonAllocatingEnumerable`1<T> NoAllocEnumerate(IEnumerable`1<T> source);
    [ExtensionAttribute]
public static OptimisticallyNonAllocatingDictionaryEnumerable`2<TKey, TValue> NoAllocEnumerate(IDictionary`2<TKey, TValue> dictionary);
}
public class NuGet.Resolver.CombinationSolver`1 : object {
    private T[] _solution;
    private IList`1<IEnumerable`1<T>> _initialDomains;
    private List`1<HashSet`1<T>> _currentDomains;
    private List`1<List`1<T>> _currentDomainsSorted;
    private List`1<HashSet`1<int>> _conflictSet;
    private List`1<Stack`1<int>> _pastForwardChecking;
    private List`1<Stack`1<int>> _futureForwardChecking;
    private List`1<Stack`1<Stack`1<T>>> _reductions;
    private IComparer`1<T> _prioritySorter;
    private Func`3<T, T, bool> _shouldRejectPair;
    private CombinationSolver`1(IEnumerable`1<IEnumerable`1<T>> groupedItems, IComparer`1<T> itemSorter, Func`3<T, T, bool> shouldRejectPairFunc);
    public static IEnumerable`1<T> FindSolution(IEnumerable`1<IEnumerable`1<T>> groupedItems, IComparer`1<T> itemSorter, Func`3<T, T, bool> shouldRejectPairFunc, Action`1<IEnumerable`1<T>> diagnosticOutput);
    private IEnumerable`1<T> FindSolution(Action`1<IEnumerable`1<T>> diagnosticOutput);
    private int MoveForward(int i, Boolean& consistent);
    private int MoveBackward(int i, Boolean& consistent);
    private bool CheckForward(int i, int j);
    private void UndoReductions(int i);
    private void UpdateCurrentDomain(int i);
    [IteratorStateMachineAttribute("NuGet.Resolver.CombinationSolver`1/<GetSortedList>d__18")]
private IEnumerable`1<T> GetSortedList(int pos);
}
public class NuGet.Resolver.CompareWrapper`1 : object {
    private Func`3<T, T, int> compareImpl;
    public CompareWrapper`1(Func`3<T, T, int> compareImpl);
    public sealed virtual int Compare(T x, T y);
}
public enum NuGet.Resolver.DependencyBehavior : Enum {
    public int value__;
    public static DependencyBehavior Ignore;
    public static DependencyBehavior Lowest;
    public static DependencyBehavior HighestPatch;
    public static DependencyBehavior HighestMinor;
    public static DependencyBehavior Highest;
}
public class NuGet.Resolver.NuGetResolverConstraintException : NuGetResolverException {
    public NuGetResolverConstraintException(string message);
    protected NuGetResolverConstraintException(SerializationInfo info, StreamingContext context);
}
public class NuGet.Resolver.NuGetResolverException : Exception {
    public NuGetResolverException(string message);
    protected NuGetResolverException(SerializationInfo info, StreamingContext context);
}
public class NuGet.Resolver.NuGetResolverInputException : NuGetResolverException {
    public NuGetResolverInputException(string message);
    protected NuGetResolverInputException(SerializationInfo info, StreamingContext context);
}
public class NuGet.Resolver.PackageResolver : object {
    public IEnumerable`1<PackageIdentity> Resolve(PackageResolverContext context, CancellationToken token);
    [IteratorStateMachineAttribute("NuGet.Resolver.PackageResolver/<GetBrokenDependencies>d__1")]
private static IEnumerable`1<PackageDependency> GetBrokenDependencies(SourcePackageDependencyInfo package, IEnumerable`1<PackageIdentity> packages);
    private static string FormatDependencyConstraint(SourcePackageDependencyInfo package, PackageDependency dependency);
    private static IEnumerable`1<SourcePackageDependencyInfo> RemoveImpossiblePackages(IEnumerable`1<SourcePackageDependencyInfo> packages, ISet`1<string> mustKeep);
    private static List`1<SourcePackageDependencyInfo> InnerPruneImpossiblePackages(List`1<SourcePackageDependencyInfo> packages, ISet`1<string> mustKeep);
}
public class NuGet.Resolver.PackageResolverContext : object {
    [CompilerGeneratedAttribute]
private HashSet`1<string> <TargetIds>k__BackingField;
    [CompilerGeneratedAttribute]
private HashSet`1<string> <RequiredPackageIds>k__BackingField;
    [CompilerGeneratedAttribute]
private IEnumerable`1<PackageReference> <PackagesConfig>k__BackingField;
    [CompilerGeneratedAttribute]
private HashSet`1<PackageIdentity> <PreferredVersions>k__BackingField;
    [CompilerGeneratedAttribute]
private IEnumerable`1<SourcePackageDependencyInfo> <AvailablePackages>k__BackingField;
    [CompilerGeneratedAttribute]
private DependencyBehavior <DependencyBehavior>k__BackingField;
    [CompilerGeneratedAttribute]
private IEnumerable`1<PackageSource> <PackageSources>k__BackingField;
    [CompilerGeneratedAttribute]
private ILogger <Log>k__BackingField;
    public HashSet`1<string> TargetIds { get; }
    public HashSet`1<string> RequiredPackageIds { get; }
    public IEnumerable`1<PackageReference> PackagesConfig { get; }
    public HashSet`1<PackageIdentity> PreferredVersions { get; }
    public IEnumerable`1<SourcePackageDependencyInfo> AvailablePackages { get; }
    public DependencyBehavior DependencyBehavior { get; }
    public IEnumerable`1<PackageSource> PackageSources { get; }
    public ILogger Log { get; }
    public PackageResolverContext(DependencyBehavior dependencyBehavior, IEnumerable`1<string> targetIds, IEnumerable`1<string> requiredPackageIds, IEnumerable`1<PackageReference> packagesConfig, IEnumerable`1<PackageIdentity> preferredVersions, IEnumerable`1<SourcePackageDependencyInfo> availablePackages, IEnumerable`1<PackageSource> packageSources, ILogger log);
    [CompilerGeneratedAttribute]
public HashSet`1<string> get_TargetIds();
    [CompilerGeneratedAttribute]
public HashSet`1<string> get_RequiredPackageIds();
    [CompilerGeneratedAttribute]
public IEnumerable`1<PackageReference> get_PackagesConfig();
    [CompilerGeneratedAttribute]
public HashSet`1<PackageIdentity> get_PreferredVersions();
    [CompilerGeneratedAttribute]
public IEnumerable`1<SourcePackageDependencyInfo> get_AvailablePackages();
    [CompilerGeneratedAttribute]
public DependencyBehavior get_DependencyBehavior();
    [CompilerGeneratedAttribute]
public IEnumerable`1<PackageSource> get_PackageSources();
    [CompilerGeneratedAttribute]
public ILogger get_Log();
}
public class NuGet.Resolver.ResolverComparer : object {
    private DependencyBehavior _dependencyBehavior;
    private HashSet`1<PackageIdentity> _preferredVersions;
    private HashSet`1<string> _targetIds;
    private IVersionComparer _versionComparer;
    private PackageIdentityComparer _identityComparer;
    private Dictionary`2<string, NuGetVersion> _installedVersions;
    public ResolverComparer(DependencyBehavior dependencyBehavior, HashSet`1<PackageIdentity> preferredVersions, HashSet`1<string> targetIds);
    public sealed virtual int Compare(ResolverPackage x, ResolverPackage y);
}
public static class NuGet.Resolver.ResolverInputSort : object {
    public static List`1<List`1<ResolverPackage>> TreeFlatten(List`1<List`1<ResolverPackage>> grouped, PackageResolverContext context);
    private static int GetTreeFlattenPriority(string id, PackageResolverContext context);
}
public class NuGet.Resolver.ResolverPackage : SourcePackageDependencyInfo {
    [CompilerGeneratedAttribute]
private bool <Absent>k__BackingField;
    private SortedDictionary`2<string, VersionRange> _dependencyIds;
    private int _hash;
    public bool Absent { get; }
    public ResolverPackage(string id);
    public ResolverPackage(string id, NuGetVersion version);
    public ResolverPackage(string id, NuGetVersion version, IEnumerable`1<PackageDependency> dependencies, bool listed, bool absent);
    public ResolverPackage(PackageDependencyInfo info, bool listed, bool absent);
    [CompilerGeneratedAttribute]
public bool get_Absent();
    public VersionRange FindDependencyRange(string id);
    public virtual string ToString();
    public sealed virtual bool Equals(ResolverPackage other);
    public virtual int GetHashCode();
    public virtual bool Equals(object obj);
}
public static class NuGet.Resolver.ResolverUtility : object {
    public static string GetDiagnosticMessage(IEnumerable`1<ResolverPackage> solution, IEnumerable`1<PackageDependencyInfo> availablePackages, IEnumerable`1<PackageReference> packagesConfig, IEnumerable`1<string> newPackageIds, IEnumerable`1<PackageSource> packageSources);
    private static string GetErrorMessage(string problemPackageId, IEnumerable`1<ResolverPackage> solution, IEnumerable`1<PackageDependencyInfo> availablePackages, IEnumerable`1<PackageReference> packagesConfig, IEnumerable`1<PackageSource> packageSources);
    private static string FormatDependencyConstraint(ResolverPackage package, string dependencyId);
    [IteratorStateMachineAttribute("NuGet.Resolver.ResolverUtility/<GetBrokenDependenciesWithInstalledPackages>d__3")]
private static IEnumerable`1<PackageDependency> GetBrokenDependenciesWithInstalledPackages(ResolverPackage package, IEnumerable`1<ResolverPackage> solution, IEnumerable`1<PackageDependencyInfo> availablePackages, HashSet`1<string> visitedPackages);
    [IteratorStateMachineAttribute("NuGet.Resolver.ResolverUtility/<GetBrokenDependencies>d__4")]
private static IEnumerable`1<PackageDependency> GetBrokenDependencies(ResolverPackage package, IEnumerable`1<ResolverPackage> packages);
    private static bool IsDependencySatisfied(PackageDependency dependency, ResolverPackage package);
    public static bool IsDependencySatisfied(PackageDependency dependency, PackageIdentity package);
    [IteratorStateMachineAttribute("NuGet.Resolver.ResolverUtility/<GetPackagesWithBrokenDependenciesOnId>d__7")]
private static IEnumerable`1<ResolverPackage> GetPackagesWithBrokenDependenciesOnId(string targetId, IEnumerable`1<ResolverPackage> packages);
    public static int GetLowestDistanceFromTarget(string packageId, HashSet`1<string> targets, IEnumerable`1<ResolverPackage> packages);
    public static IEnumerable`1<ResolverPackage> TopologicalSort(IEnumerable`1<ResolverPackage> nodes);
    internal static bool ShouldRejectPackagePair(ResolverPackage p1, ResolverPackage p2);
    public static IEnumerable`1<ResolverPackage> FindFirstCircularDependency(IEnumerable`1<ResolverPackage> solution);
    private static List`1<ResolverPackage> FindCircularDependency(ResolverPackage package, Dictionary`2<string, ResolverPackage> packageLookUp, HashSet`1<ResolverPackage> visitedPackages);
}
[GeneratedCodeAttribute("System.Resources.Tools.StronglyTypedResourceBuilder", "17.0.0.0")]
[DebuggerNonUserCodeAttribute]
[CompilerGeneratedAttribute]
internal class NuGet.Resolver.Strings : object {
    private static ResourceManager resourceMan;
    private static CultureInfo resourceCulture;
    [EditorBrowsableAttribute("2")]
internal static ResourceManager ResourceManager { get; }
    [EditorBrowsableAttribute("2")]
internal static CultureInfo Culture { get; internal set; }
    internal static string CircularDependencyDetected { get; }
    internal static string DependencyConstraint { get; }
    internal static string DuplicateDependencyIdsError { get; }
    internal static string FatalError { get; }
    internal static string InvalidPackageConfig { get; }
    internal static string MissingDependencyInfo { get; }
    internal static string NoSolution { get; }
    internal static string PackagesConfigConstraint { get; }
    internal static string ResolverTotalTime { get; }
    internal static string UnableToFindCompatibleVersion { get; }
    internal static string UnableToResolveDependencyForEmptySource { get; }
    internal static string UnableToResolveDependencyForMultipleSources { get; }
    internal static string VersionIsNotCompatible { get; }
    internal static ResourceManager get_ResourceManager();
    internal static CultureInfo get_Culture();
    internal static void set_Culture(CultureInfo value);
    internal static string get_CircularDependencyDetected();
    internal static string get_DependencyConstraint();
    internal static string get_DuplicateDependencyIdsError();
    internal static string get_FatalError();
    internal static string get_InvalidPackageConfig();
    internal static string get_MissingDependencyInfo();
    internal static string get_NoSolution();
    internal static string get_PackagesConfigConstraint();
    internal static string get_ResolverTotalTime();
    internal static string get_UnableToFindCompatibleVersion();
    internal static string get_UnableToResolveDependencyForEmptySource();
    internal static string get_UnableToResolveDependencyForMultipleSources();
    internal static string get_VersionIsNotCompatible();
}
internal static class NuGet.Shared.EncodingUtility : object {
    [NullableContextAttribute("1")]
internal static string ToHex(Byte[] bytes, int length);
    private static char ToHexChar(int input);
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
[ExtensionAttribute]
internal static class NuGet.Shared.EqualityUtility : object {
    [ExtensionAttribute]
internal static bool OrderedEquals(IEnumerable`1<TSource> self, IEnumerable`1<TSource> other, Func`2<TSource, TKey> keySelector, IComparer`1<TKey> orderComparer, IEqualityComparer`1<TSource> sequenceComparer);
    [ExtensionAttribute]
internal static bool OrderedEquals(ICollection`1<TSource> self, ICollection`1<TSource> other, Func`2<TSource, TKey> keySelector, IComparer`1<TKey> orderComparer, IEqualityComparer`1<TSource> sequenceComparer);
    [ExtensionAttribute]
internal static bool OrderedEquals(IList`1<TSource> self, IList`1<TSource> other, Func`2<TSource, TKey> keySelector, IComparer`1<TKey> orderComparer, IEqualityComparer`1<TSource> sequenceComparer);
    [ExtensionAttribute]
internal static bool SequenceEqualWithNullCheck(IEnumerable`1<T> self, IEnumerable`1<T> other, IEqualityComparer`1<T> comparer);
    [ExtensionAttribute]
internal static bool SequenceEqualWithNullCheck(ICollection`1<T> self, ICollection`1<T> other, IEqualityComparer`1<T> comparer);
    [ExtensionAttribute]
internal static bool SequenceEqualWithNullCheck(IList`1<T> self, IList`1<T> other, IEqualityComparer`1<T> comparer);
    [ExtensionAttribute]
internal static bool SetEqualsWithNullCheck(ISet`1<T> self, ISet`1<T> other, IEqualityComparer`1<T> comparer);
    [NullableContextAttribute("1")]
internal static bool DictionaryEquals(IDictionary`2<TKey, TValue> self, IDictionary`2<TKey, TValue> other, Func`3<TValue, TValue, bool> compareValues);
    [NullableContextAttribute("1")]
internal static bool DictionaryOfSequenceEquals(IDictionary`2<TKey, IEnumerable`1<TValue>> self, IDictionary`2<TKey, IEnumerable`1<TValue>> other);
    [NullableContextAttribute("1")]
internal static bool EqualsWithNullCheck(T self, T other);
    [NullableContextAttribute("1")]
[ExtensionAttribute]
internal static bool EqualsFalse(string value);
    private static bool TryIdentityEquals(T self, T other, Boolean& equals);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ExtensionAttribute]
internal static class NuGet.Shared.Extensions : object {
    [ExtensionAttribute]
public static List`1<T> AsList(IEnumerable`1<T> enumerable);
    [ExtensionAttribute]
public static HashSet`1<T> AsHashSet(ISet`1<T> enumerable, IEqualityComparer`1<T> comparer);
    [ExtensionAttribute]
public static void ForEach(IEnumerable`1<T> enumeration, Action`1<T> action);
    [ExtensionAttribute]
public static void AppendInt(StringBuilder sb, int value);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[IsByRefLikeAttribute]
[ObsoleteAttribute("Types with embedded references are not supported in this version of your compiler.", "True")]
[CompilerFeatureRequiredAttribute("RefStructs")]
internal class NuGet.Shared.HashCodeCombiner : ValueType {
    private static long Seed;
    private long _combinedHash;
    internal int CombinedHash { get; }
    internal int get_CombinedHash();
    private void AddHashCode(int i);
    internal void AddObject(int i);
    internal void AddObject(bool b);
    internal void AddObject(T o, IEqualityComparer`1<T> comparer);
    internal void AddObject(T o);
    [NullableContextAttribute("0")]
internal void AddStruct(Nullable`1<T> o);
    [NullableContextAttribute("0")]
internal void AddStruct(T o);
    [NullableContextAttribute("2")]
internal void AddStringIgnoreCase(string s);
    internal void AddSequence(IEnumerable`1<T> sequence);
    internal void AddSequence(T[] array);
    internal void AddSequence(IList`1<T> list);
    internal void AddSequence(IReadOnlyList`1<T> list);
    internal void AddUnorderedSequence(IEnumerable`1<T> list);
    internal void AddUnorderedSequence(IEnumerable`1<T> list, IEqualityComparer`1<T> comparer);
    internal void AddDictionary(IEnumerable`1<KeyValuePair`2<TKey, TValue>> dictionary);
    internal static int GetHashCode(T1 o1, T2 o2);
    internal static int GetHashCode(T1 o1, T2 o2, T3 o3);
}
internal static class NuGet.Shared.XmlUtility : object {
    internal static XDocument Load(string path);
    internal static XDocument Load(string path, LoadOptions options);
    internal static XDocument Load(Stream input);
    internal static XDocument Load(Stream input, LoadOptions options);
    internal static string GetEncodedXMLName(string name);
    internal static XmlReaderSettings GetXmlReaderSettings(LoadOptions options);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class NuGet.SimplePool`1 : object {
    private object _lockObj;
    private Stack`1<T> _values;
    private Func`1<T> _allocate;
    public SimplePool`1(Func`1<T> allocate);
    public T Allocate();
    public void Free(T value);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class NuGet.StringBuilderPool : object {
    private static int MaxPoolSize;
    private SimplePool`1<StringBuilder> _pool;
    public static StringBuilderPool Shared;
    private static StringBuilderPool();
    public StringBuilder Rent(int minimumCapacity);
    public string ToStringAndReturn(StringBuilder builder);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal static class NuGet.TaskResult : object {
    [CompilerGeneratedAttribute]
private static Task`1<bool> <True>k__BackingField;
    [CompilerGeneratedAttribute]
private static Task`1<bool> <False>k__BackingField;
    [CompilerGeneratedAttribute]
private static Task`1<int> <Zero>k__BackingField;
    [CompilerGeneratedAttribute]
private static Task`1<int> <One>k__BackingField;
    public static Task`1<bool> True { get; }
    public static Task`1<bool> False { get; }
    public static Task`1<int> Zero { get; }
    public static Task`1<int> One { get; }
    private static TaskResult();
    [CompilerGeneratedAttribute]
public static Task`1<bool> get_True();
    [CompilerGeneratedAttribute]
public static Task`1<bool> get_False();
    public static Task`1<bool> Boolean(bool b);
    [CompilerGeneratedAttribute]
public static Task`1<int> get_Zero();
    [CompilerGeneratedAttribute]
public static Task`1<int> get_One();
    public static Task`1<int> Integer(int i);
    public static Task`1<T> Null();
    public static Task`1<IEnumerable`1<T>> EmptyEnumerable();
    public static Task`1<T[]> EmptyArray();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class NuGet.TaskResultCache`2 : object {
    private ConcurrentDictionary`2<TKey, Task`1<TValue>> _cache;
    private ConcurrentDictionary`2<TKey, object> _perTaskLock;
    public TaskResultCache`2(IEqualityComparer`1<TKey> comparer);
    public Task`1<TValue> GetOrAddAsync(TKey key, Func`2<TState, Task`1<TValue>> valueFactory, TState state, CancellationToken cancellationToken);
    public Task`1<TValue> GetOrAddAsync(TKey key, bool refresh, Func`2<TState, Task`1<TValue>> valueFactory, TState state, CancellationToken cancellationToken);
}
[ExtensionAttribute]
internal static class System.Collections.Generic.DeconstructionExtensions : object {
    [ExtensionAttribute]
[DebuggerStepThroughAttribute]
public static void Deconstruct(KeyValuePair`2<TKey, TValue> pair, TKey& key, TValue& value);
}
[AttributeUsageAttribute("2432")]
internal class System.Diagnostics.CodeAnalysis.AllowNullAttribute : Attribute {
}
[AttributeUsageAttribute("2432")]
internal class System.Diagnostics.CodeAnalysis.DisallowNullAttribute : Attribute {
}
[AttributeUsageAttribute("64")]
internal class System.Diagnostics.CodeAnalysis.DoesNotReturnAttribute : Attribute {
}
[AttributeUsageAttribute("2048")]
internal class System.Diagnostics.CodeAnalysis.DoesNotReturnIfAttribute : Attribute {
    [CompilerGeneratedAttribute]
private bool <ParameterValue>k__BackingField;
    public bool ParameterValue { get; }
    public DoesNotReturnIfAttribute(bool parameterValue);
    [CompilerGeneratedAttribute]
public bool get_ParameterValue();
}
[AttributeUsageAttribute("10624")]
internal class System.Diagnostics.CodeAnalysis.MaybeNullAttribute : Attribute {
}
[AttributeUsageAttribute("2048")]
internal class System.Diagnostics.CodeAnalysis.MaybeNullWhenAttribute : Attribute {
    [CompilerGeneratedAttribute]
private bool <ReturnValue>k__BackingField;
    public bool ReturnValue { get; }
    public MaybeNullWhenAttribute(bool returnValue);
    [CompilerGeneratedAttribute]
public bool get_ReturnValue();
}
[AttributeUsageAttribute("192")]
internal class System.Diagnostics.CodeAnalysis.MemberNotNullAttribute : Attribute {
    [CompilerGeneratedAttribute]
private String[] <Members>k__BackingField;
    public String[] Members { get; }
    public MemberNotNullAttribute(string member);
    public MemberNotNullAttribute(String[] members);
    [CompilerGeneratedAttribute]
public String[] get_Members();
}
[AttributeUsageAttribute("192")]
internal class System.Diagnostics.CodeAnalysis.MemberNotNullWhenAttribute : Attribute {
    [CompilerGeneratedAttribute]
private bool <ReturnValue>k__BackingField;
    [CompilerGeneratedAttribute]
private String[] <Members>k__BackingField;
    public bool ReturnValue { get; }
    public String[] Members { get; }
    public MemberNotNullWhenAttribute(bool returnValue, string member);
    public MemberNotNullWhenAttribute(bool returnValue, String[] members);
    [CompilerGeneratedAttribute]
public bool get_ReturnValue();
    [CompilerGeneratedAttribute]
public String[] get_Members();
}
[AttributeUsageAttribute("10624")]
internal class System.Diagnostics.CodeAnalysis.NotNullAttribute : Attribute {
}
[AttributeUsageAttribute("10368")]
internal class System.Diagnostics.CodeAnalysis.NotNullIfNotNullAttribute : Attribute {
    [CompilerGeneratedAttribute]
private string <ParameterName>k__BackingField;
    public string ParameterName { get; }
    public NotNullIfNotNullAttribute(string parameterName);
    [CompilerGeneratedAttribute]
public string get_ParameterName();
}
[AttributeUsageAttribute("2048")]
internal class System.Diagnostics.CodeAnalysis.NotNullWhenAttribute : Attribute {
    [CompilerGeneratedAttribute]
private bool <ReturnValue>k__BackingField;
    public bool ReturnValue { get; }
    public NotNullWhenAttribute(bool returnValue);
    [CompilerGeneratedAttribute]
public bool get_ReturnValue();
}
[AttributeUsageAttribute("32")]
internal class System.Diagnostics.CodeAnalysis.SetsRequiredMembersAttribute : Attribute {
}
[AttributeUsageAttribute("32767")]
internal class System.Runtime.CompilerServices.CompilerFeatureRequiredAttribute : Attribute {
    [CompilerGeneratedAttribute]
private string <FeatureName>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsOptional>k__BackingField;
    public static string RefStructs;
    public static string RequiredMembers;
    public string FeatureName { get; }
    public bool IsOptional { get; public set; }
    public CompilerFeatureRequiredAttribute(string featureName);
    [CompilerGeneratedAttribute]
public string get_FeatureName();
    [CompilerGeneratedAttribute]
public bool get_IsOptional();
    [CompilerGeneratedAttribute]
public Void modreq(System.Runtime.CompilerServices.IsExternalInit) set_IsOptional(bool value);
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
internal class System.Runtime.CompilerServices.IsByRefLikeAttribute : Attribute {
}
[DebuggerNonUserCodeAttribute]
internal static class System.Runtime.CompilerServices.IsExternalInit : object {
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
internal class System.Runtime.CompilerServices.IsReadOnlyAttribute : Attribute {
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
[AttributeUsageAttribute("27524")]
internal class System.Runtime.CompilerServices.NullableAttribute : Attribute {
    public Byte[] NullableFlags;
    public NullableAttribute(byte );
    public NullableAttribute(Byte[] );
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
[AttributeUsageAttribute("5196")]
internal class System.Runtime.CompilerServices.NullableContextAttribute : Attribute {
    public byte Flag;
    public NullableContextAttribute(byte );
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
[AttributeUsageAttribute("2")]
internal class System.Runtime.CompilerServices.RefSafetyRulesAttribute : Attribute {
    public int Version;
    public RefSafetyRulesAttribute(int );
}
[AttributeUsageAttribute("396")]
[EditorBrowsableAttribute("1")]
internal class System.Runtime.CompilerServices.RequiredMemberAttribute : Attribute {
}
