public abstract class NuGet.Protocol.Core.Types.AutoCompleteResource : object {
    public abstract virtual Task`1<IEnumerable`1<string>> IdStartsWith(string packageIdPrefix, bool includePrerelease, ILogger log, CancellationToken token);
    public abstract virtual Task`1<IEnumerable`1<NuGetVersion>> VersionStartsWith(string packageId, string versionPrefix, bool includePrerelease, ILogger log, CancellationToken token);
}
public abstract class NuGet.Protocol.Core.Types.DependencyInfoResource : object {
    public abstract virtual Task`1<SourcePackageDependencyInfo> ResolvePackage(PackageIdentity package, NuGetFramework projectFramework, ILogger log, CancellationToken token);
    public abstract virtual Task`1<IEnumerable`1<SourcePackageDependencyInfo>> ResolvePackages(string packageId, NuGetFramework projectFramework, ILogger log, CancellationToken token);
    public virtual Task`1<IEnumerable`1<RemoteSourceDependencyInfo>> ResolvePackages(string packageId, ILogger log, CancellationToken token);
}
public abstract class NuGet.Protocol.Core.Types.DownloadResource : object {
    [CompilerGeneratedAttribute]
private EventHandler`1<PackageProgressEventArgs> Progress;
    public abstract virtual Task`1<DownloadResourceResult> GetDownloadResourceResultAsync(PackageIdentity identity, PackageDownloadContext downloadContext, string globalPackagesFolder, ILogger logger, CancellationToken token);
    [CompilerGeneratedAttribute]
public void add_Progress(EventHandler`1<PackageProgressEventArgs> value);
    [CompilerGeneratedAttribute]
public void remove_Progress(EventHandler`1<PackageProgressEventArgs> value);
}
public class NuGet.Protocol.Core.Types.DownloadResourceResult : object {
    private Stream _stream;
    private PackageReaderBase _packageReader;
    private string _packageSource;
    [CompilerGeneratedAttribute]
private DownloadResourceResultStatus <Status>k__BackingField;
    public DownloadResourceResultStatus Status { get; }
    public Stream PackageStream { get; }
    public string PackageSource { get; }
    public PackageReaderBase PackageReader { get; }
    public DownloadResourceResult(DownloadResourceResultStatus status);
    public DownloadResourceResult(Stream stream, string source);
    public DownloadResourceResult(Stream stream);
    public DownloadResourceResult(Stream stream, PackageReaderBase packageReader, string source);
    public DownloadResourceResult(Stream stream, PackageReaderBase packageReader);
    [CompilerGeneratedAttribute]
public DownloadResourceResultStatus get_Status();
    public Stream get_PackageStream();
    public string get_PackageSource();
    public PackageReaderBase get_PackageReader();
    public sealed virtual void Dispose();
}
public enum NuGet.Protocol.Core.Types.DownloadResourceResultStatus : Enum {
    public int value__;
    public static DownloadResourceResultStatus Available;
    public static DownloadResourceResultStatus NotFound;
    public static DownloadResourceResultStatus Cancelled;
}
public class NuGet.Protocol.Core.Types.FatalProtocolException : NuGetProtocolException {
    public FatalProtocolException(string message);
    public FatalProtocolException(string message, Exception innerException);
}
public abstract class NuGet.Protocol.Core.Types.HttpHandlerResource : object {
    public HttpClientHandler ClientHandler { get; }
    public HttpMessageHandler MessageHandler { get; }
    public abstract virtual HttpClientHandler get_ClientHandler();
    public abstract virtual HttpMessageHandler get_MessageHandler();
}
public class NuGet.Protocol.Core.Types.HttpSourceCacheContext : object {
    [CompilerGeneratedAttribute]
private TimeSpan <MaxAge>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <DirectDownload>k__BackingField;
    [CompilerGeneratedAttribute]
private string <RootTempFolder>k__BackingField;
    public TimeSpan MaxAge { get; }
    public bool DirectDownload { get; }
    public string RootTempFolder { get; }
    private HttpSourceCacheContext(string rootTempFolder, TimeSpan maxAge, bool directDownload);
    [CompilerGeneratedAttribute]
public TimeSpan get_MaxAge();
    [CompilerGeneratedAttribute]
public bool get_DirectDownload();
    [CompilerGeneratedAttribute]
public string get_RootTempFolder();
    public static HttpSourceCacheContext Create(SourceCacheContext cacheContext, int retryCount);
}
public interface NuGet.Protocol.Core.Types.ILegacyFeedCapabilityResource {
    public abstract virtual Task`1<bool> SupportsIsAbsoluteLatestVersionAsync(ILogger log, CancellationToken token);
    public abstract virtual Task`1<bool> SupportsSearchAsync(ILogger log, CancellationToken token);
}
public interface NuGet.Protocol.Core.Types.INuGetResource {
}
public interface NuGet.Protocol.Core.Types.INuGetResourceProvider {
    public Type ResourceType { get; }
    public string Name { get; }
    public IEnumerable`1<string> Before { get; }
    public IEnumerable`1<string> After { get; }
    public abstract virtual Task`1<Tuple`2<bool, INuGetResource>> TryCreate(SourceRepository source, CancellationToken token);
    public abstract virtual Type get_ResourceType();
    public abstract virtual string get_Name();
    public abstract virtual IEnumerable`1<string> get_Before();
    public abstract virtual IEnumerable`1<string> get_After();
}
public interface NuGet.Protocol.Core.Types.IPackageSearchMetadata {
    public string Authors { get; }
    public IEnumerable`1<PackageDependencyGroup> DependencySets { get; }
    public string Description { get; }
    public Nullable`1<long> DownloadCount { get; }
    public Uri IconUrl { get; }
    public PackageIdentity Identity { get; }
    public Uri LicenseUrl { get; }
    public Uri ProjectUrl { get; }
    public Uri ReportAbuseUrl { get; }
    public Nullable`1<DateTimeOffset> Published { get; }
    public string Owners { get; }
    public bool RequireLicenseAcceptance { get; }
    public string Summary { get; }
    public string Tags { get; }
    public string Title { get; }
    public bool IsListed { get; }
    public abstract virtual string get_Authors();
    public abstract virtual IEnumerable`1<PackageDependencyGroup> get_DependencySets();
    public abstract virtual string get_Description();
    public abstract virtual Nullable`1<long> get_DownloadCount();
    public abstract virtual Uri get_IconUrl();
    public abstract virtual PackageIdentity get_Identity();
    public abstract virtual Uri get_LicenseUrl();
    public abstract virtual Uri get_ProjectUrl();
    public abstract virtual Uri get_ReportAbuseUrl();
    public abstract virtual Nullable`1<DateTimeOffset> get_Published();
    public abstract virtual string get_Owners();
    public abstract virtual bool get_RequireLicenseAcceptance();
    public abstract virtual string get_Summary();
    public abstract virtual string get_Tags();
    public abstract virtual string get_Title();
    public abstract virtual bool get_IsListed();
    public abstract virtual Task`1<IEnumerable`1<VersionInfo>> GetVersionsAsync();
}
public interface NuGet.Protocol.Core.Types.ISourceRepositoryProvider {
    public IPackageSourceProvider PackageSourceProvider { get; }
    public abstract virtual IEnumerable`1<SourceRepository> GetRepositories();
    public abstract virtual SourceRepository CreateRepository(PackageSource source);
    public abstract virtual SourceRepository CreateRepository(PackageSource source, FeedType type);
    public abstract virtual IPackageSourceProvider get_PackageSourceProvider();
}
public abstract class NuGet.Protocol.Core.Types.LegacyFeedCapabilityResource : object {
    public abstract virtual Task`1<bool> SupportsSearchAsync(ILogger log, CancellationToken token);
    public abstract virtual Task`1<bool> SupportsIsAbsoluteLatestVersionAsync(ILogger log, CancellationToken token);
}
public abstract class NuGet.Protocol.Core.Types.ListResource : object {
    public string Source { get; }
    public abstract virtual Task`1<IEnumerableAsync`1<IPackageSearchMetadata>> ListAsync(string searchTerm, bool prerelease, bool allVersions, bool includeDelisted, ILogger log, CancellationToken token);
    public abstract virtual string get_Source();
}
public abstract class NuGet.Protocol.Core.Types.MetadataResource : object {
    [AsyncStateMachineAttribute("NuGet.Protocol.Core.Types.MetadataResource/<GetVersions>d__0")]
public Task`1<IEnumerable`1<NuGetVersion>> GetVersions(string packageId, ILogger log, CancellationToken token);
    public abstract virtual Task`1<IEnumerable`1<NuGetVersion>> GetVersions(string packageId, bool includePrerelease, bool includeUnlisted, ILogger log, CancellationToken token);
    [AsyncStateMachineAttribute("NuGet.Protocol.Core.Types.MetadataResource/<Exists>d__2")]
public Task`1<bool> Exists(PackageIdentity identity, ILogger log, CancellationToken token);
    public abstract virtual Task`1<bool> Exists(PackageIdentity identity, bool includeUnlisted, ILogger log, CancellationToken token);
    [AsyncStateMachineAttribute("NuGet.Protocol.Core.Types.MetadataResource/<Exists>d__4")]
public Task`1<bool> Exists(string packageId, ILogger log, CancellationToken token);
    public abstract virtual Task`1<bool> Exists(string packageId, bool includePrerelease, bool includeUnlisted, ILogger log, CancellationToken token);
    public abstract virtual Task`1<IEnumerable`1<KeyValuePair`2<string, NuGetVersion>>> GetLatestVersions(IEnumerable`1<string> packageIds, bool includePrerelease, bool includeUnlisted, ILogger log, CancellationToken token);
    [AsyncStateMachineAttribute("NuGet.Protocol.Core.Types.MetadataResource/<GetLatestVersion>d__7")]
public Task`1<NuGetVersion> GetLatestVersion(string packageId, bool includePrerelease, bool includeUnlisted, ILogger log, CancellationToken token);
}
public abstract class NuGet.Protocol.Core.Types.NuGetProtocolException : Exception {
    public NuGetProtocolException(string message);
    public NuGetProtocolException(string message, Exception innerException);
}
public class NuGet.Protocol.Core.Types.NuGetResourceProviderPositions : object {
    public static string First;
    public static string Last;
}
public static class NuGet.Protocol.Core.Types.NuGetTestMode : object {
    private static string _testModeEnvironmentVariableName;
    public static string NuGetTestClientName;
    [CompilerGeneratedAttribute]
private static bool <Enabled>k__BackingField;
    public static bool Enabled { get; private set; }
    private static NuGetTestMode();
    [CompilerGeneratedAttribute]
public static bool get_Enabled();
    [CompilerGeneratedAttribute]
private static void set_Enabled(bool value);
    private static bool FromEnvironmentVariable();
    public static T InvokeTestFunctionAgainstTestMode(Func`1<T> function, bool testModeEnabled);
}
public class NuGet.Protocol.Core.Types.PackageDownloadContext : object {
    [CompilerGeneratedAttribute]
private SourceCacheContext <SourceCacheContext>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <DirectDownload>k__BackingField;
    [CompilerGeneratedAttribute]
private string <DirectDownloadDirectory>k__BackingField;
    public SourceCacheContext SourceCacheContext { get; }
    public bool DirectDownload { get; }
    public string DirectDownloadDirectory { get; }
    public PackageDownloadContext(SourceCacheContext sourceCacheContext);
    public PackageDownloadContext(SourceCacheContext sourceCacheContext, string directDownloadDirectory, bool directDownload);
    [CompilerGeneratedAttribute]
public SourceCacheContext get_SourceCacheContext();
    [CompilerGeneratedAttribute]
public bool get_DirectDownload();
    [CompilerGeneratedAttribute]
public string get_DirectDownloadDirectory();
}
public abstract class NuGet.Protocol.Core.Types.PackageMetadataResource : object {
    public abstract virtual Task`1<IEnumerable`1<IPackageSearchMetadata>> GetMetadataAsync(string packageId, bool includePrerelease, bool includeUnlisted, ILogger log, CancellationToken token);
    public abstract virtual Task`1<IPackageSearchMetadata> GetMetadataAsync(PackageIdentity package, ILogger log, CancellationToken token);
}
public class NuGet.Protocol.Core.Types.PackageProgressEventArgs : EventArgs {
    private PackageIdentity _identity;
    private PackageSource _source;
    private double _complete;
    public PackageIdentity PackageIdentity { get; }
    public PackageSource PackageSource { get; }
    public double Complete { get; }
    public bool IsComplete { get; }
    public bool HasPackageSource { get; }
    public PackageProgressEventArgs(PackageIdentity identity, PackageSource source, double complete);
    public PackageIdentity get_PackageIdentity();
    public PackageSource get_PackageSource();
    public double get_Complete();
    public bool get_IsComplete();
    public bool get_HasPackageSource();
}
public class NuGet.Protocol.Core.Types.PackageSearchMetadataBuilder : object {
    private IPackageSearchMetadata _metadata;
    private AsyncLazy`1<IEnumerable`1<VersionInfo>> _lazyVersionsFactory;
    private PackageSearchMetadataBuilder(IPackageSearchMetadata metadata);
    public PackageSearchMetadataBuilder WithVersions(AsyncLazy`1<IEnumerable`1<VersionInfo>> lazyVersionsFactory);
    public IPackageSearchMetadata Build();
    public static PackageSearchMetadataBuilder FromMetadata(IPackageSearchMetadata metadata);
    public static PackageSearchMetadataBuilder FromIdentity(PackageIdentity identity);
}
[ExtensionAttribute]
public static class NuGet.Protocol.Core.Types.PackageSearchMetadataExtensions : object {
    [ExtensionAttribute]
public static IPackageSearchMetadata WithVersions(IPackageSearchMetadata metadata, IEnumerable`1<VersionInfo> versions);
    [ExtensionAttribute]
public static IPackageSearchMetadata WithVersions(IPackageSearchMetadata metadata, Func`1<Task`1<IEnumerable`1<VersionInfo>>> asyncValueFactory);
    [ExtensionAttribute]
public static IPackageSearchMetadata WithVersions(IPackageSearchMetadata metadata, Func`1<IEnumerable`1<VersionInfo>> valueFactory);
}
public abstract class NuGet.Protocol.Core.Types.PackageSearchResource : object {
    public abstract virtual Task`1<IEnumerable`1<IPackageSearchMetadata>> SearchAsync(string searchTerm, SearchFilter filters, int skip, int take, ILogger log, CancellationToken cancellationToken);
}
internal class NuGet.Protocol.Core.Types.ProviderComparer : object {
    public sealed virtual int Compare(INuGetResourceProvider providerA, INuGetResourceProvider providerB);
}
public class NuGet.Protocol.Core.Types.RemoteSourceDependencyInfo : object {
    [CompilerGeneratedAttribute]
private PackageIdentity <Identity>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <Listed>k__BackingField;
    [CompilerGeneratedAttribute]
private IEnumerable`1<PackageDependencyGroup> <DependencyGroups>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ContentUri>k__BackingField;
    public PackageIdentity Identity { get; }
    public bool Listed { get; }
    public IEnumerable`1<PackageDependencyGroup> DependencyGroups { get; }
    public string ContentUri { get; public set; }
    public RemoteSourceDependencyInfo(PackageIdentity identity, bool listed, IEnumerable`1<PackageDependencyGroup> dependencyGroups, string contentUri);
    [CompilerGeneratedAttribute]
public PackageIdentity get_Identity();
    [CompilerGeneratedAttribute]
public bool get_Listed();
    [CompilerGeneratedAttribute]
public IEnumerable`1<PackageDependencyGroup> get_DependencyGroups();
    [CompilerGeneratedAttribute]
public string get_ContentUri();
    [CompilerGeneratedAttribute]
public void set_ContentUri(string value);
    public sealed virtual bool Equals(RemoteSourceDependencyInfo other);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
    public virtual string ToString();
}
public static class NuGet.Protocol.Core.Types.Repository : object {
    public static RepositoryFactory Factory { get; }
    public static ProviderFactory Provider { get; }
    public static RepositoryFactory get_Factory();
    public static ProviderFactory get_Provider();
    public static ISourceRepositoryProvider CreateProvider(IEnumerable`1<INuGetResourceProvider> resourceProviders);
    public static ISourceRepositoryProvider CreateProvider(IEnumerable`1<INuGetResourceProvider> resourceProviders, string rootPath);
    public static SourceRepository CreateSource(IEnumerable`1<Lazy`1<INuGetResourceProvider>> resourceProviders, string sourceUrl);
    public static SourceRepository CreateSource(IEnumerable`1<Lazy`1<INuGetResourceProvider>> resourceProviders, string sourceUrl, FeedType type);
    public static SourceRepository CreateSource(IEnumerable`1<Lazy`1<INuGetResourceProvider>> resourceProviders, PackageSource source);
    public static SourceRepository CreateSource(IEnumerable`1<Lazy`1<INuGetResourceProvider>> resourceProviders, PackageSource source, FeedType type);
    private static IEnumerable`1<Lazy`1<INuGetResourceProvider>> CreateLazy(IEnumerable`1<INuGetResourceProvider> providers);
}
public abstract class NuGet.Protocol.Core.Types.ResourceProvider : object {
    private Type _resourceType;
    private string _name;
    private IEnumerable`1<string> _after;
    private IEnumerable`1<string> _before;
    public IEnumerable`1<string> After { get; }
    public IEnumerable`1<string> Before { get; }
    public string Name { get; }
    public Type ResourceType { get; }
    public ResourceProvider(Type resourceType);
    public ResourceProvider(Type resourceType, string name);
    public ResourceProvider(Type resourceType, string name, string before);
    public ResourceProvider(Type resourceType, string name, IEnumerable`1<string> before, IEnumerable`1<string> after);
    public sealed virtual IEnumerable`1<string> get_After();
    public sealed virtual IEnumerable`1<string> get_Before();
    public sealed virtual string get_Name();
    public sealed virtual Type get_ResourceType();
    public abstract virtual Task`1<Tuple`2<bool, INuGetResource>> TryCreate(SourceRepository source, CancellationToken token);
    private static IEnumerable`1<string> ToArray(string s);
}
public class NuGet.Protocol.Core.Types.RetriableProtocolException : NuGetProtocolException {
    public RetriableProtocolException(string message);
    public RetriableProtocolException(string message, Exception innerException);
}
public class NuGet.Protocol.Core.Types.SearchFilter : object {
    [CompilerGeneratedAttribute]
private IEnumerable`1<string> <SupportedFrameworks>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IncludePrerelease>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IncludeDelisted>k__BackingField;
    [CompilerGeneratedAttribute]
private IEnumerable`1<string> <PackageTypes>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<SearchFilterType> <Filter>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<SearchOrderBy> <OrderBy>k__BackingField;
    public IEnumerable`1<string> SupportedFrameworks { get; public set; }
    public bool IncludePrerelease { get; }
    public bool IncludeDelisted { get; public set; }
    public IEnumerable`1<string> PackageTypes { get; public set; }
    public Nullable`1<SearchFilterType> Filter { get; }
    public Nullable`1<SearchOrderBy> OrderBy { get; public set; }
    public SearchFilter(bool includePrerelease);
    public SearchFilter(bool includePrerelease, Nullable`1<SearchFilterType> filter);
    [CompilerGeneratedAttribute]
public IEnumerable`1<string> get_SupportedFrameworks();
    [CompilerGeneratedAttribute]
public void set_SupportedFrameworks(IEnumerable`1<string> value);
    [CompilerGeneratedAttribute]
public bool get_IncludePrerelease();
    [CompilerGeneratedAttribute]
public bool get_IncludeDelisted();
    [CompilerGeneratedAttribute]
public void set_IncludeDelisted(bool value);
    [CompilerGeneratedAttribute]
public IEnumerable`1<string> get_PackageTypes();
    [CompilerGeneratedAttribute]
public void set_PackageTypes(IEnumerable`1<string> value);
    [CompilerGeneratedAttribute]
public Nullable`1<SearchFilterType> get_Filter();
    [CompilerGeneratedAttribute]
public Nullable`1<SearchOrderBy> get_OrderBy();
    [CompilerGeneratedAttribute]
public void set_OrderBy(Nullable`1<SearchOrderBy> value);
}
public enum NuGet.Protocol.Core.Types.SearchFilterType : Enum {
    public int value__;
    public static SearchFilterType IsLatestVersion;
    public static SearchFilterType IsAbsoluteLatestVersion;
}
public enum NuGet.Protocol.Core.Types.SearchOrderBy : Enum {
    public int value__;
    public static SearchOrderBy Id;
}
public class NuGet.Protocol.Core.Types.SourceCacheContext : object {
    private string _generatedTempFolder;
    private static TimeSpan DefaultMaxAge;
    [CompilerGeneratedAttribute]
private bool <NoCache>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <DirectDownload>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<DateTimeOffset> <MaxAge>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IgnoreFailedSources>k__BackingField;
    public bool NoCache { get; public set; }
    public bool DirectDownload { get; public set; }
    public Nullable`1<DateTimeOffset> MaxAge { get; public set; }
    public TimeSpan MaxAgeTimeSpan { get; }
    public string GeneratedTempFolder { get; }
    public bool IgnoreFailedSources { get; public set; }
    private static SourceCacheContext();
    [CompilerGeneratedAttribute]
public bool get_NoCache();
    [CompilerGeneratedAttribute]
public void set_NoCache(bool value);
    [CompilerGeneratedAttribute]
public bool get_DirectDownload();
    [CompilerGeneratedAttribute]
public void set_DirectDownload(bool value);
    [CompilerGeneratedAttribute]
public Nullable`1<DateTimeOffset> get_MaxAge();
    [CompilerGeneratedAttribute]
public void set_MaxAge(Nullable`1<DateTimeOffset> value);
    public TimeSpan get_MaxAgeTimeSpan();
    private TimeSpan GetCacheTime(Nullable`1<DateTimeOffset> maxAge, TimeSpan defaultTime);
    public virtual string get_GeneratedTempFolder();
    [CompilerGeneratedAttribute]
public bool get_IgnoreFailedSources();
    [CompilerGeneratedAttribute]
public void set_IgnoreFailedSources(bool value);
    public sealed virtual void Dispose();
}
public class NuGet.Protocol.Core.Types.SourcePackageDependencyInfo : PackageDependencyInfo {
    [CompilerGeneratedAttribute]
private bool <Listed>k__BackingField;
    [CompilerGeneratedAttribute]
private SourceRepository <Source>k__BackingField;
    [CompilerGeneratedAttribute]
private Uri <DownloadUri>k__BackingField;
    [CompilerGeneratedAttribute]
private string <PackageHash>k__BackingField;
    public bool Listed { get; }
    public SourceRepository Source { get; }
    public Uri DownloadUri { get; }
    public string PackageHash { get; }
    public SourcePackageDependencyInfo(string id, NuGetVersion version, IEnumerable`1<PackageDependency> dependencies, bool listed, SourceRepository source);
    public SourcePackageDependencyInfo(string id, NuGetVersion version, IEnumerable`1<PackageDependency> dependencies, bool listed, SourceRepository source, Uri downloadUri, string packageHash);
    public SourcePackageDependencyInfo(PackageIdentity identity, IEnumerable`1<PackageDependency> dependencies, bool listed, SourceRepository source, Uri downloadUri, string packageHash);
    [CompilerGeneratedAttribute]
public bool get_Listed();
    [CompilerGeneratedAttribute]
public SourceRepository get_Source();
    [CompilerGeneratedAttribute]
public Uri get_DownloadUri();
    [CompilerGeneratedAttribute]
public string get_PackageHash();
}
public class NuGet.Protocol.Core.Types.SourceRepository : object {
    private Dictionary`2<Type, INuGetResourceProvider[]> _providerCache;
    private PackageSource _source;
    [CompilerGeneratedAttribute]
private FeedType <FeedTypeOverride>k__BackingField;
    public FeedType FeedTypeOverride { get; }
    public PackageSource PackageSource { get; }
    public SourceRepository(PackageSource source, IEnumerable`1<INuGetResourceProvider> providers);
    public SourceRepository(PackageSource source, IEnumerable`1<Lazy`1<INuGetResourceProvider>> providers);
    public SourceRepository(PackageSource source, IEnumerable`1<Lazy`1<INuGetResourceProvider>> providers, FeedType feedTypeOverride);
    [CompilerGeneratedAttribute]
public FeedType get_FeedTypeOverride();
    public virtual string ToString();
    public virtual PackageSource get_PackageSource();
    [AsyncStateMachineAttribute("NuGet.Protocol.Core.Types.SourceRepository/<GetFeedType>d__12")]
public virtual Task`1<FeedType> GetFeedType(CancellationToken token);
    public virtual T GetResource();
    public virtual T GetResource(CancellationToken token);
    [AsyncStateMachineAttribute("NuGet.Protocol.Core.Types.SourceRepository/<GetResourceAsync>d__15`1")]
public virtual Task`1<T> GetResourceAsync();
    [AsyncStateMachineAttribute("NuGet.Protocol.Core.Types.SourceRepository/<GetResourceAsync>d__16`1")]
public virtual Task`1<T> GetResourceAsync(CancellationToken token);
    private static Dictionary`2<Type, INuGetResourceProvider[]> Init(IEnumerable`1<Lazy`1<INuGetResourceProvider>> providers);
    private static INuGetResourceProvider[] Sort(IEnumerable`1<Lazy`1<INuGetResourceProvider>> group);
    private static FeedType GetFeedType(PackageSource source);
}
public class NuGet.Protocol.Core.Types.SourceRepositoryProvider : object {
    private IPackageSourceProvider _packageSourceProvider;
    private IEnumerable`1<Lazy`1<INuGetResourceProvider>> _resourceProviders;
    private List`1<SourceRepository> _repositories;
    public IPackageSourceProvider PackageSourceProvider { get; }
    public SourceRepositoryProvider(ISettings settings, IEnumerable`1<Lazy`1<INuGetResourceProvider>> resourceProviders);
    public SourceRepositoryProvider(IPackageSourceProvider packageSourceProvider, IEnumerable`1<Lazy`1<INuGetResourceProvider>> resourceProviders);
    public sealed virtual IEnumerable`1<SourceRepository> GetRepositories();
    public sealed virtual SourceRepository CreateRepository(PackageSource source);
    public sealed virtual SourceRepository CreateRepository(PackageSource source, FeedType type);
    public sealed virtual IPackageSourceProvider get_PackageSourceProvider();
    private void Init();
    [CompilerGeneratedAttribute]
private void <.ctor>b__4_0(object sender, EventArgs e);
}
public static class NuGet.Protocol.Core.Types.UserAgent : object {
    [CompilerGeneratedAttribute]
private static string <UserAgentString>k__BackingField;
    public static string UserAgentString { get; private set; }
    private static UserAgent();
    public static void SetUserAgentString(UserAgentStringBuilder builder);
    [CompilerGeneratedAttribute]
public static string get_UserAgentString();
    [CompilerGeneratedAttribute]
private static void set_UserAgentString(string value);
    public static void SetUserAgent(HttpClient client);
}
public class NuGet.Protocol.Core.Types.UserAgentStringBuilder : object {
    public static string DefaultNuGetClientName;
    private static string UserAgentWithOSDescriptionAndVisualStudioSKUTemplate;
    private static string UserAgentWithOSDescriptionTemplate;
    private static string UserAgentTemplate;
    private string _clientName;
    private string _vsInfo;
    private string _osInfo;
    [CompilerGeneratedAttribute]
private string <NuGetClientVersion>k__BackingField;
    public string NuGetClientVersion { get; }
    public UserAgentStringBuilder(string clientName);
    private static UserAgentStringBuilder();
    [CompilerGeneratedAttribute]
public string get_NuGetClientVersion();
    public UserAgentStringBuilder WithOSDescription(string osInfo);
    public UserAgentStringBuilder WithVisualStudioSKU(string vsInfo);
    public string Build();
    private string GetOSVersion();
}
public class NuGet.Protocol.Core.Types.VersionInfo : object {
    [CompilerGeneratedAttribute]
private NuGetVersion <Version>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<long> <DownloadCount>k__BackingField;
    [CompilerGeneratedAttribute]
private IPackageSearchMetadata <PackageSearchMetadata>k__BackingField;
    public NuGetVersion Version { get; private set; }
    public Nullable`1<long> DownloadCount { get; private set; }
    public IPackageSearchMetadata PackageSearchMetadata { get; public set; }
    public VersionInfo(NuGetVersion version);
    public VersionInfo(NuGetVersion version, string downloadCount);
    public VersionInfo(NuGetVersion version, Nullable`1<long> downloadCount);
    [CompilerGeneratedAttribute]
public NuGetVersion get_Version();
    [CompilerGeneratedAttribute]
private void set_Version(NuGetVersion value);
    [CompilerGeneratedAttribute]
public Nullable`1<long> get_DownloadCount();
    [CompilerGeneratedAttribute]
private void set_DownloadCount(Nullable`1<long> value);
    [CompilerGeneratedAttribute]
public IPackageSearchMetadata get_PackageSearchMetadata();
    [CompilerGeneratedAttribute]
public void set_PackageSearchMetadata(IPackageSearchMetadata value);
}
public enum NuGet.Protocol.FeedType : Enum {
    public int value__;
    public static FeedType Undefined;
    public static FeedType HttpV2;
    public static FeedType HttpV3;
    public static FeedType FileSystemV2;
    public static FeedType FileSystemV3;
    public static FeedType FileSystemUnzipped;
    public static FeedType FileSystemPackagesConfig;
    public static FeedType FileSystemUnknown;
}
public class NuGet.Protocol.FeedTypePackageSource : PackageSource {
    [CompilerGeneratedAttribute]
private FeedType <FeedType>k__BackingField;
    public FeedType FeedType { get; }
    public FeedTypePackageSource(string source, FeedType feedType);
    [CompilerGeneratedAttribute]
public FeedType get_FeedType();
}
public class NuGet.Protocol.FeedTypeResource : object {
    [CompilerGeneratedAttribute]
private FeedType <FeedType>k__BackingField;
    public FeedType FeedType { get; }
    public FeedTypeResource(FeedType feedType);
    [CompilerGeneratedAttribute]
public FeedType get_FeedType();
}
[ExtensionAttribute]
public static class NuGet.Protocol.HttpResponseMessageExtensions : object {
    [ExtensionAttribute]
public static void LogServerWarning(HttpResponseMessage response, ILogger log);
}
public static class NuGet.Protocol.ProtocolConstants : object {
    public static string ApiKeyHeader;
    public static string ServerWarningHeader;
    private static ProtocolConstants();
}
[ExtensionAttribute]
internal static class NuGet.Shared.EqualityUtility : object {
    [ExtensionAttribute]
internal static bool OrderedEquals(IEnumerable`1<TSource> self, IEnumerable`1<TSource> other, Func`2<TSource, TKey> keySelector, IComparer`1<TKey> orderComparer, IEqualityComparer`1<TSource> sequenceComparer);
    [ExtensionAttribute]
internal static bool SequenceEqualWithNullCheck(IEnumerable`1<T> self, IEnumerable`1<T> other, IEqualityComparer`1<T> comparer);
    internal static bool DictionaryEquals(IDictionary`2<TKey, TValue> self, IDictionary`2<TKey, TValue> other, Func`3<TValue, TValue, bool> compareValues);
    internal static bool DictionaryOfSequenceEquals(IDictionary`2<TKey, IEnumerable`1<TValue>> self, IDictionary`2<TKey, IEnumerable`1<TValue>> other);
    internal static bool EqualsWithNullCheck(T self, T other);
    private static bool TryIdentityEquals(T self, T other, Boolean& equals);
}
internal class NuGet.Shared.HashCodeCombiner : ValueType {
    private static long Seed;
    private bool _initialized;
    private long _combinedHash;
    internal int CombinedHash { get; }
    internal int get_CombinedHash();
    internal void AddInt32(int i);
    internal void AddObject(int i);
    internal void AddObject(bool b);
    internal void AddObject(TValue o, IEqualityComparer`1<TValue> comparer);
    internal void AddObject(object o);
    internal void AddStringIgnoreCase(string s);
    internal void AddSequence(IEnumerable`1<T> sequence);
    internal void AddDictionary(IEnumerable`1<KeyValuePair`2<TKey, TValue>> dictionary);
    internal static int GetHashCode(Object[] objects);
    private void CheckInitialized();
}
