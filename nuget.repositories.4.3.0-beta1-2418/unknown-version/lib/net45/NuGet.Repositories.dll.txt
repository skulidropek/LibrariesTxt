public class NuGet.Repositories.LocalPackageInfo : object {
    private NuspecReader _nuspec;
    [CompilerGeneratedAttribute]
private string <Id>k__BackingField;
    [CompilerGeneratedAttribute]
private NuGetVersion <Version>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ExpandedPath>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ManifestPath>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ZipPath>k__BackingField;
    public string Id { get; }
    public NuGetVersion Version { get; }
    public string ExpandedPath { get; public set; }
    public string ManifestPath { get; }
    public string ZipPath { get; }
    public NuspecReader Nuspec { get; }
    public LocalPackageInfo(string packageId, NuGetVersion version, string path, string manifestPath, string zipPath);
    [CompilerGeneratedAttribute]
public string get_Id();
    [CompilerGeneratedAttribute]
public NuGetVersion get_Version();
    [CompilerGeneratedAttribute]
public string get_ExpandedPath();
    [CompilerGeneratedAttribute]
public void set_ExpandedPath(string value);
    [CompilerGeneratedAttribute]
public string get_ManifestPath();
    [CompilerGeneratedAttribute]
public string get_ZipPath();
    public NuspecReader get_Nuspec();
    public virtual string ToString();
}
public class NuGet.Repositories.LocalPackageSourceInfo : object {
    [CompilerGeneratedAttribute]
private NuGetv3LocalRepository <Repository>k__BackingField;
    [CompilerGeneratedAttribute]
private LocalPackageInfo <Package>k__BackingField;
    public NuGetv3LocalRepository Repository { get; }
    public LocalPackageInfo Package { get; }
    public LocalPackageSourceInfo(NuGetv3LocalRepository repository, LocalPackageInfo package);
    [CompilerGeneratedAttribute]
public NuGetv3LocalRepository get_Repository();
    [CompilerGeneratedAttribute]
public LocalPackageInfo get_Package();
}
public class NuGet.Repositories.NuGetv3LocalRepository : object {
    private ConcurrentDictionary`2<string, LocalPackageInfo> _packageCache;
    private ConcurrentDictionary`2<string, IEnumerable`1<LocalPackageInfo>> _cache;
    private ConcurrentDictionary`2<string, object> _idLocks;
    [CompilerGeneratedAttribute]
private VersionFolderPathResolver <PathResolver>k__BackingField;
    [CompilerGeneratedAttribute]
private string <RepositoryRoot>k__BackingField;
    public VersionFolderPathResolver PathResolver { get; }
    public string RepositoryRoot { get; }
    public NuGetv3LocalRepository(string path);
    [CompilerGeneratedAttribute]
public VersionFolderPathResolver get_PathResolver();
    [CompilerGeneratedAttribute]
public string get_RepositoryRoot();
    public LocalPackageInfo FindPackage(string packageId, NuGetVersion version);
    public IEnumerable`1<LocalPackageInfo> FindPackagesById(string packageId);
    private List`1<LocalPackageInfo> GetPackages(string id);
    public void ClearCacheForIds(IEnumerable`1<string> packageIds);
    private object GetLockObj(string privateId);
    [CompilerGeneratedAttribute]
private IEnumerable`1<LocalPackageInfo> <FindPackagesById>b__11_0(string id);
}
public static class NuGet.Repositories.NuGetv3LocalRepositoryUtility : object {
    public static LocalPackageSourceInfo GetPackage(IReadOnlyList`1<NuGetv3LocalRepository> repositories, string id, NuGetVersion version);
}
[ExtensionAttribute]
internal static class NuGet.Shared.EqualityUtility : object {
    [ExtensionAttribute]
internal static bool OrderedEquals(IEnumerable`1<TSource> self, IEnumerable`1<TSource> other, Func`2<TSource, TKey> keySelector, IComparer`1<TKey> orderComparer, IEqualityComparer`1<TSource> sequenceComparer);
    [ExtensionAttribute]
internal static bool SequenceEqualWithNullCheck(IEnumerable`1<T> self, IEnumerable`1<T> other, IEqualityComparer`1<T> comparer);
    internal static bool DictionaryEquals(IDictionary`2<TKey, TValue> self, IDictionary`2<TKey, TValue> other, Func`3<TValue, TValue, bool> compareValues);
    internal static bool DictionaryOfSequenceEquals(IDictionary`2<TKey, IEnumerable`1<TValue>> self, IDictionary`2<TKey, IEnumerable`1<TValue>> other);
    internal static bool EqualsWithNullCheck(T self, T other);
    private static bool TryIdentityEquals(T self, T other, Boolean& equals);
}
internal class NuGet.Shared.HashCodeCombiner : ValueType {
    private static long Seed;
    private bool _initialized;
    private long _combinedHash;
    internal int CombinedHash { get; }
    internal int get_CombinedHash();
    internal void AddInt32(int i);
    internal void AddObject(int i);
    internal void AddObject(bool b);
    internal void AddObject(TValue o, IEqualityComparer`1<TValue> comparer);
    internal void AddObject(object o);
    internal void AddStringIgnoreCase(string s);
    internal void AddSequence(IEnumerable`1<T> sequence);
    internal void AddDictionary(IEnumerable`1<KeyValuePair`2<TKey, TValue>> dictionary);
    internal static int GetHashCode(Object[] objects);
    private void CheckInitialized();
}
