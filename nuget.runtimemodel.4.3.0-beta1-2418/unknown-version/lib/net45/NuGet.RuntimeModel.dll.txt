public class NuGet.RuntimeModel.CompatibilityProfile : object {
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    [CompilerGeneratedAttribute]
private IList`1<FrameworkRuntimePair> <RestoreContexts>k__BackingField;
    public string Name { get; }
    public IList`1<FrameworkRuntimePair> RestoreContexts { get; }
    public CompatibilityProfile(string name);
    public CompatibilityProfile(string name, IEnumerable`1<FrameworkRuntimePair> restoreContexts);
    [CompilerGeneratedAttribute]
public string get_Name();
    [CompilerGeneratedAttribute]
public IList`1<FrameworkRuntimePair> get_RestoreContexts();
    public virtual string ToString();
    public virtual int GetHashCode();
    public virtual bool Equals(object obj);
    public sealed virtual bool Equals(CompatibilityProfile other);
}
public interface NuGet.RuntimeModel.IObjectWriter {
    public abstract virtual void WriteObjectStart(string name);
    public abstract virtual void WriteObjectEnd();
    public abstract virtual void WriteNameValue(string name, int value);
    public abstract virtual void WriteNameValue(string name, bool value);
    public abstract virtual void WriteNameValue(string name, string value);
    public abstract virtual void WriteNameArray(string name, IEnumerable`1<string> values);
}
public class NuGet.RuntimeModel.JsonObjectWriter : object {
    private Stack`1<JContainer> _containers;
    private JContainer _currentContainer;
    private bool _isReadOnly;
    private JObject _root;
    public sealed virtual void WriteObjectStart(string name);
    public sealed virtual void WriteObjectEnd();
    public sealed virtual void WriteNameValue(string name, int value);
    public sealed virtual void WriteNameValue(string name, bool value);
    public sealed virtual void WriteNameValue(string name, string value);
    public sealed virtual void WriteNameArray(string name, IEnumerable`1<string> values);
    public string GetJson();
    public JObject GetJObject();
    public void WriteTo(JsonTextWriter writer);
    private JContainer GetPreviousContainer();
    private void ThrowIfReadOnly();
}
public static class NuGet.RuntimeModel.JsonRuntimeFormat : object {
    public static RuntimeGraph ReadRuntimeGraph(string filePath);
    public static RuntimeGraph ReadRuntimeGraph(Stream stream);
    public static RuntimeGraph ReadRuntimeGraph(TextReader textReader);
    public static void WriteRuntimeGraph(string filePath, RuntimeGraph runtimeGraph);
    public static RuntimeGraph ReadRuntimeGraph(JToken json);
    public static void WriteRuntimeGraph(IObjectWriter writer, RuntimeGraph runtimeGraph);
    private static void WriteRuntimeDescription(IObjectWriter writer, RuntimeDescription data);
    private static void WriteRuntimeDependencySet(IObjectWriter writer, RuntimeDependencySet data);
    private static void WritePackageDependency(IObjectWriter writer, RuntimePackageDependency data);
    private static void WriteCompatibilityProfile(IObjectWriter writer, CompatibilityProfile data);
    private static CompatibilityProfile ReadCompatibilityProfile(KeyValuePair`2<string, JToken> json);
    [IteratorStateMachineAttribute("NuGet.RuntimeModel.JsonRuntimeFormat/<ReadCompatibilitySets>d__11")]
private static IEnumerable`1<FrameworkRuntimePair> ReadCompatibilitySets(KeyValuePair`2<string, JToken> property);
    private static RuntimeDescription ReadRuntimeDescription(KeyValuePair`2<string, JToken> json);
    private static RuntimeDependencySet ReadRuntimeDependencySet(KeyValuePair`2<string, JToken> json);
    private static RuntimePackageDependency ReadRuntimePackageDependency(KeyValuePair`2<string, JToken> json);
    private static IEnumerable`1<KeyValuePair`2<string, JToken>> EachProperty(JToken json);
}
public class NuGet.RuntimeModel.RuntimeDependencySet : object {
    [CompilerGeneratedAttribute]
private string <Id>k__BackingField;
    [CompilerGeneratedAttribute]
private IReadOnlyDictionary`2<string, RuntimePackageDependency> <Dependencies>k__BackingField;
    public string Id { get; }
    public IReadOnlyDictionary`2<string, RuntimePackageDependency> Dependencies { get; }
    public RuntimeDependencySet(string id);
    public RuntimeDependencySet(string id, IEnumerable`1<RuntimePackageDependency> dependencies);
    [CompilerGeneratedAttribute]
public string get_Id();
    [CompilerGeneratedAttribute]
public IReadOnlyDictionary`2<string, RuntimePackageDependency> get_Dependencies();
    public sealed virtual bool Equals(RuntimeDependencySet other);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
    public RuntimeDependencySet Clone();
    public virtual string ToString();
}
public class NuGet.RuntimeModel.RuntimeDescription : object {
    [CompilerGeneratedAttribute]
private string <RuntimeIdentifier>k__BackingField;
    [CompilerGeneratedAttribute]
private IReadOnlyList`1<string> <InheritedRuntimes>k__BackingField;
    [CompilerGeneratedAttribute]
private IReadOnlyDictionary`2<string, RuntimeDependencySet> <RuntimeDependencySets>k__BackingField;
    public string RuntimeIdentifier { get; }
    public IReadOnlyList`1<string> InheritedRuntimes { get; }
    public IReadOnlyDictionary`2<string, RuntimeDependencySet> RuntimeDependencySets { get; }
    public RuntimeDescription(string runtimeIdentifier);
    public RuntimeDescription(string runtimeIdentifier, IEnumerable`1<string> inheritedRuntimes);
    public RuntimeDescription(string runtimeIdentifier, IEnumerable`1<RuntimeDependencySet> runtimeDependencySets);
    public RuntimeDescription(string runtimeIdentifier, IEnumerable`1<string> inheritedRuntimes, IEnumerable`1<RuntimeDependencySet> runtimeDependencySets);
    [CompilerGeneratedAttribute]
public string get_RuntimeIdentifier();
    [CompilerGeneratedAttribute]
public IReadOnlyList`1<string> get_InheritedRuntimes();
    [CompilerGeneratedAttribute]
public IReadOnlyDictionary`2<string, RuntimeDependencySet> get_RuntimeDependencySets();
    public sealed virtual bool Equals(RuntimeDescription other);
    public RuntimeDescription Clone();
    public static RuntimeDescription Merge(RuntimeDescription left, RuntimeDescription right);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
    public virtual string ToString();
}
public class NuGet.RuntimeModel.RuntimeGraph : object {
    private ConcurrentDictionary`2<Tuple`2<string, string>, bool> _areCompatible;
    public static string RuntimeGraphFileName;
    public static RuntimeGraph Empty;
    [CompilerGeneratedAttribute]
private IReadOnlyDictionary`2<string, RuntimeDescription> <Runtimes>k__BackingField;
    [CompilerGeneratedAttribute]
private IReadOnlyDictionary`2<string, CompatibilityProfile> <Supports>k__BackingField;
    public IReadOnlyDictionary`2<string, RuntimeDescription> Runtimes { get; }
    public IReadOnlyDictionary`2<string, CompatibilityProfile> Supports { get; public set; }
    public RuntimeGraph(IEnumerable`1<RuntimeDescription> runtimes);
    public RuntimeGraph(IEnumerable`1<CompatibilityProfile> supports);
    public RuntimeGraph(IEnumerable`1<RuntimeDescription> runtimes, IEnumerable`1<CompatibilityProfile> supports);
    private RuntimeGraph(Dictionary`2<string, RuntimeDescription> runtimes, Dictionary`2<string, CompatibilityProfile> supports);
    private static RuntimeGraph();
    [CompilerGeneratedAttribute]
public IReadOnlyDictionary`2<string, RuntimeDescription> get_Runtimes();
    [CompilerGeneratedAttribute]
public IReadOnlyDictionary`2<string, CompatibilityProfile> get_Supports();
    [CompilerGeneratedAttribute]
public void set_Supports(IReadOnlyDictionary`2<string, CompatibilityProfile> value);
    public RuntimeGraph Clone();
    public static RuntimeGraph Merge(RuntimeGraph left, RuntimeGraph right);
    [IteratorStateMachineAttribute("NuGet.RuntimeModel.RuntimeGraph/<ExpandRuntime>d__17")]
public IEnumerable`1<string> ExpandRuntime(string runtime);
    public bool AreCompatible(string criteria, string provided);
    public IEnumerable`1<RuntimePackageDependency> FindRuntimeDependencies(string runtimeName, string packageId);
    public sealed virtual bool Equals(RuntimeGraph other);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
    [CompilerGeneratedAttribute]
private bool <AreCompatible>b__18_0(Tuple`2<string, string> tuple);
}
public class NuGet.RuntimeModel.RuntimePackageDependency : object {
    [CompilerGeneratedAttribute]
private string <Id>k__BackingField;
    [CompilerGeneratedAttribute]
private VersionRange <VersionRange>k__BackingField;
    public string Id { get; }
    public VersionRange VersionRange { get; }
    public RuntimePackageDependency(string id, VersionRange versionRange);
    [CompilerGeneratedAttribute]
public string get_Id();
    [CompilerGeneratedAttribute]
public VersionRange get_VersionRange();
    public RuntimePackageDependency Clone();
    public virtual string ToString();
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
    public sealed virtual bool Equals(RuntimePackageDependency other);
}
[ExtensionAttribute]
internal static class NuGet.Shared.EqualityUtility : object {
    [ExtensionAttribute]
internal static bool OrderedEquals(IEnumerable`1<TSource> self, IEnumerable`1<TSource> other, Func`2<TSource, TKey> keySelector, IComparer`1<TKey> orderComparer, IEqualityComparer`1<TSource> sequenceComparer);
    [ExtensionAttribute]
internal static bool SequenceEqualWithNullCheck(IEnumerable`1<T> self, IEnumerable`1<T> other, IEqualityComparer`1<T> comparer);
    internal static bool DictionaryEquals(IDictionary`2<TKey, TValue> self, IDictionary`2<TKey, TValue> other, Func`3<TValue, TValue, bool> compareValues);
    internal static bool DictionaryOfSequenceEquals(IDictionary`2<TKey, IEnumerable`1<TValue>> self, IDictionary`2<TKey, IEnumerable`1<TValue>> other);
    internal static bool EqualsWithNullCheck(T self, T other);
    private static bool TryIdentityEquals(T self, T other, Boolean& equals);
}
internal class NuGet.Shared.HashCodeCombiner : ValueType {
    private static long Seed;
    private bool _initialized;
    private long _combinedHash;
    internal int CombinedHash { get; }
    internal int get_CombinedHash();
    internal void AddInt32(int i);
    internal void AddObject(int i);
    internal void AddObject(bool b);
    internal void AddObject(TValue o, IEqualityComparer`1<TValue> comparer);
    internal void AddObject(object o);
    internal void AddStringIgnoreCase(string s);
    internal void AddSequence(IEnumerable`1<T> sequence);
    internal void AddDictionary(IEnumerable`1<KeyValuePair`2<TKey, TValue>> dictionary);
    internal static int GetHashCode(Object[] objects);
    private void CheckInitialized();
}
