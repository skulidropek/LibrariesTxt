[CompilerGeneratedAttribute]
[EmbeddedAttribute]
internal class Microsoft.CodeAnalysis.EmbeddedAttribute : Attribute {
}
[PublicAPIAttribute]
public abstract class Nuke.Common.ProjectModel.PrimitiveProject : object {
    [CompilerGeneratedAttribute]
private Solution <Solution>k__BackingField;
    [CompilerGeneratedAttribute]
private Guid <ProjectId>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    [CompilerGeneratedAttribute]
private Guid <TypeId>k__BackingField;
    public Solution Solution { get; }
    public Guid ProjectId { get; public set; }
    public string Name { get; public set; }
    public Guid TypeId { get; public set; }
    public SolutionFolder SolutionFolder { get; public set; }
    internal string RelativePath { get; }
    protected PrimitiveProject(Solution solution, Guid projectId, string name, Guid typeId);
    [CompilerGeneratedAttribute]
public Solution get_Solution();
    [CompilerGeneratedAttribute]
public Guid get_ProjectId();
    [CompilerGeneratedAttribute]
public void set_ProjectId(Guid value);
    [CompilerGeneratedAttribute]
public string get_Name();
    [CompilerGeneratedAttribute]
public void set_Name(string value);
    [CompilerGeneratedAttribute]
public Guid get_TypeId();
    [CompilerGeneratedAttribute]
public void set_TypeId(Guid value);
    public SolutionFolder get_SolutionFolder();
    public void set_SolutionFolder(SolutionFolder value);
    internal abstract virtual string get_RelativePath();
    public bool Is(ProjectType projectType);
    [CompilerGeneratedAttribute]
private bool <Is>b__21_0(Guid x);
}
[PublicAPIAttribute]
public class Nuke.Common.ProjectModel.Project : PrimitiveProject {
    private Func`1<string> _pathProvider;
    [CompilerGeneratedAttribute]
private IDictionary`2<string, string> <Configurations>k__BackingField;
    public AbsolutePath Path { get; }
    public AbsolutePath Directory { get; }
    public IDictionary`2<string, string> Configurations { get; }
    internal string RelativePath { get; }
    internal Project(Solution solution, Guid projectId, string name, Func`1<string> pathProvider, Guid typeId, IDictionary`2<string, string> configurations);
    public sealed virtual AbsolutePath get_Path();
    public AbsolutePath get_Directory();
    [CompilerGeneratedAttribute]
public IDictionary`2<string, string> get_Configurations();
    public static string op_Implicit(Project project);
    public virtual string ToString();
    internal virtual string get_RelativePath();
}
[PublicAPIAttribute]
public class Nuke.Common.ProjectModel.ProjectType : object {
    public static ProjectType SolutionFolder;
    public static ProjectType CSharpProject;
    public static ProjectType VBNetProject;
    public static ProjectType FSharpProject;
    public static ProjectType VisualCppProject;
    public static ProjectType VSTAProject;
    public static ProjectType VSTOProject;
    public static ProjectType AspNetProject;
    public static ProjectType SharePointProject;
    public static ProjectType SqlProject;
    public static ProjectType DockerComposeProject;
    public static ProjectType WindowsPhoneProject;
    public static ProjectType WcfProject;
    public static ProjectType WpfProject;
    public static ProjectType WwfProject;
    public static ProjectType WindowsStoreProject;
    public static ProjectType XamarinProject;
    public static ProjectType XnaProject;
    public static ProjectType JavaScriptProject;
    [CompilerGeneratedAttribute]
private IReadOnlyCollection`1<Guid> <Guids>k__BackingField;
    public Guid FirstGuid { get; }
    public IReadOnlyCollection`1<Guid> Guids { get; }
    public ProjectType(String[] guids);
    public ProjectType(Guid[] guids);
    private static ProjectType();
    public Guid get_FirstGuid();
    [CompilerGeneratedAttribute]
public IReadOnlyCollection`1<Guid> get_Guids();
}
[PublicAPIAttribute]
public class Nuke.Common.ProjectModel.Solution : object {
    [CompilerGeneratedAttribute]
private List`1<PrimitiveProject> <PrimitiveProjects>k__BackingField;
    [CompilerGeneratedAttribute]
private Dictionary`2<PrimitiveProject, SolutionFolder> <PrimitiveProjectParents>k__BackingField;
    [CompilerGeneratedAttribute]
private AbsolutePath <Path>k__BackingField;
    [CompilerGeneratedAttribute]
private String[] <Header>k__BackingField;
    [CompilerGeneratedAttribute]
private IDictionary`2<string, string> <Properties>k__BackingField;
    [CompilerGeneratedAttribute]
private IDictionary`2<string, string> <ExtensibilityGlobals>k__BackingField;
    [CompilerGeneratedAttribute]
private IDictionary`2<string, string> <Configurations>k__BackingField;
    internal List`1<PrimitiveProject> PrimitiveProjects { get; }
    internal Dictionary`2<PrimitiveProject, SolutionFolder> PrimitiveProjectParents { get; }
    [CanBeNullAttribute]
public AbsolutePath Path { get; internal set; }
    [CanBeNullAttribute]
public string Name { get; }
    [CanBeNullAttribute]
public string FileName { get; }
    [CanBeNullAttribute]
public AbsolutePath Directory { get; }
    public String[] Header { get; public set; }
    public IDictionary`2<string, string> Properties { get; public set; }
    public IDictionary`2<string, string> ExtensibilityGlobals { get; public set; }
    public IDictionary`2<string, string> Configurations { get; public set; }
    public IReadOnlyCollection`1<Project> AllProjects { get; }
    public IReadOnlyCollection`1<SolutionFolder> AllSolutionFolders { get; }
    public IReadOnlyCollection`1<Project> Projects { get; }
    public IReadOnlyCollection`1<SolutionFolder> SolutionFolders { get; }
    [CompilerGeneratedAttribute]
internal List`1<PrimitiveProject> get_PrimitiveProjects();
    [CompilerGeneratedAttribute]
internal Dictionary`2<PrimitiveProject, SolutionFolder> get_PrimitiveProjectParents();
    [CompilerGeneratedAttribute]
public sealed virtual AbsolutePath get_Path();
    [CompilerGeneratedAttribute]
internal void set_Path(AbsolutePath value);
    public string get_Name();
    public string get_FileName();
    public AbsolutePath get_Directory();
    [CompilerGeneratedAttribute]
public String[] get_Header();
    [CompilerGeneratedAttribute]
public void set_Header(String[] value);
    [CompilerGeneratedAttribute]
public IDictionary`2<string, string> get_Properties();
    [CompilerGeneratedAttribute]
public void set_Properties(IDictionary`2<string, string> value);
    [CompilerGeneratedAttribute]
public IDictionary`2<string, string> get_ExtensibilityGlobals();
    [CompilerGeneratedAttribute]
public void set_ExtensibilityGlobals(IDictionary`2<string, string> value);
    [CompilerGeneratedAttribute]
public IDictionary`2<string, string> get_Configurations();
    [CompilerGeneratedAttribute]
public void set_Configurations(IDictionary`2<string, string> value);
    public IReadOnlyCollection`1<Project> get_AllProjects();
    public IReadOnlyCollection`1<SolutionFolder> get_AllSolutionFolders();
    public IReadOnlyCollection`1<Project> get_Projects();
    public IReadOnlyCollection`1<SolutionFolder> get_SolutionFolders();
    public static string op_Implicit(Solution solution);
    public static AbsolutePath op_Implicit(Solution solution);
    public virtual string ToString();
    [CanBeNullAttribute]
public SolutionFolder GetSolutionFolder(string name);
    [CanBeNullAttribute]
public Project GetProject(string name);
    public IEnumerable`1<Project> GetAllProjects(string wildcardPattern);
    public SolutionFolder AddSolutionFolder(string name, Nullable`1<Guid> projectId, SolutionFolder solutionFolder);
    public Project AddProject(string name, Guid typeId, string path, Nullable`1<Guid> projectId, IDictionary`2<string, string> configurationPlatforms, SolutionFolder solutionFolder);
    internal void AddPrimitiveProject(PrimitiveProject primitiveProject, SolutionFolder solutionFolder);
    public IReadOnlyCollection`1<PrimitiveProject> RemoveSolutionFolder(SolutionFolder solutionFolder);
    internal IReadOnlyCollection`1<PrimitiveProject> GetNestedPrimitiveProjects(SolutionFolder solutionFolder);
    public void RemoveProject(Project project);
    [CanBeNullAttribute]
internal SolutionFolder GetSolutionFolder(PrimitiveProject primitiveProject);
    internal void SetSolutionFolder(SolutionFolder solutionFolder, PrimitiveProject primitiveProject);
    public void SaveAs(AbsolutePath solutionFile);
    public void Save();
    public void AddSolution(Solution solution, SolutionFolder folder);
    public void RandomizeProjectIds();
}
[PublicAPIAttribute]
public class Nuke.Common.ProjectModel.SolutionFolder : PrimitiveProject {
    internal static Guid Guid;
    [CompilerGeneratedAttribute]
private IDictionary`2<string, string> <Items>k__BackingField;
    public IDictionary`2<string, string> Items { get; public set; }
    public IReadOnlyCollection`1<SolutionFolder> SolutionFolders { get; }
    public IReadOnlyCollection`1<Project> Projects { get; }
    internal string RelativePath { get; }
    public SolutionFolder(Solution solution, Guid projectId, string name, IDictionary`2<string, string> items);
    private static SolutionFolder();
    [CompilerGeneratedAttribute]
public IDictionary`2<string, string> get_Items();
    [CompilerGeneratedAttribute]
public void set_Items(IDictionary`2<string, string> value);
    public IReadOnlyCollection`1<SolutionFolder> get_SolutionFolders();
    public IReadOnlyCollection`1<Project> get_Projects();
    [CanBeNullAttribute]
public SolutionFolder GetSolutionFolder(string name);
    [CanBeNullAttribute]
public Project GetProject(string name);
    internal virtual string get_RelativePath();
    [CompilerGeneratedAttribute]
private bool <get_SolutionFolders>b__7_0(SolutionFolder x);
    [CompilerGeneratedAttribute]
private bool <get_Projects>b__9_0(Project x);
}
[ExtensionAttribute]
[PublicAPIAttribute]
public static class Nuke.Common.ProjectModel.SolutionModelTasks : object {
    public static Solution CreateSolution(AbsolutePath solutionFile, Solution[] solutions);
    public static Solution CreateSolution(AbsolutePath solutionFile, IEnumerable`1<Solution> solutions, Func`2<Solution, string> folderNameProvider, bool randomizeProjectIds);
    public static Solution ParseSolution(AbsolutePath solutionFile);
    [ExtensionAttribute]
public static Solution ReadSolution(AbsolutePath path);
}
[ExtensionAttribute]
internal static class Nuke.Common.ProjectModel.SolutionSerializer : object {
    public static T DeserializeFromFile(AbsolutePath solutionFile);
    public static T DeserializeFromContent(String[] content, AbsolutePath solutionFile);
    [ExtensionAttribute]
[CanBeNullAttribute]
private static Dictionary`2<string, string> GetGlobalSection(String[] lines, string name, string solutionFile);
    [IteratorStateMachineAttribute("Nuke.Common.ProjectModel.SolutionSerializer/<GetPrimitiveProjects>d__3")]
private static IEnumerable`1<PrimitiveProject> GetPrimitiveProjects(Solution solution, String[] content, IReadOnlyDictionary`2<Guid, Dictionary`2<string, string>> configurations);
    public static void Serialize(Solution solution);
    public static void Serialize(Solution solution, Stream stream);
    [CompilerGeneratedAttribute]
internal static string <GetPrimitiveProjects>g__GuidPattern|3_0(string text);
    [CompilerGeneratedAttribute]
internal static string <GetPrimitiveProjects>g__TextPattern|3_1(string name);
    [CompilerGeneratedAttribute]
internal static string <Serialize>g__Format|5_2(Guid guid);
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
[AttributeUsageAttribute("2")]
internal class System.Runtime.CompilerServices.RefSafetyRulesAttribute : Attribute {
    public int Version;
    public RefSafetyRulesAttribute(int );
}
