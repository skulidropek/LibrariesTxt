[CompilerGeneratedAttribute]
[EmbeddedAttribute]
internal class Microsoft.CodeAnalysis.EmbeddedAttribute : Attribute {
}
[UsedImplicitlyAttribute]
public class Nuke.MSBuildTasks.CodeGenerationTask : ContextAwareTask {
    [CompilerGeneratedAttribute]
private ITaskItem[] <SpecificationFiles>k__BackingField;
    [CompilerGeneratedAttribute]
private string <BaseDirectory>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <UseNestedNamespaces>k__BackingField;
    [CompilerGeneratedAttribute]
private string <BaseNamespace>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <UpdateReferences>k__BackingField;
    [RequiredAttribute]
public ITaskItem[] SpecificationFiles { get; public set; }
    [RequiredAttribute]
public string BaseDirectory { get; public set; }
    public bool UseNestedNamespaces { get; public set; }
    [CanBeNullAttribute]
public string BaseNamespace { get; public set; }
    public bool UpdateReferences { get; public set; }
    [CompilerGeneratedAttribute]
public ITaskItem[] get_SpecificationFiles();
    [CompilerGeneratedAttribute]
public void set_SpecificationFiles(ITaskItem[] value);
    [CompilerGeneratedAttribute]
public string get_BaseDirectory();
    [CompilerGeneratedAttribute]
public void set_BaseDirectory(string value);
    [CompilerGeneratedAttribute]
public bool get_UseNestedNamespaces();
    [CompilerGeneratedAttribute]
public void set_UseNestedNamespaces(bool value);
    [CompilerGeneratedAttribute]
public string get_BaseNamespace();
    [CompilerGeneratedAttribute]
public void set_BaseNamespace(string value);
    [CompilerGeneratedAttribute]
public bool get_UpdateReferences();
    [CompilerGeneratedAttribute]
public void set_UpdateReferences(bool value);
    protected virtual bool ExecuteInner();
    [CompilerGeneratedAttribute]
private string <ExecuteInner>g__GetFilePath|20_1(Tool tool);
    [CompilerGeneratedAttribute]
private string <ExecuteInner>g__GetNamespace|20_2(Tool tool);
    [CompilerGeneratedAttribute]
private void <ExecuteInner>b__20_3(string x);
    [CompilerGeneratedAttribute]
private void <ExecuteInner>b__20_4(string x);
}
[PublicAPIAttribute]
public abstract class Nuke.MSBuildTasks.ContextAwareTask : Task {
    private static string Subcategory;
    protected string ManagedDllDirectory { get; }
    protected string UnmanagedDllDirectory { get; }
    protected virtual string get_ManagedDllDirectory();
    protected virtual string get_UnmanagedDllDirectory();
    public sealed virtual bool Execute();
    protected abstract virtual bool ExecuteInner();
    protected void LogError(string message, string helpKeyword, string code, string file, int lineNumber, int columnNumber, int endLineNumber, int endColumnNumber);
    protected void LogWarning(string message, string helpKeyword, string code, string file, int lineNumber, int columnNumber, int endLineNumber, int endColumnNumber);
    protected void LogMessage(MessageImportance importance, string message, string helpKeyword, string code, string file, int lineNumber, int columnNumber, int endLineNumber, int endColumnNumber);
}
[UsedImplicitlyAttribute]
public class Nuke.MSBuildTasks.EmbedPackagesForSelfContainedTask : ContextAwareTask {
    [CompilerGeneratedAttribute]
private string <ProjectAssetsFile>k__BackingField;
    [CompilerGeneratedAttribute]
private string <TargetFramework>k__BackingField;
    [CompilerGeneratedAttribute]
private ITaskItem[] <TargetOutputs>k__BackingField;
    [RequiredAttribute]
public string ProjectAssetsFile { get; public set; }
    [RequiredAttribute]
public string TargetFramework { get; public set; }
    [OutputAttribute]
public ITaskItem[] TargetOutputs { get; public set; }
    [CompilerGeneratedAttribute]
public string get_ProjectAssetsFile();
    [CompilerGeneratedAttribute]
public void set_ProjectAssetsFile(string value);
    [CompilerGeneratedAttribute]
public string get_TargetFramework();
    [CompilerGeneratedAttribute]
public void set_TargetFramework(string value);
    [CompilerGeneratedAttribute]
public ITaskItem[] get_TargetOutputs();
    [CompilerGeneratedAttribute]
public void set_TargetOutputs(ITaskItem[] value);
    protected virtual bool ExecuteInner();
}
[UsedImplicitlyAttribute]
public class Nuke.MSBuildTasks.PackPackageToolsTask : ContextAwareTask {
    [CompilerGeneratedAttribute]
private string <ProjectAssetsFile>k__BackingField;
    [CompilerGeneratedAttribute]
private string <NuGetPackageRoot>k__BackingField;
    [CompilerGeneratedAttribute]
private string <TargetFramework>k__BackingField;
    [CompilerGeneratedAttribute]
private ITaskItem[] <TargetOutputs>k__BackingField;
    [RequiredAttribute]
public string ProjectAssetsFile { get; public set; }
    [RequiredAttribute]
public string NuGetPackageRoot { get; public set; }
    [RequiredAttribute]
public string TargetFramework { get; public set; }
    [OutputAttribute]
public ITaskItem[] TargetOutputs { get; public set; }
    [CompilerGeneratedAttribute]
public string get_ProjectAssetsFile();
    [CompilerGeneratedAttribute]
public void set_ProjectAssetsFile(string value);
    [CompilerGeneratedAttribute]
public string get_NuGetPackageRoot();
    [CompilerGeneratedAttribute]
public void set_NuGetPackageRoot(string value);
    [CompilerGeneratedAttribute]
public string get_TargetFramework();
    [CompilerGeneratedAttribute]
public void set_TargetFramework(string value);
    [CompilerGeneratedAttribute]
public ITaskItem[] get_TargetOutputs();
    [CompilerGeneratedAttribute]
public void set_TargetOutputs(ITaskItem[] value);
    protected virtual bool ExecuteInner();
    [IteratorStateMachineAttribute("Nuke.MSBuildTasks.PackPackageToolsTask/<GetFiles>d__17")]
private IEnumerable`1<ITaskItem> GetFiles(string packageId, string packageVersion);
    [CompilerGeneratedAttribute]
private IEnumerable`1<ITaskItem> <ExecuteInner>b__16_0(InstalledPackage x);
}
[ExtensionAttribute]
public static class Nuke.MSBuildTasks.TaskItemExtensions : object {
    [ExtensionAttribute]
public static string GetMetadataOrNull(ITaskItem taskItem, string metdataName);
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
[AttributeUsageAttribute("2")]
internal class System.Runtime.CompilerServices.RefSafetyRulesAttribute : Attribute {
    public int Version;
    public RefSafetyRulesAttribute(int );
}
