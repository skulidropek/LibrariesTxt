[CompilerGeneratedAttribute]
[EmbeddedAttribute]
internal class Microsoft.CodeAnalysis.EmbeddedAttribute : Attribute {
}
public class Nuke.Common.Tooling.AptGetPackageRequirement : ToolRequirement {
    [CompilerGeneratedAttribute]
private string <PackageId>k__BackingField;
    public string PackageId { get; public set; }
    public static AptGetPackageRequirement Create(string packageId);
    [CompilerGeneratedAttribute]
public string get_PackageId();
    [CompilerGeneratedAttribute]
public void set_PackageId(string value);
}
[BaseTypeRequiredAttribute("Nuke.Common.Tooling.IRequireAptGetPackage")]
public class Nuke.Common.Tooling.AptGetPackageRequirementAttribute : ToolRequirementAttributeBase {
    private string _packageId;
    public AptGetPackageRequirementAttribute(string packageId);
    public virtual ToolRequirement GetRequirement(string version);
}
[PublicAPIAttribute]
public class Nuke.Common.Tooling.Arguments : object {
    internal static string Redacted;
    private static char Space;
    private List`1<string> _secrets;
    private List`1<KeyValuePair`2<string, List`1<string>>> _arguments;
    public Arguments Add(string argumentFormat, Nullable`1<bool> condition);
    public Arguments Add(string argumentFormat, Nullable`1<T> value, Nullable`1<char> disallowed, bool secret);
    public Arguments Add(string argumentFormat, object value, Nullable`1<char> disallowed, bool secret);
    public Arguments Add(string argumentFormat, string value, Nullable`1<char> disallowed, bool customValue, bool secret);
    public Arguments Add(string argumentFormat, IEnumerable`1<T> values, Nullable`1<char> separator, Nullable`1<char> disallowed, bool quoteMultiple);
    public Arguments Add(string argumentFormat, IReadOnlyDictionary`2<TKey, TValue> dictionary, string itemFormat, Nullable`1<char> separator, Nullable`1<char> disallowed, bool quoteMultiple);
    public Arguments Add(string argumentFormat, ILookup`2<TKey, TValue> lookup, string itemFormat, Nullable`1<char> separator, Nullable`1<char> disallowed, bool quoteMultiple);
    public Arguments Concatenate(Arguments arguments);
    private void AddInternal(string format, String[] values);
    private string FormatMultiple(IEnumerable`1<T> items, Func`2<T, string> format, char separator, bool quoteMultiple);
    public sealed virtual string FilterSecrets(string text);
    private string Render(bool forOutput);
    public sealed virtual string RenderForExecution();
    public sealed virtual string RenderForOutput();
    public virtual string ToString();
    [CompilerGeneratedAttribute]
private string <Render>g__Format|15_0(string argument, <>c__DisplayClass15_0& );
}
public class Nuke.Common.Tooling.CombinatorialConfigure`1 : MulticastDelegate {
    public CombinatorialConfigure`1(object object, IntPtr method);
    public virtual IEnumerable`1<T> Invoke(T settings);
    public virtual IAsyncResult BeginInvoke(T settings, AsyncCallback callback, object object);
    public virtual IEnumerable`1<T> EndInvoke(IAsyncResult result);
}
public class Nuke.Common.Tooling.Configure`1 : MulticastDelegate {
    public Configure`1(object object, IntPtr method);
    public virtual T Invoke(T settings);
    public virtual IAsyncResult BeginInvoke(T settings, AsyncCallback callback, object object);
    public virtual T EndInvoke(IAsyncResult result);
}
public class Nuke.Common.Tooling.Configure`2 : MulticastDelegate {
    public Configure`2(object object, IntPtr method);
    public virtual TSettings Invoke(TSettings settings, TValue value);
    public virtual IAsyncResult BeginInvoke(TSettings settings, TValue value, AsyncCallback callback, object object);
    public virtual TSettings EndInvoke(IAsyncResult result);
}
[ExtensionAttribute]
public static class Nuke.Common.Tooling.ConfigureExtensions : object {
    [ExtensionAttribute]
public static T InvokeSafe(Configure`1<T> configurator, T obj);
    [ExtensionAttribute]
public static IReadOnlyCollection`1<ValueTuple`2<TSettings, IReadOnlyCollection`1<Output>>> Invoke(CombinatorialConfigure`1<TSettings> configurator, Func`2<TSettings, IReadOnlyCollection`1<Output>> executor, Action`2<OutputType, string> logger, int degreeOfParallelism, bool completeOnFailure);
    [ExtensionAttribute]
public static IReadOnlyCollection`1<ValueTuple`3<TSettings, TResult, IReadOnlyCollection`1<Output>>> Invoke(CombinatorialConfigure`1<TSettings> configurator, Func`2<TSettings, ValueTuple`2<TResult, IReadOnlyCollection`1<Output>>> executor, Action`2<OutputType, string> logger, int degreeOfParallelism, bool completeOnFailure);
    private static IReadOnlyCollection`1<TResult> Invoke(CombinatorialConfigure`1<TSettings> configurator, Func`2<TSettings, TResult> executor, Func`2<TResult, IReadOnlyCollection`1<Output>> outputSelector, Action`2<OutputType, string> logger, int degreeOfParallelism, bool completeOnFailure);
}
[PublicAPIAttribute]
public abstract class Nuke.Common.Tooling.Enumeration : object {
    [CompilerGeneratedAttribute]
private string <Value>k__BackingField;
    protected string Value { get; protected set; }
    [CompilerGeneratedAttribute]
protected string get_Value();
    [CompilerGeneratedAttribute]
protected void set_Value(string value);
    public static string op_Implicit(Enumeration value);
    public static bool op_Equality(Enumeration a, Enumeration b);
    public static bool op_Inequality(Enumeration a, Enumeration b);
    protected bool Equals(Enumeration other);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
    public virtual string ToString();
}
[ExtensionAttribute]
public static class Nuke.Common.Tooling.EnumerationExtensions : object {
    [ExtensionAttribute]
public static string GetValue(T value);
}
[AttributeUsageAttribute("256")]
public class Nuke.Common.Tooling.EnumValueAttribute : Attribute {
    [CompilerGeneratedAttribute]
private string <Value>k__BackingField;
    public string Value { get; }
    public EnumValueAttribute(string value);
    [CompilerGeneratedAttribute]
public string get_Value();
}
[UsedImplicitlyAttribute("3")]
public static class Nuke.Common.Tooling.ExtensionHelper : object {
    public static void ToggleBoolean(IDictionary dictionary, string key);
    public static void SetCollection(IDictionary dictionary, string key, IEnumerable`1<T> values, char separator);
    public static void AddItems(IDictionary dictionary, string key, IEnumerable`1<T> values, char separator);
    public static void RemoveItems(IDictionary dictionary, string key, IEnumerable`1<T> values, char separator);
    private static List`1<TValue> ParseCollection(IDictionary dictionary, string key, char separator);
    private static string CollectionToString(IEnumerable`1<T> collection, char separator);
}
[PublicAPIAttribute]
public interface Nuke.Common.Tooling.IArguments {
    public abstract virtual string FilterSecrets(string text);
    public abstract virtual string RenderForExecution();
    public abstract virtual string RenderForOutput();
}
[PublicAPIAttribute]
public interface Nuke.Common.Tooling.IProcess {
    public string FileName { get; }
    public string Arguments { get; }
    public string WorkingDirectory { get; }
    public IReadOnlyCollection`1<Output> Output { get; }
    public int ExitCode { get; }
    public bool HasExited { get; }
    public int Id { get; }
    public abstract virtual string get_FileName();
    public abstract virtual string get_Arguments();
    public abstract virtual string get_WorkingDirectory();
    public abstract virtual IReadOnlyCollection`1<Output> get_Output();
    public abstract virtual int get_ExitCode();
    public abstract virtual bool get_HasExited();
    public abstract virtual int get_Id();
    public abstract virtual void Kill();
    public abstract virtual bool WaitForExit();
}
public interface Nuke.Common.Tooling.IRequireAptGetPackage {
}
public interface Nuke.Common.Tooling.IRequireNpmPackage {
}
public interface Nuke.Common.Tooling.IRequireNuGetPackage {
}
public interface Nuke.Common.Tooling.IRequirePathTool {
}
public interface Nuke.Common.Tooling.IRequireTool {
}
public interface Nuke.Common.Tooling.IRequireToolWithVersion {
}
public interface Nuke.Common.Tooling.ISettingsEntity {
}
public class Nuke.Common.Tooling.NpmPackageRequirement : ToolRequirement {
    [CompilerGeneratedAttribute]
private string <PackageId>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Version>k__BackingField;
    public string PackageId { get; public set; }
    public string Version { get; public set; }
    public static NpmPackageRequirement Create(string packageId, string version);
    [CompilerGeneratedAttribute]
public string get_PackageId();
    [CompilerGeneratedAttribute]
public void set_PackageId(string value);
    [CompilerGeneratedAttribute]
public string get_Version();
    [CompilerGeneratedAttribute]
public void set_Version(string value);
}
[BaseTypeRequiredAttribute("Nuke.Common.Tooling.IRequireNpmPackage")]
public class Nuke.Common.Tooling.NpmPackageRequirementAttribute : ToolRequirementAttributeBase {
    private string _packageId;
    public NpmPackageRequirementAttribute(string packageId);
    public virtual ToolRequirement GetRequirement(string version);
}
[PublicAPIAttribute]
public static class Nuke.Common.Tooling.NpmToolPathResolver : object {
    public static AbsolutePath NpmPackageJsonFile;
    public static string GetNpmExecutable(string npmExecutable);
}
[PublicAPIAttribute]
public static class Nuke.Common.Tooling.NpmVersionResolver : object {
    private static HttpClient s_client;
    private static NpmVersionResolver();
    [AsyncStateMachineAttribute("Nuke.Common.Tooling.NpmVersionResolver/<GetLatestVersion>d__1")]
[ItemCanBeNullAttribute]
public static Task`1<string> GetLatestVersion(string packageId);
}
public class Nuke.Common.Tooling.NuGetPackageRequirement : ToolRequirement {
    [CompilerGeneratedAttribute]
private string <PackageId>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Version>k__BackingField;
    public string PackageId { get; public set; }
    public string Version { get; public set; }
    public static NuGetPackageRequirement Create(string packageId, string version);
    [CompilerGeneratedAttribute]
public string get_PackageId();
    [CompilerGeneratedAttribute]
public void set_PackageId(string value);
    [CompilerGeneratedAttribute]
public string get_Version();
    [CompilerGeneratedAttribute]
public void set_Version(string value);
}
[BaseTypeRequiredAttribute("Nuke.Common.Tooling.IRequireNuGetPackage")]
public class Nuke.Common.Tooling.NuGetPackageRequirementAttribute : ToolRequirementAttributeBase {
    private string _packageId;
    public NuGetPackageRequirementAttribute(string packageId);
    public virtual ToolRequirement GetRequirement(string version);
}
[PublicAPIAttribute]
public static class Nuke.Common.Tooling.NuGetPackageResolver : object {
    [CanBeNullAttribute]
public static InstalledPackage GetLocalInstalledPackage(string packageId, AbsolutePath packagesConfigFile, string version, bool resolveDependencies);
    public static IEnumerable`1<InstalledPackage> GetLocalInstalledPackages(AbsolutePath packagesConfigFile, bool resolveDependencies, Func`2<ValueTuple`2<string, string>, bool> preFilter);
    private static IEnumerable`1<ValueTuple`2<string, string>> GetLocalInstalledPackagesFromAssetsFileWithoutLoading(AbsolutePath packagesConfigFile, bool resolveDependencies);
    [ItemNotNullAttribute]
private static IEnumerable`1<InstalledPackage> GetLocalInstalledPackagesFromAssetsFile(AbsolutePath packagesConfigFile, bool resolveDependencies, Func`2<ValueTuple`2<string, string>, bool> preFilter);
    [IteratorStateMachineAttribute("Nuke.Common.Tooling.NuGetPackageResolver/<GetLocalInstalledPackagesFromConfigFile>d__4")]
[ItemNotNullAttribute]
private static IEnumerable`1<InstalledPackage> GetLocalInstalledPackagesFromConfigFile(AbsolutePath packagesConfigFile, bool resolveDependencies);
    private static IEnumerable`1<InstalledPackage> GetDependentPackages(InstalledPackage packageToCheck, AbsolutePath packagesConfigFile);
    [CanBeNullAttribute]
public static InstalledPackage GetGlobalInstalledPackage(string packageId, string version, AbsolutePath packagesConfigFile);
    [CanBeNullAttribute]
public static InstalledPackage GetGlobalInstalledPackage(string packageId, VersionRange versionRange, AbsolutePath packagesConfigFile, Nullable`1<bool> includePrereleases);
    [CanBeNullAttribute]
public static string GetPackagesConfigFile(string projectDirectory);
    [CanBeNullAttribute]
public static AbsolutePath GetPackagesDirectory(AbsolutePath packagesConfigFile);
    public static bool IsLegacyFile(AbsolutePath packagesConfigFile);
    private static bool IncludesDependencies(AbsolutePath packagesConfigFile);
    private static IEnumerable`1<string> GetConfigFiles(AbsolutePath packagesConfigFile);
    [CompilerGeneratedAttribute]
internal static string <GetPackagesDirectory>g__TryGetFromEnvironmentVariable|9_0();
    [CompilerGeneratedAttribute]
internal static string <GetPackagesDirectory>g__TryGetGlobalDirectoryFromConfig|9_1(<>c__DisplayClass9_0& );
    [CompilerGeneratedAttribute]
internal static string <GetPackagesDirectory>g__TryGetDefaultGlobalDirectory|9_2(<>c__DisplayClass9_0& );
    [CompilerGeneratedAttribute]
internal static string <GetPackagesDirectory>g__TryGetLocalDirectory|9_3(<>c__DisplayClass9_0& );
}
[PublicAPIAttribute]
public static class Nuke.Common.Tooling.NuGetToolPathResolver : object {
    public static string EmbeddedPackagesDirectory;
    public static string NuGetPackagesConfigFile;
    public static string NuGetAssetsConfigFile;
    public static string PaketPackagesConfigFile;
    public static string GetPackageExecutable(string packageId, string packageExecutable, string version, string framework);
    private static string GetPackageDirectory(String[] packageIds, string version);
    [CompilerGeneratedAttribute]
internal static string <GetPackageExecutable>g__GetFramework|4_2(string file);
    [CompilerGeneratedAttribute]
internal static string <GetPackageExecutable>g__GetPackageExecutable|4_4(IEnumerable`1<string> executables);
}
[PublicAPIAttribute]
public static class Nuke.Common.Tooling.NuGetVersionResolver : object {
    private static HttpClient s_client;
    private static NuGetVersionResolver();
    [AsyncStateMachineAttribute("Nuke.Common.Tooling.NuGetVersionResolver/<GetLatestVersion>d__1")]
[ItemCanBeNullAttribute]
public static Task`1<string> GetLatestVersion(string packageId, bool includePrereleases, bool includeUnlisted);
}
[PublicAPIAttribute]
public class Nuke.Common.Tooling.Output : ValueType {
    public OutputType Type;
    public string Text;
}
public enum Nuke.Common.Tooling.OutputType : Enum {
    public int value__;
    public static OutputType Std;
    public static OutputType Err;
}
[PublicAPIAttribute]
public static class Nuke.Common.Tooling.PaketPackageResolver : object {
    public static string GetLocalInstalledPackageDirectory(string packageId, string packagesConfigFile);
    private static string GetPackagesDirectory(string packagesConfigFile);
}
public class Nuke.Common.Tooling.PathToolRequirement : ToolRequirement {
    [CompilerGeneratedAttribute]
private string <PathExecutable>k__BackingField;
    public string PathExecutable { get; public set; }
    public static PathToolRequirement Create(string pathExecutable);
    [CompilerGeneratedAttribute]
public string get_PathExecutable();
    [CompilerGeneratedAttribute]
public void set_PathExecutable(string value);
}
[BaseTypeRequiredAttribute("Nuke.Common.Tooling.IRequirePathTool")]
public class Nuke.Common.Tooling.PathToolRequirementAttribute : ToolRequirementAttributeBase {
    private string _pathExecutable;
    public PathToolRequirementAttribute(string pathExecutable);
    public virtual ToolRequirement GetRequirement(string version);
}
public class Nuke.Common.Tooling.Process2 : object {
    private Process _process;
    private Func`2<string, string> _outputFilter;
    private Nullable`1<int> _timeout;
    [CompilerGeneratedAttribute]
private IReadOnlyCollection`1<Output> <Output>k__BackingField;
    public string FileName { get; }
    public string Arguments { get; }
    public string WorkingDirectory { get; }
    public IReadOnlyCollection`1<Output> Output { get; private set; }
    public int ExitCode { get; }
    public bool HasExited { get; }
    public int Id { get; }
    public Process2(Process process, Func`2<string, string> outputFilter, Nullable`1<int> timeout, IReadOnlyCollection`1<Output> output);
    public sealed virtual string get_FileName();
    public sealed virtual string get_Arguments();
    public sealed virtual string get_WorkingDirectory();
    [CompilerGeneratedAttribute]
public sealed virtual IReadOnlyCollection`1<Output> get_Output();
    [CompilerGeneratedAttribute]
private void set_Output(IReadOnlyCollection`1<Output> value);
    public sealed virtual int get_ExitCode();
    public sealed virtual bool get_HasExited();
    public sealed virtual int get_Id();
    public sealed virtual void Dispose();
    public sealed virtual void Kill();
    public sealed virtual bool WaitForExit();
}
public class Nuke.Common.Tooling.ProcessException : Exception {
    [CompilerGeneratedAttribute]
private IProcess <Process>k__BackingField;
    [CompilerGeneratedAttribute]
private int <ExitCode>k__BackingField;
    internal IProcess Process { get; }
    public int ExitCode { get; }
    public ProcessException(IProcess process);
    protected ProcessException(SerializationInfo info, StreamingContext context);
    private static string FormatMessage(IProcess process);
    [CompilerGeneratedAttribute]
internal IProcess get_Process();
    [CompilerGeneratedAttribute]
public int get_ExitCode();
}
[ExtensionAttribute]
[PublicAPIAttribute]
[DebuggerStepThroughAttribute]
[DebuggerNonUserCodeAttribute]
public static class Nuke.Common.Tooling.ProcessExtensions : object {
    [ExtensionAttribute]
[AssertionMethodAttribute]
public static IProcess AssertWaitForExit(IProcess process);
    [ExtensionAttribute]
[AssertionMethodAttribute]
public static IProcess AssertZeroExitCode(IProcess process);
    [ExtensionAttribute]
public static IReadOnlyCollection`1<Output> EnsureOnlyStd(IReadOnlyCollection`1<Output> output);
    [ExtensionAttribute]
public static string StdToText(IEnumerable`1<Output> output);
    [ExtensionAttribute]
public static T StdToJson(IEnumerable`1<Output> output);
    [ExtensionAttribute]
public static JObject StdToJson(IEnumerable`1<Output> output);
}
[PublicAPIAttribute]
public static class Nuke.Common.Tooling.ProcessTasks : object {
    public static bool DefaultLogOutput;
    public static bool DefaultLogInvocation;
    public static bool LogWorkingDirectory;
    public static string DefaultWorkingDirectory;
    private static Char[] s_pathSeparators;
    private static object s_lock;
    private static ProcessTasks();
    public static IProcess StartShell(string command, string workingDirectory, IReadOnlyDictionary`2<string, string> environmentVariables, Nullable`1<int> timeout, Nullable`1<bool> logOutput, Nullable`1<bool> logInvocation, Action`2<OutputType, string> logger, Func`2<string, string> outputFilter);
    public static IProcess StartProcess(ToolSettings toolSettings);
    public static IProcess StartProcess(string toolPath, string arguments, string workingDirectory, IReadOnlyDictionary`2<string, string> environmentVariables, Nullable`1<int> timeout, Nullable`1<bool> logOutput, Nullable`1<bool> logInvocation, Action`2<OutputType, string> logger, Func`2<string, string> outputFilter);
    [CanBeNullAttribute]
private static string GetToolPathOverride(string toolPath);
    [CanBeNullAttribute]
private static IProcess StartProcessInternal(string toolPath, string arguments, string workingDirectory, IReadOnlyDictionary`2<string, string> environmentVariables, Nullable`1<int> timeout, bool logInvocation, Action`2<OutputType, string> logger, Func`2<string, string> outputFilter);
    private static void LogInvocation(ProcessStartInfo startInfo, Func`2<string, string> outputFilter, bool hasEnvironmentVariables);
    private static BlockingCollection`1<Output> GetOutputCollection(Process process, Action`2<OutputType, string> logger, Func`2<string, string> outputFilter);
    public static void DefaultLogger(OutputType type, string output);
    public static void DefaultExitHandler(ToolSettings toolSettings, IProcess process);
    public static void PrintEnvironmentVariables();
    private static void PrintEnvironmentVariables(IDictionary`2<string, string> environmentVariables);
    public static void CheckPathEnvironmentVariable();
    [CompilerGeneratedAttribute]
internal static IEnumerable`1<ValueTuple`2<string, string>> <PrintEnvironmentVariables>g__Split|16_0(KeyValuePair`2<string, string> pair);
}
[ExtensionAttribute]
[PublicAPIAttribute]
public static class Nuke.Common.Tooling.SettingsEntityExtensions : object {
    [ExtensionAttribute]
public static T Apply(T settings, Configure`1<T> configurator);
    [ExtensionAttribute]
public static T[] Apply(T[] settings, Configure`1<T> configurator);
    [ExtensionAttribute]
public static TSettings Apply(TSettings settings, Configure`2<TSettings, TValue> configurator, TValue value);
    [ExtensionAttribute]
public static TSettings[] Apply(TSettings[] settings, Configure`2<TSettings, TValue> configurator, TValue value);
    [ExtensionAttribute]
public static T[] CombineWith(T settings, Configure`1[] configurators);
    [ExtensionAttribute]
public static T[] CombineWith(T settings, CombinatorialConfigure`1[] configurators);
    [ExtensionAttribute]
public static T[] CombineWith(IEnumerable`1<T> settings, Configure`1[] configurators);
    [ExtensionAttribute]
public static T[] CombineWith(IEnumerable`1<T> settings, CombinatorialConfigure`1[] configurators);
    [ExtensionAttribute]
public static T[] CombineWith(T settings, IEnumerable`1<TValue> values, Func`3<T, TValue, T> configurator);
    [ExtensionAttribute]
public static T[] CombineWith(IEnumerable`1<T> settings, IEnumerable`1<TValue> values, Func`3<T, TValue, T> configurator);
    [ExtensionAttribute]
public static T[] CombineWith(T settings, IEnumerable`1<TValue> values, Func`3<T, TValue, IEnumerable`1<T>> configurator);
    [ExtensionAttribute]
public static T[] CombineWith(IEnumerable`1<T> settings, IEnumerable`1<TValue> values, Func`3<T, TValue, IEnumerable`1<T>> configurator);
    [ExtensionAttribute]
public static T NewInstance(T settingsEntity);
    [ExtensionAttribute]
public static T When(T settings, bool condition, Configure`1<T> configurator);
    [ExtensionAttribute]
public static T[] When(T[] settings, Func`2<T, bool> condition, Configure`1<T> configurator);
}
public class Nuke.Common.Tooling.Tool : MulticastDelegate {
    public Tool(object object, IntPtr method);
    public virtual IReadOnlyCollection`1<Output> Invoke(string arguments, string workingDirectory, IReadOnlyDictionary`2<string, string> environmentVariables, Nullable`1<int> timeout, Nullable`1<bool> logOutput, Nullable`1<bool> logInvocation, Action`2<OutputType, string> logger, Action`1<IProcess> exitHandler, Func`2<string, string> outputFilter);
    public virtual IAsyncResult BeginInvoke(string arguments, string workingDirectory, IReadOnlyDictionary`2<string, string> environmentVariables, Nullable`1<int> timeout, Nullable`1<bool> logOutput, Nullable`1<bool> logInvocation, Action`2<OutputType, string> logger, Action`1<IProcess> exitHandler, Func`2<string, string> outputFilter, AsyncCallback callback, object object);
    public virtual IReadOnlyCollection`1<Output> EndInvoke(IAsyncResult result);
}
internal class Nuke.Common.Tooling.ToolExecutor : object {
    private string _toolPath;
    public ToolExecutor(string toolPath);
    public IReadOnlyCollection`1<Output> Execute(string arguments, string workingDirectory, IReadOnlyDictionary`2<string, string> environmentVariables, Nullable`1<int> timeout, Nullable`1<bool> logOutput, Nullable`1<bool> logInvocation, Action`2<OutputType, string> logger, Action`1<IProcess> exitHandler, Func`2<string, string> outputFilter);
}
[ExtensionAttribute]
[PublicAPIAttribute]
public static class Nuke.Common.Tooling.ToolingExtensions : object {
    [ExtensionAttribute]
public static AbsolutePath SetExecutable(AbsolutePath path, bool updateVcsIndex);
    [ExtensionAttribute]
public static AbsolutePath AddUnixSymlink(AbsolutePath path, AbsolutePath linkPath, bool force);
    [ExtensionAttribute]
public static AbsolutePath SetUnixPermissions(AbsolutePath path, string permissions);
    [ExtensionAttribute]
public static AbsolutePath SetUnixPermissions(AbsolutePath path, int permissions);
    [ExtensionAttribute]
public static AbsolutePath Run(AbsolutePath path, string prefix, Action`1<AbsolutePath> cleanup);
    [ExtensionAttribute]
public static void Open(AbsolutePath path);
    [ExtensionAttribute]
public static AbsolutePath Print(AbsolutePath path, LogEventLevel level);
}
[PublicAPIAttribute]
public static class Nuke.Common.Tooling.ToolPathResolver : object {
    [CanBeNullAttribute]
public static string TryGetEnvironmentExecutable(string environmentExecutable);
    public static string GetPathExecutable(string pathExecutable);
}
public class Nuke.Common.Tooling.ToolRequirement : object {
}
public abstract class Nuke.Common.Tooling.ToolRequirementAttributeBase : Attribute {
    public abstract virtual ToolRequirement GetRequirement(string version);
}
[PublicAPIAttribute]
public static class Nuke.Common.Tooling.ToolResolver : object {
    public static Tool GetTool(string toolPath);
    public static Tool GetNuGetTool(string packageId, string packageExecutable, string version, string framework);
    public static Tool GetNpmTool(string npmExecutable);
    [CanBeNullAttribute]
public static Tool TryGetEnvironmentTool(string name);
    public static Tool GetPathTool(string name);
    public static Tool GetEnvironmentOrPathTool(string name);
}
[PublicAPIAttribute]
[ExcludeFromCodeCoverageAttribute]
public abstract class Nuke.Common.Tooling.ToolSettings : object {
    [CompilerGeneratedAttribute]
private static EventHandler Created;
    [CompilerGeneratedAttribute]
private string <ProcessToolPath>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ProcessWorkingDirectory>k__BackingField;
    [CompilerGeneratedAttribute]
private Dictionary`2<string, string> <ProcessEnvironmentVariablesInternal>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<int> <ProcessExecutionTimeout>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<bool> <ProcessLogOutput>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<bool> <ProcessLogInvocation>k__BackingField;
    [CompilerGeneratedAttribute]
private Action`2<OutputType, string> <ProcessLogger>k__BackingField;
    [CompilerGeneratedAttribute]
private Action`2<ToolSettings, IProcess> <ProcessExitHandler>k__BackingField;
    private Func`2<Arguments, Arguments> _processArgumentConfigurator;
    public string ProcessToolPath { get; internal set; }
    public string ProcessWorkingDirectory { get; internal set; }
    public IReadOnlyDictionary`2<string, string> ProcessEnvironmentVariables { get; }
    internal Dictionary`2<string, string> ProcessEnvironmentVariablesInternal { get; internal set; }
    public Nullable`1<int> ProcessExecutionTimeout { get; internal set; }
    public Nullable`1<bool> ProcessLogOutput { get; internal set; }
    public Nullable`1<bool> ProcessLogInvocation { get; internal set; }
    public Action`2<OutputType, string> ProcessLogger { get; internal set; }
    public Action`2<ToolSettings, IProcess> ProcessExitHandler { get; internal set; }
    public Func`2<Arguments, Arguments> ProcessArgumentConfigurator { get; internal set; }
    [CompilerGeneratedAttribute]
internal static void add_Created(EventHandler value);
    [CompilerGeneratedAttribute]
internal static void remove_Created(EventHandler value);
    [CompilerGeneratedAttribute]
public virtual string get_ProcessToolPath();
    [CompilerGeneratedAttribute]
internal virtual void set_ProcessToolPath(string value);
    [CompilerGeneratedAttribute]
public virtual string get_ProcessWorkingDirectory();
    [CompilerGeneratedAttribute]
internal virtual void set_ProcessWorkingDirectory(string value);
    public IReadOnlyDictionary`2<string, string> get_ProcessEnvironmentVariables();
    [CompilerGeneratedAttribute]
internal Dictionary`2<string, string> get_ProcessEnvironmentVariablesInternal();
    [CompilerGeneratedAttribute]
internal void set_ProcessEnvironmentVariablesInternal(Dictionary`2<string, string> value);
    [CompilerGeneratedAttribute]
public Nullable`1<int> get_ProcessExecutionTimeout();
    [CompilerGeneratedAttribute]
internal void set_ProcessExecutionTimeout(Nullable`1<int> value);
    [CompilerGeneratedAttribute]
public Nullable`1<bool> get_ProcessLogOutput();
    [CompilerGeneratedAttribute]
internal void set_ProcessLogOutput(Nullable`1<bool> value);
    [CompilerGeneratedAttribute]
public Nullable`1<bool> get_ProcessLogInvocation();
    [CompilerGeneratedAttribute]
internal void set_ProcessLogInvocation(Nullable`1<bool> value);
    [CompilerGeneratedAttribute]
public virtual Action`2<OutputType, string> get_ProcessLogger();
    [CompilerGeneratedAttribute]
internal virtual void set_ProcessLogger(Action`2<OutputType, string> value);
    [CompilerGeneratedAttribute]
public virtual Action`2<ToolSettings, IProcess> get_ProcessExitHandler();
    [CompilerGeneratedAttribute]
internal virtual void set_ProcessExitHandler(Action`2<ToolSettings, IProcess> value);
    public virtual Func`2<Arguments, Arguments> get_ProcessArgumentConfigurator();
    internal virtual void set_ProcessArgumentConfigurator(Func`2<Arguments, Arguments> value);
    public virtual IArguments GetProcessArguments();
    public bool HasValidToolPath();
    protected virtual Arguments ConfigureProcessArguments(Arguments arguments);
    protected virtual Arguments GetProcessArgumentsInternal();
    protected virtual void AssertValid();
    public sealed virtual string ToString();
}
[ExtensionAttribute]
[PublicAPIAttribute]
[ExcludeFromCodeCoverageAttribute]
public static class Nuke.Common.Tooling.ToolSettingsExtensions : object {
    [ExtensionAttribute]
[PureAttribute]
public static T AddProcessEnvironmentVariable(T toolSettings, string environmentVariableKey, string environmentVariableValue);
    [ExtensionAttribute]
[PureAttribute]
public static T RemoveProcessEnvironmentVariable(T toolSettings, string environmentVariableKey);
    [ExtensionAttribute]
[PureAttribute]
public static T SetProcessEnvironmentVariable(T toolSettings, string environmentVariableKey, string environmentVariableValue);
    [ExtensionAttribute]
[PureAttribute]
public static T ClearProcessEnvironmentVariables(T toolSettings);
    [ExtensionAttribute]
[PureAttribute]
public static T SetProcessExecutionTimeout(T toolSettings, Nullable`1<int> executionTimeout);
    [ExtensionAttribute]
[PureAttribute]
public static T SetProcessExecutionTimeout(T toolSettings, TimeSpan executionTimeout);
    [ExtensionAttribute]
[PureAttribute]
public static T SetProcessLogOutput(T toolSettings, bool enableOutput);
    [ExtensionAttribute]
[PureAttribute]
public static T EnableProcessLogOutput(T toolSettings);
    [ExtensionAttribute]
[PureAttribute]
public static T DisableProcessLogOutput(T toolSettings);
    [ExtensionAttribute]
[PureAttribute]
public static T SetProcessLogInvocation(T toolSettings, bool enableInvocation);
    [ExtensionAttribute]
[PureAttribute]
public static T EnableProcessLogInvocation(T toolSettings);
    [ExtensionAttribute]
[PureAttribute]
public static T DisableProcessLogInvocation(T toolSettings);
    [ExtensionAttribute]
[PureAttribute]
public static T SetProcessToolPath(T toolSettings, string toolPath);
    [ExtensionAttribute]
[PureAttribute]
public static T SetProcessWorkingDirectory(T toolSettings, string workingDirectory);
    [ExtensionAttribute]
[PureAttribute]
public static T SetProcessArgumentConfigurator(T toolSettings, Func`2<Arguments, Arguments> argumentConfigurator);
    [ExtensionAttribute]
[PureAttribute]
public static T SetProcessLogger(T toolSettings, Action`2<OutputType, string> logger);
    [ExtensionAttribute]
[PureAttribute]
public static T SetProcessExitHandler(T toolSettings, Action`1<IProcess> exitHandler);
    [ExtensionAttribute]
[PureAttribute]
public static T SetProcessExitHandler(T toolSettings, Action`2<T, IProcess> exitHandler);
    [ExtensionAttribute]
[PureAttribute]
public static T SetProcessExitHandler(T toolSettings, Func`2<IProcess, object> exitHandler);
    [ExtensionAttribute]
[PureAttribute]
public static T SetProcessExitHandler(T toolSettings, Func`3<T, IProcess, object> exitHandler);
    [ExtensionAttribute]
[PureAttribute]
public static T EnableProcessAssertZeroExitCode(T toolSettings);
    [ExtensionAttribute]
[PureAttribute]
public static T DisableProcessAssertZeroExitCode(T toolSettings);
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
[AttributeUsageAttribute("2")]
internal class System.Runtime.CompilerServices.RefSafetyRulesAttribute : Attribute {
    public int Version;
    public RefSafetyRulesAttribute(int );
}
