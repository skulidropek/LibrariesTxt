public class System.Security.Cryptography.ECDsaOpenSsl : ECDsa {
    public int KeySize { get; public set; }
    public KeySizes[] LegalKeySizes { get; }
    public ECDsaOpenSsl(int keySize);
    public ECDsaOpenSsl(IntPtr handle);
    public ECDsaOpenSsl(ECCurve curve);
    public ECDsaOpenSsl(SafeEvpPKeyHandle pkeyHandle);
    public virtual int get_KeySize();
    public virtual void set_KeySize(int value);
    public virtual KeySizes[] get_LegalKeySizes();
    protected virtual void Dispose(bool disposing);
    public SafeEvpPKeyHandle DuplicateKeyHandle();
    public virtual ECParameters ExportExplicitParameters(bool includePrivateParameters);
    public virtual ECParameters ExportParameters(bool includePrivateParameters);
    public virtual void GenerateKey(ECCurve curve);
    protected virtual Byte[] HashData(Byte[] data, int offset, int count, HashAlgorithmName hashAlgorithm);
    protected virtual Byte[] HashData(Stream data, HashAlgorithmName hashAlgorithm);
    public virtual void ImportParameters(ECParameters parameters);
    public virtual Byte[] SignHash(Byte[] hash);
    public virtual bool VerifyHash(Byte[] hash, Byte[] signature);
}
public class System.Security.Cryptography.RSAOpenSsl : RSA {
    unknown int KeySize {public set; }
    public KeySizes[] LegalKeySizes { get; }
    public RSAOpenSsl(int keySize);
    public RSAOpenSsl(IntPtr handle);
    public RSAOpenSsl(RSAParameters parameters);
    public RSAOpenSsl(SafeEvpPKeyHandle pkeyHandle);
    public virtual void set_KeySize(int value);
    public virtual KeySizes[] get_LegalKeySizes();
    public virtual Byte[] Decrypt(Byte[] data, RSAEncryptionPadding padding);
    protected virtual void Dispose(bool disposing);
    public SafeEvpPKeyHandle DuplicateKeyHandle();
    public virtual Byte[] Encrypt(Byte[] data, RSAEncryptionPadding padding);
    public virtual RSAParameters ExportParameters(bool includePrivateParameters);
    protected virtual Byte[] HashData(Byte[] data, int offset, int count, HashAlgorithmName hashAlgorithm);
    protected virtual Byte[] HashData(Stream data, HashAlgorithmName hashAlgorithm);
    public virtual void ImportParameters(RSAParameters parameters);
    public virtual Byte[] SignHash(Byte[] hash, HashAlgorithmName hashAlgorithm, RSASignaturePadding padding);
    public virtual bool VerifyHash(Byte[] hash, Byte[] signature, HashAlgorithmName hashAlgorithm, RSASignaturePadding padding);
}
public class System.Security.Cryptography.SafeEvpPKeyHandle : SafeHandle {
    public bool IsInvalid { get; }
    public SafeEvpPKeyHandle(IntPtr handle, bool ownsHandle);
    public virtual bool get_IsInvalid();
    public SafeEvpPKeyHandle DuplicateHandle();
    protected virtual bool ReleaseHandle();
}
