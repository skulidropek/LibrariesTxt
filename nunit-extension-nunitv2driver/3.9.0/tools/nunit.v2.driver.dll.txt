[ExtensionAttribute]
public class NUnit.Engine.Drivers.NUnit2FrameworkDriver : object {
    private static string LOAD_RESULT_FORMAT;
    private AppDomain _testDomain;
    private string _testAssemblyPath;
    private string _name;
    private string _fullname;
    private TestRunner _runner;
    private TestPackage _package;
    [CompilerGeneratedAttribute]
private string <ID>k__BackingField;
    public static string NO_FILTER_ELEMENT_MESSAGE;
    public static string NO_REGULAR_EXPRESSIONS_MESSAGE;
    public static string NO_ID_FILTER_MESSAGE;
    public static string NO_NAME_FILTER_MESSAGE;
    public static string NO_CLASS_FILTER_MESSAGE;
    public static string NO_METHOD_FILTER_MESSAGE;
    public static string NO_PROPERTY_FILTER_MESSAGE;
    public static string INVALID_FILTER_MESSAGE;
    private static Char[] COMMA;
    public string ID { get; public set; }
    private TestRunner Runner { get; }
    private string TestID { get; }
    public NUnit2FrameworkDriver(AppDomain testDomain);
    private static NUnit2FrameworkDriver();
    [CompilerGeneratedAttribute]
public sealed virtual string get_ID();
    [CompilerGeneratedAttribute]
public sealed virtual void set_ID(string value);
    private TestRunner get_Runner();
    public sealed virtual string Load(string testAssemblyPath, IDictionary`2<string, object> settings);
    public sealed virtual int CountTestCases(string filter);
    public sealed virtual string Run(ITestEventListener listener, string filter);
    public sealed virtual string Explore(string filter);
    public sealed virtual void StopRun(bool force);
    private static string Escape(string original);
    private string get_TestID();
    public static ITestFilter CreateNUnit2TestFilter(string filterXml);
    private static TestFilter FromXml(XmlNode xmlNode);
    private static bool ShouldTransformOrFilter(XmlNode xmlNode);
    private static OrFilter CreateOrFilter(XmlNodeList childNodes);
    private static AndFilter CreateAndFilter(XmlNodeList childNodes);
    private static NotFilter CreateNegatedAndFilter(XmlNodeList childNodes);
}
public class NUnit.Engine.Drivers.TestEventAdapter : MarshalByRefObject {
    private ITestEventListener _listener;
    private StringBuilder _testOutput;
    public TestEventAdapter(ITestEventListener listener);
    private sealed virtual override void NUnit.Core.EventListener.RunFinished(Exception exception);
    private sealed virtual override void NUnit.Core.EventListener.RunFinished(TestResult result);
    private sealed virtual override void NUnit.Core.EventListener.RunStarted(string name, int testCount);
    private sealed virtual override void NUnit.Core.EventListener.SuiteFinished(TestResult result);
    private sealed virtual override void NUnit.Core.EventListener.SuiteStarted(TestName testName);
    private sealed virtual override void NUnit.Core.EventListener.TestFinished(TestResult result);
    private sealed virtual override void NUnit.Core.EventListener.TestOutput(TestOutput testOutput);
    private sealed virtual override void NUnit.Core.EventListener.TestStarted(TestName testName);
    private sealed virtual override void NUnit.Core.EventListener.UnhandledException(Exception exception);
    public virtual object InitializeLifetimeService();
    private static string FormatAttributeValue(string original);
    private void OnTestStarted(TestName testName, bool isSuite);
    private void OnTestFinished(TestResult result);
}
[ExtensionAttribute]
public static class NUnit.Engine.Drivers.XmlExtensions : object {
    [ExtensionAttribute]
public static XmlNode ToXml(ITest test, bool recursive);
    [ExtensionAttribute]
public static XmlNode ToXml(ITest test, ITestFilter filter);
    [ExtensionAttribute]
public static XmlNode ToXml(TestResult result, bool recursive);
    [ExtensionAttribute]
private static XmlNode AddTest(XmlNode parent, ITest test, bool recursive);
    [ExtensionAttribute]
private static XmlNode AddTest(XmlNode parent, ITest test, ITestFilter filter);
    [ExtensionAttribute]
private static void AddResult(XmlNode parent, TestResult result, bool recursive);
    [ExtensionAttribute]
private static void AddProperties(XmlNode parent, ITest test);
    [ExtensionAttribute]
private static void AddProperty(XmlNode parent, string key, object val);
    [ExtensionAttribute]
private static void AddFailureElement(XmlNode parent, TestResult result);
    [ExtensionAttribute]
private static void AddReasonElement(XmlNode parent, TestResult result);
    [ExtensionAttribute]
private static void AddAttribute(XmlNode node, string name, string value);
    [ExtensionAttribute]
public static XmlNode AddElement(XmlNode node, string name);
    [ExtensionAttribute]
private static XmlNode AddElementWithCDataSection(XmlNode node, string name, string data);
    private static List`1<string> EscapeCDataString(string data);
    private static Dictionary`2<ResultState, int> CountResultStates(TestResult result, Dictionary`2<ResultState, int> dict);
    private static int CountStatesInResultDict(Dictionary`2<ResultState, int> dict, ResultState[] states);
    private static string GetTranslatedResultState(ResultState resultState);
}
[AttributeUsageAttribute("69")]
internal class System.Runtime.CompilerServices.ExtensionAttribute : Attribute {
}
