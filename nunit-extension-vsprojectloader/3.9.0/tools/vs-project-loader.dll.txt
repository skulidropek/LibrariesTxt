[ExtensionAttribute]
public static class NUnit.Engine.Services.ProjectLoaders.LegacyCppHelper : object {
    [ExtensionAttribute]
public static void LoadLegacyCppProject(VSProject project, XmlDocument doc);
}
[ExtensionAttribute]
public static class NUnit.Engine.Services.ProjectLoaders.LegacyProjectHelper : object {
    [ExtensionAttribute]
public static void LoadLegacyProject(VSProject project, XmlDocument doc);
}
[ExtensionAttribute]
public static class NUnit.Engine.Services.ProjectLoaders.NonSdkProjectHelper : object {
    [ExtensionAttribute]
public static void LoadNonSdkProject(VSProject project, XmlDocument doc);
}
[ExtensionAttribute]
public static class NUnit.Engine.Services.ProjectLoaders.SdkProjectHelper : object {
    private static Regex netFramework;
    private static SdkProjectHelper();
    [ExtensionAttribute]
public static void LoadSdkProject(VSProject project, XmlDocument doc);
}
[ExtensionAttribute]
[ExtensionPropertyAttribute("FileExtension", ".sln")]
[ExtensionPropertyAttribute("FileExtension", ".csproj")]
[ExtensionPropertyAttribute("FileExtension", ".vbproj")]
[ExtensionPropertyAttribute("FileExtension", ".vjsproj")]
[ExtensionPropertyAttribute("FileExtension", ".vcproj")]
[ExtensionPropertyAttribute("FileExtension", ".fsproj")]
public class NUnit.Engine.Services.ProjectLoaders.VisualStudioProjectLoader : object {
    private static string SOLUTION_EXTENSION;
    private static String[] PROJECT_EXTENSIONS;
    private IDictionary`2<string, VSProject> _projectLookup;
    private IDictionary`2<string, List`1<string>> _configs;
    private static string BUILD_MARKER;
    private static VisualStudioProjectLoader();
    public sealed virtual bool CanLoadFrom(string path);
    public sealed virtual IProject LoadFrom(string path);
    private static bool IsProjectFile(string path);
    private static bool IsSolutionFile(string path);
    private static bool IsValidFilePath(string path);
    private VSProject LoadVSProject(string path);
    private XmlDocument CreateProjectDocument(string projectPath);
    private ProjectFormat GetProjectFormat(XmlDocument doc);
    private bool FormatIsSupportedForExtension(ProjectFormat projFormat, string ext);
    private VSSolution LoadVSSolution(string path);
    private void ProcessProjectLine(string solutionDirectory, string line);
    private void ProcessBuildLine(string line);
}
public class NUnit.Engine.Services.ProjectLoaders.VSProject : object {
    private IDictionary`2<string, ProjectConfig> ProjectConfigs;
    [CompilerGeneratedAttribute]
private string <ProjectPath>k__BackingField;
    public string ProjectPath { get; private set; }
    public string ActiveConfigName { get; }
    public IList`1<string> ConfigNames { get; }
    public string Name { get; }
    public string ProjectDir { get; }
    public VSProject(string projectPath);
    [CompilerGeneratedAttribute]
public sealed virtual string get_ProjectPath();
    [CompilerGeneratedAttribute]
private void set_ProjectPath(string value);
    public sealed virtual string get_ActiveConfigName();
    public sealed virtual IList`1<string> get_ConfigNames();
    public sealed virtual TestPackage GetTestPackage();
    public sealed virtual TestPackage GetTestPackage(string configName);
    public string get_Name();
    public string get_ProjectDir();
    public bool HasConfig(string configName);
    public void AddConfig(string configName, string assemblyPath);
}
public class NUnit.Engine.Services.ProjectLoaders.VSSolution : object {
    private IDictionary`2<string, SolutionConfig> _configs;
    [CompilerGeneratedAttribute]
private string <ProjectPath>k__BackingField;
    public string ProjectPath { get; private set; }
    public string ActiveConfigName { get; }
    public IList`1<string> ConfigNames { get; }
    public VSSolution(string projectPath);
    [CompilerGeneratedAttribute]
public sealed virtual string get_ProjectPath();
    [CompilerGeneratedAttribute]
private void set_ProjectPath(string value);
    public sealed virtual string get_ActiveConfigName();
    public sealed virtual IList`1<string> get_ConfigNames();
    public sealed virtual TestPackage GetTestPackage();
    public sealed virtual TestPackage GetTestPackage(string configName);
    public void AddConfig(string name, String[] assemblies);
}
[ExtensionAttribute]
public static class NUnit.Engine.Services.ProjectLoaders.XmlExtensions : object {
    [ExtensionAttribute]
public static string RequiredAttributeValue(XmlNode node, string name);
    [ExtensionAttribute]
public static string GetConfigNameFromCondition(XmlElement configNode);
}
public class System.Runtime.CompilerServices.ExtensionAttribute : Attribute {
}
