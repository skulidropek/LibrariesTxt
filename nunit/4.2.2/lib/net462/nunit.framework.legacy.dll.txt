[CompilerGeneratedAttribute]
[EmbeddedAttribute]
internal class Microsoft.CodeAnalysis.EmbeddedAttribute : Attribute {
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public abstract class NUnit.Framework.Legacy.ClassicAssert : Assert {
    public static void Greater(int arg1, int arg2, string message, Object[] args);
    public static void Greater(int arg1, int arg2);
    [CLSCompliantAttribute("False")]
public static void Greater(UInt32 arg1, UInt32 arg2, string message, Object[] args);
    [CLSCompliantAttribute("False")]
public static void Greater(UInt32 arg1, UInt32 arg2);
    public static void Greater(long arg1, long arg2, string message, Object[] args);
    public static void Greater(long arg1, long arg2);
    [CLSCompliantAttribute("False")]
public static void Greater(ulong arg1, ulong arg2, string message, Object[] args);
    [CLSCompliantAttribute("False")]
public static void Greater(ulong arg1, ulong arg2);
    public static void Greater(decimal arg1, decimal arg2, string message, Object[] args);
    public static void Greater(decimal arg1, decimal arg2);
    public static void Greater(double arg1, double arg2, string message, Object[] args);
    public static void Greater(double arg1, double arg2);
    public static void Greater(float arg1, float arg2, string message, Object[] args);
    public static void Greater(float arg1, float arg2);
    public static void Greater(IComparable arg1, IComparable arg2, string message, Object[] args);
    public static void Greater(IComparable arg1, IComparable arg2);
    public static void Less(int arg1, int arg2, string message, Object[] args);
    public static void Less(int arg1, int arg2);
    [CLSCompliantAttribute("False")]
public static void Less(UInt32 arg1, UInt32 arg2, string message, Object[] args);
    [CLSCompliantAttribute("False")]
public static void Less(UInt32 arg1, UInt32 arg2);
    public static void Less(long arg1, long arg2, string message, Object[] args);
    public static void Less(long arg1, long arg2);
    [CLSCompliantAttribute("False")]
public static void Less(ulong arg1, ulong arg2, string message, Object[] args);
    [CLSCompliantAttribute("False")]
public static void Less(ulong arg1, ulong arg2);
    public static void Less(decimal arg1, decimal arg2, string message, Object[] args);
    public static void Less(decimal arg1, decimal arg2);
    public static void Less(double arg1, double arg2, string message, Object[] args);
    public static void Less(double arg1, double arg2);
    public static void Less(float arg1, float arg2, string message, Object[] args);
    public static void Less(float arg1, float arg2);
    public static void Less(IComparable arg1, IComparable arg2, string message, Object[] args);
    public static void Less(IComparable arg1, IComparable arg2);
    public static void GreaterOrEqual(int arg1, int arg2, string message, Object[] args);
    public static void GreaterOrEqual(int arg1, int arg2);
    [CLSCompliantAttribute("False")]
public static void GreaterOrEqual(UInt32 arg1, UInt32 arg2, string message, Object[] args);
    [CLSCompliantAttribute("False")]
public static void GreaterOrEqual(UInt32 arg1, UInt32 arg2);
    public static void GreaterOrEqual(long arg1, long arg2, string message, Object[] args);
    public static void GreaterOrEqual(long arg1, long arg2);
    [CLSCompliantAttribute("False")]
public static void GreaterOrEqual(ulong arg1, ulong arg2, string message, Object[] args);
    [CLSCompliantAttribute("False")]
public static void GreaterOrEqual(ulong arg1, ulong arg2);
    public static void GreaterOrEqual(decimal arg1, decimal arg2, string message, Object[] args);
    public static void GreaterOrEqual(decimal arg1, decimal arg2);
    public static void GreaterOrEqual(double arg1, double arg2, string message, Object[] args);
    public static void GreaterOrEqual(double arg1, double arg2);
    public static void GreaterOrEqual(float arg1, float arg2, string message, Object[] args);
    public static void GreaterOrEqual(float arg1, float arg2);
    public static void GreaterOrEqual(IComparable arg1, IComparable arg2, string message, Object[] args);
    public static void GreaterOrEqual(IComparable arg1, IComparable arg2);
    public static void LessOrEqual(int arg1, int arg2, string message, Object[] args);
    public static void LessOrEqual(int arg1, int arg2);
    [CLSCompliantAttribute("False")]
public static void LessOrEqual(UInt32 arg1, UInt32 arg2, string message, Object[] args);
    [CLSCompliantAttribute("False")]
public static void LessOrEqual(UInt32 arg1, UInt32 arg2);
    public static void LessOrEqual(long arg1, long arg2, string message, Object[] args);
    public static void LessOrEqual(long arg1, long arg2);
    [CLSCompliantAttribute("False")]
public static void LessOrEqual(ulong arg1, ulong arg2, string message, Object[] args);
    [CLSCompliantAttribute("False")]
public static void LessOrEqual(ulong arg1, ulong arg2);
    public static void LessOrEqual(decimal arg1, decimal arg2, string message, Object[] args);
    public static void LessOrEqual(decimal arg1, decimal arg2);
    public static void LessOrEqual(double arg1, double arg2, string message, Object[] args);
    public static void LessOrEqual(double arg1, double arg2);
    public static void LessOrEqual(float arg1, float arg2, string message, Object[] args);
    public static void LessOrEqual(float arg1, float arg2);
    public static void LessOrEqual(IComparable arg1, IComparable arg2, string message, Object[] args);
    public static void LessOrEqual(IComparable arg1, IComparable arg2);
    public static void True(Nullable`1<bool> condition, string message, Object[] args);
    public static void True(bool condition, string message, Object[] args);
    public static void True(Nullable`1<bool> condition);
    public static void True(bool condition);
    public static void IsTrue(Nullable`1<bool> condition, string message, Object[] args);
    public static void IsTrue(bool condition, string message, Object[] args);
    public static void IsTrue(Nullable`1<bool> condition);
    public static void IsTrue(bool condition);
    public static void False(Nullable`1<bool> condition, string message, Object[] args);
    public static void False(bool condition, string message, Object[] args);
    public static void False(Nullable`1<bool> condition);
    public static void False(bool condition);
    public static void IsFalse(Nullable`1<bool> condition, string message, Object[] args);
    public static void IsFalse(bool condition, string message, Object[] args);
    public static void IsFalse(Nullable`1<bool> condition);
    public static void IsFalse(bool condition);
    [NullableContextAttribute("2")]
public static void NotNull(object anObject, string message, Object[] args);
    [NullableContextAttribute("2")]
public static void NotNull(object anObject);
    [NullableContextAttribute("2")]
public static void IsNotNull(object anObject, string message, Object[] args);
    [NullableContextAttribute("2")]
public static void IsNotNull(object anObject);
    [NullableContextAttribute("2")]
public static void Null(object anObject, string message, Object[] args);
    [NullableContextAttribute("2")]
public static void Null(object anObject);
    [NullableContextAttribute("2")]
public static void IsNull(object anObject, string message, Object[] args);
    [NullableContextAttribute("2")]
public static void IsNull(object anObject);
    public static void IsNaN(double aDouble, string message, Object[] args);
    public static void IsNaN(double aDouble);
    public static void IsNaN(Nullable`1<double> aDouble, string message, Object[] args);
    public static void IsNaN(Nullable`1<double> aDouble);
    [NullableContextAttribute("2")]
public static void IsEmpty(string aString, string message, Object[] args);
    [NullableContextAttribute("2")]
public static void IsEmpty(string aString);
    public static void IsEmpty(IEnumerable collection, string message, Object[] args);
    public static void IsEmpty(IEnumerable collection);
    [NullableContextAttribute("2")]
public static void IsNotEmpty(string aString, string message, Object[] args);
    [NullableContextAttribute("2")]
public static void IsNotEmpty(string aString);
    public static void IsNotEmpty(IEnumerable collection, string message, Object[] args);
    public static void IsNotEmpty(IEnumerable collection);
    public static void Zero(int actual);
    public static void Zero(int actual, string message, Object[] args);
    [CLSCompliantAttribute("False")]
public static void Zero(UInt32 actual);
    [CLSCompliantAttribute("False")]
public static void Zero(UInt32 actual, string message, Object[] args);
    public static void Zero(long actual);
    public static void Zero(long actual, string message, Object[] args);
    [CLSCompliantAttribute("False")]
public static void Zero(ulong actual);
    [CLSCompliantAttribute("False")]
public static void Zero(ulong actual, string message, Object[] args);
    public static void Zero(decimal actual);
    public static void Zero(decimal actual, string message, Object[] args);
    public static void Zero(double actual);
    public static void Zero(double actual, string message, Object[] args);
    public static void Zero(float actual);
    public static void Zero(float actual, string message, Object[] args);
    public static void NotZero(int actual);
    public static void NotZero(int actual, string message, Object[] args);
    [CLSCompliantAttribute("False")]
public static void NotZero(UInt32 actual);
    [CLSCompliantAttribute("False")]
public static void NotZero(UInt32 actual, string message, Object[] args);
    public static void NotZero(long actual);
    public static void NotZero(long actual, string message, Object[] args);
    [CLSCompliantAttribute("False")]
public static void NotZero(ulong actual);
    [CLSCompliantAttribute("False")]
public static void NotZero(ulong actual, string message, Object[] args);
    public static void NotZero(decimal actual);
    public static void NotZero(decimal actual, string message, Object[] args);
    public static void NotZero(double actual);
    public static void NotZero(double actual, string message, Object[] args);
    public static void NotZero(float actual);
    public static void NotZero(float actual, string message, Object[] args);
    public static void Positive(int actual);
    public static void Positive(int actual, string message, Object[] args);
    [CLSCompliantAttribute("False")]
public static void Positive(UInt32 actual);
    [CLSCompliantAttribute("False")]
public static void Positive(UInt32 actual, string message, Object[] args);
    public static void Positive(long actual);
    public static void Positive(long actual, string message, Object[] args);
    [CLSCompliantAttribute("False")]
public static void Positive(ulong actual);
    [CLSCompliantAttribute("False")]
public static void Positive(ulong actual, string message, Object[] args);
    public static void Positive(decimal actual);
    public static void Positive(decimal actual, string message, Object[] args);
    public static void Positive(double actual);
    public static void Positive(double actual, string message, Object[] args);
    public static void Positive(float actual);
    public static void Positive(float actual, string message, Object[] args);
    public static void Negative(int actual);
    public static void Negative(int actual, string message, Object[] args);
    [CLSCompliantAttribute("False")]
public static void Negative(UInt32 actual);
    [CLSCompliantAttribute("False")]
public static void Negative(UInt32 actual, string message, Object[] args);
    public static void Negative(long actual);
    public static void Negative(long actual, string message, Object[] args);
    [CLSCompliantAttribute("False")]
public static void Negative(ulong actual);
    [CLSCompliantAttribute("False")]
public static void Negative(ulong actual, string message, Object[] args);
    public static void Negative(decimal actual);
    public static void Negative(decimal actual, string message, Object[] args);
    public static void Negative(double actual);
    public static void Negative(double actual, string message, Object[] args);
    public static void Negative(float actual);
    public static void Negative(float actual, string message, Object[] args);
    [NullableContextAttribute("2")]
public static void Contains(object expected, ICollection actual, string message, Object[] args);
    [NullableContextAttribute("2")]
public static void Contains(object expected, ICollection actual);
    [EditorBrowsableAttribute("1")]
public static bool Equals(object a, object b);
    [EditorBrowsableAttribute("1")]
public static void ReferenceEquals(object a, object b);
    public static void AreEqual(double expected, double actual, double delta, string message, Object[] args);
    public static void AreEqual(double expected, double actual, double delta);
    [NullableContextAttribute("2")]
public static void AreEqual(object expected, object actual, string message, Object[] args);
    [NullableContextAttribute("2")]
public static void AreEqual(object expected, object actual);
    [NullableContextAttribute("2")]
public static void AreNotEqual(object expected, object actual, string message, Object[] args);
    [NullableContextAttribute("2")]
public static void AreNotEqual(object expected, object actual);
    [NullableContextAttribute("2")]
public static void AreSame(object expected, object actual, string message, Object[] args);
    [NullableContextAttribute("2")]
public static void AreSame(object expected, object actual);
    [NullableContextAttribute("2")]
public static void AreNotSame(object expected, object actual, string message, Object[] args);
    [NullableContextAttribute("2")]
public static void AreNotSame(object expected, object actual);
    protected static void AssertDoublesAreEqual(double expected, double actual, double delta, string message, Object[] args);
    public static void IsAssignableFrom(Type expected, object actual, string message, Object[] args);
    public static void IsAssignableFrom(Type expected, object actual);
    [NullableContextAttribute("2")]
public static void IsAssignableFrom(object actual, string message, Object[] args);
    [NullableContextAttribute("2")]
public static void IsAssignableFrom(object actual);
    public static void IsNotAssignableFrom(Type expected, object actual, string message, Object[] args);
    public static void IsNotAssignableFrom(Type expected, object actual);
    [NullableContextAttribute("2")]
public static void IsNotAssignableFrom(object actual, string message, Object[] args);
    [NullableContextAttribute("2")]
public static void IsNotAssignableFrom(object actual);
    public static void IsInstanceOf(Type expected, object actual, string message, Object[] args);
    public static void IsInstanceOf(Type expected, object actual);
    [NullableContextAttribute("2")]
public static void IsInstanceOf(object actual, string message, Object[] args);
    [NullableContextAttribute("2")]
public static void IsInstanceOf(object actual);
    public static void IsNotInstanceOf(Type expected, object actual, string message, Object[] args);
    public static void IsNotInstanceOf(Type expected, object actual);
    [NullableContextAttribute("2")]
public static void IsNotInstanceOf(object actual, string message, Object[] args);
    [NullableContextAttribute("2")]
public static void IsNotInstanceOf(object actual);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public abstract class NUnit.Framework.Legacy.CollectionAssert : AssertBase {
    [EditorBrowsableAttribute("1")]
public static bool Equals(object a, object b);
    public static void ReferenceEquals(object a, object b);
    public static void AllItemsAreInstancesOfType(IEnumerable collection, Type expectedType);
    public static void AllItemsAreInstancesOfType(IEnumerable collection, Type expectedType, string message, Object[] args);
    public static void AllItemsAreNotNull(IEnumerable collection);
    public static void AllItemsAreNotNull(IEnumerable collection, string message, Object[] args);
    public static void AllItemsAreUnique(IEnumerable collection);
    public static void AllItemsAreUnique(IEnumerable collection, string message, Object[] args);
    public static void AreEqual(IEnumerable expected, IEnumerable actual);
    public static void AreEqual(IEnumerable expected, IEnumerable actual, IComparer comparer);
    public static void AreEqual(IEnumerable expected, IEnumerable actual, string message, Object[] args);
    public static void AreEqual(IEnumerable expected, IEnumerable actual, IComparer comparer, string message, Object[] args);
    public static void AreEquivalent(IEnumerable expected, IEnumerable actual);
    public static void AreEquivalent(IEnumerable expected, IEnumerable actual, string message, Object[] args);
    public static void AreNotEqual(IEnumerable expected, IEnumerable actual);
    public static void AreNotEqual(IEnumerable expected, IEnumerable actual, IComparer comparer);
    public static void AreNotEqual(IEnumerable expected, IEnumerable actual, string message, Object[] args);
    public static void AreNotEqual(IEnumerable expected, IEnumerable actual, IComparer comparer, string message, Object[] args);
    public static void AreNotEquivalent(IEnumerable expected, IEnumerable actual);
    public static void AreNotEquivalent(IEnumerable expected, IEnumerable actual, string message, Object[] args);
    public static void Contains(IEnumerable collection, object actual);
    public static void Contains(IEnumerable collection, object actual, string message, Object[] args);
    public static void DoesNotContain(IEnumerable collection, object actual);
    public static void DoesNotContain(IEnumerable collection, object actual, string message, Object[] args);
    public static void IsNotSubsetOf(IEnumerable subset, IEnumerable superset);
    public static void IsNotSubsetOf(IEnumerable subset, IEnumerable superset, string message, Object[] args);
    public static void IsSubsetOf(IEnumerable subset, IEnumerable superset);
    public static void IsSubsetOf(IEnumerable subset, IEnumerable superset, string message, Object[] args);
    public static void IsNotSupersetOf(IEnumerable superset, IEnumerable subset);
    public static void IsNotSupersetOf(IEnumerable superset, IEnumerable subset, string message, Object[] args);
    public static void IsSupersetOf(IEnumerable superset, IEnumerable subset);
    public static void IsSupersetOf(IEnumerable superset, IEnumerable subset, string message, Object[] args);
    public static void IsEmpty(IEnumerable collection, string message, Object[] args);
    public static void IsEmpty(IEnumerable collection);
    public static void IsNotEmpty(IEnumerable collection, string message, Object[] args);
    public static void IsNotEmpty(IEnumerable collection);
    public static void IsOrdered(IEnumerable collection, string message, Object[] args);
    public static void IsOrdered(IEnumerable collection);
    public static void IsOrdered(IEnumerable collection, IComparer comparer, string message, Object[] args);
    public static void IsOrdered(IEnumerable collection, IComparer comparer);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public abstract class NUnit.Framework.Legacy.DirectoryAssert : AssertBase {
    [EditorBrowsableAttribute("1")]
public static bool Equals(object a, object b);
    [EditorBrowsableAttribute("1")]
public static void ReferenceEquals(object a, object b);
    public static void AreEqual(DirectoryInfo expected, DirectoryInfo actual, string message, Object[] args);
    public static void AreEqual(DirectoryInfo expected, DirectoryInfo actual);
    [NullableContextAttribute("2")]
public static void AreNotEqual(DirectoryInfo expected, DirectoryInfo actual, string message, Object[] args);
    [NullableContextAttribute("2")]
public static void AreNotEqual(DirectoryInfo expected, DirectoryInfo actual);
    public static void Exists(DirectoryInfo actual, string message, Object[] args);
    public static void Exists(DirectoryInfo actual);
    public static void Exists(string actual, string message, Object[] args);
    public static void Exists(string actual);
    public static void DoesNotExist(DirectoryInfo actual, string message, Object[] args);
    public static void DoesNotExist(DirectoryInfo actual);
    public static void DoesNotExist(string actual, string message, Object[] args);
    public static void DoesNotExist(string actual);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public abstract class NUnit.Framework.Legacy.FileAssert : AssertBase {
    [EditorBrowsableAttribute("1")]
public static bool Equals(object a, object b);
    [EditorBrowsableAttribute("1")]
public static void ReferenceEquals(object a, object b);
    [NullableContextAttribute("2")]
public static void AreEqual(Stream expected, Stream actual, string message, Object[] args);
    [NullableContextAttribute("2")]
public static void AreEqual(Stream expected, Stream actual);
    public static void AreEqual(FileInfo expected, FileInfo actual, string message, Object[] args);
    public static void AreEqual(FileInfo expected, FileInfo actual);
    public static void AreEqual(string expected, string actual, string message, Object[] args);
    public static void AreEqual(string expected, string actual);
    [NullableContextAttribute("2")]
public static void AreNotEqual(Stream expected, Stream actual, string message, Object[] args);
    [NullableContextAttribute("2")]
public static void AreNotEqual(Stream expected, Stream actual);
    public static void AreNotEqual(FileInfo expected, FileInfo actual, string message, Object[] args);
    public static void AreNotEqual(FileInfo expected, FileInfo actual);
    public static void AreNotEqual(string expected, string actual, string message, Object[] args);
    public static void AreNotEqual(string expected, string actual);
    public static void Exists(FileInfo actual, string message, Object[] args);
    public static void Exists(FileInfo actual);
    public static void Exists(string actual, string message, Object[] args);
    public static void Exists(string actual);
    public static void DoesNotExist(FileInfo actual, string message, Object[] args);
    public static void DoesNotExist(FileInfo actual);
    public static void DoesNotExist(string actual, string message, Object[] args);
    public static void DoesNotExist(string actual);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public abstract class NUnit.Framework.Legacy.StringAssert : AssertBase {
    [NullableContextAttribute("2")]
[EditorBrowsableAttribute("1")]
public static bool Equals(object a, object b);
    [NullableContextAttribute("2")]
[EditorBrowsableAttribute("1")]
public static void ReferenceEquals(object a, object b);
    public static void Contains(string expected, string actual, string message, Object[] args);
    public static void Contains(string expected, string actual);
    public static void DoesNotContain(string expected, string actual, string message, Object[] args);
    public static void DoesNotContain(string expected, string actual);
    public static void StartsWith(string expected, string actual, string message, Object[] args);
    public static void StartsWith(string expected, string actual);
    public static void DoesNotStartWith(string expected, string actual, string message, Object[] args);
    public static void DoesNotStartWith(string expected, string actual);
    public static void EndsWith(string expected, string actual, string message, Object[] args);
    public static void EndsWith(string expected, string actual);
    public static void DoesNotEndWith(string expected, string actual, string message, Object[] args);
    public static void DoesNotEndWith(string expected, string actual);
    public static void AreEqualIgnoringCase(string expected, string actual, string message, Object[] args);
    public static void AreEqualIgnoringCase(string expected, string actual);
    public static void AreNotEqualIgnoringCase(string expected, string actual, string message, Object[] args);
    public static void AreNotEqualIgnoringCase(string expected, string actual);
    public static void IsMatch(string pattern, string actual, string message, Object[] args);
    public static void IsMatch(string pattern, string actual);
    public static void DoesNotMatch(string pattern, string actual, string message, Object[] args);
    public static void DoesNotMatch(string pattern, string actual);
}
[AttributeUsageAttribute("2432")]
[ExcludeFromCodeCoverageAttribute]
[DebuggerNonUserCodeAttribute]
internal class System.Diagnostics.CodeAnalysis.AllowNullAttribute : Attribute {
}
[AttributeUsageAttribute("2432")]
[ExcludeFromCodeCoverageAttribute]
[DebuggerNonUserCodeAttribute]
internal class System.Diagnostics.CodeAnalysis.DisallowNullAttribute : Attribute {
}
[AttributeUsageAttribute("64")]
[ExcludeFromCodeCoverageAttribute]
[DebuggerNonUserCodeAttribute]
internal class System.Diagnostics.CodeAnalysis.DoesNotReturnAttribute : Attribute {
}
[AttributeUsageAttribute("2048")]
[ExcludeFromCodeCoverageAttribute]
[DebuggerNonUserCodeAttribute]
internal class System.Diagnostics.CodeAnalysis.DoesNotReturnIfAttribute : Attribute {
    [CompilerGeneratedAttribute]
private bool <ParameterValue>k__BackingField;
    public bool ParameterValue { get; }
    public DoesNotReturnIfAttribute(bool parameterValue);
    [CompilerGeneratedAttribute]
public bool get_ParameterValue();
}
[AttributeUsageAttribute("10624")]
[ExcludeFromCodeCoverageAttribute]
[DebuggerNonUserCodeAttribute]
internal class System.Diagnostics.CodeAnalysis.MaybeNullAttribute : Attribute {
}
[AttributeUsageAttribute("2048")]
[ExcludeFromCodeCoverageAttribute]
[DebuggerNonUserCodeAttribute]
internal class System.Diagnostics.CodeAnalysis.MaybeNullWhenAttribute : Attribute {
    [CompilerGeneratedAttribute]
private bool <ReturnValue>k__BackingField;
    public bool ReturnValue { get; }
    public MaybeNullWhenAttribute(bool returnValue);
    [CompilerGeneratedAttribute]
public bool get_ReturnValue();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[AttributeUsageAttribute("192")]
[ExcludeFromCodeCoverageAttribute]
[DebuggerNonUserCodeAttribute]
internal class System.Diagnostics.CodeAnalysis.MemberNotNullAttribute : Attribute {
    [CompilerGeneratedAttribute]
private String[] <Members>k__BackingField;
    public String[] Members { get; }
    public MemberNotNullAttribute(string member);
    public MemberNotNullAttribute(String[] members);
    [CompilerGeneratedAttribute]
public String[] get_Members();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[AttributeUsageAttribute("192")]
[ExcludeFromCodeCoverageAttribute]
[DebuggerNonUserCodeAttribute]
internal class System.Diagnostics.CodeAnalysis.MemberNotNullWhenAttribute : Attribute {
    [CompilerGeneratedAttribute]
private bool <ReturnValue>k__BackingField;
    [CompilerGeneratedAttribute]
private String[] <Members>k__BackingField;
    public bool ReturnValue { get; }
    public String[] Members { get; }
    public MemberNotNullWhenAttribute(bool returnValue, string member);
    public MemberNotNullWhenAttribute(bool returnValue, String[] members);
    [CompilerGeneratedAttribute]
public bool get_ReturnValue();
    [CompilerGeneratedAttribute]
public String[] get_Members();
}
[AttributeUsageAttribute("10624")]
[ExcludeFromCodeCoverageAttribute]
[DebuggerNonUserCodeAttribute]
internal class System.Diagnostics.CodeAnalysis.NotNullAttribute : Attribute {
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[AttributeUsageAttribute("10368")]
[ExcludeFromCodeCoverageAttribute]
[DebuggerNonUserCodeAttribute]
internal class System.Diagnostics.CodeAnalysis.NotNullIfNotNullAttribute : Attribute {
    [CompilerGeneratedAttribute]
private string <ParameterName>k__BackingField;
    public string ParameterName { get; }
    public NotNullIfNotNullAttribute(string parameterName);
    [CompilerGeneratedAttribute]
public string get_ParameterName();
}
[AttributeUsageAttribute("2048")]
[ExcludeFromCodeCoverageAttribute]
[DebuggerNonUserCodeAttribute]
internal class System.Diagnostics.CodeAnalysis.NotNullWhenAttribute : Attribute {
    [CompilerGeneratedAttribute]
private bool <ReturnValue>k__BackingField;
    public bool ReturnValue { get; }
    public NotNullWhenAttribute(bool returnValue);
    [CompilerGeneratedAttribute]
public bool get_ReturnValue();
}
[ExcludeFromCodeCoverageAttribute]
[DebuggerNonUserCodeAttribute]
internal static class System.Runtime.CompilerServices.IsExternalInit : object {
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
[AttributeUsageAttribute("27524")]
internal class System.Runtime.CompilerServices.NullableAttribute : Attribute {
    public Byte[] NullableFlags;
    public NullableAttribute(byte );
    public NullableAttribute(Byte[] );
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
[AttributeUsageAttribute("5196")]
internal class System.Runtime.CompilerServices.NullableContextAttribute : Attribute {
    public byte Flag;
    public NullableContextAttribute(byte );
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
[AttributeUsageAttribute("2")]
internal class System.Runtime.CompilerServices.RefSafetyRulesAttribute : Attribute {
    public int Version;
    public RefSafetyRulesAttribute(int );
}
