[CompilerGeneratedAttribute]
[EmbeddedAttribute]
internal class Microsoft.CodeAnalysis.EmbeddedAttribute : Attribute {
}
public static class NUnit.Compatibility.AttributeHelper : object {
    [NullableContextAttribute("1")]
public static Attribute[] GetCustomAttributes(object actual, Type attributeType, bool inherit);
}
public class NUnit.Compatibility.LongLivedMarshalByRefObject : MarshalByRefObject {
    [NullableContextAttribute("1")]
[ObsoleteAttribute("Preventing throwing PlatformNotSupportedException")]
public virtual object InitializeLifetimeService();
}
[FlagsAttribute]
public enum NUnit.Framework.ActionTargets : Enum {
    public int value__;
    public static ActionTargets Default;
    public static ActionTargets Test;
    public static ActionTargets Suite;
}
[AttributeUsageAttribute("69")]
public class NUnit.Framework.ApartmentAttribute : PropertyAttribute {
    public ApartmentAttribute(ApartmentState apartmentState);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class NUnit.Framework.Api.DefaultTestAssemblyBuilder : object {
    private static Logger Log;
    private ISuiteBuilder _defaultSuiteBuilder;
    private static DefaultTestAssemblyBuilder();
    public sealed virtual ITest Build(Assembly assembly, IDictionary`2<string, object> options);
    public sealed virtual ITest Build(string assemblyNameOrPath, IDictionary`2<string, object> options);
    private TestSuite Build(Assembly assembly, string assemblyNameOrPath, IDictionary`2<string, object> options);
    private IList`1<Test> GetFixtures(Assembly assembly, PreFilter filter);
    private IList`1<Type> GetCandidateFixtureTypes(Assembly assembly, PreFilter filter);
    private TestSuite BuildTestAssembly(Assembly assembly, string assemblyNameOrPath, IList`1<Test> fixtures);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class NUnit.Framework.Api.FrameworkController : LongLivedMarshalByRefObject {
    private static string LOG_FILE_FORMAT;
    [NullableAttribute("2")]
private Assembly _testAssembly;
    [CompilerGeneratedAttribute]
private ITestAssemblyBuilder <Builder>k__BackingField;
    [CompilerGeneratedAttribute]
private ITestAssemblyRunner <Runner>k__BackingField;
    [CompilerGeneratedAttribute]
private string <AssemblyNameOrPath>k__BackingField;
    [CompilerGeneratedAttribute]
private IDictionary`2<string, object> <Settings>k__BackingField;
    public ITestAssemblyBuilder Builder { get; }
    public ITestAssemblyRunner Runner { get; }
    public string AssemblyNameOrPath { get; private set; }
    internal IDictionary`2<string, object> Settings { get; private set; }
    public FrameworkController(string assemblyNameOrPath, string idPrefix, IDictionary settings);
    public FrameworkController(Assembly assembly, string idPrefix, IDictionary settings);
    public FrameworkController(string assemblyNameOrPath, string idPrefix, IDictionary settings, string runnerType, string builderType);
    public FrameworkController(Assembly assembly, string idPrefix, IDictionary settings, string runnerType, string builderType);
    [MemberNotNullAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private void Initialize(string assemblyNameOrPath, IDictionary settings);
    [CompilerGeneratedAttribute]
public ITestAssemblyBuilder get_Builder();
    [CompilerGeneratedAttribute]
public ITestAssemblyRunner get_Runner();
    [CompilerGeneratedAttribute]
public string get_AssemblyNameOrPath();
    [CompilerGeneratedAttribute]
private void set_AssemblyNameOrPath(string value);
    [CompilerGeneratedAttribute]
internal IDictionary`2<string, object> get_Settings();
    [CompilerGeneratedAttribute]
private void set_Settings(IDictionary`2<string, object> value);
    public string LoadTests();
    public string ExploreTests(string filter);
    public string RunTests(string filter);
    public string RunTests(Action`1<string> callback, string filter);
    private void RunAsync(Action`1<string> callback, string filter);
    public void StopRun(bool force);
    [NullableContextAttribute("2")]
public int CountTests(string filter);
    private void LoadTests(ICallbackEventHandler handler);
    private void ExploreTests(ICallbackEventHandler handler, string filter);
    private void RunTests(ICallbackEventHandler handler, string filter);
    private void RunAsync(ICallbackEventHandler handler, string filter);
    private void StopRun(ICallbackEventHandler handler, bool force);
    private void CountTests(ICallbackEventHandler handler, string filter);
    private TNode InsertChildElements(TNode targetNode);
    public static TNode InsertEnvironmentElement(TNode targetNode);
    private static string GetProcessorArchitecture();
    public static TNode InsertSettingsElement(TNode targetNode, IDictionary`2<string, object> settings);
    private static void AddSetting(TNode settingsNode, string name, object value);
    private static void AddBackwardsCompatibleDictionaryEntries(TNode settingsNode, IDictionary entries);
    private static void AddDictionaryEntries(TNode settingNode, IDictionary entries);
}
[NullableContextAttribute("1")]
public interface NUnit.Framework.Api.ITestAssemblyBuilder {
    public abstract virtual ITest Build(Assembly assembly, IDictionary`2<string, object> options);
    public abstract virtual ITest Build(string assemblyName, IDictionary`2<string, object> options);
}
[NullableContextAttribute("1")]
public interface NUnit.Framework.Api.ITestAssemblyRunner {
    [NullableAttribute("2")]
public ITest LoadedTest { get; }
    [NullableAttribute("2")]
public ITestResult Result { get; }
    public bool IsTestLoaded { get; }
    public bool IsTestRunning { get; }
    public bool IsTestComplete { get; }
    [NullableContextAttribute("2")]
public abstract virtual ITest get_LoadedTest();
    [NullableContextAttribute("2")]
public abstract virtual ITestResult get_Result();
    public abstract virtual bool get_IsTestLoaded();
    public abstract virtual bool get_IsTestRunning();
    public abstract virtual bool get_IsTestComplete();
    public abstract virtual ITest Load(string assemblyName, IDictionary`2<string, object> settings);
    public abstract virtual ITest Load(Assembly assembly, IDictionary`2<string, object> settings);
    public abstract virtual int CountTestCases(ITestFilter filter);
    public abstract virtual ITest ExploreTests(ITestFilter filter);
    public abstract virtual ITestResult Run(ITestListener listener, ITestFilter filter);
    public abstract virtual void RunAsync(ITestListener listener, ITestFilter filter);
    public abstract virtual bool WaitForCompletion(int timeout);
    public abstract virtual void StopRun(bool force);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class NUnit.Framework.Api.NUnitTestAssemblyRunner : object {
    private static Logger Log;
    private ITestAssemblyBuilder _builder;
    private ManualResetEventSlim _runComplete;
    [NullableAttribute("2")]
private TextWriter _savedOut;
    [NullableAttribute("2")]
private TextWriter _savedErr;
    [NullableAttribute("2")]
private EventPump _pump;
    [NullableAttribute("2")]
[CompilerGeneratedAttribute]
private ITest <LoadedTest>k__BackingField;
    [CompilerGeneratedAttribute]
private IDictionary`2<string, object> <Settings>k__BackingField;
    [NullableAttribute("2")]
[CompilerGeneratedAttribute]
private WorkItem <TopLevelWorkItem>k__BackingField;
    [NullableAttribute("2")]
[CompilerGeneratedAttribute]
private TestExecutionContext <Context>k__BackingField;
    public static int DefaultLevelOfParallelism { get; }
    [NullableAttribute("2")]
public ITest LoadedTest { get; private set; }
    [NullableAttribute("2")]
public ITestResult Result { get; }
    public bool IsTestLoaded { get; }
    public bool IsTestRunning { get; }
    public bool IsTestComplete { get; }
    private IDictionary`2<string, object> Settings { get; private set; }
    [NullableAttribute("2")]
private WorkItem TopLevelWorkItem { get; private set; }
    [NullableAttribute("2")]
private TestExecutionContext Context { get; private set; }
    public NUnitTestAssemblyRunner(ITestAssemblyBuilder builder);
    private static NUnitTestAssemblyRunner();
    public static int get_DefaultLevelOfParallelism();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public sealed virtual ITest get_LoadedTest();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
private void set_LoadedTest(ITest value);
    [NullableContextAttribute("2")]
public sealed virtual ITestResult get_Result();
    public sealed virtual bool get_IsTestLoaded();
    public sealed virtual bool get_IsTestRunning();
    public sealed virtual bool get_IsTestComplete();
    [CompilerGeneratedAttribute]
private IDictionary`2<string, object> get_Settings();
    [CompilerGeneratedAttribute]
private void set_Settings(IDictionary`2<string, object> value);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
private WorkItem get_TopLevelWorkItem();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
private void set_TopLevelWorkItem(WorkItem value);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
private TestExecutionContext get_Context();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
private void set_Context(TestExecutionContext value);
    public sealed virtual ITest Load(string assemblyNameOrPath, IDictionary`2<string, object> settings);
    public sealed virtual ITest Load(Assembly assembly, IDictionary`2<string, object> settings);
    public sealed virtual int CountTestCases(ITestFilter filter);
    public sealed virtual ITest ExploreTests(ITestFilter filter);
    public sealed virtual ITestResult Run(ITestListener listener, ITestFilter filter);
    public sealed virtual void RunAsync(ITestListener listener, ITestFilter filter);
    public sealed virtual bool WaitForCompletion(int timeout);
    public sealed virtual void StopRun(bool force);
    private void StartRun(TestExecutionContext context, WorkItem topLevelWorkItem, ITestListener listener);
    private TestExecutionContext CreateTestExecutionContext(ITest loadedTest, ITestListener listener);
    private void OnRunCompleted(object sender, EventArgs e);
    private static int CountTestCases(ITest test, ITestFilter filter);
    private int GetLevelOfParallelism(ITest loadedTest);
    protected void WrapInNUnitCallContext(Action action);
    protected T WrapInNUnitCallContext(Func`1<T> function);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public abstract class NUnit.Framework.Assert : AssertBase {
    private static string CharlieAppreciation;
    private static StackFilter SystemEnvironmentFilter;
    internal static string IsTrueExpression;
    private static Assert();
    [EditorBrowsableAttribute("1")]
public static bool Equals(object a, object b);
    [EditorBrowsableAttribute("1")]
public static void ReferenceEquals(object a, object b);
    [DoesNotReturnAttribute]
public static void Charlie();
    [DoesNotReturnAttribute]
public static void Pass(string message);
    [DoesNotReturnAttribute]
public static void Pass();
    public static void Fail(string message);
    public static void Fail();
    public static void Warn(string message);
    [DoesNotReturnAttribute]
public static void Ignore(string message);
    [DoesNotReturnAttribute]
public static void Ignore();
    [DoesNotReturnAttribute]
public static void Inconclusive(string message);
    [DoesNotReturnAttribute]
public static void Inconclusive();
    public static void Multiple(TestDelegate testDelegate);
    public static void Multiple(AsyncTestDelegate testDelegate);
    [AsyncStateMachineAttribute("NUnit.Framework.Assert/<MultipleAsync>d__15")]
public static Task MultipleAsync(AsyncTestDelegate testDelegate);
    public static IDisposable EnterMultipleScope();
    internal static string ExtendedMessage(string methodName, string message, string actualExpression, string constraintExpression);
    private static void ReportFailure(string message);
    private static void IssueWarning(string message);
    [NullableContextAttribute("2")]
private static string GetStackTrace();
    private static string GetEnvironmentStackTraceWithoutThrowing();
    private static void IncrementAssertCount();
    public static Exception ThrowsAsync(IResolveConstraint expression, AsyncTestDelegate code, string message, Object[] args);
    public static Exception ThrowsAsync(IResolveConstraint expression, AsyncTestDelegate code);
    public static Exception ThrowsAsync(Type expectedExceptionType, AsyncTestDelegate code, string message, Object[] args);
    public static Exception ThrowsAsync(Type expectedExceptionType, AsyncTestDelegate code);
    public static TActual ThrowsAsync(AsyncTestDelegate code, string message, Object[] args);
    public static TActual ThrowsAsync(AsyncTestDelegate code);
    public static Exception CatchAsync(AsyncTestDelegate code, string message, Object[] args);
    public static Exception CatchAsync(AsyncTestDelegate code);
    public static Exception CatchAsync(Type expectedExceptionType, AsyncTestDelegate code, string message, Object[] args);
    public static Exception CatchAsync(Type expectedExceptionType, AsyncTestDelegate code);
    public static TActual CatchAsync(AsyncTestDelegate code, string message, Object[] args);
    public static TActual CatchAsync(AsyncTestDelegate code);
    public static void DoesNotThrowAsync(AsyncTestDelegate code, string message, Object[] args);
    public static void DoesNotThrowAsync(AsyncTestDelegate code);
    public static Exception Throws(IResolveConstraint expression, TestDelegate code, string message, Object[] args);
    public static Exception Throws(IResolveConstraint expression, TestDelegate code);
    public static Exception Throws(Type expectedExceptionType, TestDelegate code, string message, Object[] args);
    public static Exception Throws(Type expectedExceptionType, TestDelegate code);
    public static TActual Throws(TestDelegate code, string message, Object[] args);
    public static TActual Throws(TestDelegate code);
    public static Exception Catch(TestDelegate code, string message, Object[] args);
    public static Exception Catch(TestDelegate code);
    public static Exception Catch(Type expectedExceptionType, TestDelegate code, string message, Object[] args);
    public static Exception Catch(Type expectedExceptionType, TestDelegate code);
    public static TActual Catch(TestDelegate code, string message, Object[] args);
    public static TActual Catch(TestDelegate code);
    public static void DoesNotThrow(TestDelegate code, string message, Object[] args);
    public static void DoesNotThrow(TestDelegate code);
    public static void That(bool condition, NUnitString message, string actualExpression);
    public static void That(bool condition, FormattableString message, string actualExpression);
    public static void That(bool condition, Func`1<string> getExceptionMessage, string actualExpression);
    public static void That(Func`1<bool> condition, NUnitString message, string actualExpression);
    public static void That(Func`1<bool> condition, FormattableString message, string actualExpression);
    public static void That(Func`1<bool> condition, Func`1<string> getExceptionMessage, string actualExpression);
    public static void That(ActualValueDelegate`1<TActual> del, IResolveConstraint expr, NUnitString message, string actualExpression, string constraintExpression);
    public static void That(ActualValueDelegate`1<TActual> del, IResolveConstraint expr, FormattableString message, string actualExpression, string constraintExpression);
    public static void That(ActualValueDelegate`1<TActual> del, IResolveConstraint expr, Func`1<string> getExceptionMessage, string actualExpression, string constraintExpression);
    public static void That(TestDelegate code, IResolveConstraint constraint, NUnitString message, string actualExpression, string constraintExpression);
    public static void That(TestDelegate code, IResolveConstraint constraint, FormattableString message, string actualExpression, string constraintExpression);
    public static void That(TestDelegate code, IResolveConstraint constraint, Func`1<string> getExceptionMessage, string actualExpression, string constraintExpression);
    public static void That(TActual actual, IResolveConstraint expression, NUnitString message, string actualExpression, string constraintExpression);
    public static void That(TActual actual, IResolveConstraint expression, FormattableString message, string actualExpression, string constraintExpression);
    public static void That(TActual actual, IResolveConstraint expression, Func`1<string> getExceptionMessage, string actualExpression, string constraintExpression);
    public static void ByVal(object actual, IResolveConstraint expression, string message, string actualExpression, string constraintExpression);
    private static void ReportFailure(ConstraintResult result, string message, string actualExpression, string constraintExpression);
    [AsyncStateMachineAttribute("NUnit.Framework.Assert/<ThatAsync>d__71")]
public static Task ThatAsync(AsyncTestDelegate code, IResolveConstraint constraint, NUnitString message, string actualExpression, string constraintExpression);
    [AsyncStateMachineAttribute("NUnit.Framework.Assert/<ThatAsync>d__72")]
public static Task ThatAsync(AsyncTestDelegate code, IResolveConstraint constraint, FormattableString message, string actualExpression, string constraintExpression);
    [AsyncStateMachineAttribute("NUnit.Framework.Assert/<ThatAsync>d__73`1")]
public static Task ThatAsync(Func`1<Task`1<T>> code, IResolveConstraint constraint, NUnitString message, string actualExpression, string constraintExpression);
    [AsyncStateMachineAttribute("NUnit.Framework.Assert/<ThatAsync>d__74`1")]
public static Task ThatAsync(Func`1<Task`1<T>> code, IResolveConstraint constraint, FormattableString message, string actualExpression, string constraintExpression);
}
public abstract class NUnit.Framework.AssertBase : object {
    [NullableContextAttribute("1")]
protected static string ConvertMessageWithArgs(string message, Object[] args);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class NUnit.Framework.AssertionException : ResultStateException {
    public ResultState ResultState { get; }
    public AssertionException(string message);
    public AssertionException(string message, Exception inner);
    protected AssertionException(SerializationInfo info, StreamingContext context);
    public virtual ResultState get_ResultState();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public abstract class NUnit.Framework.Assume : object {
    [EditorBrowsableAttribute("1")]
public static bool Equals(object a, object b);
    public static void ReferenceEquals(object a, object b);
    public static void That(ActualValueDelegate`1<TActual> del, IResolveConstraint expr, NUnitString message, string actualExpression, string constraintExpression);
    public static void That(ActualValueDelegate`1<TActual> del, IResolveConstraint expr, FormattableString message, string actualExpression, string constraintExpression);
    public static void That(ActualValueDelegate`1<TActual> del, IResolveConstraint expr, Func`1<string> getExceptionMessage, string actualExpression, string constraintExpression);
    public static void That(bool condition, NUnitString message, string actualExpression);
    public static void That(bool condition, FormattableString message, string actualExpression);
    public static void That(bool condition, Func`1<string> getExceptionMessage, string actualExpression);
    public static void That(Func`1<bool> condition, NUnitString message, string actualExpression);
    public static void That(Func`1<bool> condition, FormattableString message, string actualExpression);
    public static void That(Func`1<bool> condition, Func`1<string> getExceptionMessage, string actualExpression);
    public static void That(TActual actual, IResolveConstraint expression, NUnitString message, string actualExpression, string constraintExpression);
    public static void That(TActual actual, IResolveConstraint expression, FormattableString message, string actualExpression, string constraintExpression);
    public static void That(TActual actual, IResolveConstraint expression, Func`1<string> getExceptionMessage, string actualExpression, string constraintExpression);
    private static void CheckMultipleAssertLevel();
    private static void ReportInconclusive(ConstraintResult result, string message, string actualExpression, string constraintExpression);
}
public class NUnit.Framework.AsyncTestDelegate : MulticastDelegate {
    public AsyncTestDelegate(object object, IntPtr method);
    [NullableContextAttribute("1")]
public virtual Task Invoke();
    public virtual IAsyncResult BeginInvoke(AsyncCallback callback, object object);
    public virtual Task EndInvoke(IAsyncResult result);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[AttributeUsageAttribute("69")]
public class NUnit.Framework.AuthorAttribute : PropertyAttribute {
    public AuthorAttribute(string name);
    public AuthorAttribute(string name, string email);
}
[AttributeUsageAttribute("68")]
public class NUnit.Framework.CancelAfterAttribute : PropertyAttribute {
    private int _timeout;
    public CancelAfterAttribute(int timeout);
    [NullableContextAttribute("1")]
private sealed virtual override void NUnit.Framework.Interfaces.IApplyToContext.ApplyToContext(TestExecutionContext context);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[AttributeUsageAttribute("69")]
public class NUnit.Framework.CategoryAttribute : NUnitAttribute {
    protected string categoryName;
    public string Name { get; }
    public CategoryAttribute(string name);
    public string get_Name();
    public sealed virtual void ApplyToTest(Test test);
}
[AttributeUsageAttribute("64")]
public class NUnit.Framework.CombinatorialAttribute : CombiningStrategyAttribute {
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[AttributeUsageAttribute("64")]
public abstract class NUnit.Framework.CombiningStrategyAttribute : NUnitAttribute {
    private NUnitTestCaseBuilder _builder;
    private ICombiningStrategy _strategy;
    private IParameterDataProvider _dataProvider;
    protected CombiningStrategyAttribute(ICombiningStrategy strategy, IParameterDataProvider provider);
    protected CombiningStrategyAttribute(object strategy, object provider);
    public sealed virtual IEnumerable`1<TestMethod> BuildFrom(IMethodInfo method, Test suite);
    public sealed virtual void ApplyToTest(Test test);
}
public class NUnit.Framework.Constraints.ActualValueDelegate`1 : MulticastDelegate {
    public ActualValueDelegate`1(object object, IntPtr method);
    [NullableContextAttribute("1")]
public virtual TActual Invoke();
    public virtual IAsyncResult BeginInvoke(AsyncCallback callback, object object);
    public virtual TActual EndInvoke(IAsyncResult result);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class NUnit.Framework.Constraints.AllItemsConstraint : PrefixConstraint {
    public string DisplayName { get; }
    public AllItemsConstraint(IConstraint itemConstraint);
    public virtual string get_DisplayName();
    public virtual ConstraintResult ApplyTo(TActual actual);
}
public class NUnit.Framework.Constraints.AllOperator : CollectionOperator {
    [NullableContextAttribute("1")]
public virtual IConstraint ApplyPrefix(IConstraint constraint);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class NUnit.Framework.Constraints.AndConstraint : BinaryConstraint {
    public string Description { get; }
    public AndConstraint(IConstraint left, IConstraint right);
    public virtual string get_Description();
    public virtual ConstraintResult ApplyTo(TActual actual);
}
public class NUnit.Framework.Constraints.AndOperator : BinaryOperator {
    [NullableContextAttribute("1")]
public virtual IConstraint ApplyOperator(IConstraint left, IConstraint right);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class NUnit.Framework.Constraints.AnyOfConstraint : Constraint {
    private ICollection _expected;
    private NUnitEqualityComparer _comparer;
    public string Description { get; }
    public AnyOfConstraint IgnoreCase { get; }
    public AnyOfConstraint IgnoreWhiteSpace { get; }
    public AnyOfConstraint(ICollection expected);
    public virtual string get_Description();
    protected virtual string GetStringRepresentation();
    public virtual ConstraintResult ApplyTo(TActual actual);
    public AnyOfConstraint get_IgnoreCase();
    public AnyOfConstraint get_IgnoreWhiteSpace();
    public AnyOfConstraint Using(IComparer comparer);
    public AnyOfConstraint Using(IComparer`1<T> comparer);
    public AnyOfConstraint Using(Comparison`1<T> comparer);
    public AnyOfConstraint Using(IEqualityComparer comparer);
    public AnyOfConstraint Using(IEqualityComparer`1<T> comparer);
    public AnyOfConstraint Using(Func`3<T, T, bool> comparer);
    public AnyOfConstraint UsingPropertiesComparer();
}
public class NUnit.Framework.Constraints.AssignableFromConstraint : TypeConstraint {
    [NullableContextAttribute("1")]
public AssignableFromConstraint(Type type);
    [NullableContextAttribute("2")]
protected virtual bool Matches(object actual);
}
public class NUnit.Framework.Constraints.AssignableToConstraint : TypeConstraint {
    [NullableContextAttribute("1")]
public AssignableToConstraint(Type type);
    [NullableContextAttribute("2")]
protected virtual bool Matches(object actual);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class NUnit.Framework.Constraints.AttributeConstraint : PrefixConstraint {
    private Type _expectedType;
    public AttributeConstraint(Type type, IConstraint baseConstraint);
    public virtual ConstraintResult ApplyTo(TActual actual);
    protected virtual string GetStringRepresentation();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class NUnit.Framework.Constraints.AttributeExistsConstraint : Constraint {
    private Type _expectedType;
    public string Description { get; }
    public AttributeExistsConstraint(Type type);
    public virtual string get_Description();
    public virtual ConstraintResult ApplyTo(TActual actual);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class NUnit.Framework.Constraints.AttributeOperator : SelfResolvingOperator {
    private Type _type;
    public AttributeOperator(Type type);
    public virtual void Reduce(ConstraintStack stack);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public abstract class NUnit.Framework.Constraints.BinaryConstraint : Constraint {
    protected IConstraint Left;
    protected IConstraint Right;
    protected BinaryConstraint(IConstraint left, IConstraint right);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public abstract class NUnit.Framework.Constraints.BinaryOperator : ConstraintOperator {
    public int LeftPrecedence { get; }
    public int RightPrecedence { get; }
    public virtual void Reduce(ConstraintStack stack);
    public virtual int get_LeftPrecedence();
    public virtual int get_RightPrecedence();
    public abstract virtual IConstraint ApplyOperator(IConstraint left, IConstraint right);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public abstract class NUnit.Framework.Constraints.CollectionConstraint : Constraint {
    [NullableContextAttribute("2")]
protected CollectionConstraint(object arg);
    protected static bool IsEmpty(IEnumerable enumerable);
    public virtual ConstraintResult ApplyTo(TActual actual);
    protected abstract virtual bool Matches(IEnumerable collection);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class NUnit.Framework.Constraints.CollectionEquivalentConstraint : CollectionItemsEqualConstraint {
    private IEnumerable _expected;
    public string DisplayName { get; }
    public string Description { get; }
    public CollectionEquivalentConstraint(IEnumerable expected);
    public virtual string get_DisplayName();
    public virtual string get_Description();
    private bool Matches(IEnumerable actual, CollectionTallyResult& tallyResult);
    protected virtual bool Matches(IEnumerable actual);
    public virtual ConstraintResult ApplyTo(TActual actual);
    public CollectionEquivalentConstraint Using(Func`3<TActualElement, TExpectedElement, bool> comparison);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class NUnit.Framework.Constraints.CollectionEquivalentConstraintResult : ConstraintResult {
    private CollectionTallyResult _tallyResult;
    public CollectionEquivalentConstraintResult(CollectionEquivalentConstraint constraint, CollectionTallyResult tallyResult, object actual, bool isSuccess);
    public virtual void WriteAdditionalLinesTo(MessageWriter writer);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public abstract class NUnit.Framework.Constraints.CollectionItemsEqualConstraint : CollectionConstraint {
    private NUnitEqualityComparer _comparer;
    protected bool IgnoringCase { get; }
    protected bool IgnoringWhiteSpace { get; }
    protected bool UsingExternalComparer { get; }
    public CollectionItemsEqualConstraint IgnoreCase { get; }
    public CollectionItemsEqualConstraint IgnoreWhiteSpace { get; }
    [NullableContextAttribute("2")]
protected CollectionItemsEqualConstraint(object arg);
    protected bool get_IgnoringCase();
    protected bool get_IgnoringWhiteSpace();
    protected bool get_UsingExternalComparer();
    public CollectionItemsEqualConstraint get_IgnoreCase();
    public CollectionItemsEqualConstraint get_IgnoreWhiteSpace();
    public CollectionItemsEqualConstraint Using(IComparer comparer);
    public CollectionItemsEqualConstraint Using(IComparer`1<T> comparer);
    public CollectionItemsEqualConstraint Using(Comparison`1<T> comparison);
    public CollectionItemsEqualConstraint Using(IEqualityComparer comparer);
    public CollectionItemsEqualConstraint Using(IEqualityComparer`1<T> comparer);
    public CollectionItemsEqualConstraint Using(Func`3<T, T, bool> comparer);
    internal CollectionItemsEqualConstraint Using(EqualityAdapter adapter);
    public CollectionItemsEqualConstraint UsingPropertiesComparer();
    [NullableContextAttribute("2")]
protected bool ItemsEqual(object x, object y);
    protected CollectionTally Tally(IEnumerable c);
}
public abstract class NUnit.Framework.Constraints.CollectionOperator : PrefixOperator {
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class NUnit.Framework.Constraints.CollectionOrderedConstraint : CollectionConstraint {
    private List`1<OrderingStep> _steps;
    private OrderingStep _activeStep;
    private int _breakingIndex;
    [NullableAttribute("2")]
private object _breakingValue;
    public string DisplayName { get; }
    public CollectionOrderedConstraint Ascending { get; }
    public CollectionOrderedConstraint Descending { get; }
    public CollectionOrderedConstraint Then { get; }
    public string Description { get; }
    public virtual string get_DisplayName();
    public CollectionOrderedConstraint get_Ascending();
    public CollectionOrderedConstraint get_Descending();
    public CollectionOrderedConstraint Using(IComparer comparer);
    public CollectionOrderedConstraint Using(IComparer`1<T> comparer);
    public CollectionOrderedConstraint Using(Comparison`1<T> comparer);
    public CollectionOrderedConstraint By(string propertyName);
    public CollectionOrderedConstraint get_Then();
    public virtual string get_Description();
    public virtual ConstraintResult ApplyTo(TActual actual);
    protected virtual bool Matches(IEnumerable actual);
    protected virtual string GetStringRepresentation();
    [NullableContextAttribute("2")]
[MemberNotNullAttribute("_activeStep")]
private void CreateNextStep(string propertyName);
    private object ExtractValue(IEnumerable actual, object item, string propertyName, int index);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class NUnit.Framework.Constraints.CollectionSubsetConstraint : CollectionItemsEqualConstraint {
    private IEnumerable _expected;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private List`1<object> _extraItems;
    public string DisplayName { get; }
    public string Description { get; }
    public CollectionSubsetConstraint(IEnumerable expected);
    public virtual string get_DisplayName();
    public virtual string get_Description();
    protected virtual bool Matches(IEnumerable actual);
    public virtual ConstraintResult ApplyTo(TActual actual);
    public CollectionSubsetConstraint Using(Func`3<TSubsetElement, TSupersetElement, bool> comparison);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class NUnit.Framework.Constraints.CollectionSupersetConstraint : CollectionItemsEqualConstraint {
    private IEnumerable _expected;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private List`1<object> _missingItems;
    public string DisplayName { get; }
    public string Description { get; }
    public CollectionSupersetConstraint(IEnumerable expected);
    public virtual string get_DisplayName();
    public virtual string get_Description();
    protected virtual bool Matches(IEnumerable actual);
    public virtual ConstraintResult ApplyTo(TActual actual);
    public CollectionSupersetConstraint Using(Func`3<TSupersetElement, TSubsetElement, bool> comparison);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class NUnit.Framework.Constraints.CollectionTally : object {
    private NUnitEqualityComparer _comparer;
    private bool _isSortable;
    private bool _sorted;
    private List`1<object> _missingItems;
    private List`1<object> _extraItems;
    public CollectionTallyResult Result { get; }
    public CollectionTally(NUnitEqualityComparer comparer, IEnumerable c);
    public CollectionTallyResult get_Result();
    private bool ItemsEqual(object expected, object actual);
    public void TryRemove(object o);
    public void TryRemove(IEnumerable c);
    private static List`1<object> ToList(IEnumerable items);
    [CompilerGeneratedAttribute]
private void <TryRemove>g__TryRemoveSlow|11_0(IEnumerable c);
}
internal static class NUnit.Framework.Constraints.Comparers.ArraysComparer : object {
    [NullableContextAttribute("1")]
public static EqualMethodResult Equal(object x, object y, Tolerance& tolerance, ComparisonState state, NUnitEqualityComparer equalityComparer);
}
internal static class NUnit.Framework.Constraints.Comparers.CharsComparer : object {
    [NullableContextAttribute("1")]
public static EqualMethodResult Equal(object x, object y, Tolerance& tolerance, ComparisonState state, NUnitEqualityComparer equalityComparer);
}
[IsByRefLikeAttribute]
[ObsoleteAttribute("Types with embedded references are not supported in this version of your compiler.", "True")]
[IsReadOnlyAttribute]
internal class NUnit.Framework.Constraints.Comparers.ComparisonState : ValueType {
    [CompilerGeneratedAttribute]
private bool <TopLevelComparison>k__BackingField;
    private ImmutableStack`1<Comparison> _comparisons;
    public bool TopLevelComparison { get; }
    public ComparisonState(bool topLevelComparison);
    private ComparisonState(bool topLevelComparison, ImmutableStack`1<Comparison> comparisons);
    [CompilerGeneratedAttribute]
public bool get_TopLevelComparison();
    [NullableContextAttribute("1")]
public ComparisonState PushComparison(object x, object y);
    [NullableContextAttribute("1")]
public bool DidCompare(object x, object y);
}
internal static class NUnit.Framework.Constraints.Comparers.DateTimeOffsetsComparer : object {
    [NullableContextAttribute("1")]
public static EqualMethodResult Equal(object x, object y, Tolerance& tolerance, ComparisonState state, NUnitEqualityComparer equalityComparer);
}
internal static class NUnit.Framework.Constraints.Comparers.DictionariesComparer : object {
    [NullableContextAttribute("1")]
public static EqualMethodResult Equal(object x, object y, Tolerance& tolerance, ComparisonState state, NUnitEqualityComparer equalityComparer);
}
internal static class NUnit.Framework.Constraints.Comparers.DictionaryEntriesComparer : object {
    [NullableContextAttribute("1")]
public static EqualMethodResult Equal(object x, object y, Tolerance& tolerance, ComparisonState state, NUnitEqualityComparer equalityComparer);
}
internal static class NUnit.Framework.Constraints.Comparers.DirectoriesComparer : object {
    [NullableContextAttribute("1")]
public static EqualMethodResult Equal(object x, object y, Tolerance& tolerance, ComparisonState state, NUnitEqualityComparer equalityComparer);
}
internal static class NUnit.Framework.Constraints.Comparers.EnumComparer : object {
    [NullableContextAttribute("1")]
public static EqualMethodResult Equal(object x, object y, Tolerance& tolerance, ComparisonState state, NUnitEqualityComparer equalityComparer);
}
internal static class NUnit.Framework.Constraints.Comparers.EnumerablesComparer : object {
    [NullableContextAttribute("1")]
public static EqualMethodResult Equal(object x, object y, Tolerance& tolerance, ComparisonState state, NUnitEqualityComparer equalityComparer);
}
internal enum NUnit.Framework.Constraints.Comparers.EqualMethodResult : Enum {
    public int value__;
    public static EqualMethodResult TypesNotSupported;
    public static EqualMethodResult ToleranceNotSupported;
    public static EqualMethodResult ComparedEqual;
    public static EqualMethodResult ComparedNotEqual;
    public static EqualMethodResult ComparisonPending;
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal static class NUnit.Framework.Constraints.Comparers.EqualsComparer : object {
    private static Type[] EqualsObjectParameterTypes;
    private static EqualsComparer();
    public static EqualMethodResult Equal(object x, object y, Tolerance& tolerance, ComparisonState state, NUnitEqualityComparer equalityComparer);
    private static bool OverridesEqualsObject(Type type);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal static class NUnit.Framework.Constraints.Comparers.EquatablesComparer : object {
    public static EqualMethodResult Equal(object x, object y, Tolerance& tolerance, ComparisonState state, NUnitEqualityComparer equalityComparer);
    private static MethodInfo FirstImplementsIEquatableOfSecond(Type first, Type second);
    private static EquatableMethodImpl[] GetEquatableImplementations(Type type);
    private static bool InvokeFirstIEquatableEqualsSecond(object first, object second, MethodInfo equals);
    [CompilerGeneratedAttribute]
internal static bool <GetEquatableImplementations>g__IsIEquatableOfT|2_0(Type t);
}
internal static class NUnit.Framework.Constraints.Comparers.KeyValuePairsComparer : object {
    [NullableContextAttribute("1")]
public static EqualMethodResult Equal(object x, object y, Tolerance& tolerance, ComparisonState state, NUnitEqualityComparer equalityComparer);
}
internal static class NUnit.Framework.Constraints.Comparers.NumericsComparer : object {
    [NullableContextAttribute("1")]
public static EqualMethodResult Equal(object x, object y, Tolerance& tolerance, ComparisonState state, NUnitEqualityComparer equalityComparer);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal static class NUnit.Framework.Constraints.Comparers.PropertiesComparer : object {
    public static EqualMethodResult Equal(object x, object y, Tolerance& tolerance, ComparisonState state, NUnitEqualityComparer equalityComparer);
    private static EqualMethodResult PropertyNotEqualResult(NUnitEqualityComparer equalityComparer, int i, string declaringTypeName, string propertyName, object xPropertyValue, object yPropertyValue);
}
internal static class NUnit.Framework.Constraints.Comparers.StreamsComparer : object {
    private static int BUFFER_SIZE;
    [NullableContextAttribute("1")]
public static EqualMethodResult Equal(object x, object y, Tolerance& tolerance, ComparisonState state, NUnitEqualityComparer equalityComparer);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal static class NUnit.Framework.Constraints.Comparers.StringsComparer : object {
    public static EqualMethodResult Equal(object x, object y, Tolerance& tolerance, ComparisonState state, NUnitEqualityComparer equalityComparer);
    public static bool Equals(string x, string y, bool ignoreCase, bool ignoreWhiteSpace);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal static class NUnit.Framework.Constraints.Comparers.StructuralComparer : object {
    public static EqualMethodResult Equal(object x, object y, Tolerance& tolerance, ComparisonState state, NUnitEqualityComparer equalityComparer);
}
internal static class NUnit.Framework.Constraints.Comparers.TimeSpanToleranceComparer : object {
    [NullableContextAttribute("1")]
public static EqualMethodResult Equal(object x, object y, Tolerance& tolerance, ComparisonState state, NUnitEqualityComparer equalityComparer);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal static class NUnit.Framework.Constraints.Comparers.TupleComparer : object {
    private static bool IsCorrectType(Type type);
    private static object GetValue(Type type, string propertyName, object obj);
    public static EqualMethodResult Equal(object x, object y, Tolerance& tolerance, ComparisonState state, NUnitEqualityComparer equalityComparer);
}
internal static class NUnit.Framework.Constraints.Comparers.TupleComparerBase : object {
    [NullableContextAttribute("1")]
public static EqualMethodResult Equal(object x, object y, Tolerance& tolerance, ComparisonState state, NUnitEqualityComparer equalityComparer, Func`2<Type, bool> isCorrectType, Func`4<Type, string, object, object> getValue);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal static class NUnit.Framework.Constraints.Comparers.ValueTupleComparer : object {
    private static bool IsCorrectType(Type type);
    private static object GetValue(Type type, string propertyName, object obj);
    public static EqualMethodResult Equal(object x, object y, Tolerance& tolerance, ComparisonState state, NUnitEqualityComparer equalityComparer);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public abstract class NUnit.Framework.Constraints.ComparisonAdapter : object {
    public static ComparisonAdapter Default { get; }
    public static ComparisonAdapter get_Default();
    public static ComparisonAdapter For(IComparer comparer);
    public static ComparisonAdapter For(IComparer`1<T> comparer);
    public static ComparisonAdapter For(Comparison`1<T> comparer);
    [NullableContextAttribute("2")]
public abstract virtual int Compare(object expected, object actual);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public abstract class NUnit.Framework.Constraints.ComparisonConstraint : Constraint {
    private object _expected;
    private string _comparisonText;
    [NullableAttribute("2")]
private string _description;
    private Tolerance _tolerance;
    private ComparisonAdapter _comparer;
    public string Description { get; }
    public ComparisonConstraint Percent { get; }
    protected ComparisonConstraint(object expected, string comparisonText);
    public virtual string get_Description();
    public virtual ConstraintResult ApplyTo(TActual actual);
    protected abstract virtual bool PerformComparison(ComparisonAdapter comparer, object actual, object expected, Tolerance tolerance);
    public ComparisonConstraint Using(IComparer comparer);
    public ComparisonConstraint Using(IComparer`1<T> comparer);
    public ComparisonConstraint Using(Comparison`1<T> comparer);
    public ComparisonConstraint Within(object amount);
    public ComparisonConstraint get_Percent();
    private string DefaultDescription(string comparisonText);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public abstract class NUnit.Framework.Constraints.Constraint : object {
    private Lazy`1<string> _displayName;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[CompilerGeneratedAttribute]
private Object[] <Arguments>k__BackingField;
    [NullableAttribute("2")]
[CompilerGeneratedAttribute]
private ConstraintBuilder <Builder>k__BackingField;
    public string DisplayName { get; }
    public string Description { get; }
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public Object[] Arguments { get; }
    [NullableAttribute("2")]
public ConstraintBuilder Builder { get; public set; }
    public ConstraintExpression And { get; }
    public ConstraintExpression With { get; }
    public ConstraintExpression Or { get; }
    internal ConstraintExpression Instead { get; }
    protected Constraint(Object[] args);
    public virtual string get_DisplayName();
    public abstract virtual string get_Description();
    [CompilerGeneratedAttribute]
public sealed virtual Object[] get_Arguments();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public sealed virtual ConstraintBuilder get_Builder();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public sealed virtual void set_Builder(ConstraintBuilder value);
    public abstract virtual ConstraintResult ApplyTo(TActual actual);
    public virtual ConstraintResult ApplyTo(ActualValueDelegate`1<TActual> del);
    public virtual ConstraintResult ApplyTo(TActual& actual);
    [NullableContextAttribute("2")]
protected virtual object GetTestObject(ActualValueDelegate`1<TActual> del);
    public virtual string ToString();
    protected string GetStringRepresentation(IEnumerable arguments);
    protected virtual string GetStringRepresentation();
    public static Constraint op_BitwiseAnd(Constraint left, Constraint right);
    public static Constraint op_BitwiseOr(Constraint left, Constraint right);
    public static Constraint op_LogicalNot(Constraint constraint);
    public ConstraintExpression get_And();
    public ConstraintExpression get_With();
    public ConstraintExpression get_Or();
    internal ConstraintExpression get_Instead();
    public WithRawDelayInterval After(int delay);
    public DelayedConstraint After(int delayInMilliseconds, int pollingInterval);
    private sealed virtual override IConstraint NUnit.Framework.Constraints.IResolveConstraint.Resolve();
    [CompilerGeneratedAttribute]
private string <.ctor>b__1_0();
    [CompilerGeneratedAttribute]
internal static string <GetStringRepresentation>g__Displayable|18_0(object o);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class NUnit.Framework.Constraints.ConstraintBuilder : object {
    private OperatorStack _ops;
    private ConstraintStack _constraints;
    [NullableAttribute("2")]
private object _lastPushed;
    private bool IsResolvable { get; }
    public void Append(ConstraintOperator op);
    public void Append(Constraint constraint);
    private void SetTopOperatorRightContext(object rightContext);
    private void ReduceOperatorStack(int targetPrecedence);
    public sealed virtual IConstraint Resolve();
    private bool get_IsResolvable();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class NUnit.Framework.Constraints.ConstraintExpression : object {
    protected ConstraintBuilder builder;
    public ConstraintExpression Not { get; }
    public ConstraintExpression No { get; }
    public ConstraintExpression All { get; }
    public ConstraintExpression Some { get; }
    public ConstraintExpression None { get; }
    public ItemsConstraintExpression One { get; }
    public ResolvableConstraintExpression Length { get; }
    public ResolvableConstraintExpression Count { get; }
    public ResolvableConstraintExpression Message { get; }
    public ResolvableConstraintExpression InnerException { get; }
    public ConstraintExpression With { get; }
    public NullConstraint Null { get; }
    public DefaultConstraint Default { get; }
    public TrueConstraint True { get; }
    public FalseConstraint False { get; }
    public GreaterThanConstraint Positive { get; }
    public LessThanConstraint Negative { get; }
    public EqualConstraint Zero { get; }
    public NaNConstraint NaN { get; }
    public EmptyConstraint Empty { get; }
    public WhiteSpaceConstraint WhiteSpace { get; }
    public UniqueItemsConstraint Unique { get; }
    public XmlSerializableConstraint XmlSerializable { get; }
    public CollectionOrderedConstraint Ordered { get; }
    public Constraint Exist { get; }
    public ConstraintExpression(ConstraintBuilder builder);
    public virtual string ToString();
    public ConstraintExpression Append(ConstraintOperator op);
    public ResolvableConstraintExpression Append(SelfResolvingOperator op);
    public Constraint Append(Constraint constraint);
    public T Append(T constraint);
    public ConstraintExpression get_Not();
    public ConstraintExpression get_No();
    public ConstraintExpression get_All();
    public ConstraintExpression get_Some();
    public ConstraintExpression get_None();
    public ItemsConstraintExpression Exactly(int expectedCount);
    public ItemsConstraintExpression get_One();
    public ResolvableConstraintExpression Property(string name);
    public ResolvableConstraintExpression get_Length();
    public ResolvableConstraintExpression get_Count();
    public ResolvableConstraintExpression get_Message();
    public ResolvableConstraintExpression get_InnerException();
    public ResolvableConstraintExpression Attribute(Type expectedType);
    public ResolvableConstraintExpression Attribute();
    public ConstraintExpression get_With();
    public Constraint Matches(IResolveConstraint constraint);
    public Constraint Matches(Predicate`1<TActual> predicate);
    public NullConstraint get_Null();
    public DefaultConstraint get_Default();
    public TrueConstraint get_True();
    public FalseConstraint get_False();
    public GreaterThanConstraint get_Positive();
    public LessThanConstraint get_Negative();
    public EqualConstraint get_Zero();
    public NaNConstraint get_NaN();
    public EmptyConstraint get_Empty();
    public WhiteSpaceConstraint get_WhiteSpace();
    public UniqueItemsConstraint get_Unique();
    public XmlSerializableConstraint get_XmlSerializable();
    public EqualConstraint EqualTo(object expected);
    public SameAsConstraint SameAs(object expected);
    public GreaterThanConstraint GreaterThan(object expected);
    public GreaterThanOrEqualConstraint GreaterThanOrEqualTo(object expected);
    public GreaterThanOrEqualConstraint AtLeast(object expected);
    public LessThanConstraint LessThan(object expected);
    public LessThanOrEqualConstraint LessThanOrEqualTo(object expected);
    public LessThanOrEqualConstraint AtMost(object expected);
    public ExactTypeConstraint TypeOf(Type expectedType);
    public ExactTypeConstraint TypeOf();
    public InstanceOfTypeConstraint InstanceOf(Type expectedType);
    public InstanceOfTypeConstraint InstanceOf();
    public AssignableFromConstraint AssignableFrom(Type expectedType);
    public AssignableFromConstraint AssignableFrom();
    public AssignableToConstraint AssignableTo(Type expectedType);
    public AssignableToConstraint AssignableTo();
    public CollectionEquivalentConstraint EquivalentTo(IEnumerable expected);
    public CollectionSubsetConstraint SubsetOf(IEnumerable expected);
    public CollectionSupersetConstraint SupersetOf(IEnumerable expected);
    public CollectionOrderedConstraint get_Ordered();
    public SomeItemsConstraint Member(object expected);
    public SomeItemsConstraint Contains(object expected);
    public ContainsConstraint Contains(string expected);
    public SomeItemsConstraint Contain(object expected);
    public ContainsConstraint Contain(string expected);
    public DictionaryContainsKeyConstraint ContainKey(object expected);
    public DictionaryContainsValueConstraint ContainValue(object expected);
    public StartsWithConstraint StartWith(string expected);
    public StartsWithConstraint StartsWith(string expected);
    public EndsWithConstraint EndWith(string expected);
    public EndsWithConstraint EndsWith(string expected);
    public RegexConstraint Match(string pattern);
    public RegexConstraint Match(Regex regex);
    public RegexConstraint Matches(string pattern);
    public RegexConstraint Matches(Regex regex);
    public SamePathConstraint SamePath(string expected);
    public SubPathConstraint SubPathOf(string expected);
    public SamePathOrUnderConstraint SamePathOrUnder(string expected);
    public RangeConstraint InRange(object from, object to);
    public Constraint get_Exist();
    public AnyOfConstraint AnyOf(Object[] expected);
    public AnyOfConstraint AnyOf(ICollection expected);
    public ConstraintExpression ItemAt(Object[] indexArgs);
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
public abstract class NUnit.Framework.Constraints.ConstraintOperator : object {
    private object _leftContext;
    private object _rightContext;
    protected int left_precedence;
    protected int right_precedence;
    public object LeftContext { get; public set; }
    public object RightContext { get; public set; }
    public int LeftPrecedence { get; }
    public int RightPrecedence { get; }
    public object get_LeftContext();
    public void set_LeftContext(object value);
    public object get_RightContext();
    public void set_RightContext(object value);
    public virtual int get_LeftPrecedence();
    public virtual int get_RightPrecedence();
    [NullableContextAttribute("1")]
public abstract virtual void Reduce(ConstraintStack stack);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class NUnit.Framework.Constraints.ConstraintResult : object {
    private IConstraint _constraint;
    [NullableAttribute("2")]
[CompilerGeneratedAttribute]
private object <ActualValue>k__BackingField;
    [CompilerGeneratedAttribute]
private ConstraintStatus <Status>k__BackingField;
    [NullableAttribute("2")]
public object ActualValue { get; }
    public ConstraintStatus Status { get; public set; }
    public bool IsSuccess { get; }
    public string Name { get; }
    public string Description { get; }
    public ConstraintResult(IConstraint constraint, object actualValue);
    public ConstraintResult(IConstraint constraint, object actualValue, ConstraintStatus status);
    public ConstraintResult(IConstraint constraint, object actualValue, bool isSuccess);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public object get_ActualValue();
    [CompilerGeneratedAttribute]
public ConstraintStatus get_Status();
    [CompilerGeneratedAttribute]
public void set_Status(ConstraintStatus value);
    public virtual bool get_IsSuccess();
    public string get_Name();
    public string get_Description();
    public virtual void WriteMessageTo(MessageWriter writer);
    public virtual void WriteAdditionalLinesTo(MessageWriter writer);
    public virtual void WriteActualValueTo(MessageWriter writer);
}
public enum NUnit.Framework.Constraints.ConstraintStatus : Enum {
    public int value__;
    public static ConstraintStatus Unknown;
    public static ConstraintStatus Success;
    public static ConstraintStatus Failure;
    public static ConstraintStatus Error;
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class NUnit.Framework.Constraints.ContainsConstraint : Constraint {
    [NullableAttribute("2")]
private object _expected;
    [NullableAttribute("2")]
private Constraint _realConstraint;
    private bool _ignoreCase;
    private bool _ignoreWhiteSpace;
    public string Description { get; }
    public ContainsConstraint IgnoreCase { get; }
    public ContainsConstraint IgnoreWhiteSpace { get; }
    [NullableContextAttribute("2")]
public ContainsConstraint(object expected);
    public virtual string get_Description();
    public ContainsConstraint get_IgnoreCase();
    public ContainsConstraint get_IgnoreWhiteSpace();
    public virtual ConstraintResult ApplyTo(TActual actual);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class NUnit.Framework.Constraints.CountZeroConstraint : Constraint {
    private static string CountPropertyName;
    public string Description { get; }
    public virtual string get_Description();
    public static bool HasCountProperty(Type type);
    public virtual ConstraintResult ApplyTo(TActual actual);
}
public static class NUnit.Framework.Constraints.DateTimes : object {
    [NullableContextAttribute("2")]
internal static object Difference(object x, object y);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class NUnit.Framework.Constraints.DefaultConstraint : Constraint {
    public string Description { get; }
    public virtual string get_Description();
    public virtual ConstraintResult ApplyTo(TActual actual);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class NUnit.Framework.Constraints.DelayedConstraint : PrefixConstraint {
    [CompilerGeneratedAttribute]
private Interval <DelayInterval>k__BackingField;
    [CompilerGeneratedAttribute]
private Interval <PollingInterval>k__BackingField;
    protected Interval DelayInterval { get; protected set; }
    protected Interval PollingInterval { get; protected set; }
    public string Description { get; }
    public DelayedConstraint(IConstraint baseConstraint, int delayInMilliseconds);
    public DelayedConstraint(IConstraint baseConstraint, int delayInMilliseconds, int pollingIntervalInMilliseconds);
    private DelayedConstraint(IConstraint baseConstraint, Interval delayInterval, Interval pollingInterval);
    [CompilerGeneratedAttribute]
protected Interval get_DelayInterval();
    [CompilerGeneratedAttribute]
protected void set_DelayInterval(Interval value);
    [CompilerGeneratedAttribute]
protected Interval get_PollingInterval();
    [CompilerGeneratedAttribute]
protected void set_PollingInterval(Interval value);
    public virtual string get_Description();
    public virtual ConstraintResult ApplyTo(TActual actual);
    public virtual ConstraintResult ApplyTo(ActualValueDelegate`1<TActual> del);
    public virtual ConstraintResult ApplyTo(TActual& actual);
    [NullableContextAttribute("2")]
private static object InvokeDelegate(ActualValueDelegate`1<T> del);
    protected virtual string GetStringRepresentation();
    private static long TimestampOffset(long timestamp, TimeSpan offset);
    private static TimeSpan TimestampDiff(long timestamp1, long timestamp2);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class NUnit.Framework.Constraints.DictionaryContainsKeyConstraint : CollectionItemsEqualConstraint {
    private static string ContainsMethodName;
    private bool _isDeprecatedMode;
    [CompilerGeneratedAttribute]
private object <Expected>k__BackingField;
    public string DisplayName { get; }
    public string Description { get; }
    protected object Expected { get; }
    public DictionaryContainsKeyConstraint(object expected);
    public virtual string get_DisplayName();
    public virtual string get_Description();
    [CompilerGeneratedAttribute]
protected object get_Expected();
    public DictionaryContainsKeyValuePairConstraint WithValue(object expectedValue);
    [NullableContextAttribute("2")]
private bool Matches(object actual);
    public virtual ConstraintResult ApplyTo(TActual actual);
    protected virtual bool Matches(IEnumerable collection);
    private static MethodInfo GetContainsKeyMethod(object keyedItemContainer);
    private static MethodInfo FindContainsKeyMethod(Type type);
    [IteratorStateMachineAttribute("NUnit.Framework.Constraints.DictionaryContainsKeyConstraint/<GetBaseTypes>d__16")]
private static IEnumerable`1<Type> GetBaseTypes(Type type);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class NUnit.Framework.Constraints.DictionaryContainsKeyValuePairConstraint : CollectionItemsEqualConstraint {
    private DictionaryEntry _expected;
    public string DisplayName { get; }
    public string Description { get; }
    public DictionaryContainsKeyValuePairConstraint(object key, object value);
    public virtual string get_DisplayName();
    public virtual string get_Description();
    [NullableContextAttribute("2")]
private bool Matches(object actual);
    public virtual ConstraintResult ApplyTo(TActual actual);
    protected virtual bool Matches(IEnumerable collection);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class NUnit.Framework.Constraints.DictionaryContainsValueConstraint : CollectionItemsEqualConstraint {
    [NullableAttribute("2")]
[CompilerGeneratedAttribute]
private object <Expected>k__BackingField;
    public string DisplayName { get; }
    public string Description { get; }
    [NullableAttribute("2")]
protected object Expected { get; }
    [NullableContextAttribute("2")]
public DictionaryContainsValueConstraint(object expected);
    public virtual string get_DisplayName();
    public virtual string get_Description();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
protected object get_Expected();
    protected virtual bool Matches(IEnumerable actual);
    public DictionaryContainsValueConstraint Using(Func`3<TActualValueElement, TExpected, bool> comparison);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class NUnit.Framework.Constraints.EachItemConstraintResult : ConstraintResult {
    private object _nonMatchingItem;
    private int _nonMatchingItemIndex;
    public EachItemConstraintResult(IConstraint constraint, object actualValue, object nonMatchingItem, int nonMatchingIndex);
    public virtual void WriteAdditionalLinesTo(MessageWriter writer);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class NUnit.Framework.Constraints.EmptyCollectionConstraint : CollectionConstraint {
    public string Description { get; }
    public virtual string get_Description();
    protected virtual bool Matches(IEnumerable collection);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class NUnit.Framework.Constraints.EmptyConstraint : Constraint {
    [NullableAttribute("2")]
private Constraint _realConstraint;
    public string Description { get; }
    public virtual string get_Description();
    public virtual ConstraintResult ApplyTo(TActual actual);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class NUnit.Framework.Constraints.EmptyDirectoryConstraint : Constraint {
    public string Description { get; }
    public virtual string get_Description();
    public virtual ConstraintResult ApplyTo(TActual actual);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class NUnit.Framework.Constraints.EmptyGuidConstraint : Constraint {
    public string Description { get; }
    public virtual string get_Description();
    public virtual ConstraintResult ApplyTo(TActual actual);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class NUnit.Framework.Constraints.EmptyStringConstraint : StringConstraint {
    public string Description { get; }
    public virtual string get_Description();
    [NullableContextAttribute("2")]
protected virtual bool Matches(string actual);
}
public class NUnit.Framework.Constraints.EndsWithConstraint : StringConstraint {
    [NullableContextAttribute("1")]
public EndsWithConstraint(string expected);
    [NullableContextAttribute("2")]
protected virtual bool Matches(string actual);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class NUnit.Framework.Constraints.EqualConstraint : Constraint {
    [NullableAttribute("2")]
private object _expected;
    private Tolerance _tolerance;
    private NUnitEqualityComparer _comparer;
    [CompilerGeneratedAttribute]
private bool <ClipStrings>k__BackingField;
    public Tolerance Tolerance { get; }
    public bool CaseInsensitive { get; }
    public bool IgnoringWhiteSpace { get; }
    public bool ComparingProperties { get; }
    public bool ClipStrings { get; private set; }
    public bool HasFailurePoints { get; }
    public IList`1<FailurePoint> FailurePoints { get; }
    public EqualConstraint IgnoreCase { get; }
    public EqualConstraint IgnoreWhiteSpace { get; }
    public EqualConstraint NoClip { get; }
    public EqualConstraint AsCollection { get; }
    public EqualConstraint WithSameOffset { get; }
    public EqualConstraint Ulps { get; }
    public EqualConstraint Percent { get; }
    public EqualConstraint Days { get; }
    public EqualConstraint Hours { get; }
    public EqualConstraint Minutes { get; }
    public EqualConstraint Seconds { get; }
    public EqualConstraint Milliseconds { get; }
    public EqualConstraint Ticks { get; }
    public string Description { get; }
    [NullableContextAttribute("2")]
public EqualConstraint(object expected);
    public Tolerance get_Tolerance();
    public bool get_CaseInsensitive();
    public bool get_IgnoringWhiteSpace();
    public bool get_ComparingProperties();
    [CompilerGeneratedAttribute]
public bool get_ClipStrings();
    [CompilerGeneratedAttribute]
private void set_ClipStrings(bool value);
    public bool get_HasFailurePoints();
    public IList`1<FailurePoint> get_FailurePoints();
    public EqualConstraint get_IgnoreCase();
    public EqualConstraint get_IgnoreWhiteSpace();
    public EqualConstraint get_NoClip();
    public EqualConstraint get_AsCollection();
    public EqualConstraint Within(object amount);
    public EqualConstraint get_WithSameOffset();
    public EqualConstraint get_Ulps();
    public EqualConstraint get_Percent();
    public EqualConstraint get_Days();
    public EqualConstraint get_Hours();
    public EqualConstraint get_Minutes();
    public EqualConstraint get_Seconds();
    public EqualConstraint get_Milliseconds();
    public EqualConstraint get_Ticks();
    public EqualConstraint Using(IComparer comparer);
    public EqualConstraint Using(IComparer`1<T> comparer);
    public EqualConstraint Using(Func`3<T, T, bool> comparer);
    public EqualConstraint Using(Comparison`1<T> comparer);
    public EqualConstraint Using(IEqualityComparer comparer);
    public EqualConstraint Using(IEqualityComparer`1<T> comparer);
    public EqualConstraint Using(Func`3<TActual, TExpected, bool> comparison);
    public EqualConstraint UsingPropertiesComparer();
    public virtual ConstraintResult ApplyTo(TActual actual);
    public virtual string get_Description();
    private void AdjustArgumentIfNeeded(T& arg);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class NUnit.Framework.Constraints.EqualConstraintResult : ConstraintResult {
    [NullableAttribute("2")]
private object _expectedValue;
    private Tolerance _tolerance;
    private bool _caseInsensitive;
    private bool _ignoringWhiteSpace;
    private bool _comparingProperties;
    private bool _clipStrings;
    private IList`1<FailurePoint> _failurePoints;
    private static string StringsDiffer_1;
    private static string StringsDiffer_2;
    private static string StreamsDiffer_1;
    private static string StreamsDiffer_2;
    private static string UnSeekableStreamsDiffer;
    private static string CollectionType_1;
    private static string CollectionType_2;
    private static string ValuesDiffer_1;
    private static string ValuesDiffer_2;
    public EqualConstraintResult(EqualConstraint constraint, object actual, bool hasSucceeded);
    private static EqualConstraintResult();
    public virtual void WriteMessageTo(MessageWriter writer);
    [NullableContextAttribute("2")]
private void DisplayDifferences(MessageWriter writer, object expected, object actual, int depth);
    private void DisplayStringDifferences(MessageWriter writer, string expected, string actual);
    private void DisplayStreamDifferences(MessageWriter writer, Stream expected, Stream actual, int depth);
    private void DisplayCollectionDifferences(MessageWriter writer, ICollection expected, ICollection actual, int depth);
    private void DisplayCollectionDifferenceWithFailurePoint(MessageWriter writer, ICollection expected, ICollection actual, FailurePoint failurePoint, int depth);
    private void DisplayTypesAndSizes(MessageWriter writer, IEnumerable expected, IEnumerable actual, int indent);
    private void DisplayFailurePoint(MessageWriter writer, IEnumerable expected, IEnumerable actual, FailurePoint failurePoint, int indent);
    private void DisplayEnumerableDifferences(MessageWriter writer, IEnumerable expected, IEnumerable actual, int depth);
    private void DisplayPropertyDifferences(MessageWriter writer, int depth);
    private bool IsPropertyFailurePoint(int depth);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public abstract class NUnit.Framework.Constraints.EqualityAdapter : object {
    public abstract virtual bool AreEqual(object x, object y);
    public virtual bool AreEqual(object x, object y, Tolerance& tolerance);
    public virtual bool CanCompare(object x, object y);
    public static EqualityAdapter For(IComparer comparer);
    public static EqualityAdapter For(IEqualityComparer comparer);
    public static EqualityAdapter For(Func`3<TExpected, TActual, bool> comparison);
    public static EqualityAdapter For(IEqualityComparer`1<T> comparer);
    public static EqualityAdapter For(IComparer`1<T> comparer);
    public static EqualityAdapter For(Comparison`1<T> comparer);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class NUnit.Framework.Constraints.ExactCountConstraint : Constraint {
    private int _expectedCount;
    [NullableAttribute("2")]
private IConstraint _itemConstraint;
    public string Description { get; }
    public ExactCountConstraint(int expectedCount);
    public ExactCountConstraint(int expectedCount, IConstraint itemConstraint);
    public virtual ConstraintResult ApplyTo(TActual actual);
    public virtual string get_Description();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class NUnit.Framework.Constraints.ExactCountConstraintResult : ConstraintResult {
    private int _matchCount;
    private ICollection`1<object> _itemList;
    internal ExactCountConstraintResult(IConstraint constraint, object actualValue, bool isSuccess, int matchCount, ICollection`1<object> itemList);
    public virtual void WriteActualValueTo(MessageWriter writer);
}
public class NUnit.Framework.Constraints.ExactCountOperator : SelfResolvingOperator {
    private int _expectedCount;
    public ExactCountOperator(int expectedCount);
    [NullableContextAttribute("1")]
public virtual void Reduce(ConstraintStack stack);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class NUnit.Framework.Constraints.ExactTypeConstraint : TypeConstraint {
    public string DisplayName { get; }
    public ExactTypeConstraint(Type type);
    public virtual string get_DisplayName();
    [NullableContextAttribute("2")]
protected virtual bool Matches(object actual);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class NUnit.Framework.Constraints.ExceptionNotThrownConstraint : Constraint {
    public string Description { get; }
    public virtual string get_Description();
    public virtual ConstraintResult ApplyTo(TActual actual);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class NUnit.Framework.Constraints.ExceptionTypeConstraint : ExactTypeConstraint {
    public ExceptionTypeConstraint(Type type);
    public virtual ConstraintResult ApplyTo(TActual actual);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class NUnit.Framework.Constraints.FalseConstraint : Constraint {
    public string Description { get; }
    public virtual string get_Description();
    public virtual ConstraintResult ApplyTo(TActual actual);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class NUnit.Framework.Constraints.FileOrDirectoryExistsConstraint : Constraint {
    private bool _ignoreDirectories;
    private bool _ignoreFiles;
    public FileOrDirectoryExistsConstraint IgnoreDirectories { get; }
    public FileOrDirectoryExistsConstraint IgnoreFiles { get; }
    public string Description { get; }
    private string ErrorSubstring { get; }
    public FileOrDirectoryExistsConstraint(bool ignoreDirectories);
    public FileOrDirectoryExistsConstraint get_IgnoreDirectories();
    public FileOrDirectoryExistsConstraint get_IgnoreFiles();
    public virtual string get_Description();
    public virtual ConstraintResult ApplyTo(TActual actual);
    private ConstraintResult CheckString(string actual);
    private string get_ErrorSubstring();
}
internal static class NUnit.Framework.Constraints.FloatingPointNumerics : object {
    public static bool AreAlmostEqualUlps(float left, float right, int maxUlps);
    public static bool AreAlmostEqualUlps(double left, double right, long maxUlps);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class NUnit.Framework.Constraints.GreaterThanConstraint : ComparisonConstraint {
    public GreaterThanConstraint(object expected);
    protected virtual bool PerformComparison(ComparisonAdapter comparer, object actual, object expected, Tolerance tolerance);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class NUnit.Framework.Constraints.GreaterThanOrEqualConstraint : ComparisonConstraint {
    public GreaterThanOrEqualConstraint(object expected);
    protected virtual bool PerformComparison(ComparisonAdapter comparer, object actual, object expected, Tolerance tolerance);
}
[NullableContextAttribute("1")]
public interface NUnit.Framework.Constraints.IConstraint {
    public string DisplayName { get; }
    public string Description { get; }
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public Object[] Arguments { get; }
    [NullableAttribute("2")]
public ConstraintBuilder Builder { get; public set; }
    public abstract virtual string get_DisplayName();
    public abstract virtual string get_Description();
    public abstract virtual Object[] get_Arguments();
    [NullableContextAttribute("2")]
public abstract virtual ConstraintBuilder get_Builder();
    [NullableContextAttribute("2")]
public abstract virtual void set_Builder(ConstraintBuilder value);
    public abstract virtual ConstraintResult ApplyTo(TActual actual);
    public abstract virtual ConstraintResult ApplyTo(ActualValueDelegate`1<TActual> del);
    public abstract virtual ConstraintResult ApplyTo(TActual& actual);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class NUnit.Framework.Constraints.IndexerConstraint : PrefixConstraint {
    private Type[] _argumentTypes;
    private Object[] _arguments;
    public IndexerConstraint(IEnumerable`1<object> indexerArguments, IConstraint baseConstraint);
    public IndexerConstraint(Object[] indexerArguments, IConstraint baseConstraint);
    public virtual ConstraintResult ApplyTo(TActual actual);
    protected virtual string GetStringRepresentation();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class NUnit.Framework.Constraints.IndexerOperator : PrefixOperator {
    private Object[] _indexArguments;
    public IndexerOperator(Object[] indexArgs);
    public virtual IConstraint ApplyPrefix(IConstraint constraint);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class NUnit.Framework.Constraints.InstanceOfTypeConstraint : TypeConstraint {
    public string DisplayName { get; }
    public InstanceOfTypeConstraint(Type type);
    public virtual string get_DisplayName();
    [NullableContextAttribute("2")]
protected virtual bool Matches(object actual);
}
public class NUnit.Framework.Constraints.InsteadOperator : BinaryOperator {
    [NullableContextAttribute("1")]
public virtual IConstraint ApplyOperator(IConstraint left, IConstraint right);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class NUnit.Framework.Constraints.Interval : object {
    private int _value;
    private IntervalUnit _mode;
    [CompilerGeneratedAttribute]
private TimeSpan <AsTimeSpan>k__BackingField;
    public TimeSpan AsTimeSpan { get; private set; }
    public Interval InMinutes { get; }
    public Interval InSeconds { get; }
    public Interval InMilliseconds { get; }
    public bool IsNotZero { get; }
    public Interval(int value);
    [CompilerGeneratedAttribute]
public TimeSpan get_AsTimeSpan();
    [CompilerGeneratedAttribute]
private void set_AsTimeSpan(TimeSpan value);
    public Interval get_InMinutes();
    public Interval get_InSeconds();
    public Interval get_InMilliseconds();
    public bool get_IsNotZero();
    public virtual string ToString();
}
[NullableContextAttribute("1")]
public interface NUnit.Framework.Constraints.IResolveConstraint {
    public abstract virtual IConstraint Resolve();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class NUnit.Framework.Constraints.ItemsConstraintExpression : ConstraintExpression {
    public ResolvableConstraintExpression Items { get; }
    public ItemsConstraintExpression(ConstraintBuilder builder);
    public ResolvableConstraintExpression get_Items();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class NUnit.Framework.Constraints.LessThanConstraint : ComparisonConstraint {
    public LessThanConstraint(object expected);
    protected virtual bool PerformComparison(ComparisonAdapter comparer, object actual, object expected, Tolerance tolerance);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class NUnit.Framework.Constraints.LessThanOrEqualConstraint : ComparisonConstraint {
    public LessThanOrEqualConstraint(object expected);
    protected virtual bool PerformComparison(ComparisonAdapter comparer, object actual, object expected, Tolerance tolerance);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public abstract class NUnit.Framework.Constraints.MessageWriter : StringWriter {
    public int MaxLineLength { get; public set; }
    public abstract virtual int get_MaxLineLength();
    public abstract virtual void set_MaxLineLength(int value);
    public void WriteMessageLine(string message, Object[] args);
    public abstract virtual void WriteMessageLine(int level, string message, Object[] args);
    public abstract virtual void DisplayDifferences(ConstraintResult result);
    [NullableContextAttribute("2")]
public abstract virtual void DisplayDifferences(object expected, object actual);
    [NullableContextAttribute("2")]
public abstract virtual void DisplayDifferences(object expected, object actual, Tolerance tolerance);
    public abstract virtual void DisplayStringDifferences(string expected, string actual, int mismatch, bool ignoreCase, bool clipping);
    public virtual void DisplayStringDifferences(string expected, string actual, int mismatchExpected, int mismatchActual, bool ignoreCase, bool ignoreWhiteSpace, bool clipping);
    [NullableContextAttribute("2")]
public abstract virtual void WriteActualValue(object actual);
    [NullableContextAttribute("2")]
public abstract virtual void WriteValue(object val);
    public abstract virtual void WriteCollectionElements(IEnumerable collection, long start, int max);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal static class NUnit.Framework.Constraints.MsgUtils : object {
    internal static int DefaultMaxItems;
    private static string ELLIPSIS;
    private static string Fmt_Null;
    private static string Fmt_EmptyString;
    private static string Fmt_EmptyCollection;
    private static string Fmt_String;
    private static string Fmt_Char;
    private static string Fmt_DateTime;
    private static string Fmt_DateTimeOffset;
    private static string Fmt_ValueType;
    private static string Fmt_Default;
    private static string Fmt_ExceptionThrown;
    [CompilerGeneratedAttribute]
private static ValueFormatter <DefaultValueFormatter>k__BackingField;
    public static ValueFormatter DefaultValueFormatter { get; public set; }
    private static MsgUtils();
    [CompilerGeneratedAttribute]
public static ValueFormatter get_DefaultValueFormatter();
    [CompilerGeneratedAttribute]
public static void set_DefaultValueFormatter(ValueFormatter value);
    private static string FormatValueWithoutThrowing(object val);
    public static void AddFormatter(ValueFormatterFactory formatterFactory);
    public static string FormatValue(object val);
    public static string FormatCollection(IEnumerable collection, long start, int max);
    private static string FormatArray(Array array);
    [NullableContextAttribute("2")]
private static string TryFormatKeyValuePair(object value);
    [NullableContextAttribute("2")]
private static string FormatKeyValuePair(object key, object value);
    private static object GetValueFromTuple(Type type, string propertyName, object obj);
    private static object GetValueFromValueTuple(Type type, string propertyName, object obj);
    [NullableContextAttribute("2")]
private static string TryFormatTuple(object value, Func`2<Type, bool> isTuple, Func`4<Type, string, object, object> getValue);
    private static string FormatTuple(object value, bool printParentheses, Func`4<Type, string, object, object> getValue);
    private static string FormatString(string s);
    private static string FormatDouble(double d);
    private static string FormatFloat(float f);
    private static string FormatDecimal(decimal d);
    private static string FormatDateTime(DateTime dt);
    private static string FormatDateTimeOffset(DateTimeOffset dto);
    public static string GetTypeRepresentation(object obj);
    [NullableContextAttribute("2")]
public static string EscapeControlChars(string s);
    [NullableContextAttribute("2")]
public static string EscapeControlChars(string s, Int32& index);
    [NullableContextAttribute("2")]
private static string EscapeControlChars(char c);
    [NullableContextAttribute("2")]
public static string EscapeNullCharacters(string s);
    public static string GetArrayIndicesAsString(Int32[] indices);
    public static Int32[] GetArrayIndicesFromCollectionIndex(IEnumerable collection, long index);
    public static string ClipString(string s, int clipLength, int clipStart);
    public static string ClipWhenNeeded(string s, int length, int maxDisplayLength, Int32& mismatchLocation);
    public static void ClipExpectedAndActual(String& expected, String& actual, int maxDisplayLength, Int32& mismatchExpected, Int32& mismatchActual);
    public static ValueTuple`2<int, int> FindMismatchPosition(string expected, string actual, bool ignoreCase, bool ignoreWhiteSpace);
    private static int FindNonWhiteSpace(string s, int i);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class NUnit.Framework.Constraints.NaNConstraint : Constraint {
    public string Description { get; }
    public virtual string get_Description();
    public virtual ConstraintResult ApplyTo(TActual actual);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class NUnit.Framework.Constraints.NoItemConstraint : PrefixConstraint {
    public string DisplayName { get; }
    public NoItemConstraint(IConstraint itemConstraint);
    public virtual string get_DisplayName();
    public virtual ConstraintResult ApplyTo(TActual actual);
}
public class NUnit.Framework.Constraints.NoneOperator : CollectionOperator {
    [NullableContextAttribute("1")]
public virtual IConstraint ApplyPrefix(IConstraint constraint);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class NUnit.Framework.Constraints.NotConstraint : PrefixConstraint {
    public NotConstraint(IConstraint baseConstraint);
    public virtual ConstraintResult ApplyTo(TActual actual);
}
public class NUnit.Framework.Constraints.NotOperator : PrefixOperator {
    [NullableContextAttribute("1")]
public virtual IConstraint ApplyPrefix(IConstraint constraint);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class NUnit.Framework.Constraints.NullConstraint : Constraint {
    public string Description { get; }
    public virtual string get_Description();
    public virtual ConstraintResult ApplyTo(TActual actual);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal static class NUnit.Framework.Constraints.Numerics : object {
    [NullableContextAttribute("2")]
public static bool IsNumericType(object obj);
    internal static bool IsNumericType(Type type);
    [NullableContextAttribute("2")]
public static bool IsFloatingPointNumeric(object obj);
    internal static bool IsFloatingPointNumeric(Type type);
    [NullableContextAttribute("2")]
public static bool IsFixedPointNumeric(object obj);
    internal static bool IsFixedPointNumeric(Type type);
    private static bool IsWithinDecimalRange(double value);
    public static bool AreEqual(object expected, object actual, Tolerance& tolerance);
    private static bool AreEqual(double expected, double actual, Tolerance& tolerance);
    private static bool AreEqual(float expected, float actual, Tolerance& tolerance);
    private static bool AreEqual(decimal expected, decimal actual, Tolerance tolerance);
    private static bool AreEqual(ulong expected, ulong actual, Tolerance tolerance);
    private static bool AreEqual(long expected, long actual, Tolerance tolerance);
    private static bool AreEqual(UInt32 expected, UInt32 actual, Tolerance tolerance);
    private static bool AreEqual(int expected, int actual, Tolerance tolerance);
    public static int Compare(object expected, object actual);
    [NullableContextAttribute("2")]
internal static object Difference(object expected, object actual, ToleranceMode toleranceMode);
    [NullableContextAttribute("2")]
private static object Difference(object expected, object actual, bool isAbsolute);
}
public class NUnit.Framework.Constraints.NUnitComparer : object {
    [NullableAttribute("1")]
public static NUnitComparer Default { get; }
    [NullableContextAttribute("1")]
public static NUnitComparer get_Default();
    [NullableContextAttribute("2")]
public sealed virtual int Compare(object x, object y);
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
internal static bool <Compare>g__IsIComparable|2_0(MethodInfo method);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class NUnit.Framework.Constraints.NUnitEqualityComparer : object {
    private static EqualMethod[] Comparers;
    private bool _caseInsensitive;
    private bool _ignoreWhiteSpace;
    private bool _compareAsCollection;
    private bool _compareProperties;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private List`1<EqualityAdapter> _externalComparers;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private List`1<FailurePoint> _failurePoints;
    [CompilerGeneratedAttribute]
private bool <WithSameOffset>k__BackingField;
    public bool IgnoreCase { get; public set; }
    public bool IgnoreWhiteSpace { get; public set; }
    public bool CompareProperties { get; public set; }
    public bool CompareAsCollection { get; public set; }
    public IList`1<EqualityAdapter> ExternalComparers { get; }
    public bool HasFailurePoints { get; }
    public IList`1<FailurePoint> FailurePoints { get; }
    public bool WithSameOffset { get; public set; }
    private static NUnitEqualityComparer();
    public bool get_IgnoreCase();
    public void set_IgnoreCase(bool value);
    public bool get_IgnoreWhiteSpace();
    public void set_IgnoreWhiteSpace(bool value);
    public bool get_CompareProperties();
    public void set_CompareProperties(bool value);
    public bool get_CompareAsCollection();
    public void set_CompareAsCollection(bool value);
    public IList`1<EqualityAdapter> get_ExternalComparers();
    public bool get_HasFailurePoints();
    public IList`1<FailurePoint> get_FailurePoints();
    [CompilerGeneratedAttribute]
public bool get_WithSameOffset();
    [CompilerGeneratedAttribute]
public void set_WithSameOffset(bool value);
    [NullableContextAttribute("2")]
public bool AreEqual(object x, object y, Tolerance& tolerance);
    [NullableContextAttribute("2")]
internal EqualMethodResult AreEqual(object x, object y, Tolerance& tolerance, ComparisonState state);
    private EqualityAdapter GetExternalComparer(object x, object y);
    [CompilerGeneratedAttribute]
internal static string <AreEqual>g__GetType|31_0(object x);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class NUnit.Framework.Constraints.OrConstraint : BinaryConstraint {
    public string Description { get; }
    public OrConstraint(IConstraint left, IConstraint right);
    public virtual string get_Description();
    public virtual ConstraintResult ApplyTo(TActual actual);
}
public class NUnit.Framework.Constraints.OrOperator : BinaryOperator {
    [NullableContextAttribute("1")]
public virtual IConstraint ApplyOperator(IConstraint left, IConstraint right);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public abstract class NUnit.Framework.Constraints.PathConstraint : StringConstraint {
    private static char WindowsDirectorySeparatorChar;
    private static char NonWindowsDirectorySeparatorChar;
    private static Char[] DirectorySeparatorChars;
    public PathConstraint RespectCase { get; }
    protected PathConstraint(string expected);
    private static PathConstraint();
    public PathConstraint get_RespectCase();
    protected virtual string GetStringRepresentation();
    protected string Canonicalize(string path);
    protected bool IsSubPath(string path1, string path2);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class NUnit.Framework.Constraints.PredicateConstraint`1 : Constraint {
    private Predicate`1<T> _predicate;
    public string Description { get; }
    public PredicateConstraint`1(Predicate`1<T> predicate);
    public virtual string get_Description();
    public virtual ConstraintResult ApplyTo(TActual actual);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public abstract class NUnit.Framework.Constraints.PrefixConstraint : Constraint {
    [CompilerGeneratedAttribute]
private IConstraint <BaseConstraint>k__BackingField;
    [CompilerGeneratedAttribute]
private string <DescriptionPrefix>k__BackingField;
    protected IConstraint BaseConstraint { get; }
    protected string DescriptionPrefix { get; }
    public string Description { get; }
    protected PrefixConstraint(IResolveConstraint baseConstraint, string descriptionPrefix);
    [CompilerGeneratedAttribute]
protected IConstraint get_BaseConstraint();
    [CompilerGeneratedAttribute]
protected string get_DescriptionPrefix();
    public virtual string get_Description();
    internal static string FormatDescription(string descriptionPrefix, IConstraint baseConstraint);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public abstract class NUnit.Framework.Constraints.PrefixOperator : ConstraintOperator {
    public virtual void Reduce(ConstraintStack stack);
    public abstract virtual IConstraint ApplyPrefix(IConstraint constraint);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class NUnit.Framework.Constraints.PropertyConstraint : PrefixConstraint {
    private string _name;
    [NullableAttribute("2")]
private object _propValue;
    public PropertyConstraint(string name, IConstraint baseConstraint);
    public virtual ConstraintResult ApplyTo(TActual actual);
    protected virtual string GetStringRepresentation();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class NUnit.Framework.Constraints.PropertyConstraintResult : ConstraintResult {
    private ConstraintResult _baseResult;
    public PropertyConstraintResult(IConstraint constraint, ConstraintResult baseResult);
    public virtual void WriteAdditionalLinesTo(MessageWriter writer);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class NUnit.Framework.Constraints.PropertyExistsConstraint : Constraint {
    private string _name;
    [NullableAttribute("2")]
private Type _actualType;
    public string Description { get; }
    public PropertyExistsConstraint(string name);
    public virtual string get_Description();
    public virtual ConstraintResult ApplyTo(TActual actual);
    protected virtual string GetStringRepresentation();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class NUnit.Framework.Constraints.PropOperator : SelfResolvingOperator {
    private string _name;
    public string Name { get; }
    public PropOperator(string name);
    public string get_Name();
    public virtual void Reduce(ConstraintStack stack);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class NUnit.Framework.Constraints.RangeConstraint : Constraint {
    private object _from;
    private object _to;
    private ComparisonAdapter _comparer;
    public string Description { get; }
    public RangeConstraint(object from, object to);
    public virtual string get_Description();
    public virtual ConstraintResult ApplyTo(TActual actual);
    public RangeConstraint Using(IComparer comparer);
    public RangeConstraint Using(IComparer`1<T> comparer);
    public RangeConstraint Using(Comparison`1<T> comparer);
    private void CompareFromAndTo();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class NUnit.Framework.Constraints.RegexConstraint : Constraint {
    private Regex _regex;
    public string Description { get; }
    public RegexConstraint IgnoreCase { get; }
    public RegexConstraint(string pattern);
    public RegexConstraint(Regex regex);
    public virtual string get_Description();
    public RegexConstraint get_IgnoreCase();
    public virtual ConstraintResult ApplyTo(TActual actual);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class NUnit.Framework.Constraints.ResolvableConstraintExpression : ConstraintExpression {
    public ConstraintExpression And { get; }
    public ConstraintExpression Or { get; }
    public ResolvableConstraintExpression(ConstraintBuilder builder);
    public ConstraintExpression get_And();
    public ConstraintExpression get_Or();
    private sealed virtual override IConstraint NUnit.Framework.Constraints.IResolveConstraint.Resolve();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class NUnit.Framework.Constraints.ReusableConstraint : object {
    private IConstraint _constraint;
    public ReusableConstraint(IResolveConstraint c);
    public static ReusableConstraint op_Implicit(Constraint c);
    public virtual string ToString();
    public sealed virtual IConstraint Resolve();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class NUnit.Framework.Constraints.SameAsConstraint : Constraint {
    [NullableAttribute("2")]
private object _expected;
    public string Description { get; }
    [NullableContextAttribute("2")]
public SameAsConstraint(object expected);
    public virtual string get_Description();
    public virtual ConstraintResult ApplyTo(TActual actual);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class NUnit.Framework.Constraints.SamePathConstraint : PathConstraint {
    public string Description { get; }
    public SamePathConstraint(string expected);
    public virtual string get_Description();
    [NullableContextAttribute("2")]
protected virtual bool Matches(string actual);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class NUnit.Framework.Constraints.SamePathOrUnderConstraint : PathConstraint {
    public string Description { get; }
    public SamePathOrUnderConstraint(string expected);
    public virtual string get_Description();
    [NullableContextAttribute("2")]
protected virtual bool Matches(string actual);
}
public abstract class NUnit.Framework.Constraints.SelfResolvingOperator : ConstraintOperator {
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class NUnit.Framework.Constraints.SomeItemsConstraint : PrefixConstraint {
    [NullableAttribute("2")]
private EqualConstraint _equalConstraint;
    public string DisplayName { get; }
    public SomeItemsConstraint(IConstraint itemConstraint);
    public virtual string get_DisplayName();
    public virtual ConstraintResult ApplyTo(TActual actual);
    public SomeItemsConstraint Using(Func`3<TActualCollectionElement, TExpected, bool> comparison);
    public SomeItemsConstraint Using(IComparer comparer);
    public SomeItemsConstraint Using(IComparer`1<T> comparer);
    public SomeItemsConstraint Using(Comparison`1<T> comparer);
    public SomeItemsConstraint Using(IEqualityComparer comparer);
    public SomeItemsConstraint Using(IEqualityComparer`1<T> comparer);
    public SomeItemsConstraint UsingPropertiesComparer();
    [MemberNotNullAttribute("_equalConstraint")]
private void CheckPrecondition(string argument);
}
public class NUnit.Framework.Constraints.SomeOperator : CollectionOperator {
    [NullableContextAttribute("1")]
public virtual IConstraint ApplyPrefix(IConstraint constraint);
}
public class NUnit.Framework.Constraints.StartsWithConstraint : StringConstraint {
    [NullableContextAttribute("1")]
public StartsWithConstraint(string expected);
    [NullableContextAttribute("2")]
protected virtual bool Matches(string actual);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public abstract class NUnit.Framework.Constraints.StringConstraint : Constraint {
    protected string expected;
    protected bool caseInsensitive;
    protected string descriptionText;
    public string Description { get; }
    public StringConstraint IgnoreCase { get; }
    protected StringConstraint(string expected);
    public virtual string get_Description();
    public virtual StringConstraint get_IgnoreCase();
    public virtual ConstraintResult ApplyTo(TActual actual);
    [NullableContextAttribute("2")]
protected abstract virtual bool Matches(string actual);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class NUnit.Framework.Constraints.SubPathConstraint : PathConstraint {
    public string Description { get; }
    public SubPathConstraint(string expected);
    public virtual string get_Description();
    [NullableContextAttribute("2")]
protected virtual bool Matches(string actual);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class NUnit.Framework.Constraints.SubstringConstraint : StringConstraint {
    private Nullable`1<StringComparison> _comparisonType;
    public StringConstraint IgnoreCase { get; }
    public SubstringConstraint(string expected);
    public virtual StringConstraint get_IgnoreCase();
    [NullableContextAttribute("2")]
protected virtual bool Matches(string actual);
    public SubstringConstraint Using(StringComparison comparisonType);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class NUnit.Framework.Constraints.ThrowsConstraint : PrefixConstraint {
    [NullableAttribute("2")]
private Exception _caughtException;
    [NullableAttribute("2")]
public Exception ActualException { get; }
    public string Description { get; }
    public ThrowsConstraint(IConstraint baseConstraint);
    [NullableContextAttribute("2")]
public Exception get_ActualException();
    public virtual string get_Description();
    public virtual ConstraintResult ApplyTo(TActual actual);
    public virtual ConstraintResult ApplyTo(ActualValueDelegate`1<TActual> del);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class NUnit.Framework.Constraints.ThrowsExceptionConstraint : Constraint {
    public string Description { get; }
    public virtual string get_Description();
    public virtual ConstraintResult ApplyTo(TActual actual);
    public virtual ConstraintResult ApplyTo(ActualValueDelegate`1<TActual> del);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class NUnit.Framework.Constraints.ThrowsNothingConstraint : Constraint {
    public string Description { get; }
    public virtual string get_Description();
    public virtual ConstraintResult ApplyTo(TActual actual);
    public virtual ConstraintResult ApplyTo(ActualValueDelegate`1<TActual> del);
}
public class NUnit.Framework.Constraints.ThrowsOperator : SelfResolvingOperator {
    [NullableContextAttribute("1")]
public virtual void Reduce(ConstraintStack stack);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class NUnit.Framework.Constraints.Tolerance : object {
    private static string ModeMustFollowTolerance;
    private static string MultipleToleranceModes;
    private static string NumericToleranceRequired;
    public static Tolerance Default;
    public static Tolerance Exact;
    [CompilerGeneratedAttribute]
private ToleranceMode <Mode>k__BackingField;
    [CompilerGeneratedAttribute]
private object <Amount>k__BackingField;
    public Tolerance Percent { get; }
    public Tolerance Ulps { get; }
    public Tolerance Days { get; }
    public Tolerance Hours { get; }
    public Tolerance Minutes { get; }
    public Tolerance Seconds { get; }
    public Tolerance Milliseconds { get; }
    public Tolerance Ticks { get; }
    public ToleranceMode Mode { get; }
    public object Amount { get; }
    public bool IsUnsetOrDefault { get; }
    public bool HasVariance { get; }
    public Tolerance(object amount);
    private Tolerance(object amount, ToleranceMode mode);
    private static Tolerance();
    public Tolerance get_Percent();
    public Tolerance get_Ulps();
    public Tolerance get_Days();
    public Tolerance get_Hours();
    public Tolerance get_Minutes();
    public Tolerance get_Seconds();
    public Tolerance get_Milliseconds();
    public Tolerance get_Ticks();
    [CompilerGeneratedAttribute]
public ToleranceMode get_Mode();
    [CompilerGeneratedAttribute]
public object get_Amount();
    public bool get_IsUnsetOrDefault();
    public bool get_HasVariance();
    public Range ApplyToValue(object value);
    private void CheckLinearAndNumeric();
    private Range LinearRange(object value);
    private Range PercentRange(object value);
    [NullableContextAttribute("2")]
public virtual string ToString();
}
public enum NUnit.Framework.Constraints.ToleranceMode : Enum {
    public int value__;
    public static ToleranceMode Unset;
    public static ToleranceMode Linear;
    public static ToleranceMode Percent;
    public static ToleranceMode Ulps;
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class NUnit.Framework.Constraints.TrueConstraint : Constraint {
    public string Description { get; }
    public virtual string get_Description();
    public virtual ConstraintResult ApplyTo(TActual actual);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public abstract class NUnit.Framework.Constraints.TypeConstraint : Constraint {
    protected Type expectedType;
    [NullableAttribute("2")]
protected Type actualType;
    [CompilerGeneratedAttribute]
private string <Description>k__BackingField;
    public string Description { get; }
    protected TypeConstraint(Type type, string descriptionPrefix);
    [CompilerGeneratedAttribute]
public virtual string get_Description();
    public virtual ConstraintResult ApplyTo(TActual actual);
    [NullableContextAttribute("2")]
protected abstract virtual bool Matches(object actual);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class NUnit.Framework.Constraints.UniqueItemsConstraint : CollectionItemsEqualConstraint {
    private static MethodInfo ItemsUniqueMethod;
    private static MethodInfo ItemsCastMethod;
    public string Description { get; }
    private static UniqueItemsConstraint();
    public virtual string get_Description();
    protected virtual bool Matches(IEnumerable actual);
    public virtual ConstraintResult ApplyTo(TActual actual);
    private ICollection OriginalAlgorithm(IEnumerable actual);
    private ICollection TryInferFastPath(IEnumerable actual);
    private static bool IsSpecialComparisonType(Type type);
    private ICollection GetNonUniqueItems(IEnumerable actual);
    [NullableContextAttribute("2")]
private static bool IsTypeSafeForFastPath(Type type);
    private static ICollection`1<T> ItemsUnique(IEnumerable`1<T> actual);
    private ICollection`1<string> StringsUniqueIgnoringCaseOrWhiteSpace(IEnumerable`1<string> actual);
    private ICollection`1<char> CharsUniqueIgnoringCase(IEnumerable`1<char> actual);
    private static ICollection`1<T> NonUniqueItemsInternal(IEnumerable`1<T> actual, IEqualityComparer`1<T> comparer);
    private static bool IsHandledSpeciallyByNUnit(Type type);
    private static Type GetGenericTypeArgument(IEnumerable actual);
}
public class NUnit.Framework.Constraints.ValueFormatter : MulticastDelegate {
    public ValueFormatter(object object, IntPtr method);
    [NullableContextAttribute("1")]
public virtual string Invoke(object val);
    public virtual IAsyncResult BeginInvoke(object val, AsyncCallback callback, object object);
    public virtual string EndInvoke(IAsyncResult result);
}
public class NUnit.Framework.Constraints.ValueFormatterFactory : MulticastDelegate {
    public ValueFormatterFactory(object object, IntPtr method);
    [NullableContextAttribute("1")]
public virtual ValueFormatter Invoke(ValueFormatter next);
    public virtual IAsyncResult BeginInvoke(ValueFormatter next, AsyncCallback callback, object object);
    public virtual ValueFormatter EndInvoke(IAsyncResult result);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class NUnit.Framework.Constraints.WhiteSpaceConstraint : StringConstraint {
    private static string WhiteSpace;
    public string Description { get; }
    public string DisplayName { get; }
    public virtual string get_Description();
    public virtual string get_DisplayName();
    [NullableContextAttribute("2")]
protected virtual bool Matches(string actual);
}
public class NUnit.Framework.Constraints.WithOperator : PrefixOperator {
    [NullableContextAttribute("1")]
public virtual IConstraint ApplyPrefix(IConstraint constraint);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class NUnit.Framework.Constraints.XmlSerializableConstraint : Constraint {
    public string Description { get; }
    public virtual string get_Description();
    public virtual ConstraintResult ApplyTo(TActual actual);
    protected virtual string GetStringRepresentation();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public abstract class NUnit.Framework.Contains : object {
    public static SomeItemsConstraint Item(object expected);
    public static DictionaryContainsKeyConstraint Key(object expected);
    public static DictionaryContainsValueConstraint Value(object expected);
    public static SubstringConstraint Substring(string expected);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[AttributeUsageAttribute("69")]
public class NUnit.Framework.CultureAttribute : IncludeExcludeAttribute {
    private CultureDetector _cultureDetector;
    private CultureInfo _currentCulture;
    [NullableContextAttribute("2")]
public CultureAttribute(string cultures);
    public sealed virtual void ApplyToTest(Test test);
    [NullableContextAttribute("2")]
private bool IsCultureSupported(String& reason);
    public bool IsCultureSupported(string culture);
    public bool IsCultureSupported(String[] cultures);
}
[AttributeUsageAttribute("256")]
public class NUnit.Framework.DatapointAttribute : NUnitAttribute {
}
[AttributeUsageAttribute("448")]
public class NUnit.Framework.DatapointsAttribute : DatapointSourceAttribute {
}
[AttributeUsageAttribute("448")]
public class NUnit.Framework.DatapointSourceAttribute : NUnitAttribute {
}
[AttributeUsageAttribute("69")]
public class NUnit.Framework.DefaultFloatingPointToleranceAttribute : NUnitAttribute {
    [NullableAttribute("1")]
private Tolerance _tolerance;
    public DefaultFloatingPointToleranceAttribute(double amount);
    [NullableContextAttribute("1")]
public sealed virtual void ApplyToContext(TestExecutionContext context);
}
[AttributeUsageAttribute("69")]
public class NUnit.Framework.DescriptionAttribute : PropertyAttribute {
    [NullableContextAttribute("1")]
public DescriptionAttribute(string description);
}
public class NUnit.Framework.Diagnostics.ProgressTraceListener : TextWriterTraceListener {
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public abstract class NUnit.Framework.Does : object {
    public static ConstraintExpression Not { get; }
    public static FileOrDirectoryExistsConstraint Exist { get; }
    public static ConstraintExpression get_Not();
    public static FileOrDirectoryExistsConstraint get_Exist();
    public static SomeItemsConstraint Contain(object expected);
    public static ContainsConstraint Contain(string expected);
    public static DictionaryContainsKeyConstraint ContainKey(object expected);
    public static DictionaryContainsValueConstraint ContainValue(object expected);
    public static StartsWithConstraint StartWith(string expected);
    public static EndsWithConstraint EndWith(string expected);
    public static RegexConstraint Match(string pattern);
    public static RegexConstraint Match(Regex regex);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ExtensionAttribute]
internal static class NUnit.Framework.ExceptionExtensions : object {
    [ExtensionAttribute]
public static string GetStackTraceWithoutThrowing(Exception exception);
    [ExtensionAttribute]
public static string GetMessageWithoutThrowing(Exception exception);
    [ExtensionAttribute]
public static Result`1<IDictionary> GetDataWithoutThrowing(Exception exception);
}
[AttributeUsageAttribute("69")]
public class NUnit.Framework.ExplicitAttribute : NUnitAttribute {
    [NullableAttribute("2")]
private string _reason;
    [NullableContextAttribute("2")]
public ExplicitAttribute(string reason);
    [NullableContextAttribute("1")]
public sealed virtual void ApplyToTest(Test test);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ExtensionAttribute]
internal static class NUnit.Framework.Extensions : object {
    [ExtensionAttribute]
public static bool IsStatic(Type type);
    [ExtensionAttribute]
public static bool HasAttribute(ICustomAttributeProvider attributeProvider, bool inherit);
    [ExtensionAttribute]
public static bool HasAttribute(Type type, bool inherit);
    [ExtensionAttribute]
public static T[] GetAttributes(ICustomAttributeProvider attributeProvider, bool inherit);
    [ExtensionAttribute]
public static T[] GetAttributes(Assembly assembly);
    [ExtensionAttribute]
public static T[] GetAttributes(Type type, bool inherit);
    [IteratorStateMachineAttribute("NUnit.Framework.Extensions/<Skip>d__6")]
[ExtensionAttribute]
public static IEnumerable Skip(IEnumerable enumerable, long skip);
}
[AttributeUsageAttribute("5")]
public class NUnit.Framework.FixtureLifeCycleAttribute : NUnitAttribute {
    [CompilerGeneratedAttribute]
private LifeCycle <LifeCycle>k__BackingField;
    public LifeCycle LifeCycle { get; }
    public FixtureLifeCycleAttribute(LifeCycle lifeCycle);
    [CompilerGeneratedAttribute]
public LifeCycle get_LifeCycle();
    [NullableContextAttribute("1")]
public sealed virtual void ApplyToTest(Test test);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal static class NUnit.Framework.Guard : object {
    public static void ArgumentNotNull(object value, string name);
    public static void ArgumentNotNullOrEmpty(string value, string name);
    public static void ArgumentInRange(bool condition, string message, string paramName);
    public static void ArgumentValid(bool condition, string message, string paramName);
    public static void OperationValid(bool condition, string message);
    public static void ArgumentNotAsyncVoid(Delegate delegate, string paramName);
    public static void ArgumentNotAsyncVoid(MethodInfo method, string paramName);
    [CompilerGeneratedAttribute]
[DoesNotReturnAttribute]
internal static void <ArgumentNotNull>g__ThrowArgumentNullException|0_0(string name);
    [CompilerGeneratedAttribute]
[DoesNotReturnAttribute]
internal static void <ArgumentNotNullOrEmpty>g__ThrowArgumentNotNullOrEmpty|1_0(string name);
    [CompilerGeneratedAttribute]
[DoesNotReturnAttribute]
internal static void <ArgumentInRange>g__ThrowArgumentOutOfRangeException|2_0(string message, string paramName);
    [CompilerGeneratedAttribute]
[DoesNotReturnAttribute]
internal static void <ArgumentValid>g__ThrowArgumentException|3_0(string message, string paramName);
    [CompilerGeneratedAttribute]
[DoesNotReturnAttribute]
internal static void <OperationValid>g__ThrowInvalidOperationException|4_0(string message);
    [CompilerGeneratedAttribute]
[DoesNotReturnAttribute]
internal static void <ArgumentNotAsyncVoid>g__ThrowArgumentNotAsyncVoid|6_0(string paramName);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public abstract class NUnit.Framework.Has : object {
    public static ConstraintExpression No { get; }
    public static ConstraintExpression All { get; }
    public static ConstraintExpression Some { get; }
    public static ConstraintExpression None { get; }
    public static ItemsConstraintExpression One { get; }
    public static ResolvableConstraintExpression Length { get; }
    public static ResolvableConstraintExpression Count { get; }
    public static ResolvableConstraintExpression Message { get; }
    public static ResolvableConstraintExpression InnerException { get; }
    public static ConstraintExpression get_No();
    public static ConstraintExpression get_All();
    public static ConstraintExpression get_Some();
    public static ConstraintExpression get_None();
    public static ItemsConstraintExpression Exactly(int expectedCount);
    public static ItemsConstraintExpression get_One();
    public static ResolvableConstraintExpression Property(string name);
    public static ResolvableConstraintExpression get_Length();
    public static ResolvableConstraintExpression get_Count();
    public static ResolvableConstraintExpression get_Message();
    public static ResolvableConstraintExpression get_InnerException();
    public static ResolvableConstraintExpression Attribute(Type expectedType);
    public static ResolvableConstraintExpression Attribute();
    public static SomeItemsConstraint Member(object expected);
    public static ConstraintExpression ItemAt(Object[] indexArgs);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[AttributeUsageAttribute("69")]
public class NUnit.Framework.IgnoreAttribute : NUnitAttribute {
    private Nullable`1<DateTime> _untilDate;
    [NullableAttribute("2")]
private string _until;
    [CompilerGeneratedAttribute]
private string <Reason>k__BackingField;
    public string Reason { get; }
    [NullableAttribute("2")]
[StringSyntaxAttribute("DateTimeFormat")]
public string Until { get; public set; }
    public IgnoreAttribute(string reason);
    [CompilerGeneratedAttribute]
public string get_Reason();
    [NullableContextAttribute("2")]
public string get_Until();
    [NullableContextAttribute("2")]
public void set_Until(string value);
    public sealed virtual void ApplyToTest(Test test);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[EditorBrowsableAttribute("1")]
public class NUnit.Framework.IgnoredTestCaseData : TestCaseData {
    private RunState _prevRunState;
    internal IgnoredTestCaseData(TestCaseData data, RunState prevRunState);
    public TestCaseData Until(DateTimeOffset datetime);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class NUnit.Framework.IgnoreException : ResultStateException {
    public ResultState ResultState { get; }
    public IgnoreException(string message);
    public IgnoreException(string message, Exception inner);
    protected IgnoreException(SerializationInfo info, StreamingContext context);
    public virtual ResultState get_ResultState();
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
public abstract class NUnit.Framework.IncludeExcludeAttribute : NUnitAttribute {
    private string _include;
    private string _exclude;
    private string _reason;
    public string Include { get; public set; }
    public string Exclude { get; public set; }
    public string Reason { get; public set; }
    public IncludeExcludeAttribute(string include);
    public string get_Include();
    public void set_Include(string value);
    public string get_Exclude();
    public void set_Exclude(string value);
    public string get_Reason();
    public void set_Reason(string value);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class NUnit.Framework.InconclusiveException : ResultStateException {
    public ResultState ResultState { get; }
    public InconclusiveException(string message);
    public InconclusiveException(string message, Exception inner);
    protected InconclusiveException(SerializationInfo info, StreamingContext context);
    public virtual ResultState get_ResultState();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class NUnit.Framework.Interfaces.AssertionResult : object {
    [CompilerGeneratedAttribute]
private AssertionStatus <Status>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Message>k__BackingField;
    [NullableAttribute("2")]
[CompilerGeneratedAttribute]
private string <StackTrace>k__BackingField;
    public AssertionStatus Status { get; }
    public string Message { get; }
    [NullableAttribute("2")]
public string StackTrace { get; }
    public AssertionResult(AssertionStatus status, string message, string stackTrace);
    [CompilerGeneratedAttribute]
public AssertionStatus get_Status();
    [CompilerGeneratedAttribute]
public string get_Message();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public string get_StackTrace();
    [NullableContextAttribute("2")]
public virtual bool Equals(object obj);
    [NullableContextAttribute("2")]
public sealed virtual bool Equals(AssertionResult other);
    public virtual int GetHashCode();
    public virtual string ToString();
}
public enum NUnit.Framework.Interfaces.AssertionStatus : Enum {
    public int value__;
    public static AssertionStatus Inconclusive;
    public static AssertionStatus Passed;
    public static AssertionStatus Warning;
    public static AssertionStatus Failed;
    public static AssertionStatus Error;
}
public enum NUnit.Framework.Interfaces.FailureSite : Enum {
    public int value__;
    public static FailureSite Test;
    public static FailureSite SetUp;
    public static FailureSite TearDown;
    public static FailureSite Parent;
    public static FailureSite Child;
}
[NullableContextAttribute("1")]
public interface NUnit.Framework.Interfaces.IApplyToContext {
    public abstract virtual void ApplyToContext(TestExecutionContext context);
}
[NullableContextAttribute("1")]
public interface NUnit.Framework.Interfaces.IApplyToTest {
    public abstract virtual void ApplyToTest(Test test);
}
[NullableContextAttribute("1")]
public interface NUnit.Framework.Interfaces.IApplyToTestSuite {
    public abstract virtual void ApplyToTestSuite(TestSuite testSuite);
}
[NullableContextAttribute("1")]
public interface NUnit.Framework.Interfaces.ICombiningStrategy {
    public abstract virtual IEnumerable`1<ITestCaseData> GetTestCases(IEnumerable[] sources);
}
[NullableContextAttribute("1")]
public interface NUnit.Framework.Interfaces.ICommandWrapper {
    public abstract virtual TestCommand Wrap(TestCommand command);
}
internal interface NUnit.Framework.Interfaces.IDisposableFixture {
}
[NullableContextAttribute("1")]
public interface NUnit.Framework.Interfaces.IFixtureBuilder {
    public abstract virtual IEnumerable`1<TestSuite> BuildFrom(ITypeInfo typeInfo);
}
public interface NUnit.Framework.Interfaces.IFixtureBuilder2 {
    [NullableContextAttribute("1")]
public abstract virtual IEnumerable`1<TestSuite> BuildFrom(ITypeInfo typeInfo, IPreFilter filter);
}
public interface NUnit.Framework.Interfaces.IImplyFixture {
}
[NullableContextAttribute("1")]
public interface NUnit.Framework.Interfaces.IMethodInfo {
    public ITypeInfo TypeInfo { get; }
    public MethodInfo MethodInfo { get; }
    public string Name { get; }
    public bool IsAbstract { get; }
    public bool IsPublic { get; }
    public bool IsStatic { get; }
    public bool ContainsGenericParameters { get; }
    public bool IsGenericMethod { get; }
    public bool IsGenericMethodDefinition { get; }
    public ITypeInfo ReturnType { get; }
    public abstract virtual ITypeInfo get_TypeInfo();
    public abstract virtual MethodInfo get_MethodInfo();
    public abstract virtual string get_Name();
    public abstract virtual bool get_IsAbstract();
    public abstract virtual bool get_IsPublic();
    public abstract virtual bool get_IsStatic();
    public abstract virtual bool get_ContainsGenericParameters();
    public abstract virtual bool get_IsGenericMethod();
    public abstract virtual bool get_IsGenericMethodDefinition();
    public abstract virtual ITypeInfo get_ReturnType();
    public abstract virtual IParameterInfo[] GetParameters();
    public abstract virtual Type[] GetGenericArguments();
    public abstract virtual IMethodInfo MakeGenericMethod(Type[] typeArguments);
    [NullableContextAttribute("2")]
public abstract virtual object Invoke(object fixture, Object[] args);
}
[NullableContextAttribute("1")]
public interface NUnit.Framework.Interfaces.IParameterDataProvider {
    public abstract virtual bool HasDataFor(IParameterInfo parameter);
    public abstract virtual IEnumerable GetDataFor(IParameterInfo parameter);
}
[NullableContextAttribute("1")]
public interface NUnit.Framework.Interfaces.IParameterDataSource {
    public abstract virtual IEnumerable GetData(IParameterInfo parameter);
}
[NullableContextAttribute("1")]
public interface NUnit.Framework.Interfaces.IParameterInfo {
    public bool IsOptional { get; }
    public IMethodInfo Method { get; }
    public ParameterInfo ParameterInfo { get; }
    public Type ParameterType { get; }
    public abstract virtual bool get_IsOptional();
    public abstract virtual IMethodInfo get_Method();
    public abstract virtual ParameterInfo get_ParameterInfo();
    public abstract virtual Type get_ParameterType();
}
[NullableContextAttribute("1")]
public interface NUnit.Framework.Interfaces.IPreFilter {
    public abstract virtual bool IsMatch(Type type);
    public abstract virtual bool IsMatch(Type type, MethodInfo method);
}
[NullableContextAttribute("1")]
[DefaultMemberAttribute("Item")]
public interface NUnit.Framework.Interfaces.IPropertyBag {
    public IList Item { get; public set; }
    public ICollection`1<string> Keys { get; }
    public abstract virtual void Add(string key, object value);
    public abstract virtual void Set(string key, object value);
    public abstract virtual object Get(string key);
    public abstract virtual bool ContainsKey(string key);
    public abstract virtual bool TryGet(string key, IList& values);
    public abstract virtual IList get_Item(string key);
    public abstract virtual void set_Item(string key, IList value);
    public abstract virtual ICollection`1<string> get_Keys();
}
[NullableContextAttribute("1")]
public interface NUnit.Framework.Interfaces.IReflectionInfo {
    public abstract virtual T[] GetCustomAttributes(bool inherit);
    public abstract virtual bool IsDefined(bool inherit);
}
public interface NUnit.Framework.Interfaces.IRepeatTest {
}
[NullableContextAttribute("1")]
public interface NUnit.Framework.Interfaces.ISimpleTestBuilder {
    public abstract virtual TestMethod BuildFrom(IMethodInfo method, Test suite);
}
[NullableContextAttribute("1")]
public interface NUnit.Framework.Interfaces.ISuiteBuilder {
    public abstract virtual bool CanBuildFrom(ITypeInfo typeInfo);
    public abstract virtual TestSuite BuildFrom(ITypeInfo typeInfo);
    public abstract virtual TestSuite BuildFrom(ITypeInfo typeInfo, IPreFilter filter);
}
[NullableContextAttribute("1")]
public interface NUnit.Framework.Interfaces.ITest {
    public string Id { get; }
    public string Name { get; }
    public string TestType { get; }
    public string FullName { get; }
    [NullableAttribute("2")]
public string ClassName { get; }
    [NullableAttribute("2")]
public string MethodName { get; }
    [NullableAttribute("2")]
public ITypeInfo TypeInfo { get; }
    [NullableAttribute("2")]
public IMethodInfo Method { get; }
    public RunState RunState { get; }
    public int TestCaseCount { get; }
    public IPropertyBag Properties { get; }
    [NullableAttribute("2")]
public ITest Parent { get; }
    public bool IsSuite { get; }
    public bool HasChildren { get; }
    public IList`1<ITest> Tests { get; }
    [NullableAttribute("2")]
public object Fixture { get; }
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public Object[] Arguments { get; }
    public abstract virtual string get_Id();
    public abstract virtual string get_Name();
    public abstract virtual string get_TestType();
    public abstract virtual string get_FullName();
    [NullableContextAttribute("2")]
public abstract virtual string get_ClassName();
    [NullableContextAttribute("2")]
public abstract virtual string get_MethodName();
    [NullableContextAttribute("2")]
public abstract virtual ITypeInfo get_TypeInfo();
    [NullableContextAttribute("2")]
public abstract virtual IMethodInfo get_Method();
    public abstract virtual RunState get_RunState();
    public abstract virtual int get_TestCaseCount();
    public abstract virtual IPropertyBag get_Properties();
    [NullableContextAttribute("2")]
public abstract virtual ITest get_Parent();
    public abstract virtual bool get_IsSuite();
    public abstract virtual bool get_HasChildren();
    public abstract virtual IList`1<ITest> get_Tests();
    [NullableContextAttribute("2")]
public abstract virtual object get_Fixture();
    public abstract virtual Object[] get_Arguments();
}
[NullableContextAttribute("1")]
public interface NUnit.Framework.Interfaces.ITestBuilder {
    public abstract virtual IEnumerable`1<TestMethod> BuildFrom(IMethodInfo method, Test suite);
}
[NullableContextAttribute("1")]
public interface NUnit.Framework.Interfaces.ITestCaseBuilder {
    public abstract virtual bool CanBuildFrom(IMethodInfo method, Test suite);
    [NullableContextAttribute("2")]
public abstract virtual Test BuildFrom(IMethodInfo method, Test suite);
}
[NullableContextAttribute("2")]
public interface NUnit.Framework.Interfaces.ITestCaseData {
    public object ExpectedResult { get; }
    public bool HasExpectedResult { get; }
    public abstract virtual object get_ExpectedResult();
    public abstract virtual bool get_HasExpectedResult();
}
[NullableContextAttribute("1")]
public interface NUnit.Framework.Interfaces.ITestData {
    [NullableAttribute("2")]
public string TestName { get; }
    public RunState RunState { get; }
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public Object[] Arguments { get; }
    public IPropertyBag Properties { get; }
    [NullableContextAttribute("2")]
public abstract virtual string get_TestName();
    public abstract virtual RunState get_RunState();
    public abstract virtual Object[] get_Arguments();
    public abstract virtual IPropertyBag get_Properties();
}
[NullableContextAttribute("1")]
public interface NUnit.Framework.Interfaces.ITestFilter {
    public abstract virtual bool Pass(ITest test);
    public abstract virtual bool IsExplicitMatch(ITest test);
}
public interface NUnit.Framework.Interfaces.ITestFixtureData {
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public Type[] TypeArgs { get; }
    public abstract virtual Type[] get_TypeArgs();
}
[NullableContextAttribute("1")]
public interface NUnit.Framework.Interfaces.ITestListener {
    public abstract virtual void TestStarted(ITest test);
    public abstract virtual void TestFinished(ITestResult result);
    public abstract virtual void TestOutput(TestOutput output);
    public abstract virtual void SendMessage(TestMessage message);
}
[NullableContextAttribute("1")]
public interface NUnit.Framework.Interfaces.ITestResult {
    public ResultState ResultState { get; }
    public string Name { get; }
    public string FullName { get; }
    public double Duration { get; }
    public DateTime StartTime { get; }
    public DateTime EndTime { get; }
    public string Message { get; }
    [NullableAttribute("2")]
public string StackTrace { get; }
    public int TotalCount { get; }
    public int AssertCount { get; }
    public int FailCount { get; }
    public int WarningCount { get; }
    public int PassCount { get; }
    public int SkipCount { get; }
    public int InconclusiveCount { get; }
    public bool HasChildren { get; }
    public IEnumerable`1<ITestResult> Children { get; }
    public ITest Test { get; }
    public string Output { get; }
    public IList`1<AssertionResult> AssertionResults { get; }
    public ICollection`1<TestAttachment> TestAttachments { get; }
    public abstract virtual ResultState get_ResultState();
    public abstract virtual string get_Name();
    public abstract virtual string get_FullName();
    public abstract virtual double get_Duration();
    public abstract virtual DateTime get_StartTime();
    public abstract virtual DateTime get_EndTime();
    public abstract virtual string get_Message();
    [NullableContextAttribute("2")]
public abstract virtual string get_StackTrace();
    public abstract virtual int get_TotalCount();
    public abstract virtual int get_AssertCount();
    public abstract virtual int get_FailCount();
    public abstract virtual int get_WarningCount();
    public abstract virtual int get_PassCount();
    public abstract virtual int get_SkipCount();
    public abstract virtual int get_InconclusiveCount();
    public abstract virtual bool get_HasChildren();
    public abstract virtual IEnumerable`1<ITestResult> get_Children();
    public abstract virtual ITest get_Test();
    public abstract virtual string get_Output();
    public abstract virtual IList`1<AssertionResult> get_AssertionResults();
    public abstract virtual ICollection`1<TestAttachment> get_TestAttachments();
}
[NullableContextAttribute("1")]
public interface NUnit.Framework.Interfaces.ITypeInfo {
    public Type Type { get; }
    [NullableAttribute("2")]
public ITypeInfo BaseType { get; }
    public string Name { get; }
    public string FullName { get; }
    public Assembly Assembly { get; }
    [NullableAttribute("2")]
public string Namespace { get; }
    public bool IsAbstract { get; }
    public bool IsGenericType { get; }
    public bool ContainsGenericParameters { get; }
    public bool IsGenericTypeDefinition { get; }
    public bool IsSealed { get; }
    public bool IsStaticClass { get; }
    public abstract virtual Type get_Type();
    [NullableContextAttribute("2")]
public abstract virtual ITypeInfo get_BaseType();
    public abstract virtual bool IsType(Type type);
    public abstract virtual string get_Name();
    public abstract virtual string get_FullName();
    public abstract virtual Assembly get_Assembly();
    [NullableContextAttribute("2")]
public abstract virtual string get_Namespace();
    public abstract virtual bool get_IsAbstract();
    public abstract virtual bool get_IsGenericType();
    public abstract virtual bool get_ContainsGenericParameters();
    public abstract virtual bool get_IsGenericTypeDefinition();
    public abstract virtual bool get_IsSealed();
    public abstract virtual bool get_IsStaticClass();
    public abstract virtual string GetDisplayName();
    public abstract virtual string GetDisplayName(Object[] args);
    public abstract virtual Type GetGenericTypeDefinition();
    public abstract virtual ITypeInfo MakeGenericType(Type[] typeArgs);
    public abstract virtual bool HasMethodWithAttribute(Type attrType);
    public abstract virtual IMethodInfo[] GetMethods(BindingFlags flags);
    public abstract virtual ConstructorInfo GetConstructor(Type[] argTypes);
    public abstract virtual bool HasConstructor(Type[] argTypes);
    public abstract virtual object Construct(Object[] args);
    public abstract virtual IMethodInfo[] GetMethodsWithAttribute(bool inherit);
}
public interface NUnit.Framework.Interfaces.IWrapSetUpTearDown {
}
public interface NUnit.Framework.Interfaces.IWrapTestMethod {
}
[NullableContextAttribute("1")]
public interface NUnit.Framework.Interfaces.IXmlNodeBuilder {
    public abstract virtual TNode ToXml(bool recursive);
    public abstract virtual TNode AddToXml(TNode parentNode, bool recursive);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class NUnit.Framework.Interfaces.ResultState : object {
    public static ResultState Inconclusive;
    public static ResultState Skipped;
    public static ResultState Ignored;
    public static ResultState Explicit;
    public static ResultState Success;
    public static ResultState Warning;
    public static ResultState Failure;
    public static ResultState Error;
    public static ResultState Cancelled;
    public static ResultState NotRunnable;
    public static ResultState ChildFailure;
    public static ResultState ChildWarning;
    public static ResultState ChildIgnored;
    public static ResultState SetUpFailure;
    public static ResultState SetUpError;
    public static ResultState TearDownError;
    [CompilerGeneratedAttribute]
private TestStatus <Status>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Label>k__BackingField;
    [CompilerGeneratedAttribute]
private FailureSite <Site>k__BackingField;
    public TestStatus Status { get; }
    public string Label { get; }
    public FailureSite Site { get; }
    public ResultState(TestStatus status);
    [NullableContextAttribute("2")]
public ResultState(TestStatus status, string label);
    public ResultState(TestStatus status, FailureSite site);
    [NullableContextAttribute("2")]
public ResultState(TestStatus status, string label, FailureSite site);
    private static ResultState();
    [CompilerGeneratedAttribute]
public TestStatus get_Status();
    [CompilerGeneratedAttribute]
public string get_Label();
    [CompilerGeneratedAttribute]
public FailureSite get_Site();
    public ResultState WithSite(FailureSite site);
    public bool Matches(ResultState other);
    [NullableContextAttribute("2")]
public virtual bool Equals(object obj);
    [NullableContextAttribute("2")]
public sealed virtual bool Equals(ResultState other);
    public virtual int GetHashCode();
    [NullableContextAttribute("2")]
public static bool op_Equality(ResultState left, ResultState right);
    [NullableContextAttribute("2")]
public static bool op_Inequality(ResultState left, ResultState right);
    public virtual string ToString();
}
public enum NUnit.Framework.Interfaces.RunState : Enum {
    public int value__;
    public static RunState NotRunnable;
    public static RunState Runnable;
    public static RunState Explicit;
    public static RunState Skipped;
    public static RunState Ignored;
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class NUnit.Framework.Interfaces.TestAttachment : object {
    [CompilerGeneratedAttribute]
private string <FilePath>k__BackingField;
    [NullableAttribute("2")]
[CompilerGeneratedAttribute]
private string <Description>k__BackingField;
    public string FilePath { get; }
    [NullableAttribute("2")]
public string Description { get; }
    public TestAttachment(string filePath, string description);
    [CompilerGeneratedAttribute]
public string get_FilePath();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public string get_Description();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[DebuggerDisplayAttribute("{ToString(),nq}")]
public class NUnit.Framework.Interfaces.TestMessage : object {
    [CompilerGeneratedAttribute]
private string <Message>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Destination>k__BackingField;
    [NullableAttribute("2")]
[CompilerGeneratedAttribute]
private string <TestId>k__BackingField;
    public string Message { get; }
    public string Destination { get; }
    [NullableAttribute("2")]
public string TestId { get; }
    public TestMessage(string destination, string text, string testId);
    public virtual string ToString();
    [CompilerGeneratedAttribute]
public string get_Message();
    [CompilerGeneratedAttribute]
public string get_Destination();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public string get_TestId();
    public string ToXml();
    internal void ToXml(XmlWriter writer);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class NUnit.Framework.Interfaces.TestOutput : object {
    [CompilerGeneratedAttribute]
private string <Text>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Stream>k__BackingField;
    [NullableAttribute("2")]
[CompilerGeneratedAttribute]
private string <TestName>k__BackingField;
    [NullableAttribute("2")]
[CompilerGeneratedAttribute]
private string <TestId>k__BackingField;
    public string Text { get; }
    public string Stream { get; }
    [NullableAttribute("2")]
public string TestName { get; }
    [NullableAttribute("2")]
public string TestId { get; }
    public TestOutput(string text, string stream, string testId, string testName);
    public virtual string ToString();
    [CompilerGeneratedAttribute]
public string get_Text();
    [CompilerGeneratedAttribute]
public string get_Stream();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public string get_TestName();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public string get_TestId();
    public string ToXml();
    internal void ToXml(XmlWriter writer);
}
public enum NUnit.Framework.Interfaces.TestStatus : Enum {
    public int value__;
    public static TestStatus Inconclusive;
    public static TestStatus Skipped;
    public static TestStatus Passed;
    public static TestStatus Warning;
    public static TestStatus Failed;
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[DebuggerDisplayAttribute("{OuterXml}")]
public class NUnit.Framework.Interfaces.TNode : object {
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private List`1<TNode> _childNodes;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private Dictionary`2<string, string> _attributes;
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    [NullableAttribute("2")]
[CompilerGeneratedAttribute]
private string <Value>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <ValueIsCDATA>k__BackingField;
    public string Name { get; }
    [NullableAttribute("2")]
public string Value { get; public set; }
    public bool ValueIsCDATA { get; public set; }
    public AttributeDictionary Attributes { get; }
    public NodeList ChildNodes { get; }
    [NullableAttribute("2")]
public TNode FirstChild { get; }
    public string OuterXml { get; }
    public TNode(string name);
    public TNode(string name, string value);
    public TNode(string name, string value, bool valueIsCDATA);
    [CompilerGeneratedAttribute]
public string get_Name();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public string get_Value();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public void set_Value(string value);
    [CompilerGeneratedAttribute]
public bool get_ValueIsCDATA();
    [CompilerGeneratedAttribute]
public void set_ValueIsCDATA(bool value);
    public AttributeDictionary get_Attributes();
    public NodeList get_ChildNodes();
    [NullableContextAttribute("2")]
public TNode get_FirstChild();
    public string get_OuterXml();
    public static TNode FromXml(string xmlText);
    public TNode AddElement(string name);
    public TNode AddElement(string name, string value);
    public TNode AddElementWithCDATA(string name, string value);
    public void AddChildNode(TNode node);
    public void InsertChildNode(int index, TNode node);
    public void AddAttribute(string name, string value);
    public TNode SelectSingleNode(string xpath);
    public List`1<TNode> SelectNodes(string xpath);
    public void WriteTo(XmlWriter writer);
    private static TNode FromXml(XmlNode xmlNode);
    private static List`1<TNode> ApplySelection(List`1<TNode> nodeList, string xpath);
}
internal class NUnit.Framework.Internal.Abstractions.DebuggerProxy : object {
    public bool IsAttached { get; }
    public sealed virtual bool get_IsAttached();
}
internal interface NUnit.Framework.Internal.Abstractions.IDebugger {
    public bool IsAttached { get; }
    public abstract virtual bool get_IsAttached();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public static class NUnit.Framework.Internal.AssemblyHelper : object {
    private static string UriSchemeFile;
    private static string SchemeDelimiter;
    private static AssemblyHelper();
    public static string GetAssemblyPath(Assembly assembly);
    public static string GetDirectoryName(Assembly assembly);
    public static AssemblyName GetAssemblyName(Assembly assembly);
    public static Assembly Load(string name);
    private static bool IsFileUri(string uri);
    public static string GetAssemblyPathFromCodeBase(string codeBase);
}
internal static class NUnit.Framework.Internal.AsyncEnumerableAdapter : object {
    [NullableContextAttribute("2")]
public static IEnumerable CoalesceToEnumerable(object enumerable);
    [NullableContextAttribute("1")]
private static bool TryGetAsyncBlockingEnumerable(object enumerable, IEnumerable`1& result);
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
internal static class NUnit.Framework.Internal.AsyncToSyncAdapter : object {
    private static Type AsyncStateMachineAttributeType;
    private static AsyncToSyncAdapter();
    [NullableContextAttribute("1")]
public static bool IsAsyncOperation(MethodInfo method);
    [NullableContextAttribute("1")]
public static bool IsAsyncOperation(Delegate delegate);
    public static object Await(Func`1<object> invoke);
    public static TResult Await(Func`1<object> invoke);
    private static IDisposable InitializeExecutionEnvironment();
    private static void SetSynchronizationContext(SynchronizationContext syncContext);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal abstract class NUnit.Framework.Internal.AwaitAdapter : object {
    public bool IsCompleted { get; }
    public abstract virtual bool get_IsCompleted();
    public abstract virtual void OnCompleted(Action action);
    public abstract virtual void BlockUntilCompleted();
    [NullableContextAttribute("2")]
public abstract virtual object GetResult();
    public static bool IsAwaitable(Type awaitableType);
    public static Type GetResultType(Type awaitableType);
    public static AwaitAdapter FromAwaitable(object awaitable);
}
public class NUnit.Framework.Internal.Builders.CombinatorialStrategy : object {
    [NullableContextAttribute("1")]
public sealed virtual IEnumerable`1<ITestCaseData> GetTestCases(IEnumerable[] sources);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class NUnit.Framework.Internal.Builders.DatapointProvider : object {
    private bool _searchInDeclaringTypes;
    private static ProviderCache ProviderCache;
    public DatapointProvider(bool searchInDeclaringTypes);
    private static DatapointProvider();
    public sealed virtual bool HasDataFor(IParameterInfo parameter);
    public sealed virtual IEnumerable GetDataFor(IParameterInfo parameter);
    private IEnumerable`1<Tuple`2<MemberInfo, Type>> GetMembersFromType(Type type);
    [IteratorStateMachineAttribute("NUnit.Framework.Internal.Builders.DatapointProvider/<GetNestedMembersFromType>d__6")]
private static IEnumerable`1<Tuple`2<MemberInfo, Type>> GetNestedMembersFromType(Type type);
    [IteratorStateMachineAttribute("NUnit.Framework.Internal.Builders.DatapointProvider/<GetDirectMembersOfType>d__7")]
private static IEnumerable`1<Tuple`2<MemberInfo, Type>> GetDirectMembersOfType(Type type);
    private Type GetTypeFromMemberInfo(MemberInfo member);
    private Type GetElementTypeFromMemberInfo(MemberInfo member);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class NUnit.Framework.Internal.Builders.DefaultSuiteBuilder : object {
    private NUnitTestFixtureBuilder _defaultBuilder;
    public sealed virtual bool CanBuildFrom(ITypeInfo typeInfo);
    public sealed virtual TestSuite BuildFrom(ITypeInfo typeInfo);
    public sealed virtual TestSuite BuildFrom(ITypeInfo typeInfo, IPreFilter filter);
    private TestSuite BuildMultipleFixtures(ITypeInfo typeInfo, IEnumerable`1<TestSuite> fixtures);
    private IFixtureBuilder[] GetFixtureBuilderAttributes(ITypeInfo typeInfo);
    private bool HasArguments(IFixtureBuilder attr);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class NUnit.Framework.Internal.Builders.DefaultTestCaseBuilder : object {
    private NUnitTestCaseBuilder _nunitTestCaseBuilder;
    public bool CanBuildFrom(IMethodInfo method);
    public Test BuildFrom(IMethodInfo method);
    public sealed virtual bool CanBuildFrom(IMethodInfo method, Test parentSuite);
    public sealed virtual Test BuildFrom(IMethodInfo method, Test parentSuite);
    private Test BuildParameterizedMethodSuite(IMethodInfo method, IEnumerable`1<TestMethod> tests);
    private Test BuildSingleTestMethod(IMethodInfo method, Test suite);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal static class NUnit.Framework.Internal.Builders.MethodInfoCache : object {
    private static ConcurrentDictionary`2<IMethodInfo, TestMethodMetadata> MethodMetadataCache;
    private static MethodInfoCache();
    internal static TestMethodMetadata Get(IMethodInfo method);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class NUnit.Framework.Internal.Builders.NamespaceTreeBuilder : object {
    private Dictionary`2<string, TestSuite> _namespaceIndex;
    private TestSuite _globalInsertionPoint;
    [CompilerGeneratedAttribute]
private TestSuite <RootSuite>k__BackingField;
    public TestSuite RootSuite { get; private set; }
    public NamespaceTreeBuilder(TestSuite rootSuite);
    [CompilerGeneratedAttribute]
public TestSuite get_RootSuite();
    [CompilerGeneratedAttribute]
private void set_RootSuite(TestSuite value);
    public void Add(IList`1<Test> fixtures);
    public void Add(TestSuite fixture);
    private static string GetNamespaceForFixture(TestSuite fixture);
    private TestSuite GetNamespaceSuite(string ns);
    private void AddSetUpFixture(TestSuite newSetupFixture, TestSuite containingSuite, string ns);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class NUnit.Framework.Internal.Builders.NUnitTestCaseBuilder : object {
    private Randomizer _randomizer;
    private TestNameGenerator _nameGenerator;
    public TestMethod BuildTestMethod(IMethodInfo method, Test parentSuite, TestCaseParameters parms);
    private static bool CheckTestMethodAttributes(TestMethod testMethod, TestMethodMetadata metadata);
    private static bool CheckTestMethodSignature(TestMethod testMethod, TestMethodMetadata metadata, TestCaseParameters parms);
    private static bool MarkAsNotRunnable(TestMethod testMethod, string reason);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class NUnit.Framework.Internal.Builders.NUnitTestFixtureBuilder : object {
    private static string NO_TYPE_ARGS_MSG;
    private static string PARALLEL_NOT_ALLOWED_MSG;
    private ITestCaseBuilder _testBuilder;
    public TestSuite BuildFrom(ITypeInfo typeInfo, IPreFilter filter);
    public TestSuite BuildFrom(ITypeInfo typeInfo, IPreFilter filter, ITestFixtureData testFixtureData);
    private void AddTestCasesToFixture(TestFixture fixture, IPreFilter filter);
    private Test BuildTestCase(IMethodInfo method, TestSuite suite);
    private static void CheckTestFixtureIsValid(TestFixture fixture);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class NUnit.Framework.Internal.Builders.PairwiseStrategy : object {
    public sealed virtual IEnumerable`1<ITestCaseData> GetTestCases(IEnumerable[] sources);
    private List`1[] CreateValueSet(IEnumerable[] sources);
    private Int32[] CreateDimensions(List`1[] valueSet);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class NUnit.Framework.Internal.Builders.ParameterDataProvider : object {
    private List`1<IParameterDataProvider> _providers;
    public ParameterDataProvider(IParameterDataProvider[] providers);
    public sealed virtual bool HasDataFor(IParameterInfo parameter);
    [IteratorStateMachineAttribute("NUnit.Framework.Internal.Builders.ParameterDataProvider/<GetDataFor>d__3")]
public sealed virtual IEnumerable GetDataFor(IParameterInfo parameter);
}
public class NUnit.Framework.Internal.Builders.ParameterDataSourceProvider : object {
    [NullableContextAttribute("1")]
public sealed virtual bool HasDataFor(IParameterInfo parameter);
    [NullableContextAttribute("1")]
public sealed virtual IEnumerable GetDataFor(IParameterInfo parameter);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class NUnit.Framework.Internal.Builders.ProviderCache : object {
    private Dictionary`2<Type, object> _instances;
    public object GetInstanceOf(Type providerType);
    public object GetInstanceOf(Type providerType, Object[] providerArgs);
}
public class NUnit.Framework.Internal.Builders.SequentialStrategy : object {
    [NullableContextAttribute("1")]
public sealed virtual IEnumerable`1<ITestCaseData> GetTestCases(IEnumerable[] sources);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal static class NUnit.Framework.Internal.Builders.TestMetadataCache : object {
    private static ConcurrentDictionary`2<Type, TestMetadata> Cache;
    private static TestMetadataCache();
    internal static TestMetadata Get(Type testType);
}
public class NUnit.Framework.Internal.Commands.AfterTestActionCommand : AfterTestCommand {
    [NullableContextAttribute("1")]
public AfterTestActionCommand(TestCommand innerCommand, TestActionItem action);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public abstract class NUnit.Framework.Internal.Commands.AfterTestCommand : DelegatingTestCommand {
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
protected Action`1<TestExecutionContext> AfterTest;
    public AfterTestCommand(TestCommand innerCommand);
    public virtual TestResult Execute(TestExecutionContext context);
}
internal class NUnit.Framework.Internal.Commands.ApplyChangesToContextCommand : BeforeTestCommand {
    [NullableContextAttribute("1")]
public ApplyChangesToContextCommand(TestCommand innerCommand, IApplyToContext change);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public abstract class NUnit.Framework.Internal.Commands.BeforeAndAfterTestCommand : DelegatingTestCommand {
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
protected Action`1<TestExecutionContext> BeforeTest;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
protected Action`1<TestExecutionContext> AfterTest;
    public BeforeAndAfterTestCommand(TestCommand innerCommand);
    public virtual TestResult Execute(TestExecutionContext context);
}
public class NUnit.Framework.Internal.Commands.BeforeTestActionCommand : BeforeTestCommand {
    [NullableContextAttribute("1")]
public BeforeTestActionCommand(TestCommand innerCommand, TestActionItem action);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public abstract class NUnit.Framework.Internal.Commands.BeforeTestCommand : DelegatingTestCommand {
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
protected Action`1<TestExecutionContext> BeforeTest;
    public BeforeTestCommand(TestCommand innerCommand);
    public virtual TestResult Execute(TestExecutionContext context);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class NUnit.Framework.Internal.Commands.CancelAfterCommand : DelegatingTestCommand {
    private int _timeout;
    private IDebugger _debugger;
    internal CancelAfterCommand(TestCommand innerCommand, int timeout, IDebugger debugger);
    public virtual TestResult Execute(TestExecutionContext context);
}
public class NUnit.Framework.Internal.Commands.ConstructFixtureCommand : BeforeTestCommand {
    [NullableContextAttribute("1")]
public ConstructFixtureCommand(TestCommand innerCommand);
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
private void <.ctor>b__0_0(TestExecutionContext context);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public abstract class NUnit.Framework.Internal.Commands.DelegatingTestCommand : TestCommand {
    protected TestCommand innerCommand;
    protected DelegatingTestCommand(TestCommand innerCommand);
    protected static void RunTestMethodInThreadAbortSafeZone(TestExecutionContext context, Action action);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class NUnit.Framework.Internal.Commands.DisposeFixtureCommand : AfterTestCommand {
    public DisposeFixtureCommand(TestCommand innerCommand);
    private static bool HasDisposableFixture(ITest test);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class NUnit.Framework.Internal.Commands.EmptyTestCommand : TestCommand {
    public EmptyTestCommand(Test test);
    public virtual TestResult Execute(TestExecutionContext context);
}
public class NUnit.Framework.Internal.Commands.FixturePerTestCaseCommand : BeforeTestCommand {
    [NullableContextAttribute("1")]
public FixturePerTestCaseCommand(TestCommand innerCommand);
}
public class NUnit.Framework.Internal.Commands.MaxTimeCommand : AfterTestCommand {
    [NullableContextAttribute("1")]
public MaxTimeCommand(TestCommand innerCommand, int maxTime);
}
public class NUnit.Framework.Internal.Commands.OneTimeSetUpCommand : BeforeTestCommand {
    [NullableContextAttribute("1")]
public OneTimeSetUpCommand(TestCommand innerCommand, SetUpTearDownItem setUpTearDown);
}
public class NUnit.Framework.Internal.Commands.OneTimeTearDownCommand : AfterTestCommand {
    [NullableContextAttribute("1")]
public OneTimeTearDownCommand(TestCommand innerCommand, SetUpTearDownItem setUpTearDownItem);
}
public class NUnit.Framework.Internal.Commands.SetUpTearDownCommand : BeforeAndAfterTestCommand {
    [NullableContextAttribute("1")]
public SetUpTearDownCommand(TestCommand innerCommand, SetUpTearDownItem setUpTearDown);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class NUnit.Framework.Internal.Commands.SetUpTearDownItem : object {
    [NullableAttribute("2")]
private IMethodValidator _methodValidator;
    private IList`1<IMethodInfo> _setUpMethods;
    private IList`1<IMethodInfo> _tearDownMethods;
    private bool _setUpWasRun;
    public bool HasMethods { get; }
    public SetUpTearDownItem(IList`1<IMethodInfo> setUpMethods, IList`1<IMethodInfo> tearDownMethods, IMethodValidator methodValidator);
    public bool get_HasMethods();
    public void RunSetUp(TestExecutionContext context);
    public void RunTearDown(TestExecutionContext context);
    private void RunSetUpOrTearDownMethod(TestExecutionContext context, IMethodInfo method);
    private static object InvokeMethod(IMethodInfo method, TestExecutionContext context);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class NUnit.Framework.Internal.Commands.SkipCommand : TestCommand {
    public SkipCommand(Test test);
    public virtual TestResult Execute(TestExecutionContext context);
    private string GetSkipReason();
    [NullableContextAttribute("2")]
private string GetProviderStackTrace();
}
public class NUnit.Framework.Internal.Commands.TestActionCommand : BeforeAndAfterTestCommand {
    [NullableContextAttribute("1")]
public TestActionCommand(TestCommand innerCommand, ITestAction action);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class NUnit.Framework.Internal.Commands.TestActionItem : object {
    private ITestAction _action;
    [CompilerGeneratedAttribute]
private bool <BeforeTestWasRun>k__BackingField;
    public bool BeforeTestWasRun { get; private set; }
    public TestActionItem(ITestAction action);
    [CompilerGeneratedAttribute]
public bool get_BeforeTestWasRun();
    [CompilerGeneratedAttribute]
private void set_BeforeTestWasRun(bool value);
    public void BeforeTest(ITest test);
    public void AfterTest(ITest test);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public abstract class NUnit.Framework.Internal.Commands.TestCommand : object {
    [CompilerGeneratedAttribute]
private Test <Test>k__BackingField;
    public Test Test { get; }
    public TestCommand(Test test);
    [CompilerGeneratedAttribute]
public Test get_Test();
    public abstract virtual TestResult Execute(TestExecutionContext context);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class NUnit.Framework.Internal.Commands.TestMethodCommand : TestCommand {
    private TestMethod _testMethod;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private Object[] _arguments;
    public TestMethodCommand(TestMethod testMethod);
    public virtual TestResult Execute(TestExecutionContext context);
    private object RunTestMethod(TestExecutionContext context);
    private object InvokeTestMethod(TestExecutionContext context, bool lastParameterAcceptsCancellationToken);
}
public class NUnit.Framework.Internal.Commands.TheoryResultCommand : AfterTestCommand {
    [NullableContextAttribute("1")]
public TheoryResultCommand(TestCommand command);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class NUnit.Framework.Internal.Commands.TimeoutCommand : BeforeAndAfterTestCommand {
    private int _timeout;
    private IDebugger _debugger;
    internal TimeoutCommand(TestCommand innerCommand, int timeout, IDebugger debugger);
    public virtual TestResult Execute(TestExecutionContext context);
    [NullableContextAttribute("0")]
[CompilerGeneratedAttribute]
private TestResult <Execute>b__3_0();
}
internal static class NUnit.Framework.Internal.ConstraintUtils : object {
    [NullableContextAttribute("1")]
public static T RequireActual(object actual, string paramName, bool allowNull);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal static class NUnit.Framework.Internal.ContextUtils : object {
    public static void DoIsolated(Action action);
    public static T DoIsolated(Func`1<T> func);
    public static void DoIsolated(ContextCallback callback, object state);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal static class NUnit.Framework.Internal.CSharpPatternBasedAwaitAdapter : object {
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private static ConcurrentDictionary`2<Type, AwaitShapeInfo> ShapeInfoByType;
    private static CSharpPatternBasedAwaitAdapter();
    [NullableContextAttribute("2")]
public static AwaitAdapter TryCreate(object awaitable);
    public static bool IsAwaitable(Type awaitableType);
    public static Type GetResultType(Type awaitableType);
    private static AwaitShapeInfo GetShapeInfo(Type type);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class NUnit.Framework.Internal.CultureDetector : object {
    private CultureInfo _currentCulture;
    private string _reason;
    public string Reason { get; }
    public CultureDetector(string culture);
    public bool IsCultureSupported(String[] cultures);
    public bool IsCultureSupported(CultureAttribute cultureAttribute);
    public bool IsCultureSupported(string culture);
    public string get_Reason();
}
internal class NUnit.Framework.Internal.DecimalParts : ValueType {
    [CompilerGeneratedAttribute]
private UInt32 <Low>k__BackingField;
    [CompilerGeneratedAttribute]
private UInt32 <Mid>k__BackingField;
    [CompilerGeneratedAttribute]
private UInt32 <High>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsNegative>k__BackingField;
    [CompilerGeneratedAttribute]
private byte <Scale>k__BackingField;
    public UInt32 Low { get; }
    public UInt32 Mid { get; }
    public UInt32 High { get; }
    public bool IsNegative { get; }
    public byte Scale { get; }
    private DecimalParts(UInt32 low, UInt32 mid, UInt32 high, bool isNegative, byte scale);
    [IsReadOnlyAttribute]
[CompilerGeneratedAttribute]
public UInt32 get_Low();
    [IsReadOnlyAttribute]
[CompilerGeneratedAttribute]
public UInt32 get_Mid();
    [IsReadOnlyAttribute]
[CompilerGeneratedAttribute]
public UInt32 get_High();
    [IsReadOnlyAttribute]
[CompilerGeneratedAttribute]
public bool get_IsNegative();
    [IsReadOnlyAttribute]
[CompilerGeneratedAttribute]
public byte get_Scale();
    public static DecimalParts FromValue(decimal value);
}
internal abstract class NUnit.Framework.Internal.DefaultBlockingAwaitAdapter : AwaitAdapter {
    [NullableAttribute("2")]
private ManualResetEventSlim modreq(System.Runtime.CompilerServices.IsVolatile) _completedEvent;
    public sealed virtual void BlockUntilCompleted();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal static class NUnit.Framework.Internal.DisplayName : object {
    private static string THREE_DOTS;
    public static string GetValueString(object arg, int stringMax);
    private static string FormatException(Exception ex);
    private static bool MayNeedEscape(string s);
    private static bool MayNeedEscape(char c);
    private static string EscapeSingleChar(char c);
    private static string EscapeCharInString(char c);
    private static string EscapeControlChar(char c);
}
internal static class NUnit.Framework.Internal.DisposeHelper : object {
    [NullableContextAttribute("1")]
public static bool IsDisposable(Type type);
    [NullableContextAttribute("2")]
public static void EnsureDisposed(object value);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ExtensionAttribute]
public static class NUnit.Framework.Internal.ExceptionHelper : object {
    [DoesNotReturnAttribute]
public static void Rethrow(Exception exception);
    public static string BuildMessage(Exception exception, bool excludeExceptionNames);
    public static string BuildStackTrace(Exception exception);
    private static string GetExceptionMessage(Exception ex);
    private static void AppendExceptionDataContents(Exception ex, StringBuilder sb);
    private static List`1<Exception> FlattenExceptionHierarchy(Exception exception);
    internal static Exception RecordException(Delegate parameterlessDelegate, string parameterName);
    [ExtensionAttribute]
public static Exception Unwrap(Exception exception);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class NUnit.Framework.Internal.Execution.CompositeWorkItem : WorkItem {
    private TestSuite _suite;
    private TestSuiteResult _suiteResult;
    [NullableAttribute("2")]
private TestCommand _setupCommand;
    [NullableAttribute("2")]
private TestCommand _teardownCommand;
    [CompilerGeneratedAttribute]
private List`1<WorkItem> <Children>k__BackingField;
    [NullableAttribute("2")]
private CountdownEvent _childTestCountdown;
    private object _childCompletionLock;
    private object _cancelLock;
    public List`1<WorkItem> Children { get; }
    public bool IsolateChildTests { get; }
    public CompositeWorkItem(TestSuite suite, ITestFilter childFilter);
    [CompilerGeneratedAttribute]
public List`1<WorkItem> get_Children();
    public virtual bool get_IsolateChildTests();
    protected virtual void PerformWork();
    private bool CheckForCancellation();
    private void InitializeSetUpAndTearDownCommands();
    private TestCommand MakeOneTimeSetUpCommand(List`1<SetUpTearDownItem> setUpTearDown, List`1<TestActionItem> actions);
    private TestCommand MakeOneTimeTearDownCommand(List`1<SetUpTearDownItem> setUpTearDownItems, List`1<TestActionItem> actions);
    private void PerformOneTimeSetUp();
    private void RunChildren();
    private void SkipFixture(ResultState resultState, string message, string stackTrace);
    private void SkipChildren(CompositeWorkItem workItem, ResultState resultState, string message, string stackTrace);
    private void SetChildWorkItemSkippedResult(TestResult result, ResultState resultState, string message, string stackTrace);
    private void PerformOneTimeTearDown();
    private string GetSkipReason();
    [NullableContextAttribute("2")]
private string GetProviderStackTrace();
    private void OnChildItemCompleted(object sender, EventArgs e);
    private void OnAllChildItemsCompleted();
    public virtual void Cancel(bool force);
}
public abstract class NUnit.Framework.Internal.Execution.Event : object {
    [NullableContextAttribute("1")]
public abstract virtual void Send(ITestListener listener);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class NUnit.Framework.Internal.Execution.EventListenerTextWriter : TextWriter {
    private TextWriter _defaultWriter;
    private string _streamName;
    [CompilerGeneratedAttribute]
private Encoding <Encoding>k__BackingField;
    public Encoding Encoding { get; }
    public EventListenerTextWriter(string streamName, TextWriter defaultWriter);
    [CompilerGeneratedAttribute]
public virtual Encoding get_Encoding();
    private string FormatForListener(object value);
    private bool TrySendToListener(string text);
    private bool TrySendLineToListener(string text);
    public virtual void Write(string format, Object[] arg);
    [NullableContextAttribute("2")]
public virtual void Write(string format, object arg0, object arg1, object arg2);
    public virtual void Write(string format, object arg0);
    [NullableContextAttribute("2")]
public virtual void Write(object value);
    [NullableContextAttribute("2")]
public virtual void Write(string value);
    public virtual void Write(decimal value);
    public virtual void Write(double value);
    [NullableContextAttribute("2")]
public virtual void Write(string format, object arg0, object arg1);
    [CLSCompliantAttribute("False")]
public virtual void Write(ulong value);
    public virtual void Write(long value);
    [CLSCompliantAttribute("False")]
public virtual void Write(UInt32 value);
    public virtual void Write(int value);
    public virtual void Write(char value);
    public virtual void Write(bool value);
    public virtual void Write(Char[] buffer, int index, int count);
    [NullableContextAttribute("2")]
public virtual void Write(Char[] buffer);
    public virtual void Write(float value);
    [NullableContextAttribute("2")]
public virtual void WriteLine(string value);
    [NullableContextAttribute("2")]
public virtual void WriteLine(object value);
    public virtual void WriteLine(string format, Object[] arg);
    [NullableContextAttribute("2")]
public virtual void WriteLine(string format, object arg0, object arg1);
    [NullableContextAttribute("2")]
public virtual void WriteLine(string format, object arg0, object arg1, object arg2);
    public virtual void WriteLine(decimal value);
    public virtual void WriteLine(string format, object arg0);
    public virtual void WriteLine(double value);
    [CLSCompliantAttribute("False")]
public virtual void WriteLine(UInt32 value);
    [CLSCompliantAttribute("False")]
public virtual void WriteLine(ulong value);
    public virtual void WriteLine(long value);
    public virtual void WriteLine(int value);
    public virtual void WriteLine(bool value);
    public virtual void WriteLine(Char[] buffer, int index, int count);
    [NullableContextAttribute("2")]
public virtual void WriteLine(Char[] buffer);
    public virtual void WriteLine(char value);
    public virtual void WriteLine(float value);
    public virtual void WriteLine();
}
[NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public class NUnit.Framework.Internal.Execution.EventPump : EventPump`2<Event, ITestListener> {
    [NullableContextAttribute("1")]
public EventPump(ITestListener eventListener, EventQueue`1<Event> events);
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
public abstract class NUnit.Framework.Internal.Execution.EventPump`2 : object {
    [NullableAttribute("1")]
private static Logger Log;
    [NullableAttribute("1")]
private TListener _eventListener;
    [NullableAttribute("1")]
private EventQueue`1<TEvent> _events;
    private Thread _pumpThread;
    private int _pumpState;
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    public EventPumpState PumpState { get; }
    public string Name { get; public set; }
    [NullableContextAttribute("1")]
protected EventPump`2(TListener eventListener, EventQueue`1<TEvent> events, string name);
    private static EventPump`2();
    public EventPumpState get_PumpState();
    [CompilerGeneratedAttribute]
public string get_Name();
    [CompilerGeneratedAttribute]
public void set_Name(string value);
    public sealed virtual void Dispose();
    public void Start();
    public void Stop();
    private void PumpThreadProc();
}
public enum NUnit.Framework.Internal.Execution.EventPumpState : Enum {
    public int value__;
    public static EventPumpState Stopped;
    public static EventPumpState Pumping;
    public static EventPumpState Stopping;
}
[NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public class NUnit.Framework.Internal.Execution.EventQueue : EventQueue`1<Event> {
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public abstract class NUnit.Framework.Internal.Execution.EventQueue`1 : object {
    private static int SpinCount;
    private ConcurrentQueue`1<T> _queue;
    private ManualResetEventSlim _mreAdd;
    private int _addId;
    private int _removeId;
    private int _stopped;
    public int Count { get; }
    public int get_Count();
    public void Enqueue(T e);
    [NullableContextAttribute("2")]
public T Dequeue(bool blockWhenEmpty);
    public void Stop();
}
[NullableContextAttribute("1")]
public interface NUnit.Framework.Internal.Execution.IEvent`1 {
    public abstract virtual void Send(TListener listener);
}
[NullableContextAttribute("1")]
public interface NUnit.Framework.Internal.Execution.IMethodValidator {
    public abstract virtual void Validate(MethodInfo method);
}
[NullableContextAttribute("1")]
public interface NUnit.Framework.Internal.Execution.IWorkItemDispatcher {
    public int LevelOfParallelism { get; }
    public abstract virtual int get_LevelOfParallelism();
    public abstract virtual void Start(WorkItem topLevelWorkItem);
    public abstract virtual void Dispatch(WorkItem work);
    public abstract virtual void CancelRun(bool force);
}
public class NUnit.Framework.Internal.Execution.MainThreadWorkItemDispatcher : object {
    public int LevelOfParallelism { get; }
    public sealed virtual int get_LevelOfParallelism();
    [NullableContextAttribute("1")]
public sealed virtual void Start(WorkItem topLevelWorkItem);
    [NullableContextAttribute("1")]
public sealed virtual void Dispatch(WorkItem work);
    public sealed virtual void CancelRun(bool force);
}
public enum NUnit.Framework.Internal.Execution.ParallelExecutionStrategy : Enum {
    public int value__;
    public static ParallelExecutionStrategy Direct;
    public static ParallelExecutionStrategy Parallel;
    public static ParallelExecutionStrategy NonParallel;
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class NUnit.Framework.Internal.Execution.ParallelWorkItemDispatcher : object {
    private static Logger Log;
    private static int WAIT_FOR_FORCED_TERMINATION;
    [NullableAttribute("2")]
private WorkItem _topLevelWorkItem;
    private Stack`1<WorkItem> _savedWorkItems;
    private List`1<CompositeWorkItem> _activeWorkItems;
    [NullableAttribute("2")]
[CompilerGeneratedAttribute]
private ShiftChangeEventHandler ShiftStarting;
    [NullableAttribute("2")]
[CompilerGeneratedAttribute]
private ShiftChangeEventHandler ShiftFinished;
    [CompilerGeneratedAttribute]
private int <LevelOfParallelism>k__BackingField;
    [CompilerGeneratedAttribute]
private WorkShift <ParallelShift>k__BackingField;
    [CompilerGeneratedAttribute]
private WorkShift <NonParallelShift>k__BackingField;
    [CompilerGeneratedAttribute]
private WorkShift <NonParallelSTAShift>k__BackingField;
    [CompilerGeneratedAttribute]
private WorkItemQueue <ParallelQueue>k__BackingField;
    [CompilerGeneratedAttribute]
private WorkItemQueue <ParallelSTAQueue>k__BackingField;
    [CompilerGeneratedAttribute]
private WorkItemQueue <NonParallelQueue>k__BackingField;
    [CompilerGeneratedAttribute]
private WorkItemQueue <NonParallelSTAQueue>k__BackingField;
    private object _queueLock;
    private int _isolationLevel;
    public int LevelOfParallelism { get; }
    public IEnumerable`1<WorkShift> Shifts { get; }
    public IEnumerable`1<WorkItemQueue> Queues { get; }
    private WorkShift ParallelShift { get; }
    private WorkShift NonParallelShift { get; }
    private WorkShift NonParallelSTAShift { get; }
    private WorkItemQueue ParallelQueue { get; }
    private WorkItemQueue ParallelSTAQueue { get; }
    private WorkItemQueue NonParallelQueue { get; }
    private WorkItemQueue NonParallelSTAQueue { get; }
    public ParallelWorkItemDispatcher(int levelOfParallelism);
    private static ParallelWorkItemDispatcher();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public void add_ShiftStarting(ShiftChangeEventHandler value);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public void remove_ShiftStarting(ShiftChangeEventHandler value);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public void add_ShiftFinished(ShiftChangeEventHandler value);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public void remove_ShiftFinished(ShiftChangeEventHandler value);
    private void InitializeShifts();
    private void OnStartNonParallelWorkItem(TestWorker worker, WorkItem work);
    [CompilerGeneratedAttribute]
public sealed virtual int get_LevelOfParallelism();
    [IteratorStateMachineAttribute("NUnit.Framework.Internal.Execution.ParallelWorkItemDispatcher/<get_Shifts>d__18")]
public IEnumerable`1<WorkShift> get_Shifts();
    [IteratorStateMachineAttribute("NUnit.Framework.Internal.Execution.ParallelWorkItemDispatcher/<get_Queues>d__20")]
public IEnumerable`1<WorkItemQueue> get_Queues();
    [CompilerGeneratedAttribute]
private WorkShift get_ParallelShift();
    [CompilerGeneratedAttribute]
private WorkShift get_NonParallelShift();
    [CompilerGeneratedAttribute]
private WorkShift get_NonParallelSTAShift();
    [CompilerGeneratedAttribute]
private WorkItemQueue get_ParallelQueue();
    [CompilerGeneratedAttribute]
private WorkItemQueue get_ParallelSTAQueue();
    [CompilerGeneratedAttribute]
private WorkItemQueue get_NonParallelQueue();
    [CompilerGeneratedAttribute]
private WorkItemQueue get_NonParallelSTAQueue();
    public sealed virtual void Start(WorkItem topLevelWorkItem);
    private static ParallelExecutionStrategy InitialExecutionStrategy(WorkItem workItem);
    public sealed virtual void Dispatch(WorkItem work);
    private void Dispatch(WorkItem work, ParallelExecutionStrategy strategy);
    public sealed virtual void CancelRun(bool force);
    internal void IsolateQueues(WorkItem work);
    private void TryRestoreQueues();
    private void OnWorkItemCompletion(object sender, EventArgs args);
    private void OnEndOfShift(WorkShift endingShift);
    [NullableContextAttribute("2")]
private WorkShift SelectNextShift();
    [CompilerGeneratedAttribute]
private bool <CancelRun>b__46_0();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class NUnit.Framework.Internal.Execution.QueuingEventListener : object {
    [CompilerGeneratedAttribute]
private EventQueue <Events>k__BackingField;
    public EventQueue Events { get; }
    [CompilerGeneratedAttribute]
public EventQueue get_Events();
    public sealed virtual void TestStarted(ITest test);
    public sealed virtual void TestFinished(ITestResult result);
    public sealed virtual void TestOutput(TestOutput output);
    public sealed virtual void SendMessage(TestMessage message);
}
public class NUnit.Framework.Internal.Execution.ShiftChangeEventHandler : MulticastDelegate {
    public ShiftChangeEventHandler(object object, IntPtr method);
    [NullableContextAttribute("1")]
public virtual void Invoke(WorkShift shift);
    public virtual IAsyncResult BeginInvoke(WorkShift shift, AsyncCallback callback, object object);
    public virtual void EndInvoke(IAsyncResult result);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class NUnit.Framework.Internal.Execution.SimpleWorkItem : WorkItem {
    private IDebugger _debugger;
    private TestMethod _testMethod;
    internal SimpleWorkItem(TestMethod test, ITestFilter filter, IDebugger debugger);
    protected virtual void PerformWork();
    internal TestCommand MakeTestCommand();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class NUnit.Framework.Internal.Execution.SimpleWorkItemDispatcher : object {
    [NullableAttribute("2")]
private WorkItem _topLevelWorkItem;
    [NullableAttribute("2")]
private Thread _runnerThread;
    private object _cancelLock;
    public int LevelOfParallelism { get; }
    public sealed virtual int get_LevelOfParallelism();
    public sealed virtual void Start(WorkItem topLevelWorkItem);
    public sealed virtual void Dispatch(WorkItem work);
    [NullableContextAttribute("2")]
private void RunnerThreadProc(object obj);
    public sealed virtual void CancelRun(bool force);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class NUnit.Framework.Internal.Execution.StaticMethodValidator : object {
    private string _failMessage;
    public StaticMethodValidator(string failMessage);
    public sealed virtual void Validate(MethodInfo method);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class NUnit.Framework.Internal.Execution.TestFinishedEvent : Event {
    private ITestResult _result;
    public TestFinishedEvent(ITestResult result);
    public virtual void Send(ITestListener listener);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class NUnit.Framework.Internal.Execution.TestMessageEvent : Event {
    [CompilerGeneratedAttribute]
private TestMessage <TestMessage>k__BackingField;
    public TestMessage TestMessage { get; }
    public TestMessageEvent(TestMessage testMessage);
    public virtual void Send(ITestListener listener);
    [CompilerGeneratedAttribute]
public TestMessage get_TestMessage();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class NUnit.Framework.Internal.Execution.TestOutputEvent : Event {
    private TestOutput _output;
    public TestOutputEvent(TestOutput output);
    public virtual void Send(ITestListener listener);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class NUnit.Framework.Internal.Execution.TestStartedEvent : Event {
    private ITest _test;
    public TestStartedEvent(ITest test);
    public virtual void Send(ITestListener listener);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class NUnit.Framework.Internal.Execution.TestWorker : object {
    private static Logger Log;
    [NullableAttribute("2")]
private Thread _workerThread;
    private int _workItemCount;
    private bool _running;
    [NullableAttribute("2")]
[CompilerGeneratedAttribute]
private TestWorkerEventHandler Busy;
    [NullableAttribute("2")]
[CompilerGeneratedAttribute]
private TestWorkerEventHandler Idle;
    [CompilerGeneratedAttribute]
private WorkItemQueue <WorkQueue>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    [NullableAttribute("2")]
private WorkItem _currentWorkItem;
    private object _cancelLock;
    public WorkItemQueue WorkQueue { get; }
    public string Name { get; }
    public bool IsAlive { get; }
    public TestWorker(WorkItemQueue queue, string name);
    private static TestWorker();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public void add_Busy(TestWorkerEventHandler value);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public void remove_Busy(TestWorkerEventHandler value);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public void add_Idle(TestWorkerEventHandler value);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public void remove_Idle(TestWorkerEventHandler value);
    [CompilerGeneratedAttribute]
public WorkItemQueue get_WorkQueue();
    [CompilerGeneratedAttribute]
public string get_Name();
    public bool get_IsAlive();
    private void TestWorkerThreadProc();
    public void Start();
    public void Cancel(bool force);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class NUnit.Framework.Internal.Execution.TextCapture : TextWriter {
    private TextWriter _defaultWriter;
    public Encoding Encoding { get; }
    public TextCapture(TextWriter defaultWriter);
    public virtual Encoding get_Encoding();
    public virtual void Write(char value);
    [NullableContextAttribute("2")]
public virtual void Write(string value);
    [NullableContextAttribute("2")]
public virtual void WriteLine(string value);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public abstract class NUnit.Framework.Internal.Execution.WorkItem : object {
    private static Logger Log;
    [NullableAttribute("2")]
[CompilerGeneratedAttribute]
private EventHandler Completed;
    [CompilerGeneratedAttribute]
private WorkItemState <State>k__BackingField;
    [CompilerGeneratedAttribute]
private Test <Test>k__BackingField;
    [CompilerGeneratedAttribute]
private ITestFilter <Filter>k__BackingField;
    [CompilerGeneratedAttribute]
private TestExecutionContext <Context>k__BackingField;
    [NullableAttribute("2")]
[CompilerGeneratedAttribute]
private TestWorker <TestWorker>k__BackingField;
    private Nullable`1<ParallelExecutionStrategy> _executionStrategy;
    [CompilerGeneratedAttribute]
private bool <IsolateChildTests>k__BackingField;
    [CompilerGeneratedAttribute]
private TestResult <Result>k__BackingField;
    [CompilerGeneratedAttribute]
private ParallelScope <ParallelScope>k__BackingField;
    [CompilerGeneratedAttribute]
private ApartmentState <TargetApartment>k__BackingField;
    [CompilerGeneratedAttribute]
private ApartmentState <CurrentApartment>k__BackingField;
    private ManualResetEventSlim _completionEvent;
    [NullableAttribute("2")]
private Thread _thread;
    public WorkItemState State { get; protected set; }
    public Test Test { get; }
    public string Name { get; }
    public ITestFilter Filter { get; }
    public TestExecutionContext Context { get; private set; }
    [NullableAttribute("2")]
public TestWorker TestWorker { get; internal set; }
    public ParallelExecutionStrategy ExecutionStrategy { get; }
    public bool IsolateChildTests { get; }
    public TestResult Result { get; protected set; }
    public ParallelScope ParallelScope { get; }
    internal ApartmentState TargetApartment { get; internal set; }
    private ApartmentState CurrentApartment { get; private set; }
    public WorkItem(Test test, ITestFilter filter);
    public WorkItem(WorkItem wrappedItem);
    private static WorkItem();
    public void InitializeContext(TestExecutionContext context);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public void add_Completed(EventHandler value);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public void remove_Completed(EventHandler value);
    [CompilerGeneratedAttribute]
public WorkItemState get_State();
    [CompilerGeneratedAttribute]
protected void set_State(WorkItemState value);
    [CompilerGeneratedAttribute]
public Test get_Test();
    public virtual string get_Name();
    [CompilerGeneratedAttribute]
public ITestFilter get_Filter();
    [CompilerGeneratedAttribute]
public TestExecutionContext get_Context();
    [CompilerGeneratedAttribute]
private void set_Context(TestExecutionContext value);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public TestWorker get_TestWorker();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
internal void set_TestWorker(TestWorker value);
    public virtual ParallelExecutionStrategy get_ExecutionStrategy();
    [CompilerGeneratedAttribute]
public virtual bool get_IsolateChildTests();
    [CompilerGeneratedAttribute]
public TestResult get_Result();
    [CompilerGeneratedAttribute]
protected void set_Result(TestResult value);
    [CompilerGeneratedAttribute]
public ParallelScope get_ParallelScope();
    [CompilerGeneratedAttribute]
internal ApartmentState get_TargetApartment();
    [CompilerGeneratedAttribute]
internal void set_TargetApartment(ApartmentState value);
    [CompilerGeneratedAttribute]
private ApartmentState get_CurrentApartment();
    [CompilerGeneratedAttribute]
private void set_CurrentApartment(ApartmentState value);
    public virtual void Execute();
    public void WaitForCompletion();
    public void MarkNotRunnable(string reason);
    public virtual void Cancel(bool force);
    public sealed virtual void Dispose();
    protected abstract virtual void PerformWork();
    protected void WorkItemComplete();
    protected List`1<SetUpTearDownItem> BuildSetUpTearDownList(IMethodInfo[] setUpMethods, IMethodInfo[] tearDownMethods, IMethodValidator methodValidator);
    private static SetUpTearDownItem BuildNode(Type fixtureType, IList`1<IMethodInfo> setUpMethods, IList`1<IMethodInfo> tearDownMethods, IMethodValidator methodValidator);
    private static List`1<IMethodInfo> SelectMethodsByDeclaringType(Type type, IList`1<IMethodInfo> methods);
    protected void ChangeResult(ResultState resultState, string message);
    private void RunOnSeparateThread(ApartmentState apartment);
    private void RunOnCurrentThread();
    private ParallelExecutionStrategy GetExecutionStrategy();
    private static ApartmentState GetTargetApartment(ITest test);
    [CompilerGeneratedAttribute]
private void <RunOnSeparateThread>b__61_0();
}
public static class NUnit.Framework.Internal.Execution.WorkItemBuilder : object {
    [NullableContextAttribute("1")]
public static WorkItem CreateWorkItem(ITest test, ITestFilter filter, bool recursive);
    [NullableContextAttribute("1")]
internal static WorkItem CreateWorkItem(ITest test, ITestFilter filter, IDebugger debugger, bool recursive, bool root);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class NUnit.Framework.Internal.Execution.WorkItemQueue : object {
    private static int SPIN_COUNT;
    private static int HIGH_PRIORITY;
    private static int NORMAL_PRIORITY;
    private static int PRIORITY_LEVELS;
    private Logger _log;
    private ConcurrentQueue`1[] _innerQueues;
    private Stack`1<SavedState> _savedState;
    private ManualResetEventSlim _mreAdd;
    private int _addId;
    private int _removeId;
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsParallelQueue>k__BackingField;
    [CompilerGeneratedAttribute]
private ApartmentState <TargetApartment>k__BackingField;
    private int _itemsProcessed;
    private int _state;
    public string Name { get; }
    public bool IsParallelQueue { get; }
    public ApartmentState TargetApartment { get; }
    public int ItemsProcessed { get; private set; }
    public WorkItemQueueState State { get; private set; }
    public bool IsEmpty { get; }
    public WorkItemQueue(string name, bool isParallel, ApartmentState apartment);
    [MemberNotNullAttribute("_innerQueues")]
private void InitializeQueues();
    [CompilerGeneratedAttribute]
public string get_Name();
    [CompilerGeneratedAttribute]
public bool get_IsParallelQueue();
    [CompilerGeneratedAttribute]
public ApartmentState get_TargetApartment();
    public int get_ItemsProcessed();
    private void set_ItemsProcessed(int value);
    public WorkItemQueueState get_State();
    private void set_State(WorkItemQueueState value);
    public bool get_IsEmpty();
    public void Enqueue(WorkItem work);
    internal void Enqueue(WorkItem work, int priority);
    [NullableContextAttribute("2")]
public WorkItem Dequeue();
    public void Start();
    public void Stop();
    public void Pause();
    internal void Save();
    internal void Restore();
    internal string DumpContents();
}
public enum NUnit.Framework.Internal.Execution.WorkItemQueueState : Enum {
    public int value__;
    public static WorkItemQueueState Paused;
    public static WorkItemQueueState Running;
    public static WorkItemQueueState Stopped;
}
public enum NUnit.Framework.Internal.Execution.WorkItemState : Enum {
    public int value__;
    public static WorkItemState Ready;
    public static WorkItemState Running;
    public static WorkItemState Complete;
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class NUnit.Framework.Internal.Execution.WorkShift : object {
    private static Logger Log;
    private object _syncRoot;
    private int _busyCount;
    [NullableAttribute("2")]
[CompilerGeneratedAttribute]
private ShiftChangeEventHandler EndOfShift;
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsActive>k__BackingField;
    [CompilerGeneratedAttribute]
private IList`1<WorkItemQueue> <Queues>k__BackingField;
    [CompilerGeneratedAttribute]
private IList`1<TestWorker> <Workers>k__BackingField;
    private bool _firstStart;
    public string Name { get; }
    public bool IsActive { get; private set; }
    public bool HasWork { get; }
    internal IList`1<WorkItemQueue> Queues { get; }
    internal IList`1<TestWorker> Workers { get; }
    public WorkShift(string name);
    private static WorkShift();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public void add_EndOfShift(ShiftChangeEventHandler value);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public void remove_EndOfShift(ShiftChangeEventHandler value);
    [CompilerGeneratedAttribute]
public string get_Name();
    [CompilerGeneratedAttribute]
public bool get_IsActive();
    [CompilerGeneratedAttribute]
private void set_IsActive(bool value);
    public bool get_HasWork();
    [CompilerGeneratedAttribute]
internal IList`1<WorkItemQueue> get_Queues();
    [CompilerGeneratedAttribute]
internal IList`1<TestWorker> get_Workers();
    public void AddQueue(WorkItemQueue queue);
    public void Assign(TestWorker worker);
    public void Start();
    private void StartWorkers();
    public void EndShift();
    public void ShutDown();
    public void Cancel(bool force);
    [CompilerGeneratedAttribute]
private void <StartWorkers>b__26_0(TestWorker _, WorkItem _);
    [CompilerGeneratedAttribute]
private void <StartWorkers>b__26_1(TestWorker _, WorkItem _);
}
[ExtensionAttribute]
internal static class NUnit.Framework.Internal.Extensions.ArgumentsExtensions : object {
    [ExtensionAttribute]
public static bool LastArgumentIsCancellationToken(Object[] arguments);
    [NullableContextAttribute("1")]
[ExtensionAttribute]
public static bool LastParameterAcceptsCancellationToken(IParameterInfo[] parameters);
}
[ExtensionAttribute]
internal static class NUnit.Framework.Internal.Extensions.IEnumerableExtensions : object {
    [NullableContextAttribute("2")]
[ExtensionAttribute]
public static bool IsSortable(IEnumerable collection);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ExtensionAttribute]
internal static class NUnit.Framework.Internal.Extensions.IPropertyBagDataExtensions : object {
    [ExtensionAttribute]
internal static void AddIgnoreUntilReason(IPropertyBag properties, DateTimeOffset untilDate, string reason);
    [ExtensionAttribute]
internal static T TryGet(IPropertyBag properties, string key, T defaultValue);
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
[ExtensionAttribute]
internal static class NUnit.Framework.Internal.Extensions.MethodInfoExtensions : object {
    [ExtensionAttribute]
public static TReturn InvokeMaybeAwait(MethodInfo m);
    [ExtensionAttribute]
public static TReturn InvokeMaybeAwait(MethodInfo m, Object[] methodArgs);
}
[ExtensionAttribute]
internal static class NUnit.Framework.Internal.Extensions.TestExtensions : object {
    [NullableContextAttribute("2")]
[ExtensionAttribute]
public static bool HasLifeCycle(ITest test, LifeCycle lifeCycle);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ExtensionAttribute]
internal static class NUnit.Framework.Internal.Extensions.TypeExtensions : object {
    [ExtensionAttribute]
public static bool ImplementsIComparable(Type type);
    [ExtensionAttribute]
public static bool IsSortable(Type type);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class NUnit.Framework.Internal.Filters.AndFilter : CompositeFilter {
    protected string ElementName { get; }
    public AndFilter(TestFilter[] filters);
    public virtual bool Pass(ITest test, bool negated);
    public virtual bool Match(ITest test);
    public virtual bool IsExplicitMatch(ITest test);
    protected virtual string get_ElementName();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class NUnit.Framework.Internal.Filters.CategoryFilter : ValueMatchFilter {
    protected string ElementName { get; }
    public CategoryFilter(string name, bool isRegex);
    public virtual bool Match(ITest test);
    protected virtual string get_ElementName();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class NUnit.Framework.Internal.Filters.ClassNameFilter : ValueMatchFilter {
    internal static string XmlElementName;
    protected string ElementName { get; }
    public ClassNameFilter(string expectedValue, bool isRegex);
    public virtual bool Match(ITest test);
    protected virtual string get_ElementName();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal abstract class NUnit.Framework.Internal.Filters.CompositeFilter : TestFilter {
    [CompilerGeneratedAttribute]
private TestFilter[] <Filters>k__BackingField;
    public TestFilter[] Filters { get; }
    protected string ElementName { get; }
    public CompositeFilter(TestFilter[] filters);
    [CompilerGeneratedAttribute]
public TestFilter[] get_Filters();
    public abstract virtual bool Pass(ITest test, bool negated);
    public abstract virtual bool Match(ITest test);
    public abstract virtual bool IsExplicitMatch(ITest test);
    public virtual TNode AddToXml(TNode parentNode, bool recursive);
    protected abstract virtual string get_ElementName();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class NUnit.Framework.Internal.Filters.FullNameFilter : ValueMatchFilter {
    internal static string XmlElementName;
    protected string ElementName { get; }
    public FullNameFilter(string expectedValue, bool isRegex);
    public virtual bool Match(ITest test);
    protected virtual string get_ElementName();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class NUnit.Framework.Internal.Filters.IdFilter : ValueMatchFilter {
    internal static string XmlElementName;
    protected string ElementName { get; }
    public IdFilter(string id);
    public virtual bool Match(ITest test);
    protected virtual string get_ElementName();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class NUnit.Framework.Internal.Filters.InFilter : TestFilter {
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private Func`2<ITest, string> _selector;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private HashSet`1<string> _values;
    private string _xmlElementName;
    private InFilter(Func`2<ITest, string> selector, IEnumerable`1<string> values, string xmlElementName);
    public static bool TryOptimize(OrFilter orFilter, InFilter& optimized);
    public virtual bool Match(ITest test);
    public virtual TNode AddToXml(TNode parentNode, bool recursive);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class NUnit.Framework.Internal.Filters.MethodNameFilter : ValueMatchFilter {
    internal static string XmlElementName;
    protected string ElementName { get; }
    public MethodNameFilter(string expectedValue, bool isRegex);
    public virtual bool Match(ITest test);
    protected virtual string get_ElementName();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class NUnit.Framework.Internal.Filters.NamespaceFilter : ValueMatchFilter {
    internal static string XmlElementName;
    protected string ElementName { get; }
    public NamespaceFilter(string expectedValue, bool isRegex);
    public virtual bool Match(ITest test);
    protected virtual string get_ElementName();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class NUnit.Framework.Internal.Filters.NotFilter : TestFilter {
    [CompilerGeneratedAttribute]
private TestFilter <BaseFilter>k__BackingField;
    public TestFilter BaseFilter { get; }
    public NotFilter(TestFilter baseFilter);
    [CompilerGeneratedAttribute]
public TestFilter get_BaseFilter();
    public virtual bool Pass(ITest test, bool negated);
    public virtual bool Match(ITest test);
    public virtual bool IsExplicitMatch(ITest test);
    public virtual TNode AddToXml(TNode parentNode, bool recursive);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class NUnit.Framework.Internal.Filters.OrFilter : CompositeFilter {
    internal static string XmlElementName;
    protected string ElementName { get; }
    public OrFilter(TestFilter[] filters);
    public virtual bool Pass(ITest test, bool negated);
    public virtual bool Match(ITest test);
    public virtual bool IsExplicitMatch(ITest test);
    protected virtual string get_ElementName();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class NUnit.Framework.Internal.Filters.PartitionFilter : TestFilter {
    [CompilerGeneratedAttribute]
private UInt32 <PartitionNumber>k__BackingField;
    [CompilerGeneratedAttribute]
private UInt32 <PartitionCount>k__BackingField;
    private ThreadLocal`1<Byte[]> _buffer;
    public UInt32 PartitionNumber { get; private set; }
    public UInt32 PartitionCount { get; private set; }
    public PartitionFilter(UInt32 partitionNumber, UInt32 partitionCount);
    [CompilerGeneratedAttribute]
public UInt32 get_PartitionNumber();
    [CompilerGeneratedAttribute]
private void set_PartitionNumber(UInt32 value);
    [CompilerGeneratedAttribute]
public UInt32 get_PartitionCount();
    [CompilerGeneratedAttribute]
private void set_PartitionCount(UInt32 value);
    public static bool TryCreate(string value, PartitionFilter& partitionFilter);
    public virtual bool Match(ITest test);
    public virtual TNode AddToXml(TNode parentNode, bool recursive);
    public UInt32 ComputePartitionNumber(ITest value);
    private UInt32 ComputeHashValue(string name);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class NUnit.Framework.Internal.Filters.PropertyFilter : ValueMatchFilter {
    private string _propertyName;
    protected string ElementName { get; }
    public PropertyFilter(string propertyName, string expectedValue, bool isRegex);
    public virtual bool Match(ITest test);
    public virtual TNode AddToXml(TNode parentNode, bool recursive);
    protected virtual string get_ElementName();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class NUnit.Framework.Internal.Filters.TestNameFilter : ValueMatchFilter {
    internal static string XmlElementName;
    protected string ElementName { get; }
    public TestNameFilter(string expectedValue, bool isRegex);
    public virtual bool Match(ITest test);
    protected virtual string get_ElementName();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal abstract class NUnit.Framework.Internal.Filters.ValueMatchFilter : TestFilter {
    [NullableAttribute("2")]
private Regex _regex;
    [CompilerGeneratedAttribute]
private string <ExpectedValue>k__BackingField;
    public string ExpectedValue { get; }
    public bool IsRegex { get; }
    protected string ElementName { get; }
    protected ValueMatchFilter(string expectedValue, bool isRegex);
    [CompilerGeneratedAttribute]
public string get_ExpectedValue();
    public bool get_IsRegex();
    [NullableContextAttribute("2")]
protected bool Match(string input);
    public virtual TNode AddToXml(TNode parentNode, bool recursive);
    protected abstract virtual string get_ElementName();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal static class NUnit.Framework.Internal.FSharpAsyncAwaitAdapter : object {
    [NullableAttribute("2")]
private static MethodInfo _startImmediateAsTaskMethod;
    public static bool IsAwaitable(Type awaitableType);
    public static Type GetResultType(Type awaitableType);
    private static AsyncInfo GetAsyncInfo(Type asyncType);
    public static AwaitAdapter TryCreate(object awaitable);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class NUnit.Framework.Internal.GenericMethodHelper : object {
    private static Type ConflictingTypesMarker;
    [CompilerGeneratedAttribute]
private MethodInfo <Method>k__BackingField;
    [CompilerGeneratedAttribute]
private Type[] <TypeParms>k__BackingField;
    [CompilerGeneratedAttribute]
private Type[] <TypeArgs>k__BackingField;
    [CompilerGeneratedAttribute]
private Type[] <ParmTypes>k__BackingField;
    private MethodInfo Method { get; }
    private Type[] TypeParms { get; }
    private Type[] TypeArgs { get; }
    private Type[] ParmTypes { get; }
    public GenericMethodHelper(MethodInfo method);
    private static GenericMethodHelper();
    [CompilerGeneratedAttribute]
private MethodInfo get_Method();
    [CompilerGeneratedAttribute]
private Type[] get_TypeParms();
    [CompilerGeneratedAttribute]
private Type[] get_TypeArgs();
    [CompilerGeneratedAttribute]
private Type[] get_ParmTypes();
    public bool TryGetTypeArguments(Object[] argList, Type[]& typeArguments);
    private void TryApplyArgType(Type parmType, Type argType);
    private void ApplyArgType(Type parmType, Type argType);
    private bool IsAssignableToGenericType(Type givenType, Type genericType);
}
[NullableContextAttribute("1")]
public interface NUnit.Framework.Internal.ILogger {
    public abstract virtual void Error(string message);
    public abstract virtual void Error(string message, Object[] args);
    public abstract virtual void Warning(string message);
    public abstract virtual void Warning(string message, Object[] args);
    public abstract virtual void Info(string message);
    public abstract virtual void Info(string message, Object[] args);
    public abstract virtual void Debug(string message);
    public abstract virtual void Debug(string message, Object[] args);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class NUnit.Framework.Internal.ImmutableStack`1 : ValueType {
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private Node<T> _head;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public static ImmutableStack`1<T> Empty { get; }
    private ImmutableStack`1(Node<T> head);
    public static ImmutableStack`1<T> get_Empty();
    public ImmutableStack`1<T> Push(T value);
    [IteratorStateMachineAttribute("NUnit.Framework.Internal.ImmutableStack`1/<GetEnumerator>d__5")]
public sealed virtual IEnumerator`1<T> GetEnumerator();
    private sealed virtual override IEnumerator System.Collections.IEnumerable.GetEnumerator();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public static class NUnit.Framework.Internal.InternalTrace : object {
    private static InternalTraceLevel _traceLevel;
    [NullableAttribute("2")]
private static InternalTraceWriter _traceWriter;
    public static bool Initialized { get; }
    public static bool get_Initialized();
    public static void Initialize(string logName, InternalTraceLevel level);
    public static void Initialize(TextWriter writer, InternalTraceLevel level);
    public static Logger GetLogger(string name);
    public static Logger GetLogger(Type type);
}
public enum NUnit.Framework.Internal.InternalTraceLevel : Enum {
    public int value__;
    public static InternalTraceLevel Default;
    public static InternalTraceLevel Off;
    public static InternalTraceLevel Error;
    public static InternalTraceLevel Warning;
    public static InternalTraceLevel Info;
    public static InternalTraceLevel Debug;
    public static InternalTraceLevel Verbose;
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class NUnit.Framework.Internal.InternalTraceWriter : TextWriter {
    private TextWriter _writer;
    private object _myLock;
    public Encoding Encoding { get; }
    public InternalTraceWriter(string logPath);
    public InternalTraceWriter(TextWriter writer);
    public virtual Encoding get_Encoding();
    public virtual void Write(char value);
    [NullableContextAttribute("2")]
public virtual void Write(string value);
    [NullableContextAttribute("2")]
public virtual void WriteLine(string value);
    protected virtual void Dispose(bool disposing);
    public virtual void Flush();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class NUnit.Framework.Internal.InvalidDataSourceException : Exception {
    public InvalidDataSourceException(string message);
    public InvalidDataSourceException(string message, Exception inner);
    protected InvalidDataSourceException(SerializationInfo info, StreamingContext context);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class NUnit.Framework.Internal.InvalidPlatformException : ArgumentException {
    public InvalidPlatformException(string message);
    public InvalidPlatformException(string message, Exception inner);
    protected InvalidPlatformException(SerializationInfo info, StreamingContext context);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class NUnit.Framework.Internal.InvalidTestFixtureException : Exception {
    public InvalidTestFixtureException(string message);
    public InvalidTestFixtureException(string message, Exception inner);
    protected InvalidTestFixtureException(SerializationInfo info, StreamingContext context);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class NUnit.Framework.Internal.Logger : object {
    private static string TIME_FMT;
    private static string TRACE_FMT;
    private string _name;
    private string _fullname;
    private InternalTraceLevel _maxLevel;
    [NullableAttribute("2")]
private TextWriter _writer;
    public Logger(string name, InternalTraceLevel level, TextWriter writer);
    private static Logger();
    public sealed virtual void Error(string message);
    public sealed virtual void Error(string message, Object[] args);
    public sealed virtual void Warning(string message);
    public sealed virtual void Warning(string message, Object[] args);
    public sealed virtual void Info(string message);
    public sealed virtual void Info(string message, Object[] args);
    public sealed virtual void Debug(string message);
    public sealed virtual void Debug(string message, Object[] args);
    private void Log(InternalTraceLevel level, string message);
    private void Log(InternalTraceLevel level, string format, Object[] args);
    private void WriteLog(InternalTraceLevel level, string message);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal abstract class NUnit.Framework.Internal.MessagePumpStrategy : object {
    public abstract virtual void WaitForCompletion(AwaitAdapter awaiter);
    public static MessagePumpStrategy FromCurrentSynchronizationContext();
    private static void ContinueOnSameSynchronizationContext(AwaitAdapter awaiter, Action continuation);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class NUnit.Framework.Internal.MethodWrapper : object {
    [CompilerGeneratedAttribute]
private ITypeInfo <TypeInfo>k__BackingField;
    [CompilerGeneratedAttribute]
private MethodInfo <MethodInfo>k__BackingField;
    public ITypeInfo TypeInfo { get; }
    public MethodInfo MethodInfo { get; }
    public string Name { get; }
    public bool IsAbstract { get; }
    public bool IsPublic { get; }
    public bool IsStatic { get; }
    public bool ContainsGenericParameters { get; }
    public bool IsGenericMethod { get; }
    public bool IsGenericMethodDefinition { get; }
    public ITypeInfo ReturnType { get; }
    public MethodWrapper(Type type, MethodInfo method);
    public MethodWrapper(Type type, string methodName);
    [CompilerGeneratedAttribute]
public sealed virtual ITypeInfo get_TypeInfo();
    [CompilerGeneratedAttribute]
public sealed virtual MethodInfo get_MethodInfo();
    public sealed virtual string get_Name();
    public sealed virtual bool get_IsAbstract();
    public sealed virtual bool get_IsPublic();
    public sealed virtual bool get_IsStatic();
    public sealed virtual bool get_ContainsGenericParameters();
    public sealed virtual bool get_IsGenericMethod();
    public sealed virtual bool get_IsGenericMethodDefinition();
    public sealed virtual ITypeInfo get_ReturnType();
    public sealed virtual IParameterInfo[] GetParameters();
    public sealed virtual Type[] GetGenericArguments();
    public sealed virtual IMethodInfo MakeGenericMethod(Type[] typeArguments);
    public sealed virtual T[] GetCustomAttributes(bool inherit);
    public sealed virtual bool IsDefined(bool inherit);
    [NullableContextAttribute("2")]
public sealed virtual object Invoke(object fixture, Object[] args);
    public virtual string ToString();
    [NullableContextAttribute("2")]
public sealed virtual bool Equals(MethodWrapper other);
    [NullableContextAttribute("2")]
public virtual bool Equals(object obj);
    public virtual int GetHashCode();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public static class NUnit.Framework.Internal.NetPlatformHelper : object {
    private static Char[] Digits;
    private static NetPlatformHelper();
    public static bool IsPlatformSupported(String[] platforms);
    public static bool IsPlatformSupported(string platform);
    private static void ParseOSAndVersion(string plaformName, String& os, Version& version);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class NUnit.Framework.Internal.NUnitException : Exception {
    public NUnitException(string message);
    public NUnitException(string message, Exception inner);
    protected NUnitException(SerializationInfo info, StreamingContext context);
}
internal static class NUnit.Framework.Internal.On : object {
    [NullableContextAttribute("1")]
public static IDisposable Dispose(Action action);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class NUnit.Framework.Internal.OSPlatform : object {
    private static Lazy`1<OSPlatform> LazyCurrentPlatform;
    public static PlatformID UnixPlatformIDMicrosoft;
    public static PlatformID UnixPlatformIDMono;
    public static PlatformID XBoxPlatformID;
    public static PlatformID MacOSXPlatformID;
    [CompilerGeneratedAttribute]
private PlatformID <Platform>k__BackingField;
    [CompilerGeneratedAttribute]
private Version <Version>k__BackingField;
    [CompilerGeneratedAttribute]
private ProductType <Product>k__BackingField;
    public static OSPlatform CurrentPlatform { get; }
    public PlatformID Platform { get; }
    public Version Version { get; }
    public ProductType Product { get; }
    public bool IsWindows { get; }
    public bool IsUnix { get; }
    public bool IsWin32S { get; }
    public bool IsWin32Windows { get; }
    public bool IsWin32NT { get; }
    public bool IsWinCE { get; }
    public bool IsXbox { get; }
    public bool IsMacOSX { get; }
    public bool IsWin95 { get; }
    public bool IsWin98 { get; }
    public bool IsWinME { get; }
    public bool IsNT3 { get; }
    public bool IsNT4 { get; }
    public bool IsNT5 { get; }
    public bool IsWin2K { get; }
    public bool IsWinXP { get; }
    public bool IsWin2003Server { get; }
    public bool IsNT6 { get; }
    public bool IsNT60 { get; }
    public bool IsNT61 { get; }
    public bool IsNT62 { get; }
    public bool IsNT63 { get; }
    public bool IsVista { get; }
    public bool IsWin2008Server { get; }
    public bool IsWin2008ServerR1 { get; }
    public bool IsWin2008ServerR2 { get; }
    public bool IsWin2012Server { get; }
    public bool IsWin2012ServerR1 { get; }
    public bool IsWin2012ServerR2 { get; }
    public bool IsWindows7 { get; }
    public bool IsWindows8 { get; }
    public bool IsWindows81 { get; }
    public bool IsWindows10 { get; }
    public bool IsWindows11 { get; }
    public bool IsWindowsServer10 { get; }
    public static string OSDescription { get; }
    public OSPlatform(PlatformID platform, Version version);
    public OSPlatform(PlatformID platform, Version version, ProductType product);
    private static OSPlatform();
    public static OSPlatform get_CurrentPlatform();
    [SupportedOSPlatformAttribute("windows")]
private static Version GetWindows81PlusVersion(Version version);
    private static ProductType GetProductType();
    [SupportedOSPlatformAttribute("windows")]
private static ProductType GetWindowsProductType();
    [CompilerGeneratedAttribute]
public PlatformID get_Platform();
    public virtual string ToString();
    [CompilerGeneratedAttribute]
public Version get_Version();
    [CompilerGeneratedAttribute]
public ProductType get_Product();
    public bool get_IsWindows();
    public bool get_IsUnix();
    public bool get_IsWin32S();
    public bool get_IsWin32Windows();
    public bool get_IsWin32NT();
    public bool get_IsWinCE();
    public bool get_IsXbox();
    public bool get_IsMacOSX();
    private static int UnameSafe(IntPtr buf);
    private static int uname(IntPtr buf);
    private static bool CheckIfIsMacOSX(PlatformID platform);
    public bool get_IsWin95();
    public bool get_IsWin98();
    public bool get_IsWinME();
    public bool get_IsNT3();
    public bool get_IsNT4();
    public bool get_IsNT5();
    public bool get_IsWin2K();
    public bool get_IsWinXP();
    public bool get_IsWin2003Server();
    public bool get_IsNT6();
    public bool get_IsNT60();
    public bool get_IsNT61();
    public bool get_IsNT62();
    public bool get_IsNT63();
    public bool get_IsVista();
    public bool get_IsWin2008Server();
    public bool get_IsWin2008ServerR1();
    public bool get_IsWin2008ServerR2();
    public bool get_IsWin2012Server();
    public bool get_IsWin2012ServerR1();
    public bool get_IsWin2012ServerR2();
    public bool get_IsWindows7();
    public bool get_IsWindows8();
    public bool get_IsWindows81();
    public bool get_IsWindows10();
    public bool get_IsWindows11();
    public bool get_IsWindowsServer10();
    public static string get_OSDescription();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal static class NUnit.Framework.Internal.ParamAttributeTypeConversions : object {
    public static IEnumerable ConvertData(Object[] data, Type targetType);
    private static IEnumerable GetData(Object[] data, Type targetType);
    public static object Convert(object value, Type targetType);
    [NullableContextAttribute("2")]
public static bool TryConvert(object value, Type targetType, Object& convertedValue);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class NUnit.Framework.Internal.ParameterizedFixtureSuite : TestSuite {
    private bool _genericFixture;
    public string TestType { get; }
    public ParameterizedFixtureSuite(ITypeInfo typeInfo);
    public ParameterizedFixtureSuite(ParameterizedFixtureSuite suite, ITestFilter filter);
    public virtual string get_TestType();
    public virtual TestSuite Copy(ITestFilter filter);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class NUnit.Framework.Internal.ParameterizedMethodSuite : TestSuite {
    private bool _isTheory;
    public IMethodInfo Method { get; }
    public string TestType { get; }
    public ParameterizedMethodSuite(IMethodInfo method);
    public ParameterizedMethodSuite(ParameterizedMethodSuite suite, ITestFilter filter);
    public IMethodInfo get_Method();
    public virtual string get_TestType();
    public virtual TestSuite Copy(ITestFilter filter);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class NUnit.Framework.Internal.ParameterWrapper : object {
    [CompilerGeneratedAttribute]
private IMethodInfo <Method>k__BackingField;
    [CompilerGeneratedAttribute]
private ParameterInfo <ParameterInfo>k__BackingField;
    public bool IsOptional { get; }
    public IMethodInfo Method { get; private set; }
    public ParameterInfo ParameterInfo { get; private set; }
    public Type ParameterType { get; }
    public ParameterWrapper(IMethodInfo method, ParameterInfo parameterInfo);
    public sealed virtual bool get_IsOptional();
    [CompilerGeneratedAttribute]
public sealed virtual IMethodInfo get_Method();
    [CompilerGeneratedAttribute]
private void set_Method(IMethodInfo value);
    [CompilerGeneratedAttribute]
public sealed virtual ParameterInfo get_ParameterInfo();
    [CompilerGeneratedAttribute]
private void set_ParameterInfo(ParameterInfo value);
    public sealed virtual Type get_ParameterType();
    public sealed virtual T[] GetCustomAttributes(bool inherit);
    public sealed virtual bool IsDefined(bool inherit);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class NUnit.Framework.Internal.PlatformHelper : object {
    private OSPlatform _os;
    private RuntimeFramework _rt;
    private static string CommonOSPlatforms;
    public static string OSPlatforms;
    public static string RuntimePlatforms;
    [CompilerGeneratedAttribute]
private string <Reason>k__BackingField;
    public string Reason { get; private set; }
    public PlatformHelper(OSPlatform os, RuntimeFramework rt);
    private static PlatformHelper();
    public bool IsPlatformSupported(String[] platforms);
    public bool IsPlatformSupported(PlatformAttribute platformAttribute);
    public bool IsPlatformSupported(TestCaseAttribute testCaseAttribute);
    [NullableContextAttribute("2")]
private bool IsPlatformSupported(string include, string exclude);
    public bool IsPlatformSupported(string platform);
    [CompilerGeneratedAttribute]
public string get_Reason();
    [CompilerGeneratedAttribute]
private void set_Reason(string value);
    private bool IsRuntimeSupported(string platformName);
    [NullableContextAttribute("2")]
private bool IsRuntimeSupported(RuntimeType runtime, string versionSpecification);
    [NullableContextAttribute("2")]
private bool IsNetCoreRuntimeSupported(RuntimeType runtime, string versionSpecification);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class NUnit.Framework.Internal.PreFilter : object {
    private static Char[] ARG_START;
    private List`1<FilterElement> _filters;
    public static PreFilter Empty { get; }
    public bool IsEmpty { get; }
    private static PreFilter();
    public static PreFilter get_Empty();
    public bool get_IsEmpty();
    public void Add(string filterText);
    public sealed virtual bool IsMatch(Type type);
    public sealed virtual bool IsMatch(Type type, MethodInfo method);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[DefaultMemberAttribute("Item")]
public class NUnit.Framework.Internal.PropertyBag : object {
    private Dictionary`2<string, IList> _inner;
    public ICollection`1<string> Keys { get; }
    public IList Item { get; public set; }
    public sealed virtual void Add(string key, object value);
    public sealed virtual void Set(string key, object value);
    public sealed virtual object Get(string key);
    public sealed virtual bool ContainsKey(string key);
    public sealed virtual bool TryGet(string key, IList& values);
    public sealed virtual ICollection`1<string> get_Keys();
    public sealed virtual IList get_Item(string key);
    public sealed virtual void set_Item(string key, IList value);
    public sealed virtual TNode ToXml(bool recursive);
    public sealed virtual TNode AddToXml(TNode parentNode, bool recursive);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public static class NUnit.Framework.Internal.PropertyNames : object {
    public static string AppDomain;
    public static string JoinType;
    public static string ProcessId;
    public static string ProviderStackTrace;
    public static string SkipReason;
    public static string Author;
    public static string ApartmentState;
    public static string Category;
    public static string Description;
    public static string LevelOfParallelism;
    public static string MaxTime;
    public static string ParallelScope;
    public static string RepeatCount;
    public static string RequiresThread;
    public static string SetCulture;
    public static string SetUICulture;
    public static string TestOf;
    public static string Timeout;
    public static string UseCancellation;
    public static string IgnoreUntilDate;
    public static string Order;
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class NUnit.Framework.Internal.Randomizer : Random {
    private static Random _seedGenerator;
    private static int _initialSeed;
    private static Dictionary`2<MemberInfo, Randomizer> Randomizers;
    public static string DefaultStringChars;
    private static int DefaultStringLength;
    private static int MaxStackAllocSize;
    public static int InitialSeed { get; public set; }
    private static Randomizer();
    public Randomizer(int seed);
    public static int get_InitialSeed();
    public static void set_InitialSeed(int value);
    public static Randomizer GetRandomizer(MemberInfo member);
    public static Randomizer GetRandomizer(ParameterInfo parameter);
    public static Randomizer CreateRandomizer();
    [CLSCompliantAttribute("False")]
public UInt32 NextUInt();
    [CLSCompliantAttribute("False")]
public UInt32 NextUInt(UInt32 max);
    [CLSCompliantAttribute("False")]
public UInt32 NextUInt(UInt32 min, UInt32 max);
    public short NextShort();
    public short NextShort(short max);
    public short NextShort(short min, short max);
    [CLSCompliantAttribute("False")]
public ushort NextUShort();
    [CLSCompliantAttribute("False")]
public ushort NextUShort(ushort max);
    [CLSCompliantAttribute("False")]
public ushort NextUShort(ushort min, ushort max);
    public long NextLong();
    public long NextLong(long max);
    public long NextLong(long min, long max);
    [CLSCompliantAttribute("False")]
public ulong NextULong();
    [CLSCompliantAttribute("False")]
public ulong NextULong(ulong max);
    [CLSCompliantAttribute("False")]
public ulong NextULong(ulong min, ulong max);
    public byte NextByte();
    public byte NextByte(byte max);
    public byte NextByte(byte min, byte max);
    [CLSCompliantAttribute("False")]
public sbyte NextSByte();
    [CLSCompliantAttribute("False")]
public sbyte NextSByte(sbyte max);
    [CLSCompliantAttribute("False")]
public sbyte NextSByte(sbyte min, sbyte max);
    public bool NextBool();
    public bool NextBool(double probability);
    public double NextDouble(double max);
    public double NextDouble(double min, double max);
    public float NextFloat();
    public float NextFloat(float max);
    public float NextFloat(float min, float max);
    public object NextEnum(Type type);
    public T NextEnum();
    public string GetString(int outputLength, string allowedChars);
    public string GetString(int outputLength);
    public string GetString();
    public decimal NextDecimal();
    public decimal NextDecimal(decimal max);
    public decimal NextDecimal(decimal min, decimal max);
    private static UInt32 MaskToRemoveBitsGuaranteedToExceedMaximum(UInt32 maximum);
    public Guid NextGuid();
    private int RawInt32();
    private UInt32 RawUInt32();
    private ulong RawUInt64();
    [NullableContextAttribute("0")]
[CompilerGeneratedAttribute]
private void <GetString>g__FillSpan|45_0(Span`1<char> data, string allowedChars);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ExtensionAttribute]
public static class NUnit.Framework.Internal.Reflect : object {
    internal static BindingFlags AllMembers;
    private static Dictionary`2<Type, List`1<Type>> ConvertibleValueTypes;
    private static Reflect();
    public static bool HasMethodWithAttribute(Type fixtureType, Type attributeType);
    public static object Construct(Type type);
    public static object Construct(Type type, Object[] arguments);
    internal static Type[] GetTypeArray(Object[] objects);
    internal static IEnumerable`1<ConstructorInfo> GetConstructors(Type type, Type[] matchingTypes);
    [ExtensionAttribute]
internal static bool ParametersMatch(ParameterInfo[] pinfos, Type[] ptypes);
    [ExtensionAttribute]
internal static bool CanImplicitlyConvertTo(Type from, Type to);
    [NullableContextAttribute("2")]
public static object InvokeMethod(MethodInfo method, object fixture);
    [NullableContextAttribute("2")]
public static object InvokeMethod(MethodInfo method, object fixture, Object[] args);
    public static PropertyInfo GetUltimateShadowingProperty(Type type, string name, BindingFlags bindingFlags);
    internal static bool IsAssignableFromNull(Type type);
    private static bool IsNullable(Type type);
    [IteratorStateMachineAttribute("NUnit.Framework.Internal.Reflect/<TypeAndBaseTypes>d__14")]
[ExtensionAttribute]
internal static IEnumerable`1<Type> TypeAndBaseTypes(Type type);
    [ExtensionAttribute]
internal static MethodInfo GetNonGenericPublicInstanceMethod(Type type, string name, Type[] parameterTypes);
    [ExtensionAttribute]
internal static PropertyInfo GetPublicInstanceProperty(Type type, string name, Type[] indexParameterTypes);
    [NullableContextAttribute("2")]
[ExtensionAttribute]
internal static object InvokeWithTransparentExceptions(MethodBase methodBase, object instance);
    [ExtensionAttribute]
internal static object DynamicInvokeWithTransparentExceptions(Delegate delegate);
    [ExtensionAttribute]
internal static bool IsFSharpOption(Type type, Type& someType);
    internal static bool IsVoidOrUnit(Type type);
    public static MethodInfo GetDefaultIndexer(Type type, Type[] indexerTypes);
    private static string GetIndexerName(Type type);
    [ExtensionAttribute]
public static MemberInfo[] GetMemberIncludingFromBase(Type type, string name, BindingFlags flags);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class NUnit.Framework.Internal.RuntimeFramework : object {
    public static Version DefaultVersion;
    private static Lazy`1<RuntimeFramework> LazyCurrentFramework;
    [CompilerGeneratedAttribute]
private RuntimeType <Runtime>k__BackingField;
    [CompilerGeneratedAttribute]
private Version <FrameworkVersion>k__BackingField;
    [CompilerGeneratedAttribute]
private Version <ClrVersion>k__BackingField;
    [CompilerGeneratedAttribute]
private string <DisplayName>k__BackingField;
    public static RuntimeFramework CurrentFramework { get; }
    public RuntimeType Runtime { get; }
    public Version FrameworkVersion { get; private set; }
    public Version ClrVersion { get; private set; }
    public bool AllowAnyVersion { get; }
    public string DisplayName { get; private set; }
    public RuntimeFramework(RuntimeType runtime, Version version);
    private static RuntimeFramework();
    [MemberNotNullAttribute("FrameworkVersion")]
[MemberNotNullAttribute("ClrVersion")]
private void InitFromFrameworkVersion(Version version);
    private static void ThrowInvalidFrameworkVersion(Version version);
    [MemberNotNullAttribute("FrameworkVersion")]
[MemberNotNullAttribute("ClrVersion")]
private void InitFromClrVersion(Version version);
    public static RuntimeFramework get_CurrentFramework();
    [CompilerGeneratedAttribute]
public RuntimeType get_Runtime();
    [CompilerGeneratedAttribute]
public Version get_FrameworkVersion();
    [CompilerGeneratedAttribute]
private void set_FrameworkVersion(Version value);
    [CompilerGeneratedAttribute]
public Version get_ClrVersion();
    [CompilerGeneratedAttribute]
private void set_ClrVersion(Version value);
    public bool get_AllowAnyVersion();
    [CompilerGeneratedAttribute]
public string get_DisplayName();
    [CompilerGeneratedAttribute]
private void set_DisplayName(string value);
    public static RuntimeFramework Parse(string s);
    public virtual string ToString();
    public bool Supports(RuntimeFramework target);
    private static bool IsNetCore();
    private static RuntimeType ParseRuntimeType(string s);
    private static bool IsRuntimeTypeName(string name);
    private static string GetShortName(RuntimeType runtime, Version version);
    private static string GetDefaultDisplayName(RuntimeType runtime, Version version);
    private static bool VersionsMatch(Version v1, Version v2);
}
public enum NUnit.Framework.Internal.RuntimeType : Enum {
    public int value__;
    public static RuntimeType Any;
    public static RuntimeType NetFramework;
    public static RuntimeType SSCLI;
    public static RuntimeType Mono;
    public static RuntimeType MonoTouch;
    public static RuntimeType NetCore;
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class NUnit.Framework.Internal.SandboxedThreadState : object {
    [CompilerGeneratedAttribute]
private CultureInfo <Culture>k__BackingField;
    [CompilerGeneratedAttribute]
private CultureInfo <UICulture>k__BackingField;
    [NullableAttribute("2")]
[CompilerGeneratedAttribute]
private IPrincipal <Principal>k__BackingField;
    [NullableAttribute("2")]
private SynchronizationContext _synchronizationContext;
    public CultureInfo Culture { get; }
    public CultureInfo UICulture { get; }
    [NullableAttribute("2")]
public IPrincipal Principal { get; }
    private SandboxedThreadState(CultureInfo culture, CultureInfo uiCulture, IPrincipal principal, SynchronizationContext synchronizationContext);
    [CompilerGeneratedAttribute]
public CultureInfo get_Culture();
    [CompilerGeneratedAttribute]
public CultureInfo get_UICulture();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public IPrincipal get_Principal();
    public static SandboxedThreadState Capture();
    public void Restore();
    public SandboxedThreadState WithCulture(CultureInfo culture);
    public SandboxedThreadState WithUICulture(CultureInfo uiCulture);
    public SandboxedThreadState WithPrincipal(IPrincipal principal);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class NUnit.Framework.Internal.SetUpFixture : TestSuite {
    public ITypeInfo TypeInfo { get; }
    public SetUpFixture(ITypeInfo type);
    public SetUpFixture(SetUpFixture setUpFixture, ITestFilter filter);
    private static string GetName(ITypeInfo type);
    public ITypeInfo get_TypeInfo();
    public virtual TestSuite Copy(ITestFilter filter);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class NUnit.Framework.Internal.SingleThreadedTestSynchronizationContext : SynchronizationContext {
    private static string ShutdownTimeoutMessage;
    private TimeSpan _shutdownTimeout;
    private Queue`1<ScheduledWork> _queue;
    private Status _status;
    [NullableAttribute("2")]
private Stopwatch _timeSinceShutdown;
    public SingleThreadedTestSynchronizationContext(TimeSpan shutdownTimeout);
    public virtual void Post(SendOrPostCallback d, object state);
    public virtual void Send(SendOrPostCallback d, object state);
    private void AddWork(ScheduledWork work);
    public void ShutDown();
    public void Run();
    private bool TryTake(ScheduledWork& scheduledWork);
    private static Exception ErrorAndGetExceptionForShutdownTimeout();
    public sealed virtual void Dispose();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class NUnit.Framework.Internal.StackFilter : object {
    private static string DEFAULT_TOP_OF_STACK_PATTERN;
    private static string DEFAULT_BOTTOM_OF_STACK_PATTERN;
    public static StackFilter DefaultFilter;
    [NullableAttribute("2")]
private Regex _topOfStackRegex;
    [NullableAttribute("2")]
private Regex _bottomOfStackRegex;
    [NullableContextAttribute("2")]
public StackFilter(string topOfStackPattern, string bottomOfStackPattern);
    public StackFilter(string topOfStackPattern);
    private static StackFilter();
    [NullableContextAttribute("2")]
public string Filter(string rawTrace);
}
[ExtensionAttribute]
internal static class NUnit.Framework.Internal.StringExtensions : object {
    [NullableContextAttribute("1")]
[ExtensionAttribute]
internal static StringTokenEnumerator Tokenize(string s, char separator, bool returnEmptyTokens);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class NUnit.Framework.Internal.StringTokenEnumerator : ValueType {
    private string _target;
    private char _separator;
    private bool _returnEmptyTokens;
    private int _currentStartIndex;
    private bool _finised;
    [CompilerGeneratedAttribute]
private string <Current>k__BackingField;
    public string Current { get; private set; }
    private object System.Collections.IEnumerator.Current { get; }
    public StringTokenEnumerator(string target, char separator, bool returnEmptyTokens);
    public sealed virtual bool MoveNext();
    private bool FindNextToken();
    public sealed virtual void Reset();
    public sealed virtual void Dispose();
    [IsReadOnlyAttribute]
[CompilerGeneratedAttribute]
public sealed virtual string get_Current();
    [CompilerGeneratedAttribute]
private void set_Current(string value);
    private sealed virtual override object System.Collections.IEnumerator.get_Current();
    public StringTokenEnumerator GetEnumerator();
    private sealed virtual override IEnumerator System.Collections.IEnumerable.GetEnumerator();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public static class NUnit.Framework.Internal.StringUtil : object {
    public static int Compare(string strA, string strB, bool ignoreCase);
    public static bool StringsEqual(string strA, string strB, bool ignoreCase);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal static class NUnit.Framework.Internal.TaskAwaitAdapter : object {
    public static AwaitAdapter Create(Task task);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public abstract class NUnit.Framework.Internal.Test : object {
    private static int _nextID;
    [NullableAttribute("2")]
private ITypeInfo _declaringTypeInfo;
    [NullableAttribute("2")]
private IMethodInfo _method;
    [CompilerGeneratedAttribute]
private string <Id>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    [CompilerGeneratedAttribute]
private string <FullName>k__BackingField;
    [NullableAttribute("2")]
[CompilerGeneratedAttribute]
private ITypeInfo <TypeInfo>k__BackingField;
    [CompilerGeneratedAttribute]
private RunState <RunState>k__BackingField;
    [CompilerGeneratedAttribute]
private IPropertyBag <Properties>k__BackingField;
    [NullableAttribute("2")]
[CompilerGeneratedAttribute]
private ITest <Parent>k__BackingField;
    [NullableAttribute("2")]
[CompilerGeneratedAttribute]
private object <Fixture>k__BackingField;
    [NullableAttribute("2")]
[CompilerGeneratedAttribute]
private static string <IdPrefix>k__BackingField;
    [CompilerGeneratedAttribute]
private int <Seed>k__BackingField;
    [CompilerGeneratedAttribute]
private IMethodInfo[] <SetUpMethods>k__BackingField;
    [CompilerGeneratedAttribute]
private IMethodInfo[] <TearDownMethods>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <RequiresThread>k__BackingField;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private ITestAction[] _actions;
    public string Id { get; public set; }
    public string Name { get; public set; }
    public string FullName { get; public set; }
    [NullableAttribute("2")]
public string ClassName { get; }
    [NullableAttribute("2")]
public string MethodName { get; }
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public Object[] Arguments { get; }
    [NullableAttribute("2")]
public ITypeInfo TypeInfo { get; }
    [NullableAttribute("2")]
public IMethodInfo Method { get; public set; }
    public RunState RunState { get; public set; }
    public string XmlElementName { get; }
    public string TestType { get; }
    public int TestCaseCount { get; }
    public IPropertyBag Properties { get; }
    public bool IsSuite { get; }
    public bool HasChildren { get; }
    [NullableAttribute("2")]
public ITest Parent { get; public set; }
    public IList`1<ITest> Tests { get; }
    [NullableAttribute("2")]
public object Fixture { get; public set; }
    [NullableAttribute("2")]
public static string IdPrefix { get; public set; }
    public int Seed { get; public set; }
    public IMethodInfo[] SetUpMethods { get; protected set; }
    public IMethodInfo[] TearDownMethods { get; protected set; }
    internal bool RequiresThread { get; internal set; }
    internal ITestAction[] Actions { get; }
    protected Test(string name);
    protected Test(string pathName, string name);
    protected Test(ITypeInfo typeInfo);
    protected Test(IMethodInfo method);
    [NullableContextAttribute("2")]
private Test(string pathName, string name, ITypeInfo typeInfo, IMethodInfo method);
    private static Test();
    private static string GetNextId();
    [CompilerGeneratedAttribute]
public sealed virtual string get_Id();
    [CompilerGeneratedAttribute]
public void set_Id(string value);
    [CompilerGeneratedAttribute]
public sealed virtual string get_Name();
    [CompilerGeneratedAttribute]
public void set_Name(string value);
    [CompilerGeneratedAttribute]
public sealed virtual string get_FullName();
    [CompilerGeneratedAttribute]
public void set_FullName(string value);
    [NullableContextAttribute("2")]
public sealed virtual string get_ClassName();
    [NullableContextAttribute("2")]
public virtual string get_MethodName();
    public abstract virtual Object[] get_Arguments();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public sealed virtual ITypeInfo get_TypeInfo();
    [NullableContextAttribute("2")]
public sealed virtual IMethodInfo get_Method();
    [NullableContextAttribute("2")]
public void set_Method(IMethodInfo value);
    [CompilerGeneratedAttribute]
public sealed virtual RunState get_RunState();
    [CompilerGeneratedAttribute]
public void set_RunState(RunState value);
    public abstract virtual string get_XmlElementName();
    public virtual string get_TestType();
    public virtual int get_TestCaseCount();
    [CompilerGeneratedAttribute]
public sealed virtual IPropertyBag get_Properties();
    public sealed virtual bool get_IsSuite();
    public abstract virtual bool get_HasChildren();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public sealed virtual ITest get_Parent();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public void set_Parent(ITest value);
    public abstract virtual IList`1<ITest> get_Tests();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public virtual object get_Fixture();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public virtual void set_Fixture(object value);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public static string get_IdPrefix();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public static void set_IdPrefix(string value);
    [CompilerGeneratedAttribute]
public int get_Seed();
    [CompilerGeneratedAttribute]
public void set_Seed(int value);
    [CompilerGeneratedAttribute]
public IMethodInfo[] get_SetUpMethods();
    [CompilerGeneratedAttribute]
protected void set_SetUpMethods(IMethodInfo[] value);
    [CompilerGeneratedAttribute]
public IMethodInfo[] get_TearDownMethods();
    [CompilerGeneratedAttribute]
protected void set_TearDownMethods(IMethodInfo[] value);
    [CompilerGeneratedAttribute]
internal bool get_RequiresThread();
    [CompilerGeneratedAttribute]
internal void set_RequiresThread(bool value);
    internal ITestAction[] get_Actions();
    public abstract virtual TestResult MakeTestResult();
    public void ApplyAttributesToTest(ICustomAttributeProvider provider);
    public void ApplyAttributesToTest(Type type);
    public void ApplyAttributesToTest(IEnumerable`1<IApplyToTest> attributes);
    public void MakeInvalid(string reason);
    public void MakeInvalid(Exception exception, string reason);
    public virtual TAttr[] GetCustomAttributes(bool inherit);
    protected void PopulateTestNode(TNode thisNode, bool recursive);
    [IteratorStateMachineAttribute("NUnit.Framework.Internal.Test/<GetNestedTypes>d__91")]
protected IEnumerable`1<Type> GetNestedTypes(Type inner);
    public sealed virtual TNode ToXml(bool recursive);
    public abstract virtual TNode AddToXml(TNode parentNode, bool recursive);
    [NullableContextAttribute("2")]
public sealed virtual int CompareTo(object obj);
    [NullableContextAttribute("2")]
public sealed virtual int CompareTo(Test other);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class NUnit.Framework.Internal.TestAssembly : TestSuite {
    [NullableAttribute("2")]
[CompilerGeneratedAttribute]
private Assembly <Assembly>k__BackingField;
    [NullableAttribute("2")]
public Assembly Assembly { get; }
    public string TestType { get; }
    public TestAssembly(Assembly assembly, string assemblyNameOrPath);
    public TestAssembly(string assemblyNameOrPath);
    public TestAssembly(TestAssembly assembly, ITestFilter filter);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public Assembly get_Assembly();
    public virtual string get_TestType();
    public virtual TAttr[] GetCustomAttributes(bool inherit);
    public virtual TestSuite Copy(ITestFilter filter);
}
public class NUnit.Framework.Internal.TestCaseParameters : TestParameters {
    [NullableAttribute("2")]
private object _expectedResult;
    [CompilerGeneratedAttribute]
private bool <HasExpectedResult>k__BackingField;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[CompilerGeneratedAttribute]
private Type[] <TypeArgs>k__BackingField;
    [NullableAttribute("2")]
public object ExpectedResult { get; public set; }
    public bool HasExpectedResult { get; public set; }
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public Type[] TypeArgs { get; public set; }
    [NullableContextAttribute("1")]
public TestCaseParameters(Exception exception);
    public TestCaseParameters(Object[] args);
    [NullableContextAttribute("1")]
public TestCaseParameters(ITestCaseData data);
    [NullableContextAttribute("2")]
public sealed virtual object get_ExpectedResult();
    [NullableContextAttribute("2")]
public void set_ExpectedResult(object value);
    [CompilerGeneratedAttribute]
public sealed virtual bool get_HasExpectedResult();
    [CompilerGeneratedAttribute]
public void set_HasExpectedResult(bool value);
    [CompilerGeneratedAttribute]
public Type[] get_TypeArgs();
    [CompilerGeneratedAttribute]
public void set_TypeArgs(Type[] value);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class NUnit.Framework.Internal.TestCaseResult : TestResult {
    public int FailCount { get; }
    public int TotalCount { get; }
    public int WarningCount { get; }
    public int PassCount { get; }
    public int SkipCount { get; }
    public int InconclusiveCount { get; }
    public bool HasChildren { get; }
    public IEnumerable`1<ITestResult> Children { get; }
    public TestCaseResult(TestMethod test);
    public virtual int get_FailCount();
    public virtual int get_TotalCount();
    public virtual int get_WarningCount();
    public virtual int get_PassCount();
    public virtual int get_SkipCount();
    public virtual int get_InconclusiveCount();
    public virtual bool get_HasChildren();
    public virtual IEnumerable`1<ITestResult> get_Children();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class NUnit.Framework.Internal.TestCaseTimeoutException : Exception {
    public TestCaseTimeoutException(string message);
    public TestCaseTimeoutException(string message, Exception inner);
    protected TestCaseTimeoutException(SerializationInfo info, StreamingContext context);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class NUnit.Framework.Internal.TestExecutionContext : LongLivedMarshalByRefObject {
    [NullableAttribute("2")]
private TestExecutionContext _priorContext;
    private TestExecutionStatus _executionStatus;
    private ITestListener _listener;
    private int _assertCount;
    [NullableAttribute("2")]
private Randomizer _randomGenerator;
    private TestResult _currentResult;
    private SandboxedThreadState _sandboxedThreadState;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private static AsyncLocal`1<TestExecutionContext> AsyncLocalCurrentContext;
    [CompilerGeneratedAttribute]
private Test <CurrentTest>k__BackingField;
    [CompilerGeneratedAttribute]
private DateTime <StartTime>k__BackingField;
    [CompilerGeneratedAttribute]
private long <StartTicks>k__BackingField;
    [CompilerGeneratedAttribute]
private TextWriter <OutWriter>k__BackingField;
    [NullableAttribute("2")]
[CompilerGeneratedAttribute]
private object <TestObject>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <StopOnError>k__BackingField;
    [CompilerGeneratedAttribute]
private IWorkItemDispatcher <Dispatcher>k__BackingField;
    [CompilerGeneratedAttribute]
private ParallelScope <ParallelScope>k__BackingField;
    [CompilerGeneratedAttribute]
private Tolerance <DefaultFloatingPointTolerance>k__BackingField;
    [NullableAttribute("2")]
[CompilerGeneratedAttribute]
private TestWorker <TestWorker>k__BackingField;
    [CompilerGeneratedAttribute]
private int <MultipleAssertLevel>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <ThrowOnEachFailureUnderDebugger>k__BackingField;
    [CompilerGeneratedAttribute]
private int <TestCaseTimeout>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <UseCancellation>k__BackingField;
    [CompilerGeneratedAttribute]
private CancellationToken <CancellationToken>k__BackingField;
    [CompilerGeneratedAttribute]
private List`1<ITestAction> <UpstreamActions>k__BackingField;
    [CompilerGeneratedAttribute]
private ValueFormatter <CurrentValueFormatter>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsSingleThreaded>k__BackingField;
    [CompilerGeneratedAttribute]
private int <CurrentRepeatCount>k__BackingField;
    public static TestExecutionContext CurrentContext { get; internal set; }
    public Test CurrentTest { get; public set; }
    public DateTime StartTime { get; public set; }
    public long StartTicks { get; public set; }
    public double Duration { get; }
    public TestResult CurrentResult { get; public set; }
    public TextWriter OutWriter { get; private set; }
    [NullableAttribute("2")]
public object TestObject { get; public set; }
    public bool StopOnError { get; public set; }
    public TestExecutionStatus ExecutionStatus { get; public set; }
    internal ITestListener Listener { get; internal set; }
    public IWorkItemDispatcher Dispatcher { get; public set; }
    public ParallelScope ParallelScope { get; public set; }
    public Tolerance DefaultFloatingPointTolerance { get; public set; }
    [NullableAttribute("2")]
public TestWorker TestWorker { get; internal set; }
    public Randomizer RandomGenerator { get; }
    internal int AssertCount { get; }
    internal int MultipleAssertLevel { get; internal set; }
    internal bool ThrowOnEachFailureUnderDebugger { get; internal set; }
    public int TestCaseTimeout { get; public set; }
    public bool UseCancellation { get; public set; }
    public CancellationToken CancellationToken { get; internal set; }
    public List`1<ITestAction> UpstreamActions { get; }
    public CultureInfo CurrentCulture { get; public set; }
    public CultureInfo CurrentUICulture { get; public set; }
    [NullableAttribute("2")]
public IPrincipal CurrentPrincipal { get; public set; }
    public ValueFormatter CurrentValueFormatter { get; private set; }
    public bool IsSingleThreaded { get; public set; }
    public int CurrentRepeatCount { get; public set; }
    public TestExecutionContext(TestExecutionContext other);
    private static TestExecutionContext();
    public static TestExecutionContext get_CurrentContext();
    internal static void set_CurrentContext(TestExecutionContext value);
    [CompilerGeneratedAttribute]
public Test get_CurrentTest();
    [CompilerGeneratedAttribute]
public void set_CurrentTest(Test value);
    [CompilerGeneratedAttribute]
public DateTime get_StartTime();
    [CompilerGeneratedAttribute]
public void set_StartTime(DateTime value);
    [CompilerGeneratedAttribute]
public long get_StartTicks();
    [CompilerGeneratedAttribute]
public void set_StartTicks(long value);
    public double get_Duration();
    public TestResult get_CurrentResult();
    public void set_CurrentResult(TestResult value);
    [CompilerGeneratedAttribute]
public TextWriter get_OutWriter();
    [CompilerGeneratedAttribute]
private void set_OutWriter(TextWriter value);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public object get_TestObject();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public void set_TestObject(object value);
    [CompilerGeneratedAttribute]
public bool get_StopOnError();
    [CompilerGeneratedAttribute]
public void set_StopOnError(bool value);
    public TestExecutionStatus get_ExecutionStatus();
    public void set_ExecutionStatus(TestExecutionStatus value);
    internal ITestListener get_Listener();
    internal void set_Listener(ITestListener value);
    [CompilerGeneratedAttribute]
public IWorkItemDispatcher get_Dispatcher();
    [CompilerGeneratedAttribute]
public void set_Dispatcher(IWorkItemDispatcher value);
    [CompilerGeneratedAttribute]
public ParallelScope get_ParallelScope();
    [CompilerGeneratedAttribute]
public void set_ParallelScope(ParallelScope value);
    [CompilerGeneratedAttribute]
public Tolerance get_DefaultFloatingPointTolerance();
    [CompilerGeneratedAttribute]
public void set_DefaultFloatingPointTolerance(Tolerance value);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public TestWorker get_TestWorker();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
internal void set_TestWorker(TestWorker value);
    public Randomizer get_RandomGenerator();
    internal int get_AssertCount();
    [CompilerGeneratedAttribute]
internal int get_MultipleAssertLevel();
    [CompilerGeneratedAttribute]
internal void set_MultipleAssertLevel(int value);
    [CompilerGeneratedAttribute]
internal bool get_ThrowOnEachFailureUnderDebugger();
    [CompilerGeneratedAttribute]
internal void set_ThrowOnEachFailureUnderDebugger(bool value);
    [CompilerGeneratedAttribute]
public int get_TestCaseTimeout();
    [CompilerGeneratedAttribute]
public void set_TestCaseTimeout(int value);
    [CompilerGeneratedAttribute]
public bool get_UseCancellation();
    [CompilerGeneratedAttribute]
public void set_UseCancellation(bool value);
    [CompilerGeneratedAttribute]
public CancellationToken get_CancellationToken();
    [CompilerGeneratedAttribute]
internal void set_CancellationToken(CancellationToken value);
    [CompilerGeneratedAttribute]
public List`1<ITestAction> get_UpstreamActions();
    public CultureInfo get_CurrentCulture();
    public void set_CurrentCulture(CultureInfo value);
    public CultureInfo get_CurrentUICulture();
    public void set_CurrentUICulture(CultureInfo value);
    [NullableContextAttribute("2")]
public IPrincipal get_CurrentPrincipal();
    [NullableContextAttribute("2")]
public void set_CurrentPrincipal(IPrincipal value);
    [CompilerGeneratedAttribute]
public ValueFormatter get_CurrentValueFormatter();
    [CompilerGeneratedAttribute]
private void set_CurrentValueFormatter(ValueFormatter value);
    [CompilerGeneratedAttribute]
public bool get_IsSingleThreaded();
    [CompilerGeneratedAttribute]
public void set_IsSingleThreaded(bool value);
    [CompilerGeneratedAttribute]
public int get_CurrentRepeatCount();
    [CompilerGeneratedAttribute]
public void set_CurrentRepeatCount(int value);
    [MemberNotNullAttribute("_sandboxedThreadState")]
public void UpdateContextFromEnvironment();
    public void EstablishExecutionEnvironment();
    public void IncrementAssertCount();
    public void IncrementAssertCount(int count);
    public void AddFormatter(ValueFormatterFactory formatterFactory);
    private TestExecutionContext CreateIsolatedContext();
    public void SendMessage(string destination, string message);
}
public enum NUnit.Framework.Internal.TestExecutionStatus : Enum {
    public int value__;
    public static TestExecutionStatus Running;
    public static TestExecutionStatus StopRequested;
    public static TestExecutionStatus AbortRequested;
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public abstract class NUnit.Framework.Internal.TestFilter : object {
    public static TestFilter Empty;
    public bool IsEmpty { get; }
    private static TestFilter();
    public bool get_IsEmpty();
    public virtual bool Pass(ITest test);
    public virtual bool Pass(ITest test, bool negated);
    public virtual bool IsExplicitMatch(ITest test);
    public abstract virtual bool Match(ITest test);
    public bool MatchParent(ITest test);
    protected virtual bool MatchDescendant(ITest test);
    public static TestFilter FromXml(string xmlText);
    public static TestFilter FromXml(TNode node);
    private static string NodeValue(TNode node);
    private static TestFilter[] GetChildNodeFilters(TNode node);
    public sealed virtual TNode ToXml(bool recursive);
    public abstract virtual TNode AddToXml(TNode parentNode, bool recursive);
    [CompilerGeneratedAttribute]
internal static bool <FromXml>g__IsRegex|10_0(TNode node);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class NUnit.Framework.Internal.TestFixture : TestSuite {
    [CompilerGeneratedAttribute]
private LifeCycle <LifeCycle>k__BackingField;
    public LifeCycle LifeCycle { get; public set; }
    public ITypeInfo TypeInfo { get; }
    public TestFixture(ITypeInfo fixtureType, Object[] arguments);
    private TestFixture(TestFixture fixture, ITestFilter filter);
    public TestFixture(ITypeInfo fixtureType, Exception ex);
    [CompilerGeneratedAttribute]
public LifeCycle get_LifeCycle();
    [CompilerGeneratedAttribute]
public void set_LifeCycle(LifeCycle value);
    public ITypeInfo get_TypeInfo();
    public virtual TestSuite Copy(ITestFilter filter);
}
public class NUnit.Framework.Internal.TestFixtureParameters : TestParameters {
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[CompilerGeneratedAttribute]
private Type[] <TypeArgs>k__BackingField;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public Type[] TypeArgs { get; }
    [NullableContextAttribute("1")]
public TestFixtureParameters(Exception exception);
    public TestFixtureParameters(Object[] args);
    [NullableContextAttribute("1")]
public TestFixtureParameters(ITestFixtureData data);
    [CompilerGeneratedAttribute]
public sealed virtual Type[] get_TypeArgs();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class NUnit.Framework.Internal.TestListener : object {
    public static ITestListener NULL { get; }
    public sealed virtual void TestStarted(ITest test);
    public sealed virtual void TestFinished(ITestResult result);
    public sealed virtual void TestOutput(TestOutput output);
    public sealed virtual void SendMessage(TestMessage message);
    public static ITestListener get_NULL();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class NUnit.Framework.Internal.TestMethod : Test {
    [NullableAttribute("2")]
internal TestCaseParameters Parms;
    internal bool HasExpectedResult { get; }
    [NullableAttribute("2")]
internal object ExpectedResult { get; }
    public IMethodInfo Method { get; public set; }
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public Object[] Arguments { get; }
    public bool HasChildren { get; }
    public IList`1<ITest> Tests { get; }
    public string XmlElementName { get; }
    public string MethodName { get; }
    public TestMethod(IMethodInfo method);
    public TestMethod(IMethodInfo method, Test parentSuite);
    internal bool get_HasExpectedResult();
    [NullableContextAttribute("2")]
internal object get_ExpectedResult();
    public IMethodInfo get_Method();
    public void set_Method(IMethodInfo value);
    public virtual Object[] get_Arguments();
    public virtual TestResult MakeTestResult();
    public virtual bool get_HasChildren();
    public virtual TNode AddToXml(TNode parentNode, bool recursive);
    public virtual IList`1<ITest> get_Tests();
    public virtual string get_XmlElementName();
    public virtual string get_MethodName();
}
public class NUnit.Framework.Internal.TestNameGenerator : object {
    [NullableAttribute("1")]
public static string DefaultTestNamePattern;
    [NullableAttribute("1")]
private string _pattern;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private List`1<NameFragment> _fragments;
    [NullableContextAttribute("1")]
public TestNameGenerator(string pattern);
    private static TestNameGenerator();
    [NullableContextAttribute("1")]
public string GetDisplayName(TestMethod testMethod);
    [NullableContextAttribute("1")]
public string GetDisplayName(TestMethod testMethod, Object[] args);
    [NullableContextAttribute("1")]
private static List`1<NameFragment> BuildFragmentList(string pattern);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public abstract class NUnit.Framework.Internal.TestParameters : object {
    internal static Object[] NoArguments;
    [CompilerGeneratedAttribute]
private RunState <RunState>k__BackingField;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[CompilerGeneratedAttribute]
private Object[] <Arguments>k__BackingField;
    [NullableAttribute("2")]
private string _testName;
    [CompilerGeneratedAttribute]
private IPropertyBag <Properties>k__BackingField;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[CompilerGeneratedAttribute]
private Object[] <OriginalArguments>k__BackingField;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private String[] _argDisplayNames;
    public RunState RunState { get; public set; }
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public Object[] Arguments { get; internal set; }
    [NullableAttribute("2")]
public string TestName { get; public set; }
    public IPropertyBag Properties { get; protected internal set; }
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public Object[] OriginalArguments { get; protected internal set; }
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
internal String[] ArgDisplayNames { get; internal set; }
    public TestParameters(Object[] args);
    public TestParameters(Exception exception);
    public TestParameters(ITestData data);
    private TestParameters(RunState runState, Object[] args);
    private static TestParameters();
    [CompilerGeneratedAttribute]
public sealed virtual RunState get_RunState();
    [CompilerGeneratedAttribute]
public void set_RunState(RunState value);
    [CompilerGeneratedAttribute]
public sealed virtual Object[] get_Arguments();
    [CompilerGeneratedAttribute]
internal void set_Arguments(Object[] value);
    [NullableContextAttribute("2")]
public sealed virtual string get_TestName();
    [NullableContextAttribute("2")]
public void set_TestName(string value);
    [CompilerGeneratedAttribute]
public sealed virtual IPropertyBag get_Properties();
    [CompilerGeneratedAttribute]
protected internal void set_Properties(IPropertyBag value);
    public sealed virtual void ApplyToTest(Test test);
    [CompilerGeneratedAttribute]
public Object[] get_OriginalArguments();
    [CompilerGeneratedAttribute]
protected internal void set_OriginalArguments(Object[] value);
    internal String[] get_ArgDisplayNames();
    internal void set_ArgDisplayNames(String[] value);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class NUnit.Framework.Internal.TestProgressReporter : object {
    private static Logger Log;
    private ICallbackEventHandler _handler;
    private StringBuilder _stringBuilder;
    public TestProgressReporter(ICallbackEventHandler handler);
    private static TestProgressReporter();
    public sealed virtual void TestStarted(ITest test);
    private string CreateTestStartedMessage(ITest test);
    public sealed virtual void TestFinished(ITestResult result);
    public sealed virtual void TestOutput(TestOutput output);
    public sealed virtual void SendMessage(TestMessage message);
    private static ITest GetParent(ITest test);
    private StringBuilder GetStringBuilder();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public abstract class NUnit.Framework.Internal.TestResult : LongLivedMarshalByRefObject {
    internal static string CHILD_ERRORS_MESSAGE;
    internal static string CHILD_WARNINGS_MESSAGE;
    internal static string CHILD_IGNORE_MESSAGE;
    internal static string USER_CANCELLED_MESSAGE;
    internal static double MIN_DURATION;
    private StringBuilder _output;
    private double _duration;
    protected int InternalAssertCount;
    private ResultState _resultState;
    private string _message;
    [NullableAttribute("2")]
private string _stackTrace;
    private List`1<AssertionResult> _assertionResults;
    private List`1<TestAttachment> _testAttachments;
    protected ReaderWriterLockSlim RwLock;
    [CompilerGeneratedAttribute]
private ITest <Test>k__BackingField;
    [CompilerGeneratedAttribute]
private DateTime <StartTime>k__BackingField;
    [CompilerGeneratedAttribute]
private DateTime <EndTime>k__BackingField;
    [CompilerGeneratedAttribute]
private TextWriter <OutWriter>k__BackingField;
    public ITest Test { get; }
    public ResultState ResultState { get; private set; }
    public string Name { get; }
    public string FullName { get; }
    public double Duration { get; public set; }
    public DateTime StartTime { get; public set; }
    public DateTime EndTime { get; public set; }
    public ICollection`1<TestAttachment> TestAttachments { get; }
    public string Message { get; private set; }
    [NullableAttribute("2")]
public string StackTrace { get; private set; }
    public int AssertCount { get; internal set; }
    public int TotalCount { get; }
    public int FailCount { get; }
    public int WarningCount { get; }
    public int PassCount { get; }
    public int SkipCount { get; }
    public int InconclusiveCount { get; }
    public bool HasChildren { get; }
    public IEnumerable`1<ITestResult> Children { get; }
    public TextWriter OutWriter { get; }
    public string Output { get; }
    public IList`1<AssertionResult> AssertionResults { get; }
    public int PendingFailures { get; }
    public AssertionStatus WorstAssertionStatus { get; }
    public TestResult(ITest test);
    private static TestResult();
    [CompilerGeneratedAttribute]
public sealed virtual ITest get_Test();
    public sealed virtual ResultState get_ResultState();
    private void set_ResultState(ResultState value);
    public virtual string get_Name();
    public virtual string get_FullName();
    public sealed virtual double get_Duration();
    public void set_Duration(double value);
    [CompilerGeneratedAttribute]
public sealed virtual DateTime get_StartTime();
    [CompilerGeneratedAttribute]
public void set_StartTime(DateTime value);
    [CompilerGeneratedAttribute]
public sealed virtual DateTime get_EndTime();
    [CompilerGeneratedAttribute]
public void set_EndTime(DateTime value);
    internal void AddTestAttachment(TestAttachment attachment);
    public sealed virtual ICollection`1<TestAttachment> get_TestAttachments();
    public sealed virtual string get_Message();
    private void set_Message(string value);
    [NullableContextAttribute("2")]
public virtual string get_StackTrace();
    [NullableContextAttribute("2")]
private void set_StackTrace(string value);
    public sealed virtual int get_AssertCount();
    internal void set_AssertCount(int value);
    public abstract virtual int get_TotalCount();
    public abstract virtual int get_FailCount();
    public abstract virtual int get_WarningCount();
    public abstract virtual int get_PassCount();
    public abstract virtual int get_SkipCount();
    public abstract virtual int get_InconclusiveCount();
    public abstract virtual bool get_HasChildren();
    public abstract virtual IEnumerable`1<ITestResult> get_Children();
    [CompilerGeneratedAttribute]
public TextWriter get_OutWriter();
    public sealed virtual string get_Output();
    public sealed virtual IList`1<AssertionResult> get_AssertionResults();
    public sealed virtual TNode ToXml(bool recursive);
    public virtual TNode AddToXml(TNode parentNode, bool recursive);
    public int get_PendingFailures();
    public AssertionStatus get_WorstAssertionStatus();
    public void SetResult(ResultState resultState);
    public void SetResult(ResultState resultState, string message);
    public void SetResult(ResultState resultState, string message, string stackTrace);
    public void RecordException(Exception ex);
    public void RecordException(Exception ex, FailureSite site);
    public void RecordTearDownException(Exception ex);
    private static Exception ValidateAndUnwrap(Exception ex);
    public void RecordTestCompletion();
    public void RecordAssertion(AssertionResult assertion);
    public void RecordAssertion(AssertionStatus status, string message, string stackTrace);
    public void RecordAssertion(AssertionStatus status, string message);
    private string CreateLegacyFailureMessage();
    private TNode AddFailureElement(TNode targetNode);
    private TNode AddOutputElement(TNode targetNode, string output);
    private TNode AddAssertionsElement(TNode targetNode);
    private ResultState AssertionStatusToResultState(AssertionStatus status);
    private TNode AddAttachmentsElement(TNode targetNode);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class NUnit.Framework.Internal.TestSuite : Test {
    private List`1<ITest> _tests;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[CompilerGeneratedAttribute]
private Object[] <Arguments>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <MaintainTestOrder>k__BackingField;
    [CompilerGeneratedAttribute]
private IMethodInfo[] <OneTimeSetUpMethods>k__BackingField;
    [CompilerGeneratedAttribute]
private IMethodInfo[] <OneTimeTearDownMethods>k__BackingField;
    public IList`1<ITest> Tests { get; }
    public int TestCaseCount { get; }
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public Object[] Arguments { get; }
    protected bool MaintainTestOrder { get; protected set; }
    public IMethodInfo[] OneTimeSetUpMethods { get; protected set; }
    public IMethodInfo[] OneTimeTearDownMethods { get; protected set; }
    public bool HasChildren { get; }
    public string XmlElementName { get; }
    public TestSuite(string name);
    public TestSuite(string parentSuiteName, string name);
    public TestSuite(ITypeInfo fixtureType, Object[] arguments);
    public TestSuite(Type fixtureType);
    public TestSuite(TestSuite suite, ITestFilter filter);
    public void Sort();
    public void Add(Test test);
    public virtual TestSuite Copy(ITestFilter filter);
    public void ApplyAttributesToTestSuite(Type type);
    private void ApplyAttributesToTestSuite(ICustomAttributeProvider provider);
    private void ApplyAttributesToTestSuite(IEnumerable`1<IApplyToTestSuite> attributes);
    public virtual IList`1<ITest> get_Tests();
    public virtual int get_TestCaseCount();
    [CompilerGeneratedAttribute]
public virtual Object[] get_Arguments();
    [CompilerGeneratedAttribute]
protected bool get_MaintainTestOrder();
    [CompilerGeneratedAttribute]
protected void set_MaintainTestOrder(bool value);
    [CompilerGeneratedAttribute]
public IMethodInfo[] get_OneTimeSetUpMethods();
    [CompilerGeneratedAttribute]
protected void set_OneTimeSetUpMethods(IMethodInfo[] value);
    [CompilerGeneratedAttribute]
public IMethodInfo[] get_OneTimeTearDownMethods();
    [CompilerGeneratedAttribute]
protected void set_OneTimeTearDownMethods(IMethodInfo[] value);
    public virtual TestResult MakeTestResult();
    public virtual bool get_HasChildren();
    public virtual string get_XmlElementName();
    public virtual TNode AddToXml(TNode parentNode, bool recursive);
    protected void CheckSetUpTearDownMethods(IMethodInfo[] methods);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class NUnit.Framework.Internal.TestSuiteResult : TestResult {
    private int _passCount;
    private int _failCount;
    private int _warningCount;
    private int _skipCount;
    private int _inconclusiveCount;
    private int _totalCount;
    private ConcurrentQueue`1<ITestResult> _children;
    public int TotalCount { get; }
    public int FailCount { get; }
    public int PassCount { get; }
    public int WarningCount { get; }
    public int SkipCount { get; }
    public int InconclusiveCount { get; }
    public bool HasChildren { get; }
    public IEnumerable`1<ITestResult> Children { get; }
    public TestSuiteResult(TestSuite suite);
    public virtual int get_TotalCount();
    public virtual int get_FailCount();
    public virtual int get_PassCount();
    public virtual int get_WarningCount();
    public virtual int get_SkipCount();
    public virtual int get_InconclusiveCount();
    public virtual bool get_HasChildren();
    public virtual IEnumerable`1<ITestResult> get_Children();
    public virtual void AddResult(ITestResult result);
    private void MergeChildResult(ITestResult childResult);
    private void UpdateResultState(ResultState childResultState);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class NUnit.Framework.Internal.TextMessageWriter : MessageWriter {
    private static int DEFAULT_LINE_LENGTH;
    public static string Pfx_Expected;
    public static string Pfx_Actual;
    public static string Pfx_Difference;
    public static int PrefixLength;
    private int _maxLineLength;
    private bool _sameValDiffTypes;
    [NullableAttribute("2")]
private string _expectedType;
    [NullableAttribute("2")]
private string _actualType;
    public int MaxLineLength { get; public set; }
    [NullableContextAttribute("2")]
public TextMessageWriter(string userMessage, Object[] args);
    private static TextMessageWriter();
    public virtual int get_MaxLineLength();
    public virtual void set_MaxLineLength(int value);
    public virtual void WriteMessageLine(int level, string message, Object[] args);
    public virtual void DisplayDifferences(ConstraintResult result);
    private void ResolveTypeNameDifference(object expected, object actual, String& expectedType, String& actualType);
    [NullableContextAttribute("2")]
public virtual void DisplayDifferences(object expected, object actual);
    [NullableContextAttribute("2")]
public virtual void DisplayDifferences(object expected, object actual, Tolerance tolerance);
    public virtual void DisplayStringDifferences(string expected, string actual, int mismatch, bool ignoreCase, bool clipping);
    public virtual void DisplayStringDifferences(string expected, string actual, int mismatchExpected, int mismatchActual, bool ignoreCase, bool ignoreWhiteSpace, bool clipping);
    [NullableContextAttribute("2")]
public virtual void WriteActualValue(object actual);
    [NullableContextAttribute("2")]
public virtual void WriteValue(object val);
    public virtual void WriteCollectionElements(IEnumerable collection, long start, int max);
    private void WriteExpectedLine(ConstraintResult result);
    [NullableContextAttribute("2")]
private void WriteExpectedLine(object expected, Tolerance tolerance);
    private void WriteActualLine(ConstraintResult result);
    private void WriteAdditionalLine(ConstraintResult result);
    [NullableContextAttribute("2")]
private void WriteActualLine(object actual);
    [NullableContextAttribute("2")]
private void WriteDifferenceLine(object expected, object actual, Tolerance tolerance);
    private void WriteCaretLine(int mismatch);
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
public static class NUnit.Framework.Internal.ThreadUtility : object {
    internal static void BlockingDelay(int milliseconds);
    public static IPrincipal GetCurrentThreadPrincipal();
    public static void SetCurrentThreadPrincipal(IPrincipal principal);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ExtensionAttribute]
public static class NUnit.Framework.Internal.TypeHelper : object {
    private static int STRING_MAX;
    private static int STRING_LIMIT;
    private static string THREE_DOTS;
    public static string GetDisplayName(Type type);
    public static string GetDisplayName(Type type, Object[] arglist);
    [NullableContextAttribute("2")]
public static bool TryGetBestCommonType(Type type1, Type type2, Type& bestCommonType);
    public static bool IsNumeric(Type type);
    public static void ConvertArgumentList(Object[] arglist, IParameterInfo[] parameters);
    public static bool CanDeduceTypeArgsFromArgs(Type type, Object[] arglist, Type[]& typeArgsOut);
    public static Type[] GetDeclaredInterfaces(Type type);
    public static bool IsValueTuple(Type type);
    public static bool IsTuple(Type type);
    private static bool IsTupleInternal(Type type, string tupleName);
    private static string GetTypeNameWithoutGenerics(string fullTypeName);
    [NullableContextAttribute("2")]
internal static bool CanCast(object obj);
    [NullableContextAttribute("2")]
internal static bool TryCast(object obj, T& value);
    [ExtensionAttribute]
internal static string FullName(Type type);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class NUnit.Framework.Internal.TypeNameDifferenceResolver : object {
    public void ResolveTypeNameDifference(object expected, object actual, String& expectedTypeShortened, String& actualTypeShortened);
    public void ResolveTypeNameDifference(Type expected, Type actual, String& expectedTypeShortened, String& actualTypeShortened);
    private void GetShortenedGenericParams(Type expectedFullType, Type actualFullType, List`1& shortenedParamsExpected, List`1& shortenedParamsActual);
    public string FullyShortenTypeName(Type genericType);
    public void ShortenTypeNames(Type expectedType, Type actualType, String& expectedTypeShortened, String& actualTypeShortened);
    public bool IsTypeGeneric(Type type);
    public string GetGenericTypeName(Type type);
    public string ReconstructGenericTypeName(string genericTypeName, List`1<string> templateParamNames);
    public void GetShortenedGenericTypes(Type expected, Type actual, String& shortenedGenericNameExpected, String& shortenedGenericNameActual);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class NUnit.Framework.Internal.TypeWrapper : object {
    [CompilerGeneratedAttribute]
private Type <Type>k__BackingField;
    public Type Type { get; private set; }
    [NullableAttribute("2")]
public ITypeInfo BaseType { get; }
    public string Name { get; }
    public string FullName { get; }
    public Assembly Assembly { get; }
    [NullableAttribute("2")]
public string Namespace { get; }
    public bool IsAbstract { get; }
    public bool IsGenericType { get; }
    public bool ContainsGenericParameters { get; }
    public bool IsGenericTypeDefinition { get; }
    public bool IsSealed { get; }
    public bool IsStaticClass { get; }
    public TypeWrapper(Type type);
    [CompilerGeneratedAttribute]
public sealed virtual Type get_Type();
    [CompilerGeneratedAttribute]
private void set_Type(Type value);
    [NullableContextAttribute("2")]
public sealed virtual ITypeInfo get_BaseType();
    public sealed virtual string get_Name();
    public sealed virtual string get_FullName();
    public sealed virtual Assembly get_Assembly();
    [NullableContextAttribute("2")]
public sealed virtual string get_Namespace();
    public sealed virtual bool get_IsAbstract();
    public sealed virtual bool get_IsGenericType();
    public sealed virtual bool IsType(Type type);
    public sealed virtual bool get_ContainsGenericParameters();
    public sealed virtual bool get_IsGenericTypeDefinition();
    public sealed virtual bool get_IsSealed();
    public sealed virtual bool get_IsStaticClass();
    public sealed virtual string GetDisplayName();
    public sealed virtual string GetDisplayName(Object[] args);
    public sealed virtual ITypeInfo MakeGenericType(Type[] typeArgs);
    public sealed virtual Type GetGenericTypeDefinition();
    public sealed virtual T[] GetCustomAttributes(bool inherit);
    public sealed virtual bool IsDefined(bool inherit);
    public sealed virtual bool HasMethodWithAttribute(Type attributeType);
    public sealed virtual IMethodInfo[] GetMethods(BindingFlags flags);
    public sealed virtual ConstructorInfo GetConstructor(Type[] argTypes);
    public sealed virtual bool HasConstructor(Type[] argTypes);
    public sealed virtual object Construct(Object[] args);
    public virtual string ToString();
    public sealed virtual IMethodInfo[] GetMethodsWithAttribute(bool inherit);
}
internal abstract class NUnit.Framework.Internal.ValueGenerator : object {
    [NullableAttribute("1")]
private static MethodInfo GenericCreateMethod;
    private static ValueGenerator();
    [NullableContextAttribute("1")]
public abstract virtual IEnumerable GenerateRange(object start, object end, Step step);
    [NullableContextAttribute("1")]
public static ValueGenerator Create(Type valueType);
    [NullableContextAttribute("1")]
public static ValueGenerator`1<T> Create();
    [NullableContextAttribute("1")]
public abstract virtual Step CreateStep(object value);
    [NullableContextAttribute("1")]
public abstract virtual bool TryCreateStep(object value, Step& step);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal abstract class NUnit.Framework.Internal.ValueGenerator`1 : ValueGenerator {
    private static Exception CreateNotSupportedException(string description);
    public virtual int Compare(T x, T y);
    [IteratorStateMachineAttribute("NUnit.Framework.Internal.ValueGenerator`1/<GenerateRange>d__2")]
public IEnumerable`1<T> GenerateRange(T start, T end, Step<T> step);
    public sealed virtual IEnumerable GenerateRange(object start, object end, Step step);
    public sealed virtual Step CreateStep(object value);
    public virtual bool TryCreateStep(object value, Step& step);
}
internal static class NUnit.Framework.Internal.ValueTaskAwaitAdapter : object {
    [NullableContextAttribute("1")]
public static AwaitAdapter Create(ValueTask task);
    [NullableContextAttribute("1")]
public static AwaitAdapter TryCreate(object task);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public abstract class NUnit.Framework.Is : object {
    public static ConstraintExpression Not { get; }
    public static ConstraintExpression All { get; }
    public static NullConstraint Null { get; }
    public static DefaultConstraint Default { get; }
    public static TrueConstraint True { get; }
    public static FalseConstraint False { get; }
    public static GreaterThanConstraint Positive { get; }
    public static LessThanConstraint Negative { get; }
    public static EqualConstraint Zero { get; }
    public static NaNConstraint NaN { get; }
    public static EmptyConstraint Empty { get; }
    public static WhiteSpaceConstraint WhiteSpace { get; }
    public static UniqueItemsConstraint Unique { get; }
    public static XmlSerializableConstraint XmlSerializable { get; }
    public static CollectionOrderedConstraint Ordered { get; }
    public static ConstraintExpression get_Not();
    public static ConstraintExpression get_All();
    public static NullConstraint get_Null();
    public static DefaultConstraint get_Default();
    public static TrueConstraint get_True();
    public static FalseConstraint get_False();
    public static GreaterThanConstraint get_Positive();
    public static LessThanConstraint get_Negative();
    public static EqualConstraint get_Zero();
    public static NaNConstraint get_NaN();
    public static EmptyConstraint get_Empty();
    public static WhiteSpaceConstraint get_WhiteSpace();
    public static UniqueItemsConstraint get_Unique();
    public static XmlSerializableConstraint get_XmlSerializable();
    public static EqualConstraint EqualTo(object expected);
    public static SameAsConstraint SameAs(object expected);
    public static GreaterThanConstraint GreaterThan(object expected);
    public static GreaterThanOrEqualConstraint GreaterThanOrEqualTo(object expected);
    public static GreaterThanOrEqualConstraint AtLeast(object expected);
    public static LessThanConstraint LessThan(object expected);
    public static LessThanOrEqualConstraint LessThanOrEqualTo(object expected);
    public static LessThanOrEqualConstraint AtMost(object expected);
    public static ExactTypeConstraint TypeOf(Type expectedType);
    public static ExactTypeConstraint TypeOf();
    public static InstanceOfTypeConstraint InstanceOf(Type expectedType);
    public static InstanceOfTypeConstraint InstanceOf();
    public static AssignableFromConstraint AssignableFrom(Type expectedType);
    public static AssignableFromConstraint AssignableFrom();
    public static AssignableToConstraint AssignableTo(Type expectedType);
    public static AssignableToConstraint AssignableTo();
    public static CollectionEquivalentConstraint EquivalentTo(IEnumerable expected);
    public static CollectionSubsetConstraint SubsetOf(IEnumerable expected);
    public static CollectionSupersetConstraint SupersetOf(IEnumerable expected);
    public static CollectionOrderedConstraint get_Ordered();
    public static SamePathConstraint SamePath(string expected);
    public static SubPathConstraint SubPathOf(string expected);
    public static SamePathOrUnderConstraint SamePathOrUnder(string expected);
    public static RangeConstraint InRange(object from, object to);
    public static AnyOfConstraint AnyOf(Object[] expected);
    public static AnyOfConstraint AnyOf(ICollection expected);
}
[NullableContextAttribute("1")]
public interface NUnit.Framework.ITestAction {
    public ActionTargets Targets { get; }
    public abstract virtual void BeforeTest(ITest test);
    public abstract virtual void AfterTest(ITest test);
    public abstract virtual ActionTargets get_Targets();
}
public abstract class NUnit.Framework.Iz : Is {
}
[AttributeUsageAttribute("1")]
public class NUnit.Framework.LevelOfParallelismAttribute : PropertyAttribute {
    public LevelOfParallelismAttribute(int level);
}
public enum NUnit.Framework.LifeCycle : Enum {
    public int value__;
    public static LifeCycle SingleInstance;
    public static LifeCycle InstancePerTestCase;
}
[AttributeUsageAttribute("64")]
public class NUnit.Framework.MaxTimeAttribute : PropertyAttribute {
    private int _milliseconds;
    public MaxTimeAttribute(int milliseconds);
    [NullableContextAttribute("1")]
private sealed virtual override TestCommand NUnit.Framework.Interfaces.ICommandWrapper.Wrap(TestCommand command);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class NUnit.Framework.MultipleAssertException : ResultStateException {
    [CompilerGeneratedAttribute]
private ITestResult <TestResult>k__BackingField;
    public ResultState ResultState { get; }
    public ITestResult TestResult { get; }
    public MultipleAssertException(ITestResult testResult);
    protected MultipleAssertException(SerializationInfo info, StreamingContext context);
    public virtual ResultState get_ResultState();
    [CompilerGeneratedAttribute]
public ITestResult get_TestResult();
}
[AttributeUsageAttribute("69")]
public class NUnit.Framework.NetPlatformAttribute : IncludeExcludeAttribute {
    [NullableContextAttribute("2")]
public NetPlatformAttribute(string platforms);
    [NullableContextAttribute("1")]
public sealed virtual void ApplyToTest(Test test);
    [NullableContextAttribute("2")]
private static bool IsPlatformSupported(string include, string exclude, String& reason);
}
[AttributeUsageAttribute("69")]
public class NUnit.Framework.NonParallelizableAttribute : ParallelizableAttribute {
}
[EditorBrowsableAttribute("1")]
[AttributeUsageAttribute("1")]
public class NUnit.Framework.NonTestAssemblyAttribute : NUnitAttribute {
}
public abstract class NUnit.Framework.NUnitAttribute : Attribute {
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
[IsReadOnlyAttribute]
public class NUnit.Framework.NUnitString : ValueType {
    private string _message;
    public NUnitString(string message);
    [NullableContextAttribute("1")]
[ObsoleteAttribute("This only exists for the compiler")]
public static NUnitString op_Implicit(FormattableString formattableMessage);
    public static NUnitString op_Implicit(string message);
    [NullableContextAttribute("1")]
public virtual string ToString();
}
[AttributeUsageAttribute("64")]
public class NUnit.Framework.OneTimeSetUpAttribute : NUnitAttribute {
}
[AttributeUsageAttribute("64")]
public class NUnit.Framework.OneTimeTearDownAttribute : NUnitAttribute {
}
[AttributeUsageAttribute("68")]
public class NUnit.Framework.OrderAttribute : NUnitAttribute {
    public int Order;
    public OrderAttribute(int order);
    [NullableContextAttribute("1")]
public sealed virtual void ApplyToTest(Test test);
    [NullableContextAttribute("1")]
public sealed virtual void ApplyToTestSuite(TestSuite testSuite);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ExtensionAttribute]
internal static class NUnit.Framework.OSPlatformConverter : object {
    [ExtensionAttribute]
public static IEnumerable`1<IApplyToTest> RetrieveAndConvert(ICustomAttributeProvider provider);
    [IteratorStateMachineAttribute("NUnit.Framework.OSPlatformConverter/<Convert>d__1")]
internal static IEnumerable`1<IApplyToTest> Convert(OSPlatformAttribute[] osPlatformAttributes, IApplyToTest[] applyToTestAttributes);
    [CompilerGeneratedAttribute]
internal static void <Convert>g__Add|1_0(HashSet`1<string> set, string platforms);
}
[AttributeUsageAttribute("64")]
public class NUnit.Framework.PairwiseAttribute : CombiningStrategyAttribute {
}
[AttributeUsageAttribute("69")]
public class NUnit.Framework.ParallelizableAttribute : PropertyAttribute {
    [CompilerGeneratedAttribute]
private ParallelScope <Scope>k__BackingField;
    public ParallelScope Scope { get; }
    public ParallelizableAttribute(ParallelScope scope);
    [CompilerGeneratedAttribute]
public ParallelScope get_Scope();
    [NullableContextAttribute("1")]
public virtual void ApplyToTest(Test test);
    [NullableContextAttribute("1")]
public sealed virtual void ApplyToContext(TestExecutionContext context);
}
[FlagsAttribute]
public enum NUnit.Framework.ParallelScope : Enum {
    public int value__;
    [EditorBrowsableAttribute("1")]
public static ParallelScope Default;
    public static ParallelScope Self;
    [EditorBrowsableAttribute("1")]
public static ParallelScope None;
    [EditorBrowsableAttribute("1")]
public static ParallelScope ItemMask;
    public static ParallelScope Children;
    public static ParallelScope Fixtures;
    [EditorBrowsableAttribute("1")]
public static ParallelScope ContextMask;
    public static ParallelScope All;
}
[AttributeUsageAttribute("69")]
public class NUnit.Framework.PlatformAttribute : IncludeExcludeAttribute {
    [NullableAttribute("1")]
private PlatformHelper _platformHelper;
    [NullableContextAttribute("2")]
public PlatformAttribute(string platforms);
    [NullableContextAttribute("1")]
public sealed virtual void ApplyToTest(Test test);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[AttributeUsageAttribute("69")]
public class NUnit.Framework.PropertyAttribute : NUnitAttribute {
    private PropertyBag _properties;
    public IPropertyBag Properties { get; }
    public PropertyAttribute(string propertyName, string propertyValue);
    public PropertyAttribute(string propertyName, int propertyValue);
    public PropertyAttribute(string propertyName, double propertyValue);
    protected PropertyAttribute(object propertyValue);
    public IPropertyBag get_Properties();
    public virtual void ApplyToTest(Test test);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[AttributeUsageAttribute("2048")]
public class NUnit.Framework.RandomAttribute : NUnitAttribute {
    [NullableAttribute("2")]
private RandomDataSource _source;
    private int _count;
    [CompilerGeneratedAttribute]
private bool <Distinct>k__BackingField;
    public bool Distinct { get; public set; }
    public RandomAttribute(int count);
    public RandomAttribute(int min, int max, int count);
    [CLSCompliantAttribute("False")]
public RandomAttribute(UInt32 min, UInt32 max, int count);
    public RandomAttribute(long min, long max, int count);
    [CLSCompliantAttribute("False")]
public RandomAttribute(ulong min, ulong max, int count);
    public RandomAttribute(short min, short max, int count);
    [CLSCompliantAttribute("False")]
public RandomAttribute(ushort min, ushort max, int count);
    public RandomAttribute(double min, double max, int count);
    public RandomAttribute(float min, float max, int count);
    public RandomAttribute(byte min, byte max, int count);
    [CLSCompliantAttribute("False")]
public RandomAttribute(sbyte min, sbyte max, int count);
    [CompilerGeneratedAttribute]
public bool get_Distinct();
    [CompilerGeneratedAttribute]
public void set_Distinct(bool value);
    public sealed virtual IEnumerable GetData(IParameterInfo parameter);
    private bool WeConvert(Type sourceType, Type targetType);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[AttributeUsageAttribute("2048")]
public class NUnit.Framework.RangeAttribute : NUnitAttribute {
    private object _from;
    private object _to;
    private object _step;
    public RangeAttribute(int from, int to);
    public RangeAttribute(int from, int to, int step);
    [CLSCompliantAttribute("False")]
public RangeAttribute(UInt32 from, UInt32 to);
    [CLSCompliantAttribute("False")]
public RangeAttribute(UInt32 from, UInt32 to, UInt32 step);
    public RangeAttribute(long from, long to);
    public RangeAttribute(long from, long to, long step);
    [CLSCompliantAttribute("False")]
public RangeAttribute(ulong from, ulong to);
    [CLSCompliantAttribute("False")]
public RangeAttribute(ulong from, ulong to, ulong step);
    public RangeAttribute(double from, double to, double step);
    public RangeAttribute(float from, float to, float step);
    public sealed virtual IEnumerable GetData(IParameterInfo parameter);
    public virtual string ToString();
}
[AttributeUsageAttribute("64")]
public class NUnit.Framework.RepeatAttribute : PropertyAttribute {
    private int _count;
    public RepeatAttribute(int count);
    [NullableContextAttribute("1")]
public sealed virtual TestCommand Wrap(TestCommand command);
}
[AttributeUsageAttribute("69")]
public class NUnit.Framework.RequiresThreadAttribute : PropertyAttribute {
    public RequiresThreadAttribute(ApartmentState apartment);
    [NullableContextAttribute("1")]
private sealed virtual override void NUnit.Framework.Interfaces.IApplyToTest.ApplyToTest(Test test);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal static class NUnit.Framework.Result : object {
    public static Result`1<T> Success(T value);
    public static Result`1<T> Error(string message);
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
internal class NUnit.Framework.Result`1 : ValueType {
    private T _value;
    private string _errorMessage;
    public T Value { get; }
    private Result`1(T value, string errorMessage);
    public static Result`1<T> Success(T value);
    [NullableContextAttribute("1")]
public static Result`1<T> Error(string message);
    public bool IsSuccess(T& value);
    public bool IsError(String& message);
    public T get_Value();
    [NullableContextAttribute("1")]
public static Result`1<T> op_Implicit(T value);
    [NullableContextAttribute("1")]
public static Result`1<T> op_Implicit(string value);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public abstract class NUnit.Framework.ResultStateException : Exception {
    public ResultState ResultState { get; }
    protected ResultStateException(string message);
    public ResultStateException(string message, Exception inner);
    protected ResultStateException(SerializationInfo info, StreamingContext context);
    public abstract virtual ResultState get_ResultState();
}
[AttributeUsageAttribute("64")]
public class NUnit.Framework.RetryAttribute : NUnitAttribute {
    private int _tryCount;
    public RetryAttribute(int tryCount);
    [NullableContextAttribute("1")]
public sealed virtual TestCommand Wrap(TestCommand command);
}
[AttributeUsageAttribute("64")]
public class NUnit.Framework.SequentialAttribute : CombiningStrategyAttribute {
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[AttributeUsageAttribute("69")]
public class NUnit.Framework.SetCultureAttribute : PropertyAttribute {
    private string _culture;
    public SetCultureAttribute(string culture);
    private sealed virtual override void NUnit.Framework.Interfaces.IApplyToContext.ApplyToContext(TestExecutionContext context);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[AttributeUsageAttribute("69")]
public class NUnit.Framework.SetUICultureAttribute : PropertyAttribute {
    private string _culture;
    public SetUICultureAttribute(string culture);
    private sealed virtual override void NUnit.Framework.Interfaces.IApplyToContext.ApplyToContext(TestExecutionContext context);
}
[AttributeUsageAttribute("64")]
public class NUnit.Framework.SetUpAttribute : NUnitAttribute {
}
[AttributeUsageAttribute("4")]
public class NUnit.Framework.SetUpFixtureAttribute : NUnitAttribute {
    [NullableContextAttribute("1")]
public sealed virtual IEnumerable`1<TestSuite> BuildFrom(ITypeInfo typeInfo);
    [NullableContextAttribute("1")]
private static bool IsValidFixtureType(ITypeInfo typeInfo, String& reason);
}
[AttributeUsageAttribute("4")]
public class NUnit.Framework.SingleThreadedAttribute : NUnitAttribute {
    [NullableContextAttribute("1")]
public sealed virtual void ApplyToContext(TestExecutionContext context);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class NUnit.Framework.SuccessException : ResultStateException {
    public ResultState ResultState { get; }
    public SuccessException(string message);
    public SuccessException(string message, Exception inner);
    protected SuccessException(SerializationInfo info, StreamingContext context);
    public virtual ResultState get_ResultState();
}
[AttributeUsageAttribute("64")]
public class NUnit.Framework.TearDownAttribute : NUnitAttribute {
}
[AttributeUsageAttribute("1093")]
public abstract class NUnit.Framework.TestActionAttribute : Attribute {
    public ActionTargets Targets { get; }
    [NullableContextAttribute("1")]
public virtual void BeforeTest(ITest test);
    [NullableContextAttribute("1")]
public virtual void AfterTest(ITest test);
    public virtual ActionTargets get_Targets();
}
[AttributeUsageAttribute("1")]
public class NUnit.Framework.TestAssemblyDirectoryResolveAttribute : NUnitAttribute {
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
[AttributeUsageAttribute("64")]
public class NUnit.Framework.TestAttribute : NUnitAttribute {
    private object _expectedResult;
    private bool _hasExpectedResult;
    [NullableAttribute("1")]
private NUnitTestCaseBuilder _builder;
    [CompilerGeneratedAttribute]
private string <Description>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Author>k__BackingField;
    [CompilerGeneratedAttribute]
private Type <TestOf>k__BackingField;
    public string Description { get; public set; }
    public string Author { get; public set; }
    public Type TestOf { get; public set; }
    public object ExpectedResult { get; public set; }
    [CompilerGeneratedAttribute]
public string get_Description();
    [CompilerGeneratedAttribute]
public void set_Description(string value);
    [CompilerGeneratedAttribute]
public string get_Author();
    [CompilerGeneratedAttribute]
public void set_Author(string value);
    [CompilerGeneratedAttribute]
public Type get_TestOf();
    [CompilerGeneratedAttribute]
public void set_TestOf(Type value);
    public object get_ExpectedResult();
    public void set_ExpectedResult(object value);
    [NullableContextAttribute("1")]
public sealed virtual void ApplyToTest(Test test);
    [NullableContextAttribute("1")]
public sealed virtual TestMethod BuildFrom(IMethodInfo method, Test suite);
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
[AttributeUsageAttribute("64")]
public class NUnit.Framework.TestCaseAttribute : NUnitAttribute {
    [CompilerGeneratedAttribute]
private string <TestName>k__BackingField;
    [CompilerGeneratedAttribute]
private RunState <RunState>k__BackingField;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[CompilerGeneratedAttribute]
private Object[] <Arguments>k__BackingField;
    [NullableAttribute("1")]
[CompilerGeneratedAttribute]
private IPropertyBag <Properties>k__BackingField;
    private object _expectedResult;
    [CompilerGeneratedAttribute]
private bool <HasExpectedResult>k__BackingField;
    private RunState _originalRunState;
    private Nullable`1<DateTimeOffset> _untilDate;
    private Type _testOf;
    [CompilerGeneratedAttribute]
private string <IncludePlatform>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ExcludePlatform>k__BackingField;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[CompilerGeneratedAttribute]
private Type[] <TypeArgs>k__BackingField;
    public string TestName { get; public set; }
    public RunState RunState { get; private set; }
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public Object[] Arguments { get; }
    [NullableAttribute("1")]
public IPropertyBag Properties { get; }
    public object ExpectedResult { get; public set; }
    public bool HasExpectedResult { get; private set; }
    public string Description { get; public set; }
    public string Author { get; public set; }
    public Type TestOf { get; public set; }
    public string Ignore { get; public set; }
    public bool Explicit { get; public set; }
    public string Reason { get; public set; }
    public string IgnoreReason { get; public set; }
    public string IncludePlatform { get; public set; }
    public string ExcludePlatform { get; public set; }
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public Type[] TypeArgs { get; public set; }
    public string Category { get; public set; }
    [StringSyntaxAttribute("DateTimeFormat")]
public string Until { get; public set; }
    public TestCaseAttribute(Object[] arguments);
    public TestCaseAttribute(object arg);
    public TestCaseAttribute(object arg1, object arg2);
    public TestCaseAttribute(object arg1, object arg2, object arg3);
    [CompilerGeneratedAttribute]
public sealed virtual string get_TestName();
    [CompilerGeneratedAttribute]
public void set_TestName(string value);
    [CompilerGeneratedAttribute]
public sealed virtual RunState get_RunState();
    [CompilerGeneratedAttribute]
private void set_RunState(RunState value);
    [CompilerGeneratedAttribute]
public sealed virtual Object[] get_Arguments();
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
public sealed virtual IPropertyBag get_Properties();
    public sealed virtual object get_ExpectedResult();
    public void set_ExpectedResult(object value);
    [CompilerGeneratedAttribute]
public sealed virtual bool get_HasExpectedResult();
    [CompilerGeneratedAttribute]
private void set_HasExpectedResult(bool value);
    public string get_Description();
    public void set_Description(string value);
    public string get_Author();
    public void set_Author(string value);
    public Type get_TestOf();
    public void set_TestOf(Type value);
    public string get_Ignore();
    public void set_Ignore(string value);
    public bool get_Explicit();
    public void set_Explicit(bool value);
    public string get_Reason();
    public void set_Reason(string value);
    public string get_IgnoreReason();
    public void set_IgnoreReason(string value);
    [CompilerGeneratedAttribute]
public string get_IncludePlatform();
    [CompilerGeneratedAttribute]
public void set_IncludePlatform(string value);
    [CompilerGeneratedAttribute]
public string get_ExcludePlatform();
    [CompilerGeneratedAttribute]
public void set_ExcludePlatform(string value);
    [CompilerGeneratedAttribute]
public Type[] get_TypeArgs();
    [CompilerGeneratedAttribute]
public void set_TypeArgs(Type[] value);
    public string get_Category();
    public void set_Category(string value);
    public string get_Until();
    public void set_Until(string value);
    [NullableContextAttribute("1")]
private TestCaseParameters GetParametersForTestCase(IMethodInfo method);
    [NullableContextAttribute("1")]
private static void PerformSpecialConversions(Object[] arglist, IParameterInfo[] parameters);
    [NullableContextAttribute("1")]
[IteratorStateMachineAttribute("NUnit.Framework.TestCaseAttribute/<BuildFrom>d__70")]
public sealed virtual IEnumerable`1<TestMethod> BuildFrom(IMethodInfo method, Test suite);
}
[AttributeUsageAttribute("64")]
public class NUnit.Framework.TestCaseAttribute`1 : TestCaseAttribute {
    [NullableContextAttribute("1")]
public TestCaseAttribute`1(T argument);
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
[AttributeUsageAttribute("64")]
public class NUnit.Framework.TestCaseAttribute`2 : TestCaseAttribute {
    [NullableContextAttribute("1")]
public TestCaseAttribute`2(T1 argument1, T2 argument2);
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
[AttributeUsageAttribute("64")]
public class NUnit.Framework.TestCaseAttribute`3 : TestCaseAttribute {
    [NullableContextAttribute("1")]
public TestCaseAttribute`3(T1 argument1, T2 argument2, T3 argument3);
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
[AttributeUsageAttribute("64")]
public class NUnit.Framework.TestCaseAttribute`4 : TestCaseAttribute {
    [NullableContextAttribute("1")]
public TestCaseAttribute`4(T1 argument1, T2 argument2, T3 argument3, T4 argument4);
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
[AttributeUsageAttribute("64")]
public class NUnit.Framework.TestCaseAttribute`5 : TestCaseAttribute {
    [NullableContextAttribute("1")]
public TestCaseAttribute`5(T1 argument1, T2 argument2, T3 argument3, T4 argument4, T5 argument5);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class NUnit.Framework.TestCaseData : TestCaseParameters {
    [NullableContextAttribute("2")]
public TestCaseData(Object[] args);
    [NullableContextAttribute("2")]
public TestCaseData(object arg);
    [NullableContextAttribute("2")]
public TestCaseData(object arg1, object arg2);
    [NullableContextAttribute("2")]
public TestCaseData(object arg1, object arg2, object arg3);
    public TestCaseData Returns(object result);
    public TestCaseData SetName(string name);
    public TestCaseData SetArgDisplayNames(String[] displayNames);
    public TestCaseData SetDescription(string description);
    public TestCaseData SetCategory(string category);
    public TestCaseData SetProperty(string propName, string propValue);
    public TestCaseData SetProperty(string propName, int propValue);
    public TestCaseData SetProperty(string propName, double propValue);
    public TestCaseData Explicit();
    public TestCaseData Explicit(string reason);
    public IgnoredTestCaseData Ignore(string reason);
}
public class NUnit.Framework.TestCaseData`1 : TestCaseData {
    [NullableContextAttribute("1")]
public TestCaseData`1(T argument);
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
public class NUnit.Framework.TestCaseData`2 : TestCaseData {
    [NullableContextAttribute("1")]
public TestCaseData`2(T1 argument1, T2 argument2);
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
public class NUnit.Framework.TestCaseData`3 : TestCaseData {
    [NullableContextAttribute("1")]
public TestCaseData`3(T1 argument1, T2 argument2, T3 argument3);
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
public class NUnit.Framework.TestCaseData`4 : TestCaseData {
    [NullableContextAttribute("1")]
public TestCaseData`4(T1 argument1, T2 argument2, T3 argument3, T4 argument4);
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
public class NUnit.Framework.TestCaseData`5 : TestCaseData {
    [NullableContextAttribute("1")]
public TestCaseData`5(T1 argument1, T2 argument2, T3 argument3, T4 argument4, T5 argument5);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[AttributeUsageAttribute("64")]
public class NUnit.Framework.TestCaseSourceAttribute : NUnitAttribute {
    private NUnitTestCaseBuilder _builder;
    [NullableAttribute("2")]
[CompilerGeneratedAttribute]
private Object[] <MethodParams>k__BackingField;
    [NullableAttribute("2")]
[CompilerGeneratedAttribute]
private string <SourceName>k__BackingField;
    [NullableAttribute("2")]
[CompilerGeneratedAttribute]
private Type <SourceType>k__BackingField;
    [NullableAttribute("2")]
[CompilerGeneratedAttribute]
private string <Category>k__BackingField;
    private static string SourceMustBeStatic;
    private static string ParamGivenToField;
    private static string ParamGivenToProperty;
    private static string NumberOfArgsDoesNotMatch;
    [NullableAttribute("2")]
public Object[] MethodParams { get; }
    [NullableAttribute("2")]
public string SourceName { get; }
    [NullableAttribute("2")]
public Type SourceType { get; }
    [NullableAttribute("2")]
public string Category { get; public set; }
    public TestCaseSourceAttribute(string sourceName);
    public TestCaseSourceAttribute(Type sourceType, string sourceName, Object[] methodParams);
    public TestCaseSourceAttribute(Type sourceType, string sourceName);
    public TestCaseSourceAttribute(string sourceName, Object[] methodParams);
    public TestCaseSourceAttribute(Type sourceType);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public Object[] get_MethodParams();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public string get_SourceName();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public Type get_SourceType();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public string get_Category();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public void set_Category(string value);
    [IteratorStateMachineAttribute("NUnit.Framework.TestCaseSourceAttribute/<BuildFrom>d__19")]
public sealed virtual IEnumerable`1<TestMethod> BuildFrom(IMethodInfo method, Test suite);
    private IEnumerable`1<ITestCaseData> GetTestCasesFor(IMethodInfo method);
    private IEnumerable GetTestCaseSource(IMethodInfo method);
    private static IEnumerable ReturnErrorAsParameter(string errorMessage);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class NUnit.Framework.TestContext : object {
    private TestExecutionContext _testExecutionContext;
    [NullableAttribute("2")]
private TestAdapter _test;
    [NullableAttribute("2")]
private ResultAdapter _result;
    public static TextWriter Error;
    public static TextWriter Progress;
    public static TestParameters Parameters;
    [NullableAttribute("2")]
internal static string DefaultWorkDirectory;
    public static TestContext CurrentContext { get; }
    public static TextWriter Out { get; }
    public TestAdapter Test { get; }
    public ResultAdapter Result { get; }
    [NullableAttribute("2")]
public string WorkerId { get; }
    public string TestDirectory { get; }
    public string WorkDirectory { get; }
    public Randomizer Random { get; }
    public int AssertCount { get; }
    public int CurrentRepeatCount { get; }
    public CancellationToken CancellationToken { get; }
    public TestContext(TestExecutionContext testExecutionContext);
    private static TestContext();
    public static TestContext get_CurrentContext();
    public static TextWriter get_Out();
    public TestAdapter get_Test();
    public ResultAdapter get_Result();
    [NullableContextAttribute("2")]
public string get_WorkerId();
    public string get_TestDirectory();
    public string get_WorkDirectory();
    public Randomizer get_Random();
    public int get_AssertCount();
    public int get_CurrentRepeatCount();
    public CancellationToken get_CancellationToken();
    public static void Write(bool value);
    public static void Write(char value);
    [NullableContextAttribute("2")]
public static void Write(Char[] value);
    public static void Write(double value);
    public static void Write(int value);
    public static void Write(long value);
    public static void Write(decimal value);
    [NullableContextAttribute("2")]
public static void Write(object value);
    public static void Write(float value);
    [NullableContextAttribute("2")]
public static void Write(string value);
    [CLSCompliantAttribute("False")]
public static void Write(UInt32 value);
    [CLSCompliantAttribute("False")]
public static void Write(ulong value);
    public static void Write(string format, object arg1);
    [NullableContextAttribute("2")]
public static void Write(string format, object arg1, object arg2);
    [NullableContextAttribute("2")]
public static void Write(string format, object arg1, object arg2, object arg3);
    public static void Write(string format, Object[] args);
    public static void WriteLine();
    public static void WriteLine(bool value);
    public static void WriteLine(char value);
    [NullableContextAttribute("2")]
public static void WriteLine(Char[] value);
    public static void WriteLine(double value);
    public static void WriteLine(int value);
    public static void WriteLine(long value);
    public static void WriteLine(decimal value);
    [NullableContextAttribute("2")]
public static void WriteLine(object value);
    public static void WriteLine(float value);
    [NullableContextAttribute("2")]
public static void WriteLine(string value);
    [CLSCompliantAttribute("False")]
public static void WriteLine(UInt32 value);
    [CLSCompliantAttribute("False")]
public static void WriteLine(ulong value);
    public static void WriteLine(string format, object arg1);
    [NullableContextAttribute("2")]
public static void WriteLine(string format, object arg1, object arg2);
    [NullableContextAttribute("2")]
public static void WriteLine(string format, object arg1, object arg2, object arg3);
    public static void WriteLine(string format, Object[] args);
    public static void AddFormatter(ValueFormatterFactory formatterFactory);
    public static void AddTestAttachment(string filePath, string description);
    public static void AddFormatter(ValueFormatter formatter);
}
public class NUnit.Framework.TestDelegate : MulticastDelegate {
    public TestDelegate(object object, IntPtr method);
    public virtual void Invoke();
    public virtual IAsyncResult BeginInvoke(AsyncCallback callback, object object);
    public virtual void EndInvoke(IAsyncResult result);
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
[AttributeUsageAttribute("4")]
public class NUnit.Framework.TestFixtureAttribute : NUnitAttribute {
    [NullableAttribute("1")]
private NUnitTestFixtureBuilder _builder;
    [CompilerGeneratedAttribute]
private string <TestName>k__BackingField;
    [CompilerGeneratedAttribute]
private RunState <RunState>k__BackingField;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[CompilerGeneratedAttribute]
private Object[] <Arguments>k__BackingField;
    [NullableAttribute("1")]
[CompilerGeneratedAttribute]
private IPropertyBag <Properties>k__BackingField;
    [NullableAttribute("1")]
[CompilerGeneratedAttribute]
private Type[] <TypeArgs>k__BackingField;
    private Type _testOf;
    public string TestName { get; public set; }
    public RunState RunState { get; private set; }
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public Object[] Arguments { get; }
    [NullableAttribute("1")]
public IPropertyBag Properties { get; }
    [NullableAttribute("1")]
public Type[] TypeArgs { get; public set; }
    public string Description { get; public set; }
    public string Author { get; public set; }
    public Type TestOf { get; public set; }
    public string Ignore { get; public set; }
    public string Reason { get; public set; }
    public string IgnoreReason { get; public set; }
    public bool Explicit { get; public set; }
    public string Category { get; public set; }
    public TestFixtureAttribute(Object[] arguments);
    [CompilerGeneratedAttribute]
public sealed virtual string get_TestName();
    [CompilerGeneratedAttribute]
public void set_TestName(string value);
    [CompilerGeneratedAttribute]
public sealed virtual RunState get_RunState();
    [CompilerGeneratedAttribute]
private void set_RunState(RunState value);
    [CompilerGeneratedAttribute]
public sealed virtual Object[] get_Arguments();
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
public sealed virtual IPropertyBag get_Properties();
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
public sealed virtual Type[] get_TypeArgs();
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
public void set_TypeArgs(Type[] value);
    public string get_Description();
    public void set_Description(string value);
    public string get_Author();
    public void set_Author(string value);
    public Type get_TestOf();
    public void set_TestOf(Type value);
    public string get_Ignore();
    public void set_Ignore(string value);
    public string get_Reason();
    public void set_Reason(string value);
    public string get_IgnoreReason();
    public void set_IgnoreReason(string value);
    public bool get_Explicit();
    public void set_Explicit(bool value);
    public string get_Category();
    public void set_Category(string value);
    [NullableContextAttribute("1")]
public sealed virtual IEnumerable`1<TestSuite> BuildFrom(ITypeInfo typeInfo);
    [NullableContextAttribute("1")]
[IteratorStateMachineAttribute("NUnit.Framework.TestFixtureAttribute/<BuildFrom>d__47")]
public sealed virtual IEnumerable`1<TestSuite> BuildFrom(ITypeInfo typeInfo, IPreFilter filter);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class NUnit.Framework.TestFixtureData : TestFixtureParameters {
    [NullableContextAttribute("2")]
public TestFixtureData(Object[] args);
    [NullableContextAttribute("2")]
public TestFixtureData(object arg);
    [NullableContextAttribute("2")]
public TestFixtureData(object arg1, object arg2);
    [NullableContextAttribute("2")]
public TestFixtureData(object arg1, object arg2, object arg3);
    internal TestFixtureData SetName(string name);
    public TestFixtureData SetArgDisplayNames(String[] displayNames);
    public TestFixtureData Explicit();
    public TestFixtureData Explicit(string reason);
    public TestFixtureData Ignore(string reason);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[AttributeUsageAttribute("4")]
public class NUnit.Framework.TestFixtureSourceAttribute : NUnitAttribute {
    private NUnitTestFixtureBuilder _builder;
    public static string MUST_BE_STATIC;
    [NullableAttribute("2")]
[CompilerGeneratedAttribute]
private string <SourceName>k__BackingField;
    [NullableAttribute("2")]
[CompilerGeneratedAttribute]
private Type <SourceType>k__BackingField;
    [NullableAttribute("2")]
[CompilerGeneratedAttribute]
private string <Category>k__BackingField;
    [NullableAttribute("2")]
public string SourceName { get; }
    [NullableAttribute("2")]
public Type SourceType { get; }
    [NullableAttribute("2")]
public string Category { get; public set; }
    public TestFixtureSourceAttribute(string sourceName);
    public TestFixtureSourceAttribute(Type sourceType, string sourceName);
    public TestFixtureSourceAttribute(Type sourceType);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public string get_SourceName();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public Type get_SourceType();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public string get_Category();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public void set_Category(string value);
    public sealed virtual IEnumerable`1<TestSuite> BuildFrom(ITypeInfo typeInfo);
    [IteratorStateMachineAttribute("NUnit.Framework.TestFixtureSourceAttribute/<BuildFrom>d__16")]
public sealed virtual IEnumerable`1<TestSuite> BuildFrom(ITypeInfo typeInfo, IPreFilter filter);
    public IEnumerable`1<ITestFixtureData> GetParametersFor(Type sourceType);
    private IEnumerable GetTestFixtureSource(Type sourceType);
    private static IEnumerable SourceMustBeStaticError();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[AttributeUsageAttribute("69")]
public class NUnit.Framework.TestOfAttribute : PropertyAttribute {
    public TestOfAttribute(Type type);
    public TestOfAttribute(string typeName);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[DefaultMemberAttribute("Item")]
public class NUnit.Framework.TestParameters : object {
    private static IFormatProvider MODIFIED_INVARIANT_CULTURE;
    private Dictionary`2<string, string> _parameters;
    public int Count { get; }
    public ICollection`1<string> Names { get; }
    [NullableAttribute("2")]
public string Item { get; }
    private static TestParameters();
    public int get_Count();
    public ICollection`1<string> get_Names();
    public bool Exists(string name);
    public string get_Item(string name);
    public string Get(string name);
    [NullableContextAttribute("2")]
public string Get(string name, string defaultValue);
    public T Get(string name, T defaultValue);
    internal void Add(string name, string value);
    private static IFormatProvider CreateModifiedInvariantCulture();
}
[AttributeUsageAttribute("64")]
public class NUnit.Framework.TheoryAttribute : CombiningStrategyAttribute {
    public TheoryAttribute(bool searchInDeclaringTypes);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public abstract class NUnit.Framework.Throws : object {
    public static ResolvableConstraintExpression Exception { get; }
    public static ResolvableConstraintExpression InnerException { get; }
    public static ExactTypeConstraint TargetInvocationException { get; }
    public static ExactTypeConstraint ArgumentException { get; }
    public static ExactTypeConstraint ArgumentNullException { get; }
    public static ExactTypeConstraint InvalidOperationException { get; }
    public static ThrowsNothingConstraint Nothing { get; }
    public static ResolvableConstraintExpression get_Exception();
    public static ResolvableConstraintExpression get_InnerException();
    public static ExactTypeConstraint get_TargetInvocationException();
    public static ExactTypeConstraint get_ArgumentException();
    public static ExactTypeConstraint get_ArgumentNullException();
    public static ExactTypeConstraint get_InvalidOperationException();
    public static ThrowsNothingConstraint get_Nothing();
    public static ExactTypeConstraint TypeOf(Type expectedType);
    public static ExactTypeConstraint TypeOf();
    public static InstanceOfTypeConstraint InstanceOf(Type expectedType);
    public static InstanceOfTypeConstraint InstanceOf();
}
[AttributeUsageAttribute("69")]
[ObsoleteAttribute(".NET No longer supports aborting threads as it is not a safe thing to do. Update your tests to use CancelAfterAttribute instead")]
public class NUnit.Framework.TimeoutAttribute : PropertyAttribute {
    private int _timeout;
    public TimeoutAttribute(int timeout);
    [NullableContextAttribute("1")]
private sealed virtual override void NUnit.Framework.Interfaces.IApplyToContext.ApplyToContext(TestExecutionContext context);
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
[AttributeUsageAttribute("2048")]
public class NUnit.Framework.ValuesAttribute : NUnitAttribute {
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
protected Object[] data;
    public ValuesAttribute(object arg1);
    public ValuesAttribute(object arg1, object arg2);
    public ValuesAttribute(object arg1, object arg2, object arg3);
    public ValuesAttribute(Object[] args);
    [NullableContextAttribute("1")]
public sealed virtual IEnumerable GetData(IParameterInfo parameter);
    [NullableContextAttribute("1")]
private static IEnumerable GenerateData(Type targetType);
    [NullableContextAttribute("1")]
private static bool IsNullableEnum(Type t);
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
[AttributeUsageAttribute("2048")]
public class NUnit.Framework.ValueSourceAttribute : NUnitAttribute {
    [CompilerGeneratedAttribute]
private string <SourceName>k__BackingField;
    [CompilerGeneratedAttribute]
private Type <SourceType>k__BackingField;
    public string SourceName { get; }
    public Type SourceType { get; }
    public ValueSourceAttribute(string sourceName);
    public ValueSourceAttribute(Type sourceType, string sourceName);
    [CompilerGeneratedAttribute]
public string get_SourceName();
    [CompilerGeneratedAttribute]
public Type get_SourceType();
    [NullableContextAttribute("1")]
public sealed virtual IEnumerable GetData(IParameterInfo parameter);
    [NullableContextAttribute("1")]
private IEnumerable GetDataSource(IParameterInfo parameter);
    [NullableContextAttribute("1")]
private static IEnumerable GetDataSourceValue(MemberInfo[] members);
    [NullableContextAttribute("1")]
private static InvalidDataSourceException CreateSourceNameException();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public abstract class NUnit.Framework.Warn : object {
    [EditorBrowsableAttribute("1")]
public static bool Equals(object a, object b);
    [EditorBrowsableAttribute("1")]
public static void ReferenceEquals(object a, object b);
    public static void Unless(ActualValueDelegate`1<TActual> del, IResolveConstraint expr, NUnitString message, string actualExpression, string constraintExpression);
    public static void Unless(ActualValueDelegate`1<TActual> del, IResolveConstraint expr, FormattableString message, string actualExpression, string constraintExpression);
    public static void Unless(ActualValueDelegate`1<TActual> del, IResolveConstraint expr, Func`1<string> getExceptionMessage, string actualExpression, string constraintExpression);
    public static void Unless(bool condition, NUnitString message, string actualExpression);
    public static void Unless(bool condition, FormattableString message, string actualExpression);
    public static void Unless(bool condition, Func`1<string> getExceptionMessage, string actualExpression);
    public static void Unless(Func`1<bool> condition, NUnitString message, string actualExpression);
    public static void Unless(Func`1<bool> condition, FormattableString message, string actualExpression);
    public static void Unless(Func`1<bool> condition, Func`1<string> getExceptionMessage, string actualExpression);
    public static void Unless(TActual actual, IResolveConstraint expression, NUnitString message, string actualExpression, string constraintExpression);
    public static void Unless(TActual actual, IResolveConstraint expression, FormattableString message, string actualExpression, string constraintExpression);
    public static void Unless(TActual actual, IResolveConstraint expression, Func`1<string> getExceptionMessage, string actualExpression, string constraintExpression);
    public static void If(ActualValueDelegate`1<TActual> del, IResolveConstraint expr, NUnitString message, string actualExpression, string constraintExpression);
    public static void If(ActualValueDelegate`1<TActual> del, IResolveConstraint expr, FormattableString message, string actualExpression, string constraintExpression);
    public static void If(ActualValueDelegate`1<TActual> del, IResolveConstraint expr, Func`1<string> getExceptionMessage, string actualExpression, string constraintExpression);
    public static void If(bool condition, NUnitString message, string actualExpression);
    public static void If(bool condition, FormattableString message, string actualExpression);
    public static void If(bool condition, Func`1<string> getExceptionMessage, string actualExpression);
    public static void If(Func`1<bool> condition, NUnitString message, string actualExpression);
    public static void If(Func`1<bool> condition, FormattableString message, string actualExpression);
    public static void If(Func`1<bool> condition, Func`1<string> getExceptionMessage, string actualExpression);
    public static void If(TActual actual, IResolveConstraint expression, NUnitString message, string actualExpression, string constraintExpression);
    public static void If(TActual actual, IResolveConstraint expression, FormattableString message, string actualExpression, string constraintExpression);
    public static void If(TActual actual, IResolveConstraint expression, Func`1<string> getExceptionMessage, string actualExpression, string constraintExpression);
    private static void IncrementAssertCount();
    private static void IssueWarning(ConstraintResult result, string method, string message, string actualExpression, string constraintExpression);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ExtensionAttribute]
internal static class NUnit.Framework.XmlExtensions : object {
    internal static XmlWriterSettings FragmentWriterSettings;
    private static XmlExtensions();
    [ExtensionAttribute]
internal static void WriteAttributeStringSafe(XmlWriter writer, string name, string value);
    [ExtensionAttribute]
internal static void WriteCDataSafe(XmlWriter writer, string text);
    [NullableContextAttribute("2")]
internal static string EscapeInvalidXmlCharacters(string str);
    private static string EscapeInvalidXmlCharactersUnlikely(string str);
    private static string CharToUnicodeSequence(char symbol);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public static class NUnit.FrameworkPackageSettings : object {
    public static string DebugTests;
    public static string PauseBeforeRun;
    public static string InternalTraceLevel;
    public static string WorkDirectory;
    public static string DefaultTimeout;
    public static string DefaultCulture;
    public static string DefaultUICulture;
    public static string InternalTraceWriter;
    public static string LOAD;
    public static string NumberOfTestWorkers;
    public static string RandomSeed;
    public static string StopOnError;
    public static string ThrowOnEachFailureUnderDebugger;
    public static string SynchronousEvents;
    public static string DefaultTestNamePattern;
    public static string TestParameters;
    public static string TestParametersDictionary;
    public static string RunOnMainThread;
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[AttributeUsageAttribute("2432")]
internal class System.Diagnostics.CodeAnalysis.StringSyntaxAttribute : Attribute {
    public static string CompositeFormat;
    public static string DateOnlyFormat;
    public static string DateTimeFormat;
    public static string EnumFormat;
    public static string GuidFormat;
    public static string Json;
    public static string NumericFormat;
    public static string Regex;
    public static string TimeOnlyFormat;
    public static string TimeSpanFormat;
    public static string Uri;
    public static string Xml;
    [CompilerGeneratedAttribute]
private string <Syntax>k__BackingField;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[CompilerGeneratedAttribute]
private Object[] <Arguments>k__BackingField;
    public string Syntax { get; }
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public Object[] Arguments { get; }
    public StringSyntaxAttribute(string syntax);
    public StringSyntaxAttribute(string syntax, Object[] arguments);
    [CompilerGeneratedAttribute]
public string get_Syntax();
    [CompilerGeneratedAttribute]
public Object[] get_Arguments();
}
[ExcludeFromCodeCoverageAttribute]
[DebuggerNonUserCodeAttribute]
internal static class System.Runtime.CompilerServices.IsExternalInit : object {
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
[AttributeUsageAttribute("27524")]
internal class System.Runtime.CompilerServices.NullableAttribute : Attribute {
    public Byte[] NullableFlags;
    public NullableAttribute(byte );
    public NullableAttribute(Byte[] );
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
[AttributeUsageAttribute("5196")]
internal class System.Runtime.CompilerServices.NullableContextAttribute : Attribute {
    public byte Flag;
    public NullableContextAttribute(byte );
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
[AttributeUsageAttribute("2")]
internal class System.Runtime.CompilerServices.RefSafetyRulesAttribute : Attribute {
    public int Version;
    public RefSafetyRulesAttribute(int );
}
[NullableContextAttribute("1")]
public interface System.Web.UI.ICallbackEventHandler {
    public abstract virtual void RaiseCallbackEvent(string report);
    public abstract virtual string GetCallbackResult();
}
