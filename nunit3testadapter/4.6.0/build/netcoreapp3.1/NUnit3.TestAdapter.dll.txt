[CompilerGeneratedAttribute]
[EmbeddedAttribute]
internal class Microsoft.CodeAnalysis.EmbeddedAttribute : Attribute {
}
public static class NUnit.Common.PackageSettings : object {
    public static string DebugTests;
    public static string PauseBeforeRun;
    public static string InternalTraceLevel;
    public static string WorkDirectory;
    public static string SkipNonTestAssemblies;
    public static string ActiveConfig;
    public static string AutoBinPath;
    public static string BasePath;
    public static string ConfigurationFile;
    public static string DebugAgent;
    public static string DomainUsage;
    public static string PrivateBinPath;
    public static string MaxAgents;
    public static string ProcessModel;
    public static string RuntimeFramework;
    public static string RunAsX86;
    public static string DisposeRunners;
    public static string ShadowCopyFiles;
    public static string DefaultTimeout;
    public static string InternalTraceWriter;
    public static string LOAD;
    public static string NumberOfTestWorkers;
    public static string RandomSeed;
    public static string StopOnError;
    public static string ThrowOnEachFailureUnderDebugger;
    public static string SynchronousEvents;
    public static string DefaultTestNamePattern;
    public static string TestParameters;
    public static string TestParametersDictionary;
    public static string ImageRuntimeVersion;
    public static string ImageRequiresX86;
    public static string ImageRequiresDefaultAppDomainAssemblyResolver;
    public static string ImageTargetFrameworkName;
}
public class NUnit.VisualStudio.TestAdapter.AdapterSettings : object {
    [CompilerGeneratedAttribute]
private ITestLogger <logger>P;
    private static string RandomSeedFile;
    [CompilerGeneratedAttribute]
private int <MaxCpuCount>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ResultsDirectory>k__BackingField;
    [CompilerGeneratedAttribute]
private string <TargetPlatform>k__BackingField;
    [CompilerGeneratedAttribute]
private string <TargetFrameworkVersion>k__BackingField;
    [CompilerGeneratedAttribute]
private string <TestAdapterPaths>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <CollectSourceInformation>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <DisableAppDomain>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <DisableParallelization>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <AllowParallelWithDebugger>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <DesignMode>k__BackingField;
    [CompilerGeneratedAttribute]
private IDictionary`2<string, string> <TestProperties>k__BackingField;
    [CompilerGeneratedAttribute]
private string <InternalTraceLevel>k__BackingField;
    [CompilerGeneratedAttribute]
private InternalTraceLevel <InternalTraceLevelEnum>k__BackingField;
    [CompilerGeneratedAttribute]
private string <WorkDirectory>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Where>k__BackingField;
    [CompilerGeneratedAttribute]
private string <TestOutputXml>k__BackingField;
    [CompilerGeneratedAttribute]
private string <TestOutputXmlFileName>k__BackingField;
    [CompilerGeneratedAttribute]
private OutputXmlFolderMode <OutputXmlFolderMode>k__BackingField;
    [CompilerGeneratedAttribute]
private string <TestOutputFolder>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <NewOutputXmlFileForEachRun>k__BackingField;
    [CompilerGeneratedAttribute]
private int <DefaultTimeout>k__BackingField;
    [CompilerGeneratedAttribute]
private int <NumberOfTestWorkers>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <ShadowCopyFiles>k__BackingField;
    [CompilerGeneratedAttribute]
private int <Verbosity>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <UseVsKeepEngineRunning>k__BackingField;
    [CompilerGeneratedAttribute]
private string <BasePath>k__BackingField;
    [CompilerGeneratedAttribute]
private string <PrivateBinPath>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<int> <RandomSeed>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <RandomSeedSpecified>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <CollectDataForEachTestSeparately>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <InProcDataCollectorsAvailable>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <SynchronousEvents>k__BackingField;
    [CompilerGeneratedAttribute]
private string <DomainUsage>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <ShowInternalProperties>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <UseParentFQNForParametrizedTests>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <UseNUnitIdforTestCaseId>k__BackingField;
    [CompilerGeneratedAttribute]
private int <ConsoleOut>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <StopOnError>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <ThrowOnEachFailureUnderDebugger>k__BackingField;
    [CompilerGeneratedAttribute]
private DiscoveryMethod <DiscoveryMethod>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <SkipNonTestAssemblies>k__BackingField;
    [CompilerGeneratedAttribute]
private int <AssemblySelectLimit>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <UseNUnitFilter>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IncludeStackTraceForSuites>k__BackingField;
    [CompilerGeneratedAttribute]
private VsTestCategoryType <VsTestCategoryType>k__BackingField;
    [CompilerGeneratedAttribute]
private string <DefaultTestNamePattern>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <PreFilter>k__BackingField;
    [CompilerGeneratedAttribute]
private TestOutcome <MapWarningTo>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <UseTestNameInConsoleOutput>k__BackingField;
    [CompilerGeneratedAttribute]
private DisplayNameOptions <DisplayName>k__BackingField;
    [CompilerGeneratedAttribute]
private char <FullnameSeparator>k__BackingField;
    [CompilerGeneratedAttribute]
private ExplicitModeEnum <ExplicitMode>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <SkipExecutionWhenNoTests>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <DumpXmlTestDiscovery>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <DumpXmlTestResults>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <DumpVsInput>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <FreakMode>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <Debug>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <DebugExecution>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <DebugDiscovery>k__BackingField;
    private TestLogger testLog;
    [CompilerGeneratedAttribute]
private bool <EnsureAttachmentFileScheme>k__BackingField;
    public int MaxCpuCount { get; private set; }
    public string ResultsDirectory { get; private set; }
    public string TargetPlatform { get; private set; }
    public string TargetFrameworkVersion { get; private set; }
    public string TestAdapterPaths { get; private set; }
    public bool CollectSourceInformation { get; private set; }
    public bool DisableAppDomain { get; private set; }
    public bool DisableParallelization { get; private set; }
    public bool AllowParallelWithDebugger { get; private set; }
    public bool DesignMode { get; private set; }
    public IDictionary`2<string, string> TestProperties { get; private set; }
    public string InternalTraceLevel { get; private set; }
    public InternalTraceLevel InternalTraceLevelEnum { get; private set; }
    public string WorkDirectory { get; private set; }
    public string Where { get; private set; }
    public string TestOutputXml { get; private set; }
    public string TestOutputXmlFileName { get; private set; }
    public bool UseTestOutputXml { get; }
    public OutputXmlFolderMode OutputXmlFolderMode { get; private set; }
    public string TestOutputFolder { get; private set; }
    public bool NewOutputXmlFileForEachRun { get; private set; }
    public int DefaultTimeout { get; private set; }
    public int NumberOfTestWorkers { get; private set; }
    public bool ShadowCopyFiles { get; private set; }
    public int Verbosity { get; private set; }
    public bool UseVsKeepEngineRunning { get; private set; }
    public string BasePath { get; private set; }
    public string PrivateBinPath { get; private set; }
    public Nullable`1<int> RandomSeed { get; private set; }
    public bool RandomSeedSpecified { get; private set; }
    public bool CollectDataForEachTestSeparately { get; private set; }
    public bool InProcDataCollectorsAvailable { get; private set; }
    public bool SynchronousEvents { get; private set; }
    public string DomainUsage { get; private set; }
    public bool ShowInternalProperties { get; private set; }
    public bool UseParentFQNForParametrizedTests { get; private set; }
    public bool UseNUnitIdforTestCaseId { get; private set; }
    public int ConsoleOut { get; private set; }
    public bool StopOnError { get; private set; }
    public bool ThrowOnEachFailureUnderDebugger { get; private set; }
    public DiscoveryMethod DiscoveryMethod { get; private set; }
    public bool SkipNonTestAssemblies { get; private set; }
    public int AssemblySelectLimit { get; private set; }
    public bool UseNUnitFilter { get; private set; }
    public bool IncludeStackTraceForSuites { get; private set; }
    public VsTestCategoryType VsTestCategoryType { get; private set; }
    public string DefaultTestNamePattern { get; public set; }
    public bool PreFilter { get; private set; }
    public TestOutcome MapWarningTo { get; private set; }
    public bool UseTestNameInConsoleOutput { get; private set; }
    public DisplayNameOptions DisplayName { get; private set; }
    public char FullnameSeparator { get; private set; }
    public ExplicitModeEnum ExplicitMode { get; private set; }
    public bool SkipExecutionWhenNoTests { get; private set; }
    public bool DumpXmlTestDiscovery { get; private set; }
    public bool DumpXmlTestResults { get; private set; }
    public bool DumpVsInput { get; private set; }
    public bool FreakMode { get; private set; }
    public bool Debug { get; private set; }
    public bool DebugExecution { get; private set; }
    public bool DebugDiscovery { get; private set; }
    public bool EnsureAttachmentFileScheme { get; private set; }
    public AdapterSettings(ITestLogger logger);
    [CompilerGeneratedAttribute]
public sealed virtual int get_MaxCpuCount();
    [CompilerGeneratedAttribute]
private void set_MaxCpuCount(int value);
    [CompilerGeneratedAttribute]
public sealed virtual string get_ResultsDirectory();
    [CompilerGeneratedAttribute]
private void set_ResultsDirectory(string value);
    [CompilerGeneratedAttribute]
public sealed virtual string get_TargetPlatform();
    [CompilerGeneratedAttribute]
private void set_TargetPlatform(string value);
    [CompilerGeneratedAttribute]
public sealed virtual string get_TargetFrameworkVersion();
    [CompilerGeneratedAttribute]
private void set_TargetFrameworkVersion(string value);
    [CompilerGeneratedAttribute]
public sealed virtual string get_TestAdapterPaths();
    [CompilerGeneratedAttribute]
private void set_TestAdapterPaths(string value);
    [CompilerGeneratedAttribute]
public sealed virtual bool get_CollectSourceInformation();
    [CompilerGeneratedAttribute]
private void set_CollectSourceInformation(bool value);
    [CompilerGeneratedAttribute]
public sealed virtual bool get_DisableAppDomain();
    [CompilerGeneratedAttribute]
private void set_DisableAppDomain(bool value);
    [CompilerGeneratedAttribute]
public sealed virtual bool get_DisableParallelization();
    [CompilerGeneratedAttribute]
private void set_DisableParallelization(bool value);
    [CompilerGeneratedAttribute]
public sealed virtual bool get_AllowParallelWithDebugger();
    [CompilerGeneratedAttribute]
private void set_AllowParallelWithDebugger(bool value);
    [CompilerGeneratedAttribute]
public sealed virtual bool get_DesignMode();
    [CompilerGeneratedAttribute]
private void set_DesignMode(bool value);
    [CompilerGeneratedAttribute]
public sealed virtual IDictionary`2<string, string> get_TestProperties();
    [CompilerGeneratedAttribute]
private void set_TestProperties(IDictionary`2<string, string> value);
    [CompilerGeneratedAttribute]
public string get_InternalTraceLevel();
    [CompilerGeneratedAttribute]
private void set_InternalTraceLevel(string value);
    [CompilerGeneratedAttribute]
public sealed virtual InternalTraceLevel get_InternalTraceLevelEnum();
    [CompilerGeneratedAttribute]
private void set_InternalTraceLevelEnum(InternalTraceLevel value);
    [CompilerGeneratedAttribute]
public sealed virtual string get_WorkDirectory();
    [CompilerGeneratedAttribute]
private void set_WorkDirectory(string value);
    [CompilerGeneratedAttribute]
public sealed virtual string get_Where();
    [CompilerGeneratedAttribute]
private void set_Where(string value);
    [CompilerGeneratedAttribute]
public sealed virtual string get_TestOutputXml();
    [CompilerGeneratedAttribute]
private void set_TestOutputXml(string value);
    [CompilerGeneratedAttribute]
public sealed virtual string get_TestOutputXmlFileName();
    [CompilerGeneratedAttribute]
private void set_TestOutputXmlFileName(string value);
    public sealed virtual bool get_UseTestOutputXml();
    [CompilerGeneratedAttribute]
public sealed virtual OutputXmlFolderMode get_OutputXmlFolderMode();
    [CompilerGeneratedAttribute]
private void set_OutputXmlFolderMode(OutputXmlFolderMode value);
    [CompilerGeneratedAttribute]
public sealed virtual string get_TestOutputFolder();
    [CompilerGeneratedAttribute]
private void set_TestOutputFolder(string value);
    [CompilerGeneratedAttribute]
public sealed virtual bool get_NewOutputXmlFileForEachRun();
    [CompilerGeneratedAttribute]
private void set_NewOutputXmlFileForEachRun(bool value);
    [CompilerGeneratedAttribute]
public sealed virtual int get_DefaultTimeout();
    [CompilerGeneratedAttribute]
private void set_DefaultTimeout(int value);
    [CompilerGeneratedAttribute]
public sealed virtual int get_NumberOfTestWorkers();
    [CompilerGeneratedAttribute]
private void set_NumberOfTestWorkers(int value);
    [CompilerGeneratedAttribute]
public sealed virtual bool get_ShadowCopyFiles();
    [CompilerGeneratedAttribute]
private void set_ShadowCopyFiles(bool value);
    [CompilerGeneratedAttribute]
public sealed virtual int get_Verbosity();
    [CompilerGeneratedAttribute]
private void set_Verbosity(int value);
    [CompilerGeneratedAttribute]
public sealed virtual bool get_UseVsKeepEngineRunning();
    [CompilerGeneratedAttribute]
private void set_UseVsKeepEngineRunning(bool value);
    [CompilerGeneratedAttribute]
public sealed virtual string get_BasePath();
    [CompilerGeneratedAttribute]
private void set_BasePath(string value);
    [CompilerGeneratedAttribute]
public sealed virtual string get_PrivateBinPath();
    [CompilerGeneratedAttribute]
private void set_PrivateBinPath(string value);
    [CompilerGeneratedAttribute]
public sealed virtual Nullable`1<int> get_RandomSeed();
    [CompilerGeneratedAttribute]
private void set_RandomSeed(Nullable`1<int> value);
    [CompilerGeneratedAttribute]
public sealed virtual bool get_RandomSeedSpecified();
    [CompilerGeneratedAttribute]
private void set_RandomSeedSpecified(bool value);
    [CompilerGeneratedAttribute]
public sealed virtual bool get_CollectDataForEachTestSeparately();
    [CompilerGeneratedAttribute]
private void set_CollectDataForEachTestSeparately(bool value);
    [CompilerGeneratedAttribute]
public sealed virtual bool get_InProcDataCollectorsAvailable();
    [CompilerGeneratedAttribute]
private void set_InProcDataCollectorsAvailable(bool value);
    [CompilerGeneratedAttribute]
public sealed virtual bool get_SynchronousEvents();
    [CompilerGeneratedAttribute]
private void set_SynchronousEvents(bool value);
    [CompilerGeneratedAttribute]
public sealed virtual string get_DomainUsage();
    [CompilerGeneratedAttribute]
private void set_DomainUsage(string value);
    [CompilerGeneratedAttribute]
public sealed virtual bool get_ShowInternalProperties();
    [CompilerGeneratedAttribute]
private void set_ShowInternalProperties(bool value);
    [CompilerGeneratedAttribute]
public sealed virtual bool get_UseParentFQNForParametrizedTests();
    [CompilerGeneratedAttribute]
private void set_UseParentFQNForParametrizedTests(bool value);
    [CompilerGeneratedAttribute]
public sealed virtual bool get_UseNUnitIdforTestCaseId();
    [CompilerGeneratedAttribute]
private void set_UseNUnitIdforTestCaseId(bool value);
    [CompilerGeneratedAttribute]
public sealed virtual int get_ConsoleOut();
    [CompilerGeneratedAttribute]
private void set_ConsoleOut(int value);
    [CompilerGeneratedAttribute]
public sealed virtual bool get_StopOnError();
    [CompilerGeneratedAttribute]
private void set_StopOnError(bool value);
    [CompilerGeneratedAttribute]
public sealed virtual bool get_ThrowOnEachFailureUnderDebugger();
    [CompilerGeneratedAttribute]
private void set_ThrowOnEachFailureUnderDebugger(bool value);
    [CompilerGeneratedAttribute]
public sealed virtual DiscoveryMethod get_DiscoveryMethod();
    [CompilerGeneratedAttribute]
private void set_DiscoveryMethod(DiscoveryMethod value);
    [CompilerGeneratedAttribute]
public sealed virtual bool get_SkipNonTestAssemblies();
    [CompilerGeneratedAttribute]
private void set_SkipNonTestAssemblies(bool value);
    [CompilerGeneratedAttribute]
public sealed virtual int get_AssemblySelectLimit();
    [CompilerGeneratedAttribute]
private void set_AssemblySelectLimit(int value);
    [CompilerGeneratedAttribute]
public sealed virtual bool get_UseNUnitFilter();
    [CompilerGeneratedAttribute]
private void set_UseNUnitFilter(bool value);
    [CompilerGeneratedAttribute]
public sealed virtual bool get_IncludeStackTraceForSuites();
    [CompilerGeneratedAttribute]
private void set_IncludeStackTraceForSuites(bool value);
    [CompilerGeneratedAttribute]
public sealed virtual VsTestCategoryType get_VsTestCategoryType();
    [CompilerGeneratedAttribute]
private void set_VsTestCategoryType(VsTestCategoryType value);
    [CompilerGeneratedAttribute]
public sealed virtual string get_DefaultTestNamePattern();
    [CompilerGeneratedAttribute]
public void set_DefaultTestNamePattern(string value);
    [CompilerGeneratedAttribute]
public sealed virtual bool get_PreFilter();
    [CompilerGeneratedAttribute]
private void set_PreFilter(bool value);
    [CompilerGeneratedAttribute]
public sealed virtual TestOutcome get_MapWarningTo();
    [CompilerGeneratedAttribute]
private void set_MapWarningTo(TestOutcome value);
    [CompilerGeneratedAttribute]
public sealed virtual bool get_UseTestNameInConsoleOutput();
    [CompilerGeneratedAttribute]
private void set_UseTestNameInConsoleOutput(bool value);
    [CompilerGeneratedAttribute]
public sealed virtual DisplayNameOptions get_DisplayName();
    [CompilerGeneratedAttribute]
private void set_DisplayName(DisplayNameOptions value);
    [CompilerGeneratedAttribute]
public sealed virtual char get_FullnameSeparator();
    [CompilerGeneratedAttribute]
private void set_FullnameSeparator(char value);
    [CompilerGeneratedAttribute]
public sealed virtual ExplicitModeEnum get_ExplicitMode();
    [CompilerGeneratedAttribute]
private void set_ExplicitMode(ExplicitModeEnum value);
    [CompilerGeneratedAttribute]
public sealed virtual bool get_SkipExecutionWhenNoTests();
    [CompilerGeneratedAttribute]
private void set_SkipExecutionWhenNoTests(bool value);
    [CompilerGeneratedAttribute]
public sealed virtual bool get_DumpXmlTestDiscovery();
    [CompilerGeneratedAttribute]
private void set_DumpXmlTestDiscovery(bool value);
    [CompilerGeneratedAttribute]
public sealed virtual bool get_DumpXmlTestResults();
    [CompilerGeneratedAttribute]
private void set_DumpXmlTestResults(bool value);
    [CompilerGeneratedAttribute]
public sealed virtual bool get_DumpVsInput();
    [CompilerGeneratedAttribute]
private void set_DumpVsInput(bool value);
    [CompilerGeneratedAttribute]
public sealed virtual bool get_FreakMode();
    [CompilerGeneratedAttribute]
private void set_FreakMode(bool value);
    [CompilerGeneratedAttribute]
public sealed virtual bool get_Debug();
    [CompilerGeneratedAttribute]
private void set_Debug(bool value);
    [CompilerGeneratedAttribute]
public sealed virtual bool get_DebugExecution();
    [CompilerGeneratedAttribute]
private void set_DebugExecution(bool value);
    [CompilerGeneratedAttribute]
public sealed virtual bool get_DebugDiscovery();
    [CompilerGeneratedAttribute]
private void set_DebugDiscovery(bool value);
    public sealed virtual void Load(IDiscoveryContext context, TestLogger testLogger);
    public sealed virtual void Load(string settingsXml);
    private void ParseOutputXml(XmlNode nunitNode);
    public sealed virtual string SetTestOutputFolder(string workDirectory);
    private void ExtractNUnitDiagnosticSettings(XmlNode nunitNode);
    private InternalTraceLevel ParseInternalTraceLevel(string s);
    private void UpdateTestProperties(XmlDocument doc);
    private void ExtractRunConfiguration(XmlDocument doc);
    private void MapTestCategory(string vsTestCategoryType);
    private void MapDisplayName(string displaynameoptions);
    public sealed virtual void SaveRandomSeed(string dirname);
    public sealed virtual void RestoreRandomSeed(string dirname);
    [CompilerGeneratedAttribute]
public sealed virtual bool get_EnsureAttachmentFileScheme();
    [CompilerGeneratedAttribute]
private void set_EnsureAttachmentFileScheme(bool value);
    private void UpdateNumberOfTestWorkers();
    private string GetInnerTextWithLog(XmlNode startNode, string xpath, String[] validValues);
    private string GetInnerText(XmlNode startNode, string xpath, bool log, String[] validValues);
    private int GetInnerTextAsInt(XmlNode startNode, string xpath, int defaultValue);
    private Nullable`1<int> GetInnerTextAsNullableInt(XmlNode startNode, string xpath, bool log);
    private bool GetInnerTextAsBool(XmlNode startNode, string xpath, bool defaultValue);
    private void Log(string xpath, T res);
    public TestOutcome MapWarningOutcome(string outcome);
    public T MapEnum(string setting, T defaultValue);
}
public class NUnit.VisualStudio.TestAdapter.CategoryList : object {
    private static string NUnitTestCategoryLabel;
    internal static TestProperty NUnitTestCategoryProperty;
    internal static TestProperty NUnitExplicitProperty;
    private static string ExplicitTraitName;
    private static string ExplicitTraitValue;
    private NUnitProperty explicitTrait;
    private List`1<string> categorylist;
    private TestCase testCase;
    private IAdapterSettings settings;
    private bool showInternalProperties;
    [CompilerGeneratedAttribute]
private int <LastNodeListCount>k__BackingField;
    private HashSet`1<string> _internalProperties;
    public int LastNodeListCount { get; private set; }
    public CategoryList(TestCase testCase, IAdapterSettings adapterSettings);
    private static CategoryList();
    public void AddRange(IEnumerable`1<string> categories);
    [CompilerGeneratedAttribute]
public int get_LastNodeListCount();
    [CompilerGeneratedAttribute]
private void set_LastNodeListCount(int value);
    public IEnumerable`1<string> ProcessTestCaseProperties(INUnitTestCasePropertyInfo testNode, bool addToCache, string key, IDictionary`2<string, CachedTestCaseInfo> traitsCache);
    private bool IsInternalProperty(NUnitProperty property);
    private void AddTraitsToCache(IDictionary`2<string, CachedTestCaseInfo> traitsCache, string key, NUnitProperty property);
    private static CachedTestCaseInfo GetCachedInfo(IDictionary`2<string, CachedTestCaseInfo> traitsCache, string key);
    public void UpdateCategoriesToVs();
}
public enum NUnit.VisualStudio.TestAdapter.DiscoveryMethod : Enum {
    public int value__;
    public static DiscoveryMethod Legacy;
    public static DiscoveryMethod Current;
}
public enum NUnit.VisualStudio.TestAdapter.DisplayNameOptions : Enum {
    public int value__;
    public static DisplayNameOptions Name;
    public static DisplayNameOptions FullName;
    public static DisplayNameOptions FullNameSep;
}
public class NUnit.VisualStudio.TestAdapter.Dump.DumpXml : object {
    private static string Header;
    private static string Rootstart;
    private static string Rootend;
    private IFile file;
    private string directory;
    private string filename;
    private StringBuilder txt;
    private static string assemblyPath;
    public DumpXml(string path, IFile file);
    public void Dump2File(string path);
    private void EnsurePathExist(string path);
    public void DumpForDiscovery();
    public sealed virtual void DumpForExecution();
    public string RandomName();
    public sealed virtual void AddTestEvent(string text);
    public sealed virtual void AddString(string text);
    public sealed virtual void DumpVSInputFilter(TestFilter filter, string info);
    public void DumpVSInput(IEnumerable`1<TestCase> testCases);
    public void DumpVSInput2NUnit(TestPackage package);
    private void DumpFromVSInput(IGrouping`2<string, TestCase> testCases, TestFilter filter, TestPackage package);
    public sealed virtual void StartDiscoveryInExecution(IGrouping`2<string, TestCase> testCases, TestFilter filter, TestPackage package);
    public sealed virtual void StartExecution(TestFilter filter, string atExecution);
    public static IDumpXml CreateDump(string path, IGrouping`2<string, TestCase> testCases, IAdapterSettings settings);
}
public class NUnit.VisualStudio.TestAdapter.Dump.File : object {
    public sealed virtual void WriteAllText(string path, string txt);
    public sealed virtual bool DirectoryExist(string path);
    public sealed virtual void CreateDirectory(string path);
}
public interface NUnit.VisualStudio.TestAdapter.Dump.IDumpXml {
    public abstract virtual void AddString(string text);
    public abstract virtual void AddTestEvent(string text);
    public abstract virtual void StartDiscoveryInExecution(IGrouping`2<string, TestCase> testCases, TestFilter filter, TestPackage package);
    public abstract virtual void DumpForExecution();
    public abstract virtual void DumpVSInputFilter(TestFilter filter, string info);
    public abstract virtual void StartExecution(TestFilter filter, string atExecution);
}
public interface NUnit.VisualStudio.TestAdapter.Dump.IFile {
    public abstract virtual void WriteAllText(string path, string txt);
    public abstract virtual bool DirectoryExist(string path);
    public abstract virtual void CreateDirectory(string path);
}
[ExtensionAttribute]
public static class NUnit.VisualStudio.TestAdapter.Dump.XmlNodeExtension : object {
    [ExtensionAttribute]
public static string AsString(XmlNode node);
}
public abstract class NUnit.VisualStudio.TestAdapter.Execution : object {
    [CompilerGeneratedAttribute]
private IExecutionContext <ctx>P;
    protected string TestOutputXmlFolder { get; }
    protected ITestLogger TestLog { get; }
    protected IAdapterSettings Settings { get; }
    protected IDumpXml Dump { get; }
    protected IVsTestFilter VsTestFilter { get; }
    protected INUnitEngineAdapter NUnitEngineAdapter { get; }
    protected Execution(IExecutionContext ctx);
    protected string get_TestOutputXmlFolder();
    protected ITestLogger get_TestLog();
    protected IAdapterSettings get_Settings();
    protected IDumpXml get_Dump();
    protected IVsTestFilter get_VsTestFilter();
    protected INUnitEngineAdapter get_NUnitEngineAdapter();
    public virtual bool Run(TestFilter filter, DiscoveryConverter discovery, NUnit3TestExecutor nUnit3TestExecutor);
    public abstract virtual TestFilter CheckFilterInCurrentMode(TestFilter filter, IDiscoveryConverter discovery);
    protected NUnitTestFilterBuilder CreateTestFilterBuilder();
    protected ITestConverterCommon CreateConverter(DiscoveryConverter discovery);
    protected TestFilter CheckFilter(TestFilter testFilter, IDiscoveryConverter discovery);
}
public static class NUnit.VisualStudio.TestAdapter.ExecutionFactory : object {
    public static Execution Create(IExecutionContext ctx);
}
public enum NUnit.VisualStudio.TestAdapter.ExplicitModeEnum : Enum {
    public int value__;
    public static ExplicitModeEnum Strict;
    public static ExplicitModeEnum Relaxed;
    public static ExplicitModeEnum None;
}
public interface NUnit.VisualStudio.TestAdapter.IAdapterSettings {
    public int MaxCpuCount { get; }
    public string ResultsDirectory { get; }
    public string TargetPlatform { get; }
    public string TargetFrameworkVersion { get; }
    public string TestAdapterPaths { get; }
    public bool CollectSourceInformation { get; }
    public IDictionary`2<string, string> TestProperties { get; }
    public InternalTraceLevel InternalTraceLevelEnum { get; }
    public string WorkDirectory { get; }
    public string Where { get; }
    public int DefaultTimeout { get; }
    public int NumberOfTestWorkers { get; }
    public bool ShadowCopyFiles { get; }
    public int Verbosity { get; }
    public bool UseVsKeepEngineRunning { get; }
    public string BasePath { get; }
    public string PrivateBinPath { get; }
    public Nullable`1<int> RandomSeed { get; }
    public bool RandomSeedSpecified { get; }
    public bool InProcDataCollectorsAvailable { get; }
    public bool CollectDataForEachTestSeparately { get; }
    public bool SynchronousEvents { get; }
    public string DomainUsage { get; }
    public bool DumpXmlTestDiscovery { get; }
    public bool DumpXmlTestResults { get; }
    public bool DumpVsInput { get; }
    public bool PreFilter { get; }
    public string DefaultTestNamePattern { get; }
    public VsTestCategoryType VsTestCategoryType { get; }
    public string TestOutputXml { get; }
    public string TestOutputXmlFileName { get; }
    public bool UseTestOutputXml { get; }
    public OutputXmlFolderMode OutputXmlFolderMode { get; }
    public bool NewOutputXmlFileForEachRun { get; }
    public bool DesignMode { get; }
    public bool DisableAppDomain { get; }
    public bool DisableParallelization { get; }
    public bool AllowParallelWithDebugger { get; }
    public bool ShowInternalProperties { get; }
    public bool UseParentFQNForParametrizedTests { get; }
    public bool UseNUnitIdforTestCaseId { get; }
    public int ConsoleOut { get; }
    public bool StopOnError { get; }
    public TestOutcome MapWarningTo { get; }
    public bool UseTestNameInConsoleOutput { get; }
    public DisplayNameOptions DisplayName { get; }
    public char FullnameSeparator { get; }
    public DiscoveryMethod DiscoveryMethod { get; }
    public bool SkipNonTestAssemblies { get; }
    public bool ThrowOnEachFailureUnderDebugger { get; }
    public int AssemblySelectLimit { get; }
    public bool UseNUnitFilter { get; }
    public bool IncludeStackTraceForSuites { get; }
    public bool EnsureAttachmentFileScheme { get; }
    public bool FreakMode { get; }
    public bool Debug { get; }
    public bool DebugExecution { get; }
    public bool DebugDiscovery { get; }
    public ExplicitModeEnum ExplicitMode { get; }
    public bool SkipExecutionWhenNoTests { get; }
    public string TestOutputFolder { get; }
    public abstract virtual int get_MaxCpuCount();
    public abstract virtual string get_ResultsDirectory();
    public abstract virtual string get_TargetPlatform();
    public abstract virtual string get_TargetFrameworkVersion();
    public abstract virtual string get_TestAdapterPaths();
    public abstract virtual bool get_CollectSourceInformation();
    public abstract virtual IDictionary`2<string, string> get_TestProperties();
    public abstract virtual InternalTraceLevel get_InternalTraceLevelEnum();
    public abstract virtual string get_WorkDirectory();
    public abstract virtual string get_Where();
    public abstract virtual int get_DefaultTimeout();
    public abstract virtual int get_NumberOfTestWorkers();
    public abstract virtual bool get_ShadowCopyFiles();
    public abstract virtual int get_Verbosity();
    public abstract virtual bool get_UseVsKeepEngineRunning();
    public abstract virtual string get_BasePath();
    public abstract virtual string get_PrivateBinPath();
    public abstract virtual Nullable`1<int> get_RandomSeed();
    public abstract virtual bool get_RandomSeedSpecified();
    public abstract virtual bool get_InProcDataCollectorsAvailable();
    public abstract virtual bool get_CollectDataForEachTestSeparately();
    public abstract virtual bool get_SynchronousEvents();
    public abstract virtual string get_DomainUsage();
    public abstract virtual bool get_DumpXmlTestDiscovery();
    public abstract virtual bool get_DumpXmlTestResults();
    public abstract virtual bool get_DumpVsInput();
    public abstract virtual bool get_PreFilter();
    public abstract virtual string get_DefaultTestNamePattern();
    public abstract virtual VsTestCategoryType get_VsTestCategoryType();
    public abstract virtual string get_TestOutputXml();
    public abstract virtual string get_TestOutputXmlFileName();
    public abstract virtual bool get_UseTestOutputXml();
    public abstract virtual OutputXmlFolderMode get_OutputXmlFolderMode();
    public abstract virtual bool get_NewOutputXmlFileForEachRun();
    public abstract virtual bool get_DesignMode();
    public abstract virtual bool get_DisableAppDomain();
    public abstract virtual bool get_DisableParallelization();
    public abstract virtual bool get_AllowParallelWithDebugger();
    public abstract virtual bool get_ShowInternalProperties();
    public abstract virtual bool get_UseParentFQNForParametrizedTests();
    public abstract virtual bool get_UseNUnitIdforTestCaseId();
    public abstract virtual int get_ConsoleOut();
    public abstract virtual bool get_StopOnError();
    public abstract virtual TestOutcome get_MapWarningTo();
    public abstract virtual bool get_UseTestNameInConsoleOutput();
    public abstract virtual DisplayNameOptions get_DisplayName();
    public abstract virtual char get_FullnameSeparator();
    public abstract virtual DiscoveryMethod get_DiscoveryMethod();
    public abstract virtual bool get_SkipNonTestAssemblies();
    public abstract virtual bool get_ThrowOnEachFailureUnderDebugger();
    public abstract virtual int get_AssemblySelectLimit();
    public abstract virtual bool get_UseNUnitFilter();
    public abstract virtual bool get_IncludeStackTraceForSuites();
    public abstract virtual void Load(IDiscoveryContext context, TestLogger testLogger);
    public abstract virtual void Load(string settingsXml);
    public abstract virtual void SaveRandomSeed(string dirname);
    public abstract virtual void RestoreRandomSeed(string dirname);
    public abstract virtual bool get_EnsureAttachmentFileScheme();
    public abstract virtual bool get_FreakMode();
    public abstract virtual bool get_Debug();
    public abstract virtual bool get_DebugExecution();
    public abstract virtual bool get_DebugDiscovery();
    public abstract virtual ExplicitModeEnum get_ExplicitMode();
    public abstract virtual bool get_SkipExecutionWhenNoTests();
    public abstract virtual string get_TestOutputFolder();
    public abstract virtual string SetTestOutputFolder(string workDirectory);
}
public class NUnit.VisualStudio.TestAdapter.IdeExecution : Execution {
    public IdeExecution(IExecutionContext ctx);
    public virtual TestFilter CheckFilterInCurrentMode(TestFilter filter, IDiscoveryConverter discovery);
}
public interface NUnit.VisualStudio.TestAdapter.IExecutionContext {
    public ITestLogger Log { get; }
    public INUnitEngineAdapter EngineAdapter { get; }
    public string TestOutputXmlFolder { get; }
    public IAdapterSettings Settings { get; }
    public IDumpXml Dump { get; }
    public IVsTestFilter VsTestFilter { get; }
    public abstract virtual ITestLogger get_Log();
    public abstract virtual INUnitEngineAdapter get_EngineAdapter();
    public abstract virtual string get_TestOutputXmlFolder();
    public abstract virtual IAdapterSettings get_Settings();
    public abstract virtual IDumpXml get_Dump();
    public abstract virtual IVsTestFilter get_VsTestFilter();
}
[ExtensionAttribute]
public static class NUnit.VisualStudio.TestAdapter.Internal.StringExtensions : object {
    [ExtensionAttribute]
public static bool IsNullOrWhiteSpace(string value);
}
public class NUnit.VisualStudio.TestAdapter.Internal.TimingLogger : object {
    private IAdapterSettings settings;
    private ITestLogger logger;
    [CompilerGeneratedAttribute]
private Stopwatch <Stopwatch>k__BackingField;
    public Stopwatch Stopwatch { get; }
    public TimingLogger(IAdapterSettings settings, ITestLogger logger);
    [CompilerGeneratedAttribute]
public Stopwatch get_Stopwatch();
    public TimingLogger ReStart();
    public TimingLogger LogTime(string leadText);
}
public interface NUnit.VisualStudio.TestAdapter.INUnit3TestExecutor {
    public IDumpXml Dump { get; }
    public IAdapterSettings Settings { get; }
    public IFrameworkHandle FrameworkHandle { get; }
    public abstract virtual void StopRun();
    public abstract virtual IDumpXml get_Dump();
    public abstract virtual IAdapterSettings get_Settings();
    public abstract virtual IFrameworkHandle get_FrameworkHandle();
}
public interface NUnit.VisualStudio.TestAdapter.ITestConverter {
    public abstract virtual TestCase ConvertTestCase(NUnitDiscoveryTestCase testNode);
}
public interface NUnit.VisualStudio.TestAdapter.ITestConverterCommon {
    public abstract virtual TestCase GetCachedTestCase(string id);
    public abstract virtual TestResultSet GetVsTestResults(INUnitTestEventTestCase resultNode, ICollection`1<INUnitTestEventTestOutput> outputNodes);
}
public interface NUnit.VisualStudio.TestAdapter.ITestConverterXml {
    public abstract virtual TestCase ConvertTestCase(NUnitEventTestCase nUnitEventTestCase);
}
public interface NUnit.VisualStudio.TestAdapter.ITestLogger {
    public int Verbosity { get; public set; }
    public abstract virtual void Error(string message);
    public abstract virtual void Error(string message, Exception ex);
    public abstract virtual void Warning(string message);
    public abstract virtual void Warning(string message, Exception ex);
    public abstract virtual void Info(string message);
    public abstract virtual int get_Verbosity();
    public abstract virtual void set_Verbosity(int value);
    public abstract virtual void Debug(string message);
}
public interface NUnit.VisualStudio.TestAdapter.IVsTestFilter {
    public ITestCaseFilterExpression TfsTestCaseFilterExpression { get; }
    public bool IsEmpty { get; }
    public abstract virtual ITestCaseFilterExpression get_TfsTestCaseFilterExpression();
    public abstract virtual bool get_IsEmpty();
    public abstract virtual IEnumerable`1<TestCase> CheckFilter(IEnumerable`1<TestCase> tests);
}
internal class NUnit.VisualStudio.TestAdapter.Metadata.DirectReflectionMetadataProvider : object {
    public sealed virtual Nullable`1<TypeInfo> GetDeclaringType(string assemblyPath, string reflectedTypeName, string methodName);
    public sealed virtual Nullable`1<TypeInfo> GetStateMachineType(string assemblyPath, string reflectedTypeName, string methodName);
    private static MethodInfo TryGetSingleMethod(string assemblyPath, string reflectedTypeName, string methodName);
    private sealed virtual override void System.IDisposable.Dispose();
}
public interface NUnit.VisualStudio.TestAdapter.Metadata.IMetadataProvider {
    public abstract virtual Nullable`1<TypeInfo> GetDeclaringType(string assemblyPath, string reflectedTypeName, string methodName);
    public abstract virtual Nullable`1<TypeInfo> GetStateMachineType(string assemblyPath, string reflectedTypeName, string methodName);
}
[IsReadOnlyAttribute]
public class NUnit.VisualStudio.TestAdapter.Metadata.TypeInfo : ValueType {
    [CompilerGeneratedAttribute]
private string <AssemblyPath>k__BackingField;
    [CompilerGeneratedAttribute]
private string <FullName>k__BackingField;
    public string AssemblyPath { get; }
    public string FullName { get; }
    public TypeInfo(string assemblyPath, string fullName);
    public TypeInfo(Type type);
    [CompilerGeneratedAttribute]
public string get_AssemblyPath();
    [CompilerGeneratedAttribute]
public string get_FullName();
}
public class NUnit.VisualStudio.TestAdapter.NavigationData : object {
    public static NavigationData Invalid;
    [CompilerGeneratedAttribute]
private string <FilePath>k__BackingField;
    [CompilerGeneratedAttribute]
private int <LineNumber>k__BackingField;
    public string FilePath { get; }
    public int LineNumber { get; }
    public bool IsValid { get; }
    public NavigationData(string filePath, int lineNumber);
    private static NavigationData();
    [CompilerGeneratedAttribute]
public string get_FilePath();
    [CompilerGeneratedAttribute]
public int get_LineNumber();
    public bool get_IsValid();
}
public class NUnit.VisualStudio.TestAdapter.NavigationDataProvider : object {
    private string _assemblyPath;
    private IMetadataProvider _metadataProvider;
    private ITestLogger _logger;
    private Dictionary`2<string, DiaSession> _sessionsByAssemblyPath;
    private bool _disableMetadataLookup;
    public NavigationDataProvider(string assemblyPath, ITestLogger logger);
    internal NavigationDataProvider(string assemblyPath, ITestLogger logger, IMetadataProvider metadataProvider);
    public sealed virtual void Dispose();
    public NavigationData GetNavigationData(string className, string methodName);
    private Nullable`1<TypeInfo> DoWithBreaker(Func`4<string, string, string, Nullable`1<TypeInfo>> method, string declaringTypeName, string methodName);
    private NavigationData TryGetSessionData(string assemblyPath, string declaringTypeName, string methodName);
    private NavigationData TryGetSessionData(Nullable`1<TypeInfo> declaringType, string methodName);
}
public class NUnit.VisualStudio.TestAdapter.NTrait : object {
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Value>k__BackingField;
    public string Name { get; }
    public string Value { get; }
    public NTrait(string name, string value);
    [CompilerGeneratedAttribute]
public string get_Name();
    [CompilerGeneratedAttribute]
public string get_Value();
}
public class NUnit.VisualStudio.TestAdapter.NTraitNameComparer : object {
    public sealed virtual bool Equals(NTrait n, NTrait y);
    public sealed virtual int GetHashCode(NTrait obj);
}
[FileExtensionAttribute(".appx")]
[FileExtensionAttribute(".dll")]
[FileExtensionAttribute(".exe")]
[DefaultExecutorUriAttribute("executor://NUnit3TestExecutor")]
[CategoryAttribute("managed")]
public class NUnit.VisualStudio.TestAdapter.NUnit3TestDiscoverer : NUnitTestAdapter {
    private DumpXml dumpXml;
    public sealed virtual void DiscoverTests(IEnumerable`1<string> sources, IDiscoveryContext discoveryContext, IMessageLogger messageLogger, ITestCaseDiscoverySink discoverySink);
    private int ProcessTestCases(NUnitResults results, ITestCaseDiscoverySink discoverySink, TestConverterForXml testConverterForXml);
    private void CheckIfDebug();
}
[ExtensionUriAttribute("executor://NUnit3TestExecutor")]
public class NUnit.VisualStudio.TestAdapter.NUnit3TestExecutor : NUnitTestAdapter {
    [CompilerGeneratedAttribute]
private RunType <RunType>k__BackingField;
    [CompilerGeneratedAttribute]
private IRunContext <RunContext>k__BackingField;
    [CompilerGeneratedAttribute]
private IFrameworkHandle <FrameworkHandle>k__BackingField;
    [CompilerGeneratedAttribute]
private IVsTestFilter <VsTestFilter>k__BackingField;
    [CompilerGeneratedAttribute]
private string <TestOutputXmlFolder>k__BackingField;
    [CompilerGeneratedAttribute]
private IDumpXml <Dump>k__BackingField;
    private RunType RunType { get; private set; }
    public IRunContext RunContext { get; private set; }
    public IFrameworkHandle FrameworkHandle { get; private set; }
    public IVsTestFilter VsTestFilter { get; private set; }
    public ITestLogger Log { get; }
    public INUnitEngineAdapter EngineAdapter { get; }
    public string TestOutputXmlFolder { get; public set; }
    public IDumpXml Dump { get; private set; }
    [CompilerGeneratedAttribute]
private RunType get_RunType();
    [CompilerGeneratedAttribute]
private void set_RunType(RunType value);
    [CompilerGeneratedAttribute]
public IRunContext get_RunContext();
    [CompilerGeneratedAttribute]
private void set_RunContext(IRunContext value);
    [CompilerGeneratedAttribute]
public sealed virtual IFrameworkHandle get_FrameworkHandle();
    [CompilerGeneratedAttribute]
private void set_FrameworkHandle(IFrameworkHandle value);
    [CompilerGeneratedAttribute]
public sealed virtual IVsTestFilter get_VsTestFilter();
    [CompilerGeneratedAttribute]
private void set_VsTestFilter(IVsTestFilter value);
    public sealed virtual ITestLogger get_Log();
    public sealed virtual INUnitEngineAdapter get_EngineAdapter();
    [CompilerGeneratedAttribute]
public sealed virtual string get_TestOutputXmlFolder();
    [CompilerGeneratedAttribute]
public void set_TestOutputXmlFolder(string value);
    public sealed virtual void RunTests(IEnumerable`1<string> sources, IRunContext runContext, IFrameworkHandle frameworkHandle);
    private void RunAssemblies(IEnumerable`1<string> sources, TestFilter filter);
    private void SetRunTypeByStrings();
    public sealed virtual void RunTests(IEnumerable`1<TestCase> tests, IRunContext runContext, IFrameworkHandle frameworkHandle);
    private bool IsInProcDataCollectorsSpecifiedWithMultipleAssemblies(IEnumerable`1<IGrouping`2<string, TestCase>> assemblyGroups);
    private sealed virtual override void Microsoft.VisualStudio.TestPlatform.ObjectModel.Adapter.ITestExecutor.Cancel();
    public sealed virtual void Dispose();
    public void InitializeForExecution(IRunContext runContext, IFrameworkHandle frameworkHandle);
    private void RunAssembly(string assemblyPath, IGrouping`2<string, TestCase> testCases, TestFilter filter, string assemblyName);
    private void LogActionAndSelection(string assemblyPath, TestFilter filter);
    private void RestoreRandomSeed(string assemblyPath);
    private NUnitTestFilterBuilder CreateTestFilterBuilder();
    private void CreateTestOutputFolder();
    public sealed virtual void StopRun();
    [CompilerGeneratedAttribute]
public sealed virtual IDumpXml get_Dump();
    [CompilerGeneratedAttribute]
private void set_Dump(IDumpXml value);
    private void CheckIfDebug();
}
public class NUnit.VisualStudio.TestAdapter.NUnitEngine.BaseProperties : object {
    [CompilerGeneratedAttribute]
private List`1<NUnitProperty> <Properties>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Id>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Fullname>k__BackingField;
    [CompilerGeneratedAttribute]
private RunStateEnum <RunState>k__BackingField;
    [CompilerGeneratedAttribute]
private int <TestCaseCount>k__BackingField;
    public List`1<NUnitProperty> Properties { get; }
    public string Id { get; }
    public string Name { get; }
    public string Fullname { get; }
    public RunStateEnum RunState { get; }
    public int TestCaseCount { get; }
    public BaseProperties(string dId, string dName, string dFullname, int dTestcasecount, RunStateEnum dRunstate);
    [CompilerGeneratedAttribute]
public List`1<NUnitProperty> get_Properties();
    [CompilerGeneratedAttribute]
public string get_Id();
    [CompilerGeneratedAttribute]
public string get_Name();
    [CompilerGeneratedAttribute]
public string get_Fullname();
    [CompilerGeneratedAttribute]
public RunStateEnum get_RunState();
    [CompilerGeneratedAttribute]
public int get_TestCaseCount();
}
public class NUnit.VisualStudio.TestAdapter.NUnitEngine.DiscoveryConverter : object {
    private static string ParameterizedFixture;
    private static string TestFixture;
    private static string GenericFixture;
    private static string SetUpFixture;
    private static string TestSuite;
    private ITestConverterXml converterForXml;
    private ITestConverter converter;
    [CompilerGeneratedAttribute]
private NUnitDiscoveryTestRun <TestRun>k__BackingField;
    private List`1<TestCase> loadedTestCases;
    [CompilerGeneratedAttribute]
private string <AssemblyPath>k__BackingField;
    [CompilerGeneratedAttribute]
private IAdapterSettings <Settings>k__BackingField;
    [CompilerGeneratedAttribute]
private ITestLogger <TestLog>k__BackingField;
    public ITestConverterCommon TestConverterForXml { get; }
    public ITestConverterCommon TestConverter { get; }
    public NUnitDiscoveryTestRun TestRun { get; private set; }
    public bool IsDiscoveryMethodCurrent { get; }
    public NUnitDiscoveryTestAssembly CurrentTestAssembly { get; }
    public NUnitDiscoveryTestSuite TopLevelTestSuite { get; }
    public IEnumerable`1<NUnitDiscoveryTestCase> AllTestCases { get; }
    public bool IsExplicitRun { get; }
    public int NoOfExplicitTestCases { get; }
    public bool HasExplicitTests { get; }
    public IList`1<TestCase> LoadedTestCases { get; }
    public int NoOfLoadedTestCases { get; }
    public string AssemblyPath { get; private set; }
    private IAdapterSettings Settings { get; }
    private ITestLogger TestLog { get; }
    public bool NoOfLoadedTestCasesAboveLimit { get; }
    public DiscoveryConverter(ITestLogger logger, IAdapterSettings settings);
    public ITestConverterCommon get_TestConverterForXml();
    public ITestConverterCommon get_TestConverter();
    [CompilerGeneratedAttribute]
public NUnitDiscoveryTestRun get_TestRun();
    [CompilerGeneratedAttribute]
private void set_TestRun(NUnitDiscoveryTestRun value);
    public sealed virtual bool get_IsDiscoveryMethodCurrent();
    public NUnitDiscoveryTestAssembly get_CurrentTestAssembly();
    public NUnitDiscoveryTestSuite get_TopLevelTestSuite();
    public sealed virtual IEnumerable`1<NUnitDiscoveryTestCase> get_AllTestCases();
    public sealed virtual bool get_IsExplicitRun();
    public sealed virtual int get_NoOfExplicitTestCases();
    public sealed virtual bool get_HasExplicitTests();
    public sealed virtual IList`1<TestCase> get_LoadedTestCases();
    public sealed virtual int get_NoOfLoadedTestCases();
    [CompilerGeneratedAttribute]
public string get_AssemblyPath();
    [CompilerGeneratedAttribute]
private void set_AssemblyPath(string value);
    [CompilerGeneratedAttribute]
private IAdapterSettings get_Settings();
    [CompilerGeneratedAttribute]
private ITestLogger get_TestLog();
    public sealed virtual bool get_NoOfLoadedTestCasesAboveLimit();
    public sealed virtual IEnumerable`1<TestCase> GetExplicitTestCases(IEnumerable`1<TestCase> filteredTestCases);
    public IList`1<TestCase> Convert(NUnitResults discoveryResults, string assemblyPath);
    public NUnitDiscoveryTestRun ConvertXml(NUnitResults discovery);
    private static NUnitDiscoveryTestSuite ExtractTestSuite(XElement node, NUnitDiscoverySuiteBase parent);
    private void ExtractAllFixtures(NUnitDiscoveryCanHaveTestFixture parent, XElement node);
    private void ExtractTestFixtures(NUnitDiscoveryCanHaveTestFixture parent, XElement node);
    private static void ExtractParameterizedMethodsAndTheories(NUnitDiscoveryTestFixture tf, XElement node);
    public static IEnumerable`1<NUnitDiscoveryTestCase> ExtractTestCases(INUnitDiscoveryCanHaveTestCases tf, XElement node);
    public static NUnitDiscoveryTestCase ExtractTestCase(INUnitDiscoveryCanHaveTestCases tf, XElement child);
    public static NUnitDiscoveryTestFixture ExtractTestFixture(INUnitDiscoveryCanHaveTestFixture parent, XElement node, string className);
    private static NUnitDiscoveryGenericFixture ExtractGenericTestFixture(NUnitDiscoveryCanHaveTestFixture parent, XElement node);
    private static NUnitDiscoverySetUpFixture ExtractSetUpTestFixture(NUnitDiscoveryCanHaveTestFixture parent, XElement node, string className);
    private static NUnitDiscoveryParameterizedTestFixture ExtractParameterizedTestFixture(NUnitDiscoveryCanHaveTestFixture parent, XElement node);
    private NUnitDiscoveryTestAssembly ExtractTestAssembly(XElement node, NUnitDiscoveryTestRun parent);
    private static BaseProperties ExtractSuiteBasePropertiesClass(XElement node);
    private NUnitDiscoveryTestRun ExtractTestRun(XDocument node);
    private static RunStateEnum ExtractRunState(XElement node);
    [CompilerGeneratedAttribute]
private IEnumerable`1<NUnitDiscoveryTestCase> <Convert>g__RunnableTestCases|49_0(bool isExplicit);
}
public class NUnit.VisualStudio.TestAdapter.NUnitEngine.DiscoveryException : Exception {
    public DiscoveryException(string message);
    public DiscoveryException(string message, Exception inner);
    protected DiscoveryException(SerializationInfo info, StreamingContext context);
}
[ExtensionAttribute]
public static class NUnit.VisualStudio.TestAdapter.NUnitEngine.Extensions : object {
    [ExtensionAttribute]
public static bool AllWithEmptyFalse(IEnumerable`1<T> list, Func`2<T, bool> pred);
    [ExtensionAttribute]
public static bool IsEmpty(TestFilter filter);
    [ExtensionAttribute]
public static bool IsCategoryFilter(TestFilter filter);
    [ExtensionAttribute]
public static bool IsPartitionFilter(TestFilter filter);
    [ExtensionAttribute]
public static bool IsNegativeCategoryFilter(TestFilter filter);
}
public interface NUnit.VisualStudio.TestAdapter.NUnitEngine.IDiscoveryConverter {
    public IEnumerable`1<NUnitDiscoveryTestCase> AllTestCases { get; }
    public bool IsExplicitRun { get; }
    public IList`1<TestCase> LoadedTestCases { get; }
    public int NoOfLoadedTestCases { get; }
    public bool IsDiscoveryMethodCurrent { get; }
    public bool NoOfLoadedTestCasesAboveLimit { get; }
    public int NoOfExplicitTestCases { get; }
    public bool HasExplicitTests { get; }
    public abstract virtual IEnumerable`1<NUnitDiscoveryTestCase> get_AllTestCases();
    public abstract virtual bool get_IsExplicitRun();
    public abstract virtual IList`1<TestCase> get_LoadedTestCases();
    public abstract virtual int get_NoOfLoadedTestCases();
    public abstract virtual bool get_IsDiscoveryMethodCurrent();
    public abstract virtual bool get_NoOfLoadedTestCasesAboveLimit();
    public abstract virtual int get_NoOfExplicitTestCases();
    public abstract virtual bool get_HasExplicitTests();
    public abstract virtual IEnumerable`1<TestCase> GetExplicitTestCases(IEnumerable`1<TestCase> filteredTestCases);
}
public interface NUnit.VisualStudio.TestAdapter.NUnitEngine.INUnitCommonTestCase {
    public string Id { get; }
    public string Name { get; }
    public string FullName { get; }
    public string ClassName { get; }
    public string MethodName { get; }
    public long Seed { get; }
    public abstract virtual string get_Id();
    public abstract virtual string get_Name();
    public abstract virtual string get_FullName();
    public abstract virtual string get_ClassName();
    public abstract virtual string get_MethodName();
    public abstract virtual long get_Seed();
}
public interface NUnit.VisualStudio.TestAdapter.NUnitEngine.INUnitDiscoveryCanHaveTestCases {
    public IEnumerable`1<NUnitDiscoveryTestCase> TestCases { get; }
    public int NoOfActualTestCases { get; }
    public abstract virtual IEnumerable`1<NUnitDiscoveryTestCase> get_TestCases();
    public abstract virtual int get_NoOfActualTestCases();
    public abstract virtual void AddTestCase(NUnitDiscoveryTestCase tc);
}
public interface NUnit.VisualStudio.TestAdapter.NUnitEngine.INUnitDiscoveryCanHaveTestFixture {
    public IEnumerable`1<NUnitDiscoveryTestFixture> TestFixtures { get; }
    public int NoOfActualTestCases { get; }
    public abstract virtual IEnumerable`1<NUnitDiscoveryTestFixture> get_TestFixtures();
    public abstract virtual int get_NoOfActualTestCases();
    public abstract virtual void AddTestFixture(NUnitDiscoveryTestFixture tf);
}
public interface NUnit.VisualStudio.TestAdapter.NUnitEngine.INUnitDiscoverySuiteBase {
    public string Id { get; }
    public string Name { get; }
    public string FullName { get; }
    public int TestCaseCount { get; }
    public INUnitDiscoverySuiteBase Parent { get; }
    public NUnitDiscoveryProperties NUnitDiscoveryProperties { get; }
    public bool IsExplicit { get; }
    public bool IsExplicitReverse { get; }
    public bool IsParameterizedMethod { get; }
    public abstract virtual string get_Id();
    public abstract virtual string get_Name();
    public abstract virtual string get_FullName();
    public abstract virtual int get_TestCaseCount();
    public abstract virtual INUnitDiscoverySuiteBase get_Parent();
    public abstract virtual NUnitDiscoveryProperties get_NUnitDiscoveryProperties();
    public abstract virtual bool get_IsExplicit();
    public abstract virtual bool get_IsExplicitReverse();
    public abstract virtual bool get_IsParameterizedMethod();
    public abstract virtual void AddToAllTestCases(NUnitDiscoveryTestCase tc);
}
public interface NUnit.VisualStudio.TestAdapter.NUnitEngine.INUnitDiscoveryTestCase {
    public string ClassName { get; }
    public string MethodName { get; }
    public long Seed { get; public set; }
    public abstract virtual string get_ClassName();
    public abstract virtual string get_MethodName();
    public abstract virtual long get_Seed();
    public abstract virtual void set_Seed(long value);
}
public interface NUnit.VisualStudio.TestAdapter.NUnitEngine.INUnitEngineAdapter {
    public abstract virtual NUnitResults Explore();
    public abstract virtual void CloseRunner();
    public abstract virtual NUnitResults Explore(TestFilter filter);
    public abstract virtual NUnitResults Run(ITestEventListener listener, TestFilter filter);
    public abstract virtual void StopRun();
    public abstract virtual T GetService();
    public abstract virtual void GenerateTestOutput(NUnitResults testResults, string assemblyPath, string testOutputXmlFolder);
    public abstract virtual string GetXmlFilePath(string folder, string defaultFileName, string extension);
}
public interface NUnit.VisualStudio.TestAdapter.NUnitEngine.INUnitTestCase {
    public bool IsTestCase { get; }
    public bool IsParameterizedMethod { get; }
    public string Type { get; }
    public string ClassName { get; }
    public string MethodName { get; }
    public RunStateEnum RunState { get; }
    public NUnitEventTestCase Parent { get; }
    public abstract virtual bool get_IsTestCase();
    public abstract virtual bool get_IsParameterizedMethod();
    public abstract virtual string get_Type();
    public abstract virtual string get_ClassName();
    public abstract virtual string get_MethodName();
    public abstract virtual RunStateEnum get_RunState();
    public abstract virtual NUnitEventTestCase get_Parent();
}
public interface NUnit.VisualStudio.TestAdapter.NUnitEngine.INUnitTestCasePropertyInfo {
    public RunStateEnum RunState { get; }
    public IEnumerable`1<NUnitProperty> Properties { get; }
    public abstract virtual RunStateEnum get_RunState();
    public abstract virtual IEnumerable`1<NUnitProperty> get_Properties();
}
public interface NUnit.VisualStudio.TestAdapter.NUnitEngine.INUnitTestEvent {
    public string Output { get; }
    public TimeSpan Duration { get; }
    public IEnumerable`1<NUnitAttachment> NUnitAttachments { get; }
    public bool IsIgnored { get; }
    public bool IsFailed { get; }
    public abstract virtual string get_Output();
    public abstract virtual TimeSpan get_Duration();
    public abstract virtual IEnumerable`1<NUnitAttachment> get_NUnitAttachments();
    public abstract virtual CheckedTime StartTime();
    public abstract virtual CheckedTime EndTime();
    public abstract virtual bool get_IsIgnored();
    public abstract virtual ResultType Result();
    public abstract virtual bool get_IsFailed();
    public abstract virtual SiteType Site();
}
public interface NUnit.VisualStudio.TestAdapter.NUnitEngine.INUnitTestEventForXml {
    public XmlNode Node { get; }
    public abstract virtual XmlNode get_Node();
}
public interface NUnit.VisualStudio.TestAdapter.NUnitEngine.INUnitTestEventStartTest {
}
public interface NUnit.VisualStudio.TestAdapter.NUnitEngine.INUnitTestEventSuiteFinished {
    public string ReasonMessage { get; }
    public bool HasReason { get; }
    public string FailureMessage { get; }
    public bool HasFailure { get; }
    public string StackTrace { get; }
    public abstract virtual string get_ReasonMessage();
    public abstract virtual bool get_HasReason();
    public abstract virtual string get_FailureMessage();
    public abstract virtual bool get_HasFailure();
    public abstract virtual string get_StackTrace();
}
public interface NUnit.VisualStudio.TestAdapter.NUnitEngine.INUnitTestEventTestCase {
    public NUnitFailure Failure { get; }
    public string ReasonMessage { get; }
    public bool HasReason { get; }
    public bool HasFailure { get; }
    public string StackTrace { get; }
    public string FailureStackTrace { get; }
    public abstract virtual NUnitFailure get_Failure();
    public abstract virtual string get_ReasonMessage();
    public abstract virtual bool get_HasReason();
    public abstract virtual bool get_HasFailure();
    public abstract virtual string get_StackTrace();
    public abstract virtual string get_FailureStackTrace();
}
public interface NUnit.VisualStudio.TestAdapter.NUnitEngine.INUnitTestEventTestOutput {
    public Streams Stream { get; }
    public string TestId { get; }
    public string TestName { get; }
    public string Content { get; }
    public bool IsProgressStream { get; }
    public bool IsErrorStream { get; }
    public bool IsNullOrEmptyStream { get; }
    public abstract virtual Streams get_Stream();
    public abstract virtual string get_TestId();
    public abstract virtual string get_TestName();
    public abstract virtual string get_Content();
    public abstract virtual bool get_IsProgressStream();
    public abstract virtual bool get_IsErrorStream();
    public abstract virtual bool get_IsNullOrEmptyStream();
}
public interface NUnit.VisualStudio.TestAdapter.NUnitEngine.INUnitTestNode {
    public string Id { get; }
    public string FullName { get; }
    public string Name { get; }
    public IEnumerable`1<NUnitProperty> Properties { get; }
    public string Seed { get; }
    public abstract virtual string get_Id();
    public abstract virtual string get_FullName();
    public abstract virtual string get_Name();
    public abstract virtual IEnumerable`1<NUnitProperty> get_Properties();
    public abstract virtual string get_Seed();
}
public class NUnit.VisualStudio.TestAdapter.NUnitEngine.NUnitAttachment : object {
    [CompilerGeneratedAttribute]
private string <FilePath>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Description>k__BackingField;
    public string FilePath { get; }
    public string Description { get; }
    public NUnitAttachment(string path, string description);
    [CompilerGeneratedAttribute]
public string get_FilePath();
    [CompilerGeneratedAttribute]
public string get_Description();
}
public abstract class NUnit.VisualStudio.TestAdapter.NUnitEngine.NUnitDiscoveryCanHaveTestCases : NUnitDiscoverySuiteBase {
    private List`1<NUnitDiscoveryTestCase> testCases;
    [CompilerGeneratedAttribute]
private string <ClassName>k__BackingField;
    public IEnumerable`1<NUnitDiscoveryTestCase> TestCases { get; }
    public int NoOfActualTestCases { get; }
    public bool IsExplicit { get; }
    public string ClassName { get; }
    protected NUnitDiscoveryCanHaveTestCases(BaseProperties theBase, INUnitDiscoverySuiteBase parent, string classname);
    public sealed virtual IEnumerable`1<NUnitDiscoveryTestCase> get_TestCases();
    public virtual int get_NoOfActualTestCases();
    public virtual bool get_IsExplicit();
    [CompilerGeneratedAttribute]
public string get_ClassName();
    public sealed virtual void AddTestCase(NUnitDiscoveryTestCase tc);
}
public abstract class NUnit.VisualStudio.TestAdapter.NUnitEngine.NUnitDiscoveryCanHaveTestFixture : NUnitDiscoverySuiteBase {
    private List`1<NUnitDiscoveryTestFixture> testFixtures;
    private List`1<NUnitDiscoveryTestSuite> testSuites;
    private List`1<NUnitDiscoveryGenericFixture> genericFixtures;
    private List`1<NUnitDiscoverySetUpFixture> setUpFixtures;
    private List`1<NUnitDiscoveryParameterizedTestFixture> parameterizedFixtures;
    public IEnumerable`1<NUnitDiscoveryTestFixture> TestFixtures { get; }
    public IEnumerable`1<NUnitDiscoveryTestSuite> TestSuites { get; }
    public IEnumerable`1<NUnitDiscoverySetUpFixture> SetUpFixtures { get; }
    public IEnumerable`1<NUnitDiscoveryParameterizedTestFixture> ParameterizedFixtures { get; }
    public IEnumerable`1<NUnitDiscoveryGenericFixture> GenericFixtures { get; }
    public bool IsExplicit { get; }
    public int NoOfActualTestCases { get; }
    protected NUnitDiscoveryCanHaveTestFixture(BaseProperties theBase, INUnitDiscoverySuiteBase parent);
    public sealed virtual IEnumerable`1<NUnitDiscoveryTestFixture> get_TestFixtures();
    public sealed virtual void AddTestFixture(NUnitDiscoveryTestFixture tf);
    public IEnumerable`1<NUnitDiscoveryTestSuite> get_TestSuites();
    public IEnumerable`1<NUnitDiscoverySetUpFixture> get_SetUpFixtures();
    public IEnumerable`1<NUnitDiscoveryParameterizedTestFixture> get_ParameterizedFixtures();
    public IEnumerable`1<NUnitDiscoveryGenericFixture> get_GenericFixtures();
    public virtual bool get_IsExplicit();
    public sealed virtual int get_NoOfActualTestCases();
    public void AddTestSuite(NUnitDiscoveryTestSuite ts);
    public void AddTestGenericFixture(NUnitDiscoveryGenericFixture ts);
    public void AddSetUpFixture(NUnitDiscoverySetUpFixture ts);
    public void AddParameterizedFixture(NUnitDiscoveryParameterizedTestFixture ts);
}
public class NUnit.VisualStudio.TestAdapter.NUnitEngine.NUnitDiscoveryGenericFixture : NUnitDiscoveryCanHaveTestFixture {
    public NUnitDiscoveryGenericFixture(BaseProperties theBase, INUnitDiscoverySuiteBase parent);
}
public class NUnit.VisualStudio.TestAdapter.NUnitEngine.NUnitDiscoveryGenericMethod : NUnitDiscoveryCanHaveTestCases {
    public NUnitDiscoveryGenericMethod(BaseProperties theBase, string classname, INUnitDiscoverySuiteBase parent);
}
public class NUnit.VisualStudio.TestAdapter.NUnitEngine.NUnitDiscoveryParameterizedMethod : NUnitDiscoveryCanHaveTestCases {
    public bool IsParameterizedMethod { get; }
    public NUnitDiscoveryParameterizedMethod(BaseProperties theBase, string classname, INUnitDiscoverySuiteBase parent);
    public virtual bool get_IsParameterizedMethod();
}
public class NUnit.VisualStudio.TestAdapter.NUnitEngine.NUnitDiscoveryParameterizedTestFixture : NUnitDiscoveryCanHaveTestFixture {
    public NUnitDiscoveryParameterizedTestFixture(BaseProperties theBase, NUnitDiscoveryCanHaveTestFixture parent);
}
public class NUnit.VisualStudio.TestAdapter.NUnitEngine.NUnitDiscoveryProperties : object {
    [CompilerGeneratedAttribute]
private List`1<NUnitProperty> <TheProperties>k__BackingField;
    private List`1<NUnitProperty> TheProperties { get; }
    public IEnumerable`1<NUnitProperty> Properties { get; }
    public bool AllInternal { get; }
    [CompilerGeneratedAttribute]
private List`1<NUnitProperty> get_TheProperties();
    public IEnumerable`1<NUnitProperty> get_Properties();
    public void Add(NUnitProperty p);
    public bool get_AllInternal();
}
public class NUnit.VisualStudio.TestAdapter.NUnitEngine.NUnitDiscoverySetUpFixture : NUnitDiscoveryCanHaveTestFixture {
    [CompilerGeneratedAttribute]
private string <ClassName>k__BackingField;
    public string ClassName { get; }
    public NUnitDiscoverySetUpFixture(BaseProperties theBase, string classname, NUnitDiscoveryCanHaveTestFixture parent);
    [CompilerGeneratedAttribute]
public string get_ClassName();
}
public abstract class NUnit.VisualStudio.TestAdapter.NUnitEngine.NUnitDiscoverySuiteBase : object {
    [CompilerGeneratedAttribute]
private string <Id>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    [CompilerGeneratedAttribute]
private string <FullName>k__BackingField;
    [CompilerGeneratedAttribute]
private int <TestCaseCount>k__BackingField;
    [CompilerGeneratedAttribute]
private RunStateEnum <RunState>k__BackingField;
    [CompilerGeneratedAttribute]
private INUnitDiscoverySuiteBase <Parent>k__BackingField;
    [CompilerGeneratedAttribute]
private NUnitDiscoveryProperties <NUnitDiscoveryProperties>k__BackingField;
    public string Id { get; }
    public string Name { get; }
    public string FullName { get; }
    public int TestCaseCount { get; }
    public RunStateEnum RunState { get; }
    public INUnitDiscoverySuiteBase Parent { get; }
    public NUnitDiscoveryProperties NUnitDiscoveryProperties { get; }
    public bool IsExplicit { get; }
    public bool IsExplicitReverse { get; }
    public bool IsParameterizedMethod { get; }
    public IEnumerable`1<NUnitProperty> Properties { get; }
    private NUnitDiscoverySuiteBase(string id, string name, string fullname, int count);
    protected NUnitDiscoverySuiteBase(BaseProperties other);
    protected NUnitDiscoverySuiteBase(BaseProperties other, INUnitDiscoverySuiteBase parent);
    [CompilerGeneratedAttribute]
public sealed virtual string get_Id();
    [CompilerGeneratedAttribute]
public sealed virtual string get_Name();
    [CompilerGeneratedAttribute]
public sealed virtual string get_FullName();
    [CompilerGeneratedAttribute]
public sealed virtual int get_TestCaseCount();
    [CompilerGeneratedAttribute]
public sealed virtual RunStateEnum get_RunState();
    [CompilerGeneratedAttribute]
public sealed virtual INUnitDiscoverySuiteBase get_Parent();
    [CompilerGeneratedAttribute]
public sealed virtual NUnitDiscoveryProperties get_NUnitDiscoveryProperties();
    public abstract virtual bool get_IsExplicit();
    public virtual bool get_IsExplicitReverse();
    public virtual bool get_IsParameterizedMethod();
    public sealed virtual IEnumerable`1<NUnitProperty> get_Properties();
    public virtual void AddToAllTestCases(NUnitDiscoveryTestCase tc);
}
public class NUnit.VisualStudio.TestAdapter.NUnitEngine.NUnitDiscoveryTestAssembly : NUnitDiscoveryTestSuite {
    private List`1<NUnitDiscoveryTestCase> allTestCases;
    public IEnumerable`1<NUnitDiscoveryTestCase> AllTestCases { get; }
    public IEnumerable`1<NUnitDiscoveryTestCase> RunnableTestCases { get; }
    public int NoOfExplicitTestCases { get; }
    public NUnitDiscoveryTestAssembly(BaseProperties theBase, NUnitDiscoveryTestRun parent);
    public IEnumerable`1<NUnitDiscoveryTestCase> get_AllTestCases();
    public IEnumerable`1<NUnitDiscoveryTestCase> get_RunnableTestCases();
    public int get_NoOfExplicitTestCases();
    public void AddTestSuiteToAssembly(NUnitDiscoveryTestSuite ts);
    public virtual void AddToAllTestCases(NUnitDiscoveryTestCase tc);
}
public class NUnit.VisualStudio.TestAdapter.NUnitEngine.NUnitDiscoveryTestCase : NUnitDiscoverySuiteBase {
    [CompilerGeneratedAttribute]
private string <ClassName>k__BackingField;
    [CompilerGeneratedAttribute]
private string <MethodName>k__BackingField;
    [CompilerGeneratedAttribute]
private long <Seed>k__BackingField;
    public string ClassName { get; }
    public string MethodName { get; public set; }
    public long Seed { get; public set; }
    public bool IsExplicit { get; }
    public NUnitDiscoveryTestCase(BaseProperties theBase, INUnitDiscoveryCanHaveTestCases parent, string className, string methodname, long seed);
    [CompilerGeneratedAttribute]
public sealed virtual string get_ClassName();
    [CompilerGeneratedAttribute]
public sealed virtual string get_MethodName();
    [CompilerGeneratedAttribute]
public void set_MethodName(string value);
    [CompilerGeneratedAttribute]
public sealed virtual long get_Seed();
    [CompilerGeneratedAttribute]
public sealed virtual void set_Seed(long value);
    public virtual bool get_IsExplicit();
}
public class NUnit.VisualStudio.TestAdapter.NUnitEngine.NUnitDiscoveryTestFixture : NUnitDiscoveryCanHaveTestCases {
    private List`1<NUnitDiscoveryParameterizedMethod> parameterizedMethods;
    private List`1<NUnitDiscoveryTheory> theories;
    private List`1<NUnitDiscoveryGenericMethod> genericMethods;
    public IEnumerable`1<NUnitDiscoveryParameterizedMethod> ParameterizedMethods { get; }
    public IEnumerable`1<NUnitDiscoveryTheory> Theories { get; }
    public int NoOfActualTestCases { get; }
    public bool IsExplicit { get; }
    public IEnumerable`1<NUnitDiscoveryGenericMethod> GenericMethods { get; }
    public NUnitDiscoveryTestFixture(BaseProperties theBase, string classname, INUnitDiscoverySuiteBase parent);
    public IEnumerable`1<NUnitDiscoveryParameterizedMethod> get_ParameterizedMethods();
    public IEnumerable`1<NUnitDiscoveryTheory> get_Theories();
    public virtual int get_NoOfActualTestCases();
    public virtual bool get_IsExplicit();
    public IEnumerable`1<NUnitDiscoveryGenericMethod> get_GenericMethods();
    public void AddParameterizedMethod(NUnitDiscoveryParameterizedMethod ts);
    public void AddTheory(NUnitDiscoveryTheory tc);
    public void AddGenericMethod(NUnitDiscoveryGenericMethod tc);
}
public class NUnit.VisualStudio.TestAdapter.NUnitEngine.NUnitDiscoveryTestRun : NUnitDiscoverySuiteBase {
    [CompilerGeneratedAttribute]
private NUnitDiscoveryTestAssembly <TestAssembly>k__BackingField;
    public NUnitDiscoveryTestAssembly TestAssembly { get; public set; }
    public bool IsExplicit { get; }
    public NUnitDiscoveryTestRun(BaseProperties baseProps);
    [CompilerGeneratedAttribute]
public NUnitDiscoveryTestAssembly get_TestAssembly();
    [CompilerGeneratedAttribute]
public void set_TestAssembly(NUnitDiscoveryTestAssembly value);
    public virtual bool get_IsExplicit();
    public void AddTestAssembly(NUnitDiscoveryTestAssembly testAssembly);
}
public class NUnit.VisualStudio.TestAdapter.NUnitEngine.NUnitDiscoveryTestSuite : NUnitDiscoveryCanHaveTestFixture {
    [CompilerGeneratedAttribute]
private NUnitDiscoveryTestAssembly <ParentAssembly>k__BackingField;
    public NUnitDiscoveryTestAssembly ParentAssembly { get; public set; }
    public NUnitDiscoveryTestSuite(BaseProperties theBase, INUnitDiscoverySuiteBase parent);
    [CompilerGeneratedAttribute]
public NUnitDiscoveryTestAssembly get_ParentAssembly();
    [CompilerGeneratedAttribute]
public void set_ParentAssembly(NUnitDiscoveryTestAssembly value);
}
public class NUnit.VisualStudio.TestAdapter.NUnitEngine.NUnitDiscoveryTheory : NUnitDiscoveryCanHaveTestCases {
    public NUnitDiscoveryTheory(BaseProperties theBase, string classname, INUnitDiscoverySuiteBase parent);
}
public class NUnit.VisualStudio.TestAdapter.NUnitEngine.NUnitEngineAdapter : object {
    private IAdapterSettings settings;
    private ITestLogger logger;
    private TestPackage package;
    [CompilerGeneratedAttribute]
private ITestEngine <TestEngine>k__BackingField;
    [CompilerGeneratedAttribute]
private ITestRunner <Runner>k__BackingField;
    [CompilerGeneratedAttribute]
private Action`1<ITestEngine> InternalEngineCreated;
    private ITestEngine TestEngine { get; private set; }
    private ITestRunner Runner { get; private set; }
    public bool EngineEnabled { get; }
    [CompilerGeneratedAttribute]
private ITestEngine get_TestEngine();
    [CompilerGeneratedAttribute]
private void set_TestEngine(ITestEngine value);
    [CompilerGeneratedAttribute]
private ITestRunner get_Runner();
    [CompilerGeneratedAttribute]
private void set_Runner(ITestRunner value);
    [CompilerGeneratedAttribute]
internal void add_InternalEngineCreated(Action`1<ITestEngine> value);
    [CompilerGeneratedAttribute]
internal void remove_InternalEngineCreated(Action`1<ITestEngine> value);
    public bool get_EngineEnabled();
    public void Initialize();
    public void InitializeSettingsAndLogging(IAdapterSettings setting, ITestLogger testLog);
    public void CreateRunner(TestPackage testPackage);
    public sealed virtual NUnitResults Explore();
    public sealed virtual NUnitResults Explore(TestFilter filter);
    public sealed virtual NUnitResults Run(ITestEventListener listener, TestFilter filter);
    private NUnitResults LogTiming(TestFilter filter, TimingLogger timing, NUnitResults results);
    public sealed virtual T GetService();
    public sealed virtual void StopRun();
    public sealed virtual void CloseRunner();
    public sealed virtual void Dispose();
    public sealed virtual void GenerateTestOutput(NUnitResults testResults, string assemblyPath, string testOutputXmlFolder);
    public string GetTestOutputFileName(string assemblyPath);
    public sealed virtual string GetXmlFilePath(string folder, string defaultFileName, string extension);
}
public class NUnit.VisualStudio.TestAdapter.NUnitEngine.NUnitEventTestCase : NUnitTestNode {
    private RunStateEnum runState;
    [CompilerGeneratedAttribute]
private NUnitEventTestCase <Parent>k__BackingField;
    public bool IsTestCase { get; }
    public bool IsParameterizedMethod { get; }
    public string Type { get; }
    public string ClassName { get; }
    public string MethodName { get; }
    public RunStateEnum RunState { get; }
    public NUnitEventTestCase Parent { get; }
    public NUnitEventTestCase(XmlNode testCase);
    public sealed virtual bool get_IsTestCase();
    public sealed virtual bool get_IsParameterizedMethod();
    public sealed virtual string get_Type();
    public sealed virtual string get_ClassName();
    public sealed virtual string get_MethodName();
    public sealed virtual RunStateEnum get_RunState();
    [CompilerGeneratedAttribute]
public sealed virtual NUnitEventTestCase get_Parent();
}
public class NUnit.VisualStudio.TestAdapter.NUnitEngine.NUnitEventWrongTypeException : Exception {
    public NUnitEventWrongTypeException(string message);
    public NUnitEventWrongTypeException(string message, Exception inner);
    protected NUnitEventWrongTypeException(SerializationInfo info, StreamingContext context);
}
public class NUnit.VisualStudio.TestAdapter.NUnitEngine.NUnitFailure : object {
    [CompilerGeneratedAttribute]
private string <Message>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Stacktrace>k__BackingField;
    public string Message { get; }
    public string Stacktrace { get; }
    public NUnitFailure(string message, string stacktrace);
    [CompilerGeneratedAttribute]
public string get_Message();
    [CompilerGeneratedAttribute]
public string get_Stacktrace();
}
public class NUnit.VisualStudio.TestAdapter.NUnitEngine.NUnitProperty : object {
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Value>k__BackingField;
    public string Name { get; }
    public string Value { get; }
    public bool IsInternal { get; }
    public NUnitProperty(string name, string value);
    public NUnitProperty(XElement node);
    [CompilerGeneratedAttribute]
public string get_Name();
    [CompilerGeneratedAttribute]
public string get_Value();
    public bool get_IsInternal();
}
public class NUnit.VisualStudio.TestAdapter.NUnitEngine.NUnitResults : object {
    [CompilerGeneratedAttribute]
private XmlNode <TopNode>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsRunnable>k__BackingField;
    [CompilerGeneratedAttribute]
private XmlNode <FullTopNode>k__BackingField;
    public XmlNode TopNode { get; }
    public bool IsRunnable { get; }
    public XmlNode FullTopNode { get; }
    public bool HasNoNUnitTests { get; }
    public NUnitResults(XmlNode results);
    [CompilerGeneratedAttribute]
public XmlNode get_TopNode();
    [CompilerGeneratedAttribute]
public bool get_IsRunnable();
    public string AsString();
    [CompilerGeneratedAttribute]
public XmlNode get_FullTopNode();
    public SkipReason WhatSkipReason();
    public bool get_HasNoNUnitTests();
    public XmlNodeList TestCases();
}
public abstract class NUnit.VisualStudio.TestAdapter.NUnitEngine.NUnitTestEvent : NUnitTestNode {
    private List`1<NUnitAttachment> nUnitAttachments;
    public bool IsFailed { get; }
    public string Label { get; }
    public bool IsIgnored { get; }
    public TimeSpan Duration { get; }
    public string MethodName { get; }
    public string ClassName { get; }
    public string Output { get; }
    public IEnumerable`1<NUnitAttachment> NUnitAttachments { get; }
    protected NUnitTestEvent(string testEvent);
    protected NUnitTestEvent(XmlNode node);
    public TestTypes TestType();
    public sealed virtual ResultType Result();
    public sealed virtual bool get_IsFailed();
    public sealed virtual SiteType Site();
    public string get_Label();
    public sealed virtual bool get_IsIgnored();
    public sealed virtual TimeSpan get_Duration();
    public string get_MethodName();
    public string get_ClassName();
    public sealed virtual string get_Output();
    public sealed virtual CheckedTime StartTime();
    public sealed virtual CheckedTime EndTime();
    public sealed virtual IEnumerable`1<NUnitAttachment> get_NUnitAttachments();
}
public class NUnit.VisualStudio.TestAdapter.NUnitEngine.NUnitTestEventHeader : object {
    [CompilerGeneratedAttribute]
private XmlNode <Node>k__BackingField;
    [CompilerGeneratedAttribute]
private EventType <Type>k__BackingField;
    public XmlNode Node { get; }
    public string FullName { get; }
    public string Name { get; }
    public EventType Type { get; }
    public NUnitTestEventHeader(string sNode);
    [CompilerGeneratedAttribute]
public sealed virtual XmlNode get_Node();
    public string AsString();
    public string get_FullName();
    public string get_Name();
    [CompilerGeneratedAttribute]
public EventType get_Type();
}
public class NUnit.VisualStudio.TestAdapter.NUnitEngine.NUnitTestEventStartTest : NUnitTestEvent {
    public NUnitTestEventStartTest(INUnitTestEventForXml node);
    public NUnitTestEventStartTest(string testEvent);
    public NUnitTestEventStartTest(XmlNode node);
}
public class NUnit.VisualStudio.TestAdapter.NUnitEngine.NUnitTestEventSuiteFinished : NUnitTestEvent {
    [CompilerGeneratedAttribute]
private string <ReasonMessage>k__BackingField;
    [CompilerGeneratedAttribute]
private string <FailureMessage>k__BackingField;
    [CompilerGeneratedAttribute]
private string <StackTrace>k__BackingField;
    public string ReasonMessage { get; }
    public bool HasReason { get; }
    public string FailureMessage { get; }
    public string StackTrace { get; }
    public bool HasFailure { get; }
    public NUnitTestEventSuiteFinished(INUnitTestEventForXml node);
    public NUnitTestEventSuiteFinished(string testEvent);
    public NUnitTestEventSuiteFinished(XmlNode node);
    [CompilerGeneratedAttribute]
public sealed virtual string get_ReasonMessage();
    public sealed virtual bool get_HasReason();
    [CompilerGeneratedAttribute]
public sealed virtual string get_FailureMessage();
    [CompilerGeneratedAttribute]
public sealed virtual string get_StackTrace();
    public sealed virtual bool get_HasFailure();
}
public class NUnit.VisualStudio.TestAdapter.NUnitEngine.NUnitTestEventTestCase : NUnitTestEvent {
    [CompilerGeneratedAttribute]
private NUnitFailure <Failure>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ReasonMessage>k__BackingField;
    public NUnitFailure Failure { get; }
    public string ReasonMessage { get; }
    public bool HasReason { get; }
    public bool HasFailure { get; }
    public string FailureStackTrace { get; }
    public string StackTrace { get; }
    public NUnitTestEventTestCase(INUnitTestEventForXml node);
    public NUnitTestEventTestCase(string testEvent);
    public NUnitTestEventTestCase(XmlNode node);
    [CompilerGeneratedAttribute]
public sealed virtual NUnitFailure get_Failure();
    [CompilerGeneratedAttribute]
public sealed virtual string get_ReasonMessage();
    public sealed virtual bool get_HasReason();
    public sealed virtual bool get_HasFailure();
    public sealed virtual string get_FailureStackTrace();
    public sealed virtual string get_StackTrace();
}
public class NUnit.VisualStudio.TestAdapter.NUnitEngine.NUnitTestEventTestOutput : NUnitTestEvent {
    [CompilerGeneratedAttribute]
private Streams <Stream>k__BackingField;
    public Streams Stream { get; }
    public string TestId { get; }
    public string TestName { get; }
    public bool IsProgressStream { get; }
    public bool IsErrorStream { get; }
    public bool IsNullOrEmptyStream { get; }
    public string Content { get; }
    public NUnitTestEventTestOutput(XmlNode node);
    public NUnitTestEventTestOutput(INUnitTestEventForXml theEvent);
    [CompilerGeneratedAttribute]
public sealed virtual Streams get_Stream();
    public sealed virtual string get_TestId();
    public sealed virtual string get_TestName();
    public sealed virtual bool get_IsProgressStream();
    public sealed virtual bool get_IsErrorStream();
    public sealed virtual bool get_IsNullOrEmptyStream();
    public sealed virtual string get_Content();
}
public abstract class NUnit.VisualStudio.TestAdapter.NUnitEngine.NUnitTestNode : object {
    [CompilerGeneratedAttribute]
private XmlNode <Node>k__BackingField;
    private List`1<NUnitProperty> properties;
    protected XmlNode Node { get; protected set; }
    public string Id { get; }
    public string FullName { get; }
    public string Name { get; }
    public bool IsNull { get; }
    public IEnumerable`1<NUnitProperty> Properties { get; }
    public string Seed { get; }
    protected NUnitTestNode(XmlNode node);
    [CompilerGeneratedAttribute]
protected XmlNode get_Node();
    [CompilerGeneratedAttribute]
protected void set_Node(XmlNode value);
    public virtual string get_Id();
    public sealed virtual string get_FullName();
    public sealed virtual string get_Name();
    public bool get_IsNull();
    public sealed virtual IEnumerable`1<NUnitProperty> get_Properties();
    public sealed virtual string get_Seed();
}
public enum NUnit.VisualStudio.TestAdapter.NUnitEngine.RunStateEnum : Enum {
    public int value__;
    public static RunStateEnum NA;
    public static RunStateEnum Runnable;
    public static RunStateEnum Explicit;
    public static RunStateEnum NotRunnable;
}
[ExtensionAttribute]
internal static class NUnit.VisualStudio.TestAdapter.NUnitEngine.UnicodeEscapeHelper : object {
    [ExtensionAttribute]
public static string UnEscapeUnicodeCharacters(string text);
    private static bool TryUnEscapeOneCharacter(string text, int position, Char& escapedChar, Int32& extraCharacterRead);
}
public class NUnit.VisualStudio.TestAdapter.NUnitEventListener : object {
    private static ICollection`1<INUnitTestEventTestOutput> EmptyNodes;
    [CompilerGeneratedAttribute]
private ITestExecutionRecorder <Recorder>k__BackingField;
    [CompilerGeneratedAttribute]
private ITestConverterCommon <TestConverter>k__BackingField;
    [CompilerGeneratedAttribute]
private IAdapterSettings <Settings>k__BackingField;
    [CompilerGeneratedAttribute]
private Dictionary`2<string, ICollection`1<INUnitTestEventTestOutput>> <OutputNodes>k__BackingField;
    [CompilerGeneratedAttribute]
private INUnit3TestExecutor <Executor>k__BackingField;
    private bool disposed;
    private static string Nl;
    private static int NlLength;
    private IDumpXml dumpXml;
    private ITestExecutionRecorder Recorder { get; }
    private ITestConverterCommon TestConverter { get; }
    private IAdapterSettings Settings { get; }
    private Dictionary`2<string, ICollection`1<INUnitTestEventTestOutput>> OutputNodes { get; }
    private INUnit3TestExecutor Executor { get; }
    public NUnitEventListener(ITestConverterCommon testConverter, INUnit3TestExecutor executor);
    private static NUnitEventListener();
    [CompilerGeneratedAttribute]
private ITestExecutionRecorder get_Recorder();
    [CompilerGeneratedAttribute]
private ITestConverterCommon get_TestConverter();
    [CompilerGeneratedAttribute]
private IAdapterSettings get_Settings();
    [CompilerGeneratedAttribute]
private Dictionary`2<string, ICollection`1<INUnitTestEventTestOutput>> get_OutputNodes();
    [CompilerGeneratedAttribute]
private INUnit3TestExecutor get_Executor();
    public sealed virtual void OnTestEvent(string report);
    public sealed virtual void Dispose();
    protected virtual void Dispose(bool disposing);
    protected virtual override void Finalize();
    public void TestStarted(INUnitTestEventStartTest testNode);
    public void TestFinished(INUnitTestEventTestCase resultNode);
    public void SuiteFinished(INUnitTestEventSuiteFinished resultNode);
    public void TestOutput(INUnitTestEventTestOutput outputNodeEvent);
}
public abstract class NUnit.VisualStudio.TestAdapter.NUnitTestAdapter : object {
    public static string ExecutorUri;
    public static string SettingsName;
    [CompilerGeneratedAttribute]
private IAdapterSettings <Settings>k__BackingField;
    [CompilerGeneratedAttribute]
private string <AdapterVersion>k__BackingField;
    private NUnitEngineAdapter nUnitEngineAdapter;
    [CompilerGeneratedAttribute]
private TestLogger <TestLog>k__BackingField;
    [CompilerGeneratedAttribute]
private string <WorkDir>k__BackingField;
    private static string entryExeName;
    private static string whoIsCallingUsEntry;
    [CompilerGeneratedAttribute]
private List`1<string> <ForbiddenFolders>k__BackingField;
    public IAdapterSettings Settings { get; private set; }
    protected string AdapterVersion { get; protected set; }
    public NUnitEngineAdapter NUnitEngineAdapter { get; private set; }
    protected TestLogger TestLog { get; private set; }
    protected string WorkDir { get; private set; }
    public static string WhoIsCallingUsEntry { get; }
    public static bool IsRunningUnderIde { get; }
    public List`1<string> ForbiddenFolders { get; private set; }
    [CompilerGeneratedAttribute]
public sealed virtual IAdapterSettings get_Settings();
    [CompilerGeneratedAttribute]
private void set_Settings(IAdapterSettings value);
    [CompilerGeneratedAttribute]
protected string get_AdapterVersion();
    [CompilerGeneratedAttribute]
protected void set_AdapterVersion(string value);
    public NUnitEngineAdapter get_NUnitEngineAdapter();
    private void set_NUnitEngineAdapter(NUnitEngineAdapter value);
    [CompilerGeneratedAttribute]
protected TestLogger get_TestLog();
    [CompilerGeneratedAttribute]
private void set_TestLog(TestLogger value);
    [CompilerGeneratedAttribute]
protected string get_WorkDir();
    [CompilerGeneratedAttribute]
private void set_WorkDir(string value);
    public static string get_WhoIsCallingUsEntry();
    public static bool get_IsRunningUnderIde();
    [CompilerGeneratedAttribute]
public List`1<string> get_ForbiddenFolders();
    [CompilerGeneratedAttribute]
private void set_ForbiddenFolders(List`1<string> value);
    protected void Initialize(IDiscoveryContext context, IMessageLogger messageLogger);
    public void InitializeForbiddenFolders();
    private void SetCurrentWorkingDirectory();
    public bool CheckDirectory(string dir);
    protected TestPackage CreateTestPackage(string assemblyName, IGrouping`2<string, TestCase> testCases);
    private TestPackage SetWorkDir(string assemblyName, TestPackage package);
    private static void SetTestParameters(IDictionary`2<string, object> runSettings, IDictionary`2<string, string> testParameters);
    protected static void CleanUpRegisteredChannels();
    protected void Unload();
}
public class NUnit.VisualStudio.TestAdapter.NUnitTestFilterBuilder : object {
    [CompilerGeneratedAttribute]
private IAdapterSettings <settings>P;
    private ITestFilterService _filterService;
    public static TestFilter NoTestsFound;
    public NUnitTestFilterBuilder(ITestFilterService filterService, IAdapterSettings settings);
    private static NUnitTestFilterBuilder();
    public TestFilter ConvertTfsFilterToNUnitFilter(IVsTestFilter vsFilter, IList`1<TestCase> loadedTestCases);
    public TestFilter ConvertVsTestFilterToNUnitFilter(IVsTestFilter vsFilter, IDiscoveryConverter discovery);
    public TestFilter ConvertVsTestFilterToNUnitFilter(IVsTestFilter vsFilter);
    public TestFilter ConvertTfsFilterToNUnitFilter(IVsTestFilter vsFilter, IDiscoveryConverter discovery);
    public TestFilter FilterByWhere(string where);
    public TestFilter FilterByList(IEnumerable`1<TestCase> testCases);
}
public enum NUnit.VisualStudio.TestAdapter.OutputXmlFolderMode : Enum {
    public int value__;
    public static OutputXmlFolderMode UseResultDirectory;
    public static OutputXmlFolderMode RelativeToResultDirectory;
    public static OutputXmlFolderMode RelativeToWorkFolder;
    public static OutputXmlFolderMode AsSpecified;
}
public enum NUnit.VisualStudio.TestAdapter.RunType : Enum {
    public int value__;
    public static RunType Unknown;
    public static RunType CommandLineLegacy;
    public static RunType CommandLineCurrentVSTest;
    public static RunType CommandLineCurrentNUnit;
    public static RunType Ide;
}
public class NUnit.VisualStudio.TestAdapter.Seed : object {
    internal static TestProperty NUnitSeedProperty;
    private static Seed();
}
public class NUnit.VisualStudio.TestAdapter.TestConverter : object {
    private ITestLogger _logger;
    private Dictionary`2<string, TestCase> _vsTestCaseMap;
    private string _sourceAssembly;
    private NavigationDataProvider _navigationDataProvider;
    private IAdapterSettings adapterSettings;
    private static string NL;
    private IDiscoveryConverter discoveryConverter;
    [CompilerGeneratedAttribute]
private IDictionary`2<string, CachedTestCaseInfo> <TraitsCache>k__BackingField;
    private bool CollectSourceInformation { get; }
    public IDictionary`2<string, CachedTestCaseInfo> TraitsCache { get; }
    public TestConverter(ITestLogger logger, string sourceAssembly, IAdapterSettings settings, IDiscoveryConverter discoveryConverter);
    private static TestConverter();
    private bool get_CollectSourceInformation();
    public sealed virtual void Dispose();
    [CompilerGeneratedAttribute]
public IDictionary`2<string, CachedTestCaseInfo> get_TraitsCache();
    public sealed virtual TestCase ConvertTestCase(NUnitDiscoveryTestCase testNode);
    public sealed virtual TestCase GetCachedTestCase(string id);
    public sealed virtual TestResultSet GetVsTestResults(INUnitTestEventTestCase resultNode, ICollection`1<INUnitTestEventTestOutput> outputNodes);
    private TestCase MakeTestCaseFromDiscoveryNode(NUnitDiscoveryTestCase testNode);
    private string CreateDisplayName(string fullyQualifiedName, string testNodeName);
    private TestResult MakeTestResultFromLegacyXmlNode(INUnitTestEventTestCase resultNode, IEnumerable`1<INUnitTestEventTestOutput> outputNodes);
    private TestResult GetBasicResult(INUnitTestEvent resultNode, IEnumerable`1<INUnitTestEventTestOutput> outputNodes);
    private static void FillResultFromOutputNodes(IEnumerable`1<INUnitTestEventTestOutput> outputNodes, TestResult vsResult);
    private AttachmentSet ParseAttachments(INUnitTestEvent resultNode);
    public TestOutcome GetTestOutcome(INUnitTestEvent resultNode);
    [CompilerGeneratedAttribute]
internal static bool <MakeTestCaseFromDiscoveryNode>g__CheckCodeFilePathOverride|17_0(<>c__DisplayClass17_0& );
}
public class NUnit.VisualStudio.TestAdapter.TestConverterForXml : object {
    private ITestLogger _logger;
    private Dictionary`2<string, TestCase> _vsTestCaseMap;
    private string _sourceAssembly;
    private NavigationDataProvider _navigationDataProvider;
    private IAdapterSettings adapterSettings;
    [CompilerGeneratedAttribute]
private IDictionary`2<string, CachedTestCaseInfo> <TraitsCache>k__BackingField;
    private static string NL;
    private bool CollectSourceInformation { get; }
    public IDictionary`2<string, CachedTestCaseInfo> TraitsCache { get; }
    public TestConverterForXml(ITestLogger logger, string sourceAssembly, IAdapterSettings settings);
    private static TestConverterForXml();
    private bool get_CollectSourceInformation();
    public sealed virtual void Dispose();
    [CompilerGeneratedAttribute]
public IDictionary`2<string, CachedTestCaseInfo> get_TraitsCache();
    public sealed virtual TestCase ConvertTestCase(NUnitEventTestCase testNode);
    public sealed virtual TestCase GetCachedTestCase(string id);
    public sealed virtual TestResultSet GetVsTestResults(INUnitTestEventTestCase resultNode, ICollection`1<INUnitTestEventTestOutput> outputNodes);
    private TestCase MakeTestCaseFromXmlNode(NUnitEventTestCase testNode);
    private string CreateDisplayName(string fullyQualifiedName, string testNodeName);
    private TestResult MakeTestResultFromLegacyXmlNode(INUnitTestEventTestCase resultNode, IEnumerable`1<INUnitTestEventTestOutput> outputNodes);
    private TestResult GetBasicResult(INUnitTestEvent resultNode, IEnumerable`1<INUnitTestEventTestOutput> outputNodes);
    private static void FillResultFromOutputNodes(IEnumerable`1<INUnitTestEventTestOutput> outputNodes, TestResult vsResult);
    private AttachmentSet ParseAttachments(INUnitTestEvent resultNode);
    public TestOutcome GetTestOutcome(INUnitTestEvent resultNode);
    [CompilerGeneratedAttribute]
internal static bool <MakeTestCaseFromXmlNode>g__CheckCodeFilePathOverride|17_0(<>c__DisplayClass17_0& );
}
public class NUnit.VisualStudio.TestAdapter.TestFilterCombiner : object {
    [CompilerGeneratedAttribute]
private TestFilter <a>P;
    [CompilerGeneratedAttribute]
private TestFilter <b>P;
    public TestFilterCombiner(TestFilter a, TestFilter b);
    public TestFilter GetFilter();
    private string StripFilter(TestFilter x);
}
public class NUnit.VisualStudio.TestAdapter.TestFilterConverter.TestFilterParser : object {
    private Tokenizer _tokenizer;
    private static Token LPAREN;
    private static Token RPAREN;
    private static Token AND_OP;
    private static Token OR_OP;
    private static Token NOT_OP;
    private static Token EQ_OP;
    private static Token NE_OP;
    private static Token CONTAINS_OP;
    private static Token NOTCONTAINS_OP;
    private static Token[] AND_OPS;
    private static Token[] OR_OPS;
    private static Token[] EQ_OPS;
    private static Token[] REL_OPS;
    private static Token EOF;
    private static string REGEX_CHARS;
    private Token LookAhead { get; }
    private static TestFilterParser();
    public string Parse(string input);
    public string ParseFilterExpression();
    public string ParseFilterTerm();
    public string ParseFilterCondition();
    private string UnEscape(string rhs);
    private static string EmitFullNameFilter(Token op, string value);
    private static string EmitCategoryFilter(Token op, string value);
    private static string EmitNameFilter(Token op, string value);
    private static string EmitFilter(string lhs, Token op, string rhs);
    private static string EmitPropertyFilter(Token op, string name, string value);
    private static string EscapeRhsValue(Token op, string rhs);
    private string ParseExpressionInParentheses();
    private Token Expect(TokenKind[] kinds);
    private Token Expect(Token[] valid);
    private Exception InvalidTokenError(Token token);
    private Token get_LookAhead();
    private bool LookingAt(Token[] tokens);
    private Token NextToken();
    private static string EscapeRegexChars(string input);
    private static string XmlEscape(string text);
    [CompilerGeneratedAttribute]
private bool <LookingAt>b__32_0(Token token);
}
public class NUnit.VisualStudio.TestAdapter.TestFilterConverter.TestFilterParserException : Exception {
    public TestFilterParserException(string message);
    public TestFilterParserException(string message, Exception innerException);
    public TestFilterParserException(SerializationInfo info, StreamingContext context);
}
public class NUnit.VisualStudio.TestAdapter.TestFilterConverter.Token : object {
    [CompilerGeneratedAttribute]
private TokenKind <Kind>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Text>k__BackingField;
    [CompilerGeneratedAttribute]
private int <Pos>k__BackingField;
    public TokenKind Kind { get; }
    public string Text { get; }
    public int Pos { get; public set; }
    public Token(TokenKind kind);
    public Token(TokenKind kind, char ch);
    public Token(TokenKind kind, string text);
    [CompilerGeneratedAttribute]
public TokenKind get_Kind();
    [CompilerGeneratedAttribute]
public string get_Text();
    [CompilerGeneratedAttribute]
public int get_Pos();
    [CompilerGeneratedAttribute]
public void set_Pos(int value);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
    public virtual string ToString();
    public static bool op_Equality(Token t1, Token t2);
    public static bool op_Inequality(Token t1, Token t2);
}
public class NUnit.VisualStudio.TestAdapter.TestFilterConverter.Tokenizer : object {
    private string input;
    private int index;
    private static char EOF_CHAR;
    private static string WORD_BREAK_CHARS;
    private String[] dOubleCharSymbols;
    private Token lookahead;
    public Token LookAhead { get; }
    private char NextChar { get; }
    public Tokenizer(string input);
    public Token get_LookAhead();
    public Token NextToken();
    private Token GetNextToken();
    private bool IsWordChar(char c);
    private Token GetWordOrFqn();
    private void CollectWordChars(StringBuilder sb);
    private void CollectBalancedParentheticalExpression(StringBuilder sb);
    private void CollectQuotedString(StringBuilder sb);
    private char GetChar();
    private char get_NextChar();
    private void SkipBlanks();
}
public enum NUnit.VisualStudio.TestAdapter.TestFilterConverter.TokenKind : Enum {
    public int value__;
    public static TokenKind Eof;
    public static TokenKind Word;
    public static TokenKind FQN;
    public static TokenKind String;
    public static TokenKind Symbol;
}
public class NUnit.VisualStudio.TestAdapter.TestLogger : object {
    private IAdapterSettings adapterSettings;
    private static string ExceptionFormat;
    [CompilerGeneratedAttribute]
private IMessageLogger <MessageLogger>k__BackingField;
    [CompilerGeneratedAttribute]
private int <Verbosity>k__BackingField;
    private IMessageLogger MessageLogger { get; }
    public int Verbosity { get; public set; }
    public TestLogger(IMessageLogger messageLogger);
    [CompilerGeneratedAttribute]
private IMessageLogger get_MessageLogger();
    [CompilerGeneratedAttribute]
public sealed virtual int get_Verbosity();
    [CompilerGeneratedAttribute]
public sealed virtual void set_Verbosity(int value);
    public TestLogger InitSettings(IAdapterSettings settings);
    public sealed virtual void Error(string message);
    public sealed virtual void Error(string message, Exception ex);
    public sealed virtual void Warning(string message);
    public sealed virtual void Warning(string message, Exception ex);
    public sealed virtual void Info(string message);
    public sealed virtual void Debug(string message);
    public sealed virtual void SendMessage(TestMessageLevel testMessageLevel, string message);
    public void SendMessage(TestMessageLevel testMessageLevel, string message, Exception ex);
    public void DebugRunfrom();
    public void InfoNoTests(bool discoveryResultsHasNoNUnitTests, string assemblyPath);
    public void InfoNoTests(string assemblyPath);
}
[ExtensionAttribute]
public static class NUnit.VisualStudio.TestAdapter.TraitsFeature : object {
    private static string NUnitTestCategoryLabel;
    [ExtensionAttribute]
public static void AddTrait(TestCase testCase, string name, string value);
    [ExtensionAttribute]
public static void AddTraitsFromTestNode(TestCase testCase, NUnitDiscoveryTestCase testNCase, IDictionary`2<string, CachedTestCaseInfo> traitsCache, ITestLogger logger, IAdapterSettings adapterSettings);
    private static void AddingToCache(TestCase testCase, IDictionary`2<string, CachedTestCaseInfo> traitsCache, string key, CategoryList categoryList, T ancestor, Func`5<T, bool, string, IDictionary`2<string, CachedTestCaseInfo>, IEnumerable`1<string>> processTestCaseProperties);
    [ExtensionAttribute]
public static void AddTraitsFromXmlTestNode(TestCase testCase, NUnitEventTestCase testNCase, IDictionary`2<string, CachedTestCaseInfo> traitsCache, ITestLogger logger, IAdapterSettings adapterSettings);
    [ExtensionAttribute]
public static IEnumerable`1<NTrait> GetTraits(TestCase testCase);
    [ExtensionAttribute]
public static IEnumerable`1<string> GetCategories(TestCase testCase);
}
public static class NUnit.VisualStudio.TestAdapter.TryParse : object {
    public static bool EnumTryParse(string input, T& result);
}
public enum NUnit.VisualStudio.TestAdapter.VsTestCategoryType : Enum {
    public int value__;
    public static VsTestCategoryType NUnit;
    public static VsTestCategoryType MsTest;
}
public class NUnit.VisualStudio.TestAdapter.VsTestExecution : Execution {
    public VsTestExecution(IExecutionContext ctx);
    public virtual bool Run(TestFilter filter, DiscoveryConverter discovery, NUnit3TestExecutor nUnit3TestExecutor);
    public TestFilter CheckVsTestFilter(TestFilter filter, IDiscoveryConverter discovery, IVsTestFilter vsTestFilter);
    public virtual TestFilter CheckFilterInCurrentMode(TestFilter filter, IDiscoveryConverter discovery);
    private TestFilter CheckAssemblySelectLimit(TestFilter filter, int scount);
}
public abstract class NUnit.VisualStudio.TestAdapter.VsTestFilter : object {
    [CompilerGeneratedAttribute]
private IRunContext <runContext>P;
    private static Dictionary`2<string, TestProperty> SupportedPropertiesCache;
    private static Dictionary`2<string, NTrait> SupportedTraitCache;
    private static Dictionary`2<NTrait, TestProperty> TraitPropertyMap;
    private static List`1<string> SupportedProperties;
    private ITestCaseFilterExpression testCaseFilterExpression;
    private static Func`3<TestCase, string, String[]> CachedTraitContainsDelegate;
    public ITestCaseFilterExpression TfsTestCaseFilterExpression { get; }
    public bool IsEmpty { get; }
    protected VsTestFilter(IRunContext runContext);
    private static VsTestFilter();
    public sealed virtual ITestCaseFilterExpression get_TfsTestCaseFilterExpression();
    public sealed virtual bool get_IsEmpty();
    public sealed virtual IEnumerable`1<TestCase> CheckFilter(IEnumerable`1<TestCase> tests);
    protected abstract virtual bool CheckFilter(TestCase testCase);
    public static object PropertyValueProvider(TestCase currentTest, string propertyName);
    private static Func`3<TestCase, string, String[]> TraitContains();
    public static TestProperty LocalPropertyProvider(string propertyName);
    public static TestProperty PropertyProvider(string propertyName);
    public static NTrait TraitProvider(string traitName);
}
public static class NUnit.VisualStudio.TestAdapter.VsTestFilterFactory : object {
    public static VsTestFilter CreateVsTestFilter(IAdapterSettings settings, IRunContext context);
}
public class NUnit.VisualStudio.TestAdapter.VsTestFilterIde : VsTestFilter {
    public VsTestFilterIde(IRunContext runContext);
    protected virtual bool CheckFilter(TestCase testCase);
}
public class NUnit.VisualStudio.TestAdapter.VsTestFilterLegacy : VsTestFilter {
    public VsTestFilterLegacy(IRunContext runContext);
    protected virtual bool CheckFilter(TestCase testCase);
}
public class NUnit.VisualStudio.TestAdapter.VsTestFilterNonIde : VsTestFilter {
    public VsTestFilterNonIde(IRunContext runContext);
    protected virtual bool CheckFilter(TestCase testCase);
}
[ExtensionAttribute]
public static class NUnit.VisualStudio.TestAdapter.XmlHelper : object {
    public static XmlNode CreateTopLevelElement(string name);
    public static XmlNode CreateXmlNode(string xml);
    [ExtensionAttribute]
public static XmlNode ToXml(string xml);
    [ExtensionAttribute]
public static void AddAttribute(XmlNode node, string name, string value);
    [ExtensionAttribute]
public static XmlNode AddElement(XmlNode node, string name);
    [ExtensionAttribute]
public static XmlNode AddElementWithCDataSection(XmlNode node, string name, string data);
    [ExtensionAttribute]
public static string GetAttribute(XmlNode result, string name);
    [ExtensionAttribute]
public static int GetAttribute(XmlNode result, string name, int defaultValue);
    [ExtensionAttribute]
public static double GetAttribute(XmlNode result, string name, double defaultValue);
    [ExtensionAttribute]
public static DateTime GetAttribute(XmlNode result, string name, DateTime defaultValue);
}
[AttributeUsageAttribute("64")]
internal class System.Runtime.CompilerServices.ModuleInitializerAttribute : Attribute {
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
[AttributeUsageAttribute("2")]
internal class System.Runtime.CompilerServices.RefSafetyRulesAttribute : Attribute {
    public int Version;
    public RefSafetyRulesAttribute(int );
}
