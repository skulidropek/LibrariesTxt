[CompilerGeneratedAttribute]
[EmbeddedAttribute]
internal class Microsoft.CodeAnalysis.EmbeddedAttribute : Attribute {
}
public class NUnit.Common.ColorConsole : object {
    private ConsoleColor _originalColor;
    public ColorConsole(ColorStyle style);
    public static ConsoleColor GetColor(ColorStyle style);
    private static ConsoleColor GetColorForStyle(ColorStyle style);
    public sealed virtual void Dispose();
}
public class NUnit.Common.ColorConsoleWriter : ExtendedTextWrapper {
    public bool ColorEnabled;
    public ColorConsoleWriter(bool colorEnabled);
    public virtual void Write(ColorStyle style, string value);
    public virtual void WriteLine(ColorStyle style, string value);
    public virtual void WriteLabel(string label, object option);
    public virtual void WriteLabelLine(string label, object option);
    public virtual void WriteLabel(string label, object option, ColorStyle valueStyle);
    public virtual void WriteLabelLine(string label, object option, ColorStyle valueStyle);
}
public enum NUnit.Common.ColorStyle : Enum {
    public int value__;
    public static ColorStyle Header;
    public static ColorStyle SubHeader;
    public static ColorStyle SectionHeader;
    public static ColorStyle Default;
    public static ColorStyle Output;
    public static ColorStyle Help;
    public static ColorStyle Label;
    public static ColorStyle Value;
    public static ColorStyle Pass;
    public static ColorStyle Failure;
    public static ColorStyle Warning;
    public static ColorStyle Error;
}
public class NUnit.Common.CommandLineOptions : OptionSet {
    private static string DEFAULT_WORK_DIRECTORY;
    private bool _validated;
    private bool _noresult;
    private int _nesting;
    private static Regex ArgsRegex;
    [CompilerGeneratedAttribute]
private bool <InputFileRequired>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <Explore>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <ShowHelp>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <ShowVersion>k__BackingField;
    [CompilerGeneratedAttribute]
private string <InputFile>k__BackingField;
    [CompilerGeneratedAttribute]
private IList`1<string> <TestList>k__BackingField;
    [CompilerGeneratedAttribute]
private IList`1<string> <PreFilters>k__BackingField;
    [CompilerGeneratedAttribute]
private IDictionary`2<string, string> <TestParameters>k__BackingField;
    [CompilerGeneratedAttribute]
private string <WhereClause>k__BackingField;
    [CompilerGeneratedAttribute]
private int <DefaultTimeout>k__BackingField;
    [CompilerGeneratedAttribute]
private int <RandomSeed>k__BackingField;
    [CompilerGeneratedAttribute]
private string <DefaultTestNamePattern>k__BackingField;
    [CompilerGeneratedAttribute]
private int <NumberOfTestWorkers>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <StopOnError>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <WaitBeforeExit>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <NoHeader>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <NoColor>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <TeamCity>k__BackingField;
    [CompilerGeneratedAttribute]
private string <OutFile>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ErrFile>k__BackingField;
    [CompilerGeneratedAttribute]
private string <DisplayTestLabels>k__BackingField;
    private string _workDirectory;
    [CompilerGeneratedAttribute]
private string <InternalTraceLevel>k__BackingField;
    private List`1<OutputSpecification> _resultOutputSpecifications;
    [CompilerGeneratedAttribute]
private IList`1<OutputSpecification> <ExploreOutputSpecifications>k__BackingField;
    [CompilerGeneratedAttribute]
private IList`1<string> <ErrorMessages>k__BackingField;
    public bool InputFileRequired { get; public set; }
    public bool Explore { get; private set; }
    public bool ShowHelp { get; private set; }
    public bool ShowVersion { get; private set; }
    public string InputFile { get; private set; }
    public IList`1<string> TestList { get; }
    public IList`1<string> PreFilters { get; }
    public IDictionary`2<string, string> TestParameters { get; }
    public string WhereClause { get; private set; }
    public bool WhereClauseSpecified { get; }
    public int DefaultTimeout { get; private set; }
    public bool DefaultTimeoutSpecified { get; }
    public int RandomSeed { get; private set; }
    public bool RandomSeedSpecified { get; }
    public string DefaultTestNamePattern { get; private set; }
    public int NumberOfTestWorkers { get; private set; }
    public bool NumberOfTestWorkersSpecified { get; }
    public bool StopOnError { get; private set; }
    public bool WaitBeforeExit { get; private set; }
    public bool NoHeader { get; private set; }
    public bool NoColor { get; private set; }
    public bool TeamCity { get; private set; }
    public string OutFile { get; private set; }
    public bool OutFileSpecified { get; }
    public string ErrFile { get; private set; }
    public bool ErrFileSpecified { get; }
    public string DisplayTestLabels { get; private set; }
    public string WorkDirectory { get; }
    public bool WorkDirectorySpecified { get; }
    public string InternalTraceLevel { get; private set; }
    public bool InternalTraceLevelSpecified { get; }
    public IList`1<OutputSpecification> ResultOutputSpecifications { get; }
    public IList`1<OutputSpecification> ExploreOutputSpecifications { get; }
    public IList`1<string> ErrorMessages { get; }
    internal CommandLineOptions(IDefaultOptionsProvider defaultOptionsProvider, bool requireInputFile, String[] args);
    public CommandLineOptions(bool requireInputFile, String[] args);
    private static CommandLineOptions();
    internal IEnumerable`1<string> PreParse(IEnumerable`1<string> args);
    [IteratorStateMachineAttribute("NUnit.Common.CommandLineOptions/<GetArgs>d__8")]
internal static IEnumerable`1<string> GetArgs(string commandLine);
    private static IEnumerable`1<string> GetArgsFromFile(string filename);
    [CompilerGeneratedAttribute]
public bool get_InputFileRequired();
    [CompilerGeneratedAttribute]
public void set_InputFileRequired(bool value);
    [CompilerGeneratedAttribute]
public bool get_Explore();
    [CompilerGeneratedAttribute]
private void set_Explore(bool value);
    [CompilerGeneratedAttribute]
public bool get_ShowHelp();
    [CompilerGeneratedAttribute]
private void set_ShowHelp(bool value);
    [CompilerGeneratedAttribute]
public bool get_ShowVersion();
    [CompilerGeneratedAttribute]
private void set_ShowVersion(bool value);
    [CompilerGeneratedAttribute]
public string get_InputFile();
    [CompilerGeneratedAttribute]
private void set_InputFile(string value);
    [CompilerGeneratedAttribute]
public IList`1<string> get_TestList();
    [CompilerGeneratedAttribute]
public IList`1<string> get_PreFilters();
    [CompilerGeneratedAttribute]
public IDictionary`2<string, string> get_TestParameters();
    [CompilerGeneratedAttribute]
public string get_WhereClause();
    [CompilerGeneratedAttribute]
private void set_WhereClause(string value);
    public bool get_WhereClauseSpecified();
    [CompilerGeneratedAttribute]
public int get_DefaultTimeout();
    [CompilerGeneratedAttribute]
private void set_DefaultTimeout(int value);
    public bool get_DefaultTimeoutSpecified();
    [CompilerGeneratedAttribute]
public int get_RandomSeed();
    [CompilerGeneratedAttribute]
private void set_RandomSeed(int value);
    public bool get_RandomSeedSpecified();
    [CompilerGeneratedAttribute]
public string get_DefaultTestNamePattern();
    [CompilerGeneratedAttribute]
private void set_DefaultTestNamePattern(string value);
    [CompilerGeneratedAttribute]
public int get_NumberOfTestWorkers();
    [CompilerGeneratedAttribute]
private void set_NumberOfTestWorkers(int value);
    public bool get_NumberOfTestWorkersSpecified();
    [CompilerGeneratedAttribute]
public bool get_StopOnError();
    [CompilerGeneratedAttribute]
private void set_StopOnError(bool value);
    [CompilerGeneratedAttribute]
public bool get_WaitBeforeExit();
    [CompilerGeneratedAttribute]
private void set_WaitBeforeExit(bool value);
    [CompilerGeneratedAttribute]
public bool get_NoHeader();
    [CompilerGeneratedAttribute]
private void set_NoHeader(bool value);
    [CompilerGeneratedAttribute]
public bool get_NoColor();
    [CompilerGeneratedAttribute]
private void set_NoColor(bool value);
    [CompilerGeneratedAttribute]
public bool get_TeamCity();
    [CompilerGeneratedAttribute]
private void set_TeamCity(bool value);
    [CompilerGeneratedAttribute]
public string get_OutFile();
    [CompilerGeneratedAttribute]
private void set_OutFile(string value);
    public bool get_OutFileSpecified();
    [CompilerGeneratedAttribute]
public string get_ErrFile();
    [CompilerGeneratedAttribute]
private void set_ErrFile(string value);
    public bool get_ErrFileSpecified();
    [CompilerGeneratedAttribute]
public string get_DisplayTestLabels();
    [CompilerGeneratedAttribute]
private void set_DisplayTestLabels(string value);
    public string get_WorkDirectory();
    public bool get_WorkDirectorySpecified();
    [CompilerGeneratedAttribute]
public string get_InternalTraceLevel();
    [CompilerGeneratedAttribute]
private void set_InternalTraceLevel(string value);
    public bool get_InternalTraceLevelSpecified();
    public IList`1<OutputSpecification> get_ResultOutputSpecifications();
    [CompilerGeneratedAttribute]
public IList`1<OutputSpecification> get_ExploreOutputSpecifications();
    [CompilerGeneratedAttribute]
public IList`1<string> get_ErrorMessages();
    public bool Validate();
    protected virtual void CheckOptionCombinations();
    protected string RequiredValue(string val, string option, String[] validValues);
    protected int RequiredInt(string val, string option);
    private string ExpandToFullPath(string path);
    protected virtual void ConfigureOptions(bool allowInputFile);
    private bool LooksLikeAnOption(string v);
    private void ResolveOutputSpecification(string value, IList`1<OutputSpecification> outputSpecifications);
    [CompilerGeneratedAttribute]
private void <ConfigureOptions>b__128_0(string v);
    [CompilerGeneratedAttribute]
private void <ConfigureOptions>b__128_1(string v);
    [CompilerGeneratedAttribute]
private void <ConfigureOptions>b__128_2(string v);
    [CompilerGeneratedAttribute]
private void <ConfigureOptions>b__128_3(string v);
    [CompilerGeneratedAttribute]
private void <ConfigureOptions>b__128_4(string v);
    [CompilerGeneratedAttribute]
private void <ConfigureOptions>b__128_5(string v);
    [CompilerGeneratedAttribute]
private void <ConfigureOptions>b__128_6(string v);
    [CompilerGeneratedAttribute]
private void <ConfigureOptions>b__128_7(string v);
    [CompilerGeneratedAttribute]
private void <ConfigureOptions>b__128_8(string v);
    [CompilerGeneratedAttribute]
private void <ConfigureOptions>b__128_9(string v);
    [CompilerGeneratedAttribute]
private void <ConfigureOptions>b__128_10(string v);
    [CompilerGeneratedAttribute]
private void <ConfigureOptions>b__128_11(string v);
    [CompilerGeneratedAttribute]
private void <ConfigureOptions>b__128_12(string v);
    [CompilerGeneratedAttribute]
private void <ConfigureOptions>b__128_13(string v);
    [CompilerGeneratedAttribute]
private void <ConfigureOptions>b__128_14(string v);
    [CompilerGeneratedAttribute]
private void <ConfigureOptions>b__128_15(string v);
    [CompilerGeneratedAttribute]
private void <ConfigureOptions>b__128_16(string v);
    [CompilerGeneratedAttribute]
private void <ConfigureOptions>b__128_17(string v);
    [CompilerGeneratedAttribute]
private void <ConfigureOptions>b__128_18(string v);
    [CompilerGeneratedAttribute]
private void <ConfigureOptions>b__128_19(string v);
    [CompilerGeneratedAttribute]
private void <ConfigureOptions>b__128_20(string v);
    [CompilerGeneratedAttribute]
private void <ConfigureOptions>b__128_21(string v);
    [CompilerGeneratedAttribute]
private void <ConfigureOptions>b__128_22(string v);
    [CompilerGeneratedAttribute]
private void <ConfigureOptions>b__128_23(string v);
    [CompilerGeneratedAttribute]
private void <ConfigureOptions>b__128_24(string v);
}
internal class NUnit.Common.DefaultOptionsProvider : object {
    private static string EnvironmentVariableTeamcityProjectName;
    public bool TeamCity { get; }
    public sealed virtual bool get_TeamCity();
}
public class NUnit.Common.ExtendedTextWrapper : ExtendedTextWriter {
    private TextWriter _writer;
    private bool _shouldDisposeWriter;
    public Encoding Encoding { get; }
    public ExtendedTextWrapper(TextWriter writer);
    public ExtendedTextWrapper(TextWriter writer, bool shouldDisposeWriter);
    public virtual void Write(char value);
    public virtual void Write(string value);
    public virtual void WriteLine(string value);
    public virtual Encoding get_Encoding();
    protected virtual void Dispose(bool disposing);
    public virtual void Write(ColorStyle style, string value);
    public virtual void WriteLine(ColorStyle style, string value);
    public virtual void WriteLabel(string label, object option);
    public virtual void WriteLabel(string label, object option, ColorStyle valueStyle);
    public virtual void WriteLabelLine(string label, object option);
    public virtual void WriteLabelLine(string label, object option, ColorStyle valueStyle);
}
public abstract class NUnit.Common.ExtendedTextWriter : TextWriter {
    public abstract virtual void Write(ColorStyle style, string value);
    public abstract virtual void WriteLine(ColorStyle style, string value);
    public abstract virtual void WriteLabel(string label, object option);
    public abstract virtual void WriteLabel(string label, object option, ColorStyle valueStyle);
    public abstract virtual void WriteLabelLine(string label, object option);
    public abstract virtual void WriteLabelLine(string label, object option, ColorStyle valueStyle);
}
internal interface NUnit.Common.IDefaultOptionsProvider {
    public bool TeamCity { get; }
    public abstract virtual bool get_TeamCity();
}
public class NUnit.Common.OutputSpecification : object {
    [CompilerGeneratedAttribute]
private string <OutputPath>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Format>k__BackingField;
    public string OutputPath { get; }
    public string Format { get; }
    public OutputSpecification(string spec);
    [CompilerGeneratedAttribute]
public string get_OutputPath();
    [CompilerGeneratedAttribute]
public string get_Format();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public static class NUnit.Common.TestNameParser : object {
    public static String[] Parse(string argument);
    private static string GetTestName(string argument, Int32& index);
    private static int GetSeparator(string argument, int index);
}
public class NUnit.Common.TestSelectionParser : object {
    private Tokenizer _tokenizer;
    private static Token LPAREN;
    private static Token RPAREN;
    private static Token AND_OP1;
    private static Token AND_OP2;
    private static Token AND_OP3;
    private static Token AND_OP4;
    private static Token OR_OP1;
    private static Token OR_OP2;
    private static Token OR_OP3;
    private static Token OR_OP4;
    private static Token NOT_OP;
    private static Token EQ_OP1;
    private static Token EQ_OP2;
    private static Token NE_OP;
    private static Token MATCH_OP;
    private static Token NOMATCH_OP;
    private static Token[] AND_OPS;
    private static Token[] OR_OPS;
    private static Token[] EQ_OPS;
    private static Token[] REL_OPS;
    private static Token EOF;
    private Token LookAhead { get; }
    private static TestSelectionParser();
    public string Parse(string input);
    public string ParseFilterExpression();
    public string ParseFilterTerm();
    public string ParseFilterElement();
    private static string EmitFilterElement(Token lhs, Token op, Token rhs);
    private static string EmitPropertyElement(Token lhs, Token op, Token rhs);
    private static string EmitElement(string fmt, Token lhs, Token rhs);
    private string ParseExpressionInParentheses();
    private Token Expect(TokenKind[] kinds);
    private Token Expect(Token[] valid);
    private Exception InvalidTokenError(Token token);
    private Token get_LookAhead();
    private bool LookingAt(Token[] tokens);
    private Token NextToken();
    private static string XmlEscape(string text);
}
public class NUnit.Common.TestSelectionParserException : Exception {
    public TestSelectionParserException(string message);
    public TestSelectionParserException(string message, Exception innerException);
    public TestSelectionParserException(SerializationInfo info, StreamingContext context);
}
public class NUnit.Common.Token : object {
    [CompilerGeneratedAttribute]
private TokenKind <Kind>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Text>k__BackingField;
    [CompilerGeneratedAttribute]
private int <Pos>k__BackingField;
    public TokenKind Kind { get; }
    public string Text { get; }
    public int Pos { get; public set; }
    public Token(TokenKind kind);
    public Token(TokenKind kind, char ch);
    public Token(TokenKind kind, string text);
    [CompilerGeneratedAttribute]
public TokenKind get_Kind();
    [CompilerGeneratedAttribute]
public string get_Text();
    [CompilerGeneratedAttribute]
public int get_Pos();
    [CompilerGeneratedAttribute]
public void set_Pos(int value);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
    public virtual string ToString();
    public static bool op_Equality(Token t1, Token t2);
    public static bool op_Inequality(Token t1, Token t2);
}
public class NUnit.Common.Tokenizer : object {
    private string _input;
    private int _index;
    private static char EOF_CHAR;
    private static string WORD_BREAK_CHARS;
    private static String[] DOUBLE_CHAR_SYMBOLS;
    private Token _lookahead;
    public Token LookAhead { get; }
    private char NextChar { get; }
    public Tokenizer(string input);
    private static Tokenizer();
    public Token get_LookAhead();
    public Token NextToken();
    private Token GetNextToken();
    private bool IsWordChar(char c);
    private Token GetWord();
    private Token GetString();
    private char GetChar();
    private char get_NextChar();
    private void SkipBlanks();
}
public enum NUnit.Common.TokenKind : Enum {
    public int value__;
    public static TokenKind Eof;
    public static TokenKind Word;
    public static TokenKind String;
    public static TokenKind Symbol;
}
public abstract class NUnit.Options.Option : object {
    private string _prototype;
    private string _description;
    private String[] _names;
    private OptionValueType _type;
    private int _count;
    private String[] _separators;
    private static Char[] NameTerminator;
    public string Prototype { get; }
    public string Description { get; }
    public OptionValueType OptionValueType { get; }
    public int MaxValueCount { get; }
    internal String[] Names { get; }
    internal String[] ValueSeparators { get; }
    protected Option(string prototype, string description);
    protected Option(string prototype, string description, int maxValueCount);
    private static Option();
    public string get_Prototype();
    public string get_Description();
    public OptionValueType get_OptionValueType();
    public int get_MaxValueCount();
    public String[] GetNames();
    public String[] GetValueSeparators();
    protected static T Parse(string value, OptionContext c);
    internal String[] get_Names();
    internal String[] get_ValueSeparators();
    private OptionValueType ParsePrototype();
    private static void AddSeparators(string name, int end, ICollection`1<string> seps);
    public void Invoke(OptionContext c);
    protected abstract virtual void OnParseComplete(OptionContext c);
    public virtual string ToString();
}
public class NUnit.Options.OptionAction`2 : MulticastDelegate {
    public OptionAction`2(object object, IntPtr method);
    public virtual void Invoke(TKey key, TValue value);
    public virtual IAsyncResult BeginInvoke(TKey key, TValue value, AsyncCallback callback, object object);
    public virtual void EndInvoke(IAsyncResult result);
}
public class NUnit.Options.OptionContext : object {
    private Option _option;
    private string _name;
    private int _index;
    private OptionSet _set;
    private OptionValueCollection _c;
    public Option Option { get; public set; }
    public string OptionName { get; public set; }
    public int OptionIndex { get; public set; }
    public OptionSet OptionSet { get; }
    public OptionValueCollection OptionValues { get; }
    public OptionContext(OptionSet set);
    public Option get_Option();
    public void set_Option(Option value);
    public string get_OptionName();
    public void set_OptionName(string value);
    public int get_OptionIndex();
    public void set_OptionIndex(int value);
    public OptionSet get_OptionSet();
    public OptionValueCollection get_OptionValues();
}
public class NUnit.Options.OptionException : Exception {
    private string _option;
    public string OptionName { get; }
    public OptionException(string message, string optionName);
    public OptionException(string message, string optionName, Exception innerException);
    protected OptionException(SerializationInfo info, StreamingContext context);
    public string get_OptionName();
    public virtual void GetObjectData(SerializationInfo info, StreamingContext context);
}
public class NUnit.Options.OptionSet : KeyedCollection`2<string, Option> {
    private static Regex ValueOption;
    private static int OptionWidth;
    private static OptionSet();
    private string Localizer(string msg);
    public string MessageLocalizer(string msg);
    protected virtual string GetKeyForItem(Option item);
    protected virtual void InsertItem(int index, Option item);
    protected virtual void RemoveItem(int index);
    protected virtual void SetItem(int index, Option item);
    private void AddImpl(Option option);
    public OptionSet Add(Option option);
    public OptionSet Add(string prototype, Action`1<string> action);
    public OptionSet Add(string prototype, string description, Action`1<string> action);
    public OptionSet Add(string prototype, OptionAction`2<string, string> action);
    public OptionSet Add(string prototype, string description, OptionAction`2<string, string> action);
    public OptionSet Add(string prototype, Action`1<T> action);
    public OptionSet Add(string prototype, string description, Action`1<T> action);
    public OptionSet Add(string prototype, OptionAction`2<TKey, TValue> action);
    public OptionSet Add(string prototype, string description, OptionAction`2<TKey, TValue> action);
    protected virtual OptionContext CreateOptionContext();
    public List`1<string> Parse(IEnumerable`1<string> arguments);
    private static bool Unprocessed(ICollection`1<string> extra, Option def, OptionContext c, string argument);
    protected bool GetOptionParts(string argument, String& flag, String& name, String& sep, String& value);
    protected virtual bool Parse(string argument, OptionContext c);
    private void ParseValue(string option, OptionContext c);
    private bool ParseBool(string option, string n, OptionContext c);
    private bool ParseBundledValue(string f, string n, OptionContext c);
    private static void Invoke(OptionContext c, string name, string value, Option option);
    public void WriteOptionDescriptions(TextWriter o);
    private bool WriteOptionPrototype(TextWriter o, Option p, Int32& written);
    private static int GetNextOptionIndex(String[] names, int i);
    private static void Write(TextWriter o, Int32& n, string s);
    private static string GetArgumentName(int index, int maxIndex, string description);
    private static string GetDescription(string description);
    [IteratorStateMachineAttribute("NUnit.Options.OptionSet/<GetLines>d__36")]
private static IEnumerable`1<string> GetLines(string description);
    private static bool IsEolChar(char c);
    private static int GetLineEnd(int start, int length, string description);
}
[DefaultMemberAttribute("Item")]
public class NUnit.Options.OptionValueCollection : object {
    private List`1<string> _values;
    private OptionContext _c;
    private bool System.Collections.ICollection.IsSynchronized { get; }
    private object System.Collections.ICollection.SyncRoot { get; }
    public int Count { get; }
    public bool IsReadOnly { get; }
    private bool System.Collections.IList.IsFixedSize { get; }
    private object System.Collections.IList.Item { get; private set; }
    public string Item { get; public set; }
    internal OptionValueCollection(OptionContext c);
    private sealed virtual override void System.Collections.ICollection.CopyTo(Array array, int index);
    private sealed virtual override bool System.Collections.ICollection.get_IsSynchronized();
    private sealed virtual override object System.Collections.ICollection.get_SyncRoot();
    public sealed virtual void Add(string item);
    public sealed virtual void Clear();
    public sealed virtual bool Contains(string item);
    public sealed virtual void CopyTo(String[] array, int arrayIndex);
    public sealed virtual bool Remove(string item);
    public sealed virtual int get_Count();
    public sealed virtual bool get_IsReadOnly();
    private sealed virtual override IEnumerator System.Collections.IEnumerable.GetEnumerator();
    public sealed virtual IEnumerator`1<string> GetEnumerator();
    private sealed virtual override int System.Collections.IList.Add(object value);
    private sealed virtual override bool System.Collections.IList.Contains(object value);
    private sealed virtual override int System.Collections.IList.IndexOf(object value);
    private sealed virtual override void System.Collections.IList.Insert(int index, object value);
    private sealed virtual override void System.Collections.IList.Remove(object value);
    private sealed virtual override void System.Collections.IList.RemoveAt(int index);
    private sealed virtual override bool System.Collections.IList.get_IsFixedSize();
    private sealed virtual override object System.Collections.IList.get_Item(int index);
    private sealed virtual override void System.Collections.IList.set_Item(int index, object value);
    public sealed virtual int IndexOf(string item);
    public sealed virtual void Insert(int index, string item);
    public sealed virtual void RemoveAt(int index);
    private void AssertValid(int index);
    public sealed virtual string get_Item(int index);
    public sealed virtual void set_Item(int index, string value);
    public List`1<string> ToList();
    public String[] ToArray();
    public virtual string ToString();
}
public enum NUnit.Options.OptionValueType : Enum {
    public int value__;
    public static OptionValueType None;
    public static OptionValueType Optional;
    public static OptionValueType Required;
}
public class NUnitLite.AutoRun : object {
    private Assembly _testAssembly;
    public AutoRun(Assembly testAssembly);
    public int Execute(String[] args);
    public int Execute(String[] args, ExtendedTextWriter writer, TextReader reader);
}
public class NUnitLite.NUnit2XmlOutputWriter : OutputWriter {
    private XmlWriter _xmlWriter;
    public virtual void WriteTestFile(ITest test, TextWriter writer);
    public virtual void WriteResultFile(ITestResult result, TextWriter writer, IDictionary`2<string, object> runSettings, TestFilter filter);
    private void WriteXmlOutput(ITestResult result, XmlWriter xmlWriter);
    private void InitializeXmlFile(ITestResult result);
    private void WriteCultureInfo();
    private void WriteEnvironment();
    private void WriteResultElement(ITestResult result);
    private void TerminateXmlFile();
    private void StartTestElement(ITestResult result);
    private string TranslateResult(ResultState resultState);
    private void WriteCategories(ITestResult result);
    private void WriteProperties(ITestResult result);
    private void WriteReasonElement(string message);
    private void WriteFailureElement(string message, string stackTrace);
    private void WriteChildResults(ITestResult result);
    private void WriteCData(string text);
}
public class NUnitLite.NUnit3XmlOutputWriter : OutputWriter {
    public virtual void WriteTestFile(ITest test, TextWriter writer);
    public virtual void WriteResultFile(ITestResult result, TextWriter writer, IDictionary`2<string, object> runSettings, TestFilter filter);
    private void WriteXmlResultOutput(ITestResult result, XmlWriter xmlWriter, IDictionary`2<string, object> runSettings, TestFilter filter);
    private TNode MakeTestRunElement(ITestResult result);
    private static TNode MakeCommandLineElement();
    private static TNode MakeTestFilterElement(TestFilter filter);
}
public class NUnitLite.NUnitLiteOptions : CommandLineOptions {
    public NUnitLiteOptions(String[] args);
    public NUnitLiteOptions(bool requireInputFile, String[] args);
    internal NUnitLiteOptions(IDefaultOptionsProvider provider, String[] args);
}
public class NUnitLite.OutputManager : object {
    private string _workDirectory;
    public OutputManager(string workDirectory);
    public void WriteResultFile(ITestResult result, OutputSpecification spec, IDictionary`2<string, object> runSettings, TestFilter filter);
    public void WriteTestFile(ITest test, OutputSpecification spec);
}
public abstract class NUnitLite.OutputWriter : object {
    public void WriteResultFile(ITestResult result, string outputPath, IDictionary`2<string, object> runSettings, TestFilter filter);
    public void WriteTestFile(ITest test, string outputPath);
    public abstract virtual void WriteResultFile(ITestResult result, TextWriter writer, IDictionary`2<string, object> runSettings, TestFilter filter);
    public abstract virtual void WriteTestFile(ITest test, TextWriter writer);
}
public class NUnitLite.ResultSummary : object {
    [CompilerGeneratedAttribute]
private int <TestCount>k__BackingField;
    [CompilerGeneratedAttribute]
private int <PassCount>k__BackingField;
    [CompilerGeneratedAttribute]
private int <FailureCount>k__BackingField;
    [CompilerGeneratedAttribute]
private int <WarningCount>k__BackingField;
    [CompilerGeneratedAttribute]
private int <ErrorCount>k__BackingField;
    [CompilerGeneratedAttribute]
private int <InconclusiveCount>k__BackingField;
    [CompilerGeneratedAttribute]
private int <InvalidCount>k__BackingField;
    [CompilerGeneratedAttribute]
private int <SkipCount>k__BackingField;
    [CompilerGeneratedAttribute]
private int <IgnoreCount>k__BackingField;
    [CompilerGeneratedAttribute]
private int <ExplicitCount>k__BackingField;
    [CompilerGeneratedAttribute]
private int <InvalidTestFixtures>k__BackingField;
    [CompilerGeneratedAttribute]
private ResultState <ResultState>k__BackingField;
    [CompilerGeneratedAttribute]
private DateTime <StartTime>k__BackingField;
    [CompilerGeneratedAttribute]
private DateTime <EndTime>k__BackingField;
    [CompilerGeneratedAttribute]
private double <Duration>k__BackingField;
    public int TestCount { get; private set; }
    public int RunCount { get; }
    public int NotRunCount { get; }
    public int FailedCount { get; }
    public int TotalSkipCount { get; }
    public int PassCount { get; private set; }
    public int FailureCount { get; private set; }
    public int WarningCount { get; private set; }
    public int ErrorCount { get; private set; }
    public int InconclusiveCount { get; private set; }
    public int InvalidCount { get; private set; }
    public int SkipCount { get; private set; }
    public int IgnoreCount { get; private set; }
    public int ExplicitCount { get; private set; }
    public int InvalidTestFixtures { get; private set; }
    public ResultState ResultState { get; }
    public DateTime StartTime { get; }
    public DateTime EndTime { get; }
    public double Duration { get; }
    public ResultSummary(ITestResult result);
    [CompilerGeneratedAttribute]
public int get_TestCount();
    [CompilerGeneratedAttribute]
private void set_TestCount(int value);
    public int get_RunCount();
    public int get_NotRunCount();
    public int get_FailedCount();
    public int get_TotalSkipCount();
    [CompilerGeneratedAttribute]
public int get_PassCount();
    [CompilerGeneratedAttribute]
private void set_PassCount(int value);
    [CompilerGeneratedAttribute]
public int get_FailureCount();
    [CompilerGeneratedAttribute]
private void set_FailureCount(int value);
    [CompilerGeneratedAttribute]
public int get_WarningCount();
    [CompilerGeneratedAttribute]
private void set_WarningCount(int value);
    [CompilerGeneratedAttribute]
public int get_ErrorCount();
    [CompilerGeneratedAttribute]
private void set_ErrorCount(int value);
    [CompilerGeneratedAttribute]
public int get_InconclusiveCount();
    [CompilerGeneratedAttribute]
private void set_InconclusiveCount(int value);
    [CompilerGeneratedAttribute]
public int get_InvalidCount();
    [CompilerGeneratedAttribute]
private void set_InvalidCount(int value);
    [CompilerGeneratedAttribute]
public int get_SkipCount();
    [CompilerGeneratedAttribute]
private void set_SkipCount(int value);
    [CompilerGeneratedAttribute]
public int get_IgnoreCount();
    [CompilerGeneratedAttribute]
private void set_IgnoreCount(int value);
    [CompilerGeneratedAttribute]
public int get_ExplicitCount();
    [CompilerGeneratedAttribute]
private void set_ExplicitCount(int value);
    [CompilerGeneratedAttribute]
public int get_InvalidTestFixtures();
    [CompilerGeneratedAttribute]
private void set_InvalidTestFixtures(int value);
    [CompilerGeneratedAttribute]
public ResultState get_ResultState();
    [CompilerGeneratedAttribute]
public DateTime get_StartTime();
    [CompilerGeneratedAttribute]
public DateTime get_EndTime();
    [CompilerGeneratedAttribute]
public double get_Duration();
    private void InitializeCounters();
    private void Summarize(ITestResult result);
}
public class NUnitLite.TeamCityEventListener : object {
    private TextWriter _outWriter;
    public TeamCityEventListener(TextWriter outWriter);
    public sealed virtual void TestStarted(ITest test);
    public sealed virtual void TestFinished(ITestResult result);
    public sealed virtual void TestOutput(TestOutput output);
    public sealed virtual void SendMessage(TestMessage message);
    private void TC_TestSuiteStarted(string name);
    private void TC_TestSuiteFinished(string name);
    private void TC_TestStarted(string name);
    private void TC_TestFinished(string name, double duration);
    private void TC_TestIgnored(string name, string reason);
    private void TC_TestFailed(string name, string message, string details);
    private static string Escape(string input);
}
public class NUnitLite.TestCaseOutputWriter : OutputWriter {
    public virtual void WriteTestFile(ITest test, TextWriter writer);
    public virtual void WriteResultFile(ITestResult result, TextWriter writer, IDictionary`2<string, object> runSettings, TestFilter filter);
}
public class NUnitLite.TextRunner : object {
    public static int OK;
    public static int INVALID_ARG;
    public static int FILE_NOT_FOUND;
    public static int INVALID_TEST_FIXTURE;
    public static int UNEXPECTED_ERROR;
    private Assembly _testAssembly;
    private ITestAssemblyRunner _runner;
    private NUnitLiteOptions _options;
    private ITestListener _teamCity;
    private TextUI _textUI;
    [CompilerGeneratedAttribute]
private ResultSummary <Summary>k__BackingField;
    public ResultSummary Summary { get; private set; }
    public TextRunner(Assembly testAssembly);
    [CompilerGeneratedAttribute]
public ResultSummary get_Summary();
    [CompilerGeneratedAttribute]
private void set_Summary(ResultSummary value);
    public int Execute(String[] args);
    public int Execute(ExtendedTextWriter writer, TextReader reader, String[] args);
    private int Execute();
    private void LoadTests(IDictionary`2<string, object> runSettings);
    public int RunTests(TestFilter filter, IDictionary`2<string, object> runSettings);
    public void ReportResults(ITestResult result);
    private int ExploreTests(ITestFilter filter);
    public static Dictionary`2<string, object> MakeRunSettings(NUnitLiteOptions options);
    public static TestFilter CreateTestFilter(NUnitLiteOptions options);
    private void InitializeInternalTrace();
    private string GetLogFileName();
    public sealed virtual void TestStarted(ITest test);
    public sealed virtual void TestFinished(ITestResult result);
    public sealed virtual void TestOutput(TestOutput output);
    public sealed virtual void SendMessage(TestMessage message);
}
public class NUnitLite.TextUI : object {
    [CompilerGeneratedAttribute]
private ExtendedTextWriter <Writer>k__BackingField;
    private TextReader _reader;
    private NUnitLiteOptions _options;
    private bool _displayBeforeTest;
    private bool _displayAfterTest;
    private bool _displayBeforeOutput;
    private bool _testCreatedOutput;
    private bool _needsNewLine;
    private static Char[] TRIM_CHARS;
    private int _reportIndex;
    private string _currentLabel;
    public ExtendedTextWriter Writer { get; }
    public TextUI(ExtendedTextWriter writer, TextReader reader, NUnitLiteOptions options);
    private static TextUI();
    [CompilerGeneratedAttribute]
public ExtendedTextWriter get_Writer();
    public void DisplayHeader();
    public void DisplayTestFiles(IEnumerable`1<string> testFiles);
    public void DisplayHelp();
    public void DisplayRuntimeEnvironment();
    public void DisplayDiscoveryReport(TimeStamp startTime, TimeStamp endTime);
    public void DisplayTestFilters();
    public void DisplayRunSettings();
    public void TestStarted(ITest test);
    public void TestFinished(ITestResult result);
    public void TestOutput(TestOutput output);
    public void WaitForUser(string message);
    public void DisplaySummaryReport(ResultSummary summary);
    private void WriteSummaryCount(string label, int count);
    private void WriteSummaryCount(string label, int count, ColorStyle color);
    public void DisplayErrorsFailuresAndWarningsReport(ITestResult result);
    public void DisplayNotRunReport(ITestResult result);
    public void DisplayWarning(string text);
    public void DisplayError(string text);
    public void DisplayErrors(IList`1<string> messages);
    private void DisplayErrorsFailuresAndWarnings(ITestResult result);
    private void DisplayNotRunResults(ITestResult result);
    private void DisplayTestResult(ITestResult result);
    private void DisplayTestResult(ColorStyle style, string prefix, string status, string fullName, string message, string stackTrace);
    private static ColorStyle GetColorStyle(ResultState resultState);
    private static string GetResultStatus(ResultState resultState);
    private void WriteHeader(string text);
    private void WriteSubHeader(string text);
    private void WriteSectionHeader(string text);
    private void WriteHelpLine(string text);
    private void WriteLabelLine(string label);
    private void WriteLabelLineAfterTest(string label, ResultState resultState);
    private void WriteNewLineIfNeeded();
    private void WriteOutput(string text);
    private void WriteOutput(ColorStyle color, string text);
    private static ColorStyle GetColorForResultStatus(string status);
}
public class NUnitLite.TimeStamp : object {
    [CompilerGeneratedAttribute]
private DateTime <DateTime>k__BackingField;
    [CompilerGeneratedAttribute]
private long <Ticks>k__BackingField;
    public DateTime DateTime { get; }
    public long Ticks { get; }
    [CompilerGeneratedAttribute]
public DateTime get_DateTime();
    [CompilerGeneratedAttribute]
public long get_Ticks();
    public static double TicksToSeconds(long ticks);
}
[ExcludeFromCodeCoverageAttribute]
[DebuggerNonUserCodeAttribute]
internal static class System.Runtime.CompilerServices.IsExternalInit : object {
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
[AttributeUsageAttribute("27524")]
internal class System.Runtime.CompilerServices.NullableAttribute : Attribute {
    public Byte[] NullableFlags;
    public NullableAttribute(byte );
    public NullableAttribute(Byte[] );
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
[AttributeUsageAttribute("5196")]
internal class System.Runtime.CompilerServices.NullableContextAttribute : Attribute {
    public byte Flag;
    public NullableContextAttribute(byte );
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
[AttributeUsageAttribute("2")]
internal class System.Runtime.CompilerServices.RefSafetyRulesAttribute : Attribute {
    public int Version;
    public RefSafetyRulesAttribute(int );
}
