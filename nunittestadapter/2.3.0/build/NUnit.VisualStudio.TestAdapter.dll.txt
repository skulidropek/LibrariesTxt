public class NUnit.VisualStudio.TestAdapter.AssemblyRunner : object {
    private TestRunner runner;
    private TestLogger logger;
    private string assemblyName;
    private TestFilter nunitFilter;
    private List`1<TestCase> loadedTestCases;
    private TestConverter testConverter;
    [CompilerGeneratedAttribute]
private INUnitTestAdapter <NUnitTestAdapter>k__BackingField;
    private ITfsTestFilter tfsFilter;
    private INUnitTestAdapter NUnitTestAdapter { get; private set; }
    public TestFilter NUnitFilter { get; }
    public IList`1<TestCase> LoadedTestCases { get; }
    public TestConverter TestConverter { get; }
    public AssemblyRunner(TestLogger logger, string assemblyName, INUnitTestAdapter nunitTestAdapter, bool collectSourceInformation);
    public AssemblyRunner(TestLogger logger, string assemblyName, IEnumerable`1<TestCase> selectedTestCases, INUnitTestAdapter nunitTestAdapter, bool collectSourceInformation);
    public AssemblyRunner(TestLogger logger, string assemblyName, ITfsTestFilter tfsFilter, INUnitTestAdapter nunitTestAdapter, bool collectSourceInformation);
    [CompilerGeneratedAttribute]
private INUnitTestAdapter get_NUnitTestAdapter();
    [CompilerGeneratedAttribute]
private void set_NUnitTestAdapter(INUnitTestAdapter value);
    private static SimpleNameFilter MakeTestFilter(IEnumerable`1<TestCase> ptestCases);
    public TestFilter get_NUnitFilter();
    public IList`1<TestCase> get_LoadedTestCases();
    public TestConverter get_TestConverter();
    public void RunAssembly(IFrameworkHandle testLog);
    public void CancelRun();
    private bool TryLoadAssembly();
    public void AddTestCases(ITest test);
}
internal class NUnit.VisualStudio.TestAdapter.Internal.StackFrame : object {
    private string fileName;
    private int lineNumber;
    private string methodName;
    public string FileName { get; }
    public int LineNumber { get; }
    public string MethodName { get; }
    public StackFrame(string methodName);
    public StackFrame(string methodName, string fileName, int lineNumber);
    public string get_FileName();
    public int get_LineNumber();
    public string get_MethodName();
}
internal class NUnit.VisualStudio.TestAdapter.Internal.StackFrameParser : object {
    private Regex frameWithFileInfoRegex;
    private Regex frameWithoutFileInfoRegex;
    private StackFrameParser(string wordAtFormat, string wordsInLineFormat);
    public static StackFrameParser CreateStackFrameParser();
    public StackFrame GetStackFrame(string line);
}
internal class NUnit.VisualStudio.TestAdapter.Internal.Stacktrace : object {
    private List`1<StackFrame> stackFrames;
    public ReadOnlyCollection`1<StackFrame> StackFrames { get; }
    public Stacktrace(string stackTrace);
    public ReadOnlyCollection`1<StackFrame> get_StackFrames();
    public StackFrame GetTopStackFrame();
}
public interface NUnit.VisualStudio.TestAdapter.INUnitTestAdapter {
    public abstract virtual TestPackage CreateTestPackage(string sourceAssembly);
}
public interface NUnit.VisualStudio.TestAdapter.ITfsTestFilter {
    public ITestCaseFilterExpression TfsTestCaseFilterExpression { get; }
    public bool HasTfsFilterValue { get; }
    public abstract virtual ITestCaseFilterExpression get_TfsTestCaseFilterExpression();
    public abstract virtual bool get_HasTfsFilterValue();
    public abstract virtual IEnumerable`1<TestCase> CheckFilter(IEnumerable`1<TestCase> tests);
}
public class NUnit.VisualStudio.TestAdapter.NavigationData : object {
    public static NavigationData Invalid;
    [CompilerGeneratedAttribute]
private string <FilePath>k__BackingField;
    [CompilerGeneratedAttribute]
private int <LineNumber>k__BackingField;
    public string FilePath { get; private set; }
    public int LineNumber { get; private set; }
    public bool IsValid { get; }
    public NavigationData(string filePath, int lineNumber);
    private static NavigationData();
    [CompilerGeneratedAttribute]
public string get_FilePath();
    [CompilerGeneratedAttribute]
private void set_FilePath(string value);
    [CompilerGeneratedAttribute]
public int get_LineNumber();
    [CompilerGeneratedAttribute]
private void set_LineNumber(int value);
    public bool get_IsValid();
}
public class NUnit.VisualStudio.TestAdapter.NavigationDataProvider : object {
    private string _assemblyPath;
    private IDictionary`2<string, TypeDefinition> _typeDefs;
    public NavigationDataProvider(string assemblyPath);
    public NavigationData GetNavigationData(string className, string methodName);
    private static bool DoesPdbFileExist(string filepath);
    private static IDictionary`2<string, TypeDefinition> CacheTypes(string assemblyPath);
    private IEnumerable`1<MethodDefinition> GetMethods(string className);
    private static SequencePoint FirstOrDefaultSequencePoint(MethodDefinition testMethod);
    private static bool TryGetAsyncStateMachineAttribute(MethodDefinition method, CustomAttribute& attribute);
    private static MethodDefinition GetStateMachineMoveNextMethod(CustomAttribute asyncStateMachineAttribute);
    private static SequencePoint FirstOrDefaultUnhiddenSequencePoint(MethodBody body);
    private static string StandardizeTypeName(string className);
}
public class NUnit.VisualStudio.TestAdapter.NTrait : object {
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Value>k__BackingField;
    public string Name { get; private set; }
    public string Value { get; private set; }
    public NTrait(string name, string value);
    [CompilerGeneratedAttribute]
public string get_Name();
    [CompilerGeneratedAttribute]
private void set_Name(string value);
    [CompilerGeneratedAttribute]
public string get_Value();
    [CompilerGeneratedAttribute]
private void set_Value(string value);
}
public class NUnit.VisualStudio.TestAdapter.NTraitNameComparer : object {
    public sealed virtual bool Equals(NTrait n, NTrait y);
    public sealed virtual int GetHashCode(NTrait obj);
}
public class NUnit.VisualStudio.TestAdapter.NUnitEventListener : MarshalByRefObject {
    private ITestExecutionRecorder testLog;
    private TestConverter testConverter;
    [CompilerGeneratedAttribute]
private string <Output>k__BackingField;
    private bool disposed;
    public string Output { get; private set; }
    public NUnitEventListener(ITestExecutionRecorder testLog, TestConverter testConverter);
    public virtual object InitializeLifetimeService();
    public sealed virtual void RunStarted(string name, int testCount);
    public sealed virtual void RunFinished(Exception exception);
    public sealed virtual void RunFinished(TestResult result);
    [CompilerGeneratedAttribute]
public string get_Output();
    [CompilerGeneratedAttribute]
private void set_Output(string value);
    public sealed virtual void SuiteStarted(TestName testName);
    public sealed virtual void SuiteFinished(TestResult result);
    public sealed virtual void TestStarted(TestName testName);
    public sealed virtual void TestFinished(TestResult result);
    public sealed virtual void TestOutput(TestOutput testOutput);
    public sealed virtual void UnhandledException(Exception exception);
    public sealed virtual void Dispose();
    protected virtual void Dispose(bool disposing);
    protected virtual override void Finalize();
}
public abstract class NUnit.VisualStudio.TestAdapter.NUnitTestAdapter : object {
    protected TestLogger TestLog;
    private string adapterVersion;
    [CompilerGeneratedAttribute]
private bool <UseVsKeepEngineRunning>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <ShadowCopy>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <CollectSourceInformation>k__BackingField;
    [CompilerGeneratedAttribute]
private int <Verbosity>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <RegistryFailure>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ErrorMsg>k__BackingField;
    private static string Name;
    protected bool UseVsKeepEngineRunning { get; private set; }
    public bool ShadowCopy { get; private set; }
    public bool CollectSourceInformation { get; private set; }
    public int Verbosity { get; private set; }
    protected bool RegistryFailure { get; protected set; }
    protected string ErrorMsg { get; protected set; }
    [CompilerGeneratedAttribute]
protected bool get_UseVsKeepEngineRunning();
    [CompilerGeneratedAttribute]
private void set_UseVsKeepEngineRunning(bool value);
    [CompilerGeneratedAttribute]
public bool get_ShadowCopy();
    [CompilerGeneratedAttribute]
private void set_ShadowCopy(bool value);
    [CompilerGeneratedAttribute]
public bool get_CollectSourceInformation();
    [CompilerGeneratedAttribute]
private void set_CollectSourceInformation(bool value);
    [CompilerGeneratedAttribute]
public int get_Verbosity();
    [CompilerGeneratedAttribute]
private void set_Verbosity(int value);
    [CompilerGeneratedAttribute]
protected bool get_RegistryFailure();
    [CompilerGeneratedAttribute]
protected void set_RegistryFailure(bool value);
    [CompilerGeneratedAttribute]
protected string get_ErrorMsg();
    [CompilerGeneratedAttribute]
protected void set_ErrorMsg(string value);
    protected void Initialize(IDiscoveryContext context);
    private string GetInnerText(XmlNode startNode, string xpath, String[] validValues);
    private bool GetInnerTextAsBool(XmlNode startNode, string xpath, bool defaultValue);
    protected void Info(string method, string function);
    protected void Debug(string method, string function);
    protected static void CleanUpRegisteredChannels();
    public sealed virtual TestPackage CreateTestPackage(string sourceAssembly);
}
[FileExtensionAttribute(".dll")]
[FileExtensionAttribute(".exe")]
[DefaultExecutorUriAttribute("executor://NUnitTestExecutor")]
public class NUnit.VisualStudio.TestAdapter.NUnitTestDiscoverer : NUnitTestAdapter {
    public sealed virtual void DiscoverTests(IEnumerable`1<string> sources, IDiscoveryContext discoveryContext, IMessageLogger messageLogger, ITestCaseDiscoverySink discoverySink);
    private int ProcessTestCases(ITest test, ITestCaseDiscoverySink discoverySink, TestConverter testConverter);
}
[ExtensionUriAttribute("executor://NUnitTestExecutor")]
public class NUnit.VisualStudio.TestAdapter.NUnitTestExecutor : NUnitTestAdapter {
    public static string ExecutorUri;
    private AssemblyRunner currentRunner;
    public sealed virtual void RunTests(IEnumerable`1<string> sources, IRunContext runContext, IFrameworkHandle frameworkHandle);
    public sealed virtual void RunTests(IEnumerable`1<TestCase> tests, IRunContext runContext, IFrameworkHandle frameworkHandle);
    private sealed virtual override void Microsoft.VisualStudio.TestPlatform.ObjectModel.Adapter.ITestExecutor.Cancel();
}
public abstract class NUnit.VisualStudio.TestAdapter.RegistryBase : object {
    [CompilerGeneratedAttribute]
private string <SubKeyName>k__BackingField;
    [CompilerGeneratedAttribute]
private string <BaseKey>k__BackingField;
    private string SubKeyName { get; private set; }
    protected string BaseKey { get; private set; }
    protected RegistryBase(string basekey, string subkeyname);
    [CompilerGeneratedAttribute]
private string get_SubKeyName();
    [CompilerGeneratedAttribute]
private void set_SubKeyName(string value);
    [CompilerGeneratedAttribute]
protected string get_BaseKey();
    [CompilerGeneratedAttribute]
private void set_BaseKey(string value);
    public T Read(string property);
    public bool Exist(string property);
    public void Write(string property, T val);
}
public class NUnit.VisualStudio.TestAdapter.RegistryCurrentUser : RegistryBase {
    private static RegistryCurrentUser currentUser;
    public RegistryCurrentUser(string subkeyname);
    public static RegistryCurrentUser OpenRegistryCurrentUser(string key);
    public void SetCurrentUser(RegistryCurrentUser user);
}
public static class NUnit.VisualStudio.TestAdapter.StackTraceFilter : object {
    public static string Filter(string stack);
    private static bool FilterLine(string line);
}
public class NUnit.VisualStudio.TestAdapter.TestConverter : object {
    private TestLogger _logger;
    private Dictionary`2<string, TestCase> _vsTestCaseMap;
    private string _sourceAssembly;
    private NavigationDataProvider _navigationDataProvider;
    private bool _collectSourceInformation;
    private string exeName;
    private bool RunningUnderIDE { get; }
    public TestConverter(TestLogger logger, string sourceAssembly, bool collectSourceInformation);
    public TestCase ConvertTestCase(ITest test);
    public TestCase GetCachedTestCase(string key);
    public TestResult ConvertTestResult(TestResult result);
    private TestCase MakeTestCaseFromNUnitTest(ITest nunitTest);
    public static TestOutcome ResultStateToTestOutcome(ResultState resultState);
    private string GetErrorMessage(TestResult result);
    private bool get_RunningUnderIDE();
}
public class NUnit.VisualStudio.TestAdapter.TestLogger : object {
    private IMessageLogger messageLogger;
    [CompilerGeneratedAttribute]
private int <Verbosity>k__BackingField;
    private int Verbosity { get; private set; }
    public TestLogger(int verbosity);
    [CompilerGeneratedAttribute]
private int get_Verbosity();
    [CompilerGeneratedAttribute]
private void set_Verbosity(int value);
    public void Initialize(IMessageLogger messageLoggerParam);
    public void AssemblyNotSupportedWarning(string sourceAssembly);
    public void DependentAssemblyNotFoundWarning(string dependentAssembly, string sourceAssembly);
    public void UnsupportedFrameworkWarning(string assembly);
    public void LoadingAssemblyFailedWarning(string dependentAssembly, string sourceAssembly);
    public void NoNUnit2TestsFoundIn(string sourceAssembly);
    public void SendErrorMessage(string message);
    public void SendErrorMessage(string message, Exception ex);
    public void SendWarningMessage(string message);
    public void SendWarningMessage(string message, Exception ex);
    public void SendInformationalMessage(string message);
    public void SendDebugMessage(string message);
    public sealed virtual void SendMessage(TestMessageLevel testMessageLevel, string message);
}
internal class NUnit.VisualStudio.TestAdapter.TestRunFilter : TestFilter {
    private List`1<string> map;
    public TestRunFilter(List`1<string> map);
    public virtual bool Match(ITest test);
}
public class NUnit.VisualStudio.TestAdapter.TfsTestFilter : object {
    private static Dictionary`2<string, TestProperty> SupportedPropertiesCache;
    private static Dictionary`2<string, NTrait> SupportedTraitCache;
    private static Dictionary`2<NTrait, TestProperty> TraitPropertyMap;
    private static List`1<string> SupportedProperties;
    private IRunContext runContext;
    private ITestCaseFilterExpression testCaseFilterExpression;
    private static Func`3<TestCase, string, String[]> traitContains;
    public ITestCaseFilterExpression TfsTestCaseFilterExpression { get; }
    public bool HasTfsFilterValue { get; }
    private static TfsTestFilter();
    public TfsTestFilter(IRunContext runContext);
    public sealed virtual ITestCaseFilterExpression get_TfsTestCaseFilterExpression();
    public sealed virtual bool get_HasTfsFilterValue();
    public sealed virtual IEnumerable`1<TestCase> CheckFilter(IEnumerable`1<TestCase> tests);
    public static object PropertyValueProvider(TestCase currentTest, string propertyName);
    private static Func`3<TestCase, string, String[]> TraitContains();
    public static TestProperty LocalPropertyProvider(string propertyName);
    public static TestProperty PropertyProvider(string propertyName);
    public static NTrait TraitProvider(string traitName);
    [CompilerGeneratedAttribute]
private bool <CheckFilter>b__12_0(TestCase underTest);
}
[ExtensionAttribute]
public static class NUnit.VisualStudio.TestAdapter.TraitsFeature : object {
    private static PropertyInfo TraitsProperty;
    private static MethodInfo TraitsCollectionAdd;
    private static PropertyInfo NameProperty;
    private static PropertyInfo ValueProperty;
    [CompilerGeneratedAttribute]
private static bool <IsSupported>k__BackingField;
    public static bool IsSupported { get; private set; }
    private static TraitsFeature();
    [CompilerGeneratedAttribute]
public static bool get_IsSupported();
    [CompilerGeneratedAttribute]
private static void set_IsSupported(bool value);
    [ExtensionAttribute]
public static void AddTrait(TestCase testCase, string name, string value);
    [ExtensionAttribute]
public static void AddTraitsFromNUnitTest(TestCase testCase, ITest nunitTest);
    private static void AddTraitsFromNUnitTest(ITest test, object traitsCollection);
    [ExtensionAttribute]
public static IEnumerable`1<NTrait> GetTraits(TestCase testCase);
}
