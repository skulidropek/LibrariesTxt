[CompilerGeneratedAttribute]
[EmbeddedAttribute]
internal class Microsoft.CodeAnalysis.EmbeddedAttribute : Attribute {
}
public interface Spekt.TestLogger.Core.IInputSanitizer {
    public abstract virtual string Sanitize(string input);
}
public class Spekt.TestLogger.Core.InputSanitizerXml : object {
    private static Regex InvalidXmlChar;
    private static InputSanitizerXml();
    public sealed virtual string Sanitize(string input);
    [CompilerGeneratedAttribute]
internal static string <Sanitize>g__ReplaceInvalidCharacterWithUniCodeEscapeSequence|1_0(Match match);
}
public interface Spekt.TestLogger.Core.ITestResultSerializer {
    public IInputSanitizer InputSanitizer { get; }
    public abstract virtual IInputSanitizer get_InputSanitizer();
    public abstract virtual string Serialize(LoggerConfiguration loggerConfiguration, TestRunConfiguration runConfiguration, List`1<TestResultInfo> results, List`1<TestMessageInfo> messages);
}
public interface Spekt.TestLogger.Core.ITestResultStore {
    public abstract virtual void Add(TestResultInfo result);
    public abstract virtual void Add(TestMessageInfo message);
    public abstract virtual void Pop(List`1& results, List`1& messages);
}
public interface Spekt.TestLogger.Core.ITestRun {
    public LoggerConfiguration LoggerConfiguration { get; }
    public TestRunConfiguration RunConfiguration { get; }
    public ITestAdapterFactory AdapterFactory { get; }
    public ITestResultStore Store { get; }
    public ITestResultSerializer Serializer { get; }
    public IConsoleOutput ConsoleOutput { get; }
    public IFileSystem FileSystem { get; }
    public abstract virtual LoggerConfiguration get_LoggerConfiguration();
    public abstract virtual TestRunConfiguration get_RunConfiguration();
    public abstract virtual ITestAdapterFactory get_AdapterFactory();
    public abstract virtual ITestResultStore get_Store();
    public abstract virtual ITestResultSerializer get_Serializer();
    public abstract virtual IConsoleOutput get_ConsoleOutput();
    public abstract virtual IFileSystem get_FileSystem();
}
public interface Spekt.TestLogger.Core.ITestRunBuilder {
    public abstract virtual ITestRunBuilder WithLoggerConfiguration(LoggerConfiguration configuration);
    public abstract virtual ITestRunBuilder WithStore(ITestResultStore store);
    public abstract virtual ITestRunBuilder WithSerializer(ITestResultSerializer serializer);
    public abstract virtual ITestRunBuilder Subscribe(TestLoggerEvents loggerEvents);
    public abstract virtual ITestRunBuilder WithFileSystem(IFileSystem fileSystem);
    public abstract virtual ITestRunBuilder WithConsoleOutput(IConsoleOutput consoleOutput);
    public abstract virtual ITestRun Build();
}
public class Spekt.TestLogger.Core.LegacyTestCaseNameParser : object {
    public static string TestCaseParserUnknownNamespace;
    public static string TestCaseParserUnknownType;
    public static string TestCaseParserError;
    private bool parserErrorReported;
    public ParsedName Parse(string fullyQualifiedName);
}
public class Spekt.TestLogger.Core.LoggerConfiguration : object {
    public static string LogFilePathKey;
    public static string LogFileNameKey;
    public static string ParserKey;
    private static string AssemblyToken;
    private static string FrameworkToken;
    [CompilerGeneratedAttribute]
private Dictionary`2<string, string> <Values>k__BackingField;
    public string LogFilePath { get; }
    public Dictionary`2<string, string> Values { get; }
    public LoggerConfiguration(Dictionary`2<string, string> config);
    public string get_LogFilePath();
    [CompilerGeneratedAttribute]
public Dictionary`2<string, string> get_Values();
    public string GetFormattedLogFilePath(TestRunConfiguration runConfiguration);
}
public class Spekt.TestLogger.Core.ParsedName : object {
    [CompilerGeneratedAttribute]
private string <Namespace>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Type>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Method>k__BackingField;
    public string Namespace { get; }
    public string Type { get; }
    public string Method { get; }
    public ParsedName(string namespaceName, string typeName, string methodName);
    [CompilerGeneratedAttribute]
public string get_Namespace();
    [CompilerGeneratedAttribute]
public string get_Type();
    [CompilerGeneratedAttribute]
public string get_Method();
}
public class Spekt.TestLogger.Core.TestAttachmentInfo : object {
    [CompilerGeneratedAttribute]
private string <FilePath>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Description>k__BackingField;
    public string FilePath { get; }
    public string Description { get; }
    public TestAttachmentInfo(string filePath, string description);
    [CompilerGeneratedAttribute]
public string get_FilePath();
    [CompilerGeneratedAttribute]
public string get_Description();
}
public class Spekt.TestLogger.Core.TestCaseNameParser : object {
    public static string TestCaseParserUnknownNamespace;
    public static string TestCaseParserUnknownType;
    public static string TestCaseParserError;
    private static RegexOptions RegexOptions;
    private static Regex MethodRegex;
    private static Regex ClassDataRegex;
    private bool parserErrorReported;
    private static TestCaseNameParser();
    public ParsedName Parse(string fullyQualifiedName);
}
public class Spekt.TestLogger.Core.TestMessageInfo : object {
    [CompilerGeneratedAttribute]
private TestMessageLevel <Level>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Message>k__BackingField;
    public TestMessageLevel Level { get; }
    public string Message { get; }
    public TestMessageInfo(TestMessageLevel level, string message);
    [CompilerGeneratedAttribute]
public TestMessageLevel get_Level();
    [CompilerGeneratedAttribute]
public string get_Message();
}
public class Spekt.TestLogger.Core.TestResultInfo : object {
    [CompilerGeneratedAttribute]
private string <Namespace>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Type>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Method>k__BackingField;
    [CompilerGeneratedAttribute]
private string <DisplayName>k__BackingField;
    [CompilerGeneratedAttribute]
private TestOutcome <Outcome>k__BackingField;
    [CompilerGeneratedAttribute]
private string <AssemblyPath>k__BackingField;
    [CompilerGeneratedAttribute]
private string <CodeFilePath>k__BackingField;
    [CompilerGeneratedAttribute]
private int <LineNumber>k__BackingField;
    [CompilerGeneratedAttribute]
private DateTime <StartTime>k__BackingField;
    [CompilerGeneratedAttribute]
private DateTime <EndTime>k__BackingField;
    [CompilerGeneratedAttribute]
private TimeSpan <Duration>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ErrorMessage>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ErrorStackTrace>k__BackingField;
    [CompilerGeneratedAttribute]
private List`1<TestResultMessage> <Messages>k__BackingField;
    [CompilerGeneratedAttribute]
private List`1<TestAttachmentInfo> <Attachments>k__BackingField;
    [CompilerGeneratedAttribute]
private IReadOnlyCollection`1<Trait> <Traits>k__BackingField;
    [CompilerGeneratedAttribute]
private IReadOnlyCollection`1<KeyValuePair`2<string, object>> <Properties>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ExecutorUri>k__BackingField;
    [CompilerGeneratedAttribute]
private string <TestResultDisplayName>k__BackingField;
    [CompilerGeneratedAttribute]
private string <TestCaseDisplayName>k__BackingField;
    [CompilerGeneratedAttribute]
private string <FullyQualifiedName>k__BackingField;
    [CompilerGeneratedAttribute]
private TestCase <TestCase>k__BackingField;
    public string Namespace { get; }
    public string Type { get; }
    public string Method { get; internal set; }
    public string DisplayName { get; internal set; }
    public TestOutcome Outcome { get; public set; }
    public string AssemblyPath { get; }
    public string CodeFilePath { get; }
    public int LineNumber { get; }
    public DateTime StartTime { get; }
    public DateTime EndTime { get; }
    public TimeSpan Duration { get; }
    public string ErrorMessage { get; }
    public string ErrorStackTrace { get; }
    public List`1<TestResultMessage> Messages { get; }
    public List`1<TestAttachmentInfo> Attachments { get; }
    public IReadOnlyCollection`1<Trait> Traits { get; }
    public IReadOnlyCollection`1<KeyValuePair`2<string, object>> Properties { get; internal set; }
    public string ExecutorUri { get; }
    public string FullTypeName { get; }
    internal string TestResultDisplayName { get; }
    internal string TestCaseDisplayName { get; }
    internal string FullyQualifiedName { get; }
    internal TestCase TestCase { get; }
    public TestResultInfo(string namespace, string type, string method, string fullyQualifiedName, TestOutcome outcome, string testResultDisplayName, string testCaseDisplayName, string assemblyPath, string codeFilePath, int lineNumber, DateTime startTime, DateTime endTime, TimeSpan duration, string errorMessage, string errorStackTrace, List`1<TestResultMessage> messages, List`1<TestAttachmentInfo> attachments, IReadOnlyCollection`1<Trait> traits, string executorUri, TestCase testCase);
    [CompilerGeneratedAttribute]
public string get_Namespace();
    [CompilerGeneratedAttribute]
public string get_Type();
    [CompilerGeneratedAttribute]
public string get_Method();
    [CompilerGeneratedAttribute]
internal void set_Method(string value);
    [CompilerGeneratedAttribute]
public string get_DisplayName();
    [CompilerGeneratedAttribute]
internal void set_DisplayName(string value);
    [CompilerGeneratedAttribute]
public TestOutcome get_Outcome();
    [CompilerGeneratedAttribute]
public void set_Outcome(TestOutcome value);
    [CompilerGeneratedAttribute]
public string get_AssemblyPath();
    [CompilerGeneratedAttribute]
public string get_CodeFilePath();
    [CompilerGeneratedAttribute]
public int get_LineNumber();
    [CompilerGeneratedAttribute]
public DateTime get_StartTime();
    [CompilerGeneratedAttribute]
public DateTime get_EndTime();
    [CompilerGeneratedAttribute]
public TimeSpan get_Duration();
    [CompilerGeneratedAttribute]
public string get_ErrorMessage();
    [CompilerGeneratedAttribute]
public string get_ErrorStackTrace();
    [CompilerGeneratedAttribute]
public List`1<TestResultMessage> get_Messages();
    [CompilerGeneratedAttribute]
public List`1<TestAttachmentInfo> get_Attachments();
    [CompilerGeneratedAttribute]
public IReadOnlyCollection`1<Trait> get_Traits();
    [CompilerGeneratedAttribute]
public IReadOnlyCollection`1<KeyValuePair`2<string, object>> get_Properties();
    [CompilerGeneratedAttribute]
internal void set_Properties(IReadOnlyCollection`1<KeyValuePair`2<string, object>> value);
    [CompilerGeneratedAttribute]
public string get_ExecutorUri();
    public string get_FullTypeName();
    [CompilerGeneratedAttribute]
internal string get_TestResultDisplayName();
    [CompilerGeneratedAttribute]
internal string get_TestCaseDisplayName();
    [CompilerGeneratedAttribute]
internal string get_FullyQualifiedName();
    [CompilerGeneratedAttribute]
internal TestCase get_TestCase();
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
}
public class Spekt.TestLogger.Core.TestResultStore : object {
    private object messageLock;
    private object resultLock;
    private List`1<TestResultInfo> results;
    private List`1<TestMessageInfo> messages;
    public sealed virtual void Add(TestResultInfo result);
    public sealed virtual void Add(TestMessageInfo message);
    public sealed virtual void Pop(List`1& results, List`1& messages);
}
public class Spekt.TestLogger.Core.TestRun : object {
    [CompilerGeneratedAttribute]
private LoggerConfiguration <LoggerConfiguration>k__BackingField;
    [CompilerGeneratedAttribute]
private TestRunConfiguration <RunConfiguration>k__BackingField;
    [CompilerGeneratedAttribute]
private ITestAdapterFactory <AdapterFactory>k__BackingField;
    [CompilerGeneratedAttribute]
private ITestResultStore <Store>k__BackingField;
    [CompilerGeneratedAttribute]
private ITestResultSerializer <Serializer>k__BackingField;
    [CompilerGeneratedAttribute]
private IConsoleOutput <ConsoleOutput>k__BackingField;
    [CompilerGeneratedAttribute]
private IFileSystem <FileSystem>k__BackingField;
    public LoggerConfiguration LoggerConfiguration { get; internal set; }
    public TestRunConfiguration RunConfiguration { get; internal set; }
    public ITestAdapterFactory AdapterFactory { get; internal set; }
    public ITestResultStore Store { get; internal set; }
    public ITestResultSerializer Serializer { get; internal set; }
    public IConsoleOutput ConsoleOutput { get; internal set; }
    public IFileSystem FileSystem { get; internal set; }
    [CompilerGeneratedAttribute]
public sealed virtual LoggerConfiguration get_LoggerConfiguration();
    [CompilerGeneratedAttribute]
internal void set_LoggerConfiguration(LoggerConfiguration value);
    [CompilerGeneratedAttribute]
public sealed virtual TestRunConfiguration get_RunConfiguration();
    [CompilerGeneratedAttribute]
internal void set_RunConfiguration(TestRunConfiguration value);
    [CompilerGeneratedAttribute]
public sealed virtual ITestAdapterFactory get_AdapterFactory();
    [CompilerGeneratedAttribute]
internal void set_AdapterFactory(ITestAdapterFactory value);
    [CompilerGeneratedAttribute]
public sealed virtual ITestResultStore get_Store();
    [CompilerGeneratedAttribute]
internal void set_Store(ITestResultStore value);
    [CompilerGeneratedAttribute]
public sealed virtual ITestResultSerializer get_Serializer();
    [CompilerGeneratedAttribute]
internal void set_Serializer(ITestResultSerializer value);
    [CompilerGeneratedAttribute]
public sealed virtual IConsoleOutput get_ConsoleOutput();
    [CompilerGeneratedAttribute]
internal void set_ConsoleOutput(IConsoleOutput value);
    [CompilerGeneratedAttribute]
public sealed virtual IFileSystem get_FileSystem();
    [CompilerGeneratedAttribute]
internal void set_FileSystem(IFileSystem value);
}
public class Spekt.TestLogger.Core.TestRunBuilder : object {
    private TestRun testRun;
    public sealed virtual ITestRunBuilder WithLoggerConfiguration(LoggerConfiguration configuration);
    public sealed virtual ITestRunBuilder WithStore(ITestResultStore store);
    public sealed virtual ITestRunBuilder WithSerializer(ITestResultSerializer serializer);
    public sealed virtual ITestRunBuilder Subscribe(TestLoggerEvents loggerEvents);
    public sealed virtual ITestRunBuilder WithFileSystem(IFileSystem fileSystem);
    public sealed virtual ITestRunBuilder WithConsoleOutput(IConsoleOutput consoleOutput);
    public sealed virtual ITestRun Build();
    private void TraceAndThrow(Action action, string source);
    [CompilerGeneratedAttribute]
private void <Subscribe>b__5_0(object _, TestRunStartEventArgs eventArgs);
    [CompilerGeneratedAttribute]
private void <Subscribe>b__5_1(object _, TestRunMessageEventArgs eventArgs);
    [CompilerGeneratedAttribute]
private void <Subscribe>b__5_2(object _, TestResultEventArgs eventArgs);
    [CompilerGeneratedAttribute]
private void <Subscribe>b__5_3(object _, TestRunCompleteEventArgs eventArgs);
}
[ExtensionAttribute]
public static class Spekt.TestLogger.Core.TestRunCompleteWorkflow : object {
    [ExtensionAttribute]
public static void Complete(ITestRun testRun, TestRunCompleteEventArgs completeEvent);
    private static void CreateResultsDirectory(IFileSystem fs, string path);
}
public class Spekt.TestLogger.Core.TestRunConfiguration : object {
    [CompilerGeneratedAttribute]
private string <AssemblyPath>k__BackingField;
    [CompilerGeneratedAttribute]
private string <TargetFramework>k__BackingField;
    [CompilerGeneratedAttribute]
private DateTime <StartTime>k__BackingField;
    [CompilerGeneratedAttribute]
private DateTime <EndTime>k__BackingField;
    [CompilerGeneratedAttribute]
private IReadOnlyCollection`1<TestAttachmentInfo> <Attachments>k__BackingField;
    public string AssemblyPath { get; public set; }
    public string TargetFramework { get; public set; }
    public DateTime StartTime { get; public set; }
    public DateTime EndTime { get; internal set; }
    public IReadOnlyCollection`1<TestAttachmentInfo> Attachments { get; internal set; }
    [CompilerGeneratedAttribute]
public string get_AssemblyPath();
    [CompilerGeneratedAttribute]
public Void modreq(System.Runtime.CompilerServices.IsExternalInit) set_AssemblyPath(string value);
    [CompilerGeneratedAttribute]
public string get_TargetFramework();
    [CompilerGeneratedAttribute]
public Void modreq(System.Runtime.CompilerServices.IsExternalInit) set_TargetFramework(string value);
    [CompilerGeneratedAttribute]
public DateTime get_StartTime();
    [CompilerGeneratedAttribute]
public Void modreq(System.Runtime.CompilerServices.IsExternalInit) set_StartTime(DateTime value);
    [CompilerGeneratedAttribute]
public DateTime get_EndTime();
    [CompilerGeneratedAttribute]
internal void set_EndTime(DateTime value);
    [CompilerGeneratedAttribute]
public IReadOnlyCollection`1<TestAttachmentInfo> get_Attachments();
    [CompilerGeneratedAttribute]
internal void set_Attachments(IReadOnlyCollection`1<TestAttachmentInfo> value);
}
[ExtensionAttribute]
public static class Spekt.TestLogger.Core.TestRunMessageWorkflow : object {
    [ExtensionAttribute]
public static void Message(ITestRun testRun, TestRunMessageEventArgs messageEvent);
}
[ExtensionAttribute]
public static class Spekt.TestLogger.Core.TestRunResultWorkflow : object {
    private static TestCaseNameParser Parser;
    private static LegacyTestCaseNameParser LegacyParser;
    private static TestRunResultWorkflow();
    [ExtensionAttribute]
public static void Result(ITestRun testRun, TestResultEventArgs resultEvent);
}
[ExtensionAttribute]
public static class Spekt.TestLogger.Core.TestRunStartWorkflow : object {
    [ExtensionAttribute]
public static TestRunConfiguration Start(ITestRun testRun, TestRunStartEventArgs startedEvent);
}
public class Spekt.TestLogger.Extensions.DefaultTestAdapter : object {
    public sealed virtual List`1<TestResultInfo> TransformResults(List`1<TestResultInfo> results, List`1<TestMessageInfo> messages);
}
public interface Spekt.TestLogger.Extensions.ITestAdapter {
    public abstract virtual List`1<TestResultInfo> TransformResults(List`1<TestResultInfo> results, List`1<TestMessageInfo> messages);
}
public interface Spekt.TestLogger.Extensions.ITestAdapterFactory {
    public abstract virtual ITestAdapter CreateTestAdapter(string executorUri);
}
public class Spekt.TestLogger.Extensions.MSTestAdapter : object {
    public sealed virtual List`1<TestResultInfo> TransformResults(List`1<TestResultInfo> results, List`1<TestMessageInfo> messages);
}
public class Spekt.TestLogger.Extensions.NUnitTestAdapter : object {
    private static string ExplicitLabel;
    public sealed virtual List`1<TestResultInfo> TransformResults(List`1<TestResultInfo> results, List`1<TestMessageInfo> messages);
}
public class Spekt.TestLogger.Extensions.TestAdapterFactory : object {
    public sealed virtual ITestAdapter CreateTestAdapter(string executorUri);
}
public class Spekt.TestLogger.Extensions.XunitTestAdapter : object {
    public sealed virtual List`1<TestResultInfo> TransformResults(List`1<TestResultInfo> results, List`1<TestMessageInfo> messages);
}
public class Spekt.TestLogger.Platform.ConsoleOutput : object {
    public sealed virtual void WriteMessage(string message);
    public sealed virtual void WriteError(string message);
}
public class Spekt.TestLogger.Platform.FileSystem : object {
    public sealed virtual void CreateDirectory(string path);
    public sealed virtual bool ExistsDirectory(string path);
    public sealed virtual void RemoveDirectory(string path);
    public sealed virtual string Read(string path);
    public sealed virtual void Write(string path, string content);
    public sealed virtual void Delete(string path);
}
public interface Spekt.TestLogger.Platform.IConsoleOutput {
    public abstract virtual void WriteMessage(string message);
    public abstract virtual void WriteError(string message);
}
public interface Spekt.TestLogger.Platform.IFileSystem {
    public abstract virtual void CreateDirectory(string path);
    public abstract virtual bool ExistsDirectory(string path);
    public abstract virtual void RemoveDirectory(string path);
    public abstract virtual string Read(string path);
    public abstract virtual void Write(string path, string content);
    public abstract virtual void Delete(string path);
}
public abstract class Spekt.TestLogger.TestLogger : object {
    private IFileSystem fileSystem;
    private IConsoleOutput consoleOutput;
    private ITestResultStore resultStore;
    private ITestResultSerializer resultSerializer;
    private ITestRun testRun;
    protected string DefaultTestResultFile { get; }
    protected TestLogger(ITestResultSerializer resultSerializer);
    protected TestLogger(IFileSystem fileSystem, IConsoleOutput consoleOutput, ITestResultStore resultStore, ITestResultSerializer resultSerializer);
    protected abstract virtual string get_DefaultTestResultFile();
    public sealed virtual void Initialize(TestLoggerEvents events, string testResultsDirPath);
    public sealed virtual void Initialize(TestLoggerEvents events, Dictionary`2<string, string> parameters);
    private void CreateTestRun(TestLoggerEvents events, LoggerConfiguration config);
}
[ExtensionAttribute]
public static class Spekt.TestLogger.Utilities.AttachmentSetExtensions : object {
    [ExtensionAttribute]
public static IEnumerable`1<TestAttachmentInfo> ToAttachments(AttachmentSet attachmentSet);
    private static string GetPathFromUri(Uri uri);
}
[ExtensionAttribute]
public static class Spekt.TestLogger.Utilities.StringExtensions : object {
    [ExtensionAttribute]
public static string SubstringAfterDot(string name);
    [ExtensionAttribute]
public static string SubstringBeforeDot(string name);
}
[AttributeUsageAttribute("749")]
internal class System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverageAttribute : Attribute {
}
[EditorBrowsableAttribute("1")]
internal static class System.Runtime.CompilerServices.IsExternalInit : object {
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
[AttributeUsageAttribute("2")]
internal class System.Runtime.CompilerServices.RefSafetyRulesAttribute : Attribute {
    public int Version;
    public RefSafetyRulesAttribute(int );
}
