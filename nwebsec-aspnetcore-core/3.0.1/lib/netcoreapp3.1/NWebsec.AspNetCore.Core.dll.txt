public class NWebsec.AspNetCore.Core.Exceptions.RedirectValidationException : Exception {
    public RedirectValidationException(string message);
}
[ExtensionAttribute]
public static class NWebsec.AspNetCore.Core.Extensions.HttpContextExtensions : object {
    [ExtensionAttribute]
public static NWebsecContext GetNWebsecContext(HttpContext context);
}
public class NWebsec.AspNetCore.Core.Helpers.CspReportHelper : object {
    public sealed virtual string GetBuiltInCspReportHandlerRelativeUri();
}
public class NWebsec.AspNetCore.Core.RedirectValidator : object {
    public void ValidateRedirect(int statusCode, string locationHeader, Uri requestAuthority, IRedirectValidationConfiguration config);
    public bool IsRedirectStatusCode(int statusCode);
}
public class NWebsec.AspNetCore.Core.Web.HttpContextWrapper : object {
    private HttpContext _context;
    public HttpContextWrapper(HttpContext context);
    public sealed virtual T GetOriginalHttpContext();
    public sealed virtual NWebsecContext GetNWebsecContext();
    public sealed virtual NWebsecContext GetNWebsecOwinContext();
    public sealed virtual NWebsecContext GetNWebsecOverrideContext();
    public sealed virtual void SetItem(string key, T value);
    public sealed virtual T GetItem(string key);
    public sealed virtual void SetHttpHeader(string name, string value);
    public sealed virtual void RemoveHttpHeader(string name);
    public sealed virtual void SetNoCacheHeaders();
    private NWebsecContext GetNwsContext(string contextKey);
}
public class NWebsec.Core.Common.ConfigurationOverrides : object {
    [CompilerGeneratedAttribute]
private ICspConfiguration <CspOverride>k__BackingField;
    [CompilerGeneratedAttribute]
private ICspConfiguration <CspReportOnlyOverride>k__BackingField;
    public ICspConfiguration CspOverride { get; public set; }
    public ICspConfiguration CspReportOnlyOverride { get; public set; }
    [CompilerGeneratedAttribute]
public ICspConfiguration get_CspOverride();
    [CompilerGeneratedAttribute]
public void set_CspOverride(ICspConfiguration value);
    [CompilerGeneratedAttribute]
public ICspConfiguration get_CspReportOnlyOverride();
    [CompilerGeneratedAttribute]
public void set_CspReportOnlyOverride(ICspConfiguration value);
}
public interface NWebsec.Core.Common.Csp.ICspReportHelper {
    public abstract virtual string GetBuiltInCspReportHandlerRelativeUri();
}
[ExtensionAttribute]
public static class NWebsec.Core.Common.Extensions.ReferrerPolicyExtensions : object {
    [ExtensionAttribute]
public static string GetPolicyString(ReferrerPolicy policy);
}
[EditorBrowsableAttribute("1")]
public interface NWebsec.Core.Common.Fluent.IFluentInterface {
    [EditorBrowsableAttribute("1")]
public abstract virtual Type GetType();
    [EditorBrowsableAttribute("1")]
public abstract virtual int GetHashCode();
    [EditorBrowsableAttribute("1")]
public abstract virtual string ToString();
    [EditorBrowsableAttribute("1")]
public abstract virtual bool Equals(object obj);
}
public class NWebsec.Core.Common.HttpHeaders.Configuration.CspConfiguration : object {
    [CompilerGeneratedAttribute]
private bool <Enabled>k__BackingField;
    [CompilerGeneratedAttribute]
private ICspDirectiveConfiguration <DefaultSrcDirective>k__BackingField;
    [CompilerGeneratedAttribute]
private ICspDirectiveConfiguration <ScriptSrcDirective>k__BackingField;
    [CompilerGeneratedAttribute]
private ICspDirectiveConfiguration <ObjectSrcDirective>k__BackingField;
    [CompilerGeneratedAttribute]
private ICspDirectiveConfiguration <StyleSrcDirective>k__BackingField;
    [CompilerGeneratedAttribute]
private ICspDirectiveConfiguration <ImgSrcDirective>k__BackingField;
    [CompilerGeneratedAttribute]
private ICspDirectiveConfiguration <MediaSrcDirective>k__BackingField;
    [CompilerGeneratedAttribute]
private ICspDirectiveConfiguration <FrameSrcDirective>k__BackingField;
    [CompilerGeneratedAttribute]
private ICspDirectiveConfiguration <FontSrcDirective>k__BackingField;
    [CompilerGeneratedAttribute]
private ICspDirectiveConfiguration <ConnectSrcDirective>k__BackingField;
    [CompilerGeneratedAttribute]
private ICspDirectiveConfiguration <BaseUriDirective>k__BackingField;
    [CompilerGeneratedAttribute]
private ICspDirectiveConfiguration <ChildSrcDirective>k__BackingField;
    [CompilerGeneratedAttribute]
private ICspDirectiveConfiguration <FormActionDirective>k__BackingField;
    [CompilerGeneratedAttribute]
private ICspDirectiveConfiguration <FrameAncestorsDirective>k__BackingField;
    [CompilerGeneratedAttribute]
private ICspDirectiveConfiguration <ManifestSrcDirective>k__BackingField;
    [CompilerGeneratedAttribute]
private ICspDirectiveConfiguration <WorkerSrcDirective>k__BackingField;
    [CompilerGeneratedAttribute]
private ICspPluginTypesDirectiveConfiguration <PluginTypesDirective>k__BackingField;
    [CompilerGeneratedAttribute]
private ICspSandboxDirectiveConfiguration <SandboxDirective>k__BackingField;
    [CompilerGeneratedAttribute]
private ICspUpgradeDirectiveConfiguration <UpgradeInsecureRequestsDirective>k__BackingField;
    [CompilerGeneratedAttribute]
private ICspMixedContentDirectiveConfiguration <MixedContentDirective>k__BackingField;
    [CompilerGeneratedAttribute]
private ICspReportUriDirectiveConfiguration <ReportUriDirective>k__BackingField;
    public bool Enabled { get; public set; }
    public ICspDirectiveConfiguration DefaultSrcDirective { get; public set; }
    public ICspDirectiveConfiguration ScriptSrcDirective { get; public set; }
    public ICspDirectiveConfiguration ObjectSrcDirective { get; public set; }
    public ICspDirectiveConfiguration StyleSrcDirective { get; public set; }
    public ICspDirectiveConfiguration ImgSrcDirective { get; public set; }
    public ICspDirectiveConfiguration MediaSrcDirective { get; public set; }
    public ICspDirectiveConfiguration FrameSrcDirective { get; public set; }
    public ICspDirectiveConfiguration FontSrcDirective { get; public set; }
    public ICspDirectiveConfiguration ConnectSrcDirective { get; public set; }
    public ICspDirectiveConfiguration BaseUriDirective { get; public set; }
    public ICspDirectiveConfiguration ChildSrcDirective { get; public set; }
    public ICspDirectiveConfiguration FormActionDirective { get; public set; }
    public ICspDirectiveConfiguration FrameAncestorsDirective { get; public set; }
    public ICspDirectiveConfiguration ManifestSrcDirective { get; public set; }
    public ICspDirectiveConfiguration WorkerSrcDirective { get; public set; }
    public ICspPluginTypesDirectiveConfiguration PluginTypesDirective { get; public set; }
    public ICspSandboxDirectiveConfiguration SandboxDirective { get; public set; }
    public ICspUpgradeDirectiveConfiguration UpgradeInsecureRequestsDirective { get; public set; }
    public ICspMixedContentDirectiveConfiguration MixedContentDirective { get; public set; }
    public ICspReportUriDirectiveConfiguration ReportUriDirective { get; public set; }
    public CspConfiguration(bool initializeDirectives);
    [CompilerGeneratedAttribute]
public sealed virtual bool get_Enabled();
    [CompilerGeneratedAttribute]
public sealed virtual void set_Enabled(bool value);
    [CompilerGeneratedAttribute]
public sealed virtual ICspDirectiveConfiguration get_DefaultSrcDirective();
    [CompilerGeneratedAttribute]
public sealed virtual void set_DefaultSrcDirective(ICspDirectiveConfiguration value);
    [CompilerGeneratedAttribute]
public sealed virtual ICspDirectiveConfiguration get_ScriptSrcDirective();
    [CompilerGeneratedAttribute]
public sealed virtual void set_ScriptSrcDirective(ICspDirectiveConfiguration value);
    [CompilerGeneratedAttribute]
public sealed virtual ICspDirectiveConfiguration get_ObjectSrcDirective();
    [CompilerGeneratedAttribute]
public sealed virtual void set_ObjectSrcDirective(ICspDirectiveConfiguration value);
    [CompilerGeneratedAttribute]
public sealed virtual ICspDirectiveConfiguration get_StyleSrcDirective();
    [CompilerGeneratedAttribute]
public sealed virtual void set_StyleSrcDirective(ICspDirectiveConfiguration value);
    [CompilerGeneratedAttribute]
public sealed virtual ICspDirectiveConfiguration get_ImgSrcDirective();
    [CompilerGeneratedAttribute]
public sealed virtual void set_ImgSrcDirective(ICspDirectiveConfiguration value);
    [CompilerGeneratedAttribute]
public sealed virtual ICspDirectiveConfiguration get_MediaSrcDirective();
    [CompilerGeneratedAttribute]
public sealed virtual void set_MediaSrcDirective(ICspDirectiveConfiguration value);
    [CompilerGeneratedAttribute]
public sealed virtual ICspDirectiveConfiguration get_FrameSrcDirective();
    [CompilerGeneratedAttribute]
public sealed virtual void set_FrameSrcDirective(ICspDirectiveConfiguration value);
    [CompilerGeneratedAttribute]
public sealed virtual ICspDirectiveConfiguration get_FontSrcDirective();
    [CompilerGeneratedAttribute]
public sealed virtual void set_FontSrcDirective(ICspDirectiveConfiguration value);
    [CompilerGeneratedAttribute]
public sealed virtual ICspDirectiveConfiguration get_ConnectSrcDirective();
    [CompilerGeneratedAttribute]
public sealed virtual void set_ConnectSrcDirective(ICspDirectiveConfiguration value);
    [CompilerGeneratedAttribute]
public sealed virtual ICspDirectiveConfiguration get_BaseUriDirective();
    [CompilerGeneratedAttribute]
public sealed virtual void set_BaseUriDirective(ICspDirectiveConfiguration value);
    [CompilerGeneratedAttribute]
public sealed virtual ICspDirectiveConfiguration get_ChildSrcDirective();
    [CompilerGeneratedAttribute]
public sealed virtual void set_ChildSrcDirective(ICspDirectiveConfiguration value);
    [CompilerGeneratedAttribute]
public sealed virtual ICspDirectiveConfiguration get_FormActionDirective();
    [CompilerGeneratedAttribute]
public sealed virtual void set_FormActionDirective(ICspDirectiveConfiguration value);
    [CompilerGeneratedAttribute]
public sealed virtual ICspDirectiveConfiguration get_FrameAncestorsDirective();
    [CompilerGeneratedAttribute]
public sealed virtual void set_FrameAncestorsDirective(ICspDirectiveConfiguration value);
    [CompilerGeneratedAttribute]
public sealed virtual ICspDirectiveConfiguration get_ManifestSrcDirective();
    [CompilerGeneratedAttribute]
public sealed virtual void set_ManifestSrcDirective(ICspDirectiveConfiguration value);
    [CompilerGeneratedAttribute]
public sealed virtual ICspDirectiveConfiguration get_WorkerSrcDirective();
    [CompilerGeneratedAttribute]
public sealed virtual void set_WorkerSrcDirective(ICspDirectiveConfiguration value);
    [CompilerGeneratedAttribute]
public sealed virtual ICspPluginTypesDirectiveConfiguration get_PluginTypesDirective();
    [CompilerGeneratedAttribute]
public sealed virtual void set_PluginTypesDirective(ICspPluginTypesDirectiveConfiguration value);
    [CompilerGeneratedAttribute]
public sealed virtual ICspSandboxDirectiveConfiguration get_SandboxDirective();
    [CompilerGeneratedAttribute]
public sealed virtual void set_SandboxDirective(ICspSandboxDirectiveConfiguration value);
    [CompilerGeneratedAttribute]
public sealed virtual ICspUpgradeDirectiveConfiguration get_UpgradeInsecureRequestsDirective();
    [CompilerGeneratedAttribute]
public sealed virtual void set_UpgradeInsecureRequestsDirective(ICspUpgradeDirectiveConfiguration value);
    [CompilerGeneratedAttribute]
public sealed virtual ICspMixedContentDirectiveConfiguration get_MixedContentDirective();
    [CompilerGeneratedAttribute]
public sealed virtual void set_MixedContentDirective(ICspMixedContentDirectiveConfiguration value);
    [CompilerGeneratedAttribute]
public sealed virtual ICspReportUriDirectiveConfiguration get_ReportUriDirective();
    [CompilerGeneratedAttribute]
public sealed virtual void set_ReportUriDirective(ICspReportUriDirectiveConfiguration value);
}
public class NWebsec.Core.Common.HttpHeaders.Configuration.CspDirectiveConfiguration : object {
    private static String[] EmptySources;
    [CompilerGeneratedAttribute]
private bool <Enabled>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <NoneSrc>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <SelfSrc>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <UnsafeInlineSrc>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <UnsafeEvalSrc>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <StrictDynamicSrc>k__BackingField;
    [CompilerGeneratedAttribute]
private IEnumerable`1<string> <CustomSources>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Nonce>k__BackingField;
    public bool Enabled { get; public set; }
    public bool NoneSrc { get; public set; }
    public bool SelfSrc { get; public set; }
    public bool UnsafeInlineSrc { get; public set; }
    public bool UnsafeEvalSrc { get; public set; }
    public bool StrictDynamicSrc { get; public set; }
    public IEnumerable`1<string> CustomSources { get; public set; }
    public string Nonce { get; public set; }
    private static CspDirectiveConfiguration();
    [CompilerGeneratedAttribute]
public sealed virtual bool get_Enabled();
    [CompilerGeneratedAttribute]
public sealed virtual void set_Enabled(bool value);
    [CompilerGeneratedAttribute]
public sealed virtual bool get_NoneSrc();
    [CompilerGeneratedAttribute]
public sealed virtual void set_NoneSrc(bool value);
    [CompilerGeneratedAttribute]
public sealed virtual bool get_SelfSrc();
    [CompilerGeneratedAttribute]
public sealed virtual void set_SelfSrc(bool value);
    [CompilerGeneratedAttribute]
public sealed virtual bool get_UnsafeInlineSrc();
    [CompilerGeneratedAttribute]
public sealed virtual void set_UnsafeInlineSrc(bool value);
    [CompilerGeneratedAttribute]
public sealed virtual bool get_UnsafeEvalSrc();
    [CompilerGeneratedAttribute]
public sealed virtual void set_UnsafeEvalSrc(bool value);
    [CompilerGeneratedAttribute]
public sealed virtual bool get_StrictDynamicSrc();
    [CompilerGeneratedAttribute]
public sealed virtual void set_StrictDynamicSrc(bool value);
    [CompilerGeneratedAttribute]
public sealed virtual IEnumerable`1<string> get_CustomSources();
    [CompilerGeneratedAttribute]
public sealed virtual void set_CustomSources(IEnumerable`1<string> value);
    [CompilerGeneratedAttribute]
public sealed virtual string get_Nonce();
    [CompilerGeneratedAttribute]
public sealed virtual void set_Nonce(string value);
    private sealed virtual override Type NWebsec.Core.Common.Fluent.IFluentInterface.GetType();
}
public class NWebsec.Core.Common.HttpHeaders.Configuration.CspHeaderConfiguration : object {
    [CompilerGeneratedAttribute]
private bool <Enabled>k__BackingField;
    public bool Enabled { get; public set; }
    [CompilerGeneratedAttribute]
public sealed virtual bool get_Enabled();
    [CompilerGeneratedAttribute]
public sealed virtual void set_Enabled(bool value);
}
public class NWebsec.Core.Common.HttpHeaders.Configuration.CspMixedContentDirectiveConfiguration : object {
    [CompilerGeneratedAttribute]
private bool <Enabled>k__BackingField;
    public bool Enabled { get; public set; }
    [CompilerGeneratedAttribute]
public sealed virtual bool get_Enabled();
    [CompilerGeneratedAttribute]
public sealed virtual void set_Enabled(bool value);
}
public class NWebsec.Core.Common.HttpHeaders.Configuration.CspPluginTypesDirectiveConfiguration : object {
    private static String[] EmptySources;
    [CompilerGeneratedAttribute]
private bool <Enabled>k__BackingField;
    [CompilerGeneratedAttribute]
private IEnumerable`1<string> <MediaTypes>k__BackingField;
    public bool Enabled { get; public set; }
    public IEnumerable`1<string> MediaTypes { get; public set; }
    private static CspPluginTypesDirectiveConfiguration();
    [CompilerGeneratedAttribute]
public sealed virtual bool get_Enabled();
    [CompilerGeneratedAttribute]
public sealed virtual void set_Enabled(bool value);
    [CompilerGeneratedAttribute]
public sealed virtual IEnumerable`1<string> get_MediaTypes();
    [CompilerGeneratedAttribute]
public sealed virtual void set_MediaTypes(IEnumerable`1<string> value);
}
public class NWebsec.Core.Common.HttpHeaders.Configuration.CspReportUriDirectiveConfiguration : object {
    [CompilerGeneratedAttribute]
private bool <Enabled>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <EnableBuiltinHandler>k__BackingField;
    [CompilerGeneratedAttribute]
private IEnumerable`1<string> <ReportUris>k__BackingField;
    public bool Enabled { get; public set; }
    public bool EnableBuiltinHandler { get; public set; }
    public IEnumerable`1<string> ReportUris { get; public set; }
    [CompilerGeneratedAttribute]
public sealed virtual bool get_Enabled();
    [CompilerGeneratedAttribute]
public sealed virtual void set_Enabled(bool value);
    [CompilerGeneratedAttribute]
public sealed virtual bool get_EnableBuiltinHandler();
    [CompilerGeneratedAttribute]
public sealed virtual void set_EnableBuiltinHandler(bool value);
    [CompilerGeneratedAttribute]
public sealed virtual IEnumerable`1<string> get_ReportUris();
    [CompilerGeneratedAttribute]
public sealed virtual void set_ReportUris(IEnumerable`1<string> value);
}
public class NWebsec.Core.Common.HttpHeaders.Configuration.CspSandboxDirectiveConfiguration : object {
    [CompilerGeneratedAttribute]
private bool <Enabled>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <AllowForms>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <AllowModals>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <AllowOrientationLock>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <AllowPointerLock>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <AllowPopups>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <AllowPopupsToEscapeSandbox>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <AllowPresentation>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <AllowSameOrigin>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <AllowScripts>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <AllowTopNavigation>k__BackingField;
    public bool Enabled { get; public set; }
    public bool AllowForms { get; public set; }
    public bool AllowModals { get; public set; }
    public bool AllowOrientationLock { get; public set; }
    public bool AllowPointerLock { get; public set; }
    public bool AllowPopups { get; public set; }
    public bool AllowPopupsToEscapeSandbox { get; public set; }
    public bool AllowPresentation { get; public set; }
    public bool AllowSameOrigin { get; public set; }
    public bool AllowScripts { get; public set; }
    public bool AllowTopNavigation { get; public set; }
    [CompilerGeneratedAttribute]
public sealed virtual bool get_Enabled();
    [CompilerGeneratedAttribute]
public sealed virtual void set_Enabled(bool value);
    [CompilerGeneratedAttribute]
public sealed virtual bool get_AllowForms();
    [CompilerGeneratedAttribute]
public sealed virtual void set_AllowForms(bool value);
    [CompilerGeneratedAttribute]
public sealed virtual bool get_AllowModals();
    [CompilerGeneratedAttribute]
public sealed virtual void set_AllowModals(bool value);
    [CompilerGeneratedAttribute]
public sealed virtual bool get_AllowOrientationLock();
    [CompilerGeneratedAttribute]
public sealed virtual void set_AllowOrientationLock(bool value);
    [CompilerGeneratedAttribute]
public sealed virtual bool get_AllowPointerLock();
    [CompilerGeneratedAttribute]
public sealed virtual void set_AllowPointerLock(bool value);
    [CompilerGeneratedAttribute]
public sealed virtual bool get_AllowPopups();
    [CompilerGeneratedAttribute]
public sealed virtual void set_AllowPopups(bool value);
    [CompilerGeneratedAttribute]
public sealed virtual bool get_AllowPopupsToEscapeSandbox();
    [CompilerGeneratedAttribute]
public sealed virtual void set_AllowPopupsToEscapeSandbox(bool value);
    [CompilerGeneratedAttribute]
public sealed virtual bool get_AllowPresentation();
    [CompilerGeneratedAttribute]
public sealed virtual void set_AllowPresentation(bool value);
    [CompilerGeneratedAttribute]
public sealed virtual bool get_AllowSameOrigin();
    [CompilerGeneratedAttribute]
public sealed virtual void set_AllowSameOrigin(bool value);
    [CompilerGeneratedAttribute]
public sealed virtual bool get_AllowScripts();
    [CompilerGeneratedAttribute]
public sealed virtual void set_AllowScripts(bool value);
    [CompilerGeneratedAttribute]
public sealed virtual bool get_AllowTopNavigation();
    [CompilerGeneratedAttribute]
public sealed virtual void set_AllowTopNavigation(bool value);
}
public class NWebsec.Core.Common.HttpHeaders.Configuration.CspUpgradeDirectiveConfiguration : object {
    [CompilerGeneratedAttribute]
private bool <Enabled>k__BackingField;
    [CompilerGeneratedAttribute]
private int <HttpsPort>k__BackingField;
    public bool Enabled { get; public set; }
    public int HttpsPort { get; public set; }
    [CompilerGeneratedAttribute]
public sealed virtual bool get_Enabled();
    [CompilerGeneratedAttribute]
public sealed virtual void set_Enabled(bool value);
    [CompilerGeneratedAttribute]
public sealed virtual int get_HttpsPort();
    [CompilerGeneratedAttribute]
public sealed virtual void set_HttpsPort(int value);
}
public class NWebsec.Core.Common.HttpHeaders.Configuration.HstsConfiguration : object {
    [CompilerGeneratedAttribute]
private TimeSpan <MaxAge>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IncludeSubdomains>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <Preload>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <HttpsOnly>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <UpgradeInsecureRequests>k__BackingField;
    public TimeSpan MaxAge { get; public set; }
    public bool IncludeSubdomains { get; public set; }
    public bool Preload { get; public set; }
    public bool HttpsOnly { get; public set; }
    public bool UpgradeInsecureRequests { get; public set; }
    [CompilerGeneratedAttribute]
public sealed virtual TimeSpan get_MaxAge();
    [CompilerGeneratedAttribute]
public sealed virtual void set_MaxAge(TimeSpan value);
    [CompilerGeneratedAttribute]
public sealed virtual bool get_IncludeSubdomains();
    [CompilerGeneratedAttribute]
public sealed virtual void set_IncludeSubdomains(bool value);
    [CompilerGeneratedAttribute]
public sealed virtual bool get_Preload();
    [CompilerGeneratedAttribute]
public sealed virtual void set_Preload(bool value);
    [CompilerGeneratedAttribute]
public sealed virtual bool get_HttpsOnly();
    [CompilerGeneratedAttribute]
public sealed virtual void set_HttpsOnly(bool value);
    [CompilerGeneratedAttribute]
public sealed virtual bool get_UpgradeInsecureRequests();
    [CompilerGeneratedAttribute]
public sealed virtual void set_UpgradeInsecureRequests(bool value);
}
public interface NWebsec.Core.Common.HttpHeaders.Configuration.ICspConfiguration {
    public bool Enabled { get; public set; }
    public ICspDirectiveConfiguration DefaultSrcDirective { get; public set; }
    public ICspDirectiveConfiguration ScriptSrcDirective { get; public set; }
    public ICspDirectiveConfiguration ObjectSrcDirective { get; public set; }
    public ICspDirectiveConfiguration StyleSrcDirective { get; public set; }
    public ICspDirectiveConfiguration ImgSrcDirective { get; public set; }
    public ICspDirectiveConfiguration MediaSrcDirective { get; public set; }
    public ICspDirectiveConfiguration FrameSrcDirective { get; public set; }
    public ICspDirectiveConfiguration FontSrcDirective { get; public set; }
    public ICspDirectiveConfiguration ConnectSrcDirective { get; public set; }
    public ICspReportUriDirectiveConfiguration ReportUriDirective { get; public set; }
    public ICspDirectiveConfiguration BaseUriDirective { get; public set; }
    public ICspDirectiveConfiguration ChildSrcDirective { get; public set; }
    public ICspDirectiveConfiguration FormActionDirective { get; public set; }
    public ICspDirectiveConfiguration FrameAncestorsDirective { get; public set; }
    public ICspPluginTypesDirectiveConfiguration PluginTypesDirective { get; public set; }
    public ICspSandboxDirectiveConfiguration SandboxDirective { get; public set; }
    public ICspDirectiveConfiguration ManifestSrcDirective { get; public set; }
    public ICspDirectiveConfiguration WorkerSrcDirective { get; public set; }
    public ICspUpgradeDirectiveConfiguration UpgradeInsecureRequestsDirective { get; public set; }
    public ICspMixedContentDirectiveConfiguration MixedContentDirective { get; public set; }
    public abstract virtual bool get_Enabled();
    public abstract virtual void set_Enabled(bool value);
    public abstract virtual ICspDirectiveConfiguration get_DefaultSrcDirective();
    public abstract virtual void set_DefaultSrcDirective(ICspDirectiveConfiguration value);
    public abstract virtual ICspDirectiveConfiguration get_ScriptSrcDirective();
    public abstract virtual void set_ScriptSrcDirective(ICspDirectiveConfiguration value);
    public abstract virtual ICspDirectiveConfiguration get_ObjectSrcDirective();
    public abstract virtual void set_ObjectSrcDirective(ICspDirectiveConfiguration value);
    public abstract virtual ICspDirectiveConfiguration get_StyleSrcDirective();
    public abstract virtual void set_StyleSrcDirective(ICspDirectiveConfiguration value);
    public abstract virtual ICspDirectiveConfiguration get_ImgSrcDirective();
    public abstract virtual void set_ImgSrcDirective(ICspDirectiveConfiguration value);
    public abstract virtual ICspDirectiveConfiguration get_MediaSrcDirective();
    public abstract virtual void set_MediaSrcDirective(ICspDirectiveConfiguration value);
    public abstract virtual ICspDirectiveConfiguration get_FrameSrcDirective();
    public abstract virtual void set_FrameSrcDirective(ICspDirectiveConfiguration value);
    public abstract virtual ICspDirectiveConfiguration get_FontSrcDirective();
    public abstract virtual void set_FontSrcDirective(ICspDirectiveConfiguration value);
    public abstract virtual ICspDirectiveConfiguration get_ConnectSrcDirective();
    public abstract virtual void set_ConnectSrcDirective(ICspDirectiveConfiguration value);
    public abstract virtual ICspReportUriDirectiveConfiguration get_ReportUriDirective();
    public abstract virtual void set_ReportUriDirective(ICspReportUriDirectiveConfiguration value);
    public abstract virtual ICspDirectiveConfiguration get_BaseUriDirective();
    public abstract virtual void set_BaseUriDirective(ICspDirectiveConfiguration value);
    public abstract virtual ICspDirectiveConfiguration get_ChildSrcDirective();
    public abstract virtual void set_ChildSrcDirective(ICspDirectiveConfiguration value);
    public abstract virtual ICspDirectiveConfiguration get_FormActionDirective();
    public abstract virtual void set_FormActionDirective(ICspDirectiveConfiguration value);
    public abstract virtual ICspDirectiveConfiguration get_FrameAncestorsDirective();
    public abstract virtual void set_FrameAncestorsDirective(ICspDirectiveConfiguration value);
    public abstract virtual ICspPluginTypesDirectiveConfiguration get_PluginTypesDirective();
    public abstract virtual void set_PluginTypesDirective(ICspPluginTypesDirectiveConfiguration value);
    public abstract virtual ICspSandboxDirectiveConfiguration get_SandboxDirective();
    public abstract virtual void set_SandboxDirective(ICspSandboxDirectiveConfiguration value);
    public abstract virtual ICspDirectiveConfiguration get_ManifestSrcDirective();
    public abstract virtual void set_ManifestSrcDirective(ICspDirectiveConfiguration value);
    public abstract virtual ICspDirectiveConfiguration get_WorkerSrcDirective();
    public abstract virtual void set_WorkerSrcDirective(ICspDirectiveConfiguration value);
    public abstract virtual ICspUpgradeDirectiveConfiguration get_UpgradeInsecureRequestsDirective();
    public abstract virtual void set_UpgradeInsecureRequestsDirective(ICspUpgradeDirectiveConfiguration value);
    public abstract virtual ICspMixedContentDirectiveConfiguration get_MixedContentDirective();
    public abstract virtual void set_MixedContentDirective(ICspMixedContentDirectiveConfiguration value);
}
public interface NWebsec.Core.Common.HttpHeaders.Configuration.ICspDirectiveBasicConfiguration {
    [EditorBrowsableAttribute("1")]
public bool Enabled { get; public set; }
    [EditorBrowsableAttribute("1")]
public bool NoneSrc { get; public set; }
    [EditorBrowsableAttribute("1")]
public bool SelfSrc { get; public set; }
    [EditorBrowsableAttribute("1")]
public IEnumerable`1<string> CustomSources { get; public set; }
    public abstract virtual bool get_Enabled();
    public abstract virtual void set_Enabled(bool value);
    public abstract virtual bool get_NoneSrc();
    public abstract virtual void set_NoneSrc(bool value);
    public abstract virtual bool get_SelfSrc();
    public abstract virtual void set_SelfSrc(bool value);
    public abstract virtual IEnumerable`1<string> get_CustomSources();
    public abstract virtual void set_CustomSources(IEnumerable`1<string> value);
}
public interface NWebsec.Core.Common.HttpHeaders.Configuration.ICspDirectiveConfiguration {
    [EditorBrowsableAttribute("1")]
public bool UnsafeEvalSrc { get; public set; }
    [EditorBrowsableAttribute("1")]
public bool StrictDynamicSrc { get; public set; }
    public abstract virtual bool get_UnsafeEvalSrc();
    public abstract virtual void set_UnsafeEvalSrc(bool value);
    public abstract virtual bool get_StrictDynamicSrc();
    public abstract virtual void set_StrictDynamicSrc(bool value);
}
public interface NWebsec.Core.Common.HttpHeaders.Configuration.ICspDirectiveUnsafeInlineConfiguration {
    [EditorBrowsableAttribute("1")]
public bool UnsafeInlineSrc { get; public set; }
    [EditorBrowsableAttribute("1")]
public string Nonce { get; public set; }
    public abstract virtual bool get_UnsafeInlineSrc();
    public abstract virtual void set_UnsafeInlineSrc(bool value);
    public abstract virtual string get_Nonce();
    public abstract virtual void set_Nonce(string value);
}
public interface NWebsec.Core.Common.HttpHeaders.Configuration.ICspHeaderConfiguration {
    public bool Enabled { get; public set; }
    public abstract virtual bool get_Enabled();
    public abstract virtual void set_Enabled(bool value);
}
public interface NWebsec.Core.Common.HttpHeaders.Configuration.ICspMixedContentDirectiveConfiguration {
    public bool Enabled { get; public set; }
    public abstract virtual bool get_Enabled();
    public abstract virtual void set_Enabled(bool value);
}
public interface NWebsec.Core.Common.HttpHeaders.Configuration.ICspPluginTypesDirectiveConfiguration {
    public bool Enabled { get; public set; }
    public IEnumerable`1<string> MediaTypes { get; public set; }
    public abstract virtual bool get_Enabled();
    public abstract virtual void set_Enabled(bool value);
    public abstract virtual IEnumerable`1<string> get_MediaTypes();
    public abstract virtual void set_MediaTypes(IEnumerable`1<string> value);
}
public interface NWebsec.Core.Common.HttpHeaders.Configuration.ICspReportUriDirectiveConfiguration {
    public bool Enabled { get; public set; }
    public bool EnableBuiltinHandler { get; public set; }
    public IEnumerable`1<string> ReportUris { get; public set; }
    public abstract virtual bool get_Enabled();
    public abstract virtual void set_Enabled(bool value);
    public abstract virtual bool get_EnableBuiltinHandler();
    public abstract virtual void set_EnableBuiltinHandler(bool value);
    public abstract virtual IEnumerable`1<string> get_ReportUris();
    public abstract virtual void set_ReportUris(IEnumerable`1<string> value);
}
public interface NWebsec.Core.Common.HttpHeaders.Configuration.ICspSandboxDirectiveConfiguration {
    public bool Enabled { get; public set; }
    public bool AllowForms { get; public set; }
    public bool AllowModals { get; public set; }
    public bool AllowOrientationLock { get; public set; }
    public bool AllowPointerLock { get; public set; }
    public bool AllowPopups { get; public set; }
    public bool AllowPopupsToEscapeSandbox { get; public set; }
    public bool AllowPresentation { get; public set; }
    public bool AllowSameOrigin { get; public set; }
    public bool AllowScripts { get; public set; }
    public bool AllowTopNavigation { get; public set; }
    public abstract virtual bool get_Enabled();
    public abstract virtual void set_Enabled(bool value);
    public abstract virtual bool get_AllowForms();
    public abstract virtual void set_AllowForms(bool value);
    public abstract virtual bool get_AllowModals();
    public abstract virtual void set_AllowModals(bool value);
    public abstract virtual bool get_AllowOrientationLock();
    public abstract virtual void set_AllowOrientationLock(bool value);
    public abstract virtual bool get_AllowPointerLock();
    public abstract virtual void set_AllowPointerLock(bool value);
    public abstract virtual bool get_AllowPopups();
    public abstract virtual void set_AllowPopups(bool value);
    public abstract virtual bool get_AllowPopupsToEscapeSandbox();
    public abstract virtual void set_AllowPopupsToEscapeSandbox(bool value);
    public abstract virtual bool get_AllowPresentation();
    public abstract virtual void set_AllowPresentation(bool value);
    public abstract virtual bool get_AllowSameOrigin();
    public abstract virtual void set_AllowSameOrigin(bool value);
    public abstract virtual bool get_AllowScripts();
    public abstract virtual void set_AllowScripts(bool value);
    public abstract virtual bool get_AllowTopNavigation();
    public abstract virtual void set_AllowTopNavigation(bool value);
}
public interface NWebsec.Core.Common.HttpHeaders.Configuration.ICspUpgradeDirectiveConfiguration {
    public bool Enabled { get; public set; }
    public int HttpsPort { get; public set; }
    public abstract virtual bool get_Enabled();
    public abstract virtual void set_Enabled(bool value);
    public abstract virtual int get_HttpsPort();
    public abstract virtual void set_HttpsPort(int value);
}
public interface NWebsec.Core.Common.HttpHeaders.Configuration.IHstsConfiguration {
    public TimeSpan MaxAge { get; public set; }
    public bool IncludeSubdomains { get; public set; }
    public bool Preload { get; public set; }
    public bool HttpsOnly { get; public set; }
    public bool UpgradeInsecureRequests { get; public set; }
    public abstract virtual TimeSpan get_MaxAge();
    public abstract virtual void set_MaxAge(TimeSpan value);
    public abstract virtual bool get_IncludeSubdomains();
    public abstract virtual void set_IncludeSubdomains(bool value);
    public abstract virtual bool get_Preload();
    public abstract virtual void set_Preload(bool value);
    public abstract virtual bool get_HttpsOnly();
    public abstract virtual void set_HttpsOnly(bool value);
    public abstract virtual bool get_UpgradeInsecureRequests();
    public abstract virtual void set_UpgradeInsecureRequests(bool value);
}
public interface NWebsec.Core.Common.HttpHeaders.Configuration.IRedirectValidationConfiguration {
    public bool Enabled { get; public set; }
    public IEnumerable`1<string> AllowedUris { get; public set; }
    public ISameHostHttpsRedirectConfiguration SameHostRedirectConfiguration { get; public set; }
    public abstract virtual bool get_Enabled();
    public abstract virtual void set_Enabled(bool value);
    public abstract virtual IEnumerable`1<string> get_AllowedUris();
    public abstract virtual void set_AllowedUris(IEnumerable`1<string> value);
    public abstract virtual ISameHostHttpsRedirectConfiguration get_SameHostRedirectConfiguration();
    public abstract virtual void set_SameHostRedirectConfiguration(ISameHostHttpsRedirectConfiguration value);
}
public interface NWebsec.Core.Common.HttpHeaders.Configuration.IReferrerPolicyConfiguration {
    public ReferrerPolicy Policy { get; public set; }
    public abstract virtual ReferrerPolicy get_Policy();
    public abstract virtual void set_Policy(ReferrerPolicy value);
}
public interface NWebsec.Core.Common.HttpHeaders.Configuration.ISameHostHttpsRedirectConfiguration {
    public bool Enabled { get; public set; }
    public Int32[] Ports { get; public set; }
    public abstract virtual bool get_Enabled();
    public abstract virtual void set_Enabled(bool value);
    public abstract virtual Int32[] get_Ports();
    public abstract virtual void set_Ports(Int32[] value);
}
public interface NWebsec.Core.Common.HttpHeaders.Configuration.ISimpleBooleanConfiguration {
    public bool Enabled { get; public set; }
    public abstract virtual bool get_Enabled();
    public abstract virtual void set_Enabled(bool value);
}
public interface NWebsec.Core.Common.HttpHeaders.Configuration.IXFrameOptionsConfiguration {
    public XfoPolicy Policy { get; public set; }
    public abstract virtual XfoPolicy get_Policy();
    public abstract virtual void set_Policy(XfoPolicy value);
}
public interface NWebsec.Core.Common.HttpHeaders.Configuration.IXRobotsTagConfiguration {
    public bool Enabled { get; public set; }
    public bool NoIndex { get; public set; }
    public bool NoFollow { get; public set; }
    public bool NoSnippet { get; public set; }
    public bool NoArchive { get; public set; }
    public bool NoOdp { get; public set; }
    public bool NoTranslate { get; public set; }
    public bool NoImageIndex { get; public set; }
    public abstract virtual bool get_Enabled();
    public abstract virtual void set_Enabled(bool value);
    public abstract virtual bool get_NoIndex();
    public abstract virtual void set_NoIndex(bool value);
    public abstract virtual bool get_NoFollow();
    public abstract virtual void set_NoFollow(bool value);
    public abstract virtual bool get_NoSnippet();
    public abstract virtual void set_NoSnippet(bool value);
    public abstract virtual bool get_NoArchive();
    public abstract virtual void set_NoArchive(bool value);
    public abstract virtual bool get_NoOdp();
    public abstract virtual void set_NoOdp(bool value);
    public abstract virtual bool get_NoTranslate();
    public abstract virtual void set_NoTranslate(bool value);
    public abstract virtual bool get_NoImageIndex();
    public abstract virtual void set_NoImageIndex(bool value);
}
public interface NWebsec.Core.Common.HttpHeaders.Configuration.IXXssProtectionConfiguration {
    public XXssPolicy Policy { get; public set; }
    public bool BlockMode { get; public set; }
    public abstract virtual XXssPolicy get_Policy();
    public abstract virtual void set_Policy(XXssPolicy value);
    public abstract virtual bool get_BlockMode();
    public abstract virtual void set_BlockMode(bool value);
}
internal class NWebsec.Core.Common.HttpHeaders.Configuration.RedirectValidationConfiguration : object {
    [CompilerGeneratedAttribute]
private bool <Enabled>k__BackingField;
    [CompilerGeneratedAttribute]
private IEnumerable`1<string> <AllowedUris>k__BackingField;
    [CompilerGeneratedAttribute]
private ISameHostHttpsRedirectConfiguration <SameHostRedirectConfiguration>k__BackingField;
    public bool Enabled { get; public set; }
    public IEnumerable`1<string> AllowedUris { get; public set; }
    public ISameHostHttpsRedirectConfiguration SameHostRedirectConfiguration { get; public set; }
    [CompilerGeneratedAttribute]
public sealed virtual bool get_Enabled();
    [CompilerGeneratedAttribute]
public sealed virtual void set_Enabled(bool value);
    [CompilerGeneratedAttribute]
public sealed virtual IEnumerable`1<string> get_AllowedUris();
    [CompilerGeneratedAttribute]
public sealed virtual void set_AllowedUris(IEnumerable`1<string> value);
    [CompilerGeneratedAttribute]
public sealed virtual ISameHostHttpsRedirectConfiguration get_SameHostRedirectConfiguration();
    [CompilerGeneratedAttribute]
public sealed virtual void set_SameHostRedirectConfiguration(ISameHostHttpsRedirectConfiguration value);
}
public class NWebsec.Core.Common.HttpHeaders.Configuration.ReferrerPolicyConfiguration : object {
    [CompilerGeneratedAttribute]
private ReferrerPolicy <Policy>k__BackingField;
    public ReferrerPolicy Policy { get; public set; }
    [CompilerGeneratedAttribute]
public sealed virtual ReferrerPolicy get_Policy();
    [CompilerGeneratedAttribute]
public sealed virtual void set_Policy(ReferrerPolicy value);
}
public class NWebsec.Core.Common.HttpHeaders.Configuration.SameHostHttpsRedirectConfiguration : object {
    [CompilerGeneratedAttribute]
private bool <Enabled>k__BackingField;
    [CompilerGeneratedAttribute]
private Int32[] <Ports>k__BackingField;
    public bool Enabled { get; public set; }
    public Int32[] Ports { get; public set; }
    [CompilerGeneratedAttribute]
public sealed virtual bool get_Enabled();
    [CompilerGeneratedAttribute]
public sealed virtual void set_Enabled(bool value);
    [CompilerGeneratedAttribute]
public sealed virtual Int32[] get_Ports();
    [CompilerGeneratedAttribute]
public sealed virtual void set_Ports(Int32[] value);
}
public class NWebsec.Core.Common.HttpHeaders.Configuration.SimpleBooleanConfiguration : object {
    [CompilerGeneratedAttribute]
private bool <Enabled>k__BackingField;
    public bool Enabled { get; public set; }
    [CompilerGeneratedAttribute]
public sealed virtual bool get_Enabled();
    [CompilerGeneratedAttribute]
public sealed virtual void set_Enabled(bool value);
}
public class NWebsec.Core.Common.HttpHeaders.Configuration.Validation.HstsConfigurationValidator : object {
    public void Validate(IHstsConfiguration hstsConfig);
}
public class NWebsec.Core.Common.HttpHeaders.Configuration.Validation.Rfc2045MediaTypeValidator : object {
    private static String[] ValidTypes;
    private static Rfc2045MediaTypeValidator();
    public void Validate(string mediaType);
}
public class NWebsec.Core.Common.HttpHeaders.Configuration.Validation.XRobotsTagConfigurationValidator : object {
    public void Validate(IXRobotsTagConfiguration xRobotsConfig);
}
public class NWebsec.Core.Common.HttpHeaders.Configuration.XFrameOptionsConfiguration : object {
    [CompilerGeneratedAttribute]
private XfoPolicy <Policy>k__BackingField;
    public XfoPolicy Policy { get; public set; }
    [CompilerGeneratedAttribute]
public sealed virtual XfoPolicy get_Policy();
    [CompilerGeneratedAttribute]
public sealed virtual void set_Policy(XfoPolicy value);
}
public class NWebsec.Core.Common.HttpHeaders.Configuration.XRobotsTagConfiguration : object {
    [CompilerGeneratedAttribute]
private bool <Enabled>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <NoIndex>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <NoFollow>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <NoSnippet>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <NoArchive>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <NoOdp>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <NoTranslate>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <NoImageIndex>k__BackingField;
    public bool Enabled { get; public set; }
    public bool NoIndex { get; public set; }
    public bool NoFollow { get; public set; }
    public bool NoSnippet { get; public set; }
    public bool NoArchive { get; public set; }
    public bool NoOdp { get; public set; }
    public bool NoTranslate { get; public set; }
    public bool NoImageIndex { get; public set; }
    [CompilerGeneratedAttribute]
public sealed virtual bool get_Enabled();
    [CompilerGeneratedAttribute]
public sealed virtual void set_Enabled(bool value);
    [CompilerGeneratedAttribute]
public sealed virtual bool get_NoIndex();
    [CompilerGeneratedAttribute]
public sealed virtual void set_NoIndex(bool value);
    [CompilerGeneratedAttribute]
public sealed virtual bool get_NoFollow();
    [CompilerGeneratedAttribute]
public sealed virtual void set_NoFollow(bool value);
    [CompilerGeneratedAttribute]
public sealed virtual bool get_NoSnippet();
    [CompilerGeneratedAttribute]
public sealed virtual void set_NoSnippet(bool value);
    [CompilerGeneratedAttribute]
public sealed virtual bool get_NoArchive();
    [CompilerGeneratedAttribute]
public sealed virtual void set_NoArchive(bool value);
    [CompilerGeneratedAttribute]
public sealed virtual bool get_NoOdp();
    [CompilerGeneratedAttribute]
public sealed virtual void set_NoOdp(bool value);
    [CompilerGeneratedAttribute]
public sealed virtual bool get_NoTranslate();
    [CompilerGeneratedAttribute]
public sealed virtual void set_NoTranslate(bool value);
    [CompilerGeneratedAttribute]
public sealed virtual bool get_NoImageIndex();
    [CompilerGeneratedAttribute]
public sealed virtual void set_NoImageIndex(bool value);
}
public class NWebsec.Core.Common.HttpHeaders.Configuration.XXssProtectionConfiguration : object {
    [CompilerGeneratedAttribute]
private XXssPolicy <Policy>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <BlockMode>k__BackingField;
    public XXssPolicy Policy { get; public set; }
    public bool BlockMode { get; public set; }
    [CompilerGeneratedAttribute]
public sealed virtual XXssPolicy get_Policy();
    [CompilerGeneratedAttribute]
public sealed virtual void set_Policy(XXssPolicy value);
    [CompilerGeneratedAttribute]
public sealed virtual bool get_BlockMode();
    [CompilerGeneratedAttribute]
public sealed virtual void set_BlockMode(bool value);
}
public static class NWebsec.Core.Common.HttpHeaders.Csp.CspHashSource : object {
    private static string Sha256;
    private static string Sha384;
    private static string Sha512;
    public static string Parse(string hashSource);
}
internal class NWebsec.Core.Common.HttpHeaders.Csp.CspSourceParseResult : object {
    [CompilerGeneratedAttribute]
private string <Scheme>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Host>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Port>k__BackingField;
    [CompilerGeneratedAttribute]
private string <PathAndQuery>k__BackingField;
    public string Scheme { get; public set; }
    public string Host { get; public set; }
    public string Port { get; public set; }
    public string PathAndQuery { get; public set; }
    [CompilerGeneratedAttribute]
public string get_Scheme();
    [CompilerGeneratedAttribute]
public void set_Scheme(string value);
    [CompilerGeneratedAttribute]
public string get_Host();
    [CompilerGeneratedAttribute]
public void set_Host(string value);
    [CompilerGeneratedAttribute]
public string get_Port();
    [CompilerGeneratedAttribute]
public void set_Port(string value);
    [CompilerGeneratedAttribute]
public string get_PathAndQuery();
    [CompilerGeneratedAttribute]
public void set_PathAndQuery(string value);
}
public class NWebsec.Core.Common.HttpHeaders.Csp.CspUriSource : object {
    private static string HostRegex;
    private static string SchemeOnlyRegex;
    private static String[] KnownSchemes;
    private string _source;
    private CspUriSource(string source);
    private static CspUriSource();
    public virtual string ToString();
    public static string EncodeUri(Uri uri);
    public static CspUriSource Parse(string source);
    private static CspSourceParseResult ParseSourceComponents(string uri);
    private static string EncodeHostname(string hostname);
    private static string EscapeReservedCspChars(string pathAndQuery);
    private static bool ValidatePort(string port);
}
public class NWebsec.Core.Common.HttpHeaders.Csp.InvalidCspSourceException : Exception {
    public InvalidCspSourceException(string s);
}
public class NWebsec.Core.Common.HttpHeaders.HeaderConstants : object {
    public static string XFrameOptionsHeader;
    public static string XRobotsTagHeader;
    public static string StrictTransportSecurityHeader;
    public static string XContentTypeOptionsHeader;
    public static string XDownloadOptionsHeader;
    public static string XXssProtectionHeader;
    public static string ContentSecurityPolicyHeader;
    public static string ContentSecurityPolicyReportOnlyHeader;
    public static string ReferrerPolicyHeader;
    public static String[] CspSourceList;
    public static String[] CspDirectives;
    public static String[] CspSchemes;
    private static HeaderConstants();
}
public class NWebsec.Core.Common.HttpHeaders.HeaderGenerator : object {
    public sealed virtual HeaderResult CreateXRobotsTagResult(IXRobotsTagConfiguration xRobotsTagConfig, IXRobotsTagConfiguration oldXRobotsTagConfig);
    public sealed virtual HeaderResult CreateHstsResult(IHstsConfiguration hstsConfig);
    public sealed virtual HeaderResult CreateXContentTypeOptionsResult(ISimpleBooleanConfiguration xContentTypeOptionsConfig, ISimpleBooleanConfiguration oldXContentTypeOptionsConfig);
    public sealed virtual HeaderResult CreateXDownloadOptionsResult(ISimpleBooleanConfiguration xDownloadOptionsConfig, ISimpleBooleanConfiguration oldXDownloadOptionsConfig);
    public sealed virtual HeaderResult CreateXXssProtectionResult(IXXssProtectionConfiguration xXssProtectionConfig, IXXssProtectionConfiguration oldXXssProtectionConfig);
    public sealed virtual HeaderResult CreateXfoResult(IXFrameOptionsConfiguration xfoConfig, IXFrameOptionsConfiguration oldXfoConfig);
    public sealed virtual HeaderResult CreateReferrerPolicyResult(IReferrerPolicyConfiguration rpConfig, IReferrerPolicyConfiguration oldRpConfig);
    public sealed virtual HeaderResult CreateCspResult(ICspConfiguration cspConfig, bool reportOnly, string builtinReportHandlerUri, ICspConfiguration oldCspConfig);
    private string CreateCspHeaderValue(ICspConfiguration config, string builtinReportHandlerUri);
    private void AppendDirective(StringBuilder sb, string directiveName, List`1<string> sources);
    private void AppendUpgradeDirective(StringBuilder sb, string directiveName, ICspUpgradeDirectiveConfiguration config);
    private void AppendMixedContentDirective(StringBuilder sb, string directiveName, ICspMixedContentDirectiveConfiguration config);
    private List`1<string> GetDirectiveList(ICspDirectiveConfiguration directive);
    private List`1<string> GetPluginTypesDirectiveList(ICspPluginTypesDirectiveConfiguration directive);
    private List`1<string> GetSandboxDirectiveList(ICspSandboxDirectiveConfiguration directive);
    private List`1<string> GetReportUriList(ICspReportUriDirectiveConfiguration directive, string builtinReportHandlerUri);
}
public class NWebsec.Core.Common.HttpHeaders.HeaderResult : object {
    [CompilerGeneratedAttribute]
private ResponseAction <Action>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Value>k__BackingField;
    public ResponseAction Action { get; public set; }
    public string Name { get; public set; }
    public string Value { get; public set; }
    public HeaderResult(ResponseAction action, string name, string value);
    [CompilerGeneratedAttribute]
public ResponseAction get_Action();
    [CompilerGeneratedAttribute]
public void set_Action(ResponseAction value);
    [CompilerGeneratedAttribute]
public string get_Name();
    [CompilerGeneratedAttribute]
public void set_Name(string value);
    [CompilerGeneratedAttribute]
public string get_Value();
    [CompilerGeneratedAttribute]
public void set_Value(string value);
}
public interface NWebsec.Core.Common.HttpHeaders.IHeaderGenerator {
    public abstract virtual HeaderResult CreateXRobotsTagResult(IXRobotsTagConfiguration xRobotsTagConfig, IXRobotsTagConfiguration oldXRobotsTagConfig);
    public abstract virtual HeaderResult CreateHstsResult(IHstsConfiguration hstsConfig);
    public abstract virtual HeaderResult CreateXContentTypeOptionsResult(ISimpleBooleanConfiguration xContentTypeOptionsConfig, ISimpleBooleanConfiguration oldXContentTypeOptionsConfig);
    public abstract virtual HeaderResult CreateXDownloadOptionsResult(ISimpleBooleanConfiguration xDownloadOptionsConfig, ISimpleBooleanConfiguration oldXDownloadOptionsConfig);
    public abstract virtual HeaderResult CreateXXssProtectionResult(IXXssProtectionConfiguration xXssProtectionConfig, IXXssProtectionConfiguration oldXXssProtectionConfig);
    public abstract virtual HeaderResult CreateXfoResult(IXFrameOptionsConfiguration xfoConfig, IXFrameOptionsConfiguration oldXfoConfig);
    public abstract virtual HeaderResult CreateReferrerPolicyResult(IReferrerPolicyConfiguration xfoConfig, IReferrerPolicyConfiguration oldXfoConfig);
    public abstract virtual HeaderResult CreateCspResult(ICspConfiguration cspConfig, bool reportOnly, string builtinReportHandlerUri, ICspConfiguration oldCspConfig);
}
public enum NWebsec.Core.Common.HttpHeaders.ReferrerPolicy : Enum {
    public int value__;
    public static ReferrerPolicy Disabled;
    public static ReferrerPolicy NoReferrer;
    public static ReferrerPolicy NoReferrerWhenDowngrade;
    public static ReferrerPolicy SameOrigin;
    public static ReferrerPolicy Origin;
    public static ReferrerPolicy StrictOrigin;
    public static ReferrerPolicy OriginWhenCrossOrigin;
    public static ReferrerPolicy StrictOriginWhenCrossOrigin;
    public static ReferrerPolicy UnsafeUrl;
}
public enum NWebsec.Core.Common.HttpHeaders.XfoPolicy : Enum {
    public int value__;
    public static XfoPolicy Disabled;
    public static XfoPolicy Deny;
    public static XfoPolicy SameOrigin;
}
public enum NWebsec.Core.Common.HttpHeaders.XXssPolicy : Enum {
    public int value__;
    public static XXssPolicy Disabled;
    public static XXssPolicy FilterDisabled;
    public static XXssPolicy FilterEnabled;
}
public class NWebsec.Core.Common.Middleware.Options.CspDirective : object {
    [CompilerGeneratedAttribute]
private bool <Enabled>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <NoneSrc>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <SelfSrc>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <UnsafeInlineSrc>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <UnsafeEvalSrc>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <StrictDynamicSrc>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Nonce>k__BackingField;
    [CompilerGeneratedAttribute]
private IEnumerable`1<string> <CustomSources>k__BackingField;
    [EditorBrowsableAttribute("1")]
public bool Enabled { get; public set; }
    [EditorBrowsableAttribute("1")]
public bool NoneSrc { get; public set; }
    [EditorBrowsableAttribute("1")]
public bool SelfSrc { get; public set; }
    [EditorBrowsableAttribute("1")]
public bool UnsafeInlineSrc { get; public set; }
    [EditorBrowsableAttribute("1")]
public bool UnsafeEvalSrc { get; public set; }
    [EditorBrowsableAttribute("1")]
public bool StrictDynamicSrc { get; public set; }
    [EditorBrowsableAttribute("1")]
public string Nonce { get; public set; }
    [EditorBrowsableAttribute("1")]
public IEnumerable`1<string> CustomSources { get; public set; }
    [CompilerGeneratedAttribute]
public sealed virtual bool get_Enabled();
    [CompilerGeneratedAttribute]
public sealed virtual void set_Enabled(bool value);
    [CompilerGeneratedAttribute]
public sealed virtual bool get_NoneSrc();
    [CompilerGeneratedAttribute]
public sealed virtual void set_NoneSrc(bool value);
    [CompilerGeneratedAttribute]
public sealed virtual bool get_SelfSrc();
    [CompilerGeneratedAttribute]
public sealed virtual void set_SelfSrc(bool value);
    [CompilerGeneratedAttribute]
public sealed virtual bool get_UnsafeInlineSrc();
    [CompilerGeneratedAttribute]
public sealed virtual void set_UnsafeInlineSrc(bool value);
    [CompilerGeneratedAttribute]
public sealed virtual bool get_UnsafeEvalSrc();
    [CompilerGeneratedAttribute]
public sealed virtual void set_UnsafeEvalSrc(bool value);
    [CompilerGeneratedAttribute]
public sealed virtual bool get_StrictDynamicSrc();
    [CompilerGeneratedAttribute]
public sealed virtual void set_StrictDynamicSrc(bool value);
    [CompilerGeneratedAttribute]
public sealed virtual string get_Nonce();
    [CompilerGeneratedAttribute]
public sealed virtual void set_Nonce(string value);
    [CompilerGeneratedAttribute]
public sealed virtual IEnumerable`1<string> get_CustomSources();
    [CompilerGeneratedAttribute]
public sealed virtual void set_CustomSources(IEnumerable`1<string> value);
    private sealed virtual override Type NWebsec.Core.Common.Fluent.IFluentInterface.GetType();
}
public class NWebsec.Core.Common.Middleware.Options.CspOptions : object {
    [CompilerGeneratedAttribute]
private bool <Enabled>k__BackingField;
    [CompilerGeneratedAttribute]
private ICspDirectiveConfiguration <DefaultSrcDirective>k__BackingField;
    [CompilerGeneratedAttribute]
private ICspDirectiveConfiguration <ScriptSrcDirective>k__BackingField;
    [CompilerGeneratedAttribute]
private ICspDirectiveConfiguration <ObjectSrcDirective>k__BackingField;
    [CompilerGeneratedAttribute]
private ICspDirectiveConfiguration <StyleSrcDirective>k__BackingField;
    [CompilerGeneratedAttribute]
private ICspDirectiveConfiguration <ImgSrcDirective>k__BackingField;
    [CompilerGeneratedAttribute]
private ICspDirectiveConfiguration <MediaSrcDirective>k__BackingField;
    [CompilerGeneratedAttribute]
private ICspDirectiveConfiguration <FrameSrcDirective>k__BackingField;
    [CompilerGeneratedAttribute]
private ICspDirectiveConfiguration <FontSrcDirective>k__BackingField;
    [CompilerGeneratedAttribute]
private ICspDirectiveConfiguration <ConnectSrcDirective>k__BackingField;
    [CompilerGeneratedAttribute]
private ICspDirectiveConfiguration <BaseUriDirective>k__BackingField;
    [CompilerGeneratedAttribute]
private ICspDirectiveConfiguration <ChildSrcDirective>k__BackingField;
    [CompilerGeneratedAttribute]
private ICspDirectiveConfiguration <FormActionDirective>k__BackingField;
    [CompilerGeneratedAttribute]
private ICspDirectiveConfiguration <FrameAncestorsDirective>k__BackingField;
    [CompilerGeneratedAttribute]
private ICspDirectiveConfiguration <ManifestSrcDirective>k__BackingField;
    [CompilerGeneratedAttribute]
private ICspDirectiveConfiguration <WorkerSrcDirective>k__BackingField;
    [CompilerGeneratedAttribute]
private ICspPluginTypesDirectiveConfiguration <PluginTypesDirective>k__BackingField;
    [CompilerGeneratedAttribute]
private ICspSandboxDirectiveConfiguration <SandboxDirective>k__BackingField;
    [CompilerGeneratedAttribute]
private ICspUpgradeDirectiveConfiguration <UpgradeInsecureRequestsDirective>k__BackingField;
    [CompilerGeneratedAttribute]
private ICspMixedContentDirectiveConfiguration <MixedContentDirective>k__BackingField;
    [CompilerGeneratedAttribute]
private ICspReportUriDirectiveConfiguration <ReportUriDirective>k__BackingField;
    public bool Enabled { get; public set; }
    public ICspDirectiveConfiguration DefaultSrcDirective { get; public set; }
    public ICspDirectiveConfiguration ScriptSrcDirective { get; public set; }
    public ICspDirectiveConfiguration ObjectSrcDirective { get; public set; }
    public ICspDirectiveConfiguration StyleSrcDirective { get; public set; }
    public ICspDirectiveConfiguration ImgSrcDirective { get; public set; }
    public ICspDirectiveConfiguration MediaSrcDirective { get; public set; }
    public ICspDirectiveConfiguration FrameSrcDirective { get; public set; }
    public ICspDirectiveConfiguration FontSrcDirective { get; public set; }
    public ICspDirectiveConfiguration ConnectSrcDirective { get; public set; }
    public ICspDirectiveConfiguration BaseUriDirective { get; public set; }
    public ICspDirectiveConfiguration ChildSrcDirective { get; public set; }
    public ICspDirectiveConfiguration FormActionDirective { get; public set; }
    public ICspDirectiveConfiguration FrameAncestorsDirective { get; public set; }
    public ICspDirectiveConfiguration ManifestSrcDirective { get; public set; }
    public ICspDirectiveConfiguration WorkerSrcDirective { get; public set; }
    public ICspPluginTypesDirectiveConfiguration PluginTypesDirective { get; public set; }
    public ICspSandboxDirectiveConfiguration SandboxDirective { get; public set; }
    public ICspUpgradeDirectiveConfiguration UpgradeInsecureRequestsDirective { get; public set; }
    public ICspMixedContentDirectiveConfiguration MixedContentDirective { get; public set; }
    public ICspReportUriDirectiveConfiguration ReportUriDirective { get; public set; }
    [CompilerGeneratedAttribute]
public sealed virtual bool get_Enabled();
    [CompilerGeneratedAttribute]
public sealed virtual void set_Enabled(bool value);
    [CompilerGeneratedAttribute]
public sealed virtual ICspDirectiveConfiguration get_DefaultSrcDirective();
    [CompilerGeneratedAttribute]
public sealed virtual void set_DefaultSrcDirective(ICspDirectiveConfiguration value);
    [CompilerGeneratedAttribute]
public sealed virtual ICspDirectiveConfiguration get_ScriptSrcDirective();
    [CompilerGeneratedAttribute]
public sealed virtual void set_ScriptSrcDirective(ICspDirectiveConfiguration value);
    [CompilerGeneratedAttribute]
public sealed virtual ICspDirectiveConfiguration get_ObjectSrcDirective();
    [CompilerGeneratedAttribute]
public sealed virtual void set_ObjectSrcDirective(ICspDirectiveConfiguration value);
    [CompilerGeneratedAttribute]
public sealed virtual ICspDirectiveConfiguration get_StyleSrcDirective();
    [CompilerGeneratedAttribute]
public sealed virtual void set_StyleSrcDirective(ICspDirectiveConfiguration value);
    [CompilerGeneratedAttribute]
public sealed virtual ICspDirectiveConfiguration get_ImgSrcDirective();
    [CompilerGeneratedAttribute]
public sealed virtual void set_ImgSrcDirective(ICspDirectiveConfiguration value);
    [CompilerGeneratedAttribute]
public sealed virtual ICspDirectiveConfiguration get_MediaSrcDirective();
    [CompilerGeneratedAttribute]
public sealed virtual void set_MediaSrcDirective(ICspDirectiveConfiguration value);
    [CompilerGeneratedAttribute]
public sealed virtual ICspDirectiveConfiguration get_FrameSrcDirective();
    [CompilerGeneratedAttribute]
public sealed virtual void set_FrameSrcDirective(ICspDirectiveConfiguration value);
    [CompilerGeneratedAttribute]
public sealed virtual ICspDirectiveConfiguration get_FontSrcDirective();
    [CompilerGeneratedAttribute]
public sealed virtual void set_FontSrcDirective(ICspDirectiveConfiguration value);
    [CompilerGeneratedAttribute]
public sealed virtual ICspDirectiveConfiguration get_ConnectSrcDirective();
    [CompilerGeneratedAttribute]
public sealed virtual void set_ConnectSrcDirective(ICspDirectiveConfiguration value);
    [CompilerGeneratedAttribute]
public sealed virtual ICspDirectiveConfiguration get_BaseUriDirective();
    [CompilerGeneratedAttribute]
public sealed virtual void set_BaseUriDirective(ICspDirectiveConfiguration value);
    [CompilerGeneratedAttribute]
public sealed virtual ICspDirectiveConfiguration get_ChildSrcDirective();
    [CompilerGeneratedAttribute]
public sealed virtual void set_ChildSrcDirective(ICspDirectiveConfiguration value);
    [CompilerGeneratedAttribute]
public sealed virtual ICspDirectiveConfiguration get_FormActionDirective();
    [CompilerGeneratedAttribute]
public sealed virtual void set_FormActionDirective(ICspDirectiveConfiguration value);
    [CompilerGeneratedAttribute]
public sealed virtual ICspDirectiveConfiguration get_FrameAncestorsDirective();
    [CompilerGeneratedAttribute]
public sealed virtual void set_FrameAncestorsDirective(ICspDirectiveConfiguration value);
    [CompilerGeneratedAttribute]
public sealed virtual ICspDirectiveConfiguration get_ManifestSrcDirective();
    [CompilerGeneratedAttribute]
public sealed virtual void set_ManifestSrcDirective(ICspDirectiveConfiguration value);
    [CompilerGeneratedAttribute]
public sealed virtual ICspDirectiveConfiguration get_WorkerSrcDirective();
    [CompilerGeneratedAttribute]
public sealed virtual void set_WorkerSrcDirective(ICspDirectiveConfiguration value);
    [CompilerGeneratedAttribute]
public sealed virtual ICspPluginTypesDirectiveConfiguration get_PluginTypesDirective();
    [CompilerGeneratedAttribute]
public sealed virtual void set_PluginTypesDirective(ICspPluginTypesDirectiveConfiguration value);
    [CompilerGeneratedAttribute]
public sealed virtual ICspSandboxDirectiveConfiguration get_SandboxDirective();
    [CompilerGeneratedAttribute]
public sealed virtual void set_SandboxDirective(ICspSandboxDirectiveConfiguration value);
    [CompilerGeneratedAttribute]
public sealed virtual ICspUpgradeDirectiveConfiguration get_UpgradeInsecureRequestsDirective();
    [CompilerGeneratedAttribute]
public sealed virtual void set_UpgradeInsecureRequestsDirective(ICspUpgradeDirectiveConfiguration value);
    [CompilerGeneratedAttribute]
public sealed virtual ICspMixedContentDirectiveConfiguration get_MixedContentDirective();
    [CompilerGeneratedAttribute]
public sealed virtual void set_MixedContentDirective(ICspMixedContentDirectiveConfiguration value);
    [CompilerGeneratedAttribute]
public sealed virtual ICspReportUriDirectiveConfiguration get_ReportUriDirective();
    [CompilerGeneratedAttribute]
public sealed virtual void set_ReportUriDirective(ICspReportUriDirectiveConfiguration value);
    public sealed virtual IFluentCspOptions DefaultSources(Action`1<ICspDirectiveBasicConfiguration> configurer);
    public sealed virtual IFluentCspOptions ScriptSources(Action`1<ICspDirectiveConfiguration> configurer);
    public sealed virtual IFluentCspOptions ObjectSources(Action`1<ICspDirectiveBasicConfiguration> configurer);
    public sealed virtual IFluentCspOptions StyleSources(Action`1<ICspDirectiveUnsafeInlineConfiguration> configurer);
    public sealed virtual IFluentCspOptions ImageSources(Action`1<ICspDirectiveBasicConfiguration> configurer);
    public sealed virtual IFluentCspOptions MediaSources(Action`1<ICspDirectiveBasicConfiguration> configurer);
    public sealed virtual IFluentCspOptions FrameSources(Action`1<ICspDirectiveBasicConfiguration> configurer);
    public sealed virtual IFluentCspOptions FontSources(Action`1<ICspDirectiveBasicConfiguration> configurer);
    public sealed virtual IFluentCspOptions ConnectSources(Action`1<ICspDirectiveBasicConfiguration> configurer);
    public sealed virtual IFluentCspOptions BaseUris(Action`1<ICspDirectiveBasicConfiguration> configurer);
    public sealed virtual IFluentCspOptions ChildSources(Action`1<ICspDirectiveBasicConfiguration> configurer);
    public sealed virtual IFluentCspOptions FormActions(Action`1<ICspDirectiveBasicConfiguration> configurer);
    public sealed virtual IFluentCspOptions FrameAncestors(Action`1<ICspDirectiveBasicConfiguration> configurer);
    public sealed virtual IFluentCspOptions ManifestSources(Action`1<ICspDirectiveBasicConfiguration> configurer);
    public sealed virtual IFluentCspOptions WorkerSources(Action`1<ICspDirectiveBasicConfiguration> configurer);
    public sealed virtual IFluentCspOptions PluginTypes(Action`1<IFluentCspPluginTypesDirective> configurer);
    public sealed virtual IFluentCspOptions Sandbox();
    public sealed virtual IFluentCspOptions Sandbox(Action`1<IFluentCspSandboxDirective> configurer);
    public sealed virtual IFluentCspOptions UpgradeInsecureRequests(int httpsPort);
    public sealed virtual IFluentCspOptions BlockAllMixedContent();
    public sealed virtual IFluentCspOptions ReportUris(Action`1<IFluentCspReportUriDirective> configurer);
    private sealed virtual override Type NWebsec.Core.Common.Fluent.IFluentInterface.GetType();
}
public class NWebsec.Core.Common.Middleware.Options.CspReportUriDirective : object {
    [CompilerGeneratedAttribute]
private bool <Enabled>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <EnableBuiltinHandler>k__BackingField;
    [CompilerGeneratedAttribute]
private IEnumerable`1<string> <ReportUris>k__BackingField;
    public bool Enabled { get; public set; }
    public bool EnableBuiltinHandler { get; public set; }
    public IEnumerable`1<string> ReportUris { get; public set; }
    [CompilerGeneratedAttribute]
public sealed virtual bool get_Enabled();
    [CompilerGeneratedAttribute]
public sealed virtual void set_Enabled(bool value);
    [CompilerGeneratedAttribute]
public sealed virtual bool get_EnableBuiltinHandler();
    [CompilerGeneratedAttribute]
public sealed virtual void set_EnableBuiltinHandler(bool value);
    [CompilerGeneratedAttribute]
public sealed virtual IEnumerable`1<string> get_ReportUris();
    [CompilerGeneratedAttribute]
public sealed virtual void set_ReportUris(IEnumerable`1<string> value);
    public sealed virtual void Uris(String[] reportUris);
    private sealed virtual override Type NWebsec.Core.Common.Fluent.IFluentInterface.GetType();
}
public class NWebsec.Core.Common.Middleware.Options.FluentCspPluginTypesDirective : CspPluginTypesDirectiveConfiguration {
    public sealed virtual void MediaTypes(String[] mediaTypes);
    private sealed virtual override Type NWebsec.Core.Common.Fluent.IFluentInterface.GetType();
}
internal class NWebsec.Core.Common.Middleware.Options.FluentCspSandboxDirective : CspSandboxDirectiveConfiguration {
    public sealed virtual IFluentCspSandboxDirective AllowForms();
    public sealed virtual IFluentCspSandboxDirective AllowModals();
    public sealed virtual IFluentCspSandboxDirective AllowOrientationLock();
    public sealed virtual IFluentCspSandboxDirective AllowPointerLock();
    public sealed virtual IFluentCspSandboxDirective AllowPopups();
    public sealed virtual IFluentCspSandboxDirective AllowPopupsToEscapeSandbox();
    public sealed virtual IFluentCspSandboxDirective AllowPresentation();
    public sealed virtual IFluentCspSandboxDirective AllowSameOrigin();
    public sealed virtual IFluentCspSandboxDirective AllowScripts();
    public sealed virtual IFluentCspSandboxDirective AllowTopNavigation();
    private sealed virtual override Type NWebsec.Core.Common.Fluent.IFluentInterface.GetType();
}
public class NWebsec.Core.Common.Middleware.Options.HstsOptions : HstsOptionsConfiguration {
    public sealed virtual IFluentHstsOptions MaxAge(int days, int hours, int minutes, int seconds);
    public sealed virtual IFluentHstsOptions IncludeSubdomains();
    public sealed virtual IFluentHstsOptions Preload();
    public sealed virtual IFluentHstsOptions UpgradeInsecureRequests();
    public sealed virtual IFluentHstsOptions AllResponses();
    public sealed virtual IFluentHstsOptions HttpsOnly();
    private sealed virtual override Type NWebsec.Core.Common.Fluent.IFluentInterface.GetType();
}
public class NWebsec.Core.Common.Middleware.Options.HstsOptionsConfiguration : object {
    [CompilerGeneratedAttribute]
private TimeSpan <MaxAge>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IncludeSubdomains>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <Preload>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <HttpsOnly>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <UpgradeInsecureRequests>k__BackingField;
    [EditorBrowsableAttribute("1")]
public TimeSpan MaxAge { get; public set; }
    [EditorBrowsableAttribute("1")]
public bool IncludeSubdomains { get; public set; }
    [EditorBrowsableAttribute("1")]
public bool Preload { get; public set; }
    [EditorBrowsableAttribute("1")]
public bool HttpsOnly { get; public set; }
    [EditorBrowsableAttribute("1")]
public bool UpgradeInsecureRequests { get; public set; }
    [CompilerGeneratedAttribute]
public sealed virtual TimeSpan get_MaxAge();
    [CompilerGeneratedAttribute]
public sealed virtual void set_MaxAge(TimeSpan value);
    [CompilerGeneratedAttribute]
public sealed virtual bool get_IncludeSubdomains();
    [CompilerGeneratedAttribute]
public sealed virtual void set_IncludeSubdomains(bool value);
    [CompilerGeneratedAttribute]
public sealed virtual bool get_Preload();
    [CompilerGeneratedAttribute]
public sealed virtual void set_Preload(bool value);
    [CompilerGeneratedAttribute]
public sealed virtual bool get_HttpsOnly();
    [CompilerGeneratedAttribute]
public sealed virtual void set_HttpsOnly(bool value);
    [CompilerGeneratedAttribute]
public sealed virtual bool get_UpgradeInsecureRequests();
    [CompilerGeneratedAttribute]
public sealed virtual void set_UpgradeInsecureRequests(bool value);
}
public interface NWebsec.Core.Common.Middleware.Options.IFluentCspOptions {
    public abstract virtual IFluentCspOptions DefaultSources(Action`1<ICspDirectiveBasicConfiguration> configurer);
    public abstract virtual IFluentCspOptions ScriptSources(Action`1<ICspDirectiveConfiguration> configurer);
    public abstract virtual IFluentCspOptions ObjectSources(Action`1<ICspDirectiveBasicConfiguration> configurer);
    public abstract virtual IFluentCspOptions StyleSources(Action`1<ICspDirectiveUnsafeInlineConfiguration> configurer);
    public abstract virtual IFluentCspOptions ImageSources(Action`1<ICspDirectiveBasicConfiguration> configurer);
    public abstract virtual IFluentCspOptions MediaSources(Action`1<ICspDirectiveBasicConfiguration> configurer);
    public abstract virtual IFluentCspOptions FrameSources(Action`1<ICspDirectiveBasicConfiguration> configurer);
    public abstract virtual IFluentCspOptions FontSources(Action`1<ICspDirectiveBasicConfiguration> configurer);
    public abstract virtual IFluentCspOptions ConnectSources(Action`1<ICspDirectiveBasicConfiguration> configurer);
    public abstract virtual IFluentCspOptions BaseUris(Action`1<ICspDirectiveBasicConfiguration> configurer);
    public abstract virtual IFluentCspOptions ChildSources(Action`1<ICspDirectiveBasicConfiguration> configurer);
    public abstract virtual IFluentCspOptions FormActions(Action`1<ICspDirectiveBasicConfiguration> configurer);
    public abstract virtual IFluentCspOptions FrameAncestors(Action`1<ICspDirectiveBasicConfiguration> configurer);
    public abstract virtual IFluentCspOptions ManifestSources(Action`1<ICspDirectiveBasicConfiguration> configurer);
    public abstract virtual IFluentCspOptions WorkerSources(Action`1<ICspDirectiveBasicConfiguration> configurer);
    public abstract virtual IFluentCspOptions PluginTypes(Action`1<IFluentCspPluginTypesDirective> configurer);
    public abstract virtual IFluentCspOptions Sandbox();
    public abstract virtual IFluentCspOptions Sandbox(Action`1<IFluentCspSandboxDirective> configurer);
    public abstract virtual IFluentCspOptions UpgradeInsecureRequests(int httpsPort);
    public abstract virtual IFluentCspOptions BlockAllMixedContent();
    public abstract virtual IFluentCspOptions ReportUris(Action`1<IFluentCspReportUriDirective> configurer);
}
public interface NWebsec.Core.Common.Middleware.Options.IFluentCspPluginTypesDirective {
    public abstract virtual void MediaTypes(String[] pluginType);
}
public interface NWebsec.Core.Common.Middleware.Options.IFluentCspReportUriDirective {
    public abstract virtual void Uris(String[] reportUris);
}
public interface NWebsec.Core.Common.Middleware.Options.IFluentCspSandboxDirective {
    public abstract virtual IFluentCspSandboxDirective AllowForms();
    public abstract virtual IFluentCspSandboxDirective AllowModals();
    public abstract virtual IFluentCspSandboxDirective AllowOrientationLock();
    public abstract virtual IFluentCspSandboxDirective AllowPointerLock();
    public abstract virtual IFluentCspSandboxDirective AllowPopups();
    public abstract virtual IFluentCspSandboxDirective AllowPopupsToEscapeSandbox();
    public abstract virtual IFluentCspSandboxDirective AllowPresentation();
    public abstract virtual IFluentCspSandboxDirective AllowSameOrigin();
    public abstract virtual IFluentCspSandboxDirective AllowScripts();
    public abstract virtual IFluentCspSandboxDirective AllowTopNavigation();
}
[ObsoleteAttribute("The Public-Key-Pins header has been deprecated and recent browser versions have removed support for it.", "True")]
public interface NWebsec.Core.Common.Middleware.Options.IFluentHpkpOptions {
    public abstract virtual IFluentHpkpOptions MaxAge(int days, int hours, int minutes, int seconds);
    public abstract virtual IFluentHpkpOptions IncludeSubdomains();
    public abstract virtual IFluentHpkpOptions ReportUri(string reportUri);
    public abstract virtual IFluentHpkpOptions AllResponses();
    public abstract virtual IFluentHpkpOptions Sha256Pins(String[] pins);
    public abstract virtual IFluentHpkpOptions PinCertificate(string thumbprint, StoreLocation storeLocation, StoreName storeName);
}
public interface NWebsec.Core.Common.Middleware.Options.IFluentHstsOptions {
    public abstract virtual IFluentHstsOptions MaxAge(int days, int hours, int minutes, int seconds);
    public abstract virtual IFluentHstsOptions IncludeSubdomains();
    public abstract virtual IFluentHstsOptions Preload();
    public abstract virtual IFluentHstsOptions UpgradeInsecureRequests();
    public abstract virtual IFluentHstsOptions AllResponses();
    [ObsoleteAttribute("This method is deprecated as the default has been changed to HTTPS only.", "True")]
public abstract virtual IFluentHstsOptions HttpsOnly();
}
public interface NWebsec.Core.Common.Middleware.Options.IFluentRedirectValidationOptions {
    public abstract virtual IFluentRedirectValidationOptions AllowedDestinations(String[] uris);
    public abstract virtual IFluentRedirectValidationOptions AllowSameHostRedirectsToHttps(Int32[] httpsPorts);
}
public interface NWebsec.Core.Common.Middleware.Options.IFluentReferrerPolicyOptions {
    public abstract virtual void NoReferrer();
    public abstract virtual void NoReferrerWhenDowngrade();
    public abstract virtual void SameOrigin();
    public abstract virtual void Origin();
    public abstract virtual void StrictOrigin();
    public abstract virtual void OriginWhenCrossOrigin();
    public abstract virtual void StrictOriginWhenCrossOrigin();
    public abstract virtual void UnsafeUrl();
}
public interface NWebsec.Core.Common.Middleware.Options.IFluentXFrameOptions {
    public abstract virtual void Deny();
    public abstract virtual void SameOrigin();
}
public interface NWebsec.Core.Common.Middleware.Options.IFluentXRobotsTagOptions {
    public abstract virtual IFluentXRobotsTagOptions NoIndex();
    public abstract virtual IFluentXRobotsTagOptions NoFollow();
    public abstract virtual IFluentXRobotsTagOptions NoSnippet();
    public abstract virtual IFluentXRobotsTagOptions NoArchive();
    public abstract virtual IFluentXRobotsTagOptions NoOdp();
    public abstract virtual IFluentXRobotsTagOptions NoTranslate();
    public abstract virtual IFluentXRobotsTagOptions NoImageIndex();
}
public interface NWebsec.Core.Common.Middleware.Options.IFluentXXssProtectionOptions {
    public abstract virtual void Disabled();
    public abstract virtual void Enabled();
    public abstract virtual void EnabledWithBlockMode();
}
public class NWebsec.Core.Common.Middleware.Options.RedirectValidationOptions : object {
    [CompilerGeneratedAttribute]
private bool <Enabled>k__BackingField;
    [CompilerGeneratedAttribute]
private IEnumerable`1<string> <AllowedUris>k__BackingField;
    [CompilerGeneratedAttribute]
private ISameHostHttpsRedirectConfiguration <SameHostRedirectConfiguration>k__BackingField;
    public bool Enabled { get; public set; }
    public IEnumerable`1<string> AllowedUris { get; public set; }
    public ISameHostHttpsRedirectConfiguration SameHostRedirectConfiguration { get; public set; }
    [CompilerGeneratedAttribute]
public sealed virtual bool get_Enabled();
    [CompilerGeneratedAttribute]
public sealed virtual void set_Enabled(bool value);
    [CompilerGeneratedAttribute]
public sealed virtual IEnumerable`1<string> get_AllowedUris();
    [CompilerGeneratedAttribute]
public sealed virtual void set_AllowedUris(IEnumerable`1<string> value);
    [CompilerGeneratedAttribute]
public sealed virtual ISameHostHttpsRedirectConfiguration get_SameHostRedirectConfiguration();
    [CompilerGeneratedAttribute]
public sealed virtual void set_SameHostRedirectConfiguration(ISameHostHttpsRedirectConfiguration value);
    public sealed virtual IFluentRedirectValidationOptions AllowedDestinations(String[] uris);
    public sealed virtual IFluentRedirectValidationOptions AllowSameHostRedirectsToHttps(Int32[] httpsPorts);
    private sealed virtual override Type NWebsec.Core.Common.Fluent.IFluentInterface.GetType();
}
public class NWebsec.Core.Common.Middleware.Options.ReferrerPolicyOptions : object {
    [CompilerGeneratedAttribute]
private ReferrerPolicy <Policy>k__BackingField;
    public ReferrerPolicy Policy { get; public set; }
    [CompilerGeneratedAttribute]
public sealed virtual ReferrerPolicy get_Policy();
    [CompilerGeneratedAttribute]
public sealed virtual void set_Policy(ReferrerPolicy value);
    public sealed virtual void NoReferrer();
    public sealed virtual void NoReferrerWhenDowngrade();
    public sealed virtual void SameOrigin();
    public sealed virtual void Origin();
    public sealed virtual void StrictOrigin();
    public sealed virtual void OriginWhenCrossOrigin();
    public sealed virtual void StrictOriginWhenCrossOrigin();
    public sealed virtual void UnsafeUrl();
    private sealed virtual override Type NWebsec.Core.Common.Fluent.IFluentInterface.GetType();
}
public class NWebsec.Core.Common.Middleware.Options.XFrameOptions : object {
    [CompilerGeneratedAttribute]
private XfoPolicy <Policy>k__BackingField;
    public XfoPolicy Policy { get; public set; }
    [CompilerGeneratedAttribute]
public sealed virtual XfoPolicy get_Policy();
    [CompilerGeneratedAttribute]
public sealed virtual void set_Policy(XfoPolicy value);
    public sealed virtual void Deny();
    public sealed virtual void SameOrigin();
    private sealed virtual override Type NWebsec.Core.Common.Fluent.IFluentInterface.GetType();
}
public class NWebsec.Core.Common.Middleware.Options.XRobotsTagOptions : object {
    [CompilerGeneratedAttribute]
private XRobotsTagConfiguration <Config>k__BackingField;
    public XRobotsTagConfiguration Config { get; }
    [CompilerGeneratedAttribute]
public XRobotsTagConfiguration get_Config();
    public sealed virtual IFluentXRobotsTagOptions NoIndex();
    public sealed virtual IFluentXRobotsTagOptions NoFollow();
    public sealed virtual IFluentXRobotsTagOptions NoSnippet();
    public sealed virtual IFluentXRobotsTagOptions NoArchive();
    public sealed virtual IFluentXRobotsTagOptions NoOdp();
    public sealed virtual IFluentXRobotsTagOptions NoTranslate();
    public sealed virtual IFluentXRobotsTagOptions NoImageIndex();
    private sealed virtual override Type NWebsec.Core.Common.Fluent.IFluentInterface.GetType();
}
public class NWebsec.Core.Common.Middleware.Options.XXssProtectionOptions : object {
    [CompilerGeneratedAttribute]
private XXssPolicy <Policy>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <BlockMode>k__BackingField;
    [EditorBrowsableAttribute("1")]
public XXssPolicy Policy { get; public set; }
    [EditorBrowsableAttribute("1")]
public bool BlockMode { get; public set; }
    [CompilerGeneratedAttribute]
public sealed virtual XXssPolicy get_Policy();
    [CompilerGeneratedAttribute]
public sealed virtual void set_Policy(XXssPolicy value);
    [CompilerGeneratedAttribute]
public sealed virtual bool get_BlockMode();
    [CompilerGeneratedAttribute]
public sealed virtual void set_BlockMode(bool value);
    public sealed virtual void Disabled();
    public sealed virtual void Enabled();
    public sealed virtual void EnabledWithBlockMode();
    private sealed virtual override Type NWebsec.Core.Common.Fluent.IFluentInterface.GetType();
}
public class NWebsec.Core.Common.NWebsecContext : object {
    public static string ContextKey;
    public static string ContextKeyOverrides;
    [CompilerGeneratedAttribute]
private ISimpleBooleanConfiguration <NoCacheHeaders>k__BackingField;
    [CompilerGeneratedAttribute]
private ISimpleBooleanConfiguration <XContentTypeOptions>k__BackingField;
    [CompilerGeneratedAttribute]
private ISimpleBooleanConfiguration <XDownloadOptions>k__BackingField;
    [CompilerGeneratedAttribute]
private IXFrameOptionsConfiguration <XFrameOptions>k__BackingField;
    [CompilerGeneratedAttribute]
private IXRobotsTagConfiguration <XRobotsTag>k__BackingField;
    [CompilerGeneratedAttribute]
private IXXssProtectionConfiguration <XXssProtection>k__BackingField;
    [CompilerGeneratedAttribute]
private IReferrerPolicyConfiguration <ReferrerPolicy>k__BackingField;
    [CompilerGeneratedAttribute]
private ICspConfiguration <Csp>k__BackingField;
    [CompilerGeneratedAttribute]
private ICspConfiguration <CspReportOnly>k__BackingField;
    [CompilerGeneratedAttribute]
private ConfigurationOverrides <ConfigOverrides>k__BackingField;
    public ISimpleBooleanConfiguration NoCacheHeaders { get; public set; }
    public ISimpleBooleanConfiguration XContentTypeOptions { get; public set; }
    public ISimpleBooleanConfiguration XDownloadOptions { get; public set; }
    public IXFrameOptionsConfiguration XFrameOptions { get; public set; }
    public IXRobotsTagConfiguration XRobotsTag { get; public set; }
    public IXXssProtectionConfiguration XXssProtection { get; public set; }
    public IReferrerPolicyConfiguration ReferrerPolicy { get; public set; }
    public ICspConfiguration Csp { get; public set; }
    public ICspConfiguration CspReportOnly { get; public set; }
    public ConfigurationOverrides ConfigOverrides { get; public set; }
    private static NWebsecContext();
    [CompilerGeneratedAttribute]
public ISimpleBooleanConfiguration get_NoCacheHeaders();
    [CompilerGeneratedAttribute]
public void set_NoCacheHeaders(ISimpleBooleanConfiguration value);
    [CompilerGeneratedAttribute]
public ISimpleBooleanConfiguration get_XContentTypeOptions();
    [CompilerGeneratedAttribute]
public void set_XContentTypeOptions(ISimpleBooleanConfiguration value);
    [CompilerGeneratedAttribute]
public ISimpleBooleanConfiguration get_XDownloadOptions();
    [CompilerGeneratedAttribute]
public void set_XDownloadOptions(ISimpleBooleanConfiguration value);
    [CompilerGeneratedAttribute]
public IXFrameOptionsConfiguration get_XFrameOptions();
    [CompilerGeneratedAttribute]
public void set_XFrameOptions(IXFrameOptionsConfiguration value);
    [CompilerGeneratedAttribute]
public IXRobotsTagConfiguration get_XRobotsTag();
    [CompilerGeneratedAttribute]
public void set_XRobotsTag(IXRobotsTagConfiguration value);
    [CompilerGeneratedAttribute]
public IXXssProtectionConfiguration get_XXssProtection();
    [CompilerGeneratedAttribute]
public void set_XXssProtection(IXXssProtectionConfiguration value);
    [CompilerGeneratedAttribute]
public IReferrerPolicyConfiguration get_ReferrerPolicy();
    [CompilerGeneratedAttribute]
public void set_ReferrerPolicy(IReferrerPolicyConfiguration value);
    [CompilerGeneratedAttribute]
public ICspConfiguration get_Csp();
    [CompilerGeneratedAttribute]
public void set_Csp(ICspConfiguration value);
    [CompilerGeneratedAttribute]
public ICspConfiguration get_CspReportOnly();
    [CompilerGeneratedAttribute]
public void set_CspReportOnly(ICspConfiguration value);
    [CompilerGeneratedAttribute]
public ConfigurationOverrides get_ConfigOverrides();
    [CompilerGeneratedAttribute]
public void set_ConfigOverrides(ConfigurationOverrides value);
}
public interface NWebsec.Core.Common.Web.IHeaderResultHandler {
    public abstract virtual void HandleHeaderResult(IHttpContextWrapper httpContext, HeaderResult result);
}
public interface NWebsec.Core.Common.Web.IHttpContextWrapper {
    public abstract virtual T GetOriginalHttpContext();
    public abstract virtual NWebsecContext GetNWebsecContext();
    public abstract virtual NWebsecContext GetNWebsecOwinContext();
    public abstract virtual NWebsecContext GetNWebsecOverrideContext();
    public abstract virtual void SetItem(string key, T value);
    public abstract virtual T GetItem(string key);
    public abstract virtual void SetHttpHeader(string name, string value);
    public abstract virtual void RemoveHttpHeader(string name);
    public abstract virtual void SetNoCacheHeaders();
}
public class NWebsec.Core.Web.HeaderResultHandler : object {
    public sealed virtual void HandleHeaderResult(IHttpContextWrapper httpContext, HeaderResult result);
}
