public abstract class ObjectsComparer.AbstractComparer : BaseComparer {
    protected AbstractComparer(ComparisonSettings settings, BaseComparer parentComparer, IComparersFactory factory);
    public abstract virtual IEnumerable`1<Difference> CalculateDifferences(Type type, object obj1, object obj2);
    public sealed virtual IEnumerable`1<Difference> CalculateDifferences(T obj1, T obj2);
    public sealed virtual bool Compare(Type type, object obj1, object obj2, IEnumerable`1& differences);
    public sealed virtual bool Compare(Type type, object obj1, object obj2);
    public sealed virtual bool Compare(T obj1, T obj2, IEnumerable`1& differences);
    public sealed virtual bool Compare(T obj1, T obj2);
}
public abstract class ObjectsComparer.AbstractComparer`1 : BaseComparer {
    protected AbstractComparer`1(ComparisonSettings settings, BaseComparer parentComparer, IComparersFactory factory);
    public sealed virtual bool Compare(T obj1, T obj2, IEnumerable`1& differences);
    public sealed virtual bool Compare(T obj1, T obj2);
    public abstract virtual IEnumerable`1<Difference> CalculateDifferences(T obj1, T obj2);
}
internal abstract class ObjectsComparer.AbstractDynamicObjectsComprer`1 : AbstractComparer {
    protected AbstractDynamicObjectsComprer`1(ComparisonSettings settings, BaseComparer parentComparer, IComparersFactory factory);
    [IteratorStateMachineAttribute("ObjectsComparer.AbstractDynamicObjectsComprer`1/<CalculateDifferences>d__1")]
public virtual IEnumerable`1<Difference> CalculateDifferences(Type type, object obj1, object obj2);
    public abstract virtual bool IsMatch(Type type, object obj1, object obj2);
    public abstract virtual bool IsStopComparison(Type type, object obj1, object obj2);
    public abstract virtual bool SkipMember(Type type, MemberInfo member);
    protected abstract virtual IList`1<string> GetProperties(T obj);
    protected abstract virtual bool TryGetMemberValue(T obj, string propertyName, Object& value);
}
internal abstract class ObjectsComparer.AbstractEnumerablesComparer : AbstractComparer {
    protected AbstractEnumerablesComparer(ComparisonSettings settings, BaseComparer parentComparer, IComparersFactory factory);
    public sealed virtual bool IsStopComparison(Type type, object obj1, object obj2);
    public virtual bool SkipMember(Type type, MemberInfo member);
    public abstract virtual IEnumerable`1<Difference> CalculateDifferences(Type type, object obj1, object obj2);
    public abstract virtual bool IsMatch(Type type, object obj1, object obj2);
}
public abstract class ObjectsComparer.AbstractValueComparer : object {
    public abstract virtual bool Compare(object obj1, object obj2, ComparisonSettings settings);
    public virtual string ToString(object value);
}
public abstract class ObjectsComparer.AbstractValueComparer`1 : AbstractValueComparer {
    public abstract virtual bool Compare(T obj1, T obj2, ComparisonSettings settings);
    public virtual string ToString(T value);
    public virtual bool Compare(object obj1, object obj2, ComparisonSettings settings);
}
public abstract class ObjectsComparer.BaseComparer : object {
    [CompilerGeneratedAttribute]
private ComparisonSettings <Settings>k__BackingField;
    [CompilerGeneratedAttribute]
private IValueComparer <DefaultValueComparer>k__BackingField;
    [CompilerGeneratedAttribute]
private IComparersFactory <Factory>k__BackingField;
    [CompilerGeneratedAttribute]
private ComparerOverridesCollection <OverridesCollection>k__BackingField;
    public ComparisonSettings Settings { get; }
    public IValueComparer DefaultValueComparer { get; private set; }
    protected IComparersFactory Factory { get; }
    internal ComparerOverridesCollection OverridesCollection { get; }
    protected BaseComparer(ComparisonSettings settings, BaseComparer parentComparer, IComparersFactory factory);
    [CompilerGeneratedAttribute]
public sealed virtual ComparisonSettings get_Settings();
    [CompilerGeneratedAttribute]
public sealed virtual IValueComparer get_DefaultValueComparer();
    [CompilerGeneratedAttribute]
private void set_DefaultValueComparer(IValueComparer value);
    [CompilerGeneratedAttribute]
protected IComparersFactory get_Factory();
    [CompilerGeneratedAttribute]
internal ComparerOverridesCollection get_OverridesCollection();
    public sealed virtual void AddComparerOverride(Type type, IValueComparer valueComparer, Func`2<MemberInfo, bool> filter);
    public void AddComparerOverride(IValueComparer valueComparer, Func`2<MemberInfo, bool> filter);
    public sealed virtual void AddComparerOverride(IValueComparer valueComparer, Func`2<MemberInfo, bool> filter);
    public sealed virtual void AddComparerOverride(Expression`1<Func`1<TProp>> memberLambda, IValueComparer valueComparer);
    public sealed virtual void AddComparerOverride(Expression`1<Func`1<TProp>> memberLambda, Func`4<TProp, TProp, ComparisonSettings, bool> compareFunction, Func`2<TProp, string> toStringFunction);
    public sealed virtual void AddComparerOverride(Expression`1<Func`1<TProp>> memberLambda, Func`4<TProp, TProp, ComparisonSettings, bool> compareFunction);
    public sealed virtual void AddComparerOverride(MemberInfo memberInfo, IValueComparer valueComparer);
    public sealed virtual void AddComparerOverride(string memberName, IValueComparer valueComparer, Func`2<MemberInfo, bool> filter);
    public sealed virtual void SetDefaultComparer(IValueComparer valueComparer);
    public void IgnoreMember();
    public void IgnoreMember(Expression`1<Func`1<TProp>> memberLambda);
    public void IgnoreMember(string memberName);
    public void IgnoreMember(Func`2<MemberInfo, bool> filter);
}
public class ObjectsComparer.Comparer : AbstractComparer {
    private static string CalculateDifferencesMethodName { get; }
    public Comparer(ComparisonSettings settings, BaseComparer parentComparer, IComparersFactory factory);
    private static string get_CalculateDifferencesMethodName();
    public virtual IEnumerable`1<Difference> CalculateDifferences(Type type, object obj1, object obj2);
}
public class ObjectsComparer.Comparer`1 : AbstractComparer`1<T> {
    private List`1<MemberInfo> _members;
    private List`1<IComparerWithCondition> _conditionalComparers;
    public Comparer`1(ComparisonSettings settings, BaseComparer parentComparer, IComparersFactory factory);
    public virtual IEnumerable`1<Difference> CalculateDifferences(T obj1, T obj2);
    [IteratorStateMachineAttribute("ObjectsComparer.Comparer`1/<CalculateDifferences>d__4")]
internal IEnumerable`1<Difference> CalculateDifferences(T obj1, T obj2, MemberInfo memberInfo);
    private List`1<PropertyInfo> GetProperties(Type type, List`1<Type> processedTypes);
}
internal class ObjectsComparer.ComparerOverridesCollection : object {
    private List`1<Tuple`2<Func`2<MemberInfo, bool>, IValueComparer>> _overridesByMemberFilter;
    private Dictionary`2<MemberInfo, IValueComparer> _overridesByMember;
    private Dictionary`2<Type, List`1<ValueComparerWithFilter>> _overridesByType;
    private Dictionary`2<string, List`1<ValueComparerWithFilter>> _overridesByName;
    public void AddComparer(MemberInfo memberInfo, IValueComparer valueComparer);
    public void AddComparer(IValueComparer valueComparer, Func`2<MemberInfo, bool> filter);
    public void AddComparer(Type type, IValueComparer valueComparer, Func`2<MemberInfo, bool> filter);
    public void AddComparer(string memberName, IValueComparer valueComparer, Func`2<MemberInfo, bool> filter);
    public void Merge(ComparerOverridesCollection collection);
    public IValueComparer GetComparer(Type type);
    public IValueComparer GetComparer(MemberInfo memberInfo);
    public IValueComparer GetComparer(string memberName);
}
public class ObjectsComparer.ComparersFactory : object {
    public virtual IComparer`1<T> GetObjectsComparer(ComparisonSettings settings, BaseComparer parentComparer);
    public sealed virtual IComparer GetObjectsComparer(Type type, ComparisonSettings settings, BaseComparer parentComparer);
}
public class ObjectsComparer.ComparisonSettings : object {
    [CompilerGeneratedAttribute]
private bool <RecursiveComparison>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <EmptyAndNullEnumerablesEqual>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <UseDefaultIfMemberNotExist>k__BackingField;
    private Dictionary`2<Tuple`2<Type, string>, object> _settings;
    public bool RecursiveComparison { get; public set; }
    public bool EmptyAndNullEnumerablesEqual { get; public set; }
    public bool UseDefaultIfMemberNotExist { get; public set; }
    [CompilerGeneratedAttribute]
public bool get_RecursiveComparison();
    [CompilerGeneratedAttribute]
public void set_RecursiveComparison(bool value);
    [CompilerGeneratedAttribute]
public bool get_EmptyAndNullEnumerablesEqual();
    [CompilerGeneratedAttribute]
public void set_EmptyAndNullEnumerablesEqual(bool value);
    [CompilerGeneratedAttribute]
public bool get_UseDefaultIfMemberNotExist();
    [CompilerGeneratedAttribute]
public void set_UseDefaultIfMemberNotExist(bool value);
    public void SetCustomSetting(T value, string key);
    public T GetCustomSetting(string key);
}
internal class ObjectsComparer.CompilerGeneratedObjectComparer : AbstractDynamicObjectsComprer`1<object> {
    public CompilerGeneratedObjectComparer(ComparisonSettings settings, BaseComparer parentComparer, IComparersFactory factory);
    public virtual bool IsMatch(Type type, object obj1, object obj2);
    public virtual bool IsStopComparison(Type type, object obj1, object obj2);
    public virtual bool SkipMember(Type type, MemberInfo member);
    protected virtual IList`1<string> GetProperties(object obj);
    protected virtual bool TryGetMemberValue(object obj, string propertyName, Object& value);
}
public class ObjectsComparer.DefaultValueComparer : object {
    private static IValueComparer modreq(System.Runtime.CompilerServices.IsVolatile) _instance;
    private static object SyncRoot;
    public static IValueComparer Instance { get; }
    private static DefaultValueComparer();
    public static IValueComparer get_Instance();
    public sealed virtual bool Compare(object obj1, object obj2, ComparisonSettings settings);
    public sealed virtual string ToString(object value);
}
public class ObjectsComparer.DefaultValueValueComparer`1 : object {
    private T _defaultValue;
    private T _typeDefaultValue;
    private IValueComparer _valueComparer;
    public DefaultValueValueComparer`1(T defaultValue, IValueComparer valueComparer);
    public sealed virtual bool Compare(object obj1, object obj2, ComparisonSettings settings);
    public sealed virtual string ToString(object value);
}
public class ObjectsComparer.Difference : object {
    [CompilerGeneratedAttribute]
private string <MemberPath>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Value1>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Value2>k__BackingField;
    [CompilerGeneratedAttribute]
private DifferenceTypes <DifferenceType>k__BackingField;
    public string MemberPath { get; }
    public string Value1 { get; }
    public string Value2 { get; }
    public DifferenceTypes DifferenceType { get; }
    public Difference(string memberPath, string value1, string value2, DifferenceTypes differenceType);
    [CompilerGeneratedAttribute]
public string get_MemberPath();
    [CompilerGeneratedAttribute]
public string get_Value1();
    [CompilerGeneratedAttribute]
public string get_Value2();
    [CompilerGeneratedAttribute]
public DifferenceTypes get_DifferenceType();
    public Difference InsertPath(string path);
    public virtual string ToString();
}
public enum ObjectsComparer.DifferenceTypes : Enum {
    public int value__;
    public static DifferenceTypes ValueMismatch;
    public static DifferenceTypes TypeMismatch;
    public static DifferenceTypes MissedMemberInFirstObject;
    public static DifferenceTypes MissedMemberInSecondObject;
    public static DifferenceTypes MissedElementInFirstObject;
    public static DifferenceTypes MissedElementInSecondObject;
    public static DifferenceTypes NumberOfElementsMismatch;
}
public class ObjectsComparer.DoNotCompareValueComparer : object {
    private static IValueComparer modreq(System.Runtime.CompilerServices.IsVolatile) _instance;
    private static object SyncRoot;
    public static IValueComparer Instance { get; }
    private static DoNotCompareValueComparer();
    public static IValueComparer get_Instance();
    public sealed virtual bool Compare(object obj1, object obj2, ComparisonSettings settings);
    public sealed virtual string ToString(object value);
}
internal class ObjectsComparer.DynamicObjectComparer : AbstractDynamicObjectsComprer`1<DynamicObject> {
    public DynamicObjectComparer(ComparisonSettings settings, BaseComparer parentComparer, IComparersFactory factory);
    public virtual bool IsMatch(Type type, object obj1, object obj2);
    public virtual bool IsStopComparison(Type type, object obj1, object obj2);
    public virtual bool SkipMember(Type type, MemberInfo member);
    protected virtual IList`1<string> GetProperties(DynamicObject obj);
    protected virtual bool TryGetMemberValue(DynamicObject obj, string propertyName, Object& value);
}
public class ObjectsComparer.DynamicValueComparer`1 : object {
    private Func`4<T, T, ComparisonSettings, bool> _compareFunction;
    private Func`2<T, string> _toStringFunction;
    public DynamicValueComparer`1(Func`4<T, T, ComparisonSettings, bool> compareFunction);
    public DynamicValueComparer`1(Func`4<T, T, ComparisonSettings, bool> compareFunction, Func`2<T, string> toStringFunction);
    public sealed virtual bool Compare(object obj1, object obj2, ComparisonSettings settings);
    public sealed virtual string ToString(object value);
    private void IsArgumentException(object obj, string argumentName);
}
internal class ObjectsComparer.EnumerablesComparer : AbstractComparer {
    public EnumerablesComparer(ComparisonSettings settings, BaseComparer parentComparer, IComparersFactory factory);
    [IteratorStateMachineAttribute("ObjectsComparer.EnumerablesComparer/<CalculateDifferences>d__1")]
public virtual IEnumerable`1<Difference> CalculateDifferences(Type type, object obj1, object obj2);
    public sealed virtual bool IsMatch(Type type, object obj1, object obj2);
    public sealed virtual bool IsStopComparison(Type type, object obj1, object obj2);
    public sealed virtual bool SkipMember(Type type, MemberInfo member);
}
internal class ObjectsComparer.EnumerablesComparer`1 : AbstractComparer {
    private IComparer`1<T> _comparer;
    public EnumerablesComparer`1(ComparisonSettings settings, BaseComparer parentComparer, IComparersFactory factory);
    [IteratorStateMachineAttribute("ObjectsComparer.EnumerablesComparer`1/<CalculateDifferences>d__2")]
public virtual IEnumerable`1<Difference> CalculateDifferences(Type type, object obj1, object obj2);
}
public class ObjectsComparer.Exceptions.AmbiguousComparerOverrideResolutionException : Exception {
    [CompilerGeneratedAttribute]
private string <MemberName>k__BackingField;
    [CompilerGeneratedAttribute]
private MemberInfo <MemberInfo>k__BackingField;
    [CompilerGeneratedAttribute]
private Type <Type>k__BackingField;
    public string MemberName { get; }
    public MemberInfo MemberInfo { get; }
    public Type Type { get; }
    internal AmbiguousComparerOverrideResolutionException(MemberInfo memberInfo);
    internal AmbiguousComparerOverrideResolutionException(string memberName);
    internal AmbiguousComparerOverrideResolutionException(Type type);
    [CompilerGeneratedAttribute]
public string get_MemberName();
    [CompilerGeneratedAttribute]
public MemberInfo get_MemberInfo();
    [CompilerGeneratedAttribute]
public Type get_Type();
}
public class ObjectsComparer.Exceptions.ValueComparerExistsException : Exception {
    [CompilerGeneratedAttribute]
private MemberInfo <MemberInfo>k__BackingField;
    public MemberInfo MemberInfo { get; }
    internal ValueComparerExistsException(MemberInfo memberInfo);
    [CompilerGeneratedAttribute]
public MemberInfo get_MemberInfo();
}
internal class ObjectsComparer.ExpandoObjectComparer : AbstractDynamicObjectsComprer`1<ExpandoObject> {
    public ExpandoObjectComparer(ComparisonSettings settings, BaseComparer parentComparer, IComparersFactory factory);
    public virtual bool IsMatch(Type type, object obj1, object obj2);
    public virtual bool IsStopComparison(Type type, object obj1, object obj2);
    public virtual bool SkipMember(Type type, MemberInfo member);
    protected virtual IList`1<string> GetProperties(ExpandoObject obj);
    protected virtual bool TryGetMemberValue(ExpandoObject obj, string propertyName, Object& value);
}
internal class ObjectsComparer.GenericEnumerablesComparer : AbstractEnumerablesComparer {
    public GenericEnumerablesComparer(ComparisonSettings settings, BaseComparer parentComparer, IComparersFactory factory);
    [IteratorStateMachineAttribute("ObjectsComparer.GenericEnumerablesComparer/<CalculateDifferences>d__1")]
public virtual IEnumerable`1<Difference> CalculateDifferences(Type type, object obj1, object obj2);
    public virtual bool IsMatch(Type type, object obj1, object obj2);
    public virtual bool SkipMember(Type type, MemberInfo member);
}
internal class ObjectsComparer.HashSetsComparer : AbstractEnumerablesComparer {
    public HashSetsComparer(ComparisonSettings settings, BaseComparer parentComparer, IComparersFactory factory);
    [IteratorStateMachineAttribute("ObjectsComparer.HashSetsComparer/<CalculateDifferences>d__1")]
public virtual IEnumerable`1<Difference> CalculateDifferences(Type type, object obj1, object obj2);
    public virtual bool IsMatch(Type type, object obj1, object obj2);
    public virtual bool SkipMember(Type type, MemberInfo member);
}
internal class ObjectsComparer.HashSetsComparer`1 : AbstractComparer {
    public HashSetsComparer`1(ComparisonSettings settings, BaseComparer parentComparer, IComparersFactory factory);
    [IteratorStateMachineAttribute("ObjectsComparer.HashSetsComparer`1/<CalculateDifferences>d__1")]
public virtual IEnumerable`1<Difference> CalculateDifferences(Type type, object obj1, object obj2);
    public bool IsMatch(Type type, object obj1, object obj2);
}
public interface ObjectsComparer.IBaseComparer {
    public IValueComparer DefaultValueComparer { get; }
    public ComparisonSettings Settings { get; }
    public abstract virtual IValueComparer get_DefaultValueComparer();
    public abstract virtual ComparisonSettings get_Settings();
    public abstract virtual void SetDefaultComparer(IValueComparer valueComparer);
    public abstract virtual void AddComparerOverride(Expression`1<Func`1<TProp>> memberLambda, IValueComparer valueComparer);
    public abstract virtual void AddComparerOverride(MemberInfo memberInfo, IValueComparer valueComparer);
    public abstract virtual void AddComparerOverride(Type type, IValueComparer valueComparer, Func`2<MemberInfo, bool> filter);
    public abstract virtual void AddComparerOverride(IValueComparer valueComparer, Func`2<MemberInfo, bool> filter);
    public abstract virtual void AddComparerOverride(Expression`1<Func`1<TProp>> memberLambda, Func`4<TProp, TProp, ComparisonSettings, bool> compareFunction, Func`2<TProp, string> toStringFunction);
    public abstract virtual void AddComparerOverride(Expression`1<Func`1<TProp>> memberLambda, Func`4<TProp, TProp, ComparisonSettings, bool> compareFunction);
    public abstract virtual void AddComparerOverride(string memberName, IValueComparer valueComparer, Func`2<MemberInfo, bool> filter);
}
public interface ObjectsComparer.IComparer {
    public abstract virtual bool Compare(Type type, object obj1, object obj2, IEnumerable`1& differences);
    public abstract virtual bool Compare(T obj1, T obj2, IEnumerable`1& differences);
    public abstract virtual bool Compare(Type type, object obj1, object obj2);
    public abstract virtual bool Compare(T obj1, T obj2);
    public abstract virtual IEnumerable`1<Difference> CalculateDifferences(Type type, object obj1, object obj2);
    public abstract virtual IEnumerable`1<Difference> CalculateDifferences(T obj1, T obj2);
}
public interface ObjectsComparer.IComparer`1 {
    public abstract virtual bool Compare(T obj1, T obj2, IEnumerable`1& differences);
    public abstract virtual bool Compare(T obj1, T obj2);
    public abstract virtual IEnumerable`1<Difference> CalculateDifferences(T obj1, T obj2);
}
public interface ObjectsComparer.IComparersFactory {
    public abstract virtual IComparer`1<T> GetObjectsComparer(ComparisonSettings settings, BaseComparer parentComparer);
    public abstract virtual IComparer GetObjectsComparer(Type type, ComparisonSettings settings, BaseComparer parentComparer);
}
internal interface ObjectsComparer.IComparerWithCondition {
    public abstract virtual bool IsMatch(Type type, object obj1, object obj2);
    public abstract virtual bool IsStopComparison(Type type, object obj1, object obj2);
    public abstract virtual bool SkipMember(Type type, MemberInfo member);
}
public class ObjectsComparer.IgnoreCaseStringsValueComparer : AbstractValueComparer`1<string> {
    private static IValueComparer modreq(System.Runtime.CompilerServices.IsVolatile) _instance;
    private static object SyncRoot;
    public static IValueComparer Instance { get; }
    private static IgnoreCaseStringsValueComparer();
    public static IValueComparer get_Instance();
    public virtual bool Compare(string obj1, string obj2, ComparisonSettings settings);
}
public interface ObjectsComparer.IValueComparer {
    public abstract virtual bool Compare(object obj1, object obj2, ComparisonSettings settings);
    public abstract virtual string ToString(object value);
}
public interface ObjectsComparer.IValueComparer`1 {
    public abstract virtual bool Compare(T obj1, T obj2, ComparisonSettings settings);
    public abstract virtual string ToString(T value);
}
internal class ObjectsComparer.MultidimensionalArrayComparer`1 : AbstractComparer {
    private IComparer`1<T> _comparer;
    public MultidimensionalArrayComparer`1(ComparisonSettings settings, BaseComparer parentComparer, IComparersFactory factory);
    [IteratorStateMachineAttribute("ObjectsComparer.MultidimensionalArrayComparer`1/<CalculateDifferences>d__2")]
public virtual IEnumerable`1<Difference> CalculateDifferences(Type type, object obj1, object obj2);
    private static Int32[] IndexToCoordinates(Array arr, int i);
}
internal class ObjectsComparer.MultidimensionalArraysComparer : AbstractEnumerablesComparer {
    public MultidimensionalArraysComparer(ComparisonSettings settings, BaseComparer parentComparer, IComparersFactory factory);
    [IteratorStateMachineAttribute("ObjectsComparer.MultidimensionalArraysComparer/<CalculateDifferences>d__1")]
public virtual IEnumerable`1<Difference> CalculateDifferences(Type type, object obj1, object obj2);
    public virtual bool IsMatch(Type type, object obj1, object obj2);
    public virtual bool SkipMember(Type type, MemberInfo member);
}
public class ObjectsComparer.NulableStringsValueComparer : AbstractValueComparer`1<string> {
    private static IValueComparer`1 modreq(System.Runtime.CompilerServices.IsVolatile) _instance;
    private static object SyncRoot;
    public static IValueComparer Instance { get; }
    private static NulableStringsValueComparer();
    public static IValueComparer get_Instance();
    public virtual bool Compare(string obj1, string obj2, ComparisonSettings settings);
    public virtual string ToString(string value);
}
public class ObjectsComparer.ToStringComparer`1 : DynamicValueComparer`1<T> {
}
internal class ObjectsComparer.TypesComparer : AbstractComparer {
    public TypesComparer(ComparisonSettings settings, BaseComparer parentComparer, IComparersFactory factory);
    [IteratorStateMachineAttribute("ObjectsComparer.TypesComparer/<CalculateDifferences>d__1")]
public virtual IEnumerable`1<Difference> CalculateDifferences(Type type, object obj1, object obj2);
    public sealed virtual bool IsMatch(Type type, object obj1, object obj2);
    public sealed virtual bool IsStopComparison(Type type, object obj1, object obj2);
    public sealed virtual bool SkipMember(Type type, MemberInfo member);
}
public class ObjectsComparer.UriComparer : DynamicValueComparer`1<Uri> {
}
[ExtensionAttribute]
internal static class ObjectsComparer.Utils.MemberInfoExtensions : object {
    [ExtensionAttribute]
public static Type GetMemberType(MemberInfo memberInfo);
    [ExtensionAttribute]
public static object GetMemberValue(MemberInfo memberInfo, object obj);
    public static string GetMethodName(Expression`1<Action`1<T>> expression);
}
internal class ObjectsComparer.Utils.PropertyHelper : object {
    public static MemberInfo GetMemberInfo(Expression`1<Func`1<T>> memberLambda);
}
[ExtensionAttribute]
internal static class ObjectsComparer.Utils.TypeExtensions : object {
    [ExtensionAttribute]
public static bool InheritsFrom(Type t1, Type t2);
    [ExtensionAttribute]
public static bool IsComparable(Type type);
    [ExtensionAttribute]
public static object GetDefaultValue(Type t);
}
