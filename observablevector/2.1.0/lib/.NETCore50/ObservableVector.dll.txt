public class Collections.Generic.ObservableVector`1 : Collection`1<T> {
    private static string IndexerName;
    private static ChangedArgs<T> ResetArgs;
    private static PropertyChangedEventArgs IndexerArgs;
    private static PropertyChangedEventArgs ItemsArgs;
    private static PropertyChangedEventArgs CountArgs;
    [CompilerGeneratedAttribute]
private PropertyChangedEventHandler PropertyChanged;
    [CompilerGeneratedAttribute]
private EventRegistrationTokenTable`1<VectorChangedEventHandler`1<T>> VectorChanged;
    public ObservableVector`1(IList`1<T> list);
    private static ObservableVector`1();
    [CompilerGeneratedAttribute]
public sealed virtual void add_PropertyChanged(PropertyChangedEventHandler value);
    [CompilerGeneratedAttribute]
public sealed virtual void remove_PropertyChanged(PropertyChangedEventHandler value);
    [CompilerGeneratedAttribute]
public sealed virtual EventRegistrationToken add_VectorChanged(VectorChangedEventHandler`1<T> value);
    [CompilerGeneratedAttribute]
public sealed virtual void remove_VectorChanged(EventRegistrationToken value);
    protected virtual void ClearItems();
    protected virtual void InsertItem(int index, T item);
    protected virtual void RemoveItem(int index);
    protected virtual void SetItem(int index, T item);
    protected void OnVectorChanged(CollectionChange change, UInt32 index);
    protected void OnVectorChanged(ChangedArgs<T> e);
    protected void OnPropertyChanged(string name);
    protected void OnPropertyChanged(PropertyChangedEventArgs e);
    private void OnItemsChanged();
    private void OnCountChanged();
    private void OnIndexerChanged();
}
