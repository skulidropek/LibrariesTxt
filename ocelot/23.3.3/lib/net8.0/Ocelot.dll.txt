public class Ocelot.Authentication.Middleware.AuthenticationMiddleware : OcelotMiddleware {
    private RequestDelegate _next;
    public AuthenticationMiddleware(RequestDelegate next, IOcelotLoggerFactory loggerFactory);
    [AsyncStateMachineAttribute("Ocelot.Authentication.Middleware.AuthenticationMiddleware/<Invoke>d__2")]
public Task Invoke(HttpContext httpContext);
    private void SetUnauthenticatedError(HttpContext httpContext, string path, string userName);
    [AsyncStateMachineAttribute("Ocelot.Authentication.Middleware.AuthenticationMiddleware/<AuthenticateAsync>d__4")]
private Task`1<AuthenticateResult> AuthenticateAsync(HttpContext context, DownstreamRoute route);
}
[ExtensionAttribute]
public static class Ocelot.Authentication.Middleware.AuthenticationMiddlewareExtensions : object {
    [ExtensionAttribute]
public static IApplicationBuilder UseAuthenticationMiddleware(IApplicationBuilder builder);
}
public class Ocelot.Authorization.ClaimsAuthorizer : object {
    private IClaimsParser _claimsParser;
    public ClaimsAuthorizer(IClaimsParser claimsParser);
    public sealed virtual Response`1<bool> Authorize(ClaimsPrincipal claimsPrincipal, Dictionary`2<string, string> routeClaimsRequirement, List`1<PlaceholderNameAndValue> urlPathPlaceholderNameAndValues);
}
public class Ocelot.Authorization.ClaimValueNotAuthorizedError : Error {
    public ClaimValueNotAuthorizedError(string message);
}
public interface Ocelot.Authorization.IClaimsAuthorizer {
    public abstract virtual Response`1<bool> Authorize(ClaimsPrincipal claimsPrincipal, Dictionary`2<string, string> routeClaimsRequirement, List`1<PlaceholderNameAndValue> urlPathPlaceholderNameAndValues);
}
public interface Ocelot.Authorization.IScopesAuthorizer {
    public abstract virtual Response`1<bool> Authorize(ClaimsPrincipal claimsPrincipal, List`1<string> routeAllowedScopes);
}
public class Ocelot.Authorization.Middleware.AuthorizationMiddleware : OcelotMiddleware {
    private RequestDelegate _next;
    private IClaimsAuthorizer _claimsAuthorizer;
    private IScopesAuthorizer _scopesAuthorizer;
    public AuthorizationMiddleware(RequestDelegate next, IClaimsAuthorizer claimsAuthorizer, IScopesAuthorizer scopesAuthorizer, IOcelotLoggerFactory loggerFactory);
    [AsyncStateMachineAttribute("Ocelot.Authorization.Middleware.AuthorizationMiddleware/<Invoke>d__4")]
public Task Invoke(HttpContext httpContext);
    private static bool IsAuthorized(Response`1<bool> authorized);
    private static bool IsAuthenticatedRoute(DownstreamRoute route);
    private static bool IsAuthorizedRoute(DownstreamRoute route);
    private static bool IsOptionsHttpMethod(HttpContext httpContext);
}
[ExtensionAttribute]
public static class Ocelot.Authorization.Middleware.AuthorizationMiddlewareMiddlewareExtensions : object {
    [ExtensionAttribute]
public static IApplicationBuilder UseAuthorizationMiddleware(IApplicationBuilder builder);
}
public class Ocelot.Authorization.ScopeNotAuthorizedError : Error {
    public ScopeNotAuthorizedError(string message);
}
public class Ocelot.Authorization.ScopesAuthorizer : object {
    private IClaimsParser _claimsParser;
    private static string Scope;
    public ScopesAuthorizer(IClaimsParser claimsParser);
    public sealed virtual Response`1<bool> Authorize(ClaimsPrincipal claimsPrincipal, List`1<string> routeAllowedScopes);
}
public class Ocelot.Authorization.UnauthorizedError : Error {
    public UnauthorizedError(string message);
}
public class Ocelot.Authorization.UserDoesNotHaveClaimError : Error {
    public UserDoesNotHaveClaimError(string message);
}
public class Ocelot.Cache.CachedResponse : object {
    [CompilerGeneratedAttribute]
private HttpStatusCode <StatusCode>k__BackingField;
    [CompilerGeneratedAttribute]
private Dictionary`2<string, IEnumerable`1<string>> <Headers>k__BackingField;
    [CompilerGeneratedAttribute]
private Dictionary`2<string, IEnumerable`1<string>> <ContentHeaders>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Body>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ReasonPhrase>k__BackingField;
    public HttpStatusCode StatusCode { get; }
    public Dictionary`2<string, IEnumerable`1<string>> Headers { get; }
    public Dictionary`2<string, IEnumerable`1<string>> ContentHeaders { get; }
    public string Body { get; }
    public string ReasonPhrase { get; }
    public CachedResponse(HttpStatusCode statusCode, Dictionary`2<string, IEnumerable`1<string>> headers, string body, Dictionary`2<string, IEnumerable`1<string>> contentHeaders, string reasonPhrase);
    [CompilerGeneratedAttribute]
public HttpStatusCode get_StatusCode();
    [CompilerGeneratedAttribute]
public Dictionary`2<string, IEnumerable`1<string>> get_Headers();
    [CompilerGeneratedAttribute]
public Dictionary`2<string, IEnumerable`1<string>> get_ContentHeaders();
    [CompilerGeneratedAttribute]
public string get_Body();
    [CompilerGeneratedAttribute]
public string get_ReasonPhrase();
}
internal class Ocelot.Cache.CacheObject`1 : object {
    [CompilerGeneratedAttribute]
private T <Value>k__BackingField;
    [CompilerGeneratedAttribute]
private DateTime <Expires>k__BackingField;
    public T Value { get; }
    public DateTime Expires { get; }
    public CacheObject`1(T value, DateTime expires);
    [CompilerGeneratedAttribute]
public T get_Value();
    [CompilerGeneratedAttribute]
public DateTime get_Expires();
}
public class Ocelot.Cache.DefaultCacheKeyGenerator : object {
    private static char Delimiter;
    [AsyncStateMachineAttribute("Ocelot.Cache.DefaultCacheKeyGenerator/<GenerateRequestCacheKey>d__1")]
public sealed virtual ValueTask`1<string> GenerateRequestCacheKey(DownstreamRequest downstreamRequest, DownstreamRoute downstreamRoute);
    private static Task`1<string> ReadContentAsync(DownstreamRequest downstream);
}
public class Ocelot.Cache.DefaultMemoryCache`1 : object {
    private IMemoryCache _memoryCache;
    private Dictionary`2<string, List`1<string>> _regions;
    public DefaultMemoryCache`1(IMemoryCache memoryCache);
    public sealed virtual void Add(string key, T value, TimeSpan ttl, string region);
    public sealed virtual T Get(string key, string region);
    public sealed virtual void ClearRegion(string region);
    public sealed virtual void AddAndDelete(string key, T value, TimeSpan ttl, string region);
    private void SetRegion(string region, string key);
}
public interface Ocelot.Cache.ICacheKeyGenerator {
    public abstract virtual ValueTask`1<string> GenerateRequestCacheKey(DownstreamRequest downstreamRequest, DownstreamRoute downstreamRoute);
}
public interface Ocelot.Cache.IOcelotCache`1 {
    public abstract virtual void Add(string key, T value, TimeSpan ttl, string region);
    public abstract virtual T Get(string key, string region);
    public abstract virtual void ClearRegion(string region);
    public abstract virtual void AddAndDelete(string key, T value, TimeSpan ttl, string region);
}
public static class Ocelot.Cache.MD5Helper : object {
    public static string GenerateMd5(Byte[] contentBytes);
    public static string GenerateMd5(string contentString);
}
public class Ocelot.Cache.Middleware.OutputCacheMiddleware : OcelotMiddleware {
    private RequestDelegate _next;
    private IOcelotCache`1<CachedResponse> _outputCache;
    private ICacheKeyGenerator _cacheGenerator;
    public OutputCacheMiddleware(RequestDelegate next, IOcelotLoggerFactory loggerFactory, IOcelotCache`1<CachedResponse> outputCache, ICacheKeyGenerator cacheGenerator);
    [AsyncStateMachineAttribute("Ocelot.Cache.Middleware.OutputCacheMiddleware/<Invoke>d__4")]
public Task Invoke(HttpContext httpContext);
    private static void SetHttpResponseMessageThisRequest(HttpContext context, DownstreamResponse response);
    internal DownstreamResponse CreateHttpResponseMessage(CachedResponse cached);
    [AsyncStateMachineAttribute("Ocelot.Cache.Middleware.OutputCacheMiddleware/<CreateCachedResponse>d__7")]
internal Task`1<CachedResponse> CreateCachedResponse(DownstreamResponse response);
}
[ExtensionAttribute]
public static class Ocelot.Cache.Middleware.OutputCacheMiddlewareExtensions : object {
    [ExtensionAttribute]
public static IApplicationBuilder UseOutputCacheMiddleware(IApplicationBuilder builder);
}
[AuthorizeAttribute]
[RouteAttribute("outputcache")]
public class Ocelot.Cache.OutputCacheController : Controller {
    private IOcelotCache`1<CachedResponse> _cache;
    public OutputCacheController(IOcelotCache`1<CachedResponse> cache);
    [HttpDeleteAttribute]
[RouteAttribute("{region}")]
public IActionResult Delete(string region);
}
public class Ocelot.Cache.Regions : object {
    [CompilerGeneratedAttribute]
private List`1<string> <Value>k__BackingField;
    public List`1<string> Value { get; }
    public Regions(List`1<string> value);
    [CompilerGeneratedAttribute]
public List`1<string> get_Value();
}
public class Ocelot.Claims.AddClaimsToRequest : object {
    private IClaimsParser _claimsParser;
    public AddClaimsToRequest(IClaimsParser claimsParser);
    public sealed virtual Response SetClaimsOnContext(List`1<ClaimToThing> claimsToThings, HttpContext context);
}
public interface Ocelot.Claims.IAddClaimsToRequest {
    public abstract virtual Response SetClaimsOnContext(List`1<ClaimToThing> claimsToThings, HttpContext context);
}
[ExtensionAttribute]
public static class Ocelot.Claims.Middleware.ClaimsBuilderMiddlewareExtensions : object {
    [ExtensionAttribute]
public static IApplicationBuilder UseClaimsToClaimsMiddleware(IApplicationBuilder builder);
}
public class Ocelot.Claims.Middleware.ClaimsToClaimsMiddleware : OcelotMiddleware {
    private RequestDelegate _next;
    private IAddClaimsToRequest _addClaimsToRequest;
    public ClaimsToClaimsMiddleware(RequestDelegate next, IOcelotLoggerFactory loggerFactory, IAddClaimsToRequest addClaimsToRequest);
    [AsyncStateMachineAttribute("Ocelot.Claims.Middleware.ClaimsToClaimsMiddleware/<Invoke>d__3")]
public Task Invoke(HttpContext httpContext);
}
public class Ocelot.Configuration.AuthenticationOptions : object {
    [CompilerGeneratedAttribute]
private List`1<string> <AllowedScopes>k__BackingField;
    [CompilerGeneratedAttribute]
private string <AuthenticationProviderKey>k__BackingField;
    [CompilerGeneratedAttribute]
private String[] <AuthenticationProviderKeys>k__BackingField;
    public List`1<string> AllowedScopes { get; }
    [ObsoleteAttribute("Use the AuthenticationProviderKeys property!")]
public string AuthenticationProviderKey { get; }
    public String[] AuthenticationProviderKeys { get; }
    public AuthenticationOptions(List`1<string> allowedScopes, string authenticationProviderKey);
    public AuthenticationOptions(FileAuthenticationOptions from);
    public AuthenticationOptions(List`1<string> allowedScopes, string authenticationProviderKey, String[] authenticationProviderKeys);
    [CompilerGeneratedAttribute]
public List`1<string> get_AllowedScopes();
    [CompilerGeneratedAttribute]
public string get_AuthenticationProviderKey();
    [CompilerGeneratedAttribute]
public String[] get_AuthenticationProviderKeys();
}
public class Ocelot.Configuration.Builder.AuthenticationOptionsBuilder : object {
    private List`1<string> _allowedScopes;
    private string _authenticationProviderKey;
    private String[] _authenticationProviderKeys;
    public AuthenticationOptionsBuilder WithAllowedScopes(List`1<string> allowedScopes);
    [ObsoleteAttribute("Use the WithAuthenticationProviderKeys property!")]
public AuthenticationOptionsBuilder WithAuthenticationProviderKey(string authenticationProviderKey);
    public AuthenticationOptionsBuilder WithAuthenticationProviderKeys(String[] authenticationProviderKeys);
    public AuthenticationOptions Build();
}
public class Ocelot.Configuration.Builder.DownstreamRouteBuilder : object {
    private AuthenticationOptions _authenticationOptions;
    private string _loadBalancerKey;
    private string _downstreamPathTemplate;
    private UpstreamPathTemplate _upstreamTemplatePattern;
    private List`1<HttpMethod> _upstreamHttpMethod;
    private bool _isAuthenticated;
    private List`1<ClaimToThing> _claimsToHeaders;
    private List`1<ClaimToThing> _claimToClaims;
    private Dictionary`2<string, string> _routeClaimRequirement;
    private bool _isAuthorized;
    private List`1<ClaimToThing> _claimToQueries;
    private List`1<ClaimToThing> _claimToDownstreamPath;
    private string _requestIdHeaderKey;
    private bool _isCached;
    private CacheOptions _cacheOptions;
    private string _downstreamScheme;
    private LoadBalancerOptions _loadBalancerOptions;
    private QoSOptions _qosOptions;
    private HttpHandlerOptions _httpHandlerOptions;
    private bool _enableRateLimiting;
    private RateLimitOptions _rateLimitOptions;
    private bool _useServiceDiscovery;
    private string _serviceName;
    private string _serviceNamespace;
    private List`1<HeaderFindAndReplace> _upstreamHeaderFindAndReplace;
    private List`1<HeaderFindAndReplace> _downstreamHeaderFindAndReplace;
    private List`1<DownstreamHostAndPort> _downstreamAddresses;
    private string _key;
    private List`1<string> _delegatingHandlers;
    private List`1<AddHeader> _addHeadersToDownstream;
    private List`1<AddHeader> _addHeadersToUpstream;
    private bool _dangerousAcceptAnyServerCertificateValidator;
    private SecurityOptions _securityOptions;
    private string _downstreamHttpMethod;
    private Version _downstreamHttpVersion;
    private HttpVersionPolicy _downstreamHttpVersionPolicy;
    private Dictionary`2<string, UpstreamHeaderTemplate> _upstreamHeaders;
    private MetadataOptions _metadataOptions;
    public DownstreamRouteBuilder WithDownstreamAddresses(List`1<DownstreamHostAndPort> downstreamAddresses);
    public DownstreamRouteBuilder WithDownStreamHttpMethod(string method);
    public DownstreamRouteBuilder WithLoadBalancerOptions(LoadBalancerOptions loadBalancerOptions);
    public DownstreamRouteBuilder WithDownstreamScheme(string downstreamScheme);
    public DownstreamRouteBuilder WithDownstreamPathTemplate(string input);
    public DownstreamRouteBuilder WithUpstreamPathTemplate(UpstreamPathTemplate input);
    public DownstreamRouteBuilder WithUpstreamHttpMethod(List`1<string> input);
    public DownstreamRouteBuilder WithIsAuthenticated(bool input);
    public DownstreamRouteBuilder WithIsAuthorized(bool input);
    public DownstreamRouteBuilder WithRequestIdKey(string input);
    public DownstreamRouteBuilder WithClaimsToHeaders(List`1<ClaimToThing> input);
    public DownstreamRouteBuilder WithClaimsToClaims(List`1<ClaimToThing> input);
    public DownstreamRouteBuilder WithRouteClaimsRequirement(Dictionary`2<string, string> input);
    public DownstreamRouteBuilder WithClaimsToQueries(List`1<ClaimToThing> input);
    public DownstreamRouteBuilder WithClaimsToDownstreamPath(List`1<ClaimToThing> input);
    public DownstreamRouteBuilder WithIsCached(bool input);
    public DownstreamRouteBuilder WithCacheOptions(CacheOptions input);
    public DownstreamRouteBuilder WithQosOptions(QoSOptions input);
    public DownstreamRouteBuilder WithLoadBalancerKey(string loadBalancerKey);
    public DownstreamRouteBuilder WithAuthenticationOptions(AuthenticationOptions authenticationOptions);
    public DownstreamRouteBuilder WithEnableRateLimiting(bool input);
    public DownstreamRouteBuilder WithRateLimitOptions(RateLimitOptions input);
    public DownstreamRouteBuilder WithHttpHandlerOptions(HttpHandlerOptions input);
    public DownstreamRouteBuilder WithUseServiceDiscovery(bool useServiceDiscovery);
    public DownstreamRouteBuilder WithServiceName(string serviceName);
    public DownstreamRouteBuilder WithServiceNamespace(string serviceNamespace);
    public DownstreamRouteBuilder WithUpstreamHeaderFindAndReplace(List`1<HeaderFindAndReplace> upstreamHeaderFindAndReplace);
    public DownstreamRouteBuilder WithDownstreamHeaderFindAndReplace(List`1<HeaderFindAndReplace> downstreamHeaderFindAndReplace);
    public DownstreamRouteBuilder WithKey(string key);
    public DownstreamRouteBuilder WithDelegatingHandlers(List`1<string> delegatingHandlers);
    public DownstreamRouteBuilder WithAddHeadersToDownstream(List`1<AddHeader> addHeadersToDownstream);
    public DownstreamRouteBuilder WithAddHeadersToUpstream(List`1<AddHeader> addHeadersToUpstream);
    public DownstreamRouteBuilder WithDangerousAcceptAnyServerCertificateValidator(bool dangerousAcceptAnyServerCertificateValidator);
    public DownstreamRouteBuilder WithSecurityOptions(SecurityOptions securityOptions);
    public DownstreamRouteBuilder WithDownstreamHttpVersion(Version downstreamHttpVersion);
    public DownstreamRouteBuilder WithUpstreamHeaders(Dictionary`2<string, UpstreamHeaderTemplate> input);
    public DownstreamRouteBuilder WithDownstreamHttpVersionPolicy(HttpVersionPolicy downstreamHttpVersionPolicy);
    public DownstreamRouteBuilder WithMetadata(MetadataOptions metadataOptions);
    public DownstreamRoute Build();
}
public class Ocelot.Configuration.Builder.MetadataOptionsBuilder : object {
    private String[] _separators;
    private Char[] _trimChars;
    private StringSplitOptions _stringSplitOption;
    private NumberStyles _numberStyle;
    private CultureInfo _currentCulture;
    private IDictionary`2<string, string> _metadata;
    public MetadataOptionsBuilder WithSeparators(String[] separators);
    public MetadataOptionsBuilder WithTrimChars(Char[] trimChars);
    public MetadataOptionsBuilder WithStringSplitOption(string stringSplitOption);
    public MetadataOptionsBuilder WithNumberStyle(string numberStyle);
    public MetadataOptionsBuilder WithCurrentCulture(string currentCulture);
    public MetadataOptionsBuilder WithMetadata(IDictionary`2<string, string> metadata);
    public MetadataOptions Build();
}
public class Ocelot.Configuration.Builder.QoSOptionsBuilder : object {
    private int _exceptionsAllowedBeforeBreaking;
    private int _durationOfBreak;
    private int _timeoutValue;
    private string _key;
    public QoSOptionsBuilder WithExceptionsAllowedBeforeBreaking(int exceptionsAllowedBeforeBreaking);
    public QoSOptionsBuilder WithDurationOfBreak(int durationOfBreak);
    public QoSOptionsBuilder WithTimeoutValue(int timeoutValue);
    public QoSOptionsBuilder WithKey(string input);
    public QoSOptions Build();
}
public class Ocelot.Configuration.Builder.RateLimitOptionsBuilder : object {
    private bool _enableRateLimiting;
    private string _clientIdHeader;
    private Func`1<List`1<string>> _getClientWhitelist;
    private bool _disableRateLimitHeaders;
    private string _quotaExceededMessage;
    private string _rateLimitCounterPrefix;
    private RateLimitRule _rateLimitRule;
    private int _httpStatusCode;
    public RateLimitOptionsBuilder WithEnableRateLimiting(bool enableRateLimiting);
    public RateLimitOptionsBuilder WithClientIdHeader(string clientIdHeader);
    public RateLimitOptionsBuilder WithClientWhiteList(Func`1<List`1<string>> getClientWhitelist);
    public RateLimitOptionsBuilder WithDisableRateLimitHeaders(bool disableRateLimitHeaders);
    public RateLimitOptionsBuilder WithQuotaExceededMessage(string quotaExceededMessage);
    public RateLimitOptionsBuilder WithRateLimitCounterPrefix(string rateLimitCounterPrefix);
    public RateLimitOptionsBuilder WithRateLimitRule(RateLimitRule rateLimitRule);
    public RateLimitOptionsBuilder WithHttpStatusCode(int httpStatusCode);
    public RateLimitOptions Build();
}
public class Ocelot.Configuration.Builder.RouteBuilder : object {
    private UpstreamPathTemplate _upstreamTemplatePattern;
    private List`1<HttpMethod> _upstreamHttpMethod;
    private string _upstreamHost;
    private List`1<DownstreamRoute> _downstreamRoutes;
    private List`1<AggregateRouteConfig> _downstreamRoutesConfig;
    private string _aggregator;
    private IDictionary`2<string, UpstreamHeaderTemplate> _upstreamHeaders;
    public RouteBuilder WithDownstreamRoute(DownstreamRoute value);
    public RouteBuilder WithDownstreamRoutes(List`1<DownstreamRoute> value);
    public RouteBuilder WithUpstreamHost(string upstreamAddresses);
    public RouteBuilder WithUpstreamPathTemplate(UpstreamPathTemplate input);
    public RouteBuilder WithUpstreamHttpMethod(List`1<string> input);
    public RouteBuilder WithAggregateRouteConfig(List`1<AggregateRouteConfig> aggregateRouteConfigs);
    public RouteBuilder WithAggregator(string aggregator);
    public RouteBuilder WithUpstreamHeaders(IDictionary`2<string, UpstreamHeaderTemplate> upstreamHeaders);
    public Route Build();
}
public class Ocelot.Configuration.Builder.RouteOptionsBuilder : object {
    private bool _isAuthenticated;
    private bool _isAuthorized;
    private bool _isCached;
    private bool _enableRateLimiting;
    private bool _useServiceDiscovery;
    public RouteOptionsBuilder WithIsCached(bool isCached);
    public RouteOptionsBuilder WithIsAuthenticated(bool isAuthenticated);
    public RouteOptionsBuilder WithIsAuthorized(bool isAuthorized);
    public RouteOptionsBuilder WithRateLimiting(bool enableRateLimiting);
    public RouteOptionsBuilder WithUseServiceDiscovery(bool useServiceDiscovery);
    public RouteOptions Build();
}
public class Ocelot.Configuration.Builder.ServiceProviderConfigurationBuilder : object {
    private string _serviceDiscoveryProviderScheme;
    private string _serviceDiscoveryProviderHost;
    private int _serviceDiscoveryProviderPort;
    private string _type;
    private string _token;
    private string _configurationKey;
    private int _pollingInterval;
    private string _namespace;
    public ServiceProviderConfigurationBuilder WithScheme(string serviceDiscoveryProviderScheme);
    public ServiceProviderConfigurationBuilder WithHost(string serviceDiscoveryProviderHost);
    public ServiceProviderConfigurationBuilder WithPort(int serviceDiscoveryProviderPort);
    public ServiceProviderConfigurationBuilder WithType(string type);
    public ServiceProviderConfigurationBuilder WithToken(string token);
    public ServiceProviderConfigurationBuilder WithConfigurationKey(string configurationKey);
    public ServiceProviderConfigurationBuilder WithPollingInterval(int pollingInterval);
    public ServiceProviderConfigurationBuilder WithNamespace(string namespace);
    public ServiceProviderConfiguration Build();
}
public class Ocelot.Configuration.Builder.UpstreamPathTemplateBuilder : object {
    private string _template;
    private int _priority;
    private bool _containsQueryString;
    private string _originalValue;
    public UpstreamPathTemplateBuilder WithTemplate(string template);
    public UpstreamPathTemplateBuilder WithPriority(int priority);
    public UpstreamPathTemplateBuilder WithContainsQueryString(bool containsQueryString);
    public UpstreamPathTemplateBuilder WithOriginalValue(string originalValue);
    public UpstreamPathTemplate Build();
}
public class Ocelot.Configuration.CacheOptions : object {
    [CompilerGeneratedAttribute]
private int <TtlSeconds>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Region>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Header>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <EnableContentHashing>k__BackingField;
    public int TtlSeconds { get; }
    public string Region { get; }
    public string Header { get; }
    public bool EnableContentHashing { get; }
    public CacheOptions(Nullable`1<int> ttlSeconds, string region, string header, Nullable`1<bool> enableContentHashing);
    [CompilerGeneratedAttribute]
public int get_TtlSeconds();
    [CompilerGeneratedAttribute]
public string get_Region();
    [CompilerGeneratedAttribute]
public string get_Header();
    [CompilerGeneratedAttribute]
public bool get_EnableContentHashing();
}
public interface Ocelot.Configuration.ChangeTracking.IOcelotConfigurationChangeTokenSource {
    public IChangeToken ChangeToken { get; }
    public abstract virtual IChangeToken get_ChangeToken();
    public abstract virtual void Activate();
}
public class Ocelot.Configuration.ChangeTracking.OcelotConfigurationChangeToken : object {
    public static double PollingIntervalSeconds;
    private ICollection`1<CallbackWrapper> _callbacks;
    private object _lock;
    private Nullable`1<DateTime> _timeChanged;
    public bool HasChanged { get; }
    public bool ActiveChangeCallbacks { get; }
    public sealed virtual IDisposable RegisterChangeCallback(Action`1<object> callback, object state);
    public void Activate();
    public sealed virtual bool get_HasChanged();
    public sealed virtual bool get_ActiveChangeCallbacks();
}
public class Ocelot.Configuration.ChangeTracking.OcelotConfigurationChangeTokenSource : object {
    private OcelotConfigurationChangeToken _changeToken;
    public IChangeToken ChangeToken { get; }
    public sealed virtual IChangeToken get_ChangeToken();
    public sealed virtual void Activate();
}
public class Ocelot.Configuration.ChangeTracking.OcelotConfigurationMonitor : object {
    private IOcelotConfigurationChangeTokenSource _changeTokenSource;
    private IInternalConfigurationRepository _repo;
    public IInternalConfiguration CurrentValue { get; }
    public OcelotConfigurationMonitor(IInternalConfigurationRepository repo, IOcelotConfigurationChangeTokenSource changeTokenSource);
    public sealed virtual IInternalConfiguration Get(string name);
    public sealed virtual IDisposable OnChange(Action`2<IInternalConfiguration, string> listener);
    public sealed virtual IInternalConfiguration get_CurrentValue();
}
public class Ocelot.Configuration.ClaimToThing : object {
    [CompilerGeneratedAttribute]
private string <ExistingKey>k__BackingField;
    [CompilerGeneratedAttribute]
private string <NewKey>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Delimiter>k__BackingField;
    [CompilerGeneratedAttribute]
private int <Index>k__BackingField;
    public string ExistingKey { get; }
    public string NewKey { get; }
    public string Delimiter { get; }
    public int Index { get; }
    public ClaimToThing(string existingKey, string newKey, string delimiter, int index);
    [CompilerGeneratedAttribute]
public string get_ExistingKey();
    [CompilerGeneratedAttribute]
public string get_NewKey();
    [CompilerGeneratedAttribute]
public string get_Delimiter();
    [CompilerGeneratedAttribute]
public int get_Index();
}
public class Ocelot.Configuration.Creator.AddHeader : object {
    [CompilerGeneratedAttribute]
private string <Key>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Value>k__BackingField;
    public string Key { get; }
    public string Value { get; }
    public AddHeader(string key, string value);
    [CompilerGeneratedAttribute]
public string get_Key();
    [CompilerGeneratedAttribute]
public string get_Value();
}
public class Ocelot.Configuration.Creator.AggregatesCreator : object {
    private IUpstreamTemplatePatternCreator _creator;
    private IUpstreamHeaderTemplatePatternCreator _headerCreator;
    public AggregatesCreator(IUpstreamTemplatePatternCreator creator, IUpstreamHeaderTemplatePatternCreator headerCreator);
    public sealed virtual List`1<Route> Create(FileConfiguration fileConfiguration, List`1<Route> routes);
    private Route SetUpAggregateRoute(IEnumerable`1<Route> routes, FileAggregateRoute aggregateRoute, FileGlobalConfiguration globalConfiguration);
}
public class Ocelot.Configuration.Creator.AuthenticationOptionsCreator : object {
    public sealed virtual AuthenticationOptions Create(FileRoute route);
}
public class Ocelot.Configuration.Creator.CacheOptionsCreator : object {
    public sealed virtual CacheOptions Create(FileCacheOptions options, FileGlobalConfiguration global, string upstreamPathTemplate, IList`1<string> upstreamHttpMethods);
    protected virtual string GetRegion(string region, string upstreamPathTemplate, IList`1<string> upstreamHttpMethod);
}
public class Ocelot.Configuration.Creator.ClaimsToThingCreator : object {
    private IClaimToThingConfigurationParser _claimToThingConfigParser;
    private IOcelotLogger _logger;
    public ClaimsToThingCreator(IClaimToThingConfigurationParser claimToThingConfigurationParser, IOcelotLoggerFactory loggerFactory);
    public sealed virtual List`1<ClaimToThing> Create(Dictionary`2<string, string> inputToBeParsed);
}
public class Ocelot.Configuration.Creator.ConfigurationCreator : object {
    private IServiceProviderConfigurationCreator _serviceProviderConfigCreator;
    private IQoSOptionsCreator _qosOptionsCreator;
    private IHttpHandlerOptionsCreator _httpHandlerOptionsCreator;
    private IAdministrationPath _adminPath;
    private ILoadBalancerOptionsCreator _loadBalancerOptionsCreator;
    private IVersionCreator _versionCreator;
    private IVersionPolicyCreator _versionPolicyCreator;
    public ConfigurationCreator(IServiceProviderConfigurationCreator serviceProviderConfigCreator, IQoSOptionsCreator qosOptionsCreator, IHttpHandlerOptionsCreator httpHandlerOptionsCreator, IServiceProvider serviceProvider, ILoadBalancerOptionsCreator loadBalancerOptionsCreator, IVersionCreator versionCreator, IVersionPolicyCreator versionPolicyCreator);
    public sealed virtual InternalConfiguration Create(FileConfiguration fileConfiguration, List`1<Route> routes);
}
public class Ocelot.Configuration.Creator.DefaultMetadataCreator : object {
    public sealed virtual MetadataOptions Create(IDictionary`2<string, string> metadata, FileGlobalConfiguration globalConfiguration);
}
public class Ocelot.Configuration.Creator.DownstreamAddressesCreator : object {
    public sealed virtual List`1<DownstreamHostAndPort> Create(FileRoute route);
}
public class Ocelot.Configuration.Creator.DynamicsCreator : object {
    private IRateLimitOptionsCreator _rateLimitOptionsCreator;
    private IVersionCreator _versionCreator;
    private IVersionPolicyCreator _versionPolicyCreator;
    private IMetadataCreator _metadataCreator;
    public DynamicsCreator(IRateLimitOptionsCreator rateLimitOptionsCreator, IVersionCreator versionCreator, IVersionPolicyCreator versionPolicyCreator, IMetadataCreator metadataCreator);
    public sealed virtual List`1<Route> Create(FileConfiguration fileConfiguration);
    private Route SetUpDynamicRoute(FileDynamicRoute fileDynamicRoute, FileGlobalConfiguration globalConfiguration);
}
public class Ocelot.Configuration.Creator.FileInternalConfigurationCreator : object {
    private IConfigurationValidator _configurationValidator;
    private IConfigurationCreator _configCreator;
    private IDynamicsCreator _dynamicsCreator;
    private IRoutesCreator _routesCreator;
    private IAggregatesCreator _aggregatesCreator;
    public FileInternalConfigurationCreator(IConfigurationValidator configurationValidator, IRoutesCreator routesCreator, IAggregatesCreator aggregatesCreator, IDynamicsCreator dynamicsCreator, IConfigurationCreator configCreator);
    [AsyncStateMachineAttribute("Ocelot.Configuration.Creator.FileInternalConfigurationCreator/<Create>d__6")]
public sealed virtual Task`1<Response`1<IInternalConfiguration>> Create(FileConfiguration fileConfiguration);
}
public class Ocelot.Configuration.Creator.HeaderFindAndReplaceCreator : object {
    private IPlaceholders _placeholders;
    private IOcelotLogger _logger;
    public HeaderFindAndReplaceCreator(IPlaceholders placeholders, IOcelotLoggerFactory factory);
    public sealed virtual HeaderTransformations Create(FileRoute fileRoute);
    private Response`1<HeaderFindAndReplace> Map(KeyValuePair`2<string, string> input);
}
public class Ocelot.Configuration.Creator.HeaderTransformations : object {
    [CompilerGeneratedAttribute]
private List`1<HeaderFindAndReplace> <Upstream>k__BackingField;
    [CompilerGeneratedAttribute]
private List`1<HeaderFindAndReplace> <Downstream>k__BackingField;
    [CompilerGeneratedAttribute]
private List`1<AddHeader> <AddHeadersToDownstream>k__BackingField;
    [CompilerGeneratedAttribute]
private List`1<AddHeader> <AddHeadersToUpstream>k__BackingField;
    public List`1<HeaderFindAndReplace> Upstream { get; }
    public List`1<HeaderFindAndReplace> Downstream { get; }
    public List`1<AddHeader> AddHeadersToDownstream { get; }
    public List`1<AddHeader> AddHeadersToUpstream { get; }
    public HeaderTransformations(List`1<HeaderFindAndReplace> upstream, List`1<HeaderFindAndReplace> downstream, List`1<AddHeader> addHeaderToDownstream, List`1<AddHeader> addHeaderToUpstream);
    [CompilerGeneratedAttribute]
public List`1<HeaderFindAndReplace> get_Upstream();
    [CompilerGeneratedAttribute]
public List`1<HeaderFindAndReplace> get_Downstream();
    [CompilerGeneratedAttribute]
public List`1<AddHeader> get_AddHeadersToDownstream();
    [CompilerGeneratedAttribute]
public List`1<AddHeader> get_AddHeadersToUpstream();
}
public class Ocelot.Configuration.Creator.HttpHandlerOptionsCreator : object {
    private ITracer _tracer;
    public static int DefaultPooledConnectionLifetimeSeconds;
    public HttpHandlerOptionsCreator(IServiceProvider services);
    public sealed virtual HttpHandlerOptions Create(FileHttpHandlerOptions options);
}
public class Ocelot.Configuration.Creator.HttpVersionCreator : object {
    public sealed virtual Version Create(string downstreamHttpVersion);
}
public class Ocelot.Configuration.Creator.HttpVersionPolicyCreator : object {
    public sealed virtual HttpVersionPolicy Create(string downstreamHttpVersionPolicy);
}
public interface Ocelot.Configuration.Creator.IAggregatesCreator {
    public abstract virtual List`1<Route> Create(FileConfiguration fileConfiguration, List`1<Route> routes);
}
public interface Ocelot.Configuration.Creator.IAuthenticationOptionsCreator {
    public abstract virtual AuthenticationOptions Create(FileRoute route);
}
public interface Ocelot.Configuration.Creator.ICacheOptionsCreator {
    public abstract virtual CacheOptions Create(FileCacheOptions options, FileGlobalConfiguration global, string upstreamPathTemplate, IList`1<string> upstreamHttpMethods);
}
public interface Ocelot.Configuration.Creator.IClaimsToThingCreator {
    public abstract virtual List`1<ClaimToThing> Create(Dictionary`2<string, string> thingsBeingAdded);
}
public interface Ocelot.Configuration.Creator.IConfigurationCreator {
    public abstract virtual InternalConfiguration Create(FileConfiguration fileConfiguration, List`1<Route> routes);
}
public interface Ocelot.Configuration.Creator.IDownstreamAddressesCreator {
    public abstract virtual List`1<DownstreamHostAndPort> Create(FileRoute route);
}
public interface Ocelot.Configuration.Creator.IDynamicsCreator {
    public abstract virtual List`1<Route> Create(FileConfiguration fileConfiguration);
}
public interface Ocelot.Configuration.Creator.IHeaderFindAndReplaceCreator {
    public abstract virtual HeaderTransformations Create(FileRoute fileRoute);
}
public interface Ocelot.Configuration.Creator.IHttpHandlerOptionsCreator {
    public abstract virtual HttpHandlerOptions Create(FileHttpHandlerOptions fileRoute);
}
public interface Ocelot.Configuration.Creator.IInternalConfigurationCreator {
    public abstract virtual Task`1<Response`1<IInternalConfiguration>> Create(FileConfiguration fileConfiguration);
}
public interface Ocelot.Configuration.Creator.ILoadBalancerOptionsCreator {
    public abstract virtual LoadBalancerOptions Create(FileLoadBalancerOptions options);
}
public interface Ocelot.Configuration.Creator.IMetadataCreator {
    public abstract virtual MetadataOptions Create(IDictionary`2<string, string> metadata, FileGlobalConfiguration globalConfiguration);
}
public interface Ocelot.Configuration.Creator.IQoSOptionsCreator {
    public abstract virtual QoSOptions Create(FileQoSOptions options);
    public abstract virtual QoSOptions Create(FileQoSOptions options, string pathTemplate, List`1<string> httpMethods);
    public abstract virtual QoSOptions Create(QoSOptions options, string pathTemplate, List`1<string> httpMethods);
}
public interface Ocelot.Configuration.Creator.IRateLimitOptionsCreator {
    public abstract virtual RateLimitOptions Create(FileRateLimitRule fileRateLimitRule, FileGlobalConfiguration globalConfiguration);
}
public interface Ocelot.Configuration.Creator.IRequestIdKeyCreator {
    public abstract virtual string Create(FileRoute fileRoute, FileGlobalConfiguration globalConfiguration);
}
public interface Ocelot.Configuration.Creator.IRouteKeyCreator {
    public abstract virtual string Create(FileRoute fileRoute);
}
public interface Ocelot.Configuration.Creator.IRouteOptionsCreator {
    public abstract virtual RouteOptions Create(FileRoute fileRoute);
}
public interface Ocelot.Configuration.Creator.IRoutesCreator {
    public abstract virtual List`1<Route> Create(FileConfiguration fileConfiguration);
}
public interface Ocelot.Configuration.Creator.ISecurityOptionsCreator {
    public abstract virtual SecurityOptions Create(FileSecurityOptions securityOptions);
}
public interface Ocelot.Configuration.Creator.IServiceProviderConfigurationCreator {
    public abstract virtual ServiceProviderConfiguration Create(FileGlobalConfiguration globalConfiguration);
}
public interface Ocelot.Configuration.Creator.IUpstreamHeaderTemplatePatternCreator {
    public abstract virtual IDictionary`2<string, UpstreamHeaderTemplate> Create(IRoute route);
}
public interface Ocelot.Configuration.Creator.IUpstreamTemplatePatternCreator {
    public abstract virtual UpstreamPathTemplate Create(IRoute route);
}
public interface Ocelot.Configuration.Creator.IVersionCreator {
    public abstract virtual Version Create(string downstreamHttpVersion);
}
public interface Ocelot.Configuration.Creator.IVersionPolicyCreator {
    public abstract virtual HttpVersionPolicy Create(string downstreamHttpVersionPolicy);
}
public class Ocelot.Configuration.Creator.LoadBalancerOptionsCreator : object {
    public sealed virtual LoadBalancerOptions Create(FileLoadBalancerOptions options);
}
public class Ocelot.Configuration.Creator.QoSOptionsCreator : object {
    public sealed virtual QoSOptions Create(FileQoSOptions options);
    public sealed virtual QoSOptions Create(FileQoSOptions options, string pathTemplate, List`1<string> httpMethods);
    public sealed virtual QoSOptions Create(QoSOptions options, string pathTemplate, List`1<string> httpMethods);
    private static QoSOptions Map(string key, int timeoutValue, int durationOfBreak, int exceptionsAllowedBeforeBreaking);
    private static string CreateKey(string pathTemplate, IEnumerable`1<string> httpMethods);
}
public class Ocelot.Configuration.Creator.RateLimitOptionsCreator : object {
    public sealed virtual RateLimitOptions Create(FileRateLimitRule fileRateLimitRule, FileGlobalConfiguration globalConfiguration);
}
public class Ocelot.Configuration.Creator.RequestIdKeyCreator : object {
    public sealed virtual string Create(FileRoute fileRoute, FileGlobalConfiguration globalConfiguration);
}
public class Ocelot.Configuration.Creator.RouteKeyCreator : object {
    public sealed virtual string Create(FileRoute fileRoute);
    private static string Csv(IEnumerable`1<string> values);
    private static string Coalesce(string first, string second);
}
[ExtensionAttribute]
internal static class Ocelot.Configuration.Creator.RouteKeyCreatorHelpers : object {
    [ExtensionAttribute]
public static StringBuilder AppendNext(StringBuilder builder, string next);
}
public class Ocelot.Configuration.Creator.RouteOptionsCreator : object {
    public sealed virtual RouteOptions Create(FileRoute fileRoute);
}
public class Ocelot.Configuration.Creator.RoutesCreator : object {
    private ILoadBalancerOptionsCreator _loadBalancerOptionsCreator;
    private IClaimsToThingCreator _claimsToThingCreator;
    private IAuthenticationOptionsCreator _authOptionsCreator;
    private IUpstreamTemplatePatternCreator _upstreamTemplatePatternCreator;
    private IUpstreamHeaderTemplatePatternCreator _upstreamHeaderTemplatePatternCreator;
    private IRequestIdKeyCreator _requestIdKeyCreator;
    private IQoSOptionsCreator _qosOptionsCreator;
    private IRouteOptionsCreator _fileRouteOptionsCreator;
    private IRateLimitOptionsCreator _rateLimitOptionsCreator;
    private ICacheOptionsCreator _cacheOptionsCreator;
    private IHttpHandlerOptionsCreator _httpHandlerOptionsCreator;
    private IHeaderFindAndReplaceCreator _headerFAndRCreator;
    private IDownstreamAddressesCreator _downstreamAddressesCreator;
    private IRouteKeyCreator _routeKeyCreator;
    private ISecurityOptionsCreator _securityOptionsCreator;
    private IVersionCreator _versionCreator;
    private IVersionPolicyCreator _versionPolicyCreator;
    private IMetadataCreator _metadataCreator;
    public RoutesCreator(IClaimsToThingCreator claimsToThingCreator, IAuthenticationOptionsCreator authOptionsCreator, IUpstreamTemplatePatternCreator upstreamTemplatePatternCreator, IRequestIdKeyCreator requestIdKeyCreator, IQoSOptionsCreator qosOptionsCreator, IRouteOptionsCreator fileRouteOptionsCreator, IRateLimitOptionsCreator rateLimitOptionsCreator, ICacheOptionsCreator cacheOptionsCreator, IHttpHandlerOptionsCreator httpHandlerOptionsCreator, IHeaderFindAndReplaceCreator headerFAndRCreator, IDownstreamAddressesCreator downstreamAddressesCreator, ILoadBalancerOptionsCreator loadBalancerOptionsCreator, IRouteKeyCreator routeKeyCreator, ISecurityOptionsCreator securityOptionsCreator, IVersionCreator versionCreator, IVersionPolicyCreator versionPolicyCreator, IUpstreamHeaderTemplatePatternCreator upstreamHeaderTemplatePatternCreator, IMetadataCreator metadataCreator);
    public sealed virtual List`1<Route> Create(FileConfiguration fileConfiguration);
    private DownstreamRoute SetUpDownstreamRoute(FileRoute fileRoute, FileGlobalConfiguration globalConfiguration);
    private Route SetUpRoute(FileRoute fileRoute, DownstreamRoute downstreamRoutes);
}
public class Ocelot.Configuration.Creator.SecurityOptionsCreator : object {
    public sealed virtual SecurityOptions Create(FileSecurityOptions securityOptions);
}
public class Ocelot.Configuration.Creator.ServiceProviderConfigurationCreator : object {
    public sealed virtual ServiceProviderConfiguration Create(FileGlobalConfiguration globalConfiguration);
}
public class Ocelot.Configuration.Creator.UpstreamHeaderTemplatePatternCreator : object {
    private static string PlaceHolderPattern;
    [GeneratedRegexAttribute("(\{header:.*?\})", "17", "en-US")]
[GeneratedCodeAttribute("System.Text.RegularExpressions.Generator", "8.0.10.11423")]
private static Regex RegExPlaceholders();
    public sealed virtual IDictionary`2<string, UpstreamHeaderTemplate> Create(IRoute route);
}
public class Ocelot.Configuration.Creator.UpstreamTemplatePatternCreator : object {
    public static string RegExMatchZeroOrMoreOfEverything;
    private static string RegExMatchOneOrMoreOfEverythingUntilNextForwardSlash;
    private static string RegExMatchEndString;
    private static string RegExIgnoreCase;
    private static string RegExForwardSlashOnly;
    private static string RegExForwardSlashAndOnePlaceHolder;
    public sealed virtual UpstreamPathTemplate Create(IRoute route);
    private static bool ForwardSlashAndOnePlaceHolder(string upstreamTemplate, List`1<string> placeholders, int postitionOfPlaceHolderClosingBracket);
    private static bool IsPlaceHolder(string upstreamTemplate, int i);
}
public class Ocelot.Configuration.Creator.VersionPolicies : object {
    public static string RequestVersionExact;
    public static string RequestVersionOrLower;
    public static string RequestVersionOrHigher;
}
public class Ocelot.Configuration.DownstreamHostAndPort : object {
    [CompilerGeneratedAttribute]
private string <Host>k__BackingField;
    [CompilerGeneratedAttribute]
private int <Port>k__BackingField;
    public string Host { get; }
    public int Port { get; }
    public DownstreamHostAndPort(string host, int port);
    [CompilerGeneratedAttribute]
public string get_Host();
    [CompilerGeneratedAttribute]
public int get_Port();
}
public class Ocelot.Configuration.DownstreamRoute : object {
    [CompilerGeneratedAttribute]
private string <Key>k__BackingField;
    [CompilerGeneratedAttribute]
private UpstreamPathTemplate <UpstreamPathTemplate>k__BackingField;
    [CompilerGeneratedAttribute]
private List`1<HeaderFindAndReplace> <UpstreamHeadersFindAndReplace>k__BackingField;
    [CompilerGeneratedAttribute]
private List`1<HeaderFindAndReplace> <DownstreamHeadersFindAndReplace>k__BackingField;
    [CompilerGeneratedAttribute]
private List`1<DownstreamHostAndPort> <DownstreamAddresses>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ServiceName>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ServiceNamespace>k__BackingField;
    [CompilerGeneratedAttribute]
private HttpHandlerOptions <HttpHandlerOptions>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <UseServiceDiscovery>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <EnableEndpointEndpointRateLimiting>k__BackingField;
    [CompilerGeneratedAttribute]
private QoSOptions <QosOptions>k__BackingField;
    [CompilerGeneratedAttribute]
private string <DownstreamScheme>k__BackingField;
    [CompilerGeneratedAttribute]
private string <RequestIdKey>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsCached>k__BackingField;
    [CompilerGeneratedAttribute]
private CacheOptions <CacheOptions>k__BackingField;
    [CompilerGeneratedAttribute]
private LoadBalancerOptions <LoadBalancerOptions>k__BackingField;
    [CompilerGeneratedAttribute]
private RateLimitOptions <RateLimitOptions>k__BackingField;
    [CompilerGeneratedAttribute]
private Dictionary`2<string, string> <RouteClaimsRequirement>k__BackingField;
    [CompilerGeneratedAttribute]
private List`1<ClaimToThing> <ClaimsToQueries>k__BackingField;
    [CompilerGeneratedAttribute]
private List`1<ClaimToThing> <ClaimsToHeaders>k__BackingField;
    [CompilerGeneratedAttribute]
private List`1<ClaimToThing> <ClaimsToClaims>k__BackingField;
    [CompilerGeneratedAttribute]
private List`1<ClaimToThing> <ClaimsToPath>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsAuthenticated>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsAuthorized>k__BackingField;
    [CompilerGeneratedAttribute]
private AuthenticationOptions <AuthenticationOptions>k__BackingField;
    [CompilerGeneratedAttribute]
private DownstreamPathTemplate <DownstreamPathTemplate>k__BackingField;
    [CompilerGeneratedAttribute]
private string <LoadBalancerKey>k__BackingField;
    [CompilerGeneratedAttribute]
private List`1<string> <DelegatingHandlers>k__BackingField;
    [CompilerGeneratedAttribute]
private List`1<AddHeader> <AddHeadersToDownstream>k__BackingField;
    [CompilerGeneratedAttribute]
private List`1<AddHeader> <AddHeadersToUpstream>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <DangerousAcceptAnyServerCertificateValidator>k__BackingField;
    [CompilerGeneratedAttribute]
private SecurityOptions <SecurityOptions>k__BackingField;
    [CompilerGeneratedAttribute]
private string <DownstreamHttpMethod>k__BackingField;
    [CompilerGeneratedAttribute]
private Version <DownstreamHttpVersion>k__BackingField;
    [CompilerGeneratedAttribute]
private HttpVersionPolicy <DownstreamHttpVersionPolicy>k__BackingField;
    [CompilerGeneratedAttribute]
private Dictionary`2<string, UpstreamHeaderTemplate> <UpstreamHeaders>k__BackingField;
    [CompilerGeneratedAttribute]
private MetadataOptions <MetadataOptions>k__BackingField;
    public string Key { get; }
    public UpstreamPathTemplate UpstreamPathTemplate { get; }
    public List`1<HeaderFindAndReplace> UpstreamHeadersFindAndReplace { get; }
    public List`1<HeaderFindAndReplace> DownstreamHeadersFindAndReplace { get; }
    public List`1<DownstreamHostAndPort> DownstreamAddresses { get; }
    public string ServiceName { get; }
    public string ServiceNamespace { get; }
    public HttpHandlerOptions HttpHandlerOptions { get; }
    public bool UseServiceDiscovery { get; }
    public bool EnableEndpointEndpointRateLimiting { get; }
    public QoSOptions QosOptions { get; }
    public string DownstreamScheme { get; }
    public string RequestIdKey { get; }
    public bool IsCached { get; }
    public CacheOptions CacheOptions { get; }
    public LoadBalancerOptions LoadBalancerOptions { get; }
    public RateLimitOptions RateLimitOptions { get; }
    public Dictionary`2<string, string> RouteClaimsRequirement { get; }
    public List`1<ClaimToThing> ClaimsToQueries { get; }
    public List`1<ClaimToThing> ClaimsToHeaders { get; }
    public List`1<ClaimToThing> ClaimsToClaims { get; }
    public List`1<ClaimToThing> ClaimsToPath { get; }
    public bool IsAuthenticated { get; }
    public bool IsAuthorized { get; }
    public AuthenticationOptions AuthenticationOptions { get; }
    public DownstreamPathTemplate DownstreamPathTemplate { get; }
    public string LoadBalancerKey { get; }
    public List`1<string> DelegatingHandlers { get; }
    public List`1<AddHeader> AddHeadersToDownstream { get; }
    public List`1<AddHeader> AddHeadersToUpstream { get; }
    public bool DangerousAcceptAnyServerCertificateValidator { get; }
    public SecurityOptions SecurityOptions { get; }
    public string DownstreamHttpMethod { get; }
    public Version DownstreamHttpVersion { get; }
    public HttpVersionPolicy DownstreamHttpVersionPolicy { get; }
    public Dictionary`2<string, UpstreamHeaderTemplate> UpstreamHeaders { get; }
    public MetadataOptions MetadataOptions { get; }
    public DownstreamRoute(string key, UpstreamPathTemplate upstreamPathTemplate, List`1<HeaderFindAndReplace> upstreamHeadersFindAndReplace, List`1<HeaderFindAndReplace> downstreamHeadersFindAndReplace, List`1<DownstreamHostAndPort> downstreamAddresses, string serviceName, string serviceNamespace, HttpHandlerOptions httpHandlerOptions, bool useServiceDiscovery, bool enableEndpointEndpointRateLimiting, QoSOptions qosOptions, string downstreamScheme, string requestIdKey, bool isCached, CacheOptions cacheOptions, LoadBalancerOptions loadBalancerOptions, RateLimitOptions rateLimitOptions, Dictionary`2<string, string> routeClaimsRequirement, List`1<ClaimToThing> claimsToQueries, List`1<ClaimToThing> claimsToHeaders, List`1<ClaimToThing> claimsToClaims, List`1<ClaimToThing> claimsToPath, bool isAuthenticated, bool isAuthorized, AuthenticationOptions authenticationOptions, DownstreamPathTemplate downstreamPathTemplate, string loadBalancerKey, List`1<string> delegatingHandlers, List`1<AddHeader> addHeadersToDownstream, List`1<AddHeader> addHeadersToUpstream, bool dangerousAcceptAnyServerCertificateValidator, SecurityOptions securityOptions, string downstreamHttpMethod, Version downstreamHttpVersion, HttpVersionPolicy downstreamHttpVersionPolicy, Dictionary`2<string, UpstreamHeaderTemplate> upstreamHeaders, MetadataOptions metadataOptions);
    [CompilerGeneratedAttribute]
public string get_Key();
    [CompilerGeneratedAttribute]
public UpstreamPathTemplate get_UpstreamPathTemplate();
    [CompilerGeneratedAttribute]
public List`1<HeaderFindAndReplace> get_UpstreamHeadersFindAndReplace();
    [CompilerGeneratedAttribute]
public List`1<HeaderFindAndReplace> get_DownstreamHeadersFindAndReplace();
    [CompilerGeneratedAttribute]
public List`1<DownstreamHostAndPort> get_DownstreamAddresses();
    [CompilerGeneratedAttribute]
public string get_ServiceName();
    [CompilerGeneratedAttribute]
public string get_ServiceNamespace();
    [CompilerGeneratedAttribute]
public HttpHandlerOptions get_HttpHandlerOptions();
    [CompilerGeneratedAttribute]
public bool get_UseServiceDiscovery();
    [CompilerGeneratedAttribute]
public bool get_EnableEndpointEndpointRateLimiting();
    [CompilerGeneratedAttribute]
public QoSOptions get_QosOptions();
    [CompilerGeneratedAttribute]
public string get_DownstreamScheme();
    [CompilerGeneratedAttribute]
public string get_RequestIdKey();
    [CompilerGeneratedAttribute]
public bool get_IsCached();
    [CompilerGeneratedAttribute]
public CacheOptions get_CacheOptions();
    [CompilerGeneratedAttribute]
public LoadBalancerOptions get_LoadBalancerOptions();
    [CompilerGeneratedAttribute]
public RateLimitOptions get_RateLimitOptions();
    [CompilerGeneratedAttribute]
public Dictionary`2<string, string> get_RouteClaimsRequirement();
    [CompilerGeneratedAttribute]
public List`1<ClaimToThing> get_ClaimsToQueries();
    [CompilerGeneratedAttribute]
public List`1<ClaimToThing> get_ClaimsToHeaders();
    [CompilerGeneratedAttribute]
public List`1<ClaimToThing> get_ClaimsToClaims();
    [CompilerGeneratedAttribute]
public List`1<ClaimToThing> get_ClaimsToPath();
    [CompilerGeneratedAttribute]
public bool get_IsAuthenticated();
    [CompilerGeneratedAttribute]
public bool get_IsAuthorized();
    [CompilerGeneratedAttribute]
public AuthenticationOptions get_AuthenticationOptions();
    [CompilerGeneratedAttribute]
public DownstreamPathTemplate get_DownstreamPathTemplate();
    [CompilerGeneratedAttribute]
public string get_LoadBalancerKey();
    [CompilerGeneratedAttribute]
public List`1<string> get_DelegatingHandlers();
    [CompilerGeneratedAttribute]
public List`1<AddHeader> get_AddHeadersToDownstream();
    [CompilerGeneratedAttribute]
public List`1<AddHeader> get_AddHeadersToUpstream();
    [CompilerGeneratedAttribute]
public bool get_DangerousAcceptAnyServerCertificateValidator();
    [CompilerGeneratedAttribute]
public SecurityOptions get_SecurityOptions();
    [CompilerGeneratedAttribute]
public string get_DownstreamHttpMethod();
    [CompilerGeneratedAttribute]
public Version get_DownstreamHttpVersion();
    [CompilerGeneratedAttribute]
public HttpVersionPolicy get_DownstreamHttpVersionPolicy();
    [CompilerGeneratedAttribute]
public Dictionary`2<string, UpstreamHeaderTemplate> get_UpstreamHeaders();
    [CompilerGeneratedAttribute]
public MetadataOptions get_MetadataOptions();
}
public class Ocelot.Configuration.File.AggregateRouteConfig : object {
    [CompilerGeneratedAttribute]
private string <RouteKey>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Parameter>k__BackingField;
    [CompilerGeneratedAttribute]
private string <JsonPath>k__BackingField;
    public string RouteKey { get; public set; }
    public string Parameter { get; public set; }
    public string JsonPath { get; public set; }
    [CompilerGeneratedAttribute]
public string get_RouteKey();
    [CompilerGeneratedAttribute]
public void set_RouteKey(string value);
    [CompilerGeneratedAttribute]
public string get_Parameter();
    [CompilerGeneratedAttribute]
public void set_Parameter(string value);
    [CompilerGeneratedAttribute]
public string get_JsonPath();
    [CompilerGeneratedAttribute]
public void set_JsonPath(string value);
}
public class Ocelot.Configuration.File.FileAggregateRoute : object {
    [CompilerGeneratedAttribute]
private List`1<string> <RouteKeys>k__BackingField;
    [CompilerGeneratedAttribute]
private List`1<AggregateRouteConfig> <RouteKeysConfig>k__BackingField;
    [CompilerGeneratedAttribute]
private string <UpstreamPathTemplate>k__BackingField;
    [CompilerGeneratedAttribute]
private string <UpstreamHost>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <RouteIsCaseSensitive>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Aggregator>k__BackingField;
    [CompilerGeneratedAttribute]
private IDictionary`2<string, string> <UpstreamHeaderTemplates>k__BackingField;
    [CompilerGeneratedAttribute]
private int <Priority>k__BackingField;
    public List`1<string> RouteKeys { get; public set; }
    public List`1<AggregateRouteConfig> RouteKeysConfig { get; public set; }
    public string UpstreamPathTemplate { get; public set; }
    public string UpstreamHost { get; public set; }
    public bool RouteIsCaseSensitive { get; public set; }
    public string Aggregator { get; public set; }
    public List`1<string> UpstreamHttpMethod { get; }
    public IDictionary`2<string, string> UpstreamHeaderTemplates { get; public set; }
    public int Priority { get; public set; }
    [CompilerGeneratedAttribute]
public List`1<string> get_RouteKeys();
    [CompilerGeneratedAttribute]
public void set_RouteKeys(List`1<string> value);
    [CompilerGeneratedAttribute]
public List`1<AggregateRouteConfig> get_RouteKeysConfig();
    [CompilerGeneratedAttribute]
public void set_RouteKeysConfig(List`1<AggregateRouteConfig> value);
    [CompilerGeneratedAttribute]
public sealed virtual string get_UpstreamPathTemplate();
    [CompilerGeneratedAttribute]
public sealed virtual void set_UpstreamPathTemplate(string value);
    [CompilerGeneratedAttribute]
public string get_UpstreamHost();
    [CompilerGeneratedAttribute]
public void set_UpstreamHost(string value);
    [CompilerGeneratedAttribute]
public sealed virtual bool get_RouteIsCaseSensitive();
    [CompilerGeneratedAttribute]
public sealed virtual void set_RouteIsCaseSensitive(bool value);
    [CompilerGeneratedAttribute]
public string get_Aggregator();
    [CompilerGeneratedAttribute]
public void set_Aggregator(string value);
    public List`1<string> get_UpstreamHttpMethod();
    [CompilerGeneratedAttribute]
public sealed virtual IDictionary`2<string, string> get_UpstreamHeaderTemplates();
    [CompilerGeneratedAttribute]
public sealed virtual void set_UpstreamHeaderTemplates(IDictionary`2<string, string> value);
    [CompilerGeneratedAttribute]
public sealed virtual int get_Priority();
    [CompilerGeneratedAttribute]
public sealed virtual void set_Priority(int value);
}
public class Ocelot.Configuration.File.FileAuthenticationOptions : object {
    [CompilerGeneratedAttribute]
private List`1<string> <AllowedScopes>k__BackingField;
    [CompilerGeneratedAttribute]
private string <AuthenticationProviderKey>k__BackingField;
    [CompilerGeneratedAttribute]
private String[] <AuthenticationProviderKeys>k__BackingField;
    public List`1<string> AllowedScopes { get; public set; }
    [ObsoleteAttribute("Use the AuthenticationProviderKeys property!")]
public string AuthenticationProviderKey { get; public set; }
    public String[] AuthenticationProviderKeys { get; public set; }
    public FileAuthenticationOptions(FileAuthenticationOptions from);
    [CompilerGeneratedAttribute]
public List`1<string> get_AllowedScopes();
    [CompilerGeneratedAttribute]
public void set_AllowedScopes(List`1<string> value);
    [CompilerGeneratedAttribute]
public string get_AuthenticationProviderKey();
    [CompilerGeneratedAttribute]
public void set_AuthenticationProviderKey(string value);
    [CompilerGeneratedAttribute]
public String[] get_AuthenticationProviderKeys();
    [CompilerGeneratedAttribute]
public void set_AuthenticationProviderKeys(String[] value);
    public virtual string ToString();
}
public class Ocelot.Configuration.File.FileCacheOptions : object {
    [CompilerGeneratedAttribute]
private Nullable`1<int> <TtlSeconds>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Region>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Header>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<bool> <EnableContentHashing>k__BackingField;
    public Nullable`1<int> TtlSeconds { get; public set; }
    public string Region { get; public set; }
    public string Header { get; public set; }
    public Nullable`1<bool> EnableContentHashing { get; public set; }
    public FileCacheOptions(FileCacheOptions from);
    [CompilerGeneratedAttribute]
public Nullable`1<int> get_TtlSeconds();
    [CompilerGeneratedAttribute]
public void set_TtlSeconds(Nullable`1<int> value);
    [CompilerGeneratedAttribute]
public string get_Region();
    [CompilerGeneratedAttribute]
public void set_Region(string value);
    [CompilerGeneratedAttribute]
public string get_Header();
    [CompilerGeneratedAttribute]
public void set_Header(string value);
    [CompilerGeneratedAttribute]
public Nullable`1<bool> get_EnableContentHashing();
    [CompilerGeneratedAttribute]
public void set_EnableContentHashing(Nullable`1<bool> value);
}
public class Ocelot.Configuration.File.FileConfiguration : object {
    [CompilerGeneratedAttribute]
private List`1<FileRoute> <Routes>k__BackingField;
    [CompilerGeneratedAttribute]
private List`1<FileDynamicRoute> <DynamicRoutes>k__BackingField;
    [CompilerGeneratedAttribute]
private List`1<FileAggregateRoute> <Aggregates>k__BackingField;
    [CompilerGeneratedAttribute]
private FileGlobalConfiguration <GlobalConfiguration>k__BackingField;
    public List`1<FileRoute> Routes { get; public set; }
    public List`1<FileDynamicRoute> DynamicRoutes { get; public set; }
    public List`1<FileAggregateRoute> Aggregates { get; public set; }
    public FileGlobalConfiguration GlobalConfiguration { get; public set; }
    [CompilerGeneratedAttribute]
public List`1<FileRoute> get_Routes();
    [CompilerGeneratedAttribute]
public void set_Routes(List`1<FileRoute> value);
    [CompilerGeneratedAttribute]
public List`1<FileDynamicRoute> get_DynamicRoutes();
    [CompilerGeneratedAttribute]
public void set_DynamicRoutes(List`1<FileDynamicRoute> value);
    [CompilerGeneratedAttribute]
public List`1<FileAggregateRoute> get_Aggregates();
    [CompilerGeneratedAttribute]
public void set_Aggregates(List`1<FileAggregateRoute> value);
    [CompilerGeneratedAttribute]
public FileGlobalConfiguration get_GlobalConfiguration();
    [CompilerGeneratedAttribute]
public void set_GlobalConfiguration(FileGlobalConfiguration value);
}
public class Ocelot.Configuration.File.FileDynamicRoute : object {
    [CompilerGeneratedAttribute]
private string <ServiceName>k__BackingField;
    [CompilerGeneratedAttribute]
private FileRateLimitRule <RateLimitRule>k__BackingField;
    [CompilerGeneratedAttribute]
private string <DownstreamHttpVersion>k__BackingField;
    [CompilerGeneratedAttribute]
private string <DownstreamHttpVersionPolicy>k__BackingField;
    [CompilerGeneratedAttribute]
private IDictionary`2<string, string> <Metadata>k__BackingField;
    public string ServiceName { get; public set; }
    public FileRateLimitRule RateLimitRule { get; public set; }
    public string DownstreamHttpVersion { get; public set; }
    public string DownstreamHttpVersionPolicy { get; public set; }
    public IDictionary`2<string, string> Metadata { get; public set; }
    [CompilerGeneratedAttribute]
public string get_ServiceName();
    [CompilerGeneratedAttribute]
public void set_ServiceName(string value);
    [CompilerGeneratedAttribute]
public FileRateLimitRule get_RateLimitRule();
    [CompilerGeneratedAttribute]
public void set_RateLimitRule(FileRateLimitRule value);
    [CompilerGeneratedAttribute]
public string get_DownstreamHttpVersion();
    [CompilerGeneratedAttribute]
public void set_DownstreamHttpVersion(string value);
    [CompilerGeneratedAttribute]
public string get_DownstreamHttpVersionPolicy();
    [CompilerGeneratedAttribute]
public void set_DownstreamHttpVersionPolicy(string value);
    [CompilerGeneratedAttribute]
public IDictionary`2<string, string> get_Metadata();
    [CompilerGeneratedAttribute]
public void set_Metadata(IDictionary`2<string, string> value);
}
public class Ocelot.Configuration.File.FileGlobalConfiguration : object {
    [CompilerGeneratedAttribute]
private string <RequestIdKey>k__BackingField;
    [CompilerGeneratedAttribute]
private FileServiceDiscoveryProvider <ServiceDiscoveryProvider>k__BackingField;
    [CompilerGeneratedAttribute]
private FileRateLimitOptions <RateLimitOptions>k__BackingField;
    [CompilerGeneratedAttribute]
private FileQoSOptions <QoSOptions>k__BackingField;
    [CompilerGeneratedAttribute]
private string <BaseUrl>k__BackingField;
    [CompilerGeneratedAttribute]
private FileLoadBalancerOptions <LoadBalancerOptions>k__BackingField;
    [CompilerGeneratedAttribute]
private string <DownstreamScheme>k__BackingField;
    [CompilerGeneratedAttribute]
private FileHttpHandlerOptions <HttpHandlerOptions>k__BackingField;
    [CompilerGeneratedAttribute]
private string <DownstreamHttpVersion>k__BackingField;
    [CompilerGeneratedAttribute]
private string <DownstreamHttpVersionPolicy>k__BackingField;
    [CompilerGeneratedAttribute]
private FileCacheOptions <CacheOptions>k__BackingField;
    [CompilerGeneratedAttribute]
private FileMetadataOptions <MetadataOptions>k__BackingField;
    public string RequestIdKey { get; public set; }
    public FileServiceDiscoveryProvider ServiceDiscoveryProvider { get; public set; }
    public FileRateLimitOptions RateLimitOptions { get; public set; }
    public FileQoSOptions QoSOptions { get; public set; }
    public string BaseUrl { get; public set; }
    public FileLoadBalancerOptions LoadBalancerOptions { get; public set; }
    public string DownstreamScheme { get; public set; }
    public FileHttpHandlerOptions HttpHandlerOptions { get; public set; }
    public string DownstreamHttpVersion { get; public set; }
    public string DownstreamHttpVersionPolicy { get; public set; }
    public FileCacheOptions CacheOptions { get; public set; }
    public FileMetadataOptions MetadataOptions { get; public set; }
    [CompilerGeneratedAttribute]
public string get_RequestIdKey();
    [CompilerGeneratedAttribute]
public void set_RequestIdKey(string value);
    [CompilerGeneratedAttribute]
public FileServiceDiscoveryProvider get_ServiceDiscoveryProvider();
    [CompilerGeneratedAttribute]
public void set_ServiceDiscoveryProvider(FileServiceDiscoveryProvider value);
    [CompilerGeneratedAttribute]
public FileRateLimitOptions get_RateLimitOptions();
    [CompilerGeneratedAttribute]
public void set_RateLimitOptions(FileRateLimitOptions value);
    [CompilerGeneratedAttribute]
public FileQoSOptions get_QoSOptions();
    [CompilerGeneratedAttribute]
public void set_QoSOptions(FileQoSOptions value);
    [CompilerGeneratedAttribute]
public string get_BaseUrl();
    [CompilerGeneratedAttribute]
public void set_BaseUrl(string value);
    [CompilerGeneratedAttribute]
public FileLoadBalancerOptions get_LoadBalancerOptions();
    [CompilerGeneratedAttribute]
public void set_LoadBalancerOptions(FileLoadBalancerOptions value);
    [CompilerGeneratedAttribute]
public string get_DownstreamScheme();
    [CompilerGeneratedAttribute]
public void set_DownstreamScheme(string value);
    [CompilerGeneratedAttribute]
public FileHttpHandlerOptions get_HttpHandlerOptions();
    [CompilerGeneratedAttribute]
public void set_HttpHandlerOptions(FileHttpHandlerOptions value);
    [CompilerGeneratedAttribute]
public string get_DownstreamHttpVersion();
    [CompilerGeneratedAttribute]
public void set_DownstreamHttpVersion(string value);
    [CompilerGeneratedAttribute]
public string get_DownstreamHttpVersionPolicy();
    [CompilerGeneratedAttribute]
public void set_DownstreamHttpVersionPolicy(string value);
    [CompilerGeneratedAttribute]
public FileCacheOptions get_CacheOptions();
    [CompilerGeneratedAttribute]
public void set_CacheOptions(FileCacheOptions value);
    [CompilerGeneratedAttribute]
public FileMetadataOptions get_MetadataOptions();
    [CompilerGeneratedAttribute]
public void set_MetadataOptions(FileMetadataOptions value);
}
public class Ocelot.Configuration.File.FileHostAndPort : object {
    [CompilerGeneratedAttribute]
private string <Host>k__BackingField;
    [CompilerGeneratedAttribute]
private int <Port>k__BackingField;
    public string Host { get; public set; }
    public int Port { get; public set; }
    public FileHostAndPort(FileHostAndPort from);
    public FileHostAndPort(string host, int port);
    [CompilerGeneratedAttribute]
public string get_Host();
    [CompilerGeneratedAttribute]
public void set_Host(string value);
    [CompilerGeneratedAttribute]
public int get_Port();
    [CompilerGeneratedAttribute]
public void set_Port(int value);
}
public class Ocelot.Configuration.File.FileHttpHandlerOptions : object {
    [CompilerGeneratedAttribute]
private bool <AllowAutoRedirect>k__BackingField;
    [CompilerGeneratedAttribute]
private int <MaxConnectionsPerServer>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <UseCookieContainer>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <UseProxy>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <UseTracing>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<int> <PooledConnectionLifetimeSeconds>k__BackingField;
    public bool AllowAutoRedirect { get; public set; }
    public int MaxConnectionsPerServer { get; public set; }
    public bool UseCookieContainer { get; public set; }
    public bool UseProxy { get; public set; }
    public bool UseTracing { get; public set; }
    public Nullable`1<int> PooledConnectionLifetimeSeconds { get; public set; }
    public FileHttpHandlerOptions(FileHttpHandlerOptions from);
    [CompilerGeneratedAttribute]
public bool get_AllowAutoRedirect();
    [CompilerGeneratedAttribute]
public void set_AllowAutoRedirect(bool value);
    [CompilerGeneratedAttribute]
public int get_MaxConnectionsPerServer();
    [CompilerGeneratedAttribute]
public void set_MaxConnectionsPerServer(int value);
    [CompilerGeneratedAttribute]
public bool get_UseCookieContainer();
    [CompilerGeneratedAttribute]
public void set_UseCookieContainer(bool value);
    [CompilerGeneratedAttribute]
public bool get_UseProxy();
    [CompilerGeneratedAttribute]
public void set_UseProxy(bool value);
    [CompilerGeneratedAttribute]
public bool get_UseTracing();
    [CompilerGeneratedAttribute]
public void set_UseTracing(bool value);
    [CompilerGeneratedAttribute]
public Nullable`1<int> get_PooledConnectionLifetimeSeconds();
    [CompilerGeneratedAttribute]
public void set_PooledConnectionLifetimeSeconds(Nullable`1<int> value);
}
public class Ocelot.Configuration.File.FileJwtConfig : object {
    [CompilerGeneratedAttribute]
private string <Authority>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Audience>k__BackingField;
    public string Authority { get; public set; }
    public string Audience { get; public set; }
    [CompilerGeneratedAttribute]
public string get_Authority();
    [CompilerGeneratedAttribute]
public void set_Authority(string value);
    [CompilerGeneratedAttribute]
public string get_Audience();
    [CompilerGeneratedAttribute]
public void set_Audience(string value);
}
public class Ocelot.Configuration.File.FileLoadBalancerOptions : object {
    [CompilerGeneratedAttribute]
private int <Expiry>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Key>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Type>k__BackingField;
    public int Expiry { get; public set; }
    public string Key { get; public set; }
    public string Type { get; public set; }
    public FileLoadBalancerOptions(FileLoadBalancerOptions from);
    [CompilerGeneratedAttribute]
public int get_Expiry();
    [CompilerGeneratedAttribute]
public void set_Expiry(int value);
    [CompilerGeneratedAttribute]
public string get_Key();
    [CompilerGeneratedAttribute]
public void set_Key(string value);
    [CompilerGeneratedAttribute]
public string get_Type();
    [CompilerGeneratedAttribute]
public void set_Type(string value);
}
public class Ocelot.Configuration.File.FileMetadataOptions : object {
    [CompilerGeneratedAttribute]
private IDictionary`2<string, string> <Metadata>k__BackingField;
    [CompilerGeneratedAttribute]
private String[] <Separators>k__BackingField;
    [CompilerGeneratedAttribute]
private Char[] <TrimChars>k__BackingField;
    [CompilerGeneratedAttribute]
private string <StringSplitOption>k__BackingField;
    [CompilerGeneratedAttribute]
private string <NumberStyle>k__BackingField;
    [CompilerGeneratedAttribute]
private string <CurrentCulture>k__BackingField;
    public IDictionary`2<string, string> Metadata { get; public set; }
    public String[] Separators { get; public set; }
    public Char[] TrimChars { get; public set; }
    public string StringSplitOption { get; public set; }
    public string NumberStyle { get; public set; }
    public string CurrentCulture { get; public set; }
    public FileMetadataOptions(FileMetadataOptions from);
    [CompilerGeneratedAttribute]
public IDictionary`2<string, string> get_Metadata();
    [CompilerGeneratedAttribute]
public void set_Metadata(IDictionary`2<string, string> value);
    [CompilerGeneratedAttribute]
public String[] get_Separators();
    [CompilerGeneratedAttribute]
public void set_Separators(String[] value);
    [CompilerGeneratedAttribute]
public Char[] get_TrimChars();
    [CompilerGeneratedAttribute]
public void set_TrimChars(Char[] value);
    [CompilerGeneratedAttribute]
public string get_StringSplitOption();
    [CompilerGeneratedAttribute]
public void set_StringSplitOption(string value);
    [CompilerGeneratedAttribute]
public string get_NumberStyle();
    [CompilerGeneratedAttribute]
public void set_NumberStyle(string value);
    [CompilerGeneratedAttribute]
public string get_CurrentCulture();
    [CompilerGeneratedAttribute]
public void set_CurrentCulture(string value);
}
public class Ocelot.Configuration.File.FileQoSOptions : object {
    [CompilerGeneratedAttribute]
private int <DurationOfBreak>k__BackingField;
    [CompilerGeneratedAttribute]
private int <ExceptionsAllowedBeforeBreaking>k__BackingField;
    [CompilerGeneratedAttribute]
private int <TimeoutValue>k__BackingField;
    public int DurationOfBreak { get; public set; }
    public int ExceptionsAllowedBeforeBreaking { get; public set; }
    public int TimeoutValue { get; public set; }
    public FileQoSOptions(FileQoSOptions from);
    public FileQoSOptions(QoSOptions from);
    [CompilerGeneratedAttribute]
public int get_DurationOfBreak();
    [CompilerGeneratedAttribute]
public void set_DurationOfBreak(int value);
    [CompilerGeneratedAttribute]
public int get_ExceptionsAllowedBeforeBreaking();
    [CompilerGeneratedAttribute]
public void set_ExceptionsAllowedBeforeBreaking(int value);
    [CompilerGeneratedAttribute]
public int get_TimeoutValue();
    [CompilerGeneratedAttribute]
public void set_TimeoutValue(int value);
}
public class Ocelot.Configuration.File.FileRateLimitOptions : object {
    [CompilerGeneratedAttribute]
private string <ClientIdHeader>k__BackingField;
    [CompilerGeneratedAttribute]
private string <QuotaExceededMessage>k__BackingField;
    [CompilerGeneratedAttribute]
private string <RateLimitCounterPrefix>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <DisableRateLimitHeaders>k__BackingField;
    [CompilerGeneratedAttribute]
private int <HttpStatusCode>k__BackingField;
    public string ClientIdHeader { get; public set; }
    public string QuotaExceededMessage { get; public set; }
    public string RateLimitCounterPrefix { get; public set; }
    public bool DisableRateLimitHeaders { get; public set; }
    public int HttpStatusCode { get; public set; }
    [CompilerGeneratedAttribute]
public string get_ClientIdHeader();
    [CompilerGeneratedAttribute]
public void set_ClientIdHeader(string value);
    [CompilerGeneratedAttribute]
public string get_QuotaExceededMessage();
    [CompilerGeneratedAttribute]
public void set_QuotaExceededMessage(string value);
    [CompilerGeneratedAttribute]
public string get_RateLimitCounterPrefix();
    [CompilerGeneratedAttribute]
public void set_RateLimitCounterPrefix(string value);
    [CompilerGeneratedAttribute]
public bool get_DisableRateLimitHeaders();
    [CompilerGeneratedAttribute]
public void set_DisableRateLimitHeaders(bool value);
    [CompilerGeneratedAttribute]
public int get_HttpStatusCode();
    [CompilerGeneratedAttribute]
public void set_HttpStatusCode(int value);
}
public class Ocelot.Configuration.File.FileRateLimitRule : object {
    [CompilerGeneratedAttribute]
private List`1<string> <ClientWhitelist>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <EnableRateLimiting>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Period>k__BackingField;
    [CompilerGeneratedAttribute]
private double <PeriodTimespan>k__BackingField;
    [CompilerGeneratedAttribute]
private long <Limit>k__BackingField;
    public List`1<string> ClientWhitelist { get; public set; }
    public bool EnableRateLimiting { get; public set; }
    public string Period { get; public set; }
    public double PeriodTimespan { get; public set; }
    public long Limit { get; public set; }
    public FileRateLimitRule(FileRateLimitRule from);
    [CompilerGeneratedAttribute]
public List`1<string> get_ClientWhitelist();
    [CompilerGeneratedAttribute]
public void set_ClientWhitelist(List`1<string> value);
    [CompilerGeneratedAttribute]
public bool get_EnableRateLimiting();
    [CompilerGeneratedAttribute]
public void set_EnableRateLimiting(bool value);
    [CompilerGeneratedAttribute]
public string get_Period();
    [CompilerGeneratedAttribute]
public void set_Period(string value);
    [CompilerGeneratedAttribute]
public double get_PeriodTimespan();
    [CompilerGeneratedAttribute]
public void set_PeriodTimespan(double value);
    [CompilerGeneratedAttribute]
public long get_Limit();
    [CompilerGeneratedAttribute]
public void set_Limit(long value);
    public virtual string ToString();
}
public class Ocelot.Configuration.File.FileRoute : object {
    [CompilerGeneratedAttribute]
private Dictionary`2<string, string> <AddClaimsToRequest>k__BackingField;
    [CompilerGeneratedAttribute]
private Dictionary`2<string, string> <AddHeadersToRequest>k__BackingField;
    [CompilerGeneratedAttribute]
private Dictionary`2<string, string> <AddQueriesToRequest>k__BackingField;
    [CompilerGeneratedAttribute]
private FileAuthenticationOptions <AuthenticationOptions>k__BackingField;
    [CompilerGeneratedAttribute]
private Dictionary`2<string, string> <ChangeDownstreamPathTemplate>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <DangerousAcceptAnyServerCertificateValidator>k__BackingField;
    [CompilerGeneratedAttribute]
private List`1<string> <DelegatingHandlers>k__BackingField;
    [CompilerGeneratedAttribute]
private Dictionary`2<string, string> <DownstreamHeaderTransform>k__BackingField;
    [CompilerGeneratedAttribute]
private List`1<FileHostAndPort> <DownstreamHostAndPorts>k__BackingField;
    [CompilerGeneratedAttribute]
private string <DownstreamHttpMethod>k__BackingField;
    [CompilerGeneratedAttribute]
private string <DownstreamHttpVersion>k__BackingField;
    [CompilerGeneratedAttribute]
private string <DownstreamHttpVersionPolicy>k__BackingField;
    [CompilerGeneratedAttribute]
private string <DownstreamPathTemplate>k__BackingField;
    [CompilerGeneratedAttribute]
private string <DownstreamScheme>k__BackingField;
    [CompilerGeneratedAttribute]
private FileCacheOptions <FileCacheOptions>k__BackingField;
    [CompilerGeneratedAttribute]
private FileHttpHandlerOptions <HttpHandlerOptions>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Key>k__BackingField;
    [CompilerGeneratedAttribute]
private FileLoadBalancerOptions <LoadBalancerOptions>k__BackingField;
    [CompilerGeneratedAttribute]
private IDictionary`2<string, string> <Metadata>k__BackingField;
    [CompilerGeneratedAttribute]
private int <Priority>k__BackingField;
    [CompilerGeneratedAttribute]
private FileQoSOptions <QoSOptions>k__BackingField;
    [CompilerGeneratedAttribute]
private FileRateLimitRule <RateLimitOptions>k__BackingField;
    [CompilerGeneratedAttribute]
private string <RequestIdKey>k__BackingField;
    [CompilerGeneratedAttribute]
private Dictionary`2<string, string> <RouteClaimsRequirement>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <RouteIsCaseSensitive>k__BackingField;
    [CompilerGeneratedAttribute]
private FileSecurityOptions <SecurityOptions>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ServiceName>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ServiceNamespace>k__BackingField;
    [CompilerGeneratedAttribute]
private int <Timeout>k__BackingField;
    [CompilerGeneratedAttribute]
private Dictionary`2<string, string> <UpstreamHeaderTransform>k__BackingField;
    [CompilerGeneratedAttribute]
private string <UpstreamHost>k__BackingField;
    [CompilerGeneratedAttribute]
private List`1<string> <UpstreamHttpMethod>k__BackingField;
    [CompilerGeneratedAttribute]
private string <UpstreamPathTemplate>k__BackingField;
    [CompilerGeneratedAttribute]
private IDictionary`2<string, string> <UpstreamHeaderTemplates>k__BackingField;
    public Dictionary`2<string, string> AddClaimsToRequest { get; public set; }
    public Dictionary`2<string, string> AddHeadersToRequest { get; public set; }
    public Dictionary`2<string, string> AddQueriesToRequest { get; public set; }
    public FileAuthenticationOptions AuthenticationOptions { get; public set; }
    public Dictionary`2<string, string> ChangeDownstreamPathTemplate { get; public set; }
    public bool DangerousAcceptAnyServerCertificateValidator { get; public set; }
    public List`1<string> DelegatingHandlers { get; public set; }
    public Dictionary`2<string, string> DownstreamHeaderTransform { get; public set; }
    public List`1<FileHostAndPort> DownstreamHostAndPorts { get; public set; }
    public string DownstreamHttpMethod { get; public set; }
    public string DownstreamHttpVersion { get; public set; }
    public string DownstreamHttpVersionPolicy { get; public set; }
    public string DownstreamPathTemplate { get; public set; }
    public string DownstreamScheme { get; public set; }
    public FileCacheOptions FileCacheOptions { get; public set; }
    public FileHttpHandlerOptions HttpHandlerOptions { get; public set; }
    public string Key { get; public set; }
    public FileLoadBalancerOptions LoadBalancerOptions { get; public set; }
    public IDictionary`2<string, string> Metadata { get; public set; }
    public int Priority { get; public set; }
    public FileQoSOptions QoSOptions { get; public set; }
    public FileRateLimitRule RateLimitOptions { get; public set; }
    public string RequestIdKey { get; public set; }
    public Dictionary`2<string, string> RouteClaimsRequirement { get; public set; }
    public bool RouteIsCaseSensitive { get; public set; }
    public FileSecurityOptions SecurityOptions { get; public set; }
    public string ServiceName { get; public set; }
    public string ServiceNamespace { get; public set; }
    public int Timeout { get; public set; }
    public Dictionary`2<string, string> UpstreamHeaderTransform { get; public set; }
    public string UpstreamHost { get; public set; }
    public List`1<string> UpstreamHttpMethod { get; public set; }
    public string UpstreamPathTemplate { get; public set; }
    public IDictionary`2<string, string> UpstreamHeaderTemplates { get; public set; }
    public FileRoute(FileRoute from);
    [CompilerGeneratedAttribute]
public Dictionary`2<string, string> get_AddClaimsToRequest();
    [CompilerGeneratedAttribute]
public void set_AddClaimsToRequest(Dictionary`2<string, string> value);
    [CompilerGeneratedAttribute]
public Dictionary`2<string, string> get_AddHeadersToRequest();
    [CompilerGeneratedAttribute]
public void set_AddHeadersToRequest(Dictionary`2<string, string> value);
    [CompilerGeneratedAttribute]
public Dictionary`2<string, string> get_AddQueriesToRequest();
    [CompilerGeneratedAttribute]
public void set_AddQueriesToRequest(Dictionary`2<string, string> value);
    [CompilerGeneratedAttribute]
public FileAuthenticationOptions get_AuthenticationOptions();
    [CompilerGeneratedAttribute]
public void set_AuthenticationOptions(FileAuthenticationOptions value);
    [CompilerGeneratedAttribute]
public Dictionary`2<string, string> get_ChangeDownstreamPathTemplate();
    [CompilerGeneratedAttribute]
public void set_ChangeDownstreamPathTemplate(Dictionary`2<string, string> value);
    [CompilerGeneratedAttribute]
public bool get_DangerousAcceptAnyServerCertificateValidator();
    [CompilerGeneratedAttribute]
public void set_DangerousAcceptAnyServerCertificateValidator(bool value);
    [CompilerGeneratedAttribute]
public List`1<string> get_DelegatingHandlers();
    [CompilerGeneratedAttribute]
public void set_DelegatingHandlers(List`1<string> value);
    [CompilerGeneratedAttribute]
public Dictionary`2<string, string> get_DownstreamHeaderTransform();
    [CompilerGeneratedAttribute]
public void set_DownstreamHeaderTransform(Dictionary`2<string, string> value);
    [CompilerGeneratedAttribute]
public List`1<FileHostAndPort> get_DownstreamHostAndPorts();
    [CompilerGeneratedAttribute]
public void set_DownstreamHostAndPorts(List`1<FileHostAndPort> value);
    [CompilerGeneratedAttribute]
public string get_DownstreamHttpMethod();
    [CompilerGeneratedAttribute]
public void set_DownstreamHttpMethod(string value);
    [CompilerGeneratedAttribute]
public string get_DownstreamHttpVersion();
    [CompilerGeneratedAttribute]
public void set_DownstreamHttpVersion(string value);
    [CompilerGeneratedAttribute]
public string get_DownstreamHttpVersionPolicy();
    [CompilerGeneratedAttribute]
public void set_DownstreamHttpVersionPolicy(string value);
    [CompilerGeneratedAttribute]
public string get_DownstreamPathTemplate();
    [CompilerGeneratedAttribute]
public void set_DownstreamPathTemplate(string value);
    [CompilerGeneratedAttribute]
public string get_DownstreamScheme();
    [CompilerGeneratedAttribute]
public void set_DownstreamScheme(string value);
    [CompilerGeneratedAttribute]
public FileCacheOptions get_FileCacheOptions();
    [CompilerGeneratedAttribute]
public void set_FileCacheOptions(FileCacheOptions value);
    [CompilerGeneratedAttribute]
public FileHttpHandlerOptions get_HttpHandlerOptions();
    [CompilerGeneratedAttribute]
public void set_HttpHandlerOptions(FileHttpHandlerOptions value);
    [CompilerGeneratedAttribute]
public string get_Key();
    [CompilerGeneratedAttribute]
public void set_Key(string value);
    [CompilerGeneratedAttribute]
public FileLoadBalancerOptions get_LoadBalancerOptions();
    [CompilerGeneratedAttribute]
public void set_LoadBalancerOptions(FileLoadBalancerOptions value);
    [CompilerGeneratedAttribute]
public IDictionary`2<string, string> get_Metadata();
    [CompilerGeneratedAttribute]
public void set_Metadata(IDictionary`2<string, string> value);
    [CompilerGeneratedAttribute]
public sealed virtual int get_Priority();
    [CompilerGeneratedAttribute]
public sealed virtual void set_Priority(int value);
    [CompilerGeneratedAttribute]
public FileQoSOptions get_QoSOptions();
    [CompilerGeneratedAttribute]
public void set_QoSOptions(FileQoSOptions value);
    [CompilerGeneratedAttribute]
public FileRateLimitRule get_RateLimitOptions();
    [CompilerGeneratedAttribute]
public void set_RateLimitOptions(FileRateLimitRule value);
    [CompilerGeneratedAttribute]
public string get_RequestIdKey();
    [CompilerGeneratedAttribute]
public void set_RequestIdKey(string value);
    [CompilerGeneratedAttribute]
public Dictionary`2<string, string> get_RouteClaimsRequirement();
    [CompilerGeneratedAttribute]
public void set_RouteClaimsRequirement(Dictionary`2<string, string> value);
    [CompilerGeneratedAttribute]
public sealed virtual bool get_RouteIsCaseSensitive();
    [CompilerGeneratedAttribute]
public sealed virtual void set_RouteIsCaseSensitive(bool value);
    [CompilerGeneratedAttribute]
public FileSecurityOptions get_SecurityOptions();
    [CompilerGeneratedAttribute]
public void set_SecurityOptions(FileSecurityOptions value);
    [CompilerGeneratedAttribute]
public string get_ServiceName();
    [CompilerGeneratedAttribute]
public void set_ServiceName(string value);
    [CompilerGeneratedAttribute]
public string get_ServiceNamespace();
    [CompilerGeneratedAttribute]
public void set_ServiceNamespace(string value);
    [CompilerGeneratedAttribute]
public int get_Timeout();
    [CompilerGeneratedAttribute]
public void set_Timeout(int value);
    [CompilerGeneratedAttribute]
public Dictionary`2<string, string> get_UpstreamHeaderTransform();
    [CompilerGeneratedAttribute]
public void set_UpstreamHeaderTransform(Dictionary`2<string, string> value);
    [CompilerGeneratedAttribute]
public string get_UpstreamHost();
    [CompilerGeneratedAttribute]
public void set_UpstreamHost(string value);
    [CompilerGeneratedAttribute]
public List`1<string> get_UpstreamHttpMethod();
    [CompilerGeneratedAttribute]
public void set_UpstreamHttpMethod(List`1<string> value);
    [CompilerGeneratedAttribute]
public sealed virtual string get_UpstreamPathTemplate();
    [CompilerGeneratedAttribute]
public sealed virtual void set_UpstreamPathTemplate(string value);
    [CompilerGeneratedAttribute]
public sealed virtual IDictionary`2<string, string> get_UpstreamHeaderTemplates();
    [CompilerGeneratedAttribute]
public sealed virtual void set_UpstreamHeaderTemplates(IDictionary`2<string, string> value);
    public sealed virtual object Clone();
    public static void DeepCopy(FileRoute from, FileRoute to);
}
public class Ocelot.Configuration.File.FileSecurityOptions : object {
    [CompilerGeneratedAttribute]
private List`1<string> <IPAllowedList>k__BackingField;
    [CompilerGeneratedAttribute]
private List`1<string> <IPBlockedList>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <ExcludeAllowedFromBlocked>k__BackingField;
    public List`1<string> IPAllowedList { get; public set; }
    public List`1<string> IPBlockedList { get; public set; }
    public bool ExcludeAllowedFromBlocked { get; public set; }
    public FileSecurityOptions(FileSecurityOptions from);
    public FileSecurityOptions(string allowedIPs, string blockedIPs, Nullable`1<bool> excludeAllowedFromBlocked);
    public FileSecurityOptions(IEnumerable`1<string> allowedIPs, IEnumerable`1<string> blockedIPs, Nullable`1<bool> excludeAllowedFromBlocked);
    [CompilerGeneratedAttribute]
public List`1<string> get_IPAllowedList();
    [CompilerGeneratedAttribute]
public void set_IPAllowedList(List`1<string> value);
    [CompilerGeneratedAttribute]
public List`1<string> get_IPBlockedList();
    [CompilerGeneratedAttribute]
public void set_IPBlockedList(List`1<string> value);
    [CompilerGeneratedAttribute]
public bool get_ExcludeAllowedFromBlocked();
    [CompilerGeneratedAttribute]
public void set_ExcludeAllowedFromBlocked(bool value);
}
public class Ocelot.Configuration.File.FileServiceDiscoveryProvider : object {
    [CompilerGeneratedAttribute]
private string <Scheme>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Host>k__BackingField;
    [CompilerGeneratedAttribute]
private int <Port>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Type>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Token>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ConfigurationKey>k__BackingField;
    [CompilerGeneratedAttribute]
private int <PollingInterval>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Namespace>k__BackingField;
    public string Scheme { get; public set; }
    public string Host { get; public set; }
    public int Port { get; public set; }
    public string Type { get; public set; }
    public string Token { get; public set; }
    public string ConfigurationKey { get; public set; }
    public int PollingInterval { get; public set; }
    public string Namespace { get; public set; }
    [CompilerGeneratedAttribute]
public string get_Scheme();
    [CompilerGeneratedAttribute]
public void set_Scheme(string value);
    [CompilerGeneratedAttribute]
public string get_Host();
    [CompilerGeneratedAttribute]
public void set_Host(string value);
    [CompilerGeneratedAttribute]
public int get_Port();
    [CompilerGeneratedAttribute]
public void set_Port(int value);
    [CompilerGeneratedAttribute]
public string get_Type();
    [CompilerGeneratedAttribute]
public void set_Type(string value);
    [CompilerGeneratedAttribute]
public string get_Token();
    [CompilerGeneratedAttribute]
public void set_Token(string value);
    [CompilerGeneratedAttribute]
public string get_ConfigurationKey();
    [CompilerGeneratedAttribute]
public void set_ConfigurationKey(string value);
    [CompilerGeneratedAttribute]
public int get_PollingInterval();
    [CompilerGeneratedAttribute]
public void set_PollingInterval(int value);
    [CompilerGeneratedAttribute]
public string get_Namespace();
    [CompilerGeneratedAttribute]
public void set_Namespace(string value);
}
public interface Ocelot.Configuration.File.IRoute {
    public IDictionary`2<string, string> UpstreamHeaderTemplates { get; public set; }
    public string UpstreamPathTemplate { get; public set; }
    public bool RouteIsCaseSensitive { get; public set; }
    public int Priority { get; public set; }
    public abstract virtual IDictionary`2<string, string> get_UpstreamHeaderTemplates();
    public abstract virtual void set_UpstreamHeaderTemplates(IDictionary`2<string, string> value);
    public abstract virtual string get_UpstreamPathTemplate();
    public abstract virtual void set_UpstreamPathTemplate(string value);
    public abstract virtual bool get_RouteIsCaseSensitive();
    public abstract virtual void set_RouteIsCaseSensitive(bool value);
    public abstract virtual int get_Priority();
    public abstract virtual void set_Priority(int value);
}
[AuthorizeAttribute]
[RouteAttribute("configuration")]
public class Ocelot.Configuration.FileConfigurationController : Controller {
    private IFileConfigurationRepository _repo;
    private IFileConfigurationSetter _setter;
    private IServiceProvider _provider;
    public FileConfigurationController(IFileConfigurationRepository repo, IFileConfigurationSetter setter, IServiceProvider provider);
    [AsyncStateMachineAttribute("Ocelot.Configuration.FileConfigurationController/<Get>d__4")]
[HttpGetAttribute]
public Task`1<IActionResult> Get();
    [AsyncStateMachineAttribute("Ocelot.Configuration.FileConfigurationController/<Post>d__5")]
[HttpPostAttribute]
public Task`1<IActionResult> Post(FileConfiguration fileConfiguration);
}
public class Ocelot.Configuration.HeaderFindAndReplace : object {
    [CompilerGeneratedAttribute]
private string <Key>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Find>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Replace>k__BackingField;
    [CompilerGeneratedAttribute]
private int <Index>k__BackingField;
    public string Key { get; }
    public string Find { get; }
    public string Replace { get; }
    public int Index { get; }
    public HeaderFindAndReplace(string key, string find, string replace, int index);
    [CompilerGeneratedAttribute]
public string get_Key();
    [CompilerGeneratedAttribute]
public string get_Find();
    [CompilerGeneratedAttribute]
public string get_Replace();
    [CompilerGeneratedAttribute]
public int get_Index();
}
public class Ocelot.Configuration.HttpHandlerOptions : object {
    [CompilerGeneratedAttribute]
private bool <AllowAutoRedirect>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <UseCookieContainer>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <UseTracing>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <UseProxy>k__BackingField;
    [CompilerGeneratedAttribute]
private int <MaxConnectionsPerServer>k__BackingField;
    [CompilerGeneratedAttribute]
private TimeSpan <PooledConnectionLifeTime>k__BackingField;
    public bool AllowAutoRedirect { get; }
    public bool UseCookieContainer { get; }
    public bool UseTracing { get; }
    public bool UseProxy { get; }
    public int MaxConnectionsPerServer { get; }
    public TimeSpan PooledConnectionLifeTime { get; }
    public HttpHandlerOptions(bool allowAutoRedirect, bool useCookieContainer, bool useTracing, bool useProxy, int maxConnectionsPerServer, TimeSpan pooledConnectionLifeTime);
    [CompilerGeneratedAttribute]
public bool get_AllowAutoRedirect();
    [CompilerGeneratedAttribute]
public bool get_UseCookieContainer();
    [CompilerGeneratedAttribute]
public bool get_UseTracing();
    [CompilerGeneratedAttribute]
public bool get_UseProxy();
    [CompilerGeneratedAttribute]
public int get_MaxConnectionsPerServer();
    [CompilerGeneratedAttribute]
public TimeSpan get_PooledConnectionLifeTime();
}
public class Ocelot.Configuration.HttpHandlerOptionsBuilder : object {
    private bool _allowAutoRedirect;
    private bool _useCookieContainer;
    private bool _useTracing;
    private bool _useProxy;
    private int _maxConnectionPerServer;
    private TimeSpan _pooledConnectionLifetime;
    public HttpHandlerOptionsBuilder WithAllowAutoRedirect(bool input);
    public HttpHandlerOptionsBuilder WithUseCookieContainer(bool input);
    public HttpHandlerOptionsBuilder WithUseTracing(bool input);
    public HttpHandlerOptionsBuilder WithUseProxy(bool useProxy);
    public HttpHandlerOptionsBuilder WithUseMaxConnectionPerServer(int maxConnectionPerServer);
    public HttpHandlerOptionsBuilder WithPooledConnectionLifetimeSeconds(TimeSpan pooledConnectionLifetime);
    public HttpHandlerOptions Build();
}
public interface Ocelot.Configuration.IInternalConfiguration {
    public List`1<Route> Routes { get; }
    public string AdministrationPath { get; }
    public ServiceProviderConfiguration ServiceProviderConfiguration { get; }
    public string RequestId { get; }
    public LoadBalancerOptions LoadBalancerOptions { get; }
    public string DownstreamScheme { get; }
    public QoSOptions QoSOptions { get; }
    public HttpHandlerOptions HttpHandlerOptions { get; }
    public Version DownstreamHttpVersion { get; }
    public Nullable`1<HttpVersionPolicy> DownstreamHttpVersionPolicy { get; }
    public abstract virtual List`1<Route> get_Routes();
    public abstract virtual string get_AdministrationPath();
    public abstract virtual ServiceProviderConfiguration get_ServiceProviderConfiguration();
    public abstract virtual string get_RequestId();
    public abstract virtual LoadBalancerOptions get_LoadBalancerOptions();
    public abstract virtual string get_DownstreamScheme();
    public abstract virtual QoSOptions get_QoSOptions();
    public abstract virtual HttpHandlerOptions get_HttpHandlerOptions();
    public abstract virtual Version get_DownstreamHttpVersion();
    public abstract virtual Nullable`1<HttpVersionPolicy> get_DownstreamHttpVersionPolicy();
}
public class Ocelot.Configuration.InternalConfiguration : object {
    [CompilerGeneratedAttribute]
private List`1<Route> <Routes>k__BackingField;
    [CompilerGeneratedAttribute]
private string <AdministrationPath>k__BackingField;
    [CompilerGeneratedAttribute]
private ServiceProviderConfiguration <ServiceProviderConfiguration>k__BackingField;
    [CompilerGeneratedAttribute]
private string <RequestId>k__BackingField;
    [CompilerGeneratedAttribute]
private LoadBalancerOptions <LoadBalancerOptions>k__BackingField;
    [CompilerGeneratedAttribute]
private string <DownstreamScheme>k__BackingField;
    [CompilerGeneratedAttribute]
private QoSOptions <QoSOptions>k__BackingField;
    [CompilerGeneratedAttribute]
private HttpHandlerOptions <HttpHandlerOptions>k__BackingField;
    [CompilerGeneratedAttribute]
private Version <DownstreamHttpVersion>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<HttpVersionPolicy> <DownstreamHttpVersionPolicy>k__BackingField;
    public List`1<Route> Routes { get; }
    public string AdministrationPath { get; }
    public ServiceProviderConfiguration ServiceProviderConfiguration { get; }
    public string RequestId { get; }
    public LoadBalancerOptions LoadBalancerOptions { get; }
    public string DownstreamScheme { get; }
    public QoSOptions QoSOptions { get; }
    public HttpHandlerOptions HttpHandlerOptions { get; }
    public Version DownstreamHttpVersion { get; }
    public Nullable`1<HttpVersionPolicy> DownstreamHttpVersionPolicy { get; }
    public InternalConfiguration(List`1<Route> routes, string administrationPath, ServiceProviderConfiguration serviceProviderConfiguration, string requestId, LoadBalancerOptions loadBalancerOptions, string downstreamScheme, QoSOptions qoSOptions, HttpHandlerOptions httpHandlerOptions, Version downstreamHttpVersion, Nullable`1<HttpVersionPolicy> downstreamHttpVersionPolicy);
    [CompilerGeneratedAttribute]
public sealed virtual List`1<Route> get_Routes();
    [CompilerGeneratedAttribute]
public sealed virtual string get_AdministrationPath();
    [CompilerGeneratedAttribute]
public sealed virtual ServiceProviderConfiguration get_ServiceProviderConfiguration();
    [CompilerGeneratedAttribute]
public sealed virtual string get_RequestId();
    [CompilerGeneratedAttribute]
public sealed virtual LoadBalancerOptions get_LoadBalancerOptions();
    [CompilerGeneratedAttribute]
public sealed virtual string get_DownstreamScheme();
    [CompilerGeneratedAttribute]
public sealed virtual QoSOptions get_QoSOptions();
    [CompilerGeneratedAttribute]
public sealed virtual HttpHandlerOptions get_HttpHandlerOptions();
    [CompilerGeneratedAttribute]
public sealed virtual Version get_DownstreamHttpVersion();
    [CompilerGeneratedAttribute]
public sealed virtual Nullable`1<HttpVersionPolicy> get_DownstreamHttpVersionPolicy();
}
public class Ocelot.Configuration.LoadBalancerOptions : object {
    [CompilerGeneratedAttribute]
private string <Type>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Key>k__BackingField;
    [CompilerGeneratedAttribute]
private int <ExpiryInMs>k__BackingField;
    public string Type { get; }
    public string Key { get; }
    public int ExpiryInMs { get; }
    public LoadBalancerOptions(string type, string key, int expiryInMs);
    [CompilerGeneratedAttribute]
public string get_Type();
    [CompilerGeneratedAttribute]
public string get_Key();
    [CompilerGeneratedAttribute]
public int get_ExpiryInMs();
}
public class Ocelot.Configuration.LoadBalancerOptionsBuilder : object {
    private string _type;
    private string _key;
    private int _expiryInMs;
    public LoadBalancerOptionsBuilder WithType(string type);
    public LoadBalancerOptionsBuilder WithKey(string key);
    public LoadBalancerOptionsBuilder WithExpiryInMs(int expiryInMs);
    public LoadBalancerOptions Build();
}
public class Ocelot.Configuration.MetadataOptions : object {
    [CompilerGeneratedAttribute]
private String[] <Separators>k__BackingField;
    [CompilerGeneratedAttribute]
private Char[] <TrimChars>k__BackingField;
    [CompilerGeneratedAttribute]
private StringSplitOptions <StringSplitOption>k__BackingField;
    [CompilerGeneratedAttribute]
private NumberStyles <NumberStyle>k__BackingField;
    [CompilerGeneratedAttribute]
private CultureInfo <CurrentCulture>k__BackingField;
    [CompilerGeneratedAttribute]
private IDictionary`2<string, string> <Metadata>k__BackingField;
    public String[] Separators { get; }
    public Char[] TrimChars { get; }
    public StringSplitOptions StringSplitOption { get; }
    public NumberStyles NumberStyle { get; }
    public CultureInfo CurrentCulture { get; }
    public IDictionary`2<string, string> Metadata { get; public set; }
    public MetadataOptions(MetadataOptions from);
    public MetadataOptions(FileMetadataOptions from);
    public MetadataOptions(String[] separators, Char[] trimChars, StringSplitOptions stringSplitOption, NumberStyles numberStyle, CultureInfo currentCulture, IDictionary`2<string, string> metadata);
    [CompilerGeneratedAttribute]
public String[] get_Separators();
    [CompilerGeneratedAttribute]
public Char[] get_TrimChars();
    [CompilerGeneratedAttribute]
public StringSplitOptions get_StringSplitOption();
    [CompilerGeneratedAttribute]
public NumberStyles get_NumberStyle();
    [CompilerGeneratedAttribute]
public CultureInfo get_CurrentCulture();
    [CompilerGeneratedAttribute]
public IDictionary`2<string, string> get_Metadata();
    [CompilerGeneratedAttribute]
public void set_Metadata(IDictionary`2<string, string> value);
}
public class Ocelot.Configuration.Parser.ClaimToThingConfigurationParser : object {
    private Regex _claimRegex;
    private Regex _indexRegex;
    private static char SplitToken;
    public sealed virtual Response`1<ClaimToThing> Extract(string existingKey, string value);
    private static string GetIndexValue(string instruction);
}
public interface Ocelot.Configuration.Parser.IClaimToThingConfigurationParser {
    public abstract virtual Response`1<ClaimToThing> Extract(string existingKey, string value);
}
public class Ocelot.Configuration.Parser.InstructionNotForClaimsError : Error {
}
public class Ocelot.Configuration.Parser.NoInstructionsError : Error {
    public NoInstructionsError(string splitToken);
}
public class Ocelot.Configuration.Parser.ParsingConfigurationHeaderError : Error {
    public ParsingConfigurationHeaderError(Exception exception);
}
public class Ocelot.Configuration.QoSOptions : object {
    [CompilerGeneratedAttribute]
private int <DurationOfBreak>k__BackingField;
    public static int LowBreakDuration;
    public static int DefaultBreakDuration;
    [CompilerGeneratedAttribute]
private int <ExceptionsAllowedBeforeBreaking>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Key>k__BackingField;
    [CompilerGeneratedAttribute]
private int <TimeoutValue>k__BackingField;
    public int DurationOfBreak { get; }
    public int ExceptionsAllowedBeforeBreaking { get; }
    public string Key { get; }
    public int TimeoutValue { get; }
    public bool UseQos { get; }
    public QoSOptions(QoSOptions from);
    public QoSOptions(FileQoSOptions from);
    public QoSOptions(int exceptionsAllowedBeforeBreaking, int durationOfBreak, int timeoutValue, string key);
    [CompilerGeneratedAttribute]
public int get_DurationOfBreak();
    [CompilerGeneratedAttribute]
public int get_ExceptionsAllowedBeforeBreaking();
    [CompilerGeneratedAttribute]
public string get_Key();
    [CompilerGeneratedAttribute]
public int get_TimeoutValue();
    public bool get_UseQos();
}
public class Ocelot.Configuration.RateLimitOptions : object {
    private Func`1<List`1<string>> _getClientWhitelist;
    [CompilerGeneratedAttribute]
private RateLimitRule <RateLimitRule>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ClientIdHeader>k__BackingField;
    [CompilerGeneratedAttribute]
private int <HttpStatusCode>k__BackingField;
    [CompilerGeneratedAttribute]
private string <QuotaExceededMessage>k__BackingField;
    [CompilerGeneratedAttribute]
private string <RateLimitCounterPrefix>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <EnableRateLimiting>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <DisableRateLimitHeaders>k__BackingField;
    public RateLimitRule RateLimitRule { get; }
    public List`1<string> ClientWhitelist { get; }
    public string ClientIdHeader { get; }
    public int HttpStatusCode { get; }
    public string QuotaExceededMessage { get; }
    public string RateLimitCounterPrefix { get; }
    public bool EnableRateLimiting { get; }
    public bool DisableRateLimitHeaders { get; }
    public RateLimitOptions(bool enableRateLimiting, string clientIdHeader, Func`1<List`1<string>> getClientWhitelist, bool disableRateLimitHeaders, string quotaExceededMessage, string rateLimitCounterPrefix, RateLimitRule rateLimitRule, int httpStatusCode);
    [CompilerGeneratedAttribute]
public RateLimitRule get_RateLimitRule();
    public List`1<string> get_ClientWhitelist();
    [CompilerGeneratedAttribute]
public string get_ClientIdHeader();
    [CompilerGeneratedAttribute]
public int get_HttpStatusCode();
    [CompilerGeneratedAttribute]
public string get_QuotaExceededMessage();
    [CompilerGeneratedAttribute]
public string get_RateLimitCounterPrefix();
    [CompilerGeneratedAttribute]
public bool get_EnableRateLimiting();
    [CompilerGeneratedAttribute]
public bool get_DisableRateLimitHeaders();
}
public class Ocelot.Configuration.RateLimitRule : object {
    [CompilerGeneratedAttribute]
private string <Period>k__BackingField;
    [CompilerGeneratedAttribute]
private double <PeriodTimespan>k__BackingField;
    [CompilerGeneratedAttribute]
private long <Limit>k__BackingField;
    public string Period { get; }
    public double PeriodTimespan { get; }
    public long Limit { get; }
    public RateLimitRule(string period, double periodTimespan, long limit);
    [CompilerGeneratedAttribute]
public string get_Period();
    [CompilerGeneratedAttribute]
public double get_PeriodTimespan();
    [CompilerGeneratedAttribute]
public long get_Limit();
}
public class Ocelot.Configuration.Repository.ConsulFileConfigurationPollerOption : object {
    private IInternalConfigurationRepository _internalConfigRepo;
    private IFileConfigurationRepository _fileConfigurationRepository;
    public int Delay { get; }
    public ConsulFileConfigurationPollerOption(IInternalConfigurationRepository internalConfigurationRepository, IFileConfigurationRepository fileConfigurationRepository);
    public sealed virtual int get_Delay();
    private int GetDelay();
    [AsyncStateMachineAttribute("Ocelot.Configuration.Repository.ConsulFileConfigurationPollerOption/<<GetDelay>b__5_0>d")]
[CompilerGeneratedAttribute]
private Task`1<Response`1<FileConfiguration>> <GetDelay>b__5_0();
}
public class Ocelot.Configuration.Repository.DiskFileConfigurationRepository : object {
    private IWebHostEnvironment _hostingEnvironment;
    private IOcelotConfigurationChangeTokenSource _changeTokenSource;
    private FileInfo _ocelotFile;
    private FileInfo _environmentFile;
    private object _lock;
    public DiskFileConfigurationRepository(IWebHostEnvironment hostingEnvironment, IOcelotConfigurationChangeTokenSource changeTokenSource);
    public DiskFileConfigurationRepository(IWebHostEnvironment hostingEnvironment, IOcelotConfigurationChangeTokenSource changeTokenSource, string folder);
    private void Initialize(string folder);
    public sealed virtual Task`1<Response`1<FileConfiguration>> Get();
    public sealed virtual Task`1<Response> Set(FileConfiguration fileConfiguration);
}
public class Ocelot.Configuration.Repository.FileConfigurationPoller : object {
    private IOcelotLogger _logger;
    private IFileConfigurationRepository _repo;
    private string _previousAsJson;
    private Timer _timer;
    private bool _polling;
    private IFileConfigurationPollerOptions _options;
    private IInternalConfigurationRepository _internalConfigRepo;
    private IInternalConfigurationCreator _internalConfigCreator;
    public FileConfigurationPoller(IOcelotLoggerFactory factory, IFileConfigurationRepository repo, IFileConfigurationPollerOptions options, IInternalConfigurationRepository internalConfigRepo, IInternalConfigurationCreator internalConfigCreator);
    public sealed virtual Task StartAsync(CancellationToken cancellationToken);
    public sealed virtual Task StopAsync(CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Ocelot.Configuration.Repository.FileConfigurationPoller/<Poll>d__11")]
private Task Poll();
    private static string ToJson(FileConfiguration config);
    public sealed virtual void Dispose();
    [NullableContextAttribute("2")]
[AsyncStateMachineAttribute("Ocelot.Configuration.Repository.FileConfigurationPoller/<<StartAsync>b__9_0>d")]
[CompilerGeneratedAttribute]
private void <StartAsync>b__9_0(object x);
}
public interface Ocelot.Configuration.Repository.IFileConfigurationPollerOptions {
    public int Delay { get; }
    public abstract virtual int get_Delay();
}
public interface Ocelot.Configuration.Repository.IFileConfigurationRepository {
    public abstract virtual Task`1<Response`1<FileConfiguration>> Get();
    public abstract virtual Task`1<Response> Set(FileConfiguration fileConfiguration);
}
public interface Ocelot.Configuration.Repository.IInternalConfigurationRepository {
    public abstract virtual Response`1<IInternalConfiguration> Get();
    public abstract virtual Response AddOrReplace(IInternalConfiguration internalConfiguration);
}
public class Ocelot.Configuration.Repository.InMemoryFileConfigurationPollerOptions : object {
    public int Delay { get; }
    public sealed virtual int get_Delay();
}
public class Ocelot.Configuration.Repository.InMemoryInternalConfigurationRepository : object {
    private static object LockObject;
    private IInternalConfiguration _internalConfiguration;
    private IOcelotConfigurationChangeTokenSource _changeTokenSource;
    public InMemoryInternalConfigurationRepository(IOcelotConfigurationChangeTokenSource changeTokenSource);
    private static InMemoryInternalConfigurationRepository();
    public sealed virtual Response`1<IInternalConfiguration> Get();
    public sealed virtual Response AddOrReplace(IInternalConfiguration internalConfiguration);
}
public class Ocelot.Configuration.Route : object {
    [CompilerGeneratedAttribute]
private IDictionary`2<string, UpstreamHeaderTemplate> <UpstreamHeaderTemplates>k__BackingField;
    [CompilerGeneratedAttribute]
private UpstreamPathTemplate <UpstreamTemplatePattern>k__BackingField;
    [CompilerGeneratedAttribute]
private List`1<HttpMethod> <UpstreamHttpMethod>k__BackingField;
    [CompilerGeneratedAttribute]
private string <UpstreamHost>k__BackingField;
    [CompilerGeneratedAttribute]
private List`1<DownstreamRoute> <DownstreamRoute>k__BackingField;
    [CompilerGeneratedAttribute]
private List`1<AggregateRouteConfig> <DownstreamRouteConfig>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Aggregator>k__BackingField;
    public IDictionary`2<string, UpstreamHeaderTemplate> UpstreamHeaderTemplates { get; }
    public UpstreamPathTemplate UpstreamTemplatePattern { get; }
    public List`1<HttpMethod> UpstreamHttpMethod { get; }
    public string UpstreamHost { get; }
    public List`1<DownstreamRoute> DownstreamRoute { get; }
    public List`1<AggregateRouteConfig> DownstreamRouteConfig { get; }
    public string Aggregator { get; }
    public Route(List`1<DownstreamRoute> downstreamRoute, List`1<AggregateRouteConfig> downstreamRouteConfig, List`1<HttpMethod> upstreamHttpMethod, UpstreamPathTemplate upstreamTemplatePattern, string upstreamHost, string aggregator, IDictionary`2<string, UpstreamHeaderTemplate> upstreamHeaderTemplates);
    [CompilerGeneratedAttribute]
public IDictionary`2<string, UpstreamHeaderTemplate> get_UpstreamHeaderTemplates();
    [CompilerGeneratedAttribute]
public UpstreamPathTemplate get_UpstreamTemplatePattern();
    [CompilerGeneratedAttribute]
public List`1<HttpMethod> get_UpstreamHttpMethod();
    [CompilerGeneratedAttribute]
public string get_UpstreamHost();
    [CompilerGeneratedAttribute]
public List`1<DownstreamRoute> get_DownstreamRoute();
    [CompilerGeneratedAttribute]
public List`1<AggregateRouteConfig> get_DownstreamRouteConfig();
    [CompilerGeneratedAttribute]
public string get_Aggregator();
}
public class Ocelot.Configuration.RouteOptions : object {
    [CompilerGeneratedAttribute]
private bool <IsAuthenticated>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsAuthorized>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsCached>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <EnableRateLimiting>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <UseServiceDiscovery>k__BackingField;
    public bool IsAuthenticated { get; }
    public bool IsAuthorized { get; }
    public bool IsCached { get; }
    public bool EnableRateLimiting { get; }
    public bool UseServiceDiscovery { get; }
    public RouteOptions(bool isAuthenticated, bool isAuthorized, bool isCached, bool isEnableRateLimiting, bool useServiceDiscovery);
    [CompilerGeneratedAttribute]
public bool get_IsAuthenticated();
    [CompilerGeneratedAttribute]
public bool get_IsAuthorized();
    [CompilerGeneratedAttribute]
public bool get_IsCached();
    [CompilerGeneratedAttribute]
public bool get_EnableRateLimiting();
    [CompilerGeneratedAttribute]
public bool get_UseServiceDiscovery();
}
public class Ocelot.Configuration.SecurityOptions : object {
    [CompilerGeneratedAttribute]
private List`1<string> <IPAllowedList>k__BackingField;
    [CompilerGeneratedAttribute]
private List`1<string> <IPBlockedList>k__BackingField;
    public List`1<string> IPAllowedList { get; }
    public List`1<string> IPBlockedList { get; }
    public SecurityOptions(string allowed, string blocked);
    public SecurityOptions(List`1<string> allowedList, List`1<string> blockedList);
    [CompilerGeneratedAttribute]
public List`1<string> get_IPAllowedList();
    [CompilerGeneratedAttribute]
public List`1<string> get_IPBlockedList();
}
public class Ocelot.Configuration.ServiceProviderConfiguration : object {
    [CompilerGeneratedAttribute]
private string <Scheme>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Host>k__BackingField;
    [CompilerGeneratedAttribute]
private int <Port>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Type>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Token>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ConfigurationKey>k__BackingField;
    [CompilerGeneratedAttribute]
private int <PollingInterval>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Namespace>k__BackingField;
    public string Scheme { get; }
    public string Host { get; }
    public int Port { get; }
    public string Type { get; }
    public string Token { get; }
    public string ConfigurationKey { get; }
    public int PollingInterval { get; }
    public string Namespace { get; }
    public ServiceProviderConfiguration(string type, string scheme, string host, int port, string token, string configurationKey, int pollingInterval, string namespace);
    [CompilerGeneratedAttribute]
public string get_Scheme();
    [CompilerGeneratedAttribute]
public string get_Host();
    [CompilerGeneratedAttribute]
public int get_Port();
    [CompilerGeneratedAttribute]
public string get_Type();
    [CompilerGeneratedAttribute]
public string get_Token();
    [CompilerGeneratedAttribute]
public string get_ConfigurationKey();
    [CompilerGeneratedAttribute]
public int get_PollingInterval();
    [CompilerGeneratedAttribute]
public string get_Namespace();
}
public class Ocelot.Configuration.Setter.FileAndInternalConfigurationSetter : object {
    private IInternalConfigurationRepository _internalConfigRepo;
    private IInternalConfigurationCreator _configCreator;
    private IFileConfigurationRepository _repo;
    public FileAndInternalConfigurationSetter(IInternalConfigurationRepository configRepo, IInternalConfigurationCreator configCreator, IFileConfigurationRepository repo);
    [AsyncStateMachineAttribute("Ocelot.Configuration.Setter.FileAndInternalConfigurationSetter/<Set>d__4")]
public sealed virtual Task`1<Response> Set(FileConfiguration fileConfig);
}
public interface Ocelot.Configuration.Setter.IFileConfigurationSetter {
    public abstract virtual Task`1<Response> Set(FileConfiguration config);
}
public class Ocelot.Configuration.Validator.ConfigurationValidationResult : object {
    [CompilerGeneratedAttribute]
private bool <IsError>k__BackingField;
    [CompilerGeneratedAttribute]
private List`1<Error> <Errors>k__BackingField;
    public bool IsError { get; }
    public List`1<Error> Errors { get; }
    public ConfigurationValidationResult(bool isError);
    public ConfigurationValidationResult(bool isError, List`1<Error> errors);
    [CompilerGeneratedAttribute]
public bool get_IsError();
    [CompilerGeneratedAttribute]
public List`1<Error> get_Errors();
}
public class Ocelot.Configuration.Validator.FileConfigurationFluentValidator : AbstractValidator`1<FileConfiguration> {
    private static string Servicefabric;
    private List`1<ServiceDiscoveryFinderDelegate> _serviceDiscoveryFinderDelegates;
    public FileConfigurationFluentValidator(IServiceProvider provider, RouteFluentValidator routeFluentValidator, FileGlobalConfigurationFluentValidator fileGlobalConfigurationFluentValidator);
    private bool HaveServiceDiscoveryProviderRegistered(FileRoute route, FileServiceDiscoveryProvider serviceDiscoveryProvider);
    private bool HaveServiceDiscoveryProviderRegistered(FileServiceDiscoveryProvider serviceDiscoveryProvider);
    [AsyncStateMachineAttribute("Ocelot.Configuration.Validator.FileConfigurationFluentValidator/<IsValid>d__5")]
public sealed virtual Task`1<Response`1<ConfigurationValidationResult>> IsValid(FileConfiguration configuration);
    private static bool AllRoutesForAggregateExist(FileAggregateRoute fileAggregateRoute, List`1<FileRoute> routes);
    [GeneratedRegexAttribute("\{\w+\}", "17", "en-US")]
[GeneratedCodeAttribute("System.Text.RegularExpressions.Generator", "8.0.10.11423")]
private static Regex PlaceholderRegex();
    private static bool IsPlaceholderNotDuplicatedIn(string pathTemplate);
    private static bool DoesNotContainRoutesWithSpecificRequestIdKeys(FileAggregateRoute fileAggregateRoute, IEnumerable`1<FileRoute> routes);
    private static bool IsNotDuplicateIn(FileRoute route, IEnumerable`1<FileRoute> routes);
    private static bool AreTheSame(IDictionary`2<string, string> upstreamHeaderTemplates, IDictionary`2<string, string> otherHeaderTemplates);
    private static bool IsNotDuplicateIn(FileRoute route, IEnumerable`1<FileAggregateRoute> aggregateRoutes);
    private static bool IsNotDuplicateIn(FileAggregateRoute route, IEnumerable`1<FileAggregateRoute> aggregateRoutes);
    [CompilerGeneratedAttribute]
private bool <.ctor>b__2_6(FileConfiguration config, FileRoute route);
}
public class Ocelot.Configuration.Validator.FileGlobalConfigurationFluentValidator : AbstractValidator`1<FileGlobalConfiguration> {
    public FileGlobalConfigurationFluentValidator(FileQoSOptionsFluentValidator fileQoSOptionsFluentValidator);
}
public class Ocelot.Configuration.Validator.FileQoSOptionsFluentValidator : AbstractValidator`1<FileQoSOptions> {
    private QosDelegatingHandlerDelegate _qosDelegatingHandlerDelegate;
    public FileQoSOptionsFluentValidator(IServiceProvider provider);
    private bool HaveQosHandlerRegistered(FileQoSOptions arg);
    [CompilerGeneratedAttribute]
private void <.ctor>b__1_1();
}
public class Ocelot.Configuration.Validator.FileValidationFailedError : Error {
    public FileValidationFailedError(string message);
}
public class Ocelot.Configuration.Validator.HostAndPortValidator : AbstractValidator`1<FileHostAndPort> {
}
public interface Ocelot.Configuration.Validator.IConfigurationValidator {
    public abstract virtual Task`1<Response`1<ConfigurationValidationResult>> IsValid(FileConfiguration configuration);
}
public class Ocelot.Configuration.Validator.RouteFluentValidator : AbstractValidator`1<FileRoute> {
    private IAuthenticationSchemeProvider _authenticationSchemeProvider;
    public RouteFluentValidator(IAuthenticationSchemeProvider authenticationSchemeProvider, HostAndPortValidator hostAndPortValidator, FileQoSOptionsFluentValidator fileQoSOptionsFluentValidator);
    [AsyncStateMachineAttribute("Ocelot.Configuration.Validator.RouteFluentValidator/<IsSupportedAuthenticationProviders>d__2")]
private Task`1<bool> IsSupportedAuthenticationProviders(FileAuthenticationOptions options, CancellationToken cancellationToken);
    private static bool IsValidPeriod(FileRateLimitRule rateLimitOptions);
}
public class Ocelot.DependencyInjection.AdministrationPath : object {
    [CompilerGeneratedAttribute]
private string <Path>k__BackingField;
    public string Path { get; }
    public AdministrationPath(string path);
    [CompilerGeneratedAttribute]
public sealed virtual string get_Path();
}
[ExtensionAttribute]
public static class Ocelot.DependencyInjection.ConfigurationBuilderExtensions : object {
    public static string PrimaryConfigFile;
    public static string GlobalConfigFile;
    public static string EnvironmentConfigFile;
    [GeneratedRegexAttribute("^ocelot\.(.*?)\.json$", "17", "en-US")]
[GeneratedCodeAttribute("System.Text.RegularExpressions.Generator", "8.0.10.11423")]
private static Regex SubConfigRegex();
    [ExtensionAttribute]
[ObsoleteAttribute("Please set BaseUrl in ocelot.json GlobalConfiguration.BaseUrl")]
public static IConfigurationBuilder AddOcelotBaseUrl(IConfigurationBuilder builder, string baseUrl);
    [ExtensionAttribute]
public static IConfigurationBuilder AddOcelot(IConfigurationBuilder builder, IWebHostEnvironment env);
    [ExtensionAttribute]
public static IConfigurationBuilder AddOcelot(IConfigurationBuilder builder, string folder, IWebHostEnvironment env);
    [ExtensionAttribute]
public static IConfigurationBuilder AddOcelot(IConfigurationBuilder builder, IWebHostEnvironment env, MergeOcelotJson mergeTo, string primaryConfigFile, string globalConfigFile, string environmentConfigFile, Nullable`1<bool> optional, Nullable`1<bool> reloadOnChange);
    [ExtensionAttribute]
public static IConfigurationBuilder AddOcelot(IConfigurationBuilder builder, string folder, IWebHostEnvironment env, MergeOcelotJson mergeTo, string primaryConfigFile, string globalConfigFile, string environmentConfigFile, Nullable`1<bool> optional, Nullable`1<bool> reloadOnChange);
    private static IConfigurationBuilder ApplyMergeOcelotJsonOption(IConfigurationBuilder builder, MergeOcelotJson mergeTo, string json, string primaryConfigFile, Nullable`1<bool> optional, Nullable`1<bool> reloadOnChange);
    private static string GetMergedOcelotJson(string folder, IWebHostEnvironment env, FileConfiguration fileConfiguration, string primaryFile, string globalFile, string environmentFile);
    [ExtensionAttribute]
public static IConfigurationBuilder AddOcelot(IConfigurationBuilder builder, FileConfiguration fileConfiguration, string primaryConfigFile, Nullable`1<bool> optional, Nullable`1<bool> reloadOnChange);
    [ExtensionAttribute]
public static IConfigurationBuilder AddOcelot(IConfigurationBuilder builder, FileConfiguration fileConfiguration, IWebHostEnvironment env, MergeOcelotJson mergeTo, string primaryConfigFile, string globalConfigFile, string environmentConfigFile, Nullable`1<bool> optional, Nullable`1<bool> reloadOnChange);
    private static IConfigurationBuilder AddOcelotJsonFile(IConfigurationBuilder builder, string json, string primaryFile, Nullable`1<bool> optional, Nullable`1<bool> reloadOnChange);
}
[ExtensionAttribute]
public static class Ocelot.DependencyInjection.Features : object {
    [ExtensionAttribute]
public static IServiceCollection AddRateLimiting(IServiceCollection services);
    [ExtensionAttribute]
public static IServiceCollection AddOcelotCache(IServiceCollection services);
    [ExtensionAttribute]
public static IServiceCollection AddHeaderRouting(IServiceCollection services);
    [ExtensionAttribute]
public static IServiceCollection AddOcelotMetadata(IServiceCollection services);
}
public interface Ocelot.DependencyInjection.IAdministrationPath {
    public string Path { get; }
    public abstract virtual string get_Path();
}
public interface Ocelot.DependencyInjection.IOcelotAdministrationBuilder {
    public IServiceCollection Services { get; }
    public IConfiguration ConfigurationRoot { get; }
    public abstract virtual IServiceCollection get_Services();
    public abstract virtual IConfiguration get_ConfigurationRoot();
}
public interface Ocelot.DependencyInjection.IOcelotBuilder {
    public IServiceCollection Services { get; }
    public IConfiguration Configuration { get; }
    public IMvcCoreBuilder MvcCoreBuilder { get; }
    public abstract virtual IServiceCollection get_Services();
    public abstract virtual IConfiguration get_Configuration();
    public abstract virtual IMvcCoreBuilder get_MvcCoreBuilder();
    public abstract virtual IOcelotBuilder AddDelegatingHandler(Type type, bool global);
    public abstract virtual IOcelotBuilder AddDelegatingHandler(bool global);
    public abstract virtual IOcelotBuilder AddSingletonDefinedAggregator();
    public abstract virtual IOcelotBuilder AddTransientDefinedAggregator();
    public abstract virtual IOcelotBuilder AddCustomLoadBalancer();
    public abstract virtual IOcelotBuilder AddCustomLoadBalancer(Func`1<T> loadBalancerFactoryFunc);
    public abstract virtual IOcelotBuilder AddCustomLoadBalancer(Func`2<IServiceProvider, T> loadBalancerFactoryFunc);
    public abstract virtual IOcelotBuilder AddCustomLoadBalancer(Func`3<DownstreamRoute, IServiceDiscoveryProvider, T> loadBalancerFactoryFunc);
    public abstract virtual IOcelotBuilder AddCustomLoadBalancer(Func`4<IServiceProvider, DownstreamRoute, IServiceDiscoveryProvider, T> loadBalancerFactoryFunc);
    public abstract virtual IOcelotBuilder AddConfigPlaceholders();
}
public enum Ocelot.DependencyInjection.MergeOcelotJson : Enum {
    public int value__;
    public static MergeOcelotJson ToFile;
    public static MergeOcelotJson ToMemory;
}
public class Ocelot.DependencyInjection.OcelotAdministrationBuilder : object {
    [CompilerGeneratedAttribute]
private IServiceCollection <Services>k__BackingField;
    [CompilerGeneratedAttribute]
private IConfiguration <ConfigurationRoot>k__BackingField;
    public IServiceCollection Services { get; }
    public IConfiguration ConfigurationRoot { get; }
    public OcelotAdministrationBuilder(IServiceCollection services, IConfiguration configurationRoot);
    [CompilerGeneratedAttribute]
public sealed virtual IServiceCollection get_Services();
    [CompilerGeneratedAttribute]
public sealed virtual IConfiguration get_ConfigurationRoot();
}
public class Ocelot.DependencyInjection.OcelotBuilder : object {
    [CompilerGeneratedAttribute]
private IServiceCollection <Services>k__BackingField;
    [CompilerGeneratedAttribute]
private IConfiguration <Configuration>k__BackingField;
    [CompilerGeneratedAttribute]
private IMvcCoreBuilder <MvcCoreBuilder>k__BackingField;
    public IServiceCollection Services { get; }
    public IConfiguration Configuration { get; }
    public IMvcCoreBuilder MvcCoreBuilder { get; }
    public OcelotBuilder(IServiceCollection services, IConfiguration configurationRoot, Func`3<IMvcCoreBuilder, Assembly, IMvcCoreBuilder> customBuilder);
    [CompilerGeneratedAttribute]
public sealed virtual IServiceCollection get_Services();
    [CompilerGeneratedAttribute]
public sealed virtual IConfiguration get_Configuration();
    [CompilerGeneratedAttribute]
public sealed virtual IMvcCoreBuilder get_MvcCoreBuilder();
    protected IMvcCoreBuilder AddDefaultAspNetServices(IMvcCoreBuilder builder, Assembly assembly);
    public sealed virtual IOcelotBuilder AddSingletonDefinedAggregator();
    public sealed virtual IOcelotBuilder AddTransientDefinedAggregator();
    public sealed virtual IOcelotBuilder AddCustomLoadBalancer();
    public sealed virtual IOcelotBuilder AddCustomLoadBalancer(Func`1<T> loadBalancerFactoryFunc);
    public sealed virtual IOcelotBuilder AddCustomLoadBalancer(Func`2<IServiceProvider, T> loadBalancerFactoryFunc);
    public sealed virtual IOcelotBuilder AddCustomLoadBalancer(Func`3<DownstreamRoute, IServiceDiscoveryProvider, T> loadBalancerFactoryFunc);
    public sealed virtual IOcelotBuilder AddCustomLoadBalancer(Func`4<IServiceProvider, DownstreamRoute, IServiceDiscoveryProvider, T> loadBalancerFactoryFunc);
    public sealed virtual IOcelotBuilder AddDelegatingHandler(Type delegateType, bool global);
    public sealed virtual IOcelotBuilder AddDelegatingHandler(bool global);
    public sealed virtual IOcelotBuilder AddConfigPlaceholders();
    private static object CreateInstance(IServiceProvider services, ServiceDescriptor descriptor);
}
[ExtensionAttribute]
public static class Ocelot.DependencyInjection.ServiceCollectionExtensions : object {
    [ExtensionAttribute]
public static IOcelotBuilder AddOcelot(IServiceCollection services);
    [ExtensionAttribute]
public static IOcelotBuilder AddOcelot(IServiceCollection services, IConfiguration configuration);
    [ExtensionAttribute]
[ObsoleteAttribute("Use AddOcelotUsingBuilder() overloaded version with the 'IConfiguration configuration' parameter.")]
public static IOcelotBuilder AddOcelotUsingBuilder(IServiceCollection services, Func`3<IMvcCoreBuilder, Assembly, IMvcCoreBuilder> customBuilder);
    [ExtensionAttribute]
public static IOcelotBuilder AddOcelotUsingBuilder(IServiceCollection services, IConfiguration configuration, Func`3<IMvcCoreBuilder, Assembly, IMvcCoreBuilder> customBuilder);
    private static IConfiguration DefaultConfiguration(IWebHostEnvironment env);
    [ExtensionAttribute]
private static IConfiguration FindConfiguration(IServiceCollection services, IWebHostEnvironment env);
}
public class Ocelot.DownstreamPathManipulation.Middleware.ClaimsToDownstreamPathMiddleware : OcelotMiddleware {
    private RequestDelegate _next;
    private IChangeDownstreamPathTemplate _changeDownstreamPathTemplate;
    public ClaimsToDownstreamPathMiddleware(RequestDelegate next, IOcelotLoggerFactory loggerFactory, IChangeDownstreamPathTemplate changeDownstreamPathTemplate);
    [AsyncStateMachineAttribute("Ocelot.DownstreamPathManipulation.Middleware.ClaimsToDownstreamPathMiddleware/<Invoke>d__3")]
public Task Invoke(HttpContext httpContext);
}
[ExtensionAttribute]
public static class Ocelot.DownstreamPathManipulation.Middleware.ClaimsToDownstreamPathMiddlewareExtensions : object {
    [ExtensionAttribute]
public static IApplicationBuilder UseClaimsToDownstreamPathMiddleware(IApplicationBuilder builder);
}
public class Ocelot.DownstreamRouteFinder.DownstreamRouteHolder : object {
    [CompilerGeneratedAttribute]
private List`1<PlaceholderNameAndValue> <TemplatePlaceholderNameAndValues>k__BackingField;
    [CompilerGeneratedAttribute]
private Route <Route>k__BackingField;
    public List`1<PlaceholderNameAndValue> TemplatePlaceholderNameAndValues { get; }
    public Route Route { get; }
    public DownstreamRouteHolder(List`1<PlaceholderNameAndValue> templatePlaceholderNameAndValues, Route route);
    [CompilerGeneratedAttribute]
public List`1<PlaceholderNameAndValue> get_TemplatePlaceholderNameAndValues();
    [CompilerGeneratedAttribute]
public Route get_Route();
}
public class Ocelot.DownstreamRouteFinder.Finder.DownstreamRouteCreator : object {
    private IQoSOptionsCreator _qoSOptionsCreator;
    private ConcurrentDictionary`2<string, OkResponse`1<DownstreamRouteHolder>> _cache;
    public DownstreamRouteCreator(IQoSOptionsCreator qoSOptionsCreator);
    public sealed virtual Response`1<DownstreamRouteHolder> Get(string upstreamUrlPath, string upstreamQueryString, string upstreamHttpMethod, IInternalConfiguration configuration, string upstreamHost, IDictionary`2<string, string> upstreamHeaders);
    private static string RemoveQueryString(string downstreamPath);
    private static bool HasQueryString(string downstreamPath);
    private static string GetDownstreamPath(string upstreamUrlPath);
    private static string GetServiceName(string upstreamUrlPath);
    private static string CreateLoadBalancerKey(string downstreamTemplatePath, string httpMethod, LoadBalancerOptions loadBalancerOptions);
    private static string CreateQoSKey(string downstreamTemplatePath, string httpMethod);
}
public class Ocelot.DownstreamRouteFinder.Finder.DownstreamRouteFinder : object {
    private IUrlPathToUrlTemplateMatcher _urlMatcher;
    private IPlaceholderNameAndValueFinder _pathPlaceholderFinder;
    private IHeadersToHeaderTemplatesMatcher _headerMatcher;
    private IHeaderPlaceholderNameAndValueFinder _headerPlaceholderFinder;
    public DownstreamRouteFinder(IUrlPathToUrlTemplateMatcher urlMatcher, IPlaceholderNameAndValueFinder pathPlaceholderFinder, IHeadersToHeaderTemplatesMatcher headerMatcher, IHeaderPlaceholderNameAndValueFinder headerPlaceholderFinder);
    public sealed virtual Response`1<DownstreamRouteHolder> Get(string upstreamUrlPath, string upstreamQueryString, string httpMethod, IInternalConfiguration configuration, string upstreamHost, IDictionary`2<string, string> upstreamHeaders);
    private static bool RouteIsApplicableToThisRequest(Route route, string httpMethod, string upstreamHost);
    private DownstreamRouteHolder GetPlaceholderNamesAndValues(string path, string query, Route route, IDictionary`2<string, string> upstreamHeaders);
}
public class Ocelot.DownstreamRouteFinder.Finder.DownstreamRouteProviderFactory : object {
    private Dictionary`2<string, IDownstreamRouteProvider> _providers;
    private IOcelotLogger _logger;
    public DownstreamRouteProviderFactory(IServiceProvider provider, IOcelotLoggerFactory factory);
    public sealed virtual IDownstreamRouteProvider Get(IInternalConfiguration config);
    private static bool IsServiceDiscovery(ServiceProviderConfiguration config);
}
public interface Ocelot.DownstreamRouteFinder.Finder.IDownstreamRouteProvider {
    public abstract virtual Response`1<DownstreamRouteHolder> Get(string upstreamUrlPath, string upstreamQueryString, string upstreamHttpMethod, IInternalConfiguration configuration, string upstreamHost, IDictionary`2<string, string> upstreamHeaders);
}
public interface Ocelot.DownstreamRouteFinder.Finder.IDownstreamRouteProviderFactory {
    public abstract virtual IDownstreamRouteProvider Get(IInternalConfiguration config);
}
public class Ocelot.DownstreamRouteFinder.Finder.UnableToFindDownstreamRouteError : Error {
    public UnableToFindDownstreamRouteError(string path, string httpVerb);
}
public class Ocelot.DownstreamRouteFinder.HeaderMatcher.HeaderPlaceholderNameAndValueFinder : object {
    public sealed virtual IList`1<PlaceholderNameAndValue> Find(IDictionary`2<string, string> upstreamHeaders, IDictionary`2<string, UpstreamHeaderTemplate> templateHeaders);
}
public class Ocelot.DownstreamRouteFinder.HeaderMatcher.HeadersToHeaderTemplatesMatcher : object {
    public sealed virtual bool Match(IDictionary`2<string, string> upstreamHeaders, IDictionary`2<string, UpstreamHeaderTemplate> routeHeaders);
}
public interface Ocelot.DownstreamRouteFinder.HeaderMatcher.IHeaderPlaceholderNameAndValueFinder {
    public abstract virtual IList`1<PlaceholderNameAndValue> Find(IDictionary`2<string, string> upstreamHeaders, IDictionary`2<string, UpstreamHeaderTemplate> templateHeaders);
}
public interface Ocelot.DownstreamRouteFinder.HeaderMatcher.IHeadersToHeaderTemplatesMatcher {
    public abstract virtual bool Match(IDictionary`2<string, string> upstreamHeaders, IDictionary`2<string, UpstreamHeaderTemplate> routeHeaders);
}
public class Ocelot.DownstreamRouteFinder.Middleware.DownstreamRouteFinderMiddleware : OcelotMiddleware {
    private RequestDelegate _next;
    private IDownstreamRouteProviderFactory _factory;
    public DownstreamRouteFinderMiddleware(RequestDelegate next, IOcelotLoggerFactory loggerFactory, IDownstreamRouteProviderFactory downstreamRouteFinder);
    [AsyncStateMachineAttribute("Ocelot.DownstreamRouteFinder.Middleware.DownstreamRouteFinderMiddleware/<Invoke>d__3")]
public Task Invoke(HttpContext httpContext);
}
[ExtensionAttribute]
public static class Ocelot.DownstreamRouteFinder.Middleware.DownstreamRouteFinderMiddlewareExtensions : object {
    [ExtensionAttribute]
public static IApplicationBuilder UseDownstreamRouteFinderMiddleware(IApplicationBuilder builder);
}
public interface Ocelot.DownstreamRouteFinder.UrlMatcher.IPlaceholderNameAndValueFinder {
    public abstract virtual Response`1<List`1<PlaceholderNameAndValue>> Find(string path, string query, string pathTemplate);
}
public interface Ocelot.DownstreamRouteFinder.UrlMatcher.IUrlPathToUrlTemplateMatcher {
    public abstract virtual Response`1<UrlMatch> Match(string upstreamUrlPath, string upstreamQueryString, UpstreamPathTemplate pathTemplate);
}
public class Ocelot.DownstreamRouteFinder.UrlMatcher.PlaceholderNameAndValue : object {
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Value>k__BackingField;
    public string Name { get; }
    public string Value { get; }
    public PlaceholderNameAndValue(string name, string value);
    [CompilerGeneratedAttribute]
public string get_Name();
    [CompilerGeneratedAttribute]
public string get_Value();
    public virtual string ToString();
}
public class Ocelot.DownstreamRouteFinder.UrlMatcher.RegExUrlMatcher : object {
    public sealed virtual Response`1<UrlMatch> Match(string upstreamUrlPath, string upstreamQueryString, UpstreamPathTemplate pathTemplate);
}
public class Ocelot.DownstreamRouteFinder.UrlMatcher.UrlMatch : object {
    [CompilerGeneratedAttribute]
private bool <Match>k__BackingField;
    public bool Match { get; }
    public UrlMatch(bool match);
    [CompilerGeneratedAttribute]
public bool get_Match();
}
public class Ocelot.DownstreamRouteFinder.UrlMatcher.UrlPathPlaceholderNameAndValueFinder : object {
    public sealed virtual Response`1<List`1<PlaceholderNameAndValue>> Find(string path, string query, string pathTemplate);
    private static bool NoMoreForwardSlash(string pathTemplate, int counterForTemplate);
    private static bool NotPassedQueryString(string pathTemplate, int counterForTemplate);
    private static bool PassedQueryString(string pathTemplate, int counterForTemplate);
    private static bool IsCatchAll(string path, int counterForPath, string pathTemplate);
    private static bool IsCatchAllAfterOtherPlaceholders(string pathTemplate, int counterForTemplate);
    private static bool NothingAfterFirstForwardSlash(string path);
    private static string GetPlaceholderValue(string urlPathTemplate, string query, string variableName, string urlPath, int counterForUrl, char delimiter);
    private static string GetPlaceholderName(string urlPathTemplate, int counterForTemplate);
    private static int GetNextCounterPosition(string urlTemplate, int counterForTemplate, char delimiter);
    private static bool CharactersDontMatch(char characterOne, char characterTwo);
    private static bool ContinueScanningUrl(int counterForUrl, int urlLength);
    private static bool IsPlaceholder(char character);
}
public class Ocelot.DownstreamUrlCreator.DownstreamPathPlaceholderReplacer : object {
    public sealed virtual Response`1<DownstreamPath> Replace(string downstreamPathTemplate, List`1<PlaceholderNameAndValue> urlPathPlaceholderNameAndValues);
}
public interface Ocelot.DownstreamUrlCreator.IDownstreamPathPlaceholderReplacer {
    public abstract virtual Response`1<DownstreamPath> Replace(string downstreamPathTemplate, List`1<PlaceholderNameAndValue> urlPathPlaceholderNameAndValues);
}
public class Ocelot.DownstreamUrlCreator.Middleware.DownstreamUrlCreatorMiddleware : OcelotMiddleware {
    private RequestDelegate _next;
    private IDownstreamPathPlaceholderReplacer _replacer;
    private static char Ampersand;
    private static char QuestionMark;
    private static char OpeningBrace;
    private static char ClosingBrace;
    protected static char Slash;
    public DownstreamUrlCreatorMiddleware(RequestDelegate next, IOcelotLoggerFactory loggerFactory, IDownstreamPathPlaceholderReplacer replacer);
    [AsyncStateMachineAttribute("Ocelot.DownstreamUrlCreator.Middleware.DownstreamUrlCreatorMiddleware/<Invoke>d__8")]
public Task Invoke(HttpContext httpContext);
    private static string MergeQueryStringsWithoutDuplicateValues(string queryString, string newQueryString, List`1<PlaceholderNameAndValue> placeholders);
    private static string MapQueryParameter(KeyValuePair`2<string, string> pair);
    private static void RemoveQueryStringParametersThatHaveBeenUsedInTemplate(DownstreamRequest downstreamRequest, List`1<PlaceholderNameAndValue> templatePlaceholderNameAndValues);
    private static string GetPath(string downstreamPath);
    private static string GetQueryString(string downstreamPath);
    private ValueTuple`2<string, string> CreateServiceFabricUri(DownstreamRequest downstreamRequest, DownstreamRoute downstreamRoute, List`1<PlaceholderNameAndValue> templatePlaceholderNameAndValues, Response`1<DownstreamPath> dsPath);
    private static bool ServiceFabricRequest(IInternalConfiguration config, DownstreamRoute downstreamRoute);
}
[ExtensionAttribute]
public static class Ocelot.DownstreamUrlCreator.Middleware.DownstreamUrlCreatorMiddlewareExtensions : object {
    [ExtensionAttribute]
public static IApplicationBuilder UseDownstreamUrlCreatorMiddleware(IApplicationBuilder builder);
}
public abstract class Ocelot.Errors.Error : object {
    [CompilerGeneratedAttribute]
private string <Message>k__BackingField;
    [CompilerGeneratedAttribute]
private OcelotErrorCode <Code>k__BackingField;
    [CompilerGeneratedAttribute]
private int <HttpStatusCode>k__BackingField;
    public string Message { get; }
    public OcelotErrorCode Code { get; }
    public int HttpStatusCode { get; }
    protected Error(string message, OcelotErrorCode code, int httpStatusCode);
    [CompilerGeneratedAttribute]
public string get_Message();
    [CompilerGeneratedAttribute]
public OcelotErrorCode get_Code();
    [CompilerGeneratedAttribute]
public int get_HttpStatusCode();
    public virtual string ToString();
}
public class Ocelot.Errors.Middleware.ExceptionHandlerMiddleware : OcelotMiddleware {
    private RequestDelegate _next;
    private IRequestScopedDataRepository _repo;
    public ExceptionHandlerMiddleware(RequestDelegate next, IOcelotLoggerFactory loggerFactory, IRequestScopedDataRepository repo);
    [AsyncStateMachineAttribute("Ocelot.Errors.Middleware.ExceptionHandlerMiddleware/<Invoke>d__3")]
public Task Invoke(HttpContext httpContext);
    private void TrySetGlobalRequestId(HttpContext httpContext, IInternalConfiguration configuration);
    private static void SetInternalServerErrorOnResponse(HttpContext httpContext);
    private static string CreateMessage(HttpContext httpContext, Exception e);
}
[ExtensionAttribute]
public static class Ocelot.Errors.Middleware.ExceptionHandlerMiddlewareExtensions : object {
    [ExtensionAttribute]
public static IApplicationBuilder UseExceptionHandlerMiddleware(IApplicationBuilder builder);
}
public enum Ocelot.Errors.OcelotErrorCode : Enum {
    public int value__;
    public static OcelotErrorCode UnauthenticatedError;
    public static OcelotErrorCode UnknownError;
    public static OcelotErrorCode DownstreampathTemplateAlreadyUsedError;
    public static OcelotErrorCode UnableToFindDownstreamRouteError;
    public static OcelotErrorCode CannotAddDataError;
    public static OcelotErrorCode CannotFindDataError;
    public static OcelotErrorCode UnableToCompleteRequestError;
    public static OcelotErrorCode UnableToCreateAuthenticationHandlerError;
    public static OcelotErrorCode UnsupportedAuthenticationProviderError;
    public static OcelotErrorCode CannotFindClaimError;
    public static OcelotErrorCode ParsingConfigurationHeaderError;
    public static OcelotErrorCode NoInstructionsError;
    public static OcelotErrorCode InstructionNotForClaimsError;
    public static OcelotErrorCode UnauthorizedError;
    public static OcelotErrorCode ClaimValueNotAuthorizedError;
    public static OcelotErrorCode ScopeNotAuthorizedError;
    public static OcelotErrorCode UserDoesNotHaveClaimError;
    public static OcelotErrorCode DownstreamPathTemplateContainsSchemeError;
    public static OcelotErrorCode DownstreamPathNullOrEmptyError;
    public static OcelotErrorCode DownstreamSchemeNullOrEmptyError;
    public static OcelotErrorCode DownstreamHostNullOrEmptyError;
    public static OcelotErrorCode ServicesAreNullError;
    public static OcelotErrorCode ServicesAreEmptyError;
    public static OcelotErrorCode UnableToFindServiceDiscoveryProviderError;
    public static OcelotErrorCode UnableToFindLoadBalancerError;
    public static OcelotErrorCode RequestTimedOutError;
    public static OcelotErrorCode UnableToFindQoSProviderError;
    public static OcelotErrorCode UnmappableRequestError;
    public static OcelotErrorCode RateLimitOptionsError;
    public static OcelotErrorCode PathTemplateDoesntStartWithForwardSlash;
    public static OcelotErrorCode FileValidationFailedError;
    public static OcelotErrorCode UnableToFindDelegatingHandlerProviderError;
    public static OcelotErrorCode CouldNotFindPlaceholderError;
    public static OcelotErrorCode CouldNotFindAggregatorError;
    public static OcelotErrorCode CannotAddPlaceholderError;
    public static OcelotErrorCode CannotRemovePlaceholderError;
    public static OcelotErrorCode QuotaExceededError;
    public static OcelotErrorCode RequestCanceled;
    public static OcelotErrorCode ConnectionToDownstreamServiceError;
    public static OcelotErrorCode CouldNotFindLoadBalancerCreator;
    public static OcelotErrorCode ErrorInvokingLoadBalancerCreator;
    public static OcelotErrorCode PayloadTooLargeError;
}
public class Ocelot.Errors.QoS.RequestTimedOutError : Error {
    public RequestTimedOutError(Exception exception);
}
public class Ocelot.Headers.AddHeadersToRequest : object {
    private IClaimsParser _claimsParser;
    private IPlaceholders _placeholders;
    private IOcelotLogger _logger;
    public AddHeadersToRequest(IClaimsParser claimsParser, IPlaceholders placeholders, IOcelotLoggerFactory factory);
    public sealed virtual Response SetHeadersOnDownstreamRequest(List`1<ClaimToThing> claimsToThings, IEnumerable`1<Claim> claims, DownstreamRequest downstreamRequest);
    public sealed virtual void SetHeadersOnDownstreamRequest(IEnumerable`1<AddHeader> headers, HttpContext context);
}
public class Ocelot.Headers.AddHeadersToResponse : object {
    private IPlaceholders _placeholders;
    private IOcelotLogger _logger;
    public AddHeadersToResponse(IPlaceholders placeholders, IOcelotLoggerFactory factory);
    public sealed virtual void Add(List`1<AddHeader> addHeaders, DownstreamResponse response);
}
public class Ocelot.Headers.HttpContextRequestHeaderReplacer : object {
    public sealed virtual Response Replace(HttpContext context, List`1<HeaderFindAndReplace> fAndRs);
}
public class Ocelot.Headers.HttpResponseHeaderReplacer : object {
    private IPlaceholders _placeholders;
    public HttpResponseHeaderReplacer(IPlaceholders placeholders);
    public sealed virtual Response Replace(HttpContext httpContext, List`1<HeaderFindAndReplace> fAndRs);
}
public interface Ocelot.Headers.IAddHeadersToRequest {
    public abstract virtual Response SetHeadersOnDownstreamRequest(List`1<ClaimToThing> claimsToThings, IEnumerable`1<Claim> claims, DownstreamRequest downstreamRequest);
    public abstract virtual void SetHeadersOnDownstreamRequest(IEnumerable`1<AddHeader> headers, HttpContext context);
}
public interface Ocelot.Headers.IAddHeadersToResponse {
    public abstract virtual void Add(List`1<AddHeader> addHeaders, DownstreamResponse response);
}
public interface Ocelot.Headers.IHttpContextRequestHeaderReplacer {
    public abstract virtual Response Replace(HttpContext context, List`1<HeaderFindAndReplace> fAndRs);
}
public interface Ocelot.Headers.IHttpResponseHeaderReplacer {
    public abstract virtual Response Replace(HttpContext httpContext, List`1<HeaderFindAndReplace> fAndRs);
}
public interface Ocelot.Headers.IRemoveOutputHeaders {
    public abstract virtual Response Remove(List`1<Header> headers);
}
public class Ocelot.Headers.Middleware.ClaimsToHeadersMiddleware : OcelotMiddleware {
    private RequestDelegate _next;
    private IAddHeadersToRequest _addHeadersToRequest;
    public ClaimsToHeadersMiddleware(RequestDelegate next, IOcelotLoggerFactory loggerFactory, IAddHeadersToRequest addHeadersToRequest);
    [AsyncStateMachineAttribute("Ocelot.Headers.Middleware.ClaimsToHeadersMiddleware/<Invoke>d__3")]
public Task Invoke(HttpContext httpContext);
}
[ExtensionAttribute]
public static class Ocelot.Headers.Middleware.ClaimsToHeadersMiddlewareExtensions : object {
    [ExtensionAttribute]
public static IApplicationBuilder UseClaimsToHeadersMiddleware(IApplicationBuilder builder);
}
public class Ocelot.Headers.Middleware.HttpHeadersTransformationMiddleware : OcelotMiddleware {
    private RequestDelegate _next;
    private IHttpContextRequestHeaderReplacer _preReplacer;
    private IHttpResponseHeaderReplacer _postReplacer;
    private IAddHeadersToResponse _addHeadersToResponse;
    private IAddHeadersToRequest _addHeadersToRequest;
    public HttpHeadersTransformationMiddleware(RequestDelegate next, IOcelotLoggerFactory loggerFactory, IHttpContextRequestHeaderReplacer preReplacer, IHttpResponseHeaderReplacer postReplacer, IAddHeadersToResponse addHeadersToResponse, IAddHeadersToRequest addHeadersToRequest);
    [AsyncStateMachineAttribute("Ocelot.Headers.Middleware.HttpHeadersTransformationMiddleware/<Invoke>d__6")]
public Task Invoke(HttpContext httpContext);
}
[ExtensionAttribute]
public static class Ocelot.Headers.Middleware.HttpHeadersTransformationMiddlewareExtensions : object {
    [ExtensionAttribute]
public static IApplicationBuilder UseHttpHeadersTransformationMiddleware(IApplicationBuilder builder);
}
public class Ocelot.Headers.RemoveOutputHeaders : object {
    private String[] _unsupportedRequestHeaders;
    public sealed virtual Response Remove(List`1<Header> headers);
    [CompilerGeneratedAttribute]
private bool <Remove>b__1_0(Header x);
}
public class Ocelot.Infrastructure.CannotAddPlaceholderError : Error {
    public CannotAddPlaceholderError(string message);
}
public class Ocelot.Infrastructure.CannotRemovePlaceholderError : Error {
    public CannotRemovePlaceholderError(string message);
}
public class Ocelot.Infrastructure.Claims.Parser.CannotFindClaimError : Error {
    public CannotFindClaimError(string message);
}
public class Ocelot.Infrastructure.Claims.Parser.ClaimsParser : object {
    public sealed virtual Response`1<string> GetValue(IEnumerable`1<Claim> claims, string key, string delimiter, int index);
    public sealed virtual Response`1<List`1<string>> GetValuesByClaimType(IEnumerable`1<Claim> claims, string claimType);
    private static Response`1<string> GetValue(IEnumerable`1<Claim> claims, string key);
}
public interface Ocelot.Infrastructure.Claims.Parser.IClaimsParser {
    public abstract virtual Response`1<string> GetValue(IEnumerable`1<Claim> claims, string key, string delimiter, int index);
    public abstract virtual Response`1<List`1<string>> GetValuesByClaimType(IEnumerable`1<Claim> claims, string claimType);
}
public class Ocelot.Infrastructure.ConfigAwarePlaceholders : object {
    private IConfiguration _configuration;
    private IPlaceholders _placeholders;
    public ConfigAwarePlaceholders(IConfiguration configuration, IPlaceholders placeholders);
    public sealed virtual Response`1<string> Get(string key);
    public sealed virtual Response`1<string> Get(string key, DownstreamRequest request);
    public sealed virtual Response Add(string key, Func`1<Response`1<string>> func);
    public sealed virtual Response Remove(string key);
    private static string CleanKey(string key);
    private Response`1<string> GetFromConfig(string key);
}
public class Ocelot.Infrastructure.CouldNotFindPlaceholderError : Error {
    public CouldNotFindPlaceholderError(string placeholder);
}
internal class Ocelot.Infrastructure.DelayedMessage`1 : object {
    [CompilerGeneratedAttribute]
private T <Message>k__BackingField;
    [CompilerGeneratedAttribute]
private int <Delay>k__BackingField;
    public T Message { get; public set; }
    public int Delay { get; public set; }
    public DelayedMessage`1(T message, int delay);
    [CompilerGeneratedAttribute]
public T get_Message();
    [CompilerGeneratedAttribute]
public void set_Message(T value);
    [CompilerGeneratedAttribute]
public int get_Delay();
    [CompilerGeneratedAttribute]
public void set_Delay(int value);
}
[ExtensionAttribute]
public static class Ocelot.Infrastructure.Extensions.ErrorListExtensions : object {
    [ExtensionAttribute]
public static string ToErrorString(List`1<Error> errors);
}
[ExtensionAttribute]
internal static class Ocelot.Infrastructure.Extensions.NetCoreSupportExtensions : object {
    [ExtensionAttribute]
internal static void AppendJoin(StringBuilder builder, char separator, IEnumerable`1<T> values);
    [ExtensionAttribute]
internal static String[] Split(string input, string separator, StringSplitOptions options);
    [ExtensionAttribute]
internal static bool StartsWith(string input, char value);
    [ExtensionAttribute]
internal static bool EndsWith(string input, char value);
}
[ExtensionAttribute]
public static class Ocelot.Infrastructure.Extensions.StringExtensions : object {
    [ExtensionAttribute]
public static string TrimStart(string source, string trim, StringComparison stringComparison);
    [ExtensionAttribute]
public static string LastCharAsForwardSlash(string source);
}
[ExtensionAttribute]
public static class Ocelot.Infrastructure.Extensions.StringValuesExtensions : object {
    [ExtensionAttribute]
public static string GetValue(StringValues stringValues);
}
public class Ocelot.Infrastructure.FrameworkDescription : object {
    public sealed virtual string Get();
}
public interface Ocelot.Infrastructure.IBus`1 {
    public abstract virtual void Subscribe(Action`1<T> action);
    public abstract virtual void Publish(T message, int delay);
}
public interface Ocelot.Infrastructure.IFrameworkDescription {
    public abstract virtual string Get();
}
public class Ocelot.Infrastructure.InMemoryBus`1 : object {
    private BlockingCollection`1<DelayedMessage`1<T>> _queue;
    private List`1<Action`1<T>> _subscriptions;
    private Thread _processing;
    public sealed virtual void Subscribe(Action`1<T> action);
    public sealed virtual void Publish(T message, int delay);
    [AsyncStateMachineAttribute("Ocelot.Infrastructure.InMemoryBus`1/<Process>d__6")]
private Task Process();
    [AsyncStateMachineAttribute("Ocelot.Infrastructure.InMemoryBus`1/<<-ctor>b__3_0>d")]
[CompilerGeneratedAttribute]
private void <.ctor>b__3_0();
}
public interface Ocelot.Infrastructure.IPlaceholders {
    public abstract virtual Response`1<string> Get(string key);
    public abstract virtual Response`1<string> Get(string key, DownstreamRequest request);
    public abstract virtual Response Add(string key, Func`1<Response`1<string>> func);
    public abstract virtual Response Remove(string key);
}
public class Ocelot.Infrastructure.Placeholders : object {
    private Dictionary`2<string, Func`1<Response`1<string>>> _placeholders;
    private Dictionary`2<string, Func`2<DownstreamRequest, string>> _requestPlaceholders;
    private IBaseUrlFinder _finder;
    private IRequestScopedDataRepository _repo;
    private IHttpContextAccessor _httpContextAccessor;
    public Placeholders(IBaseUrlFinder finder, IRequestScopedDataRepository repo, IHttpContextAccessor httpContextAccessor);
    public sealed virtual Response`1<string> Get(string key);
    public sealed virtual Response`1<string> Get(string key, DownstreamRequest request);
    public sealed virtual Response Add(string key, Func`1<Response`1<string>> func);
    public sealed virtual Response Remove(string key);
    private Func`1<Response`1<string>> GetRemoteIpAddress();
    private static Func`2<DownstreamRequest, string> GetDownstreamBaseUrl();
    private Func`1<Response`1<string>> GetTraceId();
    private Func`1<Response`1<string>> GetBaseUrl();
    private Func`1<Response`1<string>> GetUpstreamHost();
    [CompilerGeneratedAttribute]
private Response`1<string> <GetRemoteIpAddress>b__10_0();
    [CompilerGeneratedAttribute]
private Response`1<string> <GetTraceId>b__12_0();
    [CompilerGeneratedAttribute]
private Response`1<string> <GetBaseUrl>b__13_0();
    [CompilerGeneratedAttribute]
private Response`1<string> <GetUpstreamHost>b__14_0();
}
public class Ocelot.Infrastructure.RequestData.CannotAddDataError : Error {
    public CannotAddDataError(string message);
}
public class Ocelot.Infrastructure.RequestData.CannotFindDataError : Error {
    public CannotFindDataError(string message);
}
public class Ocelot.Infrastructure.RequestData.HttpDataRepository : object {
    private IHttpContextAccessor _httpContextAccessor;
    public HttpDataRepository(IHttpContextAccessor httpContextAccessor);
    public sealed virtual Response Add(string key, T value);
    public sealed virtual Response Update(string key, T value);
    public sealed virtual Response`1<T> Get(string key);
}
public interface Ocelot.Infrastructure.RequestData.IRequestScopedDataRepository {
    public abstract virtual Response Add(string key, T value);
    public abstract virtual Response Update(string key, T value);
    public abstract virtual Response`1<T> Get(string key);
}
public class Ocelot.Infrastructure.Wait : object {
    public static Waiter WaitFor(int milliSeconds);
}
public class Ocelot.Infrastructure.Waiter : object {
    private int _milliSeconds;
    public Waiter(int milliSeconds);
    public bool Until(Func`1<bool> condition);
    public bool Until(Func`1<bool> condition);
}
public class Ocelot.LoadBalancer.LoadBalancers.CookieStickySessions : object {
    private int _keyExpiryInMs;
    private string _key;
    private ILoadBalancer _loadBalancer;
    private ConcurrentDictionary`2<string, StickySession> _stored;
    private IBus`1<StickySession> _bus;
    private object _lock;
    public CookieStickySessions(ILoadBalancer loadBalancer, string key, int keyExpiryInMs, IBus`1<StickySession> bus);
    [AsyncStateMachineAttribute("Ocelot.LoadBalancer.LoadBalancers.CookieStickySessions/<Lease>d__7")]
public sealed virtual Task`1<Response`1<ServiceHostAndPort>> Lease(HttpContext httpContext);
    public sealed virtual void Release(ServiceHostAndPort hostAndPort);
    [CompilerGeneratedAttribute]
private void <.ctor>b__6_0(StickySession ss);
}
public class Ocelot.LoadBalancer.LoadBalancers.CookieStickySessionsCreator : object {
    public string Type { get; }
    public sealed virtual Response`1<ILoadBalancer> Create(DownstreamRoute route, IServiceDiscoveryProvider serviceProvider);
    public sealed virtual string get_Type();
}
public class Ocelot.LoadBalancer.LoadBalancers.CouldNotFindLoadBalancerCreator : Error {
    public CouldNotFindLoadBalancerCreator(string message);
}
public class Ocelot.LoadBalancer.LoadBalancers.DelegateInvokingLoadBalancerCreator`1 : object {
    private Func`3<DownstreamRoute, IServiceDiscoveryProvider, ILoadBalancer> _creatorFunc;
    public string Type { get; }
    public DelegateInvokingLoadBalancerCreator`1(Func`3<DownstreamRoute, IServiceDiscoveryProvider, ILoadBalancer> creatorFunc);
    public sealed virtual Response`1<ILoadBalancer> Create(DownstreamRoute route, IServiceDiscoveryProvider serviceProvider);
    public sealed virtual string get_Type();
}
public class Ocelot.LoadBalancer.LoadBalancers.ErrorInvokingLoadBalancerCreator : Error {
    public ErrorInvokingLoadBalancerCreator(Exception e);
}
public interface Ocelot.LoadBalancer.LoadBalancers.ILoadBalancer {
    public abstract virtual Task`1<Response`1<ServiceHostAndPort>> Lease(HttpContext httpContext);
    public abstract virtual void Release(ServiceHostAndPort hostAndPort);
}
public interface Ocelot.LoadBalancer.LoadBalancers.ILoadBalancerCreator {
    public string Type { get; }
    public abstract virtual Response`1<ILoadBalancer> Create(DownstreamRoute route, IServiceDiscoveryProvider serviceProvider);
    public abstract virtual string get_Type();
}
public interface Ocelot.LoadBalancer.LoadBalancers.ILoadBalancerFactory {
    public abstract virtual Response`1<ILoadBalancer> Get(DownstreamRoute route, ServiceProviderConfiguration config);
}
public interface Ocelot.LoadBalancer.LoadBalancers.ILoadBalancerHouse {
    public abstract virtual Response`1<ILoadBalancer> Get(DownstreamRoute route, ServiceProviderConfiguration config);
}
public class Ocelot.LoadBalancer.LoadBalancers.Lease : object {
    [CompilerGeneratedAttribute]
private ServiceHostAndPort <HostAndPort>k__BackingField;
    [CompilerGeneratedAttribute]
private int <Connections>k__BackingField;
    public ServiceHostAndPort HostAndPort { get; }
    public int Connections { get; }
    public Lease(ServiceHostAndPort hostAndPort, int connections);
    [CompilerGeneratedAttribute]
public ServiceHostAndPort get_HostAndPort();
    [CompilerGeneratedAttribute]
public int get_Connections();
}
public class Ocelot.LoadBalancer.LoadBalancers.LeastConnection : object {
    private Func`1<Task`1<List`1<Service>>> _services;
    private List`1<Lease> _leases;
    private string _serviceName;
    private static object SyncLock;
    public LeastConnection(Func`1<Task`1<List`1<Service>>> services, string serviceName);
    private static LeastConnection();
    [AsyncStateMachineAttribute("Ocelot.LoadBalancer.LoadBalancers.LeastConnection/<Lease>d__5")]
public sealed virtual Task`1<Response`1<ServiceHostAndPort>> Lease(HttpContext httpContext);
    public sealed virtual void Release(ServiceHostAndPort hostAndPort);
    private static Lease AddConnection(Lease lease);
    private Lease GetLeaseWithLeastConnections();
    private Response UpdateServices(List`1<Service> services);
}
public class Ocelot.LoadBalancer.LoadBalancers.LeastConnectionCreator : object {
    public string Type { get; }
    public sealed virtual Response`1<ILoadBalancer> Create(DownstreamRoute route, IServiceDiscoveryProvider serviceProvider);
    public sealed virtual string get_Type();
}
public class Ocelot.LoadBalancer.LoadBalancers.LoadBalancerFactory : object {
    private IServiceDiscoveryProviderFactory _serviceProviderFactory;
    private IEnumerable`1<ILoadBalancerCreator> _loadBalancerCreators;
    public LoadBalancerFactory(IServiceDiscoveryProviderFactory serviceProviderFactory, IEnumerable`1<ILoadBalancerCreator> loadBalancerCreators);
    public sealed virtual Response`1<ILoadBalancer> Get(DownstreamRoute route, ServiceProviderConfiguration config);
}
public class Ocelot.LoadBalancer.LoadBalancers.LoadBalancerHouse : object {
    private ILoadBalancerFactory _factory;
    private ConcurrentDictionary`2<string, ILoadBalancer> _loadBalancers;
    public LoadBalancerHouse(ILoadBalancerFactory factory);
    public sealed virtual Response`1<ILoadBalancer> Get(DownstreamRoute route, ServiceProviderConfiguration config);
    private Response`1<ILoadBalancer> GetResponse(DownstreamRoute route, ServiceProviderConfiguration config);
    private void AddLoadBalancer(string key, ILoadBalancer loadBalancer);
}
public class Ocelot.LoadBalancer.LoadBalancers.NoLoadBalancer : object {
    private Func`1<Task`1<List`1<Service>>> _services;
    public NoLoadBalancer(Func`1<Task`1<List`1<Service>>> services);
    [AsyncStateMachineAttribute("Ocelot.LoadBalancer.LoadBalancers.NoLoadBalancer/<Lease>d__2")]
public sealed virtual Task`1<Response`1<ServiceHostAndPort>> Lease(HttpContext httpContext);
    public sealed virtual void Release(ServiceHostAndPort hostAndPort);
}
public class Ocelot.LoadBalancer.LoadBalancers.NoLoadBalancerCreator : object {
    public string Type { get; }
    public sealed virtual Response`1<ILoadBalancer> Create(DownstreamRoute route, IServiceDiscoveryProvider serviceProvider);
    public sealed virtual string get_Type();
}
public class Ocelot.LoadBalancer.LoadBalancers.RoundRobin : object {
    private Func`1<Task`1<List`1<Service>>> _servicesDelegate;
    private object _lock;
    private int _last;
    public RoundRobin(Func`1<Task`1<List`1<Service>>> services);
    [AsyncStateMachineAttribute("Ocelot.LoadBalancer.LoadBalancers.RoundRobin/<Lease>d__4")]
public sealed virtual Task`1<Response`1<ServiceHostAndPort>> Lease(HttpContext httpContext);
    public sealed virtual void Release(ServiceHostAndPort hostAndPort);
}
public class Ocelot.LoadBalancer.LoadBalancers.RoundRobinCreator : object {
    public string Type { get; }
    public sealed virtual Response`1<ILoadBalancer> Create(DownstreamRoute route, IServiceDiscoveryProvider serviceProvider);
    public sealed virtual string get_Type();
}
public class Ocelot.LoadBalancer.LoadBalancers.ServicesAreEmptyError : Error {
    public ServicesAreEmptyError(string message);
}
public class Ocelot.LoadBalancer.LoadBalancers.ServicesAreNullError : Error {
    public ServicesAreNullError(string message);
}
public class Ocelot.LoadBalancer.LoadBalancers.StickySession : object {
    [CompilerGeneratedAttribute]
private ServiceHostAndPort <HostAndPort>k__BackingField;
    [CompilerGeneratedAttribute]
private DateTime <Expiry>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Key>k__BackingField;
    public ServiceHostAndPort HostAndPort { get; }
    public DateTime Expiry { get; }
    public string Key { get; }
    public StickySession(ServiceHostAndPort hostAndPort, DateTime expiry, string key);
    [CompilerGeneratedAttribute]
public ServiceHostAndPort get_HostAndPort();
    [CompilerGeneratedAttribute]
public DateTime get_Expiry();
    [CompilerGeneratedAttribute]
public string get_Key();
}
public class Ocelot.LoadBalancer.LoadBalancers.UnableToFindLoadBalancerError : Error {
    public UnableToFindLoadBalancerError(string message);
}
public class Ocelot.LoadBalancer.Middleware.LoadBalancingMiddleware : OcelotMiddleware {
    private RequestDelegate _next;
    private ILoadBalancerHouse _loadBalancerHouse;
    public LoadBalancingMiddleware(RequestDelegate next, IOcelotLoggerFactory loggerFactory, ILoadBalancerHouse loadBalancerHouse);
    [AsyncStateMachineAttribute("Ocelot.LoadBalancer.Middleware.LoadBalancingMiddleware/<Invoke>d__3")]
public Task Invoke(HttpContext httpContext);
}
[ExtensionAttribute]
public static class Ocelot.LoadBalancer.Middleware.LoadBalancingMiddlewareExtensions : object {
    [ExtensionAttribute]
public static IApplicationBuilder UseLoadBalancingMiddleware(IApplicationBuilder builder);
}
public interface Ocelot.Logging.IOcelotLogger {
    public abstract virtual void LogTrace(string message);
    public abstract virtual void LogTrace(Func`1<string> messageFactory);
    public abstract virtual void LogDebug(string message);
    public abstract virtual void LogDebug(Func`1<string> messageFactory);
    public abstract virtual void LogInformation(string message);
    public abstract virtual void LogInformation(Func`1<string> messageFactory);
    public abstract virtual void LogWarning(string message);
    public abstract virtual void LogWarning(Func`1<string> messageFactory);
    public abstract virtual void LogError(string message, Exception exception);
    public abstract virtual void LogError(Func`1<string> messageFactory, Exception exception);
    public abstract virtual void LogCritical(string message, Exception exception);
    public abstract virtual void LogCritical(Func`1<string> messageFactory, Exception exception);
}
public interface Ocelot.Logging.IOcelotLoggerFactory {
    public abstract virtual IOcelotLogger CreateLogger();
}
public interface Ocelot.Logging.ITracer {
    public abstract virtual void Event(HttpContext httpContext, string event);
    public abstract virtual Task`1<HttpResponseMessage> SendAsync(HttpRequestMessage request, CancellationToken cancellationToken, Action`1<string> addTraceIdToRepo, Func`3<HttpRequestMessage, CancellationToken, Task`1<HttpResponseMessage>> baseSendAsync);
}
public class Ocelot.Logging.OcelotDiagnosticListener : object {
    private IOcelotLogger _logger;
    private ITracer _tracer;
    public OcelotDiagnosticListener(IOcelotLoggerFactory factory, IServiceProvider serviceProvider);
    [DiagnosticNameAttribute("Microsoft.AspNetCore.MiddlewareAnalysis.MiddlewareStarting")]
public virtual void OnMiddlewareStarting(HttpContext httpContext, string name);
    [DiagnosticNameAttribute("Microsoft.AspNetCore.MiddlewareAnalysis.MiddlewareException")]
public virtual void OnMiddlewareException(Exception exception, string name);
    [DiagnosticNameAttribute("Microsoft.AspNetCore.MiddlewareAnalysis.MiddlewareFinished")]
public virtual void OnMiddlewareFinished(HttpContext httpContext, string name);
    private void Event(HttpContext httpContext, string event);
}
public class Ocelot.Logging.OcelotLogger : object {
    private ILogger _logger;
    private IRequestScopedDataRepository _scopedDataRepository;
    private Func`3<string, Exception, string> _func;
    public OcelotLogger(ILogger logger, IRequestScopedDataRepository scopedDataRepository);
    public sealed virtual void LogTrace(string message);
    public sealed virtual void LogTrace(Func`1<string> messageFactory);
    public sealed virtual void LogDebug(string message);
    public sealed virtual void LogDebug(Func`1<string> messageFactory);
    public sealed virtual void LogInformation(string message);
    public sealed virtual void LogInformation(Func`1<string> messageFactory);
    public sealed virtual void LogWarning(string message);
    public sealed virtual void LogWarning(Func`1<string> messageFactory);
    public sealed virtual void LogError(string message, Exception exception);
    public sealed virtual void LogError(Func`1<string> messageFactory, Exception exception);
    public sealed virtual void LogCritical(string message, Exception exception);
    public sealed virtual void LogCritical(Func`1<string> messageFactory, Exception exception);
    private string GetOcelotRequestId();
    private string GetOcelotPreviousRequestId();
    private void WriteLog(LogLevel logLevel, string message, Exception exception);
    private void WriteLog(LogLevel logLevel, Func`1<string> messageFactory, Exception exception);
    private void WriteLog(LogLevel logLevel, Func`1<string> messageFactory, string message, Exception exception);
}
public class Ocelot.Logging.OcelotLoggerFactory : object {
    private ILoggerFactory _loggerFactory;
    private IRequestScopedDataRepository _scopedDataRepository;
    public OcelotLoggerFactory(ILoggerFactory loggerFactory, IRequestScopedDataRepository scopedDataRepository);
    public sealed virtual IOcelotLogger CreateLogger();
}
[ExtensionAttribute]
public static class Ocelot.Metadata.DownstreamRouteExtensions : object {
    private static HashSet`1<string> TruthyValues;
    private static HashSet`1<string> FalsyValues;
    private static HashSet`1<Type> NumericTypes;
    private static DownstreamRouteExtensions();
    [ExtensionAttribute]
public static T GetMetadata(DownstreamRoute downstreamRoute, string key, T defaultValue, JsonSerializerOptions jsonSerializerOptions);
    private static object ConvertTo(Type targetType, string value, MetadataOptions metadataOptions, JsonSerializerOptions jsonSerializerOptions);
    private static object ConvertToNumericType(string value, Type targetType, IFormatProvider provider, NumberStyles numberStyle);
}
public class Ocelot.Middleware.BaseUrlFinder : object {
    private IConfiguration _config;
    public BaseUrlFinder(IConfiguration config);
    public sealed virtual string Find();
}
public class Ocelot.Middleware.ConfigurationMiddleware : OcelotMiddleware {
    private RequestDelegate _next;
    private IInternalConfigurationRepository _configRepo;
    public ConfigurationMiddleware(RequestDelegate next, IOcelotLoggerFactory loggerFactory, IInternalConfigurationRepository configRepo);
    [AsyncStateMachineAttribute("Ocelot.Middleware.ConfigurationMiddleware/<Invoke>d__3")]
public Task Invoke(HttpContext httpContext);
}
[ExtensionAttribute]
public static class Ocelot.Middleware.DownstreamContextMiddlewareExtensions : object {
    [ExtensionAttribute]
public static IApplicationBuilder UseDownstreamContextMiddleware(IApplicationBuilder builder);
}
public class Ocelot.Middleware.DownstreamResponse : object {
    private bool _disposedValue;
    private HttpResponseMessage _responseMessage;
    [CompilerGeneratedAttribute]
private HttpContent <Content>k__BackingField;
    [CompilerGeneratedAttribute]
private HttpStatusCode <StatusCode>k__BackingField;
    [CompilerGeneratedAttribute]
private List`1<Header> <Headers>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ReasonPhrase>k__BackingField;
    public HttpContent Content { get; }
    public HttpStatusCode StatusCode { get; }
    public List`1<Header> Headers { get; }
    public string ReasonPhrase { get; }
    public DownstreamResponse(HttpContent content, HttpStatusCode statusCode, List`1<Header> headers, string reasonPhrase);
    public DownstreamResponse(HttpResponseMessage response);
    public DownstreamResponse(HttpContent content, HttpStatusCode statusCode, IEnumerable`1<KeyValuePair`2<string, IEnumerable`1<string>>> headers, string reasonPhrase);
    [CompilerGeneratedAttribute]
public HttpContent get_Content();
    [CompilerGeneratedAttribute]
public HttpStatusCode get_StatusCode();
    [CompilerGeneratedAttribute]
public List`1<Header> get_Headers();
    [CompilerGeneratedAttribute]
public string get_ReasonPhrase();
    public sealed virtual void Dispose();
    protected virtual void Dispose(bool disposing);
}
public class Ocelot.Middleware.Header : object {
    [CompilerGeneratedAttribute]
private string <Key>k__BackingField;
    [CompilerGeneratedAttribute]
private IEnumerable`1<string> <Values>k__BackingField;
    public string Key { get; }
    public IEnumerable`1<string> Values { get; }
    public Header(string key, IEnumerable`1<string> values);
    [CompilerGeneratedAttribute]
public string get_Key();
    [CompilerGeneratedAttribute]
public IEnumerable`1<string> get_Values();
}
[ExtensionAttribute]
public static class Ocelot.Middleware.HttpItemsExtensions : object {
    [ExtensionAttribute]
public static void UpsertDownstreamRequest(IDictionary`2<object, object> input, DownstreamRequest downstreamRequest);
    [ExtensionAttribute]
public static void UpsertDownstreamResponse(IDictionary`2<object, object> input, DownstreamResponse downstreamResponse);
    [ExtensionAttribute]
public static void UpsertDownstreamRoute(IDictionary`2<object, object> input, DownstreamRoute downstreamRoute);
    [ExtensionAttribute]
public static void UpsertTemplatePlaceholderNameAndValues(IDictionary`2<object, object> input, List`1<PlaceholderNameAndValue> tPNV);
    [ExtensionAttribute]
public static void UpsertDownstreamRoute(IDictionary`2<object, object> input, DownstreamRouteHolder downstreamRoute);
    [ExtensionAttribute]
public static void UpsertErrors(IDictionary`2<object, object> input, List`1<Error> errors);
    [ExtensionAttribute]
public static void SetError(IDictionary`2<object, object> input, Error error);
    [ExtensionAttribute]
public static void SetIInternalConfiguration(IDictionary`2<object, object> input, IInternalConfiguration config);
    [ExtensionAttribute]
public static IInternalConfiguration IInternalConfiguration(IDictionary`2<object, object> input);
    [ExtensionAttribute]
public static List`1<Error> Errors(IDictionary`2<object, object> input);
    [ExtensionAttribute]
public static DownstreamRouteHolder DownstreamRouteHolder(IDictionary`2<object, object> input);
    [ExtensionAttribute]
public static List`1<PlaceholderNameAndValue> TemplatePlaceholderNameAndValues(IDictionary`2<object, object> input);
    [ExtensionAttribute]
public static DownstreamRequest DownstreamRequest(IDictionary`2<object, object> input);
    [ExtensionAttribute]
public static DownstreamResponse DownstreamResponse(IDictionary`2<object, object> input);
    [ExtensionAttribute]
public static DownstreamRoute DownstreamRoute(IDictionary`2<object, object> input);
    [ExtensionAttribute]
private static T Get(IDictionary`2<object, object> input, string key);
    [ExtensionAttribute]
private static void Upsert(IDictionary`2<object, object> input, string key, T value);
    [ExtensionAttribute]
private static bool DoesntExist(IDictionary`2<object, object> input, string key);
}
public interface Ocelot.Middleware.IBaseUrlFinder {
    public abstract virtual string Find();
}
public abstract class Ocelot.Middleware.OcelotMiddleware : object {
    [CompilerGeneratedAttribute]
private IOcelotLogger <Logger>k__BackingField;
    [CompilerGeneratedAttribute]
private string <MiddlewareName>k__BackingField;
    public IOcelotLogger Logger { get; }
    public string MiddlewareName { get; }
    protected OcelotMiddleware(IOcelotLogger logger);
    [CompilerGeneratedAttribute]
public IOcelotLogger get_Logger();
    [CompilerGeneratedAttribute]
public string get_MiddlewareName();
}
public class Ocelot.Middleware.OcelotMiddlewareConfigurationDelegate : MulticastDelegate {
    public OcelotMiddlewareConfigurationDelegate(object object, IntPtr method);
    public virtual Task Invoke(IApplicationBuilder builder);
    public virtual IAsyncResult BeginInvoke(IApplicationBuilder builder, AsyncCallback callback, object object);
    public virtual Task EndInvoke(IAsyncResult result);
}
[ExtensionAttribute]
public static class Ocelot.Middleware.OcelotMiddlewareExtensions : object {
    [AsyncStateMachineAttribute("Ocelot.Middleware.OcelotMiddlewareExtensions/<UseOcelot>d__0")]
[ExtensionAttribute]
public static Task`1<IApplicationBuilder> UseOcelot(IApplicationBuilder builder);
    [AsyncStateMachineAttribute("Ocelot.Middleware.OcelotMiddlewareExtensions/<UseOcelot>d__1")]
[ExtensionAttribute]
public static Task`1<IApplicationBuilder> UseOcelot(IApplicationBuilder builder, Action`1<OcelotPipelineConfiguration> pipelineConfiguration);
    [AsyncStateMachineAttribute("Ocelot.Middleware.OcelotMiddlewareExtensions/<UseOcelot>d__2")]
[ExtensionAttribute]
public static Task`1<IApplicationBuilder> UseOcelot(IApplicationBuilder builder, OcelotPipelineConfiguration pipelineConfiguration);
    [ExtensionAttribute]
public static Task`1<IApplicationBuilder> UseOcelot(IApplicationBuilder app, Action`2<IApplicationBuilder, OcelotPipelineConfiguration> builderAction);
    [AsyncStateMachineAttribute("Ocelot.Middleware.OcelotMiddlewareExtensions/<UseOcelot>d__4")]
[ExtensionAttribute]
public static Task`1<IApplicationBuilder> UseOcelot(IApplicationBuilder app, Action`2<IApplicationBuilder, OcelotPipelineConfiguration> builderAction, OcelotPipelineConfiguration configuration);
    private static IApplicationBuilder CreateOcelotPipeline(IApplicationBuilder builder, OcelotPipelineConfiguration pipelineConfiguration);
    [AsyncStateMachineAttribute("Ocelot.Middleware.OcelotMiddlewareExtensions/<CreateConfiguration>d__6")]
private static Task`1<IInternalConfiguration> CreateConfiguration(IApplicationBuilder builder);
    private static bool AdministrationApiInUse(IAdministrationPath adminPath);
    [AsyncStateMachineAttribute("Ocelot.Middleware.OcelotMiddlewareExtensions/<SetFileConfig>d__8")]
private static Task SetFileConfig(IFileConfigurationSetter fileConfigSetter, IOptionsMonitor`1<FileConfiguration> fileConfig);
    private static bool IsError(Response response);
    private static IInternalConfiguration GetOcelotConfigAndReturn(IInternalConfigurationRepository provider);
    private static void ThrowToStopOcelotStarting(Response config);
    private static void ConfigureDiagnosticListener(IApplicationBuilder builder);
}
public class Ocelot.Middleware.OcelotPipelineConfiguration : object {
    [CompilerGeneratedAttribute]
private Func`3<HttpContext, Func`1<Task>, Task> <PreErrorResponderMiddleware>k__BackingField;
    [CompilerGeneratedAttribute]
private Func`3<HttpContext, Func`1<Task>, Task> <PreAuthenticationMiddleware>k__BackingField;
    [CompilerGeneratedAttribute]
private Func`3<HttpContext, Func`1<Task>, Task> <AuthenticationMiddleware>k__BackingField;
    [CompilerGeneratedAttribute]
private Func`3<HttpContext, Func`1<Task>, Task> <PreAuthorizationMiddleware>k__BackingField;
    [CompilerGeneratedAttribute]
private Func`3<HttpContext, Func`1<Task>, Task> <AuthorizationMiddleware>k__BackingField;
    [CompilerGeneratedAttribute]
private Func`3<HttpContext, Func`1<Task>, Task> <PreQueryStringBuilderMiddleware>k__BackingField;
    [CompilerGeneratedAttribute]
private Dictionary`2<Func`2<HttpContext, bool>, Action`1<IApplicationBuilder>> <MapWhenOcelotPipeline>k__BackingField;
    public Func`3<HttpContext, Func`1<Task>, Task> PreErrorResponderMiddleware { get; public set; }
    public Func`3<HttpContext, Func`1<Task>, Task> PreAuthenticationMiddleware { get; public set; }
    public Func`3<HttpContext, Func`1<Task>, Task> AuthenticationMiddleware { get; public set; }
    public Func`3<HttpContext, Func`1<Task>, Task> PreAuthorizationMiddleware { get; public set; }
    public Func`3<HttpContext, Func`1<Task>, Task> AuthorizationMiddleware { get; public set; }
    public Func`3<HttpContext, Func`1<Task>, Task> PreQueryStringBuilderMiddleware { get; public set; }
    public Dictionary`2<Func`2<HttpContext, bool>, Action`1<IApplicationBuilder>> MapWhenOcelotPipeline { get; }
    [CompilerGeneratedAttribute]
public Func`3<HttpContext, Func`1<Task>, Task> get_PreErrorResponderMiddleware();
    [CompilerGeneratedAttribute]
public void set_PreErrorResponderMiddleware(Func`3<HttpContext, Func`1<Task>, Task> value);
    [CompilerGeneratedAttribute]
public Func`3<HttpContext, Func`1<Task>, Task> get_PreAuthenticationMiddleware();
    [CompilerGeneratedAttribute]
public void set_PreAuthenticationMiddleware(Func`3<HttpContext, Func`1<Task>, Task> value);
    [CompilerGeneratedAttribute]
public Func`3<HttpContext, Func`1<Task>, Task> get_AuthenticationMiddleware();
    [CompilerGeneratedAttribute]
public void set_AuthenticationMiddleware(Func`3<HttpContext, Func`1<Task>, Task> value);
    [CompilerGeneratedAttribute]
public Func`3<HttpContext, Func`1<Task>, Task> get_PreAuthorizationMiddleware();
    [CompilerGeneratedAttribute]
public void set_PreAuthorizationMiddleware(Func`3<HttpContext, Func`1<Task>, Task> value);
    [CompilerGeneratedAttribute]
public Func`3<HttpContext, Func`1<Task>, Task> get_AuthorizationMiddleware();
    [CompilerGeneratedAttribute]
public void set_AuthorizationMiddleware(Func`3<HttpContext, Func`1<Task>, Task> value);
    [CompilerGeneratedAttribute]
public Func`3<HttpContext, Func`1<Task>, Task> get_PreQueryStringBuilderMiddleware();
    [CompilerGeneratedAttribute]
public void set_PreQueryStringBuilderMiddleware(Func`3<HttpContext, Func`1<Task>, Task> value);
    [CompilerGeneratedAttribute]
public Dictionary`2<Func`2<HttpContext, bool>, Action`1<IApplicationBuilder>> get_MapWhenOcelotPipeline();
}
[ExtensionAttribute]
public static class Ocelot.Middleware.OcelotPipelineExtensions : object {
    [ExtensionAttribute]
public static RequestDelegate BuildOcelotPipeline(IApplicationBuilder app, OcelotPipelineConfiguration pipelineConfiguration);
    [ExtensionAttribute]
private static void UseIfNotNull(IApplicationBuilder builder, Func`3<HttpContext, Func`1<Task>, Task> middleware);
}
public class Ocelot.Middleware.UnauthenticatedError : Error {
    public UnauthenticatedError(string message);
}
public class Ocelot.Multiplexer.CouldNotFindAggregatorError : Error {
    public CouldNotFindAggregatorError(string aggregator);
}
public interface Ocelot.Multiplexer.IDefinedAggregator {
    public abstract virtual Task`1<DownstreamResponse> Aggregate(List`1<HttpContext> responses);
}
public interface Ocelot.Multiplexer.IDefinedAggregatorProvider {
    public abstract virtual Response`1<IDefinedAggregator> Get(Route route);
}
public class Ocelot.Multiplexer.InMemoryResponseAggregatorFactory : object {
    private UserDefinedResponseAggregator _userDefined;
    private IResponseAggregator _simple;
    public InMemoryResponseAggregatorFactory(IDefinedAggregatorProvider provider, IResponseAggregator responseAggregator);
    public sealed virtual IResponseAggregator Get(Route route);
}
public interface Ocelot.Multiplexer.IResponseAggregator {
    public abstract virtual Task Aggregate(Route route, HttpContext originalContext, List`1<HttpContext> downstreamResponses);
}
public interface Ocelot.Multiplexer.IResponseAggregatorFactory {
    public abstract virtual IResponseAggregator Get(Route route);
}
public class Ocelot.Multiplexer.MultiplexingMiddleware : OcelotMiddleware {
    private RequestDelegate _next;
    private IResponseAggregatorFactory _factory;
    private static string RequestIdString;
    public MultiplexingMiddleware(RequestDelegate next, IOcelotLoggerFactory loggerFactory, IResponseAggregatorFactory factory);
    [AsyncStateMachineAttribute("Ocelot.Multiplexer.MultiplexingMiddleware/<Invoke>d__4")]
public Task Invoke(HttpContext httpContext);
    private static bool ShouldProcessSingleRoute(HttpContext context, ICollection routes);
    protected virtual Task ProcessSingleRouteAsync(HttpContext context, DownstreamRoute route);
    [AsyncStateMachineAttribute("Ocelot.Multiplexer.MultiplexingMiddleware/<ProcessRoutesAsync>d__7")]
private Task ProcessRoutesAsync(HttpContext context, Route route);
    [AsyncStateMachineAttribute("Ocelot.Multiplexer.MultiplexingMiddleware/<ProcessMainRouteAsync>d__8")]
private Task`1<HttpContext> ProcessMainRouteAsync(HttpContext context, DownstreamRoute route);
    [AsyncStateMachineAttribute("Ocelot.Multiplexer.MultiplexingMiddleware/<ProcessRoutesWithRouteKeysAsync>d__9")]
protected virtual Task`1<HttpContext[]> ProcessRoutesWithRouteKeysAsync(HttpContext context, IEnumerable`1<DownstreamRoute> routes, IReadOnlyCollection`1<AggregateRouteConfig> routeKeysConfigs, HttpContext mainResponse);
    private Task MapResponsesAsync(HttpContext context, Route route, HttpContext mainResponseContext, IEnumerable`1<HttpContext> responsesContexts);
    private IEnumerable`1<Task`1<HttpContext>> ProcessRouteWithComplexAggregation(AggregateRouteConfig matchAdvancedAgg, JToken jObject, HttpContext httpContext, DownstreamRoute downstreamRoute);
    [AsyncStateMachineAttribute("Ocelot.Multiplexer.MultiplexingMiddleware/<ProcessRouteAsync>d__12")]
private Task`1<HttpContext> ProcessRouteAsync(HttpContext sourceContext, DownstreamRoute route, List`1<PlaceholderNameAndValue> placeholders);
    private static void CopyItemsToNewContext(HttpContext target, HttpContext source, List`1<PlaceholderNameAndValue> placeholders);
    [AsyncStateMachineAttribute("Ocelot.Multiplexer.MultiplexingMiddleware/<CreateThreadContextAsync>d__14")]
protected virtual Task`1<HttpContext> CreateThreadContextAsync(HttpContext source);
    protected virtual Task MapAsync(HttpContext httpContext, Route route, List`1<HttpContext> contexts);
    [AsyncStateMachineAttribute("Ocelot.Multiplexer.MultiplexingMiddleware/<CloneRequestBodyAsync>d__16")]
protected virtual Task`1<Stream> CloneRequestBodyAsync(HttpRequest request, CancellationToken aborted);
}
[ExtensionAttribute]
public static class Ocelot.Multiplexer.MultiplexingMiddlewareExtensions : object {
    [ExtensionAttribute]
public static IApplicationBuilder UseMultiplexingMiddleware(IApplicationBuilder builder);
}
public class Ocelot.Multiplexer.ServiceLocatorDefinedAggregatorProvider : object {
    private Dictionary`2<string, IDefinedAggregator> _aggregators;
    public ServiceLocatorDefinedAggregatorProvider(IServiceProvider services);
    public sealed virtual Response`1<IDefinedAggregator> Get(Route route);
}
public class Ocelot.Multiplexer.SimpleJsonResponseAggregator : object {
    [AsyncStateMachineAttribute("Ocelot.Multiplexer.SimpleJsonResponseAggregator/<Aggregate>d__0")]
public sealed virtual Task Aggregate(Route route, HttpContext originalContext, List`1<HttpContext> downstreamContexts);
    [AsyncStateMachineAttribute("Ocelot.Multiplexer.SimpleJsonResponseAggregator/<MapAggregateContent>d__1")]
private static Task MapAggregateContent(HttpContext originalContext, List`1<HttpContext> downstreamContexts);
    private static void MapAggregateError(HttpContext originalContext, HttpContext downstreamContext);
}
public class Ocelot.Multiplexer.UserDefinedResponseAggregator : object {
    private IDefinedAggregatorProvider _provider;
    public UserDefinedResponseAggregator(IDefinedAggregatorProvider provider);
    [AsyncStateMachineAttribute("Ocelot.Multiplexer.UserDefinedResponseAggregator/<Aggregate>d__2")]
public sealed virtual Task Aggregate(Route route, HttpContext originalContext, List`1<HttpContext> downstreamResponses);
}
public class Ocelot.PathManipulation.ChangeDownstreamPathTemplate : object {
    private IClaimsParser _claimsParser;
    public ChangeDownstreamPathTemplate(IClaimsParser claimsParser);
    public sealed virtual Response ChangeDownstreamPath(List`1<ClaimToThing> claimsToThings, IEnumerable`1<Claim> claims, DownstreamPathTemplate downstreamPathTemplate, List`1<PlaceholderNameAndValue> placeholders);
}
public interface Ocelot.PathManipulation.IChangeDownstreamPathTemplate {
    public abstract virtual Response ChangeDownstreamPath(List`1<ClaimToThing> claimsToThings, IEnumerable`1<Claim> claims, DownstreamPathTemplate downstreamPathTemplate, List`1<PlaceholderNameAndValue> placeholders);
}
public class Ocelot.QueryStrings.AddQueriesToRequest : object {
    private IClaimsParser _claimsParser;
    public AddQueriesToRequest(IClaimsParser claimsParser);
    public sealed virtual Response SetQueriesOnDownstreamRequest(List`1<ClaimToThing> claimsToThings, IEnumerable`1<Claim> claims, DownstreamRequest downstreamRequest);
    private static Dictionary`2<string, StringValues> ConvertQueryStringToDictionary(string queryString);
    private static string ConvertDictionaryToQueryString(Dictionary`2<string, StringValues> queryDictionary);
}
public interface Ocelot.QueryStrings.IAddQueriesToRequest {
    public abstract virtual Response SetQueriesOnDownstreamRequest(List`1<ClaimToThing> claimsToThings, IEnumerable`1<Claim> claims, DownstreamRequest downstreamRequest);
}
public class Ocelot.QueryStrings.Middleware.ClaimsToQueryStringMiddleware : OcelotMiddleware {
    private RequestDelegate _next;
    private IAddQueriesToRequest _addQueriesToRequest;
    public ClaimsToQueryStringMiddleware(RequestDelegate next, IOcelotLoggerFactory loggerFactory, IAddQueriesToRequest addQueriesToRequest);
    [AsyncStateMachineAttribute("Ocelot.QueryStrings.Middleware.ClaimsToQueryStringMiddleware/<Invoke>d__3")]
public Task Invoke(HttpContext httpContext);
}
[ExtensionAttribute]
public static class Ocelot.QueryStrings.Middleware.ClaimsToQueryStringMiddlewareExtensions : object {
    [ExtensionAttribute]
public static IApplicationBuilder UseClaimsToQueryStringMiddleware(IApplicationBuilder builder);
}
public class Ocelot.RateLimiting.ClientRequestIdentity : object {
    [CompilerGeneratedAttribute]
private string <ClientId>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Path>k__BackingField;
    [CompilerGeneratedAttribute]
private string <HttpVerb>k__BackingField;
    public string ClientId { get; }
    public string Path { get; }
    public string HttpVerb { get; }
    public ClientRequestIdentity(string clientId, string path, string httpverb);
    [CompilerGeneratedAttribute]
public string get_ClientId();
    [CompilerGeneratedAttribute]
public string get_Path();
    [CompilerGeneratedAttribute]
public string get_HttpVerb();
}
public class Ocelot.RateLimiting.DistributedCacheRateLimitStorage : object {
    private IDistributedCache _memoryCache;
    public DistributedCacheRateLimitStorage(IDistributedCache memoryCache);
    public sealed virtual void Set(string id, RateLimitCounter counter, TimeSpan expirationTime);
    public sealed virtual bool Exists(string id);
    public sealed virtual Nullable`1<RateLimitCounter> Get(string id);
    public sealed virtual void Remove(string id);
}
public interface Ocelot.RateLimiting.IRateLimiting {
    public abstract virtual string GetStorageKey(ClientRequestIdentity identity, RateLimitOptions options);
    public abstract virtual RateLimitHeaders GetHeaders(HttpContext context, ClientRequestIdentity identity, RateLimitOptions options);
    public abstract virtual RateLimitCounter ProcessRequest(ClientRequestIdentity identity, RateLimitOptions options);
    public abstract virtual RateLimitCounter Count(Nullable`1<RateLimitCounter> entry, RateLimitRule rule);
    public abstract virtual double RetryAfter(RateLimitCounter counter, RateLimitRule rule);
    public abstract virtual TimeSpan ToTimespan(string timespan);
}
public interface Ocelot.RateLimiting.IRateLimitStorage {
    public abstract virtual bool Exists(string id);
    public abstract virtual Nullable`1<RateLimitCounter> Get(string id);
    public abstract virtual void Remove(string id);
    public abstract virtual void Set(string id, RateLimitCounter counter, TimeSpan expirationTime);
}
public class Ocelot.RateLimiting.MemoryCacheRateLimitStorage : object {
    private IMemoryCache _memoryCache;
    public MemoryCacheRateLimitStorage(IMemoryCache memoryCache);
    public sealed virtual void Set(string id, RateLimitCounter counter, TimeSpan expirationTime);
    public sealed virtual bool Exists(string id);
    public sealed virtual Nullable`1<RateLimitCounter> Get(string id);
    public sealed virtual void Remove(string id);
}
public class Ocelot.RateLimiting.Middleware.RateLimitingMiddleware : OcelotMiddleware {
    private RequestDelegate _next;
    private IRateLimiting _limiter;
    public RateLimitingMiddleware(RequestDelegate next, IOcelotLoggerFactory factory, IRateLimiting limiter);
    [AsyncStateMachineAttribute("Ocelot.RateLimiting.Middleware.RateLimitingMiddleware/<Invoke>d__3")]
public Task Invoke(HttpContext httpContext);
    public virtual ClientRequestIdentity SetIdentity(HttpContext httpContext, RateLimitOptions option);
    public bool IsWhitelisted(ClientRequestIdentity requestIdentity, RateLimitOptions option);
    public virtual void LogBlockedRequest(HttpContext httpContext, ClientRequestIdentity identity, RateLimitCounter counter, RateLimitRule rule, DownstreamRoute downstreamRoute);
    public virtual DownstreamResponse ReturnQuotaExceededResponse(HttpContext httpContext, RateLimitOptions option, string retryAfter);
    private static string GetResponseMessage(RateLimitOptions option);
    private static Task SetRateLimitHeaders(object rateLimitHeaders);
}
[ExtensionAttribute]
public static class Ocelot.RateLimiting.Middleware.RateLimitingMiddlewareExtensions : object {
    [ExtensionAttribute]
public static IApplicationBuilder UseRateLimiting(IApplicationBuilder builder);
}
public class Ocelot.RateLimiting.QuotaExceededError : Error {
    public QuotaExceededError(string message, int httpStatusCode);
}
public class Ocelot.RateLimiting.RateLimitCounter : ValueType {
    [CompilerGeneratedAttribute]
private DateTime <StartedAt>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<DateTime> <ExceededAt>k__BackingField;
    [CompilerGeneratedAttribute]
private long <TotalRequests>k__BackingField;
    public DateTime StartedAt { get; }
    public Nullable`1<DateTime> ExceededAt { get; }
    public long TotalRequests { get; public set; }
    [JsonConstructorAttribute]
public RateLimitCounter(DateTime startedAt, Nullable`1<DateTime> exceededAt, long totalRequests);
    [IsReadOnlyAttribute]
[CompilerGeneratedAttribute]
public DateTime get_StartedAt();
    [IsReadOnlyAttribute]
[CompilerGeneratedAttribute]
public Nullable`1<DateTime> get_ExceededAt();
    [IsReadOnlyAttribute]
[CompilerGeneratedAttribute]
public long get_TotalRequests();
    [CompilerGeneratedAttribute]
public void set_TotalRequests(long value);
}
public class Ocelot.RateLimiting.RateLimitHeaders : object {
    [CompilerGeneratedAttribute]
private HttpContext <Context>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Limit>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Remaining>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Reset>k__BackingField;
    public HttpContext Context { get; }
    public string Limit { get; }
    public string Remaining { get; }
    public string Reset { get; }
    public RateLimitHeaders(HttpContext context, string limit, string remaining, string reset);
    [CompilerGeneratedAttribute]
public HttpContext get_Context();
    [CompilerGeneratedAttribute]
public string get_Limit();
    [CompilerGeneratedAttribute]
public string get_Remaining();
    [CompilerGeneratedAttribute]
public string get_Reset();
}
public class Ocelot.RateLimiting.RateLimiting : object {
    private IRateLimitStorage _storage;
    private static object ProcessLocker;
    public RateLimiting(IRateLimitStorage storage);
    private static RateLimiting();
    public virtual RateLimitCounter ProcessRequest(ClientRequestIdentity identity, RateLimitOptions options);
    public virtual RateLimitCounter Count(Nullable`1<RateLimitCounter> entry, RateLimitRule rule);
    public virtual RateLimitHeaders GetHeaders(HttpContext context, ClientRequestIdentity identity, RateLimitOptions options);
    public virtual string GetStorageKey(ClientRequestIdentity identity, RateLimitOptions options);
    public virtual double RetryAfter(RateLimitCounter counter, RateLimitRule rule);
    public virtual TimeSpan ToTimespan(string timespan);
}
public class Ocelot.Request.Creator.DownstreamRequestCreator : object {
    private IFrameworkDescription _framework;
    private static string DotNetFramework;
    public DownstreamRequestCreator(IFrameworkDescription framework);
    public sealed virtual DownstreamRequest Create(HttpRequestMessage request);
}
public interface Ocelot.Request.Creator.IDownstreamRequestCreator {
    public abstract virtual DownstreamRequest Create(HttpRequestMessage request);
}
public interface Ocelot.Request.Mapper.IRequestMapper {
    public abstract virtual HttpRequestMessage Map(HttpRequest request, DownstreamRoute downstreamRoute);
}
public class Ocelot.Request.Mapper.PayloadTooLargeError : Error {
    public PayloadTooLargeError(Exception exception);
}
public class Ocelot.Request.Mapper.RequestMapper : object {
    private static HashSet`1<string> UnsupportedHeaders;
    private static String[] ContentHeaders;
    private static RequestMapper();
    public sealed virtual HttpRequestMessage Map(HttpRequest request, DownstreamRoute downstreamRoute);
    private static HttpContent MapContent(HttpRequest request);
    private static void AddContentHeaders(HttpRequest request, HttpContent content);
    private static HttpMethod MapMethod(HttpRequest request, DownstreamRoute downstreamRoute);
    private static Uri MapUri(HttpRequest request);
    private static void MapHeaders(HttpRequest request, HttpRequestMessage requestMessage);
    private static bool IsSupportedHeader(KeyValuePair`2<string, StringValues> header);
}
public class Ocelot.Request.Mapper.StreamHttpContent : HttpContent {
    private static int DefaultBufferSize;
    public static long UnknownLength;
    private HttpContext _context;
    private long _contentLength;
    public StreamHttpContent(HttpContext context);
    protected virtual Task SerializeToStreamAsync(Stream stream, TransportContext context, CancellationToken cancellationToken);
    protected virtual Task SerializeToStreamAsync(Stream stream, TransportContext context);
    protected virtual bool TryComputeLength(Int64& length);
    protected virtual Task`1<Stream> CreateContentReadStreamAsync();
    [AsyncStateMachineAttribute("Ocelot.Request.Mapper.StreamHttpContent/<CopyAsync>d__9")]
private static Task CopyAsync(Stream input, Stream output, long announcedContentLength, bool autoFlush, CancellationToken cancellation);
}
public class Ocelot.Request.Mapper.UnmappableRequestError : Error {
    public UnmappableRequestError(Exception exception);
}
public class Ocelot.Request.Middleware.DownstreamRequest : object {
    private HttpRequestMessage _request;
    [CompilerGeneratedAttribute]
private string <Method>k__BackingField;
    [CompilerGeneratedAttribute]
private string <OriginalString>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Scheme>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Host>k__BackingField;
    [CompilerGeneratedAttribute]
private int <Port>k__BackingField;
    [CompilerGeneratedAttribute]
private string <AbsolutePath>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Query>k__BackingField;
    public HttpHeaders Headers { get; }
    public string Method { get; }
    public string OriginalString { get; }
    public string Scheme { get; public set; }
    public string Host { get; public set; }
    public int Port { get; public set; }
    public string AbsolutePath { get; public set; }
    public string Query { get; public set; }
    public bool HasContent { get; }
    public HttpRequestMessage Request { get; }
    public DownstreamRequest(HttpRequestMessage request);
    public HttpHeaders get_Headers();
    [CompilerGeneratedAttribute]
public string get_Method();
    [CompilerGeneratedAttribute]
public string get_OriginalString();
    [CompilerGeneratedAttribute]
public string get_Scheme();
    [CompilerGeneratedAttribute]
public void set_Scheme(string value);
    [CompilerGeneratedAttribute]
public string get_Host();
    [CompilerGeneratedAttribute]
public void set_Host(string value);
    [CompilerGeneratedAttribute]
public int get_Port();
    [CompilerGeneratedAttribute]
public void set_Port(int value);
    [CompilerGeneratedAttribute]
public string get_AbsolutePath();
    [CompilerGeneratedAttribute]
public void set_AbsolutePath(string value);
    [CompilerGeneratedAttribute]
public string get_Query();
    [CompilerGeneratedAttribute]
public void set_Query(string value);
    public bool get_HasContent();
    public HttpRequestMessage get_Request();
    public HttpRequestMessage ToHttpRequestMessage();
    public string ToUri();
    public virtual string ToString();
    private static string RemoveLeadingQuestionMark(string query);
}
public class Ocelot.Request.Middleware.DownstreamRequestInitialiserMiddleware : OcelotMiddleware {
    private RequestDelegate _next;
    private IRequestMapper _requestMapper;
    private IDownstreamRequestCreator _creator;
    public DownstreamRequestInitialiserMiddleware(RequestDelegate next, IOcelotLoggerFactory loggerFactory, IRequestMapper requestMapper, IDownstreamRequestCreator creator);
    [AsyncStateMachineAttribute("Ocelot.Request.Middleware.DownstreamRequestInitialiserMiddleware/<Invoke>d__4")]
public Task Invoke(HttpContext httpContext);
}
[ExtensionAttribute]
public static class Ocelot.Request.Middleware.HttpRequestBuilderMiddlewareExtensions : object {
    [ExtensionAttribute]
public static IApplicationBuilder UseDownstreamRequestInitialiser(IApplicationBuilder builder);
}
public class Ocelot.Requester.ConnectionToDownstreamServiceError : Error {
    public ConnectionToDownstreamServiceError(Exception exception);
}
public class Ocelot.Requester.DelegatingHandlerHandlerFactory : object {
    private ITracingHandlerFactory _tracingFactory;
    private IQoSFactory _qoSFactory;
    private IServiceProvider _serviceProvider;
    private IOcelotLogger _logger;
    public DelegatingHandlerHandlerFactory(ITracingHandlerFactory tracingFactory, IQoSFactory qoSFactory, IServiceProvider serviceProvider, IOcelotLoggerFactory loggerFactory);
    public sealed virtual Response`1<List`1<Func`1<DelegatingHandler>>> Get(DownstreamRoute downstreamRoute);
    private static IEnumerable`1<DelegatingHandler> SortByConfigOrder(DownstreamRoute request, IEnumerable`1<DelegatingHandler> routeSpecificHandlers);
    private static bool GlobalIsInHandlersConfig(DownstreamRoute request, GlobalDelegatingHandler handler);
}
public class Ocelot.Requester.GlobalDelegatingHandler : object {
    [CompilerGeneratedAttribute]
private DelegatingHandler <DelegatingHandler>k__BackingField;
    public DelegatingHandler DelegatingHandler { get; }
    public GlobalDelegatingHandler(DelegatingHandler delegatingHandler);
    [CompilerGeneratedAttribute]
public DelegatingHandler get_DelegatingHandler();
}
public class Ocelot.Requester.HttpExceptionToErrorMapper : object {
    private IDictionary`2<Type, Func`2<Exception, Error>> _mappers;
    private static int RequestEntityTooLarge;
    public HttpExceptionToErrorMapper(IServiceProvider serviceProvider);
    public sealed virtual Error Map(Exception exception);
}
public interface Ocelot.Requester.IDelegatingHandlerHandlerFactory {
    public abstract virtual Response`1<List`1<Func`1<DelegatingHandler>>> Get(DownstreamRoute downstreamRoute);
}
public interface Ocelot.Requester.IExceptionToErrorMapper {
    public abstract virtual Error Map(Exception exception);
}
public interface Ocelot.Requester.IHttpRequester {
    public abstract virtual Task`1<Response`1<HttpResponseMessage>> GetResponse(HttpContext httpContext);
}
public interface Ocelot.Requester.IMessageInvokerPool {
    public abstract virtual HttpMessageInvoker Get(DownstreamRoute downstreamRoute);
    public abstract virtual void Clear();
}
public interface Ocelot.Requester.ITracingHandler {
}
public interface Ocelot.Requester.ITracingHandlerFactory {
    public abstract virtual ITracingHandler Get();
}
public class Ocelot.Requester.MessageInvokerHttpRequester : object {
    private IOcelotLogger _logger;
    private IExceptionToErrorMapper _mapper;
    private IMessageInvokerPool _messageHandlerPool;
    public MessageInvokerHttpRequester(IOcelotLoggerFactory loggerFactory, IMessageInvokerPool messageHandlerPool, IExceptionToErrorMapper mapper);
    [AsyncStateMachineAttribute("Ocelot.Requester.MessageInvokerHttpRequester/<GetResponse>d__4")]
public sealed virtual Task`1<Response`1<HttpResponseMessage>> GetResponse(HttpContext httpContext);
}
public class Ocelot.Requester.MessageInvokerPool : object {
    private ConcurrentDictionary`2<MessageInvokerCacheKey, Lazy`1<HttpMessageInvoker>> _handlersPool;
    private IDelegatingHandlerHandlerFactory _handlerFactory;
    private IOcelotLogger _logger;
    public static int DefaultRequestTimeoutSeconds;
    private int _requestTimeoutSeconds;
    public int RequestTimeoutSeconds { get; public set; }
    public MessageInvokerPool(IDelegatingHandlerHandlerFactory handlerFactory, IOcelotLoggerFactory loggerFactory);
    public sealed virtual HttpMessageInvoker Get(DownstreamRoute downstreamRoute);
    public sealed virtual void Clear();
    public int get_RequestTimeoutSeconds();
    public void set_RequestTimeoutSeconds(int value);
    private HttpMessageInvoker CreateMessageInvoker(DownstreamRoute downstreamRoute);
    private HttpMessageHandler CreateHandler(DownstreamRoute downstreamRoute);
    [CompilerGeneratedAttribute]
private Lazy`1<HttpMessageInvoker> <Get>b__4_0(MessageInvokerCacheKey cacheKey);
}
public class Ocelot.Requester.Middleware.HttpRequesterMiddleware : OcelotMiddleware {
    private RequestDelegate _next;
    private IHttpRequester _requester;
    public HttpRequesterMiddleware(RequestDelegate next, IOcelotLoggerFactory loggerFactory, IHttpRequester requester);
    [AsyncStateMachineAttribute("Ocelot.Requester.Middleware.HttpRequesterMiddleware/<Invoke>d__3")]
public Task Invoke(HttpContext httpContext);
    private void CreateLogBasedOnResponse(Response`1<HttpResponseMessage> response);
}
[ExtensionAttribute]
public static class Ocelot.Requester.Middleware.HttpRequesterMiddlewareExtensions : object {
    [ExtensionAttribute]
public static IApplicationBuilder UseHttpRequesterMiddleware(IApplicationBuilder builder);
}
public class Ocelot.Requester.NoQosDelegatingHandler : DelegatingHandler {
}
public class Ocelot.Requester.OcelotHttpTracingHandler : DelegatingHandler {
    private ITracer _tracer;
    private IRequestScopedDataRepository _repo;
    public OcelotHttpTracingHandler(ITracer tracer, IRequestScopedDataRepository repo, HttpMessageHandler httpMessageHandler);
    protected virtual Task`1<HttpResponseMessage> SendAsync(HttpRequestMessage request, CancellationToken cancellationToken);
    [CompilerGeneratedAttribute]
private void <SendAsync>b__3_0(string x);
    [CompilerGeneratedAttribute]
private Task`1<HttpResponseMessage> <SendAsync>b__3_1(HttpRequestMessage r, CancellationToken c);
}
public interface Ocelot.Requester.QoS.IQoSFactory {
    public abstract virtual Response`1<DelegatingHandler> Get(DownstreamRoute request);
}
public class Ocelot.Requester.QoS.QoSFactory : object {
    private IServiceProvider _serviceProvider;
    private IOcelotLoggerFactory _ocelotLoggerFactory;
    private IHttpContextAccessor _contextAccessor;
    public QoSFactory(IServiceProvider serviceProvider, IHttpContextAccessor contextAccessor, IOcelotLoggerFactory ocelotLoggerFactory);
    public sealed virtual Response`1<DelegatingHandler> Get(DownstreamRoute request);
}
public class Ocelot.Requester.QoS.UnableToFindQoSProviderError : Error {
    public UnableToFindQoSProviderError(string message);
}
public class Ocelot.Requester.QosDelegatingHandlerDelegate : MulticastDelegate {
    public QosDelegatingHandlerDelegate(object object, IntPtr method);
    public virtual DelegatingHandler Invoke(DownstreamRoute route, IHttpContextAccessor contextAccessor, IOcelotLoggerFactory loggerFactory);
    public virtual IAsyncResult BeginInvoke(DownstreamRoute route, IHttpContextAccessor contextAccessor, IOcelotLoggerFactory loggerFactory, AsyncCallback callback, object object);
    public virtual DelegatingHandler EndInvoke(IAsyncResult result);
}
public class Ocelot.Requester.RequestCanceledError : Error {
    public RequestCanceledError(string message);
}
[ExtensionAttribute]
public static class Ocelot.Requester.ServiceCollectionExtensions : object {
    [ExtensionAttribute]
public static void AddOcelotMessageInvokerPool(IServiceCollection services);
}
public class Ocelot.Requester.TimeoutDelegatingHandler : DelegatingHandler {
    private TimeSpan _timeout;
    public TimeoutDelegatingHandler(TimeSpan timeout);
    [AsyncStateMachineAttribute("Ocelot.Requester.TimeoutDelegatingHandler/<SendAsync>d__2")]
protected virtual Task`1<HttpResponseMessage> SendAsync(HttpRequestMessage request, CancellationToken cancellationToken);
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
[DebuggerHiddenAttribute]
private Task`1<HttpResponseMessage> <>n__0(HttpRequestMessage request, CancellationToken cancellationToken);
}
public class Ocelot.Requester.TracingHandlerFactory : object {
    private ITracer _tracer;
    private IRequestScopedDataRepository _repo;
    public TracingHandlerFactory(IServiceProvider services, IRequestScopedDataRepository repo);
    public sealed virtual ITracingHandler Get();
}
public class Ocelot.Requester.UnableToCompleteRequestError : Error {
    public UnableToCompleteRequestError(Exception exception);
}
public static class Ocelot.RequestId.DefaultRequestIdKey : object {
    public static string Value;
}
public class Ocelot.RequestId.Middleware.RequestIdMiddleware : OcelotMiddleware {
    public static string RequestIdName;
    public static string PreviousRequestIdName;
    private RequestDelegate _next;
    private IRequestScopedDataRepository _requestScopedDataRepository;
    public RequestIdMiddleware(RequestDelegate next, IOcelotLoggerFactory loggerFactory, IRequestScopedDataRepository requestScopedDataRepository);
    [AsyncStateMachineAttribute("Ocelot.RequestId.Middleware.RequestIdMiddleware/<Invoke>d__5")]
public Task Invoke(HttpContext httpContext);
    private void SetOcelotRequestId(HttpContext httpContext);
    private static bool ShouldAddRequestId(RequestId requestId, HttpHeaders headers);
    private static bool RequestIdInHeaders(RequestId requestId, HttpHeaders headers);
    private static void AddRequestIdHeader(RequestId requestId, DownstreamRequest httpRequestMessage);
}
[ExtensionAttribute]
public static class Ocelot.RequestId.Middleware.RequestIdMiddlewareExtensions : object {
    [ExtensionAttribute]
public static IApplicationBuilder UseRequestIdMiddleware(IApplicationBuilder builder);
}
public class Ocelot.RequestId.RequestId : object {
    [CompilerGeneratedAttribute]
private string <RequestIdKey>k__BackingField;
    [CompilerGeneratedAttribute]
private string <RequestIdValue>k__BackingField;
    public string RequestIdKey { get; }
    public string RequestIdValue { get; }
    public RequestId(string requestIdKey, string requestIdValue);
    [CompilerGeneratedAttribute]
public string get_RequestIdKey();
    [CompilerGeneratedAttribute]
public string get_RequestIdValue();
}
public class Ocelot.Responder.ErrorsToHttpStatusCodeMapper : object {
    public sealed virtual int Map(List`1<Error> errors);
}
public class Ocelot.Responder.HttpContextResponder : object {
    private IRemoveOutputHeaders _removeOutputHeaders;
    public HttpContextResponder(IRemoveOutputHeaders removeOutputHeaders);
    [AsyncStateMachineAttribute("Ocelot.Responder.HttpContextResponder/<SetResponseOnHttpContext>d__2")]
public sealed virtual Task SetResponseOnHttpContext(HttpContext context, DownstreamResponse response);
    public sealed virtual void SetErrorResponseOnContext(HttpContext context, int statusCode);
    [AsyncStateMachineAttribute("Ocelot.Responder.HttpContextResponder/<SetErrorResponseOnContext>d__4")]
public sealed virtual Task SetErrorResponseOnContext(HttpContext context, DownstreamResponse response);
    private static void SetStatusCode(HttpContext context, int statusCode);
    private static void AddHeaderIfDoesntExist(HttpContext context, Header httpResponseHeader);
}
public interface Ocelot.Responder.IErrorsToHttpStatusCodeMapper {
    public abstract virtual int Map(List`1<Error> errors);
}
public interface Ocelot.Responder.IHttpResponder {
    public abstract virtual Task SetResponseOnHttpContext(HttpContext context, DownstreamResponse response);
    public abstract virtual void SetErrorResponseOnContext(HttpContext context, int statusCode);
    public abstract virtual Task SetErrorResponseOnContext(HttpContext context, DownstreamResponse response);
}
public class Ocelot.Responder.Middleware.ResponderMiddleware : OcelotMiddleware {
    private RequestDelegate _next;
    private IHttpResponder _responder;
    private IErrorsToHttpStatusCodeMapper _codeMapper;
    public ResponderMiddleware(RequestDelegate next, IHttpResponder responder, IOcelotLoggerFactory loggerFactory, IErrorsToHttpStatusCodeMapper codeMapper);
    [AsyncStateMachineAttribute("Ocelot.Responder.Middleware.ResponderMiddleware/<Invoke>d__4")]
public Task Invoke(HttpContext httpContext);
    [AsyncStateMachineAttribute("Ocelot.Responder.Middleware.ResponderMiddleware/<SetErrorResponse>d__5")]
private Task SetErrorResponse(HttpContext context, List`1<Error> errors);
}
[ExtensionAttribute]
public static class Ocelot.Responder.Middleware.ResponderMiddlewareExtensions : object {
    [ExtensionAttribute]
public static IApplicationBuilder UseResponderMiddleware(IApplicationBuilder builder);
}
public class Ocelot.Responses.ErrorResponse : Response {
    public ErrorResponse(Error error);
    public ErrorResponse(List`1<Error> errors);
}
public class Ocelot.Responses.ErrorResponse`1 : Response`1<T> {
    public ErrorResponse`1(Error error);
    public ErrorResponse`1(List`1<Error> errors);
}
public class Ocelot.Responses.OkResponse : Response {
}
public class Ocelot.Responses.OkResponse`1 : Response`1<T> {
    public OkResponse`1(T data);
}
public abstract class Ocelot.Responses.Response : object {
    [CompilerGeneratedAttribute]
private List`1<Error> <Errors>k__BackingField;
    public List`1<Error> Errors { get; }
    public bool IsError { get; }
    protected Response(List`1<Error> errors);
    [CompilerGeneratedAttribute]
public List`1<Error> get_Errors();
    public bool get_IsError();
}
public abstract class Ocelot.Responses.Response`1 : Response {
    [CompilerGeneratedAttribute]
private T <Data>k__BackingField;
    public T Data { get; }
    protected Response`1(T data);
    protected Response`1(List`1<Error> errors);
    [CompilerGeneratedAttribute]
public T get_Data();
}
public class Ocelot.Security.IPSecurity.IPSecurityPolicy : object {
    [AsyncStateMachineAttribute("Ocelot.Security.IPSecurity.IPSecurityPolicy/<Security>d__0")]
public sealed virtual Task`1<Response> Security(DownstreamRoute downstreamRoute, HttpContext httpContext);
}
public interface Ocelot.Security.ISecurityPolicy {
    public abstract virtual Task`1<Response> Security(DownstreamRoute downstreamRoute, HttpContext httpContext);
}
public class Ocelot.Security.Middleware.SecurityMiddleware : OcelotMiddleware {
    private RequestDelegate _next;
    private IEnumerable`1<ISecurityPolicy> _securityPolicies;
    public SecurityMiddleware(RequestDelegate next, IOcelotLoggerFactory loggerFactory, IEnumerable`1<ISecurityPolicy> securityPolicies);
    [AsyncStateMachineAttribute("Ocelot.Security.Middleware.SecurityMiddleware/<Invoke>d__3")]
public Task Invoke(HttpContext httpContext);
}
[ExtensionAttribute]
public static class Ocelot.Security.Middleware.SecurityMiddlewareExtensions : object {
    [ExtensionAttribute]
public static IApplicationBuilder UseSecurityMiddleware(IApplicationBuilder builder);
}
public class Ocelot.ServiceDiscovery.Configuration.ServiceFabricConfiguration : object {
    [CompilerGeneratedAttribute]
private string <ServiceName>k__BackingField;
    [CompilerGeneratedAttribute]
private string <HostName>k__BackingField;
    [CompilerGeneratedAttribute]
private int <Port>k__BackingField;
    public string ServiceName { get; }
    public string HostName { get; }
    public int Port { get; }
    public ServiceFabricConfiguration(string hostName, int port, string serviceName);
    [CompilerGeneratedAttribute]
public string get_ServiceName();
    [CompilerGeneratedAttribute]
public string get_HostName();
    [CompilerGeneratedAttribute]
public int get_Port();
}
public interface Ocelot.ServiceDiscovery.IServiceDiscoveryProviderFactory {
    public abstract virtual Response`1<IServiceDiscoveryProvider> Get(ServiceProviderConfiguration serviceConfig, DownstreamRoute route);
}
public class Ocelot.ServiceDiscovery.Providers.ConfigurationServiceProvider : object {
    private List`1<Service> _services;
    public ConfigurationServiceProvider(List`1<Service> services);
    [AsyncStateMachineAttribute("Ocelot.ServiceDiscovery.Providers.ConfigurationServiceProvider/<GetAsync>d__2")]
public sealed virtual Task`1<List`1<Service>> GetAsync();
}
public interface Ocelot.ServiceDiscovery.Providers.IServiceDiscoveryProvider {
    public abstract virtual Task`1<List`1<Service>> GetAsync();
}
public class Ocelot.ServiceDiscovery.Providers.ServiceFabricServiceDiscoveryProvider : object {
    private ServiceFabricConfiguration _configuration;
    public ServiceFabricServiceDiscoveryProvider(ServiceFabricConfiguration configuration);
    public sealed virtual Task`1<List`1<Service>> GetAsync();
}
public class Ocelot.ServiceDiscovery.ServiceDiscoveryFinderDelegate : MulticastDelegate {
    public ServiceDiscoveryFinderDelegate(object object, IntPtr method);
    public virtual IServiceDiscoveryProvider Invoke(IServiceProvider provider, ServiceProviderConfiguration config, DownstreamRoute route);
    public virtual IAsyncResult BeginInvoke(IServiceProvider provider, ServiceProviderConfiguration config, DownstreamRoute route, AsyncCallback callback, object object);
    public virtual IServiceDiscoveryProvider EndInvoke(IAsyncResult result);
}
public class Ocelot.ServiceDiscovery.ServiceDiscoveryProviderFactory : object {
    private IServiceProvider _provider;
    private ServiceDiscoveryFinderDelegate _delegates;
    private IOcelotLogger _logger;
    public ServiceDiscoveryProviderFactory(IOcelotLoggerFactory factory, IServiceProvider provider);
    public sealed virtual Response`1<IServiceDiscoveryProvider> Get(ServiceProviderConfiguration serviceConfig, DownstreamRoute route);
    private Response`1<IServiceDiscoveryProvider> GetServiceDiscoveryProvider(ServiceProviderConfiguration config, DownstreamRoute route);
}
public class Ocelot.ServiceDiscovery.UnableToFindServiceDiscoveryProviderError : Error {
    public UnableToFindServiceDiscoveryProviderError(string message);
}
public class Ocelot.Values.DownstreamPath : object {
    [CompilerGeneratedAttribute]
private string <Value>k__BackingField;
    public string Value { get; }
    public DownstreamPath(string value);
    [CompilerGeneratedAttribute]
public string get_Value();
}
public class Ocelot.Values.DownstreamPathTemplate : object {
    [CompilerGeneratedAttribute]
private string <Value>k__BackingField;
    public string Value { get; }
    public DownstreamPathTemplate(string value);
    [CompilerGeneratedAttribute]
public string get_Value();
    public virtual string ToString();
}
public class Ocelot.Values.Service : object {
    [CompilerGeneratedAttribute]
private string <Id>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Version>k__BackingField;
    [CompilerGeneratedAttribute]
private IEnumerable`1<string> <Tags>k__BackingField;
    [CompilerGeneratedAttribute]
private ServiceHostAndPort <HostAndPort>k__BackingField;
    public string Id { get; }
    public string Name { get; }
    public string Version { get; }
    public IEnumerable`1<string> Tags { get; }
    public ServiceHostAndPort HostAndPort { get; }
    public Service(string name, ServiceHostAndPort hostAndPort, string id, string version, IEnumerable`1<string> tags);
    [CompilerGeneratedAttribute]
public string get_Id();
    [CompilerGeneratedAttribute]
public string get_Name();
    [CompilerGeneratedAttribute]
public string get_Version();
    [CompilerGeneratedAttribute]
public IEnumerable`1<string> get_Tags();
    [CompilerGeneratedAttribute]
public ServiceHostAndPort get_HostAndPort();
}
public class Ocelot.Values.ServiceHostAndPort : object {
    [CompilerGeneratedAttribute]
private string <DownstreamHost>k__BackingField;
    [CompilerGeneratedAttribute]
private int <DownstreamPort>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Scheme>k__BackingField;
    public string DownstreamHost { get; }
    public int DownstreamPort { get; }
    public string Scheme { get; }
    public ServiceHostAndPort(string downstreamHost, int downstreamPort);
    public ServiceHostAndPort(string downstreamHost, int downstreamPort, string scheme);
    [CompilerGeneratedAttribute]
public string get_DownstreamHost();
    [CompilerGeneratedAttribute]
public int get_DownstreamPort();
    [CompilerGeneratedAttribute]
public string get_Scheme();
}
public class Ocelot.Values.UpstreamHeaderTemplate : object {
    [CompilerGeneratedAttribute]
private string <Template>k__BackingField;
    [CompilerGeneratedAttribute]
private string <OriginalValue>k__BackingField;
    [CompilerGeneratedAttribute]
private Regex <Pattern>k__BackingField;
    public string Template { get; }
    public string OriginalValue { get; }
    public Regex Pattern { get; }
    public UpstreamHeaderTemplate(string template, string originalValue);
    [CompilerGeneratedAttribute]
public string get_Template();
    [CompilerGeneratedAttribute]
public string get_OriginalValue();
    [CompilerGeneratedAttribute]
public Regex get_Pattern();
}
public class Ocelot.Values.UpstreamPathTemplate : object {
    [CompilerGeneratedAttribute]
private string <Template>k__BackingField;
    [CompilerGeneratedAttribute]
private int <Priority>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <ContainsQueryString>k__BackingField;
    [CompilerGeneratedAttribute]
private string <OriginalValue>k__BackingField;
    [CompilerGeneratedAttribute]
private Regex <Pattern>k__BackingField;
    public string Template { get; }
    public int Priority { get; }
    public bool ContainsQueryString { get; }
    public string OriginalValue { get; }
    public Regex Pattern { get; }
    public UpstreamPathTemplate(string template, int priority, bool containsQueryString, string originalValue);
    [CompilerGeneratedAttribute]
public string get_Template();
    [CompilerGeneratedAttribute]
public int get_Priority();
    [CompilerGeneratedAttribute]
public bool get_ContainsQueryString();
    [CompilerGeneratedAttribute]
public string get_OriginalValue();
    [CompilerGeneratedAttribute]
public Regex get_Pattern();
}
public class Ocelot.WebSockets.ClientWebSocketOptionsProxy : object {
    private ClientWebSocketOptions _real;
    public Version HttpVersion { get; public set; }
    public HttpVersionPolicy HttpVersionPolicy { get; public set; }
    public bool UseDefaultCredentials { get; public set; }
    public ICredentials Credentials { get; public set; }
    public IWebProxy Proxy { get; public set; }
    public X509CertificateCollection ClientCertificates { get; public set; }
    public RemoteCertificateValidationCallback RemoteCertificateValidationCallback { get; public set; }
    public CookieContainer Cookies { get; public set; }
    public TimeSpan KeepAliveInterval { get; public set; }
    public WebSocketDeflateOptions DangerousDeflateOptions { get; public set; }
    public bool CollectHttpResponseDetails { get; public set; }
    public ClientWebSocketOptionsProxy(ClientWebSocketOptions options);
    public sealed virtual Version get_HttpVersion();
    public sealed virtual void set_HttpVersion(Version value);
    public sealed virtual HttpVersionPolicy get_HttpVersionPolicy();
    public sealed virtual void set_HttpVersionPolicy(HttpVersionPolicy value);
    public sealed virtual bool get_UseDefaultCredentials();
    public sealed virtual void set_UseDefaultCredentials(bool value);
    public sealed virtual ICredentials get_Credentials();
    public sealed virtual void set_Credentials(ICredentials value);
    public sealed virtual IWebProxy get_Proxy();
    public sealed virtual void set_Proxy(IWebProxy value);
    public sealed virtual X509CertificateCollection get_ClientCertificates();
    public sealed virtual void set_ClientCertificates(X509CertificateCollection value);
    public sealed virtual RemoteCertificateValidationCallback get_RemoteCertificateValidationCallback();
    public sealed virtual void set_RemoteCertificateValidationCallback(RemoteCertificateValidationCallback value);
    public sealed virtual CookieContainer get_Cookies();
    public sealed virtual void set_Cookies(CookieContainer value);
    public sealed virtual TimeSpan get_KeepAliveInterval();
    public sealed virtual void set_KeepAliveInterval(TimeSpan value);
    public sealed virtual WebSocketDeflateOptions get_DangerousDeflateOptions();
    public sealed virtual void set_DangerousDeflateOptions(WebSocketDeflateOptions value);
    public sealed virtual bool get_CollectHttpResponseDetails();
    public sealed virtual void set_CollectHttpResponseDetails(bool value);
    public sealed virtual void AddSubProtocol(string subProtocol);
    public sealed virtual void SetBuffer(int receiveBufferSize, int sendBufferSize);
    public sealed virtual void SetBuffer(int receiveBufferSize, int sendBufferSize, ArraySegment`1<byte> buffer);
    public sealed virtual void SetRequestHeader(string headerName, string headerValue);
}
public class Ocelot.WebSockets.ClientWebSocketProxy : WebSocket {
    private ClientWebSocket _realService;
    private IClientWebSocketOptions _options;
    public IClientWebSocketOptions Options { get; }
    public Nullable`1<WebSocketCloseStatus> CloseStatus { get; }
    public string CloseStatusDescription { get; }
    public WebSocketState State { get; }
    public string SubProtocol { get; }
    public sealed virtual IClientWebSocketOptions get_Options();
    public sealed virtual Task ConnectAsync(Uri uri, CancellationToken cancellationToken);
    public virtual Nullable`1<WebSocketCloseStatus> get_CloseStatus();
    public virtual string get_CloseStatusDescription();
    public virtual WebSocketState get_State();
    public virtual string get_SubProtocol();
    public virtual void Abort();
    public virtual Task CloseAsync(WebSocketCloseStatus closeStatus, string statusDescription, CancellationToken cancellationToken);
    public virtual Task CloseOutputAsync(WebSocketCloseStatus closeStatus, string statusDescription, CancellationToken cancellationToken);
    public virtual void Dispose();
    public virtual Task`1<WebSocketReceiveResult> ReceiveAsync(ArraySegment`1<byte> buffer, CancellationToken cancellationToken);
    public virtual Task SendAsync(ArraySegment`1<byte> buffer, WebSocketMessageType messageType, bool endOfMessage, CancellationToken cancellationToken);
    public sealed virtual WebSocket ToWebSocket();
}
public interface Ocelot.WebSockets.IClientWebSocket {
    public IClientWebSocketOptions Options { get; }
    public Nullable`1<WebSocketCloseStatus> CloseStatus { get; }
    public string CloseStatusDescription { get; }
    public WebSocketState State { get; }
    public string SubProtocol { get; }
    public abstract virtual WebSocket ToWebSocket();
    public abstract virtual IClientWebSocketOptions get_Options();
    public abstract virtual Task ConnectAsync(Uri uri, CancellationToken cancellationToken);
    public abstract virtual Nullable`1<WebSocketCloseStatus> get_CloseStatus();
    public abstract virtual string get_CloseStatusDescription();
    public abstract virtual WebSocketState get_State();
    public abstract virtual string get_SubProtocol();
    public abstract virtual void Abort();
    public abstract virtual Task CloseAsync(WebSocketCloseStatus closeStatus, string statusDescription, CancellationToken cancellationToken);
    public abstract virtual Task CloseOutputAsync(WebSocketCloseStatus closeStatus, string statusDescription, CancellationToken cancellationToken);
    public abstract virtual void Dispose();
    public abstract virtual Task`1<WebSocketReceiveResult> ReceiveAsync(ArraySegment`1<byte> buffer, CancellationToken cancellationToken);
    public abstract virtual Task SendAsync(ArraySegment`1<byte> buffer, WebSocketMessageType messageType, bool endOfMessage, CancellationToken cancellationToken);
}
public interface Ocelot.WebSockets.IClientWebSocketOptions {
    public Version HttpVersion { get; public set; }
    public HttpVersionPolicy HttpVersionPolicy { get; public set; }
    public bool UseDefaultCredentials { get; public set; }
    public ICredentials Credentials { get; public set; }
    public IWebProxy Proxy { get; public set; }
    public X509CertificateCollection ClientCertificates { get; public set; }
    public RemoteCertificateValidationCallback RemoteCertificateValidationCallback { get; public set; }
    public CookieContainer Cookies { get; public set; }
    public TimeSpan KeepAliveInterval { get; public set; }
    public WebSocketDeflateOptions DangerousDeflateOptions { get; public set; }
    public bool CollectHttpResponseDetails { get; public set; }
    public abstract virtual Version get_HttpVersion();
    public abstract virtual void set_HttpVersion(Version value);
    public abstract virtual HttpVersionPolicy get_HttpVersionPolicy();
    public abstract virtual void set_HttpVersionPolicy(HttpVersionPolicy value);
    public abstract virtual void SetRequestHeader(string headerName, string headerValue);
    public abstract virtual bool get_UseDefaultCredentials();
    public abstract virtual void set_UseDefaultCredentials(bool value);
    public abstract virtual ICredentials get_Credentials();
    public abstract virtual void set_Credentials(ICredentials value);
    public abstract virtual IWebProxy get_Proxy();
    public abstract virtual void set_Proxy(IWebProxy value);
    public abstract virtual X509CertificateCollection get_ClientCertificates();
    public abstract virtual void set_ClientCertificates(X509CertificateCollection value);
    public abstract virtual RemoteCertificateValidationCallback get_RemoteCertificateValidationCallback();
    public abstract virtual void set_RemoteCertificateValidationCallback(RemoteCertificateValidationCallback value);
    public abstract virtual CookieContainer get_Cookies();
    public abstract virtual void set_Cookies(CookieContainer value);
    public abstract virtual void AddSubProtocol(string subProtocol);
    public abstract virtual TimeSpan get_KeepAliveInterval();
    public abstract virtual void set_KeepAliveInterval(TimeSpan value);
    public abstract virtual WebSocketDeflateOptions get_DangerousDeflateOptions();
    public abstract virtual void set_DangerousDeflateOptions(WebSocketDeflateOptions value);
    public abstract virtual void SetBuffer(int receiveBufferSize, int sendBufferSize);
    public abstract virtual void SetBuffer(int receiveBufferSize, int sendBufferSize, ArraySegment`1<byte> buffer);
    public abstract virtual bool get_CollectHttpResponseDetails();
    public abstract virtual void set_CollectHttpResponseDetails(bool value);
}
public interface Ocelot.WebSockets.IWebSocketsFactory {
    public abstract virtual IClientWebSocket CreateClient();
}
public class Ocelot.WebSockets.WebSocketsFactory : object {
    public sealed virtual IClientWebSocket CreateClient();
}
public class Ocelot.WebSockets.WebSocketsProxyMiddleware : OcelotMiddleware {
    private static String[] NotForwardedWebSocketHeaders;
    private static int DefaultWebSocketBufferSize;
    private RequestDelegate _next;
    private IWebSocketsFactory _factory;
    public static string IgnoredSslWarningFormat;
    public static string InvalidSchemeWarningFormat;
    public WebSocketsProxyMiddleware(IOcelotLoggerFactory loggerFactory, RequestDelegate next, IWebSocketsFactory factory);
    private static WebSocketsProxyMiddleware();
    [AsyncStateMachineAttribute("Ocelot.WebSockets.WebSocketsProxyMiddleware/<PumpWebSocket>d__7")]
private static Task PumpWebSocket(WebSocket source, WebSocket destination, int bufferSize, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Ocelot.WebSockets.WebSocketsProxyMiddleware/<Invoke>d__8")]
public Task Invoke(HttpContext httpContext);
    [AsyncStateMachineAttribute("Ocelot.WebSockets.WebSocketsProxyMiddleware/<Proxy>d__9")]
private Task Proxy(HttpContext context, DownstreamRequest request, DownstreamRoute route);
}
[ExtensionAttribute]
public static class Ocelot.WebSockets.WebSocketsProxyMiddlewareExtensions : object {
    [ExtensionAttribute]
public static IApplicationBuilder UseWebSocketsProxyMiddleware(IApplicationBuilder builder);
}
[GeneratedCodeAttribute("System.Text.RegularExpressions.Generator", "8.0.10.11423")]
internal class System.Text.RegularExpressions.Generated.<RegexGenerator_g>F1BA7626D4457BCED2507DA4E93526204DC1F0E42E79D8E87483AD76C12649386__PlaceholderRegex_1 : Regex {
    [NullableAttribute("1")]
internal static <RegexGenerator_g>F1BA7626D4457BCED2507DA4E93526204DC1F0E42E79D8E87483AD76C12649386__PlaceholderRegex_1 Instance;
    private static <RegexGenerator_g>F1BA7626D4457BCED2507DA4E93526204DC1F0E42E79D8E87483AD76C12649386__PlaceholderRegex_1();
}
[GeneratedCodeAttribute("System.Text.RegularExpressions.Generator", "8.0.10.11423")]
internal class System.Text.RegularExpressions.Generated.<RegexGenerator_g>F1BA7626D4457BCED2507DA4E93526204DC1F0E42E79D8E87483AD76C12649386__RegExPlaceholders_0 : Regex {
    [NullableAttribute("1")]
internal static <RegexGenerator_g>F1BA7626D4457BCED2507DA4E93526204DC1F0E42E79D8E87483AD76C12649386__RegExPlaceholders_0 Instance;
    private static <RegexGenerator_g>F1BA7626D4457BCED2507DA4E93526204DC1F0E42E79D8E87483AD76C12649386__RegExPlaceholders_0();
}
[GeneratedCodeAttribute("System.Text.RegularExpressions.Generator", "8.0.10.11423")]
internal class System.Text.RegularExpressions.Generated.<RegexGenerator_g>F1BA7626D4457BCED2507DA4E93526204DC1F0E42E79D8E87483AD76C12649386__SubConfigRegex_2 : Regex {
    [NullableAttribute("1")]
internal static <RegexGenerator_g>F1BA7626D4457BCED2507DA4E93526204DC1F0E42E79D8E87483AD76C12649386__SubConfigRegex_2 Instance;
    private static <RegexGenerator_g>F1BA7626D4457BCED2507DA4E93526204DC1F0E42E79D8E87483AD76C12649386__SubConfigRegex_2();
}
[GeneratedCodeAttribute("System.Text.RegularExpressions.Generator", "8.0.10.11423")]
internal static class System.Text.RegularExpressions.Generated.<RegexGenerator_g>F1BA7626D4457BCED2507DA4E93526204DC1F0E42E79D8E87483AD76C12649386__Utilities : object {
    internal static TimeSpan s_defaultTimeout;
    internal static bool s_hasTimeout;
    private static <RegexGenerator_g>F1BA7626D4457BCED2507DA4E93526204DC1F0E42E79D8E87483AD76C12649386__Utilities();
    internal static bool IsWordChar(char ch);
}
