[CompilerGeneratedAttribute]
[EmbeddedAttribute]
internal class Microsoft.CodeAnalysis.EmbeddedAttribute : Attribute {
}
public class Octokit.GraphQL.Connection : object {
    private static string DefaultMediaType;
    [CompilerGeneratedAttribute]
private static Uri <GithubApiUri>k__BackingField;
    [CompilerGeneratedAttribute]
private Uri <Uri>k__BackingField;
    [CompilerGeneratedAttribute]
private ICredentialStore <CredentialStore>k__BackingField;
    [CompilerGeneratedAttribute]
private HttpClient <HttpClient>k__BackingField;
    [CompilerGeneratedAttribute]
private MediaTypeWithQualityHeaderValue <Accept>k__BackingField;
    [CompilerGeneratedAttribute]
private ProductInfoHeaderValue <UserAgent>k__BackingField;
    public static Uri GithubApiUri { get; }
    public Uri Uri { get; }
    protected ICredentialStore CredentialStore { get; }
    protected HttpClient HttpClient { get; }
    private MediaTypeWithQualityHeaderValue Accept { get; }
    private ProductInfoHeaderValue UserAgent { get; }
    public Connection(ProductHeaderValue productInformation, string token);
    public Connection(ProductHeaderValue productInformation, Uri uri, string token);
    public Connection(ProductHeaderValue productInformation, ICredentialStore credentialStore);
    public Connection(ProductHeaderValue productInformation, Uri uri, ICredentialStore credentialStore);
    public Connection(ProductHeaderValue productInformation, ICredentialStore credentialStore, HttpClient httpClient);
    public Connection(ProductHeaderValue productInformation, Uri uri, ICredentialStore credentialStore, HttpClient httpClient);
    private static Connection();
    [CompilerGeneratedAttribute]
public static Uri get_GithubApiUri();
    [CompilerGeneratedAttribute]
public sealed virtual Uri get_Uri();
    [CompilerGeneratedAttribute]
protected ICredentialStore get_CredentialStore();
    [CompilerGeneratedAttribute]
protected HttpClient get_HttpClient();
    [CompilerGeneratedAttribute]
private MediaTypeWithQualityHeaderValue get_Accept();
    [CompilerGeneratedAttribute]
private ProductInfoHeaderValue get_UserAgent();
    [AsyncStateMachineAttribute("Octokit.GraphQL.Connection/<Run>d__25")]
public virtual Task`1<string> Run(string query, CancellationToken cancellationToken);
    private HttpRequestMessage CreateRequest(string token, string query);
}
[ExtensionAttribute]
public static class Octokit.GraphQL.ConnectionExtensions : object {
    [ExtensionAttribute]
public static Task`1<T> Run(IConnection connection, IQueryableValue`1<T> expression, CancellationToken cancellationToken);
    [ExtensionAttribute]
public static Task`1<IEnumerable`1<T>> Run(IConnection connection, IQueryableList`1<T> expression, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Octokit.GraphQL.ConnectionExtensions/<Run>d__2`1")]
[ExtensionAttribute]
public static Task`1<T> Run(IConnection connection, ICompiledQuery`1<T> query, Dictionary`2<string, object> variables, CancellationToken cancellationToken);
}
public class Octokit.GraphQL.Core.Arg`1 : ValueType {
    private bool isNullableVariable;
    [CompilerGeneratedAttribute]
private string <VariableName>k__BackingField;
    [CompilerGeneratedAttribute]
private T <Value>k__BackingField;
    public string VariableName { get; }
    public T Value { get; }
    private bool Octokit.GraphQL.Core.IArg.IsNullableVariable { get; }
    private Type Octokit.GraphQL.Core.IArg.Type { get; }
    private object Octokit.GraphQL.Core.IArg.Value { get; }
    public Arg`1(T value);
    public Arg`1(string variableName, bool isNullable);
    [CompilerGeneratedAttribute]
public sealed virtual string get_VariableName();
    [CompilerGeneratedAttribute]
public T get_Value();
    private sealed virtual override bool Octokit.GraphQL.Core.IArg.get_IsNullableVariable();
    private sealed virtual override Type Octokit.GraphQL.Core.IArg.get_Type();
    private sealed virtual override object Octokit.GraphQL.Core.IArg.get_Value();
    public static Arg`1<T> op_Implicit(T value);
    public static Arg`1<T> op_Implicit(Variable variable);
    public static Nullable`1<Arg`1<T>> op_Implicit(Variable variable);
}
internal class Octokit.GraphQL.Core.Builders.AliasedExpression : Expression {
    [CompilerGeneratedAttribute]
private Expression <Inner>k__BackingField;
    [CompilerGeneratedAttribute]
private MemberInfo <Alias>k__BackingField;
    public Expression Inner { get; }
    public MemberInfo Alias { get; }
    public AliasedExpression(Expression inner, MemberInfo alias);
    [CompilerGeneratedAttribute]
public Expression get_Inner();
    [CompilerGeneratedAttribute]
public MemberInfo get_Alias();
    public static Expression WrapIfNeeded(Expression inner, MemberInfo alias);
}
internal class Octokit.GraphQL.Core.Builders.AllPagesExpression : Expression {
    [CompilerGeneratedAttribute]
private MethodCallExpression <Method>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<int> <PageSize>k__BackingField;
    public MethodCallExpression Method { get; }
    public Nullable`1<int> PageSize { get; }
    public ExpressionType NodeType { get; }
    public Type Type { get; }
    public AllPagesExpression(MethodCallExpression method, Nullable`1<int> pageSize);
    [CompilerGeneratedAttribute]
public MethodCallExpression get_Method();
    [CompilerGeneratedAttribute]
public Nullable`1<int> get_PageSize();
    public virtual ExpressionType get_NodeType();
    public virtual Type get_Type();
}
public static class Octokit.GraphQL.Core.Builders.ExpressionCompiler : object {
    private static ConcurrentDictionary`2<object, Expression> sourceExpression;
    [CompilerGeneratedAttribute]
private static bool <IsUnitTesting>k__BackingField;
    public static bool IsUnitTesting { get; public set; }
    [CompilerGeneratedAttribute]
public static bool get_IsUnitTesting();
    [CompilerGeneratedAttribute]
public static void set_IsUnitTesting(bool value);
    public static T Compile(Expression`1<T> expression);
    public static Expression GetSourceExpression(object func);
}
internal static class Octokit.GraphQL.Core.Builders.JsonMethods : object {
    public static MethodInfo JTokenAnnotation;
    public static PropertyInfo JTokenIndexer;
    public static MethodInfo JTokenSelectToken;
    public static MethodInfo JTokenSelectTokens;
    public static MethodInfo JTokenToObject;
    private static JsonMethods();
    private static MethodInfo GetMethod(Type type, string name, Type[] parameters);
}
internal static class Octokit.GraphQL.Core.Builders.LinqMethods : object {
    public static MethodInfo SelectManyMethod;
    public static MethodInfo ToDictionaryMethod;
    public static MethodInfo ToListMethod;
    private static LinqMethods();
    private static MethodInfo GetMethodInfoOf(Expression`1<Func`1<T>> expression);
}
public class Octokit.GraphQL.Core.Builders.QueryBuilder : ExpressionVisitor {
    private static int MaxPageSize;
    private static string CannotSelectIQueryableListExceptionMessage;
    private static string CannotSelectIQueryableValueExceptionMessage;
    private static ParameterExpression RootDataParameter;
    private OperationDefinition root;
    private Expression rootExpression;
    private SyntaxTree syntax;
    private Dictionary`2<ParameterExpression, LambdaParameter> lambdaParameters;
    private List`1<ISubquery> subqueries;
    private Expression`1<Func`2<JObject, IEnumerable`1<JToken>>> parentIds;
    private Expression`1<Func`2<JObject, JToken>> pageInfo;
    private FragmentDefinition currentFragment;
    private Dictionary`2<string, LambdaExpression> fragmentExpressions;
    private static QueryBuilder();
    public ICompiledQuery`1<TResult> Build(IQueryableValue`1<TResult> query);
    public ICompiledQuery`1<IEnumerable`1<TResult>> Build(IQueryableList`1<TResult> query);
    private ISubquery BuildSubquery(Expression expression, Expression`1<Func`2<JObject, IEnumerable`1<JToken>>> parentIds, Expression`1<Func`2<JObject, IEnumerable`1<JToken>>> parentPageInfo);
    private Expression ToFinalList(Expression expression, Type type);
    protected virtual Expression VisitBinary(BinaryExpression node);
    protected virtual Expression VisitConstant(ConstantExpression node);
    protected virtual Expression VisitConditional(ConditionalExpression node);
    protected virtual Expression VisitExtension(Expression node);
    protected virtual Expression VisitLambda(Expression`1<T> node);
    protected virtual Expression VisitMember(MemberExpression node);
    protected virtual MemberAssignment VisitMemberAssignment(MemberAssignment node);
    protected virtual Expression VisitMethodCall(MethodCallExpression node);
    protected virtual Expression VisitNew(NewExpression node);
    protected virtual Expression VisitNewArray(NewArrayExpression node);
    protected virtual Expression VisitParameter(ParameterExpression node);
    protected virtual Expression VisitUnary(UnaryExpression node);
    private void Initialize();
    private Expression VisitMember(MemberExpression node, MemberInfo alias);
    private Expression VisitUnary(UnaryExpression node, MemberInfo alias);
    private Expression`1<Func`2<JObject, IEnumerable`1<JToken>>> CreatePageInfoExpression();
    private static Expression`1<Func`2<JObject, JToken>> CreateSelectTokenExpression(IEnumerable`1<string> selectors);
    private Expression`1<Func`2<JObject, IEnumerable`1<JToken>>> CreateSelectTokensExpression(IEnumerable`1<string> selectors);
    [IteratorStateMachineAttribute("Octokit.GraphQL.Core.Builders.QueryBuilder/<VisitMethodArguments>d__35")]
private IEnumerable`1<Expression> VisitMethodArguments(MethodInfo method, ReadOnlyCollection`1<Expression> arguments);
    private Expression VisitMethodCall(MethodCallExpression node, MemberInfo alias);
    private Expression RewriteValueExtension(MethodCallExpression expression, MemberInfo alias);
    private LambdaExpression VisitFragment(IFragment fragment);
    private Expression RewriteListExtension(MethodCallExpression expression, MemberInfo alias);
    private Expression RewriteInterfaceExtension(MethodCallExpression expression, MemberInfo alias);
    private Expression RewritePagingConnectionExtensions(MethodCallExpression expression);
    private Expression RewriteUnionSwitch(MethodCallExpression expression);
    private void BuildUnionSwitchCases(MethodCallExpression body, Dictionary`2<string, Expression> result);
    private Expression VisitQueryMethod(MethodCallExpression node, MemberInfo alias);
    private void VisitQueryMethodArguments(ParameterInfo[] parameters, ReadOnlyCollection`1<Expression> arguments);
    private FieldSelection AddIdSelection(ISelectionSet set);
    private ISubquery AddSubquery(MethodCallExpression expression, MethodCallExpression selector, Expression pageInfoSelector, int pageSize);
    private MethodCallExpression CreateGetQueryContextExpression();
    private Expression CreateNodeQuery(MethodCallExpression expression, MethodCallExpression selector, int pageSize);
    private MethodCallExpression RewritePagingMethodCall(MethodCallExpression methodCall, Expression instance, int pageSize);
    private object EvaluateValue(Expression expression);
    private IEnumerable`1<ParameterExpression> RewriteParameters(IEnumerable`1<ParameterExpression> parameters);
    private Expression BookmarkAndVisit(Expression left);
    private static Type GetEnumerableItemType(Type type);
    private static Expression GetObject(Expression expression);
    private static Type GetQueryableListItemType(Type type);
    private ISelectionSet GetSelectionSet(ParameterExpression parameter);
    private static bool ExpressionWasRewritten(Expression oldExpression, Expression newExpression);
    private static bool IsNullConstant(Expression expression);
    private static bool IsQueryableValue(Type type);
    private static bool IsQueryableValueMember(Expression expression);
    private static bool IsQueryableValueMember(MemberInfo member);
    private static bool IsUnion(Type type);
    private static bool IsUnionSwitch(MemberInfo member);
    private static FieldSelection PageInfoSelection();
    [CompilerGeneratedAttribute]
internal static LambdaExpression <RewriteUnionSwitch>g__CastInitializer|42_0(Expression initializer, Type type);
}
[ExtensionAttribute]
public static class Octokit.GraphQL.Core.Builders.QueryEntityBuilders : object {
    [ExtensionAttribute]
public static IQueryableList`1<TValue> CreateMethodCall(TObject o, Expression`1<Func`2<TObject, IQueryableList`1<TValue>>> selector);
    [ExtensionAttribute]
public static IQueryableValue`1<TValue> CreateMethodCall(TObject o, Expression`1<Func`2<TObject, IQueryableValue`1<TValue>>> selector);
    [ExtensionAttribute]
public static IEnumerable`1<TValue> CreateMethodCall(TObject o, Expression`1<Func`2<TObject, IEnumerable`1<TValue>>> selector);
    [ExtensionAttribute]
public static TValue CreateMethodCall(TObject o, Expression`1<Func`2<TObject, TValue>> selector, Func`2<Expression, TValue> create);
    [ExtensionAttribute]
public static TValue CreateProperty(TObject o, Expression`1<Func`2<TObject, TValue>> selector, Func`2<Expression, TValue> create);
    [ExtensionAttribute]
public static IQueryableList`1<TValue> CreateProperty(TObject o, Expression`1<Func`2<TObject, IQueryableList`1<TValue>>> selector);
}
public static class Octokit.GraphQL.Core.Builders.Rewritten : object {
}
internal class Octokit.GraphQL.Core.Builders.SubqueryExpression : Expression {
    [CompilerGeneratedAttribute]
private MethodCallExpression <MethodCall>k__BackingField;
    [CompilerGeneratedAttribute]
private ISubquery <Subquery>k__BackingField;
    public MethodCallExpression MethodCall { get; }
    public ISubquery Subquery { get; }
    public ExpressionType NodeType { get; }
    public Type Type { get; }
    public SubqueryExpression(ISubquery subquery, MethodCallExpression methodCall);
    [CompilerGeneratedAttribute]
public MethodCallExpression get_MethodCall();
    [CompilerGeneratedAttribute]
public ISubquery get_Subquery();
    public virtual ExpressionType get_NodeType();
    public virtual Type get_Type();
}
internal class Octokit.GraphQL.Core.Builders.SubqueryPagerExpression : Expression {
    [CompilerGeneratedAttribute]
private MethodCallExpression <MethodCall>k__BackingField;
    public MethodCallExpression MethodCall { get; }
    public ExpressionType NodeType { get; }
    public Type Type { get; }
    public SubqueryPagerExpression(MethodCallExpression methodCall);
    [CompilerGeneratedAttribute]
public MethodCallExpression get_MethodCall();
    public virtual ExpressionType get_NodeType();
    public virtual Type get_Type();
}
public class Octokit.GraphQL.Core.Deserializers.ResponseDeserializer : object {
    public JObject Deserialize(string data);
    public TResult Deserialize(SimpleQuery`1<TResult> query, string data);
    public TResult Deserialize(SimpleQuery`1<TResult> query, JObject data);
    public TResult Deserialize(Func`2<JObject, TResult> deserialize, string data);
    public TResult Deserialize(Func`2<JObject, TResult> deserialize, JObject data);
    private Exception DeserializeExceptions(JArray errors);
    private Exception DeserializeException(JToken error);
    [CompilerGeneratedAttribute]
private Exception <DeserializeExceptions>b__5_0(JToken x);
}
public class Octokit.GraphQL.Core.Deserializers.ResponseDeserializerException : GraphQLException {
    [CompilerGeneratedAttribute]
private int <Line>k__BackingField;
    [CompilerGeneratedAttribute]
private int <Column>k__BackingField;
    public int Line { get; }
    public int Column { get; }
    public ResponseDeserializerException(string message, int line, int column);
    [CompilerGeneratedAttribute]
public int get_Line();
    [CompilerGeneratedAttribute]
public int get_Column();
}
internal class Octokit.GraphQL.Core.Disposable : object {
    private Action action;
    private Disposable(Action action);
    public static IDisposable Create(Action action);
    public sealed virtual void Dispose();
}
public class Octokit.GraphQL.Core.GraphQLException : Exception {
    public GraphQLException(string message);
}
public class Octokit.GraphQL.Core.GraphQLIdentifierAttribute : Attribute {
    [CompilerGeneratedAttribute]
private string <Identifier>k__BackingField;
    public string Identifier { get; }
    public GraphQLIdentifierAttribute(string identifier);
    [CompilerGeneratedAttribute]
public string get_Identifier();
}
internal interface Octokit.GraphQL.Core.IArg {
    public bool IsNullableVariable { get; }
    public Type Type { get; }
    public string VariableName { get; }
    public object Value { get; }
    public abstract virtual bool get_IsNullableVariable();
    public abstract virtual Type get_Type();
    public abstract virtual string get_VariableName();
    public abstract virtual object get_Value();
}
public interface Octokit.GraphQL.Core.IMutation {
}
public class Octokit.GraphQL.Core.Introspection.Directive : QueryableValue`1<Directive> {
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Description>k__BackingField;
    [CompilerGeneratedAttribute]
private DirectiveLocation <Locations>k__BackingField;
    public string Name { get; }
    public string Description { get; }
    public DirectiveLocation Locations { get; }
    public IQueryableList`1<InputValue> Args { get; }
    public Directive(Expression expression);
    [CompilerGeneratedAttribute]
public string get_Name();
    [CompilerGeneratedAttribute]
public string get_Description();
    [CompilerGeneratedAttribute]
public DirectiveLocation get_Locations();
    public IQueryableList`1<InputValue> get_Args();
}
[JsonConverterAttribute("Newtonsoft.Json.Converters.StringEnumConverter")]
public enum Octokit.GraphQL.Core.Introspection.DirectiveLocation : Enum {
    public int value__;
    [EnumMemberAttribute]
public static DirectiveLocation Query;
    [EnumMemberAttribute]
public static DirectiveLocation Mutation;
    [EnumMemberAttribute]
public static DirectiveLocation Field;
    [EnumMemberAttribute]
public static DirectiveLocation FragmentDefinition;
    [EnumMemberAttribute]
public static DirectiveLocation FragmentSpread;
    [EnumMemberAttribute]
public static DirectiveLocation InlineFragment;
}
public class Octokit.GraphQL.Core.Introspection.EnumValue : QueryableValue`1<EnumValue> {
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Description>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsDeprecated>k__BackingField;
    [CompilerGeneratedAttribute]
private string <DeprecationReason>k__BackingField;
    public string Name { get; }
    public string Description { get; }
    public bool IsDeprecated { get; }
    public string DeprecationReason { get; }
    public EnumValue(Expression expression);
    [CompilerGeneratedAttribute]
public string get_Name();
    [CompilerGeneratedAttribute]
public string get_Description();
    [CompilerGeneratedAttribute]
public bool get_IsDeprecated();
    [CompilerGeneratedAttribute]
public string get_DeprecationReason();
    internal static EnumValue Create(Expression expression);
}
public class Octokit.GraphQL.Core.Introspection.Field : QueryableValue`1<Field> {
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Description>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsDeprecated>k__BackingField;
    [CompilerGeneratedAttribute]
private string <DeprecationReason>k__BackingField;
    public string Name { get; }
    public string Description { get; }
    public IQueryableList`1<InputValue> Args { get; }
    public SchemaType Type { get; }
    public bool IsDeprecated { get; }
    public string DeprecationReason { get; }
    public Field(Expression expression);
    [CompilerGeneratedAttribute]
public string get_Name();
    [CompilerGeneratedAttribute]
public string get_Description();
    public IQueryableList`1<InputValue> get_Args();
    public SchemaType get_Type();
    [CompilerGeneratedAttribute]
public bool get_IsDeprecated();
    [CompilerGeneratedAttribute]
public string get_DeprecationReason();
}
public class Octokit.GraphQL.Core.Introspection.InputValue : QueryableValue`1<InputValue> {
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Description>k__BackingField;
    [CompilerGeneratedAttribute]
private string <DefaultValue>k__BackingField;
    public string Name { get; }
    public string Description { get; }
    public SchemaType Type { get; }
    public string DefaultValue { get; }
    public InputValue(Expression expression);
    [CompilerGeneratedAttribute]
public string get_Name();
    [CompilerGeneratedAttribute]
public string get_Description();
    public SchemaType get_Type();
    [CompilerGeneratedAttribute]
public string get_DefaultValue();
}
public class Octokit.GraphQL.Core.Introspection.IntrospectionQuery : QueryableValue`1<IntrospectionQuery> {
    [GraphQLIdentifierAttribute("__schema")]
public Schema Schema { get; }
    public Schema get_Schema();
}
public class Octokit.GraphQL.Core.Introspection.Schema : QueryableValue`1<Schema> {
    [CompilerGeneratedAttribute]
private Schema <Value>k__BackingField;
    public IQueryableList`1<SchemaType> Types { get; }
    public SchemaType QueryType { get; }
    public SchemaType MutationType { get; }
    public IQueryableList`1<Directive> Directives { get; }
    public Schema Value { get; }
    public Schema(Expression expression);
    public IQueryableList`1<SchemaType> get_Types();
    public SchemaType get_QueryType();
    public SchemaType get_MutationType();
    public IQueryableList`1<Directive> get_Directives();
    [CompilerGeneratedAttribute]
public Schema get_Value();
    internal static Schema Create(Expression expression);
}
public class Octokit.GraphQL.Core.Introspection.SchemaType : QueryableValue`1<SchemaType> {
    [CompilerGeneratedAttribute]
private TypeKind <Kind>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Description>k__BackingField;
    public TypeKind Kind { get; }
    public string Name { get; }
    public string Description { get; }
    public IQueryableList`1<SchemaType> Interfaces { get; }
    public IQueryableList`1<SchemaType> PossibleTypes { get; }
    public IQueryableList`1<InputValue> InputFields { get; }
    public SchemaType OfType { get; }
    public SchemaType(Expression expression);
    [CompilerGeneratedAttribute]
public TypeKind get_Kind();
    [CompilerGeneratedAttribute]
public string get_Name();
    [CompilerGeneratedAttribute]
public string get_Description();
    public IQueryableList`1<SchemaType> get_Interfaces();
    public IQueryableList`1<SchemaType> get_PossibleTypes();
    public IQueryableList`1<InputValue> get_InputFields();
    public SchemaType get_OfType();
    public IQueryableList`1<Field> Fields(bool includeDeprecated);
    public IQueryableList`1<EnumValue> EnumValues(bool includeDeprecated);
    internal static SchemaType Create(Expression expression);
}
[JsonConverterAttribute("Newtonsoft.Json.Converters.StringEnumConverter")]
public enum Octokit.GraphQL.Core.Introspection.TypeKind : Enum {
    public int value__;
    [EnumMemberAttribute]
public static TypeKind Scalar;
    [EnumMemberAttribute]
public static TypeKind Object;
    [EnumMemberAttribute]
public static TypeKind Union;
    [EnumMemberAttribute]
public static TypeKind Interface;
    [EnumMemberAttribute]
public static TypeKind Enum;
    [EnumMemberAttribute]
public static TypeKind InputObject;
    [EnumMemberAttribute]
public static TypeKind List;
    [EnumMemberAttribute]
public static TypeKind NonNull;
}
public interface Octokit.GraphQL.Core.IPageInfo {
    public string EndCursor { get; }
    public bool HasNextPage { get; }
    public abstract virtual string get_EndCursor();
    public abstract virtual bool get_HasNextPage();
}
public interface Octokit.GraphQL.Core.IPagingConnection {
    public IPageInfo PageInfo { get; }
    public abstract virtual IPageInfo get_PageInfo();
}
public interface Octokit.GraphQL.Core.IPagingConnection`1 {
    public IQueryableList`1<TNode> Nodes { get; }
    public abstract virtual IQueryableList`1<TNode> get_Nodes();
}
public interface Octokit.GraphQL.Core.IQuery {
}
public interface Octokit.GraphQL.Core.IQueryableInterface {
}
public interface Octokit.GraphQL.Core.IQueryableList {
    public Expression Expression { get; }
    public abstract virtual Expression get_Expression();
}
public interface Octokit.GraphQL.Core.IQueryableList`1 {
}
public interface Octokit.GraphQL.Core.IQueryableValue {
    public Expression Expression { get; }
    public abstract virtual Expression get_Expression();
}
public interface Octokit.GraphQL.Core.IQueryableValue`1 {
}
public interface Octokit.GraphQL.Core.IQueryRunner {
    public object Result { get; }
    public abstract virtual object get_Result();
    public abstract virtual Task`1<bool> RunPage(CancellationToken cancellationToken);
}
public interface Octokit.GraphQL.Core.IQueryRunner`1 {
    public TResult Result { get; }
    public abstract virtual TResult get_Result();
}
public interface Octokit.GraphQL.Core.ISubquery {
    public Func`2<JObject, IEnumerable`1<JToken>> ParentIds { get; }
    public Func`2<JObject, JToken> PageInfo { get; }
    public Func`2<JObject, IEnumerable`1<JToken>> ParentPageInfo { get; }
    public abstract virtual Func`2<JObject, IEnumerable`1<JToken>> get_ParentIds();
    public abstract virtual Func`2<JObject, JToken> get_PageInfo();
    public abstract virtual Func`2<JObject, IEnumerable`1<JToken>> get_ParentPageInfo();
    public abstract virtual IQueryRunner Start(IConnection connection, string id, string after, IDictionary`2<string, object> variables, Action`1<object> addResult);
}
public interface Octokit.GraphQL.Core.ISubqueryRunner {
    public abstract virtual void SetQueryResultSink(ISubquery query, Action`1<object> add);
}
public interface Octokit.GraphQL.Core.IUnion {
}
public class Octokit.GraphQL.Core.PagedQuery`1 : object {
    [CompilerGeneratedAttribute]
private SimpleQuery`1<TResult> <MasterQuery>k__BackingField;
    [CompilerGeneratedAttribute]
private IReadOnlyList`1<ISubquery> <Subqueries>k__BackingField;
    public bool IsMutation { get; }
    public SimpleQuery`1<TResult> MasterQuery { get; }
    public IReadOnlyList`1<ISubquery> Subqueries { get; }
    public PagedQuery`1(SimpleQuery`1<TResult> masterQuery, IEnumerable`1<ISubquery> subqueries);
    public sealed virtual bool get_IsMutation();
    [CompilerGeneratedAttribute]
public SimpleQuery`1<TResult> get_MasterQuery();
    [CompilerGeneratedAttribute]
public IReadOnlyList`1<ISubquery> get_Subqueries();
    public sealed virtual IQueryRunner`1<TResult> Start(IConnection connection, IDictionary`2<string, object> variables);
    public virtual string ToString();
    public sealed virtual string ToString(int indentation);
    private sealed virtual override IQueryRunner Octokit.GraphQL.ICompiledQuery.Start(IConnection connection, IDictionary`2<string, object> variables);
}
public class Octokit.GraphQL.Core.PagedSubquery`1 : PagedQuery`1<TResult> {
    [CompilerGeneratedAttribute]
private Func`2<JObject, IEnumerable`1<JToken>> <ParentIds>k__BackingField;
    [CompilerGeneratedAttribute]
private Func`2<JObject, JToken> <PageInfo>k__BackingField;
    [CompilerGeneratedAttribute]
private Func`2<JObject, IEnumerable`1<JToken>> <ParentPageInfo>k__BackingField;
    public Func`2<JObject, IEnumerable`1<JToken>> ParentIds { get; }
    public Func`2<JObject, JToken> PageInfo { get; }
    public Func`2<JObject, IEnumerable`1<JToken>> ParentPageInfo { get; }
    public PagedSubquery`1(SimpleQuery`1<TResult> masterQuery, IEnumerable`1<ISubquery> subqueries, Expression`1<Func`2<JObject, IEnumerable`1<JToken>>> parentIds, Expression`1<Func`2<JObject, JToken>> pageInfo, Expression`1<Func`2<JObject, IEnumerable`1<JToken>>> parentPageInfo);
    [CompilerGeneratedAttribute]
public sealed virtual Func`2<JObject, IEnumerable`1<JToken>> get_ParentIds();
    [CompilerGeneratedAttribute]
public sealed virtual Func`2<JObject, JToken> get_PageInfo();
    [CompilerGeneratedAttribute]
public sealed virtual Func`2<JObject, IEnumerable`1<JToken>> get_ParentPageInfo();
    public sealed virtual IQueryRunner Start(IConnection connection, string id, string after, IDictionary`2<string, object> variables, Action`1<object> addResult);
    internal static ISubquery Create(Type resultType, ICompiledQuery masterQuery, IEnumerable`1<ISubquery> subqueries, Expression`1<Func`2<JObject, IEnumerable`1<JToken>>> parentIds, Expression`1<Func`2<JObject, JToken>> pageInfo, Expression`1<Func`2<JObject, IEnumerable`1<JToken>>> parentPageInfo);
}
public class Octokit.GraphQL.Core.QueryableList`1 : object {
    [CompilerGeneratedAttribute]
private Expression <Expression>k__BackingField;
    public Type ElementType { get; }
    public Expression Expression { get; }
    public QueryableList`1(Expression expression);
    public Type get_ElementType();
    [CompilerGeneratedAttribute]
public sealed virtual Expression get_Expression();
}
public class Octokit.GraphQL.Core.QueryableValue`1 : object {
    private Expression expression;
    public Expression Expression { get; }
    public QueryableValue`1(Expression expression);
    public sealed virtual Expression get_Expression();
}
public class Octokit.GraphQL.Core.Serializers.QuerySerializer : object {
    private static ConcurrentDictionary`2<Type, Tuple`2[]> typeCache;
    private int indentation;
    private string comma;
    private string colon;
    private int currentIndent;
    public QuerySerializer(int indentation);
    private static QuerySerializer();
    public string Serialize(OperationDefinition operation);
    private void SerializeFragment(FragmentDefinition fragment, StringBuilder builder);
    private void Serialize(FieldSelection field, StringBuilder builder);
    private void Serialize(InlineFragment fragment, StringBuilder builder);
    private void Serialize(FragmentSpread fragmentSpread, StringBuilder builder);
    private void SerializeSelections(ISelectionSet selectionSet, StringBuilder builder);
    private void SerializeValue(StringBuilder builder, object value);
    private void OpenBrace(StringBuilder builder);
    private void CloseBrace(StringBuilder builder);
    private void Separator(StringBuilder builder);
    private void Indent(StringBuilder builder);
}
public class Octokit.GraphQL.Core.SimpleQuery`1 : object {
    [CompilerGeneratedAttribute]
private OperationDefinition <OperationDefinition>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Query>k__BackingField;
    [CompilerGeneratedAttribute]
private Func`2<JObject, TResult> <ResultBuilder>k__BackingField;
    public bool IsMutation { get; }
    public OperationDefinition OperationDefinition { get; }
    public string Query { get; }
    public Func`2<JObject, TResult> ResultBuilder { get; }
    public SimpleQuery`1(OperationDefinition operationDefinition, Expression`1<Func`2<JObject, TResult>> resultBuilder);
    public sealed virtual bool get_IsMutation();
    [CompilerGeneratedAttribute]
public OperationDefinition get_OperationDefinition();
    [CompilerGeneratedAttribute]
public string get_Query();
    [CompilerGeneratedAttribute]
public Func`2<JObject, TResult> get_ResultBuilder();
    public virtual string ToString();
    public sealed virtual string ToString(int indentation);
    public string GetPayload(IDictionary`2<string, object> variables);
    public sealed virtual IQueryRunner`1<TResult> Start(IConnection connection, IDictionary`2<string, object> variables);
    private sealed virtual override IQueryRunner Octokit.GraphQL.ICompiledQuery.Start(IConnection connection, IDictionary`2<string, object> variables);
}
public class Octokit.GraphQL.Core.SimpleSubquery`1 : SimpleQuery`1<TResult> {
    [CompilerGeneratedAttribute]
private Func`2<JObject, IEnumerable`1<JToken>> <ParentIds>k__BackingField;
    [CompilerGeneratedAttribute]
private Func`2<JObject, JToken> <PageInfo>k__BackingField;
    [CompilerGeneratedAttribute]
private Func`2<JObject, IEnumerable`1<JToken>> <ParentPageInfo>k__BackingField;
    public Func`2<JObject, IEnumerable`1<JToken>> ParentIds { get; }
    public Func`2<JObject, JToken> PageInfo { get; }
    public Func`2<JObject, IEnumerable`1<JToken>> ParentPageInfo { get; }
    public SimpleSubquery`1(OperationDefinition operationDefinition, Expression`1<Func`2<JObject, TResult>> resultBuilder, Expression`1<Func`2<JObject, IEnumerable`1<JToken>>> parentIds, Expression`1<Func`2<JObject, JToken>> pageInfo, Expression`1<Func`2<JObject, IEnumerable`1<JToken>>> parentPageInfo);
    [CompilerGeneratedAttribute]
public sealed virtual Func`2<JObject, IEnumerable`1<JToken>> get_ParentIds();
    [CompilerGeneratedAttribute]
public sealed virtual Func`2<JObject, JToken> get_PageInfo();
    [CompilerGeneratedAttribute]
public sealed virtual Func`2<JObject, IEnumerable`1<JToken>> get_ParentPageInfo();
    public sealed virtual IQueryRunner Start(IConnection connection, string id, string after, IDictionary`2<string, object> variables, Action`1<object> addResult);
    internal static ISubquery Create(Type resultType, OperationDefinition operationDefinition, Expression expression, Expression`1<Func`2<JObject, IEnumerable`1<JToken>>> parentIds, Expression`1<Func`2<JObject, JToken>> pageInfo, Expression`1<Func`2<JObject, IEnumerable`1<JToken>>> parentPageInfo);
}
public class Octokit.GraphQL.Core.Syntax.Argument : object {
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    [CompilerGeneratedAttribute]
private object <Value>k__BackingField;
    public string Name { get; }
    public object Value { get; public set; }
    public Argument(string name, object value);
    [CompilerGeneratedAttribute]
public string get_Name();
    [CompilerGeneratedAttribute]
public object get_Value();
    [CompilerGeneratedAttribute]
public void set_Value(object value);
}
public class Octokit.GraphQL.Core.Syntax.FieldSelection : SelectionSet {
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    [CompilerGeneratedAttribute]
private IList`1<Argument> <Arguments>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Alias>k__BackingField;
    public string Name { get; }
    public IList`1<Argument> Arguments { get; }
    public string Alias { get; private set; }
    public FieldSelection(MemberInfo member, MemberInfo alias);
    public FieldSelection(string name, string alias);
    [CompilerGeneratedAttribute]
public string get_Name();
    [CompilerGeneratedAttribute]
public IList`1<Argument> get_Arguments();
    [CompilerGeneratedAttribute]
public string get_Alias();
    [CompilerGeneratedAttribute]
private void set_Alias(string value);
    public void SetAlias(MemberInfo member);
}
public class Octokit.GraphQL.Core.Syntax.FragmentDefinition : SelectionSet {
    [CompilerGeneratedAttribute]
private string <TypeCondition>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    public string TypeCondition { get; }
    public string Name { get; }
    public FragmentDefinition(Type typeCondition, string name);
    [CompilerGeneratedAttribute]
public string get_TypeCondition();
    [CompilerGeneratedAttribute]
public string get_Name();
}
public class Octokit.GraphQL.Core.Syntax.FragmentSpread : object {
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    public string Name { get; }
    public FragmentSpread(string name);
    [CompilerGeneratedAttribute]
public string get_Name();
}
public class Octokit.GraphQL.Core.Syntax.InlineFragment : SelectionSet {
    [CompilerGeneratedAttribute]
private string <TypeCondition>k__BackingField;
    public string TypeCondition { get; }
    public InlineFragment(Type typeCondition);
    [CompilerGeneratedAttribute]
public string get_TypeCondition();
}
public interface Octokit.GraphQL.Core.Syntax.ISelectionSet {
    public IList`1<ISyntaxNode> Selections { get; }
    public abstract virtual IList`1<ISyntaxNode> get_Selections();
}
public interface Octokit.GraphQL.Core.Syntax.ISyntaxNode {
}
public class Octokit.GraphQL.Core.Syntax.OperationDefinition : SelectionSet {
    [CompilerGeneratedAttribute]
private OperationType <Type>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    [CompilerGeneratedAttribute]
private IList`1<VariableDefinition> <VariableDefinitions>k__BackingField;
    [CompilerGeneratedAttribute]
private Dictionary`2<string, FragmentDefinition> <FragmentDefinitions>k__BackingField;
    public OperationType Type { get; }
    public string Name { get; }
    public IList`1<VariableDefinition> VariableDefinitions { get; }
    public Dictionary`2<string, FragmentDefinition> FragmentDefinitions { get; }
    public OperationDefinition(OperationType type, string name);
    [CompilerGeneratedAttribute]
public OperationType get_Type();
    [CompilerGeneratedAttribute]
public string get_Name();
    [CompilerGeneratedAttribute]
public IList`1<VariableDefinition> get_VariableDefinitions();
    [CompilerGeneratedAttribute]
public Dictionary`2<string, FragmentDefinition> get_FragmentDefinitions();
}
public enum Octokit.GraphQL.Core.Syntax.OperationType : Enum {
    public int value__;
    public static OperationType Query;
    public static OperationType Mutation;
    public static OperationType Subscription;
}
public class Octokit.GraphQL.Core.Syntax.SelectionSet : object {
    private static IEnumerable`1<ISyntaxNode> EmptySelections;
    [CompilerGeneratedAttribute]
private IList`1<ISyntaxNode> <Selections>k__BackingField;
    public IList`1<ISyntaxNode> Selections { get; }
    private static SelectionSet();
    [CompilerGeneratedAttribute]
public sealed virtual IList`1<ISyntaxNode> get_Selections();
    public static string GetIdentifier(MemberInfo member);
    public static string GetIdentifier(Type type);
}
public class Octokit.GraphQL.Core.Syntax.SyntaxTree : object {
    [CompilerGeneratedAttribute]
private OperationDefinition <Root>k__BackingField;
    [CompilerGeneratedAttribute]
private ISelectionSet <Head>k__BackingField;
    [CompilerGeneratedAttribute]
private IList`1<SelectionSet> <SelectionStack>k__BackingField;
    public OperationDefinition Root { get; private set; }
    public ISelectionSet Head { get; private set; }
    public IList`1<SelectionSet> SelectionStack { get; private set; }
    [CompilerGeneratedAttribute]
public OperationDefinition get_Root();
    [CompilerGeneratedAttribute]
private void set_Root(OperationDefinition value);
    [CompilerGeneratedAttribute]
public ISelectionSet get_Head();
    [CompilerGeneratedAttribute]
private void set_Head(ISelectionSet value);
    [CompilerGeneratedAttribute]
public IList`1<SelectionSet> get_SelectionStack();
    [CompilerGeneratedAttribute]
private void set_SelectionStack(IList`1<SelectionSet> value);
    public OperationDefinition AddRoot(OperationType type, string name);
    public FieldSelection AddField(string member, string alias);
    public FieldSelection AddField(MemberInfo member, MemberInfo alias);
    public FieldSelection AddField(ISelectionSet parent, MemberInfo member, MemberInfo alias);
    public Argument AddArgument(string name, object value);
    public FragmentDefinition AddFragment(IFragment value);
    public InlineFragment AddInlineFragment(Type typeCondition, bool selectTypeName);
    public FragmentSpread AddFragmentSpread(string name);
    public VariableDefinition AddVariableDefinition(Type type, bool isNullable, string name);
    public IDisposable Bookmark();
    private FieldSelection AddField(ISelectionSet parent, FieldSelection field, bool updateHead);
}
public class Octokit.GraphQL.Core.Syntax.VariableDefinition : object {
    [CompilerGeneratedAttribute]
private string <Type>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    public string Type { get; }
    public string Name { get; }
    public VariableDefinition(Type type, bool isNullable, string name);
    [CompilerGeneratedAttribute]
public string get_Type();
    [CompilerGeneratedAttribute]
public string get_Name();
    public static string ToTypeName(Type type, bool isNullable);
}
[ExtensionAttribute]
internal static class Octokit.GraphQL.Core.Utilities.ExpressionExtensions : object {
    [ExtensionAttribute]
public static Expression StripQuotes(Expression expression);
    [ExtensionAttribute]
public static LambdaExpression GetLambda(Expression expression);
    [ExtensionAttribute]
public static Expression AddCast(Expression expression, Type type);
    [ExtensionAttribute]
public static Expression AddIndexer(Expression instance, FieldSelection field);
    [ExtensionAttribute]
public static IndexExpression AddIndexer(Expression expression, string fieldName);
    [ExtensionAttribute]
public static Expression AddToList(Expression expression);
    private static Expression AddSelectCast(Expression expression, Type type);
    private static Type GetEnumerableItemType(Type type);
    private static bool IsIEnumerableOfJToken(TypeInfo type);
    private static bool IsSelect(MethodInfo method);
}
public class Octokit.GraphQL.Core.Utilities.ExpressionTreeDebug : ExpressionVisitor {
    private static int IndentSize;
    private StringBuilder builder;
    private int indent;
    public static string Debug(Expression e);
    protected virtual Expression VisitBinary(BinaryExpression node);
    protected virtual Expression VisitBlock(BlockExpression node);
    protected virtual Expression VisitConstant(ConstantExpression node);
    protected virtual Expression VisitLambda(Expression`1<T> node);
    protected virtual Expression VisitMember(MemberExpression node);
    protected virtual Expression VisitMethodCall(MethodCallExpression node);
    protected virtual Expression VisitNew(NewExpression node);
    protected virtual Expression VisitUnary(UnaryExpression node);
    private void Append(string s);
    private IDisposable AppendAndIndent(string s);
    [CompilerGeneratedAttribute]
private void <AppendAndIndent>b__14_0();
}
[ExtensionAttribute]
public static class Octokit.GraphQL.Core.Utilities.StringExtensions : object {
    [ExtensionAttribute]
public static string LowerFirstCharacter(string s);
    [ExtensionAttribute]
public static string SnakeCaseToPascalCase(string str);
    [ExtensionAttribute]
public static string PascalCaseToSnakeCase(string s);
}
public class Octokit.GraphQL.Fragment`2 : object {
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    [CompilerGeneratedAttribute]
private Expression`1<Func`2<TValue, TResult>> <Expression>k__BackingField;
    public string Name { get; }
    public Expression`1<Func`2<TValue, TResult>> Expression { get; }
    private Type Octokit.GraphQL.IFragment.InputType { get; }
    private Type Octokit.GraphQL.IFragment.ReturnType { get; }
    private Expression Octokit.GraphQL.IFragment.Expression { get; }
    public Fragment`2(string name, Expression`1<Func`2<TValue, TResult>> expression);
    [CompilerGeneratedAttribute]
public sealed virtual string get_Name();
    [CompilerGeneratedAttribute]
public Expression`1<Func`2<TValue, TResult>> get_Expression();
    private sealed virtual override Type Octokit.GraphQL.IFragment.get_InputType();
    private sealed virtual override Type Octokit.GraphQL.IFragment.get_ReturnType();
    private sealed virtual override Expression Octokit.GraphQL.IFragment.get_Expression();
}
public interface Octokit.GraphQL.ICompiledQuery {
    public bool IsMutation { get; }
    public abstract virtual bool get_IsMutation();
    public abstract virtual IQueryRunner Start(IConnection connection, IDictionary`2<string, object> variables);
    public abstract virtual string ToString(int indentation);
}
public interface Octokit.GraphQL.ICompiledQuery`1 {
    public abstract virtual IQueryRunner`1<TResult> Start(IConnection connection, IDictionary`2<string, object> variables);
}
public interface Octokit.GraphQL.IConnection {
    public Uri Uri { get; }
    public abstract virtual Uri get_Uri();
    public abstract virtual Task`1<string> Run(string query, CancellationToken cancellationToken);
}
public interface Octokit.GraphQL.ICredentialStore {
    public abstract virtual Task`1<string> GetCredentials(CancellationToken cancellationToken);
}
[IsReadOnlyAttribute]
[JsonConverterAttribute("Octokit.GraphQL.Internal.IDConverter")]
public class Octokit.GraphQL.ID : ValueType {
    [CompilerGeneratedAttribute]
private string <Value>k__BackingField;
    public string Value { get; }
    public ID(string value);
    [CompilerGeneratedAttribute]
public string get_Value();
    public virtual string ToString();
}
public interface Octokit.GraphQL.IFragment {
    public string Name { get; }
    public Expression Expression { get; }
    public Type InputType { get; }
    public Type ReturnType { get; }
    public abstract virtual string get_Name();
    public abstract virtual Expression get_Expression();
    public abstract virtual Type get_InputType();
    public abstract virtual Type get_ReturnType();
}
public interface Octokit.GraphQL.IFragment`2 {
}
internal class Octokit.GraphQL.Internal.IDConverter : JsonConverter {
    public bool CanRead { get; }
    public virtual bool CanConvert(Type objectType);
    public virtual void WriteJson(JsonWriter writer, object value, JsonSerializer serializer);
    public virtual bool get_CanRead();
    public virtual object ReadJson(JsonReader reader, Type objectType, object existingValue, JsonSerializer serializer);
}
public class Octokit.GraphQL.Internal.InMemoryCredentialStore : object {
    private string token;
    public InMemoryCredentialStore(string token);
    public sealed virtual Task`1<string> GetCredentials(CancellationToken cancellationToken);
}
[AttributeUsageAttribute("64")]
internal class Octokit.GraphQL.Internal.MethodIdAttribute : Attribute {
    [CompilerGeneratedAttribute]
private string <Id>k__BackingField;
    public string Id { get; }
    public MethodIdAttribute(string id);
    [CompilerGeneratedAttribute]
public string get_Id();
}
[ExtensionAttribute]
public static class Octokit.GraphQL.PagingConnectionExtensions : object {
    public static MethodInfo AllPagesMethod;
    public static MethodInfo AllPagesCustomSizeMethod;
    private static PagingConnectionExtensions();
    [ExtensionAttribute]
[MethodIdAttribute("AllPages")]
public static IQueryableList`1<TResult> AllPages(IPagingConnection`1<TResult> source);
    [ExtensionAttribute]
[MethodIdAttribute("AllPages")]
public static IQueryableList`1<TResult> AllPages(IPagingConnection`1<TResult> source, int pageSize);
    private static MethodInfo GetMethodInfo(string id, int parameterCount);
    private static MethodInfo GetMethodInfoOf(Expression`1<Func`1<T>> expression);
}
public class Octokit.GraphQL.ProductHeaderValue : object {
    private ProductHeaderValue _productHeaderValue;
    public string Name { get; }
    public string Version { get; }
    public ProductHeaderValue(string name);
    public ProductHeaderValue(string name, string version);
    private ProductHeaderValue(ProductHeaderValue productHeader);
    public string get_Name();
    public string get_Version();
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
    public virtual string ToString();
    public static ProductHeaderValue Parse(string input);
    public static bool TryParse(string input, ProductHeaderValue& parsedValue);
}
[ExtensionAttribute]
public static class Octokit.GraphQL.QueryableInterfaceExtensions : object {
    public static MethodInfo CastMethod;
    private static QueryableInterfaceExtensions();
    [ExtensionAttribute]
[MethodIdAttribute("CastMethod")]
public static TResult Cast(IQueryableInterface source);
    private static MethodInfo GetMethodInfo(string id);
    private static MethodInfo GetMethodInfoOf(Expression`1<Func`1<T>> expression);
}
[ExtensionAttribute]
public static class Octokit.GraphQL.QueryableListExtensions : object {
    public static MethodInfo OfTypeMethod;
    public static MethodInfo SelectMethod;
    public static MethodInfo SelectFragmentMethod;
    public static MethodInfo ToDictionaryMethod;
    public static MethodInfo ToListMethod;
    private static QueryableListExtensions();
    [ExtensionAttribute]
[MethodIdAttribute("OfTypeMethod")]
public static IQueryableList`1<TResult> OfType(IQueryableList source);
    [ExtensionAttribute]
[MethodIdAttribute("SelectMethod")]
public static IQueryableList`1<TResult> Select(IQueryableList`1<TValue> source, Expression`1<Func`2<TValue, TResult>> selector);
    [ExtensionAttribute]
[MethodIdAttribute("SelectFragmentMethod")]
public static IQueryableList`1<TResult> Select(IQueryableList`1<TValue> source, IFragment`2<TValue, TResult> fragment);
    [ExtensionAttribute]
[MethodIdAttribute("ToDictionaryMethod")]
public static IDictionary`2<TKey, TElement> ToDictionary(IQueryableList`1<TSource> source, Func`2<TSource, TKey> keySelector, Func`2<TSource, TElement> elementSelector);
    [ExtensionAttribute]
[MethodIdAttribute("ToListMethod")]
public static List`1<TValue> ToList(IQueryableList`1<TValue> source);
    [ExtensionAttribute]
public static ICompiledQuery`1<IEnumerable`1<T>> Compile(IQueryableList`1<T> expression);
    private static MethodInfo GetMethodInfo(string id);
    private static MethodInfo GetMethodInfoOf(Expression`1<Func`1<T>> expression);
}
[ExtensionAttribute]
public static class Octokit.GraphQL.QueryableValueExtensions : object {
    public static MethodInfo SelectMethod;
    public static MethodInfo SelectFragmentMethod;
    public static MethodInfo SelectListMethod;
    public static MethodInfo SingleMethod;
    public static MethodInfo SingleOrDefaultMethod;
    private static QueryableValueExtensions();
    [ExtensionAttribute]
[MethodIdAttribute("SelectMethod")]
public static IQueryableValue`1<TResult> Select(IQueryableValue`1<TValue> source, Expression`1<Func`2<TValue, TResult>> selector);
    [ExtensionAttribute]
[MethodIdAttribute("SelectFragmentMethod")]
public static IQueryableValue`1<TResult> Select(IQueryableValue`1<TValue> source, Fragment`2<TValue, TResult> fragment);
    [ExtensionAttribute]
[MethodIdAttribute("SelectListMethod")]
public static IQueryableList`1<TResult> Select(IQueryableValue`1<TValue> source, Expression`1<Func`2<TValue, IQueryableList`1<TResult>>> selector);
    [ExtensionAttribute]
[MethodIdAttribute("SingleMethod")]
public static TValue Single(IQueryableValue`1<TValue> source);
    [ExtensionAttribute]
[MethodIdAttribute("SingleOrDefaultMethod")]
public static TValue SingleOrDefault(IQueryableValue`1<TValue> source);
    [ExtensionAttribute]
public static ICompiledQuery`1<T> Compile(IQueryableValue`1<T> expression);
    private static MethodInfo GetMethodInfo(string id);
    private static MethodInfo GetMethodInfoOf(Expression`1<Func`1<T>> expression);
}
public class Octokit.GraphQL.Variable : ValueType {
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    public string Name { get; }
    public Variable(string name);
    [CompilerGeneratedAttribute]
public string get_Name();
    public static Variable Var(string name);
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
internal class System.Runtime.CompilerServices.IsReadOnlyAttribute : Attribute {
}
