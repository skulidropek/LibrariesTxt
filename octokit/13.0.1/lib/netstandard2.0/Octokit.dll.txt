public class CopilotLicenseClient : ApiClient {
    public CopilotLicenseClient(IApiConnection apiConnection);
    [AsyncStateMachineAttribute("CopilotLicenseClient/<Remove>d__1")]
[ManualRouteAttribute("DELETE", "/orgs/{org}/copilot/billing/selected_users")]
public sealed virtual Task`1<CopilotSeatAllocation> Remove(string organization, string userName);
    [AsyncStateMachineAttribute("CopilotLicenseClient/<Remove>d__2")]
[ManualRouteAttribute("DELETE", "/orgs/{org}/copilot/billing/selected_users")]
public sealed virtual Task`1<CopilotSeatAllocation> Remove(string organization, UserSeatAllocation userSeatAllocation);
    [AsyncStateMachineAttribute("CopilotLicenseClient/<Assign>d__3")]
[ManualRouteAttribute("POST", "/orgs/{org}/copilot/billing/selected_users")]
public sealed virtual Task`1<CopilotSeatAllocation> Assign(string organization, string userName);
    [AsyncStateMachineAttribute("CopilotLicenseClient/<Assign>d__4")]
[ManualRouteAttribute("POST", "/orgs/{org}/copilot/billing/selected_users")]
public sealed virtual Task`1<CopilotSeatAllocation> Assign(string organization, UserSeatAllocation userSeatAllocation);
    [AsyncStateMachineAttribute("CopilotLicenseClient/<GetAll>d__5")]
[ManualRouteAttribute("GET", "/orgs/{org}/copilot/billing/seats")]
public sealed virtual Task`1<IReadOnlyList`1<CopilotSeats>> GetAll(string organization, ApiOptions options);
}
public class Octokit.AbuseException : ForbiddenException {
    [CompilerGeneratedAttribute]
private Nullable`1<int> <RetryAfterSeconds>k__BackingField;
    public Nullable`1<int> RetryAfterSeconds { get; private set; }
    public string Message { get; }
    public AbuseException(IResponse response);
    public AbuseException(IResponse response, Exception innerException);
    protected AbuseException(SerializationInfo info, StreamingContext context);
    private static Nullable`1<int> ParseRetryAfterSeconds(IResponse response);
    [CompilerGeneratedAttribute]
public Nullable`1<int> get_RetryAfterSeconds();
    [CompilerGeneratedAttribute]
private void set_RetryAfterSeconds(Nullable`1<int> value);
    public virtual string get_Message();
    [SecurityCriticalAttribute]
public virtual void GetObjectData(SerializationInfo info, StreamingContext context);
}
public static class Octokit.AcceptHeaders : object {
    public static string StableVersion;
    public static string StableVersionHtml;
    public static string StableVersionJson;
    public static string RawContentMediaType;
    public static string RepositoryContentMediaType;
    public static string StarJson;
}
[DebuggerDisplayAttribute("{DebuggerDisplay,nq}")]
public class Octokit.AccessToken : object {
    [CompilerGeneratedAttribute]
private string <Token>k__BackingField;
    [CompilerGeneratedAttribute]
private DateTimeOffset <ExpiresAt>k__BackingField;
    public string Token { get; private set; }
    public DateTimeOffset ExpiresAt { get; private set; }
    internal string DebuggerDisplay { get; }
    public AccessToken(string token, DateTimeOffset expiresAt);
    [CompilerGeneratedAttribute]
public string get_Token();
    [CompilerGeneratedAttribute]
private void set_Token(string value);
    [CompilerGeneratedAttribute]
public DateTimeOffset get_ExpiresAt();
    [CompilerGeneratedAttribute]
private void set_ExpiresAt(DateTimeOffset value);
    internal string get_DebuggerDisplay();
}
public abstract class Octokit.Account : object {
    [CompilerGeneratedAttribute]
private string <AvatarUrl>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Bio>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Blog>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<int> <Collaborators>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Company>k__BackingField;
    [CompilerGeneratedAttribute]
private DateTimeOffset <CreatedAt>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<int> <DiskUsage>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Email>k__BackingField;
    [CompilerGeneratedAttribute]
private int <Followers>k__BackingField;
    [CompilerGeneratedAttribute]
private int <Following>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<bool> <Hireable>k__BackingField;
    [CompilerGeneratedAttribute]
private string <HtmlUrl>k__BackingField;
    [CompilerGeneratedAttribute]
private long <Id>k__BackingField;
    [CompilerGeneratedAttribute]
private string <NodeId>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Location>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Login>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<AccountType> <Type>k__BackingField;
    [CompilerGeneratedAttribute]
private int <OwnedPrivateRepos>k__BackingField;
    [CompilerGeneratedAttribute]
private Plan <Plan>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<int> <PrivateGists>k__BackingField;
    [CompilerGeneratedAttribute]
private int <PublicGists>k__BackingField;
    [CompilerGeneratedAttribute]
private int <PublicRepos>k__BackingField;
    [CompilerGeneratedAttribute]
private int <TotalPrivateRepos>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Url>k__BackingField;
    public string AvatarUrl { get; protected set; }
    public string Bio { get; protected set; }
    public string Blog { get; protected set; }
    public Nullable`1<int> Collaborators { get; protected set; }
    public string Company { get; protected set; }
    public DateTimeOffset CreatedAt { get; protected set; }
    public Nullable`1<int> DiskUsage { get; protected set; }
    public string Email { get; protected set; }
    public int Followers { get; protected set; }
    public int Following { get; protected set; }
    public Nullable`1<bool> Hireable { get; protected set; }
    public string HtmlUrl { get; protected set; }
    public long Id { get; protected set; }
    public string NodeId { get; protected set; }
    public string Location { get; protected set; }
    public string Login { get; protected set; }
    public string Name { get; protected set; }
    public Nullable`1<AccountType> Type { get; protected set; }
    public int OwnedPrivateRepos { get; protected set; }
    public Plan Plan { get; protected set; }
    public Nullable`1<int> PrivateGists { get; protected set; }
    public int PublicGists { get; protected set; }
    public int PublicRepos { get; protected set; }
    public int TotalPrivateRepos { get; protected set; }
    public string Url { get; protected set; }
    protected Account(string avatarUrl, string bio, string blog, int collaborators, string company, DateTimeOffset createdAt, int diskUsage, string email, int followers, int following, Nullable`1<bool> hireable, string htmlUrl, int totalPrivateRepos, long id, string location, string login, string name, string nodeId, int ownedPrivateRepos, Plan plan, int privateGists, int publicGists, int publicRepos, AccountType type, string url);
    [CompilerGeneratedAttribute]
public string get_AvatarUrl();
    [CompilerGeneratedAttribute]
protected void set_AvatarUrl(string value);
    [CompilerGeneratedAttribute]
public string get_Bio();
    [CompilerGeneratedAttribute]
protected void set_Bio(string value);
    [CompilerGeneratedAttribute]
public string get_Blog();
    [CompilerGeneratedAttribute]
protected void set_Blog(string value);
    [CompilerGeneratedAttribute]
public Nullable`1<int> get_Collaborators();
    [CompilerGeneratedAttribute]
protected void set_Collaborators(Nullable`1<int> value);
    [CompilerGeneratedAttribute]
public string get_Company();
    [CompilerGeneratedAttribute]
protected void set_Company(string value);
    [CompilerGeneratedAttribute]
public DateTimeOffset get_CreatedAt();
    [CompilerGeneratedAttribute]
protected void set_CreatedAt(DateTimeOffset value);
    [CompilerGeneratedAttribute]
public Nullable`1<int> get_DiskUsage();
    [CompilerGeneratedAttribute]
protected void set_DiskUsage(Nullable`1<int> value);
    [CompilerGeneratedAttribute]
public string get_Email();
    [CompilerGeneratedAttribute]
protected void set_Email(string value);
    [CompilerGeneratedAttribute]
public int get_Followers();
    [CompilerGeneratedAttribute]
protected void set_Followers(int value);
    [CompilerGeneratedAttribute]
public int get_Following();
    [CompilerGeneratedAttribute]
protected void set_Following(int value);
    [CompilerGeneratedAttribute]
public Nullable`1<bool> get_Hireable();
    [CompilerGeneratedAttribute]
protected void set_Hireable(Nullable`1<bool> value);
    [CompilerGeneratedAttribute]
public string get_HtmlUrl();
    [CompilerGeneratedAttribute]
protected void set_HtmlUrl(string value);
    [CompilerGeneratedAttribute]
public long get_Id();
    [CompilerGeneratedAttribute]
protected void set_Id(long value);
    [CompilerGeneratedAttribute]
public string get_NodeId();
    [CompilerGeneratedAttribute]
protected void set_NodeId(string value);
    [CompilerGeneratedAttribute]
public string get_Location();
    [CompilerGeneratedAttribute]
protected void set_Location(string value);
    [CompilerGeneratedAttribute]
public string get_Login();
    [CompilerGeneratedAttribute]
protected void set_Login(string value);
    [CompilerGeneratedAttribute]
public string get_Name();
    [CompilerGeneratedAttribute]
protected void set_Name(string value);
    [CompilerGeneratedAttribute]
public Nullable`1<AccountType> get_Type();
    [CompilerGeneratedAttribute]
protected void set_Type(Nullable`1<AccountType> value);
    [CompilerGeneratedAttribute]
public int get_OwnedPrivateRepos();
    [CompilerGeneratedAttribute]
protected void set_OwnedPrivateRepos(int value);
    [CompilerGeneratedAttribute]
public Plan get_Plan();
    [CompilerGeneratedAttribute]
protected void set_Plan(Plan value);
    [CompilerGeneratedAttribute]
public Nullable`1<int> get_PrivateGists();
    [CompilerGeneratedAttribute]
protected void set_PrivateGists(Nullable`1<int> value);
    [CompilerGeneratedAttribute]
public int get_PublicGists();
    [CompilerGeneratedAttribute]
protected void set_PublicGists(int value);
    [CompilerGeneratedAttribute]
public int get_PublicRepos();
    [CompilerGeneratedAttribute]
protected void set_PublicRepos(int value);
    [CompilerGeneratedAttribute]
public int get_TotalPrivateRepos();
    [CompilerGeneratedAttribute]
protected void set_TotalPrivateRepos(int value);
    [CompilerGeneratedAttribute]
public string get_Url();
    [CompilerGeneratedAttribute]
protected void set_Url(string value);
}
public enum Octokit.AccountSearchType : Enum {
    public int value__;
    [ParameterAttribute]
public static AccountSearchType User;
    [ParameterAttribute]
public static AccountSearchType Org;
}
public enum Octokit.AccountType : Enum {
    public int value__;
    [ParameterAttribute]
public static AccountType User;
    [ParameterAttribute]
public static AccountType Organization;
    [ParameterAttribute]
public static AccountType Bot;
    [ParameterAttribute]
public static AccountType Mannequin;
}
public class Octokit.ActionsArtifactsClient : ApiClient {
    public ActionsArtifactsClient(IApiConnection apiConnection);
    [ManualRouteAttribute("GET", "/repos/{owner}/{repository}/actions/artifacts")]
public sealed virtual Task`1<ListArtifactsResponse> ListArtifacts(string owner, string repository, ListArtifactsRequest listArtifactsRequest);
    [ManualRouteAttribute("GET", "/repos/{owner}/{repository}/actions/artifacts/{artifact_id}")]
public sealed virtual Task`1<Artifact> GetArtifact(string owner, string repository, long artifactId);
    [ManualRouteAttribute("DELETE", "/repos/{owner}/{repository}/actions/artifacts/{artifact_id}")]
public sealed virtual Task DeleteArtifact(string owner, string repository, long artifactId);
    [ManualRouteAttribute("GET", "/repos/{owner}/{repository}/actions/artifacts/{artifact_id}/{archive_format}")]
public sealed virtual Task`1<Stream> DownloadArtifact(string owner, string repository, long artifactId, string archiveFormat);
    [ManualRouteAttribute("GET", "/repos/{owner}/{repo}/actions/runs/{run_id}/artifacts")]
public sealed virtual Task`1<ListArtifactsResponse> ListWorkflowArtifacts(string owner, string repository, long runId, ListArtifactsRequest listArtifactsRequest);
}
public class Octokit.ActionsCacheClient : ApiClient {
    public ActionsCacheClient(IApiConnection apiConnection);
}
public class Octokit.ActionsClient : ApiClient {
    [CompilerGeneratedAttribute]
private IActionsArtifactsClient <Artifacts>k__BackingField;
    [CompilerGeneratedAttribute]
private IActionsCacheClient <Cache>k__BackingField;
    [CompilerGeneratedAttribute]
private IActionsOidcClient <Oidc>k__BackingField;
    [CompilerGeneratedAttribute]
private IActionsPermissionsClient <Permissions>k__BackingField;
    [CompilerGeneratedAttribute]
private IActionsSelfHostedRunnerGroupsClient <SelfHostedRunnerGroups>k__BackingField;
    [CompilerGeneratedAttribute]
private IActionsSelfHostedRunnersClient <SelfHostedRunners>k__BackingField;
    [CompilerGeneratedAttribute]
private IActionsWorkflowsClient <Workflows>k__BackingField;
    public IActionsArtifactsClient Artifacts { get; private set; }
    public IActionsCacheClient Cache { get; private set; }
    public IActionsOidcClient Oidc { get; private set; }
    public IActionsPermissionsClient Permissions { get; private set; }
    public IActionsSelfHostedRunnerGroupsClient SelfHostedRunnerGroups { get; private set; }
    public IActionsSelfHostedRunnersClient SelfHostedRunners { get; private set; }
    public IActionsWorkflowsClient Workflows { get; private set; }
    public ActionsClient(IApiConnection apiConnection);
    [CompilerGeneratedAttribute]
public sealed virtual IActionsArtifactsClient get_Artifacts();
    [CompilerGeneratedAttribute]
private void set_Artifacts(IActionsArtifactsClient value);
    [CompilerGeneratedAttribute]
public sealed virtual IActionsCacheClient get_Cache();
    [CompilerGeneratedAttribute]
private void set_Cache(IActionsCacheClient value);
    [CompilerGeneratedAttribute]
public sealed virtual IActionsOidcClient get_Oidc();
    [CompilerGeneratedAttribute]
private void set_Oidc(IActionsOidcClient value);
    [CompilerGeneratedAttribute]
public sealed virtual IActionsPermissionsClient get_Permissions();
    [CompilerGeneratedAttribute]
private void set_Permissions(IActionsPermissionsClient value);
    [CompilerGeneratedAttribute]
public sealed virtual IActionsSelfHostedRunnerGroupsClient get_SelfHostedRunnerGroups();
    [CompilerGeneratedAttribute]
private void set_SelfHostedRunnerGroups(IActionsSelfHostedRunnerGroupsClient value);
    [CompilerGeneratedAttribute]
public sealed virtual IActionsSelfHostedRunnersClient get_SelfHostedRunners();
    [CompilerGeneratedAttribute]
private void set_SelfHostedRunners(IActionsSelfHostedRunnersClient value);
    [CompilerGeneratedAttribute]
public sealed virtual IActionsWorkflowsClient get_Workflows();
    [CompilerGeneratedAttribute]
private void set_Workflows(IActionsWorkflowsClient value);
}
public class Octokit.ActionsPermissionsClient : ApiClient {
    public ActionsPermissionsClient(IApiConnection apiConnection);
}
public class Octokit.ActionsSelfHostedRunnerGroupsClient : ApiClient {
    public ActionsSelfHostedRunnerGroupsClient(IApiConnection apiConnection);
    [AsyncStateMachineAttribute("Octokit.ActionsSelfHostedRunnerGroupsClient/<GetRunnerGroupForEnterprise>d__1")]
[ManualRouteAttribute("GET", "/enterprises/{enterprise}/actions/runner-groups/{runner_group_id}")]
public sealed virtual Task`1<RunnerGroup> GetRunnerGroupForEnterprise(string enterprise, long runnerGroupId);
    [AsyncStateMachineAttribute("Octokit.ActionsSelfHostedRunnerGroupsClient/<GetRunnerGroupForOrganization>d__2")]
[ManualRouteAttribute("GET", "/orgs/{org}/actions/runner-groups/{runner_group_id}")]
public sealed virtual Task`1<RunnerGroup> GetRunnerGroupForOrganization(string org, long runnerGroupId);
    [ManualRouteAttribute("GET", "/enterprises/{enterprise}/actions/runner-groups")]
public sealed virtual Task`1<RunnerGroupResponse> ListAllRunnerGroupsForEnterprise(string enterprise);
    [AsyncStateMachineAttribute("Octokit.ActionsSelfHostedRunnerGroupsClient/<ListAllRunnerGroupsForEnterprise>d__4")]
[ManualRouteAttribute("GET", "/enterprises/{enterprise}/actions/runner-groups")]
public sealed virtual Task`1<RunnerGroupResponse> ListAllRunnerGroupsForEnterprise(string enterprise, ApiOptions options);
    [ManualRouteAttribute("GET", "/orgs/{org}/actions/runner-groups")]
public sealed virtual Task`1<RunnerGroupResponse> ListAllRunnerGroupsForOrganization(string org);
    [AsyncStateMachineAttribute("Octokit.ActionsSelfHostedRunnerGroupsClient/<ListAllRunnerGroupsForOrganization>d__6")]
[ManualRouteAttribute("GET", "/orgs/{org}/actions/runner-groups")]
public sealed virtual Task`1<RunnerGroupResponse> ListAllRunnerGroupsForOrganization(string org, ApiOptions options);
    [ManualRouteAttribute("GET", "/enterprises/{enterprise}/actions/runner-groups/{runner_group_id}/runners")]
public sealed virtual Task`1<RunnerResponse> ListAllRunnersForEnterpriseRunnerGroup(string enterprise, long runnerGroupId);
    [AsyncStateMachineAttribute("Octokit.ActionsSelfHostedRunnerGroupsClient/<ListAllRunnersForEnterpriseRunnerGroup>d__8")]
[ManualRouteAttribute("GET", "/enterprises/{enterprise}/actions/runner-groups/{runner_group_id}/runners")]
public sealed virtual Task`1<RunnerResponse> ListAllRunnersForEnterpriseRunnerGroup(string enterprise, long runnerGroupId, ApiOptions options);
    [ManualRouteAttribute("GET", "/orgs/{org}/actions/runner-groups/{runner_group_id}/runners")]
public sealed virtual Task`1<RunnerResponse> ListAllRunnersForOrganizationRunnerGroup(string organization, long runnerGroupId);
    [AsyncStateMachineAttribute("Octokit.ActionsSelfHostedRunnerGroupsClient/<ListAllRunnersForOrganizationRunnerGroup>d__10")]
[ManualRouteAttribute("GET", "/orgs/{org}/actions/runner-groups/{runner_group_id}/runners")]
public sealed virtual Task`1<RunnerResponse> ListAllRunnersForOrganizationRunnerGroup(string organization, long runnerGroupId, ApiOptions options);
    [ManualRouteAttribute("GET", "/enterprises/{enterprise}/actions/runner-groups/{runner_group_id}/organizations")]
public sealed virtual Task`1<IReadOnlyList`1<Organization>> ListAllRunnerGroupOrganizationsForEnterprise(string enterprise, long runnerGroupId);
    [ManualRouteAttribute("GET", "/enterprises/{enterprise}/actions/runner-groups/{runner_group_id}/organizations")]
public sealed virtual Task`1<IReadOnlyList`1<Organization>> ListAllRunnerGroupOrganizationsForEnterprise(string enterprise, long runnerGroupId, ApiOptions options);
    [ManualRouteAttribute("GET", "/orgs/{org}/actions/runner-groups/{runner_group_id}/repositories")]
public sealed virtual Task`1<IReadOnlyList`1<Repository>> ListAllRunnerGroupRepositoriesForOrganization(string org, long runnerGroupId);
    [ManualRouteAttribute("GET", "/orgs/{org}/actions/runner-groups/{runner_group_id}/repositories")]
public sealed virtual Task`1<IReadOnlyList`1<Repository>> ListAllRunnerGroupRepositoriesForOrganization(string org, long runnerGroupId, ApiOptions options);
}
public class Octokit.ActionsSelfHostedRunnersClient : ApiClient {
    public ActionsSelfHostedRunnersClient(IApiConnection apiConnection);
    [ManualRouteAttribute("GET", "/enterprises/{enterprise}/actions/runners")]
public sealed virtual Task`1<RunnerResponse> ListAllRunnersForEnterprise(string enterprise);
    [AsyncStateMachineAttribute("Octokit.ActionsSelfHostedRunnersClient/<ListAllRunnersForEnterprise>d__2")]
[ManualRouteAttribute("GET", "/enterprises/{enterprise}/actions/runners")]
public sealed virtual Task`1<RunnerResponse> ListAllRunnersForEnterprise(string enterprise, ApiOptions options);
    [ManualRouteAttribute("GET", "/orgs/{org}/actions/runners")]
public sealed virtual Task`1<RunnerResponse> ListAllRunnersForOrganization(string organization);
    [AsyncStateMachineAttribute("Octokit.ActionsSelfHostedRunnersClient/<ListAllRunnersForOrganization>d__4")]
[ManualRouteAttribute("GET", "/orgs/{org}/actions/runners")]
public sealed virtual Task`1<RunnerResponse> ListAllRunnersForOrganization(string organization, ApiOptions options);
    [ManualRouteAttribute("GET", "/repos/{owner}/{repo}/actions/runners")]
public sealed virtual Task`1<RunnerResponse> ListAllRunnersForRepository(string owner, string name);
    [AsyncStateMachineAttribute("Octokit.ActionsSelfHostedRunnersClient/<ListAllRunnersForRepository>d__6")]
[ManualRouteAttribute("GET", "/repos/{owner}/{repo}/actions/runners")]
public sealed virtual Task`1<RunnerResponse> ListAllRunnersForRepository(string owner, string name, ApiOptions options);
    [ManualRouteAttribute("GET", "/enterprises/{enterprise}/actions/runners/downloads")]
public sealed virtual Task`1<IReadOnlyList`1<RunnerApplication>> ListAllRunnerApplicationsForEnterprise(string enterprise);
    [AsyncStateMachineAttribute("Octokit.ActionsSelfHostedRunnersClient/<ListAllRunnerApplicationsForEnterprise>d__8")]
[ManualRouteAttribute("GET", "/enterprises/{enterprise}/actions/runners/downloads")]
public sealed virtual Task`1<IReadOnlyList`1<RunnerApplication>> ListAllRunnerApplicationsForEnterprise(string enterprise, ApiOptions options);
    [ManualRouteAttribute("GET", "/orgs/{org}/actions/runners/downloads")]
public sealed virtual Task`1<IReadOnlyList`1<RunnerApplication>> ListAllRunnerApplicationsForOrganization(string organization);
    [AsyncStateMachineAttribute("Octokit.ActionsSelfHostedRunnersClient/<ListAllRunnerApplicationsForOrganization>d__10")]
[ManualRouteAttribute("GET", "/orgs/{org}/actions/runners/downloads")]
public sealed virtual Task`1<IReadOnlyList`1<RunnerApplication>> ListAllRunnerApplicationsForOrganization(string organization, ApiOptions options);
    [ManualRouteAttribute("GET", "/repos/{owner}/{repo}/actions/runners/downloads")]
public sealed virtual Task`1<IReadOnlyList`1<RunnerApplication>> ListAllRunnerApplicationsForRepository(string owner, string repo);
    [AsyncStateMachineAttribute("Octokit.ActionsSelfHostedRunnersClient/<ListAllRunnerApplicationsForRepository>d__12")]
[ManualRouteAttribute("GET", "/repos/{owner}/{repo}/actions/runners/downloads")]
public sealed virtual Task`1<IReadOnlyList`1<RunnerApplication>> ListAllRunnerApplicationsForRepository(string owner, string repo, ApiOptions options);
    [ManualRouteAttribute("DELETE", "/enterprises/{enterprise}/actions/runners/{runner_id}")]
public sealed virtual Task DeleteEnterpriseRunner(string enterprise, long runnerId);
    [ManualRouteAttribute("DELETE", "/orgs/{org}/actions/runners/{runner_id}")]
public sealed virtual Task DeleteOrganizationRunner(string organization, long runnerId);
    [ManualRouteAttribute("DELETE", "/repos/{owner}/{repo}/actions/runners/{runner_id}")]
public sealed virtual Task DeleteRepositoryRunner(string owner, string repo, long runnerId);
    [ManualRouteAttribute("POST", "/enterprises/{enterprise}/actions/runners/registration-token")]
public Task`1<AccessToken> CreateEnterpriseRegistrationToken(string enterprise);
    [ManualRouteAttribute("POST", "/enterprises/{enterprise}/actions/runners/registration-token")]
public sealed virtual Task`1<AccessToken> CreateEnterpriseRegistrationToken(string enterprise, CancellationToken cancellationToken);
    [ManualRouteAttribute("POST", "/orgs/{org}/actions/runners/registration-token")]
public Task`1<AccessToken> CreateOrganizationRegistrationToken(string organization);
    [ManualRouteAttribute("POST", "/orgs/{org}/actions/runners/registration-token")]
public sealed virtual Task`1<AccessToken> CreateOrganizationRegistrationToken(string organization, CancellationToken cancellationToken);
    [ManualRouteAttribute("POST", "/repos/{owner}/{repo}/actions/runners/registration-token")]
public Task`1<AccessToken> CreateRepositoryRegistrationToken(string owner, string repo);
    [ManualRouteAttribute("POST", "/repos/{owner}/{repo}/actions/runners/registration-token")]
public sealed virtual Task`1<AccessToken> CreateRepositoryRegistrationToken(string owner, string repo, CancellationToken cancellationToken);
}
public class Octokit.ActionsWorkflowJobsClient : ApiClient {
    public ActionsWorkflowJobsClient(IApiConnection apiConnection);
    [ManualRouteAttribute("POST", "/repos/{owner}/{repo}/actions/jobs/{job_id}/rerun")]
public sealed virtual Task Rerun(string owner, string name, long jobId);
    [ManualRouteAttribute("GET", "
/repos/{owner}/{repo}/actions/jobs/{job_id}")]
public sealed virtual Task`1<WorkflowJob> Get(string owner, string name, long jobId);
    [AsyncStateMachineAttribute("Octokit.ActionsWorkflowJobsClient/<GetLogs>d__3")]
[ManualRouteAttribute("GET", "/repos/{owner}/{repo}/actions/jobs/{job_id}/logs")]
public sealed virtual Task`1<string> GetLogs(string owner, string name, long jobId);
    [ManualRouteAttribute("GET", "/repos/{owner}/{repo}/actions/runs/{run_id}/jobs")]
public sealed virtual Task`1<WorkflowJobsResponse> List(string owner, string name, long runId);
    [ManualRouteAttribute("GET", "/repos/{owner}/{repo}/actions/runs/{run_id}/jobs")]
public sealed virtual Task`1<WorkflowJobsResponse> List(string owner, string name, long runId, WorkflowRunJobsRequest workflowRunJobsRequest);
    [AsyncStateMachineAttribute("Octokit.ActionsWorkflowJobsClient/<List>d__6")]
[ManualRouteAttribute("GET", "/repos/{owner}/{repo}/actions/runs/{run_id}/jobs")]
public sealed virtual Task`1<WorkflowJobsResponse> List(string owner, string name, long runId, WorkflowRunJobsRequest workflowRunJobsRequest, ApiOptions options);
    [ManualRouteAttribute("GET", "/repos/{owner}/{repo}/actions/runs/{run_id}/attempts/{attempt_number}/jobs")]
public sealed virtual Task`1<WorkflowJobsResponse> List(string owner, string name, long runId, int attemptNumber);
    [AsyncStateMachineAttribute("Octokit.ActionsWorkflowJobsClient/<List>d__8")]
[ManualRouteAttribute("GET", "/repos/{owner}/{repo}/actions/runs/{run_id}/attempts/{attempt_number}/jobs")]
public sealed virtual Task`1<WorkflowJobsResponse> List(string owner, string name, long runId, int attemptNumber, ApiOptions options);
}
public class Octokit.ActionsWorkflowRunsClient : ApiClient {
    public ActionsWorkflowRunsClient(IApiConnection apiConnection);
    [ManualRouteAttribute("GET", "/repos/{owner}/{repo}/actions/runs")]
public sealed virtual Task`1<WorkflowRunsResponse> List(string owner, string name);
    [ManualRouteAttribute("GET", "/repos/{owner}/{repo}/actions/runs")]
public sealed virtual Task`1<WorkflowRunsResponse> List(string owner, string name, WorkflowRunsRequest workflowRunsRequest);
    [AsyncStateMachineAttribute("Octokit.ActionsWorkflowRunsClient/<List>d__3")]
[ManualRouteAttribute("GET", "/repos/{owner}/{repo}/actions/runs")]
public sealed virtual Task`1<WorkflowRunsResponse> List(string owner, string name, WorkflowRunsRequest workflowRunsRequest, ApiOptions options);
    [ManualRouteAttribute("GET", "/repos/{owner}/{repo}/actions/runs/{run_id}")]
public sealed virtual Task`1<WorkflowRun> Get(string owner, string name, long runId);
    [ManualRouteAttribute("DELETE", "/repos/{owner}/{repo}/actions/runs/{run_id}")]
public sealed virtual Task Delete(string owner, string name, long runId);
    [ManualRouteAttribute("GET", "/repos/{owner}/{repo}/actions/runs/{run_id}/approvals")]
public sealed virtual Task`1<IReadOnlyList`1<EnvironmentApprovals>> GetReviewHistory(string owner, string name, long runId);
    [ManualRouteAttribute("POST", "/repos/{owner}/{repo}/actions/runs/{run_id}/approve")]
public sealed virtual Task Approve(string owner, string name, long runId);
    [ManualRouteAttribute("GET", "/repos/{owner}/{repo}/actions/runs/{run_id}/attempts/{attempt_number}")]
public sealed virtual Task`1<WorkflowRun> GetAttempt(string owner, string name, long runId, long attemptNumber);
    [AsyncStateMachineAttribute("Octokit.ActionsWorkflowRunsClient/<GetAttemptLogs>d__9")]
[ManualRouteAttribute("GET", "/repos/{owner}/{repo}/actions/runs/{run_id}/attempts/{attempt_number}")]
public sealed virtual Task`1<Byte[]> GetAttemptLogs(string owner, string name, long runId, long attemptNumber);
    [ManualRouteAttribute("POST", "/repos/{owner}/{repo}/actions/runs/{run_id}/cancel")]
public sealed virtual Task Cancel(string owner, string name, long runId);
    [AsyncStateMachineAttribute("Octokit.ActionsWorkflowRunsClient/<GetLogs>d__11")]
[ManualRouteAttribute("GET", "/repos/{owner}/{repo}/actions/runs/{run_id}/logs")]
public sealed virtual Task`1<Byte[]> GetLogs(string owner, string name, long runId);
    [ManualRouteAttribute("DELETE", "/repos/{owner}/{repo}/actions/runs/{run_id}/logs")]
public sealed virtual Task DeleteLogs(string owner, string name, long runId);
    [ManualRouteAttribute("POST", "/repos/{owner}/{repo}/actions/runs/{run_id}/pending_deployments")]
public sealed virtual Task`1<Deployment> ReviewPendingDeployments(string owner, string name, long runId, PendingDeploymentReview review);
    [ManualRouteAttribute("POST", "/repos/{owner}/{repo}/actions/runs/{run_id}/rerun")]
public sealed virtual Task Rerun(string owner, string name, long runId);
    [ManualRouteAttribute("POST", "/repos/{owner}/{repo}/actions/runs/{run_id}/rerun-failed-jobs")]
public sealed virtual Task RerunFailedJobs(string owner, string name, long runId);
    [ManualRouteAttribute("GET", "/repos/{owner}/{repo}/actions/runs/{run_id}/timing")]
public sealed virtual Task`1<WorkflowRunUsage> GetUsage(string owner, string name, long runId);
    [ManualRouteAttribute("GET", "/repos/{owner}/{repo}/actions/workflows/{workflow_id}/runs")]
public sealed virtual Task`1<WorkflowRunsResponse> ListByWorkflow(string owner, string name, long workflowId);
    [ManualRouteAttribute("GET", "/repos/{owner}/{repo}/actions/workflows/{workflow_id}/runs")]
public sealed virtual Task`1<WorkflowRunsResponse> ListByWorkflow(string owner, string name, long workflowId, WorkflowRunsRequest workflowRunsRequest);
    [AsyncStateMachineAttribute("Octokit.ActionsWorkflowRunsClient/<ListByWorkflow>d__19")]
[ManualRouteAttribute("GET", "/repos/{owner}/{repo}/actions/workflows/{workflow_id}/runs")]
public sealed virtual Task`1<WorkflowRunsResponse> ListByWorkflow(string owner, string name, long workflowId, WorkflowRunsRequest workflowRunsRequest, ApiOptions options);
    [ManualRouteAttribute("GET", "/repos/{owner}/{repo}/actions/workflows/{workflow_id}/runs")]
public sealed virtual Task`1<WorkflowRunsResponse> ListByWorkflow(string owner, string name, string workflowFileName);
    [ManualRouteAttribute("GET", "/repos/{owner}/{repo}/actions/workflows/{workflow_id}/runs")]
public sealed virtual Task`1<WorkflowRunsResponse> ListByWorkflow(string owner, string name, string workflowFileName, WorkflowRunsRequest workflowRunsRequest);
    [AsyncStateMachineAttribute("Octokit.ActionsWorkflowRunsClient/<ListByWorkflow>d__22")]
[ManualRouteAttribute("GET", "/repos/{owner}/{repo}/actions/workflows/{workflow_id}/runs")]
public sealed virtual Task`1<WorkflowRunsResponse> ListByWorkflow(string owner, string name, string workflowFileName, WorkflowRunsRequest workflowRunsRequest, ApiOptions options);
}
public class Octokit.ActionsWorkflowsClient : ApiClient {
    [CompilerGeneratedAttribute]
private IActionsWorkflowJobsClient <Jobs>k__BackingField;
    [CompilerGeneratedAttribute]
private IActionsWorkflowRunsClient <Runs>k__BackingField;
    public IActionsWorkflowJobsClient Jobs { get; private set; }
    public IActionsWorkflowRunsClient Runs { get; private set; }
    public ActionsWorkflowsClient(IApiConnection apiConnection);
    [ManualRouteAttribute("POST", "/repos/{owner}/{repo}/actions/workflows/{workflow_id}/dispatches")]
public sealed virtual Task CreateDispatch(string owner, string name, string workflowFileName, CreateWorkflowDispatch createDispatch);
    [ManualRouteAttribute("POST", "/repos/{owner}/{repo}/actions/workflows/{workflow_id}/dispatches")]
public sealed virtual Task CreateDispatch(string owner, string name, long workflowId, CreateWorkflowDispatch createDispatch);
    [ManualRouteAttribute("PUT", "/repos/{owner}/{repo}/actions/workflows/{workflow_id}/disable")]
public sealed virtual Task Disable(string owner, string name, string workflowFileName);
    [ManualRouteAttribute("PUT", "/repos/{owner}/{repo}/actions/workflows/{workflow_id}/disable")]
public sealed virtual Task Disable(string owner, string name, long workflowId);
    [ManualRouteAttribute("PUT", "/repos/{owner}/{repo}/actions/workflows/{workflow_id}/enable")]
public sealed virtual Task Enable(string owner, string name, string workflowFileName);
    [ManualRouteAttribute("PUT", "/repos/{owner}/{repo}/actions/workflows/{workflow_id}/enable")]
public sealed virtual Task Enable(string owner, string name, long workflowId);
    [ManualRouteAttribute("GET", "/repos/{owner}/{repo}/actions/workflows/{workflow_id}")]
public sealed virtual Task`1<Workflow> Get(string owner, string name, string workflowFileName);
    [ManualRouteAttribute("GET", "/repos/{owner}/{repo}/actions/workflows/{workflow_id}")]
public sealed virtual Task`1<Workflow> Get(string owner, string name, long workflowId);
    [ManualRouteAttribute("GET", "/repos/{owner}/{repo}/actions/workflows/{workflow_id}/timing")]
public sealed virtual Task`1<WorkflowUsage> GetUsage(string owner, string name, string workflowFileName);
    [ManualRouteAttribute("GET", "/repos/{owner}/{repo}/actions/workflows/{workflow_id}/timing")]
public sealed virtual Task`1<WorkflowUsage> GetUsage(string owner, string name, long workflowId);
    [ManualRouteAttribute("GET", "/repos/{owner}/{repo}/actions/workflows")]
public sealed virtual Task`1<WorkflowsResponse> List(string owner, string name);
    [AsyncStateMachineAttribute("Octokit.ActionsWorkflowsClient/<List>d__12")]
[ManualRouteAttribute("GET", "/repos/{owner}/{repo}/actions/workflows")]
public sealed virtual Task`1<WorkflowsResponse> List(string owner, string name, ApiOptions options);
    [CompilerGeneratedAttribute]
public sealed virtual IActionsWorkflowJobsClient get_Jobs();
    [CompilerGeneratedAttribute]
private void set_Jobs(IActionsWorkflowJobsClient value);
    [CompilerGeneratedAttribute]
public sealed virtual IActionsWorkflowRunsClient get_Runs();
    [CompilerGeneratedAttribute]
private void set_Runs(IActionsWorkflowRunsClient value);
}
public class Octokit.ActivitiesClient : ApiClient {
    [CompilerGeneratedAttribute]
private IEventsClient <Events>k__BackingField;
    [CompilerGeneratedAttribute]
private IStarredClient <Starring>k__BackingField;
    [CompilerGeneratedAttribute]
private IWatchedClient <Watching>k__BackingField;
    [CompilerGeneratedAttribute]
private IFeedsClient <Feeds>k__BackingField;
    [CompilerGeneratedAttribute]
private INotificationsClient <Notifications>k__BackingField;
    public IEventsClient Events { get; private set; }
    public IStarredClient Starring { get; private set; }
    public IWatchedClient Watching { get; private set; }
    public IFeedsClient Feeds { get; private set; }
    public INotificationsClient Notifications { get; private set; }
    public ActivitiesClient(IApiConnection apiConnection);
    [CompilerGeneratedAttribute]
public sealed virtual IEventsClient get_Events();
    [CompilerGeneratedAttribute]
private void set_Events(IEventsClient value);
    [CompilerGeneratedAttribute]
public sealed virtual IStarredClient get_Starring();
    [CompilerGeneratedAttribute]
private void set_Starring(IStarredClient value);
    [CompilerGeneratedAttribute]
public sealed virtual IWatchedClient get_Watching();
    [CompilerGeneratedAttribute]
private void set_Watching(IWatchedClient value);
    [CompilerGeneratedAttribute]
public sealed virtual IFeedsClient get_Feeds();
    [CompilerGeneratedAttribute]
private void set_Feeds(IFeedsClient value);
    [CompilerGeneratedAttribute]
public sealed virtual INotificationsClient get_Notifications();
    [CompilerGeneratedAttribute]
private void set_Notifications(INotificationsClient value);
}
[DebuggerDisplayAttribute("{DebuggerDisplay,nq}")]
public class Octokit.Activity : object {
    [CompilerGeneratedAttribute]
private string <Type>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <Public>k__BackingField;
    [CompilerGeneratedAttribute]
private Repository <Repo>k__BackingField;
    [CompilerGeneratedAttribute]
private User <Actor>k__BackingField;
    [CompilerGeneratedAttribute]
private Organization <Org>k__BackingField;
    [CompilerGeneratedAttribute]
private DateTimeOffset <CreatedAt>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Id>k__BackingField;
    [CompilerGeneratedAttribute]
private ActivityPayload <Payload>k__BackingField;
    public string Type { get; private set; }
    public bool Public { get; private set; }
    public Repository Repo { get; private set; }
    public User Actor { get; private set; }
    public Organization Org { get; private set; }
    public DateTimeOffset CreatedAt { get; private set; }
    public string Id { get; private set; }
    public ActivityPayload Payload { get; private set; }
    internal string DebuggerDisplay { get; }
    public Activity(string type, bool public, Repository repo, User actor, Organization org, DateTimeOffset createdAt, string id, ActivityPayload payload);
    [CompilerGeneratedAttribute]
public string get_Type();
    [CompilerGeneratedAttribute]
private void set_Type(string value);
    [CompilerGeneratedAttribute]
public bool get_Public();
    [CompilerGeneratedAttribute]
private void set_Public(bool value);
    [CompilerGeneratedAttribute]
public Repository get_Repo();
    [CompilerGeneratedAttribute]
private void set_Repo(Repository value);
    [CompilerGeneratedAttribute]
public User get_Actor();
    [CompilerGeneratedAttribute]
private void set_Actor(User value);
    [CompilerGeneratedAttribute]
public Organization get_Org();
    [CompilerGeneratedAttribute]
private void set_Org(Organization value);
    [CompilerGeneratedAttribute]
public DateTimeOffset get_CreatedAt();
    [CompilerGeneratedAttribute]
private void set_CreatedAt(DateTimeOffset value);
    [CompilerGeneratedAttribute]
public string get_Id();
    [CompilerGeneratedAttribute]
private void set_Id(string value);
    [CompilerGeneratedAttribute]
public ActivityPayload get_Payload();
    [CompilerGeneratedAttribute]
private void set_Payload(ActivityPayload value);
    internal string get_DebuggerDisplay();
}
[DebuggerDisplayAttribute("{DebuggerDisplay,nq}")]
public class Octokit.ActivityPayload : object {
    [CompilerGeneratedAttribute]
private Repository <Repository>k__BackingField;
    [CompilerGeneratedAttribute]
private User <Sender>k__BackingField;
    [CompilerGeneratedAttribute]
private InstallationId <Installation>k__BackingField;
    public Repository Repository { get; protected set; }
    public User Sender { get; protected set; }
    public InstallationId Installation { get; protected set; }
    internal string DebuggerDisplay { get; }
    public ActivityPayload(Repository repository, User sender, InstallationId installation);
    [CompilerGeneratedAttribute]
public Repository get_Repository();
    [CompilerGeneratedAttribute]
protected void set_Repository(Repository value);
    [CompilerGeneratedAttribute]
public User get_Sender();
    [CompilerGeneratedAttribute]
protected void set_Sender(User value);
    [CompilerGeneratedAttribute]
public InstallationId get_Installation();
    [CompilerGeneratedAttribute]
protected void set_Installation(InstallationId value);
    internal string get_DebuggerDisplay();
}
[DebuggerDisplayAttribute("{DebuggerDisplay,nq}")]
public class Octokit.AdditionsAndDeletions : object {
    [CompilerGeneratedAttribute]
private DateTimeOffset <Timestamp>k__BackingField;
    [CompilerGeneratedAttribute]
private int <Additions>k__BackingField;
    [CompilerGeneratedAttribute]
private int <Deletions>k__BackingField;
    public DateTimeOffset Timestamp { get; private set; }
    public int Additions { get; private set; }
    public int Deletions { get; private set; }
    internal string DebuggerDisplay { get; }
    public AdditionsAndDeletions(DateTimeOffset timestamp, int additions, int deletions);
    public AdditionsAndDeletions(IList`1<long> additionsAndDeletions);
    [CompilerGeneratedAttribute]
public DateTimeOffset get_Timestamp();
    [CompilerGeneratedAttribute]
private void set_Timestamp(DateTimeOffset value);
    [CompilerGeneratedAttribute]
public int get_Additions();
    [CompilerGeneratedAttribute]
private void set_Additions(int value);
    [CompilerGeneratedAttribute]
public int get_Deletions();
    [CompilerGeneratedAttribute]
private void set_Deletions(int value);
    internal string get_DebuggerDisplay();
}
[DebuggerDisplayAttribute("{DebuggerDisplay,nq}")]
public class Octokit.AdminStats : object {
    [CompilerGeneratedAttribute]
private AdminStatsRepos <Repos>k__BackingField;
    [CompilerGeneratedAttribute]
private AdminStatsHooks <Hooks>k__BackingField;
    [CompilerGeneratedAttribute]
private AdminStatsPages <Pages>k__BackingField;
    [CompilerGeneratedAttribute]
private AdminStatsOrgs <Orgs>k__BackingField;
    [CompilerGeneratedAttribute]
private AdminStatsUsers <Users>k__BackingField;
    [CompilerGeneratedAttribute]
private AdminStatsPulls <Pulls>k__BackingField;
    [CompilerGeneratedAttribute]
private AdminStatsIssues <Issues>k__BackingField;
    [CompilerGeneratedAttribute]
private AdminStatsMilestones <Milestones>k__BackingField;
    [CompilerGeneratedAttribute]
private AdminStatsGists <Gists>k__BackingField;
    [CompilerGeneratedAttribute]
private AdminStatsComments <Comments>k__BackingField;
    public AdminStatsRepos Repos { get; private set; }
    public AdminStatsHooks Hooks { get; private set; }
    public AdminStatsPages Pages { get; private set; }
    public AdminStatsOrgs Orgs { get; private set; }
    public AdminStatsUsers Users { get; private set; }
    public AdminStatsPulls Pulls { get; private set; }
    public AdminStatsIssues Issues { get; private set; }
    public AdminStatsMilestones Milestones { get; private set; }
    public AdminStatsGists Gists { get; private set; }
    public AdminStatsComments Comments { get; private set; }
    internal string DebuggerDisplay { get; }
    public AdminStats(AdminStatsRepos repos, AdminStatsHooks hooks, AdminStatsPages pages, AdminStatsOrgs orgs, AdminStatsUsers users, AdminStatsPulls pulls, AdminStatsIssues issues, AdminStatsMilestones milestones, AdminStatsGists gists, AdminStatsComments comments);
    [CompilerGeneratedAttribute]
public AdminStatsRepos get_Repos();
    [CompilerGeneratedAttribute]
private void set_Repos(AdminStatsRepos value);
    [CompilerGeneratedAttribute]
public AdminStatsHooks get_Hooks();
    [CompilerGeneratedAttribute]
private void set_Hooks(AdminStatsHooks value);
    [CompilerGeneratedAttribute]
public AdminStatsPages get_Pages();
    [CompilerGeneratedAttribute]
private void set_Pages(AdminStatsPages value);
    [CompilerGeneratedAttribute]
public AdminStatsOrgs get_Orgs();
    [CompilerGeneratedAttribute]
private void set_Orgs(AdminStatsOrgs value);
    [CompilerGeneratedAttribute]
public AdminStatsUsers get_Users();
    [CompilerGeneratedAttribute]
private void set_Users(AdminStatsUsers value);
    [CompilerGeneratedAttribute]
public AdminStatsPulls get_Pulls();
    [CompilerGeneratedAttribute]
private void set_Pulls(AdminStatsPulls value);
    [CompilerGeneratedAttribute]
public AdminStatsIssues get_Issues();
    [CompilerGeneratedAttribute]
private void set_Issues(AdminStatsIssues value);
    [CompilerGeneratedAttribute]
public AdminStatsMilestones get_Milestones();
    [CompilerGeneratedAttribute]
private void set_Milestones(AdminStatsMilestones value);
    [CompilerGeneratedAttribute]
public AdminStatsGists get_Gists();
    [CompilerGeneratedAttribute]
private void set_Gists(AdminStatsGists value);
    [CompilerGeneratedAttribute]
public AdminStatsComments get_Comments();
    [CompilerGeneratedAttribute]
private void set_Comments(AdminStatsComments value);
    internal string get_DebuggerDisplay();
}
[DebuggerDisplayAttribute("{DebuggerDisplay,nq}")]
public class Octokit.AdminStatsComments : object {
    [CompilerGeneratedAttribute]
private int <TotalCommitComments>k__BackingField;
    [CompilerGeneratedAttribute]
private int <TotalGistComments>k__BackingField;
    [CompilerGeneratedAttribute]
private int <TotalIssueComments>k__BackingField;
    [CompilerGeneratedAttribute]
private int <TotalPullRequestComments>k__BackingField;
    public int TotalCommitComments { get; private set; }
    public int TotalGistComments { get; private set; }
    public int TotalIssueComments { get; private set; }
    public int TotalPullRequestComments { get; private set; }
    internal string DebuggerDisplay { get; }
    public AdminStatsComments(int totalCommitComments, int totalGistComments, int totalIssueComments, int totalPullRequestComments);
    [CompilerGeneratedAttribute]
public int get_TotalCommitComments();
    [CompilerGeneratedAttribute]
private void set_TotalCommitComments(int value);
    [CompilerGeneratedAttribute]
public int get_TotalGistComments();
    [CompilerGeneratedAttribute]
private void set_TotalGistComments(int value);
    [CompilerGeneratedAttribute]
public int get_TotalIssueComments();
    [CompilerGeneratedAttribute]
private void set_TotalIssueComments(int value);
    [CompilerGeneratedAttribute]
public int get_TotalPullRequestComments();
    [CompilerGeneratedAttribute]
private void set_TotalPullRequestComments(int value);
    internal string get_DebuggerDisplay();
}
[DebuggerDisplayAttribute("{DebuggerDisplay,nq}")]
public class Octokit.AdminStatsGists : object {
    [CompilerGeneratedAttribute]
private int <TotalGists>k__BackingField;
    [CompilerGeneratedAttribute]
private int <PrivateGists>k__BackingField;
    [CompilerGeneratedAttribute]
private int <PublicGists>k__BackingField;
    public int TotalGists { get; private set; }
    public int PrivateGists { get; private set; }
    public int PublicGists { get; private set; }
    internal string DebuggerDisplay { get; }
    public AdminStatsGists(int totalGists, int privateGists, int publicGists);
    [CompilerGeneratedAttribute]
public int get_TotalGists();
    [CompilerGeneratedAttribute]
private void set_TotalGists(int value);
    [CompilerGeneratedAttribute]
public int get_PrivateGists();
    [CompilerGeneratedAttribute]
private void set_PrivateGists(int value);
    [CompilerGeneratedAttribute]
public int get_PublicGists();
    [CompilerGeneratedAttribute]
private void set_PublicGists(int value);
    internal string get_DebuggerDisplay();
}
[DebuggerDisplayAttribute("{DebuggerDisplay,nq}")]
public class Octokit.AdminStatsHooks : object {
    [CompilerGeneratedAttribute]
private int <TotalHooks>k__BackingField;
    [CompilerGeneratedAttribute]
private int <ActiveHooks>k__BackingField;
    [CompilerGeneratedAttribute]
private int <InactiveHooks>k__BackingField;
    public int TotalHooks { get; private set; }
    public int ActiveHooks { get; private set; }
    public int InactiveHooks { get; private set; }
    internal string DebuggerDisplay { get; }
    public AdminStatsHooks(int totalHooks, int activeHooks, int inactiveHooks);
    [CompilerGeneratedAttribute]
public int get_TotalHooks();
    [CompilerGeneratedAttribute]
private void set_TotalHooks(int value);
    [CompilerGeneratedAttribute]
public int get_ActiveHooks();
    [CompilerGeneratedAttribute]
private void set_ActiveHooks(int value);
    [CompilerGeneratedAttribute]
public int get_InactiveHooks();
    [CompilerGeneratedAttribute]
private void set_InactiveHooks(int value);
    internal string get_DebuggerDisplay();
}
[DebuggerDisplayAttribute("{DebuggerDisplay,nq}")]
public class Octokit.AdminStatsIssues : object {
    [CompilerGeneratedAttribute]
private int <TotalIssues>k__BackingField;
    [CompilerGeneratedAttribute]
private int <OpenIssues>k__BackingField;
    [CompilerGeneratedAttribute]
private int <ClosedIssues>k__BackingField;
    public int TotalIssues { get; private set; }
    public int OpenIssues { get; private set; }
    public int ClosedIssues { get; private set; }
    internal string DebuggerDisplay { get; }
    public AdminStatsIssues(int totalIssues, int openIssues, int closedIssues);
    [CompilerGeneratedAttribute]
public int get_TotalIssues();
    [CompilerGeneratedAttribute]
private void set_TotalIssues(int value);
    [CompilerGeneratedAttribute]
public int get_OpenIssues();
    [CompilerGeneratedAttribute]
private void set_OpenIssues(int value);
    [CompilerGeneratedAttribute]
public int get_ClosedIssues();
    [CompilerGeneratedAttribute]
private void set_ClosedIssues(int value);
    internal string get_DebuggerDisplay();
}
[DebuggerDisplayAttribute("{DebuggerDisplay,nq}")]
public class Octokit.AdminStatsMilestones : object {
    [CompilerGeneratedAttribute]
private int <TotalMilestones>k__BackingField;
    [CompilerGeneratedAttribute]
private int <OpenMilestones>k__BackingField;
    [CompilerGeneratedAttribute]
private int <ClosedMilestones>k__BackingField;
    public int TotalMilestones { get; private set; }
    public int OpenMilestones { get; private set; }
    public int ClosedMilestones { get; private set; }
    internal string DebuggerDisplay { get; }
    public AdminStatsMilestones(int totalMilestones, int openMilestones, int closedMilestones);
    [CompilerGeneratedAttribute]
public int get_TotalMilestones();
    [CompilerGeneratedAttribute]
private void set_TotalMilestones(int value);
    [CompilerGeneratedAttribute]
public int get_OpenMilestones();
    [CompilerGeneratedAttribute]
private void set_OpenMilestones(int value);
    [CompilerGeneratedAttribute]
public int get_ClosedMilestones();
    [CompilerGeneratedAttribute]
private void set_ClosedMilestones(int value);
    internal string get_DebuggerDisplay();
}
[DebuggerDisplayAttribute("{DebuggerDisplay,nq}")]
public class Octokit.AdminStatsOrgs : object {
    [CompilerGeneratedAttribute]
private int <TotalOrgs>k__BackingField;
    [CompilerGeneratedAttribute]
private int <DisabledOrgs>k__BackingField;
    [CompilerGeneratedAttribute]
private int <TotalTeams>k__BackingField;
    [CompilerGeneratedAttribute]
private int <TotalTeamMembers>k__BackingField;
    public int TotalOrgs { get; private set; }
    public int DisabledOrgs { get; private set; }
    public int TotalTeams { get; private set; }
    public int TotalTeamMembers { get; private set; }
    internal string DebuggerDisplay { get; }
    public AdminStatsOrgs(int totalOrgs, int disabledOrgs, int totalTeams, int totalTeamMembers);
    [CompilerGeneratedAttribute]
public int get_TotalOrgs();
    [CompilerGeneratedAttribute]
private void set_TotalOrgs(int value);
    [CompilerGeneratedAttribute]
public int get_DisabledOrgs();
    [CompilerGeneratedAttribute]
private void set_DisabledOrgs(int value);
    [CompilerGeneratedAttribute]
public int get_TotalTeams();
    [CompilerGeneratedAttribute]
private void set_TotalTeams(int value);
    [CompilerGeneratedAttribute]
public int get_TotalTeamMembers();
    [CompilerGeneratedAttribute]
private void set_TotalTeamMembers(int value);
    internal string get_DebuggerDisplay();
}
[DebuggerDisplayAttribute("{DebuggerDisplay,nq}")]
public class Octokit.AdminStatsPages : object {
    [CompilerGeneratedAttribute]
private int <TotalPages>k__BackingField;
    public int TotalPages { get; private set; }
    internal string DebuggerDisplay { get; }
    public AdminStatsPages(int totalPages);
    [CompilerGeneratedAttribute]
public int get_TotalPages();
    [CompilerGeneratedAttribute]
private void set_TotalPages(int value);
    internal string get_DebuggerDisplay();
}
[DebuggerDisplayAttribute("{DebuggerDisplay,nq}")]
public class Octokit.AdminStatsPulls : object {
    [CompilerGeneratedAttribute]
private int <TotalPulls>k__BackingField;
    [CompilerGeneratedAttribute]
private int <MergedPulls>k__BackingField;
    [CompilerGeneratedAttribute]
private int <MergeablePulls>k__BackingField;
    [CompilerGeneratedAttribute]
private int <UnmergeablePulls>k__BackingField;
    public int TotalPulls { get; private set; }
    public int MergedPulls { get; private set; }
    public int MergeablePulls { get; private set; }
    public int UnmergeablePulls { get; private set; }
    internal string DebuggerDisplay { get; }
    public AdminStatsPulls(int totalPulls, int mergedPulls, int mergeablePulls, int unmergeablePulls);
    [CompilerGeneratedAttribute]
public int get_TotalPulls();
    [CompilerGeneratedAttribute]
private void set_TotalPulls(int value);
    [CompilerGeneratedAttribute]
public int get_MergedPulls();
    [CompilerGeneratedAttribute]
private void set_MergedPulls(int value);
    [CompilerGeneratedAttribute]
public int get_MergeablePulls();
    [CompilerGeneratedAttribute]
private void set_MergeablePulls(int value);
    [CompilerGeneratedAttribute]
public int get_UnmergeablePulls();
    [CompilerGeneratedAttribute]
private void set_UnmergeablePulls(int value);
    internal string get_DebuggerDisplay();
}
[DebuggerDisplayAttribute("{DebuggerDisplay,nq}")]
public class Octokit.AdminStatsRepos : object {
    [CompilerGeneratedAttribute]
private int <TotalRepos>k__BackingField;
    [CompilerGeneratedAttribute]
private int <RootRepos>k__BackingField;
    [CompilerGeneratedAttribute]
private int <ForkRepos>k__BackingField;
    [CompilerGeneratedAttribute]
private int <OrgRepos>k__BackingField;
    [CompilerGeneratedAttribute]
private int <TotalPushes>k__BackingField;
    [CompilerGeneratedAttribute]
private int <TotalWikis>k__BackingField;
    public int TotalRepos { get; private set; }
    public int RootRepos { get; private set; }
    public int ForkRepos { get; private set; }
    public int OrgRepos { get; private set; }
    public int TotalPushes { get; private set; }
    public int TotalWikis { get; private set; }
    internal string DebuggerDisplay { get; }
    public AdminStatsRepos(int totalRepos, int rootRepos, int forkRepos, int orgRepos, int totalPushes, int totalWikis);
    [CompilerGeneratedAttribute]
public int get_TotalRepos();
    [CompilerGeneratedAttribute]
private void set_TotalRepos(int value);
    [CompilerGeneratedAttribute]
public int get_RootRepos();
    [CompilerGeneratedAttribute]
private void set_RootRepos(int value);
    [CompilerGeneratedAttribute]
public int get_ForkRepos();
    [CompilerGeneratedAttribute]
private void set_ForkRepos(int value);
    [CompilerGeneratedAttribute]
public int get_OrgRepos();
    [CompilerGeneratedAttribute]
private void set_OrgRepos(int value);
    [CompilerGeneratedAttribute]
public int get_TotalPushes();
    [CompilerGeneratedAttribute]
private void set_TotalPushes(int value);
    [CompilerGeneratedAttribute]
public int get_TotalWikis();
    [CompilerGeneratedAttribute]
private void set_TotalWikis(int value);
    internal string get_DebuggerDisplay();
}
[DebuggerDisplayAttribute("{DebuggerDisplay,nq}")]
public class Octokit.AdminStatsUsers : object {
    [CompilerGeneratedAttribute]
private int <TotalUsers>k__BackingField;
    [CompilerGeneratedAttribute]
private int <AdminUsers>k__BackingField;
    [CompilerGeneratedAttribute]
private int <SuspendedUsers>k__BackingField;
    public int TotalUsers { get; private set; }
    public int AdminUsers { get; private set; }
    public int SuspendedUsers { get; private set; }
    internal string DebuggerDisplay { get; }
    public AdminStatsUsers(int totalUsers, int adminUsers, int suspendedUsers);
    [CompilerGeneratedAttribute]
public int get_TotalUsers();
    [CompilerGeneratedAttribute]
private void set_TotalUsers(int value);
    [CompilerGeneratedAttribute]
public int get_AdminUsers();
    [CompilerGeneratedAttribute]
private void set_AdminUsers(int value);
    [CompilerGeneratedAttribute]
public int get_SuspendedUsers();
    [CompilerGeneratedAttribute]
private void set_SuspendedUsers(int value);
    internal string get_DebuggerDisplay();
}
[DebuggerDisplayAttribute("{DebuggerDisplay,nq}")]
public class Octokit.AdvancedSecurity : object {
    [CompilerGeneratedAttribute]
private string <Status>k__BackingField;
    public string Status { get; protected set; }
    internal string DebuggerDisplay { get; }
    public AdvancedSecurity(string status);
    [CompilerGeneratedAttribute]
public string get_Status();
    [CompilerGeneratedAttribute]
protected void set_Status(string value);
    internal string get_DebuggerDisplay();
}
[DebuggerDisplayAttribute("{DebuggerDisplay,nq}")]
public class Octokit.AdvancedSecurityRequest : object {
    [CompilerGeneratedAttribute]
private Nullable`1<Status> <Status>k__BackingField;
    public Nullable`1<Status> Status { get; public set; }
    internal string DebuggerDisplay { get; }
    public AdvancedSecurityRequest(Nullable`1<Status> status);
    [CompilerGeneratedAttribute]
public Nullable`1<Status> get_Status();
    [CompilerGeneratedAttribute]
public void set_Status(Nullable`1<Status> value);
    internal string get_DebuggerDisplay();
}
public abstract class Octokit.ApiClient : object {
    [CompilerGeneratedAttribute]
private IApiConnection <ApiConnection>k__BackingField;
    [CompilerGeneratedAttribute]
private IConnection <Connection>k__BackingField;
    protected IApiConnection ApiConnection { get; private set; }
    protected IConnection Connection { get; private set; }
    protected ApiClient(IApiConnection apiConnection);
    [CompilerGeneratedAttribute]
protected IApiConnection get_ApiConnection();
    [CompilerGeneratedAttribute]
private void set_ApiConnection(IApiConnection value);
    [CompilerGeneratedAttribute]
protected IConnection get_Connection();
    [CompilerGeneratedAttribute]
private void set_Connection(IConnection value);
}
public class Octokit.ApiConnection : object {
    private IApiPagination _pagination;
    [CompilerGeneratedAttribute]
private IConnection <Connection>k__BackingField;
    public IConnection Connection { get; private set; }
    public ApiConnection(IConnection connection);
    protected ApiConnection(IConnection connection, IApiPagination pagination);
    [CompilerGeneratedAttribute]
public sealed virtual IConnection get_Connection();
    [CompilerGeneratedAttribute]
private void set_Connection(IConnection value);
    public sealed virtual Task`1<T> Get(Uri uri);
    [AsyncStateMachineAttribute("Octokit.ApiConnection/<Get>d__8`1")]
public sealed virtual Task`1<T> Get(Uri uri, IDictionary`2<string, string> parameters);
    [AsyncStateMachineAttribute("Octokit.ApiConnection/<Get>d__9`1")]
public sealed virtual Task`1<T> Get(Uri uri, IDictionary`2<string, string> parameters, string accepts);
    [AsyncStateMachineAttribute("Octokit.ApiConnection/<Get>d__10`1")]
public Task`1<T> Get(Uri uri, IDictionary`2<string, string> parameters, string accepts, Func`2<object, object> preprocessResponseBody);
    [AsyncStateMachineAttribute("Octokit.ApiConnection/<GetHtml>d__11")]
public sealed virtual Task`1<string> GetHtml(Uri uri, IDictionary`2<string, string> parameters);
    [AsyncStateMachineAttribute("Octokit.ApiConnection/<GetRaw>d__12")]
public sealed virtual Task`1<Byte[]> GetRaw(Uri uri, IDictionary`2<string, string> parameters);
    [AsyncStateMachineAttribute("Octokit.ApiConnection/<GetRawStream>d__13")]
public sealed virtual Task`1<Stream> GetRawStream(Uri uri, IDictionary`2<string, string> parameters);
    public sealed virtual Task`1<IReadOnlyList`1<T>> GetAll(Uri uri);
    public sealed virtual Task`1<IReadOnlyList`1<T>> GetAll(Uri uri, ApiOptions options);
    public sealed virtual Task`1<IReadOnlyList`1<T>> GetAll(Uri uri, IDictionary`2<string, string> parameters);
    public sealed virtual Task`1<IReadOnlyList`1<T>> GetAll(Uri uri, string accepts);
    public sealed virtual Task`1<IReadOnlyList`1<T>> GetAll(Uri uri, IDictionary`2<string, string> parameters, ApiOptions options);
    public sealed virtual Task`1<IReadOnlyList`1<T>> GetAll(Uri uri, IDictionary`2<string, string> parameters, string accepts);
    public sealed virtual Task`1<IReadOnlyList`1<T>> GetAll(Uri uri, IDictionary`2<string, string> parameters, string accepts, ApiOptions options);
    public sealed virtual Task`1<IReadOnlyList`1<T>> GetAll(Uri uri, IDictionary`2<string, string> parameters, string accepts, ApiOptions options, Func`2<object, object> preprocessResponseBody);
    public sealed virtual Task Post(Uri uri, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Octokit.ApiConnection/<Post>d__23`1")]
public sealed virtual Task`1<T> Post(Uri uri, CancellationToken cancellationToken);
    public sealed virtual Task`1<T> Post(Uri uri, object data, CancellationToken cancellationToken);
    public sealed virtual Task`1<T> Post(Uri uri, object data, string accepts, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Octokit.ApiConnection/<Post>d__26`1")]
public sealed virtual Task`1<T> Post(Uri uri, object data, string accepts, string contentType, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Octokit.ApiConnection/<Post>d__27`1")]
public sealed virtual Task`1<T> Post(Uri uri, object data, string accepts, string contentType, string twoFactorAuthenticationCode, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Octokit.ApiConnection/<Post>d__28`1")]
public sealed virtual Task`1<T> Post(Uri uri, object data, string accepts, string contentType, TimeSpan timeout, CancellationToken cancellationToken);
    public sealed virtual Task Put(Uri uri);
    public sealed virtual Task Put(Uri uri, object data);
    [AsyncStateMachineAttribute("Octokit.ApiConnection/<Put>d__31`1")]
public sealed virtual Task`1<T> Put(Uri uri, object data);
    [AsyncStateMachineAttribute("Octokit.ApiConnection/<Put>d__32`1")]
public sealed virtual Task`1<T> Put(Uri uri, object data, string twoFactorAuthenticationCode);
    [AsyncStateMachineAttribute("Octokit.ApiConnection/<Put>d__33`1")]
public sealed virtual Task`1<T> Put(Uri uri, object data, string twoFactorAuthenticationCode, string accepts);
    public sealed virtual Task Patch(Uri uri);
    public sealed virtual Task Patch(Uri uri, object data);
    public sealed virtual Task Patch(Uri uri, string accepts);
    public sealed virtual Task Patch(Uri uri, object data, string accepts);
    [AsyncStateMachineAttribute("Octokit.ApiConnection/<Patch>d__38`1")]
public sealed virtual Task`1<T> Patch(Uri uri, object data);
    [AsyncStateMachineAttribute("Octokit.ApiConnection/<Patch>d__39`1")]
public sealed virtual Task`1<T> Patch(Uri uri, object data, string accepts);
    public sealed virtual Task Delete(Uri uri);
    public sealed virtual Task Delete(Uri uri, string twoFactorAuthenticationCode);
    public sealed virtual Task Delete(Uri uri, object data);
    public sealed virtual Task Delete(Uri uri, object data, string accepts);
    [AsyncStateMachineAttribute("Octokit.ApiConnection/<Delete>d__44`1")]
public sealed virtual Task`1<T> Delete(Uri uri, object data);
    [AsyncStateMachineAttribute("Octokit.ApiConnection/<Delete>d__45`1")]
public sealed virtual Task`1<T> Delete(Uri uri, string accepts);
    [AsyncStateMachineAttribute("Octokit.ApiConnection/<Delete>d__46`1")]
public sealed virtual Task`1<T> Delete(Uri uri, object data, string accepts);
    [AsyncStateMachineAttribute("Octokit.ApiConnection/<GetQueuedOperation>d__47`1")]
public sealed virtual Task`1<IReadOnlyList`1<T>> GetQueuedOperation(Uri uri, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Octokit.ApiConnection/<GetPage>d__48`1")]
private Task`1<IReadOnlyPagedCollection`1<T>> GetPage(Uri uri, IDictionary`2<string, string> parameters, string accepts, Func`2<object, object> preprocessResponseBody);
    [AsyncStateMachineAttribute("Octokit.ApiConnection/<GetPage>d__49`1")]
private Task`1<IReadOnlyPagedCollection`1<TU>> GetPage(Uri uri, IDictionary`2<string, string> parameters, string accepts, ApiOptions options, Func`2<object, object> preprocessResponseBody);
}
[DebuggerDisplayAttribute("{DebuggerDisplay,nq}")]
public class Octokit.ApiError : object {
    [CompilerGeneratedAttribute]
private string <Message>k__BackingField;
    [CompilerGeneratedAttribute]
private string <DocumentationUrl>k__BackingField;
    [CompilerGeneratedAttribute]
private IReadOnlyList`1<ApiErrorDetail> <Errors>k__BackingField;
    public string Message { get; private set; }
    public string DocumentationUrl { get; private set; }
    public IReadOnlyList`1<ApiErrorDetail> Errors { get; private set; }
    internal string DebuggerDisplay { get; }
    public ApiError(string message);
    public ApiError(string message, string documentationUrl, IReadOnlyList`1<ApiErrorDetail> errors);
    [CompilerGeneratedAttribute]
public string get_Message();
    [CompilerGeneratedAttribute]
private void set_Message(string value);
    [CompilerGeneratedAttribute]
public string get_DocumentationUrl();
    [CompilerGeneratedAttribute]
private void set_DocumentationUrl(string value);
    [CompilerGeneratedAttribute]
public IReadOnlyList`1<ApiErrorDetail> get_Errors();
    [CompilerGeneratedAttribute]
private void set_Errors(IReadOnlyList`1<ApiErrorDetail> value);
    internal string get_DebuggerDisplay();
}
[DebuggerDisplayAttribute("{DebuggerDisplay,nq}")]
public class Octokit.ApiErrorDetail : object {
    [CompilerGeneratedAttribute]
private string <Message>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Code>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Field>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Resource>k__BackingField;
    public string Message { get; private set; }
    public string Code { get; private set; }
    public string Field { get; private set; }
    public string Resource { get; private set; }
    internal string DebuggerDisplay { get; }
    public ApiErrorDetail(string message, string code, string field, string resource);
    [CompilerGeneratedAttribute]
public string get_Message();
    [CompilerGeneratedAttribute]
private void set_Message(string value);
    [CompilerGeneratedAttribute]
public string get_Code();
    [CompilerGeneratedAttribute]
private void set_Code(string value);
    [CompilerGeneratedAttribute]
public string get_Field();
    [CompilerGeneratedAttribute]
private void set_Field(string value);
    [CompilerGeneratedAttribute]
public string get_Resource();
    [CompilerGeneratedAttribute]
private void set_Resource(string value);
    internal string get_DebuggerDisplay();
}
[ExtensionAttribute]
internal static class Octokit.ApiErrorExtensions : object {
    [ExtensionAttribute]
public static string FirstErrorMessageSafe(ApiError apiError);
}
public class Octokit.ApiException : Exception {
    private static IJsonSerializer _jsonSerializer;
    [CompilerGeneratedAttribute]
private IResponse <HttpResponse>k__BackingField;
    [CompilerGeneratedAttribute]
private HttpStatusCode <StatusCode>k__BackingField;
    [CompilerGeneratedAttribute]
private ApiError <ApiError>k__BackingField;
    public IResponse HttpResponse { get; private set; }
    public string Message { get; }
    public HttpStatusCode StatusCode { get; private set; }
    public ApiError ApiError { get; private set; }
    protected string ApiErrorMessageSafe { get; }
    protected string HttpResponseBodySafe { get; }
    public ApiException(string message, HttpStatusCode httpStatusCode);
    public ApiException(string message, Exception innerException);
    public ApiException(IResponse response);
    public ApiException(IResponse response, Exception innerException);
    protected ApiException(ApiException innerException);
    protected ApiException(HttpStatusCode statusCode, Exception innerException);
    protected ApiException(ApiError apiError, HttpStatusCode statusCode, Exception innerException);
    protected ApiException(SerializationInfo info, StreamingContext context);
    private static ApiException();
    [CompilerGeneratedAttribute]
public IResponse get_HttpResponse();
    [CompilerGeneratedAttribute]
private void set_HttpResponse(IResponse value);
    public virtual string get_Message();
    [CompilerGeneratedAttribute]
public HttpStatusCode get_StatusCode();
    [CompilerGeneratedAttribute]
private void set_StatusCode(HttpStatusCode value);
    [CompilerGeneratedAttribute]
public ApiError get_ApiError();
    [CompilerGeneratedAttribute]
private void set_ApiError(ApiError value);
    private static ApiError GetApiErrorFromExceptionMessage(IResponse response);
    private static ApiError GetApiErrorFromExceptionMessage(string responseContent);
    [SecurityCriticalAttribute]
public virtual void GetObjectData(SerializationInfo info, StreamingContext context);
    protected string get_ApiErrorMessageSafe();
    protected string get_HttpResponseBodySafe();
    public virtual string ToString();
}
[ExtensionAttribute]
public static class Octokit.ApiExtensions : object {
    [ExtensionAttribute]
public static Task`1<IReadOnlyList`1<T>> GetAll(IApiConnection connection, Uri uri);
    [ExtensionAttribute]
public static Task`1<string> GetHtml(IApiConnection connection, Uri uri);
    [ExtensionAttribute]
public static Task`1<IApiResponse`1<string>> GetHtml(IConnection connection, Uri uri);
    [ExtensionAttribute]
public static Task`1<IApiResponse`1<T>> GetResponse(IConnection connection, Uri uri);
    [ExtensionAttribute]
public static Task`1<IApiResponse`1<T>> GetResponse(IConnection connection, Uri uri, CancellationToken cancellationToken);
    [ExtensionAttribute]
public static bool IsTrue(IResponse response);
}
public class Octokit.ApiInfo : object {
    [CompilerGeneratedAttribute]
private IReadOnlyList`1<string> <OauthScopes>k__BackingField;
    [CompilerGeneratedAttribute]
private IReadOnlyList`1<string> <AcceptedOauthScopes>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Etag>k__BackingField;
    [CompilerGeneratedAttribute]
private IReadOnlyDictionary`2<string, Uri> <Links>k__BackingField;
    [CompilerGeneratedAttribute]
private RateLimit <RateLimit>k__BackingField;
    [CompilerGeneratedAttribute]
private TimeSpan <ServerTimeDifference>k__BackingField;
    public IReadOnlyList`1<string> OauthScopes { get; private set; }
    public IReadOnlyList`1<string> AcceptedOauthScopes { get; private set; }
    public string Etag { get; private set; }
    public IReadOnlyDictionary`2<string, Uri> Links { get; private set; }
    public RateLimit RateLimit { get; private set; }
    public TimeSpan ServerTimeDifference { get; }
    public ApiInfo(IDictionary`2<string, Uri> links, IList`1<string> oauthScopes, IList`1<string> acceptedOauthScopes, string etag, RateLimit rateLimit, TimeSpan serverTimeDifference);
    [CompilerGeneratedAttribute]
public IReadOnlyList`1<string> get_OauthScopes();
    [CompilerGeneratedAttribute]
private void set_OauthScopes(IReadOnlyList`1<string> value);
    [CompilerGeneratedAttribute]
public IReadOnlyList`1<string> get_AcceptedOauthScopes();
    [CompilerGeneratedAttribute]
private void set_AcceptedOauthScopes(IReadOnlyList`1<string> value);
    [CompilerGeneratedAttribute]
public string get_Etag();
    [CompilerGeneratedAttribute]
private void set_Etag(string value);
    [CompilerGeneratedAttribute]
public IReadOnlyDictionary`2<string, Uri> get_Links();
    [CompilerGeneratedAttribute]
private void set_Links(IReadOnlyDictionary`2<string, Uri> value);
    [CompilerGeneratedAttribute]
public RateLimit get_RateLimit();
    [CompilerGeneratedAttribute]
private void set_RateLimit(RateLimit value);
    [CompilerGeneratedAttribute]
public TimeSpan get_ServerTimeDifference();
    public ApiInfo Clone();
}
[ExtensionAttribute]
public static class Octokit.ApiInfoExtensions : object {
    [ExtensionAttribute]
public static Uri GetPreviousPageUrl(ApiInfo info);
    [ExtensionAttribute]
public static Uri GetNextPageUrl(ApiInfo info);
    [ExtensionAttribute]
public static Uri GetFirstPageUrl(ApiInfo info);
    [ExtensionAttribute]
public static Uri GetLastPageUrl(ApiInfo info);
}
[DebuggerDisplayAttribute("{DebuggerDisplay,nq}")]
public class Octokit.ApiOptions : object {
    private static ApiOptions emptyOptions;
    [CompilerGeneratedAttribute]
private Nullable`1<int> <StartPage>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<int> <PageCount>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<int> <PageSize>k__BackingField;
    public static ApiOptions None { get; }
    public Nullable`1<int> StartPage { get; public set; }
    public Nullable`1<int> PageCount { get; public set; }
    public Nullable`1<int> PageSize { get; public set; }
    internal string DebuggerDisplay { get; }
    private static ApiOptions();
    public static ApiOptions get_None();
    [CompilerGeneratedAttribute]
public Nullable`1<int> get_StartPage();
    [CompilerGeneratedAttribute]
public void set_StartPage(Nullable`1<int> value);
    [CompilerGeneratedAttribute]
public Nullable`1<int> get_PageCount();
    [CompilerGeneratedAttribute]
public void set_PageCount(Nullable`1<int> value);
    [CompilerGeneratedAttribute]
public Nullable`1<int> get_PageSize();
    [CompilerGeneratedAttribute]
public void set_PageSize(Nullable`1<int> value);
    internal string get_DebuggerDisplay();
}
public class Octokit.ApiPagination : object {
    [AsyncStateMachineAttribute("Octokit.ApiPagination/<GetAllPages>d__0`1")]
public sealed virtual Task`1<IReadOnlyList`1<T>> GetAllPages(Func`1<Task`1<IReadOnlyPagedCollection`1<T>>> getFirstPage, Uri uri);
}
public static class Octokit.ApiUrls : object {
    private static Uri _currentUserAuthorizationsEndpoint;
    private static Uri _currentUserRepositoriesUrl;
    private static Uri _currentUserSshKeys;
    private static Uri _currentUserGpgKeys;
    private static Uri _currentUserStars;
    private static Uri _currentUserWatched;
    private static Uri _currentUserEmailsEndpoint;
    private static Uri _currentUserNotificationsEndpoint;
    private static Uri _currentUserAllIssues;
    private static Uri _currentUserOwnedAndMemberIssues;
    private static Uri _currentUserAllCodespaces;
    private static ApiUrls();
    public static Uri Authorizations();
    public static Uri Authorizations(long id);
    public static Uri AuthorizationsForClient(string clientId);
    public static Uri ApplicationAuthorization(string clientId);
    public static Uri AllPublicRepositories();
    public static Uri AllPublicRepositories(long since);
    public static Uri Repositories();
    public static Uri Repositories(string login);
    public static Uri Repositories(string owner, string repo);
    public static Uri OrganizationRepositories(string organization);
    public static Uri OrganizationCustomProperties(string organization);
    public static Uri OrganizationCustomProperty(string organization, string property);
    public static Uri OrganizationCustomPropertyValues(string organization);
    public static Uri OrganizationRepositorySecrets(string organization);
    public static Uri OrganizationRepositorySecret(string organization, string secret);
    public static Uri OrganizationRepositorySecretPublicKey(string organization);
    public static Uri OrganizationRepositorySecretRepositories(string organization, string secret);
    public static Uri OrganizationRepositorySecretRepository(string organization, string secret, long repoId);
    public static Uri UserOrganizations();
    public static Uri UserOrganizationMemberships();
    public static Uri UserOrganizations(string login);
    public static Uri AllOrganizations();
    public static Uri AllOrganizations(long since);
    public static Uri Organization(string organizationName);
    public static Uri SshKeys();
    public static Uri SshKeys(string login);
    public static Uri Keys();
    public static Uri Keys(string userName);
    public static Uri Keys(long keyId);
    public static Uri Emails();
    public static Uri Releases(string owner, string name);
    public static Uri ReleasesGenerateNotes(string owner, string name);
    public static Uri Releases(string owner, string name, long releaseId);
    public static Uri Releases(string owner, string name, string tag);
    public static Uri LatestRelease(string owner, string name);
    public static Uri ReleaseAssets(string owner, string name, long releaseId);
    public static Uri Asset(string owner, string name, int releaseAssetId);
    public static Uri Notifications();
    public static Uri Notifications(string owner, string name);
    public static Uri Notification(int notificationId);
    public static Uri NotificationSubscription(int notificationId);
    public static Uri AppManifestConversions(string code);
    public static Uri AccessTokens(long installationId);
    public static Uri App();
    public static Uri App(string slug);
    public static Uri Installations();
    public static Uri UserInstallationRepositories(long installationId);
    public static Uri RepoInstallation(string owner, string repo);
    public static Uri RepoInstallation(long repositoryId);
    public static Uri OrganizationInstallation(string organization);
    public static Uri UserInstallation(string username);
    public static Uri Installation(long installationId);
    public static Uri UserInstallations();
    public static Uri InstallationRepositories();
    public static Uri Issues();
    public static Uri IssuesForOwnedAndMember();
    public static Uri Issues(string owner, string name);
    public static Uri Issues(string organization);
    public static Uri Issue(string owner, string name, int issueNumber);
    public static Uri IssueLock(string owner, string name, int issueNumber);
    public static Uri IssueReactions(string owner, string name, int issueNumber);
    public static Uri IssueReactions(long repositoryId, int issueNumber);
    public static Uri IssueReaction(string owner, string name, int issueNumber, long reactionId);
    public static Uri IssueReaction(long repositoryId, int issueNumber, long reactionId);
    public static Uri IssueTimeline(string owner, string repo, int issueNumber);
    public static Uri IssueTimeline(long repositoryId, int issueNumber);
    public static Uri IssueComments(string owner, string name);
    public static Uri IssueComments(string owner, string name, int issueNumber);
    public static Uri IssueComment(string owner, string name, long commentId);
    public static Uri IssueCommentReactions(string owner, string name, long commentId);
    public static Uri IssueCommentReactions(long repositoryId, long commentId);
    public static Uri IssueCommentReaction(string owner, string name, long commentId, long reaction);
    public static Uri IssueCommentReaction(long repositoryId, long commentId, long reaction);
    public static Uri CommitComment(string owner, string name, long commentId);
    public static Uri CommitComments(string owner, string name, string sha);
    public static Uri CommitComments(string owner, string name);
    public static Uri CommitCommentReactions(string owner, string name, long commentId);
    public static Uri CommitCommentReactions(long repositoryId, long commentId);
    public static Uri CommitCommentReaction(string owner, string name, long commentId, long reaction);
    public static Uri CommitCommentReaction(long repositoryId, long commentId, long reaction);
    public static Uri Assignees(string owner, string name);
    public static Uri CheckAssignee(string owner, string name, string login);
    public static Uri IssueAssignees(string owner, string name, int issueNumber);
    public static Uri Members(string org);
    public static Uri Members(string org, OrganizationMembersFilter filter);
    public static Uri Members(string org, OrganizationMembersRole role);
    public static Uri Members(string org, OrganizationMembersFilter filter, OrganizationMembersRole role);
    public static Uri PublicMembers(string org);
    public static Uri CheckMember(string org, string name);
    public static Uri OrganizationMember(string org, string user);
    public static Uri CheckMemberPublic(string org, string name);
    public static Uri OrganizationMembership(string org, string name);
    public static Uri OrganizationMemberships(string org, string name);
    public static Uri OrganizationInvitations(string org);
    public static Uri OrganizationPendingInvitations(string org);
    public static Uri OrganizationFailedInvitations(string org);
    public static Uri CancelOrganizationInvitation(string org, long invitationId);
    public static Uri OutsideCollaborators(string org);
    public static Uri OutsideCollaborators(string org, OrganizationMembersFilter filter);
    public static Uri OutsideCollaborator(string org, string user);
    public static Uri Events(string owner, string name);
    public static Uri IssuesEvents(string owner, string name, int issueNumber);
    public static Uri IssuesEvents(string owner, string name);
    public static Uri IssuesEvent(string owner, string name, long eventId);
    public static Uri Milestone(string owner, string name, int milestoneNumber);
    public static Uri Milestones(string owner, string name);
    public static Uri Label(string owner, string name, string labelName);
    public static Uri Labels(string owner, string name);
    public static Uri IssueLabel(string owner, string name, int issueNumber, string labelName);
    public static Uri IssueLabels(string owner, string name, int issueNumber);
    public static Uri MilestoneLabels(string owner, string name, int milestoneNumber);
    public static Uri CreateCommitStatus(string owner, string name, string reference);
    public static Uri RepositoryHooks(string owner, string name);
    public static Uri RepositoryHookById(string owner, string name, int hookId);
    public static Uri RepositoryHookTest(string owner, string name, int hookId);
    public static Uri RepositoryHookPing(string owner, string name, int hookId);
    public static Uri OrganizationHooks(string org);
    public static Uri OrganizationHookById(string org, int hookId);
    public static Uri OrganizationHookPing(string org, int hookId);
    public static Uri CommitStatuses(string owner, string name, string reference);
    public static Uri CombinedCommitStatus(string owner, string name, string reference);
    public static Uri RepositoryForks(string owner, string name);
    public static Uri Watchers(string owner, string name);
    public static Uri Watched();
    public static Uri WatchedByUser(string user);
    public static Uri Watched(string owner, string name);
    public static Uri Stargazers(string owner, string name);
    public static Uri Starred();
    public static Uri StarredByUser(string user);
    public static Uri Starred(string owner, string name);
    public static Uri Tag(string owner, string name, string reference);
    public static Uri CreateTag(string owner, string name);
    public static Uri Events();
    public static Uri Feeds();
    public static Uri Gist();
    public static Uri Gist(string gistId);
    public static Uri ForkGist(string gistId);
    public static Uri PublicGists();
    public static Uri StarredGists();
    public static Uri UsersGists(string user);
    public static Uri StarGist(string gistId);
    public static Uri GistComments(string gistId);
    public static Uri GistCommits(string gistId);
    public static Uri PullRequest(string owner, string name, int pullRequestNumber);
    public static Uri PullRequests(string owner, string name);
    public static Uri MergePullRequest(string owner, string name, int pullRequestNumber);
    public static Uri PullRequestCommits(string owner, string name, int pullRequestNumber);
    public static Uri PullRequestFiles(string owner, string name, int pullRequestNumber);
    public static Uri GistComment(string gistId, long commentId);
    public static Uri Commit(string owner, string name, string reference);
    public static Uri Reference(string owner, string name);
    public static Uri Reference(string owner, string name, string referenceName);
    public static Uri CreateCommit(string owner, string name);
    public static Uri CreateMerge(string owner, string name);
    public static Uri NetworkEvents(string owner, string name);
    public static Uri OrganizationEvents(string organization);
    public static Uri ReceivedEvents(string user);
    public static Uri ReceivedEvents(string user, bool isPublic);
    public static Uri PerformedEvents(string user);
    public static Uri PerformedEvents(string user, bool isPublic);
    public static Uri OrganizationEvents(string user, string organization);
    public static Uri PullRequestReviewComments(string owner, string name, int pullRequestNumber);
    public static Uri PullRequestReviews(string owner, string name, int pullRequestNumber);
    public static Uri PullRequestReviewComment(string owner, string name, long commentId);
    public static Uri PullRequestReview(string owner, string name, int pullRequestNumber, long reviewId);
    public static Uri PullRequestReviewDismissal(long repositoryId, int pullRequestNumber, long reviewId);
    public static Uri PullRequestReviewDismissal(string owner, string name, int pullRequestNumber, long reviewId);
    public static Uri PullRequestReviewSubmit(long repositoryId, int pullRequestNumber, long reviewId);
    public static Uri PullRequestReviewSubmit(string owner, string name, int pullRequestNumber, long reviewId);
    public static Uri PullRequestReviewComments(long repositoryId, int pullRequestNumber, long reviewId);
    public static Uri PullRequestReviewComments(string owner, string name, int pullRequestNumber, long reviewId);
    public static Uri PullRequestReview(long repositoryId, int pullRequestNumber, long reviewId);
    public static Uri PullRequestReviewCommentReactions(string owner, string name, long commentId);
    public static Uri PullRequestReviewCommentReactions(long repositoryId, long commentId);
    public static Uri PullRequestReviewCommentReaction(string owner, string name, long commentId, long reaction);
    public static Uri PullRequestReviewCommentReaction(long repositoryId, long commentId, long reaction);
    public static Uri PullRequestReviewCommentsRepository(string owner, string name);
    public static Uri Blobs(string owner, string name);
    public static Uri Blob(string owner, string name, string reference);
    public static Uri Tree(string owner, string name);
    public static Uri Tree(string owner, string name, string reference);
    public static Uri TreeRecursive(string owner, string name, string reference);
    public static Uri OrganizationTeams(string organization);
    public static Uri UserTeams();
    public static Uri TeamChildTeams(long parentTeamId);
    public static Uri Teams(long teamId);
    public static Uri TeamsByOrganizationAndSlug(string org, string teamId);
    public static Uri TeamMember(long teamId, string login);
    public static Uri TeamMembers(long teamId);
    public static Uri TeamRepositories(long teamId);
    public static Uri TeamRepository(long teamId, string organization, string repoName);
    public static Uri TeamPermissionsForARepository(string org, string teamId, string owner, string repo);
    public static Uri TeamPendingInvitations(long teamId);
    public static Uri RepoCollaborators(string owner, string name);
    public static Uri RepoCollaborator(string owner, string repo, string user);
    public static Uri RepoCollaborator(long repositoryId, string user);
    public static Uri RepoCollaboratorPermission(string owner, string repo, string user);
    public static Uri RepoCollaboratorPermission(long repositoryId, string user);
    public static Uri RepoBranches(string owner, string name);
    public static Uri SearchRepositories();
    public static Uri SearchUsers();
    public static Uri SearchIssues();
    public static Uri SearchCode();
    public static Uri SearchLabels();
    public static Uri RepositoryCodeOwnersErrors(string owner, string name);
    public static Uri RepositoryCodeOwnersErrors(long repositoryId);
    public static Uri RepositoryContributors(string owner, string name);
    public static Uri RepositoryTopics(string owner, string name);
    public static Uri RepositoryTopics(long repositoryId);
    public static Uri RepositoryLanguages(string owner, string name);
    public static Uri RepositoryTeams(string owner, string name);
    public static Uri RepositoryTags(string owner, string name);
    public static Uri RepositoryTransfer(string owner, string name);
    public static Uri RepositoryTransfer(long repositoryId);
    public static Uri RepositoryCommit(string owner, string name, string reference);
    public static Uri RepositoryCommits(string owner, string name);
    public static Uri RepositoryCommitsBranchesWhereHead(string owner, string name, string reference);
    public static Uri RepositoryCommitsBranchesWhereHead(long repositoryId, string reference);
    public static Uri RepositoryCommitsPull(string owner, string name, string reference);
    public static Uri RepositoryCommitsPull(long repositoryId, string reference);
    public static Uri RepoCompare(string owner, string name, string base, string head);
    public static Uri RepoBranch(string owner, string name, string branchName);
    public static Uri RepoBranchProtection(string owner, string name, string branchName);
    public static Uri RepoBranchProtection(long repositoryId, string branchName);
    public static Uri RepoRequiredStatusChecks(string owner, string name, string branchName);
    public static Uri RepoRequiredStatusChecks(long repositoryId, string branchName);
    public static Uri RepoRequiredStatusChecksContexts(string owner, string name, string branchName);
    public static Uri RepoRequiredStatusChecksContexts(long repositoryId, string branchName);
    public static Uri RepoProtectedBranchReviewEnforcement(string owner, string name, string branchName);
    public static Uri RepoProtectedBranchReviewEnforcement(long repositoryId, string branchName);
    public static Uri RepoProtectedBranchAdminEnforcement(string owner, string name, string branchName);
    public static Uri RepoProtectedBranchAdminEnforcement(long repositoryId, string branchName);
    public static Uri RepoRestrictions(string owner, string name, string branchName);
    public static Uri RepoRestrictions(long repositoryId, string branchName);
    public static Uri RepoRestrictionsTeams(string owner, string name, string branchName);
    public static Uri RepoRestrictionsTeams(long repositoryId, string branchName);
    public static Uri RepoRestrictionsUsers(string owner, string name, string branchName);
    public static Uri RepoRestrictionsUsers(long repositoryId, string branchName);
    public static Uri Repository(string owner, string name);
    public static Uri RepositoryDeployKey(string owner, string name, int deployKeyId);
    public static Uri RepositoryDeployKeys(string owner, string name);
    public static Uri RepositoryVulnerabilityAlerts(string owner, string name);
    public static Uri DependencyReview(string owner, string name, string base, string head);
    public static Uri DependencySubmission(string owner, string name);
    public static Uri Deployments(string owner, string name);
    public static Uri DeploymentEnvironments(string owner, string name);
    public static Uri DeploymentStatuses(string owner, string name, long deploymentId);
    public static Uri Followers();
    public static Uri Followers(string login);
    public static Uri Following();
    public static Uri Following(string login);
    public static Uri IsFollowing(string following);
    public static Uri IsFollowing(string login, string following);
    public static Uri User(string login);
    public static Uri OauthAuthorize();
    public static Uri OauthDeviceCode();
    public static Uri OauthAccessToken();
    public static Uri RepositoryReadme(string owner, string name);
    public static Uri RepositoryContent(string owner, string name);
    public static Uri RepositoryContent(string owner, string name, string path);
    public static Uri RepositoryArchiveLink(string owner, string name, ArchiveFormat archiveFormat, string reference);
    public static Uri RepositoryContent(string owner, string name, string path, string reference);
    public static Uri RepositoryPage(string owner, string name);
    public static Uri RepositoryPageBuilds(string owner, string name);
    public static Uri RepositoryPageBuildsLatest(string owner, string name);
    public static Uri StatsContributors(string owner, string name);
    public static Uri StatsCommitActivity(string owner, string name);
    public static Uri StatsCodeFrequency(string owner, string name);
    public static Uri StatsParticipation(string owner, string name);
    public static Uri StatsPunchCard(string owner, string name);
    public static Uri EnterpriseAuditLog(string enterprise);
    private static Uri EnterpriseAdminStats(string type);
    public static Uri EnterpriseAdminStatsIssues();
    public static Uri EnterpriseAdminStatsHooks();
    public static Uri EnterpriseAdminStatsMilestones();
    public static Uri EnterpriseAdminStatsOrgs();
    public static Uri EnterpriseAdminStatsComments();
    public static Uri EnterpriseAdminStatsPages();
    public static Uri EnterpriseAdminStatsUsers();
    public static Uri EnterpriseAdminStatsGists();
    public static Uri EnterpriseAdminStatsPulls();
    public static Uri EnterpriseAdminStatsRepos();
    public static Uri EnterpriseAdminStatsAll();
    public static Uri EnterpriseLdapTeamMapping(long teamId);
    public static Uri EnterpriseLdapTeamSync(long teamId);
    public static Uri EnterpriseLdapUserMapping(string userName);
    public static Uri EnterpriseLdapUserSync(string userName);
    public static Uri EnterpriseLicense();
    public static Uri EnterpriseMigrationById(string org, long migrationId);
    public static Uri EnterpriseMigrations(string org);
    public static Uri EnterpriseMigrationArchive(string org, long migrationId);
    public static Uri EnterpriseMigrationUnlockRepository(string org, long migrationId, string repo);
    public static Uri EnterpriseManagementConsoleMaintenance(string managementConsolePassword, Uri baseAddress);
    public static Uri EnterpriseOrganization();
    public static Uri EnterpriseSearchIndexing();
    public static Uri UserAdministration();
    public static Uri UserAdministration(string login);
    public static Uri UserAdministrationAuthorization(string login);
    public static Uri UserAdministrationPublicKeys();
    public static Uri UserAdministrationPublicKeys(int keyId);
    public static Uri AdminPreReceiveEnvironments();
    public static Uri AdminPreReceiveEnvironments(long environmentId);
    public static Uri AdminPreReceiveEnvironmentDownload(long environmentId);
    public static Uri AdminPreReceiveEnvironmentDownloadStatus(long environmentId);
    public static Uri AdminPreReceiveHooks();
    public static Uri AdminPreReceiveHooks(long hookId);
    public static Uri UserAdministrationSiteAdmin(string login);
    public static Uri UserAdministrationSuspension(string login);
    public static Uri Asset(long repositoryId, int releaseAssetId);
    public static Uri Assignees(long repositoryId);
    public static Uri Blobs(long repositoryId);
    public static Uri Blob(long repositoryId, string reference);
    public static Uri CheckAssignee(long repositoryId, string login);
    public static Uri CombinedCommitStatus(long repositoryId, string reference);
    public static Uri Commit(long repositoryId, string reference);
    public static Uri CommitComment(long repositoryId, long commentId);
    public static Uri CommitComments(long repositoryId, string sha);
    public static Uri CommitComments(long repositoryId);
    public static Uri CommitStatuses(long repositoryId, string reference);
    public static Uri CreateCommit(long repositoryId);
    public static Uri CreateCommitStatus(long repositoryId, string reference);
    public static Uri CreateMerge(long repositoryId);
    public static Uri CreateTag(long repositoryId);
    public static Uri DependencyReview(long repositoryId, string base, string head);
    public static Uri DependencySubmission(long repositoryId);
    public static Uri Deployments(long repositoryId);
    public static Uri DeploymentEnvironments(long repositoryId);
    public static Uri DeploymentStatuses(long repositoryId, long deploymentId);
    public static Uri Events(long repositoryId);
    public static Uri GpgKeys();
    public static Uri GpgKeys(long gpgKeyId);
    public static Uri Issue(long repositoryId, int issueNumber);
    public static Uri IssueComment(long repositoryId, long commentId);
    public static Uri IssueComments(long repositoryId);
    public static Uri IssueComments(long repositoryId, int issueNumber);
    public static Uri IssueLabel(long repositoryId, int issueNumber, string labelName);
    public static Uri IssueLabels(long repositoryId, int issueNumber);
    public static Uri IssueLock(long repositoryId, int issueNumber);
    public static Uri Issues(long repositoryId);
    public static Uri IssuesEvent(long repositoryId, long eventId);
    public static Uri IssuesEvents(long repositoryId, int issueNumber);
    public static Uri IssuesEvents(long repositoryId);
    public static Uri Label(long repositoryId, string labelName);
    public static Uri Labels(long repositoryId);
    public static Uri LatestRelease(long repositoryId);
    public static Uri MergePullRequest(long repositoryId, int pullRequestNumber);
    public static Uri Milestone(long repositoryId, int milestoneNumber);
    public static Uri MilestoneLabels(long repositoryId, int milestoneNumber);
    public static Uri Milestones(long repositoryId);
    public static Uri Notifications(long repositoryId);
    public static Uri PullRequest(long repositoryId, int pullRequestNumber);
    public static Uri PullRequestCommits(long repositoryId, int pullRequestNumber);
    public static Uri PullRequestFiles(long repositoryId, int pullRequestNumber);
    public static Uri PullRequestReviewComment(long repositoryId, long commentId);
    public static Uri PullRequestReviewComments(long repositoryId, int pullRequestNumber);
    public static Uri PullRequestReviews(long repositoryId, int pullRequestNumber);
    public static Uri PullRequestReviewCommentsRepository(long repositoryId);
    public static Uri PullRequests(long repositoryId);
    public static Uri Reference(long repositoryId);
    public static Uri Reference(long repositoryId, string referenceName);
    public static Uri ReleaseAssets(long repositoryId, long releaseId);
    public static Uri Releases(long repositoryId);
    public static Uri ReleasesGenerateNotes(long repositoryId);
    public static Uri Releases(long repositoryId, long releaseId);
    public static Uri Releases(long repositoryId, string tag);
    public static Uri RepoBranch(long repositoryId, string branchName);
    public static Uri RepoBranches(long repositoryId);
    public static Uri RepoCollaborators(long repositoryId);
    public static Uri RepoCompare(long repositoryId, string base, string head);
    public static Uri Repository(long repositoryId);
    public static Uri RepositoryArchiveLink(long repositoryId, ArchiveFormat archiveFormat, string reference);
    public static Uri RepositoryCommit(long repositoryId, string reference);
    public static Uri RepositoryCommits(long repositoryId);
    public static Uri RepositoryContent(long repositoryId);
    public static Uri RepositoryContent(long repositoryId, string path);
    public static Uri RepositoryContent(long repositoryId, string path, string reference);
    public static Uri RepositoryContributors(long repositoryId);
    public static Uri RepositoryDeployKey(long repositoryId, int deployKeyId);
    public static Uri RepositoryDeployKeys(long repositoryId);
    public static Uri RepositoryForks(long repositoryId);
    public static Uri RepositoryHookById(long repositoryId, int hookId);
    public static Uri RepositoryHookPing(long repositoryId, int hookId);
    public static Uri RepositoryHooks(long repositoryId);
    public static Uri RepositoryHookTest(long repositoryId, int hookId);
    public static Uri RepositoryLanguages(long repositoryId);
    public static Uri RepositoryPage(long repositoryId);
    public static Uri RepositoryPageBuilds(long repositoryId);
    public static Uri RepositoryPageBuildsLatest(long repositoryId);
    public static Uri RepositoryReadme(long repositoryId);
    public static Uri RepositoryTags(long repositoryId);
    public static Uri RepositoryTeams(long repositoryId);
    public static Uri Stargazers(long repositoryId);
    public static Uri StatsCodeFrequency(long repositoryId);
    public static Uri StatsCommitActivity(long repositoryId);
    public static Uri StatsContributors(long repositoryId);
    public static Uri StatsParticipation(long repositoryId);
    public static Uri StatsPunchCard(long repositoryId);
    public static Uri Tag(long repositoryId, string reference);
    public static Uri Tree(long repositoryId);
    public static Uri Tree(long repositoryId, string reference);
    public static Uri TreeRecursive(long repositoryId, string reference);
    public static Uri Watched(long repositoryId);
    public static Uri Watchers(long repositoryId);
    public static Uri Reactions(int reactionId);
    public static Uri RepositoryInvitations(long repositoryId);
    public static Uri RepositoryInvitations(long repositoryId, long invitationId);
    public static Uri UserInvitations();
    public static Uri UserInvitations(long invitationId);
    public static Uri RepositoryTrafficReferrers(string owner, string repo);
    public static Uri RepositoryTrafficReferrers(long repositoryId);
    public static Uri RepositoryTrafficPaths(string owner, string repo);
    public static Uri RepositoryTrafficPaths(long repositoryId);
    public static Uri RepositoryTrafficViews(string owner, string repo);
    public static Uri RepositoryTrafficViews(long repositoryId);
    public static Uri RepositoryTrafficClones(string owner, string repo);
    public static Uri RepositoryTrafficClones(long repositoryId);
    public static Uri PullRequestReviewRequests(string owner, string repo, int pullRequestNumber);
    public static Uri PullRequestReviewRequests(long repositoryId, int pullRequestNumber);
    public static Uri RepositoryProjects(string owner, string repo);
    public static Uri RepositoryProjects(long repositoryId);
    public static Uri OrganizationProjects(string organization);
    public static Uri Project(int projectId);
    public static Uri ProjectColumn(int columnId);
    public static Uri ProjectColumns(int projectId);
    public static Uri ProjectColumnMove(int columnId);
    public static Uri ProjectCard(long cardId);
    public static Uri ProjectCards(int columnId);
    public static Uri ProjectCardMove(long cardId);
    public static Uri RepositoryLicense(string owner, string repo);
    public static Uri RepositoryLicense(long repositoryId);
    public static Uri CheckRun(long repositoryId, long checkRunId);
    public static Uri CheckRun(string owner, string repo, long checkRunId);
    public static Uri CheckRuns(long repositoryId);
    public static Uri CheckRuns(string owner, string repo);
    public static Uri CheckRunsForReference(long repositoryId, string reference);
    public static Uri CheckRunsForReference(string owner, string repo, string reference);
    public static Uri CheckRunsForCheckSuite(long repositoryId, long checkSuiteId);
    public static Uri CheckRunsForCheckSuite(string owner, string repo, long checkSuiteId);
    public static Uri CheckRunAnnotations(long repositoryId, long checkRunId);
    public static Uri CheckRunAnnotations(string owner, string repo, long checkRunId);
    public static Uri CheckSuite(long repositoryId, long checkRunId);
    public static Uri CheckSuite(string owner, string repo, long checkRunId);
    public static Uri CheckSuitesForReference(long repositoryId, string reference);
    public static Uri CheckSuitesForReference(string owner, string repo, string reference);
    public static Uri CheckSuites(long repositoryId);
    public static Uri CheckSuites(string owner, string repo);
    public static Uri CheckSuiteRerequest(long repositoryId, long checkSuiteId);
    public static Uri CheckSuiteRerequest(string owner, string repo, long checkSuiteId);
    public static Uri CheckSuitePreferences(long repositoryId);
    public static Uri CheckSuitePreferences(string owner, string repo);
    public static Uri RepositoryCustomPropertyValues(string owner, string repo);
    public static Uri RepositorySecret(string owner, string repo, string secret);
    public static Uri RepositorySecrets(string owner, string repo);
    public static Uri RepositorySecretsPublicKey(string owner, string repo);
    public static Uri RepositoryVariable(string owner, string repo, string variable);
    public static Uri RepositoryVariables(string owner, string repo);
    public static Uri RepositoryOrganizationVariables(string owner, string repo);
    public static Uri Emojis();
    public static Uri RawMarkdown();
    public static Uri Markdown();
    public static Uri GitIgnoreTemplates();
    public static Uri GitIgnoreTemplates(string templateName);
    public static Uri Licenses();
    public static Uri Licenses(string key);
    public static Uri RateLimit();
    public static Uri Meta();
    public static Uri AllOrganizationCredentials(string org);
    public static Uri AllOrganizationCredentials(string org, string login);
    public static Uri PackagesOrg(string org);
    public static Uri PackageOrg(string org, PackageType packageType, string packageName);
    public static Uri PackageRestoreOrg(string org, PackageType packageType, string packageName);
    public static Uri PackageVersionsOrg(string org, PackageType packageType, string packageName);
    public static Uri PackageVersionOrg(string org, PackageType packageType, string packageName, int packageVersionId);
    public static Uri PackageVersionRestoreOrg(string org, PackageType packageType, string packageName, int packageVersionId);
    public static Uri PackagesActiveUser();
    public static Uri PackageActiveUser(PackageType packageType, string packageName);
    public static Uri PackageRestoreActiveUser(PackageType packageType, string packageName);
    public static Uri PackageVersionsActiveUser(PackageType packageType, string packageName);
    public static Uri PackageVersionActiveUser(PackageType packageType, string packageName, int packageVersionId);
    public static Uri PackageVersionRestoreActiveUser(PackageType packageType, string packageName, int packageVersionId);
    public static Uri PackagesUser(string username);
    public static Uri PackageUser(string username, PackageType packageType, string packageName);
    public static Uri PackageRestoreUser(string username, PackageType packageType, string packageName);
    public static Uri PackageVersionsUser(string username, PackageType packageType, string packageName);
    public static Uri PackageVersionUser(string username, PackageType packageType, string packageName, int packageVersionId);
    public static Uri PackageVersionRestoreUser(string username, PackageType packageType, string packageName, int packageVersionId);
    public static Uri ActionsDispatchWorkflow(string owner, string repo, long workflowId);
    public static Uri ActionsDispatchWorkflow(string owner, string repo, string workflowFileName);
    public static Uri ActionsDisableWorkflow(string owner, string repo, string workflowFileName);
    public static Uri ActionsDisableWorkflow(string owner, string repo, long workflowId);
    public static Uri ActionsEnableWorkflow(string owner, string repo, string workflowFileName);
    public static Uri ActionsEnableWorkflow(string owner, string repo, long workflowId);
    public static Uri ActionsGetWorkflow(string owner, string repo, string workflowFileName);
    public static Uri ActionsGetWorkflow(string owner, string repo, long workflowId);
    public static Uri ActionsGetWorkflowUsage(string owner, string repo, string workflowFileName);
    public static Uri ActionsGetWorkflowUsage(string owner, string repo, long workflowId);
    public static Uri ActionsListWorkflows(string owner, string repo);
    public static Uri ActionsRerunWorkflowJob(string owner, string repo, long jobId);
    public static Uri ActionsGetWorkflowJob(string owner, string repo, long jobId);
    public static Uri ActionsGetWorkflowJobLogs(string owner, string repo, long jobId);
    public static Uri ActionsListWorkflowJobs(string owner, string repo, long runId);
    public static Uri ActionsListWorkflowJobs(string owner, string repo, long runId, int attemptNumber);
    public static Uri ActionsWorkflowRuns(string owner, string repo);
    public static Uri ActionsWorkflowRun(string owner, string repo, long runId);
    public static Uri ActionsWorkflowRunAttempt(string owner, string repo, long runId, long attemptNumber);
    public static Uri ActionsApproveWorkflowRun(string owner, string repo, long runId);
    public static Uri ActionsCancelWorkflowRun(string owner, string repo, long runId);
    public static Uri ActionsGetWorkflowRunLogs(string owner, string repo, long runId);
    public static Uri ActionsGetWorkflowRunAttemptLogs(string owner, string repo, long runId, long attemptNumber);
    public static Uri ActionsRerunWorkflowRun(string owner, string repo, long runId);
    public static Uri ActionsRerunWorkflowRunFailedJobs(string owner, string repo, long runId);
    public static Uri ActionsGetWorkflowRunUsage(string owner, string repo, long runId);
    public static Uri ActionsWorkflowRunApprovals(string owner, string repo, long runId);
    public static Uri ActionsWorkflowRunPendingDeployments(string owner, string repo, long runId);
    public static Uri ActionsListWorkflowRuns(string owner, string repo, long workflowId);
    public static Uri ActionsListWorkflowRuns(string owner, string repo, string workflowFileName);
    public static Uri ActionsListSelfHostedRunnersForEnterprise(string enterprise);
    public static Uri ActionsListSelfHostedRunnersForOrganization(string org);
    public static Uri ActionsListSelfHostedRunnersForRepository(string owner, string repo);
    public static Uri ActionsListSelfHostedRunnersForEnterpriseRunnerGroup(string enterprise, long runnerGroupId);
    public static Uri ActionsListSelfHostedRunnersForOrganizationRunnerGroup(string org, long runnerGroupId);
    public static Uri ActionsListSelfHostedRunnersForRepositoryRunnerGroup(string owner, string repo, long runnerGroupId);
    public static Uri ActionsListRunnerApplicationsForEnterprise(string enterprise);
    public static Uri ActionsListRunnerApplicationsForOrganization(string org);
    public static Uri ActionsListRunnerApplicationsForRepository(string owner, string repo);
    public static Uri ActionsDeleteEnterpriseRunner(string enterprise, long runnerId);
    public static Uri ActionsDeleteOrganizationRunner(string org, long runnerId);
    public static Uri ActionsDeleteRepositoryRunner(string owner, string repo, long runnerId);
    public static Uri ActionsCreateEnterpriseRegistrationToken(string enterprise);
    public static Uri ActionsCreateOrganizationRegistrationToken(string org);
    public static Uri ActionsCreateRepositoryRegistrationToken(string owner, string repo);
    public static Uri ActionsGetEnterpriseRunnerGroup(string enterprise, long runnerGroupId);
    public static Uri ActionsGetOrganizationRunnerGroup(string org, long runnerGroupId);
    public static Uri ActionsListEnterpriseRunnerGroups(string enterprise);
    public static Uri ActionsListOrganizationRunnerGroups(string org);
    public static Uri ActionsListEnterpriseRunnerGroupOrganizations(string enterprise, long runnerGroupId);
    public static Uri ActionsListOrganizationRunnerGroupRepositories(string org, long runnerGroupId);
    public static Uri CopilotBillingLicense(string org);
    public static Uri CopilotBillingSettings(string org);
    public static Uri CopilotAllocatedLicenses(string org);
    public static Uri Codespaces();
    public static Uri CodespacesForRepository(string owner, string repo);
    public static Uri Codespace(string codespaceName);
    public static Uri CodespaceStart(string codespaceName);
    public static Uri CodespaceStop(string codespaceName);
    public static Uri ListArtifacts(string owner, string repository);
    public static Uri Artifact(string owner, string repository, long artifactId);
    public static Uri DownloadArtifact(string owner, string repository, long artifactId, string archiveFormat);
    public static Uri ListWorkflowArtifacts(string owner, string repository, long runId);
    public static Uri RepositoryBranchRename(string owner, string repository, string branch);
    public static Uri ActionsOrganizationOidcSubjectClaim(string organization);
    public static Uri ActionsRepositoryOidcSubjectClaim(string owner, string repository);
    public static Uri AutolinksCreate(string owner, string repo);
    public static Uri AutolinksDelete(string owner, string repo, int autolinkId);
    public static Uri AutolinksGet(string owner, string repo, int autolinkId);
    public static Uri AutolinksGetAll(string owner, string repo);
}
public class Octokit.ApiValidationException : ApiException {
    public string Message { get; }
    public ApiValidationException(IResponse response);
    public ApiValidationException(IResponse response, Exception innerException);
    protected ApiValidationException(ApiException innerException);
    protected ApiValidationException(SerializationInfo info, StreamingContext context);
    public virtual string get_Message();
}
[DebuggerDisplayAttribute("{DebuggerDisplay,nq}")]
public class Octokit.Application : object {
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Url>k__BackingField;
    public string Name { get; private set; }
    public string Url { get; private set; }
    internal string DebuggerDisplay { get; }
    public Application(string name, string url);
    [CompilerGeneratedAttribute]
public string get_Name();
    [CompilerGeneratedAttribute]
private void set_Name(string value);
    [CompilerGeneratedAttribute]
public string get_Url();
    [CompilerGeneratedAttribute]
private void set_Url(string value);
    internal string get_DebuggerDisplay();
}
[DebuggerDisplayAttribute("{DebuggerDisplay,nq}")]
public class Octokit.ApplicationAuthorization : Authorization {
    [CompilerGeneratedAttribute]
private string <Token>k__BackingField;
    public string Token { get; private set; }
    public ApplicationAuthorization(long id, string url, Application application, string tokenLastEight, string hashedToken, string fingerprint, string note, string noteUrl, DateTimeOffset createdAt, DateTimeOffset updateAt, String[] scopes, string token);
    [CompilerGeneratedAttribute]
public string get_Token();
    [CompilerGeneratedAttribute]
private void set_Token(string value);
}
public enum Octokit.ArchiveFormat : Enum {
    public int value__;
    [ParameterAttribute]
public static ArchiveFormat Tarball;
    [ParameterAttribute]
public static ArchiveFormat Zipball;
}
[DebuggerDisplayAttribute("{DebuggerDisplay,nq}")]
public class Octokit.Artifact : object {
    [CompilerGeneratedAttribute]
private long <Id>k__BackingField;
    [CompilerGeneratedAttribute]
private string <NodeId>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    [CompilerGeneratedAttribute]
private int <SizeInBytes>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Url>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ArchiveDownloadUrl>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <Expired>k__BackingField;
    [CompilerGeneratedAttribute]
private DateTime <CreatedAt>k__BackingField;
    [CompilerGeneratedAttribute]
private DateTime <ExpiresAt>k__BackingField;
    [CompilerGeneratedAttribute]
private DateTime <UpdatedAt>k__BackingField;
    [CompilerGeneratedAttribute]
private ArtifactWorkflowRun <WorkflowRun>k__BackingField;
    public long Id { get; private set; }
    public string NodeId { get; private set; }
    public string Name { get; private set; }
    public int SizeInBytes { get; private set; }
    public string Url { get; private set; }
    public string ArchiveDownloadUrl { get; private set; }
    public bool Expired { get; private set; }
    public DateTime CreatedAt { get; private set; }
    public DateTime ExpiresAt { get; private set; }
    public DateTime UpdatedAt { get; private set; }
    public ArtifactWorkflowRun WorkflowRun { get; private set; }
    internal string DebuggerDisplay { get; }
    public Artifact(long id, string nodeId, string name, int sizeInBytes, string url, string archiveDownloadUrl, bool expired, DateTime createdAt, DateTime expiresAt, DateTime updatedAt, ArtifactWorkflowRun workflowRun);
    [CompilerGeneratedAttribute]
public long get_Id();
    [CompilerGeneratedAttribute]
private void set_Id(long value);
    [CompilerGeneratedAttribute]
public string get_NodeId();
    [CompilerGeneratedAttribute]
private void set_NodeId(string value);
    [CompilerGeneratedAttribute]
public string get_Name();
    [CompilerGeneratedAttribute]
private void set_Name(string value);
    [CompilerGeneratedAttribute]
public int get_SizeInBytes();
    [CompilerGeneratedAttribute]
private void set_SizeInBytes(int value);
    [CompilerGeneratedAttribute]
public string get_Url();
    [CompilerGeneratedAttribute]
private void set_Url(string value);
    [CompilerGeneratedAttribute]
public string get_ArchiveDownloadUrl();
    [CompilerGeneratedAttribute]
private void set_ArchiveDownloadUrl(string value);
    [CompilerGeneratedAttribute]
public bool get_Expired();
    [CompilerGeneratedAttribute]
private void set_Expired(bool value);
    [CompilerGeneratedAttribute]
public DateTime get_CreatedAt();
    [CompilerGeneratedAttribute]
private void set_CreatedAt(DateTime value);
    [CompilerGeneratedAttribute]
public DateTime get_ExpiresAt();
    [CompilerGeneratedAttribute]
private void set_ExpiresAt(DateTime value);
    [CompilerGeneratedAttribute]
public DateTime get_UpdatedAt();
    [CompilerGeneratedAttribute]
private void set_UpdatedAt(DateTime value);
    [CompilerGeneratedAttribute]
public ArtifactWorkflowRun get_WorkflowRun();
    [CompilerGeneratedAttribute]
private void set_WorkflowRun(ArtifactWorkflowRun value);
    internal string get_DebuggerDisplay();
}
[DebuggerDisplayAttribute("{DebuggerDisplay,nq}")]
public class Octokit.ArtifactWorkflowRun : object {
    [CompilerGeneratedAttribute]
private long <Id>k__BackingField;
    [CompilerGeneratedAttribute]
private long <RepositoryId>k__BackingField;
    [CompilerGeneratedAttribute]
private long <HeadRepositoryId>k__BackingField;
    [CompilerGeneratedAttribute]
private string <HeadBranch>k__BackingField;
    [CompilerGeneratedAttribute]
private string <HeadSha>k__BackingField;
    public long Id { get; private set; }
    public long RepositoryId { get; private set; }
    public long HeadRepositoryId { get; private set; }
    public string HeadBranch { get; private set; }
    public string HeadSha { get; private set; }
    internal string DebuggerDisplay { get; }
    public ArtifactWorkflowRun(long id, long repositoryId, long headRepositoryId, string headBranch, string headSha);
    [CompilerGeneratedAttribute]
public long get_Id();
    [CompilerGeneratedAttribute]
private void set_Id(long value);
    [CompilerGeneratedAttribute]
public long get_RepositoryId();
    [CompilerGeneratedAttribute]
private void set_RepositoryId(long value);
    [CompilerGeneratedAttribute]
public long get_HeadRepositoryId();
    [CompilerGeneratedAttribute]
private void set_HeadRepositoryId(long value);
    [CompilerGeneratedAttribute]
public string get_HeadBranch();
    [CompilerGeneratedAttribute]
private void set_HeadBranch(string value);
    [CompilerGeneratedAttribute]
public string get_HeadSha();
    [CompilerGeneratedAttribute]
private void set_HeadSha(string value);
    internal string get_DebuggerDisplay();
}
[ExtensionAttribute]
public static class Octokit.AssignableExtensions : object {
    [ExtensionAttribute]
public static bool IsAssignableToGenericType(Type givenType, Type genericType);
    [ExtensionAttribute]
private static bool HasInterfaceThatMapsToGenericTypeDefinition(Type givenType, Type genericType);
    [ExtensionAttribute]
private static bool MapsToGenericTypeDefinition(Type givenType, Type genericType);
}
public class Octokit.AssigneesClient : ApiClient {
    public AssigneesClient(IApiConnection apiConnection);
    [ManualRouteAttribute("GET", "/repos/{owner}/{repo}/assignees")]
public sealed virtual Task`1<IReadOnlyList`1<User>> GetAllForRepository(string owner, string name);
    [ManualRouteAttribute("GET", "/repositories/{id}/assignees")]
public sealed virtual Task`1<IReadOnlyList`1<User>> GetAllForRepository(long repositoryId);
    [ManualRouteAttribute("GET", "/repos/{owner}/{repo}/assignees")]
public sealed virtual Task`1<IReadOnlyList`1<User>> GetAllForRepository(string owner, string name, ApiOptions options);
    [ManualRouteAttribute("GET", "/repositories/{id}/assignees")]
public sealed virtual Task`1<IReadOnlyList`1<User>> GetAllForRepository(long repositoryId, ApiOptions options);
    [AsyncStateMachineAttribute("Octokit.AssigneesClient/<CheckAssignee>d__5")]
[ManualRouteAttribute("GET", "/repos/{owner}/{repo}/assignees/{username}")]
public sealed virtual Task`1<bool> CheckAssignee(string owner, string name, string assignee);
    [ManualRouteAttribute("POST", "/repos/{owner}/{repo}/issues/{issue_number}/assignees")]
public sealed virtual Task`1<Issue> AddAssignees(string owner, string name, int issueNumber, AssigneesUpdate assignees);
    [ManualRouteAttribute("DELETE", "/repos/{owner}/{repo}/issues/{issue_number}/assignees")]
public sealed virtual Task`1<Issue> RemoveAssignees(string owner, string name, int issueNumber, AssigneesUpdate assignees);
    [AsyncStateMachineAttribute("Octokit.AssigneesClient/<CheckAssignee>d__8")]
[ManualRouteAttribute("GET", "/repositories/{id}/assignees/{username}")]
public sealed virtual Task`1<bool> CheckAssignee(long repositoryId, string assignee);
}
[DebuggerDisplayAttribute("{DebuggerDisplay,nq}")]
public class Octokit.AssigneesUpdate : object {
    [CompilerGeneratedAttribute]
private IReadOnlyList`1<string> <Assignees>k__BackingField;
    public IReadOnlyList`1<string> Assignees { get; private set; }
    internal string DebuggerDisplay { get; }
    public AssigneesUpdate(IReadOnlyList`1<string> assignees);
    [CompilerGeneratedAttribute]
public IReadOnlyList`1<string> get_Assignees();
    [CompilerGeneratedAttribute]
private void set_Assignees(IReadOnlyList`1<string> value);
    internal string get_DebuggerDisplay();
}
[DebuggerDisplayAttribute("{DebuggerDisplay,nq}")]
public class Octokit.AuditLogEvent : object {
    [CompilerGeneratedAttribute]
private string <Action>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<bool> <Active>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<bool> <ActiveWas>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Actor>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<long> <ActorId>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ActorIp>k__BackingField;
    [CompilerGeneratedAttribute]
private object <ActorLocation>k__BackingField;
    [CompilerGeneratedAttribute]
private string <BlockedUser>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Business>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<long> <BusinessId>k__BackingField;
    [CompilerGeneratedAttribute]
private object <Config>k__BackingField;
    [CompilerGeneratedAttribute]
private object <ConfigWas>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ContentType>k__BackingField;
    [CompilerGeneratedAttribute]
private long <CreatedAt>k__BackingField;
    [CompilerGeneratedAttribute]
private object <Data>k__BackingField;
    [CompilerGeneratedAttribute]
private string <DeployKeyFingerprint>k__BackingField;
    [CompilerGeneratedAttribute]
private string <DocumentId>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Emoji>k__BackingField;
    [CompilerGeneratedAttribute]
private object <Events>k__BackingField;
    [CompilerGeneratedAttribute]
private object <EventsWere>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Explanation>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Fingerprint>k__BackingField;
    [CompilerGeneratedAttribute]
private string <HashedToken>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<long> <HookId>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<bool> <LimitedAvailability>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Message>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    [CompilerGeneratedAttribute]
private string <OldUser>k__BackingField;
    [CompilerGeneratedAttribute]
private string <OpensshPublicKey>k__BackingField;
    [CompilerGeneratedAttribute]
private string <OperationType>k__BackingField;
    [CompilerGeneratedAttribute]
private IReadOnlyList`1<string> <Org>k__BackingField;
    [CompilerGeneratedAttribute]
private IReadOnlyList`1<long> <OrgId>k__BackingField;
    [CompilerGeneratedAttribute]
private string <PreviousVisibility>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<bool> <PublicRepo>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<long> <PullRequestId>k__BackingField;
    [CompilerGeneratedAttribute]
private string <PullRequestTitle>k__BackingField;
    [CompilerGeneratedAttribute]
private string <PullRequestUrl>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<bool> <ReadOnly>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Repo>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<long> <RepoId>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Repository>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<bool> <RepositoryPublic>k__BackingField;
    [CompilerGeneratedAttribute]
private string <TargetLogin>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Team>k__BackingField;
    [CompilerGeneratedAttribute]
private long <Timestamp>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<long> <TransportProtocol>k__BackingField;
    [CompilerGeneratedAttribute]
private string <TransportProtocolName>k__BackingField;
    [CompilerGeneratedAttribute]
private string <User>k__BackingField;
    [CompilerGeneratedAttribute]
private string <UserAgent>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<long> <UserId>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Visibility>k__BackingField;
    public string Action { get; private set; }
    public Nullable`1<bool> Active { get; private set; }
    public Nullable`1<bool> ActiveWas { get; private set; }
    public string Actor { get; private set; }
    public Nullable`1<long> ActorId { get; private set; }
    public string ActorIp { get; private set; }
    public object ActorLocation { get; private set; }
    public string BlockedUser { get; private set; }
    public string Business { get; private set; }
    public Nullable`1<long> BusinessId { get; private set; }
    public object Config { get; private set; }
    public object ConfigWas { get; private set; }
    public string ContentType { get; private set; }
    public long CreatedAt { get; private set; }
    public object Data { get; private set; }
    public string DeployKeyFingerprint { get; private set; }
    public string DocumentId { get; private set; }
    public string Emoji { get; private set; }
    public object Events { get; private set; }
    public object EventsWere { get; private set; }
    public string Explanation { get; private set; }
    public string Fingerprint { get; private set; }
    public string HashedToken { get; private set; }
    public Nullable`1<long> HookId { get; private set; }
    public Nullable`1<bool> LimitedAvailability { get; private set; }
    public string Message { get; private set; }
    public string Name { get; private set; }
    public string OldUser { get; private set; }
    public string OpensshPublicKey { get; private set; }
    public string OperationType { get; private set; }
    public IReadOnlyList`1<string> Org { get; private set; }
    public IReadOnlyList`1<long> OrgId { get; private set; }
    public string PreviousVisibility { get; private set; }
    public Nullable`1<bool> PublicRepo { get; private set; }
    public Nullable`1<long> PullRequestId { get; private set; }
    public string PullRequestTitle { get; private set; }
    public string PullRequestUrl { get; private set; }
    public Nullable`1<bool> ReadOnly { get; private set; }
    public string Repo { get; private set; }
    public Nullable`1<long> RepoId { get; private set; }
    public string Repository { get; private set; }
    public Nullable`1<bool> RepositoryPublic { get; private set; }
    public string TargetLogin { get; private set; }
    public string Team { get; private set; }
    public long Timestamp { get; private set; }
    public Nullable`1<long> TransportProtocol { get; private set; }
    public string TransportProtocolName { get; private set; }
    public string User { get; private set; }
    public string UserAgent { get; private set; }
    public Nullable`1<long> UserId { get; private set; }
    public string Visibility { get; private set; }
    internal string DebuggerDisplay { get; }
    public AuditLogEvent(string action, Nullable`1<bool> active, Nullable`1<bool> activeWas, string actor, Nullable`1<long> actorId, string actorIp, object actorLocation, string blockedUser, string business, Nullable`1<long> businessId, object config, object configWas, string contentType, long createdAt, object data, string deployKeyFingerprint, string documentId, string emoji, object events, object eventsWere, string explanation, string fingerPrint, string hashedToken, Nullable`1<long> hookId, Nullable`1<bool> limitedAvailability, string message, string name, string oldUser, string opensshPublicKey, string operationType, IReadOnlyList`1<string> org, IReadOnlyList`1<long> orgId, string previousVisibility, Nullable`1<bool> publicRepo, Nullable`1<long> pullRequestId, string pullRequestTitle, string pullRequestUrl, Nullable`1<bool> readOnly, string repo, Nullable`1<long> repoId, string repository, Nullable`1<bool> repositoryPublic, string targetLogin, string team, Nullable`1<long> transportProtocol, string transportProtocolName, long timestamp, string user, string userAgent, Nullable`1<long> userId, string visibility);
    [CompilerGeneratedAttribute]
public string get_Action();
    [CompilerGeneratedAttribute]
private void set_Action(string value);
    [CompilerGeneratedAttribute]
public Nullable`1<bool> get_Active();
    [CompilerGeneratedAttribute]
private void set_Active(Nullable`1<bool> value);
    [CompilerGeneratedAttribute]
public Nullable`1<bool> get_ActiveWas();
    [CompilerGeneratedAttribute]
private void set_ActiveWas(Nullable`1<bool> value);
    [CompilerGeneratedAttribute]
public string get_Actor();
    [CompilerGeneratedAttribute]
private void set_Actor(string value);
    [CompilerGeneratedAttribute]
public Nullable`1<long> get_ActorId();
    [CompilerGeneratedAttribute]
private void set_ActorId(Nullable`1<long> value);
    [CompilerGeneratedAttribute]
public string get_ActorIp();
    [CompilerGeneratedAttribute]
private void set_ActorIp(string value);
    [CompilerGeneratedAttribute]
public object get_ActorLocation();
    [CompilerGeneratedAttribute]
private void set_ActorLocation(object value);
    [CompilerGeneratedAttribute]
public string get_BlockedUser();
    [CompilerGeneratedAttribute]
private void set_BlockedUser(string value);
    [CompilerGeneratedAttribute]
public string get_Business();
    [CompilerGeneratedAttribute]
private void set_Business(string value);
    [CompilerGeneratedAttribute]
public Nullable`1<long> get_BusinessId();
    [CompilerGeneratedAttribute]
private void set_BusinessId(Nullable`1<long> value);
    [CompilerGeneratedAttribute]
public object get_Config();
    [CompilerGeneratedAttribute]
private void set_Config(object value);
    [CompilerGeneratedAttribute]
public object get_ConfigWas();
    [CompilerGeneratedAttribute]
private void set_ConfigWas(object value);
    [CompilerGeneratedAttribute]
public string get_ContentType();
    [CompilerGeneratedAttribute]
private void set_ContentType(string value);
    [CompilerGeneratedAttribute]
public long get_CreatedAt();
    [CompilerGeneratedAttribute]
private void set_CreatedAt(long value);
    [CompilerGeneratedAttribute]
public object get_Data();
    [CompilerGeneratedAttribute]
private void set_Data(object value);
    [CompilerGeneratedAttribute]
public string get_DeployKeyFingerprint();
    [CompilerGeneratedAttribute]
private void set_DeployKeyFingerprint(string value);
    [CompilerGeneratedAttribute]
public string get_DocumentId();
    [CompilerGeneratedAttribute]
private void set_DocumentId(string value);
    [CompilerGeneratedAttribute]
public string get_Emoji();
    [CompilerGeneratedAttribute]
private void set_Emoji(string value);
    [CompilerGeneratedAttribute]
public object get_Events();
    [CompilerGeneratedAttribute]
private void set_Events(object value);
    [CompilerGeneratedAttribute]
public object get_EventsWere();
    [CompilerGeneratedAttribute]
private void set_EventsWere(object value);
    [CompilerGeneratedAttribute]
public string get_Explanation();
    [CompilerGeneratedAttribute]
private void set_Explanation(string value);
    [CompilerGeneratedAttribute]
public string get_Fingerprint();
    [CompilerGeneratedAttribute]
private void set_Fingerprint(string value);
    [CompilerGeneratedAttribute]
public string get_HashedToken();
    [CompilerGeneratedAttribute]
private void set_HashedToken(string value);
    [CompilerGeneratedAttribute]
public Nullable`1<long> get_HookId();
    [CompilerGeneratedAttribute]
private void set_HookId(Nullable`1<long> value);
    [CompilerGeneratedAttribute]
public Nullable`1<bool> get_LimitedAvailability();
    [CompilerGeneratedAttribute]
private void set_LimitedAvailability(Nullable`1<bool> value);
    [CompilerGeneratedAttribute]
public string get_Message();
    [CompilerGeneratedAttribute]
private void set_Message(string value);
    [CompilerGeneratedAttribute]
public string get_Name();
    [CompilerGeneratedAttribute]
private void set_Name(string value);
    [CompilerGeneratedAttribute]
public string get_OldUser();
    [CompilerGeneratedAttribute]
private void set_OldUser(string value);
    [CompilerGeneratedAttribute]
public string get_OpensshPublicKey();
    [CompilerGeneratedAttribute]
private void set_OpensshPublicKey(string value);
    [CompilerGeneratedAttribute]
public string get_OperationType();
    [CompilerGeneratedAttribute]
private void set_OperationType(string value);
    [CompilerGeneratedAttribute]
public IReadOnlyList`1<string> get_Org();
    [CompilerGeneratedAttribute]
private void set_Org(IReadOnlyList`1<string> value);
    [CompilerGeneratedAttribute]
public IReadOnlyList`1<long> get_OrgId();
    [CompilerGeneratedAttribute]
private void set_OrgId(IReadOnlyList`1<long> value);
    [CompilerGeneratedAttribute]
public string get_PreviousVisibility();
    [CompilerGeneratedAttribute]
private void set_PreviousVisibility(string value);
    [CompilerGeneratedAttribute]
public Nullable`1<bool> get_PublicRepo();
    [CompilerGeneratedAttribute]
private void set_PublicRepo(Nullable`1<bool> value);
    [CompilerGeneratedAttribute]
public Nullable`1<long> get_PullRequestId();
    [CompilerGeneratedAttribute]
private void set_PullRequestId(Nullable`1<long> value);
    [CompilerGeneratedAttribute]
public string get_PullRequestTitle();
    [CompilerGeneratedAttribute]
private void set_PullRequestTitle(string value);
    [CompilerGeneratedAttribute]
public string get_PullRequestUrl();
    [CompilerGeneratedAttribute]
private void set_PullRequestUrl(string value);
    [CompilerGeneratedAttribute]
public Nullable`1<bool> get_ReadOnly();
    [CompilerGeneratedAttribute]
private void set_ReadOnly(Nullable`1<bool> value);
    [CompilerGeneratedAttribute]
public string get_Repo();
    [CompilerGeneratedAttribute]
private void set_Repo(string value);
    [CompilerGeneratedAttribute]
public Nullable`1<long> get_RepoId();
    [CompilerGeneratedAttribute]
private void set_RepoId(Nullable`1<long> value);
    [CompilerGeneratedAttribute]
public string get_Repository();
    [CompilerGeneratedAttribute]
private void set_Repository(string value);
    [CompilerGeneratedAttribute]
public Nullable`1<bool> get_RepositoryPublic();
    [CompilerGeneratedAttribute]
private void set_RepositoryPublic(Nullable`1<bool> value);
    [CompilerGeneratedAttribute]
public string get_TargetLogin();
    [CompilerGeneratedAttribute]
private void set_TargetLogin(string value);
    [CompilerGeneratedAttribute]
public string get_Team();
    [CompilerGeneratedAttribute]
private void set_Team(string value);
    [CompilerGeneratedAttribute]
public long get_Timestamp();
    [CompilerGeneratedAttribute]
private void set_Timestamp(long value);
    [CompilerGeneratedAttribute]
public Nullable`1<long> get_TransportProtocol();
    [CompilerGeneratedAttribute]
private void set_TransportProtocol(Nullable`1<long> value);
    [CompilerGeneratedAttribute]
public string get_TransportProtocolName();
    [CompilerGeneratedAttribute]
private void set_TransportProtocolName(string value);
    [CompilerGeneratedAttribute]
public string get_User();
    [CompilerGeneratedAttribute]
private void set_User(string value);
    [CompilerGeneratedAttribute]
public string get_UserAgent();
    [CompilerGeneratedAttribute]
private void set_UserAgent(string value);
    [CompilerGeneratedAttribute]
public Nullable`1<long> get_UserId();
    [CompilerGeneratedAttribute]
private void set_UserId(Nullable`1<long> value);
    [CompilerGeneratedAttribute]
public string get_Visibility();
    [CompilerGeneratedAttribute]
private void set_Visibility(string value);
    internal string get_DebuggerDisplay();
}
public enum Octokit.AuthenticationType : Enum {
    public int value__;
    public static AuthenticationType Anonymous;
    public static AuthenticationType Basic;
    public static AuthenticationType Oauth;
    public static AuthenticationType Bearer;
}
[DebuggerDisplayAttribute("{DebuggerDisplay,nq}")]
public class Octokit.Author : object {
    [CompilerGeneratedAttribute]
private string <Login>k__BackingField;
    [CompilerGeneratedAttribute]
private long <Id>k__BackingField;
    [CompilerGeneratedAttribute]
private string <NodeId>k__BackingField;
    [CompilerGeneratedAttribute]
private string <AvatarUrl>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Url>k__BackingField;
    [CompilerGeneratedAttribute]
private string <HtmlUrl>k__BackingField;
    [CompilerGeneratedAttribute]
private string <FollowersUrl>k__BackingField;
    [CompilerGeneratedAttribute]
private string <FollowingUrl>k__BackingField;
    [CompilerGeneratedAttribute]
private string <GistsUrl>k__BackingField;
    [CompilerGeneratedAttribute]
private string <StarredUrl>k__BackingField;
    [CompilerGeneratedAttribute]
private string <SubscriptionsUrl>k__BackingField;
    [CompilerGeneratedAttribute]
private string <OrganizationsUrl>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ReposUrl>k__BackingField;
    [CompilerGeneratedAttribute]
private string <EventsUrl>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ReceivedEventsUrl>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Type>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <SiteAdmin>k__BackingField;
    public string Login { get; protected set; }
    public long Id { get; protected set; }
    public string NodeId { get; protected set; }
    public string AvatarUrl { get; protected set; }
    public string Url { get; protected set; }
    public string HtmlUrl { get; protected set; }
    public string FollowersUrl { get; protected set; }
    public string FollowingUrl { get; protected set; }
    public string GistsUrl { get; protected set; }
    public string StarredUrl { get; protected set; }
    public string SubscriptionsUrl { get; protected set; }
    public string OrganizationsUrl { get; protected set; }
    public string ReposUrl { get; protected set; }
    public string EventsUrl { get; protected set; }
    public string ReceivedEventsUrl { get; protected set; }
    public string Type { get; protected set; }
    public bool SiteAdmin { get; protected set; }
    internal string DebuggerDisplay { get; }
    public Author(string login, long id, string nodeId, string avatarUrl, string url, string htmlUrl, string followersUrl, string followingUrl, string gistsUrl, string type, string starredUrl, string subscriptionsUrl, string organizationsUrl, string reposUrl, string eventsUrl, string receivedEventsUrl, bool siteAdmin);
    [CompilerGeneratedAttribute]
public string get_Login();
    [CompilerGeneratedAttribute]
protected void set_Login(string value);
    [CompilerGeneratedAttribute]
public long get_Id();
    [CompilerGeneratedAttribute]
protected void set_Id(long value);
    [CompilerGeneratedAttribute]
public string get_NodeId();
    [CompilerGeneratedAttribute]
protected void set_NodeId(string value);
    [CompilerGeneratedAttribute]
public string get_AvatarUrl();
    [CompilerGeneratedAttribute]
protected void set_AvatarUrl(string value);
    [CompilerGeneratedAttribute]
public string get_Url();
    [CompilerGeneratedAttribute]
protected void set_Url(string value);
    [CompilerGeneratedAttribute]
public string get_HtmlUrl();
    [CompilerGeneratedAttribute]
protected void set_HtmlUrl(string value);
    [CompilerGeneratedAttribute]
public string get_FollowersUrl();
    [CompilerGeneratedAttribute]
protected void set_FollowersUrl(string value);
    [CompilerGeneratedAttribute]
public string get_FollowingUrl();
    [CompilerGeneratedAttribute]
protected void set_FollowingUrl(string value);
    [CompilerGeneratedAttribute]
public string get_GistsUrl();
    [CompilerGeneratedAttribute]
protected void set_GistsUrl(string value);
    [CompilerGeneratedAttribute]
public string get_StarredUrl();
    [CompilerGeneratedAttribute]
protected void set_StarredUrl(string value);
    [CompilerGeneratedAttribute]
public string get_SubscriptionsUrl();
    [CompilerGeneratedAttribute]
protected void set_SubscriptionsUrl(string value);
    [CompilerGeneratedAttribute]
public string get_OrganizationsUrl();
    [CompilerGeneratedAttribute]
protected void set_OrganizationsUrl(string value);
    [CompilerGeneratedAttribute]
public string get_ReposUrl();
    [CompilerGeneratedAttribute]
protected void set_ReposUrl(string value);
    [CompilerGeneratedAttribute]
public string get_EventsUrl();
    [CompilerGeneratedAttribute]
protected void set_EventsUrl(string value);
    [CompilerGeneratedAttribute]
public string get_ReceivedEventsUrl();
    [CompilerGeneratedAttribute]
protected void set_ReceivedEventsUrl(string value);
    [CompilerGeneratedAttribute]
public string get_Type();
    [CompilerGeneratedAttribute]
protected void set_Type(string value);
    [CompilerGeneratedAttribute]
public bool get_SiteAdmin();
    [CompilerGeneratedAttribute]
protected void set_SiteAdmin(bool value);
    internal string get_DebuggerDisplay();
}
public enum Octokit.AuthorAssociation : Enum {
    public int value__;
    [ParameterAttribute]
public static AuthorAssociation Collaborator;
    [ParameterAttribute]
public static AuthorAssociation Contributor;
    [ParameterAttribute]
public static AuthorAssociation FirstTimer;
    [ParameterAttribute]
public static AuthorAssociation FirstTimeContributor;
    [ParameterAttribute]
public static AuthorAssociation Member;
    [ParameterAttribute]
public static AuthorAssociation Owner;
    [ParameterAttribute]
public static AuthorAssociation None;
}
[DebuggerDisplayAttribute("{DebuggerDisplay,nq}")]
public class Octokit.Authorization : object {
    [CompilerGeneratedAttribute]
private long <Id>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Url>k__BackingField;
    [CompilerGeneratedAttribute]
private Application <Application>k__BackingField;
    [CompilerGeneratedAttribute]
private string <TokenLastEight>k__BackingField;
    [CompilerGeneratedAttribute]
private string <HashedToken>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Fingerprint>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Note>k__BackingField;
    [CompilerGeneratedAttribute]
private string <NoteUrl>k__BackingField;
    [CompilerGeneratedAttribute]
private DateTimeOffset <CreatedAt>k__BackingField;
    [CompilerGeneratedAttribute]
private DateTimeOffset <UpdateAt>k__BackingField;
    [CompilerGeneratedAttribute]
private String[] <Scopes>k__BackingField;
    public long Id { get; protected set; }
    public string Url { get; protected set; }
    public Application Application { get; protected set; }
    public string TokenLastEight { get; protected set; }
    public string HashedToken { get; protected set; }
    public string Fingerprint { get; protected set; }
    public string Note { get; protected set; }
    public string NoteUrl { get; protected set; }
    public DateTimeOffset CreatedAt { get; protected set; }
    public DateTimeOffset UpdateAt { get; protected set; }
    public String[] Scopes { get; protected set; }
    public string ScopesDelimited { get; }
    internal string DebuggerDisplay { get; }
    public Authorization(long id, string url, Application application, string tokenLastEight, string hashedToken, string fingerprint, string note, string noteUrl, DateTimeOffset createdAt, DateTimeOffset updateAt, String[] scopes);
    [CompilerGeneratedAttribute]
public long get_Id();
    [CompilerGeneratedAttribute]
protected void set_Id(long value);
    [CompilerGeneratedAttribute]
public string get_Url();
    [CompilerGeneratedAttribute]
protected void set_Url(string value);
    [CompilerGeneratedAttribute]
public Application get_Application();
    [CompilerGeneratedAttribute]
protected void set_Application(Application value);
    [CompilerGeneratedAttribute]
public string get_TokenLastEight();
    [CompilerGeneratedAttribute]
protected void set_TokenLastEight(string value);
    [CompilerGeneratedAttribute]
public string get_HashedToken();
    [CompilerGeneratedAttribute]
protected void set_HashedToken(string value);
    [CompilerGeneratedAttribute]
public string get_Fingerprint();
    [CompilerGeneratedAttribute]
protected void set_Fingerprint(string value);
    [CompilerGeneratedAttribute]
public string get_Note();
    [CompilerGeneratedAttribute]
protected void set_Note(string value);
    [CompilerGeneratedAttribute]
public string get_NoteUrl();
    [CompilerGeneratedAttribute]
protected void set_NoteUrl(string value);
    [CompilerGeneratedAttribute]
public DateTimeOffset get_CreatedAt();
    [CompilerGeneratedAttribute]
protected void set_CreatedAt(DateTimeOffset value);
    [CompilerGeneratedAttribute]
public DateTimeOffset get_UpdateAt();
    [CompilerGeneratedAttribute]
protected void set_UpdateAt(DateTimeOffset value);
    [CompilerGeneratedAttribute]
public String[] get_Scopes();
    [CompilerGeneratedAttribute]
protected void set_Scopes(String[] value);
    public string get_ScopesDelimited();
    internal string get_DebuggerDisplay();
}
public class Octokit.AuthorizationException : ApiException {
    public AuthorizationException(IResponse response);
    public AuthorizationException(IResponse response, Exception innerException);
    public AuthorizationException(HttpStatusCode httpStatusCode, Exception innerException);
    protected AuthorizationException(SerializationInfo info, StreamingContext context);
}
[ExtensionAttribute]
public static class Octokit.AuthorizationExtensions : object {
    [AsyncStateMachineAttribute("Octokit.AuthorizationExtensions/<GetOrCreateApplicationAuthentication>d__0")]
[ExtensionAttribute]
public static Task`1<ApplicationAuthorization> GetOrCreateApplicationAuthentication(IAuthorizationsClient authorizationsClient, string clientId, string clientSecret, NewAuthorization newAuthorization, Func`2<TwoFactorRequiredException, Task`1<TwoFactorChallengeResult>> twoFactorChallengeHandler);
}
public class Octokit.AuthorizationsClient : ApiClient {
    public AuthorizationsClient(IApiConnection apiConnection);
    [ManualRouteAttribute("GET", "/authorizations")]
public sealed virtual Task`1<IReadOnlyList`1<Authorization>> GetAll();
    [ManualRouteAttribute("GET", "/authorizations")]
public sealed virtual Task`1<IReadOnlyList`1<Authorization>> GetAll(ApiOptions options);
    [ManualRouteAttribute("GET", "/authorizations/{id}")]
public sealed virtual Task`1<Authorization> Get(long authorizationId);
    [ManualRouteAttribute("POST", "/authorizations")]
public sealed virtual Task`1<ApplicationAuthorization> Create(NewAuthorization newAuthorization);
    [ManualRouteAttribute("POST", "/authorizations")]
public sealed virtual Task`1<ApplicationAuthorization> Create(NewAuthorization newAuthorization, string twoFactorAuthenticationCode);
    [ManualRouteAttribute("POST", "/authorizations")]
public sealed virtual Task`1<ApplicationAuthorization> Create(string clientId, string clientSecret, NewAuthorization newAuthorization);
    [ManualRouteAttribute("POST", "/authorizations")]
public sealed virtual Task`1<ApplicationAuthorization> Create(string clientId, string clientSecret, NewAuthorization newAuthorization, string twoFactorAuthenticationCode);
    [ManualRouteAttribute("PUT", "/authorizations/clients/{id}")]
public sealed virtual Task`1<ApplicationAuthorization> GetOrCreateApplicationAuthentication(string clientId, string clientSecret, NewAuthorization newAuthorization);
    [AsyncStateMachineAttribute("Octokit.AuthorizationsClient/<GetOrCreateApplicationAuthentication>d__9")]
[ManualRouteAttribute("PUT", "/authorizations/clients/{id}")]
public sealed virtual Task`1<ApplicationAuthorization> GetOrCreateApplicationAuthentication(string clientId, string clientSecret, NewAuthorization newAuthorization, string twoFactorAuthenticationCode);
    [ManualRouteAttribute("POST", "/applications/{client_id}/token")]
public sealed virtual Task`1<ApplicationAuthorization> CheckApplicationAuthentication(string clientId, string accessToken);
    [ManualRouteAttribute("PATCH", "/applications/{client_id}/token")]
public sealed virtual Task`1<ApplicationAuthorization> ResetApplicationAuthentication(string clientId, string accessToken);
    [ManualRouteAttribute("DELETE", "/applications/{client_id}/token")]
public sealed virtual Task RevokeApplicationAuthentication(string clientId, string accessToken);
    [ManualRouteAttribute("PATCH", "/authorizations/{id}")]
public sealed virtual Task`1<Authorization> Update(long authorizationId, AuthorizationUpdate authorizationUpdate);
    [ManualRouteAttribute("DELETE", "/authorizations/{id}")]
public sealed virtual Task Delete(long authorizationId);
    [ManualRouteAttribute("DELETE", "/authorizations/{id}")]
public sealed virtual Task Delete(long authorizationId, string twoFactorAuthenticationCode);
}
[DebuggerDisplayAttribute("{DebuggerDisplay,nq}")]
public class Octokit.AuthorizationUpdate : object {
    [CompilerGeneratedAttribute]
private IEnumerable`1<string> <Scopes>k__BackingField;
    [CompilerGeneratedAttribute]
private IEnumerable`1<string> <AddScopes>k__BackingField;
    [CompilerGeneratedAttribute]
private IEnumerable`1<string> <RemoveScopes>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Note>k__BackingField;
    [CompilerGeneratedAttribute]
private string <NoteUrl>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Fingerprint>k__BackingField;
    public IEnumerable`1<string> Scopes { get; public set; }
    public IEnumerable`1<string> AddScopes { get; public set; }
    public IEnumerable`1<string> RemoveScopes { get; public set; }
    public string Note { get; public set; }
    public string NoteUrl { get; public set; }
    public string Fingerprint { get; public set; }
    internal string DebuggerDisplay { get; }
    [CompilerGeneratedAttribute]
public IEnumerable`1<string> get_Scopes();
    [CompilerGeneratedAttribute]
public void set_Scopes(IEnumerable`1<string> value);
    [CompilerGeneratedAttribute]
public IEnumerable`1<string> get_AddScopes();
    [CompilerGeneratedAttribute]
public void set_AddScopes(IEnumerable`1<string> value);
    [CompilerGeneratedAttribute]
public IEnumerable`1<string> get_RemoveScopes();
    [CompilerGeneratedAttribute]
public void set_RemoveScopes(IEnumerable`1<string> value);
    [CompilerGeneratedAttribute]
public string get_Note();
    [CompilerGeneratedAttribute]
public void set_Note(string value);
    [CompilerGeneratedAttribute]
public string get_NoteUrl();
    [CompilerGeneratedAttribute]
public void set_NoteUrl(string value);
    [CompilerGeneratedAttribute]
public string get_Fingerprint();
    [CompilerGeneratedAttribute]
public void set_Fingerprint(string value);
    internal string get_DebuggerDisplay();
}
[DebuggerDisplayAttribute("{DebuggerDisplay,nq}")]
public class Octokit.Autolink : object {
    [CompilerGeneratedAttribute]
private int <Id>k__BackingField;
    [CompilerGeneratedAttribute]
private string <KeyPrefix>k__BackingField;
    [CompilerGeneratedAttribute]
private string <UrlTemplate>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsAlphanumeric>k__BackingField;
    public int Id { get; protected set; }
    public string KeyPrefix { get; protected set; }
    public string UrlTemplate { get; protected set; }
    public bool IsAlphanumeric { get; protected set; }
    internal string DebuggerDisplay { get; }
    public Autolink(int id, string keyPrefix, string urlTemplate, bool isAlphanumeric);
    [CompilerGeneratedAttribute]
public int get_Id();
    [CompilerGeneratedAttribute]
protected void set_Id(int value);
    [CompilerGeneratedAttribute]
public string get_KeyPrefix();
    [CompilerGeneratedAttribute]
protected void set_KeyPrefix(string value);
    [CompilerGeneratedAttribute]
public string get_UrlTemplate();
    [CompilerGeneratedAttribute]
protected void set_UrlTemplate(string value);
    [CompilerGeneratedAttribute]
public bool get_IsAlphanumeric();
    [CompilerGeneratedAttribute]
protected void set_IsAlphanumeric(bool value);
    internal string get_DebuggerDisplay();
}
[DebuggerDisplayAttribute("{DebuggerDisplay,nq}")]
public class Octokit.AutolinkRequest : object {
    [CompilerGeneratedAttribute]
private string <KeyPrefix>k__BackingField;
    [CompilerGeneratedAttribute]
private string <UrlTemplate>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsAlphanumeric>k__BackingField;
    public string KeyPrefix { get; public set; }
    public string UrlTemplate { get; public set; }
    public bool IsAlphanumeric { get; public set; }
    internal string DebuggerDisplay { get; }
    public AutolinkRequest(string keyPrefix, string urlTemplate, bool isAlphanumeric);
    [CompilerGeneratedAttribute]
public string get_KeyPrefix();
    [CompilerGeneratedAttribute]
public void set_KeyPrefix(string value);
    [CompilerGeneratedAttribute]
public string get_UrlTemplate();
    [CompilerGeneratedAttribute]
public void set_UrlTemplate(string value);
    [CompilerGeneratedAttribute]
public bool get_IsAlphanumeric();
    [CompilerGeneratedAttribute]
public void set_IsAlphanumeric(bool value);
    internal string get_DebuggerDisplay();
}
public class Octokit.AutolinksClient : ApiClient {
    public AutolinksClient(IApiConnection apiConnection);
    [ManualRouteAttribute("GET", "/repos/{owner}/{repo}/autolinks/{autolinkId}")]
public sealed virtual Task`1<Autolink> Get(string owner, string repo, int autolinkId);
    [ManualRouteAttribute("GET", "/repos/{owner}/{repo}/autolinks")]
public sealed virtual Task`1<IReadOnlyList`1<Autolink>> GetAll(string owner, string repo);
    [ManualRouteAttribute("GET", "/repos/{owner}/{repo}/autolinks")]
public sealed virtual Task`1<IReadOnlyList`1<Autolink>> GetAll(string owner, string repo, ApiOptions options);
    [ManualRouteAttribute("POST", "/repos/{owner}/{repo}/autolinks")]
public sealed virtual Task`1<Autolink> Create(string owner, string repo, AutolinkRequest autolink);
    [ManualRouteAttribute("DELETE", "/repos/{owner}/{repo}/autolinks/{autolinkId}")]
public sealed virtual Task Delete(string owner, string repo, int autolinkId);
}
public abstract class Octokit.BaseSearchRequest : object {
    [CompilerGeneratedAttribute]
private string <Term>k__BackingField;
    [CompilerGeneratedAttribute]
private SortDirection <Order>k__BackingField;
    [CompilerGeneratedAttribute]
private int <Page>k__BackingField;
    [CompilerGeneratedAttribute]
private int <PerPage>k__BackingField;
    public string Term { get; private set; }
    public string Sort { get; }
    private string SortOrder { get; }
    public SortDirection Order { get; public set; }
    public int Page { get; public set; }
    public int PerPage { get; public set; }
    private string TermAndQualifiers { get; }
    public IDictionary`2<string, string> Parameters { get; }
    protected BaseSearchRequest(string term);
    [CompilerGeneratedAttribute]
public string get_Term();
    [CompilerGeneratedAttribute]
private void set_Term(string value);
    public abstract virtual string get_Sort();
    private string get_SortOrder();
    [CompilerGeneratedAttribute]
public SortDirection get_Order();
    [CompilerGeneratedAttribute]
public void set_Order(SortDirection value);
    [CompilerGeneratedAttribute]
public int get_Page();
    [CompilerGeneratedAttribute]
public void set_Page(int value);
    [CompilerGeneratedAttribute]
public int get_PerPage();
    [CompilerGeneratedAttribute]
public void set_PerPage(int value);
    public virtual IReadOnlyList`1<string> MergedQualifiers();
    private string get_TermAndQualifiers();
    public virtual IDictionary`2<string, string> AdditionalParameters();
    public IDictionary`2<string, string> get_Parameters();
}
[DebuggerDisplayAttribute("{DebuggerDisplay,nq}")]
public class Octokit.BillingSettings : object {
    [CompilerGeneratedAttribute]
private SeatBreakdown <SeatBreakdown>k__BackingField;
    [CompilerGeneratedAttribute]
private string <SeatManagementSetting>k__BackingField;
    [CompilerGeneratedAttribute]
private string <PublicCodeSuggestions>k__BackingField;
    public SeatBreakdown SeatBreakdown { get; private set; }
    public string SeatManagementSetting { get; private set; }
    public string PublicCodeSuggestions { get; private set; }
    internal string DebuggerDisplay { get; }
    public BillingSettings(SeatBreakdown seatBreakdown, string seatManagementSetting, string publicCodeSuggestions);
    [CompilerGeneratedAttribute]
public SeatBreakdown get_SeatBreakdown();
    [CompilerGeneratedAttribute]
private void set_SeatBreakdown(SeatBreakdown value);
    [CompilerGeneratedAttribute]
public string get_SeatManagementSetting();
    [CompilerGeneratedAttribute]
private void set_SeatManagementSetting(string value);
    [CompilerGeneratedAttribute]
public string get_PublicCodeSuggestions();
    [CompilerGeneratedAttribute]
private void set_PublicCodeSuggestions(string value);
    internal string get_DebuggerDisplay();
}
[DebuggerDisplayAttribute("{DebuggerDisplay,nq}")]
public class Octokit.Blob : object {
    [CompilerGeneratedAttribute]
private string <NodeId>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Content>k__BackingField;
    [CompilerGeneratedAttribute]
private StringEnum`1<EncodingType> <Encoding>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Sha>k__BackingField;
    [CompilerGeneratedAttribute]
private int <Size>k__BackingField;
    public string NodeId { get; private set; }
    public string Content { get; private set; }
    public StringEnum`1<EncodingType> Encoding { get; private set; }
    public string Sha { get; private set; }
    public int Size { get; private set; }
    internal string DebuggerDisplay { get; }
    public Blob(string nodeId, string content, EncodingType encoding, string sha, int size);
    [CompilerGeneratedAttribute]
public string get_NodeId();
    [CompilerGeneratedAttribute]
private void set_NodeId(string value);
    [CompilerGeneratedAttribute]
public string get_Content();
    [CompilerGeneratedAttribute]
private void set_Content(string value);
    [CompilerGeneratedAttribute]
public StringEnum`1<EncodingType> get_Encoding();
    [CompilerGeneratedAttribute]
private void set_Encoding(StringEnum`1<EncodingType> value);
    [CompilerGeneratedAttribute]
public string get_Sha();
    [CompilerGeneratedAttribute]
private void set_Sha(string value);
    [CompilerGeneratedAttribute]
public int get_Size();
    [CompilerGeneratedAttribute]
private void set_Size(int value);
    internal string get_DebuggerDisplay();
}
[DebuggerDisplayAttribute("{DebuggerDisplay,nq}")]
public class Octokit.BlobReference : object {
    [CompilerGeneratedAttribute]
private string <Sha>k__BackingField;
    public string Sha { get; private set; }
    internal string DebuggerDisplay { get; }
    public BlobReference(string sha);
    [CompilerGeneratedAttribute]
public string get_Sha();
    [CompilerGeneratedAttribute]
private void set_Sha(string value);
    internal string get_DebuggerDisplay();
}
public class Octokit.BlobsClient : ApiClient {
    public BlobsClient(IApiConnection apiConnection);
    [ManualRouteAttribute("GET", "/repos/{owner}/{repo}/git/blobs/{file_sha}")]
public sealed virtual Task`1<Blob> Get(string owner, string name, string reference);
    [ManualRouteAttribute("GET", "/repositories/{id}/git/blobs/{file_sha}")]
public sealed virtual Task`1<Blob> Get(long repositoryId, string reference);
    [ManualRouteAttribute("POST", "/repos/{owner}/{repo}/git/blobs")]
public sealed virtual Task`1<BlobReference> Create(string owner, string name, NewBlob newBlob);
    [ManualRouteAttribute("POST", "/repositories/{id}/git/blobs")]
public sealed virtual Task`1<BlobReference> Create(long repositoryId, NewBlob newBlob);
}
public class Octokit.BodyWrapper : object {
    [CompilerGeneratedAttribute]
private string <Body>k__BackingField;
    public string Body { get; private set; }
    public BodyWrapper(string body);
    [CompilerGeneratedAttribute]
public string get_Body();
    [CompilerGeneratedAttribute]
private void set_Body(string value);
}
[DebuggerDisplayAttribute("{DebuggerDisplay,nq}")]
public class Octokit.Branch : object {
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <Protected>k__BackingField;
    [CompilerGeneratedAttribute]
private GitReference <Commit>k__BackingField;
    public string Name { get; private set; }
    public bool Protected { get; private set; }
    public GitReference Commit { get; private set; }
    internal string DebuggerDisplay { get; }
    public Branch(string name, GitReference commit, bool protected);
    [CompilerGeneratedAttribute]
public string get_Name();
    [CompilerGeneratedAttribute]
private void set_Name(string value);
    [CompilerGeneratedAttribute]
public bool get_Protected();
    [CompilerGeneratedAttribute]
private void set_Protected(bool value);
    [CompilerGeneratedAttribute]
public GitReference get_Commit();
    [CompilerGeneratedAttribute]
private void set_Commit(GitReference value);
    internal string get_DebuggerDisplay();
}
[DebuggerDisplayAttribute("{DebuggerDisplay,nq}")]
public class Octokit.BranchProtectionEnabledCommon : object {
    [CompilerGeneratedAttribute]
private bool <Enabled>k__BackingField;
    public bool Enabled { get; private set; }
    internal string DebuggerDisplay { get; }
    public BranchProtectionEnabledCommon(bool enabled);
    [CompilerGeneratedAttribute]
public bool get_Enabled();
    [CompilerGeneratedAttribute]
private void set_Enabled(bool value);
    internal string get_DebuggerDisplay();
}
[DebuggerDisplayAttribute("{DebuggerDisplay,nq}")]
public class Octokit.BranchProtectionPushRestrictions : object {
    [CompilerGeneratedAttribute]
private IReadOnlyList`1<Team> <Teams>k__BackingField;
    [CompilerGeneratedAttribute]
private IReadOnlyList`1<User> <Users>k__BackingField;
    public IReadOnlyList`1<Team> Teams { get; private set; }
    public IReadOnlyList`1<User> Users { get; private set; }
    internal string DebuggerDisplay { get; }
    public BranchProtectionPushRestrictions(IReadOnlyList`1<Team> teams, IReadOnlyList`1<User> users);
    [CompilerGeneratedAttribute]
public IReadOnlyList`1<Team> get_Teams();
    [CompilerGeneratedAttribute]
private void set_Teams(IReadOnlyList`1<Team> value);
    [CompilerGeneratedAttribute]
public IReadOnlyList`1<User> get_Users();
    [CompilerGeneratedAttribute]
private void set_Users(IReadOnlyList`1<User> value);
    internal string get_DebuggerDisplay();
}
[DebuggerDisplayAttribute("{DebuggerDisplay,nq}")]
public class Octokit.BranchProtectionPushRestrictionsUpdate : object {
    [CompilerGeneratedAttribute]
private BranchProtectionTeamCollection <Teams>k__BackingField;
    [CompilerGeneratedAttribute]
private BranchProtectionUserCollection <Users>k__BackingField;
    public BranchProtectionTeamCollection Teams { get; private set; }
    public BranchProtectionUserCollection Users { get; private set; }
    internal string DebuggerDisplay { get; }
    public BranchProtectionPushRestrictionsUpdate(BranchProtectionTeamCollection teams);
    public BranchProtectionPushRestrictionsUpdate(BranchProtectionUserCollection users);
    public BranchProtectionPushRestrictionsUpdate(BranchProtectionTeamCollection teams, BranchProtectionUserCollection users);
    [CompilerGeneratedAttribute]
public BranchProtectionTeamCollection get_Teams();
    [CompilerGeneratedAttribute]
private void set_Teams(BranchProtectionTeamCollection value);
    [CompilerGeneratedAttribute]
public BranchProtectionUserCollection get_Users();
    [CompilerGeneratedAttribute]
private void set_Users(BranchProtectionUserCollection value);
    internal string get_DebuggerDisplay();
}
[DebuggerDisplayAttribute("{DebuggerDisplay,nq}")]
public class Octokit.BranchProtectionRequiredReviews : object {
    [CompilerGeneratedAttribute]
private BranchProtectionRequiredReviewsDismissalRestrictions <DismissalRestrictions>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <DismissStaleReviews>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <RequireCodeOwnerReviews>k__BackingField;
    [CompilerGeneratedAttribute]
private int <RequiredApprovingReviewCount>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <RequireLastPushApproval>k__BackingField;
    public BranchProtectionRequiredReviewsDismissalRestrictions DismissalRestrictions { get; private set; }
    public bool DismissStaleReviews { get; private set; }
    public bool RequireCodeOwnerReviews { get; private set; }
    public int RequiredApprovingReviewCount { get; private set; }
    public bool RequireLastPushApproval { get; protected set; }
    internal string DebuggerDisplay { get; }
    public BranchProtectionRequiredReviews(BranchProtectionRequiredReviewsDismissalRestrictions dismissalRestrictions, bool dismissStaleReviews, bool requireCodeOwnerReviews, int requiredApprovingReviewCount, bool requireLastPushApproval);
    [CompilerGeneratedAttribute]
public BranchProtectionRequiredReviewsDismissalRestrictions get_DismissalRestrictions();
    [CompilerGeneratedAttribute]
private void set_DismissalRestrictions(BranchProtectionRequiredReviewsDismissalRestrictions value);
    [CompilerGeneratedAttribute]
public bool get_DismissStaleReviews();
    [CompilerGeneratedAttribute]
private void set_DismissStaleReviews(bool value);
    [CompilerGeneratedAttribute]
public bool get_RequireCodeOwnerReviews();
    [CompilerGeneratedAttribute]
private void set_RequireCodeOwnerReviews(bool value);
    [CompilerGeneratedAttribute]
public int get_RequiredApprovingReviewCount();
    [CompilerGeneratedAttribute]
private void set_RequiredApprovingReviewCount(int value);
    [CompilerGeneratedAttribute]
public bool get_RequireLastPushApproval();
    [CompilerGeneratedAttribute]
protected void set_RequireLastPushApproval(bool value);
    internal string get_DebuggerDisplay();
}
[DebuggerDisplayAttribute("{DebuggerDisplay,nq}")]
public class Octokit.BranchProtectionRequiredReviewsDismissalRestrictions : object {
    [CompilerGeneratedAttribute]
private IReadOnlyList`1<Team> <Teams>k__BackingField;
    [CompilerGeneratedAttribute]
private IReadOnlyList`1<User> <Users>k__BackingField;
    public IReadOnlyList`1<Team> Teams { get; private set; }
    public IReadOnlyList`1<User> Users { get; private set; }
    internal string DebuggerDisplay { get; }
    public BranchProtectionRequiredReviewsDismissalRestrictions(IReadOnlyList`1<Team> teams, IReadOnlyList`1<User> users);
    [CompilerGeneratedAttribute]
public IReadOnlyList`1<Team> get_Teams();
    [CompilerGeneratedAttribute]
private void set_Teams(IReadOnlyList`1<Team> value);
    [CompilerGeneratedAttribute]
public IReadOnlyList`1<User> get_Users();
    [CompilerGeneratedAttribute]
private void set_Users(IReadOnlyList`1<User> value);
    internal string get_DebuggerDisplay();
}
[DebuggerDisplayAttribute("{DebuggerDisplay,nq}")]
public class Octokit.BranchProtectionRequiredReviewsDismissalRestrictionsUpdate : object {
    [CompilerGeneratedAttribute]
private BranchProtectionTeamCollection <Teams>k__BackingField;
    [CompilerGeneratedAttribute]
private BranchProtectionUserCollection <Users>k__BackingField;
    public BranchProtectionTeamCollection Teams { get; private set; }
    public BranchProtectionUserCollection Users { get; private set; }
    internal string DebuggerDisplay { get; }
    public BranchProtectionRequiredReviewsDismissalRestrictionsUpdate(bool enabled);
    public BranchProtectionRequiredReviewsDismissalRestrictionsUpdate(BranchProtectionTeamCollection teams);
    public BranchProtectionRequiredReviewsDismissalRestrictionsUpdate(BranchProtectionUserCollection users);
    public BranchProtectionRequiredReviewsDismissalRestrictionsUpdate(BranchProtectionTeamCollection teams, BranchProtectionUserCollection users);
    [CompilerGeneratedAttribute]
public BranchProtectionTeamCollection get_Teams();
    [CompilerGeneratedAttribute]
private void set_Teams(BranchProtectionTeamCollection value);
    [CompilerGeneratedAttribute]
public BranchProtectionUserCollection get_Users();
    [CompilerGeneratedAttribute]
private void set_Users(BranchProtectionUserCollection value);
    internal string get_DebuggerDisplay();
}
[DebuggerDisplayAttribute("{DebuggerDisplay,nq}")]
public class Octokit.BranchProtectionRequiredReviewsUpdate : object {
    [CompilerGeneratedAttribute]
private BranchProtectionRequiredReviewsDismissalRestrictionsUpdate <DismissalRestrictions>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <DismissStaleReviews>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <RequireCodeOwnerReviews>k__BackingField;
    [CompilerGeneratedAttribute]
private int <RequiredApprovingReviewCount>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <RequireLastPushApproval>k__BackingField;
    public BranchProtectionRequiredReviewsDismissalRestrictionsUpdate DismissalRestrictions { get; protected set; }
    public bool DismissStaleReviews { get; protected set; }
    public bool RequireCodeOwnerReviews { get; protected set; }
    public int RequiredApprovingReviewCount { get; protected set; }
    public bool RequireLastPushApproval { get; protected set; }
    internal string DebuggerDisplay { get; }
    public BranchProtectionRequiredReviewsUpdate(bool dismissStaleReviews, bool requireCodeOwnerReviews, int requiredApprovingReviewCount, bool requireLastPushApproval);
    public BranchProtectionRequiredReviewsUpdate(BranchProtectionRequiredReviewsDismissalRestrictionsUpdate dismissalRestrictions, bool dismissStaleReviews, bool requireCodeOwnerReviews, int requiredApprovingReviewCount, bool requireLastPushApproval);
    [CompilerGeneratedAttribute]
public BranchProtectionRequiredReviewsDismissalRestrictionsUpdate get_DismissalRestrictions();
    [CompilerGeneratedAttribute]
protected void set_DismissalRestrictions(BranchProtectionRequiredReviewsDismissalRestrictionsUpdate value);
    [CompilerGeneratedAttribute]
public bool get_DismissStaleReviews();
    [CompilerGeneratedAttribute]
protected void set_DismissStaleReviews(bool value);
    [CompilerGeneratedAttribute]
public bool get_RequireCodeOwnerReviews();
    [CompilerGeneratedAttribute]
protected void set_RequireCodeOwnerReviews(bool value);
    [CompilerGeneratedAttribute]
public int get_RequiredApprovingReviewCount();
    [CompilerGeneratedAttribute]
protected void set_RequiredApprovingReviewCount(int value);
    [CompilerGeneratedAttribute]
public bool get_RequireLastPushApproval();
    [CompilerGeneratedAttribute]
protected void set_RequireLastPushApproval(bool value);
    internal string get_DebuggerDisplay();
}
[DebuggerDisplayAttribute("{DebuggerDisplay,nq}")]
public class Octokit.BranchProtectionRequiredStatusChecks : object {
    [CompilerGeneratedAttribute]
private bool <Strict>k__BackingField;
    [CompilerGeneratedAttribute]
private IReadOnlyList`1<string> <Contexts>k__BackingField;
    public bool Strict { get; private set; }
    public IReadOnlyList`1<string> Contexts { get; private set; }
    internal string DebuggerDisplay { get; }
    public BranchProtectionRequiredStatusChecks(bool strict, IReadOnlyList`1<string> contexts);
    [CompilerGeneratedAttribute]
public bool get_Strict();
    [CompilerGeneratedAttribute]
private void set_Strict(bool value);
    [CompilerGeneratedAttribute]
public IReadOnlyList`1<string> get_Contexts();
    [CompilerGeneratedAttribute]
private void set_Contexts(IReadOnlyList`1<string> value);
    internal string get_DebuggerDisplay();
}
[DebuggerDisplayAttribute("{DebuggerDisplay,nq}")]
public class Octokit.BranchProtectionRequiredStatusChecksUpdate : object {
    [CompilerGeneratedAttribute]
private bool <Strict>k__BackingField;
    [CompilerGeneratedAttribute]
private IReadOnlyList`1<string> <Contexts>k__BackingField;
    public bool Strict { get; protected set; }
    public IReadOnlyList`1<string> Contexts { get; private set; }
    internal string DebuggerDisplay { get; }
    public BranchProtectionRequiredStatusChecksUpdate(bool strict, IReadOnlyList`1<string> contexts);
    [CompilerGeneratedAttribute]
public bool get_Strict();
    [CompilerGeneratedAttribute]
protected void set_Strict(bool value);
    [CompilerGeneratedAttribute]
public IReadOnlyList`1<string> get_Contexts();
    [CompilerGeneratedAttribute]
private void set_Contexts(IReadOnlyList`1<string> value);
    internal string get_DebuggerDisplay();
}
[DebuggerDisplayAttribute("{DebuggerDisplay,nq}")]
public class Octokit.BranchProtectionSettings : object {
    [CompilerGeneratedAttribute]
private BranchProtectionRequiredStatusChecks <RequiredStatusChecks>k__BackingField;
    [CompilerGeneratedAttribute]
private BranchProtectionRequiredReviews <RequiredPullRequestReviews>k__BackingField;
    [CompilerGeneratedAttribute]
private BranchProtectionPushRestrictions <Restrictions>k__BackingField;
    [CompilerGeneratedAttribute]
private EnforceAdmins <EnforceAdmins>k__BackingField;
    [CompilerGeneratedAttribute]
private EnforceLock <LockBranch>k__BackingField;
    [CompilerGeneratedAttribute]
private BranchProtectionEnabledCommon <RequiredLinearHistory>k__BackingField;
    [CompilerGeneratedAttribute]
private BranchProtectionEnabledCommon <AllowForcePushes>k__BackingField;
    [CompilerGeneratedAttribute]
private BranchProtectionEnabledCommon <AllowDeletions>k__BackingField;
    [CompilerGeneratedAttribute]
private BranchProtectionEnabledCommon <BlockCreations>k__BackingField;
    [CompilerGeneratedAttribute]
private BranchProtectionEnabledCommon <RequiredConversationResolution>k__BackingField;
    [CompilerGeneratedAttribute]
private BranchProtectionEnabledCommon <RequiredSignatures>k__BackingField;
    public BranchProtectionRequiredStatusChecks RequiredStatusChecks { get; private set; }
    public BranchProtectionRequiredReviews RequiredPullRequestReviews { get; private set; }
    public BranchProtectionPushRestrictions Restrictions { get; private set; }
    public EnforceAdmins EnforceAdmins { get; private set; }
    public EnforceLock LockBranch { get; private set; }
    public BranchProtectionEnabledCommon RequiredLinearHistory { get; private set; }
    public BranchProtectionEnabledCommon AllowForcePushes { get; private set; }
    public BranchProtectionEnabledCommon AllowDeletions { get; private set; }
    public BranchProtectionEnabledCommon BlockCreations { get; private set; }
    public BranchProtectionEnabledCommon RequiredConversationResolution { get; private set; }
    public BranchProtectionEnabledCommon RequiredSignatures { get; private set; }
    internal string DebuggerDisplay { get; }
    public BranchProtectionSettings(BranchProtectionRequiredStatusChecks requiredStatusChecks, BranchProtectionRequiredReviews requiredPullRequestReviews, BranchProtectionPushRestrictions restrictions, EnforceAdmins enforceAdmins, BranchProtectionEnabledCommon requiredLinearHistory, BranchProtectionEnabledCommon allowForcePushes, BranchProtectionEnabledCommon allowDeletions, BranchProtectionEnabledCommon blockCreations, BranchProtectionEnabledCommon requiredConversationResolution, BranchProtectionEnabledCommon requiredSignatures, EnforceLock lockBranch);
    [CompilerGeneratedAttribute]
public BranchProtectionRequiredStatusChecks get_RequiredStatusChecks();
    [CompilerGeneratedAttribute]
private void set_RequiredStatusChecks(BranchProtectionRequiredStatusChecks value);
    [CompilerGeneratedAttribute]
public BranchProtectionRequiredReviews get_RequiredPullRequestReviews();
    [CompilerGeneratedAttribute]
private void set_RequiredPullRequestReviews(BranchProtectionRequiredReviews value);
    [CompilerGeneratedAttribute]
public BranchProtectionPushRestrictions get_Restrictions();
    [CompilerGeneratedAttribute]
private void set_Restrictions(BranchProtectionPushRestrictions value);
    [CompilerGeneratedAttribute]
public EnforceAdmins get_EnforceAdmins();
    [CompilerGeneratedAttribute]
private void set_EnforceAdmins(EnforceAdmins value);
    [CompilerGeneratedAttribute]
public EnforceLock get_LockBranch();
    [CompilerGeneratedAttribute]
private void set_LockBranch(EnforceLock value);
    [CompilerGeneratedAttribute]
public BranchProtectionEnabledCommon get_RequiredLinearHistory();
    [CompilerGeneratedAttribute]
private void set_RequiredLinearHistory(BranchProtectionEnabledCommon value);
    [CompilerGeneratedAttribute]
public BranchProtectionEnabledCommon get_AllowForcePushes();
    [CompilerGeneratedAttribute]
private void set_AllowForcePushes(BranchProtectionEnabledCommon value);
    [CompilerGeneratedAttribute]
public BranchProtectionEnabledCommon get_AllowDeletions();
    [CompilerGeneratedAttribute]
private void set_AllowDeletions(BranchProtectionEnabledCommon value);
    [CompilerGeneratedAttribute]
public BranchProtectionEnabledCommon get_BlockCreations();
    [CompilerGeneratedAttribute]
private void set_BlockCreations(BranchProtectionEnabledCommon value);
    [CompilerGeneratedAttribute]
public BranchProtectionEnabledCommon get_RequiredConversationResolution();
    [CompilerGeneratedAttribute]
private void set_RequiredConversationResolution(BranchProtectionEnabledCommon value);
    [CompilerGeneratedAttribute]
public BranchProtectionEnabledCommon get_RequiredSignatures();
    [CompilerGeneratedAttribute]
private void set_RequiredSignatures(BranchProtectionEnabledCommon value);
    internal string get_DebuggerDisplay();
}
[DebuggerDisplayAttribute("{DebuggerDisplay,nq}")]
public class Octokit.BranchProtectionSettingsUpdate : object {
    [CompilerGeneratedAttribute]
private BranchProtectionRequiredStatusChecksUpdate <RequiredStatusChecks>k__BackingField;
    [CompilerGeneratedAttribute]
private BranchProtectionRequiredReviewsUpdate <RequiredPullRequestReviews>k__BackingField;
    [CompilerGeneratedAttribute]
private BranchProtectionPushRestrictionsUpdate <Restrictions>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <RequiredSignatures>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <EnforceAdmins>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <LockBranch>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <RequiredLinearHistory>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<bool> <AllowForcePushes>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <AllowDeletions>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <BlockCreations>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <RequiredConversationResolution>k__BackingField;
    [SerializeNullAttribute]
public BranchProtectionRequiredStatusChecksUpdate RequiredStatusChecks { get; protected set; }
    [SerializeNullAttribute]
public BranchProtectionRequiredReviewsUpdate RequiredPullRequestReviews { get; protected set; }
    [SerializeNullAttribute]
public BranchProtectionPushRestrictionsUpdate Restrictions { get; protected set; }
    public bool RequiredSignatures { get; public set; }
    public bool EnforceAdmins { get; public set; }
    public bool LockBranch { get; public set; }
    public bool RequiredLinearHistory { get; public set; }
    public Nullable`1<bool> AllowForcePushes { get; public set; }
    public bool AllowDeletions { get; public set; }
    public bool BlockCreations { get; public set; }
    public bool RequiredConversationResolution { get; public set; }
    internal string DebuggerDisplay { get; }
    public BranchProtectionSettingsUpdate(BranchProtectionRequiredStatusChecksUpdate requiredStatusChecks);
    public BranchProtectionSettingsUpdate(BranchProtectionRequiredReviewsUpdate requiredPullRequestReviews);
    public BranchProtectionSettingsUpdate(BranchProtectionPushRestrictionsUpdate restrictions);
    public BranchProtectionSettingsUpdate(bool enforceAdmins, bool lockBranch);
    public BranchProtectionSettingsUpdate(BranchProtectionRequiredStatusChecksUpdate requiredStatusChecks, BranchProtectionRequiredReviewsUpdate requiredPullRequestReviews, bool enforceAdmins, bool lockBranch);
    public BranchProtectionSettingsUpdate(BranchProtectionRequiredStatusChecksUpdate requiredStatusChecks, BranchProtectionRequiredReviewsUpdate requiredPullRequestReviews, BranchProtectionPushRestrictionsUpdate restrictions, bool enforceAdmins, bool lockBranch);
    public BranchProtectionSettingsUpdate(BranchProtectionRequiredStatusChecksUpdate requiredStatusChecks, BranchProtectionRequiredReviewsUpdate requiredPullRequestReviews, BranchProtectionPushRestrictionsUpdate restrictions, bool requiredSignatures, bool enforceAdmins, bool requiredLinearHistory, Nullable`1<bool> allowForcePushes, bool allowDeletions, bool blockCreations, bool requiredConversationResolution, bool lockBranch);
    [CompilerGeneratedAttribute]
public BranchProtectionRequiredStatusChecksUpdate get_RequiredStatusChecks();
    [CompilerGeneratedAttribute]
protected void set_RequiredStatusChecks(BranchProtectionRequiredStatusChecksUpdate value);
    [CompilerGeneratedAttribute]
public BranchProtectionRequiredReviewsUpdate get_RequiredPullRequestReviews();
    [CompilerGeneratedAttribute]
protected void set_RequiredPullRequestReviews(BranchProtectionRequiredReviewsUpdate value);
    [CompilerGeneratedAttribute]
public BranchProtectionPushRestrictionsUpdate get_Restrictions();
    [CompilerGeneratedAttribute]
protected void set_Restrictions(BranchProtectionPushRestrictionsUpdate value);
    [CompilerGeneratedAttribute]
public bool get_RequiredSignatures();
    [CompilerGeneratedAttribute]
public void set_RequiredSignatures(bool value);
    [CompilerGeneratedAttribute]
public bool get_EnforceAdmins();
    [CompilerGeneratedAttribute]
public void set_EnforceAdmins(bool value);
    [CompilerGeneratedAttribute]
public bool get_LockBranch();
    [CompilerGeneratedAttribute]
public void set_LockBranch(bool value);
    [CompilerGeneratedAttribute]
public bool get_RequiredLinearHistory();
    [CompilerGeneratedAttribute]
public void set_RequiredLinearHistory(bool value);
    [CompilerGeneratedAttribute]
public Nullable`1<bool> get_AllowForcePushes();
    [CompilerGeneratedAttribute]
public void set_AllowForcePushes(Nullable`1<bool> value);
    [CompilerGeneratedAttribute]
public bool get_AllowDeletions();
    [CompilerGeneratedAttribute]
public void set_AllowDeletions(bool value);
    [CompilerGeneratedAttribute]
public bool get_BlockCreations();
    [CompilerGeneratedAttribute]
public void set_BlockCreations(bool value);
    [CompilerGeneratedAttribute]
public bool get_RequiredConversationResolution();
    [CompilerGeneratedAttribute]
public void set_RequiredConversationResolution(bool value);
    internal string get_DebuggerDisplay();
}
[DebuggerDisplayAttribute("{DebuggerDisplay,nq}")]
public class Octokit.BranchProtectionTeamCollection : Collection`1<string> {
    internal string DebuggerDisplay { get; }
    public BranchProtectionTeamCollection(IList`1<string> list);
    internal string get_DebuggerDisplay();
}
[DebuggerDisplayAttribute("{DebuggerDisplay,nq}")]
public class Octokit.BranchProtectionUserCollection : Collection`1<string> {
    internal string DebuggerDisplay { get; }
    public BranchProtectionUserCollection(IList`1<string> list);
    internal string get_DebuggerDisplay();
}
public static class Octokit.Caching.CachedResponse : object {
}
public class Octokit.Caching.CachingHttpClient : object {
    internal IHttpClient _httpClient;
    internal IResponseCache _responseCache;
    public CachingHttpClient(IHttpClient httpClient, IResponseCache responseCache);
    [AsyncStateMachineAttribute("Octokit.Caching.CachingHttpClient/<Send>d__3")]
public sealed virtual Task`1<IResponse> Send(IRequest request, CancellationToken cancellationToken, Func`2<object, object> preprocessResponseBody);
    [AsyncStateMachineAttribute("Octokit.Caching.CachingHttpClient/<TryGetCachedResponse>d__4")]
private Task`1<IResponse> TryGetCachedResponse(IRequest request);
    [AsyncStateMachineAttribute("Octokit.Caching.CachingHttpClient/<TrySetCachedResponse>d__5")]
private Task TrySetCachedResponse(IRequest request, IResponse response);
    public sealed virtual void SetRequestTimeout(TimeSpan timeout);
    public sealed virtual void Dispose();
}
public interface Octokit.Caching.IResponseCache {
    public abstract virtual Task`1<V1> GetAsync(IRequest request);
    public abstract virtual Task SetAsync(IRequest request, V1 cachedResponse);
}
public enum Octokit.ChangeType : Enum {
    public int value__;
    [ParameterAttribute]
public static ChangeType Added;
    [ParameterAttribute]
public static ChangeType Removed;
}
public enum Octokit.CheckAnnotationLevel : Enum {
    public int value__;
    [ParameterAttribute]
public static CheckAnnotationLevel Notice;
    [ParameterAttribute]
public static CheckAnnotationLevel Warning;
    [ParameterAttribute]
public static CheckAnnotationLevel Failure;
}
public enum Octokit.CheckConclusion : Enum {
    public int value__;
    [ParameterAttribute]
public static CheckConclusion Success;
    [ParameterAttribute]
public static CheckConclusion Failure;
    [ParameterAttribute]
public static CheckConclusion Neutral;
    [ParameterAttribute]
public static CheckConclusion Cancelled;
    [ParameterAttribute]
public static CheckConclusion TimedOut;
    [ParameterAttribute]
public static CheckConclusion ActionRequired;
    [ParameterAttribute]
public static CheckConclusion Skipped;
    [ParameterAttribute]
public static CheckConclusion Stale;
}
[DebuggerDisplayAttribute("{DebuggerDisplay,nq}")]
public class Octokit.CheckRun : object {
    [CompilerGeneratedAttribute]
private long <Id>k__BackingField;
    [CompilerGeneratedAttribute]
private string <HeadSha>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ExternalId>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Url>k__BackingField;
    [CompilerGeneratedAttribute]
private string <HtmlUrl>k__BackingField;
    [CompilerGeneratedAttribute]
private string <DetailsUrl>k__BackingField;
    [CompilerGeneratedAttribute]
private StringEnum`1<CheckStatus> <Status>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<StringEnum`1<CheckConclusion>> <Conclusion>k__BackingField;
    [CompilerGeneratedAttribute]
private DateTimeOffset <StartedAt>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<DateTimeOffset> <CompletedAt>k__BackingField;
    [CompilerGeneratedAttribute]
private CheckRunOutputResponse <Output>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    [CompilerGeneratedAttribute]
private CheckSuite <CheckSuite>k__BackingField;
    [CompilerGeneratedAttribute]
private GitHubApp <App>k__BackingField;
    [CompilerGeneratedAttribute]
private IReadOnlyList`1<PullRequest> <PullRequests>k__BackingField;
    public long Id { get; private set; }
    public string HeadSha { get; private set; }
    public string ExternalId { get; private set; }
    public string Url { get; private set; }
    public string HtmlUrl { get; private set; }
    public string DetailsUrl { get; private set; }
    public StringEnum`1<CheckStatus> Status { get; private set; }
    public Nullable`1<StringEnum`1<CheckConclusion>> Conclusion { get; private set; }
    public DateTimeOffset StartedAt { get; private set; }
    public Nullable`1<DateTimeOffset> CompletedAt { get; private set; }
    public CheckRunOutputResponse Output { get; private set; }
    public string Name { get; private set; }
    public CheckSuite CheckSuite { get; private set; }
    public GitHubApp App { get; private set; }
    public IReadOnlyList`1<PullRequest> PullRequests { get; private set; }
    internal string DebuggerDisplay { get; }
    public CheckRun(long id, string headSha, string externalId, string url, string htmlUrl, string detailsUrl, CheckStatus status, Nullable`1<CheckConclusion> conclusion, DateTimeOffset startedAt, Nullable`1<DateTimeOffset> completedAt, CheckRunOutputResponse output, string name, CheckSuite checkSuite, GitHubApp app, IReadOnlyList`1<PullRequest> pullRequests);
    [CompilerGeneratedAttribute]
public long get_Id();
    [CompilerGeneratedAttribute]
private void set_Id(long value);
    [CompilerGeneratedAttribute]
public string get_HeadSha();
    [CompilerGeneratedAttribute]
private void set_HeadSha(string value);
    [CompilerGeneratedAttribute]
public string get_ExternalId();
    [CompilerGeneratedAttribute]
private void set_ExternalId(string value);
    [CompilerGeneratedAttribute]
public string get_Url();
    [CompilerGeneratedAttribute]
private void set_Url(string value);
    [CompilerGeneratedAttribute]
public string get_HtmlUrl();
    [CompilerGeneratedAttribute]
private void set_HtmlUrl(string value);
    [CompilerGeneratedAttribute]
public string get_DetailsUrl();
    [CompilerGeneratedAttribute]
private void set_DetailsUrl(string value);
    [CompilerGeneratedAttribute]
public StringEnum`1<CheckStatus> get_Status();
    [CompilerGeneratedAttribute]
private void set_Status(StringEnum`1<CheckStatus> value);
    [CompilerGeneratedAttribute]
public Nullable`1<StringEnum`1<CheckConclusion>> get_Conclusion();
    [CompilerGeneratedAttribute]
private void set_Conclusion(Nullable`1<StringEnum`1<CheckConclusion>> value);
    [CompilerGeneratedAttribute]
public DateTimeOffset get_StartedAt();
    [CompilerGeneratedAttribute]
private void set_StartedAt(DateTimeOffset value);
    [CompilerGeneratedAttribute]
public Nullable`1<DateTimeOffset> get_CompletedAt();
    [CompilerGeneratedAttribute]
private void set_CompletedAt(Nullable`1<DateTimeOffset> value);
    [CompilerGeneratedAttribute]
public CheckRunOutputResponse get_Output();
    [CompilerGeneratedAttribute]
private void set_Output(CheckRunOutputResponse value);
    [CompilerGeneratedAttribute]
public string get_Name();
    [CompilerGeneratedAttribute]
private void set_Name(string value);
    [CompilerGeneratedAttribute]
public CheckSuite get_CheckSuite();
    [CompilerGeneratedAttribute]
private void set_CheckSuite(CheckSuite value);
    [CompilerGeneratedAttribute]
public GitHubApp get_App();
    [CompilerGeneratedAttribute]
private void set_App(GitHubApp value);
    [CompilerGeneratedAttribute]
public IReadOnlyList`1<PullRequest> get_PullRequests();
    [CompilerGeneratedAttribute]
private void set_PullRequests(IReadOnlyList`1<PullRequest> value);
    internal string get_DebuggerDisplay();
}
[DebuggerDisplayAttribute("{DebuggerDisplay,nq}")]
public class Octokit.CheckRunAnnotation : object {
    [CompilerGeneratedAttribute]
private string <Filename>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Path>k__BackingField;
    [CompilerGeneratedAttribute]
private string <BlobHref>k__BackingField;
    [CompilerGeneratedAttribute]
private int <StartLine>k__BackingField;
    [CompilerGeneratedAttribute]
private int <EndLine>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<int> <StartColumn>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<int> <EndColumn>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<StringEnum`1<CheckWarningLevel>> <WarningLevel>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<StringEnum`1<CheckAnnotationLevel>> <AnnotationLevel>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Message>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Title>k__BackingField;
    [CompilerGeneratedAttribute]
private string <RawDetails>k__BackingField;
    [ObsoleteAttribute("This property is replaced with Path but may still be required on GitHub Enterprise 2.14")]
public string Filename { get; private set; }
    public string Path { get; private set; }
    public string BlobHref { get; private set; }
    public int StartLine { get; private set; }
    public int EndLine { get; private set; }
    public Nullable`1<int> StartColumn { get; private set; }
    public Nullable`1<int> EndColumn { get; private set; }
    [ObsoleteAttribute("This property is replaced with AnnotationLevel but may still be required on GitHub Enterprise 2.14")]
public Nullable`1<StringEnum`1<CheckWarningLevel>> WarningLevel { get; private set; }
    public Nullable`1<StringEnum`1<CheckAnnotationLevel>> AnnotationLevel { get; private set; }
    public string Message { get; private set; }
    public string Title { get; private set; }
    public string RawDetails { get; private set; }
    internal string DebuggerDisplay { get; }
    public CheckRunAnnotation(string path, string blobHref, int startLine, int endLine, Nullable`1<int> startColumn, Nullable`1<int> endColumn, Nullable`1<CheckAnnotationLevel> annotationLevel, string message, string title, string rawDetails);
    [ObsoleteAttribute("This ctor taking Filename, BlobHref and WarningLevel is deprecated but may still be required on GitHub Enterprise 2.14")]
public CheckRunAnnotation(string filename, string path, string blobHref, int startLine, int endLine, Nullable`1<int> startColumn, Nullable`1<int> endColumn, Nullable`1<CheckWarningLevel> warningLevel, Nullable`1<CheckAnnotationLevel> annotationLevel, string message, string title, string rawDetails);
    [CompilerGeneratedAttribute]
public string get_Filename();
    [CompilerGeneratedAttribute]
private void set_Filename(string value);
    [CompilerGeneratedAttribute]
public string get_Path();
    [CompilerGeneratedAttribute]
private void set_Path(string value);
    [CompilerGeneratedAttribute]
public string get_BlobHref();
    [CompilerGeneratedAttribute]
private void set_BlobHref(string value);
    [CompilerGeneratedAttribute]
public int get_StartLine();
    [CompilerGeneratedAttribute]
private void set_StartLine(int value);
    [CompilerGeneratedAttribute]
public int get_EndLine();
    [CompilerGeneratedAttribute]
private void set_EndLine(int value);
    [CompilerGeneratedAttribute]
public Nullable`1<int> get_StartColumn();
    [CompilerGeneratedAttribute]
private void set_StartColumn(Nullable`1<int> value);
    [CompilerGeneratedAttribute]
public Nullable`1<int> get_EndColumn();
    [CompilerGeneratedAttribute]
private void set_EndColumn(Nullable`1<int> value);
    [CompilerGeneratedAttribute]
public Nullable`1<StringEnum`1<CheckWarningLevel>> get_WarningLevel();
    [CompilerGeneratedAttribute]
private void set_WarningLevel(Nullable`1<StringEnum`1<CheckWarningLevel>> value);
    [CompilerGeneratedAttribute]
public Nullable`1<StringEnum`1<CheckAnnotationLevel>> get_AnnotationLevel();
    [CompilerGeneratedAttribute]
private void set_AnnotationLevel(Nullable`1<StringEnum`1<CheckAnnotationLevel>> value);
    [CompilerGeneratedAttribute]
public string get_Message();
    [CompilerGeneratedAttribute]
private void set_Message(string value);
    [CompilerGeneratedAttribute]
public string get_Title();
    [CompilerGeneratedAttribute]
private void set_Title(string value);
    [CompilerGeneratedAttribute]
public string get_RawDetails();
    [CompilerGeneratedAttribute]
private void set_RawDetails(string value);
    internal string get_DebuggerDisplay();
}
public enum Octokit.CheckRunCompletedAtFilter : Enum {
    public int value__;
    [ParameterAttribute]
public static CheckRunCompletedAtFilter Latest;
    [ParameterAttribute]
public static CheckRunCompletedAtFilter All;
}
[DebuggerDisplayAttribute("{DebuggerDisplay,nq}")]
public class Octokit.CheckRunEventPayload : ActivityPayload {
    [CompilerGeneratedAttribute]
private string <Action>k__BackingField;
    [CompilerGeneratedAttribute]
private CheckRun <CheckRun>k__BackingField;
    [CompilerGeneratedAttribute]
private CheckRunRequestedAction <RequestedAction>k__BackingField;
    public string Action { get; private set; }
    public CheckRun CheckRun { get; private set; }
    public CheckRunRequestedAction RequestedAction { get; private set; }
    [CompilerGeneratedAttribute]
public string get_Action();
    [CompilerGeneratedAttribute]
private void set_Action(string value);
    [CompilerGeneratedAttribute]
public CheckRun get_CheckRun();
    [CompilerGeneratedAttribute]
private void set_CheckRun(CheckRun value);
    [CompilerGeneratedAttribute]
public CheckRunRequestedAction get_RequestedAction();
    [CompilerGeneratedAttribute]
private void set_RequestedAction(CheckRunRequestedAction value);
}
[DebuggerDisplayAttribute("{DebuggerDisplay,nq}")]
public class Octokit.CheckRunOutputResponse : object {
    [CompilerGeneratedAttribute]
private string <Title>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Summary>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Text>k__BackingField;
    [CompilerGeneratedAttribute]
private long <AnnotationsCount>k__BackingField;
    public string Title { get; private set; }
    public string Summary { get; private set; }
    public string Text { get; private set; }
    public long AnnotationsCount { get; private set; }
    internal string DebuggerDisplay { get; }
    public CheckRunOutputResponse(string title, string summary, string text, long annotationsCount);
    [CompilerGeneratedAttribute]
public string get_Title();
    [CompilerGeneratedAttribute]
private void set_Title(string value);
    [CompilerGeneratedAttribute]
public string get_Summary();
    [CompilerGeneratedAttribute]
private void set_Summary(string value);
    [CompilerGeneratedAttribute]
public string get_Text();
    [CompilerGeneratedAttribute]
private void set_Text(string value);
    [CompilerGeneratedAttribute]
public long get_AnnotationsCount();
    [CompilerGeneratedAttribute]
private void set_AnnotationsCount(long value);
    internal string get_DebuggerDisplay();
}
[DebuggerDisplayAttribute("{DebuggerDisplay,nq}")]
public class Octokit.CheckRunRequest : RequestParameters {
    [CompilerGeneratedAttribute]
private string <CheckName>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<StringEnum`1<CheckStatusFilter>> <Status>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<StringEnum`1<CheckRunCompletedAtFilter>> <Filter>k__BackingField;
    [ParameterAttribute]
public string CheckName { get; public set; }
    [ParameterAttribute]
public Nullable`1<StringEnum`1<CheckStatusFilter>> Status { get; public set; }
    [ParameterAttribute]
public Nullable`1<StringEnum`1<CheckRunCompletedAtFilter>> Filter { get; public set; }
    internal string DebuggerDisplay { get; }
    [CompilerGeneratedAttribute]
public string get_CheckName();
    [CompilerGeneratedAttribute]
public void set_CheckName(string value);
    [CompilerGeneratedAttribute]
public Nullable`1<StringEnum`1<CheckStatusFilter>> get_Status();
    [CompilerGeneratedAttribute]
public void set_Status(Nullable`1<StringEnum`1<CheckStatusFilter>> value);
    [CompilerGeneratedAttribute]
public Nullable`1<StringEnum`1<CheckRunCompletedAtFilter>> get_Filter();
    [CompilerGeneratedAttribute]
public void set_Filter(Nullable`1<StringEnum`1<CheckRunCompletedAtFilter>> value);
    internal string get_DebuggerDisplay();
}
[DebuggerDisplayAttribute("{DebuggerDisplay,nq}")]
public class Octokit.CheckRunRequestedAction : object {
    [CompilerGeneratedAttribute]
private string <Identifier>k__BackingField;
    public string Identifier { get; private set; }
    internal string DebuggerDisplay { get; }
    public CheckRunRequestedAction(string identifier);
    [CompilerGeneratedAttribute]
public string get_Identifier();
    [CompilerGeneratedAttribute]
private void set_Identifier(string value);
    internal string get_DebuggerDisplay();
}
public class Octokit.CheckRunsClient : ApiClient {
    public CheckRunsClient(IApiConnection apiConnection);
    [ManualRouteAttribute("POST", "/repos/{owner}/{repo}/check-runs")]
public sealed virtual Task`1<CheckRun> Create(string owner, string name, NewCheckRun newCheckRun);
    [ManualRouteAttribute("POST", "/repositories/{id}/check-runs")]
public sealed virtual Task`1<CheckRun> Create(long repositoryId, NewCheckRun newCheckRun);
    [ManualRouteAttribute("PATCH", "/repos/{owner}/{repo}/check-runs/{check_run_id}")]
public sealed virtual Task`1<CheckRun> Update(string owner, string name, long checkRunId, CheckRunUpdate checkRunUpdate);
    [ManualRouteAttribute("PATCH", "/repositories/{id}/check-runs/{check_run_id}")]
public sealed virtual Task`1<CheckRun> Update(long repositoryId, long checkRunId, CheckRunUpdate checkRunUpdate);
    [ManualRouteAttribute("GET", "/repos/{owner}/{repo}/commits/{commit_sha}/check-runs")]
public sealed virtual Task`1<CheckRunsResponse> GetAllForReference(string owner, string name, string reference);
    [ManualRouteAttribute("GET", "/repositories/{id}/commits/{commit_sha}/check-runs")]
public sealed virtual Task`1<CheckRunsResponse> GetAllForReference(long repositoryId, string reference);
    [ManualRouteAttribute("GET", "/repos/{owner}/{repo}/commits/{commit_sha}/check-runs")]
public sealed virtual Task`1<CheckRunsResponse> GetAllForReference(string owner, string name, string reference, CheckRunRequest checkRunRequest);
    [ManualRouteAttribute("GET", "/repositories/{id}/commits/{commit_sha}/check-runs")]
public sealed virtual Task`1<CheckRunsResponse> GetAllForReference(long repositoryId, string reference, CheckRunRequest checkRunRequest);
    [AsyncStateMachineAttribute("Octokit.CheckRunsClient/<GetAllForReference>d__9")]
[ManualRouteAttribute("GET", "/repos/{owner}/{repo}/commits/{commit_sha}/check-runs")]
public sealed virtual Task`1<CheckRunsResponse> GetAllForReference(string owner, string name, string reference, CheckRunRequest checkRunRequest, ApiOptions options);
    [AsyncStateMachineAttribute("Octokit.CheckRunsClient/<GetAllForReference>d__10")]
[ManualRouteAttribute("GET", "/repositories/{id}/commits/{commit_sha}/check-runs")]
public sealed virtual Task`1<CheckRunsResponse> GetAllForReference(long repositoryId, string reference, CheckRunRequest checkRunRequest, ApiOptions options);
    [ManualRouteAttribute("GET", "/repos/{owner}/{repo}/check-suite/{check_suite_id}/check-runs")]
public sealed virtual Task`1<CheckRunsResponse> GetAllForCheckSuite(string owner, string name, long checkSuiteId);
    [ManualRouteAttribute("GET", "/repositories/{id}/check-suites/{check_suite_id}/check-runs")]
public sealed virtual Task`1<CheckRunsResponse> GetAllForCheckSuite(long repositoryId, long checkSuiteId);
    [ManualRouteAttribute("GET", "/repos/{owner}/{repo}/check-suite/{check_suite_id}/check-runs")]
public sealed virtual Task`1<CheckRunsResponse> GetAllForCheckSuite(string owner, string name, long checkSuiteId, CheckRunRequest checkRunRequest);
    [ManualRouteAttribute("GET", "/repositories/{id}/check-suites/{check_suite_id}/check-runs")]
public sealed virtual Task`1<CheckRunsResponse> GetAllForCheckSuite(long repositoryId, long checkSuiteId, CheckRunRequest checkRunRequest);
    [AsyncStateMachineAttribute("Octokit.CheckRunsClient/<GetAllForCheckSuite>d__15")]
[ManualRouteAttribute("GET", "/repos/{owner}/{repo}/check-suite/{check_suite_id}/check-runs")]
public sealed virtual Task`1<CheckRunsResponse> GetAllForCheckSuite(string owner, string name, long checkSuiteId, CheckRunRequest checkRunRequest, ApiOptions options);
    [AsyncStateMachineAttribute("Octokit.CheckRunsClient/<GetAllForCheckSuite>d__16")]
[ManualRouteAttribute("GET", "/repositories/{id}/check-suites/{check_suite_id}/check-runs")]
public sealed virtual Task`1<CheckRunsResponse> GetAllForCheckSuite(long repositoryId, long checkSuiteId, CheckRunRequest checkRunRequest, ApiOptions options);
    [ManualRouteAttribute("GET", "/repos/{owner}/{repo}/check-runs/{check_run_id}")]
public sealed virtual Task`1<CheckRun> Get(string owner, string name, long checkRunId);
    [ManualRouteAttribute("GET", "/repositories/{id}/check-runs/{check_run_id}")]
public sealed virtual Task`1<CheckRun> Get(long repositoryId, long checkRunId);
    [ManualRouteAttribute("GET", "/repos/{owner}/{repo}/check-runs/{check_run_id}/annotations")]
public sealed virtual Task`1<IReadOnlyList`1<CheckRunAnnotation>> GetAllAnnotations(string owner, string name, long checkRunId);
    [ManualRouteAttribute("GET", "/repositories/{id}/check-runs/{check_run_id}/annotations")]
public sealed virtual Task`1<IReadOnlyList`1<CheckRunAnnotation>> GetAllAnnotations(long repositoryId, long checkRunId);
    [ManualRouteAttribute("GET", "/repos/{owner}/{repo}/check-runs/{check_run_id}/annotations")]
public sealed virtual Task`1<IReadOnlyList`1<CheckRunAnnotation>> GetAllAnnotations(string owner, string name, long checkRunId, ApiOptions options);
    [ManualRouteAttribute("GET", "/repositories/{id}/check-runs/{check_run_id}/annotations")]
public sealed virtual Task`1<IReadOnlyList`1<CheckRunAnnotation>> GetAllAnnotations(long repositoryId, long checkRunId, ApiOptions options);
}
[DebuggerDisplayAttribute("{DebuggerDisplay,nq}")]
public class Octokit.CheckRunsResponse : object {
    [CompilerGeneratedAttribute]
private int <TotalCount>k__BackingField;
    [CompilerGeneratedAttribute]
private IReadOnlyList`1<CheckRun> <CheckRuns>k__BackingField;
    public int TotalCount { get; private set; }
    public IReadOnlyList`1<CheckRun> CheckRuns { get; private set; }
    internal string DebuggerDisplay { get; }
    public CheckRunsResponse(int totalCount, IReadOnlyList`1<CheckRun> checkRuns);
    [CompilerGeneratedAttribute]
public int get_TotalCount();
    [CompilerGeneratedAttribute]
private void set_TotalCount(int value);
    [CompilerGeneratedAttribute]
public IReadOnlyList`1<CheckRun> get_CheckRuns();
    [CompilerGeneratedAttribute]
private void set_CheckRuns(IReadOnlyList`1<CheckRun> value);
    internal string get_DebuggerDisplay();
}
public enum Octokit.CheckRunStatusFilter : Enum {
    public int value__;
    [ParameterAttribute]
public static CheckRunStatusFilter Success;
    [ParameterAttribute]
public static CheckRunStatusFilter Failure;
    [ParameterAttribute]
public static CheckRunStatusFilter Neutral;
    [ParameterAttribute]
public static CheckRunStatusFilter Cancelled;
    [ParameterAttribute]
public static CheckRunStatusFilter TimedOut;
    [ParameterAttribute]
public static CheckRunStatusFilter ActionRequired;
    [ParameterAttribute]
public static CheckRunStatusFilter Stale;
    [ParameterAttribute]
public static CheckRunStatusFilter Requested;
    [ParameterAttribute]
public static CheckRunStatusFilter InProgress;
    [ParameterAttribute]
public static CheckRunStatusFilter Completed;
    [ParameterAttribute]
public static CheckRunStatusFilter Queued;
    [ParameterAttribute]
public static CheckRunStatusFilter Waiting;
    [ParameterAttribute]
public static CheckRunStatusFilter Skipped;
}
[DebuggerDisplayAttribute("{DebuggerDisplay,nq}")]
public class Octokit.CheckRunUpdate : object {
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    [CompilerGeneratedAttribute]
private string <DetailsUrl>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ExternalId>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<StringEnum`1<CheckStatus>> <Status>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<DateTimeOffset> <StartedAt>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<StringEnum`1<CheckConclusion>> <Conclusion>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<DateTimeOffset> <CompletedAt>k__BackingField;
    [CompilerGeneratedAttribute]
private NewCheckRunOutput <Output>k__BackingField;
    [CompilerGeneratedAttribute]
private IReadOnlyList`1<NewCheckRunAction> <Actions>k__BackingField;
    public string Name { get; public set; }
    public string DetailsUrl { get; public set; }
    public string ExternalId { get; public set; }
    public Nullable`1<StringEnum`1<CheckStatus>> Status { get; public set; }
    public Nullable`1<DateTimeOffset> StartedAt { get; public set; }
    public Nullable`1<StringEnum`1<CheckConclusion>> Conclusion { get; public set; }
    public Nullable`1<DateTimeOffset> CompletedAt { get; public set; }
    public NewCheckRunOutput Output { get; public set; }
    public IReadOnlyList`1<NewCheckRunAction> Actions { get; public set; }
    internal string DebuggerDisplay { get; }
    [CompilerGeneratedAttribute]
public string get_Name();
    [CompilerGeneratedAttribute]
public void set_Name(string value);
    [CompilerGeneratedAttribute]
public string get_DetailsUrl();
    [CompilerGeneratedAttribute]
public void set_DetailsUrl(string value);
    [CompilerGeneratedAttribute]
public string get_ExternalId();
    [CompilerGeneratedAttribute]
public void set_ExternalId(string value);
    [CompilerGeneratedAttribute]
public Nullable`1<StringEnum`1<CheckStatus>> get_Status();
    [CompilerGeneratedAttribute]
public void set_Status(Nullable`1<StringEnum`1<CheckStatus>> value);
    [CompilerGeneratedAttribute]
public Nullable`1<DateTimeOffset> get_StartedAt();
    [CompilerGeneratedAttribute]
public void set_StartedAt(Nullable`1<DateTimeOffset> value);
    [CompilerGeneratedAttribute]
public Nullable`1<StringEnum`1<CheckConclusion>> get_Conclusion();
    [CompilerGeneratedAttribute]
public void set_Conclusion(Nullable`1<StringEnum`1<CheckConclusion>> value);
    [CompilerGeneratedAttribute]
public Nullable`1<DateTimeOffset> get_CompletedAt();
    [CompilerGeneratedAttribute]
public void set_CompletedAt(Nullable`1<DateTimeOffset> value);
    [CompilerGeneratedAttribute]
public NewCheckRunOutput get_Output();
    [CompilerGeneratedAttribute]
public void set_Output(NewCheckRunOutput value);
    [CompilerGeneratedAttribute]
public IReadOnlyList`1<NewCheckRunAction> get_Actions();
    [CompilerGeneratedAttribute]
public void set_Actions(IReadOnlyList`1<NewCheckRunAction> value);
    internal string get_DebuggerDisplay();
}
public class Octokit.ChecksClient : object {
    [CompilerGeneratedAttribute]
private ICheckRunsClient <Run>k__BackingField;
    [CompilerGeneratedAttribute]
private ICheckSuitesClient <Suite>k__BackingField;
    public ICheckRunsClient Run { get; private set; }
    public ICheckSuitesClient Suite { get; private set; }
    public ChecksClient(IApiConnection apiConnection);
    [CompilerGeneratedAttribute]
public sealed virtual ICheckRunsClient get_Run();
    [CompilerGeneratedAttribute]
private void set_Run(ICheckRunsClient value);
    [CompilerGeneratedAttribute]
public sealed virtual ICheckSuitesClient get_Suite();
    [CompilerGeneratedAttribute]
private void set_Suite(ICheckSuitesClient value);
}
public enum Octokit.CheckStatus : Enum {
    public int value__;
    [ParameterAttribute]
public static CheckStatus Queued;
    [ParameterAttribute]
public static CheckStatus InProgress;
    [ParameterAttribute]
public static CheckStatus Completed;
}
public enum Octokit.CheckStatusFilter : Enum {
    public int value__;
    [ParameterAttribute]
public static CheckStatusFilter Queued;
    [ParameterAttribute]
public static CheckStatusFilter InProgress;
    [ParameterAttribute]
public static CheckStatusFilter Completed;
}
[DebuggerDisplayAttribute("{DebuggerDisplay,nq}")]
public class Octokit.CheckSuite : object {
    [CompilerGeneratedAttribute]
private long <Id>k__BackingField;
    [CompilerGeneratedAttribute]
private string <HeadBranch>k__BackingField;
    [CompilerGeneratedAttribute]
private string <HeadSha>k__BackingField;
    [CompilerGeneratedAttribute]
private StringEnum`1<CheckStatus> <Status>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<StringEnum`1<CheckConclusion>> <Conclusion>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Url>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Before>k__BackingField;
    [CompilerGeneratedAttribute]
private string <After>k__BackingField;
    [CompilerGeneratedAttribute]
private IReadOnlyList`1<PullRequest> <PullRequests>k__BackingField;
    [CompilerGeneratedAttribute]
private GitHubApp <App>k__BackingField;
    [CompilerGeneratedAttribute]
private Repository <Repository>k__BackingField;
    public long Id { get; private set; }
    public string HeadBranch { get; private set; }
    public string HeadSha { get; private set; }
    public StringEnum`1<CheckStatus> Status { get; private set; }
    public Nullable`1<StringEnum`1<CheckConclusion>> Conclusion { get; private set; }
    public string Url { get; private set; }
    public string Before { get; private set; }
    public string After { get; private set; }
    public IReadOnlyList`1<PullRequest> PullRequests { get; private set; }
    public GitHubApp App { get; private set; }
    public Repository Repository { get; private set; }
    internal string DebuggerDisplay { get; }
    public CheckSuite(long id, string headBranch, string headSha, CheckStatus status, Nullable`1<CheckConclusion> conclusion, string url, string before, string after, IReadOnlyList`1<PullRequest> pullRequests, GitHubApp app, Repository repository);
    [CompilerGeneratedAttribute]
public long get_Id();
    [CompilerGeneratedAttribute]
private void set_Id(long value);
    [CompilerGeneratedAttribute]
public string get_HeadBranch();
    [CompilerGeneratedAttribute]
private void set_HeadBranch(string value);
    [CompilerGeneratedAttribute]
public string get_HeadSha();
    [CompilerGeneratedAttribute]
private void set_HeadSha(string value);
    [CompilerGeneratedAttribute]
public StringEnum`1<CheckStatus> get_Status();
    [CompilerGeneratedAttribute]
private void set_Status(StringEnum`1<CheckStatus> value);
    [CompilerGeneratedAttribute]
public Nullable`1<StringEnum`1<CheckConclusion>> get_Conclusion();
    [CompilerGeneratedAttribute]
private void set_Conclusion(Nullable`1<StringEnum`1<CheckConclusion>> value);
    [CompilerGeneratedAttribute]
public string get_Url();
    [CompilerGeneratedAttribute]
private void set_Url(string value);
    [CompilerGeneratedAttribute]
public string get_Before();
    [CompilerGeneratedAttribute]
private void set_Before(string value);
    [CompilerGeneratedAttribute]
public string get_After();
    [CompilerGeneratedAttribute]
private void set_After(string value);
    [CompilerGeneratedAttribute]
public IReadOnlyList`1<PullRequest> get_PullRequests();
    [CompilerGeneratedAttribute]
private void set_PullRequests(IReadOnlyList`1<PullRequest> value);
    [CompilerGeneratedAttribute]
public GitHubApp get_App();
    [CompilerGeneratedAttribute]
private void set_App(GitHubApp value);
    [CompilerGeneratedAttribute]
public Repository get_Repository();
    [CompilerGeneratedAttribute]
private void set_Repository(Repository value);
    internal string get_DebuggerDisplay();
}
[DebuggerDisplayAttribute("{DebuggerDisplay,nq}")]
public class Octokit.CheckSuiteEventPayload : ActivityPayload {
    [CompilerGeneratedAttribute]
private string <Action>k__BackingField;
    [CompilerGeneratedAttribute]
private CheckSuite <CheckSuite>k__BackingField;
    public string Action { get; private set; }
    public CheckSuite CheckSuite { get; private set; }
    [CompilerGeneratedAttribute]
public string get_Action();
    [CompilerGeneratedAttribute]
private void set_Action(string value);
    [CompilerGeneratedAttribute]
public CheckSuite get_CheckSuite();
    [CompilerGeneratedAttribute]
private void set_CheckSuite(CheckSuite value);
}
[DebuggerDisplayAttribute("{DebuggerDisplay,nq}")]
public class Octokit.CheckSuitePreferenceAutoTrigger : object {
    [CompilerGeneratedAttribute]
private long <AppId>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <Setting>k__BackingField;
    public long AppId { get; protected set; }
    public bool Setting { get; protected set; }
    internal string DebuggerDisplay { get; }
    public CheckSuitePreferenceAutoTrigger(long appId, bool setting);
    [CompilerGeneratedAttribute]
public long get_AppId();
    [CompilerGeneratedAttribute]
protected void set_AppId(long value);
    [CompilerGeneratedAttribute]
public bool get_Setting();
    [CompilerGeneratedAttribute]
protected void set_Setting(bool value);
    internal string get_DebuggerDisplay();
}
[DebuggerDisplayAttribute("{DebuggerDisplay,nq}")]
public class Octokit.CheckSuitePreferences : object {
    [CompilerGeneratedAttribute]
private IReadOnlyList`1<CheckSuitePreferenceAutoTrigger> <AutoTriggerChecks>k__BackingField;
    public IReadOnlyList`1<CheckSuitePreferenceAutoTrigger> AutoTriggerChecks { get; protected set; }
    internal string DebuggerDisplay { get; }
    public CheckSuitePreferences(IReadOnlyList`1<CheckSuitePreferenceAutoTrigger> autoTriggerChecks);
    [CompilerGeneratedAttribute]
public IReadOnlyList`1<CheckSuitePreferenceAutoTrigger> get_AutoTriggerChecks();
    [CompilerGeneratedAttribute]
protected void set_AutoTriggerChecks(IReadOnlyList`1<CheckSuitePreferenceAutoTrigger> value);
    internal string get_DebuggerDisplay();
}
[DebuggerDisplayAttribute("{DebuggerDisplay,nq}")]
public class Octokit.CheckSuitePreferencesResponse : object {
    [CompilerGeneratedAttribute]
private CheckSuitePreferences <Preferences>k__BackingField;
    [CompilerGeneratedAttribute]
private Repository <Repository>k__BackingField;
    public CheckSuitePreferences Preferences { get; private set; }
    public Repository Repository { get; private set; }
    internal string DebuggerDisplay { get; }
    public CheckSuitePreferencesResponse(CheckSuitePreferences preferences, Repository repository);
    [CompilerGeneratedAttribute]
public CheckSuitePreferences get_Preferences();
    [CompilerGeneratedAttribute]
private void set_Preferences(CheckSuitePreferences value);
    [CompilerGeneratedAttribute]
public Repository get_Repository();
    [CompilerGeneratedAttribute]
private void set_Repository(Repository value);
    internal string get_DebuggerDisplay();
}
[DebuggerDisplayAttribute("{DebuggerDisplay,nq}")]
public class Octokit.CheckSuiteRequest : RequestParameters {
    [CompilerGeneratedAttribute]
private Nullable`1<long> <AppId>k__BackingField;
    [CompilerGeneratedAttribute]
private string <CheckName>k__BackingField;
    [ParameterAttribute]
public Nullable`1<long> AppId { get; public set; }
    [ParameterAttribute]
public string CheckName { get; public set; }
    internal string DebuggerDisplay { get; }
    [CompilerGeneratedAttribute]
public Nullable`1<long> get_AppId();
    [CompilerGeneratedAttribute]
public void set_AppId(Nullable`1<long> value);
    [CompilerGeneratedAttribute]
public string get_CheckName();
    [CompilerGeneratedAttribute]
public void set_CheckName(string value);
    internal string get_DebuggerDisplay();
}
public class Octokit.CheckSuitesClient : ApiClient {
    public CheckSuitesClient(IApiConnection apiConnection);
    [ManualRouteAttribute("GET", "/repos/{owner}/{repo}/check-suites/{id}")]
public sealed virtual Task`1<CheckSuite> Get(string owner, string repoName, long checkSuiteId);
    [ManualRouteAttribute("GET", "/repositories/{id}/check-suites/{check_suite_id}")]
public sealed virtual Task`1<CheckSuite> Get(long repositoryId, long checkSuiteId);
    [ManualRouteAttribute("GET", "/repos/{owner}/{repo}/commits/{ref}/check-suites")]
public sealed virtual Task`1<CheckSuitesResponse> GetAllForReference(string owner, string repoName, string reference);
    [ManualRouteAttribute("GET", "/repositories/{id}/commits/{ref}/check-suites")]
public sealed virtual Task`1<CheckSuitesResponse> GetAllForReference(long repositoryId, string reference);
    [ManualRouteAttribute("GET", "/repos/{owner}/{repo}/commits/{ref}/check-suites")]
public sealed virtual Task`1<CheckSuitesResponse> GetAllForReference(string owner, string repoName, string reference, CheckSuiteRequest request);
    [ManualRouteAttribute("GET", "/repositories/{id}/commits/{ref}/check-suites")]
public sealed virtual Task`1<CheckSuitesResponse> GetAllForReference(long repositoryId, string reference, CheckSuiteRequest request);
    [AsyncStateMachineAttribute("Octokit.CheckSuitesClient/<GetAllForReference>d__7")]
[ManualRouteAttribute("GET", "/repos/{owner}/{repo}/commits/{ref}/check-suites")]
public sealed virtual Task`1<CheckSuitesResponse> GetAllForReference(string owner, string repoName, string reference, CheckSuiteRequest request, ApiOptions options);
    [AsyncStateMachineAttribute("Octokit.CheckSuitesClient/<GetAllForReference>d__8")]
[ManualRouteAttribute("GET", "/repositories/{id}/commits/{ref}/check-suites")]
public sealed virtual Task`1<CheckSuitesResponse> GetAllForReference(long repositoryId, string reference, CheckSuiteRequest request, ApiOptions options);
    [ManualRouteAttribute("PATCH", "/repos/{owner}/{repo}/check-suites/preferences")]
public sealed virtual Task`1<CheckSuitePreferencesResponse> UpdatePreferences(string owner, string repoName, CheckSuitePreferences preferences);
    [ManualRouteAttribute("GET", "/repositories/{id}/check-suites/preferences")]
public sealed virtual Task`1<CheckSuitePreferencesResponse> UpdatePreferences(long repositoryId, CheckSuitePreferences preferences);
    [ManualRouteAttribute("POST", "/repos/{owner}/{repo}/check-suites")]
public sealed virtual Task`1<CheckSuite> Create(string owner, string repoName, NewCheckSuite newCheckSuite);
    [ManualRouteAttribute("GET", "/repositories/{id}/check-suites")]
public sealed virtual Task`1<CheckSuite> Create(long repositoryId, NewCheckSuite newCheckSuite);
    [AsyncStateMachineAttribute("Octokit.CheckSuitesClient/<Rerequest>d__13")]
[ManualRouteAttribute("GET", "/repos/{owner}/{repo}/check-suites/{2}/rerequest")]
public sealed virtual Task`1<bool> Rerequest(string owner, string repoName, long checkSuiteId);
    [AsyncStateMachineAttribute("Octokit.CheckSuitesClient/<Rerequest>d__14")]
[ManualRouteAttribute("GET", "/repositories/{id}/check-suites/{2}/rerequest")]
public sealed virtual Task`1<bool> Rerequest(long repositoryId, long checkSuiteId);
}
[DebuggerDisplayAttribute("{DebuggerDisplay,nq}")]
public class Octokit.CheckSuitesResponse : object {
    [CompilerGeneratedAttribute]
private int <TotalCount>k__BackingField;
    [CompilerGeneratedAttribute]
private IReadOnlyList`1<CheckSuite> <CheckSuites>k__BackingField;
    public int TotalCount { get; private set; }
    public IReadOnlyList`1<CheckSuite> CheckSuites { get; private set; }
    internal string DebuggerDisplay { get; }
    public CheckSuitesResponse(int totalCount, IReadOnlyList`1<CheckSuite> checkSuites);
    [CompilerGeneratedAttribute]
public int get_TotalCount();
    [CompilerGeneratedAttribute]
private void set_TotalCount(int value);
    [CompilerGeneratedAttribute]
public IReadOnlyList`1<CheckSuite> get_CheckSuites();
    [CompilerGeneratedAttribute]
private void set_CheckSuites(IReadOnlyList`1<CheckSuite> value);
    internal string get_DebuggerDisplay();
}
[ObsoleteAttribute("This request has been deprecated in the GitHub Api, however can still be used on GitHub Enterprise 2.14")]
[DebuggerDisplayAttribute("{DebuggerDisplay,nq}")]
public class Octokit.CheckSuiteTriggerRequest : object {
    [CompilerGeneratedAttribute]
private string <HeadSha>k__BackingField;
    public string HeadSha { get; protected set; }
    internal string DebuggerDisplay { get; }
    public CheckSuiteTriggerRequest(string headSha);
    [CompilerGeneratedAttribute]
public string get_HeadSha();
    [CompilerGeneratedAttribute]
protected void set_HeadSha(string value);
    internal virtual string get_DebuggerDisplay();
}
[ObsoleteAttribute("This enum is replaced with CheckAnnotationLevel but may still be required on GitHub Enterprise 2.14")]
public enum Octokit.CheckWarningLevel : Enum {
    public int value__;
    [ParameterAttribute]
public static CheckWarningLevel Notice;
    [ParameterAttribute]
public static CheckWarningLevel Warning;
    [ParameterAttribute]
public static CheckWarningLevel Failure;
}
public class Octokit.Clients.ActionsOidcClient : ApiClient {
    public ActionsOidcClient(IApiConnection apiConnection);
    [ManualRouteAttribute("GET", "/orgs/{organization}/actions/oidc/customization/sub")]
public sealed virtual Task`1<OrganizationOidcSubjectClaim> GetOrganizationOidcSubjectClaim(string organization);
    [ManualRouteAttribute("PUT", "/orgs/{organization}/actions/oidc/customization/sub")]
public sealed virtual Task SetOrganizationOidcSubjectClaim(string organization, OrganizationOidcSubjectClaimRequest oidcSubjectClaim);
    [ManualRouteAttribute("GET", "/repos/{owner}/{repository}/actions/oidc/customization/sub")]
public sealed virtual Task`1<RepositoryOidcSubjectClaim> GetRepositoryOidcSubjectClaim(string owner, string repository);
    [ManualRouteAttribute("PUT", "/repos/{owner}/{repository}/actions/oidc/customization/sub")]
public sealed virtual Task SetRepositoryOidcSubjectClaim(string owner, string repository, RepositoryOidcSubjectClaimRequest oidcSubjectClaim);
}
[DebuggerDisplayAttribute("{DebuggerDisplay,nq}")]
public class Octokit.CodeFrequency : object {
    [CompilerGeneratedAttribute]
private IReadOnlyList`1<AdditionsAndDeletions> <AdditionsAndDeletionsByWeek>k__BackingField;
    public IReadOnlyList`1<AdditionsAndDeletions> AdditionsAndDeletionsByWeek { get; private set; }
    internal string DebuggerDisplay { get; }
    public CodeFrequency(IEnumerable`1<AdditionsAndDeletions> additionsAndDeletionsByWeek);
    public CodeFrequency(IEnumerable`1<IList`1<long>> rawFrequencies);
    [CompilerGeneratedAttribute]
public IReadOnlyList`1<AdditionsAndDeletions> get_AdditionsAndDeletionsByWeek();
    [CompilerGeneratedAttribute]
private void set_AdditionsAndDeletionsByWeek(IReadOnlyList`1<AdditionsAndDeletions> value);
    internal string get_DebuggerDisplay();
}
public enum Octokit.CodeInQualifier : Enum {
    public int value__;
    [ParameterAttribute]
public static CodeInQualifier File;
    [ParameterAttribute]
public static CodeInQualifier Path;
}
public enum Octokit.CodeSearchSort : Enum {
    public int value__;
    [ParameterAttribute]
public static CodeSearchSort Indexed;
}
[DebuggerDisplayAttribute("{DebuggerDisplay,nq}")]
public class Octokit.Codespace : object {
    [CompilerGeneratedAttribute]
private long <Id>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    [CompilerGeneratedAttribute]
private User <Owner>k__BackingField;
    [CompilerGeneratedAttribute]
private User <BillableOwner>k__BackingField;
    [CompilerGeneratedAttribute]
private Repository <Repository>k__BackingField;
    [CompilerGeneratedAttribute]
private Machine <Machine>k__BackingField;
    [CompilerGeneratedAttribute]
private DateTime <CreatedAt>k__BackingField;
    [CompilerGeneratedAttribute]
private DateTime <UpdatedAt>k__BackingField;
    [CompilerGeneratedAttribute]
private DateTime <LastUsedAt>k__BackingField;
    [CompilerGeneratedAttribute]
private StringEnum`1<CodespaceState> <State>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Url>k__BackingField;
    [CompilerGeneratedAttribute]
private string <MachinesUrl>k__BackingField;
    [CompilerGeneratedAttribute]
private string <WebUrl>k__BackingField;
    [CompilerGeneratedAttribute]
private string <StartUrl>k__BackingField;
    [CompilerGeneratedAttribute]
private string <StopUrl>k__BackingField;
    public long Id { get; private set; }
    public string Name { get; private set; }
    public User Owner { get; private set; }
    public User BillableOwner { get; private set; }
    public Repository Repository { get; private set; }
    public Machine Machine { get; private set; }
    public DateTime CreatedAt { get; private set; }
    public DateTime UpdatedAt { get; private set; }
    public DateTime LastUsedAt { get; private set; }
    public StringEnum`1<CodespaceState> State { get; private set; }
    public string Url { get; private set; }
    public string MachinesUrl { get; private set; }
    public string WebUrl { get; private set; }
    public string StartUrl { get; private set; }
    public string StopUrl { get; private set; }
    internal string DebuggerDisplay { get; }
    public Codespace(long id, string name, User owner, User billableOwner, Repository repository, Machine machine, DateTime createdAt, DateTime updatedAt, DateTime lastUsedAt, StringEnum`1<CodespaceState> state, string url, string machinesUrl, string webUrl, string startUrl, string stopUrl);
    [CompilerGeneratedAttribute]
public long get_Id();
    [CompilerGeneratedAttribute]
private void set_Id(long value);
    [CompilerGeneratedAttribute]
public string get_Name();
    [CompilerGeneratedAttribute]
private void set_Name(string value);
    [CompilerGeneratedAttribute]
public User get_Owner();
    [CompilerGeneratedAttribute]
private void set_Owner(User value);
    [CompilerGeneratedAttribute]
public User get_BillableOwner();
    [CompilerGeneratedAttribute]
private void set_BillableOwner(User value);
    [CompilerGeneratedAttribute]
public Repository get_Repository();
    [CompilerGeneratedAttribute]
private void set_Repository(Repository value);
    [CompilerGeneratedAttribute]
public Machine get_Machine();
    [CompilerGeneratedAttribute]
private void set_Machine(Machine value);
    [CompilerGeneratedAttribute]
public DateTime get_CreatedAt();
    [CompilerGeneratedAttribute]
private void set_CreatedAt(DateTime value);
    [CompilerGeneratedAttribute]
public DateTime get_UpdatedAt();
    [CompilerGeneratedAttribute]
private void set_UpdatedAt(DateTime value);
    [CompilerGeneratedAttribute]
public DateTime get_LastUsedAt();
    [CompilerGeneratedAttribute]
private void set_LastUsedAt(DateTime value);
    [CompilerGeneratedAttribute]
public StringEnum`1<CodespaceState> get_State();
    [CompilerGeneratedAttribute]
private void set_State(StringEnum`1<CodespaceState> value);
    [CompilerGeneratedAttribute]
public string get_Url();
    [CompilerGeneratedAttribute]
private void set_Url(string value);
    [CompilerGeneratedAttribute]
public string get_MachinesUrl();
    [CompilerGeneratedAttribute]
private void set_MachinesUrl(string value);
    [CompilerGeneratedAttribute]
public string get_WebUrl();
    [CompilerGeneratedAttribute]
private void set_WebUrl(string value);
    [CompilerGeneratedAttribute]
public string get_StartUrl();
    [CompilerGeneratedAttribute]
private void set_StartUrl(string value);
    [CompilerGeneratedAttribute]
public string get_StopUrl();
    [CompilerGeneratedAttribute]
private void set_StopUrl(string value);
    internal string get_DebuggerDisplay();
}
public class Octokit.CodespacesClient : ApiClient {
    public CodespacesClient(IApiConnection apiConnection);
    [ManualRouteAttribute("GET", "/user/codespaces")]
public sealed virtual Task`1<CodespacesCollection> GetAll();
    [ManualRouteAttribute("GET", "/repos/{owner}/{repo}/codespaces")]
public sealed virtual Task`1<CodespacesCollection> GetForRepository(string owner, string repo);
    [ManualRouteAttribute("GET", "/user/codespaces/{codespace_name}")]
public sealed virtual Task`1<Codespace> Get(string codespaceName);
    [ManualRouteAttribute("POST", "/user/codespaces/{codespace_name}/start")]
public sealed virtual Task`1<Codespace> Start(string codespaceName);
    [ManualRouteAttribute("POST", "/user/codespaces/{codespace_name}/stop")]
public sealed virtual Task`1<Codespace> Stop(string codespaceName);
}
[DebuggerDisplayAttribute("{DebuggerDisplay,nq}")]
public class Octokit.CodespacesCollection : object {
    [CompilerGeneratedAttribute]
private int <Count>k__BackingField;
    [CompilerGeneratedAttribute]
private IReadOnlyList`1<Codespace> <Codespaces>k__BackingField;
    [ParameterAttribute]
public int Count { get; private set; }
    [ParameterAttribute]
public IReadOnlyList`1<Codespace> Codespaces { get; private set; }
    internal string DebuggerDisplay { get; }
    public CodespacesCollection(IReadOnlyList`1<Codespace> codespaces, int count);
    [CompilerGeneratedAttribute]
public int get_Count();
    [CompilerGeneratedAttribute]
private void set_Count(int value);
    [CompilerGeneratedAttribute]
public IReadOnlyList`1<Codespace> get_Codespaces();
    [CompilerGeneratedAttribute]
private void set_Codespaces(IReadOnlyList`1<Codespace> value);
    internal string get_DebuggerDisplay();
}
public enum Octokit.CodespaceState : Enum {
    public int value__;
    [ParameterAttribute]
public static CodespaceState Unknown;
    [ParameterAttribute]
public static CodespaceState Created;
    [ParameterAttribute]
public static CodespaceState Queued;
    [ParameterAttribute]
public static CodespaceState Provisioning;
    [ParameterAttribute]
public static CodespaceState Available;
    [ParameterAttribute]
public static CodespaceState Awaiting;
    [ParameterAttribute]
public static CodespaceState Unavailable;
    [ParameterAttribute]
public static CodespaceState Deleted;
    [ParameterAttribute]
public static CodespaceState Moved;
    [ParameterAttribute]
public static CodespaceState Shutdown;
    [ParameterAttribute]
public static CodespaceState Archived;
    [ParameterAttribute]
public static CodespaceState Starting;
    [ParameterAttribute]
public static CodespaceState ShuttingDown;
    [ParameterAttribute]
public static CodespaceState Failed;
    [ParameterAttribute]
public static CodespaceState Exporting;
    [ParameterAttribute]
public static CodespaceState Updating;
    [ParameterAttribute]
public static CodespaceState Rebuilding;
}
[DebuggerDisplayAttribute("{DebuggerDisplay,nq}")]
public class Octokit.Collaborator : object {
    [CompilerGeneratedAttribute]
private string <Login>k__BackingField;
    [CompilerGeneratedAttribute]
private long <Id>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Email>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    [CompilerGeneratedAttribute]
private string <NodeId>k__BackingField;
    [CompilerGeneratedAttribute]
private string <AvatarUrl>k__BackingField;
    [CompilerGeneratedAttribute]
private string <GravatarUrl>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Url>k__BackingField;
    [CompilerGeneratedAttribute]
private string <HtmlUrl>k__BackingField;
    [CompilerGeneratedAttribute]
private string <FollowersUrl>k__BackingField;
    [CompilerGeneratedAttribute]
private string <FollowingUrl>k__BackingField;
    [CompilerGeneratedAttribute]
private string <GistsUrl>k__BackingField;
    [CompilerGeneratedAttribute]
private string <StarredUrl>k__BackingField;
    [CompilerGeneratedAttribute]
private string <SubscriptionsUrl>k__BackingField;
    [CompilerGeneratedAttribute]
private string <OrganizationsUrl>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ReposUrl>k__BackingField;
    [CompilerGeneratedAttribute]
private string <EventsUrl>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ReceivedEventsUrl>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Type>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <SiteAdmin>k__BackingField;
    [CompilerGeneratedAttribute]
private CollaboratorPermissions <Permissions>k__BackingField;
    [CompilerGeneratedAttribute]
private string <RoleName>k__BackingField;
    public string Login { get; protected set; }
    public long Id { get; protected set; }
    public string Email { get; protected set; }
    public string Name { get; protected set; }
    public string NodeId { get; protected set; }
    public string AvatarUrl { get; protected set; }
    public string GravatarUrl { get; protected set; }
    public string Url { get; protected set; }
    public string HtmlUrl { get; protected set; }
    public string FollowersUrl { get; protected set; }
    public string FollowingUrl { get; protected set; }
    public string GistsUrl { get; protected set; }
    public string StarredUrl { get; protected set; }
    public string SubscriptionsUrl { get; protected set; }
    public string OrganizationsUrl { get; protected set; }
    public string ReposUrl { get; protected set; }
    public string EventsUrl { get; protected set; }
    public string ReceivedEventsUrl { get; protected set; }
    public string Type { get; protected set; }
    public bool SiteAdmin { get; protected set; }
    public CollaboratorPermissions Permissions { get; protected set; }
    public string RoleName { get; protected set; }
    internal string DebuggerDisplay { get; }
    public Collaborator(string login, long id, string email, string name, string nodeId, string avatarUrl, string gravatarUrl, string url, string htmlUrl, string followersUrl, string followingUrl, string gistsUrl, string type, string starredUrl, string subscriptionsUrl, string organizationsUrl, string reposUrl, string eventsUrl, string receivedEventsUrl, bool siteAdmin, CollaboratorPermissions permissions, string roleName);
    [CompilerGeneratedAttribute]
public string get_Login();
    [CompilerGeneratedAttribute]
protected void set_Login(string value);
    [CompilerGeneratedAttribute]
public long get_Id();
    [CompilerGeneratedAttribute]
protected void set_Id(long value);
    [CompilerGeneratedAttribute]
public string get_Email();
    [CompilerGeneratedAttribute]
protected void set_Email(string value);
    [CompilerGeneratedAttribute]
public string get_Name();
    [CompilerGeneratedAttribute]
protected void set_Name(string value);
    [CompilerGeneratedAttribute]
public string get_NodeId();
    [CompilerGeneratedAttribute]
protected void set_NodeId(string value);
    [CompilerGeneratedAttribute]
public string get_AvatarUrl();
    [CompilerGeneratedAttribute]
protected void set_AvatarUrl(string value);
    [CompilerGeneratedAttribute]
public string get_GravatarUrl();
    [CompilerGeneratedAttribute]
protected void set_GravatarUrl(string value);
    [CompilerGeneratedAttribute]
public string get_Url();
    [CompilerGeneratedAttribute]
protected void set_Url(string value);
    [CompilerGeneratedAttribute]
public string get_HtmlUrl();
    [CompilerGeneratedAttribute]
protected void set_HtmlUrl(string value);
    [CompilerGeneratedAttribute]
public string get_FollowersUrl();
    [CompilerGeneratedAttribute]
protected void set_FollowersUrl(string value);
    [CompilerGeneratedAttribute]
public string get_FollowingUrl();
    [CompilerGeneratedAttribute]
protected void set_FollowingUrl(string value);
    [CompilerGeneratedAttribute]
public string get_GistsUrl();
    [CompilerGeneratedAttribute]
protected void set_GistsUrl(string value);
    [CompilerGeneratedAttribute]
public string get_StarredUrl();
    [CompilerGeneratedAttribute]
protected void set_StarredUrl(string value);
    [CompilerGeneratedAttribute]
public string get_SubscriptionsUrl();
    [CompilerGeneratedAttribute]
protected void set_SubscriptionsUrl(string value);
    [CompilerGeneratedAttribute]
public string get_OrganizationsUrl();
    [CompilerGeneratedAttribute]
protected void set_OrganizationsUrl(string value);
    [CompilerGeneratedAttribute]
public string get_ReposUrl();
    [CompilerGeneratedAttribute]
protected void set_ReposUrl(string value);
    [CompilerGeneratedAttribute]
public string get_EventsUrl();
    [CompilerGeneratedAttribute]
protected void set_EventsUrl(string value);
    [CompilerGeneratedAttribute]
public string get_ReceivedEventsUrl();
    [CompilerGeneratedAttribute]
protected void set_ReceivedEventsUrl(string value);
    [CompilerGeneratedAttribute]
public string get_Type();
    [CompilerGeneratedAttribute]
protected void set_Type(string value);
    [CompilerGeneratedAttribute]
public bool get_SiteAdmin();
    [CompilerGeneratedAttribute]
protected void set_SiteAdmin(bool value);
    [CompilerGeneratedAttribute]
public CollaboratorPermissions get_Permissions();
    [CompilerGeneratedAttribute]
protected void set_Permissions(CollaboratorPermissions value);
    [CompilerGeneratedAttribute]
public string get_RoleName();
    [CompilerGeneratedAttribute]
protected void set_RoleName(string value);
    internal string get_DebuggerDisplay();
}
public enum Octokit.CollaboratorAffiliation : Enum {
    public int value__;
    [ParameterAttribute]
public static CollaboratorAffiliation All;
    [ParameterAttribute]
public static CollaboratorAffiliation Direct;
    [ParameterAttribute]
public static CollaboratorAffiliation Outside;
}
public enum Octokit.CollaboratorPermission : Enum {
    public int value__;
    [ParameterAttribute]
public static CollaboratorPermission Pull;
    [ParameterAttribute]
public static CollaboratorPermission Triage;
    [ParameterAttribute]
public static CollaboratorPermission Push;
    [ParameterAttribute]
public static CollaboratorPermission Maintain;
    [ParameterAttribute]
public static CollaboratorPermission Admin;
}
[DebuggerDisplayAttribute("{DebuggerDisplay,nq}")]
public class Octokit.CollaboratorPermissionResponse : object {
    [CompilerGeneratedAttribute]
private string <Permission>k__BackingField;
    [CompilerGeneratedAttribute]
private string <RoleName>k__BackingField;
    [CompilerGeneratedAttribute]
private Collaborator <Collaborator>k__BackingField;
    public string Permission { get; private set; }
    public string RoleName { get; private set; }
    [ParameterAttribute]
public Collaborator Collaborator { get; private set; }
    internal string DebuggerDisplay { get; }
    public CollaboratorPermissionResponse(string permission, string roleName, Collaborator collaborator);
    [CompilerGeneratedAttribute]
public string get_Permission();
    [CompilerGeneratedAttribute]
private void set_Permission(string value);
    [CompilerGeneratedAttribute]
public string get_RoleName();
    [CompilerGeneratedAttribute]
private void set_RoleName(string value);
    [CompilerGeneratedAttribute]
public Collaborator get_Collaborator();
    [CompilerGeneratedAttribute]
private void set_Collaborator(Collaborator value);
    internal string get_DebuggerDisplay();
}
[DebuggerDisplayAttribute("{DebuggerDisplay,nq}")]
public class Octokit.CollaboratorPermissions : object {
    [CompilerGeneratedAttribute]
private bool <Pull>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<bool> <Triage>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <Push>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<bool> <Maintain>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <Admin>k__BackingField;
    public bool Pull { get; private set; }
    public Nullable`1<bool> Triage { get; private set; }
    public bool Push { get; private set; }
    public Nullable`1<bool> Maintain { get; private set; }
    public bool Admin { get; private set; }
    internal string DebuggerDisplay { get; }
    public CollaboratorPermissions(bool pull, Nullable`1<bool> triage, bool push, Nullable`1<bool> maintain, bool admin);
    [CompilerGeneratedAttribute]
public bool get_Pull();
    [CompilerGeneratedAttribute]
private void set_Pull(bool value);
    [CompilerGeneratedAttribute]
public Nullable`1<bool> get_Triage();
    [CompilerGeneratedAttribute]
private void set_Triage(Nullable`1<bool> value);
    [CompilerGeneratedAttribute]
public bool get_Push();
    [CompilerGeneratedAttribute]
private void set_Push(bool value);
    [CompilerGeneratedAttribute]
public Nullable`1<bool> get_Maintain();
    [CompilerGeneratedAttribute]
private void set_Maintain(Nullable`1<bool> value);
    [CompilerGeneratedAttribute]
public bool get_Admin();
    [CompilerGeneratedAttribute]
private void set_Admin(bool value);
    internal string get_DebuggerDisplay();
}
[DebuggerDisplayAttribute("{DebuggerDisplay,nq}")]
public class Octokit.CollaboratorRequest : object {
    [CompilerGeneratedAttribute]
private string <Permission>k__BackingField;
    public string Permission { get; private set; }
    internal string DebuggerDisplay { get; }
    public CollaboratorRequest(string permission);
    [CompilerGeneratedAttribute]
public string get_Permission();
    [CompilerGeneratedAttribute]
private void set_Permission(string value);
    internal string get_DebuggerDisplay();
}
[ExtensionAttribute]
internal static class Octokit.CollectionExtensions : object {
    [ExtensionAttribute]
public static TValue SafeGet(IReadOnlyDictionary`2<TKey, TValue> dictionary, TKey key);
    [ExtensionAttribute]
public static IList`1<string> Clone(IReadOnlyList`1<string> input);
    [ExtensionAttribute]
public static IDictionary`2<string, Uri> Clone(IReadOnlyDictionary`2<string, Uri> input);
}
[DebuggerDisplayAttribute("{DebuggerDisplay,nq}")]
public class Octokit.CombinedCommitStatus : object {
    [CompilerGeneratedAttribute]
private StringEnum`1<CommitState> <State>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Sha>k__BackingField;
    [CompilerGeneratedAttribute]
private int <TotalCount>k__BackingField;
    [CompilerGeneratedAttribute]
private IReadOnlyList`1<CommitStatus> <Statuses>k__BackingField;
    [CompilerGeneratedAttribute]
private Repository <Repository>k__BackingField;
    public StringEnum`1<CommitState> State { get; private set; }
    public string Sha { get; private set; }
    public int TotalCount { get; private set; }
    public IReadOnlyList`1<CommitStatus> Statuses { get; private set; }
    public Repository Repository { get; private set; }
    internal string DebuggerDisplay { get; }
    public CombinedCommitStatus(CommitState state, string sha, int totalCount, IReadOnlyList`1<CommitStatus> statuses, Repository repository);
    [CompilerGeneratedAttribute]
public StringEnum`1<CommitState> get_State();
    [CompilerGeneratedAttribute]
private void set_State(StringEnum`1<CommitState> value);
    [CompilerGeneratedAttribute]
public string get_Sha();
    [CompilerGeneratedAttribute]
private void set_Sha(string value);
    [CompilerGeneratedAttribute]
public int get_TotalCount();
    [CompilerGeneratedAttribute]
private void set_TotalCount(int value);
    [CompilerGeneratedAttribute]
public IReadOnlyList`1<CommitStatus> get_Statuses();
    [CompilerGeneratedAttribute]
private void set_Statuses(IReadOnlyList`1<CommitStatus> value);
    [CompilerGeneratedAttribute]
public Repository get_Repository();
    [CompilerGeneratedAttribute]
private void set_Repository(Repository value);
    internal string get_DebuggerDisplay();
}
[DebuggerDisplayAttribute("{DebuggerDisplay,nq}")]
public class Octokit.Commit : GitReference {
    [CompilerGeneratedAttribute]
private string <Message>k__BackingField;
    [CompilerGeneratedAttribute]
private Committer <Author>k__BackingField;
    [CompilerGeneratedAttribute]
private Committer <Committer>k__BackingField;
    [CompilerGeneratedAttribute]
private GitReference <Tree>k__BackingField;
    [CompilerGeneratedAttribute]
private IReadOnlyList`1<GitReference> <Parents>k__BackingField;
    [CompilerGeneratedAttribute]
private int <CommentCount>k__BackingField;
    [CompilerGeneratedAttribute]
private Verification <Verification>k__BackingField;
    public string Message { get; private set; }
    public Committer Author { get; private set; }
    public Committer Committer { get; private set; }
    public GitReference Tree { get; private set; }
    public IReadOnlyList`1<GitReference> Parents { get; private set; }
    public int CommentCount { get; private set; }
    public Verification Verification { get; private set; }
    public Commit(string nodeId, string url, string label, string ref, string sha, User user, Repository repository, string message, Committer author, Committer committer, GitReference tree, IEnumerable`1<GitReference> parents, int commentCount, Verification verification);
    [CompilerGeneratedAttribute]
public string get_Message();
    [CompilerGeneratedAttribute]
private void set_Message(string value);
    [CompilerGeneratedAttribute]
public Committer get_Author();
    [CompilerGeneratedAttribute]
private void set_Author(Committer value);
    [CompilerGeneratedAttribute]
public Committer get_Committer();
    [CompilerGeneratedAttribute]
private void set_Committer(Committer value);
    [CompilerGeneratedAttribute]
public GitReference get_Tree();
    [CompilerGeneratedAttribute]
private void set_Tree(GitReference value);
    [CompilerGeneratedAttribute]
public IReadOnlyList`1<GitReference> get_Parents();
    [CompilerGeneratedAttribute]
private void set_Parents(IReadOnlyList`1<GitReference> value);
    [CompilerGeneratedAttribute]
public int get_CommentCount();
    [CompilerGeneratedAttribute]
private void set_CommentCount(int value);
    [CompilerGeneratedAttribute]
public Verification get_Verification();
    [CompilerGeneratedAttribute]
private void set_Verification(Verification value);
}
[DebuggerDisplayAttribute("{DebuggerDisplay,nq}")]
public class Octokit.CommitActivity : object {
    [CompilerGeneratedAttribute]
private IReadOnlyList`1<WeeklyCommitActivity> <Activity>k__BackingField;
    public IReadOnlyList`1<WeeklyCommitActivity> Activity { get; private set; }
    internal string DebuggerDisplay { get; }
    public CommitActivity(IEnumerable`1<WeeklyCommitActivity> activity);
    [CompilerGeneratedAttribute]
public IReadOnlyList`1<WeeklyCommitActivity> get_Activity();
    [CompilerGeneratedAttribute]
private void set_Activity(IReadOnlyList`1<WeeklyCommitActivity> value);
    internal string get_DebuggerDisplay();
}
[DebuggerDisplayAttribute("{DebuggerDisplay,nq}")]
public class Octokit.CommitComment : object {
    [CompilerGeneratedAttribute]
private long <Id>k__BackingField;
    [CompilerGeneratedAttribute]
private string <NodeId>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Url>k__BackingField;
    [CompilerGeneratedAttribute]
private string <HtmlUrl>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Body>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Path>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<int> <Position>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<int> <Line>k__BackingField;
    [CompilerGeneratedAttribute]
private string <CommitId>k__BackingField;
    [CompilerGeneratedAttribute]
private User <User>k__BackingField;
    [CompilerGeneratedAttribute]
private DateTimeOffset <CreatedAt>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<DateTimeOffset> <UpdatedAt>k__BackingField;
    [CompilerGeneratedAttribute]
private ReactionSummary <Reactions>k__BackingField;
    public long Id { get; private set; }
    public string NodeId { get; private set; }
    public string Url { get; private set; }
    public string HtmlUrl { get; private set; }
    public string Body { get; private set; }
    public string Path { get; private set; }
    public Nullable`1<int> Position { get; private set; }
    public Nullable`1<int> Line { get; private set; }
    public string CommitId { get; private set; }
    public User User { get; private set; }
    public DateTimeOffset CreatedAt { get; private set; }
    public Nullable`1<DateTimeOffset> UpdatedAt { get; private set; }
    public ReactionSummary Reactions { get; private set; }
    internal string DebuggerDisplay { get; }
    public CommitComment(long id, string nodeId, string url, string htmlUrl, string body, string path, int position, Nullable`1<int> line, string commitId, User user, DateTimeOffset createdAt, Nullable`1<DateTimeOffset> updatedAt, ReactionSummary reactions);
    [CompilerGeneratedAttribute]
public long get_Id();
    [CompilerGeneratedAttribute]
private void set_Id(long value);
    [CompilerGeneratedAttribute]
public string get_NodeId();
    [CompilerGeneratedAttribute]
private void set_NodeId(string value);
    [CompilerGeneratedAttribute]
public string get_Url();
    [CompilerGeneratedAttribute]
private void set_Url(string value);
    [CompilerGeneratedAttribute]
public string get_HtmlUrl();
    [CompilerGeneratedAttribute]
private void set_HtmlUrl(string value);
    [CompilerGeneratedAttribute]
public string get_Body();
    [CompilerGeneratedAttribute]
private void set_Body(string value);
    [CompilerGeneratedAttribute]
public string get_Path();
    [CompilerGeneratedAttribute]
private void set_Path(string value);
    [CompilerGeneratedAttribute]
public Nullable`1<int> get_Position();
    [CompilerGeneratedAttribute]
private void set_Position(Nullable`1<int> value);
    [CompilerGeneratedAttribute]
public Nullable`1<int> get_Line();
    [CompilerGeneratedAttribute]
private void set_Line(Nullable`1<int> value);
    [CompilerGeneratedAttribute]
public string get_CommitId();
    [CompilerGeneratedAttribute]
private void set_CommitId(string value);
    [CompilerGeneratedAttribute]
public User get_User();
    [CompilerGeneratedAttribute]
private void set_User(User value);
    [CompilerGeneratedAttribute]
public DateTimeOffset get_CreatedAt();
    [CompilerGeneratedAttribute]
private void set_CreatedAt(DateTimeOffset value);
    [CompilerGeneratedAttribute]
public Nullable`1<DateTimeOffset> get_UpdatedAt();
    [CompilerGeneratedAttribute]
private void set_UpdatedAt(Nullable`1<DateTimeOffset> value);
    [CompilerGeneratedAttribute]
public ReactionSummary get_Reactions();
    [CompilerGeneratedAttribute]
private void set_Reactions(ReactionSummary value);
    internal string get_DebuggerDisplay();
}
[DebuggerDisplayAttribute("{DebuggerDisplay,nq}")]
public class Octokit.CommitCommentPayload : ActivityPayload {
    [CompilerGeneratedAttribute]
private CommitComment <Comment>k__BackingField;
    public CommitComment Comment { get; private set; }
    [CompilerGeneratedAttribute]
public CommitComment get_Comment();
    [CompilerGeneratedAttribute]
private void set_Comment(CommitComment value);
}
public class Octokit.CommitCommentReactionsClient : ApiClient {
    public CommitCommentReactionsClient(IApiConnection apiConnection);
    [ManualRouteAttribute("POST", "/repos/{owner}/{repo}/comments/{comment_id}/reactions")]
public sealed virtual Task`1<Reaction> Create(string owner, string name, long commentId, NewReaction reaction);
    [ManualRouteAttribute("POST", "/repositories/{id}/comments/{comment_id}/reactions")]
public sealed virtual Task`1<Reaction> Create(long repositoryId, long commentId, NewReaction reaction);
    [ManualRouteAttribute("GET", "/repos/{owner}/{repo}/comments/{comment_id}/reactions")]
public sealed virtual Task`1<IReadOnlyList`1<Reaction>> GetAll(string owner, string name, long commentId);
    [ManualRouteAttribute("GET", "/repos/{owner}/{repo}/comments/{comment_id}/reactions")]
public sealed virtual Task`1<IReadOnlyList`1<Reaction>> GetAll(string owner, string name, long commentId, ApiOptions options);
    [ManualRouteAttribute("GET", "/repositories/{id}/comments/{comment_id}/reactions")]
public sealed virtual Task`1<IReadOnlyList`1<Reaction>> GetAll(long repositoryId, long commentId);
    [ManualRouteAttribute("GET", "/repositories/{id}/comments/{comment_id}/reactions")]
public sealed virtual Task`1<IReadOnlyList`1<Reaction>> GetAll(long repositoryId, long commentId, ApiOptions options);
    [ManualRouteAttribute("DELETE", "/repos/{owner}/{repo}/comments/{comment_id}/reactions/{reaction_id}")]
public sealed virtual Task Delete(string owner, string name, long commentId, long reactionId);
    [ManualRouteAttribute("DELETE", "/repositories/{id}/comments/{comment_id}/reactions/{reaction_id}")]
public sealed virtual Task Delete(long repositoryId, long commentId, long reactionId);
}
[DebuggerDisplayAttribute("{DebuggerDisplay,nq}")]
public class Octokit.CommitPullRequest : object {
    [CompilerGeneratedAttribute]
private long <Id>k__BackingField;
    [CompilerGeneratedAttribute]
private string <NodeId>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Url>k__BackingField;
    [CompilerGeneratedAttribute]
private string <HtmlUrl>k__BackingField;
    [CompilerGeneratedAttribute]
private string <DiffUrl>k__BackingField;
    [CompilerGeneratedAttribute]
private string <PatchUrl>k__BackingField;
    [CompilerGeneratedAttribute]
private string <IssueUrl>k__BackingField;
    [CompilerGeneratedAttribute]
private string <StatusesUrl>k__BackingField;
    [CompilerGeneratedAttribute]
private int <Number>k__BackingField;
    [CompilerGeneratedAttribute]
private StringEnum`1<ItemState> <State>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Title>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Body>k__BackingField;
    [CompilerGeneratedAttribute]
private DateTimeOffset <CreatedAt>k__BackingField;
    [CompilerGeneratedAttribute]
private DateTimeOffset <UpdatedAt>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<DateTimeOffset> <ClosedAt>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<DateTimeOffset> <MergedAt>k__BackingField;
    [CompilerGeneratedAttribute]
private GitReference <Head>k__BackingField;
    [CompilerGeneratedAttribute]
private GitReference <Base>k__BackingField;
    [CompilerGeneratedAttribute]
private User <User>k__BackingField;
    [CompilerGeneratedAttribute]
private User <Assignee>k__BackingField;
    [CompilerGeneratedAttribute]
private IReadOnlyList`1<User> <Assignees>k__BackingField;
    [CompilerGeneratedAttribute]
private Milestone <Milestone>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <Draft>k__BackingField;
    [CompilerGeneratedAttribute]
private string <MergeCommitSha>k__BackingField;
    [CompilerGeneratedAttribute]
private IReadOnlyList`1<User> <RequestedReviewers>k__BackingField;
    [CompilerGeneratedAttribute]
private IReadOnlyList`1<Team> <RequestedTeams>k__BackingField;
    [CompilerGeneratedAttribute]
private IReadOnlyList`1<Label> <Labels>k__BackingField;
    public long Id { get; protected set; }
    public string NodeId { get; protected set; }
    public string Url { get; protected set; }
    public string HtmlUrl { get; protected set; }
    public string DiffUrl { get; protected set; }
    public string PatchUrl { get; protected set; }
    public string IssueUrl { get; protected set; }
    public string StatusesUrl { get; protected set; }
    public int Number { get; protected set; }
    public StringEnum`1<ItemState> State { get; protected set; }
    public string Title { get; protected set; }
    public string Body { get; protected set; }
    public DateTimeOffset CreatedAt { get; protected set; }
    public DateTimeOffset UpdatedAt { get; protected set; }
    public Nullable`1<DateTimeOffset> ClosedAt { get; protected set; }
    public Nullable`1<DateTimeOffset> MergedAt { get; protected set; }
    public GitReference Head { get; protected set; }
    public GitReference Base { get; protected set; }
    public User User { get; protected set; }
    public User Assignee { get; protected set; }
    public IReadOnlyList`1<User> Assignees { get; protected set; }
    public Milestone Milestone { get; protected set; }
    public bool Draft { get; protected set; }
    public bool Merged { get; }
    public string MergeCommitSha { get; protected set; }
    public IReadOnlyList`1<User> RequestedReviewers { get; protected set; }
    public IReadOnlyList`1<Team> RequestedTeams { get; protected set; }
    public IReadOnlyList`1<Label> Labels { get; protected set; }
    internal string DebuggerDisplay { get; }
    public CommitPullRequest(int number);
    public CommitPullRequest(long id, string nodeId, string url, string htmlUrl, string diffUrl, string patchUrl, string issueUrl, string statusesUrl, int number, ItemState state, string title, string body, DateTimeOffset createdAt, DateTimeOffset updatedAt, Nullable`1<DateTimeOffset> closedAt, Nullable`1<DateTimeOffset> mergedAt, GitReference head, GitReference base, User user, User assignee, IReadOnlyList`1<User> assignees, bool draft, Nullable`1<bool> mergeable, Nullable`1<MergeableState> mergeableState, User mergedBy, string mergeCommitSha, Milestone milestone, IReadOnlyList`1<User> requestedReviewers, IReadOnlyList`1<Team> requestedTeams, IReadOnlyList`1<Label> labels);
    [CompilerGeneratedAttribute]
public long get_Id();
    [CompilerGeneratedAttribute]
protected void set_Id(long value);
    [CompilerGeneratedAttribute]
public string get_NodeId();
    [CompilerGeneratedAttribute]
protected void set_NodeId(string value);
    [CompilerGeneratedAttribute]
public string get_Url();
    [CompilerGeneratedAttribute]
protected void set_Url(string value);
    [CompilerGeneratedAttribute]
public string get_HtmlUrl();
    [CompilerGeneratedAttribute]
protected void set_HtmlUrl(string value);
    [CompilerGeneratedAttribute]
public string get_DiffUrl();
    [CompilerGeneratedAttribute]
protected void set_DiffUrl(string value);
    [CompilerGeneratedAttribute]
public string get_PatchUrl();
    [CompilerGeneratedAttribute]
protected void set_PatchUrl(string value);
    [CompilerGeneratedAttribute]
public string get_IssueUrl();
    [CompilerGeneratedAttribute]
protected void set_IssueUrl(string value);
    [CompilerGeneratedAttribute]
public string get_StatusesUrl();
    [CompilerGeneratedAttribute]
protected void set_StatusesUrl(string value);
    [CompilerGeneratedAttribute]
public int get_Number();
    [CompilerGeneratedAttribute]
protected void set_Number(int value);
    [CompilerGeneratedAttribute]
public StringEnum`1<ItemState> get_State();
    [CompilerGeneratedAttribute]
protected void set_State(StringEnum`1<ItemState> value);
    [CompilerGeneratedAttribute]
public string get_Title();
    [CompilerGeneratedAttribute]
protected void set_Title(string value);
    [CompilerGeneratedAttribute]
public string get_Body();
    [CompilerGeneratedAttribute]
protected void set_Body(string value);
    [CompilerGeneratedAttribute]
public DateTimeOffset get_CreatedAt();
    [CompilerGeneratedAttribute]
protected void set_CreatedAt(DateTimeOffset value);
    [CompilerGeneratedAttribute]
public DateTimeOffset get_UpdatedAt();
    [CompilerGeneratedAttribute]
protected void set_UpdatedAt(DateTimeOffset value);
    [CompilerGeneratedAttribute]
public Nullable`1<DateTimeOffset> get_ClosedAt();
    [CompilerGeneratedAttribute]
protected void set_ClosedAt(Nullable`1<DateTimeOffset> value);
    [CompilerGeneratedAttribute]
public Nullable`1<DateTimeOffset> get_MergedAt();
    [CompilerGeneratedAttribute]
protected void set_MergedAt(Nullable`1<DateTimeOffset> value);
    [CompilerGeneratedAttribute]
public GitReference get_Head();
    [CompilerGeneratedAttribute]
protected void set_Head(GitReference value);
    [CompilerGeneratedAttribute]
public GitReference get_Base();
    [CompilerGeneratedAttribute]
protected void set_Base(GitReference value);
    [CompilerGeneratedAttribute]
public User get_User();
    [CompilerGeneratedAttribute]
protected void set_User(User value);
    [CompilerGeneratedAttribute]
public User get_Assignee();
    [CompilerGeneratedAttribute]
protected void set_Assignee(User value);
    [CompilerGeneratedAttribute]
public IReadOnlyList`1<User> get_Assignees();
    [CompilerGeneratedAttribute]
protected void set_Assignees(IReadOnlyList`1<User> value);
    [CompilerGeneratedAttribute]
public Milestone get_Milestone();
    [CompilerGeneratedAttribute]
protected void set_Milestone(Milestone value);
    [CompilerGeneratedAttribute]
public bool get_Draft();
    [CompilerGeneratedAttribute]
protected void set_Draft(bool value);
    public bool get_Merged();
    [CompilerGeneratedAttribute]
public string get_MergeCommitSha();
    [CompilerGeneratedAttribute]
protected void set_MergeCommitSha(string value);
    [CompilerGeneratedAttribute]
public IReadOnlyList`1<User> get_RequestedReviewers();
    [CompilerGeneratedAttribute]
protected void set_RequestedReviewers(IReadOnlyList`1<User> value);
    [CompilerGeneratedAttribute]
public IReadOnlyList`1<Team> get_RequestedTeams();
    [CompilerGeneratedAttribute]
protected void set_RequestedTeams(IReadOnlyList`1<Team> value);
    [CompilerGeneratedAttribute]
public IReadOnlyList`1<Label> get_Labels();
    [CompilerGeneratedAttribute]
protected void set_Labels(IReadOnlyList`1<Label> value);
    internal string get_DebuggerDisplay();
}
[DebuggerDisplayAttribute("{DebuggerDisplay,nq}")]
public class Octokit.CommitRequest : RequestParameters {
    [CompilerGeneratedAttribute]
private string <Sha>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Path>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Author>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<DateTimeOffset> <Since>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<DateTimeOffset> <Until>k__BackingField;
    public string Sha { get; public set; }
    public string Path { get; public set; }
    public string Author { get; public set; }
    public Nullable`1<DateTimeOffset> Since { get; public set; }
    public Nullable`1<DateTimeOffset> Until { get; public set; }
    internal string DebuggerDisplay { get; }
    [CompilerGeneratedAttribute]
public string get_Sha();
    [CompilerGeneratedAttribute]
public void set_Sha(string value);
    [CompilerGeneratedAttribute]
public string get_Path();
    [CompilerGeneratedAttribute]
public void set_Path(string value);
    [CompilerGeneratedAttribute]
public string get_Author();
    [CompilerGeneratedAttribute]
public void set_Author(string value);
    [CompilerGeneratedAttribute]
public Nullable`1<DateTimeOffset> get_Since();
    [CompilerGeneratedAttribute]
public void set_Since(Nullable`1<DateTimeOffset> value);
    [CompilerGeneratedAttribute]
public Nullable`1<DateTimeOffset> get_Until();
    [CompilerGeneratedAttribute]
public void set_Until(Nullable`1<DateTimeOffset> value);
    internal string get_DebuggerDisplay();
}
public class Octokit.CommitsClient : ApiClient {
    public CommitsClient(IApiConnection apiConnection);
    [ManualRouteAttribute("GET", "/repos/{owner}/{repo}/git/commits/{commit_sha}")]
public sealed virtual Task`1<Commit> Get(string owner, string name, string reference);
    [ManualRouteAttribute("GET", "/repositories/{id}/git/commits/{commit_sha}")]
public sealed virtual Task`1<Commit> Get(long repositoryId, string reference);
    [ManualRouteAttribute("POST", "/repos/{owner}/{repo}/git/commits")]
public sealed virtual Task`1<Commit> Create(string owner, string name, NewCommit commit);
    [ManualRouteAttribute("POST", "/repositories/{id}/git/commits")]
public sealed virtual Task`1<Commit> Create(long repositoryId, NewCommit commit);
}
public enum Octokit.CommitState : Enum {
    public int value__;
    [ParameterAttribute]
public static CommitState Pending;
    [ParameterAttribute]
public static CommitState Success;
    [ParameterAttribute]
public static CommitState Error;
    [ParameterAttribute]
public static CommitState Failure;
}
[DebuggerDisplayAttribute("{DebuggerDisplay,nq}")]
public class Octokit.CommitStatus : object {
    [CompilerGeneratedAttribute]
private DateTimeOffset <CreatedAt>k__BackingField;
    [CompilerGeneratedAttribute]
private DateTimeOffset <UpdatedAt>k__BackingField;
    [CompilerGeneratedAttribute]
private StringEnum`1<CommitState> <State>k__BackingField;
    [CompilerGeneratedAttribute]
private string <TargetUrl>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Description>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Context>k__BackingField;
    [CompilerGeneratedAttribute]
private long <Id>k__BackingField;
    [CompilerGeneratedAttribute]
private string <NodeId>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Url>k__BackingField;
    [CompilerGeneratedAttribute]
private User <Creator>k__BackingField;
    public DateTimeOffset CreatedAt { get; private set; }
    public DateTimeOffset UpdatedAt { get; private set; }
    public StringEnum`1<CommitState> State { get; private set; }
    public string TargetUrl { get; private set; }
    public string Description { get; private set; }
    public string Context { get; private set; }
    public long Id { get; private set; }
    public string NodeId { get; private set; }
    public string Url { get; private set; }
    public User Creator { get; private set; }
    internal string DebuggerDisplay { get; }
    public CommitStatus(DateTimeOffset createdAt, DateTimeOffset updatedAt, CommitState state, string targetUrl, string description, string context, long id, string nodeId, string url, User creator);
    [CompilerGeneratedAttribute]
public DateTimeOffset get_CreatedAt();
    [CompilerGeneratedAttribute]
private void set_CreatedAt(DateTimeOffset value);
    [CompilerGeneratedAttribute]
public DateTimeOffset get_UpdatedAt();
    [CompilerGeneratedAttribute]
private void set_UpdatedAt(DateTimeOffset value);
    [CompilerGeneratedAttribute]
public StringEnum`1<CommitState> get_State();
    [CompilerGeneratedAttribute]
private void set_State(StringEnum`1<CommitState> value);
    [CompilerGeneratedAttribute]
public string get_TargetUrl();
    [CompilerGeneratedAttribute]
private void set_TargetUrl(string value);
    [CompilerGeneratedAttribute]
public string get_Description();
    [CompilerGeneratedAttribute]
private void set_Description(string value);
    [CompilerGeneratedAttribute]
public string get_Context();
    [CompilerGeneratedAttribute]
private void set_Context(string value);
    [CompilerGeneratedAttribute]
public long get_Id();
    [CompilerGeneratedAttribute]
private void set_Id(long value);
    [CompilerGeneratedAttribute]
public string get_NodeId();
    [CompilerGeneratedAttribute]
private void set_NodeId(string value);
    [CompilerGeneratedAttribute]
public string get_Url();
    [CompilerGeneratedAttribute]
private void set_Url(string value);
    [CompilerGeneratedAttribute]
public User get_Creator();
    [CompilerGeneratedAttribute]
private void set_Creator(User value);
    internal string get_DebuggerDisplay();
}
public class Octokit.CommitStatusClient : ApiClient {
    public CommitStatusClient(IApiConnection apiConnection);
    [ManualRouteAttribute("GET", "/repos/{owner}/{repo}/commits/{ref}/statuses")]
public sealed virtual Task`1<IReadOnlyList`1<CommitStatus>> GetAll(string owner, string name, string reference);
    [ManualRouteAttribute("GET", "/repositories/{id}/commits/{ref}/statuses")]
public sealed virtual Task`1<IReadOnlyList`1<CommitStatus>> GetAll(long repositoryId, string reference);
    [ManualRouteAttribute("GET", "/repos/{owner}/{repo}/commits/{ref}/statuses")]
public sealed virtual Task`1<IReadOnlyList`1<CommitStatus>> GetAll(string owner, string name, string reference, ApiOptions options);
    [ManualRouteAttribute("GET", "/repositories/{id}/commits/{ref}/statuses")]
public sealed virtual Task`1<IReadOnlyList`1<CommitStatus>> GetAll(long repositoryId, string reference, ApiOptions options);
    [ManualRouteAttribute("GET", "/repos/{owner}/{repo}/commits/{ref}/status")]
public sealed virtual Task`1<CombinedCommitStatus> GetCombined(string owner, string name, string reference);
    [ManualRouteAttribute("GET", "/repositories/{id}/commits/{ref}/status")]
public sealed virtual Task`1<CombinedCommitStatus> GetCombined(long repositoryId, string reference);
    [ManualRouteAttribute("POST", "/repos/{owner}/{repo}/statuses/{sha}")]
public sealed virtual Task`1<CommitStatus> Create(string owner, string name, string reference, NewCommitStatus newCommitStatus);
    [ManualRouteAttribute("POST", "/repositories/{id}/statuses/{sha}")]
public sealed virtual Task`1<CommitStatus> Create(long repositoryId, string reference, NewCommitStatus newCommitStatus);
}
[DebuggerDisplayAttribute("{DebuggerDisplay,nq}")]
public class Octokit.Committer : object {
    [CompilerGeneratedAttribute]
private string <NodeId>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Email>k__BackingField;
    [CompilerGeneratedAttribute]
private DateTimeOffset <Date>k__BackingField;
    public string NodeId { get; protected set; }
    public string Name { get; protected set; }
    public string Email { get; protected set; }
    public DateTimeOffset Date { get; protected set; }
    internal string DebuggerDisplay { get; }
    public Committer(string name, string email, DateTimeOffset date);
    public Committer(string nodeId, string name, string email, DateTimeOffset date);
    [CompilerGeneratedAttribute]
public string get_NodeId();
    [CompilerGeneratedAttribute]
protected void set_NodeId(string value);
    [CompilerGeneratedAttribute]
public string get_Name();
    [CompilerGeneratedAttribute]
protected void set_Name(string value);
    [CompilerGeneratedAttribute]
public string get_Email();
    [CompilerGeneratedAttribute]
protected void set_Email(string value);
    [CompilerGeneratedAttribute]
public DateTimeOffset get_Date();
    [CompilerGeneratedAttribute]
protected void set_Date(DateTimeOffset value);
    internal string get_DebuggerDisplay();
}
[DebuggerDisplayAttribute("{DebuggerDisplay,nq}")]
public class Octokit.CompareResult : object {
    [CompilerGeneratedAttribute]
private string <Url>k__BackingField;
    [CompilerGeneratedAttribute]
private string <HtmlUrl>k__BackingField;
    [CompilerGeneratedAttribute]
private string <PermalinkUrl>k__BackingField;
    [CompilerGeneratedAttribute]
private string <DiffUrl>k__BackingField;
    [CompilerGeneratedAttribute]
private string <PatchUrl>k__BackingField;
    [CompilerGeneratedAttribute]
private GitHubCommit <BaseCommit>k__BackingField;
    [CompilerGeneratedAttribute]
private GitHubCommit <MergeBaseCommit>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Status>k__BackingField;
    [CompilerGeneratedAttribute]
private int <AheadBy>k__BackingField;
    [CompilerGeneratedAttribute]
private int <BehindBy>k__BackingField;
    [CompilerGeneratedAttribute]
private int <TotalCommits>k__BackingField;
    [CompilerGeneratedAttribute]
private IReadOnlyList`1<GitHubCommit> <Commits>k__BackingField;
    [CompilerGeneratedAttribute]
private IReadOnlyList`1<GitHubCommitFile> <Files>k__BackingField;
    public string Url { get; private set; }
    public string HtmlUrl { get; private set; }
    public string PermalinkUrl { get; private set; }
    public string DiffUrl { get; private set; }
    public string PatchUrl { get; private set; }
    public GitHubCommit BaseCommit { get; private set; }
    public GitHubCommit MergeBaseCommit { get; private set; }
    public string Status { get; private set; }
    public int AheadBy { get; private set; }
    public int BehindBy { get; private set; }
    public int TotalCommits { get; private set; }
    public IReadOnlyList`1<GitHubCommit> Commits { get; private set; }
    public IReadOnlyList`1<GitHubCommitFile> Files { get; private set; }
    internal string DebuggerDisplay { get; }
    public CompareResult(string url, string htmlUrl, string permalinkUrl, string diffUrl, string patchUrl, GitHubCommit baseCommit, GitHubCommit mergeBaseCommit, string status, int aheadBy, int behindBy, int totalCommits, IReadOnlyList`1<GitHubCommit> commits, IReadOnlyList`1<GitHubCommitFile> files);
    [CompilerGeneratedAttribute]
public string get_Url();
    [CompilerGeneratedAttribute]
private void set_Url(string value);
    [CompilerGeneratedAttribute]
public string get_HtmlUrl();
    [CompilerGeneratedAttribute]
private void set_HtmlUrl(string value);
    [CompilerGeneratedAttribute]
public string get_PermalinkUrl();
    [CompilerGeneratedAttribute]
private void set_PermalinkUrl(string value);
    [CompilerGeneratedAttribute]
public string get_DiffUrl();
    [CompilerGeneratedAttribute]
private void set_DiffUrl(string value);
    [CompilerGeneratedAttribute]
public string get_PatchUrl();
    [CompilerGeneratedAttribute]
private void set_PatchUrl(string value);
    [CompilerGeneratedAttribute]
public GitHubCommit get_BaseCommit();
    [CompilerGeneratedAttribute]
private void set_BaseCommit(GitHubCommit value);
    [CompilerGeneratedAttribute]
public GitHubCommit get_MergeBaseCommit();
    [CompilerGeneratedAttribute]
private void set_MergeBaseCommit(GitHubCommit value);
    [CompilerGeneratedAttribute]
public string get_Status();
    [CompilerGeneratedAttribute]
private void set_Status(string value);
    [CompilerGeneratedAttribute]
public int get_AheadBy();
    [CompilerGeneratedAttribute]
private void set_AheadBy(int value);
    [CompilerGeneratedAttribute]
public int get_BehindBy();
    [CompilerGeneratedAttribute]
private void set_BehindBy(int value);
    [CompilerGeneratedAttribute]
public int get_TotalCommits();
    [CompilerGeneratedAttribute]
private void set_TotalCommits(int value);
    [CompilerGeneratedAttribute]
public IReadOnlyList`1<GitHubCommit> get_Commits();
    [CompilerGeneratedAttribute]
private void set_Commits(IReadOnlyList`1<GitHubCommit> value);
    [CompilerGeneratedAttribute]
public IReadOnlyList`1<GitHubCommitFile> get_Files();
    [CompilerGeneratedAttribute]
private void set_Files(IReadOnlyList`1<GitHubCommitFile> value);
    internal string get_DebuggerDisplay();
}
public class Octokit.Connection : object {
    private static Uri _defaultGitHubApiUrl;
    private static ICredentialStore _anonymousCredentials;
    private Authenticator _authenticator;
    private JsonHttpPipeline _jsonPipeline;
    internal IHttpClient _httpClient;
    private ApiInfo _lastApiInfo;
    [CompilerGeneratedAttribute]
private Uri <BaseAddress>k__BackingField;
    [CompilerGeneratedAttribute]
private string <UserAgent>k__BackingField;
    private static Dictionary`2<HttpStatusCode, Func`2<IResponse, Exception>> _httpExceptionMap;
    private static string _platformInformation;
    private static string _versionInformation;
    public Uri BaseAddress { get; private set; }
    public string UserAgent { get; private set; }
    public ICredentialStore CredentialStore { get; }
    public Credentials Credentials { get; public set; }
    unknown IResponseCache ResponseCache {public set; }
    public Connection(ProductHeaderValue productInformation);
    public Connection(ProductHeaderValue productInformation, IHttpClient httpClient);
    public Connection(ProductHeaderValue productInformation, Uri baseAddress);
    public Connection(ProductHeaderValue productInformation, ICredentialStore credentialStore);
    public Connection(ProductHeaderValue productInformation, Uri baseAddress, ICredentialStore credentialStore);
    public Connection(ProductHeaderValue productInformation, Uri baseAddress, ICredentialStore credentialStore, IHttpClient httpClient, IJsonSerializer serializer);
    private static Connection();
    public sealed virtual ApiInfo GetLastApiInfo();
    public sealed virtual Task`1<IApiResponse`1<T>> Get(Uri uri, IDictionary`2<string, string> parameters);
    public sealed virtual Task`1<IApiResponse`1<T>> Get(Uri uri, IDictionary`2<string, string> parameters, string accepts);
    public sealed virtual Task`1<IApiResponse`1<T>> Get(Uri uri, IDictionary`2<string, string> parameters, string accepts, CancellationToken cancellationToken);
    public sealed virtual Task`1<IApiResponse`1<T>> Get(Uri uri, IDictionary`2<string, string> parameters, string accepts, CancellationToken cancellationToken, Func`2<object, object> preprocessResponseBody);
    public sealed virtual Task`1<IApiResponse`1<T>> Get(Uri uri, TimeSpan timeout);
    public sealed virtual Task`1<IApiResponse`1<string>> GetHtml(Uri uri, IDictionary`2<string, string> parameters);
    public sealed virtual Task`1<IApiResponse`1<Byte[]>> GetRaw(Uri uri, IDictionary`2<string, string> parameters);
    public sealed virtual Task`1<IApiResponse`1<Byte[]>> GetRaw(Uri uri, IDictionary`2<string, string> parameters, TimeSpan timeout);
    public sealed virtual Task`1<IApiResponse`1<Stream>> GetRawStream(Uri uri, IDictionary`2<string, string> parameters);
    public sealed virtual Task`1<IApiResponse`1<T>> Patch(Uri uri, object body);
    public sealed virtual Task`1<IApiResponse`1<T>> Patch(Uri uri, object body, string accepts);
    [AsyncStateMachineAttribute("Octokit.Connection/<Post>d__24")]
public sealed virtual Task`1<HttpStatusCode> Post(Uri uri, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Octokit.Connection/<Post>d__25")]
public sealed virtual Task`1<HttpStatusCode> Post(Uri uri, object body, string accepts, CancellationToken cancellationToken);
    public sealed virtual Task`1<IApiResponse`1<T>> Post(Uri uri, CancellationToken cancellationToken);
    public Task`1<IApiResponse`1<T>> Post(Uri uri, object body, string accepts, string contentType, CancellationToken cancellationToken);
    public sealed virtual Task`1<IApiResponse`1<T>> Post(Uri uri, object body, string accepts, string contentType, IDictionary`2<string, string> parameters, CancellationToken cancellationToken);
    public sealed virtual Task`1<IApiResponse`1<T>> Post(Uri uri, object body, string accepts, string contentType, string twoFactorAuthenticationCode, CancellationToken cancellationToken);
    public sealed virtual Task`1<IApiResponse`1<T>> Post(Uri uri, object body, string accepts, string contentType, TimeSpan timeout, CancellationToken cancellationToken);
    public sealed virtual Task`1<IApiResponse`1<T>> Post(Uri uri, object body, string accepts, string contentType, Uri baseAddress, CancellationToken cancellationToken);
    public sealed virtual Task`1<IApiResponse`1<T>> Put(Uri uri, object body);
    public sealed virtual Task`1<IApiResponse`1<T>> Put(Uri uri, object body, string twoFactorAuthenticationCode);
    public sealed virtual Task`1<IApiResponse`1<T>> Put(Uri uri, object body, string twoFactorAuthenticationCode, string accepts);
    private Task`1<IApiResponse`1<T>> SendData(Uri uri, HttpMethod method, object body, string accepts, string contentType, TimeSpan timeout, CancellationToken cancellationToken, string twoFactorAuthenticationCode, Uri baseAddress, Func`2<object, object> preprocessResponseBody);
    private Task`1<IApiResponse`1<T>> SendData(Uri uri, HttpMethod method, object body, string accepts, string contentType, CancellationToken cancellationToken, string twoFactorAuthenticationCode, Uri baseAddress, Func`2<object, object> preprocessResponseBody);
    private Task`1<IApiResponse`1<T>> SendDataInternal(object body, string accepts, string contentType, CancellationToken cancellationToken, string twoFactorAuthenticationCode, Request request, Func`2<object, object> preprocessResponseBody);
    [AsyncStateMachineAttribute("Octokit.Connection/<Patch>d__38")]
public sealed virtual Task`1<HttpStatusCode> Patch(Uri uri);
    [AsyncStateMachineAttribute("Octokit.Connection/<Patch>d__39")]
public sealed virtual Task`1<HttpStatusCode> Patch(Uri uri, object body);
    [AsyncStateMachineAttribute("Octokit.Connection/<Patch>d__40")]
public sealed virtual Task`1<HttpStatusCode> Patch(Uri uri, string accepts);
    [AsyncStateMachineAttribute("Octokit.Connection/<Patch>d__41")]
public sealed virtual Task`1<HttpStatusCode> Patch(Uri uri, object body, string accepts);
    [AsyncStateMachineAttribute("Octokit.Connection/<Put>d__42")]
public sealed virtual Task`1<HttpStatusCode> Put(Uri uri);
    [AsyncStateMachineAttribute("Octokit.Connection/<Put>d__43")]
public sealed virtual Task`1<HttpStatusCode> Put(Uri uri, object body);
    [AsyncStateMachineAttribute("Octokit.Connection/<Delete>d__44")]
public sealed virtual Task`1<HttpStatusCode> Delete(Uri uri);
    [AsyncStateMachineAttribute("Octokit.Connection/<Delete>d__45")]
public sealed virtual Task`1<HttpStatusCode> Delete(Uri uri, string twoFactorAuthenticationCode);
    [AsyncStateMachineAttribute("Octokit.Connection/<Delete>d__46")]
public sealed virtual Task`1<HttpStatusCode> Delete(Uri uri, object data);
    [AsyncStateMachineAttribute("Octokit.Connection/<Delete>d__47")]
public sealed virtual Task`1<HttpStatusCode> Delete(Uri uri, object data, string accepts);
    public sealed virtual Task`1<IApiResponse`1<T>> Delete(Uri uri, object data);
    public sealed virtual Task`1<IApiResponse`1<T>> Delete(Uri uri, object data, string accepts);
    [CompilerGeneratedAttribute]
public sealed virtual Uri get_BaseAddress();
    [CompilerGeneratedAttribute]
private void set_BaseAddress(Uri value);
    [CompilerGeneratedAttribute]
public string get_UserAgent();
    [CompilerGeneratedAttribute]
private void set_UserAgent(string value);
    public sealed virtual ICredentialStore get_CredentialStore();
    public sealed virtual Credentials get_Credentials();
    public sealed virtual void set_Credentials(Credentials value);
    public sealed virtual void set_ResponseCache(IResponseCache value);
    [AsyncStateMachineAttribute("Octokit.Connection/<GetHtml>d__65")]
private Task`1<IApiResponse`1<string>> GetHtml(IRequest request);
    [AsyncStateMachineAttribute("Octokit.Connection/<GetRaw>d__66")]
private Task`1<IApiResponse`1<Byte[]>> GetRaw(IRequest request);
    [AsyncStateMachineAttribute("Octokit.Connection/<GetRawStream>d__67")]
private Task`1<IApiResponse`1<Stream>> GetRawStream(IRequest request);
    [AsyncStateMachineAttribute("Octokit.Connection/<StreamToByteArray>d__68")]
private Task`1<Byte[]> StreamToByteArray(Stream stream);
    [AsyncStateMachineAttribute("Octokit.Connection/<Run>d__69`1")]
private Task`1<IApiResponse`1<T>> Run(IRequest request, CancellationToken cancellationToken, Func`2<object, object> preprocessResponseBody);
    [AsyncStateMachineAttribute("Octokit.Connection/<RunRequest>d__70")]
private Task`1<IResponse> RunRequest(IRequest request, CancellationToken cancellationToken, Func`2<object, object> preprocessResponseBody);
    private static void HandleErrors(IResponse response);
    private static Exception GetExceptionForUnauthorized(IResponse response);
    private static Exception GetExceptionForForbidden(IResponse response);
    internal static TwoFactorType ParseTwoFactorType(IResponse restResponse);
    private static string FormatUserAgent(ProductHeaderValue productInformation);
    private static string GetPlatformInformation();
    private static string GetCultureInformation();
    private static string GetVersionInformation();
    public sealed virtual void SetRequestTimeout(TimeSpan timeout);
}
public abstract class Octokit.ContentRequest : object {
    [CompilerGeneratedAttribute]
private string <Message>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Branch>k__BackingField;
    [CompilerGeneratedAttribute]
private Committer <Committer>k__BackingField;
    [CompilerGeneratedAttribute]
private Committer <Author>k__BackingField;
    public string Message { get; private set; }
    public string Branch { get; public set; }
    public Committer Committer { get; public set; }
    public Committer Author { get; public set; }
    protected ContentRequest(string message);
    protected ContentRequest(string message, string branch);
    [CompilerGeneratedAttribute]
public string get_Message();
    [CompilerGeneratedAttribute]
private void set_Message(string value);
    [CompilerGeneratedAttribute]
public string get_Branch();
    [CompilerGeneratedAttribute]
public void set_Branch(string value);
    [CompilerGeneratedAttribute]
public Committer get_Committer();
    [CompilerGeneratedAttribute]
public void set_Committer(Committer value);
    [CompilerGeneratedAttribute]
public Committer get_Author();
    [CompilerGeneratedAttribute]
public void set_Author(Committer value);
}
public enum Octokit.ContentType : Enum {
    public int value__;
    [ParameterAttribute]
public static ContentType File;
    [ParameterAttribute]
public static ContentType Dir;
    [ParameterAttribute]
public static ContentType Symlink;
    [ParameterAttribute]
public static ContentType Submodule;
}
[DebuggerDisplayAttribute("{DebuggerDisplay,nq}")]
public class Octokit.Contributor : object {
    [CompilerGeneratedAttribute]
private Author <Author>k__BackingField;
    [CompilerGeneratedAttribute]
private int <Total>k__BackingField;
    [CompilerGeneratedAttribute]
private IReadOnlyList`1<WeeklyHash> <Weeks>k__BackingField;
    public Author Author { get; private set; }
    public int Total { get; private set; }
    public IReadOnlyList`1<WeeklyHash> Weeks { get; private set; }
    internal string DebuggerDisplay { get; }
    public Contributor(Author author, int total, IReadOnlyList`1<WeeklyHash> weeks);
    [CompilerGeneratedAttribute]
public Author get_Author();
    [CompilerGeneratedAttribute]
private void set_Author(Author value);
    [CompilerGeneratedAttribute]
public int get_Total();
    [CompilerGeneratedAttribute]
private void set_Total(int value);
    [CompilerGeneratedAttribute]
public IReadOnlyList`1<WeeklyHash> get_Weeks();
    [CompilerGeneratedAttribute]
private void set_Weeks(IReadOnlyList`1<WeeklyHash> value);
    internal string get_DebuggerDisplay();
}
public class Octokit.CopilotClient : ApiClient {
    [CompilerGeneratedAttribute]
private ICopilotLicenseClient <Licensing>k__BackingField;
    public ICopilotLicenseClient Licensing { get; private set; }
    public CopilotClient(IApiConnection apiConnection);
    [AsyncStateMachineAttribute("Octokit.CopilotClient/<GetSummaryForOrganization>d__1")]
[ManualRouteAttribute("GET", "/orgs/{org}/copilot/billing")]
public sealed virtual Task`1<BillingSettings> GetSummaryForOrganization(string organization);
    [CompilerGeneratedAttribute]
public sealed virtual ICopilotLicenseClient get_Licensing();
    [CompilerGeneratedAttribute]
private void set_Licensing(ICopilotLicenseClient value);
}
[DebuggerDisplayAttribute("{DebuggerDisplay,nq}")]
public class Octokit.CopilotSeat : object {
    [CompilerGeneratedAttribute]
private Nullable`1<DateTimeOffset> <CreatedAt>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<DateTimeOffset> <UpdatedAt>k__BackingField;
    [CompilerGeneratedAttribute]
private string <PendingCancellationDate>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<DateTimeOffset> <LastActivityAt>k__BackingField;
    [CompilerGeneratedAttribute]
private string <LastActivityEditor>k__BackingField;
    [CompilerGeneratedAttribute]
private User <Assignee>k__BackingField;
    [CompilerGeneratedAttribute]
private Team <AssigningTeam>k__BackingField;
    public Nullable`1<DateTimeOffset> CreatedAt { get; private set; }
    public Nullable`1<DateTimeOffset> UpdatedAt { get; private set; }
    public string PendingCancellationDate { get; private set; }
    public Nullable`1<DateTimeOffset> LastActivityAt { get; private set; }
    public string LastActivityEditor { get; private set; }
    public User Assignee { get; private set; }
    public Team AssigningTeam { get; private set; }
    internal string DebuggerDisplay { get; }
    public CopilotSeat(Nullable`1<DateTimeOffset> createdAt, Nullable`1<DateTimeOffset> updatedAt, string pendingCancellationDate, Nullable`1<DateTimeOffset> lastActivityAt, string lastActivityEditor, User assignee, Team assigningTeam);
    [CompilerGeneratedAttribute]
public Nullable`1<DateTimeOffset> get_CreatedAt();
    [CompilerGeneratedAttribute]
private void set_CreatedAt(Nullable`1<DateTimeOffset> value);
    [CompilerGeneratedAttribute]
public Nullable`1<DateTimeOffset> get_UpdatedAt();
    [CompilerGeneratedAttribute]
private void set_UpdatedAt(Nullable`1<DateTimeOffset> value);
    [CompilerGeneratedAttribute]
public string get_PendingCancellationDate();
    [CompilerGeneratedAttribute]
private void set_PendingCancellationDate(string value);
    [CompilerGeneratedAttribute]
public Nullable`1<DateTimeOffset> get_LastActivityAt();
    [CompilerGeneratedAttribute]
private void set_LastActivityAt(Nullable`1<DateTimeOffset> value);
    [CompilerGeneratedAttribute]
public string get_LastActivityEditor();
    [CompilerGeneratedAttribute]
private void set_LastActivityEditor(string value);
    [CompilerGeneratedAttribute]
public User get_Assignee();
    [CompilerGeneratedAttribute]
private void set_Assignee(User value);
    [CompilerGeneratedAttribute]
public Team get_AssigningTeam();
    [CompilerGeneratedAttribute]
private void set_AssigningTeam(Team value);
    internal string get_DebuggerDisplay();
}
[DebuggerDisplayAttribute("{DebuggerDisplay,nq}")]
public class Octokit.CopilotSeatAllocation : object {
    [CompilerGeneratedAttribute]
private long <SeatsCancelled>k__BackingField;
    [CompilerGeneratedAttribute]
private long <SeatsCreated>k__BackingField;
    public long SeatsCancelled { get; private set; }
    public long SeatsCreated { get; private set; }
    internal string DebuggerDisplay { get; }
    public CopilotSeatAllocation(long seatsCancelled, long seatsCreated);
    [CompilerGeneratedAttribute]
public long get_SeatsCancelled();
    [CompilerGeneratedAttribute]
private void set_SeatsCancelled(long value);
    [CompilerGeneratedAttribute]
public long get_SeatsCreated();
    [CompilerGeneratedAttribute]
private void set_SeatsCreated(long value);
    internal string get_DebuggerDisplay();
}
[DebuggerDisplayAttribute("{DebuggerDisplay,nq}")]
public class Octokit.CopilotSeats : object {
    [CompilerGeneratedAttribute]
private long <TotalSeats>k__BackingField;
    [CompilerGeneratedAttribute]
private IReadOnlyList`1<CopilotSeat> <Seats>k__BackingField;
    public long TotalSeats { get; private set; }
    public IReadOnlyList`1<CopilotSeat> Seats { get; private set; }
    internal string DebuggerDisplay { get; }
    public CopilotSeats(int totalSeats, IReadOnlyList`1<CopilotSeat> seats);
    [CompilerGeneratedAttribute]
public long get_TotalSeats();
    [CompilerGeneratedAttribute]
private void set_TotalSeats(long value);
    [CompilerGeneratedAttribute]
public IReadOnlyList`1<CopilotSeat> get_Seats();
    [CompilerGeneratedAttribute]
private void set_Seats(IReadOnlyList`1<CopilotSeat> value);
    internal string get_DebuggerDisplay();
}
[DebuggerDisplayAttribute("{DebuggerDisplay,nq}")]
public class Octokit.CreateEventPayload : ActivityPayload {
    [CompilerGeneratedAttribute]
private string <Ref>k__BackingField;
    [CompilerGeneratedAttribute]
private StringEnum`1<RefType> <RefType>k__BackingField;
    [CompilerGeneratedAttribute]
private string <MasterBranch>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Description>k__BackingField;
    public string Ref { get; private set; }
    public StringEnum`1<RefType> RefType { get; private set; }
    public string MasterBranch { get; private set; }
    public string Description { get; private set; }
    [CompilerGeneratedAttribute]
public string get_Ref();
    [CompilerGeneratedAttribute]
private void set_Ref(string value);
    [CompilerGeneratedAttribute]
public StringEnum`1<RefType> get_RefType();
    [CompilerGeneratedAttribute]
private void set_RefType(StringEnum`1<RefType> value);
    [CompilerGeneratedAttribute]
public string get_MasterBranch();
    [CompilerGeneratedAttribute]
private void set_MasterBranch(string value);
    [CompilerGeneratedAttribute]
public string get_Description();
    [CompilerGeneratedAttribute]
private void set_Description(string value);
}
[DebuggerDisplayAttribute("{DebuggerDisplay,nq}")]
public class Octokit.CreateFileRequest : ContentRequest {
    [CompilerGeneratedAttribute]
private string <Content>k__BackingField;
    public string Content { get; private set; }
    internal string DebuggerDisplay { get; }
    public CreateFileRequest(string message, string content);
    public CreateFileRequest(string message, string content, string branch);
    public CreateFileRequest(string message, string content, bool convertContentToBase64);
    public CreateFileRequest(string message, string content, string branch, bool convertContentToBase64);
    [CompilerGeneratedAttribute]
public string get_Content();
    [CompilerGeneratedAttribute]
private void set_Content(string value);
    internal virtual string get_DebuggerDisplay();
}
[DebuggerDisplayAttribute("{DebuggerDisplay,nq}")]
public class Octokit.CreateWorkflowDispatch : object {
    [CompilerGeneratedAttribute]
private string <Ref>k__BackingField;
    [CompilerGeneratedAttribute]
private IDictionary`2<string, object> <Inputs>k__BackingField;
    public string Ref { get; private set; }
    public IDictionary`2<string, object> Inputs { get; public set; }
    internal string DebuggerDisplay { get; }
    public CreateWorkflowDispatch(string ref);
    [CompilerGeneratedAttribute]
public string get_Ref();
    [CompilerGeneratedAttribute]
private void set_Ref(string value);
    [CompilerGeneratedAttribute]
public IDictionary`2<string, object> get_Inputs();
    [CompilerGeneratedAttribute]
public void set_Inputs(IDictionary`2<string, object> value);
    internal string get_DebuggerDisplay();
}
public class Octokit.Credentials : object {
    public static Credentials Anonymous;
    [CompilerGeneratedAttribute]
private string <Login>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Password>k__BackingField;
    [CompilerGeneratedAttribute]
private AuthenticationType <AuthenticationType>k__BackingField;
    public string Login { get; private set; }
    public string Password { get; private set; }
    public AuthenticationType AuthenticationType { get; private set; }
    public Credentials(string login, string password);
    public Credentials(string login, string password, AuthenticationType authenticationType);
    public Credentials(string token);
    public Credentials(string token, AuthenticationType authenticationType);
    private static Credentials();
    [CompilerGeneratedAttribute]
public string get_Login();
    [CompilerGeneratedAttribute]
private void set_Login(string value);
    [CompilerGeneratedAttribute]
public string get_Password();
    [CompilerGeneratedAttribute]
private void set_Password(string value);
    [CompilerGeneratedAttribute]
public AuthenticationType get_AuthenticationType();
    [CompilerGeneratedAttribute]
private void set_AuthenticationType(AuthenticationType value);
}
[ExtensionAttribute]
public static class Octokit.CredentialsExtensions : object {
    [ExtensionAttribute]
public static string GetToken(Credentials credentials);
}
[DebuggerDisplayAttribute("{DebuggerDisplay,nq}")]
[ExcludeFromCtorWithAllPropertiesConventionTestAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public class Octokit.CustomPropertyValue : object {
    [CompilerGeneratedAttribute]
private string <PropertyName>k__BackingField;
    [CompilerGeneratedAttribute]
private object <value>k__BackingField;
    [ParameterAttribute]
public string PropertyName { get; private set; }
    [ParameterAttribute]
public object value { get; private set; }
    public string Value { get; }
    public IReadOnlyList`1<string> Values { get; }
    internal string DebuggerDisplay { get; }
    public CustomPropertyValue(string propertyName, object value);
    [CompilerGeneratedAttribute]
public string get_PropertyName();
    [CompilerGeneratedAttribute]
private void set_PropertyName(string value);
    [CompilerGeneratedAttribute]
public object get_value();
    [CompilerGeneratedAttribute]
private void set_value(object value);
    public string get_Value();
    public IReadOnlyList`1<string> get_Values();
    internal string get_DebuggerDisplay();
}
public enum Octokit.CustomPropertyValuesEditableBy : Enum {
    public int value__;
    [ParameterAttribute]
public static CustomPropertyValuesEditableBy OrgActors;
    [ParameterAttribute]
public static CustomPropertyValuesEditableBy OrgAndRepoActors;
}
public enum Octokit.CustomPropertyValueType : Enum {
    public int value__;
    [ParameterAttribute]
public static CustomPropertyValueType String;
    [ParameterAttribute]
public static CustomPropertyValueType SingleSelect;
    [ParameterAttribute]
public static CustomPropertyValueType MultiSelect;
    [ParameterAttribute]
public static CustomPropertyValueType TrueFalse;
}
[DebuggerDisplayAttribute("{DebuggerDisplay,nq}")]
public class Octokit.CustomPropertyValueUpdate : object {
    [CompilerGeneratedAttribute]
private string <PropertyName>k__BackingField;
    [CompilerGeneratedAttribute]
private object <Value>k__BackingField;
    public string PropertyName { get; public set; }
    [SerializeNullAttribute]
[ParameterAttribute]
public object Value { get; private set; }
    internal string DebuggerDisplay { get; }
    public CustomPropertyValueUpdate(string propertyName, string value);
    public CustomPropertyValueUpdate(string propertyName, IReadOnlyList`1<string> value);
    [CompilerGeneratedAttribute]
public string get_PropertyName();
    [CompilerGeneratedAttribute]
public void set_PropertyName(string value);
    [CompilerGeneratedAttribute]
public object get_Value();
    [CompilerGeneratedAttribute]
private void set_Value(object value);
    internal string get_DebuggerDisplay();
}
[DebuggerDisplayAttribute("{DebuggerDisplay,nq}")]
public class Octokit.DateRange : object {
    public static string DateTimePattern;
    public static string DatePattern;
    private string query;
    internal string DebuggerDisplay { get; }
    [ObsoleteAttribute("This ctor does not support the time component or timezone and will be removed in a future release. Please use the DateTimeOffset overload instead")]
public DateRange(DateTime date, SearchQualifierOperator op);
    [ObsoleteAttribute("This ctor does not support the time component or timezone and will be removed in a future release. Please use the DateTimeOffset overload instead")]
public DateRange(DateTime from, DateTime to);
    public DateRange(DateTimeOffset from, DateTimeOffset to);
    public DateRange(DateTimeOffset dateTime, SearchQualifierOperator op);
    private string EncodeOffset(string dateTimeOffset);
    internal string get_DebuggerDisplay();
    [ObsoleteAttribute("This method does not support the time component or timezone and will be removed in a future release. Please use the DateTimeOffset overload instead")]
public static DateRange LessThan(DateTime date);
    [ObsoleteAttribute("This method does not support the time component or timezone and will be removed in a future release. Please use the DateTimeOffset overload instead")]
public static DateRange LessThanOrEquals(DateTime date);
    [ObsoleteAttribute("This method does not support the time component or timezone and will be removed in a future release. Please use the DateTimeOffset overload instead")]
public static DateRange GreaterThan(DateTime date);
    [ObsoleteAttribute("This method does not support the time component or timezone and will be removed in a future release. Please use the DateTimeOffset overload instead")]
public static DateRange GreaterThanOrEquals(DateTime date);
    [ObsoleteAttribute("This method does not support the time component or timezone and will be removed in a future release. Please use the DateTimeOffset overload instead")]
public static DateRange Between(DateTime from, DateTime to);
    public static DateRange LessThan(DateTimeOffset dateTime);
    public static DateRange LessThanOrEquals(DateTimeOffset dateTime);
    public static DateRange GreaterThan(DateTimeOffset dateTime);
    public static DateRange GreaterThanOrEquals(DateTimeOffset dateTime);
    public static DateRange Between(DateTimeOffset from, DateTimeOffset to);
    public virtual string ToString();
}
[DebuggerDisplayAttribute("{DebuggerDisplay,nq}")]
public class Octokit.DeleteEventPayload : ActivityPayload {
    [CompilerGeneratedAttribute]
private string <Ref>k__BackingField;
    [CompilerGeneratedAttribute]
private StringEnum`1<RefType> <RefType>k__BackingField;
    public string Ref { get; private set; }
    public StringEnum`1<RefType> RefType { get; private set; }
    [CompilerGeneratedAttribute]
public string get_Ref();
    [CompilerGeneratedAttribute]
private void set_Ref(string value);
    [CompilerGeneratedAttribute]
public StringEnum`1<RefType> get_RefType();
    [CompilerGeneratedAttribute]
private void set_RefType(StringEnum`1<RefType> value);
}
[DebuggerDisplayAttribute("{DebuggerDisplay,nq}")]
public class Octokit.DeleteFileRequest : ContentRequest {
    [CompilerGeneratedAttribute]
private string <Sha>k__BackingField;
    public string Sha { get; private set; }
    internal string DebuggerDisplay { get; }
    public DeleteFileRequest(string message, string sha);
    public DeleteFileRequest(string message, string sha, string branch);
    [CompilerGeneratedAttribute]
public string get_Sha();
    [CompilerGeneratedAttribute]
private void set_Sha(string value);
    internal string get_DebuggerDisplay();
}
[DebuggerDisplayAttribute("{DebuggerDisplay,nq}")]
public class Octokit.DependabotSecurityUpdates : object {
    [CompilerGeneratedAttribute]
private string <Status>k__BackingField;
    public string Status { get; protected set; }
    internal string DebuggerDisplay { get; }
    public DependabotSecurityUpdates(string status);
    [CompilerGeneratedAttribute]
public string get_Status();
    [CompilerGeneratedAttribute]
protected void set_Status(string value);
    internal string get_DebuggerDisplay();
}
[DebuggerDisplayAttribute("{DebuggerDisplay,nq}")]
public class Octokit.DependabotSecurityUpdatesRequest : object {
    [CompilerGeneratedAttribute]
private Nullable`1<Status> <Status>k__BackingField;
    public Nullable`1<Status> Status { get; public set; }
    internal string DebuggerDisplay { get; }
    public DependabotSecurityUpdatesRequest(Nullable`1<Status> status);
    [CompilerGeneratedAttribute]
public Nullable`1<Status> get_Status();
    [CompilerGeneratedAttribute]
public void set_Status(Nullable`1<Status> value);
    internal string get_DebuggerDisplay();
}
[DebuggerDisplayAttribute("{DebuggerDisplay,nq}")]
public class Octokit.DependencyDiff : object {
    [CompilerGeneratedAttribute]
private StringEnum`1<ChangeType> <ChangeType>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Manifest>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Ecosystem>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Version>k__BackingField;
    [CompilerGeneratedAttribute]
private string <PackageUrl>k__BackingField;
    [CompilerGeneratedAttribute]
private string <License>k__BackingField;
    [CompilerGeneratedAttribute]
private string <SourceRepositoryUrl>k__BackingField;
    [CompilerGeneratedAttribute]
private IReadOnlyList`1<DependencyVulnerability> <Vulnerabilities>k__BackingField;
    [CompilerGeneratedAttribute]
private StringEnum`1<Scope> <Scope>k__BackingField;
    public StringEnum`1<ChangeType> ChangeType { get; private set; }
    public string Manifest { get; private set; }
    public string Ecosystem { get; private set; }
    public string Name { get; private set; }
    public string Version { get; private set; }
    public string PackageUrl { get; private set; }
    public string License { get; private set; }
    public string SourceRepositoryUrl { get; private set; }
    public IReadOnlyList`1<DependencyVulnerability> Vulnerabilities { get; private set; }
    public StringEnum`1<Scope> Scope { get; private set; }
    internal string DebuggerDisplay { get; }
    public DependencyDiff(ChangeType changeType, string manifest, string ecosystem, string name, string version, string packageUrl, string license, string sourceRepositoryUrl, IReadOnlyList`1<DependencyVulnerability> vulnerabilities, Scope scope);
    [CompilerGeneratedAttribute]
public StringEnum`1<ChangeType> get_ChangeType();
    [CompilerGeneratedAttribute]
private void set_ChangeType(StringEnum`1<ChangeType> value);
    [CompilerGeneratedAttribute]
public string get_Manifest();
    [CompilerGeneratedAttribute]
private void set_Manifest(string value);
    [CompilerGeneratedAttribute]
public string get_Ecosystem();
    [CompilerGeneratedAttribute]
private void set_Ecosystem(string value);
    [CompilerGeneratedAttribute]
public string get_Name();
    [CompilerGeneratedAttribute]
private void set_Name(string value);
    [CompilerGeneratedAttribute]
public string get_Version();
    [CompilerGeneratedAttribute]
private void set_Version(string value);
    [CompilerGeneratedAttribute]
public string get_PackageUrl();
    [CompilerGeneratedAttribute]
private void set_PackageUrl(string value);
    [CompilerGeneratedAttribute]
public string get_License();
    [CompilerGeneratedAttribute]
private void set_License(string value);
    [CompilerGeneratedAttribute]
public string get_SourceRepositoryUrl();
    [CompilerGeneratedAttribute]
private void set_SourceRepositoryUrl(string value);
    [CompilerGeneratedAttribute]
public IReadOnlyList`1<DependencyVulnerability> get_Vulnerabilities();
    [CompilerGeneratedAttribute]
private void set_Vulnerabilities(IReadOnlyList`1<DependencyVulnerability> value);
    [CompilerGeneratedAttribute]
public StringEnum`1<Scope> get_Scope();
    [CompilerGeneratedAttribute]
private void set_Scope(StringEnum`1<Scope> value);
    internal string get_DebuggerDisplay();
}
public class Octokit.DependencyGraphClient : object {
    [CompilerGeneratedAttribute]
private IDependencyReviewClient <DependencyReview>k__BackingField;
    [CompilerGeneratedAttribute]
private IDependencySubmissionClient <DependencySubmission>k__BackingField;
    public IDependencyReviewClient DependencyReview { get; private set; }
    public IDependencySubmissionClient DependencySubmission { get; private set; }
    public DependencyGraphClient(IApiConnection apiConnection);
    [CompilerGeneratedAttribute]
public sealed virtual IDependencyReviewClient get_DependencyReview();
    [CompilerGeneratedAttribute]
private void set_DependencyReview(IDependencyReviewClient value);
    [CompilerGeneratedAttribute]
public sealed virtual IDependencySubmissionClient get_DependencySubmission();
    [CompilerGeneratedAttribute]
private void set_DependencySubmission(IDependencySubmissionClient value);
}
public class Octokit.DependencyReviewClient : ApiClient {
    public DependencyReviewClient(IApiConnection apiConnection);
    [ManualRouteAttribute("GET", "/repos/{owner}/{repo}/dependency-graph/compare/{base}...{head}")]
public sealed virtual Task`1<IReadOnlyList`1<DependencyDiff>> GetAll(string owner, string name, string base, string head);
    [ManualRouteAttribute("GET", "/repositories/{id}/dependency-graph/compare/{base}...{head}")]
public sealed virtual Task`1<IReadOnlyList`1<DependencyDiff>> GetAll(long repositoryId, string base, string head);
}
[DebuggerDisplayAttribute("{DebuggerDisplay,nq}")]
public class Octokit.DependencySnapshotSubmission : object {
    [CompilerGeneratedAttribute]
private long <Id>k__BackingField;
    [CompilerGeneratedAttribute]
private DateTimeOffset <CreatedAt>k__BackingField;
    [CompilerGeneratedAttribute]
private StringEnum`1<DependencySnapshotSubmissionResult> <Result>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Message>k__BackingField;
    public long Id { get; private set; }
    public DateTimeOffset CreatedAt { get; private set; }
    public StringEnum`1<DependencySnapshotSubmissionResult> Result { get; private set; }
    public string Message { get; private set; }
    internal string DebuggerDisplay { get; }
    public DependencySnapshotSubmission(long id, DateTimeOffset createdAt, DependencySnapshotSubmissionResult result, string message);
    [CompilerGeneratedAttribute]
public long get_Id();
    [CompilerGeneratedAttribute]
private void set_Id(long value);
    [CompilerGeneratedAttribute]
public DateTimeOffset get_CreatedAt();
    [CompilerGeneratedAttribute]
private void set_CreatedAt(DateTimeOffset value);
    [CompilerGeneratedAttribute]
public StringEnum`1<DependencySnapshotSubmissionResult> get_Result();
    [CompilerGeneratedAttribute]
private void set_Result(StringEnum`1<DependencySnapshotSubmissionResult> value);
    [CompilerGeneratedAttribute]
public string get_Message();
    [CompilerGeneratedAttribute]
private void set_Message(string value);
    internal string get_DebuggerDisplay();
}
public enum Octokit.DependencySnapshotSubmissionResult : Enum {
    public int value__;
    [ParameterAttribute]
public static DependencySnapshotSubmissionResult Success;
    [ParameterAttribute]
public static DependencySnapshotSubmissionResult Accepted;
    [ParameterAttribute]
public static DependencySnapshotSubmissionResult Invalid;
}
public class Octokit.DependencySubmissionClient : ApiClient {
    public DependencySubmissionClient(IApiConnection apiConnection);
    [ManualRouteAttribute("POST", "/repos/{owner}/{repo}/dependency-graph/snapshots")]
public sealed virtual Task`1<DependencySnapshotSubmission> Create(string owner, string name, NewDependencySnapshot snapshot);
    [ManualRouteAttribute("POST", "/repositories/{id}/dependency-graph/snapshots")]
public sealed virtual Task`1<DependencySnapshotSubmission> Create(long repositoryId, NewDependencySnapshot snapshot);
    private JsonObject ConvertToJsonObject(NewDependencySnapshot snapshot);
}
[DebuggerDisplayAttribute("{DebuggerDisplay,nq}")]
public class Octokit.DependencyVulnerability : object {
    [CompilerGeneratedAttribute]
private string <Severity>k__BackingField;
    [CompilerGeneratedAttribute]
private string <AdvisoryGhsaId>k__BackingField;
    [CompilerGeneratedAttribute]
private string <AdvisorySummary>k__BackingField;
    [CompilerGeneratedAttribute]
private string <AdvisoryUrl>k__BackingField;
    public string Severity { get; private set; }
    public string AdvisoryGhsaId { get; private set; }
    public string AdvisorySummary { get; private set; }
    public string AdvisoryUrl { get; private set; }
    internal string DebuggerDisplay { get; }
    public DependencyVulnerability(string severity, string advisoryGhsaId, string advisorySummary, string advisoryUrl);
    [CompilerGeneratedAttribute]
public string get_Severity();
    [CompilerGeneratedAttribute]
private void set_Severity(string value);
    [CompilerGeneratedAttribute]
public string get_AdvisoryGhsaId();
    [CompilerGeneratedAttribute]
private void set_AdvisoryGhsaId(string value);
    [CompilerGeneratedAttribute]
public string get_AdvisorySummary();
    [CompilerGeneratedAttribute]
private void set_AdvisorySummary(string value);
    [CompilerGeneratedAttribute]
public string get_AdvisoryUrl();
    [CompilerGeneratedAttribute]
private void set_AdvisoryUrl(string value);
    internal string get_DebuggerDisplay();
}
[DebuggerDisplayAttribute("{DebuggerDisplay,nq}")]
public class Octokit.DeployKey : object {
    [CompilerGeneratedAttribute]
private int <Id>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Key>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Url>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Title>k__BackingField;
    public int Id { get; private set; }
    public string Key { get; private set; }
    public string Url { get; private set; }
    public string Title { get; private set; }
    internal string DebuggerDisplay { get; }
    public DeployKey(int id, string key, string url, string title);
    [CompilerGeneratedAttribute]
public int get_Id();
    [CompilerGeneratedAttribute]
private void set_Id(int value);
    [CompilerGeneratedAttribute]
public string get_Key();
    [CompilerGeneratedAttribute]
private void set_Key(string value);
    [CompilerGeneratedAttribute]
public string get_Url();
    [CompilerGeneratedAttribute]
private void set_Url(string value);
    [CompilerGeneratedAttribute]
public string get_Title();
    [CompilerGeneratedAttribute]
private void set_Title(string value);
    internal string get_DebuggerDisplay();
}
[DebuggerDisplayAttribute("{DebuggerDisplay,nq}")]
public class Octokit.Deployment : object {
    [CompilerGeneratedAttribute]
private long <Id>k__BackingField;
    [CompilerGeneratedAttribute]
private string <NodeId>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Sha>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Ref>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Url>k__BackingField;
    [CompilerGeneratedAttribute]
private User <Creator>k__BackingField;
    [CompilerGeneratedAttribute]
private IReadOnlyDictionary`2<string, string> <Payload>k__BackingField;
    [CompilerGeneratedAttribute]
private DateTimeOffset <CreatedAt>k__BackingField;
    [CompilerGeneratedAttribute]
private DateTimeOffset <UpdatedAt>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Description>k__BackingField;
    [CompilerGeneratedAttribute]
private string <StatusesUrl>k__BackingField;
    [CompilerGeneratedAttribute]
private string <RepositoryUrl>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Environment>k__BackingField;
    [CompilerGeneratedAttribute]
private string <OriginalEnvironment>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <TransientEnvironment>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <ProductionEnvironment>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Task>k__BackingField;
    public long Id { get; private set; }
    public string NodeId { get; private set; }
    public string Sha { get; private set; }
    public string Ref { get; private set; }
    public string Url { get; private set; }
    public User Creator { get; private set; }
    public IReadOnlyDictionary`2<string, string> Payload { get; private set; }
    public DateTimeOffset CreatedAt { get; private set; }
    public DateTimeOffset UpdatedAt { get; private set; }
    public string Description { get; private set; }
    public string StatusesUrl { get; private set; }
    public string RepositoryUrl { get; private set; }
    public string Environment { get; private set; }
    public string OriginalEnvironment { get; private set; }
    public bool TransientEnvironment { get; private set; }
    public bool ProductionEnvironment { get; private set; }
    public string Task { get; private set; }
    internal string DebuggerDisplay { get; }
    public Deployment(long id, string nodeId, string sha, string ref, string url, User creator, IReadOnlyDictionary`2<string, string> payload, DateTimeOffset createdAt, DateTimeOffset updatedAt, string description, string statusesUrl, string repositoryUrl, string environment, string originalEnvironment, bool transientEnvironment, bool productionEnvironment, string task);
    [CompilerGeneratedAttribute]
public long get_Id();
    [CompilerGeneratedAttribute]
private void set_Id(long value);
    [CompilerGeneratedAttribute]
public string get_NodeId();
    [CompilerGeneratedAttribute]
private void set_NodeId(string value);
    [CompilerGeneratedAttribute]
public string get_Sha();
    [CompilerGeneratedAttribute]
private void set_Sha(string value);
    [CompilerGeneratedAttribute]
public string get_Ref();
    [CompilerGeneratedAttribute]
private void set_Ref(string value);
    [CompilerGeneratedAttribute]
public string get_Url();
    [CompilerGeneratedAttribute]
private void set_Url(string value);
    [CompilerGeneratedAttribute]
public User get_Creator();
    [CompilerGeneratedAttribute]
private void set_Creator(User value);
    [CompilerGeneratedAttribute]
public IReadOnlyDictionary`2<string, string> get_Payload();
    [CompilerGeneratedAttribute]
private void set_Payload(IReadOnlyDictionary`2<string, string> value);
    [CompilerGeneratedAttribute]
public DateTimeOffset get_CreatedAt();
    [CompilerGeneratedAttribute]
private void set_CreatedAt(DateTimeOffset value);
    [CompilerGeneratedAttribute]
public DateTimeOffset get_UpdatedAt();
    [CompilerGeneratedAttribute]
private void set_UpdatedAt(DateTimeOffset value);
    [CompilerGeneratedAttribute]
public string get_Description();
    [CompilerGeneratedAttribute]
private void set_Description(string value);
    [CompilerGeneratedAttribute]
public string get_StatusesUrl();
    [CompilerGeneratedAttribute]
private void set_StatusesUrl(string value);
    [CompilerGeneratedAttribute]
public string get_RepositoryUrl();
    [CompilerGeneratedAttribute]
private void set_RepositoryUrl(string value);
    [CompilerGeneratedAttribute]
public string get_Environment();
    [CompilerGeneratedAttribute]
private void set_Environment(string value);
    [CompilerGeneratedAttribute]
public string get_OriginalEnvironment();
    [CompilerGeneratedAttribute]
private void set_OriginalEnvironment(string value);
    [CompilerGeneratedAttribute]
public bool get_TransientEnvironment();
    [CompilerGeneratedAttribute]
private void set_TransientEnvironment(bool value);
    [CompilerGeneratedAttribute]
public bool get_ProductionEnvironment();
    [CompilerGeneratedAttribute]
private void set_ProductionEnvironment(bool value);
    [CompilerGeneratedAttribute]
public string get_Task();
    [CompilerGeneratedAttribute]
private void set_Task(string value);
    internal string get_DebuggerDisplay();
}
public class Octokit.DeploymentEnvironmentsClient : ApiClient {
    public DeploymentEnvironmentsClient(IApiConnection apiConnection);
    [ManualRouteAttribute("GET", "/repos/{owner}/{repo}/environments")]
public sealed virtual Task`1<DeploymentEnvironmentsResponse> GetAll(string owner, string name);
    [ManualRouteAttribute("GET", "/repositories/{id}/environments")]
public sealed virtual Task`1<DeploymentEnvironmentsResponse> GetAll(long repositoryId);
    [ManualRouteAttribute("GET", "/repos/{owner}/{repo}/environments")]
public sealed virtual Task`1<DeploymentEnvironmentsResponse> GetAll(string owner, string name, ApiOptions options);
    [ManualRouteAttribute("GET", "/repositories/{id}/environments")]
public sealed virtual Task`1<DeploymentEnvironmentsResponse> GetAll(long repositoryId, ApiOptions options);
}
public class Octokit.DeploymentsClient : ApiClient {
    [CompilerGeneratedAttribute]
private IDeploymentStatusClient <Status>k__BackingField;
    public IDeploymentStatusClient Status { get; public set; }
    public DeploymentsClient(IApiConnection apiConnection);
    [ManualRouteAttribute("GET", "/repos/{owner}/{repo}/deployments")]
public sealed virtual Task`1<IReadOnlyList`1<Deployment>> GetAll(string owner, string name);
    [ManualRouteAttribute("GET", "/repositories/{id}/deployments")]
public sealed virtual Task`1<IReadOnlyList`1<Deployment>> GetAll(long repositoryId);
    [ManualRouteAttribute("GET", "/repos/{owner}/{repo}/deployments")]
public sealed virtual Task`1<IReadOnlyList`1<Deployment>> GetAll(string owner, string name, ApiOptions options);
    [ManualRouteAttribute("GET", "/repositories/{id}/deployments")]
public sealed virtual Task`1<IReadOnlyList`1<Deployment>> GetAll(long repositoryId, ApiOptions options);
    [ManualRouteAttribute("POST", "/repos/{owner}/{repo}/deployments")]
public sealed virtual Task`1<Deployment> Create(string owner, string name, NewDeployment newDeployment);
    [ManualRouteAttribute("POST", "/repositories/{id}/deployments")]
public sealed virtual Task`1<Deployment> Create(long repositoryId, NewDeployment newDeployment);
    [CompilerGeneratedAttribute]
public sealed virtual IDeploymentStatusClient get_Status();
    [CompilerGeneratedAttribute]
public void set_Status(IDeploymentStatusClient value);
}
public enum Octokit.DeploymentState : Enum {
    public int value__;
    [ParameterAttribute]
public static DeploymentState Pending;
    [ParameterAttribute]
public static DeploymentState Success;
    [ParameterAttribute]
public static DeploymentState Error;
    [ParameterAttribute]
public static DeploymentState Failure;
    [ParameterAttribute]
public static DeploymentState Inactive;
    [ParameterAttribute]
public static DeploymentState InProgress;
    [ParameterAttribute]
public static DeploymentState Queued;
}
[DebuggerDisplayAttribute("{DebuggerDisplay,nq}")]
public class Octokit.DeploymentStatus : object {
    [CompilerGeneratedAttribute]
private long <Id>k__BackingField;
    [CompilerGeneratedAttribute]
private string <NodeId>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Url>k__BackingField;
    [CompilerGeneratedAttribute]
private StringEnum`1<DeploymentState> <State>k__BackingField;
    [CompilerGeneratedAttribute]
private User <Creator>k__BackingField;
    [CompilerGeneratedAttribute]
private IReadOnlyDictionary`2<string, string> <Payload>k__BackingField;
    [CompilerGeneratedAttribute]
private string <TargetUrl>k__BackingField;
    [CompilerGeneratedAttribute]
private string <LogUrl>k__BackingField;
    [CompilerGeneratedAttribute]
private string <EnvironmentUrl>k__BackingField;
    [CompilerGeneratedAttribute]
private DateTimeOffset <CreatedAt>k__BackingField;
    [CompilerGeneratedAttribute]
private DateTimeOffset <UpdatedAt>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Description>k__BackingField;
    public long Id { get; private set; }
    public string NodeId { get; private set; }
    public string Url { get; private set; }
    public StringEnum`1<DeploymentState> State { get; private set; }
    public User Creator { get; private set; }
    public IReadOnlyDictionary`2<string, string> Payload { get; private set; }
    public string TargetUrl { get; private set; }
    public string LogUrl { get; private set; }
    public string EnvironmentUrl { get; private set; }
    public DateTimeOffset CreatedAt { get; private set; }
    public DateTimeOffset UpdatedAt { get; private set; }
    public string Description { get; private set; }
    internal string DebuggerDisplay { get; }
    public DeploymentStatus(long id, string nodeId, string url, DeploymentState state, User creator, IReadOnlyDictionary`2<string, string> payload, string targetUrl, string logUrl, string environmentUrl, DateTimeOffset createdAt, DateTimeOffset updatedAt, string description);
    [CompilerGeneratedAttribute]
public long get_Id();
    [CompilerGeneratedAttribute]
private void set_Id(long value);
    [CompilerGeneratedAttribute]
public string get_NodeId();
    [CompilerGeneratedAttribute]
private void set_NodeId(string value);
    [CompilerGeneratedAttribute]
public string get_Url();
    [CompilerGeneratedAttribute]
private void set_Url(string value);
    [CompilerGeneratedAttribute]
public StringEnum`1<DeploymentState> get_State();
    [CompilerGeneratedAttribute]
private void set_State(StringEnum`1<DeploymentState> value);
    [CompilerGeneratedAttribute]
public User get_Creator();
    [CompilerGeneratedAttribute]
private void set_Creator(User value);
    [CompilerGeneratedAttribute]
public IReadOnlyDictionary`2<string, string> get_Payload();
    [CompilerGeneratedAttribute]
private void set_Payload(IReadOnlyDictionary`2<string, string> value);
    [CompilerGeneratedAttribute]
public string get_TargetUrl();
    [CompilerGeneratedAttribute]
private void set_TargetUrl(string value);
    [CompilerGeneratedAttribute]
public string get_LogUrl();
    [CompilerGeneratedAttribute]
private void set_LogUrl(string value);
    [CompilerGeneratedAttribute]
public string get_EnvironmentUrl();
    [CompilerGeneratedAttribute]
private void set_EnvironmentUrl(string value);
    [CompilerGeneratedAttribute]
public DateTimeOffset get_CreatedAt();
    [CompilerGeneratedAttribute]
private void set_CreatedAt(DateTimeOffset value);
    [CompilerGeneratedAttribute]
public DateTimeOffset get_UpdatedAt();
    [CompilerGeneratedAttribute]
private void set_UpdatedAt(DateTimeOffset value);
    [CompilerGeneratedAttribute]
public string get_Description();
    [CompilerGeneratedAttribute]
private void set_Description(string value);
    internal string get_DebuggerDisplay();
}
public class Octokit.DeploymentStatusClient : ApiClient {
    public DeploymentStatusClient(IApiConnection apiConnection);
    [ManualRouteAttribute("GET", "/repos/{owner}/{repo}/deployments/{deployment_id}/statuses")]
public sealed virtual Task`1<IReadOnlyList`1<DeploymentStatus>> GetAll(string owner, string name, long deploymentId);
    [ManualRouteAttribute("GET", "/repositories/{id}/deployments/{deployment_id}/statuses")]
public sealed virtual Task`1<IReadOnlyList`1<DeploymentStatus>> GetAll(long repositoryId, long deploymentId);
    [ManualRouteAttribute("GET", "/repos/{owner}/{repo}/deployments/{deployment_id}/statuses")]
public sealed virtual Task`1<IReadOnlyList`1<DeploymentStatus>> GetAll(string owner, string name, long deploymentId, ApiOptions options);
    [ManualRouteAttribute("GET", "/repositories/{id}/deployments/{deployment_id}/statuses")]
public sealed virtual Task`1<IReadOnlyList`1<DeploymentStatus>> GetAll(long repositoryId, long deploymentId, ApiOptions options);
    [ManualRouteAttribute("POST", "/repos/{owner}/{repo}/deployments/{deployment_id}/statuses")]
public sealed virtual Task`1<DeploymentStatus> Create(string owner, string name, long deploymentId, NewDeploymentStatus newDeploymentStatus);
    [ManualRouteAttribute("POST", "/repositories/{id}/deployments/{deployment_id}/statuses")]
public sealed virtual Task`1<DeploymentStatus> Create(long repositoryId, long deploymentId, NewDeploymentStatus newDeploymentStatus);
}
[DebuggerDisplayAttribute("{DebuggerDisplay,nq}")]
public class Octokit.DismissedReviewInfo : object {
    [CompilerGeneratedAttribute]
private StringEnum`1<PullRequestReviewState> <State>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ReviewId>k__BackingField;
    [CompilerGeneratedAttribute]
private string <DismissalMessage>k__BackingField;
    [CompilerGeneratedAttribute]
private string <DismissalCommitId>k__BackingField;
    public StringEnum`1<PullRequestReviewState> State { get; private set; }
    public string ReviewId { get; private set; }
    public string DismissalMessage { get; private set; }
    public string DismissalCommitId { get; private set; }
    internal string DebuggerDisplay { get; }
    public DismissedReviewInfo(PullRequestReviewState state, string reviewId, string dismissalMessage, string dismissalCommitId);
    [CompilerGeneratedAttribute]
public StringEnum`1<PullRequestReviewState> get_State();
    [CompilerGeneratedAttribute]
private void set_State(StringEnum`1<PullRequestReviewState> value);
    [CompilerGeneratedAttribute]
public string get_ReviewId();
    [CompilerGeneratedAttribute]
private void set_ReviewId(string value);
    [CompilerGeneratedAttribute]
public string get_DismissalMessage();
    [CompilerGeneratedAttribute]
private void set_DismissalMessage(string value);
    [CompilerGeneratedAttribute]
public string get_DismissalCommitId();
    [CompilerGeneratedAttribute]
private void set_DismissalCommitId(string value);
    internal string get_DebuggerDisplay();
}
[AttributeUsageAttribute("64")]
public class Octokit.DotNetSpecificRouteAttribute : Attribute {
}
[DebuggerDisplayAttribute("{DebuggerDisplay,nq}")]
public class Octokit.DraftPullRequestReviewComment : RequestParameters {
    [CompilerGeneratedAttribute]
private string <Body>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Path>k__BackingField;
    [CompilerGeneratedAttribute]
private int <Position>k__BackingField;
    public string Body { get; private set; }
    public string Path { get; private set; }
    public int Position { get; private set; }
    internal string DebuggerDisplay { get; }
    public DraftPullRequestReviewComment(string body, string path, int position);
    [CompilerGeneratedAttribute]
public string get_Body();
    [CompilerGeneratedAttribute]
private void set_Body(string value);
    [CompilerGeneratedAttribute]
public string get_Path();
    [CompilerGeneratedAttribute]
private void set_Path(string value);
    [CompilerGeneratedAttribute]
public int get_Position();
    [CompilerGeneratedAttribute]
private void set_Position(int value);
    internal string get_DebuggerDisplay();
}
[DebuggerDisplayAttribute("{DebuggerDisplay,nq}")]
public class Octokit.EditOrganizationHook : object {
    [CompilerGeneratedAttribute]
private IDictionary`2<string, string> <Config>k__BackingField;
    [CompilerGeneratedAttribute]
private IEnumerable`1<string> <Events>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<bool> <Active>k__BackingField;
    public IDictionary`2<string, string> Config { get; private set; }
    public IEnumerable`1<string> Events { get; public set; }
    public Nullable`1<bool> Active { get; public set; }
    internal string DebuggerDisplay { get; }
    public EditOrganizationHook(IDictionary`2<string, string> config);
    [CompilerGeneratedAttribute]
public IDictionary`2<string, string> get_Config();
    [CompilerGeneratedAttribute]
private void set_Config(IDictionary`2<string, string> value);
    [CompilerGeneratedAttribute]
public IEnumerable`1<string> get_Events();
    [CompilerGeneratedAttribute]
public void set_Events(IEnumerable`1<string> value);
    [CompilerGeneratedAttribute]
public Nullable`1<bool> get_Active();
    [CompilerGeneratedAttribute]
public void set_Active(Nullable`1<bool> value);
    internal string get_DebuggerDisplay();
}
[DebuggerDisplayAttribute("{DebuggerDisplay,nq}")]
public class Octokit.EditRepositoryHook : object {
    [CompilerGeneratedAttribute]
private IDictionary`2<string, string> <Config>k__BackingField;
    [CompilerGeneratedAttribute]
private IEnumerable`1<string> <Events>k__BackingField;
    [CompilerGeneratedAttribute]
private IEnumerable`1<string> <AddEvents>k__BackingField;
    [CompilerGeneratedAttribute]
private IEnumerable`1<string> <RemoveEvents>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<bool> <Active>k__BackingField;
    public IDictionary`2<string, string> Config { get; private set; }
    public IEnumerable`1<string> Events { get; public set; }
    [ParameterAttribute]
public IEnumerable`1<string> AddEvents { get; public set; }
    [ParameterAttribute]
public IEnumerable`1<string> RemoveEvents { get; public set; }
    public Nullable`1<bool> Active { get; public set; }
    internal string DebuggerDisplay { get; }
    public EditRepositoryHook(IDictionary`2<string, string> config);
    [CompilerGeneratedAttribute]
public IDictionary`2<string, string> get_Config();
    [CompilerGeneratedAttribute]
private void set_Config(IDictionary`2<string, string> value);
    [CompilerGeneratedAttribute]
public IEnumerable`1<string> get_Events();
    [CompilerGeneratedAttribute]
public void set_Events(IEnumerable`1<string> value);
    [CompilerGeneratedAttribute]
public IEnumerable`1<string> get_AddEvents();
    [CompilerGeneratedAttribute]
public void set_AddEvents(IEnumerable`1<string> value);
    [CompilerGeneratedAttribute]
public IEnumerable`1<string> get_RemoveEvents();
    [CompilerGeneratedAttribute]
public void set_RemoveEvents(IEnumerable`1<string> value);
    [CompilerGeneratedAttribute]
public Nullable`1<bool> get_Active();
    [CompilerGeneratedAttribute]
public void set_Active(Nullable`1<bool> value);
    internal string get_DebuggerDisplay();
}
[DebuggerDisplayAttribute("{DebuggerDisplay,nq}")]
public class Octokit.EmailAddress : object {
    [CompilerGeneratedAttribute]
private string <Email>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <Verified>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <Primary>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<StringEnum`1<EmailVisibility>> <Visibility>k__BackingField;
    public string Email { get; private set; }
    public bool Verified { get; private set; }
    public bool Primary { get; private set; }
    public Nullable`1<StringEnum`1<EmailVisibility>> Visibility { get; private set; }
    internal string DebuggerDisplay { get; }
    public EmailAddress(string email, bool verified, bool primary, EmailVisibility visibility);
    [CompilerGeneratedAttribute]
public string get_Email();
    [CompilerGeneratedAttribute]
private void set_Email(string value);
    [CompilerGeneratedAttribute]
public bool get_Verified();
    [CompilerGeneratedAttribute]
private void set_Verified(bool value);
    [CompilerGeneratedAttribute]
public bool get_Primary();
    [CompilerGeneratedAttribute]
private void set_Primary(bool value);
    [CompilerGeneratedAttribute]
public Nullable`1<StringEnum`1<EmailVisibility>> get_Visibility();
    [CompilerGeneratedAttribute]
private void set_Visibility(Nullable`1<StringEnum`1<EmailVisibility>> value);
    internal string get_DebuggerDisplay();
}
public enum Octokit.EmailVisibility : Enum {
    public int value__;
    [ParameterAttribute]
public static EmailVisibility Public;
    [ParameterAttribute]
public static EmailVisibility Private;
}
[DebuggerDisplayAttribute("{DebuggerDisplay,nq}")]
public class Octokit.Emoji : object {
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Url>k__BackingField;
    public string Name { get; private set; }
    public string Url { get; private set; }
    internal string DebuggerDisplay { get; }
    public Emoji(string name, string url);
    [CompilerGeneratedAttribute]
public string get_Name();
    [CompilerGeneratedAttribute]
private void set_Name(string value);
    [CompilerGeneratedAttribute]
public string get_Url();
    [CompilerGeneratedAttribute]
private void set_Url(string value);
    internal string get_DebuggerDisplay();
}
public class Octokit.EmojisClient : ApiClient {
    public EmojisClient(IApiConnection apiConnection);
    [ManualRouteAttribute("GET", "/emojis")]
public sealed virtual Task`1<IReadOnlyList`1<Emoji>> GetAllEmojis();
}
public enum Octokit.EncodingType : Enum {
    public int value__;
    [ParameterAttribute]
public static EncodingType Utf8;
    [ParameterAttribute]
public static EncodingType Base64;
}
[DebuggerDisplayAttribute("{DebuggerDisplay,nq}")]
public class Octokit.EnforceAdmins : object {
    [CompilerGeneratedAttribute]
private bool <Enabled>k__BackingField;
    public bool Enabled { get; private set; }
    internal string DebuggerDisplay { get; }
    public EnforceAdmins(bool enabled);
    [CompilerGeneratedAttribute]
public bool get_Enabled();
    [CompilerGeneratedAttribute]
private void set_Enabled(bool value);
    internal string get_DebuggerDisplay();
}
[DebuggerDisplayAttribute("{DebuggerDisplay,nq}")]
public class Octokit.EnforceLock : object {
    [CompilerGeneratedAttribute]
private bool <Enabled>k__BackingField;
    public bool Enabled { get; private set; }
    internal string DebuggerDisplay { get; }
    public EnforceLock(bool enabled);
    [CompilerGeneratedAttribute]
public bool get_Enabled();
    [CompilerGeneratedAttribute]
private void set_Enabled(bool value);
    internal string get_DebuggerDisplay();
}
internal static class Octokit.Ensure : object {
    public static void ArgumentNotNull(object value, string name);
    public static void ArgumentNotNullOrDefault(T value, string name);
    public static void ArgumentNotNullOrEmptyString(string value, string name);
    public static void GreaterThanZero(TimeSpan value, string name);
    public static void GreaterThanZero(int value, string name);
    public static void ArgumentNotNullOrEmptyEnumerable(IEnumerable`1<T> value, string name);
    public static void ApiOptionsNotNull(ApiOptions& options);
}
public class Octokit.EnterpriseAdminStatsClient : ApiClient {
    public EnterpriseAdminStatsClient(IApiConnection apiConnection);
    [ManualRouteAttribute("GET", "/enterprise/stats/issues")]
public sealed virtual Task`1<AdminStatsIssues> GetStatisticsIssues();
    [ManualRouteAttribute("GET", "/enterprise/stats/hooks")]
public sealed virtual Task`1<AdminStatsHooks> GetStatisticsHooks();
    [ManualRouteAttribute("GET", "/enterprise/stats/milestones")]
public sealed virtual Task`1<AdminStatsMilestones> GetStatisticsMilestones();
    [ManualRouteAttribute("GET", "/enterprise/stats/orgs")]
public sealed virtual Task`1<AdminStatsOrgs> GetStatisticsOrgs();
    [ManualRouteAttribute("GET", "/enterprise/stats/comments")]
public sealed virtual Task`1<AdminStatsComments> GetStatisticsComments();
    [ManualRouteAttribute("GET", "/enterprise/stats/pages")]
public sealed virtual Task`1<AdminStatsPages> GetStatisticsPages();
    [ManualRouteAttribute("GET", "/enterprise/stats/users")]
public sealed virtual Task`1<AdminStatsUsers> GetStatisticsUsers();
    [ManualRouteAttribute("GET", "/enterprise/stats/comments")]
public sealed virtual Task`1<AdminStatsGists> GetStatisticsGists();
    [ManualRouteAttribute("GET", "/enterprise/stats/pulls")]
public sealed virtual Task`1<AdminStatsPulls> GetStatisticsPulls();
    [ManualRouteAttribute("GET", "/enterprise/stats/repos")]
public sealed virtual Task`1<AdminStatsRepos> GetStatisticsRepos();
    [ManualRouteAttribute("GET", "/enterprise/stats/all")]
public sealed virtual Task`1<AdminStats> GetStatisticsAll();
}
public class Octokit.EnterpriseAuditLogClient : ApiClient {
    public EnterpriseAuditLogClient(IApiConnection apiConnection);
    [ManualRouteAttribute("GET", "/enterprise/audit-log")]
public sealed virtual Task`1<IReadOnlyList`1<AuditLogEvent>> GetAll(string enterprise);
    [ManualRouteAttribute("GET", "/enterprise/audit-log")]
public sealed virtual Task`1<IReadOnlyList`1<AuditLogEvent>> GetAll(string enterprise, AuditLogRequest request);
    [ManualRouteAttribute("GET", "/enterprise/audit-log")]
public sealed virtual Task`1<IReadOnlyList`1<AuditLogEvent>> GetAll(string enterprise, AuditLogApiOptions auditLogApiOptions);
    [ManualRouteAttribute("GET", "/enterprise/audit-log")]
public sealed virtual Task`1<IReadOnlyList`1<AuditLogEvent>> GetAll(string enterprise, AuditLogRequest request, AuditLogApiOptions auditLogApiOptions);
    [ManualRouteAttribute("GET", "/enterprise/audit-log")]
public sealed virtual Task`1<IReadOnlyList`1<object>> GetAllJson(string enterprise);
    [ManualRouteAttribute("GET", "/enterprise/audit-log")]
public sealed virtual Task`1<IReadOnlyList`1<object>> GetAllJson(string enterprise, AuditLogRequest request);
    [ManualRouteAttribute("GET", "/enterprise/audit-log")]
public sealed virtual Task`1<IReadOnlyList`1<object>> GetAllJson(string enterprise, AuditLogApiOptions auditLogApiOptions);
    [ManualRouteAttribute("GET", "/enterprise/audit-log")]
public sealed virtual Task`1<IReadOnlyList`1<object>> GetAllJson(string enterprise, AuditLogRequest request, AuditLogApiOptions auditLogApiOptions);
    private static Func`2<object, object> GeneratePreProcessFunction(AuditLogApiOptions auditLogApiOptions, ApiOptionsExtended options);
}
public class Octokit.EnterpriseClient : ApiClient {
    [CompilerGeneratedAttribute]
private IEnterpriseAdminStatsClient <AdminStats>k__BackingField;
    [CompilerGeneratedAttribute]
private IEnterpriseAuditLogClient <AuditLog>k__BackingField;
    [CompilerGeneratedAttribute]
private IEnterpriseLdapClient <Ldap>k__BackingField;
    [CompilerGeneratedAttribute]
private IEnterpriseLicenseClient <License>k__BackingField;
    [CompilerGeneratedAttribute]
private IEnterpriseManagementConsoleClient <ManagementConsole>k__BackingField;
    [CompilerGeneratedAttribute]
private IEnterpriseOrganizationClient <Organization>k__BackingField;
    [CompilerGeneratedAttribute]
private IEnterpriseSearchIndexingClient <SearchIndexing>k__BackingField;
    [CompilerGeneratedAttribute]
private IEnterprisePreReceiveEnvironmentsClient <PreReceiveEnvironment>k__BackingField;
    [CompilerGeneratedAttribute]
private IEnterprisePreReceiveHooksClient <PreReceiveHook>k__BackingField;
    public IEnterpriseAdminStatsClient AdminStats { get; private set; }
    public IEnterpriseAuditLogClient AuditLog { get; }
    public IEnterpriseLdapClient Ldap { get; private set; }
    public IEnterpriseLicenseClient License { get; private set; }
    public IEnterpriseManagementConsoleClient ManagementConsole { get; private set; }
    public IEnterpriseOrganizationClient Organization { get; private set; }
    public IEnterpriseSearchIndexingClient SearchIndexing { get; private set; }
    public IEnterprisePreReceiveEnvironmentsClient PreReceiveEnvironment { get; private set; }
    public IEnterprisePreReceiveHooksClient PreReceiveHook { get; private set; }
    public EnterpriseClient(IApiConnection apiConnection);
    [CompilerGeneratedAttribute]
public sealed virtual IEnterpriseAdminStatsClient get_AdminStats();
    [CompilerGeneratedAttribute]
private void set_AdminStats(IEnterpriseAdminStatsClient value);
    [CompilerGeneratedAttribute]
public sealed virtual IEnterpriseAuditLogClient get_AuditLog();
    [CompilerGeneratedAttribute]
public sealed virtual IEnterpriseLdapClient get_Ldap();
    [CompilerGeneratedAttribute]
private void set_Ldap(IEnterpriseLdapClient value);
    [CompilerGeneratedAttribute]
public sealed virtual IEnterpriseLicenseClient get_License();
    [CompilerGeneratedAttribute]
private void set_License(IEnterpriseLicenseClient value);
    [CompilerGeneratedAttribute]
public sealed virtual IEnterpriseManagementConsoleClient get_ManagementConsole();
    [CompilerGeneratedAttribute]
private void set_ManagementConsole(IEnterpriseManagementConsoleClient value);
    [CompilerGeneratedAttribute]
public sealed virtual IEnterpriseOrganizationClient get_Organization();
    [CompilerGeneratedAttribute]
private void set_Organization(IEnterpriseOrganizationClient value);
    [CompilerGeneratedAttribute]
public sealed virtual IEnterpriseSearchIndexingClient get_SearchIndexing();
    [CompilerGeneratedAttribute]
private void set_SearchIndexing(IEnterpriseSearchIndexingClient value);
    [CompilerGeneratedAttribute]
public sealed virtual IEnterprisePreReceiveEnvironmentsClient get_PreReceiveEnvironment();
    [CompilerGeneratedAttribute]
private void set_PreReceiveEnvironment(IEnterprisePreReceiveEnvironmentsClient value);
    [CompilerGeneratedAttribute]
public sealed virtual IEnterprisePreReceiveHooksClient get_PreReceiveHook();
    [CompilerGeneratedAttribute]
private void set_PreReceiveHook(IEnterprisePreReceiveHooksClient value);
}
public class Octokit.EnterpriseLdapClient : ApiClient {
    public EnterpriseLdapClient(IApiConnection apiConnection);
    [ManualRouteAttribute("PATCH", "/admin/ldap/users/{username}/mapping")]
public sealed virtual Task`1<User> UpdateUserMapping(string userName, NewLdapMapping newLdapMapping);
    [AsyncStateMachineAttribute("Octokit.EnterpriseLdapClient/<QueueSyncUserMapping>d__2")]
[ManualRouteAttribute("POST", "/admin/ldap/users/{username}/sync")]
public sealed virtual Task`1<LdapSyncResponse> QueueSyncUserMapping(string userName);
    [ManualRouteAttribute("PATCH", "/admin/ldap/teams/{team_id}/mapping")]
public sealed virtual Task`1<Team> UpdateTeamMapping(long teamId, NewLdapMapping newLdapMapping);
    [AsyncStateMachineAttribute("Octokit.EnterpriseLdapClient/<QueueSyncTeamMapping>d__4")]
[ManualRouteAttribute("POST", "/admin/ldap/teams/{team_id}/sync")]
public sealed virtual Task`1<LdapSyncResponse> QueueSyncTeamMapping(long teamId);
}
public class Octokit.EnterpriseLicenseClient : ApiClient {
    public EnterpriseLicenseClient(IApiConnection apiConnection);
    [ManualRouteAttribute("GET", "/enterprise/settings/license")]
public sealed virtual Task`1<LicenseInfo> Get();
}
public class Octokit.EnterpriseManagementConsoleClient : ApiClient {
    public EnterpriseManagementConsoleClient(IApiConnection apiConnection);
    [ManualRouteAttribute("GET", "/setup/api/maintenance")]
public sealed virtual Task`1<MaintenanceModeResponse> GetMaintenanceMode(string managementConsolePassword);
    [ManualRouteAttribute("POST", "/setup/api/maintenance")]
public sealed virtual Task`1<MaintenanceModeResponse> EditMaintenanceMode(UpdateMaintenanceRequest maintenance, string managementConsolePassword);
}
public class Octokit.EnterpriseOrganizationClient : ApiClient {
    public EnterpriseOrganizationClient(IApiConnection apiConnection);
    [ManualRouteAttribute("POST", "/admin/organizations")]
public sealed virtual Task`1<Organization> Create(NewOrganization newOrganization);
}
public class Octokit.EnterprisePreReceiveEnvironmentsClient : ApiClient {
    public EnterprisePreReceiveEnvironmentsClient(IApiConnection apiConnection);
    [ManualRouteAttribute("GET", "/admin/pre-receive-environments")]
public sealed virtual Task`1<IReadOnlyList`1<PreReceiveEnvironment>> GetAll();
    [ManualRouteAttribute("GET", "/admin/pre-receive-environments")]
public sealed virtual Task`1<IReadOnlyList`1<PreReceiveEnvironment>> GetAll(ApiOptions options);
    [ManualRouteAttribute("GET", "/admin/pre-receive-environments/{pre_receive_environment_id}")]
public sealed virtual Task`1<PreReceiveEnvironment> Get(long preReceiveEnvironmentId);
    [ManualRouteAttribute("POST", "/admin/pre-receive-environments")]
public sealed virtual Task`1<PreReceiveEnvironment> Create(NewPreReceiveEnvironment newPreReceiveEnvironment);
    [ManualRouteAttribute("PATCH", "/admin/pre-receive-environments/{pre_receive_environment_id}")]
public sealed virtual Task`1<PreReceiveEnvironment> Edit(long preReceiveEnvironmentId, UpdatePreReceiveEnvironment updatePreReceiveEnvironment);
    [ManualRouteAttribute("DELETE", "/admin/pre-receive-environments/{pre_receive_environment_id}")]
public sealed virtual Task Delete(long preReceiveEnvironmentId);
    [ManualRouteAttribute("GET", "/admin/pre-receive-environments/{pre_receive_environment_id}/downloads/latest")]
public sealed virtual Task`1<PreReceiveEnvironmentDownload> DownloadStatus(long preReceiveEnvironmentId);
    [ManualRouteAttribute("POST", "/admin/pre-receive-environments/{pre_receive_environment_id}/downloads")]
public sealed virtual Task`1<PreReceiveEnvironmentDownload> TriggerDownload(long preReceiveEnvironmentId);
}
public class Octokit.EnterprisePreReceiveHooksClient : ApiClient {
    public EnterprisePreReceiveHooksClient(IApiConnection apiConnection);
    [ManualRouteAttribute("GET", "/admin/pre-receive-hooks")]
public sealed virtual Task`1<IReadOnlyList`1<PreReceiveHook>> GetAll();
    [ManualRouteAttribute("GET", "/admin/pre-receive-hooks")]
public sealed virtual Task`1<IReadOnlyList`1<PreReceiveHook>> GetAll(ApiOptions options);
    [ManualRouteAttribute("GET", "/admin/pre-receive-hooks/{pre_receive_hook_id}")]
public sealed virtual Task`1<PreReceiveHook> Get(long preReceiveHookId);
    [ManualRouteAttribute("POST", "/admin/pre-receive-hooks")]
public sealed virtual Task`1<PreReceiveHook> Create(NewPreReceiveHook newPreReceiveHook);
    [ManualRouteAttribute("PATCH", "/admin/pre-receive-hooks/{pre_receive_hook_id}")]
public sealed virtual Task`1<PreReceiveHook> Edit(long preReceiveHookId, UpdatePreReceiveHook updatePreReceiveHook);
    [ManualRouteAttribute("DELETE", "/admin/pre-receive-hooks/{pre_receive_hook_id}")]
public sealed virtual Task Delete(long preReceiveHookId);
}
public class Octokit.EnterpriseProbe : object {
    private static Uri endPoint;
    private ProductHeaderValue productHeader;
    private IHttpClient httpClient;
    public EnterpriseProbe(ProductHeaderValue productInformation);
    public EnterpriseProbe(ProductHeaderValue productInformation, IHttpClient httpClient);
    private static EnterpriseProbe();
    [AsyncStateMachineAttribute("Octokit.EnterpriseProbe/<Probe>d__5")]
public sealed virtual Task`1<EnterpriseProbeResult> Probe(Uri enterpriseBaseUrl);
    private static bool IsEnterpriseResponse(IResponse response);
}
public enum Octokit.EnterpriseProbeResult : Enum {
    public int value__;
    public static EnterpriseProbeResult Ok;
    public static EnterpriseProbeResult NotFound;
    public static EnterpriseProbeResult Failed;
}
public class Octokit.EnterpriseSearchIndexingClient : ApiClient {
    public EnterpriseSearchIndexingClient(IApiConnection apiConnection);
    [ManualRouteAttribute("POST", "/staff/indexing_jobs")]
public sealed virtual Task`1<SearchIndexingResponse> Queue(string owner);
    [ManualRouteAttribute("POST", "/staff/indexing_jobs")]
public sealed virtual Task`1<SearchIndexingResponse> Queue(string owner, string repository);
    [ManualRouteAttribute("POST", "/staff/indexing_jobs")]
public sealed virtual Task`1<SearchIndexingResponse> QueueAll(string owner);
    [ManualRouteAttribute("POST", "/staff/indexing_jobs")]
public sealed virtual Task`1<SearchIndexingResponse> QueueAllIssues(string owner, string repository);
    [ManualRouteAttribute("POST", "/staff/indexing_jobs")]
public sealed virtual Task`1<SearchIndexingResponse> QueueAllIssues(string owner);
    [ManualRouteAttribute("POST", "/staff/indexing_jobs")]
public sealed virtual Task`1<SearchIndexingResponse> QueueAllCode(string owner, string repository);
    [ManualRouteAttribute("POST", "/staff/indexing_jobs")]
public sealed virtual Task`1<SearchIndexingResponse> QueueAllCode(string owner);
}
[ExtensionAttribute]
internal static class Octokit.EnumExtensions : object {
    [ExtensionAttribute]
internal static string ToParameter(Enum prop);
    [ExtensionAttribute]
internal static bool HasParameter(Enum prop);
}
[DebuggerDisplayAttribute("{DebuggerDisplay,nq}")]
public class Octokit.EnvironmentApproval : object {
    [CompilerGeneratedAttribute]
private long <Id>k__BackingField;
    [CompilerGeneratedAttribute]
private string <NodeId>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Url>k__BackingField;
    [CompilerGeneratedAttribute]
private string <HtmlUrl>k__BackingField;
    [CompilerGeneratedAttribute]
private DateTimeOffset <CreatedAt>k__BackingField;
    [CompilerGeneratedAttribute]
private DateTimeOffset <UpdatedAt>k__BackingField;
    public long Id { get; private set; }
    public string NodeId { get; private set; }
    public string Name { get; private set; }
    public string Url { get; private set; }
    public string HtmlUrl { get; private set; }
    public DateTimeOffset CreatedAt { get; private set; }
    public DateTimeOffset UpdatedAt { get; private set; }
    internal string DebuggerDisplay { get; }
    public EnvironmentApproval(long id, string nodeId, string name, string url, string htmlUrl, DateTimeOffset createdAt, DateTimeOffset updatedAt);
    [CompilerGeneratedAttribute]
public long get_Id();
    [CompilerGeneratedAttribute]
private void set_Id(long value);
    [CompilerGeneratedAttribute]
public string get_NodeId();
    [CompilerGeneratedAttribute]
private void set_NodeId(string value);
    [CompilerGeneratedAttribute]
public string get_Name();
    [CompilerGeneratedAttribute]
private void set_Name(string value);
    [CompilerGeneratedAttribute]
public string get_Url();
    [CompilerGeneratedAttribute]
private void set_Url(string value);
    [CompilerGeneratedAttribute]
public string get_HtmlUrl();
    [CompilerGeneratedAttribute]
private void set_HtmlUrl(string value);
    [CompilerGeneratedAttribute]
public DateTimeOffset get_CreatedAt();
    [CompilerGeneratedAttribute]
private void set_CreatedAt(DateTimeOffset value);
    [CompilerGeneratedAttribute]
public DateTimeOffset get_UpdatedAt();
    [CompilerGeneratedAttribute]
private void set_UpdatedAt(DateTimeOffset value);
    internal string get_DebuggerDisplay();
}
[DebuggerDisplayAttribute("{DebuggerDisplay,nq}")]
public class Octokit.EnvironmentApprovals : object {
    [CompilerGeneratedAttribute]
private IReadOnlyList`1<EnvironmentApproval> <Environments>k__BackingField;
    [CompilerGeneratedAttribute]
private User <User>k__BackingField;
    [CompilerGeneratedAttribute]
private StringEnum`1<EnvironmentApprovalState> <State>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Comment>k__BackingField;
    public IReadOnlyList`1<EnvironmentApproval> Environments { get; private set; }
    public User User { get; private set; }
    public StringEnum`1<EnvironmentApprovalState> State { get; private set; }
    public string Comment { get; private set; }
    internal string DebuggerDisplay { get; }
    public EnvironmentApprovals(IReadOnlyList`1<EnvironmentApproval> environments, User user, EnvironmentApprovalState state, string comment);
    [CompilerGeneratedAttribute]
public IReadOnlyList`1<EnvironmentApproval> get_Environments();
    [CompilerGeneratedAttribute]
private void set_Environments(IReadOnlyList`1<EnvironmentApproval> value);
    [CompilerGeneratedAttribute]
public User get_User();
    [CompilerGeneratedAttribute]
private void set_User(User value);
    [CompilerGeneratedAttribute]
public StringEnum`1<EnvironmentApprovalState> get_State();
    [CompilerGeneratedAttribute]
private void set_State(StringEnum`1<EnvironmentApprovalState> value);
    [CompilerGeneratedAttribute]
public string get_Comment();
    [CompilerGeneratedAttribute]
private void set_Comment(string value);
    internal string get_DebuggerDisplay();
}
public enum Octokit.EnvironmentApprovalState : Enum {
    public int value__;
    [ParameterAttribute]
public static EnvironmentApprovalState Approved;
    [ParameterAttribute]
public static EnvironmentApprovalState Rejected;
}
[DebuggerDisplayAttribute("{DebuggerDisplay,nq}")]
public class Octokit.EventInfo : object {
    [CompilerGeneratedAttribute]
private long <Id>k__BackingField;
    [CompilerGeneratedAttribute]
private string <NodeId>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Url>k__BackingField;
    [CompilerGeneratedAttribute]
private User <Actor>k__BackingField;
    [CompilerGeneratedAttribute]
private User <Assignee>k__BackingField;
    [CompilerGeneratedAttribute]
private Label <Label>k__BackingField;
    [CompilerGeneratedAttribute]
private StringEnum`1<EventInfoState> <Event>k__BackingField;
    [CompilerGeneratedAttribute]
private string <CommitId>k__BackingField;
    [CompilerGeneratedAttribute]
private DateTimeOffset <CreatedAt>k__BackingField;
    public long Id { get; private set; }
    public string NodeId { get; private set; }
    public string Url { get; private set; }
    public User Actor { get; private set; }
    public User Assignee { get; private set; }
    public Label Label { get; private set; }
    public StringEnum`1<EventInfoState> Event { get; private set; }
    public string CommitId { get; private set; }
    public DateTimeOffset CreatedAt { get; private set; }
    internal string DebuggerDisplay { get; }
    public EventInfo(long id, string nodeId, string url, User actor, User assignee, Label label, EventInfoState event, string commitId, DateTimeOffset createdAt);
    [CompilerGeneratedAttribute]
public long get_Id();
    [CompilerGeneratedAttribute]
private void set_Id(long value);
    [CompilerGeneratedAttribute]
public string get_NodeId();
    [CompilerGeneratedAttribute]
private void set_NodeId(string value);
    [CompilerGeneratedAttribute]
public string get_Url();
    [CompilerGeneratedAttribute]
private void set_Url(string value);
    [CompilerGeneratedAttribute]
public User get_Actor();
    [CompilerGeneratedAttribute]
private void set_Actor(User value);
    [CompilerGeneratedAttribute]
public User get_Assignee();
    [CompilerGeneratedAttribute]
private void set_Assignee(User value);
    [CompilerGeneratedAttribute]
public Label get_Label();
    [CompilerGeneratedAttribute]
private void set_Label(Label value);
    [CompilerGeneratedAttribute]
public StringEnum`1<EventInfoState> get_Event();
    [CompilerGeneratedAttribute]
private void set_Event(StringEnum`1<EventInfoState> value);
    [CompilerGeneratedAttribute]
public string get_CommitId();
    [CompilerGeneratedAttribute]
private void set_CommitId(string value);
    [CompilerGeneratedAttribute]
public DateTimeOffset get_CreatedAt();
    [CompilerGeneratedAttribute]
private void set_CreatedAt(DateTimeOffset value);
    internal string get_DebuggerDisplay();
}
public enum Octokit.EventInfoState : Enum {
    public int value__;
    [ParameterAttribute]
public static EventInfoState AddedToProject;
    [ParameterAttribute]
public static EventInfoState Assigned;
    [ParameterAttribute]
public static EventInfoState AutomaticBaseChangeFailed;
    [ParameterAttribute]
public static EventInfoState AutomaticBaseChangeSucceeded;
    [ParameterAttribute]
public static EventInfoState BaseRefChanged;
    [ParameterAttribute]
public static EventInfoState Closed;
    [ParameterAttribute]
public static EventInfoState Commented;
    [ParameterAttribute]
public static EventInfoState Committed;
    [ParameterAttribute]
public static EventInfoState Connected;
    [ParameterAttribute]
public static EventInfoState ConvertToDraft;
    [ParameterAttribute]
public static EventInfoState ConvertedNoteToIssue;
    [ParameterAttribute]
public static EventInfoState Crossreferenced;
    [ParameterAttribute]
public static EventInfoState Demilestoned;
    [ParameterAttribute]
public static EventInfoState Deployed;
    [ParameterAttribute]
public static EventInfoState DeploymentEnvironmentChanged;
    [ParameterAttribute]
public static EventInfoState Disconnected;
    [ParameterAttribute]
public static EventInfoState HeadRefDeleted;
    [ParameterAttribute]
public static EventInfoState HeadRefRestored;
    [ParameterAttribute]
public static EventInfoState HeadRefForcePushed;
    [ParameterAttribute]
public static EventInfoState Labeled;
    [ParameterAttribute]
public static EventInfoState Locked;
    [ParameterAttribute]
public static EventInfoState Mentioned;
    [ParameterAttribute]
public static EventInfoState MarkedAsDuplicate;
    [ParameterAttribute]
public static EventInfoState Merged;
    [ParameterAttribute]
public static EventInfoState Milestoned;
    [ParameterAttribute]
public static EventInfoState MovedColumnsInProject;
    [ParameterAttribute]
public static EventInfoState Pinned;
    [ParameterAttribute]
public static EventInfoState ReadyForReview;
    [ParameterAttribute]
public static EventInfoState Referenced;
    [ParameterAttribute]
public static EventInfoState RemovedFromProject;
    [ParameterAttribute]
public static EventInfoState Renamed;
    [ParameterAttribute]
public static EventInfoState Reopened;
    [ParameterAttribute]
public static EventInfoState ReviewDismissed;
    [ParameterAttribute]
public static EventInfoState ReviewRequested;
    [ParameterAttribute]
public static EventInfoState ReviewRequestRemoved;
    [ParameterAttribute]
public static EventInfoState Reviewed;
    [ParameterAttribute]
public static EventInfoState Subscribed;
    [ParameterAttribute]
public static EventInfoState Transferred;
    [ParameterAttribute]
public static EventInfoState Unassigned;
    [ParameterAttribute]
public static EventInfoState Unlabeled;
    [ParameterAttribute]
public static EventInfoState Unlocked;
    [ParameterAttribute]
public static EventInfoState UnmarkedAsDuplicate;
    [ParameterAttribute]
public static EventInfoState Unpinned;
    [ParameterAttribute]
public static EventInfoState Unsubscribed;
    [ParameterAttribute]
public static EventInfoState UserBlocked;
    [ParameterAttribute]
public static EventInfoState LineCommented;
    [ParameterAttribute]
public static EventInfoState CommitCommented;
    [ParameterAttribute]
public static EventInfoState CommentDeleted;
}
public class Octokit.EventsClient : ApiClient {
    public EventsClient(IApiConnection apiConnection);
    [ManualRouteAttribute("GET", "/events")]
public sealed virtual Task`1<IReadOnlyList`1<Activity>> GetAll();
    [ManualRouteAttribute("GET", "/events")]
public sealed virtual Task`1<IReadOnlyList`1<Activity>> GetAll(ApiOptions options);
    [ManualRouteAttribute("GET", "/repos/{owner}/{repo}/events")]
public sealed virtual Task`1<IReadOnlyList`1<Activity>> GetAllForRepository(string owner, string name);
    [ManualRouteAttribute("GET", "/repositories/{id}/events")]
public sealed virtual Task`1<IReadOnlyList`1<Activity>> GetAllForRepository(long repositoryId);
    [ManualRouteAttribute("GET", "/repos/{owner}/{repo}/events")]
public sealed virtual Task`1<IReadOnlyList`1<Activity>> GetAllForRepository(string owner, string name, ApiOptions options);
    [ManualRouteAttribute("GET", "/repositories/{id}/events")]
public sealed virtual Task`1<IReadOnlyList`1<Activity>> GetAllForRepository(long repositoryId, ApiOptions options);
    [ManualRouteAttribute("GET", "/repos/{owner}/{repo}/issues/events")]
public sealed virtual Task`1<IReadOnlyList`1<IssueEvent>> GetAllIssuesForRepository(string owner, string name);
    [ManualRouteAttribute("GET", "/repositories/{id}/issues/events")]
public sealed virtual Task`1<IReadOnlyList`1<IssueEvent>> GetAllIssuesForRepository(long repositoryId);
    [ManualRouteAttribute("GET", "/repos/{owner}/{repo}/issues/events")]
public sealed virtual Task`1<IReadOnlyList`1<IssueEvent>> GetAllIssuesForRepository(string owner, string name, ApiOptions options);
    [ManualRouteAttribute("GET", "/repositories/{id}/issues/events")]
public sealed virtual Task`1<IReadOnlyList`1<IssueEvent>> GetAllIssuesForRepository(long repositoryId, ApiOptions options);
    [ManualRouteAttribute("GET", "/networks/{owner}/{name}/events")]
public sealed virtual Task`1<IReadOnlyList`1<Activity>> GetAllForRepositoryNetwork(string owner, string name);
    [ManualRouteAttribute("GET", "/networks/{owner}/{name}/events")]
public sealed virtual Task`1<IReadOnlyList`1<Activity>> GetAllForRepositoryNetwork(string owner, string name, ApiOptions options);
    [ManualRouteAttribute("GET", "/orgs/{org}/events")]
public sealed virtual Task`1<IReadOnlyList`1<Activity>> GetAllForOrganization(string organization);
    [ManualRouteAttribute("GET", "/orgs/{org}/events")]
public sealed virtual Task`1<IReadOnlyList`1<Activity>> GetAllForOrganization(string organization, ApiOptions options);
    [ManualRouteAttribute("GET", "/users/{username}/received_events")]
public sealed virtual Task`1<IReadOnlyList`1<Activity>> GetAllUserReceived(string user);
    [ManualRouteAttribute("GET", "/users/{username}/received_events")]
public sealed virtual Task`1<IReadOnlyList`1<Activity>> GetAllUserReceived(string user, ApiOptions options);
    [ManualRouteAttribute("GET", "/users/{username}/received_events/public")]
public sealed virtual Task`1<IReadOnlyList`1<Activity>> GetAllUserReceivedPublic(string user);
    [ManualRouteAttribute("GET", "/users/{username}/received_events/public")]
public sealed virtual Task`1<IReadOnlyList`1<Activity>> GetAllUserReceivedPublic(string user, ApiOptions options);
    [ManualRouteAttribute("GET", "/users/{username}/events")]
public sealed virtual Task`1<IReadOnlyList`1<Activity>> GetAllUserPerformed(string user);
    [ManualRouteAttribute("GET", "/users/{username}/events")]
public sealed virtual Task`1<IReadOnlyList`1<Activity>> GetAllUserPerformed(string user, ApiOptions options);
    [ManualRouteAttribute("GET", "/users/{username}/events/public")]
public sealed virtual Task`1<IReadOnlyList`1<Activity>> GetAllUserPerformedPublic(string user);
    [ManualRouteAttribute("GET", "/users/{username}/events/public")]
public sealed virtual Task`1<IReadOnlyList`1<Activity>> GetAllUserPerformedPublic(string user, ApiOptions options);
    [ManualRouteAttribute("GET", "/users/{username}/events/orgs/{org}")]
public sealed virtual Task`1<IReadOnlyList`1<Activity>> GetAllForAnOrganization(string user, string organization);
    [ManualRouteAttribute("GET", "/users/{username}/events/orgs/{org}")]
public sealed virtual Task`1<IReadOnlyList`1<Activity>> GetAllForAnOrganization(string user, string organization, ApiOptions options);
}
[AttributeUsageAttribute("4")]
public class Octokit.ExcludeFromCtorWithAllPropertiesConventionTestAttribute : Attribute {
    [CompilerGeneratedAttribute]
private String[] <Properties>k__BackingField;
    public String[] Properties { get; private set; }
    public ExcludeFromCtorWithAllPropertiesConventionTestAttribute(String[] properties);
    [CompilerGeneratedAttribute]
public String[] get_Properties();
    [CompilerGeneratedAttribute]
private void set_Properties(String[] value);
}
[AttributeUsageAttribute("64")]
public class Octokit.ExcludeFromPaginationApiOptionsConventionTestAttribute : Attribute {
    [CompilerGeneratedAttribute]
private string <Note>k__BackingField;
    public string Note { get; private set; }
    public ExcludeFromPaginationApiOptionsConventionTestAttribute(string note);
    [CompilerGeneratedAttribute]
public string get_Note();
    [CompilerGeneratedAttribute]
private void set_Note(string value);
}
[AttributeUsageAttribute("64")]
public class Octokit.ExcludeFromPaginationNamingConventionTestAttribute : Attribute {
    [CompilerGeneratedAttribute]
private string <Note>k__BackingField;
    public string Note { get; private set; }
    public ExcludeFromPaginationNamingConventionTestAttribute(string note);
    [CompilerGeneratedAttribute]
public string get_Note();
    [CompilerGeneratedAttribute]
private void set_Note(string value);
}
[DebuggerDisplayAttribute("{DebuggerDisplay,nq}")]
public class Octokit.Feed : object {
    [CompilerGeneratedAttribute]
private string <TimelineUrl>k__BackingField;
    [CompilerGeneratedAttribute]
private string <UserUrl>k__BackingField;
    [CompilerGeneratedAttribute]
private string <CurrentUserPublicUrl>k__BackingField;
    [CompilerGeneratedAttribute]
private string <CurrentUserUrl>k__BackingField;
    [CompilerGeneratedAttribute]
private string <CurrentUserActorUrl>k__BackingField;
    [CompilerGeneratedAttribute]
private string <CurrentUserOrganizationUrl>k__BackingField;
    [CompilerGeneratedAttribute]
private FeedLinks <Links>k__BackingField;
    public string TimelineUrl { get; private set; }
    public string UserUrl { get; private set; }
    public string CurrentUserPublicUrl { get; private set; }
    public string CurrentUserUrl { get; private set; }
    public string CurrentUserActorUrl { get; private set; }
    public string CurrentUserOrganizationUrl { get; private set; }
    [ParameterAttribute]
public FeedLinks Links { get; private set; }
    internal string DebuggerDisplay { get; }
    public Feed(string timelineUrl, string userUrl, string currentUserPublicUrl, string currentUserUrl, string currentUserActorUrl, string currentUserOrganizationUrl, FeedLinks links);
    [CompilerGeneratedAttribute]
public string get_TimelineUrl();
    [CompilerGeneratedAttribute]
private void set_TimelineUrl(string value);
    [CompilerGeneratedAttribute]
public string get_UserUrl();
    [CompilerGeneratedAttribute]
private void set_UserUrl(string value);
    [CompilerGeneratedAttribute]
public string get_CurrentUserPublicUrl();
    [CompilerGeneratedAttribute]
private void set_CurrentUserPublicUrl(string value);
    [CompilerGeneratedAttribute]
public string get_CurrentUserUrl();
    [CompilerGeneratedAttribute]
private void set_CurrentUserUrl(string value);
    [CompilerGeneratedAttribute]
public string get_CurrentUserActorUrl();
    [CompilerGeneratedAttribute]
private void set_CurrentUserActorUrl(string value);
    [CompilerGeneratedAttribute]
public string get_CurrentUserOrganizationUrl();
    [CompilerGeneratedAttribute]
private void set_CurrentUserOrganizationUrl(string value);
    [CompilerGeneratedAttribute]
public FeedLinks get_Links();
    [CompilerGeneratedAttribute]
private void set_Links(FeedLinks value);
    internal string get_DebuggerDisplay();
}
[DebuggerDisplayAttribute("{DebuggerDisplay,nq}")]
public class Octokit.FeedLink : object {
    [CompilerGeneratedAttribute]
private string <Href>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Type>k__BackingField;
    public string Href { get; private set; }
    public string Type { get; private set; }
    internal string DebuggerDisplay { get; }
    public FeedLink(string href, string type);
    [CompilerGeneratedAttribute]
public string get_Href();
    [CompilerGeneratedAttribute]
private void set_Href(string value);
    [CompilerGeneratedAttribute]
public string get_Type();
    [CompilerGeneratedAttribute]
private void set_Type(string value);
    internal string get_DebuggerDisplay();
}
[DebuggerDisplayAttribute("{DebuggerDisplay,nq}")]
public class Octokit.FeedLinks : object {
    [CompilerGeneratedAttribute]
private FeedLink <Timeline>k__BackingField;
    [CompilerGeneratedAttribute]
private FeedLink <User>k__BackingField;
    [CompilerGeneratedAttribute]
private FeedLink <CurrentUserPublic>k__BackingField;
    [CompilerGeneratedAttribute]
private FeedLink <CurrentUser>k__BackingField;
    [CompilerGeneratedAttribute]
private FeedLink <CurrentUserActor>k__BackingField;
    [CompilerGeneratedAttribute]
private FeedLink <CurrentUserOrganization>k__BackingField;
    public FeedLink Timeline { get; private set; }
    public FeedLink User { get; private set; }
    public FeedLink CurrentUserPublic { get; private set; }
    public FeedLink CurrentUser { get; private set; }
    public FeedLink CurrentUserActor { get; private set; }
    public FeedLink CurrentUserOrganization { get; private set; }
    internal string DebuggerDisplay { get; }
    public FeedLinks(FeedLink timeline, FeedLink user, FeedLink currentUserPublic, FeedLink currentUser, FeedLink currentUserActor, FeedLink currentUserOrganization);
    [CompilerGeneratedAttribute]
public FeedLink get_Timeline();
    [CompilerGeneratedAttribute]
private void set_Timeline(FeedLink value);
    [CompilerGeneratedAttribute]
public FeedLink get_User();
    [CompilerGeneratedAttribute]
private void set_User(FeedLink value);
    [CompilerGeneratedAttribute]
public FeedLink get_CurrentUserPublic();
    [CompilerGeneratedAttribute]
private void set_CurrentUserPublic(FeedLink value);
    [CompilerGeneratedAttribute]
public FeedLink get_CurrentUser();
    [CompilerGeneratedAttribute]
private void set_CurrentUser(FeedLink value);
    [CompilerGeneratedAttribute]
public FeedLink get_CurrentUserActor();
    [CompilerGeneratedAttribute]
private void set_CurrentUserActor(FeedLink value);
    [CompilerGeneratedAttribute]
public FeedLink get_CurrentUserOrganization();
    [CompilerGeneratedAttribute]
private void set_CurrentUserOrganization(FeedLink value);
    internal string get_DebuggerDisplay();
}
public class Octokit.FeedsClient : ApiClient {
    public FeedsClient(IApiConnection apiConnection);
    [ManualRouteAttribute("GET", "/feeds")]
public sealed virtual Task`1<Feed> GetFeeds();
}
public static class Octokit.FileMode : object {
    public static string File;
    public static string Executable;
    public static string Subdirectory;
    public static string Submodule;
    public static string Symlink;
}
public class Octokit.FollowersClient : ApiClient {
    public FollowersClient(IApiConnection apiConnection);
    [ManualRouteAttribute("GET", "/user/followers")]
public sealed virtual Task`1<IReadOnlyList`1<User>> GetAllForCurrent();
    [ManualRouteAttribute("GET", "/user/followers")]
public sealed virtual Task`1<IReadOnlyList`1<User>> GetAllForCurrent(ApiOptions options);
    [ManualRouteAttribute("GET", "/users/{username}/followers")]
public sealed virtual Task`1<IReadOnlyList`1<User>> GetAll(string login);
    [ManualRouteAttribute("GET", "/users/{username}/followers")]
public sealed virtual Task`1<IReadOnlyList`1<User>> GetAll(string login, ApiOptions options);
    [ManualRouteAttribute("GET", "/user/following")]
public sealed virtual Task`1<IReadOnlyList`1<User>> GetAllFollowingForCurrent();
    [ManualRouteAttribute("GET", "/user/following")]
public sealed virtual Task`1<IReadOnlyList`1<User>> GetAllFollowingForCurrent(ApiOptions options);
    [ManualRouteAttribute("GET", "/users/{username}/following")]
public sealed virtual Task`1<IReadOnlyList`1<User>> GetAllFollowing(string login);
    [ManualRouteAttribute("GET", "/users/{username}/following")]
public sealed virtual Task`1<IReadOnlyList`1<User>> GetAllFollowing(string login, ApiOptions options);
    [AsyncStateMachineAttribute("Octokit.FollowersClient/<IsFollowingForCurrent>d__9")]
[ManualRouteAttribute("GET", "/user/following/{username}")]
public sealed virtual Task`1<bool> IsFollowingForCurrent(string following);
    [AsyncStateMachineAttribute("Octokit.FollowersClient/<IsFollowing>d__10")]
[ManualRouteAttribute("GET", "/users/{username}/following/{target_user}")]
public sealed virtual Task`1<bool> IsFollowing(string login, string following);
    [AsyncStateMachineAttribute("Octokit.FollowersClient/<Follow>d__11")]
[ManualRouteAttribute("PUT", "/user/following/{username}")]
public sealed virtual Task`1<bool> Follow(string login);
    [ManualRouteAttribute("DELETE", "/user/following/{username}")]
public sealed virtual Task Unfollow(string login);
}
public class Octokit.ForbiddenException : ApiException {
    public string Message { get; }
    public ForbiddenException(IResponse response);
    public ForbiddenException(IResponse response, Exception innerException);
    protected ForbiddenException(SerializationInfo info, StreamingContext context);
    public virtual string get_Message();
}
[DebuggerDisplayAttribute("{DebuggerDisplay,nq}")]
public class Octokit.ForkEventPayload : ActivityPayload {
    [CompilerGeneratedAttribute]
private Repository <Forkee>k__BackingField;
    public Repository Forkee { get; private set; }
    [CompilerGeneratedAttribute]
public Repository get_Forkee();
    [CompilerGeneratedAttribute]
private void set_Forkee(Repository value);
}
public enum Octokit.ForkQualifier : Enum {
    public int value__;
    [ParameterAttribute]
public static ForkQualifier OnlyForks;
    [ParameterAttribute]
public static ForkQualifier IncludeForks;
}
public abstract class Octokit.FormUrlEncodedParameters : object {
    public string ToFormUrlEncodedParameterString();
    private static List`1<JsonParameter> GetPropertyParametersForType(Type type);
}
[DebuggerDisplayAttribute("{DebuggerDisplay,nq}")]
public class Octokit.GeneratedReleaseNotes : object {
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Body>k__BackingField;
    public string Name { get; private set; }
    public string Body { get; private set; }
    internal string DebuggerDisplay { get; }
    public GeneratedReleaseNotes(string name, string body);
    [CompilerGeneratedAttribute]
public string get_Name();
    [CompilerGeneratedAttribute]
private void set_Name(string value);
    [CompilerGeneratedAttribute]
public string get_Body();
    [CompilerGeneratedAttribute]
private void set_Body(string value);
    internal string get_DebuggerDisplay();
}
[AttributeUsageAttribute("64")]
public class Octokit.GeneratedRouteAttribute : Attribute {
    [CompilerGeneratedAttribute]
private string <Verb>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Path>k__BackingField;
    public string Verb { get; private set; }
    public string Path { get; private set; }
    public GeneratedRouteAttribute(string verb, string path);
    [CompilerGeneratedAttribute]
public string get_Verb();
    [CompilerGeneratedAttribute]
private void set_Verb(string value);
    [CompilerGeneratedAttribute]
public string get_Path();
    [CompilerGeneratedAttribute]
private void set_Path(string value);
}
[DebuggerDisplayAttribute("{DebuggerDisplay,nq}")]
public class Octokit.GenerateReleaseNotesRequest : object {
    [CompilerGeneratedAttribute]
private string <TagName>k__BackingField;
    [CompilerGeneratedAttribute]
private string <TargetCommitish>k__BackingField;
    [CompilerGeneratedAttribute]
private string <PreviousTagName>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ConfigurationFilePath>k__BackingField;
    public string TagName { get; private set; }
    public string TargetCommitish { get; public set; }
    public string PreviousTagName { get; public set; }
    public string ConfigurationFilePath { get; public set; }
    internal string DebuggerDisplay { get; }
    public GenerateReleaseNotesRequest(string tagName);
    [CompilerGeneratedAttribute]
public string get_TagName();
    [CompilerGeneratedAttribute]
private void set_TagName(string value);
    [CompilerGeneratedAttribute]
public string get_TargetCommitish();
    [CompilerGeneratedAttribute]
public void set_TargetCommitish(string value);
    [CompilerGeneratedAttribute]
public string get_PreviousTagName();
    [CompilerGeneratedAttribute]
public void set_PreviousTagName(string value);
    [CompilerGeneratedAttribute]
public string get_ConfigurationFilePath();
    [CompilerGeneratedAttribute]
public void set_ConfigurationFilePath(string value);
    internal string get_DebuggerDisplay();
}
[DebuggerDisplayAttribute("{DebuggerDisplay,nq}")]
public class Octokit.Gist : object {
    [CompilerGeneratedAttribute]
private string <Url>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Id>k__BackingField;
    [CompilerGeneratedAttribute]
private string <NodeId>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Description>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <Public>k__BackingField;
    [CompilerGeneratedAttribute]
private User <Owner>k__BackingField;
    [CompilerGeneratedAttribute]
private IReadOnlyDictionary`2<string, GistFile> <Files>k__BackingField;
    [CompilerGeneratedAttribute]
private int <Comments>k__BackingField;
    [CompilerGeneratedAttribute]
private string <CommentsUrl>k__BackingField;
    [CompilerGeneratedAttribute]
private string <HtmlUrl>k__BackingField;
    [CompilerGeneratedAttribute]
private string <GitPullUrl>k__BackingField;
    [CompilerGeneratedAttribute]
private string <GitPushUrl>k__BackingField;
    [CompilerGeneratedAttribute]
private DateTimeOffset <CreatedAt>k__BackingField;
    [CompilerGeneratedAttribute]
private DateTimeOffset <UpdatedAt>k__BackingField;
    [CompilerGeneratedAttribute]
private IReadOnlyList`1<GistFork> <Forks>k__BackingField;
    [CompilerGeneratedAttribute]
private IReadOnlyList`1<GistHistory> <History>k__BackingField;
    public string Url { get; private set; }
    public string Id { get; private set; }
    public string NodeId { get; private set; }
    public string Description { get; private set; }
    public bool Public { get; private set; }
    public User Owner { get; private set; }
    public IReadOnlyDictionary`2<string, GistFile> Files { get; private set; }
    public int Comments { get; private set; }
    public string CommentsUrl { get; private set; }
    public string HtmlUrl { get; private set; }
    public string GitPullUrl { get; private set; }
    public string GitPushUrl { get; private set; }
    public DateTimeOffset CreatedAt { get; private set; }
    public DateTimeOffset UpdatedAt { get; private set; }
    public IReadOnlyList`1<GistFork> Forks { get; private set; }
    public IReadOnlyList`1<GistHistory> History { get; private set; }
    internal string DebuggerDisplay { get; }
    public Gist(string url, string id, string nodeId, string description, bool public, User owner, IReadOnlyDictionary`2<string, GistFile> files, int comments, string commentsUrl, string htmlUrl, string gitPullUrl, string gitPushUrl, DateTimeOffset createdAt, DateTimeOffset updatedAt, IReadOnlyList`1<GistFork> forks, IReadOnlyList`1<GistHistory> history);
    [CompilerGeneratedAttribute]
public string get_Url();
    [CompilerGeneratedAttribute]
private void set_Url(string value);
    [CompilerGeneratedAttribute]
public string get_Id();
    [CompilerGeneratedAttribute]
private void set_Id(string value);
    [CompilerGeneratedAttribute]
public string get_NodeId();
    [CompilerGeneratedAttribute]
private void set_NodeId(string value);
    [CompilerGeneratedAttribute]
public string get_Description();
    [CompilerGeneratedAttribute]
private void set_Description(string value);
    [CompilerGeneratedAttribute]
public bool get_Public();
    [CompilerGeneratedAttribute]
private void set_Public(bool value);
    [CompilerGeneratedAttribute]
public User get_Owner();
    [CompilerGeneratedAttribute]
private void set_Owner(User value);
    [CompilerGeneratedAttribute]
public IReadOnlyDictionary`2<string, GistFile> get_Files();
    [CompilerGeneratedAttribute]
private void set_Files(IReadOnlyDictionary`2<string, GistFile> value);
    [CompilerGeneratedAttribute]
public int get_Comments();
    [CompilerGeneratedAttribute]
private void set_Comments(int value);
    [CompilerGeneratedAttribute]
public string get_CommentsUrl();
    [CompilerGeneratedAttribute]
private void set_CommentsUrl(string value);
    [CompilerGeneratedAttribute]
public string get_HtmlUrl();
    [CompilerGeneratedAttribute]
private void set_HtmlUrl(string value);
    [CompilerGeneratedAttribute]
public string get_GitPullUrl();
    [CompilerGeneratedAttribute]
private void set_GitPullUrl(string value);
    [CompilerGeneratedAttribute]
public string get_GitPushUrl();
    [CompilerGeneratedAttribute]
private void set_GitPushUrl(string value);
    [CompilerGeneratedAttribute]
public DateTimeOffset get_CreatedAt();
    [CompilerGeneratedAttribute]
private void set_CreatedAt(DateTimeOffset value);
    [CompilerGeneratedAttribute]
public DateTimeOffset get_UpdatedAt();
    [CompilerGeneratedAttribute]
private void set_UpdatedAt(DateTimeOffset value);
    [CompilerGeneratedAttribute]
public IReadOnlyList`1<GistFork> get_Forks();
    [CompilerGeneratedAttribute]
private void set_Forks(IReadOnlyList`1<GistFork> value);
    [CompilerGeneratedAttribute]
public IReadOnlyList`1<GistHistory> get_History();
    [CompilerGeneratedAttribute]
private void set_History(IReadOnlyList`1<GistHistory> value);
    internal string get_DebuggerDisplay();
}
[DebuggerDisplayAttribute("{DebuggerDisplay,nq}")]
public class Octokit.GistChangeStatus : object {
    [CompilerGeneratedAttribute]
private int <Deletions>k__BackingField;
    [CompilerGeneratedAttribute]
private int <Additions>k__BackingField;
    [CompilerGeneratedAttribute]
private int <Total>k__BackingField;
    public int Deletions { get; private set; }
    public int Additions { get; private set; }
    public int Total { get; private set; }
    internal string DebuggerDisplay { get; }
    public GistChangeStatus(int deletions, int additions, int total);
    [CompilerGeneratedAttribute]
public int get_Deletions();
    [CompilerGeneratedAttribute]
private void set_Deletions(int value);
    [CompilerGeneratedAttribute]
public int get_Additions();
    [CompilerGeneratedAttribute]
private void set_Additions(int value);
    [CompilerGeneratedAttribute]
public int get_Total();
    [CompilerGeneratedAttribute]
private void set_Total(int value);
    internal string get_DebuggerDisplay();
}
[DebuggerDisplayAttribute("{DebuggerDisplay,nq}")]
public class Octokit.GistComment : object {
    [CompilerGeneratedAttribute]
private long <Id>k__BackingField;
    [CompilerGeneratedAttribute]
private string <NodeId>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Url>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Body>k__BackingField;
    [CompilerGeneratedAttribute]
private User <User>k__BackingField;
    [CompilerGeneratedAttribute]
private DateTimeOffset <CreatedAt>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<DateTimeOffset> <UpdatedAt>k__BackingField;
    public long Id { get; private set; }
    public string NodeId { get; private set; }
    public string Url { get; private set; }
    public string Body { get; private set; }
    public User User { get; private set; }
    public DateTimeOffset CreatedAt { get; private set; }
    public Nullable`1<DateTimeOffset> UpdatedAt { get; private set; }
    internal string DebuggerDisplay { get; }
    public GistComment(long id, string nodeId, string url, string body, User user, DateTimeOffset createdAt, Nullable`1<DateTimeOffset> updatedAt);
    [CompilerGeneratedAttribute]
public long get_Id();
    [CompilerGeneratedAttribute]
private void set_Id(long value);
    [CompilerGeneratedAttribute]
public string get_NodeId();
    [CompilerGeneratedAttribute]
private void set_NodeId(string value);
    [CompilerGeneratedAttribute]
public string get_Url();
    [CompilerGeneratedAttribute]
private void set_Url(string value);
    [CompilerGeneratedAttribute]
public string get_Body();
    [CompilerGeneratedAttribute]
private void set_Body(string value);
    [CompilerGeneratedAttribute]
public User get_User();
    [CompilerGeneratedAttribute]
private void set_User(User value);
    [CompilerGeneratedAttribute]
public DateTimeOffset get_CreatedAt();
    [CompilerGeneratedAttribute]
private void set_CreatedAt(DateTimeOffset value);
    [CompilerGeneratedAttribute]
public Nullable`1<DateTimeOffset> get_UpdatedAt();
    [CompilerGeneratedAttribute]
private void set_UpdatedAt(Nullable`1<DateTimeOffset> value);
    internal string get_DebuggerDisplay();
}
public class Octokit.GistCommentsClient : ApiClient {
    public GistCommentsClient(IApiConnection apiConnection);
    [ManualRouteAttribute("GET", "/gists/{gist_id}/comments/{comment_id}")]
public sealed virtual Task`1<GistComment> Get(string gistId, long commentId);
    [ManualRouteAttribute("GET", "/gists/{gist_id}/comments")]
public sealed virtual Task`1<IReadOnlyList`1<GistComment>> GetAllForGist(string gistId);
    [ManualRouteAttribute("GET", "/gists/{gist_id}/comments")]
public sealed virtual Task`1<IReadOnlyList`1<GistComment>> GetAllForGist(string gistId, ApiOptions options);
    [ManualRouteAttribute("POST", "/gists/{gist_id}/comments")]
public sealed virtual Task`1<GistComment> Create(string gistId, string comment);
    [ManualRouteAttribute("PATCH", "/gists/{gist_id}/comments/{comment_id}")]
public sealed virtual Task`1<GistComment> Update(string gistId, long commentId, string comment);
    [ManualRouteAttribute("DELETE", "/gists/{gist_id}/comments/{comment_id}")]
public sealed virtual Task Delete(string gistId, long commentId);
}
[DebuggerDisplayAttribute("{DebuggerDisplay,nq}")]
public class Octokit.GistFile : object {
    [CompilerGeneratedAttribute]
private int <Size>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Filename>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Type>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Language>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Content>k__BackingField;
    [CompilerGeneratedAttribute]
private string <RawUrl>k__BackingField;
    public int Size { get; private set; }
    public string Filename { get; private set; }
    public string Type { get; private set; }
    public string Language { get; private set; }
    public string Content { get; private set; }
    public string RawUrl { get; private set; }
    internal string DebuggerDisplay { get; }
    public GistFile(int size, string filename, string type, string language, string content, string rawUrl);
    [CompilerGeneratedAttribute]
public int get_Size();
    [CompilerGeneratedAttribute]
private void set_Size(int value);
    [CompilerGeneratedAttribute]
public string get_Filename();
    [CompilerGeneratedAttribute]
private void set_Filename(string value);
    [CompilerGeneratedAttribute]
public string get_Type();
    [CompilerGeneratedAttribute]
private void set_Type(string value);
    [CompilerGeneratedAttribute]
public string get_Language();
    [CompilerGeneratedAttribute]
private void set_Language(string value);
    [CompilerGeneratedAttribute]
public string get_Content();
    [CompilerGeneratedAttribute]
private void set_Content(string value);
    [CompilerGeneratedAttribute]
public string get_RawUrl();
    [CompilerGeneratedAttribute]
private void set_RawUrl(string value);
    internal string get_DebuggerDisplay();
}
[DebuggerDisplayAttribute("{DebuggerDisplay,nq}")]
public class Octokit.GistFileUpdate : object {
    [CompilerGeneratedAttribute]
private string <NewFileName>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Content>k__BackingField;
    public string NewFileName { get; public set; }
    public string Content { get; public set; }
    internal string DebuggerDisplay { get; }
    [CompilerGeneratedAttribute]
public string get_NewFileName();
    [CompilerGeneratedAttribute]
public void set_NewFileName(string value);
    [CompilerGeneratedAttribute]
public string get_Content();
    [CompilerGeneratedAttribute]
public void set_Content(string value);
    internal string get_DebuggerDisplay();
}
[DebuggerDisplayAttribute("{DebuggerDisplay,nq}")]
public class Octokit.GistFork : object {
    [CompilerGeneratedAttribute]
private string <NodeId>k__BackingField;
    [CompilerGeneratedAttribute]
private User <User>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Url>k__BackingField;
    [CompilerGeneratedAttribute]
private DateTimeOffset <CreatedAt>k__BackingField;
    public string NodeId { get; private set; }
    public User User { get; private set; }
    public string Url { get; private set; }
    public DateTimeOffset CreatedAt { get; private set; }
    internal string DebuggerDisplay { get; }
    public GistFork(string nodeId, User user, string url, DateTimeOffset createdAt);
    [CompilerGeneratedAttribute]
public string get_NodeId();
    [CompilerGeneratedAttribute]
private void set_NodeId(string value);
    [CompilerGeneratedAttribute]
public User get_User();
    [CompilerGeneratedAttribute]
private void set_User(User value);
    [CompilerGeneratedAttribute]
public string get_Url();
    [CompilerGeneratedAttribute]
private void set_Url(string value);
    [CompilerGeneratedAttribute]
public DateTimeOffset get_CreatedAt();
    [CompilerGeneratedAttribute]
private void set_CreatedAt(DateTimeOffset value);
    internal string get_DebuggerDisplay();
}
[DebuggerDisplayAttribute("{DebuggerDisplay,nq}")]
public class Octokit.GistHistory : object {
    [CompilerGeneratedAttribute]
private string <Url>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Version>k__BackingField;
    [CompilerGeneratedAttribute]
private User <User>k__BackingField;
    [CompilerGeneratedAttribute]
private GistChangeStatus <ChangeStatus>k__BackingField;
    [CompilerGeneratedAttribute]
private DateTimeOffset <CommittedAt>k__BackingField;
    public string Url { get; private set; }
    public string Version { get; private set; }
    public User User { get; private set; }
    public GistChangeStatus ChangeStatus { get; private set; }
    public DateTimeOffset CommittedAt { get; private set; }
    internal string DebuggerDisplay { get; }
    public GistHistory(string url, string version, User user, GistChangeStatus changeStatus, DateTimeOffset committedAt);
    [CompilerGeneratedAttribute]
public string get_Url();
    [CompilerGeneratedAttribute]
private void set_Url(string value);
    [CompilerGeneratedAttribute]
public string get_Version();
    [CompilerGeneratedAttribute]
private void set_Version(string value);
    [CompilerGeneratedAttribute]
public User get_User();
    [CompilerGeneratedAttribute]
private void set_User(User value);
    [CompilerGeneratedAttribute]
public GistChangeStatus get_ChangeStatus();
    [CompilerGeneratedAttribute]
private void set_ChangeStatus(GistChangeStatus value);
    [CompilerGeneratedAttribute]
public DateTimeOffset get_CommittedAt();
    [CompilerGeneratedAttribute]
private void set_CommittedAt(DateTimeOffset value);
    internal string get_DebuggerDisplay();
}
[DebuggerDisplayAttribute("{DebuggerDisplay,nq}")]
public class Octokit.GistRequest : RequestParameters {
    [CompilerGeneratedAttribute]
private DateTimeOffset <Since>k__BackingField;
    public DateTimeOffset Since { get; public set; }
    internal string DebuggerDisplay { get; }
    public GistRequest(DateTimeOffset since);
    [CompilerGeneratedAttribute]
public DateTimeOffset get_Since();
    [CompilerGeneratedAttribute]
public void set_Since(DateTimeOffset value);
    internal string get_DebuggerDisplay();
}
public class Octokit.GistsClient : ApiClient {
    [CompilerGeneratedAttribute]
private IGistCommentsClient <Comment>k__BackingField;
    public IGistCommentsClient Comment { get; public set; }
    public GistsClient(IApiConnection apiConnection);
    [CompilerGeneratedAttribute]
public sealed virtual IGistCommentsClient get_Comment();
    [CompilerGeneratedAttribute]
public sealed virtual void set_Comment(IGistCommentsClient value);
    [ManualRouteAttribute("GET", "/gists/{gist_id}")]
public sealed virtual Task`1<Gist> Get(string gistId);
    [ManualRouteAttribute("GET", "/gists")]
public sealed virtual Task`1<Gist> Create(NewGist newGist);
    [ManualRouteAttribute("POST", "/gists/{gist_id}/forks")]
public sealed virtual Task`1<Gist> Fork(string gistId);
    [ManualRouteAttribute("DELETE", "/gists/{gist_id}")]
public sealed virtual Task Delete(string gistId);
    [ManualRouteAttribute("GET", "/gists")]
public sealed virtual Task`1<IReadOnlyList`1<Gist>> GetAll();
    [ManualRouteAttribute("GET", "/gists")]
public sealed virtual Task`1<IReadOnlyList`1<Gist>> GetAll(ApiOptions options);
    [ManualRouteAttribute("GET", "/gists")]
public sealed virtual Task`1<IReadOnlyList`1<Gist>> GetAll(DateTimeOffset since);
    [ManualRouteAttribute("GET", "/gists")]
public sealed virtual Task`1<IReadOnlyList`1<Gist>> GetAll(DateTimeOffset since, ApiOptions options);
    [ManualRouteAttribute("GET", "/gists/public")]
public sealed virtual Task`1<IReadOnlyList`1<Gist>> GetAllPublic();
    [ManualRouteAttribute("GET", "/gists/public")]
public sealed virtual Task`1<IReadOnlyList`1<Gist>> GetAllPublic(ApiOptions options);
    [ManualRouteAttribute("GET", "/gists/public")]
public sealed virtual Task`1<IReadOnlyList`1<Gist>> GetAllPublic(DateTimeOffset since);
    [ManualRouteAttribute("GET", "/gists/public")]
public sealed virtual Task`1<IReadOnlyList`1<Gist>> GetAllPublic(DateTimeOffset since, ApiOptions options);
    [ManualRouteAttribute("GET", "/gists/starred")]
public sealed virtual Task`1<IReadOnlyList`1<Gist>> GetAllStarred();
    [ManualRouteAttribute("GET", "/gists/starred")]
public sealed virtual Task`1<IReadOnlyList`1<Gist>> GetAllStarred(ApiOptions options);
    [ManualRouteAttribute("GET", "/gists/starred")]
public sealed virtual Task`1<IReadOnlyList`1<Gist>> GetAllStarred(DateTimeOffset since);
    [ManualRouteAttribute("GET", "/gists/starred")]
public sealed virtual Task`1<IReadOnlyList`1<Gist>> GetAllStarred(DateTimeOffset since, ApiOptions options);
    [ManualRouteAttribute("GET", "/users/{username}/gists")]
public sealed virtual Task`1<IReadOnlyList`1<Gist>> GetAllForUser(string user);
    [ManualRouteAttribute("GET", "/users/{username}/gists")]
public sealed virtual Task`1<IReadOnlyList`1<Gist>> GetAllForUser(string user, ApiOptions options);
    [ManualRouteAttribute("GET", "/users/{username}/gists")]
public sealed virtual Task`1<IReadOnlyList`1<Gist>> GetAllForUser(string user, DateTimeOffset since);
    [ManualRouteAttribute("GET", "/users/{username}/gists")]
public sealed virtual Task`1<IReadOnlyList`1<Gist>> GetAllForUser(string user, DateTimeOffset since, ApiOptions options);
    [ManualRouteAttribute("GET", "/gists/{gist_id}/commits")]
public sealed virtual Task`1<IReadOnlyList`1<GistHistory>> GetAllCommits(string gistId);
    [ManualRouteAttribute("GET", "/gists/{gist_id}/commits")]
public sealed virtual Task`1<IReadOnlyList`1<GistHistory>> GetAllCommits(string gistId, ApiOptions options);
    [ManualRouteAttribute("GET", "/gists/{gist_id}/forks")]
public sealed virtual Task`1<IReadOnlyList`1<GistFork>> GetAllForks(string gistId);
    [ManualRouteAttribute("GET", "/gists/{gist_id}/forks")]
public sealed virtual Task`1<IReadOnlyList`1<GistFork>> GetAllForks(string gistId, ApiOptions options);
    [ManualRouteAttribute("PATCH", "/gists/{gist_id}")]
public sealed virtual Task`1<Gist> Edit(string gistId, GistUpdate gistUpdate);
    [ManualRouteAttribute("PUT", "/gists/{gist_id}/star")]
public sealed virtual Task Star(string gistId);
    [ManualRouteAttribute("DELETE", "/gists/{gist_id}/star")]
public sealed virtual Task Unstar(string gistId);
    [AsyncStateMachineAttribute("Octokit.GistsClient/<IsStarred>d__32")]
[ManualRouteAttribute("GET", "/gists/{gist_id}/star")]
public sealed virtual Task`1<bool> IsStarred(string gistId);
}
[DebuggerDisplayAttribute("{DebuggerDisplay,nq}")]
public class Octokit.GistUpdate : object {
    [CompilerGeneratedAttribute]
private string <Description>k__BackingField;
    [CompilerGeneratedAttribute]
private IDictionary`2<string, GistFileUpdate> <Files>k__BackingField;
    public string Description { get; public set; }
    public IDictionary`2<string, GistFileUpdate> Files { get; private set; }
    internal string DebuggerDisplay { get; }
    [CompilerGeneratedAttribute]
public string get_Description();
    [CompilerGeneratedAttribute]
public void set_Description(string value);
    [CompilerGeneratedAttribute]
public IDictionary`2<string, GistFileUpdate> get_Files();
    [CompilerGeneratedAttribute]
private void set_Files(IDictionary`2<string, GistFileUpdate> value);
    internal string get_DebuggerDisplay();
}
public class Octokit.GitDatabaseClient : ApiClient {
    [CompilerGeneratedAttribute]
private IBlobsClient <Blob>k__BackingField;
    [CompilerGeneratedAttribute]
private ITreesClient <Tree>k__BackingField;
    [CompilerGeneratedAttribute]
private ITagsClient <Tag>k__BackingField;
    [CompilerGeneratedAttribute]
private ICommitsClient <Commit>k__BackingField;
    [CompilerGeneratedAttribute]
private IReferencesClient <Reference>k__BackingField;
    public IBlobsClient Blob { get; private set; }
    public ITreesClient Tree { get; private set; }
    public ITagsClient Tag { get; private set; }
    public ICommitsClient Commit { get; private set; }
    public IReferencesClient Reference { get; private set; }
    public GitDatabaseClient(IApiConnection apiConnection);
    [CompilerGeneratedAttribute]
public sealed virtual IBlobsClient get_Blob();
    [CompilerGeneratedAttribute]
private void set_Blob(IBlobsClient value);
    [CompilerGeneratedAttribute]
public sealed virtual ITreesClient get_Tree();
    [CompilerGeneratedAttribute]
private void set_Tree(ITreesClient value);
    [CompilerGeneratedAttribute]
public sealed virtual ITagsClient get_Tag();
    [CompilerGeneratedAttribute]
private void set_Tag(ITagsClient value);
    [CompilerGeneratedAttribute]
public sealed virtual ICommitsClient get_Commit();
    [CompilerGeneratedAttribute]
private void set_Commit(ICommitsClient value);
    [CompilerGeneratedAttribute]
public sealed virtual IReferencesClient get_Reference();
    [CompilerGeneratedAttribute]
private void set_Reference(IReferencesClient value);
}
[DebuggerDisplayAttribute("{DebuggerDisplay,nq}")]
public class Octokit.GitHubApp : object {
    [CompilerGeneratedAttribute]
private long <Id>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Slug>k__BackingField;
    [CompilerGeneratedAttribute]
private string <NodeId>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    [CompilerGeneratedAttribute]
private User <Owner>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Description>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ExternalUrl>k__BackingField;
    [CompilerGeneratedAttribute]
private string <HtmlUrl>k__BackingField;
    [CompilerGeneratedAttribute]
private DateTimeOffset <CreatedAt>k__BackingField;
    [CompilerGeneratedAttribute]
private DateTimeOffset <UpdatedAt>k__BackingField;
    [CompilerGeneratedAttribute]
private InstallationPermissions <Permissions>k__BackingField;
    [CompilerGeneratedAttribute]
private IReadOnlyList`1<string> <Events>k__BackingField;
    public long Id { get; protected set; }
    public string Slug { get; protected set; }
    public string NodeId { get; protected set; }
    public string Name { get; protected set; }
    public User Owner { get; protected set; }
    public string Description { get; protected set; }
    public string ExternalUrl { get; protected set; }
    public string HtmlUrl { get; protected set; }
    public DateTimeOffset CreatedAt { get; protected set; }
    public DateTimeOffset UpdatedAt { get; protected set; }
    public InstallationPermissions Permissions { get; protected set; }
    public IReadOnlyList`1<string> Events { get; protected set; }
    internal string DebuggerDisplay { get; }
    public GitHubApp(long id, string slug, string nodeId, string name, User owner, string description, string externalUrl, string htmlUrl, DateTimeOffset createdAt, DateTimeOffset updatedAt, InstallationPermissions permissions, IReadOnlyList`1<string> events);
    [CompilerGeneratedAttribute]
public long get_Id();
    [CompilerGeneratedAttribute]
protected void set_Id(long value);
    [CompilerGeneratedAttribute]
public string get_Slug();
    [CompilerGeneratedAttribute]
protected void set_Slug(string value);
    [CompilerGeneratedAttribute]
public string get_NodeId();
    [CompilerGeneratedAttribute]
protected void set_NodeId(string value);
    [CompilerGeneratedAttribute]
public string get_Name();
    [CompilerGeneratedAttribute]
protected void set_Name(string value);
    [CompilerGeneratedAttribute]
public User get_Owner();
    [CompilerGeneratedAttribute]
protected void set_Owner(User value);
    [CompilerGeneratedAttribute]
public string get_Description();
    [CompilerGeneratedAttribute]
protected void set_Description(string value);
    [CompilerGeneratedAttribute]
public string get_ExternalUrl();
    [CompilerGeneratedAttribute]
protected void set_ExternalUrl(string value);
    [CompilerGeneratedAttribute]
public string get_HtmlUrl();
    [CompilerGeneratedAttribute]
protected void set_HtmlUrl(string value);
    [CompilerGeneratedAttribute]
public DateTimeOffset get_CreatedAt();
    [CompilerGeneratedAttribute]
protected void set_CreatedAt(DateTimeOffset value);
    [CompilerGeneratedAttribute]
public DateTimeOffset get_UpdatedAt();
    [CompilerGeneratedAttribute]
protected void set_UpdatedAt(DateTimeOffset value);
    [CompilerGeneratedAttribute]
public InstallationPermissions get_Permissions();
    [CompilerGeneratedAttribute]
protected void set_Permissions(InstallationPermissions value);
    [CompilerGeneratedAttribute]
public IReadOnlyList`1<string> get_Events();
    [CompilerGeneratedAttribute]
protected void set_Events(IReadOnlyList`1<string> value);
    internal string get_DebuggerDisplay();
}
[DebuggerDisplayAttribute("{DebuggerDisplay,nq}")]
public class Octokit.GitHubAppFromManifest : GitHubApp {
    [CompilerGeneratedAttribute]
private string <ClientId>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ClientSecret>k__BackingField;
    [CompilerGeneratedAttribute]
private string <WebhookSecret>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Pem>k__BackingField;
    public string ClientId { get; private set; }
    public string ClientSecret { get; private set; }
    public string WebhookSecret { get; private set; }
    public string Pem { get; private set; }
    public GitHubAppFromManifest(long id, string slug, string nodeId, string name, User owner, string description, string externalUrl, string htmlUrl, DateTimeOffset createdAt, DateTimeOffset updatedAt, InstallationPermissions permissions, IReadOnlyList`1<string> events, string clientId, string clientSecret, string webhookSecret, string pem);
    [CompilerGeneratedAttribute]
public string get_ClientId();
    [CompilerGeneratedAttribute]
private void set_ClientId(string value);
    [CompilerGeneratedAttribute]
public string get_ClientSecret();
    [CompilerGeneratedAttribute]
private void set_ClientSecret(string value);
    [CompilerGeneratedAttribute]
public string get_WebhookSecret();
    [CompilerGeneratedAttribute]
private void set_WebhookSecret(string value);
    [CompilerGeneratedAttribute]
public string get_Pem();
    [CompilerGeneratedAttribute]
private void set_Pem(string value);
}
public class Octokit.GitHubAppInstallationsClient : ApiClient {
    public GitHubAppInstallationsClient(IApiConnection apiConnection);
    [ManualRouteAttribute("GET", "/installation/repositories")]
public sealed virtual Task`1<RepositoriesResponse> GetAllRepositoriesForCurrent();
    [AsyncStateMachineAttribute("Octokit.GitHubAppInstallationsClient/<GetAllRepositoriesForCurrent>d__2")]
[ManualRouteAttribute("GET", "/installation/repositories")]
public sealed virtual Task`1<RepositoriesResponse> GetAllRepositoriesForCurrent(ApiOptions options);
    [ManualRouteAttribute("GET", "/user/installation/{id}/repositories")]
public sealed virtual Task`1<RepositoriesResponse> GetAllRepositoriesForCurrentUser(long installationId);
    [AsyncStateMachineAttribute("Octokit.GitHubAppInstallationsClient/<GetAllRepositoriesForCurrentUser>d__4")]
[ManualRouteAttribute("GET", "/user/installation/{id}/repositories")]
public sealed virtual Task`1<RepositoriesResponse> GetAllRepositoriesForCurrentUser(long installationId, ApiOptions options);
}
public class Octokit.GitHubAppsClient : ApiClient {
    [CompilerGeneratedAttribute]
private IGitHubAppInstallationsClient <Installation>k__BackingField;
    public IGitHubAppInstallationsClient Installation { get; }
    public GitHubAppsClient(IApiConnection apiConnection);
    [CompilerGeneratedAttribute]
public sealed virtual IGitHubAppInstallationsClient get_Installation();
    [ManualRouteAttribute("GET", "/apps/{slug}")]
public sealed virtual Task`1<GitHubApp> Get(string slug);
    [ManualRouteAttribute("GET", "/app")]
public sealed virtual Task`1<GitHubApp> GetCurrent();
    [ManualRouteAttribute("GET", "/app/installations")]
public sealed virtual Task`1<IReadOnlyList`1<Installation>> GetAllInstallationsForCurrent();
    [ManualRouteAttribute("GET", "/app/installations")]
public sealed virtual Task`1<IReadOnlyList`1<Installation>> GetAllInstallationsForCurrent(ApiOptions options);
    [ObsoleteAttribute("This method will be removed in a future release.  Please use GetInstallationForCurrent() instead")]
public sealed virtual Task`1<Installation> GetInstallation(long installationId);
    [ManualRouteAttribute("GET", "/app/installations/{installation_id}")]
public sealed virtual Task`1<Installation> GetInstallationForCurrent(long installationId);
    [AsyncStateMachineAttribute("Octokit.GitHubAppsClient/<GetAllInstallationsForCurrentUser>d__10")]
[ManualRouteAttribute("GET", "/user/installations")]
public sealed virtual Task`1<InstallationsResponse> GetAllInstallationsForCurrentUser();
    [AsyncStateMachineAttribute("Octokit.GitHubAppsClient/<GetAllInstallationsForCurrentUser>d__11")]
[ManualRouteAttribute("GET", "/user/installations")]
public sealed virtual Task`1<InstallationsResponse> GetAllInstallationsForCurrentUser(ApiOptions options);
    [ManualRouteAttribute("GET", "/app/installations/{installation_id}/access_tokens")]
public sealed virtual Task`1<AccessToken> CreateInstallationToken(long installationId);
    [ManualRouteAttribute("GET", "/orgs/{org}/installation")]
public sealed virtual Task`1<Installation> GetOrganizationInstallationForCurrent(string organization);
    [ManualRouteAttribute("GET", "/repos/{owner}/{repo}/installation")]
public sealed virtual Task`1<Installation> GetRepositoryInstallationForCurrent(string owner, string repo);
    [ManualRouteAttribute("GET", "/repositories/{id}/installation")]
public sealed virtual Task`1<Installation> GetRepositoryInstallationForCurrent(long repositoryId);
    [ManualRouteAttribute("GET", "/users/{username}/installation")]
public sealed virtual Task`1<Installation> GetUserInstallationForCurrent(string user);
    [ManualRouteAttribute("POST", "/app-manifests/{code}/conversions")]
public sealed virtual Task`1<GitHubAppFromManifest> CreateAppFromManifest(string code);
}
public class Octokit.GitHubClient : object {
    public static Uri GitHubApiUrl;
    internal static Uri GitHubDotComUrl;
    [CompilerGeneratedAttribute]
private IConnection <Connection>k__BackingField;
    [CompilerGeneratedAttribute]
private IAuthorizationsClient <Authorization>k__BackingField;
    [CompilerGeneratedAttribute]
private IActivitiesClient <Activity>k__BackingField;
    [CompilerGeneratedAttribute]
private IEmojisClient <Emojis>k__BackingField;
    [CompilerGeneratedAttribute]
private IIssuesClient <Issue>k__BackingField;
    [CompilerGeneratedAttribute]
private IMigrationClient <Migration>k__BackingField;
    [CompilerGeneratedAttribute]
private IMiscellaneousClient <Miscellaneous>k__BackingField;
    [CompilerGeneratedAttribute]
private IOauthClient <Oauth>k__BackingField;
    [CompilerGeneratedAttribute]
private IOrganizationsClient <Organization>k__BackingField;
    [CompilerGeneratedAttribute]
private IPackagesClient <Packages>k__BackingField;
    [CompilerGeneratedAttribute]
private IPullRequestsClient <PullRequest>k__BackingField;
    [CompilerGeneratedAttribute]
private IRepositoriesClient <Repository>k__BackingField;
    [CompilerGeneratedAttribute]
private IGistsClient <Gist>k__BackingField;
    [CompilerGeneratedAttribute]
private IUsersClient <User>k__BackingField;
    [CompilerGeneratedAttribute]
private IGitDatabaseClient <Git>k__BackingField;
    [CompilerGeneratedAttribute]
private IGitHubAppsClient <GitHubApps>k__BackingField;
    [CompilerGeneratedAttribute]
private ISearchClient <Search>k__BackingField;
    [CompilerGeneratedAttribute]
private IEnterpriseClient <Enterprise>k__BackingField;
    [CompilerGeneratedAttribute]
private IReactionsClient <Reaction>k__BackingField;
    [CompilerGeneratedAttribute]
private IChecksClient <Check>k__BackingField;
    [CompilerGeneratedAttribute]
private IMetaClient <Meta>k__BackingField;
    [CompilerGeneratedAttribute]
private IRateLimitClient <RateLimit>k__BackingField;
    [CompilerGeneratedAttribute]
private ILicensesClient <Licenses>k__BackingField;
    [CompilerGeneratedAttribute]
private IGitIgnoreClient <GitIgnore>k__BackingField;
    [CompilerGeneratedAttribute]
private IMarkdownClient <Markdown>k__BackingField;
    [CompilerGeneratedAttribute]
private IActionsClient <Actions>k__BackingField;
    [CompilerGeneratedAttribute]
private ICodespacesClient <Codespaces>k__BackingField;
    [CompilerGeneratedAttribute]
private ICopilotClient <Copilot>k__BackingField;
    [CompilerGeneratedAttribute]
private IDependencyGraphClient <DependencyGraph>k__BackingField;
    public Credentials Credentials { get; public set; }
    unknown IResponseCache ResponseCache {public set; }
    public Uri BaseAddress { get; }
    public IConnection Connection { get; private set; }
    public IAuthorizationsClient Authorization { get; private set; }
    public IActivitiesClient Activity { get; private set; }
    public IEmojisClient Emojis { get; private set; }
    public IIssuesClient Issue { get; private set; }
    public IMigrationClient Migration { get; private set; }
    public IMiscellaneousClient Miscellaneous { get; private set; }
    public IOauthClient Oauth { get; private set; }
    public IOrganizationsClient Organization { get; private set; }
    public IPackagesClient Packages { get; private set; }
    public IPullRequestsClient PullRequest { get; private set; }
    public IRepositoriesClient Repository { get; private set; }
    public IGistsClient Gist { get; private set; }
    public IUsersClient User { get; private set; }
    public IGitDatabaseClient Git { get; private set; }
    public IGitHubAppsClient GitHubApps { get; private set; }
    public ISearchClient Search { get; private set; }
    public IEnterpriseClient Enterprise { get; private set; }
    public IReactionsClient Reaction { get; private set; }
    public IChecksClient Check { get; private set; }
    public IMetaClient Meta { get; private set; }
    public IRateLimitClient RateLimit { get; private set; }
    public ILicensesClient Licenses { get; private set; }
    public IGitIgnoreClient GitIgnore { get; private set; }
    public IMarkdownClient Markdown { get; private set; }
    public IActionsClient Actions { get; private set; }
    public ICodespacesClient Codespaces { get; private set; }
    public ICopilotClient Copilot { get; private set; }
    public IDependencyGraphClient DependencyGraph { get; private set; }
    public GitHubClient(ProductHeaderValue productInformation);
    public GitHubClient(ProductHeaderValue productInformation, ICredentialStore credentialStore);
    public GitHubClient(ProductHeaderValue productInformation, Uri baseAddress);
    public GitHubClient(ProductHeaderValue productInformation, ICredentialStore credentialStore, Uri baseAddress);
    public GitHubClient(IConnection connection);
    private static GitHubClient();
    public sealed virtual void SetRequestTimeout(TimeSpan timeout);
    public sealed virtual ApiInfo GetLastApiInfo();
    public Credentials get_Credentials();
    public void set_Credentials(Credentials value);
    public void set_ResponseCache(IResponseCache value);
    public Uri get_BaseAddress();
    [CompilerGeneratedAttribute]
public sealed virtual IConnection get_Connection();
    [CompilerGeneratedAttribute]
private void set_Connection(IConnection value);
    [CompilerGeneratedAttribute]
public sealed virtual IAuthorizationsClient get_Authorization();
    [CompilerGeneratedAttribute]
private void set_Authorization(IAuthorizationsClient value);
    [CompilerGeneratedAttribute]
public sealed virtual IActivitiesClient get_Activity();
    [CompilerGeneratedAttribute]
private void set_Activity(IActivitiesClient value);
    [CompilerGeneratedAttribute]
public sealed virtual IEmojisClient get_Emojis();
    [CompilerGeneratedAttribute]
private void set_Emojis(IEmojisClient value);
    [CompilerGeneratedAttribute]
public sealed virtual IIssuesClient get_Issue();
    [CompilerGeneratedAttribute]
private void set_Issue(IIssuesClient value);
    [CompilerGeneratedAttribute]
public sealed virtual IMigrationClient get_Migration();
    [CompilerGeneratedAttribute]
private void set_Migration(IMigrationClient value);
    [CompilerGeneratedAttribute]
public sealed virtual IMiscellaneousClient get_Miscellaneous();
    [CompilerGeneratedAttribute]
private void set_Miscellaneous(IMiscellaneousClient value);
    [CompilerGeneratedAttribute]
public sealed virtual IOauthClient get_Oauth();
    [CompilerGeneratedAttribute]
private void set_Oauth(IOauthClient value);
    [CompilerGeneratedAttribute]
public sealed virtual IOrganizationsClient get_Organization();
    [CompilerGeneratedAttribute]
private void set_Organization(IOrganizationsClient value);
    [CompilerGeneratedAttribute]
public sealed virtual IPackagesClient get_Packages();
    [CompilerGeneratedAttribute]
private void set_Packages(IPackagesClient value);
    [CompilerGeneratedAttribute]
public sealed virtual IPullRequestsClient get_PullRequest();
    [CompilerGeneratedAttribute]
private void set_PullRequest(IPullRequestsClient value);
    [CompilerGeneratedAttribute]
public sealed virtual IRepositoriesClient get_Repository();
    [CompilerGeneratedAttribute]
private void set_Repository(IRepositoriesClient value);
    [CompilerGeneratedAttribute]
public sealed virtual IGistsClient get_Gist();
    [CompilerGeneratedAttribute]
private void set_Gist(IGistsClient value);
    [CompilerGeneratedAttribute]
public sealed virtual IUsersClient get_User();
    [CompilerGeneratedAttribute]
private void set_User(IUsersClient value);
    [CompilerGeneratedAttribute]
public sealed virtual IGitDatabaseClient get_Git();
    [CompilerGeneratedAttribute]
private void set_Git(IGitDatabaseClient value);
    [CompilerGeneratedAttribute]
public sealed virtual IGitHubAppsClient get_GitHubApps();
    [CompilerGeneratedAttribute]
private void set_GitHubApps(IGitHubAppsClient value);
    [CompilerGeneratedAttribute]
public sealed virtual ISearchClient get_Search();
    [CompilerGeneratedAttribute]
private void set_Search(ISearchClient value);
    [CompilerGeneratedAttribute]
public sealed virtual IEnterpriseClient get_Enterprise();
    [CompilerGeneratedAttribute]
private void set_Enterprise(IEnterpriseClient value);
    [CompilerGeneratedAttribute]
public sealed virtual IReactionsClient get_Reaction();
    [CompilerGeneratedAttribute]
private void set_Reaction(IReactionsClient value);
    [CompilerGeneratedAttribute]
public sealed virtual IChecksClient get_Check();
    [CompilerGeneratedAttribute]
private void set_Check(IChecksClient value);
    [CompilerGeneratedAttribute]
public sealed virtual IMetaClient get_Meta();
    [CompilerGeneratedAttribute]
private void set_Meta(IMetaClient value);
    [CompilerGeneratedAttribute]
public sealed virtual IRateLimitClient get_RateLimit();
    [CompilerGeneratedAttribute]
private void set_RateLimit(IRateLimitClient value);
    [CompilerGeneratedAttribute]
public sealed virtual ILicensesClient get_Licenses();
    [CompilerGeneratedAttribute]
private void set_Licenses(ILicensesClient value);
    [CompilerGeneratedAttribute]
public sealed virtual IGitIgnoreClient get_GitIgnore();
    [CompilerGeneratedAttribute]
private void set_GitIgnore(IGitIgnoreClient value);
    [CompilerGeneratedAttribute]
public sealed virtual IMarkdownClient get_Markdown();
    [CompilerGeneratedAttribute]
private void set_Markdown(IMarkdownClient value);
    [CompilerGeneratedAttribute]
public sealed virtual IActionsClient get_Actions();
    [CompilerGeneratedAttribute]
private void set_Actions(IActionsClient value);
    [CompilerGeneratedAttribute]
public sealed virtual ICodespacesClient get_Codespaces();
    [CompilerGeneratedAttribute]
private void set_Codespaces(ICodespacesClient value);
    [CompilerGeneratedAttribute]
public sealed virtual ICopilotClient get_Copilot();
    [CompilerGeneratedAttribute]
private void set_Copilot(ICopilotClient value);
    [CompilerGeneratedAttribute]
public sealed virtual IDependencyGraphClient get_DependencyGraph();
    [CompilerGeneratedAttribute]
private void set_DependencyGraph(IDependencyGraphClient value);
    private static Uri FixUpBaseUri(Uri uri);
}
[DebuggerDisplayAttribute("{DebuggerDisplay,nq}")]
public class Octokit.GitHubCommit : GitReference {
    [CompilerGeneratedAttribute]
private Author <Author>k__BackingField;
    [CompilerGeneratedAttribute]
private string <CommentsUrl>k__BackingField;
    [CompilerGeneratedAttribute]
private Commit <Commit>k__BackingField;
    [CompilerGeneratedAttribute]
private Author <Committer>k__BackingField;
    [CompilerGeneratedAttribute]
private string <HtmlUrl>k__BackingField;
    [CompilerGeneratedAttribute]
private GitHubCommitStats <Stats>k__BackingField;
    [CompilerGeneratedAttribute]
private IReadOnlyList`1<GitReference> <Parents>k__BackingField;
    [CompilerGeneratedAttribute]
private IReadOnlyList`1<GitHubCommitFile> <Files>k__BackingField;
    public Author Author { get; private set; }
    public string CommentsUrl { get; private set; }
    public Commit Commit { get; private set; }
    public Author Committer { get; private set; }
    public string HtmlUrl { get; private set; }
    public GitHubCommitStats Stats { get; private set; }
    public IReadOnlyList`1<GitReference> Parents { get; private set; }
    public IReadOnlyList`1<GitHubCommitFile> Files { get; private set; }
    public GitHubCommit(string nodeId, string url, string label, string ref, string sha, User user, Repository repository, Author author, string commentsUrl, Commit commit, Author committer, string htmlUrl, GitHubCommitStats stats, IReadOnlyList`1<GitReference> parents, IReadOnlyList`1<GitHubCommitFile> files);
    [CompilerGeneratedAttribute]
public Author get_Author();
    [CompilerGeneratedAttribute]
private void set_Author(Author value);
    [CompilerGeneratedAttribute]
public string get_CommentsUrl();
    [CompilerGeneratedAttribute]
private void set_CommentsUrl(string value);
    [CompilerGeneratedAttribute]
public Commit get_Commit();
    [CompilerGeneratedAttribute]
private void set_Commit(Commit value);
    [CompilerGeneratedAttribute]
public Author get_Committer();
    [CompilerGeneratedAttribute]
private void set_Committer(Author value);
    [CompilerGeneratedAttribute]
public string get_HtmlUrl();
    [CompilerGeneratedAttribute]
private void set_HtmlUrl(string value);
    [CompilerGeneratedAttribute]
public GitHubCommitStats get_Stats();
    [CompilerGeneratedAttribute]
private void set_Stats(GitHubCommitStats value);
    [CompilerGeneratedAttribute]
public IReadOnlyList`1<GitReference> get_Parents();
    [CompilerGeneratedAttribute]
private void set_Parents(IReadOnlyList`1<GitReference> value);
    [CompilerGeneratedAttribute]
public IReadOnlyList`1<GitHubCommitFile> get_Files();
    [CompilerGeneratedAttribute]
private void set_Files(IReadOnlyList`1<GitHubCommitFile> value);
}
[DebuggerDisplayAttribute("{DebuggerDisplay,nq}")]
public class Octokit.GitHubCommitFile : object {
    [CompilerGeneratedAttribute]
private string <Filename>k__BackingField;
    [CompilerGeneratedAttribute]
private int <Additions>k__BackingField;
    [CompilerGeneratedAttribute]
private int <Deletions>k__BackingField;
    [CompilerGeneratedAttribute]
private int <Changes>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Status>k__BackingField;
    [CompilerGeneratedAttribute]
private string <BlobUrl>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ContentsUrl>k__BackingField;
    [CompilerGeneratedAttribute]
private string <RawUrl>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Sha>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Patch>k__BackingField;
    [CompilerGeneratedAttribute]
private string <PreviousFileName>k__BackingField;
    public string Filename { get; private set; }
    public int Additions { get; private set; }
    public int Deletions { get; private set; }
    public int Changes { get; private set; }
    public string Status { get; private set; }
    public string BlobUrl { get; private set; }
    public string ContentsUrl { get; private set; }
    public string RawUrl { get; private set; }
    public string Sha { get; private set; }
    public string Patch { get; private set; }
    [ParameterAttribute]
public string PreviousFileName { get; private set; }
    internal string DebuggerDisplay { get; }
    public GitHubCommitFile(string filename, int additions, int deletions, int changes, string status, string blobUrl, string contentsUrl, string rawUrl, string sha, string patch, string previousFileName);
    [CompilerGeneratedAttribute]
public string get_Filename();
    [CompilerGeneratedAttribute]
private void set_Filename(string value);
    [CompilerGeneratedAttribute]
public int get_Additions();
    [CompilerGeneratedAttribute]
private void set_Additions(int value);
    [CompilerGeneratedAttribute]
public int get_Deletions();
    [CompilerGeneratedAttribute]
private void set_Deletions(int value);
    [CompilerGeneratedAttribute]
public int get_Changes();
    [CompilerGeneratedAttribute]
private void set_Changes(int value);
    [CompilerGeneratedAttribute]
public string get_Status();
    [CompilerGeneratedAttribute]
private void set_Status(string value);
    [CompilerGeneratedAttribute]
public string get_BlobUrl();
    [CompilerGeneratedAttribute]
private void set_BlobUrl(string value);
    [CompilerGeneratedAttribute]
public string get_ContentsUrl();
    [CompilerGeneratedAttribute]
private void set_ContentsUrl(string value);
    [CompilerGeneratedAttribute]
public string get_RawUrl();
    [CompilerGeneratedAttribute]
private void set_RawUrl(string value);
    [CompilerGeneratedAttribute]
public string get_Sha();
    [CompilerGeneratedAttribute]
private void set_Sha(string value);
    [CompilerGeneratedAttribute]
public string get_Patch();
    [CompilerGeneratedAttribute]
private void set_Patch(string value);
    [CompilerGeneratedAttribute]
public string get_PreviousFileName();
    [CompilerGeneratedAttribute]
private void set_PreviousFileName(string value);
    internal string get_DebuggerDisplay();
}
[DebuggerDisplayAttribute("{DebuggerDisplay,nq}")]
public class Octokit.GitHubCommitStats : object {
    [CompilerGeneratedAttribute]
private int <Additions>k__BackingField;
    [CompilerGeneratedAttribute]
private int <Deletions>k__BackingField;
    [CompilerGeneratedAttribute]
private int <Total>k__BackingField;
    public int Additions { get; private set; }
    public int Deletions { get; private set; }
    public int Total { get; private set; }
    internal string DebuggerDisplay { get; }
    public GitHubCommitStats(int additions, int deletions, int total);
    [CompilerGeneratedAttribute]
public int get_Additions();
    [CompilerGeneratedAttribute]
private void set_Additions(int value);
    [CompilerGeneratedAttribute]
public int get_Deletions();
    [CompilerGeneratedAttribute]
private void set_Deletions(int value);
    [CompilerGeneratedAttribute]
public int get_Total();
    [CompilerGeneratedAttribute]
private void set_Total(int value);
    internal string get_DebuggerDisplay();
}
public class Octokit.GitIgnoreClient : ApiClient {
    public GitIgnoreClient(IApiConnection apiConnection);
    [ManualRouteAttribute("GET", "/gitignore/templates")]
public sealed virtual Task`1<IReadOnlyList`1<string>> GetAllGitIgnoreTemplates();
    [ManualRouteAttribute("GET", "/gitignore/templates/{name}")]
public sealed virtual Task`1<GitIgnoreTemplate> GetGitIgnoreTemplate(string templateName);
}
[DebuggerDisplayAttribute("{DebuggerDisplay,nq}")]
public class Octokit.GitIgnoreTemplate : object {
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Source>k__BackingField;
    public string Name { get; private set; }
    public string Source { get; private set; }
    internal string DebuggerDisplay { get; }
    public GitIgnoreTemplate(string name, string source);
    [CompilerGeneratedAttribute]
public string get_Name();
    [CompilerGeneratedAttribute]
private void set_Name(string value);
    [CompilerGeneratedAttribute]
public string get_Source();
    [CompilerGeneratedAttribute]
private void set_Source(string value);
    internal string get_DebuggerDisplay();
}
[DebuggerDisplayAttribute("{DebuggerDisplay,nq}")]
public class Octokit.GitReference : object {
    [CompilerGeneratedAttribute]
private string <NodeId>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Url>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Label>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Ref>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Sha>k__BackingField;
    [CompilerGeneratedAttribute]
private User <User>k__BackingField;
    [CompilerGeneratedAttribute]
private Repository <Repository>k__BackingField;
    public string NodeId { get; protected set; }
    public string Url { get; protected set; }
    public string Label { get; protected set; }
    public string Ref { get; protected set; }
    public string Sha { get; protected set; }
    public User User { get; protected set; }
    [ParameterAttribute]
public Repository Repository { get; protected set; }
    internal string DebuggerDisplay { get; }
    public GitReference(string nodeId, string url, string label, string ref, string sha, User user, Repository repository);
    [CompilerGeneratedAttribute]
public string get_NodeId();
    [CompilerGeneratedAttribute]
protected void set_NodeId(string value);
    [CompilerGeneratedAttribute]
public string get_Url();
    [CompilerGeneratedAttribute]
protected void set_Url(string value);
    [CompilerGeneratedAttribute]
public string get_Label();
    [CompilerGeneratedAttribute]
protected void set_Label(string value);
    [CompilerGeneratedAttribute]
public string get_Ref();
    [CompilerGeneratedAttribute]
protected void set_Ref(string value);
    [CompilerGeneratedAttribute]
public string get_Sha();
    [CompilerGeneratedAttribute]
protected void set_Sha(string value);
    [CompilerGeneratedAttribute]
public User get_User();
    [CompilerGeneratedAttribute]
protected void set_User(User value);
    [CompilerGeneratedAttribute]
public Repository get_Repository();
    [CompilerGeneratedAttribute]
protected void set_Repository(Repository value);
    internal string get_DebuggerDisplay();
}
[DebuggerDisplayAttribute("{DebuggerDisplay,nq}")]
public class Octokit.GitTag : GitReference {
    [CompilerGeneratedAttribute]
private string <Tag>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Message>k__BackingField;
    [CompilerGeneratedAttribute]
private Committer <Tagger>k__BackingField;
    [CompilerGeneratedAttribute]
private TagObject <Object>k__BackingField;
    [CompilerGeneratedAttribute]
private Verification <Verification>k__BackingField;
    public string Tag { get; private set; }
    public string Message { get; private set; }
    public Committer Tagger { get; private set; }
    public TagObject Object { get; private set; }
    public Verification Verification { get; private set; }
    public GitTag(string nodeId, string url, string label, string ref, string sha, User user, Repository repository, string tag, string message, Committer tagger, TagObject object, Verification verification);
    [CompilerGeneratedAttribute]
public string get_Tag();
    [CompilerGeneratedAttribute]
private void set_Tag(string value);
    [CompilerGeneratedAttribute]
public string get_Message();
    [CompilerGeneratedAttribute]
private void set_Message(string value);
    [CompilerGeneratedAttribute]
public Committer get_Tagger();
    [CompilerGeneratedAttribute]
private void set_Tagger(Committer value);
    [CompilerGeneratedAttribute]
public TagObject get_Object();
    [CompilerGeneratedAttribute]
private void set_Object(TagObject value);
    [CompilerGeneratedAttribute]
public Verification get_Verification();
    [CompilerGeneratedAttribute]
private void set_Verification(Verification value);
}
[DebuggerDisplayAttribute("{DebuggerDisplay,nq}")]
public class Octokit.GpgKey : object {
    [CompilerGeneratedAttribute]
private long <Id>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<long> <PrimaryKeyId>k__BackingField;
    [CompilerGeneratedAttribute]
private string <KeyId>k__BackingField;
    [CompilerGeneratedAttribute]
private string <PublicKey>k__BackingField;
    [CompilerGeneratedAttribute]
private IReadOnlyList`1<EmailAddress> <Emails>k__BackingField;
    [CompilerGeneratedAttribute]
private IReadOnlyList`1<GpgKey> <Subkeys>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <CanSign>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <CanEncryptCommunications>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <CanEncryptStorage>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <CanCertify>k__BackingField;
    [CompilerGeneratedAttribute]
private DateTimeOffset <CreatedAt>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<DateTimeOffset> <ExpiresAt>k__BackingField;
    public long Id { get; private set; }
    public Nullable`1<long> PrimaryKeyId { get; private set; }
    public string KeyId { get; private set; }
    public string PublicKey { get; private set; }
    public IReadOnlyList`1<EmailAddress> Emails { get; private set; }
    public IReadOnlyList`1<GpgKey> Subkeys { get; private set; }
    public bool CanSign { get; private set; }
    [ParameterAttribute]
public bool CanEncryptCommunications { get; private set; }
    public bool CanEncryptStorage { get; private set; }
    public bool CanCertify { get; private set; }
    public DateTimeOffset CreatedAt { get; private set; }
    public Nullable`1<DateTimeOffset> ExpiresAt { get; private set; }
    internal string DebuggerDisplay { get; }
    public GpgKey(long id, Nullable`1<long> primaryKeyId, string keyId, string publicKey, IReadOnlyList`1<EmailAddress> emails, IReadOnlyList`1<GpgKey> subkeys, bool canSign, bool canEncryptCommunications, bool canEncryptStorage, bool canCertify, DateTimeOffset createdAt, Nullable`1<DateTimeOffset> expiresAt);
    [CompilerGeneratedAttribute]
public long get_Id();
    [CompilerGeneratedAttribute]
private void set_Id(long value);
    [CompilerGeneratedAttribute]
public Nullable`1<long> get_PrimaryKeyId();
    [CompilerGeneratedAttribute]
private void set_PrimaryKeyId(Nullable`1<long> value);
    [CompilerGeneratedAttribute]
public string get_KeyId();
    [CompilerGeneratedAttribute]
private void set_KeyId(string value);
    [CompilerGeneratedAttribute]
public string get_PublicKey();
    [CompilerGeneratedAttribute]
private void set_PublicKey(string value);
    [CompilerGeneratedAttribute]
public IReadOnlyList`1<EmailAddress> get_Emails();
    [CompilerGeneratedAttribute]
private void set_Emails(IReadOnlyList`1<EmailAddress> value);
    [CompilerGeneratedAttribute]
public IReadOnlyList`1<GpgKey> get_Subkeys();
    [CompilerGeneratedAttribute]
private void set_Subkeys(IReadOnlyList`1<GpgKey> value);
    [CompilerGeneratedAttribute]
public bool get_CanSign();
    [CompilerGeneratedAttribute]
private void set_CanSign(bool value);
    [CompilerGeneratedAttribute]
public bool get_CanEncryptCommunications();
    [CompilerGeneratedAttribute]
private void set_CanEncryptCommunications(bool value);
    [CompilerGeneratedAttribute]
public bool get_CanEncryptStorage();
    [CompilerGeneratedAttribute]
private void set_CanEncryptStorage(bool value);
    [CompilerGeneratedAttribute]
public bool get_CanCertify();
    [CompilerGeneratedAttribute]
private void set_CanCertify(bool value);
    [CompilerGeneratedAttribute]
public DateTimeOffset get_CreatedAt();
    [CompilerGeneratedAttribute]
private void set_CreatedAt(DateTimeOffset value);
    [CompilerGeneratedAttribute]
public Nullable`1<DateTimeOffset> get_ExpiresAt();
    [CompilerGeneratedAttribute]
private void set_ExpiresAt(Nullable`1<DateTimeOffset> value);
    internal string get_DebuggerDisplay();
}
[ExtensionAttribute]
public static class Octokit.Helpers.ReferenceExtensions : object {
    [AsyncStateMachineAttribute("Octokit.Helpers.ReferenceExtensions/<CreateBranch>d__0")]
[ExtensionAttribute]
public static Task`1<Reference> CreateBranch(IReferencesClient referencesClient, string owner, string name, string branchName, Reference baseReference);
    [AsyncStateMachineAttribute("Octokit.Helpers.ReferenceExtensions/<CreateBranch>d__1")]
[ExtensionAttribute]
[ObsoleteAttribute("This function is hard-coded to master branch, which is no longer a valid assumption for the base branch. Instead of making a second request to figure out the default branch, this extension method will be removed in a future release. Please check the default branch on the repository and use the overload passing in the default branch name")]
public static Task`1<Reference> CreateBranch(IReferencesClient referencesClient, string owner, string name, string branchName);
    [AsyncStateMachineAttribute("Octokit.Helpers.ReferenceExtensions/<CreateBranch>d__2")]
[ExtensionAttribute]
public static Task`1<Reference> CreateBranch(IReferencesClient referencesClient, string owner, string name, string branchName, string defaultBranchName);
}
[AttributeUsageAttribute("384")]
public class Octokit.Helpers.SerializeAsBase64Attribute : Attribute {
}
[ExtensionAttribute]
public static class Octokit.Helpers.UnixTimestampExtensions : object {
    [ExtensionAttribute]
[ObsoleteAttribute("Use DateTimeOffset.FromUnixTimeSeconds(long seconds) instead.")]
public static DateTimeOffset FromUnixTime(long unixTime);
    [ExtensionAttribute]
[ObsoleteAttribute("Use DateTimeOffset.ToUnixTimeSeconds() instead.")]
public static long ToUnixTime(DateTimeOffset date);
}
[ExtensionAttribute]
public static class Octokit.HttpExtensions : object {
    [ExtensionAttribute]
public static Task`1<IResponse> Send(IHttpClient httpClient, IRequest request);
    [ExtensionAttribute]
public static bool IsSuccessStatusCode(IResponse response);
}
public interface Octokit.IActionsArtifactsClient {
    public abstract virtual Task`1<ListArtifactsResponse> ListArtifacts(string owner, string repository, ListArtifactsRequest listArtifactsRequest);
    public abstract virtual Task`1<Artifact> GetArtifact(string owner, string repository, long artifactId);
    public abstract virtual Task DeleteArtifact(string owner, string repository, long artifactId);
    public abstract virtual Task`1<Stream> DownloadArtifact(string owner, string repository, long artifactId, string archiveFormat);
    public abstract virtual Task`1<ListArtifactsResponse> ListWorkflowArtifacts(string owner, string repository, long runId, ListArtifactsRequest listArtifactsRequest);
}
public interface Octokit.IActionsCacheClient {
}
public interface Octokit.IActionsClient {
    public IActionsArtifactsClient Artifacts { get; }
    public IActionsCacheClient Cache { get; }
    public IActionsOidcClient Oidc { get; }
    public IActionsPermissionsClient Permissions { get; }
    public IActionsSelfHostedRunnerGroupsClient SelfHostedRunnerGroups { get; }
    public IActionsSelfHostedRunnersClient SelfHostedRunners { get; }
    public IActionsWorkflowsClient Workflows { get; }
    public abstract virtual IActionsArtifactsClient get_Artifacts();
    public abstract virtual IActionsCacheClient get_Cache();
    public abstract virtual IActionsOidcClient get_Oidc();
    public abstract virtual IActionsPermissionsClient get_Permissions();
    public abstract virtual IActionsSelfHostedRunnerGroupsClient get_SelfHostedRunnerGroups();
    public abstract virtual IActionsSelfHostedRunnersClient get_SelfHostedRunners();
    public abstract virtual IActionsWorkflowsClient get_Workflows();
}
public interface Octokit.IActionsOidcClient {
    public abstract virtual Task`1<OrganizationOidcSubjectClaim> GetOrganizationOidcSubjectClaim(string organization);
    public abstract virtual Task SetOrganizationOidcSubjectClaim(string organization, OrganizationOidcSubjectClaimRequest oidcSubjectClaim);
    public abstract virtual Task`1<RepositoryOidcSubjectClaim> GetRepositoryOidcSubjectClaim(string owner, string repository);
    public abstract virtual Task SetRepositoryOidcSubjectClaim(string owner, string repository, RepositoryOidcSubjectClaimRequest oidcSubjectClaim);
}
public interface Octokit.IActionsPermissionsClient {
}
public interface Octokit.IActionsSelfHostedRunnerGroupsClient {
    public abstract virtual Task`1<RunnerGroup> GetRunnerGroupForEnterprise(string enterprise, long runnerGroupId);
    public abstract virtual Task`1<RunnerGroup> GetRunnerGroupForOrganization(string org, long runnerGroupId);
    public abstract virtual Task`1<RunnerGroupResponse> ListAllRunnerGroupsForEnterprise(string enterprise);
    public abstract virtual Task`1<RunnerGroupResponse> ListAllRunnerGroupsForEnterprise(string enterprise, ApiOptions options);
    public abstract virtual Task`1<RunnerGroupResponse> ListAllRunnerGroupsForOrganization(string org);
    public abstract virtual Task`1<RunnerGroupResponse> ListAllRunnerGroupsForOrganization(string org, ApiOptions options);
    public abstract virtual Task`1<RunnerResponse> ListAllRunnersForEnterpriseRunnerGroup(string enterprise, long runnerGroupId);
    public abstract virtual Task`1<RunnerResponse> ListAllRunnersForEnterpriseRunnerGroup(string enterprise, long runnerGroupId, ApiOptions options);
    public abstract virtual Task`1<RunnerResponse> ListAllRunnersForOrganizationRunnerGroup(string organization, long runnerGroupId);
    public abstract virtual Task`1<RunnerResponse> ListAllRunnersForOrganizationRunnerGroup(string organization, long runnerGroupId, ApiOptions options);
    public abstract virtual Task`1<IReadOnlyList`1<Organization>> ListAllRunnerGroupOrganizationsForEnterprise(string enterprise, long runnerGroupId);
    public abstract virtual Task`1<IReadOnlyList`1<Organization>> ListAllRunnerGroupOrganizationsForEnterprise(string enterprise, long runnerGroupId, ApiOptions options);
    public abstract virtual Task`1<IReadOnlyList`1<Repository>> ListAllRunnerGroupRepositoriesForOrganization(string org, long runnerGroupId);
    public abstract virtual Task`1<IReadOnlyList`1<Repository>> ListAllRunnerGroupRepositoriesForOrganization(string org, long runnerGroupId, ApiOptions options);
}
public interface Octokit.IActionsSelfHostedRunnersClient {
    public abstract virtual Task`1<RunnerResponse> ListAllRunnersForEnterprise(string enterprise);
    public abstract virtual Task`1<RunnerResponse> ListAllRunnersForEnterprise(string enterprise, ApiOptions options);
    public abstract virtual Task`1<RunnerResponse> ListAllRunnersForOrganization(string organization);
    public abstract virtual Task`1<RunnerResponse> ListAllRunnersForOrganization(string organization, ApiOptions options);
    public abstract virtual Task`1<RunnerResponse> ListAllRunnersForRepository(string owner, string name);
    public abstract virtual Task`1<RunnerResponse> ListAllRunnersForRepository(string owner, string name, ApiOptions options);
    public abstract virtual Task`1<IReadOnlyList`1<RunnerApplication>> ListAllRunnerApplicationsForEnterprise(string enterprise);
    public abstract virtual Task`1<IReadOnlyList`1<RunnerApplication>> ListAllRunnerApplicationsForEnterprise(string enterprise, ApiOptions options);
    public abstract virtual Task`1<IReadOnlyList`1<RunnerApplication>> ListAllRunnerApplicationsForOrganization(string organization);
    public abstract virtual Task`1<IReadOnlyList`1<RunnerApplication>> ListAllRunnerApplicationsForOrganization(string organization, ApiOptions options);
    public abstract virtual Task`1<IReadOnlyList`1<RunnerApplication>> ListAllRunnerApplicationsForRepository(string owner, string name);
    public abstract virtual Task`1<IReadOnlyList`1<RunnerApplication>> ListAllRunnerApplicationsForRepository(string owner, string name, ApiOptions options);
    public abstract virtual Task DeleteEnterpriseRunner(string enterprise, long runnerId);
    public abstract virtual Task DeleteOrganizationRunner(string organization, long runnerId);
    public abstract virtual Task DeleteRepositoryRunner(string owner, string name, long runnerId);
    public abstract virtual Task`1<AccessToken> CreateEnterpriseRegistrationToken(string enterprise, CancellationToken cancellationToken);
    public abstract virtual Task`1<AccessToken> CreateOrganizationRegistrationToken(string organization, CancellationToken cancellationToken);
    public abstract virtual Task`1<AccessToken> CreateRepositoryRegistrationToken(string owner, string name, CancellationToken cancellationToken);
}
public interface Octokit.IActionsWorkflowJobsClient {
    public abstract virtual Task Rerun(string owner, string name, long jobId);
    public abstract virtual Task`1<WorkflowJob> Get(string owner, string name, long jobId);
    public abstract virtual Task`1<string> GetLogs(string owner, string name, long jobId);
    public abstract virtual Task`1<WorkflowJobsResponse> List(string owner, string name, long runId);
    public abstract virtual Task`1<WorkflowJobsResponse> List(string owner, string name, long runId, WorkflowRunJobsRequest workflowRunJobsRequest);
    public abstract virtual Task`1<WorkflowJobsResponse> List(string owner, string name, long runId, WorkflowRunJobsRequest workflowRunJobsRequest, ApiOptions options);
    public abstract virtual Task`1<WorkflowJobsResponse> List(string owner, string name, long runId, int attemptNumber);
    public abstract virtual Task`1<WorkflowJobsResponse> List(string owner, string name, long runId, int attemptNumber, ApiOptions options);
}
public interface Octokit.IActionsWorkflowRunsClient {
    public abstract virtual Task`1<WorkflowRunsResponse> List(string owner, string name);
    public abstract virtual Task`1<WorkflowRunsResponse> List(string owner, string name, WorkflowRunsRequest workflowRunsRequest);
    public abstract virtual Task`1<WorkflowRunsResponse> List(string owner, string name, WorkflowRunsRequest workflowRunsRequest, ApiOptions options);
    public abstract virtual Task`1<WorkflowRun> Get(string owner, string name, long runId);
    public abstract virtual Task Delete(string owner, string name, long runId);
    [ExcludeFromPaginationApiOptionsConventionTestAttribute("Pagination not supported by GitHub API (tested 30/03/2022)")]
[ExcludeFromPaginationNamingConventionTestAttribute("Pagination not supported by GitHub API (tested 30/03/2022)")]
public abstract virtual Task`1<IReadOnlyList`1<EnvironmentApprovals>> GetReviewHistory(string owner, string name, long runId);
    public abstract virtual Task`1<Deployment> ReviewPendingDeployments(string owner, string name, long runId, PendingDeploymentReview review);
    public abstract virtual Task Approve(string owner, string name, long runId);
    public abstract virtual Task`1<WorkflowRun> GetAttempt(string owner, string name, long runId, long attemptNumber);
    public abstract virtual Task`1<Byte[]> GetAttemptLogs(string owner, string name, long runId, long attemptNumber);
    public abstract virtual Task Cancel(string owner, string name, long runId);
    public abstract virtual Task`1<Byte[]> GetLogs(string owner, string name, long runId);
    public abstract virtual Task DeleteLogs(string owner, string name, long runId);
    public abstract virtual Task Rerun(string owner, string name, long runId);
    public abstract virtual Task RerunFailedJobs(string owner, string name, long runId);
    public abstract virtual Task`1<WorkflowRunUsage> GetUsage(string owner, string name, long runId);
    public abstract virtual Task`1<WorkflowRunsResponse> ListByWorkflow(string owner, string name, long workflowId);
    public abstract virtual Task`1<WorkflowRunsResponse> ListByWorkflow(string owner, string name, string workflowFileName);
    public abstract virtual Task`1<WorkflowRunsResponse> ListByWorkflow(string owner, string name, long workflowId, WorkflowRunsRequest workflowRunsRequest);
    public abstract virtual Task`1<WorkflowRunsResponse> ListByWorkflow(string owner, string name, string workflowFileName, WorkflowRunsRequest workflowRunsRequest);
    public abstract virtual Task`1<WorkflowRunsResponse> ListByWorkflow(string owner, string name, long workflowId, WorkflowRunsRequest workflowRunsRequest, ApiOptions options);
    public abstract virtual Task`1<WorkflowRunsResponse> ListByWorkflow(string owner, string name, string workflowFileName, WorkflowRunsRequest workflowRunsRequest, ApiOptions options);
}
public interface Octokit.IActionsWorkflowsClient {
    public IActionsWorkflowJobsClient Jobs { get; }
    public IActionsWorkflowRunsClient Runs { get; }
    public abstract virtual Task CreateDispatch(string owner, string name, string workflowFileName, CreateWorkflowDispatch createDispatch);
    public abstract virtual Task CreateDispatch(string owner, string name, long workflowId, CreateWorkflowDispatch createDispatch);
    public abstract virtual Task Disable(string owner, string name, string workflowFileName);
    public abstract virtual Task Disable(string owner, string name, long workflowId);
    public abstract virtual Task Enable(string owner, string name, string workflowFileName);
    public abstract virtual Task Enable(string owner, string name, long workflowId);
    public abstract virtual Task`1<Workflow> Get(string owner, string name, string workflowFileName);
    public abstract virtual Task`1<Workflow> Get(string owner, string name, long workflowId);
    public abstract virtual Task`1<WorkflowUsage> GetUsage(string owner, string name, string workflowFileName);
    public abstract virtual Task`1<WorkflowUsage> GetUsage(string owner, string name, long workflowId);
    public abstract virtual Task`1<WorkflowsResponse> List(string owner, string name);
    public abstract virtual Task`1<WorkflowsResponse> List(string owner, string name, ApiOptions options);
    public abstract virtual IActionsWorkflowJobsClient get_Jobs();
    public abstract virtual IActionsWorkflowRunsClient get_Runs();
}
public interface Octokit.IActivitiesClient {
    public IEventsClient Events { get; }
    public IStarredClient Starring { get; }
    public IWatchedClient Watching { get; }
    public IFeedsClient Feeds { get; }
    public INotificationsClient Notifications { get; }
    public abstract virtual IEventsClient get_Events();
    public abstract virtual IStarredClient get_Starring();
    public abstract virtual IWatchedClient get_Watching();
    public abstract virtual IFeedsClient get_Feeds();
    public abstract virtual INotificationsClient get_Notifications();
}
public interface Octokit.IApiConnection {
    public IConnection Connection { get; }
    public abstract virtual IConnection get_Connection();
    public abstract virtual Task`1<T> Get(Uri uri);
    public abstract virtual Task`1<T> Get(Uri uri, IDictionary`2<string, string> parameters);
    public abstract virtual Task`1<T> Get(Uri uri, IDictionary`2<string, string> parameters, string accepts);
    public abstract virtual Task`1<string> GetHtml(Uri uri, IDictionary`2<string, string> parameters);
    public abstract virtual Task`1<Byte[]> GetRaw(Uri uri, IDictionary`2<string, string> parameters);
    public abstract virtual Task`1<Stream> GetRawStream(Uri uri, IDictionary`2<string, string> parameters);
    public abstract virtual Task`1<IReadOnlyList`1<T>> GetAll(Uri uri);
    public abstract virtual Task`1<IReadOnlyList`1<T>> GetAll(Uri uri, ApiOptions options);
    public abstract virtual Task`1<IReadOnlyList`1<T>> GetAll(Uri uri, IDictionary`2<string, string> parameters);
    public abstract virtual Task`1<IReadOnlyList`1<T>> GetAll(Uri uri, string accepts);
    public abstract virtual Task`1<IReadOnlyList`1<T>> GetAll(Uri uri, IDictionary`2<string, string> parameters, ApiOptions options);
    public abstract virtual Task`1<IReadOnlyList`1<T>> GetAll(Uri uri, IDictionary`2<string, string> parameters, string accepts);
    public abstract virtual Task`1<IReadOnlyList`1<T>> GetAll(Uri uri, IDictionary`2<string, string> parameters, string accepts, ApiOptions options);
    public abstract virtual Task`1<IReadOnlyList`1<T>> GetAll(Uri uri, IDictionary`2<string, string> parameters, string accepts, ApiOptions options, Func`2<object, object> preprocessResponseBody);
    public abstract virtual Task Post(Uri uri, CancellationToken cancellationToken);
    public abstract virtual Task`1<T> Post(Uri uri, CancellationToken cancellationToken);
    public abstract virtual Task`1<T> Post(Uri uri, object data, CancellationToken cancellationToken);
    public abstract virtual Task`1<T> Post(Uri uri, object data, string accepts, CancellationToken cancellationToken);
    public abstract virtual Task`1<T> Post(Uri uri, object data, string accepts, string contentType, CancellationToken cancellationToken);
    public abstract virtual Task`1<T> Post(Uri uri, object data, string accepts, string contentType, string twoFactorAuthenticationCode, CancellationToken cancellationToken);
    public abstract virtual Task`1<T> Post(Uri uri, object data, string accepts, string contentType, TimeSpan timeout, CancellationToken cancellationToken);
    public abstract virtual Task Put(Uri uri);
    public abstract virtual Task Put(Uri uri, object data);
    public abstract virtual Task`1<T> Put(Uri uri, object data);
    public abstract virtual Task`1<T> Put(Uri uri, object data, string twoFactorAuthenticationCode);
    public abstract virtual Task`1<T> Put(Uri uri, object data, string twoFactorAuthenticationCode, string accepts);
    public abstract virtual Task Patch(Uri uri);
    public abstract virtual Task Patch(Uri uri, object data);
    public abstract virtual Task Patch(Uri uri, string accepts);
    public abstract virtual Task Patch(Uri uri, object data, string accepts);
    public abstract virtual Task`1<T> Patch(Uri uri, object data);
    public abstract virtual Task`1<T> Patch(Uri uri, object data, string accepts);
    public abstract virtual Task Delete(Uri uri);
    public abstract virtual Task Delete(Uri uri, string twoFactorAuthenticationCode);
    public abstract virtual Task Delete(Uri uri, object data);
    public abstract virtual Task Delete(Uri uri, object data, string accepts);
    public abstract virtual Task`1<T> Delete(Uri uri, object data);
    public abstract virtual Task`1<T> Delete(Uri uri, string accepts);
    public abstract virtual Task`1<T> Delete(Uri uri, object data, string accepts);
    public abstract virtual Task`1<IReadOnlyList`1<T>> GetQueuedOperation(Uri uri, CancellationToken cancellationToken);
}
public interface Octokit.IApiInfoProvider {
    public abstract virtual ApiInfo GetLastApiInfo();
}
public interface Octokit.IApiPagination {
    public abstract virtual Task`1<IReadOnlyList`1<T>> GetAllPages(Func`1<Task`1<IReadOnlyPagedCollection`1<T>>> getFirstPage, Uri uri);
}
public interface Octokit.IApiResponse`1 {
    public T Body { get; }
    public IResponse HttpResponse { get; }
    public abstract virtual T get_Body();
    public abstract virtual IResponse get_HttpResponse();
}
public interface Octokit.IAssigneesClient {
    public abstract virtual Task`1<IReadOnlyList`1<User>> GetAllForRepository(string owner, string name);
    public abstract virtual Task`1<IReadOnlyList`1<User>> GetAllForRepository(long repositoryId);
    public abstract virtual Task`1<IReadOnlyList`1<User>> GetAllForRepository(string owner, string name, ApiOptions options);
    public abstract virtual Task`1<IReadOnlyList`1<User>> GetAllForRepository(long repositoryId, ApiOptions options);
    public abstract virtual Task`1<bool> CheckAssignee(string owner, string name, string assignee);
    public abstract virtual Task`1<Issue> AddAssignees(string owner, string name, int issueNumber, AssigneesUpdate assignees);
    public abstract virtual Task`1<Issue> RemoveAssignees(string owner, string name, int issueNumber, AssigneesUpdate assignees);
    public abstract virtual Task`1<bool> CheckAssignee(long repositoryId, string assignee);
}
public interface Octokit.IAuthorizationsClient {
    public abstract virtual Task`1<IReadOnlyList`1<Authorization>> GetAll();
    public abstract virtual Task`1<IReadOnlyList`1<Authorization>> GetAll(ApiOptions options);
    public abstract virtual Task`1<Authorization> Get(long id);
    public abstract virtual Task`1<ApplicationAuthorization> Create(NewAuthorization newAuthorization);
    public abstract virtual Task`1<ApplicationAuthorization> Create(NewAuthorization newAuthorization, string twoFactorAuthenticationCode);
    public abstract virtual Task`1<ApplicationAuthorization> Create(string clientId, string clientSecret, NewAuthorization newAuthorization);
    public abstract virtual Task`1<ApplicationAuthorization> Create(string clientId, string clientSecret, NewAuthorization newAuthorization, string twoFactorAuthenticationCode);
    public abstract virtual Task`1<ApplicationAuthorization> GetOrCreateApplicationAuthentication(string clientId, string clientSecret, NewAuthorization newAuthorization);
    public abstract virtual Task`1<ApplicationAuthorization> GetOrCreateApplicationAuthentication(string clientId, string clientSecret, NewAuthorization newAuthorization, string twoFactorAuthenticationCode);
    public abstract virtual Task`1<ApplicationAuthorization> CheckApplicationAuthentication(string clientId, string accessToken);
    public abstract virtual Task`1<ApplicationAuthorization> ResetApplicationAuthentication(string clientId, string accessToken);
    public abstract virtual Task RevokeApplicationAuthentication(string clientId, string accessToken);
    public abstract virtual Task`1<Authorization> Update(long id, AuthorizationUpdate authorizationUpdate);
    public abstract virtual Task Delete(long id);
    public abstract virtual Task Delete(long id, string twoFactorAuthenticationCode);
}
public interface Octokit.IAutolinksClient {
    public abstract virtual Task`1<Autolink> Get(string owner, string repo, int autolinkId);
    public abstract virtual Task`1<IReadOnlyList`1<Autolink>> GetAll(string owner, string repo);
    public abstract virtual Task`1<IReadOnlyList`1<Autolink>> GetAll(string owner, string repo, ApiOptions options);
    public abstract virtual Task`1<Autolink> Create(string owner, string repo, AutolinkRequest autolink);
    public abstract virtual Task Delete(string owner, string repo, int autolinkId);
}
public interface Octokit.IBlobsClient {
    public abstract virtual Task`1<Blob> Get(string owner, string name, string reference);
    public abstract virtual Task`1<Blob> Get(long repositoryId, string reference);
    public abstract virtual Task`1<BlobReference> Create(string owner, string name, NewBlob newBlob);
    public abstract virtual Task`1<BlobReference> Create(long repositoryId, NewBlob newBlob);
}
public interface Octokit.ICheckRunsClient {
    public abstract virtual Task`1<CheckRun> Create(string owner, string name, NewCheckRun newCheckRun);
    public abstract virtual Task`1<CheckRun> Create(long repositoryId, NewCheckRun newCheckRun);
    public abstract virtual Task`1<CheckRun> Update(string owner, string name, long checkRunId, CheckRunUpdate checkRunUpdate);
    public abstract virtual Task`1<CheckRun> Update(long repositoryId, long checkRunId, CheckRunUpdate checkRunUpdate);
    public abstract virtual Task`1<CheckRunsResponse> GetAllForReference(string owner, string name, string reference);
    public abstract virtual Task`1<CheckRunsResponse> GetAllForReference(long repositoryId, string reference);
    public abstract virtual Task`1<CheckRunsResponse> GetAllForReference(string owner, string name, string reference, CheckRunRequest checkRunRequest);
    public abstract virtual Task`1<CheckRunsResponse> GetAllForReference(long repositoryId, string reference, CheckRunRequest checkRunRequest);
    public abstract virtual Task`1<CheckRunsResponse> GetAllForReference(string owner, string name, string reference, CheckRunRequest checkRunRequest, ApiOptions options);
    public abstract virtual Task`1<CheckRunsResponse> GetAllForReference(long repositoryId, string reference, CheckRunRequest checkRunRequest, ApiOptions options);
    public abstract virtual Task`1<CheckRunsResponse> GetAllForCheckSuite(string owner, string name, long checkSuiteId);
    public abstract virtual Task`1<CheckRunsResponse> GetAllForCheckSuite(long repositoryId, long checkSuiteId);
    public abstract virtual Task`1<CheckRunsResponse> GetAllForCheckSuite(string owner, string name, long checkSuiteId, CheckRunRequest checkRunRequest);
    public abstract virtual Task`1<CheckRunsResponse> GetAllForCheckSuite(long repositoryId, long checkSuiteId, CheckRunRequest checkRunRequest);
    public abstract virtual Task`1<CheckRunsResponse> GetAllForCheckSuite(string owner, string name, long checkSuiteId, CheckRunRequest checkRunRequest, ApiOptions options);
    public abstract virtual Task`1<CheckRunsResponse> GetAllForCheckSuite(long repositoryId, long checkSuiteId, CheckRunRequest checkRunRequest, ApiOptions options);
    public abstract virtual Task`1<CheckRun> Get(string owner, string name, long checkRunId);
    public abstract virtual Task`1<CheckRun> Get(long repositoryId, long checkRunId);
    public abstract virtual Task`1<IReadOnlyList`1<CheckRunAnnotation>> GetAllAnnotations(string owner, string name, long checkRunId);
    public abstract virtual Task`1<IReadOnlyList`1<CheckRunAnnotation>> GetAllAnnotations(long repositoryId, long checkRunId);
    public abstract virtual Task`1<IReadOnlyList`1<CheckRunAnnotation>> GetAllAnnotations(string owner, string name, long checkRunId, ApiOptions options);
    public abstract virtual Task`1<IReadOnlyList`1<CheckRunAnnotation>> GetAllAnnotations(long repositoryId, long checkRunId, ApiOptions options);
}
public interface Octokit.IChecksClient {
    public ICheckRunsClient Run { get; }
    public ICheckSuitesClient Suite { get; }
    public abstract virtual ICheckRunsClient get_Run();
    public abstract virtual ICheckSuitesClient get_Suite();
}
public interface Octokit.ICheckSuitesClient {
    public abstract virtual Task`1<CheckSuite> Get(string owner, string name, long checkSuiteId);
    public abstract virtual Task`1<CheckSuite> Get(long repositoryId, long checkSuiteId);
    public abstract virtual Task`1<CheckSuitesResponse> GetAllForReference(string owner, string name, string reference);
    public abstract virtual Task`1<CheckSuitesResponse> GetAllForReference(long repositoryId, string reference);
    public abstract virtual Task`1<CheckSuitesResponse> GetAllForReference(string owner, string name, string reference, CheckSuiteRequest request);
    public abstract virtual Task`1<CheckSuitesResponse> GetAllForReference(long repositoryId, string reference, CheckSuiteRequest request);
    public abstract virtual Task`1<CheckSuitesResponse> GetAllForReference(string owner, string name, string reference, CheckSuiteRequest request, ApiOptions options);
    public abstract virtual Task`1<CheckSuitesResponse> GetAllForReference(long repositoryId, string reference, CheckSuiteRequest request, ApiOptions options);
    public abstract virtual Task`1<CheckSuitePreferencesResponse> UpdatePreferences(string owner, string name, CheckSuitePreferences preferences);
    public abstract virtual Task`1<CheckSuitePreferencesResponse> UpdatePreferences(long repositoryId, CheckSuitePreferences preferences);
    public abstract virtual Task`1<CheckSuite> Create(string owner, string name, NewCheckSuite newCheckSuite);
    public abstract virtual Task`1<CheckSuite> Create(long repositoryId, NewCheckSuite newCheckSuite);
    public abstract virtual Task`1<bool> Rerequest(string owner, string name, long checkSuiteId);
    public abstract virtual Task`1<bool> Rerequest(long repositoryId, long checkSuiteId);
}
public interface Octokit.ICodespacesClient {
    public abstract virtual Task`1<CodespacesCollection> GetAll();
    public abstract virtual Task`1<CodespacesCollection> GetForRepository(string owner, string repo);
    public abstract virtual Task`1<Codespace> Get(string codespaceName);
    public abstract virtual Task`1<Codespace> Start(string codespaceName);
    public abstract virtual Task`1<Codespace> Stop(string codespaceName);
}
public interface Octokit.ICommitCommentReactionsClient {
    public abstract virtual Task`1<Reaction> Create(string owner, string name, long commentId, NewReaction reaction);
    public abstract virtual Task`1<Reaction> Create(long repositoryId, long commentId, NewReaction reaction);
    public abstract virtual Task`1<IReadOnlyList`1<Reaction>> GetAll(string owner, string name, long commentId);
    public abstract virtual Task`1<IReadOnlyList`1<Reaction>> GetAll(string owner, string name, long commentId, ApiOptions options);
    public abstract virtual Task`1<IReadOnlyList`1<Reaction>> GetAll(long repositoryId, long commentId);
    public abstract virtual Task`1<IReadOnlyList`1<Reaction>> GetAll(long repositoryId, long commentId, ApiOptions options);
    public abstract virtual Task Delete(string owner, string name, long commentId, long reactionId);
    public abstract virtual Task Delete(long repositoryId, long commentId, long reactionId);
}
public interface Octokit.ICommitsClient {
    public abstract virtual Task`1<Commit> Get(string owner, string name, string reference);
    public abstract virtual Task`1<Commit> Get(long repositoryId, string reference);
    public abstract virtual Task`1<Commit> Create(string owner, string name, NewCommit commit);
    public abstract virtual Task`1<Commit> Create(long repositoryId, NewCommit commit);
}
public interface Octokit.ICommitStatusClient {
    public abstract virtual Task`1<IReadOnlyList`1<CommitStatus>> GetAll(string owner, string name, string reference);
    public abstract virtual Task`1<IReadOnlyList`1<CommitStatus>> GetAll(long repositoryId, string reference);
    public abstract virtual Task`1<IReadOnlyList`1<CommitStatus>> GetAll(string owner, string name, string reference, ApiOptions options);
    public abstract virtual Task`1<IReadOnlyList`1<CommitStatus>> GetAll(long repositoryId, string reference, ApiOptions options);
    public abstract virtual Task`1<CombinedCommitStatus> GetCombined(string owner, string name, string reference);
    public abstract virtual Task`1<CombinedCommitStatus> GetCombined(long repositoryId, string reference);
    public abstract virtual Task`1<CommitStatus> Create(string owner, string name, string reference, NewCommitStatus newCommitStatus);
    public abstract virtual Task`1<CommitStatus> Create(long repositoryId, string reference, NewCommitStatus newCommitStatus);
}
public interface Octokit.IConnection {
    public Uri BaseAddress { get; }
    public ICredentialStore CredentialStore { get; }
    public Credentials Credentials { get; public set; }
    unknown IResponseCache ResponseCache {public set; }
    public abstract virtual Task`1<IApiResponse`1<string>> GetHtml(Uri uri, IDictionary`2<string, string> parameters);
    public abstract virtual Task`1<IApiResponse`1<Byte[]>> GetRaw(Uri uri, IDictionary`2<string, string> parameters);
    public abstract virtual Task`1<IApiResponse`1<Byte[]>> GetRaw(Uri uri, IDictionary`2<string, string> parameters, TimeSpan timeout);
    public abstract virtual Task`1<IApiResponse`1<Stream>> GetRawStream(Uri uri, IDictionary`2<string, string> parameters);
    public abstract virtual Task`1<IApiResponse`1<T>> Get(Uri uri, IDictionary`2<string, string> parameters);
    public abstract virtual Task`1<IApiResponse`1<T>> Get(Uri uri, IDictionary`2<string, string> parameters, string accepts);
    public abstract virtual Task`1<IApiResponse`1<T>> Get(Uri uri, IDictionary`2<string, string> parameters, string accepts, CancellationToken cancellationToken);
    public abstract virtual Task`1<IApiResponse`1<T>> Get(Uri uri, IDictionary`2<string, string> parameters, string accepts, CancellationToken cancellationToken, Func`2<object, object> preprocessResponseBody);
    public abstract virtual Task`1<IApiResponse`1<T>> Get(Uri uri, TimeSpan timeout);
    public abstract virtual Task`1<HttpStatusCode> Patch(Uri uri);
    public abstract virtual Task`1<HttpStatusCode> Patch(Uri uri, object body);
    public abstract virtual Task`1<HttpStatusCode> Patch(Uri uri, string accepts);
    public abstract virtual Task`1<HttpStatusCode> Patch(Uri uri, object body, string accepts);
    public abstract virtual Task`1<IApiResponse`1<T>> Patch(Uri uri, object body);
    public abstract virtual Task`1<IApiResponse`1<T>> Patch(Uri uri, object body, string accepts);
    public abstract virtual Task`1<HttpStatusCode> Post(Uri uri, CancellationToken cancellationToken);
    public abstract virtual Task`1<HttpStatusCode> Post(Uri uri, object body, string accepts, CancellationToken cancellationToken);
    public abstract virtual Task`1<IApiResponse`1<T>> Post(Uri uri, CancellationToken cancellationToken);
    public abstract virtual Task`1<IApiResponse`1<T>> Post(Uri uri, object body, string accepts, string contentType, IDictionary`2<string, string> parameters, CancellationToken cancellationToken);
    public abstract virtual Task`1<IApiResponse`1<T>> Post(Uri uri, object body, string accepts, string contentType, string twoFactorAuthenticationCode, CancellationToken cancellationToken);
    public abstract virtual Task`1<IApiResponse`1<T>> Post(Uri uri, object body, string accepts, string contentType, TimeSpan timeout, CancellationToken cancellationToken);
    public abstract virtual Task`1<IApiResponse`1<T>> Post(Uri uri, object body, string accepts, string contentType, Uri baseAddress, CancellationToken cancellationToken);
    public abstract virtual Task`1<IApiResponse`1<T>> Put(Uri uri, object body);
    public abstract virtual Task`1<IApiResponse`1<T>> Put(Uri uri, object body, string twoFactorAuthenticationCode);
    public abstract virtual Task`1<IApiResponse`1<T>> Put(Uri uri, object body, string twoFactorAuthenticationCode, string accepts);
    public abstract virtual Task`1<HttpStatusCode> Put(Uri uri);
    public abstract virtual Task`1<HttpStatusCode> Put(Uri uri, object body);
    public abstract virtual Task`1<HttpStatusCode> Delete(Uri uri);
    public abstract virtual Task`1<HttpStatusCode> Delete(Uri uri, string twoFactorAuthenticationCode);
    public abstract virtual Task`1<HttpStatusCode> Delete(Uri uri, object data);
    public abstract virtual Task`1<HttpStatusCode> Delete(Uri uri, object data, string accepts);
    public abstract virtual Task`1<IApiResponse`1<T>> Delete(Uri uri, object data);
    public abstract virtual Task`1<IApiResponse`1<T>> Delete(Uri uri, object data, string accepts);
    public abstract virtual Uri get_BaseAddress();
    public abstract virtual ICredentialStore get_CredentialStore();
    public abstract virtual Credentials get_Credentials();
    public abstract virtual void set_Credentials(Credentials value);
    public abstract virtual void set_ResponseCache(IResponseCache value);
    public abstract virtual void SetRequestTimeout(TimeSpan timeout);
}
public interface Octokit.ICopilotClient {
    public ICopilotLicenseClient Licensing { get; }
    public abstract virtual Task`1<BillingSettings> GetSummaryForOrganization(string organization);
    public abstract virtual ICopilotLicenseClient get_Licensing();
}
public interface Octokit.ICopilotLicenseClient {
    public abstract virtual Task`1<CopilotSeatAllocation> Remove(string organization, string userName);
    public abstract virtual Task`1<CopilotSeatAllocation> Remove(string organization, UserSeatAllocation userSeatAllocation);
    public abstract virtual Task`1<CopilotSeatAllocation> Assign(string organization, string userName);
    public abstract virtual Task`1<CopilotSeatAllocation> Assign(string organization, UserSeatAllocation userSeatAllocation);
    public abstract virtual Task`1<IReadOnlyList`1<CopilotSeats>> GetAll(string organization, ApiOptions options);
}
public interface Octokit.ICredentialStore {
    public abstract virtual Task`1<Credentials> GetCredentials();
}
public interface Octokit.IDependencyGraphClient {
    public IDependencyReviewClient DependencyReview { get; }
    public IDependencySubmissionClient DependencySubmission { get; }
    public abstract virtual IDependencyReviewClient get_DependencyReview();
    public abstract virtual IDependencySubmissionClient get_DependencySubmission();
}
public interface Octokit.IDependencyReviewClient {
    [ExcludeFromPaginationApiOptionsConventionTestAttribute("Pagination not supported by GitHub API.")]
public abstract virtual Task`1<IReadOnlyList`1<DependencyDiff>> GetAll(string owner, string name, string base, string head);
    [ExcludeFromPaginationApiOptionsConventionTestAttribute("Pagination not supported by GitHub API.")]
public abstract virtual Task`1<IReadOnlyList`1<DependencyDiff>> GetAll(long repositoryId, string base, string head);
}
public interface Octokit.IDependencySubmissionClient {
    public abstract virtual Task`1<DependencySnapshotSubmission> Create(string owner, string name, NewDependencySnapshot snapshot);
    public abstract virtual Task`1<DependencySnapshotSubmission> Create(long repositoryId, NewDependencySnapshot snapshot);
}
public interface Octokit.IDeploymentsClient {
    public IDeploymentStatusClient Status { get; }
    public abstract virtual Task`1<IReadOnlyList`1<Deployment>> GetAll(string owner, string name);
    public abstract virtual Task`1<IReadOnlyList`1<Deployment>> GetAll(long repositoryId);
    public abstract virtual Task`1<IReadOnlyList`1<Deployment>> GetAll(string owner, string name, ApiOptions options);
    public abstract virtual Task`1<IReadOnlyList`1<Deployment>> GetAll(long repositoryId, ApiOptions options);
    public abstract virtual Task`1<Deployment> Create(string owner, string name, NewDeployment newDeployment);
    public abstract virtual Task`1<Deployment> Create(long repositoryId, NewDeployment newDeployment);
    public abstract virtual IDeploymentStatusClient get_Status();
}
public interface Octokit.IDeploymentStatusClient {
    public abstract virtual Task`1<IReadOnlyList`1<DeploymentStatus>> GetAll(string owner, string name, long deploymentId);
    public abstract virtual Task`1<IReadOnlyList`1<DeploymentStatus>> GetAll(long repositoryId, long deploymentId);
    public abstract virtual Task`1<IReadOnlyList`1<DeploymentStatus>> GetAll(string owner, string name, long deploymentId, ApiOptions options);
    public abstract virtual Task`1<IReadOnlyList`1<DeploymentStatus>> GetAll(long repositoryId, long deploymentId, ApiOptions options);
    public abstract virtual Task`1<DeploymentStatus> Create(string owner, string name, long deploymentId, NewDeploymentStatus newDeploymentStatus);
    public abstract virtual Task`1<DeploymentStatus> Create(long repositoryId, long deploymentId, NewDeploymentStatus newDeploymentStatus);
}
public interface Octokit.IEmojisClient {
    [ExcludeFromPaginationApiOptionsConventionTestAttribute("Pagination not supported by GitHub API (tested 29/08/2017)")]
public abstract virtual Task`1<IReadOnlyList`1<Emoji>> GetAllEmojis();
}
public interface Octokit.IEnterpriseAdminStatsClient {
    public abstract virtual Task`1<AdminStatsIssues> GetStatisticsIssues();
    public abstract virtual Task`1<AdminStatsHooks> GetStatisticsHooks();
    public abstract virtual Task`1<AdminStatsMilestones> GetStatisticsMilestones();
    public abstract virtual Task`1<AdminStatsOrgs> GetStatisticsOrgs();
    public abstract virtual Task`1<AdminStatsComments> GetStatisticsComments();
    public abstract virtual Task`1<AdminStatsPages> GetStatisticsPages();
    public abstract virtual Task`1<AdminStatsUsers> GetStatisticsUsers();
    public abstract virtual Task`1<AdminStatsGists> GetStatisticsGists();
    public abstract virtual Task`1<AdminStatsPulls> GetStatisticsPulls();
    public abstract virtual Task`1<AdminStatsRepos> GetStatisticsRepos();
    public abstract virtual Task`1<AdminStats> GetStatisticsAll();
}
public interface Octokit.IEnterpriseAuditLogClient {
    public abstract virtual Task`1<IReadOnlyList`1<AuditLogEvent>> GetAll(string enterprise);
    public abstract virtual Task`1<IReadOnlyList`1<AuditLogEvent>> GetAll(string enterprise, AuditLogRequest request);
    public abstract virtual Task`1<IReadOnlyList`1<AuditLogEvent>> GetAll(string enterprise, AuditLogApiOptions auditLogApiOptions);
    public abstract virtual Task`1<IReadOnlyList`1<AuditLogEvent>> GetAll(string enterprise, AuditLogRequest request, AuditLogApiOptions auditLogApiOptions);
    public abstract virtual Task`1<IReadOnlyList`1<object>> GetAllJson(string enterprise);
    public abstract virtual Task`1<IReadOnlyList`1<object>> GetAllJson(string enterprise, AuditLogRequest request);
    public abstract virtual Task`1<IReadOnlyList`1<object>> GetAllJson(string enterprise, AuditLogApiOptions auditLogApiOptions);
    public abstract virtual Task`1<IReadOnlyList`1<object>> GetAllJson(string enterprise, AuditLogRequest request, AuditLogApiOptions auditLogApiOptions);
}
public interface Octokit.IEnterpriseClient {
    public IEnterpriseAdminStatsClient AdminStats { get; }
    public IEnterpriseAuditLogClient AuditLog { get; }
    public IEnterpriseLdapClient Ldap { get; }
    public IEnterpriseLicenseClient License { get; }
    public IEnterpriseManagementConsoleClient ManagementConsole { get; }
    public IEnterpriseOrganizationClient Organization { get; }
    public IEnterpriseSearchIndexingClient SearchIndexing { get; }
    public IEnterprisePreReceiveEnvironmentsClient PreReceiveEnvironment { get; }
    public IEnterprisePreReceiveHooksClient PreReceiveHook { get; }
    public abstract virtual IEnterpriseAdminStatsClient get_AdminStats();
    public abstract virtual IEnterpriseAuditLogClient get_AuditLog();
    public abstract virtual IEnterpriseLdapClient get_Ldap();
    public abstract virtual IEnterpriseLicenseClient get_License();
    public abstract virtual IEnterpriseManagementConsoleClient get_ManagementConsole();
    public abstract virtual IEnterpriseOrganizationClient get_Organization();
    public abstract virtual IEnterpriseSearchIndexingClient get_SearchIndexing();
    public abstract virtual IEnterprisePreReceiveEnvironmentsClient get_PreReceiveEnvironment();
    public abstract virtual IEnterprisePreReceiveHooksClient get_PreReceiveHook();
}
public interface Octokit.IEnterpriseLdapClient {
    public abstract virtual Task`1<User> UpdateUserMapping(string userName, NewLdapMapping newLdapMapping);
    public abstract virtual Task`1<LdapSyncResponse> QueueSyncUserMapping(string userName);
    public abstract virtual Task`1<Team> UpdateTeamMapping(long teamId, NewLdapMapping newLdapMapping);
    public abstract virtual Task`1<LdapSyncResponse> QueueSyncTeamMapping(long teamId);
}
public interface Octokit.IEnterpriseLicenseClient {
    public abstract virtual Task`1<LicenseInfo> Get();
}
public interface Octokit.IEnterpriseManagementConsoleClient {
    public abstract virtual Task`1<MaintenanceModeResponse> GetMaintenanceMode(string managementConsolePassword);
    public abstract virtual Task`1<MaintenanceModeResponse> EditMaintenanceMode(UpdateMaintenanceRequest maintenance, string managementConsolePassword);
}
public interface Octokit.IEnterpriseOrganizationClient {
    public abstract virtual Task`1<Organization> Create(NewOrganization newOrganization);
}
public interface Octokit.IEnterprisePreReceiveEnvironmentsClient {
    public abstract virtual Task`1<IReadOnlyList`1<PreReceiveEnvironment>> GetAll();
    public abstract virtual Task`1<IReadOnlyList`1<PreReceiveEnvironment>> GetAll(ApiOptions options);
    public abstract virtual Task`1<PreReceiveEnvironment> Get(long environmentId);
    public abstract virtual Task`1<PreReceiveEnvironment> Create(NewPreReceiveEnvironment newPreReceiveEnvironment);
    public abstract virtual Task`1<PreReceiveEnvironment> Edit(long environmentId, UpdatePreReceiveEnvironment updatePreReceiveEnvironment);
    public abstract virtual Task Delete(long environmentId);
    public abstract virtual Task`1<PreReceiveEnvironmentDownload> DownloadStatus(long environmentId);
    public abstract virtual Task`1<PreReceiveEnvironmentDownload> TriggerDownload(long environmentId);
}
public interface Octokit.IEnterprisePreReceiveHooksClient {
    public abstract virtual Task`1<IReadOnlyList`1<PreReceiveHook>> GetAll();
    public abstract virtual Task`1<IReadOnlyList`1<PreReceiveHook>> GetAll(ApiOptions options);
    public abstract virtual Task`1<PreReceiveHook> Get(long hookId);
    public abstract virtual Task`1<PreReceiveHook> Create(NewPreReceiveHook newPreReceiveHook);
    public abstract virtual Task`1<PreReceiveHook> Edit(long hookId, UpdatePreReceiveHook updatePreReceiveHook);
    public abstract virtual Task Delete(long hookId);
}
public interface Octokit.IEnterpriseProbe {
    public abstract virtual Task`1<EnterpriseProbeResult> Probe(Uri enterpriseBaseUrl);
}
public interface Octokit.IEnterpriseSearchIndexingClient {
    public abstract virtual Task`1<SearchIndexingResponse> Queue(string owner);
    public abstract virtual Task`1<SearchIndexingResponse> Queue(string owner, string repository);
    public abstract virtual Task`1<SearchIndexingResponse> QueueAll(string owner);
    public abstract virtual Task`1<SearchIndexingResponse> QueueAllIssues(string owner, string repository);
    public abstract virtual Task`1<SearchIndexingResponse> QueueAllIssues(string owner);
    public abstract virtual Task`1<SearchIndexingResponse> QueueAllCode(string owner, string repository);
    public abstract virtual Task`1<SearchIndexingResponse> QueueAllCode(string owner);
}
public interface Octokit.IEventsClient {
    public abstract virtual Task`1<IReadOnlyList`1<Activity>> GetAll();
    public abstract virtual Task`1<IReadOnlyList`1<Activity>> GetAll(ApiOptions options);
    public abstract virtual Task`1<IReadOnlyList`1<Activity>> GetAllForRepository(string owner, string name);
    public abstract virtual Task`1<IReadOnlyList`1<Activity>> GetAllForRepository(long repositoryId);
    public abstract virtual Task`1<IReadOnlyList`1<Activity>> GetAllForRepository(string owner, string name, ApiOptions options);
    public abstract virtual Task`1<IReadOnlyList`1<Activity>> GetAllForRepository(long repositoryId, ApiOptions options);
    public abstract virtual Task`1<IReadOnlyList`1<IssueEvent>> GetAllIssuesForRepository(string owner, string name);
    public abstract virtual Task`1<IReadOnlyList`1<IssueEvent>> GetAllIssuesForRepository(long repositoryId);
    public abstract virtual Task`1<IReadOnlyList`1<IssueEvent>> GetAllIssuesForRepository(string owner, string name, ApiOptions options);
    public abstract virtual Task`1<IReadOnlyList`1<IssueEvent>> GetAllIssuesForRepository(long repositoryId, ApiOptions options);
    public abstract virtual Task`1<IReadOnlyList`1<Activity>> GetAllForRepositoryNetwork(string owner, string name);
    public abstract virtual Task`1<IReadOnlyList`1<Activity>> GetAllForRepositoryNetwork(string owner, string name, ApiOptions options);
    public abstract virtual Task`1<IReadOnlyList`1<Activity>> GetAllForOrganization(string organization);
    public abstract virtual Task`1<IReadOnlyList`1<Activity>> GetAllForOrganization(string organization, ApiOptions options);
    public abstract virtual Task`1<IReadOnlyList`1<Activity>> GetAllUserReceived(string user);
    public abstract virtual Task`1<IReadOnlyList`1<Activity>> GetAllUserReceived(string user, ApiOptions options);
    public abstract virtual Task`1<IReadOnlyList`1<Activity>> GetAllUserReceivedPublic(string user);
    public abstract virtual Task`1<IReadOnlyList`1<Activity>> GetAllUserReceivedPublic(string user, ApiOptions options);
    public abstract virtual Task`1<IReadOnlyList`1<Activity>> GetAllUserPerformed(string user);
    public abstract virtual Task`1<IReadOnlyList`1<Activity>> GetAllUserPerformed(string user, ApiOptions options);
    public abstract virtual Task`1<IReadOnlyList`1<Activity>> GetAllUserPerformedPublic(string user);
    public abstract virtual Task`1<IReadOnlyList`1<Activity>> GetAllUserPerformedPublic(string user, ApiOptions options);
    public abstract virtual Task`1<IReadOnlyList`1<Activity>> GetAllForAnOrganization(string user, string organization);
    public abstract virtual Task`1<IReadOnlyList`1<Activity>> GetAllForAnOrganization(string user, string organization, ApiOptions options);
}
public interface Octokit.IFeedsClient {
    public abstract virtual Task`1<Feed> GetFeeds();
}
public interface Octokit.IFollowersClient {
    public abstract virtual Task`1<IReadOnlyList`1<User>> GetAllForCurrent();
    public abstract virtual Task`1<IReadOnlyList`1<User>> GetAllForCurrent(ApiOptions options);
    public abstract virtual Task`1<IReadOnlyList`1<User>> GetAll(string login);
    public abstract virtual Task`1<IReadOnlyList`1<User>> GetAll(string login, ApiOptions options);
    public abstract virtual Task`1<IReadOnlyList`1<User>> GetAllFollowingForCurrent();
    public abstract virtual Task`1<IReadOnlyList`1<User>> GetAllFollowingForCurrent(ApiOptions options);
    public abstract virtual Task`1<IReadOnlyList`1<User>> GetAllFollowing(string login);
    public abstract virtual Task`1<IReadOnlyList`1<User>> GetAllFollowing(string login, ApiOptions options);
    public abstract virtual Task`1<bool> IsFollowingForCurrent(string following);
    public abstract virtual Task`1<bool> IsFollowing(string login, string following);
    public abstract virtual Task`1<bool> Follow(string login);
    public abstract virtual Task Unfollow(string login);
}
public interface Octokit.IGistCommentsClient {
    public abstract virtual Task`1<GistComment> Get(string gistId, long commentId);
    public abstract virtual Task`1<IReadOnlyList`1<GistComment>> GetAllForGist(string gistId);
    public abstract virtual Task`1<IReadOnlyList`1<GistComment>> GetAllForGist(string gistId, ApiOptions options);
    public abstract virtual Task`1<GistComment> Create(string gistId, string comment);
    public abstract virtual Task`1<GistComment> Update(string gistId, long commentId, string comment);
    public abstract virtual Task Delete(string gistId, long commentId);
}
public interface Octokit.IGistsClient {
    public IGistCommentsClient Comment { get; public set; }
    public abstract virtual IGistCommentsClient get_Comment();
    public abstract virtual void set_Comment(IGistCommentsClient value);
    public abstract virtual Task`1<Gist> Get(string id);
    public abstract virtual Task`1<IReadOnlyList`1<Gist>> GetAll();
    public abstract virtual Task`1<IReadOnlyList`1<Gist>> GetAll(ApiOptions options);
    public abstract virtual Task`1<IReadOnlyList`1<Gist>> GetAll(DateTimeOffset since);
    public abstract virtual Task`1<IReadOnlyList`1<Gist>> GetAll(DateTimeOffset since, ApiOptions options);
    public abstract virtual Task`1<IReadOnlyList`1<Gist>> GetAllPublic();
    public abstract virtual Task`1<IReadOnlyList`1<Gist>> GetAllPublic(ApiOptions options);
    public abstract virtual Task`1<IReadOnlyList`1<Gist>> GetAllPublic(DateTimeOffset since);
    public abstract virtual Task`1<IReadOnlyList`1<Gist>> GetAllPublic(DateTimeOffset since, ApiOptions options);
    public abstract virtual Task`1<IReadOnlyList`1<Gist>> GetAllStarred();
    public abstract virtual Task`1<IReadOnlyList`1<Gist>> GetAllStarred(ApiOptions options);
    public abstract virtual Task`1<IReadOnlyList`1<Gist>> GetAllStarred(DateTimeOffset since);
    public abstract virtual Task`1<IReadOnlyList`1<Gist>> GetAllStarred(DateTimeOffset since, ApiOptions options);
    public abstract virtual Task`1<IReadOnlyList`1<Gist>> GetAllForUser(string user);
    public abstract virtual Task`1<IReadOnlyList`1<Gist>> GetAllForUser(string user, ApiOptions options);
    public abstract virtual Task`1<IReadOnlyList`1<Gist>> GetAllForUser(string user, DateTimeOffset since);
    public abstract virtual Task`1<IReadOnlyList`1<Gist>> GetAllForUser(string user, DateTimeOffset since, ApiOptions options);
    public abstract virtual Task`1<IReadOnlyList`1<GistHistory>> GetAllCommits(string id);
    public abstract virtual Task`1<IReadOnlyList`1<GistHistory>> GetAllCommits(string id, ApiOptions options);
    public abstract virtual Task`1<IReadOnlyList`1<GistFork>> GetAllForks(string id);
    public abstract virtual Task`1<IReadOnlyList`1<GistFork>> GetAllForks(string id, ApiOptions options);
    public abstract virtual Task`1<Gist> Create(NewGist newGist);
    public abstract virtual Task`1<Gist> Fork(string id);
    public abstract virtual Task`1<Gist> Edit(string id, GistUpdate gistUpdate);
    public abstract virtual Task Delete(string id);
    public abstract virtual Task Star(string id);
    public abstract virtual Task Unstar(string id);
    public abstract virtual Task`1<bool> IsStarred(string id);
}
public interface Octokit.IGitDatabaseClient {
    public IBlobsClient Blob { get; }
    public ITagsClient Tag { get; }
    public ITreesClient Tree { get; }
    public ICommitsClient Commit { get; }
    public IReferencesClient Reference { get; }
    public abstract virtual IBlobsClient get_Blob();
    public abstract virtual ITagsClient get_Tag();
    public abstract virtual ITreesClient get_Tree();
    public abstract virtual ICommitsClient get_Commit();
    public abstract virtual IReferencesClient get_Reference();
}
public interface Octokit.IGitHubAppInstallationsClient {
    public abstract virtual Task`1<RepositoriesResponse> GetAllRepositoriesForCurrent();
    public abstract virtual Task`1<RepositoriesResponse> GetAllRepositoriesForCurrent(ApiOptions options);
    public abstract virtual Task`1<RepositoriesResponse> GetAllRepositoriesForCurrentUser(long installationId);
    public abstract virtual Task`1<RepositoriesResponse> GetAllRepositoriesForCurrentUser(long installationId, ApiOptions options);
}
public interface Octokit.IGitHubAppsClient {
    public IGitHubAppInstallationsClient Installation { get; }
    public abstract virtual IGitHubAppInstallationsClient get_Installation();
    public abstract virtual Task`1<GitHubApp> Get(string slug);
    public abstract virtual Task`1<GitHubApp> GetCurrent();
    public abstract virtual Task`1<IReadOnlyList`1<Installation>> GetAllInstallationsForCurrent();
    public abstract virtual Task`1<IReadOnlyList`1<Installation>> GetAllInstallationsForCurrent(ApiOptions options);
    [ObsoleteAttribute("This method will be removed in a future release.  Please use GetInstallationForCurrent() instead")]
public abstract virtual Task`1<Installation> GetInstallation(long installationId);
    public abstract virtual Task`1<Installation> GetInstallationForCurrent(long installationId);
    public abstract virtual Task`1<InstallationsResponse> GetAllInstallationsForCurrentUser();
    public abstract virtual Task`1<InstallationsResponse> GetAllInstallationsForCurrentUser(ApiOptions options);
    public abstract virtual Task`1<AccessToken> CreateInstallationToken(long installationId);
    public abstract virtual Task`1<Installation> GetOrganizationInstallationForCurrent(string organization);
    public abstract virtual Task`1<Installation> GetRepositoryInstallationForCurrent(string owner, string repo);
    public abstract virtual Task`1<Installation> GetRepositoryInstallationForCurrent(long repositoryId);
    public abstract virtual Task`1<Installation> GetUserInstallationForCurrent(string user);
    public abstract virtual Task`1<GitHubAppFromManifest> CreateAppFromManifest(string code);
}
public interface Octokit.IGitHubClient {
    public IConnection Connection { get; }
    public IAuthorizationsClient Authorization { get; }
    public IActivitiesClient Activity { get; }
    public IActionsClient Actions { get; }
    public IGitHubAppsClient GitHubApps { get; }
    public IIssuesClient Issue { get; }
    public IMigrationClient Migration { get; }
    public IMiscellaneousClient Miscellaneous { get; }
    public IOauthClient Oauth { get; }
    public IOrganizationsClient Organization { get; }
    public IPackagesClient Packages { get; }
    public IPullRequestsClient PullRequest { get; }
    public IRepositoriesClient Repository { get; }
    public IGistsClient Gist { get; }
    public IUsersClient User { get; }
    public IGitDatabaseClient Git { get; }
    public ISearchClient Search { get; }
    public IEnterpriseClient Enterprise { get; }
    public IReactionsClient Reaction { get; }
    public IChecksClient Check { get; }
    public IMetaClient Meta { get; }
    public IRateLimitClient RateLimit { get; }
    public IMarkdownClient Markdown { get; }
    public IGitIgnoreClient GitIgnore { get; }
    public ILicensesClient Licenses { get; }
    public IEmojisClient Emojis { get; }
    public ICodespacesClient Codespaces { get; }
    public ICopilotClient Copilot { get; }
    public IDependencyGraphClient DependencyGraph { get; }
    public abstract virtual void SetRequestTimeout(TimeSpan timeout);
    public abstract virtual IConnection get_Connection();
    public abstract virtual IAuthorizationsClient get_Authorization();
    public abstract virtual IActivitiesClient get_Activity();
    public abstract virtual IActionsClient get_Actions();
    public abstract virtual IGitHubAppsClient get_GitHubApps();
    public abstract virtual IIssuesClient get_Issue();
    public abstract virtual IMigrationClient get_Migration();
    public abstract virtual IMiscellaneousClient get_Miscellaneous();
    public abstract virtual IOauthClient get_Oauth();
    public abstract virtual IOrganizationsClient get_Organization();
    public abstract virtual IPackagesClient get_Packages();
    public abstract virtual IPullRequestsClient get_PullRequest();
    public abstract virtual IRepositoriesClient get_Repository();
    public abstract virtual IGistsClient get_Gist();
    public abstract virtual IUsersClient get_User();
    public abstract virtual IGitDatabaseClient get_Git();
    public abstract virtual ISearchClient get_Search();
    public abstract virtual IEnterpriseClient get_Enterprise();
    public abstract virtual IReactionsClient get_Reaction();
    public abstract virtual IChecksClient get_Check();
    public abstract virtual IMetaClient get_Meta();
    public abstract virtual IRateLimitClient get_RateLimit();
    public abstract virtual IMarkdownClient get_Markdown();
    public abstract virtual IGitIgnoreClient get_GitIgnore();
    public abstract virtual ILicensesClient get_Licenses();
    public abstract virtual IEmojisClient get_Emojis();
    public abstract virtual ICodespacesClient get_Codespaces();
    public abstract virtual ICopilotClient get_Copilot();
    public abstract virtual IDependencyGraphClient get_DependencyGraph();
}
public interface Octokit.IGitIgnoreClient {
    [ExcludeFromPaginationApiOptionsConventionTestAttribute("Pagination not supported by GitHub API (tested 29/08/2017)")]
public abstract virtual Task`1<IReadOnlyList`1<string>> GetAllGitIgnoreTemplates();
    public abstract virtual Task`1<GitIgnoreTemplate> GetGitIgnoreTemplate(string templateName);
}
public interface Octokit.IIssueCommentReactionsClient {
    public abstract virtual Task`1<Reaction> Create(string owner, string name, long commentId, NewReaction reaction);
    public abstract virtual Task`1<Reaction> Create(long repositoryId, long commentId, NewReaction reaction);
    public abstract virtual Task`1<IReadOnlyList`1<Reaction>> GetAll(string owner, string name, long commentId);
    public abstract virtual Task`1<IReadOnlyList`1<Reaction>> GetAll(string owner, string name, long commentId, ApiOptions options);
    public abstract virtual Task`1<IReadOnlyList`1<Reaction>> GetAll(long repositoryId, long commentId);
    public abstract virtual Task`1<IReadOnlyList`1<Reaction>> GetAll(long repositoryId, long commentId, ApiOptions options);
    public abstract virtual Task Delete(string owner, string name, long commentId, long reactionId);
    public abstract virtual Task Delete(long repositoryId, long commentId, long reactionId);
}
public interface Octokit.IIssueCommentsClient {
    public abstract virtual Task`1<IssueComment> Get(string owner, string name, long commentId);
    public abstract virtual Task`1<IssueComment> Get(long repositoryId, long commentId);
    public abstract virtual Task`1<IReadOnlyList`1<IssueComment>> GetAllForRepository(string owner, string name);
    public abstract virtual Task`1<IReadOnlyList`1<IssueComment>> GetAllForRepository(long repositoryId);
    public abstract virtual Task`1<IReadOnlyList`1<IssueComment>> GetAllForRepository(string owner, string name, ApiOptions options);
    public abstract virtual Task`1<IReadOnlyList`1<IssueComment>> GetAllForRepository(long repositoryId, ApiOptions options);
    public abstract virtual Task`1<IReadOnlyList`1<IssueComment>> GetAllForRepository(string owner, string name, IssueCommentRequest request);
    public abstract virtual Task`1<IReadOnlyList`1<IssueComment>> GetAllForRepository(long repositoryId, IssueCommentRequest request);
    public abstract virtual Task`1<IReadOnlyList`1<IssueComment>> GetAllForRepository(string owner, string name, IssueCommentRequest request, ApiOptions options);
    public abstract virtual Task`1<IReadOnlyList`1<IssueComment>> GetAllForRepository(long repositoryId, IssueCommentRequest request, ApiOptions options);
    public abstract virtual Task`1<IReadOnlyList`1<IssueComment>> GetAllForIssue(string owner, string name, int issueNumber);
    public abstract virtual Task`1<IReadOnlyList`1<IssueComment>> GetAllForIssue(long repositoryId, int issueNumber);
    public abstract virtual Task`1<IReadOnlyList`1<IssueComment>> GetAllForIssue(string owner, string name, int issueNumber, ApiOptions options);
    public abstract virtual Task`1<IReadOnlyList`1<IssueComment>> GetAllForIssue(long repositoryId, int issueNumber, ApiOptions options);
    public abstract virtual Task`1<IReadOnlyList`1<IssueComment>> GetAllForIssue(string owner, string name, int issueNumber, IssueCommentRequest request);
    public abstract virtual Task`1<IReadOnlyList`1<IssueComment>> GetAllForIssue(long repositoryId, int issueNumber, IssueCommentRequest request);
    public abstract virtual Task`1<IReadOnlyList`1<IssueComment>> GetAllForIssue(string owner, string name, int issueNumber, IssueCommentRequest request, ApiOptions options);
    public abstract virtual Task`1<IReadOnlyList`1<IssueComment>> GetAllForIssue(long repositoryId, int issueNumber, IssueCommentRequest request, ApiOptions options);
    public abstract virtual Task`1<IssueComment> Create(string owner, string name, int issueNumber, string newComment);
    public abstract virtual Task`1<IssueComment> Create(long repositoryId, int issueNumber, string newComment);
    public abstract virtual Task`1<IssueComment> Update(string owner, string name, long commentId, string commentUpdate);
    public abstract virtual Task`1<IssueComment> Update(long repositoryId, long commentId, string commentUpdate);
    public abstract virtual Task Delete(string owner, string name, long commentId);
    public abstract virtual Task Delete(long repositoryId, long commentId);
}
public interface Octokit.IIssueReactionsClient {
    public abstract virtual Task`1<IReadOnlyList`1<Reaction>> GetAll(string owner, string name, int issueNumber);
    public abstract virtual Task`1<IReadOnlyList`1<Reaction>> GetAll(string owner, string name, int issueNumber, ApiOptions options);
    public abstract virtual Task`1<IReadOnlyList`1<Reaction>> GetAll(long repositoryId, int issueNumber);
    public abstract virtual Task`1<IReadOnlyList`1<Reaction>> GetAll(long repositoryId, int issueNumber, ApiOptions options);
    public abstract virtual Task`1<Reaction> Create(string owner, string name, int issueNumber, NewReaction reaction);
    public abstract virtual Task`1<Reaction> Create(long repositoryId, int issueNumber, NewReaction reaction);
    public abstract virtual Task Delete(string owner, string name, int issueNumber, long reactionId);
    public abstract virtual Task Delete(long repositoryId, int issueNumber, long reactionId);
}
public interface Octokit.IIssuesClient {
    public IAssigneesClient Assignee { get; }
    public IIssuesEventsClient Events { get; }
    public IMilestonesClient Milestone { get; }
    public IIssuesLabelsClient Labels { get; }
    public IIssueCommentsClient Comment { get; }
    public IIssueTimelineClient Timeline { get; }
    public ILockUnlockClient LockUnlock { get; }
    public abstract virtual IAssigneesClient get_Assignee();
    public abstract virtual IIssuesEventsClient get_Events();
    public abstract virtual IMilestonesClient get_Milestone();
    public abstract virtual IIssuesLabelsClient get_Labels();
    public abstract virtual IIssueCommentsClient get_Comment();
    public abstract virtual IIssueTimelineClient get_Timeline();
    public abstract virtual ILockUnlockClient get_LockUnlock();
    public abstract virtual Task`1<Issue> Get(string owner, string name, int issueNumber);
    public abstract virtual Task`1<Issue> Get(long repositoryId, int issueNumber);
    public abstract virtual Task`1<IReadOnlyList`1<Issue>> GetAllForCurrent();
    public abstract virtual Task`1<IReadOnlyList`1<Issue>> GetAllForCurrent(ApiOptions options);
    public abstract virtual Task`1<IReadOnlyList`1<Issue>> GetAllForCurrent(IssueRequest request);
    public abstract virtual Task`1<IReadOnlyList`1<Issue>> GetAllForCurrent(IssueRequest request, ApiOptions options);
    public abstract virtual Task`1<IReadOnlyList`1<Issue>> GetAllForOwnedAndMemberRepositories();
    public abstract virtual Task`1<IReadOnlyList`1<Issue>> GetAllForOwnedAndMemberRepositories(ApiOptions options);
    public abstract virtual Task`1<IReadOnlyList`1<Issue>> GetAllForOwnedAndMemberRepositories(IssueRequest request);
    public abstract virtual Task`1<IReadOnlyList`1<Issue>> GetAllForOwnedAndMemberRepositories(IssueRequest request, ApiOptions options);
    public abstract virtual Task`1<IReadOnlyList`1<Issue>> GetAllForOrganization(string organization);
    public abstract virtual Task`1<IReadOnlyList`1<Issue>> GetAllForOrganization(string organization, ApiOptions options);
    public abstract virtual Task`1<IReadOnlyList`1<Issue>> GetAllForOrganization(string organization, IssueRequest request);
    public abstract virtual Task`1<IReadOnlyList`1<Issue>> GetAllForOrganization(string organization, IssueRequest request, ApiOptions options);
    public abstract virtual Task`1<IReadOnlyList`1<Issue>> GetAllForRepository(string owner, string name);
    public abstract virtual Task`1<IReadOnlyList`1<Issue>> GetAllForRepository(long repositoryId);
    public abstract virtual Task`1<IReadOnlyList`1<Issue>> GetAllForRepository(string owner, string name, ApiOptions options);
    public abstract virtual Task`1<IReadOnlyList`1<Issue>> GetAllForRepository(long repositoryId, ApiOptions options);
    public abstract virtual Task`1<IReadOnlyList`1<Issue>> GetAllForRepository(string owner, string name, RepositoryIssueRequest request);
    public abstract virtual Task`1<IReadOnlyList`1<Issue>> GetAllForRepository(long repositoryId, RepositoryIssueRequest request);
    public abstract virtual Task`1<IReadOnlyList`1<Issue>> GetAllForRepository(string owner, string name, RepositoryIssueRequest request, ApiOptions options);
    public abstract virtual Task`1<IReadOnlyList`1<Issue>> GetAllForRepository(long repositoryId, RepositoryIssueRequest request, ApiOptions options);
    public abstract virtual Task`1<Issue> Create(string owner, string name, NewIssue newIssue);
    public abstract virtual Task`1<Issue> Create(long repositoryId, NewIssue newIssue);
    public abstract virtual Task`1<Issue> Update(string owner, string name, int issueNumber, IssueUpdate issueUpdate);
    public abstract virtual Task`1<Issue> Update(long repositoryId, int issueNumber, IssueUpdate issueUpdate);
}
public interface Octokit.IIssuesEventsClient {
    public abstract virtual Task`1<IReadOnlyList`1<IssueEvent>> GetAllForIssue(string owner, string name, int issueNumber);
    public abstract virtual Task`1<IReadOnlyList`1<IssueEvent>> GetAllForIssue(long repositoryId, int issueNumber);
    public abstract virtual Task`1<IReadOnlyList`1<IssueEvent>> GetAllForIssue(string owner, string name, int issueNumber, ApiOptions options);
    public abstract virtual Task`1<IReadOnlyList`1<IssueEvent>> GetAllForIssue(long repositoryId, int issueNumber, ApiOptions options);
    public abstract virtual Task`1<IReadOnlyList`1<IssueEvent>> GetAllForRepository(string owner, string name);
    public abstract virtual Task`1<IReadOnlyList`1<IssueEvent>> GetAllForRepository(long repositoryId);
    public abstract virtual Task`1<IReadOnlyList`1<IssueEvent>> GetAllForRepository(string owner, string name, ApiOptions options);
    public abstract virtual Task`1<IReadOnlyList`1<IssueEvent>> GetAllForRepository(long repositoryId, ApiOptions options);
    public abstract virtual Task`1<IssueEvent> Get(string owner, string name, long eventId);
    public abstract virtual Task`1<IssueEvent> Get(long repositoryId, long eventId);
}
public interface Octokit.IIssuesLabelsClient {
    public abstract virtual Task`1<IReadOnlyList`1<Label>> GetAllForIssue(string owner, string name, int issueNumber);
    public abstract virtual Task`1<IReadOnlyList`1<Label>> GetAllForIssue(long repositoryId, int issueNumber);
    public abstract virtual Task`1<IReadOnlyList`1<Label>> GetAllForIssue(string owner, string name, int issueNumber, ApiOptions options);
    public abstract virtual Task`1<IReadOnlyList`1<Label>> GetAllForIssue(long repositoryId, int issueNumber, ApiOptions options);
    public abstract virtual Task`1<IReadOnlyList`1<Label>> GetAllForRepository(string owner, string name);
    public abstract virtual Task`1<IReadOnlyList`1<Label>> GetAllForRepository(long repositoryId);
    public abstract virtual Task`1<IReadOnlyList`1<Label>> GetAllForRepository(string owner, string name, ApiOptions options);
    public abstract virtual Task`1<IReadOnlyList`1<Label>> GetAllForRepository(long repositoryId, ApiOptions options);
    public abstract virtual Task`1<IReadOnlyList`1<Label>> GetAllForMilestone(string owner, string name, int milestoneNumber);
    public abstract virtual Task`1<IReadOnlyList`1<Label>> GetAllForMilestone(long repositoryId, int milestoneNumber);
    public abstract virtual Task`1<IReadOnlyList`1<Label>> GetAllForMilestone(string owner, string name, int milestoneNumber, ApiOptions options);
    public abstract virtual Task`1<IReadOnlyList`1<Label>> GetAllForMilestone(long repositoryId, int milestoneNumber, ApiOptions options);
    public abstract virtual Task`1<Label> Get(string owner, string name, string labelName);
    public abstract virtual Task`1<Label> Get(long repositoryId, string labelName);
    public abstract virtual Task Delete(string owner, string name, string labelName);
    public abstract virtual Task Delete(long repositoryId, string labelName);
    public abstract virtual Task`1<Label> Create(string owner, string name, NewLabel newLabel);
    public abstract virtual Task`1<Label> Create(long repositoryId, NewLabel newLabel);
    public abstract virtual Task`1<Label> Update(string owner, string name, string labelName, LabelUpdate labelUpdate);
    public abstract virtual Task`1<Label> Update(long repositoryId, string labelName, LabelUpdate labelUpdate);
    public abstract virtual Task`1<IReadOnlyList`1<Label>> AddToIssue(string owner, string name, int issueNumber, String[] labels);
    public abstract virtual Task`1<IReadOnlyList`1<Label>> AddToIssue(long repositoryId, int issueNumber, String[] labels);
    public abstract virtual Task`1<IReadOnlyList`1<Label>> RemoveFromIssue(string owner, string name, int issueNumber, string labelName);
    public abstract virtual Task`1<IReadOnlyList`1<Label>> RemoveFromIssue(long repositoryId, int issueNumber, string labelName);
    public abstract virtual Task`1<IReadOnlyList`1<Label>> ReplaceAllForIssue(string owner, string name, int issueNumber, String[] labels);
    public abstract virtual Task`1<IReadOnlyList`1<Label>> ReplaceAllForIssue(long repositoryId, int issueNumber, String[] labels);
    public abstract virtual Task RemoveAllFromIssue(string owner, string name, int issueNumber);
    public abstract virtual Task RemoveAllFromIssue(long repositoryId, int issueNumber);
}
public interface Octokit.IIssueTimelineClient {
    public abstract virtual Task`1<IReadOnlyList`1<TimelineEventInfo>> GetAllForIssue(string owner, string repo, int issueNumber);
    public abstract virtual Task`1<IReadOnlyList`1<TimelineEventInfo>> GetAllForIssue(string owner, string repo, int issueNumber, ApiOptions options);
    public abstract virtual Task`1<IReadOnlyList`1<TimelineEventInfo>> GetAllForIssue(long repositoryId, int issueNumber);
    public abstract virtual Task`1<IReadOnlyList`1<TimelineEventInfo>> GetAllForIssue(long repositoryId, int issueNumber, ApiOptions options);
}
[GeneratedCodeAttribute("simple-json", "1.0.0")]
internal interface Octokit.IJsonSerializerStrategy {
    public abstract virtual bool TrySerializeNonPrimitiveObject(object input, Object& output);
    public abstract virtual object DeserializeObject(object value, Type type);
}
public interface Octokit.ILicensesClient {
    public abstract virtual Task`1<IReadOnlyList`1<LicenseMetadata>> GetAllLicenses();
    public abstract virtual Task`1<IReadOnlyList`1<LicenseMetadata>> GetAllLicenses(ApiOptions options);
    public abstract virtual Task`1<License> GetLicense(string key);
}
public interface Octokit.ILockUnlockClient {
    public abstract virtual Task Lock(string owner, string name, int issueNumber, Nullable`1<LockReason> lockReason);
    public abstract virtual Task Lock(long repositoryId, int issueNumber, Nullable`1<LockReason> lockReason);
    public abstract virtual Task Unlock(string owner, string name, int issueNumber);
    public abstract virtual Task Unlock(long repositoryId, int issueNumber);
}
public interface Octokit.IMarkdownClient {
    public abstract virtual Task`1<string> RenderArbitraryMarkdown(NewArbitraryMarkdown markdown);
    public abstract virtual Task`1<string> RenderRawMarkdown(string markdown);
}
public interface Octokit.IMergingClient {
    public abstract virtual Task`1<Merge> Create(string owner, string name, NewMerge merge);
    public abstract virtual Task`1<Merge> Create(long repositoryId, NewMerge merge);
}
public interface Octokit.IMetaClient {
    public abstract virtual Task`1<Meta> GetMetadata();
}
public interface Octokit.IMigrationClient {
    public IMigrationsClient Migrations { get; }
    public abstract virtual IMigrationsClient get_Migrations();
}
public interface Octokit.IMigrationsClient {
    public abstract virtual Task`1<Migration> Start(string org, StartMigrationRequest migration);
    public abstract virtual Task`1<IReadOnlyList`1<Migration>> GetAll(string org);
    public abstract virtual Task`1<IReadOnlyList`1<Migration>> GetAll(string org, ApiOptions options);
    public abstract virtual Task`1<Migration> Get(string org, long id);
    public abstract virtual Task`1<Byte[]> GetArchive(string org, long id);
    public abstract virtual Task DeleteArchive(string org, long id);
    public abstract virtual Task UnlockRepository(string org, long id, string repo);
}
public interface Octokit.IMilestonesClient {
    public abstract virtual Task`1<Milestone> Get(string owner, string name, int milestoneNumber);
    public abstract virtual Task`1<Milestone> Get(long repositoryId, int milestoneNumber);
    public abstract virtual Task`1<IReadOnlyList`1<Milestone>> GetAllForRepository(string owner, string name);
    public abstract virtual Task`1<IReadOnlyList`1<Milestone>> GetAllForRepository(long repositoryId);
    public abstract virtual Task`1<IReadOnlyList`1<Milestone>> GetAllForRepository(string owner, string name, ApiOptions options);
    public abstract virtual Task`1<IReadOnlyList`1<Milestone>> GetAllForRepository(long repositoryId, ApiOptions options);
    public abstract virtual Task`1<IReadOnlyList`1<Milestone>> GetAllForRepository(string owner, string name, MilestoneRequest request);
    public abstract virtual Task`1<IReadOnlyList`1<Milestone>> GetAllForRepository(long repositoryId, MilestoneRequest request);
    public abstract virtual Task`1<IReadOnlyList`1<Milestone>> GetAllForRepository(string owner, string name, MilestoneRequest request, ApiOptions options);
    public abstract virtual Task`1<IReadOnlyList`1<Milestone>> GetAllForRepository(long repositoryId, MilestoneRequest request, ApiOptions options);
    public abstract virtual Task`1<Milestone> Create(string owner, string name, NewMilestone newMilestone);
    public abstract virtual Task`1<Milestone> Create(long repositoryId, NewMilestone newMilestone);
    public abstract virtual Task`1<Milestone> Update(string owner, string name, int milestoneNumber, MilestoneUpdate milestoneUpdate);
    public abstract virtual Task`1<Milestone> Update(long repositoryId, int milestoneNumber, MilestoneUpdate milestoneUpdate);
    public abstract virtual Task Delete(string owner, string name, int milestoneNumber);
    public abstract virtual Task Delete(long repositoryId, int milestoneNumber);
}
[ObsoleteAttribute("Use individual clients available on the GitHubClient for these methods")]
public interface Octokit.IMiscellaneousClient {
    [ExcludeFromPaginationApiOptionsConventionTestAttribute("Pagination not supported by GitHub API (tested 29/08/2017)")]
[ObsoleteAttribute("This client is being deprecated and will be removed in the future. Use EmojisClient.GetAllEmojis instead.")]
public abstract virtual Task`1<IReadOnlyList`1<Emoji>> GetAllEmojis();
    [ObsoleteAttribute("This client is being deprecated and will be removed in the future. Use MarkdownClient.RenderRawMarkdown instead.")]
public abstract virtual Task`1<string> RenderRawMarkdown(string markdown);
    [ObsoleteAttribute("This client is being deprecated and will be removed in the future. Use MarkdownClient.RenderArbitraryMarkdown instead.")]
public abstract virtual Task`1<string> RenderArbitraryMarkdown(NewArbitraryMarkdown markdown);
    [ExcludeFromPaginationApiOptionsConventionTestAttribute("Pagination not supported by GitHub API (tested 29/08/2017)")]
[ObsoleteAttribute("This client is being deprecated and will be removed in the future. Use GitIgnoreClient.GetAllGitIgnoreTemplates instead.")]
public abstract virtual Task`1<IReadOnlyList`1<string>> GetAllGitIgnoreTemplates();
    [ObsoleteAttribute("This client is being deprecated and will be removed in the future. Use GitIgnoreClient.GetAllGitIgnoreTemplates instead.")]
public abstract virtual Task`1<GitIgnoreTemplate> GetGitIgnoreTemplate(string templateName);
    [ObsoleteAttribute("This client is being deprecated and will be removed in the future. Use GitIgnoreClient.GetGitIgnoreTemplate instead.")]
public abstract virtual Task`1<IReadOnlyList`1<LicenseMetadata>> GetAllLicenses();
    [ObsoleteAttribute("This client is being deprecated and will be removed in the future. Use LicensesClient.GetAllLicenses instead.")]
public abstract virtual Task`1<IReadOnlyList`1<LicenseMetadata>> GetAllLicenses(ApiOptions options);
    [ObsoleteAttribute("This client is being deprecated and will be removed in the future. Use LicensesClient.GetLicense instead.")]
public abstract virtual Task`1<License> GetLicense(string key);
    [ObsoleteAttribute("This client is being deprecated and will be removed in the future. Use RateLimitClient.GetRateLimits instead.")]
public abstract virtual Task`1<MiscellaneousRateLimit> GetRateLimits();
    [ObsoleteAttribute("This client is being deprecated and will be removed in the future. Use MetaClient.GetMetadata instead.")]
public abstract virtual Task`1<Meta> GetMetadata();
}
public interface Octokit.INotificationsClient {
    public abstract virtual Task`1<IReadOnlyList`1<Notification>> GetAllForCurrent();
    public abstract virtual Task`1<IReadOnlyList`1<Notification>> GetAllForCurrent(ApiOptions options);
    public abstract virtual Task`1<IReadOnlyList`1<Notification>> GetAllForCurrent(NotificationsRequest request);
    public abstract virtual Task`1<IReadOnlyList`1<Notification>> GetAllForCurrent(NotificationsRequest request, ApiOptions options);
    public abstract virtual Task`1<IReadOnlyList`1<Notification>> GetAllForRepository(string owner, string name);
    public abstract virtual Task`1<IReadOnlyList`1<Notification>> GetAllForRepository(long repositoryId);
    public abstract virtual Task`1<IReadOnlyList`1<Notification>> GetAllForRepository(string owner, string name, ApiOptions options);
    public abstract virtual Task`1<IReadOnlyList`1<Notification>> GetAllForRepository(long repositoryId, ApiOptions options);
    public abstract virtual Task`1<IReadOnlyList`1<Notification>> GetAllForRepository(string owner, string name, NotificationsRequest request);
    public abstract virtual Task`1<IReadOnlyList`1<Notification>> GetAllForRepository(long repositoryId, NotificationsRequest request);
    public abstract virtual Task`1<IReadOnlyList`1<Notification>> GetAllForRepository(string owner, string name, NotificationsRequest request, ApiOptions options);
    public abstract virtual Task`1<IReadOnlyList`1<Notification>> GetAllForRepository(long repositoryId, NotificationsRequest request, ApiOptions options);
    public abstract virtual Task MarkAsRead();
    public abstract virtual Task MarkAsRead(MarkAsReadRequest markAsReadRequest);
    public abstract virtual Task MarkAsReadForRepository(string owner, string name);
    public abstract virtual Task MarkAsReadForRepository(long repositoryId);
    public abstract virtual Task MarkAsReadForRepository(string owner, string name, MarkAsReadRequest markAsReadRequest);
    public abstract virtual Task MarkAsReadForRepository(long repositoryId, MarkAsReadRequest markAsReadRequest);
    public abstract virtual Task`1<Notification> Get(int notificationId);
    public abstract virtual Task MarkAsRead(int notificationId);
    public abstract virtual Task`1<ThreadSubscription> GetThreadSubscription(int threadId);
    public abstract virtual Task`1<ThreadSubscription> SetThreadSubscription(int threadId, NewThreadSubscription threadSubscription);
    public abstract virtual Task DeleteThreadSubscription(int threadId);
}
public enum Octokit.InQualifier : Enum {
    public int value__;
    [ParameterAttribute]
public static InQualifier Name;
    [ParameterAttribute]
public static InQualifier Description;
    [ParameterAttribute]
public static InQualifier Topics;
    [ParameterAttribute]
public static InQualifier Readme;
}
[DebuggerDisplayAttribute("{DebuggerDisplay,nq}")]
public class Octokit.Installation : InstallationId {
    [CompilerGeneratedAttribute]
private User <Account>k__BackingField;
    [CompilerGeneratedAttribute]
private string <AccessTokensUrl>k__BackingField;
    [CompilerGeneratedAttribute]
private string <RepositoriesUrl>k__BackingField;
    [CompilerGeneratedAttribute]
private string <HtmlUrl>k__BackingField;
    [CompilerGeneratedAttribute]
private long <AppId>k__BackingField;
    [CompilerGeneratedAttribute]
private long <TargetId>k__BackingField;
    [CompilerGeneratedAttribute]
private StringEnum`1<AccountType> <TargetType>k__BackingField;
    [CompilerGeneratedAttribute]
private InstallationPermissions <Permissions>k__BackingField;
    [CompilerGeneratedAttribute]
private IReadOnlyList`1<string> <Events>k__BackingField;
    [CompilerGeneratedAttribute]
private string <SingleFileName>k__BackingField;
    [CompilerGeneratedAttribute]
private StringEnum`1<InstallationRepositorySelection> <RepositorySelection>k__BackingField;
    [CompilerGeneratedAttribute]
private User <SuspendedBy>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<DateTimeOffset> <SuspendedAt>k__BackingField;
    public User Account { get; private set; }
    public string AccessTokensUrl { get; private set; }
    public string RepositoriesUrl { get; private set; }
    public string HtmlUrl { get; private set; }
    public long AppId { get; private set; }
    public long TargetId { get; private set; }
    public StringEnum`1<AccountType> TargetType { get; private set; }
    public InstallationPermissions Permissions { get; private set; }
    public IReadOnlyList`1<string> Events { get; private set; }
    public string SingleFileName { get; private set; }
    public StringEnum`1<InstallationRepositorySelection> RepositorySelection { get; private set; }
    public User SuspendedBy { get; private set; }
    public Nullable`1<DateTimeOffset> SuspendedAt { get; private set; }
    internal string DebuggerDisplay { get; }
    public Installation(long id, User account, string accessTokensUrl, string repositoriesUrl, string htmlUrl, long appId, long targetId, AccountType targetType, InstallationPermissions permissions, IReadOnlyList`1<string> events, string singleFileName, string repositorySelection, User suspendedBy, Nullable`1<DateTimeOffset> suspendedAt);
    [CompilerGeneratedAttribute]
public User get_Account();
    [CompilerGeneratedAttribute]
private void set_Account(User value);
    [CompilerGeneratedAttribute]
public string get_AccessTokensUrl();
    [CompilerGeneratedAttribute]
private void set_AccessTokensUrl(string value);
    [CompilerGeneratedAttribute]
public string get_RepositoriesUrl();
    [CompilerGeneratedAttribute]
private void set_RepositoriesUrl(string value);
    [CompilerGeneratedAttribute]
public string get_HtmlUrl();
    [CompilerGeneratedAttribute]
private void set_HtmlUrl(string value);
    [CompilerGeneratedAttribute]
public long get_AppId();
    [CompilerGeneratedAttribute]
private void set_AppId(long value);
    [CompilerGeneratedAttribute]
public long get_TargetId();
    [CompilerGeneratedAttribute]
private void set_TargetId(long value);
    [CompilerGeneratedAttribute]
public StringEnum`1<AccountType> get_TargetType();
    [CompilerGeneratedAttribute]
private void set_TargetType(StringEnum`1<AccountType> value);
    [CompilerGeneratedAttribute]
public InstallationPermissions get_Permissions();
    [CompilerGeneratedAttribute]
private void set_Permissions(InstallationPermissions value);
    [CompilerGeneratedAttribute]
public IReadOnlyList`1<string> get_Events();
    [CompilerGeneratedAttribute]
private void set_Events(IReadOnlyList`1<string> value);
    [CompilerGeneratedAttribute]
public string get_SingleFileName();
    [CompilerGeneratedAttribute]
private void set_SingleFileName(string value);
    [CompilerGeneratedAttribute]
public StringEnum`1<InstallationRepositorySelection> get_RepositorySelection();
    [CompilerGeneratedAttribute]
private void set_RepositorySelection(StringEnum`1<InstallationRepositorySelection> value);
    [CompilerGeneratedAttribute]
public User get_SuspendedBy();
    [CompilerGeneratedAttribute]
private void set_SuspendedBy(User value);
    [CompilerGeneratedAttribute]
public Nullable`1<DateTimeOffset> get_SuspendedAt();
    [CompilerGeneratedAttribute]
private void set_SuspendedAt(Nullable`1<DateTimeOffset> value);
    internal string get_DebuggerDisplay();
}
[DebuggerDisplayAttribute("{DebuggerDisplay,nq}")]
public class Octokit.InstallationId : object {
    [CompilerGeneratedAttribute]
private long <Id>k__BackingField;
    public long Id { get; protected set; }
    internal string DebuggerDisplay { get; }
    public InstallationId(long id);
    [CompilerGeneratedAttribute]
public long get_Id();
    [CompilerGeneratedAttribute]
protected void set_Id(long value);
    internal string get_DebuggerDisplay();
}
[DebuggerDisplayAttribute("{DebuggerDisplay,nq}")]
public class Octokit.InstallationPermissions : object {
    [CompilerGeneratedAttribute]
private Nullable`1<StringEnum`1<InstallationReadWritePermissionLevel>> <Actions>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<StringEnum`1<InstallationReadWritePermissionLevel>> <Administration>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<StringEnum`1<InstallationReadWritePermissionLevel>> <Checks>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<StringEnum`1<InstallationReadWritePermissionLevel>> <Contents>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<StringEnum`1<InstallationReadWritePermissionLevel>> <Deployments>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<StringEnum`1<InstallationReadWritePermissionLevel>> <Environments>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<StringEnum`1<InstallationReadWritePermissionLevel>> <Issues>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<StringEnum`1<InstallationReadWritePermissionLevel>> <Metadata>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<StringEnum`1<InstallationReadWritePermissionLevel>> <Packages>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<StringEnum`1<InstallationReadWritePermissionLevel>> <Pages>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<StringEnum`1<InstallationReadWritePermissionLevel>> <PullRequests>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<StringEnum`1<InstallationReadWritePermissionLevel>> <RepositoryAnnouncementBanners>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<StringEnum`1<InstallationReadWritePermissionLevel>> <RepositoryCustomProperties>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<StringEnum`1<InstallationReadWritePermissionLevel>> <RepositoryHooks>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<StringEnum`1<InstallationReadWriteAdminPermissionLevel>> <RepositoryProjects>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<StringEnum`1<InstallationReadWritePermissionLevel>> <SecretScanningAlerts>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<StringEnum`1<InstallationReadWritePermissionLevel>> <Secrets>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<StringEnum`1<InstallationReadWritePermissionLevel>> <SecurityEvents>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<StringEnum`1<InstallationReadWritePermissionLevel>> <SingleFile>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<StringEnum`1<InstallationReadWritePermissionLevel>> <Statuses>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<StringEnum`1<InstallationReadWritePermissionLevel>> <VulnerabilityAlerts>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<StringEnum`1<InstallationWritePermissionLevel>> <Workflows>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<StringEnum`1<InstallationReadWritePermissionLevel>> <Members>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<StringEnum`1<InstallationReadWritePermissionLevel>> <OrganizationAdministration>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<StringEnum`1<InstallationReadWritePermissionLevel>> <OrganizationCopilotSeatManagement>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<StringEnum`1<InstallationReadWriteAdminPermissionLevel>> <OrganizationCustomProperties>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<StringEnum`1<InstallationReadWritePermissionLevel>> <OrganizationCustomRoles>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<StringEnum`1<InstallationReadWritePermissionLevel>> <OrganizationAnnouncementBanners>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<StringEnum`1<InstallationReadWritePermissionLevel>> <OrganizationHooks>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<StringEnum`1<InstallationReadPermissionLevel>> <OrganizationPlan>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<StringEnum`1<InstallationReadWriteAdminPermissionLevel>> <OrganizationProjects>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<StringEnum`1<InstallationReadWritePermissionLevel>> <OrganizationPackages>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<StringEnum`1<InstallationReadWritePermissionLevel>> <OrganizationSecrets>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<StringEnum`1<InstallationReadWritePermissionLevel>> <OrganizationSelfHostedRunners>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<StringEnum`1<InstallationReadWritePermissionLevel>> <OrganizationUserBlocking>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<StringEnum`1<InstallationReadWritePermissionLevel>> <TeamDiscussions>k__BackingField;
    public Nullable`1<StringEnum`1<InstallationReadWritePermissionLevel>> Actions { get; private set; }
    public Nullable`1<StringEnum`1<InstallationReadWritePermissionLevel>> Administration { get; private set; }
    public Nullable`1<StringEnum`1<InstallationReadWritePermissionLevel>> Checks { get; private set; }
    public Nullable`1<StringEnum`1<InstallationReadWritePermissionLevel>> Contents { get; private set; }
    public Nullable`1<StringEnum`1<InstallationReadWritePermissionLevel>> Deployments { get; private set; }
    public Nullable`1<StringEnum`1<InstallationReadWritePermissionLevel>> Environments { get; private set; }
    public Nullable`1<StringEnum`1<InstallationReadWritePermissionLevel>> Issues { get; private set; }
    public Nullable`1<StringEnum`1<InstallationReadWritePermissionLevel>> Metadata { get; private set; }
    public Nullable`1<StringEnum`1<InstallationReadWritePermissionLevel>> Packages { get; private set; }
    public Nullable`1<StringEnum`1<InstallationReadWritePermissionLevel>> Pages { get; private set; }
    public Nullable`1<StringEnum`1<InstallationReadWritePermissionLevel>> PullRequests { get; private set; }
    public Nullable`1<StringEnum`1<InstallationReadWritePermissionLevel>> RepositoryAnnouncementBanners { get; private set; }
    public Nullable`1<StringEnum`1<InstallationReadWritePermissionLevel>> RepositoryCustomProperties { get; private set; }
    public Nullable`1<StringEnum`1<InstallationReadWritePermissionLevel>> RepositoryHooks { get; private set; }
    public Nullable`1<StringEnum`1<InstallationReadWriteAdminPermissionLevel>> RepositoryProjects { get; private set; }
    public Nullable`1<StringEnum`1<InstallationReadWritePermissionLevel>> SecretScanningAlerts { get; private set; }
    public Nullable`1<StringEnum`1<InstallationReadWritePermissionLevel>> Secrets { get; private set; }
    public Nullable`1<StringEnum`1<InstallationReadWritePermissionLevel>> SecurityEvents { get; private set; }
    public Nullable`1<StringEnum`1<InstallationReadWritePermissionLevel>> SingleFile { get; private set; }
    public Nullable`1<StringEnum`1<InstallationReadWritePermissionLevel>> Statuses { get; private set; }
    public Nullable`1<StringEnum`1<InstallationReadWritePermissionLevel>> VulnerabilityAlerts { get; private set; }
    public Nullable`1<StringEnum`1<InstallationWritePermissionLevel>> Workflows { get; private set; }
    public Nullable`1<StringEnum`1<InstallationReadWritePermissionLevel>> Members { get; private set; }
    public Nullable`1<StringEnum`1<InstallationReadWritePermissionLevel>> OrganizationAdministration { get; private set; }
    public Nullable`1<StringEnum`1<InstallationReadWritePermissionLevel>> OrganizationCopilotSeatManagement { get; private set; }
    public Nullable`1<StringEnum`1<InstallationReadWriteAdminPermissionLevel>> OrganizationCustomProperties { get; private set; }
    public Nullable`1<StringEnum`1<InstallationReadWritePermissionLevel>> OrganizationCustomRoles { get; private set; }
    public Nullable`1<StringEnum`1<InstallationReadWritePermissionLevel>> OrganizationAnnouncementBanners { get; private set; }
    public Nullable`1<StringEnum`1<InstallationReadWritePermissionLevel>> OrganizationHooks { get; private set; }
    public Nullable`1<StringEnum`1<InstallationReadPermissionLevel>> OrganizationPlan { get; private set; }
    public Nullable`1<StringEnum`1<InstallationReadWriteAdminPermissionLevel>> OrganizationProjects { get; private set; }
    public Nullable`1<StringEnum`1<InstallationReadWritePermissionLevel>> OrganizationPackages { get; private set; }
    public Nullable`1<StringEnum`1<InstallationReadWritePermissionLevel>> OrganizationSecrets { get; private set; }
    public Nullable`1<StringEnum`1<InstallationReadWritePermissionLevel>> OrganizationSelfHostedRunners { get; private set; }
    public Nullable`1<StringEnum`1<InstallationReadWritePermissionLevel>> OrganizationUserBlocking { get; private set; }
    public Nullable`1<StringEnum`1<InstallationReadWritePermissionLevel>> TeamDiscussions { get; private set; }
    internal string DebuggerDisplay { get; }
    public InstallationPermissions(Nullable`1<InstallationReadWritePermissionLevel> actions, Nullable`1<InstallationReadWritePermissionLevel> administration, Nullable`1<InstallationReadWritePermissionLevel> checks, Nullable`1<InstallationReadWritePermissionLevel> contents, Nullable`1<InstallationReadWritePermissionLevel> deployments, Nullable`1<InstallationReadWritePermissionLevel> environments, Nullable`1<InstallationReadWritePermissionLevel> issues, Nullable`1<InstallationReadWritePermissionLevel> metadata, Nullable`1<InstallationReadWritePermissionLevel> packages, Nullable`1<InstallationReadWritePermissionLevel> pages, Nullable`1<InstallationReadWritePermissionLevel> pullRequests, Nullable`1<InstallationReadWritePermissionLevel> repositoryAnnouncementBanners, Nullable`1<InstallationReadWritePermissionLevel> repositoryCustomProperties, Nullable`1<InstallationReadWritePermissionLevel> repositoryHooks, Nullable`1<InstallationReadWriteAdminPermissionLevel> repositoryProjects, Nullable`1<InstallationReadWritePermissionLevel> secretScanningAlerts, Nullable`1<InstallationReadWritePermissionLevel> secrets, Nullable`1<InstallationReadWritePermissionLevel> securityEvents, Nullable`1<InstallationReadWritePermissionLevel> singleFile, Nullable`1<InstallationReadWritePermissionLevel> statuses, Nullable`1<InstallationReadWritePermissionLevel> vulnerabilityAlerts, Nullable`1<InstallationWritePermissionLevel> workflows, Nullable`1<InstallationReadWritePermissionLevel> members, Nullable`1<InstallationReadWritePermissionLevel> organizationAdministration, Nullable`1<InstallationReadWritePermissionLevel> organizationCopilotSeatManagement, Nullable`1<InstallationReadWriteAdminPermissionLevel> organizationCustomProperties, Nullable`1<InstallationReadWritePermissionLevel> organizationCustomRoles, Nullable`1<InstallationReadWritePermissionLevel> organizationAnnouncementBanners, Nullable`1<InstallationReadWritePermissionLevel> organizationHooks, Nullable`1<InstallationReadPermissionLevel> organizationPlan, Nullable`1<InstallationReadWriteAdminPermissionLevel> organizationProjects, Nullable`1<InstallationReadWritePermissionLevel> organizationPackages, Nullable`1<InstallationReadWritePermissionLevel> organizationSecrets, Nullable`1<InstallationReadWritePermissionLevel> organizationSelfHostedRunners, Nullable`1<InstallationReadWritePermissionLevel> organizationUserBlocking, Nullable`1<InstallationReadWritePermissionLevel> teamDiscussions);
    [CompilerGeneratedAttribute]
public Nullable`1<StringEnum`1<InstallationReadWritePermissionLevel>> get_Actions();
    [CompilerGeneratedAttribute]
private void set_Actions(Nullable`1<StringEnum`1<InstallationReadWritePermissionLevel>> value);
    [CompilerGeneratedAttribute]
public Nullable`1<StringEnum`1<InstallationReadWritePermissionLevel>> get_Administration();
    [CompilerGeneratedAttribute]
private void set_Administration(Nullable`1<StringEnum`1<InstallationReadWritePermissionLevel>> value);
    [CompilerGeneratedAttribute]
public Nullable`1<StringEnum`1<InstallationReadWritePermissionLevel>> get_Checks();
    [CompilerGeneratedAttribute]
private void set_Checks(Nullable`1<StringEnum`1<InstallationReadWritePermissionLevel>> value);
    [CompilerGeneratedAttribute]
public Nullable`1<StringEnum`1<InstallationReadWritePermissionLevel>> get_Contents();
    [CompilerGeneratedAttribute]
private void set_Contents(Nullable`1<StringEnum`1<InstallationReadWritePermissionLevel>> value);
    [CompilerGeneratedAttribute]
public Nullable`1<StringEnum`1<InstallationReadWritePermissionLevel>> get_Deployments();
    [CompilerGeneratedAttribute]
private void set_Deployments(Nullable`1<StringEnum`1<InstallationReadWritePermissionLevel>> value);
    [CompilerGeneratedAttribute]
public Nullable`1<StringEnum`1<InstallationReadWritePermissionLevel>> get_Environments();
    [CompilerGeneratedAttribute]
private void set_Environments(Nullable`1<StringEnum`1<InstallationReadWritePermissionLevel>> value);
    [CompilerGeneratedAttribute]
public Nullable`1<StringEnum`1<InstallationReadWritePermissionLevel>> get_Issues();
    [CompilerGeneratedAttribute]
private void set_Issues(Nullable`1<StringEnum`1<InstallationReadWritePermissionLevel>> value);
    [CompilerGeneratedAttribute]
public Nullable`1<StringEnum`1<InstallationReadWritePermissionLevel>> get_Metadata();
    [CompilerGeneratedAttribute]
private void set_Metadata(Nullable`1<StringEnum`1<InstallationReadWritePermissionLevel>> value);
    [CompilerGeneratedAttribute]
public Nullable`1<StringEnum`1<InstallationReadWritePermissionLevel>> get_Packages();
    [CompilerGeneratedAttribute]
private void set_Packages(Nullable`1<StringEnum`1<InstallationReadWritePermissionLevel>> value);
    [CompilerGeneratedAttribute]
public Nullable`1<StringEnum`1<InstallationReadWritePermissionLevel>> get_Pages();
    [CompilerGeneratedAttribute]
private void set_Pages(Nullable`1<StringEnum`1<InstallationReadWritePermissionLevel>> value);
    [CompilerGeneratedAttribute]
public Nullable`1<StringEnum`1<InstallationReadWritePermissionLevel>> get_PullRequests();
    [CompilerGeneratedAttribute]
private void set_PullRequests(Nullable`1<StringEnum`1<InstallationReadWritePermissionLevel>> value);
    [CompilerGeneratedAttribute]
public Nullable`1<StringEnum`1<InstallationReadWritePermissionLevel>> get_RepositoryAnnouncementBanners();
    [CompilerGeneratedAttribute]
private void set_RepositoryAnnouncementBanners(Nullable`1<StringEnum`1<InstallationReadWritePermissionLevel>> value);
    [CompilerGeneratedAttribute]
public Nullable`1<StringEnum`1<InstallationReadWritePermissionLevel>> get_RepositoryCustomProperties();
    [CompilerGeneratedAttribute]
private void set_RepositoryCustomProperties(Nullable`1<StringEnum`1<InstallationReadWritePermissionLevel>> value);
    [CompilerGeneratedAttribute]
public Nullable`1<StringEnum`1<InstallationReadWritePermissionLevel>> get_RepositoryHooks();
    [CompilerGeneratedAttribute]
private void set_RepositoryHooks(Nullable`1<StringEnum`1<InstallationReadWritePermissionLevel>> value);
    [CompilerGeneratedAttribute]
public Nullable`1<StringEnum`1<InstallationReadWriteAdminPermissionLevel>> get_RepositoryProjects();
    [CompilerGeneratedAttribute]
private void set_RepositoryProjects(Nullable`1<StringEnum`1<InstallationReadWriteAdminPermissionLevel>> value);
    [CompilerGeneratedAttribute]
public Nullable`1<StringEnum`1<InstallationReadWritePermissionLevel>> get_SecretScanningAlerts();
    [CompilerGeneratedAttribute]
private void set_SecretScanningAlerts(Nullable`1<StringEnum`1<InstallationReadWritePermissionLevel>> value);
    [CompilerGeneratedAttribute]
public Nullable`1<StringEnum`1<InstallationReadWritePermissionLevel>> get_Secrets();
    [CompilerGeneratedAttribute]
private void set_Secrets(Nullable`1<StringEnum`1<InstallationReadWritePermissionLevel>> value);
    [CompilerGeneratedAttribute]
public Nullable`1<StringEnum`1<InstallationReadWritePermissionLevel>> get_SecurityEvents();
    [CompilerGeneratedAttribute]
private void set_SecurityEvents(Nullable`1<StringEnum`1<InstallationReadWritePermissionLevel>> value);
    [CompilerGeneratedAttribute]
public Nullable`1<StringEnum`1<InstallationReadWritePermissionLevel>> get_SingleFile();
    [CompilerGeneratedAttribute]
private void set_SingleFile(Nullable`1<StringEnum`1<InstallationReadWritePermissionLevel>> value);
    [CompilerGeneratedAttribute]
public Nullable`1<StringEnum`1<InstallationReadWritePermissionLevel>> get_Statuses();
    [CompilerGeneratedAttribute]
private void set_Statuses(Nullable`1<StringEnum`1<InstallationReadWritePermissionLevel>> value);
    [CompilerGeneratedAttribute]
public Nullable`1<StringEnum`1<InstallationReadWritePermissionLevel>> get_VulnerabilityAlerts();
    [CompilerGeneratedAttribute]
private void set_VulnerabilityAlerts(Nullable`1<StringEnum`1<InstallationReadWritePermissionLevel>> value);
    [CompilerGeneratedAttribute]
public Nullable`1<StringEnum`1<InstallationWritePermissionLevel>> get_Workflows();
    [CompilerGeneratedAttribute]
private void set_Workflows(Nullable`1<StringEnum`1<InstallationWritePermissionLevel>> value);
    [CompilerGeneratedAttribute]
public Nullable`1<StringEnum`1<InstallationReadWritePermissionLevel>> get_Members();
    [CompilerGeneratedAttribute]
private void set_Members(Nullable`1<StringEnum`1<InstallationReadWritePermissionLevel>> value);
    [CompilerGeneratedAttribute]
public Nullable`1<StringEnum`1<InstallationReadWritePermissionLevel>> get_OrganizationAdministration();
    [CompilerGeneratedAttribute]
private void set_OrganizationAdministration(Nullable`1<StringEnum`1<InstallationReadWritePermissionLevel>> value);
    [CompilerGeneratedAttribute]
public Nullable`1<StringEnum`1<InstallationReadWritePermissionLevel>> get_OrganizationCopilotSeatManagement();
    [CompilerGeneratedAttribute]
private void set_OrganizationCopilotSeatManagement(Nullable`1<StringEnum`1<InstallationReadWritePermissionLevel>> value);
    [CompilerGeneratedAttribute]
public Nullable`1<StringEnum`1<InstallationReadWriteAdminPermissionLevel>> get_OrganizationCustomProperties();
    [CompilerGeneratedAttribute]
private void set_OrganizationCustomProperties(Nullable`1<StringEnum`1<InstallationReadWriteAdminPermissionLevel>> value);
    [CompilerGeneratedAttribute]
public Nullable`1<StringEnum`1<InstallationReadWritePermissionLevel>> get_OrganizationCustomRoles();
    [CompilerGeneratedAttribute]
private void set_OrganizationCustomRoles(Nullable`1<StringEnum`1<InstallationReadWritePermissionLevel>> value);
    [CompilerGeneratedAttribute]
public Nullable`1<StringEnum`1<InstallationReadWritePermissionLevel>> get_OrganizationAnnouncementBanners();
    [CompilerGeneratedAttribute]
private void set_OrganizationAnnouncementBanners(Nullable`1<StringEnum`1<InstallationReadWritePermissionLevel>> value);
    [CompilerGeneratedAttribute]
public Nullable`1<StringEnum`1<InstallationReadWritePermissionLevel>> get_OrganizationHooks();
    [CompilerGeneratedAttribute]
private void set_OrganizationHooks(Nullable`1<StringEnum`1<InstallationReadWritePermissionLevel>> value);
    [CompilerGeneratedAttribute]
public Nullable`1<StringEnum`1<InstallationReadPermissionLevel>> get_OrganizationPlan();
    [CompilerGeneratedAttribute]
private void set_OrganizationPlan(Nullable`1<StringEnum`1<InstallationReadPermissionLevel>> value);
    [CompilerGeneratedAttribute]
public Nullable`1<StringEnum`1<InstallationReadWriteAdminPermissionLevel>> get_OrganizationProjects();
    [CompilerGeneratedAttribute]
private void set_OrganizationProjects(Nullable`1<StringEnum`1<InstallationReadWriteAdminPermissionLevel>> value);
    [CompilerGeneratedAttribute]
public Nullable`1<StringEnum`1<InstallationReadWritePermissionLevel>> get_OrganizationPackages();
    [CompilerGeneratedAttribute]
private void set_OrganizationPackages(Nullable`1<StringEnum`1<InstallationReadWritePermissionLevel>> value);
    [CompilerGeneratedAttribute]
public Nullable`1<StringEnum`1<InstallationReadWritePermissionLevel>> get_OrganizationSecrets();
    [CompilerGeneratedAttribute]
private void set_OrganizationSecrets(Nullable`1<StringEnum`1<InstallationReadWritePermissionLevel>> value);
    [CompilerGeneratedAttribute]
public Nullable`1<StringEnum`1<InstallationReadWritePermissionLevel>> get_OrganizationSelfHostedRunners();
    [CompilerGeneratedAttribute]
private void set_OrganizationSelfHostedRunners(Nullable`1<StringEnum`1<InstallationReadWritePermissionLevel>> value);
    [CompilerGeneratedAttribute]
public Nullable`1<StringEnum`1<InstallationReadWritePermissionLevel>> get_OrganizationUserBlocking();
    [CompilerGeneratedAttribute]
private void set_OrganizationUserBlocking(Nullable`1<StringEnum`1<InstallationReadWritePermissionLevel>> value);
    [CompilerGeneratedAttribute]
public Nullable`1<StringEnum`1<InstallationReadWritePermissionLevel>> get_TeamDiscussions();
    [CompilerGeneratedAttribute]
private void set_TeamDiscussions(Nullable`1<StringEnum`1<InstallationReadWritePermissionLevel>> value);
    internal string get_DebuggerDisplay();
}
public enum Octokit.InstallationReadPermissionLevel : Enum {
    public int value__;
    [ParameterAttribute]
public static InstallationReadPermissionLevel Read;
}
public enum Octokit.InstallationReadWriteAdminPermissionLevel : Enum {
    public int value__;
    [ParameterAttribute]
public static InstallationReadWriteAdminPermissionLevel Read;
    [ParameterAttribute]
public static InstallationReadWriteAdminPermissionLevel Write;
    [ParameterAttribute]
public static InstallationReadWriteAdminPermissionLevel Admin;
}
public enum Octokit.InstallationReadWritePermissionLevel : Enum {
    public int value__;
    [ParameterAttribute]
public static InstallationReadWritePermissionLevel Read;
    [ParameterAttribute]
public static InstallationReadWritePermissionLevel Write;
}
public enum Octokit.InstallationRepositorySelection : Enum {
    public int value__;
    [ParameterAttribute]
public static InstallationRepositorySelection All;
    [ParameterAttribute]
public static InstallationRepositorySelection Selected;
}
[DebuggerDisplayAttribute("{DebuggerDisplay,nq}")]
public class Octokit.InstallationsResponse : object {
    [CompilerGeneratedAttribute]
private int <TotalCount>k__BackingField;
    [CompilerGeneratedAttribute]
private IReadOnlyList`1<Installation> <Installations>k__BackingField;
    public int TotalCount { get; private set; }
    public IReadOnlyList`1<Installation> Installations { get; private set; }
    internal string DebuggerDisplay { get; }
    public InstallationsResponse(int totalCount, IReadOnlyList`1<Installation> installations);
    [CompilerGeneratedAttribute]
public int get_TotalCount();
    [CompilerGeneratedAttribute]
private void set_TotalCount(int value);
    [CompilerGeneratedAttribute]
public IReadOnlyList`1<Installation> get_Installations();
    [CompilerGeneratedAttribute]
private void set_Installations(IReadOnlyList`1<Installation> value);
    internal string get_DebuggerDisplay();
}
public enum Octokit.InstallationWritePermissionLevel : Enum {
    public int value__;
    [ParameterAttribute]
public static InstallationWritePermissionLevel Write;
}
internal class Octokit.Internal.AnonymousAuthenticator : object {
    public sealed virtual void Authenticate(IRequest request, Credentials credentials);
}
internal static class Octokit.Internal.ApiInfoParser : object {
    public static string ReceivedTimeHeaderName;
    private static RegexOptions regexOptions;
    private static Regex _linkRelRegex;
    private static Regex _linkUriRegex;
    private static ApiInfoParser();
    private static KeyValuePair`2<string, string> LookupHeader(IDictionary`2<string, string> headers, string key);
    private static bool Exists(KeyValuePair`2<string, string> kvp);
    public static ApiInfo ParseResponseHeaders(IDictionary`2<string, string> responseHeaders);
}
public class Octokit.Internal.ApiResponse`1 : object {
    [CompilerGeneratedAttribute]
private T <Body>k__BackingField;
    [CompilerGeneratedAttribute]
private IResponse <HttpResponse>k__BackingField;
    public T Body { get; private set; }
    public IResponse HttpResponse { get; private set; }
    public ApiResponse`1(IResponse response);
    public ApiResponse`1(IResponse response, T bodyAsObject);
    [CompilerGeneratedAttribute]
public sealed virtual T get_Body();
    [CompilerGeneratedAttribute]
private void set_Body(T value);
    [CompilerGeneratedAttribute]
public sealed virtual IResponse get_HttpResponse();
    [CompilerGeneratedAttribute]
private void set_HttpResponse(IResponse value);
    private static T GetBodyAsObject(IResponse response);
}
internal class Octokit.Internal.Authenticator : object {
    private Dictionary`2<AuthenticationType, IAuthenticationHandler> authenticators;
    [CompilerGeneratedAttribute]
private ICredentialStore <CredentialStore>k__BackingField;
    public ICredentialStore CredentialStore { get; public set; }
    public Authenticator(ICredentialStore credentialStore);
    [AsyncStateMachineAttribute("Octokit.Internal.Authenticator/<Apply>d__2")]
public Task Apply(IRequest request);
    [CompilerGeneratedAttribute]
public ICredentialStore get_CredentialStore();
    [CompilerGeneratedAttribute]
public void set_CredentialStore(ICredentialStore value);
}
internal class Octokit.Internal.BasicAuthenticator : object {
    public sealed virtual void Authenticate(IRequest request, Credentials credentials);
}
internal class Octokit.Internal.BearerTokenAuthenticator : object {
    public sealed virtual void Authenticate(IRequest request, Credentials credentials);
}
public class Octokit.Internal.HttpClientAdapter : object {
    private HttpClient _http;
    public static string RedirectCountKey;
    public HttpClientAdapter(Func`1<HttpMessageHandler> getHandler);
    [AsyncStateMachineAttribute("Octokit.Internal.HttpClientAdapter/<Send>d__3")]
public sealed virtual Task`1<IResponse> Send(IRequest request, CancellationToken cancellationToken, Func`2<object, object> preprocessResponseBody);
    private static CancellationToken GetCancellationTokenForRequest(IRequest request, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Octokit.Internal.HttpClientAdapter/<BuildResponse>d__5")]
protected virtual Task`1<IResponse> BuildResponse(HttpResponseMessage responseMessage, Func`2<object, object> preprocessResponseBody);
    protected virtual HttpRequestMessage BuildRequestMessage(IRequest request);
    private static string GetContentMediaType(HttpContent httpContent);
    public sealed virtual void Dispose();
    protected virtual void Dispose(bool disposing);
    [AsyncStateMachineAttribute("Octokit.Internal.HttpClientAdapter/<SendAsync>d__10")]
public Task`1<HttpResponseMessage> SendAsync(HttpRequestMessage request, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Octokit.Internal.HttpClientAdapter/<CloneHttpRequestMessageAsync>d__11")]
public static Task`1<HttpRequestMessage> CloneHttpRequestMessageAsync(HttpRequestMessage oldRequest);
    public sealed virtual void SetRequestTimeout(TimeSpan timeout);
}
public static class Octokit.Internal.HttpMessageHandlerFactory : object {
    public static HttpMessageHandler CreateDefault();
    public static HttpMessageHandler CreateDefault(IWebProxy proxy);
}
internal static class Octokit.Internal.HttpVerb : object {
    private static HttpMethod patch;
    internal static HttpMethod Patch { get; }
    private static HttpVerb();
    internal static HttpMethod get_Patch();
}
internal interface Octokit.Internal.IAuthenticationHandler {
    public abstract virtual void Authenticate(IRequest request, Credentials credentials);
}
public interface Octokit.Internal.IHttpClient {
    public abstract virtual Task`1<IResponse> Send(IRequest request, CancellationToken cancellationToken, Func`2<object, object> preprocessResponseBody);
    public abstract virtual void SetRequestTimeout(TimeSpan timeout);
}
public interface Octokit.Internal.IJsonSerializer {
    public abstract virtual string Serialize(object item);
    public abstract virtual T Deserialize(string json);
}
public class Octokit.Internal.InMemoryCredentialStore : object {
    private Credentials _credentials;
    public InMemoryCredentialStore(Credentials credentials);
    public sealed virtual Task`1<Credentials> GetCredentials();
}
public interface Octokit.Internal.IRequest {
    public object Body { get; public set; }
    public Dictionary`2<string, string> Headers { get; }
    public HttpMethod Method { get; }
    public Dictionary`2<string, string> Parameters { get; }
    public Uri BaseAddress { get; }
    public Uri Endpoint { get; }
    public TimeSpan Timeout { get; }
    public string ContentType { get; }
    public abstract virtual object get_Body();
    public abstract virtual void set_Body(object value);
    public abstract virtual Dictionary`2<string, string> get_Headers();
    public abstract virtual HttpMethod get_Method();
    public abstract virtual Dictionary`2<string, string> get_Parameters();
    public abstract virtual Uri get_BaseAddress();
    public abstract virtual Uri get_Endpoint();
    public abstract virtual TimeSpan get_Timeout();
    public abstract virtual string get_ContentType();
}
public class Octokit.Internal.JsonHttpPipeline : object {
    private IJsonSerializer _serializer;
    public JsonHttpPipeline(IJsonSerializer serializer);
    public void SerializeRequest(IRequest request);
    public IApiResponse`1<T> DeserializeResponse(IResponse response);
}
[AttributeUsageAttribute("384")]
public class Octokit.Internal.ParameterAttribute : Attribute {
    [CompilerGeneratedAttribute]
private string <Key>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Value>k__BackingField;
    public string Key { get; public set; }
    public string Value { get; public set; }
    [CompilerGeneratedAttribute]
public string get_Key();
    [CompilerGeneratedAttribute]
public void set_Key(string value);
    [CompilerGeneratedAttribute]
public string get_Value();
    [CompilerGeneratedAttribute]
public void set_Value(string value);
}
public class Octokit.Internal.ReadOnlyPagedCollection`1 : ReadOnlyCollection`1<T> {
    private ApiInfo _info;
    private Func`2<Uri, Task`1<IApiResponse`1<List`1<T>>>> _nextPageFunc;
    public ReadOnlyPagedCollection`1(IApiResponse`1<List`1<T>> response, Func`2<Uri, Task`1<IApiResponse`1<List`1<T>>>> nextPageFunc);
    [AsyncStateMachineAttribute("Octokit.Internal.ReadOnlyPagedCollection`1/<GetNextPage>d__3")]
public sealed virtual Task`1<IReadOnlyPagedCollection`1<T>> GetNextPage();
}
internal class Octokit.Internal.RedirectHandler : DelegatingHandler {
}
public class Octokit.Internal.Request : object {
    [CompilerGeneratedAttribute]
private object <Body>k__BackingField;
    [CompilerGeneratedAttribute]
private Dictionary`2<string, string> <Headers>k__BackingField;
    [CompilerGeneratedAttribute]
private HttpMethod <Method>k__BackingField;
    [CompilerGeneratedAttribute]
private Dictionary`2<string, string> <Parameters>k__BackingField;
    [CompilerGeneratedAttribute]
private Uri <BaseAddress>k__BackingField;
    [CompilerGeneratedAttribute]
private Uri <Endpoint>k__BackingField;
    [CompilerGeneratedAttribute]
private TimeSpan <Timeout>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ContentType>k__BackingField;
    public object Body { get; public set; }
    public Dictionary`2<string, string> Headers { get; private set; }
    public HttpMethod Method { get; public set; }
    public Dictionary`2<string, string> Parameters { get; private set; }
    public Uri BaseAddress { get; public set; }
    public Uri Endpoint { get; public set; }
    public TimeSpan Timeout { get; public set; }
    public string ContentType { get; public set; }
    [CompilerGeneratedAttribute]
public sealed virtual object get_Body();
    [CompilerGeneratedAttribute]
public sealed virtual void set_Body(object value);
    [CompilerGeneratedAttribute]
public sealed virtual Dictionary`2<string, string> get_Headers();
    [CompilerGeneratedAttribute]
private void set_Headers(Dictionary`2<string, string> value);
    [CompilerGeneratedAttribute]
public sealed virtual HttpMethod get_Method();
    [CompilerGeneratedAttribute]
public void set_Method(HttpMethod value);
    [CompilerGeneratedAttribute]
public sealed virtual Dictionary`2<string, string> get_Parameters();
    [CompilerGeneratedAttribute]
private void set_Parameters(Dictionary`2<string, string> value);
    [CompilerGeneratedAttribute]
public sealed virtual Uri get_BaseAddress();
    [CompilerGeneratedAttribute]
public void set_BaseAddress(Uri value);
    [CompilerGeneratedAttribute]
public sealed virtual Uri get_Endpoint();
    [CompilerGeneratedAttribute]
public void set_Endpoint(Uri value);
    [CompilerGeneratedAttribute]
public sealed virtual TimeSpan get_Timeout();
    [CompilerGeneratedAttribute]
public void set_Timeout(TimeSpan value);
    [CompilerGeneratedAttribute]
public sealed virtual string get_ContentType();
    [CompilerGeneratedAttribute]
public void set_ContentType(string value);
}
internal class Octokit.Internal.Response : object {
    [CompilerGeneratedAttribute]
private object <Body>k__BackingField;
    [CompilerGeneratedAttribute]
private IReadOnlyDictionary`2<string, string> <Headers>k__BackingField;
    [CompilerGeneratedAttribute]
private ApiInfo <ApiInfo>k__BackingField;
    [CompilerGeneratedAttribute]
private HttpStatusCode <StatusCode>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ContentType>k__BackingField;
    public object Body { get; private set; }
    public IReadOnlyDictionary`2<string, string> Headers { get; private set; }
    public ApiInfo ApiInfo { get; internal set; }
    public HttpStatusCode StatusCode { get; private set; }
    public string ContentType { get; private set; }
    [ObsoleteAttribute("Use the constructor with maximum parameters to avoid shortcuts")]
public Response(IDictionary`2<string, string> headers);
    public Response(HttpStatusCode statusCode, object body, IDictionary`2<string, string> headers, string contentType);
    [CompilerGeneratedAttribute]
public sealed virtual object get_Body();
    [CompilerGeneratedAttribute]
private void set_Body(object value);
    [CompilerGeneratedAttribute]
public sealed virtual IReadOnlyDictionary`2<string, string> get_Headers();
    [CompilerGeneratedAttribute]
private void set_Headers(IReadOnlyDictionary`2<string, string> value);
    [CompilerGeneratedAttribute]
public sealed virtual ApiInfo get_ApiInfo();
    [CompilerGeneratedAttribute]
internal void set_ApiInfo(ApiInfo value);
    [CompilerGeneratedAttribute]
public sealed virtual HttpStatusCode get_StatusCode();
    [CompilerGeneratedAttribute]
private void set_StatusCode(HttpStatusCode value);
    [CompilerGeneratedAttribute]
public sealed virtual string get_ContentType();
    [CompilerGeneratedAttribute]
private void set_ContentType(string value);
}
public abstract class Octokit.Internal.SearchResult`1 : object {
    [CompilerGeneratedAttribute]
private int <TotalCount>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IncompleteResults>k__BackingField;
    [CompilerGeneratedAttribute]
private IReadOnlyList`1<T> <Items>k__BackingField;
    public int TotalCount { get; protected set; }
    public bool IncompleteResults { get; protected set; }
    public IReadOnlyList`1<T> Items { get; protected set; }
    internal string DebuggerDisplay { get; }
    protected SearchResult`1(int totalCount, bool incompleteResults, IReadOnlyList`1<T> items);
    [CompilerGeneratedAttribute]
public int get_TotalCount();
    [CompilerGeneratedAttribute]
protected void set_TotalCount(int value);
    [CompilerGeneratedAttribute]
public bool get_IncompleteResults();
    [CompilerGeneratedAttribute]
protected void set_IncompleteResults(bool value);
    [CompilerGeneratedAttribute]
public IReadOnlyList`1<T> get_Items();
    [CompilerGeneratedAttribute]
protected void set_Items(IReadOnlyList`1<T> value);
    internal string get_DebuggerDisplay();
}
[AttributeUsageAttribute("384")]
public class Octokit.Internal.SerializeNullAttribute : Attribute {
}
public class Octokit.Internal.SimpleJsonSerializer : object {
    private static GitHubSerializerStrategy _serializationStrategy;
    private static SimpleJsonSerializer();
    public sealed virtual string Serialize(object item);
    public sealed virtual T Deserialize(string json);
    internal static string SerializeEnum(Enum value);
    internal static object DeserializeEnum(string value, Type type);
}
internal class Octokit.Internal.TokenAuthenticator : object {
    public sealed virtual void Authenticate(IRequest request, Credentials credentials);
}
public class Octokit.InvalidGitIgnoreTemplateException : ApiValidationException {
    public string Message { get; }
    public InvalidGitIgnoreTemplateException(ApiValidationException innerException);
    protected InvalidGitIgnoreTemplateException(SerializationInfo info, StreamingContext context);
    public virtual string get_Message();
}
public enum Octokit.InvitationPermissionType : Enum {
    public int value__;
    [ParameterAttribute]
public static InvitationPermissionType Read;
    [ParameterAttribute]
public static InvitationPermissionType Write;
    [ParameterAttribute]
public static InvitationPermissionType Admin;
    [ParameterAttribute]
public static InvitationPermissionType Triage;
    [ParameterAttribute]
public static InvitationPermissionType Maintain;
}
[DebuggerDisplayAttribute("{DebuggerDisplay,nq}")]
public class Octokit.InvitationUpdate : object {
    [CompilerGeneratedAttribute]
private InvitationPermissionType <Permissions>k__BackingField;
    public InvitationPermissionType Permissions { get; private set; }
    internal string DebuggerDisplay { get; }
    public InvitationUpdate(InvitationPermissionType permission);
    [CompilerGeneratedAttribute]
public InvitationPermissionType get_Permissions();
    [CompilerGeneratedAttribute]
private void set_Permissions(InvitationPermissionType value);
    internal string get_DebuggerDisplay();
}
public interface Octokit.IOauthClient {
    public abstract virtual Uri GetGitHubLoginUrl(OauthLoginRequest request);
    public abstract virtual Task`1<OauthToken> CreateAccessToken(OauthTokenRequest request);
    public abstract virtual Task`1<OauthDeviceFlowResponse> InitiateDeviceFlow(OauthDeviceFlowRequest request);
    public abstract virtual Task`1<OauthToken> CreateAccessTokenForDeviceFlow(string clientId, OauthDeviceFlowResponse deviceFlowResponse);
    public abstract virtual Task`1<OauthToken> CreateAccessTokenFromRenewalToken(OauthTokenRenewalRequest request);
}
public interface Octokit.IOrganizationActionsClient {
    public IOrganizationSecretsClient Secrets { get; }
    public abstract virtual IOrganizationSecretsClient get_Secrets();
}
public interface Octokit.IOrganizationCustomPropertiesClient {
    public IOrganizationCustomPropertyValuesClient Values { get; }
    [ExcludeFromPaginationApiOptionsConventionTestAttribute("Pagination not supported by GitHub API (tested 15/06/2024)")]
public abstract virtual Task`1<IReadOnlyList`1<OrganizationCustomProperty>> GetAll(string org);
    public abstract virtual Task`1<OrganizationCustomProperty> Get(string org, string propertyName);
    public abstract virtual Task`1<IReadOnlyList`1<OrganizationCustomProperty>> CreateOrUpdate(string org, UpsertOrganizationCustomProperties properties);
    public abstract virtual Task`1<OrganizationCustomProperty> CreateOrUpdate(string org, string propertyName, UpsertOrganizationCustomProperty property);
    public abstract virtual Task Delete(string org, string propertyName);
    public abstract virtual IOrganizationCustomPropertyValuesClient get_Values();
}
public interface Octokit.IOrganizationCustomPropertyValuesClient {
    public abstract virtual Task`1<IReadOnlyList`1<OrganizationCustomPropertyValues>> GetAll(string org);
    public abstract virtual Task`1<IReadOnlyList`1<OrganizationCustomPropertyValues>> GetAll(string org, ApiOptions options);
    [ExcludeFromPaginationApiOptionsConventionTestAttribute("This API call uses the OrganizationCustomPropertyValuesRequest parameter for pagination")]
public abstract virtual Task`1<IReadOnlyList`1<OrganizationCustomPropertyValues>> GetAll(string org, OrganizationCustomPropertyValuesRequest repositoryQuery);
    public abstract virtual Task CreateOrUpdate(string org, UpsertOrganizationCustomPropertyValues propertyValues);
}
public interface Octokit.IOrganizationHooksClient {
    public abstract virtual Task`1<IReadOnlyList`1<OrganizationHook>> GetAll(string org);
    public abstract virtual Task`1<IReadOnlyList`1<OrganizationHook>> GetAll(string org, ApiOptions options);
    public abstract virtual Task`1<OrganizationHook> Get(string org, int hookId);
    public abstract virtual Task`1<OrganizationHook> Create(string org, NewOrganizationHook hook);
    public abstract virtual Task`1<OrganizationHook> Edit(string org, int hookId, EditOrganizationHook hook);
    public abstract virtual Task Ping(string org, int hookId);
    public abstract virtual Task Delete(string org, int hookId);
}
public interface Octokit.IOrganizationMembersClient {
    public abstract virtual Task`1<IReadOnlyList`1<User>> GetAll(string org);
    public abstract virtual Task`1<IReadOnlyList`1<User>> GetAll(string org, ApiOptions options);
    public abstract virtual Task`1<IReadOnlyList`1<User>> GetAll(string org, OrganizationMembersFilter filter);
    public abstract virtual Task`1<IReadOnlyList`1<User>> GetAll(string org, OrganizationMembersFilter filter, ApiOptions options);
    public abstract virtual Task`1<IReadOnlyList`1<User>> GetAll(string org, OrganizationMembersRole role);
    public abstract virtual Task`1<IReadOnlyList`1<User>> GetAll(string org, OrganizationMembersRole role, ApiOptions options);
    public abstract virtual Task`1<IReadOnlyList`1<User>> GetAll(string org, OrganizationMembersFilter filter, OrganizationMembersRole role);
    public abstract virtual Task`1<IReadOnlyList`1<User>> GetAll(string org, OrganizationMembersFilter filter, OrganizationMembersRole role, ApiOptions options);
    public abstract virtual Task`1<IReadOnlyList`1<User>> GetAllPublic(string org);
    public abstract virtual Task`1<IReadOnlyList`1<User>> GetAllPublic(string org, ApiOptions options);
    public abstract virtual Task`1<bool> CheckMember(string org, string user);
    public abstract virtual Task`1<bool> CheckMemberPublic(string org, string user);
    public abstract virtual Task Delete(string org, string user);
    public abstract virtual Task`1<bool> Publicize(string org, string user);
    public abstract virtual Task Conceal(string org, string user);
    public abstract virtual Task`1<OrganizationMembership> GetOrganizationMembership(string org, string user);
    public abstract virtual Task`1<OrganizationMembership> AddOrUpdateOrganizationMembership(string org, string user, OrganizationMembershipUpdate addOrUpdateRequest);
    public abstract virtual Task`1<OrganizationMembershipInvitation> CreateOrganizationInvitation(string org, OrganizationInvitationRequest invitationRequest);
    public abstract virtual Task RemoveOrganizationMembership(string org, string user);
    public abstract virtual Task`1<IReadOnlyList`1<OrganizationMembershipInvitation>> GetAllPendingInvitations(string org);
    public abstract virtual Task`1<IReadOnlyList`1<OrganizationMembershipInvitation>> GetAllPendingInvitations(string org, ApiOptions options);
    public abstract virtual Task`1<IReadOnlyList`1<OrganizationMembershipInvitation>> GetAllFailedInvitations(string org);
    public abstract virtual Task`1<IReadOnlyList`1<OrganizationMembershipInvitation>> GetAllFailedInvitations(string org, ApiOptions options);
    public abstract virtual Task CancelOrganizationInvitation(string org, long invitationId);
    public abstract virtual Task`1<IReadOnlyList`1<OrganizationMembership>> GetAllOrganizationMembershipsForCurrent();
    public abstract virtual Task`1<IReadOnlyList`1<OrganizationMembership>> GetAllOrganizationMembershipsForCurrent(ApiOptions options);
}
public interface Octokit.IOrganizationOutsideCollaboratorsClient {
    public abstract virtual Task`1<IReadOnlyList`1<User>> GetAll(string org);
    public abstract virtual Task`1<IReadOnlyList`1<User>> GetAll(string org, ApiOptions options);
    public abstract virtual Task`1<IReadOnlyList`1<User>> GetAll(string org, OrganizationMembersFilter filter);
    public abstract virtual Task`1<IReadOnlyList`1<User>> GetAll(string org, OrganizationMembersFilter filter, ApiOptions options);
    public abstract virtual Task`1<bool> Delete(string org, string user);
    public abstract virtual Task`1<bool> ConvertFromMember(string org, string user);
}
public interface Octokit.IOrganizationsClient {
    public IOrganizationMembersClient Member { get; }
    public ITeamsClient Team { get; }
    public IOrganizationHooksClient Hook { get; }
    public IOrganizationOutsideCollaboratorsClient OutsideCollaborator { get; }
    public IOrganizationActionsClient Actions { get; }
    public IOrganizationCustomPropertiesClient CustomProperty { get; }
    public abstract virtual IOrganizationMembersClient get_Member();
    public abstract virtual ITeamsClient get_Team();
    public abstract virtual IOrganizationHooksClient get_Hook();
    public abstract virtual IOrganizationOutsideCollaboratorsClient get_OutsideCollaborator();
    public abstract virtual IOrganizationActionsClient get_Actions();
    public abstract virtual IOrganizationCustomPropertiesClient get_CustomProperty();
    public abstract virtual Task`1<Organization> Get(string org);
    public abstract virtual Task`1<IReadOnlyList`1<Organization>> GetAllForCurrent();
    public abstract virtual Task`1<IReadOnlyList`1<Organization>> GetAllForCurrent(ApiOptions options);
    public abstract virtual Task`1<IReadOnlyList`1<Organization>> GetAllForUser(string user);
    public abstract virtual Task`1<IReadOnlyList`1<Organization>> GetAllForUser(string user, ApiOptions options);
    [ExcludeFromPaginationApiOptionsConventionTestAttribute("This API call uses the OrganizationRequest.Since parameter for pagination")]
public abstract virtual Task`1<IReadOnlyList`1<Organization>> GetAll();
    [ExcludeFromPaginationApiOptionsConventionTestAttribute("This API call uses the OrganizationRequest.Since parameter for pagination")]
public abstract virtual Task`1<IReadOnlyList`1<Organization>> GetAll(OrganizationRequest request);
    public abstract virtual Task`1<Organization> Update(string org, OrganizationUpdate updateRequest);
    public abstract virtual Task`1<IReadOnlyList`1<OrganizationCredential>> GetAllAuthorizations(string org);
    public abstract virtual Task`1<IReadOnlyList`1<OrganizationCredential>> GetAllAuthorizations(string org, ApiOptions options);
    public abstract virtual Task`1<IReadOnlyList`1<OrganizationCredential>> GetAllAuthorizations(string org, string login);
    public abstract virtual Task`1<IReadOnlyList`1<OrganizationCredential>> GetAllAuthorizations(string org, string login, ApiOptions options);
}
public interface Octokit.IOrganizationSecretsClient {
    public abstract virtual Task`1<SecretsPublicKey> GetPublicKey(string org);
    public abstract virtual Task`1<OrganizationSecretsCollection> GetAll(string org);
    public abstract virtual Task`1<OrganizationSecret> Get(string org, string secretName);
    public abstract virtual Task`1<OrganizationSecret> CreateOrUpdate(string org, string secretName, UpsertOrganizationSecret upsertSecret);
    public abstract virtual Task Delete(string org, string secretName);
    public abstract virtual Task`1<OrganizationSecretRepositoryCollection> GetSelectedRepositoriesForSecret(string org, string secretName);
    public abstract virtual Task SetSelectedRepositoriesForSecret(string org, string secretName, SelectedRepositoryCollection repositories);
    public abstract virtual Task AddRepoToOrganizationSecret(string org, string secretName, long repoId);
    public abstract virtual Task RemoveRepoFromOrganizationSecret(string org, string secretName, long repoId);
}
public interface Octokit.IPackagesClient {
    public IPackageVersionsClient PackageVersions { get; }
    public abstract virtual IPackageVersionsClient get_PackageVersions();
    public abstract virtual Task`1<IReadOnlyList`1<Package>> GetAllForOrg(string org, PackageType packageType);
    public abstract virtual Task`1<IReadOnlyList`1<Package>> GetAllForOrg(string org, PackageType packageType, ApiOptions options);
    public abstract virtual Task`1<IReadOnlyList`1<Package>> GetAllForOrg(string org, PackageType packageType, Nullable`1<PackageVisibility> packageVisibility);
    public abstract virtual Task`1<IReadOnlyList`1<Package>> GetAllForOrg(string org, PackageType packageType, Nullable`1<PackageVisibility> packageVisibility, ApiOptions options);
    public abstract virtual Task`1<Package> GetForOrg(string org, PackageType packageType, string packageName);
    public abstract virtual Task DeleteForOrg(string org, PackageType packageType, string packageName);
    public abstract virtual Task RestoreForOrg(string org, PackageType packageType, string packageName);
    public abstract virtual Task`1<IReadOnlyList`1<Package>> GetAllForActiveUser(PackageType packageType);
    public abstract virtual Task`1<IReadOnlyList`1<Package>> GetAllForActiveUser(PackageType packageType, ApiOptions options);
    public abstract virtual Task`1<IReadOnlyList`1<Package>> GetAllForActiveUser(PackageType packageType, Nullable`1<PackageVisibility> packageVisibility);
    public abstract virtual Task`1<IReadOnlyList`1<Package>> GetAllForActiveUser(PackageType packageType, Nullable`1<PackageVisibility> packageVisibility, ApiOptions options);
    public abstract virtual Task`1<Package> GetForActiveUser(PackageType packageType, string packageName);
    public abstract virtual Task DeleteForActiveUser(PackageType packageType, string packageName);
    public abstract virtual Task RestoreForActiveUser(PackageType packageType, string packageName);
    public abstract virtual Task`1<IReadOnlyList`1<Package>> GetAllForUser(string username, PackageType packageType);
    public abstract virtual Task`1<IReadOnlyList`1<Package>> GetAllForUser(string username, PackageType packageType, ApiOptions options);
    public abstract virtual Task`1<IReadOnlyList`1<Package>> GetAllForUser(string username, PackageType packageType, Nullable`1<PackageVisibility> packageVisibility);
    public abstract virtual Task`1<IReadOnlyList`1<Package>> GetAllForUser(string username, PackageType packageType, Nullable`1<PackageVisibility> packageVisibility, ApiOptions options);
    public abstract virtual Task`1<Package> GetForUser(string username, PackageType packageType, string packageName);
    public abstract virtual Task DeleteForUser(string username, PackageType packageType, string packageName);
    public abstract virtual Task RestoreForUser(string username, PackageType packageType, string packageName);
}
public interface Octokit.IPackageVersionsClient {
    public abstract virtual Task`1<IReadOnlyList`1<PackageVersion>> GetAllForOrg(string org, PackageType packageType, string packageName, PackageVersionState state, ApiOptions options);
    public abstract virtual Task`1<PackageVersion> GetForOrg(string org, PackageType packageType, string packageName, int packageVersionId);
    public abstract virtual Task DeleteForOrg(string org, PackageType packageType, string packageName, int packageVersionId);
    public abstract virtual Task RestoreForOrg(string org, PackageType packageType, string packageName, int packageVersionId);
    public abstract virtual Task`1<IReadOnlyList`1<PackageVersion>> GetAllForActiveUser(PackageType packageType, string packageName, PackageVersionState state, ApiOptions options);
    public abstract virtual Task`1<PackageVersion> GetForActiveUser(PackageType packageType, string packageName, int packageVersionId);
    public abstract virtual Task DeleteForActiveUser(PackageType packageType, string packageName, int packageVersionId);
    public abstract virtual Task RestoreForActiveUser(PackageType packageType, string packageName, int packageVersionId);
    public abstract virtual Task`1<IReadOnlyList`1<PackageVersion>> GetAllForUser(string username, PackageType packageType, string packageName, PackageVersionState state, ApiOptions options);
    public abstract virtual Task`1<PackageVersion> GetForUser(string username, PackageType packageType, string packageName, int packageVersionId);
    public abstract virtual Task DeleteForUser(string username, PackageType packageType, string packageName, int packageVersionId);
    public abstract virtual Task RestoreForUser(string username, PackageType packageType, string packageName, int packageVersionId);
}
public interface Octokit.IProjectCardsClient {
    public abstract virtual Task`1<IReadOnlyList`1<ProjectCard>> GetAll(int columnId);
    public abstract virtual Task`1<IReadOnlyList`1<ProjectCard>> GetAll(int columnId, ApiOptions options);
    public abstract virtual Task`1<IReadOnlyList`1<ProjectCard>> GetAll(int columnId, ProjectCardRequest request);
    public abstract virtual Task`1<IReadOnlyList`1<ProjectCard>> GetAll(int columnId, ProjectCardRequest request, ApiOptions options);
    public abstract virtual Task`1<ProjectCard> Get(long id);
    public abstract virtual Task`1<ProjectCard> Create(int columnId, NewProjectCard newProjectCard);
    public abstract virtual Task`1<ProjectCard> Update(long id, ProjectCardUpdate projectCardUpdate);
    public abstract virtual Task`1<bool> Delete(long id);
    public abstract virtual Task`1<bool> Move(long id, ProjectCardMove position);
}
public interface Octokit.IProjectColumnsClient {
    public abstract virtual Task`1<IReadOnlyList`1<ProjectColumn>> GetAll(int projectId);
    public abstract virtual Task`1<IReadOnlyList`1<ProjectColumn>> GetAll(int projectId, ApiOptions options);
    public abstract virtual Task`1<ProjectColumn> Get(int columnId);
    public abstract virtual Task`1<ProjectColumn> Create(int projectId, NewProjectColumn newProjectColumn);
    public abstract virtual Task`1<ProjectColumn> Update(int columnId, ProjectColumnUpdate projectColumnUpdate);
    public abstract virtual Task`1<bool> Delete(int columnId);
    public abstract virtual Task`1<bool> Move(int columnId, ProjectColumnMove position);
}
public interface Octokit.IProjectsClient {
    public IProjectCardsClient Card { get; }
    public IProjectColumnsClient Column { get; }
    public abstract virtual Task`1<IReadOnlyList`1<Project>> GetAllForRepository(string owner, string name);
    public abstract virtual Task`1<IReadOnlyList`1<Project>> GetAllForRepository(string owner, string name, ProjectRequest request);
    public abstract virtual Task`1<IReadOnlyList`1<Project>> GetAllForRepository(long repositoryId);
    public abstract virtual Task`1<IReadOnlyList`1<Project>> GetAllForRepository(long repositoryId, ProjectRequest request);
    public abstract virtual Task`1<IReadOnlyList`1<Project>> GetAllForRepository(string owner, string name, ApiOptions options);
    public abstract virtual Task`1<IReadOnlyList`1<Project>> GetAllForRepository(string owner, string name, ProjectRequest request, ApiOptions options);
    public abstract virtual Task`1<IReadOnlyList`1<Project>> GetAllForRepository(long repositoryId, ApiOptions options);
    public abstract virtual Task`1<IReadOnlyList`1<Project>> GetAllForRepository(long repositoryId, ProjectRequest request, ApiOptions options);
    public abstract virtual Task`1<IReadOnlyList`1<Project>> GetAllForOrganization(string organization);
    public abstract virtual Task`1<IReadOnlyList`1<Project>> GetAllForOrganization(string organization, ProjectRequest request);
    public abstract virtual Task`1<IReadOnlyList`1<Project>> GetAllForOrganization(string organization, ApiOptions options);
    public abstract virtual Task`1<IReadOnlyList`1<Project>> GetAllForOrganization(string organization, ProjectRequest request, ApiOptions options);
    public abstract virtual Task`1<Project> Get(int projectId);
    public abstract virtual Task`1<Project> CreateForRepository(long repositoryId, NewProject newProject);
    public abstract virtual Task`1<Project> CreateForOrganization(string organization, NewProject newProject);
    public abstract virtual Task`1<Project> Update(int projectId, ProjectUpdate projectUpdate);
    public abstract virtual Task`1<bool> Delete(int projectId);
    public abstract virtual IProjectCardsClient get_Card();
    public abstract virtual IProjectColumnsClient get_Column();
}
public interface Octokit.IPullRequestReviewCommentReactionsClient {
    public abstract virtual Task`1<IReadOnlyList`1<Reaction>> GetAll(string owner, string name, long commentId);
    public abstract virtual Task`1<IReadOnlyList`1<Reaction>> GetAll(string owner, string name, long commentId, ApiOptions options);
    public abstract virtual Task`1<IReadOnlyList`1<Reaction>> GetAll(long repositoryId, long commentId);
    public abstract virtual Task`1<IReadOnlyList`1<Reaction>> GetAll(long repositoryId, long commentId, ApiOptions options);
    public abstract virtual Task`1<Reaction> Create(string owner, string name, long commentId, NewReaction reaction);
    public abstract virtual Task`1<Reaction> Create(long repositoryId, long commentId, NewReaction reaction);
    public abstract virtual Task Delete(string owner, string name, long commentId, long reactionId);
    public abstract virtual Task Delete(long repositoryId, long commentId, long reactionId);
}
public interface Octokit.IPullRequestReviewCommentsClient {
    public abstract virtual Task`1<IReadOnlyList`1<PullRequestReviewComment>> GetAll(string owner, string name, int pullRequestNumber);
    public abstract virtual Task`1<IReadOnlyList`1<PullRequestReviewComment>> GetAll(long repositoryId, int pullRequestNumber);
    public abstract virtual Task`1<IReadOnlyList`1<PullRequestReviewComment>> GetAll(string owner, string name, int pullRequestNumber, ApiOptions options);
    public abstract virtual Task`1<IReadOnlyList`1<PullRequestReviewComment>> GetAll(long repositoryId, int pullRequestNumber, ApiOptions options);
    public abstract virtual Task`1<IReadOnlyList`1<PullRequestReviewComment>> GetAllForRepository(string owner, string name);
    public abstract virtual Task`1<IReadOnlyList`1<PullRequestReviewComment>> GetAllForRepository(long repositoryId);
    public abstract virtual Task`1<IReadOnlyList`1<PullRequestReviewComment>> GetAllForRepository(string owner, string name, ApiOptions options);
    public abstract virtual Task`1<IReadOnlyList`1<PullRequestReviewComment>> GetAllForRepository(long repositoryId, ApiOptions options);
    public abstract virtual Task`1<IReadOnlyList`1<PullRequestReviewComment>> GetAllForRepository(string owner, string name, PullRequestReviewCommentRequest request);
    public abstract virtual Task`1<IReadOnlyList`1<PullRequestReviewComment>> GetAllForRepository(long repositoryId, PullRequestReviewCommentRequest request);
    public abstract virtual Task`1<IReadOnlyList`1<PullRequestReviewComment>> GetAllForRepository(string owner, string name, PullRequestReviewCommentRequest request, ApiOptions options);
    public abstract virtual Task`1<IReadOnlyList`1<PullRequestReviewComment>> GetAllForRepository(long repositoryId, PullRequestReviewCommentRequest request, ApiOptions options);
    public abstract virtual Task`1<PullRequestReviewComment> GetComment(string owner, string name, long commentId);
    public abstract virtual Task`1<PullRequestReviewComment> GetComment(long repositoryId, long commentId);
    public abstract virtual Task`1<PullRequestReviewComment> Create(string owner, string name, int pullRequestNumber, PullRequestReviewCommentCreate comment);
    public abstract virtual Task`1<PullRequestReviewComment> Create(long repositoryId, int pullRequestNumber, PullRequestReviewCommentCreate comment);
    public abstract virtual Task`1<PullRequestReviewComment> CreateReply(string owner, string name, int pullRequestNumber, PullRequestReviewCommentReplyCreate comment);
    public abstract virtual Task`1<PullRequestReviewComment> CreateReply(long repositoryId, int pullRequestNumber, PullRequestReviewCommentReplyCreate comment);
    public abstract virtual Task`1<PullRequestReviewComment> Edit(string owner, string name, long commentId, PullRequestReviewCommentEdit comment);
    public abstract virtual Task`1<PullRequestReviewComment> Edit(long repositoryId, long commentId, PullRequestReviewCommentEdit comment);
    public abstract virtual Task Delete(string owner, string name, long commentId);
    public abstract virtual Task Delete(long repositoryId, long commentId);
}
public interface Octokit.IPullRequestReviewRequestsClient {
    public abstract virtual Task`1<RequestedReviews> Get(string owner, string name, int pullRequestNumber);
    public abstract virtual Task`1<RequestedReviews> Get(long repositoryId, int pullRequestNumber);
    public abstract virtual Task`1<PullRequest> Create(string owner, string name, int pullRequestNumber, PullRequestReviewRequest users);
    public abstract virtual Task`1<PullRequest> Create(long repositoryId, int pullRequestNumber, PullRequestReviewRequest users);
    public abstract virtual Task Delete(string owner, string name, int pullRequestNumber, PullRequestReviewRequest users);
    public abstract virtual Task Delete(long repositoryId, int pullRequestNumber, PullRequestReviewRequest users);
}
public interface Octokit.IPullRequestReviewsClient {
    public abstract virtual Task`1<IReadOnlyList`1<PullRequestReview>> GetAll(string owner, string name, int pullRequestNumber);
    public abstract virtual Task`1<IReadOnlyList`1<PullRequestReview>> GetAll(long repositoryId, int pullRequestNumber);
    public abstract virtual Task`1<IReadOnlyList`1<PullRequestReview>> GetAll(string owner, string name, int pullRequestNumber, ApiOptions options);
    public abstract virtual Task`1<IReadOnlyList`1<PullRequestReview>> GetAll(long repositoryId, int pullRequestNumber, ApiOptions options);
    public abstract virtual Task`1<PullRequestReview> Get(string owner, string name, int pullRequestNumber, long reviewId);
    public abstract virtual Task`1<PullRequestReview> Get(long repositoryId, int pullRequestNumber, long reviewId);
    public abstract virtual Task`1<PullRequestReview> Create(string owner, string name, int pullRequestNumber, PullRequestReviewCreate review);
    public abstract virtual Task`1<PullRequestReview> Create(long repositoryId, int pullRequestNumber, PullRequestReviewCreate review);
    public abstract virtual Task Delete(string owner, string name, int pullRequestNumber, long reviewId);
    public abstract virtual Task Delete(long repositoryId, int pullRequestNumber, long reviewId);
    public abstract virtual Task`1<PullRequestReview> Submit(string owner, string name, int pullRequestNumber, long reviewId, PullRequestReviewSubmit submitMessage);
    public abstract virtual Task`1<PullRequestReview> Submit(long repositoryId, int pullRequestNumber, long reviewId, PullRequestReviewSubmit submitMessage);
    public abstract virtual Task`1<PullRequestReview> Dismiss(string owner, string name, int pullRequestNumber, long reviewId, PullRequestReviewDismiss dismissMessage);
    public abstract virtual Task`1<PullRequestReview> Dismiss(long repositoryId, int pullRequestNumber, long reviewId, PullRequestReviewDismiss dismissMessage);
    public abstract virtual Task`1<IReadOnlyList`1<PullRequestReviewComment>> GetAllComments(string owner, string name, int pullRequestNumber, long reviewId);
    public abstract virtual Task`1<IReadOnlyList`1<PullRequestReviewComment>> GetAllComments(long repositoryId, int pullRequestNumber, long reviewId);
    public abstract virtual Task`1<IReadOnlyList`1<PullRequestReviewComment>> GetAllComments(string owner, string name, int pullRequestNumber, long reviewId, ApiOptions options);
    public abstract virtual Task`1<IReadOnlyList`1<PullRequestReviewComment>> GetAllComments(long repositoryId, int pullRequestNumber, long reviewId, ApiOptions options);
}
public interface Octokit.IPullRequestsClient {
    public IPullRequestReviewsClient Review { get; }
    public IPullRequestReviewCommentsClient ReviewComment { get; }
    public IPullRequestReviewRequestsClient ReviewRequest { get; }
    public ILockUnlockClient LockUnlock { get; }
    public abstract virtual IPullRequestReviewsClient get_Review();
    public abstract virtual IPullRequestReviewCommentsClient get_ReviewComment();
    public abstract virtual IPullRequestReviewRequestsClient get_ReviewRequest();
    public abstract virtual ILockUnlockClient get_LockUnlock();
    public abstract virtual Task`1<PullRequest> Get(string owner, string name, int pullRequestNumber);
    public abstract virtual Task`1<PullRequest> Get(long repositoryId, int pullRequestNumber);
    public abstract virtual Task`1<IReadOnlyList`1<PullRequest>> GetAllForRepository(string owner, string name);
    public abstract virtual Task`1<IReadOnlyList`1<PullRequest>> GetAllForRepository(long repositoryId);
    public abstract virtual Task`1<IReadOnlyList`1<PullRequest>> GetAllForRepository(string owner, string name, ApiOptions options);
    public abstract virtual Task`1<IReadOnlyList`1<PullRequest>> GetAllForRepository(long repositoryId, ApiOptions options);
    public abstract virtual Task`1<IReadOnlyList`1<PullRequest>> GetAllForRepository(string owner, string name, PullRequestRequest request);
    public abstract virtual Task`1<IReadOnlyList`1<PullRequest>> GetAllForRepository(long repositoryId, PullRequestRequest request);
    public abstract virtual Task`1<IReadOnlyList`1<PullRequest>> GetAllForRepository(string owner, string name, PullRequestRequest request, ApiOptions options);
    public abstract virtual Task`1<IReadOnlyList`1<PullRequest>> GetAllForRepository(long repositoryId, PullRequestRequest request, ApiOptions options);
    public abstract virtual Task`1<PullRequest> Create(string owner, string name, NewPullRequest newPullRequest);
    public abstract virtual Task`1<PullRequest> Create(long repositoryId, NewPullRequest newPullRequest);
    public abstract virtual Task`1<PullRequest> Update(string owner, string name, int pullRequestNumber, PullRequestUpdate pullRequestUpdate);
    public abstract virtual Task`1<PullRequest> Update(long repositoryId, int pullRequestNumber, PullRequestUpdate pullRequestUpdate);
    public abstract virtual Task`1<PullRequestMerge> Merge(string owner, string name, int pullRequestNumber, MergePullRequest mergePullRequest);
    public abstract virtual Task`1<PullRequestMerge> Merge(long repositoryId, int pullRequestNumber, MergePullRequest mergePullRequest);
    public abstract virtual Task`1<bool> Merged(string owner, string name, int pullRequestNumber);
    public abstract virtual Task`1<bool> Merged(long repositoryId, int pullRequestNumber);
    public abstract virtual Task`1<IReadOnlyList`1<PullRequestCommit>> Commits(string owner, string name, int pullRequestNumber);
    public abstract virtual Task`1<IReadOnlyList`1<PullRequestCommit>> Commits(long repositoryId, int pullRequestNumber);
    public abstract virtual Task`1<IReadOnlyList`1<PullRequestFile>> Files(string owner, string name, int pullRequestNumber, ApiOptions options);
    public abstract virtual Task`1<IReadOnlyList`1<PullRequestFile>> Files(string owner, string name, int pullRequestNumber);
    public abstract virtual Task`1<IReadOnlyList`1<PullRequestFile>> Files(long repositoryId, int pullRequestNumber, ApiOptions options);
    public abstract virtual Task`1<IReadOnlyList`1<PullRequestFile>> Files(long repositoryId, int pullRequestNumber);
}
public interface Octokit.IRateLimitClient {
    public abstract virtual Task`1<MiscellaneousRateLimit> GetRateLimits();
}
public interface Octokit.IReactionsClient {
    public ICommitCommentReactionsClient CommitComment { get; }
    public IIssueReactionsClient Issue { get; }
    public IIssueCommentReactionsClient IssueComment { get; }
    public IPullRequestReviewCommentReactionsClient PullRequestReviewComment { get; }
    public abstract virtual ICommitCommentReactionsClient get_CommitComment();
    public abstract virtual IIssueReactionsClient get_Issue();
    public abstract virtual IIssueCommentReactionsClient get_IssueComment();
    public abstract virtual IPullRequestReviewCommentReactionsClient get_PullRequestReviewComment();
}
public interface Octokit.IReadOnlyPagedCollection`1 {
    public abstract virtual Task`1<IReadOnlyPagedCollection`1<T>> GetNextPage();
}
public interface Octokit.IReferencesClient {
    public abstract virtual Task`1<Reference> Get(string owner, string name, string reference);
    public abstract virtual Task`1<Reference> Get(long repositoryId, string reference);
    public abstract virtual Task`1<IReadOnlyList`1<Reference>> GetAll(string owner, string name);
    public abstract virtual Task`1<IReadOnlyList`1<Reference>> GetAll(string owner, string name, ApiOptions options);
    public abstract virtual Task`1<IReadOnlyList`1<Reference>> GetAll(long repositoryId);
    public abstract virtual Task`1<IReadOnlyList`1<Reference>> GetAll(long repositoryId, ApiOptions options);
    public abstract virtual Task`1<IReadOnlyList`1<Reference>> GetAllForSubNamespace(string owner, string name, string subNamespace);
    public abstract virtual Task`1<IReadOnlyList`1<Reference>> GetAllForSubNamespace(string owner, string name, string subNamespace, ApiOptions options);
    public abstract virtual Task`1<IReadOnlyList`1<Reference>> GetAllForSubNamespace(long repositoryId, string subNamespace);
    public abstract virtual Task`1<IReadOnlyList`1<Reference>> GetAllForSubNamespace(long repositoryId, string subNamespace, ApiOptions options);
    public abstract virtual Task`1<Reference> Create(string owner, string name, NewReference reference);
    public abstract virtual Task`1<Reference> Create(long repositoryId, NewReference reference);
    public abstract virtual Task`1<Reference> Update(string owner, string name, string reference, ReferenceUpdate referenceUpdate);
    public abstract virtual Task`1<Reference> Update(long repositoryId, string reference, ReferenceUpdate referenceUpdate);
    public abstract virtual Task Delete(string owner, string name, string reference);
    public abstract virtual Task Delete(long repositoryId, string reference);
}
public interface Octokit.IReleasesClient {
    public abstract virtual Task`1<GeneratedReleaseNotes> GenerateReleaseNotes(string owner, string name, GenerateReleaseNotesRequest data);
    public abstract virtual Task`1<GeneratedReleaseNotes> GenerateReleaseNotes(long repositoryId, GenerateReleaseNotesRequest data);
    public abstract virtual Task`1<IReadOnlyList`1<Release>> GetAll(string owner, string name);
    public abstract virtual Task`1<IReadOnlyList`1<Release>> GetAll(long repositoryId);
    public abstract virtual Task`1<IReadOnlyList`1<Release>> GetAll(string owner, string name, ApiOptions options);
    public abstract virtual Task`1<IReadOnlyList`1<Release>> GetAll(long repositoryId, ApiOptions options);
    public abstract virtual Task`1<Release> Get(string owner, string name, long id);
    public abstract virtual Task`1<Release> Get(string owner, string name, string tag);
    public abstract virtual Task`1<Release> Get(long repositoryId, long id);
    public abstract virtual Task`1<Release> Get(long repositoryId, string tag);
    public abstract virtual Task`1<Release> GetLatest(string owner, string name);
    public abstract virtual Task`1<Release> GetLatest(long repositoryId);
    public abstract virtual Task`1<Release> Create(string owner, string name, NewRelease data);
    public abstract virtual Task`1<Release> Create(long repositoryId, NewRelease data);
    public abstract virtual Task`1<Release> Edit(string owner, string name, long id, ReleaseUpdate data);
    public abstract virtual Task`1<Release> Edit(long repositoryId, long id, ReleaseUpdate data);
    public abstract virtual Task Delete(string owner, string name, long id);
    public abstract virtual Task Delete(long repositoryId, long id);
    public abstract virtual Task`1<IReadOnlyList`1<ReleaseAsset>> GetAllAssets(string owner, string name, long id);
    public abstract virtual Task`1<IReadOnlyList`1<ReleaseAsset>> GetAllAssets(long repositoryId, long id);
    public abstract virtual Task`1<IReadOnlyList`1<ReleaseAsset>> GetAllAssets(string owner, string name, long id, ApiOptions options);
    public abstract virtual Task`1<IReadOnlyList`1<ReleaseAsset>> GetAllAssets(long repositoryId, long id, ApiOptions options);
    public abstract virtual Task`1<ReleaseAsset> UploadAsset(Release release, ReleaseAssetUpload data, CancellationToken cancellationToken);
    public abstract virtual Task`1<ReleaseAsset> GetAsset(string owner, string name, int assetId);
    public abstract virtual Task`1<ReleaseAsset> GetAsset(long repositoryId, int assetId);
    public abstract virtual Task`1<ReleaseAsset> EditAsset(string owner, string name, int assetId, ReleaseAssetUpdate data);
    public abstract virtual Task`1<ReleaseAsset> EditAsset(long repositoryId, int assetId, ReleaseAssetUpdate data);
    public abstract virtual Task DeleteAsset(string owner, string name, int assetId);
    public abstract virtual Task DeleteAsset(long repositoryId, int assetId);
}
public interface Octokit.IRepoCollaboratorsClient {
    public abstract virtual Task`1<IReadOnlyList`1<Collaborator>> GetAll(string owner, string name);
    public abstract virtual Task`1<IReadOnlyList`1<Collaborator>> GetAll(long repositoryId);
    public abstract virtual Task`1<IReadOnlyList`1<Collaborator>> GetAll(string owner, string name, ApiOptions options);
    public abstract virtual Task`1<IReadOnlyList`1<Collaborator>> GetAll(long repositoryId, ApiOptions options);
    public abstract virtual Task`1<IReadOnlyList`1<Collaborator>> GetAll(string owner, string name, RepositoryCollaboratorListRequest request);
    public abstract virtual Task`1<IReadOnlyList`1<Collaborator>> GetAll(long repositoryId, RepositoryCollaboratorListRequest request);
    public abstract virtual Task`1<IReadOnlyList`1<Collaborator>> GetAll(string owner, string name, RepositoryCollaboratorListRequest request, ApiOptions options);
    public abstract virtual Task`1<IReadOnlyList`1<Collaborator>> GetAll(long repositoryId, RepositoryCollaboratorListRequest request, ApiOptions options);
    public abstract virtual Task`1<bool> IsCollaborator(string owner, string name, string user);
    public abstract virtual Task`1<bool> IsCollaborator(long repositoryId, string user);
    public abstract virtual Task`1<CollaboratorPermissionResponse> ReviewPermission(string owner, string name, string user);
    public abstract virtual Task`1<CollaboratorPermissionResponse> ReviewPermission(long repositoryId, string user);
    public abstract virtual Task Add(string owner, string name, string user);
    public abstract virtual Task`1<RepositoryInvitation> Add(string owner, string name, string user, CollaboratorRequest permission);
    public abstract virtual Task Add(long repositoryId, string user);
    public abstract virtual Task`1<RepositoryInvitation> Add(long repositoryId, string user, CollaboratorRequest permission);
    public abstract virtual Task`1<RepositoryInvitation> Invite(string owner, string name, string user);
    public abstract virtual Task`1<RepositoryInvitation> Invite(string owner, string name, string user, CollaboratorRequest permission);
    public abstract virtual Task`1<RepositoryInvitation> Invite(long repositoryId, string user);
    public abstract virtual Task`1<RepositoryInvitation> Invite(long repositoryId, string user, CollaboratorRequest permission);
    public abstract virtual Task Delete(string owner, string name, string user);
    public abstract virtual Task Delete(long repositoryId, string user);
}
public interface Octokit.IRepositoriesClient {
    public IPullRequestsClient PullRequest { get; }
    public IRepositoryActionsClient Actions { get; }
    public IAutolinksClient Autolinks { get; }
    public IRepositoryBranchesClient Branch { get; }
    public IRepositoryCommentsClient Comment { get; }
    public IRepositoryCustomPropertiesClient CustomProperty { get; }
    public IRepositoryDeployKeysClient DeployKeys { get; }
    public IRepositoryContentsClient Content { get; }
    public ICommitStatusClient Status { get; }
    public IRepositoryHooksClient Hooks { get; }
    public IRepositoryForksClient Forks { get; }
    public IRepoCollaboratorsClient Collaborator { get; }
    public IDeploymentsClient Deployment { get; }
    public IRepositoryDeployEnvironmentsClient Environment { get; }
    public IStatisticsClient Statistics { get; }
    public IRepositoryCommitsClient Commit { get; }
    public IReleasesClient Release { get; }
    public IMergingClient Merging { get; }
    public IRepositoryPagesClient Page { get; }
    public IRepositoryInvitationsClient Invitation { get; }
    public IRepositoryTrafficClient Traffic { get; }
    public IProjectsClient Project { get; }
    public abstract virtual IPullRequestsClient get_PullRequest();
    public abstract virtual IRepositoryActionsClient get_Actions();
    public abstract virtual IAutolinksClient get_Autolinks();
    public abstract virtual IRepositoryBranchesClient get_Branch();
    public abstract virtual IRepositoryCommentsClient get_Comment();
    public abstract virtual IRepositoryCustomPropertiesClient get_CustomProperty();
    public abstract virtual IRepositoryDeployKeysClient get_DeployKeys();
    public abstract virtual IRepositoryContentsClient get_Content();
    public abstract virtual Task`1<Repository> Create(NewRepository newRepository);
    public abstract virtual Task`1<Repository> Create(string organizationLogin, NewRepository newRepository);
    public abstract virtual Task`1<Repository> Generate(string templateOwner, string templateRepo, NewRepositoryFromTemplate newRepository);
    public abstract virtual Task Delete(string owner, string name);
    public abstract virtual Task Delete(long repositoryId);
    public abstract virtual Task`1<Repository> Transfer(string owner, string name, RepositoryTransfer repositoryTransfer);
    public abstract virtual Task`1<Repository> Transfer(long repositoryId, RepositoryTransfer repositoryTransfer);
    public abstract virtual Task`1<bool> AreVulnerabilityAlertsEnabled(string owner, string name);
    public abstract virtual Task`1<Repository> Get(string owner, string name);
    public abstract virtual Task`1<Repository> Get(long repositoryId);
    [ExcludeFromPaginationApiOptionsConventionTestAttribute("This API call uses the PublicRepositoryRequest.Since parameter for pagination")]
public abstract virtual Task`1<IReadOnlyList`1<Repository>> GetAllPublic();
    [ExcludeFromPaginationApiOptionsConventionTestAttribute("This API call uses the PublicRepositoryRequest.Since parameter for pagination")]
public abstract virtual Task`1<IReadOnlyList`1<Repository>> GetAllPublic(PublicRepositoryRequest request);
    public abstract virtual Task`1<IReadOnlyList`1<Repository>> GetAllForCurrent();
    public abstract virtual Task`1<IReadOnlyList`1<Repository>> GetAllForCurrent(ApiOptions options);
    public abstract virtual Task`1<IReadOnlyList`1<Repository>> GetAllForCurrent(RepositoryRequest request);
    public abstract virtual Task`1<IReadOnlyList`1<Repository>> GetAllForCurrent(RepositoryRequest request, ApiOptions options);
    public abstract virtual Task`1<IReadOnlyList`1<Repository>> GetAllForUser(string login);
    public abstract virtual Task`1<IReadOnlyList`1<Repository>> GetAllForUser(string login, ApiOptions options);
    public abstract virtual Task`1<IReadOnlyList`1<Repository>> GetAllForOrg(string organization);
    public abstract virtual Task`1<IReadOnlyList`1<Repository>> GetAllForOrg(string organization, ApiOptions options);
    public abstract virtual ICommitStatusClient get_Status();
    public abstract virtual IRepositoryHooksClient get_Hooks();
    public abstract virtual IRepositoryForksClient get_Forks();
    public abstract virtual IRepoCollaboratorsClient get_Collaborator();
    public abstract virtual IDeploymentsClient get_Deployment();
    public abstract virtual IRepositoryDeployEnvironmentsClient get_Environment();
    public abstract virtual IStatisticsClient get_Statistics();
    public abstract virtual IRepositoryCommitsClient get_Commit();
    public abstract virtual IReleasesClient get_Release();
    public abstract virtual IMergingClient get_Merging();
    public abstract virtual Task`1<IReadOnlyList`1<RepositoryContributor>> GetAllContributors(string owner, string name);
    public abstract virtual Task`1<IReadOnlyList`1<RepositoryContributor>> GetAllContributors(long repositoryId);
    public abstract virtual Task`1<IReadOnlyList`1<RepositoryContributor>> GetAllContributors(string owner, string name, ApiOptions options);
    public abstract virtual Task`1<IReadOnlyList`1<RepositoryContributor>> GetAllContributors(long repositoryId, ApiOptions options);
    public abstract virtual Task`1<IReadOnlyList`1<RepositoryContributor>> GetAllContributors(string owner, string name, bool includeAnonymous);
    public abstract virtual Task`1<IReadOnlyList`1<RepositoryContributor>> GetAllContributors(long repositoryId, bool includeAnonymous);
    public abstract virtual Task`1<IReadOnlyList`1<RepositoryContributor>> GetAllContributors(string owner, string name, bool includeAnonymous, ApiOptions options);
    public abstract virtual Task`1<IReadOnlyList`1<RepositoryContributor>> GetAllContributors(long repositoryId, bool includeAnonymous, ApiOptions options);
    [ExcludeFromPaginationApiOptionsConventionTestAttribute("Pagination not supported by GitHub API (tested 29/08/2017)")]
public abstract virtual Task`1<IReadOnlyList`1<RepositoryLanguage>> GetAllLanguages(string owner, string name);
    [ExcludeFromPaginationApiOptionsConventionTestAttribute("Pagination not supported by GitHub API (tested 29/08/2017)")]
public abstract virtual Task`1<IReadOnlyList`1<RepositoryLanguage>> GetAllLanguages(long repositoryId);
    public abstract virtual Task`1<IReadOnlyList`1<Team>> GetAllTeams(string owner, string name);
    public abstract virtual Task`1<IReadOnlyList`1<Team>> GetAllTeams(long repositoryId);
    public abstract virtual Task`1<IReadOnlyList`1<Team>> GetAllTeams(string owner, string name, ApiOptions options);
    public abstract virtual Task`1<IReadOnlyList`1<Team>> GetAllTeams(long repositoryId, ApiOptions options);
    public abstract virtual Task`1<IReadOnlyList`1<RepositoryTag>> GetAllTags(string owner, string name);
    public abstract virtual Task`1<IReadOnlyList`1<RepositoryTag>> GetAllTags(long repositoryId);
    public abstract virtual Task`1<IReadOnlyList`1<RepositoryTag>> GetAllTags(string owner, string name, ApiOptions options);
    public abstract virtual Task`1<IReadOnlyList`1<RepositoryTag>> GetAllTags(long repositoryId, ApiOptions options);
    public abstract virtual Task`1<RepositoryContentLicense> GetLicenseContents(string owner, string name);
    public abstract virtual Task`1<RepositoryContentLicense> GetLicenseContents(long repositoryId);
    public abstract virtual Task`1<Repository> Edit(string owner, string name, RepositoryUpdate update);
    public abstract virtual Task`1<Repository> Edit(long repositoryId, RepositoryUpdate update);
    public abstract virtual IRepositoryPagesClient get_Page();
    public abstract virtual IRepositoryInvitationsClient get_Invitation();
    public abstract virtual IRepositoryTrafficClient get_Traffic();
    public abstract virtual IProjectsClient get_Project();
    public abstract virtual Task`1<RepositoryTopics> GetAllTopics(string owner, string name, ApiOptions options);
    public abstract virtual Task`1<RepositoryTopics> GetAllTopics(string owner, string name);
    public abstract virtual Task`1<RepositoryTopics> GetAllTopics(long repositoryId, ApiOptions options);
    public abstract virtual Task`1<RepositoryTopics> GetAllTopics(long repositoryId);
    public abstract virtual Task`1<RepositoryTopics> ReplaceAllTopics(long repositoryId, RepositoryTopics topics);
    public abstract virtual Task`1<RepositoryTopics> ReplaceAllTopics(string owner, string name, RepositoryTopics topics);
    [ManualRouteAttribute("GET", "/repos/{owner}/{repo}/codeowners/errors")]
public abstract virtual Task`1<RepositoryCodeOwnersErrors> GetAllCodeOwnersErrors(string owner, string name);
    [ManualRouteAttribute("GET", "/repositories/{id}/codeowners/errors")]
public abstract virtual Task`1<RepositoryCodeOwnersErrors> GetAllCodeOwnersErrors(long repositoryId);
}
public interface Octokit.IRepositoryActionsClient {
    public IRepositorySecretsClient Secrets { get; }
    public IRepositoryVariablesClient Variables { get; }
    public abstract virtual IRepositorySecretsClient get_Secrets();
    public abstract virtual IRepositoryVariablesClient get_Variables();
}
public interface Octokit.IRepositoryBranchesClient {
    public abstract virtual Task`1<IReadOnlyList`1<Branch>> GetAll(string owner, string name);
    public abstract virtual Task`1<IReadOnlyList`1<Branch>> GetAll(long repositoryId);
    public abstract virtual Task`1<IReadOnlyList`1<Branch>> GetAll(string owner, string name, ApiOptions options);
    public abstract virtual Task`1<IReadOnlyList`1<Branch>> GetAll(long repositoryId, ApiOptions options);
    public abstract virtual Task`1<Branch> Get(string owner, string name, string branch);
    public abstract virtual Task`1<Branch> Get(long repositoryId, string branch);
    public abstract virtual Task`1<BranchProtectionSettings> GetBranchProtection(string owner, string name, string branch);
    public abstract virtual Task`1<BranchProtectionSettings> GetBranchProtection(long repositoryId, string branch);
    public abstract virtual Task`1<BranchProtectionSettings> UpdateBranchProtection(string owner, string name, string branch, BranchProtectionSettingsUpdate update);
    public abstract virtual Task`1<BranchProtectionSettings> UpdateBranchProtection(long repositoryId, string branch, BranchProtectionSettingsUpdate update);
    public abstract virtual Task`1<bool> DeleteBranchProtection(string owner, string name, string branch);
    public abstract virtual Task`1<bool> DeleteBranchProtection(long repositoryId, string branch);
    public abstract virtual Task`1<BranchProtectionRequiredStatusChecks> GetRequiredStatusChecks(string owner, string name, string branch);
    public abstract virtual Task`1<BranchProtectionRequiredStatusChecks> GetRequiredStatusChecks(long repositoryId, string branch);
    public abstract virtual Task`1<BranchProtectionRequiredStatusChecks> UpdateRequiredStatusChecks(string owner, string name, string branch, BranchProtectionRequiredStatusChecksUpdate update);
    public abstract virtual Task`1<BranchProtectionRequiredStatusChecks> UpdateRequiredStatusChecks(long repositoryId, string branch, BranchProtectionRequiredStatusChecksUpdate update);
    public abstract virtual Task`1<bool> DeleteRequiredStatusChecks(string owner, string name, string branch);
    public abstract virtual Task`1<bool> DeleteRequiredStatusChecks(long repositoryId, string branch);
    [ExcludeFromPaginationApiOptionsConventionTestAttribute("Pagination not supported by GitHub API (tested 29/08/2017)")]
public abstract virtual Task`1<IReadOnlyList`1<string>> GetAllRequiredStatusChecksContexts(string owner, string name, string branch);
    [ExcludeFromPaginationApiOptionsConventionTestAttribute("Pagination not supported by GitHub API (tested 29/08/2017)")]
public abstract virtual Task`1<IReadOnlyList`1<string>> GetAllRequiredStatusChecksContexts(long repositoryId, string branch);
    public abstract virtual Task`1<IReadOnlyList`1<string>> UpdateRequiredStatusChecksContexts(string owner, string name, string branch, IReadOnlyList`1<string> contexts);
    public abstract virtual Task`1<IReadOnlyList`1<string>> UpdateRequiredStatusChecksContexts(long repositoryId, string branch, IReadOnlyList`1<string> contexts);
    public abstract virtual Task`1<IReadOnlyList`1<string>> AddRequiredStatusChecksContexts(string owner, string name, string branch, IReadOnlyList`1<string> contexts);
    public abstract virtual Task`1<IReadOnlyList`1<string>> AddRequiredStatusChecksContexts(long repositoryId, string branch, IReadOnlyList`1<string> contexts);
    public abstract virtual Task`1<IReadOnlyList`1<string>> DeleteRequiredStatusChecksContexts(string owner, string name, string branch, IReadOnlyList`1<string> contexts);
    public abstract virtual Task`1<IReadOnlyList`1<string>> DeleteRequiredStatusChecksContexts(long repositoryId, string branch, IReadOnlyList`1<string> contexts);
    public abstract virtual Task`1<BranchProtectionRequiredReviews> GetReviewEnforcement(string owner, string name, string branch);
    public abstract virtual Task`1<BranchProtectionRequiredReviews> GetReviewEnforcement(long repositoryId, string branch);
    public abstract virtual Task`1<BranchProtectionRequiredReviews> UpdateReviewEnforcement(string owner, string name, string branch, BranchProtectionRequiredReviewsUpdate update);
    public abstract virtual Task`1<BranchProtectionRequiredReviews> UpdateReviewEnforcement(long repositoryId, string branch, BranchProtectionRequiredReviewsUpdate update);
    public abstract virtual Task`1<bool> RemoveReviewEnforcement(string owner, string name, string branch);
    public abstract virtual Task`1<bool> RemoveReviewEnforcement(long repositoryId, string branch);
    public abstract virtual Task`1<EnforceAdmins> GetAdminEnforcement(string owner, string name, string branch);
    public abstract virtual Task`1<EnforceAdmins> GetAdminEnforcement(long repositoryId, string branch);
    public abstract virtual Task`1<EnforceAdmins> AddAdminEnforcement(string owner, string name, string branch);
    public abstract virtual Task`1<EnforceAdmins> AddAdminEnforcement(long repositoryId, string branch);
    public abstract virtual Task`1<bool> RemoveAdminEnforcement(string owner, string name, string branch);
    public abstract virtual Task`1<bool> RemoveAdminEnforcement(long repositoryId, string branch);
    public abstract virtual Task`1<BranchProtectionPushRestrictions> GetProtectedBranchRestrictions(string owner, string name, string branch);
    public abstract virtual Task`1<BranchProtectionPushRestrictions> GetProtectedBranchRestrictions(long repositoryId, string branch);
    public abstract virtual Task`1<bool> DeleteProtectedBranchRestrictions(string owner, string name, string branch);
    public abstract virtual Task`1<bool> DeleteProtectedBranchRestrictions(long repositoryId, string branch);
    [ExcludeFromPaginationApiOptionsConventionTestAttribute("Pagination not supported by GitHub API (tested 29/08/2017)")]
public abstract virtual Task`1<IReadOnlyList`1<Team>> GetAllProtectedBranchTeamRestrictions(string owner, string name, string branch);
    [ExcludeFromPaginationApiOptionsConventionTestAttribute("Pagination not supported by GitHub API (tested 29/08/2017)")]
public abstract virtual Task`1<IReadOnlyList`1<Team>> GetAllProtectedBranchTeamRestrictions(long repositoryId, string branch);
    public abstract virtual Task`1<IReadOnlyList`1<Team>> UpdateProtectedBranchTeamRestrictions(string owner, string name, string branch, BranchProtectionTeamCollection teams);
    public abstract virtual Task`1<IReadOnlyList`1<Team>> UpdateProtectedBranchTeamRestrictions(long repositoryId, string branch, BranchProtectionTeamCollection teams);
    public abstract virtual Task`1<IReadOnlyList`1<Team>> AddProtectedBranchTeamRestrictions(string owner, string name, string branch, BranchProtectionTeamCollection teams);
    public abstract virtual Task`1<IReadOnlyList`1<Team>> AddProtectedBranchTeamRestrictions(long repositoryId, string branch, BranchProtectionTeamCollection teams);
    public abstract virtual Task`1<IReadOnlyList`1<Team>> DeleteProtectedBranchTeamRestrictions(string owner, string name, string branch, BranchProtectionTeamCollection teams);
    public abstract virtual Task`1<IReadOnlyList`1<Team>> DeleteProtectedBranchTeamRestrictions(long repositoryId, string branch, BranchProtectionTeamCollection teams);
    [ExcludeFromPaginationApiOptionsConventionTestAttribute("Pagination not supported by GitHub API (tested 29/08/2017)")]
public abstract virtual Task`1<IReadOnlyList`1<User>> GetAllProtectedBranchUserRestrictions(string owner, string name, string branch);
    [ExcludeFromPaginationApiOptionsConventionTestAttribute("Pagination not supported by GitHub API (tested 29/08/2017)")]
public abstract virtual Task`1<IReadOnlyList`1<User>> GetAllProtectedBranchUserRestrictions(long repositoryId, string branch);
    public abstract virtual Task`1<IReadOnlyList`1<User>> UpdateProtectedBranchUserRestrictions(string owner, string name, string branch, BranchProtectionUserCollection users);
    public abstract virtual Task`1<IReadOnlyList`1<User>> UpdateProtectedBranchUserRestrictions(long repositoryId, string branch, BranchProtectionUserCollection users);
    public abstract virtual Task`1<IReadOnlyList`1<User>> AddProtectedBranchUserRestrictions(string owner, string name, string branch, BranchProtectionUserCollection users);
    public abstract virtual Task`1<IReadOnlyList`1<User>> AddProtectedBranchUserRestrictions(long repositoryId, string branch, BranchProtectionUserCollection users);
    public abstract virtual Task`1<IReadOnlyList`1<User>> DeleteProtectedBranchUserRestrictions(string owner, string name, string branch, BranchProtectionUserCollection users);
    public abstract virtual Task`1<IReadOnlyList`1<User>> DeleteProtectedBranchUserRestrictions(long repositoryId, string branch, BranchProtectionUserCollection users);
    public abstract virtual Task`1<Branch> RenameBranch(string owner, string repository, string branch, string newName);
}
public interface Octokit.IRepositoryCommentsClient {
    public abstract virtual Task`1<CommitComment> Get(string owner, string name, long commentId);
    public abstract virtual Task`1<CommitComment> Get(long repositoryId, long commentId);
    public abstract virtual Task`1<IReadOnlyList`1<CommitComment>> GetAllForRepository(string owner, string name);
    public abstract virtual Task`1<IReadOnlyList`1<CommitComment>> GetAllForRepository(long repositoryId);
    public abstract virtual Task`1<IReadOnlyList`1<CommitComment>> GetAllForRepository(string owner, string name, ApiOptions options);
    public abstract virtual Task`1<IReadOnlyList`1<CommitComment>> GetAllForRepository(long repositoryId, ApiOptions options);
    public abstract virtual Task`1<IReadOnlyList`1<CommitComment>> GetAllForCommit(string owner, string name, string sha);
    public abstract virtual Task`1<IReadOnlyList`1<CommitComment>> GetAllForCommit(long repositoryId, string sha);
    public abstract virtual Task`1<IReadOnlyList`1<CommitComment>> GetAllForCommit(string owner, string name, string sha, ApiOptions options);
    public abstract virtual Task`1<IReadOnlyList`1<CommitComment>> GetAllForCommit(long repositoryId, string sha, ApiOptions options);
    public abstract virtual Task`1<CommitComment> Create(string owner, string name, string sha, NewCommitComment newCommitComment);
    public abstract virtual Task`1<CommitComment> Create(long repositoryId, string sha, NewCommitComment newCommitComment);
    public abstract virtual Task`1<CommitComment> Update(string owner, string name, long commentId, string commentUpdate);
    public abstract virtual Task`1<CommitComment> Update(long repositoryId, long commentId, string commentUpdate);
    public abstract virtual Task Delete(string owner, string name, long commentId);
    public abstract virtual Task Delete(long repositoryId, long commentId);
}
public interface Octokit.IRepositoryCommitsClient {
    public abstract virtual Task`1<IReadOnlyList`1<Branch>> BranchesWhereHead(long repositoryId, string sha1);
    public abstract virtual Task`1<IReadOnlyList`1<Branch>> BranchesWhereHead(long repositoryId, string sha1, ApiOptions options);
    public abstract virtual Task`1<IReadOnlyList`1<Branch>> BranchesWhereHead(string owner, string name, string sha1);
    public abstract virtual Task`1<IReadOnlyList`1<Branch>> BranchesWhereHead(string owner, string name, string sha1, ApiOptions options);
    public abstract virtual Task`1<CompareResult> Compare(string owner, string name, string base, string head);
    public abstract virtual Task`1<CompareResult> Compare(long repositoryId, string base, string head);
    public abstract virtual Task`1<CompareResult> Compare(string owner, string name, string base, string head, ApiOptions options);
    public abstract virtual Task`1<CompareResult> Compare(long repositoryId, string base, string head, ApiOptions options);
    public abstract virtual Task`1<GitHubCommit> Get(string owner, string name, string reference);
    public abstract virtual Task`1<GitHubCommit> Get(long repositoryId, string reference);
    public abstract virtual Task`1<IReadOnlyList`1<GitHubCommit>> GetAll(string owner, string name);
    public abstract virtual Task`1<IReadOnlyList`1<GitHubCommit>> GetAll(long repositoryId);
    public abstract virtual Task`1<IReadOnlyList`1<GitHubCommit>> GetAll(string owner, string name, ApiOptions options);
    public abstract virtual Task`1<IReadOnlyList`1<GitHubCommit>> GetAll(long repositoryId, ApiOptions options);
    public abstract virtual Task`1<IReadOnlyList`1<GitHubCommit>> GetAll(string owner, string name, CommitRequest request);
    public abstract virtual Task`1<IReadOnlyList`1<GitHubCommit>> GetAll(long repositoryId, CommitRequest request);
    public abstract virtual Task`1<IReadOnlyList`1<GitHubCommit>> GetAll(string owner, string name, CommitRequest request, ApiOptions options);
    public abstract virtual Task`1<IReadOnlyList`1<GitHubCommit>> GetAll(long repositoryId, CommitRequest request, ApiOptions options);
    public abstract virtual Task`1<string> GetSha1(string owner, string name, string reference);
    public abstract virtual Task`1<string> GetSha1(long repositoryId, string reference);
    public abstract virtual Task`1<IReadOnlyList`1<CommitPullRequest>> PullRequests(string owner, string name, string sha1);
    public abstract virtual Task`1<IReadOnlyList`1<CommitPullRequest>> PullRequests(long repositoryId, string sha1);
    public abstract virtual Task`1<IReadOnlyList`1<CommitPullRequest>> PullRequests(long repositoryId, string sha1, ApiOptions options);
    public abstract virtual Task`1<IReadOnlyList`1<CommitPullRequest>> PullRequests(string owner, string name, string sha1, ApiOptions options);
}
public interface Octokit.IRepositoryContentsClient {
    [ExcludeFromPaginationApiOptionsConventionTestAttribute("Pagination not supported by GitHub API (tested 29/08/2017)")]
public abstract virtual Task`1<IReadOnlyList`1<RepositoryContent>> GetAllContents(string owner, string name, string path);
    public abstract virtual Task`1<Byte[]> GetRawContent(string owner, string name, string path);
    [ExcludeFromPaginationApiOptionsConventionTestAttribute("Pagination not supported by GitHub API (tested 29/08/2017)")]
public abstract virtual Task`1<IReadOnlyList`1<RepositoryContent>> GetAllContents(long repositoryId, string path);
    [ExcludeFromPaginationApiOptionsConventionTestAttribute("Pagination not supported by GitHub API (tested 29/08/2017)")]
public abstract virtual Task`1<IReadOnlyList`1<RepositoryContent>> GetAllContents(string owner, string name);
    [ExcludeFromPaginationApiOptionsConventionTestAttribute("Pagination not supported by GitHub API (tested 29/08/2017)")]
public abstract virtual Task`1<IReadOnlyList`1<RepositoryContent>> GetAllContents(long repositoryId);
    [ExcludeFromPaginationApiOptionsConventionTestAttribute("Pagination not supported by GitHub API (tested 29/08/2017)")]
public abstract virtual Task`1<IReadOnlyList`1<RepositoryContent>> GetAllContentsByRef(string owner, string name, string path, string reference);
    public abstract virtual Task`1<Byte[]> GetRawContentByRef(string owner, string name, string path, string reference);
    [ExcludeFromPaginationApiOptionsConventionTestAttribute("Pagination not supported by GitHub API (tested 29/08/2017)")]
public abstract virtual Task`1<IReadOnlyList`1<RepositoryContent>> GetAllContentsByRef(long repositoryId, string path, string reference);
    [ExcludeFromPaginationApiOptionsConventionTestAttribute("Pagination not supported by GitHub API (tested 29/08/2017)")]
public abstract virtual Task`1<IReadOnlyList`1<RepositoryContent>> GetAllContentsByRef(string owner, string name, string reference);
    [ExcludeFromPaginationApiOptionsConventionTestAttribute("Pagination not supported by GitHub API (tested 29/08/2017)")]
public abstract virtual Task`1<IReadOnlyList`1<RepositoryContent>> GetAllContentsByRef(long repositoryId, string reference);
    public abstract virtual Task`1<Readme> GetReadme(string owner, string name);
    public abstract virtual Task`1<Readme> GetReadme(long repositoryId);
    public abstract virtual Task`1<string> GetReadmeHtml(string owner, string name);
    public abstract virtual Task`1<string> GetReadmeHtml(long repositoryId);
    public abstract virtual Task`1<Byte[]> GetArchive(string owner, string name);
    public abstract virtual Task`1<Byte[]> GetArchive(long repositoryId);
    public abstract virtual Task`1<Byte[]> GetArchive(string owner, string name, ArchiveFormat archiveFormat);
    public abstract virtual Task`1<Byte[]> GetArchive(long repositoryId, ArchiveFormat archiveFormat);
    public abstract virtual Task`1<Byte[]> GetArchive(string owner, string name, ArchiveFormat archiveFormat, string reference);
    public abstract virtual Task`1<Byte[]> GetArchive(long repositoryId, ArchiveFormat archiveFormat, string reference);
    public abstract virtual Task`1<Byte[]> GetArchive(string owner, string name, ArchiveFormat archiveFormat, string reference, TimeSpan timeout);
    public abstract virtual Task`1<Byte[]> GetArchive(long repositoryId, ArchiveFormat archiveFormat, string reference, TimeSpan timeout);
    public abstract virtual Task`1<RepositoryContentChangeSet> CreateFile(string owner, string name, string path, CreateFileRequest request);
    public abstract virtual Task`1<RepositoryContentChangeSet> CreateFile(long repositoryId, string path, CreateFileRequest request);
    public abstract virtual Task`1<RepositoryContentChangeSet> UpdateFile(string owner, string name, string path, UpdateFileRequest request);
    public abstract virtual Task`1<RepositoryContentChangeSet> UpdateFile(long repositoryId, string path, UpdateFileRequest request);
    public abstract virtual Task DeleteFile(string owner, string name, string path, DeleteFileRequest request);
    public abstract virtual Task DeleteFile(long repositoryId, string path, DeleteFileRequest request);
}
public interface Octokit.IRepositoryCustomPropertiesClient {
    [ExcludeFromPaginationApiOptionsConventionTestAttribute("Pagination not supported by GitHub API (tested 15/06/2024)")]
public abstract virtual Task`1<IReadOnlyList`1<CustomPropertyValue>> GetAll(string owner, string repoName);
    public abstract virtual Task CreateOrUpdate(string owner, string repoName, UpsertRepositoryCustomPropertyValues propertyValues);
}
public interface Octokit.IRepositoryDeployEnvironmentsClient {
    public abstract virtual Task`1<DeploymentEnvironmentsResponse> GetAll(string owner, string name);
    public abstract virtual Task`1<DeploymentEnvironmentsResponse> GetAll(long repositoryId);
    public abstract virtual Task`1<DeploymentEnvironmentsResponse> GetAll(string owner, string name, ApiOptions options);
    public abstract virtual Task`1<DeploymentEnvironmentsResponse> GetAll(long repositoryId, ApiOptions options);
}
public interface Octokit.IRepositoryDeployKeysClient {
    public abstract virtual Task`1<DeployKey> Get(string owner, string name, int deployKeyId);
    public abstract virtual Task`1<DeployKey> Get(long repositoryId, int deployKeyId);
    public abstract virtual Task`1<IReadOnlyList`1<DeployKey>> GetAll(string owner, string name);
    public abstract virtual Task`1<IReadOnlyList`1<DeployKey>> GetAll(long repositoryId);
    public abstract virtual Task`1<IReadOnlyList`1<DeployKey>> GetAll(string owner, string name, ApiOptions options);
    public abstract virtual Task`1<IReadOnlyList`1<DeployKey>> GetAll(long repositoryId, ApiOptions options);
    public abstract virtual Task`1<DeployKey> Create(string owner, string name, NewDeployKey newDeployKey);
    public abstract virtual Task`1<DeployKey> Create(long repositoryId, NewDeployKey newDeployKey);
    public abstract virtual Task Delete(string owner, string name, int deployKeyId);
    public abstract virtual Task Delete(long repositoryId, int deployKeyId);
}
public interface Octokit.IRepositoryForksClient {
    public abstract virtual Task`1<IReadOnlyList`1<Repository>> GetAll(string owner, string name);
    public abstract virtual Task`1<IReadOnlyList`1<Repository>> GetAll(long repositoryId);
    public abstract virtual Task`1<IReadOnlyList`1<Repository>> GetAll(string owner, string name, ApiOptions options);
    public abstract virtual Task`1<IReadOnlyList`1<Repository>> GetAll(long repositoryId, ApiOptions options);
    public abstract virtual Task`1<IReadOnlyList`1<Repository>> GetAll(string owner, string name, RepositoryForksListRequest request);
    public abstract virtual Task`1<IReadOnlyList`1<Repository>> GetAll(long repositoryId, RepositoryForksListRequest request);
    public abstract virtual Task`1<IReadOnlyList`1<Repository>> GetAll(string owner, string name, RepositoryForksListRequest request, ApiOptions options);
    public abstract virtual Task`1<IReadOnlyList`1<Repository>> GetAll(long repositoryId, RepositoryForksListRequest request, ApiOptions options);
    public abstract virtual Task`1<Repository> Create(string owner, string name, NewRepositoryFork fork);
    public abstract virtual Task`1<Repository> Create(long repositoryId, NewRepositoryFork fork);
}
public interface Octokit.IRepositoryHooksClient {
    public abstract virtual Task`1<IReadOnlyList`1<RepositoryHook>> GetAll(string owner, string name);
    public abstract virtual Task`1<IReadOnlyList`1<RepositoryHook>> GetAll(long repositoryId);
    public abstract virtual Task`1<IReadOnlyList`1<RepositoryHook>> GetAll(string owner, string name, ApiOptions options);
    public abstract virtual Task`1<IReadOnlyList`1<RepositoryHook>> GetAll(long repositoryId, ApiOptions options);
    public abstract virtual Task`1<RepositoryHook> Get(string owner, string name, int hookId);
    public abstract virtual Task`1<RepositoryHook> Get(long repositoryId, int hookId);
    public abstract virtual Task`1<RepositoryHook> Create(string owner, string name, NewRepositoryHook hook);
    public abstract virtual Task`1<RepositoryHook> Create(long repositoryId, NewRepositoryHook hook);
    public abstract virtual Task`1<RepositoryHook> Edit(string owner, string name, int hookId, EditRepositoryHook hook);
    public abstract virtual Task`1<RepositoryHook> Edit(long repositoryId, int hookId, EditRepositoryHook hook);
    public abstract virtual Task Test(string owner, string name, int hookId);
    public abstract virtual Task Test(long repositoryId, int hookId);
    public abstract virtual Task Ping(string owner, string name, int hookId);
    public abstract virtual Task Ping(long repositoryId, int hookId);
    public abstract virtual Task Delete(string owner, string name, int hookId);
    public abstract virtual Task Delete(long repositoryId, int hookId);
}
public interface Octokit.IRepositoryInvitationsClient {
    public abstract virtual Task`1<bool> Accept(long invitationId);
    public abstract virtual Task`1<bool> Decline(long invitationId);
    public abstract virtual Task`1<bool> Delete(long repositoryId, long invitationId);
    public abstract virtual Task`1<IReadOnlyList`1<RepositoryInvitation>> GetAllForCurrent();
    public abstract virtual Task`1<IReadOnlyList`1<RepositoryInvitation>> GetAllForCurrent(ApiOptions options);
    public abstract virtual Task`1<IReadOnlyList`1<RepositoryInvitation>> GetAllForRepository(long repositoryId);
    public abstract virtual Task`1<IReadOnlyList`1<RepositoryInvitation>> GetAllForRepository(long repositoryId, ApiOptions options);
    public abstract virtual Task`1<RepositoryInvitation> Edit(long repositoryId, long invitationId, InvitationUpdate permissions);
}
public interface Octokit.IRepositoryPagesClient {
    public abstract virtual Task`1<Page> Get(string owner, string name);
    public abstract virtual Task`1<Page> Get(long repositoryId);
    public abstract virtual Task`1<IReadOnlyList`1<PagesBuild>> GetAll(string owner, string name);
    public abstract virtual Task`1<IReadOnlyList`1<PagesBuild>> GetAll(long repositoryId);
    public abstract virtual Task`1<IReadOnlyList`1<PagesBuild>> GetAll(string owner, string name, ApiOptions options);
    public abstract virtual Task`1<IReadOnlyList`1<PagesBuild>> GetAll(long repositoryId, ApiOptions options);
    public abstract virtual Task`1<PagesBuild> GetLatest(string owner, string name);
    public abstract virtual Task`1<PagesBuild> GetLatest(long repositoryId);
    public abstract virtual Task`1<PagesBuild> RequestPageBuild(string owner, string name);
    public abstract virtual Task`1<PagesBuild> RequestPageBuild(long repositoryId);
}
public interface Octokit.IRepositorySecretsClient {
    public abstract virtual Task`1<SecretsPublicKey> GetPublicKey(string owner, string repoName);
    public abstract virtual Task`1<RepositorySecretsCollection> GetAll(string owner, string repoName);
    public abstract virtual Task`1<RepositorySecret> Get(string owner, string repoName, string secretName);
    public abstract virtual Task`1<RepositorySecret> CreateOrUpdate(string owner, string repoName, string secretName, UpsertRepositorySecret upsertSecret);
    public abstract virtual Task Delete(string owner, string repoName, string secretName);
}
public interface Octokit.IRepositoryTrafficClient {
    [ExcludeFromPaginationApiOptionsConventionTestAttribute("Pagination not supported by GitHub API (tested 29/08/2017)")]
public abstract virtual Task`1<IReadOnlyList`1<RepositoryTrafficReferrer>> GetAllReferrers(string owner, string name);
    [ExcludeFromPaginationApiOptionsConventionTestAttribute("Pagination not supported by GitHub API (tested 29/08/2017)")]
public abstract virtual Task`1<IReadOnlyList`1<RepositoryTrafficReferrer>> GetAllReferrers(long repositoryId);
    [ExcludeFromPaginationApiOptionsConventionTestAttribute("Pagination not supported by GitHub API (tested 29/08/2017)")]
public abstract virtual Task`1<IReadOnlyList`1<RepositoryTrafficPath>> GetAllPaths(string owner, string name);
    [ExcludeFromPaginationApiOptionsConventionTestAttribute("Pagination not supported by GitHub API (tested 29/08/2017)")]
public abstract virtual Task`1<IReadOnlyList`1<RepositoryTrafficPath>> GetAllPaths(long repositoryId);
    public abstract virtual Task`1<RepositoryTrafficViewSummary> GetViews(string owner, string name, RepositoryTrafficRequest per);
    public abstract virtual Task`1<RepositoryTrafficViewSummary> GetViews(long repositoryId, RepositoryTrafficRequest per);
    public abstract virtual Task`1<RepositoryTrafficCloneSummary> GetClones(string owner, string name, RepositoryTrafficRequest per);
    public abstract virtual Task`1<RepositoryTrafficCloneSummary> GetClones(long repositoryId, RepositoryTrafficRequest per);
}
public interface Octokit.IRepositoryVariablesClient {
    public abstract virtual Task`1<RepositoryVariablesCollection> GetAllOrganization(string owner, string repoName);
    public abstract virtual Task`1<RepositoryVariablesCollection> GetAll(string owner, string repoName);
    public abstract virtual Task`1<RepositoryVariable> Get(string owner, string repoName, string variableName);
    public abstract virtual Task`1<RepositoryVariable> Create(string owner, string repoName, Variable newVariable);
    public abstract virtual Task`1<RepositoryVariable> Update(string owner, string repoName, Variable variable);
    public abstract virtual Task Delete(string owner, string repoName, string variableName);
}
public interface Octokit.IResponse {
    public object Body { get; }
    public IReadOnlyDictionary`2<string, string> Headers { get; }
    public ApiInfo ApiInfo { get; }
    public HttpStatusCode StatusCode { get; }
    public string ContentType { get; }
    public abstract virtual object get_Body();
    public abstract virtual IReadOnlyDictionary`2<string, string> get_Headers();
    public abstract virtual ApiInfo get_ApiInfo();
    public abstract virtual HttpStatusCode get_StatusCode();
    public abstract virtual string get_ContentType();
}
public interface Octokit.ISearchClient {
    public abstract virtual Task`1<SearchRepositoryResult> SearchRepo(SearchRepositoriesRequest search);
    public abstract virtual Task`1<SearchUsersResult> SearchUsers(SearchUsersRequest search);
    public abstract virtual Task`1<SearchIssuesResult> SearchIssues(SearchIssuesRequest search);
    public abstract virtual Task`1<SearchCodeResult> SearchCode(SearchCodeRequest search);
    public abstract virtual Task`1<SearchLabelsResult> SearchLabels(SearchLabelsRequest search);
}
[DebuggerDisplayAttribute("{DebuggerDisplay,nq}")]
public class Octokit.Issue : object {
    [CompilerGeneratedAttribute]
private long <Id>k__BackingField;
    [CompilerGeneratedAttribute]
private string <NodeId>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Url>k__BackingField;
    [CompilerGeneratedAttribute]
private string <HtmlUrl>k__BackingField;
    [CompilerGeneratedAttribute]
private string <CommentsUrl>k__BackingField;
    [CompilerGeneratedAttribute]
private string <EventsUrl>k__BackingField;
    [CompilerGeneratedAttribute]
private int <Number>k__BackingField;
    [CompilerGeneratedAttribute]
private StringEnum`1<ItemState> <State>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<StringEnum`1<ItemStateReason>> <StateReason>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Title>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Body>k__BackingField;
    [CompilerGeneratedAttribute]
private User <ClosedBy>k__BackingField;
    [CompilerGeneratedAttribute]
private User <User>k__BackingField;
    [CompilerGeneratedAttribute]
private IReadOnlyList`1<Label> <Labels>k__BackingField;
    [CompilerGeneratedAttribute]
private User <Assignee>k__BackingField;
    [CompilerGeneratedAttribute]
private IReadOnlyList`1<User> <Assignees>k__BackingField;
    [CompilerGeneratedAttribute]
private Milestone <Milestone>k__BackingField;
    [CompilerGeneratedAttribute]
private int <Comments>k__BackingField;
    [CompilerGeneratedAttribute]
private PullRequest <PullRequest>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<DateTimeOffset> <ClosedAt>k__BackingField;
    [CompilerGeneratedAttribute]
private DateTimeOffset <CreatedAt>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<DateTimeOffset> <UpdatedAt>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <Locked>k__BackingField;
    [CompilerGeneratedAttribute]
private Repository <Repository>k__BackingField;
    [CompilerGeneratedAttribute]
private ReactionSummary <Reactions>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<StringEnum`1<LockReason>> <ActiveLockReason>k__BackingField;
    public long Id { get; private set; }
    public string NodeId { get; private set; }
    public string Url { get; private set; }
    public string HtmlUrl { get; private set; }
    public string CommentsUrl { get; private set; }
    public string EventsUrl { get; private set; }
    public int Number { get; private set; }
    public StringEnum`1<ItemState> State { get; private set; }
    public Nullable`1<StringEnum`1<ItemStateReason>> StateReason { get; private set; }
    public string Title { get; private set; }
    public string Body { get; private set; }
    public User ClosedBy { get; private set; }
    public User User { get; private set; }
    public IReadOnlyList`1<Label> Labels { get; private set; }
    public User Assignee { get; private set; }
    public IReadOnlyList`1<User> Assignees { get; private set; }
    public Milestone Milestone { get; private set; }
    public int Comments { get; private set; }
    public PullRequest PullRequest { get; private set; }
    public Nullable`1<DateTimeOffset> ClosedAt { get; private set; }
    public DateTimeOffset CreatedAt { get; private set; }
    public Nullable`1<DateTimeOffset> UpdatedAt { get; private set; }
    public bool Locked { get; private set; }
    public Repository Repository { get; private set; }
    public ReactionSummary Reactions { get; private set; }
    public Nullable`1<StringEnum`1<LockReason>> ActiveLockReason { get; private set; }
    internal string DebuggerDisplay { get; }
    public Issue(string url, string htmlUrl, string commentsUrl, string eventsUrl, int number, ItemState state, string title, string body, User closedBy, User user, IReadOnlyList`1<Label> labels, User assignee, IReadOnlyList`1<User> assignees, Milestone milestone, int comments, PullRequest pullRequest, Nullable`1<DateTimeOffset> closedAt, DateTimeOffset createdAt, Nullable`1<DateTimeOffset> updatedAt, long id, string nodeId, bool locked, Repository repository, ReactionSummary reactions, Nullable`1<LockReason> activeLockReason, Nullable`1<ItemStateReason> stateReason);
    [CompilerGeneratedAttribute]
public long get_Id();
    [CompilerGeneratedAttribute]
private void set_Id(long value);
    [CompilerGeneratedAttribute]
public string get_NodeId();
    [CompilerGeneratedAttribute]
private void set_NodeId(string value);
    [CompilerGeneratedAttribute]
public string get_Url();
    [CompilerGeneratedAttribute]
private void set_Url(string value);
    [CompilerGeneratedAttribute]
public string get_HtmlUrl();
    [CompilerGeneratedAttribute]
private void set_HtmlUrl(string value);
    [CompilerGeneratedAttribute]
public string get_CommentsUrl();
    [CompilerGeneratedAttribute]
private void set_CommentsUrl(string value);
    [CompilerGeneratedAttribute]
public string get_EventsUrl();
    [CompilerGeneratedAttribute]
private void set_EventsUrl(string value);
    [CompilerGeneratedAttribute]
public int get_Number();
    [CompilerGeneratedAttribute]
private void set_Number(int value);
    [CompilerGeneratedAttribute]
public StringEnum`1<ItemState> get_State();
    [CompilerGeneratedAttribute]
private void set_State(StringEnum`1<ItemState> value);
    [CompilerGeneratedAttribute]
public Nullable`1<StringEnum`1<ItemStateReason>> get_StateReason();
    [CompilerGeneratedAttribute]
private void set_StateReason(Nullable`1<StringEnum`1<ItemStateReason>> value);
    [CompilerGeneratedAttribute]
public string get_Title();
    [CompilerGeneratedAttribute]
private void set_Title(string value);
    [CompilerGeneratedAttribute]
public string get_Body();
    [CompilerGeneratedAttribute]
private void set_Body(string value);
    [CompilerGeneratedAttribute]
public User get_ClosedBy();
    [CompilerGeneratedAttribute]
private void set_ClosedBy(User value);
    [CompilerGeneratedAttribute]
public User get_User();
    [CompilerGeneratedAttribute]
private void set_User(User value);
    [CompilerGeneratedAttribute]
public IReadOnlyList`1<Label> get_Labels();
    [CompilerGeneratedAttribute]
private void set_Labels(IReadOnlyList`1<Label> value);
    [CompilerGeneratedAttribute]
public User get_Assignee();
    [CompilerGeneratedAttribute]
private void set_Assignee(User value);
    [CompilerGeneratedAttribute]
public IReadOnlyList`1<User> get_Assignees();
    [CompilerGeneratedAttribute]
private void set_Assignees(IReadOnlyList`1<User> value);
    [CompilerGeneratedAttribute]
public Milestone get_Milestone();
    [CompilerGeneratedAttribute]
private void set_Milestone(Milestone value);
    [CompilerGeneratedAttribute]
public int get_Comments();
    [CompilerGeneratedAttribute]
private void set_Comments(int value);
    [CompilerGeneratedAttribute]
public PullRequest get_PullRequest();
    [CompilerGeneratedAttribute]
private void set_PullRequest(PullRequest value);
    [CompilerGeneratedAttribute]
public Nullable`1<DateTimeOffset> get_ClosedAt();
    [CompilerGeneratedAttribute]
private void set_ClosedAt(Nullable`1<DateTimeOffset> value);
    [CompilerGeneratedAttribute]
public DateTimeOffset get_CreatedAt();
    [CompilerGeneratedAttribute]
private void set_CreatedAt(DateTimeOffset value);
    [CompilerGeneratedAttribute]
public Nullable`1<DateTimeOffset> get_UpdatedAt();
    [CompilerGeneratedAttribute]
private void set_UpdatedAt(Nullable`1<DateTimeOffset> value);
    [CompilerGeneratedAttribute]
public bool get_Locked();
    [CompilerGeneratedAttribute]
private void set_Locked(bool value);
    [CompilerGeneratedAttribute]
public Repository get_Repository();
    [CompilerGeneratedAttribute]
private void set_Repository(Repository value);
    [CompilerGeneratedAttribute]
public ReactionSummary get_Reactions();
    [CompilerGeneratedAttribute]
private void set_Reactions(ReactionSummary value);
    [CompilerGeneratedAttribute]
public Nullable`1<StringEnum`1<LockReason>> get_ActiveLockReason();
    [CompilerGeneratedAttribute]
private void set_ActiveLockReason(Nullable`1<StringEnum`1<LockReason>> value);
    internal string get_DebuggerDisplay();
    public IssueUpdate ToUpdate();
}
[DebuggerDisplayAttribute("{DebuggerDisplay,nq}")]
public class Octokit.IssueComment : object {
    [CompilerGeneratedAttribute]
private long <Id>k__BackingField;
    [CompilerGeneratedAttribute]
private string <NodeId>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Url>k__BackingField;
    [CompilerGeneratedAttribute]
private string <HtmlUrl>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Body>k__BackingField;
    [CompilerGeneratedAttribute]
private DateTimeOffset <CreatedAt>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<DateTimeOffset> <UpdatedAt>k__BackingField;
    [CompilerGeneratedAttribute]
private User <User>k__BackingField;
    [CompilerGeneratedAttribute]
private StringEnum`1<AuthorAssociation> <AuthorAssociation>k__BackingField;
    [CompilerGeneratedAttribute]
private ReactionSummary <Reactions>k__BackingField;
    public long Id { get; private set; }
    public string NodeId { get; private set; }
    public string Url { get; private set; }
    public string HtmlUrl { get; private set; }
    public string Body { get; private set; }
    public DateTimeOffset CreatedAt { get; private set; }
    public Nullable`1<DateTimeOffset> UpdatedAt { get; private set; }
    public User User { get; private set; }
    public StringEnum`1<AuthorAssociation> AuthorAssociation { get; private set; }
    public ReactionSummary Reactions { get; private set; }
    internal string DebuggerDisplay { get; }
    public IssueComment(long id, string nodeId, string url, string htmlUrl, string body, DateTimeOffset createdAt, Nullable`1<DateTimeOffset> updatedAt, User user, ReactionSummary reactions, AuthorAssociation authorAssociation);
    [CompilerGeneratedAttribute]
public long get_Id();
    [CompilerGeneratedAttribute]
private void set_Id(long value);
    [CompilerGeneratedAttribute]
public string get_NodeId();
    [CompilerGeneratedAttribute]
private void set_NodeId(string value);
    [CompilerGeneratedAttribute]
public string get_Url();
    [CompilerGeneratedAttribute]
private void set_Url(string value);
    [CompilerGeneratedAttribute]
public string get_HtmlUrl();
    [CompilerGeneratedAttribute]
private void set_HtmlUrl(string value);
    [CompilerGeneratedAttribute]
public string get_Body();
    [CompilerGeneratedAttribute]
private void set_Body(string value);
    [CompilerGeneratedAttribute]
public DateTimeOffset get_CreatedAt();
    [CompilerGeneratedAttribute]
private void set_CreatedAt(DateTimeOffset value);
    [CompilerGeneratedAttribute]
public Nullable`1<DateTimeOffset> get_UpdatedAt();
    [CompilerGeneratedAttribute]
private void set_UpdatedAt(Nullable`1<DateTimeOffset> value);
    [CompilerGeneratedAttribute]
public User get_User();
    [CompilerGeneratedAttribute]
private void set_User(User value);
    [CompilerGeneratedAttribute]
public StringEnum`1<AuthorAssociation> get_AuthorAssociation();
    [CompilerGeneratedAttribute]
private void set_AuthorAssociation(StringEnum`1<AuthorAssociation> value);
    [CompilerGeneratedAttribute]
public ReactionSummary get_Reactions();
    [CompilerGeneratedAttribute]
private void set_Reactions(ReactionSummary value);
    internal string get_DebuggerDisplay();
}
[DebuggerDisplayAttribute("{DebuggerDisplay,nq}")]
public class Octokit.IssueCommentPayload : ActivityPayload {
    [CompilerGeneratedAttribute]
private string <Action>k__BackingField;
    [CompilerGeneratedAttribute]
private Issue <Issue>k__BackingField;
    [CompilerGeneratedAttribute]
private IssueComment <Comment>k__BackingField;
    public string Action { get; private set; }
    public Issue Issue { get; private set; }
    public IssueComment Comment { get; private set; }
    [CompilerGeneratedAttribute]
public string get_Action();
    [CompilerGeneratedAttribute]
private void set_Action(string value);
    [CompilerGeneratedAttribute]
public Issue get_Issue();
    [CompilerGeneratedAttribute]
private void set_Issue(Issue value);
    [CompilerGeneratedAttribute]
public IssueComment get_Comment();
    [CompilerGeneratedAttribute]
private void set_Comment(IssueComment value);
}
public class Octokit.IssueCommentReactionsClient : ApiClient {
    public IssueCommentReactionsClient(IApiConnection apiConnection);
    [ManualRouteAttribute("POST", "/repos/{owner}/{repo}/issues/comments/{number}/reactions")]
public sealed virtual Task`1<Reaction> Create(string owner, string name, long commentId, NewReaction reaction);
    [ManualRouteAttribute("POST", "/repositories/{0}/issues/comments/{number}/reactions")]
public sealed virtual Task`1<Reaction> Create(long repositoryId, long commentId, NewReaction reaction);
    [ManualRouteAttribute("POST", "/repos/{owner}/{repo}/issues/comments/{number}/reactions")]
public sealed virtual Task`1<IReadOnlyList`1<Reaction>> GetAll(string owner, string name, long commentId);
    [ManualRouteAttribute("POST", "/repos/{owner}/{repo}/issues/comments/{number}/reactions")]
public sealed virtual Task`1<IReadOnlyList`1<Reaction>> GetAll(string owner, string name, long commentId, ApiOptions options);
    [ManualRouteAttribute("GET", "/repositories/{0}/issues/comments/{number}/reactions")]
public sealed virtual Task`1<IReadOnlyList`1<Reaction>> GetAll(long repositoryId, long commentId);
    [ManualRouteAttribute("GET", "/repositories/{0}/issues/comments/{number}/reactions")]
public sealed virtual Task`1<IReadOnlyList`1<Reaction>> GetAll(long repositoryId, long commentId, ApiOptions options);
    [ManualRouteAttribute("DELETE", "/repos/{owner}/{repo}/issues/comments/{comment_id}/reactions/{reaction_id}")]
public sealed virtual Task Delete(string owner, string name, long commentId, long reactionId);
    [ManualRouteAttribute("DELETE", "/repositories/{id}/issues/comments/{comment_id}/reactions/{reaction_id}")]
public sealed virtual Task Delete(long repositoryId, long commentId, long reactionId);
}
[DebuggerDisplayAttribute("{DebuggerDisplay,nq}")]
public class Octokit.IssueCommentRequest : RequestParameters {
    [CompilerGeneratedAttribute]
private IssueCommentSort <Sort>k__BackingField;
    [CompilerGeneratedAttribute]
private SortDirection <Direction>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<DateTimeOffset> <Since>k__BackingField;
    public IssueCommentSort Sort { get; public set; }
    public SortDirection Direction { get; public set; }
    public Nullable`1<DateTimeOffset> Since { get; public set; }
    internal string DebuggerDisplay { get; }
    [CompilerGeneratedAttribute]
public IssueCommentSort get_Sort();
    [CompilerGeneratedAttribute]
public void set_Sort(IssueCommentSort value);
    [CompilerGeneratedAttribute]
public SortDirection get_Direction();
    [CompilerGeneratedAttribute]
public void set_Direction(SortDirection value);
    [CompilerGeneratedAttribute]
public Nullable`1<DateTimeOffset> get_Since();
    [CompilerGeneratedAttribute]
public void set_Since(Nullable`1<DateTimeOffset> value);
    internal string get_DebuggerDisplay();
}
public class Octokit.IssueCommentsClient : ApiClient {
    public IssueCommentsClient(IApiConnection apiConnection);
    [ManualRouteAttribute("GET", "/repos/{owner}/{repo}/issues/comments/{comment_id}")]
public sealed virtual Task`1<IssueComment> Get(string owner, string name, long commentId);
    [ManualRouteAttribute("GET", "/repositories/{id}/issues/comments/{comment_id}")]
public sealed virtual Task`1<IssueComment> Get(long repositoryId, long commentId);
    [ManualRouteAttribute("GET", "/repos/{owner}/{repo}/issues/comments")]
public sealed virtual Task`1<IReadOnlyList`1<IssueComment>> GetAllForRepository(string owner, string name);
    [ManualRouteAttribute("GET", "/repositories/{id}/issues/comments")]
public sealed virtual Task`1<IReadOnlyList`1<IssueComment>> GetAllForRepository(long repositoryId);
    [ManualRouteAttribute("GET", "/repos/{owner}/{repo}/issues/comments")]
public sealed virtual Task`1<IReadOnlyList`1<IssueComment>> GetAllForRepository(string owner, string name, ApiOptions options);
    [ManualRouteAttribute("GET", "/repositories/{id}/issues/comments")]
public sealed virtual Task`1<IReadOnlyList`1<IssueComment>> GetAllForRepository(long repositoryId, ApiOptions options);
    [ManualRouteAttribute("GET", "/repos/{owner}/{repo}/issues/comments")]
public sealed virtual Task`1<IReadOnlyList`1<IssueComment>> GetAllForRepository(string owner, string name, IssueCommentRequest request);
    [ManualRouteAttribute("GET", "/repositories/{id}/issues/comments")]
public sealed virtual Task`1<IReadOnlyList`1<IssueComment>> GetAllForRepository(long repositoryId, IssueCommentRequest request);
    [ManualRouteAttribute("GET", "/repos/{owner}/{repo}/issues/comments")]
public sealed virtual Task`1<IReadOnlyList`1<IssueComment>> GetAllForRepository(string owner, string name, IssueCommentRequest request, ApiOptions options);
    [ManualRouteAttribute("GET", "/repositories/{id}/issues/comments")]
public sealed virtual Task`1<IReadOnlyList`1<IssueComment>> GetAllForRepository(long repositoryId, IssueCommentRequest request, ApiOptions options);
    [ManualRouteAttribute("GET", "/repos/{owner}/{repo}/issues/{number]/comments")]
public sealed virtual Task`1<IReadOnlyList`1<IssueComment>> GetAllForIssue(string owner, string name, int issueNumber);
    [ManualRouteAttribute("GET", "/repositories/{id}/issues/{number}/comments")]
public sealed virtual Task`1<IReadOnlyList`1<IssueComment>> GetAllForIssue(long repositoryId, int issueNumber);
    [ManualRouteAttribute("GET", "/repos/{owner}/{repo}/issues/{number]/comments")]
public sealed virtual Task`1<IReadOnlyList`1<IssueComment>> GetAllForIssue(string owner, string name, int issueNumber, ApiOptions options);
    [ManualRouteAttribute("GET", "/repositories/{id}/issues/{number}/comments")]
public sealed virtual Task`1<IReadOnlyList`1<IssueComment>> GetAllForIssue(long repositoryId, int issueNumber, ApiOptions options);
    [ManualRouteAttribute("GET", "/repos/{owner}/{repo}/issues/{number]/comments")]
public sealed virtual Task`1<IReadOnlyList`1<IssueComment>> GetAllForIssue(string owner, string name, int issueNumber, IssueCommentRequest request);
    [ManualRouteAttribute("GET", "/repositories/{id}/issues/{number}/comments")]
public sealed virtual Task`1<IReadOnlyList`1<IssueComment>> GetAllForIssue(long repositoryId, int issueNumber, IssueCommentRequest request);
    [ManualRouteAttribute("GET", "/repos/{owner}/{repo}/issues/{number]/comments")]
public sealed virtual Task`1<IReadOnlyList`1<IssueComment>> GetAllForIssue(string owner, string name, int issueNumber, IssueCommentRequest request, ApiOptions options);
    [ManualRouteAttribute("GET", "/repositories/{id}/issues/{number}/comments")]
public sealed virtual Task`1<IReadOnlyList`1<IssueComment>> GetAllForIssue(long repositoryId, int issueNumber, IssueCommentRequest request, ApiOptions options);
    [ManualRouteAttribute("POST", "/repos/{owner}/{repo}/issues/{number]/comments")]
public sealed virtual Task`1<IssueComment> Create(string owner, string name, int issueNumber, string newComment);
    [ManualRouteAttribute("POST", "/repositories/{id}/issues/{number}/comments")]
public sealed virtual Task`1<IssueComment> Create(long repositoryId, int issueNumber, string newComment);
    [ManualRouteAttribute("PATCH", "/repos/{owner}/{repo}/issues/comments/{id}")]
public sealed virtual Task`1<IssueComment> Update(string owner, string name, long id, string commentUpdate);
    [ManualRouteAttribute("PATCH", "/repositories/{id}/issues/comments/{number}")]
public sealed virtual Task`1<IssueComment> Update(long repositoryId, long id, string commentUpdate);
    [ManualRouteAttribute("DELETE", "/repos/{owner}/{repo}/issues/comments/{id}")]
public sealed virtual Task Delete(string owner, string name, long id);
    [ManualRouteAttribute("DELETE", "/repositories/{id}/issues/comments/{number}")]
public sealed virtual Task Delete(long repositoryId, long id);
}
public enum Octokit.IssueCommentSort : Enum {
    public int value__;
    [ParameterAttribute]
public static IssueCommentSort Created;
    [ParameterAttribute]
public static IssueCommentSort Updated;
}
[DebuggerDisplayAttribute("{DebuggerDisplay,nq}")]
public class Octokit.IssueEvent : object {
    [CompilerGeneratedAttribute]
private long <Id>k__BackingField;
    [CompilerGeneratedAttribute]
private string <NodeId>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Url>k__BackingField;
    [CompilerGeneratedAttribute]
private User <Actor>k__BackingField;
    [CompilerGeneratedAttribute]
private User <Assignee>k__BackingField;
    [CompilerGeneratedAttribute]
private Label <Label>k__BackingField;
    [CompilerGeneratedAttribute]
private StringEnum`1<EventInfoState> <Event>k__BackingField;
    [CompilerGeneratedAttribute]
private string <CommitId>k__BackingField;
    [CompilerGeneratedAttribute]
private string <CommitUrl>k__BackingField;
    [CompilerGeneratedAttribute]
private DateTimeOffset <CreatedAt>k__BackingField;
    [CompilerGeneratedAttribute]
private Issue <Issue>k__BackingField;
    [CompilerGeneratedAttribute]
private RenameInfo <Rename>k__BackingField;
    [CompilerGeneratedAttribute]
private IssueEventProjectCard <ProjectCard>k__BackingField;
    [CompilerGeneratedAttribute]
private User <RequestedReviewer>k__BackingField;
    [CompilerGeneratedAttribute]
private User <ReviewRequester>k__BackingField;
    [CompilerGeneratedAttribute]
private User <Assigner>k__BackingField;
    [CompilerGeneratedAttribute]
private StringEnum`1<LockReason> <LockReason>k__BackingField;
    [CompilerGeneratedAttribute]
private DismissedReviewInfo <DismissedReview>k__BackingField;
    [CompilerGeneratedAttribute]
private Milestone <Milestone>k__BackingField;
    public long Id { get; private set; }
    public string NodeId { get; private set; }
    public string Url { get; private set; }
    public User Actor { get; private set; }
    public User Assignee { get; private set; }
    public Label Label { get; private set; }
    public StringEnum`1<EventInfoState> Event { get; private set; }
    public string CommitId { get; private set; }
    public string CommitUrl { get; private set; }
    public DateTimeOffset CreatedAt { get; private set; }
    public Issue Issue { get; private set; }
    public RenameInfo Rename { get; private set; }
    public IssueEventProjectCard ProjectCard { get; private set; }
    public User RequestedReviewer { get; private set; }
    public User ReviewRequester { get; private set; }
    public User Assigner { get; private set; }
    public StringEnum`1<LockReason> LockReason { get; private set; }
    public DismissedReviewInfo DismissedReview { get; private set; }
    public Milestone Milestone { get; private set; }
    internal string DebuggerDisplay { get; }
    public IssueEvent(long id, string nodeId, string url, User actor, User assignee, Label label, EventInfoState event, string commitId, DateTimeOffset createdAt, Issue issue, string commitUrl, RenameInfo rename, IssueEventProjectCard projectCard, User reviewRequester, User requestedReviewer, User assigner, LockReason lockReason, DismissedReviewInfo dismissedReview, Milestone milestone);
    [CompilerGeneratedAttribute]
public long get_Id();
    [CompilerGeneratedAttribute]
private void set_Id(long value);
    [CompilerGeneratedAttribute]
public string get_NodeId();
    [CompilerGeneratedAttribute]
private void set_NodeId(string value);
    [CompilerGeneratedAttribute]
public string get_Url();
    [CompilerGeneratedAttribute]
private void set_Url(string value);
    [CompilerGeneratedAttribute]
public User get_Actor();
    [CompilerGeneratedAttribute]
private void set_Actor(User value);
    [CompilerGeneratedAttribute]
public User get_Assignee();
    [CompilerGeneratedAttribute]
private void set_Assignee(User value);
    [CompilerGeneratedAttribute]
public Label get_Label();
    [CompilerGeneratedAttribute]
private void set_Label(Label value);
    [CompilerGeneratedAttribute]
public StringEnum`1<EventInfoState> get_Event();
    [CompilerGeneratedAttribute]
private void set_Event(StringEnum`1<EventInfoState> value);
    [CompilerGeneratedAttribute]
public string get_CommitId();
    [CompilerGeneratedAttribute]
private void set_CommitId(string value);
    [CompilerGeneratedAttribute]
public string get_CommitUrl();
    [CompilerGeneratedAttribute]
private void set_CommitUrl(string value);
    [CompilerGeneratedAttribute]
public DateTimeOffset get_CreatedAt();
    [CompilerGeneratedAttribute]
private void set_CreatedAt(DateTimeOffset value);
    [CompilerGeneratedAttribute]
public Issue get_Issue();
    [CompilerGeneratedAttribute]
private void set_Issue(Issue value);
    [CompilerGeneratedAttribute]
public RenameInfo get_Rename();
    [CompilerGeneratedAttribute]
private void set_Rename(RenameInfo value);
    [CompilerGeneratedAttribute]
public IssueEventProjectCard get_ProjectCard();
    [CompilerGeneratedAttribute]
private void set_ProjectCard(IssueEventProjectCard value);
    [CompilerGeneratedAttribute]
public User get_RequestedReviewer();
    [CompilerGeneratedAttribute]
private void set_RequestedReviewer(User value);
    [CompilerGeneratedAttribute]
public User get_ReviewRequester();
    [CompilerGeneratedAttribute]
private void set_ReviewRequester(User value);
    [CompilerGeneratedAttribute]
public User get_Assigner();
    [CompilerGeneratedAttribute]
private void set_Assigner(User value);
    [CompilerGeneratedAttribute]
public StringEnum`1<LockReason> get_LockReason();
    [CompilerGeneratedAttribute]
private void set_LockReason(StringEnum`1<LockReason> value);
    [CompilerGeneratedAttribute]
public DismissedReviewInfo get_DismissedReview();
    [CompilerGeneratedAttribute]
private void set_DismissedReview(DismissedReviewInfo value);
    [CompilerGeneratedAttribute]
public Milestone get_Milestone();
    [CompilerGeneratedAttribute]
private void set_Milestone(Milestone value);
    internal string get_DebuggerDisplay();
}
[DebuggerDisplayAttribute("{DebuggerDisplay,nq}")]
public class Octokit.IssueEventPayload : ActivityPayload {
    [CompilerGeneratedAttribute]
private string <Action>k__BackingField;
    [CompilerGeneratedAttribute]
private Issue <Issue>k__BackingField;
    public string Action { get; private set; }
    public Issue Issue { get; private set; }
    [CompilerGeneratedAttribute]
public string get_Action();
    [CompilerGeneratedAttribute]
private void set_Action(string value);
    [CompilerGeneratedAttribute]
public Issue get_Issue();
    [CompilerGeneratedAttribute]
private void set_Issue(Issue value);
}
[DebuggerDisplayAttribute("{DebuggerDisplay,nq}")]
public class Octokit.IssueEventProjectCard : object {
    [CompilerGeneratedAttribute]
private long <Id>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Url>k__BackingField;
    [CompilerGeneratedAttribute]
private long <ProjectId>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ProjectUrl>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ColumnName>k__BackingField;
    [CompilerGeneratedAttribute]
private string <PreviousColumnName>k__BackingField;
    public long Id { get; private set; }
    public string Url { get; private set; }
    public long ProjectId { get; private set; }
    public string ProjectUrl { get; private set; }
    public string ColumnName { get; private set; }
    public string PreviousColumnName { get; private set; }
    internal string DebuggerDisplay { get; }
    public IssueEventProjectCard(long id, string url, long projectId, string projectUrl, string columnName, string previousColumnName);
    [CompilerGeneratedAttribute]
public long get_Id();
    [CompilerGeneratedAttribute]
private void set_Id(long value);
    [CompilerGeneratedAttribute]
public string get_Url();
    [CompilerGeneratedAttribute]
private void set_Url(string value);
    [CompilerGeneratedAttribute]
public long get_ProjectId();
    [CompilerGeneratedAttribute]
private void set_ProjectId(long value);
    [CompilerGeneratedAttribute]
public string get_ProjectUrl();
    [CompilerGeneratedAttribute]
private void set_ProjectUrl(string value);
    [CompilerGeneratedAttribute]
public string get_ColumnName();
    [CompilerGeneratedAttribute]
private void set_ColumnName(string value);
    [CompilerGeneratedAttribute]
public string get_PreviousColumnName();
    [CompilerGeneratedAttribute]
private void set_PreviousColumnName(string value);
    internal string get_DebuggerDisplay();
}
public enum Octokit.IssueFilter : Enum {
    public int value__;
    [ParameterAttribute]
public static IssueFilter Assigned;
    [ParameterAttribute]
public static IssueFilter Created;
    [ParameterAttribute]
public static IssueFilter Mentioned;
    [ParameterAttribute]
public static IssueFilter Subscribed;
    [ParameterAttribute]
public static IssueFilter All;
}
public enum Octokit.IssueInQualifier : Enum {
    public int value__;
    [ParameterAttribute]
public static IssueInQualifier Title;
    [ParameterAttribute]
public static IssueInQualifier Body;
    [ParameterAttribute]
public static IssueInQualifier Comment;
}
public enum Octokit.IssueIsQualifier : Enum {
    public int value__;
    [ParameterAttribute]
public static IssueIsQualifier Open;
    [ParameterAttribute]
public static IssueIsQualifier Closed;
    [ParameterAttribute]
public static IssueIsQualifier Merged;
    [ParameterAttribute]
public static IssueIsQualifier Unmerged;
    [ParameterAttribute]
public static IssueIsQualifier PullRequest;
    [ParameterAttribute]
public static IssueIsQualifier Issue;
    [ParameterAttribute]
public static IssueIsQualifier Private;
    [ParameterAttribute]
public static IssueIsQualifier Public;
    [ParameterAttribute]
public static IssueIsQualifier Locked;
    [ParameterAttribute]
public static IssueIsQualifier Unlocked;
}
public enum Octokit.IssueNoMetadataQualifier : Enum {
    public int value__;
    [ParameterAttribute]
public static IssueNoMetadataQualifier Label;
    [ParameterAttribute]
public static IssueNoMetadataQualifier Milestone;
    [ParameterAttribute]
public static IssueNoMetadataQualifier Assignee;
    [ParameterAttribute]
public static IssueNoMetadataQualifier Project;
}
public class Octokit.IssueReactionsClient : ApiClient {
    public IssueReactionsClient(IApiConnection apiConnection);
    [ManualRouteAttribute("GET", "/repos/{owner}/{repo}/issues/{issue_number}/reactions")]
public sealed virtual Task`1<IReadOnlyList`1<Reaction>> GetAll(string owner, string name, int issueNumber);
    [ManualRouteAttribute("GET", "/repos/{owner}/{repo}/issues/{issue_number}/reactions")]
public sealed virtual Task`1<IReadOnlyList`1<Reaction>> GetAll(string owner, string name, int issueNumber, ApiOptions options);
    [ManualRouteAttribute("GET", "/repositories/{id}/issues/{number}/reactions")]
public sealed virtual Task`1<IReadOnlyList`1<Reaction>> GetAll(long repositoryId, int issueNumber);
    [ManualRouteAttribute("GET", "/repositories/{id}/issues/{number}/reactions")]
public sealed virtual Task`1<IReadOnlyList`1<Reaction>> GetAll(long repositoryId, int issueNumber, ApiOptions options);
    [ManualRouteAttribute("POST", "/repos/{owner}/{repo}/issues/{issue_number}/reactions")]
public sealed virtual Task`1<Reaction> Create(string owner, string name, int issueNumber, NewReaction reaction);
    [ManualRouteAttribute("POST", "/repositories/{id}/issues/{number}/reactions")]
public sealed virtual Task`1<Reaction> Create(long repositoryId, int issueNumber, NewReaction reaction);
    [ManualRouteAttribute("DELETE", "/repos/{owner}/{repo}/issues/{issue_number}/reactions/{reaction_id}")]
public sealed virtual Task Delete(string owner, string name, int issueNumber, long reactionId);
    [ManualRouteAttribute("DELETE", "/repositories/{id}/issues/{issue_number}/reactions/{reaction_id}")]
public sealed virtual Task Delete(long repositoryId, int issueNumber, long reactionId);
}
[DebuggerDisplayAttribute("{DebuggerDisplay,nq}")]
public class Octokit.IssueRequest : RequestParameters {
    [CompilerGeneratedAttribute]
private IssueFilter <Filter>k__BackingField;
    [CompilerGeneratedAttribute]
private ItemStateFilter <State>k__BackingField;
    [CompilerGeneratedAttribute]
private Collection`1<string> <Labels>k__BackingField;
    [CompilerGeneratedAttribute]
private IssueSort <SortProperty>k__BackingField;
    [CompilerGeneratedAttribute]
private SortDirection <SortDirection>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<DateTimeOffset> <Since>k__BackingField;
    public IssueFilter Filter { get; public set; }
    public ItemStateFilter State { get; public set; }
    public Collection`1<string> Labels { get; private set; }
    [ParameterAttribute]
public IssueSort SortProperty { get; public set; }
    [ParameterAttribute]
public SortDirection SortDirection { get; public set; }
    public Nullable`1<DateTimeOffset> Since { get; public set; }
    internal string DebuggerDisplay { get; }
    [CompilerGeneratedAttribute]
public IssueFilter get_Filter();
    [CompilerGeneratedAttribute]
public void set_Filter(IssueFilter value);
    [CompilerGeneratedAttribute]
public ItemStateFilter get_State();
    [CompilerGeneratedAttribute]
public void set_State(ItemStateFilter value);
    [CompilerGeneratedAttribute]
public Collection`1<string> get_Labels();
    [CompilerGeneratedAttribute]
private void set_Labels(Collection`1<string> value);
    [CompilerGeneratedAttribute]
public IssueSort get_SortProperty();
    [CompilerGeneratedAttribute]
public void set_SortProperty(IssueSort value);
    [CompilerGeneratedAttribute]
public SortDirection get_SortDirection();
    [CompilerGeneratedAttribute]
public void set_SortDirection(SortDirection value);
    [CompilerGeneratedAttribute]
public Nullable`1<DateTimeOffset> get_Since();
    [CompilerGeneratedAttribute]
public void set_Since(Nullable`1<DateTimeOffset> value);
    internal string get_DebuggerDisplay();
}
public class Octokit.IssuesClient : ApiClient {
    [CompilerGeneratedAttribute]
private IAssigneesClient <Assignee>k__BackingField;
    [CompilerGeneratedAttribute]
private IIssuesEventsClient <Events>k__BackingField;
    [CompilerGeneratedAttribute]
private IIssuesLabelsClient <Labels>k__BackingField;
    [CompilerGeneratedAttribute]
private IMilestonesClient <Milestone>k__BackingField;
    [CompilerGeneratedAttribute]
private IIssueCommentsClient <Comment>k__BackingField;
    [CompilerGeneratedAttribute]
private IIssueTimelineClient <Timeline>k__BackingField;
    [CompilerGeneratedAttribute]
private ILockUnlockClient <LockUnlock>k__BackingField;
    public IAssigneesClient Assignee { get; private set; }
    public IIssuesEventsClient Events { get; private set; }
    public IIssuesLabelsClient Labels { get; private set; }
    public IMilestonesClient Milestone { get; private set; }
    public IIssueCommentsClient Comment { get; private set; }
    public IIssueTimelineClient Timeline { get; private set; }
    public ILockUnlockClient LockUnlock { get; private set; }
    public IssuesClient(IApiConnection apiConnection);
    [CompilerGeneratedAttribute]
public sealed virtual IAssigneesClient get_Assignee();
    [CompilerGeneratedAttribute]
private void set_Assignee(IAssigneesClient value);
    [CompilerGeneratedAttribute]
public sealed virtual IIssuesEventsClient get_Events();
    [CompilerGeneratedAttribute]
private void set_Events(IIssuesEventsClient value);
    [CompilerGeneratedAttribute]
public sealed virtual IIssuesLabelsClient get_Labels();
    [CompilerGeneratedAttribute]
private void set_Labels(IIssuesLabelsClient value);
    [CompilerGeneratedAttribute]
public sealed virtual IMilestonesClient get_Milestone();
    [CompilerGeneratedAttribute]
private void set_Milestone(IMilestonesClient value);
    [CompilerGeneratedAttribute]
public sealed virtual IIssueCommentsClient get_Comment();
    [CompilerGeneratedAttribute]
private void set_Comment(IIssueCommentsClient value);
    [CompilerGeneratedAttribute]
public sealed virtual IIssueTimelineClient get_Timeline();
    [CompilerGeneratedAttribute]
private void set_Timeline(IIssueTimelineClient value);
    [CompilerGeneratedAttribute]
public sealed virtual ILockUnlockClient get_LockUnlock();
    [CompilerGeneratedAttribute]
private void set_LockUnlock(ILockUnlockClient value);
    [ManualRouteAttribute("GET", "/repos/{owner}/{repo}/issues/{issue_number}")]
public sealed virtual Task`1<Issue> Get(string owner, string name, int issueNumber);
    [ManualRouteAttribute("GET", "/repositories/{id}/issues/{number}")]
public sealed virtual Task`1<Issue> Get(long repositoryId, int issueNumber);
    [ManualRouteAttribute("GET", "/issues")]
public sealed virtual Task`1<IReadOnlyList`1<Issue>> GetAllForCurrent();
    [ManualRouteAttribute("GET", "/issues")]
public sealed virtual Task`1<IReadOnlyList`1<Issue>> GetAllForCurrent(ApiOptions options);
    [ManualRouteAttribute("GET", "/issues")]
public sealed virtual Task`1<IReadOnlyList`1<Issue>> GetAllForCurrent(IssueRequest request);
    [ManualRouteAttribute("GET", "/issues")]
public sealed virtual Task`1<IReadOnlyList`1<Issue>> GetAllForCurrent(IssueRequest request, ApiOptions options);
    [ManualRouteAttribute("GET", "/user/issues")]
public sealed virtual Task`1<IReadOnlyList`1<Issue>> GetAllForOwnedAndMemberRepositories();
    [ManualRouteAttribute("GET", "/user/issues")]
public sealed virtual Task`1<IReadOnlyList`1<Issue>> GetAllForOwnedAndMemberRepositories(ApiOptions options);
    [ManualRouteAttribute("GET", "/user/issues")]
public sealed virtual Task`1<IReadOnlyList`1<Issue>> GetAllForOwnedAndMemberRepositories(IssueRequest request);
    [ManualRouteAttribute("GET", "/user/issues")]
public sealed virtual Task`1<IReadOnlyList`1<Issue>> GetAllForOwnedAndMemberRepositories(IssueRequest request, ApiOptions options);
    [ManualRouteAttribute("GET", "/orgs/{org}/issues")]
public sealed virtual Task`1<IReadOnlyList`1<Issue>> GetAllForOrganization(string organization);
    [ManualRouteAttribute("GET", "/orgs/{org}/issues")]
public sealed virtual Task`1<IReadOnlyList`1<Issue>> GetAllForOrganization(string organization, ApiOptions options);
    [ManualRouteAttribute("GET", "/orgs/{org}/issues")]
public sealed virtual Task`1<IReadOnlyList`1<Issue>> GetAllForOrganization(string organization, IssueRequest request);
    [ManualRouteAttribute("GET", "/orgs/{org}/issues")]
public sealed virtual Task`1<IReadOnlyList`1<Issue>> GetAllForOrganization(string organization, IssueRequest request, ApiOptions options);
    [ManualRouteAttribute("GET", "/repos/{owner}/{repo}/issues")]
public sealed virtual Task`1<IReadOnlyList`1<Issue>> GetAllForRepository(string owner, string name);
    [ManualRouteAttribute("GET", "/repositories/{id}/issues")]
public sealed virtual Task`1<IReadOnlyList`1<Issue>> GetAllForRepository(long repositoryId);
    [ManualRouteAttribute("GET", "/repos/{owner}/{repo}/issues")]
public sealed virtual Task`1<IReadOnlyList`1<Issue>> GetAllForRepository(string owner, string name, ApiOptions options);
    [ManualRouteAttribute("GET", "/repositories/{id}/issues")]
public sealed virtual Task`1<IReadOnlyList`1<Issue>> GetAllForRepository(long repositoryId, ApiOptions options);
    [ManualRouteAttribute("GET", "/repos/{owner}/{repo}/issues")]
public sealed virtual Task`1<IReadOnlyList`1<Issue>> GetAllForRepository(string owner, string name, RepositoryIssueRequest request);
    [ManualRouteAttribute("GET", "/repositories/{id}/issues")]
public sealed virtual Task`1<IReadOnlyList`1<Issue>> GetAllForRepository(long repositoryId, RepositoryIssueRequest request);
    [ManualRouteAttribute("GET", "/repos/{owner}/{repo}/issues")]
public sealed virtual Task`1<IReadOnlyList`1<Issue>> GetAllForRepository(string owner, string name, RepositoryIssueRequest request, ApiOptions options);
    [ManualRouteAttribute("GET", "/repositories/{id}/issues")]
public sealed virtual Task`1<IReadOnlyList`1<Issue>> GetAllForRepository(long repositoryId, RepositoryIssueRequest request, ApiOptions options);
    [ManualRouteAttribute("POST", "/repos/{owner}/{repo}/issues")]
public sealed virtual Task`1<Issue> Create(string owner, string name, NewIssue newIssue);
    [ManualRouteAttribute("POST", "/repositories/{id}/issues")]
public sealed virtual Task`1<Issue> Create(long repositoryId, NewIssue newIssue);
    [ManualRouteAttribute("PATCH", "/repos/{owner}/{repo}/issues/{issue_number}")]
public sealed virtual Task`1<Issue> Update(string owner, string name, int issueNumber, IssueUpdate issueUpdate);
    [ManualRouteAttribute("PATCH", "/repositories/{id}/issues/{number}")]
public sealed virtual Task`1<Issue> Update(long repositoryId, int issueNumber, IssueUpdate issueUpdate);
}
public enum Octokit.IssueSearchSort : Enum {
    public int value__;
    [ParameterAttribute]
public static IssueSearchSort Comments;
    [ParameterAttribute]
public static IssueSearchSort Created;
    [ParameterAttribute]
public static IssueSearchSort Updated;
    [ParameterAttribute]
public static IssueSearchSort Merged;
}
public class Octokit.IssuesEventsClient : ApiClient {
    public IssuesEventsClient(IApiConnection apiConnection);
    [ManualRouteAttribute("GET", "/repos/{owner}/{repo}/issues/{issue_number}/events")]
public sealed virtual Task`1<IReadOnlyList`1<IssueEvent>> GetAllForIssue(string owner, string name, int issueNumber);
    [ManualRouteAttribute("GET", "/repositories/{id}/issues/{number}/events")]
public sealed virtual Task`1<IReadOnlyList`1<IssueEvent>> GetAllForIssue(long repositoryId, int issueNumber);
    [ManualRouteAttribute("GET", "/repos/{owner}/{repo}/issues/{issue_number}/events")]
public sealed virtual Task`1<IReadOnlyList`1<IssueEvent>> GetAllForIssue(string owner, string name, int issueNumber, ApiOptions options);
    [ManualRouteAttribute("GET", "/repositories/{id}/issues/{number}/events")]
public sealed virtual Task`1<IReadOnlyList`1<IssueEvent>> GetAllForIssue(long repositoryId, int issueNumber, ApiOptions options);
    [ManualRouteAttribute("GET", "/repos/{owner}/{repo}/issues/events")]
public sealed virtual Task`1<IReadOnlyList`1<IssueEvent>> GetAllForRepository(string owner, string name);
    [ManualRouteAttribute("GET", "/repositories/{id}/issues/events")]
public sealed virtual Task`1<IReadOnlyList`1<IssueEvent>> GetAllForRepository(long repositoryId);
    [ManualRouteAttribute("GET", "/repos/{owner}/{repo}/issues/events")]
public sealed virtual Task`1<IReadOnlyList`1<IssueEvent>> GetAllForRepository(string owner, string name, ApiOptions options);
    [ManualRouteAttribute("GET", "/repositories/{id}/issues/events")]
public sealed virtual Task`1<IReadOnlyList`1<IssueEvent>> GetAllForRepository(long repositoryId, ApiOptions options);
    [ManualRouteAttribute("GET", "/repos/{owner}/{repo}/issues/events/{event_id}")]
public sealed virtual Task`1<IssueEvent> Get(string owner, string name, long eventId);
    [ManualRouteAttribute("GET", "/repositories/{id}/issues/events/{event_id}")]
public sealed virtual Task`1<IssueEvent> Get(long repositoryId, long eventId);
}
public class Octokit.IssuesLabelsClient : ApiClient {
    public IssuesLabelsClient(IApiConnection apiConnection);
    [ManualRouteAttribute("GET", "/repos/{owner}/{repo}/issues/{issue_number}/labels")]
public sealed virtual Task`1<IReadOnlyList`1<Label>> GetAllForIssue(string owner, string name, int issueNumber);
    [ManualRouteAttribute("GET", "/repositories/{id}/issues/{number}/labels")]
public sealed virtual Task`1<IReadOnlyList`1<Label>> GetAllForIssue(long repositoryId, int issueNumber);
    [ManualRouteAttribute("GET", "/repos/{owner}/{repo}/issues/{issue_number}/labels")]
public sealed virtual Task`1<IReadOnlyList`1<Label>> GetAllForIssue(string owner, string name, int issueNumber, ApiOptions options);
    [ManualRouteAttribute("GET", "/repositories/{id}/issues/{number}/labels")]
public sealed virtual Task`1<IReadOnlyList`1<Label>> GetAllForIssue(long repositoryId, int issueNumber, ApiOptions options);
    [ManualRouteAttribute("GET", "/repos/{owner}/{repo}/labels")]
public sealed virtual Task`1<IReadOnlyList`1<Label>> GetAllForRepository(string owner, string name);
    [ManualRouteAttribute("GET", "/repositories/{id}/labels")]
public sealed virtual Task`1<IReadOnlyList`1<Label>> GetAllForRepository(long repositoryId);
    [ManualRouteAttribute("GET", "/repos/{owner}/{repo}/labels")]
public sealed virtual Task`1<IReadOnlyList`1<Label>> GetAllForRepository(string owner, string name, ApiOptions options);
    [ManualRouteAttribute("GET", "/repositories/{id}/labels")]
public sealed virtual Task`1<IReadOnlyList`1<Label>> GetAllForRepository(long repositoryId, ApiOptions options);
    [ManualRouteAttribute("GET", "/repos/{owner}/{repo}/milestones/{milestone_number}/labels")]
public sealed virtual Task`1<IReadOnlyList`1<Label>> GetAllForMilestone(string owner, string name, int milestoneNumber);
    [ManualRouteAttribute("GET", "/repositories/{id}/milestones/{milestone_number}/labels")]
public sealed virtual Task`1<IReadOnlyList`1<Label>> GetAllForMilestone(long repositoryId, int milestoneNumber);
    [ManualRouteAttribute("GET", "/repos/{owner}/{repo}/milestones/{milestone_number}/labels")]
public sealed virtual Task`1<IReadOnlyList`1<Label>> GetAllForMilestone(string owner, string name, int milestoneNumber, ApiOptions options);
    [ManualRouteAttribute("GET", "/repositories/{id}/milestones/{milestone_number}/labels")]
public sealed virtual Task`1<IReadOnlyList`1<Label>> GetAllForMilestone(long repositoryId, int milestoneNumber, ApiOptions options);
    [ManualRouteAttribute("GET", "/repos/{owner}/{repo}/labels/{name}")]
public sealed virtual Task`1<Label> Get(string owner, string name, string labelName);
    [ManualRouteAttribute("GET", "/repositories/{id}/labels/{name}")]
public sealed virtual Task`1<Label> Get(long repositoryId, string labelName);
    [ManualRouteAttribute("DELETE", "/repos/{owner}/{repo}/labels/{name}")]
public sealed virtual Task Delete(string owner, string name, string labelName);
    [ManualRouteAttribute("DELETE", "/repositories/{id}/labels/{name}")]
public sealed virtual Task Delete(long repositoryId, string labelName);
    [ManualRouteAttribute("POST", "/repos/{owner}/{repo}/labels")]
public sealed virtual Task`1<Label> Create(string owner, string name, NewLabel newLabel);
    [ManualRouteAttribute("POST", "/repositories/{id}/labels/{name}")]
public sealed virtual Task`1<Label> Create(long repositoryId, NewLabel newLabel);
    [ManualRouteAttribute("PATCH", "/repos/{owner}/{repo}/labels/{name}")]
public sealed virtual Task`1<Label> Update(string owner, string name, string labelName, LabelUpdate labelUpdate);
    [ManualRouteAttribute("PATCH", "/repositories/{id}/labels/{name}")]
public sealed virtual Task`1<Label> Update(long repositoryId, string labelName, LabelUpdate labelUpdate);
    [ManualRouteAttribute("POST", "/repos/{owner}/{repo}/issues/{issue_number}/labels")]
public sealed virtual Task`1<IReadOnlyList`1<Label>> AddToIssue(string owner, string name, int issueNumber, String[] labels);
    [ManualRouteAttribute("POST", "/repositories/{id}/issues/{number}/labels")]
public sealed virtual Task`1<IReadOnlyList`1<Label>> AddToIssue(long repositoryId, int issueNumber, String[] labels);
    [ManualRouteAttribute("DELETE", "/repos/{owner}/{repo}/issues/{issue_number}/labels")]
public sealed virtual Task`1<IReadOnlyList`1<Label>> RemoveFromIssue(string owner, string name, int issueNumber, string labelName);
    [ManualRouteAttribute("DELETE", "/repositories/{id}/issues/{number}/labels")]
public sealed virtual Task`1<IReadOnlyList`1<Label>> RemoveFromIssue(long repositoryId, int issueNumber, string labelName);
    [ManualRouteAttribute("PUT", "/repos/{owner}/{repo}/issues/{issue_number}/labels")]
public sealed virtual Task`1<IReadOnlyList`1<Label>> ReplaceAllForIssue(string owner, string name, int issueNumber, String[] labels);
    [ManualRouteAttribute("PUT", "/repositories/{id}/issues/{number}/labels")]
public sealed virtual Task`1<IReadOnlyList`1<Label>> ReplaceAllForIssue(long repositoryId, int issueNumber, String[] labels);
    [ManualRouteAttribute("DELETE", "/repos/{owner}/{repo}/issues/{issue_number}/labels")]
public sealed virtual Task RemoveAllFromIssue(string owner, string name, int issueNumber);
    [ManualRouteAttribute("DELETE", "/repositories/{id}/issues/{number}/labels")]
public sealed virtual Task RemoveAllFromIssue(long repositoryId, int issueNumber);
}
public enum Octokit.IssueSort : Enum {
    public int value__;
    [ParameterAttribute]
public static IssueSort Created;
    [ParameterAttribute]
public static IssueSort Updated;
    [ParameterAttribute]
public static IssueSort Comments;
}
public class Octokit.IssueTimelineClient : ApiClient {
    public IssueTimelineClient(IApiConnection apiConnection);
    [ManualRouteAttribute("GET", "/repos/{owner}/{repo}/issues/{issue_number}/timeline")]
public sealed virtual Task`1<IReadOnlyList`1<TimelineEventInfo>> GetAllForIssue(string owner, string repo, int issueNumber);
    [ManualRouteAttribute("GET", "/repos/{owner}/{repo}/issues/{issue_number}/timeline")]
public sealed virtual Task`1<IReadOnlyList`1<TimelineEventInfo>> GetAllForIssue(string owner, string repo, int issueNumber, ApiOptions options);
    [ManualRouteAttribute("GET", "/repositories/{id}/issues/{number}/timeline")]
public sealed virtual Task`1<IReadOnlyList`1<TimelineEventInfo>> GetAllForIssue(long repositoryId, int issueNumber);
    [ManualRouteAttribute("GET", "/repositories/{id}/issues/{number}/timeline")]
public sealed virtual Task`1<IReadOnlyList`1<TimelineEventInfo>> GetAllForIssue(long repositoryId, int issueNumber, ApiOptions options);
}
public enum Octokit.IssueTypeQualifier : Enum {
    public int value__;
    [ParameterAttribute]
public static IssueTypeQualifier PullRequest;
    [ParameterAttribute]
public static IssueTypeQualifier Issue;
}
[DebuggerDisplayAttribute("{DebuggerDisplay,nq}")]
public class Octokit.IssueUpdate : object {
    [CompilerGeneratedAttribute]
private string <Title>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Body>k__BackingField;
    [CompilerGeneratedAttribute]
private ICollection`1<string> <Assignees>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<int> <Milestone>k__BackingField;
    [CompilerGeneratedAttribute]
private ICollection`1<string> <Labels>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<ItemState> <State>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<ItemStateReason> <StateReason>k__BackingField;
    public string Title { get; public set; }
    public string Body { get; public set; }
    public ICollection`1<string> Assignees { get; private set; }
    [SerializeNullAttribute]
public Nullable`1<int> Milestone { get; public set; }
    public ICollection`1<string> Labels { get; private set; }
    public Nullable`1<ItemState> State { get; public set; }
    public Nullable`1<ItemStateReason> StateReason { get; public set; }
    internal string DebuggerDisplay { get; }
    [CompilerGeneratedAttribute]
public string get_Title();
    [CompilerGeneratedAttribute]
public void set_Title(string value);
    [CompilerGeneratedAttribute]
public string get_Body();
    [CompilerGeneratedAttribute]
public void set_Body(string value);
    [CompilerGeneratedAttribute]
public ICollection`1<string> get_Assignees();
    [CompilerGeneratedAttribute]
private void set_Assignees(ICollection`1<string> value);
    [CompilerGeneratedAttribute]
public Nullable`1<int> get_Milestone();
    [CompilerGeneratedAttribute]
public void set_Milestone(Nullable`1<int> value);
    [CompilerGeneratedAttribute]
public ICollection`1<string> get_Labels();
    [CompilerGeneratedAttribute]
private void set_Labels(ICollection`1<string> value);
    [CompilerGeneratedAttribute]
public Nullable`1<ItemState> get_State();
    [CompilerGeneratedAttribute]
public void set_State(Nullable`1<ItemState> value);
    [CompilerGeneratedAttribute]
public Nullable`1<ItemStateReason> get_StateReason();
    [CompilerGeneratedAttribute]
public void set_StateReason(Nullable`1<ItemStateReason> value);
    internal string get_DebuggerDisplay();
    public void AddAssignee(string name);
    public void ClearAssignees();
    public void RemoveAssignee(string name);
    public void AddLabel(string name);
    public void ClearLabels();
    public void RemoveLabel(string name);
}
public interface Octokit.IStarredClient {
    public abstract virtual Task`1<IReadOnlyList`1<User>> GetAllStargazers(string owner, string name);
    public abstract virtual Task`1<IReadOnlyList`1<User>> GetAllStargazers(long repositoryId);
    public abstract virtual Task`1<IReadOnlyList`1<User>> GetAllStargazers(string owner, string name, ApiOptions options);
    public abstract virtual Task`1<IReadOnlyList`1<User>> GetAllStargazers(long repositoryId, ApiOptions options);
    public abstract virtual Task`1<IReadOnlyList`1<UserStar>> GetAllStargazersWithTimestamps(string owner, string name);
    public abstract virtual Task`1<IReadOnlyList`1<UserStar>> GetAllStargazersWithTimestamps(long repositoryId);
    public abstract virtual Task`1<IReadOnlyList`1<UserStar>> GetAllStargazersWithTimestamps(string owner, string name, ApiOptions options);
    public abstract virtual Task`1<IReadOnlyList`1<UserStar>> GetAllStargazersWithTimestamps(long repositoryId, ApiOptions options);
    public abstract virtual Task`1<IReadOnlyList`1<Repository>> GetAllForCurrent();
    public abstract virtual Task`1<IReadOnlyList`1<Repository>> GetAllForCurrent(ApiOptions options);
    public abstract virtual Task`1<IReadOnlyList`1<RepositoryStar>> GetAllForCurrentWithTimestamps();
    public abstract virtual Task`1<IReadOnlyList`1<RepositoryStar>> GetAllForCurrentWithTimestamps(ApiOptions options);
    public abstract virtual Task`1<IReadOnlyList`1<Repository>> GetAllForCurrent(StarredRequest request);
    public abstract virtual Task`1<IReadOnlyList`1<Repository>> GetAllForCurrent(StarredRequest request, ApiOptions options);
    public abstract virtual Task`1<IReadOnlyList`1<RepositoryStar>> GetAllForCurrentWithTimestamps(StarredRequest request);
    public abstract virtual Task`1<IReadOnlyList`1<RepositoryStar>> GetAllForCurrentWithTimestamps(StarredRequest request, ApiOptions options);
    public abstract virtual Task`1<IReadOnlyList`1<Repository>> GetAllForUser(string user);
    public abstract virtual Task`1<IReadOnlyList`1<Repository>> GetAllForUser(string user, ApiOptions options);
    public abstract virtual Task`1<IReadOnlyList`1<RepositoryStar>> GetAllForUserWithTimestamps(string user);
    public abstract virtual Task`1<IReadOnlyList`1<RepositoryStar>> GetAllForUserWithTimestamps(string user, ApiOptions options);
    public abstract virtual Task`1<IReadOnlyList`1<Repository>> GetAllForUser(string user, StarredRequest request);
    public abstract virtual Task`1<IReadOnlyList`1<Repository>> GetAllForUser(string user, StarredRequest request, ApiOptions options);
    public abstract virtual Task`1<IReadOnlyList`1<RepositoryStar>> GetAllForUserWithTimestamps(string user, StarredRequest request);
    public abstract virtual Task`1<IReadOnlyList`1<RepositoryStar>> GetAllForUserWithTimestamps(string user, StarredRequest request, ApiOptions options);
    public abstract virtual Task`1<bool> CheckStarred(string owner, string name);
    public abstract virtual Task`1<bool> StarRepo(string owner, string name);
    public abstract virtual Task`1<bool> RemoveStarFromRepo(string owner, string name);
}
public interface Octokit.IStatisticsClient {
    public abstract virtual Task`1<IReadOnlyList`1<Contributor>> GetContributors(string owner, string name);
    public abstract virtual Task`1<IReadOnlyList`1<Contributor>> GetContributors(long repositoryId);
    public abstract virtual Task`1<IReadOnlyList`1<Contributor>> GetContributors(string owner, string name, CancellationToken cancellationToken);
    public abstract virtual Task`1<IReadOnlyList`1<Contributor>> GetContributors(long repositoryId, CancellationToken cancellationToken);
    public abstract virtual Task`1<CommitActivity> GetCommitActivity(string owner, string name);
    public abstract virtual Task`1<CommitActivity> GetCommitActivity(long repositoryId);
    public abstract virtual Task`1<CommitActivity> GetCommitActivity(string owner, string name, CancellationToken cancellationToken);
    public abstract virtual Task`1<CommitActivity> GetCommitActivity(long repositoryId, CancellationToken cancellationToken);
    public abstract virtual Task`1<CodeFrequency> GetCodeFrequency(string owner, string name);
    public abstract virtual Task`1<CodeFrequency> GetCodeFrequency(long repositoryId);
    public abstract virtual Task`1<CodeFrequency> GetCodeFrequency(string owner, string name, CancellationToken cancellationToken);
    public abstract virtual Task`1<CodeFrequency> GetCodeFrequency(long repositoryId, CancellationToken cancellationToken);
    public abstract virtual Task`1<Participation> GetParticipation(string owner, string name);
    public abstract virtual Task`1<Participation> GetParticipation(long repositoryId);
    public abstract virtual Task`1<Participation> GetParticipation(string owner, string name, CancellationToken cancellationToken);
    public abstract virtual Task`1<Participation> GetParticipation(long repositoryId, CancellationToken cancellationToken);
    public abstract virtual Task`1<PunchCard> GetPunchCard(string owner, string name);
    public abstract virtual Task`1<PunchCard> GetPunchCard(long repositoryId);
    public abstract virtual Task`1<PunchCard> GetPunchCard(string owner, string name, CancellationToken cancellationToken);
    public abstract virtual Task`1<PunchCard> GetPunchCard(long repositoryId, CancellationToken cancellationToken);
}
public interface Octokit.ITagsClient {
    public abstract virtual Task`1<GitTag> Get(string owner, string name, string reference);
    public abstract virtual Task`1<GitTag> Get(long repositoryId, string reference);
    public abstract virtual Task`1<GitTag> Create(string owner, string name, NewTag tag);
    public abstract virtual Task`1<GitTag> Create(long repositoryId, NewTag tag);
}
public interface Octokit.ITeamsClient {
    public abstract virtual Task`1<Team> Get(long id);
    public abstract virtual Task`1<IReadOnlyList`1<Team>> GetAll(string org);
    public abstract virtual Task`1<IReadOnlyList`1<Team>> GetAll(string org, ApiOptions options);
    public abstract virtual Task`1<IReadOnlyList`1<Team>> GetAllForCurrent();
    public abstract virtual Task`1<IReadOnlyList`1<Team>> GetAllForCurrent(ApiOptions options);
    public abstract virtual Task`1<IReadOnlyList`1<Team>> GetAllChildTeams(long id);
    public abstract virtual Task`1<IReadOnlyList`1<Team>> GetAllChildTeams(long id, ApiOptions options);
    public abstract virtual Task`1<IReadOnlyList`1<User>> GetAllMembers(long id);
    public abstract virtual Task`1<IReadOnlyList`1<User>> GetAllMembers(long id, ApiOptions options);
    public abstract virtual Task`1<IReadOnlyList`1<User>> GetAllMembers(long id, TeamMembersRequest request);
    public abstract virtual Task`1<IReadOnlyList`1<User>> GetAllMembers(long id, TeamMembersRequest request, ApiOptions options);
    public abstract virtual Task`1<Team> Create(string org, NewTeam team);
    public abstract virtual Task`1<Team> Update(string org, string teamSlug, UpdateTeam team);
    public abstract virtual Task`1<Team> Update(long id, UpdateTeam team);
    public abstract virtual Task Delete(string org, string teamSlug);
    public abstract virtual Task Delete(long id);
    public abstract virtual Task`1<TeamMembershipDetails> AddOrEditMembership(long id, string login, UpdateTeamMembership request);
    public abstract virtual Task`1<bool> RemoveMembership(long id, string login);
    public abstract virtual Task`1<TeamMembershipDetails> GetMembershipDetails(long id, string login);
    public abstract virtual Task`1<IReadOnlyList`1<Repository>> GetAllRepositories(long id);
    public abstract virtual Task`1<IReadOnlyList`1<Repository>> GetAllRepositories(long id, ApiOptions options);
    public abstract virtual Task`1<bool> AddRepository(long id, string organization, string repoName);
    public abstract virtual Task`1<bool> AddRepository(long id, string organization, string repoName, RepositoryPermissionRequest permission);
    public abstract virtual Task`1<bool> RemoveRepository(long id, string organization, string repoName);
    public abstract virtual Task`1<bool> IsRepositoryManagedByTeam(long id, string owner, string repo);
    public abstract virtual Task`1<IReadOnlyList`1<OrganizationMembershipInvitation>> GetAllPendingInvitations(long id);
    public abstract virtual Task`1<IReadOnlyList`1<OrganizationMembershipInvitation>> GetAllPendingInvitations(long id, ApiOptions options);
    public abstract virtual Task`1<bool> CheckTeamPermissionsForARepository(string org, string teamSlug, string owner, string repo);
    public abstract virtual Task`1<TeamRepository> CheckTeamPermissionsForARepositoryWithCustomAcceptHeader(string org, string teamSlug, string owner, string repo);
    public abstract virtual Task AddOrUpdateTeamRepositoryPermissions(string org, string teamSlug, string owner, string repo, string permission);
    public abstract virtual Task RemoveRepositoryFromATeam(string org, string teamSlug, string owner, string repo);
    public abstract virtual Task`1<Team> GetByName(string org, string teamSlug);
}
public enum Octokit.ItemState : Enum {
    public int value__;
    [ParameterAttribute]
public static ItemState Open;
    [ParameterAttribute]
public static ItemState Closed;
}
public enum Octokit.ItemStateFilter : Enum {
    public int value__;
    [ParameterAttribute]
public static ItemStateFilter Open;
    [ParameterAttribute]
public static ItemStateFilter Closed;
    [ParameterAttribute]
public static ItemStateFilter All;
}
public enum Octokit.ItemStateReason : Enum {
    public int value__;
    [ParameterAttribute]
public static ItemStateReason Completed;
    [ParameterAttribute]
public static ItemStateReason NotPlanned;
    [ParameterAttribute]
public static ItemStateReason Reopened;
}
public interface Octokit.ITreesClient {
    public abstract virtual Task`1<TreeResponse> Get(string owner, string name, string reference);
    public abstract virtual Task`1<TreeResponse> Get(long repositoryId, string reference);
    public abstract virtual Task`1<TreeResponse> GetRecursive(string owner, string name, string reference);
    public abstract virtual Task`1<TreeResponse> GetRecursive(long repositoryId, string reference);
    public abstract virtual Task`1<TreeResponse> Create(string owner, string name, NewTree newTree);
    public abstract virtual Task`1<TreeResponse> Create(long repositoryId, NewTree newTree);
}
public interface Octokit.IUserAdministrationClient {
    public abstract virtual Task`1<User> Create(NewUser newUser);
    public abstract virtual Task`1<UserRenameResponse> Rename(string login, UserRename userRename);
    public abstract virtual Task`1<Authorization> CreateImpersonationToken(string login, NewImpersonationToken newImpersonationToken);
    public abstract virtual Task DeleteImpersonationToken(string login);
    public abstract virtual Task Promote(string login);
    public abstract virtual Task Demote(string login);
    public abstract virtual Task Suspend(string login);
    public abstract virtual Task Unsuspend(string login);
    public abstract virtual Task`1<IReadOnlyList`1<PublicKey>> ListAllPublicKeys();
    public abstract virtual Task Delete(string login);
    public abstract virtual Task DeletePublicKey(int keyId);
}
public interface Octokit.IUserEmailsClient {
    public abstract virtual Task`1<IReadOnlyList`1<EmailAddress>> GetAll();
    public abstract virtual Task`1<IReadOnlyList`1<EmailAddress>> GetAll(ApiOptions options);
    public abstract virtual Task`1<IReadOnlyList`1<EmailAddress>> Add(String[] emailAddresses);
    public abstract virtual Task Delete(String[] emailAddresses);
}
public interface Octokit.IUserGpgKeysClient {
    public abstract virtual Task`1<IReadOnlyList`1<GpgKey>> GetAllForCurrent();
    public abstract virtual Task`1<IReadOnlyList`1<GpgKey>> GetAllForCurrent(ApiOptions options);
    public abstract virtual Task`1<GpgKey> Get(long id);
    public abstract virtual Task`1<GpgKey> Create(NewGpgKey newGpgKey);
    public abstract virtual Task Delete(long id);
}
public interface Octokit.IUserKeysClient {
    public abstract virtual Task`1<IReadOnlyList`1<PublicKey>> GetAll(string userName);
    public abstract virtual Task`1<IReadOnlyList`1<PublicKey>> GetAll(string userName, ApiOptions options);
    public abstract virtual Task`1<IReadOnlyList`1<PublicKey>> GetAllForCurrent();
    public abstract virtual Task`1<IReadOnlyList`1<PublicKey>> GetAllForCurrent(ApiOptions options);
    public abstract virtual Task`1<PublicKey> Get(long id);
    public abstract virtual Task`1<PublicKey> Create(NewPublicKey newKey);
    public abstract virtual Task Delete(long id);
}
public interface Octokit.IUsersClient {
    public IUserEmailsClient Email { get; }
    public IUserKeysClient GitSshKey { get; }
    public IUserGpgKeysClient GpgKey { get; }
    public IFollowersClient Followers { get; }
    public IUserAdministrationClient Administration { get; }
    public abstract virtual IUserEmailsClient get_Email();
    public abstract virtual IUserKeysClient get_GitSshKey();
    public abstract virtual IUserGpgKeysClient get_GpgKey();
    public abstract virtual Task`1<User> Get(string login);
    public abstract virtual Task`1<User> Current();
    public abstract virtual Task`1<User> Update(UserUpdate user);
    public abstract virtual IFollowersClient get_Followers();
    public abstract virtual IUserAdministrationClient get_Administration();
}
public interface Octokit.IWatchedClient {
    public abstract virtual Task`1<IReadOnlyList`1<User>> GetAllWatchers(string owner, string name);
    public abstract virtual Task`1<IReadOnlyList`1<User>> GetAllWatchers(long repositoryId);
    public abstract virtual Task`1<IReadOnlyList`1<User>> GetAllWatchers(string owner, string name, ApiOptions options);
    public abstract virtual Task`1<IReadOnlyList`1<User>> GetAllWatchers(long repositoryId, ApiOptions options);
    public abstract virtual Task`1<IReadOnlyList`1<Repository>> GetAllForCurrent();
    public abstract virtual Task`1<IReadOnlyList`1<Repository>> GetAllForCurrent(ApiOptions options);
    public abstract virtual Task`1<IReadOnlyList`1<Repository>> GetAllForUser(string user);
    public abstract virtual Task`1<IReadOnlyList`1<Repository>> GetAllForUser(string user, ApiOptions options);
    public abstract virtual Task`1<bool> CheckWatched(string owner, string name);
    public abstract virtual Task`1<bool> CheckWatched(long repositoryId);
    public abstract virtual Task`1<Subscription> WatchRepo(string owner, string name, NewSubscription newSubscription);
    public abstract virtual Task`1<Subscription> WatchRepo(long repositoryId, NewSubscription newSubscription);
    public abstract virtual Task`1<bool> UnwatchRepo(string owner, string name);
    public abstract virtual Task`1<bool> UnwatchRepo(long repositoryId);
}
[GeneratedCodeAttribute("simple-json", "1.0.0")]
[EditorBrowsableAttribute("1")]
internal class Octokit.JsonArray : List`1<object> {
    public JsonArray(int capacity);
    public virtual string ToString();
}
[DefaultMemberAttribute("Item")]
[GeneratedCodeAttribute("simple-json", "1.0.0")]
[EditorBrowsableAttribute("1")]
internal class Octokit.JsonObject : object {
    private Dictionary`2<string, object> _members;
    public object Item { get; }
    public ICollection`1<string> Keys { get; }
    public ICollection`1<object> Values { get; }
    public object Item { get; public set; }
    public int Count { get; }
    public bool IsReadOnly { get; }
    public JsonObject(IEqualityComparer`1<string> comparer);
    public object get_Item(int index);
    internal static object GetAtIndex(IDictionary`2<string, object> obj, int index);
    public sealed virtual void Add(string key, object value);
    public sealed virtual bool ContainsKey(string key);
    public sealed virtual ICollection`1<string> get_Keys();
    public sealed virtual bool Remove(string key);
    public sealed virtual bool TryGetValue(string key, Object& value);
    public sealed virtual ICollection`1<object> get_Values();
    public sealed virtual object get_Item(string key);
    public sealed virtual void set_Item(string key, object value);
    public sealed virtual void Add(KeyValuePair`2<string, object> item);
    public sealed virtual void Clear();
    public sealed virtual bool Contains(KeyValuePair`2<string, object> item);
    public sealed virtual void CopyTo(KeyValuePair`2[] array, int arrayIndex);
    public sealed virtual int get_Count();
    public sealed virtual bool get_IsReadOnly();
    public sealed virtual bool Remove(KeyValuePair`2<string, object> item);
    public sealed virtual IEnumerator`1<KeyValuePair`2<string, object>> GetEnumerator();
    private sealed virtual override IEnumerator System.Collections.IEnumerable.GetEnumerator();
    public virtual string ToString();
}
[DebuggerDisplayAttribute("{DebuggerDisplay,nq}")]
public class Octokit.Label : object {
    [CompilerGeneratedAttribute]
private long <Id>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Url>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    [CompilerGeneratedAttribute]
private string <NodeId>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Color>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Description>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <Default>k__BackingField;
    public long Id { get; private set; }
    public string Url { get; private set; }
    public string Name { get; private set; }
    public string NodeId { get; private set; }
    public string Color { get; private set; }
    public string Description { get; private set; }
    public bool Default { get; private set; }
    internal string DebuggerDisplay { get; }
    public Label(long id, string url, string name, string nodeId, string color, string description, bool default);
    [CompilerGeneratedAttribute]
public long get_Id();
    [CompilerGeneratedAttribute]
private void set_Id(long value);
    [CompilerGeneratedAttribute]
public string get_Url();
    [CompilerGeneratedAttribute]
private void set_Url(string value);
    [CompilerGeneratedAttribute]
public string get_Name();
    [CompilerGeneratedAttribute]
private void set_Name(string value);
    [CompilerGeneratedAttribute]
public string get_NodeId();
    [CompilerGeneratedAttribute]
private void set_NodeId(string value);
    [CompilerGeneratedAttribute]
public string get_Color();
    [CompilerGeneratedAttribute]
private void set_Color(string value);
    [CompilerGeneratedAttribute]
public string get_Description();
    [CompilerGeneratedAttribute]
private void set_Description(string value);
    [CompilerGeneratedAttribute]
public bool get_Default();
    [CompilerGeneratedAttribute]
private void set_Default(bool value);
    internal string get_DebuggerDisplay();
}
public enum Octokit.LabelSearchSort : Enum {
    public int value__;
    [ParameterAttribute]
public static LabelSearchSort Created;
    [ParameterAttribute]
public static LabelSearchSort Updated;
}
[DebuggerDisplayAttribute("{DebuggerDisplay,nq}")]
public class Octokit.LabelUpdate : object {
    private string _color;
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Description>k__BackingField;
    public string Name { get; public set; }
    public string Color { get; public set; }
    public string Description { get; public set; }
    internal string DebuggerDisplay { get; }
    public LabelUpdate(string name, string color);
    [CompilerGeneratedAttribute]
public string get_Name();
    [CompilerGeneratedAttribute]
public void set_Name(string value);
    public string get_Color();
    public void set_Color(string value);
    [CompilerGeneratedAttribute]
public string get_Description();
    [CompilerGeneratedAttribute]
public void set_Description(string value);
    internal string get_DebuggerDisplay();
}
public enum Octokit.Language : Enum {
    public int value__;
    public static Language Abap;
    [ParameterAttribute]
public static Language ActionScript;
    public static Language Ada;
    public static Language Apex;
    [ParameterAttribute]
public static Language AppleScript;
    public static Language Arc;
    public static Language Arduino;
    [ParameterAttribute]
public static Language ApacheConf;
    public static Language Asp;
    public static Language Assembly;
    public static Language Augeas;
    [ParameterAttribute]
public static Language AutoHotKey;
    public static Language Awk;
    public static Language Batchfile;
    public static Language Befunge;
    [ParameterAttribute]
public static Language BlitzMax;
    public static Language Boo;
    public static Language Bro;
    public static Language C;
    [ParameterAttribute]
public static Language C2hsHaskell;
    public static Language Ceylon;
    public static Language Chuck;
    public static Language Clips;
    public static Language Clojure;
    public static Language Cobol;
    public static Language Cmake;
    [ParameterAttribute]
public static Language CObjDump;
    [ParameterAttribute]
public static Language CoffeeScript;
    [ParameterAttribute]
public static Language ColdFusion;
    public static Language CommonLisp;
    public static Language Coq;
    [ParameterAttribute]
public static Language CPlusPlus;
    [ParameterAttribute]
public static Language CSharp;
    public static Language Css;
    [ParameterAttribute]
public static Language CppObjDump;
    public static Language Cucumber;
    public static Language Cython;
    public static Language D;
    [ParameterAttribute]
public static Language DObjDump;
    [ParameterAttribute]
public static Language DarcsPatch;
    public static Language Dart;
    [ParameterAttribute]
public static Language Dcpu16Asm;
    public static Language Dot;
    public static Language Dylan;
    public static Language Ec;
    [ParameterAttribute]
public static Language EcereProjects;
    public static Language Ecl;
    public static Language Edn;
    public static Language Eiffel;
    public static Language Elixir;
    public static Language Elm;
    public static Language EmacsLisp;
    public static Language Erlang;
    [ParameterAttribute]
public static Language FSharp;
    public static Language Factor;
    public static Language Fancy;
    public static Language Fantom;
    public static Language Fish;
    public static Language Forth;
    public static Language Fortran;
    public static Language Gas;
    public static Language Genshi;
    [ParameterAttribute]
public static Language GentooBuild;
    [ParameterAttribute]
public static Language GentooEclass;
    [ParameterAttribute]
public static Language GettextCatalog;
    public static Language Glsl;
    public static Language Go;
    public static Language Gosu;
    public static Language Groff;
    public static Language Groovy;
    [ParameterAttribute]
public static Language GroovyServerPages;
    public static Language Haml;
    [ParameterAttribute]
public static Language HandleBars;
    public static Language Haskell;
    public static Language Haxe;
    public static Language Http;
    public static Language Ini;
    public static Language Io;
    public static Language Ioke;
    [ParameterAttribute]
public static Language IrcLog;
    public static Language J;
    public static Language Java;
    [ParameterAttribute]
public static Language JavaServerPages;
    public static Language JavaScript;
    public static Language Json;
    public static Language Julia;
    [ParameterAttribute]
public static Language JupyterNotebook;
    public static Language Kotlin;
    public static Language Lasso;
    public static Language Less;
    public static Language Lfe;
    [ParameterAttribute]
public static Language LillyPond;
    [ParameterAttribute]
public static Language LiterateCoffeeScript;
    [ParameterAttribute]
public static Language LiterateHaskell;
    [ParameterAttribute]
public static Language LiveScript;
    public static Language Llvm;
    public static Language Logos;
    public static Language Logtalk;
    public static Language Lua;
    public static Language M;
    public static Language Makefile;
    public static Language Mako;
    public static Language Markdown;
    public static Language Matlab;
    public static Language Max;
    [ParameterAttribute]
public static Language MiniD;
    public static Language Mirah;
    public static Language Monkey;
    public static Language Moocode;
    public static Language Moonscript;
    public static Language Mupad;
    public static Language Myghty;
    public static Language Nemerle;
    public static Language Nginx;
    public static Language Nimrod;
    public static Language Nsis;
    public static Language Nu;
    [ParameterAttribute]
public static Language NumPY;
    [ParameterAttribute]
public static Language ObjDump;
    public static Language ObjectiveC;
    public static Language ObjectiveJ;
    [ParameterAttribute]
public static Language OCaml;
    public static Language Omgrofl;
    public static Language Ooc;
    public static Language Opa;
    [ParameterAttribute]
public static Language OpenCL;
    [ParameterAttribute]
public static Language OpenEdgeAbl;
    public static Language Parrot;
    [ParameterAttribute]
public static Language ParrotAssembly;
    [ParameterAttribute]
public static Language ParrotInternalRepresentation;
    public static Language Pascal;
    public static Language Perl;
    public static Language Php;
    public static Language Pike;
    [ParameterAttribute]
public static Language PogoScript;
    [ParameterAttribute]
public static Language PowerShell;
    public static Language Processing;
    public static Language Prolog;
    public static Language Puppet;
    [ParameterAttribute]
public static Language PureData;
    public static Language Python;
    [ParameterAttribute]
public static Language PythonTraceback;
    public static Language R;
    public static Language Racket;
    [ParameterAttribute]
public static Language RagelInRubyHost;
    [ParameterAttribute]
public static Language RawTokenData;
    public static Language Rebol;
    public static Language Redcode;
    [ParameterAttribute]
public static Language ReStructuredText;
    public static Language Rhtml;
    public static Language Rouge;
    public static Language Ruby;
    public static Language Rust;
    public static Language Scala;
    public static Language Scheme;
    public static Language Sage;
    public static Language Sass;
    public static Language Scilab;
    public static Language Scss;
    public static Language Self;
    public static Language Shell;
    public static Language Slash;
    public static Language Smalltalk;
    public static Language Smarty;
    public static Language Squirrel;
    [ParameterAttribute]
public static Language StandardML;
    [ParameterAttribute]
public static Language SuperCollider;
    [ParameterAttribute]
public static Language Swift;
    public static Language Tcl;
    public static Language Tcsh;
    public static Language Tea;
    [ParameterAttribute]
public static Language TeX;
    public static Language Textile;
    public static Language Toml;
    public static Language Turing;
    public static Language Twig;
    public static Language Txl;
    [ParameterAttribute]
public static Language TypeScript;
    [ParameterAttribute]
public static Language UnifiedParallelC;
    public static Language Unknown;
    public static Language Vala;
    public static Language Verilog;
    public static Language Vhdl;
    [ParameterAttribute]
public static Language VimL;
    public static Language VisualBasic;
    public static Language Volt;
    public static Language Wisp;
    public static Language Xc;
    public static Language Xml;
    [ParameterAttribute]
public static Language XProc;
    [ParameterAttribute]
public static Language XQuery;
    public static Language Xs;
    public static Language Xslt;
    public static Language Xtend;
    public static Language Yaml;
}
[DebuggerDisplayAttribute("{DebuggerDisplay,nq}")]
public class Octokit.LdapSyncResponse : object {
    [CompilerGeneratedAttribute]
private string <Status>k__BackingField;
    public string Status { get; private set; }
    internal string DebuggerDisplay { get; }
    public LdapSyncResponse(string status);
    [CompilerGeneratedAttribute]
public string get_Status();
    [CompilerGeneratedAttribute]
private void set_Status(string value);
    internal string get_DebuggerDisplay();
}
public class Octokit.LegalRestrictionException : ApiException {
    public string Message { get; }
    public LegalRestrictionException(IResponse response);
    public LegalRestrictionException(string message, HttpStatusCode statusCode);
    public LegalRestrictionException(IResponse response, Exception innerException);
    protected LegalRestrictionException(SerializationInfo info, StreamingContext context);
    public virtual string get_Message();
}
[DebuggerDisplayAttribute("{DebuggerDisplay,nq}")]
public class Octokit.License : LicenseMetadata {
    [CompilerGeneratedAttribute]
private string <HtmlUrl>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Description>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Category>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Implementation>k__BackingField;
    [CompilerGeneratedAttribute]
private IReadOnlyList`1<string> <Required>k__BackingField;
    [CompilerGeneratedAttribute]
private IReadOnlyList`1<string> <Permitted>k__BackingField;
    [CompilerGeneratedAttribute]
private IReadOnlyList`1<string> <Forbidden>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Body>k__BackingField;
    public string HtmlUrl { get; private set; }
    public string Description { get; private set; }
    public string Category { get; private set; }
    public string Implementation { get; private set; }
    public IReadOnlyList`1<string> Required { get; private set; }
    public IReadOnlyList`1<string> Permitted { get; private set; }
    public IReadOnlyList`1<string> Forbidden { get; private set; }
    public string Body { get; private set; }
    internal string DebuggerDisplay { get; }
    public License(string key, string nodeId, string name, string spdxId, string url, string htmlUrl, bool featured, string description, string category, string implementation, string body, IEnumerable`1<string> required, IEnumerable`1<string> permitted, IEnumerable`1<string> forbidden);
    [CompilerGeneratedAttribute]
public string get_HtmlUrl();
    [CompilerGeneratedAttribute]
private void set_HtmlUrl(string value);
    [CompilerGeneratedAttribute]
public string get_Description();
    [CompilerGeneratedAttribute]
private void set_Description(string value);
    [CompilerGeneratedAttribute]
public string get_Category();
    [CompilerGeneratedAttribute]
private void set_Category(string value);
    [CompilerGeneratedAttribute]
public string get_Implementation();
    [CompilerGeneratedAttribute]
private void set_Implementation(string value);
    [CompilerGeneratedAttribute]
public IReadOnlyList`1<string> get_Required();
    [CompilerGeneratedAttribute]
private void set_Required(IReadOnlyList`1<string> value);
    [CompilerGeneratedAttribute]
public IReadOnlyList`1<string> get_Permitted();
    [CompilerGeneratedAttribute]
private void set_Permitted(IReadOnlyList`1<string> value);
    [CompilerGeneratedAttribute]
public IReadOnlyList`1<string> get_Forbidden();
    [CompilerGeneratedAttribute]
private void set_Forbidden(IReadOnlyList`1<string> value);
    [CompilerGeneratedAttribute]
public string get_Body();
    [CompilerGeneratedAttribute]
private void set_Body(string value);
    internal virtual string get_DebuggerDisplay();
}
[DebuggerDisplayAttribute("{DebuggerDisplay,nq}")]
public class Octokit.LicenseInfo : object {
    [CompilerGeneratedAttribute]
private int <Seats>k__BackingField;
    [CompilerGeneratedAttribute]
private int <SeatsUsed>k__BackingField;
    [CompilerGeneratedAttribute]
private int <SeatsAvailable>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Kind>k__BackingField;
    [CompilerGeneratedAttribute]
private int <DaysUntilExpiration>k__BackingField;
    [CompilerGeneratedAttribute]
private DateTimeOffset <ExpireAt>k__BackingField;
    public int Seats { get; private set; }
    public int SeatsUsed { get; private set; }
    public int SeatsAvailable { get; private set; }
    public string Kind { get; private set; }
    public int DaysUntilExpiration { get; private set; }
    public DateTimeOffset ExpireAt { get; private set; }
    internal string DebuggerDisplay { get; }
    public LicenseInfo(int seats, int seatsUsed, int seatsAvailable, string kind, int daysUntilExpiration, DateTimeOffset expireAt);
    [CompilerGeneratedAttribute]
public int get_Seats();
    [CompilerGeneratedAttribute]
private void set_Seats(int value);
    [CompilerGeneratedAttribute]
public int get_SeatsUsed();
    [CompilerGeneratedAttribute]
private void set_SeatsUsed(int value);
    [CompilerGeneratedAttribute]
public int get_SeatsAvailable();
    [CompilerGeneratedAttribute]
private void set_SeatsAvailable(int value);
    [CompilerGeneratedAttribute]
public string get_Kind();
    [CompilerGeneratedAttribute]
private void set_Kind(string value);
    [CompilerGeneratedAttribute]
public int get_DaysUntilExpiration();
    [CompilerGeneratedAttribute]
private void set_DaysUntilExpiration(int value);
    [CompilerGeneratedAttribute]
public DateTimeOffset get_ExpireAt();
    [CompilerGeneratedAttribute]
private void set_ExpireAt(DateTimeOffset value);
    internal string get_DebuggerDisplay();
}
[DebuggerDisplayAttribute("{DebuggerDisplay,nq}")]
public class Octokit.LicenseMetadata : object {
    [CompilerGeneratedAttribute]
private string <Key>k__BackingField;
    [CompilerGeneratedAttribute]
private string <NodeId>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    [CompilerGeneratedAttribute]
private string <SpdxId>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Url>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <Featured>k__BackingField;
    public string Key { get; protected set; }
    public string NodeId { get; protected set; }
    public string Name { get; protected set; }
    public string SpdxId { get; protected set; }
    public string Url { get; protected set; }
    public bool Featured { get; protected set; }
    internal string DebuggerDisplay { get; }
    public LicenseMetadata(string key, string nodeId, string name, string spdxId, string url, bool featured);
    [CompilerGeneratedAttribute]
public string get_Key();
    [CompilerGeneratedAttribute]
protected void set_Key(string value);
    [CompilerGeneratedAttribute]
public string get_NodeId();
    [CompilerGeneratedAttribute]
protected void set_NodeId(string value);
    [CompilerGeneratedAttribute]
public string get_Name();
    [CompilerGeneratedAttribute]
protected void set_Name(string value);
    [CompilerGeneratedAttribute]
public string get_SpdxId();
    [CompilerGeneratedAttribute]
protected void set_SpdxId(string value);
    [CompilerGeneratedAttribute]
public string get_Url();
    [CompilerGeneratedAttribute]
protected void set_Url(string value);
    [CompilerGeneratedAttribute]
public bool get_Featured();
    [CompilerGeneratedAttribute]
protected void set_Featured(bool value);
    internal virtual string get_DebuggerDisplay();
}
public class Octokit.LicensesClient : ApiClient {
    public LicensesClient(IApiConnection apiConnection);
    [ManualRouteAttribute("GET", "/licenses")]
public sealed virtual Task`1<IReadOnlyList`1<LicenseMetadata>> GetAllLicenses();
    [ManualRouteAttribute("GET", "/licenses")]
public sealed virtual Task`1<IReadOnlyList`1<LicenseMetadata>> GetAllLicenses(ApiOptions options);
    [ManualRouteAttribute("GET", "/licenses/{key}")]
public sealed virtual Task`1<License> GetLicense(string key);
}
[DebuggerDisplayAttribute("{DebuggerDisplay,nq}")]
public class Octokit.ListArtifactsRequest : RequestParameters {
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    [CompilerGeneratedAttribute]
private int <PerPage>k__BackingField;
    [CompilerGeneratedAttribute]
private int <Page>k__BackingField;
    public string Name { get; public set; }
    [ParameterAttribute]
public int PerPage { get; public set; }
    [ParameterAttribute]
public int Page { get; public set; }
    internal string DebuggerDisplay { get; }
    [CompilerGeneratedAttribute]
public string get_Name();
    [CompilerGeneratedAttribute]
public void set_Name(string value);
    [CompilerGeneratedAttribute]
public int get_PerPage();
    [CompilerGeneratedAttribute]
public void set_PerPage(int value);
    [CompilerGeneratedAttribute]
public int get_Page();
    [CompilerGeneratedAttribute]
public void set_Page(int value);
    internal string get_DebuggerDisplay();
}
[DebuggerDisplayAttribute("{DebuggerDisplay,nq}")]
public class Octokit.ListArtifactsResponse : object {
    [CompilerGeneratedAttribute]
private int <TotalCount>k__BackingField;
    [CompilerGeneratedAttribute]
private IReadOnlyList`1<Artifact> <Artifacts>k__BackingField;
    public int TotalCount { get; private set; }
    public IReadOnlyList`1<Artifact> Artifacts { get; private set; }
    internal string DebuggerDisplay { get; }
    public ListArtifactsResponse(int totalCount, IReadOnlyList`1<Artifact> artifacts);
    [CompilerGeneratedAttribute]
public int get_TotalCount();
    [CompilerGeneratedAttribute]
private void set_TotalCount(int value);
    [CompilerGeneratedAttribute]
public IReadOnlyList`1<Artifact> get_Artifacts();
    [CompilerGeneratedAttribute]
private void set_Artifacts(IReadOnlyList`1<Artifact> value);
    internal string get_DebuggerDisplay();
}
public enum Octokit.LockReason : Enum {
    public int value__;
    [ParameterAttribute]
public static LockReason OffTopic;
    [ParameterAttribute]
public static LockReason Resolved;
    [ParameterAttribute]
public static LockReason Spam;
    [ParameterAttribute]
public static LockReason TooHeated;
}
public class Octokit.LockUnlockClient : ApiClient {
    public LockUnlockClient(IApiConnection apiConnection);
    [ManualRouteAttribute("PUT", "/repos/{owner}/{repo}/issues/{issue_number}/lock")]
public sealed virtual Task Lock(string owner, string name, int issueNumber, Nullable`1<LockReason> lockReason);
    [ManualRouteAttribute("PUT", "/repositories/{id}/issues/{number}/lock")]
public sealed virtual Task Lock(long repositoryId, int issueNumber, Nullable`1<LockReason> lockReason);
    [ManualRouteAttribute("DELETE", "/repos/{owner}/{repo}/issues/{issue_number}/lock")]
public sealed virtual Task Unlock(string owner, string name, int issueNumber);
    [ManualRouteAttribute("DELETE", "/repositories/{id}/issues/{number}/lock")]
public sealed virtual Task Unlock(long repositoryId, int issueNumber);
}
public class Octokit.LoginAttemptsExceededException : ForbiddenException {
    public string Message { get; }
    public LoginAttemptsExceededException(IResponse response);
    public LoginAttemptsExceededException(IResponse response, Exception innerException);
    protected LoginAttemptsExceededException(SerializationInfo info, StreamingContext context);
    public virtual string get_Message();
}
[DebuggerDisplayAttribute("{DebuggerDisplay,nq}")]
public class Octokit.Machine : object {
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    [CompilerGeneratedAttribute]
private string <DisplayName>k__BackingField;
    [CompilerGeneratedAttribute]
private string <OperatingSystem>k__BackingField;
    [CompilerGeneratedAttribute]
private long <StorageInBytes>k__BackingField;
    [CompilerGeneratedAttribute]
private long <MemoryInBytes>k__BackingField;
    [CompilerGeneratedAttribute]
private long <CpuCount>k__BackingField;
    public string Name { get; private set; }
    public string DisplayName { get; private set; }
    public string OperatingSystem { get; private set; }
    public long StorageInBytes { get; private set; }
    public long MemoryInBytes { get; private set; }
    public long CpuCount { get; private set; }
    internal string DebuggerDisplay { get; }
    public Machine(string name, string displayName, string operatingSystem, long storageInBytes, long memoryInBytes, long cpuCount);
    [CompilerGeneratedAttribute]
public string get_Name();
    [CompilerGeneratedAttribute]
private void set_Name(string value);
    [CompilerGeneratedAttribute]
public string get_DisplayName();
    [CompilerGeneratedAttribute]
private void set_DisplayName(string value);
    [CompilerGeneratedAttribute]
public string get_OperatingSystem();
    [CompilerGeneratedAttribute]
private void set_OperatingSystem(string value);
    [CompilerGeneratedAttribute]
public long get_StorageInBytes();
    [CompilerGeneratedAttribute]
private void set_StorageInBytes(long value);
    [CompilerGeneratedAttribute]
public long get_MemoryInBytes();
    [CompilerGeneratedAttribute]
private void set_MemoryInBytes(long value);
    [CompilerGeneratedAttribute]
public long get_CpuCount();
    [CompilerGeneratedAttribute]
private void set_CpuCount(long value);
    internal string get_DebuggerDisplay();
}
[DebuggerDisplayAttribute("{DebuggerDisplay,nq}")]
public class Octokit.MaintenanceModeActiveProcesses : object {
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    [CompilerGeneratedAttribute]
private int <Number>k__BackingField;
    public string Name { get; private set; }
    public int Number { get; private set; }
    internal string DebuggerDisplay { get; }
    public MaintenanceModeActiveProcesses(string name, int number);
    [CompilerGeneratedAttribute]
public string get_Name();
    [CompilerGeneratedAttribute]
private void set_Name(string value);
    [CompilerGeneratedAttribute]
public int get_Number();
    [CompilerGeneratedAttribute]
private void set_Number(int value);
    public virtual string ToString();
    internal string get_DebuggerDisplay();
}
[DebuggerDisplayAttribute("{DebuggerDisplay,nq}")]
public class Octokit.MaintenanceModeResponse : object {
    [CompilerGeneratedAttribute]
private StringEnum`1<MaintenanceModeStatus> <Status>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ScheduledTime>k__BackingField;
    [CompilerGeneratedAttribute]
private IReadOnlyList`1<MaintenanceModeActiveProcesses> <ActiveProcesses>k__BackingField;
    public StringEnum`1<MaintenanceModeStatus> Status { get; private set; }
    public string ScheduledTime { get; private set; }
    [ParameterAttribute]
public IReadOnlyList`1<MaintenanceModeActiveProcesses> ActiveProcesses { get; private set; }
    internal string DebuggerDisplay { get; }
    public MaintenanceModeResponse(MaintenanceModeStatus status, string scheduledTime, IReadOnlyList`1<MaintenanceModeActiveProcesses> activeProcesses);
    [CompilerGeneratedAttribute]
public StringEnum`1<MaintenanceModeStatus> get_Status();
    [CompilerGeneratedAttribute]
private void set_Status(StringEnum`1<MaintenanceModeStatus> value);
    [CompilerGeneratedAttribute]
public string get_ScheduledTime();
    [CompilerGeneratedAttribute]
private void set_ScheduledTime(string value);
    [CompilerGeneratedAttribute]
public IReadOnlyList`1<MaintenanceModeActiveProcesses> get_ActiveProcesses();
    [CompilerGeneratedAttribute]
private void set_ActiveProcesses(IReadOnlyList`1<MaintenanceModeActiveProcesses> value);
    internal string get_DebuggerDisplay();
}
public enum Octokit.MaintenanceModeStatus : Enum {
    public int value__;
    [ParameterAttribute]
public static MaintenanceModeStatus Off;
    [ParameterAttribute]
public static MaintenanceModeStatus On;
    [ParameterAttribute]
public static MaintenanceModeStatus Scheduled;
}
public enum Octokit.MakeLatestQualifier : Enum {
    public int value__;
    [ParameterAttribute]
public static MakeLatestQualifier True;
    [ParameterAttribute]
public static MakeLatestQualifier False;
    [ParameterAttribute]
public static MakeLatestQualifier Legacy;
}
[AttributeUsageAttribute("64")]
public class Octokit.ManualRouteAttribute : Attribute {
    [CompilerGeneratedAttribute]
private string <Verb>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Path>k__BackingField;
    public string Verb { get; private set; }
    public string Path { get; private set; }
    public ManualRouteAttribute(string verb, string path);
    [CompilerGeneratedAttribute]
public string get_Verb();
    [CompilerGeneratedAttribute]
private void set_Verb(string value);
    [CompilerGeneratedAttribute]
public string get_Path();
    [CompilerGeneratedAttribute]
private void set_Path(string value);
}
[DebuggerDisplayAttribute("{DebuggerDisplay,nq}")]
public class Octokit.MarkAsReadRequest : RequestParameters {
    [CompilerGeneratedAttribute]
private Nullable`1<DateTimeOffset> <LastReadAt>k__BackingField;
    public Nullable`1<DateTimeOffset> LastReadAt { get; public set; }
    internal string DebuggerDisplay { get; }
    [CompilerGeneratedAttribute]
public Nullable`1<DateTimeOffset> get_LastReadAt();
    [CompilerGeneratedAttribute]
public void set_LastReadAt(Nullable`1<DateTimeOffset> value);
    internal string get_DebuggerDisplay();
}
public class Octokit.MarkdownClient : ApiClient {
    public MarkdownClient(IApiConnection apiConnection);
    [ManualRouteAttribute("POST", "/markdown/raw")]
public sealed virtual Task`1<string> RenderRawMarkdown(string markdown);
    [ManualRouteAttribute("POST", "/markdown")]
public sealed virtual Task`1<string> RenderArbitraryMarkdown(NewArbitraryMarkdown markdown);
}
public enum Octokit.MembershipRole : Enum {
    public int value__;
    [ParameterAttribute]
public static MembershipRole Admin;
    [ParameterAttribute]
public static MembershipRole Member;
}
public enum Octokit.MembershipState : Enum {
    public int value__;
    [ParameterAttribute]
public static MembershipState Pending;
    [ParameterAttribute]
public static MembershipState Active;
}
[DebuggerDisplayAttribute("{DebuggerDisplay,nq}")]
public class Octokit.Merge : GitReference {
    [CompilerGeneratedAttribute]
private Author <Author>k__BackingField;
    [CompilerGeneratedAttribute]
private Author <Committer>k__BackingField;
    [CompilerGeneratedAttribute]
private Commit <Commit>k__BackingField;
    [CompilerGeneratedAttribute]
private IReadOnlyList`1<GitReference> <Parents>k__BackingField;
    [CompilerGeneratedAttribute]
private string <CommentsUrl>k__BackingField;
    [CompilerGeneratedAttribute]
private int <CommentCount>k__BackingField;
    [CompilerGeneratedAttribute]
private string <HtmlUrl>k__BackingField;
    public Author Author { get; private set; }
    public Author Committer { get; private set; }
    public Commit Commit { get; private set; }
    public IReadOnlyList`1<GitReference> Parents { get; private set; }
    public string CommentsUrl { get; private set; }
    public int CommentCount { get; private set; }
    public string HtmlUrl { get; private set; }
    public Merge(string nodeId, string url, string label, string ref, string sha, User user, Repository repository, Author author, Author committer, Commit commit, IEnumerable`1<GitReference> parents, string commentsUrl, int commentCount, string htmlUrl);
    [CompilerGeneratedAttribute]
public Author get_Author();
    [CompilerGeneratedAttribute]
private void set_Author(Author value);
    [CompilerGeneratedAttribute]
public Author get_Committer();
    [CompilerGeneratedAttribute]
private void set_Committer(Author value);
    [CompilerGeneratedAttribute]
public Commit get_Commit();
    [CompilerGeneratedAttribute]
private void set_Commit(Commit value);
    [CompilerGeneratedAttribute]
public IReadOnlyList`1<GitReference> get_Parents();
    [CompilerGeneratedAttribute]
private void set_Parents(IReadOnlyList`1<GitReference> value);
    [CompilerGeneratedAttribute]
public string get_CommentsUrl();
    [CompilerGeneratedAttribute]
private void set_CommentsUrl(string value);
    [CompilerGeneratedAttribute]
public int get_CommentCount();
    [CompilerGeneratedAttribute]
private void set_CommentCount(int value);
    [CompilerGeneratedAttribute]
public string get_HtmlUrl();
    [CompilerGeneratedAttribute]
private void set_HtmlUrl(string value);
}
public enum Octokit.MergeableState : Enum {
    public int value__;
    [ParameterAttribute]
public static MergeableState Dirty;
    [ParameterAttribute]
public static MergeableState Unknown;
    [ParameterAttribute]
public static MergeableState Blocked;
    [ParameterAttribute]
public static MergeableState Behind;
    [ParameterAttribute]
public static MergeableState Unstable;
    [ParameterAttribute]
public static MergeableState HasHooks;
    [ParameterAttribute]
public static MergeableState Clean;
    [ParameterAttribute]
public static MergeableState Draft;
}
[DebuggerDisplayAttribute("{DebuggerDisplay,nq}")]
public class Octokit.MergePullRequest : object {
    [CompilerGeneratedAttribute]
private string <CommitMessage>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Sha>k__BackingField;
    [CompilerGeneratedAttribute]
private string <CommitTitle>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<PullRequestMergeMethod> <MergeMethod>k__BackingField;
    public string CommitMessage { get; public set; }
    public string Sha { get; public set; }
    public string CommitTitle { get; public set; }
    public Nullable`1<PullRequestMergeMethod> MergeMethod { get; public set; }
    internal string DebuggerDisplay { get; }
    [CompilerGeneratedAttribute]
public string get_CommitMessage();
    [CompilerGeneratedAttribute]
public void set_CommitMessage(string value);
    [CompilerGeneratedAttribute]
public string get_Sha();
    [CompilerGeneratedAttribute]
public void set_Sha(string value);
    [CompilerGeneratedAttribute]
public string get_CommitTitle();
    [CompilerGeneratedAttribute]
public void set_CommitTitle(string value);
    [CompilerGeneratedAttribute]
public Nullable`1<PullRequestMergeMethod> get_MergeMethod();
    [CompilerGeneratedAttribute]
public void set_MergeMethod(Nullable`1<PullRequestMergeMethod> value);
    internal string get_DebuggerDisplay();
}
public class Octokit.MergingClient : ApiClient {
    public MergingClient(IApiConnection apiConnection);
    [ManualRouteAttribute("POST", "/repos/{owner}/{repo}/merges")]
public sealed virtual Task`1<Merge> Create(string owner, string name, NewMerge merge);
    [ManualRouteAttribute("POST", "/repositories/{id}/merges")]
public sealed virtual Task`1<Merge> Create(long repositoryId, NewMerge merge);
}
[DebuggerDisplayAttribute("{DebuggerDisplay,nq}")]
public class Octokit.Meta : object {
    [CompilerGeneratedAttribute]
private bool <VerifiablePasswordAuthentication>k__BackingField;
    [CompilerGeneratedAttribute]
private string <GitHubServicesSha>k__BackingField;
    [CompilerGeneratedAttribute]
private IReadOnlyList`1<string> <Hooks>k__BackingField;
    [CompilerGeneratedAttribute]
private IReadOnlyList`1<string> <Web>k__BackingField;
    [CompilerGeneratedAttribute]
private IReadOnlyList`1<string> <Api>k__BackingField;
    [CompilerGeneratedAttribute]
private IReadOnlyList`1<string> <Git>k__BackingField;
    [CompilerGeneratedAttribute]
private IReadOnlyList`1<string> <Packages>k__BackingField;
    [CompilerGeneratedAttribute]
private IReadOnlyList`1<string> <Pages>k__BackingField;
    [CompilerGeneratedAttribute]
private IReadOnlyList`1<string> <Importer>k__BackingField;
    [CompilerGeneratedAttribute]
private IReadOnlyList`1<string> <Actions>k__BackingField;
    [CompilerGeneratedAttribute]
private IReadOnlyList`1<string> <Dependabot>k__BackingField;
    [CompilerGeneratedAttribute]
private string <InstalledVersion>k__BackingField;
    public bool VerifiablePasswordAuthentication { get; private set; }
    [ParameterAttribute]
[ObsoleteAttribute("No longer returned so always null")]
public string GitHubServicesSha { get; private set; }
    public IReadOnlyList`1<string> Hooks { get; private set; }
    public IReadOnlyList`1<string> Web { get; private set; }
    public IReadOnlyList`1<string> Api { get; private set; }
    public IReadOnlyList`1<string> Git { get; private set; }
    public IReadOnlyList`1<string> Packages { get; private set; }
    public IReadOnlyList`1<string> Pages { get; private set; }
    public IReadOnlyList`1<string> Importer { get; private set; }
    public IReadOnlyList`1<string> Actions { get; private set; }
    public IReadOnlyList`1<string> Dependabot { get; private set; }
    public string InstalledVersion { get; private set; }
    internal string DebuggerDisplay { get; }
    public Meta(bool verifiablePasswordAuthentication, string gitHubServicesSha, IReadOnlyList`1<string> hooks, IReadOnlyList`1<string> web, IReadOnlyList`1<string> api, IReadOnlyList`1<string> git, IReadOnlyList`1<string> packages, IReadOnlyList`1<string> pages, IReadOnlyList`1<string> importer, IReadOnlyList`1<string> actions, IReadOnlyList`1<string> dependabot, string installedVersion);
    [CompilerGeneratedAttribute]
public bool get_VerifiablePasswordAuthentication();
    [CompilerGeneratedAttribute]
private void set_VerifiablePasswordAuthentication(bool value);
    [CompilerGeneratedAttribute]
public string get_GitHubServicesSha();
    [CompilerGeneratedAttribute]
private void set_GitHubServicesSha(string value);
    [CompilerGeneratedAttribute]
public IReadOnlyList`1<string> get_Hooks();
    [CompilerGeneratedAttribute]
private void set_Hooks(IReadOnlyList`1<string> value);
    [CompilerGeneratedAttribute]
public IReadOnlyList`1<string> get_Web();
    [CompilerGeneratedAttribute]
private void set_Web(IReadOnlyList`1<string> value);
    [CompilerGeneratedAttribute]
public IReadOnlyList`1<string> get_Api();
    [CompilerGeneratedAttribute]
private void set_Api(IReadOnlyList`1<string> value);
    [CompilerGeneratedAttribute]
public IReadOnlyList`1<string> get_Git();
    [CompilerGeneratedAttribute]
private void set_Git(IReadOnlyList`1<string> value);
    [CompilerGeneratedAttribute]
public IReadOnlyList`1<string> get_Packages();
    [CompilerGeneratedAttribute]
private void set_Packages(IReadOnlyList`1<string> value);
    [CompilerGeneratedAttribute]
public IReadOnlyList`1<string> get_Pages();
    [CompilerGeneratedAttribute]
private void set_Pages(IReadOnlyList`1<string> value);
    [CompilerGeneratedAttribute]
public IReadOnlyList`1<string> get_Importer();
    [CompilerGeneratedAttribute]
private void set_Importer(IReadOnlyList`1<string> value);
    [CompilerGeneratedAttribute]
public IReadOnlyList`1<string> get_Actions();
    [CompilerGeneratedAttribute]
private void set_Actions(IReadOnlyList`1<string> value);
    [CompilerGeneratedAttribute]
public IReadOnlyList`1<string> get_Dependabot();
    [CompilerGeneratedAttribute]
private void set_Dependabot(IReadOnlyList`1<string> value);
    [CompilerGeneratedAttribute]
public string get_InstalledVersion();
    [CompilerGeneratedAttribute]
private void set_InstalledVersion(string value);
    internal string get_DebuggerDisplay();
}
public class Octokit.MetaClient : ApiClient {
    public MetaClient(IApiConnection apiConnection);
    [ManualRouteAttribute("GET", "/meta")]
public sealed virtual Task`1<Meta> GetMetadata();
}
[DebuggerDisplayAttribute("{DebuggerDisplay,nq}")]
public class Octokit.Migration : object {
    [CompilerGeneratedAttribute]
private long <Id>k__BackingField;
    [CompilerGeneratedAttribute]
private string <NodeId>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Guid>k__BackingField;
    [CompilerGeneratedAttribute]
private StringEnum`1<MigrationState> <State>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <LockRepositories>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <ExcludeAttachments>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Url>k__BackingField;
    [CompilerGeneratedAttribute]
private string <CreatedAt>k__BackingField;
    [CompilerGeneratedAttribute]
private string <UpdatedAt>k__BackingField;
    [CompilerGeneratedAttribute]
private IReadOnlyList`1<Repository> <Repositories>k__BackingField;
    public long Id { get; private set; }
    public string NodeId { get; private set; }
    public string Guid { get; private set; }
    public StringEnum`1<MigrationState> State { get; private set; }
    public bool LockRepositories { get; private set; }
    public bool ExcludeAttachments { get; private set; }
    public string Url { get; private set; }
    public string CreatedAt { get; private set; }
    public string UpdatedAt { get; private set; }
    public IReadOnlyList`1<Repository> Repositories { get; private set; }
    internal string DebuggerDisplay { get; }
    public Migration(long id, string nodeId, string guid, MigrationState state, bool lockRepositories, bool excludeAttachments, string url, string createdAt, string updatedAt, IReadOnlyList`1<Repository> repositories);
    [CompilerGeneratedAttribute]
public long get_Id();
    [CompilerGeneratedAttribute]
private void set_Id(long value);
    [CompilerGeneratedAttribute]
public string get_NodeId();
    [CompilerGeneratedAttribute]
private void set_NodeId(string value);
    [CompilerGeneratedAttribute]
public string get_Guid();
    [CompilerGeneratedAttribute]
private void set_Guid(string value);
    [CompilerGeneratedAttribute]
public StringEnum`1<MigrationState> get_State();
    [CompilerGeneratedAttribute]
private void set_State(StringEnum`1<MigrationState> value);
    [CompilerGeneratedAttribute]
public bool get_LockRepositories();
    [CompilerGeneratedAttribute]
private void set_LockRepositories(bool value);
    [CompilerGeneratedAttribute]
public bool get_ExcludeAttachments();
    [CompilerGeneratedAttribute]
private void set_ExcludeAttachments(bool value);
    [CompilerGeneratedAttribute]
public string get_Url();
    [CompilerGeneratedAttribute]
private void set_Url(string value);
    [CompilerGeneratedAttribute]
public string get_CreatedAt();
    [CompilerGeneratedAttribute]
private void set_CreatedAt(string value);
    [CompilerGeneratedAttribute]
public string get_UpdatedAt();
    [CompilerGeneratedAttribute]
private void set_UpdatedAt(string value);
    [CompilerGeneratedAttribute]
public IReadOnlyList`1<Repository> get_Repositories();
    [CompilerGeneratedAttribute]
private void set_Repositories(IReadOnlyList`1<Repository> value);
    internal string get_DebuggerDisplay();
}
public class Octokit.MigrationClient : ApiClient {
    [CompilerGeneratedAttribute]
private IMigrationsClient <Migrations>k__BackingField;
    public IMigrationsClient Migrations { get; private set; }
    public MigrationClient(IApiConnection apiConnection);
    [CompilerGeneratedAttribute]
public sealed virtual IMigrationsClient get_Migrations();
    [CompilerGeneratedAttribute]
private void set_Migrations(IMigrationsClient value);
}
public class Octokit.MigrationsClient : ApiClient {
    public MigrationsClient(IApiConnection apiConnection);
    [AsyncStateMachineAttribute("Octokit.MigrationsClient/<Start>d__1")]
[ManualRouteAttribute("POST", "/orgs/{org}/migrations")]
public sealed virtual Task`1<Migration> Start(string org, StartMigrationRequest migration);
    [AsyncStateMachineAttribute("Octokit.MigrationsClient/<GetAll>d__2")]
[ManualRouteAttribute("GET", "/orgs/{org}/migrations")]
public sealed virtual Task`1<IReadOnlyList`1<Migration>> GetAll(string org);
    [AsyncStateMachineAttribute("Octokit.MigrationsClient/<GetAll>d__3")]
[ManualRouteAttribute("GET", "/orgs/{org}/migrations")]
public sealed virtual Task`1<IReadOnlyList`1<Migration>> GetAll(string org, ApiOptions options);
    [AsyncStateMachineAttribute("Octokit.MigrationsClient/<Get>d__4")]
[ManualRouteAttribute("GET", "/orgs/{org}/migrations/{id}")]
public sealed virtual Task`1<Migration> Get(string org, long id);
    [AsyncStateMachineAttribute("Octokit.MigrationsClient/<GetArchive>d__5")]
[ManualRouteAttribute("GET", "/orgs/{org}/migrations/{id}/archive")]
public sealed virtual Task`1<Byte[]> GetArchive(string org, long id);
    [ManualRouteAttribute("DELETE", "/orgs/{org}/migrations/{id}/archive")]
public sealed virtual Task DeleteArchive(string org, long id);
    [ManualRouteAttribute("GET", "/orgs/{org}/migrations/{id}/repos/{name}/lock")]
public sealed virtual Task UnlockRepository(string org, long id, string repo);
}
[DebuggerDisplayAttribute("{DebuggerDisplay,nq}")]
public class Octokit.Milestone : object {
    [CompilerGeneratedAttribute]
private string <Url>k__BackingField;
    [CompilerGeneratedAttribute]
private string <HtmlUrl>k__BackingField;
    [CompilerGeneratedAttribute]
private long <Id>k__BackingField;
    [CompilerGeneratedAttribute]
private int <Number>k__BackingField;
    [CompilerGeneratedAttribute]
private string <NodeId>k__BackingField;
    [CompilerGeneratedAttribute]
private StringEnum`1<ItemState> <State>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Title>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Description>k__BackingField;
    [CompilerGeneratedAttribute]
private User <Creator>k__BackingField;
    [CompilerGeneratedAttribute]
private int <OpenIssues>k__BackingField;
    [CompilerGeneratedAttribute]
private int <ClosedIssues>k__BackingField;
    [CompilerGeneratedAttribute]
private DateTimeOffset <CreatedAt>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<DateTimeOffset> <DueOn>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<DateTimeOffset> <ClosedAt>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<DateTimeOffset> <UpdatedAt>k__BackingField;
    public string Url { get; private set; }
    public string HtmlUrl { get; private set; }
    public long Id { get; private set; }
    public int Number { get; private set; }
    public string NodeId { get; private set; }
    public StringEnum`1<ItemState> State { get; private set; }
    public string Title { get; private set; }
    public string Description { get; private set; }
    public User Creator { get; private set; }
    public int OpenIssues { get; private set; }
    public int ClosedIssues { get; private set; }
    public DateTimeOffset CreatedAt { get; private set; }
    public Nullable`1<DateTimeOffset> DueOn { get; private set; }
    public Nullable`1<DateTimeOffset> ClosedAt { get; private set; }
    public Nullable`1<DateTimeOffset> UpdatedAt { get; private set; }
    internal string DebuggerDisplay { get; }
    public Milestone(int number);
    public Milestone(string title);
    public Milestone(string url, string htmlUrl, long id, int number, string nodeId, ItemState state, string title, string description, User creator, int openIssues, int closedIssues, DateTimeOffset createdAt, Nullable`1<DateTimeOffset> dueOn, Nullable`1<DateTimeOffset> closedAt, Nullable`1<DateTimeOffset> updatedAt);
    [CompilerGeneratedAttribute]
public string get_Url();
    [CompilerGeneratedAttribute]
private void set_Url(string value);
    [CompilerGeneratedAttribute]
public string get_HtmlUrl();
    [CompilerGeneratedAttribute]
private void set_HtmlUrl(string value);
    [CompilerGeneratedAttribute]
public long get_Id();
    [CompilerGeneratedAttribute]
private void set_Id(long value);
    [CompilerGeneratedAttribute]
public int get_Number();
    [CompilerGeneratedAttribute]
private void set_Number(int value);
    [CompilerGeneratedAttribute]
public string get_NodeId();
    [CompilerGeneratedAttribute]
private void set_NodeId(string value);
    [CompilerGeneratedAttribute]
public StringEnum`1<ItemState> get_State();
    [CompilerGeneratedAttribute]
private void set_State(StringEnum`1<ItemState> value);
    [CompilerGeneratedAttribute]
public string get_Title();
    [CompilerGeneratedAttribute]
private void set_Title(string value);
    [CompilerGeneratedAttribute]
public string get_Description();
    [CompilerGeneratedAttribute]
private void set_Description(string value);
    [CompilerGeneratedAttribute]
public User get_Creator();
    [CompilerGeneratedAttribute]
private void set_Creator(User value);
    [CompilerGeneratedAttribute]
public int get_OpenIssues();
    [CompilerGeneratedAttribute]
private void set_OpenIssues(int value);
    [CompilerGeneratedAttribute]
public int get_ClosedIssues();
    [CompilerGeneratedAttribute]
private void set_ClosedIssues(int value);
    [CompilerGeneratedAttribute]
public DateTimeOffset get_CreatedAt();
    [CompilerGeneratedAttribute]
private void set_CreatedAt(DateTimeOffset value);
    [CompilerGeneratedAttribute]
public Nullable`1<DateTimeOffset> get_DueOn();
    [CompilerGeneratedAttribute]
private void set_DueOn(Nullable`1<DateTimeOffset> value);
    [CompilerGeneratedAttribute]
public Nullable`1<DateTimeOffset> get_ClosedAt();
    [CompilerGeneratedAttribute]
private void set_ClosedAt(Nullable`1<DateTimeOffset> value);
    [CompilerGeneratedAttribute]
public Nullable`1<DateTimeOffset> get_UpdatedAt();
    [CompilerGeneratedAttribute]
private void set_UpdatedAt(Nullable`1<DateTimeOffset> value);
    internal string get_DebuggerDisplay();
}
[DebuggerDisplayAttribute("{DebuggerDisplay,nq}")]
public class Octokit.MilestoneRequest : RequestParameters {
    [CompilerGeneratedAttribute]
private ItemStateFilter <State>k__BackingField;
    [CompilerGeneratedAttribute]
private MilestoneSort <SortProperty>k__BackingField;
    [CompilerGeneratedAttribute]
private SortDirection <SortDirection>k__BackingField;
    public ItemStateFilter State { get; public set; }
    [ParameterAttribute]
public MilestoneSort SortProperty { get; public set; }
    [ParameterAttribute]
public SortDirection SortDirection { get; public set; }
    internal string DebuggerDisplay { get; }
    [CompilerGeneratedAttribute]
public ItemStateFilter get_State();
    [CompilerGeneratedAttribute]
public void set_State(ItemStateFilter value);
    [CompilerGeneratedAttribute]
public MilestoneSort get_SortProperty();
    [CompilerGeneratedAttribute]
public void set_SortProperty(MilestoneSort value);
    [CompilerGeneratedAttribute]
public SortDirection get_SortDirection();
    [CompilerGeneratedAttribute]
public void set_SortDirection(SortDirection value);
    internal string get_DebuggerDisplay();
}
public class Octokit.MilestonesClient : ApiClient {
    public MilestonesClient(IApiConnection apiConnection);
    [ManualRouteAttribute("GET", "/repos/{owner}/{repo}/milestones/{milestone_number}")]
public sealed virtual Task`1<Milestone> Get(string owner, string name, int milestoneNumber);
    [ManualRouteAttribute("GET", "/repositories/{id}/milestones/{milestone_number}")]
public sealed virtual Task`1<Milestone> Get(long repositoryId, int milestoneNumber);
    [ManualRouteAttribute("GET", "/repos/{owner}/{repo}/milestones")]
public sealed virtual Task`1<IReadOnlyList`1<Milestone>> GetAllForRepository(string owner, string name);
    [ManualRouteAttribute("GET", "/repositories/{id}/milestones")]
public sealed virtual Task`1<IReadOnlyList`1<Milestone>> GetAllForRepository(long repositoryId);
    [ManualRouteAttribute("GET", "/repos/{owner}/{repo}/milestones")]
public sealed virtual Task`1<IReadOnlyList`1<Milestone>> GetAllForRepository(string owner, string name, ApiOptions options);
    [ManualRouteAttribute("GET", "/repositories/{id}/milestones")]
public sealed virtual Task`1<IReadOnlyList`1<Milestone>> GetAllForRepository(long repositoryId, ApiOptions options);
    [ManualRouteAttribute("GET", "/repos/{owner}/{repo}/milestones")]
public sealed virtual Task`1<IReadOnlyList`1<Milestone>> GetAllForRepository(string owner, string name, MilestoneRequest request);
    [ManualRouteAttribute("GET", "/repositories/{id}/milestones")]
public sealed virtual Task`1<IReadOnlyList`1<Milestone>> GetAllForRepository(long repositoryId, MilestoneRequest request);
    [ManualRouteAttribute("GET", "/repos/{owner}/{repo}/milestones")]
public sealed virtual Task`1<IReadOnlyList`1<Milestone>> GetAllForRepository(string owner, string name, MilestoneRequest request, ApiOptions options);
    [ManualRouteAttribute("GET", "/repositories/{id}/milestones")]
public sealed virtual Task`1<IReadOnlyList`1<Milestone>> GetAllForRepository(long repositoryId, MilestoneRequest request, ApiOptions options);
    [ManualRouteAttribute("POST", "/repos/{owner}/{repo}/milestones")]
public sealed virtual Task`1<Milestone> Create(string owner, string name, NewMilestone newMilestone);
    [ManualRouteAttribute("POST", "/repositories/{id}/milestones")]
public sealed virtual Task`1<Milestone> Create(long repositoryId, NewMilestone newMilestone);
    [ManualRouteAttribute("PATCH", "/repos/{owner}/{repo}/milestones/{milestone_number}")]
public sealed virtual Task`1<Milestone> Update(string owner, string name, int milestoneNumber, MilestoneUpdate milestoneUpdate);
    [ManualRouteAttribute("PATCH", "/repositories/{id}/milestones/{milestone_number}")]
public sealed virtual Task`1<Milestone> Update(long repositoryId, int milestoneNumber, MilestoneUpdate milestoneUpdate);
    [ManualRouteAttribute("DELETE", "/repos/{owner}/{repo}/milestones/{milestone_number}")]
public sealed virtual Task Delete(string owner, string name, int milestoneNumber);
    [ManualRouteAttribute("DELETE", "/repositories/{id}/milestones/{milestone_number}")]
public sealed virtual Task Delete(long repositoryId, int milestoneNumber);
}
public enum Octokit.MilestoneSort : Enum {
    public int value__;
    [ParameterAttribute]
public static MilestoneSort DueDate;
    [ParameterAttribute]
public static MilestoneSort Completeness;
}
[DebuggerDisplayAttribute("{DebuggerDisplay,nq}")]
public class Octokit.MilestoneUpdate : object {
    [CompilerGeneratedAttribute]
private string <Title>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<ItemState> <State>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Description>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<DateTimeOffset> <DueOn>k__BackingField;
    public string Title { get; public set; }
    public Nullable`1<ItemState> State { get; public set; }
    public string Description { get; public set; }
    public Nullable`1<DateTimeOffset> DueOn { get; public set; }
    internal string DebuggerDisplay { get; }
    [CompilerGeneratedAttribute]
public string get_Title();
    [CompilerGeneratedAttribute]
public void set_Title(string value);
    [CompilerGeneratedAttribute]
public Nullable`1<ItemState> get_State();
    [CompilerGeneratedAttribute]
public void set_State(Nullable`1<ItemState> value);
    [CompilerGeneratedAttribute]
public string get_Description();
    [CompilerGeneratedAttribute]
public void set_Description(string value);
    [CompilerGeneratedAttribute]
public Nullable`1<DateTimeOffset> get_DueOn();
    [CompilerGeneratedAttribute]
public void set_DueOn(Nullable`1<DateTimeOffset> value);
    internal string get_DebuggerDisplay();
}
[ObsoleteAttribute("Use individual clients available on the GitHubClient for these methods")]
public class Octokit.MiscellaneousClient : ApiClient {
    private IEmojisClient _emojisClient;
    private IMarkdownClient _markdownClient;
    private IGitIgnoreClient _gitIgnoreClient;
    private ILicensesClient _licensesClient;
    private IRateLimitClient _rateLimitClient;
    private IMetaClient _metaClient;
    public MiscellaneousClient(IApiConnection apiConnection);
    [AsyncStateMachineAttribute("Octokit.MiscellaneousClient/<GetAllEmojis>d__7")]
[ManualRouteAttribute("GET", "/emojis")]
public sealed virtual Task`1<IReadOnlyList`1<Emoji>> GetAllEmojis();
    [ManualRouteAttribute("POST", "/markdown/raw")]
[ObsoleteAttribute("This client is being deprecated and will be removed in the future. Use MarkdownClient.RenderRawMarkdown instead.")]
public sealed virtual Task`1<string> RenderRawMarkdown(string markdown);
    [ManualRouteAttribute("POST", "/markdown")]
[ObsoleteAttribute("This client is being deprecated and will be removed in the future. Use MarkdownClient.RenderArbitraryMarkdown instead.")]
public sealed virtual Task`1<string> RenderArbitraryMarkdown(NewArbitraryMarkdown markdown);
    [ManualRouteAttribute("GET", "/gitignore/templates")]
[ObsoleteAttribute("This client is being deprecated and will be removed in the future. Use GitIgnoreClient.GetAllGitIgnoreTemplates instead.")]
public sealed virtual Task`1<IReadOnlyList`1<string>> GetAllGitIgnoreTemplates();
    [ManualRouteAttribute("GET", "/gitignore/templates/{name}")]
[ObsoleteAttribute("This client is being deprecated and will be removed in the future. Use GitIgnoreClient.GetGitIgnoreTemplate instead.")]
public sealed virtual Task`1<GitIgnoreTemplate> GetGitIgnoreTemplate(string templateName);
    [ObsoleteAttribute("This client is being deprecated and will be removed in the future. Use LicensesClient.GetAllLicenses instead.")]
[ManualRouteAttribute("GET", "/licenses")]
public sealed virtual Task`1<IReadOnlyList`1<LicenseMetadata>> GetAllLicenses();
    [ManualRouteAttribute("GET", "/licenses")]
[ObsoleteAttribute("This client is being deprecated and will be removed in the future. Use LicensesClient.GetAllLicenses instead.")]
public sealed virtual Task`1<IReadOnlyList`1<LicenseMetadata>> GetAllLicenses(ApiOptions options);
    [ManualRouteAttribute("GET", "/licenses/{key}")]
[ObsoleteAttribute("This client is being deprecated and will be removed in the future. Use LicensesClient.GetLicense instead.")]
public sealed virtual Task`1<License> GetLicense(string key);
    [ManualRouteAttribute("GET", "/rate_limit")]
[ObsoleteAttribute("This client is being deprecated and will be removed in the future. Use RateLimitClient.GetRateLimits instead.")]
public sealed virtual Task`1<MiscellaneousRateLimit> GetRateLimits();
    [ManualRouteAttribute("GET", "/meta")]
[ObsoleteAttribute("This client is being deprecated and will be removed in the future. Use MetaClient.GetMetadata instead.")]
public sealed virtual Task`1<Meta> GetMetadata();
}
[DebuggerDisplayAttribute("{DebuggerDisplay,nq}")]
public class Octokit.MiscellaneousRateLimit : object {
    [CompilerGeneratedAttribute]
private ResourceRateLimit <Resources>k__BackingField;
    [CompilerGeneratedAttribute]
private RateLimit <Rate>k__BackingField;
    public ResourceRateLimit Resources { get; private set; }
    public RateLimit Rate { get; private set; }
    internal string DebuggerDisplay { get; }
    public MiscellaneousRateLimit(ResourceRateLimit resources, RateLimit rate);
    [CompilerGeneratedAttribute]
public ResourceRateLimit get_Resources();
    [CompilerGeneratedAttribute]
private void set_Resources(ResourceRateLimit value);
    [CompilerGeneratedAttribute]
public RateLimit get_Rate();
    [CompilerGeneratedAttribute]
private void set_Rate(RateLimit value);
    internal string get_DebuggerDisplay();
}
internal class Octokit.Models.Request.Enterprise.ApiOptionsExtended : ApiOptions {
    [CompilerGeneratedAttribute]
private bool <IsDone>k__BackingField;
    public bool IsDone { get; public set; }
    [CompilerGeneratedAttribute]
public bool get_IsDone();
    [CompilerGeneratedAttribute]
public void set_IsDone(bool value);
}
[DebuggerDisplayAttribute("{DebuggerDisplay,nq}")]
public class Octokit.Models.Request.Enterprise.AuditLogApiOptions : object {
    [CompilerGeneratedAttribute]
private string <StopWhenFound>k__BackingField;
    [CompilerGeneratedAttribute]
private int <PageSize>k__BackingField;
    public string StopWhenFound { get; public set; }
    public int PageSize { get; public set; }
    internal string DebuggerDisplay { get; }
    [CompilerGeneratedAttribute]
public string get_StopWhenFound();
    [CompilerGeneratedAttribute]
public void set_StopWhenFound(string value);
    [CompilerGeneratedAttribute]
public int get_PageSize();
    [CompilerGeneratedAttribute]
public void set_PageSize(int value);
    internal string get_DebuggerDisplay();
}
[DebuggerDisplayAttribute("{DebuggerDisplay,nq}")]
public class Octokit.Models.Request.Enterprise.AuditLogRequest : RequestParameters {
    [CompilerGeneratedAttribute]
private string <After>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Before>k__BackingField;
    [CompilerGeneratedAttribute]
private IncludeFilter <Filter>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Phrase>k__BackingField;
    [CompilerGeneratedAttribute]
private AuditLogSortDirection <SortDirection>k__BackingField;
    [ParameterAttribute]
public string After { get; public set; }
    [ParameterAttribute]
public string Before { get; public set; }
    [ParameterAttribute]
public IncludeFilter Filter { get; public set; }
    [ParameterAttribute]
public string Phrase { get; public set; }
    [ParameterAttribute]
public AuditLogSortDirection SortDirection { get; public set; }
    internal string DebuggerDisplay { get; }
    [CompilerGeneratedAttribute]
public string get_After();
    [CompilerGeneratedAttribute]
public void set_After(string value);
    [CompilerGeneratedAttribute]
public string get_Before();
    [CompilerGeneratedAttribute]
public void set_Before(string value);
    [CompilerGeneratedAttribute]
public IncludeFilter get_Filter();
    [CompilerGeneratedAttribute]
public void set_Filter(IncludeFilter value);
    [CompilerGeneratedAttribute]
public string get_Phrase();
    [CompilerGeneratedAttribute]
public void set_Phrase(string value);
    [CompilerGeneratedAttribute]
public AuditLogSortDirection get_SortDirection();
    [CompilerGeneratedAttribute]
public void set_SortDirection(AuditLogSortDirection value);
    internal string get_DebuggerDisplay();
}
public enum Octokit.Models.Request.Enterprise.AuditLogSortDirection : Enum {
    public int value__;
    [ParameterAttribute]
public static AuditLogSortDirection Ascending;
    [ParameterAttribute]
public static AuditLogSortDirection Descending;
}
public enum Octokit.Models.Request.Enterprise.IncludeFilter : Enum {
    public int value__;
    [ParameterAttribute]
public static IncludeFilter Web;
    [ParameterAttribute]
public static IncludeFilter Git;
    [ParameterAttribute]
public static IncludeFilter All;
}
[DebuggerDisplayAttribute("{DebuggerDisplay,nq}")]
public class Octokit.Models.Response.DeploymentEnvironment : object {
    [CompilerGeneratedAttribute]
private long <Id>k__BackingField;
    [CompilerGeneratedAttribute]
private string <NodeId>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Url>k__BackingField;
    [CompilerGeneratedAttribute]
private string <HtmlUrl>k__BackingField;
    [CompilerGeneratedAttribute]
private DateTimeOffset <CreatedAt>k__BackingField;
    [CompilerGeneratedAttribute]
private DateTimeOffset <UpdatedAt>k__BackingField;
    public long Id { get; private set; }
    public string NodeId { get; private set; }
    public string Name { get; private set; }
    public string Url { get; private set; }
    public string HtmlUrl { get; private set; }
    public DateTimeOffset CreatedAt { get; private set; }
    public DateTimeOffset UpdatedAt { get; private set; }
    internal string DebuggerDisplay { get; }
    public DeploymentEnvironment(long id, string nodeID, string name, string url, string htmlUrl, DateTimeOffset createdAt, DateTimeOffset updatedAt);
    [CompilerGeneratedAttribute]
public long get_Id();
    [CompilerGeneratedAttribute]
private void set_Id(long value);
    [CompilerGeneratedAttribute]
public string get_NodeId();
    [CompilerGeneratedAttribute]
private void set_NodeId(string value);
    [CompilerGeneratedAttribute]
public string get_Name();
    [CompilerGeneratedAttribute]
private void set_Name(string value);
    [CompilerGeneratedAttribute]
public string get_Url();
    [CompilerGeneratedAttribute]
private void set_Url(string value);
    [CompilerGeneratedAttribute]
public string get_HtmlUrl();
    [CompilerGeneratedAttribute]
private void set_HtmlUrl(string value);
    [CompilerGeneratedAttribute]
public DateTimeOffset get_CreatedAt();
    [CompilerGeneratedAttribute]
private void set_CreatedAt(DateTimeOffset value);
    [CompilerGeneratedAttribute]
public DateTimeOffset get_UpdatedAt();
    [CompilerGeneratedAttribute]
private void set_UpdatedAt(DateTimeOffset value);
    internal string get_DebuggerDisplay();
}
[DebuggerDisplayAttribute("{DebuggerDisplay,nq}")]
public class Octokit.Models.Response.DeploymentEnvironmentsResponse : object {
    [CompilerGeneratedAttribute]
private int <TotalCount>k__BackingField;
    [CompilerGeneratedAttribute]
private IReadOnlyList`1<DeploymentEnvironment> <Environments>k__BackingField;
    public int TotalCount { get; private set; }
    public IReadOnlyList`1<DeploymentEnvironment> Environments { get; private set; }
    internal string DebuggerDisplay { get; }
    public DeploymentEnvironmentsResponse(int totalCount, IReadOnlyList`1<DeploymentEnvironment> environments);
    [CompilerGeneratedAttribute]
public int get_TotalCount();
    [CompilerGeneratedAttribute]
private void set_TotalCount(int value);
    [CompilerGeneratedAttribute]
public IReadOnlyList`1<DeploymentEnvironment> get_Environments();
    [CompilerGeneratedAttribute]
private void set_Environments(IReadOnlyList`1<DeploymentEnvironment> value);
    internal string get_DebuggerDisplay();
}
[DebuggerDisplayAttribute("{DebuggerDisplay,nq}")]
public class Octokit.NewArbitraryMarkdown : object {
    private static string _markdown;
    private static string _gfm;
    [CompilerGeneratedAttribute]
private string <Text>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Mode>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Context>k__BackingField;
    public string Text { get; private set; }
    public string Mode { get; private set; }
    public string Context { get; private set; }
    internal string DebuggerDisplay { get; }
    public NewArbitraryMarkdown(string text, string mode, string context);
    public NewArbitraryMarkdown(string text);
    public NewArbitraryMarkdown(string text, string mode);
    [CompilerGeneratedAttribute]
public string get_Text();
    [CompilerGeneratedAttribute]
private void set_Text(string value);
    [CompilerGeneratedAttribute]
public string get_Mode();
    [CompilerGeneratedAttribute]
private void set_Mode(string value);
    [CompilerGeneratedAttribute]
public string get_Context();
    [CompilerGeneratedAttribute]
private void set_Context(string value);
    private static string GetMode(string mode);
    internal string get_DebuggerDisplay();
}
[DebuggerDisplayAttribute("{DebuggerDisplay,nq}")]
public class Octokit.NewAuthorization : object {
    [CompilerGeneratedAttribute]
private IEnumerable`1<string> <Scopes>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Fingerprint>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Note>k__BackingField;
    [CompilerGeneratedAttribute]
private string <NoteUrl>k__BackingField;
    public IEnumerable`1<string> Scopes { get; public set; }
    public string Fingerprint { get; public set; }
    public string Note { get; public set; }
    public string NoteUrl { get; public set; }
    internal string DebuggerDisplay { get; }
    public NewAuthorization(string note, IEnumerable`1<string> scopes);
    public NewAuthorization(string note, IEnumerable`1<string> scopes, string fingerprint);
    [CompilerGeneratedAttribute]
public IEnumerable`1<string> get_Scopes();
    [CompilerGeneratedAttribute]
public void set_Scopes(IEnumerable`1<string> value);
    [CompilerGeneratedAttribute]
public string get_Fingerprint();
    [CompilerGeneratedAttribute]
public void set_Fingerprint(string value);
    [CompilerGeneratedAttribute]
public string get_Note();
    [CompilerGeneratedAttribute]
public void set_Note(string value);
    [CompilerGeneratedAttribute]
public string get_NoteUrl();
    [CompilerGeneratedAttribute]
public void set_NoteUrl(string value);
    internal string get_DebuggerDisplay();
}
[DebuggerDisplayAttribute("{DebuggerDisplay,nq}")]
public class Octokit.NewBlob : object {
    [CompilerGeneratedAttribute]
private string <Content>k__BackingField;
    [CompilerGeneratedAttribute]
private EncodingType <Encoding>k__BackingField;
    public string Content { get; public set; }
    public EncodingType Encoding { get; public set; }
    internal string DebuggerDisplay { get; }
    [CompilerGeneratedAttribute]
public string get_Content();
    [CompilerGeneratedAttribute]
public void set_Content(string value);
    [CompilerGeneratedAttribute]
public EncodingType get_Encoding();
    [CompilerGeneratedAttribute]
public void set_Encoding(EncodingType value);
    internal string get_DebuggerDisplay();
}
[DebuggerDisplayAttribute("{DebuggerDisplay,nq}")]
public class Octokit.NewCheckRun : object {
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    [CompilerGeneratedAttribute]
private string <HeadSha>k__BackingField;
    [CompilerGeneratedAttribute]
private string <DetailsUrl>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ExternalId>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<StringEnum`1<CheckStatus>> <Status>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<DateTimeOffset> <StartedAt>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<StringEnum`1<CheckConclusion>> <Conclusion>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<DateTimeOffset> <CompletedAt>k__BackingField;
    [CompilerGeneratedAttribute]
private NewCheckRunOutput <Output>k__BackingField;
    [CompilerGeneratedAttribute]
private IReadOnlyList`1<NewCheckRunAction> <Actions>k__BackingField;
    public string Name { get; protected set; }
    public string HeadSha { get; protected set; }
    public string DetailsUrl { get; public set; }
    public string ExternalId { get; public set; }
    public Nullable`1<StringEnum`1<CheckStatus>> Status { get; public set; }
    public Nullable`1<DateTimeOffset> StartedAt { get; public set; }
    public Nullable`1<StringEnum`1<CheckConclusion>> Conclusion { get; public set; }
    public Nullable`1<DateTimeOffset> CompletedAt { get; public set; }
    public NewCheckRunOutput Output { get; public set; }
    public IReadOnlyList`1<NewCheckRunAction> Actions { get; public set; }
    internal string DebuggerDisplay { get; }
    public NewCheckRun(string name, string headSha);
    [CompilerGeneratedAttribute]
public string get_Name();
    [CompilerGeneratedAttribute]
protected void set_Name(string value);
    [CompilerGeneratedAttribute]
public string get_HeadSha();
    [CompilerGeneratedAttribute]
protected void set_HeadSha(string value);
    [CompilerGeneratedAttribute]
public string get_DetailsUrl();
    [CompilerGeneratedAttribute]
public void set_DetailsUrl(string value);
    [CompilerGeneratedAttribute]
public string get_ExternalId();
    [CompilerGeneratedAttribute]
public void set_ExternalId(string value);
    [CompilerGeneratedAttribute]
public Nullable`1<StringEnum`1<CheckStatus>> get_Status();
    [CompilerGeneratedAttribute]
public void set_Status(Nullable`1<StringEnum`1<CheckStatus>> value);
    [CompilerGeneratedAttribute]
public Nullable`1<DateTimeOffset> get_StartedAt();
    [CompilerGeneratedAttribute]
public void set_StartedAt(Nullable`1<DateTimeOffset> value);
    [CompilerGeneratedAttribute]
public Nullable`1<StringEnum`1<CheckConclusion>> get_Conclusion();
    [CompilerGeneratedAttribute]
public void set_Conclusion(Nullable`1<StringEnum`1<CheckConclusion>> value);
    [CompilerGeneratedAttribute]
public Nullable`1<DateTimeOffset> get_CompletedAt();
    [CompilerGeneratedAttribute]
public void set_CompletedAt(Nullable`1<DateTimeOffset> value);
    [CompilerGeneratedAttribute]
public NewCheckRunOutput get_Output();
    [CompilerGeneratedAttribute]
public void set_Output(NewCheckRunOutput value);
    [CompilerGeneratedAttribute]
public IReadOnlyList`1<NewCheckRunAction> get_Actions();
    [CompilerGeneratedAttribute]
public void set_Actions(IReadOnlyList`1<NewCheckRunAction> value);
    internal string get_DebuggerDisplay();
}
[DebuggerDisplayAttribute("{DebuggerDisplay,nq}")]
public class Octokit.NewCheckRunAction : object {
    [CompilerGeneratedAttribute]
private string <Label>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Description>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Identifier>k__BackingField;
    public string Label { get; protected set; }
    public string Description { get; protected set; }
    public string Identifier { get; protected set; }
    internal string DebuggerDisplay { get; }
    public NewCheckRunAction(string label, string description, string identifier);
    [CompilerGeneratedAttribute]
public string get_Label();
    [CompilerGeneratedAttribute]
protected void set_Label(string value);
    [CompilerGeneratedAttribute]
public string get_Description();
    [CompilerGeneratedAttribute]
protected void set_Description(string value);
    [CompilerGeneratedAttribute]
public string get_Identifier();
    [CompilerGeneratedAttribute]
protected void set_Identifier(string value);
    internal string get_DebuggerDisplay();
}
[DebuggerDisplayAttribute("{DebuggerDisplay,nq}")]
public class Octokit.NewCheckRunAnnotation : object {
    [CompilerGeneratedAttribute]
private string <Filename>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Path>k__BackingField;
    [CompilerGeneratedAttribute]
private string <BlobHref>k__BackingField;
    [CompilerGeneratedAttribute]
private int <StartLine>k__BackingField;
    [CompilerGeneratedAttribute]
private int <EndLine>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<int> <StartColumn>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<int> <EndColumn>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<StringEnum`1<CheckWarningLevel>> <WarningLevel>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<StringEnum`1<CheckAnnotationLevel>> <AnnotationLevel>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Message>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Title>k__BackingField;
    [CompilerGeneratedAttribute]
private string <RawDetails>k__BackingField;
    [ObsoleteAttribute("This property is replaced with Path but may still be required on GitHub Enterprise 2.14")]
public string Filename { get; protected set; }
    public string Path { get; protected set; }
    [ObsoleteAttribute("This property is deprecated but may still be required on GitHub Enterprise 2.14")]
public string BlobHref { get; protected set; }
    public int StartLine { get; protected set; }
    public int EndLine { get; protected set; }
    public Nullable`1<int> StartColumn { get; public set; }
    public Nullable`1<int> EndColumn { get; public set; }
    [ObsoleteAttribute("This property is replaced with AnnotationLevel but may still be required on GitHub Enterprise 2.14")]
public Nullable`1<StringEnum`1<CheckWarningLevel>> WarningLevel { get; protected set; }
    public Nullable`1<StringEnum`1<CheckAnnotationLevel>> AnnotationLevel { get; protected set; }
    public string Message { get; protected set; }
    public string Title { get; public set; }
    public string RawDetails { get; public set; }
    internal string DebuggerDisplay { get; }
    public NewCheckRunAnnotation(string path, int startLine, int endLine, CheckAnnotationLevel annotationLevel, string message);
    [ObsoleteAttribute("This ctor taking Filename, BlobHref and WarningLevel is deprecated but may still be required on GitHub Enterprise 2.14")]
public NewCheckRunAnnotation(string filename, string blobHref, int startLine, int endLine, CheckWarningLevel warningLevel, string message);
    [CompilerGeneratedAttribute]
public string get_Filename();
    [CompilerGeneratedAttribute]
protected void set_Filename(string value);
    [CompilerGeneratedAttribute]
public string get_Path();
    [CompilerGeneratedAttribute]
protected void set_Path(string value);
    [CompilerGeneratedAttribute]
public string get_BlobHref();
    [CompilerGeneratedAttribute]
protected void set_BlobHref(string value);
    [CompilerGeneratedAttribute]
public int get_StartLine();
    [CompilerGeneratedAttribute]
protected void set_StartLine(int value);
    [CompilerGeneratedAttribute]
public int get_EndLine();
    [CompilerGeneratedAttribute]
protected void set_EndLine(int value);
    [CompilerGeneratedAttribute]
public Nullable`1<int> get_StartColumn();
    [CompilerGeneratedAttribute]
public void set_StartColumn(Nullable`1<int> value);
    [CompilerGeneratedAttribute]
public Nullable`1<int> get_EndColumn();
    [CompilerGeneratedAttribute]
public void set_EndColumn(Nullable`1<int> value);
    [CompilerGeneratedAttribute]
public Nullable`1<StringEnum`1<CheckWarningLevel>> get_WarningLevel();
    [CompilerGeneratedAttribute]
protected void set_WarningLevel(Nullable`1<StringEnum`1<CheckWarningLevel>> value);
    [CompilerGeneratedAttribute]
public Nullable`1<StringEnum`1<CheckAnnotationLevel>> get_AnnotationLevel();
    [CompilerGeneratedAttribute]
protected void set_AnnotationLevel(Nullable`1<StringEnum`1<CheckAnnotationLevel>> value);
    [CompilerGeneratedAttribute]
public string get_Message();
    [CompilerGeneratedAttribute]
protected void set_Message(string value);
    [CompilerGeneratedAttribute]
public string get_Title();
    [CompilerGeneratedAttribute]
public void set_Title(string value);
    [CompilerGeneratedAttribute]
public string get_RawDetails();
    [CompilerGeneratedAttribute]
public void set_RawDetails(string value);
    internal string get_DebuggerDisplay();
}
[DebuggerDisplayAttribute("{DebuggerDisplay,nq}")]
public class Octokit.NewCheckRunImage : object {
    [CompilerGeneratedAttribute]
private string <Alt>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ImageUrl>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Caption>k__BackingField;
    public string Alt { get; protected set; }
    public string ImageUrl { get; protected set; }
    public string Caption { get; public set; }
    internal string DebuggerDisplay { get; }
    public NewCheckRunImage(string alt, string imageUrl);
    [CompilerGeneratedAttribute]
public string get_Alt();
    [CompilerGeneratedAttribute]
protected void set_Alt(string value);
    [CompilerGeneratedAttribute]
public string get_ImageUrl();
    [CompilerGeneratedAttribute]
protected void set_ImageUrl(string value);
    [CompilerGeneratedAttribute]
public string get_Caption();
    [CompilerGeneratedAttribute]
public void set_Caption(string value);
    internal string get_DebuggerDisplay();
}
[DebuggerDisplayAttribute("{DebuggerDisplay,nq}")]
public class Octokit.NewCheckRunOutput : object {
    [CompilerGeneratedAttribute]
private string <Title>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Summary>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Text>k__BackingField;
    [CompilerGeneratedAttribute]
private IReadOnlyList`1<NewCheckRunAnnotation> <Annotations>k__BackingField;
    [CompilerGeneratedAttribute]
private IReadOnlyList`1<NewCheckRunImage> <Images>k__BackingField;
    public string Title { get; protected set; }
    public string Summary { get; protected set; }
    public string Text { get; public set; }
    public IReadOnlyList`1<NewCheckRunAnnotation> Annotations { get; public set; }
    public IReadOnlyList`1<NewCheckRunImage> Images { get; public set; }
    internal string DebuggerDisplay { get; }
    public NewCheckRunOutput(string title, string summary);
    [CompilerGeneratedAttribute]
public string get_Title();
    [CompilerGeneratedAttribute]
protected void set_Title(string value);
    [CompilerGeneratedAttribute]
public string get_Summary();
    [CompilerGeneratedAttribute]
protected void set_Summary(string value);
    [CompilerGeneratedAttribute]
public string get_Text();
    [CompilerGeneratedAttribute]
public void set_Text(string value);
    [CompilerGeneratedAttribute]
public IReadOnlyList`1<NewCheckRunAnnotation> get_Annotations();
    [CompilerGeneratedAttribute]
public void set_Annotations(IReadOnlyList`1<NewCheckRunAnnotation> value);
    [CompilerGeneratedAttribute]
public IReadOnlyList`1<NewCheckRunImage> get_Images();
    [CompilerGeneratedAttribute]
public void set_Images(IReadOnlyList`1<NewCheckRunImage> value);
    internal string get_DebuggerDisplay();
}
[DebuggerDisplayAttribute("{DebuggerDisplay,nq}")]
public class Octokit.NewCheckSuite : object {
    [CompilerGeneratedAttribute]
private string <HeadSha>k__BackingField;
    public string HeadSha { get; protected set; }
    internal string DebuggerDisplay { get; }
    public NewCheckSuite(string headSha);
    [CompilerGeneratedAttribute]
public string get_HeadSha();
    [CompilerGeneratedAttribute]
protected void set_HeadSha(string value);
    internal string get_DebuggerDisplay();
}
[DebuggerDisplayAttribute("{DebuggerDisplay,nq}")]
public class Octokit.NewCommit : object {
    [CompilerGeneratedAttribute]
private string <Message>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Tree>k__BackingField;
    [CompilerGeneratedAttribute]
private IEnumerable`1<string> <Parents>k__BackingField;
    [CompilerGeneratedAttribute]
private Committer <Author>k__BackingField;
    [CompilerGeneratedAttribute]
private Committer <Committer>k__BackingField;
    public string Message { get; private set; }
    public string Tree { get; private set; }
    public IEnumerable`1<string> Parents { get; private set; }
    public Committer Author { get; public set; }
    public Committer Committer { get; public set; }
    internal string DebuggerDisplay { get; }
    public NewCommit(string message, string tree, IEnumerable`1<string> parents);
    public NewCommit(string message, string tree);
    public NewCommit(string message, string tree, string parent);
    [CompilerGeneratedAttribute]
public string get_Message();
    [CompilerGeneratedAttribute]
private void set_Message(string value);
    [CompilerGeneratedAttribute]
public string get_Tree();
    [CompilerGeneratedAttribute]
private void set_Tree(string value);
    [CompilerGeneratedAttribute]
public IEnumerable`1<string> get_Parents();
    [CompilerGeneratedAttribute]
private void set_Parents(IEnumerable`1<string> value);
    [CompilerGeneratedAttribute]
public Committer get_Author();
    [CompilerGeneratedAttribute]
public void set_Author(Committer value);
    [CompilerGeneratedAttribute]
public Committer get_Committer();
    [CompilerGeneratedAttribute]
public void set_Committer(Committer value);
    internal string get_DebuggerDisplay();
}
[DebuggerDisplayAttribute("{DebuggerDisplay,nq}")]
public class Octokit.NewCommitComment : object {
    [CompilerGeneratedAttribute]
private string <Body>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Path>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<int> <Position>k__BackingField;
    public string Body { get; private set; }
    public string Path { get; public set; }
    public Nullable`1<int> Position { get; public set; }
    internal string DebuggerDisplay { get; }
    public NewCommitComment(string body);
    [CompilerGeneratedAttribute]
public string get_Body();
    [CompilerGeneratedAttribute]
private void set_Body(string value);
    [CompilerGeneratedAttribute]
public string get_Path();
    [CompilerGeneratedAttribute]
public void set_Path(string value);
    [CompilerGeneratedAttribute]
public Nullable`1<int> get_Position();
    [CompilerGeneratedAttribute]
public void set_Position(Nullable`1<int> value);
    internal string get_DebuggerDisplay();
}
[DebuggerDisplayAttribute("{DebuggerDisplay,nq}")]
public class Octokit.NewCommitStatus : object {
    [CompilerGeneratedAttribute]
private CommitState <State>k__BackingField;
    [CompilerGeneratedAttribute]
private string <TargetUrl>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Description>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Context>k__BackingField;
    public CommitState State { get; public set; }
    public string TargetUrl { get; public set; }
    public string Description { get; public set; }
    public string Context { get; public set; }
    internal string DebuggerDisplay { get; }
    [CompilerGeneratedAttribute]
public CommitState get_State();
    [CompilerGeneratedAttribute]
public void set_State(CommitState value);
    [CompilerGeneratedAttribute]
public string get_TargetUrl();
    [CompilerGeneratedAttribute]
public void set_TargetUrl(string value);
    [CompilerGeneratedAttribute]
public string get_Description();
    [CompilerGeneratedAttribute]
public void set_Description(string value);
    [CompilerGeneratedAttribute]
public string get_Context();
    [CompilerGeneratedAttribute]
public void set_Context(string value);
    internal string get_DebuggerDisplay();
}
[DebuggerDisplayAttribute("{DebuggerDisplay,nq}")]
public class Octokit.NewDependencySnapshot : object {
    [CompilerGeneratedAttribute]
private long <Version>k__BackingField;
    [CompilerGeneratedAttribute]
private NewDependencySnapshotJob <Job>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Sha>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Ref>k__BackingField;
    [CompilerGeneratedAttribute]
private NewDependencySnapshotDetector <Detector>k__BackingField;
    [CompilerGeneratedAttribute]
private IDictionary`2<string, object> <Metadata>k__BackingField;
    [CompilerGeneratedAttribute]
private IDictionary`2<string, NewDependencySnapshotManifest> <Manifests>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Scanned>k__BackingField;
    public long Version { get; private set; }
    public NewDependencySnapshotJob Job { get; private set; }
    public string Sha { get; private set; }
    public string Ref { get; private set; }
    public NewDependencySnapshotDetector Detector { get; private set; }
    public IDictionary`2<string, object> Metadata { get; public set; }
    public IDictionary`2<string, NewDependencySnapshotManifest> Manifests { get; public set; }
    public string Scanned { get; private set; }
    internal string DebuggerDisplay { get; }
    public NewDependencySnapshot(long version, string sha, string ref, string scanned, NewDependencySnapshotJob job, NewDependencySnapshotDetector detector);
    [CompilerGeneratedAttribute]
public long get_Version();
    [CompilerGeneratedAttribute]
private void set_Version(long value);
    [CompilerGeneratedAttribute]
public NewDependencySnapshotJob get_Job();
    [CompilerGeneratedAttribute]
private void set_Job(NewDependencySnapshotJob value);
    [CompilerGeneratedAttribute]
public string get_Sha();
    [CompilerGeneratedAttribute]
private void set_Sha(string value);
    [CompilerGeneratedAttribute]
public string get_Ref();
    [CompilerGeneratedAttribute]
private void set_Ref(string value);
    [CompilerGeneratedAttribute]
public NewDependencySnapshotDetector get_Detector();
    [CompilerGeneratedAttribute]
private void set_Detector(NewDependencySnapshotDetector value);
    [CompilerGeneratedAttribute]
public IDictionary`2<string, object> get_Metadata();
    [CompilerGeneratedAttribute]
public void set_Metadata(IDictionary`2<string, object> value);
    [CompilerGeneratedAttribute]
public IDictionary`2<string, NewDependencySnapshotManifest> get_Manifests();
    [CompilerGeneratedAttribute]
public void set_Manifests(IDictionary`2<string, NewDependencySnapshotManifest> value);
    [CompilerGeneratedAttribute]
public string get_Scanned();
    [CompilerGeneratedAttribute]
private void set_Scanned(string value);
    internal string get_DebuggerDisplay();
}
[DebuggerDisplayAttribute("{DebuggerDisplay,nq}")]
public class Octokit.NewDependencySnapshotDetector : object {
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Version>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Url>k__BackingField;
    public string Name { get; private set; }
    public string Version { get; private set; }
    public string Url { get; private set; }
    internal string DebuggerDisplay { get; }
    public NewDependencySnapshotDetector(string name, string version, string url);
    [CompilerGeneratedAttribute]
public string get_Name();
    [CompilerGeneratedAttribute]
private void set_Name(string value);
    [CompilerGeneratedAttribute]
public string get_Version();
    [CompilerGeneratedAttribute]
private void set_Version(string value);
    [CompilerGeneratedAttribute]
public string get_Url();
    [CompilerGeneratedAttribute]
private void set_Url(string value);
    internal string get_DebuggerDisplay();
}
[DebuggerDisplayAttribute("{DebuggerDisplay,nq}")]
public class Octokit.NewDependencySnapshotJob : object {
    [CompilerGeneratedAttribute]
private string <Id>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Correlator>k__BackingField;
    [CompilerGeneratedAttribute]
private string <HtmlUrl>k__BackingField;
    public string Id { get; private set; }
    public string Correlator { get; private set; }
    public string HtmlUrl { get; public set; }
    internal string DebuggerDisplay { get; }
    public NewDependencySnapshotJob(string id, string correlator);
    [CompilerGeneratedAttribute]
public string get_Id();
    [CompilerGeneratedAttribute]
private void set_Id(string value);
    [CompilerGeneratedAttribute]
public string get_Correlator();
    [CompilerGeneratedAttribute]
private void set_Correlator(string value);
    [CompilerGeneratedAttribute]
public string get_HtmlUrl();
    [CompilerGeneratedAttribute]
public void set_HtmlUrl(string value);
    internal string get_DebuggerDisplay();
}
[DebuggerDisplayAttribute("{DebuggerDisplay,nq}")]
public class Octokit.NewDependencySnapshotManifest : object {
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    [CompilerGeneratedAttribute]
private NewDependencySnapshotManifestFile <File>k__BackingField;
    [CompilerGeneratedAttribute]
private IDictionary`2<string, object> <Metadata>k__BackingField;
    [CompilerGeneratedAttribute]
private IDictionary`2<string, NewDependencySnapshotResolvedDependency> <Resolved>k__BackingField;
    public string Name { get; private set; }
    public NewDependencySnapshotManifestFile File { get; public set; }
    public IDictionary`2<string, object> Metadata { get; public set; }
    public IDictionary`2<string, NewDependencySnapshotResolvedDependency> Resolved { get; public set; }
    internal string DebuggerDisplay { get; }
    public NewDependencySnapshotManifest(string name);
    [CompilerGeneratedAttribute]
public string get_Name();
    [CompilerGeneratedAttribute]
private void set_Name(string value);
    [CompilerGeneratedAttribute]
public NewDependencySnapshotManifestFile get_File();
    [CompilerGeneratedAttribute]
public void set_File(NewDependencySnapshotManifestFile value);
    [CompilerGeneratedAttribute]
public IDictionary`2<string, object> get_Metadata();
    [CompilerGeneratedAttribute]
public void set_Metadata(IDictionary`2<string, object> value);
    [CompilerGeneratedAttribute]
public IDictionary`2<string, NewDependencySnapshotResolvedDependency> get_Resolved();
    [CompilerGeneratedAttribute]
public void set_Resolved(IDictionary`2<string, NewDependencySnapshotResolvedDependency> value);
    internal string get_DebuggerDisplay();
}
[DebuggerDisplayAttribute("{DebuggerDisplay,nq}")]
public class Octokit.NewDependencySnapshotManifestFile : object {
    [CompilerGeneratedAttribute]
private string <SourceLocation>k__BackingField;
    public string SourceLocation { get; public set; }
    internal string DebuggerDisplay { get; }
    [CompilerGeneratedAttribute]
public string get_SourceLocation();
    [CompilerGeneratedAttribute]
public void set_SourceLocation(string value);
    internal string get_DebuggerDisplay();
}
[DebuggerDisplayAttribute("{DebuggerDisplay,nq}")]
public class Octokit.NewDependencySnapshotResolvedDependency : object {
    [CompilerGeneratedAttribute]
private string <PackageUrl>k__BackingField;
    [CompilerGeneratedAttribute]
private IDictionary`2<string, object> <Metadata>k__BackingField;
    [CompilerGeneratedAttribute]
private ResolvedPackageKeyRelationship <Relationship>k__BackingField;
    [CompilerGeneratedAttribute]
private ResolvedPackageKeyScope <Scope>k__BackingField;
    [CompilerGeneratedAttribute]
private Collection`1<string> <Dependencies>k__BackingField;
    public string PackageUrl { get; public set; }
    public IDictionary`2<string, object> Metadata { get; public set; }
    public ResolvedPackageKeyRelationship Relationship { get; public set; }
    public ResolvedPackageKeyScope Scope { get; public set; }
    public Collection`1<string> Dependencies { get; public set; }
    internal string DebuggerDisplay { get; }
    [CompilerGeneratedAttribute]
public string get_PackageUrl();
    [CompilerGeneratedAttribute]
public void set_PackageUrl(string value);
    [CompilerGeneratedAttribute]
public IDictionary`2<string, object> get_Metadata();
    [CompilerGeneratedAttribute]
public void set_Metadata(IDictionary`2<string, object> value);
    [CompilerGeneratedAttribute]
public ResolvedPackageKeyRelationship get_Relationship();
    [CompilerGeneratedAttribute]
public void set_Relationship(ResolvedPackageKeyRelationship value);
    [CompilerGeneratedAttribute]
public ResolvedPackageKeyScope get_Scope();
    [CompilerGeneratedAttribute]
public void set_Scope(ResolvedPackageKeyScope value);
    [CompilerGeneratedAttribute]
public Collection`1<string> get_Dependencies();
    [CompilerGeneratedAttribute]
public void set_Dependencies(Collection`1<string> value);
    internal string get_DebuggerDisplay();
}
[DebuggerDisplayAttribute("{DebuggerDisplay,nq}")]
public class Octokit.NewDeployKey : object {
    [CompilerGeneratedAttribute]
private string <Title>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Key>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <ReadOnly>k__BackingField;
    public string Title { get; public set; }
    public string Key { get; public set; }
    public bool ReadOnly { get; public set; }
    internal string DebuggerDisplay { get; }
    [CompilerGeneratedAttribute]
public string get_Title();
    [CompilerGeneratedAttribute]
public void set_Title(string value);
    [CompilerGeneratedAttribute]
public string get_Key();
    [CompilerGeneratedAttribute]
public void set_Key(string value);
    [CompilerGeneratedAttribute]
public bool get_ReadOnly();
    [CompilerGeneratedAttribute]
public void set_ReadOnly(bool value);
    internal string get_DebuggerDisplay();
}
[DebuggerDisplayAttribute("{DebuggerDisplay,nq}")]
public class Octokit.NewDeployment : object {
    [CompilerGeneratedAttribute]
private string <Ref>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Task>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<bool> <AutoMerge>k__BackingField;
    [CompilerGeneratedAttribute]
private Collection`1<string> <RequiredContexts>k__BackingField;
    [CompilerGeneratedAttribute]
private Dictionary`2<string, string> <Payload>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Environment>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Description>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<bool> <TransientEnvironment>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<bool> <ProductionEnvironment>k__BackingField;
    public string Ref { get; private set; }
    public string Task { get; public set; }
    public Nullable`1<bool> AutoMerge { get; public set; }
    public Collection`1<string> RequiredContexts { get; public set; }
    public Dictionary`2<string, string> Payload { get; public set; }
    public string Environment { get; public set; }
    public string Description { get; public set; }
    public Nullable`1<bool> TransientEnvironment { get; public set; }
    public Nullable`1<bool> ProductionEnvironment { get; public set; }
    internal string DebuggerDisplay { get; }
    public NewDeployment(string ref);
    [CompilerGeneratedAttribute]
public string get_Ref();
    [CompilerGeneratedAttribute]
private void set_Ref(string value);
    [CompilerGeneratedAttribute]
public string get_Task();
    [CompilerGeneratedAttribute]
public void set_Task(string value);
    [CompilerGeneratedAttribute]
public Nullable`1<bool> get_AutoMerge();
    [CompilerGeneratedAttribute]
public void set_AutoMerge(Nullable`1<bool> value);
    [CompilerGeneratedAttribute]
public Collection`1<string> get_RequiredContexts();
    [CompilerGeneratedAttribute]
public void set_RequiredContexts(Collection`1<string> value);
    [CompilerGeneratedAttribute]
public Dictionary`2<string, string> get_Payload();
    [CompilerGeneratedAttribute]
public void set_Payload(Dictionary`2<string, string> value);
    [CompilerGeneratedAttribute]
public string get_Environment();
    [CompilerGeneratedAttribute]
public void set_Environment(string value);
    [CompilerGeneratedAttribute]
public string get_Description();
    [CompilerGeneratedAttribute]
public void set_Description(string value);
    [CompilerGeneratedAttribute]
public Nullable`1<bool> get_TransientEnvironment();
    [CompilerGeneratedAttribute]
public void set_TransientEnvironment(Nullable`1<bool> value);
    [CompilerGeneratedAttribute]
public Nullable`1<bool> get_ProductionEnvironment();
    [CompilerGeneratedAttribute]
public void set_ProductionEnvironment(Nullable`1<bool> value);
    internal string get_DebuggerDisplay();
}
[DebuggerDisplayAttribute("{DebuggerDisplay,nq}")]
public class Octokit.NewDeploymentStatus : object {
    [CompilerGeneratedAttribute]
private DeploymentState <State>k__BackingField;
    [CompilerGeneratedAttribute]
private string <LogUrl>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Description>k__BackingField;
    [CompilerGeneratedAttribute]
private string <EnvironmentUrl>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Environment>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<bool> <AutoInactive>k__BackingField;
    public DeploymentState State { get; private set; }
    public string LogUrl { get; public set; }
    public string Description { get; public set; }
    public string EnvironmentUrl { get; public set; }
    public string Environment { get; public set; }
    public Nullable`1<bool> AutoInactive { get; public set; }
    internal string DebuggerDisplay { get; }
    public NewDeploymentStatus(DeploymentState deploymentState);
    [CompilerGeneratedAttribute]
public DeploymentState get_State();
    [CompilerGeneratedAttribute]
private void set_State(DeploymentState value);
    [CompilerGeneratedAttribute]
public string get_LogUrl();
    [CompilerGeneratedAttribute]
public void set_LogUrl(string value);
    [CompilerGeneratedAttribute]
public string get_Description();
    [CompilerGeneratedAttribute]
public void set_Description(string value);
    [CompilerGeneratedAttribute]
public string get_EnvironmentUrl();
    [CompilerGeneratedAttribute]
public void set_EnvironmentUrl(string value);
    [CompilerGeneratedAttribute]
public string get_Environment();
    [CompilerGeneratedAttribute]
public void set_Environment(string value);
    [CompilerGeneratedAttribute]
public Nullable`1<bool> get_AutoInactive();
    [CompilerGeneratedAttribute]
public void set_AutoInactive(Nullable`1<bool> value);
    internal string get_DebuggerDisplay();
}
[DebuggerDisplayAttribute("{DebuggerDisplay,nq}")]
public class Octokit.NewGist : object {
    [CompilerGeneratedAttribute]
private string <Description>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <Public>k__BackingField;
    [CompilerGeneratedAttribute]
private IDictionary`2<string, string> <Files>k__BackingField;
    public string Description { get; public set; }
    public bool Public { get; public set; }
    public IDictionary`2<string, string> Files { get; private set; }
    internal string DebuggerDisplay { get; }
    [CompilerGeneratedAttribute]
public string get_Description();
    [CompilerGeneratedAttribute]
public void set_Description(string value);
    [CompilerGeneratedAttribute]
public bool get_Public();
    [CompilerGeneratedAttribute]
public void set_Public(bool value);
    [CompilerGeneratedAttribute]
public IDictionary`2<string, string> get_Files();
    [CompilerGeneratedAttribute]
private void set_Files(IDictionary`2<string, string> value);
    internal string get_DebuggerDisplay();
}
[DebuggerDisplayAttribute("{DebuggerDisplay,nq}")]
public class Octokit.NewGpgKey : object {
    [CompilerGeneratedAttribute]
private string <ArmoredPublicKey>k__BackingField;
    public string ArmoredPublicKey { get; public set; }
    internal string DebuggerDisplay { get; }
    public NewGpgKey(string publicKey);
    [CompilerGeneratedAttribute]
public string get_ArmoredPublicKey();
    [CompilerGeneratedAttribute]
public void set_ArmoredPublicKey(string value);
    internal string get_DebuggerDisplay();
}
[DebuggerDisplayAttribute("{DebuggerDisplay,nq}")]
public class Octokit.NewImpersonationToken : object {
    [CompilerGeneratedAttribute]
private IEnumerable`1<string> <Scopes>k__BackingField;
    public IEnumerable`1<string> Scopes { get; public set; }
    internal string DebuggerDisplay { get; }
    public NewImpersonationToken(IEnumerable`1<string> scopes);
    [CompilerGeneratedAttribute]
public IEnumerable`1<string> get_Scopes();
    [CompilerGeneratedAttribute]
public void set_Scopes(IEnumerable`1<string> value);
    internal string get_DebuggerDisplay();
}
[DebuggerDisplayAttribute("{DebuggerDisplay,nq}")]
public class Octokit.NewIssue : object {
    [CompilerGeneratedAttribute]
private string <Title>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Body>k__BackingField;
    [CompilerGeneratedAttribute]
private Collection`1<string> <Assignees>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<int> <Milestone>k__BackingField;
    [CompilerGeneratedAttribute]
private Collection`1<string> <Labels>k__BackingField;
    public string Title { get; private set; }
    public string Body { get; public set; }
    public Collection`1<string> Assignees { get; private set; }
    public Nullable`1<int> Milestone { get; public set; }
    public Collection`1<string> Labels { get; private set; }
    internal string DebuggerDisplay { get; }
    public NewIssue(string title);
    [CompilerGeneratedAttribute]
public string get_Title();
    [CompilerGeneratedAttribute]
private void set_Title(string value);
    [CompilerGeneratedAttribute]
public string get_Body();
    [CompilerGeneratedAttribute]
public void set_Body(string value);
    [CompilerGeneratedAttribute]
public Collection`1<string> get_Assignees();
    [CompilerGeneratedAttribute]
private void set_Assignees(Collection`1<string> value);
    [CompilerGeneratedAttribute]
public Nullable`1<int> get_Milestone();
    [CompilerGeneratedAttribute]
public void set_Milestone(Nullable`1<int> value);
    [CompilerGeneratedAttribute]
public Collection`1<string> get_Labels();
    [CompilerGeneratedAttribute]
private void set_Labels(Collection`1<string> value);
    internal string get_DebuggerDisplay();
}
[DebuggerDisplayAttribute("{DebuggerDisplay,nq}")]
public class Octokit.NewLabel : object {
    private string _color;
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Description>k__BackingField;
    public string Name { get; public set; }
    public string Color { get; public set; }
    public string Description { get; public set; }
    internal string DebuggerDisplay { get; }
    public NewLabel(string name, string color);
    [CompilerGeneratedAttribute]
public string get_Name();
    [CompilerGeneratedAttribute]
public void set_Name(string value);
    public string get_Color();
    public void set_Color(string value);
    [CompilerGeneratedAttribute]
public string get_Description();
    [CompilerGeneratedAttribute]
public void set_Description(string value);
    internal string get_DebuggerDisplay();
}
[DebuggerDisplayAttribute("{DebuggerDisplay,nq}")]
public class Octokit.NewLdapMapping : object {
    [CompilerGeneratedAttribute]
private string <LdapDistinguishedName>k__BackingField;
    [ParameterAttribute]
public string LdapDistinguishedName { get; private set; }
    internal string DebuggerDisplay { get; }
    public NewLdapMapping(string ldapDistinguishedName);
    [CompilerGeneratedAttribute]
public string get_LdapDistinguishedName();
    [CompilerGeneratedAttribute]
private void set_LdapDistinguishedName(string value);
    internal string get_DebuggerDisplay();
}
[DebuggerDisplayAttribute("{DebuggerDisplay,nq}")]
public class Octokit.NewMerge : object {
    [CompilerGeneratedAttribute]
private string <CommitMessage>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Base>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Head>k__BackingField;
    public string CommitMessage { get; public set; }
    public string Base { get; private set; }
    public string Head { get; private set; }
    internal string DebuggerDisplay { get; }
    public NewMerge(string base, string head);
    [CompilerGeneratedAttribute]
public string get_CommitMessage();
    [CompilerGeneratedAttribute]
public void set_CommitMessage(string value);
    [CompilerGeneratedAttribute]
public string get_Base();
    [CompilerGeneratedAttribute]
private void set_Base(string value);
    [CompilerGeneratedAttribute]
public string get_Head();
    [CompilerGeneratedAttribute]
private void set_Head(string value);
    internal string get_DebuggerDisplay();
}
[DebuggerDisplayAttribute("{DebuggerDisplay,nq}")]
public class Octokit.NewMilestone : object {
    [CompilerGeneratedAttribute]
private string <Title>k__BackingField;
    [CompilerGeneratedAttribute]
private ItemState <State>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Description>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<DateTimeOffset> <DueOn>k__BackingField;
    public string Title { get; private set; }
    public ItemState State { get; public set; }
    public string Description { get; public set; }
    public Nullable`1<DateTimeOffset> DueOn { get; public set; }
    internal string DebuggerDisplay { get; }
    public NewMilestone(string title);
    [CompilerGeneratedAttribute]
public string get_Title();
    [CompilerGeneratedAttribute]
private void set_Title(string value);
    [CompilerGeneratedAttribute]
public ItemState get_State();
    [CompilerGeneratedAttribute]
public void set_State(ItemState value);
    [CompilerGeneratedAttribute]
public string get_Description();
    [CompilerGeneratedAttribute]
public void set_Description(string value);
    [CompilerGeneratedAttribute]
public Nullable`1<DateTimeOffset> get_DueOn();
    [CompilerGeneratedAttribute]
public void set_DueOn(Nullable`1<DateTimeOffset> value);
    internal string get_DebuggerDisplay();
}
[DebuggerDisplayAttribute("{DebuggerDisplay,nq}")]
public class Octokit.NewOrganization : object {
    [CompilerGeneratedAttribute]
private string <Login>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Admin>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ProfileName>k__BackingField;
    public string Login { get; private set; }
    public string Admin { get; private set; }
    public string ProfileName { get; private set; }
    internal string DebuggerDisplay { get; }
    public NewOrganization(string login, string admin);
    public NewOrganization(string login, string admin, string profileName);
    [CompilerGeneratedAttribute]
public string get_Login();
    [CompilerGeneratedAttribute]
private void set_Login(string value);
    [CompilerGeneratedAttribute]
public string get_Admin();
    [CompilerGeneratedAttribute]
private void set_Admin(string value);
    [CompilerGeneratedAttribute]
public string get_ProfileName();
    [CompilerGeneratedAttribute]
private void set_ProfileName(string value);
    internal string get_DebuggerDisplay();
}
[DebuggerDisplayAttribute("{DebuggerDisplay,nq}")]
public class Octokit.NewOrganizationHook : object {
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    [CompilerGeneratedAttribute]
private IReadOnlyDictionary`2<string, string> <Config>k__BackingField;
    [CompilerGeneratedAttribute]
private IEnumerable`1<string> <Events>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <Active>k__BackingField;
    public string Name { get; private set; }
    public IReadOnlyDictionary`2<string, string> Config { get; protected set; }
    public IEnumerable`1<string> Events { get; public set; }
    public bool Active { get; public set; }
    internal string DebuggerDisplay { get; }
    public NewOrganizationHook(string name, IReadOnlyDictionary`2<string, string> config);
    [CompilerGeneratedAttribute]
public string get_Name();
    [CompilerGeneratedAttribute]
private void set_Name(string value);
    [CompilerGeneratedAttribute]
public IReadOnlyDictionary`2<string, string> get_Config();
    [CompilerGeneratedAttribute]
protected void set_Config(IReadOnlyDictionary`2<string, string> value);
    [CompilerGeneratedAttribute]
public IEnumerable`1<string> get_Events();
    [CompilerGeneratedAttribute]
public void set_Events(IEnumerable`1<string> value);
    [CompilerGeneratedAttribute]
public bool get_Active();
    [CompilerGeneratedAttribute]
public void set_Active(bool value);
    public virtual NewOrganizationHook ToRequest();
    internal string get_DebuggerDisplay();
}
[DebuggerDisplayAttribute("{DebuggerDisplay,nq}")]
public class Octokit.NewOrganizationWebHook : NewOrganizationHook {
    [CompilerGeneratedAttribute]
private string <Url>k__BackingField;
    [CompilerGeneratedAttribute]
private OrgWebHookContentType <ContentType>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Secret>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <InsecureSsl>k__BackingField;
    public string Url { get; protected set; }
    public OrgWebHookContentType ContentType { get; public set; }
    public string Secret { get; public set; }
    public bool InsecureSsl { get; public set; }
    public NewOrganizationWebHook(string name, IReadOnlyDictionary`2<string, string> config, string url);
    [CompilerGeneratedAttribute]
public string get_Url();
    [CompilerGeneratedAttribute]
protected void set_Url(string value);
    [CompilerGeneratedAttribute]
public OrgWebHookContentType get_ContentType();
    [CompilerGeneratedAttribute]
public void set_ContentType(OrgWebHookContentType value);
    [CompilerGeneratedAttribute]
public string get_Secret();
    [CompilerGeneratedAttribute]
public void set_Secret(string value);
    [CompilerGeneratedAttribute]
public bool get_InsecureSsl();
    [CompilerGeneratedAttribute]
public void set_InsecureSsl(bool value);
    public virtual NewOrganizationHook ToRequest();
    private Dictionary`2<string, string> GetWebHookConfig();
}
[DebuggerDisplayAttribute("{DebuggerDisplay,nq}")]
public class Octokit.NewPreReceiveEnvironment : object {
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ImageUrl>k__BackingField;
    public string Name { get; public set; }
    public string ImageUrl { get; public set; }
    internal string DebuggerDisplay { get; }
    public NewPreReceiveEnvironment(string name, string imageUrl);
    [CompilerGeneratedAttribute]
public string get_Name();
    [CompilerGeneratedAttribute]
public void set_Name(string value);
    [CompilerGeneratedAttribute]
public string get_ImageUrl();
    [CompilerGeneratedAttribute]
public void set_ImageUrl(string value);
    internal string get_DebuggerDisplay();
}
[DebuggerDisplayAttribute("{DebuggerDisplay,nq}")]
public class Octokit.NewPreReceiveHook : object {
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Script>k__BackingField;
    [CompilerGeneratedAttribute]
private RepositoryReference <ScriptRepository>k__BackingField;
    [CompilerGeneratedAttribute]
private PreReceiveEnvironmentReference <Environment>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<PreReceiveHookEnforcement> <Enforcement>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<bool> <AllowDownstreamConfiguration>k__BackingField;
    public string Name { get; public set; }
    public string Script { get; public set; }
    public RepositoryReference ScriptRepository { get; public set; }
    public PreReceiveEnvironmentReference Environment { get; public set; }
    public Nullable`1<PreReceiveHookEnforcement> Enforcement { get; public set; }
    public Nullable`1<bool> AllowDownstreamConfiguration { get; public set; }
    internal string DebuggerDisplay { get; }
    public NewPreReceiveHook(string name, Repository scriptRepository, string script, PreReceiveEnvironment environment);
    public NewPreReceiveHook(string name, string scriptRepositoryFullName, string script, long environmentId);
    [CompilerGeneratedAttribute]
public string get_Name();
    [CompilerGeneratedAttribute]
public void set_Name(string value);
    [CompilerGeneratedAttribute]
public string get_Script();
    [CompilerGeneratedAttribute]
public void set_Script(string value);
    [CompilerGeneratedAttribute]
public RepositoryReference get_ScriptRepository();
    [CompilerGeneratedAttribute]
public void set_ScriptRepository(RepositoryReference value);
    [CompilerGeneratedAttribute]
public PreReceiveEnvironmentReference get_Environment();
    [CompilerGeneratedAttribute]
public void set_Environment(PreReceiveEnvironmentReference value);
    [CompilerGeneratedAttribute]
public Nullable`1<PreReceiveHookEnforcement> get_Enforcement();
    [CompilerGeneratedAttribute]
public void set_Enforcement(Nullable`1<PreReceiveHookEnforcement> value);
    [CompilerGeneratedAttribute]
public Nullable`1<bool> get_AllowDownstreamConfiguration();
    [CompilerGeneratedAttribute]
public void set_AllowDownstreamConfiguration(Nullable`1<bool> value);
    internal string get_DebuggerDisplay();
}
[DebuggerDisplayAttribute("{DebuggerDisplay,nq}")]
public class Octokit.NewProject : object {
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Body>k__BackingField;
    public string Name { get; private set; }
    public string Body { get; public set; }
    internal string DebuggerDisplay { get; }
    public NewProject(string name);
    [CompilerGeneratedAttribute]
public string get_Name();
    [CompilerGeneratedAttribute]
private void set_Name(string value);
    [CompilerGeneratedAttribute]
public string get_Body();
    [CompilerGeneratedAttribute]
public void set_Body(string value);
    internal string get_DebuggerDisplay();
}
[DebuggerDisplayAttribute("{DebuggerDisplay,nq}")]
public class Octokit.NewProjectCard : object {
    [CompilerGeneratedAttribute]
private string <Note>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<long> <ContentId>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<ProjectCardContentType> <ContentType>k__BackingField;
    public string Note { get; protected set; }
    [ParameterAttribute]
public Nullable`1<long> ContentId { get; protected set; }
    [ParameterAttribute]
public Nullable`1<ProjectCardContentType> ContentType { get; protected set; }
    internal string DebuggerDisplay { get; }
    public NewProjectCard(string note);
    public NewProjectCard(long contentId, ProjectCardContentType contentType);
    [CompilerGeneratedAttribute]
public string get_Note();
    [CompilerGeneratedAttribute]
protected void set_Note(string value);
    [CompilerGeneratedAttribute]
public Nullable`1<long> get_ContentId();
    [CompilerGeneratedAttribute]
protected void set_ContentId(Nullable`1<long> value);
    [CompilerGeneratedAttribute]
public Nullable`1<ProjectCardContentType> get_ContentType();
    [CompilerGeneratedAttribute]
protected void set_ContentType(Nullable`1<ProjectCardContentType> value);
    internal string get_DebuggerDisplay();
}
[DebuggerDisplayAttribute("{DebuggerDisplay,nq}")]
public class Octokit.NewProjectColumn : object {
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    public string Name { get; private set; }
    internal string DebuggerDisplay { get; }
    public NewProjectColumn(string name);
    [CompilerGeneratedAttribute]
public string get_Name();
    [CompilerGeneratedAttribute]
private void set_Name(string value);
    internal string get_DebuggerDisplay();
}
[DebuggerDisplayAttribute("{DebuggerDisplay,nq}")]
public class Octokit.NewPublicKey : object {
    [CompilerGeneratedAttribute]
private string <Title>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Key>k__BackingField;
    public string Title { get; public set; }
    public string Key { get; public set; }
    internal string DebuggerDisplay { get; }
    public NewPublicKey(string title, string key);
    [CompilerGeneratedAttribute]
public string get_Title();
    [CompilerGeneratedAttribute]
public void set_Title(string value);
    [CompilerGeneratedAttribute]
public string get_Key();
    [CompilerGeneratedAttribute]
public void set_Key(string value);
    internal string get_DebuggerDisplay();
}
[DebuggerDisplayAttribute("{DebuggerDisplay,nq}")]
public class Octokit.NewPullRequest : object {
    [CompilerGeneratedAttribute]
private string <Title>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<long> <IssueId>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Base>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Head>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<bool> <MaintainerCanModify>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Body>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<bool> <Draft>k__BackingField;
    public string Title { get; private set; }
    public Nullable`1<long> IssueId { get; private set; }
    public string Base { get; private set; }
    public string Head { get; private set; }
    public Nullable`1<bool> MaintainerCanModify { get; public set; }
    public string Body { get; public set; }
    public Nullable`1<bool> Draft { get; public set; }
    internal string DebuggerDisplay { get; }
    public NewPullRequest(string title, string head, string baseRef);
    public NewPullRequest(long issueId, string head, string baseRef);
    [CompilerGeneratedAttribute]
public string get_Title();
    [CompilerGeneratedAttribute]
private void set_Title(string value);
    [CompilerGeneratedAttribute]
public Nullable`1<long> get_IssueId();
    [CompilerGeneratedAttribute]
private void set_IssueId(Nullable`1<long> value);
    [CompilerGeneratedAttribute]
public string get_Base();
    [CompilerGeneratedAttribute]
private void set_Base(string value);
    [CompilerGeneratedAttribute]
public string get_Head();
    [CompilerGeneratedAttribute]
private void set_Head(string value);
    [CompilerGeneratedAttribute]
public Nullable`1<bool> get_MaintainerCanModify();
    [CompilerGeneratedAttribute]
public void set_MaintainerCanModify(Nullable`1<bool> value);
    [CompilerGeneratedAttribute]
public string get_Body();
    [CompilerGeneratedAttribute]
public void set_Body(string value);
    [CompilerGeneratedAttribute]
public Nullable`1<bool> get_Draft();
    [CompilerGeneratedAttribute]
public void set_Draft(Nullable`1<bool> value);
    internal string get_DebuggerDisplay();
}
[DebuggerDisplayAttribute("{DebuggerDisplay,nq}")]
public class Octokit.NewReaction : object {
    [CompilerGeneratedAttribute]
private ReactionType <Content>k__BackingField;
    public ReactionType Content { get; private set; }
    internal string DebuggerDisplay { get; }
    public NewReaction(ReactionType content);
    [CompilerGeneratedAttribute]
public ReactionType get_Content();
    [CompilerGeneratedAttribute]
private void set_Content(ReactionType value);
    internal string get_DebuggerDisplay();
}
[DebuggerDisplayAttribute("{DebuggerDisplay,nq}")]
public class Octokit.NewReference : object {
    private static string _refsPrefix;
    [CompilerGeneratedAttribute]
private string <Ref>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Sha>k__BackingField;
    public string Ref { get; private set; }
    public string Sha { get; private set; }
    internal string DebuggerDisplay { get; }
    public NewReference(string reference, string sha);
    [CompilerGeneratedAttribute]
public string get_Ref();
    [CompilerGeneratedAttribute]
private void set_Ref(string value);
    [CompilerGeneratedAttribute]
public string get_Sha();
    [CompilerGeneratedAttribute]
private void set_Sha(string value);
    private static string GetReference(string reference);
    internal string get_DebuggerDisplay();
}
[DebuggerDisplayAttribute("{DebuggerDisplay,nq}")]
public class Octokit.NewRelease : object {
    [CompilerGeneratedAttribute]
private string <TagName>k__BackingField;
    [CompilerGeneratedAttribute]
private string <TargetCommitish>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Body>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <Draft>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <Prerelease>k__BackingField;
    [CompilerGeneratedAttribute]
private string <DiscussionCategoryName>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <GenerateReleaseNotes>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<MakeLatestQualifier> <MakeLatest>k__BackingField;
    public string TagName { get; private set; }
    public string TargetCommitish { get; public set; }
    public string Name { get; public set; }
    public string Body { get; public set; }
    public bool Draft { get; public set; }
    public bool Prerelease { get; public set; }
    public string DiscussionCategoryName { get; public set; }
    public bool GenerateReleaseNotes { get; public set; }
    public Nullable`1<MakeLatestQualifier> MakeLatest { get; public set; }
    internal string DebuggerDisplay { get; }
    public NewRelease(string tagName);
    [CompilerGeneratedAttribute]
public string get_TagName();
    [CompilerGeneratedAttribute]
private void set_TagName(string value);
    [CompilerGeneratedAttribute]
public string get_TargetCommitish();
    [CompilerGeneratedAttribute]
public void set_TargetCommitish(string value);
    [CompilerGeneratedAttribute]
public string get_Name();
    [CompilerGeneratedAttribute]
public void set_Name(string value);
    [CompilerGeneratedAttribute]
public string get_Body();
    [CompilerGeneratedAttribute]
public void set_Body(string value);
    [CompilerGeneratedAttribute]
public bool get_Draft();
    [CompilerGeneratedAttribute]
public void set_Draft(bool value);
    [CompilerGeneratedAttribute]
public bool get_Prerelease();
    [CompilerGeneratedAttribute]
public void set_Prerelease(bool value);
    [CompilerGeneratedAttribute]
public string get_DiscussionCategoryName();
    [CompilerGeneratedAttribute]
public void set_DiscussionCategoryName(string value);
    [CompilerGeneratedAttribute]
public bool get_GenerateReleaseNotes();
    [CompilerGeneratedAttribute]
public void set_GenerateReleaseNotes(bool value);
    [CompilerGeneratedAttribute]
public Nullable`1<MakeLatestQualifier> get_MakeLatest();
    [CompilerGeneratedAttribute]
public void set_MakeLatest(Nullable`1<MakeLatestQualifier> value);
    internal string get_DebuggerDisplay();
}
[DebuggerDisplayAttribute("{DebuggerDisplay,nq}")]
public class Octokit.NewRepository : object {
    [CompilerGeneratedAttribute]
private Nullable`1<bool> <AutoInit>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Description>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<bool> <HasDownloads>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<bool> <HasIssues>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<bool> <HasProjects>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<bool> <HasWiki>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<bool> <IsTemplate>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Homepage>k__BackingField;
    [CompilerGeneratedAttribute]
private string <GitignoreTemplate>k__BackingField;
    [CompilerGeneratedAttribute]
private string <LicenseTemplate>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<bool> <Private>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<int> <TeamId>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<bool> <DeleteBranchOnMerge>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<RepositoryVisibility> <Visibility>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<bool> <AllowRebaseMerge>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<bool> <AllowSquashMerge>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<bool> <AllowMergeCommit>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<bool> <AllowAutoMerge>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<bool> <UseSquashPrTitleAsDefault>k__BackingField;
    public Nullable`1<bool> AutoInit { get; public set; }
    public string Description { get; public set; }
    public Nullable`1<bool> HasDownloads { get; public set; }
    public Nullable`1<bool> HasIssues { get; public set; }
    public Nullable`1<bool> HasProjects { get; public set; }
    public Nullable`1<bool> HasWiki { get; public set; }
    public Nullable`1<bool> IsTemplate { get; public set; }
    public string Homepage { get; public set; }
    public string GitignoreTemplate { get; public set; }
    public string LicenseTemplate { get; public set; }
    public string Name { get; private set; }
    public Nullable`1<bool> Private { get; public set; }
    public Nullable`1<int> TeamId { get; public set; }
    public Nullable`1<bool> DeleteBranchOnMerge { get; public set; }
    public Nullable`1<RepositoryVisibility> Visibility { get; public set; }
    public Nullable`1<bool> AllowRebaseMerge { get; public set; }
    public Nullable`1<bool> AllowSquashMerge { get; public set; }
    public Nullable`1<bool> AllowMergeCommit { get; public set; }
    public Nullable`1<bool> AllowAutoMerge { get; public set; }
    public Nullable`1<bool> UseSquashPrTitleAsDefault { get; public set; }
    internal string DebuggerDisplay { get; }
    public NewRepository(string name);
    [CompilerGeneratedAttribute]
public Nullable`1<bool> get_AutoInit();
    [CompilerGeneratedAttribute]
public void set_AutoInit(Nullable`1<bool> value);
    [CompilerGeneratedAttribute]
public string get_Description();
    [CompilerGeneratedAttribute]
public void set_Description(string value);
    [CompilerGeneratedAttribute]
public Nullable`1<bool> get_HasDownloads();
    [CompilerGeneratedAttribute]
public void set_HasDownloads(Nullable`1<bool> value);
    [CompilerGeneratedAttribute]
public Nullable`1<bool> get_HasIssues();
    [CompilerGeneratedAttribute]
public void set_HasIssues(Nullable`1<bool> value);
    [CompilerGeneratedAttribute]
public Nullable`1<bool> get_HasProjects();
    [CompilerGeneratedAttribute]
public void set_HasProjects(Nullable`1<bool> value);
    [CompilerGeneratedAttribute]
public Nullable`1<bool> get_HasWiki();
    [CompilerGeneratedAttribute]
public void set_HasWiki(Nullable`1<bool> value);
    [CompilerGeneratedAttribute]
public Nullable`1<bool> get_IsTemplate();
    [CompilerGeneratedAttribute]
public void set_IsTemplate(Nullable`1<bool> value);
    [CompilerGeneratedAttribute]
public string get_Homepage();
    [CompilerGeneratedAttribute]
public void set_Homepage(string value);
    [CompilerGeneratedAttribute]
public string get_GitignoreTemplate();
    [CompilerGeneratedAttribute]
public void set_GitignoreTemplate(string value);
    [CompilerGeneratedAttribute]
public string get_LicenseTemplate();
    [CompilerGeneratedAttribute]
public void set_LicenseTemplate(string value);
    [CompilerGeneratedAttribute]
public string get_Name();
    [CompilerGeneratedAttribute]
private void set_Name(string value);
    [CompilerGeneratedAttribute]
public Nullable`1<bool> get_Private();
    [CompilerGeneratedAttribute]
public void set_Private(Nullable`1<bool> value);
    [CompilerGeneratedAttribute]
public Nullable`1<int> get_TeamId();
    [CompilerGeneratedAttribute]
public void set_TeamId(Nullable`1<int> value);
    [CompilerGeneratedAttribute]
public Nullable`1<bool> get_DeleteBranchOnMerge();
    [CompilerGeneratedAttribute]
public void set_DeleteBranchOnMerge(Nullable`1<bool> value);
    [CompilerGeneratedAttribute]
public Nullable`1<RepositoryVisibility> get_Visibility();
    [CompilerGeneratedAttribute]
public void set_Visibility(Nullable`1<RepositoryVisibility> value);
    [CompilerGeneratedAttribute]
public Nullable`1<bool> get_AllowRebaseMerge();
    [CompilerGeneratedAttribute]
public void set_AllowRebaseMerge(Nullable`1<bool> value);
    [CompilerGeneratedAttribute]
public Nullable`1<bool> get_AllowSquashMerge();
    [CompilerGeneratedAttribute]
public void set_AllowSquashMerge(Nullable`1<bool> value);
    [CompilerGeneratedAttribute]
public Nullable`1<bool> get_AllowMergeCommit();
    [CompilerGeneratedAttribute]
public void set_AllowMergeCommit(Nullable`1<bool> value);
    [CompilerGeneratedAttribute]
public Nullable`1<bool> get_AllowAutoMerge();
    [CompilerGeneratedAttribute]
public void set_AllowAutoMerge(Nullable`1<bool> value);
    [CompilerGeneratedAttribute]
public Nullable`1<bool> get_UseSquashPrTitleAsDefault();
    [CompilerGeneratedAttribute]
public void set_UseSquashPrTitleAsDefault(Nullable`1<bool> value);
    internal string get_DebuggerDisplay();
}
[DebuggerDisplayAttribute("{DebuggerDisplay,nq}")]
public class Octokit.NewRepositoryFork : object {
    [CompilerGeneratedAttribute]
private string <Organization>k__BackingField;
    public string Organization { get; public set; }
    internal string DebuggerDisplay { get; }
    [CompilerGeneratedAttribute]
public string get_Organization();
    [CompilerGeneratedAttribute]
public void set_Organization(string value);
    internal string get_DebuggerDisplay();
}
[DebuggerDisplayAttribute("{DebuggerDisplay,nq}")]
public class Octokit.NewRepositoryFromTemplate : object {
    [CompilerGeneratedAttribute]
private string <Owner>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Description>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <Private>k__BackingField;
    public string Owner { get; public set; }
    public string Name { get; public set; }
    public string Description { get; public set; }
    public bool Private { get; public set; }
    internal string DebuggerDisplay { get; }
    public NewRepositoryFromTemplate(string name);
    [CompilerGeneratedAttribute]
public string get_Owner();
    [CompilerGeneratedAttribute]
public void set_Owner(string value);
    [CompilerGeneratedAttribute]
public string get_Name();
    [CompilerGeneratedAttribute]
public void set_Name(string value);
    [CompilerGeneratedAttribute]
public string get_Description();
    [CompilerGeneratedAttribute]
public void set_Description(string value);
    [CompilerGeneratedAttribute]
public bool get_Private();
    [CompilerGeneratedAttribute]
public void set_Private(bool value);
    internal string get_DebuggerDisplay();
}
[DebuggerDisplayAttribute("{DebuggerDisplay,nq}")]
public class Octokit.NewRepositoryHook : object {
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    [CompilerGeneratedAttribute]
private IReadOnlyDictionary`2<string, string> <Config>k__BackingField;
    [CompilerGeneratedAttribute]
private IEnumerable`1<string> <Events>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <Active>k__BackingField;
    public string Name { get; private set; }
    public IReadOnlyDictionary`2<string, string> Config { get; protected set; }
    public IEnumerable`1<string> Events { get; public set; }
    public bool Active { get; public set; }
    internal string DebuggerDisplay { get; }
    public NewRepositoryHook(string name, IReadOnlyDictionary`2<string, string> config);
    [CompilerGeneratedAttribute]
public string get_Name();
    [CompilerGeneratedAttribute]
private void set_Name(string value);
    [CompilerGeneratedAttribute]
public IReadOnlyDictionary`2<string, string> get_Config();
    [CompilerGeneratedAttribute]
protected void set_Config(IReadOnlyDictionary`2<string, string> value);
    [CompilerGeneratedAttribute]
public IEnumerable`1<string> get_Events();
    [CompilerGeneratedAttribute]
public void set_Events(IEnumerable`1<string> value);
    [CompilerGeneratedAttribute]
public bool get_Active();
    [CompilerGeneratedAttribute]
public void set_Active(bool value);
    public virtual NewRepositoryHook ToRequest();
    internal string get_DebuggerDisplay();
}
[DebuggerDisplayAttribute("{DebuggerDisplay,nq}")]
public class Octokit.NewRepositoryWebHook : NewRepositoryHook {
    [CompilerGeneratedAttribute]
private string <Url>k__BackingField;
    [CompilerGeneratedAttribute]
private WebHookContentType <ContentType>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Secret>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <InsecureSsl>k__BackingField;
    public string Url { get; protected set; }
    public WebHookContentType ContentType { get; public set; }
    public string Secret { get; public set; }
    public bool InsecureSsl { get; public set; }
    public NewRepositoryWebHook(string name, IReadOnlyDictionary`2<string, string> config, string url);
    [CompilerGeneratedAttribute]
public string get_Url();
    [CompilerGeneratedAttribute]
protected void set_Url(string value);
    [CompilerGeneratedAttribute]
public WebHookContentType get_ContentType();
    [CompilerGeneratedAttribute]
public void set_ContentType(WebHookContentType value);
    [CompilerGeneratedAttribute]
public string get_Secret();
    [CompilerGeneratedAttribute]
public void set_Secret(string value);
    [CompilerGeneratedAttribute]
public bool get_InsecureSsl();
    [CompilerGeneratedAttribute]
public void set_InsecureSsl(bool value);
    public virtual NewRepositoryHook ToRequest();
    private Dictionary`2<string, string> GetWebHookConfig();
}
[DebuggerDisplayAttribute("{DebuggerDisplay,nq}")]
public class Octokit.NewSubscription : object {
    [CompilerGeneratedAttribute]
private bool <Subscribed>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <Ignored>k__BackingField;
    public bool Subscribed { get; public set; }
    public bool Ignored { get; public set; }
    internal string DebuggerDisplay { get; }
    [CompilerGeneratedAttribute]
public bool get_Subscribed();
    [CompilerGeneratedAttribute]
public void set_Subscribed(bool value);
    [CompilerGeneratedAttribute]
public bool get_Ignored();
    [CompilerGeneratedAttribute]
public void set_Ignored(bool value);
    internal string get_DebuggerDisplay();
}
[DebuggerDisplayAttribute("{DebuggerDisplay,nq}")]
public class Octokit.NewTag : object {
    [CompilerGeneratedAttribute]
private string <Tag>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Message>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Object>k__BackingField;
    [CompilerGeneratedAttribute]
private TaggedType <Type>k__BackingField;
    [CompilerGeneratedAttribute]
private Committer <Tagger>k__BackingField;
    public string Tag { get; public set; }
    public string Message { get; public set; }
    public string Object { get; public set; }
    public TaggedType Type { get; public set; }
    public Committer Tagger { get; public set; }
    internal string DebuggerDisplay { get; }
    [CompilerGeneratedAttribute]
public string get_Tag();
    [CompilerGeneratedAttribute]
public void set_Tag(string value);
    [CompilerGeneratedAttribute]
public string get_Message();
    [CompilerGeneratedAttribute]
public void set_Message(string value);
    [CompilerGeneratedAttribute]
public string get_Object();
    [CompilerGeneratedAttribute]
public void set_Object(string value);
    [CompilerGeneratedAttribute]
public TaggedType get_Type();
    [CompilerGeneratedAttribute]
public void set_Type(TaggedType value);
    [CompilerGeneratedAttribute]
public Committer get_Tagger();
    [CompilerGeneratedAttribute]
public void set_Tagger(Committer value);
    internal string get_DebuggerDisplay();
}
[DebuggerDisplayAttribute("{DebuggerDisplay,nq}")]
public class Octokit.NewTeam : object {
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Description>k__BackingField;
    [CompilerGeneratedAttribute]
private Collection`1<string> <Maintainers>k__BackingField;
    [CompilerGeneratedAttribute]
private Collection`1<string> <RepoNames>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<TeamPrivacy> <Privacy>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<TeamPermission> <Permission>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<long> <ParentTeamId>k__BackingField;
    public string Name { get; private set; }
    public string Description { get; public set; }
    public Collection`1<string> Maintainers { get; protected set; }
    public Collection`1<string> RepoNames { get; protected set; }
    public Nullable`1<TeamPrivacy> Privacy { get; public set; }
    public Nullable`1<TeamPermission> Permission { get; public set; }
    public Nullable`1<long> ParentTeamId { get; public set; }
    internal string DebuggerDisplay { get; }
    public NewTeam(string name);
    [CompilerGeneratedAttribute]
public string get_Name();
    [CompilerGeneratedAttribute]
private void set_Name(string value);
    [CompilerGeneratedAttribute]
public string get_Description();
    [CompilerGeneratedAttribute]
public void set_Description(string value);
    [CompilerGeneratedAttribute]
public Collection`1<string> get_Maintainers();
    [CompilerGeneratedAttribute]
protected void set_Maintainers(Collection`1<string> value);
    [CompilerGeneratedAttribute]
public Collection`1<string> get_RepoNames();
    [CompilerGeneratedAttribute]
protected void set_RepoNames(Collection`1<string> value);
    [CompilerGeneratedAttribute]
public Nullable`1<TeamPrivacy> get_Privacy();
    [CompilerGeneratedAttribute]
public void set_Privacy(Nullable`1<TeamPrivacy> value);
    [CompilerGeneratedAttribute]
public Nullable`1<TeamPermission> get_Permission();
    [CompilerGeneratedAttribute]
public void set_Permission(Nullable`1<TeamPermission> value);
    [CompilerGeneratedAttribute]
public Nullable`1<long> get_ParentTeamId();
    [CompilerGeneratedAttribute]
public void set_ParentTeamId(Nullable`1<long> value);
    internal string get_DebuggerDisplay();
}
[DebuggerDisplayAttribute("{DebuggerDisplay,nq}")]
public class Octokit.NewThreadSubscription : object {
    [CompilerGeneratedAttribute]
private bool <Subscribed>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <Ignored>k__BackingField;
    public bool Subscribed { get; public set; }
    public bool Ignored { get; public set; }
    internal string DebuggerDisplay { get; }
    [CompilerGeneratedAttribute]
public bool get_Subscribed();
    [CompilerGeneratedAttribute]
public void set_Subscribed(bool value);
    [CompilerGeneratedAttribute]
public bool get_Ignored();
    [CompilerGeneratedAttribute]
public void set_Ignored(bool value);
    internal string get_DebuggerDisplay();
}
[DebuggerDisplayAttribute("{DebuggerDisplay,nq}")]
public class Octokit.NewTree : object {
    [CompilerGeneratedAttribute]
private string <BaseTree>k__BackingField;
    [CompilerGeneratedAttribute]
private ICollection`1<NewTreeItem> <Tree>k__BackingField;
    public string BaseTree { get; public set; }
    public ICollection`1<NewTreeItem> Tree { get; private set; }
    internal string DebuggerDisplay { get; }
    [CompilerGeneratedAttribute]
public string get_BaseTree();
    [CompilerGeneratedAttribute]
public void set_BaseTree(string value);
    [CompilerGeneratedAttribute]
public ICollection`1<NewTreeItem> get_Tree();
    [CompilerGeneratedAttribute]
private void set_Tree(ICollection`1<NewTreeItem> value);
    internal string get_DebuggerDisplay();
}
[DebuggerDisplayAttribute("{DebuggerDisplay,nq}")]
public class Octokit.NewTreeItem : object {
    [CompilerGeneratedAttribute]
private string <Path>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Mode>k__BackingField;
    [CompilerGeneratedAttribute]
private TreeType <Type>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Sha>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Content>k__BackingField;
    public string Path { get; public set; }
    public string Mode { get; public set; }
    public TreeType Type { get; public set; }
    public string Sha { get; public set; }
    public string Content { get; public set; }
    internal string DebuggerDisplay { get; }
    [CompilerGeneratedAttribute]
public string get_Path();
    [CompilerGeneratedAttribute]
public void set_Path(string value);
    [CompilerGeneratedAttribute]
public string get_Mode();
    [CompilerGeneratedAttribute]
public void set_Mode(string value);
    [CompilerGeneratedAttribute]
public TreeType get_Type();
    [CompilerGeneratedAttribute]
public void set_Type(TreeType value);
    [CompilerGeneratedAttribute]
public string get_Sha();
    [CompilerGeneratedAttribute]
public void set_Sha(string value);
    [CompilerGeneratedAttribute]
public string get_Content();
    [CompilerGeneratedAttribute]
public void set_Content(string value);
    internal string get_DebuggerDisplay();
}
[DebuggerDisplayAttribute("{DebuggerDisplay,nq}")]
public class Octokit.NewUser : object {
    [CompilerGeneratedAttribute]
private string <Login>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Email>k__BackingField;
    public string Login { get; protected set; }
    public string Email { get; protected set; }
    internal string DebuggerDisplay { get; }
    public NewUser(string login, string email);
    [CompilerGeneratedAttribute]
public string get_Login();
    [CompilerGeneratedAttribute]
protected void set_Login(string value);
    [CompilerGeneratedAttribute]
public string get_Email();
    [CompilerGeneratedAttribute]
protected void set_Email(string value);
    internal string get_DebuggerDisplay();
}
public class Octokit.NotFoundException : ApiException {
    public NotFoundException(IResponse response);
    public NotFoundException(string message, HttpStatusCode statusCode);
    public NotFoundException(IResponse response, Exception innerException);
    protected NotFoundException(SerializationInfo info, StreamingContext context);
}
[DebuggerDisplayAttribute("{DebuggerDisplay,nq}")]
public class Octokit.Notification : object {
    [CompilerGeneratedAttribute]
private string <Id>k__BackingField;
    [CompilerGeneratedAttribute]
private Repository <Repository>k__BackingField;
    [CompilerGeneratedAttribute]
private NotificationInfo <Subject>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Reason>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <Unread>k__BackingField;
    [CompilerGeneratedAttribute]
private string <UpdatedAt>k__BackingField;
    [CompilerGeneratedAttribute]
private string <LastReadAt>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Url>k__BackingField;
    public string Id { get; private set; }
    public Repository Repository { get; private set; }
    public NotificationInfo Subject { get; private set; }
    public string Reason { get; private set; }
    public bool Unread { get; private set; }
    public string UpdatedAt { get; private set; }
    public string LastReadAt { get; private set; }
    public string Url { get; private set; }
    internal string DebuggerDisplay { get; }
    public Notification(string id, Repository repository, NotificationInfo subject, string reason, bool unread, string updatedAt, string lastReadAt, string url);
    [CompilerGeneratedAttribute]
public string get_Id();
    [CompilerGeneratedAttribute]
private void set_Id(string value);
    [CompilerGeneratedAttribute]
public Repository get_Repository();
    [CompilerGeneratedAttribute]
private void set_Repository(Repository value);
    [CompilerGeneratedAttribute]
public NotificationInfo get_Subject();
    [CompilerGeneratedAttribute]
private void set_Subject(NotificationInfo value);
    [CompilerGeneratedAttribute]
public string get_Reason();
    [CompilerGeneratedAttribute]
private void set_Reason(string value);
    [CompilerGeneratedAttribute]
public bool get_Unread();
    [CompilerGeneratedAttribute]
private void set_Unread(bool value);
    [CompilerGeneratedAttribute]
public string get_UpdatedAt();
    [CompilerGeneratedAttribute]
private void set_UpdatedAt(string value);
    [CompilerGeneratedAttribute]
public string get_LastReadAt();
    [CompilerGeneratedAttribute]
private void set_LastReadAt(string value);
    [CompilerGeneratedAttribute]
public string get_Url();
    [CompilerGeneratedAttribute]
private void set_Url(string value);
    internal string get_DebuggerDisplay();
}
[DebuggerDisplayAttribute("{DebuggerDisplay,nq}")]
public class Octokit.NotificationInfo : object {
    [CompilerGeneratedAttribute]
private string <Title>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Url>k__BackingField;
    [CompilerGeneratedAttribute]
private string <LatestCommentUrl>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Type>k__BackingField;
    public string Title { get; private set; }
    public string Url { get; private set; }
    public string LatestCommentUrl { get; private set; }
    public string Type { get; private set; }
    internal string DebuggerDisplay { get; }
    public NotificationInfo(string title, string url, string latestCommentUrl, string type);
    [CompilerGeneratedAttribute]
public string get_Title();
    [CompilerGeneratedAttribute]
private void set_Title(string value);
    [CompilerGeneratedAttribute]
public string get_Url();
    [CompilerGeneratedAttribute]
private void set_Url(string value);
    [CompilerGeneratedAttribute]
public string get_LatestCommentUrl();
    [CompilerGeneratedAttribute]
private void set_LatestCommentUrl(string value);
    [CompilerGeneratedAttribute]
public string get_Type();
    [CompilerGeneratedAttribute]
private void set_Type(string value);
    internal string get_DebuggerDisplay();
}
public class Octokit.NotificationsClient : ApiClient {
    public NotificationsClient(IApiConnection apiConnection);
    [ManualRouteAttribute("GET", "/notifications")]
public sealed virtual Task`1<IReadOnlyList`1<Notification>> GetAllForCurrent();
    [ManualRouteAttribute("GET", "/notifications")]
public sealed virtual Task`1<IReadOnlyList`1<Notification>> GetAllForCurrent(ApiOptions options);
    [ManualRouteAttribute("GET", "/notifications")]
public sealed virtual Task`1<IReadOnlyList`1<Notification>> GetAllForCurrent(NotificationsRequest request);
    [ManualRouteAttribute("GET", "/notifications")]
public sealed virtual Task`1<IReadOnlyList`1<Notification>> GetAllForCurrent(NotificationsRequest request, ApiOptions options);
    [ManualRouteAttribute("GET", "/repos/{owner}/{repo}/notifications")]
public sealed virtual Task`1<IReadOnlyList`1<Notification>> GetAllForRepository(string owner, string name);
    [ManualRouteAttribute("GET", "/repositories/{id}/notifications")]
public sealed virtual Task`1<IReadOnlyList`1<Notification>> GetAllForRepository(long repositoryId);
    [ManualRouteAttribute("GET", "/repos/{owner}/{repo}/notifications")]
public sealed virtual Task`1<IReadOnlyList`1<Notification>> GetAllForRepository(string owner, string name, ApiOptions options);
    [ManualRouteAttribute("GET", "/repositories/{id}/notifications")]
public sealed virtual Task`1<IReadOnlyList`1<Notification>> GetAllForRepository(long repositoryId, ApiOptions options);
    [ManualRouteAttribute("GET", "/repos/{owner}/{repo}/notifications")]
public sealed virtual Task`1<IReadOnlyList`1<Notification>> GetAllForRepository(string owner, string name, NotificationsRequest request);
    [ManualRouteAttribute("GET", "/repositories/{id}/notifications")]
public sealed virtual Task`1<IReadOnlyList`1<Notification>> GetAllForRepository(long repositoryId, NotificationsRequest request);
    [ManualRouteAttribute("GET", "/repos/{owner}/{repo}/notifications")]
public sealed virtual Task`1<IReadOnlyList`1<Notification>> GetAllForRepository(string owner, string name, NotificationsRequest request, ApiOptions options);
    [ManualRouteAttribute("GET", "/repositories/{id}/notifications")]
public sealed virtual Task`1<IReadOnlyList`1<Notification>> GetAllForRepository(long repositoryId, NotificationsRequest request, ApiOptions options);
    [ManualRouteAttribute("PUT", "/notifications")]
public sealed virtual Task MarkAsRead();
    [ManualRouteAttribute("PUT", "/notifications")]
public sealed virtual Task MarkAsRead(MarkAsReadRequest markAsReadRequest);
    [ManualRouteAttribute("PUT", "/repos/{owner}/{repo}/notifications")]
public sealed virtual Task MarkAsReadForRepository(string owner, string name);
    [ManualRouteAttribute("PUT", "/repositories/{id}/notifications")]
public sealed virtual Task MarkAsReadForRepository(long repositoryId);
    [ManualRouteAttribute("PUT", "/repos/{owner}/{repo}/notifications")]
public sealed virtual Task MarkAsReadForRepository(string owner, string name, MarkAsReadRequest markAsReadRequest);
    [ManualRouteAttribute("PUT", "/repositories/{id}/notifications")]
public sealed virtual Task MarkAsReadForRepository(long repositoryId, MarkAsReadRequest markAsReadRequest);
    [ManualRouteAttribute("GET", "/notifications/threads/{thread_id}")]
public sealed virtual Task`1<Notification> Get(int threadId);
    [ManualRouteAttribute("PATCH", "/notifications/threads/{thread_id}")]
public sealed virtual Task MarkAsRead(int threadId);
    [ManualRouteAttribute("GET", "/notifications/threads/{thread_id}/subscription")]
public sealed virtual Task`1<ThreadSubscription> GetThreadSubscription(int threadId);
    [ManualRouteAttribute("PUT", "/notifications/threads/{thread_id}/subscription")]
public sealed virtual Task`1<ThreadSubscription> SetThreadSubscription(int threadId, NewThreadSubscription threadSubscription);
    [ManualRouteAttribute("DELETE", "/notifications/threads/{thread_id}/subscription")]
public sealed virtual Task DeleteThreadSubscription(int threadId);
}
[DebuggerDisplayAttribute("{DebuggerDisplay,nq}")]
public class Octokit.NotificationsRequest : RequestParameters {
    [CompilerGeneratedAttribute]
private bool <All>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <Participating>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<DateTimeOffset> <Since>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<DateTimeOffset> <Before>k__BackingField;
    public bool All { get; public set; }
    public bool Participating { get; public set; }
    public Nullable`1<DateTimeOffset> Since { get; public set; }
    public Nullable`1<DateTimeOffset> Before { get; public set; }
    internal string DebuggerDisplay { get; }
    [CompilerGeneratedAttribute]
public bool get_All();
    [CompilerGeneratedAttribute]
public void set_All(bool value);
    [CompilerGeneratedAttribute]
public bool get_Participating();
    [CompilerGeneratedAttribute]
public void set_Participating(bool value);
    [CompilerGeneratedAttribute]
public Nullable`1<DateTimeOffset> get_Since();
    [CompilerGeneratedAttribute]
public void set_Since(Nullable`1<DateTimeOffset> value);
    [CompilerGeneratedAttribute]
public Nullable`1<DateTimeOffset> get_Before();
    [CompilerGeneratedAttribute]
public void set_Before(Nullable`1<DateTimeOffset> value);
    internal string get_DebuggerDisplay();
}
public class Octokit.OauthClient : object {
    private IConnection connection;
    private Uri hostAddress;
    public OauthClient(IConnection connection);
    [DotNetSpecificRouteAttribute]
public sealed virtual Uri GetGitHubLoginUrl(OauthLoginRequest request);
    [AsyncStateMachineAttribute("Octokit.OauthClient/<CreateAccessToken>d__4")]
[ManualRouteAttribute("POST", "/login/oauth/access_token")]
public sealed virtual Task`1<OauthToken> CreateAccessToken(OauthTokenRequest request);
    [AsyncStateMachineAttribute("Octokit.OauthClient/<InitiateDeviceFlow>d__5")]
[ManualRouteAttribute("POST", "/login/device/code")]
public sealed virtual Task`1<OauthDeviceFlowResponse> InitiateDeviceFlow(OauthDeviceFlowRequest request);
    [AsyncStateMachineAttribute("Octokit.OauthClient/<CreateAccessTokenForDeviceFlow>d__6")]
[ManualRouteAttribute("POST", "/login/oauth/access_token")]
public sealed virtual Task`1<OauthToken> CreateAccessTokenForDeviceFlow(string clientId, OauthDeviceFlowResponse deviceFlowResponse);
    [AsyncStateMachineAttribute("Octokit.OauthClient/<CreateAccessTokenFromRenewalToken>d__7")]
[ManualRouteAttribute("POST", "/login/oauth/access_token")]
public sealed virtual Task`1<OauthToken> CreateAccessTokenFromRenewalToken(OauthTokenRenewalRequest request);
}
[DebuggerDisplayAttribute("{DebuggerDisplay,nq}")]
public class Octokit.OauthDeviceFlowRequest : RequestParameters {
    [CompilerGeneratedAttribute]
private string <ClientId>k__BackingField;
    [CompilerGeneratedAttribute]
private Collection`1<string> <Scopes>k__BackingField;
    [ParameterAttribute]
public string ClientId { get; private set; }
    [ParameterAttribute]
public Collection`1<string> Scopes { get; private set; }
    internal string DebuggerDisplay { get; }
    public OauthDeviceFlowRequest(string clientId);
    [CompilerGeneratedAttribute]
public string get_ClientId();
    [CompilerGeneratedAttribute]
private void set_ClientId(string value);
    [CompilerGeneratedAttribute]
public Collection`1<string> get_Scopes();
    [CompilerGeneratedAttribute]
private void set_Scopes(Collection`1<string> value);
    internal string get_DebuggerDisplay();
}
[DebuggerDisplayAttribute("{DebuggerDisplay,nq}")]
public class Octokit.OauthDeviceFlowResponse : object {
    [CompilerGeneratedAttribute]
private string <DeviceCode>k__BackingField;
    [CompilerGeneratedAttribute]
private string <UserCode>k__BackingField;
    [CompilerGeneratedAttribute]
private string <VerificationUri>k__BackingField;
    [CompilerGeneratedAttribute]
private int <ExpiresIn>k__BackingField;
    [CompilerGeneratedAttribute]
private int <Interval>k__BackingField;
    public string DeviceCode { get; private set; }
    public string UserCode { get; private set; }
    public string VerificationUri { get; private set; }
    public int ExpiresIn { get; private set; }
    public int Interval { get; private set; }
    internal string DebuggerDisplay { get; }
    public OauthDeviceFlowResponse(string deviceCode, string userCode, string verificationUri, int expiresIn, int interval);
    [CompilerGeneratedAttribute]
public string get_DeviceCode();
    [CompilerGeneratedAttribute]
private void set_DeviceCode(string value);
    [CompilerGeneratedAttribute]
public string get_UserCode();
    [CompilerGeneratedAttribute]
private void set_UserCode(string value);
    [CompilerGeneratedAttribute]
public string get_VerificationUri();
    [CompilerGeneratedAttribute]
private void set_VerificationUri(string value);
    [CompilerGeneratedAttribute]
public int get_ExpiresIn();
    [CompilerGeneratedAttribute]
private void set_ExpiresIn(int value);
    [CompilerGeneratedAttribute]
public int get_Interval();
    [CompilerGeneratedAttribute]
private void set_Interval(int value);
    internal string get_DebuggerDisplay();
}
[DebuggerDisplayAttribute("{DebuggerDisplay,nq}")]
public class Octokit.OauthLoginRequest : RequestParameters {
    [CompilerGeneratedAttribute]
private string <ClientId>k__BackingField;
    [CompilerGeneratedAttribute]
private Uri <RedirectUri>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Login>k__BackingField;
    [CompilerGeneratedAttribute]
private Collection`1<string> <Scopes>k__BackingField;
    [CompilerGeneratedAttribute]
private string <State>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<bool> <AllowSignup>k__BackingField;
    [ParameterAttribute]
public string ClientId { get; private set; }
    [ParameterAttribute]
public Uri RedirectUri { get; public set; }
    [ParameterAttribute]
public string Login { get; public set; }
    [ParameterAttribute]
public Collection`1<string> Scopes { get; private set; }
    [ParameterAttribute]
public string State { get; public set; }
    [ParameterAttribute]
public Nullable`1<bool> AllowSignup { get; public set; }
    internal string DebuggerDisplay { get; }
    public OauthLoginRequest(string clientId);
    [CompilerGeneratedAttribute]
public string get_ClientId();
    [CompilerGeneratedAttribute]
private void set_ClientId(string value);
    [CompilerGeneratedAttribute]
public Uri get_RedirectUri();
    [CompilerGeneratedAttribute]
public void set_RedirectUri(Uri value);
    [CompilerGeneratedAttribute]
public string get_Login();
    [CompilerGeneratedAttribute]
public void set_Login(string value);
    [CompilerGeneratedAttribute]
public Collection`1<string> get_Scopes();
    [CompilerGeneratedAttribute]
private void set_Scopes(Collection`1<string> value);
    [CompilerGeneratedAttribute]
public string get_State();
    [CompilerGeneratedAttribute]
public void set_State(string value);
    [CompilerGeneratedAttribute]
public Nullable`1<bool> get_AllowSignup();
    [CompilerGeneratedAttribute]
public void set_AllowSignup(Nullable`1<bool> value);
    internal string get_DebuggerDisplay();
}
[DebuggerDisplayAttribute("{DebuggerDisplay,nq}")]
public class Octokit.OauthToken : object {
    [CompilerGeneratedAttribute]
private string <TokenType>k__BackingField;
    [CompilerGeneratedAttribute]
private string <AccessToken>k__BackingField;
    [CompilerGeneratedAttribute]
private int <ExpiresIn>k__BackingField;
    [CompilerGeneratedAttribute]
private string <RefreshToken>k__BackingField;
    [CompilerGeneratedAttribute]
private int <RefreshTokenExpiresIn>k__BackingField;
    [CompilerGeneratedAttribute]
private IReadOnlyList`1<string> <Scope>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Error>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ErrorDescription>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ErrorUri>k__BackingField;
    public string TokenType { get; private set; }
    public string AccessToken { get; private set; }
    [ParameterAttribute]
public int ExpiresIn { get; private set; }
    [ParameterAttribute]
public string RefreshToken { get; private set; }
    [ParameterAttribute]
public int RefreshTokenExpiresIn { get; private set; }
    public IReadOnlyList`1<string> Scope { get; private set; }
    [ParameterAttribute]
public string Error { get; private set; }
    [ParameterAttribute]
public string ErrorDescription { get; private set; }
    [ParameterAttribute]
public string ErrorUri { get; private set; }
    internal string DebuggerDisplay { get; }
    [ObsoleteAttribute("This constructor is being deprecated and will be removed in the future. Use OauthToken.OauthToken (with refreshToken paramters) instead.")]
public OauthToken(string tokenType, string accessToken, IReadOnlyList`1<string> scope, string error, string errorDescription, string errorUri);
    public OauthToken(string tokenType, string accessToken, int expiresIn, string refreshToken, int refreshTokenExpiresIn, IReadOnlyList`1<string> scope, string error, string errorDescription, string errorUri);
    [CompilerGeneratedAttribute]
public string get_TokenType();
    [CompilerGeneratedAttribute]
private void set_TokenType(string value);
    [CompilerGeneratedAttribute]
public string get_AccessToken();
    [CompilerGeneratedAttribute]
private void set_AccessToken(string value);
    [CompilerGeneratedAttribute]
public int get_ExpiresIn();
    [CompilerGeneratedAttribute]
private void set_ExpiresIn(int value);
    [CompilerGeneratedAttribute]
public string get_RefreshToken();
    [CompilerGeneratedAttribute]
private void set_RefreshToken(string value);
    [CompilerGeneratedAttribute]
public int get_RefreshTokenExpiresIn();
    [CompilerGeneratedAttribute]
private void set_RefreshTokenExpiresIn(int value);
    [CompilerGeneratedAttribute]
public IReadOnlyList`1<string> get_Scope();
    [CompilerGeneratedAttribute]
private void set_Scope(IReadOnlyList`1<string> value);
    [CompilerGeneratedAttribute]
public string get_Error();
    [CompilerGeneratedAttribute]
private void set_Error(string value);
    [CompilerGeneratedAttribute]
public string get_ErrorDescription();
    [CompilerGeneratedAttribute]
private void set_ErrorDescription(string value);
    [CompilerGeneratedAttribute]
public string get_ErrorUri();
    [CompilerGeneratedAttribute]
private void set_ErrorUri(string value);
    internal string get_DebuggerDisplay();
}
[DebuggerDisplayAttribute("{DebuggerDisplay,nq}")]
public class Octokit.OauthTokenRenewalRequest : RequestParameters {
    [CompilerGeneratedAttribute]
private string <ClientId>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ClientSecret>k__BackingField;
    [CompilerGeneratedAttribute]
private string <GrantType>k__BackingField;
    [CompilerGeneratedAttribute]
private string <RefreshToken>k__BackingField;
    [ParameterAttribute]
public string ClientId { get; private set; }
    [ParameterAttribute]
public string ClientSecret { get; private set; }
    [ParameterAttribute]
public string GrantType { get; private set; }
    [ParameterAttribute]
public string RefreshToken { get; private set; }
    internal string DebuggerDisplay { get; }
    public OauthTokenRenewalRequest(string clientId, string clientSecret, string refreshToken);
    [CompilerGeneratedAttribute]
public string get_ClientId();
    [CompilerGeneratedAttribute]
private void set_ClientId(string value);
    [CompilerGeneratedAttribute]
public string get_ClientSecret();
    [CompilerGeneratedAttribute]
private void set_ClientSecret(string value);
    [CompilerGeneratedAttribute]
public string get_GrantType();
    [CompilerGeneratedAttribute]
private void set_GrantType(string value);
    [CompilerGeneratedAttribute]
public string get_RefreshToken();
    [CompilerGeneratedAttribute]
private void set_RefreshToken(string value);
    internal string get_DebuggerDisplay();
}
[DebuggerDisplayAttribute("{DebuggerDisplay,nq}")]
public class Octokit.OauthTokenRequest : RequestParameters {
    [CompilerGeneratedAttribute]
private string <ClientId>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ClientSecret>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Code>k__BackingField;
    [CompilerGeneratedAttribute]
private Uri <RedirectUri>k__BackingField;
    [ParameterAttribute]
public string ClientId { get; private set; }
    [ParameterAttribute]
public string ClientSecret { get; private set; }
    [ParameterAttribute]
public string Code { get; private set; }
    [ParameterAttribute]
public Uri RedirectUri { get; public set; }
    internal string DebuggerDisplay { get; }
    public OauthTokenRequest(string clientId, string clientSecret, string code);
    [CompilerGeneratedAttribute]
public string get_ClientId();
    [CompilerGeneratedAttribute]
private void set_ClientId(string value);
    [CompilerGeneratedAttribute]
public string get_ClientSecret();
    [CompilerGeneratedAttribute]
private void set_ClientSecret(string value);
    [CompilerGeneratedAttribute]
public string get_Code();
    [CompilerGeneratedAttribute]
private void set_Code(string value);
    [CompilerGeneratedAttribute]
public Uri get_RedirectUri();
    [CompilerGeneratedAttribute]
public void set_RedirectUri(Uri value);
    internal string get_DebuggerDisplay();
}
[DebuggerDisplayAttribute("{DebuggerDisplay,nq}")]
internal class Octokit.OauthTokenRequestForDeviceFlow : RequestParameters {
    [CompilerGeneratedAttribute]
private string <ClientId>k__BackingField;
    [CompilerGeneratedAttribute]
private string <DeviceCode>k__BackingField;
    [ParameterAttribute]
public string ClientId { get; private set; }
    [ParameterAttribute]
public string DeviceCode { get; private set; }
    [ParameterAttribute]
public string GrantType { get; }
    internal string DebuggerDisplay { get; }
    public OauthTokenRequestForDeviceFlow(string clientId, string deviceCode);
    [CompilerGeneratedAttribute]
public string get_ClientId();
    [CompilerGeneratedAttribute]
private void set_ClientId(string value);
    [CompilerGeneratedAttribute]
public string get_DeviceCode();
    [CompilerGeneratedAttribute]
private void set_DeviceCode(string value);
    public string get_GrantType();
    internal string get_DebuggerDisplay();
}
[ExcludeFromCtorWithAllPropertiesConventionTestAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[DebuggerDisplayAttribute("{DebuggerDisplay,nq}")]
public class Octokit.Organization : Account {
    [CompilerGeneratedAttribute]
private string <BillingAddress>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ReposUrl>k__BackingField;
    [CompilerGeneratedAttribute]
private string <EventsUrl>k__BackingField;
    [CompilerGeneratedAttribute]
private string <HooksUrl>k__BackingField;
    [CompilerGeneratedAttribute]
private string <IssuesUrl>k__BackingField;
    [CompilerGeneratedAttribute]
private string <MembersUrl>k__BackingField;
    [CompilerGeneratedAttribute]
private string <PublicMembersUrl>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Description>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsVerified>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <HasOrganizationProjects>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <HasRepositoryProjects>k__BackingField;
    [CompilerGeneratedAttribute]
private DateTimeOffset <UpdatedAt>k__BackingField;
    public string BillingAddress { get; private set; }
    public string ReposUrl { get; private set; }
    public string EventsUrl { get; private set; }
    public string HooksUrl { get; private set; }
    public string IssuesUrl { get; private set; }
    public string MembersUrl { get; private set; }
    public string PublicMembersUrl { get; private set; }
    public string Description { get; private set; }
    public bool IsVerified { get; private set; }
    public bool HasOrganizationProjects { get; private set; }
    public bool HasRepositoryProjects { get; private set; }
    public DateTimeOffset UpdatedAt { get; private set; }
    internal string DebuggerDisplay { get; }
    public Organization(string avatarUrl, string bio, string blog, int collaborators, string company, DateTimeOffset createdAt, int diskUsage, string email, int followers, int following, Nullable`1<bool> hireable, string htmlUrl, int totalPrivateRepos, long id, string nodeId, string location, string login, string name, int ownedPrivateRepos, Plan plan, int privateGists, int publicGists, int publicRepos, string url, string billingAddress, string reposUrl, string eventsUrl, string hooksUrl, string issuesUrl, string membersUrl, string publicMembersUrl, string description, bool isVerified, bool hasOrganizationProjects, bool hasRepositoryProjects, DateTimeOffset updatedAt);
    [CompilerGeneratedAttribute]
public string get_BillingAddress();
    [CompilerGeneratedAttribute]
private void set_BillingAddress(string value);
    [CompilerGeneratedAttribute]
public string get_ReposUrl();
    [CompilerGeneratedAttribute]
private void set_ReposUrl(string value);
    [CompilerGeneratedAttribute]
public string get_EventsUrl();
    [CompilerGeneratedAttribute]
private void set_EventsUrl(string value);
    [CompilerGeneratedAttribute]
public string get_HooksUrl();
    [CompilerGeneratedAttribute]
private void set_HooksUrl(string value);
    [CompilerGeneratedAttribute]
public string get_IssuesUrl();
    [CompilerGeneratedAttribute]
private void set_IssuesUrl(string value);
    [CompilerGeneratedAttribute]
public string get_MembersUrl();
    [CompilerGeneratedAttribute]
private void set_MembersUrl(string value);
    [CompilerGeneratedAttribute]
public string get_PublicMembersUrl();
    [CompilerGeneratedAttribute]
private void set_PublicMembersUrl(string value);
    [CompilerGeneratedAttribute]
public string get_Description();
    [CompilerGeneratedAttribute]
private void set_Description(string value);
    [CompilerGeneratedAttribute]
public bool get_IsVerified();
    [CompilerGeneratedAttribute]
private void set_IsVerified(bool value);
    [CompilerGeneratedAttribute]
public bool get_HasOrganizationProjects();
    [CompilerGeneratedAttribute]
private void set_HasOrganizationProjects(bool value);
    [CompilerGeneratedAttribute]
public bool get_HasRepositoryProjects();
    [CompilerGeneratedAttribute]
private void set_HasRepositoryProjects(bool value);
    [CompilerGeneratedAttribute]
public DateTimeOffset get_UpdatedAt();
    [CompilerGeneratedAttribute]
private void set_UpdatedAt(DateTimeOffset value);
    internal string get_DebuggerDisplay();
}
public class Octokit.OrganizationActionsClient : ApiClient {
    [CompilerGeneratedAttribute]
private IOrganizationSecretsClient <Secrets>k__BackingField;
    public IOrganizationSecretsClient Secrets { get; private set; }
    public OrganizationActionsClient(IApiConnection apiConnection);
    [CompilerGeneratedAttribute]
public sealed virtual IOrganizationSecretsClient get_Secrets();
    [CompilerGeneratedAttribute]
private void set_Secrets(IOrganizationSecretsClient value);
}
[DebuggerDisplayAttribute("{DebuggerDisplay,nq}")]
public class Octokit.OrganizationCredential : object {
    [CompilerGeneratedAttribute]
private string <Login>k__BackingField;
    [CompilerGeneratedAttribute]
private long <CredentialId>k__BackingField;
    [CompilerGeneratedAttribute]
private string <CredentialType>k__BackingField;
    [CompilerGeneratedAttribute]
private string <TokenLastEight>k__BackingField;
    [CompilerGeneratedAttribute]
private DateTime <CredentialAuthorizedAt>k__BackingField;
    [CompilerGeneratedAttribute]
private String[] <Scopes>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Fingerprint>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<DateTime> <CredentialAccessedAt>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<long> <AuthorizedCredentialId>k__BackingField;
    [CompilerGeneratedAttribute]
private string <AuthorizedCredentialTitle>k__BackingField;
    [CompilerGeneratedAttribute]
private string <AuthorizedCredentialNote>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<DateTime> <AuthorizedCredentialExpiresAt>k__BackingField;
    public string Login { get; private set; }
    public long CredentialId { get; private set; }
    public string CredentialType { get; private set; }
    public string TokenLastEight { get; private set; }
    public DateTime CredentialAuthorizedAt { get; private set; }
    public String[] Scopes { get; private set; }
    public string Fingerprint { get; private set; }
    public Nullable`1<DateTime> CredentialAccessedAt { get; private set; }
    public Nullable`1<long> AuthorizedCredentialId { get; private set; }
    public string AuthorizedCredentialTitle { get; private set; }
    public string AuthorizedCredentialNote { get; private set; }
    public Nullable`1<DateTime> AuthorizedCredentialExpiresAt { get; private set; }
    internal string DebuggerDisplay { get; }
    public OrganizationCredential(string login, long credentialId, string credentialType, string tokenLastEight, DateTime credentialAuthorizedAt, String[] scopes, string fingerprint, Nullable`1<DateTime> credentialAccessedAt, Nullable`1<long> authorizedCredentialId, string authorizedCredentialTitle, string authorizedCredentialNote, Nullable`1<DateTime> authorizedCredentialExpiresAt);
    [CompilerGeneratedAttribute]
public string get_Login();
    [CompilerGeneratedAttribute]
private void set_Login(string value);
    [CompilerGeneratedAttribute]
public long get_CredentialId();
    [CompilerGeneratedAttribute]
private void set_CredentialId(long value);
    [CompilerGeneratedAttribute]
public string get_CredentialType();
    [CompilerGeneratedAttribute]
private void set_CredentialType(string value);
    [CompilerGeneratedAttribute]
public string get_TokenLastEight();
    [CompilerGeneratedAttribute]
private void set_TokenLastEight(string value);
    [CompilerGeneratedAttribute]
public DateTime get_CredentialAuthorizedAt();
    [CompilerGeneratedAttribute]
private void set_CredentialAuthorizedAt(DateTime value);
    [CompilerGeneratedAttribute]
public String[] get_Scopes();
    [CompilerGeneratedAttribute]
private void set_Scopes(String[] value);
    [CompilerGeneratedAttribute]
public string get_Fingerprint();
    [CompilerGeneratedAttribute]
private void set_Fingerprint(string value);
    [CompilerGeneratedAttribute]
public Nullable`1<DateTime> get_CredentialAccessedAt();
    [CompilerGeneratedAttribute]
private void set_CredentialAccessedAt(Nullable`1<DateTime> value);
    [CompilerGeneratedAttribute]
public Nullable`1<long> get_AuthorizedCredentialId();
    [CompilerGeneratedAttribute]
private void set_AuthorizedCredentialId(Nullable`1<long> value);
    [CompilerGeneratedAttribute]
public string get_AuthorizedCredentialTitle();
    [CompilerGeneratedAttribute]
private void set_AuthorizedCredentialTitle(string value);
    [CompilerGeneratedAttribute]
public string get_AuthorizedCredentialNote();
    [CompilerGeneratedAttribute]
private void set_AuthorizedCredentialNote(string value);
    [CompilerGeneratedAttribute]
public Nullable`1<DateTime> get_AuthorizedCredentialExpiresAt();
    [CompilerGeneratedAttribute]
private void set_AuthorizedCredentialExpiresAt(Nullable`1<DateTime> value);
    internal string get_DebuggerDisplay();
}
public class Octokit.OrganizationCustomPropertiesClient : ApiClient {
    [CompilerGeneratedAttribute]
private IOrganizationCustomPropertyValuesClient <Values>k__BackingField;
    public IOrganizationCustomPropertyValuesClient Values { get; private set; }
    public OrganizationCustomPropertiesClient(IApiConnection apiConnection);
    [ManualRouteAttribute("GET", "orgs/{org}/properties/schema")]
public sealed virtual Task`1<IReadOnlyList`1<OrganizationCustomProperty>> GetAll(string org);
    [ManualRouteAttribute("GET", "orgs/{org}/properties/schema/{propertyName}")]
public sealed virtual Task`1<OrganizationCustomProperty> Get(string org, string propertyName);
    [ManualRouteAttribute("PATCH", "orgs/{org}/properties/schema")]
public sealed virtual Task`1<IReadOnlyList`1<OrganizationCustomProperty>> CreateOrUpdate(string org, UpsertOrganizationCustomProperties properties);
    [ManualRouteAttribute("PUT", "orgs/{org}/properties/schema/{propertyName}")]
public sealed virtual Task`1<OrganizationCustomProperty> CreateOrUpdate(string org, string propertyName, UpsertOrganizationCustomProperty property);
    [ManualRouteAttribute("DELETE", "orgs/{org}/properties/schema/{propertyName}")]
public sealed virtual Task Delete(string org, string propertyName);
    [CompilerGeneratedAttribute]
public sealed virtual IOrganizationCustomPropertyValuesClient get_Values();
    [CompilerGeneratedAttribute]
private void set_Values(IOrganizationCustomPropertyValuesClient value);
}
[DebuggerDisplayAttribute("{DebuggerDisplay,nq}")]
[ExcludeFromCtorWithAllPropertiesConventionTestAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public class Octokit.OrganizationCustomProperty : object {
    [CompilerGeneratedAttribute]
private object <defaultValue>k__BackingField;
    [CompilerGeneratedAttribute]
private string <PropertyName>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<StringEnum`1<CustomPropertyValueType>> <ValueType>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <Required>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Description>k__BackingField;
    [CompilerGeneratedAttribute]
private IReadOnlyList`1<string> <AllowedValues>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<StringEnum`1<CustomPropertyValuesEditableBy>> <ValuesEditableBy>k__BackingField;
    [ParameterAttribute]
public object defaultValue { get; private set; }
    public string PropertyName { get; private set; }
    public Nullable`1<StringEnum`1<CustomPropertyValueType>> ValueType { get; private set; }
    public bool Required { get; private set; }
    public string DefaultValue { get; }
    public IReadOnlyList`1<string> DefaultValues { get; }
    public string Description { get; private set; }
    public IReadOnlyList`1<string> AllowedValues { get; private set; }
    public Nullable`1<StringEnum`1<CustomPropertyValuesEditableBy>> ValuesEditableBy { get; private set; }
    internal string DebuggerDisplay { get; }
    public OrganizationCustomProperty(string propertyName, CustomPropertyValueType valueType, bool required, object defaultValue, string description, IReadOnlyList`1<string> allowedValues, Nullable`1<CustomPropertyValuesEditableBy> valuesEditableBy);
    [CompilerGeneratedAttribute]
public object get_defaultValue();
    [CompilerGeneratedAttribute]
private void set_defaultValue(object value);
    [CompilerGeneratedAttribute]
public string get_PropertyName();
    [CompilerGeneratedAttribute]
private void set_PropertyName(string value);
    [CompilerGeneratedAttribute]
public Nullable`1<StringEnum`1<CustomPropertyValueType>> get_ValueType();
    [CompilerGeneratedAttribute]
private void set_ValueType(Nullable`1<StringEnum`1<CustomPropertyValueType>> value);
    [CompilerGeneratedAttribute]
public bool get_Required();
    [CompilerGeneratedAttribute]
private void set_Required(bool value);
    public string get_DefaultValue();
    public IReadOnlyList`1<string> get_DefaultValues();
    [CompilerGeneratedAttribute]
public string get_Description();
    [CompilerGeneratedAttribute]
private void set_Description(string value);
    [CompilerGeneratedAttribute]
public IReadOnlyList`1<string> get_AllowedValues();
    [CompilerGeneratedAttribute]
private void set_AllowedValues(IReadOnlyList`1<string> value);
    [CompilerGeneratedAttribute]
public Nullable`1<StringEnum`1<CustomPropertyValuesEditableBy>> get_ValuesEditableBy();
    [CompilerGeneratedAttribute]
private void set_ValuesEditableBy(Nullable`1<StringEnum`1<CustomPropertyValuesEditableBy>> value);
    internal string get_DebuggerDisplay();
}
[DebuggerDisplayAttribute("{DebuggerDisplay,nq}")]
public class Octokit.OrganizationCustomPropertyUpdate : object {
    [CompilerGeneratedAttribute]
private string <PropertyName>k__BackingField;
    [CompilerGeneratedAttribute]
private StringEnum`1<CustomPropertyValueType> <ValueType>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <Required>k__BackingField;
    [CompilerGeneratedAttribute]
private object <DefaultValue>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Description>k__BackingField;
    [CompilerGeneratedAttribute]
private IEnumerable`1<string> <AllowedValues>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<StringEnum`1<CustomPropertyValuesEditableBy>> <ValuesEditableBy>k__BackingField;
    public string PropertyName { get; public set; }
    public StringEnum`1<CustomPropertyValueType> ValueType { get; public set; }
    public bool Required { get; public set; }
    public object DefaultValue { get; private set; }
    public string Description { get; public set; }
    public IEnumerable`1<string> AllowedValues { get; public set; }
    public Nullable`1<StringEnum`1<CustomPropertyValuesEditableBy>> ValuesEditableBy { get; public set; }
    internal string DebuggerDisplay { get; }
    public OrganizationCustomPropertyUpdate(string propertyName, CustomPropertyValueType valueType, string defaultValue);
    public OrganizationCustomPropertyUpdate(string propertyName, CustomPropertyValueType valueType, IReadOnlyList`1<string> defaultValue);
    [CompilerGeneratedAttribute]
public string get_PropertyName();
    [CompilerGeneratedAttribute]
public void set_PropertyName(string value);
    [CompilerGeneratedAttribute]
public StringEnum`1<CustomPropertyValueType> get_ValueType();
    [CompilerGeneratedAttribute]
public void set_ValueType(StringEnum`1<CustomPropertyValueType> value);
    [CompilerGeneratedAttribute]
public bool get_Required();
    [CompilerGeneratedAttribute]
public void set_Required(bool value);
    [CompilerGeneratedAttribute]
public object get_DefaultValue();
    [CompilerGeneratedAttribute]
private void set_DefaultValue(object value);
    [CompilerGeneratedAttribute]
public string get_Description();
    [CompilerGeneratedAttribute]
public void set_Description(string value);
    [CompilerGeneratedAttribute]
public IEnumerable`1<string> get_AllowedValues();
    [CompilerGeneratedAttribute]
public void set_AllowedValues(IEnumerable`1<string> value);
    [CompilerGeneratedAttribute]
public Nullable`1<StringEnum`1<CustomPropertyValuesEditableBy>> get_ValuesEditableBy();
    [CompilerGeneratedAttribute]
public void set_ValuesEditableBy(Nullable`1<StringEnum`1<CustomPropertyValuesEditableBy>> value);
    internal string get_DebuggerDisplay();
}
[DebuggerDisplayAttribute("{DebuggerDisplay,nq}")]
public class Octokit.OrganizationCustomPropertyValues : object {
    [CompilerGeneratedAttribute]
private long <RepositoryId>k__BackingField;
    [CompilerGeneratedAttribute]
private string <RepositoryName>k__BackingField;
    [CompilerGeneratedAttribute]
private string <RepositoryFullName>k__BackingField;
    [CompilerGeneratedAttribute]
private IReadOnlyList`1<CustomPropertyValue> <Properties>k__BackingField;
    public long RepositoryId { get; private set; }
    public string RepositoryName { get; private set; }
    public string RepositoryFullName { get; private set; }
    public IReadOnlyList`1<CustomPropertyValue> Properties { get; private set; }
    internal string DebuggerDisplay { get; }
    public OrganizationCustomPropertyValues(long repositoryId, string repositoryName, string repositoryFullName, IReadOnlyList`1<CustomPropertyValue> properties);
    [CompilerGeneratedAttribute]
public long get_RepositoryId();
    [CompilerGeneratedAttribute]
private void set_RepositoryId(long value);
    [CompilerGeneratedAttribute]
public string get_RepositoryName();
    [CompilerGeneratedAttribute]
private void set_RepositoryName(string value);
    [CompilerGeneratedAttribute]
public string get_RepositoryFullName();
    [CompilerGeneratedAttribute]
private void set_RepositoryFullName(string value);
    [CompilerGeneratedAttribute]
public IReadOnlyList`1<CustomPropertyValue> get_Properties();
    [CompilerGeneratedAttribute]
private void set_Properties(IReadOnlyList`1<CustomPropertyValue> value);
    internal string get_DebuggerDisplay();
}
public class Octokit.OrganizationCustomPropertyValuesClient : ApiClient {
    public OrganizationCustomPropertyValuesClient(IApiConnection apiConnection);
    [ManualRouteAttribute("GET", "orgs/{org}/properties/values")]
public sealed virtual Task`1<IReadOnlyList`1<OrganizationCustomPropertyValues>> GetAll(string org);
    [ManualRouteAttribute("GET", "orgs/{org}/properties/values")]
public sealed virtual Task`1<IReadOnlyList`1<OrganizationCustomPropertyValues>> GetAll(string org, ApiOptions options);
    [ManualRouteAttribute("GET", "orgs/{org}/properties/values")]
public sealed virtual Task`1<IReadOnlyList`1<OrganizationCustomPropertyValues>> GetAll(string org, OrganizationCustomPropertyValuesRequest repositoryQuery);
    [ManualRouteAttribute("PATCH", "orgs/{org}/properties/values")]
public sealed virtual Task CreateOrUpdate(string org, UpsertOrganizationCustomPropertyValues propertyValues);
}
[DebuggerDisplayAttribute("{DebuggerDisplay,nq}")]
public class Octokit.OrganizationCustomPropertyValuesRequest : SearchRepositoriesRequest {
    public string Sort { get; }
    public IDictionary`2<string, string> Parameters { get; }
    public OrganizationCustomPropertyValuesRequest(string term);
    public virtual string get_Sort();
    public IDictionary`2<string, string> get_Parameters();
}
[DebuggerDisplayAttribute("{DebuggerDisplay,nq}")]
public class Octokit.OrganizationHook : object {
    [CompilerGeneratedAttribute]
private int <Id>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Url>k__BackingField;
    [CompilerGeneratedAttribute]
private string <TestUrl>k__BackingField;
    [CompilerGeneratedAttribute]
private string <PingUrl>k__BackingField;
    [CompilerGeneratedAttribute]
private DateTimeOffset <CreatedAt>k__BackingField;
    [CompilerGeneratedAttribute]
private DateTimeOffset <UpdatedAt>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    [CompilerGeneratedAttribute]
private IReadOnlyList`1<string> <Events>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <Active>k__BackingField;
    [CompilerGeneratedAttribute]
private IReadOnlyDictionary`2<string, string> <Config>k__BackingField;
    public int Id { get; private set; }
    public string Url { get; private set; }
    [ParameterAttribute]
public string TestUrl { get; private set; }
    [ParameterAttribute]
public string PingUrl { get; private set; }
    public DateTimeOffset CreatedAt { get; private set; }
    public DateTimeOffset UpdatedAt { get; private set; }
    public string Name { get; private set; }
    public IReadOnlyList`1<string> Events { get; private set; }
    public bool Active { get; private set; }
    public IReadOnlyDictionary`2<string, string> Config { get; private set; }
    internal string DebuggerDisplay { get; }
    public OrganizationHook(int id, string url, string testUrl, string pingUrl, DateTimeOffset createdAt, DateTimeOffset updatedAt, string name, IReadOnlyList`1<string> events, bool active, IReadOnlyDictionary`2<string, string> config);
    [CompilerGeneratedAttribute]
public int get_Id();
    [CompilerGeneratedAttribute]
private void set_Id(int value);
    [CompilerGeneratedAttribute]
public string get_Url();
    [CompilerGeneratedAttribute]
private void set_Url(string value);
    [CompilerGeneratedAttribute]
public string get_TestUrl();
    [CompilerGeneratedAttribute]
private void set_TestUrl(string value);
    [CompilerGeneratedAttribute]
public string get_PingUrl();
    [CompilerGeneratedAttribute]
private void set_PingUrl(string value);
    [CompilerGeneratedAttribute]
public DateTimeOffset get_CreatedAt();
    [CompilerGeneratedAttribute]
private void set_CreatedAt(DateTimeOffset value);
    [CompilerGeneratedAttribute]
public DateTimeOffset get_UpdatedAt();
    [CompilerGeneratedAttribute]
private void set_UpdatedAt(DateTimeOffset value);
    [CompilerGeneratedAttribute]
public string get_Name();
    [CompilerGeneratedAttribute]
private void set_Name(string value);
    [CompilerGeneratedAttribute]
public IReadOnlyList`1<string> get_Events();
    [CompilerGeneratedAttribute]
private void set_Events(IReadOnlyList`1<string> value);
    [CompilerGeneratedAttribute]
public bool get_Active();
    [CompilerGeneratedAttribute]
private void set_Active(bool value);
    [CompilerGeneratedAttribute]
public IReadOnlyDictionary`2<string, string> get_Config();
    [CompilerGeneratedAttribute]
private void set_Config(IReadOnlyDictionary`2<string, string> value);
    internal string get_DebuggerDisplay();
}
public class Octokit.OrganizationHooksClient : ApiClient {
    public OrganizationHooksClient(IApiConnection apiConnection);
    [ManualRouteAttribute("GET", "orgs/{org}/hooks")]
public sealed virtual Task`1<IReadOnlyList`1<OrganizationHook>> GetAll(string org);
    [ManualRouteAttribute("GET", "orgs/{org}/hooks")]
public sealed virtual Task`1<IReadOnlyList`1<OrganizationHook>> GetAll(string org, ApiOptions options);
    [ManualRouteAttribute("GET", "orgs/{org}/hooks/{hook_id}")]
public sealed virtual Task`1<OrganizationHook> Get(string org, int hookId);
    [ManualRouteAttribute("POST", "orgs/{org}/hooks")]
public sealed virtual Task`1<OrganizationHook> Create(string org, NewOrganizationHook hook);
    [ManualRouteAttribute("PATCH", "orgs/{org}/hooks/{hook_id}")]
public sealed virtual Task`1<OrganizationHook> Edit(string org, int hookId, EditOrganizationHook hook);
    [ManualRouteAttribute("POST", "orgs/{org}/hooks/{hook_id}/pings")]
public sealed virtual Task Ping(string org, int hookId);
    [ManualRouteAttribute("DELETE", "orgs/{org}/hooks/{hook_id}")]
public sealed virtual Task Delete(string org, int hookId);
}
[DebuggerDisplayAttribute("{DebuggerDisplay,nq}")]
public class Octokit.OrganizationInvitationRequest : object {
    [CompilerGeneratedAttribute]
private Nullable`1<long> <InviteeId>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Email>k__BackingField;
    [CompilerGeneratedAttribute]
private OrganizationMembershipRole <Role>k__BackingField;
    [CompilerGeneratedAttribute]
private Int64[] <TeamIds>k__BackingField;
    [ParameterAttribute]
public Nullable`1<long> InviteeId { get; public set; }
    [ParameterAttribute]
public string Email { get; public set; }
    [ParameterAttribute]
public OrganizationMembershipRole Role { get; public set; }
    [ParameterAttribute]
public Int64[] TeamIds { get; public set; }
    internal string DebuggerDisplay { get; }
    public OrganizationInvitationRequest(long inviteeId);
    public OrganizationInvitationRequest(string email);
    public OrganizationInvitationRequest(long inviteeId, OrganizationMembershipRole role);
    public OrganizationInvitationRequest(string email, OrganizationMembershipRole role);
    public OrganizationInvitationRequest(long inviteeId, Int64[] teamIds);
    public OrganizationInvitationRequest(string email, Int64[] teamIds);
    public OrganizationInvitationRequest(long inviteeId, OrganizationMembershipRole role, Int64[] teamIds);
    public OrganizationInvitationRequest(string email, OrganizationMembershipRole role, Int64[] teamIds);
    [CompilerGeneratedAttribute]
public Nullable`1<long> get_InviteeId();
    [CompilerGeneratedAttribute]
public void set_InviteeId(Nullable`1<long> value);
    [CompilerGeneratedAttribute]
public string get_Email();
    [CompilerGeneratedAttribute]
public void set_Email(string value);
    [CompilerGeneratedAttribute]
public OrganizationMembershipRole get_Role();
    [CompilerGeneratedAttribute]
public void set_Role(OrganizationMembershipRole value);
    [CompilerGeneratedAttribute]
public Int64[] get_TeamIds();
    [CompilerGeneratedAttribute]
public void set_TeamIds(Int64[] value);
    internal string get_DebuggerDisplay();
}
public class Octokit.OrganizationMembersClient : ApiClient {
    public OrganizationMembersClient(IApiConnection apiConnection);
    [ManualRouteAttribute("GET", "/orgs/{org}/members")]
public sealed virtual Task`1<IReadOnlyList`1<User>> GetAll(string org);
    [ManualRouteAttribute("GET", "/orgs/{org}/members")]
public sealed virtual Task`1<IReadOnlyList`1<User>> GetAll(string org, ApiOptions options);
    [ManualRouteAttribute("GET", "/orgs/{org}/members")]
public sealed virtual Task`1<IReadOnlyList`1<User>> GetAll(string org, OrganizationMembersFilter filter);
    [ManualRouteAttribute("GET", "/orgs/{org}/members")]
public sealed virtual Task`1<IReadOnlyList`1<User>> GetAll(string org, OrganizationMembersFilter filter, ApiOptions options);
    [ManualRouteAttribute("GET", "/orgs/{org}/members?role={1}")]
public sealed virtual Task`1<IReadOnlyList`1<User>> GetAll(string org, OrganizationMembersRole role);
    [ManualRouteAttribute("GET", "/orgs/{org}/members?role={1}")]
public sealed virtual Task`1<IReadOnlyList`1<User>> GetAll(string org, OrganizationMembersRole role, ApiOptions options);
    [ManualRouteAttribute("GET", "/orgs/{org}/members?filter={1}&role={2}")]
public sealed virtual Task`1<IReadOnlyList`1<User>> GetAll(string org, OrganizationMembersFilter filter, OrganizationMembersRole role);
    [ManualRouteAttribute("GET", "/orgs/{org}/members?filter={1}&role={2}")]
public sealed virtual Task`1<IReadOnlyList`1<User>> GetAll(string org, OrganizationMembersFilter filter, OrganizationMembersRole role, ApiOptions options);
    [ManualRouteAttribute("GET", "/orgs/{org}/public_members")]
public sealed virtual Task`1<IReadOnlyList`1<User>> GetAllPublic(string org);
    [ManualRouteAttribute("GET", "/orgs/{org}/public_members")]
public sealed virtual Task`1<IReadOnlyList`1<User>> GetAllPublic(string org, ApiOptions options);
    [AsyncStateMachineAttribute("Octokit.OrganizationMembersClient/<CheckMember>d__11")]
[ManualRouteAttribute("GET", "/orgs/{org}/members/{username}")]
public sealed virtual Task`1<bool> CheckMember(string org, string user);
    [AsyncStateMachineAttribute("Octokit.OrganizationMembersClient/<CheckMemberPublic>d__12")]
[ManualRouteAttribute("GET", "/orgs/{org}/public_members/{username}")]
public sealed virtual Task`1<bool> CheckMemberPublic(string org, string user);
    [ManualRouteAttribute("DELETE", "/orgs/{org}/members/{username}")]
public sealed virtual Task Delete(string org, string user);
    [AsyncStateMachineAttribute("Octokit.OrganizationMembersClient/<Publicize>d__14")]
[ManualRouteAttribute("PUT", "/orgs/{org}/public_members/{username}")]
public sealed virtual Task`1<bool> Publicize(string org, string user);
    [ManualRouteAttribute("DELETE", "/orgs/{org}/public_members/{username}")]
public sealed virtual Task Conceal(string org, string user);
    [ManualRouteAttribute("GET", "/orgs/{org}/memberships/{username}")]
public sealed virtual Task`1<OrganizationMembership> GetOrganizationMembership(string org, string user);
    [ManualRouteAttribute("PUT", "/orgs/{org}/memberships/{username}")]
public sealed virtual Task`1<OrganizationMembership> AddOrUpdateOrganizationMembership(string org, string user, OrganizationMembershipUpdate addOrUpdateRequest);
    [ManualRouteAttribute("POST", "/orgs/{org}/invitations")]
public sealed virtual Task`1<OrganizationMembershipInvitation> CreateOrganizationInvitation(string org, OrganizationInvitationRequest invitationRequest);
    [ManualRouteAttribute("DELETE", "/orgs/{org}/memberships/{username}")]
public sealed virtual Task RemoveOrganizationMembership(string org, string user);
    [ManualRouteAttribute("GET", "/orgs/{org}/invitations")]
public sealed virtual Task`1<IReadOnlyList`1<OrganizationMembershipInvitation>> GetAllPendingInvitations(string org);
    [ManualRouteAttribute("GET", "/orgs/{org}/invitations")]
public sealed virtual Task`1<IReadOnlyList`1<OrganizationMembershipInvitation>> GetAllPendingInvitations(string org, ApiOptions options);
    [ManualRouteAttribute("GET", "/orgs/{org}/failed_invitations")]
public sealed virtual Task`1<IReadOnlyList`1<OrganizationMembershipInvitation>> GetAllFailedInvitations(string org);
    [ManualRouteAttribute("GET", "/orgs/{org}/failed_invitations")]
public sealed virtual Task`1<IReadOnlyList`1<OrganizationMembershipInvitation>> GetAllFailedInvitations(string org, ApiOptions options);
    [ManualRouteAttribute("DELETE", "/orgs/{org}/invitations/{invitation_id}")]
public sealed virtual Task CancelOrganizationInvitation(string org, long invitationId);
    [ManualRouteAttribute("GET", "/user/memberships/orgs")]
public sealed virtual Task`1<IReadOnlyList`1<OrganizationMembership>> GetAllOrganizationMembershipsForCurrent();
    [ManualRouteAttribute("GET", "/user/memberships/orgs")]
public sealed virtual Task`1<IReadOnlyList`1<OrganizationMembership>> GetAllOrganizationMembershipsForCurrent(ApiOptions options);
}
public enum Octokit.OrganizationMembersFilter : Enum {
    public int value__;
    [ParameterAttribute]
public static OrganizationMembersFilter All;
    [ParameterAttribute]
public static OrganizationMembersFilter TwoFactorAuthenticationDisabled;
}
[DebuggerDisplayAttribute("{DebuggerDisplay,nq}")]
public class Octokit.OrganizationMembership : object {
    [CompilerGeneratedAttribute]
private string <Url>k__BackingField;
    [CompilerGeneratedAttribute]
private StringEnum`1<MembershipState> <State>k__BackingField;
    [CompilerGeneratedAttribute]
private StringEnum`1<MembershipRole> <Role>k__BackingField;
    [CompilerGeneratedAttribute]
private string <OrganizationUrl>k__BackingField;
    [CompilerGeneratedAttribute]
private Organization <Organization>k__BackingField;
    [CompilerGeneratedAttribute]
private User <User>k__BackingField;
    public string Url { get; private set; }
    public StringEnum`1<MembershipState> State { get; private set; }
    public StringEnum`1<MembershipRole> Role { get; private set; }
    public string OrganizationUrl { get; private set; }
    public Organization Organization { get; private set; }
    public User User { get; private set; }
    internal string DebuggerDisplay { get; }
    public OrganizationMembership(string url, StringEnum`1<MembershipState> state, StringEnum`1<MembershipRole> role, string organizationUrl, Organization organization, User user);
    [CompilerGeneratedAttribute]
public string get_Url();
    [CompilerGeneratedAttribute]
private void set_Url(string value);
    [CompilerGeneratedAttribute]
public StringEnum`1<MembershipState> get_State();
    [CompilerGeneratedAttribute]
private void set_State(StringEnum`1<MembershipState> value);
    [CompilerGeneratedAttribute]
public StringEnum`1<MembershipRole> get_Role();
    [CompilerGeneratedAttribute]
private void set_Role(StringEnum`1<MembershipRole> value);
    [CompilerGeneratedAttribute]
public string get_OrganizationUrl();
    [CompilerGeneratedAttribute]
private void set_OrganizationUrl(string value);
    [CompilerGeneratedAttribute]
public Organization get_Organization();
    [CompilerGeneratedAttribute]
private void set_Organization(Organization value);
    [CompilerGeneratedAttribute]
public User get_User();
    [CompilerGeneratedAttribute]
private void set_User(User value);
    internal string get_DebuggerDisplay();
}
[DebuggerDisplayAttribute("{DebuggerDisplay,nq}")]
public class Octokit.OrganizationMembershipInvitation : object {
    [CompilerGeneratedAttribute]
private long <Id>k__BackingField;
    [CompilerGeneratedAttribute]
private string <NodeId>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Login>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Email>k__BackingField;
    [CompilerGeneratedAttribute]
private StringEnum`1<OrganizationMembershipRole> <Role>k__BackingField;
    [CompilerGeneratedAttribute]
private DateTimeOffset <CreatedAt>k__BackingField;
    [CompilerGeneratedAttribute]
private User <Inviter>k__BackingField;
    [CompilerGeneratedAttribute]
private int <TeamCount>k__BackingField;
    public long Id { get; private set; }
    public string NodeId { get; private set; }
    public string Login { get; private set; }
    public string Email { get; private set; }
    public StringEnum`1<OrganizationMembershipRole> Role { get; private set; }
    public DateTimeOffset CreatedAt { get; private set; }
    public User Inviter { get; private set; }
    public int TeamCount { get; private set; }
    internal string DebuggerDisplay { get; }
    public OrganizationMembershipInvitation(long id, string nodeId, string login, string email, OrganizationMembershipRole role, DateTimeOffset createdAt, User inviter, int teamCount);
    [CompilerGeneratedAttribute]
public long get_Id();
    [CompilerGeneratedAttribute]
private void set_Id(long value);
    [CompilerGeneratedAttribute]
public string get_NodeId();
    [CompilerGeneratedAttribute]
private void set_NodeId(string value);
    [CompilerGeneratedAttribute]
public string get_Login();
    [CompilerGeneratedAttribute]
private void set_Login(string value);
    [CompilerGeneratedAttribute]
public string get_Email();
    [CompilerGeneratedAttribute]
private void set_Email(string value);
    [CompilerGeneratedAttribute]
public StringEnum`1<OrganizationMembershipRole> get_Role();
    [CompilerGeneratedAttribute]
private void set_Role(StringEnum`1<OrganizationMembershipRole> value);
    [CompilerGeneratedAttribute]
public DateTimeOffset get_CreatedAt();
    [CompilerGeneratedAttribute]
private void set_CreatedAt(DateTimeOffset value);
    [CompilerGeneratedAttribute]
public User get_Inviter();
    [CompilerGeneratedAttribute]
private void set_Inviter(User value);
    [CompilerGeneratedAttribute]
public int get_TeamCount();
    [CompilerGeneratedAttribute]
private void set_TeamCount(int value);
    internal string get_DebuggerDisplay();
}
public enum Octokit.OrganizationMembershipRole : Enum {
    public int value__;
    [ParameterAttribute]
public static OrganizationMembershipRole DirectMember;
    [ParameterAttribute]
public static OrganizationMembershipRole Admin;
    [ParameterAttribute]
public static OrganizationMembershipRole BillingManager;
    [ParameterAttribute]
public static OrganizationMembershipRole HiringManager;
    [ParameterAttribute]
public static OrganizationMembershipRole Reinstate;
}
[DebuggerDisplayAttribute("{DebuggerDisplay,nq}")]
public class Octokit.OrganizationMembershipUpdate : object {
    [CompilerGeneratedAttribute]
private MembershipRole <Role>k__BackingField;
    public MembershipRole Role { get; public set; }
    internal string DebuggerDisplay { get; }
    [CompilerGeneratedAttribute]
public MembershipRole get_Role();
    [CompilerGeneratedAttribute]
public void set_Role(MembershipRole value);
    internal string get_DebuggerDisplay();
}
public enum Octokit.OrganizationMembersRole : Enum {
    public int value__;
    [ParameterAttribute]
public static OrganizationMembersRole All;
    [ParameterAttribute]
public static OrganizationMembersRole Admin;
    [ParameterAttribute]
public static OrganizationMembersRole Member;
}
[DebuggerDisplayAttribute("{DebuggerDisplay,nq}")]
public class Octokit.OrganizationOidcSubjectClaim : object {
    [CompilerGeneratedAttribute]
private IReadOnlyList`1<string> <IncludeClaimKeys>k__BackingField;
    public IReadOnlyList`1<string> IncludeClaimKeys { get; protected set; }
    internal string DebuggerDisplay { get; }
    public OrganizationOidcSubjectClaim(List`1<string> includeClaimKeys);
    [CompilerGeneratedAttribute]
public IReadOnlyList`1<string> get_IncludeClaimKeys();
    [CompilerGeneratedAttribute]
protected void set_IncludeClaimKeys(IReadOnlyList`1<string> value);
    internal string get_DebuggerDisplay();
}
[DebuggerDisplayAttribute("{DebuggerDisplay,nq}")]
public class Octokit.OrganizationOidcSubjectClaimRequest : object {
    [CompilerGeneratedAttribute]
private List`1<string> <IncludeClaimKeys>k__BackingField;
    public List`1<string> IncludeClaimKeys { get; public set; }
    internal string DebuggerDisplay { get; }
    public OrganizationOidcSubjectClaimRequest(List`1<string> includeClaimKeys);
    [CompilerGeneratedAttribute]
public List`1<string> get_IncludeClaimKeys();
    [CompilerGeneratedAttribute]
public void set_IncludeClaimKeys(List`1<string> value);
    internal string get_DebuggerDisplay();
}
public class Octokit.OrganizationOutsideCollaboratorsClient : ApiClient {
    public OrganizationOutsideCollaboratorsClient(IApiConnection apiConnection);
    [ManualRouteAttribute("GET", "/orgs/{org}/outside_collaborators")]
public sealed virtual Task`1<IReadOnlyList`1<User>> GetAll(string org);
    [ManualRouteAttribute("GET", "/orgs/{org}/outside_collaborators")]
public sealed virtual Task`1<IReadOnlyList`1<User>> GetAll(string org, ApiOptions options);
    [ManualRouteAttribute("GET", "/orgs/{org}/outside_collaborators")]
public sealed virtual Task`1<IReadOnlyList`1<User>> GetAll(string org, OrganizationMembersFilter filter);
    [ManualRouteAttribute("GET", "/orgs/{org}/outside_collaborators")]
public sealed virtual Task`1<IReadOnlyList`1<User>> GetAll(string org, OrganizationMembersFilter filter, ApiOptions options);
    [AsyncStateMachineAttribute("Octokit.OrganizationOutsideCollaboratorsClient/<Delete>d__5")]
[ManualRouteAttribute("DELETE", "/orgs/{org}/outside_collaborators/{username}")]
public sealed virtual Task`1<bool> Delete(string org, string user);
    [AsyncStateMachineAttribute("Octokit.OrganizationOutsideCollaboratorsClient/<ConvertFromMember>d__6")]
[ManualRouteAttribute("PUT", "/orgs/{org}/outside_collaborators/{username}")]
public sealed virtual Task`1<bool> ConvertFromMember(string org, string user);
}
[DebuggerDisplayAttribute("{DebuggerDisplay,nq}")]
public class Octokit.OrganizationRequest : RequestParameters {
    [CompilerGeneratedAttribute]
private long <Since>k__BackingField;
    public long Since { get; public set; }
    internal string DebuggerDisplay { get; }
    public OrganizationRequest(long since);
    [CompilerGeneratedAttribute]
public long get_Since();
    [CompilerGeneratedAttribute]
public void set_Since(long value);
    internal string get_DebuggerDisplay();
}
public class Octokit.OrganizationsClient : ApiClient {
    [CompilerGeneratedAttribute]
private IOrganizationMembersClient <Member>k__BackingField;
    [CompilerGeneratedAttribute]
private ITeamsClient <Team>k__BackingField;
    [CompilerGeneratedAttribute]
private IOrganizationActionsClient <Actions>k__BackingField;
    [CompilerGeneratedAttribute]
private IOrganizationOutsideCollaboratorsClient <OutsideCollaborator>k__BackingField;
    [CompilerGeneratedAttribute]
private IOrganizationCustomPropertiesClient <CustomProperty>k__BackingField;
    [CompilerGeneratedAttribute]
private IOrganizationHooksClient <Hook>k__BackingField;
    public IOrganizationMembersClient Member { get; private set; }
    public ITeamsClient Team { get; private set; }
    public IOrganizationActionsClient Actions { get; private set; }
    public IOrganizationOutsideCollaboratorsClient OutsideCollaborator { get; private set; }
    public IOrganizationCustomPropertiesClient CustomProperty { get; private set; }
    public IOrganizationHooksClient Hook { get; private set; }
    public OrganizationsClient(IApiConnection apiConnection);
    [CompilerGeneratedAttribute]
public sealed virtual IOrganizationMembersClient get_Member();
    [CompilerGeneratedAttribute]
private void set_Member(IOrganizationMembersClient value);
    [CompilerGeneratedAttribute]
public sealed virtual ITeamsClient get_Team();
    [CompilerGeneratedAttribute]
private void set_Team(ITeamsClient value);
    [CompilerGeneratedAttribute]
public sealed virtual IOrganizationActionsClient get_Actions();
    [CompilerGeneratedAttribute]
private void set_Actions(IOrganizationActionsClient value);
    [CompilerGeneratedAttribute]
public sealed virtual IOrganizationOutsideCollaboratorsClient get_OutsideCollaborator();
    [CompilerGeneratedAttribute]
private void set_OutsideCollaborator(IOrganizationOutsideCollaboratorsClient value);
    [CompilerGeneratedAttribute]
public sealed virtual IOrganizationCustomPropertiesClient get_CustomProperty();
    [CompilerGeneratedAttribute]
private void set_CustomProperty(IOrganizationCustomPropertiesClient value);
    [ManualRouteAttribute("GET", "/orgs/{org}")]
public sealed virtual Task`1<Organization> Get(string org);
    [CompilerGeneratedAttribute]
public sealed virtual IOrganizationHooksClient get_Hook();
    [CompilerGeneratedAttribute]
private void set_Hook(IOrganizationHooksClient value);
    [ManualRouteAttribute("GET", "/user/orgs")]
public sealed virtual Task`1<IReadOnlyList`1<Organization>> GetAllForCurrent();
    [ManualRouteAttribute("GET", "/user/orgs")]
public sealed virtual Task`1<IReadOnlyList`1<Organization>> GetAllForCurrent(ApiOptions options);
    [ManualRouteAttribute("GET", "/users/{username}/orgs")]
public sealed virtual Task`1<IReadOnlyList`1<Organization>> GetAllForUser(string user);
    [ManualRouteAttribute("GET", "/users/{username}/orgs")]
public sealed virtual Task`1<IReadOnlyList`1<Organization>> GetAllForUser(string user, ApiOptions options);
    [ManualRouteAttribute("GET", "/organizations")]
public sealed virtual Task`1<IReadOnlyList`1<Organization>> GetAll();
    [ManualRouteAttribute("GET", "/organizations")]
public sealed virtual Task`1<IReadOnlyList`1<Organization>> GetAll(OrganizationRequest request);
    [ManualRouteAttribute("PATCH", "/orgs/{org}")]
public sealed virtual Task`1<Organization> Update(string org, OrganizationUpdate updateRequest);
    [ManualRouteAttribute("GET", "/orgs/{org}/credential-authorizations")]
public sealed virtual Task`1<IReadOnlyList`1<OrganizationCredential>> GetAllAuthorizations(string org);
    [ManualRouteAttribute("GET", "/orgs/{org}/credential-authorizations")]
public sealed virtual Task`1<IReadOnlyList`1<OrganizationCredential>> GetAllAuthorizations(string org, ApiOptions options);
    [ManualRouteAttribute("GET", "/orgs/{org}/credential-authorizations")]
public sealed virtual Task`1<IReadOnlyList`1<OrganizationCredential>> GetAllAuthorizations(string org, string login);
    [ManualRouteAttribute("GET", "/orgs/{org}/credential-authorizations")]
public sealed virtual Task`1<IReadOnlyList`1<OrganizationCredential>> GetAllAuthorizations(string org, string login, ApiOptions options);
}
[DebuggerDisplayAttribute("{DebuggerDisplay,nq}")]
public class Octokit.OrganizationSecret : RepositorySecret {
    [CompilerGeneratedAttribute]
private string <Visibility>k__BackingField;
    [CompilerGeneratedAttribute]
private string <SelectedRepositoriesUrl>k__BackingField;
    public string Visibility { get; private set; }
    [ParameterAttribute]
public string SelectedRepositoriesUrl { get; private set; }
    public OrganizationSecret(string name, DateTime createdAt, DateTime updatedAt, string visibility, string selectedRepositoriesUrl);
    [CompilerGeneratedAttribute]
public string get_Visibility();
    [CompilerGeneratedAttribute]
private void set_Visibility(string value);
    [CompilerGeneratedAttribute]
public string get_SelectedRepositoriesUrl();
    [CompilerGeneratedAttribute]
private void set_SelectedRepositoriesUrl(string value);
}
[DebuggerDisplayAttribute("{DebuggerDisplay,nq}")]
public class Octokit.OrganizationSecretRepositoryCollection : object {
    [CompilerGeneratedAttribute]
private int <Count>k__BackingField;
    [CompilerGeneratedAttribute]
private IReadOnlyList`1<Repository> <Repositories>k__BackingField;
    [ParameterAttribute]
public int Count { get; private set; }
    [ParameterAttribute]
public IReadOnlyList`1<Repository> Repositories { get; private set; }
    internal string DebuggerDisplay { get; }
    public OrganizationSecretRepositoryCollection(int count, IReadOnlyList`1<Repository> repositories);
    [CompilerGeneratedAttribute]
public int get_Count();
    [CompilerGeneratedAttribute]
private void set_Count(int value);
    [CompilerGeneratedAttribute]
public IReadOnlyList`1<Repository> get_Repositories();
    [CompilerGeneratedAttribute]
private void set_Repositories(IReadOnlyList`1<Repository> value);
    internal string get_DebuggerDisplay();
}
public class Octokit.OrganizationSecretsClient : ApiClient {
    public OrganizationSecretsClient(IApiConnection apiConnection);
    [ManualRouteAttribute("GET", "/orgs/{org}/actions/secrets/public-key")]
public sealed virtual Task`1<SecretsPublicKey> GetPublicKey(string org);
    [ManualRouteAttribute("GET", "/orgs/{org}/actions/secrets")]
public sealed virtual Task`1<OrganizationSecretsCollection> GetAll(string org);
    [ManualRouteAttribute("GET", "/orgs/{org}/actions/secrets/{secretName}")]
public sealed virtual Task`1<OrganizationSecret> Get(string org, string secretName);
    [AsyncStateMachineAttribute("Octokit.OrganizationSecretsClient/<CreateOrUpdate>d__4")]
[ManualRouteAttribute("PUT", "/orgs/{org}/actions/secrets/{secretName}")]
public sealed virtual Task`1<OrganizationSecret> CreateOrUpdate(string org, string secretName, UpsertOrganizationSecret upsertSecret);
    [ManualRouteAttribute("DELETE", "/orgs/{org}/actions/secrets/{secretName}")]
public sealed virtual Task Delete(string org, string secretName);
    [ManualRouteAttribute("GET", "/orgs/{org}/actions/secrets/{secretName}/repositories")]
public sealed virtual Task`1<OrganizationSecretRepositoryCollection> GetSelectedRepositoriesForSecret(string org, string secretName);
    [AsyncStateMachineAttribute("Octokit.OrganizationSecretsClient/<SetSelectedRepositoriesForSecret>d__7")]
[ManualRouteAttribute("PUT", "/orgs/{org}/actions/secrets/{secretName}/repositories")]
public sealed virtual Task SetSelectedRepositoriesForSecret(string org, string secretName, SelectedRepositoryCollection repositories);
    [ManualRouteAttribute("PUT", "/orgs/{org}/actions/secrets/{secretName}/repositories/{repoId}")]
public sealed virtual Task AddRepoToOrganizationSecret(string org, string secretName, long repoId);
    [ManualRouteAttribute("DELETE", "/orgs/{org}/actions/secrets/{secretName}/repositories/{repoId}")]
public sealed virtual Task RemoveRepoFromOrganizationSecret(string org, string secretName, long repoId);
}
[DebuggerDisplayAttribute("{DebuggerDisplay,nq}")]
public class Octokit.OrganizationSecretsCollection : object {
    [CompilerGeneratedAttribute]
private int <Count>k__BackingField;
    [CompilerGeneratedAttribute]
private IReadOnlyList`1<OrganizationSecret> <Secrets>k__BackingField;
    [ParameterAttribute]
public int Count { get; private set; }
    [ParameterAttribute]
public IReadOnlyList`1<OrganizationSecret> Secrets { get; private set; }
    internal string DebuggerDisplay { get; }
    public OrganizationSecretsCollection(int count, IReadOnlyList`1<OrganizationSecret> secrets);
    [CompilerGeneratedAttribute]
public int get_Count();
    [CompilerGeneratedAttribute]
private void set_Count(int value);
    [CompilerGeneratedAttribute]
public IReadOnlyList`1<OrganizationSecret> get_Secrets();
    [CompilerGeneratedAttribute]
private void set_Secrets(IReadOnlyList`1<OrganizationSecret> value);
    internal string get_DebuggerDisplay();
}
[DebuggerDisplayAttribute("{DebuggerDisplay,nq}")]
public class Octokit.OrganizationUpdate : object {
    [CompilerGeneratedAttribute]
private string <BillingEmail>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Company>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Email>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Location>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Description>k__BackingField;
    public string BillingEmail { get; public set; }
    public string Company { get; public set; }
    public string Email { get; public set; }
    public string Location { get; public set; }
    public string Name { get; public set; }
    public string Description { get; public set; }
    internal string DebuggerDisplay { get; }
    [CompilerGeneratedAttribute]
public string get_BillingEmail();
    [CompilerGeneratedAttribute]
public void set_BillingEmail(string value);
    [CompilerGeneratedAttribute]
public string get_Company();
    [CompilerGeneratedAttribute]
public void set_Company(string value);
    [CompilerGeneratedAttribute]
public string get_Email();
    [CompilerGeneratedAttribute]
public void set_Email(string value);
    [CompilerGeneratedAttribute]
public string get_Location();
    [CompilerGeneratedAttribute]
public void set_Location(string value);
    [CompilerGeneratedAttribute]
public string get_Name();
    [CompilerGeneratedAttribute]
public void set_Name(string value);
    [CompilerGeneratedAttribute]
public string get_Description();
    [CompilerGeneratedAttribute]
public void set_Description(string value);
    internal string get_DebuggerDisplay();
}
public enum Octokit.OrgWebHookContentType : Enum {
    public int value__;
    public static OrgWebHookContentType Form;
    public static OrgWebHookContentType Json;
}
[DebuggerDisplayAttribute("{DebuggerDisplay,nq}")]
public class Octokit.Package : object {
    [CompilerGeneratedAttribute]
private long <Id>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    [CompilerGeneratedAttribute]
private StringEnum`1<PackageType> <PackageType>k__BackingField;
    [CompilerGeneratedAttribute]
private Author <Owner>k__BackingField;
    [CompilerGeneratedAttribute]
private int <VersionCount>k__BackingField;
    [CompilerGeneratedAttribute]
private StringEnum`1<PackageVisibility> <Visibility>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Url>k__BackingField;
    [CompilerGeneratedAttribute]
private DateTime <CreatedAt>k__BackingField;
    [CompilerGeneratedAttribute]
private DateTime <UpdatedAt>k__BackingField;
    [CompilerGeneratedAttribute]
private string <HtmlUrl>k__BackingField;
    public long Id { get; private set; }
    public string Name { get; private set; }
    public StringEnum`1<PackageType> PackageType { get; private set; }
    public Author Owner { get; private set; }
    public int VersionCount { get; private set; }
    public StringEnum`1<PackageVisibility> Visibility { get; private set; }
    public string Url { get; private set; }
    public DateTime CreatedAt { get; private set; }
    public DateTime UpdatedAt { get; private set; }
    public string HtmlUrl { get; private set; }
    internal string DebuggerDisplay { get; }
    public Package(long id, string name, PackageType packageType, Author owner, int versionCount, PackageVisibility visibility, string url, DateTime createdAt, DateTime updatedAt, string htmlUrl);
    [CompilerGeneratedAttribute]
public long get_Id();
    [CompilerGeneratedAttribute]
private void set_Id(long value);
    [CompilerGeneratedAttribute]
public string get_Name();
    [CompilerGeneratedAttribute]
private void set_Name(string value);
    [CompilerGeneratedAttribute]
public StringEnum`1<PackageType> get_PackageType();
    [CompilerGeneratedAttribute]
private void set_PackageType(StringEnum`1<PackageType> value);
    [CompilerGeneratedAttribute]
public Author get_Owner();
    [CompilerGeneratedAttribute]
private void set_Owner(Author value);
    [CompilerGeneratedAttribute]
public int get_VersionCount();
    [CompilerGeneratedAttribute]
private void set_VersionCount(int value);
    [CompilerGeneratedAttribute]
public StringEnum`1<PackageVisibility> get_Visibility();
    [CompilerGeneratedAttribute]
private void set_Visibility(StringEnum`1<PackageVisibility> value);
    [CompilerGeneratedAttribute]
public string get_Url();
    [CompilerGeneratedAttribute]
private void set_Url(string value);
    [CompilerGeneratedAttribute]
public DateTime get_CreatedAt();
    [CompilerGeneratedAttribute]
private void set_CreatedAt(DateTime value);
    [CompilerGeneratedAttribute]
public DateTime get_UpdatedAt();
    [CompilerGeneratedAttribute]
private void set_UpdatedAt(DateTime value);
    [CompilerGeneratedAttribute]
public string get_HtmlUrl();
    [CompilerGeneratedAttribute]
private void set_HtmlUrl(string value);
    internal string get_DebuggerDisplay();
}
public class Octokit.PackagesClient : ApiClient {
    [CompilerGeneratedAttribute]
private IPackageVersionsClient <PackageVersions>k__BackingField;
    public IPackageVersionsClient PackageVersions { get; private set; }
    public PackagesClient(IApiConnection apiConnection);
    [CompilerGeneratedAttribute]
public sealed virtual IPackageVersionsClient get_PackageVersions();
    [CompilerGeneratedAttribute]
private void set_PackageVersions(IPackageVersionsClient value);
    [ManualRouteAttribute("GET", "/orgs/{org}/packages")]
public sealed virtual Task`1<IReadOnlyList`1<Package>> GetAllForOrg(string org, PackageType packageType);
    [ManualRouteAttribute("GET", "/orgs/{org}/packages")]
public sealed virtual Task`1<IReadOnlyList`1<Package>> GetAllForOrg(string org, PackageType packageType, ApiOptions options);
    [ManualRouteAttribute("GET", "/orgs/{org}/packages")]
public sealed virtual Task`1<IReadOnlyList`1<Package>> GetAllForOrg(string org, PackageType packageType, Nullable`1<PackageVisibility> packageVisibility);
    [ManualRouteAttribute("GET", "/orgs/{org}/packages")]
public sealed virtual Task`1<IReadOnlyList`1<Package>> GetAllForOrg(string org, PackageType packageType, Nullable`1<PackageVisibility> packageVisibility, ApiOptions options);
    [ManualRouteAttribute("GET", "/orgs/{org}/packages/{package_type}/{package_name}")]
public sealed virtual Task`1<Package> GetForOrg(string org, PackageType packageType, string packageName);
    [ManualRouteAttribute("DELETE", "/orgs/{org}/packages/{package_type}/{package_name}")]
public sealed virtual Task DeleteForOrg(string org, PackageType packageType, string packageName);
    [ManualRouteAttribute("POST", "/orgs/{org}/packages/{package_type}/{package_name}/restore")]
public sealed virtual Task RestoreForOrg(string org, PackageType packageType, string packageName);
    [ManualRouteAttribute("GET", "/user/packages")]
public sealed virtual Task`1<IReadOnlyList`1<Package>> GetAllForActiveUser(PackageType packageType);
    [ManualRouteAttribute("GET", "/user/packages")]
public sealed virtual Task`1<IReadOnlyList`1<Package>> GetAllForActiveUser(PackageType packageType, ApiOptions options);
    [ManualRouteAttribute("GET", "/user/packages")]
public sealed virtual Task`1<IReadOnlyList`1<Package>> GetAllForActiveUser(PackageType packageType, Nullable`1<PackageVisibility> packageVisibility);
    [ManualRouteAttribute("GET", "/user/packages")]
public sealed virtual Task`1<IReadOnlyList`1<Package>> GetAllForActiveUser(PackageType packageType, Nullable`1<PackageVisibility> packageVisibility, ApiOptions options);
    [ManualRouteAttribute("GET", "/user/packages/{package_type}/{package_name}")]
public sealed virtual Task`1<Package> GetForActiveUser(PackageType packageType, string packageName);
    [ManualRouteAttribute("DELETE", "/user/packages/{package_type}/{package_name}")]
public sealed virtual Task DeleteForActiveUser(PackageType packageType, string packageName);
    [ManualRouteAttribute("POST", "/user/packages/{package_type}/{package_name}/restore")]
public sealed virtual Task RestoreForActiveUser(PackageType packageType, string packageName);
    [ManualRouteAttribute("GET", "/users/{username}/packages")]
public sealed virtual Task`1<IReadOnlyList`1<Package>> GetAllForUser(string username, PackageType packageType);
    [ManualRouteAttribute("GET", "/users/{username}/packages")]
public sealed virtual Task`1<IReadOnlyList`1<Package>> GetAllForUser(string username, PackageType packageType, ApiOptions options);
    [ManualRouteAttribute("GET", "/users/{username}/packages")]
public sealed virtual Task`1<IReadOnlyList`1<Package>> GetAllForUser(string username, PackageType packageType, Nullable`1<PackageVisibility> packageVisibility);
    [ManualRouteAttribute("GET", "/users/{username}/packages")]
public sealed virtual Task`1<IReadOnlyList`1<Package>> GetAllForUser(string username, PackageType packageType, Nullable`1<PackageVisibility> packageVisibility, ApiOptions options);
    [ManualRouteAttribute("GET", "/users/{username}/packages/{package_type}/{package_name}")]
public sealed virtual Task`1<Package> GetForUser(string username, PackageType packageType, string packageName);
    [ManualRouteAttribute("DELETE", "/users/{username}/packages/{package_type}/{package_name}")]
public sealed virtual Task DeleteForUser(string username, PackageType packageType, string packageName);
    [ManualRouteAttribute("POST", "/users/{username}/packages/{package_type}/{package_name}/restore")]
public sealed virtual Task RestoreForUser(string username, PackageType packageType, string packageName);
}
public enum Octokit.PackageType : Enum {
    public int value__;
    [ParameterAttribute]
public static PackageType Npm;
    [ParameterAttribute]
public static PackageType Maven;
    [ParameterAttribute]
public static PackageType RubyGems;
    [ParameterAttribute]
public static PackageType Docker;
    [ParameterAttribute]
public static PackageType Nuget;
    [ParameterAttribute]
public static PackageType Container;
}
[DebuggerDisplayAttribute("{DebuggerDisplay,nq}")]
public class Octokit.PackageVersion : object {
    [CompilerGeneratedAttribute]
private long <Id>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Url>k__BackingField;
    [CompilerGeneratedAttribute]
private string <PackageHtmlUrl>k__BackingField;
    [CompilerGeneratedAttribute]
private DateTime <CreatedAt>k__BackingField;
    [CompilerGeneratedAttribute]
private DateTime <UpdatedAt>k__BackingField;
    [CompilerGeneratedAttribute]
private string <HtmlUrl>k__BackingField;
    [CompilerGeneratedAttribute]
private PackageVersionMetadata <Metadata>k__BackingField;
    public long Id { get; private set; }
    public string Name { get; private set; }
    public string Url { get; private set; }
    public string PackageHtmlUrl { get; private set; }
    public DateTime CreatedAt { get; private set; }
    public DateTime UpdatedAt { get; private set; }
    public string HtmlUrl { get; private set; }
    public PackageVersionMetadata Metadata { get; private set; }
    internal string DebuggerDisplay { get; }
    public PackageVersion(long id, string name, string url, string packageHtmlUrl, DateTime createdAt, DateTime updatedAt, string htmlUrl, PackageVersionMetadata metadata);
    [CompilerGeneratedAttribute]
public long get_Id();
    [CompilerGeneratedAttribute]
private void set_Id(long value);
    [CompilerGeneratedAttribute]
public string get_Name();
    [CompilerGeneratedAttribute]
private void set_Name(string value);
    [CompilerGeneratedAttribute]
public string get_Url();
    [CompilerGeneratedAttribute]
private void set_Url(string value);
    [CompilerGeneratedAttribute]
public string get_PackageHtmlUrl();
    [CompilerGeneratedAttribute]
private void set_PackageHtmlUrl(string value);
    [CompilerGeneratedAttribute]
public DateTime get_CreatedAt();
    [CompilerGeneratedAttribute]
private void set_CreatedAt(DateTime value);
    [CompilerGeneratedAttribute]
public DateTime get_UpdatedAt();
    [CompilerGeneratedAttribute]
private void set_UpdatedAt(DateTime value);
    [CompilerGeneratedAttribute]
public string get_HtmlUrl();
    [CompilerGeneratedAttribute]
private void set_HtmlUrl(string value);
    [CompilerGeneratedAttribute]
public PackageVersionMetadata get_Metadata();
    [CompilerGeneratedAttribute]
private void set_Metadata(PackageVersionMetadata value);
    internal string get_DebuggerDisplay();
}
[DebuggerDisplayAttribute("{DebuggerDisplay,nq}")]
public class Octokit.PackageVersionMetadata : object {
    [CompilerGeneratedAttribute]
private string <PackageType>k__BackingField;
    [CompilerGeneratedAttribute]
private PackageVersionMetadataContainer <Container>k__BackingField;
    public string PackageType { get; private set; }
    public PackageVersionMetadataContainer Container { get; private set; }
    internal string DebuggerDisplay { get; }
    public PackageVersionMetadata(string packageType, PackageVersionMetadataContainer container);
    [CompilerGeneratedAttribute]
public string get_PackageType();
    [CompilerGeneratedAttribute]
private void set_PackageType(string value);
    [CompilerGeneratedAttribute]
public PackageVersionMetadataContainer get_Container();
    [CompilerGeneratedAttribute]
private void set_Container(PackageVersionMetadataContainer value);
    internal string get_DebuggerDisplay();
}
[DebuggerDisplayAttribute("{DebuggerDisplay,nq}")]
public class Octokit.PackageVersionMetadataContainer : object {
    [CompilerGeneratedAttribute]
private IReadOnlyList`1<string> <Tags>k__BackingField;
    public IReadOnlyList`1<string> Tags { get; private set; }
    internal string DebuggerDisplay { get; }
    public PackageVersionMetadataContainer(IReadOnlyList`1<string> tags);
    [CompilerGeneratedAttribute]
public IReadOnlyList`1<string> get_Tags();
    [CompilerGeneratedAttribute]
private void set_Tags(IReadOnlyList`1<string> value);
    internal string get_DebuggerDisplay();
}
public class Octokit.PackageVersionsClient : ApiClient {
    public PackageVersionsClient(IApiConnection apiConnection);
    [ManualRouteAttribute("GET", "/orgs/{org}/packages/{package_type}/{package_name}/versions")]
public sealed virtual Task`1<IReadOnlyList`1<PackageVersion>> GetAllForOrg(string org, PackageType packageType, string packageName, PackageVersionState state, ApiOptions options);
    [ManualRouteAttribute("GET", "/orgs/{org}/packages/{package_type}/{package_name}/versions/{package_version_id}")]
public sealed virtual Task`1<PackageVersion> GetForOrg(string org, PackageType packageType, string packageName, int packageVersionId);
    [ManualRouteAttribute("DELETE", "/orgs/{org}/packages/{package_type}/{package_name}/versions/{package_version_id}")]
public sealed virtual Task DeleteForOrg(string org, PackageType packageType, string packageName, int packageVersionId);
    [ManualRouteAttribute("POST", "/orgs/{org}/packages/{package_type}/{package_name}/versions/{package_version_id}/restore")]
public sealed virtual Task RestoreForOrg(string org, PackageType packageType, string packageName, int packageVersionId);
    [ManualRouteAttribute("GET", "/user/packages/{package_type}/{package_name}/versions")]
public sealed virtual Task`1<IReadOnlyList`1<PackageVersion>> GetAllForActiveUser(PackageType packageType, string packageName, PackageVersionState state, ApiOptions options);
    [ManualRouteAttribute("GET", "/user/packages/{package_type}/{package_name}/versions/{package_version_id}")]
public sealed virtual Task`1<PackageVersion> GetForActiveUser(PackageType packageType, string packageName, int packageVersionId);
    [ManualRouteAttribute("DELETE", "/user/packages/{package_type}/{package_name}/versions/{package_version_id}")]
public sealed virtual Task DeleteForActiveUser(PackageType packageType, string packageName, int packageVersionId);
    [ManualRouteAttribute("POST", "/user/packages/{package_type}/{package_name}/versions/{package_version_id}/restore")]
public sealed virtual Task RestoreForActiveUser(PackageType packageType, string packageName, int packageVersionId);
    [ManualRouteAttribute("GET", "/users/{username}/packages/{package_type}/{package_name}/versions")]
public sealed virtual Task`1<IReadOnlyList`1<PackageVersion>> GetAllForUser(string username, PackageType packageType, string packageName, PackageVersionState state, ApiOptions options);
    [ManualRouteAttribute("GET", "/users/{username}/packages/{package_type}/{package_name}/versions/{package_version_id}")]
public sealed virtual Task`1<PackageVersion> GetForUser(string username, PackageType packageType, string packageName, int packageVersionId);
    [ManualRouteAttribute("DELETE", "/users/{username}/packages/{package_type}/{package_name}/versions/{package_version_id}")]
public sealed virtual Task DeleteForUser(string username, PackageType packageType, string packageName, int packageVersionId);
    [ManualRouteAttribute("POST", "/users/{username}/packages/{package_type}/{package_name}/versions/{package_version_id}/restore")]
public sealed virtual Task RestoreForUser(string username, PackageType packageType, string packageName, int packageVersionId);
}
public enum Octokit.PackageVersionState : Enum {
    public int value__;
    [ParameterAttribute]
public static PackageVersionState Active;
    [ParameterAttribute]
public static PackageVersionState Deleted;
}
public enum Octokit.PackageVisibility : Enum {
    public int value__;
    [ParameterAttribute]
public static PackageVisibility Public;
    [ParameterAttribute]
public static PackageVisibility Private;
    [ParameterAttribute]
public static PackageVisibility Internal;
}
[DebuggerDisplayAttribute("{DebuggerDisplay,nq}")]
public class Octokit.Page : object {
    [CompilerGeneratedAttribute]
private string <Url>k__BackingField;
    [CompilerGeneratedAttribute]
private string <HtmlUrl>k__BackingField;
    [CompilerGeneratedAttribute]
private StringEnum`1<PagesBuildStatus> <Status>k__BackingField;
    [CompilerGeneratedAttribute]
private string <CName>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <Custom404>k__BackingField;
    public string Url { get; private set; }
    public string HtmlUrl { get; private set; }
    public StringEnum`1<PagesBuildStatus> Status { get; private set; }
    public string CName { get; private set; }
    public bool Custom404 { get; private set; }
    internal string DebuggerDisplay { get; }
    public Page(string url, string htmlUrl, PagesBuildStatus status, string cname, bool custom404);
    [CompilerGeneratedAttribute]
public string get_Url();
    [CompilerGeneratedAttribute]
private void set_Url(string value);
    [CompilerGeneratedAttribute]
public string get_HtmlUrl();
    [CompilerGeneratedAttribute]
private void set_HtmlUrl(string value);
    [CompilerGeneratedAttribute]
public StringEnum`1<PagesBuildStatus> get_Status();
    [CompilerGeneratedAttribute]
private void set_Status(StringEnum`1<PagesBuildStatus> value);
    [CompilerGeneratedAttribute]
public string get_CName();
    [CompilerGeneratedAttribute]
private void set_CName(string value);
    [CompilerGeneratedAttribute]
public bool get_Custom404();
    [CompilerGeneratedAttribute]
private void set_Custom404(bool value);
    internal string get_DebuggerDisplay();
}
[DebuggerDisplayAttribute("{DebuggerDisplay,nq}")]
public class Octokit.PagesBuild : object {
    [CompilerGeneratedAttribute]
private string <Url>k__BackingField;
    [CompilerGeneratedAttribute]
private StringEnum`1<PagesBuildStatus> <Status>k__BackingField;
    [CompilerGeneratedAttribute]
private ApiError <Error>k__BackingField;
    [CompilerGeneratedAttribute]
private User <Pusher>k__BackingField;
    [CompilerGeneratedAttribute]
private Commit <Commit>k__BackingField;
    [CompilerGeneratedAttribute]
private TimeSpan <Duration>k__BackingField;
    [CompilerGeneratedAttribute]
private DateTime <CreatedAt>k__BackingField;
    [CompilerGeneratedAttribute]
private DateTime <UpdatedAt>k__BackingField;
    public string Url { get; private set; }
    public StringEnum`1<PagesBuildStatus> Status { get; private set; }
    public ApiError Error { get; private set; }
    public User Pusher { get; private set; }
    public Commit Commit { get; private set; }
    public TimeSpan Duration { get; private set; }
    public DateTime CreatedAt { get; private set; }
    public DateTime UpdatedAt { get; private set; }
    internal string DebuggerDisplay { get; }
    public PagesBuild(string url, PagesBuildStatus status, ApiError error, User pusher, Commit commit, TimeSpan duration, DateTime createdAt, DateTime updatedAt);
    [CompilerGeneratedAttribute]
public string get_Url();
    [CompilerGeneratedAttribute]
private void set_Url(string value);
    [CompilerGeneratedAttribute]
public StringEnum`1<PagesBuildStatus> get_Status();
    [CompilerGeneratedAttribute]
private void set_Status(StringEnum`1<PagesBuildStatus> value);
    [CompilerGeneratedAttribute]
public ApiError get_Error();
    [CompilerGeneratedAttribute]
private void set_Error(ApiError value);
    [CompilerGeneratedAttribute]
public User get_Pusher();
    [CompilerGeneratedAttribute]
private void set_Pusher(User value);
    [CompilerGeneratedAttribute]
public Commit get_Commit();
    [CompilerGeneratedAttribute]
private void set_Commit(Commit value);
    [CompilerGeneratedAttribute]
public TimeSpan get_Duration();
    [CompilerGeneratedAttribute]
private void set_Duration(TimeSpan value);
    [CompilerGeneratedAttribute]
public DateTime get_CreatedAt();
    [CompilerGeneratedAttribute]
private void set_CreatedAt(DateTime value);
    [CompilerGeneratedAttribute]
public DateTime get_UpdatedAt();
    [CompilerGeneratedAttribute]
private void set_UpdatedAt(DateTime value);
    internal string get_DebuggerDisplay();
}
public enum Octokit.PagesBuildStatus : Enum {
    public int value__;
    [ParameterAttribute]
public static PagesBuildStatus Null;
    [ParameterAttribute]
public static PagesBuildStatus Queued;
    [ParameterAttribute]
public static PagesBuildStatus Building;
    [ParameterAttribute]
public static PagesBuildStatus Built;
    [ParameterAttribute]
public static PagesBuildStatus Errored;
}
internal static class Octokit.Pagination : object {
    internal static IDictionary`2<string, string> Setup(IDictionary`2<string, string> parameters, ApiOptions options);
    internal static bool ShouldContinue(Uri uri, ApiOptions options);
    private static Dictionary`2<string, string> ToQueryStringDictionary(Uri uri);
}
[ExtensionAttribute]
public static class Octokit.ParameterBuilder : object {
    public static Dictionary`2<string, string> AddParameter(string key, string value);
    public static Dictionary`2<string, string> AddParameter(string key, Enum value);
    [ExtensionAttribute]
public static Dictionary`2<string, string> AddParameter(Dictionary`2<string, string> data, string key, string value);
    [ExtensionAttribute]
public static Dictionary`2<string, string> AddParameter(Dictionary`2<string, string> data, string key, Enum value);
    [ExtensionAttribute]
public static Dictionary`2<string, string> AddOptionalParameter(Dictionary`2<string, string> data, string key, string value);
    [ExtensionAttribute]
public static Dictionary`2<string, string> AddOptionalParameter(Dictionary`2<string, string> data, string key, Enum value);
}
[DebuggerDisplayAttribute("{DebuggerDisplay,nq}")]
public class Octokit.Participation : object {
    [CompilerGeneratedAttribute]
private IReadOnlyList`1<int> <All>k__BackingField;
    [CompilerGeneratedAttribute]
private IReadOnlyList`1<int> <Owner>k__BackingField;
    public IReadOnlyList`1<int> All { get; private set; }
    public IReadOnlyList`1<int> Owner { get; private set; }
    internal string DebuggerDisplay { get; }
    public Participation(IEnumerable`1<int> all, IEnumerable`1<int> owner);
    [CompilerGeneratedAttribute]
public IReadOnlyList`1<int> get_All();
    [CompilerGeneratedAttribute]
private void set_All(IReadOnlyList`1<int> value);
    [CompilerGeneratedAttribute]
public IReadOnlyList`1<int> get_Owner();
    [CompilerGeneratedAttribute]
private void set_Owner(IReadOnlyList`1<int> value);
    public int TotalCommitsByOwner();
    public int TotalCommitsByContributors();
    public int TotalCommits();
    internal string get_DebuggerDisplay();
}
[DebuggerDisplayAttribute("{DebuggerDisplay,nq}")]
public class Octokit.PendingDeploymentReview : object {
    [CompilerGeneratedAttribute]
private IList`1<long> <EnvironmentIds>k__BackingField;
    [CompilerGeneratedAttribute]
private StringEnum`1<PendingDeploymentReviewState> <State>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Comment>k__BackingField;
    public IList`1<long> EnvironmentIds { get; private set; }
    public StringEnum`1<PendingDeploymentReviewState> State { get; private set; }
    public string Comment { get; private set; }
    internal string DebuggerDisplay { get; }
    public PendingDeploymentReview(IList`1<long> environmentIds, PendingDeploymentReviewState state, string comment);
    [CompilerGeneratedAttribute]
public IList`1<long> get_EnvironmentIds();
    [CompilerGeneratedAttribute]
private void set_EnvironmentIds(IList`1<long> value);
    [CompilerGeneratedAttribute]
public StringEnum`1<PendingDeploymentReviewState> get_State();
    [CompilerGeneratedAttribute]
private void set_State(StringEnum`1<PendingDeploymentReviewState> value);
    [CompilerGeneratedAttribute]
public string get_Comment();
    [CompilerGeneratedAttribute]
private void set_Comment(string value);
    internal string get_DebuggerDisplay();
}
public enum Octokit.PendingDeploymentReviewState : Enum {
    public int value__;
    [ParameterAttribute]
public static PendingDeploymentReviewState Approved;
    [ParameterAttribute]
public static PendingDeploymentReviewState Rejected;
}
[DebuggerDisplayAttribute("{DebuggerDisplay,nq}")]
public class Octokit.Plan : object {
    [CompilerGeneratedAttribute]
private long <Collaborators>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    [CompilerGeneratedAttribute]
private long <PrivateRepos>k__BackingField;
    [CompilerGeneratedAttribute]
private long <Space>k__BackingField;
    [CompilerGeneratedAttribute]
private string <BillingEmail>k__BackingField;
    [CompilerGeneratedAttribute]
private int <FilledSeats>k__BackingField;
    [CompilerGeneratedAttribute]
private int <Seats>k__BackingField;
    public long Collaborators { get; private set; }
    public string Name { get; private set; }
    public long PrivateRepos { get; private set; }
    public long Space { get; private set; }
    public string BillingEmail { get; private set; }
    public int FilledSeats { get; private set; }
    public int Seats { get; private set; }
    internal string DebuggerDisplay { get; }
    public Plan(long collaborators, string name, long privateRepos, long space, string billingEmail, int filledSeats, int seats);
    [CompilerGeneratedAttribute]
public long get_Collaborators();
    [CompilerGeneratedAttribute]
private void set_Collaborators(long value);
    [CompilerGeneratedAttribute]
public string get_Name();
    [CompilerGeneratedAttribute]
private void set_Name(string value);
    [CompilerGeneratedAttribute]
public long get_PrivateRepos();
    [CompilerGeneratedAttribute]
private void set_PrivateRepos(long value);
    [CompilerGeneratedAttribute]
public long get_Space();
    [CompilerGeneratedAttribute]
private void set_Space(long value);
    [CompilerGeneratedAttribute]
public string get_BillingEmail();
    [CompilerGeneratedAttribute]
private void set_BillingEmail(string value);
    [CompilerGeneratedAttribute]
public int get_FilledSeats();
    [CompilerGeneratedAttribute]
private void set_FilledSeats(int value);
    [CompilerGeneratedAttribute]
public int get_Seats();
    [CompilerGeneratedAttribute]
private void set_Seats(int value);
    internal string get_DebuggerDisplay();
}
[GeneratedCodeAttribute("simple-json", "1.0.0")]
internal class Octokit.PocoJsonSerializerStrategy : object {
    internal IDictionary`2<Type, ConstructorDelegate> ConstructorCache;
    internal IDictionary`2<Type, IDictionary`2<string, GetDelegate>> GetCache;
    internal IDictionary`2<Type, IDictionary`2<string, KeyValuePair`2<Type, SetDelegate>>> SetCache;
    internal static Type[] EmptyTypes;
    internal static Type[] ArrayConstructorParameterTypes;
    private static String[] Iso8601Format;
    private static PocoJsonSerializerStrategy();
    protected virtual string MapClrMemberToJsonFieldName(MemberInfo member);
    protected virtual string MapClrMemberNameToJsonFieldName(string clrPropertyName);
    internal virtual ConstructorDelegate ContructorDelegateFactory(Type key);
    internal virtual IDictionary`2<string, GetDelegate> GetterValueFactory(Type type);
    internal virtual IDictionary`2<string, KeyValuePair`2<Type, SetDelegate>> SetterValueFactory(Type type);
    public virtual bool TrySerializeNonPrimitiveObject(object input, Object& output);
    public virtual object DeserializeObject(object value, Type type);
    protected virtual object SerializeEnum(Enum p);
    protected virtual bool TrySerializeKnownTypes(object input, Object& output);
    protected virtual bool TrySerializeUnknownTypes(object input, Object& output);
}
[DebuggerDisplayAttribute("{DebuggerDisplay,nq}")]
public class Octokit.PreReceiveEnvironment : object {
    [CompilerGeneratedAttribute]
private long <Id>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Url>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ImageUrl>k__BackingField;
    [CompilerGeneratedAttribute]
private string <HtmlUrl>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <DefaultEnvironment>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<DateTimeOffset> <CreatedAt>k__BackingField;
    [CompilerGeneratedAttribute]
private int <HooksCount>k__BackingField;
    [CompilerGeneratedAttribute]
private PreReceiveEnvironmentDownload <Download>k__BackingField;
    public long Id { get; private set; }
    public string Name { get; private set; }
    public string Url { get; private set; }
    public string ImageUrl { get; private set; }
    public string HtmlUrl { get; private set; }
    public bool DefaultEnvironment { get; private set; }
    public Nullable`1<DateTimeOffset> CreatedAt { get; private set; }
    public int HooksCount { get; private set; }
    public PreReceiveEnvironmentDownload Download { get; private set; }
    internal string DebuggerDisplay { get; }
    public PreReceiveEnvironment(long id, string name, string url, string imageUrl, string htmlUrl, bool defaultEnvironment, Nullable`1<DateTimeOffset> createdAt, int hooksCount, PreReceiveEnvironmentDownload download);
    [CompilerGeneratedAttribute]
public long get_Id();
    [CompilerGeneratedAttribute]
private void set_Id(long value);
    [CompilerGeneratedAttribute]
public string get_Name();
    [CompilerGeneratedAttribute]
private void set_Name(string value);
    [CompilerGeneratedAttribute]
public string get_Url();
    [CompilerGeneratedAttribute]
private void set_Url(string value);
    [CompilerGeneratedAttribute]
public string get_ImageUrl();
    [CompilerGeneratedAttribute]
private void set_ImageUrl(string value);
    [CompilerGeneratedAttribute]
public string get_HtmlUrl();
    [CompilerGeneratedAttribute]
private void set_HtmlUrl(string value);
    [CompilerGeneratedAttribute]
public bool get_DefaultEnvironment();
    [CompilerGeneratedAttribute]
private void set_DefaultEnvironment(bool value);
    [CompilerGeneratedAttribute]
public Nullable`1<DateTimeOffset> get_CreatedAt();
    [CompilerGeneratedAttribute]
private void set_CreatedAt(Nullable`1<DateTimeOffset> value);
    [CompilerGeneratedAttribute]
public int get_HooksCount();
    [CompilerGeneratedAttribute]
private void set_HooksCount(int value);
    [CompilerGeneratedAttribute]
public PreReceiveEnvironmentDownload get_Download();
    [CompilerGeneratedAttribute]
private void set_Download(PreReceiveEnvironmentDownload value);
    public UpdatePreReceiveEnvironment ToUpdate();
    internal string get_DebuggerDisplay();
}
[DebuggerDisplayAttribute("{DebuggerDisplay,nq}")]
public class Octokit.PreReceiveEnvironmentDownload : object {
    [CompilerGeneratedAttribute]
private string <Url>k__BackingField;
    [CompilerGeneratedAttribute]
private StringEnum`1<PreReceiveEnvironmentDownloadState> <State>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Message>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<DateTimeOffset> <DownloadedAt>k__BackingField;
    public string Url { get; private set; }
    public StringEnum`1<PreReceiveEnvironmentDownloadState> State { get; private set; }
    public string Message { get; private set; }
    public Nullable`1<DateTimeOffset> DownloadedAt { get; private set; }
    internal string DebuggerDisplay { get; }
    public PreReceiveEnvironmentDownload(string url, PreReceiveEnvironmentDownloadState state, string message, Nullable`1<DateTimeOffset> downloadedAt);
    [CompilerGeneratedAttribute]
public string get_Url();
    [CompilerGeneratedAttribute]
private void set_Url(string value);
    [CompilerGeneratedAttribute]
public StringEnum`1<PreReceiveEnvironmentDownloadState> get_State();
    [CompilerGeneratedAttribute]
private void set_State(StringEnum`1<PreReceiveEnvironmentDownloadState> value);
    [CompilerGeneratedAttribute]
public string get_Message();
    [CompilerGeneratedAttribute]
private void set_Message(string value);
    [CompilerGeneratedAttribute]
public Nullable`1<DateTimeOffset> get_DownloadedAt();
    [CompilerGeneratedAttribute]
private void set_DownloadedAt(Nullable`1<DateTimeOffset> value);
    internal string get_DebuggerDisplay();
}
public enum Octokit.PreReceiveEnvironmentDownloadState : Enum {
    public int value__;
    [ParameterAttribute]
public static PreReceiveEnvironmentDownloadState NotStarted;
    [ParameterAttribute]
public static PreReceiveEnvironmentDownloadState InProgress;
    [ParameterAttribute]
public static PreReceiveEnvironmentDownloadState Success;
    [ParameterAttribute]
public static PreReceiveEnvironmentDownloadState Failed;
}
[DebuggerDisplayAttribute("{DebuggerDisplay,nq}")]
public class Octokit.PreReceiveEnvironmentReference : object {
    [CompilerGeneratedAttribute]
private long <Id>k__BackingField;
    public long Id { get; public set; }
    internal string DebuggerDisplay { get; }
    [CompilerGeneratedAttribute]
public long get_Id();
    [CompilerGeneratedAttribute]
public void set_Id(long value);
    internal string get_DebuggerDisplay();
}
[DebuggerDisplayAttribute("{DebuggerDisplay,nq}")]
public class Octokit.PreReceiveHook : object {
    [CompilerGeneratedAttribute]
private long <Id>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    [CompilerGeneratedAttribute]
private StringEnum`1<PreReceiveHookEnforcement> <Enforcement>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Script>k__BackingField;
    [CompilerGeneratedAttribute]
private Repository <ScriptRepository>k__BackingField;
    [CompilerGeneratedAttribute]
private PreReceiveEnvironment <Environment>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <AllowDownstreamConfiguration>k__BackingField;
    public long Id { get; private set; }
    public string Name { get; private set; }
    public StringEnum`1<PreReceiveHookEnforcement> Enforcement { get; private set; }
    public string Script { get; private set; }
    public Repository ScriptRepository { get; private set; }
    public PreReceiveEnvironment Environment { get; private set; }
    public bool AllowDownstreamConfiguration { get; private set; }
    internal string DebuggerDisplay { get; }
    public PreReceiveHook(long id, string name, StringEnum`1<PreReceiveHookEnforcement> enforcement, string script, Repository scriptRepository, PreReceiveEnvironment environment, bool allowDownstreamConfiguration);
    [CompilerGeneratedAttribute]
public long get_Id();
    [CompilerGeneratedAttribute]
private void set_Id(long value);
    [CompilerGeneratedAttribute]
public string get_Name();
    [CompilerGeneratedAttribute]
private void set_Name(string value);
    [CompilerGeneratedAttribute]
public StringEnum`1<PreReceiveHookEnforcement> get_Enforcement();
    [CompilerGeneratedAttribute]
private void set_Enforcement(StringEnum`1<PreReceiveHookEnforcement> value);
    [CompilerGeneratedAttribute]
public string get_Script();
    [CompilerGeneratedAttribute]
private void set_Script(string value);
    [CompilerGeneratedAttribute]
public Repository get_ScriptRepository();
    [CompilerGeneratedAttribute]
private void set_ScriptRepository(Repository value);
    [CompilerGeneratedAttribute]
public PreReceiveEnvironment get_Environment();
    [CompilerGeneratedAttribute]
private void set_Environment(PreReceiveEnvironment value);
    [CompilerGeneratedAttribute]
public bool get_AllowDownstreamConfiguration();
    [CompilerGeneratedAttribute]
private void set_AllowDownstreamConfiguration(bool value);
    public UpdatePreReceiveHook ToUpdate();
    internal string get_DebuggerDisplay();
}
public enum Octokit.PreReceiveHookEnforcement : Enum {
    public int value__;
    [ParameterAttribute]
public static PreReceiveHookEnforcement Disabled;
    [ParameterAttribute]
public static PreReceiveHookEnforcement Enabled;
    [ParameterAttribute]
public static PreReceiveHookEnforcement Testing;
}
public class Octokit.ProductHeaderValue : object {
    private ProductHeaderValue _productHeaderValue;
    public string Name { get; }
    public string Version { get; }
    public ProductHeaderValue(string name);
    public ProductHeaderValue(string name, string version);
    public ProductHeaderValue(ProductHeaderValue productHeader);
    public string get_Name();
    public string get_Version();
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
    public virtual string ToString();
    public static ProductHeaderValue Parse(string input);
    public static bool TryParse(string input, ProductHeaderValue& parsedValue);
}
[DebuggerDisplayAttribute("{DebuggerDisplay,nq}")]
public class Octokit.Project : object {
    [CompilerGeneratedAttribute]
private string <OwnerUrl>k__BackingField;
    [CompilerGeneratedAttribute]
private string <HtmlUrl>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Url>k__BackingField;
    [CompilerGeneratedAttribute]
private int <Id>k__BackingField;
    [CompilerGeneratedAttribute]
private string <NodeId>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Body>k__BackingField;
    [CompilerGeneratedAttribute]
private int <Number>k__BackingField;
    [CompilerGeneratedAttribute]
private StringEnum`1<ItemState> <State>k__BackingField;
    [CompilerGeneratedAttribute]
private User <Creator>k__BackingField;
    [CompilerGeneratedAttribute]
private DateTimeOffset <CreatedAt>k__BackingField;
    [CompilerGeneratedAttribute]
private DateTimeOffset <UpdatedAt>k__BackingField;
    public string OwnerUrl { get; private set; }
    public string HtmlUrl { get; private set; }
    public string Url { get; private set; }
    public int Id { get; private set; }
    public string NodeId { get; private set; }
    public string Name { get; private set; }
    public string Body { get; private set; }
    public int Number { get; private set; }
    public StringEnum`1<ItemState> State { get; private set; }
    public User Creator { get; private set; }
    public DateTimeOffset CreatedAt { get; private set; }
    public DateTimeOffset UpdatedAt { get; private set; }
    internal string DebuggerDisplay { get; }
    public Project(string ownerUrl, string url, string htmlUrl, int id, string nodeId, string name, string body, int number, ItemState state, User creator, DateTimeOffset createdAt, DateTimeOffset updatedAt);
    [CompilerGeneratedAttribute]
public string get_OwnerUrl();
    [CompilerGeneratedAttribute]
private void set_OwnerUrl(string value);
    [CompilerGeneratedAttribute]
public string get_HtmlUrl();
    [CompilerGeneratedAttribute]
private void set_HtmlUrl(string value);
    [CompilerGeneratedAttribute]
public string get_Url();
    [CompilerGeneratedAttribute]
private void set_Url(string value);
    [CompilerGeneratedAttribute]
public int get_Id();
    [CompilerGeneratedAttribute]
private void set_Id(int value);
    [CompilerGeneratedAttribute]
public string get_NodeId();
    [CompilerGeneratedAttribute]
private void set_NodeId(string value);
    [CompilerGeneratedAttribute]
public string get_Name();
    [CompilerGeneratedAttribute]
private void set_Name(string value);
    [CompilerGeneratedAttribute]
public string get_Body();
    [CompilerGeneratedAttribute]
private void set_Body(string value);
    [CompilerGeneratedAttribute]
public int get_Number();
    [CompilerGeneratedAttribute]
private void set_Number(int value);
    [CompilerGeneratedAttribute]
public StringEnum`1<ItemState> get_State();
    [CompilerGeneratedAttribute]
private void set_State(StringEnum`1<ItemState> value);
    [CompilerGeneratedAttribute]
public User get_Creator();
    [CompilerGeneratedAttribute]
private void set_Creator(User value);
    [CompilerGeneratedAttribute]
public DateTimeOffset get_CreatedAt();
    [CompilerGeneratedAttribute]
private void set_CreatedAt(DateTimeOffset value);
    [CompilerGeneratedAttribute]
public DateTimeOffset get_UpdatedAt();
    [CompilerGeneratedAttribute]
private void set_UpdatedAt(DateTimeOffset value);
    internal string get_DebuggerDisplay();
}
[DebuggerDisplayAttribute("{DebuggerDisplay,nq}")]
public class Octokit.ProjectCard : object {
    [CompilerGeneratedAttribute]
private string <ColumnUrl>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ContentUrl>k__BackingField;
    [CompilerGeneratedAttribute]
private long <Id>k__BackingField;
    [CompilerGeneratedAttribute]
private string <NodeId>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Note>k__BackingField;
    [CompilerGeneratedAttribute]
private User <Creator>k__BackingField;
    [CompilerGeneratedAttribute]
private DateTimeOffset <CreatedAt>k__BackingField;
    [CompilerGeneratedAttribute]
private DateTimeOffset <UpdatedAt>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <Archived>k__BackingField;
    public string ColumnUrl { get; private set; }
    public string ContentUrl { get; private set; }
    public long Id { get; private set; }
    public string NodeId { get; private set; }
    public string Note { get; private set; }
    public User Creator { get; private set; }
    public DateTimeOffset CreatedAt { get; private set; }
    public DateTimeOffset UpdatedAt { get; private set; }
    public bool Archived { get; private set; }
    internal string DebuggerDisplay { get; }
    public ProjectCard(string columnUrl, string contentUrl, long id, string nodeId, string note, User creator, DateTimeOffset createdAt, DateTimeOffset updatedAt, bool archived);
    [CompilerGeneratedAttribute]
public string get_ColumnUrl();
    [CompilerGeneratedAttribute]
private void set_ColumnUrl(string value);
    [CompilerGeneratedAttribute]
public string get_ContentUrl();
    [CompilerGeneratedAttribute]
private void set_ContentUrl(string value);
    [CompilerGeneratedAttribute]
public long get_Id();
    [CompilerGeneratedAttribute]
private void set_Id(long value);
    [CompilerGeneratedAttribute]
public string get_NodeId();
    [CompilerGeneratedAttribute]
private void set_NodeId(string value);
    [CompilerGeneratedAttribute]
public string get_Note();
    [CompilerGeneratedAttribute]
private void set_Note(string value);
    [CompilerGeneratedAttribute]
public User get_Creator();
    [CompilerGeneratedAttribute]
private void set_Creator(User value);
    [CompilerGeneratedAttribute]
public DateTimeOffset get_CreatedAt();
    [CompilerGeneratedAttribute]
private void set_CreatedAt(DateTimeOffset value);
    [CompilerGeneratedAttribute]
public DateTimeOffset get_UpdatedAt();
    [CompilerGeneratedAttribute]
private void set_UpdatedAt(DateTimeOffset value);
    [CompilerGeneratedAttribute]
public bool get_Archived();
    [CompilerGeneratedAttribute]
private void set_Archived(bool value);
    internal string get_DebuggerDisplay();
}
public enum Octokit.ProjectCardArchivedStateFilter : Enum {
    public int value__;
    [ParameterAttribute]
public static ProjectCardArchivedStateFilter NotArchived;
    [ParameterAttribute]
public static ProjectCardArchivedStateFilter Archived;
    [ParameterAttribute]
public static ProjectCardArchivedStateFilter All;
}
public enum Octokit.ProjectCardContentType : Enum {
    public int value__;
    [ParameterAttribute]
public static ProjectCardContentType Issue;
    [ParameterAttribute]
public static ProjectCardContentType PullRequest;
}
[DebuggerDisplayAttribute("{DebuggerDisplay,nq}")]
public class Octokit.ProjectCardMove : object {
    [CompilerGeneratedAttribute]
private string <Position>k__BackingField;
    [CompilerGeneratedAttribute]
private int <ColumnId>k__BackingField;
    public string Position { get; private set; }
    public int ColumnId { get; public set; }
    internal string DebuggerDisplay { get; }
    public ProjectCardMove(ProjectCardPosition position, int columnId, Nullable`1<long> cardId);
    [CompilerGeneratedAttribute]
public string get_Position();
    [CompilerGeneratedAttribute]
private void set_Position(string value);
    [CompilerGeneratedAttribute]
public int get_ColumnId();
    [CompilerGeneratedAttribute]
public void set_ColumnId(int value);
    internal string get_DebuggerDisplay();
}
public enum Octokit.ProjectCardPosition : Enum {
    public int value__;
    public static ProjectCardPosition Top;
    public static ProjectCardPosition Bottom;
    public static ProjectCardPosition After;
}
[DebuggerDisplayAttribute("{DebuggerDisplay,nq}")]
public class Octokit.ProjectCardRequest : RequestParameters {
    [CompilerGeneratedAttribute]
private Nullable`1<ProjectCardArchivedStateFilter> <ArchivedState>k__BackingField;
    [ParameterAttribute]
public Nullable`1<ProjectCardArchivedStateFilter> ArchivedState { get; private set; }
    internal string DebuggerDisplay { get; }
    public ProjectCardRequest(ProjectCardArchivedStateFilter archived);
    [CompilerGeneratedAttribute]
public Nullable`1<ProjectCardArchivedStateFilter> get_ArchivedState();
    [CompilerGeneratedAttribute]
private void set_ArchivedState(Nullable`1<ProjectCardArchivedStateFilter> value);
    internal string get_DebuggerDisplay();
}
public class Octokit.ProjectCardsClient : ApiClient {
    public ProjectCardsClient(IApiConnection apiConnection);
    [ManualRouteAttribute("GET", "/projects/columns/{column_id}/cards")]
public sealed virtual Task`1<IReadOnlyList`1<ProjectCard>> GetAll(int columnId);
    [ManualRouteAttribute("GET", "/projects/columns/{column_id}/cards")]
public sealed virtual Task`1<IReadOnlyList`1<ProjectCard>> GetAll(int columnId, ApiOptions options);
    [ManualRouteAttribute("GET", "/projects/columns/{column_id}/cards")]
public sealed virtual Task`1<IReadOnlyList`1<ProjectCard>> GetAll(int columnId, ProjectCardRequest request);
    [ManualRouteAttribute("GET", "/projects/columns/{column_id}/cards")]
public sealed virtual Task`1<IReadOnlyList`1<ProjectCard>> GetAll(int columnId, ProjectCardRequest request, ApiOptions options);
    [ManualRouteAttribute("GET", "/projects/columns/cards/{card_id}")]
public sealed virtual Task`1<ProjectCard> Get(long cardId);
    [ManualRouteAttribute("POST", "/projects/columns/{column_id}/cards")]
public sealed virtual Task`1<ProjectCard> Create(int columnId, NewProjectCard newProjectCard);
    [ManualRouteAttribute("GET", "/projects/columns/cards/{card_id}")]
public sealed virtual Task`1<ProjectCard> Update(long cardId, ProjectCardUpdate projectCardUpdate);
    [AsyncStateMachineAttribute("Octokit.ProjectCardsClient/<Delete>d__8")]
[ManualRouteAttribute("DELETE", "/projects/columns/cards/{card_id}")]
public sealed virtual Task`1<bool> Delete(long cardId);
    [AsyncStateMachineAttribute("Octokit.ProjectCardsClient/<Move>d__9")]
[ManualRouteAttribute("POST", "/projects/columns/cards/{card_id}/moves")]
public sealed virtual Task`1<bool> Move(long cardId, ProjectCardMove position);
}
[DebuggerDisplayAttribute("{DebuggerDisplay,nq}")]
public class Octokit.ProjectCardUpdate : object {
    [CompilerGeneratedAttribute]
private string <Note>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<bool> <Archived>k__BackingField;
    public string Note { get; public set; }
    public Nullable`1<bool> Archived { get; public set; }
    internal string DebuggerDisplay { get; }
    [ObsoleteAttribute("This constructor will be removed in a future release, due to the 'Note' parameter not being mandatory.  Use object initializer syntax instead.")]
public ProjectCardUpdate(string note);
    [CompilerGeneratedAttribute]
public string get_Note();
    [CompilerGeneratedAttribute]
public void set_Note(string value);
    [CompilerGeneratedAttribute]
public Nullable`1<bool> get_Archived();
    [CompilerGeneratedAttribute]
public void set_Archived(Nullable`1<bool> value);
    internal string get_DebuggerDisplay();
}
[DebuggerDisplayAttribute("{DebuggerDisplay,nq}")]
public class Octokit.ProjectColumn : object {
    [CompilerGeneratedAttribute]
private int <Id>k__BackingField;
    [CompilerGeneratedAttribute]
private string <NodeId>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ProjectUrl>k__BackingField;
    [CompilerGeneratedAttribute]
private DateTimeOffset <CreatedAt>k__BackingField;
    [CompilerGeneratedAttribute]
private DateTimeOffset <UpdatedAt>k__BackingField;
    public int Id { get; private set; }
    public string NodeId { get; private set; }
    public string Name { get; private set; }
    public string ProjectUrl { get; private set; }
    public DateTimeOffset CreatedAt { get; private set; }
    public DateTimeOffset UpdatedAt { get; private set; }
    internal string DebuggerDisplay { get; }
    public ProjectColumn(int id, string nodeId, string name, string projectUrl, DateTimeOffset createdAt, DateTimeOffset updatedAt);
    [CompilerGeneratedAttribute]
public int get_Id();
    [CompilerGeneratedAttribute]
private void set_Id(int value);
    [CompilerGeneratedAttribute]
public string get_NodeId();
    [CompilerGeneratedAttribute]
private void set_NodeId(string value);
    [CompilerGeneratedAttribute]
public string get_Name();
    [CompilerGeneratedAttribute]
private void set_Name(string value);
    [CompilerGeneratedAttribute]
public string get_ProjectUrl();
    [CompilerGeneratedAttribute]
private void set_ProjectUrl(string value);
    [CompilerGeneratedAttribute]
public DateTimeOffset get_CreatedAt();
    [CompilerGeneratedAttribute]
private void set_CreatedAt(DateTimeOffset value);
    [CompilerGeneratedAttribute]
public DateTimeOffset get_UpdatedAt();
    [CompilerGeneratedAttribute]
private void set_UpdatedAt(DateTimeOffset value);
    internal string get_DebuggerDisplay();
}
[DebuggerDisplayAttribute("{DebuggerDisplay,nq}")]
public class Octokit.ProjectColumnMove : object {
    [CompilerGeneratedAttribute]
private string <Position>k__BackingField;
    public string Position { get; private set; }
    internal string DebuggerDisplay { get; }
    public ProjectColumnMove(ProjectColumnPosition position, Nullable`1<int> columnId);
    [CompilerGeneratedAttribute]
public string get_Position();
    [CompilerGeneratedAttribute]
private void set_Position(string value);
    internal string get_DebuggerDisplay();
}
public enum Octokit.ProjectColumnPosition : Enum {
    public int value__;
    public static ProjectColumnPosition First;
    public static ProjectColumnPosition Last;
    public static ProjectColumnPosition After;
}
public class Octokit.ProjectColumnsClient : ApiClient {
    public ProjectColumnsClient(IApiConnection apiConnection);
    [ManualRouteAttribute("GET", "/projects/{project_id}/columns")]
public sealed virtual Task`1<IReadOnlyList`1<ProjectColumn>> GetAll(int projectId);
    [ManualRouteAttribute("GET", "/projects/{project_id}/columns")]
public sealed virtual Task`1<IReadOnlyList`1<ProjectColumn>> GetAll(int projectId, ApiOptions options);
    [ManualRouteAttribute("GET", "/projects/columns/{column_id}")]
public sealed virtual Task`1<ProjectColumn> Get(int columnId);
    [ManualRouteAttribute("POST", "/projects/{project_id}/columns")]
public sealed virtual Task`1<ProjectColumn> Create(int projectId, NewProjectColumn newProjectColumn);
    [ManualRouteAttribute("PATCH", "/projects/columns/{column_id}")]
public sealed virtual Task`1<ProjectColumn> Update(int columnId, ProjectColumnUpdate projectColumnUpdate);
    [AsyncStateMachineAttribute("Octokit.ProjectColumnsClient/<Delete>d__6")]
[ManualRouteAttribute("DELETE", "/projects/columns/{column_id}")]
public sealed virtual Task`1<bool> Delete(int columnId);
    [AsyncStateMachineAttribute("Octokit.ProjectColumnsClient/<Move>d__7")]
[ManualRouteAttribute("POST", "/projects/columns/{column_id}/moves")]
public sealed virtual Task`1<bool> Move(int columnId, ProjectColumnMove position);
}
[DebuggerDisplayAttribute("{DebuggerDisplay,nq}")]
public class Octokit.ProjectColumnUpdate : object {
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    public string Name { get; private set; }
    internal string DebuggerDisplay { get; }
    public ProjectColumnUpdate(string name);
    [CompilerGeneratedAttribute]
public string get_Name();
    [CompilerGeneratedAttribute]
private void set_Name(string value);
    internal string get_DebuggerDisplay();
}
[DebuggerDisplayAttribute("{DebuggerDisplay,nq}")]
public class Octokit.ProjectRequest : RequestParameters {
    [CompilerGeneratedAttribute]
private ItemStateFilter <State>k__BackingField;
    public ItemStateFilter State { get; private set; }
    internal string DebuggerDisplay { get; }
    public ProjectRequest(ItemStateFilter state);
    [CompilerGeneratedAttribute]
public ItemStateFilter get_State();
    [CompilerGeneratedAttribute]
private void set_State(ItemStateFilter value);
    internal string get_DebuggerDisplay();
}
public class Octokit.ProjectsClient : ApiClient {
    [CompilerGeneratedAttribute]
private IProjectCardsClient <Card>k__BackingField;
    [CompilerGeneratedAttribute]
private IProjectColumnsClient <Column>k__BackingField;
    public IProjectCardsClient Card { get; private set; }
    public IProjectColumnsClient Column { get; private set; }
    public ProjectsClient(IApiConnection apiConnection);
    [ManualRouteAttribute("GET", "/repos/{owner}/{repo}/projects")]
public sealed virtual Task`1<IReadOnlyList`1<Project>> GetAllForRepository(string owner, string name);
    [ManualRouteAttribute("GET", "/repos/{owner}/{repo}/projects")]
public sealed virtual Task`1<IReadOnlyList`1<Project>> GetAllForRepository(string owner, string name, ApiOptions options);
    [ManualRouteAttribute("GET", "/repos/{owner}/{repo}/projects")]
public sealed virtual Task`1<IReadOnlyList`1<Project>> GetAllForRepository(string owner, string name, ProjectRequest request);
    [ManualRouteAttribute("GET", "/repos/{owner}/{repo}/projects")]
public sealed virtual Task`1<IReadOnlyList`1<Project>> GetAllForRepository(string owner, string name, ProjectRequest request, ApiOptions options);
    [ManualRouteAttribute("GET", "/repositories/{id}/projects")]
public sealed virtual Task`1<IReadOnlyList`1<Project>> GetAllForRepository(long repositoryId);
    [ManualRouteAttribute("GET", "/repositories/{id}/projects")]
public sealed virtual Task`1<IReadOnlyList`1<Project>> GetAllForRepository(long repositoryId, ApiOptions options);
    [ManualRouteAttribute("GET", "/repositories/{id}/projects")]
public sealed virtual Task`1<IReadOnlyList`1<Project>> GetAllForRepository(long repositoryId, ProjectRequest request);
    [ManualRouteAttribute("GET", "/repositories/{id}/projects")]
public sealed virtual Task`1<IReadOnlyList`1<Project>> GetAllForRepository(long repositoryId, ProjectRequest request, ApiOptions options);
    [ManualRouteAttribute("GET", "/orgs/{org}/projects")]
public sealed virtual Task`1<IReadOnlyList`1<Project>> GetAllForOrganization(string organization);
    [ManualRouteAttribute("GET", "/orgs/{org}/projects")]
public sealed virtual Task`1<IReadOnlyList`1<Project>> GetAllForOrganization(string organization, ApiOptions options);
    [ManualRouteAttribute("GET", "/orgs/{org}/projects")]
public sealed virtual Task`1<IReadOnlyList`1<Project>> GetAllForOrganization(string organization, ProjectRequest request);
    [ManualRouteAttribute("GET", "/orgs/{org}/projects")]
public sealed virtual Task`1<IReadOnlyList`1<Project>> GetAllForOrganization(string organization, ProjectRequest request, ApiOptions options);
    [ManualRouteAttribute("GET", "/projects/{project_id}")]
public sealed virtual Task`1<Project> Get(int projectId);
    [ManualRouteAttribute("POST", "/repositories/{id}/projects")]
public sealed virtual Task`1<Project> CreateForRepository(long repositoryId, NewProject newProject);
    [ManualRouteAttribute("POST", "/orgs/{org}/projects")]
public sealed virtual Task`1<Project> CreateForOrganization(string organization, NewProject newProject);
    [ManualRouteAttribute("PATCH", "/project/{project_id}")]
public sealed virtual Task`1<Project> Update(int projectId, ProjectUpdate projectUpdate);
    [AsyncStateMachineAttribute("Octokit.ProjectsClient/<Delete>d__17")]
[ManualRouteAttribute("DELETE", "/project/{project_id}")]
public sealed virtual Task`1<bool> Delete(int projectId);
    [CompilerGeneratedAttribute]
public sealed virtual IProjectCardsClient get_Card();
    [CompilerGeneratedAttribute]
private void set_Card(IProjectCardsClient value);
    [CompilerGeneratedAttribute]
public sealed virtual IProjectColumnsClient get_Column();
    [CompilerGeneratedAttribute]
private void set_Column(IProjectColumnsClient value);
}
[DebuggerDisplayAttribute("{DebuggerDisplay,nq}")]
public class Octokit.ProjectUpdate : object {
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Body>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<ItemState> <State>k__BackingField;
    public string Name { get; public set; }
    public string Body { get; public set; }
    public Nullable`1<ItemState> State { get; public set; }
    internal string DebuggerDisplay { get; }
    [CompilerGeneratedAttribute]
public string get_Name();
    [CompilerGeneratedAttribute]
public void set_Name(string value);
    [CompilerGeneratedAttribute]
public string get_Body();
    [CompilerGeneratedAttribute]
public void set_Body(string value);
    [CompilerGeneratedAttribute]
public Nullable`1<ItemState> get_State();
    [CompilerGeneratedAttribute]
public void set_State(Nullable`1<ItemState> value);
    internal string get_DebuggerDisplay();
}
internal class Octokit.PropertyOrField : object {
    private PropertyInfo _propertyInfo;
    private FieldInfo _fieldInfo;
    [CompilerGeneratedAttribute]
private bool <CanRead>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <CanWrite>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <Base64Encoded>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <SerializeNull>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsStatic>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsPublic>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <HasParameterAttribute>k__BackingField;
    [CompilerGeneratedAttribute]
private MemberInfo <MemberInfo>k__BackingField;
    public bool CanRead { get; private set; }
    public bool CanWrite { get; private set; }
    public bool Base64Encoded { get; private set; }
    public bool SerializeNull { get; private set; }
    public bool IsStatic { get; private set; }
    public bool IsPublic { get; private set; }
    public bool HasParameterAttribute { get; private set; }
    public MemberInfo MemberInfo { get; private set; }
    public string JsonFieldName { get; }
    public GetDelegate GetDelegate { get; }
    public SetDelegate SetDelegate { get; }
    public Type Type { get; }
    public bool CanDeserialize { get; }
    public bool CanSerialize { get; }
    public PropertyOrField(PropertyInfo propertyInfo);
    public PropertyOrField(FieldInfo fieldInfo);
    protected PropertyOrField(MemberInfo memberInfo);
    [CompilerGeneratedAttribute]
public bool get_CanRead();
    [CompilerGeneratedAttribute]
private void set_CanRead(bool value);
    [CompilerGeneratedAttribute]
public bool get_CanWrite();
    [CompilerGeneratedAttribute]
private void set_CanWrite(bool value);
    [CompilerGeneratedAttribute]
public bool get_Base64Encoded();
    [CompilerGeneratedAttribute]
private void set_Base64Encoded(bool value);
    [CompilerGeneratedAttribute]
public bool get_SerializeNull();
    [CompilerGeneratedAttribute]
private void set_SerializeNull(bool value);
    [CompilerGeneratedAttribute]
public bool get_IsStatic();
    [CompilerGeneratedAttribute]
private void set_IsStatic(bool value);
    [CompilerGeneratedAttribute]
public bool get_IsPublic();
    [CompilerGeneratedAttribute]
private void set_IsPublic(bool value);
    [CompilerGeneratedAttribute]
public bool get_HasParameterAttribute();
    [CompilerGeneratedAttribute]
private void set_HasParameterAttribute(bool value);
    [CompilerGeneratedAttribute]
public MemberInfo get_MemberInfo();
    [CompilerGeneratedAttribute]
private void set_MemberInfo(MemberInfo value);
    public object GetValue(object instance);
    public void SetValue(object instance, object value);
    public string get_JsonFieldName();
    public GetDelegate get_GetDelegate();
    public SetDelegate get_SetDelegate();
    public Type get_Type();
    public bool get_CanDeserialize();
    public bool get_CanSerialize();
}
[DebuggerDisplayAttribute("{DebuggerDisplay,nq}")]
public class Octokit.PublicKey : object {
    [CompilerGeneratedAttribute]
private long <Id>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Key>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Url>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Title>k__BackingField;
    public long Id { get; private set; }
    public string Key { get; private set; }
    public string Url { get; private set; }
    public string Title { get; private set; }
    internal string DebuggerDisplay { get; }
    public PublicKey(long id, string key, string url, string title);
    [CompilerGeneratedAttribute]
public long get_Id();
    [CompilerGeneratedAttribute]
private void set_Id(long value);
    [CompilerGeneratedAttribute]
public string get_Key();
    [CompilerGeneratedAttribute]
private void set_Key(string value);
    [CompilerGeneratedAttribute]
public string get_Url();
    [CompilerGeneratedAttribute]
private void set_Url(string value);
    [CompilerGeneratedAttribute]
public string get_Title();
    [CompilerGeneratedAttribute]
private void set_Title(string value);
    internal string get_DebuggerDisplay();
}
[DebuggerDisplayAttribute("{DebuggerDisplay,nq}")]
public class Octokit.PublicRepositoryRequest : RequestParameters {
    [CompilerGeneratedAttribute]
private long <Since>k__BackingField;
    public long Since { get; public set; }
    internal string DebuggerDisplay { get; }
    public PublicRepositoryRequest(long since);
    [CompilerGeneratedAttribute]
public long get_Since();
    [CompilerGeneratedAttribute]
public void set_Since(long value);
    internal string get_DebuggerDisplay();
}
[DebuggerDisplayAttribute("{DebuggerDisplay,nq}")]
public class Octokit.PullRequest : object {
    [CompilerGeneratedAttribute]
private long <Id>k__BackingField;
    [CompilerGeneratedAttribute]
private string <NodeId>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Url>k__BackingField;
    [CompilerGeneratedAttribute]
private string <HtmlUrl>k__BackingField;
    [CompilerGeneratedAttribute]
private string <DiffUrl>k__BackingField;
    [CompilerGeneratedAttribute]
private string <PatchUrl>k__BackingField;
    [CompilerGeneratedAttribute]
private string <IssueUrl>k__BackingField;
    [CompilerGeneratedAttribute]
private string <StatusesUrl>k__BackingField;
    [CompilerGeneratedAttribute]
private int <Number>k__BackingField;
    [CompilerGeneratedAttribute]
private StringEnum`1<ItemState> <State>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Title>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Body>k__BackingField;
    [CompilerGeneratedAttribute]
private DateTimeOffset <CreatedAt>k__BackingField;
    [CompilerGeneratedAttribute]
private DateTimeOffset <UpdatedAt>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<DateTimeOffset> <ClosedAt>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<DateTimeOffset> <MergedAt>k__BackingField;
    [CompilerGeneratedAttribute]
private GitReference <Head>k__BackingField;
    [CompilerGeneratedAttribute]
private GitReference <Base>k__BackingField;
    [CompilerGeneratedAttribute]
private User <User>k__BackingField;
    [CompilerGeneratedAttribute]
private User <Assignee>k__BackingField;
    [CompilerGeneratedAttribute]
private IReadOnlyList`1<User> <Assignees>k__BackingField;
    [CompilerGeneratedAttribute]
private Milestone <Milestone>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <Draft>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<bool> <Mergeable>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<StringEnum`1<MergeableState>> <MergeableState>k__BackingField;
    [CompilerGeneratedAttribute]
private User <MergedBy>k__BackingField;
    [CompilerGeneratedAttribute]
private string <MergeCommitSha>k__BackingField;
    [CompilerGeneratedAttribute]
private int <Comments>k__BackingField;
    [CompilerGeneratedAttribute]
private int <Commits>k__BackingField;
    [CompilerGeneratedAttribute]
private int <Additions>k__BackingField;
    [CompilerGeneratedAttribute]
private int <Deletions>k__BackingField;
    [CompilerGeneratedAttribute]
private int <ChangedFiles>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <Locked>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<bool> <MaintainerCanModify>k__BackingField;
    [CompilerGeneratedAttribute]
private IReadOnlyList`1<User> <RequestedReviewers>k__BackingField;
    [CompilerGeneratedAttribute]
private IReadOnlyList`1<Team> <RequestedTeams>k__BackingField;
    [CompilerGeneratedAttribute]
private IReadOnlyList`1<Label> <Labels>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<StringEnum`1<LockReason>> <ActiveLockReason>k__BackingField;
    public long Id { get; private set; }
    public string NodeId { get; private set; }
    public string Url { get; private set; }
    public string HtmlUrl { get; private set; }
    public string DiffUrl { get; private set; }
    public string PatchUrl { get; private set; }
    public string IssueUrl { get; private set; }
    public string StatusesUrl { get; private set; }
    public int Number { get; private set; }
    public StringEnum`1<ItemState> State { get; private set; }
    public string Title { get; private set; }
    public string Body { get; private set; }
    public DateTimeOffset CreatedAt { get; private set; }
    public DateTimeOffset UpdatedAt { get; private set; }
    public Nullable`1<DateTimeOffset> ClosedAt { get; private set; }
    public Nullable`1<DateTimeOffset> MergedAt { get; private set; }
    public GitReference Head { get; private set; }
    public GitReference Base { get; private set; }
    public User User { get; private set; }
    public User Assignee { get; private set; }
    public IReadOnlyList`1<User> Assignees { get; private set; }
    public Milestone Milestone { get; private set; }
    public bool Draft { get; private set; }
    public bool Merged { get; }
    public Nullable`1<bool> Mergeable { get; private set; }
    public Nullable`1<StringEnum`1<MergeableState>> MergeableState { get; private set; }
    public User MergedBy { get; private set; }
    public string MergeCommitSha { get; private set; }
    public int Comments { get; private set; }
    public int Commits { get; private set; }
    public int Additions { get; private set; }
    public int Deletions { get; private set; }
    public int ChangedFiles { get; private set; }
    public bool Locked { get; private set; }
    public Nullable`1<bool> MaintainerCanModify { get; private set; }
    public IReadOnlyList`1<User> RequestedReviewers { get; private set; }
    public IReadOnlyList`1<Team> RequestedTeams { get; private set; }
    public IReadOnlyList`1<Label> Labels { get; private set; }
    public Nullable`1<StringEnum`1<LockReason>> ActiveLockReason { get; private set; }
    internal string DebuggerDisplay { get; }
    public PullRequest(int number);
    public PullRequest(long id, string nodeId, string url, string htmlUrl, string diffUrl, string patchUrl, string issueUrl, string statusesUrl, int number, ItemState state, string title, string body, DateTimeOffset createdAt, DateTimeOffset updatedAt, Nullable`1<DateTimeOffset> closedAt, Nullable`1<DateTimeOffset> mergedAt, GitReference head, GitReference base, User user, User assignee, IReadOnlyList`1<User> assignees, bool draft, Nullable`1<bool> mergeable, Nullable`1<MergeableState> mergeableState, User mergedBy, string mergeCommitSha, int comments, int commits, int additions, int deletions, int changedFiles, Milestone milestone, bool locked, Nullable`1<bool> maintainerCanModify, IReadOnlyList`1<User> requestedReviewers, IReadOnlyList`1<Team> requestedTeams, IReadOnlyList`1<Label> labels, Nullable`1<LockReason> activeLockReason);
    [CompilerGeneratedAttribute]
public long get_Id();
    [CompilerGeneratedAttribute]
private void set_Id(long value);
    [CompilerGeneratedAttribute]
public string get_NodeId();
    [CompilerGeneratedAttribute]
private void set_NodeId(string value);
    [CompilerGeneratedAttribute]
public string get_Url();
    [CompilerGeneratedAttribute]
private void set_Url(string value);
    [CompilerGeneratedAttribute]
public string get_HtmlUrl();
    [CompilerGeneratedAttribute]
private void set_HtmlUrl(string value);
    [CompilerGeneratedAttribute]
public string get_DiffUrl();
    [CompilerGeneratedAttribute]
private void set_DiffUrl(string value);
    [CompilerGeneratedAttribute]
public string get_PatchUrl();
    [CompilerGeneratedAttribute]
private void set_PatchUrl(string value);
    [CompilerGeneratedAttribute]
public string get_IssueUrl();
    [CompilerGeneratedAttribute]
private void set_IssueUrl(string value);
    [CompilerGeneratedAttribute]
public string get_StatusesUrl();
    [CompilerGeneratedAttribute]
private void set_StatusesUrl(string value);
    [CompilerGeneratedAttribute]
public int get_Number();
    [CompilerGeneratedAttribute]
private void set_Number(int value);
    [CompilerGeneratedAttribute]
public StringEnum`1<ItemState> get_State();
    [CompilerGeneratedAttribute]
private void set_State(StringEnum`1<ItemState> value);
    [CompilerGeneratedAttribute]
public string get_Title();
    [CompilerGeneratedAttribute]
private void set_Title(string value);
    [CompilerGeneratedAttribute]
public string get_Body();
    [CompilerGeneratedAttribute]
private void set_Body(string value);
    [CompilerGeneratedAttribute]
public DateTimeOffset get_CreatedAt();
    [CompilerGeneratedAttribute]
private void set_CreatedAt(DateTimeOffset value);
    [CompilerGeneratedAttribute]
public DateTimeOffset get_UpdatedAt();
    [CompilerGeneratedAttribute]
private void set_UpdatedAt(DateTimeOffset value);
    [CompilerGeneratedAttribute]
public Nullable`1<DateTimeOffset> get_ClosedAt();
    [CompilerGeneratedAttribute]
private void set_ClosedAt(Nullable`1<DateTimeOffset> value);
    [CompilerGeneratedAttribute]
public Nullable`1<DateTimeOffset> get_MergedAt();
    [CompilerGeneratedAttribute]
private void set_MergedAt(Nullable`1<DateTimeOffset> value);
    [CompilerGeneratedAttribute]
public GitReference get_Head();
    [CompilerGeneratedAttribute]
private void set_Head(GitReference value);
    [CompilerGeneratedAttribute]
public GitReference get_Base();
    [CompilerGeneratedAttribute]
private void set_Base(GitReference value);
    [CompilerGeneratedAttribute]
public User get_User();
    [CompilerGeneratedAttribute]
private void set_User(User value);
    [CompilerGeneratedAttribute]
public User get_Assignee();
    [CompilerGeneratedAttribute]
private void set_Assignee(User value);
    [CompilerGeneratedAttribute]
public IReadOnlyList`1<User> get_Assignees();
    [CompilerGeneratedAttribute]
private void set_Assignees(IReadOnlyList`1<User> value);
    [CompilerGeneratedAttribute]
public Milestone get_Milestone();
    [CompilerGeneratedAttribute]
private void set_Milestone(Milestone value);
    [CompilerGeneratedAttribute]
public bool get_Draft();
    [CompilerGeneratedAttribute]
private void set_Draft(bool value);
    public bool get_Merged();
    [CompilerGeneratedAttribute]
public Nullable`1<bool> get_Mergeable();
    [CompilerGeneratedAttribute]
private void set_Mergeable(Nullable`1<bool> value);
    [CompilerGeneratedAttribute]
public Nullable`1<StringEnum`1<MergeableState>> get_MergeableState();
    [CompilerGeneratedAttribute]
private void set_MergeableState(Nullable`1<StringEnum`1<MergeableState>> value);
    [CompilerGeneratedAttribute]
public User get_MergedBy();
    [CompilerGeneratedAttribute]
private void set_MergedBy(User value);
    [CompilerGeneratedAttribute]
public string get_MergeCommitSha();
    [CompilerGeneratedAttribute]
private void set_MergeCommitSha(string value);
    [CompilerGeneratedAttribute]
public int get_Comments();
    [CompilerGeneratedAttribute]
private void set_Comments(int value);
    [CompilerGeneratedAttribute]
public int get_Commits();
    [CompilerGeneratedAttribute]
private void set_Commits(int value);
    [CompilerGeneratedAttribute]
public int get_Additions();
    [CompilerGeneratedAttribute]
private void set_Additions(int value);
    [CompilerGeneratedAttribute]
public int get_Deletions();
    [CompilerGeneratedAttribute]
private void set_Deletions(int value);
    [CompilerGeneratedAttribute]
public int get_ChangedFiles();
    [CompilerGeneratedAttribute]
private void set_ChangedFiles(int value);
    [CompilerGeneratedAttribute]
public bool get_Locked();
    [CompilerGeneratedAttribute]
private void set_Locked(bool value);
    [CompilerGeneratedAttribute]
public Nullable`1<bool> get_MaintainerCanModify();
    [CompilerGeneratedAttribute]
private void set_MaintainerCanModify(Nullable`1<bool> value);
    [CompilerGeneratedAttribute]
public IReadOnlyList`1<User> get_RequestedReviewers();
    [CompilerGeneratedAttribute]
private void set_RequestedReviewers(IReadOnlyList`1<User> value);
    [CompilerGeneratedAttribute]
public IReadOnlyList`1<Team> get_RequestedTeams();
    [CompilerGeneratedAttribute]
private void set_RequestedTeams(IReadOnlyList`1<Team> value);
    [CompilerGeneratedAttribute]
public IReadOnlyList`1<Label> get_Labels();
    [CompilerGeneratedAttribute]
private void set_Labels(IReadOnlyList`1<Label> value);
    [CompilerGeneratedAttribute]
public Nullable`1<StringEnum`1<LockReason>> get_ActiveLockReason();
    [CompilerGeneratedAttribute]
private void set_ActiveLockReason(Nullable`1<StringEnum`1<LockReason>> value);
    internal string get_DebuggerDisplay();
}
[DebuggerDisplayAttribute("{DebuggerDisplay,nq}")]
public class Octokit.PullRequestCommentPayload : ActivityPayload {
    [CompilerGeneratedAttribute]
private string <Action>k__BackingField;
    [CompilerGeneratedAttribute]
private PullRequest <PullRequest>k__BackingField;
    [CompilerGeneratedAttribute]
private PullRequestReviewComment <Comment>k__BackingField;
    public string Action { get; private set; }
    public PullRequest PullRequest { get; private set; }
    public PullRequestReviewComment Comment { get; private set; }
    [CompilerGeneratedAttribute]
public string get_Action();
    [CompilerGeneratedAttribute]
private void set_Action(string value);
    [CompilerGeneratedAttribute]
public PullRequest get_PullRequest();
    [CompilerGeneratedAttribute]
private void set_PullRequest(PullRequest value);
    [CompilerGeneratedAttribute]
public PullRequestReviewComment get_Comment();
    [CompilerGeneratedAttribute]
private void set_Comment(PullRequestReviewComment value);
}
[DebuggerDisplayAttribute("{DebuggerDisplay,nq}")]
public class Octokit.PullRequestCommit : object {
    [CompilerGeneratedAttribute]
private string <NodeId>k__BackingField;
    [CompilerGeneratedAttribute]
private User <Author>k__BackingField;
    [CompilerGeneratedAttribute]
private string <CommentsUrl>k__BackingField;
    [CompilerGeneratedAttribute]
private Commit <Commit>k__BackingField;
    [CompilerGeneratedAttribute]
private User <Committer>k__BackingField;
    [CompilerGeneratedAttribute]
private string <HtmlUrl>k__BackingField;
    [CompilerGeneratedAttribute]
private IReadOnlyList`1<GitReference> <Parents>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Sha>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Url>k__BackingField;
    public string NodeId { get; private set; }
    public User Author { get; private set; }
    public string CommentsUrl { get; private set; }
    public Commit Commit { get; private set; }
    public User Committer { get; private set; }
    public string HtmlUrl { get; private set; }
    public IReadOnlyList`1<GitReference> Parents { get; private set; }
    public string Sha { get; private set; }
    public string Url { get; private set; }
    internal string DebuggerDisplay { get; }
    public PullRequestCommit(string nodeId, User author, string commentsUrl, Commit commit, User committer, string htmlUrl, IEnumerable`1<GitReference> parents, string sha, string url);
    [CompilerGeneratedAttribute]
public string get_NodeId();
    [CompilerGeneratedAttribute]
private void set_NodeId(string value);
    [CompilerGeneratedAttribute]
public User get_Author();
    [CompilerGeneratedAttribute]
private void set_Author(User value);
    [CompilerGeneratedAttribute]
public string get_CommentsUrl();
    [CompilerGeneratedAttribute]
private void set_CommentsUrl(string value);
    [CompilerGeneratedAttribute]
public Commit get_Commit();
    [CompilerGeneratedAttribute]
private void set_Commit(Commit value);
    [CompilerGeneratedAttribute]
public User get_Committer();
    [CompilerGeneratedAttribute]
private void set_Committer(User value);
    [CompilerGeneratedAttribute]
public string get_HtmlUrl();
    [CompilerGeneratedAttribute]
private void set_HtmlUrl(string value);
    [CompilerGeneratedAttribute]
public IReadOnlyList`1<GitReference> get_Parents();
    [CompilerGeneratedAttribute]
private void set_Parents(IReadOnlyList`1<GitReference> value);
    [CompilerGeneratedAttribute]
public string get_Sha();
    [CompilerGeneratedAttribute]
private void set_Sha(string value);
    [CompilerGeneratedAttribute]
public string get_Url();
    [CompilerGeneratedAttribute]
private void set_Url(string value);
    internal string get_DebuggerDisplay();
}
[DebuggerDisplayAttribute("{DebuggerDisplay,nq}")]
public class Octokit.PullRequestEventPayload : ActivityPayload {
    [CompilerGeneratedAttribute]
private string <Action>k__BackingField;
    [CompilerGeneratedAttribute]
private int <Number>k__BackingField;
    [CompilerGeneratedAttribute]
private PullRequest <PullRequest>k__BackingField;
    public string Action { get; private set; }
    public int Number { get; private set; }
    public PullRequest PullRequest { get; private set; }
    [CompilerGeneratedAttribute]
public string get_Action();
    [CompilerGeneratedAttribute]
private void set_Action(string value);
    [CompilerGeneratedAttribute]
public int get_Number();
    [CompilerGeneratedAttribute]
private void set_Number(int value);
    [CompilerGeneratedAttribute]
public PullRequest get_PullRequest();
    [CompilerGeneratedAttribute]
private void set_PullRequest(PullRequest value);
}
[DebuggerDisplayAttribute("{DebuggerDisplay,nq}")]
public class Octokit.PullRequestFile : object {
    [CompilerGeneratedAttribute]
private string <Sha>k__BackingField;
    [CompilerGeneratedAttribute]
private string <FileName>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Status>k__BackingField;
    [CompilerGeneratedAttribute]
private int <Additions>k__BackingField;
    [CompilerGeneratedAttribute]
private int <Deletions>k__BackingField;
    [CompilerGeneratedAttribute]
private int <Changes>k__BackingField;
    [CompilerGeneratedAttribute]
private string <BlobUrl>k__BackingField;
    [CompilerGeneratedAttribute]
private string <RawUrl>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ContentsUrl>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Patch>k__BackingField;
    [CompilerGeneratedAttribute]
private string <PreviousFileName>k__BackingField;
    public string Sha { get; private set; }
    [ParameterAttribute]
public string FileName { get; private set; }
    public string Status { get; private set; }
    public int Additions { get; private set; }
    public int Deletions { get; private set; }
    public int Changes { get; private set; }
    public string BlobUrl { get; private set; }
    public string RawUrl { get; private set; }
    public string ContentsUrl { get; private set; }
    public string Patch { get; private set; }
    [ParameterAttribute]
public string PreviousFileName { get; private set; }
    internal string DebuggerDisplay { get; }
    public PullRequestFile(string sha, string fileName, string status, int additions, int deletions, int changes, string blobUrl, string rawUrl, string contentsUrl, string patch, string previousFileName);
    [CompilerGeneratedAttribute]
public string get_Sha();
    [CompilerGeneratedAttribute]
private void set_Sha(string value);
    [CompilerGeneratedAttribute]
public string get_FileName();
    [CompilerGeneratedAttribute]
private void set_FileName(string value);
    [CompilerGeneratedAttribute]
public string get_Status();
    [CompilerGeneratedAttribute]
private void set_Status(string value);
    [CompilerGeneratedAttribute]
public int get_Additions();
    [CompilerGeneratedAttribute]
private void set_Additions(int value);
    [CompilerGeneratedAttribute]
public int get_Deletions();
    [CompilerGeneratedAttribute]
private void set_Deletions(int value);
    [CompilerGeneratedAttribute]
public int get_Changes();
    [CompilerGeneratedAttribute]
private void set_Changes(int value);
    [CompilerGeneratedAttribute]
public string get_BlobUrl();
    [CompilerGeneratedAttribute]
private void set_BlobUrl(string value);
    [CompilerGeneratedAttribute]
public string get_RawUrl();
    [CompilerGeneratedAttribute]
private void set_RawUrl(string value);
    [CompilerGeneratedAttribute]
public string get_ContentsUrl();
    [CompilerGeneratedAttribute]
private void set_ContentsUrl(string value);
    [CompilerGeneratedAttribute]
public string get_Patch();
    [CompilerGeneratedAttribute]
private void set_Patch(string value);
    [CompilerGeneratedAttribute]
public string get_PreviousFileName();
    [CompilerGeneratedAttribute]
private void set_PreviousFileName(string value);
    internal string get_DebuggerDisplay();
}
[DebuggerDisplayAttribute("{DebuggerDisplay,nq}")]
public class Octokit.PullRequestMerge : object {
    [CompilerGeneratedAttribute]
private string <Sha>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <Merged>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Message>k__BackingField;
    public string Sha { get; private set; }
    public bool Merged { get; private set; }
    public string Message { get; private set; }
    internal string DebuggerDisplay { get; }
    public PullRequestMerge(string sha, bool merged, string message);
    [CompilerGeneratedAttribute]
public string get_Sha();
    [CompilerGeneratedAttribute]
private void set_Sha(string value);
    [CompilerGeneratedAttribute]
public bool get_Merged();
    [CompilerGeneratedAttribute]
private void set_Merged(bool value);
    [CompilerGeneratedAttribute]
public string get_Message();
    [CompilerGeneratedAttribute]
private void set_Message(string value);
    internal string get_DebuggerDisplay();
}
public enum Octokit.PullRequestMergeMethod : Enum {
    public int value__;
    [ParameterAttribute]
public static PullRequestMergeMethod Merge;
    [ParameterAttribute]
public static PullRequestMergeMethod Squash;
    [ParameterAttribute]
public static PullRequestMergeMethod Rebase;
}
public class Octokit.PullRequestMismatchException : ApiException {
    public string Message { get; }
    public PullRequestMismatchException(IResponse response);
    public PullRequestMismatchException(IResponse response, Exception innerException);
    protected PullRequestMismatchException(SerializationInfo info, StreamingContext context);
    public virtual string get_Message();
}
public class Octokit.PullRequestNotMergeableException : ApiException {
    public string Message { get; }
    public PullRequestNotMergeableException(IResponse response);
    public PullRequestNotMergeableException(IResponse response, Exception innerException);
    protected PullRequestNotMergeableException(SerializationInfo info, StreamingContext context);
    public virtual string get_Message();
}
[DebuggerDisplayAttribute("{DebuggerDisplay,nq}")]
public class Octokit.PullRequestRequest : RequestParameters {
    [CompilerGeneratedAttribute]
private ItemStateFilter <State>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Head>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Base>k__BackingField;
    [CompilerGeneratedAttribute]
private PullRequestSort <SortProperty>k__BackingField;
    [CompilerGeneratedAttribute]
private SortDirection <SortDirection>k__BackingField;
    public ItemStateFilter State { get; public set; }
    public string Head { get; public set; }
    public string Base { get; public set; }
    [ParameterAttribute]
public PullRequestSort SortProperty { get; public set; }
    [ParameterAttribute]
public SortDirection SortDirection { get; public set; }
    internal string DebuggerDisplay { get; }
    [CompilerGeneratedAttribute]
public ItemStateFilter get_State();
    [CompilerGeneratedAttribute]
public void set_State(ItemStateFilter value);
    [CompilerGeneratedAttribute]
public string get_Head();
    [CompilerGeneratedAttribute]
public void set_Head(string value);
    [CompilerGeneratedAttribute]
public string get_Base();
    [CompilerGeneratedAttribute]
public void set_Base(string value);
    [CompilerGeneratedAttribute]
public PullRequestSort get_SortProperty();
    [CompilerGeneratedAttribute]
public void set_SortProperty(PullRequestSort value);
    [CompilerGeneratedAttribute]
public SortDirection get_SortDirection();
    [CompilerGeneratedAttribute]
public void set_SortDirection(SortDirection value);
    internal string get_DebuggerDisplay();
}
[DebuggerDisplayAttribute("{DebuggerDisplay,nq}")]
public class Octokit.PullRequestReview : object {
    [CompilerGeneratedAttribute]
private long <Id>k__BackingField;
    [CompilerGeneratedAttribute]
private string <NodeId>k__BackingField;
    [CompilerGeneratedAttribute]
private StringEnum`1<PullRequestReviewState> <State>k__BackingField;
    [CompilerGeneratedAttribute]
private string <CommitId>k__BackingField;
    [CompilerGeneratedAttribute]
private User <User>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Body>k__BackingField;
    [CompilerGeneratedAttribute]
private string <HtmlUrl>k__BackingField;
    [CompilerGeneratedAttribute]
private string <PullRequestUrl>k__BackingField;
    [CompilerGeneratedAttribute]
private StringEnum`1<AuthorAssociation> <AuthorAssociation>k__BackingField;
    [CompilerGeneratedAttribute]
private DateTimeOffset <SubmittedAt>k__BackingField;
    public long Id { get; private set; }
    public string NodeId { get; private set; }
    public StringEnum`1<PullRequestReviewState> State { get; private set; }
    public string CommitId { get; private set; }
    public User User { get; private set; }
    public string Body { get; private set; }
    public string HtmlUrl { get; private set; }
    public string PullRequestUrl { get; private set; }
    public StringEnum`1<AuthorAssociation> AuthorAssociation { get; private set; }
    public DateTimeOffset SubmittedAt { get; private set; }
    internal string DebuggerDisplay { get; }
    public PullRequestReview(long id);
    public PullRequestReview(long id, string nodeId, string commitId, User user, string body, string htmlUrl, string pullRequestUrl, PullRequestReviewState state, AuthorAssociation authorAssociation, DateTimeOffset submittedAt);
    [CompilerGeneratedAttribute]
public long get_Id();
    [CompilerGeneratedAttribute]
private void set_Id(long value);
    [CompilerGeneratedAttribute]
public string get_NodeId();
    [CompilerGeneratedAttribute]
private void set_NodeId(string value);
    [CompilerGeneratedAttribute]
public StringEnum`1<PullRequestReviewState> get_State();
    [CompilerGeneratedAttribute]
private void set_State(StringEnum`1<PullRequestReviewState> value);
    [CompilerGeneratedAttribute]
public string get_CommitId();
    [CompilerGeneratedAttribute]
private void set_CommitId(string value);
    [CompilerGeneratedAttribute]
public User get_User();
    [CompilerGeneratedAttribute]
private void set_User(User value);
    [CompilerGeneratedAttribute]
public string get_Body();
    [CompilerGeneratedAttribute]
private void set_Body(string value);
    [CompilerGeneratedAttribute]
public string get_HtmlUrl();
    [CompilerGeneratedAttribute]
private void set_HtmlUrl(string value);
    [CompilerGeneratedAttribute]
public string get_PullRequestUrl();
    [CompilerGeneratedAttribute]
private void set_PullRequestUrl(string value);
    [CompilerGeneratedAttribute]
public StringEnum`1<AuthorAssociation> get_AuthorAssociation();
    [CompilerGeneratedAttribute]
private void set_AuthorAssociation(StringEnum`1<AuthorAssociation> value);
    [CompilerGeneratedAttribute]
public DateTimeOffset get_SubmittedAt();
    [CompilerGeneratedAttribute]
private void set_SubmittedAt(DateTimeOffset value);
    internal string get_DebuggerDisplay();
}
[DebuggerDisplayAttribute("{DebuggerDisplay,nq}")]
public class Octokit.PullRequestReviewComment : object {
    [CompilerGeneratedAttribute]
private string <Url>k__BackingField;
    [CompilerGeneratedAttribute]
private long <Id>k__BackingField;
    [CompilerGeneratedAttribute]
private string <NodeId>k__BackingField;
    [CompilerGeneratedAttribute]
private string <DiffHunk>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Path>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<int> <Position>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<int> <OriginalPosition>k__BackingField;
    [CompilerGeneratedAttribute]
private string <CommitId>k__BackingField;
    [CompilerGeneratedAttribute]
private string <OriginalCommitId>k__BackingField;
    [CompilerGeneratedAttribute]
private User <User>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Body>k__BackingField;
    [CompilerGeneratedAttribute]
private DateTimeOffset <CreatedAt>k__BackingField;
    [CompilerGeneratedAttribute]
private DateTimeOffset <UpdatedAt>k__BackingField;
    [CompilerGeneratedAttribute]
private string <HtmlUrl>k__BackingField;
    [CompilerGeneratedAttribute]
private string <PullRequestUrl>k__BackingField;
    [CompilerGeneratedAttribute]
private ReactionSummary <Reactions>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<long> <InReplyToId>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<long> <PullRequestReviewId>k__BackingField;
    [CompilerGeneratedAttribute]
private StringEnum`1<AuthorAssociation> <AuthorAssociation>k__BackingField;
    public string Url { get; private set; }
    public long Id { get; private set; }
    public string NodeId { get; private set; }
    public string DiffHunk { get; private set; }
    public string Path { get; private set; }
    public Nullable`1<int> Position { get; private set; }
    public Nullable`1<int> OriginalPosition { get; private set; }
    public string CommitId { get; private set; }
    public string OriginalCommitId { get; private set; }
    public User User { get; private set; }
    public string Body { get; private set; }
    public DateTimeOffset CreatedAt { get; private set; }
    public DateTimeOffset UpdatedAt { get; private set; }
    public string HtmlUrl { get; private set; }
    public string PullRequestUrl { get; private set; }
    public ReactionSummary Reactions { get; private set; }
    public Nullable`1<long> InReplyToId { get; private set; }
    public Nullable`1<long> PullRequestReviewId { get; private set; }
    public StringEnum`1<AuthorAssociation> AuthorAssociation { get; private set; }
    internal string DebuggerDisplay { get; }
    public PullRequestReviewComment(long id);
    public PullRequestReviewComment(string url, long id, string nodeId, string diffHunk, string path, Nullable`1<int> position, Nullable`1<int> originalPosition, string commitId, string originalCommitId, User user, string body, DateTimeOffset createdAt, DateTimeOffset updatedAt, string htmlUrl, string pullRequestUrl, ReactionSummary reactions, Nullable`1<long> inReplyToId, Nullable`1<long> pullRequestReviewId, AuthorAssociation authorAssociation);
    [CompilerGeneratedAttribute]
public string get_Url();
    [CompilerGeneratedAttribute]
private void set_Url(string value);
    [CompilerGeneratedAttribute]
public long get_Id();
    [CompilerGeneratedAttribute]
private void set_Id(long value);
    [CompilerGeneratedAttribute]
public string get_NodeId();
    [CompilerGeneratedAttribute]
private void set_NodeId(string value);
    [CompilerGeneratedAttribute]
public string get_DiffHunk();
    [CompilerGeneratedAttribute]
private void set_DiffHunk(string value);
    [CompilerGeneratedAttribute]
public string get_Path();
    [CompilerGeneratedAttribute]
private void set_Path(string value);
    [CompilerGeneratedAttribute]
public Nullable`1<int> get_Position();
    [CompilerGeneratedAttribute]
private void set_Position(Nullable`1<int> value);
    [CompilerGeneratedAttribute]
public Nullable`1<int> get_OriginalPosition();
    [CompilerGeneratedAttribute]
private void set_OriginalPosition(Nullable`1<int> value);
    [CompilerGeneratedAttribute]
public string get_CommitId();
    [CompilerGeneratedAttribute]
private void set_CommitId(string value);
    [CompilerGeneratedAttribute]
public string get_OriginalCommitId();
    [CompilerGeneratedAttribute]
private void set_OriginalCommitId(string value);
    [CompilerGeneratedAttribute]
public User get_User();
    [CompilerGeneratedAttribute]
private void set_User(User value);
    [CompilerGeneratedAttribute]
public string get_Body();
    [CompilerGeneratedAttribute]
private void set_Body(string value);
    [CompilerGeneratedAttribute]
public DateTimeOffset get_CreatedAt();
    [CompilerGeneratedAttribute]
private void set_CreatedAt(DateTimeOffset value);
    [CompilerGeneratedAttribute]
public DateTimeOffset get_UpdatedAt();
    [CompilerGeneratedAttribute]
private void set_UpdatedAt(DateTimeOffset value);
    [CompilerGeneratedAttribute]
public string get_HtmlUrl();
    [CompilerGeneratedAttribute]
private void set_HtmlUrl(string value);
    [CompilerGeneratedAttribute]
public string get_PullRequestUrl();
    [CompilerGeneratedAttribute]
private void set_PullRequestUrl(string value);
    [CompilerGeneratedAttribute]
public ReactionSummary get_Reactions();
    [CompilerGeneratedAttribute]
private void set_Reactions(ReactionSummary value);
    [CompilerGeneratedAttribute]
public Nullable`1<long> get_InReplyToId();
    [CompilerGeneratedAttribute]
private void set_InReplyToId(Nullable`1<long> value);
    [CompilerGeneratedAttribute]
public Nullable`1<long> get_PullRequestReviewId();
    [CompilerGeneratedAttribute]
private void set_PullRequestReviewId(Nullable`1<long> value);
    [CompilerGeneratedAttribute]
public StringEnum`1<AuthorAssociation> get_AuthorAssociation();
    [CompilerGeneratedAttribute]
private void set_AuthorAssociation(StringEnum`1<AuthorAssociation> value);
    internal string get_DebuggerDisplay();
}
[DebuggerDisplayAttribute("{DebuggerDisplay,nq}")]
public class Octokit.PullRequestReviewCommentCreate : RequestParameters {
    [CompilerGeneratedAttribute]
private string <Body>k__BackingField;
    [CompilerGeneratedAttribute]
private string <CommitId>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Path>k__BackingField;
    [CompilerGeneratedAttribute]
private int <Position>k__BackingField;
    public string Body { get; private set; }
    public string CommitId { get; private set; }
    public string Path { get; private set; }
    public int Position { get; private set; }
    internal string DebuggerDisplay { get; }
    public PullRequestReviewCommentCreate(string body, string commitId, string path, int position);
    [CompilerGeneratedAttribute]
public string get_Body();
    [CompilerGeneratedAttribute]
private void set_Body(string value);
    [CompilerGeneratedAttribute]
public string get_CommitId();
    [CompilerGeneratedAttribute]
private void set_CommitId(string value);
    [CompilerGeneratedAttribute]
public string get_Path();
    [CompilerGeneratedAttribute]
private void set_Path(string value);
    [CompilerGeneratedAttribute]
public int get_Position();
    [CompilerGeneratedAttribute]
private void set_Position(int value);
    internal string get_DebuggerDisplay();
}
[DebuggerDisplayAttribute("{DebuggerDisplay,nq}")]
public class Octokit.PullRequestReviewCommentEdit : RequestParameters {
    [CompilerGeneratedAttribute]
private string <Body>k__BackingField;
    public string Body { get; private set; }
    internal string DebuggerDisplay { get; }
    public PullRequestReviewCommentEdit(string body);
    [CompilerGeneratedAttribute]
public string get_Body();
    [CompilerGeneratedAttribute]
private void set_Body(string value);
    internal string get_DebuggerDisplay();
}
public class Octokit.PullRequestReviewCommentReactionsClient : ApiClient {
    public PullRequestReviewCommentReactionsClient(IApiConnection apiConnection);
    [ManualRouteAttribute("GET", "/repos/{owner}/{repo}/pulls/comments/{comment_id}/reactions")]
public sealed virtual Task`1<IReadOnlyList`1<Reaction>> GetAll(string owner, string name, long commentId);
    [ManualRouteAttribute("GET", "/repos/{owner}/{repo}/pulls/comments/{comment_id}/reactions")]
public sealed virtual Task`1<IReadOnlyList`1<Reaction>> GetAll(string owner, string name, long commentId, ApiOptions options);
    [ManualRouteAttribute("GET", "/repositories/{id}/pulls/comments/{comment_id}/reactions")]
public sealed virtual Task`1<IReadOnlyList`1<Reaction>> GetAll(long repositoryId, long commentId);
    [ManualRouteAttribute("GET", "/repositories/{id}/pulls/comments/{comment_id}/reactions")]
public sealed virtual Task`1<IReadOnlyList`1<Reaction>> GetAll(long repositoryId, long commentId, ApiOptions options);
    [ManualRouteAttribute("POST", "/repos/{owner}/{repo}/pulls/comments/{comment_id}/reactions")]
public sealed virtual Task`1<Reaction> Create(string owner, string name, long commentId, NewReaction reaction);
    [ManualRouteAttribute("POST", "/repositories/{id}/pulls/comments/{comment_id}/reactions")]
public sealed virtual Task`1<Reaction> Create(long repositoryId, long commentId, NewReaction reaction);
    [ManualRouteAttribute("DELETE", "/repos/{owner}/{repo}/pulls/comments/{comment_id}/reactions/{reaction_id}")]
public sealed virtual Task Delete(string owner, string name, long commentId, long reactionId);
    [ManualRouteAttribute("DELETE", "/repositories/{id}/pulls/comments/{comment_id}/reactions/{reaction_id}")]
public sealed virtual Task Delete(long repositoryId, long commentId, long reactionId);
}
[DebuggerDisplayAttribute("{DebuggerDisplay,nq}")]
public class Octokit.PullRequestReviewCommentReplyCreate : RequestParameters {
    [CompilerGeneratedAttribute]
private string <Body>k__BackingField;
    [CompilerGeneratedAttribute]
private long <InReplyTo>k__BackingField;
    public string Body { get; private set; }
    public long InReplyTo { get; private set; }
    internal string DebuggerDisplay { get; }
    public PullRequestReviewCommentReplyCreate(string body, long inReplyTo);
    [CompilerGeneratedAttribute]
public string get_Body();
    [CompilerGeneratedAttribute]
private void set_Body(string value);
    [CompilerGeneratedAttribute]
public long get_InReplyTo();
    [CompilerGeneratedAttribute]
private void set_InReplyTo(long value);
    internal string get_DebuggerDisplay();
}
[DebuggerDisplayAttribute("{DebuggerDisplay,nq}")]
public class Octokit.PullRequestReviewCommentRequest : RequestParameters {
    [CompilerGeneratedAttribute]
private PullRequestReviewCommentSort <Sort>k__BackingField;
    [CompilerGeneratedAttribute]
private SortDirection <Direction>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<DateTimeOffset> <Since>k__BackingField;
    public PullRequestReviewCommentSort Sort { get; public set; }
    public SortDirection Direction { get; public set; }
    public Nullable`1<DateTimeOffset> Since { get; public set; }
    internal string DebuggerDisplay { get; }
    [CompilerGeneratedAttribute]
public PullRequestReviewCommentSort get_Sort();
    [CompilerGeneratedAttribute]
public void set_Sort(PullRequestReviewCommentSort value);
    [CompilerGeneratedAttribute]
public SortDirection get_Direction();
    [CompilerGeneratedAttribute]
public void set_Direction(SortDirection value);
    [CompilerGeneratedAttribute]
public Nullable`1<DateTimeOffset> get_Since();
    [CompilerGeneratedAttribute]
public void set_Since(Nullable`1<DateTimeOffset> value);
    internal string get_DebuggerDisplay();
}
public class Octokit.PullRequestReviewCommentsClient : ApiClient {
    public PullRequestReviewCommentsClient(IApiConnection apiConnection);
    [ManualRouteAttribute("GET", "/repos/{owner}/{repo}/pulls/{pull_number}/comments")]
public sealed virtual Task`1<IReadOnlyList`1<PullRequestReviewComment>> GetAll(string owner, string name, int pullRequestNumber);
    [ManualRouteAttribute("GET", "/repositories/{id}/pulls/{number}/comments")]
public sealed virtual Task`1<IReadOnlyList`1<PullRequestReviewComment>> GetAll(long repositoryId, int pullRequestNumber);
    [ManualRouteAttribute("GET", "/repos/{owner}/{repo}/pulls/{pull_number}/comments")]
public sealed virtual Task`1<IReadOnlyList`1<PullRequestReviewComment>> GetAll(string owner, string name, int pullRequestNumber, ApiOptions options);
    [ManualRouteAttribute("GET", "/repositories/{id}/pulls/{number}/comments")]
public sealed virtual Task`1<IReadOnlyList`1<PullRequestReviewComment>> GetAll(long repositoryId, int pullRequestNumber, ApiOptions options);
    [ManualRouteAttribute("GET", "/repos/{owner}/{repo}/pulls/comments")]
public sealed virtual Task`1<IReadOnlyList`1<PullRequestReviewComment>> GetAllForRepository(string owner, string name);
    [ManualRouteAttribute("GET", "/repositories/{id}/pulls/comments")]
public sealed virtual Task`1<IReadOnlyList`1<PullRequestReviewComment>> GetAllForRepository(long repositoryId);
    [ManualRouteAttribute("GET", "/repos/{owner}/{repo}/pulls/comments")]
public sealed virtual Task`1<IReadOnlyList`1<PullRequestReviewComment>> GetAllForRepository(string owner, string name, ApiOptions options);
    [ManualRouteAttribute("GET", "/repositories/{id}/pulls/comments")]
public sealed virtual Task`1<IReadOnlyList`1<PullRequestReviewComment>> GetAllForRepository(long repositoryId, ApiOptions options);
    [ManualRouteAttribute("GET", "/repos/{owner}/{repo}/pulls/comments")]
public sealed virtual Task`1<IReadOnlyList`1<PullRequestReviewComment>> GetAllForRepository(string owner, string name, PullRequestReviewCommentRequest request);
    [ManualRouteAttribute("GET", "/repositories/{id}/pulls/comments")]
public sealed virtual Task`1<IReadOnlyList`1<PullRequestReviewComment>> GetAllForRepository(long repositoryId, PullRequestReviewCommentRequest request);
    [ManualRouteAttribute("GET", "/repos/{owner}/{repo}/pulls/comments")]
public sealed virtual Task`1<IReadOnlyList`1<PullRequestReviewComment>> GetAllForRepository(string owner, string name, PullRequestReviewCommentRequest request, ApiOptions options);
    [ManualRouteAttribute("GET", "/repositories/{id}/pulls/comments")]
public sealed virtual Task`1<IReadOnlyList`1<PullRequestReviewComment>> GetAllForRepository(long repositoryId, PullRequestReviewCommentRequest request, ApiOptions options);
    [ManualRouteAttribute("GET", "/repos/{owner}/{repo}/pulls/comments/{comment_id}")]
public sealed virtual Task`1<PullRequestReviewComment> GetComment(string owner, string name, long commentId);
    [ManualRouteAttribute("GET", "/repositories/{id}/pulls/comments/{number}")]
public sealed virtual Task`1<PullRequestReviewComment> GetComment(long repositoryId, long commentId);
    [AsyncStateMachineAttribute("Octokit.PullRequestReviewCommentsClient/<Create>d__15")]
[ManualRouteAttribute("POST", "/repos/{owner}/{repo}/pulls/{pull_number}/comments")]
public sealed virtual Task`1<PullRequestReviewComment> Create(string owner, string name, int pullRequestNumber, PullRequestReviewCommentCreate comment);
    [AsyncStateMachineAttribute("Octokit.PullRequestReviewCommentsClient/<Create>d__16")]
[ManualRouteAttribute("POST", "/repositories/{id}/pulls/{number}/comments")]
public sealed virtual Task`1<PullRequestReviewComment> Create(long repositoryId, int pullRequestNumber, PullRequestReviewCommentCreate comment);
    [AsyncStateMachineAttribute("Octokit.PullRequestReviewCommentsClient/<CreateReply>d__17")]
[ManualRouteAttribute("POST", "/repos/{owner}/{repo}/pulls/{pull_number}/comment")]
public sealed virtual Task`1<PullRequestReviewComment> CreateReply(string owner, string name, int pullRequestNumber, PullRequestReviewCommentReplyCreate comment);
    [AsyncStateMachineAttribute("Octokit.PullRequestReviewCommentsClient/<CreateReply>d__18")]
[ManualRouteAttribute("POST", "/repositories/{id}/pulls/{number}/comments")]
public sealed virtual Task`1<PullRequestReviewComment> CreateReply(long repositoryId, int pullRequestNumber, PullRequestReviewCommentReplyCreate comment);
    [ManualRouteAttribute("PATCH", "/repos/{owner}/{repo}/pulls/comments/{comment_id}")]
public sealed virtual Task`1<PullRequestReviewComment> Edit(string owner, string name, long commentId, PullRequestReviewCommentEdit comment);
    [ManualRouteAttribute("PATCH", "/repositories/{id}/pulls/comments/{number}")]
public sealed virtual Task`1<PullRequestReviewComment> Edit(long repositoryId, long commentId, PullRequestReviewCommentEdit comment);
    [ManualRouteAttribute("DELETE", "/repos/{owner}/{repo}/pulls/comments/{comment_id}")]
public sealed virtual Task Delete(string owner, string name, long commentId);
    [ManualRouteAttribute("DELETE", "/repositories/{id}/pulls/comments/{number}")]
public sealed virtual Task Delete(long repositoryId, long commentId);
}
public enum Octokit.PullRequestReviewCommentSort : Enum {
    public int value__;
    [ParameterAttribute]
public static PullRequestReviewCommentSort Created;
    [ParameterAttribute]
public static PullRequestReviewCommentSort Updated;
}
[DebuggerDisplayAttribute("{DebuggerDisplay,nq}")]
public class Octokit.PullRequestReviewCreate : RequestParameters {
    [CompilerGeneratedAttribute]
private string <CommitId>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Body>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<PullRequestReviewEvent> <Event>k__BackingField;
    [CompilerGeneratedAttribute]
private List`1<DraftPullRequestReviewComment> <Comments>k__BackingField;
    public string CommitId { get; public set; }
    public string Body { get; public set; }
    public Nullable`1<PullRequestReviewEvent> Event { get; public set; }
    public List`1<DraftPullRequestReviewComment> Comments { get; public set; }
    internal string DebuggerDisplay { get; }
    [CompilerGeneratedAttribute]
public string get_CommitId();
    [CompilerGeneratedAttribute]
public void set_CommitId(string value);
    [CompilerGeneratedAttribute]
public string get_Body();
    [CompilerGeneratedAttribute]
public void set_Body(string value);
    [CompilerGeneratedAttribute]
public Nullable`1<PullRequestReviewEvent> get_Event();
    [CompilerGeneratedAttribute]
public void set_Event(Nullable`1<PullRequestReviewEvent> value);
    [CompilerGeneratedAttribute]
public List`1<DraftPullRequestReviewComment> get_Comments();
    [CompilerGeneratedAttribute]
public void set_Comments(List`1<DraftPullRequestReviewComment> value);
    internal string get_DebuggerDisplay();
}
[DebuggerDisplayAttribute("{DebuggerDisplay,nq}")]
public class Octokit.PullRequestReviewDismiss : RequestParameters {
    [CompilerGeneratedAttribute]
private string <Message>k__BackingField;
    public string Message { get; public set; }
    internal string DebuggerDisplay { get; }
    [CompilerGeneratedAttribute]
public string get_Message();
    [CompilerGeneratedAttribute]
public void set_Message(string value);
    internal string get_DebuggerDisplay();
}
public enum Octokit.PullRequestReviewEvent : Enum {
    public int value__;
    [ParameterAttribute]
public static PullRequestReviewEvent Approve;
    [ParameterAttribute]
public static PullRequestReviewEvent RequestChanges;
    [ParameterAttribute]
public static PullRequestReviewEvent Comment;
}
[DebuggerDisplayAttribute("{DebuggerDisplay,nq}")]
public class Octokit.PullRequestReviewEventPayload : ActivityPayload {
    [CompilerGeneratedAttribute]
private string <Action>k__BackingField;
    [CompilerGeneratedAttribute]
private PullRequest <PullRequest>k__BackingField;
    [CompilerGeneratedAttribute]
private PullRequestReview <Review>k__BackingField;
    public string Action { get; private set; }
    public PullRequest PullRequest { get; private set; }
    public PullRequestReview Review { get; private set; }
    [CompilerGeneratedAttribute]
public string get_Action();
    [CompilerGeneratedAttribute]
private void set_Action(string value);
    [CompilerGeneratedAttribute]
public PullRequest get_PullRequest();
    [CompilerGeneratedAttribute]
private void set_PullRequest(PullRequest value);
    [CompilerGeneratedAttribute]
public PullRequestReview get_Review();
    [CompilerGeneratedAttribute]
private void set_Review(PullRequestReview value);
}
[DebuggerDisplayAttribute("{DebuggerDisplay,nq}")]
public class Octokit.PullRequestReviewRequest : object {
    [CompilerGeneratedAttribute]
private IReadOnlyList`1<string> <Reviewers>k__BackingField;
    [CompilerGeneratedAttribute]
private IReadOnlyList`1<string> <TeamReviewers>k__BackingField;
    public IReadOnlyList`1<string> Reviewers { get; private set; }
    public IReadOnlyList`1<string> TeamReviewers { get; private set; }
    internal string DebuggerDisplay { get; }
    public PullRequestReviewRequest(IReadOnlyList`1<string> reviewers, IReadOnlyList`1<string> teamReviewers);
    [CompilerGeneratedAttribute]
public IReadOnlyList`1<string> get_Reviewers();
    [CompilerGeneratedAttribute]
private void set_Reviewers(IReadOnlyList`1<string> value);
    [CompilerGeneratedAttribute]
public IReadOnlyList`1<string> get_TeamReviewers();
    [CompilerGeneratedAttribute]
private void set_TeamReviewers(IReadOnlyList`1<string> value);
    internal string get_DebuggerDisplay();
    public static PullRequestReviewRequest ForReviewers(IReadOnlyList`1<string> reviewers);
    public static PullRequestReviewRequest ForTeamReviewers(IReadOnlyList`1<string> teamReviewers);
}
public class Octokit.PullRequestReviewRequestsClient : ApiClient {
    public PullRequestReviewRequestsClient(IApiConnection apiConnection);
    [ManualRouteAttribute("GET", "/repos/{owner}/{repo}/pulls/{pull_number}/requested_reviewers")]
public sealed virtual Task`1<RequestedReviews> Get(string owner, string name, int pullRequestNumber);
    [ManualRouteAttribute("GET", "/repositories/{id}/pulls/{number}/requested_reviewers")]
public sealed virtual Task`1<RequestedReviews> Get(long repositoryId, int pullRequestNumber);
    [ManualRouteAttribute("POST", "/repos/{owner}/{repo}/pulls/{pull_number}/requested_reviewers")]
public sealed virtual Task`1<PullRequest> Create(string owner, string name, int pullRequestNumber, PullRequestReviewRequest users);
    [ManualRouteAttribute("POST", "/repositories/{id}/pulls/{number}/requested_reviewers")]
public sealed virtual Task`1<PullRequest> Create(long repositoryId, int pullRequestNumber, PullRequestReviewRequest users);
    [ManualRouteAttribute("DELETE", "/repos/{owner}/{repo}/pulls/{pull_number}/requested_reviewers")]
public sealed virtual Task Delete(string owner, string name, int pullRequestNumber, PullRequestReviewRequest users);
    [ManualRouteAttribute("DELETE", "/repositories/{id}/pulls/{number}/requested_reviewers")]
public sealed virtual Task Delete(long repositoryId, int pullRequestNumber, PullRequestReviewRequest users);
}
public class Octokit.PullRequestReviewsClient : ApiClient {
    public PullRequestReviewsClient(IApiConnection apiConnection);
    [ManualRouteAttribute("GET", "/repos/{owner}/{repo}/pulls/{pull_number}/reviews")]
public sealed virtual Task`1<IReadOnlyList`1<PullRequestReview>> GetAll(string owner, string name, int pullRequestNumber);
    [ManualRouteAttribute("GET", "/repositories/{id}/pulls/{number}/reviews")]
public sealed virtual Task`1<IReadOnlyList`1<PullRequestReview>> GetAll(long repositoryId, int pullRequestNumber);
    [ManualRouteAttribute("GET", "/repos/{owner}/{repo}/pulls/{pull_number}/reviews")]
public sealed virtual Task`1<IReadOnlyList`1<PullRequestReview>> GetAll(string owner, string name, int pullRequestNumber, ApiOptions options);
    [ManualRouteAttribute("GET", "/repositories/{id}/pulls/{number}/reviews")]
public sealed virtual Task`1<IReadOnlyList`1<PullRequestReview>> GetAll(long repositoryId, int pullRequestNumber, ApiOptions options);
    [ManualRouteAttribute("GET", "/repos/{owner}/{repo}/pulls/{pull_number}/reviews/{review_id}")]
public sealed virtual Task`1<PullRequestReview> Get(string owner, string name, int pullRequestNumber, long reviewId);
    [ManualRouteAttribute("GET", "/repositories/{id}/pulls/{number}/reviews/{review_id}")]
public sealed virtual Task`1<PullRequestReview> Get(long repositoryId, int pullRequestNumber, long reviewId);
    [ManualRouteAttribute("POST", "/repos/{owner}/{repo}/pulls/{pull_number}/reviews")]
public sealed virtual Task`1<PullRequestReview> Create(string owner, string name, int pullRequestNumber, PullRequestReviewCreate review);
    [ManualRouteAttribute("POST", "/repositories/{id}/pulls/{number}/reviews")]
public sealed virtual Task`1<PullRequestReview> Create(long repositoryId, int pullRequestNumber, PullRequestReviewCreate review);
    [ManualRouteAttribute("DELETE", "/repos/{owner}/{repo}/pulls/{pull_number}/reviews/{review_id}")]
public sealed virtual Task Delete(string owner, string name, int pullRequestNumber, long reviewId);
    [ManualRouteAttribute("DELETE", "/repositories/{id}/pulls/{number}/reviews/{review_id}")]
public sealed virtual Task Delete(long repositoryId, int pullRequestNumber, long reviewId);
    [ManualRouteAttribute("PUT", "/repos/{owner}/{repo}/pulls/{pull_number}/reviews/{review_id}/dismissals")]
public sealed virtual Task`1<PullRequestReview> Dismiss(string owner, string name, int pullRequestNumber, long reviewId, PullRequestReviewDismiss dismissMessage);
    [ManualRouteAttribute("PUT", "/repositories/{id}/pulls/{number}/reviews/{review_id}/dismissals")]
public sealed virtual Task`1<PullRequestReview> Dismiss(long repositoryId, int pullRequestNumber, long reviewId, PullRequestReviewDismiss dismissMessage);
    [ManualRouteAttribute("POST", "/repos/{owner}/{repo}/pulls/{pull_number}/reviews/{review_id}/events")]
public sealed virtual Task`1<PullRequestReview> Submit(string owner, string name, int pullRequestNumber, long reviewId, PullRequestReviewSubmit submitMessage);
    [ManualRouteAttribute("POST", "/repositories/{id}/pulls/{number}/reviews/{review_id}/events")]
public sealed virtual Task`1<PullRequestReview> Submit(long repositoryId, int pullRequestNumber, long reviewId, PullRequestReviewSubmit submitMessage);
    [ManualRouteAttribute("GET", "/repos/{owner}/{repo}/pulls/{pull_number}/reviews/{review_id}/comments")]
public sealed virtual Task`1<IReadOnlyList`1<PullRequestReviewComment>> GetAllComments(string owner, string name, int pullRequestNumber, long reviewId);
    [ManualRouteAttribute("POST", "/repositories/{id}/pulls/{number}/reviews/{review_id}/comments")]
public sealed virtual Task`1<IReadOnlyList`1<PullRequestReviewComment>> GetAllComments(long repositoryId, int pullRequestNumber, long reviewId);
    [ManualRouteAttribute("GET", "/repos/{owner}/{repo}/pulls/{pull_number}/reviews/{review_id}/comments")]
public sealed virtual Task`1<IReadOnlyList`1<PullRequestReviewComment>> GetAllComments(string owner, string name, int pullRequestNumber, long reviewId, ApiOptions options);
    [ManualRouteAttribute("POST", "/repositories/{id}/pulls/{number}/reviews/{review_id}/comments")]
public sealed virtual Task`1<IReadOnlyList`1<PullRequestReviewComment>> GetAllComments(long repositoryId, int pullRequestNumber, long reviewId, ApiOptions options);
}
public enum Octokit.PullRequestReviewState : Enum {
    public int value__;
    [ParameterAttribute]
public static PullRequestReviewState Approved;
    [ParameterAttribute]
public static PullRequestReviewState ChangesRequested;
    [ParameterAttribute]
public static PullRequestReviewState Commented;
    [ParameterAttribute]
public static PullRequestReviewState Dismissed;
    [ParameterAttribute]
public static PullRequestReviewState Pending;
}
[DebuggerDisplayAttribute("{DebuggerDisplay,nq}")]
public class Octokit.PullRequestReviewSubmit : RequestParameters {
    [CompilerGeneratedAttribute]
private string <Body>k__BackingField;
    [CompilerGeneratedAttribute]
private PullRequestReviewEvent <Event>k__BackingField;
    public string Body { get; public set; }
    public PullRequestReviewEvent Event { get; public set; }
    internal string DebuggerDisplay { get; }
    [CompilerGeneratedAttribute]
public string get_Body();
    [CompilerGeneratedAttribute]
public void set_Body(string value);
    [CompilerGeneratedAttribute]
public PullRequestReviewEvent get_Event();
    [CompilerGeneratedAttribute]
public void set_Event(PullRequestReviewEvent value);
    internal string get_DebuggerDisplay();
}
public class Octokit.PullRequestsClient : ApiClient {
    [CompilerGeneratedAttribute]
private IPullRequestReviewsClient <Review>k__BackingField;
    [CompilerGeneratedAttribute]
private IPullRequestReviewCommentsClient <ReviewComment>k__BackingField;
    [CompilerGeneratedAttribute]
private IPullRequestReviewRequestsClient <ReviewRequest>k__BackingField;
    [CompilerGeneratedAttribute]
private ILockUnlockClient <LockUnlock>k__BackingField;
    public IPullRequestReviewsClient Review { get; public set; }
    public IPullRequestReviewCommentsClient ReviewComment { get; public set; }
    public IPullRequestReviewRequestsClient ReviewRequest { get; public set; }
    public ILockUnlockClient LockUnlock { get; public set; }
    public PullRequestsClient(IApiConnection apiConnection);
    [CompilerGeneratedAttribute]
public sealed virtual IPullRequestReviewsClient get_Review();
    [CompilerGeneratedAttribute]
public void set_Review(IPullRequestReviewsClient value);
    [CompilerGeneratedAttribute]
public sealed virtual IPullRequestReviewCommentsClient get_ReviewComment();
    [CompilerGeneratedAttribute]
public void set_ReviewComment(IPullRequestReviewCommentsClient value);
    [CompilerGeneratedAttribute]
public sealed virtual IPullRequestReviewRequestsClient get_ReviewRequest();
    [CompilerGeneratedAttribute]
public void set_ReviewRequest(IPullRequestReviewRequestsClient value);
    [CompilerGeneratedAttribute]
public sealed virtual ILockUnlockClient get_LockUnlock();
    [CompilerGeneratedAttribute]
public void set_LockUnlock(ILockUnlockClient value);
    [ManualRouteAttribute("GET", "/repos/{owner}/{repo}/pulls/{pull_number}")]
public sealed virtual Task`1<PullRequest> Get(string owner, string name, int pullRequestNumber);
    [ManualRouteAttribute("GET", "/repositories/{id}/pulls/{number}")]
public sealed virtual Task`1<PullRequest> Get(long repositoryId, int pullRequestNumber);
    [ManualRouteAttribute("GET", "/repos/{owner}/{repo}/pulls")]
public sealed virtual Task`1<IReadOnlyList`1<PullRequest>> GetAllForRepository(string owner, string name);
    [ManualRouteAttribute("GET", "/repositories/{id}/pulls")]
public sealed virtual Task`1<IReadOnlyList`1<PullRequest>> GetAllForRepository(long repositoryId);
    [ManualRouteAttribute("GET", "/repos/{owner}/{repo}/pulls")]
public sealed virtual Task`1<IReadOnlyList`1<PullRequest>> GetAllForRepository(string owner, string name, ApiOptions options);
    [ManualRouteAttribute("GET", "/repositories/{id}/pulls")]
public sealed virtual Task`1<IReadOnlyList`1<PullRequest>> GetAllForRepository(long repositoryId, ApiOptions options);
    [ManualRouteAttribute("GET", "/repos/{owner}/{repo}/pulls")]
public sealed virtual Task`1<IReadOnlyList`1<PullRequest>> GetAllForRepository(string owner, string name, PullRequestRequest request);
    [ManualRouteAttribute("GET", "/repositories/{id}/pulls")]
public sealed virtual Task`1<IReadOnlyList`1<PullRequest>> GetAllForRepository(long repositoryId, PullRequestRequest request);
    [ManualRouteAttribute("GET", "/repos/{owner}/{repo}/pulls")]
public sealed virtual Task`1<IReadOnlyList`1<PullRequest>> GetAllForRepository(string owner, string name, PullRequestRequest request, ApiOptions options);
    [ManualRouteAttribute("GET", "/repositories/{id}/pulls")]
public sealed virtual Task`1<IReadOnlyList`1<PullRequest>> GetAllForRepository(long repositoryId, PullRequestRequest request, ApiOptions options);
    [ManualRouteAttribute("POST", "/repos/{owner}/{repo}/pulls")]
public sealed virtual Task`1<PullRequest> Create(string owner, string name, NewPullRequest newPullRequest);
    [ManualRouteAttribute("POST", "/repositories/{id}/pulls")]
public sealed virtual Task`1<PullRequest> Create(long repositoryId, NewPullRequest newPullRequest);
    [ManualRouteAttribute("PATCH", "/repos/{owner}/{repo}/pulls/{pull_number}")]
public sealed virtual Task`1<PullRequest> Update(string owner, string name, int pullRequestNumber, PullRequestUpdate pullRequestUpdate);
    [ManualRouteAttribute("PATCH", "/repositories/{id}/pulls/{number}")]
public sealed virtual Task`1<PullRequest> Update(long repositoryId, int pullRequestNumber, PullRequestUpdate pullRequestUpdate);
    [AsyncStateMachineAttribute("Octokit.PullRequestsClient/<Merge>d__31")]
[ManualRouteAttribute("PUT", "/repos/{owner}/{repo}/pulls/{pull_number}/merge")]
public sealed virtual Task`1<PullRequestMerge> Merge(string owner, string name, int pullRequestNumber, MergePullRequest mergePullRequest);
    [AsyncStateMachineAttribute("Octokit.PullRequestsClient/<Merge>d__32")]
[ManualRouteAttribute("PUT", "/repositories/{id}/pulls/{number}/merge")]
public sealed virtual Task`1<PullRequestMerge> Merge(long repositoryId, int pullRequestNumber, MergePullRequest mergePullRequest);
    [AsyncStateMachineAttribute("Octokit.PullRequestsClient/<Merged>d__33")]
[ManualRouteAttribute("GET", "/repos/{owner}/{repo}/pulls/{pull_number}/merge")]
public sealed virtual Task`1<bool> Merged(string owner, string name, int pullRequestNumber);
    [AsyncStateMachineAttribute("Octokit.PullRequestsClient/<Merged>d__34")]
[ManualRouteAttribute("GET", "/repositories/{id}/pulls/{number}/merge")]
public sealed virtual Task`1<bool> Merged(long repositoryId, int pullRequestNumber);
    [ManualRouteAttribute("GET", "/repos/{owner}/{repo}/pulls/{pull_number}/commits")]
public sealed virtual Task`1<IReadOnlyList`1<PullRequestCommit>> Commits(string owner, string name, int pullRequestNumber);
    [ManualRouteAttribute("GET", "/repositories/{id}/pulls/{number}/commits")]
public sealed virtual Task`1<IReadOnlyList`1<PullRequestCommit>> Commits(long repositoryId, int pullRequestNumber);
    [ManualRouteAttribute("GET", "/repos/{owner}/{repo}/pulls/{pull_number}/files")]
public sealed virtual Task`1<IReadOnlyList`1<PullRequestFile>> Files(string owner, string name, int pullRequestNumber);
    [ManualRouteAttribute("GET", "/repos/{owner}/{repo}/pulls/{pull_number}/files")]
public sealed virtual Task`1<IReadOnlyList`1<PullRequestFile>> Files(string owner, string name, int pullRequestNumber, ApiOptions options);
    [ManualRouteAttribute("GET", "/repositories/{id}/pulls/{number}/files")]
public sealed virtual Task`1<IReadOnlyList`1<PullRequestFile>> Files(long repositoryId, int pullRequestNumber);
    [ManualRouteAttribute("GET", "/repositories/{id}/pulls/{number}/files")]
public sealed virtual Task`1<IReadOnlyList`1<PullRequestFile>> Files(long repositoryId, int pullRequestNumber, ApiOptions options);
}
public enum Octokit.PullRequestSort : Enum {
    public int value__;
    [ParameterAttribute]
public static PullRequestSort Created;
    [ParameterAttribute]
public static PullRequestSort Updated;
    [ParameterAttribute]
public static PullRequestSort Popularity;
    [ParameterAttribute]
public static PullRequestSort LongRunning;
}
[DebuggerDisplayAttribute("{DebuggerDisplay,nq}")]
public class Octokit.PullRequestUpdate : object {
    [CompilerGeneratedAttribute]
private string <Title>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<ItemState> <State>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Body>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Base>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<bool> <MaintainerCanModify>k__BackingField;
    public string Title { get; public set; }
    public Nullable`1<ItemState> State { get; public set; }
    public string Body { get; public set; }
    public string Base { get; public set; }
    public Nullable`1<bool> MaintainerCanModify { get; public set; }
    internal string DebuggerDisplay { get; }
    [CompilerGeneratedAttribute]
public string get_Title();
    [CompilerGeneratedAttribute]
public void set_Title(string value);
    [CompilerGeneratedAttribute]
public Nullable`1<ItemState> get_State();
    [CompilerGeneratedAttribute]
public void set_State(Nullable`1<ItemState> value);
    [CompilerGeneratedAttribute]
public string get_Body();
    [CompilerGeneratedAttribute]
public void set_Body(string value);
    [CompilerGeneratedAttribute]
public string get_Base();
    [CompilerGeneratedAttribute]
public void set_Base(string value);
    [CompilerGeneratedAttribute]
public Nullable`1<bool> get_MaintainerCanModify();
    [CompilerGeneratedAttribute]
public void set_MaintainerCanModify(Nullable`1<bool> value);
    internal string get_DebuggerDisplay();
}
[DebuggerDisplayAttribute("{DebuggerDisplay,nq}")]
public class Octokit.PunchCard : object {
    [CompilerGeneratedAttribute]
private IReadOnlyList`1<PunchCardPoint> <PunchPoints>k__BackingField;
    public IReadOnlyList`1<PunchCardPoint> PunchPoints { get; private set; }
    internal string DebuggerDisplay { get; }
    public PunchCard(IEnumerable`1<IList`1<int>> punchCardData);
    public PunchCard(IEnumerable`1<PunchCardPoint> punchPoints);
    [CompilerGeneratedAttribute]
public IReadOnlyList`1<PunchCardPoint> get_PunchPoints();
    [CompilerGeneratedAttribute]
private void set_PunchPoints(IReadOnlyList`1<PunchCardPoint> value);
    public int GetCommitCountFor(DayOfWeek dayOfWeek, int hourOfDay);
    internal string get_DebuggerDisplay();
}
[DebuggerDisplayAttribute("{DebuggerDisplay,nq}")]
public class Octokit.PunchCardPoint : object {
    [CompilerGeneratedAttribute]
private StringEnum`1<DayOfWeek> <DayOfWeek>k__BackingField;
    [CompilerGeneratedAttribute]
private int <HourOfTheDay>k__BackingField;
    [CompilerGeneratedAttribute]
private int <CommitCount>k__BackingField;
    public StringEnum`1<DayOfWeek> DayOfWeek { get; private set; }
    public int HourOfTheDay { get; private set; }
    public int CommitCount { get; private set; }
    internal string DebuggerDisplay { get; }
    public PunchCardPoint(IList`1<int> punchPoint);
    public PunchCardPoint(DayOfWeek dayOfWeek, int hourOfTheDay, int commitCount);
    [CompilerGeneratedAttribute]
public StringEnum`1<DayOfWeek> get_DayOfWeek();
    [CompilerGeneratedAttribute]
private void set_DayOfWeek(StringEnum`1<DayOfWeek> value);
    [CompilerGeneratedAttribute]
public int get_HourOfTheDay();
    [CompilerGeneratedAttribute]
private void set_HourOfTheDay(int value);
    [CompilerGeneratedAttribute]
public int get_CommitCount();
    [CompilerGeneratedAttribute]
private void set_CommitCount(int value);
    internal string get_DebuggerDisplay();
}
[DebuggerDisplayAttribute("{DebuggerDisplay,nq}")]
public class Octokit.PushEventPayload : ActivityPayload {
    [CompilerGeneratedAttribute]
private long <PushId>k__BackingField;
    [CompilerGeneratedAttribute]
private int <DistinctSize>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Before>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Head>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Ref>k__BackingField;
    [CompilerGeneratedAttribute]
private int <Size>k__BackingField;
    [CompilerGeneratedAttribute]
private IReadOnlyList`1<Commit> <Commits>k__BackingField;
    public long PushId { get; private set; }
    public int DistinctSize { get; private set; }
    public string Before { get; private set; }
    public string Head { get; private set; }
    public string Ref { get; private set; }
    public int Size { get; private set; }
    public IReadOnlyList`1<Commit> Commits { get; private set; }
    [CompilerGeneratedAttribute]
public long get_PushId();
    [CompilerGeneratedAttribute]
private void set_PushId(long value);
    [CompilerGeneratedAttribute]
public int get_DistinctSize();
    [CompilerGeneratedAttribute]
private void set_DistinctSize(int value);
    [CompilerGeneratedAttribute]
public string get_Before();
    [CompilerGeneratedAttribute]
private void set_Before(string value);
    [CompilerGeneratedAttribute]
public string get_Head();
    [CompilerGeneratedAttribute]
private void set_Head(string value);
    [CompilerGeneratedAttribute]
public string get_Ref();
    [CompilerGeneratedAttribute]
private void set_Ref(string value);
    [CompilerGeneratedAttribute]
public int get_Size();
    [CompilerGeneratedAttribute]
private void set_Size(int value);
    [CompilerGeneratedAttribute]
public IReadOnlyList`1<Commit> get_Commits();
    [CompilerGeneratedAttribute]
private void set_Commits(IReadOnlyList`1<Commit> value);
}
[DebuggerDisplayAttribute("{DebuggerDisplay,nq}")]
public class Octokit.PushWebhookCommit : object {
    [CompilerGeneratedAttribute]
private string <Id>k__BackingField;
    [CompilerGeneratedAttribute]
private string <TreeId>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <Distinct>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Message>k__BackingField;
    [CompilerGeneratedAttribute]
private DateTimeOffset <Timestamp>k__BackingField;
    [CompilerGeneratedAttribute]
private Uri <Url>k__BackingField;
    [CompilerGeneratedAttribute]
private Committer <Author>k__BackingField;
    [CompilerGeneratedAttribute]
private Committer <Committer>k__BackingField;
    [CompilerGeneratedAttribute]
private IReadOnlyList`1<string> <Added>k__BackingField;
    [CompilerGeneratedAttribute]
private IReadOnlyList`1<string> <Removed>k__BackingField;
    [CompilerGeneratedAttribute]
private IReadOnlyList`1<string> <Modified>k__BackingField;
    public string Id { get; private set; }
    public string TreeId { get; private set; }
    public bool Distinct { get; private set; }
    public string Message { get; private set; }
    public DateTimeOffset Timestamp { get; private set; }
    public Uri Url { get; private set; }
    public Committer Author { get; private set; }
    public Committer Committer { get; private set; }
    public IReadOnlyList`1<string> Added { get; private set; }
    public IReadOnlyList`1<string> Removed { get; private set; }
    public IReadOnlyList`1<string> Modified { get; private set; }
    internal string DebuggerDisplay { get; }
    [CompilerGeneratedAttribute]
public string get_Id();
    [CompilerGeneratedAttribute]
private void set_Id(string value);
    [CompilerGeneratedAttribute]
public string get_TreeId();
    [CompilerGeneratedAttribute]
private void set_TreeId(string value);
    [CompilerGeneratedAttribute]
public bool get_Distinct();
    [CompilerGeneratedAttribute]
private void set_Distinct(bool value);
    [CompilerGeneratedAttribute]
public string get_Message();
    [CompilerGeneratedAttribute]
private void set_Message(string value);
    [CompilerGeneratedAttribute]
public DateTimeOffset get_Timestamp();
    [CompilerGeneratedAttribute]
private void set_Timestamp(DateTimeOffset value);
    [CompilerGeneratedAttribute]
public Uri get_Url();
    [CompilerGeneratedAttribute]
private void set_Url(Uri value);
    [CompilerGeneratedAttribute]
public Committer get_Author();
    [CompilerGeneratedAttribute]
private void set_Author(Committer value);
    [CompilerGeneratedAttribute]
public Committer get_Committer();
    [CompilerGeneratedAttribute]
private void set_Committer(Committer value);
    [CompilerGeneratedAttribute]
public IReadOnlyList`1<string> get_Added();
    [CompilerGeneratedAttribute]
private void set_Added(IReadOnlyList`1<string> value);
    [CompilerGeneratedAttribute]
public IReadOnlyList`1<string> get_Removed();
    [CompilerGeneratedAttribute]
private void set_Removed(IReadOnlyList`1<string> value);
    [CompilerGeneratedAttribute]
public IReadOnlyList`1<string> get_Modified();
    [CompilerGeneratedAttribute]
private void set_Modified(IReadOnlyList`1<string> value);
    internal string get_DebuggerDisplay();
}
[DebuggerDisplayAttribute("{DebuggerDisplay,nq}")]
public class Octokit.PushWebhookCommitter : object {
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Email>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Username>k__BackingField;
    public string Name { get; private set; }
    public string Email { get; private set; }
    public string Username { get; private set; }
    internal string DebuggerDisplay { get; }
    public PushWebhookCommitter(string name, string email, string username);
    [CompilerGeneratedAttribute]
public string get_Name();
    [CompilerGeneratedAttribute]
private void set_Name(string value);
    [CompilerGeneratedAttribute]
public string get_Email();
    [CompilerGeneratedAttribute]
private void set_Email(string value);
    [CompilerGeneratedAttribute]
public string get_Username();
    [CompilerGeneratedAttribute]
private void set_Username(string value);
    internal string get_DebuggerDisplay();
}
[DebuggerDisplayAttribute("{DebuggerDisplay,nq}")]
public class Octokit.PushWebhookPayload : ActivityPayload {
    [CompilerGeneratedAttribute]
private string <Head>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Before>k__BackingField;
    [CompilerGeneratedAttribute]
private string <After>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Ref>k__BackingField;
    [CompilerGeneratedAttribute]
private string <BaseRef>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <Created>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <Deleted>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <Forced>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Compare>k__BackingField;
    [CompilerGeneratedAttribute]
private int <Size>k__BackingField;
    [CompilerGeneratedAttribute]
private IReadOnlyList`1<PushWebhookCommit> <Commits>k__BackingField;
    [CompilerGeneratedAttribute]
private PushWebhookCommit <HeadCommit>k__BackingField;
    public string Head { get; private set; }
    public string Before { get; private set; }
    public string After { get; private set; }
    public string Ref { get; private set; }
    public string BaseRef { get; private set; }
    public bool Created { get; private set; }
    public bool Deleted { get; private set; }
    public bool Forced { get; private set; }
    public string Compare { get; private set; }
    public int Size { get; private set; }
    public IReadOnlyList`1<PushWebhookCommit> Commits { get; private set; }
    public PushWebhookCommit HeadCommit { get; private set; }
    [CompilerGeneratedAttribute]
public string get_Head();
    [CompilerGeneratedAttribute]
private void set_Head(string value);
    [CompilerGeneratedAttribute]
public string get_Before();
    [CompilerGeneratedAttribute]
private void set_Before(string value);
    [CompilerGeneratedAttribute]
public string get_After();
    [CompilerGeneratedAttribute]
private void set_After(string value);
    [CompilerGeneratedAttribute]
public string get_Ref();
    [CompilerGeneratedAttribute]
private void set_Ref(string value);
    [CompilerGeneratedAttribute]
public string get_BaseRef();
    [CompilerGeneratedAttribute]
private void set_BaseRef(string value);
    [CompilerGeneratedAttribute]
public bool get_Created();
    [CompilerGeneratedAttribute]
private void set_Created(bool value);
    [CompilerGeneratedAttribute]
public bool get_Deleted();
    [CompilerGeneratedAttribute]
private void set_Deleted(bool value);
    [CompilerGeneratedAttribute]
public bool get_Forced();
    [CompilerGeneratedAttribute]
private void set_Forced(bool value);
    [CompilerGeneratedAttribute]
public string get_Compare();
    [CompilerGeneratedAttribute]
private void set_Compare(string value);
    [CompilerGeneratedAttribute]
public int get_Size();
    [CompilerGeneratedAttribute]
private void set_Size(int value);
    [CompilerGeneratedAttribute]
public IReadOnlyList`1<PushWebhookCommit> get_Commits();
    [CompilerGeneratedAttribute]
private void set_Commits(IReadOnlyList`1<PushWebhookCommit> value);
    [CompilerGeneratedAttribute]
public PushWebhookCommit get_HeadCommit();
    [CompilerGeneratedAttribute]
private void set_HeadCommit(PushWebhookCommit value);
}
[DebuggerDisplayAttribute("{DebuggerDisplay,nq}")]
public class Octokit.Range : object {
    private string query;
    internal string DebuggerDisplay { get; }
    public Range(int size);
    public Range(int minSize, int maxSize);
    public Range(int size, SearchQualifierOperator op);
    internal string get_DebuggerDisplay();
    public static Range LessThan(int size);
    public static Range LessThanOrEquals(int size);
    public static Range GreaterThan(int size);
    public static Range GreaterThanOrEquals(int size);
    public virtual string ToString();
}
[DebuggerDisplayAttribute("{DebuggerDisplay,nq}")]
public class Octokit.RateLimit : object {
    [CompilerGeneratedAttribute]
private int <Limit>k__BackingField;
    [CompilerGeneratedAttribute]
private int <Remaining>k__BackingField;
    [CompilerGeneratedAttribute]
private long <ResetAsUtcEpochSeconds>k__BackingField;
    public int Limit { get; private set; }
    public int Remaining { get; private set; }
    [ParameterAttribute]
public DateTimeOffset Reset { get; }
    [ParameterAttribute]
public long ResetAsUtcEpochSeconds { get; private set; }
    internal string DebuggerDisplay { get; }
    public RateLimit(IDictionary`2<string, string> responseHeaders);
    public RateLimit(int limit, int remaining, long resetAsUtcEpochSeconds);
    protected RateLimit(SerializationInfo info, StreamingContext context);
    [CompilerGeneratedAttribute]
public int get_Limit();
    [CompilerGeneratedAttribute]
private void set_Limit(int value);
    [CompilerGeneratedAttribute]
public int get_Remaining();
    [CompilerGeneratedAttribute]
private void set_Remaining(int value);
    public DateTimeOffset get_Reset();
    [CompilerGeneratedAttribute]
public long get_ResetAsUtcEpochSeconds();
    [CompilerGeneratedAttribute]
private void set_ResetAsUtcEpochSeconds(long value);
    private static KeyValuePair`2<string, string> LookupHeader(IDictionary`2<string, string> headers, string key);
    private static bool Exists(KeyValuePair`2<string, string> kvp);
    private static long GetHeaderValueAsInt32Safe(IDictionary`2<string, string> responseHeaders, string key);
    [SecurityCriticalAttribute]
public virtual void GetObjectData(SerializationInfo info, StreamingContext context);
    internal string get_DebuggerDisplay();
    public RateLimit Clone();
}
public class Octokit.RateLimitClient : ApiClient {
    public RateLimitClient(IApiConnection apiConnection);
    [ManualRouteAttribute("GET", "/rate_limit")]
public sealed virtual Task`1<MiscellaneousRateLimit> GetRateLimits();
}
public class Octokit.RateLimitExceededException : ForbiddenException {
    private RateLimit _rateLimit;
    private TimeSpan _severTimeDiff;
    public int Limit { get; }
    public int Remaining { get; }
    public DateTimeOffset Reset { get; }
    public string Message { get; }
    public RateLimitExceededException(IResponse response);
    public RateLimitExceededException(IResponse response, Exception innerException);
    protected RateLimitExceededException(SerializationInfo info, StreamingContext context);
    public int get_Limit();
    public int get_Remaining();
    public DateTimeOffset get_Reset();
    public virtual string get_Message();
    public TimeSpan GetRetryAfterTimeSpan();
    [SecurityCriticalAttribute]
public virtual void GetObjectData(SerializationInfo info, StreamingContext context);
}
[DebuggerDisplayAttribute("{DebuggerDisplay,nq}")]
public class Octokit.Reaction : object {
    [CompilerGeneratedAttribute]
private long <Id>k__BackingField;
    [CompilerGeneratedAttribute]
private string <NodeId>k__BackingField;
    [CompilerGeneratedAttribute]
private User <User>k__BackingField;
    [CompilerGeneratedAttribute]
private StringEnum`1<ReactionType> <Content>k__BackingField;
    public long Id { get; private set; }
    public string NodeId { get; private set; }
    public User User { get; private set; }
    [ParameterAttribute]
public StringEnum`1<ReactionType> Content { get; private set; }
    internal string DebuggerDisplay { get; }
    public Reaction(long id, string nodeId, User user, ReactionType content);
    [CompilerGeneratedAttribute]
public long get_Id();
    [CompilerGeneratedAttribute]
private void set_Id(long value);
    [CompilerGeneratedAttribute]
public string get_NodeId();
    [CompilerGeneratedAttribute]
private void set_NodeId(string value);
    [CompilerGeneratedAttribute]
public User get_User();
    [CompilerGeneratedAttribute]
private void set_User(User value);
    [CompilerGeneratedAttribute]
public StringEnum`1<ReactionType> get_Content();
    [CompilerGeneratedAttribute]
private void set_Content(StringEnum`1<ReactionType> value);
    internal string get_DebuggerDisplay();
}
public class Octokit.ReactionsClient : ApiClient {
    [CompilerGeneratedAttribute]
private ICommitCommentReactionsClient <CommitComment>k__BackingField;
    [CompilerGeneratedAttribute]
private IIssueReactionsClient <Issue>k__BackingField;
    [CompilerGeneratedAttribute]
private IIssueCommentReactionsClient <IssueComment>k__BackingField;
    [CompilerGeneratedAttribute]
private IPullRequestReviewCommentReactionsClient <PullRequestReviewComment>k__BackingField;
    public ICommitCommentReactionsClient CommitComment { get; private set; }
    public IIssueReactionsClient Issue { get; private set; }
    public IIssueCommentReactionsClient IssueComment { get; private set; }
    public IPullRequestReviewCommentReactionsClient PullRequestReviewComment { get; private set; }
    public ReactionsClient(IApiConnection apiConnection);
    [CompilerGeneratedAttribute]
public sealed virtual ICommitCommentReactionsClient get_CommitComment();
    [CompilerGeneratedAttribute]
private void set_CommitComment(ICommitCommentReactionsClient value);
    [CompilerGeneratedAttribute]
public sealed virtual IIssueReactionsClient get_Issue();
    [CompilerGeneratedAttribute]
private void set_Issue(IIssueReactionsClient value);
    [CompilerGeneratedAttribute]
public sealed virtual IIssueCommentReactionsClient get_IssueComment();
    [CompilerGeneratedAttribute]
private void set_IssueComment(IIssueCommentReactionsClient value);
    [CompilerGeneratedAttribute]
public sealed virtual IPullRequestReviewCommentReactionsClient get_PullRequestReviewComment();
    [CompilerGeneratedAttribute]
private void set_PullRequestReviewComment(IPullRequestReviewCommentReactionsClient value);
}
[DebuggerDisplayAttribute("{DebuggerDisplay,nq}")]
public class Octokit.ReactionSummary : object {
    [CompilerGeneratedAttribute]
private int <TotalCount>k__BackingField;
    [CompilerGeneratedAttribute]
private int <Plus1>k__BackingField;
    [CompilerGeneratedAttribute]
private int <Minus1>k__BackingField;
    [CompilerGeneratedAttribute]
private int <Laugh>k__BackingField;
    [CompilerGeneratedAttribute]
private int <Confused>k__BackingField;
    [CompilerGeneratedAttribute]
private int <Heart>k__BackingField;
    [CompilerGeneratedAttribute]
private int <Hooray>k__BackingField;
    [CompilerGeneratedAttribute]
private int <Eyes>k__BackingField;
    [CompilerGeneratedAttribute]
private int <Rocket>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Url>k__BackingField;
    public int TotalCount { get; private set; }
    [ParameterAttribute]
public int Plus1 { get; private set; }
    [ParameterAttribute]
public int Minus1 { get; private set; }
    public int Laugh { get; private set; }
    public int Confused { get; private set; }
    public int Heart { get; private set; }
    public int Hooray { get; private set; }
    public int Eyes { get; private set; }
    public int Rocket { get; private set; }
    public string Url { get; private set; }
    internal string DebuggerDisplay { get; }
    public ReactionSummary(int totalCount, int plus1, int minus1, int laugh, int confused, int heart, int hooray, int eyes, int rocket, string url);
    [CompilerGeneratedAttribute]
public int get_TotalCount();
    [CompilerGeneratedAttribute]
private void set_TotalCount(int value);
    [CompilerGeneratedAttribute]
public int get_Plus1();
    [CompilerGeneratedAttribute]
private void set_Plus1(int value);
    [CompilerGeneratedAttribute]
public int get_Minus1();
    [CompilerGeneratedAttribute]
private void set_Minus1(int value);
    [CompilerGeneratedAttribute]
public int get_Laugh();
    [CompilerGeneratedAttribute]
private void set_Laugh(int value);
    [CompilerGeneratedAttribute]
public int get_Confused();
    [CompilerGeneratedAttribute]
private void set_Confused(int value);
    [CompilerGeneratedAttribute]
public int get_Heart();
    [CompilerGeneratedAttribute]
private void set_Heart(int value);
    [CompilerGeneratedAttribute]
public int get_Hooray();
    [CompilerGeneratedAttribute]
private void set_Hooray(int value);
    [CompilerGeneratedAttribute]
public int get_Eyes();
    [CompilerGeneratedAttribute]
private void set_Eyes(int value);
    [CompilerGeneratedAttribute]
public int get_Rocket();
    [CompilerGeneratedAttribute]
private void set_Rocket(int value);
    [CompilerGeneratedAttribute]
public string get_Url();
    [CompilerGeneratedAttribute]
private void set_Url(string value);
    internal string get_DebuggerDisplay();
}
public enum Octokit.ReactionType : Enum {
    public int value__;
    [ParameterAttribute]
public static ReactionType Plus1;
    [ParameterAttribute]
public static ReactionType Minus1;
    [ParameterAttribute]
public static ReactionType Laugh;
    [ParameterAttribute]
public static ReactionType Confused;
    [ParameterAttribute]
public static ReactionType Heart;
    [ParameterAttribute]
public static ReactionType Hooray;
    [ParameterAttribute]
public static ReactionType Rocket;
    [ParameterAttribute]
public static ReactionType Eyes;
}
[DebuggerDisplayAttribute("{DebuggerDisplay,nq}")]
public class Octokit.Readme : object {
    private Lazy`1<Task`1<string>> htmlContent;
    [CompilerGeneratedAttribute]
private string <Content>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    [CompilerGeneratedAttribute]
private string <HtmlUrl>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Url>k__BackingField;
    public string Content { get; private set; }
    public string Name { get; private set; }
    public string HtmlUrl { get; private set; }
    public string Url { get; private set; }
    internal string DebuggerDisplay { get; }
    internal Readme(ReadmeResponse response, IApiConnection client);
    public Readme(Lazy`1<Task`1<string>> htmlContent, string content, string name, string htmlUrl, string url);
    [CompilerGeneratedAttribute]
public string get_Content();
    [CompilerGeneratedAttribute]
private void set_Content(string value);
    [CompilerGeneratedAttribute]
public string get_Name();
    [CompilerGeneratedAttribute]
private void set_Name(string value);
    [CompilerGeneratedAttribute]
public string get_HtmlUrl();
    [CompilerGeneratedAttribute]
private void set_HtmlUrl(string value);
    [CompilerGeneratedAttribute]
public string get_Url();
    [CompilerGeneratedAttribute]
private void set_Url(string value);
    public Task`1<string> GetHtmlContent();
    internal string get_DebuggerDisplay();
}
internal class Octokit.ReadmeResponse : object {
    [CompilerGeneratedAttribute]
private string <Content>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    [CompilerGeneratedAttribute]
private string <HtmlUrl>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Url>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Encoding>k__BackingField;
    public string Content { get; private set; }
    public string Name { get; private set; }
    public string HtmlUrl { get; private set; }
    public string Url { get; private set; }
    public string Encoding { get; private set; }
    public ReadmeResponse(string content, string name, string htmlUrl, string url, string encoding);
    [CompilerGeneratedAttribute]
public string get_Content();
    [CompilerGeneratedAttribute]
private void set_Content(string value);
    [CompilerGeneratedAttribute]
public string get_Name();
    [CompilerGeneratedAttribute]
private void set_Name(string value);
    [CompilerGeneratedAttribute]
public string get_HtmlUrl();
    [CompilerGeneratedAttribute]
private void set_HtmlUrl(string value);
    [CompilerGeneratedAttribute]
public string get_Url();
    [CompilerGeneratedAttribute]
private void set_Url(string value);
    [CompilerGeneratedAttribute]
public string get_Encoding();
    [CompilerGeneratedAttribute]
private void set_Encoding(string value);
}
[DebuggerDisplayAttribute("{DebuggerDisplay,nq}")]
public class Octokit.Reference : object {
    [CompilerGeneratedAttribute]
private string <Ref>k__BackingField;
    [CompilerGeneratedAttribute]
private string <NodeId>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Url>k__BackingField;
    [CompilerGeneratedAttribute]
private TagObject <Object>k__BackingField;
    public string Ref { get; private set; }
    public string NodeId { get; private set; }
    public string Url { get; private set; }
    public TagObject Object { get; private set; }
    internal string DebuggerDisplay { get; }
    public Reference(string ref, string nodeId, string url, TagObject object);
    [CompilerGeneratedAttribute]
public string get_Ref();
    [CompilerGeneratedAttribute]
private void set_Ref(string value);
    [CompilerGeneratedAttribute]
public string get_NodeId();
    [CompilerGeneratedAttribute]
private void set_NodeId(string value);
    [CompilerGeneratedAttribute]
public string get_Url();
    [CompilerGeneratedAttribute]
private void set_Url(string value);
    [CompilerGeneratedAttribute]
public TagObject get_Object();
    [CompilerGeneratedAttribute]
private void set_Object(TagObject value);
    internal string get_DebuggerDisplay();
}
public class Octokit.ReferencesClient : ApiClient {
    public ReferencesClient(IApiConnection apiConnection);
    [ManualRouteAttribute("GET", "/repos/{owner}/{repo}/git/refs/{ref}")]
public sealed virtual Task`1<Reference> Get(string owner, string name, string reference);
    [ManualRouteAttribute("GET", "/repositories/{id}/git/refs/{ref}")]
public sealed virtual Task`1<Reference> Get(long repositoryId, string reference);
    [ManualRouteAttribute("GET", "/repos/{owner}/{repo}/git/refs")]
public sealed virtual Task`1<IReadOnlyList`1<Reference>> GetAll(string owner, string name);
    [ManualRouteAttribute("GET", "/repos/{owner}/{repo}/git/refs")]
public sealed virtual Task`1<IReadOnlyList`1<Reference>> GetAll(string owner, string name, ApiOptions options);
    [ManualRouteAttribute("GET", "/repositories/{id}/git/refs")]
public sealed virtual Task`1<IReadOnlyList`1<Reference>> GetAll(long repositoryId);
    [ManualRouteAttribute("GET", "/repositories/{id}/git/refs")]
public sealed virtual Task`1<IReadOnlyList`1<Reference>> GetAll(long repositoryId, ApiOptions options);
    [ManualRouteAttribute("GET", "/repos/{owner}/{repo}/git/refs/{ref}")]
public sealed virtual Task`1<IReadOnlyList`1<Reference>> GetAllForSubNamespace(string owner, string name, string subNamespace);
    [ManualRouteAttribute("GET", "/repos/{owner}/{repo}/git/refs/{ref}")]
public sealed virtual Task`1<IReadOnlyList`1<Reference>> GetAllForSubNamespace(string owner, string name, string subNamespace, ApiOptions options);
    [ManualRouteAttribute("GET", "/repositories/{id}/git/refs/{ref}")]
public sealed virtual Task`1<IReadOnlyList`1<Reference>> GetAllForSubNamespace(long repositoryId, string subNamespace);
    [ManualRouteAttribute("GET", "/repositories/{id}/git/refs/{ref}")]
public sealed virtual Task`1<IReadOnlyList`1<Reference>> GetAllForSubNamespace(long repositoryId, string subNamespace, ApiOptions options);
    [ManualRouteAttribute("POST", "/repos/{owner}/{repo}/git/refs")]
public sealed virtual Task`1<Reference> Create(string owner, string name, NewReference reference);
    [ManualRouteAttribute("POST", "/repositories/{id}/git/refs")]
public sealed virtual Task`1<Reference> Create(long repositoryId, NewReference reference);
    [ManualRouteAttribute("PATCH", "/repos/{owner}/{repo}/git/refs/{ref}")]
public sealed virtual Task`1<Reference> Update(string owner, string name, string reference, ReferenceUpdate referenceUpdate);
    [ManualRouteAttribute("PATCH", "/repositories/{id}/git/refs/{ref}")]
public sealed virtual Task`1<Reference> Update(long repositoryId, string reference, ReferenceUpdate referenceUpdate);
    [ManualRouteAttribute("PATCH", "/repos/{owner}/{repo}/git/refs/{ref}")]
public sealed virtual Task Delete(string owner, string name, string reference);
    [ManualRouteAttribute("DELETE", "/repositories/{id}/git/refs/{ref}")]
public sealed virtual Task Delete(long repositoryId, string reference);
}
[DebuggerDisplayAttribute("{DebuggerDisplay,nq}")]
public class Octokit.ReferenceUpdate : object {
    [CompilerGeneratedAttribute]
private string <Sha>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <Force>k__BackingField;
    public string Sha { get; private set; }
    public bool Force { get; private set; }
    internal string DebuggerDisplay { get; }
    public ReferenceUpdate(string sha);
    public ReferenceUpdate(string sha, bool force);
    [CompilerGeneratedAttribute]
public string get_Sha();
    [CompilerGeneratedAttribute]
private void set_Sha(string value);
    [CompilerGeneratedAttribute]
public bool get_Force();
    [CompilerGeneratedAttribute]
private void set_Force(bool value);
    internal string get_DebuggerDisplay();
}
[GeneratedCodeAttribute("reflection-utils", "1.0.0")]
internal class Octokit.Reflection.ReflectionUtils : object {
    private static Object[] EmptyObjects;
    private static ReflectionUtils();
    public static TypeInfo GetTypeInfo(Type type);
    public static Attribute GetAttribute(MemberInfo info, Type type);
    public static Type GetGenericListElementType(Type type);
    public static Attribute GetAttribute(Type objectType, Type attributeType);
    public static Type[] GetGenericTypeArguments(Type type);
    public static bool IsTypeGeneric(Type type);
    public static bool IsTypeGenericeCollectionInterface(Type type);
    public static bool IsAssignableFrom(Type type1, Type type2);
    public static bool IsStringEnumWrapper(Type type);
    public static IEnumerable`1<Type> GetInterfaces(Type type);
    public static bool IsTypeDictionary(Type type);
    public static bool IsNullableType(Type type);
    public static object ToNullableType(object obj, Type nullableType);
    public static bool IsValueType(Type type);
    public static IEnumerable`1<ConstructorInfo> GetConstructors(Type type);
    public static ConstructorInfo GetConstructorInfo(Type type, Type[] argsType);
    public static IEnumerable`1<PropertyInfo> GetProperties(Type type);
    public static IEnumerable`1<FieldInfo> GetFields(Type type);
    public static MethodInfo GetGetterMethodInfo(PropertyInfo propertyInfo);
    public static MethodInfo GetSetterMethodInfo(PropertyInfo propertyInfo);
    public static ConstructorDelegate GetContructor(ConstructorInfo constructorInfo);
    public static ConstructorDelegate GetContructor(Type type, Type[] argsType);
    public static ConstructorDelegate GetConstructorByReflection(ConstructorInfo constructorInfo);
    public static ConstructorDelegate GetConstructorByReflection(Type type, Type[] argsType);
    public static ConstructorDelegate GetConstructorByExpression(ConstructorInfo constructorInfo);
    public static ConstructorDelegate GetConstructorByExpression(Type type, Type[] argsType);
    public static GetDelegate GetGetMethod(PropertyInfo propertyInfo);
    public static GetDelegate GetGetMethod(FieldInfo fieldInfo);
    public static GetDelegate GetGetMethodByReflection(PropertyInfo propertyInfo);
    public static GetDelegate GetGetMethodByReflection(FieldInfo fieldInfo);
    public static GetDelegate GetGetMethodByExpression(PropertyInfo propertyInfo);
    public static GetDelegate GetGetMethodByExpression(FieldInfo fieldInfo);
    public static SetDelegate GetSetMethod(PropertyInfo propertyInfo);
    public static SetDelegate GetSetMethod(FieldInfo fieldInfo);
    public static SetDelegate GetSetMethodByReflection(PropertyInfo propertyInfo);
    public static SetDelegate GetSetMethodByReflection(FieldInfo fieldInfo);
    public static SetDelegate GetSetMethodByExpression(PropertyInfo propertyInfo);
    public static SetDelegate GetSetMethodByExpression(FieldInfo fieldInfo);
    public static BinaryExpression Assign(Expression left, Expression right);
}
[ExtensionAttribute]
internal static class Octokit.ReflectionExtensions : object {
    [ExtensionAttribute]
public static string GetJsonFieldName(MemberInfo memberInfo);
    [ExtensionAttribute]
public static IEnumerable`1<PropertyOrField> GetPropertiesAndFields(Type type);
    [ExtensionAttribute]
public static bool IsDateTimeOffset(Type type);
    [ExtensionAttribute]
public static bool IsNullable(Type type);
    [ExtensionAttribute]
public static IEnumerable`1<MemberInfo> GetMember(Type type, string name);
    [ExtensionAttribute]
public static PropertyInfo GetProperty(Type t, string propertyName);
    [ExtensionAttribute]
public static bool IsAssignableFrom(Type type, Type otherType);
    [ExtensionAttribute]
public static IEnumerable`1<PropertyInfo> GetAllProperties(Type type);
    [ExtensionAttribute]
public static bool IsEnumeration(Type type);
}
public enum Octokit.RefType : Enum {
    public int value__;
    [ParameterAttribute]
public static RefType Repository;
    [ParameterAttribute]
public static RefType Branch;
    [ParameterAttribute]
public static RefType Tag;
}
[DebuggerDisplayAttribute("{DebuggerDisplay,nq}")]
public class Octokit.Release : object {
    [CompilerGeneratedAttribute]
private string <Url>k__BackingField;
    [CompilerGeneratedAttribute]
private string <HtmlUrl>k__BackingField;
    [CompilerGeneratedAttribute]
private string <AssetsUrl>k__BackingField;
    [CompilerGeneratedAttribute]
private string <UploadUrl>k__BackingField;
    [CompilerGeneratedAttribute]
private long <Id>k__BackingField;
    [CompilerGeneratedAttribute]
private string <NodeId>k__BackingField;
    [CompilerGeneratedAttribute]
private string <TagName>k__BackingField;
    [CompilerGeneratedAttribute]
private string <TargetCommitish>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Body>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <Draft>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <Prerelease>k__BackingField;
    [CompilerGeneratedAttribute]
private DateTimeOffset <CreatedAt>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<DateTimeOffset> <PublishedAt>k__BackingField;
    [CompilerGeneratedAttribute]
private Author <Author>k__BackingField;
    [CompilerGeneratedAttribute]
private string <TarballUrl>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ZipballUrl>k__BackingField;
    [CompilerGeneratedAttribute]
private IReadOnlyList`1<ReleaseAsset> <Assets>k__BackingField;
    public string Url { get; private set; }
    public string HtmlUrl { get; private set; }
    public string AssetsUrl { get; private set; }
    public string UploadUrl { get; private set; }
    public long Id { get; private set; }
    public string NodeId { get; private set; }
    public string TagName { get; private set; }
    public string TargetCommitish { get; private set; }
    public string Name { get; private set; }
    public string Body { get; private set; }
    public bool Draft { get; private set; }
    public bool Prerelease { get; private set; }
    public DateTimeOffset CreatedAt { get; private set; }
    public Nullable`1<DateTimeOffset> PublishedAt { get; private set; }
    public Author Author { get; private set; }
    public string TarballUrl { get; private set; }
    public string ZipballUrl { get; private set; }
    public IReadOnlyList`1<ReleaseAsset> Assets { get; private set; }
    internal string DebuggerDisplay { get; }
    public Release(string url, string htmlUrl, string assetsUrl, string uploadUrl, long id, string nodeId, string tagName, string targetCommitish, string name, string body, bool draft, bool prerelease, DateTimeOffset createdAt, Nullable`1<DateTimeOffset> publishedAt, Author author, string tarballUrl, string zipballUrl, IReadOnlyList`1<ReleaseAsset> assets);
    public Release(string uploadUrl);
    [CompilerGeneratedAttribute]
public string get_Url();
    [CompilerGeneratedAttribute]
private void set_Url(string value);
    [CompilerGeneratedAttribute]
public string get_HtmlUrl();
    [CompilerGeneratedAttribute]
private void set_HtmlUrl(string value);
    [CompilerGeneratedAttribute]
public string get_AssetsUrl();
    [CompilerGeneratedAttribute]
private void set_AssetsUrl(string value);
    [CompilerGeneratedAttribute]
public string get_UploadUrl();
    [CompilerGeneratedAttribute]
private void set_UploadUrl(string value);
    [CompilerGeneratedAttribute]
public long get_Id();
    [CompilerGeneratedAttribute]
private void set_Id(long value);
    [CompilerGeneratedAttribute]
public string get_NodeId();
    [CompilerGeneratedAttribute]
private void set_NodeId(string value);
    [CompilerGeneratedAttribute]
public string get_TagName();
    [CompilerGeneratedAttribute]
private void set_TagName(string value);
    [CompilerGeneratedAttribute]
public string get_TargetCommitish();
    [CompilerGeneratedAttribute]
private void set_TargetCommitish(string value);
    [CompilerGeneratedAttribute]
public string get_Name();
    [CompilerGeneratedAttribute]
private void set_Name(string value);
    [CompilerGeneratedAttribute]
public string get_Body();
    [CompilerGeneratedAttribute]
private void set_Body(string value);
    [CompilerGeneratedAttribute]
public bool get_Draft();
    [CompilerGeneratedAttribute]
private void set_Draft(bool value);
    [CompilerGeneratedAttribute]
public bool get_Prerelease();
    [CompilerGeneratedAttribute]
private void set_Prerelease(bool value);
    [CompilerGeneratedAttribute]
public DateTimeOffset get_CreatedAt();
    [CompilerGeneratedAttribute]
private void set_CreatedAt(DateTimeOffset value);
    [CompilerGeneratedAttribute]
public Nullable`1<DateTimeOffset> get_PublishedAt();
    [CompilerGeneratedAttribute]
private void set_PublishedAt(Nullable`1<DateTimeOffset> value);
    [CompilerGeneratedAttribute]
public Author get_Author();
    [CompilerGeneratedAttribute]
private void set_Author(Author value);
    [CompilerGeneratedAttribute]
public string get_TarballUrl();
    [CompilerGeneratedAttribute]
private void set_TarballUrl(string value);
    [CompilerGeneratedAttribute]
public string get_ZipballUrl();
    [CompilerGeneratedAttribute]
private void set_ZipballUrl(string value);
    [CompilerGeneratedAttribute]
public IReadOnlyList`1<ReleaseAsset> get_Assets();
    [CompilerGeneratedAttribute]
private void set_Assets(IReadOnlyList`1<ReleaseAsset> value);
    internal string get_DebuggerDisplay();
    public ReleaseUpdate ToUpdate();
}
[DebuggerDisplayAttribute("{DebuggerDisplay,nq}")]
public class Octokit.ReleaseAsset : object {
    [CompilerGeneratedAttribute]
private string <Url>k__BackingField;
    [CompilerGeneratedAttribute]
private int <Id>k__BackingField;
    [CompilerGeneratedAttribute]
private string <NodeId>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Label>k__BackingField;
    [CompilerGeneratedAttribute]
private string <State>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ContentType>k__BackingField;
    [CompilerGeneratedAttribute]
private int <Size>k__BackingField;
    [CompilerGeneratedAttribute]
private int <DownloadCount>k__BackingField;
    [CompilerGeneratedAttribute]
private DateTimeOffset <CreatedAt>k__BackingField;
    [CompilerGeneratedAttribute]
private DateTimeOffset <UpdatedAt>k__BackingField;
    [CompilerGeneratedAttribute]
private string <BrowserDownloadUrl>k__BackingField;
    [CompilerGeneratedAttribute]
private Author <Uploader>k__BackingField;
    public string Url { get; private set; }
    public int Id { get; private set; }
    public string NodeId { get; private set; }
    public string Name { get; private set; }
    public string Label { get; private set; }
    public string State { get; private set; }
    public string ContentType { get; private set; }
    public int Size { get; private set; }
    public int DownloadCount { get; private set; }
    public DateTimeOffset CreatedAt { get; private set; }
    public DateTimeOffset UpdatedAt { get; private set; }
    public string BrowserDownloadUrl { get; private set; }
    public Author Uploader { get; private set; }
    internal string DebuggerDisplay { get; }
    public ReleaseAsset(string url, int id, string nodeId, string name, string label, string state, string contentType, int size, int downloadCount, DateTimeOffset createdAt, DateTimeOffset updatedAt, string browserDownloadUrl, Author uploader);
    [CompilerGeneratedAttribute]
public string get_Url();
    [CompilerGeneratedAttribute]
private void set_Url(string value);
    [CompilerGeneratedAttribute]
public int get_Id();
    [CompilerGeneratedAttribute]
private void set_Id(int value);
    [CompilerGeneratedAttribute]
public string get_NodeId();
    [CompilerGeneratedAttribute]
private void set_NodeId(string value);
    [CompilerGeneratedAttribute]
public string get_Name();
    [CompilerGeneratedAttribute]
private void set_Name(string value);
    [CompilerGeneratedAttribute]
public string get_Label();
    [CompilerGeneratedAttribute]
private void set_Label(string value);
    [CompilerGeneratedAttribute]
public string get_State();
    [CompilerGeneratedAttribute]
private void set_State(string value);
    [CompilerGeneratedAttribute]
public string get_ContentType();
    [CompilerGeneratedAttribute]
private void set_ContentType(string value);
    [CompilerGeneratedAttribute]
public int get_Size();
    [CompilerGeneratedAttribute]
private void set_Size(int value);
    [CompilerGeneratedAttribute]
public int get_DownloadCount();
    [CompilerGeneratedAttribute]
private void set_DownloadCount(int value);
    [CompilerGeneratedAttribute]
public DateTimeOffset get_CreatedAt();
    [CompilerGeneratedAttribute]
private void set_CreatedAt(DateTimeOffset value);
    [CompilerGeneratedAttribute]
public DateTimeOffset get_UpdatedAt();
    [CompilerGeneratedAttribute]
private void set_UpdatedAt(DateTimeOffset value);
    [CompilerGeneratedAttribute]
public string get_BrowserDownloadUrl();
    [CompilerGeneratedAttribute]
private void set_BrowserDownloadUrl(string value);
    [CompilerGeneratedAttribute]
public Author get_Uploader();
    [CompilerGeneratedAttribute]
private void set_Uploader(Author value);
    internal string get_DebuggerDisplay();
    public ReleaseAssetUpdate ToUpdate();
}
[DebuggerDisplayAttribute("{DebuggerDisplay,nq}")]
public class Octokit.ReleaseAssetUpdate : object {
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Label>k__BackingField;
    public string Name { get; private set; }
    public string Label { get; public set; }
    internal string DebuggerDisplay { get; }
    public ReleaseAssetUpdate(string name);
    [CompilerGeneratedAttribute]
public string get_Name();
    [CompilerGeneratedAttribute]
private void set_Name(string value);
    [CompilerGeneratedAttribute]
public string get_Label();
    [CompilerGeneratedAttribute]
public void set_Label(string value);
    internal string get_DebuggerDisplay();
}
[DebuggerDisplayAttribute("{DebuggerDisplay,nq}")]
public class Octokit.ReleaseAssetUpload : object {
    [CompilerGeneratedAttribute]
private string <FileName>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ContentType>k__BackingField;
    [CompilerGeneratedAttribute]
private Stream <RawData>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<TimeSpan> <Timeout>k__BackingField;
    public string FileName { get; public set; }
    public string ContentType { get; public set; }
    public Stream RawData { get; public set; }
    public Nullable`1<TimeSpan> Timeout { get; public set; }
    internal string DebuggerDisplay { get; }
    public ReleaseAssetUpload(string fileName, string contentType, Stream rawData, Nullable`1<TimeSpan> timeout);
    [CompilerGeneratedAttribute]
public string get_FileName();
    [CompilerGeneratedAttribute]
public void set_FileName(string value);
    [CompilerGeneratedAttribute]
public string get_ContentType();
    [CompilerGeneratedAttribute]
public void set_ContentType(string value);
    [CompilerGeneratedAttribute]
public Stream get_RawData();
    [CompilerGeneratedAttribute]
public void set_RawData(Stream value);
    [CompilerGeneratedAttribute]
public Nullable`1<TimeSpan> get_Timeout();
    [CompilerGeneratedAttribute]
public void set_Timeout(Nullable`1<TimeSpan> value);
    internal string get_DebuggerDisplay();
}
[DebuggerDisplayAttribute("{DebuggerDisplay,nq}")]
public class Octokit.ReleaseEventPayload : ActivityPayload {
    [CompilerGeneratedAttribute]
private string <Action>k__BackingField;
    [CompilerGeneratedAttribute]
private Release <Release>k__BackingField;
    public string Action { get; private set; }
    public Release Release { get; private set; }
    [CompilerGeneratedAttribute]
public string get_Action();
    [CompilerGeneratedAttribute]
private void set_Action(string value);
    [CompilerGeneratedAttribute]
public Release get_Release();
    [CompilerGeneratedAttribute]
private void set_Release(Release value);
}
public class Octokit.ReleasesClient : ApiClient {
    public ReleasesClient(IApiConnection apiConnection);
    [ManualRouteAttribute("POST", "/repos/{owner}/{repo}/releases/generate-notes")]
public sealed virtual Task`1<GeneratedReleaseNotes> GenerateReleaseNotes(string owner, string name, GenerateReleaseNotesRequest data);
    [ManualRouteAttribute("POST", "/repositories/{id}/releases/generate-notes")]
public sealed virtual Task`1<GeneratedReleaseNotes> GenerateReleaseNotes(long repositoryId, GenerateReleaseNotesRequest data);
    [ManualRouteAttribute("GET", "/repos/{owner}/{repo}/releases")]
public sealed virtual Task`1<IReadOnlyList`1<Release>> GetAll(string owner, string name);
    [ManualRouteAttribute("GET", "/repositories/{id}/releases")]
public sealed virtual Task`1<IReadOnlyList`1<Release>> GetAll(long repositoryId);
    [ManualRouteAttribute("GET", "/repos/{owner}/{repo}/releases")]
public sealed virtual Task`1<IReadOnlyList`1<Release>> GetAll(string owner, string name, ApiOptions options);
    [ManualRouteAttribute("GET", "/repositories/{id}/releases")]
public sealed virtual Task`1<IReadOnlyList`1<Release>> GetAll(long repositoryId, ApiOptions options);
    [ManualRouteAttribute("GET", "/repos/{owner}/{repo}/releases/{release_id}")]
public sealed virtual Task`1<Release> Get(string owner, string name, long releaseId);
    [ManualRouteAttribute("GET", "/repos/{owner}/{repo}/releases/tags/{tag}")]
public sealed virtual Task`1<Release> Get(string owner, string name, string tag);
    [ManualRouteAttribute("GET", "/repositories/{id}/releases/{id}")]
public sealed virtual Task`1<Release> Get(long repositoryId, long releaseId);
    [ManualRouteAttribute("GET", "/repositories/{id}/releases/tags/{tag}")]
public sealed virtual Task`1<Release> Get(long repositoryId, string tag);
    [ManualRouteAttribute("GET", "/repos/{owner}/{repo}/releases/latest")]
public sealed virtual Task`1<Release> GetLatest(string owner, string name);
    [ManualRouteAttribute("GET", "/repositories/{id}/releases/latest")]
public sealed virtual Task`1<Release> GetLatest(long repositoryId);
    [ManualRouteAttribute("POST", "/repos/{owner}/{repo}/releases")]
public sealed virtual Task`1<Release> Create(string owner, string name, NewRelease data);
    [ManualRouteAttribute("POST", "/repositories/{id}/releases")]
public sealed virtual Task`1<Release> Create(long repositoryId, NewRelease data);
    [ManualRouteAttribute("PATCH", "/repos/{owner}/{repo}/releases/{release_id}")]
public sealed virtual Task`1<Release> Edit(string owner, string name, long releaseId, ReleaseUpdate data);
    [ManualRouteAttribute("PATCH", "/repositories/{id}/releases/{id}")]
public sealed virtual Task`1<Release> Edit(long repositoryId, long releaseId, ReleaseUpdate data);
    [ManualRouteAttribute("DELETE", "/repos/{owner}/{repo}/releases/{release_id}")]
public sealed virtual Task Delete(string owner, string name, long releaseId);
    [ManualRouteAttribute("DELETE", "/repositories/{id}/releases/{id}")]
public sealed virtual Task Delete(long repositoryId, long releaseId);
    [ManualRouteAttribute("GET", "/repos/{owner}/{repo}/releases/{release_id}/assets")]
public sealed virtual Task`1<IReadOnlyList`1<ReleaseAsset>> GetAllAssets(string owner, string name, long releaseId);
    [ManualRouteAttribute("GET", "/repositories/{id}/releases/{id}/assets")]
public sealed virtual Task`1<IReadOnlyList`1<ReleaseAsset>> GetAllAssets(long repositoryId, long releaseId);
    [ManualRouteAttribute("GET", "/repos/{owner}/{repo}/releases/{release_id}/assets")]
public sealed virtual Task`1<IReadOnlyList`1<ReleaseAsset>> GetAllAssets(string owner, string name, long releaseId, ApiOptions options);
    [ManualRouteAttribute("GET", "/repositories/{id}/releases/{id}/assets")]
public sealed virtual Task`1<IReadOnlyList`1<ReleaseAsset>> GetAllAssets(long repositoryId, long releaseId, ApiOptions options);
    [ManualRouteAttribute("POST", "{server}/repos/{owner}/{repo}/releases/{release_id}/assets")]
public sealed virtual Task`1<ReleaseAsset> UploadAsset(Release release, ReleaseAssetUpload data, CancellationToken cancellationToken);
    [ManualRouteAttribute("GET", "/repos/{owner}/{repo}/releases/assets/{asset_id}")]
public sealed virtual Task`1<ReleaseAsset> GetAsset(string owner, string name, int assetId);
    [ManualRouteAttribute("GET", "/repositories/{id}/releases/assets/{asset_id}")]
public sealed virtual Task`1<ReleaseAsset> GetAsset(long repositoryId, int assetId);
    [ManualRouteAttribute("PATCH", "/repos/{owner}/{repo}/releases/assets/{asset_id}")]
public sealed virtual Task`1<ReleaseAsset> EditAsset(string owner, string name, int assetId, ReleaseAssetUpdate data);
    [ManualRouteAttribute("PATCH", "/repositories/{id}/releases/assets/{asset_id}")]
public sealed virtual Task`1<ReleaseAsset> EditAsset(long repositoryId, int assetId, ReleaseAssetUpdate data);
    [ManualRouteAttribute("DELETE", "/repos/{owner}/{repo}/releases/assets/{asset_id}")]
public sealed virtual Task DeleteAsset(string owner, string name, int assetId);
    [ManualRouteAttribute("DELETE", "/repositories/{id}/releases/assets/{asset_id}")]
public sealed virtual Task DeleteAsset(long repositoryId, int assetId);
}
[DebuggerDisplayAttribute("{DebuggerDisplay,nq}")]
public class Octokit.ReleaseUpdate : object {
    [CompilerGeneratedAttribute]
private string <TagName>k__BackingField;
    [CompilerGeneratedAttribute]
private string <TargetCommitish>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Body>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<bool> <Draft>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<bool> <Prerelease>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<MakeLatestQualifier> <MakeLatest>k__BackingField;
    public string TagName { get; public set; }
    public string TargetCommitish { get; public set; }
    public string Name { get; public set; }
    public string Body { get; public set; }
    public Nullable`1<bool> Draft { get; public set; }
    public Nullable`1<bool> Prerelease { get; public set; }
    public Nullable`1<MakeLatestQualifier> MakeLatest { get; public set; }
    internal string DebuggerDisplay { get; }
    [CompilerGeneratedAttribute]
public string get_TagName();
    [CompilerGeneratedAttribute]
public void set_TagName(string value);
    [CompilerGeneratedAttribute]
public string get_TargetCommitish();
    [CompilerGeneratedAttribute]
public void set_TargetCommitish(string value);
    [CompilerGeneratedAttribute]
public string get_Name();
    [CompilerGeneratedAttribute]
public void set_Name(string value);
    [CompilerGeneratedAttribute]
public string get_Body();
    [CompilerGeneratedAttribute]
public void set_Body(string value);
    [CompilerGeneratedAttribute]
public Nullable`1<bool> get_Draft();
    [CompilerGeneratedAttribute]
public void set_Draft(Nullable`1<bool> value);
    [CompilerGeneratedAttribute]
public Nullable`1<bool> get_Prerelease();
    [CompilerGeneratedAttribute]
public void set_Prerelease(Nullable`1<bool> value);
    [CompilerGeneratedAttribute]
public Nullable`1<MakeLatestQualifier> get_MakeLatest();
    [CompilerGeneratedAttribute]
public void set_MakeLatest(Nullable`1<MakeLatestQualifier> value);
    internal string get_DebuggerDisplay();
}
[DebuggerDisplayAttribute("{DebuggerDisplay,nq}")]
public class Octokit.RenameInfo : object {
    [CompilerGeneratedAttribute]
private string <From>k__BackingField;
    [CompilerGeneratedAttribute]
private string <To>k__BackingField;
    public string From { get; private set; }
    public string To { get; private set; }
    internal string DebuggerDisplay { get; }
    public RenameInfo(string from, string to);
    [CompilerGeneratedAttribute]
public string get_From();
    [CompilerGeneratedAttribute]
private void set_From(string value);
    [CompilerGeneratedAttribute]
public string get_To();
    [CompilerGeneratedAttribute]
private void set_To(string value);
    internal string get_DebuggerDisplay();
}
public class Octokit.RepoCollaboratorsClient : ApiClient {
    public RepoCollaboratorsClient(IApiConnection apiConnection);
    [ManualRouteAttribute("GET", "/repos/{owner}/{repo}/collaborators")]
public sealed virtual Task`1<IReadOnlyList`1<Collaborator>> GetAll(string owner, string name);
    [ManualRouteAttribute("GET", "/repository/{id}/collaborators")]
public sealed virtual Task`1<IReadOnlyList`1<Collaborator>> GetAll(long repositoryId);
    [ManualRouteAttribute("GET", "/repos/{owner}/{repo}/collaborators")]
public sealed virtual Task`1<IReadOnlyList`1<Collaborator>> GetAll(string owner, string name, ApiOptions options);
    [ManualRouteAttribute("GET", "/repository/{id}/collaborators")]
public sealed virtual Task`1<IReadOnlyList`1<Collaborator>> GetAll(long repositoryId, ApiOptions options);
    [ManualRouteAttribute("GET", "/repos/{owner}/{repo}/collaborators")]
public sealed virtual Task`1<IReadOnlyList`1<Collaborator>> GetAll(string owner, string name, RepositoryCollaboratorListRequest request);
    [ManualRouteAttribute("GET", "/repository/{id}/collaborators")]
public sealed virtual Task`1<IReadOnlyList`1<Collaborator>> GetAll(long repositoryId, RepositoryCollaboratorListRequest request);
    [ManualRouteAttribute("GET", "/repos/{owner}/{repo}/collaborators")]
public sealed virtual Task`1<IReadOnlyList`1<Collaborator>> GetAll(string owner, string name, RepositoryCollaboratorListRequest request, ApiOptions options);
    [ManualRouteAttribute("GET", "/repository/{id}/collaborators")]
public sealed virtual Task`1<IReadOnlyList`1<Collaborator>> GetAll(long repositoryId, RepositoryCollaboratorListRequest request, ApiOptions options);
    [AsyncStateMachineAttribute("Octokit.RepoCollaboratorsClient/<IsCollaborator>d__9")]
[ManualRouteAttribute("GET", "/repos/{owner}/{repo}/collaborators/{username}")]
public sealed virtual Task`1<bool> IsCollaborator(string owner, string name, string user);
    [AsyncStateMachineAttribute("Octokit.RepoCollaboratorsClient/<IsCollaborator>d__10")]
[ManualRouteAttribute("GET", "/repository/{id}/collaborators/{username}")]
public sealed virtual Task`1<bool> IsCollaborator(long repositoryId, string user);
    [ManualRouteAttribute("GET", "/repos/{owner}/{repo}/collaborators/{username}/permission")]
public sealed virtual Task`1<CollaboratorPermissionResponse> ReviewPermission(string owner, string name, string user);
    [ManualRouteAttribute("GET", "/repository/{id}/collaborators/{username}/permission")]
public sealed virtual Task`1<CollaboratorPermissionResponse> ReviewPermission(long repositoryId, string user);
    [ManualRouteAttribute("PUT", "/repos/{owner}/{repo}/collaborators/{username}")]
public sealed virtual Task Add(string owner, string name, string user);
    [AsyncStateMachineAttribute("Octokit.RepoCollaboratorsClient/<Add>d__14")]
[ManualRouteAttribute("PUT", "/repos/{owner}/{repo}/collaborators/{username}")]
public sealed virtual Task`1<RepositoryInvitation> Add(string owner, string name, string user, CollaboratorRequest permission);
    [ManualRouteAttribute("PUT", "/repository/{id}/collaborators/{username}")]
public sealed virtual Task Add(long repositoryId, string user);
    [AsyncStateMachineAttribute("Octokit.RepoCollaboratorsClient/<Add>d__16")]
[ManualRouteAttribute("PUT", "/repository/{id}/collaborators/{username}")]
public sealed virtual Task`1<RepositoryInvitation> Add(long repositoryId, string user, CollaboratorRequest permission);
    [ManualRouteAttribute("PUT", "/repos/{owner}/{repo}/collaborators/{username}")]
public sealed virtual Task`1<RepositoryInvitation> Invite(string owner, string name, string user);
    [ManualRouteAttribute("PUT", "/repos/{owner}/{repo}/collaborators/{username}")]
public sealed virtual Task`1<RepositoryInvitation> Invite(string owner, string name, string user, CollaboratorRequest permission);
    [ManualRouteAttribute("PUT", "/repository/{id}/collaborators/{username}")]
public sealed virtual Task`1<RepositoryInvitation> Invite(long repositoryId, string user);
    [ManualRouteAttribute("PUT", "/repository/{id}/collaborators/{username}")]
public sealed virtual Task`1<RepositoryInvitation> Invite(long repositoryId, string user, CollaboratorRequest permission);
    [ManualRouteAttribute("DELETE", "/repos/{owner}/{repo}/collaborators/{username}")]
public sealed virtual Task Delete(string owner, string name, string user);
    [ManualRouteAttribute("DELETE", "/repository/{id}/collaborators/{username}")]
public sealed virtual Task Delete(long repositoryId, string user);
}
public enum Octokit.RepoSearchLicense : Enum {
    public int value__;
    [ParameterAttribute]
public static RepoSearchLicense AcademicFree_3_0;
    [ParameterAttribute]
public static RepoSearchLicense Apache_2_0;
    [ParameterAttribute]
public static RepoSearchLicense Artistic_2_0;
    [ParameterAttribute]
public static RepoSearchLicense BoostSoftware_1_0;
    [ParameterAttribute]
public static RepoSearchLicense BSD0Clause;
    [ParameterAttribute]
public static RepoSearchLicense BSD2Clause;
    [ParameterAttribute]
public static RepoSearchLicense BSD3Clause;
    [ParameterAttribute]
public static RepoSearchLicense BSD3ClauseClear;
    [ParameterAttribute]
public static RepoSearchLicense BSD4Clause;
    [ParameterAttribute]
public static RepoSearchLicense CreativeCommons;
    [ParameterAttribute]
public static RepoSearchLicense CreativeCommonsZero_1_0;
    [ParameterAttribute]
public static RepoSearchLicense CreativeCommonsAtrribution_4_0;
    [ParameterAttribute]
public static RepoSearchLicense CreativeCommonsAttributionShareAlike_4_0;
    [ParameterAttribute]
public static RepoSearchLicense CeCILL_2_1;
    [ParameterAttribute]
public static RepoSearchLicense DoWhatTheFYouWant;
    [ParameterAttribute]
public static RepoSearchLicense EducationalCommunity_2_0;
    [ParameterAttribute]
public static RepoSearchLicense EclipsePublic_1_0;
    [ParameterAttribute]
public static RepoSearchLicense EclipsePublic_2_0;
    [ParameterAttribute]
public static RepoSearchLicense EuropeanUnionPublic_1_1;
    [ParameterAttribute]
public static RepoSearchLicense EuropeanUnionPublic_1_2;
    [ParameterAttribute]
public static RepoSearchLicense GNUAfferoGeneralPublic_3_0;
    [ParameterAttribute]
public static RepoSearchLicense GNUGeneralPublic;
    [ParameterAttribute]
public static RepoSearchLicense GNUGeneralPublic_2_0;
    [ParameterAttribute]
public static RepoSearchLicense GNUGeneralPublic_3_0;
    [ParameterAttribute]
public static RepoSearchLicense GNULesserGeneralPublic;
    [ParameterAttribute]
public static RepoSearchLicense GNULesserGeneralPublic_2_1;
    [ParameterAttribute]
public static RepoSearchLicense GNULesserGeneralPublic_3_0;
    [ParameterAttribute]
public static RepoSearchLicense ISC;
    [ParameterAttribute]
public static RepoSearchLicense LatexProjectPublic;
    [ParameterAttribute]
public static RepoSearchLicense MicrosoftPublic;
    [ParameterAttribute]
public static RepoSearchLicense MicrosoftReciprocal;
    [ParameterAttribute]
public static RepoSearchLicense MIT;
    [ParameterAttribute]
public static RepoSearchLicense MozillaPublic_2_0;
    [ParameterAttribute]
public static RepoSearchLicense ODCOpenDatabase;
    [ParameterAttribute]
public static RepoSearchLicense OpenSoftware_3_0;
    [ParameterAttribute]
public static RepoSearchLicense PostgreseSQL;
    [ParameterAttribute]
public static RepoSearchLicense SILOpenFont;
    [ParameterAttribute]
public static RepoSearchLicense UniversalPermissive;
    [ParameterAttribute]
public static RepoSearchLicense NSCAOpenSource;
    [ParameterAttribute]
public static RepoSearchLicense TheUnlicense;
    [ParameterAttribute]
public static RepoSearchLicense Vim;
    [ParameterAttribute]
public static RepoSearchLicense ZLib;
}
public enum Octokit.RepoSearchSort : Enum {
    public int value__;
    [ParameterAttribute]
public static RepoSearchSort Stars;
    [ParameterAttribute]
public static RepoSearchSort Forks;
    [ParameterAttribute]
public static RepoSearchSort HelpWantedIssues;
    [ParameterAttribute]
public static RepoSearchSort Updated;
}
public class Octokit.RepositoriesClient : ApiClient {
    [CompilerGeneratedAttribute]
private IRepositoryActionsClient <Actions>k__BackingField;
    [CompilerGeneratedAttribute]
private IRepositoryBranchesClient <Branch>k__BackingField;
    [CompilerGeneratedAttribute]
private ICommitStatusClient <Status>k__BackingField;
    [CompilerGeneratedAttribute]
private IRepositoryHooksClient <Hooks>k__BackingField;
    [CompilerGeneratedAttribute]
private IRepositoryForksClient <Forks>k__BackingField;
    [CompilerGeneratedAttribute]
private IRepoCollaboratorsClient <Collaborator>k__BackingField;
    [CompilerGeneratedAttribute]
private IDeploymentsClient <Deployment>k__BackingField;
    [CompilerGeneratedAttribute]
private IRepositoryDeployEnvironmentsClient <Environment>k__BackingField;
    [CompilerGeneratedAttribute]
private IStatisticsClient <Statistics>k__BackingField;
    [CompilerGeneratedAttribute]
private IRepositoryCommitsClient <Commit>k__BackingField;
    [CompilerGeneratedAttribute]
private IRepositoryCustomPropertiesClient <CustomProperty>k__BackingField;
    [CompilerGeneratedAttribute]
private IReleasesClient <Release>k__BackingField;
    [CompilerGeneratedAttribute]
private IMergingClient <Merging>k__BackingField;
    [CompilerGeneratedAttribute]
private IPullRequestsClient <PullRequest>k__BackingField;
    [CompilerGeneratedAttribute]
private IRepositoryCommentsClient <Comment>k__BackingField;
    [CompilerGeneratedAttribute]
private IRepositoryDeployKeysClient <DeployKeys>k__BackingField;
    [CompilerGeneratedAttribute]
private IRepositoryContentsClient <Content>k__BackingField;
    [CompilerGeneratedAttribute]
private IRepositoryPagesClient <Page>k__BackingField;
    [CompilerGeneratedAttribute]
private IRepositoryInvitationsClient <Invitation>k__BackingField;
    [CompilerGeneratedAttribute]
private IRepositoryTrafficClient <Traffic>k__BackingField;
    [CompilerGeneratedAttribute]
private IProjectsClient <Project>k__BackingField;
    [CompilerGeneratedAttribute]
private IAutolinksClient <Autolinks>k__BackingField;
    public IRepositoryActionsClient Actions { get; private set; }
    public IRepositoryBranchesClient Branch { get; private set; }
    public ICommitStatusClient Status { get; private set; }
    public IRepositoryHooksClient Hooks { get; private set; }
    public IRepositoryForksClient Forks { get; private set; }
    public IRepoCollaboratorsClient Collaborator { get; private set; }
    public IDeploymentsClient Deployment { get; private set; }
    public IRepositoryDeployEnvironmentsClient Environment { get; private set; }
    public IStatisticsClient Statistics { get; private set; }
    public IRepositoryCommitsClient Commit { get; private set; }
    public IRepositoryCustomPropertiesClient CustomProperty { get; private set; }
    public IReleasesClient Release { get; private set; }
    public IMergingClient Merging { get; private set; }
    public IPullRequestsClient PullRequest { get; private set; }
    public IRepositoryCommentsClient Comment { get; private set; }
    public IRepositoryDeployKeysClient DeployKeys { get; private set; }
    public IRepositoryContentsClient Content { get; private set; }
    public IRepositoryPagesClient Page { get; private set; }
    public IRepositoryInvitationsClient Invitation { get; private set; }
    public IRepositoryTrafficClient Traffic { get; private set; }
    public IProjectsClient Project { get; private set; }
    public IAutolinksClient Autolinks { get; private set; }
    public RepositoriesClient(IApiConnection apiConnection);
    [ManualRouteAttribute("POST", "/user/repos")]
public sealed virtual Task`1<Repository> Create(NewRepository newRepository);
    [ManualRouteAttribute("POST", "/orgs/{org}/repos")]
public sealed virtual Task`1<Repository> Create(string organizationLogin, NewRepository newRepository);
    [ManualRouteAttribute("POST", "/repos/{owner}/{repo}/generate")]
public sealed virtual Task`1<Repository> Generate(string templateOwner, string templateRepo, NewRepositoryFromTemplate newRepository);
    [AsyncStateMachineAttribute("Octokit.RepositoriesClient/<Create>d__4")]
private Task`1<Repository> Create(Uri url, string organizationLogin, NewRepository newRepository);
    [ManualRouteAttribute("DELETE", "/repos/{owner}/{repo}")]
public sealed virtual Task Delete(string owner, string name);
    [ManualRouteAttribute("DELETE", "/repositories/{id}")]
public sealed virtual Task Delete(long repositoryId);
    [ManualRouteAttribute("POST", "/repos/{owner}/{repo}/transfer")]
public sealed virtual Task`1<Repository> Transfer(string owner, string name, RepositoryTransfer repositoryTransfer);
    [ManualRouteAttribute("POST", "/repositories/{id}/transfer")]
public sealed virtual Task`1<Repository> Transfer(long repositoryId, RepositoryTransfer repositoryTransfer);
    [AsyncStateMachineAttribute("Octokit.RepositoriesClient/<AreVulnerabilityAlertsEnabled>d__9")]
[ManualRouteAttribute("GET", "/repos/{owner}/{repo}/vulnerability-alerts")]
public sealed virtual Task`1<bool> AreVulnerabilityAlertsEnabled(string owner, string name);
    [ManualRouteAttribute("PATCH", "/repos/{owner}/{repo}")]
public sealed virtual Task`1<Repository> Edit(string owner, string name, RepositoryUpdate update);
    [ManualRouteAttribute("PATCH", "/repositories/{id}")]
public sealed virtual Task`1<Repository> Edit(long repositoryId, RepositoryUpdate update);
    [ManualRouteAttribute("GET", "/repos/{owner}/{repo}")]
public sealed virtual Task`1<Repository> Get(string owner, string name);
    [ManualRouteAttribute("GET", "/repositories/{id}")]
public sealed virtual Task`1<Repository> Get(long repositoryId);
    [ManualRouteAttribute("GET", "/repositories")]
public sealed virtual Task`1<IReadOnlyList`1<Repository>> GetAllPublic();
    [ManualRouteAttribute("GET", "/repositories")]
public sealed virtual Task`1<IReadOnlyList`1<Repository>> GetAllPublic(PublicRepositoryRequest request);
    [ManualRouteAttribute("GET", "/user/repos")]
public sealed virtual Task`1<IReadOnlyList`1<Repository>> GetAllForCurrent();
    [ManualRouteAttribute("GET", "/user/repos")]
public sealed virtual Task`1<IReadOnlyList`1<Repository>> GetAllForCurrent(ApiOptions options);
    [ManualRouteAttribute("GET", "/user/repos")]
public sealed virtual Task`1<IReadOnlyList`1<Repository>> GetAllForCurrent(RepositoryRequest request);
    [ManualRouteAttribute("GET", "/user/repos")]
public sealed virtual Task`1<IReadOnlyList`1<Repository>> GetAllForCurrent(RepositoryRequest request, ApiOptions options);
    [ManualRouteAttribute("GET", "/user/{username}/repos")]
public sealed virtual Task`1<IReadOnlyList`1<Repository>> GetAllForUser(string login);
    [ManualRouteAttribute("GET", "/user/{username}/repos")]
public sealed virtual Task`1<IReadOnlyList`1<Repository>> GetAllForUser(string login, ApiOptions options);
    [ManualRouteAttribute("GET", "/orgs/{org}/repos")]
public sealed virtual Task`1<IReadOnlyList`1<Repository>> GetAllForOrg(string organization);
    [ManualRouteAttribute("GET", "/orgs/{org}/repos")]
public sealed virtual Task`1<IReadOnlyList`1<Repository>> GetAllForOrg(string organization, ApiOptions options);
    [CompilerGeneratedAttribute]
public sealed virtual IRepositoryActionsClient get_Actions();
    [CompilerGeneratedAttribute]
private void set_Actions(IRepositoryActionsClient value);
    [CompilerGeneratedAttribute]
public sealed virtual IRepositoryBranchesClient get_Branch();
    [CompilerGeneratedAttribute]
private void set_Branch(IRepositoryBranchesClient value);
    [CompilerGeneratedAttribute]
public sealed virtual ICommitStatusClient get_Status();
    [CompilerGeneratedAttribute]
private void set_Status(ICommitStatusClient value);
    [CompilerGeneratedAttribute]
public sealed virtual IRepositoryHooksClient get_Hooks();
    [CompilerGeneratedAttribute]
private void set_Hooks(IRepositoryHooksClient value);
    [CompilerGeneratedAttribute]
public sealed virtual IRepositoryForksClient get_Forks();
    [CompilerGeneratedAttribute]
private void set_Forks(IRepositoryForksClient value);
    [CompilerGeneratedAttribute]
public sealed virtual IRepoCollaboratorsClient get_Collaborator();
    [CompilerGeneratedAttribute]
private void set_Collaborator(IRepoCollaboratorsClient value);
    [CompilerGeneratedAttribute]
public sealed virtual IDeploymentsClient get_Deployment();
    [CompilerGeneratedAttribute]
private void set_Deployment(IDeploymentsClient value);
    [CompilerGeneratedAttribute]
public sealed virtual IRepositoryDeployEnvironmentsClient get_Environment();
    [CompilerGeneratedAttribute]
private void set_Environment(IRepositoryDeployEnvironmentsClient value);
    [CompilerGeneratedAttribute]
public sealed virtual IStatisticsClient get_Statistics();
    [CompilerGeneratedAttribute]
private void set_Statistics(IStatisticsClient value);
    [CompilerGeneratedAttribute]
public sealed virtual IRepositoryCommitsClient get_Commit();
    [CompilerGeneratedAttribute]
private void set_Commit(IRepositoryCommitsClient value);
    [CompilerGeneratedAttribute]
public sealed virtual IRepositoryCustomPropertiesClient get_CustomProperty();
    [CompilerGeneratedAttribute]
private void set_CustomProperty(IRepositoryCustomPropertiesClient value);
    [CompilerGeneratedAttribute]
public sealed virtual IReleasesClient get_Release();
    [CompilerGeneratedAttribute]
private void set_Release(IReleasesClient value);
    [CompilerGeneratedAttribute]
public sealed virtual IMergingClient get_Merging();
    [CompilerGeneratedAttribute]
private void set_Merging(IMergingClient value);
    [CompilerGeneratedAttribute]
public sealed virtual IPullRequestsClient get_PullRequest();
    [CompilerGeneratedAttribute]
private void set_PullRequest(IPullRequestsClient value);
    [CompilerGeneratedAttribute]
public sealed virtual IRepositoryCommentsClient get_Comment();
    [CompilerGeneratedAttribute]
private void set_Comment(IRepositoryCommentsClient value);
    [CompilerGeneratedAttribute]
public sealed virtual IRepositoryDeployKeysClient get_DeployKeys();
    [CompilerGeneratedAttribute]
private void set_DeployKeys(IRepositoryDeployKeysClient value);
    [CompilerGeneratedAttribute]
public sealed virtual IRepositoryContentsClient get_Content();
    [CompilerGeneratedAttribute]
private void set_Content(IRepositoryContentsClient value);
    [ManualRouteAttribute("GET", "/repos/{owner}/{repo}/contributors")]
public sealed virtual Task`1<IReadOnlyList`1<RepositoryContributor>> GetAllContributors(string owner, string name);
    [ManualRouteAttribute("GET", "/repositories/{id}/contributors")]
public sealed virtual Task`1<IReadOnlyList`1<RepositoryContributor>> GetAllContributors(long repositoryId);
    [ManualRouteAttribute("GET", "/repos/{owner}/{repo}/contributors")]
public sealed virtual Task`1<IReadOnlyList`1<RepositoryContributor>> GetAllContributors(string owner, string name, ApiOptions options);
    [ManualRouteAttribute("GET", "/repositories/{id}/contributors")]
public sealed virtual Task`1<IReadOnlyList`1<RepositoryContributor>> GetAllContributors(long repositoryId, ApiOptions options);
    [ManualRouteAttribute("GET", "/repos/{owner}/{repo}/contributors")]
public sealed virtual Task`1<IReadOnlyList`1<RepositoryContributor>> GetAllContributors(string owner, string name, bool includeAnonymous);
    [ManualRouteAttribute("GET", "/repositories/{id}/contributors")]
public sealed virtual Task`1<IReadOnlyList`1<RepositoryContributor>> GetAllContributors(long repositoryId, bool includeAnonymous);
    [ManualRouteAttribute("GET", "/repos/{owner}/{repo}/contributors")]
public sealed virtual Task`1<IReadOnlyList`1<RepositoryContributor>> GetAllContributors(string owner, string name, bool includeAnonymous, ApiOptions options);
    [ManualRouteAttribute("GET", "/repositories/{id}/contributors")]
public sealed virtual Task`1<IReadOnlyList`1<RepositoryContributor>> GetAllContributors(long repositoryId, bool includeAnonymous, ApiOptions options);
    [AsyncStateMachineAttribute("Octokit.RepositoriesClient/<GetAllTopics>d__100")]
[ManualRouteAttribute("GET", "/repositories/{id}/topics")]
public sealed virtual Task`1<RepositoryTopics> GetAllTopics(long repositoryId, ApiOptions options);
    [ManualRouteAttribute("GET", "/repositories/{id}/topics")]
public sealed virtual Task`1<RepositoryTopics> GetAllTopics(long repositoryId);
    [AsyncStateMachineAttribute("Octokit.RepositoriesClient/<GetAllTopics>d__102")]
[ManualRouteAttribute("GET", "/repos/{owner}/{repo}/topics")]
public sealed virtual Task`1<RepositoryTopics> GetAllTopics(string owner, string name, ApiOptions options);
    [ManualRouteAttribute("GET", "/repos/{owner}/{repo}/topics")]
public sealed virtual Task`1<RepositoryTopics> GetAllTopics(string owner, string name);
    [AsyncStateMachineAttribute("Octokit.RepositoriesClient/<ReplaceAllTopics>d__104")]
[ManualRouteAttribute("PUT", "/repos/{owner}/{repo}/topics")]
public sealed virtual Task`1<RepositoryTopics> ReplaceAllTopics(string owner, string name, RepositoryTopics topics);
    [AsyncStateMachineAttribute("Octokit.RepositoriesClient/<ReplaceAllTopics>d__105")]
[ManualRouteAttribute("PUT", "/repositories/{id}/topics")]
public sealed virtual Task`1<RepositoryTopics> ReplaceAllTopics(long repositoryId, RepositoryTopics topics);
    [AsyncStateMachineAttribute("Octokit.RepositoriesClient/<GetAllLanguages>d__106")]
[ManualRouteAttribute("GET", "/repos/{owner}/{repo}/languages")]
public sealed virtual Task`1<IReadOnlyList`1<RepositoryLanguage>> GetAllLanguages(string owner, string name);
    [AsyncStateMachineAttribute("Octokit.RepositoriesClient/<GetAllLanguages>d__107")]
[ManualRouteAttribute("GET", "/repositories/{id}/languages")]
public sealed virtual Task`1<IReadOnlyList`1<RepositoryLanguage>> GetAllLanguages(long repositoryId);
    [ManualRouteAttribute("GET", "/repos/{owner}/{repo}/teams")]
public sealed virtual Task`1<IReadOnlyList`1<Team>> GetAllTeams(string owner, string name);
    [ManualRouteAttribute("GET", "/repositories/{id}/teams")]
public sealed virtual Task`1<IReadOnlyList`1<Team>> GetAllTeams(long repositoryId);
    [ManualRouteAttribute("GET", "/repos/{owner}/{repo}/teams")]
public sealed virtual Task`1<IReadOnlyList`1<Team>> GetAllTeams(string owner, string name, ApiOptions options);
    [ManualRouteAttribute("GET", "/repositories/{id}/teams")]
public sealed virtual Task`1<IReadOnlyList`1<Team>> GetAllTeams(long repositoryId, ApiOptions options);
    [ManualRouteAttribute("GET", "/repos/{owner}/{repo}/tags")]
public sealed virtual Task`1<IReadOnlyList`1<RepositoryTag>> GetAllTags(string owner, string name);
    [ManualRouteAttribute("GET", "/repositories/{id}/tags")]
public sealed virtual Task`1<IReadOnlyList`1<RepositoryTag>> GetAllTags(long repositoryId);
    [ManualRouteAttribute("GET", "/repos/{owner}/{repo}/tags")]
public sealed virtual Task`1<IReadOnlyList`1<RepositoryTag>> GetAllTags(string owner, string name, ApiOptions options);
    [ManualRouteAttribute("GET", "/repositories/{id}/tags")]
public sealed virtual Task`1<IReadOnlyList`1<RepositoryTag>> GetAllTags(long repositoryId, ApiOptions options);
    [ManualRouteAttribute("GET", "/repos/{owner}/{repo}/license")]
public sealed virtual Task`1<RepositoryContentLicense> GetLicenseContents(string owner, string name);
    [ManualRouteAttribute("GET", "/repositories/{id}/license")]
public sealed virtual Task`1<RepositoryContentLicense> GetLicenseContents(long repositoryId);
    [ManualRouteAttribute("GET", "/repos/{owner}/{repo}/codeowners/errors")]
public sealed virtual Task`1<RepositoryCodeOwnersErrors> GetAllCodeOwnersErrors(string owner, string name);
    [ManualRouteAttribute("GET", "/repositories/{id}/codeowners/errors")]
public sealed virtual Task`1<RepositoryCodeOwnersErrors> GetAllCodeOwnersErrors(long repositoryId);
    [CompilerGeneratedAttribute]
public sealed virtual IRepositoryPagesClient get_Page();
    [CompilerGeneratedAttribute]
private void set_Page(IRepositoryPagesClient value);
    [CompilerGeneratedAttribute]
public sealed virtual IRepositoryInvitationsClient get_Invitation();
    [CompilerGeneratedAttribute]
private void set_Invitation(IRepositoryInvitationsClient value);
    [CompilerGeneratedAttribute]
public sealed virtual IRepositoryTrafficClient get_Traffic();
    [CompilerGeneratedAttribute]
private void set_Traffic(IRepositoryTrafficClient value);
    [CompilerGeneratedAttribute]
public sealed virtual IProjectsClient get_Project();
    [CompilerGeneratedAttribute]
private void set_Project(IProjectsClient value);
    [CompilerGeneratedAttribute]
public sealed virtual IAutolinksClient get_Autolinks();
    [CompilerGeneratedAttribute]
private void set_Autolinks(IAutolinksClient value);
}
[DebuggerDisplayAttribute("{DebuggerDisplay,nq}")]
public class Octokit.RepositoriesResponse : object {
    [CompilerGeneratedAttribute]
private int <TotalCount>k__BackingField;
    [CompilerGeneratedAttribute]
private IReadOnlyList`1<Repository> <Repositories>k__BackingField;
    public int TotalCount { get; private set; }
    public IReadOnlyList`1<Repository> Repositories { get; private set; }
    internal string DebuggerDisplay { get; }
    public RepositoriesResponse(int totalCount, IReadOnlyList`1<Repository> repositories);
    [CompilerGeneratedAttribute]
public int get_TotalCount();
    [CompilerGeneratedAttribute]
private void set_TotalCount(int value);
    [CompilerGeneratedAttribute]
public IReadOnlyList`1<Repository> get_Repositories();
    [CompilerGeneratedAttribute]
private void set_Repositories(IReadOnlyList`1<Repository> value);
    internal string get_DebuggerDisplay();
}
[DebuggerDisplayAttribute("{DebuggerDisplay,nq}")]
public class Octokit.Repository : object {
    [CompilerGeneratedAttribute]
private string <Url>k__BackingField;
    [CompilerGeneratedAttribute]
private string <HtmlUrl>k__BackingField;
    [CompilerGeneratedAttribute]
private string <CloneUrl>k__BackingField;
    [CompilerGeneratedAttribute]
private string <GitUrl>k__BackingField;
    [CompilerGeneratedAttribute]
private string <SshUrl>k__BackingField;
    [CompilerGeneratedAttribute]
private string <SvnUrl>k__BackingField;
    [CompilerGeneratedAttribute]
private string <MirrorUrl>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ArchiveUrl>k__BackingField;
    [CompilerGeneratedAttribute]
private long <Id>k__BackingField;
    [CompilerGeneratedAttribute]
private string <NodeId>k__BackingField;
    [CompilerGeneratedAttribute]
private User <Owner>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    [CompilerGeneratedAttribute]
private string <FullName>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsTemplate>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Description>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Homepage>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Language>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <Private>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <Fork>k__BackingField;
    [CompilerGeneratedAttribute]
private int <ForksCount>k__BackingField;
    [CompilerGeneratedAttribute]
private int <StargazersCount>k__BackingField;
    [CompilerGeneratedAttribute]
private int <WatchersCount>k__BackingField;
    [CompilerGeneratedAttribute]
private string <DefaultBranch>k__BackingField;
    [CompilerGeneratedAttribute]
private int <OpenIssuesCount>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<DateTimeOffset> <PushedAt>k__BackingField;
    [CompilerGeneratedAttribute]
private DateTimeOffset <CreatedAt>k__BackingField;
    [CompilerGeneratedAttribute]
private DateTimeOffset <UpdatedAt>k__BackingField;
    [CompilerGeneratedAttribute]
private RepositoryPermissions <Permissions>k__BackingField;
    [CompilerGeneratedAttribute]
private Repository <Parent>k__BackingField;
    [CompilerGeneratedAttribute]
private Repository <Source>k__BackingField;
    [CompilerGeneratedAttribute]
private LicenseMetadata <License>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <HasDiscussions>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <HasIssues>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <HasWiki>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <HasDownloads>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<bool> <AllowRebaseMerge>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<bool> <AllowSquashMerge>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<bool> <AllowMergeCommit>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <HasPages>k__BackingField;
    [CompilerGeneratedAttribute]
private int <SubscribersCount>k__BackingField;
    [CompilerGeneratedAttribute]
private long <Size>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <Archived>k__BackingField;
    [CompilerGeneratedAttribute]
private IReadOnlyList`1<string> <Topics>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<bool> <DeleteBranchOnMerge>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<RepositoryVisibility> <Visibility>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<bool> <AllowAutoMerge>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<bool> <AllowUpdateBranch>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<bool> <WebCommitSignoffRequired>k__BackingField;
    [CompilerGeneratedAttribute]
private SecurityAndAnalysis <SecurityAndAnalysis>k__BackingField;
    public string Url { get; private set; }
    public string HtmlUrl { get; private set; }
    public string CloneUrl { get; private set; }
    public string GitUrl { get; private set; }
    public string SshUrl { get; private set; }
    public string SvnUrl { get; private set; }
    public string MirrorUrl { get; private set; }
    public string ArchiveUrl { get; private set; }
    public long Id { get; private set; }
    public string NodeId { get; private set; }
    public User Owner { get; private set; }
    public string Name { get; private set; }
    public string FullName { get; private set; }
    public bool IsTemplate { get; private set; }
    public string Description { get; private set; }
    public string Homepage { get; private set; }
    public string Language { get; private set; }
    public bool Private { get; private set; }
    public bool Fork { get; private set; }
    public int ForksCount { get; private set; }
    public int StargazersCount { get; private set; }
    [ObsoleteAttribute("WatchersCount returns the same data as StargazersCount. You are likely looking to use SubscribersCount. Update your code to use SubscribersCount, as this field will stop containing data in the future")]
public int WatchersCount { get; private set; }
    public string DefaultBranch { get; private set; }
    public int OpenIssuesCount { get; private set; }
    public Nullable`1<DateTimeOffset> PushedAt { get; private set; }
    public DateTimeOffset CreatedAt { get; private set; }
    public DateTimeOffset UpdatedAt { get; private set; }
    public RepositoryPermissions Permissions { get; private set; }
    public Repository Parent { get; private set; }
    public Repository Source { get; private set; }
    public LicenseMetadata License { get; private set; }
    public bool HasDiscussions { get; private set; }
    public bool HasIssues { get; private set; }
    public bool HasWiki { get; private set; }
    public bool HasDownloads { get; private set; }
    public Nullable`1<bool> AllowRebaseMerge { get; private set; }
    public Nullable`1<bool> AllowSquashMerge { get; private set; }
    public Nullable`1<bool> AllowMergeCommit { get; private set; }
    public bool HasPages { get; private set; }
    public int SubscribersCount { get; private set; }
    public long Size { get; private set; }
    public bool Archived { get; private set; }
    public IReadOnlyList`1<string> Topics { get; private set; }
    public Nullable`1<bool> DeleteBranchOnMerge { get; private set; }
    public Nullable`1<RepositoryVisibility> Visibility { get; private set; }
    public Nullable`1<bool> AllowAutoMerge { get; private set; }
    public Nullable`1<bool> AllowUpdateBranch { get; private set; }
    public Nullable`1<bool> WebCommitSignoffRequired { get; private set; }
    public SecurityAndAnalysis SecurityAndAnalysis { get; private set; }
    internal string DebuggerDisplay { get; }
    public Repository(long id);
    public Repository(string url, string htmlUrl, string cloneUrl, string gitUrl, string sshUrl, string svnUrl, string mirrorUrl, string archiveUrl, long id, string nodeId, User owner, string name, string fullName, bool isTemplate, string description, string homepage, string language, bool private, bool fork, int forksCount, int stargazersCount, string defaultBranch, int openIssuesCount, Nullable`1<DateTimeOffset> pushedAt, DateTimeOffset createdAt, DateTimeOffset updatedAt, RepositoryPermissions permissions, Repository parent, Repository source, LicenseMetadata license, bool hasDiscussions, bool hasIssues, bool hasWiki, bool hasDownloads, bool hasPages, int subscribersCount, long size, Nullable`1<bool> allowRebaseMerge, Nullable`1<bool> allowSquashMerge, Nullable`1<bool> allowMergeCommit, bool archived, int watchersCount, Nullable`1<bool> deleteBranchOnMerge, RepositoryVisibility visibility, IEnumerable`1<string> topics, Nullable`1<bool> allowAutoMerge, Nullable`1<bool> allowUpdateBranch, Nullable`1<bool> webCommitSignoffRequired, SecurityAndAnalysis securityAndAnalysis);
    [CompilerGeneratedAttribute]
public string get_Url();
    [CompilerGeneratedAttribute]
private void set_Url(string value);
    [CompilerGeneratedAttribute]
public string get_HtmlUrl();
    [CompilerGeneratedAttribute]
private void set_HtmlUrl(string value);
    [CompilerGeneratedAttribute]
public string get_CloneUrl();
    [CompilerGeneratedAttribute]
private void set_CloneUrl(string value);
    [CompilerGeneratedAttribute]
public string get_GitUrl();
    [CompilerGeneratedAttribute]
private void set_GitUrl(string value);
    [CompilerGeneratedAttribute]
public string get_SshUrl();
    [CompilerGeneratedAttribute]
private void set_SshUrl(string value);
    [CompilerGeneratedAttribute]
public string get_SvnUrl();
    [CompilerGeneratedAttribute]
private void set_SvnUrl(string value);
    [CompilerGeneratedAttribute]
public string get_MirrorUrl();
    [CompilerGeneratedAttribute]
private void set_MirrorUrl(string value);
    [CompilerGeneratedAttribute]
public string get_ArchiveUrl();
    [CompilerGeneratedAttribute]
private void set_ArchiveUrl(string value);
    [CompilerGeneratedAttribute]
public long get_Id();
    [CompilerGeneratedAttribute]
private void set_Id(long value);
    [CompilerGeneratedAttribute]
public string get_NodeId();
    [CompilerGeneratedAttribute]
private void set_NodeId(string value);
    [CompilerGeneratedAttribute]
public User get_Owner();
    [CompilerGeneratedAttribute]
private void set_Owner(User value);
    [CompilerGeneratedAttribute]
public string get_Name();
    [CompilerGeneratedAttribute]
private void set_Name(string value);
    [CompilerGeneratedAttribute]
public string get_FullName();
    [CompilerGeneratedAttribute]
private void set_FullName(string value);
    [CompilerGeneratedAttribute]
public bool get_IsTemplate();
    [CompilerGeneratedAttribute]
private void set_IsTemplate(bool value);
    [CompilerGeneratedAttribute]
public string get_Description();
    [CompilerGeneratedAttribute]
private void set_Description(string value);
    [CompilerGeneratedAttribute]
public string get_Homepage();
    [CompilerGeneratedAttribute]
private void set_Homepage(string value);
    [CompilerGeneratedAttribute]
public string get_Language();
    [CompilerGeneratedAttribute]
private void set_Language(string value);
    [CompilerGeneratedAttribute]
public bool get_Private();
    [CompilerGeneratedAttribute]
private void set_Private(bool value);
    [CompilerGeneratedAttribute]
public bool get_Fork();
    [CompilerGeneratedAttribute]
private void set_Fork(bool value);
    [CompilerGeneratedAttribute]
public int get_ForksCount();
    [CompilerGeneratedAttribute]
private void set_ForksCount(int value);
    [CompilerGeneratedAttribute]
public int get_StargazersCount();
    [CompilerGeneratedAttribute]
private void set_StargazersCount(int value);
    [CompilerGeneratedAttribute]
public int get_WatchersCount();
    [CompilerGeneratedAttribute]
private void set_WatchersCount(int value);
    [CompilerGeneratedAttribute]
public string get_DefaultBranch();
    [CompilerGeneratedAttribute]
private void set_DefaultBranch(string value);
    [CompilerGeneratedAttribute]
public int get_OpenIssuesCount();
    [CompilerGeneratedAttribute]
private void set_OpenIssuesCount(int value);
    [CompilerGeneratedAttribute]
public Nullable`1<DateTimeOffset> get_PushedAt();
    [CompilerGeneratedAttribute]
private void set_PushedAt(Nullable`1<DateTimeOffset> value);
    [CompilerGeneratedAttribute]
public DateTimeOffset get_CreatedAt();
    [CompilerGeneratedAttribute]
private void set_CreatedAt(DateTimeOffset value);
    [CompilerGeneratedAttribute]
public DateTimeOffset get_UpdatedAt();
    [CompilerGeneratedAttribute]
private void set_UpdatedAt(DateTimeOffset value);
    [CompilerGeneratedAttribute]
public RepositoryPermissions get_Permissions();
    [CompilerGeneratedAttribute]
private void set_Permissions(RepositoryPermissions value);
    [CompilerGeneratedAttribute]
public Repository get_Parent();
    [CompilerGeneratedAttribute]
private void set_Parent(Repository value);
    [CompilerGeneratedAttribute]
public Repository get_Source();
    [CompilerGeneratedAttribute]
private void set_Source(Repository value);
    [CompilerGeneratedAttribute]
public LicenseMetadata get_License();
    [CompilerGeneratedAttribute]
private void set_License(LicenseMetadata value);
    [CompilerGeneratedAttribute]
public bool get_HasDiscussions();
    [CompilerGeneratedAttribute]
private void set_HasDiscussions(bool value);
    [CompilerGeneratedAttribute]
public bool get_HasIssues();
    [CompilerGeneratedAttribute]
private void set_HasIssues(bool value);
    [CompilerGeneratedAttribute]
public bool get_HasWiki();
    [CompilerGeneratedAttribute]
private void set_HasWiki(bool value);
    [CompilerGeneratedAttribute]
public bool get_HasDownloads();
    [CompilerGeneratedAttribute]
private void set_HasDownloads(bool value);
    [CompilerGeneratedAttribute]
public Nullable`1<bool> get_AllowRebaseMerge();
    [CompilerGeneratedAttribute]
private void set_AllowRebaseMerge(Nullable`1<bool> value);
    [CompilerGeneratedAttribute]
public Nullable`1<bool> get_AllowSquashMerge();
    [CompilerGeneratedAttribute]
private void set_AllowSquashMerge(Nullable`1<bool> value);
    [CompilerGeneratedAttribute]
public Nullable`1<bool> get_AllowMergeCommit();
    [CompilerGeneratedAttribute]
private void set_AllowMergeCommit(Nullable`1<bool> value);
    [CompilerGeneratedAttribute]
public bool get_HasPages();
    [CompilerGeneratedAttribute]
private void set_HasPages(bool value);
    [CompilerGeneratedAttribute]
public int get_SubscribersCount();
    [CompilerGeneratedAttribute]
private void set_SubscribersCount(int value);
    [CompilerGeneratedAttribute]
public long get_Size();
    [CompilerGeneratedAttribute]
private void set_Size(long value);
    [CompilerGeneratedAttribute]
public bool get_Archived();
    [CompilerGeneratedAttribute]
private void set_Archived(bool value);
    [CompilerGeneratedAttribute]
public IReadOnlyList`1<string> get_Topics();
    [CompilerGeneratedAttribute]
private void set_Topics(IReadOnlyList`1<string> value);
    [CompilerGeneratedAttribute]
public Nullable`1<bool> get_DeleteBranchOnMerge();
    [CompilerGeneratedAttribute]
private void set_DeleteBranchOnMerge(Nullable`1<bool> value);
    [CompilerGeneratedAttribute]
public Nullable`1<RepositoryVisibility> get_Visibility();
    [CompilerGeneratedAttribute]
private void set_Visibility(Nullable`1<RepositoryVisibility> value);
    [CompilerGeneratedAttribute]
public Nullable`1<bool> get_AllowAutoMerge();
    [CompilerGeneratedAttribute]
private void set_AllowAutoMerge(Nullable`1<bool> value);
    [CompilerGeneratedAttribute]
public Nullable`1<bool> get_AllowUpdateBranch();
    [CompilerGeneratedAttribute]
private void set_AllowUpdateBranch(Nullable`1<bool> value);
    [CompilerGeneratedAttribute]
public Nullable`1<bool> get_WebCommitSignoffRequired();
    [CompilerGeneratedAttribute]
private void set_WebCommitSignoffRequired(Nullable`1<bool> value);
    [CompilerGeneratedAttribute]
public SecurityAndAnalysis get_SecurityAndAnalysis();
    [CompilerGeneratedAttribute]
private void set_SecurityAndAnalysis(SecurityAndAnalysis value);
    internal string get_DebuggerDisplay();
}
public class Octokit.RepositoryActionsClient : ApiClient {
    [CompilerGeneratedAttribute]
private IRepositorySecretsClient <Secrets>k__BackingField;
    [CompilerGeneratedAttribute]
private IRepositoryVariablesClient <Variables>k__BackingField;
    public IRepositorySecretsClient Secrets { get; public set; }
    public IRepositoryVariablesClient Variables { get; public set; }
    public RepositoryActionsClient(IApiConnection apiConnection);
    [CompilerGeneratedAttribute]
public sealed virtual IRepositorySecretsClient get_Secrets();
    [CompilerGeneratedAttribute]
public void set_Secrets(IRepositorySecretsClient value);
    [CompilerGeneratedAttribute]
public sealed virtual IRepositoryVariablesClient get_Variables();
    [CompilerGeneratedAttribute]
public void set_Variables(IRepositoryVariablesClient value);
}
public enum Octokit.RepositoryAffiliation : Enum {
    public int value__;
    [ParameterAttribute]
public static RepositoryAffiliation Owner;
    [ParameterAttribute]
public static RepositoryAffiliation Collaborator;
    [ParameterAttribute]
public static RepositoryAffiliation OrganizationMember;
    [ParameterAttribute]
public static RepositoryAffiliation OwnerAndCollaborator;
    [ParameterAttribute]
public static RepositoryAffiliation OwnerAndOrganizationMember;
    [ParameterAttribute]
public static RepositoryAffiliation CollaboratorAndOrganizationMember;
    [ParameterAttribute]
public static RepositoryAffiliation All;
}
public class Octokit.RepositoryBranchesClient : ApiClient {
    public RepositoryBranchesClient(IApiConnection apiConnection);
    [ManualRouteAttribute("GET", "/repos/{owner}/{repo}/branches")]
public sealed virtual Task`1<IReadOnlyList`1<Branch>> GetAll(string owner, string name);
    [ManualRouteAttribute("GET", "/repositories/{id}/branches")]
public sealed virtual Task`1<IReadOnlyList`1<Branch>> GetAll(long repositoryId);
    [ManualRouteAttribute("GET", "/repos/{owner}/{repo}/branches")]
public sealed virtual Task`1<IReadOnlyList`1<Branch>> GetAll(string owner, string name, ApiOptions options);
    [ManualRouteAttribute("GET", "/repositories/{id}/branches")]
public sealed virtual Task`1<IReadOnlyList`1<Branch>> GetAll(long repositoryId, ApiOptions options);
    [ManualRouteAttribute("GET", "/repos/{owner}/{repo}/branches/{branch}")]
public sealed virtual Task`1<Branch> Get(string owner, string name, string branch);
    [ManualRouteAttribute("GET", "/repositories/{id}/branches/{branch}")]
public sealed virtual Task`1<Branch> Get(long repositoryId, string branch);
    [ManualRouteAttribute("GET", "/repos/{owner}/{repo}/branches/{branch}/protection")]
public sealed virtual Task`1<BranchProtectionSettings> GetBranchProtection(string owner, string name, string branch);
    [ManualRouteAttribute("GET", "/repositories/{id}/branches/{branch}/protection")]
public sealed virtual Task`1<BranchProtectionSettings> GetBranchProtection(long repositoryId, string branch);
    [ManualRouteAttribute("PUT", "/repos/{owner}/{repo}/branches/{branch}/protection")]
public sealed virtual Task`1<BranchProtectionSettings> UpdateBranchProtection(string owner, string name, string branch, BranchProtectionSettingsUpdate update);
    [ManualRouteAttribute("PUT", "/repositories/{id}/branches/{branch}/protection")]
public sealed virtual Task`1<BranchProtectionSettings> UpdateBranchProtection(long repositoryId, string branch, BranchProtectionSettingsUpdate update);
    [AsyncStateMachineAttribute("Octokit.RepositoryBranchesClient/<DeleteBranchProtection>d__11")]
[ManualRouteAttribute("DELETE", "/repos/{owner}/{repo}/branches/{branch}/protection")]
public sealed virtual Task`1<bool> DeleteBranchProtection(string owner, string name, string branch);
    [AsyncStateMachineAttribute("Octokit.RepositoryBranchesClient/<DeleteBranchProtection>d__12")]
[ManualRouteAttribute("DELETE", "/repositories/{id}/branches/{branch}/protection")]
public sealed virtual Task`1<bool> DeleteBranchProtection(long repositoryId, string branch);
    [ManualRouteAttribute("GET", "/repos/{owner}/{repo}/branches/{branch}/protection/required_status_checks")]
public sealed virtual Task`1<BranchProtectionRequiredStatusChecks> GetRequiredStatusChecks(string owner, string name, string branch);
    [ManualRouteAttribute("GET", "/repositories/{id}/branches/{branch}/protection/required_status_checks")]
public sealed virtual Task`1<BranchProtectionRequiredStatusChecks> GetRequiredStatusChecks(long repositoryId, string branch);
    [ManualRouteAttribute("PATCH", "/repos/{owner}/{repo}/branches/{branch}/protection/required_status_checks")]
public sealed virtual Task`1<BranchProtectionRequiredStatusChecks> UpdateRequiredStatusChecks(string owner, string name, string branch, BranchProtectionRequiredStatusChecksUpdate update);
    [ManualRouteAttribute("PATCH", "/repositories/{id}/branches/{branch}/protection/required_status_checks")]
public sealed virtual Task`1<BranchProtectionRequiredStatusChecks> UpdateRequiredStatusChecks(long repositoryId, string branch, BranchProtectionRequiredStatusChecksUpdate update);
    [AsyncStateMachineAttribute("Octokit.RepositoryBranchesClient/<DeleteRequiredStatusChecks>d__17")]
[ManualRouteAttribute("DELETE", "/repos/{owner}/{repo}/branches/{branch}/protection/required_status_checks")]
public sealed virtual Task`1<bool> DeleteRequiredStatusChecks(string owner, string name, string branch);
    [AsyncStateMachineAttribute("Octokit.RepositoryBranchesClient/<DeleteRequiredStatusChecks>d__18")]
[ManualRouteAttribute("DELETE", "/repositories/{id}/branches/{branch}/protection/required_status_checks")]
public sealed virtual Task`1<bool> DeleteRequiredStatusChecks(long repositoryId, string branch);
    [ManualRouteAttribute("GET", "/repos/{owner}/{repo}/branches/{branch}/protection/required_status_checks/contexts")]
public sealed virtual Task`1<IReadOnlyList`1<string>> GetAllRequiredStatusChecksContexts(string owner, string name, string branch);
    [ManualRouteAttribute("GET", "/repositories/{id}/branches/{branch}/protection/required_status_checks/contexts")]
public sealed virtual Task`1<IReadOnlyList`1<string>> GetAllRequiredStatusChecksContexts(long repositoryId, string branch);
    [ManualRouteAttribute("PUT", "/repos/{owner}/{repo}/branches/{branch}/protection/required_status_checks/contexts")]
public sealed virtual Task`1<IReadOnlyList`1<string>> UpdateRequiredStatusChecksContexts(string owner, string name, string branch, IReadOnlyList`1<string> contexts);
    [ManualRouteAttribute("PUT", "/repositories/{id}/branches/{branch}/protection/required_status_checks/contexts")]
public sealed virtual Task`1<IReadOnlyList`1<string>> UpdateRequiredStatusChecksContexts(long repositoryId, string branch, IReadOnlyList`1<string> contexts);
    [ManualRouteAttribute("POST", "/repos/{owner}/{repo}/branches/{branch}/protection/required_status_checks/contexts")]
public sealed virtual Task`1<IReadOnlyList`1<string>> AddRequiredStatusChecksContexts(string owner, string name, string branch, IReadOnlyList`1<string> contexts);
    [ManualRouteAttribute("POST", "/repositories/{id}/branches/{branch}/protection/required_status_checks/contexts")]
public sealed virtual Task`1<IReadOnlyList`1<string>> AddRequiredStatusChecksContexts(long repositoryId, string branch, IReadOnlyList`1<string> contexts);
    [ManualRouteAttribute("DELETE", "/repos/{owner}/{repo}/branches/{branch}/protection/required_status_checks/contexts")]
public sealed virtual Task`1<IReadOnlyList`1<string>> DeleteRequiredStatusChecksContexts(string owner, string name, string branch, IReadOnlyList`1<string> contexts);
    [ManualRouteAttribute("DELETE", "/repositories/{id}/branches/{branch}/protection/required_status_checks/contexts")]
public sealed virtual Task`1<IReadOnlyList`1<string>> DeleteRequiredStatusChecksContexts(long repositoryId, string branch, IReadOnlyList`1<string> contexts);
    [ManualRouteAttribute("GET", "/repos/{owner}/{repo}/branches/{branch}/protection/required_pull_request_reviews")]
public sealed virtual Task`1<BranchProtectionRequiredReviews> GetReviewEnforcement(string owner, string name, string branch);
    [ManualRouteAttribute("GET", "/repositories/{id}/branches/{branch}/protection/required_pull_request_reviews")]
public sealed virtual Task`1<BranchProtectionRequiredReviews> GetReviewEnforcement(long repositoryId, string branch);
    [ManualRouteAttribute("PATCH", "/repos/{owner}/{repo}/branches/{branch}/protection/required_pull_request_reviews")]
public sealed virtual Task`1<BranchProtectionRequiredReviews> UpdateReviewEnforcement(string owner, string name, string branch, BranchProtectionRequiredReviewsUpdate update);
    [ManualRouteAttribute("GET", "/repositories/{id}/branches/{branch}/protection/required_pull_request_reviews")]
public sealed virtual Task`1<BranchProtectionRequiredReviews> UpdateReviewEnforcement(long repositoryId, string branch, BranchProtectionRequiredReviewsUpdate update);
    [AsyncStateMachineAttribute("Octokit.RepositoryBranchesClient/<RemoveReviewEnforcement>d__31")]
[ManualRouteAttribute("DELETE", "/repos/{owner}/{repo}/branches/{branch}/protection/required_pull_request_reviews")]
public sealed virtual Task`1<bool> RemoveReviewEnforcement(string owner, string name, string branch);
    [AsyncStateMachineAttribute("Octokit.RepositoryBranchesClient/<RemoveReviewEnforcement>d__32")]
[ManualRouteAttribute("DELETE", "/repositories/{id}/branches/{branch}/protection/required_pull_request_reviews")]
public sealed virtual Task`1<bool> RemoveReviewEnforcement(long repositoryId, string branch);
    [ManualRouteAttribute("GET", "/repos/{owner}/{repo}/branches/{branch}/protection/enforce_admins")]
public sealed virtual Task`1<EnforceAdmins> GetAdminEnforcement(string owner, string name, string branch);
    [ManualRouteAttribute("GET", "/repositories/{id}/branches/{branch}/protection/enforce_admins")]
public sealed virtual Task`1<EnforceAdmins> GetAdminEnforcement(long repositoryId, string branch);
    [ManualRouteAttribute("POST", "/repos/{owner}/{repo}/branches/{branch}/protection/enforce_admins")]
public sealed virtual Task`1<EnforceAdmins> AddAdminEnforcement(string owner, string name, string branch);
    [ManualRouteAttribute("POST", "/repositories/{id}/branches/{branch}/protection/enforce_admins")]
public sealed virtual Task`1<EnforceAdmins> AddAdminEnforcement(long repositoryId, string branch);
    [AsyncStateMachineAttribute("Octokit.RepositoryBranchesClient/<RemoveAdminEnforcement>d__37")]
[ManualRouteAttribute("DELETE", "/repos/{owner}/{repo}/branches/{branch}/protection/enforce_admins")]
public sealed virtual Task`1<bool> RemoveAdminEnforcement(string owner, string name, string branch);
    [AsyncStateMachineAttribute("Octokit.RepositoryBranchesClient/<RemoveAdminEnforcement>d__38")]
[ManualRouteAttribute("DELETE", "/repositories/{id}/branches/{branch}/protection/enforce_admins")]
public sealed virtual Task`1<bool> RemoveAdminEnforcement(long repositoryId, string branch);
    [ManualRouteAttribute("GET", "/repos/{owner}/{repo}/branches/{branch}/protection/restrictions")]
public sealed virtual Task`1<BranchProtectionPushRestrictions> GetProtectedBranchRestrictions(string owner, string name, string branch);
    [ManualRouteAttribute("GET", "/repositories/{id}/branches/{branch}/protection/restrictions")]
public sealed virtual Task`1<BranchProtectionPushRestrictions> GetProtectedBranchRestrictions(long repositoryId, string branch);
    [AsyncStateMachineAttribute("Octokit.RepositoryBranchesClient/<DeleteProtectedBranchRestrictions>d__41")]
[ManualRouteAttribute("DELETE", "/repos/{owner}/{repo}/branches/{branch}/protection/restrictions")]
public sealed virtual Task`1<bool> DeleteProtectedBranchRestrictions(string owner, string name, string branch);
    [AsyncStateMachineAttribute("Octokit.RepositoryBranchesClient/<DeleteProtectedBranchRestrictions>d__42")]
[ManualRouteAttribute("DELETE", "/repositories/{id}/branches/{branch}/protection/restrictions")]
public sealed virtual Task`1<bool> DeleteProtectedBranchRestrictions(long repositoryId, string branch);
    [ManualRouteAttribute("GET", "/repos/{owner}/{repo}/branches/{branch}/protection/restrictions/teams")]
public sealed virtual Task`1<IReadOnlyList`1<Team>> GetAllProtectedBranchTeamRestrictions(string owner, string name, string branch);
    [ManualRouteAttribute("GET", "/repositories/{id}/branches/{branch}/protection/restrictions/teams")]
public sealed virtual Task`1<IReadOnlyList`1<Team>> GetAllProtectedBranchTeamRestrictions(long repositoryId, string branch);
    [ManualRouteAttribute("PUT", "/repos/{owner}/{repo}/branches/{branch}/protection/restrictions/teams")]
public sealed virtual Task`1<IReadOnlyList`1<Team>> UpdateProtectedBranchTeamRestrictions(string owner, string name, string branch, BranchProtectionTeamCollection teams);
    [ManualRouteAttribute("PUT", "/repositories/{id}/branches/{branch}/protection/restrictions/teams")]
public sealed virtual Task`1<IReadOnlyList`1<Team>> UpdateProtectedBranchTeamRestrictions(long repositoryId, string branch, BranchProtectionTeamCollection teams);
    [ManualRouteAttribute("POST", "/repos/{owner}/{repo}/branches/{branch}/protection/restrictions/teams")]
public sealed virtual Task`1<IReadOnlyList`1<Team>> AddProtectedBranchTeamRestrictions(string owner, string name, string branch, BranchProtectionTeamCollection teams);
    [ManualRouteAttribute("POST", "/repositories/{id}/branches/{branch}/protection/restrictions/teams")]
public sealed virtual Task`1<IReadOnlyList`1<Team>> AddProtectedBranchTeamRestrictions(long repositoryId, string branch, BranchProtectionTeamCollection teams);
    [ManualRouteAttribute("DELETE", "/repos/{owner}/{repo}/branches/{branch}/protection/restrictions/teams")]
public sealed virtual Task`1<IReadOnlyList`1<Team>> DeleteProtectedBranchTeamRestrictions(string owner, string name, string branch, BranchProtectionTeamCollection teams);
    [ManualRouteAttribute("DELETE", "/repositories/{id}/branches/{branch}/protection/restrictions/teams")]
public sealed virtual Task`1<IReadOnlyList`1<Team>> DeleteProtectedBranchTeamRestrictions(long repositoryId, string branch, BranchProtectionTeamCollection teams);
    [ManualRouteAttribute("GET", "/repos/{owner}/{repo}/branches/{branch}/protection/restrictions/users")]
public sealed virtual Task`1<IReadOnlyList`1<User>> GetAllProtectedBranchUserRestrictions(string owner, string name, string branch);
    [ManualRouteAttribute("GET", "/repositories/{id}/branches/{branch}/protection/restrictions/users")]
public sealed virtual Task`1<IReadOnlyList`1<User>> GetAllProtectedBranchUserRestrictions(long repositoryId, string branch);
    [ManualRouteAttribute("UPDATE", "/repos/{owner}/{repo}/branches/{branch}/protection/restrictions/users")]
public sealed virtual Task`1<IReadOnlyList`1<User>> UpdateProtectedBranchUserRestrictions(string owner, string name, string branch, BranchProtectionUserCollection users);
    [ManualRouteAttribute("PUT", "/repositories/{id}/branches/{branch}/protection/restrictions/users")]
public sealed virtual Task`1<IReadOnlyList`1<User>> UpdateProtectedBranchUserRestrictions(long repositoryId, string branch, BranchProtectionUserCollection users);
    [ManualRouteAttribute("POST", "/repos/{owner}/{repo}/branches/{branch}/protection/restrictions/users")]
public sealed virtual Task`1<IReadOnlyList`1<User>> AddProtectedBranchUserRestrictions(string owner, string name, string branch, BranchProtectionUserCollection users);
    [ManualRouteAttribute("POST", "/repositories/{id}/branches/{branch}/protection/restrictions/users")]
public sealed virtual Task`1<IReadOnlyList`1<User>> AddProtectedBranchUserRestrictions(long repositoryId, string branch, BranchProtectionUserCollection users);
    [ManualRouteAttribute("DELETE", "/repos/{owner}/{repo}/branches/{branch}/protection/restrictions/users")]
public sealed virtual Task`1<IReadOnlyList`1<User>> DeleteProtectedBranchUserRestrictions(string owner, string name, string branch, BranchProtectionUserCollection users);
    [ManualRouteAttribute("DELETE", "/repositories/{id}/branches/{branch}/protection/restrictions/users")]
public sealed virtual Task`1<IReadOnlyList`1<User>> DeleteProtectedBranchUserRestrictions(long repositoryId, string branch, BranchProtectionUserCollection users);
    [ManualRouteAttribute("POST", "/repos/{owner}/{repo}/branches/{branch}/rename")]
public sealed virtual Task`1<Branch> RenameBranch(string owner, string repository, string branch, string newName);
}
[DebuggerDisplayAttribute("{DebuggerDisplay,nq}")]
public class Octokit.RepositoryCodeOwnersErrors : object {
    [CompilerGeneratedAttribute]
private IReadOnlyList`1<RepositoryCodeOwnersError> <Errors>k__BackingField;
    public IReadOnlyList`1<RepositoryCodeOwnersError> Errors { get; private set; }
    internal string DebuggerDisplay { get; }
    public RepositoryCodeOwnersErrors(List`1<RepositoryCodeOwnersError> errors);
    [CompilerGeneratedAttribute]
public IReadOnlyList`1<RepositoryCodeOwnersError> get_Errors();
    [CompilerGeneratedAttribute]
private void set_Errors(IReadOnlyList`1<RepositoryCodeOwnersError> value);
    internal string get_DebuggerDisplay();
}
[DebuggerDisplayAttribute("{DebuggerDisplay,nq}")]
public class Octokit.RepositoryCollaboratorListRequest : RequestParameters {
    [CompilerGeneratedAttribute]
private CollaboratorAffiliation <Affiliation>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<CollaboratorPermission> <Permission>k__BackingField;
    public CollaboratorAffiliation Affiliation { get; public set; }
    public Nullable`1<CollaboratorPermission> Permission { get; public set; }
    internal string DebuggerDisplay { get; }
    [CompilerGeneratedAttribute]
public CollaboratorAffiliation get_Affiliation();
    [CompilerGeneratedAttribute]
public void set_Affiliation(CollaboratorAffiliation value);
    [CompilerGeneratedAttribute]
public Nullable`1<CollaboratorPermission> get_Permission();
    [CompilerGeneratedAttribute]
public void set_Permission(Nullable`1<CollaboratorPermission> value);
    internal string get_DebuggerDisplay();
}
[DebuggerDisplayAttribute("{DebuggerDisplay,nq}")]
public class Octokit.RepositoryCollection : Collection`1<string> {
    internal string DebuggerDisplay { get; }
    public void Add(string owner, string name);
    public bool Contains(string owner, string name);
    public bool Remove(string owner, string name);
    private static string GetRepositoryName(string owner, string name);
    internal string get_DebuggerDisplay();
}
public class Octokit.RepositoryCommentsClient : ApiClient {
    public RepositoryCommentsClient(IApiConnection apiConnection);
    [ManualRouteAttribute("GET", "/repos/{owner}/{repo}/comments/{comment_id}")]
public sealed virtual Task`1<CommitComment> Get(string owner, string name, long commentId);
    [ManualRouteAttribute("GET", "/repositories/{id}/comments/{number}")]
public sealed virtual Task`1<CommitComment> Get(long repositoryId, long commentId);
    [ManualRouteAttribute("GET", "/repos/{owner}/{repo}/comments")]
public sealed virtual Task`1<IReadOnlyList`1<CommitComment>> GetAllForRepository(string owner, string name);
    [ManualRouteAttribute("GET", "/repositories/{id}/comments")]
public sealed virtual Task`1<IReadOnlyList`1<CommitComment>> GetAllForRepository(long repositoryId);
    [ManualRouteAttribute("GET", "/repos/{owner}/{repo}/comments")]
public sealed virtual Task`1<IReadOnlyList`1<CommitComment>> GetAllForRepository(string owner, string name, ApiOptions options);
    [ManualRouteAttribute("GET", "/repositories/{id}/comments")]
public sealed virtual Task`1<IReadOnlyList`1<CommitComment>> GetAllForRepository(long repositoryId, ApiOptions options);
    [ManualRouteAttribute("GET", "/repos/{owner}/{repo}/commits/{commit_sha}/comments")]
public sealed virtual Task`1<IReadOnlyList`1<CommitComment>> GetAllForCommit(string owner, string name, string sha);
    [ManualRouteAttribute("GET", "/repositories/{id}/commits/{commit_sha}/comments")]
public sealed virtual Task`1<IReadOnlyList`1<CommitComment>> GetAllForCommit(long repositoryId, string sha);
    [ManualRouteAttribute("GET", "/repos/{owner}/{repo}/commits/{commit_sha}/comments")]
public sealed virtual Task`1<IReadOnlyList`1<CommitComment>> GetAllForCommit(string owner, string name, string sha, ApiOptions options);
    [ManualRouteAttribute("GET", "/repositories/{id}/commits/{commit_sha}/comments")]
public sealed virtual Task`1<IReadOnlyList`1<CommitComment>> GetAllForCommit(long repositoryId, string sha, ApiOptions options);
    [ManualRouteAttribute("POST", "/repos/{owner}/{repo}/commits/{commit_sha}/comments")]
public sealed virtual Task`1<CommitComment> Create(string owner, string name, string sha, NewCommitComment newCommitComment);
    [ManualRouteAttribute("POST", "/repositories/{id}/commits/{commit_sha}/comments")]
public sealed virtual Task`1<CommitComment> Create(long repositoryId, string sha, NewCommitComment newCommitComment);
    [ManualRouteAttribute("PATCH", "/repos/{owner}/{repo}/comments/{comment_id}")]
public sealed virtual Task`1<CommitComment> Update(string owner, string name, long commentId, string commentUpdate);
    [ManualRouteAttribute("PATCH", "/repositories/{id}/comments/{number}")]
public sealed virtual Task`1<CommitComment> Update(long repositoryId, long commentId, string commentUpdate);
    [ManualRouteAttribute("DELETE", "/repos/{owner}/{repo}/comments/{comment_id}")]
public sealed virtual Task Delete(string owner, string name, long commentId);
    [ManualRouteAttribute("DELETE", "/repositories/{id}/comments/{number}")]
public sealed virtual Task Delete(long repositoryId, long commentId);
}
public class Octokit.RepositoryCommitsClient : ApiClient {
    public RepositoryCommitsClient(IApiConnection apiConnection);
    [ManualRouteAttribute("GET", "/repositories/{id}/commits/{commit_sha}/branches-where-head")]
public sealed virtual Task`1<IReadOnlyList`1<Branch>> BranchesWhereHead(long repositoryId, string sha1);
    [ManualRouteAttribute("GET", "/repositories/{id}/commits/{commit_sha}/branches-where-head")]
public sealed virtual Task`1<IReadOnlyList`1<Branch>> BranchesWhereHead(long repositoryId, string sha1, ApiOptions options);
    [ManualRouteAttribute("GET", "/repos/{owner}/{repo}/commits/{commit_sha}/branches-where-head")]
public sealed virtual Task`1<IReadOnlyList`1<Branch>> BranchesWhereHead(string owner, string name, string sha1);
    [ManualRouteAttribute("GET", "/repos/{owner}/{repo}/commits/{commit_sha}/branches-where-head")]
public sealed virtual Task`1<IReadOnlyList`1<Branch>> BranchesWhereHead(string owner, string name, string sha1, ApiOptions options);
    [ManualRouteAttribute("GET", "/repos/{owner}/{repo}/compare/{base}...{head}")]
public sealed virtual Task`1<CompareResult> Compare(string owner, string name, string base, string head);
    [ManualRouteAttribute("GET", "/repositories/{id}/compare/{base}...{head}")]
public sealed virtual Task`1<CompareResult> Compare(long repositoryId, string base, string head);
    [ManualRouteAttribute("GET", "/repos/{owner}/{repo}/compare/{base}...{head}")]
public sealed virtual Task`1<CompareResult> Compare(string owner, string name, string base, string head, ApiOptions options);
    [ManualRouteAttribute("GET", "/repositories/{id}/compare/{base}...{head}")]
public sealed virtual Task`1<CompareResult> Compare(long repositoryId, string base, string head, ApiOptions options);
    [AsyncStateMachineAttribute("Octokit.RepositoryCommitsClient/<Compare>d__9")]
private Task`1<CompareResult> Compare(Uri uri, ApiOptions options);
    [ManualRouteAttribute("GET", "/repos/{owner}/{repo}/commits/{commit_sha}")]
public sealed virtual Task`1<GitHubCommit> Get(string owner, string name, string reference);
    [ManualRouteAttribute("GET", "/repositories/{id}/commits/{commit_sha}")]
public sealed virtual Task`1<GitHubCommit> Get(long repositoryId, string reference);
    [ManualRouteAttribute("GET", "/repos/{owner}/{repo}/commits")]
public sealed virtual Task`1<IReadOnlyList`1<GitHubCommit>> GetAll(string owner, string name);
    [ManualRouteAttribute("GET", "/repositories/{id}/commits")]
public sealed virtual Task`1<IReadOnlyList`1<GitHubCommit>> GetAll(long repositoryId);
    [ManualRouteAttribute("GET", "/repos/{owner}/{repo}/commits")]
public sealed virtual Task`1<IReadOnlyList`1<GitHubCommit>> GetAll(string owner, string name, ApiOptions options);
    [ManualRouteAttribute("GET", "/repositories/{id}/commits")]
public sealed virtual Task`1<IReadOnlyList`1<GitHubCommit>> GetAll(long repositoryId, ApiOptions options);
    [ManualRouteAttribute("GET", "/repos/{owner}/{repo}/commits")]
public sealed virtual Task`1<IReadOnlyList`1<GitHubCommit>> GetAll(string owner, string name, CommitRequest request);
    [ManualRouteAttribute("GET", "/repositories/{id}/commits")]
public sealed virtual Task`1<IReadOnlyList`1<GitHubCommit>> GetAll(long repositoryId, CommitRequest request);
    [ManualRouteAttribute("GET", "/repos/{owner}/{repo}/commits")]
public sealed virtual Task`1<IReadOnlyList`1<GitHubCommit>> GetAll(string owner, string name, CommitRequest request, ApiOptions options);
    [ManualRouteAttribute("GET", "/repositories/{id}/commits")]
public sealed virtual Task`1<IReadOnlyList`1<GitHubCommit>> GetAll(long repositoryId, CommitRequest request, ApiOptions options);
    [ManualRouteAttribute("GET", "/repos/{owner}/{repo}/commits/{commit_sha}")]
public sealed virtual Task`1<string> GetSha1(string owner, string name, string reference);
    [ManualRouteAttribute("GET", "/repositories/{id}/commits/{commit_sha}")]
public sealed virtual Task`1<string> GetSha1(long repositoryId, string reference);
    [ManualRouteAttribute("GET", "/repositories/{id}/commits/{commit_sha}/pulls")]
public sealed virtual Task`1<IReadOnlyList`1<CommitPullRequest>> PullRequests(long repositoryId, string sha1);
    [ManualRouteAttribute("GET", "/repositories/{id}/commits/{commit_sha}/pulls")]
public sealed virtual Task`1<IReadOnlyList`1<CommitPullRequest>> PullRequests(long repositoryId, string sha1, ApiOptions options);
    [ManualRouteAttribute("GET", "/repos/{owner}/{repo}/commits/{commit_sha}/pulls")]
public sealed virtual Task`1<IReadOnlyList`1<CommitPullRequest>> PullRequests(string owner, string name, string sha1);
    [ManualRouteAttribute("GET", "/repos/{owner}/{repo}/commits/{commit_sha}/pulls")]
public sealed virtual Task`1<IReadOnlyList`1<CommitPullRequest>> PullRequests(string owner, string name, string sha1, ApiOptions options);
}
[DebuggerDisplayAttribute("{DebuggerDisplay,nq}")]
public class Octokit.RepositoryContent : RepositoryContentInfo {
    [CompilerGeneratedAttribute]
private string <Encoding>k__BackingField;
    [CompilerGeneratedAttribute]
private string <EncodedContent>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Target>k__BackingField;
    [CompilerGeneratedAttribute]
private string <SubmoduleGitUrl>k__BackingField;
    public string Encoding { get; private set; }
    [ParameterAttribute]
public string EncodedContent { get; private set; }
    public string Content { get; }
    public string Target { get; private set; }
    public string SubmoduleGitUrl { get; private set; }
    public RepositoryContent(string name, string path, string sha, int size, ContentType type, string downloadUrl, string url, string gitUrl, string htmlUrl, string encoding, string encodedContent, string target, string submoduleGitUrl);
    [CompilerGeneratedAttribute]
public string get_Encoding();
    [CompilerGeneratedAttribute]
private void set_Encoding(string value);
    [CompilerGeneratedAttribute]
public string get_EncodedContent();
    [CompilerGeneratedAttribute]
private void set_EncodedContent(string value);
    public string get_Content();
    [CompilerGeneratedAttribute]
public string get_Target();
    [CompilerGeneratedAttribute]
private void set_Target(string value);
    [CompilerGeneratedAttribute]
public string get_SubmoduleGitUrl();
    [CompilerGeneratedAttribute]
private void set_SubmoduleGitUrl(string value);
}
[DebuggerDisplayAttribute("{DebuggerDisplay,nq}")]
public class Octokit.RepositoryContentChangeSet : object {
    [CompilerGeneratedAttribute]
private RepositoryContentInfo <Content>k__BackingField;
    [CompilerGeneratedAttribute]
private Commit <Commit>k__BackingField;
    public RepositoryContentInfo Content { get; private set; }
    public Commit Commit { get; private set; }
    internal string DebuggerDisplay { get; }
    public RepositoryContentChangeSet(RepositoryContentInfo content, Commit commit);
    [CompilerGeneratedAttribute]
public RepositoryContentInfo get_Content();
    [CompilerGeneratedAttribute]
private void set_Content(RepositoryContentInfo value);
    [CompilerGeneratedAttribute]
public Commit get_Commit();
    [CompilerGeneratedAttribute]
private void set_Commit(Commit value);
    internal string get_DebuggerDisplay();
}
[DebuggerDisplayAttribute("{DebuggerDisplay,nq}")]
public class Octokit.RepositoryContentInfo : object {
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Path>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Sha>k__BackingField;
    [CompilerGeneratedAttribute]
private int <Size>k__BackingField;
    [CompilerGeneratedAttribute]
private StringEnum`1<ContentType> <Type>k__BackingField;
    [CompilerGeneratedAttribute]
private string <DownloadUrl>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Url>k__BackingField;
    [CompilerGeneratedAttribute]
private string <GitUrl>k__BackingField;
    [CompilerGeneratedAttribute]
private string <HtmlUrl>k__BackingField;
    public string Name { get; protected set; }
    public string Path { get; protected set; }
    public string Sha { get; protected set; }
    public int Size { get; protected set; }
    public StringEnum`1<ContentType> Type { get; protected set; }
    public string DownloadUrl { get; protected set; }
    public string Url { get; protected set; }
    public string GitUrl { get; protected set; }
    public string HtmlUrl { get; protected set; }
    internal string DebuggerDisplay { get; }
    public RepositoryContentInfo(string name, string path, string sha, int size, ContentType type, string downloadUrl, string url, string gitUrl, string htmlUrl);
    [CompilerGeneratedAttribute]
public string get_Name();
    [CompilerGeneratedAttribute]
protected void set_Name(string value);
    [CompilerGeneratedAttribute]
public string get_Path();
    [CompilerGeneratedAttribute]
protected void set_Path(string value);
    [CompilerGeneratedAttribute]
public string get_Sha();
    [CompilerGeneratedAttribute]
protected void set_Sha(string value);
    [CompilerGeneratedAttribute]
public int get_Size();
    [CompilerGeneratedAttribute]
protected void set_Size(int value);
    [CompilerGeneratedAttribute]
public StringEnum`1<ContentType> get_Type();
    [CompilerGeneratedAttribute]
protected void set_Type(StringEnum`1<ContentType> value);
    [CompilerGeneratedAttribute]
public string get_DownloadUrl();
    [CompilerGeneratedAttribute]
protected void set_DownloadUrl(string value);
    [CompilerGeneratedAttribute]
public string get_Url();
    [CompilerGeneratedAttribute]
protected void set_Url(string value);
    [CompilerGeneratedAttribute]
public string get_GitUrl();
    [CompilerGeneratedAttribute]
protected void set_GitUrl(string value);
    [CompilerGeneratedAttribute]
public string get_HtmlUrl();
    [CompilerGeneratedAttribute]
protected void set_HtmlUrl(string value);
    internal string get_DebuggerDisplay();
}
[DebuggerDisplayAttribute("{DebuggerDisplay,nq}")]
public class Octokit.RepositoryContentLicense : RepositoryContentInfo {
    [CompilerGeneratedAttribute]
private LicenseMetadata <License>k__BackingField;
    public LicenseMetadata License { get; private set; }
    internal string DebuggerDisplay { get; }
    public RepositoryContentLicense(LicenseMetadata license, string name, string path, string sha, int size, ContentType type, string downloadUrl, string url, string gitUrl, string htmlUrl);
    [CompilerGeneratedAttribute]
public LicenseMetadata get_License();
    [CompilerGeneratedAttribute]
private void set_License(LicenseMetadata value);
    internal string get_DebuggerDisplay();
}
public class Octokit.RepositoryContentsClient : ApiClient {
    public RepositoryContentsClient(IApiConnection apiConnection);
    [ManualRouteAttribute("GET", "/repos/{owner}/{repo}/contents/{path}")]
public sealed virtual Task`1<IReadOnlyList`1<RepositoryContent>> GetAllContents(string owner, string name, string path);
    [ManualRouteAttribute("GET", "repos/{owner}/{repo}/contents/{path}")]
public sealed virtual Task`1<Byte[]> GetRawContent(string owner, string name, string path);
    [ManualRouteAttribute("GET", "/repoitories/{id}/contents/{path}")]
public sealed virtual Task`1<IReadOnlyList`1<RepositoryContent>> GetAllContents(long repositoryId, string path);
    [ManualRouteAttribute("GET", "/repos/{owner}/{repo}/contents/{path}")]
public sealed virtual Task`1<IReadOnlyList`1<RepositoryContent>> GetAllContents(string owner, string name);
    [ManualRouteAttribute("GET", "/repositories/{id}/contents/{path}")]
public sealed virtual Task`1<IReadOnlyList`1<RepositoryContent>> GetAllContents(long repositoryId);
    [ManualRouteAttribute("GET", "/repos/{owner}/{repo}/contents/{path}?ref={ref}")]
public sealed virtual Task`1<IReadOnlyList`1<RepositoryContent>> GetAllContentsByRef(string owner, string name, string path, string reference);
    [ManualRouteAttribute("GET", "repos/{owner}/{repo}/contents/{path}?ref={ref}")]
public sealed virtual Task`1<Byte[]> GetRawContentByRef(string owner, string name, string path, string reference);
    [ManualRouteAttribute("GET", "/repositories/{id}/contents/{path}?ref={ref}")]
public sealed virtual Task`1<IReadOnlyList`1<RepositoryContent>> GetAllContentsByRef(long repositoryId, string path, string reference);
    [ManualRouteAttribute("GET", "/repos/{owner}/{repo}/contents/{path}?ref={ref}")]
public sealed virtual Task`1<IReadOnlyList`1<RepositoryContent>> GetAllContentsByRef(string owner, string name, string reference);
    [ManualRouteAttribute("GET", "/repositories/{id}/contents/{path}?ref={ref}")]
public sealed virtual Task`1<IReadOnlyList`1<RepositoryContent>> GetAllContentsByRef(long repositoryId, string reference);
    [AsyncStateMachineAttribute("Octokit.RepositoryContentsClient/<GetReadme>d__11")]
[ManualRouteAttribute("GET", "/repos/{owner}/{repo}/readme")]
public sealed virtual Task`1<Readme> GetReadme(string owner, string name);
    [AsyncStateMachineAttribute("Octokit.RepositoryContentsClient/<GetReadme>d__12")]
[ManualRouteAttribute("GET", "/repositories/{id}/readme")]
public sealed virtual Task`1<Readme> GetReadme(long repositoryId);
    [DotNetSpecificRouteAttribute]
public sealed virtual Task`1<string> GetReadmeHtml(string owner, string name);
    [DotNetSpecificRouteAttribute]
public sealed virtual Task`1<string> GetReadmeHtml(long repositoryId);
    [ManualRouteAttribute("GET", "/repos/{owner}/{repo}/{archive_format}/{ref}")]
public sealed virtual Task`1<Byte[]> GetArchive(string owner, string name);
    [ManualRouteAttribute("GET", "/repositories/{id}/{archive_format}/{ref}")]
public sealed virtual Task`1<Byte[]> GetArchive(long repositoryId);
    [ManualRouteAttribute("GET", "/repos/{owner}/{repo}/{archive_format}/{ref}")]
public sealed virtual Task`1<Byte[]> GetArchive(string owner, string name, ArchiveFormat archiveFormat);
    [ManualRouteAttribute("GET", "/repositories/{id}/{archive_format}/{ref}")]
public sealed virtual Task`1<Byte[]> GetArchive(long repositoryId, ArchiveFormat archiveFormat);
    [ManualRouteAttribute("GET", "/repos/{owner}/{repo}/{archive_format}/{ref}")]
public sealed virtual Task`1<Byte[]> GetArchive(string owner, string name, ArchiveFormat archiveFormat, string reference);
    [ManualRouteAttribute("GET", "/repositories/{id}/{archive_format}/{ref}")]
public sealed virtual Task`1<Byte[]> GetArchive(long repositoryId, ArchiveFormat archiveFormat, string reference);
    [AsyncStateMachineAttribute("Octokit.RepositoryContentsClient/<GetArchive>d__21")]
[ManualRouteAttribute("GET", "/repos/{owner}/{repo}/{archive_format}/{ref}")]
public sealed virtual Task`1<Byte[]> GetArchive(string owner, string name, ArchiveFormat archiveFormat, string reference, TimeSpan timeout);
    [AsyncStateMachineAttribute("Octokit.RepositoryContentsClient/<GetArchive>d__22")]
[ManualRouteAttribute("GET", "/repositories/{id}/{archive_format}/{ref}")]
public sealed virtual Task`1<Byte[]> GetArchive(long repositoryId, ArchiveFormat archiveFormat, string reference, TimeSpan timeout);
    [ManualRouteAttribute("PUT", "/repos/{owner}/{repo}/contents/{path}")]
public sealed virtual Task`1<RepositoryContentChangeSet> CreateFile(string owner, string name, string path, CreateFileRequest request);
    [ManualRouteAttribute("PUT", "/repositories/{id}/contents/{path}")]
public sealed virtual Task`1<RepositoryContentChangeSet> CreateFile(long repositoryId, string path, CreateFileRequest request);
    [ManualRouteAttribute("PUT", "/repos/{owner}/{repo}/contents/{path}")]
public sealed virtual Task`1<RepositoryContentChangeSet> UpdateFile(string owner, string name, string path, UpdateFileRequest request);
    [ManualRouteAttribute("PUT", "/repositories/{id}/contents/{path}")]
public sealed virtual Task`1<RepositoryContentChangeSet> UpdateFile(long repositoryId, string path, UpdateFileRequest request);
    [ManualRouteAttribute("DELETE", "/repos/{owner}/{repo}/contents/{path}")]
public sealed virtual Task DeleteFile(string owner, string name, string path, DeleteFileRequest request);
    [ManualRouteAttribute("DELETE", "/repositorioes/{id}/contents/{path}")]
public sealed virtual Task DeleteFile(long repositoryId, string path, DeleteFileRequest request);
}
[DebuggerDisplayAttribute("{DebuggerDisplay,nq}")]
public class Octokit.RepositoryContributor : Author {
    [CompilerGeneratedAttribute]
private int <Contributions>k__BackingField;
    public int Contributions { get; private set; }
    public RepositoryContributor(string login, long id, string nodeId, string avatarUrl, string url, string htmlUrl, string followersUrl, string followingUrl, string gistsUrl, string type, string starredUrl, string subscriptionsUrl, string organizationsUrl, string reposUrl, string eventsUrl, string receivedEventsUrl, bool siteAdmin, int contributions);
    [CompilerGeneratedAttribute]
public int get_Contributions();
    [CompilerGeneratedAttribute]
private void set_Contributions(int value);
}
public class Octokit.RepositoryCustomPropertiesClient : ApiClient {
    public RepositoryCustomPropertiesClient(IApiConnection apiConnection);
    [ManualRouteAttribute("GET", "/repos/{owner}/{repo}/properties/values")]
public sealed virtual Task`1<IReadOnlyList`1<CustomPropertyValue>> GetAll(string owner, string repoName);
    [ManualRouteAttribute("PATCH", "/repos/{owner}/{repo}/properties/values")]
public sealed virtual Task CreateOrUpdate(string owner, string repoName, UpsertRepositoryCustomPropertyValues propertyValues);
}
public class Octokit.RepositoryDeployKeysClient : ApiClient {
    public RepositoryDeployKeysClient(IApiConnection apiConnection);
    [ManualRouteAttribute("GET", "/repos/{owner}/{repo}/keys/{number}")]
public sealed virtual Task`1<DeployKey> Get(string owner, string name, int deployKeyId);
    [ManualRouteAttribute("GET", "/repositories/{id}/keys/{number}")]
public sealed virtual Task`1<DeployKey> Get(long repositoryId, int deployKeyId);
    [ManualRouteAttribute("GET", "/repos/{owner}/{repo}/keys")]
public sealed virtual Task`1<IReadOnlyList`1<DeployKey>> GetAll(string owner, string name);
    [ManualRouteAttribute("GET", "/repositories/{id}/keys")]
public sealed virtual Task`1<IReadOnlyList`1<DeployKey>> GetAll(long repositoryId);
    [ManualRouteAttribute("GET", "/repos/{owner}/{repo}/keys")]
public sealed virtual Task`1<IReadOnlyList`1<DeployKey>> GetAll(string owner, string name, ApiOptions options);
    [ManualRouteAttribute("GET", "/repositories/{id}/keys")]
public sealed virtual Task`1<IReadOnlyList`1<DeployKey>> GetAll(long repositoryId, ApiOptions options);
    [ManualRouteAttribute("POST", "/repos/{owner}/{repo}/keys")]
public sealed virtual Task`1<DeployKey> Create(string owner, string name, NewDeployKey newDeployKey);
    [ManualRouteAttribute("POST", "/repositories/{id}/keys")]
public sealed virtual Task`1<DeployKey> Create(long repositoryId, NewDeployKey newDeployKey);
    [ManualRouteAttribute("DELETE", "/repositories/{id}/keys/{number}")]
public sealed virtual Task Delete(string owner, string name, int deployKeyId);
    [ManualRouteAttribute("DELETE", "/repositories/{id}/keys/{number}")]
public sealed virtual Task Delete(long repositoryId, int deployKeyId);
}
public class Octokit.RepositoryExistsException : ApiValidationException {
    private string _message;
    [CompilerGeneratedAttribute]
private string <RepositoryName>k__BackingField;
    [CompilerGeneratedAttribute]
private Uri <ExistingRepositoryWebUrl>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Organization>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <OwnerIsOrganization>k__BackingField;
    public string RepositoryName { get; private set; }
    public Uri ExistingRepositoryWebUrl { get; public set; }
    public string Message { get; }
    public string Organization { get; private set; }
    public bool OwnerIsOrganization { get; private set; }
    public RepositoryExistsException(string organization, string name, Uri baseAddress, ApiValidationException innerException);
    public RepositoryExistsException(string name, ApiValidationException innerException);
    protected RepositoryExistsException(SerializationInfo info, StreamingContext context);
    [CompilerGeneratedAttribute]
public string get_RepositoryName();
    [CompilerGeneratedAttribute]
private void set_RepositoryName(string value);
    [CompilerGeneratedAttribute]
public Uri get_ExistingRepositoryWebUrl();
    [CompilerGeneratedAttribute]
public void set_ExistingRepositoryWebUrl(Uri value);
    public virtual string get_Message();
    [CompilerGeneratedAttribute]
public string get_Organization();
    [CompilerGeneratedAttribute]
private void set_Organization(string value);
    [CompilerGeneratedAttribute]
public bool get_OwnerIsOrganization();
    [CompilerGeneratedAttribute]
private void set_OwnerIsOrganization(bool value);
    [SecurityCriticalAttribute]
public virtual void GetObjectData(SerializationInfo info, StreamingContext context);
}
public class Octokit.RepositoryForksClient : ApiClient {
    public RepositoryForksClient(IApiConnection apiConnection);
    [ManualRouteAttribute("GET", "/repos/{owner}/{repo}/forks")]
public sealed virtual Task`1<IReadOnlyList`1<Repository>> GetAll(string owner, string name);
    [ManualRouteAttribute("GET", "/repositories/{id}/forks")]
public sealed virtual Task`1<IReadOnlyList`1<Repository>> GetAll(long repositoryId);
    [ManualRouteAttribute("GET", "/repos/{owner}/{repo}/forks")]
public sealed virtual Task`1<IReadOnlyList`1<Repository>> GetAll(string owner, string name, ApiOptions options);
    [ManualRouteAttribute("GET", "/repositories/{id}/forks")]
public sealed virtual Task`1<IReadOnlyList`1<Repository>> GetAll(long repositoryId, ApiOptions options);
    [ManualRouteAttribute("GET", "/repos/{owner}/{repo}/forks")]
public sealed virtual Task`1<IReadOnlyList`1<Repository>> GetAll(string owner, string name, RepositoryForksListRequest request);
    [ManualRouteAttribute("GET", "/repositories/{id}/forks")]
public sealed virtual Task`1<IReadOnlyList`1<Repository>> GetAll(long repositoryId, RepositoryForksListRequest request);
    [ManualRouteAttribute("GET", "/repos/{owner}/{repo}/forks")]
public sealed virtual Task`1<IReadOnlyList`1<Repository>> GetAll(string owner, string name, RepositoryForksListRequest request, ApiOptions options);
    [ManualRouteAttribute("GET", "/repositories/{id}/forks")]
public sealed virtual Task`1<IReadOnlyList`1<Repository>> GetAll(long repositoryId, RepositoryForksListRequest request, ApiOptions options);
    [ManualRouteAttribute("POST", "/repos/{owner}/{repo}/forks")]
public sealed virtual Task`1<Repository> Create(string owner, string name, NewRepositoryFork fork);
    [ManualRouteAttribute("POST", "/repositories/{id}/forks")]
public sealed virtual Task`1<Repository> Create(long repositoryId, NewRepositoryFork fork);
}
[DebuggerDisplayAttribute("{DebuggerDisplay,nq}")]
public class Octokit.RepositoryForksListRequest : RequestParameters {
    [CompilerGeneratedAttribute]
private Sort <Sort>k__BackingField;
    public Sort Sort { get; public set; }
    internal string DebuggerDisplay { get; }
    [CompilerGeneratedAttribute]
public Sort get_Sort();
    [CompilerGeneratedAttribute]
public void set_Sort(Sort value);
    internal string get_DebuggerDisplay();
}
public class Octokit.RepositoryFormatException : Exception {
    private string message;
    public string Message { get; }
    public RepositoryFormatException(IEnumerable`1<string> invalidRepositories);
    protected RepositoryFormatException(SerializationInfo info, StreamingContext context);
    public virtual string get_Message();
    [SecurityCriticalAttribute]
public virtual void GetObjectData(SerializationInfo info, StreamingContext context);
}
[DebuggerDisplayAttribute("{DebuggerDisplay,nq}")]
public class Octokit.RepositoryHook : object {
    [CompilerGeneratedAttribute]
private int <Id>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Url>k__BackingField;
    [CompilerGeneratedAttribute]
private string <TestUrl>k__BackingField;
    [CompilerGeneratedAttribute]
private string <PingUrl>k__BackingField;
    [CompilerGeneratedAttribute]
private DateTimeOffset <CreatedAt>k__BackingField;
    [CompilerGeneratedAttribute]
private DateTimeOffset <UpdatedAt>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    [CompilerGeneratedAttribute]
private IReadOnlyList`1<string> <Events>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <Active>k__BackingField;
    [CompilerGeneratedAttribute]
private IReadOnlyDictionary`2<string, string> <Config>k__BackingField;
    public int Id { get; private set; }
    public string Url { get; private set; }
    [ParameterAttribute]
public string TestUrl { get; private set; }
    [ParameterAttribute]
public string PingUrl { get; private set; }
    public DateTimeOffset CreatedAt { get; private set; }
    public DateTimeOffset UpdatedAt { get; private set; }
    public string Name { get; private set; }
    public IReadOnlyList`1<string> Events { get; private set; }
    public bool Active { get; private set; }
    public IReadOnlyDictionary`2<string, string> Config { get; private set; }
    internal string DebuggerDisplay { get; }
    public RepositoryHook(int id, string url, string testUrl, string pingUrl, DateTimeOffset createdAt, DateTimeOffset updatedAt, string name, IReadOnlyList`1<string> events, bool active, IReadOnlyDictionary`2<string, string> config);
    [CompilerGeneratedAttribute]
public int get_Id();
    [CompilerGeneratedAttribute]
private void set_Id(int value);
    [CompilerGeneratedAttribute]
public string get_Url();
    [CompilerGeneratedAttribute]
private void set_Url(string value);
    [CompilerGeneratedAttribute]
public string get_TestUrl();
    [CompilerGeneratedAttribute]
private void set_TestUrl(string value);
    [CompilerGeneratedAttribute]
public string get_PingUrl();
    [CompilerGeneratedAttribute]
private void set_PingUrl(string value);
    [CompilerGeneratedAttribute]
public DateTimeOffset get_CreatedAt();
    [CompilerGeneratedAttribute]
private void set_CreatedAt(DateTimeOffset value);
    [CompilerGeneratedAttribute]
public DateTimeOffset get_UpdatedAt();
    [CompilerGeneratedAttribute]
private void set_UpdatedAt(DateTimeOffset value);
    [CompilerGeneratedAttribute]
public string get_Name();
    [CompilerGeneratedAttribute]
private void set_Name(string value);
    [CompilerGeneratedAttribute]
public IReadOnlyList`1<string> get_Events();
    [CompilerGeneratedAttribute]
private void set_Events(IReadOnlyList`1<string> value);
    [CompilerGeneratedAttribute]
public bool get_Active();
    [CompilerGeneratedAttribute]
private void set_Active(bool value);
    [CompilerGeneratedAttribute]
public IReadOnlyDictionary`2<string, string> get_Config();
    [CompilerGeneratedAttribute]
private void set_Config(IReadOnlyDictionary`2<string, string> value);
    internal string get_DebuggerDisplay();
}
public class Octokit.RepositoryHooksClient : ApiClient {
    public RepositoryHooksClient(IApiConnection apiConnection);
    [ManualRouteAttribute("GET", "/repos/{owner}/{repo}/hooks")]
public sealed virtual Task`1<IReadOnlyList`1<RepositoryHook>> GetAll(string owner, string name);
    [ManualRouteAttribute("GET", "/repositories/{id}/hooks")]
public sealed virtual Task`1<IReadOnlyList`1<RepositoryHook>> GetAll(long repositoryId);
    [ManualRouteAttribute("GET", "/repos/{owner}/{repo}/hooks")]
public sealed virtual Task`1<IReadOnlyList`1<RepositoryHook>> GetAll(string owner, string name, ApiOptions options);
    [ManualRouteAttribute("GET", "/repositories/{id}/hooks")]
public sealed virtual Task`1<IReadOnlyList`1<RepositoryHook>> GetAll(long repositoryId, ApiOptions options);
    [ManualRouteAttribute("GET", "/repos/{owner}/{repo}/hooks/{id}")]
public sealed virtual Task`1<RepositoryHook> Get(string owner, string name, int hookId);
    [ManualRouteAttribute("GET", "/repositories/{id}/hooks/{id}")]
public sealed virtual Task`1<RepositoryHook> Get(long repositoryId, int hookId);
    [ManualRouteAttribute("POST", "/repos/{owner}/{repo}/hooks")]
public sealed virtual Task`1<RepositoryHook> Create(string owner, string name, NewRepositoryHook hook);
    [ManualRouteAttribute("POST", "/repositories/{id}/hooks")]
public sealed virtual Task`1<RepositoryHook> Create(long repositoryId, NewRepositoryHook hook);
    [ManualRouteAttribute("PATCH", "/repos/{owner}/{repo}/hooks/{id}")]
public sealed virtual Task`1<RepositoryHook> Edit(string owner, string name, int hookId, EditRepositoryHook hook);
    [ManualRouteAttribute("POST", "/repositories/{id}/hooks/{hook_id}")]
public sealed virtual Task`1<RepositoryHook> Edit(long repositoryId, int hookId, EditRepositoryHook hook);
    [ManualRouteAttribute("POST", "/repos/{owner}/{repo}/hooks/{id}/tests")]
public sealed virtual Task Test(string owner, string name, int hookId);
    [ManualRouteAttribute("POST", "/repositories/{id}/hooks/{hook_id}/tests")]
public sealed virtual Task Test(long repositoryId, int hookId);
    [ManualRouteAttribute("POST", "/repos/{owner}/{repo}/hooks/{id}/pings")]
public sealed virtual Task Ping(string owner, string name, int hookId);
    [ManualRouteAttribute("POST", "/repositories/{id}/hooks/{hook_id}/pings")]
public sealed virtual Task Ping(long repositoryId, int hookId);
    [ManualRouteAttribute("DELETE", "/repos/{owner}/{repo}/hooks/{id}")]
public sealed virtual Task Delete(string owner, string name, int hookId);
    [ManualRouteAttribute("DELETE", "/repositories/{id}/hooks/{hook_id}")]
public sealed virtual Task Delete(long repositoryId, int hookId);
}
[DebuggerDisplayAttribute("{DebuggerDisplay,nq}")]
public class Octokit.RepositoryInvitation : object {
    [CompilerGeneratedAttribute]
private long <Id>k__BackingField;
    [CompilerGeneratedAttribute]
private string <NodeId>k__BackingField;
    [CompilerGeneratedAttribute]
private Repository <Repository>k__BackingField;
    [CompilerGeneratedAttribute]
private User <Invitee>k__BackingField;
    [CompilerGeneratedAttribute]
private User <Inviter>k__BackingField;
    [CompilerGeneratedAttribute]
private StringEnum`1<InvitationPermissionType> <Permissions>k__BackingField;
    [CompilerGeneratedAttribute]
private DateTimeOffset <CreatedAt>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <Expired>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Url>k__BackingField;
    [CompilerGeneratedAttribute]
private string <HtmlUrl>k__BackingField;
    public long Id { get; private set; }
    public string NodeId { get; private set; }
    public Repository Repository { get; private set; }
    public User Invitee { get; private set; }
    public User Inviter { get; private set; }
    public StringEnum`1<InvitationPermissionType> Permissions { get; private set; }
    public DateTimeOffset CreatedAt { get; private set; }
    public bool Expired { get; private set; }
    public string Url { get; private set; }
    public string HtmlUrl { get; private set; }
    internal string DebuggerDisplay { get; }
    public RepositoryInvitation(long id, string nodeId, Repository repository, User invitee, User inviter, InvitationPermissionType permissions, DateTimeOffset createdAt, bool expired, string url, string htmlUrl);
    [CompilerGeneratedAttribute]
public long get_Id();
    [CompilerGeneratedAttribute]
private void set_Id(long value);
    [CompilerGeneratedAttribute]
public string get_NodeId();
    [CompilerGeneratedAttribute]
private void set_NodeId(string value);
    [CompilerGeneratedAttribute]
public Repository get_Repository();
    [CompilerGeneratedAttribute]
private void set_Repository(Repository value);
    [CompilerGeneratedAttribute]
public User get_Invitee();
    [CompilerGeneratedAttribute]
private void set_Invitee(User value);
    [CompilerGeneratedAttribute]
public User get_Inviter();
    [CompilerGeneratedAttribute]
private void set_Inviter(User value);
    [CompilerGeneratedAttribute]
public StringEnum`1<InvitationPermissionType> get_Permissions();
    [CompilerGeneratedAttribute]
private void set_Permissions(StringEnum`1<InvitationPermissionType> value);
    [CompilerGeneratedAttribute]
public DateTimeOffset get_CreatedAt();
    [CompilerGeneratedAttribute]
private void set_CreatedAt(DateTimeOffset value);
    [CompilerGeneratedAttribute]
public bool get_Expired();
    [CompilerGeneratedAttribute]
private void set_Expired(bool value);
    [CompilerGeneratedAttribute]
public string get_Url();
    [CompilerGeneratedAttribute]
private void set_Url(string value);
    [CompilerGeneratedAttribute]
public string get_HtmlUrl();
    [CompilerGeneratedAttribute]
private void set_HtmlUrl(string value);
    internal string get_DebuggerDisplay();
}
public class Octokit.RepositoryInvitationsClient : ApiClient {
    public RepositoryInvitationsClient(IApiConnection apiConnection);
    [AsyncStateMachineAttribute("Octokit.RepositoryInvitationsClient/<Accept>d__1")]
[ManualRouteAttribute("PATCH", "/user/repository_invitations/{invitation_id}")]
public sealed virtual Task`1<bool> Accept(long invitationId);
    [AsyncStateMachineAttribute("Octokit.RepositoryInvitationsClient/<Decline>d__2")]
[ManualRouteAttribute("DELETE", "/user/repository_invitations/{invitation_id}")]
public sealed virtual Task`1<bool> Decline(long invitationId);
    [AsyncStateMachineAttribute("Octokit.RepositoryInvitationsClient/<Delete>d__3")]
[ManualRouteAttribute("DELETE", "/repos/:owner/:repo/invitations/{invitation_id}")]
public sealed virtual Task`1<bool> Delete(long repositoryId, long invitationId);
    [ManualRouteAttribute("GET", "/user/repository_invitations")]
public sealed virtual Task`1<IReadOnlyList`1<RepositoryInvitation>> GetAllForCurrent();
    [ManualRouteAttribute("GET", "/user/repository_invitations")]
public sealed virtual Task`1<IReadOnlyList`1<RepositoryInvitation>> GetAllForCurrent(ApiOptions options);
    [ManualRouteAttribute("GET", "/repositories/{id}/invitations")]
public sealed virtual Task`1<IReadOnlyList`1<RepositoryInvitation>> GetAllForRepository(long repositoryId);
    [ManualRouteAttribute("GET", "/repositories/{id}/invitations")]
public sealed virtual Task`1<IReadOnlyList`1<RepositoryInvitation>> GetAllForRepository(long repositoryId, ApiOptions options);
    [ManualRouteAttribute("PATCH", "/repositories/{id}/invitations/{invitation_id}")]
public sealed virtual Task`1<RepositoryInvitation> Edit(long repositoryId, long invitationId, InvitationUpdate permissions);
}
[DebuggerDisplayAttribute("{DebuggerDisplay,nq}")]
public class Octokit.RepositoryIssueRequest : IssueRequest {
    [CompilerGeneratedAttribute]
private string <Milestone>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Assignee>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Creator>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Mentioned>k__BackingField;
    public string Milestone { get; public set; }
    public string Assignee { get; public set; }
    public string Creator { get; public set; }
    public string Mentioned { get; public set; }
    [CompilerGeneratedAttribute]
public string get_Milestone();
    [CompilerGeneratedAttribute]
public void set_Milestone(string value);
    [CompilerGeneratedAttribute]
public string get_Assignee();
    [CompilerGeneratedAttribute]
public void set_Assignee(string value);
    [CompilerGeneratedAttribute]
public string get_Creator();
    [CompilerGeneratedAttribute]
public void set_Creator(string value);
    [CompilerGeneratedAttribute]
public string get_Mentioned();
    [CompilerGeneratedAttribute]
public void set_Mentioned(string value);
}
[DebuggerDisplayAttribute("{DebuggerDisplay,nq}")]
public class Octokit.RepositoryLanguage : object {
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    [CompilerGeneratedAttribute]
private long <NumberOfBytes>k__BackingField;
    public string Name { get; private set; }
    public long NumberOfBytes { get; private set; }
    internal string DebuggerDisplay { get; }
    public RepositoryLanguage(string name, long numberOfBytes);
    [CompilerGeneratedAttribute]
public string get_Name();
    [CompilerGeneratedAttribute]
private void set_Name(string value);
    [CompilerGeneratedAttribute]
public long get_NumberOfBytes();
    [CompilerGeneratedAttribute]
private void set_NumberOfBytes(long value);
    internal string get_DebuggerDisplay();
}
[DebuggerDisplayAttribute("{DebuggerDisplay,nq}")]
public class Octokit.RepositoryOidcSubjectClaim : object {
    [CompilerGeneratedAttribute]
private bool <UseDefault>k__BackingField;
    [CompilerGeneratedAttribute]
private IReadOnlyList`1<string> <IncludeClaimKeys>k__BackingField;
    public bool UseDefault { get; protected set; }
    public IReadOnlyList`1<string> IncludeClaimKeys { get; protected set; }
    internal string DebuggerDisplay { get; }
    public RepositoryOidcSubjectClaim(bool useDefault, List`1<string> includeClaimKeys);
    [CompilerGeneratedAttribute]
public bool get_UseDefault();
    [CompilerGeneratedAttribute]
protected void set_UseDefault(bool value);
    [CompilerGeneratedAttribute]
public IReadOnlyList`1<string> get_IncludeClaimKeys();
    [CompilerGeneratedAttribute]
protected void set_IncludeClaimKeys(IReadOnlyList`1<string> value);
    internal string get_DebuggerDisplay();
}
[DebuggerDisplayAttribute("{DebuggerDisplay,nq}")]
public class Octokit.RepositoryOidcSubjectClaimRequest : object {
    [CompilerGeneratedAttribute]
private bool <UseDefault>k__BackingField;
    [CompilerGeneratedAttribute]
private List`1<string> <IncludeClaimKeys>k__BackingField;
    public bool UseDefault { get; public set; }
    public List`1<string> IncludeClaimKeys { get; public set; }
    internal string DebuggerDisplay { get; }
    public RepositoryOidcSubjectClaimRequest(bool useDefault, List`1<string> includeClaimKeys);
    [CompilerGeneratedAttribute]
public bool get_UseDefault();
    [CompilerGeneratedAttribute]
public void set_UseDefault(bool value);
    [CompilerGeneratedAttribute]
public List`1<string> get_IncludeClaimKeys();
    [CompilerGeneratedAttribute]
public void set_IncludeClaimKeys(List`1<string> value);
    internal string get_DebuggerDisplay();
}
public class Octokit.RepositoryPagesClient : ApiClient {
    public RepositoryPagesClient(IApiConnection apiConnection);
    [ManualRouteAttribute("GET", "/repos/{owner}/{repo}/pages")]
public sealed virtual Task`1<Page> Get(string owner, string name);
    [ManualRouteAttribute("GET", "/repositories/{id}/pages")]
public sealed virtual Task`1<Page> Get(long repositoryId);
    [ManualRouteAttribute("GET", "/repos/{owner}/{repo}/pages/builds")]
public sealed virtual Task`1<IReadOnlyList`1<PagesBuild>> GetAll(string owner, string name);
    [ManualRouteAttribute("GET", "/repositories/{id}/pages/builds")]
public sealed virtual Task`1<IReadOnlyList`1<PagesBuild>> GetAll(long repositoryId);
    [ManualRouteAttribute("GET", "/repos/{owner}/{repo}/pages/builds")]
public sealed virtual Task`1<IReadOnlyList`1<PagesBuild>> GetAll(string owner, string name, ApiOptions options);
    [ManualRouteAttribute("GET", "/repositories/{id}/pages/builds")]
public sealed virtual Task`1<IReadOnlyList`1<PagesBuild>> GetAll(long repositoryId, ApiOptions options);
    [ManualRouteAttribute("GET", "/repos/{owner}/{repo}/pages/builds/latest")]
public sealed virtual Task`1<PagesBuild> GetLatest(string owner, string name);
    [ManualRouteAttribute("GET", "/repositories/{id}/pages/builds/latest")]
public sealed virtual Task`1<PagesBuild> GetLatest(long repositoryId);
    [ManualRouteAttribute("POST", "/repos/{owner}/{repo}/pages/builds")]
public sealed virtual Task`1<PagesBuild> RequestPageBuild(string owner, string name);
    [ManualRouteAttribute("POST", "/repositories/{id}/pages/builds")]
public sealed virtual Task`1<PagesBuild> RequestPageBuild(long repositoryId);
}
[DebuggerDisplayAttribute("{DebuggerDisplay,nq}")]
public class Octokit.RepositoryPermissionRequest : object {
    [CompilerGeneratedAttribute]
private TeamPermissionLegacy <Permission>k__BackingField;
    public TeamPermissionLegacy Permission { get; private set; }
    internal string DebuggerDisplay { get; }
    public RepositoryPermissionRequest(TeamPermissionLegacy permission);
    [CompilerGeneratedAttribute]
public TeamPermissionLegacy get_Permission();
    [CompilerGeneratedAttribute]
private void set_Permission(TeamPermissionLegacy value);
    internal string get_DebuggerDisplay();
}
[DebuggerDisplayAttribute("{DebuggerDisplay,nq}")]
public class Octokit.RepositoryPermissions : object {
    [CompilerGeneratedAttribute]
private bool <Admin>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <Maintain>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <Push>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <Triage>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <Pull>k__BackingField;
    public bool Admin { get; private set; }
    public bool Maintain { get; private set; }
    public bool Push { get; private set; }
    public bool Triage { get; private set; }
    public bool Pull { get; private set; }
    internal string DebuggerDisplay { get; }
    public RepositoryPermissions(bool admin, bool maintain, bool push, bool triage, bool pull);
    [CompilerGeneratedAttribute]
public bool get_Admin();
    [CompilerGeneratedAttribute]
private void set_Admin(bool value);
    [CompilerGeneratedAttribute]
public bool get_Maintain();
    [CompilerGeneratedAttribute]
private void set_Maintain(bool value);
    [CompilerGeneratedAttribute]
public bool get_Push();
    [CompilerGeneratedAttribute]
private void set_Push(bool value);
    [CompilerGeneratedAttribute]
public bool get_Triage();
    [CompilerGeneratedAttribute]
private void set_Triage(bool value);
    [CompilerGeneratedAttribute]
public bool get_Pull();
    [CompilerGeneratedAttribute]
private void set_Pull(bool value);
    internal string get_DebuggerDisplay();
}
[DebuggerDisplayAttribute("{DebuggerDisplay,nq}")]
public class Octokit.RepositoryReference : object {
    [CompilerGeneratedAttribute]
private string <FullName>k__BackingField;
    public string FullName { get; public set; }
    internal string DebuggerDisplay { get; }
    [CompilerGeneratedAttribute]
public string get_FullName();
    [CompilerGeneratedAttribute]
public void set_FullName(string value);
    internal string get_DebuggerDisplay();
}
[DebuggerDisplayAttribute("{DebuggerDisplay,nq}")]
public class Octokit.RepositoryRequest : RequestParameters {
    [CompilerGeneratedAttribute]
private Nullable`1<RepositoryType> <Type>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<RepositorySort> <Sort>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<SortDirection> <Direction>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<RepositoryRequestVisibility> <Visibility>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<RepositoryAffiliation> <Affiliation>k__BackingField;
    public Nullable`1<RepositoryType> Type { get; public set; }
    public Nullable`1<RepositorySort> Sort { get; public set; }
    public Nullable`1<SortDirection> Direction { get; public set; }
    public Nullable`1<RepositoryRequestVisibility> Visibility { get; public set; }
    public Nullable`1<RepositoryAffiliation> Affiliation { get; public set; }
    internal string DebuggerDisplay { get; }
    [CompilerGeneratedAttribute]
public Nullable`1<RepositoryType> get_Type();
    [CompilerGeneratedAttribute]
public void set_Type(Nullable`1<RepositoryType> value);
    [CompilerGeneratedAttribute]
public Nullable`1<RepositorySort> get_Sort();
    [CompilerGeneratedAttribute]
public void set_Sort(Nullable`1<RepositorySort> value);
    [CompilerGeneratedAttribute]
public Nullable`1<SortDirection> get_Direction();
    [CompilerGeneratedAttribute]
public void set_Direction(Nullable`1<SortDirection> value);
    [CompilerGeneratedAttribute]
public Nullable`1<RepositoryRequestVisibility> get_Visibility();
    [CompilerGeneratedAttribute]
public void set_Visibility(Nullable`1<RepositoryRequestVisibility> value);
    [CompilerGeneratedAttribute]
public Nullable`1<RepositoryAffiliation> get_Affiliation();
    [CompilerGeneratedAttribute]
public void set_Affiliation(Nullable`1<RepositoryAffiliation> value);
    internal string get_DebuggerDisplay();
}
public enum Octokit.RepositoryRequestVisibility : Enum {
    public int value__;
    [ParameterAttribute]
public static RepositoryRequestVisibility Public;
    [ParameterAttribute]
public static RepositoryRequestVisibility Private;
    [ParameterAttribute]
public static RepositoryRequestVisibility All;
    [ParameterAttribute]
public static RepositoryRequestVisibility Internal;
}
[DebuggerDisplayAttribute("{DebuggerDisplay,nq}")]
public class Octokit.RepositorySecret : object {
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    [CompilerGeneratedAttribute]
private DateTimeOffset <CreatedAt>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<DateTimeOffset> <UpdatedAt>k__BackingField;
    public string Name { get; protected set; }
    public DateTimeOffset CreatedAt { get; protected set; }
    public Nullable`1<DateTimeOffset> UpdatedAt { get; protected set; }
    internal string DebuggerDisplay { get; }
    public RepositorySecret(string name, DateTimeOffset createdAt, Nullable`1<DateTimeOffset> updatedAt);
    [CompilerGeneratedAttribute]
public string get_Name();
    [CompilerGeneratedAttribute]
protected void set_Name(string value);
    [CompilerGeneratedAttribute]
public DateTimeOffset get_CreatedAt();
    [CompilerGeneratedAttribute]
protected void set_CreatedAt(DateTimeOffset value);
    [CompilerGeneratedAttribute]
public Nullable`1<DateTimeOffset> get_UpdatedAt();
    [CompilerGeneratedAttribute]
protected void set_UpdatedAt(Nullable`1<DateTimeOffset> value);
    internal string get_DebuggerDisplay();
}
public class Octokit.RepositorySecretsClient : ApiClient {
    public RepositorySecretsClient(IApiConnection apiConnection);
    [ManualRouteAttribute("GET", "/repos/{owner}/{repo}/actions/secrets/public-key")]
public sealed virtual Task`1<SecretsPublicKey> GetPublicKey(string owner, string repoName);
    [ManualRouteAttribute("GET", "/repos/{owner}/{repo}/actions/secrets")]
public sealed virtual Task`1<RepositorySecretsCollection> GetAll(string owner, string repoName);
    [ManualRouteAttribute("GET", "/repos/{owner}/{repo}/actions/secrets/{secretName}")]
public sealed virtual Task`1<RepositorySecret> Get(string owner, string repoName, string secretName);
    [AsyncStateMachineAttribute("Octokit.RepositorySecretsClient/<CreateOrUpdate>d__4")]
[ManualRouteAttribute("PUT", "/repos/{owner}/{repo}/actions/secrets/{secretName}")]
public sealed virtual Task`1<RepositorySecret> CreateOrUpdate(string owner, string repoName, string secretName, UpsertRepositorySecret upsertSecret);
    [ManualRouteAttribute("DELETE", "/repos/{owner}/{repo}/actions/secrets/{secretName}")]
public sealed virtual Task Delete(string owner, string repoName, string secretName);
}
[DebuggerDisplayAttribute("{DebuggerDisplay,nq}")]
public class Octokit.RepositorySecretsCollection : object {
    [CompilerGeneratedAttribute]
private int <TotalCount>k__BackingField;
    [CompilerGeneratedAttribute]
private IReadOnlyList`1<RepositorySecret> <Secrets>k__BackingField;
    public int TotalCount { get; private set; }
    public IReadOnlyList`1<RepositorySecret> Secrets { get; private set; }
    internal string DebuggerDisplay { get; }
    public RepositorySecretsCollection(int totalCount, IReadOnlyList`1<RepositorySecret> secrets);
    [CompilerGeneratedAttribute]
public int get_TotalCount();
    [CompilerGeneratedAttribute]
private void set_TotalCount(int value);
    [CompilerGeneratedAttribute]
public IReadOnlyList`1<RepositorySecret> get_Secrets();
    [CompilerGeneratedAttribute]
private void set_Secrets(IReadOnlyList`1<RepositorySecret> value);
    internal string get_DebuggerDisplay();
}
public enum Octokit.RepositorySort : Enum {
    public int value__;
    [ParameterAttribute]
public static RepositorySort Created;
    [ParameterAttribute]
public static RepositorySort Updated;
    [ParameterAttribute]
public static RepositorySort Pushed;
    [ParameterAttribute]
public static RepositorySort FullName;
}
[DebuggerDisplayAttribute("{DebuggerDisplay,nq}")]
public class Octokit.RepositoryStar : object {
    [CompilerGeneratedAttribute]
private DateTimeOffset <StarredAt>k__BackingField;
    [CompilerGeneratedAttribute]
private Repository <Repo>k__BackingField;
    public DateTimeOffset StarredAt { get; private set; }
    public Repository Repo { get; private set; }
    internal string DebuggerDisplay { get; }
    public RepositoryStar(DateTimeOffset starredAt, Repository repo);
    [CompilerGeneratedAttribute]
public DateTimeOffset get_StarredAt();
    [CompilerGeneratedAttribute]
private void set_StarredAt(DateTimeOffset value);
    [CompilerGeneratedAttribute]
public Repository get_Repo();
    [CompilerGeneratedAttribute]
private void set_Repo(Repository value);
    internal string get_DebuggerDisplay();
}
[DebuggerDisplayAttribute("{DebuggerDisplay,nq}")]
public class Octokit.RepositoryTag : object {
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    [CompilerGeneratedAttribute]
private string <NodeId>k__BackingField;
    [CompilerGeneratedAttribute]
private GitReference <Commit>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ZipballUrl>k__BackingField;
    [CompilerGeneratedAttribute]
private string <TarballUrl>k__BackingField;
    public string Name { get; private set; }
    public string NodeId { get; private set; }
    public GitReference Commit { get; private set; }
    public string ZipballUrl { get; private set; }
    public string TarballUrl { get; private set; }
    internal string DebuggerDisplay { get; }
    public RepositoryTag(string name, string nodeId, GitReference commit, string zipballUrl, string tarballUrl);
    [CompilerGeneratedAttribute]
public string get_Name();
    [CompilerGeneratedAttribute]
private void set_Name(string value);
    [CompilerGeneratedAttribute]
public string get_NodeId();
    [CompilerGeneratedAttribute]
private void set_NodeId(string value);
    [CompilerGeneratedAttribute]
public GitReference get_Commit();
    [CompilerGeneratedAttribute]
private void set_Commit(GitReference value);
    [CompilerGeneratedAttribute]
public string get_ZipballUrl();
    [CompilerGeneratedAttribute]
private void set_ZipballUrl(string value);
    [CompilerGeneratedAttribute]
public string get_TarballUrl();
    [CompilerGeneratedAttribute]
private void set_TarballUrl(string value);
    internal string get_DebuggerDisplay();
}
[DebuggerDisplayAttribute("{DebuggerDisplay,nq}")]
public class Octokit.RepositoryTopics : object {
    [CompilerGeneratedAttribute]
private IReadOnlyList`1<string> <Names>k__BackingField;
    public IReadOnlyList`1<string> Names { get; private set; }
    internal string DebuggerDisplay { get; }
    public RepositoryTopics(IEnumerable`1<string> names);
    [CompilerGeneratedAttribute]
public IReadOnlyList`1<string> get_Names();
    [CompilerGeneratedAttribute]
private void set_Names(IReadOnlyList`1<string> value);
    internal string get_DebuggerDisplay();
}
public class Octokit.RepositoryTrafficClient : ApiClient {
    public RepositoryTrafficClient(IApiConnection apiConnection);
    [ManualRouteAttribute("GET", "/repositories/{id}/traffic/popular/paths")]
public sealed virtual Task`1<IReadOnlyList`1<RepositoryTrafficPath>> GetAllPaths(long repositoryId);
    [ManualRouteAttribute("GET", "/repos/{owner}/{repo}/traffic/popular/paths")]
public sealed virtual Task`1<IReadOnlyList`1<RepositoryTrafficPath>> GetAllPaths(string owner, string name);
    [ManualRouteAttribute("GET", "/repositories/{id}/traffic/popular/referrers")]
public sealed virtual Task`1<IReadOnlyList`1<RepositoryTrafficReferrer>> GetAllReferrers(long repositoryId);
    [ManualRouteAttribute("GET", "/repos/{owner}/{repo}/traffic/popular/referrers")]
public sealed virtual Task`1<IReadOnlyList`1<RepositoryTrafficReferrer>> GetAllReferrers(string owner, string name);
    [ManualRouteAttribute("GET", "/repositories/{id}/traffic/clones")]
public sealed virtual Task`1<RepositoryTrafficCloneSummary> GetClones(long repositoryId, RepositoryTrafficRequest per);
    [ManualRouteAttribute("GET", "/repos/{owner}/{repo}/traffic/clones")]
public sealed virtual Task`1<RepositoryTrafficCloneSummary> GetClones(string owner, string name, RepositoryTrafficRequest per);
    [ManualRouteAttribute("GET", "/repositories/{id}/traffic/views")]
public sealed virtual Task`1<RepositoryTrafficViewSummary> GetViews(long repositoryId, RepositoryTrafficRequest per);
    [ManualRouteAttribute("GET", "/repos/{owner}/{repo}/traffic/views")]
public sealed virtual Task`1<RepositoryTrafficViewSummary> GetViews(string owner, string name, RepositoryTrafficRequest per);
}
[DebuggerDisplayAttribute("{DebuggerDisplay,nq}")]
public class Octokit.RepositoryTrafficClone : object {
    [CompilerGeneratedAttribute]
private DateTimeOffset <Timestamp>k__BackingField;
    [CompilerGeneratedAttribute]
private int <Count>k__BackingField;
    [CompilerGeneratedAttribute]
private int <Uniques>k__BackingField;
    public DateTimeOffset Timestamp { get; private set; }
    public int Count { get; private set; }
    public int Uniques { get; private set; }
    internal string DebuggerDisplay { get; }
    public RepositoryTrafficClone(DateTimeOffset timestamp, int count, int uniques);
    [CompilerGeneratedAttribute]
public DateTimeOffset get_Timestamp();
    [CompilerGeneratedAttribute]
private void set_Timestamp(DateTimeOffset value);
    [CompilerGeneratedAttribute]
public int get_Count();
    [CompilerGeneratedAttribute]
private void set_Count(int value);
    [CompilerGeneratedAttribute]
public int get_Uniques();
    [CompilerGeneratedAttribute]
private void set_Uniques(int value);
    internal string get_DebuggerDisplay();
}
[DebuggerDisplayAttribute("{DebuggerDisplay,nq}")]
public class Octokit.RepositoryTrafficCloneSummary : object {
    [CompilerGeneratedAttribute]
private int <Count>k__BackingField;
    [CompilerGeneratedAttribute]
private int <Uniques>k__BackingField;
    [CompilerGeneratedAttribute]
private IReadOnlyList`1<RepositoryTrafficClone> <Clones>k__BackingField;
    public int Count { get; private set; }
    public int Uniques { get; private set; }
    public IReadOnlyList`1<RepositoryTrafficClone> Clones { get; private set; }
    internal string DebuggerDisplay { get; }
    public RepositoryTrafficCloneSummary(int count, int uniques, IReadOnlyList`1<RepositoryTrafficClone> clones);
    [CompilerGeneratedAttribute]
public int get_Count();
    [CompilerGeneratedAttribute]
private void set_Count(int value);
    [CompilerGeneratedAttribute]
public int get_Uniques();
    [CompilerGeneratedAttribute]
private void set_Uniques(int value);
    [CompilerGeneratedAttribute]
public IReadOnlyList`1<RepositoryTrafficClone> get_Clones();
    [CompilerGeneratedAttribute]
private void set_Clones(IReadOnlyList`1<RepositoryTrafficClone> value);
    internal string get_DebuggerDisplay();
}
[DebuggerDisplayAttribute("{DebuggerDisplay,nq}")]
public class Octokit.RepositoryTrafficPath : object {
    [CompilerGeneratedAttribute]
private string <Path>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Title>k__BackingField;
    [CompilerGeneratedAttribute]
private int <Count>k__BackingField;
    [CompilerGeneratedAttribute]
private int <Uniques>k__BackingField;
    public string Path { get; private set; }
    public string Title { get; private set; }
    public int Count { get; private set; }
    public int Uniques { get; private set; }
    internal string DebuggerDisplay { get; }
    public RepositoryTrafficPath(string path, string title, int count, int uniques);
    [CompilerGeneratedAttribute]
public string get_Path();
    [CompilerGeneratedAttribute]
private void set_Path(string value);
    [CompilerGeneratedAttribute]
public string get_Title();
    [CompilerGeneratedAttribute]
private void set_Title(string value);
    [CompilerGeneratedAttribute]
public int get_Count();
    [CompilerGeneratedAttribute]
private void set_Count(int value);
    [CompilerGeneratedAttribute]
public int get_Uniques();
    [CompilerGeneratedAttribute]
private void set_Uniques(int value);
    internal string get_DebuggerDisplay();
}
[DebuggerDisplayAttribute("{DebuggerDisplay,nq}")]
public class Octokit.RepositoryTrafficReferrer : object {
    [CompilerGeneratedAttribute]
private string <Referrer>k__BackingField;
    [CompilerGeneratedAttribute]
private int <Count>k__BackingField;
    [CompilerGeneratedAttribute]
private int <Uniques>k__BackingField;
    public string Referrer { get; private set; }
    public int Count { get; private set; }
    public int Uniques { get; private set; }
    internal string DebuggerDisplay { get; }
    public RepositoryTrafficReferrer(string referrer, int count, int uniques);
    [CompilerGeneratedAttribute]
public string get_Referrer();
    [CompilerGeneratedAttribute]
private void set_Referrer(string value);
    [CompilerGeneratedAttribute]
public int get_Count();
    [CompilerGeneratedAttribute]
private void set_Count(int value);
    [CompilerGeneratedAttribute]
public int get_Uniques();
    [CompilerGeneratedAttribute]
private void set_Uniques(int value);
    internal string get_DebuggerDisplay();
}
[DebuggerDisplayAttribute("{DebuggerDisplay,nq}")]
public class Octokit.RepositoryTrafficRequest : RequestParameters {
    [CompilerGeneratedAttribute]
private TrafficDayOrWeek <Per>k__BackingField;
    public TrafficDayOrWeek Per { get; private set; }
    internal string DebuggerDisplay { get; }
    public RepositoryTrafficRequest(TrafficDayOrWeek per);
    [CompilerGeneratedAttribute]
public TrafficDayOrWeek get_Per();
    [CompilerGeneratedAttribute]
private void set_Per(TrafficDayOrWeek value);
    internal string get_DebuggerDisplay();
}
[DebuggerDisplayAttribute("{DebuggerDisplay,nq}")]
public class Octokit.RepositoryTrafficView : object {
    [CompilerGeneratedAttribute]
private DateTimeOffset <Timestamp>k__BackingField;
    [CompilerGeneratedAttribute]
private int <Count>k__BackingField;
    [CompilerGeneratedAttribute]
private int <Uniques>k__BackingField;
    public DateTimeOffset Timestamp { get; private set; }
    public int Count { get; private set; }
    public int Uniques { get; private set; }
    internal string DebuggerDisplay { get; }
    public RepositoryTrafficView(DateTimeOffset timestamp, int count, int uniques);
    [CompilerGeneratedAttribute]
public DateTimeOffset get_Timestamp();
    [CompilerGeneratedAttribute]
private void set_Timestamp(DateTimeOffset value);
    [CompilerGeneratedAttribute]
public int get_Count();
    [CompilerGeneratedAttribute]
private void set_Count(int value);
    [CompilerGeneratedAttribute]
public int get_Uniques();
    [CompilerGeneratedAttribute]
private void set_Uniques(int value);
    internal string get_DebuggerDisplay();
}
[DebuggerDisplayAttribute("{DebuggerDisplay,nq}")]
public class Octokit.RepositoryTrafficViewSummary : object {
    [CompilerGeneratedAttribute]
private int <Count>k__BackingField;
    [CompilerGeneratedAttribute]
private int <Uniques>k__BackingField;
    [CompilerGeneratedAttribute]
private IReadOnlyList`1<RepositoryTrafficView> <Views>k__BackingField;
    public int Count { get; private set; }
    public int Uniques { get; private set; }
    public IReadOnlyList`1<RepositoryTrafficView> Views { get; private set; }
    internal string DebuggerDisplay { get; }
    public RepositoryTrafficViewSummary(int count, int uniques, IReadOnlyList`1<RepositoryTrafficView> views);
    [CompilerGeneratedAttribute]
public int get_Count();
    [CompilerGeneratedAttribute]
private void set_Count(int value);
    [CompilerGeneratedAttribute]
public int get_Uniques();
    [CompilerGeneratedAttribute]
private void set_Uniques(int value);
    [CompilerGeneratedAttribute]
public IReadOnlyList`1<RepositoryTrafficView> get_Views();
    [CompilerGeneratedAttribute]
private void set_Views(IReadOnlyList`1<RepositoryTrafficView> value);
    internal string get_DebuggerDisplay();
}
[DebuggerDisplayAttribute("{DebuggerDisplay,nq}")]
public class Octokit.RepositoryTransfer : object {
    [CompilerGeneratedAttribute]
private string <NewOwner>k__BackingField;
    [CompilerGeneratedAttribute]
private IReadOnlyList`1<long> <TeamIds>k__BackingField;
    public string NewOwner { get; public set; }
    public IReadOnlyList`1<long> TeamIds { get; public set; }
    internal string DebuggerDisplay { get; }
    public RepositoryTransfer(string newOwner);
    public RepositoryTransfer(string newOwner, IReadOnlyList`1<long> teamIds);
    [CompilerGeneratedAttribute]
public string get_NewOwner();
    [CompilerGeneratedAttribute]
public void set_NewOwner(string value);
    [CompilerGeneratedAttribute]
public IReadOnlyList`1<long> get_TeamIds();
    [CompilerGeneratedAttribute]
public void set_TeamIds(IReadOnlyList`1<long> value);
    internal string get_DebuggerDisplay();
}
public enum Octokit.RepositoryType : Enum {
    public int value__;
    [ParameterAttribute]
public static RepositoryType All;
    [ParameterAttribute]
public static RepositoryType Owner;
    [ParameterAttribute]
public static RepositoryType Public;
    [ParameterAttribute]
public static RepositoryType Private;
    [ParameterAttribute]
public static RepositoryType Member;
}
[DebuggerDisplayAttribute("{DebuggerDisplay,nq}")]
public class Octokit.RepositoryUpdate : object {
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Description>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Homepage>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<bool> <Private>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<RepositoryVisibility> <Visibility>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<bool> <HasIssues>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<bool> <HasProjects>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<bool> <HasWiki>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<bool> <HasDownloads>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<bool> <IsTemplate>k__BackingField;
    [CompilerGeneratedAttribute]
private string <DefaultBranch>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<bool> <AllowSquashMerge>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<bool> <AllowMergeCommit>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<bool> <AllowRebaseMerge>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<bool> <AllowAutoMerge>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<bool> <DeleteBranchOnMerge>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<bool> <UseSquashPrTitleAsDefault>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<bool> <Archived>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<bool> <AllowForking>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<bool> <AllowUpdateBranch>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<bool> <WebCommitSignoffRequired>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<bool> <HasDiscussions>k__BackingField;
    [CompilerGeneratedAttribute]
private SecurityAndAnalysisRequest <SecurityAndAnalysis>k__BackingField;
    public string Name { get; public set; }
    public string Description { get; public set; }
    public string Homepage { get; public set; }
    public Nullable`1<bool> Private { get; public set; }
    public Nullable`1<RepositoryVisibility> Visibility { get; public set; }
    public Nullable`1<bool> HasIssues { get; public set; }
    public Nullable`1<bool> HasProjects { get; public set; }
    public Nullable`1<bool> HasWiki { get; public set; }
    public Nullable`1<bool> HasDownloads { get; public set; }
    public Nullable`1<bool> IsTemplate { get; public set; }
    public string DefaultBranch { get; public set; }
    public Nullable`1<bool> AllowSquashMerge { get; public set; }
    public Nullable`1<bool> AllowMergeCommit { get; public set; }
    public Nullable`1<bool> AllowRebaseMerge { get; public set; }
    public Nullable`1<bool> AllowAutoMerge { get; public set; }
    public Nullable`1<bool> DeleteBranchOnMerge { get; public set; }
    public Nullable`1<bool> UseSquashPrTitleAsDefault { get; public set; }
    public Nullable`1<bool> Archived { get; public set; }
    public Nullable`1<bool> AllowForking { get; public set; }
    public Nullable`1<bool> AllowUpdateBranch { get; public set; }
    public Nullable`1<bool> WebCommitSignoffRequired { get; public set; }
    public Nullable`1<bool> HasDiscussions { get; public set; }
    public SecurityAndAnalysisRequest SecurityAndAnalysis { get; public set; }
    internal string DebuggerDisplay { get; }
    [CompilerGeneratedAttribute]
public string get_Name();
    [CompilerGeneratedAttribute]
public void set_Name(string value);
    [CompilerGeneratedAttribute]
public string get_Description();
    [CompilerGeneratedAttribute]
public void set_Description(string value);
    [CompilerGeneratedAttribute]
public string get_Homepage();
    [CompilerGeneratedAttribute]
public void set_Homepage(string value);
    [CompilerGeneratedAttribute]
public Nullable`1<bool> get_Private();
    [CompilerGeneratedAttribute]
public void set_Private(Nullable`1<bool> value);
    [CompilerGeneratedAttribute]
public Nullable`1<RepositoryVisibility> get_Visibility();
    [CompilerGeneratedAttribute]
public void set_Visibility(Nullable`1<RepositoryVisibility> value);
    [CompilerGeneratedAttribute]
public Nullable`1<bool> get_HasIssues();
    [CompilerGeneratedAttribute]
public void set_HasIssues(Nullable`1<bool> value);
    [CompilerGeneratedAttribute]
public Nullable`1<bool> get_HasProjects();
    [CompilerGeneratedAttribute]
public void set_HasProjects(Nullable`1<bool> value);
    [CompilerGeneratedAttribute]
public Nullable`1<bool> get_HasWiki();
    [CompilerGeneratedAttribute]
public void set_HasWiki(Nullable`1<bool> value);
    [CompilerGeneratedAttribute]
public Nullable`1<bool> get_HasDownloads();
    [CompilerGeneratedAttribute]
public void set_HasDownloads(Nullable`1<bool> value);
    [CompilerGeneratedAttribute]
public Nullable`1<bool> get_IsTemplate();
    [CompilerGeneratedAttribute]
public void set_IsTemplate(Nullable`1<bool> value);
    [CompilerGeneratedAttribute]
public string get_DefaultBranch();
    [CompilerGeneratedAttribute]
public void set_DefaultBranch(string value);
    [CompilerGeneratedAttribute]
public Nullable`1<bool> get_AllowSquashMerge();
    [CompilerGeneratedAttribute]
public void set_AllowSquashMerge(Nullable`1<bool> value);
    [CompilerGeneratedAttribute]
public Nullable`1<bool> get_AllowMergeCommit();
    [CompilerGeneratedAttribute]
public void set_AllowMergeCommit(Nullable`1<bool> value);
    [CompilerGeneratedAttribute]
public Nullable`1<bool> get_AllowRebaseMerge();
    [CompilerGeneratedAttribute]
public void set_AllowRebaseMerge(Nullable`1<bool> value);
    [CompilerGeneratedAttribute]
public Nullable`1<bool> get_AllowAutoMerge();
    [CompilerGeneratedAttribute]
public void set_AllowAutoMerge(Nullable`1<bool> value);
    [CompilerGeneratedAttribute]
public Nullable`1<bool> get_DeleteBranchOnMerge();
    [CompilerGeneratedAttribute]
public void set_DeleteBranchOnMerge(Nullable`1<bool> value);
    [CompilerGeneratedAttribute]
public Nullable`1<bool> get_UseSquashPrTitleAsDefault();
    [CompilerGeneratedAttribute]
public void set_UseSquashPrTitleAsDefault(Nullable`1<bool> value);
    [CompilerGeneratedAttribute]
public Nullable`1<bool> get_Archived();
    [CompilerGeneratedAttribute]
public void set_Archived(Nullable`1<bool> value);
    [CompilerGeneratedAttribute]
public Nullable`1<bool> get_AllowForking();
    [CompilerGeneratedAttribute]
public void set_AllowForking(Nullable`1<bool> value);
    [CompilerGeneratedAttribute]
public Nullable`1<bool> get_AllowUpdateBranch();
    [CompilerGeneratedAttribute]
public void set_AllowUpdateBranch(Nullable`1<bool> value);
    [CompilerGeneratedAttribute]
public Nullable`1<bool> get_WebCommitSignoffRequired();
    [CompilerGeneratedAttribute]
public void set_WebCommitSignoffRequired(Nullable`1<bool> value);
    [CompilerGeneratedAttribute]
public Nullable`1<bool> get_HasDiscussions();
    [CompilerGeneratedAttribute]
public void set_HasDiscussions(Nullable`1<bool> value);
    [CompilerGeneratedAttribute]
public SecurityAndAnalysisRequest get_SecurityAndAnalysis();
    [CompilerGeneratedAttribute]
public void set_SecurityAndAnalysis(SecurityAndAnalysisRequest value);
    internal string get_DebuggerDisplay();
}
[DebuggerDisplayAttribute("{DebuggerDisplay,nq}")]
public class Octokit.RepositoryVariable : object {
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Value>k__BackingField;
    [CompilerGeneratedAttribute]
private DateTimeOffset <CreatedAt>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<DateTimeOffset> <UpdatedAt>k__BackingField;
    public string Name { get; protected set; }
    public string Value { get; protected set; }
    public DateTimeOffset CreatedAt { get; protected set; }
    public Nullable`1<DateTimeOffset> UpdatedAt { get; protected set; }
    internal string DebuggerDisplay { get; }
    public RepositoryVariable(string name, string value, DateTimeOffset createdAt, Nullable`1<DateTimeOffset> updatedAt);
    [CompilerGeneratedAttribute]
public string get_Name();
    [CompilerGeneratedAttribute]
protected void set_Name(string value);
    [CompilerGeneratedAttribute]
public string get_Value();
    [CompilerGeneratedAttribute]
protected void set_Value(string value);
    [CompilerGeneratedAttribute]
public DateTimeOffset get_CreatedAt();
    [CompilerGeneratedAttribute]
protected void set_CreatedAt(DateTimeOffset value);
    [CompilerGeneratedAttribute]
public Nullable`1<DateTimeOffset> get_UpdatedAt();
    [CompilerGeneratedAttribute]
protected void set_UpdatedAt(Nullable`1<DateTimeOffset> value);
    internal string get_DebuggerDisplay();
}
public class Octokit.RepositoryVariablesClient : ApiClient {
    public RepositoryVariablesClient(IApiConnection apiConnection);
    [ManualRouteAttribute("GET", "/repos/{owner}/{repo}/actions/organization-variables")]
public sealed virtual Task`1<RepositoryVariablesCollection> GetAllOrganization(string owner, string repoName);
    [ManualRouteAttribute("GET", "/repos/{owner}/{repo}/actions/variables")]
public sealed virtual Task`1<RepositoryVariablesCollection> GetAll(string owner, string repoName);
    [ManualRouteAttribute("GET", "/repos/{owner}/{repo}/actions/variables/{variableName}")]
public sealed virtual Task`1<RepositoryVariable> Get(string owner, string repoName, string variableName);
    [AsyncStateMachineAttribute("Octokit.RepositoryVariablesClient/<Create>d__4")]
[ManualRouteAttribute("POST", "/repos/{owner}/{repo}/actions/variables")]
public sealed virtual Task`1<RepositoryVariable> Create(string owner, string repoName, Variable newVariable);
    [AsyncStateMachineAttribute("Octokit.RepositoryVariablesClient/<Update>d__5")]
[ManualRouteAttribute("PATCH", "/repos/{owner}/{repo}/actions/variables/{variable.Name}")]
public sealed virtual Task`1<RepositoryVariable> Update(string owner, string repoName, Variable variable);
    [ManualRouteAttribute("DELETE", "/repos/{owner}/{repo}/actions/variables/{variableName}")]
public sealed virtual Task Delete(string owner, string repoName, string variableName);
}
[DebuggerDisplayAttribute("{DebuggerDisplay,nq}")]
public class Octokit.RepositoryVariablesCollection : object {
    [CompilerGeneratedAttribute]
private int <TotalCount>k__BackingField;
    [CompilerGeneratedAttribute]
private IReadOnlyList`1<RepositoryVariable> <Variables>k__BackingField;
    public int TotalCount { get; private set; }
    public IReadOnlyList`1<RepositoryVariable> Variables { get; private set; }
    internal string DebuggerDisplay { get; }
    public RepositoryVariablesCollection(int totalCount, IReadOnlyList`1<RepositoryVariable> variables);
    [CompilerGeneratedAttribute]
public int get_TotalCount();
    [CompilerGeneratedAttribute]
private void set_TotalCount(int value);
    [CompilerGeneratedAttribute]
public IReadOnlyList`1<RepositoryVariable> get_Variables();
    [CompilerGeneratedAttribute]
private void set_Variables(IReadOnlyList`1<RepositoryVariable> value);
    internal string get_DebuggerDisplay();
}
public enum Octokit.RepositoryVisibility : Enum {
    public int value__;
    [ParameterAttribute]
public static RepositoryVisibility Public;
    [ParameterAttribute]
public static RepositoryVisibility Private;
    [ParameterAttribute]
public static RepositoryVisibility Internal;
}
public static class Octokit.RequestBody : object {
    public static object Empty;
    private static RequestBody();
}
[DebuggerDisplayAttribute("{DebuggerDisplay,nq}")]
public class Octokit.RequestedReviews : object {
    [CompilerGeneratedAttribute]
private IReadOnlyList`1<User> <Users>k__BackingField;
    [CompilerGeneratedAttribute]
private IReadOnlyList`1<Team> <Teams>k__BackingField;
    public IReadOnlyList`1<User> Users { get; private set; }
    public IReadOnlyList`1<Team> Teams { get; private set; }
    internal string DebuggerDisplay { get; }
    public RequestedReviews(IReadOnlyList`1<User> users, IReadOnlyList`1<Team> teams);
    [CompilerGeneratedAttribute]
public IReadOnlyList`1<User> get_Users();
    [CompilerGeneratedAttribute]
private void set_Users(IReadOnlyList`1<User> value);
    [CompilerGeneratedAttribute]
public IReadOnlyList`1<Team> get_Teams();
    [CompilerGeneratedAttribute]
private void set_Teams(IReadOnlyList`1<Team> value);
    internal string get_DebuggerDisplay();
}
public abstract class Octokit.RequestParameters : object {
    private static ConcurrentDictionary`2<Type, List`1<PropertyParameter>> _propertiesMap;
    private static RequestParameters();
    public virtual IDictionary`2<string, string> ToParametersDictionary();
    private static List`1<PropertyParameter> GetPropertyParametersForType(Type type);
    private static Func`3<PropertyInfo, object, string> GetValueFunc(Type propertyType);
    private static string GetParameterAttributeValueForEnumName(Type enumType, string name);
    [CompilerGeneratedAttribute]
private <>f__AnonymousType15`2<PropertyParameter, string> <ToParametersDictionary>b__1_0(PropertyParameter property);
}
public enum Octokit.ResolvedPackageKeyRelationship : Enum {
    public int value__;
    [ParameterAttribute]
public static ResolvedPackageKeyRelationship Direct;
    [ParameterAttribute]
public static ResolvedPackageKeyRelationship Indirect;
}
public enum Octokit.ResolvedPackageKeyScope : Enum {
    public int value__;
    [ParameterAttribute]
public static ResolvedPackageKeyScope Runtime;
    [ParameterAttribute]
public static ResolvedPackageKeyScope Development;
}
[DebuggerDisplayAttribute("{DebuggerDisplay,nq}")]
public class Octokit.ResourceRateLimit : object {
    [CompilerGeneratedAttribute]
private RateLimit <Core>k__BackingField;
    [CompilerGeneratedAttribute]
private RateLimit <Search>k__BackingField;
    [CompilerGeneratedAttribute]
private RateLimit <Graphql>k__BackingField;
    public RateLimit Core { get; private set; }
    public RateLimit Search { get; private set; }
    public RateLimit Graphql { get; private set; }
    internal string DebuggerDisplay { get; }
    public ResourceRateLimit(RateLimit core, RateLimit search, RateLimit graphQL);
    [CompilerGeneratedAttribute]
public RateLimit get_Core();
    [CompilerGeneratedAttribute]
private void set_Core(RateLimit value);
    [CompilerGeneratedAttribute]
public RateLimit get_Search();
    [CompilerGeneratedAttribute]
private void set_Search(RateLimit value);
    [CompilerGeneratedAttribute]
public RateLimit get_Graphql();
    [CompilerGeneratedAttribute]
private void set_Graphql(RateLimit value);
    internal string get_DebuggerDisplay();
}
[DebuggerDisplayAttribute("{DebuggerDisplay,nq}")]
public class Octokit.Runner : object {
    [CompilerGeneratedAttribute]
private long <Id>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Os>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Status>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <Busy>k__BackingField;
    [CompilerGeneratedAttribute]
private IReadOnlyList`1<RunnerLabel> <Labels>k__BackingField;
    public long Id { get; private set; }
    public string Name { get; private set; }
    public string Os { get; private set; }
    public string Status { get; private set; }
    public bool Busy { get; private set; }
    public IReadOnlyList`1<RunnerLabel> Labels { get; private set; }
    internal string DebuggerDisplay { get; }
    public Runner(long id);
    public Runner(long id, string name, string os, string status, bool busy, List`1<RunnerLabel> labels);
    [CompilerGeneratedAttribute]
public long get_Id();
    [CompilerGeneratedAttribute]
private void set_Id(long value);
    [CompilerGeneratedAttribute]
public string get_Name();
    [CompilerGeneratedAttribute]
private void set_Name(string value);
    [CompilerGeneratedAttribute]
public string get_Os();
    [CompilerGeneratedAttribute]
private void set_Os(string value);
    [CompilerGeneratedAttribute]
public string get_Status();
    [CompilerGeneratedAttribute]
private void set_Status(string value);
    [CompilerGeneratedAttribute]
public bool get_Busy();
    [CompilerGeneratedAttribute]
private void set_Busy(bool value);
    [CompilerGeneratedAttribute]
public IReadOnlyList`1<RunnerLabel> get_Labels();
    [CompilerGeneratedAttribute]
private void set_Labels(IReadOnlyList`1<RunnerLabel> value);
    internal string get_DebuggerDisplay();
}
[DebuggerDisplayAttribute("{DebuggerDisplay,nq}")]
public class Octokit.RunnerApplication : object {
    [CompilerGeneratedAttribute]
private string <Os>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Architecture>k__BackingField;
    [CompilerGeneratedAttribute]
private string <DownloadUrl>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Filename>k__BackingField;
    [CompilerGeneratedAttribute]
private string <TempDownloadToken>k__BackingField;
    public string Os { get; private set; }
    public string Architecture { get; private set; }
    public string DownloadUrl { get; private set; }
    public string Filename { get; private set; }
    public string TempDownloadToken { get; private set; }
    internal string DebuggerDisplay { get; }
    public RunnerApplication(string os, string architecture, string downloadUrl, string filename, string tempDownloadToken);
    [CompilerGeneratedAttribute]
public string get_Os();
    [CompilerGeneratedAttribute]
private void set_Os(string value);
    [CompilerGeneratedAttribute]
public string get_Architecture();
    [CompilerGeneratedAttribute]
private void set_Architecture(string value);
    [CompilerGeneratedAttribute]
public string get_DownloadUrl();
    [CompilerGeneratedAttribute]
private void set_DownloadUrl(string value);
    [CompilerGeneratedAttribute]
public string get_Filename();
    [CompilerGeneratedAttribute]
private void set_Filename(string value);
    [CompilerGeneratedAttribute]
public string get_TempDownloadToken();
    [CompilerGeneratedAttribute]
private void set_TempDownloadToken(string value);
    internal string get_DebuggerDisplay();
}
[DebuggerDisplayAttribute("{DebuggerDisplay,nq}")]
public class Octokit.RunnerGroup : object {
    [CompilerGeneratedAttribute]
private long <Id>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Visibility>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <Default>k__BackingField;
    [CompilerGeneratedAttribute]
private string <RunnersUrl>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <Inherited>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <AllowsPublicRepositories>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <RestrictedToWorkflows>k__BackingField;
    [CompilerGeneratedAttribute]
private IReadOnlyList`1<string> <SelectedWorkflows>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <WorkflowRestrictionsReadOnly>k__BackingField;
    public long Id { get; private set; }
    public string Name { get; private set; }
    public string Visibility { get; private set; }
    public bool Default { get; private set; }
    public string RunnersUrl { get; private set; }
    public bool Inherited { get; private set; }
    public bool AllowsPublicRepositories { get; private set; }
    public bool RestrictedToWorkflows { get; private set; }
    public IReadOnlyList`1<string> SelectedWorkflows { get; private set; }
    public bool WorkflowRestrictionsReadOnly { get; private set; }
    internal string DebuggerDisplay { get; }
    public RunnerGroup(long id);
    public RunnerGroup(long id, string name, string visibility, bool default, string runnersUrl, bool inherited, bool allowsPublicRepositories, bool restrictedToWorkflows, List`1<string> selectedWorkflows, bool workflowRestrictionsReadOnly);
    [CompilerGeneratedAttribute]
public long get_Id();
    [CompilerGeneratedAttribute]
private void set_Id(long value);
    [CompilerGeneratedAttribute]
public string get_Name();
    [CompilerGeneratedAttribute]
private void set_Name(string value);
    [CompilerGeneratedAttribute]
public string get_Visibility();
    [CompilerGeneratedAttribute]
private void set_Visibility(string value);
    [CompilerGeneratedAttribute]
public bool get_Default();
    [CompilerGeneratedAttribute]
private void set_Default(bool value);
    [CompilerGeneratedAttribute]
public string get_RunnersUrl();
    [CompilerGeneratedAttribute]
private void set_RunnersUrl(string value);
    [CompilerGeneratedAttribute]
public bool get_Inherited();
    [CompilerGeneratedAttribute]
private void set_Inherited(bool value);
    [CompilerGeneratedAttribute]
public bool get_AllowsPublicRepositories();
    [CompilerGeneratedAttribute]
private void set_AllowsPublicRepositories(bool value);
    [CompilerGeneratedAttribute]
public bool get_RestrictedToWorkflows();
    [CompilerGeneratedAttribute]
private void set_RestrictedToWorkflows(bool value);
    [CompilerGeneratedAttribute]
public IReadOnlyList`1<string> get_SelectedWorkflows();
    [CompilerGeneratedAttribute]
private void set_SelectedWorkflows(IReadOnlyList`1<string> value);
    [CompilerGeneratedAttribute]
public bool get_WorkflowRestrictionsReadOnly();
    [CompilerGeneratedAttribute]
private void set_WorkflowRestrictionsReadOnly(bool value);
    internal string get_DebuggerDisplay();
}
[DebuggerDisplayAttribute("{DebuggerDisplay,nq}")]
public class Octokit.RunnerGroupResponse : object {
    [CompilerGeneratedAttribute]
private int <TotalCount>k__BackingField;
    [CompilerGeneratedAttribute]
private IReadOnlyList`1<RunnerGroup> <RunnerGroups>k__BackingField;
    public int TotalCount { get; private set; }
    public IReadOnlyList`1<RunnerGroup> RunnerGroups { get; private set; }
    internal string DebuggerDisplay { get; }
    public RunnerGroupResponse(int totalCount, IReadOnlyList`1<RunnerGroup> runnerGroups);
    [CompilerGeneratedAttribute]
public int get_TotalCount();
    [CompilerGeneratedAttribute]
private void set_TotalCount(int value);
    [CompilerGeneratedAttribute]
public IReadOnlyList`1<RunnerGroup> get_RunnerGroups();
    [CompilerGeneratedAttribute]
private void set_RunnerGroups(IReadOnlyList`1<RunnerGroup> value);
    internal string get_DebuggerDisplay();
}
[DebuggerDisplayAttribute("{DebuggerDisplay,nq}")]
public class Octokit.RunnerLabel : object {
    [CompilerGeneratedAttribute]
private long <Id>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Type>k__BackingField;
    public long Id { get; private set; }
    public string Name { get; private set; }
    public string Type { get; private set; }
    internal string DebuggerDisplay { get; }
    public RunnerLabel(long id, string name, string type);
    [CompilerGeneratedAttribute]
public long get_Id();
    [CompilerGeneratedAttribute]
private void set_Id(long value);
    [CompilerGeneratedAttribute]
public string get_Name();
    [CompilerGeneratedAttribute]
private void set_Name(string value);
    [CompilerGeneratedAttribute]
public string get_Type();
    [CompilerGeneratedAttribute]
private void set_Type(string value);
    internal string get_DebuggerDisplay();
}
[DebuggerDisplayAttribute("{DebuggerDisplay,nq}")]
public class Octokit.RunnerResponse : object {
    [CompilerGeneratedAttribute]
private int <TotalCount>k__BackingField;
    [CompilerGeneratedAttribute]
private IReadOnlyList`1<Runner> <Runners>k__BackingField;
    public int TotalCount { get; private set; }
    public IReadOnlyList`1<Runner> Runners { get; private set; }
    internal string DebuggerDisplay { get; }
    public RunnerResponse(int totalCount, IReadOnlyList`1<Runner> runners);
    [CompilerGeneratedAttribute]
public int get_TotalCount();
    [CompilerGeneratedAttribute]
private void set_TotalCount(int value);
    [CompilerGeneratedAttribute]
public IReadOnlyList`1<Runner> get_Runners();
    [CompilerGeneratedAttribute]
private void set_Runners(IReadOnlyList`1<Runner> value);
    internal string get_DebuggerDisplay();
}
public enum Octokit.Scope : Enum {
    public int value__;
    [ParameterAttribute]
public static Scope Unknown;
    [ParameterAttribute]
public static Scope Runtime;
    [ParameterAttribute]
public static Scope Development;
}
public class Octokit.SearchClient : ApiClient {
    public SearchClient(IApiConnection apiConnection);
    [ManualRouteAttribute("GET", "/search/repositories")]
public sealed virtual Task`1<SearchRepositoryResult> SearchRepo(SearchRepositoriesRequest search);
    [ManualRouteAttribute("GET", "/search/users")]
public sealed virtual Task`1<SearchUsersResult> SearchUsers(SearchUsersRequest search);
    [ManualRouteAttribute("GET", "/search/issues")]
public sealed virtual Task`1<SearchIssuesResult> SearchIssues(SearchIssuesRequest search);
    [ManualRouteAttribute("GET", "/search/code")]
public sealed virtual Task`1<SearchCodeResult> SearchCode(SearchCodeRequest search);
    [ManualRouteAttribute("GET", "/search/labels")]
public sealed virtual Task`1<SearchLabelsResult> SearchLabels(SearchLabelsRequest search);
}
[DebuggerDisplayAttribute("{DebuggerDisplay,nq}")]
public class Octokit.SearchCode : object {
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Path>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Sha>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Url>k__BackingField;
    [CompilerGeneratedAttribute]
private string <GitUrl>k__BackingField;
    [CompilerGeneratedAttribute]
private string <HtmlUrl>k__BackingField;
    [CompilerGeneratedAttribute]
private Repository <Repository>k__BackingField;
    public string Name { get; private set; }
    public string Path { get; private set; }
    public string Sha { get; private set; }
    public string Url { get; private set; }
    public string GitUrl { get; private set; }
    public string HtmlUrl { get; private set; }
    public Repository Repository { get; private set; }
    internal string DebuggerDisplay { get; }
    public SearchCode(string name, string path, string sha, string url, string gitUrl, string htmlUrl, Repository repository);
    [CompilerGeneratedAttribute]
public string get_Name();
    [CompilerGeneratedAttribute]
private void set_Name(string value);
    [CompilerGeneratedAttribute]
public string get_Path();
    [CompilerGeneratedAttribute]
private void set_Path(string value);
    [CompilerGeneratedAttribute]
public string get_Sha();
    [CompilerGeneratedAttribute]
private void set_Sha(string value);
    [CompilerGeneratedAttribute]
public string get_Url();
    [CompilerGeneratedAttribute]
private void set_Url(string value);
    [CompilerGeneratedAttribute]
public string get_GitUrl();
    [CompilerGeneratedAttribute]
private void set_GitUrl(string value);
    [CompilerGeneratedAttribute]
public string get_HtmlUrl();
    [CompilerGeneratedAttribute]
private void set_HtmlUrl(string value);
    [CompilerGeneratedAttribute]
public Repository get_Repository();
    [CompilerGeneratedAttribute]
private void set_Repository(Repository value);
    internal string get_DebuggerDisplay();
}
[DebuggerDisplayAttribute("{DebuggerDisplay,nq}")]
public class Octokit.SearchCodeRequest : BaseSearchRequest {
    [CompilerGeneratedAttribute]
private Nullable`1<CodeSearchSort> <SortField>k__BackingField;
    private IEnumerable`1<CodeInQualifier> _inQualifier;
    [CompilerGeneratedAttribute]
private Nullable`1<Language> <Language>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<bool> <Forks>k__BackingField;
    [CompilerGeneratedAttribute]
private Range <Size>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Path>k__BackingField;
    [CompilerGeneratedAttribute]
private IEnumerable`1<string> <Extensions>k__BackingField;
    [CompilerGeneratedAttribute]
private string <FileName>k__BackingField;
    [CompilerGeneratedAttribute]
private IEnumerable`1<string> <Users>k__BackingField;
    [CompilerGeneratedAttribute]
private IEnumerable`1<string> <Organizations>k__BackingField;
    [CompilerGeneratedAttribute]
private RepositoryCollection <Repos>k__BackingField;
    public Nullable`1<CodeSearchSort> SortField { get; public set; }
    public string Sort { get; }
    public IEnumerable`1<CodeInQualifier> In { get; public set; }
    public Nullable`1<Language> Language { get; public set; }
    public Nullable`1<bool> Forks { get; public set; }
    public Range Size { get; public set; }
    public string Path { get; public set; }
    public IEnumerable`1<string> Extensions { get; public set; }
    public string FileName { get; public set; }
    public IEnumerable`1<string> Users { get; public set; }
    public IEnumerable`1<string> Organizations { get; public set; }
    public RepositoryCollection Repos { get; public set; }
    internal string DebuggerDisplay { get; }
    public SearchCodeRequest(string term);
    public SearchCodeRequest(string term, string owner, string name);
    [CompilerGeneratedAttribute]
public Nullable`1<CodeSearchSort> get_SortField();
    [CompilerGeneratedAttribute]
public void set_SortField(Nullable`1<CodeSearchSort> value);
    public virtual string get_Sort();
    public IEnumerable`1<CodeInQualifier> get_In();
    public void set_In(IEnumerable`1<CodeInQualifier> value);
    [CompilerGeneratedAttribute]
public Nullable`1<Language> get_Language();
    [CompilerGeneratedAttribute]
public void set_Language(Nullable`1<Language> value);
    [CompilerGeneratedAttribute]
public Nullable`1<bool> get_Forks();
    [CompilerGeneratedAttribute]
public void set_Forks(Nullable`1<bool> value);
    [CompilerGeneratedAttribute]
public Range get_Size();
    [CompilerGeneratedAttribute]
public void set_Size(Range value);
    [CompilerGeneratedAttribute]
public string get_Path();
    [CompilerGeneratedAttribute]
public void set_Path(string value);
    [CompilerGeneratedAttribute]
public IEnumerable`1<string> get_Extensions();
    [CompilerGeneratedAttribute]
public void set_Extensions(IEnumerable`1<string> value);
    [CompilerGeneratedAttribute]
public string get_FileName();
    [CompilerGeneratedAttribute]
public void set_FileName(string value);
    [CompilerGeneratedAttribute]
public IEnumerable`1<string> get_Users();
    [CompilerGeneratedAttribute]
public void set_Users(IEnumerable`1<string> value);
    [CompilerGeneratedAttribute]
public IEnumerable`1<string> get_Organizations();
    [CompilerGeneratedAttribute]
public void set_Organizations(IEnumerable`1<string> value);
    [CompilerGeneratedAttribute]
public RepositoryCollection get_Repos();
    [CompilerGeneratedAttribute]
public void set_Repos(RepositoryCollection value);
    public virtual IReadOnlyList`1<string> MergedQualifiers();
    internal string get_DebuggerDisplay();
}
[DebuggerDisplayAttribute("{DebuggerDisplay,nq}")]
public class Octokit.SearchCodeResult : SearchResult`1<SearchCode> {
    public SearchCodeResult(int totalCount, bool incompleteResults, IReadOnlyList`1<SearchCode> items);
}
[DebuggerDisplayAttribute("{DebuggerDisplay,nq}")]
public class Octokit.SearchIndexingResponse : object {
    [CompilerGeneratedAttribute]
private IReadOnlyList`1<string> <Message>k__BackingField;
    public IReadOnlyList`1<string> Message { get; private set; }
    internal string DebuggerDisplay { get; }
    public SearchIndexingResponse(IReadOnlyList`1<string> message);
    [CompilerGeneratedAttribute]
public IReadOnlyList`1<string> get_Message();
    [CompilerGeneratedAttribute]
private void set_Message(IReadOnlyList`1<string> value);
    internal string get_DebuggerDisplay();
}
public class Octokit.SearchIndexTarget : object {
    [CompilerGeneratedAttribute]
private string <Target>k__BackingField;
    public string Target { get; protected set; }
    public SearchIndexTarget(string target);
    [CompilerGeneratedAttribute]
public string get_Target();
    [CompilerGeneratedAttribute]
protected void set_Target(string value);
}
[DebuggerDisplayAttribute("{DebuggerDisplay,nq}")]
public class Octokit.SearchIssuesRequest : BaseSearchRequest {
    [CompilerGeneratedAttribute]
private Nullable`1<IssueSearchSort> <SortField>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<IssueTypeQualifier> <Type>k__BackingField;
    private IEnumerable`1<IssueInQualifier> _inQualifier;
    [CompilerGeneratedAttribute]
private string <Author>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Assignee>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Mentions>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Commenter>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Involves>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Team>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<ItemState> <State>k__BackingField;
    private IEnumerable`1<string> _labels;
    [CompilerGeneratedAttribute]
private Nullable`1<IssueNoMetadataQualifier> <No>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<Language> <Language>k__BackingField;
    private IEnumerable`1<IssueIsQualifier> _is;
    [CompilerGeneratedAttribute]
private DateRange <Created>k__BackingField;
    [CompilerGeneratedAttribute]
private DateRange <Updated>k__BackingField;
    [CompilerGeneratedAttribute]
private DateRange <Merged>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<CommitState> <Status>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Head>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Base>k__BackingField;
    [CompilerGeneratedAttribute]
private DateRange <Closed>k__BackingField;
    [CompilerGeneratedAttribute]
private Range <Comments>k__BackingField;
    [CompilerGeneratedAttribute]
private string <User>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Milestone>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<bool> <Archived>k__BackingField;
    [CompilerGeneratedAttribute]
private RepositoryCollection <Repos>k__BackingField;
    [CompilerGeneratedAttribute]
private SearchIssuesRequestExclusions <Exclusions>k__BackingField;
    public Nullable`1<IssueSearchSort> SortField { get; public set; }
    public string Sort { get; }
    public Nullable`1<IssueTypeQualifier> Type { get; public set; }
    public IEnumerable`1<IssueInQualifier> In { get; public set; }
    public string Author { get; public set; }
    public string Assignee { get; public set; }
    public string Mentions { get; public set; }
    public string Commenter { get; public set; }
    public string Involves { get; public set; }
    public string Team { get; public set; }
    public Nullable`1<ItemState> State { get; public set; }
    public IEnumerable`1<string> Labels { get; public set; }
    public Nullable`1<IssueNoMetadataQualifier> No { get; public set; }
    public Nullable`1<Language> Language { get; public set; }
    public IEnumerable`1<IssueIsQualifier> Is { get; public set; }
    public DateRange Created { get; public set; }
    public DateRange Updated { get; public set; }
    public DateRange Merged { get; public set; }
    public Nullable`1<CommitState> Status { get; public set; }
    public string Head { get; public set; }
    public string Base { get; public set; }
    public DateRange Closed { get; public set; }
    public Range Comments { get; public set; }
    public string User { get; public set; }
    public string Milestone { get; public set; }
    public Nullable`1<bool> Archived { get; public set; }
    public RepositoryCollection Repos { get; public set; }
    public SearchIssuesRequestExclusions Exclusions { get; public set; }
    internal string DebuggerDisplay { get; }
    public SearchIssuesRequest(string term);
    [CompilerGeneratedAttribute]
public Nullable`1<IssueSearchSort> get_SortField();
    [CompilerGeneratedAttribute]
public void set_SortField(Nullable`1<IssueSearchSort> value);
    public virtual string get_Sort();
    [CompilerGeneratedAttribute]
public Nullable`1<IssueTypeQualifier> get_Type();
    [CompilerGeneratedAttribute]
public void set_Type(Nullable`1<IssueTypeQualifier> value);
    public IEnumerable`1<IssueInQualifier> get_In();
    public void set_In(IEnumerable`1<IssueInQualifier> value);
    [CompilerGeneratedAttribute]
public string get_Author();
    [CompilerGeneratedAttribute]
public void set_Author(string value);
    [CompilerGeneratedAttribute]
public string get_Assignee();
    [CompilerGeneratedAttribute]
public void set_Assignee(string value);
    [CompilerGeneratedAttribute]
public string get_Mentions();
    [CompilerGeneratedAttribute]
public void set_Mentions(string value);
    [CompilerGeneratedAttribute]
public string get_Commenter();
    [CompilerGeneratedAttribute]
public void set_Commenter(string value);
    [CompilerGeneratedAttribute]
public string get_Involves();
    [CompilerGeneratedAttribute]
public void set_Involves(string value);
    [CompilerGeneratedAttribute]
public string get_Team();
    [CompilerGeneratedAttribute]
public void set_Team(string value);
    [CompilerGeneratedAttribute]
public Nullable`1<ItemState> get_State();
    [CompilerGeneratedAttribute]
public void set_State(Nullable`1<ItemState> value);
    public IEnumerable`1<string> get_Labels();
    public void set_Labels(IEnumerable`1<string> value);
    [CompilerGeneratedAttribute]
public Nullable`1<IssueNoMetadataQualifier> get_No();
    [CompilerGeneratedAttribute]
public void set_No(Nullable`1<IssueNoMetadataQualifier> value);
    [CompilerGeneratedAttribute]
public Nullable`1<Language> get_Language();
    [CompilerGeneratedAttribute]
public void set_Language(Nullable`1<Language> value);
    public IEnumerable`1<IssueIsQualifier> get_Is();
    public void set_Is(IEnumerable`1<IssueIsQualifier> value);
    [CompilerGeneratedAttribute]
public DateRange get_Created();
    [CompilerGeneratedAttribute]
public void set_Created(DateRange value);
    [CompilerGeneratedAttribute]
public DateRange get_Updated();
    [CompilerGeneratedAttribute]
public void set_Updated(DateRange value);
    [CompilerGeneratedAttribute]
public DateRange get_Merged();
    [CompilerGeneratedAttribute]
public void set_Merged(DateRange value);
    [CompilerGeneratedAttribute]
public Nullable`1<CommitState> get_Status();
    [CompilerGeneratedAttribute]
public void set_Status(Nullable`1<CommitState> value);
    [CompilerGeneratedAttribute]
public string get_Head();
    [CompilerGeneratedAttribute]
public void set_Head(string value);
    [CompilerGeneratedAttribute]
public string get_Base();
    [CompilerGeneratedAttribute]
public void set_Base(string value);
    [CompilerGeneratedAttribute]
public DateRange get_Closed();
    [CompilerGeneratedAttribute]
public void set_Closed(DateRange value);
    [CompilerGeneratedAttribute]
public Range get_Comments();
    [CompilerGeneratedAttribute]
public void set_Comments(Range value);
    [CompilerGeneratedAttribute]
public string get_User();
    [CompilerGeneratedAttribute]
public void set_User(string value);
    [CompilerGeneratedAttribute]
public string get_Milestone();
    [CompilerGeneratedAttribute]
public void set_Milestone(string value);
    [CompilerGeneratedAttribute]
public Nullable`1<bool> get_Archived();
    [CompilerGeneratedAttribute]
public void set_Archived(Nullable`1<bool> value);
    [CompilerGeneratedAttribute]
public RepositoryCollection get_Repos();
    [CompilerGeneratedAttribute]
public void set_Repos(RepositoryCollection value);
    [CompilerGeneratedAttribute]
public SearchIssuesRequestExclusions get_Exclusions();
    [CompilerGeneratedAttribute]
public void set_Exclusions(SearchIssuesRequestExclusions value);
    public virtual IReadOnlyList`1<string> MergedQualifiers();
    internal string get_DebuggerDisplay();
    private static string FormatLabel(string label);
    [CompilerGeneratedAttribute]
internal static string <FormatLabel>g__WrapInQuotesIfContainsSpace|115_0(string l);
}
[DebuggerDisplayAttribute("{DebuggerDisplay,nq}")]
public class Octokit.SearchIssuesRequestExclusions : object {
    [CompilerGeneratedAttribute]
private string <Author>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Assignee>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Mentions>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Commenter>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Involves>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<ItemState> <State>k__BackingField;
    private IEnumerable`1<string> _labels;
    [CompilerGeneratedAttribute]
private Nullable`1<Language> <Language>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<CommitState> <Status>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Head>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Base>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Milestone>k__BackingField;
    public string Author { get; public set; }
    public string Assignee { get; public set; }
    public string Mentions { get; public set; }
    public string Commenter { get; public set; }
    public string Involves { get; public set; }
    public Nullable`1<ItemState> State { get; public set; }
    public IEnumerable`1<string> Labels { get; public set; }
    public Nullable`1<Language> Language { get; public set; }
    public Nullable`1<CommitState> Status { get; public set; }
    public string Head { get; public set; }
    public string Base { get; public set; }
    public string Milestone { get; public set; }
    internal string DebuggerDisplay { get; }
    [CompilerGeneratedAttribute]
public string get_Author();
    [CompilerGeneratedAttribute]
public void set_Author(string value);
    [CompilerGeneratedAttribute]
public string get_Assignee();
    [CompilerGeneratedAttribute]
public void set_Assignee(string value);
    [CompilerGeneratedAttribute]
public string get_Mentions();
    [CompilerGeneratedAttribute]
public void set_Mentions(string value);
    [CompilerGeneratedAttribute]
public string get_Commenter();
    [CompilerGeneratedAttribute]
public void set_Commenter(string value);
    [CompilerGeneratedAttribute]
public string get_Involves();
    [CompilerGeneratedAttribute]
public void set_Involves(string value);
    [CompilerGeneratedAttribute]
public Nullable`1<ItemState> get_State();
    [CompilerGeneratedAttribute]
public void set_State(Nullable`1<ItemState> value);
    public IEnumerable`1<string> get_Labels();
    public void set_Labels(IEnumerable`1<string> value);
    [CompilerGeneratedAttribute]
public Nullable`1<Language> get_Language();
    [CompilerGeneratedAttribute]
public void set_Language(Nullable`1<Language> value);
    [CompilerGeneratedAttribute]
public Nullable`1<CommitState> get_Status();
    [CompilerGeneratedAttribute]
public void set_Status(Nullable`1<CommitState> value);
    [CompilerGeneratedAttribute]
public string get_Head();
    [CompilerGeneratedAttribute]
public void set_Head(string value);
    [CompilerGeneratedAttribute]
public string get_Base();
    [CompilerGeneratedAttribute]
public void set_Base(string value);
    [CompilerGeneratedAttribute]
public string get_Milestone();
    [CompilerGeneratedAttribute]
public void set_Milestone(string value);
    public IReadOnlyList`1<string> MergedQualifiers();
    internal string get_DebuggerDisplay();
}
[DebuggerDisplayAttribute("{DebuggerDisplay,nq}")]
public class Octokit.SearchIssuesResult : SearchResult`1<Issue> {
    public SearchIssuesResult(int totalCount, bool incompleteResults, IReadOnlyList`1<Issue> items);
}
[DebuggerDisplayAttribute("{DebuggerDisplay,nq}")]
public class Octokit.SearchLabelsRequest : BaseSearchRequest {
    [CompilerGeneratedAttribute]
private Nullable`1<LabelSearchSort> <SortField>k__BackingField;
    [CompilerGeneratedAttribute]
private long <RepositoryId>k__BackingField;
    public Nullable`1<LabelSearchSort> SortField { get; public set; }
    public string Sort { get; }
    public long RepositoryId { get; public set; }
    internal string DebuggerDisplay { get; }
    public SearchLabelsRequest(string term, long repositoryId);
    [CompilerGeneratedAttribute]
public Nullable`1<LabelSearchSort> get_SortField();
    [CompilerGeneratedAttribute]
public void set_SortField(Nullable`1<LabelSearchSort> value);
    public virtual string get_Sort();
    [CompilerGeneratedAttribute]
public long get_RepositoryId();
    [CompilerGeneratedAttribute]
public void set_RepositoryId(long value);
    public virtual IDictionary`2<string, string> AdditionalParameters();
    internal string get_DebuggerDisplay();
}
[DebuggerDisplayAttribute("{DebuggerDisplay,nq}")]
public class Octokit.SearchLabelsResult : SearchResult`1<Label> {
    public SearchLabelsResult(int totalCount, bool incompleteResults, IReadOnlyList`1<Label> items);
}
public enum Octokit.SearchQualifierOperator : Enum {
    public int value__;
    public static SearchQualifierOperator GreaterThan;
    public static SearchQualifierOperator LessThan;
    public static SearchQualifierOperator LessThanOrEqualTo;
    public static SearchQualifierOperator GreaterThanOrEqualTo;
}
[DebuggerDisplayAttribute("{DebuggerDisplay,nq}")]
public class Octokit.SearchRepositoriesRequest : BaseSearchRequest {
    [CompilerGeneratedAttribute]
private Nullable`1<RepoSearchSort> <SortField>k__BackingField;
    private IEnumerable`1<InQualifier> _inQualifier;
    [CompilerGeneratedAttribute]
private Range <Forks>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<ForkQualifier> <Fork>k__BackingField;
    [CompilerGeneratedAttribute]
private Range <Size>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<Language> <Language>k__BackingField;
    [CompilerGeneratedAttribute]
private Range <Stars>k__BackingField;
    [CompilerGeneratedAttribute]
private string <User>k__BackingField;
    [CompilerGeneratedAttribute]
private DateRange <Created>k__BackingField;
    [CompilerGeneratedAttribute]
private DateRange <Updated>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<RepoSearchLicense> <License>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<bool> <Archived>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Topic>k__BackingField;
    [CompilerGeneratedAttribute]
private Range <Topics>k__BackingField;
    [CompilerGeneratedAttribute]
private IDictionary`2<string, string> <CustomProperties>k__BackingField;
    public Nullable`1<RepoSearchSort> SortField { get; public set; }
    public string Sort { get; }
    public IEnumerable`1<InQualifier> In { get; public set; }
    public Range Forks { get; public set; }
    public Nullable`1<ForkQualifier> Fork { get; public set; }
    public Range Size { get; public set; }
    public Nullable`1<Language> Language { get; public set; }
    public Range Stars { get; public set; }
    public string User { get; public set; }
    public DateRange Created { get; public set; }
    public DateRange Updated { get; public set; }
    public Nullable`1<RepoSearchLicense> License { get; public set; }
    public Nullable`1<bool> Archived { get; public set; }
    public string Topic { get; public set; }
    public Range Topics { get; public set; }
    public IDictionary`2<string, string> CustomProperties { get; public set; }
    internal string DebuggerDisplay { get; }
    public SearchRepositoriesRequest(string term);
    [CompilerGeneratedAttribute]
public Nullable`1<RepoSearchSort> get_SortField();
    [CompilerGeneratedAttribute]
public void set_SortField(Nullable`1<RepoSearchSort> value);
    public virtual string get_Sort();
    public IEnumerable`1<InQualifier> get_In();
    public void set_In(IEnumerable`1<InQualifier> value);
    [CompilerGeneratedAttribute]
public Range get_Forks();
    [CompilerGeneratedAttribute]
public void set_Forks(Range value);
    [CompilerGeneratedAttribute]
public Nullable`1<ForkQualifier> get_Fork();
    [CompilerGeneratedAttribute]
public void set_Fork(Nullable`1<ForkQualifier> value);
    [CompilerGeneratedAttribute]
public Range get_Size();
    [CompilerGeneratedAttribute]
public void set_Size(Range value);
    [CompilerGeneratedAttribute]
public Nullable`1<Language> get_Language();
    [CompilerGeneratedAttribute]
public void set_Language(Nullable`1<Language> value);
    [CompilerGeneratedAttribute]
public Range get_Stars();
    [CompilerGeneratedAttribute]
public void set_Stars(Range value);
    [CompilerGeneratedAttribute]
public string get_User();
    [CompilerGeneratedAttribute]
public void set_User(string value);
    [CompilerGeneratedAttribute]
public DateRange get_Created();
    [CompilerGeneratedAttribute]
public void set_Created(DateRange value);
    [CompilerGeneratedAttribute]
public DateRange get_Updated();
    [CompilerGeneratedAttribute]
public void set_Updated(DateRange value);
    [CompilerGeneratedAttribute]
public Nullable`1<RepoSearchLicense> get_License();
    [CompilerGeneratedAttribute]
public void set_License(Nullable`1<RepoSearchLicense> value);
    [CompilerGeneratedAttribute]
public Nullable`1<bool> get_Archived();
    [CompilerGeneratedAttribute]
public void set_Archived(Nullable`1<bool> value);
    [CompilerGeneratedAttribute]
public string get_Topic();
    [CompilerGeneratedAttribute]
public void set_Topic(string value);
    [CompilerGeneratedAttribute]
public Range get_Topics();
    [CompilerGeneratedAttribute]
public void set_Topics(Range value);
    [CompilerGeneratedAttribute]
public IDictionary`2<string, string> get_CustomProperties();
    [CompilerGeneratedAttribute]
public void set_CustomProperties(IDictionary`2<string, string> value);
    public virtual IReadOnlyList`1<string> MergedQualifiers();
    internal string get_DebuggerDisplay();
}
[DebuggerDisplayAttribute("{DebuggerDisplay,nq}")]
public class Octokit.SearchRepositoryResult : SearchResult`1<Repository> {
    public SearchRepositoryResult(int totalCount, bool incompleteResults, IReadOnlyList`1<Repository> items);
}
[DebuggerDisplayAttribute("{DebuggerDisplay,nq}")]
public class Octokit.SearchUsersRequest : BaseSearchRequest {
    [CompilerGeneratedAttribute]
private Nullable`1<UsersSearchSort> <SortField>k__BackingField;
    [CompilerGeneratedAttribute]
private Range <Followers>k__BackingField;
    [CompilerGeneratedAttribute]
private DateRange <Created>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Location>k__BackingField;
    [CompilerGeneratedAttribute]
private Range <Repositories>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<Language> <Language>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<AccountSearchType> <AccountType>k__BackingField;
    private IEnumerable`1<UserInQualifier> _inQualifier;
    public Nullable`1<UsersSearchSort> SortField { get; public set; }
    public string Sort { get; }
    public Range Followers { get; public set; }
    public DateRange Created { get; public set; }
    public string Location { get; public set; }
    public Range Repositories { get; public set; }
    public Nullable`1<Language> Language { get; public set; }
    public Nullable`1<AccountSearchType> AccountType { get; public set; }
    public IEnumerable`1<UserInQualifier> In { get; public set; }
    internal string DebuggerDisplay { get; }
    public SearchUsersRequest(string term);
    [CompilerGeneratedAttribute]
public Nullable`1<UsersSearchSort> get_SortField();
    [CompilerGeneratedAttribute]
public void set_SortField(Nullable`1<UsersSearchSort> value);
    public virtual string get_Sort();
    [CompilerGeneratedAttribute]
public Range get_Followers();
    [CompilerGeneratedAttribute]
public void set_Followers(Range value);
    [CompilerGeneratedAttribute]
public DateRange get_Created();
    [CompilerGeneratedAttribute]
public void set_Created(DateRange value);
    [CompilerGeneratedAttribute]
public string get_Location();
    [CompilerGeneratedAttribute]
public void set_Location(string value);
    [CompilerGeneratedAttribute]
public Range get_Repositories();
    [CompilerGeneratedAttribute]
public void set_Repositories(Range value);
    [CompilerGeneratedAttribute]
public Nullable`1<Language> get_Language();
    [CompilerGeneratedAttribute]
public void set_Language(Nullable`1<Language> value);
    [CompilerGeneratedAttribute]
public Nullable`1<AccountSearchType> get_AccountType();
    [CompilerGeneratedAttribute]
public void set_AccountType(Nullable`1<AccountSearchType> value);
    public IEnumerable`1<UserInQualifier> get_In();
    public void set_In(IEnumerable`1<UserInQualifier> value);
    public virtual IReadOnlyList`1<string> MergedQualifiers();
    internal string get_DebuggerDisplay();
}
[DebuggerDisplayAttribute("{DebuggerDisplay,nq}")]
public class Octokit.SearchUsersResult : SearchResult`1<User> {
    public SearchUsersResult(int totalCount, bool incompleteResults, IReadOnlyList`1<User> items);
}
[DebuggerDisplayAttribute("{DebuggerDisplay,nq}")]
public class Octokit.SeatBreakdown : object {
    [CompilerGeneratedAttribute]
private long <Total>k__BackingField;
    [CompilerGeneratedAttribute]
private long <AddedThisCycle>k__BackingField;
    [CompilerGeneratedAttribute]
private long <PendingInvitation>k__BackingField;
    [CompilerGeneratedAttribute]
private long <PendingCancellation>k__BackingField;
    [CompilerGeneratedAttribute]
private long <ActiveThisCycle>k__BackingField;
    [CompilerGeneratedAttribute]
private long <InactiveThisCycle>k__BackingField;
    public long Total { get; private set; }
    public long AddedThisCycle { get; private set; }
    public long PendingInvitation { get; private set; }
    public long PendingCancellation { get; private set; }
    public long ActiveThisCycle { get; private set; }
    public long InactiveThisCycle { get; private set; }
    internal string DebuggerDisplay { get; }
    public SeatBreakdown(long total, long addedThisCycle, long pendingInvitation, long pendingCancellation, long activeThisCycle, long inactiveThisCycle);
    [CompilerGeneratedAttribute]
public long get_Total();
    [CompilerGeneratedAttribute]
private void set_Total(long value);
    [CompilerGeneratedAttribute]
public long get_AddedThisCycle();
    [CompilerGeneratedAttribute]
private void set_AddedThisCycle(long value);
    [CompilerGeneratedAttribute]
public long get_PendingInvitation();
    [CompilerGeneratedAttribute]
private void set_PendingInvitation(long value);
    [CompilerGeneratedAttribute]
public long get_PendingCancellation();
    [CompilerGeneratedAttribute]
private void set_PendingCancellation(long value);
    [CompilerGeneratedAttribute]
public long get_ActiveThisCycle();
    [CompilerGeneratedAttribute]
private void set_ActiveThisCycle(long value);
    [CompilerGeneratedAttribute]
public long get_InactiveThisCycle();
    [CompilerGeneratedAttribute]
private void set_InactiveThisCycle(long value);
    internal string get_DebuggerDisplay();
}
public class Octokit.SecondaryRateLimitExceededException : ForbiddenException {
    public string Message { get; }
    public SecondaryRateLimitExceededException(IResponse response);
    public SecondaryRateLimitExceededException(IResponse response, Exception innerException);
    protected SecondaryRateLimitExceededException(SerializationInfo info, StreamingContext context);
    public virtual string get_Message();
}
[DebuggerDisplayAttribute("{DebuggerDisplay,nq}")]
public class Octokit.SecretScanning : object {
    [CompilerGeneratedAttribute]
private string <Status>k__BackingField;
    public string Status { get; protected set; }
    internal string DebuggerDisplay { get; }
    public SecretScanning(string status);
    [CompilerGeneratedAttribute]
public string get_Status();
    [CompilerGeneratedAttribute]
protected void set_Status(string value);
    internal string get_DebuggerDisplay();
}
[DebuggerDisplayAttribute("{DebuggerDisplay,nq}")]
public class Octokit.SecretScanningPushProtection : object {
    [CompilerGeneratedAttribute]
private string <Status>k__BackingField;
    public string Status { get; protected set; }
    internal string DebuggerDisplay { get; }
    public SecretScanningPushProtection(string status);
    [CompilerGeneratedAttribute]
public string get_Status();
    [CompilerGeneratedAttribute]
protected void set_Status(string value);
    internal string get_DebuggerDisplay();
}
[DebuggerDisplayAttribute("{DebuggerDisplay,nq}")]
public class Octokit.SecretScanningPushProtectionRequest : object {
    [CompilerGeneratedAttribute]
private Nullable`1<Status> <Status>k__BackingField;
    public Nullable`1<Status> Status { get; public set; }
    internal string DebuggerDisplay { get; }
    public SecretScanningPushProtectionRequest(Nullable`1<Status> status);
    [CompilerGeneratedAttribute]
public Nullable`1<Status> get_Status();
    [CompilerGeneratedAttribute]
public void set_Status(Nullable`1<Status> value);
    internal string get_DebuggerDisplay();
}
[DebuggerDisplayAttribute("{DebuggerDisplay,nq}")]
public class Octokit.SecretScanningRequest : object {
    [CompilerGeneratedAttribute]
private Nullable`1<Status> <Status>k__BackingField;
    public Nullable`1<Status> Status { get; public set; }
    internal string DebuggerDisplay { get; }
    public SecretScanningRequest(Nullable`1<Status> status);
    [CompilerGeneratedAttribute]
public Nullable`1<Status> get_Status();
    [CompilerGeneratedAttribute]
public void set_Status(Nullable`1<Status> value);
    internal string get_DebuggerDisplay();
}
[DebuggerDisplayAttribute("{DebuggerDisplay,nq}")]
public class Octokit.SecretScanningValidityChecks : object {
    [CompilerGeneratedAttribute]
private string <Status>k__BackingField;
    public string Status { get; protected set; }
    internal string DebuggerDisplay { get; }
    public SecretScanningValidityChecks(string status);
    [CompilerGeneratedAttribute]
public string get_Status();
    [CompilerGeneratedAttribute]
protected void set_Status(string value);
    internal string get_DebuggerDisplay();
}
[DebuggerDisplayAttribute("{DebuggerDisplay,nq}")]
public class Octokit.SecretScanningValidityChecksRequest : object {
    [CompilerGeneratedAttribute]
private Nullable`1<Status> <Status>k__BackingField;
    public Nullable`1<Status> Status { get; public set; }
    internal string DebuggerDisplay { get; }
    public SecretScanningValidityChecksRequest(Nullable`1<Status> status);
    [CompilerGeneratedAttribute]
public Nullable`1<Status> get_Status();
    [CompilerGeneratedAttribute]
public void set_Status(Nullable`1<Status> value);
    internal string get_DebuggerDisplay();
}
[DebuggerDisplayAttribute("{DebuggerDisplay,nq}")]
public class Octokit.SecretsPublicKey : object {
    [CompilerGeneratedAttribute]
private string <KeyId>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Key>k__BackingField;
    public string KeyId { get; private set; }
    public string Key { get; private set; }
    internal string DebuggerDisplay { get; }
    public SecretsPublicKey(string keyId, string key);
    [CompilerGeneratedAttribute]
public string get_KeyId();
    [CompilerGeneratedAttribute]
private void set_KeyId(string value);
    [CompilerGeneratedAttribute]
public string get_Key();
    [CompilerGeneratedAttribute]
private void set_Key(string value);
    internal string get_DebuggerDisplay();
}
[DebuggerDisplayAttribute("{DebuggerDisplay,nq}")]
public class Octokit.SecurityAndAnalysis : object {
    [CompilerGeneratedAttribute]
private AdvancedSecurity <AdvancedSecurity>k__BackingField;
    [CompilerGeneratedAttribute]
private DependabotSecurityUpdates <DependabotSecurityUpdates>k__BackingField;
    [CompilerGeneratedAttribute]
private SecretScanning <SecretScanning>k__BackingField;
    [CompilerGeneratedAttribute]
private SecretScanningPushProtection <SecretScanningPushProtection>k__BackingField;
    [CompilerGeneratedAttribute]
private SecretScanningValidityChecks <SecretScanningValidityChecks>k__BackingField;
    public AdvancedSecurity AdvancedSecurity { get; protected set; }
    public DependabotSecurityUpdates DependabotSecurityUpdates { get; protected set; }
    public SecretScanning SecretScanning { get; protected set; }
    public SecretScanningPushProtection SecretScanningPushProtection { get; protected set; }
    public SecretScanningValidityChecks SecretScanningValidityChecks { get; protected set; }
    internal string DebuggerDisplay { get; }
    public SecurityAndAnalysis(AdvancedSecurity advancedSecurity, DependabotSecurityUpdates dependabotSecurityUpdates, SecretScanning secretScanning, SecretScanningPushProtection secretScanningPushProtection, SecretScanningValidityChecks secretScanningValidityChecks);
    [CompilerGeneratedAttribute]
public AdvancedSecurity get_AdvancedSecurity();
    [CompilerGeneratedAttribute]
protected void set_AdvancedSecurity(AdvancedSecurity value);
    [CompilerGeneratedAttribute]
public DependabotSecurityUpdates get_DependabotSecurityUpdates();
    [CompilerGeneratedAttribute]
protected void set_DependabotSecurityUpdates(DependabotSecurityUpdates value);
    [CompilerGeneratedAttribute]
public SecretScanning get_SecretScanning();
    [CompilerGeneratedAttribute]
protected void set_SecretScanning(SecretScanning value);
    [CompilerGeneratedAttribute]
public SecretScanningPushProtection get_SecretScanningPushProtection();
    [CompilerGeneratedAttribute]
protected void set_SecretScanningPushProtection(SecretScanningPushProtection value);
    [CompilerGeneratedAttribute]
public SecretScanningValidityChecks get_SecretScanningValidityChecks();
    [CompilerGeneratedAttribute]
protected void set_SecretScanningValidityChecks(SecretScanningValidityChecks value);
    internal string get_DebuggerDisplay();
}
[DebuggerDisplayAttribute("{DebuggerDisplay,nq}")]
public class Octokit.SecurityAndAnalysisRequest : object {
    [CompilerGeneratedAttribute]
private AdvancedSecurityRequest <AdvancedSecurity>k__BackingField;
    [CompilerGeneratedAttribute]
private DependabotSecurityUpdatesRequest <DependabotSecurityUpdates>k__BackingField;
    [CompilerGeneratedAttribute]
private SecretScanningRequest <SecretScanning>k__BackingField;
    [CompilerGeneratedAttribute]
private SecretScanningPushProtectionRequest <SecretScanningPushProtection>k__BackingField;
    [CompilerGeneratedAttribute]
private SecretScanningValidityChecksRequest <SecretScanningValidityChecks>k__BackingField;
    public AdvancedSecurityRequest AdvancedSecurity { get; public set; }
    public DependabotSecurityUpdatesRequest DependabotSecurityUpdates { get; public set; }
    public SecretScanningRequest SecretScanning { get; public set; }
    public SecretScanningPushProtectionRequest SecretScanningPushProtection { get; public set; }
    public SecretScanningValidityChecksRequest SecretScanningValidityChecks { get; public set; }
    internal string DebuggerDisplay { get; }
    public SecurityAndAnalysisRequest(AdvancedSecurityRequest advancedSecurity, DependabotSecurityUpdatesRequest dependabotSecurityUpdates, SecretScanningRequest secretScanning, SecretScanningPushProtectionRequest secretScanningPushProtection, SecretScanningValidityChecksRequest secretScanningValidityChecks);
    [CompilerGeneratedAttribute]
public AdvancedSecurityRequest get_AdvancedSecurity();
    [CompilerGeneratedAttribute]
public void set_AdvancedSecurity(AdvancedSecurityRequest value);
    [CompilerGeneratedAttribute]
public DependabotSecurityUpdatesRequest get_DependabotSecurityUpdates();
    [CompilerGeneratedAttribute]
public void set_DependabotSecurityUpdates(DependabotSecurityUpdatesRequest value);
    [CompilerGeneratedAttribute]
public SecretScanningRequest get_SecretScanning();
    [CompilerGeneratedAttribute]
public void set_SecretScanning(SecretScanningRequest value);
    [CompilerGeneratedAttribute]
public SecretScanningPushProtectionRequest get_SecretScanningPushProtection();
    [CompilerGeneratedAttribute]
public void set_SecretScanningPushProtection(SecretScanningPushProtectionRequest value);
    [CompilerGeneratedAttribute]
public SecretScanningValidityChecksRequest get_SecretScanningValidityChecks();
    [CompilerGeneratedAttribute]
public void set_SecretScanningValidityChecks(SecretScanningValidityChecksRequest value);
    internal string get_DebuggerDisplay();
}
[DebuggerDisplayAttribute("{DebuggerDisplay,nq}")]
public class Octokit.SelectedRepositoryCollection : object {
    [CompilerGeneratedAttribute]
private IEnumerable`1<long> <SelectedRepositoryIds>k__BackingField;
    [ParameterAttribute]
public IEnumerable`1<long> SelectedRepositoryIds { get; public set; }
    internal string DebuggerDisplay { get; }
    public SelectedRepositoryCollection(IEnumerable`1<long> selectedRepositoryIds);
    [CompilerGeneratedAttribute]
public IEnumerable`1<long> get_SelectedRepositoryIds();
    [CompilerGeneratedAttribute]
public void set_SelectedRepositoryIds(IEnumerable`1<long> value);
    internal string get_DebuggerDisplay();
}
[DebuggerDisplayAttribute("{DebuggerDisplay,nq}")]
public class Octokit.Signature : object {
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Email>k__BackingField;
    public string Name { get; private set; }
    public string Email { get; private set; }
    internal string DebuggerDisplay { get; }
    public Signature(string name, string email);
    [CompilerGeneratedAttribute]
public string get_Name();
    [CompilerGeneratedAttribute]
private void set_Name(string value);
    [CompilerGeneratedAttribute]
public string get_Email();
    [CompilerGeneratedAttribute]
private void set_Email(string value);
    internal string get_DebuggerDisplay();
}
[GeneratedCodeAttribute("simple-json", "1.0.0")]
internal static class Octokit.SimpleJson : object {
    private static int TOKEN_NONE;
    private static int TOKEN_CURLY_OPEN;
    private static int TOKEN_CURLY_CLOSE;
    private static int TOKEN_SQUARED_OPEN;
    private static int TOKEN_SQUARED_CLOSE;
    private static int TOKEN_COLON;
    private static int TOKEN_COMMA;
    private static int TOKEN_STRING;
    private static int TOKEN_NUMBER;
    private static int TOKEN_TRUE;
    private static int TOKEN_FALSE;
    private static int TOKEN_NULL;
    private static int BUILDER_CAPACITY;
    private static Char[] EscapeTable;
    private static Char[] EscapeCharacters;
    private static IJsonSerializerStrategy _currentJsonSerializerStrategy;
    private static PocoJsonSerializerStrategy _pocoJsonSerializerStrategy;
    public static IJsonSerializerStrategy CurrentJsonSerializerStrategy { get; public set; }
    [EditorBrowsableAttribute("2")]
public static PocoJsonSerializerStrategy PocoJsonSerializerStrategy { get; }
    private static SimpleJson();
    public static object DeserializeObject(string json);
    public static bool TryDeserializeObject(string json, Object& obj);
    public static object DeserializeObject(string json, Type type, IJsonSerializerStrategy jsonSerializerStrategy);
    public static object DeserializeObject(string json, Type type);
    public static T DeserializeObject(string json, IJsonSerializerStrategy jsonSerializerStrategy);
    public static T DeserializeObject(string json);
    public static string SerializeObject(object json, IJsonSerializerStrategy jsonSerializerStrategy);
    public static string SerializeObject(object json);
    public static string EscapeToJavascriptString(string jsonString);
    private static IDictionary`2<string, object> ParseObject(Char[] json, Int32& index, Boolean& success);
    private static JsonArray ParseArray(Char[] json, Int32& index, Boolean& success);
    private static object ParseValue(Char[] json, Int32& index, Boolean& success);
    private static string ParseString(Char[] json, Int32& index, Boolean& success);
    private static string ConvertFromUtf32(int utf32);
    private static object ParseNumber(Char[] json, Int32& index, Boolean& success);
    private static int GetLastIndexOfNumber(Char[] json, int index);
    private static void EatWhitespace(Char[] json, Int32& index);
    private static int LookAhead(Char[] json, int index);
    private static int NextToken(Char[] json, Int32& index);
    private static bool SerializeValue(IJsonSerializerStrategy jsonSerializerStrategy, object value, StringBuilder builder);
    private static bool SerializeObject(IJsonSerializerStrategy jsonSerializerStrategy, IEnumerable keys, IEnumerable values, StringBuilder builder);
    private static bool SerializeArray(IJsonSerializerStrategy jsonSerializerStrategy, IEnumerable anArray, StringBuilder builder);
    private static bool SerializeString(string aString, StringBuilder builder);
    private static bool SerializeNumber(object number, StringBuilder builder);
    private static bool IsNumeric(object value);
    public static IJsonSerializerStrategy get_CurrentJsonSerializerStrategy();
    public static void set_CurrentJsonSerializerStrategy(IJsonSerializerStrategy value);
    public static PocoJsonSerializerStrategy get_PocoJsonSerializerStrategy();
}
public enum Octokit.Sort : Enum {
    public int value__;
    [ParameterAttribute]
public static Sort Newest;
    [ParameterAttribute]
public static Sort Oldest;
    [ParameterAttribute]
public static Sort Stargazers;
}
public enum Octokit.SortDirection : Enum {
    public int value__;
    [ParameterAttribute]
public static SortDirection Ascending;
    [ParameterAttribute]
public static SortDirection Descending;
}
[DebuggerDisplayAttribute("{DebuggerDisplay,nq}")]
public class Octokit.SourceInfo : object {
    [CompilerGeneratedAttribute]
private User <Actor>k__BackingField;
    [CompilerGeneratedAttribute]
private int <Id>k__BackingField;
    [CompilerGeneratedAttribute]
private Issue <Issue>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Url>k__BackingField;
    public User Actor { get; private set; }
    public int Id { get; private set; }
    public Issue Issue { get; private set; }
    public string Url { get; private set; }
    internal string DebuggerDisplay { get; }
    public SourceInfo(User actor, int id, Issue issue, string url);
    [CompilerGeneratedAttribute]
public User get_Actor();
    [CompilerGeneratedAttribute]
private void set_Actor(User value);
    [CompilerGeneratedAttribute]
public int get_Id();
    [CompilerGeneratedAttribute]
private void set_Id(int value);
    [CompilerGeneratedAttribute]
public Issue get_Issue();
    [CompilerGeneratedAttribute]
private void set_Issue(Issue value);
    [CompilerGeneratedAttribute]
public string get_Url();
    [CompilerGeneratedAttribute]
private void set_Url(string value);
    internal string get_DebuggerDisplay();
}
public class Octokit.StarredClient : ApiClient {
    public StarredClient(IApiConnection apiConnection);
    [ManualRouteAttribute("GET", "/repos/{owner}/{repo}/stargazers")]
public sealed virtual Task`1<IReadOnlyList`1<User>> GetAllStargazers(string owner, string name);
    [ManualRouteAttribute("GET", "/repositories/{id}/stargazers")]
public sealed virtual Task`1<IReadOnlyList`1<User>> GetAllStargazers(long repositoryId);
    [ManualRouteAttribute("GET", "/repos/{owner}/{repo}/stargazers")]
public sealed virtual Task`1<IReadOnlyList`1<User>> GetAllStargazers(string owner, string name, ApiOptions options);
    [ManualRouteAttribute("GET", "/repositories/{id}/stargazers")]
public sealed virtual Task`1<IReadOnlyList`1<User>> GetAllStargazers(long repositoryId, ApiOptions options);
    [ManualRouteAttribute("GET", "/repos/{owner}/{repo}/stargazers")]
public sealed virtual Task`1<IReadOnlyList`1<UserStar>> GetAllStargazersWithTimestamps(string owner, string name);
    [ManualRouteAttribute("GET", "/repositories/{id}/stargazers")]
public sealed virtual Task`1<IReadOnlyList`1<UserStar>> GetAllStargazersWithTimestamps(long repositoryId);
    [ManualRouteAttribute("GET", "/repos/{owner}/{repo}/stargazers")]
public sealed virtual Task`1<IReadOnlyList`1<UserStar>> GetAllStargazersWithTimestamps(string owner, string name, ApiOptions options);
    [ManualRouteAttribute("GET", "/repositories/{id}/stargazers")]
public sealed virtual Task`1<IReadOnlyList`1<UserStar>> GetAllStargazersWithTimestamps(long repositoryId, ApiOptions options);
    [ManualRouteAttribute("GET", "/user/starred")]
public sealed virtual Task`1<IReadOnlyList`1<Repository>> GetAllForCurrent();
    [ManualRouteAttribute("GET", "/user/starred")]
public sealed virtual Task`1<IReadOnlyList`1<Repository>> GetAllForCurrent(ApiOptions options);
    [ManualRouteAttribute("GET", "/user/starred")]
public sealed virtual Task`1<IReadOnlyList`1<RepositoryStar>> GetAllForCurrentWithTimestamps();
    [ManualRouteAttribute("GET", "/user/starred")]
public sealed virtual Task`1<IReadOnlyList`1<RepositoryStar>> GetAllForCurrentWithTimestamps(ApiOptions options);
    [ManualRouteAttribute("GET", "/user/starred")]
public sealed virtual Task`1<IReadOnlyList`1<Repository>> GetAllForCurrent(StarredRequest request);
    [ManualRouteAttribute("GET", "/user/starred")]
public sealed virtual Task`1<IReadOnlyList`1<Repository>> GetAllForCurrent(StarredRequest request, ApiOptions options);
    [ManualRouteAttribute("GET", "/user/starred")]
public sealed virtual Task`1<IReadOnlyList`1<RepositoryStar>> GetAllForCurrentWithTimestamps(StarredRequest request);
    [ManualRouteAttribute("GET", "/user/starred")]
public sealed virtual Task`1<IReadOnlyList`1<RepositoryStar>> GetAllForCurrentWithTimestamps(StarredRequest request, ApiOptions options);
    [ManualRouteAttribute("GET", "/users/{username}/starred")]
public sealed virtual Task`1<IReadOnlyList`1<Repository>> GetAllForUser(string user);
    [ManualRouteAttribute("GET", "/users/{username}/starred")]
public sealed virtual Task`1<IReadOnlyList`1<Repository>> GetAllForUser(string user, ApiOptions options);
    [ManualRouteAttribute("GET", "/users/{username}/starred")]
public sealed virtual Task`1<IReadOnlyList`1<RepositoryStar>> GetAllForUserWithTimestamps(string user);
    [ManualRouteAttribute("GET", "/users/{username}/starred")]
public sealed virtual Task`1<IReadOnlyList`1<RepositoryStar>> GetAllForUserWithTimestamps(string user, ApiOptions options);
    [ManualRouteAttribute("GET", "/users/{username}/starred")]
public sealed virtual Task`1<IReadOnlyList`1<Repository>> GetAllForUser(string user, StarredRequest request);
    [ManualRouteAttribute("GET", "/users/{username}/starred")]
public sealed virtual Task`1<IReadOnlyList`1<Repository>> GetAllForUser(string user, StarredRequest request, ApiOptions options);
    [ManualRouteAttribute("GET", "/users/{username}/starred")]
public sealed virtual Task`1<IReadOnlyList`1<RepositoryStar>> GetAllForUserWithTimestamps(string user, StarredRequest request);
    [ManualRouteAttribute("GET", "/users/{username}/starred")]
public sealed virtual Task`1<IReadOnlyList`1<RepositoryStar>> GetAllForUserWithTimestamps(string user, StarredRequest request, ApiOptions options);
    [AsyncStateMachineAttribute("Octokit.StarredClient/<CheckStarred>d__25")]
[ManualRouteAttribute("GET", "/user/starred/{owner}/{repo}")]
public sealed virtual Task`1<bool> CheckStarred(string owner, string name);
    [AsyncStateMachineAttribute("Octokit.StarredClient/<StarRepo>d__26")]
[ManualRouteAttribute("PUT", "/user/starred/{owner}/{repo}")]
public sealed virtual Task`1<bool> StarRepo(string owner, string name);
    [AsyncStateMachineAttribute("Octokit.StarredClient/<RemoveStarFromRepo>d__27")]
[ManualRouteAttribute("DELETE", "/user/starred/{owner}/{repo}")]
public sealed virtual Task`1<bool> RemoveStarFromRepo(string owner, string name);
}
[DebuggerDisplayAttribute("{DebuggerDisplay,nq}")]
public class Octokit.StarredEventPayload : ActivityPayload {
    [CompilerGeneratedAttribute]
private string <Action>k__BackingField;
    public string Action { get; private set; }
    [CompilerGeneratedAttribute]
public string get_Action();
    [CompilerGeneratedAttribute]
private void set_Action(string value);
}
[DebuggerDisplayAttribute("{DebuggerDisplay,nq}")]
public class Octokit.StarredRequest : RequestParameters {
    [CompilerGeneratedAttribute]
private StarredSort <SortProperty>k__BackingField;
    [CompilerGeneratedAttribute]
private SortDirection <SortDirection>k__BackingField;
    [ParameterAttribute]
public StarredSort SortProperty { get; public set; }
    [ParameterAttribute]
public SortDirection SortDirection { get; public set; }
    internal string DebuggerDisplay { get; }
    [CompilerGeneratedAttribute]
public StarredSort get_SortProperty();
    [CompilerGeneratedAttribute]
public void set_SortProperty(StarredSort value);
    [CompilerGeneratedAttribute]
public SortDirection get_SortDirection();
    [CompilerGeneratedAttribute]
public void set_SortDirection(SortDirection value);
    internal string get_DebuggerDisplay();
}
public enum Octokit.StarredSort : Enum {
    public int value__;
    [ParameterAttribute]
public static StarredSort Created;
    [ParameterAttribute]
public static StarredSort Updated;
}
[DebuggerDisplayAttribute("{DebuggerDisplay,nq}")]
public class Octokit.StartMigrationRequest : object {
    [CompilerGeneratedAttribute]
private IReadOnlyList`1<string> <Repositories>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <LockRepositories>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <ExcludeAttachments>k__BackingField;
    public IReadOnlyList`1<string> Repositories { get; private set; }
    public bool LockRepositories { get; private set; }
    public bool ExcludeAttachments { get; private set; }
    internal string DebuggerDisplay { get; }
    public StartMigrationRequest(IReadOnlyList`1<string> repositories);
    public StartMigrationRequest(IReadOnlyList`1<string> repositories, bool lockRepositories, bool excludeAttachments);
    [CompilerGeneratedAttribute]
public IReadOnlyList`1<string> get_Repositories();
    [CompilerGeneratedAttribute]
private void set_Repositories(IReadOnlyList`1<string> value);
    [CompilerGeneratedAttribute]
public bool get_LockRepositories();
    [CompilerGeneratedAttribute]
private void set_LockRepositories(bool value);
    [CompilerGeneratedAttribute]
public bool get_ExcludeAttachments();
    [CompilerGeneratedAttribute]
private void set_ExcludeAttachments(bool value);
    internal string get_DebuggerDisplay();
}
public class Octokit.StatisticsClient : ApiClient {
    public StatisticsClient(IApiConnection apiConnection);
    [ManualRouteAttribute("GET", "/repos/{owner}/{repo}/stats/contributors")]
public sealed virtual Task`1<IReadOnlyList`1<Contributor>> GetContributors(string owner, string name);
    [ManualRouteAttribute("GET", "/repositories/{id}/stats/contributors")]
public sealed virtual Task`1<IReadOnlyList`1<Contributor>> GetContributors(long repositoryId);
    [ManualRouteAttribute("GET", "/repos/{owner}/{repo}/stats/contributors")]
public sealed virtual Task`1<IReadOnlyList`1<Contributor>> GetContributors(string owner, string name, CancellationToken cancellationToken);
    [ManualRouteAttribute("GET", "/repositories/{id}/stats/contributors")]
public sealed virtual Task`1<IReadOnlyList`1<Contributor>> GetContributors(long repositoryId, CancellationToken cancellationToken);
    [ManualRouteAttribute("GET", "/repos/{owner}/{repo}/stats/commit_activity")]
public sealed virtual Task`1<CommitActivity> GetCommitActivity(string owner, string name);
    [ManualRouteAttribute("GET", "/repositories/{id}/stats/commit_activity")]
public sealed virtual Task`1<CommitActivity> GetCommitActivity(long repositoryId);
    [AsyncStateMachineAttribute("Octokit.StatisticsClient/<GetCommitActivity>d__7")]
[ManualRouteAttribute("GET", "/repos/{owner}/{repo}/stats/commit_activity")]
public sealed virtual Task`1<CommitActivity> GetCommitActivity(string owner, string name, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Octokit.StatisticsClient/<GetCommitActivity>d__8")]
[ManualRouteAttribute("GET", "/repositories/{id}/stats/commit_activity")]
public sealed virtual Task`1<CommitActivity> GetCommitActivity(long repositoryId, CancellationToken cancellationToken);
    [ManualRouteAttribute("GET", "/repos/{owner}/{repo}/stats/code_frequency")]
public sealed virtual Task`1<CodeFrequency> GetCodeFrequency(string owner, string name);
    [ManualRouteAttribute("GET", "/repositories/{id}/stats/code_frequency")]
public sealed virtual Task`1<CodeFrequency> GetCodeFrequency(long repositoryId);
    [AsyncStateMachineAttribute("Octokit.StatisticsClient/<GetCodeFrequency>d__11")]
[ManualRouteAttribute("GET", "/repos/{owner}/{repo}/stats/code_frequency")]
public sealed virtual Task`1<CodeFrequency> GetCodeFrequency(string owner, string name, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Octokit.StatisticsClient/<GetCodeFrequency>d__12")]
[ManualRouteAttribute("GET", "/repositories/{id}/stats/code_frequency")]
public sealed virtual Task`1<CodeFrequency> GetCodeFrequency(long repositoryId, CancellationToken cancellationToken);
    [ManualRouteAttribute("GET", "/repos/{owner}/{repo}/stats/participation")]
public sealed virtual Task`1<Participation> GetParticipation(string owner, string name);
    [ManualRouteAttribute("GET", "/repositories/{id}/stats/participation")]
public sealed virtual Task`1<Participation> GetParticipation(long repositoryId);
    [AsyncStateMachineAttribute("Octokit.StatisticsClient/<GetParticipation>d__15")]
[ManualRouteAttribute("GET", "/repos/{owner}/{repo}/stats/participation")]
public sealed virtual Task`1<Participation> GetParticipation(string owner, string name, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Octokit.StatisticsClient/<GetParticipation>d__16")]
[ManualRouteAttribute("GET", "/repositories/{id}/stats/participation")]
public sealed virtual Task`1<Participation> GetParticipation(long repositoryId, CancellationToken cancellationToken);
    [ManualRouteAttribute("GET", "/repos/{owner}/{repo}/stats/punch_card")]
public sealed virtual Task`1<PunchCard> GetPunchCard(string owner, string name);
    [ManualRouteAttribute("GET", "/repositories/{id}/stats/punch_card")]
public sealed virtual Task`1<PunchCard> GetPunchCard(long repositoryId);
    [AsyncStateMachineAttribute("Octokit.StatisticsClient/<GetPunchCard>d__19")]
[ManualRouteAttribute("GET", "/repos/{owner}/{repo}/stats/punch_card")]
public sealed virtual Task`1<PunchCard> GetPunchCard(string owner, string name, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Octokit.StatisticsClient/<GetPunchCard>d__20")]
[ManualRouteAttribute("GET", "/repositories/{id}/stats/punch_card")]
public sealed virtual Task`1<PunchCard> GetPunchCard(long repositoryId, CancellationToken cancellationToken);
}
public enum Octokit.Status : Enum {
    public int value__;
    [ParameterAttribute]
public static Status Enabled;
    [ParameterAttribute]
public static Status Disabled;
}
[DebuggerDisplayAttribute("{DebuggerDisplay,nq}")]
public class Octokit.StatusEventPayload : ActivityPayload {
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Sha>k__BackingField;
    [CompilerGeneratedAttribute]
private DateTimeOffset <CreatedAt>k__BackingField;
    [CompilerGeneratedAttribute]
private DateTimeOffset <UpdatedAt>k__BackingField;
    [CompilerGeneratedAttribute]
private StringEnum`1<CommitState> <State>k__BackingField;
    [CompilerGeneratedAttribute]
private string <TargetUrl>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Description>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Context>k__BackingField;
    [CompilerGeneratedAttribute]
private long <Id>k__BackingField;
    [CompilerGeneratedAttribute]
private GitHubCommit <Commit>k__BackingField;
    [CompilerGeneratedAttribute]
private Organization <Organization>k__BackingField;
    [CompilerGeneratedAttribute]
private IReadOnlyList`1<Branch> <Branches>k__BackingField;
    public string Name { get; private set; }
    public string Sha { get; private set; }
    public DateTimeOffset CreatedAt { get; private set; }
    public DateTimeOffset UpdatedAt { get; private set; }
    public StringEnum`1<CommitState> State { get; private set; }
    public string TargetUrl { get; private set; }
    public string Description { get; private set; }
    public string Context { get; private set; }
    public long Id { get; private set; }
    public GitHubCommit Commit { get; private set; }
    public Organization Organization { get; private set; }
    public IReadOnlyList`1<Branch> Branches { get; private set; }
    [CompilerGeneratedAttribute]
public string get_Name();
    [CompilerGeneratedAttribute]
private void set_Name(string value);
    [CompilerGeneratedAttribute]
public string get_Sha();
    [CompilerGeneratedAttribute]
private void set_Sha(string value);
    [CompilerGeneratedAttribute]
public DateTimeOffset get_CreatedAt();
    [CompilerGeneratedAttribute]
private void set_CreatedAt(DateTimeOffset value);
    [CompilerGeneratedAttribute]
public DateTimeOffset get_UpdatedAt();
    [CompilerGeneratedAttribute]
private void set_UpdatedAt(DateTimeOffset value);
    [CompilerGeneratedAttribute]
public StringEnum`1<CommitState> get_State();
    [CompilerGeneratedAttribute]
private void set_State(StringEnum`1<CommitState> value);
    [CompilerGeneratedAttribute]
public string get_TargetUrl();
    [CompilerGeneratedAttribute]
private void set_TargetUrl(string value);
    [CompilerGeneratedAttribute]
public string get_Description();
    [CompilerGeneratedAttribute]
private void set_Description(string value);
    [CompilerGeneratedAttribute]
public string get_Context();
    [CompilerGeneratedAttribute]
private void set_Context(string value);
    [CompilerGeneratedAttribute]
public long get_Id();
    [CompilerGeneratedAttribute]
private void set_Id(long value);
    [CompilerGeneratedAttribute]
public GitHubCommit get_Commit();
    [CompilerGeneratedAttribute]
private void set_Commit(GitHubCommit value);
    [CompilerGeneratedAttribute]
public Organization get_Organization();
    [CompilerGeneratedAttribute]
private void set_Organization(Organization value);
    [CompilerGeneratedAttribute]
public IReadOnlyList`1<Branch> get_Branches();
    [CompilerGeneratedAttribute]
private void set_Branches(IReadOnlyList`1<Branch> value);
}
[DebuggerDisplayAttribute("{DebuggerDisplay,nq}")]
public class Octokit.StringEnum`1 : ValueType {
    private string _stringValue;
    private Nullable`1<TEnum> _parsedValue;
    public string StringValue { get; }
    public TEnum Value { get; }
    internal string DebuggerDisplay { get; }
    public StringEnum`1(TEnum parsedValue);
    public StringEnum`1(string stringValue);
    public string get_StringValue();
    public TEnum get_Value();
    internal string get_DebuggerDisplay();
    public bool TryParse(TEnum& value);
    public sealed virtual bool Equals(StringEnum`1<TEnum> other);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
    public static bool op_Equality(StringEnum`1<TEnum> left, StringEnum`1<TEnum> right);
    public static bool op_Inequality(StringEnum`1<TEnum> left, StringEnum`1<TEnum> right);
    public static StringEnum`1<TEnum> op_Implicit(string value);
    public static StringEnum`1<TEnum> op_Implicit(TEnum parsedValue);
    public virtual string ToString();
    private TEnum ParseValue();
    private static ArgumentException GetArgumentException(string value);
}
[ExtensionAttribute]
internal static class Octokit.StringExtensions : object {
    private static Regex _optionalQueryStringRegex;
    private static Regex nameWithOwner;
    private static StringExtensions();
    [ExtensionAttribute]
public static bool IsBlank(string value);
    [ExtensionAttribute]
public static bool IsNotBlank(string value);
    [ExtensionAttribute]
public static Uri FormatUri(string pattern, Object[] args);
    [ExtensionAttribute]
public static string UriEncode(string input);
    [ExtensionAttribute]
public static string ToBase64String(string input);
    [ExtensionAttribute]
public static string FromBase64String(string encoded);
    [ExtensionAttribute]
public static Uri ExpandUriTemplate(string template, object values);
    [ExtensionAttribute]
public static string ToRubyCase(string propertyName);
    [ExtensionAttribute]
public static string FromRubyCase(string propertyName);
    [ExtensionAttribute]
public static string ToCapitalizedInvariant(string value);
    [ExtensionAttribute]
internal static string EscapeDoubleQuotes(string value);
    [ExtensionAttribute]
internal static string EncodeSharp(string value);
    [IteratorStateMachineAttribute("Octokit.StringExtensions/<SplitUpperCase>d__13")]
[ExtensionAttribute]
private static IEnumerable`1<string> SplitUpperCase(string source);
    [ExtensionAttribute]
internal static bool IsNameWithOwnerFormat(string input);
}
[DebuggerDisplayAttribute("{DebuggerDisplay,nq}")]
public class Octokit.Subscription : object {
    [CompilerGeneratedAttribute]
private bool <Subscribed>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <Ignored>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Reason>k__BackingField;
    [CompilerGeneratedAttribute]
private DateTimeOffset <CreatedAt>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Url>k__BackingField;
    [CompilerGeneratedAttribute]
private string <RepositoryUrl>k__BackingField;
    public bool Subscribed { get; private set; }
    public bool Ignored { get; private set; }
    public string Reason { get; private set; }
    public DateTimeOffset CreatedAt { get; private set; }
    public string Url { get; private set; }
    public string RepositoryUrl { get; private set; }
    internal string DebuggerDisplay { get; }
    public Subscription(bool subscribed, bool ignored, string reason, DateTimeOffset createdAt, string url, string repositoryUrl);
    [CompilerGeneratedAttribute]
public bool get_Subscribed();
    [CompilerGeneratedAttribute]
private void set_Subscribed(bool value);
    [CompilerGeneratedAttribute]
public bool get_Ignored();
    [CompilerGeneratedAttribute]
private void set_Ignored(bool value);
    [CompilerGeneratedAttribute]
public string get_Reason();
    [CompilerGeneratedAttribute]
private void set_Reason(string value);
    [CompilerGeneratedAttribute]
public DateTimeOffset get_CreatedAt();
    [CompilerGeneratedAttribute]
private void set_CreatedAt(DateTimeOffset value);
    [CompilerGeneratedAttribute]
public string get_Url();
    [CompilerGeneratedAttribute]
private void set_Url(string value);
    [CompilerGeneratedAttribute]
public string get_RepositoryUrl();
    [CompilerGeneratedAttribute]
private void set_RepositoryUrl(string value);
    internal string get_DebuggerDisplay();
}
public enum Octokit.TaggedType : Enum {
    public int value__;
    [ParameterAttribute]
public static TaggedType Commit;
    [ParameterAttribute]
public static TaggedType Blob;
    [ParameterAttribute]
public static TaggedType Tree;
    [ParameterAttribute]
public static TaggedType Tag;
}
[DebuggerDisplayAttribute("{DebuggerDisplay,nq}")]
public class Octokit.TagObject : GitReference {
    [CompilerGeneratedAttribute]
private StringEnum`1<TaggedType> <Type>k__BackingField;
    public StringEnum`1<TaggedType> Type { get; private set; }
    public TagObject(string nodeId, string url, string label, string ref, string sha, User user, Repository repository, TaggedType type);
    [CompilerGeneratedAttribute]
public StringEnum`1<TaggedType> get_Type();
    [CompilerGeneratedAttribute]
private void set_Type(StringEnum`1<TaggedType> value);
}
public class Octokit.TagsClient : ApiClient {
    public TagsClient(IApiConnection apiConnection);
    [ManualRouteAttribute("GET", "/repos/{owner}/{repo}/git/tags/{sha}")]
public sealed virtual Task`1<GitTag> Get(string owner, string name, string reference);
    [ManualRouteAttribute("GET", "/repositories/{id}/git/tags/{sha}")]
public sealed virtual Task`1<GitTag> Get(long repositoryId, string reference);
    [ManualRouteAttribute("POST", "/repos/{owner}/{repo}/git/tags")]
public sealed virtual Task`1<GitTag> Create(string owner, string name, NewTag tag);
    [ManualRouteAttribute("POST", "/repositories/{id}/git/tags")]
public sealed virtual Task`1<GitTag> Create(long repositoryId, NewTag tag);
}
[DebuggerDisplayAttribute("{DebuggerDisplay,nq}")]
public class Octokit.Team : object {
    [CompilerGeneratedAttribute]
private string <Url>k__BackingField;
    [CompilerGeneratedAttribute]
private string <HtmlUrl>k__BackingField;
    [CompilerGeneratedAttribute]
private long <Id>k__BackingField;
    [CompilerGeneratedAttribute]
private string <NodeId>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Slug>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Description>k__BackingField;
    [CompilerGeneratedAttribute]
private StringEnum`1<TeamPrivacy> <Privacy>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Permission>k__BackingField;
    [CompilerGeneratedAttribute]
private TeamRepositoryPermissions <TeamRepositoryPermissions>k__BackingField;
    [CompilerGeneratedAttribute]
private int <MembersCount>k__BackingField;
    [CompilerGeneratedAttribute]
private int <ReposCount>k__BackingField;
    [CompilerGeneratedAttribute]
private Organization <Organization>k__BackingField;
    [CompilerGeneratedAttribute]
private Team <Parent>k__BackingField;
    [CompilerGeneratedAttribute]
private string <LdapDistinguishedName>k__BackingField;
    public string Url { get; private set; }
    public string HtmlUrl { get; private set; }
    public long Id { get; private set; }
    public string NodeId { get; private set; }
    public string Slug { get; private set; }
    public string Name { get; private set; }
    public string Description { get; private set; }
    public StringEnum`1<TeamPrivacy> Privacy { get; private set; }
    public string Permission { get; private set; }
    public TeamRepositoryPermissions TeamRepositoryPermissions { get; private set; }
    public int MembersCount { get; private set; }
    public int ReposCount { get; private set; }
    public Organization Organization { get; private set; }
    public Team Parent { get; private set; }
    [ParameterAttribute]
public string LdapDistinguishedName { get; private set; }
    internal string DebuggerDisplay { get; }
    public Team(string url, string htmlUrl, long id, string nodeId, string slug, string name, string description, TeamPrivacy privacy, string permission, TeamRepositoryPermissions teamRepositoryPermissions, int membersCount, int reposCount, Organization organization, Team parent, string ldapDistinguishedName);
    [CompilerGeneratedAttribute]
public string get_Url();
    [CompilerGeneratedAttribute]
private void set_Url(string value);
    [CompilerGeneratedAttribute]
public string get_HtmlUrl();
    [CompilerGeneratedAttribute]
private void set_HtmlUrl(string value);
    [CompilerGeneratedAttribute]
public long get_Id();
    [CompilerGeneratedAttribute]
private void set_Id(long value);
    [CompilerGeneratedAttribute]
public string get_NodeId();
    [CompilerGeneratedAttribute]
private void set_NodeId(string value);
    [CompilerGeneratedAttribute]
public string get_Slug();
    [CompilerGeneratedAttribute]
private void set_Slug(string value);
    [CompilerGeneratedAttribute]
public string get_Name();
    [CompilerGeneratedAttribute]
private void set_Name(string value);
    [CompilerGeneratedAttribute]
public string get_Description();
    [CompilerGeneratedAttribute]
private void set_Description(string value);
    [CompilerGeneratedAttribute]
public StringEnum`1<TeamPrivacy> get_Privacy();
    [CompilerGeneratedAttribute]
private void set_Privacy(StringEnum`1<TeamPrivacy> value);
    [CompilerGeneratedAttribute]
public string get_Permission();
    [CompilerGeneratedAttribute]
private void set_Permission(string value);
    [CompilerGeneratedAttribute]
public TeamRepositoryPermissions get_TeamRepositoryPermissions();
    [CompilerGeneratedAttribute]
private void set_TeamRepositoryPermissions(TeamRepositoryPermissions value);
    [CompilerGeneratedAttribute]
public int get_MembersCount();
    [CompilerGeneratedAttribute]
private void set_MembersCount(int value);
    [CompilerGeneratedAttribute]
public int get_ReposCount();
    [CompilerGeneratedAttribute]
private void set_ReposCount(int value);
    [CompilerGeneratedAttribute]
public Organization get_Organization();
    [CompilerGeneratedAttribute]
private void set_Organization(Organization value);
    [CompilerGeneratedAttribute]
public Team get_Parent();
    [CompilerGeneratedAttribute]
private void set_Parent(Team value);
    [CompilerGeneratedAttribute]
public string get_LdapDistinguishedName();
    [CompilerGeneratedAttribute]
private void set_LdapDistinguishedName(string value);
    internal string get_DebuggerDisplay();
}
[DebuggerDisplayAttribute("{DebuggerDisplay,nq}")]
public class Octokit.TeamMembershipDetails : object {
    [CompilerGeneratedAttribute]
private StringEnum`1<TeamRole> <Role>k__BackingField;
    [CompilerGeneratedAttribute]
private StringEnum`1<MembershipState> <State>k__BackingField;
    public StringEnum`1<TeamRole> Role { get; private set; }
    public StringEnum`1<MembershipState> State { get; private set; }
    internal string DebuggerDisplay { get; }
    public TeamMembershipDetails(TeamRole role, MembershipState state);
    [CompilerGeneratedAttribute]
public StringEnum`1<TeamRole> get_Role();
    [CompilerGeneratedAttribute]
private void set_Role(StringEnum`1<TeamRole> value);
    [CompilerGeneratedAttribute]
public StringEnum`1<MembershipState> get_State();
    [CompilerGeneratedAttribute]
private void set_State(StringEnum`1<MembershipState> value);
    internal string get_DebuggerDisplay();
}
[DebuggerDisplayAttribute("{DebuggerDisplay,nq}")]
public class Octokit.TeamMembersRequest : RequestParameters {
    [CompilerGeneratedAttribute]
private TeamRoleFilter <Role>k__BackingField;
    public TeamRoleFilter Role { get; private set; }
    internal string DebuggerDisplay { get; }
    public TeamMembersRequest(TeamRoleFilter role);
    [CompilerGeneratedAttribute]
public TeamRoleFilter get_Role();
    [CompilerGeneratedAttribute]
private void set_Role(TeamRoleFilter value);
    internal string get_DebuggerDisplay();
}
public enum Octokit.TeamPermission : Enum {
    public int value__;
    [ParameterAttribute]
public static TeamPermission Pull;
    [ParameterAttribute]
public static TeamPermission Push;
}
public enum Octokit.TeamPermissionLegacy : Enum {
    public int value__;
    [ParameterAttribute]
public static TeamPermissionLegacy Pull;
    [ParameterAttribute]
public static TeamPermissionLegacy Push;
    [ParameterAttribute]
public static TeamPermissionLegacy Admin;
}
public enum Octokit.TeamPrivacy : Enum {
    public int value__;
    [ParameterAttribute]
public static TeamPrivacy Secret;
    [ParameterAttribute]
public static TeamPrivacy Closed;
}
[DebuggerDisplayAttribute("{DebuggerDisplay,nq}")]
public class Octokit.TeamRepository : object {
    [CompilerGeneratedAttribute]
private long <Id>k__BackingField;
    [CompilerGeneratedAttribute]
private string <NodeId>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    [CompilerGeneratedAttribute]
private string <FullName>k__BackingField;
    [CompilerGeneratedAttribute]
private LicenseMetadata <License>k__BackingField;
    [CompilerGeneratedAttribute]
private TeamRepositoryPermissions <Permissions>k__BackingField;
    [CompilerGeneratedAttribute]
private string <RoleName>k__BackingField;
    [CompilerGeneratedAttribute]
private User <Owner>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <Private>k__BackingField;
    [CompilerGeneratedAttribute]
private string <HtmlUrl>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Description>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <Fork>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Url>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ArchiveUrl>k__BackingField;
    [CompilerGeneratedAttribute]
private string <AssigneesUrl>k__BackingField;
    [CompilerGeneratedAttribute]
private string <BlobsUrl>k__BackingField;
    [CompilerGeneratedAttribute]
private string <BranchesUrl>k__BackingField;
    [CompilerGeneratedAttribute]
private string <CollaboratorsUrl>k__BackingField;
    [CompilerGeneratedAttribute]
private string <CommentsUrl>k__BackingField;
    [CompilerGeneratedAttribute]
private string <CommitsUrl>k__BackingField;
    [CompilerGeneratedAttribute]
private string <CompareUrl>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ContentsUrl>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ContributorsUrl>k__BackingField;
    [CompilerGeneratedAttribute]
private string <DeploymentsUrl>k__BackingField;
    [CompilerGeneratedAttribute]
private string <DownloadsUrl>k__BackingField;
    [CompilerGeneratedAttribute]
private string <EventsUrl>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ForksUrl>k__BackingField;
    [CompilerGeneratedAttribute]
private string <GitCommitUrl>k__BackingField;
    [CompilerGeneratedAttribute]
private string <GitRefsUrl>k__BackingField;
    [CompilerGeneratedAttribute]
private string <GitTagsUrl>k__BackingField;
    [CompilerGeneratedAttribute]
private string <GitUrl>k__BackingField;
    [CompilerGeneratedAttribute]
private string <IssueCommentUrl>k__BackingField;
    [CompilerGeneratedAttribute]
private string <IssueEventsUrl>k__BackingField;
    [CompilerGeneratedAttribute]
private string <IssuesUrl>k__BackingField;
    [CompilerGeneratedAttribute]
private string <KeysUrl>k__BackingField;
    [CompilerGeneratedAttribute]
private string <LabelsUrl>k__BackingField;
    [CompilerGeneratedAttribute]
private string <LanguagesUrl>k__BackingField;
    [CompilerGeneratedAttribute]
private string <MergesUrl>k__BackingField;
    [CompilerGeneratedAttribute]
private string <MilestonesUrl>k__BackingField;
    [CompilerGeneratedAttribute]
private string <NotificationsUrl>k__BackingField;
    [CompilerGeneratedAttribute]
private string <PullsUrl>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ReleasesUrl>k__BackingField;
    [CompilerGeneratedAttribute]
private string <SshUrl>k__BackingField;
    [CompilerGeneratedAttribute]
private string <StargazersUrl>k__BackingField;
    [CompilerGeneratedAttribute]
private string <StatusesUrl>k__BackingField;
    [CompilerGeneratedAttribute]
private string <SubscribersUrl>k__BackingField;
    [CompilerGeneratedAttribute]
private string <SubscriptionUrl>k__BackingField;
    [CompilerGeneratedAttribute]
private string <TagsUrl>k__BackingField;
    [CompilerGeneratedAttribute]
private string <TeamsUrl>k__BackingField;
    [CompilerGeneratedAttribute]
private string <TreesUrl>k__BackingField;
    [CompilerGeneratedAttribute]
private string <CloneUrl>k__BackingField;
    [CompilerGeneratedAttribute]
private string <MirrorUrl>k__BackingField;
    [CompilerGeneratedAttribute]
private string <HooksUrl>k__BackingField;
    [CompilerGeneratedAttribute]
private string <SvnUrl>k__BackingField;
    [CompilerGeneratedAttribute]
private string <HomePage>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Language>k__BackingField;
    [CompilerGeneratedAttribute]
private int <ForksCount>k__BackingField;
    [CompilerGeneratedAttribute]
private int <StargazersCount>k__BackingField;
    [CompilerGeneratedAttribute]
private int <WatchersCount>k__BackingField;
    [CompilerGeneratedAttribute]
private int <Size>k__BackingField;
    [CompilerGeneratedAttribute]
private string <DefaultBranch>k__BackingField;
    [CompilerGeneratedAttribute]
private int <OpenIssuesCount>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsTemplate>k__BackingField;
    [CompilerGeneratedAttribute]
private IReadOnlyList`1<string> <Topics>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <HasIssues>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <HasProjects>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <HasWiki>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <HasPages>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <HasDownloads>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <Archived>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <Disabled>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<RepositoryVisibility> <Visibility>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<DateTimeOffset> <PushedAt>k__BackingField;
    [CompilerGeneratedAttribute]
private DateTimeOffset <CreatedAt>k__BackingField;
    [CompilerGeneratedAttribute]
private DateTimeOffset <UpdatedAt>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<bool> <AllowRebaseMerge>k__BackingField;
    [CompilerGeneratedAttribute]
private Repository <TemplateRepository>k__BackingField;
    [CompilerGeneratedAttribute]
private string <TempCloneToken>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<bool> <AllowSquashMerge>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<bool> <AllowAutoMerge>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<bool> <DeleteBranchOnMerge>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<bool> <AllowMergeCommit>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<bool> <AllowForking>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<bool> <WebCommitSignoffRequired>k__BackingField;
    [CompilerGeneratedAttribute]
private int <SubscribersCount>k__BackingField;
    [CompilerGeneratedAttribute]
private int <NetworkCount>k__BackingField;
    [CompilerGeneratedAttribute]
private int <OpenIssues>k__BackingField;
    [CompilerGeneratedAttribute]
private int <Watchers>k__BackingField;
    [CompilerGeneratedAttribute]
private string <MasterBranch>k__BackingField;
    public long Id { get; private set; }
    public string NodeId { get; private set; }
    public string Name { get; private set; }
    public string FullName { get; private set; }
    public LicenseMetadata License { get; private set; }
    public TeamRepositoryPermissions Permissions { get; private set; }
    public string RoleName { get; private set; }
    public User Owner { get; private set; }
    public bool Private { get; private set; }
    public string HtmlUrl { get; private set; }
    public string Description { get; private set; }
    public bool Fork { get; private set; }
    public string Url { get; private set; }
    public string ArchiveUrl { get; private set; }
    public string AssigneesUrl { get; private set; }
    public string BlobsUrl { get; private set; }
    public string BranchesUrl { get; private set; }
    public string CollaboratorsUrl { get; private set; }
    public string CommentsUrl { get; private set; }
    public string CommitsUrl { get; private set; }
    public string CompareUrl { get; private set; }
    public string ContentsUrl { get; private set; }
    public string ContributorsUrl { get; private set; }
    public string DeploymentsUrl { get; private set; }
    public string DownloadsUrl { get; private set; }
    public string EventsUrl { get; private set; }
    public string ForksUrl { get; private set; }
    public string GitCommitUrl { get; private set; }
    public string GitRefsUrl { get; private set; }
    public string GitTagsUrl { get; private set; }
    public string GitUrl { get; private set; }
    public string IssueCommentUrl { get; private set; }
    public string IssueEventsUrl { get; private set; }
    public string IssuesUrl { get; private set; }
    public string KeysUrl { get; private set; }
    public string LabelsUrl { get; private set; }
    public string LanguagesUrl { get; private set; }
    public string MergesUrl { get; private set; }
    public string MilestonesUrl { get; private set; }
    public string NotificationsUrl { get; private set; }
    public string PullsUrl { get; private set; }
    public string ReleasesUrl { get; private set; }
    public string SshUrl { get; private set; }
    public string StargazersUrl { get; private set; }
    public string StatusesUrl { get; private set; }
    public string SubscribersUrl { get; private set; }
    public string SubscriptionUrl { get; private set; }
    public string TagsUrl { get; private set; }
    public string TeamsUrl { get; private set; }
    public string TreesUrl { get; private set; }
    public string CloneUrl { get; private set; }
    public string MirrorUrl { get; private set; }
    public string HooksUrl { get; private set; }
    public string SvnUrl { get; private set; }
    public string HomePage { get; private set; }
    public string Language { get; private set; }
    public int ForksCount { get; private set; }
    public int StargazersCount { get; private set; }
    public int WatchersCount { get; private set; }
    public int Size { get; private set; }
    public string DefaultBranch { get; private set; }
    public int OpenIssuesCount { get; private set; }
    public bool IsTemplate { get; private set; }
    public IReadOnlyList`1<string> Topics { get; private set; }
    public bool HasIssues { get; private set; }
    public bool HasProjects { get; private set; }
    public bool HasWiki { get; private set; }
    public bool HasPages { get; private set; }
    public bool HasDownloads { get; private set; }
    public bool Archived { get; private set; }
    public bool Disabled { get; private set; }
    public Nullable`1<RepositoryVisibility> Visibility { get; private set; }
    public Nullable`1<DateTimeOffset> PushedAt { get; private set; }
    public DateTimeOffset CreatedAt { get; private set; }
    public DateTimeOffset UpdatedAt { get; private set; }
    public Nullable`1<bool> AllowRebaseMerge { get; private set; }
    public Repository TemplateRepository { get; private set; }
    public string TempCloneToken { get; private set; }
    public Nullable`1<bool> AllowSquashMerge { get; private set; }
    public Nullable`1<bool> AllowAutoMerge { get; private set; }
    public Nullable`1<bool> DeleteBranchOnMerge { get; private set; }
    public Nullable`1<bool> AllowMergeCommit { get; private set; }
    public Nullable`1<bool> AllowForking { get; private set; }
    public Nullable`1<bool> WebCommitSignoffRequired { get; private set; }
    public int SubscribersCount { get; private set; }
    public int NetworkCount { get; private set; }
    public int OpenIssues { get; private set; }
    public int Watchers { get; private set; }
    public string MasterBranch { get; private set; }
    internal string DebuggerDisplay { get; }
    public TeamRepository(long id, string nodeId, string name, string fullName, LicenseMetadata license, TeamRepositoryPermissions permissions, string roleName, User owner, bool private, string htmlUrl, string description, bool fork, string url, string archiveUrl, string assigneesUrl, string blobsUrl, string branchesUrl, string collaboratorsUrl, string commentsUrl, string commitsUrl, string compareUrl, string contentsUrl, string contributorsUrl, string deploymentsUrl, string downloadsUrl, string eventsUrl, string forksUrl, string gitCommitUrl, string gitRefsUrl, string gitTagsUrl, string gitUrl, string issueCommentUrl, string issueEventsUrl, string issuesUrl, string keysUrl, string labelsUrl, string languagesUrl, string mergesUrl, string milestonesUrl, string notificationsUrl, string pullsUrl, string releasesUrl, string sshUrl, string stargazersUrl, string statusesUrl, string subscribersUrl, string subscriptionUrl, string tagsUrl, string teamsUrl, string treesUrl, string cloneUrl, string mirrorUrl, string hooksUrl, string svnUrl, string homePage, string language, int forksCount, int stargazersCount, int watchersCount, int size, string defaultBranch, int openIssuesCount, bool isTemplate, IReadOnlyList`1<string> topics, bool hasIssues, bool hasProjects, bool hasWiki, bool hasPages, bool hasDownloads, bool archived, bool disabled, Nullable`1<RepositoryVisibility> visibility, Nullable`1<DateTimeOffset> pushedAt, DateTimeOffset createdAt, DateTimeOffset updatedAt, Nullable`1<bool> allowRebaseMerge, Repository templateRepository, string tempCloneToken, Nullable`1<bool> allowSquashMerge, Nullable`1<bool> allowAutoMerge, Nullable`1<bool> deleteBranchOnMerge, Nullable`1<bool> allowMergeCommit, Nullable`1<bool> allowForking, Nullable`1<bool> webCommitSignoffRequired, int subscribersCount, int networkCount, int openIssues, int watchers, string masterBranch);
    [CompilerGeneratedAttribute]
public long get_Id();
    [CompilerGeneratedAttribute]
private void set_Id(long value);
    [CompilerGeneratedAttribute]
public string get_NodeId();
    [CompilerGeneratedAttribute]
private void set_NodeId(string value);
    [CompilerGeneratedAttribute]
public string get_Name();
    [CompilerGeneratedAttribute]
private void set_Name(string value);
    [CompilerGeneratedAttribute]
public string get_FullName();
    [CompilerGeneratedAttribute]
private void set_FullName(string value);
    [CompilerGeneratedAttribute]
public LicenseMetadata get_License();
    [CompilerGeneratedAttribute]
private void set_License(LicenseMetadata value);
    [CompilerGeneratedAttribute]
public TeamRepositoryPermissions get_Permissions();
    [CompilerGeneratedAttribute]
private void set_Permissions(TeamRepositoryPermissions value);
    [CompilerGeneratedAttribute]
public string get_RoleName();
    [CompilerGeneratedAttribute]
private void set_RoleName(string value);
    [CompilerGeneratedAttribute]
public User get_Owner();
    [CompilerGeneratedAttribute]
private void set_Owner(User value);
    [CompilerGeneratedAttribute]
public bool get_Private();
    [CompilerGeneratedAttribute]
private void set_Private(bool value);
    [CompilerGeneratedAttribute]
public string get_HtmlUrl();
    [CompilerGeneratedAttribute]
private void set_HtmlUrl(string value);
    [CompilerGeneratedAttribute]
public string get_Description();
    [CompilerGeneratedAttribute]
private void set_Description(string value);
    [CompilerGeneratedAttribute]
public bool get_Fork();
    [CompilerGeneratedAttribute]
private void set_Fork(bool value);
    [CompilerGeneratedAttribute]
public string get_Url();
    [CompilerGeneratedAttribute]
private void set_Url(string value);
    [CompilerGeneratedAttribute]
public string get_ArchiveUrl();
    [CompilerGeneratedAttribute]
private void set_ArchiveUrl(string value);
    [CompilerGeneratedAttribute]
public string get_AssigneesUrl();
    [CompilerGeneratedAttribute]
private void set_AssigneesUrl(string value);
    [CompilerGeneratedAttribute]
public string get_BlobsUrl();
    [CompilerGeneratedAttribute]
private void set_BlobsUrl(string value);
    [CompilerGeneratedAttribute]
public string get_BranchesUrl();
    [CompilerGeneratedAttribute]
private void set_BranchesUrl(string value);
    [CompilerGeneratedAttribute]
public string get_CollaboratorsUrl();
    [CompilerGeneratedAttribute]
private void set_CollaboratorsUrl(string value);
    [CompilerGeneratedAttribute]
public string get_CommentsUrl();
    [CompilerGeneratedAttribute]
private void set_CommentsUrl(string value);
    [CompilerGeneratedAttribute]
public string get_CommitsUrl();
    [CompilerGeneratedAttribute]
private void set_CommitsUrl(string value);
    [CompilerGeneratedAttribute]
public string get_CompareUrl();
    [CompilerGeneratedAttribute]
private void set_CompareUrl(string value);
    [CompilerGeneratedAttribute]
public string get_ContentsUrl();
    [CompilerGeneratedAttribute]
private void set_ContentsUrl(string value);
    [CompilerGeneratedAttribute]
public string get_ContributorsUrl();
    [CompilerGeneratedAttribute]
private void set_ContributorsUrl(string value);
    [CompilerGeneratedAttribute]
public string get_DeploymentsUrl();
    [CompilerGeneratedAttribute]
private void set_DeploymentsUrl(string value);
    [CompilerGeneratedAttribute]
public string get_DownloadsUrl();
    [CompilerGeneratedAttribute]
private void set_DownloadsUrl(string value);
    [CompilerGeneratedAttribute]
public string get_EventsUrl();
    [CompilerGeneratedAttribute]
private void set_EventsUrl(string value);
    [CompilerGeneratedAttribute]
public string get_ForksUrl();
    [CompilerGeneratedAttribute]
private void set_ForksUrl(string value);
    [CompilerGeneratedAttribute]
public string get_GitCommitUrl();
    [CompilerGeneratedAttribute]
private void set_GitCommitUrl(string value);
    [CompilerGeneratedAttribute]
public string get_GitRefsUrl();
    [CompilerGeneratedAttribute]
private void set_GitRefsUrl(string value);
    [CompilerGeneratedAttribute]
public string get_GitTagsUrl();
    [CompilerGeneratedAttribute]
private void set_GitTagsUrl(string value);
    [CompilerGeneratedAttribute]
public string get_GitUrl();
    [CompilerGeneratedAttribute]
private void set_GitUrl(string value);
    [CompilerGeneratedAttribute]
public string get_IssueCommentUrl();
    [CompilerGeneratedAttribute]
private void set_IssueCommentUrl(string value);
    [CompilerGeneratedAttribute]
public string get_IssueEventsUrl();
    [CompilerGeneratedAttribute]
private void set_IssueEventsUrl(string value);
    [CompilerGeneratedAttribute]
public string get_IssuesUrl();
    [CompilerGeneratedAttribute]
private void set_IssuesUrl(string value);
    [CompilerGeneratedAttribute]
public string get_KeysUrl();
    [CompilerGeneratedAttribute]
private void set_KeysUrl(string value);
    [CompilerGeneratedAttribute]
public string get_LabelsUrl();
    [CompilerGeneratedAttribute]
private void set_LabelsUrl(string value);
    [CompilerGeneratedAttribute]
public string get_LanguagesUrl();
    [CompilerGeneratedAttribute]
private void set_LanguagesUrl(string value);
    [CompilerGeneratedAttribute]
public string get_MergesUrl();
    [CompilerGeneratedAttribute]
private void set_MergesUrl(string value);
    [CompilerGeneratedAttribute]
public string get_MilestonesUrl();
    [CompilerGeneratedAttribute]
private void set_MilestonesUrl(string value);
    [CompilerGeneratedAttribute]
public string get_NotificationsUrl();
    [CompilerGeneratedAttribute]
private void set_NotificationsUrl(string value);
    [CompilerGeneratedAttribute]
public string get_PullsUrl();
    [CompilerGeneratedAttribute]
private void set_PullsUrl(string value);
    [CompilerGeneratedAttribute]
public string get_ReleasesUrl();
    [CompilerGeneratedAttribute]
private void set_ReleasesUrl(string value);
    [CompilerGeneratedAttribute]
public string get_SshUrl();
    [CompilerGeneratedAttribute]
private void set_SshUrl(string value);
    [CompilerGeneratedAttribute]
public string get_StargazersUrl();
    [CompilerGeneratedAttribute]
private void set_StargazersUrl(string value);
    [CompilerGeneratedAttribute]
public string get_StatusesUrl();
    [CompilerGeneratedAttribute]
private void set_StatusesUrl(string value);
    [CompilerGeneratedAttribute]
public string get_SubscribersUrl();
    [CompilerGeneratedAttribute]
private void set_SubscribersUrl(string value);
    [CompilerGeneratedAttribute]
public string get_SubscriptionUrl();
    [CompilerGeneratedAttribute]
private void set_SubscriptionUrl(string value);
    [CompilerGeneratedAttribute]
public string get_TagsUrl();
    [CompilerGeneratedAttribute]
private void set_TagsUrl(string value);
    [CompilerGeneratedAttribute]
public string get_TeamsUrl();
    [CompilerGeneratedAttribute]
private void set_TeamsUrl(string value);
    [CompilerGeneratedAttribute]
public string get_TreesUrl();
    [CompilerGeneratedAttribute]
private void set_TreesUrl(string value);
    [CompilerGeneratedAttribute]
public string get_CloneUrl();
    [CompilerGeneratedAttribute]
private void set_CloneUrl(string value);
    [CompilerGeneratedAttribute]
public string get_MirrorUrl();
    [CompilerGeneratedAttribute]
private void set_MirrorUrl(string value);
    [CompilerGeneratedAttribute]
public string get_HooksUrl();
    [CompilerGeneratedAttribute]
private void set_HooksUrl(string value);
    [CompilerGeneratedAttribute]
public string get_SvnUrl();
    [CompilerGeneratedAttribute]
private void set_SvnUrl(string value);
    [CompilerGeneratedAttribute]
public string get_HomePage();
    [CompilerGeneratedAttribute]
private void set_HomePage(string value);
    [CompilerGeneratedAttribute]
public string get_Language();
    [CompilerGeneratedAttribute]
private void set_Language(string value);
    [CompilerGeneratedAttribute]
public int get_ForksCount();
    [CompilerGeneratedAttribute]
private void set_ForksCount(int value);
    [CompilerGeneratedAttribute]
public int get_StargazersCount();
    [CompilerGeneratedAttribute]
private void set_StargazersCount(int value);
    [CompilerGeneratedAttribute]
public int get_WatchersCount();
    [CompilerGeneratedAttribute]
private void set_WatchersCount(int value);
    [CompilerGeneratedAttribute]
public int get_Size();
    [CompilerGeneratedAttribute]
private void set_Size(int value);
    [CompilerGeneratedAttribute]
public string get_DefaultBranch();
    [CompilerGeneratedAttribute]
private void set_DefaultBranch(string value);
    [CompilerGeneratedAttribute]
public int get_OpenIssuesCount();
    [CompilerGeneratedAttribute]
private void set_OpenIssuesCount(int value);
    [CompilerGeneratedAttribute]
public bool get_IsTemplate();
    [CompilerGeneratedAttribute]
private void set_IsTemplate(bool value);
    [CompilerGeneratedAttribute]
public IReadOnlyList`1<string> get_Topics();
    [CompilerGeneratedAttribute]
private void set_Topics(IReadOnlyList`1<string> value);
    [CompilerGeneratedAttribute]
public bool get_HasIssues();
    [CompilerGeneratedAttribute]
private void set_HasIssues(bool value);
    [CompilerGeneratedAttribute]
public bool get_HasProjects();
    [CompilerGeneratedAttribute]
private void set_HasProjects(bool value);
    [CompilerGeneratedAttribute]
public bool get_HasWiki();
    [CompilerGeneratedAttribute]
private void set_HasWiki(bool value);
    [CompilerGeneratedAttribute]
public bool get_HasPages();
    [CompilerGeneratedAttribute]
private void set_HasPages(bool value);
    [CompilerGeneratedAttribute]
public bool get_HasDownloads();
    [CompilerGeneratedAttribute]
private void set_HasDownloads(bool value);
    [CompilerGeneratedAttribute]
public bool get_Archived();
    [CompilerGeneratedAttribute]
private void set_Archived(bool value);
    [CompilerGeneratedAttribute]
public bool get_Disabled();
    [CompilerGeneratedAttribute]
private void set_Disabled(bool value);
    [CompilerGeneratedAttribute]
public Nullable`1<RepositoryVisibility> get_Visibility();
    [CompilerGeneratedAttribute]
private void set_Visibility(Nullable`1<RepositoryVisibility> value);
    [CompilerGeneratedAttribute]
public Nullable`1<DateTimeOffset> get_PushedAt();
    [CompilerGeneratedAttribute]
private void set_PushedAt(Nullable`1<DateTimeOffset> value);
    [CompilerGeneratedAttribute]
public DateTimeOffset get_CreatedAt();
    [CompilerGeneratedAttribute]
private void set_CreatedAt(DateTimeOffset value);
    [CompilerGeneratedAttribute]
public DateTimeOffset get_UpdatedAt();
    [CompilerGeneratedAttribute]
private void set_UpdatedAt(DateTimeOffset value);
    [CompilerGeneratedAttribute]
public Nullable`1<bool> get_AllowRebaseMerge();
    [CompilerGeneratedAttribute]
private void set_AllowRebaseMerge(Nullable`1<bool> value);
    [CompilerGeneratedAttribute]
public Repository get_TemplateRepository();
    [CompilerGeneratedAttribute]
private void set_TemplateRepository(Repository value);
    [CompilerGeneratedAttribute]
public string get_TempCloneToken();
    [CompilerGeneratedAttribute]
private void set_TempCloneToken(string value);
    [CompilerGeneratedAttribute]
public Nullable`1<bool> get_AllowSquashMerge();
    [CompilerGeneratedAttribute]
private void set_AllowSquashMerge(Nullable`1<bool> value);
    [CompilerGeneratedAttribute]
public Nullable`1<bool> get_AllowAutoMerge();
    [CompilerGeneratedAttribute]
private void set_AllowAutoMerge(Nullable`1<bool> value);
    [CompilerGeneratedAttribute]
public Nullable`1<bool> get_DeleteBranchOnMerge();
    [CompilerGeneratedAttribute]
private void set_DeleteBranchOnMerge(Nullable`1<bool> value);
    [CompilerGeneratedAttribute]
public Nullable`1<bool> get_AllowMergeCommit();
    [CompilerGeneratedAttribute]
private void set_AllowMergeCommit(Nullable`1<bool> value);
    [CompilerGeneratedAttribute]
public Nullable`1<bool> get_AllowForking();
    [CompilerGeneratedAttribute]
private void set_AllowForking(Nullable`1<bool> value);
    [CompilerGeneratedAttribute]
public Nullable`1<bool> get_WebCommitSignoffRequired();
    [CompilerGeneratedAttribute]
private void set_WebCommitSignoffRequired(Nullable`1<bool> value);
    [CompilerGeneratedAttribute]
public int get_SubscribersCount();
    [CompilerGeneratedAttribute]
private void set_SubscribersCount(int value);
    [CompilerGeneratedAttribute]
public int get_NetworkCount();
    [CompilerGeneratedAttribute]
private void set_NetworkCount(int value);
    [CompilerGeneratedAttribute]
public int get_OpenIssues();
    [CompilerGeneratedAttribute]
private void set_OpenIssues(int value);
    [CompilerGeneratedAttribute]
public int get_Watchers();
    [CompilerGeneratedAttribute]
private void set_Watchers(int value);
    [CompilerGeneratedAttribute]
public string get_MasterBranch();
    [CompilerGeneratedAttribute]
private void set_MasterBranch(string value);
    internal string get_DebuggerDisplay();
}
[DebuggerDisplayAttribute("{DebuggerDisplay,nq}")]
public class Octokit.TeamRepositoryPermissions : object {
    [CompilerGeneratedAttribute]
private bool <Pull>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <Triage>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <Push>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <Maintain>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <Admin>k__BackingField;
    public bool Pull { get; private set; }
    public bool Triage { get; private set; }
    public bool Push { get; private set; }
    public bool Maintain { get; private set; }
    public bool Admin { get; private set; }
    internal string DebuggerDisplay { get; }
    public TeamRepositoryPermissions(bool pull, bool triage, bool push, bool maintain, bool admin);
    [CompilerGeneratedAttribute]
public bool get_Pull();
    [CompilerGeneratedAttribute]
private void set_Pull(bool value);
    [CompilerGeneratedAttribute]
public bool get_Triage();
    [CompilerGeneratedAttribute]
private void set_Triage(bool value);
    [CompilerGeneratedAttribute]
public bool get_Push();
    [CompilerGeneratedAttribute]
private void set_Push(bool value);
    [CompilerGeneratedAttribute]
public bool get_Maintain();
    [CompilerGeneratedAttribute]
private void set_Maintain(bool value);
    [CompilerGeneratedAttribute]
public bool get_Admin();
    [CompilerGeneratedAttribute]
private void set_Admin(bool value);
    internal string get_DebuggerDisplay();
}
public enum Octokit.TeamRole : Enum {
    public int value__;
    [ParameterAttribute]
public static TeamRole Member;
    [ParameterAttribute]
public static TeamRole Maintainer;
}
public enum Octokit.TeamRoleFilter : Enum {
    public int value__;
    [ParameterAttribute]
public static TeamRoleFilter Member;
    [ParameterAttribute]
public static TeamRoleFilter Maintainer;
    [ParameterAttribute]
public static TeamRoleFilter All;
}
public class Octokit.TeamsClient : ApiClient {
    public TeamsClient(IApiConnection apiConnection);
    [ManualRouteAttribute("GET", "/teams/{team_id}")]
public sealed virtual Task`1<Team> Get(long teamId);
    [ManualRouteAttribute("GET", "/orgs/{org}/teams")]
public sealed virtual Task`1<IReadOnlyList`1<Team>> GetAll(string org);
    [ManualRouteAttribute("GET", "/orgs/{org}/teams")]
public sealed virtual Task`1<IReadOnlyList`1<Team>> GetAll(string org, ApiOptions options);
    [ManualRouteAttribute("GET", "/user/teams")]
public sealed virtual Task`1<IReadOnlyList`1<Team>> GetAllForCurrent();
    [ManualRouteAttribute("GET", "/user/teams")]
public sealed virtual Task`1<IReadOnlyList`1<Team>> GetAllForCurrent(ApiOptions options);
    [ManualRouteAttribute("GET", "/teams{id}/teams")]
public sealed virtual Task`1<IReadOnlyList`1<Team>> GetAllChildTeams(long teamId);
    [ManualRouteAttribute("GET", "/teams{id}/teams")]
public sealed virtual Task`1<IReadOnlyList`1<Team>> GetAllChildTeams(long teamId, ApiOptions options);
    [ManualRouteAttribute("GET", "/teams{id}/members")]
public sealed virtual Task`1<IReadOnlyList`1<User>> GetAllMembers(long teamId);
    [ManualRouteAttribute("GET", "/teams{id}/members")]
public sealed virtual Task`1<IReadOnlyList`1<User>> GetAllMembers(long teamId, ApiOptions options);
    [ManualRouteAttribute("GET", "/teams{id}/members")]
public sealed virtual Task`1<IReadOnlyList`1<User>> GetAllMembers(long teamId, TeamMembersRequest request);
    [ManualRouteAttribute("GET", "/teams{id}/members")]
public sealed virtual Task`1<IReadOnlyList`1<User>> GetAllMembers(long teamId, TeamMembersRequest request, ApiOptions options);
    [ManualRouteAttribute("GET", "/teams/{team_id}/memberships/{username}")]
public sealed virtual Task`1<TeamMembershipDetails> GetMembershipDetails(long teamId, string login);
    [ManualRouteAttribute("POST", "/orgs/{org}/teams")]
public sealed virtual Task`1<Team> Create(string org, NewTeam team);
    [ManualRouteAttribute("PATCH", "/orgs/{org}/teams/{team_slug}")]
public sealed virtual Task`1<Team> Update(string org, string teamId, UpdateTeam team);
    [ManualRouteAttribute("PATCH", "/teams/{team_id}")]
public sealed virtual Task`1<Team> Update(long teamId, UpdateTeam team);
    [ManualRouteAttribute("DELETE", "/orgs/{org}/teams/{team_slug}")]
public sealed virtual Task Delete(string org, string teamId);
    [ManualRouteAttribute("DELETE", "/teams/{team_id}")]
public sealed virtual Task Delete(long teamId);
    [ManualRouteAttribute("PUT", "/teams/{team_id}/memberships/{username}")]
public sealed virtual Task`1<TeamMembershipDetails> AddOrEditMembership(long teamId, string login, UpdateTeamMembership request);
    [AsyncStateMachineAttribute("Octokit.TeamsClient/<RemoveMembership>d__19")]
[ManualRouteAttribute("DELETE", "/teams/{team_id}/memberships/{username}")]
public sealed virtual Task`1<bool> RemoveMembership(long teamId, string login);
    [ManualRouteAttribute("GET", "/teams/{team_id}/repos")]
public sealed virtual Task`1<IReadOnlyList`1<Repository>> GetAllRepositories(long teamId);
    [ManualRouteAttribute("GET", "/teams/{team_id}/repos")]
public sealed virtual Task`1<IReadOnlyList`1<Repository>> GetAllRepositories(long teamId, ApiOptions options);
    [AsyncStateMachineAttribute("Octokit.TeamsClient/<AddRepository>d__22")]
[ManualRouteAttribute("PUT", "/teams/{team_id}/repos/{owner}/{repo}")]
public sealed virtual Task`1<bool> AddRepository(long teamId, string organization, string repoName);
    [AsyncStateMachineAttribute("Octokit.TeamsClient/<AddRepository>d__23")]
[ManualRouteAttribute("PUT", "/teams/{team_id}/repos/{owner}/{repo}")]
public sealed virtual Task`1<bool> AddRepository(long teamId, string organization, string repoName, RepositoryPermissionRequest permission);
    [AsyncStateMachineAttribute("Octokit.TeamsClient/<RemoveRepository>d__24")]
[ManualRouteAttribute("DELETE", "/teams/{team_id}/repos/{owner}/{repo}")]
public sealed virtual Task`1<bool> RemoveRepository(long teamId, string organization, string repoName);
    [AsyncStateMachineAttribute("Octokit.TeamsClient/<IsRepositoryManagedByTeam>d__25")]
[ManualRouteAttribute("GET", "/teams/{team_id}/repos/{owner}/{name}")]
public sealed virtual Task`1<bool> IsRepositoryManagedByTeam(long teamId, string owner, string repo);
    [ManualRouteAttribute("GET", "/teams/{team_id}/invitations")]
public sealed virtual Task`1<IReadOnlyList`1<OrganizationMembershipInvitation>> GetAllPendingInvitations(long teamId);
    [ManualRouteAttribute("GET", "/teams/{team_id}/invitations")]
public sealed virtual Task`1<IReadOnlyList`1<OrganizationMembershipInvitation>> GetAllPendingInvitations(long teamId, ApiOptions options);
    [AsyncStateMachineAttribute("Octokit.TeamsClient/<CheckTeamPermissionsForARepository>d__28")]
[ManualRouteAttribute("GET", "/orgs/{org}/teams/{team_slug}/repos/{owner}/{repo}")]
public sealed virtual Task`1<bool> CheckTeamPermissionsForARepository(string org, string teamId, string owner, string repo);
    [ManualRouteAttribute("GET", "/orgs/{org}/teams/{team_slug}/repos/{owner}/{repo}")]
public sealed virtual Task`1<TeamRepository> CheckTeamPermissionsForARepositoryWithCustomAcceptHeader(string org, string teamId, string owner, string repo);
    [ManualRouteAttribute("PUT", "/orgs/{org}/teams/{team_slug}/repos/{owner}/{repo}")]
public sealed virtual Task AddOrUpdateTeamRepositoryPermissions(string org, string teamId, string owner, string repo, string permission);
    [ManualRouteAttribute("DELETE", "/orgs/{org}/teams/{team_slug}/repos/{owner}/{repo}")]
public sealed virtual Task RemoveRepositoryFromATeam(string org, string teamId, string owner, string repo);
    [ManualRouteAttribute("GET", "/orgs/{org}/teams/{teamId}")]
public sealed virtual Task`1<Team> GetByName(string org, string teamId);
}
[DebuggerDisplayAttribute("{DebuggerDisplay,nq}")]
public class Octokit.ThreadSubscription : object {
    [CompilerGeneratedAttribute]
private bool <Subscribed>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <Ignored>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Reason>k__BackingField;
    [CompilerGeneratedAttribute]
private DateTimeOffset <CreatedAt>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Url>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ThreadUrl>k__BackingField;
    public bool Subscribed { get; private set; }
    public bool Ignored { get; private set; }
    public string Reason { get; private set; }
    public DateTimeOffset CreatedAt { get; private set; }
    public string Url { get; private set; }
    public string ThreadUrl { get; private set; }
    internal string DebuggerDisplay { get; }
    public ThreadSubscription(bool subscribed, bool ignored, string reason, DateTimeOffset createdAt, string url, string threadUrl);
    [CompilerGeneratedAttribute]
public bool get_Subscribed();
    [CompilerGeneratedAttribute]
private void set_Subscribed(bool value);
    [CompilerGeneratedAttribute]
public bool get_Ignored();
    [CompilerGeneratedAttribute]
private void set_Ignored(bool value);
    [CompilerGeneratedAttribute]
public string get_Reason();
    [CompilerGeneratedAttribute]
private void set_Reason(string value);
    [CompilerGeneratedAttribute]
public DateTimeOffset get_CreatedAt();
    [CompilerGeneratedAttribute]
private void set_CreatedAt(DateTimeOffset value);
    [CompilerGeneratedAttribute]
public string get_Url();
    [CompilerGeneratedAttribute]
private void set_Url(string value);
    [CompilerGeneratedAttribute]
public string get_ThreadUrl();
    [CompilerGeneratedAttribute]
private void set_ThreadUrl(string value);
    internal string get_DebuggerDisplay();
}
[DebuggerDisplayAttribute("{DebuggerDisplay,nq}")]
public class Octokit.TimelineEventInfo : object {
    [CompilerGeneratedAttribute]
private long <Id>k__BackingField;
    [CompilerGeneratedAttribute]
private string <NodeId>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Url>k__BackingField;
    [CompilerGeneratedAttribute]
private User <Actor>k__BackingField;
    [CompilerGeneratedAttribute]
private string <CommitId>k__BackingField;
    [CompilerGeneratedAttribute]
private StringEnum`1<EventInfoState> <Event>k__BackingField;
    [CompilerGeneratedAttribute]
private DateTimeOffset <CreatedAt>k__BackingField;
    [CompilerGeneratedAttribute]
private Label <Label>k__BackingField;
    [CompilerGeneratedAttribute]
private User <Assignee>k__BackingField;
    [CompilerGeneratedAttribute]
private Milestone <Milestone>k__BackingField;
    [CompilerGeneratedAttribute]
private SourceInfo <Source>k__BackingField;
    [CompilerGeneratedAttribute]
private RenameInfo <Rename>k__BackingField;
    [CompilerGeneratedAttribute]
private IssueEventProjectCard <ProjectCard>k__BackingField;
    public long Id { get; private set; }
    public string NodeId { get; private set; }
    public string Url { get; private set; }
    public User Actor { get; private set; }
    public string CommitId { get; private set; }
    public StringEnum`1<EventInfoState> Event { get; private set; }
    public DateTimeOffset CreatedAt { get; private set; }
    public Label Label { get; private set; }
    public User Assignee { get; private set; }
    public Milestone Milestone { get; private set; }
    public SourceInfo Source { get; private set; }
    public RenameInfo Rename { get; private set; }
    public IssueEventProjectCard ProjectCard { get; private set; }
    internal string DebuggerDisplay { get; }
    public TimelineEventInfo(long id, string nodeId, string url, User actor, string commitId, EventInfoState event, DateTimeOffset createdAt, Label label, User assignee, Milestone milestone, SourceInfo source, RenameInfo rename, IssueEventProjectCard projectCard);
    [CompilerGeneratedAttribute]
public long get_Id();
    [CompilerGeneratedAttribute]
private void set_Id(long value);
    [CompilerGeneratedAttribute]
public string get_NodeId();
    [CompilerGeneratedAttribute]
private void set_NodeId(string value);
    [CompilerGeneratedAttribute]
public string get_Url();
    [CompilerGeneratedAttribute]
private void set_Url(string value);
    [CompilerGeneratedAttribute]
public User get_Actor();
    [CompilerGeneratedAttribute]
private void set_Actor(User value);
    [CompilerGeneratedAttribute]
public string get_CommitId();
    [CompilerGeneratedAttribute]
private void set_CommitId(string value);
    [CompilerGeneratedAttribute]
public StringEnum`1<EventInfoState> get_Event();
    [CompilerGeneratedAttribute]
private void set_Event(StringEnum`1<EventInfoState> value);
    [CompilerGeneratedAttribute]
public DateTimeOffset get_CreatedAt();
    [CompilerGeneratedAttribute]
private void set_CreatedAt(DateTimeOffset value);
    [CompilerGeneratedAttribute]
public Label get_Label();
    [CompilerGeneratedAttribute]
private void set_Label(Label value);
    [CompilerGeneratedAttribute]
public User get_Assignee();
    [CompilerGeneratedAttribute]
private void set_Assignee(User value);
    [CompilerGeneratedAttribute]
public Milestone get_Milestone();
    [CompilerGeneratedAttribute]
private void set_Milestone(Milestone value);
    [CompilerGeneratedAttribute]
public SourceInfo get_Source();
    [CompilerGeneratedAttribute]
private void set_Source(SourceInfo value);
    [CompilerGeneratedAttribute]
public RenameInfo get_Rename();
    [CompilerGeneratedAttribute]
private void set_Rename(RenameInfo value);
    [CompilerGeneratedAttribute]
public IssueEventProjectCard get_ProjectCard();
    [CompilerGeneratedAttribute]
private void set_ProjectCard(IssueEventProjectCard value);
    internal string get_DebuggerDisplay();
}
public enum Octokit.TrafficDayOrWeek : Enum {
    public int value__;
    [ParameterAttribute]
public static TrafficDayOrWeek Day;
    [ParameterAttribute]
public static TrafficDayOrWeek Week;
}
[DebuggerDisplayAttribute("{DebuggerDisplay,nq}")]
public class Octokit.TreeItem : object {
    [CompilerGeneratedAttribute]
private string <Path>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Mode>k__BackingField;
    [CompilerGeneratedAttribute]
private StringEnum`1<TreeType> <Type>k__BackingField;
    [CompilerGeneratedAttribute]
private int <Size>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Sha>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Url>k__BackingField;
    public string Path { get; private set; }
    public string Mode { get; private set; }
    public StringEnum`1<TreeType> Type { get; private set; }
    public int Size { get; private set; }
    public string Sha { get; private set; }
    public string Url { get; private set; }
    internal string DebuggerDisplay { get; }
    public TreeItem(string path, string mode, TreeType type, int size, string sha, string url);
    [CompilerGeneratedAttribute]
public string get_Path();
    [CompilerGeneratedAttribute]
private void set_Path(string value);
    [CompilerGeneratedAttribute]
public string get_Mode();
    [CompilerGeneratedAttribute]
private void set_Mode(string value);
    [CompilerGeneratedAttribute]
public StringEnum`1<TreeType> get_Type();
    [CompilerGeneratedAttribute]
private void set_Type(StringEnum`1<TreeType> value);
    [CompilerGeneratedAttribute]
public int get_Size();
    [CompilerGeneratedAttribute]
private void set_Size(int value);
    [CompilerGeneratedAttribute]
public string get_Sha();
    [CompilerGeneratedAttribute]
private void set_Sha(string value);
    [CompilerGeneratedAttribute]
public string get_Url();
    [CompilerGeneratedAttribute]
private void set_Url(string value);
    internal string get_DebuggerDisplay();
}
[DebuggerDisplayAttribute("{DebuggerDisplay,nq}")]
public class Octokit.TreeResponse : object {
    [CompilerGeneratedAttribute]
private string <Sha>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Url>k__BackingField;
    [CompilerGeneratedAttribute]
private IReadOnlyList`1<TreeItem> <Tree>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <Truncated>k__BackingField;
    public string Sha { get; private set; }
    public string Url { get; private set; }
    public IReadOnlyList`1<TreeItem> Tree { get; private set; }
    public bool Truncated { get; private set; }
    internal string DebuggerDisplay { get; }
    public TreeResponse(string sha, string url, IReadOnlyList`1<TreeItem> tree, bool truncated);
    [CompilerGeneratedAttribute]
public string get_Sha();
    [CompilerGeneratedAttribute]
private void set_Sha(string value);
    [CompilerGeneratedAttribute]
public string get_Url();
    [CompilerGeneratedAttribute]
private void set_Url(string value);
    [CompilerGeneratedAttribute]
public IReadOnlyList`1<TreeItem> get_Tree();
    [CompilerGeneratedAttribute]
private void set_Tree(IReadOnlyList`1<TreeItem> value);
    [CompilerGeneratedAttribute]
public bool get_Truncated();
    [CompilerGeneratedAttribute]
private void set_Truncated(bool value);
    internal string get_DebuggerDisplay();
}
public class Octokit.TreesClient : ApiClient {
    public TreesClient(IApiConnection apiConnection);
    [ManualRouteAttribute("GET", "/repos/{owner}/{repo}/git/trees/{tree_sha}")]
public sealed virtual Task`1<TreeResponse> Get(string owner, string name, string reference);
    [ManualRouteAttribute("GET", "/repositories/{id}/git/trees/{tree_sha}")]
public sealed virtual Task`1<TreeResponse> Get(long repositoryId, string reference);
    [ManualRouteAttribute("GET", "/repos/{owner}/{repo}/git/trees/{tree_sha}?recursive=1")]
public sealed virtual Task`1<TreeResponse> GetRecursive(string owner, string name, string reference);
    [ManualRouteAttribute("GET", "/repositories/{id}/git/trees/{tree_sha}?recursive=1")]
public sealed virtual Task`1<TreeResponse> GetRecursive(long repositoryId, string reference);
    [ManualRouteAttribute("POST", "/repos/{owner}/{repo}/git/trees")]
public sealed virtual Task`1<TreeResponse> Create(string owner, string name, NewTree newTree);
    [ManualRouteAttribute("POST", "/repos/{id}/git/trees")]
public sealed virtual Task`1<TreeResponse> Create(long repositoryId, NewTree newTree);
}
public enum Octokit.TreeType : Enum {
    public int value__;
    [ParameterAttribute]
public static TreeType Blob;
    [ParameterAttribute]
public static TreeType Tree;
    [ParameterAttribute]
public static TreeType Commit;
}
public abstract class Octokit.TwoFactorAuthorizationException : AuthorizationException {
    [CompilerGeneratedAttribute]
private TwoFactorType <TwoFactorType>k__BackingField;
    public TwoFactorType TwoFactorType { get; private set; }
    protected TwoFactorAuthorizationException(TwoFactorType twoFactorType, Exception innerException);
    protected TwoFactorAuthorizationException(IResponse response, TwoFactorType twoFactorType);
    protected TwoFactorAuthorizationException(IResponse response, TwoFactorType twoFactorType, Exception innerException);
    protected TwoFactorAuthorizationException(SerializationInfo info, StreamingContext context);
    [CompilerGeneratedAttribute]
public TwoFactorType get_TwoFactorType();
    [CompilerGeneratedAttribute]
private void set_TwoFactorType(TwoFactorType value);
    [SecurityCriticalAttribute]
public virtual void GetObjectData(SerializationInfo info, StreamingContext context);
}
public class Octokit.TwoFactorChallengeFailedException : TwoFactorAuthorizationException {
    [CompilerGeneratedAttribute]
private string <AuthorizationCode>k__BackingField;
    public string Message { get; }
    public string AuthorizationCode { get; private set; }
    public TwoFactorChallengeFailedException(string authorizationCode, ApiException innerException);
    protected TwoFactorChallengeFailedException(SerializationInfo info, StreamingContext context);
    public virtual string get_Message();
    [CompilerGeneratedAttribute]
public string get_AuthorizationCode();
    [CompilerGeneratedAttribute]
private void set_AuthorizationCode(string value);
    private static TwoFactorType ParseTwoFactorType(ApiException exception);
    [SecurityCriticalAttribute]
public virtual void GetObjectData(SerializationInfo info, StreamingContext context);
}
public class Octokit.TwoFactorChallengeResult : object {
    public static TwoFactorChallengeResult RequestResendCode;
    [CompilerGeneratedAttribute]
private bool <ResendCodeRequested>k__BackingField;
    [CompilerGeneratedAttribute]
private string <AuthenticationCode>k__BackingField;
    public bool ResendCodeRequested { get; private set; }
    public string AuthenticationCode { get; private set; }
    public TwoFactorChallengeResult(string authenticationCode);
    private TwoFactorChallengeResult(string authenticationCode, bool resendCodeRequested);
    private static TwoFactorChallengeResult();
    [CompilerGeneratedAttribute]
public bool get_ResendCodeRequested();
    [CompilerGeneratedAttribute]
private void set_ResendCodeRequested(bool value);
    [CompilerGeneratedAttribute]
public string get_AuthenticationCode();
    [CompilerGeneratedAttribute]
private void set_AuthenticationCode(string value);
}
public class Octokit.TwoFactorRequiredException : TwoFactorAuthorizationException {
    public string Message { get; }
    public TwoFactorRequiredException(TwoFactorType twoFactorType);
    public TwoFactorRequiredException(IResponse response, TwoFactorType twoFactorType);
    protected TwoFactorRequiredException(SerializationInfo info, StreamingContext context);
    public virtual string get_Message();
}
public enum Octokit.TwoFactorType : Enum {
    public int value__;
    public static TwoFactorType None;
    public static TwoFactorType Unknown;
    public static TwoFactorType Sms;
    public static TwoFactorType AuthenticatorApp;
}
[DebuggerDisplayAttribute("{DebuggerDisplay,nq}")]
public class Octokit.UpdateFileRequest : CreateFileRequest {
    [CompilerGeneratedAttribute]
private string <Sha>k__BackingField;
    public string Sha { get; private set; }
    internal string DebuggerDisplay { get; }
    public UpdateFileRequest(string message, string content, string sha);
    public UpdateFileRequest(string message, string content, string sha, string branch);
    public UpdateFileRequest(string message, string content, string sha, bool convertContentToBase64);
    public UpdateFileRequest(string message, string content, string sha, string branch, bool convertContentToBase64);
    [CompilerGeneratedAttribute]
public string get_Sha();
    [CompilerGeneratedAttribute]
private void set_Sha(string value);
    internal virtual string get_DebuggerDisplay();
}
[DebuggerDisplayAttribute("{DebuggerDisplay,nq}")]
public class Octokit.UpdateMaintenanceRequest : FormUrlEncodedParameters {
    [CompilerGeneratedAttribute]
private UpdateMaintenanceRequestDetails <Maintenance>k__BackingField;
    public UpdateMaintenanceRequestDetails Maintenance { get; protected set; }
    internal string DebuggerDisplay { get; }
    public UpdateMaintenanceRequest(UpdateMaintenanceRequestDetails maintenance);
    [CompilerGeneratedAttribute]
public UpdateMaintenanceRequestDetails get_Maintenance();
    [CompilerGeneratedAttribute]
protected void set_Maintenance(UpdateMaintenanceRequestDetails value);
    internal string get_DebuggerDisplay();
}
[DebuggerDisplayAttribute("{DebuggerDisplay,nq}")]
public class Octokit.UpdateMaintenanceRequestDetails : object {
    [CompilerGeneratedAttribute]
private bool <Enabled>k__BackingField;
    [CompilerGeneratedAttribute]
private string <When>k__BackingField;
    public bool Enabled { get; protected set; }
    public string When { get; protected set; }
    internal string DebuggerDisplay { get; }
    public UpdateMaintenanceRequestDetails(bool enabled);
    public UpdateMaintenanceRequestDetails(bool enabled, string when);
    public UpdateMaintenanceRequestDetails(bool enabled, DateTimeOffset when);
    [CompilerGeneratedAttribute]
public bool get_Enabled();
    [CompilerGeneratedAttribute]
protected void set_Enabled(bool value);
    [CompilerGeneratedAttribute]
public string get_When();
    [CompilerGeneratedAttribute]
protected void set_When(string value);
    internal string get_DebuggerDisplay();
}
[DebuggerDisplayAttribute("{DebuggerDisplay,nq}")]
public class Octokit.UpdatePreReceiveEnvironment : object {
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ImageUrl>k__BackingField;
    public string Name { get; public set; }
    public string ImageUrl { get; public set; }
    internal string DebuggerDisplay { get; }
    [CompilerGeneratedAttribute]
public string get_Name();
    [CompilerGeneratedAttribute]
public void set_Name(string value);
    [CompilerGeneratedAttribute]
public string get_ImageUrl();
    [CompilerGeneratedAttribute]
public void set_ImageUrl(string value);
    internal string get_DebuggerDisplay();
}
[DebuggerDisplayAttribute("{DebuggerDisplay,nq}")]
public class Octokit.UpdatePreReceiveHook : object {
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Script>k__BackingField;
    [CompilerGeneratedAttribute]
private RepositoryReference <ScriptRepository>k__BackingField;
    [CompilerGeneratedAttribute]
private PreReceiveEnvironmentReference <Environment>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<PreReceiveHookEnforcement> <Enforcement>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<bool> <AllowDownstreamConfiguration>k__BackingField;
    public string Name { get; public set; }
    public string Script { get; public set; }
    public RepositoryReference ScriptRepository { get; public set; }
    public PreReceiveEnvironmentReference Environment { get; public set; }
    public Nullable`1<PreReceiveHookEnforcement> Enforcement { get; public set; }
    public Nullable`1<bool> AllowDownstreamConfiguration { get; public set; }
    internal string DebuggerDisplay { get; }
    [CompilerGeneratedAttribute]
public string get_Name();
    [CompilerGeneratedAttribute]
public void set_Name(string value);
    [CompilerGeneratedAttribute]
public string get_Script();
    [CompilerGeneratedAttribute]
public void set_Script(string value);
    [CompilerGeneratedAttribute]
public RepositoryReference get_ScriptRepository();
    [CompilerGeneratedAttribute]
public void set_ScriptRepository(RepositoryReference value);
    [CompilerGeneratedAttribute]
public PreReceiveEnvironmentReference get_Environment();
    [CompilerGeneratedAttribute]
public void set_Environment(PreReceiveEnvironmentReference value);
    [CompilerGeneratedAttribute]
public Nullable`1<PreReceiveHookEnforcement> get_Enforcement();
    [CompilerGeneratedAttribute]
public void set_Enforcement(Nullable`1<PreReceiveHookEnforcement> value);
    [CompilerGeneratedAttribute]
public Nullable`1<bool> get_AllowDownstreamConfiguration();
    [CompilerGeneratedAttribute]
public void set_AllowDownstreamConfiguration(Nullable`1<bool> value);
    internal string get_DebuggerDisplay();
}
[DebuggerDisplayAttribute("{DebuggerDisplay,nq}")]
public class Octokit.UpdateTeam : object {
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Description>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<TeamPrivacy> <Privacy>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<TeamPermission> <Permission>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<long> <ParentTeamId>k__BackingField;
    public string Name { get; private set; }
    public string Description { get; public set; }
    public Nullable`1<TeamPrivacy> Privacy { get; public set; }
    public Nullable`1<TeamPermission> Permission { get; public set; }
    public Nullable`1<long> ParentTeamId { get; public set; }
    internal string DebuggerDisplay { get; }
    public UpdateTeam(string name);
    [CompilerGeneratedAttribute]
public string get_Name();
    [CompilerGeneratedAttribute]
private void set_Name(string value);
    [CompilerGeneratedAttribute]
public string get_Description();
    [CompilerGeneratedAttribute]
public void set_Description(string value);
    [CompilerGeneratedAttribute]
public Nullable`1<TeamPrivacy> get_Privacy();
    [CompilerGeneratedAttribute]
public void set_Privacy(Nullable`1<TeamPrivacy> value);
    [CompilerGeneratedAttribute]
public Nullable`1<TeamPermission> get_Permission();
    [CompilerGeneratedAttribute]
public void set_Permission(Nullable`1<TeamPermission> value);
    [CompilerGeneratedAttribute]
public Nullable`1<long> get_ParentTeamId();
    [CompilerGeneratedAttribute]
public void set_ParentTeamId(Nullable`1<long> value);
    internal string get_DebuggerDisplay();
}
[DebuggerDisplayAttribute("{DebuggerDisplay,nq}")]
public class Octokit.UpdateTeamMembership : object {
    [CompilerGeneratedAttribute]
private TeamRole <Role>k__BackingField;
    public TeamRole Role { get; private set; }
    internal string DebuggerDisplay { get; }
    public UpdateTeamMembership(TeamRole role);
    [CompilerGeneratedAttribute]
public TeamRole get_Role();
    [CompilerGeneratedAttribute]
private void set_Role(TeamRole value);
    internal string get_DebuggerDisplay();
}
[DebuggerDisplayAttribute("{DebuggerDisplay,nq}")]
public class Octokit.UpsertOrganizationCustomProperties : object {
    [CompilerGeneratedAttribute]
private List`1<OrganizationCustomPropertyUpdate> <Properties>k__BackingField;
    [ParameterAttribute]
public List`1<OrganizationCustomPropertyUpdate> Properties { get; public set; }
    internal string DebuggerDisplay { get; }
    public UpsertOrganizationCustomProperties(List`1<OrganizationCustomPropertyUpdate> properties);
    [CompilerGeneratedAttribute]
public List`1<OrganizationCustomPropertyUpdate> get_Properties();
    [CompilerGeneratedAttribute]
public void set_Properties(List`1<OrganizationCustomPropertyUpdate> value);
    internal string get_DebuggerDisplay();
}
[DebuggerDisplayAttribute("{DebuggerDisplay,nq}")]
public class Octokit.UpsertOrganizationCustomProperty : object {
    [CompilerGeneratedAttribute]
private StringEnum`1<CustomPropertyValueType> <ValueType>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <Required>k__BackingField;
    [CompilerGeneratedAttribute]
private object <DefaultValue>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Description>k__BackingField;
    [CompilerGeneratedAttribute]
private IEnumerable`1<string> <AllowedValues>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<StringEnum`1<CustomPropertyValuesEditableBy>> <ValuesEditableBy>k__BackingField;
    public StringEnum`1<CustomPropertyValueType> ValueType { get; public set; }
    public bool Required { get; public set; }
    public object DefaultValue { get; private set; }
    public string Description { get; public set; }
    public IEnumerable`1<string> AllowedValues { get; public set; }
    public Nullable`1<StringEnum`1<CustomPropertyValuesEditableBy>> ValuesEditableBy { get; public set; }
    internal string DebuggerDisplay { get; }
    public UpsertOrganizationCustomProperty(CustomPropertyValueType valueType);
    public UpsertOrganizationCustomProperty(CustomPropertyValueType valueType, string defaultValue);
    public UpsertOrganizationCustomProperty(CustomPropertyValueType valueType, IReadOnlyList`1<string> defaultValue);
    [CompilerGeneratedAttribute]
public StringEnum`1<CustomPropertyValueType> get_ValueType();
    [CompilerGeneratedAttribute]
public void set_ValueType(StringEnum`1<CustomPropertyValueType> value);
    [CompilerGeneratedAttribute]
public bool get_Required();
    [CompilerGeneratedAttribute]
public void set_Required(bool value);
    [CompilerGeneratedAttribute]
public object get_DefaultValue();
    [CompilerGeneratedAttribute]
private void set_DefaultValue(object value);
    [CompilerGeneratedAttribute]
public string get_Description();
    [CompilerGeneratedAttribute]
public void set_Description(string value);
    [CompilerGeneratedAttribute]
public IEnumerable`1<string> get_AllowedValues();
    [CompilerGeneratedAttribute]
public void set_AllowedValues(IEnumerable`1<string> value);
    [CompilerGeneratedAttribute]
public Nullable`1<StringEnum`1<CustomPropertyValuesEditableBy>> get_ValuesEditableBy();
    [CompilerGeneratedAttribute]
public void set_ValuesEditableBy(Nullable`1<StringEnum`1<CustomPropertyValuesEditableBy>> value);
    internal string get_DebuggerDisplay();
}
[DebuggerDisplayAttribute("{DebuggerDisplay,nq}")]
public class Octokit.UpsertOrganizationCustomPropertyValues : object {
    [CompilerGeneratedAttribute]
private List`1<string> <RepositoryNames>k__BackingField;
    [CompilerGeneratedAttribute]
private List`1<CustomPropertyValueUpdate> <Properties>k__BackingField;
    [ParameterAttribute]
public List`1<string> RepositoryNames { get; public set; }
    [ParameterAttribute]
public List`1<CustomPropertyValueUpdate> Properties { get; public set; }
    internal string DebuggerDisplay { get; }
    public UpsertOrganizationCustomPropertyValues(List`1<string> repositoryNames, List`1<CustomPropertyValueUpdate> properties);
    [CompilerGeneratedAttribute]
public List`1<string> get_RepositoryNames();
    [CompilerGeneratedAttribute]
public void set_RepositoryNames(List`1<string> value);
    [CompilerGeneratedAttribute]
public List`1<CustomPropertyValueUpdate> get_Properties();
    [CompilerGeneratedAttribute]
public void set_Properties(List`1<CustomPropertyValueUpdate> value);
    internal string get_DebuggerDisplay();
}
[DebuggerDisplayAttribute("{DebuggerDisplay,nq}")]
public class Octokit.UpsertOrganizationSecret : UpsertRepositorySecret {
    [CompilerGeneratedAttribute]
private string <Visibility>k__BackingField;
    [CompilerGeneratedAttribute]
private IEnumerable`1<long> <SelectedRepositoriesIds>k__BackingField;
    [ParameterAttribute]
public string Visibility { get; public set; }
    [ParameterAttribute]
public IEnumerable`1<long> SelectedRepositoriesIds { get; public set; }
    internal string DebuggerDisplay { get; }
    public UpsertOrganizationSecret(string encryptedValue, string encryptionKeyId, string visibility, IEnumerable`1<long> selectedRepositoriesIds);
    [CompilerGeneratedAttribute]
public string get_Visibility();
    [CompilerGeneratedAttribute]
public void set_Visibility(string value);
    [CompilerGeneratedAttribute]
public IEnumerable`1<long> get_SelectedRepositoriesIds();
    [CompilerGeneratedAttribute]
public void set_SelectedRepositoriesIds(IEnumerable`1<long> value);
    internal string get_DebuggerDisplay();
}
[DebuggerDisplayAttribute("{DebuggerDisplay,nq}")]
public class Octokit.UpsertRepositoryCustomPropertyValues : object {
    [CompilerGeneratedAttribute]
private List`1<CustomPropertyValueUpdate> <Properties>k__BackingField;
    [ParameterAttribute]
public List`1<CustomPropertyValueUpdate> Properties { get; public set; }
    internal string DebuggerDisplay { get; }
    [CompilerGeneratedAttribute]
public List`1<CustomPropertyValueUpdate> get_Properties();
    [CompilerGeneratedAttribute]
public void set_Properties(List`1<CustomPropertyValueUpdate> value);
    internal string get_DebuggerDisplay();
}
[DebuggerDisplayAttribute("{DebuggerDisplay,nq}")]
public class Octokit.UpsertRepositorySecret : object {
    [CompilerGeneratedAttribute]
private string <EncryptedValue>k__BackingField;
    [CompilerGeneratedAttribute]
private string <KeyId>k__BackingField;
    [ParameterAttribute]
public string EncryptedValue { get; public set; }
    [ParameterAttribute]
public string KeyId { get; public set; }
    internal string DebuggerDisplay { get; }
    [CompilerGeneratedAttribute]
public string get_EncryptedValue();
    [CompilerGeneratedAttribute]
public void set_EncryptedValue(string value);
    [CompilerGeneratedAttribute]
public string get_KeyId();
    [CompilerGeneratedAttribute]
public void set_KeyId(string value);
    internal string get_DebuggerDisplay();
}
[ExtensionAttribute]
public static class Octokit.UriExtensions : object {
    [ExtensionAttribute]
public static Uri StripRelativeUri(Uri uri);
    [ExtensionAttribute]
public static Uri ReplaceRelativeUri(Uri uri, Uri relativeUri);
    [ExtensionAttribute]
public static Uri ApplyParameters(Uri uri, IDictionary`2<string, string> parameters);
}
[ExcludeFromCtorWithAllPropertiesConventionTestAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[DebuggerDisplayAttribute("{DebuggerDisplay,nq}")]
public class Octokit.User : Account {
    [CompilerGeneratedAttribute]
private RepositoryPermissions <Permissions>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <SiteAdmin>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<DateTimeOffset> <SuspendedAt>k__BackingField;
    [CompilerGeneratedAttribute]
private string <LdapDistinguishedName>k__BackingField;
    [CompilerGeneratedAttribute]
private DateTimeOffset <UpdatedAt>k__BackingField;
    public RepositoryPermissions Permissions { get; private set; }
    public bool SiteAdmin { get; private set; }
    public Nullable`1<DateTimeOffset> SuspendedAt { get; private set; }
    public bool Suspended { get; }
    [ParameterAttribute]
public string LdapDistinguishedName { get; private set; }
    public DateTimeOffset UpdatedAt { get; private set; }
    internal string DebuggerDisplay { get; }
    public User(string avatarUrl, string bio, string blog, int collaborators, string company, DateTimeOffset createdAt, DateTimeOffset updatedAt, int diskUsage, string email, int followers, int following, Nullable`1<bool> hireable, string htmlUrl, int totalPrivateRepos, long id, string location, string login, string name, string nodeId, int ownedPrivateRepos, Plan plan, int privateGists, int publicGists, int publicRepos, string url, RepositoryPermissions permissions, bool siteAdmin, string ldapDistinguishedName, Nullable`1<DateTimeOffset> suspendedAt);
    [CompilerGeneratedAttribute]
public RepositoryPermissions get_Permissions();
    [CompilerGeneratedAttribute]
private void set_Permissions(RepositoryPermissions value);
    [CompilerGeneratedAttribute]
public bool get_SiteAdmin();
    [CompilerGeneratedAttribute]
private void set_SiteAdmin(bool value);
    [CompilerGeneratedAttribute]
public Nullable`1<DateTimeOffset> get_SuspendedAt();
    [CompilerGeneratedAttribute]
private void set_SuspendedAt(Nullable`1<DateTimeOffset> value);
    public bool get_Suspended();
    [CompilerGeneratedAttribute]
public string get_LdapDistinguishedName();
    [CompilerGeneratedAttribute]
private void set_LdapDistinguishedName(string value);
    [CompilerGeneratedAttribute]
public DateTimeOffset get_UpdatedAt();
    [CompilerGeneratedAttribute]
private void set_UpdatedAt(DateTimeOffset value);
    internal string get_DebuggerDisplay();
}
public class Octokit.UserAdministrationClient : ApiClient {
    public UserAdministrationClient(IApiConnection apiConnection);
    [ManualRouteAttribute("POST", "/admin/users")]
public sealed virtual Task`1<User> Create(NewUser newUser);
    [ManualRouteAttribute("POST", "/admin/users/{username}")]
public sealed virtual Task`1<UserRenameResponse> Rename(string login, UserRename userRename);
    [ManualRouteAttribute("POST", "/admin/users/{username}/authorizations")]
public sealed virtual Task`1<Authorization> CreateImpersonationToken(string login, NewImpersonationToken newImpersonationToken);
    [AsyncStateMachineAttribute("Octokit.UserAdministrationClient/<DeleteImpersonationToken>d__4")]
[ManualRouteAttribute("DELETE", "/admin/users/{username}/authorizations")]
public sealed virtual Task DeleteImpersonationToken(string login);
    [ManualRouteAttribute("PUT", "/users/{username}/site_admin")]
public sealed virtual Task Promote(string login);
    [ManualRouteAttribute("DELETE", "/users/{username}/site_admin")]
public sealed virtual Task Demote(string login);
    [ManualRouteAttribute("PUT", "/users/{username}/suspended")]
public sealed virtual Task Suspend(string login);
    [ManualRouteAttribute("DELETE", "/users/{username}/suspended")]
public sealed virtual Task Unsuspend(string login);
    [ManualRouteAttribute("PUT", "/admin/keys")]
public sealed virtual Task`1<IReadOnlyList`1<PublicKey>> ListAllPublicKeys();
    [AsyncStateMachineAttribute("Octokit.UserAdministrationClient/<Delete>d__10")]
[ManualRouteAttribute("DELETE", "/admin/users/{username}")]
public sealed virtual Task Delete(string login);
    [AsyncStateMachineAttribute("Octokit.UserAdministrationClient/<DeletePublicKey>d__11")]
[ManualRouteAttribute("DELETE", "/admin/keys/{key_id}")]
public sealed virtual Task DeletePublicKey(int keyId);
}
public class Octokit.UserEmailsClient : ApiClient {
    public UserEmailsClient(IApiConnection apiConnection);
    [ManualRouteAttribute("GET", "/user/emails")]
public sealed virtual Task`1<IReadOnlyList`1<EmailAddress>> GetAll();
    [ManualRouteAttribute("GET", "/user/emails")]
public sealed virtual Task`1<IReadOnlyList`1<EmailAddress>> GetAll(ApiOptions options);
    [ManualRouteAttribute("POST", "/user/emails")]
public sealed virtual Task`1<IReadOnlyList`1<EmailAddress>> Add(String[] emailAddresses);
    [ManualRouteAttribute("DELETE", "/user/emails")]
public sealed virtual Task Delete(String[] emailAddresses);
}
public class Octokit.UserGpgKeysClient : ApiClient {
    public UserGpgKeysClient(IApiConnection apiConnection);
    [ManualRouteAttribute("GET", "/user/gpg_keys")]
public sealed virtual Task`1<IReadOnlyList`1<GpgKey>> GetAllForCurrent();
    [ManualRouteAttribute("GET", "/user/gpg_keys")]
public sealed virtual Task`1<IReadOnlyList`1<GpgKey>> GetAllForCurrent(ApiOptions options);
    [ManualRouteAttribute("GET", "/user/gpg_keys/{gpg_key_id}")]
public sealed virtual Task`1<GpgKey> Get(long gpgKeyId);
    [ManualRouteAttribute("POST", "/user/gpg_keys")]
public sealed virtual Task`1<GpgKey> Create(NewGpgKey newGpgKey);
    [ManualRouteAttribute("DELETE", "/user/gpg_keys/{gpg_key_id}")]
public sealed virtual Task Delete(long gpgKeyId);
}
public enum Octokit.UserInQualifier : Enum {
    public int value__;
    [ParameterAttribute]
public static UserInQualifier Username;
    [ParameterAttribute]
public static UserInQualifier Email;
    [ParameterAttribute]
public static UserInQualifier Fullname;
}
public class Octokit.UserIsLastOwnerOfOrganizationException : ApiException {
    public string Message { get; }
    public UserIsLastOwnerOfOrganizationException(IResponse response);
    public UserIsLastOwnerOfOrganizationException(IResponse response, ApiException innerException);
    protected UserIsLastOwnerOfOrganizationException(SerializationInfo info, StreamingContext context);
    public virtual string get_Message();
}
public class Octokit.UserIsNotMemberOfOrganizationException : ApiException {
    public string Message { get; }
    public UserIsNotMemberOfOrganizationException(IResponse response);
    public UserIsNotMemberOfOrganizationException(IResponse response, ApiException innerException);
    protected UserIsNotMemberOfOrganizationException(SerializationInfo info, StreamingContext context);
    public virtual string get_Message();
}
public class Octokit.UserIsOrganizationMemberException : ApiException {
    public string Message { get; }
    public UserIsOrganizationMemberException(IResponse response);
    public UserIsOrganizationMemberException(IResponse response, ApiException innerException);
    protected UserIsOrganizationMemberException(SerializationInfo info, StreamingContext context);
    public virtual string get_Message();
}
public class Octokit.UserKeysClient : ApiClient {
    public UserKeysClient(IApiConnection apiConnection);
    [ManualRouteAttribute("GET", "/users/{username}/keys")]
public sealed virtual Task`1<IReadOnlyList`1<PublicKey>> GetAll(string userName);
    [ManualRouteAttribute("GET", "/users/{username}/keys")]
public sealed virtual Task`1<IReadOnlyList`1<PublicKey>> GetAll(string userName, ApiOptions options);
    [ManualRouteAttribute("GET", "/user/keys")]
public sealed virtual Task`1<IReadOnlyList`1<PublicKey>> GetAllForCurrent();
    [ManualRouteAttribute("GET", "/user/keys")]
public sealed virtual Task`1<IReadOnlyList`1<PublicKey>> GetAllForCurrent(ApiOptions options);
    [ManualRouteAttribute("GET", "/user/keys/{key_id}")]
public sealed virtual Task`1<PublicKey> Get(long keyId);
    [ManualRouteAttribute("POST", "/user/keys")]
public sealed virtual Task`1<PublicKey> Create(NewPublicKey newKey);
    [ManualRouteAttribute("DELETE", "/user/keys/{key_id}")]
public sealed virtual Task Delete(long keyId);
}
[DebuggerDisplayAttribute("{DebuggerDisplay,nq}")]
public class Octokit.UserRename : object {
    [CompilerGeneratedAttribute]
private string <Login>k__BackingField;
    public string Login { get; protected set; }
    internal string DebuggerDisplay { get; }
    public UserRename(string login);
    [CompilerGeneratedAttribute]
public string get_Login();
    [CompilerGeneratedAttribute]
protected void set_Login(string value);
    internal string get_DebuggerDisplay();
}
[DebuggerDisplayAttribute("{DebuggerDisplay,nq}")]
public class Octokit.UserRenameResponse : object {
    [CompilerGeneratedAttribute]
private string <Message>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Url>k__BackingField;
    public string Message { get; private set; }
    public string Url { get; private set; }
    internal string DebuggerDisplay { get; }
    public UserRenameResponse(string message, string url);
    [CompilerGeneratedAttribute]
public string get_Message();
    [CompilerGeneratedAttribute]
private void set_Message(string value);
    [CompilerGeneratedAttribute]
public string get_Url();
    [CompilerGeneratedAttribute]
private void set_Url(string value);
    internal string get_DebuggerDisplay();
}
public class Octokit.UsersClient : ApiClient {
    private static Uri _userEndpoint;
    [CompilerGeneratedAttribute]
private IUserEmailsClient <Email>k__BackingField;
    [CompilerGeneratedAttribute]
private IUserKeysClient <GitSshKey>k__BackingField;
    [CompilerGeneratedAttribute]
private IUserGpgKeysClient <GpgKey>k__BackingField;
    [CompilerGeneratedAttribute]
private IFollowersClient <Followers>k__BackingField;
    [CompilerGeneratedAttribute]
private IUserAdministrationClient <Administration>k__BackingField;
    public IUserEmailsClient Email { get; private set; }
    public IUserKeysClient GitSshKey { get; private set; }
    public IUserGpgKeysClient GpgKey { get; private set; }
    public IFollowersClient Followers { get; private set; }
    public IUserAdministrationClient Administration { get; private set; }
    public UsersClient(IApiConnection apiConnection);
    private static UsersClient();
    [CompilerGeneratedAttribute]
public sealed virtual IUserEmailsClient get_Email();
    [CompilerGeneratedAttribute]
private void set_Email(IUserEmailsClient value);
    [CompilerGeneratedAttribute]
public sealed virtual IUserKeysClient get_GitSshKey();
    [CompilerGeneratedAttribute]
private void set_GitSshKey(IUserKeysClient value);
    [CompilerGeneratedAttribute]
public sealed virtual IUserGpgKeysClient get_GpgKey();
    [CompilerGeneratedAttribute]
private void set_GpgKey(IUserGpgKeysClient value);
    [ManualRouteAttribute("GET", "/users/{username}")]
public sealed virtual Task`1<User> Get(string login);
    [ManualRouteAttribute("GET", "/user")]
public sealed virtual Task`1<User> Current();
    [ManualRouteAttribute("PATCH", "/user")]
public sealed virtual Task`1<User> Update(UserUpdate user);
    [CompilerGeneratedAttribute]
public sealed virtual IFollowersClient get_Followers();
    [CompilerGeneratedAttribute]
private void set_Followers(IFollowersClient value);
    [CompilerGeneratedAttribute]
public sealed virtual IUserAdministrationClient get_Administration();
    [CompilerGeneratedAttribute]
private void set_Administration(IUserAdministrationClient value);
}
[DebuggerDisplayAttribute("{DebuggerDisplay,nq}")]
public class Octokit.UserSeatAllocation : object {
    [CompilerGeneratedAttribute]
private String[] <SelectedUsernames>k__BackingField;
    public String[] SelectedUsernames { get; public set; }
    internal string DebuggerDisplay { get; }
    [CompilerGeneratedAttribute]
public String[] get_SelectedUsernames();
    [CompilerGeneratedAttribute]
public void set_SelectedUsernames(String[] value);
    internal string get_DebuggerDisplay();
}
public enum Octokit.UsersSearchSort : Enum {
    public int value__;
    [ParameterAttribute]
public static UsersSearchSort Followers;
    [ParameterAttribute]
public static UsersSearchSort Repositories;
    [ParameterAttribute]
public static UsersSearchSort Joined;
}
[DebuggerDisplayAttribute("{DebuggerDisplay,nq}")]
public class Octokit.UserStar : object {
    [CompilerGeneratedAttribute]
private DateTimeOffset <StarredAt>k__BackingField;
    [CompilerGeneratedAttribute]
private User <User>k__BackingField;
    public DateTimeOffset StarredAt { get; private set; }
    public User User { get; private set; }
    internal string DebuggerDisplay { get; }
    public UserStar(DateTimeOffset starredAt, User user);
    [CompilerGeneratedAttribute]
public DateTimeOffset get_StarredAt();
    [CompilerGeneratedAttribute]
private void set_StarredAt(DateTimeOffset value);
    [CompilerGeneratedAttribute]
public User get_User();
    [CompilerGeneratedAttribute]
private void set_User(User value);
    internal string get_DebuggerDisplay();
}
[DebuggerDisplayAttribute("{DebuggerDisplay,nq}")]
public class Octokit.UserUpdate : object {
    [CompilerGeneratedAttribute]
private string <Bio>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Blog>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Company>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Email>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Location>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<bool> <Hireable>k__BackingField;
    public string Bio { get; public set; }
    public string Blog { get; public set; }
    public string Company { get; public set; }
    public string Email { get; public set; }
    public string Location { get; public set; }
    public string Name { get; public set; }
    public Nullable`1<bool> Hireable { get; public set; }
    internal string DebuggerDisplay { get; }
    [CompilerGeneratedAttribute]
public string get_Bio();
    [CompilerGeneratedAttribute]
public void set_Bio(string value);
    [CompilerGeneratedAttribute]
public string get_Blog();
    [CompilerGeneratedAttribute]
public void set_Blog(string value);
    [CompilerGeneratedAttribute]
public string get_Company();
    [CompilerGeneratedAttribute]
public void set_Company(string value);
    [CompilerGeneratedAttribute]
public string get_Email();
    [CompilerGeneratedAttribute]
public void set_Email(string value);
    [CompilerGeneratedAttribute]
public string get_Location();
    [CompilerGeneratedAttribute]
public void set_Location(string value);
    [CompilerGeneratedAttribute]
public string get_Name();
    [CompilerGeneratedAttribute]
public void set_Name(string value);
    [CompilerGeneratedAttribute]
public Nullable`1<bool> get_Hireable();
    [CompilerGeneratedAttribute]
public void set_Hireable(Nullable`1<bool> value);
    internal string get_DebuggerDisplay();
}
[AttributeUsageAttribute("2048")]
internal class Octokit.ValidatedNotNullAttribute : Attribute {
}
[DebuggerDisplayAttribute("{DebuggerDisplay,nq}")]
public class Octokit.Variable : object {
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Value>k__BackingField;
    public string Name { get; public set; }
    public string Value { get; public set; }
    internal string DebuggerDisplay { get; }
    public Variable(string name, string value);
    [CompilerGeneratedAttribute]
public string get_Name();
    [CompilerGeneratedAttribute]
public void set_Name(string value);
    [CompilerGeneratedAttribute]
public string get_Value();
    [CompilerGeneratedAttribute]
public void set_Value(string value);
    internal string get_DebuggerDisplay();
}
[DebuggerDisplayAttribute("{DebuggerDisplay,nq}")]
public class Octokit.Verification : object {
    [CompilerGeneratedAttribute]
private bool <Verified>k__BackingField;
    [CompilerGeneratedAttribute]
private StringEnum`1<VerificationReason> <Reason>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Signature>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Payload>k__BackingField;
    public bool Verified { get; private set; }
    [ParameterAttribute]
public StringEnum`1<VerificationReason> Reason { get; private set; }
    public string Signature { get; private set; }
    public string Payload { get; private set; }
    internal string DebuggerDisplay { get; }
    public Verification(bool verified, VerificationReason reason, string signature, string payload);
    [CompilerGeneratedAttribute]
public bool get_Verified();
    [CompilerGeneratedAttribute]
private void set_Verified(bool value);
    [CompilerGeneratedAttribute]
public StringEnum`1<VerificationReason> get_Reason();
    [CompilerGeneratedAttribute]
private void set_Reason(StringEnum`1<VerificationReason> value);
    [CompilerGeneratedAttribute]
public string get_Signature();
    [CompilerGeneratedAttribute]
private void set_Signature(string value);
    [CompilerGeneratedAttribute]
public string get_Payload();
    [CompilerGeneratedAttribute]
private void set_Payload(string value);
    internal string get_DebuggerDisplay();
}
public enum Octokit.VerificationReason : Enum {
    public int value__;
    [ParameterAttribute]
public static VerificationReason ExpiredKey;
    [ParameterAttribute]
public static VerificationReason NotSigningKey;
    [ParameterAttribute]
public static VerificationReason GpgVerifyError;
    [ParameterAttribute]
public static VerificationReason GpgVerifyUnavailable;
    [ParameterAttribute]
public static VerificationReason Unsigned;
    [ParameterAttribute]
public static VerificationReason UnknownSignatureType;
    [ParameterAttribute]
public static VerificationReason NoUser;
    [ParameterAttribute]
public static VerificationReason UnverifiedEmail;
    [ParameterAttribute]
public static VerificationReason BadEmail;
    [ParameterAttribute]
public static VerificationReason UnknownKey;
    [ParameterAttribute]
public static VerificationReason MalformedSignature;
    [ParameterAttribute]
public static VerificationReason Invalid;
    [ParameterAttribute]
public static VerificationReason Valid;
}
public class Octokit.WatchedClient : ApiClient {
    public WatchedClient(IApiConnection apiConnection);
    [ManualRouteAttribute("GET", "/repos/{owner}/{repo}/subscribers")]
public sealed virtual Task`1<IReadOnlyList`1<User>> GetAllWatchers(string owner, string name);
    [ManualRouteAttribute("GET", "/repositories/{id}/subscribers")]
public sealed virtual Task`1<IReadOnlyList`1<User>> GetAllWatchers(long repositoryId);
    [ManualRouteAttribute("GET", "/repos/{owner}/{repo}/subscribers")]
public sealed virtual Task`1<IReadOnlyList`1<User>> GetAllWatchers(string owner, string name, ApiOptions options);
    [ManualRouteAttribute("GET", "/repositories/{id}/subscribers")]
public sealed virtual Task`1<IReadOnlyList`1<User>> GetAllWatchers(long repositoryId, ApiOptions options);
    [ManualRouteAttribute("GET", "/user/subscribers")]
public sealed virtual Task`1<IReadOnlyList`1<Repository>> GetAllForCurrent();
    [ManualRouteAttribute("GET", "/user/subscribers")]
public sealed virtual Task`1<IReadOnlyList`1<Repository>> GetAllForCurrent(ApiOptions options);
    [ManualRouteAttribute("GET", "/users/{username}/subscriptions")]
public sealed virtual Task`1<IReadOnlyList`1<Repository>> GetAllForUser(string user);
    [ManualRouteAttribute("GET", "/users/{username}/subscriptions")]
public sealed virtual Task`1<IReadOnlyList`1<Repository>> GetAllForUser(string user, ApiOptions options);
    [AsyncStateMachineAttribute("Octokit.WatchedClient/<CheckWatched>d__9")]
[ManualRouteAttribute("GET", "/repos/{owner}/{repo}/subscription")]
public sealed virtual Task`1<bool> CheckWatched(string owner, string name);
    [AsyncStateMachineAttribute("Octokit.WatchedClient/<CheckWatched>d__10")]
[ManualRouteAttribute("GET", "/repositories/{id}/subscription")]
public sealed virtual Task`1<bool> CheckWatched(long repositoryId);
    [ManualRouteAttribute("PUT", "/repos/{owner}/{repo}/subscription")]
public sealed virtual Task`1<Subscription> WatchRepo(string owner, string name, NewSubscription newSubscription);
    [ManualRouteAttribute("PUT", "/repositories/{id}/subscription")]
public sealed virtual Task`1<Subscription> WatchRepo(long repositoryId, NewSubscription newSubscription);
    [AsyncStateMachineAttribute("Octokit.WatchedClient/<UnwatchRepo>d__13")]
[ManualRouteAttribute("DELETE", "/repos/{owner}/{repo}/subscription")]
public sealed virtual Task`1<bool> UnwatchRepo(string owner, string name);
    [AsyncStateMachineAttribute("Octokit.WatchedClient/<UnwatchRepo>d__14")]
[ManualRouteAttribute("DELETE", "/repositories/{id}/subscription")]
public sealed virtual Task`1<bool> UnwatchRepo(long repositoryId);
}
public class Octokit.WebHookConfigComparer : object {
    public sealed virtual bool Equals(KeyValuePair`2<string, string> x, KeyValuePair`2<string, string> y);
    public sealed virtual int GetHashCode(KeyValuePair`2<string, string> obj);
}
public enum Octokit.WebHookContentType : Enum {
    public int value__;
    public static WebHookContentType Form;
    public static WebHookContentType Json;
}
[DebuggerDisplayAttribute("{DebuggerDisplay,nq}")]
public class Octokit.WeeklyCommitActivity : object {
    [CompilerGeneratedAttribute]
private IReadOnlyList`1<int> <Days>k__BackingField;
    [CompilerGeneratedAttribute]
private int <Total>k__BackingField;
    [CompilerGeneratedAttribute]
private long <Week>k__BackingField;
    public IReadOnlyList`1<int> Days { get; private set; }
    public int Total { get; private set; }
    public long Week { get; private set; }
    public DateTimeOffset WeekTimestamp { get; }
    internal string DebuggerDisplay { get; }
    public WeeklyCommitActivity(IEnumerable`1<int> days, int total, long week);
    [CompilerGeneratedAttribute]
public IReadOnlyList`1<int> get_Days();
    [CompilerGeneratedAttribute]
private void set_Days(IReadOnlyList`1<int> value);
    [CompilerGeneratedAttribute]
public int get_Total();
    [CompilerGeneratedAttribute]
private void set_Total(int value);
    [CompilerGeneratedAttribute]
public long get_Week();
    [CompilerGeneratedAttribute]
private void set_Week(long value);
    public DateTimeOffset get_WeekTimestamp();
    public int GetCommitCountOn(DayOfWeek dayOfWeek);
    internal string get_DebuggerDisplay();
}
[DebuggerDisplayAttribute("{DebuggerDisplay,nq}")]
public class Octokit.WeeklyHash : object {
    [CompilerGeneratedAttribute]
private long <W>k__BackingField;
    [CompilerGeneratedAttribute]
private int <A>k__BackingField;
    [CompilerGeneratedAttribute]
private int <D>k__BackingField;
    [CompilerGeneratedAttribute]
private int <C>k__BackingField;
    public long W { get; private set; }
    public int A { get; private set; }
    public int D { get; private set; }
    public int C { get; private set; }
    public DateTimeOffset Week { get; }
    public int Additions { get; }
    public int Deletions { get; }
    public int Commits { get; }
    internal string DebuggerDisplay { get; }
    public WeeklyHash(long w, int a, int d, int c);
    [CompilerGeneratedAttribute]
public long get_W();
    [CompilerGeneratedAttribute]
private void set_W(long value);
    [CompilerGeneratedAttribute]
public int get_A();
    [CompilerGeneratedAttribute]
private void set_A(int value);
    [CompilerGeneratedAttribute]
public int get_D();
    [CompilerGeneratedAttribute]
private void set_D(int value);
    [CompilerGeneratedAttribute]
public int get_C();
    [CompilerGeneratedAttribute]
private void set_C(int value);
    public DateTimeOffset get_Week();
    public int get_Additions();
    public int get_Deletions();
    public int get_Commits();
    internal string get_DebuggerDisplay();
}
[DebuggerDisplayAttribute("{DebuggerDisplay,nq}")]
public class Octokit.Workflow : object {
    [CompilerGeneratedAttribute]
private long <Id>k__BackingField;
    [CompilerGeneratedAttribute]
private string <NodeId>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Path>k__BackingField;
    [CompilerGeneratedAttribute]
private StringEnum`1<WorkflowState> <State>k__BackingField;
    [CompilerGeneratedAttribute]
private DateTimeOffset <CreatedAt>k__BackingField;
    [CompilerGeneratedAttribute]
private DateTimeOffset <UpdatedAt>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Url>k__BackingField;
    [CompilerGeneratedAttribute]
private string <HtmlUrl>k__BackingField;
    [CompilerGeneratedAttribute]
private string <BadgeUrl>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<DateTimeOffset> <DeletedAt>k__BackingField;
    public long Id { get; private set; }
    public string NodeId { get; private set; }
    public string Name { get; private set; }
    public string Path { get; private set; }
    public StringEnum`1<WorkflowState> State { get; private set; }
    public DateTimeOffset CreatedAt { get; private set; }
    public DateTimeOffset UpdatedAt { get; private set; }
    public string Url { get; private set; }
    public string HtmlUrl { get; private set; }
    public string BadgeUrl { get; private set; }
    public Nullable`1<DateTimeOffset> DeletedAt { get; private set; }
    internal string DebuggerDisplay { get; }
    public Workflow(long id, string nodeId, string name, string path, WorkflowState state, DateTimeOffset createdAt, DateTimeOffset updatedAt, string url, string htmlUrl, string badgeUrl, Nullable`1<DateTimeOffset> deletedAt);
    [CompilerGeneratedAttribute]
public long get_Id();
    [CompilerGeneratedAttribute]
private void set_Id(long value);
    [CompilerGeneratedAttribute]
public string get_NodeId();
    [CompilerGeneratedAttribute]
private void set_NodeId(string value);
    [CompilerGeneratedAttribute]
public string get_Name();
    [CompilerGeneratedAttribute]
private void set_Name(string value);
    [CompilerGeneratedAttribute]
public string get_Path();
    [CompilerGeneratedAttribute]
private void set_Path(string value);
    [CompilerGeneratedAttribute]
public StringEnum`1<WorkflowState> get_State();
    [CompilerGeneratedAttribute]
private void set_State(StringEnum`1<WorkflowState> value);
    [CompilerGeneratedAttribute]
public DateTimeOffset get_CreatedAt();
    [CompilerGeneratedAttribute]
private void set_CreatedAt(DateTimeOffset value);
    [CompilerGeneratedAttribute]
public DateTimeOffset get_UpdatedAt();
    [CompilerGeneratedAttribute]
private void set_UpdatedAt(DateTimeOffset value);
    [CompilerGeneratedAttribute]
public string get_Url();
    [CompilerGeneratedAttribute]
private void set_Url(string value);
    [CompilerGeneratedAttribute]
public string get_HtmlUrl();
    [CompilerGeneratedAttribute]
private void set_HtmlUrl(string value);
    [CompilerGeneratedAttribute]
public string get_BadgeUrl();
    [CompilerGeneratedAttribute]
private void set_BadgeUrl(string value);
    [CompilerGeneratedAttribute]
public Nullable`1<DateTimeOffset> get_DeletedAt();
    [CompilerGeneratedAttribute]
private void set_DeletedAt(Nullable`1<DateTimeOffset> value);
    internal string get_DebuggerDisplay();
}
[DebuggerDisplayAttribute("{DebuggerDisplay,nq}")]
public class Octokit.WorkflowBillable : object {
    [CompilerGeneratedAttribute]
private WorkflowBillableTiming <Ubuntu>k__BackingField;
    [CompilerGeneratedAttribute]
private WorkflowBillableTiming <MacOS>k__BackingField;
    [CompilerGeneratedAttribute]
private WorkflowBillableTiming <Windows>k__BackingField;
    [ParameterAttribute]
public WorkflowBillableTiming Ubuntu { get; private set; }
    [ParameterAttribute]
public WorkflowBillableTiming MacOS { get; private set; }
    [ParameterAttribute]
public WorkflowBillableTiming Windows { get; private set; }
    internal string DebuggerDisplay { get; }
    public WorkflowBillable(WorkflowBillableTiming ubuntu, WorkflowBillableTiming macOS, WorkflowBillableTiming windows);
    [CompilerGeneratedAttribute]
public WorkflowBillableTiming get_Ubuntu();
    [CompilerGeneratedAttribute]
private void set_Ubuntu(WorkflowBillableTiming value);
    [CompilerGeneratedAttribute]
public WorkflowBillableTiming get_MacOS();
    [CompilerGeneratedAttribute]
private void set_MacOS(WorkflowBillableTiming value);
    [CompilerGeneratedAttribute]
public WorkflowBillableTiming get_Windows();
    [CompilerGeneratedAttribute]
private void set_Windows(WorkflowBillableTiming value);
    internal string get_DebuggerDisplay();
}
[DebuggerDisplayAttribute("{DebuggerDisplay,nq}")]
public class Octokit.WorkflowBillableTiming : object {
    [CompilerGeneratedAttribute]
private long <TotalMs>k__BackingField;
    public long TotalMs { get; private set; }
    internal string DebuggerDisplay { get; }
    public WorkflowBillableTiming(long totalMs);
    [CompilerGeneratedAttribute]
public long get_TotalMs();
    [CompilerGeneratedAttribute]
private void set_TotalMs(long value);
    internal string get_DebuggerDisplay();
}
[DebuggerDisplayAttribute("{DebuggerDisplay,nq}")]
public class Octokit.WorkflowJob : object {
    [CompilerGeneratedAttribute]
private long <Id>k__BackingField;
    [CompilerGeneratedAttribute]
private long <RunId>k__BackingField;
    [CompilerGeneratedAttribute]
private string <RunUrl>k__BackingField;
    [CompilerGeneratedAttribute]
private string <HeadSha>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Url>k__BackingField;
    [CompilerGeneratedAttribute]
private string <HtmlUrl>k__BackingField;
    [CompilerGeneratedAttribute]
private string <NodeId>k__BackingField;
    [CompilerGeneratedAttribute]
private StringEnum`1<WorkflowJobStatus> <Status>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<StringEnum`1<WorkflowJobConclusion>> <Conclusion>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<DateTimeOffset> <CreatedAt>k__BackingField;
    [CompilerGeneratedAttribute]
private DateTimeOffset <StartedAt>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<DateTimeOffset> <CompletedAt>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    [CompilerGeneratedAttribute]
private IReadOnlyList`1<WorkflowJobStep> <Steps>k__BackingField;
    [CompilerGeneratedAttribute]
private string <CheckRunUrl>k__BackingField;
    [CompilerGeneratedAttribute]
private IReadOnlyList`1<string> <Labels>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<long> <RunnerId>k__BackingField;
    [CompilerGeneratedAttribute]
private string <RunnerName>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<long> <RunnerGroupId>k__BackingField;
    [CompilerGeneratedAttribute]
private string <RunnerGroupName>k__BackingField;
    public long Id { get; private set; }
    public long RunId { get; private set; }
    public string RunUrl { get; private set; }
    public string HeadSha { get; private set; }
    public string Url { get; private set; }
    public string HtmlUrl { get; private set; }
    public string NodeId { get; private set; }
    public StringEnum`1<WorkflowJobStatus> Status { get; private set; }
    public Nullable`1<StringEnum`1<WorkflowJobConclusion>> Conclusion { get; private set; }
    public Nullable`1<DateTimeOffset> CreatedAt { get; private set; }
    public DateTimeOffset StartedAt { get; private set; }
    public Nullable`1<DateTimeOffset> CompletedAt { get; private set; }
    public string Name { get; private set; }
    public IReadOnlyList`1<WorkflowJobStep> Steps { get; private set; }
    public string CheckRunUrl { get; private set; }
    public IReadOnlyList`1<string> Labels { get; private set; }
    public Nullable`1<long> RunnerId { get; private set; }
    public string RunnerName { get; private set; }
    public Nullable`1<long> RunnerGroupId { get; private set; }
    public string RunnerGroupName { get; private set; }
    internal string DebuggerDisplay { get; }
    public WorkflowJob(long id, long runId, string runUrl, string nodeId, string headSha, string url, string htmlUrl, WorkflowJobStatus status, Nullable`1<WorkflowJobConclusion> conclusion, Nullable`1<DateTimeOffset> createdAt, DateTimeOffset startedAt, Nullable`1<DateTimeOffset> completedAt, string name, IReadOnlyList`1<WorkflowJobStep> steps, string checkRunUrl, IReadOnlyList`1<string> labels, Nullable`1<long> runnerId, string runnerName, Nullable`1<long> runnerGroupId, string runnerGroupName);
    [CompilerGeneratedAttribute]
public long get_Id();
    [CompilerGeneratedAttribute]
private void set_Id(long value);
    [CompilerGeneratedAttribute]
public long get_RunId();
    [CompilerGeneratedAttribute]
private void set_RunId(long value);
    [CompilerGeneratedAttribute]
public string get_RunUrl();
    [CompilerGeneratedAttribute]
private void set_RunUrl(string value);
    [CompilerGeneratedAttribute]
public string get_HeadSha();
    [CompilerGeneratedAttribute]
private void set_HeadSha(string value);
    [CompilerGeneratedAttribute]
public string get_Url();
    [CompilerGeneratedAttribute]
private void set_Url(string value);
    [CompilerGeneratedAttribute]
public string get_HtmlUrl();
    [CompilerGeneratedAttribute]
private void set_HtmlUrl(string value);
    [CompilerGeneratedAttribute]
public string get_NodeId();
    [CompilerGeneratedAttribute]
private void set_NodeId(string value);
    [CompilerGeneratedAttribute]
public StringEnum`1<WorkflowJobStatus> get_Status();
    [CompilerGeneratedAttribute]
private void set_Status(StringEnum`1<WorkflowJobStatus> value);
    [CompilerGeneratedAttribute]
public Nullable`1<StringEnum`1<WorkflowJobConclusion>> get_Conclusion();
    [CompilerGeneratedAttribute]
private void set_Conclusion(Nullable`1<StringEnum`1<WorkflowJobConclusion>> value);
    [CompilerGeneratedAttribute]
public Nullable`1<DateTimeOffset> get_CreatedAt();
    [CompilerGeneratedAttribute]
private void set_CreatedAt(Nullable`1<DateTimeOffset> value);
    [CompilerGeneratedAttribute]
public DateTimeOffset get_StartedAt();
    [CompilerGeneratedAttribute]
private void set_StartedAt(DateTimeOffset value);
    [CompilerGeneratedAttribute]
public Nullable`1<DateTimeOffset> get_CompletedAt();
    [CompilerGeneratedAttribute]
private void set_CompletedAt(Nullable`1<DateTimeOffset> value);
    [CompilerGeneratedAttribute]
public string get_Name();
    [CompilerGeneratedAttribute]
private void set_Name(string value);
    [CompilerGeneratedAttribute]
public IReadOnlyList`1<WorkflowJobStep> get_Steps();
    [CompilerGeneratedAttribute]
private void set_Steps(IReadOnlyList`1<WorkflowJobStep> value);
    [CompilerGeneratedAttribute]
public string get_CheckRunUrl();
    [CompilerGeneratedAttribute]
private void set_CheckRunUrl(string value);
    [CompilerGeneratedAttribute]
public IReadOnlyList`1<string> get_Labels();
    [CompilerGeneratedAttribute]
private void set_Labels(IReadOnlyList`1<string> value);
    [CompilerGeneratedAttribute]
public Nullable`1<long> get_RunnerId();
    [CompilerGeneratedAttribute]
private void set_RunnerId(Nullable`1<long> value);
    [CompilerGeneratedAttribute]
public string get_RunnerName();
    [CompilerGeneratedAttribute]
private void set_RunnerName(string value);
    [CompilerGeneratedAttribute]
public Nullable`1<long> get_RunnerGroupId();
    [CompilerGeneratedAttribute]
private void set_RunnerGroupId(Nullable`1<long> value);
    [CompilerGeneratedAttribute]
public string get_RunnerGroupName();
    [CompilerGeneratedAttribute]
private void set_RunnerGroupName(string value);
    internal string get_DebuggerDisplay();
}
public enum Octokit.WorkflowJobConclusion : Enum {
    public int value__;
    [ParameterAttribute]
public static WorkflowJobConclusion Success;
    [ParameterAttribute]
public static WorkflowJobConclusion Failure;
    [ParameterAttribute]
public static WorkflowJobConclusion Neutral;
    [ParameterAttribute]
public static WorkflowJobConclusion Cancelled;
    [ParameterAttribute]
public static WorkflowJobConclusion Skipped;
    [ParameterAttribute]
public static WorkflowJobConclusion TimedOut;
    [ParameterAttribute]
public static WorkflowJobConclusion ActionRequired;
}
[DebuggerDisplayAttribute("{DebuggerDisplay,nq}")]
public class Octokit.WorkflowJobsResponse : object {
    [CompilerGeneratedAttribute]
private int <TotalCount>k__BackingField;
    [CompilerGeneratedAttribute]
private IReadOnlyList`1<WorkflowJob> <Jobs>k__BackingField;
    public int TotalCount { get; private set; }
    public IReadOnlyList`1<WorkflowJob> Jobs { get; private set; }
    internal string DebuggerDisplay { get; }
    public WorkflowJobsResponse(int totalCount, IReadOnlyList`1<WorkflowJob> jobs);
    [CompilerGeneratedAttribute]
public int get_TotalCount();
    [CompilerGeneratedAttribute]
private void set_TotalCount(int value);
    [CompilerGeneratedAttribute]
public IReadOnlyList`1<WorkflowJob> get_Jobs();
    [CompilerGeneratedAttribute]
private void set_Jobs(IReadOnlyList`1<WorkflowJob> value);
    internal string get_DebuggerDisplay();
}
public enum Octokit.WorkflowJobStatus : Enum {
    public int value__;
    [ParameterAttribute]
public static WorkflowJobStatus Queued;
    [ParameterAttribute]
public static WorkflowJobStatus InProgress;
    [ParameterAttribute]
public static WorkflowJobStatus Completed;
    [ParameterAttribute]
public static WorkflowJobStatus Waiting;
    [ParameterAttribute]
public static WorkflowJobStatus Pending;
}
[DebuggerDisplayAttribute("{DebuggerDisplay,nq}")]
public class Octokit.WorkflowJobStep : object {
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    [CompilerGeneratedAttribute]
private int <Number>k__BackingField;
    [CompilerGeneratedAttribute]
private StringEnum`1<WorkflowJobStatus> <Status>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<StringEnum`1<WorkflowJobConclusion>> <Conclusion>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<DateTimeOffset> <StartedAt>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<DateTimeOffset> <CompletedAt>k__BackingField;
    public string Name { get; private set; }
    public int Number { get; private set; }
    public StringEnum`1<WorkflowJobStatus> Status { get; private set; }
    public Nullable`1<StringEnum`1<WorkflowJobConclusion>> Conclusion { get; private set; }
    public Nullable`1<DateTimeOffset> StartedAt { get; private set; }
    public Nullable`1<DateTimeOffset> CompletedAt { get; private set; }
    internal string DebuggerDisplay { get; }
    public WorkflowJobStep(string name, WorkflowJobStatus status, WorkflowJobConclusion conclusion, int number, Nullable`1<DateTimeOffset> startedAt, Nullable`1<DateTimeOffset> completedAt);
    [CompilerGeneratedAttribute]
public string get_Name();
    [CompilerGeneratedAttribute]
private void set_Name(string value);
    [CompilerGeneratedAttribute]
public int get_Number();
    [CompilerGeneratedAttribute]
private void set_Number(int value);
    [CompilerGeneratedAttribute]
public StringEnum`1<WorkflowJobStatus> get_Status();
    [CompilerGeneratedAttribute]
private void set_Status(StringEnum`1<WorkflowJobStatus> value);
    [CompilerGeneratedAttribute]
public Nullable`1<StringEnum`1<WorkflowJobConclusion>> get_Conclusion();
    [CompilerGeneratedAttribute]
private void set_Conclusion(Nullable`1<StringEnum`1<WorkflowJobConclusion>> value);
    [CompilerGeneratedAttribute]
public Nullable`1<DateTimeOffset> get_StartedAt();
    [CompilerGeneratedAttribute]
private void set_StartedAt(Nullable`1<DateTimeOffset> value);
    [CompilerGeneratedAttribute]
public Nullable`1<DateTimeOffset> get_CompletedAt();
    [CompilerGeneratedAttribute]
private void set_CompletedAt(Nullable`1<DateTimeOffset> value);
    internal string get_DebuggerDisplay();
}
[DebuggerDisplayAttribute("{DebuggerDisplay,nq}")]
public class Octokit.WorkflowReference : object {
    [CompilerGeneratedAttribute]
private string <Path>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Sha>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Ref>k__BackingField;
    public string Path { get; private set; }
    public string Sha { get; private set; }
    public string Ref { get; private set; }
    internal string DebuggerDisplay { get; }
    public WorkflowReference(string path, string sha, string ref);
    [CompilerGeneratedAttribute]
public string get_Path();
    [CompilerGeneratedAttribute]
private void set_Path(string value);
    [CompilerGeneratedAttribute]
public string get_Sha();
    [CompilerGeneratedAttribute]
private void set_Sha(string value);
    [CompilerGeneratedAttribute]
public string get_Ref();
    [CompilerGeneratedAttribute]
private void set_Ref(string value);
    internal string get_DebuggerDisplay();
}
[DebuggerDisplayAttribute("{DebuggerDisplay,nq}")]
public class Octokit.WorkflowRun : object {
    [CompilerGeneratedAttribute]
private long <Id>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    [CompilerGeneratedAttribute]
private string <NodeId>k__BackingField;
    [CompilerGeneratedAttribute]
private long <CheckSuiteId>k__BackingField;
    [CompilerGeneratedAttribute]
private string <CheckSuiteNodeId>k__BackingField;
    [CompilerGeneratedAttribute]
private string <HeadBranch>k__BackingField;
    [CompilerGeneratedAttribute]
private string <HeadSha>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Path>k__BackingField;
    [CompilerGeneratedAttribute]
private long <RunNumber>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Event>k__BackingField;
    [CompilerGeneratedAttribute]
private string <DisplayTitle>k__BackingField;
    [CompilerGeneratedAttribute]
private StringEnum`1<WorkflowRunStatus> <Status>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<StringEnum`1<WorkflowRunConclusion>> <Conclusion>k__BackingField;
    [CompilerGeneratedAttribute]
private long <WorkflowId>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Url>k__BackingField;
    [CompilerGeneratedAttribute]
private string <HtmlUrl>k__BackingField;
    [CompilerGeneratedAttribute]
private IReadOnlyList`1<PullRequest> <PullRequests>k__BackingField;
    [CompilerGeneratedAttribute]
private DateTimeOffset <CreatedAt>k__BackingField;
    [CompilerGeneratedAttribute]
private DateTimeOffset <UpdatedAt>k__BackingField;
    [CompilerGeneratedAttribute]
private User <Actor>k__BackingField;
    [CompilerGeneratedAttribute]
private long <RunAttempt>k__BackingField;
    [CompilerGeneratedAttribute]
private IReadOnlyList`1<WorkflowReference> <ReferencedWorkflows>k__BackingField;
    [CompilerGeneratedAttribute]
private DateTimeOffset <RunStartedAt>k__BackingField;
    [CompilerGeneratedAttribute]
private User <TriggeringActor>k__BackingField;
    [CompilerGeneratedAttribute]
private string <JobsUrl>k__BackingField;
    [CompilerGeneratedAttribute]
private string <LogsUrl>k__BackingField;
    [CompilerGeneratedAttribute]
private string <CheckSuiteUrl>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ArtifactsUrl>k__BackingField;
    [CompilerGeneratedAttribute]
private string <CancelUrl>k__BackingField;
    [CompilerGeneratedAttribute]
private string <RerunUrl>k__BackingField;
    [CompilerGeneratedAttribute]
private string <PreviousAttemptUrl>k__BackingField;
    [CompilerGeneratedAttribute]
private string <WorkflowUrl>k__BackingField;
    [CompilerGeneratedAttribute]
private Commit <HeadCommit>k__BackingField;
    [CompilerGeneratedAttribute]
private Repository <Repository>k__BackingField;
    [CompilerGeneratedAttribute]
private Repository <HeadRepository>k__BackingField;
    [CompilerGeneratedAttribute]
private long <HeadRepositoryId>k__BackingField;
    public long Id { get; private set; }
    public string Name { get; private set; }
    public string NodeId { get; private set; }
    public long CheckSuiteId { get; private set; }
    public string CheckSuiteNodeId { get; private set; }
    public string HeadBranch { get; private set; }
    public string HeadSha { get; private set; }
    public string Path { get; private set; }
    public long RunNumber { get; private set; }
    public string Event { get; private set; }
    public string DisplayTitle { get; private set; }
    public StringEnum`1<WorkflowRunStatus> Status { get; private set; }
    public Nullable`1<StringEnum`1<WorkflowRunConclusion>> Conclusion { get; private set; }
    public long WorkflowId { get; private set; }
    public string Url { get; private set; }
    public string HtmlUrl { get; private set; }
    public IReadOnlyList`1<PullRequest> PullRequests { get; private set; }
    public DateTimeOffset CreatedAt { get; private set; }
    public DateTimeOffset UpdatedAt { get; private set; }
    public User Actor { get; private set; }
    public long RunAttempt { get; private set; }
    public IReadOnlyList`1<WorkflowReference> ReferencedWorkflows { get; private set; }
    public DateTimeOffset RunStartedAt { get; private set; }
    public User TriggeringActor { get; private set; }
    public string JobsUrl { get; private set; }
    public string LogsUrl { get; private set; }
    public string CheckSuiteUrl { get; private set; }
    public string ArtifactsUrl { get; private set; }
    public string CancelUrl { get; private set; }
    public string RerunUrl { get; private set; }
    public string PreviousAttemptUrl { get; private set; }
    public string WorkflowUrl { get; private set; }
    public Commit HeadCommit { get; private set; }
    public Repository Repository { get; private set; }
    public Repository HeadRepository { get; private set; }
    public long HeadRepositoryId { get; private set; }
    internal string DebuggerDisplay { get; }
    public WorkflowRun(long id, string name, string nodeId, long checkSuiteId, string checkSuiteNodeId, string headBranch, string headSha, string path, long runNumber, string event, string displayTitle, WorkflowRunStatus status, Nullable`1<WorkflowRunConclusion> conclusion, long workflowId, string url, string htmlUrl, IReadOnlyList`1<PullRequest> pullRequests, DateTimeOffset createdAt, DateTimeOffset updatedAt, User actor, long runAttempt, IReadOnlyList`1<WorkflowReference> referencedWorkflows, DateTimeOffset runStartedAt, User triggeringActor, string jobsUrl, string logsUrl, string checkSuiteUrl, string artifactsUrl, string cancelUrl, string rerunUrl, string previousAttemptUrl, string workflowUrl, Commit headCommit, Repository repository, Repository headRepository, long headRepositoryId);
    [CompilerGeneratedAttribute]
public long get_Id();
    [CompilerGeneratedAttribute]
private void set_Id(long value);
    [CompilerGeneratedAttribute]
public string get_Name();
    [CompilerGeneratedAttribute]
private void set_Name(string value);
    [CompilerGeneratedAttribute]
public string get_NodeId();
    [CompilerGeneratedAttribute]
private void set_NodeId(string value);
    [CompilerGeneratedAttribute]
public long get_CheckSuiteId();
    [CompilerGeneratedAttribute]
private void set_CheckSuiteId(long value);
    [CompilerGeneratedAttribute]
public string get_CheckSuiteNodeId();
    [CompilerGeneratedAttribute]
private void set_CheckSuiteNodeId(string value);
    [CompilerGeneratedAttribute]
public string get_HeadBranch();
    [CompilerGeneratedAttribute]
private void set_HeadBranch(string value);
    [CompilerGeneratedAttribute]
public string get_HeadSha();
    [CompilerGeneratedAttribute]
private void set_HeadSha(string value);
    [CompilerGeneratedAttribute]
public string get_Path();
    [CompilerGeneratedAttribute]
private void set_Path(string value);
    [CompilerGeneratedAttribute]
public long get_RunNumber();
    [CompilerGeneratedAttribute]
private void set_RunNumber(long value);
    [CompilerGeneratedAttribute]
public string get_Event();
    [CompilerGeneratedAttribute]
private void set_Event(string value);
    [CompilerGeneratedAttribute]
public string get_DisplayTitle();
    [CompilerGeneratedAttribute]
private void set_DisplayTitle(string value);
    [CompilerGeneratedAttribute]
public StringEnum`1<WorkflowRunStatus> get_Status();
    [CompilerGeneratedAttribute]
private void set_Status(StringEnum`1<WorkflowRunStatus> value);
    [CompilerGeneratedAttribute]
public Nullable`1<StringEnum`1<WorkflowRunConclusion>> get_Conclusion();
    [CompilerGeneratedAttribute]
private void set_Conclusion(Nullable`1<StringEnum`1<WorkflowRunConclusion>> value);
    [CompilerGeneratedAttribute]
public long get_WorkflowId();
    [CompilerGeneratedAttribute]
private void set_WorkflowId(long value);
    [CompilerGeneratedAttribute]
public string get_Url();
    [CompilerGeneratedAttribute]
private void set_Url(string value);
    [CompilerGeneratedAttribute]
public string get_HtmlUrl();
    [CompilerGeneratedAttribute]
private void set_HtmlUrl(string value);
    [CompilerGeneratedAttribute]
public IReadOnlyList`1<PullRequest> get_PullRequests();
    [CompilerGeneratedAttribute]
private void set_PullRequests(IReadOnlyList`1<PullRequest> value);
    [CompilerGeneratedAttribute]
public DateTimeOffset get_CreatedAt();
    [CompilerGeneratedAttribute]
private void set_CreatedAt(DateTimeOffset value);
    [CompilerGeneratedAttribute]
public DateTimeOffset get_UpdatedAt();
    [CompilerGeneratedAttribute]
private void set_UpdatedAt(DateTimeOffset value);
    [CompilerGeneratedAttribute]
public User get_Actor();
    [CompilerGeneratedAttribute]
private void set_Actor(User value);
    [CompilerGeneratedAttribute]
public long get_RunAttempt();
    [CompilerGeneratedAttribute]
private void set_RunAttempt(long value);
    [CompilerGeneratedAttribute]
public IReadOnlyList`1<WorkflowReference> get_ReferencedWorkflows();
    [CompilerGeneratedAttribute]
private void set_ReferencedWorkflows(IReadOnlyList`1<WorkflowReference> value);
    [CompilerGeneratedAttribute]
public DateTimeOffset get_RunStartedAt();
    [CompilerGeneratedAttribute]
private void set_RunStartedAt(DateTimeOffset value);
    [CompilerGeneratedAttribute]
public User get_TriggeringActor();
    [CompilerGeneratedAttribute]
private void set_TriggeringActor(User value);
    [CompilerGeneratedAttribute]
public string get_JobsUrl();
    [CompilerGeneratedAttribute]
private void set_JobsUrl(string value);
    [CompilerGeneratedAttribute]
public string get_LogsUrl();
    [CompilerGeneratedAttribute]
private void set_LogsUrl(string value);
    [CompilerGeneratedAttribute]
public string get_CheckSuiteUrl();
    [CompilerGeneratedAttribute]
private void set_CheckSuiteUrl(string value);
    [CompilerGeneratedAttribute]
public string get_ArtifactsUrl();
    [CompilerGeneratedAttribute]
private void set_ArtifactsUrl(string value);
    [CompilerGeneratedAttribute]
public string get_CancelUrl();
    [CompilerGeneratedAttribute]
private void set_CancelUrl(string value);
    [CompilerGeneratedAttribute]
public string get_RerunUrl();
    [CompilerGeneratedAttribute]
private void set_RerunUrl(string value);
    [CompilerGeneratedAttribute]
public string get_PreviousAttemptUrl();
    [CompilerGeneratedAttribute]
private void set_PreviousAttemptUrl(string value);
    [CompilerGeneratedAttribute]
public string get_WorkflowUrl();
    [CompilerGeneratedAttribute]
private void set_WorkflowUrl(string value);
    [CompilerGeneratedAttribute]
public Commit get_HeadCommit();
    [CompilerGeneratedAttribute]
private void set_HeadCommit(Commit value);
    [CompilerGeneratedAttribute]
public Repository get_Repository();
    [CompilerGeneratedAttribute]
private void set_Repository(Repository value);
    [CompilerGeneratedAttribute]
public Repository get_HeadRepository();
    [CompilerGeneratedAttribute]
private void set_HeadRepository(Repository value);
    [CompilerGeneratedAttribute]
public long get_HeadRepositoryId();
    [CompilerGeneratedAttribute]
private void set_HeadRepositoryId(long value);
    internal string get_DebuggerDisplay();
}
[DebuggerDisplayAttribute("{DebuggerDisplay,nq}")]
public class Octokit.WorkflowRunBillable : object {
    [CompilerGeneratedAttribute]
private WorkflowRunBillableTiming <Ubuntu>k__BackingField;
    [CompilerGeneratedAttribute]
private WorkflowRunBillableTiming <MacOS>k__BackingField;
    [CompilerGeneratedAttribute]
private WorkflowRunBillableTiming <Windows>k__BackingField;
    [ParameterAttribute]
public WorkflowRunBillableTiming Ubuntu { get; private set; }
    [ParameterAttribute]
public WorkflowRunBillableTiming MacOS { get; private set; }
    [ParameterAttribute]
public WorkflowRunBillableTiming Windows { get; private set; }
    internal string DebuggerDisplay { get; }
    public WorkflowRunBillable(WorkflowRunBillableTiming ubuntu, WorkflowRunBillableTiming macOS, WorkflowRunBillableTiming windows);
    [CompilerGeneratedAttribute]
public WorkflowRunBillableTiming get_Ubuntu();
    [CompilerGeneratedAttribute]
private void set_Ubuntu(WorkflowRunBillableTiming value);
    [CompilerGeneratedAttribute]
public WorkflowRunBillableTiming get_MacOS();
    [CompilerGeneratedAttribute]
private void set_MacOS(WorkflowRunBillableTiming value);
    [CompilerGeneratedAttribute]
public WorkflowRunBillableTiming get_Windows();
    [CompilerGeneratedAttribute]
private void set_Windows(WorkflowRunBillableTiming value);
    internal string get_DebuggerDisplay();
}
[DebuggerDisplayAttribute("{DebuggerDisplay,nq}")]
public class Octokit.WorkflowRunBillableTiming : object {
    [CompilerGeneratedAttribute]
private long <TotalMs>k__BackingField;
    [CompilerGeneratedAttribute]
private long <Jobs>k__BackingField;
    [CompilerGeneratedAttribute]
private IReadOnlyList`1<WorkflowRunTiming> <JobRuns>k__BackingField;
    public long TotalMs { get; private set; }
    public long Jobs { get; private set; }
    public IReadOnlyList`1<WorkflowRunTiming> JobRuns { get; private set; }
    internal string DebuggerDisplay { get; }
    public WorkflowRunBillableTiming(long totalMs, long jobs, IReadOnlyList`1<WorkflowRunTiming> jobRuns);
    [CompilerGeneratedAttribute]
public long get_TotalMs();
    [CompilerGeneratedAttribute]
private void set_TotalMs(long value);
    [CompilerGeneratedAttribute]
public long get_Jobs();
    [CompilerGeneratedAttribute]
private void set_Jobs(long value);
    [CompilerGeneratedAttribute]
public IReadOnlyList`1<WorkflowRunTiming> get_JobRuns();
    [CompilerGeneratedAttribute]
private void set_JobRuns(IReadOnlyList`1<WorkflowRunTiming> value);
    internal string get_DebuggerDisplay();
}
public enum Octokit.WorkflowRunConclusion : Enum {
    public int value__;
    [ParameterAttribute]
public static WorkflowRunConclusion Success;
    [ParameterAttribute]
public static WorkflowRunConclusion Failure;
    [ParameterAttribute]
public static WorkflowRunConclusion Neutral;
    [ParameterAttribute]
public static WorkflowRunConclusion Cancelled;
    [ParameterAttribute]
public static WorkflowRunConclusion TimedOut;
    [ParameterAttribute]
public static WorkflowRunConclusion ActionRequired;
    [ParameterAttribute]
public static WorkflowRunConclusion Stale;
    [ParameterAttribute]
public static WorkflowRunConclusion StartupFailure;
    [ParameterAttribute]
public static WorkflowRunConclusion Skipped;
}
public enum Octokit.WorkflowRunJobsFilter : Enum {
    public int value__;
    [ParameterAttribute]
public static WorkflowRunJobsFilter Latest;
    [ParameterAttribute]
public static WorkflowRunJobsFilter All;
}
[DebuggerDisplayAttribute("{DebuggerDisplay,nq}")]
public class Octokit.WorkflowRunJobsRequest : RequestParameters {
    [CompilerGeneratedAttribute]
private StringEnum`1<WorkflowRunJobsFilter> <Filter>k__BackingField;
    public StringEnum`1<WorkflowRunJobsFilter> Filter { get; public set; }
    internal string DebuggerDisplay { get; }
    [CompilerGeneratedAttribute]
public StringEnum`1<WorkflowRunJobsFilter> get_Filter();
    [CompilerGeneratedAttribute]
public void set_Filter(StringEnum`1<WorkflowRunJobsFilter> value);
    internal string get_DebuggerDisplay();
}
[DebuggerDisplayAttribute("{DebuggerDisplay,nq}")]
public class Octokit.WorkflowRunsRequest : RequestParameters {
    [CompilerGeneratedAttribute]
private string <Actor>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Branch>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Event>k__BackingField;
    [CompilerGeneratedAttribute]
private string <HeadSha>k__BackingField;
    [CompilerGeneratedAttribute]
private StringEnum`1<CheckRunStatusFilter> <Status>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Created>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<bool> <ExcludePullRequests>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<long> <CheckSuiteId>k__BackingField;
    public string Actor { get; public set; }
    public string Branch { get; public set; }
    public string Event { get; public set; }
    [ParameterAttribute]
public string HeadSha { get; public set; }
    public StringEnum`1<CheckRunStatusFilter> Status { get; public set; }
    public string Created { get; public set; }
    [ParameterAttribute]
public Nullable`1<bool> ExcludePullRequests { get; public set; }
    [ParameterAttribute]
public Nullable`1<long> CheckSuiteId { get; public set; }
    internal string DebuggerDisplay { get; }
    [CompilerGeneratedAttribute]
public string get_Actor();
    [CompilerGeneratedAttribute]
public void set_Actor(string value);
    [CompilerGeneratedAttribute]
public string get_Branch();
    [CompilerGeneratedAttribute]
public void set_Branch(string value);
    [CompilerGeneratedAttribute]
public string get_Event();
    [CompilerGeneratedAttribute]
public void set_Event(string value);
    [CompilerGeneratedAttribute]
public string get_HeadSha();
    [CompilerGeneratedAttribute]
public void set_HeadSha(string value);
    [CompilerGeneratedAttribute]
public StringEnum`1<CheckRunStatusFilter> get_Status();
    [CompilerGeneratedAttribute]
public void set_Status(StringEnum`1<CheckRunStatusFilter> value);
    [CompilerGeneratedAttribute]
public string get_Created();
    [CompilerGeneratedAttribute]
public void set_Created(string value);
    [CompilerGeneratedAttribute]
public Nullable`1<bool> get_ExcludePullRequests();
    [CompilerGeneratedAttribute]
public void set_ExcludePullRequests(Nullable`1<bool> value);
    [CompilerGeneratedAttribute]
public Nullable`1<long> get_CheckSuiteId();
    [CompilerGeneratedAttribute]
public void set_CheckSuiteId(Nullable`1<long> value);
    internal string get_DebuggerDisplay();
}
[DebuggerDisplayAttribute("{DebuggerDisplay,nq}")]
public class Octokit.WorkflowRunsResponse : object {
    [CompilerGeneratedAttribute]
private int <TotalCount>k__BackingField;
    [CompilerGeneratedAttribute]
private IReadOnlyList`1<WorkflowRun> <WorkflowRuns>k__BackingField;
    public int TotalCount { get; private set; }
    public IReadOnlyList`1<WorkflowRun> WorkflowRuns { get; private set; }
    internal string DebuggerDisplay { get; }
    public WorkflowRunsResponse(int totalCount, IReadOnlyList`1<WorkflowRun> workflowRuns);
    [CompilerGeneratedAttribute]
public int get_TotalCount();
    [CompilerGeneratedAttribute]
private void set_TotalCount(int value);
    [CompilerGeneratedAttribute]
public IReadOnlyList`1<WorkflowRun> get_WorkflowRuns();
    [CompilerGeneratedAttribute]
private void set_WorkflowRuns(IReadOnlyList`1<WorkflowRun> value);
    internal string get_DebuggerDisplay();
}
public enum Octokit.WorkflowRunStatus : Enum {
    public int value__;
    [ParameterAttribute]
public static WorkflowRunStatus Requested;
    [ParameterAttribute]
public static WorkflowRunStatus InProgress;
    [ParameterAttribute]
public static WorkflowRunStatus Completed;
    [ParameterAttribute]
public static WorkflowRunStatus Queued;
    [ParameterAttribute]
public static WorkflowRunStatus Waiting;
    [ParameterAttribute]
public static WorkflowRunStatus Pending;
}
[DebuggerDisplayAttribute("{DebuggerDisplay,nq}")]
public class Octokit.WorkflowRunTiming : object {
    [CompilerGeneratedAttribute]
private long <JobId>k__BackingField;
    [CompilerGeneratedAttribute]
private long <DurationMs>k__BackingField;
    public long JobId { get; private set; }
    public long DurationMs { get; private set; }
    internal string DebuggerDisplay { get; }
    public WorkflowRunTiming(long jobId, long durationMs);
    [CompilerGeneratedAttribute]
public long get_JobId();
    [CompilerGeneratedAttribute]
private void set_JobId(long value);
    [CompilerGeneratedAttribute]
public long get_DurationMs();
    [CompilerGeneratedAttribute]
private void set_DurationMs(long value);
    internal string get_DebuggerDisplay();
}
[DebuggerDisplayAttribute("{DebuggerDisplay,nq}")]
public class Octokit.WorkflowRunUsage : object {
    [CompilerGeneratedAttribute]
private WorkflowRunBillable <Billable>k__BackingField;
    [CompilerGeneratedAttribute]
private long <RunDurationMs>k__BackingField;
    public WorkflowRunBillable Billable { get; private set; }
    public long RunDurationMs { get; private set; }
    internal string DebuggerDisplay { get; }
    public WorkflowRunUsage(WorkflowRunBillable billable, long runDurationMs);
    [CompilerGeneratedAttribute]
public WorkflowRunBillable get_Billable();
    [CompilerGeneratedAttribute]
private void set_Billable(WorkflowRunBillable value);
    [CompilerGeneratedAttribute]
public long get_RunDurationMs();
    [CompilerGeneratedAttribute]
private void set_RunDurationMs(long value);
    internal string get_DebuggerDisplay();
}
[DebuggerDisplayAttribute("{DebuggerDisplay,nq}")]
public class Octokit.WorkflowsResponse : object {
    [CompilerGeneratedAttribute]
private int <TotalCount>k__BackingField;
    [CompilerGeneratedAttribute]
private IReadOnlyList`1<Workflow> <Workflows>k__BackingField;
    public int TotalCount { get; private set; }
    public IReadOnlyList`1<Workflow> Workflows { get; private set; }
    internal string DebuggerDisplay { get; }
    public WorkflowsResponse(int totalCount, IReadOnlyList`1<Workflow> workflows);
    [CompilerGeneratedAttribute]
public int get_TotalCount();
    [CompilerGeneratedAttribute]
private void set_TotalCount(int value);
    [CompilerGeneratedAttribute]
public IReadOnlyList`1<Workflow> get_Workflows();
    [CompilerGeneratedAttribute]
private void set_Workflows(IReadOnlyList`1<Workflow> value);
    internal string get_DebuggerDisplay();
}
public enum Octokit.WorkflowState : Enum {
    public int value__;
    [ParameterAttribute]
public static WorkflowState Active;
    [ParameterAttribute]
public static WorkflowState Deleted;
    [ParameterAttribute]
public static WorkflowState DisabledFork;
    [ParameterAttribute]
public static WorkflowState DisabledInactivity;
    [ParameterAttribute]
public static WorkflowState DisabledManually;
}
[DebuggerDisplayAttribute("{DebuggerDisplay,nq}")]
public class Octokit.WorkflowUsage : object {
    [CompilerGeneratedAttribute]
private WorkflowBillable <Billable>k__BackingField;
    public WorkflowBillable Billable { get; private set; }
    internal string DebuggerDisplay { get; }
    public WorkflowUsage(WorkflowBillable billable);
    [CompilerGeneratedAttribute]
public WorkflowBillable get_Billable();
    [CompilerGeneratedAttribute]
private void set_Billable(WorkflowBillable value);
    internal string get_DebuggerDisplay();
}
