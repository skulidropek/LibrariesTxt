[ExtensionAttribute]
public static class AssemblyExtensions : object {
    [ExtensionAttribute]
public static string FullLocalPath(Assembly assembly);
    [ExtensionAttribute]
public static string GetFileVersion(Assembly assembly);
    public static string GetNuGetVersionFromGitVersionInformation(string assemblyFullPath);
    [ExtensionAttribute]
private static string GetNuGetVersionFromGitVersionInformation(Assembly assembly);
}
[ExtensionAttribute]
public static class NumericExtensions : object {
    private static long Kilobyte;
    private static long Megabyte;
    private static long Gigabyte;
    private static long Terabyte;
    [ExtensionAttribute]
public static string ToFileSizeString(long bytes);
    [ExtensionAttribute]
public static string ToFileSizeString(ulong bytes);
}
public abstract class OctoPack.Tasks.AbstractTask : object {
    [CompilerGeneratedAttribute]
private IBuildEngine <BuildEngine>k__BackingField;
    [CompilerGeneratedAttribute]
private ITaskHost <HostObject>k__BackingField;
    public IBuildEngine BuildEngine { get; public set; }
    public ITaskHost HostObject { get; public set; }
    [CompilerGeneratedAttribute]
public sealed virtual IBuildEngine get_BuildEngine();
    [CompilerGeneratedAttribute]
public sealed virtual void set_BuildEngine(IBuildEngine value);
    [CompilerGeneratedAttribute]
public sealed virtual ITaskHost get_HostObject();
    [CompilerGeneratedAttribute]
public sealed virtual void set_HostObject(ITaskHost value);
    public abstract virtual bool Execute();
    protected void LogMessage(string message, MessageImportance importance);
    protected void LogWarning(string code, string message);
    protected void LogError(string code, string message);
}
public class OctoPack.Tasks.CreateOctoPackPackage : AbstractTask {
    private IOctopusFileSystem fileSystem;
    private HashSet`1<string> seenBefore;
    [CompilerGeneratedAttribute]
private string <NuSpecFileName>k__BackingField;
    [CompilerGeneratedAttribute]
private string <AppendToPackageId>k__BackingField;
    [CompilerGeneratedAttribute]
private string <AppendToVersion>k__BackingField;
    [CompilerGeneratedAttribute]
private ITaskItem[] <ContentFiles>k__BackingField;
    [CompilerGeneratedAttribute]
private ITaskItem[] <WrittenFiles>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ProjectDirectory>k__BackingField;
    [CompilerGeneratedAttribute]
private string <OutDir>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IncludeTypeScriptSourceFiles>k__BackingField;
    [CompilerGeneratedAttribute]
private string <PackageVersion>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ProjectName>k__BackingField;
    [CompilerGeneratedAttribute]
private string <PrimaryOutputAssembly>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ReleaseNotesFile>k__BackingField;
    [CompilerGeneratedAttribute]
private string <AppConfigFile>k__BackingField;
    [CompilerGeneratedAttribute]
private ITaskItem[] <Packages>k__BackingField;
    [CompilerGeneratedAttribute]
private string <NuGetExePath>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <EnforceAddingFiles>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <PublishPackagesToTeamCity>k__BackingField;
    [CompilerGeneratedAttribute]
private string <NuGetArguments>k__BackingField;
    [CompilerGeneratedAttribute]
private string <NuGetProperties>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IgnoreNonRootScripts>k__BackingField;
    public string NuSpecFileName { get; public set; }
    public string AppendToPackageId { get; public set; }
    public string AppendToVersion { get; public set; }
    [RequiredAttribute]
public ITaskItem[] ContentFiles { get; public set; }
    [RequiredAttribute]
public ITaskItem[] WrittenFiles { get; public set; }
    [RequiredAttribute]
public string ProjectDirectory { get; public set; }
    [RequiredAttribute]
public string OutDir { get; public set; }
    public bool IncludeTypeScriptSourceFiles { get; public set; }
    public string PackageVersion { get; public set; }
    [RequiredAttribute]
public string ProjectName { get; public set; }
    [RequiredAttribute]
public string PrimaryOutputAssembly { get; public set; }
    public string ReleaseNotesFile { get; public set; }
    public string AppConfigFile { get; public set; }
    [OutputAttribute]
public ITaskItem[] Packages { get; public set; }
    [OutputAttribute]
public string NuGetExePath { get; public set; }
    public bool EnforceAddingFiles { get; public set; }
    public bool PublishPackagesToTeamCity { get; public set; }
    public string NuGetArguments { get; public set; }
    [OutputAttribute]
public string NuGetProperties { get; public set; }
    public bool IgnoreNonRootScripts { get; public set; }
    public CreateOctoPackPackage(IOctopusFileSystem fileSystem);
    [CompilerGeneratedAttribute]
public string get_NuSpecFileName();
    [CompilerGeneratedAttribute]
public void set_NuSpecFileName(string value);
    [CompilerGeneratedAttribute]
public string get_AppendToPackageId();
    [CompilerGeneratedAttribute]
public void set_AppendToPackageId(string value);
    [CompilerGeneratedAttribute]
public string get_AppendToVersion();
    [CompilerGeneratedAttribute]
public void set_AppendToVersion(string value);
    [CompilerGeneratedAttribute]
public ITaskItem[] get_ContentFiles();
    [CompilerGeneratedAttribute]
public void set_ContentFiles(ITaskItem[] value);
    [CompilerGeneratedAttribute]
public ITaskItem[] get_WrittenFiles();
    [CompilerGeneratedAttribute]
public void set_WrittenFiles(ITaskItem[] value);
    [CompilerGeneratedAttribute]
public string get_ProjectDirectory();
    [CompilerGeneratedAttribute]
public void set_ProjectDirectory(string value);
    [CompilerGeneratedAttribute]
public string get_OutDir();
    [CompilerGeneratedAttribute]
public void set_OutDir(string value);
    [CompilerGeneratedAttribute]
public bool get_IncludeTypeScriptSourceFiles();
    [CompilerGeneratedAttribute]
public void set_IncludeTypeScriptSourceFiles(bool value);
    [CompilerGeneratedAttribute]
public string get_PackageVersion();
    [CompilerGeneratedAttribute]
public void set_PackageVersion(string value);
    [CompilerGeneratedAttribute]
public string get_ProjectName();
    [CompilerGeneratedAttribute]
public void set_ProjectName(string value);
    [CompilerGeneratedAttribute]
public string get_PrimaryOutputAssembly();
    [CompilerGeneratedAttribute]
public void set_PrimaryOutputAssembly(string value);
    [CompilerGeneratedAttribute]
public string get_ReleaseNotesFile();
    [CompilerGeneratedAttribute]
public void set_ReleaseNotesFile(string value);
    [CompilerGeneratedAttribute]
public string get_AppConfigFile();
    [CompilerGeneratedAttribute]
public void set_AppConfigFile(string value);
    [CompilerGeneratedAttribute]
public ITaskItem[] get_Packages();
    [CompilerGeneratedAttribute]
public void set_Packages(ITaskItem[] value);
    [CompilerGeneratedAttribute]
public string get_NuGetExePath();
    [CompilerGeneratedAttribute]
public void set_NuGetExePath(string value);
    [CompilerGeneratedAttribute]
public bool get_EnforceAddingFiles();
    [CompilerGeneratedAttribute]
public void set_EnforceAddingFiles(bool value);
    [CompilerGeneratedAttribute]
public bool get_PublishPackagesToTeamCity();
    [CompilerGeneratedAttribute]
public void set_PublishPackagesToTeamCity(bool value);
    [CompilerGeneratedAttribute]
public string get_NuGetArguments();
    [CompilerGeneratedAttribute]
public void set_NuGetArguments(string value);
    [CompilerGeneratedAttribute]
public string get_NuGetProperties();
    [CompilerGeneratedAttribute]
public void set_NuGetProperties(string value);
    [CompilerGeneratedAttribute]
public bool get_IgnoreNonRootScripts();
    [CompilerGeneratedAttribute]
public void set_IgnoreNonRootScripts(bool value);
    public virtual bool Execute();
    private void LogDiagnostics();
    private string CreateEmptyOutputDirectory(string name);
    private string GetOrCreateNuSpecFile(string octopacking);
    private string RemoveTrailing(string specFileName, String[] extensions);
    private XDocument OpenNuSpecFile(string specFilePath);
    private void AddReleaseNotes(XContainer nuSpec);
    private void UpdatePackageIdWithAppendValue(XContainer nuSpec);
    private static XElement GetPackageIdElementFromNuSpec(XContainer nuSpec);
    private static XElement GetVersionElementFromNuSpec(XContainer nuSpec);
    private void UpdateVersionWithAppendValue(XContainer nuSpec);
    private void AddFiles(XContainer nuSpec, IEnumerable`1<ITaskItem> sourceFiles, string sourceBaseDirectory, string targetDirectory, string relativeTo);
    private static bool SpecAlreadyHasFiles(XDocument nuSpec);
    private void SaveNuSpecFile(string specFilePath, XDocument document);
    private bool IsWebApplication();
    private bool HasLinkedWebConfigFile();
    private string Copy(string source, string baseDirectory, string destinationDirectory);
    private void FindNuGet();
    private void RunNuGet(string specFilePath, string octopacking, string octopacked, string projectDirectory);
    private void CopyBuiltPackages(string packageOutput);
    private static TaskItem CreateTaskItemFromPackage(string packageFile);
    [CompilerGeneratedAttribute]
private void <RunNuGet>b__102_0(string output);
    [CompilerGeneratedAttribute]
private void <RunNuGet>b__102_1(string error);
}
public class OctoPack.Tasks.GetAssemblyVersionInfo : AbstractTask {
    [CompilerGeneratedAttribute]
private ITaskItem[] <AssemblyFiles>k__BackingField;
    [CompilerGeneratedAttribute]
private ITaskItem[] <AssemblyVersionInfo>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <UseFileVersion>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <UseProductVersion>k__BackingField;
    [RequiredAttribute]
public ITaskItem[] AssemblyFiles { get; public set; }
    [OutputAttribute]
public ITaskItem[] AssemblyVersionInfo { get; public set; }
    public bool UseFileVersion { get; public set; }
    public bool UseProductVersion { get; public set; }
    [CompilerGeneratedAttribute]
public ITaskItem[] get_AssemblyFiles();
    [CompilerGeneratedAttribute]
public void set_AssemblyFiles(ITaskItem[] value);
    [CompilerGeneratedAttribute]
public ITaskItem[] get_AssemblyVersionInfo();
    [CompilerGeneratedAttribute]
public void set_AssemblyVersionInfo(ITaskItem[] value);
    public virtual bool Execute();
    [CompilerGeneratedAttribute]
public bool get_UseFileVersion();
    [CompilerGeneratedAttribute]
public void set_UseFileVersion(bool value);
    [CompilerGeneratedAttribute]
public bool get_UseProductVersion();
    [CompilerGeneratedAttribute]
public void set_UseProductVersion(bool value);
    private TaskItem CreateTaskItemFromFileVersionInfo(string path);
    private TaskItem UseNuGetVersionFromGitVersionInformation(string path, FileVersionInfo info);
    private TaskItem UseAssemblyVersion(FileVersionInfo info);
}
[CompilerGeneratedAttribute]
internal static class OctoPack.Tasks.GitVersionInformation : object {
    public static string Major;
    public static string Minor;
    public static string Patch;
    public static string PreReleaseTag;
    public static string PreReleaseTagWithDash;
    public static string PreReleaseLabel;
    public static string PreReleaseNumber;
    public static string BuildMetaData;
    public static string BuildMetaDataPadded;
    public static string FullBuildMetaData;
    public static string MajorMinorPatch;
    public static string SemVer;
    public static string LegacySemVer;
    public static string LegacySemVerPadded;
    public static string AssemblySemVer;
    public static string FullSemVer;
    public static string InformationalVersion;
    public static string BranchName;
    public static string Sha;
    public static string NuGetVersionV2;
    public static string NuGetVersion;
    public static string CommitsSinceVersionSource;
    public static string CommitsSinceVersionSourcePadded;
    public static string CommitDate;
    private static GitVersionInformation();
}
public static class OctoPack.Tasks.SilentProcessRunner : object {
    public static int ExecuteCommand(string executable, string arguments, string workingDirectory, Action`1<string> output, Action`1<string> error, Dictionary`2<string, string> environmentVariables);
}
public class OctoPack.Tasks.Util.DeletionOptions : object {
    [CompilerGeneratedAttribute]
private int <RetryAttempts>k__BackingField;
    [CompilerGeneratedAttribute]
private int <SleepBetweenAttemptsMilliseconds>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <ThrowOnFailure>k__BackingField;
    public static DeletionOptions TryThreeTimes { get; }
    public static DeletionOptions TryThreeTimesIgnoreFailure { get; }
    public int RetryAttempts { get; private set; }
    public int SleepBetweenAttemptsMilliseconds { get; private set; }
    public bool ThrowOnFailure { get; private set; }
    public static DeletionOptions get_TryThreeTimes();
    public static DeletionOptions get_TryThreeTimesIgnoreFailure();
    [CompilerGeneratedAttribute]
public int get_RetryAttempts();
    [CompilerGeneratedAttribute]
private void set_RetryAttempts(int value);
    [CompilerGeneratedAttribute]
public int get_SleepBetweenAttemptsMilliseconds();
    [CompilerGeneratedAttribute]
private void set_SleepBetweenAttemptsMilliseconds(int value);
    [CompilerGeneratedAttribute]
public bool get_ThrowOnFailure();
    [CompilerGeneratedAttribute]
private void set_ThrowOnFailure(bool value);
    public sealed virtual bool Equals(DeletionOptions other);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
    public static bool op_Equality(DeletionOptions left, DeletionOptions right);
    public static bool op_Inequality(DeletionOptions left, DeletionOptions right);
}
public class OctoPack.Tasks.Util.FileInfoAdapter : object {
    private FileInfo info;
    public string Extension { get; }
    public DateTime LastAccessTimeUtc { get; }
    public DateTime LastWriteTimeUtc { get; }
    public FileInfoAdapter(FileInfo info);
    public sealed virtual string get_Extension();
    public sealed virtual DateTime get_LastAccessTimeUtc();
    public sealed virtual DateTime get_LastWriteTimeUtc();
}
public interface OctoPack.Tasks.Util.IFileInfo {
    public string Extension { get; }
    public DateTime LastAccessTimeUtc { get; }
    public DateTime LastWriteTimeUtc { get; }
    public abstract virtual string get_Extension();
    public abstract virtual DateTime get_LastAccessTimeUtc();
    public abstract virtual DateTime get_LastWriteTimeUtc();
}
public interface OctoPack.Tasks.Util.IOctopusFileSystem {
    public abstract virtual bool FileExists(string path);
    public abstract virtual bool DirectoryExists(string path);
    public abstract virtual void DeleteFile(string path);
    public abstract virtual void DeleteFile(string path, DeletionOptions options);
    public abstract virtual void DeleteDirectory(string path);
    public abstract virtual IEnumerable`1<string> EnumerateDirectories(string parentDirectoryPath);
    public abstract virtual IEnumerable`1<string> EnumerateDirectoriesRecursively(string parentDirectoryPath);
    public abstract virtual IEnumerable`1<string> EnumerateFiles(string parentDirectoryPath, String[] searchPatterns);
    public abstract virtual IEnumerable`1<string> EnumerateFilesRecursively(string parentDirectoryPath, String[] searchPatterns);
    public abstract virtual long GetFileSize(string path);
    public abstract virtual string ReadFile(string path);
    public abstract virtual void AppendToFile(string path, string contents);
    public abstract virtual void OverwriteFile(string path, string contents);
    public abstract virtual Stream OpenFile(string path, FileAccess access, FileShare share);
    public abstract virtual Stream OpenFile(string path, FileMode mode, FileAccess access, FileShare share);
    public abstract virtual Stream CreateTemporaryFile(string extension, String& path);
    public abstract virtual void CopyDirectory(string sourceDirectory, string targetDirectory, int overwriteFileRetryAttempts);
    public abstract virtual void CopyFile(string sourceFile, string targetFile, int overwriteFileRetryAttempts);
    public abstract virtual void PurgeDirectory(string targetDirectory, DeletionOptions options);
    public abstract virtual void PurgeDirectory(string targetDirectory, Predicate`1<IFileInfo> filter, DeletionOptions options);
    public abstract virtual void EnsureDirectoryExists(string directoryPath);
    public abstract virtual void EnsureDiskHasEnoughFreeSpace(string directoryPath);
    public abstract virtual void EnsureDiskHasEnoughFreeSpace(string directoryPath, long requiredSpaceInBytes);
    public abstract virtual string GetFullPath(string relativeOrAbsoluteFilePath);
    public abstract virtual void OverwriteAndDelete(string originalFile, string temporaryReplacement);
    public abstract virtual string GetPathRelativeTo(string fullPath, string relativeTo);
}
public class OctoPack.Tasks.Util.OctopusPhysicalFileSystem : object {
    public sealed virtual bool FileExists(string path);
    public sealed virtual bool DirectoryExists(string path);
    public sealed virtual void DeleteFile(string path);
    public sealed virtual void DeleteFile(string path, DeletionOptions options);
    public sealed virtual void DeleteDirectory(string path);
    public sealed virtual IEnumerable`1<string> EnumerateFiles(string parentDirectoryPath, String[] searchPatterns);
    public sealed virtual IEnumerable`1<string> EnumerateFilesRecursively(string parentDirectoryPath, String[] searchPatterns);
    public sealed virtual IEnumerable`1<string> EnumerateDirectories(string parentDirectoryPath);
    public sealed virtual IEnumerable`1<string> EnumerateDirectoriesRecursively(string parentDirectoryPath);
    public sealed virtual long GetFileSize(string path);
    public sealed virtual string ReadFile(string path);
    public sealed virtual void AppendToFile(string path, string contents);
    public sealed virtual void OverwriteFile(string path, string contents);
    public sealed virtual Stream OpenFile(string path, FileAccess access, FileShare share);
    public sealed virtual Stream OpenFile(string path, FileMode mode, FileAccess access, FileShare share);
    public sealed virtual Stream CreateTemporaryFile(string extension, String& path);
    public sealed virtual void CopyFile(string sourceFile, string targetFile, int overwriteFileRetryAttempts);
    public sealed virtual void PurgeDirectory(string targetDirectory, DeletionOptions options);
    public sealed virtual void PurgeDirectory(string targetDirectory, Predicate`1<IFileInfo> include, DeletionOptions options);
    public sealed virtual void OverwriteAndDelete(string originalFile, string temporaryReplacement);
    public sealed virtual string GetPathRelativeTo(string fullPath, string relativeTo);
    public string RemovePathTraversal(string path);
    public sealed virtual void EnsureDirectoryExists(string directoryPath);
    public sealed virtual void CopyDirectory(string sourceDirectory, string targetDirectory, int overwriteFileRetryAttempts);
    public sealed virtual void EnsureDiskHasEnoughFreeSpace(string directoryPath);
    public sealed virtual void EnsureDiskHasEnoughFreeSpace(string directoryPath, long requiredSpaceInBytes);
    public sealed virtual string GetFullPath(string relativeOrAbsoluteFilePath);
    private static bool GetDiskFreeSpaceEx(string lpDirectoryName, UInt64& lpFreeBytesAvailable, UInt64& lpTotalNumberOfBytes, UInt64& lpTotalNumberOfFreeBytes);
}
[ExtensionAttribute]
public static class OctoPack.Tasks.Util.XmlElementExtensions : object {
    [ExtensionAttribute]
public static XElement ElementAnyNamespace(XContainer root, string localName);
}
internal class OctoPack.Tasks.VersionNotFoundException : Exception {
    public VersionNotFoundException(string message);
}
[ExtensionAttribute]
public static class VersionExtensions : object {
    private static string SemanticVersionPattern;
    [ExtensionAttribute]
public static bool IsSemanticVersion(string versionString);
}
