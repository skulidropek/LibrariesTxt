public class Microsoft.Extensions.Caching.Distributed.MemoryDistributedCache : object {
    private static Task CompletedTask;
    private IMemoryCache _memCache;
    public MemoryDistributedCache(IMemoryCache memoryCache);
    private static MemoryDistributedCache();
    public sealed virtual Byte[] Get(string key);
    public sealed virtual Task`1<Byte[]> GetAsync(string key);
    public sealed virtual void Set(string key, Byte[] value, DistributedCacheEntryOptions options);
    public sealed virtual Task SetAsync(string key, Byte[] value, DistributedCacheEntryOptions options);
    public sealed virtual void Refresh(string key);
    public sealed virtual Task RefreshAsync(string key);
    public sealed virtual void Remove(string key);
    public sealed virtual Task RemoveAsync(string key);
}
internal class Microsoft.Extensions.Caching.Memory.CacheEntry : object {
    private bool _added;
    private static Action`1<object> ExpirationCallback;
    private Action`1<CacheEntry> _notifyCacheOfExpiration;
    private Action`1<CacheEntry> _notifyCacheEntryDisposed;
    private IList`1<IDisposable> _expirationTokenRegistrations;
    private EvictionReason _evictionReason;
    private IList`1<PostEvictionCallbackRegistration> _postEvictionCallbacks;
    private bool _isExpired;
    internal IList`1<IChangeToken> _expirationTokens;
    internal Nullable`1<DateTimeOffset> _absoluteExpiration;
    internal Nullable`1<TimeSpan> _absoluteExpirationRelativeToNow;
    private Nullable`1<TimeSpan> _slidingExpiration;
    private IDisposable _scope;
    internal object _lock;
    [CompilerGeneratedAttribute]
private CacheItemPriority <Priority>k__BackingField;
    [CompilerGeneratedAttribute]
private object <Key>k__BackingField;
    [CompilerGeneratedAttribute]
private object <Value>k__BackingField;
    [CompilerGeneratedAttribute]
private DateTimeOffset <LastAccessed>k__BackingField;
    public Nullable`1<DateTimeOffset> AbsoluteExpiration { get; public set; }
    public Nullable`1<TimeSpan> AbsoluteExpirationRelativeToNow { get; public set; }
    public Nullable`1<TimeSpan> SlidingExpiration { get; public set; }
    public IList`1<IChangeToken> ExpirationTokens { get; }
    public IList`1<PostEvictionCallbackRegistration> PostEvictionCallbacks { get; }
    public CacheItemPriority Priority { get; public set; }
    public object Key { get; private set; }
    public object Value { get; public set; }
    internal DateTimeOffset LastAccessed { get; internal set; }
    internal CacheEntry(object key, Action`1<CacheEntry> notifyCacheEntryDisposed, Action`1<CacheEntry> notifyCacheOfExpiration);
    private static CacheEntry();
    public sealed virtual Nullable`1<DateTimeOffset> get_AbsoluteExpiration();
    public sealed virtual void set_AbsoluteExpiration(Nullable`1<DateTimeOffset> value);
    public sealed virtual Nullable`1<TimeSpan> get_AbsoluteExpirationRelativeToNow();
    public sealed virtual void set_AbsoluteExpirationRelativeToNow(Nullable`1<TimeSpan> value);
    public sealed virtual Nullable`1<TimeSpan> get_SlidingExpiration();
    public sealed virtual void set_SlidingExpiration(Nullable`1<TimeSpan> value);
    public sealed virtual IList`1<IChangeToken> get_ExpirationTokens();
    public sealed virtual IList`1<PostEvictionCallbackRegistration> get_PostEvictionCallbacks();
    [CompilerGeneratedAttribute]
public sealed virtual CacheItemPriority get_Priority();
    [CompilerGeneratedAttribute]
public sealed virtual void set_Priority(CacheItemPriority value);
    [CompilerGeneratedAttribute]
public sealed virtual object get_Key();
    [CompilerGeneratedAttribute]
private void set_Key(object value);
    [CompilerGeneratedAttribute]
public sealed virtual object get_Value();
    [CompilerGeneratedAttribute]
public sealed virtual void set_Value(object value);
    [CompilerGeneratedAttribute]
internal DateTimeOffset get_LastAccessed();
    [CompilerGeneratedAttribute]
internal void set_LastAccessed(DateTimeOffset value);
    public sealed virtual void Dispose();
    internal bool CheckExpired(DateTimeOffset now);
    internal void SetExpired(EvictionReason reason);
    private bool CheckForExpiredTime(DateTimeOffset now);
    internal bool CheckForExpiredTokens();
    internal void AttachTokens();
    private static void ExpirationTokensExpired(object obj);
    private void DetachTokens();
    internal void InvokeEvictionCallbacks();
    private static void InvokeCallbacks(CacheEntry entry);
    internal void PropageOptions(CacheEntry parent);
}
internal class Microsoft.Extensions.Caching.Memory.CacheEntryHelper : object {
    private static AsyncLocal`1<CacheEntryStack> _scopes;
    internal static CacheEntryStack Scopes { get; internal set; }
    internal static CacheEntry Current { get; }
    private static CacheEntryHelper();
    internal static CacheEntryStack get_Scopes();
    internal static void set_Scopes(CacheEntryStack value);
    internal static CacheEntry get_Current();
    internal static IDisposable EnterScope(CacheEntry entry);
    private static CacheEntryStack GetOrCreateScopes();
}
internal class Microsoft.Extensions.Caching.Memory.CacheEntryStack : object {
    private CacheEntryStack _previous;
    private CacheEntry _entry;
    [CompilerGeneratedAttribute]
private static CacheEntryStack <Empty>k__BackingField;
    public static CacheEntryStack Empty { get; }
    private CacheEntryStack(CacheEntryStack previous, CacheEntry entry);
    private static CacheEntryStack();
    [CompilerGeneratedAttribute]
public static CacheEntryStack get_Empty();
    public CacheEntryStack Push(CacheEntry c);
    public CacheEntry Peek();
}
public class Microsoft.Extensions.Caching.Memory.MemoryCache : object {
    private Dictionary`2<object, CacheEntry> _entries;
    private ReaderWriterLockSlim _entryLock;
    private bool _disposed;
    private Action`1<CacheEntry> _setEntry;
    private Action`1<CacheEntry> _entryExpirationNotification;
    private ISystemClock _clock;
    private TimeSpan _expirationScanFrequency;
    private DateTimeOffset _lastExpirationScan;
    public int Count { get; }
    public MemoryCache(IOptions`1<MemoryCacheOptions> optionsAccessor);
    protected virtual override void Finalize();
    public int get_Count();
    public sealed virtual ICacheEntry CreateEntry(object key);
    private void SetEntry(CacheEntry entry);
    public sealed virtual bool TryGetValue(object key, Object& result);
    public sealed virtual void Remove(object key);
    private void RemoveEntry(CacheEntry entry);
    private void RemoveEntries(List`1<CacheEntry> entries);
    private void EntryExpired(CacheEntry entry);
    private void StartScanForExpiredItems();
    private static void ScanForExpiredItems(MemoryCache cache);
    private bool DoMemoryPreassureCollection(object state);
    public void Compact(double percentage);
    private void ExpirePriorityBucket(int removalCountTarget, List`1<CacheEntry> expiredEntries, List`1<CacheEntry> priorityEntries);
    public sealed virtual void Dispose();
    protected virtual void Dispose(bool disposing);
    private void CheckDisposed();
}
public class Microsoft.Extensions.Caching.Memory.MemoryCacheOptions : object {
    [CompilerGeneratedAttribute]
private ISystemClock <Clock>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <CompactOnMemoryPressure>k__BackingField;
    [CompilerGeneratedAttribute]
private TimeSpan <ExpirationScanFrequency>k__BackingField;
    public ISystemClock Clock { get; public set; }
    public bool CompactOnMemoryPressure { get; public set; }
    public TimeSpan ExpirationScanFrequency { get; public set; }
    private MemoryCacheOptions Microsoft.Extensions.Options.IOptions<Microsoft.Extensions.Caching.Memory.MemoryCacheOptions>.Value { get; }
    [CompilerGeneratedAttribute]
public ISystemClock get_Clock();
    [CompilerGeneratedAttribute]
public void set_Clock(ISystemClock value);
    [CompilerGeneratedAttribute]
public bool get_CompactOnMemoryPressure();
    [CompilerGeneratedAttribute]
public void set_CompactOnMemoryPressure(bool value);
    [CompilerGeneratedAttribute]
public TimeSpan get_ExpirationScanFrequency();
    [CompilerGeneratedAttribute]
public void set_ExpirationScanFrequency(TimeSpan value);
    private sealed virtual override MemoryCacheOptions Microsoft.Extensions.Options.IOptions<Microsoft.Extensions.Caching.Memory.MemoryCacheOptions>.get_Value();
}
[ExtensionAttribute]
public static class Microsoft.Extensions.DependencyInjection.MemoryCacheServiceCollectionExtensions : object {
    [ExtensionAttribute]
public static IServiceCollection AddMemoryCache(IServiceCollection services);
    [ExtensionAttribute]
public static IServiceCollection AddMemoryCache(IServiceCollection services, Action`1<MemoryCacheOptions> setupAction);
    [ExtensionAttribute]
public static IServiceCollection AddDistributedMemoryCache(IServiceCollection services);
}
public class Microsoft.Extensions.Internal.GcNotification : object {
    private Func`2<object, bool> _callback;
    private object _state;
    private int _initialCollectionCount;
    private GcNotification(Func`2<object, bool> callback, object state);
    public static void Register(Func`2<object, bool> callback, object state);
    protected virtual override void Finalize();
}
