[ExtensionAttribute]
public static class Microsoft.Extensions.DependencyInjection.OptionsServiceCollectionExtensions : object {
    [ExtensionAttribute]
public static IServiceCollection AddOptions(IServiceCollection services);
    [ExtensionAttribute]
public static IServiceCollection Configure(IServiceCollection services, Action`1<TOptions> configureOptions);
}
public class Microsoft.Extensions.Options.ConfigureOptions`1 : object {
    [CompilerGeneratedAttribute]
private Action`1<TOptions> <Action>k__BackingField;
    public Action`1<TOptions> Action { get; }
    public ConfigureOptions`1(Action`1<TOptions> action);
    [CompilerGeneratedAttribute]
public Action`1<TOptions> get_Action();
    public virtual void Configure(TOptions options);
}
public interface Microsoft.Extensions.Options.IConfigureOptions`1 {
    public abstract virtual void Configure(TOptions options);
}
public interface Microsoft.Extensions.Options.IOptions`1 {
    public TOptions Value { get; }
    public abstract virtual TOptions get_Value();
}
public interface Microsoft.Extensions.Options.IOptionsMonitor`1 {
    public TOptions CurrentValue { get; }
    public abstract virtual TOptions get_CurrentValue();
    public abstract virtual IDisposable OnChange(Action`1<TOptions> listener);
}
public static class Microsoft.Extensions.Options.Options : object {
    public static IOptions`1<TOptions> Create(TOptions options);
}
internal class Microsoft.Extensions.Options.OptionsCache`1 : object {
    private Func`1<TOptions> _createCache;
    private object _cacheLock;
    private bool _cacheInitialized;
    private TOptions _options;
    private IEnumerable`1<IConfigureOptions`1<TOptions>> _setups;
    public TOptions Value { get; }
    public OptionsCache`1(IEnumerable`1<IConfigureOptions`1<TOptions>> setups);
    private TOptions CreateOptions();
    public virtual TOptions get_Value();
}
public class Microsoft.Extensions.Options.OptionsManager`1 : object {
    private OptionsCache`1<TOptions> _optionsCache;
    public TOptions Value { get; }
    public OptionsManager`1(IEnumerable`1<IConfigureOptions`1<TOptions>> setups);
    public virtual TOptions get_Value();
}
public class Microsoft.Extensions.Options.OptionsWrapper`1 : object {
    [CompilerGeneratedAttribute]
private TOptions <Value>k__BackingField;
    public TOptions Value { get; }
    public OptionsWrapper`1(TOptions options);
    [CompilerGeneratedAttribute]
public sealed virtual TOptions get_Value();
}
internal static class Microsoft.Extensions.Options.Resources : object {
    private static ResourceManager _resourceManager;
    internal static string Error_CannotActivateAbstractOrInterface { get; }
    internal static string Error_FailedBinding { get; }
    internal static string Error_FailedToActivate { get; }
    internal static string Error_MissingParameterlessConstructor { get; }
    private static Resources();
    internal static string get_Error_CannotActivateAbstractOrInterface();
    internal static string FormatError_CannotActivateAbstractOrInterface(object p0);
    internal static string get_Error_FailedBinding();
    internal static string FormatError_FailedBinding(object p0, object p1);
    internal static string get_Error_FailedToActivate();
    internal static string FormatError_FailedToActivate(object p0);
    internal static string get_Error_MissingParameterlessConstructor();
    internal static string FormatError_MissingParameterlessConstructor(object p0);
    private static string GetString(string name, String[] formatterNames);
}
