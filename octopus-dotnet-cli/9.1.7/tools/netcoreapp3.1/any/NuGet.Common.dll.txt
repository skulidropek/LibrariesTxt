public class NuGet.Common.ActivityCorrelationContext : object {
    private static AsyncLocal`1<ActivityCorrelationContext> _instance;
    private static ActivityCorrelationContext _globalInstance;
    [CompilerGeneratedAttribute]
private string <CorrelationId>k__BackingField;
    public string CorrelationId { get; private set; }
    public static ActivityCorrelationContext Current { get; }
    private static ActivityCorrelationContext();
    [CompilerGeneratedAttribute]
public string get_CorrelationId();
    [CompilerGeneratedAttribute]
private void set_CorrelationId(string value);
    public static ActivityCorrelationContext get_Current();
    public static ActivityCorrelationContext StartNew();
    public sealed virtual void Dispose();
}
public static class NuGet.Common.AsyncLazy : object {
    public static AsyncLazy`1<T> New(Func`1<Task`1<T>> asyncValueFactory);
    public static AsyncLazy`1<T> New(Func`1<T> valueFactory);
    public static AsyncLazy`1<T> New(Lazy`1<Task`1<T>> inner);
    public static AsyncLazy`1<T> New(T innerData);
}
[CLSCompliantAttribute("True")]
public class NuGet.Common.AsyncLazy`1 : object {
    private Lazy`1<Task`1<T>> _inner;
    public AsyncLazy`1(Func`1<Task`1<T>> valueFactory);
    public AsyncLazy`1(Lazy`1<Task`1<T>> inner);
    public TaskAwaiter`1<T> GetAwaiter();
    public static Lazy`1<Task`1<T>> op_Implicit(AsyncLazy`1<T> outer);
}
public static class NuGet.Common.ClientVersionUtility : object {
    private static string _clientVersion;
    public static string GetNuGetAssemblyVersion();
}
public class NuGet.Common.CollectorLogger : object {
    private ILogger _innerLogger;
    private ConcurrentQueue`1<string> _errors;
    public IEnumerable`1<string> Errors { get; }
    public CollectorLogger(ILogger innerLogger);
    public sealed virtual void LogDebug(string data);
    public sealed virtual void LogVerbose(string data);
    public sealed virtual void LogInformation(string data);
    public sealed virtual void LogMinimal(string data);
    public sealed virtual void LogWarning(string data);
    public sealed virtual void LogError(string data);
    public sealed virtual void LogInformationSummary(string data);
    public sealed virtual void LogErrorSummary(string data);
    public sealed virtual IEnumerable`1<string> get_Errors();
}
public static class NuGet.Common.ConcurrencyUtilities : object {
    private static int NumberOfRetries;
    private static TimeSpan SleepDuration;
    private static string _basePath;
    private static string BasePath { get; }
    private static ConcurrencyUtilities();
    [AsyncStateMachineAttribute("NuGet.Common.ConcurrencyUtilities/<ExecuteWithFileLockedAsync>d__2`1")]
public static Task`1<T> ExecuteWithFileLockedAsync(string filePath, Func`2<CancellationToken, Task`1<T>> action, CancellationToken token);
    public static void ExecuteWithFileLocked(string filePath, Action action);
    private static FileStream AcquireFileStream(string lockPath);
    private static string get_BasePath();
    private static string FileLockPath(string filePath);
    private static string FilePathToLockName(string filePath);
    private static string ToHex(Byte[] bytes);
    private static char ToHexChar(int input);
}
public class NuGet.Common.CryptoHashProvider : object {
    private static string SHA512HashAlgorithm;
    private static string SHA256HashAlgorithm;
    private string _hashAlgorithm;
    private static bool AllowOnlyFipsAlgorithms { get; }
    public CryptoHashProvider(string hashAlgorithm);
    private static bool get_AllowOnlyFipsAlgorithms();
    public Byte[] CalculateHash(Stream stream);
    public Byte[] CalculateHash(Byte[] data);
    public bool VerifyHash(Byte[] data, Byte[] hash);
    private HashAlgorithm GetHashAlgorithm();
    private static bool ReadFipsConfigValue();
}
public class NuGet.Common.CultureUtility : object {
    public static void DisableLocalization();
    private static void SetCulture(CultureInfo culture);
}
public class NuGet.Common.DatetimeUtility : object {
    public static string ToReadableTimeFormat(TimeSpan time);
}
public class NuGet.Common.EnvironmentVariableWrapper : object {
    public sealed virtual string GetEnvironmentVariable(string variable);
}
public class NuGet.Common.ExceptionLogger : object {
    [CompilerGeneratedAttribute]
private bool <ShowStack>k__BackingField;
    [CompilerGeneratedAttribute]
private static ExceptionLogger <Instance>k__BackingField;
    public bool ShowStack { get; }
    public static ExceptionLogger Instance { get; }
    public ExceptionLogger(IEnvironmentVariableReader reader);
    private static ExceptionLogger();
    [CompilerGeneratedAttribute]
public bool get_ShowStack();
    private static bool ShouldShowStack(IEnvironmentVariableReader reader);
    [CompilerGeneratedAttribute]
public static ExceptionLogger get_Instance();
}
public static class NuGet.Common.ExceptionUtilities : object {
    public static string DisplayMessage(Exception exception, bool indent);
    public static string DisplayMessage(Exception exception);
    public static string DisplayMessage(AggregateException exception);
    public static string DisplayMessage(TargetInvocationException exception);
    [IteratorStateMachineAttribute("NuGet.Common.ExceptionUtilities/<GetMessages>d__4")]
private static IEnumerable`1<string> GetMessages(AggregateException exception);
    private static IEnumerable`1<string> GetMessages(TargetInvocationException exception);
    [IteratorStateMachineAttribute("NuGet.Common.ExceptionUtilities/<GetMessages>d__6")]
private static IEnumerable`1<string> GetMessages(Exception exception);
    [IteratorStateMachineAttribute("NuGet.Common.ExceptionUtilities/<GetLines>d__7")]
private static IEnumerable`1<string> GetLines(string input);
    private static string JoinMessages(IEnumerable`1<string> messages, bool indent);
}
public static class NuGet.Common.FileUtility : object {
    public static int MaxTries;
    private static FileUtility();
    public static void Move(string sourceFileName, string destFileName);
    public static void Delete(string path);
    private static void Sleep(int ms);
}
public interface NuGet.Common.ICollectorLogger {
    public IEnumerable`1<string> Errors { get; }
    public abstract virtual IEnumerable`1<string> get_Errors();
}
public interface NuGet.Common.IEnvironmentVariableReader {
    public abstract virtual string GetEnvironmentVariable(string variable);
}
public interface NuGet.Common.ILogger {
    public abstract virtual void LogDebug(string data);
    public abstract virtual void LogVerbose(string data);
    public abstract virtual void LogInformation(string data);
    public abstract virtual void LogMinimal(string data);
    public abstract virtual void LogWarning(string data);
    public abstract virtual void LogError(string data);
    public abstract virtual void LogInformationSummary(string data);
    public abstract virtual void LogErrorSummary(string data);
}
public interface NuGet.Common.INuGetPathContext {
    public string UserPackageFolder { get; }
    public IReadOnlyList`1<string> FallbackPackageFolders { get; }
    public string HttpCacheFolder { get; }
    public abstract virtual string get_UserPackageFolder();
    public abstract virtual IReadOnlyList`1<string> get_FallbackPackageFolders();
    public abstract virtual string get_HttpCacheFolder();
}
public enum NuGet.Common.LogLevel : Enum {
    public int value__;
    public static LogLevel Debug;
    public static LogLevel Verbose;
    public static LogLevel Information;
    public static LogLevel Minimal;
    public static LogLevel Warning;
    public static LogLevel Error;
}
public static class NuGet.Common.NetworkProtocolUtility : object {
    public static void ConfigureSupportedSslProtocols();
}
public static class NuGet.Common.NuGetEnvironment : object {
    private static string DotNet;
    private static string DotNetExe;
    public static string GetFolderPath(NuGetFolderPath folder);
    private static string GetFolderPath(SpecialFolder folder);
    private static string GetHome();
    public static string GetDotNetLocation();
}
public enum NuGet.Common.NuGetFolderPath : Enum {
    public int value__;
    public static NuGetFolderPath MachineWideSettingsBaseDirectory;
    public static NuGetFolderPath MachineWideConfigDirectory;
    public static NuGetFolderPath UserSettingsDirectory;
    public static NuGetFolderPath HttpCacheDirectory;
    public static NuGetFolderPath NuGetHome;
    public static NuGetFolderPath DefaultMsBuildPath;
    public static NuGetFolderPath Temp;
}
public class NuGet.Common.NullLogger : object {
    private static ILogger _instance;
    public static ILogger Instance { get; }
    public static ILogger get_Instance();
    public sealed virtual void LogDebug(string data);
    public sealed virtual void LogError(string data);
    public sealed virtual void LogInformation(string data);
    public sealed virtual void LogMinimal(string data);
    public sealed virtual void LogVerbose(string data);
    public sealed virtual void LogWarning(string data);
    public sealed virtual void LogInformationSummary(string data);
    public sealed virtual void LogErrorSummary(string data);
}
public static class NuGet.Common.PathResolver : object {
    public static IEnumerable`1<T> GetMatches(IEnumerable`1<T> source, Func`2<T, string> getPath, IEnumerable`1<string> wildcards);
    public static void FilterPackageFiles(ICollection`1<T> source, Func`2<T, string> getPath, IEnumerable`1<string> wildcards);
    public static string NormalizeWildcardForExcludedFiles(string basePath, string wildcard);
    private static Regex WildcardToRegex(string wildcard);
    public static IEnumerable`1<string> PerformWildcardSearch(string basePath, string searchPath);
    public static IEnumerable`1<SearchPathResult> PerformWildcardSearch(string basePath, string searchPath, bool includeEmptyDirectories, String& normalizedBasePath);
    internal static string GetPathToEnumerateFrom(string basePath, string searchPath);
    internal static string NormalizeBasePath(string basePath, String& searchPath);
    public static bool IsWildcardSearch(string filter);
    public static bool IsDirectoryPath(string path);
    private static bool IsEmptyDirectory(string directory);
}
public static class NuGet.Common.PathUtility : object {
    public static StringComparer GetStringComparerBasedOnOS();
    [IteratorStateMachineAttribute("NuGet.Common.PathUtility/<GetUniquePathsBasedOnOS>d__1")]
public static IEnumerable`1<string> GetUniquePathsBasedOnOS(IEnumerable`1<string> paths);
    public static string GetPathWithForwardSlashes(string path);
    public static string EnsureTrailingSlash(string path);
    private static string EnsureTrailingCharacter(string path, char trailingCharacter);
}
public static class NuGet.Common.PathValidator : object {
    public static bool IsValidSource(string source);
    public static bool IsValidLocalPath(string path);
    public static bool IsValidUncPath(string path);
    public static bool IsValidUrl(string url);
    public static bool IsValidRelativePath(string path);
}
public class NuGet.Common.Preprocessor : object {
    public static string Process(Func`1<Stream> fileStreamFactory, Func`2<string, string> tokenReplacement);
    public static string Process(Stream stream, Func`2<string, string> tokenReplacement);
}
public class NuGet.Common.ProjectJsonPathUtilities : object {
    public static string ProjectConfigFileName;
    public static string ProjectConfigFileEnding;
    public static string ProjectLockFileName;
    private static ProjectJsonPathUtilities();
    public static string GetProjectConfigPath(string directoryPath, string projectName);
    public static string GetProjectConfigWithProjectName(string projectName);
    public static string GetProjectLockFileNameWithProjectName(string projectName);
    public static string GetLockFilePath(string configFilePath);
    public static string GetProjectNameFromConfigFileName(string configPath);
    public static bool IsProjectConfig(string configPath);
}
public static class NuGet.Common.RuntimeEnvironmentHelper : object {
    private static Lazy`1<bool> _isMono;
    public static bool IsWindows { get; }
    public static bool IsMono { get; }
    public static bool IsMacOSX { get; }
    public static bool IsLinux { get; }
    private static RuntimeEnvironmentHelper();
    public static bool get_IsWindows();
    public static bool get_IsMono();
    public static bool get_IsMacOSX();
    public static bool get_IsLinux();
}
[DebuggerNonUserCodeAttribute]
[CompilerGeneratedAttribute]
internal class NuGet.Common.Strings : object {
    private static ResourceManager resourceMan;
    private static CultureInfo resourceCulture;
    [EditorBrowsableAttribute("2")]
internal static ResourceManager ResourceManager { get; }
    [EditorBrowsableAttribute("2")]
internal static CultureInfo Culture { get; internal set; }
    internal static string AbsolutePathRequired { get; }
    internal static string NoPackageFoldersFound { get; }
    internal static string PackageFolderNotFound { get; }
    internal static string UnableToDetemineClientVersion { get; }
    internal static string UnauthorizedLockFail { get; }
    internal static string UnsupportedHashAlgorithm { get; }
    internal static ResourceManager get_ResourceManager();
    internal static CultureInfo get_Culture();
    internal static void set_Culture(CultureInfo value);
    internal static string get_AbsolutePathRequired();
    internal static string get_NoPackageFoldersFound();
    internal static string get_PackageFolderNotFound();
    internal static string get_UnableToDetemineClientVersion();
    internal static string get_UnauthorizedLockFail();
    internal static string get_UnsupportedHashAlgorithm();
}
public class NuGet.Common.Token : object {
    [CompilerGeneratedAttribute]
private string <Value>k__BackingField;
    [CompilerGeneratedAttribute]
private TokenCategory <Category>k__BackingField;
    public string Value { get; private set; }
    public TokenCategory Category { get; private set; }
    public Token(TokenCategory category, string value);
    [CompilerGeneratedAttribute]
public string get_Value();
    [CompilerGeneratedAttribute]
private void set_Value(string value);
    [CompilerGeneratedAttribute]
public TokenCategory get_Category();
    [CompilerGeneratedAttribute]
private void set_Category(TokenCategory value);
}
public enum NuGet.Common.TokenCategory : Enum {
    public int value__;
    public static TokenCategory Text;
    public static TokenCategory Variable;
}
public class NuGet.Common.Tokenizer : object {
    private string _text;
    private int _index;
    public Tokenizer(string text);
    public Token Read();
    private static bool IsWordChar(char ch);
    private Token ParseTokenAfterDollarSign();
    private Token ParseText();
}
public static class NuGet.Common.UriUtility : object {
    private static string FilePrefix;
    public static Uri CreateSourceUri(string source, UriKind kind);
    public static Uri TryCreateSourceUri(string source, UriKind kind);
    private static string FixSourceUri(string source);
    public static string UrlEncodeOdataParameter(string value);
    public static string GetLocalPath(string localOrUriPath);
}
[ExtensionAttribute]
internal static class NuGet.Shared.Extensions : object {
    [ExtensionAttribute]
internal static bool OrderedEquals(IEnumerable`1<TSource> self, IEnumerable`1<TSource> other, Func`2<TSource, TKey> keySelector, IComparer`1<TKey> orderComparer, IEqualityComparer`1<TSource> sequenceComparer);
}
internal class NuGet.Shared.HashCodeCombiner : ValueType {
    private static long Seed;
    private bool _initialized;
    private long _combinedHash;
    internal int CombinedHash { get; }
    internal int get_CombinedHash();
    internal void AddInt32(int i);
    internal void AddObject(int i);
    internal void AddObject(bool b);
    internal void AddObject(TValue o, IEqualityComparer`1<TValue> comparer);
    internal void AddObject(object o);
    internal static int GetHashCode(Object[] objects);
    private void CheckInitialized();
}
