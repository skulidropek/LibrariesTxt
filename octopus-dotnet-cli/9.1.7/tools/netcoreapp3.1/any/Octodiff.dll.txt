[CommandAttribute("delta", "Mono.Cecil.CustomAttributeArgument[]")]
internal class Octodiff.CommandLine.DeltaCommand : object {
    private List`1<Action`1<DeltaBuilder>> configuration;
    private OptionSet options;
    private string newFilePath;
    private string signatureFilePath;
    private string deltaFilePath;
    public sealed virtual void GetHelp(TextWriter writer);
    public sealed virtual int Execute(String[] commandLineArguments);
    [CompilerGeneratedAttribute]
private void <.ctor>b__5_0(string v);
    [CompilerGeneratedAttribute]
private void <.ctor>b__5_1(string v);
    [CompilerGeneratedAttribute]
private void <.ctor>b__5_2(string v);
    [CompilerGeneratedAttribute]
private void <.ctor>b__5_3(string v);
}
[CommandAttribute("explain-delta", "Mono.Cecil.CustomAttributeArgument[]")]
internal class Octodiff.CommandLine.ExplainDeltaCommand : object {
    private OptionSet options;
    private string deltaFilePath;
    public sealed virtual void GetHelp(TextWriter writer);
    public sealed virtual int Execute(String[] commandLineArguments);
    [CompilerGeneratedAttribute]
private void <.ctor>b__2_0(string v);
}
[CommandAttribute("help", "Mono.Cecil.CustomAttributeArgument[]")]
internal class Octodiff.CommandLine.HelpCommand : object {
    private ICommandLocator commands;
    public sealed virtual void GetHelp(TextWriter writer);
    public sealed virtual int Execute(String[] commandLineArguments);
    private void PrintCommandHelp(string executable, ICommand command, ICommandMetadata commandMetadata, string commandName);
    private void PrintGeneralHelp(string executable);
}
internal abstract class Octodiff.CommandLine.Option : object {
    private string prototype;
    private string description;
    private String[] names;
    private OptionValueType type;
    private int count;
    private String[] separators;
    private static Char[] NameTerminator;
    public string Prototype { get; }
    public string Description { get; }
    public OptionValueType OptionValueType { get; }
    public int MaxValueCount { get; }
    internal String[] Names { get; }
    internal String[] ValueSeparators { get; }
    protected Option(string prototype, string description);
    protected Option(string prototype, string description, int maxValueCount);
    private static Option();
    public string get_Prototype();
    public string get_Description();
    public OptionValueType get_OptionValueType();
    public int get_MaxValueCount();
    public String[] GetNames();
    public String[] GetValueSeparators();
    protected static T Parse(string value, OptionContext c);
    internal String[] get_Names();
    internal String[] get_ValueSeparators();
    private OptionValueType ParsePrototype();
    private static void AddSeparators(string name, int end, ICollection`1<string> seps);
    public void Invoke(OptionContext c);
    protected abstract virtual void OnParseComplete(OptionContext c);
    public virtual string ToString();
}
internal class Octodiff.CommandLine.OptionAction`2 : MulticastDelegate {
    public OptionAction`2(object object, IntPtr method);
    public virtual void Invoke(TKey key, TValue value);
    public virtual IAsyncResult BeginInvoke(TKey key, TValue value, AsyncCallback callback, object object);
    public virtual void EndInvoke(IAsyncResult result);
}
internal class Octodiff.CommandLine.OptionContext : object {
    private Option option;
    private string name;
    private int index;
    private OptionSet set;
    private OptionValueCollection c;
    public Option Option { get; public set; }
    public string OptionName { get; public set; }
    public int OptionIndex { get; public set; }
    public OptionSet OptionSet { get; }
    public OptionValueCollection OptionValues { get; }
    public OptionContext(OptionSet set);
    public Option get_Option();
    public void set_Option(Option value);
    public string get_OptionName();
    public void set_OptionName(string value);
    public int get_OptionIndex();
    public void set_OptionIndex(int value);
    public OptionSet get_OptionSet();
    public OptionValueCollection get_OptionValues();
}
internal class Octodiff.CommandLine.OptionException : Exception {
    private string option;
    public string OptionName { get; }
    public OptionException(string message, string optionName);
    public OptionException(string message, string optionName, Exception innerException);
    public string get_OptionName();
}
internal class Octodiff.CommandLine.OptionSet : KeyedCollection`2<string, Option> {
    private List`1<Tuple`3<string, string, Action`1<string>>> positionalParameters;
    private Func`2<string, string> localizer;
    private Regex ValueOption;
    private static int OptionWidth;
    public Func`2<string, string> MessageLocalizer { get; }
    public OptionSet(Func`2<string, string> localizer);
    public Func`2<string, string> get_MessageLocalizer();
    protected virtual string GetKeyForItem(Option item);
    [ObsoleteAttribute("Use KeyedCollection.this[string]")]
protected Option GetOptionForName(string option);
    protected virtual void InsertItem(int index, Option item);
    protected virtual void RemoveItem(int index);
    protected virtual void SetItem(int index, Option item);
    private void AddImpl(Option option);
    public OptionSet Add(Option option);
    public void Positional(string name, string description, Action`1<string> valueCallback);
    public OptionSet Add(string prototype, Action`1<string> action);
    public OptionSet Add(string prototype, string description, Action`1<string> action);
    public OptionSet Add(string prototype, OptionAction`2<string, string> action);
    public OptionSet Add(string prototype, string description, OptionAction`2<string, string> action);
    public OptionSet Add(string prototype, Action`1<T> action);
    public OptionSet Add(string prototype, string description, Action`1<T> action);
    public OptionSet Add(string prototype, OptionAction`2<TKey, TValue> action);
    public OptionSet Add(string prototype, string description, OptionAction`2<TKey, TValue> action);
    protected virtual OptionContext CreateOptionContext();
    public List`1<string> Parse(IEnumerable`1<string> arguments);
    private static bool Unprocessed(ICollection`1<string> extra, Option def, OptionContext c, string argument);
    protected bool GetOptionParts(string argument, String& flag, String& name, String& sep, String& value);
    protected virtual bool Parse(string argument, OptionContext c);
    private void ParseValue(string option, OptionContext c);
    private bool ParseBool(string option, string n, OptionContext c);
    private bool ParseBundledValue(string f, string n, OptionContext c);
    private static void Invoke(OptionContext c, string name, string value, Option option);
    public List`1<string> GetPositionals();
    public void WriteOptionDescriptions(TextWriter o);
    private bool WriteOptionPrototype(TextWriter o, Option p, Int32& written);
    private static int GetNextOptionIndex(String[] names, int i);
    private static void Write(TextWriter o, Int32& n, string s);
    private static string GetArgumentName(int index, int maxIndex, string description);
    private static string GetDescription(string description);
    [IteratorStateMachineAttribute("Octodiff.CommandLine.OptionSet/<GetLines>d__43")]
private static IEnumerable`1<string> GetLines(string description);
    private static bool IsEolChar(char c);
    private static int GetLineEnd(int start, int length, string description);
}
[DefaultMemberAttribute("Item")]
internal class Octodiff.CommandLine.OptionValueCollection : object {
    private List`1<string> values;
    private OptionContext c;
    private bool System.Collections.ICollection.IsSynchronized { get; }
    private object System.Collections.ICollection.SyncRoot { get; }
    public int Count { get; }
    public bool IsReadOnly { get; }
    private bool System.Collections.IList.IsFixedSize { get; }
    private object System.Collections.IList.Item { get; private set; }
    public string Item { get; public set; }
    internal OptionValueCollection(OptionContext c);
    private sealed virtual override void System.Collections.ICollection.CopyTo(Array array, int index);
    private sealed virtual override bool System.Collections.ICollection.get_IsSynchronized();
    private sealed virtual override object System.Collections.ICollection.get_SyncRoot();
    public sealed virtual void Add(string item);
    public sealed virtual void Clear();
    public sealed virtual bool Contains(string item);
    public sealed virtual void CopyTo(String[] array, int arrayIndex);
    public sealed virtual bool Remove(string item);
    public sealed virtual int get_Count();
    public sealed virtual bool get_IsReadOnly();
    private sealed virtual override IEnumerator System.Collections.IEnumerable.GetEnumerator();
    public sealed virtual IEnumerator`1<string> GetEnumerator();
    private sealed virtual override int System.Collections.IList.Add(object value);
    private sealed virtual override bool System.Collections.IList.Contains(object value);
    private sealed virtual override int System.Collections.IList.IndexOf(object value);
    private sealed virtual override void System.Collections.IList.Insert(int index, object value);
    private sealed virtual override void System.Collections.IList.Remove(object value);
    private sealed virtual override void System.Collections.IList.RemoveAt(int index);
    private sealed virtual override bool System.Collections.IList.get_IsFixedSize();
    private sealed virtual override object System.Collections.IList.get_Item(int index);
    private sealed virtual override void System.Collections.IList.set_Item(int index, object value);
    public sealed virtual int IndexOf(string item);
    public sealed virtual void Insert(int index, string item);
    public sealed virtual void RemoveAt(int index);
    private void AssertValid(int index);
    public sealed virtual string get_Item(int index);
    public sealed virtual void set_Item(int index, string value);
    public List`1<string> ToList();
    public String[] ToArray();
    public virtual string ToString();
}
internal enum Octodiff.CommandLine.OptionValueType : Enum {
    public int value__;
    public static OptionValueType None;
    public static OptionValueType Optional;
    public static OptionValueType Required;
}
[CommandAttribute("patch", "Mono.Cecil.CustomAttributeArgument[]")]
internal class Octodiff.CommandLine.PatchCommand : object {
    private OptionSet options;
    private IProgressReporter progressReporter;
    private string basisFilePath;
    private string deltaFilePath;
    private string newFilePath;
    private bool skipHashCheck;
    public sealed virtual void GetHelp(TextWriter writer);
    public sealed virtual int Execute(String[] commandLineArguments);
    [CompilerGeneratedAttribute]
private void <.ctor>b__6_0(string v);
    [CompilerGeneratedAttribute]
private void <.ctor>b__6_1(string v);
    [CompilerGeneratedAttribute]
private void <.ctor>b__6_2(string v);
    [CompilerGeneratedAttribute]
private void <.ctor>b__6_3(string v);
    [CompilerGeneratedAttribute]
private void <.ctor>b__6_4(string v);
}
[CommandAttribute("signature", "Mono.Cecil.CustomAttributeArgument[]")]
internal class Octodiff.CommandLine.SignatureCommand : object {
    private List`1<Action`1<SignatureBuilder>> configuration;
    private OptionSet options;
    private string basisFilePath;
    private string signatureFilePath;
    public sealed virtual void GetHelp(TextWriter writer);
    public sealed virtual int Execute(String[] commandLineArguments);
    [CompilerGeneratedAttribute]
private void <.ctor>b__4_0(string v);
    [CompilerGeneratedAttribute]
private void <.ctor>b__4_1(string v);
    [CompilerGeneratedAttribute]
private void <.ctor>b__4_2(string v);
    [CompilerGeneratedAttribute]
private void <.ctor>b__4_4(string v);
}
[AttributeUsageAttribute("4")]
internal class Octodiff.CommandLine.Support.CommandAttribute : Attribute {
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    [CompilerGeneratedAttribute]
private String[] <Aliases>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Description>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Usage>k__BackingField;
    public string Name { get; public set; }
    public String[] Aliases { get; public set; }
    public string Description { get; public set; }
    public string Usage { get; public set; }
    public CommandAttribute(string name, String[] aliases);
    [CompilerGeneratedAttribute]
public sealed virtual string get_Name();
    [CompilerGeneratedAttribute]
public void set_Name(string value);
    [CompilerGeneratedAttribute]
public sealed virtual String[] get_Aliases();
    [CompilerGeneratedAttribute]
public void set_Aliases(String[] value);
    [CompilerGeneratedAttribute]
public sealed virtual string get_Description();
    [CompilerGeneratedAttribute]
public void set_Description(string value);
    [CompilerGeneratedAttribute]
public sealed virtual string get_Usage();
    [CompilerGeneratedAttribute]
public sealed virtual void set_Usage(string value);
}
internal class Octodiff.CommandLine.Support.CommandException : Exception {
    public CommandException(string message);
}
internal class Octodiff.CommandLine.Support.CommandLocator : object {
    private IEnumerable`1<Type> assemblyCommands { get; }
    public sealed virtual ICommandMetadata[] List();
    public sealed virtual ICommandMetadata Find(string name);
    public sealed virtual ICommand Create(ICommandMetadata metadata);
    private IEnumerable`1<Type> get_assemblyCommands();
    private ICommandMetadata GetCommandAttribute(Type type);
    [CompilerGeneratedAttribute]
private <>f__AnonymousType0`2<Type, ICommandMetadata> <List>b__0_0(Type t);
    [CompilerGeneratedAttribute]
private <>f__AnonymousType0`2<Type, ICommandMetadata> <Find>b__1_0(Type t);
    [CompilerGeneratedAttribute]
private <>f__AnonymousType0`2<Type, ICommandMetadata> <Create>b__2_0(Type t);
}
internal interface Octodiff.CommandLine.Support.ICommand {
    public abstract virtual void GetHelp(TextWriter writer);
    public abstract virtual int Execute(String[] commandLineArguments);
}
internal interface Octodiff.CommandLine.Support.ICommandLocator {
    public abstract virtual ICommandMetadata[] List();
    public abstract virtual ICommandMetadata Find(string name);
    public abstract virtual ICommand Create(ICommandMetadata metadata);
}
internal interface Octodiff.CommandLine.Support.ICommandMetadata {
    public string Name { get; }
    public String[] Aliases { get; }
    public string Description { get; }
    public string Usage { get; public set; }
    public abstract virtual string get_Name();
    public abstract virtual String[] get_Aliases();
    public abstract virtual string get_Description();
    public abstract virtual string get_Usage();
    public abstract virtual void set_Usage(string value);
}
public class Octodiff.Core.Adler32RollingChecksum : object {
    public string Name { get; }
    public sealed virtual string get_Name();
    public sealed virtual UInt32 Calculate(Byte[] block, int offset, int count);
    public sealed virtual UInt32 Rotate(UInt32 checksum, byte remove, byte add, int chunkSize);
}
public class Octodiff.Core.AggregateCopyOperationsDecorator : object {
    private IDeltaWriter decorated;
    private DataRange bufferedCopy;
    public AggregateCopyOperationsDecorator(IDeltaWriter decorated);
    public sealed virtual void WriteDataCommand(Stream source, long offset, long length);
    public sealed virtual void WriteMetadata(IHashAlgorithm hashAlgorithm, Byte[] expectedNewFileHash);
    public sealed virtual void WriteCopyCommand(DataRange chunk);
    private void FlushCurrentCopyCommand();
    public sealed virtual void Finish();
}
public class Octodiff.Core.BinaryDeltaReader : object {
    private BinaryReader reader;
    private IProgressReporter progressReporter;
    private Byte[] expectedHash;
    private IHashAlgorithm hashAlgorithm;
    private bool hasReadMetadata;
    public Byte[] ExpectedHash { get; }
    public IHashAlgorithm HashAlgorithm { get; }
    public BinaryDeltaReader(Stream stream, IProgressReporter progressReporter);
    public sealed virtual Byte[] get_ExpectedHash();
    public sealed virtual IHashAlgorithm get_HashAlgorithm();
    private void EnsureMetadata();
    public sealed virtual void Apply(Action`1<Byte[]> writeData, Action`2<long, long> copy);
}
public class Octodiff.Core.BinaryDeltaWriter : object {
    private BinaryWriter writer;
    public BinaryDeltaWriter(Stream stream);
    public sealed virtual void WriteMetadata(IHashAlgorithm hashAlgorithm, Byte[] expectedNewFileHash);
    public sealed virtual void WriteCopyCommand(DataRange segment);
    public sealed virtual void WriteDataCommand(Stream source, long offset, long length);
    public sealed virtual void Finish();
}
internal class Octodiff.Core.BinaryFormat : object {
    public static Byte[] SignatureHeader;
    public static Byte[] DeltaHeader;
    public static Byte[] EndOfMetadata;
    public static byte CopyCommand;
    public static byte DataCommand;
    public static byte Version;
    private static BinaryFormat();
}
public class Octodiff.Core.ChunkSignature : object {
    public long StartOffset;
    public short Length;
    public Byte[] Hash;
    public UInt32 RollingChecksum;
    public virtual string ToString();
}
internal class Octodiff.Core.ChunkSignatureChecksumComparer : object {
    public sealed virtual int Compare(ChunkSignature x, ChunkSignature y);
}
public class Octodiff.Core.CompatibilityException : Exception {
    public CompatibilityException(string message);
}
public class Octodiff.Core.CorruptFileFormatException : Exception {
    public CorruptFileFormatException(string message);
}
public class Octodiff.Core.DataRange : ValueType {
    public long StartOffset;
    public long Length;
    public DataRange(long startOffset, long length);
}
public class Octodiff.Core.DeltaApplier : object {
    [CompilerGeneratedAttribute]
private bool <SkipHashCheck>k__BackingField;
    public bool SkipHashCheck { get; public set; }
    [CompilerGeneratedAttribute]
public bool get_SkipHashCheck();
    [CompilerGeneratedAttribute]
public void set_SkipHashCheck(bool value);
    public void Apply(Stream basisFileStream, IDeltaReader delta, Stream outputStream);
}
public class Octodiff.Core.DeltaBuilder : object {
    private static int ReadBufferSize;
    [CompilerGeneratedAttribute]
private IProgressReporter <ProgressReporter>k__BackingField;
    public IProgressReporter ProgressReporter { get; public set; }
    [CompilerGeneratedAttribute]
public IProgressReporter get_ProgressReporter();
    [CompilerGeneratedAttribute]
public void set_ProgressReporter(IProgressReporter value);
    public void BuildDelta(Stream newFileStream, ISignatureReader signatureReader, IDeltaWriter deltaWriter);
    private static List`1<ChunkSignature> OrderChunksByChecksum(List`1<ChunkSignature> chunks);
    private Dictionary`2<UInt32, int> CreateChunkMap(IList`1<ChunkSignature> chunks, Int32& maxChunkSize, Int32& minChunkSize);
}
internal class Octodiff.Core.DeltaStatistics : object {
    [CompilerGeneratedAttribute]
private int <ChunksCopied>k__BackingField;
    [CompilerGeneratedAttribute]
private long <BytesCopied>k__BackingField;
    public int ChunksCopied { get; public set; }
    public long BytesCopied { get; public set; }
    [CompilerGeneratedAttribute]
public int get_ChunksCopied();
    [CompilerGeneratedAttribute]
public void set_ChunksCopied(int value);
    [CompilerGeneratedAttribute]
public long get_BytesCopied();
    [CompilerGeneratedAttribute]
public void set_BytesCopied(long value);
}
public class Octodiff.Core.HashAlgorithmWrapper : object {
    private HashAlgorithm algorithm;
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    public string Name { get; private set; }
    public int HashLength { get; }
    public HashAlgorithmWrapper(string name, HashAlgorithm algorithm);
    [CompilerGeneratedAttribute]
public sealed virtual string get_Name();
    [CompilerGeneratedAttribute]
private void set_Name(string value);
    public sealed virtual int get_HashLength();
    public sealed virtual Byte[] ComputeHash(Stream stream);
    public sealed virtual Byte[] ComputeHash(Byte[] buffer, int offset, int length);
}
public interface Octodiff.Core.IDeltaReader {
    public Byte[] ExpectedHash { get; }
    public IHashAlgorithm HashAlgorithm { get; }
    public abstract virtual Byte[] get_ExpectedHash();
    public abstract virtual IHashAlgorithm get_HashAlgorithm();
    public abstract virtual void Apply(Action`1<Byte[]> writeData, Action`2<long, long> copy);
}
public interface Octodiff.Core.IDeltaWriter {
    public abstract virtual void WriteMetadata(IHashAlgorithm hashAlgorithm, Byte[] expectedNewFileHash);
    public abstract virtual void WriteCopyCommand(DataRange segment);
    public abstract virtual void WriteDataCommand(Stream source, long offset, long length);
    public abstract virtual void Finish();
}
public interface Octodiff.Core.IHashAlgorithm {
    public string Name { get; }
    public int HashLength { get; }
    public abstract virtual string get_Name();
    public abstract virtual int get_HashLength();
    public abstract virtual Byte[] ComputeHash(Stream stream);
    public abstract virtual Byte[] ComputeHash(Byte[] buffer, int offset, int length);
}
public interface Octodiff.Core.IRollingChecksum {
    public string Name { get; }
    public abstract virtual string get_Name();
    public abstract virtual UInt32 Calculate(Byte[] block, int offset, int count);
    public abstract virtual UInt32 Rotate(UInt32 checksum, byte remove, byte add, int chunkSize);
}
public interface Octodiff.Core.ISignatureReader {
    public abstract virtual Signature ReadSignature();
}
public interface Octodiff.Core.ISignatureWriter {
    public abstract virtual void WriteMetadata(IHashAlgorithm hashAlgorithm, IRollingChecksum rollingChecksumAlgorithm);
    public abstract virtual void WriteChunk(ChunkSignature signature);
}
public class Octodiff.Core.Signature : object {
    [CompilerGeneratedAttribute]
private IHashAlgorithm <HashAlgorithm>k__BackingField;
    [CompilerGeneratedAttribute]
private IRollingChecksum <RollingChecksumAlgorithm>k__BackingField;
    [CompilerGeneratedAttribute]
private List`1<ChunkSignature> <Chunks>k__BackingField;
    public IHashAlgorithm HashAlgorithm { get; private set; }
    public IRollingChecksum RollingChecksumAlgorithm { get; private set; }
    public List`1<ChunkSignature> Chunks { get; private set; }
    public Signature(IHashAlgorithm hashAlgorithm, IRollingChecksum rollingChecksumAlgorithm);
    [CompilerGeneratedAttribute]
public IHashAlgorithm get_HashAlgorithm();
    [CompilerGeneratedAttribute]
private void set_HashAlgorithm(IHashAlgorithm value);
    [CompilerGeneratedAttribute]
public IRollingChecksum get_RollingChecksumAlgorithm();
    [CompilerGeneratedAttribute]
private void set_RollingChecksumAlgorithm(IRollingChecksum value);
    [CompilerGeneratedAttribute]
public List`1<ChunkSignature> get_Chunks();
    [CompilerGeneratedAttribute]
private void set_Chunks(List`1<ChunkSignature> value);
}
public class Octodiff.Core.SignatureBuilder : object {
    public static short MinimumChunkSize;
    public static short DefaultChunkSize;
    public static short MaximumChunkSize;
    private short chunkSize;
    [CompilerGeneratedAttribute]
private IProgressReporter <ProgressReporter>k__BackingField;
    [CompilerGeneratedAttribute]
private IHashAlgorithm <HashAlgorithm>k__BackingField;
    [CompilerGeneratedAttribute]
private IRollingChecksum <RollingChecksumAlgorithm>k__BackingField;
    public IProgressReporter ProgressReporter { get; public set; }
    public IHashAlgorithm HashAlgorithm { get; public set; }
    public IRollingChecksum RollingChecksumAlgorithm { get; public set; }
    public short ChunkSize { get; public set; }
    private static SignatureBuilder();
    [CompilerGeneratedAttribute]
public IProgressReporter get_ProgressReporter();
    [CompilerGeneratedAttribute]
public void set_ProgressReporter(IProgressReporter value);
    [CompilerGeneratedAttribute]
public IHashAlgorithm get_HashAlgorithm();
    [CompilerGeneratedAttribute]
public void set_HashAlgorithm(IHashAlgorithm value);
    [CompilerGeneratedAttribute]
public IRollingChecksum get_RollingChecksumAlgorithm();
    [CompilerGeneratedAttribute]
public void set_RollingChecksumAlgorithm(IRollingChecksum value);
    public short get_ChunkSize();
    public void set_ChunkSize(short value);
    public void Build(Stream stream, ISignatureWriter signatureWriter);
    private void WriteMetadata(Stream stream, ISignatureWriter signatureWriter);
    private void WriteChunkSignatures(Stream stream, ISignatureWriter signatureWriter);
}
public class Octodiff.Core.SignatureReader : object {
    private IProgressReporter reporter;
    private BinaryReader reader;
    public SignatureReader(Stream stream, IProgressReporter reporter);
    public sealed virtual Signature ReadSignature();
    private void Progress();
}
public class Octodiff.Core.SignatureWriter : object {
    private BinaryWriter signatureStream;
    public SignatureWriter(Stream signatureStream);
    public sealed virtual void WriteMetadata(IHashAlgorithm hashAlgorithm, IRollingChecksum rollingChecksumAlgorithm);
    public sealed virtual void WriteChunk(ChunkSignature signature);
}
public static class Octodiff.Core.SupportedAlgorithms : object {
}
public class Octodiff.Core.UsageException : Exception {
    public UsageException(string message);
}
public class Octodiff.Diagnostics.ConsoleProgressReporter : object {
    private string currentOperation;
    private int progressPercentage;
    public sealed virtual void ReportProgress(string operation, long currentPosition, long total);
}
public interface Octodiff.Diagnostics.IProgressReporter {
    public abstract virtual void ReportProgress(string operation, long currentPosition, long total);
}
public class Octodiff.Diagnostics.NullProgressReporter : object {
    public sealed virtual void ReportProgress(string operation, long currentPosition, long total);
}
public class Octodiff.Program : object {
    public static int Main(String[] args);
    private static void WriteError(Exception ex, bool details);
    private static string ExtractCommand(ICollection`1<string> args, String[]& remaining);
}
