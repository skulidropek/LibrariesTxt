[CompilerGeneratedAttribute]
[EmbeddedAttribute]
internal class Microsoft.CodeAnalysis.EmbeddedAttribute : Attribute {
}
public class Octopus.Cli.CliProgram : object {
    public int Execute(String[] args);
    internal int Run(String[] args);
    public static void ConfigureLogger();
    private static IContainer BuildContainer();
    private static int PrintError(Exception ex);
}
public abstract class Octopus.Cli.Commands.ApiCommand : CommandBase {
    public static string ServerUrlEnvVar;
    public static string ApiKeyEnvVar;
    public static string UsernameEnvVar;
    public static string PasswordEnvVar;
    private IOctopusClientFactory clientFactory;
    private IOctopusAsyncRepositoryFactory repositoryFactory;
    private string apiKey;
    private string serverBaseUrl;
    private bool enableDebugging;
    private bool ignoreSslErrors;
    private string password;
    private string username;
    private OctopusClientOptions clientOptions;
    private string spaceNameOrId;
    [CompilerGeneratedAttribute]
private IOctopusAsyncRepository <Repository>k__BackingField;
    [CompilerGeneratedAttribute]
private OctopusRepositoryCommonQueries <RepositoryCommonQueries>k__BackingField;
    [CompilerGeneratedAttribute]
private IOctopusFileSystem <FileSystem>k__BackingField;
    protected string ServerBaseUrl { get; }
    private string ApiKey { get; }
    private string Username { get; }
    private string Password { get; }
    protected IOctopusAsyncRepository Repository { get; private set; }
    protected OctopusRepositoryCommonQueries RepositoryCommonQueries { get; private set; }
    protected IOctopusFileSystem FileSystem { get; }
    protected ApiCommand(IOctopusClientFactory clientFactory, IOctopusAsyncRepositoryFactory repositoryFactory, IOctopusFileSystem fileSystem, ICommandOutputProvider commandOutputProvider);
    protected string get_ServerBaseUrl();
    private string get_ApiKey();
    private string get_Username();
    private string get_Password();
    [CompilerGeneratedAttribute]
protected IOctopusAsyncRepository get_Repository();
    [CompilerGeneratedAttribute]
private void set_Repository(IOctopusAsyncRepository value);
    [CompilerGeneratedAttribute]
protected OctopusRepositoryCommonQueries get_RepositoryCommonQueries();
    [CompilerGeneratedAttribute]
private void set_RepositoryCommonQueries(OctopusRepositoryCommonQueries value);
    [CompilerGeneratedAttribute]
protected IOctopusFileSystem get_FileSystem();
    [AsyncStateMachineAttribute("Octopus.Cli.Commands.ApiCommand/<Execute>d__34")]
public virtual Task Execute(String[] commandLineArguments);
    protected virtual Task ValidateParameters();
    [AsyncStateMachineAttribute("Octopus.Cli.Commands.ApiCommand/<Execute>d__36")]
protected virtual Task Execute();
    private void Respond();
    protected List`1<string> ReadAdditionalInputsFromConfigurationFile(string configFile);
    protected static IEnumerable`1<string> FormatReleasePropertiesAsStrings(ReleaseResource release);
    protected static string GetReleaseNotes(ReleaseResource release);
    protected static string GetPackageVersionsAsString(IEnumerable`1<SelectedPackage> packages);
    [CompilerGeneratedAttribute]
private void <Execute>b__34_0(OctopusRequest request);
}
[CommandAttribute("create-channel", "Mono.Cecil.CustomAttributeArgument[]")]
public class Octopus.Cli.Commands.Channel.CreateChannelCommand : ApiCommand {
    private string channelName;
    private string projectName;
    private string lifecycleName;
    private string channelDescription;
    private bool updateExisting;
    private Nullable`1<bool> makeDefaultChannel;
    private bool createdNewChannel;
    private bool channelUpdateRequired;
    private ProjectResource project;
    private LifecycleResource lifecycle;
    private ChannelResource channel;
    public CreateChannelCommand(IOctopusAsyncRepositoryFactory repositoryFactory, IOctopusFileSystem fileSystem, IOctopusClientFactory clientFactory, ICommandOutputProvider commandOutputProvider);
    [AsyncStateMachineAttribute("Octopus.Cli.Commands.Channel.CreateChannelCommand/<Request>d__12")]
public sealed virtual Task Request();
    public sealed virtual void PrintDefaultOutput();
    public sealed virtual void PrintJsonOutput();
    [CompilerGeneratedAttribute]
private void <.ctor>b__11_0(string p);
    [CompilerGeneratedAttribute]
private void <.ctor>b__11_1(string s);
    [CompilerGeneratedAttribute]
private void <.ctor>b__11_2(string d);
    [CompilerGeneratedAttribute]
private void <.ctor>b__11_3(string l);
    [CompilerGeneratedAttribute]
private void <.ctor>b__11_4(bool _);
    [CompilerGeneratedAttribute]
private void <.ctor>b__11_5(bool _);
    [CompilerGeneratedAttribute]
private bool <Request>b__12_0(LifecycleResource l);
    [CompilerGeneratedAttribute]
private bool <Request>b__12_1(ChannelResource ch);
}
[CommandAttribute("create-autodeployoverride", "Mono.Cecil.CustomAttributeArgument[]")]
public class Octopus.Cli.Commands.Deployment.CreateAutoDeployOverrideCommand : ApiCommand {
    private List`1<Tuple`3<EnvironmentResource, TenantResource, CreatedOutcome>> createdDeploymentOverides;
    private EnvironmentResource environment;
    private ProjectResource project;
    private ConfiguredTaskAwaitable`1<ReleaseResource> releaseTask;
    private IReadOnlyList`1<TenantResource> tenants;
    private ReleaseResource release;
    [CompilerGeneratedAttribute]
private string <ProjectName>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ReleaseVersionNumber>k__BackingField;
    [CompilerGeneratedAttribute]
private List`1<string> <EnvironmentNames>k__BackingField;
    [CompilerGeneratedAttribute]
private List`1<string> <TenantNames>k__BackingField;
    [CompilerGeneratedAttribute]
private List`1<string> <TenantTags>k__BackingField;
    public string ProjectName { get; public set; }
    public string ReleaseVersionNumber { get; public set; }
    public List`1<string> EnvironmentNames { get; public set; }
    public List`1<string> TenantNames { get; public set; }
    public List`1<string> TenantTags { get; public set; }
    public CreateAutoDeployOverrideCommand(IOctopusAsyncRepositoryFactory repositoryFactory, IOctopusFileSystem fileSystem, IOctopusClientFactory clientFactory, ICommandOutputProvider commandOutputProvider);
    [CompilerGeneratedAttribute]
public string get_ProjectName();
    [CompilerGeneratedAttribute]
public void set_ProjectName(string value);
    [CompilerGeneratedAttribute]
public string get_ReleaseVersionNumber();
    [CompilerGeneratedAttribute]
public void set_ReleaseVersionNumber(string value);
    [CompilerGeneratedAttribute]
public List`1<string> get_EnvironmentNames();
    [CompilerGeneratedAttribute]
public void set_EnvironmentNames(List`1<string> value);
    [CompilerGeneratedAttribute]
public List`1<string> get_TenantNames();
    [CompilerGeneratedAttribute]
public void set_TenantNames(List`1<string> value);
    [CompilerGeneratedAttribute]
public List`1<string> get_TenantTags();
    [CompilerGeneratedAttribute]
public void set_TenantTags(List`1<string> value);
    [AsyncStateMachineAttribute("Octopus.Cli.Commands.Deployment.CreateAutoDeployOverrideCommand/<ValidateParameters>d__27")]
protected virtual Task ValidateParameters();
    [AsyncStateMachineAttribute("Octopus.Cli.Commands.Deployment.CreateAutoDeployOverrideCommand/<Request>d__28")]
public sealed virtual Task Request();
    private void AddOverrideForEnvironment(ProjectResource project, EnvironmentResource environment, ReleaseResource release);
    private void AddOverrideForTenant(ProjectResource project, EnvironmentResource environment, TenantResource tenant, ReleaseResource release);
    public sealed virtual void PrintDefaultOutput();
    public sealed virtual void PrintJsonOutput();
    [CompilerGeneratedAttribute]
private void <.ctor>b__6_0(string v);
    [CompilerGeneratedAttribute]
private void <.ctor>b__6_1(string v);
    [CompilerGeneratedAttribute]
private void <.ctor>b__6_2(string v);
    [CompilerGeneratedAttribute]
private void <.ctor>b__6_3(string t);
    [CompilerGeneratedAttribute]
private void <.ctor>b__6_4(string tt);
    [CompilerGeneratedAttribute]
[DebuggerHiddenAttribute]
private Task <>n__0();
}
[CommandAttribute("delete-autodeployoverride", "Mono.Cecil.CustomAttributeArgument[]")]
public class Octopus.Cli.Commands.Deployment.DeleteAutoDeployOverrideCommand : ApiCommand {
    private List`1<Tuple`3<EnvironmentResource, TenantResource, DeletedOutcome>> deletedDeplomentOverrides;
    private IReadOnlyList`1<TenantResource> tenants;
    private ProjectResource project;
    [CompilerGeneratedAttribute]
private string <ProjectName>k__BackingField;
    [CompilerGeneratedAttribute]
private List`1<string> <EnvironmentNames>k__BackingField;
    [CompilerGeneratedAttribute]
private List`1<string> <TenantNames>k__BackingField;
    [CompilerGeneratedAttribute]
private List`1<string> <TenantTags>k__BackingField;
    public string ProjectName { get; public set; }
    public List`1<string> EnvironmentNames { get; public set; }
    public List`1<string> TenantNames { get; public set; }
    public List`1<string> TenantTags { get; public set; }
    public DeleteAutoDeployOverrideCommand(IOctopusAsyncRepositoryFactory repositoryFactory, IOctopusFileSystem fileSystem, IOctopusClientFactory octopusClientFactory, ICommandOutputProvider commandOutputProvider);
    [CompilerGeneratedAttribute]
public string get_ProjectName();
    [CompilerGeneratedAttribute]
public void set_ProjectName(string value);
    [CompilerGeneratedAttribute]
public List`1<string> get_EnvironmentNames();
    [CompilerGeneratedAttribute]
public void set_EnvironmentNames(List`1<string> value);
    [CompilerGeneratedAttribute]
public List`1<string> get_TenantNames();
    [CompilerGeneratedAttribute]
public void set_TenantNames(List`1<string> value);
    [CompilerGeneratedAttribute]
public List`1<string> get_TenantTags();
    [CompilerGeneratedAttribute]
public void set_TenantTags(List`1<string> value);
    [AsyncStateMachineAttribute("Octopus.Cli.Commands.Deployment.DeleteAutoDeployOverrideCommand/<ValidateParameters>d__20")]
protected virtual Task ValidateParameters();
    [AsyncStateMachineAttribute("Octopus.Cli.Commands.Deployment.DeleteAutoDeployOverrideCommand/<Request>d__21")]
public sealed virtual Task Request();
    private void DeleteOverrideForEnvironment(ProjectResource project, EnvironmentResource environment);
    private void DeleteOverrideForTenant(ProjectResource project, EnvironmentResource environment, TenantResource tenant);
    public sealed virtual void PrintDefaultOutput();
    public sealed virtual void PrintJsonOutput();
    [CompilerGeneratedAttribute]
private void <.ctor>b__3_0(string v);
    [CompilerGeneratedAttribute]
private void <.ctor>b__3_1(string v);
    [CompilerGeneratedAttribute]
private void <.ctor>b__3_2(string t);
    [CompilerGeneratedAttribute]
private void <.ctor>b__3_3(string tt);
    [CompilerGeneratedAttribute]
[DebuggerHiddenAttribute]
private Task <>n__0();
}
public abstract class Octopus.Cli.Commands.Deployment.DeploymentCommandBase : ApiCommand {
    private static char Separator;
    private Factory executionResourceWaiterFactory;
    private VariableDictionary variables;
    protected IReadOnlyList`1<DeploymentResource> deployments;
    protected List`1<DeploymentPromotionTarget> promotionTargets;
    protected List`1<TenantResource> deploymentTenants;
    private bool noRawLog;
    private bool showProgress;
    private string rawLogFile;
    [CompilerGeneratedAttribute]
private bool <ForcePackageRedeployment>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <ForcePackageDownload>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<bool> <UseGuidedFailure>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <WaitForDeployment>k__BackingField;
    [CompilerGeneratedAttribute]
private TimeSpan <DeploymentTimeout>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <CancelOnTimeout>k__BackingField;
    [CompilerGeneratedAttribute]
private TimeSpan <DeploymentStatusCheckSleepCycle>k__BackingField;
    [CompilerGeneratedAttribute]
private List`1<string> <SpecificMachineNames>k__BackingField;
    [CompilerGeneratedAttribute]
private List`1<string> <ExcludedMachineNames>k__BackingField;
    [CompilerGeneratedAttribute]
private List`1<string> <SkipStepNames>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<DateTimeOffset> <DeployAt>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<DateTimeOffset> <NoDeployAfter>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ProjectNameOrId>k__BackingField;
    [CompilerGeneratedAttribute]
private List`1<string> <DeployToEnvironmentNamesOrIds>k__BackingField;
    [CompilerGeneratedAttribute]
private List`1<string> <Tenants>k__BackingField;
    [CompilerGeneratedAttribute]
private List`1<string> <TenantTags>k__BackingField;
    protected bool ForcePackageRedeployment { get; protected set; }
    protected bool ForcePackageDownload { get; protected set; }
    protected Nullable`1<bool> UseGuidedFailure { get; protected set; }
    protected bool WaitForDeployment { get; protected set; }
    protected TimeSpan DeploymentTimeout { get; protected set; }
    protected bool CancelOnTimeout { get; protected set; }
    protected TimeSpan DeploymentStatusCheckSleepCycle { get; protected set; }
    protected List`1<string> SpecificMachineNames { get; protected set; }
    protected List`1<string> ExcludedMachineNames { get; protected set; }
    protected List`1<string> SkipStepNames { get; protected set; }
    protected Nullable`1<DateTimeOffset> DeployAt { get; protected set; }
    protected Nullable`1<DateTimeOffset> NoDeployAfter { get; protected set; }
    public string ProjectNameOrId { get; public set; }
    public List`1<string> DeployToEnvironmentNamesOrIds { get; public set; }
    public List`1<string> Tenants { get; public set; }
    public List`1<string> TenantTags { get; public set; }
    private bool IsTenantedDeployment { get; }
    protected DeploymentCommandBase(IOctopusAsyncRepositoryFactory repositoryFactory, IOctopusFileSystem fileSystem, IOctopusClientFactory clientFactory, ICommandOutputProvider commandOutputProvider, Factory executionResourceWaiterFactory);
    [CompilerGeneratedAttribute]
protected bool get_ForcePackageRedeployment();
    [CompilerGeneratedAttribute]
protected void set_ForcePackageRedeployment(bool value);
    [CompilerGeneratedAttribute]
protected bool get_ForcePackageDownload();
    [CompilerGeneratedAttribute]
protected void set_ForcePackageDownload(bool value);
    [CompilerGeneratedAttribute]
protected Nullable`1<bool> get_UseGuidedFailure();
    [CompilerGeneratedAttribute]
protected void set_UseGuidedFailure(Nullable`1<bool> value);
    [CompilerGeneratedAttribute]
protected bool get_WaitForDeployment();
    [CompilerGeneratedAttribute]
protected void set_WaitForDeployment(bool value);
    [CompilerGeneratedAttribute]
protected TimeSpan get_DeploymentTimeout();
    [CompilerGeneratedAttribute]
protected void set_DeploymentTimeout(TimeSpan value);
    [CompilerGeneratedAttribute]
protected bool get_CancelOnTimeout();
    [CompilerGeneratedAttribute]
protected void set_CancelOnTimeout(bool value);
    [CompilerGeneratedAttribute]
protected TimeSpan get_DeploymentStatusCheckSleepCycle();
    [CompilerGeneratedAttribute]
protected void set_DeploymentStatusCheckSleepCycle(TimeSpan value);
    [CompilerGeneratedAttribute]
protected List`1<string> get_SpecificMachineNames();
    [CompilerGeneratedAttribute]
protected void set_SpecificMachineNames(List`1<string> value);
    [CompilerGeneratedAttribute]
protected List`1<string> get_ExcludedMachineNames();
    [CompilerGeneratedAttribute]
protected void set_ExcludedMachineNames(List`1<string> value);
    [CompilerGeneratedAttribute]
protected List`1<string> get_SkipStepNames();
    [CompilerGeneratedAttribute]
protected void set_SkipStepNames(List`1<string> value);
    [CompilerGeneratedAttribute]
protected Nullable`1<DateTimeOffset> get_DeployAt();
    [CompilerGeneratedAttribute]
protected void set_DeployAt(Nullable`1<DateTimeOffset> value);
    [CompilerGeneratedAttribute]
protected Nullable`1<DateTimeOffset> get_NoDeployAfter();
    [CompilerGeneratedAttribute]
protected void set_NoDeployAfter(Nullable`1<DateTimeOffset> value);
    [CompilerGeneratedAttribute]
public string get_ProjectNameOrId();
    [CompilerGeneratedAttribute]
public void set_ProjectNameOrId(string value);
    [CompilerGeneratedAttribute]
public List`1<string> get_DeployToEnvironmentNamesOrIds();
    [CompilerGeneratedAttribute]
public void set_DeployToEnvironmentNamesOrIds(List`1<string> value);
    [CompilerGeneratedAttribute]
public List`1<string> get_Tenants();
    [CompilerGeneratedAttribute]
public void set_Tenants(List`1<string> value);
    [CompilerGeneratedAttribute]
public List`1<string> get_TenantTags();
    [CompilerGeneratedAttribute]
public void set_TenantTags(List`1<string> value);
    private bool get_IsTenantedDeployment();
    [AsyncStateMachineAttribute("Octopus.Cli.Commands.Deployment.DeploymentCommandBase/<ValidateParameters>d__76")]
protected virtual Task ValidateParameters();
    [AsyncStateMachineAttribute("Octopus.Cli.Commands.Deployment.DeploymentCommandBase/<DeployTenantedRelease>d__77")]
private Task`1<IReadOnlyList`1<DeploymentResource>> DeployTenantedRelease(ProjectResource project, ReleaseResource release);
    private void LogScheduledDeployment();
    [AsyncStateMachineAttribute("Octopus.Cli.Commands.Deployment.DeploymentCommandBase/<GetSpecificMachines>d__79")]
private Task`1<ReferenceCollection> GetSpecificMachines();
    [AsyncStateMachineAttribute("Octopus.Cli.Commands.Deployment.DeploymentCommandBase/<GetExcludedMachines>d__80")]
private Task`1<ReferenceCollection> GetExcludedMachines();
    [AsyncStateMachineAttribute("Octopus.Cli.Commands.Deployment.DeploymentCommandBase/<DeployRelease>d__81")]
protected Task DeployRelease(ProjectResource project, ReleaseResource release);
    [AsyncStateMachineAttribute("Octopus.Cli.Commands.Deployment.DeploymentCommandBase/<DeployToEnvironments>d__82")]
private Task`1<IReadOnlyList`1<DeploymentResource>> DeployToEnvironments(ProjectResource project, ReleaseResource release);
    [AsyncStateMachineAttribute("Octopus.Cli.Commands.Deployment.DeploymentCommandBase/<GetTenants>d__83")]
private Task`1<List`1<TenantResource>> GetTenants(ProjectResource project, string environmentName, ReleaseResource release, DeploymentTemplateResource releaseTemplate);
    [AsyncStateMachineAttribute("Octopus.Cli.Commands.Deployment.DeploymentCommandBase/<CreateDeploymentTask>d__84")]
private Task`1<DeploymentResource> CreateDeploymentTask(ProjectResource project, ReleaseResource release, DeploymentPromotionTarget promotionTarget, ReferenceCollection specificMachineIds, ReferenceCollection excludedMachineIds, TenantResource tenant);
    private void ParseVariable(string variable);
    [CompilerGeneratedAttribute]
private void <.ctor>b__9_0(bool v);
    [CompilerGeneratedAttribute]
private void <.ctor>b__9_1(bool v);
    [CompilerGeneratedAttribute]
private void <.ctor>b__9_2(bool v);
    [CompilerGeneratedAttribute]
private void <.ctor>b__9_3(TimeSpan v);
    [CompilerGeneratedAttribute]
private void <.ctor>b__9_4(bool v);
    [CompilerGeneratedAttribute]
private void <.ctor>b__9_5(TimeSpan v);
    [CompilerGeneratedAttribute]
private void <.ctor>b__9_6(bool v);
    [CompilerGeneratedAttribute]
private void <.ctor>b__9_7(string v);
    [CompilerGeneratedAttribute]
private void <.ctor>b__9_8(string v);
    [CompilerGeneratedAttribute]
private void <.ctor>b__9_9(bool v);
    [CompilerGeneratedAttribute]
private void <.ctor>b__9_10(string v);
    [CompilerGeneratedAttribute]
private void <.ctor>b__9_11(bool v);
    [CompilerGeneratedAttribute]
private void <.ctor>b__9_12(string v);
    [CompilerGeneratedAttribute]
private void <.ctor>b__9_13(DateTimeOffset v);
    [CompilerGeneratedAttribute]
private void <.ctor>b__9_14(DateTimeOffset v);
    [CompilerGeneratedAttribute]
private void <.ctor>b__9_15(string t);
    [CompilerGeneratedAttribute]
private void <.ctor>b__9_16(string tt);
    [CompilerGeneratedAttribute]
[DebuggerHiddenAttribute]
private Task <>n__0();
}
[CommandAttribute("deploy-release", "Mono.Cecil.CustomAttributeArgument[]")]
public class Octopus.Cli.Commands.Deployment.DeployReleaseCommand : DeploymentCommandBase {
    private ProjectResource project;
    private ChannelResource channel;
    private ReleaseResource releaseToPromote;
    [CompilerGeneratedAttribute]
private string <VersionNumber>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ChannelNameOrId>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <UpdateVariableSnapshot>k__BackingField;
    public string VersionNumber { get; public set; }
    public string ChannelNameOrId { get; public set; }
    public bool UpdateVariableSnapshot { get; public set; }
    public DeployReleaseCommand(IOctopusAsyncRepositoryFactory repositoryFactory, IOctopusFileSystem fileSystem, IOctopusClientFactory clientFactory, ICommandOutputProvider commandOutputProvider, Factory executionResourceWaiterFactory);
    [CompilerGeneratedAttribute]
public string get_VersionNumber();
    [CompilerGeneratedAttribute]
public void set_VersionNumber(string value);
    [CompilerGeneratedAttribute]
public string get_ChannelNameOrId();
    [CompilerGeneratedAttribute]
public void set_ChannelNameOrId(string value);
    [CompilerGeneratedAttribute]
public bool get_UpdateVariableSnapshot();
    [CompilerGeneratedAttribute]
public void set_UpdateVariableSnapshot(bool value);
    [AsyncStateMachineAttribute("Octopus.Cli.Commands.Deployment.DeployReleaseCommand/<ValidateParameters>d__16")]
protected virtual Task ValidateParameters();
    [AsyncStateMachineAttribute("Octopus.Cli.Commands.Deployment.DeployReleaseCommand/<Request>d__17")]
public sealed virtual Task Request();
    public sealed virtual void PrintDefaultOutput();
    public sealed virtual void PrintJsonOutput();
    [CompilerGeneratedAttribute]
private void <.ctor>b__3_0(string v);
    [CompilerGeneratedAttribute]
private void <.ctor>b__3_1(string v);
    [CompilerGeneratedAttribute]
private void <.ctor>b__3_2(string v);
    [CompilerGeneratedAttribute]
private void <.ctor>b__3_3(string v);
    [CompilerGeneratedAttribute]
private void <.ctor>b__3_4(bool v);
    [CompilerGeneratedAttribute]
[DebuggerHiddenAttribute]
private Task <>n__0();
    [CompilerGeneratedAttribute]
private <>f__AnonymousType8`11<string, string, <>f__AnonymousType9`2<string, string>, ReferenceCollection, ReferenceCollection, ReferenceCollection, DateTimeOffset, string, Nullable`1<DateTimeOffset>, <>f__AnonymousType10`2<string, string>, bool> <PrintJsonOutput>b__19_0(DeploymentResource d);
}
[CommandAttribute("dump-deployments", "Mono.Cecil.CustomAttributeArgument[]")]
public class Octopus.Cli.Commands.Deployment.DumpDeploymentsCommand : ApiCommand {
    private string filePath;
    public DumpDeploymentsCommand(IOctopusAsyncRepositoryFactory repositoryFactory, IOctopusFileSystem fileSystem, IOctopusClientFactory clientFactory, ICommandOutputProvider commandOutputProvider);
    [AsyncStateMachineAttribute("Octopus.Cli.Commands.Deployment.DumpDeploymentsCommand/<Execute>d__2")]
protected virtual Task Execute();
    private static string GetProjectGroupId(string projectId, IDictionary`2<string, string> projectsByGroup);
    private static string GetName(string id, IDictionary`2<string, string> dictionary);
    [CompilerGeneratedAttribute]
private void <.ctor>b__1_0(string v);
}
public class Octopus.Cli.Commands.Deployment.ExecutionResourceWaiter : object {
    private TaskOutputProgressPrinter printer;
    private ICommandOutputProvider commandOutputProvider;
    private IOctopusAsyncRepository repository;
    private string serverBaseUrl;
    public ExecutionResourceWaiter(ICommandOutputProvider commandOutputProvider, IOctopusAsyncRepository repository, string serverBaseUrl);
    [AsyncStateMachineAttribute("Octopus.Cli.Commands.Deployment.ExecutionResourceWaiter/<WaitForDeploymentToComplete>d__6")]
public sealed virtual Task WaitForDeploymentToComplete(IReadOnlyList`1<DeploymentResource> resources, ProjectResource project, ReleaseResource release, bool showProgress, bool noRawLog, string rawLogFile, bool cancelOnTimeout, TimeSpan deploymentStatusCheckSleepCycle, TimeSpan deploymentTimeout);
    [AsyncStateMachineAttribute("Octopus.Cli.Commands.Deployment.ExecutionResourceWaiter/<WaitForRunbookRunToComplete>d__7")]
public sealed virtual Task WaitForRunbookRunToComplete(IReadOnlyList`1<RunbookRunResource> resources, ProjectResource project, bool showProgress, bool noRawLog, string rawLogFile, bool cancelOnTimeout, TimeSpan deploymentStatusCheckSleepCycle, TimeSpan deploymentTimeout);
    [AsyncStateMachineAttribute("Octopus.Cli.Commands.Deployment.ExecutionResourceWaiter/<WaitForExecutionToComplete>d__8")]
private Task WaitForExecutionToComplete(IReadOnlyCollection`1<IExecutionResource> resources, bool showProgress, bool noRawLog, string rawLogFile, bool cancelOnTimeout, TimeSpan deploymentStatusCheckSleepCycle, TimeSpan deploymentTimeout, Func`2<IExecutionResource, Task> guidedFailureWarningGenerator, string alias);
    private Task CancelExecutionOnTimeoutIfRequested(IReadOnlyList`1<TaskResource> deploymentTasks, bool cancelOnTimeout, string alias);
    private Task PrintTaskOutput(TaskResource[] taskResources);
    private string GetPortalUrl(string path);
    [CompilerGeneratedAttribute]
private Task`1<TaskResource> <WaitForExecutionToComplete>b__8_0(IExecutionResource dep);
}
public interface Octopus.Cli.Commands.Deployment.IExecutionResourceWaiter {
    public abstract virtual Task WaitForDeploymentToComplete(IReadOnlyList`1<DeploymentResource> resources, ProjectResource project, ReleaseResource release, bool showProgress, bool noRawLog, string rawLogFile, bool cancelOnTimeout, TimeSpan deploymentStatusCheckSleepCycle, TimeSpan deploymentTimeout);
    public abstract virtual Task WaitForRunbookRunToComplete(IReadOnlyList`1<RunbookRunResource> resources, ProjectResource project, bool showProgress, bool noRawLog, string rawLogFile, bool cancelOnTimeout, TimeSpan deploymentStatusCheckSleepCycle, TimeSpan deploymentTimeout);
}
[CommandAttribute("list-deployments", "Mono.Cecil.CustomAttributeArgument[]")]
public class Octopus.Cli.Commands.Deployment.ListDeploymentsCommand : ApiCommand {
    private static int DefaultReturnAmount;
    private HashSet`1<string> environments;
    private HashSet`1<string> projects;
    private HashSet`1<string> tenants;
    private Nullable`1<int> numberOfResults;
    private IDictionary`2<string, string> projectsById;
    private IDictionary`2<string, string> environmentsById;
    private String[] projectsFilter;
    private String[] environmentsFilter;
    private IDictionary`2<string, string> tenantsById;
    private Dictionary`2<DeploymentResource, DeploymentRelatedResources> deploymentResources;
    public ListDeploymentsCommand(IOctopusAsyncRepositoryFactory repositoryFactory, IOctopusFileSystem fileSystem, IOctopusClientFactory clientFactory, ICommandOutputProvider commandOutputProvider);
    [AsyncStateMachineAttribute("Octopus.Cli.Commands.Deployment.ListDeploymentsCommand/<Request>d__12")]
public sealed virtual Task Request();
    public sealed virtual void PrintDefaultOutput();
    public sealed virtual void PrintJsonOutput();
    [AsyncStateMachineAttribute("Octopus.Cli.Commands.Deployment.ListDeploymentsCommand/<LoadProjects>d__15")]
private Task`1<IDictionary`2<string, string>> LoadProjects();
    [AsyncStateMachineAttribute("Octopus.Cli.Commands.Deployment.ListDeploymentsCommand/<LoadEnvironments>d__16")]
private Task`1<IDictionary`2<string, string>> LoadEnvironments();
    [AsyncStateMachineAttribute("Octopus.Cli.Commands.Deployment.ListDeploymentsCommand/<LoadTenants>d__17")]
private Task`1<IDictionary`2<string, string>> LoadTenants();
    private static void LogDeploymentInfo(ICommandOutputProvider outputProvider, DeploymentResource deploymentItem, ReleaseResource release, ChannelResource channel, IDictionary`2<string, string> environmentsById, IDictionary`2<string, string> projectsById, IDictionary`2<string, string> tenantsById);
    [CompilerGeneratedAttribute]
private void <.ctor>b__11_0(string v);
    [CompilerGeneratedAttribute]
private void <.ctor>b__11_1(string v);
    [CompilerGeneratedAttribute]
private void <.ctor>b__11_2(string v);
    [CompilerGeneratedAttribute]
private void <.ctor>b__11_3(int v);
    [CompilerGeneratedAttribute]
private <>f__AnonymousType11`9<<>f__AnonymousType3`2<string, string>, <>f__AnonymousType3`2<string, string>, <>f__AnonymousType3`2<string, string>, <>f__AnonymousType3`2<string, string>, DateTimeOffset, string, DateTimeOffset, string, string> <PrintJsonOutput>b__14_0(KeyValuePair`2<DeploymentResource, DeploymentRelatedResources> dr);
}
[CommandAttribute("list-latestdeployments", "Mono.Cecil.CustomAttributeArgument[]")]
public class Octopus.Cli.Commands.Deployment.ListLatestDeploymentsCommand : ApiCommand {
    private HashSet`1<string> environments;
    private HashSet`1<string> projects;
    private IDictionary`2<string, string> projectsById;
    private String[] projectsFilter;
    private IDictionary`2<string, string> environmentsById;
    private String[] environmentsFilter;
    private DashboardResource dashboard;
    private Dictionary`2<string, string> tenantsById;
    private Dictionary`2<DashboardItemResource, DeploymentRelatedResources> dashboardRelatedResourceses;
    public ListLatestDeploymentsCommand(IOctopusAsyncRepositoryFactory repositoryFactory, IOctopusFileSystem fileSystem, IOctopusClientFactory clientFactory, ICommandOutputProvider commandOutputProvider);
    [AsyncStateMachineAttribute("Octopus.Cli.Commands.Deployment.ListLatestDeploymentsCommand/<LoadProjects>d__10")]
private Task`1<IDictionary`2<string, string>> LoadProjects();
    [AsyncStateMachineAttribute("Octopus.Cli.Commands.Deployment.ListLatestDeploymentsCommand/<LoadEnvironments>d__11")]
private Task`1<IDictionary`2<string, string>> LoadEnvironments();
    private static void LogDeploymentInfo(ICommandOutputProvider commandOutputProvider, DashboardItemResource dashboardItem, ReleaseResource release, ChannelResource channel, IDictionary`2<string, string> environmentsById, IDictionary`2<string, string> projectedById, IDictionary`2<string, string> tenantsById);
    [AsyncStateMachineAttribute("Octopus.Cli.Commands.Deployment.ListLatestDeploymentsCommand/<Request>d__13")]
public sealed virtual Task Request();
    public sealed virtual void PrintDefaultOutput();
    public sealed virtual void PrintJsonOutput();
    private static string GetNameOfDeploymentTenant(IDictionary`2<string, string> tenantsById, string tenantId);
    [CompilerGeneratedAttribute]
private void <.ctor>b__9_0(string v);
    [CompilerGeneratedAttribute]
private void <.ctor>b__9_1(string v);
    [CompilerGeneratedAttribute]
private <>f__AnonymousType12`3<DashboardItemResource, ReleaseResource, ChannelResource> <PrintJsonOutput>b__15_0(DashboardItemResource dashboardItem);
    [CompilerGeneratedAttribute]
private <>f__AnonymousType13`11<<>f__AnonymousType3`2<string, string>, <>f__AnonymousType3`2<string, string>, <>f__AnonymousType3`2<string, string>, <>f__AnonymousType3`2<string, string>, DateTimeOffset, string, string, string, DateTimeOffset, string, string> <PrintJsonOutput>b__15_1(<>f__AnonymousType12`3<DashboardItemResource, ReleaseResource, ChannelResource> x);
}
public class Octopus.Cli.Commands.Deployment.TaskOutputProgressPrinter : object {
    private HashSet`1<string> printed;
    [AsyncStateMachineAttribute("Octopus.Cli.Commands.Deployment.TaskOutputProgressPrinter/<Render>d__1")]
public Task Render(IOctopusAsyncRepository repository, ICommandOutputProvider commandOutputProvider, TaskResource resource);
    private bool IsPrintable(ActivityElement element);
    private void RenderToConsole(ActivityElement element, ICommandOutputProvider commandOutputProvider, string indent);
    private void RenderToTeamCity(ActivityElement element, ICommandOutputProvider commandOutputProvider);
    private void RenderToVSTS(ActivityElement element, ICommandOutputProvider commandOutputProvider, string indent);
    private static string ConvertToTeamCityMessageStatus(string category);
}
[CommandAttribute("clean-environment", "Mono.Cecil.CustomAttributeArgument[]")]
public class Octopus.Cli.Commands.Environment.CleanEnvironmentCommand : ApiCommand {
    private HashSet`1<MachineModelStatus> statuses;
    private HashSet`1<MachineModelHealthStatus> healthStatuses;
    private List`1<MachineResult> commandResults;
    private string environmentName;
    private Nullable`1<bool> isDisabled;
    private Nullable`1<bool> isCalamariOutdated;
    private Nullable`1<bool> isTentacleOutdated;
    private EnvironmentResource environmentResource;
    private IEnumerable`1<MachineResource> machines;
    public CleanEnvironmentCommand(IOctopusAsyncRepositoryFactory repositoryFactory, IOctopusFileSystem fileSystem, IOctopusClientFactory clientFactory, ICommandOutputProvider commandOutputProvider);
    [AsyncStateMachineAttribute("Octopus.Cli.Commands.Environment.CleanEnvironmentCommand/<Request>d__11")]
public sealed virtual Task Request();
    [AsyncStateMachineAttribute("Octopus.Cli.Commands.Environment.CleanEnvironmentCommand/<CleanUpEnvironment>d__12")]
private Task CleanUpEnvironment(List`1<MachineResource> filteredMachines, EnvironmentResource environmentResource);
    [AsyncStateMachineAttribute("Octopus.Cli.Commands.Environment.CleanEnvironmentCommand/<FilterByState>d__13")]
private Task`1<IEnumerable`1<MachineResource>> FilterByState(IEnumerable`1<MachineResource> environmentMachines);
    private string GetStateFilterDescription();
    private Task`1<List`1<MachineResource>> FilterByEnvironment(EnvironmentResource environmentResource);
    [AsyncStateMachineAttribute("Octopus.Cli.Commands.Environment.CleanEnvironmentCommand/<GetEnvironment>d__16")]
private Task`1<EnvironmentResource> GetEnvironment();
    public sealed virtual void PrintDefaultOutput();
    public sealed virtual void PrintJsonOutput();
    [CompilerGeneratedAttribute]
private void <.ctor>b__10_0(string v);
    [CompilerGeneratedAttribute]
private void <.ctor>b__10_1(MachineModelStatus v);
    [CompilerGeneratedAttribute]
private void <.ctor>b__10_2(MachineModelHealthStatus v);
    [CompilerGeneratedAttribute]
private void <.ctor>b__10_3(bool v);
    [CompilerGeneratedAttribute]
private void <.ctor>b__10_4(bool v);
    [CompilerGeneratedAttribute]
private void <.ctor>b__10_5(bool v);
    [CompilerGeneratedAttribute]
private bool <FilterByState>b__13_0(MachineResource m);
    [CompilerGeneratedAttribute]
private bool <FilterByState>b__13_1(MachineResource m);
    [CompilerGeneratedAttribute]
private bool <FilterByState>b__13_2(MachineResource m);
    [CompilerGeneratedAttribute]
private <>f__AnonymousType16`3<<>f__AnonymousType17`3<string, string, MachineModelStatus>, <>f__AnonymousType3`2<string, string>, string> <PrintJsonOutput>b__18_0(MachineResult x);
}
[CommandAttribute("create-environment", "Mono.Cecil.CustomAttributeArgument[]")]
public class Octopus.Cli.Commands.Environment.CreateEnvironmentCommand : ApiCommand {
    private EnvironmentResource env;
    [CompilerGeneratedAttribute]
private string <EnvironmentName>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IgnoreIfExists>k__BackingField;
    public string EnvironmentName { get; public set; }
    public bool IgnoreIfExists { get; public set; }
    public CreateEnvironmentCommand(IOctopusAsyncRepositoryFactory repositoryFactory, IOctopusFileSystem fileSystem, IOctopusClientFactory clientFactory, ICommandOutputProvider commandOutputProvider);
    [CompilerGeneratedAttribute]
public string get_EnvironmentName();
    [CompilerGeneratedAttribute]
public void set_EnvironmentName(string value);
    [CompilerGeneratedAttribute]
public bool get_IgnoreIfExists();
    [CompilerGeneratedAttribute]
public void set_IgnoreIfExists(bool value);
    [AsyncStateMachineAttribute("Octopus.Cli.Commands.Environment.CreateEnvironmentCommand/<Request>d__10")]
public sealed virtual Task Request();
    public sealed virtual void PrintDefaultOutput();
    public sealed virtual void PrintJsonOutput();
    [CompilerGeneratedAttribute]
private void <.ctor>b__1_0(string v);
    [CompilerGeneratedAttribute]
private void <.ctor>b__1_1(bool v);
}
[CommandAttribute("list-environments", "Mono.Cecil.CustomAttributeArgument[]")]
public class Octopus.Cli.Commands.Environment.ListEnvironmentsCommand : ApiCommand {
    private List`1<EnvironmentResource> environments;
    public ListEnvironmentsCommand(IOctopusAsyncRepositoryFactory repositoryFactory, IOctopusFileSystem fileSystem, IOctopusClientFactory clientFactory, ICommandOutputProvider commandOutputProvider);
    [AsyncStateMachineAttribute("Octopus.Cli.Commands.Environment.ListEnvironmentsCommand/<Request>d__2")]
public sealed virtual Task Request();
    public sealed virtual void PrintDefaultOutput();
    public sealed virtual void PrintJsonOutput();
}
[CommandAttribute("export", "Mono.Cecil.CustomAttributeArgument[]")]
public class Octopus.Cli.Commands.ExportCommand : CommandBase {
    public ExportCommand(ICommandOutputProvider commandOutputProvider);
    public virtual Task Execute(String[] commandLineArgs);
}
public class Octopus.Cli.Commands.HealthStatusProvider : object {
    public static String[] StatusNames;
    public static String[] HealthStatusNames;
    private HashSet`1<MachineModelStatus> statuses;
    private HashSet`1<MachineModelHealthStatus> healthStatuses;
    private ICommandOutputProvider commandOutputProvider;
    [CompilerGeneratedAttribute]
private bool <IsHealthStatusPendingDeprication>k__BackingField;
    private bool IsHealthStatusPendingDeprication { get; }
    public HealthStatusProvider(IOctopusAsyncRepository repository, HashSet`1<MachineModelStatus> statuses, HashSet`1<MachineModelHealthStatus> healthStatuses, ICommandOutputProvider commandOutputProvider, RootResource rootDocument);
    private static HealthStatusProvider();
    [CompilerGeneratedAttribute]
private bool get_IsHealthStatusPendingDeprication();
    private void ValidateOptions();
    public string GetStatus(MachineBasedResource machineResource);
    public IEnumerable`1<TMachineResource> Filter(IEnumerable`1<TMachineResource> machines);
    private IEnumerable`1<TMachineResource> FilterByProvidedStatus(IEnumerable`1<TMachineResource> machines);
    private IEnumerable`1<TMachineResource> FilterByProvidedHealthStatus(IEnumerable`1<TMachineResource> machines);
}
[CommandAttribute("import", "Mono.Cecil.CustomAttributeArgument[]")]
public class Octopus.Cli.Commands.ImportCommand : CommandBase {
    public ImportCommand(ICommandOutputProvider commandOutputProvider);
    public virtual Task Execute(String[] commandLineArgs);
}
[CommandAttribute("list-machines", "Mono.Cecil.CustomAttributeArgument[]")]
public class Octopus.Cli.Commands.Machine.ListMachinesCommand : ApiCommand {
    private HashSet`1<string> environments;
    private HashSet`1<MachineModelStatus> statuses;
    private HashSet`1<MachineModelHealthStatus> healthStatuses;
    private HealthStatusProvider provider;
    private List`1<EnvironmentResource> environmentResources;
    private IEnumerable`1<MachineResource> environmentMachines;
    private Nullable`1<bool> isDisabled;
    private Nullable`1<bool> isCalamariOutdated;
    private Nullable`1<bool> isTentacleOutdated;
    public ListMachinesCommand(IOctopusAsyncRepositoryFactory repositoryFactory, IOctopusFileSystem fileSystem, IOctopusClientFactory clientFactory, ICommandOutputProvider commandOutputProvider);
    [AsyncStateMachineAttribute("Octopus.Cli.Commands.Machine.ListMachinesCommand/<Request>d__10")]
public sealed virtual Task Request();
    public sealed virtual void PrintDefaultOutput();
    public sealed virtual void PrintJsonOutput();
    private void LogFilteredMachines(IEnumerable`1<MachineResource> environmentMachines, HealthStatusProvider provider, List`1<EnvironmentResource> environmentResources);
    private Task`1<List`1<EnvironmentResource>> GetEnvironments();
    private IEnumerable`1<MachineResource> FilterByState(IEnumerable`1<MachineResource> environmentMachines, HealthStatusProvider provider);
    private Task`1<List`1<MachineResource>> FilterByEnvironments(List`1<EnvironmentResource> environmentResources);
    [CompilerGeneratedAttribute]
private void <.ctor>b__9_0(string v);
    [CompilerGeneratedAttribute]
private void <.ctor>b__9_1(MachineModelStatus v);
    [CompilerGeneratedAttribute]
private void <.ctor>b__9_2(MachineModelHealthStatus v);
    [CompilerGeneratedAttribute]
private void <.ctor>b__9_3(bool v);
    [CompilerGeneratedAttribute]
private void <.ctor>b__9_4(bool v);
    [CompilerGeneratedAttribute]
private void <.ctor>b__9_5(bool v);
    [CompilerGeneratedAttribute]
private <>f__AnonymousType18`4<string, string, string, String[]> <PrintJsonOutput>b__12_0(MachineResource machine);
    [CompilerGeneratedAttribute]
private string <PrintJsonOutput>b__12_1(string id);
    [CompilerGeneratedAttribute]
private bool <FilterByState>b__15_0(MachineResource m);
    [CompilerGeneratedAttribute]
private bool <FilterByState>b__15_1(MachineResource m);
    [CompilerGeneratedAttribute]
private bool <FilterByState>b__15_2(MachineResource m);
}
[CommandAttribute("list-workers", "Mono.Cecil.CustomAttributeArgument[]")]
public class Octopus.Cli.Commands.Machine.ListWorkersCommand : ApiCommand {
    private HashSet`1<string> pools;
    private HashSet`1<MachineModelStatus> statuses;
    private HashSet`1<MachineModelHealthStatus> healthStatuses;
    private HealthStatusProvider provider;
    private List`1<WorkerPoolResource> workerpoolResources;
    private IEnumerable`1<WorkerResource> workerpoolWorkers;
    private Nullable`1<bool> isDisabled;
    private Nullable`1<bool> isCalamariOutdated;
    private Nullable`1<bool> isTentacleOutdated;
    public ListWorkersCommand(IOctopusAsyncRepositoryFactory repositoryFactory, IOctopusFileSystem fileSystem, IOctopusClientFactory clientFactory, ICommandOutputProvider commandOutputProvider);
    [AsyncStateMachineAttribute("Octopus.Cli.Commands.Machine.ListWorkersCommand/<Request>d__10")]
public sealed virtual Task Request();
    public sealed virtual void PrintDefaultOutput();
    public sealed virtual void PrintJsonOutput();
    private void LogFilteredMachines(IEnumerable`1<WorkerResource> poolMachines, HealthStatusProvider provider, List`1<WorkerPoolResource> poolResources);
    private Task`1<List`1<WorkerPoolResource>> GetPools();
    private IEnumerable`1<WorkerResource> FilterByState(IEnumerable`1<WorkerResource> poolMachines, HealthStatusProvider provider);
    private Task`1<List`1<WorkerResource>> FilterByWorkerPools(List`1<WorkerPoolResource> poolResources);
    [CompilerGeneratedAttribute]
private void <.ctor>b__9_0(string v);
    [CompilerGeneratedAttribute]
private void <.ctor>b__9_1(MachineModelStatus v);
    [CompilerGeneratedAttribute]
private void <.ctor>b__9_2(MachineModelHealthStatus v);
    [CompilerGeneratedAttribute]
private void <.ctor>b__9_3(bool v);
    [CompilerGeneratedAttribute]
private void <.ctor>b__9_4(bool v);
    [CompilerGeneratedAttribute]
private void <.ctor>b__9_5(bool v);
    [CompilerGeneratedAttribute]
private <>f__AnonymousType19`4<string, string, string, String[]> <PrintJsonOutput>b__12_0(WorkerResource machine);
    [CompilerGeneratedAttribute]
private string <PrintJsonOutput>b__12_1(string id);
    [CompilerGeneratedAttribute]
private bool <FilterByState>b__15_0(WorkerResource m);
    [CompilerGeneratedAttribute]
private bool <FilterByState>b__15_1(WorkerResource m);
    [CompilerGeneratedAttribute]
private bool <FilterByState>b__15_2(WorkerResource m);
}
[CommandAttribute("build-information", "Mono.Cecil.CustomAttributeArgument[]")]
public class Octopus.Cli.Commands.Package.BuildInformationCommand : ApiCommand {
    private static OverwriteMode DefaultOverwriteMode;
    private List`1<OctopusPackageVersionBuildInformationMappedResource> pushedBuildInformation;
    private OctopusPackageVersionBuildInformationMappedResource resultResource;
    [CompilerGeneratedAttribute]
private HashSet`1<string> <PackageIds>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Version>k__BackingField;
    [CompilerGeneratedAttribute]
private string <File>k__BackingField;
    [CompilerGeneratedAttribute]
private OverwriteMode <OverwriteMode>k__BackingField;
    public HashSet`1<string> PackageIds { get; }
    public string Version { get; public set; }
    public string File { get; public set; }
    public OverwriteMode OverwriteMode { get; public set; }
    public BuildInformationCommand(IOctopusAsyncRepositoryFactory repositoryFactory, IOctopusFileSystem fileSystem, IOctopusClientFactory clientFactory, ICommandOutputProvider commandOutputProvider);
    [CompilerGeneratedAttribute]
public HashSet`1<string> get_PackageIds();
    [CompilerGeneratedAttribute]
public string get_Version();
    [CompilerGeneratedAttribute]
public void set_Version(string value);
    [CompilerGeneratedAttribute]
public string get_File();
    [CompilerGeneratedAttribute]
public void set_File(string value);
    [CompilerGeneratedAttribute]
public OverwriteMode get_OverwriteMode();
    [CompilerGeneratedAttribute]
public void set_OverwriteMode(OverwriteMode value);
    [AsyncStateMachineAttribute("Octopus.Cli.Commands.Package.BuildInformationCommand/<Request>d__19")]
public sealed virtual Task Request();
    public sealed virtual void PrintDefaultOutput();
    public sealed virtual void PrintJsonOutput();
    [CompilerGeneratedAttribute]
private void <.ctor>b__3_0(string packageId);
    [CompilerGeneratedAttribute]
private void <.ctor>b__3_1(string v);
    [CompilerGeneratedAttribute]
private void <.ctor>b__3_2(string file);
    [CompilerGeneratedAttribute]
private void <.ctor>b__3_3(OverwriteMode mode);
}
[CommandAttribute("delete-package", "Mono.Cecil.CustomAttributeArgument[]")]
public class Octopus.Cli.Commands.Package.DeletePackageCommand : ApiCommand {
    private object result;
    [CompilerGeneratedAttribute]
private string <PackageId>k__BackingField;
    [CompilerGeneratedAttribute]
private string <PackageVersion>k__BackingField;
    public string PackageId { get; public set; }
    public string PackageVersion { get; public set; }
    public DeletePackageCommand(IOctopusAsyncRepositoryFactory repositoryFactory, IOctopusFileSystem fileSystem, IOctopusClientFactory clientFactory, ICommandOutputProvider commandOutputProvider);
    [CompilerGeneratedAttribute]
public string get_PackageId();
    [CompilerGeneratedAttribute]
public void set_PackageId(string value);
    [CompilerGeneratedAttribute]
public string get_PackageVersion();
    [CompilerGeneratedAttribute]
public void set_PackageVersion(string value);
    [AsyncStateMachineAttribute("Octopus.Cli.Commands.Package.DeletePackageCommand/<Request>d__10")]
public sealed virtual Task Request();
    public sealed virtual void PrintDefaultOutput();
    public sealed virtual void PrintJsonOutput();
    [CompilerGeneratedAttribute]
private void <.ctor>b__1_0(string v);
    [CompilerGeneratedAttribute]
private void <.ctor>b__1_1(string v);
}
public interface Octopus.Cli.Commands.Package.IPackageBuilder {
    public String[] Files { get; }
    public string PackageFormat { get; }
    public abstract virtual String[] get_Files();
    public abstract virtual string get_PackageFormat();
    public abstract virtual void BuildPackage(string basePath, IList`1<string> includes, ManifestMetadata metadata, string outFolder, bool overwrite, bool verboseInfo);
    public abstract virtual void SetCompression(PackageCompressionLevel level);
}
public class Octopus.Cli.Commands.Package.NuGetPackageBuilder : object {
    private IOctopusFileSystem fileSystem;
    private ICommandOutputProvider commandOutputProvider;
    private List`1<string> files;
    public String[] Files { get; }
    public string PackageFormat { get; }
    public NuGetPackageBuilder(IOctopusFileSystem fileSystem, ICommandOutputProvider commandOutputProvider);
    public sealed virtual String[] get_Files();
    public sealed virtual string get_PackageFormat();
    public sealed virtual void BuildPackage(string basePath, IList`1<string> includes, ManifestMetadata metadata, string outFolder, bool overwrite, bool verboseInfo);
    public sealed virtual void SetCompression(PackageCompressionLevel level);
}
public enum Octopus.Cli.Commands.Package.PackageCompressionLevel : Enum {
    public int value__;
    public static PackageCompressionLevel None;
    public static PackageCompressionLevel Fast;
    public static PackageCompressionLevel Optimal;
}
public enum Octopus.Cli.Commands.Package.PackageFormat : Enum {
    public int value__;
    public static PackageFormat Zip;
    public static PackageFormat NuPkg;
    [ObsoleteAttribute("This is just here for backwards compat")]
public static PackageFormat Nuget;
}
[CommandAttribute("pack", "Mono.Cecil.CustomAttributeArgument[]")]
public class Octopus.Cli.Commands.Package.PackCommand : CommandBase {
    private static PackageCompressionLevel DefaultPackageCompressionLevel;
    private static PackageFormat DefaultPackageFormat;
    private static PackageFormat RecommendedPackageFormat;
    private string supportedPackageFormats;
    private IList`1<string> authors;
    private IOctopusFileSystem fileSystem;
    private IList`1<string> includes;
    private string basePath;
    private string description;
    private string id;
    private string outFolder;
    private bool overwrite;
    private bool verbose;
    private string releaseNotes;
    private string releaseNotesFile;
    private string title;
    private SemanticVersion version;
    private IPackageBuilder packageBuilder;
    private string allReleaseNotes;
    private PackageCompressionLevel packageCompressionLevel;
    public PackCommand(IOctopusFileSystem fileSystem, ICommandOutputProvider commandOutputProvider);
    public virtual Task Execute(String[] commandLineArguments);
    private IPackageBuilder SelectFormat(PackageFormat fmt);
    public sealed virtual Task Request();
    public sealed virtual void PrintDefaultOutput();
    public sealed virtual void PrintJsonOutput();
    [CompilerGeneratedAttribute]
private void <.ctor>b__20_0(string v);
    [CompilerGeneratedAttribute]
private void <.ctor>b__20_1(bool v);
    [CompilerGeneratedAttribute]
private void <.ctor>b__20_2(PackageCompressionLevel c);
    [CompilerGeneratedAttribute]
private void <.ctor>b__20_3(string v);
    [CompilerGeneratedAttribute]
private void <.ctor>b__20_4(string v);
    [CompilerGeneratedAttribute]
private void <.ctor>b__20_5(string v);
    [CompilerGeneratedAttribute]
private void <.ctor>b__20_6(string v);
    [CompilerGeneratedAttribute]
private void <.ctor>b__20_7(string v);
    [CompilerGeneratedAttribute]
private void <.ctor>b__20_8(string v);
    [CompilerGeneratedAttribute]
private void <.ctor>b__20_9(PackageFormat fmt);
    [CompilerGeneratedAttribute]
private void <.ctor>b__20_10(string v);
    [CompilerGeneratedAttribute]
private void <.ctor>b__20_11(string v);
    [CompilerGeneratedAttribute]
private void <.ctor>b__20_12(string v);
    [CompilerGeneratedAttribute]
private void <.ctor>b__20_13(bool v);
}
[CommandAttribute("push", "Mono.Cecil.CustomAttributeArgument[]")]
public class Octopus.Cli.Commands.Package.PushCommand : ApiCommand {
    private static OverwriteMode DefaultOverwriteMode;
    private List`1<string> pushedPackages;
    private List`1<Tuple`2<string, Exception>> failedPackages;
    [CompilerGeneratedAttribute]
private HashSet`1<string> <Packages>k__BackingField;
    [CompilerGeneratedAttribute]
private OverwriteMode <OverwriteMode>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <UseDeltaCompression>k__BackingField;
    [CompilerGeneratedAttribute]
private int <KeepAlive>k__BackingField;
    public HashSet`1<string> Packages { get; }
    public OverwriteMode OverwriteMode { get; public set; }
    public bool UseDeltaCompression { get; public set; }
    public int KeepAlive { get; public set; }
    public PushCommand(IOctopusAsyncRepositoryFactory repositoryFactory, IOctopusFileSystem fileSystem, IOctopusClientFactory clientFactory, ICommandOutputProvider commandOutputProvider);
    [CompilerGeneratedAttribute]
public HashSet`1<string> get_Packages();
    [CompilerGeneratedAttribute]
public OverwriteMode get_OverwriteMode();
    [CompilerGeneratedAttribute]
public void set_OverwriteMode(OverwriteMode value);
    [CompilerGeneratedAttribute]
public bool get_UseDeltaCompression();
    [CompilerGeneratedAttribute]
public void set_UseDeltaCompression(bool value);
    [CompilerGeneratedAttribute]
public int get_KeepAlive();
    [CompilerGeneratedAttribute]
public void set_KeepAlive(int value);
    [AsyncStateMachineAttribute("Octopus.Cli.Commands.Package.PushCommand/<Request>d__19")]
public sealed virtual Task Request();
    public sealed virtual void PrintDefaultOutput();
    public sealed virtual void PrintJsonOutput();
    private static string EnsurePackageExists(IOctopusFileSystem fileSystem, string package);
}
[CommandAttribute("push-metadata", "Mono.Cecil.CustomAttributeArgument[]")]
public class Octopus.Cli.Commands.Package.PushMetadataCommand : ApiCommand {
    private static OverwriteMode DefaultOverwriteMode;
    private OctopusPackageMetadataMappedResource resultResource;
    [CompilerGeneratedAttribute]
private string <PackageId>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Version>k__BackingField;
    [CompilerGeneratedAttribute]
private string <MetadataFile>k__BackingField;
    [CompilerGeneratedAttribute]
private OverwriteMode <OverwriteMode>k__BackingField;
    public string PackageId { get; public set; }
    public string Version { get; public set; }
    public string MetadataFile { get; public set; }
    public OverwriteMode OverwriteMode { get; public set; }
    public PushMetadataCommand(IOctopusAsyncRepositoryFactory repositoryFactory, IOctopusFileSystem fileSystem, IOctopusClientFactory clientFactory, ICommandOutputProvider commandOutputProvider);
    [CompilerGeneratedAttribute]
public string get_PackageId();
    [CompilerGeneratedAttribute]
public void set_PackageId(string value);
    [CompilerGeneratedAttribute]
public string get_Version();
    [CompilerGeneratedAttribute]
public void set_Version(string value);
    [CompilerGeneratedAttribute]
public string get_MetadataFile();
    [CompilerGeneratedAttribute]
public void set_MetadataFile(string value);
    [CompilerGeneratedAttribute]
public OverwriteMode get_OverwriteMode();
    [CompilerGeneratedAttribute]
public void set_OverwriteMode(OverwriteMode value);
    [AsyncStateMachineAttribute("Octopus.Cli.Commands.Package.PushMetadataCommand/<Request>d__19")]
public sealed virtual Task Request();
    public sealed virtual void PrintDefaultOutput();
    public sealed virtual void PrintJsonOutput();
    [CompilerGeneratedAttribute]
private void <.ctor>b__2_0(string v);
    [CompilerGeneratedAttribute]
private void <.ctor>b__2_1(string v);
    [CompilerGeneratedAttribute]
private void <.ctor>b__2_2(string file);
    [CompilerGeneratedAttribute]
private void <.ctor>b__2_3(OverwriteMode mode);
    [CompilerGeneratedAttribute]
private void <.ctor>b__2_4(string replace);
}
public class Octopus.Cli.Commands.Package.ZipPackageBuilder : object {
    private static DateTime MinDatetime;
    private static DateTime MaxDatetime;
    private IOctopusFileSystem fileSystem;
    private ICommandOutputProvider commandOutputProvider;
    private List`1<string> files;
    private CompressionLevel compressionLevel;
    public String[] Files { get; }
    public string PackageFormat { get; }
    public ZipPackageBuilder(IOctopusFileSystem fileSystem, ICommandOutputProvider commandOutputProvider);
    private static ZipPackageBuilder();
    public sealed virtual String[] get_Files();
    public sealed virtual string get_PackageFormat();
    public sealed virtual void BuildPackage(string basePath, IList`1<string> includes, ManifestMetadata metadata, string outFolder, bool overwrite, bool verboseInfo);
    public sealed virtual void SetCompression(PackageCompressionLevel level);
    private static void UpdateLastWriteTime(string file, ZipArchiveEntry entry);
    private static string UseCrossPlatformDirectorySeparator(string path);
}
[CommandAttribute("create-project", "Mono.Cecil.CustomAttributeArgument[]")]
public class Octopus.Cli.Commands.Project.CreateProjectCommand : ApiCommand {
    private ProjectResource project;
    private ProjectGroupResource projectGroup;
    private bool projectGroupCreated;
    [CompilerGeneratedAttribute]
private string <ProjectName>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ProjectGroupName>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IgnoreIfExists>k__BackingField;
    [CompilerGeneratedAttribute]
private string <LifecycleName>k__BackingField;
    public string ProjectName { get; public set; }
    public string ProjectGroupName { get; public set; }
    public bool IgnoreIfExists { get; public set; }
    public string LifecycleName { get; public set; }
    public CreateProjectCommand(IOctopusAsyncRepositoryFactory repositoryFactory, IOctopusFileSystem fileSystem, IOctopusClientFactory clientFactory, ICommandOutputProvider commandOutputProvider);
    [CompilerGeneratedAttribute]
public string get_ProjectName();
    [CompilerGeneratedAttribute]
public void set_ProjectName(string value);
    [CompilerGeneratedAttribute]
public string get_ProjectGroupName();
    [CompilerGeneratedAttribute]
public void set_ProjectGroupName(string value);
    [CompilerGeneratedAttribute]
public bool get_IgnoreIfExists();
    [CompilerGeneratedAttribute]
public void set_IgnoreIfExists(bool value);
    [CompilerGeneratedAttribute]
public string get_LifecycleName();
    [CompilerGeneratedAttribute]
public void set_LifecycleName(string value);
    [AsyncStateMachineAttribute("Octopus.Cli.Commands.Project.CreateProjectCommand/<Request>d__20")]
public sealed virtual Task Request();
    public sealed virtual void PrintDefaultOutput();
    public sealed virtual void PrintJsonOutput();
    [CompilerGeneratedAttribute]
private void <.ctor>b__3_0(string v);
    [CompilerGeneratedAttribute]
private void <.ctor>b__3_1(string v);
    [CompilerGeneratedAttribute]
private void <.ctor>b__3_2(string v);
    [CompilerGeneratedAttribute]
private void <.ctor>b__3_3(bool v);
    [CompilerGeneratedAttribute]
private bool <Request>b__20_0(LifecycleResource l);
}
[CommandAttribute("delete-project", "Mono.Cecil.CustomAttributeArgument[]")]
public class Octopus.Cli.Commands.Project.DeleteProjectCommand : ApiCommand {
    private ProjectResource project;
    private bool ProjectDeleted;
    [CompilerGeneratedAttribute]
private string <ProjectName>k__BackingField;
    public string ProjectName { get; public set; }
    public DeleteProjectCommand(IOctopusAsyncRepositoryFactory repositoryFactory, IOctopusFileSystem fileSystem, IOctopusClientFactory clientFactory, ICommandOutputProvider commandOutputProvider);
    [CompilerGeneratedAttribute]
public string get_ProjectName();
    [CompilerGeneratedAttribute]
public void set_ProjectName(string value);
    [AsyncStateMachineAttribute("Octopus.Cli.Commands.Project.DeleteProjectCommand/<Request>d__7")]
public sealed virtual Task Request();
    public sealed virtual void PrintDefaultOutput();
    public sealed virtual void PrintJsonOutput();
    [CompilerGeneratedAttribute]
private void <.ctor>b__2_0(string v);
}
[CommandAttribute("disable-project", "Mono.Cecil.CustomAttributeArgument[]")]
public class Octopus.Cli.Commands.Project.DisableProjectCommand : ApiCommand {
    private ProjectResource project;
    [CompilerGeneratedAttribute]
private string <ProjectName>k__BackingField;
    public string ProjectName { get; public set; }
    public DisableProjectCommand(IOctopusAsyncRepositoryFactory repositoryFactory, IOctopusFileSystem fileSystem, IOctopusClientFactory clientFactory, ICommandOutputProvider commandOutputProvider);
    [CompilerGeneratedAttribute]
public string get_ProjectName();
    [CompilerGeneratedAttribute]
public void set_ProjectName(string value);
    [AsyncStateMachineAttribute("Octopus.Cli.Commands.Project.DisableProjectCommand/<Request>d__6")]
public sealed virtual Task Request();
    public sealed virtual void PrintDefaultOutput();
    public sealed virtual void PrintJsonOutput();
    [CompilerGeneratedAttribute]
private void <.ctor>b__1_0(string v);
}
[CommandAttribute("list-projects", "Mono.Cecil.CustomAttributeArgument[]")]
public class Octopus.Cli.Commands.Project.ListProjectsCommand : ApiCommand {
    private List`1<ProjectResource> _projectResources;
    public ListProjectsCommand(IOctopusAsyncRepositoryFactory repositoryFactory, IOctopusFileSystem fileSystem, IOctopusClientFactory clientFactory, ICommandOutputProvider commandOutputProvider);
    [AsyncStateMachineAttribute("Octopus.Cli.Commands.Project.ListProjectsCommand/<Request>d__2")]
public sealed virtual Task Request();
    public sealed virtual void PrintDefaultOutput();
    public sealed virtual void PrintJsonOutput();
}
[CommandAttribute("allow-releaseprogression", "Mono.Cecil.CustomAttributeArgument[]")]
public class Octopus.Cli.Commands.Releases.AllowReleaseProgressionCommand : ApiCommand {
    private static OctopusVersionParser OctopusVersionParser;
    private ProjectResource project;
    private ReleaseResource release;
    [CompilerGeneratedAttribute]
private string <ProjectNameOrId>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ReleaseVersionNumber>k__BackingField;
    public string ProjectNameOrId { get; public set; }
    public string ReleaseVersionNumber { get; public set; }
    public AllowReleaseProgressionCommand(IOctopusClientFactory clientFactory, IOctopusAsyncRepositoryFactory repositoryFactory, IOctopusFileSystem fileSystem, ICommandOutputProvider commandOutputProvider);
    private static AllowReleaseProgressionCommand();
    [CompilerGeneratedAttribute]
public string get_ProjectNameOrId();
    [CompilerGeneratedAttribute]
public void set_ProjectNameOrId(string value);
    [CompilerGeneratedAttribute]
public string get_ReleaseVersionNumber();
    [CompilerGeneratedAttribute]
public void set_ReleaseVersionNumber(string value);
    [AsyncStateMachineAttribute("Octopus.Cli.Commands.Releases.AllowReleaseProgressionCommand/<ValidateParameters>d__12")]
protected virtual Task ValidateParameters();
    [AsyncStateMachineAttribute("Octopus.Cli.Commands.Releases.AllowReleaseProgressionCommand/<Request>d__13")]
public sealed virtual Task Request();
    public sealed virtual void PrintDefaultOutput();
    public sealed virtual void PrintJsonOutput();
    [CompilerGeneratedAttribute]
private void <.ctor>b__3_0(string v);
    [CompilerGeneratedAttribute]
private void <.ctor>b__3_1(string v);
    [CompilerGeneratedAttribute]
[DebuggerHiddenAttribute]
private Task <>n__0();
}
public class Octopus.Cli.Commands.Releases.ChannelVersionRuleTester : object {
    [AsyncStateMachineAttribute("Octopus.Cli.Commands.Releases.ChannelVersionRuleTester/<Test>d__0")]
public sealed virtual Task`1<ChannelVersionRuleTestResult> Test(IOctopusAsyncRepository repository, ChannelVersionRuleResource rule, string packageVersion, string feedId);
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
[CommandAttribute("create-release", "Mono.Cecil.CustomAttributeArgument[]")]
public class Octopus.Cli.Commands.Releases.CreateReleaseCommand : DeploymentCommandBase {
    [NullableAttribute("1")]
private IReleasePlanBuilder releasePlanBuilder;
    private ReleaseResource release;
    private ProjectResource project;
    private ReleasePlan plan;
    private string versionNumber;
    [CompilerGeneratedAttribute]
private string <GitReference>k__BackingField;
    [CompilerGeneratedAttribute]
private string <GitCommit>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ChannelNameOrId>k__BackingField;
    [CompilerGeneratedAttribute]
private string <VersionNumberParameterValue>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ReleaseNotes>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IgnoreIfAlreadyExists>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IgnoreChannelRules>k__BackingField;
    [CompilerGeneratedAttribute]
private string <VersionPreReleaseTag>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <WhatIf>k__BackingField;
    public string GitReference { get; public set; }
    public string GitCommit { get; public set; }
    public string ChannelNameOrId { get; public set; }
    public string VersionNumberParameterValue { get; public set; }
    public string ReleaseNotes { get; public set; }
    public bool IgnoreIfAlreadyExists { get; public set; }
    public bool IgnoreChannelRules { get; public set; }
    public string VersionPreReleaseTag { get; public set; }
    public bool WhatIf { get; public set; }
    [NullableContextAttribute("1")]
public CreateReleaseCommand(IOctopusAsyncRepositoryFactory repositoryFactory, IOctopusFileSystem fileSystem, IPackageVersionResolver versionResolver, IReleasePlanBuilder releasePlanBuilder, IOctopusClientFactory clientFactory, ICommandOutputProvider commandOutputProvider, Factory executionResourceWaiterFactory);
    [CompilerGeneratedAttribute]
public string get_GitReference();
    [CompilerGeneratedAttribute]
public void set_GitReference(string value);
    [CompilerGeneratedAttribute]
public string get_GitCommit();
    [CompilerGeneratedAttribute]
public void set_GitCommit(string value);
    [CompilerGeneratedAttribute]
public string get_ChannelNameOrId();
    [CompilerGeneratedAttribute]
public void set_ChannelNameOrId(string value);
    [CompilerGeneratedAttribute]
public string get_VersionNumberParameterValue();
    [CompilerGeneratedAttribute]
public void set_VersionNumberParameterValue(string value);
    [CompilerGeneratedAttribute]
public string get_ReleaseNotes();
    [CompilerGeneratedAttribute]
public void set_ReleaseNotes(string value);
    [CompilerGeneratedAttribute]
public bool get_IgnoreIfAlreadyExists();
    [CompilerGeneratedAttribute]
public void set_IgnoreIfAlreadyExists(bool value);
    [CompilerGeneratedAttribute]
public bool get_IgnoreChannelRules();
    [CompilerGeneratedAttribute]
public void set_IgnoreChannelRules(bool value);
    [CompilerGeneratedAttribute]
public string get_VersionPreReleaseTag();
    [CompilerGeneratedAttribute]
public void set_VersionPreReleaseTag(string value);
    [CompilerGeneratedAttribute]
public bool get_WhatIf();
    [CompilerGeneratedAttribute]
public void set_WhatIf(bool value);
    [NullableContextAttribute("1")]
[AsyncStateMachineAttribute("Octopus.Cli.Commands.Releases.CreateReleaseCommand/<ValidateParameters>d__42")]
protected virtual Task ValidateParameters();
    [NullableContextAttribute("1")]
[AsyncStateMachineAttribute("Octopus.Cli.Commands.Releases.CreateReleaseCommand/<Request>d__43")]
public sealed virtual Task Request();
    [NullableContextAttribute("1")]
[AsyncStateMachineAttribute("Octopus.Cli.Commands.Releases.CreateReleaseCommand/<GetMatchingChannel>d__44")]
private Task`1<ChannelResource> GetMatchingChannel(string channelNameOrId);
    [NullableContextAttribute("1")]
[AsyncStateMachineAttribute("Octopus.Cli.Commands.Releases.CreateReleaseCommand/<BuildReleasePlan>d__45")]
private Task`1<ReleasePlan> BuildReleasePlan();
    [NullableContextAttribute("1")]
private Task`1<bool> ServerSupportsChannels();
    [NullableContextAttribute("1")]
[AsyncStateMachineAttribute("Octopus.Cli.Commands.Releases.CreateReleaseCommand/<AutoSelectBestReleasePlanOrThrow>d__47")]
private Task`1<ReleasePlan> AutoSelectBestReleasePlanOrThrow();
    [NullableContextAttribute("1")]
[AsyncStateMachineAttribute("Octopus.Cli.Commands.Releases.CreateReleaseCommand/<ReleaseNotesFallBackToDeploymentSettings>d__48")]
private Task ReleaseNotesFallBackToDeploymentSettings();
    [NullableContextAttribute("1")]
private void ReadReleaseNotesFromFile(string value);
    public sealed virtual void PrintDefaultOutput();
    public sealed virtual void PrintJsonOutput();
    private void ValidateProjectPersistenceRequirements();
    [NullableContextAttribute("0")]
[CompilerGeneratedAttribute]
[DebuggerHiddenAttribute]
private Task <>n__0();
}
[CommandAttribute("delete-releases", "Mono.Cecil.CustomAttributeArgument[]")]
public class Octopus.Cli.Commands.Releases.DeleteReleasesCommand : ApiCommand {
    private static OctopusVersionParser OctopusVersionParser;
    private ProjectResource project;
    private HashSet`1<string> channels;
    private ResourceCollection`1<ReleaseResource> releases;
    private List`1<ReleaseResource> toDelete;
    private List`1<ReleaseResource> wouldDelete;
    [CompilerGeneratedAttribute]
private string <ProjectName>k__BackingField;
    [CompilerGeneratedAttribute]
private string <MaxVersion>k__BackingField;
    [CompilerGeneratedAttribute]
private string <MinVersion>k__BackingField;
    [CompilerGeneratedAttribute]
private List`1<string> <ChannelNames>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <WhatIf>k__BackingField;
    public string ProjectName { get; public set; }
    public string MaxVersion { get; public set; }
    public string MinVersion { get; public set; }
    public List`1<string> ChannelNames { get; }
    public bool WhatIf { get; public set; }
    public DeleteReleasesCommand(IOctopusAsyncRepositoryFactory repositoryFactory, IOctopusFileSystem fileSystem, IOctopusClientFactory clientFactory, ICommandOutputProvider commandOutputProvider);
    private static DeleteReleasesCommand();
    [CompilerGeneratedAttribute]
public string get_ProjectName();
    [CompilerGeneratedAttribute]
public void set_ProjectName(string value);
    [CompilerGeneratedAttribute]
public string get_MaxVersion();
    [CompilerGeneratedAttribute]
public void set_MaxVersion(string value);
    [CompilerGeneratedAttribute]
public string get_MinVersion();
    [CompilerGeneratedAttribute]
public void set_MinVersion(string value);
    [CompilerGeneratedAttribute]
public List`1<string> get_ChannelNames();
    [CompilerGeneratedAttribute]
public bool get_WhatIf();
    [CompilerGeneratedAttribute]
public void set_WhatIf(bool value);
    [AsyncStateMachineAttribute("Octopus.Cli.Commands.Releases.DeleteReleasesCommand/<Request>d__26")]
public sealed virtual Task Request();
    [AsyncStateMachineAttribute("Octopus.Cli.Commands.Releases.DeleteReleasesCommand/<GetChannelIds>d__27")]
private Task`1<HashSet`1<string>> GetChannelIds(ProjectResource project);
    [AsyncStateMachineAttribute("Octopus.Cli.Commands.Releases.DeleteReleasesCommand/<GetProject>d__28")]
private Task`1<ProjectResource> GetProject();
    public sealed virtual void PrintDefaultOutput();
    public sealed virtual void PrintJsonOutput();
    [CompilerGeneratedAttribute]
private void <.ctor>b__6_0(string v);
    [CompilerGeneratedAttribute]
private void <.ctor>b__6_1(string v);
    [CompilerGeneratedAttribute]
private void <.ctor>b__6_2(string v);
    [CompilerGeneratedAttribute]
private void <.ctor>b__6_3(string v);
    [CompilerGeneratedAttribute]
private void <.ctor>b__6_4(bool v);
    [CompilerGeneratedAttribute]
private bool <GetChannelIds>b__27_0(ChannelResource c);
    [CompilerGeneratedAttribute]
private <>f__AnonymousType37`2<string, bool> <PrintJsonOutput>b__30_0(ReleaseResource r);
}
[ExtensionAttribute]
public static class Octopus.Cli.Commands.Releases.Extensions : object {
    [ExtensionAttribute]
public static bool AnyEnabled(IEnumerable`1<ReleasePlanItem> items);
    [ExtensionAttribute]
public static bool IsEnabled(ReleasePlanItem item);
}
public interface Octopus.Cli.Commands.Releases.IChannelVersionRuleTester {
    public abstract virtual Task`1<ChannelVersionRuleTestResult> Test(IOctopusAsyncRepository repository, ChannelVersionRuleResource rule, string packageVersion, string feedId);
}
public interface Octopus.Cli.Commands.Releases.IPackageVersionResolver {
    public abstract virtual void AddFolder(string folderPath);
    public abstract virtual void Add(string stepNameOrPackageIdAndVersion);
    public abstract virtual void Add(string stepNameOrPackageId, string packageReferenceName, string packageVersion);
    public abstract virtual void Add(string stepNameOrPackageId, string packageVersion);
    public abstract virtual void Default(string packageVersion);
    public abstract virtual string ResolveVersion(string stepName, string packageId, string packageReferenceName);
    public abstract virtual string ResolveVersion(string stepName, string packageId);
}
public interface Octopus.Cli.Commands.Releases.IReleasePlanBuilder {
    public abstract virtual Task`1<ReleasePlan> Build(IOctopusAsyncRepository repository, ProjectResource project, ChannelResource channel, string versionPreReleaseTag, string gitReference, string gitCommit);
}
[CommandAttribute("list-releases", "Mono.Cecil.CustomAttributeArgument[]")]
public class Octopus.Cli.Commands.Releases.ListReleasesCommand : ApiCommand {
    private HashSet`1<string> projects;
    private List`1<ProjectResource> projectResources;
    private String[] projectsFilter;
    private List`1<ReleaseResource> releases;
    public ListReleasesCommand(IOctopusAsyncRepositoryFactory repositoryFactory, IOctopusFileSystem fileSystem, IOctopusClientFactory clientFactory, ICommandOutputProvider commandOutputProvider);
    [AsyncStateMachineAttribute("Octopus.Cli.Commands.Releases.ListReleasesCommand/<Request>d__5")]
public sealed virtual Task Request();
    public sealed virtual void PrintDefaultOutput();
    public sealed virtual void PrintJsonOutput();
    [CompilerGeneratedAttribute]
private void <.ctor>b__4_0(string v);
    [CompilerGeneratedAttribute]
private bool <Request>b__5_1(ReleaseResource x);
    [CompilerGeneratedAttribute]
private <>f__AnonymousType36`2<<>f__AnonymousType3`2<string, string>, IEnumerable`1<<>f__AnonymousType38`6<string, DateTimeOffset, string, string, string, string>>> <PrintJsonOutput>b__7_0(ProjectResource pr);
}
internal class Octopus.Cli.Commands.Releases.PackageKey : object {
    [CompilerGeneratedAttribute]
private string <StepNameOrPackageId>k__BackingField;
    [CompilerGeneratedAttribute]
private string <PackageReferenceName>k__BackingField;
    public string StepNameOrPackageId { get; }
    public string PackageReferenceName { get; }
    public PackageKey(string stepNameOrPackageId);
    public PackageKey(string stepNameOrPackageId, string packageReferenceName);
    [CompilerGeneratedAttribute]
public string get_StepNameOrPackageId();
    [CompilerGeneratedAttribute]
public string get_PackageReferenceName();
    public sealed virtual bool Equals(PackageKey x, PackageKey y);
    public sealed virtual int GetHashCode(PackageKey obj);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
}
public class Octopus.Cli.Commands.Releases.PackageVersionResolver : object {
    private static string WildCard;
    private static OctopusVersionParser OctopusVersionParser;
    private static Char[] Delimiters;
    private static String[] SupportedZipFilePatterns;
    private ILogger log;
    private IOctopusFileSystem fileSystem;
    private IDictionary`2<PackageKey, string> stepNameToVersion;
    private string defaultVersion;
    public PackageVersionResolver(ILogger log, IOctopusFileSystem fileSystem);
    private static PackageVersionResolver();
    public sealed virtual void AddFolder(string folderPath);
    public sealed virtual void Add(string stepNameOrPackageIdAndVersion);
    public sealed virtual void Add(string stepNameOrPackageId, string packageVersion);
    public sealed virtual void Add(string stepNameOrPackageId, string packageReferenceName, string packageVersion);
    public sealed virtual void Default(string packageVersion);
    public sealed virtual string ResolveVersion(string stepName, string packageId);
    public sealed virtual string ResolveVersion(string stepName, string packageId, string packageReferenceName);
    private bool TryReadPackageIdentity(string packageFile, PackageIdentity& packageIdentity);
    private static bool TryParseZipIdAndVersion(string filename, PackageIdentity& packageIdentity);
}
[CommandAttribute("prevent-releaseprogression", "Mono.Cecil.CustomAttributeArgument[]")]
public class Octopus.Cli.Commands.Releases.PreventReleaseProgressionCommand : ApiCommand {
    private static OctopusVersionParser OctopusVersionParser;
    private ProjectResource project;
    private ReleaseResource release;
    [CompilerGeneratedAttribute]
private string <ProjectNameOrId>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ReleaseVersionNumber>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ReasonToPrevent>k__BackingField;
    public string ProjectNameOrId { get; public set; }
    public string ReleaseVersionNumber { get; public set; }
    public string ReasonToPrevent { get; public set; }
    public PreventReleaseProgressionCommand(IOctopusClientFactory clientFactory, IOctopusAsyncRepositoryFactory repositoryFactory, IOctopusFileSystem fileSystem, ICommandOutputProvider commandOutputProvider);
    private static PreventReleaseProgressionCommand();
    [CompilerGeneratedAttribute]
public string get_ProjectNameOrId();
    [CompilerGeneratedAttribute]
public void set_ProjectNameOrId(string value);
    [CompilerGeneratedAttribute]
public string get_ReleaseVersionNumber();
    [CompilerGeneratedAttribute]
public void set_ReleaseVersionNumber(string value);
    [CompilerGeneratedAttribute]
public string get_ReasonToPrevent();
    [CompilerGeneratedAttribute]
public void set_ReasonToPrevent(string value);
    [AsyncStateMachineAttribute("Octopus.Cli.Commands.Releases.PreventReleaseProgressionCommand/<ValidateParameters>d__16")]
protected virtual Task ValidateParameters();
    [AsyncStateMachineAttribute("Octopus.Cli.Commands.Releases.PreventReleaseProgressionCommand/<Request>d__17")]
public sealed virtual Task Request();
    public sealed virtual void PrintDefaultOutput();
    public sealed virtual void PrintJsonOutput();
    [CompilerGeneratedAttribute]
private void <.ctor>b__3_0(string v);
    [CompilerGeneratedAttribute]
private void <.ctor>b__3_1(string v);
    [CompilerGeneratedAttribute]
private void <.ctor>b__3_2(string v);
    [CompilerGeneratedAttribute]
[DebuggerHiddenAttribute]
private Task <>n__0();
}
[CommandAttribute("promote-release", "Mono.Cecil.CustomAttributeArgument[]")]
public class Octopus.Cli.Commands.Releases.PromoteReleaseCommand : DeploymentCommandBase {
    private static OctopusVersionParser OctopusVersionParser;
    private ProjectResource project;
    private EnvironmentResource environment;
    private ReleaseResource release;
    [CompilerGeneratedAttribute]
private bool <UseLatestSuccessfulRelease>k__BackingField;
    [CompilerGeneratedAttribute]
private string <FromEnvironmentNameOrId>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <UpdateVariableSnapshot>k__BackingField;
    public bool UseLatestSuccessfulRelease { get; public set; }
    public string FromEnvironmentNameOrId { get; public set; }
    public bool UpdateVariableSnapshot { get; public set; }
    public PromoteReleaseCommand(IOctopusAsyncRepositoryFactory repositoryFactory, IOctopusFileSystem fileSystem, IOctopusClientFactory clientFactory, ICommandOutputProvider commandOutputProvider, Factory executionResourceWaiterFactory);
    private static PromoteReleaseCommand();
    [CompilerGeneratedAttribute]
public bool get_UseLatestSuccessfulRelease();
    [CompilerGeneratedAttribute]
public void set_UseLatestSuccessfulRelease(bool value);
    [CompilerGeneratedAttribute]
public string get_FromEnvironmentNameOrId();
    [CompilerGeneratedAttribute]
public void set_FromEnvironmentNameOrId(string value);
    [CompilerGeneratedAttribute]
public bool get_UpdateVariableSnapshot();
    [CompilerGeneratedAttribute]
public void set_UpdateVariableSnapshot(bool value);
    [AsyncStateMachineAttribute("Octopus.Cli.Commands.Releases.PromoteReleaseCommand/<ValidateParameters>d__17")]
protected virtual Task ValidateParameters();
    [AsyncStateMachineAttribute("Octopus.Cli.Commands.Releases.PromoteReleaseCommand/<Request>d__18")]
public sealed virtual Task Request();
    public sealed virtual void PrintDefaultOutput();
    public sealed virtual void PrintJsonOutput();
    [CompilerGeneratedAttribute]
private void <.ctor>b__4_0(string v);
    [CompilerGeneratedAttribute]
private void <.ctor>b__4_1(string v);
    [CompilerGeneratedAttribute]
private void <.ctor>b__4_2(string v);
    [CompilerGeneratedAttribute]
private void <.ctor>b__4_3(bool v);
    [CompilerGeneratedAttribute]
private void <.ctor>b__4_4(bool v);
    [CompilerGeneratedAttribute]
[DebuggerHiddenAttribute]
private Task <>n__0();
    [CompilerGeneratedAttribute]
private bool <Request>b__18_0(DashboardItemResource e);
    [CompilerGeneratedAttribute]
private <>f__AnonymousType41`10<string, string, <>f__AnonymousType42`2<string, string>, ReferenceCollection, ReferenceCollection, ReferenceCollection, DateTimeOffset, string, Nullable`1<DateTimeOffset>, <>f__AnonymousType10`2<string, string>> <PrintJsonOutput>b__20_0(DeploymentResource d);
}
public class Octopus.Cli.Commands.Releases.ReleasePlan : object {
    private static OctopusVersionParser OctopusVersionParser;
    private ReleasePlanItem[] packageSteps;
    private ReleasePlanItem[] scriptSteps;
    [CompilerGeneratedAttribute]
private ProjectResource <Project>k__BackingField;
    [CompilerGeneratedAttribute]
private ChannelResource <Channel>k__BackingField;
    [CompilerGeneratedAttribute]
private ReleaseTemplateResource <ReleaseTemplate>k__BackingField;
    public ProjectResource Project { get; }
    public ChannelResource Channel { get; }
    public ReleaseTemplateResource ReleaseTemplate { get; }
    public IEnumerable`1<ReleasePlanItem> PackageSteps { get; }
    public IEnumerable`1<ReleasePlanItem> UnresolvedSteps { get; }
    public ReleasePlan(ProjectResource project, ChannelResource channel, ReleaseTemplateResource releaseTemplate, DeploymentProcessResource deploymentProcess, IPackageVersionResolver versionResolver);
    private static ReleasePlan();
    [CompilerGeneratedAttribute]
public ProjectResource get_Project();
    [CompilerGeneratedAttribute]
public ChannelResource get_Channel();
    [CompilerGeneratedAttribute]
public ReleaseTemplateResource get_ReleaseTemplate();
    public IEnumerable`1<ReleasePlanItem> get_PackageSteps();
    public IEnumerable`1<ReleasePlanItem> get_UnresolvedSteps();
    public bool IsViableReleasePlan();
    public bool HasUnresolvedSteps();
    public bool HasStepsViolatingChannelVersionRules();
    public List`1<SelectedPackage> GetSelections();
    public string GetHighestVersionNumber();
    public string FormatAsTable();
    private string BuildTableWithUnnamedPackages(StringBuilder result, int nameColumnWidth, int versionColumnWidth, int sourceColumnWidth, int rulesColumnWidth);
    private string BuildTableWithNamedPackages(StringBuilder result, int nameColumnWidth, int packageNameWidth, int versionColumnWidth, int sourceColumnWidth, int rulesColumnWidth);
    public int Width(string heading, IEnumerable`1<string> inputs, int padding, int max);
    public virtual string ToString();
    public string GetActionVersionNumber(string packageStepName, string packageReferenceName);
    public bool ChannelHasAnyEnabledSteps();
}
public class Octopus.Cli.Commands.Releases.ReleasePlanBuilder : object {
    public static string GitReferenceMissingForVersionControlledProjectErrorMessage;
    private IPackageVersionResolver versionResolver;
    private IChannelVersionRuleTester versionRuleTester;
    private ICommandOutputProvider commandOutputProvider;
    private ILogger logger;
    public ReleasePlanBuilder(ILogger log, IPackageVersionResolver versionResolver, IChannelVersionRuleTester versionRuleTester, ICommandOutputProvider commandOutputProvider);
    public static string GitReferenceSuppliedForDatabaseProjectErrorMessage(string gitObjectName);
    [AsyncStateMachineAttribute("Octopus.Cli.Commands.Releases.ReleasePlanBuilder/<Build>d__7")]
public sealed virtual Task`1<ReleasePlan> Build(IOctopusAsyncRepository repository, ProjectResource project, ChannelResource channel, string versionPreReleaseTag, string gitReference, string gitCommit);
    [AsyncStateMachineAttribute("Octopus.Cli.Commands.Releases.ReleasePlanBuilder/<BuildReleaseFromVersionControl>d__8")]
private Task`1<ReleasePlan> BuildReleaseFromVersionControl(IOctopusAsyncRepository repository, ProjectResource project, ChannelResource channel, string versionPreReleaseTag, string gitReference, string gitCommit);
    [AsyncStateMachineAttribute("Octopus.Cli.Commands.Releases.ReleasePlanBuilder/<BuildReleaseFromDatabase>d__9")]
private Task`1<ReleasePlan> BuildReleaseFromDatabase(IOctopusAsyncRepository repository, ProjectResource project, ChannelResource channel, string versionPreReleaseTag);
    [AsyncStateMachineAttribute("Octopus.Cli.Commands.Releases.ReleasePlanBuilder/<Build>d__10")]
private Task`1<ReleasePlan> Build(IOctopusAsyncRepository repository, ProjectResource project, ChannelResource channel, string versionPreReleaseTag, ReleaseTemplateResource releaseTemplate, DeploymentProcessResource deploymentProcess);
    [AsyncStateMachineAttribute("Octopus.Cli.Commands.Releases.ReleasePlanBuilder/<LoadFeedsForSteps>d__11")]
private Task`1<Dictionary`2<string, FeedResource>> LoadFeedsForSteps(IOctopusAsyncRepository repository, ProjectResource project, IEnumerable`1<ReleasePlanItem> steps);
    private IDictionary`2<string, object> BuildChannelVersionFilters(string stepName, string packageReferenceName, ChannelResource channel);
}
public class Octopus.Cli.Commands.Releases.ReleasePlanItem : object {
    [CompilerGeneratedAttribute]
private string <ActionName>k__BackingField;
    [CompilerGeneratedAttribute]
private string <PackageReferenceName>k__BackingField;
    [CompilerGeneratedAttribute]
private string <PackageId>k__BackingField;
    [CompilerGeneratedAttribute]
private string <PackageFeedId>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsResolveable>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Version>k__BackingField;
    [CompilerGeneratedAttribute]
private string <VersionSource>k__BackingField;
    [CompilerGeneratedAttribute]
private ChannelVersionRuleTestResult <ChannelVersionRuleTestResult>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsDisabled>k__BackingField;
    public string ActionName { get; }
    public string PackageReferenceName { get; public set; }
    public string PackageId { get; }
    public string PackageFeedId { get; }
    public bool IsResolveable { get; }
    public string Version { get; private set; }
    public string VersionSource { get; private set; }
    public ChannelVersionRuleTestResult ChannelVersionRuleTestResult { get; private set; }
    public bool IsDisabled { get; public set; }
    public ReleasePlanItem(string actionName, string packageReferenceName, string packageId, string packageFeedId, bool isResolveable, string userSpecifiedVersion);
    [CompilerGeneratedAttribute]
public string get_ActionName();
    [CompilerGeneratedAttribute]
public string get_PackageReferenceName();
    [CompilerGeneratedAttribute]
public void set_PackageReferenceName(string value);
    [CompilerGeneratedAttribute]
public string get_PackageId();
    [CompilerGeneratedAttribute]
public string get_PackageFeedId();
    [CompilerGeneratedAttribute]
public bool get_IsResolveable();
    [CompilerGeneratedAttribute]
public string get_Version();
    [CompilerGeneratedAttribute]
private void set_Version(string value);
    [CompilerGeneratedAttribute]
public string get_VersionSource();
    [CompilerGeneratedAttribute]
private void set_VersionSource(string value);
    [CompilerGeneratedAttribute]
public ChannelVersionRuleTestResult get_ChannelVersionRuleTestResult();
    [CompilerGeneratedAttribute]
private void set_ChannelVersionRuleTestResult(ChannelVersionRuleTestResult value);
    [CompilerGeneratedAttribute]
public bool get_IsDisabled();
    [CompilerGeneratedAttribute]
public void set_IsDisabled(bool value);
    public void SetVersionFromLatest(string version);
    public void SetChannelVersionRuleTestResult(ChannelVersionRuleTestResult result);
}
[CommandAttribute("run-runbook", "Mono.Cecil.CustomAttributeArgument[]")]
public class Octopus.Cli.Commands.Runbooks.RunRunbookCommand : ApiCommand {
    private Factory executionResourceWaiterFactory;
    private Dictionary`2<string, string> Variables;
    [CompilerGeneratedAttribute]
private RunbookRunResource[] <RunbookRuns>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ProjectNameOrId>k__BackingField;
    [CompilerGeneratedAttribute]
private string <RunbookNameOrId>k__BackingField;
    [CompilerGeneratedAttribute]
private List`1<string> <EnvironmentNamesOrIds>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Snapshot>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <ForcePackageDownload>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <GuidedFailure>k__BackingField;
    [CompilerGeneratedAttribute]
private List`1<string> <IncludedMachineIds>k__BackingField;
    [CompilerGeneratedAttribute]
private List`1<string> <ExcludedMachineIds>k__BackingField;
    [CompilerGeneratedAttribute]
private List`1<string> <StepNamesToSkip>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <UseDefaultSnapshot>k__BackingField;
    [CompilerGeneratedAttribute]
private List`1<string> <TenantNamesOrIds>k__BackingField;
    [CompilerGeneratedAttribute]
private List`1<string> <TenantTagNames>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<DateTimeOffset> <RunAt>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<DateTimeOffset> <NoRunAfter>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <WaitForRun>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <Progress>k__BackingField;
    [CompilerGeneratedAttribute]
private TimeSpan <RunTimeout>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <CancelOnTimeout>k__BackingField;
    [CompilerGeneratedAttribute]
private TimeSpan <RunCheckSleepCycle>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <NoRawLog>k__BackingField;
    [CompilerGeneratedAttribute]
private string <RawLogFile>k__BackingField;
    private RunbookRunResource[] RunbookRuns { get; private set; }
    private string ProjectNameOrId { get; private set; }
    private string RunbookNameOrId { get; private set; }
    private List`1<string> EnvironmentNamesOrIds { get; }
    private string Snapshot { get; private set; }
    private bool ForcePackageDownload { get; private set; }
    private bool GuidedFailure { get; private set; }
    private List`1<string> IncludedMachineIds { get; }
    private List`1<string> ExcludedMachineIds { get; }
    private List`1<string> StepNamesToSkip { get; }
    private bool UseDefaultSnapshot { get; }
    private List`1<string> TenantNamesOrIds { get; }
    private List`1<string> TenantTagNames { get; }
    private Nullable`1<DateTimeOffset> RunAt { get; private set; }
    private Nullable`1<DateTimeOffset> NoRunAfter { get; private set; }
    private bool WaitForRun { get; private set; }
    private bool Progress { get; private set; }
    private TimeSpan RunTimeout { get; private set; }
    private bool CancelOnTimeout { get; private set; }
    private TimeSpan RunCheckSleepCycle { get; private set; }
    private bool NoRawLog { get; private set; }
    private string RawLogFile { get; private set; }
    public RunRunbookCommand(IOctopusAsyncRepositoryFactory repositoryFactory, IOctopusFileSystem fileSystem, IOctopusClientFactory clientFactory, ICommandOutputProvider commandOutputProvider, Factory executionResourceWaiterFactory);
    [CompilerGeneratedAttribute]
private RunbookRunResource[] get_RunbookRuns();
    [CompilerGeneratedAttribute]
private void set_RunbookRuns(RunbookRunResource[] value);
    [CompilerGeneratedAttribute]
private string get_ProjectNameOrId();
    [CompilerGeneratedAttribute]
private void set_ProjectNameOrId(string value);
    [CompilerGeneratedAttribute]
private string get_RunbookNameOrId();
    [CompilerGeneratedAttribute]
private void set_RunbookNameOrId(string value);
    [CompilerGeneratedAttribute]
private List`1<string> get_EnvironmentNamesOrIds();
    [CompilerGeneratedAttribute]
private string get_Snapshot();
    [CompilerGeneratedAttribute]
private void set_Snapshot(string value);
    [CompilerGeneratedAttribute]
private bool get_ForcePackageDownload();
    [CompilerGeneratedAttribute]
private void set_ForcePackageDownload(bool value);
    [CompilerGeneratedAttribute]
private bool get_GuidedFailure();
    [CompilerGeneratedAttribute]
private void set_GuidedFailure(bool value);
    [CompilerGeneratedAttribute]
private List`1<string> get_IncludedMachineIds();
    [CompilerGeneratedAttribute]
private List`1<string> get_ExcludedMachineIds();
    [CompilerGeneratedAttribute]
private List`1<string> get_StepNamesToSkip();
    [CompilerGeneratedAttribute]
private bool get_UseDefaultSnapshot();
    [CompilerGeneratedAttribute]
private List`1<string> get_TenantNamesOrIds();
    [CompilerGeneratedAttribute]
private List`1<string> get_TenantTagNames();
    [CompilerGeneratedAttribute]
private Nullable`1<DateTimeOffset> get_RunAt();
    [CompilerGeneratedAttribute]
private void set_RunAt(Nullable`1<DateTimeOffset> value);
    [CompilerGeneratedAttribute]
private Nullable`1<DateTimeOffset> get_NoRunAfter();
    [CompilerGeneratedAttribute]
private void set_NoRunAfter(Nullable`1<DateTimeOffset> value);
    [CompilerGeneratedAttribute]
private bool get_WaitForRun();
    [CompilerGeneratedAttribute]
private void set_WaitForRun(bool value);
    [CompilerGeneratedAttribute]
private bool get_Progress();
    [CompilerGeneratedAttribute]
private void set_Progress(bool value);
    [CompilerGeneratedAttribute]
private TimeSpan get_RunTimeout();
    [CompilerGeneratedAttribute]
private void set_RunTimeout(TimeSpan value);
    [CompilerGeneratedAttribute]
private bool get_CancelOnTimeout();
    [CompilerGeneratedAttribute]
private void set_CancelOnTimeout(bool value);
    [CompilerGeneratedAttribute]
private TimeSpan get_RunCheckSleepCycle();
    [CompilerGeneratedAttribute]
private void set_RunCheckSleepCycle(TimeSpan value);
    [CompilerGeneratedAttribute]
private bool get_NoRawLog();
    [CompilerGeneratedAttribute]
private void set_NoRawLog(bool value);
    [CompilerGeneratedAttribute]
private string get_RawLogFile();
    [CompilerGeneratedAttribute]
private void set_RawLogFile(string value);
    [AsyncStateMachineAttribute("Octopus.Cli.Commands.Runbooks.RunRunbookCommand/<Request>d__84")]
public sealed virtual Task Request();
    [AsyncStateMachineAttribute("Octopus.Cli.Commands.Runbooks.RunRunbookCommand/<RetrieveTenants>d__85")]
private Task`1<String[]> RetrieveTenants();
    protected virtual Task ValidateParameters();
    private static void CheckForIntersection(IEnumerable`1<string> included, IEnumerable`1<string> excluded);
    private void LogScheduledDeployment();
    private void ParseVariable(string variable);
    public sealed virtual void PrintDefaultOutput();
    public sealed virtual void PrintJsonOutput();
    [CompilerGeneratedAttribute]
private void <.ctor>b__2_0(string v);
    [CompilerGeneratedAttribute]
private void <.ctor>b__2_1(string v);
    [CompilerGeneratedAttribute]
private void <.ctor>b__2_2(string v);
    [CompilerGeneratedAttribute]
private void <.ctor>b__2_3(string v);
    [CompilerGeneratedAttribute]
private void <.ctor>b__2_4(bool v);
    [CompilerGeneratedAttribute]
private void <.ctor>b__2_5(bool v);
    [CompilerGeneratedAttribute]
private void <.ctor>b__2_6(string v);
    [CompilerGeneratedAttribute]
private void <.ctor>b__2_7(string v);
    [CompilerGeneratedAttribute]
private void <.ctor>b__2_8(string v);
    [CompilerGeneratedAttribute]
private void <.ctor>b__2_9(string v);
    [CompilerGeneratedAttribute]
private void <.ctor>b__2_10(string v);
    [CompilerGeneratedAttribute]
private void <.ctor>b__2_11(DateTimeOffset v);
    [CompilerGeneratedAttribute]
private void <.ctor>b__2_12(DateTimeOffset v);
    [CompilerGeneratedAttribute]
private void <.ctor>b__2_13(bool v);
    [CompilerGeneratedAttribute]
private void <.ctor>b__2_14(bool v);
    [CompilerGeneratedAttribute]
private void <.ctor>b__2_15(TimeSpan v);
    [CompilerGeneratedAttribute]
private void <.ctor>b__2_16(bool v);
    [CompilerGeneratedAttribute]
private void <.ctor>b__2_17(TimeSpan v);
    [CompilerGeneratedAttribute]
private void <.ctor>b__2_18(bool v);
    [CompilerGeneratedAttribute]
private void <.ctor>b__2_19(string v);
}
[CommandAttribute("list-tenants", "Mono.Cecil.CustomAttributeArgument[]")]
public class Octopus.Cli.Commands.Tenant.ListTenantsCommand : ApiCommand {
    private List`1<TenantResource> tenants;
    public ListTenantsCommand(IOctopusAsyncRepositoryFactory repositoryFactory, IOctopusFileSystem fileSystem, IOctopusClientFactory clientFactory, ICommandOutputProvider commandOutputProvider);
    [AsyncStateMachineAttribute("Octopus.Cli.Commands.Tenant.ListTenantsCommand/<Request>d__2")]
public sealed virtual Task Request();
    public sealed virtual void PrintDefaultOutput();
    public sealed virtual void PrintJsonOutput();
}
[CommandAttribute("version", "Mono.Cecil.CustomAttributeArgument[]")]
public class Octopus.Cli.Commands.VersionCommand : CommandBase {
    public VersionCommand(ICommandOutputProvider commandOutputProvider);
    public virtual Task Execute(String[] commandLineArgs);
}
[CommandAttribute("clean-workerpool", "Mono.Cecil.CustomAttributeArgument[]")]
public class Octopus.Cli.Commands.WorkerPool.CleanWorkerPoolCommand : ApiCommand {
    private HashSet`1<MachineModelHealthStatus> healthStatuses;
    private List`1<MachineResult> commandResults;
    private string poolName;
    private Nullable`1<bool> isDisabled;
    private Nullable`1<bool> isCalamariOutdated;
    private Nullable`1<bool> isTentacleOutdated;
    private WorkerPoolResource workerPoolResource;
    private IEnumerable`1<WorkerResource> machines;
    public CleanWorkerPoolCommand(IOctopusAsyncRepositoryFactory repositoryFactory, IOctopusFileSystem fileSystem, IOctopusClientFactory clientFactory, ICommandOutputProvider commandOutputProvider);
    [AsyncStateMachineAttribute("Octopus.Cli.Commands.WorkerPool.CleanWorkerPoolCommand/<Request>d__10")]
public sealed virtual Task Request();
    [AsyncStateMachineAttribute("Octopus.Cli.Commands.WorkerPool.CleanWorkerPoolCommand/<CleanUpPool>d__11")]
private Task CleanUpPool(List`1<WorkerResource> filteredMachines, WorkerPoolResource poolResource);
    [AsyncStateMachineAttribute("Octopus.Cli.Commands.WorkerPool.CleanWorkerPoolCommand/<FilterByState>d__12")]
private Task`1<IEnumerable`1<WorkerResource>> FilterByState(IEnumerable`1<WorkerResource> workers);
    private string GetStateFilterDescription();
    private Task`1<List`1<WorkerResource>> FilterByWorkerPool(WorkerPoolResource poolResource);
    [AsyncStateMachineAttribute("Octopus.Cli.Commands.WorkerPool.CleanWorkerPoolCommand/<GetWorkerPool>d__15")]
private Task`1<WorkerPoolResource> GetWorkerPool();
    public sealed virtual void PrintDefaultOutput();
    public sealed virtual void PrintJsonOutput();
    [CompilerGeneratedAttribute]
private void <.ctor>b__9_0(string v);
    [CompilerGeneratedAttribute]
private void <.ctor>b__9_1(MachineModelHealthStatus v);
    [CompilerGeneratedAttribute]
private void <.ctor>b__9_2(bool v);
    [CompilerGeneratedAttribute]
private void <.ctor>b__9_3(bool v);
    [CompilerGeneratedAttribute]
private void <.ctor>b__9_4(bool v);
    [CompilerGeneratedAttribute]
private bool <FilterByState>b__12_0(WorkerResource m);
    [CompilerGeneratedAttribute]
private bool <FilterByState>b__12_1(WorkerResource m);
    [CompilerGeneratedAttribute]
private bool <FilterByState>b__12_2(WorkerResource m);
    [CompilerGeneratedAttribute]
private <>f__AnonymousType16`3<<>f__AnonymousType17`3<string, string, MachineModelStatus>, <>f__AnonymousType3`2<string, string>, string> <PrintJsonOutput>b__17_0(MachineResult x);
}
[CommandAttribute("create-workerpool", "Mono.Cecil.CustomAttributeArgument[]")]
public class Octopus.Cli.Commands.WorkerPool.CreateWorkerPoolCommand : ApiCommand {
    private WorkerPoolResource pool;
    [CompilerGeneratedAttribute]
private string <WorkerPoolName>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IgnoreIfExists>k__BackingField;
    public string WorkerPoolName { get; public set; }
    public bool IgnoreIfExists { get; public set; }
    public CreateWorkerPoolCommand(IOctopusAsyncRepositoryFactory repositoryFactory, IOctopusFileSystem fileSystem, IOctopusClientFactory clientFactory, ICommandOutputProvider commandOutputProvider);
    [CompilerGeneratedAttribute]
public string get_WorkerPoolName();
    [CompilerGeneratedAttribute]
public void set_WorkerPoolName(string value);
    [CompilerGeneratedAttribute]
public bool get_IgnoreIfExists();
    [CompilerGeneratedAttribute]
public void set_IgnoreIfExists(bool value);
    [AsyncStateMachineAttribute("Octopus.Cli.Commands.WorkerPool.CreateWorkerPoolCommand/<Request>d__10")]
public sealed virtual Task Request();
    public sealed virtual void PrintDefaultOutput();
    public sealed virtual void PrintJsonOutput();
    [CompilerGeneratedAttribute]
private void <.ctor>b__1_0(string v);
    [CompilerGeneratedAttribute]
private void <.ctor>b__1_1(bool v);
}
[CommandAttribute("list-workerpools", "Mono.Cecil.CustomAttributeArgument[]")]
public class Octopus.Cli.Commands.WorkerPool.ListWorkerPoolsCommand : ApiCommand {
    private List`1<WorkerPoolResource> pools;
    public ListWorkerPoolsCommand(IOctopusAsyncRepositoryFactory repositoryFactory, IOctopusFileSystem fileSystem, IOctopusClientFactory clientFactory, ICommandOutputProvider commandOutputProvider);
    [AsyncStateMachineAttribute("Octopus.Cli.Commands.WorkerPool.ListWorkerPoolsCommand/<Request>d__2")]
public sealed virtual Task Request();
    public sealed virtual void PrintDefaultOutput();
    public sealed virtual void PrintJsonOutput();
}
public class Octopus.Cli.Diagnostics.LoggingModule : Module {
    protected virtual void Load(ContainerBuilder builder);
}
[ExtensionAttribute]
internal static class Octopus.Cli.Diagnostics.LogUtilities : object {
    private static Dictionary`2<string, LogEventLevel> Lookup;
    [CompilerGeneratedAttribute]
private static LoggingLevelSwitch <LevelSwitch>k__BackingField;
    public static LoggingLevelSwitch LevelSwitch { get; }
    public static LogEventLevel DefaultLogLevel { get; }
    private static LogUtilities();
    [CompilerGeneratedAttribute]
public static LoggingLevelSwitch get_LevelSwitch();
    public static LogEventLevel get_DefaultLogLevel();
    public static LogEventLevel ParseLogLevel(string value);
    [ExtensionAttribute]
public static void AddLogLevelOptions(OptionSet options);
    private static string GetValidOptions();
}
[ExtensionAttribute]
public static class Octopus.Cli.Extensions.AttributeExtensions : object {
    [ExtensionAttribute]
public static TValue GetAttributeValue(Type type, Func`2<TAttribute, TValue> valueSelector);
}
[ExtensionAttribute]
public static class Octopus.Cli.Extensions.TimeSpanExtensions : object {
    [ExtensionAttribute]
public static string Friendly(TimeSpan time);
}
[ExtensionAttribute]
public static class Octopus.Cli.Infrastructure.AutofacExtensions : object {
    [ExtensionAttribute]
public static IRegistrationBuilder`3<TCommand, ConcreteReflectionActivatorData, SingleRegistrationStyle> RegisterCommand(ContainerBuilder builder, string name, string description, String[] aliases);
}
public class Octopus.Cli.Infrastructure.CouldNotFindException : CommandException {
    public CouldNotFindException(string what);
    public CouldNotFindException(string what, string quotedName);
    public CouldNotFindException(string resourceTypeDisplayName, string nameOrId, string enclosingContextDescription);
    public CouldNotFindException(string resourceTypeDisplayName, ICollection`1<string> missingNamesOrIds, string enclosingContextDescription);
}
public class Octopus.Cli.Model.ChannelVersionRuleTestResult : Resource {
    private static string Pass;
    private static string Fail;
    [CompilerGeneratedAttribute]
private IEnumerable`1<string> <Errors>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <SatisfiesVersionRange>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <SatisfiesPreReleaseTag>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsNull>k__BackingField;
    public IEnumerable`1<string> Errors { get; public set; }
    public bool SatisfiesVersionRange { get; public set; }
    public bool SatisfiesPreReleaseTag { get; public set; }
    public bool IsSatisfied { get; }
    public bool IsNull { get; private set; }
    [CompilerGeneratedAttribute]
public IEnumerable`1<string> get_Errors();
    [CompilerGeneratedAttribute]
public void set_Errors(IEnumerable`1<string> value);
    [CompilerGeneratedAttribute]
public bool get_SatisfiesVersionRange();
    [CompilerGeneratedAttribute]
public void set_SatisfiesVersionRange(bool value);
    [CompilerGeneratedAttribute]
public bool get_SatisfiesPreReleaseTag();
    [CompilerGeneratedAttribute]
public void set_SatisfiesPreReleaseTag(bool value);
    public bool get_IsSatisfied();
    [CompilerGeneratedAttribute]
public bool get_IsNull();
    [CompilerGeneratedAttribute]
private void set_IsNull(bool value);
    public string ToSummaryString();
    public static ChannelVersionRuleTestResult Failed();
    public static ChannelVersionRuleTestResult Null();
}
public class Octopus.Cli.Model.DeploymentRelatedResources : object {
    [CompilerGeneratedAttribute]
private ChannelResource <ChannelResource>k__BackingField;
    [CompilerGeneratedAttribute]
private ReleaseResource <ReleaseResource>k__BackingField;
    public ChannelResource ChannelResource { get; public set; }
    public ReleaseResource ReleaseResource { get; public set; }
    [CompilerGeneratedAttribute]
public ChannelResource get_ChannelResource();
    [CompilerGeneratedAttribute]
public void set_ChannelResource(ChannelResource value);
    [CompilerGeneratedAttribute]
public ReleaseResource get_ReleaseResource();
    [CompilerGeneratedAttribute]
public void set_ReleaseResource(ReleaseResource value);
}
public class Octopus.Cli.Model.ProjectExport : object {
    [CompilerGeneratedAttribute]
private ProjectResource <Project>k__BackingField;
    [CompilerGeneratedAttribute]
private ReferenceDataItem <ProjectGroup>k__BackingField;
    [CompilerGeneratedAttribute]
private VariableSetResource <VariableSet>k__BackingField;
    [CompilerGeneratedAttribute]
private List`1<ReferenceDataItem> <NuGetFeeds>k__BackingField;
    [CompilerGeneratedAttribute]
private List`1<ReferenceDataItem> <ActionTemplates>k__BackingField;
    [CompilerGeneratedAttribute]
private DeploymentProcessResource <DeploymentProcess>k__BackingField;
    [CompilerGeneratedAttribute]
private List`1<ReferenceDataItem> <LibraryVariableSets>k__BackingField;
    [CompilerGeneratedAttribute]
private ReferenceDataItem <Lifecycle>k__BackingField;
    [CompilerGeneratedAttribute]
private List`1<ChannelResource> <Channels>k__BackingField;
    [CompilerGeneratedAttribute]
private List`1<ReferenceDataItem> <ChannelLifecycles>k__BackingField;
    [CompilerGeneratedAttribute]
private List`1<ReferenceDataItem> <WorkerPools>k__BackingField;
    public ProjectResource Project { get; public set; }
    public ReferenceDataItem ProjectGroup { get; public set; }
    public VariableSetResource VariableSet { get; public set; }
    public List`1<ReferenceDataItem> NuGetFeeds { get; public set; }
    public List`1<ReferenceDataItem> ActionTemplates { get; public set; }
    public DeploymentProcessResource DeploymentProcess { get; public set; }
    public List`1<ReferenceDataItem> LibraryVariableSets { get; public set; }
    public ReferenceDataItem Lifecycle { get; public set; }
    public List`1<ChannelResource> Channels { get; public set; }
    public List`1<ReferenceDataItem> ChannelLifecycles { get; public set; }
    public List`1<ReferenceDataItem> WorkerPools { get; public set; }
    [CompilerGeneratedAttribute]
public ProjectResource get_Project();
    [CompilerGeneratedAttribute]
public void set_Project(ProjectResource value);
    [CompilerGeneratedAttribute]
public ReferenceDataItem get_ProjectGroup();
    [CompilerGeneratedAttribute]
public void set_ProjectGroup(ReferenceDataItem value);
    [CompilerGeneratedAttribute]
public VariableSetResource get_VariableSet();
    [CompilerGeneratedAttribute]
public void set_VariableSet(VariableSetResource value);
    [CompilerGeneratedAttribute]
public List`1<ReferenceDataItem> get_NuGetFeeds();
    [CompilerGeneratedAttribute]
public void set_NuGetFeeds(List`1<ReferenceDataItem> value);
    [CompilerGeneratedAttribute]
public List`1<ReferenceDataItem> get_ActionTemplates();
    [CompilerGeneratedAttribute]
public void set_ActionTemplates(List`1<ReferenceDataItem> value);
    [CompilerGeneratedAttribute]
public DeploymentProcessResource get_DeploymentProcess();
    [CompilerGeneratedAttribute]
public void set_DeploymentProcess(DeploymentProcessResource value);
    [CompilerGeneratedAttribute]
public List`1<ReferenceDataItem> get_LibraryVariableSets();
    [CompilerGeneratedAttribute]
public void set_LibraryVariableSets(List`1<ReferenceDataItem> value);
    [CompilerGeneratedAttribute]
public ReferenceDataItem get_Lifecycle();
    [CompilerGeneratedAttribute]
public void set_Lifecycle(ReferenceDataItem value);
    [CompilerGeneratedAttribute]
public List`1<ChannelResource> get_Channels();
    [CompilerGeneratedAttribute]
public void set_Channels(List`1<ChannelResource> value);
    [CompilerGeneratedAttribute]
public List`1<ReferenceDataItem> get_ChannelLifecycles();
    [CompilerGeneratedAttribute]
public void set_ChannelLifecycles(List`1<ReferenceDataItem> value);
    [CompilerGeneratedAttribute]
public List`1<ReferenceDataItem> get_WorkerPools();
    [CompilerGeneratedAttribute]
public void set_WorkerPools(List`1<ReferenceDataItem> value);
}
public class Octopus.Cli.Repositories.ActionTemplateRepository : object {
    private IOctopusAsyncClient client;
    public ActionTemplateRepository(IOctopusAsyncClient client);
    [AsyncStateMachineAttribute("Octopus.Cli.Repositories.ActionTemplateRepository/<Get>d__2")]
public sealed virtual Task`1<ActionTemplateResource> Get(string idOrHref);
    [AsyncStateMachineAttribute("Octopus.Cli.Repositories.ActionTemplateRepository/<Create>d__3")]
public sealed virtual Task`1<ActionTemplateResource> Create(ActionTemplateResource resource);
    public sealed virtual Task`1<ActionTemplateResource> Modify(ActionTemplateResource resource);
    [AsyncStateMachineAttribute("Octopus.Cli.Repositories.ActionTemplateRepository/<FindByName>d__5")]
public sealed virtual Task`1<ActionTemplateResource> FindByName(string name);
}
public interface Octopus.Cli.Repositories.IActionTemplateRepository {
    public abstract virtual Task`1<ActionTemplateResource> Get(string idOrHref);
    public abstract virtual Task`1<ActionTemplateResource> Create(ActionTemplateResource resource);
    public abstract virtual Task`1<ActionTemplateResource> Modify(ActionTemplateResource resource);
    public abstract virtual Task`1<ActionTemplateResource> FindByName(string name);
}
public interface Octopus.Cli.Repositories.IOctopusAsyncRepositoryFactory {
    public abstract virtual IOctopusAsyncRepository CreateRepository(IOctopusAsyncClient client, RepositoryScope scope);
}
public class Octopus.Cli.Repositories.OctopusRepositoryCommonQueries : object {
    private static OctopusVersionParser OctopusVersionParser;
    private IOctopusAsyncRepository repository;
    private ICommandOutputProvider commandOutputProvider;
    public OctopusRepositoryCommonQueries(IOctopusAsyncRepository repository, ICommandOutputProvider commandOutputProvider);
    private static OctopusRepositoryCommonQueries();
    [AsyncStateMachineAttribute("Octopus.Cli.Repositories.OctopusRepositoryCommonQueries/<GetProjectByName>d__4")]
public Task`1<ProjectResource> GetProjectByName(string projectName);
    [AsyncStateMachineAttribute("Octopus.Cli.Repositories.OctopusRepositoryCommonQueries/<GetEnvironmentByName>d__5")]
public Task`1<EnvironmentResource> GetEnvironmentByName(string environmentName);
    [AsyncStateMachineAttribute("Octopus.Cli.Repositories.OctopusRepositoryCommonQueries/<GetReleaseByVersion>d__6")]
public Task`1<ReleaseResource> GetReleaseByVersion(string versionNumber, ProjectResource project, ChannelResource channel);
    [AsyncStateMachineAttribute("Octopus.Cli.Repositories.OctopusRepositoryCommonQueries/<FindTenants>d__7")]
public Task`1<IReadOnlyList`1<TenantResource>> FindTenants(IReadOnlyList`1<string> tenantNames, IReadOnlyList`1<string> tenantTags);
    [AsyncStateMachineAttribute("Octopus.Cli.Repositories.OctopusRepositoryCommonQueries/<FindTenantsByName>d__8")]
private Task`1<IEnumerable`1<TenantResource>> FindTenantsByName(IReadOnlyList`1<string> tenantNames);
    [AsyncStateMachineAttribute("Octopus.Cli.Repositories.OctopusRepositoryCommonQueries/<FindTenantsByTags>d__9")]
private Task`1<IEnumerable`1<TenantResource>> FindTenantsByTags(IReadOnlyList`1<string> tenantTags);
}
public class Octopus.Cli.Repositories.OctopusRepositoryFactory : object {
    public sealed virtual IOctopusAsyncRepository CreateRepository(IOctopusAsyncClient client, RepositoryScope scope);
}
[ExtensionAttribute]
public static class Octopus.Cli.Util.AssemblyExtensions : object {
    [ExtensionAttribute]
public static string GetInformationalVersion(Type type);
    public static string GetExecutableName();
}
public class Octopus.Cli.Util.CliSerilogLogProvider : object {
    [CompilerGeneratedAttribute]
private ILogger <Logger>k__BackingField;
    [CompilerGeneratedAttribute]
private static bool <PrintMessages>k__BackingField;
    public ILogger Logger { get; public set; }
    public static bool PrintMessages { get; public set; }
    public CliSerilogLogProvider(ILogger logger);
    [CompilerGeneratedAttribute]
public ILogger get_Logger();
    [CompilerGeneratedAttribute]
public void set_Logger(ILogger value);
    [CompilerGeneratedAttribute]
public static bool get_PrintMessages();
    [CompilerGeneratedAttribute]
public static void set_PrintMessages(bool value);
    public sealed virtual Logger GetLogger(string name);
    public sealed virtual IDisposable OpenNestedContext(string message);
    public sealed virtual IDisposable OpenMappedContext(string key, string value);
}
public class Octopus.Cli.Util.CommandOutputJsonSerializer : object {
    public sealed virtual string SerializeObjectToJson(object o);
}
[ExtensionAttribute]
public static class Octopus.Cli.Util.CommandOutputProviderExtensionMethods : object {
    private static Dictionary`2<string, string> Escapes;
    private static bool serviceMessagesEnabled;
    private static AutomationEnvironment buildEnvironment;
    internal static AutomationEnvironmentProvider automationEnvironmentProvider;
    private static CommandOutputProviderExtensionMethods();
    public static bool IsKnownEnvironment();
    [ExtensionAttribute]
public static void EnableServiceMessages(ICommandOutputProvider commandOutputProvider);
    [ExtensionAttribute]
public static void DisableServiceMessages(ICommandOutputProvider commandOutputProvider);
    [ExtensionAttribute]
public static bool ServiceMessagesEnabled(ICommandOutputProvider commandOutputProvider);
    [ExtensionAttribute]
public static bool IsVSTS(ICommandOutputProvider commandOutputProvider);
    [ExtensionAttribute]
public static void ServiceMessage(ICommandOutputProvider commandOutputProvider, string messageName, string value);
    [ExtensionAttribute]
public static void ServiceMessage(ICommandOutputProvider commandOutputProvider, string messageName, IDictionary`2<string, string> values);
    [ExtensionAttribute]
public static void ServiceMessage(ICommandOutputProvider commandOutputProvider, string messageName, object values);
    [ExtensionAttribute]
public static void TfsServiceMessage(ICommandOutputProvider commandOutputProvider, string serverBaseUrl, ProjectResource project, ReleaseResource release);
    private static string EscapeValue(string value);
}
public static class Octopus.Cli.Util.CommandSuggester : object {
    public static IEnumerable`1<string> SuggestCommandsFor(String[] words, IReadOnlyDictionary`2<string, String[]> completionItems);
    private static IEnumerable`1<string> GetSubCommandSuggestions(IReadOnlyDictionary`2<string, String[]> completionItems, string searchTerm);
    private static bool ZeroOrOneSubCommands(String[] words, List`1<string> allSubCommands);
    private static IEnumerable`1<string> GetSubCommandOptionSuggestions(IReadOnlyDictionary`2<string, String[]> completionItems, string subCommandName, string searchTerm);
    private static IEnumerable`1<string> GetBaseOptionSuggestions(IReadOnlyDictionary`2<string, String[]> completionItems, string searchTerm);
    private static bool IsSubCommand(string arg, List`1<string> subCommandList);
}
public class Octopus.Cli.Util.DeletionOptions : object {
    [CompilerGeneratedAttribute]
private int <RetryAttempts>k__BackingField;
    [CompilerGeneratedAttribute]
private int <SleepBetweenAttemptsMilliseconds>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <ThrowOnFailure>k__BackingField;
    public static DeletionOptions TryThreeTimes { get; }
    public static DeletionOptions TryThreeTimesIgnoreFailure { get; }
    public int RetryAttempts { get; private set; }
    public int SleepBetweenAttemptsMilliseconds { get; }
    public bool ThrowOnFailure { get; private set; }
    public static DeletionOptions get_TryThreeTimes();
    public static DeletionOptions get_TryThreeTimesIgnoreFailure();
    [CompilerGeneratedAttribute]
public int get_RetryAttempts();
    [CompilerGeneratedAttribute]
private void set_RetryAttempts(int value);
    [CompilerGeneratedAttribute]
public int get_SleepBetweenAttemptsMilliseconds();
    [CompilerGeneratedAttribute]
public bool get_ThrowOnFailure();
    [CompilerGeneratedAttribute]
private void set_ThrowOnFailure(bool value);
    public sealed virtual bool Equals(DeletionOptions other);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
    public static bool op_Equality(DeletionOptions left, DeletionOptions right);
    public static bool op_Inequality(DeletionOptions left, DeletionOptions right);
}
[ExtensionAttribute]
public static class Octopus.Cli.Util.FeatureDetectionExtensions : object {
    [AsyncStateMachineAttribute("Octopus.Cli.Util.FeatureDetectionExtensions/<SupportsChannels>d__0")]
[ExtensionAttribute]
public static Task`1<bool> SupportsChannels(IOctopusAsyncRepository repository);
    [AsyncStateMachineAttribute("Octopus.Cli.Util.FeatureDetectionExtensions/<SupportsTenants>d__1")]
[ExtensionAttribute]
public static Task`1<bool> SupportsTenants(IOctopusAsyncRepository repository);
    [ExtensionAttribute]
public static bool UsePostForChannelVersionRuleTest(RootResource source);
    [ExtensionAttribute]
public static bool HasProjectDeploymentSettingsSeparation(RootResource source);
    [ExtensionAttribute]
public static bool UseIdsForConfigAsCode(RootResource source);
}
public static class Octopus.Cli.Util.FeedCustomExpressionHelper : object {
    public static string CustomExpressionFeedName;
    private static FeedCustomExpressionHelper();
    public static FeedResource CustomExpressionFeedWithId(string id);
    public static bool IsRealFeedId(string id);
}
[ExtensionAttribute]
public static class Octopus.Cli.Util.Humanize : object {
    [ExtensionAttribute]
public static string FriendlyDuration(TimeSpan time);
    private static string Format(double totalUnits, string unit);
    [ExtensionAttribute]
public static string Plural(string simpleNoun, int count);
    [ExtensionAttribute]
public static string ReadableJoin(IEnumerable`1<T> list, string junction);
}
public interface Octopus.Cli.Util.IOctopusFileSystem {
    public abstract virtual bool FileExists(string path);
    public abstract virtual bool DirectoryExists(string path);
    public abstract virtual bool DirectoryIsEmpty(string path);
    public abstract virtual void DeleteFile(string path);
    public abstract virtual void DeleteFile(string path, DeletionOptions options);
    public abstract virtual void DeleteDirectory(string path);
    public abstract virtual void DeleteDirectory(string path, DeletionOptions options);
    public abstract virtual IEnumerable`1<string> EnumerateDirectories(string parentDirectoryPath);
    public abstract virtual IEnumerable`1<string> EnumerateDirectoriesRecursively(string parentDirectoryPath);
    public abstract virtual IEnumerable`1<string> EnumerateFiles(string parentDirectoryPath, String[] searchPatterns);
    public abstract virtual IEnumerable`1<string> EnumerateFilesRecursively(string parentDirectoryPath, String[] searchPatterns);
    public abstract virtual long GetFileSize(string path);
    public abstract virtual string ReadFile(string path);
    public abstract virtual void AppendToFile(string path, string contents);
    public abstract virtual void OverwriteFile(string path, string contents);
    public abstract virtual Stream OpenFile(string path, FileAccess access, FileShare share);
    public abstract virtual Stream OpenFile(string path, FileMode mode, FileAccess access, FileShare share);
    public abstract virtual Stream CreateTemporaryFile(string extension, String& path);
    public abstract virtual string CreateTemporaryDirectory();
    public abstract virtual void CopyDirectory(string sourceDirectory, string targetDirectory, int overwriteFileRetryAttempts);
    public abstract virtual void CopyDirectory(string sourceDirectory, string targetDirectory, CancellationToken cancel, int overwriteFileRetryAttempts);
    public abstract virtual ReplaceStatus CopyFile(string sourceFile, string destinationFile, int overwriteFileRetryAttempts);
    public abstract virtual void EnsureDirectoryExists(string directoryPath);
    public abstract virtual string GetFullPath(string relativeOrAbsoluteFilePath);
    public abstract virtual void OverwriteAndDelete(string originalFile, string temporaryReplacement);
    public abstract virtual void WriteAllBytes(string filePath, Byte[] data);
    public abstract virtual string RemoveInvalidFileNameChars(string path);
    public abstract virtual void MoveFile(string sourceFile, string destinationFile);
    public abstract virtual ReplaceStatus Replace(string path, Stream stream, int overwriteRetryAttempts);
    public abstract virtual bool EqualHash(Stream first, Stream second);
    public abstract virtual string ReadAllText(string scriptFile);
}
[ExtensionAttribute]
public static class Octopus.Cli.Util.LazyExtensions : object {
    [ExtensionAttribute]
public static T LoadValue(Lazy`1<T> lazy);
}
public static class Octopus.Cli.Util.LineSplitter : object {
    private static int MaxLineLength;
    public static string Split(string indentation, string text);
}
[ExtensionAttribute]
public static class Octopus.Cli.Util.ListExtensions : object {
    [ExtensionAttribute]
public static void RemoveWhere(IList`1<TElement> source, Func`2<TElement, bool> remove);
    [ExtensionAttribute]
public static void AddRange(ICollection`1<TElement> source, IEnumerable`1<TElement> itemsToAdd);
    [ExtensionAttribute]
public static void AddRangeUnique(ICollection`1<TElement> source, IEnumerable`1<TElement> itemsToAdd);
    [IteratorStateMachineAttribute("Octopus.Cli.Util.ListExtensions/<Apply>d__3`1")]
[ExtensionAttribute]
public static IEnumerable`1<TElement> Apply(IEnumerable`1<TElement> source, Action`1<TElement> apply);
    [ExtensionAttribute]
public static bool None(IEnumerable`1<TElement> items);
}
[ExtensionAttribute]
public static class Octopus.Cli.Util.NumericExtensions : object {
    private static long Kilobyte;
    private static long Megabyte;
    private static long Gigabyte;
    private static long Terabyte;
    [ExtensionAttribute]
public static string ToFileSizeString(long bytes);
    [ExtensionAttribute]
public static string ToFileSizeString(ulong bytes);
}
public class Octopus.Cli.Util.OctopusPhysicalFileSystem : object {
    private ILogger log;
    public OctopusPhysicalFileSystem(ILogger log);
    public sealed virtual bool FileExists(string path);
    public sealed virtual bool DirectoryExists(string path);
    public sealed virtual bool DirectoryIsEmpty(string path);
    public sealed virtual void DeleteFile(string path);
    public sealed virtual void DeleteFile(string path, DeletionOptions options);
    public sealed virtual void DeleteDirectory(string path);
    public sealed virtual void DeleteDirectory(string path, DeletionOptions options);
    public sealed virtual IEnumerable`1<string> EnumerateFiles(string parentDirectoryPath, String[] searchPatterns);
    public sealed virtual IEnumerable`1<string> EnumerateFilesRecursively(string parentDirectoryPath, String[] searchPatterns);
    public sealed virtual IEnumerable`1<string> EnumerateDirectories(string parentDirectoryPath);
    public sealed virtual IEnumerable`1<string> EnumerateDirectoriesRecursively(string parentDirectoryPath);
    public sealed virtual long GetFileSize(string path);
    public sealed virtual string ReadFile(string path);
    public sealed virtual void AppendToFile(string path, string contents);
    public sealed virtual void OverwriteFile(string path, string contents);
    public sealed virtual Stream OpenFile(string path, FileAccess access, FileShare share);
    public sealed virtual Stream OpenFile(string path, FileMode mode, FileAccess access, FileShare share);
    public sealed virtual Stream CreateTemporaryFile(string extension, String& path);
    private static string GetTempBasePath();
    public sealed virtual string CreateTemporaryDirectory();
    public sealed virtual void OverwriteAndDelete(string originalFile, string temporaryReplacement);
    public sealed virtual void WriteAllBytes(string filePath, Byte[] data);
    public sealed virtual string RemoveInvalidFileNameChars(string path);
    public sealed virtual void MoveFile(string sourceFile, string destinationFile);
    public sealed virtual void EnsureDirectoryExists(string directoryPath);
    public sealed virtual void CopyDirectory(string sourceDirectory, string targetDirectory, int overwriteFileRetryAttempts);
    public sealed virtual void CopyDirectory(string sourceDirectory, string targetDirectory, CancellationToken cancel, int overwriteFileRetryAttempts);
    public sealed virtual ReplaceStatus CopyFile(string sourceFile, string targetFile, int overwriteFileRetryAttempts);
    public sealed virtual string GetFullPath(string relativeOrAbsoluteFilePath);
    public sealed virtual ReplaceStatus Replace(string oldFilePath, Stream newStream, int overwriteFileRetryAttempts);
    public sealed virtual string ReadAllText(string scriptFile);
    public sealed virtual bool EqualHash(Stream first, Stream second);
}
public class Octopus.Cli.Util.ReplaceStatus : ValueType {
    public static ReplaceStatus Created;
    public static ReplaceStatus Deleted;
    public static ReplaceStatus Updated;
    public static ReplaceStatus SkippedIncomplete;
    public static ReplaceStatus SkippedTooOld;
    public static ReplaceStatus SkippedNoOverwrite;
    public static ReplaceStatus SkippedNull;
    public static ReplaceStatus Unchanged;
    public static ReplaceStatus MissingDependencies;
    public static ReplaceStatus PropertyAdded;
    public static ReplaceStatus PropertyDeleted;
    public static ReplaceStatus PropertyUnchanged;
    public static ReplaceStatus PropertyUpdated;
    public static ReplaceStatus Error;
    public string Description;
    public ReplaceStatus(string description);
    private static ReplaceStatus();
    public sealed virtual bool Equals(ReplaceStatus other);
    public virtual string ToString();
}
[ExtensionAttribute]
public static class Octopus.Cli.Util.RepositoryExtensions : object {
    [AsyncStateMachineAttribute("Octopus.Cli.Util.RepositoryExtensions/<FindByNameOrIdOrFail>d__0`2")]
[ExtensionAttribute]
private static Task`1<TResource> FindByNameOrIdOrFail(T repository, Func`2<string, Task`1<TResource>> findByNameFunc, string resourceTypeIdPrefix, string resourceTypeDisplayName, string nameOrId, string enclosingContextDescription, bool skipLog);
    [AsyncStateMachineAttribute("Octopus.Cli.Util.RepositoryExtensions/<FindByNamesOrIdsOrFail>d__1`2")]
[ExtensionAttribute]
private static Task`1<TResource[]> FindByNamesOrIdsOrFail(T repository, Func`2<string, Task`1<TResource>> findByNameFunc, string resourceTypeIdPrefix, string resourceTypeDisplayName, IEnumerable`1<string> namesOrIds, string enclosingContextDescription, bool skipLog);
    [ExtensionAttribute]
public static Task`1<SpaceResource> FindByNameOrIdOrFail(ISpaceRepository repo, string nameOrId);
    [ExtensionAttribute]
public static Task`1<ProjectResource> FindByNameOrIdOrFail(IProjectRepository repo, string nameOrId);
    [ExtensionAttribute]
public static Task`1<ProjectResource[]> FindByNamesOrIdsOrFail(IProjectRepository repo, IEnumerable`1<string> namesOrIds);
    [ExtensionAttribute]
public static Task`1<RunbookResource> FindByNameOrIdOrFail(IRunbookRepository repo, string nameOrId, ProjectResource project);
    [ExtensionAttribute]
public static Task`1<ChannelResource> FindByNameOrIdOrFail(IChannelRepository repo, ProjectResource project, string nameOrId);
    [ExtensionAttribute]
public static Task`1<ChannelResource[]> FindByNamesOrIdsOrFail(IChannelRepository repo, ProjectResource project, IEnumerable`1<string> namesOrIds);
    [ExtensionAttribute]
public static Task`1<EnvironmentResource> FindByNameOrIdOrFail(IEnvironmentRepository repo, string nameOrId);
    [ExtensionAttribute]
public static Task`1<EnvironmentResource[]> FindByNamesOrIdsOrFail(IEnvironmentRepository repo, IEnumerable`1<string> namesOrIds);
    [ExtensionAttribute]
public static Task`1<TenantResource> FindByNameOrIdOrFail(ITenantRepository repo, string nameOrId);
    [ExtensionAttribute]
public static Task`1<TenantResource[]> FindByNamesOrIdsOrFail(ITenantRepository repo, IEnumerable`1<string> namesOrIds);
    [ExtensionAttribute]
public static Task`1<LifecycleResource> FindByNameOrIdOrFail(ILifecyclesRepository repo, string nameOrId);
}
[ExtensionAttribute]
public static class Octopus.Cli.Util.ResourceCollectionExtensions : object {
    private static string PageNext;
    [ExtensionAttribute]
public static bool HasNextPage(ResourceCollection`1<TResource> source);
    [ExtensionAttribute]
public static string NextPageLink(ResourceCollection`1<TResource> source);
    [AsyncStateMachineAttribute("Octopus.Cli.Util.ResourceCollectionExtensions/<GetAllPages>d__3`1")]
[ExtensionAttribute]
public static Task`1<IEnumerable`1<TResource>> GetAllPages(ResourceCollection`1<TResource> source, IOctopusAsyncRepository repository);
    [AsyncStateMachineAttribute("Octopus.Cli.Util.ResourceCollectionExtensions/<Paginate>d__4`1")]
[ExtensionAttribute]
public static Task Paginate(ResourceCollection`1<TResource> source, IOctopusAsyncRepository repository, Func`2<ResourceCollection`1<TResource>, bool> getNextPage);
    [AsyncStateMachineAttribute("Octopus.Cli.Util.ResourceCollectionExtensions/<FindOne>d__5`1")]
[ExtensionAttribute]
public static Task`1<TResource> FindOne(ResourceCollection`1<TResource> source, IOctopusAsyncRepository repository, Func`2<TResource, bool> search);
    [AsyncStateMachineAttribute("Octopus.Cli.Util.ResourceCollectionExtensions/<FindMany>d__6`1")]
[ExtensionAttribute]
public static Task`1<List`1<TResource>> FindMany(ResourceCollection`1<TResource> source, IOctopusAsyncRepository repository, Func`2<TResource, bool> search);
}
[ExtensionAttribute]
public static class Octopus.Cli.Util.StringExtensions : object {
    [ExtensionAttribute]
public static string CommaSeperate(IEnumerable`1<object> items);
    [ExtensionAttribute]
public static string NewlineSeperate(IEnumerable`1<object> items);
    [ExtensionAttribute]
public static string NormalizeNewLinesForWindows(string originalString);
    [ExtensionAttribute]
public static string NormalizeNewLinesForNix(string originalString);
    [ExtensionAttribute]
public static string NormalizeNewLines(string originalString);
    [ExtensionAttribute]
public static void CheckForIllegalPathCharacters(string path, string name);
}
[ExtensionAttribute]
public static class Octopus.Cli.Util.UriExtensions : object {
    [ExtensionAttribute]
public static Uri EnsureEndsWith(Uri uri, string suffix);
    private static string FindOverlapSection(string value1, string value2);
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
[AttributeUsageAttribute("27524")]
internal class System.Runtime.CompilerServices.NullableAttribute : Attribute {
    public Byte[] NullableFlags;
    public NullableAttribute(byte );
    public NullableAttribute(Byte[] );
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
[AttributeUsageAttribute("5196")]
internal class System.Runtime.CompilerServices.NullableContextAttribute : Attribute {
    public byte Flag;
    public NullableContextAttribute(byte );
}
