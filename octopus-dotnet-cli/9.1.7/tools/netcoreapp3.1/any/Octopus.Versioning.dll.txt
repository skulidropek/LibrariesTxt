[CompilerGeneratedAttribute]
[EmbeddedAttribute]
internal class Microsoft.CodeAnalysis.EmbeddedAttribute : Attribute {
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Octopus.Versioning.Docker.DockerTag : OctopusVersion {
    private static string Latest;
    private bool IsLatest { get; }
    public VersionFormat Format { get; }
    public bool IsPrerelease { get; }
    public DockerTag(OctopusVersion version);
    [NullableContextAttribute("2")]
public DockerTag(string prefix, int major, int minor, int patch, int revision, string prerelease, string prereleasePrefix, string prereleaseCounter, string metadata, string originalVersion);
    private bool get_IsLatest();
    public virtual VersionFormat get_Format();
    public virtual bool get_IsPrerelease();
    public virtual int CompareTo(object obj);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
}
[NullableContextAttribute("1")]
public interface Octopus.Versioning.IVersion {
    public int Major { get; }
    public int Minor { get; }
    public int Patch { get; }
    public int Revision { get; }
    public bool IsPrerelease { get; }
    public IEnumerable`1<string> ReleaseLabels { get; }
    [NullableAttribute("2")]
public string Metadata { get; }
    public string Release { get; }
    public bool HasMetadata { get; }
    [NullableAttribute("2")]
public string OriginalString { get; }
    public VersionFormat Format { get; }
    public abstract virtual int get_Major();
    public abstract virtual int get_Minor();
    public abstract virtual int get_Patch();
    public abstract virtual int get_Revision();
    public abstract virtual bool get_IsPrerelease();
    public abstract virtual IEnumerable`1<string> get_ReleaseLabels();
    [NullableContextAttribute("2")]
public abstract virtual string get_Metadata();
    public abstract virtual string get_Release();
    public abstract virtual bool get_HasMetadata();
    [NullableContextAttribute("2")]
public abstract virtual string get_OriginalString();
    public abstract virtual VersionFormat get_Format();
}
public interface Octopus.Versioning.IVersionComparer {
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Octopus.Versioning.Maven.ComparableVersion : object {
    private static int INTEGER_ITEM;
    private static int STRING_ITEM;
    private static int LIST_ITEM;
    private string value;
    private ListItem items;
    private string canonical;
    public ComparableVersion(string version);
    private void ParseVersion(string version);
    private static Item ParseItem(bool isDigit, string buf);
    public sealed virtual int CompareTo(ComparableVersion o);
    public virtual string ToString();
    public virtual bool Equals(object o);
    public virtual int GetHashCode();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Octopus.Versioning.Maven.MavenPackageID : object {
    public static char DISPLAY_DELIMITER;
    [CompilerGeneratedAttribute]
private string <Group>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Artifact>k__BackingField;
    [NullableAttribute("2")]
[CompilerGeneratedAttribute]
private string <Version>k__BackingField;
    [NullableAttribute("2")]
[CompilerGeneratedAttribute]
private string <Packaging>k__BackingField;
    [NullableAttribute("2")]
[CompilerGeneratedAttribute]
private string <Classifier>k__BackingField;
    public string Group { get; }
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public String[] Groups { get; }
    public string Artifact { get; }
    [NullableAttribute("2")]
public string Version { get; }
    [NullableAttribute("2")]
public string Packaging { get; }
    [NullableAttribute("2")]
public string Classifier { get; }
    public string DisplayName { get; }
    [NullableAttribute("2")]
public IVersion SemanticVersion { get; }
    public string GroupMetadataPath { get; }
    public string GroupVersionMetadataPath { get; }
    public string DefaultGroupVersionPomPath { get; }
    public string DefaultArtifactPath { get; }
    [NullableContextAttribute("2")]
public MavenPackageID(string group, string artifact, string version);
    [NullableContextAttribute("2")]
public MavenPackageID(string group, string artifact, string version, string packaging);
    [NullableContextAttribute("2")]
public MavenPackageID(string group, string artifact, string version, string packaging, string classifier);
    public MavenPackageID(string id, IVersion version);
    [NullableContextAttribute("2")]
public MavenPackageID(string id);
    [CompilerGeneratedAttribute]
public string get_Group();
    public String[] get_Groups();
    [CompilerGeneratedAttribute]
public string get_Artifact();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public string get_Version();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public string get_Packaging();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public string get_Classifier();
    public string get_DisplayName();
    [NullableContextAttribute("2")]
public IVersion get_SemanticVersion();
    public string get_GroupMetadataPath();
    public string get_GroupVersionMetadataPath();
    public string get_DefaultGroupVersionPomPath();
    public string get_DefaultArtifactPath();
    public static MavenPackageID CreatePackageIdFromOctopusInput(string input, IVersion version);
    public string SnapshotGroupVersionPomPath(string value);
    public string SnapshotArtifactPath(string value);
    public virtual string ToString();
    public string ToString(char delimiter);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Octopus.Versioning.Maven.MavenVersion : object {
    [CompilerGeneratedAttribute]
private int <Major>k__BackingField;
    [CompilerGeneratedAttribute]
private int <Minor>k__BackingField;
    [CompilerGeneratedAttribute]
private int <Patch>k__BackingField;
    [CompilerGeneratedAttribute]
private int <Revision>k__BackingField;
    [CompilerGeneratedAttribute]
private IEnumerable`1<string> <ReleaseLabels>k__BackingField;
    [CompilerGeneratedAttribute]
private string <OriginalString>k__BackingField;
    public int Major { get; }
    public int Minor { get; }
    public int Patch { get; }
    public int Revision { get; }
    public bool IsPrerelease { get; }
    public IEnumerable`1<string> ReleaseLabels { get; }
    public string Release { get; }
    [NullableAttribute("2")]
public string Metadata { get; }
    public bool HasMetadata { get; }
    public string OriginalString { get; }
    public VersionFormat Format { get; }
    public MavenVersion(int major, int minor, int patch, int revision, IEnumerable`1<string> releaseLabels, string originalVersion);
    [CompilerGeneratedAttribute]
public sealed virtual int get_Major();
    [CompilerGeneratedAttribute]
public sealed virtual int get_Minor();
    [CompilerGeneratedAttribute]
public sealed virtual int get_Patch();
    [CompilerGeneratedAttribute]
public sealed virtual int get_Revision();
    public sealed virtual bool get_IsPrerelease();
    [CompilerGeneratedAttribute]
public sealed virtual IEnumerable`1<string> get_ReleaseLabels();
    public sealed virtual string get_Release();
    [NullableContextAttribute("2")]
public sealed virtual string get_Metadata();
    public sealed virtual bool get_HasMetadata();
    [CompilerGeneratedAttribute]
public sealed virtual string get_OriginalString();
    public sealed virtual VersionFormat get_Format();
    public sealed virtual int CompareTo(object obj);
    public virtual string ToString();
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Octopus.Versioning.Maven.MavenVersionParser : object {
    private static string MAJOR_MINOR_PATCH_PATTERN;
    private static Regex MAJOR_MINOR_PATCH;
    private static Regex DIGITS;
    private static Regex BUILD_NUMBER;
    [CompilerGeneratedAttribute]
private int <Major>k__BackingField;
    [CompilerGeneratedAttribute]
private int <Minor>k__BackingField;
    [CompilerGeneratedAttribute]
private int <Patch>k__BackingField;
    [CompilerGeneratedAttribute]
private int <BuildNumber>k__BackingField;
    [NullableAttribute("2")]
[CompilerGeneratedAttribute]
private string <Qualifier>k__BackingField;
    public int Major { get; private set; }
    public int Minor { get; private set; }
    public int Patch { get; private set; }
    public int BuildNumber { get; private set; }
    [NullableAttribute("2")]
public string Qualifier { get; private set; }
    private static MavenVersionParser();
    [CompilerGeneratedAttribute]
public int get_Major();
    [CompilerGeneratedAttribute]
private void set_Major(int value);
    [CompilerGeneratedAttribute]
public int get_Minor();
    [CompilerGeneratedAttribute]
private void set_Minor(int value);
    [CompilerGeneratedAttribute]
public int get_Patch();
    [CompilerGeneratedAttribute]
private void set_Patch(int value);
    [CompilerGeneratedAttribute]
public int get_BuildNumber();
    [CompilerGeneratedAttribute]
private void set_BuildNumber(int value);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public string get_Qualifier();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
private void set_Qualifier(string value);
    public MavenVersion Parse(string version);
    private void ParseBuildNumber(string buildNumberPart);
    private void ParseMajorMinorPatchVersion(string version);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Octopus.Versioning.Maven.Ranges.InvalidVersionSpecificationException : Exception {
    public InvalidVersionSpecificationException(string message);
    public InvalidVersionSpecificationException(string message, Exception inner);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Octopus.Versioning.Maven.Ranges.MavenVersionRange : object {
    [NullableAttribute("2")]
[CompilerGeneratedAttribute]
private IVersion <RecommendedVersion>k__BackingField;
    [CompilerGeneratedAttribute]
private List`1<Restriction> <Restrictions>k__BackingField;
    [NullableAttribute("2")]
public IVersion RecommendedVersion { get; }
    public List`1<Restriction> Restrictions { get; }
    private MavenVersionRange(IVersion recommendedVersion, List`1<Restriction> restrictions);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public IVersion get_RecommendedVersion();
    [CompilerGeneratedAttribute]
public List`1<Restriction> get_Restrictions();
    public MavenVersionRange CloneOf();
    public static MavenVersionRange CreateFromVersionSpec(string spec);
    private static Restriction ParseRestriction(string spec);
    public static MavenVersionRange CreateFromVersion(string version);
    public MavenVersionRange Restrict(MavenVersionRange restriction);
    private List`1<Restriction> Intersection(List`1<Restriction> r1, List`1<Restriction> r2);
    [NullableContextAttribute("2")]
public IVersion GetSelectedVersion();
    public bool IsSelectedVersionKnown();
    public virtual string ToString();
    public IVersion MatchVersion(List`1<IVersion> versions);
    public bool ContainsVersion(IVersion version);
    public bool HasRestrictions();
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Octopus.Versioning.Maven.Ranges.OverConstrainedVersionException : Exception {
    public OverConstrainedVersionException(string message);
    public OverConstrainedVersionException(string message, Exception inner);
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
public class Octopus.Versioning.Maven.Ranges.Restriction : object {
    [NullableAttribute("1")]
public static Restriction EVERYTHING;
    [CompilerGeneratedAttribute]
private IVersion <LowerBound>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsLowerBoundInclusive>k__BackingField;
    [CompilerGeneratedAttribute]
private IVersion <UpperBound>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsUpperBoundInclusive>k__BackingField;
    public IVersion LowerBound { get; }
    public bool IsLowerBoundInclusive { get; }
    public IVersion UpperBound { get; }
    public bool IsUpperBoundInclusive { get; }
    public Restriction(IVersion lowerBound, bool lowerBoundInclusive, IVersion upperBound, bool upperBoundInclusive);
    private static Restriction();
    [CompilerGeneratedAttribute]
public IVersion get_LowerBound();
    [CompilerGeneratedAttribute]
public bool get_IsLowerBoundInclusive();
    [CompilerGeneratedAttribute]
public IVersion get_UpperBound();
    [CompilerGeneratedAttribute]
public bool get_IsUpperBoundInclusive();
    [NullableContextAttribute("1")]
public bool ContainsVersion(IVersion version);
    public virtual int GetHashCode();
    [NullableContextAttribute("1")]
public virtual bool Equals(object other);
    [NullableContextAttribute("1")]
public virtual string ToString();
}
[AttributeUsageAttribute("10624")]
public class Octopus.Versioning.NotNullAttribute : Attribute {
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Octopus.Versioning.Octopus.OctopusVersion : object {
    [CompilerGeneratedAttribute]
private string <Prefix>k__BackingField;
    [CompilerGeneratedAttribute]
private int <Major>k__BackingField;
    [CompilerGeneratedAttribute]
private int <Minor>k__BackingField;
    [CompilerGeneratedAttribute]
private int <Patch>k__BackingField;
    [CompilerGeneratedAttribute]
private int <Revision>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Metadata>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Release>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ReleasePrefix>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ReleaseCounter>k__BackingField;
    [CompilerGeneratedAttribute]
private string <OriginalString>k__BackingField;
    public string Prefix { get; }
    public int Major { get; }
    public int Minor { get; }
    public int Patch { get; }
    public int Revision { get; }
    public bool IsPrerelease { get; }
    public IEnumerable`1<string> ReleaseLabels { get; }
    public string Metadata { get; }
    public string Release { get; }
    public string ReleasePrefix { get; }
    public string ReleaseCounter { get; }
    public bool HasMetadata { get; }
    public string OriginalString { get; }
    public VersionFormat Format { get; }
    [NullableContextAttribute("2")]
public OctopusVersion(string prefix, int major, int minor, int patch, int revision, string prerelease, string prereleasePrefix, string prereleaseCounter, string metadata, string originalVersion);
    [CompilerGeneratedAttribute]
public virtual string get_Prefix();
    [CompilerGeneratedAttribute]
public virtual int get_Major();
    [CompilerGeneratedAttribute]
public virtual int get_Minor();
    [CompilerGeneratedAttribute]
public virtual int get_Patch();
    [CompilerGeneratedAttribute]
public virtual int get_Revision();
    public virtual bool get_IsPrerelease();
    public virtual IEnumerable`1<string> get_ReleaseLabels();
    [CompilerGeneratedAttribute]
public virtual string get_Metadata();
    [CompilerGeneratedAttribute]
public virtual string get_Release();
    [CompilerGeneratedAttribute]
public virtual string get_ReleasePrefix();
    [CompilerGeneratedAttribute]
public virtual string get_ReleaseCounter();
    public virtual bool get_HasMetadata();
    [CompilerGeneratedAttribute]
public virtual string get_OriginalString();
    public virtual VersionFormat get_Format();
    public virtual int CompareTo(object obj);
    public virtual string ToString();
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
    private static int CompareReleaseLabels(IEnumerable`1<string> version1, IEnumerable`1<string> version2);
    private static int CompareRelease(string version1, string version2);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Octopus.Versioning.Octopus.OctopusVersionMask : object {
    [CompilerGeneratedAttribute]
private string <Prefix>k__BackingField;
    [CompilerGeneratedAttribute]
private Component <Major>k__BackingField;
    [CompilerGeneratedAttribute]
private Component <Minor>k__BackingField;
    [CompilerGeneratedAttribute]
private Component <Patch>k__BackingField;
    [CompilerGeneratedAttribute]
private Component <Revision>k__BackingField;
    [CompilerGeneratedAttribute]
private MetadataComponent <Metadata>k__BackingField;
    [CompilerGeneratedAttribute]
private TagComponent <Release>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <DidParse>k__BackingField;
    public string Prefix { get; }
    public Component Major { get; }
    public Component Minor { get; }
    public Component Patch { get; }
    public Component Revision { get; }
    public MetadataComponent Metadata { get; }
    public TagComponent Release { get; }
    public bool DidParse { get; }
    public bool IsMask { get; }
    public OctopusVersionMask(bool didParse, string prefix, Component major, Component minor, Component patch, Component revision, TagComponent prerelease, MetadataComponent metadata);
    [CompilerGeneratedAttribute]
public string get_Prefix();
    [CompilerGeneratedAttribute]
public Component get_Major();
    [CompilerGeneratedAttribute]
public Component get_Minor();
    [CompilerGeneratedAttribute]
public Component get_Patch();
    [CompilerGeneratedAttribute]
public Component get_Revision();
    [CompilerGeneratedAttribute]
public MetadataComponent get_Metadata();
    [CompilerGeneratedAttribute]
public TagComponent get_Release();
    [CompilerGeneratedAttribute]
public bool get_DidParse();
    public bool get_IsMask();
    public IVersion GetLatestMaskedVersion(List`1<IVersion> versions);
    public IVersion GenerateVersionFromMask();
    public IVersion GenerateVersionFromCurrent(OctopusVersionMask current);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Octopus.Versioning.Octopus.OctopusVersionMaskParser : object {
    public static string PatternIncrement;
    public static string PatternCurrent;
    private static string Prefix;
    private static string Major;
    private static string Minor;
    private static string Patch;
    private static string Revision;
    private static string Prerelease;
    private static string PrereleasePrefix;
    private static string PrereleaseCounter;
    private static string Meta;
    private static Regex VersionRegex;
    private static OctopusVersionMaskParser();
    public OctopusVersionMask Parse(string version);
    [NullableContextAttribute("2")]
public IVersion ApplyMask(string mask, IVersion currentVersion);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Octopus.Versioning.Octopus.OctopusVersionParser : object {
    private static string Prefix;
    private static string Major;
    private static string Minor;
    private static string Patch;
    private static string Revision;
    private static string Prerelease;
    private static string PrereleasePrefix;
    private static string PrereleaseCounter;
    private static string Meta;
    private static Regex VersionRegex;
    private static OctopusVersionParser();
    public OctopusVersion Parse(string version);
    public bool TryParse(string version, OctopusVersion& parsedVersion);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Octopus.Versioning.Plumbing.HashCodeCombiner : object {
    private static long Seed;
    private long combinedHash;
    public int CombinedHash { get; }
    public int get_CombinedHash();
    public HashCodeCombiner AddInt32(int i);
    public HashCodeCombiner AddObject(int i);
    public HashCodeCombiner AddObject(bool b);
    public HashCodeCombiner AddObject(object o);
    public static int GetHashCode(Object[] objects);
}
[NullableContextAttribute("1")]
public interface Octopus.Versioning.Semver.ISemanticVersionUtils {
    [NullableContextAttribute("2")]
public abstract virtual IEnumerable`1<string> ParseReleaseLabels(string releaseLabels);
    public abstract virtual string GetLegacyString(Version version, IEnumerable`1<string> releaseLabels, string metadata);
    public abstract virtual Version NormalizeVersionValue(Version version);
    public abstract virtual Tuple`3<string, String[], string> ParseSections(string value);
    public abstract virtual bool IsValid(string s, bool allowLeadingZeros);
    public abstract virtual bool IsValidPart(string s, bool allowLeadingZeros);
    public abstract virtual bool IsValidPart(Char[] chars, bool allowLeadingZeros);
    public abstract virtual bool IsLetterOrDigitOrDash(char c);
    public abstract virtual string IncrementRelease(string release);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Octopus.Versioning.Semver.SemanticVersion : StrictSemanticVersion {
    private static SemVerFactory SemVerFactory;
    private static ISemanticVersionUtils utils;
    [NullableAttribute("2")]
private string originalString;
    public Version Version { get; }
    public bool IsLegacyVersion { get; }
    public bool IsSemVer2 { get; }
    [NullableAttribute("2")]
public string OriginalString { get; }
    public SemanticVersion(string version);
    public SemanticVersion(SemanticVersion version);
    [NullableContextAttribute("2")]
public SemanticVersion(Version version, string releaseLabel, string metadata);
    public SemanticVersion(int major, int minor, int patch);
    [NullableContextAttribute("2")]
public SemanticVersion(int major, int minor, int patch, string releaseLabel);
    public SemanticVersion(int major, int minor, int patch, string releaseLabel, string metadata);
    [NullableContextAttribute("2")]
public SemanticVersion(int major, int minor, int patch, IEnumerable`1<string> releaseLabels, string metadata);
    public SemanticVersion(int major, int minor, int patch, int revision);
    [NullableContextAttribute("2")]
public SemanticVersion(int major, int minor, int patch, int revision, string releaseLabel, string metadata);
    [NullableContextAttribute("2")]
public SemanticVersion(int major, int minor, int patch, int revision, IEnumerable`1<string> releaseLabels, string metadata);
    [NullableContextAttribute("2")]
public SemanticVersion(Version version, IEnumerable`1<string> releaseLabels, string metadata, string originalVersion, bool preserveMissingComponents);
    private static SemanticVersion();
    public Version get_Version();
    public bool get_IsLegacyVersion();
    public bool get_IsSemVer2();
    [NullableContextAttribute("2")]
public virtual string get_OriginalString();
    public static SemanticVersion op_Explicit(string versionString);
    public virtual string ToString();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Octopus.Versioning.Semver.SemanticVersionUtils : object {
    [NullableContextAttribute("2")]
public sealed virtual IEnumerable`1<string> ParseReleaseLabels(string releaseLabels);
    public sealed virtual string GetLegacyString(Version version, IEnumerable`1<string> releaseLabels, string metadata);
    public sealed virtual Version NormalizeVersionValue(Version version);
    public sealed virtual Tuple`3<string, String[], string> ParseSections(string value);
    public sealed virtual bool IsValid(string s, bool allowLeadingZeros);
    public sealed virtual bool IsValidPart(string s, bool allowLeadingZeros);
    public sealed virtual bool IsValidPart(Char[] chars, bool allowLeadingZeros);
    public sealed virtual bool IsLetterOrDigitOrDash(char c);
    public sealed virtual string IncrementRelease(string release);
    [CompilerGeneratedAttribute]
private bool <IsValidPart>b__6_1(char c);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Octopus.Versioning.Semver.SemVerFactory : object {
    private static ISemanticVersionUtils utils;
    private static SemVerFactory();
    public static SemanticVersion CreateVersion(string input, bool preserveMissingComponents);
    public static IVersion CreateVersionOrNone(string input, bool preserveMissingComponents);
    public static SemanticVersion Parse(string value, bool preserveMissingComponents);
    public static SemanticVersion TryCreateVersion(string value, bool preserveMissingComponents);
    public static SemanticVersion TryParseStrict(string value);
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
public class Octopus.Versioning.Semver.StrictSemanticVersion : object {
    [NullableAttribute("1")]
private static ISemanticVersionUtils utils;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private IEnumerable`1<string> releaseLabels;
    [NullableAttribute("1")]
protected Version version;
    [CompilerGeneratedAttribute]
private string <Metadata>k__BackingField;
    public int Major { get; }
    public int Minor { get; }
    public int Patch { get; }
    public int Revision { get; }
    [NullableAttribute("1")]
public IEnumerable`1<string> ReleaseLabels { get; }
    [NullableAttribute("1")]
public string Release { get; }
    public bool IsPrerelease { get; }
    public bool HasMetadata { get; }
    public string OriginalString { get; }
    public VersionFormat Format { get; }
    public string Metadata { get; }
    public StrictSemanticVersion(int major, int minor, int patch);
    [NullableContextAttribute("1")]
private StrictSemanticVersion(int major, int minor, int patch, IEnumerable`1<string> releaseLabels, string metadata);
    [NullableContextAttribute("1")]
public StrictSemanticVersion(Version version, IEnumerable`1<string> releaseLabels, string metadata, bool preserveMissingComponents);
    private static StrictSemanticVersion();
    public sealed virtual int get_Major();
    public sealed virtual int get_Minor();
    public sealed virtual int get_Patch();
    public sealed virtual int get_Revision();
    [NullableContextAttribute("1")]
public sealed virtual IEnumerable`1<string> get_ReleaseLabels();
    [NullableContextAttribute("1")]
public sealed virtual string get_Release();
    public virtual bool get_IsPrerelease();
    public virtual bool get_HasMetadata();
    public virtual string get_OriginalString();
    public sealed virtual VersionFormat get_Format();
    [CompilerGeneratedAttribute]
public virtual string get_Metadata();
    [NullableContextAttribute("1")]
public virtual string ToNormalizedString();
    [NullableContextAttribute("1")]
public virtual string ToString();
    [NullableContextAttribute("1")]
public virtual string ToString(string format, IFormatProvider formatProvider);
    [NullableContextAttribute("1")]
protected string TryFormatter(string format, IFormatProvider formatProvider);
    public virtual int GetHashCode();
    [NullableContextAttribute("1")]
public virtual int CompareTo(object obj);
    public virtual int CompareTo(StrictSemanticVersion other);
    [NullableContextAttribute("1")]
public virtual bool Equals(object obj);
    public virtual bool Equals(StrictSemanticVersion other);
    public virtual bool Equals(StrictSemanticVersion other, VersionComparison versionComparison);
    public virtual int CompareTo(StrictSemanticVersion other, VersionComparison versionComparison);
    public static bool op_Equality(StrictSemanticVersion version1, StrictSemanticVersion version2);
    public static bool op_Inequality(StrictSemanticVersion version1, StrictSemanticVersion version2);
    public static bool op_LessThan(StrictSemanticVersion version1, StrictSemanticVersion version2);
    public static bool op_LessThanOrEqual(StrictSemanticVersion version1, StrictSemanticVersion version2);
    public static bool op_GreaterThan(StrictSemanticVersion version1, StrictSemanticVersion version2);
    public static bool op_GreaterThanOrEqual(StrictSemanticVersion version1, StrictSemanticVersion version2);
    private static int Compare(StrictSemanticVersion version1, StrictSemanticVersion version2);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Octopus.Versioning.Semver.VersionComparer : object {
    public static IVersionComparer Default;
    public static IVersionComparer Version;
    public static IVersionComparer VersionRelease;
    public static IVersionComparer VersionReleaseMetadata;
    private VersionComparison mode;
    public VersionComparer(VersionComparison versionComparison);
    private static VersionComparer();
    [NullableContextAttribute("2")]
public sealed virtual bool Equals(IVersion x, IVersion y);
    [NullableContextAttribute("2")]
public static int Compare(IVersion version1, IVersion version2, VersionComparison versionComparison);
    [NullableContextAttribute("2")]
public sealed virtual int GetHashCode(IVersion version);
    [NullableContextAttribute("2")]
public sealed virtual int Compare(IVersion x, IVersion y);
    [NullableContextAttribute("2")]
private static int CompareLegacyVersion(SemanticVersion legacyX, SemanticVersion legacyY);
    private static int CompareReleaseLabels(IEnumerable`1<string> version1, IEnumerable`1<string> version2);
    private static int CompareRelease(string version1, string version2);
}
public enum Octopus.Versioning.Semver.VersionComparison : Enum {
    public int value__;
    public static VersionComparison Default;
    public static VersionComparison Version;
    public static VersionComparison VersionRelease;
    public static VersionComparison VersionReleaseMetadata;
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public static class Octopus.Versioning.VersionFactory : object {
    public static IVersion CreateVersion(string input, VersionFormat format);
    public static IVersion TryCreateVersion(string input, VersionFormat format);
    public static IVersion CreateMavenVersion(string input);
    public static IVersion CreateSemanticVersion(string input, bool preserveMissingComponents);
    public static IVersion CreateSemanticVersion(int major, int minor, int patch, string releaseLabel);
    public static IVersion CreateSemanticVersion(int major, int minor, int patch);
    public static IVersion CreateSemanticVersion(int major, int minor, int patch, int revision);
    public static IVersion CreateSemanticVersion(Version version, string releaseLabel, string metadata);
    public static IVersion CreateSemanticVersion(int major, int minor, int patch, int revision, IEnumerable`1<string> releaseLabels, string metadata, string originalVersion);
    public static IVersion TryCreateMavenVersion(string input);
    public static IVersion TryCreateSemanticVersion(string input, bool preserveMissingComponents);
    public static IVersion CreateSemanticVersionOrNone(string input, bool preserveMissingComponents);
    public static IVersion CreateSemanticVersion(Version version, IEnumerable`1<string> releaseLabels, string metadata, string originalVersion);
    public static IVersion CreateDockerTag(string input);
    public static IVersion TryCreateDockerTag(string input);
    public static IVersion CreateOctopusVersion(string input);
    public static IVersion TryCreateOctopusVersion(string input);
}
public enum Octopus.Versioning.VersionFormat : Enum {
    public int value__;
    public static VersionFormat Semver;
    public static VersionFormat Maven;
    public static VersionFormat Docker;
    public static VersionFormat Octopus;
}
[ExtensionAttribute]
public static class Octopus.Versioning.VersionFormatExtensions : object {
    [ExtensionAttribute]
public static int Precedence(VersionFormat self);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Octopus.Versioning.VersionFormatter : object {
    public sealed virtual string Format(string format, object arg, IFormatProvider formatProvider);
    public sealed virtual object GetFormat(Type formatType);
    private static string GetNormalizedString(IVersion version);
    private static string Format(char c, IVersion version);
    private static string FormatVersion(IVersion version);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ExtensionAttribute]
public static class Octopus.Versioning.VersionSanitizeExtensions : object {
    private static Regex NonAlphaNumeric;
    private static VersionSanitizeExtensions();
    [ExtensionAttribute]
public static string AlphaNumericOnly(string self);
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
[AttributeUsageAttribute("27524")]
internal class System.Runtime.CompilerServices.NullableAttribute : Attribute {
    public Byte[] NullableFlags;
    public NullableAttribute(byte );
    public NullableAttribute(Byte[] );
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
[AttributeUsageAttribute("5196")]
internal class System.Runtime.CompilerServices.NullableContextAttribute : Attribute {
    public byte Flag;
    public NullableContextAttribute(byte );
}
