internal static class Octostache.CustomStringParsers.JsonParser : object {
    internal static bool TryParse(Binding parentBinding, string property, Binding& subBinding);
    internal static bool TryParse(Binding binding, Binding[]& subBindings);
    private static bool TryParseJObject(JObject jobj, Binding[]& subBindings);
    private static bool TryParseJArray(JArray jArray, Binding[]& subBindings);
    private static bool TryParseJValue(JValue jvalue, Binding& subBinding);
    private static bool TryParseJObject(JObject jobj, string property, Binding& subBinding);
    private static bool TryParseJArray(JArray jarray, string property, Binding& subBinding);
    private static Binding ConvertJTokenToBinding(JToken token);
}
internal class Octostache.Templates.AnalysisContext : object {
    private AnalysisContext parent;
    private Identifier identifier;
    private SymbolExpression expansion;
    private AnalysisContext(AnalysisContext parent, Identifier identifier, SymbolExpression expansion);
    public string Expand(SymbolExpression expression);
    public IEnumerable`1<SymbolExpressionStep> Expand(IEnumerable`1<SymbolExpressionStep> expression);
    public AnalysisContext BeginChild(Identifier ident, SymbolExpression expan);
}
internal class Octostache.Templates.Binding : Dictionary`2<string, Binding> {
    private Dictionary`2<string, Binding> indexable;
    [CompilerGeneratedAttribute]
private string <Item>k__BackingField;
    public string Item { get; public set; }
    public Dictionary`2<string, Binding> Indexable { get; }
    public Binding(string item);
    [CompilerGeneratedAttribute]
public string get_Item();
    [CompilerGeneratedAttribute]
public void set_Item(string value);
    public Dictionary`2<string, Binding> get_Indexable();
}
internal static class Octostache.Templates.BuiltInFunctions : object {
    private static IDictionary`2<string, Func`3<string, String[], string>> extensions;
    private static BuiltInFunctions();
    public static void Register(string name, Func`3<string, String[], string> implementation);
    public static string InvokeOrNull(string function, string argument, String[] options);
}
internal class Octostache.Templates.ConditionalExpressionToken : TemplateToken {
    [CompilerGeneratedAttribute]
private SymbolExpression <LeftSide>k__BackingField;
    public SymbolExpression LeftSide { get; }
    public string EqualityText { get; }
    public ConditionalExpressionToken(SymbolExpression leftSide);
    [CompilerGeneratedAttribute]
public SymbolExpression get_LeftSide();
    public virtual string get_EqualityText();
    public virtual IEnumerable`1<string> GetArguments();
}
internal class Octostache.Templates.ConditionalStringExpressionToken : ConditionalExpressionToken {
    [CompilerGeneratedAttribute]
private string <RightSide>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <Equality>k__BackingField;
    public string RightSide { get; }
    public bool Equality { get; }
    public string EqualityText { get; }
    public ConditionalStringExpressionToken(SymbolExpression leftSide, bool eq, string rightSide);
    [CompilerGeneratedAttribute]
public string get_RightSide();
    [CompilerGeneratedAttribute]
public bool get_Equality();
    public virtual string get_EqualityText();
    public virtual IEnumerable`1<string> GetArguments();
}
internal class Octostache.Templates.ConditionalSymbolExpressionToken : ConditionalExpressionToken {
    [CompilerGeneratedAttribute]
private SymbolExpression <RightSide>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <Equality>k__BackingField;
    public SymbolExpression RightSide { get; }
    public bool Equality { get; }
    public string EqualityText { get; }
    public ConditionalSymbolExpressionToken(SymbolExpression leftSide, bool eq, SymbolExpression rightSide);
    [CompilerGeneratedAttribute]
public SymbolExpression get_RightSide();
    [CompilerGeneratedAttribute]
public bool get_Equality();
    public virtual string get_EqualityText();
    public virtual IEnumerable`1<string> GetArguments();
}
internal class Octostache.Templates.ConditionalToken : TemplateToken {
    [CompilerGeneratedAttribute]
private ConditionalExpressionToken <Token>k__BackingField;
    [CompilerGeneratedAttribute]
private TemplateToken[] <TruthyTemplate>k__BackingField;
    [CompilerGeneratedAttribute]
private TemplateToken[] <FalsyTemplate>k__BackingField;
    public ConditionalExpressionToken Token { get; }
    public TemplateToken[] TruthyTemplate { get; }
    public TemplateToken[] FalsyTemplate { get; }
    public ConditionalToken(ConditionalExpressionToken token, IEnumerable`1<TemplateToken> truthyBranch, IEnumerable`1<TemplateToken> falsyBranch);
    [CompilerGeneratedAttribute]
public ConditionalExpressionToken get_Token();
    [CompilerGeneratedAttribute]
public TemplateToken[] get_TruthyTemplate();
    [CompilerGeneratedAttribute]
public TemplateToken[] get_FalsyTemplate();
    public virtual string ToString();
    public virtual IEnumerable`1<string> GetArguments();
}
internal class Octostache.Templates.Constants : object {
}
internal abstract class Octostache.Templates.ContentExpression : object {
    [CompilerGeneratedAttribute]
private Position <InputPosition>k__BackingField;
    public Position InputPosition { get; public set; }
    [CompilerGeneratedAttribute]
public sealed virtual Position get_InputPosition();
    [CompilerGeneratedAttribute]
public sealed virtual void set_InputPosition(Position value);
    public abstract virtual IEnumerable`1<string> GetArguments();
}
internal class Octostache.Templates.DependencyWildcard : SymbolExpressionStep {
    public virtual string ToString();
    public virtual IEnumerable`1<string> GetArguments();
}
internal class Octostache.Templates.EvaluationContext : object {
    private Binding binding;
    private EvaluationContext parent;
    private Stack`1<SymbolExpression> symbolStack;
    [CompilerGeneratedAttribute]
private TextWriter <Output>k__BackingField;
    public TextWriter Output { get; }
    public EvaluationContext(Binding binding, TextWriter output, EvaluationContext parent);
    [CompilerGeneratedAttribute]
public TextWriter get_Output();
    public string Resolve(SymbolExpression expression, String[]& missingTokens);
    private void ValidateThatRecursionIsNotOccuring(SymbolExpression expression);
    public string ResolveOptional(SymbolExpression expression, String[]& missingTokens);
    public Binding Walker(TemplateToken token, String[]& missingTokens);
    private Binding WalkTo(SymbolExpression expression, String[]& missingTokens);
    private Binding ParseTemplate(Binding b, String[]& missingTokens);
    private bool TryCustomParsers(Binding parentBinding, string property, Binding& subBinding);
    private SymbolExpression CopyExpression(SymbolExpression expression);
    public IEnumerable`1<Binding> ResolveAll(SymbolExpression collection, String[]& missingTokens);
    public EvaluationContext BeginChild(Binding locals);
    [CompilerGeneratedAttribute]
private SymbolExpressionStep <CopyExpression>b__14_0(SymbolExpressionStep s);
}
internal class Octostache.Templates.FunctionCallExpression : ContentExpression {
    private bool _filterSyntax;
    [CompilerGeneratedAttribute]
private TemplateToken[] <Options>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Function>k__BackingField;
    [CompilerGeneratedAttribute]
private ContentExpression <Argument>k__BackingField;
    public TemplateToken[] Options { get; }
    public string Function { get; }
    public ContentExpression Argument { get; }
    public FunctionCallExpression(bool filterSyntax, string function, ContentExpression argument, TemplateToken[] options);
    [CompilerGeneratedAttribute]
public TemplateToken[] get_Options();
    [CompilerGeneratedAttribute]
public string get_Function();
    [CompilerGeneratedAttribute]
public ContentExpression get_Argument();
    private IInputToken[] GetAllArguments();
    public virtual string ToString();
    public virtual IEnumerable`1<string> GetArguments();
}
internal static class Octostache.Templates.Functions.DateFunction : object {
    public static string NowDate(string argument, String[] options);
    public static string NowDateUtc(string argument, String[] options);
}
internal class Octostache.Templates.Functions.FormatFunction : object {
    public static string Format(string argument, String[] options);
}
internal class Octostache.Templates.Functions.TextCaseFunction : object {
    public static string ToUpper(string argument, String[] options);
    public static string ToLower(string argument, String[] options);
}
internal class Octostache.Templates.Functions.TextEscapeFunction : object {
    private static IDictionary`2<char, string> HtmlEntityMap;
    private static IDictionary`2<char, string> XmlEntityMap;
    private static IDictionary`2<char, string> JsonEntityMap;
    private static TextEscapeFunction();
    public static string HtmlEscape(string argument, String[] options);
    public static string XmlEscape(string argument, String[] options);
    public static string JsonEscape(string argument, String[] options);
    public static string Markdown(string argument, String[] options);
    private static string Escape(string raw, IDictionary`2<char, string> entities);
}
internal class Octostache.Templates.Functions.TextManipulationFunction : object {
    public static string ToBase64(string argument, String[] options);
}
internal static class Octostache.Templates.Functions.TextReplaceFunction : object {
    public static string Replace(string argument, String[] options);
}
internal class Octostache.Templates.Identifier : SymbolExpressionStep {
    [CompilerGeneratedAttribute]
private string <Text>k__BackingField;
    public string Text { get; }
    public Identifier(string text);
    [CompilerGeneratedAttribute]
public string get_Text();
    public virtual string ToString();
    public virtual IEnumerable`1<string> GetArguments();
    public virtual bool Equals(SymbolExpressionStep other);
    protected bool Equals(Identifier other);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
}
internal interface Octostache.Templates.IInputToken {
    public Position InputPosition { get; public set; }
    public abstract virtual Position get_InputPosition();
    public abstract virtual void set_InputPosition(Position value);
    public abstract virtual IEnumerable`1<string> GetArguments();
}
internal class Octostache.Templates.Indexer : SymbolExpressionStep {
    [CompilerGeneratedAttribute]
private string <Index>k__BackingField;
    [CompilerGeneratedAttribute]
private SymbolExpression <Symbol>k__BackingField;
    public string Index { get; }
    public SymbolExpression Symbol { get; }
    public bool IsSymbol { get; }
    public Indexer(string index);
    public Indexer(SymbolExpression expression);
    [CompilerGeneratedAttribute]
public string get_Index();
    [CompilerGeneratedAttribute]
public SymbolExpression get_Symbol();
    public bool get_IsSymbol();
    public virtual string ToString();
    public virtual IEnumerable`1<string> GetArguments();
    public virtual bool Equals(SymbolExpressionStep other);
    protected bool Equals(Indexer other);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
}
internal static class Octostache.Templates.PropertyListBinder : object {
    public static Binding CreateFrom(IDictionary`2<string, string> properties);
    private static void Add(Binding result, IEnumerable`1<SymbolExpressionStep> steps, string value);
}
internal class Octostache.Templates.RepetitionToken : TemplateToken {
    private SymbolExpression collection;
    private Identifier enumerator;
    private TemplateToken[] template;
    public SymbolExpression Collection { get; }
    public Identifier Enumerator { get; }
    public TemplateToken[] Template { get; }
    public RepetitionToken(SymbolExpression collection, Identifier enumerator, IEnumerable`1<TemplateToken> template);
    public SymbolExpression get_Collection();
    public Identifier get_Enumerator();
    public TemplateToken[] get_Template();
    public virtual string ToString();
    public virtual IEnumerable`1<string> GetArguments();
}
internal class Octostache.Templates.SubstitutionToken : TemplateToken {
    private ContentExpression expression;
    public ContentExpression Expression { get; }
    public SubstitutionToken(ContentExpression expression);
    public ContentExpression get_Expression();
    public virtual string ToString();
    public virtual IEnumerable`1<string> GetArguments();
}
internal class Octostache.Templates.SymbolExpression : ContentExpression {
    private SymbolExpressionStep[] steps;
    [CompilerGeneratedAttribute]
private static IEqualityComparer`1<SymbolExpression> <StepsComparer>k__BackingField;
    public SymbolExpressionStep[] Steps { get; }
    public static IEqualityComparer`1<SymbolExpression> StepsComparer { get; }
    public SymbolExpression(IEnumerable`1<SymbolExpressionStep> steps);
    private static SymbolExpression();
    public SymbolExpressionStep[] get_Steps();
    public virtual string ToString();
    [CompilerGeneratedAttribute]
public static IEqualityComparer`1<SymbolExpression> get_StepsComparer();
    public virtual IEnumerable`1<string> GetArguments();
}
internal abstract class Octostache.Templates.SymbolExpressionStep : object {
    [CompilerGeneratedAttribute]
private Position <InputPosition>k__BackingField;
    public Position InputPosition { get; public set; }
    [CompilerGeneratedAttribute]
public sealed virtual Position get_InputPosition();
    [CompilerGeneratedAttribute]
public sealed virtual void set_InputPosition(Position value);
    public abstract virtual IEnumerable`1<string> GetArguments();
    public virtual bool Equals(SymbolExpressionStep other);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
}
public class Octostache.Templates.Template : object {
    private TemplateToken[] tokens;
    public TemplateToken[] Tokens { get; }
    public Template(IEnumerable`1<TemplateToken> tokens);
    public TemplateToken[] get_Tokens();
    public virtual string ToString();
}
internal static class Octostache.Templates.TemplateAnalyzer : object {
    public static IEnumerable`1<string> GetDependencies(Template template);
    [IteratorStateMachineAttribute("Octostache.Templates.TemplateAnalyzer/<GetDependencies>d__1")]
private static IEnumerable`1<string> GetDependencies(IEnumerable`1<TemplateToken> tokens, AnalysisContext context);
    [IteratorStateMachineAttribute("Octostache.Templates.TemplateAnalyzer/<GetDependencies>d__2")]
private static IEnumerable`1<string> GetDependencies(TemplateToken token, AnalysisContext context);
    [IteratorStateMachineAttribute("Octostache.Templates.TemplateAnalyzer/<GetSymbols>d__3")]
private static IEnumerable`1<SymbolExpression> GetSymbols(ContentExpression expression);
}
internal class Octostache.Templates.TemplateEvaluator : object {
    private List`1<string> _missingTokens;
    public static void Evaluate(Template template, EvaluationContext context, String[]& missingTokens);
    public static void Evaluate(Template template, Binding properties, TextWriter output, String[]& missingTokens);
    private void Evaluate(IEnumerable`1<TemplateToken> tokens, EvaluationContext context);
    private void Evaluate(TemplateToken token, EvaluationContext context);
    private void EvaluateRepititionToken(EvaluationContext context, RepetitionToken rt);
    private void EvaluateConditionalToken(EvaluationContext context, ConditionalToken ct);
    private void EvaluateSubstitutionToken(EvaluationContext context, SubstitutionToken st);
    private static void EvaluateTextToken(EvaluationContext context, TextToken tt);
    private string Calculate(ContentExpression expression, EvaluationContext context);
    private string Resolve(TemplateToken token, EvaluationContext context);
    internal static bool IsTruthy(string value);
}
[ExtensionAttribute]
public static class Octostache.Templates.TemplateParser : object {
    private static Parser`1<Identifier> Identifier;
    private static Parser`1<Identifier> IdentifierWithoutWhitespace;
    private static Parser`1<string> LDelim;
    private static Parser`1<string> RDelim;
    private static Parser`1<SubstitutionToken> Substitution;
    private static Parser`1<Indexer> StringIndexer;
    private static Parser`1<Indexer> SymbolIndexer;
    private static Parser`1<Indexer> Indexer;
    private static Parser`1<SymbolExpressionStep> TrailingStep;
    private static Parser`1<SymbolExpression> Symbol;
    private static Parser`1<FunctionCallExpression> FilterChain;
    private static Parser`1<ContentExpression> Expression;
    private static Parser`1<ConditionalToken> Conditional;
    private static Parser`1<ConditionalExpressionToken> TruthyMatch;
    private static Parser`1<ConditionalExpressionToken> TokenMatch;
    private static Parser`1<ConditionalExpressionToken> StringMatch;
    private static Parser`1<RepetitionToken> Repetition;
    private static Parser`1<TextToken> Text;
    public static Parser`1<string> QuotedText;
    public static Parser`1<string> EscapedQuotedText;
    private static Parser`1<TemplateToken> Token;
    private static Parser`1<TemplateToken[]> Template;
    private static Parser`1<TemplateToken[]> IfTemplate;
    private static Parser`1<TemplateToken[]> ContinueOnErrorsTemplate;
    private static MemoryCache Cache;
    private static TemplateParser();
    [ExtensionAttribute]
private static Parser`1<T> FollowedBy(Parser`1<T> parser, string lookahead);
    [ExtensionAttribute]
private static Parser`1<char> ExceptWhiteSpaceBeforeKeyword(Parser`1<char> parser);
    private static Parser`1<string> Keyword(string text);
    [ExtensionAttribute]
private static Parser`1<T> WithPosition(Parser`1<T> parser);
    private static void AddToCache(string template, Template cached);
    private static Template GetFromCache(string template);
    public static HashSet`1<string> ParseTemplateAndGetArgumentNames(string template, bool haltOnError);
    public static Template ParseTemplate(string template);
    public static bool TryParseTemplate(string template, Template& result, String& error, bool haltOnError);
    internal static bool TryParseIdentifierPath(string path, SymbolExpression& expression);
    [ExtensionAttribute]
public static Parser`1<IEnumerable`1<TemplateToken>> ContinueMany(Parser`1<TemplateToken> parser);
    public static string Consumed(IInput before, IInput after);
}
public abstract class Octostache.Templates.TemplateToken : object {
    [CompilerGeneratedAttribute]
private Position <InputPosition>k__BackingField;
    public Position InputPosition { get; public set; }
    [CompilerGeneratedAttribute]
public sealed virtual Position get_InputPosition();
    [CompilerGeneratedAttribute]
public sealed virtual void set_InputPosition(Position value);
    public abstract virtual IEnumerable`1<string> GetArguments();
}
internal class Octostache.Templates.TextToken : TemplateToken {
    [CompilerGeneratedAttribute]
private IEnumerable`1<string> <Text>k__BackingField;
    public IEnumerable`1<string> Text { get; }
    public TextToken(String[] text);
    [CompilerGeneratedAttribute]
public IEnumerable`1<string> get_Text();
    public virtual string ToString();
    public virtual IEnumerable`1<string> GetArguments();
}
[DefaultMemberAttribute("Item")]
public class Octostache.VariableDictionary : object {
    private Dictionary`2<string, string> variables;
    private string storageFilePath;
    private Binding binding;
    private Binding Binding { get; }
    public string Item { get; public set; }
    public VariableDictionary(string storageFilePath);
    private Binding get_Binding();
    public void Set(string name, string value);
    public string get_Item(string name);
    public void set_Item(string name, string value);
    public void SetStrings(string variableName, IEnumerable`1<string> values, string separator);
    public void SetPaths(string variableName, IEnumerable`1<string> values);
    public void Reload();
    public void Save(string path);
    public void Save();
    public string SaveAsString();
    public string GetRaw(string variableName);
    public string Get(string variableName, string defaultValue);
    public string Get(string variableName, String& error, string defaultValue);
    public string Evaluate(string expressionOrVariableOrText, String& error, bool haltOnError);
    public bool EvaluateTruthy(string expressionOrVariableOrText);
    public string Evaluate(string expressionOrVariableOrText);
    public List`1<string> GetStrings(string variableName, Char[] separators);
    public List`1<string> GetPaths(string variableName);
    public bool GetFlag(string variableName, bool defaultValueIfUnset);
    public Nullable`1<int> GetInt32(string variableName);
    public string Require(string name);
    public List`1<string> GetNames();
    public List`1<string> GetIndexes(string variableCollectionName);
    public static bool CanEvaluationBeSkippedForExpression(string expressionOrVariableOrText);
    public sealed virtual IEnumerator`1<KeyValuePair`2<string, string>> GetEnumerator();
    private sealed virtual override IEnumerator System.Collections.IEnumerable.GetEnumerator();
    public void Add(string key, string value);
}
internal static class Octostache.VariablesFileFormatter : object {
    private static JsonSerializer serializer;
    private static Encoding fileEncoding;
    private static VariablesFileFormatter();
    public static void Populate(Dictionary`2<string, string> variables, string variablesFilePath);
    public static void Persist(Dictionary`2<string, string> variables, TextWriter output);
    public static void Persist(Dictionary`2<string, string> variables, string variablesFilePath);
}
