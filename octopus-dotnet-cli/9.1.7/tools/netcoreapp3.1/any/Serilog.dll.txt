public interface Serilog.Configuration.ILoggerSettings {
    public abstract virtual void Configure(LoggerConfiguration loggerConfiguration);
}
public class Serilog.Configuration.LoggerAuditSinkConfiguration : object {
    private LoggerSinkConfiguration _sinkConfiguration;
    internal LoggerAuditSinkConfiguration(LoggerConfiguration loggerConfiguration, Action`1<ILogEventSink> addSink, Action`1<LoggerConfiguration> applyInheritedConfiguration);
    public LoggerConfiguration Sink(ILogEventSink logEventSink, LogEventLevel restrictedToMinimumLevel, LoggingLevelSwitch levelSwitch);
    public LoggerConfiguration Sink(LogEventLevel restrictedToMinimumLevel, LoggingLevelSwitch levelSwitch);
    public LoggerConfiguration Logger(Action`1<LoggerConfiguration> configureLogger, LogEventLevel restrictedToMinimumLevel, LoggingLevelSwitch levelSwitch);
    public LoggerConfiguration Logger(ILogger logger, LogEventLevel restrictedToMinimumLevel);
}
public class Serilog.Configuration.LoggerDestructuringConfiguration : object {
    private LoggerConfiguration _loggerConfiguration;
    private Action`1<Type> _addScalar;
    private Action`1<IDestructuringPolicy> _addPolicy;
    private Action`1<int> _setMaximumDepth;
    internal LoggerDestructuringConfiguration(LoggerConfiguration loggerConfiguration, Action`1<Type> addScalar, Action`1<IDestructuringPolicy> addPolicy, Action`1<int> setMaximumDepth);
    public LoggerConfiguration AsScalar(Type scalarType);
    public LoggerConfiguration AsScalar();
    public LoggerConfiguration With(IDestructuringPolicy[] destructuringPolicies);
    public LoggerConfiguration With();
    public LoggerConfiguration ByTransforming(Func`2<TValue, object> transformation);
    public LoggerConfiguration ByTransformingWhere(Func`2<Type, bool> predicate, Func`2<TValue, object> transformation);
    public LoggerConfiguration ToMaximumDepth(int maximumDestructuringDepth);
}
public class Serilog.Configuration.LoggerEnrichmentConfiguration : object {
    private LoggerConfiguration _loggerConfiguration;
    private Action`1<ILogEventEnricher> _addEnricher;
    internal LoggerEnrichmentConfiguration(LoggerConfiguration loggerConfiguration, Action`1<ILogEventEnricher> addEnricher);
    public LoggerConfiguration With(ILogEventEnricher[] enrichers);
    public LoggerConfiguration With();
    public LoggerConfiguration WithProperty(string name, object value, bool destructureObjects);
    public LoggerConfiguration FromLogContext();
}
public class Serilog.Configuration.LoggerFilterConfiguration : object {
    private LoggerConfiguration _loggerConfiguration;
    private Action`1<ILogEventFilter> _addFilter;
    internal LoggerFilterConfiguration(LoggerConfiguration loggerConfiguration, Action`1<ILogEventFilter> addFilter);
    public LoggerConfiguration With(ILogEventFilter[] filters);
    public LoggerConfiguration With();
    public LoggerConfiguration ByExcluding(Func`2<LogEvent, bool> exclusionPredicate);
    public LoggerConfiguration ByIncludingOnly(Func`2<LogEvent, bool> inclusionPredicate);
}
public class Serilog.Configuration.LoggerMinimumLevelConfiguration : object {
    private LoggerConfiguration _loggerConfiguration;
    private Action`1<LogEventLevel> _setMinimum;
    private Action`1<LoggingLevelSwitch> _setLevelSwitch;
    private Action`2<string, LoggingLevelSwitch> _addOverride;
    internal LoggerMinimumLevelConfiguration(LoggerConfiguration loggerConfiguration, Action`1<LogEventLevel> setMinimum, Action`1<LoggingLevelSwitch> setLevelSwitch, Action`2<string, LoggingLevelSwitch> addOverride);
    public LoggerConfiguration Is(LogEventLevel minimumLevel);
    public LoggerConfiguration ControlledBy(LoggingLevelSwitch levelSwitch);
    public LoggerConfiguration Verbose();
    public LoggerConfiguration Debug();
    public LoggerConfiguration Information();
    public LoggerConfiguration Warning();
    public LoggerConfiguration Error();
    public LoggerConfiguration Fatal();
    public LoggerConfiguration Override(string source, LoggingLevelSwitch levelSwitch);
    public LoggerConfiguration Override(string source, LogEventLevel minimumLevel);
}
public class Serilog.Configuration.LoggerSettingsConfiguration : object {
    private LoggerConfiguration _loggerConfiguration;
    internal LoggerSettingsConfiguration(LoggerConfiguration loggerConfiguration);
    public LoggerConfiguration Settings(ILoggerSettings settings);
    public LoggerConfiguration KeyValuePairs(IEnumerable`1<KeyValuePair`2<string, string>> settings);
}
public class Serilog.Configuration.LoggerSinkConfiguration : object {
    private LoggerConfiguration _loggerConfiguration;
    private Action`1<ILogEventSink> _addSink;
    private Action`1<LoggerConfiguration> _applyInheritedConfiguration;
    internal LoggerSinkConfiguration(LoggerConfiguration loggerConfiguration, Action`1<ILogEventSink> addSink, Action`1<LoggerConfiguration> applyInheritedConfiguration);
    [EditorBrowsableAttribute("1")]
public LoggerConfiguration Sink(ILogEventSink logEventSink, LogEventLevel restrictedToMinimumLevel);
    public LoggerConfiguration Sink(ILogEventSink logEventSink, LogEventLevel restrictedToMinimumLevel, LoggingLevelSwitch levelSwitch);
    public LoggerConfiguration Sink(LogEventLevel restrictedToMinimumLevel, LoggingLevelSwitch levelSwitch);
    public LoggerConfiguration Logger(Action`1<LoggerConfiguration> configureLogger, LogEventLevel restrictedToMinimumLevel, LoggingLevelSwitch levelSwitch);
    public LoggerConfiguration Logger(ILogger logger, LogEventLevel restrictedToMinimumLevel);
}
internal class Serilog.Context.ImmutableStack`1 : object {
    private ImmutableStack`1<T> _under;
    private T _top;
    [CompilerGeneratedAttribute]
private int <Count>k__BackingField;
    [CompilerGeneratedAttribute]
private static ImmutableStack`1<T> <Empty>k__BackingField;
    public int Count { get; }
    public static ImmutableStack`1<T> Empty { get; }
    public bool IsEmpty { get; }
    public T Top { get; }
    private ImmutableStack`1(ImmutableStack`1<T> under, T top);
    private static ImmutableStack`1();
    [IteratorStateMachineAttribute("Serilog.Context.ImmutableStack`1/<GetEnumerator>d__4")]
public sealed virtual IEnumerator`1<T> GetEnumerator();
    private sealed virtual override IEnumerator System.Collections.IEnumerable.GetEnumerator();
    [CompilerGeneratedAttribute]
public int get_Count();
    [CompilerGeneratedAttribute]
public static ImmutableStack`1<T> get_Empty();
    public bool get_IsEmpty();
    public ImmutableStack`1<T> Push(T t);
    public T get_Top();
}
public static class Serilog.Context.LogContext : object {
    private static AsyncLocal`1<ImmutableStack`1<ILogEventEnricher>> Data;
    private static ImmutableStack`1<ILogEventEnricher> Enrichers { get; private set; }
    private static LogContext();
    public static IDisposable PushProperty(string name, object value, bool destructureObjects);
    public static IDisposable PushProperties(ILogEventEnricher[] properties);
    private static ImmutableStack`1<ILogEventEnricher> GetOrCreateEnricherStack();
    internal static void Enrich(LogEvent logEvent, ILogEventPropertyFactory propertyFactory);
    private static ImmutableStack`1<ILogEventEnricher> get_Enrichers();
    private static void set_Enrichers(ImmutableStack`1<ILogEventEnricher> value);
}
public static class Serilog.Core.Constants : object {
    public static string SourceContextPropertyName;
}
internal class Serilog.Core.Enrichers.EmptyEnricher : object {
    public sealed virtual void Enrich(LogEvent logEvent, ILogEventPropertyFactory propertyFactory);
}
internal class Serilog.Core.Enrichers.FixedPropertyEnricher : object {
    private LogEventProperty _logEventProperty;
    public FixedPropertyEnricher(LogEventProperty logEventProperty);
    public sealed virtual void Enrich(LogEvent logEvent, ILogEventPropertyFactory propertyFactory);
}
public class Serilog.Core.Enrichers.PropertyEnricher : object {
    private string _name;
    private object _value;
    private bool _destructureObjects;
    public PropertyEnricher(string name, object value, bool destructureObjects);
    public sealed virtual void Enrich(LogEvent logEvent, ILogEventPropertyFactory propertyFactory);
}
internal class Serilog.Core.Enrichers.SafeAggregateEnricher : object {
    private ILogEventEnricher[] _enrichers;
    public SafeAggregateEnricher(IEnumerable`1<ILogEventEnricher> enrichers);
    public sealed virtual void Enrich(LogEvent logEvent, ILogEventPropertyFactory propertyFactory);
}
internal class Serilog.Core.Filters.DelegateFilter : object {
    private Func`2<LogEvent, bool> _isEnabled;
    public DelegateFilter(Func`2<LogEvent, bool> isEnabled);
    public sealed virtual bool IsEnabled(LogEvent logEvent);
}
public interface Serilog.Core.IDestructuringPolicy {
    public abstract virtual bool TryDestructure(object value, ILogEventPropertyValueFactory propertyValueFactory, LogEventPropertyValue& result);
}
public interface Serilog.Core.ILogEventEnricher {
    public abstract virtual void Enrich(LogEvent logEvent, ILogEventPropertyFactory propertyFactory);
}
public interface Serilog.Core.ILogEventFilter {
    public abstract virtual bool IsEnabled(LogEvent logEvent);
}
public interface Serilog.Core.ILogEventPropertyFactory {
    public abstract virtual LogEventProperty CreateProperty(string name, object value, bool destructureObjects);
}
public interface Serilog.Core.ILogEventPropertyValueFactory {
    public abstract virtual LogEventPropertyValue CreatePropertyValue(object value, bool destructureObjects);
}
public interface Serilog.Core.ILogEventSink {
    public abstract virtual void Emit(LogEvent logEvent);
}
internal interface Serilog.Core.IMessageTemplateParser {
    public abstract virtual MessageTemplate Parse(string messageTemplate);
}
internal interface Serilog.Core.IScalarConversionPolicy {
    public abstract virtual bool TryConvertToScalar(object value, ILogEventPropertyValueFactory propertyValueFactory, ScalarValue& result);
}
internal class Serilog.Core.LevelOverrideMap : object {
    private LogEventLevel _defaultMinimumLevel;
    private LoggingLevelSwitch _defaultLevelSwitch;
    private LevelOverride[] _overrides;
    public LevelOverrideMap(IDictionary`2<string, LoggingLevelSwitch> overrides, LogEventLevel defaultMinimumLevel, LoggingLevelSwitch defaultLevelSwitch);
    public void GetEffectiveLevel(string context, LogEventLevel& minimumLevel, LoggingLevelSwitch& levelSwitch);
}
public class Serilog.Core.Logger : object {
    private static Object[] NoPropertyValues;
    private MessageTemplateProcessor _messageTemplateProcessor;
    private ILogEventSink _sink;
    private Action _dispose;
    private ILogEventEnricher _enricher;
    private LogEventLevel _minimumLevel;
    private LoggingLevelSwitch _levelSwitch;
    private LevelOverrideMap _overrideMap;
    internal Logger(MessageTemplateProcessor messageTemplateProcessor, LogEventLevel minimumLevel, ILogEventSink sink, ILogEventEnricher enricher, Action dispose, LevelOverrideMap overrideMap);
    internal Logger(MessageTemplateProcessor messageTemplateProcessor, LoggingLevelSwitch levelSwitch, ILogEventSink sink, ILogEventEnricher enricher, Action dispose, LevelOverrideMap overrideMap);
    private Logger(MessageTemplateProcessor messageTemplateProcessor, LogEventLevel minimumLevel, ILogEventSink sink, ILogEventEnricher enricher, Action dispose, LoggingLevelSwitch levelSwitch, LevelOverrideMap overrideMap);
    private static Logger();
    public sealed virtual ILogger ForContext(ILogEventEnricher enricher);
    public sealed virtual ILogger ForContext(IEnumerable`1<ILogEventEnricher> enrichers);
    public sealed virtual ILogger ForContext(string propertyName, object value, bool destructureObjects);
    public sealed virtual ILogger ForContext(Type source);
    public sealed virtual ILogger ForContext();
    [MessageTemplateFormatMethodAttribute("messageTemplate")]
public sealed virtual void Write(LogEventLevel level, string messageTemplate);
    [MessageTemplateFormatMethodAttribute("messageTemplate")]
public sealed virtual void Write(LogEventLevel level, string messageTemplate, T propertyValue);
    [MessageTemplateFormatMethodAttribute("messageTemplate")]
public sealed virtual void Write(LogEventLevel level, string messageTemplate, T0 propertyValue0, T1 propertyValue1);
    [MessageTemplateFormatMethodAttribute("messageTemplate")]
public sealed virtual void Write(LogEventLevel level, string messageTemplate, T0 propertyValue0, T1 propertyValue1, T2 propertyValue2);
    [MessageTemplateFormatMethodAttribute("messageTemplate")]
public sealed virtual void Write(LogEventLevel level, string messageTemplate, Object[] propertyValues);
    public sealed virtual bool IsEnabled(LogEventLevel level);
    [MessageTemplateFormatMethodAttribute("messageTemplate")]
public sealed virtual void Write(LogEventLevel level, Exception exception, string messageTemplate);
    [MessageTemplateFormatMethodAttribute("messageTemplate")]
public sealed virtual void Write(LogEventLevel level, Exception exception, string messageTemplate, T propertyValue);
    [MessageTemplateFormatMethodAttribute("messageTemplate")]
public sealed virtual void Write(LogEventLevel level, Exception exception, string messageTemplate, T0 propertyValue0, T1 propertyValue1);
    [MessageTemplateFormatMethodAttribute("messageTemplate")]
public sealed virtual void Write(LogEventLevel level, Exception exception, string messageTemplate, T0 propertyValue0, T1 propertyValue1, T2 propertyValue2);
    [MessageTemplateFormatMethodAttribute("messageTemplate")]
public sealed virtual void Write(LogEventLevel level, Exception exception, string messageTemplate, Object[] propertyValues);
    public sealed virtual void Write(LogEvent logEvent);
    private sealed virtual override void Serilog.Core.ILogEventSink.Emit(LogEvent logEvent);
    private void Dispatch(LogEvent logEvent);
    [MessageTemplateFormatMethodAttribute("messageTemplate")]
public sealed virtual void Verbose(string messageTemplate);
    [MessageTemplateFormatMethodAttribute("messageTemplate")]
public sealed virtual void Verbose(string messageTemplate, T propertyValue);
    [MessageTemplateFormatMethodAttribute("messageTemplate")]
public sealed virtual void Verbose(string messageTemplate, T0 propertyValue0, T1 propertyValue1);
    [MessageTemplateFormatMethodAttribute("messageTemplate")]
public sealed virtual void Verbose(string messageTemplate, T0 propertyValue0, T1 propertyValue1, T2 propertyValue2);
    [MessageTemplateFormatMethodAttribute("messageTemplate")]
public sealed virtual void Verbose(string messageTemplate, Object[] propertyValues);
    [MessageTemplateFormatMethodAttribute("messageTemplate")]
public sealed virtual void Verbose(Exception exception, string messageTemplate);
    [MessageTemplateFormatMethodAttribute("messageTemplate")]
public sealed virtual void Verbose(Exception exception, string messageTemplate, T propertyValue);
    [MessageTemplateFormatMethodAttribute("messageTemplate")]
public sealed virtual void Verbose(Exception exception, string messageTemplate, T0 propertyValue0, T1 propertyValue1);
    [MessageTemplateFormatMethodAttribute("messageTemplate")]
public sealed virtual void Verbose(Exception exception, string messageTemplate, T0 propertyValue0, T1 propertyValue1, T2 propertyValue2);
    [MessageTemplateFormatMethodAttribute("messageTemplate")]
public sealed virtual void Verbose(Exception exception, string messageTemplate, Object[] propertyValues);
    [MessageTemplateFormatMethodAttribute("messageTemplate")]
public sealed virtual void Debug(string messageTemplate);
    [MessageTemplateFormatMethodAttribute("messageTemplate")]
public sealed virtual void Debug(string messageTemplate, T propertyValue);
    [MessageTemplateFormatMethodAttribute("messageTemplate")]
public sealed virtual void Debug(string messageTemplate, T0 propertyValue0, T1 propertyValue1);
    [MessageTemplateFormatMethodAttribute("messageTemplate")]
public sealed virtual void Debug(string messageTemplate, T0 propertyValue0, T1 propertyValue1, T2 propertyValue2);
    [MessageTemplateFormatMethodAttribute("messageTemplate")]
public sealed virtual void Debug(string messageTemplate, Object[] propertyValues);
    [MessageTemplateFormatMethodAttribute("messageTemplate")]
public sealed virtual void Debug(Exception exception, string messageTemplate);
    [MessageTemplateFormatMethodAttribute("messageTemplate")]
public sealed virtual void Debug(Exception exception, string messageTemplate, T propertyValue);
    [MessageTemplateFormatMethodAttribute("messageTemplate")]
public sealed virtual void Debug(Exception exception, string messageTemplate, T0 propertyValue0, T1 propertyValue1);
    [MessageTemplateFormatMethodAttribute("messageTemplate")]
public sealed virtual void Debug(Exception exception, string messageTemplate, T0 propertyValue0, T1 propertyValue1, T2 propertyValue2);
    [MessageTemplateFormatMethodAttribute("messageTemplate")]
public sealed virtual void Debug(Exception exception, string messageTemplate, Object[] propertyValues);
    [MessageTemplateFormatMethodAttribute("messageTemplate")]
public sealed virtual void Information(string messageTemplate);
    [MessageTemplateFormatMethodAttribute("messageTemplate")]
public sealed virtual void Information(string messageTemplate, T propertyValue);
    [MessageTemplateFormatMethodAttribute("messageTemplate")]
public sealed virtual void Information(string messageTemplate, T0 propertyValue0, T1 propertyValue1);
    [MessageTemplateFormatMethodAttribute("messageTemplate")]
public sealed virtual void Information(string messageTemplate, T0 propertyValue0, T1 propertyValue1, T2 propertyValue2);
    [MessageTemplateFormatMethodAttribute("messageTemplate")]
public sealed virtual void Information(string messageTemplate, Object[] propertyValues);
    [MessageTemplateFormatMethodAttribute("messageTemplate")]
public sealed virtual void Information(Exception exception, string messageTemplate);
    [MessageTemplateFormatMethodAttribute("messageTemplate")]
public sealed virtual void Information(Exception exception, string messageTemplate, T propertyValue);
    [MessageTemplateFormatMethodAttribute("messageTemplate")]
public sealed virtual void Information(Exception exception, string messageTemplate, T0 propertyValue0, T1 propertyValue1);
    [MessageTemplateFormatMethodAttribute("messageTemplate")]
public sealed virtual void Information(Exception exception, string messageTemplate, T0 propertyValue0, T1 propertyValue1, T2 propertyValue2);
    [MessageTemplateFormatMethodAttribute("messageTemplate")]
public sealed virtual void Information(Exception exception, string messageTemplate, Object[] propertyValues);
    [MessageTemplateFormatMethodAttribute("messageTemplate")]
public sealed virtual void Warning(string messageTemplate);
    [MessageTemplateFormatMethodAttribute("messageTemplate")]
public sealed virtual void Warning(string messageTemplate, T propertyValue);
    [MessageTemplateFormatMethodAttribute("messageTemplate")]
public sealed virtual void Warning(string messageTemplate, T0 propertyValue0, T1 propertyValue1);
    [MessageTemplateFormatMethodAttribute("messageTemplate")]
public sealed virtual void Warning(string messageTemplate, T0 propertyValue0, T1 propertyValue1, T2 propertyValue2);
    [MessageTemplateFormatMethodAttribute("messageTemplate")]
public sealed virtual void Warning(string messageTemplate, Object[] propertyValues);
    [MessageTemplateFormatMethodAttribute("messageTemplate")]
public sealed virtual void Warning(Exception exception, string messageTemplate);
    [MessageTemplateFormatMethodAttribute("messageTemplate")]
public sealed virtual void Warning(Exception exception, string messageTemplate, T propertyValue);
    [MessageTemplateFormatMethodAttribute("messageTemplate")]
public sealed virtual void Warning(Exception exception, string messageTemplate, T0 propertyValue0, T1 propertyValue1);
    [MessageTemplateFormatMethodAttribute("messageTemplate")]
public sealed virtual void Warning(Exception exception, string messageTemplate, T0 propertyValue0, T1 propertyValue1, T2 propertyValue2);
    [MessageTemplateFormatMethodAttribute("messageTemplate")]
public sealed virtual void Warning(Exception exception, string messageTemplate, Object[] propertyValues);
    [MessageTemplateFormatMethodAttribute("messageTemplate")]
public sealed virtual void Error(string messageTemplate);
    [MessageTemplateFormatMethodAttribute("messageTemplate")]
public sealed virtual void Error(string messageTemplate, T propertyValue);
    [MessageTemplateFormatMethodAttribute("messageTemplate")]
public sealed virtual void Error(string messageTemplate, T0 propertyValue0, T1 propertyValue1);
    [MessageTemplateFormatMethodAttribute("messageTemplate")]
public sealed virtual void Error(string messageTemplate, T0 propertyValue0, T1 propertyValue1, T2 propertyValue2);
    [MessageTemplateFormatMethodAttribute("messageTemplate")]
public sealed virtual void Error(string messageTemplate, Object[] propertyValues);
    [MessageTemplateFormatMethodAttribute("messageTemplate")]
public sealed virtual void Error(Exception exception, string messageTemplate);
    [MessageTemplateFormatMethodAttribute("messageTemplate")]
public sealed virtual void Error(Exception exception, string messageTemplate, T propertyValue);
    [MessageTemplateFormatMethodAttribute("messageTemplate")]
public sealed virtual void Error(Exception exception, string messageTemplate, T0 propertyValue0, T1 propertyValue1);
    [MessageTemplateFormatMethodAttribute("messageTemplate")]
public sealed virtual void Error(Exception exception, string messageTemplate, T0 propertyValue0, T1 propertyValue1, T2 propertyValue2);
    [MessageTemplateFormatMethodAttribute("messageTemplate")]
public sealed virtual void Error(Exception exception, string messageTemplate, Object[] propertyValues);
    [MessageTemplateFormatMethodAttribute("messageTemplate")]
public sealed virtual void Fatal(string messageTemplate);
    [MessageTemplateFormatMethodAttribute("messageTemplate")]
public sealed virtual void Fatal(string messageTemplate, T propertyValue);
    [MessageTemplateFormatMethodAttribute("messageTemplate")]
public sealed virtual void Fatal(string messageTemplate, T0 propertyValue0, T1 propertyValue1);
    [MessageTemplateFormatMethodAttribute("messageTemplate")]
public sealed virtual void Fatal(string messageTemplate, T0 propertyValue0, T1 propertyValue1, T2 propertyValue2);
    [MessageTemplateFormatMethodAttribute("messageTemplate")]
public sealed virtual void Fatal(string messageTemplate, Object[] propertyValues);
    [MessageTemplateFormatMethodAttribute("messageTemplate")]
public sealed virtual void Fatal(Exception exception, string messageTemplate);
    [MessageTemplateFormatMethodAttribute("messageTemplate")]
public sealed virtual void Fatal(Exception exception, string messageTemplate, T propertyValue);
    [MessageTemplateFormatMethodAttribute("messageTemplate")]
public sealed virtual void Fatal(Exception exception, string messageTemplate, T0 propertyValue0, T1 propertyValue1);
    [MessageTemplateFormatMethodAttribute("messageTemplate")]
public sealed virtual void Fatal(Exception exception, string messageTemplate, T0 propertyValue0, T1 propertyValue1, T2 propertyValue2);
    [MessageTemplateFormatMethodAttribute("messageTemplate")]
public sealed virtual void Fatal(Exception exception, string messageTemplate, Object[] propertyValues);
    [MessageTemplateFormatMethodAttribute("messageTemplate")]
public sealed virtual bool BindMessageTemplate(string messageTemplate, Object[] propertyValues, MessageTemplate& parsedTemplate, IEnumerable`1& boundProperties);
    public sealed virtual bool BindProperty(string propertyName, object value, bool destructureObjects, LogEventProperty& property);
    public sealed virtual void Dispose();
}
public class Serilog.Core.LoggingLevelSwitch : object {
    private LogEventLevel modreq(System.Runtime.CompilerServices.IsVolatile) _minimumLevel;
    public LogEventLevel MinimumLevel { get; public set; }
    public LoggingLevelSwitch(LogEventLevel initialMinimumLevel);
    public LogEventLevel get_MinimumLevel();
    public void set_MinimumLevel(LogEventLevel value);
}
[AttributeUsageAttribute("96")]
public class Serilog.Core.MessageTemplateFormatMethodAttribute : Attribute {
    [CompilerGeneratedAttribute]
private string <MessageTemplateParameterName>k__BackingField;
    public string MessageTemplateParameterName { get; private set; }
    public MessageTemplateFormatMethodAttribute(string messageTemplateParameterName);
    [CompilerGeneratedAttribute]
public string get_MessageTemplateParameterName();
    [CompilerGeneratedAttribute]
private void set_MessageTemplateParameterName(string value);
}
internal class Serilog.Core.Pipeline.MessageTemplateCache : object {
    private IMessageTemplateParser _innerParser;
    private Dictionary`2<string, MessageTemplate> _templates;
    private object _templatesLock;
    private static int MaxCacheItems;
    private static int MaxCachedTemplateLength;
    public MessageTemplateCache(IMessageTemplateParser innerParser);
    public sealed virtual MessageTemplate Parse(string messageTemplate);
}
internal class Serilog.Core.Pipeline.SilentLogger : object {
    public sealed virtual ILogger ForContext(ILogEventEnricher enricher);
    public sealed virtual ILogger ForContext(IEnumerable`1<ILogEventEnricher> enrichers);
    public sealed virtual ILogger ForContext(string propertyName, object value, bool destructureObjects);
    public sealed virtual ILogger ForContext();
    public sealed virtual ILogger ForContext(Type source);
    public sealed virtual void Write(LogEvent logEvent);
    public sealed virtual void Write(LogEventLevel level, string messageTemplate);
    public sealed virtual void Write(LogEventLevel level, string messageTemplate, T propertyValue);
    public sealed virtual void Write(LogEventLevel level, string messageTemplate, T0 propertyValue0, T1 propertyValue1);
    public sealed virtual void Write(LogEventLevel level, string messageTemplate, T0 propertyValue0, T1 propertyValue1, T2 propertyValue2);
    public sealed virtual void Write(LogEventLevel level, string messageTemplate, Object[] propertyValues);
    public sealed virtual void Write(LogEventLevel level, Exception exception, string messageTemplate);
    public sealed virtual void Write(LogEventLevel level, Exception exception, string messageTemplate, T propertyValue);
    public sealed virtual void Write(LogEventLevel level, Exception exception, string messageTemplate, T0 propertyValue0, T1 propertyValue1);
    public sealed virtual void Write(LogEventLevel level, Exception exception, string messageTemplate, T0 propertyValue0, T1 propertyValue1, T2 propertyValue2);
    public sealed virtual void Write(LogEventLevel level, Exception exception, string messageTemplate, Object[] propertyValues);
    public sealed virtual bool IsEnabled(LogEventLevel level);
    public sealed virtual void Verbose(string messageTemplate);
    public sealed virtual void Verbose(string messageTemplate, T propertyValue);
    public sealed virtual void Verbose(string messageTemplate, T0 propertyValue0, T1 propertyValue1);
    public sealed virtual void Verbose(string messageTemplate, T0 propertyValue0, T1 propertyValue1, T2 propertyValue2);
    public sealed virtual void Verbose(string messageTemplate, Object[] propertyValues);
    public sealed virtual void Verbose(Exception exception, string messageTemplate);
    public sealed virtual void Verbose(Exception exception, string messageTemplate, T propertyValue);
    public sealed virtual void Verbose(Exception exception, string messageTemplate, T0 propertyValue0, T1 propertyValue1);
    public sealed virtual void Verbose(Exception exception, string messageTemplate, T0 propertyValue0, T1 propertyValue1, T2 propertyValue2);
    public sealed virtual void Verbose(Exception exception, string messageTemplate, Object[] propertyValues);
    public sealed virtual void Debug(string messageTemplate);
    public sealed virtual void Debug(string messageTemplate, T propertyValue);
    public sealed virtual void Debug(string messageTemplate, T0 propertyValue0, T1 propertyValue1);
    public sealed virtual void Debug(string messageTemplate, T0 propertyValue0, T1 propertyValue1, T2 propertyValue2);
    public sealed virtual void Debug(string messageTemplate, Object[] propertyValues);
    public sealed virtual void Debug(Exception exception, string messageTemplate);
    public sealed virtual void Debug(Exception exception, string messageTemplate, T propertyValue);
    public sealed virtual void Debug(Exception exception, string messageTemplate, T0 propertyValue0, T1 propertyValue1);
    public sealed virtual void Debug(Exception exception, string messageTemplate, T0 propertyValue0, T1 propertyValue1, T2 propertyValue2);
    public sealed virtual void Debug(Exception exception, string messageTemplate, Object[] propertyValues);
    public sealed virtual void Information(string messageTemplate);
    public sealed virtual void Information(string messageTemplate, T propertyValue);
    public sealed virtual void Information(string messageTemplate, T0 propertyValue0, T1 propertyValue1);
    public sealed virtual void Information(string messageTemplate, T0 propertyValue0, T1 propertyValue1, T2 propertyValue2);
    public sealed virtual void Information(string messageTemplate, Object[] propertyValues);
    public sealed virtual void Information(Exception exception, string messageTemplate);
    public sealed virtual void Information(Exception exception, string messageTemplate, T propertyValue);
    public sealed virtual void Information(Exception exception, string messageTemplate, T0 propertyValue0, T1 propertyValue1);
    public sealed virtual void Information(Exception exception, string messageTemplate, T0 propertyValue0, T1 propertyValue1, T2 propertyValue2);
    public sealed virtual void Information(Exception exception, string messageTemplate, Object[] propertyValues);
    public sealed virtual void Warning(string messageTemplate);
    public sealed virtual void Warning(string messageTemplate, T propertyValue);
    public sealed virtual void Warning(string messageTemplate, T0 propertyValue0, T1 propertyValue1);
    public sealed virtual void Warning(string messageTemplate, T0 propertyValue0, T1 propertyValue1, T2 propertyValue2);
    public sealed virtual void Warning(string messageTemplate, Object[] propertyValues);
    public sealed virtual void Warning(Exception exception, string messageTemplate);
    public sealed virtual void Warning(Exception exception, string messageTemplate, T propertyValue);
    public sealed virtual void Warning(Exception exception, string messageTemplate, T0 propertyValue0, T1 propertyValue1);
    public sealed virtual void Warning(Exception exception, string messageTemplate, T0 propertyValue0, T1 propertyValue1, T2 propertyValue2);
    public sealed virtual void Warning(Exception exception, string messageTemplate, Object[] propertyValues);
    public sealed virtual void Error(string messageTemplate);
    public sealed virtual void Error(string messageTemplate, T propertyValue);
    public sealed virtual void Error(string messageTemplate, T0 propertyValue0, T1 propertyValue1);
    public sealed virtual void Error(string messageTemplate, T0 propertyValue0, T1 propertyValue1, T2 propertyValue2);
    public sealed virtual void Error(string messageTemplate, Object[] propertyValues);
    public sealed virtual void Error(Exception exception, string messageTemplate);
    public sealed virtual void Error(Exception exception, string messageTemplate, T propertyValue);
    public sealed virtual void Error(Exception exception, string messageTemplate, T0 propertyValue0, T1 propertyValue1);
    public sealed virtual void Error(Exception exception, string messageTemplate, T0 propertyValue0, T1 propertyValue1, T2 propertyValue2);
    public sealed virtual void Error(Exception exception, string messageTemplate, Object[] propertyValues);
    public sealed virtual void Fatal(string messageTemplate);
    public sealed virtual void Fatal(string messageTemplate, T propertyValue);
    public sealed virtual void Fatal(string messageTemplate, T0 propertyValue0, T1 propertyValue1);
    public sealed virtual void Fatal(string messageTemplate, T0 propertyValue0, T1 propertyValue1, T2 propertyValue2);
    public sealed virtual void Fatal(string messageTemplate, Object[] propertyValues);
    public sealed virtual void Fatal(Exception exception, string messageTemplate);
    public sealed virtual void Fatal(Exception exception, string messageTemplate, T propertyValue);
    public sealed virtual void Fatal(Exception exception, string messageTemplate, T0 propertyValue0, T1 propertyValue1);
    public sealed virtual void Fatal(Exception exception, string messageTemplate, T0 propertyValue0, T1 propertyValue1, T2 propertyValue2);
    public sealed virtual void Fatal(Exception exception, string messageTemplate, Object[] propertyValues);
    [MessageTemplateFormatMethodAttribute("messageTemplate")]
public sealed virtual bool BindMessageTemplate(string messageTemplate, Object[] propertyValues, MessageTemplate& parsedTemplate, IEnumerable`1& boundProperties);
    public sealed virtual bool BindProperty(string propertyName, object value, bool destructureObjects, LogEventProperty& property);
}
internal class Serilog.Core.Sinks.AggregateSink : object {
    private ILogEventSink[] _sinks;
    public AggregateSink(IEnumerable`1<ILogEventSink> sinks);
    public sealed virtual void Emit(LogEvent logEvent);
}
internal class Serilog.Core.Sinks.FilteringSink : object {
    private ILogEventSink _sink;
    private bool _propagateExceptions;
    private ILogEventFilter[] _filters;
    public FilteringSink(ILogEventSink sink, IEnumerable`1<ILogEventFilter> filters, bool propagateExceptions);
    public sealed virtual void Emit(LogEvent logEvent);
}
internal class Serilog.Core.Sinks.RestrictedSink : object {
    private ILogEventSink _sink;
    private LoggingLevelSwitch _levelSwitch;
    public RestrictedSink(ILogEventSink sink, LoggingLevelSwitch levelSwitch);
    public sealed virtual void Emit(LogEvent logEvent);
    public sealed virtual void Dispose();
}
internal class Serilog.Core.Sinks.SafeAggregateSink : object {
    private ILogEventSink[] _sinks;
    public SafeAggregateSink(IEnumerable`1<ILogEventSink> sinks);
    public sealed virtual void Emit(LogEvent logEvent);
}
internal class Serilog.Core.Sinks.SecondaryLoggerSink : object {
    private ILogger _logger;
    private bool _attemptDispose;
    public SecondaryLoggerSink(ILogger logger, bool attemptDispose);
    public sealed virtual void Emit(LogEvent logEvent);
    public sealed virtual void Dispose();
}
public abstract class Serilog.Data.LogEventPropertyValueRewriter`1 : LogEventPropertyValueVisitor`2<TState, LogEventPropertyValue> {
    protected virtual LogEventPropertyValue VisitScalarValue(TState state, ScalarValue scalar);
    protected virtual LogEventPropertyValue VisitSequenceValue(TState state, SequenceValue sequence);
    protected virtual LogEventPropertyValue VisitStructureValue(TState state, StructureValue structure);
    protected virtual LogEventPropertyValue VisitDictionaryValue(TState state, DictionaryValue dictionary);
    protected virtual LogEventPropertyValue VisitUnsupportedValue(TState state, LogEventPropertyValue value);
}
public abstract class Serilog.Data.LogEventPropertyValueVisitor`2 : object {
    protected virtual TResult Visit(TState state, LogEventPropertyValue value);
    protected abstract virtual TResult VisitScalarValue(TState state, ScalarValue scalar);
    protected abstract virtual TResult VisitSequenceValue(TState state, SequenceValue sequence);
    protected abstract virtual TResult VisitStructureValue(TState state, StructureValue structure);
    protected abstract virtual TResult VisitDictionaryValue(TState state, DictionaryValue dictionary);
    protected virtual TResult VisitUnsupportedValue(TState state, LogEventPropertyValue value);
}
public class Serilog.Debugging.LoggingFailedException : Exception {
    public LoggingFailedException(string message);
}
public static class Serilog.Debugging.SelfLog : object {
    private static Action`1<string> _output;
    [ObsoleteAttribute("Use SelfLog.Enable(value) and SelfLog.Disable() instead")]
unknown static TextWriter Out {public set; }
    public static void set_Out(TextWriter value);
    public static void Enable(TextWriter output);
    public static void Enable(Action`1<string> output);
    public static void Disable();
    public static void WriteLine(string format, object arg0, object arg1, object arg2);
}
internal class Serilog.Enrichers.LogContextEnricher : object {
    public sealed virtual void Enrich(LogEvent logEvent, ILogEventPropertyFactory propertyFactory);
}
public class Serilog.Events.DictionaryValue : LogEventPropertyValue {
    [CompilerGeneratedAttribute]
private IReadOnlyDictionary`2<ScalarValue, LogEventPropertyValue> <Elements>k__BackingField;
    public IReadOnlyDictionary`2<ScalarValue, LogEventPropertyValue> Elements { get; }
    public DictionaryValue(IEnumerable`1<KeyValuePair`2<ScalarValue, LogEventPropertyValue>> elements);
    [CompilerGeneratedAttribute]
public IReadOnlyDictionary`2<ScalarValue, LogEventPropertyValue> get_Elements();
    public virtual void Render(TextWriter output, string format, IFormatProvider formatProvider);
}
public static class Serilog.Events.LevelAlias : object {
    public static LogEventLevel Minimum;
    public static LogEventLevel Maximum;
}
public class Serilog.Events.LogEvent : object {
    private Dictionary`2<string, LogEventPropertyValue> _properties;
    [CompilerGeneratedAttribute]
private DateTimeOffset <Timestamp>k__BackingField;
    [CompilerGeneratedAttribute]
private LogEventLevel <Level>k__BackingField;
    [CompilerGeneratedAttribute]
private MessageTemplate <MessageTemplate>k__BackingField;
    [CompilerGeneratedAttribute]
private Exception <Exception>k__BackingField;
    public DateTimeOffset Timestamp { get; }
    public LogEventLevel Level { get; }
    public MessageTemplate MessageTemplate { get; }
    public IReadOnlyDictionary`2<string, LogEventPropertyValue> Properties { get; }
    public Exception Exception { get; }
    public LogEvent(DateTimeOffset timestamp, LogEventLevel level, Exception exception, MessageTemplate messageTemplate, IEnumerable`1<LogEventProperty> properties);
    [CompilerGeneratedAttribute]
public DateTimeOffset get_Timestamp();
    [CompilerGeneratedAttribute]
public LogEventLevel get_Level();
    [CompilerGeneratedAttribute]
public MessageTemplate get_MessageTemplate();
    public void RenderMessage(TextWriter output, IFormatProvider formatProvider);
    public string RenderMessage(IFormatProvider formatProvider);
    public IReadOnlyDictionary`2<string, LogEventPropertyValue> get_Properties();
    [CompilerGeneratedAttribute]
public Exception get_Exception();
    public void AddOrUpdateProperty(LogEventProperty property);
    public void AddPropertyIfAbsent(LogEventProperty property);
    public void RemovePropertyIfPresent(string propertyName);
}
public enum Serilog.Events.LogEventLevel : Enum {
    public int value__;
    public static LogEventLevel Verbose;
    public static LogEventLevel Debug;
    public static LogEventLevel Information;
    public static LogEventLevel Warning;
    public static LogEventLevel Error;
    public static LogEventLevel Fatal;
}
public class Serilog.Events.LogEventProperty : object {
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    [CompilerGeneratedAttribute]
private LogEventPropertyValue <Value>k__BackingField;
    public string Name { get; }
    public LogEventPropertyValue Value { get; }
    public LogEventProperty(string name, LogEventPropertyValue value);
    [CompilerGeneratedAttribute]
public string get_Name();
    [CompilerGeneratedAttribute]
public LogEventPropertyValue get_Value();
    public static bool IsValidName(string name);
}
public abstract class Serilog.Events.LogEventPropertyValue : object {
    public abstract virtual void Render(TextWriter output, string format, IFormatProvider formatProvider);
    public virtual string ToString();
    public sealed virtual string ToString(string format, IFormatProvider formatProvider);
}
public class Serilog.Events.MessageTemplate : object {
    private MessageTemplateToken[] _tokens;
    [CompilerGeneratedAttribute]
private string <Text>k__BackingField;
    [CompilerGeneratedAttribute]
private PropertyToken[] <NamedProperties>k__BackingField;
    [CompilerGeneratedAttribute]
private PropertyToken[] <PositionalProperties>k__BackingField;
    public string Text { get; }
    public IEnumerable`1<MessageTemplateToken> Tokens { get; }
    internal PropertyToken[] NamedProperties { get; }
    internal PropertyToken[] PositionalProperties { get; }
    public MessageTemplate(IEnumerable`1<MessageTemplateToken> tokens);
    public MessageTemplate(string text, IEnumerable`1<MessageTemplateToken> tokens);
    private static TResult[] GetElementsOfTypeToArray(Object[] tokens);
    [CompilerGeneratedAttribute]
public string get_Text();
    public virtual string ToString();
    public IEnumerable`1<MessageTemplateToken> get_Tokens();
    [CompilerGeneratedAttribute]
internal PropertyToken[] get_NamedProperties();
    [CompilerGeneratedAttribute]
internal PropertyToken[] get_PositionalProperties();
    public string Render(IReadOnlyDictionary`2<string, LogEventPropertyValue> properties, IFormatProvider formatProvider);
    public void Render(IReadOnlyDictionary`2<string, LogEventPropertyValue> properties, TextWriter output, IFormatProvider formatProvider);
}
public class Serilog.Events.ScalarValue : LogEventPropertyValue {
    [CompilerGeneratedAttribute]
private object <Value>k__BackingField;
    public object Value { get; }
    public ScalarValue(object value);
    [CompilerGeneratedAttribute]
public object get_Value();
    public virtual void Render(TextWriter output, string format, IFormatProvider formatProvider);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
}
public class Serilog.Events.SequenceValue : LogEventPropertyValue {
    private LogEventPropertyValue[] _elements;
    public IReadOnlyList`1<LogEventPropertyValue> Elements { get; }
    public SequenceValue(IEnumerable`1<LogEventPropertyValue> elements);
    public IReadOnlyList`1<LogEventPropertyValue> get_Elements();
    public virtual void Render(TextWriter output, string format, IFormatProvider formatProvider);
}
public class Serilog.Events.StructureValue : LogEventPropertyValue {
    private LogEventProperty[] _properties;
    [CompilerGeneratedAttribute]
private string <TypeTag>k__BackingField;
    public string TypeTag { get; }
    public IReadOnlyList`1<LogEventProperty> Properties { get; }
    public StructureValue(IEnumerable`1<LogEventProperty> properties, string typeTag);
    [CompilerGeneratedAttribute]
public string get_TypeTag();
    public IReadOnlyList`1<LogEventProperty> get_Properties();
    public virtual void Render(TextWriter output, string format, IFormatProvider formatProvider);
    private static void Render(TextWriter output, LogEventProperty property, IFormatProvider formatProvider);
}
public static class Serilog.Filters.Matching : object {
    public static Func`2<LogEvent, bool> FromSource();
    public static Func`2<LogEvent, bool> FromSource(string source);
    public static Func`2<LogEvent, bool> WithProperty(string propertyName);
    public static Func`2<LogEvent, bool> WithProperty(string propertyName, object scalarValue);
    public static Func`2<LogEvent, bool> WithProperty(string propertyName, Func`2<TScalar, bool> predicate);
}
internal static class Serilog.Formatting.Display.Casing : object {
    public static string Format(string value, string format);
}
internal class Serilog.Formatting.Display.LiteralStringValue : LogEventPropertyValue {
    private string _value;
    public LiteralStringValue(string value);
    public virtual void Render(TextWriter output, string format, IFormatProvider formatProvider);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
}
internal class Serilog.Formatting.Display.LogEventLevelValue : LogEventPropertyValue {
    private LogEventLevel _value;
    private static String[][] _titleCaseLevelMap;
    private static String[][] _lowercaseLevelMap;
    private static String[][] _uppercaseLevelMap;
    public LogEventLevelValue(LogEventLevel value);
    private static LogEventLevelValue();
    public virtual void Render(TextWriter output, string format, IFormatProvider formatProvider);
}
internal class Serilog.Formatting.Display.LogEventPropertyMessageValue : LogEventPropertyValue {
    private MessageTemplate _template;
    private IReadOnlyDictionary`2<string, LogEventPropertyValue> _properties;
    public LogEventPropertyMessageValue(MessageTemplate template, IReadOnlyDictionary`2<string, LogEventPropertyValue> properties);
    public virtual void Render(TextWriter output, string format, IFormatProvider formatProvider);
}
public class Serilog.Formatting.Display.MessageTemplateTextFormatter : object {
    private IFormatProvider _formatProvider;
    private MessageTemplate _outputTemplate;
    public MessageTemplateTextFormatter(string outputTemplate, IFormatProvider formatProvider);
    public sealed virtual void Format(LogEvent logEvent, TextWriter output);
}
public static class Serilog.Formatting.Display.OutputProperties : object {
    public static string MessagePropertyName;
    public static string TimestampPropertyName;
    public static string LevelPropertyName;
    public static string NewLinePropertyName;
    public static string ExceptionPropertyName;
    public static IReadOnlyDictionary`2<string, LogEventPropertyValue> GetOutputProperties(LogEvent logEvent);
}
internal static class Serilog.Formatting.Display.Padding : object {
    public static void Apply(TextWriter output, string value, Nullable`1<Alignment> alignment);
}
public interface Serilog.Formatting.ITextFormatter {
    public abstract virtual void Format(LogEvent logEvent, TextWriter output);
}
public class Serilog.Formatting.Json.JsonFormatter : object {
    private static string ExtensionPointObsoletionMessage;
    private bool _omitEnclosingObject;
    private string _closingDelimiter;
    private bool _renderMessage;
    private IFormatProvider _formatProvider;
    private IDictionary`2<Type, Action`3<object, bool, TextWriter>> _literalWriters;
    public JsonFormatter(string closingDelimiter, bool renderMessage, IFormatProvider formatProvider);
    [ObsoleteAttribute("The omitEnclosingObject parameter is obsolete and will be removed in a future Serilog version.")]
public JsonFormatter(bool omitEnclosingObject, string closingDelimiter, bool renderMessage, IFormatProvider formatProvider);
    public sealed virtual void Format(LogEvent logEvent, TextWriter output);
    [ObsoleteAttribute("Extension of JsonFormatter by subclassing is obsolete and will be removed in a future Serilog version. Write a custom formatter based on JsonValueFormatter instead. See https://github.com/serilog/serilog/pull/819.")]
protected void AddLiteralWriter(Type type, Action`2<object, TextWriter> writer);
    [ObsoleteAttribute("Extension of JsonFormatter by subclassing is obsolete and will be removed in a future Serilog version. Write a custom formatter based on JsonValueFormatter instead. See https://github.com/serilog/serilog/pull/819.")]
protected virtual void WriteRenderings(IGrouping`2[] tokensWithFormat, IReadOnlyDictionary`2<string, LogEventPropertyValue> properties, TextWriter output);
    [ObsoleteAttribute("Extension of JsonFormatter by subclassing is obsolete and will be removed in a future Serilog version. Write a custom formatter based on JsonValueFormatter instead. See https://github.com/serilog/serilog/pull/819.")]
protected virtual void WriteRenderingsValues(IGrouping`2[] tokensWithFormat, IReadOnlyDictionary`2<string, LogEventPropertyValue> properties, TextWriter output);
    [ObsoleteAttribute("Extension of JsonFormatter by subclassing is obsolete and will be removed in a future Serilog version. Write a custom formatter based on JsonValueFormatter instead. See https://github.com/serilog/serilog/pull/819.")]
protected virtual void WriteProperties(IReadOnlyDictionary`2<string, LogEventPropertyValue> properties, TextWriter output);
    [ObsoleteAttribute("Extension of JsonFormatter by subclassing is obsolete and will be removed in a future Serilog version. Write a custom formatter based on JsonValueFormatter instead. See https://github.com/serilog/serilog/pull/819.")]
protected virtual void WritePropertiesValues(IReadOnlyDictionary`2<string, LogEventPropertyValue> properties, TextWriter output);
    [ObsoleteAttribute("Extension of JsonFormatter by subclassing is obsolete and will be removed in a future Serilog version. Write a custom formatter based on JsonValueFormatter instead. See https://github.com/serilog/serilog/pull/819.")]
protected virtual void WriteException(Exception exception, String& delim, TextWriter output);
    [ObsoleteAttribute("Extension of JsonFormatter by subclassing is obsolete and will be removed in a future Serilog version. Write a custom formatter based on JsonValueFormatter instead. See https://github.com/serilog/serilog/pull/819.")]
protected virtual void WriteRenderedMessage(string message, String& delim, TextWriter output);
    [ObsoleteAttribute("Extension of JsonFormatter by subclassing is obsolete and will be removed in a future Serilog version. Write a custom formatter based on JsonValueFormatter instead. See https://github.com/serilog/serilog/pull/819.")]
protected virtual void WriteMessageTemplate(string template, String& delim, TextWriter output);
    [ObsoleteAttribute("Extension of JsonFormatter by subclassing is obsolete and will be removed in a future Serilog version. Write a custom formatter based on JsonValueFormatter instead. See https://github.com/serilog/serilog/pull/819.")]
protected virtual void WriteLevel(LogEventLevel level, String& delim, TextWriter output);
    [ObsoleteAttribute("Extension of JsonFormatter by subclassing is obsolete and will be removed in a future Serilog version. Write a custom formatter based on JsonValueFormatter instead. See https://github.com/serilog/serilog/pull/819.")]
protected virtual void WriteTimestamp(DateTimeOffset timestamp, String& delim, TextWriter output);
    [ObsoleteAttribute("Extension of JsonFormatter by subclassing is obsolete and will be removed in a future Serilog version. Write a custom formatter based on JsonValueFormatter instead. See https://github.com/serilog/serilog/pull/819.")]
protected virtual void WriteStructure(string typeTag, IEnumerable`1<LogEventProperty> properties, TextWriter output);
    [ObsoleteAttribute("Extension of JsonFormatter by subclassing is obsolete and will be removed in a future Serilog version. Write a custom formatter based on JsonValueFormatter instead. See https://github.com/serilog/serilog/pull/819.")]
protected virtual void WriteSequence(IEnumerable elements, TextWriter output);
    [ObsoleteAttribute("Extension of JsonFormatter by subclassing is obsolete and will be removed in a future Serilog version. Write a custom formatter based on JsonValueFormatter instead. See https://github.com/serilog/serilog/pull/819.")]
protected virtual void WriteDictionary(IReadOnlyDictionary`2<ScalarValue, LogEventPropertyValue> elements, TextWriter output);
    [ObsoleteAttribute("Extension of JsonFormatter by subclassing is obsolete and will be removed in a future Serilog version. Write a custom formatter based on JsonValueFormatter instead. See https://github.com/serilog/serilog/pull/819.")]
protected virtual void WriteJsonProperty(string name, object value, String& precedingDelimiter, TextWriter output);
    [ObsoleteAttribute("Extension of JsonFormatter by subclassing is obsolete and will be removed in a future Serilog version. Write a custom formatter based on JsonValueFormatter instead. See https://github.com/serilog/serilog/pull/819.")]
protected virtual void WriteLiteralValue(object value, TextWriter output);
    private void WriteLiteral(object value, TextWriter output, bool forceQuotation);
    private static void WriteToString(object number, bool quote, TextWriter output);
    private static void WriteBoolean(bool value, TextWriter output);
    private static void WriteSingle(float value, TextWriter output);
    private static void WriteDouble(double value, TextWriter output);
    private static void WriteOffset(DateTimeOffset value, TextWriter output);
    private static void WriteDateTime(DateTime value, TextWriter output);
    private static void WriteString(string value, TextWriter output);
    [ObsoleteAttribute("Use JsonValueFormatter.WriteQuotedJsonString() instead.")]
[EditorBrowsableAttribute("1")]
public static string Escape(string s);
    [CompilerGeneratedAttribute]
private void <.ctor>b__7_7(object v, bool q, TextWriter w);
    [CompilerGeneratedAttribute]
private void <.ctor>b__7_8(object v, bool q, TextWriter w);
    [CompilerGeneratedAttribute]
private void <.ctor>b__7_9(object v, bool q, TextWriter w);
    [CompilerGeneratedAttribute]
private void <.ctor>b__7_10(object v, bool q, TextWriter w);
}
public class Serilog.Formatting.Json.JsonValueFormatter : LogEventPropertyValueVisitor`2<TextWriter, bool> {
    private string _typeTagName;
    private static string DefaultTypeTagName;
    public JsonValueFormatter(string typeTagName);
    public void Format(LogEventPropertyValue value, TextWriter output);
    protected virtual bool VisitScalarValue(TextWriter state, ScalarValue scalar);
    protected virtual bool VisitSequenceValue(TextWriter state, SequenceValue sequence);
    protected virtual bool VisitStructureValue(TextWriter state, StructureValue structure);
    protected virtual bool VisitDictionaryValue(TextWriter state, DictionaryValue dictionary);
    protected virtual void FormatLiteralValue(object value, TextWriter output);
    private static void FormatBooleanValue(bool value, TextWriter output);
    private static void FormatApproximateNumericValue(IFormattable value, TextWriter output);
    private static void FormatExactNumericValue(IFormattable value, TextWriter output);
    private static void FormatDateTimeValue(IFormattable value, TextWriter output);
    private static void FormatTimeSpanValue(TimeSpan value, TextWriter output);
    private static void FormatLiteralObjectValue(object value, TextWriter output);
    private static void FormatStringValue(string str, TextWriter output);
    private static void FormatNullValue(TextWriter output);
    public static void WriteQuotedJsonString(string str, TextWriter output);
}
public class Serilog.Formatting.Raw.RawFormatter : object {
    public sealed virtual void Format(LogEvent logEvent, TextWriter output);
}
public interface Serilog.ILogger {
    public abstract virtual ILogger ForContext(ILogEventEnricher enricher);
    public abstract virtual ILogger ForContext(IEnumerable`1<ILogEventEnricher> enrichers);
    public abstract virtual ILogger ForContext(string propertyName, object value, bool destructureObjects);
    public abstract virtual ILogger ForContext();
    public abstract virtual ILogger ForContext(Type source);
    public abstract virtual void Write(LogEvent logEvent);
    [MessageTemplateFormatMethodAttribute("messageTemplate")]
public abstract virtual void Write(LogEventLevel level, string messageTemplate);
    [MessageTemplateFormatMethodAttribute("messageTemplate")]
public abstract virtual void Write(LogEventLevel level, string messageTemplate, T propertyValue);
    [MessageTemplateFormatMethodAttribute("messageTemplate")]
public abstract virtual void Write(LogEventLevel level, string messageTemplate, T0 propertyValue0, T1 propertyValue1);
    [MessageTemplateFormatMethodAttribute("messageTemplate")]
public abstract virtual void Write(LogEventLevel level, string messageTemplate, T0 propertyValue0, T1 propertyValue1, T2 propertyValue2);
    [MessageTemplateFormatMethodAttribute("messageTemplate")]
public abstract virtual void Write(LogEventLevel level, string messageTemplate, Object[] propertyValues);
    [MessageTemplateFormatMethodAttribute("messageTemplate")]
public abstract virtual void Write(LogEventLevel level, Exception exception, string messageTemplate);
    [MessageTemplateFormatMethodAttribute("messageTemplate")]
public abstract virtual void Write(LogEventLevel level, Exception exception, string messageTemplate, T propertyValue);
    [MessageTemplateFormatMethodAttribute("messageTemplate")]
public abstract virtual void Write(LogEventLevel level, Exception exception, string messageTemplate, T0 propertyValue0, T1 propertyValue1);
    [MessageTemplateFormatMethodAttribute("messageTemplate")]
public abstract virtual void Write(LogEventLevel level, Exception exception, string messageTemplate, T0 propertyValue0, T1 propertyValue1, T2 propertyValue2);
    [MessageTemplateFormatMethodAttribute("messageTemplate")]
public abstract virtual void Write(LogEventLevel level, Exception exception, string messageTemplate, Object[] propertyValues);
    public abstract virtual bool IsEnabled(LogEventLevel level);
    [MessageTemplateFormatMethodAttribute("messageTemplate")]
public abstract virtual void Verbose(string messageTemplate);
    [MessageTemplateFormatMethodAttribute("messageTemplate")]
public abstract virtual void Verbose(string messageTemplate, T propertyValue);
    [MessageTemplateFormatMethodAttribute("messageTemplate")]
public abstract virtual void Verbose(string messageTemplate, T0 propertyValue0, T1 propertyValue1);
    [MessageTemplateFormatMethodAttribute("messageTemplate")]
public abstract virtual void Verbose(string messageTemplate, T0 propertyValue0, T1 propertyValue1, T2 propertyValue2);
    [MessageTemplateFormatMethodAttribute("messageTemplate")]
public abstract virtual void Verbose(string messageTemplate, Object[] propertyValues);
    [MessageTemplateFormatMethodAttribute("messageTemplate")]
public abstract virtual void Verbose(Exception exception, string messageTemplate);
    [MessageTemplateFormatMethodAttribute("messageTemplate")]
public abstract virtual void Verbose(Exception exception, string messageTemplate, T propertyValue);
    [MessageTemplateFormatMethodAttribute("messageTemplate")]
public abstract virtual void Verbose(Exception exception, string messageTemplate, T0 propertyValue0, T1 propertyValue1);
    [MessageTemplateFormatMethodAttribute("messageTemplate")]
public abstract virtual void Verbose(Exception exception, string messageTemplate, T0 propertyValue0, T1 propertyValue1, T2 propertyValue2);
    [MessageTemplateFormatMethodAttribute("messageTemplate")]
public abstract virtual void Verbose(Exception exception, string messageTemplate, Object[] propertyValues);
    [MessageTemplateFormatMethodAttribute("messageTemplate")]
public abstract virtual void Debug(string messageTemplate);
    [MessageTemplateFormatMethodAttribute("messageTemplate")]
public abstract virtual void Debug(string messageTemplate, T propertyValue);
    [MessageTemplateFormatMethodAttribute("messageTemplate")]
public abstract virtual void Debug(string messageTemplate, T0 propertyValue0, T1 propertyValue1);
    [MessageTemplateFormatMethodAttribute("messageTemplate")]
public abstract virtual void Debug(string messageTemplate, T0 propertyValue0, T1 propertyValue1, T2 propertyValue2);
    [MessageTemplateFormatMethodAttribute("messageTemplate")]
public abstract virtual void Debug(string messageTemplate, Object[] propertyValues);
    [MessageTemplateFormatMethodAttribute("messageTemplate")]
public abstract virtual void Debug(Exception exception, string messageTemplate);
    [MessageTemplateFormatMethodAttribute("messageTemplate")]
public abstract virtual void Debug(Exception exception, string messageTemplate, T propertyValue);
    [MessageTemplateFormatMethodAttribute("messageTemplate")]
public abstract virtual void Debug(Exception exception, string messageTemplate, T0 propertyValue0, T1 propertyValue1);
    [MessageTemplateFormatMethodAttribute("messageTemplate")]
public abstract virtual void Debug(Exception exception, string messageTemplate, T0 propertyValue0, T1 propertyValue1, T2 propertyValue2);
    [MessageTemplateFormatMethodAttribute("messageTemplate")]
public abstract virtual void Debug(Exception exception, string messageTemplate, Object[] propertyValues);
    [MessageTemplateFormatMethodAttribute("messageTemplate")]
public abstract virtual void Information(string messageTemplate);
    [MessageTemplateFormatMethodAttribute("messageTemplate")]
public abstract virtual void Information(string messageTemplate, T propertyValue);
    [MessageTemplateFormatMethodAttribute("messageTemplate")]
public abstract virtual void Information(string messageTemplate, T0 propertyValue0, T1 propertyValue1);
    [MessageTemplateFormatMethodAttribute("messageTemplate")]
public abstract virtual void Information(string messageTemplate, T0 propertyValue0, T1 propertyValue1, T2 propertyValue2);
    [MessageTemplateFormatMethodAttribute("messageTemplate")]
public abstract virtual void Information(string messageTemplate, Object[] propertyValues);
    [MessageTemplateFormatMethodAttribute("messageTemplate")]
public abstract virtual void Information(Exception exception, string messageTemplate);
    [MessageTemplateFormatMethodAttribute("messageTemplate")]
public abstract virtual void Information(Exception exception, string messageTemplate, T propertyValue);
    [MessageTemplateFormatMethodAttribute("messageTemplate")]
public abstract virtual void Information(Exception exception, string messageTemplate, T0 propertyValue0, T1 propertyValue1);
    [MessageTemplateFormatMethodAttribute("messageTemplate")]
public abstract virtual void Information(Exception exception, string messageTemplate, T0 propertyValue0, T1 propertyValue1, T2 propertyValue2);
    [MessageTemplateFormatMethodAttribute("messageTemplate")]
public abstract virtual void Information(Exception exception, string messageTemplate, Object[] propertyValues);
    [MessageTemplateFormatMethodAttribute("messageTemplate")]
public abstract virtual void Warning(string messageTemplate);
    [MessageTemplateFormatMethodAttribute("messageTemplate")]
public abstract virtual void Warning(string messageTemplate, T propertyValue);
    [MessageTemplateFormatMethodAttribute("messageTemplate")]
public abstract virtual void Warning(string messageTemplate, T0 propertyValue0, T1 propertyValue1);
    [MessageTemplateFormatMethodAttribute("messageTemplate")]
public abstract virtual void Warning(string messageTemplate, T0 propertyValue0, T1 propertyValue1, T2 propertyValue2);
    [MessageTemplateFormatMethodAttribute("messageTemplate")]
public abstract virtual void Warning(string messageTemplate, Object[] propertyValues);
    [MessageTemplateFormatMethodAttribute("messageTemplate")]
public abstract virtual void Warning(Exception exception, string messageTemplate);
    [MessageTemplateFormatMethodAttribute("messageTemplate")]
public abstract virtual void Warning(Exception exception, string messageTemplate, T propertyValue);
    [MessageTemplateFormatMethodAttribute("messageTemplate")]
public abstract virtual void Warning(Exception exception, string messageTemplate, T0 propertyValue0, T1 propertyValue1);
    [MessageTemplateFormatMethodAttribute("messageTemplate")]
public abstract virtual void Warning(Exception exception, string messageTemplate, T0 propertyValue0, T1 propertyValue1, T2 propertyValue2);
    [MessageTemplateFormatMethodAttribute("messageTemplate")]
public abstract virtual void Warning(Exception exception, string messageTemplate, Object[] propertyValues);
    [MessageTemplateFormatMethodAttribute("messageTemplate")]
public abstract virtual void Error(string messageTemplate);
    [MessageTemplateFormatMethodAttribute("messageTemplate")]
public abstract virtual void Error(string messageTemplate, T propertyValue);
    [MessageTemplateFormatMethodAttribute("messageTemplate")]
public abstract virtual void Error(string messageTemplate, T0 propertyValue0, T1 propertyValue1);
    [MessageTemplateFormatMethodAttribute("messageTemplate")]
public abstract virtual void Error(string messageTemplate, T0 propertyValue0, T1 propertyValue1, T2 propertyValue2);
    [MessageTemplateFormatMethodAttribute("messageTemplate")]
public abstract virtual void Error(string messageTemplate, Object[] propertyValues);
    [MessageTemplateFormatMethodAttribute("messageTemplate")]
public abstract virtual void Error(Exception exception, string messageTemplate);
    [MessageTemplateFormatMethodAttribute("messageTemplate")]
public abstract virtual void Error(Exception exception, string messageTemplate, T propertyValue);
    [MessageTemplateFormatMethodAttribute("messageTemplate")]
public abstract virtual void Error(Exception exception, string messageTemplate, T0 propertyValue0, T1 propertyValue1);
    [MessageTemplateFormatMethodAttribute("messageTemplate")]
public abstract virtual void Error(Exception exception, string messageTemplate, T0 propertyValue0, T1 propertyValue1, T2 propertyValue2);
    [MessageTemplateFormatMethodAttribute("messageTemplate")]
public abstract virtual void Error(Exception exception, string messageTemplate, Object[] propertyValues);
    [MessageTemplateFormatMethodAttribute("messageTemplate")]
public abstract virtual void Fatal(string messageTemplate);
    [MessageTemplateFormatMethodAttribute("messageTemplate")]
public abstract virtual void Fatal(string messageTemplate, T propertyValue);
    [MessageTemplateFormatMethodAttribute("messageTemplate")]
public abstract virtual void Fatal(string messageTemplate, T0 propertyValue0, T1 propertyValue1);
    [MessageTemplateFormatMethodAttribute("messageTemplate")]
public abstract virtual void Fatal(string messageTemplate, T0 propertyValue0, T1 propertyValue1, T2 propertyValue2);
    [MessageTemplateFormatMethodAttribute("messageTemplate")]
public abstract virtual void Fatal(string messageTemplate, Object[] propertyValues);
    [MessageTemplateFormatMethodAttribute("messageTemplate")]
public abstract virtual void Fatal(Exception exception, string messageTemplate);
    [MessageTemplateFormatMethodAttribute("messageTemplate")]
public abstract virtual void Fatal(Exception exception, string messageTemplate, T propertyValue);
    [MessageTemplateFormatMethodAttribute("messageTemplate")]
public abstract virtual void Fatal(Exception exception, string messageTemplate, T0 propertyValue0, T1 propertyValue1);
    [MessageTemplateFormatMethodAttribute("messageTemplate")]
public abstract virtual void Fatal(Exception exception, string messageTemplate, T0 propertyValue0, T1 propertyValue1, T2 propertyValue2);
    [MessageTemplateFormatMethodAttribute("messageTemplate")]
public abstract virtual void Fatal(Exception exception, string messageTemplate, Object[] propertyValues);
    [MessageTemplateFormatMethodAttribute("messageTemplate")]
public abstract virtual bool BindMessageTemplate(string messageTemplate, Object[] propertyValues, MessageTemplate& parsedTemplate, IEnumerable`1& boundProperties);
    public abstract virtual bool BindProperty(string propertyName, object value, bool destructureObjects, LogEventProperty& property);
}
public static class Serilog.Log : object {
    private static ILogger _logger;
    public static ILogger Logger { get; public set; }
    private static Log();
    public static ILogger get_Logger();
    public static void set_Logger(ILogger value);
    public static void CloseAndFlush();
    public static ILogger ForContext(ILogEventEnricher enricher);
    public static ILogger ForContext(ILogEventEnricher[] enrichers);
    public static ILogger ForContext(string propertyName, object value, bool destructureObjects);
    public static ILogger ForContext();
    public static ILogger ForContext(Type source);
    public static void Write(LogEvent logEvent);
    [MessageTemplateFormatMethodAttribute("messageTemplate")]
public static void Write(LogEventLevel level, string messageTemplate);
    [MessageTemplateFormatMethodAttribute("messageTemplate")]
public static void Write(LogEventLevel level, string messageTemplate, T propertyValue);
    [MessageTemplateFormatMethodAttribute("messageTemplate")]
public static void Write(LogEventLevel level, string messageTemplate, T0 propertyValue0, T1 propertyValue1);
    [MessageTemplateFormatMethodAttribute("messageTemplate")]
public static void Write(LogEventLevel level, string messageTemplate, T0 propertyValue0, T1 propertyValue1, T2 propertyValue2);
    [MessageTemplateFormatMethodAttribute("messageTemplate")]
public static void Write(LogEventLevel level, string messageTemplate, Object[] propertyValues);
    [MessageTemplateFormatMethodAttribute("messageTemplate")]
public static void Write(LogEventLevel level, Exception exception, string messageTemplate);
    [MessageTemplateFormatMethodAttribute("messageTemplate")]
public static void Write(LogEventLevel level, Exception exception, string messageTemplate, T propertyValue);
    [MessageTemplateFormatMethodAttribute("messageTemplate")]
public static void Write(LogEventLevel level, Exception exception, string messageTemplate, T0 propertyValue0, T1 propertyValue1);
    [MessageTemplateFormatMethodAttribute("messageTemplate")]
public static void Write(LogEventLevel level, Exception exception, string messageTemplate, T0 propertyValue0, T1 propertyValue1, T2 propertyValue2);
    [MessageTemplateFormatMethodAttribute("messageTemplate")]
public static void Write(LogEventLevel level, Exception exception, string messageTemplate, Object[] propertyValues);
    public static bool IsEnabled(LogEventLevel level);
    [MessageTemplateFormatMethodAttribute("messageTemplate")]
public static void Verbose(string messageTemplate);
    [MessageTemplateFormatMethodAttribute("messageTemplate")]
public static void Verbose(string messageTemplate, T propertyValue);
    [MessageTemplateFormatMethodAttribute("messageTemplate")]
public static void Verbose(string messageTemplate, T0 propertyValue0, T1 propertyValue1);
    [MessageTemplateFormatMethodAttribute("messageTemplate")]
public static void Verbose(string messageTemplate, T0 propertyValue0, T1 propertyValue1, T2 propertyValue2);
    [MessageTemplateFormatMethodAttribute("messageTemplate")]
public static void Verbose(string messageTemplate, Object[] propertyValues);
    [MessageTemplateFormatMethodAttribute("messageTemplate")]
public static void Verbose(Exception exception, string messageTemplate);
    [MessageTemplateFormatMethodAttribute("messageTemplate")]
public static void Verbose(Exception exception, string messageTemplate, T propertyValue);
    [MessageTemplateFormatMethodAttribute("messageTemplate")]
public static void Verbose(Exception exception, string messageTemplate, T0 propertyValue0, T1 propertyValue1);
    [MessageTemplateFormatMethodAttribute("messageTemplate")]
public static void Verbose(Exception exception, string messageTemplate, T0 propertyValue0, T1 propertyValue1, T2 propertyValue2);
    [MessageTemplateFormatMethodAttribute("messageTemplate")]
public static void Verbose(Exception exception, string messageTemplate, Object[] propertyValues);
    [MessageTemplateFormatMethodAttribute("messageTemplate")]
public static void Debug(string messageTemplate);
    [MessageTemplateFormatMethodAttribute("messageTemplate")]
public static void Debug(string messageTemplate, T propertyValue);
    [MessageTemplateFormatMethodAttribute("messageTemplate")]
public static void Debug(string messageTemplate, T0 propertyValue0, T1 propertyValue1);
    [MessageTemplateFormatMethodAttribute("messageTemplate")]
public static void Debug(string messageTemplate, T0 propertyValue0, T1 propertyValue1, T2 propertyValue2);
    [MessageTemplateFormatMethodAttribute("messageTemplate")]
public static void Debug(string messageTemplate, Object[] propertyValues);
    [MessageTemplateFormatMethodAttribute("messageTemplate")]
public static void Debug(Exception exception, string messageTemplate);
    [MessageTemplateFormatMethodAttribute("messageTemplate")]
public static void Debug(Exception exception, string messageTemplate, T propertyValue);
    [MessageTemplateFormatMethodAttribute("messageTemplate")]
public static void Debug(Exception exception, string messageTemplate, T0 propertyValue0, T1 propertyValue1);
    [MessageTemplateFormatMethodAttribute("messageTemplate")]
public static void Debug(Exception exception, string messageTemplate, T0 propertyValue0, T1 propertyValue1, T2 propertyValue2);
    [MessageTemplateFormatMethodAttribute("messageTemplate")]
public static void Debug(Exception exception, string messageTemplate, Object[] propertyValues);
    [MessageTemplateFormatMethodAttribute("messageTemplate")]
public static void Information(string messageTemplate);
    [MessageTemplateFormatMethodAttribute("messageTemplate")]
public static void Information(string messageTemplate, T propertyValue);
    [MessageTemplateFormatMethodAttribute("messageTemplate")]
public static void Information(string messageTemplate, T0 propertyValue0, T1 propertyValue1);
    [MessageTemplateFormatMethodAttribute("messageTemplate")]
public static void Information(string messageTemplate, T0 propertyValue0, T1 propertyValue1, T2 propertyValue2);
    [MessageTemplateFormatMethodAttribute("messageTemplate")]
public static void Information(string messageTemplate, Object[] propertyValues);
    [MessageTemplateFormatMethodAttribute("messageTemplate")]
public static void Information(Exception exception, string messageTemplate);
    [MessageTemplateFormatMethodAttribute("messageTemplate")]
public static void Information(Exception exception, string messageTemplate, T propertyValue);
    [MessageTemplateFormatMethodAttribute("messageTemplate")]
public static void Information(Exception exception, string messageTemplate, T0 propertyValue0, T1 propertyValue1);
    [MessageTemplateFormatMethodAttribute("messageTemplate")]
public static void Information(Exception exception, string messageTemplate, T0 propertyValue0, T1 propertyValue1, T2 propertyValue2);
    [MessageTemplateFormatMethodAttribute("messageTemplate")]
public static void Information(Exception exception, string messageTemplate, Object[] propertyValues);
    [MessageTemplateFormatMethodAttribute("messageTemplate")]
public static void Warning(string messageTemplate);
    [MessageTemplateFormatMethodAttribute("messageTemplate")]
public static void Warning(string messageTemplate, T propertyValue);
    [MessageTemplateFormatMethodAttribute("messageTemplate")]
public static void Warning(string messageTemplate, T0 propertyValue0, T1 propertyValue1);
    [MessageTemplateFormatMethodAttribute("messageTemplate")]
public static void Warning(string messageTemplate, T0 propertyValue0, T1 propertyValue1, T2 propertyValue2);
    [MessageTemplateFormatMethodAttribute("messageTemplate")]
public static void Warning(string messageTemplate, Object[] propertyValues);
    [MessageTemplateFormatMethodAttribute("messageTemplate")]
public static void Warning(Exception exception, string messageTemplate);
    [MessageTemplateFormatMethodAttribute("messageTemplate")]
public static void Warning(Exception exception, string messageTemplate, T propertyValue);
    [MessageTemplateFormatMethodAttribute("messageTemplate")]
public static void Warning(Exception exception, string messageTemplate, T0 propertyValue0, T1 propertyValue1);
    [MessageTemplateFormatMethodAttribute("messageTemplate")]
public static void Warning(Exception exception, string messageTemplate, T0 propertyValue0, T1 propertyValue1, T2 propertyValue2);
    [MessageTemplateFormatMethodAttribute("messageTemplate")]
public static void Warning(Exception exception, string messageTemplate, Object[] propertyValues);
    [MessageTemplateFormatMethodAttribute("messageTemplate")]
public static void Error(string messageTemplate);
    [MessageTemplateFormatMethodAttribute("messageTemplate")]
public static void Error(string messageTemplate, T propertyValue);
    [MessageTemplateFormatMethodAttribute("messageTemplate")]
public static void Error(string messageTemplate, T0 propertyValue0, T1 propertyValue1);
    [MessageTemplateFormatMethodAttribute("messageTemplate")]
public static void Error(string messageTemplate, T0 propertyValue0, T1 propertyValue1, T2 propertyValue2);
    [MessageTemplateFormatMethodAttribute("messageTemplate")]
public static void Error(string messageTemplate, Object[] propertyValues);
    [MessageTemplateFormatMethodAttribute("messageTemplate")]
public static void Error(Exception exception, string messageTemplate);
    [MessageTemplateFormatMethodAttribute("messageTemplate")]
public static void Error(Exception exception, string messageTemplate, T propertyValue);
    [MessageTemplateFormatMethodAttribute("messageTemplate")]
public static void Error(Exception exception, string messageTemplate, T0 propertyValue0, T1 propertyValue1);
    [MessageTemplateFormatMethodAttribute("messageTemplate")]
public static void Error(Exception exception, string messageTemplate, T0 propertyValue0, T1 propertyValue1, T2 propertyValue2);
    [MessageTemplateFormatMethodAttribute("messageTemplate")]
public static void Error(Exception exception, string messageTemplate, Object[] propertyValues);
    [MessageTemplateFormatMethodAttribute("messageTemplate")]
public static void Fatal(string messageTemplate);
    [MessageTemplateFormatMethodAttribute("messageTemplate")]
public static void Fatal(string messageTemplate, T propertyValue);
    [MessageTemplateFormatMethodAttribute("messageTemplate")]
public static void Fatal(string messageTemplate, T0 propertyValue0, T1 propertyValue1);
    [MessageTemplateFormatMethodAttribute("messageTemplate")]
public static void Fatal(string messageTemplate, T0 propertyValue0, T1 propertyValue1, T2 propertyValue2);
    [MessageTemplateFormatMethodAttribute("messageTemplate")]
public static void Fatal(string messageTemplate, Object[] propertyValues);
    [MessageTemplateFormatMethodAttribute("messageTemplate")]
public static void Fatal(Exception exception, string messageTemplate);
    [MessageTemplateFormatMethodAttribute("messageTemplate")]
public static void Fatal(Exception exception, string messageTemplate, T propertyValue);
    [MessageTemplateFormatMethodAttribute("messageTemplate")]
public static void Fatal(Exception exception, string messageTemplate, T0 propertyValue0, T1 propertyValue1);
    [MessageTemplateFormatMethodAttribute("messageTemplate")]
public static void Fatal(Exception exception, string messageTemplate, T0 propertyValue0, T1 propertyValue1, T2 propertyValue2);
    [MessageTemplateFormatMethodAttribute("messageTemplate")]
public static void Fatal(Exception exception, string messageTemplate, Object[] propertyValues);
    [MessageTemplateFormatMethodAttribute("messageTemplate")]
public static bool BindMessageTemplate(string messageTemplate, Object[] propertyValues, MessageTemplate& parsedTemplate, IEnumerable`1& boundProperties);
}
public class Serilog.LoggerConfiguration : object {
    private List`1<ILogEventSink> _logEventSinks;
    private List`1<ILogEventSink> _auditSinks;
    private List`1<ILogEventEnricher> _enrichers;
    private List`1<ILogEventFilter> _filters;
    private List`1<Type> _additionalScalarTypes;
    private List`1<IDestructuringPolicy> _additionalDestructuringPolicies;
    private Dictionary`2<string, LoggingLevelSwitch> _overrides;
    private LogEventLevel _minimumLevel;
    private LoggingLevelSwitch _levelSwitch;
    private int _maximumDestructuringDepth;
    private bool _loggerCreated;
    public LoggerSinkConfiguration WriteTo { get; }
    public LoggerAuditSinkConfiguration AuditTo { get; }
    public LoggerMinimumLevelConfiguration MinimumLevel { get; }
    public LoggerEnrichmentConfiguration Enrich { get; }
    public LoggerFilterConfiguration Filter { get; }
    public LoggerDestructuringConfiguration Destructure { get; }
    public LoggerSettingsConfiguration ReadFrom { get; }
    private void ApplyInheritedConfiguration(LoggerConfiguration child);
    public LoggerSinkConfiguration get_WriteTo();
    public LoggerAuditSinkConfiguration get_AuditTo();
    public LoggerMinimumLevelConfiguration get_MinimumLevel();
    public LoggerEnrichmentConfiguration get_Enrich();
    public LoggerFilterConfiguration get_Filter();
    public LoggerDestructuringConfiguration get_Destructure();
    public LoggerSettingsConfiguration get_ReadFrom();
    public Logger CreateLogger();
    [CompilerGeneratedAttribute]
private void <get_WriteTo>b__13_0(ILogEventSink s);
    [CompilerGeneratedAttribute]
private void <get_AuditTo>b__15_0(ILogEventSink s);
    [CompilerGeneratedAttribute]
private void <get_MinimumLevel>b__17_0(LogEventLevel l);
    [CompilerGeneratedAttribute]
private void <get_MinimumLevel>b__17_1(LoggingLevelSwitch sw);
    [CompilerGeneratedAttribute]
private void <get_MinimumLevel>b__17_2(string s, LoggingLevelSwitch lls);
    [CompilerGeneratedAttribute]
private void <get_Enrich>b__19_0(ILogEventEnricher e);
    [CompilerGeneratedAttribute]
private void <get_Filter>b__21_0(ILogEventFilter f);
    [CompilerGeneratedAttribute]
private void <get_Destructure>b__23_0(int depth);
    [CompilerGeneratedAttribute]
private void <CreateLogger>b__26_0();
}
[ExtensionAttribute]
internal static class Serilog.Parameters.GetablePropertyFinder : object {
    [IteratorStateMachineAttribute("Serilog.Parameters.GetablePropertyFinder/<GetPropertiesRecursive>d__0")]
[ExtensionAttribute]
internal static IEnumerable`1<PropertyInfo> GetPropertiesRecursive(Type type);
}
internal class Serilog.Parameters.MessageTemplateProcessor : object {
    private IMessageTemplateParser _parser;
    private PropertyBinder _propertyBinder;
    private PropertyValueConverter _propertyValueConverter;
    public MessageTemplateProcessor(PropertyValueConverter propertyValueConverter);
    public void Process(string messageTemplate, Object[] messageTemplateParameters, MessageTemplate& parsedTemplate, IEnumerable`1& properties);
    public sealed virtual LogEventProperty CreateProperty(string name, object value, bool destructureObjects);
}
internal class Serilog.Parameters.PropertyBinder : object {
    private PropertyValueConverter _valueConverter;
    private static LogEventProperty[] NoProperties;
    public PropertyBinder(PropertyValueConverter valueConverter);
    private static PropertyBinder();
    public IEnumerable`1<LogEventProperty> ConstructProperties(MessageTemplate messageTemplate, Object[] messageTemplateParameters);
    private IEnumerable`1<LogEventProperty> ConstructPositionalProperties(MessageTemplate template, Object[] messageTemplateParameters);
    private IEnumerable`1<LogEventProperty> ConstructNamedProperties(MessageTemplate template, Object[] messageTemplateParameters);
    private LogEventProperty ConstructProperty(PropertyToken propertyToken, object value);
}
internal class Serilog.Parameters.PropertyValueConverter : object {
    private static HashSet`1<Type> BuiltInScalarTypes;
    private IDestructuringPolicy[] _destructuringPolicies;
    private IScalarConversionPolicy[] _scalarConversionPolicies;
    private int _maximumDestructuringDepth;
    private bool _propagateExceptions;
    public PropertyValueConverter(int maximumDestructuringDepth, IEnumerable`1<Type> additionalScalarTypes, IEnumerable`1<IDestructuringPolicy> additionalDestructuringPolicies, bool propagateExceptions);
    private static PropertyValueConverter();
    public sealed virtual LogEventProperty CreateProperty(string name, object value, bool destructureObjects);
    public sealed virtual LogEventPropertyValue CreatePropertyValue(object value, bool destructureObjects);
    public LogEventPropertyValue CreatePropertyValue(object value, Destructuring destructuring);
    private LogEventPropertyValue CreatePropertyValue(object value, bool destructureObjects, int depth);
    private LogEventPropertyValue CreatePropertyValue(object value, Destructuring destructuring, int depth);
    private bool IsValueTypeDictionary(Type valueType);
    private bool IsValidDictionaryKeyType(Type valueType);
    [IteratorStateMachineAttribute("Serilog.Parameters.PropertyValueConverter/<GetProperties>d__14")]
private IEnumerable`1<LogEventProperty> GetProperties(object value, ILogEventPropertyValueFactory recursive);
    internal static bool IsCompilerGeneratedType(Type type);
}
public class Serilog.Parsing.Alignment : ValueType {
    [CompilerGeneratedAttribute]
private AlignmentDirection <Direction>k__BackingField;
    [CompilerGeneratedAttribute]
private int <Width>k__BackingField;
    public AlignmentDirection Direction { get; }
    public int Width { get; }
    public Alignment(AlignmentDirection direction, int width);
    [CompilerGeneratedAttribute]
public AlignmentDirection get_Direction();
    [CompilerGeneratedAttribute]
public int get_Width();
}
public enum Serilog.Parsing.AlignmentDirection : Enum {
    public int value__;
    public static AlignmentDirection Left;
    public static AlignmentDirection Right;
}
public enum Serilog.Parsing.Destructuring : Enum {
    public int value__;
    public static Destructuring Default;
    public static Destructuring Stringify;
    public static Destructuring Destructure;
}
public class Serilog.Parsing.MessageTemplateParser : object {
    public sealed virtual MessageTemplate Parse(string messageTemplate);
    [IteratorStateMachineAttribute("Serilog.Parsing.MessageTemplateParser/<Tokenize>d__1")]
private static IEnumerable`1<MessageTemplateToken> Tokenize(string messageTemplate);
    private static MessageTemplateToken ParsePropertyToken(int startAt, string messageTemplate, Int32& next);
    private static bool TrySplitTagContent(string tagContent, String& propertyNameAndDestructuring, String& format, String& alignment);
    private static bool IsValidInPropertyTag(char c);
    private static bool IsValidInPropertyName(char c);
    private static bool TryGetDestructuringHint(char c, Destructuring& destructuring);
    private static bool IsValidInDestructuringHint(char c);
    private static bool IsValidInAlignment(char c);
    private static bool IsValidInFormat(char c);
    private static TextToken ParseTextToken(int startAt, string messageTemplate, Int32& next);
}
public abstract class Serilog.Parsing.MessageTemplateToken : object {
    [CompilerGeneratedAttribute]
private int <StartIndex>k__BackingField;
    public int StartIndex { get; }
    public int Length { get; }
    protected MessageTemplateToken(int startIndex);
    [CompilerGeneratedAttribute]
public int get_StartIndex();
    public abstract virtual int get_Length();
    public abstract virtual void Render(IReadOnlyDictionary`2<string, LogEventPropertyValue> properties, TextWriter output, IFormatProvider formatProvider);
}
public class Serilog.Parsing.PropertyToken : MessageTemplateToken {
    private string _rawText;
    private Nullable`1<int> _position;
    [CompilerGeneratedAttribute]
private string <PropertyName>k__BackingField;
    [CompilerGeneratedAttribute]
private Destructuring <Destructuring>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Format>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<Alignment> <Alignment>k__BackingField;
    public int Length { get; }
    public string PropertyName { get; }
    public Destructuring Destructuring { get; }
    public string Format { get; }
    public Nullable`1<Alignment> Alignment { get; }
    public bool IsPositional { get; }
    [ObsoleteAttribute("Use named arguments with this method to guarantee forwards-compatibility.")]
[EditorBrowsableAttribute("1")]
public PropertyToken(string propertyName, string rawText, string formatObsolete, Destructuring destructuringObsolete);
    public PropertyToken(string propertyName, string rawText, string format, Nullable`1<Alignment> alignment, Destructuring destructuring, int startIndex);
    public virtual int get_Length();
    public virtual void Render(IReadOnlyDictionary`2<string, LogEventPropertyValue> properties, TextWriter output, IFormatProvider formatProvider);
    [CompilerGeneratedAttribute]
public string get_PropertyName();
    [CompilerGeneratedAttribute]
public Destructuring get_Destructuring();
    [CompilerGeneratedAttribute]
public string get_Format();
    [CompilerGeneratedAttribute]
public Nullable`1<Alignment> get_Alignment();
    public bool get_IsPositional();
    public bool TryGetPositionalValue(Int32& position);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
    public virtual string ToString();
}
public class Serilog.Parsing.TextToken : MessageTemplateToken {
    [CompilerGeneratedAttribute]
private string <Text>k__BackingField;
    public int Length { get; }
    public string Text { get; }
    public TextToken(string text, int startIndex);
    public virtual int get_Length();
    public virtual void Render(IReadOnlyDictionary`2<string, LogEventPropertyValue> properties, TextWriter output, IFormatProvider formatProvider);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
    public virtual string ToString();
    [CompilerGeneratedAttribute]
public string get_Text();
}
internal class Serilog.Policies.ByteArrayScalarConversionPolicy : object {
    private static int MaximumByteArrayLength;
    public sealed virtual bool TryConvertToScalar(object value, ILogEventPropertyValueFactory propertyValueFactory, ScalarValue& result);
}
internal class Serilog.Policies.DelegateDestructuringPolicy : object {
    public sealed virtual bool TryDestructure(object value, ILogEventPropertyValueFactory propertyValueFactory, LogEventPropertyValue& result);
}
internal class Serilog.Policies.EnumScalarConversionPolicy : object {
    public sealed virtual bool TryConvertToScalar(object value, ILogEventPropertyValueFactory propertyValueFactory, ScalarValue& result);
}
internal class Serilog.Policies.NullableScalarConversionPolicy : object {
    public sealed virtual bool TryConvertToScalar(object value, ILogEventPropertyValueFactory propertyValueFactory, ScalarValue& result);
}
internal class Serilog.Policies.ProjectedDestructuringPolicy : object {
    private Func`2<Type, bool> _canApply;
    private Func`2<object, object> _projection;
    public ProjectedDestructuringPolicy(Func`2<Type, bool> canApply, Func`2<object, object> projection);
    public sealed virtual bool TryDestructure(object value, ILogEventPropertyValueFactory propertyValueFactory, LogEventPropertyValue& result);
}
internal class Serilog.Policies.ReflectionTypesScalarDestructuringPolicy : object {
    public sealed virtual bool TryDestructure(object value, ILogEventPropertyValueFactory propertyValueFactory, LogEventPropertyValue& result);
}
internal class Serilog.Policies.SimpleScalarConversionPolicy : object {
    private HashSet`1<Type> _scalarTypes;
    public SimpleScalarConversionPolicy(IEnumerable`1<Type> scalarTypes);
    public sealed virtual bool TryConvertToScalar(object value, ILogEventPropertyValueFactory propertyValueFactory, ScalarValue& result);
}
internal class Serilog.Settings.KeyValuePairs.KeyValuePairSettings : object {
    private static string UsingDirective;
    private static string AuditToDirective;
    private static string WriteToDirective;
    private static string MinimumLevelDirective;
    private static string EnrichWithDirective;
    private static string EnrichWithPropertyDirective;
    private static string UsingDirectiveFullFormPrefix;
    private static string EnrichWithEventEnricherPrefix;
    private static string EnrichWithPropertyDirectivePrefix;
    private static string AuditOrWriteToDirectiveRegex;
    private String[] _supportedDirectives;
    private Dictionary`2<string, string> _settings;
    private static Dictionary`2<Type, Func`2<string, object>> ExtendedTypeConversions;
    private static MethodInfo SurrogateFromLogContextConfigurationMethod;
    public KeyValuePairSettings(IEnumerable`1<KeyValuePair`2<string, string>> settings);
    private static KeyValuePairSettings();
    public sealed virtual void Configure(LoggerConfiguration loggerConfiguration);
    private static void ApplyDirectives(List`1<IGrouping`2<string, MethodArgumentValue>> directives, IList`1<MethodInfo> configurationMethods, object loggerConfigMethod);
    internal static MethodInfo SelectConfigurationMethod(IEnumerable`1<MethodInfo> candidateMethods, string name, IEnumerable`1<MethodArgumentValue> suppliedArgumentValues);
    internal static IEnumerable`1<Assembly> LoadConfigurationAssemblies(Dictionary`2<string, string> directives);
    internal static object ConvertToType(string value, Type toType);
    internal static IList`1<MethodInfo> FindWriteToSinkConfigurationMethods(IEnumerable`1<Assembly> configurationAssemblies);
    internal static IList`1<MethodInfo> FindAuditToSinkConfigurationMethods(IEnumerable`1<Assembly> configurationAssemblies);
    internal static LoggerConfiguration FromLogContext(LoggerEnrichmentConfiguration loggerEnrichmentConfiguration);
    internal static IList`1<MethodInfo> FindEventEnricherConfigurationMethods(IEnumerable`1<Assembly> configurationAssemblies);
    internal static IList`1<MethodInfo> FindConfigurationMethods(IEnumerable`1<Assembly> configurationAssemblies, Type configType);
    [CompilerGeneratedAttribute]
private bool <Configure>b__13_0(string k);
    [CompilerGeneratedAttribute]
private string <Configure>b__13_2(string k);
}
