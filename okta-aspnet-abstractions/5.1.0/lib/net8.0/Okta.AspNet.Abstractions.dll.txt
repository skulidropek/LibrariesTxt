public class Okta.AspNet.Abstractions.DefaultProxy : object {
    private ICredentials _credentials;
    private Uri _proxyUri;
    public ICredentials Credentials { get; public set; }
    public DefaultProxy(ProxyConfiguration proxyConfiguration);
    public sealed virtual ICredentials get_Credentials();
    public sealed virtual void set_Credentials(ICredentials value);
    public sealed virtual Uri GetProxy(Uri destination);
    public sealed virtual bool IsBypassed(Uri host);
}
public class Okta.AspNet.Abstractions.DefaultTokenValidationParameters : TokenValidationParameters {
    public DefaultTokenValidationParameters(OktaWebOptions options, string issuer);
}
public class Okta.AspNet.Abstractions.OktaHttpMessageHandler : DelegatingHandler {
    private Lazy`1<string> _userAgent;
    public OktaHttpMessageHandler(string frameworkName, Version frameworkVersion, OktaWebOptions oktaWebOptions);
    [AsyncStateMachineAttribute("Okta.AspNet.Abstractions.OktaHttpMessageHandler/<SendAsync>d__2")]
protected virtual Task`1<HttpResponseMessage> SendAsync(HttpRequestMessage request, CancellationToken cancellationToken);
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
[DebuggerHiddenAttribute]
private Task`1<HttpResponseMessage> <>n__0(HttpRequestMessage request, CancellationToken cancellationToken);
}
public static class Okta.AspNet.Abstractions.OktaParams : object {
    public static string SessionToken;
    public static string LoginHint;
    public static string Idp;
    public static string AcrValues;
    public static string Prompt;
    public static string EnrollAmrValues;
    private static string EnrollAuthenticator;
    public static IList`1<string> AllParams;
    private static OktaParams();
    public static bool IsPromptEnrollAuthenticator(IDictionary`2<string, string> parameters);
}
public class Okta.AspNet.Abstractions.OktaWebApiOptions : OktaWebOptions {
    public static string DefaultAudience;
    [CompilerGeneratedAttribute]
private string <Audience>k__BackingField;
    public string Audience { get; public set; }
    private static OktaWebApiOptions();
    [CompilerGeneratedAttribute]
public string get_Audience();
    [CompilerGeneratedAttribute]
public void set_Audience(string value);
}
public class Okta.AspNet.Abstractions.OktaWebApiOptionsValidator : OktaWebOptionsValidator`1<OktaWebApiOptions> {
    protected virtual void ValidateInternal(OktaWebApiOptions options);
}
public class Okta.AspNet.Abstractions.OktaWebOptions : object {
    public static string DefaultAuthorizationServerId;
    public static TimeSpan DefaultClockSkew;
    [CompilerGeneratedAttribute]
private string <OktaDomain>k__BackingField;
    [CompilerGeneratedAttribute]
private string <AuthorizationServerId>k__BackingField;
    [CompilerGeneratedAttribute]
private TimeSpan <ClockSkew>k__BackingField;
    [CompilerGeneratedAttribute]
private ProxyConfiguration <Proxy>k__BackingField;
    [CompilerGeneratedAttribute]
private HttpMessageHandler <BackchannelHttpClientHandler>k__BackingField;
    [CompilerGeneratedAttribute]
private TimeSpan <BackchannelTimeout>k__BackingField;
    public string OktaDomain { get; public set; }
    public string AuthorizationServerId { get; public set; }
    public TimeSpan ClockSkew { get; public set; }
    public ProxyConfiguration Proxy { get; public set; }
    public HttpMessageHandler BackchannelHttpClientHandler { get; public set; }
    public TimeSpan BackchannelTimeout { get; public set; }
    private static OktaWebOptions();
    [CompilerGeneratedAttribute]
public string get_OktaDomain();
    [CompilerGeneratedAttribute]
public void set_OktaDomain(string value);
    [CompilerGeneratedAttribute]
public string get_AuthorizationServerId();
    [CompilerGeneratedAttribute]
public void set_AuthorizationServerId(string value);
    [CompilerGeneratedAttribute]
public TimeSpan get_ClockSkew();
    [CompilerGeneratedAttribute]
public void set_ClockSkew(TimeSpan value);
    [CompilerGeneratedAttribute]
public ProxyConfiguration get_Proxy();
    [CompilerGeneratedAttribute]
public void set_Proxy(ProxyConfiguration value);
    [CompilerGeneratedAttribute]
public HttpMessageHandler get_BackchannelHttpClientHandler();
    [CompilerGeneratedAttribute]
public void set_BackchannelHttpClientHandler(HttpMessageHandler value);
    [CompilerGeneratedAttribute]
public TimeSpan get_BackchannelTimeout();
    [CompilerGeneratedAttribute]
public void set_BackchannelTimeout(TimeSpan value);
}
public class Okta.AspNet.Abstractions.OktaWebOptionsValidator`1 : object {
    protected virtual void ValidateInternal(T options);
    public void Validate(OktaWebOptions options);
}
public class Okta.AspNet.Abstractions.ProxyConfiguration : object {
    [CompilerGeneratedAttribute]
private Nullable`1<int> <Port>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Host>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Username>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Password>k__BackingField;
    public Nullable`1<int> Port { get; public set; }
    public string Host { get; public set; }
    public string Username { get; public set; }
    public string Password { get; public set; }
    [CompilerGeneratedAttribute]
public Nullable`1<int> get_Port();
    [CompilerGeneratedAttribute]
public void set_Port(Nullable`1<int> value);
    [CompilerGeneratedAttribute]
public string get_Host();
    [CompilerGeneratedAttribute]
public void set_Host(string value);
    [CompilerGeneratedAttribute]
public string get_Username();
    [CompilerGeneratedAttribute]
public void set_Username(string value);
    [CompilerGeneratedAttribute]
public string get_Password();
    [CompilerGeneratedAttribute]
public void set_Password(string value);
}
public class Okta.AspNet.Abstractions.StrictSecurityTokenValidator : object {
    private JwtSecurityTokenHandler _handler;
    public bool CanValidateToken { get; }
    public int MaximumTokenSizeInBytes { get; public set; }
    public sealed virtual bool get_CanValidateToken();
    public sealed virtual int get_MaximumTokenSizeInBytes();
    public sealed virtual void set_MaximumTokenSizeInBytes(int value);
    public sealed virtual bool CanReadToken(string securityToken);
    public sealed virtual ClaimsPrincipal ValidateToken(string securityToken, TokenValidationParameters validationParameters, SecurityToken& validatedToken);
}
public class Okta.AspNet.Abstractions.StrictTokenHandler : JwtSecurityTokenHandler {
    public virtual ClaimsPrincipal ValidateToken(string token, TokenValidationParameters validationParameters, SecurityToken& validatedToken);
}
public static class Okta.AspNet.Abstractions.UrlHelper : object {
    public static string CreateIssuerUrl(string oktaDomain, string authorizationServerId);
    public static string EnsureTrailingSlash(string uri);
}
public class Okta.AspNet.Abstractions.UserAgentBuilder : object {
    private static string VersionSeparator;
    private string _frameworkName;
    private Version _frameworkVersion;
    public UserAgentBuilder(string frameworkName, Version frameworkVersion);
    public string GetUserAgent();
    private string GetFrameworkVersion();
    private object GetRuntimeVersion();
    private string GetOSVersion();
    private string Sanitize(string input);
}
public class Okta.AspNet.Abstractions.UserAgentHelper : object {
    public static string GetFrameworkDescription(string runtimeFrameworkDescription, string runtimeAssemblyCodeBase);
}
