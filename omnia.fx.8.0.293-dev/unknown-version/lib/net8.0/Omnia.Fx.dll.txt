[ExtensionAttribute]
public static class Microsoft.Extensions.Configuration.IConfigurationBuilderExtensions : object {
    [ExtensionAttribute]
public static IConfigurationBuilder DoOmniaConfigurations(IConfigurationBuilder configurationBuilder);
    [ExtensionAttribute]
public static IConfigurationBuilder DoOmniaFinalBuildOfConfigurations(IConfigurationBuilder configurationBuilder);
}
public interface Microsoft.Extensions.DependencyInjection.IOmniaServiceDescriptor`1 {
    public abstract virtual T GetInstance(IServiceProvider provider);
}
[ExtensionAttribute]
public static class Microsoft.Extensions.DependencyInjection.IServiceCollectionExtensions : object {
    [ExtensionAttribute]
public static IServiceCollection DoOmniaServiceConfigurations(IServiceCollection serviceCollection);
}
[ExtensionAttribute]
public static class Microsoft.Extensions.DependencyInjection.ServiceCollectionExtensions : object {
    [ExtensionAttribute]
public static IServiceCollection AddSynchronizedCacheForExtension(IServiceCollection serviceCollection, Guid extensionId);
    [ExtensionAttribute]
public static IServiceCollection AddAsConfiguredHttpClient(IServiceCollection serviceCollection);
    [ExtensionAttribute]
public static IServiceCollection AddAsConfiguredHttpClient(IServiceCollection serviceCollection, Func`2<IServiceProvider, T> instanceCreatorFunc);
    [ExtensionAttribute]
public static IServiceCollection AddHttpClientConfiguration(IServiceCollection serviceCollection);
    [ExtensionAttribute]
public static IServiceCollection AddHttpClientContextConfiguration(IServiceCollection serviceCollection);
    [ExtensionAttribute]
public static IServiceCollection AddAsyncHttpClientConfiguration(IServiceCollection serviceCollection);
    [ExtensionAttribute]
public static IServiceCollection AddAsyncHttpClientContextConfiguration(IServiceCollection serviceCollection);
    [ExtensionAttribute]
public static IServiceCollection AddOmniaParamScopedContext(IServiceCollection serviceCollection, Action`2<IServiceProvider, TImplementation> configure);
    [ExtensionAttribute]
public static IServiceCollection AddOmniaDistributedCache(IServiceCollection serviceCollection);
}
[ExtensionAttribute]
public static class Microsoft.Extensions.DependencyInjection.ServiceDescriptorExtensions : object {
    [ExtensionAttribute]
public static IOmniaServiceDescriptor`1<T> ToOmniaServiceDescriptor(ServiceDescriptor descriptor);
}
public class Omnia.Core.Http.Preconfigured.HttpClients.OmniaCloudServiceApi : OmniaServiceHttpClientBase {
    [CompilerGeneratedAttribute]
private IOptionsMonitor`1<OmniaAppSettings> <OmniaAppSettings>k__BackingField;
    protected Guid OmniaServiceId { get; }
    private IOptionsMonitor`1<OmniaAppSettings> OmniaAppSettings { get; }
    public OmniaCloudServiceApi(HttpClientFactoryForOmniaServiceFunc httpClientFunc, IOptionsMonitor`1<OmniaAppSettings> omniaAppSettings, IHttpRequestConfiguration`1<OmniaCurrentServiceCredentials> serviceCredentials, IHttpRequestConfiguration`1<IncludeUserCredentials> currentUuserCredentials, IOmniaScopedContext omniaScopedContext);
    protected virtual Guid get_OmniaServiceId();
    [CompilerGeneratedAttribute]
private IOptionsMonitor`1<OmniaAppSettings> get_OmniaAppSettings();
    [AsyncStateMachineAttribute("Omnia.Core.Http.Preconfigured.HttpClients.OmniaCloudServiceApi/<DefaultHttpClientConfigurationAsync>d__6")]
protected virtual Task DefaultHttpClientConfigurationAsync(HttpClient clientToConfigure);
    [AsyncStateMachineAttribute("Omnia.Core.Http.Preconfigured.HttpClients.OmniaCloudServiceApi/<HttpRequestConfigurationAsync>d__7")]
public virtual ValueTask`1<HttpRequestConfiguration> HttpRequestConfigurationAsync();
    [CompilerGeneratedAttribute]
[DebuggerHiddenAttribute]
private Task <>n__0(HttpClient clientToConfigure);
    [CompilerGeneratedAttribute]
[DebuggerHiddenAttribute]
private ValueTask`1<HttpRequestConfiguration> <>n__1();
}
public class Omnia.Core.Http.Preconfigured.HttpClients.OmniaCloudTranslator : OmniaServiceHttpClientBase {
    [CompilerGeneratedAttribute]
private IOptionsMonitor`1<OmniaAppSettings> <OmniaAppSettings>k__BackingField;
    private IOptionsMonitor`1<OmniaAppSettings> OmniaAppSettings { get; }
    protected Guid OmniaServiceId { get; }
    public OmniaCloudTranslator(HttpClientFactoryForOmniaServiceFunc omniaServiceHttpClientFactoryFunc, IHttpRequestConfiguration`1<OmniaCurrentServiceCredentials> serviceCredentials, IHttpRequestConfiguration`1<IncludeUserCredentials> currentUserCredentials, IOmniaScopedContext omniaScopedContext, IOptionsMonitor`1<OmniaAppSettings> omniaAppSettings);
    [CompilerGeneratedAttribute]
private IOptionsMonitor`1<OmniaAppSettings> get_OmniaAppSettings();
    protected virtual Guid get_OmniaServiceId();
    [AsyncStateMachineAttribute("Omnia.Core.Http.Preconfigured.HttpClients.OmniaCloudTranslator/<HttpRequestConfigurationAsync>d__6")]
public virtual ValueTask`1<HttpRequestConfiguration> HttpRequestConfigurationAsync();
    [CompilerGeneratedAttribute]
[DebuggerHiddenAttribute]
private ValueTask`1<HttpRequestConfiguration> <>n__0();
}
public class Omnia.Fx.Ai.AzureOpenAiServiceOverHttp : object {
    [CompilerGeneratedAttribute]
private AzureOpenAiServiceHttpClient <AzureOpenAiHttpClient>k__BackingField;
    private AzureOpenAiServiceHttpClient AzureOpenAiHttpClient { get; }
    public AzureOpenAiServiceOverHttp(IConfiguredHttpClient`1<OmniaServiceApi> omniaHttpClient);
    [CompilerGeneratedAttribute]
private AzureOpenAiServiceHttpClient get_AzureOpenAiHttpClient();
    [AsyncStateMachineAttribute("Omnia.Fx.Ai.AzureOpenAiServiceOverHttp/<GenerateImageAsync>d__5")]
public sealed virtual ValueTask`1<TextToImageResponse> GenerateImageAsync(TextToImageRequest request);
    [AsyncStateMachineAttribute("Omnia.Fx.Ai.AzureOpenAiServiceOverHttp/<ExecuteLimitTextPromptAsync>d__6")]
public sealed virtual ValueTask`1<TextPromptResult> ExecuteLimitTextPromptAsync(TextPromptRequest request);
    [AsyncStateMachineAttribute("Omnia.Fx.Ai.AzureOpenAiServiceOverHttp/<ExecuteTextPromptAsync>d__7")]
public sealed virtual ValueTask`1<TextPromptResult> ExecuteTextPromptAsync(TextPromptRequest request);
    [AsyncStateMachineAttribute("Omnia.Fx.Ai.AzureOpenAiServiceOverHttp/<GetImageAsync>d__8")]
public ValueTask`1<AiImageResponse> GetImageAsync(TextToImageResponse textToImgResponse);
    [AsyncStateMachineAttribute("Omnia.Fx.Ai.AzureOpenAiServiceOverHttp/<GetTextTokensCountAsync>d__9")]
public sealed virtual ValueTask`1<int> GetTextTokensCountAsync(TextTokenCountRequest request);
}
public static class Omnia.Fx.Ai.HttpContract : object {
}
public interface Omnia.Fx.Ai.IAzureOpenAiService {
    public abstract virtual ValueTask`1<TextPromptResult> ExecuteTextPromptAsync(TextPromptRequest request);
    public abstract virtual ValueTask`1<TextToImageResponse> GenerateImageAsync(TextToImageRequest request);
    public abstract virtual ValueTask`1<TextPromptResult> ExecuteLimitTextPromptAsync(TextPromptRequest request);
    public abstract virtual ValueTask`1<int> GetTextTokensCountAsync(TextTokenCountRequest request);
}
public class Omnia.Fx.AiSettings.AiSettingsServiceOverHttp : object {
    [CompilerGeneratedAttribute]
private AiSettingsServiceHttpClient <AiSettingsServiceClient>k__BackingField;
    private AiSettingsServiceHttpClient AiSettingsServiceClient { get; }
    public AiSettingsServiceOverHttp(IConfiguredHttpClient`1<OmniaServiceApi> omniaHttpClient);
    [CompilerGeneratedAttribute]
private AiSettingsServiceHttpClient get_AiSettingsServiceClient();
    [AsyncStateMachineAttribute("Omnia.Fx.AiSettings.AiSettingsServiceOverHttp/<AddAsync>d__5")]
public sealed virtual ValueTask`1<AiSetting> AddAsync(AiSetting model);
    [AsyncStateMachineAttribute("Omnia.Fx.AiSettings.AiSettingsServiceOverHttp/<DeleteAsync>d__6")]
public sealed virtual ValueTask DeleteAsync(int id);
    [AsyncStateMachineAttribute("Omnia.Fx.AiSettings.AiSettingsServiceOverHttp/<GetAsync>d__7")]
public sealed virtual ValueTask`1<AiSetting> GetAsync(int id);
    [AsyncStateMachineAttribute("Omnia.Fx.AiSettings.AiSettingsServiceOverHttp/<GetByTypeAsync>d__8")]
public sealed virtual ValueTask`1<IList`1<AiSetting>> GetByTypeAsync(string type, Nullable`1<Guid> businessProfileId);
    [AsyncStateMachineAttribute("Omnia.Fx.AiSettings.AiSettingsServiceOverHttp/<UpdateAsync>d__9")]
public sealed virtual ValueTask`1<AiSetting> UpdateAsync(AiSetting model);
}
public static class Omnia.Fx.AiSettings.HttpContract : object {
}
public interface Omnia.Fx.AiSettings.IAiSettingsService {
    public abstract virtual ValueTask`1<AiSetting> GetAsync(int id);
    public abstract virtual ValueTask`1<IList`1<AiSetting>> GetByTypeAsync(string type, Nullable`1<Guid> businessProfileId);
    public abstract virtual ValueTask`1<AiSetting> AddAsync(AiSetting model);
    public abstract virtual ValueTask`1<AiSetting> UpdateAsync(AiSetting model);
    public abstract virtual ValueTask DeleteAsync(int id);
}
public abstract class Omnia.Fx.AppRoutes.AppRouteCacheHandler : object {
    [CompilerGeneratedAttribute]
private IOmniaCacheWithKeyHelper`1<IOmniaSynchronizedMemoryCache> <CacheHelper>k__BackingField;
    protected IOmniaCacheWithKeyHelper`1<IOmniaSynchronizedMemoryCache> CacheHelper { get; }
    protected AppRouteCacheHandler(OmniaTargetedSynchronizedMemoryCache cache);
    [CompilerGeneratedAttribute]
protected IOmniaCacheWithKeyHelper`1<IOmniaSynchronizedMemoryCache> get_CacheHelper();
    [AsyncStateMachineAttribute("Omnia.Fx.AppRoutes.AppRouteCacheHandler/<GetOrSetAppRouteCacheAsync>d__5")]
public ValueTask`1<AppRoute> GetOrSetAppRouteCacheAsync(string path, Func`1<ValueTask`1<AppRoute>> getAppRouteByPathFunc);
    [AsyncStateMachineAttribute("Omnia.Fx.AppRoutes.AppRouteCacheHandler/<GetOrSetAppRouteCacheAsync>d__6")]
public ValueTask`1<AppRoute> GetOrSetAppRouteCacheAsync(Guid appInstanceId, Func`1<ValueTask`1<AppRoute>> getAppRouteByAppInstanceIdFunc);
    [AsyncStateMachineAttribute("Omnia.Fx.AppRoutes.AppRouteCacheHandler/<GetOrSetAppRoutesCacheAsync>d__7")]
public ValueTask`1<IList`1<AppRoute>> GetOrSetAppRoutesCacheAsync(IList`1<Guid> appInstanceIds, Func`2<IList`1<Guid>, ValueTask`1<IList`1<AppRoute>>> getAppRouteByAppInstanceIdsFunc);
    public ICacheDependency EnsureRoutePrefixesCacheDependency();
    protected string GetRoutePrefixesDependencyCacheKey();
    [AsyncStateMachineAttribute("Omnia.Fx.AppRoutes.AppRouteCacheHandler/<GetOrSetAllRoutePrefixesCacheAsync>d__10")]
public ValueTask`1<List`1<string>> GetOrSetAllRoutePrefixesCacheAsync(Func`1<ValueTask`1<List`1<string>>> getRoutePrefixesFunc);
    [AsyncStateMachineAttribute("Omnia.Fx.AppRoutes.AppRouteCacheHandler/<GetOrSetAppRoutesCacheAsync>d__11")]
public ValueTask`1<IEnumerable`1<AppRoute>> GetOrSetAppRoutesCacheAsync(Guid omniaServiceId, Func`1<ValueTask`1<IEnumerable`1<AppRoute>>> getAppRoutesByOmniaServiceIdFunc);
    public ICacheDependency EnsurePathCacheDependency(string path);
    protected string GetPathDependencyCacheKey(string path);
    private ICacheDependency EnsureOmniaServiceCacheDependency(Guid omniaServiceId);
    protected string GetServiceIdDependencyCacheKey(Guid omniaServiceId);
}
internal class Omnia.Fx.AppRoutes.AppRouteService : object {
    [CompilerGeneratedAttribute]
private IAppRouteServiceWithoutCache <AppRouteServiceWithoutCache>k__BackingField;
    [CompilerGeneratedAttribute]
private InternalAppRouteCacheHandler <AppRouteCacheHandler>k__BackingField;
    private IAppRouteServiceWithoutCache AppRouteServiceWithoutCache { get; }
    private InternalAppRouteCacheHandler AppRouteCacheHandler { get; }
    public AppRouteService(IAppRouteServiceWithoutCache appRouteServiceWithoutCache, OmniaTargetedSynchronizedMemoryCache omniaTargetedSynchronizedMemoryCache);
    [CompilerGeneratedAttribute]
private IAppRouteServiceWithoutCache get_AppRouteServiceWithoutCache();
    [CompilerGeneratedAttribute]
private InternalAppRouteCacheHandler get_AppRouteCacheHandler();
    public sealed virtual ValueTask`1<AppRoute> CreateAsync(string path, Guid omniaServiceId, Guid manifestId, Guid appInstanceId, bool allowMobileLogin, bool allowAnonymous);
    [AsyncStateMachineAttribute("Omnia.Fx.AppRoutes.AppRouteService/<GetAsync>d__9")]
public sealed virtual ValueTask`1<IEnumerable`1<AppRoute>> GetAsync(Guid omniaServiceId);
    [AsyncStateMachineAttribute("Omnia.Fx.AppRoutes.AppRouteService/<GetByPathAsync>d__10")]
public sealed virtual ValueTask`1<AppRoute> GetByPathAsync(string path);
    [AsyncStateMachineAttribute("Omnia.Fx.AppRoutes.AppRouteService/<GetByAppInstanceIdAsync>d__11")]
public sealed virtual ValueTask`1<AppRoute> GetByAppInstanceIdAsync(Guid appInstanceId);
    public sealed virtual IOmniaPropertyBag`1<AppRoutePropertyBagModel> GetPropertyBag(string path);
    [AsyncStateMachineAttribute("Omnia.Fx.AppRoutes.AppRouteService/<RemoveAsync>d__13")]
public sealed virtual ValueTask RemoveAsync(string path);
    public sealed virtual ValueTask`1<AppRoute> UpdateAsync(AppRoute appRoute);
    [AsyncStateMachineAttribute("Omnia.Fx.AppRoutes.AppRouteService/<UpdateRedirectRulesAsync>d__15")]
public sealed virtual ValueTask UpdateRedirectRulesAsync(string path, List`1<IRedirectRule> rules);
    [AsyncStateMachineAttribute("Omnia.Fx.AppRoutes.AppRouteService/<GetAppPathByUrlAsync>d__16")]
private ValueTask`1<string> GetAppPathByUrlAsync(string url);
    [AsyncStateMachineAttribute("Omnia.Fx.AppRoutes.AppRouteService/<EnsureRoutePrefixAsync>d__17")]
public sealed virtual ValueTask EnsureRoutePrefixAsync(string routePrefix);
    [AsyncStateMachineAttribute("Omnia.Fx.AppRoutes.AppRouteService/<GetAllRoutePrefixesAsync>d__18")]
public sealed virtual ValueTask`1<List`1<string>> GetAllRoutePrefixesAsync();
    [AsyncStateMachineAttribute("Omnia.Fx.AppRoutes.AppRouteService/<GetRouteCacheDependencyAsync>d__19")]
public sealed virtual ValueTask`1<ICacheDependency> GetRouteCacheDependencyAsync(Guid appInstanceId);
    [AsyncStateMachineAttribute("Omnia.Fx.AppRoutes.AppRouteService/<GetRouteCacheDependencyAsync>d__20")]
public sealed virtual ValueTask`1<ICacheDependency> GetRouteCacheDependencyAsync(string routePath);
    [AsyncStateMachineAttribute("Omnia.Fx.AppRoutes.AppRouteService/<UpdateAppRoutePathAsync>d__21")]
public sealed virtual ValueTask`1<AppRoute> UpdateAppRoutePathAsync(Guid appInstanceId, string newPath);
    [AsyncStateMachineAttribute("Omnia.Fx.AppRoutes.AppRouteService/<ValidateAppRouteAsync>d__22")]
public sealed virtual ValueTask`1<AppRouteValidationResult> ValidateAppRouteAsync(RouteValidationRequest request);
    [AsyncStateMachineAttribute("Omnia.Fx.AppRoutes.AppRouteService/<GetByAppInstanceIdsAsync>d__23")]
public sealed virtual ValueTask`1<IList`1<AppRoute>> GetByAppInstanceIdsAsync(IList`1<Guid> appInstanceIds);
    [AsyncStateMachineAttribute("Omnia.Fx.AppRoutes.AppRouteService/<<GetAllRoutePrefixesAsync>b__18_0>d")]
[CompilerGeneratedAttribute]
private ValueTask`1<List`1<string>> <GetAllRoutePrefixesAsync>b__18_0();
    [AsyncStateMachineAttribute("Omnia.Fx.AppRoutes.AppRouteService/<<GetByAppInstanceIdsAsync>b__23_0>d")]
[CompilerGeneratedAttribute]
private ValueTask`1<IList`1<AppRoute>> <GetByAppInstanceIdsAsync>b__23_0(IList`1<Guid> guids);
}
internal class Omnia.Fx.AppRoutes.AppRouteServiceWithoutCache : object {
    [CompilerGeneratedAttribute]
private IConfiguredHttpClient`1<OmniaServiceApi> <OmniaHttpClient>k__BackingField;
    [CompilerGeneratedAttribute]
private IOmniaSynchronizedMemoryCache <OmniaSynchronizedMemoryCache>k__BackingField;
    [CompilerGeneratedAttribute]
private AppRouteServiceHttpClient <HttpRouteService>k__BackingField;
    private IConfiguredHttpClient`1<OmniaServiceApi> OmniaHttpClient { get; }
    private IOmniaSynchronizedMemoryCache OmniaSynchronizedMemoryCache { get; }
    private AppRouteServiceHttpClient HttpRouteService { get; }
    public AppRouteServiceWithoutCache(IConfiguredHttpClient`1<OmniaServiceApi> omniaHttpClient, OmniaTargetedSynchronizedMemoryCache omniaSynchronizedMemoryCache);
    [CompilerGeneratedAttribute]
private IConfiguredHttpClient`1<OmniaServiceApi> get_OmniaHttpClient();
    [CompilerGeneratedAttribute]
private IOmniaSynchronizedMemoryCache get_OmniaSynchronizedMemoryCache();
    [CompilerGeneratedAttribute]
private AppRouteServiceHttpClient get_HttpRouteService();
    [AsyncStateMachineAttribute("Omnia.Fx.AppRoutes.AppRouteServiceWithoutCache/<CreateAsync>d__13")]
public sealed virtual ValueTask`1<AppRoute> CreateAsync(string path, Guid omniaServiceId, Guid manifestId, Guid appInstanceId, bool allowMobileLogin, bool allowAnonymous);
    [AsyncStateMachineAttribute("Omnia.Fx.AppRoutes.AppRouteServiceWithoutCache/<UpdateAsync>d__14")]
public sealed virtual ValueTask`1<AppRoute> UpdateAsync(AppRoute appRoute);
    [AsyncStateMachineAttribute("Omnia.Fx.AppRoutes.AppRouteServiceWithoutCache/<UpdateRedirectRulesAsync>d__15")]
public sealed virtual ValueTask UpdateRedirectRulesAsync(string path, List`1<IRedirectRule> rules);
    [AsyncStateMachineAttribute("Omnia.Fx.AppRoutes.AppRouteServiceWithoutCache/<GetByPathAsync>d__16")]
public sealed virtual ValueTask`1<AppRoute> GetByPathAsync(string path);
    [AsyncStateMachineAttribute("Omnia.Fx.AppRoutes.AppRouteServiceWithoutCache/<GetByAppInstanceIdAsync>d__17")]
public sealed virtual ValueTask`1<AppRoute> GetByAppInstanceIdAsync(Guid appInstanceId);
    [AsyncStateMachineAttribute("Omnia.Fx.AppRoutes.AppRouteServiceWithoutCache/<GetByAppInstanceIdsAsync>d__18")]
public sealed virtual ValueTask`1<IList`1<AppRoute>> GetByAppInstanceIdsAsync(IList`1<Guid> appInstanceIds);
    [AsyncStateMachineAttribute("Omnia.Fx.AppRoutes.AppRouteServiceWithoutCache/<GetAsync>d__19")]
public sealed virtual ValueTask`1<IEnumerable`1<AppRoute>> GetAsync(Guid omniaServiceId);
    [AsyncStateMachineAttribute("Omnia.Fx.AppRoutes.AppRouteServiceWithoutCache/<RemoveAsync>d__20")]
public sealed virtual ValueTask RemoveAsync(string path);
    public sealed virtual IOmniaPropertyBag`1<AppRoutePropertyBagModel> GetPropertyBag(string path);
    [AsyncStateMachineAttribute("Omnia.Fx.AppRoutes.AppRouteServiceWithoutCache/<EnsureRoutePrefixAsync>d__22")]
public sealed virtual ValueTask EnsureRoutePrefixAsync(string routePrefix);
    [AsyncStateMachineAttribute("Omnia.Fx.AppRoutes.AppRouteServiceWithoutCache/<GetAllRoutePrefixesAsync>d__23")]
public sealed virtual ValueTask`1<List`1<string>> GetAllRoutePrefixesAsync();
    [AsyncStateMachineAttribute("Omnia.Fx.AppRoutes.AppRouteServiceWithoutCache/<UpdateAppRoutePathAsync>d__24")]
public sealed virtual ValueTask`1<AppRoute> UpdateAppRoutePathAsync(Guid appInstanceId, string newPath);
    [AsyncStateMachineAttribute("Omnia.Fx.AppRoutes.AppRouteServiceWithoutCache/<ValidateAppRouteAsync>d__25")]
public sealed virtual ValueTask`1<AppRouteValidationResult> ValidateAppRouteAsync(RouteValidationRequest request);
}
public class Omnia.Fx.AppRoutes.HttpContract : object {
}
public interface Omnia.Fx.AppRoutes.IAppRouteService {
    public abstract virtual ValueTask`1<ICacheDependency> GetRouteCacheDependencyAsync(Guid appInstanceId);
    public abstract virtual ValueTask`1<ICacheDependency> GetRouteCacheDependencyAsync(string routePath);
}
public interface Omnia.Fx.AppRoutes.IAppRouteServiceWithoutCache {
    public abstract virtual ValueTask`1<AppRoute> CreateAsync(string path, Guid omniaServiceId, Guid manifestId, Guid appInstanceId, bool allowMobileLogin, bool allowAnonymous);
    public abstract virtual ValueTask`1<AppRoute> UpdateAsync(AppRoute appRoute);
    public abstract virtual ValueTask`1<AppRoute> GetByPathAsync(string path);
    public abstract virtual ValueTask`1<AppRoute> GetByAppInstanceIdAsync(Guid appInstanceId);
    public abstract virtual ValueTask`1<IList`1<AppRoute>> GetByAppInstanceIdsAsync(IList`1<Guid> appInstanceIds);
    public abstract virtual ValueTask`1<IEnumerable`1<AppRoute>> GetAsync(Guid omniaServiceId);
    public abstract virtual ValueTask RemoveAsync(string path);
    public abstract virtual IOmniaPropertyBag`1<AppRoutePropertyBagModel> GetPropertyBag(string path);
    public abstract virtual ValueTask UpdateRedirectRulesAsync(string path, List`1<IRedirectRule> rules);
    public abstract virtual ValueTask EnsureRoutePrefixAsync(string routePrefix);
    public abstract virtual ValueTask`1<List`1<string>> GetAllRoutePrefixesAsync();
    public abstract virtual ValueTask`1<AppRoute> UpdateAppRoutePathAsync(Guid appInstanceId, string newPath);
    public abstract virtual ValueTask`1<AppRouteValidationResult> ValidateAppRouteAsync(RouteValidationRequest request);
}
public abstract class Omnia.Fx.Apps.AppCacheHandler : object {
    [CompilerGeneratedAttribute]
private IOmniaCacheWithKeyHelper`1<IOmniaSynchronizedMemoryCache> <CacheHelper>k__BackingField;
    protected IOmniaCacheWithKeyHelper`1<IOmniaSynchronizedMemoryCache> CacheHelper { get; }
    public AppCacheHandler(OmniaTargetedSynchronizedMemoryCache cache);
    [CompilerGeneratedAttribute]
protected IOmniaCacheWithKeyHelper`1<IOmniaSynchronizedMemoryCache> get_CacheHelper();
    public ICacheDependency EnsureAppInstanceCacheDependency(AppInstance appInstance);
    public ICacheDependency EnsureAppInstanceCacheDependency(AppInstanceOutputInfo appInstanceOutput);
    protected ICacheDependency EnsureAppTemplateCacheDependency(Guid appTemplateId, Guid appDefinitionId);
    protected ICacheDependency EnsureAppDefinitionCacheDependency(Guid appDefinitionId);
    protected string GetAppInstanceDependencyCacheKey(Guid appInstanceId);
    protected string GetAppTemplateDependencyCacheKey(Guid appTemplateId);
    protected string GetAppDefinitionDependencyCacheKey(Guid appDefinitionId);
}
internal class Omnia.Fx.Apps.AppService : AppServiceBase {
    [CompilerGeneratedAttribute]
private ILogger`1<AppService> <Logger>k__BackingField;
    [CompilerGeneratedAttribute]
private IConfiguredHttpClient`1<OmniaServiceApi> <OmniaService>k__BackingField;
    [CompilerGeneratedAttribute]
private IEnterprisePropertyService <EnterprisePropertyService>k__BackingField;
    [CompilerGeneratedAttribute]
private AppServiceHttpClient <AppServiceOverHttpClient>k__BackingField;
    [CompilerGeneratedAttribute]
private InternalAppCacheHandler <AppCacheHandler>k__BackingField;
    private static IList`1<string> DefaultAppProperties;
    private ILogger`1<AppService> Logger { get; }
    private IConfiguredHttpClient`1<OmniaServiceApi> OmniaService { get; }
    private IEnterprisePropertyService EnterprisePropertyService { get; }
    private AppServiceHttpClient AppServiceOverHttpClient { get; }
    private InternalAppCacheHandler AppCacheHandler { get; }
    public IAppServiceQueryBuilder Query { get; }
    public AppService(ILogger`1<AppService> logger, IServiceProvider serviceProvider, IConfiguredHttpClient`1<OmniaServiceApi> omniaService, OmniaTargetedSynchronizedMemoryCache cache, IEnterprisePropertyService enterprisePropertyService);
    private static AppService();
    [CompilerGeneratedAttribute]
private ILogger`1<AppService> get_Logger();
    [CompilerGeneratedAttribute]
private IConfiguredHttpClient`1<OmniaServiceApi> get_OmniaService();
    [CompilerGeneratedAttribute]
private IEnterprisePropertyService get_EnterprisePropertyService();
    [CompilerGeneratedAttribute]
private AppServiceHttpClient get_AppServiceOverHttpClient();
    [CompilerGeneratedAttribute]
private InternalAppCacheHandler get_AppCacheHandler();
    public sealed virtual IAppServiceQueryBuilder get_Query();
    [AsyncStateMachineAttribute("Omnia.Fx.Apps.AppService/<GetAppInstanceByIdAsync>d__20")]
public sealed virtual ValueTask`1<AppInstance> GetAppInstanceByIdAsync(Guid appInstanceId);
    [AsyncStateMachineAttribute("Omnia.Fx.Apps.AppService/<GetAppInstancesByDefinitionIdAsync>d__21")]
public sealed virtual ValueTask`1<IList`1<AppInstance>> GetAppInstancesByDefinitionIdAsync(Guid appDefinitionId);
    [AsyncStateMachineAttribute("Omnia.Fx.Apps.AppService/<UpdateAppInstanceEnterprisePropertiesAsync>d__22")]
public sealed virtual ValueTask`1<AppInstance> UpdateAppInstanceEnterprisePropertiesAsync(Guid appInstanceId, Dictionary`2<string, JToken> enterpriseProperties);
    [AsyncStateMachineAttribute("Omnia.Fx.Apps.AppService/<GetAppInstanceOutputInfosAsync>d__23")]
public sealed virtual ValueTask`1<IList`1<AppInstanceOutputInfo>> GetAppInstanceOutputInfosAsync(IList`1<Guid> appInstanceIds);
    [AsyncStateMachineAttribute("Omnia.Fx.Apps.AppService/<GetAppInstanceOutputInfosAsync>d__24")]
public sealed virtual ValueTask`1<IList`1<AppInstanceOutputInfo>> GetAppInstanceOutputInfosAsync(Guid appDefinitionId);
    [AsyncStateMachineAttribute("Omnia.Fx.Apps.AppService/<GetAppInstanceOutputInfosAsync>d__25")]
public sealed virtual ValueTask`1<IList`1<AppInstanceOutputInfo>> GetAppInstanceOutputInfosAsync(Guid activatedFeatureDefinitionId, Guid appDefinitionId);
    [AsyncStateMachineAttribute("Omnia.Fx.Apps.AppService/<GetAppInstanceOutputInfosByFeatureDefinitionAsync>d__26")]
public sealed virtual ValueTask`1<IList`1<AppInstanceOutputInfo>> GetAppInstanceOutputInfosByFeatureDefinitionAsync(Guid activatedFeatureDefinitionId);
    [AsyncStateMachineAttribute("Omnia.Fx.Apps.AppService/<AppInstancesAsync>d__27")]
public sealed virtual ValueTask`1<IOmniaSingleQueryContext`2<ItemQuery, ItemQueryResult`1<AppInstance>>> AppInstancesAsync();
    [AsyncStateMachineAttribute("Omnia.Fx.Apps.AppService/<AppInstancesWithAccessAsync>d__28")]
public sealed virtual ValueTask`1<IOmniaSingleQueryContext`2<ItemQuery, ItemQueryResult`1<AppInstance>>> AppInstancesWithAccessAsync(Guid appAccessRoleId);
    [AsyncStateMachineAttribute("Omnia.Fx.Apps.AppService/<AppInstancesUsersAsync>d__29")]
public sealed virtual ValueTask`1<IOmniaSingleQueryContext`2<ItemQuery, ItemQueryResult`1<AppInstancesUser>>> AppInstancesUsersAsync(string userEmail);
    [AsyncStateMachineAttribute("Omnia.Fx.Apps.AppService/<AppInstancesUsersWithAccessAsync>d__30")]
public sealed virtual ValueTask`1<IOmniaSingleQueryContext`2<ItemQuery, ItemQueryResult`1<AppInstancesUser>>> AppInstancesUsersWithAccessAsync(string userEmail, Guid appAccessRoleId);
    [AsyncStateMachineAttribute("Omnia.Fx.Apps.AppService/<QueryAppInstances>d__31`1")]
protected ValueTask`1<ItemQueryResult`1<T>> QueryAppInstances(ItemQuery itemQuery);
    [AsyncStateMachineAttribute("Omnia.Fx.Apps.AppService/<QueryAppInstancesWithAccess>d__32`1")]
protected ValueTask`1<ItemQueryResult`1<T>> QueryAppInstancesWithAccess(ItemQuery itemQuery, Guid appAccessRoleId);
    [AsyncStateMachineAttribute("Omnia.Fx.Apps.AppService/<GetProfileAppTemplatesAsync>d__33")]
public sealed virtual ValueTask`1<IList`1<AppTemplate>> GetProfileAppTemplatesAsync();
    [AsyncStateMachineAttribute("Omnia.Fx.Apps.AppService/<GetAllAppTemplatesAsync>d__34")]
public sealed virtual ValueTask`1<IList`1<AppTemplate>> GetAllAppTemplatesAsync();
    [AsyncStateMachineAttribute("Omnia.Fx.Apps.AppService/<GetAppTemplateAsync>d__35")]
public sealed virtual ValueTask`1<AppTemplate> GetAppTemplateAsync(Guid appTemplateId);
    [AsyncStateMachineAttribute("Omnia.Fx.Apps.AppService/<AddOrUpdateAppTemplateAsync>d__36")]
public sealed virtual ValueTask`1<AppTemplate> AddOrUpdateAppTemplateAsync(AppTemplate appTemplate);
    [AsyncStateMachineAttribute("Omnia.Fx.Apps.AppService/<CreateAppInstanceAsync>d__37")]
public sealed virtual ValueTask`1<AppInstance> CreateAppInstanceAsync(Guid appTemplateId, AppInstanceInputInfo inputInfo, NameValueCollection contextParams);
    [AsyncStateMachineAttribute("Omnia.Fx.Apps.AppService/<GetAppInstanceStatusAsync>d__38")]
public sealed virtual ValueTask`1<AppInstance> GetAppInstanceStatusAsync(Guid appInstanceId);
    [AsyncStateMachineAttribute("Omnia.Fx.Apps.AppService/<GetAppInstancesByQueryAsync>d__39")]
public sealed virtual ValueTask`1<AppInstancesResult> GetAppInstancesByQueryAsync(Guid profileId, Guid appDefinitionId, AppInstanceQuery query);
    [AsyncStateMachineAttribute("Omnia.Fx.Apps.AppService/<UpdateAppInstanceProperties>d__40")]
public sealed virtual ValueTask`1<AppInstance> UpdateAppInstanceProperties(AppInstance appInstance, Expression`1[] propertiesToUpdate);
    [AsyncStateMachineAttribute("Omnia.Fx.Apps.AppService/<Follow>d__41")]
public sealed virtual ValueTask Follow(Guid appInstanceId);
    [AsyncStateMachineAttribute("Omnia.Fx.Apps.AppService/<Unfollow>d__42")]
public sealed virtual ValueTask Unfollow(Guid appInstanceId);
    [AsyncStateMachineAttribute("Omnia.Fx.Apps.AppService/<FollowApps>d__43")]
public sealed virtual ValueTask FollowApps(List`1<string> resourceUrls);
    [AsyncStateMachineAttribute("Omnia.Fx.Apps.AppService/<UnfollowApps>d__44")]
public sealed virtual ValueTask UnfollowApps(List`1<string> resourceUrls);
    [AsyncStateMachineAttribute("Omnia.Fx.Apps.AppService/<SetLastVisited>d__45")]
public sealed virtual ValueTask SetLastVisited(Guid appInstanceId);
    public sealed virtual ICacheDependency EnsureAppInstanceCacheDependency(AppInstance appInstance);
    public sealed virtual ICacheDependency EnsureAppInstanceCacheDependency(AppInstanceOutputInfo appInstanceOutput);
    [AsyncStateMachineAttribute("Omnia.Fx.Apps.AppService/<GetAppInstancesResultByScopedQueryAsync>d__48")]
public sealed virtual ValueTask`1<AppInstancesScopedQueryResult> GetAppInstancesResultByScopedQueryAsync(Nullable`1<Guid> businessProfileId, Guid appDefinitionId, AppInstanceScopedQuery scopedQuery);
    [AsyncStateMachineAttribute("Omnia.Fx.Apps.AppService/<ValidateAppInstanceSPUrlAsync>d__49")]
public sealed virtual ValueTask`1<string> ValidateAppInstanceSPUrlAsync(string spSiteUrl);
}
internal abstract class Omnia.Fx.Apps.Common.AppServiceBase : object {
    [CompilerGeneratedAttribute]
private IServiceProvider <ServiceProvider>k__BackingField;
    private IServiceProvider ServiceProvider { get; }
    public AppServiceBase(IServiceProvider serviceProvider);
    [CompilerGeneratedAttribute]
private IServiceProvider get_ServiceProvider();
    public T GetRequiredService();
}
[ExtensionAttribute]
public static class Omnia.Fx.Apps.Common.IAppServiceExtension : object {
    [ExtensionAttribute]
public static T GetRequiredService(IAppService appService);
}
public class Omnia.Fx.Apps.Helpers.AppInstanceHelper : object {
    public static IEnumerable`1<Expression`1<Func`2<AppInstance, object>>> ToPropertyExpressions(IEnumerable`1<string> properties);
}
public class Omnia.Fx.Apps.Helpers.AppInstanceResourceHelper : object {
    private static Regex Regex;
    private static AppInstanceResourceHelper();
    public static string GenerateResource(Guid appInstanceId);
    public static bool TryParseAppInstanceId(string resource, Guid& appInstanceId);
}
public class Omnia.Fx.Apps.HttpContract : object {
}
public interface Omnia.Fx.Apps.IAppService {
    public IAppServiceQueryBuilder Query { get; }
    public abstract virtual ValueTask`1<AppInstance> GetAppInstanceByIdAsync(Guid appInstanceId);
    public abstract virtual ValueTask`1<IList`1<AppInstanceOutputInfo>> GetAppInstanceOutputInfosAsync(IList`1<Guid> appInstanceIds);
    public abstract virtual ValueTask`1<IList`1<AppInstanceOutputInfo>> GetAppInstanceOutputInfosAsync(Guid appDefinitionId);
    public abstract virtual ValueTask`1<IList`1<AppInstanceOutputInfo>> GetAppInstanceOutputInfosAsync(Guid activatedFeatureDefinitionId, Guid appDefinitionId);
    public abstract virtual ValueTask`1<IList`1<AppInstanceOutputInfo>> GetAppInstanceOutputInfosByFeatureDefinitionAsync(Guid activatedFeatureDefinitionId);
    public abstract virtual ValueTask`1<AppInstance> UpdateAppInstanceEnterprisePropertiesAsync(Guid appInstanceId, Dictionary`2<string, JToken> enterpriseProperties);
    public abstract virtual IAppServiceQueryBuilder get_Query();
    public abstract virtual ValueTask`1<IList`1<AppInstance>> GetAppInstancesByDefinitionIdAsync(Guid appDefinitionId);
    public abstract virtual ValueTask`1<IList`1<AppTemplate>> GetProfileAppTemplatesAsync();
    public abstract virtual ValueTask`1<AppTemplate> GetAppTemplateAsync(Guid appTemplateId);
    public abstract virtual ValueTask`1<AppTemplate> AddOrUpdateAppTemplateAsync(AppTemplate appTemplate);
    public abstract virtual ValueTask`1<IList`1<AppTemplate>> GetAllAppTemplatesAsync();
    public abstract virtual ValueTask`1<AppInstance> CreateAppInstanceAsync(Guid appTemplateId, AppInstanceInputInfo inputInfo, NameValueCollection contextParams);
    public abstract virtual ValueTask`1<AppInstance> GetAppInstanceStatusAsync(Guid appInstanceId);
    public abstract virtual ValueTask`1<AppInstancesResult> GetAppInstancesByQueryAsync(Guid profileId, Guid appDefinitionId, AppInstanceQuery query);
    public abstract virtual ValueTask`1<AppInstancesScopedQueryResult> GetAppInstancesResultByScopedQueryAsync(Nullable`1<Guid> businessProfileId, Guid appDefinitionId, AppInstanceScopedQuery scopedQuery);
    public abstract virtual ValueTask`1<AppInstance> UpdateAppInstanceProperties(AppInstance appInstance, Expression`1[] propertiesToUpdate);
    public abstract virtual ValueTask`1<string> ValidateAppInstanceSPUrlAsync(string spSiteUrl);
    public abstract virtual ValueTask Follow(Guid appInstanceId);
    public abstract virtual ValueTask Unfollow(Guid appInstanceId);
    public abstract virtual ValueTask SetLastVisited(Guid appInstanceId);
    public abstract virtual ValueTask FollowApps(List`1<string> resourceUrls);
    public abstract virtual ValueTask UnfollowApps(List`1<string> resourceUrls);
    public abstract virtual ICacheDependency EnsureAppInstanceCacheDependency(AppInstance appInstance);
    public abstract virtual ICacheDependency EnsureAppInstanceCacheDependency(AppInstanceOutputInfo appInstanceOutput);
}
[ExtensionAttribute]
public static class Omnia.Fx.Apps.IAppServiceExtension : object {
    [AsyncStateMachineAttribute("Omnia.Fx.Apps.IAppServiceExtension/<WaitForProvisioningStateAsync>d__0")]
[ExtensionAttribute]
public static ValueTask WaitForProvisioningStateAsync(IAppService appService, AppInstance appInstance, Func`2<AppInstance, ValueTask> successFunc, Func`2<AppInstance, ValueTask> errorFunc, Func`2<AppInstance, ValueTask> timeoutFunc, int minutesTimeout);
    [AsyncStateMachineAttribute("Omnia.Fx.Apps.IAppServiceExtension/<WaitAsync>d__1")]
private static ValueTask`1<AppInstance> WaitAsync(IAppService appService, AppInstance appInstance, int minutesTimeout);
}
public interface Omnia.Fx.Apps.IAppServiceQueryBuilder {
    public abstract virtual ValueTask`1<IOmniaSingleQueryContext`2<ItemQuery, ItemQueryResult`1<AppInstance>>> AppInstancesAsync();
    public abstract virtual ValueTask`1<IOmniaSingleQueryContext`2<ItemQuery, ItemQueryResult`1<AppInstancesUser>>> AppInstancesUsersAsync(string userEmail);
    public abstract virtual ValueTask`1<IOmniaSingleQueryContext`2<ItemQuery, ItemQueryResult`1<AppInstance>>> AppInstancesWithAccessAsync(Guid appAccessRoleId);
    public abstract virtual ValueTask`1<IOmniaSingleQueryContext`2<ItemQuery, ItemQueryResult`1<AppInstancesUser>>> AppInstancesUsersWithAccessAsync(string userEmail, Guid appAccessRoleId);
}
public class Omnia.Fx.Apps.Queries.AppInstanceQueryBuilder : AppInstanceQueryBuilderBase {
    public AppInstanceQueryBuilder(List`1<EnterprisePropertyDefinition> enterpriseProperties, string language, IList`1<string> multilingualFieldQueries);
}
public class Omnia.Fx.Apps.Queries.AppInstanceQueryBuilderBase : QueryBuilder`1<ItemQuery> {
    private static string AppInstanceMultilingualQueryTablePrefix;
    private static string AppTemplateMultilingualQueryTableAlias;
    [CompilerGeneratedAttribute]
private Dictionary`2<string, string> <PropertyValueColumnMap>k__BackingField;
    private static IList`1<string> DefaultAppProperties { get; }
    public Dictionary`2<string, string> PropertyValueColumnMap { get; }
    public AppInstanceQueryBuilderBase(ItemQuery query, IQueryFilterResolver queryFilterResolver);
    private static IList`1<string> get_DefaultAppProperties();
    [CompilerGeneratedAttribute]
public Dictionary`2<string, string> get_PropertyValueColumnMap();
    protected static ItemQuery CreateQueryObject(string language, string userEmail, IList`1<string> multilingualFieldQueries);
    protected static QueryFilterResolver GetQueryFilerResolver(List`1<EnterprisePropertyDefinition> enterpriseProperties, IList`1<string> multilingualFieldQueries);
    protected static List`1<string> BuildMultilingualJoinQuery(string language, IList`1<string> multilingualFieldQueries);
    private static string GenerateTableAlias(string suffix);
    private static string BuildJoinConditionQuery(string language, string tableAlias, string propertyName);
    private static string BuildJoinConditionQueryInTemplate(string language, string tableAlias, string propertyName);
    private static List`1<ValueTuple`2<string, string>> GenerateJoinSpecialProperties(IList`1<string> multilingualFields);
}
public class Omnia.Fx.Apps.Queries.AppInstanceUsersQueryBuilder : AppInstanceQueryBuilderBase {
    public AppInstanceUsersQueryBuilder(List`1<EnterprisePropertyDefinition> enterpriseProperties, string userEmail, string language, IList`1<string> multilingualFieldQueries);
}
public class Omnia.Fx.Apps.Security.AppInstanceResourceEvaluator : BaseResourceEvaluator {
    public AppInstanceResourceEvaluator(IScopedContextResolver scopedContextResolver);
    [AsyncStateMachineAttribute("Omnia.Fx.Apps.Security.AppInstanceResourceEvaluator/<GetRoleResourceAsync>d__1")]
public virtual ValueTask`1<string> GetRoleResourceAsync();
    protected virtual Dictionary`2<string, ServiceParamTypes> GetParamInfo();
    [AsyncStateMachineAttribute("Omnia.Fx.Apps.Security.AppInstanceResourceEvaluator/<GetRoleResourceWithContextAsync>d__3")]
protected virtual ValueTask`1<string> GetRoleResourceWithContextAsync(Dictionary`2<string, string> context);
    [AsyncStateMachineAttribute("Omnia.Fx.Apps.Security.AppInstanceResourceEvaluator/<GetConnectedAppInstanceIdAsync>d__4")]
public virtual ValueTask`1<Nullable`1<Guid>> GetConnectedAppInstanceIdAsync();
    [AsyncStateMachineAttribute("Omnia.Fx.Apps.Security.AppInstanceResourceEvaluator/<GetConnectedAppInstanceIdWithContextAsync>d__5")]
protected virtual ValueTask`1<Nullable`1<Guid>> GetConnectedAppInstanceIdWithContextAsync(Dictionary`2<string, string> context);
}
public interface Omnia.Fx.Apps.Security.IAppInstanceResourceEvaluator {
    public static string FullName;
    private static IAppInstanceResourceEvaluator();
}
public class Omnia.Fx.AsyncLazy`1 : Lazy`1<Task`1<T>> {
    public AsyncLazy`1(Func`1<Task`1<T>> taskFactory);
    public TaskAwaiter`1<T> GetAwaiter();
}
public class Omnia.Fx.AuditLogs.AuditLogPagingToken : OmniaJsonBase {
    [CompilerGeneratedAttribute]
private AuditFilter <AuditFilter>k__BackingField;
    [CompilerGeneratedAttribute]
private int <LowestAuditId>k__BackingField;
    [CompilerGeneratedAttribute]
private int <ResultLimit>k__BackingField;
    public AuditFilter AuditFilter { get; public set; }
    public int LowestAuditId { get; public set; }
    public int ResultLimit { get; public set; }
    [CompilerGeneratedAttribute]
public AuditFilter get_AuditFilter();
    [CompilerGeneratedAttribute]
public void set_AuditFilter(AuditFilter value);
    [CompilerGeneratedAttribute]
public int get_LowestAuditId();
    [CompilerGeneratedAttribute]
public void set_LowestAuditId(int value);
    [CompilerGeneratedAttribute]
public int get_ResultLimit();
    [CompilerGeneratedAttribute]
public void set_ResultLimit(int value);
}
public abstract class Omnia.Fx.AuditLogs.AuditLogServiceBaseCache : object {
    private static string CacheKey;
    protected IOmniaCacheWithKeyHelper`1<IOmniaSynchronizedMemoryCache> CacheHelper { get; }
    private static AuditLogServiceBaseCache();
    protected abstract virtual IOmniaCacheWithKeyHelper`1<IOmniaSynchronizedMemoryCache> get_CacheHelper();
    [AsyncStateMachineAttribute("Omnia.Fx.AuditLogs.AuditLogServiceBaseCache/<GetSettingsAsync>d__3")]
public sealed virtual ValueTask`1<AuditLogSettings> GetSettingsAsync();
    [AsyncStateMachineAttribute("Omnia.Fx.AuditLogs.AuditLogServiceBaseCache/<IsAuditLogEnabledAsync>d__4")]
public sealed virtual ValueTask`1<bool> IsAuditLogEnabledAsync();
    [AsyncStateMachineAttribute("Omnia.Fx.AuditLogs.AuditLogServiceBaseCache/<AddAsync>d__5")]
public sealed virtual ValueTask`1<AuditLog> AddAsync(AuditLog log);
    [AsyncStateMachineAttribute("Omnia.Fx.AuditLogs.AuditLogServiceBaseCache/<AddLogsAsync>d__6")]
public sealed virtual ValueTask`1<IList`1<AuditLog>> AddLogsAsync(IList`1<AuditLog> logs);
    protected void InvalidateCacheAsSynchronized();
    protected abstract virtual ValueTask`1<AuditLogSettings> GetSettingsInternalAsync();
    protected abstract virtual ValueTask`1<AuditLog> AddAuditLogInternalAsync(AuditLog log);
    protected abstract virtual ValueTask`1<IList`1<AuditLog>> AddAuditLogsInternalAsync(IList`1<AuditLog> logs);
    [AsyncStateMachineAttribute("Omnia.Fx.AuditLogs.AuditLogServiceBaseCache/<<GetSettingsAsync>b__3_0>d")]
[CompilerGeneratedAttribute]
private Task`1<AuditLogSettings> <GetSettingsAsync>b__3_0(IOmniaDependencyCacheEntry cacheEntry);
}
internal class Omnia.Fx.AuditLogs.AuditLogServiceOverHttp : AuditLogServiceBaseCache {
    [CompilerGeneratedAttribute]
private AuditLogServiceHttpClient <AuditLogHttpClient>k__BackingField;
    [CompilerGeneratedAttribute]
private IOmniaCacheWithKeyHelper`1<IOmniaSynchronizedMemoryCache> <CacheHelper>k__BackingField;
    private AuditLogServiceHttpClient AuditLogHttpClient { get; }
    protected IOmniaCacheWithKeyHelper`1<IOmniaSynchronizedMemoryCache> CacheHelper { get; }
    public AuditLogServiceOverHttp(IConfiguredHttpClient`1<OmniaServiceApi> omniaservice, OmniaTargetedSynchronizedMemoryCache cache);
    [CompilerGeneratedAttribute]
private AuditLogServiceHttpClient get_AuditLogHttpClient();
    [CompilerGeneratedAttribute]
protected virtual IOmniaCacheWithKeyHelper`1<IOmniaSynchronizedMemoryCache> get_CacheHelper();
    [AsyncStateMachineAttribute("Omnia.Fx.AuditLogs.AuditLogServiceOverHttp/<GetSettingsInternalAsync>d__8")]
protected virtual ValueTask`1<AuditLogSettings> GetSettingsInternalAsync();
    [AsyncStateMachineAttribute("Omnia.Fx.AuditLogs.AuditLogServiceOverHttp/<AddAuditLogInternalAsync>d__9")]
protected virtual ValueTask`1<AuditLog> AddAuditLogInternalAsync(AuditLog log);
    [AsyncStateMachineAttribute("Omnia.Fx.AuditLogs.AuditLogServiceOverHttp/<AddAuditLogsInternalAsync>d__10")]
protected virtual ValueTask`1<IList`1<AuditLog>> AddAuditLogsInternalAsync(IList`1<AuditLog> logs);
}
public class Omnia.Fx.AuditLogs.HttpContract : object {
}
[JsonConverterAttribute("Omnia.Fx.Models.Paging.GenericPageTokenJsonConverter`2<Omnia.Fx.AuditLogs.IAuditLogPageToken,Omnia.Fx.AuditLogs.AuditLogPagingToken>")]
public interface Omnia.Fx.AuditLogs.IAuditLogPageToken {
}
public interface Omnia.Fx.AuditLogs.IAuditLogService {
    public abstract virtual ValueTask`1<AuditLogSettings> GetSettingsAsync();
    public abstract virtual ValueTask`1<bool> IsAuditLogEnabledAsync();
    public abstract virtual ValueTask`1<AuditLog> AddAsync(AuditLog log);
    public abstract virtual ValueTask`1<IList`1<AuditLog>> AddLogsAsync(IList`1<AuditLog> logs);
}
internal class Omnia.Fx.AzureAd.AzureAdEnvironmentService : object {
    [CompilerGeneratedAttribute]
private AzureAdEnvironmentHttpClient <HttpClient>k__BackingField;
    private AzureAdEnvironmentHttpClient HttpClient { get; }
    public AzureAdEnvironmentService(IConfiguredHttpClient`1<OmniaServiceApi> omniaHttpClient);
    [CompilerGeneratedAttribute]
private AzureAdEnvironmentHttpClient get_HttpClient();
    [AsyncStateMachineAttribute("Omnia.Fx.AzureAd.AzureAdEnvironmentService/<GetAsync>d__5")]
public sealed virtual ValueTask`1<AzureAdEnvironment> GetAsync();
    [AsyncStateMachineAttribute("Omnia.Fx.AzureAd.AzureAdEnvironmentService/<ValidateAzureAdPermissionsSyncedAsync>d__6")]
public sealed virtual ValueTask`1<bool> ValidateAzureAdPermissionsSyncedAsync(IList`1<Guid> permissionIds);
    [AsyncStateMachineAttribute("Omnia.Fx.AzureAd.AzureAdEnvironmentService/<SyncAzureAdPermissionsAsync>d__7")]
public sealed virtual ValueTask SyncAzureAdPermissionsAsync();
}
internal class Omnia.Fx.AzureAd.AzureAdUserService : object {
    private static List`1<string> DefaultGroupSelectProperties;
    private static List`1<string> DefaultUserSelectProperties;
    private static int MaxGetMemberGroupsNumber;
    private static int MaxCheckMemberGroupsNumber;
    private static string PrivateGroupVisibility;
    private static Byte[] DefaultProfilePhoto;
    [CompilerGeneratedAttribute]
private IConfiguredHttpClient`1<Office365GraphServiceApi> <GraphService>k__BackingField;
    [CompilerGeneratedAttribute]
private ILogger`1<AzureAdUserService> <Logger>k__BackingField;
    private IConfiguredHttpClient`1<Office365GraphServiceApi> GraphService { get; }
    private ILogger`1<AzureAdUserService> Logger { get; }
    public AzureAdUserService(IConfiguredHttpClient`1<Office365GraphServiceApi> graphService, ILogger`1<AzureAdUserService> logger);
    private static AzureAdUserService();
    [CompilerGeneratedAttribute]
private IConfiguredHttpClient`1<Office365GraphServiceApi> get_GraphService();
    [CompilerGeneratedAttribute]
private ILogger`1<AzureAdUserService> get_Logger();
    public sealed virtual IList`1<string> GetUserPropertyNames();
    [AsyncStateMachineAttribute("Omnia.Fx.AzureAd.AzureAdUserService/<GetUserPropertiesAsync>d__14")]
public sealed virtual ValueTask`1<IDictionary`2<string, JToken>> GetUserPropertiesAsync(ResolvedUserIdentity resolvedUser, IEnumerable`1<string> properties);
    [AsyncStateMachineAttribute("Omnia.Fx.AzureAd.AzureAdUserService/<GetUserMailboxSettingsAsync>d__15")]
public sealed virtual ValueTask`1<MailboxSettings> GetUserMailboxSettingsAsync(ResolvedUserIdentity resolvedUser);
    [AsyncStateMachineAttribute("Omnia.Fx.AzureAd.AzureAdUserService/<SearchUsersAsync>d__16")]
public sealed virtual ValueTask`1<IList`1<AzureAdUser>> SearchUsersAsync(string searchText);
    [AsyncStateMachineAttribute("Omnia.Fx.AzureAd.AzureAdUserService/<SearchGroupsAsync>d__17")]
public sealed virtual ValueTask`1<IList`1<AzureAdGroup>> SearchGroupsAsync(string searchText);
    [AsyncStateMachineAttribute("Omnia.Fx.AzureAd.AzureAdUserService/<GetByObjectIdsAsync>d__18")]
public sealed virtual ValueTask`1<IDictionary`2<Guid, IAzureAdObject>> GetByObjectIdsAsync(Guid[] objectIds);
    [AsyncStateMachineAttribute("Omnia.Fx.AzureAd.AzureAdUserService/<GetByResolvedIdentitiesAsync>d__19")]
public sealed virtual ValueTask`1<IDictionary`2<IResolvedIdentity, IAzureAdObject>> GetByResolvedIdentitiesAsync(IResolvedIdentity[] resolvedIdentities);
    [AsyncStateMachineAttribute("Omnia.Fx.AzureAd.AzureAdUserService/<CheckUserInGroupsAsync>d__20")]
public sealed virtual ValueTask`1<IDictionary`2<Guid, bool>> CheckUserInGroupsAsync(ResolvedUserIdentity resolvedUser, IEnumerable`1<Guid> groupIds);
    [AsyncStateMachineAttribute("Omnia.Fx.AzureAd.AzureAdUserService/<GetUserMemberOfGroupIdsAsync>d__21")]
public sealed virtual ValueTask`1<IList`1<Guid>> GetUserMemberOfGroupIdsAsync(ResolvedUserIdentity resolvedUser);
    [AsyncStateMachineAttribute("Omnia.Fx.AzureAd.AzureAdUserService/<GetGroupTransitiveMembersAsync>d__22")]
public sealed virtual ValueTask`1<IList`1<IAzureAdObject>> GetGroupTransitiveMembersAsync(Guid groupId);
    [AsyncStateMachineAttribute("Omnia.Fx.AzureAd.AzureAdUserService/<GetProfilePhotoAsync>d__23")]
public sealed virtual ValueTask`1<Byte[]> GetProfilePhotoAsync(ResolvedUserIdentity resolvedUser, string size);
    [AsyncStateMachineAttribute("Omnia.Fx.AzureAd.AzureAdUserService/<CheckMemberOfGroupsInternalAsync>d__24")]
private ValueTask`1<Dictionary`2<Guid, bool>> CheckMemberOfGroupsInternalAsync(Guid userObjectId, IEnumerable`1<Guid> groupIds);
    [AsyncStateMachineAttribute("Omnia.Fx.AzureAd.AzureAdUserService/<CheckMemberOfGroupsInBatchInternalAsync>d__25")]
private ValueTask`1<IList`1<Guid>> CheckMemberOfGroupsInBatchInternalAsync(Guid userObjectId, IEnumerable`1<Guid> groupIds);
    [AsyncStateMachineAttribute("Omnia.Fx.AzureAd.AzureAdUserService/<ProcessAzureAdObjectResponseAsync>d__26")]
private ValueTask`1<List`1<IAzureAdObject>> ProcessAzureAdObjectResponseAsync(HttpResponseMessage httpResponse);
    private AzureAdUser ProcessGraphUser(GraphUser user);
    private AzureAdGroup ProcessGraphGroup(GraphGroup group);
    private bool IsValidAzureAdPropertyType(JToken jsonNode);
    private bool IsValueValidAzureAdPropertyType(JValue jsonValue);
    [CompilerGeneratedAttribute]
private AzureAdUser <SearchUsersAsync>b__16_0(GraphUser x);
    [CompilerGeneratedAttribute]
private AzureAdGroup <SearchGroupsAsync>b__17_0(GraphGroup x);
    [CompilerGeneratedAttribute]
private bool <IsValidAzureAdPropertyType>b__29_0(JToken i);
}
public class Omnia.Fx.AzureAd.HttpContract : object {
}
public interface Omnia.Fx.AzureAd.IAzureAdEnvironmentService {
    public abstract virtual ValueTask`1<AzureAdEnvironment> GetAsync();
    public abstract virtual ValueTask`1<bool> ValidateAzureAdPermissionsSyncedAsync(IList`1<Guid> permissionIds);
    public abstract virtual ValueTask SyncAzureAdPermissionsAsync();
}
public interface Omnia.Fx.AzureAd.IAzureAdUserService {
    public abstract virtual IList`1<string> GetUserPropertyNames();
    public abstract virtual ValueTask`1<IDictionary`2<string, JToken>> GetUserPropertiesAsync(ResolvedUserIdentity resolvedUser, IEnumerable`1<string> properties);
    public abstract virtual ValueTask`1<MailboxSettings> GetUserMailboxSettingsAsync(ResolvedUserIdentity resolvedUser);
    public abstract virtual ValueTask`1<IList`1<AzureAdUser>> SearchUsersAsync(string searchText);
    public abstract virtual ValueTask`1<IList`1<AzureAdGroup>> SearchGroupsAsync(string searchText);
    public abstract virtual ValueTask`1<IDictionary`2<Guid, IAzureAdObject>> GetByObjectIdsAsync(Guid[] objectIds);
    public abstract virtual ValueTask`1<IDictionary`2<IResolvedIdentity, IAzureAdObject>> GetByResolvedIdentitiesAsync(IResolvedIdentity[] resolvedIdentities);
    public abstract virtual ValueTask`1<IDictionary`2<Guid, bool>> CheckUserInGroupsAsync(ResolvedUserIdentity resolvedUser, IEnumerable`1<Guid> groupIds);
    public abstract virtual ValueTask`1<IList`1<Guid>> GetUserMemberOfGroupIdsAsync(ResolvedUserIdentity resolvedUser);
    public abstract virtual ValueTask`1<IList`1<IAzureAdObject>> GetGroupTransitiveMembersAsync(Guid groupId);
    public abstract virtual ValueTask`1<Byte[]> GetProfilePhotoAsync(ResolvedUserIdentity resolvedUser, string size);
}
internal class Omnia.Fx.AzureAd.Internal.CheckMemberGroupsQueryInput : object {
    [CompilerGeneratedAttribute]
private IList`1<Guid> <GroupIds>k__BackingField;
    public IList`1<Guid> GroupIds { get; public set; }
    [CompilerGeneratedAttribute]
public IList`1<Guid> get_GroupIds();
    [CompilerGeneratedAttribute]
public void set_GroupIds(IList`1<Guid> value);
}
internal class Omnia.Fx.AzureAd.Internal.GetMemberGroupsQueryInput : object {
    [CompilerGeneratedAttribute]
private bool <SecurityEnabledOnly>k__BackingField;
    public bool SecurityEnabledOnly { get; public set; }
    [CompilerGeneratedAttribute]
public bool get_SecurityEnabledOnly();
    [CompilerGeneratedAttribute]
public void set_SecurityEnabledOnly(bool value);
}
internal class Omnia.Fx.AzureAd.Internal.GraphGroup : object {
    [CompilerGeneratedAttribute]
private Guid <Id>k__BackingField;
    [CompilerGeneratedAttribute]
private string <DisplayName>k__BackingField;
    [CompilerGeneratedAttribute]
private List`1<string> <GroupTypes>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Mail>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Visibility>k__BackingField;
    public Guid Id { get; public set; }
    public string DisplayName { get; public set; }
    public List`1<string> GroupTypes { get; public set; }
    public string Mail { get; public set; }
    public string Visibility { get; public set; }
    [CompilerGeneratedAttribute]
public Guid get_Id();
    [CompilerGeneratedAttribute]
public void set_Id(Guid value);
    [CompilerGeneratedAttribute]
public string get_DisplayName();
    [CompilerGeneratedAttribute]
public void set_DisplayName(string value);
    [CompilerGeneratedAttribute]
public List`1<string> get_GroupTypes();
    [CompilerGeneratedAttribute]
public void set_GroupTypes(List`1<string> value);
    [CompilerGeneratedAttribute]
public string get_Mail();
    [CompilerGeneratedAttribute]
public void set_Mail(string value);
    [CompilerGeneratedAttribute]
public string get_Visibility();
    [CompilerGeneratedAttribute]
public void set_Visibility(string value);
}
internal class Omnia.Fx.AzureAd.Internal.GraphUser : object {
    [CompilerGeneratedAttribute]
private Guid <Id>k__BackingField;
    [CompilerGeneratedAttribute]
private string <DisplayName>k__BackingField;
    [CompilerGeneratedAttribute]
private string <GivenName>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Surname>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Department>k__BackingField;
    [CompilerGeneratedAttribute]
private string <UserPrincipalName>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Mail>k__BackingField;
    [CompilerGeneratedAttribute]
private string <JobTitle>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Country>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<LanguageTag> <PreferredLanguage>k__BackingField;
    [CompilerGeneratedAttribute]
private string <UserType>k__BackingField;
    public Guid Id { get; public set; }
    public string DisplayName { get; public set; }
    public string GivenName { get; public set; }
    public string Surname { get; public set; }
    public string Department { get; public set; }
    public string UserPrincipalName { get; public set; }
    public string Mail { get; public set; }
    public string JobTitle { get; public set; }
    public string Country { get; public set; }
    public Nullable`1<LanguageTag> PreferredLanguage { get; public set; }
    public string UserType { get; public set; }
    [CompilerGeneratedAttribute]
public Guid get_Id();
    [CompilerGeneratedAttribute]
public void set_Id(Guid value);
    [CompilerGeneratedAttribute]
public string get_DisplayName();
    [CompilerGeneratedAttribute]
public void set_DisplayName(string value);
    [CompilerGeneratedAttribute]
public string get_GivenName();
    [CompilerGeneratedAttribute]
public void set_GivenName(string value);
    [CompilerGeneratedAttribute]
public string get_Surname();
    [CompilerGeneratedAttribute]
public void set_Surname(string value);
    [CompilerGeneratedAttribute]
public string get_Department();
    [CompilerGeneratedAttribute]
public void set_Department(string value);
    [CompilerGeneratedAttribute]
public string get_UserPrincipalName();
    [CompilerGeneratedAttribute]
public void set_UserPrincipalName(string value);
    [CompilerGeneratedAttribute]
public string get_Mail();
    [CompilerGeneratedAttribute]
public void set_Mail(string value);
    [CompilerGeneratedAttribute]
public string get_JobTitle();
    [CompilerGeneratedAttribute]
public void set_JobTitle(string value);
    [CompilerGeneratedAttribute]
public string get_Country();
    [CompilerGeneratedAttribute]
public void set_Country(string value);
    [CompilerGeneratedAttribute]
public Nullable`1<LanguageTag> get_PreferredLanguage();
    [CompilerGeneratedAttribute]
public void set_PreferredLanguage(Nullable`1<LanguageTag> value);
    [CompilerGeneratedAttribute]
public string get_UserType();
    [CompilerGeneratedAttribute]
public void set_UserType(string value);
}
internal class Omnia.Fx.AzureAd.Internal.PhotoResult : object {
    [CompilerGeneratedAttribute]
private Byte[] <Data>k__BackingField;
    public Byte[] Data { get; }
    public PhotoResult(Byte[] data);
    [CompilerGeneratedAttribute]
public Byte[] get_Data();
}
[ExtensionAttribute]
public static class Omnia.Fx.AzureAd.ResolvedGroupIdentityExtensions : object {
    [ExtensionAttribute]
public static bool IsAzureAdGroup(ResolvedGroupIdentity identity);
    [ExtensionAttribute]
public static bool IsAzureAdSecurityGroup(ResolvedGroupIdentity identity);
    [ExtensionAttribute]
public static bool IsAzureAdDynamicGroup(ResolvedGroupIdentity identity);
    [ExtensionAttribute]
public static bool IsM365Group(ResolvedGroupIdentity identity);
    [ExtensionAttribute]
public static Guid GetAzureAdObjectId(ResolvedGroupIdentity identity);
    [ExtensionAttribute]
public static string GetAzureAdGroupMail(ResolvedGroupIdentity identity);
}
[ExtensionAttribute]
public static class Omnia.Fx.AzureAd.ResolvedUserIdentityExtensions : object {
    [ExtensionAttribute]
public static bool IsAzureAdUser(ResolvedUserIdentity identity);
    [ExtensionAttribute]
public static bool IsAzureAdExternalUser(ResolvedUserIdentity identity);
    [ExtensionAttribute]
public static Guid GetAzureAdObjectId(ResolvedUserIdentity identity);
}
internal class Omnia.Fx.BusinessProfiles.BusinessProfilesServiceOverHttp : object {
    [CompilerGeneratedAttribute]
private BusinessProfilesServiceHttpClient <BusinessProfileHttpClient>k__BackingField;
    [CompilerGeneratedAttribute]
private IConfiguredHttpClient`1<OmniaServiceApi> <OmniaHttpClient>k__BackingField;
    [CompilerGeneratedAttribute]
private IOmniaSynchronizedMemoryCache <OmniaSynchronizedMemoryCache>k__BackingField;
    private BusinessProfilesServiceHttpClient BusinessProfileHttpClient { get; }
    private IConfiguredHttpClient`1<OmniaServiceApi> OmniaHttpClient { get; }
    private IOmniaSynchronizedMemoryCache OmniaSynchronizedMemoryCache { get; }
    public BusinessProfilesServiceOverHttp(IConfiguredHttpClient`1<OmniaServiceApi> omniaHttpClient, OmniaTargetedSynchronizedMemoryCache omniaSynchronizedMemoryCache);
    [CompilerGeneratedAttribute]
private BusinessProfilesServiceHttpClient get_BusinessProfileHttpClient();
    [CompilerGeneratedAttribute]
private IConfiguredHttpClient`1<OmniaServiceApi> get_OmniaHttpClient();
    [CompilerGeneratedAttribute]
private IOmniaSynchronizedMemoryCache get_OmniaSynchronizedMemoryCache();
    [AsyncStateMachineAttribute("Omnia.Fx.BusinessProfiles.BusinessProfilesServiceOverHttp/<CreateAsync>d__15")]
public sealed virtual ValueTask`1<BusinessProfile> CreateAsync(MultilingualString name);
    [AsyncStateMachineAttribute("Omnia.Fx.BusinessProfiles.BusinessProfilesServiceOverHttp/<AddPathsAsync>d__16")]
public sealed virtual ValueTask AddPathsAsync(Guid profileId, IEnumerable`1<BusinessProfileRelativePathValue> paths, Nullable`1<Guid> appInstanceId, Guid omniaServiceId);
    [AsyncStateMachineAttribute("Omnia.Fx.BusinessProfiles.BusinessProfilesServiceOverHttp/<AddPathsAsync>d__17")]
public sealed virtual ValueTask AddPathsAsync(Guid profileId, IEnumerable`1<string> paths, Nullable`1<Guid> appInstanceId, Guid omniaServiceId);
    [AsyncStateMachineAttribute("Omnia.Fx.BusinessProfiles.BusinessProfilesServiceOverHttp/<UpdateProfilePathAsync>d__18")]
public sealed virtual ValueTask UpdateProfilePathAsync(string oldPath, string newPath);
    [AsyncStateMachineAttribute("Omnia.Fx.BusinessProfiles.BusinessProfilesServiceOverHttp/<GetAllAsync>d__19")]
public sealed virtual ValueTask`1<IList`1<BusinessProfile>> GetAllAsync();
    [AsyncStateMachineAttribute("Omnia.Fx.BusinessProfiles.BusinessProfilesServiceOverHttp/<GetByIdAsync>d__20")]
public sealed virtual ValueTask`1<BusinessProfile> GetByIdAsync(Guid profileId);
    [AsyncStateMachineAttribute("Omnia.Fx.BusinessProfiles.BusinessProfilesServiceOverHttp/<GetByPathAsync>d__21")]
public sealed virtual ValueTask`1<BusinessProfilePath> GetByPathAsync(BusinessProfileRelativePathValue pathResolver, CompareBusinessProfilePathType compareType);
    [AsyncStateMachineAttribute("Omnia.Fx.BusinessProfiles.BusinessProfilesServiceOverHttp/<GetByPathAsync>d__22")]
public sealed virtual ValueTask`1<BusinessProfilePath> GetByPathAsync(string path, CompareBusinessProfilePathType compareType);
    [AsyncStateMachineAttribute("Omnia.Fx.BusinessProfiles.BusinessProfilesServiceOverHttp/<GetPathsAsync>d__23")]
public sealed virtual ValueTask`1<IList`1<string>> GetPathsAsync(Nullable`1<Guid> profileId);
    [AsyncStateMachineAttribute("Omnia.Fx.BusinessProfiles.BusinessProfilesServiceOverHttp/<RemoveAsync>d__24")]
public sealed virtual ValueTask RemoveAsync(Guid profileId);
    [AsyncStateMachineAttribute("Omnia.Fx.BusinessProfiles.BusinessProfilesServiceOverHttp/<RemovePathsAsync>d__25")]
public sealed virtual ValueTask RemovePathsAsync(IList`1<string> paths);
    [AsyncStateMachineAttribute("Omnia.Fx.BusinessProfiles.BusinessProfilesServiceOverHttp/<RemovePathsAsync>d__26")]
public sealed virtual ValueTask RemovePathsAsync(Guid profileId);
    [AsyncStateMachineAttribute("Omnia.Fx.BusinessProfiles.BusinessProfilesServiceOverHttp/<UpdateAsync>d__27")]
public sealed virtual ValueTask`1<BusinessProfile> UpdateAsync(Guid profileId, MultilingualString name);
    public sealed virtual IOmniaPropertyBag`1<BusinessProfilePropertyBagModel> GetPropertyBag(Guid profileId);
    public sealed virtual IOmniaPropertyBag`1<BusinessProfilePropertyBagModel> GetPropertyBag(Guid profileId, string path);
    [AsyncStateMachineAttribute("Omnia.Fx.BusinessProfiles.BusinessProfilesServiceOverHttp/<GetProfilePathsByProfileIdsAsync>d__30")]
public sealed virtual ValueTask`1<IList`1<BusinessProfilePath>> GetProfilePathsByProfileIdsAsync(IList`1<Guid> profileIds);
    [AsyncStateMachineAttribute("Omnia.Fx.BusinessProfiles.BusinessProfilesServiceOverHttp/<GetAllLanguagePropertyValuesAsync>d__31")]
public sealed virtual ValueTask`1<BusinessProfileWithProperties> GetAllLanguagePropertyValuesAsync();
    [AsyncStateMachineAttribute("Omnia.Fx.BusinessProfiles.BusinessProfilesServiceOverHttp/<GetPropertiesInAllProfilePropertyBagsAsync>d__32`1")]
public sealed virtual ValueTask`1<IDictionary`2<Guid, T>> GetPropertiesInAllProfilePropertyBagsAsync(T propertyToGet);
    [AsyncStateMachineAttribute("Omnia.Fx.BusinessProfiles.BusinessProfilesServiceOverHttp/<GetDefaultBusinessProfileLanguageAsync>d__33")]
public sealed virtual ValueTask`1<Language> GetDefaultBusinessProfileLanguageAsync(Nullable`1<Guid> profileId);
    [AsyncStateMachineAttribute("Omnia.Fx.BusinessProfiles.BusinessProfilesServiceOverHttp/<GetDefaultBusinessProfileUrlAsync>d__34")]
public sealed virtual ValueTask`1<string> GetDefaultBusinessProfileUrlAsync(Nullable`1<Guid> profileId, bool includeOmniaAdminPath);
    [AsyncStateMachineAttribute("Omnia.Fx.BusinessProfiles.BusinessProfilesServiceOverHttp/<GetPropertyBagAsync>d__35")]
public sealed virtual Task`1<IOmniaPropertyBag`1<BusinessProfilePropertyBagModel>> GetPropertyBagAsync(Guid profileId, string path);
    public sealed virtual IOmniaPropertyBag`1<BusinessProfilePropertyBagModel> GetPropertyBag(BusinessProfilePath businessProfilePath);
}
public class Omnia.Fx.BusinessProfiles.Helpers.BusinessProfileResourceHelper : object {
    private static Regex Regex;
    private static BusinessProfileResourceHelper();
    public static string GenerateResource(Guid profileId);
    public static bool TryParseProfileId(string resource, Guid& profileId);
}
public class Omnia.Fx.BusinessProfiles.HttpContract : object {
}
public interface Omnia.Fx.BusinessProfiles.IBusinessProfilesService {
    public abstract virtual ValueTask`1<BusinessProfile> CreateAsync(MultilingualString name);
    public abstract virtual ValueTask`1<BusinessProfile> UpdateAsync(Guid profileId, MultilingualString name);
    public abstract virtual ValueTask`1<IList`1<BusinessProfile>> GetAllAsync();
    public abstract virtual ValueTask`1<BusinessProfile> GetByIdAsync(Guid profileId);
    public abstract virtual ValueTask RemoveAsync(Guid profileId);
    public abstract virtual ValueTask UpdateProfilePathAsync(string oldPath, string newPath);
    public abstract virtual ValueTask AddPathsAsync(Guid profileId, IEnumerable`1<BusinessProfileRelativePathValue> paths, Nullable`1<Guid> appInstanceId, Guid omniaServiceId);
    [ObsoleteAttribute("Will remove in 7.0 and use BusinessProfileRelativePathValue instead.")]
public abstract virtual ValueTask AddPathsAsync(Guid profileId, IEnumerable`1<string> paths, Nullable`1<Guid> appInstanceId, Guid omniaServiceId);
    public abstract virtual ValueTask`1<BusinessProfilePath> GetByPathAsync(BusinessProfileRelativePathValue pathValue, CompareBusinessProfilePathType compareType);
    [ObsoleteAttribute("Will remove in 7.0 and use BusinessProfileRelativePathValue instead.")]
public abstract virtual ValueTask`1<BusinessProfilePath> GetByPathAsync(string path, CompareBusinessProfilePathType compareType);
    public abstract virtual ValueTask`1<IList`1<string>> GetPathsAsync(Nullable`1<Guid> profileId);
    public abstract virtual ValueTask RemovePathsAsync(IList`1<string> paths);
    public abstract virtual ValueTask RemovePathsAsync(Guid profileId);
    public abstract virtual IOmniaPropertyBag`1<BusinessProfilePropertyBagModel> GetPropertyBag(Guid profileId);
    [ObsoleteAttribute("Use GetPropertyBagAsync(Guid profileId, string path) or GetPropertyBagAsync(BusinessProfilePath businessProfilePath) instead.")]
public abstract virtual IOmniaPropertyBag`1<BusinessProfilePropertyBagModel> GetPropertyBag(Guid profileId, string path);
    public abstract virtual IOmniaPropertyBag`1<BusinessProfilePropertyBagModel> GetPropertyBag(BusinessProfilePath businessProfilePath);
    public abstract virtual Task`1<IOmniaPropertyBag`1<BusinessProfilePropertyBagModel>> GetPropertyBagAsync(Guid profileId, string path);
    public abstract virtual ValueTask`1<IList`1<BusinessProfilePath>> GetProfilePathsByProfileIdsAsync(IList`1<Guid> profileIds);
    public abstract virtual ValueTask`1<BusinessProfileWithProperties> GetAllLanguagePropertyValuesAsync();
    public abstract virtual ValueTask`1<IDictionary`2<Guid, T>> GetPropertiesInAllProfilePropertyBagsAsync(T propertyToGet);
    public abstract virtual ValueTask`1<Language> GetDefaultBusinessProfileLanguageAsync(Nullable`1<Guid> profileId);
    public abstract virtual ValueTask`1<string> GetDefaultBusinessProfileUrlAsync(Nullable`1<Guid> profileId, bool includeOmniaAdminPath);
}
internal class Omnia.Fx.BusinessProfiles.Security.BusinessProfileResourceEvaluator : BaseResourceEvaluator {
    public BusinessProfileResourceEvaluator(IScopedContextResolver scopedContextResolver);
    [AsyncStateMachineAttribute("Omnia.Fx.BusinessProfiles.Security.BusinessProfileResourceEvaluator/<GetRoleResourceAsync>d__1")]
public virtual ValueTask`1<string> GetRoleResourceAsync();
    protected virtual Dictionary`2<string, ServiceParamTypes> GetParamInfo();
    [AsyncStateMachineAttribute("Omnia.Fx.BusinessProfiles.Security.BusinessProfileResourceEvaluator/<GetRoleResourceWithContextAsync>d__3")]
protected virtual ValueTask`1<string> GetRoleResourceWithContextAsync(Dictionary`2<string, string> context);
    [AsyncStateMachineAttribute("Omnia.Fx.BusinessProfiles.Security.BusinessProfileResourceEvaluator/<GetConnectedAppInstanceIdAsync>d__4")]
public virtual ValueTask`1<Nullable`1<Guid>> GetConnectedAppInstanceIdAsync();
    [AsyncStateMachineAttribute("Omnia.Fx.BusinessProfiles.Security.BusinessProfileResourceEvaluator/<GetConnectedAppInstanceIdWithContextAsync>d__5")]
protected virtual ValueTask`1<Nullable`1<Guid>> GetConnectedAppInstanceIdWithContextAsync(Dictionary`2<string, string> context);
}
public interface Omnia.Fx.BusinessProfiles.Security.IBusinessProfileResourceEvaluator {
    public static string FullName;
    private static IBusinessProfileResourceEvaluator();
}
internal abstract class Omnia.Fx.Caching.BaseCache : object {
    private static int LazyCacheExpiredSeconds;
    private SemaphoreSlim _locker;
    [CompilerGeneratedAttribute]
private IMemoryCache <MemoryCache>k__BackingField;
    [CompilerGeneratedAttribute]
private IOmniaLogger <Logger>k__BackingField;
    protected IMemoryCache MemoryCache { get; }
    protected IOmniaLogger Logger { get; }
    public BaseCache(IMemoryCache memoryCache, IOmniaLogger logger);
    [CompilerGeneratedAttribute]
protected IMemoryCache get_MemoryCache();
    [CompilerGeneratedAttribute]
protected IOmniaLogger get_Logger();
    public virtual T GetOrSet(string key, Func`2<IOmniaCacheEntry, T> setItemFactory);
    [AsyncStateMachineAttribute("Omnia.Fx.Caching.BaseCache/<GetOrSetAsync>d__10`1")]
public virtual ValueTask`1<T> GetOrSetAsync(string key, Func`2<IOmniaCacheEntry, Task`1<T>> setItemFactory);
    public virtual T GetAndRefreshIfNeeded(string key, TimeSpan absoluteRefreshTimeRelativeToNow, Func`2<IOmniaCacheEntry, T> setItemFactory);
    [AsyncStateMachineAttribute("Omnia.Fx.Caching.BaseCache/<GetAndRefreshIfNeededAsync>d__12`1")]
public virtual ValueTask`1<T> GetAndRefreshIfNeededAsync(string key, TimeSpan absoluteRefreshTimeRelativeToNow, Func`2<IOmniaCacheEntry, Task`1<T>> setItemFactory);
    public abstract virtual T Get(string key);
    public abstract virtual IRefreshableCacheObject`1<T> GetAsRefreshableCache(string key);
    public abstract virtual void Set(string key, T value, Nullable`1<TimeSpan> absoluteExpirationRelativeToNow);
    public abstract virtual void Set(string key, T value, Nullable`1<DateTimeOffset> absoluteExpiration);
    public abstract virtual void Set(TimeSpan slidingExpiration, string key, T value);
    public abstract virtual void Remove(string key);
    protected abstract virtual string GetLazyCacheKey(string key);
    protected abstract virtual ValueTask`1<ValueTuple`2<bool, T>> TryGetValueAsync(string key);
    protected virtual ValueTuple`2<bool, T> TryGetValue(string key);
    protected virtual ValueTuple`2<bool, IRefreshableCacheObject`1<T>> TryGetRefreshableCacheValue(string key);
    protected virtual T SetInternal(string key, Func`2<IOmniaCacheEntry, T> setItemFactory);
    protected virtual void HandleErrorInRefresh(Exception ex, string key);
    [AsyncStateMachineAttribute("Omnia.Fx.Caching.BaseCache/<SetInternalAsync>d__25`1")]
public virtual ValueTask`1<T> SetInternalAsync(string key, Func`2<IOmniaCacheEntry, Task`1<T>> setItemFactory);
    protected virtual T SetInternal(string key, Func`1<object> cacheItemFactory);
    [AsyncStateMachineAttribute("Omnia.Fx.Caching.BaseCache/<SetInternalAsync>d__27`1")]
protected virtual ValueTask`1<T> SetInternalAsync(string key, Func`1<object> cacheItemFactory);
    protected virtual T GetOrCreateLazyCache(string key, Func`1<T> factory);
    protected virtual void RemoveLazyCache(string key);
    [AsyncStateMachineAttribute("Omnia.Fx.Caching.BaseCache/<GetLazyCacheResultAsync>d__30`1")]
protected virtual Task`1<LazyCacheResult`1<T>> GetLazyCacheResultAsync(string key, Func`2<IOmniaCacheEntry, Task`1<T>> setItemFactory);
    protected virtual LazyCacheResult`1<T> GetLazyCacheResult(T cacheValue, IOmniaCacheEntry cacheEntry);
    protected virtual TItem StoreLazyCacheValue(TItem cacheValue, IOmniaCacheEntry cacheEntry);
    protected virtual void ValidateKeyAndThrow(string key);
    protected virtual bool ValidateKey(string key);
    protected virtual T GetValueFromLazy(object item);
    protected virtual Task`1<T> GetValueFromAsyncLazy(object item);
}
[ExtensionAttribute]
public static class Omnia.Fx.Caching.CachingExtensions : object {
    [ExtensionAttribute]
public static IOmniaCache WithCompression(IOmniaCache cache);
    [ExtensionAttribute]
public static IOmniaCache WithCompression(IOmniaMemoryCache cache);
    [ExtensionAttribute]
public static IOmniaCompressedMemoryDependencyCache WithCompression(IOmniaMemoryDependencyCache cache);
    [ExtensionAttribute]
public static IOmniaCompressedSynchronizedMemoryCache WithCompression(IOmniaSynchronizedMemoryCache cache);
    [ExtensionAttribute]
public static T GetOriginalValue(ICacheDependencyResult`1<Byte[]> cacheResult);
    public static IOmniaCache GetOmniaCachWithExtension(IOmniaCache cache);
}
public interface Omnia.Fx.Caching.Compression.IOmniaCompressedMemoryDependencyCache {
    public abstract virtual ICacheDependency GetKeyDependency(string key);
    public abstract virtual ICacheDependencyResult`1<Byte[]> GetCacheResult(string key);
    public abstract virtual ICacheDependencyResult`1<Byte[]> Set(string key, T value);
    public abstract virtual ICacheDependencyResult`1<Byte[]> Set(string key, T value, ICacheDependency[] dependencies);
    public abstract virtual ICacheDependencyResult`1<Byte[]> Set(string key, T value, TimeSpan absoluteExpirationRelativeToNow, ICacheDependency[] dependencies);
    public abstract virtual ICacheDependencyResult`1<Byte[]> SetWithState(string key, T value, TimeSpan absoluteExpirationRelativeToNow, ICacheDependency[] dependencies, object setState);
    public abstract virtual ICacheDependencyResult`1<Byte[]> Set(string key, T value, DateTimeOffset absoluteExpiration, ICacheDependency[] dependencies);
    public abstract virtual ICacheDependencyResult`1<Byte[]> SetWithState(string key, T value, DateTimeOffset absoluteExpiration, ICacheDependency[] dependencies, object setState);
    public abstract virtual ICacheDependencyResult`1<Byte[]> Set(TimeSpan slidingExpiration, string key, T value, ICacheDependency[] dependencies);
    public abstract virtual ICacheDependencyResult`1<Byte[]> SetWithState(TimeSpan slidingExpiration, string key, T value, ICacheDependency[] dependencies, object setState);
    public abstract virtual ICacheDependencyResult`1<Byte[]> GetOrSetDependencyCache(string key, Func`2<IOmniaDependencyCacheEntry, T> setItemFactory);
    public abstract virtual Task`1<ICacheDependencyResult`1<Byte[]>> GetOrSetDependencyCacheAsync(string key, Func`2<IOmniaDependencyCacheEntry, Task`1<T>> setItemFactory);
    public abstract virtual ICacheDependencyResult`1<IRefreshableCacheObject`1<Byte[]>> GetDependencyCacheAndRefreshIfNeeded(string key, TimeSpan absoluteRefreshTimeRelativeToNow, Func`2<IOmniaDependencyCacheEntry, T> setItemFactory);
    public abstract virtual Task`1<ICacheDependencyResult`1<IRefreshableCacheObject`1<Byte[]>>> GetDependencyCacheAndRefreshIfNeededAsync(string key, TimeSpan absoluteRefreshTimeRelativeToNow, Func`2<IOmniaDependencyCacheEntry, Task`1<T>> setItemFactory);
}
public interface Omnia.Fx.Caching.Compression.IOmniaCompressedSynchronizedMemoryCache {
    public abstract virtual ICacheDependencyResult`1<Byte[]> SetAsSynchronized(string key, T value);
    public abstract virtual ICacheDependencyResult`1<Byte[]> SetAsSynchronized(string key, T value, ICacheDependency[] dependencies);
    public abstract virtual ICacheDependencyResult`1<Byte[]> SetAsSynchronized(string key, T value, TimeSpan absoluteExpirationRelativeToNow, ICacheDependency[] dependencies);
    public abstract virtual ICacheDependencyResult`1<Byte[]> SetAsSynchronizedWithState(string key, T value, TimeSpan absoluteExpirationRelativeToNow, ICacheDependency[] dependencies, object setState);
    public abstract virtual ICacheDependencyResult`1<Byte[]> SetAsSynchronized(string key, T value, DateTimeOffset absoluteExpiration, ICacheDependency[] dependencies);
    public abstract virtual ICacheDependencyResult`1<Byte[]> SetAsSynchronizedWithState(string key, T value, DateTimeOffset absoluteExpiration, ICacheDependency[] dependencies, object setState);
    public abstract virtual ICacheDependencyResult`1<Byte[]> SetAsSynchronized(TimeSpan slidingExpiration, string key, T value, ICacheDependency[] dependencies);
    public abstract virtual ICacheDependencyResult`1<Byte[]> SetAsSynchronizedWithState(TimeSpan slidingExpiration, string key, T value, ICacheDependency[] dependencies, object setState);
    public abstract virtual ICacheDependencyResult`1<Byte[]> GetOrSetAsSynchronized(string key, Func`2<IOmniaDependencyCacheEntry, T> setItemFactory);
    public abstract virtual Task`1<ICacheDependencyResult`1<Byte[]>> GetOrSetAsSynchronizedAsync(string key, Func`2<IOmniaDependencyCacheEntry, Task`1<T>> setItemFactory);
    public abstract virtual ICacheDependencyResult`1<IRefreshableCacheObject`1<Byte[]>> GetSynchronizedCacheAndRefreshIfNeeded(string key, TimeSpan absoluteRefreshTimeRelativeToNow, Func`2<IOmniaDependencyCacheEntry, T> setItemFactory);
    public abstract virtual Task`1<ICacheDependencyResult`1<IRefreshableCacheObject`1<Byte[]>>> GetSynchronizedCacheAndRefreshIfNeededAsync(string key, TimeSpan absoluteRefreshTimeRelativeToNow, Func`2<IOmniaDependencyCacheEntry, Task`1<T>> setItemFactory);
}
internal class Omnia.Fx.Caching.Compression.OmniaCompressedMemoryCache : object {
    private IOmniaCache _cacheService;
    public OmniaCompressedMemoryCache(IOmniaCache cacheService);
    public sealed virtual T Get(string key);
    public sealed virtual T GetAndRefreshIfNeeded(string key, TimeSpan absoluteRefreshTimeRelativeToNow, Func`2<IOmniaCacheEntry, T> setItemFactory);
    [AsyncStateMachineAttribute("Omnia.Fx.Caching.Compression.OmniaCompressedMemoryCache/<GetAndRefreshIfNeededAsync>d__4`1")]
public sealed virtual ValueTask`1<T> GetAndRefreshIfNeededAsync(string key, TimeSpan absoluteRefreshTimeRelativeToNow, Func`2<IOmniaCacheEntry, Task`1<T>> setItemFactory);
    public sealed virtual IRefreshableCacheObject`1<T> GetAsRefreshableCache(string key);
    public sealed virtual T GetOrSet(string key, Func`2<IOmniaCacheEntry, T> setItemFactory);
    [AsyncStateMachineAttribute("Omnia.Fx.Caching.Compression.OmniaCompressedMemoryCache/<GetOrSetAsync>d__7`1")]
public sealed virtual ValueTask`1<T> GetOrSetAsync(string key, Func`2<IOmniaCacheEntry, Task`1<T>> setItemFactory);
    public sealed virtual void Set(string key, T value, Nullable`1<TimeSpan> absoluteExpirationRelativeToNow);
    public sealed virtual void Set(string key, T value, Nullable`1<DateTimeOffset> absoluteExpiration);
    public sealed virtual void Set(TimeSpan slidingExpiration, string key, T value);
    public sealed virtual void Remove(string key);
}
internal class Omnia.Fx.Caching.Compression.OmniaCompressedMemoryDependencyCache : OmniaCompressedMemoryCache {
    private IOmniaMemoryDependencyCache _cacheService;
    public OmniaCompressedMemoryDependencyCache(IOmniaMemoryDependencyCache cacheService);
    public sealed virtual ICacheDependencyResult`1<Byte[]> GetCacheResult(string key);
    public sealed virtual ICacheDependencyResult`1<IRefreshableCacheObject`1<Byte[]>> GetDependencyCacheAndRefreshIfNeeded(string key, TimeSpan absoluteRefreshTimeRelativeToNow, Func`2<IOmniaDependencyCacheEntry, T> setItemFactory);
    [AsyncStateMachineAttribute("Omnia.Fx.Caching.Compression.OmniaCompressedMemoryDependencyCache/<GetDependencyCacheAndRefreshIfNeededAsync>d__4`1")]
public sealed virtual Task`1<ICacheDependencyResult`1<IRefreshableCacheObject`1<Byte[]>>> GetDependencyCacheAndRefreshIfNeededAsync(string key, TimeSpan absoluteRefreshTimeRelativeToNow, Func`2<IOmniaDependencyCacheEntry, Task`1<T>> setItemFactory);
    public sealed virtual ICacheDependency GetKeyDependency(string key);
    public sealed virtual ICacheDependencyResult`1<Byte[]> GetOrSetDependencyCache(string key, Func`2<IOmniaDependencyCacheEntry, T> setItemFactory);
    [AsyncStateMachineAttribute("Omnia.Fx.Caching.Compression.OmniaCompressedMemoryDependencyCache/<GetOrSetDependencyCacheAsync>d__7`1")]
public sealed virtual Task`1<ICacheDependencyResult`1<Byte[]>> GetOrSetDependencyCacheAsync(string key, Func`2<IOmniaDependencyCacheEntry, Task`1<T>> setItemFactory);
    public sealed virtual ICacheDependencyResult`1<Byte[]> Set(string key, T value);
    public sealed virtual ICacheDependencyResult`1<Byte[]> Set(string key, T value, ICacheDependency[] dependencies);
    public sealed virtual ICacheDependencyResult`1<Byte[]> Set(string key, T value, TimeSpan absoluteExpirationRelativeToNow, ICacheDependency[] dependencies);
    public sealed virtual ICacheDependencyResult`1<Byte[]> Set(TimeSpan slidingExpiration, string key, T value, ICacheDependency[] dependencies);
    public sealed virtual ICacheDependencyResult`1<Byte[]> Set(string key, T value, DateTimeOffset absoluteExpiration, ICacheDependency[] dependencies);
    public sealed virtual ICacheDependencyResult`1<Byte[]> SetWithState(string key, T value, TimeSpan absoluteExpirationRelativeToNow, ICacheDependency[] dependencies, object setState);
    public sealed virtual ICacheDependencyResult`1<Byte[]> SetWithState(TimeSpan slidingExpiration, string key, T value, ICacheDependency[] dependencies, object setState);
    public sealed virtual ICacheDependencyResult`1<Byte[]> SetWithState(string key, T value, DateTimeOffset absoluteExpiration, ICacheDependency[] dependencies, object setState);
}
internal class Omnia.Fx.Caching.Compression.OmniaCompressedSynchronizedMemoryCache : OmniaCompressedMemoryDependencyCache {
    private IOmniaSynchronizedMemoryCache _cacheService;
    public OmniaCompressedSynchronizedMemoryCache(IOmniaSynchronizedMemoryCache cacheService);
    public sealed virtual ICacheDependencyResult`1<Byte[]> GetOrSetAsSynchronized(string key, Func`2<IOmniaDependencyCacheEntry, T> setItemFactory);
    [AsyncStateMachineAttribute("Omnia.Fx.Caching.Compression.OmniaCompressedSynchronizedMemoryCache/<GetOrSetAsSynchronizedAsync>d__3`1")]
public sealed virtual Task`1<ICacheDependencyResult`1<Byte[]>> GetOrSetAsSynchronizedAsync(string key, Func`2<IOmniaDependencyCacheEntry, Task`1<T>> setItemFactory);
    public sealed virtual ICacheDependencyResult`1<IRefreshableCacheObject`1<Byte[]>> GetSynchronizedCacheAndRefreshIfNeeded(string key, TimeSpan absoluteRefreshTimeRelativeToNow, Func`2<IOmniaDependencyCacheEntry, T> setItemFactory);
    [AsyncStateMachineAttribute("Omnia.Fx.Caching.Compression.OmniaCompressedSynchronizedMemoryCache/<GetSynchronizedCacheAndRefreshIfNeededAsync>d__5`1")]
public sealed virtual Task`1<ICacheDependencyResult`1<IRefreshableCacheObject`1<Byte[]>>> GetSynchronizedCacheAndRefreshIfNeededAsync(string key, TimeSpan absoluteRefreshTimeRelativeToNow, Func`2<IOmniaDependencyCacheEntry, Task`1<T>> setItemFactory);
    public sealed virtual ICacheDependencyResult`1<Byte[]> SetAsSynchronized(string key, T value);
    public sealed virtual ICacheDependencyResult`1<Byte[]> SetAsSynchronized(string key, T value, ICacheDependency[] dependencies);
    public sealed virtual ICacheDependencyResult`1<Byte[]> SetAsSynchronized(string key, T value, TimeSpan absoluteExpirationRelativeToNow, ICacheDependency[] dependencies);
    public sealed virtual ICacheDependencyResult`1<Byte[]> SetAsSynchronized(TimeSpan slidingExpiration, string key, T value, ICacheDependency[] dependencies);
    public sealed virtual ICacheDependencyResult`1<Byte[]> SetAsSynchronized(string key, T value, DateTimeOffset absoluteExpiration, ICacheDependency[] dependencies);
    public sealed virtual ICacheDependencyResult`1<Byte[]> SetAsSynchronizedWithState(string key, T value, TimeSpan absoluteExpirationRelativeToNow, ICacheDependency[] dependencies, object setState);
    public sealed virtual ICacheDependencyResult`1<Byte[]> SetAsSynchronizedWithState(TimeSpan slidingExpiration, string key, T value, ICacheDependency[] dependencies, object setState);
    public sealed virtual ICacheDependencyResult`1<Byte[]> SetAsSynchronizedWithState(string key, T value, DateTimeOffset absoluteExpiration, ICacheDependency[] dependencies, object setState);
}
public abstract class Omnia.Fx.Caching.ExtensionTargetedOmniaSynchronizedMemoryCache : object {
    [CompilerGeneratedAttribute]
private IOmniaSynchronizedMemoryCache <Instance>k__BackingField;
    public IOmniaSynchronizedMemoryCache Instance { get; internal set; }
    [CompilerGeneratedAttribute]
public IOmniaSynchronizedMemoryCache get_Instance();
    [CompilerGeneratedAttribute]
internal void set_Instance(IOmniaSynchronizedMemoryCache value);
    public sealed virtual ICacheDependencyResult`1<T> SetAsSynchronized(string key, T value);
    public sealed virtual ICacheDependencyResult`1<T> SetAsSynchronized(string key, T value, ICacheDependency[] dependencies);
    public sealed virtual ICacheDependencyResult`1<T> SetAsSynchronized(string key, T value, TimeSpan absoluteExpirationRelativeToNow, ICacheDependency[] dependencies);
    public sealed virtual ICacheDependencyResult`1<T> SetAsSynchronizedWithState(string key, T value, TimeSpan absoluteExpirationRelativeToNow, ICacheDependency[] dependencies, object setState);
    public sealed virtual ICacheDependencyResult`1<T> SetAsSynchronized(string key, T value, DateTimeOffset absoluteExpiration, ICacheDependency[] dependencies);
    public sealed virtual ICacheDependencyResult`1<T> SetAsSynchronizedWithState(string key, T value, DateTimeOffset absoluteExpiration, ICacheDependency[] dependencies, object setState);
    public sealed virtual ICacheDependencyResult`1<T> SetAsSynchronized(TimeSpan slidingExpiration, string key, T value, ICacheDependency[] dependencies);
    public sealed virtual ICacheDependencyResult`1<T> SetAsSynchronizedWithState(TimeSpan slidingExpiration, string key, T value, ICacheDependency[] dependencies, object setState);
    public sealed virtual ICacheDependencyResult`1<T> GetOrSetAsSynchronized(string key, Func`2<IOmniaDependencyCacheEntry, T> setItemFactory);
    public sealed virtual Task`1<ICacheDependencyResult`1<T>> GetOrSetAsSynchronizedAsync(string key, Func`2<IOmniaDependencyCacheEntry, Task`1<T>> setItemFactory);
    public sealed virtual ICacheDependencyResult`1<IRefreshableCacheObject`1<T>> GetSynchronizedCacheAndRefreshIfNeeded(string key, TimeSpan absoluteRefreshTimeRelativeToNow, Func`2<IOmniaDependencyCacheEntry, T> setItemFactory);
    public sealed virtual Task`1<ICacheDependencyResult`1<IRefreshableCacheObject`1<T>>> GetSynchronizedCacheAndRefreshIfNeededAsync(string key, TimeSpan absoluteRefreshTimeRelativeToNow, Func`2<IOmniaDependencyCacheEntry, Task`1<T>> setItemFactory);
    public sealed virtual ICacheDependency GetKeyDependency(string key);
    public sealed virtual ICacheDependencyResult`1<T> GetCacheResult(string key);
    public sealed virtual ICacheDependencyResult`1<T> Set(string key, T value);
    public sealed virtual ICacheDependencyResult`1<T> Set(string key, T value, ICacheDependency[] dependencies);
    public sealed virtual ICacheDependencyResult`1<T> Set(string key, T value, TimeSpan absoluteExpirationRelativeToNow, ICacheDependency[] dependencies);
    public sealed virtual ICacheDependencyResult`1<T> SetWithState(string key, T value, TimeSpan absoluteExpirationRelativeToNow, ICacheDependency[] dependencies, object setState);
    public sealed virtual ICacheDependencyResult`1<T> Set(string key, T value, DateTimeOffset absoluteExpiration, ICacheDependency[] dependencies);
    public sealed virtual ICacheDependencyResult`1<T> SetWithState(string key, T value, DateTimeOffset absoluteExpiration, ICacheDependency[] dependencies, object setState);
    public sealed virtual ICacheDependencyResult`1<T> Set(TimeSpan slidingExpiration, string key, T value, ICacheDependency[] dependencies);
    public sealed virtual ICacheDependencyResult`1<T> SetWithState(TimeSpan slidingExpiration, string key, T value, ICacheDependency[] dependencies, object setState);
    public sealed virtual ICacheDependencyResult`1<T> GetOrSetDependencyCache(string key, Func`2<IOmniaDependencyCacheEntry, T> setItemFactory);
    public sealed virtual Task`1<ICacheDependencyResult`1<T>> GetOrSetDependencyCacheAsync(string key, Func`2<IOmniaDependencyCacheEntry, Task`1<T>> setItemFactory);
    public sealed virtual ICacheDependencyResult`1<IRefreshableCacheObject`1<T>> GetDependencyCacheAndRefreshIfNeeded(string key, TimeSpan absoluteRefreshTimeRelativeToNow, Func`2<IOmniaDependencyCacheEntry, T> setItemFactory);
    public sealed virtual Task`1<ICacheDependencyResult`1<IRefreshableCacheObject`1<T>>> GetDependencyCacheAndRefreshIfNeededAsync(string key, TimeSpan absoluteRefreshTimeRelativeToNow, Func`2<IOmniaDependencyCacheEntry, Task`1<T>> setItemFactory);
    public sealed virtual T Get(string key);
    public sealed virtual IRefreshableCacheObject`1<T> GetAsRefreshableCache(string key);
    public sealed virtual void Set(string key, T value, Nullable`1<TimeSpan> absoluteExpirationRelativeToNow);
    public sealed virtual void Set(string key, T value, Nullable`1<DateTimeOffset> absoluteExpiration);
    public sealed virtual void Set(TimeSpan slidingExpiration, string key, T value);
    public sealed virtual T GetOrSet(string key, Func`2<IOmniaCacheEntry, T> setItemFactory);
    public sealed virtual T GetAndRefreshIfNeeded(string key, TimeSpan absoluteRefreshTimeRelativeToNow, Func`2<IOmniaCacheEntry, T> setItemFactory);
    public sealed virtual ValueTask`1<T> GetOrSetAsync(string key, Func`2<IOmniaCacheEntry, Task`1<T>> setItemFactory);
    public sealed virtual ValueTask`1<T> GetAndRefreshIfNeededAsync(string key, TimeSpan absoluteRefreshTimeRelativeToNow, Func`2<IOmniaCacheEntry, Task`1<T>> setItemFactory);
    public sealed virtual void Remove(string key);
    public sealed virtual Action RegisterOnRemovedHandler(Action`1<string> onCacheRemoved);
}
public interface Omnia.Fx.Caching.ICacheDependency {
    public abstract virtual IDisposable RegisterChangeCallback(Action`1<object> callback, object registrationState);
    public abstract virtual void RegisterOmniaCacheChangeCallback(OmniaCacheCallBack callback, object registrationState);
}
public interface Omnia.Fx.Caching.ICacheDependencyResult`1 {
    public T Value { get; }
    public bool IsCached { get; }
    public DateTimeOffset CacheTime { get; }
    public abstract virtual T get_Value();
    public abstract virtual bool get_IsCached();
    public abstract virtual DateTimeOffset get_CacheTime();
}
public interface Omnia.Fx.Caching.IOmniaCache {
    public abstract virtual T Get(string key);
    public abstract virtual IRefreshableCacheObject`1<T> GetAsRefreshableCache(string key);
    public abstract virtual void Set(string key, T value, Nullable`1<TimeSpan> absoluteExpirationRelativeToNow);
    public abstract virtual void Set(string key, T value, Nullable`1<DateTimeOffset> absoluteExpiration);
    public abstract virtual void Set(TimeSpan slidingExpiration, string key, T value);
    public abstract virtual T GetOrSet(string key, Func`2<IOmniaCacheEntry, T> setItemFactory);
    public abstract virtual T GetAndRefreshIfNeeded(string key, TimeSpan absoluteRefreshTimeRelativeToNow, Func`2<IOmniaCacheEntry, T> setItemFactory);
    public abstract virtual ValueTask`1<T> GetOrSetAsync(string key, Func`2<IOmniaCacheEntry, Task`1<T>> setItemFactory);
    public abstract virtual ValueTask`1<T> GetAndRefreshIfNeededAsync(string key, TimeSpan absoluteRefreshTimeRelativeToNow, Func`2<IOmniaCacheEntry, Task`1<T>> setItemFactory);
    public abstract virtual void Remove(string key);
}
public interface Omnia.Fx.Caching.IOmniaCacheEntry {
    public string Key { get; }
    public Nullable`1<TimeSpan> AbsoluteExpirationRelativeToNow { get; public set; }
    public Nullable`1<DateTimeOffset> AbsoluteExpiration { get; public set; }
    public Nullable`1<TimeSpan> SlidingExpiration { get; public set; }
    public bool Ignore { get; public set; }
    public abstract virtual string get_Key();
    public abstract virtual Nullable`1<TimeSpan> get_AbsoluteExpirationRelativeToNow();
    public abstract virtual void set_AbsoluteExpirationRelativeToNow(Nullable`1<TimeSpan> value);
    public abstract virtual Nullable`1<DateTimeOffset> get_AbsoluteExpiration();
    public abstract virtual void set_AbsoluteExpiration(Nullable`1<DateTimeOffset> value);
    public abstract virtual Nullable`1<TimeSpan> get_SlidingExpiration();
    public abstract virtual void set_SlidingExpiration(Nullable`1<TimeSpan> value);
    public abstract virtual bool get_Ignore();
    public abstract virtual void set_Ignore(bool value);
}
[ExtensionAttribute]
public static class Omnia.Fx.Caching.IOmniaCacheExtensions : object {
    [ExtensionAttribute]
public static IOmniaCacheWithKeyHelper`1<T> AddKeyHelper(T cache, string prefix, char delimiter);
    [ExtensionAttribute]
public static IOmniaCacheWithKeyHelper`1<T> AddKeyHelper(T cache, PrefixWithType prefix, char delimiter);
}
public interface Omnia.Fx.Caching.IOmniaCacheWithKeyHelper`1 {
    public CacheType Instance { get; }
    public abstract virtual CacheType get_Instance();
    public abstract virtual string CreateKey(String[] keyParts);
}
public interface Omnia.Fx.Caching.IOmniaDependencyCacheEntry {
    public List`1<ICacheDependency> Dependencies { get; public set; }
    public object SetState { get; public set; }
    public abstract virtual List`1<ICacheDependency> get_Dependencies();
    public abstract virtual void set_Dependencies(List`1<ICacheDependency> value);
    public abstract virtual object get_SetState();
    public abstract virtual void set_SetState(object value);
}
public interface Omnia.Fx.Caching.IOmniaDistributedCache {
    public abstract virtual ValueTask`1<T> GetAsync(string key);
    public abstract virtual ValueTask SetAsync(string key, T value, Nullable`1<TimeSpan> absoluteExpirationRelativeToNow);
    public abstract virtual ValueTask SetAsync(string key, T value, Nullable`1<DateTimeOffset> absoluteExpiration);
    public abstract virtual ValueTask SetAsync(TimeSpan slidingExpiration, string key, T value);
    public abstract virtual ValueTask RemoveAsync(string key);
}
public interface Omnia.Fx.Caching.IOmniaMemoryCache {
    public abstract virtual Action RegisterOnRemovedHandler(Action`1<string> onCacheRemoved);
}
public interface Omnia.Fx.Caching.IOmniaMemoryDependencyCache {
    public abstract virtual ICacheDependency GetKeyDependency(string key);
    public abstract virtual ICacheDependencyResult`1<T> GetCacheResult(string key);
    public abstract virtual ICacheDependencyResult`1<T> Set(string key, T value);
    public abstract virtual ICacheDependencyResult`1<T> Set(string key, T value, ICacheDependency[] dependencies);
    public abstract virtual ICacheDependencyResult`1<T> Set(string key, T value, TimeSpan absoluteExpirationRelativeToNow, ICacheDependency[] dependencies);
    public abstract virtual ICacheDependencyResult`1<T> SetWithState(string key, T value, TimeSpan absoluteExpirationRelativeToNow, ICacheDependency[] dependencies, object setState);
    public abstract virtual ICacheDependencyResult`1<T> Set(string key, T value, DateTimeOffset absoluteExpiration, ICacheDependency[] dependencies);
    public abstract virtual ICacheDependencyResult`1<T> SetWithState(string key, T value, DateTimeOffset absoluteExpiration, ICacheDependency[] dependencies, object setState);
    public abstract virtual ICacheDependencyResult`1<T> Set(TimeSpan slidingExpiration, string key, T value, ICacheDependency[] dependencies);
    public abstract virtual ICacheDependencyResult`1<T> SetWithState(TimeSpan slidingExpiration, string key, T value, ICacheDependency[] dependencies, object setState);
    public abstract virtual ICacheDependencyResult`1<T> GetOrSetDependencyCache(string key, Func`2<IOmniaDependencyCacheEntry, T> setItemFactory);
    public abstract virtual Task`1<ICacheDependencyResult`1<T>> GetOrSetDependencyCacheAsync(string key, Func`2<IOmniaDependencyCacheEntry, Task`1<T>> setItemFactory);
    public abstract virtual ICacheDependencyResult`1<IRefreshableCacheObject`1<T>> GetDependencyCacheAndRefreshIfNeeded(string key, TimeSpan absoluteRefreshTimeRelativeToNow, Func`2<IOmniaDependencyCacheEntry, T> setItemFactory);
    public abstract virtual Task`1<ICacheDependencyResult`1<IRefreshableCacheObject`1<T>>> GetDependencyCacheAndRefreshIfNeededAsync(string key, TimeSpan absoluteRefreshTimeRelativeToNow, Func`2<IOmniaDependencyCacheEntry, Task`1<T>> setItemFactory);
}
internal interface Omnia.Fx.Caching.IOmniaSynchronizedCacheProvider {
    public abstract virtual OmniaSynchronizedMemoryCache GetForExtension(OmniaExtension omniaExtension);
    public abstract virtual bool AllowUntypedAccess(OmniaExtension omniaExtension);
    public abstract virtual void BlockUntypedAccess(OmniaExtension omniaExtension);
    public abstract virtual string GetRegistrationStackTrace(OmniaExtension omniaExtension);
}
public interface Omnia.Fx.Caching.IOmniaSynchronizedMemoryCache {
    public abstract virtual ICacheDependencyResult`1<T> SetAsSynchronized(string key, T value);
    public abstract virtual ICacheDependencyResult`1<T> SetAsSynchronized(string key, T value, ICacheDependency[] dependencies);
    public abstract virtual ICacheDependencyResult`1<T> SetAsSynchronized(string key, T value, TimeSpan absoluteExpirationRelativeToNow, ICacheDependency[] dependencies);
    public abstract virtual ICacheDependencyResult`1<T> SetAsSynchronizedWithState(string key, T value, TimeSpan absoluteExpirationRelativeToNow, ICacheDependency[] dependencies, object setState);
    public abstract virtual ICacheDependencyResult`1<T> SetAsSynchronized(string key, T value, DateTimeOffset absoluteExpiration, ICacheDependency[] dependencies);
    public abstract virtual ICacheDependencyResult`1<T> SetAsSynchronizedWithState(string key, T value, DateTimeOffset absoluteExpiration, ICacheDependency[] dependencies, object setState);
    public abstract virtual ICacheDependencyResult`1<T> SetAsSynchronized(TimeSpan slidingExpiration, string key, T value, ICacheDependency[] dependencies);
    public abstract virtual ICacheDependencyResult`1<T> SetAsSynchronizedWithState(TimeSpan slidingExpiration, string key, T value, ICacheDependency[] dependencies, object setState);
    public abstract virtual ICacheDependencyResult`1<T> GetOrSetAsSynchronized(string key, Func`2<IOmniaDependencyCacheEntry, T> setItemFactory);
    public abstract virtual Task`1<ICacheDependencyResult`1<T>> GetOrSetAsSynchronizedAsync(string key, Func`2<IOmniaDependencyCacheEntry, Task`1<T>> setItemFactory);
    public abstract virtual ICacheDependencyResult`1<IRefreshableCacheObject`1<T>> GetSynchronizedCacheAndRefreshIfNeeded(string key, TimeSpan absoluteRefreshTimeRelativeToNow, Func`2<IOmniaDependencyCacheEntry, T> setItemFactory);
    public abstract virtual Task`1<ICacheDependencyResult`1<IRefreshableCacheObject`1<T>>> GetSynchronizedCacheAndRefreshIfNeededAsync(string key, TimeSpan absoluteRefreshTimeRelativeToNow, Func`2<IOmniaDependencyCacheEntry, Task`1<T>> setItemFactory);
}
public interface Omnia.Fx.Caching.IRefreshableCacheObject {
    public object RawValue { get; }
    public Nullable`1<long> Expires { get; }
    public abstract virtual object get_RawValue();
    public abstract virtual Nullable`1<long> get_Expires();
}
public interface Omnia.Fx.Caching.IRefreshableCacheObject`1 {
    public T Value { get; }
    public abstract virtual T get_Value();
}
internal interface Omnia.Fx.Caching.IRegisterSynchorizedCacheInstance {
    public IOmniaSynchronizedMemoryCache RegisteredInstance { get; }
    public abstract virtual IOmniaSynchronizedMemoryCache get_RegisteredInstance();
}
internal class Omnia.Fx.Caching.LazyCacheResult`1 : object {
    [CompilerGeneratedAttribute]
private Lazy`1<TCacheResult> <CacheItem>k__BackingField;
    public Lazy`1<TCacheResult> CacheItem { get; }
    public LazyCacheResult`1(Lazy`1<TCacheResult> cacheItem);
    [CompilerGeneratedAttribute]
public Lazy`1<TCacheResult> get_CacheItem();
}
public class Omnia.Fx.Caching.OmniaCacheCallBack : MulticastDelegate {
    public OmniaCacheCallBack(object object, IntPtr method);
    public virtual void Invoke(object registrationState, object setKeyState, IList`1<OmniaCacheChangeInformation> changeChain);
    public virtual IAsyncResult BeginInvoke(object registrationState, object setKeyState, IList`1<OmniaCacheChangeInformation> changeChain, AsyncCallback callback, object object);
    public virtual void EndInvoke(IAsyncResult result);
}
public class Omnia.Fx.Caching.OmniaCacheChangeInformation : object {
    [CompilerGeneratedAttribute]
private string <Key>k__BackingField;
    [CompilerGeneratedAttribute]
private OmniaCacheChangeReason <Reason>k__BackingField;
    public string Key { get; }
    public OmniaCacheChangeReason Reason { get; }
    public OmniaCacheChangeInformation(string key, OmniaCacheChangeReason reason);
    [CompilerGeneratedAttribute]
public string get_Key();
    [CompilerGeneratedAttribute]
public OmniaCacheChangeReason get_Reason();
}
public enum Omnia.Fx.Caching.OmniaCacheChangeReason : Enum {
    public int value__;
    public static OmniaCacheChangeReason None;
    public static OmniaCacheChangeReason Removed;
    public static OmniaCacheChangeReason Replaced;
    public static OmniaCacheChangeReason Expired;
    public static OmniaCacheChangeReason TokenExpired;
    public static OmniaCacheChangeReason Capacity;
    public static OmniaCacheChangeReason DependencyChanged;
    public static OmniaCacheChangeReason SynchronizedRefresh;
}
internal class Omnia.Fx.Caching.OmniaCacheEntry : object {
    [CompilerGeneratedAttribute]
private string <Key>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<TimeSpan> <AbsoluteExpirationRelativeToNow>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<DateTimeOffset> <AbsoluteExpiration>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<TimeSpan> <SlidingExpiration>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <Ignore>k__BackingField;
    public string Key { get; }
    public Nullable`1<TimeSpan> AbsoluteExpirationRelativeToNow { get; public set; }
    public Nullable`1<DateTimeOffset> AbsoluteExpiration { get; public set; }
    public Nullable`1<TimeSpan> SlidingExpiration { get; public set; }
    public bool Ignore { get; public set; }
    public OmniaCacheEntry(string key);
    [CompilerGeneratedAttribute]
public sealed virtual string get_Key();
    [CompilerGeneratedAttribute]
public sealed virtual Nullable`1<TimeSpan> get_AbsoluteExpirationRelativeToNow();
    [CompilerGeneratedAttribute]
public sealed virtual void set_AbsoluteExpirationRelativeToNow(Nullable`1<TimeSpan> value);
    [CompilerGeneratedAttribute]
public sealed virtual Nullable`1<DateTimeOffset> get_AbsoluteExpiration();
    [CompilerGeneratedAttribute]
public sealed virtual void set_AbsoluteExpiration(Nullable`1<DateTimeOffset> value);
    [CompilerGeneratedAttribute]
public sealed virtual Nullable`1<TimeSpan> get_SlidingExpiration();
    [CompilerGeneratedAttribute]
public sealed virtual void set_SlidingExpiration(Nullable`1<TimeSpan> value);
    [CompilerGeneratedAttribute]
public sealed virtual bool get_Ignore();
    [CompilerGeneratedAttribute]
public sealed virtual void set_Ignore(bool value);
}
internal class Omnia.Fx.Caching.OmniaDependencyCacheEntry : OmniaCacheEntry {
    [CompilerGeneratedAttribute]
private List`1<ICacheDependency> <Dependencies>k__BackingField;
    [CompilerGeneratedAttribute]
private object <SetState>k__BackingField;
    public List`1<ICacheDependency> Dependencies { get; public set; }
    public object SetState { get; public set; }
    public OmniaDependencyCacheEntry(string key);
    [CompilerGeneratedAttribute]
public sealed virtual List`1<ICacheDependency> get_Dependencies();
    [CompilerGeneratedAttribute]
public sealed virtual void set_Dependencies(List`1<ICacheDependency> value);
    [CompilerGeneratedAttribute]
public sealed virtual object get_SetState();
    [CompilerGeneratedAttribute]
public sealed virtual void set_SetState(object value);
}
internal class Omnia.Fx.Caching.OmniaDistributedCache : BaseCache {
    private static string DistributedLazyCachePrefix;
    [CompilerGeneratedAttribute]
private IDistributedCache <DistributedCache>k__BackingField;
    [CompilerGeneratedAttribute]
private IOptionsMonitor`1<OmniaEncryptionSettings> <OmniaEncryptionSettings>k__BackingField;
    private IDistributedCache DistributedCache { get; }
    private IOptionsMonitor`1<OmniaEncryptionSettings> OmniaEncryptionSettings { get; }
    public OmniaDistributedCache(IDistributedCache distributedCache, IMemoryCache memoryCache, IOptionsMonitor`1<OmniaEncryptionSettings> omniaEncryptionSettings, IOmniaLogger`1<OmniaDistributedCache> logger);
    [CompilerGeneratedAttribute]
private IDistributedCache get_DistributedCache();
    [CompilerGeneratedAttribute]
private IOptionsMonitor`1<OmniaEncryptionSettings> get_OmniaEncryptionSettings();
    public virtual T Get(string key);
    [AsyncStateMachineAttribute("Omnia.Fx.Caching.OmniaDistributedCache/<GetAsync>d__9`1")]
public virtual ValueTask`1<T> GetAsync(string key);
    public virtual IRefreshableCacheObject`1<T> GetAsRefreshableCache(string key);
    public virtual void Set(string key, T value, Nullable`1<TimeSpan> absoluteExpirationRelativeToNow);
    public virtual void Set(string key, T value, Nullable`1<DateTimeOffset> absoluteExpiration);
    public virtual void Set(TimeSpan slidingExpiration, string key, T value);
    [AsyncStateMachineAttribute("Omnia.Fx.Caching.OmniaDistributedCache/<SetAsync>d__14`1")]
public virtual ValueTask SetAsync(string key, T value, Nullable`1<TimeSpan> absoluteExpirationRelativeToNow);
    [AsyncStateMachineAttribute("Omnia.Fx.Caching.OmniaDistributedCache/<SetAsync>d__15`1")]
public virtual ValueTask SetAsync(string key, T value, Nullable`1<DateTimeOffset> absoluteExpiration);
    [AsyncStateMachineAttribute("Omnia.Fx.Caching.OmniaDistributedCache/<SetAsync>d__16`1")]
public virtual ValueTask SetAsync(TimeSpan slidingExpiration, string key, T value);
    public virtual void Remove(string key);
    [AsyncStateMachineAttribute("Omnia.Fx.Caching.OmniaDistributedCache/<RemoveAsync>d__18")]
public virtual ValueTask RemoveAsync(string key);
    protected virtual string GetLazyCacheKey(string key);
    [AsyncStateMachineAttribute("Omnia.Fx.Caching.OmniaDistributedCache/<TryGetValueAsync>d__20`1")]
protected virtual ValueTask`1<ValueTuple`2<bool, T>> TryGetValueAsync(string key);
    private T DeserializeIfNeeded(string distributedValue);
    private bool TryGetDistributedCacheValue(string distributedValue, T& result);
    private bool TryDeserializeIfNeeded(string distributedValue, T& result);
    private string SerializeIfNeeded(T valueToSet);
    private string EncryptValue(string value);
    private string DecryptValue(string encryptedValue);
}
internal class Omnia.Fx.Caching.OmniaLegacySynchronizedMemoryCache : ExtensionTargetedOmniaSynchronizedMemoryCache {
}
internal class Omnia.Fx.Caching.OmniaMemoryCache : BaseCache {
    private static string MemoryLazyCachePrefix;
    [CompilerGeneratedAttribute]
private ConcurrentDictionary`2<Guid, CacheHandler> <OnRemovedHandlers>k__BackingField;
    [CompilerGeneratedAttribute]
private ILogFileWriter <LogFileWriter>k__BackingField;
    protected ConcurrentDictionary`2<Guid, CacheHandler> OnRemovedHandlers { get; }
    private ILogFileWriter LogFileWriter { get; private set; }
    public OmniaMemoryCache(IMemoryCache memoryCache, ILogFileService logFileService, IOmniaLogger`1<OmniaMemoryCache> logger);
    [CompilerGeneratedAttribute]
protected ConcurrentDictionary`2<Guid, CacheHandler> get_OnRemovedHandlers();
    [CompilerGeneratedAttribute]
private ILogFileWriter get_LogFileWriter();
    [CompilerGeneratedAttribute]
private void set_LogFileWriter(ILogFileWriter value);
    public virtual T Get(string key);
    public virtual IRefreshableCacheObject`1<T> GetAsRefreshableCache(string key);
    public virtual void Set(string key, T value, Nullable`1<TimeSpan> absoluteExpirationRelativeToNow);
    public virtual void Set(string key, T value, Nullable`1<DateTimeOffset> absoluteExpiration);
    public virtual void Set(TimeSpan slidingExpiration, string key, T value);
    public virtual void Remove(string key);
    public virtual ValueTask RemoveAsync(string key);
    public virtual Action RegisterOnRemovedHandler(Action`1<string> onCacheRemoved);
    protected virtual void SetInternal(string key, T value, Nullable`1<TimeSpan> absoluteExpirationRelativeToNow, Nullable`1<TimeSpan> slidingExpiration, Nullable`1<DateTimeOffset> absoluteExpiration);
    protected virtual string GetLazyCacheKey(string key);
    protected virtual ValueTask`1<ValueTuple`2<bool, T>> TryGetValueAsync(string key);
    protected virtual void ExecuteHandlers(string key, ConcurrentDictionary`2<Guid, CacheHandler> handlers);
    protected virtual string CreateValueHash(T value);
    protected virtual void WriteFileLog(string key, T value);
    protected void WriteFileLog(string type, string key, T value);
}
internal class Omnia.Fx.Caching.OmniaMemoryDependencyCache : OmniaMemoryCache {
    public OmniaMemoryDependencyCache(IMemoryCache memoryCache, ILogFileService logFileService, IOmniaLogger`1<OmniaMemoryDependencyCache> logger);
    public virtual T Get(string key);
    public virtual IRefreshableCacheObject`1<T> GetAsRefreshableCache(string key);
    public virtual ICacheDependencyResult`1<T> GetCacheResult(string key);
    public virtual ICacheDependency GetKeyDependency(string key);
    public virtual ICacheDependencyResult`1<T> Set(string key, T value);
    public virtual ICacheDependencyResult`1<T> Set(string key, T value, ICacheDependency[] dependencies);
    public virtual ICacheDependencyResult`1<T> Set(TimeSpan slidingExpiration, string key, T value, ICacheDependency[] dependencies);
    public virtual ICacheDependencyResult`1<T> SetWithState(TimeSpan slidingExpiration, string key, T value, ICacheDependency[] dependencies, object setState);
    public virtual ICacheDependencyResult`1<T> Set(string key, T value, TimeSpan absoluteExpirationRelativeToNow, ICacheDependency[] dependencies);
    public virtual ICacheDependencyResult`1<T> SetWithState(string key, T value, TimeSpan absoluteExpirationRelativeToNow, ICacheDependency[] dependencies, object setState);
    public sealed virtual ICacheDependencyResult`1<T> Set(string key, T value, DateTimeOffset absoluteExpiration, ICacheDependency[] dependencies);
    public sealed virtual ICacheDependencyResult`1<T> SetWithState(string key, T value, DateTimeOffset absoluteExpiration, ICacheDependency[] dependencies, object setState);
    public virtual ICacheDependencyResult`1<T> GetOrSetDependencyCache(string key, Func`2<IOmniaDependencyCacheEntry, T> setItemFactory);
    [AsyncStateMachineAttribute("Omnia.Fx.Caching.OmniaMemoryDependencyCache/<GetOrSetDependencyCacheAsync>d__18`1")]
public virtual Task`1<ICacheDependencyResult`1<T>> GetOrSetDependencyCacheAsync(string key, Func`2<IOmniaDependencyCacheEntry, Task`1<T>> setItemFactory);
    public virtual ICacheDependencyResult`1<IRefreshableCacheObject`1<T>> GetDependencyCacheAndRefreshIfNeeded(string key, TimeSpan absoluteRefreshTimeRelativeToNow, Func`2<IOmniaDependencyCacheEntry, T> setItemFactory);
    [AsyncStateMachineAttribute("Omnia.Fx.Caching.OmniaMemoryDependencyCache/<GetDependencyCacheAndRefreshIfNeededAsync>d__20`1")]
public virtual Task`1<ICacheDependencyResult`1<IRefreshableCacheObject`1<T>>> GetDependencyCacheAndRefreshIfNeededAsync(string key, TimeSpan absoluteRefreshTimeRelativeToNow, Func`2<IOmniaDependencyCacheEntry, Task`1<T>> setItemFactory);
    protected virtual ICacheDependencyResult`1<T> SetDependencyCacheInternal(string key, T value, ICacheDependency[] dependencies, object setState, Nullable`1<TimeSpan> absoluteExpirationRelativeToNow, Nullable`1<TimeSpan> slidingExpiration, Nullable`1<DateTimeOffset> absoluteExpiration);
    protected virtual ICacheDependencyResult`1<T> SetDependencyCacheInternal(string key, Func`2<IOmniaDependencyCacheEntry, T> setItemFactory);
    [AsyncStateMachineAttribute("Omnia.Fx.Caching.OmniaMemoryDependencyCache/<SetDependencyCacheInternalAsync>d__23`1")]
public virtual Task`1<ICacheDependencyResult`1<T>> SetDependencyCacheInternalAsync(string key, Func`2<IOmniaDependencyCacheEntry, Task`1<T>> setItemFactory);
    protected virtual ICacheDependencyResult`1<TItem> StoreLazyDependencyCacheValue(TItem cacheValue, IOmniaDependencyCacheEntry cacheEntry);
    protected virtual ValueTuple`2<bool, ICacheDependencyResult`1<T>> TryGetCacheDependencyResult(string key);
    protected virtual LazyCacheResult`1<ICacheDependencyResult`1<T>> GetLazyDependencyCacheResult(T cacheValue, IOmniaDependencyCacheEntry cacheEntry);
    [AsyncStateMachineAttribute("Omnia.Fx.Caching.OmniaMemoryDependencyCache/<GetLazyDependencyCacheResultAsync>d__27`1")]
protected virtual Task`1<LazyCacheResult`1<ICacheDependencyResult`1<T>>> GetLazyDependencyCacheResultAsync(string key, Func`2<IOmniaDependencyCacheEntry, Task`1<T>> setItemFactory);
    protected virtual ICacheDependencyResult`1<T> CreateNonCacheResult(T cacheValue);
    protected bool TryGetDependencyCacheValue(IInternalCacheDependency cacheObj, Object& cacheValue);
    protected virtual string CreateValueHash(T value);
    protected virtual void WriteFileLog(string key, T value);
}
internal class Omnia.Fx.Caching.OmniaSynchronizedCacheProvider : object {
    [CompilerGeneratedAttribute]
private Dictionary`2<Guid, bool> <BlockedAccessExtensionMap>k__BackingField;
    [CompilerGeneratedAttribute]
private Dictionary`2<Guid, RegisteredInstance> <ExtensionToInstanceMap>k__BackingField;
    [CompilerGeneratedAttribute]
private ILogger`1<OmniaSynchronizedCacheProvider> <Logger>k__BackingField;
    private Dictionary`2<Guid, bool> BlockedAccessExtensionMap { get; }
    private Dictionary`2<Guid, RegisteredInstance> ExtensionToInstanceMap { get; }
    private ILogger`1<OmniaSynchronizedCacheProvider> Logger { get; }
    public OmniaSynchronizedCacheProvider(IServiceProvider serviceProvider);
    [CompilerGeneratedAttribute]
private Dictionary`2<Guid, bool> get_BlockedAccessExtensionMap();
    [CompilerGeneratedAttribute]
private Dictionary`2<Guid, RegisteredInstance> get_ExtensionToInstanceMap();
    [CompilerGeneratedAttribute]
private ILogger`1<OmniaSynchronizedCacheProvider> get_Logger();
    public sealed virtual void BlockUntypedAccess(OmniaExtension omniaExtension);
    public sealed virtual bool AllowUntypedAccess(OmniaExtension omniaExtension);
    private void Add(IServiceProvider serviceProvider);
    public void Add(Guid omniaExtensionId, OmniaSynchronizedMemoryCache instance);
    public sealed virtual OmniaSynchronizedMemoryCache GetForExtension(OmniaExtension omniaExtension);
    [AsyncStateMachineAttribute("Omnia.Fx.Caching.OmniaSynchronizedCacheProvider/<RunAsStartupAsync>d__16")]
public sealed virtual ValueTask RunAsStartupAsync();
    public sealed virtual string GetRegistrationStackTrace(OmniaExtension omniaExtension);
}
internal class Omnia.Fx.Caching.OmniaSynchronizedMemoryCache : OmniaMemoryDependencyCache {
    private Topic`1<CacheSyncronizationMessage> Topic;
    [CompilerGeneratedAttribute]
private IMessageBus <MessageBus>k__BackingField;
    [CompilerGeneratedAttribute]
private Guid <CacheForExtensionId>k__BackingField;
    [CompilerGeneratedAttribute]
private ILogFileWriter <LogWriter>k__BackingField;
    private IMessageBus MessageBus { get; }
    internal Guid CacheForExtensionId { get; }
    internal ILogFileWriter LogWriter { get; }
    public OmniaSynchronizedMemoryCache(IMemoryCache memoryCache, IMessageBusFactory messageBusFactory, Guid cacheForExtensionId, ILogFileService logFileService, IOmniaLogger`1<OmniaSynchronizedMemoryCache> logger);
    [CompilerGeneratedAttribute]
private IMessageBus get_MessageBus();
    [CompilerGeneratedAttribute]
internal Guid get_CacheForExtensionId();
    [CompilerGeneratedAttribute]
internal ILogFileWriter get_LogWriter();
    [AsyncStateMachineAttribute("Omnia.Fx.Caching.OmniaSynchronizedMemoryCache/<StartListentingForChangesAsync>d__12")]
internal ValueTask StartListentingForChangesAsync();
    public virtual ICacheDependencyResult`1<T> SetAsSynchronized(string key, T value);
    public virtual ICacheDependencyResult`1<T> SetAsSynchronized(string key, T value, ICacheDependency[] dependencies);
    public virtual ICacheDependencyResult`1<T> SetAsSynchronized(string key, T value, TimeSpan absoluteExpirationRelativeToNow, ICacheDependency[] dependencies);
    public virtual ICacheDependencyResult`1<T> SetAsSynchronizedWithState(string key, T value, TimeSpan absoluteExpirationRelativeToNow, ICacheDependency[] dependencies, object setState);
    public sealed virtual ICacheDependencyResult`1<T> SetAsSynchronized(string key, T value, DateTimeOffset absoluteExpiration, ICacheDependency[] dependencies);
    public sealed virtual ICacheDependencyResult`1<T> SetAsSynchronizedWithState(string key, T value, DateTimeOffset absoluteExpiration, ICacheDependency[] dependencies, object setState);
    public virtual ICacheDependencyResult`1<T> SetAsSynchronized(TimeSpan slidingExpiration, string key, T value, ICacheDependency[] dependencies);
    public virtual ICacheDependencyResult`1<T> SetAsSynchronizedWithState(TimeSpan slidingExpiration, string key, T value, ICacheDependency[] dependencies, object setState);
    public virtual ICacheDependencyResult`1<T> GetOrSetAsSynchronized(string key, Func`2<IOmniaDependencyCacheEntry, T> setItemFactory);
    [AsyncStateMachineAttribute("Omnia.Fx.Caching.OmniaSynchronizedMemoryCache/<GetOrSetAsSynchronizedAsync>d__22`1")]
public virtual Task`1<ICacheDependencyResult`1<T>> GetOrSetAsSynchronizedAsync(string key, Func`2<IOmniaDependencyCacheEntry, Task`1<T>> setItemFactory);
    public virtual ICacheDependencyResult`1<IRefreshableCacheObject`1<T>> GetSynchronizedCacheAndRefreshIfNeeded(string key, TimeSpan absoluteRefreshTimeRelativeToNow, Func`2<IOmniaDependencyCacheEntry, T> setItemFactory);
    [AsyncStateMachineAttribute("Omnia.Fx.Caching.OmniaSynchronizedMemoryCache/<GetSynchronizedCacheAndRefreshIfNeededAsync>d__24`1")]
public virtual Task`1<ICacheDependencyResult`1<IRefreshableCacheObject`1<T>>> GetSynchronizedCacheAndRefreshIfNeededAsync(string key, TimeSpan absoluteRefreshTimeRelativeToNow, Func`2<IOmniaDependencyCacheEntry, Task`1<T>> setItemFactory);
    protected virtual ICacheDependencyResult`1<T> SetAsSynchronizedInternal(string key, T value, ICacheDependency[] dependencies, object setState, Nullable`1<TimeSpan> absoluteExpirationRelativeToNow, Nullable`1<TimeSpan> slidingExpiration, Nullable`1<DateTimeOffset> absoluteExpiration);
    protected virtual ICacheDependencyResult`1<T> SetAsSynchronizedInternal(string key, Func`2<IOmniaDependencyCacheEntry, T> setItemFactory);
    [AsyncStateMachineAttribute("Omnia.Fx.Caching.OmniaSynchronizedMemoryCache/<SetAsSynchronizedInternalAsync>d__27`1")]
protected virtual Task`1<ICacheDependencyResult`1<T>> SetAsSynchronizedInternalAsync(string key, Func`2<IOmniaDependencyCacheEntry, Task`1<T>> setItemFactory);
    protected virtual ICacheDependencyResult`1<TItem> StoreLazySynchronizedCacheValue(TItem cacheValue, IOmniaDependencyCacheEntry cacheEntry);
    protected virtual LazyCacheResult`1<ICacheDependencyResult`1<T>> GetLazySynchronizedCacheResult(T cacheValue, IOmniaDependencyCacheEntry cacheEntry);
    [AsyncStateMachineAttribute("Omnia.Fx.Caching.OmniaSynchronizedMemoryCache/<GetLazySynchronizedCacheResultAsync>d__30`1")]
protected virtual Task`1<LazyCacheResult`1<ICacheDependencyResult`1<T>>> GetLazySynchronizedCacheResultAsync(string key, Func`2<IOmniaDependencyCacheEntry, Task`1<T>> setItemFactory);
    private void HandleSynchronizationMessaging(string key, string newValueHash, ICacheDependencyResult`1<T> result);
    private bool UpdateValueHashCache(string cacheKey, string newValueHash);
    private bool IsLocalAndRemoteHashesMatching(CacheSyncronizationMessage msg, object localValue);
    public virtual void Remove(string key);
    private void WriteServiceBusLog(string action, string description, string cacheKey, string valueHash, OmniaCacheChangeReason reason);
    [AsyncStateMachineAttribute("Omnia.Fx.Caching.OmniaSynchronizedMemoryCache/<<StartListentingForChangesAsync>b__12_0>d")]
[CompilerGeneratedAttribute]
private Task <StartListentingForChangesAsync>b__12_0(CacheSyncronizationMessage message);
}
public class Omnia.Fx.Caching.OmniaTargetedSynchronizedMemoryCache : ExtensionTargetedOmniaSynchronizedMemoryCache {
}
internal class Omnia.Fx.Caching.RefreshableCacheObject`1 : object {
    [CompilerGeneratedAttribute]
private T <Value>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<long> <Expires>k__BackingField;
    public object RawValue { get; }
    public T Value { get; public set; }
    public Nullable`1<long> Expires { get; public set; }
    public RefreshableCacheObject`1(T value, Nullable`1<TimeSpan> refreshedTimespan);
    public sealed virtual object get_RawValue();
    [CompilerGeneratedAttribute]
public sealed virtual T get_Value();
    [CompilerGeneratedAttribute]
public void set_Value(T value);
    [CompilerGeneratedAttribute]
public sealed virtual Nullable`1<long> get_Expires();
    [CompilerGeneratedAttribute]
public void set_Expires(Nullable`1<long> value);
}
internal class Omnia.Fx.Caching.RegisterSynchorizedCacheInstance : object {
    [CompilerGeneratedAttribute]
private IOmniaSynchronizedMemoryCache <RegisteredInstance>k__BackingField;
    public IOmniaSynchronizedMemoryCache RegisteredInstance { get; }
    public RegisterSynchorizedCacheInstance(IOmniaSynchronizedMemoryCache registeredInstance);
    [CompilerGeneratedAttribute]
public sealed virtual IOmniaSynchronizedMemoryCache get_RegisteredInstance();
}
public class Omnia.Fx.Caching.SessionState.HttpContract : object {
}
public interface Omnia.Fx.Caching.SessionState.ISessionCacheStateManager {
    public abstract virtual void EnsureKey(string cacheKey);
    public abstract virtual Dictionary`2<string, string> GetSessionCacheStateCookiesInRequest();
}
public interface Omnia.Fx.Caching.SessionState.ISessionCacheStateService {
    public abstract virtual Task PersistSessionCacheKeysAsync(Guid sessionId, DateTimeOffset modifiedAt, String[] cacheKeys);
    public abstract virtual Task`1<IEnumerable`1<string>> GetSessionCacheKeysAsync(SessionCacheStateItem item);
}
public class Omnia.Fx.Caching.SessionState.SessionCacheStateHelper : object {
    private IOmniaCacheWithKeyHelper`1<IOmniaMemoryCache> _cacheHelper;
    public SessionCacheStateHelper(IOmniaMemoryCache memoryCache);
    public DateTimeOffset GetExpiredTime(DateTimeOffset modifiedAt);
    public string CreateSessionCacheKey(Guid sessionId);
    [AsyncStateMachineAttribute("Omnia.Fx.Caching.SessionState.SessionCacheStateHelper/<GetCacheKeysAsync>d__4")]
public ValueTask`1<String[]> GetCacheKeysAsync(Guid sessionId, Func`2<string, Task`1<String[]>> getItemFactory);
    [AsyncStateMachineAttribute("Omnia.Fx.Caching.SessionState.SessionCacheStateHelper/<GetOrSetCacheKeysAsync>d__5")]
public ValueTask`1<String[]> GetOrSetCacheKeysAsync(Guid sessionId, DateTimeOffset modifiedAt, Func`1<Task`1<String[]>> setItemFactory);
}
internal class Omnia.Fx.Caching.SessionState.SessionCacheStateService : object {
    private SessionCacheStateServiceOverHttp _serviceOverHttp;
    public SessionCacheStateService(IOmniaMemoryCache memoryCache, IConfiguredHttpClient`1<OmniaServiceApi> httpClient);
    [AsyncStateMachineAttribute("Omnia.Fx.Caching.SessionState.SessionCacheStateService/<PersistSessionCacheKeysAsync>d__4")]
public sealed virtual Task PersistSessionCacheKeysAsync(Guid sessionId, DateTimeOffset modifiedAt, String[] cacheKeys);
    [AsyncStateMachineAttribute("Omnia.Fx.Caching.SessionState.SessionCacheStateService/<GetSessionCacheKeysAsync>d__5")]
public sealed virtual Task`1<IEnumerable`1<string>> GetSessionCacheKeysAsync(SessionCacheStateItem item);
}
[ExtensionAttribute]
public static class Omnia.Fx.Compression.CompressionExtensions : object {
    [ExtensionAttribute]
public static T DeserialzeTo(Byte[] compressedData);
    [ExtensionAttribute]
public static Byte[] SerializeAndCompress(T source);
}
public class Omnia.Fx.ConnectedTenant.ConnectedTenantApi : GenericServiceHttpClientBase {
    private Guid UniqueId;
    public string UniqueServiceName { get; }
    public ConnectedTenantApi(HttpClientFactoryForGenricServiceFunc httpClientFunc);
    public virtual string get_UniqueServiceName();
    protected virtual Task DefaultHttpClientConfigurationAsync(HttpClient clientToConfigure);
    public virtual ValueTask`1<HttpRequestConfiguration> HttpRequestConfigurationAsync();
}
internal class Omnia.Fx.ConnectedTenant.ConnectedTenantOverHttp : object {
    [CompilerGeneratedAttribute]
private ConnectedTenantServiceHttpClient <ConnectedTenantHttpClient>k__BackingField;
    private ConnectedTenantServiceHttpClient ConnectedTenantHttpClient { get; }
    public ConnectedTenantOverHttp(IConfiguredHttpClient`1<OmniaServiceApi> omniaServiceApi);
    [CompilerGeneratedAttribute]
private ConnectedTenantServiceHttpClient get_ConnectedTenantHttpClient();
    [AsyncStateMachineAttribute("Omnia.Fx.ConnectedTenant.ConnectedTenantOverHttp/<GetAllAsync>d__5")]
public sealed virtual ValueTask`1<IList`1<ConnectedTenant>> GetAllAsync();
    [AsyncStateMachineAttribute("Omnia.Fx.ConnectedTenant.ConnectedTenantOverHttp/<CreateAsync>d__6")]
public sealed virtual ValueTask`1<ConnectedTenant> CreateAsync(ConnectedTenant connectedTenant);
    [AsyncStateMachineAttribute("Omnia.Fx.ConnectedTenant.ConnectedTenantOverHttp/<DeleteAsync>d__7")]
public sealed virtual Task DeleteAsync(Guid id);
    [AsyncStateMachineAttribute("Omnia.Fx.ConnectedTenant.ConnectedTenantOverHttp/<GetByIdAsync>d__8")]
public sealed virtual ValueTask`1<ConnectedTenant> GetByIdAsync(Guid id);
    [AsyncStateMachineAttribute("Omnia.Fx.ConnectedTenant.ConnectedTenantOverHttp/<UpdateAsync>d__9")]
public sealed virtual ValueTask`1<ConnectedTenant> UpdateAsync(ConnectedTenant connectedTenant);
    [AsyncStateMachineAttribute("Omnia.Fx.ConnectedTenant.ConnectedTenantOverHttp/<GetTenantInfoAsync>d__10")]
public sealed virtual ValueTask`1<ConnectedTenantInfo> GetTenantInfoAsync();
    [AsyncStateMachineAttribute("Omnia.Fx.ConnectedTenant.ConnectedTenantOverHttp/<GetConnectedTenantSecretAsync>d__11")]
public sealed virtual ValueTask`1<ConnectedTenantSecret> GetConnectedTenantSecretAsync(Guid id);
}
public class Omnia.Fx.ConnectedTenant.HttpContract : object {
}
public interface Omnia.Fx.ConnectedTenant.IConnectedTenantService {
    public abstract virtual ValueTask`1<IList`1<ConnectedTenant>> GetAllAsync();
    public abstract virtual ValueTask`1<ConnectedTenant> CreateAsync(ConnectedTenant connectedTenant);
    public abstract virtual ValueTask`1<ConnectedTenant> UpdateAsync(ConnectedTenant connectedTenant);
    public abstract virtual ValueTask`1<ConnectedTenant> GetByIdAsync(Guid id);
    public abstract virtual Task DeleteAsync(Guid id);
    public abstract virtual ValueTask`1<ConnectedTenantInfo> GetTenantInfoAsync();
    public abstract virtual ValueTask`1<ConnectedTenantSecret> GetConnectedTenantSecretAsync(Guid id);
}
public class Omnia.Fx.Constants : object {
    public static bool ThrowOnObsolete;
}
[AttributeUsageAttribute("128")]
public class Omnia.Fx.Contexts.ContextParamAttribute : Attribute {
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    public string Name { get; private set; }
    public ContextParamAttribute(string name);
    [CompilerGeneratedAttribute]
public string get_Name();
    [CompilerGeneratedAttribute]
private void set_Name(string value);
}
internal class Omnia.Fx.Contexts.ContextParamProvider : object {
    [CompilerGeneratedAttribute]
private IServiceProvider <ServiceProvider>k__BackingField;
    private List`1<string> _httpRequestParams;
    private IServiceProvider ServiceProvider { get; }
    public IReadOnlyList`1<string> ParamNames { get; }
    public ContextParamProvider(IServiceProvider serviceProvider);
    [CompilerGeneratedAttribute]
private IServiceProvider get_ServiceProvider();
    public sealed virtual IReadOnlyList`1<string> get_ParamNames();
    private void Init();
    private IList`1<Type> GetContextParamTypes();
    private void HandleParamObjType(Type paramObjType, List`1<string> httpRequestParams);
}
public interface Omnia.Fx.Contexts.IContextParamProvider {
    public IReadOnlyList`1<string> ParamNames { get; }
    public abstract virtual IReadOnlyList`1<string> get_ParamNames();
}
public interface Omnia.Fx.Contexts.IOmniaAuthenticationContext {
    public bool AllowMobileLogin { get; public set; }
    public bool AllowAnonymous { get; public set; }
    public abstract virtual bool get_AllowMobileLogin();
    public abstract virtual void set_AllowMobileLogin(bool value);
    public abstract virtual bool get_AllowAnonymous();
    public abstract virtual void set_AllowAnonymous(bool value);
}
public interface Omnia.Fx.Contexts.IOmniaAuthenticationContextFactory {
    public abstract virtual IOmniaAuthenticationContext CreateDefaultOmniaAuthenticationContext();
}
public interface Omnia.Fx.Contexts.IOmniaContext {
    public AuthenticatableIdentity Identity { get; public set; }
    public OmniaEnvironmentContext Environment { get; public set; }
    public abstract virtual AuthenticatableIdentity get_Identity();
    public abstract virtual void set_Identity(AuthenticatableIdentity value);
    public abstract virtual OmniaEnvironmentContext get_Environment();
    public abstract virtual void set_Environment(OmniaEnvironmentContext value);
    public abstract virtual void SetToAnonymousIdentity();
}
[ExtensionAttribute]
public static class Omnia.Fx.Contexts.IOmniaContextExtensions : object {
    [ExtensionAttribute]
public static AuditLog CreateAuditLog(IOmniaContext omniaContext, AuditLogContext context, string category, AuditLogState prevState, AuditLogState newState);
    [ExtensionAttribute]
public static AuditLog CreateAuditLog(IOmniaContext omniaContext, string title, string category, AuditLogState prevState, AuditLogState newState);
}
public interface Omnia.Fx.Contexts.IOmniaContextFactory {
    public abstract virtual IOmniaContext CreateDefaultOmniaContext();
}
public class Omnia.Fx.Contexts.OmniaAuthenticationContext : object {
    [CompilerGeneratedAttribute]
private bool <AllowMobileLogin>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <AllowAnonymous>k__BackingField;
    public bool AllowMobileLogin { get; public set; }
    public bool AllowAnonymous { get; public set; }
    [CompilerGeneratedAttribute]
public sealed virtual bool get_AllowMobileLogin();
    [CompilerGeneratedAttribute]
public sealed virtual void set_AllowMobileLogin(bool value);
    [CompilerGeneratedAttribute]
public sealed virtual bool get_AllowAnonymous();
    [CompilerGeneratedAttribute]
public sealed virtual void set_AllowAnonymous(bool value);
}
internal class Omnia.Fx.Contexts.OmniaAuthenticationContextFactory : object {
    public sealed virtual IOmniaAuthenticationContext CreateDefaultOmniaAuthenticationContext();
}
internal class Omnia.Fx.Contexts.OmniaContext : object {
    [CompilerGeneratedAttribute]
private AuthenticatableIdentity <_Identity>k__BackingField;
    [CompilerGeneratedAttribute]
private OmniaEnvironmentContext <Environment>k__BackingField;
    private AuthenticatableIdentity _Identity { get; private set; }
    public AuthenticatableIdentity Identity { get; public set; }
    public OmniaEnvironmentContext Environment { get; public set; }
    [CompilerGeneratedAttribute]
private AuthenticatableIdentity get__Identity();
    [CompilerGeneratedAttribute]
private void set__Identity(AuthenticatableIdentity value);
    public sealed virtual AuthenticatableIdentity get_Identity();
    public sealed virtual void set_Identity(AuthenticatableIdentity value);
    [CompilerGeneratedAttribute]
public sealed virtual OmniaEnvironmentContext get_Environment();
    [CompilerGeneratedAttribute]
public sealed virtual void set_Environment(OmniaEnvironmentContext value);
    public sealed virtual void SetToAnonymousIdentity();
}
internal class Omnia.Fx.Contexts.OmniaContextFactory : object {
    [CompilerGeneratedAttribute]
private IOptionsMonitor`1<OmniaAppSettings> <OmniaAppSettings>k__BackingField;
    [CompilerGeneratedAttribute]
private IOptionsMonitor`1<OmniaServicesDnsSettings> <OmniaDServiceDnsMapping>k__BackingField;
    private IOptionsMonitor`1<OmniaAppSettings> OmniaAppSettings { get; }
    public IOptionsMonitor`1<OmniaServicesDnsSettings> OmniaDServiceDnsMapping { get; }
    public OmniaContextFactory(IOptionsMonitor`1<OmniaAppSettings> omniaAppSettings, IOptionsMonitor`1<OmniaServicesDnsSettings> omniaDServiceDnsMapping);
    [CompilerGeneratedAttribute]
private IOptionsMonitor`1<OmniaAppSettings> get_OmniaAppSettings();
    [CompilerGeneratedAttribute]
public IOptionsMonitor`1<OmniaServicesDnsSettings> get_OmniaDServiceDnsMapping();
    public sealed virtual IOmniaContext CreateDefaultOmniaContext();
    private OmniaEnvironmentContext CreateOmniaEnvironmentContext(OmniaEnvironmentSettings envSettings);
}
internal class Omnia.Fx.Contexts.Scoped.DynamicScopedContextProvider : object {
    private Dictionary`2<string, string> _parameters;
    public IReadOnlyDictionary`2<string, string> Parameters { get; }
    public sealed virtual IReadOnlyDictionary`2<string, string> get_Parameters();
    public sealed virtual void SetParameter(string paramName, string paramValue);
    public sealed virtual void SetParameters(IDictionary`2<string, string> parameters);
}
public interface Omnia.Fx.Contexts.Scoped.IDynamicScopedContextProvider {
    public IReadOnlyDictionary`2<string, string> Parameters { get; }
    public abstract virtual IReadOnlyDictionary`2<string, string> get_Parameters();
    public abstract virtual void SetParameters(IDictionary`2<string, string> parameters);
    public abstract virtual void SetParameter(string paramName, string paramValue);
}
public interface Omnia.Fx.Contexts.Scoped.IOmniaScopedContext {
    public string AzureId { get; }
    public string ClientId { get; }
    public string ClientSecret { get; }
    public string ServiceId { get; }
    public string Language { get; }
    public Guid BusinessProfileId { get; }
    public Guid AppInstanceId { get; }
    public bool IsSystemUpdate { get; }
    public abstract virtual string get_AzureId();
    public abstract virtual string get_ClientId();
    public abstract virtual string get_ClientSecret();
    public abstract virtual string get_ServiceId();
    public abstract virtual string get_Language();
    public abstract virtual Guid get_BusinessProfileId();
    public abstract virtual Guid get_AppInstanceId();
    public abstract virtual bool get_IsSystemUpdate();
}
public interface Omnia.Fx.Contexts.Scoped.IOmniaScopedContextProvider {
    unknown string AzureId {public set; }
    unknown string ClientId {public set; }
    unknown string ClientSecret {public set; }
    unknown string ServiceId {public set; }
    unknown string Language {public set; }
    unknown Guid BusinessProfileId {public set; }
    unknown Guid AppInstanceId {public set; }
    unknown bool IsSystemUpdate {public set; }
    public abstract virtual void set_AzureId(string value);
    public abstract virtual void set_ClientId(string value);
    public abstract virtual void set_ClientSecret(string value);
    public abstract virtual void set_ServiceId(string value);
    public abstract virtual void set_Language(string value);
    public abstract virtual void set_BusinessProfileId(Guid value);
    public abstract virtual void set_AppInstanceId(Guid value);
    public abstract virtual void set_IsSystemUpdate(bool value);
}
internal interface Omnia.Fx.Contexts.Scoped.IScopedContextBinding {
    public Type ParamContextType { get; }
    public abstract virtual Type get_ParamContextType();
}
public interface Omnia.Fx.Contexts.Scoped.IScopedContextProvider {
    public abstract virtual Dictionary`2<string, string> GetParams(IReadOnlyList`1<string> paramNames);
    public abstract virtual string GetParamValue(string paramName);
}
public interface Omnia.Fx.Contexts.Scoped.IScopedContextResolver {
    public IReadOnlyDictionary`2<string, string> Parameters { get; }
    public abstract virtual IReadOnlyDictionary`2<string, string> get_Parameters();
    public abstract virtual T GetScopedContext();
    public abstract virtual T GetScopedContext(Dictionary`2<string, string> contextParams);
    public abstract virtual Dictionary`2<string, string> GetParamValues(String[] paramNames);
}
internal class Omnia.Fx.Contexts.Scoped.OmniaScopedContext : object {
    [CompilerGeneratedAttribute]
private string <AzureId>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ServiceId>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Language>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ClientId>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ClientSecret>k__BackingField;
    [CompilerGeneratedAttribute]
private Guid <BusinessProfileId>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsSystemUpdate>k__BackingField;
    [CompilerGeneratedAttribute]
private Guid <AppInstanceId>k__BackingField;
    public string AzureId { get; public set; }
    public string ServiceId { get; public set; }
    [ContextParamAttribute("Lang")]
public string Language { get; public set; }
    public string ClientId { get; public set; }
    public string ClientSecret { get; public set; }
    [ContextParamAttribute("ProfileId")]
public Guid BusinessProfileId { get; public set; }
    public bool IsSystemUpdate { get; public set; }
    public Guid AppInstanceId { get; public set; }
    [CompilerGeneratedAttribute]
public sealed virtual string get_AzureId();
    [CompilerGeneratedAttribute]
public sealed virtual void set_AzureId(string value);
    [CompilerGeneratedAttribute]
public sealed virtual string get_ServiceId();
    [CompilerGeneratedAttribute]
public sealed virtual void set_ServiceId(string value);
    [CompilerGeneratedAttribute]
public sealed virtual string get_Language();
    [CompilerGeneratedAttribute]
public sealed virtual void set_Language(string value);
    [CompilerGeneratedAttribute]
public sealed virtual string get_ClientId();
    [CompilerGeneratedAttribute]
public sealed virtual void set_ClientId(string value);
    [CompilerGeneratedAttribute]
public sealed virtual string get_ClientSecret();
    [CompilerGeneratedAttribute]
public sealed virtual void set_ClientSecret(string value);
    [CompilerGeneratedAttribute]
public sealed virtual Guid get_BusinessProfileId();
    [CompilerGeneratedAttribute]
public sealed virtual void set_BusinessProfileId(Guid value);
    [CompilerGeneratedAttribute]
public sealed virtual bool get_IsSystemUpdate();
    [CompilerGeneratedAttribute]
public sealed virtual void set_IsSystemUpdate(bool value);
    [CompilerGeneratedAttribute]
public sealed virtual Guid get_AppInstanceId();
    [CompilerGeneratedAttribute]
public sealed virtual void set_AppInstanceId(Guid value);
}
internal class Omnia.Fx.Contexts.Scoped.ScopedContextBinding : object {
    [CompilerGeneratedAttribute]
private Type <ParamContextType>k__BackingField;
    public Type ParamContextType { get; }
    public ScopedContextBinding(Type paramContextType);
    [CompilerGeneratedAttribute]
public sealed virtual Type get_ParamContextType();
}
internal class Omnia.Fx.Contexts.Scoped.ScopedContextResolver : object {
    [CompilerGeneratedAttribute]
private IScopedContextProvider <ScopedContextProvider>k__BackingField;
    [CompilerGeneratedAttribute]
private IContextParamProvider <ContextParamProvider>k__BackingField;
    [CompilerGeneratedAttribute]
private IDynamicScopedContextProvider <DynamicScopedContextProvider>k__BackingField;
    private Dictionary`2<string, string> _params;
    private IScopedContextProvider ScopedContextProvider { get; }
    private IContextParamProvider ContextParamProvider { get; }
    private IDynamicScopedContextProvider DynamicScopedContextProvider { get; }
    public IReadOnlyDictionary`2<string, string> Parameters { get; }
    public ScopedContextResolver(IScopedContextProvider scopedContextProvider, IContextParamProvider contextParamProvider, IDynamicScopedContextProvider dynamicScopedContextProvider);
    [CompilerGeneratedAttribute]
private IScopedContextProvider get_ScopedContextProvider();
    [CompilerGeneratedAttribute]
private IContextParamProvider get_ContextParamProvider();
    [CompilerGeneratedAttribute]
private IDynamicScopedContextProvider get_DynamicScopedContextProvider();
    public sealed virtual IReadOnlyDictionary`2<string, string> get_Parameters();
    public sealed virtual T GetScopedContext();
    public sealed virtual T GetScopedContext(Dictionary`2<string, string> contextParams);
    public sealed virtual Dictionary`2<string, string> GetParamValues(String[] paramNames);
    private T GetScopedContext(Func`2<string, string> getParamValueStringFunc);
    private Dictionary`2<string, string> GetParamsFromContextProvider();
    private Dictionary`2<string, string> AppendParamsFromDynamicScopedContext(Dictionary`2<string, string> parameters);
    private string GetParamValueString(string paramName);
}
internal class Omnia.Fx.DataMigrationsHistory.DataMigrationsHistoryServiceOverHttp : object {
    [CompilerGeneratedAttribute]
private DataMigrationsHistoryServiceHttpClient <ServiceHttpClient>k__BackingField;
    [CompilerGeneratedAttribute]
private IConfiguredHttpClient`1<OmniaServiceApi> <OmniaHttpClient>k__BackingField;
    private DataMigrationsHistoryServiceHttpClient ServiceHttpClient { get; }
    private IConfiguredHttpClient`1<OmniaServiceApi> OmniaHttpClient { get; }
    public DataMigrationsHistoryServiceOverHttp(IConfiguredHttpClient`1<OmniaServiceApi> omniaHttpClient);
    [CompilerGeneratedAttribute]
private DataMigrationsHistoryServiceHttpClient get_ServiceHttpClient();
    [CompilerGeneratedAttribute]
private IConfiguredHttpClient`1<OmniaServiceApi> get_OmniaHttpClient();
    [AsyncStateMachineAttribute("Omnia.Fx.DataMigrationsHistory.DataMigrationsHistoryServiceOverHttp/<GetAllAsync>d__8")]
public sealed virtual ValueTask`1<IList`1<DataMigrationsHistory>> GetAllAsync();
    [AsyncStateMachineAttribute("Omnia.Fx.DataMigrationsHistory.DataMigrationsHistoryServiceOverHttp/<GetAllWithTrackingAsync>d__9")]
public sealed virtual ValueTask`1<DataMigrationsHistoryWithTracking> GetAllWithTrackingAsync();
    [AsyncStateMachineAttribute("Omnia.Fx.DataMigrationsHistory.DataMigrationsHistoryServiceOverHttp/<RemoveTrackingAsync>d__10")]
public sealed virtual ValueTask RemoveTrackingAsync();
    [AsyncStateMachineAttribute("Omnia.Fx.DataMigrationsHistory.DataMigrationsHistoryServiceOverHttp/<AddAsync>d__11")]
public sealed virtual ValueTask`1<DataMigrationsHistory> AddAsync(DataMigrationsHistory dataMigration);
    [AsyncStateMachineAttribute("Omnia.Fx.DataMigrationsHistory.DataMigrationsHistoryServiceOverHttp/<UpdateAsync>d__12")]
public sealed virtual ValueTask`1<DataMigrationsHistory> UpdateAsync(DataMigrationsHistory dataMigration);
    [AsyncStateMachineAttribute("Omnia.Fx.DataMigrationsHistory.DataMigrationsHistoryServiceOverHttp/<CheckIsCompletedAsync>d__13")]
public sealed virtual ValueTask`1<bool> CheckIsCompletedAsync(Guid id);
}
public class Omnia.Fx.DataMigrationsHistory.HttpContract : object {
}
public interface Omnia.Fx.DataMigrationsHistory.IDataMigrationsHistoryService {
    public abstract virtual ValueTask`1<DataMigrationsHistory> AddAsync(DataMigrationsHistory dataMigration);
    public abstract virtual ValueTask`1<DataMigrationsHistory> UpdateAsync(DataMigrationsHistory dataMigration);
    public abstract virtual ValueTask`1<IList`1<DataMigrationsHistory>> GetAllAsync();
    public abstract virtual ValueTask`1<DataMigrationsHistoryWithTracking> GetAllWithTrackingAsync();
    public abstract virtual ValueTask RemoveTrackingAsync();
    public abstract virtual ValueTask`1<bool> CheckIsCompletedAsync(Guid id);
}
public interface Omnia.Fx.DependencyInjection.IScopedContextFactoryForSingletonRef {
    public abstract virtual IScopedServiceContext CreateScopedContext();
}
public interface Omnia.Fx.DependencyInjection.IScopedServiceContext {
    public abstract virtual T GetService(ISingletonRefToScopedService`1<T> singletonInstance);
    public abstract virtual T GetRequiredService(ISingletonRefToScopedService`1<T> singletonInstance);
    public abstract virtual IEnumerable`1<T> GetServices(ISingletonRefToScopedService`1<T> singletonInstance);
    public abstract virtual object GetService(ISingletonRefToScopedService singletonInstance);
    public abstract virtual object GetRequiredService(ISingletonRefToScopedService singletonInstance);
    public abstract virtual IEnumerable`1<object> GetServices(ISingletonRefToScopedService singletonInstance);
    public abstract virtual object GetService(T type);
}
public interface Omnia.Fx.DependencyInjection.ISingletonRefToScopedService {
    public Type RefTargetType { get; }
    public abstract virtual Type get_RefTargetType();
}
public interface Omnia.Fx.DependencyInjection.ISingletonRefToScopedService`1 {
}
internal class Omnia.Fx.DependencyInjection.ScopedContextFactoryForSingletonRef : object {
    [CompilerGeneratedAttribute]
private IServiceScopeFactory <ServiceScopeFactory>k__BackingField;
    private IServiceScopeFactory ServiceScopeFactory { get; }
    public ScopedContextFactoryForSingletonRef(IServiceScopeFactory serviceScopeFactory);
    [CompilerGeneratedAttribute]
private IServiceScopeFactory get_ServiceScopeFactory();
    public sealed virtual IScopedServiceContext CreateScopedContext();
}
internal class Omnia.Fx.DependencyInjection.ScopedServiceContext : object {
    [CompilerGeneratedAttribute]
private bool <IsDisposed>k__BackingField;
    [CompilerGeneratedAttribute]
private IServiceScope <ServiceScope>k__BackingField;
    private bool IsDisposed { get; private set; }
    private IServiceScope ServiceScope { get; }
    public ScopedServiceContext(IServiceScopeFactory serviceScopeFactory);
    [CompilerGeneratedAttribute]
private bool get_IsDisposed();
    [CompilerGeneratedAttribute]
private void set_IsDisposed(bool value);
    [CompilerGeneratedAttribute]
private IServiceScope get_ServiceScope();
    public sealed virtual void Dispose();
    public sealed virtual T GetService(ISingletonRefToScopedService`1<T> singletonInstance);
    public sealed virtual object GetService(T type);
    public sealed virtual T GetRequiredService(ISingletonRefToScopedService`1<T> singletonInstance);
    public sealed virtual object GetRequiredService(ISingletonRefToScopedService singletonInstance);
    public sealed virtual object GetService(ISingletonRefToScopedService singletonInstance);
    public sealed virtual IEnumerable`1<T> GetServices(ISingletonRefToScopedService`1<T> singletonInstance);
    public sealed virtual IEnumerable`1<object> GetServices(ISingletonRefToScopedService singletonInstance);
}
internal class Omnia.Fx.DependencyInjection.SingletonRefToScopedService`1 : object {
    public Type RefTargetType { get; }
    public SingletonRefToScopedService`1(IServiceScopeFactory serviceScopeFactory);
    public sealed virtual Type get_RefTargetType();
}
internal class Omnia.Fx.Emails.EmailServiceOverHttp : object {
    [CompilerGeneratedAttribute]
private EmailServiceHttpClient <TeamHttpClient>k__BackingField;
    private EmailServiceHttpClient TeamHttpClient { get; }
    public EmailServiceOverHttp(IConfiguredHttpClient`1<OmniaServiceApi> omniaServiceApi);
    [CompilerGeneratedAttribute]
private EmailServiceHttpClient get_TeamHttpClient();
    [AsyncStateMachineAttribute("Omnia.Fx.Emails.EmailServiceOverHttp/<SendEmailAsync>d__5")]
public sealed virtual ValueTask SendEmailAsync(EmailInfo emailInfo);
}
public class Omnia.Fx.Emails.HttpContract : object {
}
public interface Omnia.Fx.Emails.IEmailService {
    public abstract virtual ValueTask SendEmailAsync(EmailInfo emailInfo);
}
internal class Omnia.Fx.EnterpriseGlossary.EnterpriseGlossaryTaxonomyServiceOverHttp : object {
    [CompilerGeneratedAttribute]
private IConfiguredHttpClient`1<OmniaServiceApi> <OmniaHttpClient>k__BackingField;
    [CompilerGeneratedAttribute]
private EnterpriseGlossaryTaxonomyServiceHttpClient <EnterpriseGlossaryTaxonomyService>k__BackingField;
    private IConfiguredHttpClient`1<OmniaServiceApi> OmniaHttpClient { get; }
    private EnterpriseGlossaryTaxonomyServiceHttpClient EnterpriseGlossaryTaxonomyService { get; }
    public EnterpriseGlossaryTaxonomyServiceOverHttp(IConfiguredHttpClient`1<OmniaServiceApi> omniaHttpClient);
    [CompilerGeneratedAttribute]
private IConfiguredHttpClient`1<OmniaServiceApi> get_OmniaHttpClient();
    [CompilerGeneratedAttribute]
private EnterpriseGlossaryTaxonomyServiceHttpClient get_EnterpriseGlossaryTaxonomyService();
    [AsyncStateMachineAttribute("Omnia.Fx.EnterpriseGlossary.EnterpriseGlossaryTaxonomyServiceOverHttp/<GetEnterpriseGlossaryTaxonomyMappingsAsync>d__8")]
public sealed virtual Task`1<IEnumerable`1<EnterpriseGlossaryTaxonomyMapping>> GetEnterpriseGlossaryTaxonomyMappingsAsync(int enterpriseGlossaryInstanceId);
    [AsyncStateMachineAttribute("Omnia.Fx.EnterpriseGlossary.EnterpriseGlossaryTaxonomyServiceOverHttp/<UpdateEnterpriseGlossaryTaxonomyMappingAsync>d__9")]
public sealed virtual Task UpdateEnterpriseGlossaryTaxonomyMappingAsync(EnterpriseGlossaryTaxonomyMapping[] enterpriseGlossarymappings);
    [AsyncStateMachineAttribute("Omnia.Fx.EnterpriseGlossary.EnterpriseGlossaryTaxonomyServiceOverHttp/<RemoveEnterpriseGlossaryTaxonomyMappingAsync>d__10")]
public sealed virtual Task RemoveEnterpriseGlossaryTaxonomyMappingAsync(Guid[] ids);
    [AsyncStateMachineAttribute("Omnia.Fx.EnterpriseGlossary.EnterpriseGlossaryTaxonomyServiceOverHttp/<Add>d__11")]
public sealed virtual Task`1<EnterpriseGlossaryInstance> Add(EnterpriseGlossaryBase enterpriseGlossary);
    [AsyncStateMachineAttribute("Omnia.Fx.EnterpriseGlossary.EnterpriseGlossaryTaxonomyServiceOverHttp/<AddOrUpdateMapping>d__12")]
public sealed virtual Task`1<EnterpriseGlossaryTaxonomyMapping> AddOrUpdateMapping(EnterpriseGlossaryTaxonomyMapping enterpriseGlossaryTaxonomyMapping);
    [AsyncStateMachineAttribute("Omnia.Fx.EnterpriseGlossary.EnterpriseGlossaryTaxonomyServiceOverHttp/<GetAll>d__13")]
public sealed virtual Task`1<IEnumerable`1<EnterpriseGlossaryInstance>> GetAll();
}
public class Omnia.Fx.EnterpriseGlossary.HttpContract : object {
}
public interface Omnia.Fx.EnterpriseGlossary.IEnterpriseGlossaryTaxonomyService {
    public abstract virtual Task`1<IEnumerable`1<EnterpriseGlossaryTaxonomyMapping>> GetEnterpriseGlossaryTaxonomyMappingsAsync(int enterpriseGlossaryInstanceId);
    public abstract virtual Task UpdateEnterpriseGlossaryTaxonomyMappingAsync(EnterpriseGlossaryTaxonomyMapping[] enterpriseGlossarymappings);
    public abstract virtual Task RemoveEnterpriseGlossaryTaxonomyMappingAsync(Guid[] ids);
    public abstract virtual Task`1<EnterpriseGlossaryInstance> Add(EnterpriseGlossaryBase enterpriseGlossary);
    public abstract virtual Task`1<EnterpriseGlossaryTaxonomyMapping> AddOrUpdateMapping(EnterpriseGlossaryTaxonomyMapping enterpriseGlossaryTaxonomyMapping);
    public abstract virtual Task`1<IEnumerable`1<EnterpriseGlossaryInstance>> GetAll();
}
public static class Omnia.Fx.EnterpriseProperties.EnterprisePropertyHelper : object {
    public static IList`1<EnterprisePropertyDefinition> DefaultSpecialProperties { get; }
    public static IList`1<EnterprisePropertyDefinition> get_DefaultSpecialProperties();
    public static string GetDefaultComputedColumnName(string propertyInternalName, IList`1<string> additionalSpecialPropertyNames, Dictionary`2<string, string> propertyMappings);
    public static bool IsSpecialPropertyName(string propertyInternalName, IList`1<string> additionalSpecialPropertyNames);
}
internal class Omnia.Fx.EnterpriseProperties.EnterprisePropertyService : object {
    [CompilerGeneratedAttribute]
private IEnterprisePropertyServiceWithoutCache <EnterprisePropertyServiceWithoutCache>k__BackingField;
    [CompilerGeneratedAttribute]
private EnterprisePropertyServiceCacheHandler <CacheHandler>k__BackingField;
    [CompilerGeneratedAttribute]
private ITenantService <TenantService>k__BackingField;
    private IEnterprisePropertyServiceWithoutCache EnterprisePropertyServiceWithoutCache { get; }
    private EnterprisePropertyServiceCacheHandler CacheHandler { get; }
    private ITenantService TenantService { get; }
    public EnterprisePropertyService(IEnterprisePropertyServiceWithoutCache enterprisePropertyServiceWithoutCache, EnterprisePropertyServiceCacheHandler cacheHandler, ITenantService tenantService);
    [CompilerGeneratedAttribute]
private IEnterprisePropertyServiceWithoutCache get_EnterprisePropertyServiceWithoutCache();
    [CompilerGeneratedAttribute]
private EnterprisePropertyServiceCacheHandler get_CacheHandler();
    [CompilerGeneratedAttribute]
private ITenantService get_TenantService();
    [AsyncStateMachineAttribute("Omnia.Fx.EnterpriseProperties.EnterprisePropertyService/<GetAllAsync>d__10")]
public sealed virtual ValueTask`1<ValueTuple`2<List`1<EnterprisePropertyDefinition>, ICacheDependencyResult`1<List`1<EnterprisePropertyDefinition>>>> GetAllAsync(bool includeTypeData, string hash);
    [AsyncStateMachineAttribute("Omnia.Fx.EnterpriseProperties.EnterprisePropertyService/<GetAllDataTypesAsync>d__11")]
public sealed virtual ValueTask`1<List`1<EnterprisePropertyDataType>> GetAllDataTypesAsync();
    [AsyncStateMachineAttribute("Omnia.Fx.EnterpriseProperties.EnterprisePropertyService/<AddOrUpdateDataTypeAsync>d__12")]
public sealed virtual ValueTask`1<EnterprisePropertyDataType> AddOrUpdateDataTypeAsync(EnterprisePropertyDataType dataType);
    [AsyncStateMachineAttribute("Omnia.Fx.EnterpriseProperties.EnterprisePropertyService/<GetAllIncludeDeletedAsync>d__13")]
public sealed virtual ValueTask`1<List`1<EnterprisePropertyDefinition>> GetAllIncludeDeletedAsync(Nullable`1<int> deletedDayLitmit);
    [AsyncStateMachineAttribute("Omnia.Fx.EnterpriseProperties.EnterprisePropertyService/<GetByIdAsync>d__14")]
public sealed virtual ValueTask`1<EnterprisePropertyDefinition> GetByIdAsync(Guid id);
    [AsyncStateMachineAttribute("Omnia.Fx.EnterpriseProperties.EnterprisePropertyService/<GetByIdsAsync>d__15")]
public sealed virtual ValueTask`1<List`1<EnterprisePropertyDefinition>> GetByIdsAsync(List`1<Guid> ids);
    [AsyncStateMachineAttribute("Omnia.Fx.EnterpriseProperties.EnterprisePropertyService/<RemovePropertyAsync>d__16")]
public sealed virtual Task RemovePropertyAsync(Guid id);
    [AsyncStateMachineAttribute("Omnia.Fx.EnterpriseProperties.EnterprisePropertyService/<CreatePropertyAsync>d__17")]
public sealed virtual ValueTask`1<EnterprisePropertyDefinition> CreatePropertyAsync(EnterprisePropertyDefinition property);
    [AsyncStateMachineAttribute("Omnia.Fx.EnterpriseProperties.EnterprisePropertyService/<UpdatePropertyAsync>d__18")]
public sealed virtual ValueTask`1<EnterprisePropertyDefinition> UpdatePropertyAsync(EnterprisePropertyDefinition property);
    [AsyncStateMachineAttribute("Omnia.Fx.EnterpriseProperties.EnterprisePropertyService/<Omnia-Fx-EnterpriseProperties-IEnterprisePropertyServiceWithoutCache-GetAllAsync>d__19")]
private sealed virtual override ValueTask`1<List`1<EnterprisePropertyDefinition>> Omnia.Fx.EnterpriseProperties.IEnterprisePropertyServiceWithoutCache.GetAllAsync(bool includeTypeData, string hash);
    [AsyncStateMachineAttribute("Omnia.Fx.EnterpriseProperties.EnterprisePropertyService/<TerminatePropertyAsync>d__20")]
public sealed virtual Task TerminatePropertyAsync(Guid id);
    [AsyncStateMachineAttribute("Omnia.Fx.EnterpriseProperties.EnterprisePropertyService/<RestorePropertyAsync>d__21")]
public sealed virtual ValueTask`1<EnterprisePropertyDefinition> RestorePropertyAsync(Guid id);
    [AsyncStateMachineAttribute("Omnia.Fx.EnterpriseProperties.EnterprisePropertyService/<GetAllPropertyArchive>d__22")]
public sealed virtual ValueTask`1<List`1<PropertyArchive>> GetAllPropertyArchive();
    [AsyncStateMachineAttribute("Omnia.Fx.EnterpriseProperties.EnterprisePropertyService/<ResetApiHash>d__23`1")]
private ValueTask ResetApiHash();
    [AsyncStateMachineAttribute("Omnia.Fx.EnterpriseProperties.EnterprisePropertyService/<<GetAllDataTypesAsync>b__11_0>d")]
[CompilerGeneratedAttribute]
private Task`1<List`1<EnterprisePropertyDataType>> <GetAllDataTypesAsync>b__11_0(IOmniaDependencyCacheEntry cacheEntry);
}
internal class Omnia.Fx.EnterpriseProperties.EnterprisePropertyServiceCacheHandler : object {
    [CompilerGeneratedAttribute]
private IMessageBus <MessageBus>k__BackingField;
    [CompilerGeneratedAttribute]
private IOmniaCacheWithKeyHelper`1<IOmniaMemoryDependencyCache> <CacheHelper>k__BackingField;
    private IMessageBus MessageBus { get; }
    private IOmniaCacheWithKeyHelper`1<IOmniaMemoryDependencyCache> CacheHelper { get; }
    public EnterprisePropertyServiceCacheHandler(IMessageBus messageBus, IOmniaMemoryDependencyCache cache);
    [CompilerGeneratedAttribute]
private IMessageBus get_MessageBus();
    [CompilerGeneratedAttribute]
private IOmniaCacheWithKeyHelper`1<IOmniaMemoryDependencyCache> get_CacheHelper();
    [AsyncStateMachineAttribute("Omnia.Fx.EnterpriseProperties.EnterprisePropertyServiceCacheHandler/<RunAsStartupAsync>d__7")]
public sealed virtual ValueTask RunAsStartupAsync();
    public IOmniaMemoryDependencyCache GetCache();
    public ICacheDependencyResult`1<bool> EnsureEnterprisePropertyDefinitionsDependencyCache();
    public void RemoveEnterprisePropertyDefinitionsDependencyCache();
    public void RemoveEnterprisePropertyDataTypesCache();
    public string GetEnterprisePropertyDefinitionsCacheKey();
    public string GetEnterprisePropertyDataTypesCacheKey();
    private string GetEnterprisePropertyDefinitionsDependencyCacheKey();
    [AsyncStateMachineAttribute("Omnia.Fx.EnterpriseProperties.EnterprisePropertyServiceCacheHandler/<<RunAsStartupAsync>b__7_0>d")]
[CompilerGeneratedAttribute]
private Task <RunAsStartupAsync>b__7_0(EnterprisePropertyDefinition enterpriseProperty);
    [AsyncStateMachineAttribute("Omnia.Fx.EnterpriseProperties.EnterprisePropertyServiceCacheHandler/<<RunAsStartupAsync>b__7_1>d")]
[CompilerGeneratedAttribute]
private Task <RunAsStartupAsync>b__7_1(EnterprisePropertyDefinition enterpriseProperty);
    [AsyncStateMachineAttribute("Omnia.Fx.EnterpriseProperties.EnterprisePropertyServiceCacheHandler/<<RunAsStartupAsync>b__7_2>d")]
[CompilerGeneratedAttribute]
private Task <RunAsStartupAsync>b__7_2(EnterprisePropertyDefinition enterpriseProperty);
}
internal class Omnia.Fx.EnterpriseProperties.EnterprisePropertyServiceWithoutCache : object {
    [CompilerGeneratedAttribute]
private EnterprisePropertyServiceHttpClient <EnterprisePropertyHttpClient>k__BackingField;
    private EnterprisePropertyServiceHttpClient EnterprisePropertyHttpClient { get; }
    public EnterprisePropertyServiceWithoutCache(IConfiguredHttpClient`1<OmniaServiceApi> omniaHttpClient);
    [CompilerGeneratedAttribute]
private EnterprisePropertyServiceHttpClient get_EnterprisePropertyHttpClient();
    [AsyncStateMachineAttribute("Omnia.Fx.EnterpriseProperties.EnterprisePropertyServiceWithoutCache/<CreatePropertyAsync>d__5")]
public sealed virtual ValueTask`1<EnterprisePropertyDefinition> CreatePropertyAsync(EnterprisePropertyDefinition property);
    [AsyncStateMachineAttribute("Omnia.Fx.EnterpriseProperties.EnterprisePropertyServiceWithoutCache/<GetAllAsync>d__6")]
public sealed virtual ValueTask`1<List`1<EnterprisePropertyDefinition>> GetAllAsync(bool includeTypeData, string hash);
    [AsyncStateMachineAttribute("Omnia.Fx.EnterpriseProperties.EnterprisePropertyServiceWithoutCache/<GetAllDataTypesAsync>d__7")]
public sealed virtual ValueTask`1<List`1<EnterprisePropertyDataType>> GetAllDataTypesAsync();
    [AsyncStateMachineAttribute("Omnia.Fx.EnterpriseProperties.EnterprisePropertyServiceWithoutCache/<AddOrUpdateDataTypeAsync>d__8")]
public sealed virtual ValueTask`1<EnterprisePropertyDataType> AddOrUpdateDataTypeAsync(EnterprisePropertyDataType dataType);
    [AsyncStateMachineAttribute("Omnia.Fx.EnterpriseProperties.EnterprisePropertyServiceWithoutCache/<GetAllIncludeDeletedAsync>d__9")]
public sealed virtual ValueTask`1<List`1<EnterprisePropertyDefinition>> GetAllIncludeDeletedAsync(Nullable`1<int> deletedDayLitmit);
    [AsyncStateMachineAttribute("Omnia.Fx.EnterpriseProperties.EnterprisePropertyServiceWithoutCache/<GetByIdAsync>d__10")]
public sealed virtual ValueTask`1<EnterprisePropertyDefinition> GetByIdAsync(Guid id);
    [AsyncStateMachineAttribute("Omnia.Fx.EnterpriseProperties.EnterprisePropertyServiceWithoutCache/<GetByIdsAsync>d__11")]
public sealed virtual ValueTask`1<List`1<EnterprisePropertyDefinition>> GetByIdsAsync(List`1<Guid> ids);
    [AsyncStateMachineAttribute("Omnia.Fx.EnterpriseProperties.EnterprisePropertyServiceWithoutCache/<RemovePropertyAsync>d__12")]
public sealed virtual Task RemovePropertyAsync(Guid id);
    [AsyncStateMachineAttribute("Omnia.Fx.EnterpriseProperties.EnterprisePropertyServiceWithoutCache/<UpdatePropertyAsync>d__13")]
public sealed virtual ValueTask`1<EnterprisePropertyDefinition> UpdatePropertyAsync(EnterprisePropertyDefinition property);
    [AsyncStateMachineAttribute("Omnia.Fx.EnterpriseProperties.EnterprisePropertyServiceWithoutCache/<TerminatePropertyAsync>d__14")]
public sealed virtual Task TerminatePropertyAsync(Guid id);
    [AsyncStateMachineAttribute("Omnia.Fx.EnterpriseProperties.EnterprisePropertyServiceWithoutCache/<RestorePropertyAsync>d__15")]
public sealed virtual ValueTask`1<EnterprisePropertyDefinition> RestorePropertyAsync(Guid id);
    [AsyncStateMachineAttribute("Omnia.Fx.EnterpriseProperties.EnterprisePropertyServiceWithoutCache/<GetAllPropertyArchive>d__16")]
public sealed virtual ValueTask`1<List`1<PropertyArchive>> GetAllPropertyArchive();
}
public class Omnia.Fx.EnterpriseProperties.HttpContract : object {
}
public interface Omnia.Fx.EnterpriseProperties.IEnterprisePropertyService {
    public abstract virtual ValueTask`1<ValueTuple`2<List`1<EnterprisePropertyDefinition>, ICacheDependencyResult`1<List`1<EnterprisePropertyDefinition>>>> GetAllAsync(bool includeTypeData, string hash);
}
public interface Omnia.Fx.EnterpriseProperties.IEnterprisePropertyServiceWithoutCache {
    public abstract virtual ValueTask`1<List`1<EnterprisePropertyDefinition>> GetAllAsync(bool includeTypeData, string hash);
    public abstract virtual ValueTask`1<EnterprisePropertyDefinition> GetByIdAsync(Guid id);
    public abstract virtual ValueTask`1<List`1<EnterprisePropertyDefinition>> GetByIdsAsync(List`1<Guid> ids);
    public abstract virtual ValueTask`1<EnterprisePropertyDefinition> CreatePropertyAsync(EnterprisePropertyDefinition property);
    public abstract virtual ValueTask`1<EnterprisePropertyDefinition> UpdatePropertyAsync(EnterprisePropertyDefinition property);
    public abstract virtual Task RemovePropertyAsync(Guid id);
    public abstract virtual Task TerminatePropertyAsync(Guid id);
    public abstract virtual ValueTask`1<EnterprisePropertyDefinition> RestorePropertyAsync(Guid id);
    public abstract virtual ValueTask`1<List`1<EnterprisePropertyDataType>> GetAllDataTypesAsync();
    public abstract virtual ValueTask`1<EnterprisePropertyDataType> AddOrUpdateDataTypeAsync(EnterprisePropertyDataType dataType);
    public abstract virtual ValueTask`1<List`1<PropertyArchive>> GetAllPropertyArchive();
    public abstract virtual ValueTask`1<List`1<EnterprisePropertyDefinition>> GetAllIncludeDeletedAsync(Nullable`1<int> deletedDayLitmit);
}
internal class Omnia.Fx.EnterprisePropertyCategories.EnterprisePropertyCategoryService : object {
    [CompilerGeneratedAttribute]
private IEnterprisePropertyCategoryServiceWithoutCache <EnterprisePropertyCategoryServiceWithoutCache>k__BackingField;
    [CompilerGeneratedAttribute]
private EnterprisePropertyCategoryServiceCacheHandler <CacheHandler>k__BackingField;
    [CompilerGeneratedAttribute]
private EnterprisePropertyCategoryValidation <EnterprisePropertyCategoryValidation>k__BackingField;
    private IEnterprisePropertyCategoryServiceWithoutCache EnterprisePropertyCategoryServiceWithoutCache { get; }
    private EnterprisePropertyCategoryServiceCacheHandler CacheHandler { get; }
    private EnterprisePropertyCategoryValidation EnterprisePropertyCategoryValidation { get; }
    public EnterprisePropertyCategoryService(IEnterprisePropertyCategoryServiceWithoutCache enterprisePropertySetServiceWithoutCache, EnterprisePropertyCategoryServiceCacheHandler cacheHandler, EnterprisePropertyCategoryValidation enterprisePropertyCategoryValidation);
    [CompilerGeneratedAttribute]
private IEnterprisePropertyCategoryServiceWithoutCache get_EnterprisePropertyCategoryServiceWithoutCache();
    [CompilerGeneratedAttribute]
private EnterprisePropertyCategoryServiceCacheHandler get_CacheHandler();
    [CompilerGeneratedAttribute]
private EnterprisePropertyCategoryValidation get_EnterprisePropertyCategoryValidation();
    [AsyncStateMachineAttribute("Omnia.Fx.EnterprisePropertyCategories.EnterprisePropertyCategoryService/<GetAllAsync>d__10")]
public sealed virtual ValueTask`1<ValueTuple`2<List`1<EnterprisePropertyCategory>, ICacheDependencyResult`1<List`1<EnterprisePropertyCategory>>>> GetAllAsync();
    [AsyncStateMachineAttribute("Omnia.Fx.EnterprisePropertyCategories.EnterprisePropertyCategoryService/<GetByIdAsync>d__11")]
public sealed virtual ValueTask`1<EnterprisePropertyCategory> GetByIdAsync(Guid id);
    [AsyncStateMachineAttribute("Omnia.Fx.EnterprisePropertyCategories.EnterprisePropertyCategoryService/<CreateAsync>d__12")]
public sealed virtual ValueTask`1<EnterprisePropertyCategory> CreateAsync(EnterprisePropertyCategory category);
    [AsyncStateMachineAttribute("Omnia.Fx.EnterprisePropertyCategories.EnterprisePropertyCategoryService/<UpdateAsync>d__13")]
public sealed virtual ValueTask`1<EnterprisePropertyCategory> UpdateAsync(EnterprisePropertyCategory category);
    [AsyncStateMachineAttribute("Omnia.Fx.EnterprisePropertyCategories.EnterprisePropertyCategoryService/<RemoveAsync>d__14")]
public sealed virtual Task RemoveAsync(Guid id);
    [AsyncStateMachineAttribute("Omnia.Fx.EnterprisePropertyCategories.EnterprisePropertyCategoryService/<Omnia-Fx-EnterprisePropertyCategories-IEnterprisePropertyCategoryServiceWithoutCache-GetAllAsync>d__15")]
private sealed virtual override ValueTask`1<List`1<EnterprisePropertyCategory>> Omnia.Fx.EnterprisePropertyCategories.IEnterprisePropertyCategoryServiceWithoutCache.GetAllAsync();
}
internal class Omnia.Fx.EnterprisePropertyCategories.EnterprisePropertyCategoryServiceCacheHandler : object {
    [CompilerGeneratedAttribute]
private IMessageBus <MessageBus>k__BackingField;
    [CompilerGeneratedAttribute]
private IOmniaCacheWithKeyHelper`1<IOmniaMemoryDependencyCache> <CacheHelper>k__BackingField;
    private IMessageBus MessageBus { get; }
    private IOmniaCacheWithKeyHelper`1<IOmniaMemoryDependencyCache> CacheHelper { get; }
    public EnterprisePropertyCategoryServiceCacheHandler(IMessageBus messageBus, IOmniaMemoryDependencyCache cache);
    [CompilerGeneratedAttribute]
private IMessageBus get_MessageBus();
    [CompilerGeneratedAttribute]
private IOmniaCacheWithKeyHelper`1<IOmniaMemoryDependencyCache> get_CacheHelper();
    [AsyncStateMachineAttribute("Omnia.Fx.EnterprisePropertyCategories.EnterprisePropertyCategoryServiceCacheHandler/<RunAsStartupAsync>d__7")]
public sealed virtual ValueTask RunAsStartupAsync();
    public IOmniaMemoryDependencyCache GetCache();
    private string GetEnterprisePropertyCategoriesDependencyCacheKey();
    public void RemoveEnterprisePropertyCategoriesDependencyCache();
    public ICacheDependencyResult`1<bool> EnsureEnterprisePropertyCategoriesDependencyCache();
    public string GetEnterprisePropertyCategoriesCacheKey();
    [AsyncStateMachineAttribute("Omnia.Fx.EnterprisePropertyCategories.EnterprisePropertyCategoryServiceCacheHandler/<<RunAsStartupAsync>b__7_0>d")]
[CompilerGeneratedAttribute]
private Task <RunAsStartupAsync>b__7_0(EnterprisePropertyCategory category);
    [AsyncStateMachineAttribute("Omnia.Fx.EnterprisePropertyCategories.EnterprisePropertyCategoryServiceCacheHandler/<<RunAsStartupAsync>b__7_1>d")]
[CompilerGeneratedAttribute]
private Task <RunAsStartupAsync>b__7_1(EnterprisePropertyCategory category);
    [AsyncStateMachineAttribute("Omnia.Fx.EnterprisePropertyCategories.EnterprisePropertyCategoryServiceCacheHandler/<<RunAsStartupAsync>b__7_2>d")]
[CompilerGeneratedAttribute]
private Task <RunAsStartupAsync>b__7_2(List`1<Guid> sortedCategoryIds);
    [AsyncStateMachineAttribute("Omnia.Fx.EnterprisePropertyCategories.EnterprisePropertyCategoryServiceCacheHandler/<<RunAsStartupAsync>b__7_3>d")]
[CompilerGeneratedAttribute]
private Task <RunAsStartupAsync>b__7_3(List`1<Guid> category);
}
internal class Omnia.Fx.EnterprisePropertyCategories.EnterprisePropertyCategoryServiceWithoutCache : object {
    [CompilerGeneratedAttribute]
private EnterprisePropertyCategoryServiceHttpClient <EnterprisePropertyCategoryHttpClient>k__BackingField;
    private EnterprisePropertyCategoryServiceHttpClient EnterprisePropertyCategoryHttpClient { get; }
    public EnterprisePropertyCategoryServiceWithoutCache(IConfiguredHttpClient`1<OmniaServiceApi> omniaHttpClient);
    [CompilerGeneratedAttribute]
private EnterprisePropertyCategoryServiceHttpClient get_EnterprisePropertyCategoryHttpClient();
    [AsyncStateMachineAttribute("Omnia.Fx.EnterprisePropertyCategories.EnterprisePropertyCategoryServiceWithoutCache/<GetAllAsync>d__5")]
public sealed virtual ValueTask`1<List`1<EnterprisePropertyCategory>> GetAllAsync();
    [AsyncStateMachineAttribute("Omnia.Fx.EnterprisePropertyCategories.EnterprisePropertyCategoryServiceWithoutCache/<CreateAsync>d__6")]
public sealed virtual ValueTask`1<EnterprisePropertyCategory> CreateAsync(EnterprisePropertyCategory category);
    [AsyncStateMachineAttribute("Omnia.Fx.EnterprisePropertyCategories.EnterprisePropertyCategoryServiceWithoutCache/<GetByIdAsync>d__7")]
public sealed virtual ValueTask`1<EnterprisePropertyCategory> GetByIdAsync(Guid id);
    [AsyncStateMachineAttribute("Omnia.Fx.EnterprisePropertyCategories.EnterprisePropertyCategoryServiceWithoutCache/<RemoveAsync>d__8")]
public sealed virtual Task RemoveAsync(Guid id);
    [AsyncStateMachineAttribute("Omnia.Fx.EnterprisePropertyCategories.EnterprisePropertyCategoryServiceWithoutCache/<UpdateAsync>d__9")]
public sealed virtual ValueTask`1<EnterprisePropertyCategory> UpdateAsync(EnterprisePropertyCategory category);
}
public class Omnia.Fx.EnterprisePropertyCategories.HttpContract : object {
}
public interface Omnia.Fx.EnterprisePropertyCategories.IEnterprisePropertyCategoryService {
    public abstract virtual ValueTask`1<ValueTuple`2<List`1<EnterprisePropertyCategory>, ICacheDependencyResult`1<List`1<EnterprisePropertyCategory>>>> GetAllAsync();
}
public interface Omnia.Fx.EnterprisePropertyCategories.IEnterprisePropertyCategoryServiceWithoutCache {
    public abstract virtual ValueTask`1<List`1<EnterprisePropertyCategory>> GetAllAsync();
    public abstract virtual ValueTask`1<EnterprisePropertyCategory> GetByIdAsync(Guid id);
    public abstract virtual ValueTask`1<EnterprisePropertyCategory> CreateAsync(EnterprisePropertyCategory category);
    public abstract virtual ValueTask`1<EnterprisePropertyCategory> UpdateAsync(EnterprisePropertyCategory category);
    public abstract virtual Task RemoveAsync(Guid id);
}
internal class Omnia.Fx.EnterprisePropertyCategories.Validation.EnterprisePropertyCategoryValidation : object {
    public ValueTask ValidateAsync(EnterprisePropertyCategory category);
}
internal class Omnia.Fx.EnterprisePropertySets.EnterprisePropertySetService : object {
    [CompilerGeneratedAttribute]
private IEnterprisePropertySetServiceWithoutCache <EnterprisePropertySetServiceWithoutCache>k__BackingField;
    [CompilerGeneratedAttribute]
private EnterprisePropertySetServiceCacheHandler <CacheHandler>k__BackingField;
    [CompilerGeneratedAttribute]
private EnterprisePropertySetValidation <EnterprisePropertySetValidation>k__BackingField;
    private IEnterprisePropertySetServiceWithoutCache EnterprisePropertySetServiceWithoutCache { get; }
    private EnterprisePropertySetServiceCacheHandler CacheHandler { get; }
    private EnterprisePropertySetValidation EnterprisePropertySetValidation { get; }
    public EnterprisePropertySetService(IEnterprisePropertySetServiceWithoutCache enterprisePropertySetServiceWithoutCache, EnterprisePropertySetServiceCacheHandler cacheHandler, EnterprisePropertySetValidation enterprisePropertySetValidation);
    [CompilerGeneratedAttribute]
private IEnterprisePropertySetServiceWithoutCache get_EnterprisePropertySetServiceWithoutCache();
    [CompilerGeneratedAttribute]
private EnterprisePropertySetServiceCacheHandler get_CacheHandler();
    [CompilerGeneratedAttribute]
private EnterprisePropertySetValidation get_EnterprisePropertySetValidation();
    [AsyncStateMachineAttribute("Omnia.Fx.EnterprisePropertySets.EnterprisePropertySetService/<GetAllAsync>d__10")]
public sealed virtual ValueTask`1<ValueTuple`2<List`1<EnterprisePropertySet>, ICacheDependencyResult`1<List`1<EnterprisePropertySet>>>> GetAllAsync();
    [AsyncStateMachineAttribute("Omnia.Fx.EnterprisePropertySets.EnterprisePropertySetService/<GetByIdAsync>d__11")]
public sealed virtual ValueTask`1<EnterprisePropertySet> GetByIdAsync(Guid id);
    [AsyncStateMachineAttribute("Omnia.Fx.EnterprisePropertySets.EnterprisePropertySetService/<RemovePropertySetAsync>d__12")]
public sealed virtual Task RemovePropertySetAsync(Guid id);
    [AsyncStateMachineAttribute("Omnia.Fx.EnterprisePropertySets.EnterprisePropertySetService/<CreatePropertySetAsync>d__13")]
public sealed virtual ValueTask`1<EnterprisePropertySet> CreatePropertySetAsync(EnterprisePropertySet propertySet);
    [AsyncStateMachineAttribute("Omnia.Fx.EnterprisePropertySets.EnterprisePropertySetService/<UpdatePropertySetAsync>d__14")]
public sealed virtual ValueTask`1<EnterprisePropertySet> UpdatePropertySetAsync(EnterprisePropertySet propertySet);
    [AsyncStateMachineAttribute("Omnia.Fx.EnterprisePropertySets.EnterprisePropertySetService/<CreateOrUpdatePropertySetAsync>d__15")]
public sealed virtual ValueTask`1<EnterprisePropertySet> CreateOrUpdatePropertySetAsync(EnterprisePropertySet propertySet);
    [AsyncStateMachineAttribute("Omnia.Fx.EnterprisePropertySets.EnterprisePropertySetService/<Omnia-Fx-EnterprisePropertySets-IEnterprisePropertySetServiceWithoutCache-GetAllAsync>d__16")]
private sealed virtual override ValueTask`1<List`1<EnterprisePropertySet>> Omnia.Fx.EnterprisePropertySets.IEnterprisePropertySetServiceWithoutCache.GetAllAsync();
    [AsyncStateMachineAttribute("Omnia.Fx.EnterprisePropertySets.EnterprisePropertySetService/<TerminatePropertySetAsync>d__17")]
public sealed virtual Task TerminatePropertySetAsync(Guid id);
    [AsyncStateMachineAttribute("Omnia.Fx.EnterprisePropertySets.EnterprisePropertySetService/<RestorePropertySetAsync>d__18")]
public sealed virtual ValueTask`1<EnterprisePropertySet> RestorePropertySetAsync(Guid id);
}
internal class Omnia.Fx.EnterprisePropertySets.EnterprisePropertySetServiceCacheHandler : object {
    [CompilerGeneratedAttribute]
private IMessageBus <MessageBus>k__BackingField;
    [CompilerGeneratedAttribute]
private IOmniaCacheWithKeyHelper`1<IOmniaMemoryDependencyCache> <CacheHelper>k__BackingField;
    private IMessageBus MessageBus { get; }
    private IOmniaCacheWithKeyHelper`1<IOmniaMemoryDependencyCache> CacheHelper { get; }
    public EnterprisePropertySetServiceCacheHandler(IMessageBus messageBus, IOmniaMemoryDependencyCache cache);
    [CompilerGeneratedAttribute]
private IMessageBus get_MessageBus();
    [CompilerGeneratedAttribute]
private IOmniaCacheWithKeyHelper`1<IOmniaMemoryDependencyCache> get_CacheHelper();
    [AsyncStateMachineAttribute("Omnia.Fx.EnterprisePropertySets.EnterprisePropertySetServiceCacheHandler/<RunAsStartupAsync>d__7")]
public sealed virtual ValueTask RunAsStartupAsync();
    public IOmniaMemoryDependencyCache GetCache();
    private string GetEnterprisePropertySetsDependencyCacheKey();
    public void RemoveEnterprisePropertySetsDependencyCache();
    public ICacheDependencyResult`1<bool> EnsureEnterprisePropertySetsDependencyCache();
    public string GetEnterprisePropertySetsCacheKey();
    [AsyncStateMachineAttribute("Omnia.Fx.EnterprisePropertySets.EnterprisePropertySetServiceCacheHandler/<<RunAsStartupAsync>b__7_0>d")]
[CompilerGeneratedAttribute]
private Task <RunAsStartupAsync>b__7_0(EnterprisePropertySet enterpriseProperty);
    [AsyncStateMachineAttribute("Omnia.Fx.EnterprisePropertySets.EnterprisePropertySetServiceCacheHandler/<<RunAsStartupAsync>b__7_1>d")]
[CompilerGeneratedAttribute]
private Task <RunAsStartupAsync>b__7_1(EnterprisePropertySet enterpriseProperty);
    [AsyncStateMachineAttribute("Omnia.Fx.EnterprisePropertySets.EnterprisePropertySetServiceCacheHandler/<<RunAsStartupAsync>b__7_2>d")]
[CompilerGeneratedAttribute]
private Task <RunAsStartupAsync>b__7_2(EnterprisePropertySet enterpriseProperty);
    [AsyncStateMachineAttribute("Omnia.Fx.EnterprisePropertySets.EnterprisePropertySetServiceCacheHandler/<<RunAsStartupAsync>b__7_3>d")]
[CompilerGeneratedAttribute]
private Task <RunAsStartupAsync>b__7_3(EnterprisePropertySet enterpriseProperty);
}
internal class Omnia.Fx.EnterprisePropertySets.EnterprisePropertySetServiceWithoutCache : object {
    [CompilerGeneratedAttribute]
private EnterprisePropertySetServiceHttpClient <EnterprisePropertyHttpClient>k__BackingField;
    private EnterprisePropertySetServiceHttpClient EnterprisePropertyHttpClient { get; }
    public EnterprisePropertySetServiceWithoutCache(IConfiguredHttpClient`1<OmniaServiceApi> omniaHttpClient);
    [CompilerGeneratedAttribute]
private EnterprisePropertySetServiceHttpClient get_EnterprisePropertyHttpClient();
    [AsyncStateMachineAttribute("Omnia.Fx.EnterprisePropertySets.EnterprisePropertySetServiceWithoutCache/<CreatePropertySetAsync>d__5")]
public sealed virtual ValueTask`1<EnterprisePropertySet> CreatePropertySetAsync(EnterprisePropertySet property);
    [AsyncStateMachineAttribute("Omnia.Fx.EnterprisePropertySets.EnterprisePropertySetServiceWithoutCache/<GetAllAsync>d__6")]
public sealed virtual ValueTask`1<List`1<EnterprisePropertySet>> GetAllAsync();
    [AsyncStateMachineAttribute("Omnia.Fx.EnterprisePropertySets.EnterprisePropertySetServiceWithoutCache/<GetByIdAsync>d__7")]
public sealed virtual ValueTask`1<EnterprisePropertySet> GetByIdAsync(Guid id);
    [AsyncStateMachineAttribute("Omnia.Fx.EnterprisePropertySets.EnterprisePropertySetServiceWithoutCache/<RemovePropertySetAsync>d__8")]
public sealed virtual Task RemovePropertySetAsync(Guid id);
    [AsyncStateMachineAttribute("Omnia.Fx.EnterprisePropertySets.EnterprisePropertySetServiceWithoutCache/<UpdatePropertySetAsync>d__9")]
public sealed virtual ValueTask`1<EnterprisePropertySet> UpdatePropertySetAsync(EnterprisePropertySet property);
    [AsyncStateMachineAttribute("Omnia.Fx.EnterprisePropertySets.EnterprisePropertySetServiceWithoutCache/<CreateOrUpdatePropertySetAsync>d__10")]
public sealed virtual ValueTask`1<EnterprisePropertySet> CreateOrUpdatePropertySetAsync(EnterprisePropertySet property);
    [AsyncStateMachineAttribute("Omnia.Fx.EnterprisePropertySets.EnterprisePropertySetServiceWithoutCache/<TerminatePropertySetAsync>d__11")]
public sealed virtual Task TerminatePropertySetAsync(Guid id);
    [AsyncStateMachineAttribute("Omnia.Fx.EnterprisePropertySets.EnterprisePropertySetServiceWithoutCache/<RestorePropertySetAsync>d__12")]
public sealed virtual ValueTask`1<EnterprisePropertySet> RestorePropertySetAsync(Guid id);
}
public class Omnia.Fx.EnterprisePropertySets.HttpContract : object {
}
public interface Omnia.Fx.EnterprisePropertySets.IEnterprisePropertySetService {
    public abstract virtual ValueTask`1<ValueTuple`2<List`1<EnterprisePropertySet>, ICacheDependencyResult`1<List`1<EnterprisePropertySet>>>> GetAllAsync();
}
public interface Omnia.Fx.EnterprisePropertySets.IEnterprisePropertySetServiceWithoutCache {
    public abstract virtual ValueTask`1<List`1<EnterprisePropertySet>> GetAllAsync();
    public abstract virtual ValueTask`1<EnterprisePropertySet> GetByIdAsync(Guid id);
    public abstract virtual ValueTask`1<EnterprisePropertySet> CreatePropertySetAsync(EnterprisePropertySet propertySet);
    public abstract virtual ValueTask`1<EnterprisePropertySet> UpdatePropertySetAsync(EnterprisePropertySet propertySet);
    public abstract virtual ValueTask`1<EnterprisePropertySet> CreateOrUpdatePropertySetAsync(EnterprisePropertySet propertySet);
    public abstract virtual Task RemovePropertySetAsync(Guid id);
    public abstract virtual Task TerminatePropertySetAsync(Guid id);
    public abstract virtual ValueTask`1<EnterprisePropertySet> RestorePropertySetAsync(Guid id);
}
internal class Omnia.Fx.EnterprisePropertySets.Validation.EnterprisePropertySetValidation : object {
    [CompilerGeneratedAttribute]
private IEnterprisePropertyService <EnterprisePropertyService>k__BackingField;
    private IEnterprisePropertyService EnterprisePropertyService { get; }
    public EnterprisePropertySetValidation(IEnterprisePropertyService enterprisePropertyService);
    [CompilerGeneratedAttribute]
private IEnterprisePropertyService get_EnterprisePropertyService();
    [AsyncStateMachineAttribute("Omnia.Fx.EnterprisePropertySets.Validation.EnterprisePropertySetValidation/<ValidateAsync>d__4")]
public ValueTask ValidateAsync(EnterprisePropertySet set);
}
internal class Omnia.Fx.EnterprisePropertySets.Validation.SetItemValidation : object {
    internal static void Validate(EnterprisePropertySetSettings setSettings, EnterprisePropertyTaxonomyItemSettings taxonomyItem, List`1<EnterprisePropertyDefinition> definitions);
    private static Guid GetTermSetId(List`1<EnterprisePropertyDefinition> definitions, Guid enterprisePropertyDefinitionId);
    private static bool CheckCircular(EnterprisePropertyTaxonomyItemSettings item, IList`1<EnterprisePropertyItemSettings> items, List`1<Guid> existingIds);
}
[ExtensionAttribute]
public static class Omnia.Fx.Extensions.AccessTokenInfoExtensions : object {
    [ExtensionAttribute]
public static AccessTokenInfo GetAccessTokenForResource(IList`1<AccessTokenInfo> accessTokens, string resourceUrl);
}
public class Omnia.Fx.Extensions.Helpers.ExtensionInstanceResourceHelper : object {
    private static Regex Regex;
    private static ExtensionInstanceResourceHelper();
    public static string GenerateResource(Guid extensionId);
    public static bool TryParseExtensionId(string resource, Guid& extensionId);
}
public class Omnia.Fx.Extensions.Security.ExtensionInstanceResourceEvaluator : BaseResourceEvaluator {
    private IOmniaExtensions _omniaExtensions;
    public ExtensionInstanceResourceEvaluator(IScopedContextResolver scopedContextResolver, IOmniaExtensions omniaExtensions);
    [AsyncStateMachineAttribute("Omnia.Fx.Extensions.Security.ExtensionInstanceResourceEvaluator/<GetRoleResourceAsync>d__2")]
public virtual ValueTask`1<string> GetRoleResourceAsync();
    protected virtual Dictionary`2<string, ServiceParamTypes> GetParamInfo();
    [AsyncStateMachineAttribute("Omnia.Fx.Extensions.Security.ExtensionInstanceResourceEvaluator/<GetRoleResourceWithContextAsync>d__4")]
protected virtual ValueTask`1<string> GetRoleResourceWithContextAsync(Dictionary`2<string, string> context);
    [AsyncStateMachineAttribute("Omnia.Fx.Extensions.Security.ExtensionInstanceResourceEvaluator/<GetConnectedAppInstanceIdAsync>d__5")]
public virtual ValueTask`1<Nullable`1<Guid>> GetConnectedAppInstanceIdAsync();
    [AsyncStateMachineAttribute("Omnia.Fx.Extensions.Security.ExtensionInstanceResourceEvaluator/<GetConnectedAppInstanceIdWithContextAsync>d__6")]
protected virtual ValueTask`1<Nullable`1<Guid>> GetConnectedAppInstanceIdWithContextAsync(Dictionary`2<string, string> context);
}
public interface Omnia.Fx.Extensions.Security.IExtensionInstanceResourceEvaluator {
    public static string FullName;
    private static IExtensionInstanceResourceEvaluator();
}
internal class Omnia.Fx.Features.FeatureService : object {
    [CompilerGeneratedAttribute]
private ILogger`1<FeatureService> <Logger>k__BackingField;
    [CompilerGeneratedAttribute]
private IConfiguredHttpClient`1<OmniaServiceApi> <OmniaService>k__BackingField;
    private ILogger`1<FeatureService> Logger { get; }
    private IConfiguredHttpClient`1<OmniaServiceApi> OmniaService { get; }
    public FeatureService(ILogger`1<FeatureService> logger, IConfiguredHttpClient`1<OmniaServiceApi> omniaService);
    [CompilerGeneratedAttribute]
private ILogger`1<FeatureService> get_Logger();
    [CompilerGeneratedAttribute]
private IConfiguredHttpClient`1<OmniaServiceApi> get_OmniaService();
    [AsyncStateMachineAttribute("Omnia.Fx.Features.FeatureService/<GetFeatureInstanceAsync>d__7")]
public sealed virtual ValueTask`1<FeatureInstance> GetFeatureInstanceAsync(Guid featureId, IDictionary`2<string, string> contextParams);
    [AsyncStateMachineAttribute("Omnia.Fx.Features.FeatureService/<GetFeatureAsync>d__8")]
public sealed virtual ValueTask`1<Feature> GetFeatureAsync(Guid featureId);
    [AsyncStateMachineAttribute("Omnia.Fx.Features.FeatureService/<EnsureFeatureActivatedAsync>d__9`1")]
public sealed virtual ValueTask`1<FeatureInstance> EnsureFeatureActivatedAsync(Guid featureId, T properties, Topic`2<FeatureInstance, UserMetadata> onCompletedTopic, IDictionary`2<string, string> contextParams);
    [AsyncStateMachineAttribute("Omnia.Fx.Features.FeatureService/<EnsureFeatureActivatedWithUserContextAsync>d__10`1")]
public sealed virtual ValueTask`1<FeatureInstance> EnsureFeatureActivatedWithUserContextAsync(Guid featureId, T properties, Topic`2<FeatureInstance, UserMetadata> onCompletedTopic, IDictionary`2<string, string> contextParams);
    [AsyncStateMachineAttribute("Omnia.Fx.Features.FeatureService/<ActivateFeatureAsync>d__11`1")]
public sealed virtual ValueTask`1<FeatureInstance> ActivateFeatureAsync(Guid featureId, T properties, Topic`2<FeatureInstance, UserMetadata> onCompletedTopic, IDictionary`2<string, string> contextParams);
    [AsyncStateMachineAttribute("Omnia.Fx.Features.FeatureService/<ActivateFeatureWithUserContextAsync>d__12`1")]
public sealed virtual ValueTask`1<FeatureInstance> ActivateFeatureWithUserContextAsync(Guid featureId, T properties, Topic`2<FeatureInstance, UserMetadata> onCompletedTopic, IDictionary`2<string, string> contextParams);
    [AsyncStateMachineAttribute("Omnia.Fx.Features.FeatureService/<ActivateFeatureAsync>d__13`1")]
private ValueTask`1<FeatureInstance> ActivateFeatureAsync(IConfiguredHttpClient`1<OmniaServiceApi> omniaService, Guid featureId, T properties, Topic`2<FeatureInstance, UserMetadata> onCompletedTopic, IDictionary`2<string, string> contextParams);
    [AsyncStateMachineAttribute("Omnia.Fx.Features.FeatureService/<UpgradeFeatureAsync>d__14`1")]
public sealed virtual ValueTask`1<FeatureInstance> UpgradeFeatureAsync(Guid featureId, T properties, Topic`2<FeatureInstance, UserMetadata> onCompletedTopic, IDictionary`2<string, string> contextParams);
    [AsyncStateMachineAttribute("Omnia.Fx.Features.FeatureService/<UpgradeFeatureWithUserContextAsync>d__15`1")]
public sealed virtual ValueTask`1<FeatureInstance> UpgradeFeatureWithUserContextAsync(Guid featureId, T properties, Topic`2<FeatureInstance, UserMetadata> onCompletedTopic, IDictionary`2<string, string> contextParams);
    [AsyncStateMachineAttribute("Omnia.Fx.Features.FeatureService/<UpgradeFeatureAsync>d__16`1")]
public ValueTask`1<FeatureInstance> UpgradeFeatureAsync(IConfiguredHttpClient`1<OmniaServiceApi> omniaService, Guid featureId, T properties, Topic`2<FeatureInstance, UserMetadata> onCompletedTopic, IDictionary`2<string, string> contextParams);
    [AsyncStateMachineAttribute("Omnia.Fx.Features.FeatureService/<DeactivateFeatureAsync>d__17")]
public sealed virtual ValueTask`1<FeatureInstance> DeactivateFeatureAsync(Guid featureId, Topic`2<FeatureInstance, UserMetadata> onCompletedTopic, IDictionary`2<string, string> contextParams);
    private void AppendContextParams(NameValueCollection parameters, IDictionary`2<string, string> contextParams);
    [AsyncStateMachineAttribute("Omnia.Fx.Features.FeatureService/<GetAllFeatureInstancesByDefinitionIdAsync>d__19")]
public sealed virtual ValueTask`1<IList`1<FeatureInstance>> GetAllFeatureInstancesByDefinitionIdAsync(Guid featureId);
    [AsyncStateMachineAttribute("Omnia.Fx.Features.FeatureService/<DeleteFeatureDefinitionAsync>d__20")]
public sealed virtual ValueTask`1<bool> DeleteFeatureDefinitionAsync(Guid featureDefinitionId);
}
public class Omnia.Fx.Features.Helpers.AppInstanceFeatureTargetHelper : object {
    private static Regex Regex;
    private static AppInstanceFeatureTargetHelper();
    public static string GenerateTarget(Guid appInstanceId);
    public static bool TryParseAppInstanceId(string target, Guid& appInstanceId);
}
public class Omnia.Fx.Features.Helpers.BusinessProfileFeatureTargetHelper : object {
    private static Regex Regex;
    private static BusinessProfileFeatureTargetHelper();
    public static string GenerateTarget(Guid profileId);
    public static bool TryParseBusinessProfileId(string target, Guid& businessProfileId);
}
public interface Omnia.Fx.Features.IFeatureService {
    public abstract virtual ValueTask`1<FeatureInstance> GetFeatureInstanceAsync(Guid featureId, IDictionary`2<string, string> contextParams);
    public abstract virtual ValueTask`1<IList`1<FeatureInstance>> GetAllFeatureInstancesByDefinitionIdAsync(Guid featureId);
    public abstract virtual ValueTask`1<FeatureInstance> EnsureFeatureActivatedAsync(Guid featureId, T properties, Topic`2<FeatureInstance, UserMetadata> onCompletedTopic, IDictionary`2<string, string> contextParams);
    public abstract virtual ValueTask`1<FeatureInstance> EnsureFeatureActivatedWithUserContextAsync(Guid featureId, T properties, Topic`2<FeatureInstance, UserMetadata> onCompletedTopic, IDictionary`2<string, string> contextParams);
    public abstract virtual ValueTask`1<FeatureInstance> ActivateFeatureAsync(Guid featureId, T properties, Topic`2<FeatureInstance, UserMetadata> onCompletedTopic, IDictionary`2<string, string> contextParams);
    public abstract virtual ValueTask`1<FeatureInstance> ActivateFeatureWithUserContextAsync(Guid featureId, T properties, Topic`2<FeatureInstance, UserMetadata> onCompletedTopic, IDictionary`2<string, string> contextParams);
    public abstract virtual ValueTask`1<FeatureInstance> UpgradeFeatureAsync(Guid featureId, T properties, Topic`2<FeatureInstance, UserMetadata> onCompletedTopic, IDictionary`2<string, string> contextParams);
    public abstract virtual ValueTask`1<FeatureInstance> UpgradeFeatureWithUserContextAsync(Guid featureId, T properties, Topic`2<FeatureInstance, UserMetadata> onCompletedTopic, IDictionary`2<string, string> contextParams);
    public abstract virtual ValueTask`1<FeatureInstance> DeactivateFeatureAsync(Guid featureId, Topic`2<FeatureInstance, UserMetadata> onCompletedTopic, IDictionary`2<string, string> contextParams);
    public abstract virtual ValueTask`1<Feature> GetFeatureAsync(Guid featureId);
    public abstract virtual ValueTask`1<bool> DeleteFeatureDefinitionAsync(Guid featureDefinitionId);
}
public class Omnia.Fx.FileStorage.HttpContract : object {
}
internal class Omnia.Fx.HostConfiguration.ConfiguredImplementations.AuthenticationConfiguration : OmniaHostConfigurationBase {
    public AuthenticationConfiguration(IOmniaNetStandardConfiguration config);
    public void AddImplementations(Action`1<IFxAuthenticationRequiredImplementations> requiredImplementations, Action`1<IFxAuthenticationOptionalImplementations> optionalImplementations);
    public sealed virtual IFxAuthenticationRequiredImplementations AddUserTokenProvider(Func`2<IServiceProvider, IOmniaUserTokenProvider> implementationFactory);
    private sealed virtual override IFxAuthenticationRequiredImplementations Omnia.Fx.HostConfiguration.ConfiguredImplementations.IFxAuthenticationRequiredImplementations.AddUserTokenProvider();
    public sealed virtual IFxAuthenticationOptionalImplementations AddAuthService(Func`2<IServiceProvider, IAuthService> implementationFactory);
    private sealed virtual override IFxAuthenticationOptionalImplementations Omnia.Fx.HostConfiguration.ConfiguredImplementations.IFxAuthenticationOptionalImplementations.AddAuthService();
    private IEncryptionUserTokenProvider AddEncryptionUserTokenProvider(IServiceProvider serviceProvider);
}
internal class Omnia.Fx.HostConfiguration.ConfiguredImplementations.AuthorizationConfiguration : OmniaHostConfigurationBase {
    public AuthorizationConfiguration(IOmniaNetStandardConfiguration config);
    public void AddImplementations(Action`1<IFxAuthorizationOptionalImplementations> optionalImplementations);
    public sealed virtual IFxAuthorizationOptionalImplementations AddPermissionStoreChangeHelper(Func`2<IServiceProvider, IPermissionStoreChangedHelper> implementationFactory);
    public sealed virtual IFxAuthorizationOptionalImplementations AddPermissionStoreHelper(Func`2<IServiceProvider, IPermissionStoreHelper> implementationFactory);
    public sealed virtual IFxAuthorizationOptionalImplementations AddRoleResourceResolver(Func`2<IServiceProvider, IRoleResourceResolver> implementationFactory);
    private sealed virtual override IFxAuthorizationOptionalImplementations Omnia.Fx.HostConfiguration.ConfiguredImplementations.IFxAuthorizationOptionalImplementations.AddPermissionStoreChangeHelper();
    private sealed virtual override IFxAuthorizationOptionalImplementations Omnia.Fx.HostConfiguration.ConfiguredImplementations.IFxAuthorizationOptionalImplementations.AddPermissionStoreHelper();
    private sealed virtual override IFxAuthorizationOptionalImplementations Omnia.Fx.HostConfiguration.ConfiguredImplementations.IFxAuthorizationOptionalImplementations.AddRoleResourceResolver();
    public sealed virtual IFxAuthorizationOptionalImplementations AddPermissionResourceStoreHelper(Func`2<IServiceProvider, IPermissionResourceStoreHelper> implementationFactory);
    private sealed virtual override IFxAuthorizationOptionalImplementations Omnia.Fx.HostConfiguration.ConfiguredImplementations.IFxAuthorizationOptionalImplementations.AddPermissionResourceStoreHelper();
}
internal class Omnia.Fx.HostConfiguration.ConfiguredImplementations.BusinessServicesConfiguration : OmniaHostConfigurationBase {
    public BusinessServicesConfiguration(IOmniaNetStandardConfiguration config);
    public void AddImplementations();
    private void AddOwnServices(IServiceCollection services);
    private void AddHttpApis(IServiceCollection services);
    private void AddTargeting(IServiceCollection services);
    private void AddMediaPickerServices(IServiceCollection services);
    private void AddEnterpriseProperties(IServiceCollection services);
    [ObsoleteAttribute]
private void AddSecurityEvaluators(IServiceCollection services);
    [CompilerGeneratedAttribute]
private void <AddImplementations>b__1_0(IServiceCollection services);
}
internal class Omnia.Fx.HostConfiguration.ConfiguredImplementations.CacheConfiguration : OmniaHostConfigurationBase {
    [CompilerGeneratedAttribute]
private bool <UseSynchronizedMemoryCache>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <UseOmniaTargetedSynchronizedMemoryCache>k__BackingField;
    public bool UseSynchronizedMemoryCache { get; public set; }
    public bool UseOmniaTargetedSynchronizedMemoryCache { get; public set; }
    public CacheConfiguration(IOmniaNetStandardConfiguration config);
    [CompilerGeneratedAttribute]
public sealed virtual bool get_UseSynchronizedMemoryCache();
    [CompilerGeneratedAttribute]
public sealed virtual void set_UseSynchronizedMemoryCache(bool value);
    [CompilerGeneratedAttribute]
public sealed virtual bool get_UseOmniaTargetedSynchronizedMemoryCache();
    [CompilerGeneratedAttribute]
public sealed virtual void set_UseOmniaTargetedSynchronizedMemoryCache(bool value);
    public void AddDIServices(Action`1<IFxCacheOptionalOptions> optionalImplementations);
    private void AddOwnServices(IServiceCollection services);
    private void AddLegacySynchronizedMemoryCache(IServiceCollection serviceCollection);
}
internal class Omnia.Fx.HostConfiguration.ConfiguredImplementations.DefaultConfiguration : OmniaHostConfigurationBase {
    public DefaultConfiguration(IOmniaNetStandardConfiguration config);
    public void AddImplementations(Action`1<IFxDefaultRequiredImplementations> requiredImplementations, Action`1<IFxDefaultOptionalImplementations> optionalImplemnetations);
    public sealed virtual IFxDefaultOptionalImplementations AddOmniaContext(Func`2<IServiceProvider, IOmniaContext> implementationFactory);
    public sealed virtual IFxDefaultRequiredImplementations AddOmniaExtensionsImplementation(Func`2<IServiceProvider, IOmniaExtensions> implementationFactory);
    public sealed virtual IFxDefaultRequiredImplementations AddOmniaServicesImplementation(Func`2<IServiceProvider, IOmniaServices> implementationFactory);
    private sealed virtual override IFxDefaultOptionalImplementations Omnia.Fx.HostConfiguration.ConfiguredImplementations.IFxDefaultOptionalImplementations.AddOmniaContext();
    private sealed virtual override IFxDefaultRequiredImplementations Omnia.Fx.HostConfiguration.ConfiguredImplementations.IFxDefaultRequiredImplementations.AddOmniaExtensionsImplementation();
    private sealed virtual override IFxDefaultRequiredImplementations Omnia.Fx.HostConfiguration.ConfiguredImplementations.IFxDefaultRequiredImplementations.AddOmniaServicesImplementation();
    private void AddOwnServices(IServiceCollection services);
}
public interface Omnia.Fx.HostConfiguration.ConfiguredImplementations.IFxAuthenticationOptionalImplementations {
    public abstract virtual IFxAuthenticationOptionalImplementations AddAuthService(Func`2<IServiceProvider, IAuthService> implementationFactory);
    public abstract virtual IFxAuthenticationOptionalImplementations AddAuthService();
}
public interface Omnia.Fx.HostConfiguration.ConfiguredImplementations.IFxAuthenticationRequiredImplementations {
    public abstract virtual IFxAuthenticationRequiredImplementations AddUserTokenProvider(Func`2<IServiceProvider, IOmniaUserTokenProvider> implementationFactory);
    public abstract virtual IFxAuthenticationRequiredImplementations AddUserTokenProvider();
}
public interface Omnia.Fx.HostConfiguration.ConfiguredImplementations.IFxAuthorizationOptionalImplementations {
    public abstract virtual IFxAuthorizationOptionalImplementations AddPermissionStoreHelper(Func`2<IServiceProvider, IPermissionStoreHelper> implementationFactory);
    public abstract virtual IFxAuthorizationOptionalImplementations AddPermissionStoreHelper();
    public abstract virtual IFxAuthorizationOptionalImplementations AddPermissionStoreChangeHelper(Func`2<IServiceProvider, IPermissionStoreChangedHelper> implementationFactory);
    public abstract virtual IFxAuthorizationOptionalImplementations AddPermissionStoreChangeHelper();
    public abstract virtual IFxAuthorizationOptionalImplementations AddPermissionResourceStoreHelper(Func`2<IServiceProvider, IPermissionResourceStoreHelper> implementationFactory);
    public abstract virtual IFxAuthorizationOptionalImplementations AddPermissionResourceStoreHelper();
    public abstract virtual IFxAuthorizationOptionalImplementations AddRoleResourceResolver(Func`2<IServiceProvider, IRoleResourceResolver> implementationFactory);
    public abstract virtual IFxAuthorizationOptionalImplementations AddRoleResourceResolver();
}
public interface Omnia.Fx.HostConfiguration.ConfiguredImplementations.IFxCacheOptionalOptions {
    public bool UseSynchronizedMemoryCache { get; public set; }
    public bool UseOmniaTargetedSynchronizedMemoryCache { get; public set; }
    public abstract virtual bool get_UseSynchronizedMemoryCache();
    public abstract virtual void set_UseSynchronizedMemoryCache(bool value);
    public abstract virtual bool get_UseOmniaTargetedSynchronizedMemoryCache();
    public abstract virtual void set_UseOmniaTargetedSynchronizedMemoryCache(bool value);
}
public interface Omnia.Fx.HostConfiguration.ConfiguredImplementations.IFxDefaultOptionalImplementations {
    public abstract virtual IFxDefaultOptionalImplementations AddOmniaContext(Func`2<IServiceProvider, IOmniaContext> implementationFactory);
    public abstract virtual IFxDefaultOptionalImplementations AddOmniaContext();
}
public interface Omnia.Fx.HostConfiguration.ConfiguredImplementations.IFxDefaultRequiredImplementations {
    public abstract virtual IFxDefaultRequiredImplementations AddOmniaExtensionsImplementation(Func`2<IServiceProvider, IOmniaExtensions> implementationFactory);
    public abstract virtual IFxDefaultRequiredImplementations AddOmniaExtensionsImplementation();
    public abstract virtual IFxDefaultRequiredImplementations AddOmniaServicesImplementation(Func`2<IServiceProvider, IOmniaServices> implementationFactory);
    public abstract virtual IFxDefaultRequiredImplementations AddOmniaServicesImplementation();
}
public interface Omnia.Fx.HostConfiguration.ConfiguredImplementations.IFxLocalizationOptionalImplementations {
    public abstract virtual IFxLocalizationOptionalImplementations AddLocalizationProvider(Func`2<IServiceProvider, ILocalizationProvider> implementationFactory);
    public abstract virtual IFxLocalizationOptionalImplementations AddLocalizationProvider();
}
public interface Omnia.Fx.HostConfiguration.ConfiguredImplementations.IFxServiceBusOptionalImplementations {
    public abstract virtual IFxServiceBusOptionalImplementations AddQueueService(Func`2<IServiceProvider, IQueueService> implementationFactory);
    public abstract virtual IFxServiceBusOptionalImplementations AddQueueService();
}
public interface Omnia.Fx.HostConfiguration.ConfiguredImplementations.IFxServiceBusRequiredImplementations {
    public abstract virtual IFxServiceBusRequiredImplementations AddMessageBus(Func`2<IServiceProvider, IMessageBus> implementationFactory);
    public abstract virtual IFxServiceBusRequiredImplementations AddMessageBus();
    public abstract virtual IFxServiceBusRequiredImplementations AddMessageBusFactory(Func`2<IServiceProvider, IMessageBusFactory> implementationFactory);
    public abstract virtual IFxServiceBusRequiredImplementations AddMessageBusFactory();
    public abstract virtual IFxServiceBusRequiredImplementations AddQueueBus(Func`2<IServiceProvider, IQueueBus> implementationFactory);
    public abstract virtual IFxServiceBusRequiredImplementations AddQueueBus();
}
internal class Omnia.Fx.HostConfiguration.ConfiguredImplementations.LocalizationConfiguration : OmniaHostConfigurationBase {
    public LocalizationConfiguration(IOmniaNetStandardConfiguration config);
    public void AddImplementations(Action`1<IFxLocalizationOptionalImplementations> optionalImplementations);
    public sealed virtual IFxLocalizationOptionalImplementations AddLocalizationProvider(Func`2<IServiceProvider, ILocalizationProvider> implementationFactory);
    private sealed virtual override IFxLocalizationOptionalImplementations Omnia.Fx.HostConfiguration.ConfiguredImplementations.IFxLocalizationOptionalImplementations.AddLocalizationProvider();
}
internal class Omnia.Fx.HostConfiguration.ConfiguredImplementations.ServiceBusConfiguration : OmniaHostConfigurationBase {
    public ServiceBusConfiguration(IOmniaNetStandardConfiguration config);
    public void AddImplementations(Action`1<IFxServiceBusRequiredImplementations> requiredImplementations, Action`1<IFxServiceBusOptionalImplementations> optionalImplementations);
    public sealed virtual IFxServiceBusRequiredImplementations AddMessageBus(Func`2<IServiceProvider, IMessageBus> implementationFactory);
    public sealed virtual IFxServiceBusRequiredImplementations AddMessageBusFactory(Func`2<IServiceProvider, IMessageBusFactory> implementationFactory);
    public sealed virtual IFxServiceBusRequiredImplementations AddQueueBus(Func`2<IServiceProvider, IQueueBus> implementationFactory);
    public sealed virtual IFxServiceBusOptionalImplementations AddQueueService(Func`2<IServiceProvider, IQueueService> implementationFactory);
    private sealed virtual override IFxServiceBusRequiredImplementations Omnia.Fx.HostConfiguration.ConfiguredImplementations.IFxServiceBusRequiredImplementations.AddMessageBus();
    private sealed virtual override IFxServiceBusRequiredImplementations Omnia.Fx.HostConfiguration.ConfiguredImplementations.IFxServiceBusRequiredImplementations.AddMessageBusFactory();
    private sealed virtual override IFxServiceBusRequiredImplementations Omnia.Fx.HostConfiguration.ConfiguredImplementations.IFxServiceBusRequiredImplementations.AddQueueBus();
    private sealed virtual override IFxServiceBusOptionalImplementations Omnia.Fx.HostConfiguration.ConfiguredImplementations.IFxServiceBusOptionalImplementations.AddQueueService();
}
[ExtensionAttribute]
public static class Omnia.Fx.HostConfiguration.Extensions.IOmniaNetStandardConfigurationExtensions : object {
    [ExtensionAttribute]
public static T AddOmniaFx(T omniaNetStandardConfiguration, Action`1<IOmniaFxRequiredImplementations> requiredImplementations, Action`1<IOmniaFxOptionalImplementations> optionalImplementations);
    [ExtensionAttribute]
public static T AddOmniaFxWithEmptyOptions(T omniaNetStandardConfiguration, Action`1<IOmniaFxEmptyConfigurationOptions> configureOptions);
}
public interface Omnia.Fx.HostConfiguration.IIOmniaConfiguredImplementations {
    public abstract virtual void AddService(Action`1<IServiceCollection> configureOptions);
}
public interface Omnia.Fx.HostConfiguration.IOmniaFxEmptyConfigurationOptions {
    public abstract virtual IOmniaFxEmptyConfigurationOptions AddFxAuthorization(Action`1<IFxAuthorizationOptionalImplementations> optionalImplementations);
    public abstract virtual IOmniaFxEmptyConfigurationOptions AddFxLocalization(Action`1<IFxLocalizationOptionalImplementations> optionalImplementations);
    public abstract virtual IOmniaFxEmptyConfigurationOptions AddFxBusinessServices();
    public abstract virtual IOmniaFxEmptyConfigurationOptions AddFxCaches(Action`1<IFxCacheOptionalOptions> optionalImplementations);
}
public interface Omnia.Fx.HostConfiguration.IOmniaFxEmptyOptionsProvider`1 {
    public abstract virtual TReturn AddOmniaFx(Action`1<IOmniaFxRequiredImplementations> requiredImplementations, Action`1<IOmniaFxOptionalImplementations> optionalImplementations);
    public abstract virtual TReturn AddOmniaFxWithEmptyOptions(Action`1<IOmniaFxEmptyConfigurationOptions> configureOptions);
}
public interface Omnia.Fx.HostConfiguration.IOmniaFxOptionalImplementations {
    public abstract virtual IOmniaFxOptionalImplementations ConfigureFxAuthorization(Action`1<IFxAuthorizationOptionalImplementations> optionalImplementations);
    public abstract virtual IOmniaFxOptionalImplementations ConfigureFxLocalization(Action`1<IFxLocalizationOptionalImplementations> optionalImplementations);
    public abstract virtual IOmniaFxOptionalImplementations ConfigureFxCaches(Action`1<IFxCacheOptionalOptions> optionalImplementations);
}
public interface Omnia.Fx.HostConfiguration.IOmniaFxOptionalOptionsProvider`1 {
    public abstract virtual TReturn ConfigureOmniaFx(Action`1<IOmniaFxOptionalImplementations> optionalImplementations);
}
public interface Omnia.Fx.HostConfiguration.IOmniaFxRequiredImplementations {
}
public interface Omnia.Fx.HostConfiguration.IOmniaFxRequiredImplementationsBase`1 {
    public abstract virtual TReturn AddFxDefault(Action`1<IFxDefaultRequiredImplementations> requiredImplementations, Action`1<IFxDefaultOptionalImplementations> optionalImplemnetations);
    public abstract virtual TReturn AddFxAuthentication(Action`1<IFxAuthenticationRequiredImplementations> requiredImplementations, Action`1<IFxAuthenticationOptionalImplementations> optionalImplementations);
    public abstract virtual TReturn AddFxServiceBus(Action`1<IFxServiceBusRequiredImplementations> requiredImplementations, Action`1<IFxServiceBusOptionalImplementations> optionalImplementations);
}
public interface Omnia.Fx.HostConfiguration.IOmniaNetStandardConfiguration {
}
[ExtensionAttribute]
public static class Omnia.Fx.HostConfiguration.IOmniaNetStandardConfigurationMethods : object {
    [ExtensionAttribute]
public static T RunOneTimeOnly(T omniaNetStandardConfiguration, Action action);
    [ExtensionAttribute]
public static T ConfigureServices(T omniaNetStandardConfiguration, Action`1<IServiceCollection> configureServicesAction);
    [ExtensionAttribute]
public static T Configuration(T omniaNetStandardConfiguration, Action`1<IConfigurationBuilder> configureAction);
    [ExtensionAttribute]
public static T OnFinalConfigurationBuilt(T omniaNetStandardConfiguration, Action`1<IConfigurationRoot> finalConfigurationRootAction);
    [ExtensionAttribute]
public static ISingletonAdder`1<T> AddStartupSingleton(T omniaNetStandardConfiguration);
}
public interface Omnia.Fx.HostConfiguration.ISingletonAdder`1 {
    public abstract virtual T For(Func`2<IServiceProvider, TService> implementationFactory);
}
public interface Omnia.Fx.HostConfiguration.IStartupOperation {
    public abstract virtual ValueTask RunAsStartupAsync();
}
public interface Omnia.Fx.HostConfiguration.IStartupSingletons {
    public abstract virtual ValueTask InstantiateAllAsync(IServiceProvider serviceProvider);
}
internal class Omnia.Fx.HostConfiguration.OmniaFxConfiguration : object {
    [CompilerGeneratedAttribute]
private List`1<Action> <DefaultOptions>k__BackingField;
    [CompilerGeneratedAttribute]
private List`1<Action> <OptionalOptions>k__BackingField;
    [CompilerGeneratedAttribute]
private IOmniaNetStandardConfiguration <Config>k__BackingField;
    private List`1<Action> DefaultOptions { get; }
    private List`1<Action> OptionalOptions { get; }
    private IOmniaNetStandardConfiguration Config { get; }
    public OmniaFxConfiguration(IOmniaNetStandardConfiguration config);
    [CompilerGeneratedAttribute]
private List`1<Action> get_DefaultOptions();
    [CompilerGeneratedAttribute]
private List`1<Action> get_OptionalOptions();
    [CompilerGeneratedAttribute]
private IOmniaNetStandardConfiguration get_Config();
    public sealed virtual IOmniaFxOptionalImplementations ConfigureFxAuthorization(Action`1<IFxAuthorizationOptionalImplementations> optionalImplementations);
    public sealed virtual IOmniaFxOptionalImplementations ConfigureFxLocalization(Action`1<IFxLocalizationOptionalImplementations> optionalImplementations);
    public sealed virtual IOmniaFxOptionalImplementations ConfigureFxCaches(Action`1<IFxCacheOptionalOptions> optionalOptions);
    public sealed virtual IOmniaFxEmptyConfigurationOptions AddFxAuthorization(Action`1<IFxAuthorizationOptionalImplementations> optionalImplementations);
    public sealed virtual IOmniaFxRequiredImplementations AddFxAuthentication(Action`1<IFxAuthenticationRequiredImplementations> requiredImplementations, Action`1<IFxAuthenticationOptionalImplementations> optionalImplementations);
    public sealed virtual IOmniaFxEmptyConfigurationOptions AddFxLocalization(Action`1<IFxLocalizationOptionalImplementations> optionalImplementations);
    public sealed virtual IOmniaFxEmptyConfigurationOptions AddFxCaches(Action`1<IFxCacheOptionalOptions> optionalImplementations);
    public sealed virtual IOmniaFxRequiredImplementations AddFxDefault(Action`1<IFxDefaultRequiredImplementations> requiredImplementations, Action`1<IFxDefaultOptionalImplementations> optionalImplemnetations);
    public sealed virtual IOmniaFxRequiredImplementations AddFxServiceBus(Action`1<IFxServiceBusRequiredImplementations> requiredImplementations, Action`1<IFxServiceBusOptionalImplementations> optionalImplementations);
    public sealed virtual IOmniaFxEmptyConfigurationOptions AddFxBusinessServices();
    private sealed virtual override IOmniaFxEmptyConfigurationOptions Omnia.Fx.HostConfiguration.IOmniaFxRequiredImplementationsBase<Omnia.Fx.HostConfiguration.IOmniaFxEmptyConfigurationOptions>.AddFxDefault(Action`1<IFxDefaultRequiredImplementations> requiredImplementations, Action`1<IFxDefaultOptionalImplementations> optionalImplemnetations);
    private sealed virtual override IOmniaFxEmptyConfigurationOptions Omnia.Fx.HostConfiguration.IOmniaFxRequiredImplementationsBase<Omnia.Fx.HostConfiguration.IOmniaFxEmptyConfigurationOptions>.AddFxAuthentication(Action`1<IFxAuthenticationRequiredImplementations> requiredImplementations, Action`1<IFxAuthenticationOptionalImplementations> optionalImplementations);
    private sealed virtual override IOmniaFxEmptyConfigurationOptions Omnia.Fx.HostConfiguration.IOmniaFxRequiredImplementationsBase<Omnia.Fx.HostConfiguration.IOmniaFxEmptyConfigurationOptions>.AddFxServiceBus(Action`1<IFxServiceBusRequiredImplementations> requiredImplementations, Action`1<IFxServiceBusOptionalImplementations> optionalImplementations);
    internal void AddDefaultConfigurations();
    internal IOmniaNetStandardConfiguration DoConfigurations();
    [CompilerGeneratedAttribute]
private void <AddFxBusinessServices>b__19_0();
}
public abstract class Omnia.Fx.HostConfiguration.OmniaHostConfigurationBase : object {
    [CompilerGeneratedAttribute]
private List`1<string> <ConfiguredActions>k__BackingField;
    [CompilerGeneratedAttribute]
private IOmniaNetStandardConfiguration <Config>k__BackingField;
    [CompilerGeneratedAttribute]
private List`1<Action`1<IServiceCollection>> <Implementations>k__BackingField;
    protected List`1<string> ConfiguredActions { get; }
    protected IOmniaNetStandardConfiguration Config { get; }
    protected List`1<Action`1<IServiceCollection>> Implementations { get; }
    public OmniaHostConfigurationBase(IOmniaNetStandardConfiguration config);
    [CompilerGeneratedAttribute]
protected List`1<string> get_ConfiguredActions();
    [CompilerGeneratedAttribute]
protected IOmniaNetStandardConfiguration get_Config();
    [CompilerGeneratedAttribute]
protected List`1<Action`1<IServiceCollection>> get_Implementations();
    protected virtual void AddImplementationsInternal(Action`1<IServiceCollection> configureOptions);
    public virtual void AddService(Action`1<IServiceCollection> configureAction);
    protected virtual void RunOnce(string key, Action action);
    protected void AddSingletonOnce(string key, Func`2<IServiceProvider, TInterface> implementationFactory);
    protected void AddSingletonOnce(string key);
    protected void AddSingleton(Func`2<IServiceProvider, TInterface> implementationFactory);
    protected void AddSingleton();
    protected void AddScopedOnce(string key, Func`2<IServiceProvider, TInterface> implementationFactory);
    protected void AddScopedOnce(string key);
    protected void AddScoped(Func`2<IServiceProvider, TInterface> implementationFactory);
    protected void AddScoped();
    protected void AddTransientOnce(string key, Func`2<IServiceProvider, TInterface> implementationFactory);
    protected void AddTransientOnce(string key);
    protected void AddTransient(Func`2<IServiceProvider, TInterface> implementationFactory);
    protected void AddTransient();
    [CompilerGeneratedAttribute]
private void <AddSingletonOnce>b__14_0();
    [CompilerGeneratedAttribute]
private void <AddScopedOnce>b__18_0();
    [CompilerGeneratedAttribute]
private void <AddTransientOnce>b__22_0();
}
public class Omnia.Fx.HostConfiguration.OmniaNetStandardConfiguration : object {
    [CompilerGeneratedAttribute]
private static OmniaNetStandardConfiguration <_Instance>k__BackingField;
    [CompilerGeneratedAttribute]
private List`1<Action`1<IConfigurationBuilder>> <ConfigureActions>k__BackingField;
    [CompilerGeneratedAttribute]
private List`1<Action`1<IConfigurationRoot>> <ConfigureBuiltActions>k__BackingField;
    [CompilerGeneratedAttribute]
private List`1<Action`1<IServiceCollection>> <ConfigureServiceActions>k__BackingField;
    [CompilerGeneratedAttribute]
private List`1<Action> <ExecutedOnetimeActions>k__BackingField;
    [CompilerGeneratedAttribute]
private IServiceCollection <ServiceCollection>k__BackingField;
    [CompilerGeneratedAttribute]
private IConfigurationBuilder <ConfigurationBuilder>k__BackingField;
    [CompilerGeneratedAttribute]
private IConfigurationRoot <BuiltConfiguration>k__BackingField;
    private static OmniaNetStandardConfiguration _Instance { get; private set; }
    public static IOmniaNetStandardConfiguration Instance { get; }
    private List`1<Action`1<IConfigurationBuilder>> ConfigureActions { get; private set; }
    private List`1<Action`1<IConfigurationRoot>> ConfigureBuiltActions { get; private set; }
    private List`1<Action`1<IServiceCollection>> ConfigureServiceActions { get; private set; }
    private List`1<Action> ExecutedOnetimeActions { get; private set; }
    private IServiceCollection ServiceCollection { get; private set; }
    private IConfigurationBuilder ConfigurationBuilder { get; private set; }
    private IConfigurationRoot BuiltConfiguration { get; private set; }
    private static OmniaNetStandardConfiguration();
    [CompilerGeneratedAttribute]
private static OmniaNetStandardConfiguration get__Instance();
    [CompilerGeneratedAttribute]
private static void set__Instance(OmniaNetStandardConfiguration value);
    public static IOmniaNetStandardConfiguration get_Instance();
    [CompilerGeneratedAttribute]
private List`1<Action`1<IConfigurationBuilder>> get_ConfigureActions();
    [CompilerGeneratedAttribute]
private void set_ConfigureActions(List`1<Action`1<IConfigurationBuilder>> value);
    [CompilerGeneratedAttribute]
private List`1<Action`1<IConfigurationRoot>> get_ConfigureBuiltActions();
    [CompilerGeneratedAttribute]
private void set_ConfigureBuiltActions(List`1<Action`1<IConfigurationRoot>> value);
    [CompilerGeneratedAttribute]
private List`1<Action`1<IServiceCollection>> get_ConfigureServiceActions();
    [CompilerGeneratedAttribute]
private void set_ConfigureServiceActions(List`1<Action`1<IServiceCollection>> value);
    [CompilerGeneratedAttribute]
private List`1<Action> get_ExecutedOnetimeActions();
    [CompilerGeneratedAttribute]
private void set_ExecutedOnetimeActions(List`1<Action> value);
    [CompilerGeneratedAttribute]
private IServiceCollection get_ServiceCollection();
    [CompilerGeneratedAttribute]
private void set_ServiceCollection(IServiceCollection value);
    [CompilerGeneratedAttribute]
private IConfigurationBuilder get_ConfigurationBuilder();
    [CompilerGeneratedAttribute]
private void set_ConfigurationBuilder(IConfigurationBuilder value);
    [CompilerGeneratedAttribute]
private IConfigurationRoot get_BuiltConfiguration();
    [CompilerGeneratedAttribute]
private void set_BuiltConfiguration(IConfigurationRoot value);
    internal void AddStartupSingleton(Func`2<IServiceProvider, TService> implementationFactory);
    internal void RunOneTime(Action runOneTime);
    internal void Configuration(Action`1<IConfigurationBuilder> configureAction);
    internal void ConfigureServices(Action`1<IServiceCollection> configureServicesAction);
    internal void OnFinalConfigurationBuilt(Action`1<IConfigurationRoot> finalConfigurationRootAction);
    internal void InitializeBuiltConfiguration(IConfigurationRoot builtRoot);
    internal void InitializeServices(IServiceCollection serviceCollection);
    internal void InitializeConfiguration(IConfigurationBuilder configurationBuilder);
}
internal class Omnia.Fx.HostConfiguration.StartupSingletons : object {
    [CompilerGeneratedAttribute]
private Dictionary`2<Type, IStartable> <_StartupSingletons>k__BackingField;
    [CompilerGeneratedAttribute]
private static StartupSingletons <_Instance>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsInstantiated>k__BackingField;
    private Dictionary`2<Type, IStartable> _StartupSingletons { get; private set; }
    private static StartupSingletons _Instance { get; private set; }
    private bool IsInstantiated { get; private set; }
    public static StartupSingletons Instance { get; }
    [CompilerGeneratedAttribute]
private Dictionary`2<Type, IStartable> get__StartupSingletons();
    [CompilerGeneratedAttribute]
private void set__StartupSingletons(Dictionary`2<Type, IStartable> value);
    [CompilerGeneratedAttribute]
private static StartupSingletons get__Instance();
    [CompilerGeneratedAttribute]
private static void set__Instance(StartupSingletons value);
    [CompilerGeneratedAttribute]
private bool get_IsInstantiated();
    [CompilerGeneratedAttribute]
private void set_IsInstantiated(bool value);
    public static StartupSingletons get_Instance();
    public void AddStartupSingleton(IOmniaNetStandardConfiguration config, Func`2<IServiceProvider, TService> implementationFactory);
    [AsyncStateMachineAttribute("Omnia.Fx.HostConfiguration.StartupSingletons/<InstantiateAllAsync>d__18")]
public sealed virtual ValueTask InstantiateAllAsync(IServiceProvider serviceProvider);
}
[ExtensionAttribute]
public static class Omnia.Fx.Http.Common.IConfiguredHttpClientExtension : object {
    [ExtensionAttribute]
public static MyIServiceHttpClientConfigurationOptions GetServiceImplemenationInterface(IConfiguredHttpClient httpClient);
}
public interface Omnia.Fx.Http.Common.IServiceHttpClient {
    public string UniqueServiceName { get; }
    public abstract virtual string get_UniqueServiceName();
    public abstract virtual ValueTask`1<HttpClient> HttpClientAsync();
    public abstract virtual ValueTask`1<HttpRequestConfiguration> HttpRequestConfigurationAsync();
}
public interface Omnia.Fx.Http.Common.IServiceHttpClientConfigurationOptions {
    public abstract virtual IServiceImplHttpConfigOptions GetServiceImplemenationInterface();
}
public class Omnia.Fx.Http.Common.RequestConfiguration.HttpRequestConfiguration : object {
    [CompilerGeneratedAttribute]
private HttpRequestConfigurationHeaders <Headers>k__BackingField;
    [CompilerGeneratedAttribute]
private HttpRequestConfigurationQueryParameters <QueryParameters>k__BackingField;
    [CompilerGeneratedAttribute]
private HttpRequestConfigurationCookies <Cookies>k__BackingField;
    public HttpRequestConfigurationHeaders Headers { get; internal set; }
    public HttpRequestConfigurationQueryParameters QueryParameters { get; }
    public HttpRequestConfigurationCookies Cookies { get; }
    [CompilerGeneratedAttribute]
public HttpRequestConfigurationHeaders get_Headers();
    [CompilerGeneratedAttribute]
internal void set_Headers(HttpRequestConfigurationHeaders value);
    [CompilerGeneratedAttribute]
public HttpRequestConfigurationQueryParameters get_QueryParameters();
    [CompilerGeneratedAttribute]
public HttpRequestConfigurationCookies get_Cookies();
}
public class Omnia.Fx.Http.Common.RequestConfiguration.HttpRequestConfigurationCookies : NameValueCollection {
}
public class Omnia.Fx.Http.Common.RequestConfiguration.HttpRequestConfigurationHeaders : NameValueCollection {
}
public class Omnia.Fx.Http.Common.RequestConfiguration.HttpRequestConfigurationQueryParameters : NameValueCollection {
}
public abstract class Omnia.Fx.Http.GenericServiceHttpClient.GenericServiceHttpClientBase : object {
    [CompilerGeneratedAttribute]
private string <LogicaLHttpConnectionName>k__BackingField;
    [CompilerGeneratedAttribute]
private HttpClientFactoryForGenricServiceFunc <HttpClientFactoryForGenricServiceFunc>k__BackingField;
    protected string LogicaLHttpConnectionName { get; }
    public string UniqueServiceName { get; }
    protected HttpClientFactoryForGenricServiceFunc HttpClientFactoryForGenricServiceFunc { get; }
    public GenericServiceHttpClientBase(HttpClientFactoryForGenricServiceFunc httpClientFactoryForGenricServiceFunc);
    [CompilerGeneratedAttribute]
protected virtual string get_LogicaLHttpConnectionName();
    public abstract virtual string get_UniqueServiceName();
    [CompilerGeneratedAttribute]
protected HttpClientFactoryForGenricServiceFunc get_HttpClientFactoryForGenricServiceFunc();
    protected virtual Task DefaultHttpClientConfigurationAsync(HttpClient clientToConfigure);
    [AsyncStateMachineAttribute("Omnia.Fx.Http.GenericServiceHttpClient.GenericServiceHttpClientBase/<HttpClientAsync>d__10")]
public virtual ValueTask`1<HttpClient> HttpClientAsync();
    public virtual ValueTask`1<HttpRequestConfiguration> HttpRequestConfigurationAsync();
}
public class Omnia.Fx.Http.Internal.HttpClientFactoryForGenricServiceFunc : MulticastDelegate {
    public HttpClientFactoryForGenricServiceFunc(object object, IntPtr method);
    public virtual HttpClient Invoke(string uniqueName, Action`1<HttpClient> configureNewClient, string logicalConnectionName);
    public virtual IAsyncResult BeginInvoke(string uniqueName, Action`1<HttpClient> configureNewClient, string logicalConnectionName, AsyncCallback callback, object object);
    public virtual HttpClient EndInvoke(IAsyncResult result);
}
public class Omnia.Fx.Http.Internal.HttpClientFactoryForOmniaServiceFunc : MulticastDelegate {
    public HttpClientFactoryForOmniaServiceFunc(object object, IntPtr method);
    public virtual HttpClient Invoke(Guid omniaServiceId, Action`1<HttpClient> configureNewClient, string logicalConnectionName);
    public virtual IAsyncResult BeginInvoke(Guid omniaServiceId, Action`1<HttpClient> configureNewClient, string logicalConnectionName, AsyncCallback callback, object object);
    public virtual HttpClient EndInvoke(IAsyncResult result);
}
public class Omnia.Fx.Http.OmniaCurrentServiceCredentials : object {
    private IOptionsMonitor`1<OmniaAppSettings> _omniaAppSettings;
    private IOmniaServiceDefinition _omniaServiceDefinition;
    private ISessionCacheStateManager _sessionCacheStateManager;
    public OmniaCurrentServiceCredentials(IOptionsMonitor`1<OmniaAppSettings> omniaAppSettings, IOmniaServiceDefinition omniaServiceDefinition, ISessionCacheStateManager sessionCacheStateManager);
    public sealed virtual HttpRequestConfiguration GetRequestConfig();
}
internal interface Omnia.Fx.Http.OmniaServiceHttpClient.IOfficeGraphServiceApiConfigurationOptions {
    public IAsyncHttpRequestConfiguration`1<Office365GraphAppOnlyAuth> Office365GraphAppOnlyAuth { get; }
    public IAsyncHttpRequestConfiguration`1<Office365GraphAppOnlyIgnoreSystemAccountAuth> Office365GraphAppOnlyIgnoreSystemAccountAuth { get; }
    public IAsyncHttpRequestConfiguration`1<Office365GraphCurrentUserAuth> CurrentUserCredentials { get; }
    public abstract virtual IAsyncHttpRequestConfiguration`1<Office365GraphAppOnlyAuth> get_Office365GraphAppOnlyAuth();
    public abstract virtual IAsyncHttpRequestConfiguration`1<Office365GraphAppOnlyIgnoreSystemAccountAuth> get_Office365GraphAppOnlyIgnoreSystemAccountAuth();
    public abstract virtual IAsyncHttpRequestConfiguration`1<Office365GraphCurrentUserAuth> get_CurrentUserCredentials();
}
internal interface Omnia.Fx.Http.OmniaServiceHttpClient.IOmniaServiceConfigurationOptions {
    public IHttpRequestConfiguration`1<OmniaCurrentServiceCredentials> ServiceCredentials { get; }
    public IHttpRequestConfiguration`1<IncludeUserCredentials> CurrentUserCredentials { get; }
    public abstract virtual IHttpRequestConfiguration`1<OmniaCurrentServiceCredentials> get_ServiceCredentials();
    public abstract virtual IHttpRequestConfiguration`1<IncludeUserCredentials> get_CurrentUserCredentials();
}
public abstract class Omnia.Fx.Http.OmniaServiceHttpClient.OmniaServiceHttpClientBase : object {
    [CompilerGeneratedAttribute]
private HttpClientFactoryForOmniaServiceFunc <OmniaServiceHttpClientFactoryFunc>k__BackingField;
    [CompilerGeneratedAttribute]
private IList`1<IAsyncHttpOmniaContextRequestConfiguration> <AsyncContextConfigurations>k__BackingField;
    [CompilerGeneratedAttribute]
private IList`1<IHttpOmniaContextRequestConfiguration> <ContextConfigurations>k__BackingField;
    [CompilerGeneratedAttribute]
private IHttpRequestConfiguration`1<OmniaCurrentServiceCredentials> <ServiceCredentials>k__BackingField;
    [CompilerGeneratedAttribute]
private IHttpRequestConfiguration`1<IncludeUserCredentials> <CurrentUserCredentials>k__BackingField;
    [CompilerGeneratedAttribute]
private IOmniaScopedContext <OmniaScopedContext>k__BackingField;
    protected Guid OmniaServiceId { get; }
    protected HttpClientFactoryForOmniaServiceFunc OmniaServiceHttpClientFactoryFunc { get; }
    protected IList`1<IAsyncHttpOmniaContextRequestConfiguration> AsyncContextConfigurations { get; }
    protected IList`1<IHttpOmniaContextRequestConfiguration> ContextConfigurations { get; }
    public string UniqueServiceName { get; }
    public IHttpRequestConfiguration`1<OmniaCurrentServiceCredentials> ServiceCredentials { get; }
    public IHttpRequestConfiguration`1<IncludeUserCredentials> CurrentUserCredentials { get; }
    public IOmniaScopedContext OmniaScopedContext { get; }
    public OmniaServiceHttpClientBase(HttpClientFactoryForOmniaServiceFunc omniaServiceHttpClientFactoryFunc, IList`1<IAsyncHttpOmniaContextRequestConfiguration> asyncContextConfigurations, IList`1<IHttpOmniaContextRequestConfiguration> contextConfigurations, IHttpRequestConfiguration`1<OmniaCurrentServiceCredentials> serviceCredentials, IHttpRequestConfiguration`1<IncludeUserCredentials> currentUserCredentials, IOmniaScopedContext omniaScopedContext);
    protected abstract virtual Guid get_OmniaServiceId();
    [CompilerGeneratedAttribute]
protected HttpClientFactoryForOmniaServiceFunc get_OmniaServiceHttpClientFactoryFunc();
    [CompilerGeneratedAttribute]
protected IList`1<IAsyncHttpOmniaContextRequestConfiguration> get_AsyncContextConfigurations();
    [CompilerGeneratedAttribute]
protected IList`1<IHttpOmniaContextRequestConfiguration> get_ContextConfigurations();
    public sealed virtual string get_UniqueServiceName();
    [CompilerGeneratedAttribute]
public sealed virtual IHttpRequestConfiguration`1<OmniaCurrentServiceCredentials> get_ServiceCredentials();
    [CompilerGeneratedAttribute]
public sealed virtual IHttpRequestConfiguration`1<IncludeUserCredentials> get_CurrentUserCredentials();
    [CompilerGeneratedAttribute]
public IOmniaScopedContext get_OmniaScopedContext();
    protected virtual Task DefaultHttpClientConfigurationAsync(HttpClient clientToConfigure);
    [AsyncStateMachineAttribute("Omnia.Fx.Http.OmniaServiceHttpClient.OmniaServiceHttpClientBase/<HttpClientAsync>d__24")]
public sealed virtual ValueTask`1<HttpClient> HttpClientAsync();
    [AsyncStateMachineAttribute("Omnia.Fx.Http.OmniaServiceHttpClient.OmniaServiceHttpClientBase/<HttpRequestConfigurationAsync>d__25")]
public virtual ValueTask`1<HttpRequestConfiguration> HttpRequestConfigurationAsync();
}
[ExtensionAttribute]
public static class Omnia.Fx.Http.Preconfigured.Extensions.HttpRequestConfigurationExtensions : object {
    [ExtensionAttribute]
public static HttpRequestConfiguration Add(HttpRequestConfiguration requestConfig, HttpRequestConfiguration configToAdd, bool overWriteHeaders, bool overWriteQueryParmeters, bool overWriteCookies);
    [ExtensionAttribute]
public static HttpRequestConfiguration Remove(HttpRequestConfiguration requestConfig, HttpRequestConfiguration configToRemove);
    [ExtensionAttribute]
public static HttpRequestConfiguration Clear(HttpRequestConfiguration requestConfig);
}
[ExtensionAttribute]
public static class Omnia.Fx.Http.Preconfigured.Extensions.NameValueExtensions : object {
    [ExtensionAttribute]
public static void Add(NameValueCollection tomodify, NameValueCollection toAdd, bool overWrite);
    [ExtensionAttribute]
public static void Add(NameValueCollection tomodify, string key, string value, bool overWrite);
    [ExtensionAttribute]
public static void Remove(NameValueCollection tomodify, String[] keys);
    [ExtensionAttribute]
public static void Remove(NameValueCollection tomodify, NameValueCollection toRemove);
}
public class Omnia.Fx.Http.Preconfigured.HttpClients.ConfiguredHttpClient`1 : object {
    private static TimeSpan _defaultTimeout;
    [CompilerGeneratedAttribute]
private IServiceHttpClient <ServiceImplementation>k__BackingField;
    [CompilerGeneratedAttribute]
private Func`2<HttpRequestConfiguration, ValueTask`1<HttpRequestConfiguration>> <ModificationTaskFuncAsync>k__BackingField;
    protected IServiceHttpClient ServiceImplementation { get; }
    private Func`2<HttpRequestConfiguration, ValueTask`1<HttpRequestConfiguration>> ModificationTaskFuncAsync { get; private set; }
    public ConfiguredHttpClient`1(WrappedServiceImplementation serviceImplementation);
    protected ConfiguredHttpClient`1(ConfiguredHttpClient`1<WrappedServiceImplementation> previousInstance, Func`2<HttpRequestConfiguration, ValueTask`1<HttpRequestConfiguration>> newModificationFuncAsync);
    private static ConfiguredHttpClient`1();
    [CompilerGeneratedAttribute]
protected IServiceHttpClient get_ServiceImplementation();
    [CompilerGeneratedAttribute]
private Func`2<HttpRequestConfiguration, ValueTask`1<HttpRequestConfiguration>> get_ModificationTaskFuncAsync();
    [CompilerGeneratedAttribute]
private void set_ModificationTaskFuncAsync(Func`2<HttpRequestConfiguration, ValueTask`1<HttpRequestConfiguration>> value);
    [AsyncStateMachineAttribute("Omnia.Fx.Http.Preconfigured.HttpClients.ConfiguredHttpClient`1/<CreateRequestAsync>d__10")]
public sealed virtual ValueTask`1<HttpRequestMessage> CreateRequestAsync(string requestUri, HttpMethod method);
    [AsyncStateMachineAttribute("Omnia.Fx.Http.Preconfigured.HttpClients.ConfiguredHttpClient`1/<SendAsync>d__11")]
public virtual ValueTask`1<HttpResponseMessage> SendAsync(HttpRequestMessage request, HttpCompletionOption httpCompletionOption, Nullable`1<TimeSpan> timeout);
    [AsyncStateMachineAttribute("Omnia.Fx.Http.Preconfigured.HttpClients.ConfiguredHttpClient`1/<GetAsync>d__12")]
public sealed virtual ValueTask`1<HttpResponseMessage> GetAsync(string requestUri, HttpCompletionOption httpCompletionOption, Nullable`1<TimeSpan> timeout);
    [AsyncStateMachineAttribute("Omnia.Fx.Http.Preconfigured.HttpClients.ConfiguredHttpClient`1/<PostAsJsonAsync>d__13`1")]
public sealed virtual ValueTask`1<HttpResponseMessage> PostAsJsonAsync(string requestUri, T value, JsonSerializerSettings jsonSerializerSettings, Nullable`1<TimeSpan> timeout);
    [AsyncStateMachineAttribute("Omnia.Fx.Http.Preconfigured.HttpClients.ConfiguredHttpClient`1/<PostAsync>d__14")]
public sealed virtual ValueTask`1<HttpResponseMessage> PostAsync(string requestUri, HttpContent content, Nullable`1<TimeSpan> timeout);
    [AsyncStateMachineAttribute("Omnia.Fx.Http.Preconfigured.HttpClients.ConfiguredHttpClient`1/<PutAsJsonAsync>d__15`1")]
public sealed virtual ValueTask`1<HttpResponseMessage> PutAsJsonAsync(string requestUri, T value, JsonSerializerSettings jsonSerializerSettings, Nullable`1<TimeSpan> timeout);
    [AsyncStateMachineAttribute("Omnia.Fx.Http.Preconfigured.HttpClients.ConfiguredHttpClient`1/<PutAsync>d__16")]
public sealed virtual ValueTask`1<HttpResponseMessage> PutAsync(string requestUri, HttpContent content, Nullable`1<TimeSpan> timeout);
    [AsyncStateMachineAttribute("Omnia.Fx.Http.Preconfigured.HttpClients.ConfiguredHttpClient`1/<PatchAsJsonAsync>d__17`1")]
public sealed virtual ValueTask`1<HttpResponseMessage> PatchAsJsonAsync(string requestUri, T value, JsonSerializerSettings jsonSerializerSettings, Nullable`1<TimeSpan> timeout);
    [AsyncStateMachineAttribute("Omnia.Fx.Http.Preconfigured.HttpClients.ConfiguredHttpClient`1/<PatchAsync>d__18")]
public sealed virtual ValueTask`1<HttpResponseMessage> PatchAsync(string requestUri, HttpContent content, Nullable`1<TimeSpan> timeout);
    [AsyncStateMachineAttribute("Omnia.Fx.Http.Preconfigured.HttpClients.ConfiguredHttpClient`1/<DeleteAsync>d__19")]
public sealed virtual ValueTask`1<HttpResponseMessage> DeleteAsync(string requestUri, Nullable`1<TimeSpan> timeout);
    public sealed virtual IConfiguredHttpClient AddHttpRequestConfiguration(HttpRequestConfiguration requestConfig, bool overWriteHeaders, bool overWriteQueryParmeters, bool overWriteCookies);
    public sealed virtual IConfiguredHttpClient AddHttpRequestConfiguration(IHttpRequestConfiguration requestConfig, bool overWriteHeaders, bool overWriteQueryParmeters, bool overWriteCookies);
    public sealed virtual IConfiguredHttpClient AddHttpRequestConfiguration(IAsyncHttpRequestConfiguration requestConfig, bool overWriteHeaders, bool overWriteQueryParmeters, bool overWriteCookies);
    public sealed virtual IConfiguredHttpClient RemoveHttpRequestConfiguration(HttpRequestConfiguration requestConfig);
    public sealed virtual IConfiguredHttpClient RemoveHttpRequestConfiguration(IHttpRequestConfiguration requestConfig);
    public sealed virtual IConfiguredHttpClient RemoveHttpRequestConfiguration(IAsyncHttpRequestConfiguration requestConfig);
    public sealed virtual IConfiguredHttpClient ClearHttpRequestConfiguration();
    public sealed virtual IConfiguredHttpClient AddHeaders(HttpRequestConfigurationHeaders headers, bool overWrite);
    public sealed virtual IConfiguredHttpClient AddHeaders(IHttpRequestConfiguration requestConfigToAddHeadersFrom, bool overWrite);
    public sealed virtual IConfiguredHttpClient AddHeaders(IAsyncHttpRequestConfiguration requestConfigToAddHeadersFrom, bool overWrite);
    public sealed virtual IConfiguredHttpClient RemoveHeaders(String[] headerNames);
    public sealed virtual IConfiguredHttpClient RemoveHeaders(IHttpRequestConfiguration removeRequestConfigHeaders);
    public sealed virtual IConfiguredHttpClient RemoveHeaders(IAsyncHttpRequestConfiguration removeRequestConfigHeaders);
    public sealed virtual IConfiguredHttpClient RemoveAllHeaders();
    public sealed virtual IConfiguredHttpClient AddQueryParameters(HttpRequestConfigurationQueryParameters queryParameters, bool overWrite);
    public sealed virtual IConfiguredHttpClient AddQueryParameters(string paramName, string paramValue, bool overWrite);
    public sealed virtual IConfiguredHttpClient AddQueryParameters(IHttpRequestConfiguration requestConfigToAddQueryFrom, bool overWrite);
    public sealed virtual IConfiguredHttpClient AddQueryParameters(IAsyncHttpRequestConfiguration requestConfigToAddQueryFrom, bool overWrite);
    public sealed virtual IConfiguredHttpClient RemoveQueryParameters(String[] queryParamNames);
    public sealed virtual IConfiguredHttpClient RemoveAllQueryParameters();
    public sealed virtual IConfiguredHttpClient RemoveQueryParameters(IHttpRequestConfiguration removeRequestConfigQueryParams);
    public sealed virtual IConfiguredHttpClient RemoveQueryParameters(IAsyncHttpRequestConfiguration removeRequestConfigQueryParams);
    public sealed virtual IConfiguredHttpClient AddCookies(HttpRequestConfigurationCookies cookies, bool overWrite);
    public sealed virtual IConfiguredHttpClient AddCookies(IHttpRequestConfiguration requestConfigToAddCookiesFrom, bool overWrite);
    public sealed virtual IConfiguredHttpClient AddCookies(IAsyncHttpRequestConfiguration requestConfigToAddCookiesFrom, bool overWrite);
    public sealed virtual IConfiguredHttpClient RemoveCookies(String[] cookieNames);
    public sealed virtual IConfiguredHttpClient RemoveCookies(IHttpRequestConfiguration removeRequestConfigCookies);
    public sealed virtual IConfiguredHttpClient RemoveCookies(IAsyncHttpRequestConfiguration removeRequestConfigCookies);
    public sealed virtual IConfiguredHttpClient RemoveAllCookies();
    public sealed virtual IServiceImplHttpConfigOptions GetServiceImplemenationInterface();
    protected virtual ConfiguredHttpClient`1<WrappedServiceImplementation> CreateNewInstanceForAction(Func`2<HttpRequestConfiguration, ValueTask`1<HttpRequestConfiguration>> action);
    protected virtual StringContent CreateBodyStringContent(TBody value, JsonSerializerSettings jsonSerializerSettings);
    private static Uri GetRequestUri(string requestUri, HttpRequestConfigurationQueryParameters paramsToUse, HttpClient client);
}
public class Omnia.Fx.Http.Preconfigured.HttpClients.Generic.MicrosoftStreamServiceApi : GenericServiceHttpClientBase {
    private Guid UniqueId;
    public string UniqueServiceName { get; }
    public MicrosoftStreamServiceApi(HttpClientFactoryForGenricServiceFunc httpClientFunc);
    public virtual string get_UniqueServiceName();
    protected virtual Task DefaultHttpClientConfigurationAsync(HttpClient clientToConfigure);
    public virtual ValueTask`1<HttpRequestConfiguration> HttpRequestConfigurationAsync();
}
public class Omnia.Fx.Http.Preconfigured.HttpClients.Generic.Office365GraphServiceApi : GenericServiceHttpClientBase {
    private Guid UniqueId;
    [CompilerGeneratedAttribute]
private IAsyncHttpRequestConfiguration <Office365GraphCurrentUserAuthRequestConfiguration>k__BackingField;
    [CompilerGeneratedAttribute]
private IAsyncHttpRequestConfiguration`1<Office365GraphAppOnlyAuth> <Office365GraphAppOnlyAuth>k__BackingField;
    [CompilerGeneratedAttribute]
private IAsyncHttpRequestConfiguration`1<Office365GraphAppOnlyIgnoreSystemAccountAuth> <Office365GraphAppOnlyIgnoreSystemAccountAuth>k__BackingField;
    [CompilerGeneratedAttribute]
private IAsyncHttpRequestConfiguration`1<Office365GraphCurrentUserAuth> <CurrentUserCredentials>k__BackingField;
    public string UniqueServiceName { get; }
    private IAsyncHttpRequestConfiguration Office365GraphCurrentUserAuthRequestConfiguration { get; }
    public IAsyncHttpRequestConfiguration`1<Office365GraphAppOnlyAuth> Office365GraphAppOnlyAuth { get; }
    public IAsyncHttpRequestConfiguration`1<Office365GraphAppOnlyIgnoreSystemAccountAuth> Office365GraphAppOnlyIgnoreSystemAccountAuth { get; }
    public IAsyncHttpRequestConfiguration`1<Office365GraphCurrentUserAuth> CurrentUserCredentials { get; }
    public Office365GraphServiceApi(HttpClientFactoryForGenricServiceFunc httpClientFunc, IAsyncHttpRequestConfiguration`1<Office365GraphAppOnlyAuth> office365GraphAppOnlyAuth, IAsyncHttpRequestConfiguration`1<Office365GraphAppOnlyIgnoreSystemAccountAuth> office365GraphAppOnlyIgnoreSystemAccountAuth, IAsyncHttpRequestConfiguration`1<Office365GraphCurrentUserAuth> currentUserCredentials, IAsyncHttpRequestConfiguration`1<Office365GraphCurrentUserAuth> httpClientConfig);
    public virtual string get_UniqueServiceName();
    [CompilerGeneratedAttribute]
private IAsyncHttpRequestConfiguration get_Office365GraphCurrentUserAuthRequestConfiguration();
    [CompilerGeneratedAttribute]
public sealed virtual IAsyncHttpRequestConfiguration`1<Office365GraphAppOnlyAuth> get_Office365GraphAppOnlyAuth();
    [CompilerGeneratedAttribute]
public sealed virtual IAsyncHttpRequestConfiguration`1<Office365GraphAppOnlyIgnoreSystemAccountAuth> get_Office365GraphAppOnlyIgnoreSystemAccountAuth();
    [CompilerGeneratedAttribute]
public sealed virtual IAsyncHttpRequestConfiguration`1<Office365GraphCurrentUserAuth> get_CurrentUserCredentials();
    [AsyncStateMachineAttribute("Omnia.Fx.Http.Preconfigured.HttpClients.Generic.Office365GraphServiceApi/<DefaultHttpClientConfigurationAsync>d__16")]
protected virtual Task DefaultHttpClientConfigurationAsync(HttpClient clientToConfigure);
    [AsyncStateMachineAttribute("Omnia.Fx.Http.Preconfigured.HttpClients.Generic.Office365GraphServiceApi/<HttpRequestConfigurationAsync>d__17")]
public virtual ValueTask`1<HttpRequestConfiguration> HttpRequestConfigurationAsync();
    [CompilerGeneratedAttribute]
[DebuggerHiddenAttribute]
private Task <>n__0(HttpClient clientToConfigure);
    [CompilerGeneratedAttribute]
[DebuggerHiddenAttribute]
private ValueTask`1<HttpRequestConfiguration> <>n__1();
}
public class Omnia.Fx.Http.Preconfigured.HttpClients.Generic.TranslatorTextServiceApi : GenericServiceHttpClientBase {
    private Guid UniqueId;
    public string UniqueServiceName { get; }
    public TranslatorTextServiceApi(HttpClientFactoryForGenricServiceFunc httpClientFunc);
    public virtual string get_UniqueServiceName();
    [AsyncStateMachineAttribute("Omnia.Fx.Http.Preconfigured.HttpClients.Generic.TranslatorTextServiceApi/<DefaultHttpClientConfigurationAsync>d__4")]
protected virtual Task DefaultHttpClientConfigurationAsync(HttpClient clientToConfigure);
    [CompilerGeneratedAttribute]
[DebuggerHiddenAttribute]
private Task <>n__0(HttpClient clientToConfigure);
}
public class Omnia.Fx.Http.Preconfigured.HttpClients.Generic.WebImageServiceApi : GenericServiceHttpClientBase {
    private Guid UniqueId;
    private IOptionsMonitor`1<OmniaServicesDnsSettings> OmniaServicesDnsSettings;
    public string UniqueServiceName { get; }
    public WebImageServiceApi(HttpClientFactoryForGenricServiceFunc httpClientFunc, IOptionsMonitor`1<OmniaServicesDnsSettings> omniaServicesDnsSettings);
    public virtual string get_UniqueServiceName();
    protected virtual Task DefaultHttpClientConfigurationAsync(HttpClient clientToConfigure);
    public virtual ValueTask`1<HttpRequestConfiguration> HttpRequestConfigurationAsync();
}
public interface Omnia.Fx.Http.Preconfigured.HttpClients.IConfiguredHttpClient {
    public abstract virtual ValueTask`1<HttpRequestMessage> CreateRequestAsync(string requestUri, HttpMethod method);
    public abstract virtual ValueTask`1<HttpResponseMessage> SendAsync(HttpRequestMessage request, HttpCompletionOption httpCompletionOption, Nullable`1<TimeSpan> timeout);
    public abstract virtual ValueTask`1<HttpResponseMessage> GetAsync(string requestUri, HttpCompletionOption httpCompletionOption, Nullable`1<TimeSpan> timeout);
    public abstract virtual ValueTask`1<HttpResponseMessage> PostAsJsonAsync(string requestUri, T value, JsonSerializerSettings jsonSerializerSettings, Nullable`1<TimeSpan> timeout);
    public abstract virtual ValueTask`1<HttpResponseMessage> PostAsync(string requestUri, HttpContent content, Nullable`1<TimeSpan> timeout);
    public abstract virtual ValueTask`1<HttpResponseMessage> PutAsJsonAsync(string requestUri, T value, JsonSerializerSettings jsonSerializerSettings, Nullable`1<TimeSpan> timeout);
    public abstract virtual ValueTask`1<HttpResponseMessage> PutAsync(string requestUri, HttpContent content, Nullable`1<TimeSpan> timeout);
    public abstract virtual ValueTask`1<HttpResponseMessage> PatchAsJsonAsync(string requestUri, T value, JsonSerializerSettings jsonSerializerSettings, Nullable`1<TimeSpan> timeout);
    public abstract virtual ValueTask`1<HttpResponseMessage> PatchAsync(string requestUri, HttpContent content, Nullable`1<TimeSpan> timeout);
    public abstract virtual ValueTask`1<HttpResponseMessage> DeleteAsync(string requestUri, Nullable`1<TimeSpan> timeout);
    public abstract virtual IConfiguredHttpClient AddHttpRequestConfiguration(HttpRequestConfiguration requestConfig, bool overWriteHeaders, bool overWriteQueryParmeters, bool overWriteCookies);
    public abstract virtual IConfiguredHttpClient AddHttpRequestConfiguration(IHttpRequestConfiguration requestConfig, bool overWriteHeaders, bool overWriteQueryParmeters, bool overWriteCookies);
    public abstract virtual IConfiguredHttpClient AddHttpRequestConfiguration(IAsyncHttpRequestConfiguration requestConfig, bool overWriteHeaders, bool overWriteQueryParmeters, bool overWriteCookies);
    public abstract virtual IConfiguredHttpClient ClearHttpRequestConfiguration();
    public abstract virtual IConfiguredHttpClient RemoveHttpRequestConfiguration(HttpRequestConfiguration requestConfig);
    public abstract virtual IConfiguredHttpClient RemoveHttpRequestConfiguration(IHttpRequestConfiguration requestConfig);
    public abstract virtual IConfiguredHttpClient RemoveHttpRequestConfiguration(IAsyncHttpRequestConfiguration requestConfig);
    public abstract virtual IConfiguredHttpClient AddHeaders(HttpRequestConfigurationHeaders headers, bool overWrite);
    public abstract virtual IConfiguredHttpClient AddHeaders(IHttpRequestConfiguration requestConfigToAddHeadersFrom, bool overWrite);
    public abstract virtual IConfiguredHttpClient AddHeaders(IAsyncHttpRequestConfiguration requestConfigToAddHeadersFrom, bool overWrite);
    public abstract virtual IConfiguredHttpClient RemoveHeaders(String[] headerNames);
    public abstract virtual IConfiguredHttpClient RemoveHeaders(IHttpRequestConfiguration removeRequestConfigHeaders);
    public abstract virtual IConfiguredHttpClient RemoveHeaders(IAsyncHttpRequestConfiguration removeRequestConfigHeaders);
    public abstract virtual IConfiguredHttpClient RemoveAllHeaders();
    public abstract virtual IConfiguredHttpClient AddQueryParameters(HttpRequestConfigurationQueryParameters queryParameters, bool overWrite);
    public abstract virtual IConfiguredHttpClient AddQueryParameters(string paramName, string paramValue, bool overWrite);
    public abstract virtual IConfiguredHttpClient AddQueryParameters(IHttpRequestConfiguration requestConfigToAddQueryFrom, bool overWrite);
    public abstract virtual IConfiguredHttpClient AddQueryParameters(IAsyncHttpRequestConfiguration requestConfigToAddQueryFrom, bool overWrite);
    public abstract virtual IConfiguredHttpClient RemoveQueryParameters(String[] queryParamNames);
    public abstract virtual IConfiguredHttpClient RemoveQueryParameters(IHttpRequestConfiguration removeRequestConfigQueryParams);
    public abstract virtual IConfiguredHttpClient RemoveQueryParameters(IAsyncHttpRequestConfiguration removeRequestConfigQueryParams);
    public abstract virtual IConfiguredHttpClient RemoveAllQueryParameters();
    public abstract virtual IConfiguredHttpClient AddCookies(HttpRequestConfigurationCookies cookies, bool overWrite);
    public abstract virtual IConfiguredHttpClient AddCookies(IHttpRequestConfiguration requestConfigToAddCookiesFrom, bool overWrite);
    public abstract virtual IConfiguredHttpClient AddCookies(IAsyncHttpRequestConfiguration requestConfigToAddCookiesFrom, bool overWrite);
    public abstract virtual IConfiguredHttpClient RemoveCookies(String[] cookieNames);
    public abstract virtual IConfiguredHttpClient RemoveCookies(IHttpRequestConfiguration removeRequestConfigCookies);
    public abstract virtual IConfiguredHttpClient RemoveCookies(IAsyncHttpRequestConfiguration removeRequestConfigCookies);
    public abstract virtual IConfiguredHttpClient RemoveAllCookies();
}
public interface Omnia.Fx.Http.Preconfigured.HttpClients.IConfiguredHttpClient`1 {
}
[ExtensionAttribute]
public static class Omnia.Fx.Http.Preconfigured.HttpClients.IConfiguredHttpClientOffice365GraphServiceApiServiceApiExtensions : object {
    [ExtensionAttribute]
public static IConfiguredHttpClient`1<Office365GraphServiceApi> RunAsAppOnly(IConfiguredHttpClient`1<Office365GraphServiceApi> configuredHttpClient, bool ignoreSystemAccount);
    [ExtensionAttribute]
public static IConfiguredHttpClient`1<Office365GraphServiceApi> RunAsCurrentUser(IConfiguredHttpClient`1<Office365GraphServiceApi> configuredHttpClient);
}
[ExtensionAttribute]
public static class Omnia.Fx.Http.Preconfigured.HttpClients.IConfiguredHttpClientOmniaServiceBaseExtensions : object {
    [ExtensionAttribute]
public static IConfiguredHttpClient`1<GenericOmniaServiceImp> RunAsCurrentUser(IConfiguredHttpClient`1<GenericOmniaServiceImp> configuredHttpClient, bool fallBackToAppOnly);
    [ExtensionAttribute]
public static IConfiguredHttpClient`1<GenericOmniaServiceImp> AsSystemUpdate(IConfiguredHttpClient`1<GenericOmniaServiceImp> configuredHttpClient);
}
[ExtensionAttribute]
public static class Omnia.Fx.Http.Preconfigured.HttpClients.Omnia.IConfiguredHttpClientOmniaServiceExtensions : object {
    [ExtensionAttribute]
public static IConfiguredOmniaHttpClient RunAsCurrentUser(IConfiguredOmniaHttpClient configuredHttpClient, bool fallBackToAppOnly);
    [ExtensionAttribute]
public static IConfiguredOmniaHttpClient AsSystemUpdate(IConfiguredOmniaHttpClient configuredHttpClient);
}
public interface Omnia.Fx.Http.Preconfigured.HttpClients.Omnia.IConfiguredOmniaHttpClient {
}
public interface Omnia.Fx.Http.Preconfigured.HttpClients.Omnia.IOmniaServiceHttpClientFactory {
    public abstract virtual IConfiguredOmniaHttpClient GetOmniaServiceById(Guid omniaServiceId);
}
public class Omnia.Fx.Http.Preconfigured.HttpClients.Omnia.OmniaServiceApi : OmniaServiceHttpClientBase {
    protected Guid OmniaServiceId { get; }
    public OmniaServiceApi(HttpClientFactoryForOmniaServiceFunc httpClientFunc, IList`1<IAsyncHttpOmniaContextRequestConfiguration> asyncContextConfigurations, IList`1<IHttpOmniaContextRequestConfiguration> contextConfigurations, IHttpRequestConfiguration`1<OmniaCurrentServiceCredentials> serviceCredentials, IHttpRequestConfiguration`1<IncludeUserCredentials> userCredentials, IOmniaScopedContext omniaScopedContext);
    protected virtual Guid get_OmniaServiceId();
    [AsyncStateMachineAttribute("Omnia.Fx.Http.Preconfigured.HttpClients.Omnia.OmniaServiceApi/<DefaultHttpClientConfigurationAsync>d__3")]
protected virtual Task DefaultHttpClientConfigurationAsync(HttpClient clientToConfigure);
    public virtual ValueTask`1<HttpRequestConfiguration> HttpRequestConfigurationAsync();
    [CompilerGeneratedAttribute]
[DebuggerHiddenAttribute]
private Task <>n__0(HttpClient clientToConfigure);
}
internal class Omnia.Fx.Http.Preconfigured.HttpClients.Omnia.OmniaServiceIdHttpClientFactory : object {
    [CompilerGeneratedAttribute]
private HttpClientFactoryForOmniaServiceFunc <OmniaServiceHttpClientFactoryFunc>k__BackingField;
    [CompilerGeneratedAttribute]
private IList`1<IAsyncHttpOmniaContextRequestConfiguration> <AsyncContextConfigurations>k__BackingField;
    [CompilerGeneratedAttribute]
private IList`1<IHttpOmniaContextRequestConfiguration> <ContextConfigurations>k__BackingField;
    [CompilerGeneratedAttribute]
private IList`1<IServiceHttpClient> <AllSpeciallyConfiguredServiceHttpClients>k__BackingField;
    [CompilerGeneratedAttribute]
private IHttpRequestConfiguration`1<OmniaCurrentServiceCredentials> <OmniaCurrentServiceCredentials>k__BackingField;
    [CompilerGeneratedAttribute]
private IHttpRequestConfiguration`1<IncludeUserCredentials> <UserCredentials>k__BackingField;
    [CompilerGeneratedAttribute]
private IOmniaScopedContext <OmniaScopedContext>k__BackingField;
    private HttpClientFactoryForOmniaServiceFunc OmniaServiceHttpClientFactoryFunc { get; }
    private IList`1<IAsyncHttpOmniaContextRequestConfiguration> AsyncContextConfigurations { get; }
    private IList`1<IHttpOmniaContextRequestConfiguration> ContextConfigurations { get; }
    private IList`1<IServiceHttpClient> AllSpeciallyConfiguredServiceHttpClients { get; }
    private IHttpRequestConfiguration`1<OmniaCurrentServiceCredentials> OmniaCurrentServiceCredentials { get; }
    private IHttpRequestConfiguration`1<IncludeUserCredentials> UserCredentials { get; }
    private IOmniaScopedContext OmniaScopedContext { get; }
    public OmniaServiceIdHttpClientFactory(HttpClientFactoryForOmniaServiceFunc httpClientFunc, IList`1<IAsyncHttpOmniaContextRequestConfiguration> asyncContextConfigurations, IList`1<IHttpOmniaContextRequestConfiguration> contextConfigurations, IList`1<IServiceHttpClient> allSpeciallyConfiguredServiceHttpClients, IHttpRequestConfiguration`1<OmniaCurrentServiceCredentials> omniaCurrentServiceCredentials, IHttpRequestConfiguration`1<IncludeUserCredentials> userCredentials, IOmniaScopedContext omniaScopedContext);
    [CompilerGeneratedAttribute]
private HttpClientFactoryForOmniaServiceFunc get_OmniaServiceHttpClientFactoryFunc();
    [CompilerGeneratedAttribute]
private IList`1<IAsyncHttpOmniaContextRequestConfiguration> get_AsyncContextConfigurations();
    [CompilerGeneratedAttribute]
private IList`1<IHttpOmniaContextRequestConfiguration> get_ContextConfigurations();
    [CompilerGeneratedAttribute]
private IList`1<IServiceHttpClient> get_AllSpeciallyConfiguredServiceHttpClients();
    [CompilerGeneratedAttribute]
private IHttpRequestConfiguration`1<OmniaCurrentServiceCredentials> get_OmniaCurrentServiceCredentials();
    [CompilerGeneratedAttribute]
private IHttpRequestConfiguration`1<IncludeUserCredentials> get_UserCredentials();
    [CompilerGeneratedAttribute]
private IOmniaScopedContext get_OmniaScopedContext();
    public sealed virtual IConfiguredOmniaHttpClient GetOmniaServiceById(Guid omniaServiceId);
}
public class Omnia.Fx.Http.Preconfigured.HttpRequestConfigurations.Async.Office365GraphAppOnlyAuth : object {
    [CompilerGeneratedAttribute]
private IAuthService <AuthService>k__BackingField;
    private IAuthService AuthService { get; }
    public Office365GraphAppOnlyAuth(IAuthService authService);
    [CompilerGeneratedAttribute]
private IAuthService get_AuthService();
    [AsyncStateMachineAttribute("Omnia.Fx.Http.Preconfigured.HttpRequestConfigurations.Async.Office365GraphAppOnlyAuth/<GetRequestConfigAsync>d__4")]
public sealed virtual ValueTask`1<HttpRequestConfiguration> GetRequestConfigAsync();
    [CompilerGeneratedAttribute]
private ValueTask`1<AccessTokenInfo> <GetRequestConfigAsync>b__4_0();
}
public class Omnia.Fx.Http.Preconfigured.HttpRequestConfigurations.Async.Office365GraphAppOnlyIgnoreSystemAccountAuth : object {
    [CompilerGeneratedAttribute]
private IAuthService <AuthService>k__BackingField;
    private IAuthService AuthService { get; }
    public Office365GraphAppOnlyIgnoreSystemAccountAuth(IAuthService authService);
    [CompilerGeneratedAttribute]
private IAuthService get_AuthService();
    [AsyncStateMachineAttribute("Omnia.Fx.Http.Preconfigured.HttpRequestConfigurations.Async.Office365GraphAppOnlyIgnoreSystemAccountAuth/<GetRequestConfigAsync>d__4")]
public sealed virtual ValueTask`1<HttpRequestConfiguration> GetRequestConfigAsync();
    [CompilerGeneratedAttribute]
private ValueTask`1<AccessTokenInfo> <GetRequestConfigAsync>b__4_0();
}
public class Omnia.Fx.Http.Preconfigured.HttpRequestConfigurations.Async.Office365GraphCurrentUserAuth : object {
    [CompilerGeneratedAttribute]
private IAuthService <AuthService>k__BackingField;
    [CompilerGeneratedAttribute]
private IOmniaUserTokenProvider <UserTokenProvider>k__BackingField;
    private IAuthService AuthService { get; }
    private IOmniaUserTokenProvider UserTokenProvider { get; }
    public Office365GraphCurrentUserAuth(IAuthService authService, IOmniaUserTokenProvider userTokenProvider);
    [CompilerGeneratedAttribute]
private IAuthService get_AuthService();
    [CompilerGeneratedAttribute]
private IOmniaUserTokenProvider get_UserTokenProvider();
    [AsyncStateMachineAttribute("Omnia.Fx.Http.Preconfigured.HttpRequestConfigurations.Async.Office365GraphCurrentUserAuth/<GetRequestConfigAsync>d__7")]
public sealed virtual ValueTask`1<HttpRequestConfiguration> GetRequestConfigAsync();
    [CompilerGeneratedAttribute]
private ValueTask`1<AccessTokenInfo> <GetRequestConfigAsync>b__7_0();
}
public interface Omnia.Fx.Http.Preconfigured.HttpRequestConfigurations.IAsyncHttpOmniaContextRequestConfiguration {
}
public interface Omnia.Fx.Http.Preconfigured.HttpRequestConfigurations.IAsyncHttpRequestConfiguration {
    public abstract virtual ValueTask`1<HttpRequestConfiguration> GetRequestConfigAsync();
}
public interface Omnia.Fx.Http.Preconfigured.HttpRequestConfigurations.IAsyncHttpRequestConfiguration`1 {
}
public interface Omnia.Fx.Http.Preconfigured.HttpRequestConfigurations.IHttpOmniaContextRequestConfiguration {
}
public interface Omnia.Fx.Http.Preconfigured.HttpRequestConfigurations.IHttpRequestConfiguration {
    public abstract virtual HttpRequestConfiguration GetRequestConfig();
}
public interface Omnia.Fx.Http.Preconfigured.HttpRequestConfigurations.IHttpRequestConfiguration`1 {
}
public class Omnia.Fx.Http.Preconfigured.HttpRequestConfigurations.IncludeUserCredentials : object {
    [CompilerGeneratedAttribute]
private IOmniaUserTokenProvider <OmniaUserTokenProvider>k__BackingField;
    [CompilerGeneratedAttribute]
private ISessionCacheStateManager <SessionCacheStateManager>k__BackingField;
    private IOmniaUserTokenProvider OmniaUserTokenProvider { get; }
    private ISessionCacheStateManager SessionCacheStateManager { get; }
    public IncludeUserCredentials(IOmniaUserTokenProvider omniaUserTokenProvider, ISessionCacheStateManager sessionCacheStateManager);
    [CompilerGeneratedAttribute]
private IOmniaUserTokenProvider get_OmniaUserTokenProvider();
    [CompilerGeneratedAttribute]
private ISessionCacheStateManager get_SessionCacheStateManager();
    public sealed virtual HttpRequestConfiguration GetRequestConfig();
}
public class Omnia.Fx.Http.Preconfigured.HttpRequestConfigurations.OmniaCurrentLanguage : object {
    [CompilerGeneratedAttribute]
private IOmniaScopedContext <OmniaScopedContext>k__BackingField;
    public IOmniaScopedContext OmniaScopedContext { get; }
    public OmniaCurrentLanguage(IOmniaScopedContext omniaScopedContext);
    [CompilerGeneratedAttribute]
public IOmniaScopedContext get_OmniaScopedContext();
    public sealed virtual HttpRequestConfiguration GetRequestConfig();
}
[ExtensionAttribute]
public static class Omnia.Fx.Http.Preconfigured.HttpRequestHeadersExtensions : object {
    [ExtensionAttribute]
public static void Add(HttpRequestHeaders httpRequestHeaders, NameValueCollection valuesToAdd, bool overwriteCurrentValue);
    [ExtensionAttribute]
public static void AddCookies(HttpRequestHeaders httpRequestHeaders, NameValueCollection cookiesToAdd);
    [ExtensionAttribute]
public static void Remove(HttpRequestHeaders httpRequestHeaders, String[] headersToRemove);
    [ExtensionAttribute]
public static void Clear(HttpRequestHeaders httpRequestHeaders);
}
public class Omnia.Fx.Identities.HttpContract : object {
}
internal class Omnia.Fx.Identities.IdentityCacheHandler : object {
    [CompilerGeneratedAttribute]
private IOmniaCacheWithKeyHelper`1<IOmniaSynchronizedMemoryCache> <CacheHelper>k__BackingField;
    private IOmniaCacheWithKeyHelper`1<IOmniaSynchronizedMemoryCache> CacheHelper { get; }
    private string AllIdentitiesCacheKey { get; }
    public IdentityCacheHandler(OmniaTargetedSynchronizedMemoryCache omniaSynchronizedCache);
    [CompilerGeneratedAttribute]
private IOmniaCacheWithKeyHelper`1<IOmniaSynchronizedMemoryCache> get_CacheHelper();
    private string get_AllIdentitiesCacheKey();
    private ICacheDependencyResult`1<Guid> EnsureGuidCache(string cacheKey, ICacheDependency[] cacheDependencies);
    public sealed virtual ICacheDependencyResult`1<IResolvedIdentity> GetIdentityCache(Identity identity);
    public sealed virtual ResolvedUserIdentity GetResolvedUserIdentity(string username);
    public sealed virtual ICacheDependencyResult`1<IResolvedIdentity> GetOrSetIdentityCache(Identity identity, Func`2<IOmniaDependencyCacheEntry, IResolvedIdentity> setItemFactory);
    public sealed virtual ResolvedUserIdentity GetOrSetResolvedUserIdentity(string username, Func`1<ResolvedUserIdentity> setItemFactory);
    public sealed virtual void InvalidateIdentityCache(Identity identity);
}
internal class Omnia.Fx.Identities.IdentityHelper : object {
    public sealed virtual bool IsIdentitySupportSharePointProfile(ResolvedUserIdentity resolvedIdentity);
}
public class Omnia.Fx.Identities.IdentityProviderRegistrationService : object {
    private Func`1<List`1<IIdentityProvider>> _iIdentityProviderGetterFunc;
    public IdentityProviderRegistrationService(Func`1<List`1<IIdentityProvider>> iIdentityProviderGetterFunc);
    public sealed virtual IIdentityProvider GetIdentityProvider(Guid providerId);
    public sealed virtual List`1<IIdentityProvider> GetRegisteredProviders();
}
public abstract class Omnia.Fx.Identities.IdentityProviderWithSynchronizationBase`2 : object {
    [CompilerGeneratedAttribute]
private TSettings <ProviderSettings>k__BackingField;
    [CompilerGeneratedAttribute]
private IdentityProviderAutoFailoverSettings <AutoFailoverSettings>k__BackingField;
    [CompilerGeneratedAttribute]
private TSyncState <ProviderSyncState>k__BackingField;
    [CompilerGeneratedAttribute]
private IIdentityProviderSynchronizationRun <SynchronizationRunInstance>k__BackingField;
    [CompilerGeneratedAttribute]
private CancellationToken <CancellationToken>k__BackingField;
    protected IOmniaLogger`1<IdentityProviderWithSynchronizationBase`2<TSettings, TSyncState>> Logger;
    [CompilerGeneratedAttribute]
private IdentityProviderRunLog <CurrentRunLog>k__BackingField;
    private IIdentityProviderService identityProviderService;
    private IIdentityProviderRegistrationService identityProviderRegistrationService;
    private IIdentityProviderRunLogService identityProviderRunLogService;
    private IOmniaCloudSyncTrackingService omniaCloudSyncTrackingService;
    private IList`1<IdentityPropertySyncBinding> allUserPropertiesToGet;
    private IList`1<IdentityPropertySyncBinding> allGroupPropertiesToGet;
    private IdentityProviderSyncResult syncResult;
    private Stopwatch stopwatch;
    public Guid Id { get; }
    public string DisplayName { get; }
    public IList`1<IdentityTypes> SupportedIdentities { get; }
    [TupleElementNamesAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public ValueTuple`2<UserBuiltinSyncBindings, GroupBuiltinSyncBindings> SyncBindingsConfiguration { get; }
    public IList`1<GroupType> ProvidedGroupTypes { get; }
    protected TSettings ProviderSettings { get; private set; }
    protected IdentityProviderAutoFailoverSettings AutoFailoverSettings { get; private set; }
    protected TSyncState ProviderSyncState { get; protected set; }
    protected IIdentityProviderSynchronizationRun SynchronizationRunInstance { get; private set; }
    protected CancellationToken CancellationToken { get; private set; }
    private IdentityProviderRunLog CurrentRunLog { get; private set; }
    protected IdentityProviderWithSynchronizationBase`2(IOmniaLogger`1<IdentityProviderWithSynchronizationBase`2<TSettings, TSyncState>> logger, IIdentityProviderService identityProviderService, IIdentityProviderRegistrationService identityProviderRegistrationService, IIdentityProviderRunLogService identityProviderRunLogService, IOmniaCloudSyncTrackingService omniaCloudSyncTrackingService);
    public abstract virtual Guid get_Id();
    public abstract virtual string get_DisplayName();
    public abstract virtual IList`1<IdentityTypes> get_SupportedIdentities();
    public abstract virtual IdentityProviderData CreateProviderDataFromAuthInformation(string username, UserAuthenticationInformation authenticationInformation);
    public abstract virtual ValueTuple`2<UserBuiltinSyncBindings, GroupBuiltinSyncBindings> get_SyncBindingsConfiguration();
    public abstract virtual IList`1<GroupType> get_ProvidedGroupTypes();
    [CompilerGeneratedAttribute]
protected virtual TSettings get_ProviderSettings();
    [CompilerGeneratedAttribute]
private void set_ProviderSettings(TSettings value);
    [CompilerGeneratedAttribute]
protected IdentityProviderAutoFailoverSettings get_AutoFailoverSettings();
    [CompilerGeneratedAttribute]
private void set_AutoFailoverSettings(IdentityProviderAutoFailoverSettings value);
    [CompilerGeneratedAttribute]
protected virtual TSyncState get_ProviderSyncState();
    [CompilerGeneratedAttribute]
protected virtual void set_ProviderSyncState(TSyncState value);
    [CompilerGeneratedAttribute]
protected IIdentityProviderSynchronizationRun get_SynchronizationRunInstance();
    [CompilerGeneratedAttribute]
private void set_SynchronizationRunInstance(IIdentityProviderSynchronizationRun value);
    [CompilerGeneratedAttribute]
protected CancellationToken get_CancellationToken();
    [CompilerGeneratedAttribute]
private void set_CancellationToken(CancellationToken value);
    [CompilerGeneratedAttribute]
private IdentityProviderRunLog get_CurrentRunLog();
    [CompilerGeneratedAttribute]
private void set_CurrentRunLog(IdentityProviderRunLog value);
    [AsyncStateMachineAttribute("Omnia.Fx.Identities.IdentityProviderWithSynchronizationBase`2/<StartAsync>d__45")]
public sealed virtual Task StartAsync(CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Omnia.Fx.Identities.IdentityProviderWithSynchronizationBase`2/<OnInitAsync>d__46")]
protected virtual Task OnInitAsync();
    [AsyncStateMachineAttribute("Omnia.Fx.Identities.IdentityProviderWithSynchronizationBase`2/<OnPrepareAsync>d__47")]
protected virtual Task OnPrepareAsync();
    [AsyncStateMachineAttribute("Omnia.Fx.Identities.IdentityProviderWithSynchronizationBase`2/<OnSyncAsync>d__48")]
protected virtual Task OnSyncAsync();
    [AsyncStateMachineAttribute("Omnia.Fx.Identities.IdentityProviderWithSynchronizationBase`2/<OnAfterCommitAsync>d__49")]
protected virtual Task`1<string> OnAfterCommitAsync(IdentityProviderSyncResult result);
    protected virtual void OnCleanUp();
    protected virtual ValueTuple`2<IDictionary`2<IdentityProviderProperty, string>, IdentityProviderData> GetPropertyValue(IIdentityProviderUserSourceIdentity user, IList`1<IdentityProviderProperty> propertiesToMap, List`1<IdentityProviderProperty> propertiesToEvaluate);
    protected virtual ValueTuple`2<IDictionary`2<IdentityProviderProperty, string>, IdentityProviderData> GetPropertyValue(IIdentityProviderGroupSourceIdentity group, IList`1<IdentityProviderProperty> propertiesToMap, List`1<IdentityProviderProperty> propertiesToEvaluate);
    protected virtual Nullable`1<Guid> EvaluateUserType(IDictionary`2<IdentityProviderProperty, string> properties);
    protected virtual bool ShouldIncludeUserInSync(IDictionary`2<IdentityProviderProperty, string> userProperties);
    protected virtual bool ShouldIncludeGroupInSync(IDictionary`2<IdentityProviderProperty, string> groupProperties);
    [AsyncStateMachineAttribute("Omnia.Fx.Identities.IdentityProviderWithSynchronizationBase`2/<ShouldRunAsync>d__56")]
protected virtual Task`1<bool> ShouldRunAsync();
    private bool HasUserTypeAssignmentMappings();
    [AsyncStateMachineAttribute("Omnia.Fx.Identities.IdentityProviderWithSynchronizationBase`2/<UpdateRunState>d__58")]
protected Task UpdateRunState(IdentityProviderState state, string message);
    protected long ElapsedMilliseconds();
    protected void Upsert(IList`1<IIdentityProviderUserSourceIdentity> providerUserIdentities, List`1<IdentityProviderProperty> propertiesToEvaluate, bool ignoreRestoreCheck);
    protected void Upsert(IList`1<IIdentityProviderGroupSourceIdentity> providerGroupIdentities, List`1<IdentityProviderProperty> propertiesToEvaluate);
    protected void AddUsersHandled(IList`1<IIdentityProviderUserSourceIdentity> usersHandled);
    protected void Delete(IList`1<IIdentityProviderUserSourceIdentity> hardRemovedUserIdentities, IList`1<IIdentityProviderUserSourceIdentity> softRemovedUserIdentities);
    protected void Delete(IList`1<IIdentityProviderGroupSourceIdentity> groupIdentities);
    protected void AddGroupMembers(Dictionary`2<string, List`1<IIdentityProviderSourceIdentity>> groupMembersToAdd);
    protected void DeleteGroupMembers(Dictionary`2<string, List`1<IIdentityProviderSourceIdentity>> groupMembersToDelete);
    protected List`1<string> GetAllRestoredGroupProviderIdentities();
    protected List`1<string> GetAllRestoredUserProviderIdentities();
    [AsyncStateMachineAttribute("Omnia.Fx.Identities.IdentityProviderWithSynchronizationBase`2/<DoInitAsync>d__69")]
private Task DoInitAsync();
    [AsyncStateMachineAttribute("Omnia.Fx.Identities.IdentityProviderWithSynchronizationBase`2/<DoEnsureProviderSetup>d__70")]
private Task DoEnsureProviderSetup();
    [AsyncStateMachineAttribute("Omnia.Fx.Identities.IdentityProviderWithSynchronizationBase`2/<DoPrepareAsync>d__71")]
private Task DoPrepareAsync();
    [AsyncStateMachineAttribute("Omnia.Fx.Identities.IdentityProviderWithSynchronizationBase`2/<DoSyncAsync>d__72")]
private Task DoSyncAsync();
    [AsyncStateMachineAttribute("Omnia.Fx.Identities.IdentityProviderWithSynchronizationBase`2/<DoCommitAsync>d__73")]
private Task DoCommitAsync();
    [AsyncStateMachineAttribute("Omnia.Fx.Identities.IdentityProviderWithSynchronizationBase`2/<DoCleanUpAsync>d__74")]
private Task DoCleanUpAsync();
    protected virtual string CreateLogRow(string message);
    protected void AddLogRow(string message, LogLevel logLevel, bool forceToLog);
    private string GetTypeOfSync();
    [AsyncStateMachineAttribute("Omnia.Fx.Identities.IdentityProviderWithSynchronizationBase`2/<DoStartNewRun>d__78")]
private Task DoStartNewRun();
    [AsyncStateMachineAttribute("Omnia.Fx.Identities.IdentityProviderWithSynchronizationBase`2/<AppendSummary>d__79")]
private Task AppendSummary(string message);
    [AsyncStateMachineAttribute("Omnia.Fx.Identities.IdentityProviderWithSynchronizationBase`2/<EndRunSuccessfulWithNoChange>d__80")]
private Task EndRunSuccessfulWithNoChange(string summary);
    [AsyncStateMachineAttribute("Omnia.Fx.Identities.IdentityProviderWithSynchronizationBase`2/<EndRunSuccessful>d__81")]
private Task EndRunSuccessful(string summary);
    [AsyncStateMachineAttribute("Omnia.Fx.Identities.IdentityProviderWithSynchronizationBase`2/<EndRunWithError>d__82")]
private Task EndRunWithError(string summary, List`1<string> resultErrors);
    [AsyncStateMachineAttribute("Omnia.Fx.Identities.IdentityProviderWithSynchronizationBase`2/<EndRunAsCancelled>d__83")]
private Task EndRunAsCancelled(string summary);
    [AsyncStateMachineAttribute("Omnia.Fx.Identities.IdentityProviderWithSynchronizationBase`2/<DoCloseRunAsync>d__84")]
private Task DoCloseRunAsync();
    [AsyncStateMachineAttribute("Omnia.Fx.Identities.IdentityProviderWithSynchronizationBase`2/<CompleteRunInSettingsAsync>d__85")]
private Task CompleteRunInSettingsAsync();
    [AsyncStateMachineAttribute("Omnia.Fx.Identities.IdentityProviderWithSynchronizationBase`2/<AddSyncInstance>d__86")]
private Task AddSyncInstance(string summary, bool success, DateTime startTime, DateTime endTime);
    [AsyncStateMachineAttribute("Omnia.Fx.Identities.IdentityProviderWithSynchronizationBase`2/<LoadSettingsAsync>d__87")]
private Task LoadSettingsAsync();
    [AsyncStateMachineAttribute("Omnia.Fx.Identities.IdentityProviderWithSynchronizationBase`2/<SaveSettingsAsync>d__88")]
private Task SaveSettingsAsync();
    [AsyncStateMachineAttribute("Omnia.Fx.Identities.IdentityProviderWithSynchronizationBase`2/<LoadAutoFailoverSettingsAsync>d__89")]
private Task LoadAutoFailoverSettingsAsync();
    [AsyncStateMachineAttribute("Omnia.Fx.Identities.IdentityProviderWithSynchronizationBase`2/<SaveAutoFailoverSettingsAsync>d__90")]
private Task SaveAutoFailoverSettingsAsync();
    [CompilerGeneratedAttribute]
private string <StartAsync>b__45_0();
    [CompilerGeneratedAttribute]
private string <StartAsync>b__45_1();
    [CompilerGeneratedAttribute]
private bool <DoSyncAsync>b__72_1(Guid x);
}
internal class Omnia.Fx.Identities.IdentityService : IdentityServiceBase {
    private static SemaphoreSlim StaticIdentityLock;
    private static SemaphoreSlim StaticUsernameLock;
    private static List`1<Identity> StaticIdentityResolvingBatch;
    private static List`1<string> StaticUsernameResolvingBatch;
    [CompilerGeneratedAttribute]
private OmniaIdentityServiceOverHttp <IdentityServiceOverHttp>k__BackingField;
    [CompilerGeneratedAttribute]
private UserIdentityPropertyBagService <UserIdentityPropertyBagService>k__BackingField;
    private OmniaIdentityServiceOverHttp IdentityServiceOverHttp { get; }
    private UserIdentityPropertyBagService UserIdentityPropertyBagService { get; }
    protected SemaphoreSlim IdentityLock { get; }
    protected SemaphoreSlim UsernameLock { get; }
    protected List`1<Identity> IdentityResolvingBatch { get; protected set; }
    protected List`1<string> UsernameResolvingBatch { get; protected set; }
    public IdentityService(IConfiguredHttpClient`1<OmniaServiceApi> configuredHttpClient, UserIdentityPropertyBagService userIdentityPropertyBagService, IOmniaContext omniaContext, IIdentityCacheHandler identityCacheHandler);
    private static IdentityService();
    [CompilerGeneratedAttribute]
private OmniaIdentityServiceOverHttp get_IdentityServiceOverHttp();
    [CompilerGeneratedAttribute]
private UserIdentityPropertyBagService get_UserIdentityPropertyBagService();
    protected virtual SemaphoreSlim get_IdentityLock();
    protected virtual SemaphoreSlim get_UsernameLock();
    protected virtual List`1<Identity> get_IdentityResolvingBatch();
    protected virtual void set_IdentityResolvingBatch(List`1<Identity> value);
    protected virtual List`1<string> get_UsernameResolvingBatch();
    protected virtual void set_UsernameResolvingBatch(List`1<string> value);
    [AsyncStateMachineAttribute("Omnia.Fx.Identities.IdentityService/<GetGroupMembersAsync>d__22")]
public sealed virtual Task`1<GroupMembers> GetGroupMembersAsync(GroupIdentity groupIdentity);
    [AsyncStateMachineAttribute("Omnia.Fx.Identities.IdentityService/<GetGroupsMembersAsync>d__23")]
public sealed virtual Task`1<IDictionary`2<GroupIdentity, GroupMembers>> GetGroupsMembersAsync(IEnumerable`1<GroupIdentity> groupIdentities);
    [AsyncStateMachineAttribute("Omnia.Fx.Identities.IdentityService/<GetGroupsUsersAsync>d__24")]
public sealed virtual Task`1<IDictionary`2<GroupIdentity, IList`1<UserIdentity>>> GetGroupsUsersAsync(IEnumerable`1<GroupIdentity> groupIdentities, bool includeTransitiveUsers);
    [AsyncStateMachineAttribute("Omnia.Fx.Identities.IdentityService/<GetUserGroupsAsync>d__25")]
public sealed virtual Task`1<IList`1<GroupIdentity>> GetUserGroupsAsync(UserIdentity userIdentity, bool includeTransitiveGroups);
    [AsyncStateMachineAttribute("Omnia.Fx.Identities.IdentityService/<CheckUserMemberOfGroupsAsync>d__26")]
public sealed virtual Task`1<IDictionary`2<GroupIdentity, bool>> CheckUserMemberOfGroupsAsync(UserIdentity userIdentity, IEnumerable`1<GroupIdentity> groupIdentities);
    [AsyncStateMachineAttribute("Omnia.Fx.Identities.IdentityService/<GetUserDynamicGroupsAsync>d__27")]
public sealed virtual Task`1<IList`1<DynamicGroupIdentity>> GetUserDynamicGroupsAsync(UserIdentity userIdentity);
    [AsyncStateMachineAttribute("Omnia.Fx.Identities.IdentityService/<GetAnonymousDynamicGroupsAsync>d__28")]
public sealed virtual Task`1<IList`1<DynamicGroupIdentity>> GetAnonymousDynamicGroupsAsync(AnonymousIdentity anonymousIdentity);
    [AsyncStateMachineAttribute("Omnia.Fx.Identities.IdentityService/<GetDynamicGroupWithRuleSetAsync>d__29")]
public sealed virtual Task`1<IDictionary`2<DynamicGroupIdentity, DynamicGroupRuleSet>> GetDynamicGroupWithRuleSetAsync(DynamicGroupIdentity[] dynamicGroupIdentities);
    [AsyncStateMachineAttribute("Omnia.Fx.Identities.IdentityService/<GetIdentityWithOldIdentifiersAsync>d__30")]
public sealed virtual Task`1<IDictionary`2<string, Identity>> GetIdentityWithOldIdentifiersAsync(IEnumerable`1<string> loginNames);
    [AsyncStateMachineAttribute("Omnia.Fx.Identities.IdentityService/<GetIdentitiesWithProviderIdentitiesAsync>d__31")]
public sealed virtual Task`1<IDictionary`2<string, Identity>> GetIdentitiesWithProviderIdentitiesAsync(Guid providerId, String[] providerIdentities);
    [AsyncStateMachineAttribute("Omnia.Fx.Identities.IdentityService/<QueryAsync>d__32")]
public sealed virtual Task`1<ItemQueryResult`1<IResolvedIdentity>> QueryAsync(IdentityQuery query);
    [AsyncStateMachineAttribute("Omnia.Fx.Identities.IdentityService/<QueryUsersAsync>d__33")]
public sealed virtual Task`1<ItemQueryResult`1<IResolvedIdentity>> QueryUsersAsync(UserIdentityQuery query);
    [AsyncStateMachineAttribute("Omnia.Fx.Identities.IdentityService/<ResolveUserIdentitiesWithUsernamesInternalAsync>d__34")]
protected virtual Task`1<IDictionary`2<string, ResolvedUserIdentity>> ResolveUserIdentitiesWithUsernamesInternalAsync(IEnumerable`1<string> usernames);
    public sealed virtual IOmniaPropertyBag`1<UserPropertyBagModel> GetUserPropertyBag(UserIdentity userIdentity);
    [AsyncStateMachineAttribute("Omnia.Fx.Identities.IdentityService/<ResolveIdentitiesInternalAsync>d__36")]
protected virtual Task`1<IDictionary`2<Identity, IResolvedIdentity>> ResolveIdentitiesInternalAsync(IEnumerable`1<Identity> identities);
    [AsyncStateMachineAttribute("Omnia.Fx.Identities.IdentityService/<ResolveUserIdentitiesWithEmailsAsync>d__37")]
public sealed virtual Task`1<IDictionary`2<string, ResolvedUserIdentity>> ResolveUserIdentitiesWithEmailsAsync(IEnumerable`1<string> emails);
    [AsyncStateMachineAttribute("Omnia.Fx.Identities.IdentityService/<GetAnonymousIdentitiesAsync>d__38")]
public sealed virtual Task`1<IList`1<AnonymousIdentity>> GetAnonymousIdentitiesAsync();
    [AsyncStateMachineAttribute("Omnia.Fx.Identities.IdentityService/<SetCurrentUserUiLanguageAsync>d__39")]
public sealed virtual Task`1<ResolvedUserIdentity> SetCurrentUserUiLanguageAsync(LanguageTagPropertyValue uiLanguage);
    [AsyncStateMachineAttribute("Omnia.Fx.Identities.IdentityService/<RemoveCurrentUserUiLanguageAsync>d__40")]
public sealed virtual Task`1<ResolvedUserIdentity> RemoveCurrentUserUiLanguageAsync();
    [AsyncStateMachineAttribute("Omnia.Fx.Identities.IdentityService/<CheckCurrentUserIsGroupOwnerAsync>d__41")]
public sealed virtual Task`1<bool> CheckCurrentUserIsGroupOwnerAsync(GroupIdentity groupIdentity);
    [AsyncStateMachineAttribute("Omnia.Fx.Identities.IdentityService/<GetIdentitiesWithUniqueNamesAsync>d__42")]
public sealed virtual Task`1<IDictionary`2<string, Identity>> GetIdentitiesWithUniqueNamesAsync(Guid providerId, String[] uniqueNames);
}
public abstract class Omnia.Fx.Identities.IdentityServiceBase : object {
    [CompilerGeneratedAttribute]
private IIdentityCacheHandler <IdentityCacheHandler>k__BackingField;
    [CompilerGeneratedAttribute]
private IOmniaContext <OmniaContext>k__BackingField;
    private IIdentityCacheHandler IdentityCacheHandler { get; }
    private IOmniaContext OmniaContext { get; }
    protected SemaphoreSlim IdentityLock { get; }
    protected List`1<Identity> IdentityResolvingBatch { get; protected set; }
    protected SemaphoreSlim UsernameLock { get; }
    protected List`1<string> UsernameResolvingBatch { get; protected set; }
    protected IdentityServiceBase(IIdentityCacheHandler identityCacheHandler, IOmniaContext omniaContext);
    [CompilerGeneratedAttribute]
private IIdentityCacheHandler get_IdentityCacheHandler();
    [CompilerGeneratedAttribute]
private IOmniaContext get_OmniaContext();
    protected abstract virtual SemaphoreSlim get_IdentityLock();
    protected abstract virtual List`1<Identity> get_IdentityResolvingBatch();
    protected abstract virtual void set_IdentityResolvingBatch(List`1<Identity> value);
    protected abstract virtual SemaphoreSlim get_UsernameLock();
    protected abstract virtual List`1<string> get_UsernameResolvingBatch();
    protected abstract virtual void set_UsernameResolvingBatch(List`1<string> value);
    [AsyncStateMachineAttribute("Omnia.Fx.Identities.IdentityServiceBase/<ResolveIdentityAsync>d__17")]
public sealed virtual Task`1<IResolvedIdentity> ResolveIdentityAsync(Identity identity);
    [AsyncStateMachineAttribute("Omnia.Fx.Identities.IdentityServiceBase/<ResolveUserIdentityWithUsernameAsync>d__18")]
public sealed virtual Task`1<ResolvedUserIdentity> ResolveUserIdentityWithUsernameAsync(string username);
    [AsyncStateMachineAttribute("Omnia.Fx.Identities.IdentityServiceBase/<ResolveUserIdentitiesWithUsernamesAsync>d__19")]
public sealed virtual Task`1<IDictionary`2<string, ResolvedUserIdentity>> ResolveUserIdentitiesWithUsernamesAsync(IEnumerable`1<string> usernames);
    [AsyncStateMachineAttribute("Omnia.Fx.Identities.IdentityServiceBase/<ResolveIdentitiesAsync>d__20")]
public sealed virtual Task`1<IDictionary`2<Identity, IResolvedIdentity>> ResolveIdentitiesAsync(IEnumerable`1<Identity> identities);
    [AsyncStateMachineAttribute("Omnia.Fx.Identities.IdentityServiceBase/<ResolveGroupIdentityAsync>d__21")]
public sealed virtual Task`1<ResolvedGroupIdentity> ResolveGroupIdentityAsync(GroupIdentity identity);
    [AsyncStateMachineAttribute("Omnia.Fx.Identities.IdentityServiceBase/<ResolveGroupIdentitiesAsync>d__22")]
public sealed virtual Task`1<IDictionary`2<GroupIdentity, ResolvedGroupIdentity>> ResolveGroupIdentitiesAsync(IEnumerable`1<GroupIdentity> identities);
    [AsyncStateMachineAttribute("Omnia.Fx.Identities.IdentityServiceBase/<ResolveExtensionIdentityAsync>d__23")]
public sealed virtual Task`1<ResolvedExtensionIdentity> ResolveExtensionIdentityAsync(ExtensionIdentity identity);
    [AsyncStateMachineAttribute("Omnia.Fx.Identities.IdentityServiceBase/<ResolveExtensionIdentitiesAsync>d__24")]
public sealed virtual Task`1<IDictionary`2<ExtensionIdentity, ResolvedExtensionIdentity>> ResolveExtensionIdentitiesAsync(IEnumerable`1<ExtensionIdentity> identities);
    [AsyncStateMachineAttribute("Omnia.Fx.Identities.IdentityServiceBase/<ResolveAnonymousIdentityAsync>d__25")]
public sealed virtual Task`1<ResolvedAnonymousIdentity> ResolveAnonymousIdentityAsync(AnonymousIdentity identity);
    [AsyncStateMachineAttribute("Omnia.Fx.Identities.IdentityServiceBase/<ResolveAnonymousIdentitiesAsync>d__26")]
public sealed virtual Task`1<IDictionary`2<AnonymousIdentity, ResolvedAnonymousIdentity>> ResolveAnonymousIdentitiesAsync(IEnumerable`1<AnonymousIdentity> identities);
    [AsyncStateMachineAttribute("Omnia.Fx.Identities.IdentityServiceBase/<ResolveUserIdentityAsync>d__27")]
public sealed virtual Task`1<ResolvedUserIdentity> ResolveUserIdentityAsync(UserIdentity identity);
    [AsyncStateMachineAttribute("Omnia.Fx.Identities.IdentityServiceBase/<ResolveUserIdentitiesAsync>d__28")]
public sealed virtual Task`1<IDictionary`2<UserIdentity, ResolvedUserIdentity>> ResolveUserIdentitiesAsync(IEnumerable`1<UserIdentity> identities);
    [AsyncStateMachineAttribute("Omnia.Fx.Identities.IdentityServiceBase/<ResolveDynamicGroupIdentityAsync>d__29")]
public sealed virtual Task`1<ResolvedDynamicGroupIdentity> ResolveDynamicGroupIdentityAsync(DynamicGroupIdentity identity);
    [AsyncStateMachineAttribute("Omnia.Fx.Identities.IdentityServiceBase/<ResolveDynamicGroupIdentitiesAsync>d__30")]
public sealed virtual Task`1<IDictionary`2<DynamicGroupIdentity, ResolvedDynamicGroupIdentity>> ResolveDynamicGroupIdentitiesAsync(IEnumerable`1<DynamicGroupIdentity> identities);
    protected abstract virtual Task`1<IDictionary`2<Identity, IResolvedIdentity>> ResolveIdentitiesInternalAsync(IEnumerable`1<Identity> identities);
    protected abstract virtual Task`1<IDictionary`2<string, ResolvedUserIdentity>> ResolveUserIdentitiesWithUsernamesInternalAsync(IEnumerable`1<string> usernames);
    [AsyncStateMachineAttribute("Omnia.Fx.Identities.IdentityServiceBase/<CheckCurrentUserIsOmniaUser>d__33")]
public sealed virtual Task`1<bool> CheckCurrentUserIsOmniaUser();
    [AsyncStateMachineAttribute("Omnia.Fx.Identities.IdentityServiceBase/<ResolveIdentitiesBatchAsync>d__34`2")]
protected Task`1<IDictionary`2<TKey, TValue>> ResolveIdentitiesBatchAsync(SemaphoreSlim lock, List`1<TKey> resolvingKeyBatch, IEnumerable`1<TKey> keys, Func`2<TKey, TValue> getCacheValue, Action`2<TKey, TValue> setCacheValue, Func`2<IEnumerable`1<TKey>, Task`1<IDictionary`2<TKey, TValue>>> resolveAsync);
    [CompilerGeneratedAttribute]
private ValueTuple`2<string, ResolvedUserIdentity> <ResolveUserIdentitiesWithUsernamesAsync>b__19_1(string username);
    [CompilerGeneratedAttribute]
private void <ResolveUserIdentitiesWithUsernamesAsync>b__19_4(string username, ResolvedUserIdentity resolvedUserIdentity);
    [CompilerGeneratedAttribute]
private ValueTuple`2<Identity, ICacheDependencyResult`1<IResolvedIdentity>> <ResolveIdentitiesAsync>b__20_1(Identity identity);
    [CompilerGeneratedAttribute]
private IResolvedIdentity <ResolveIdentitiesAsync>b__20_4(Identity identity);
    [CompilerGeneratedAttribute]
private void <ResolveIdentitiesAsync>b__20_5(Identity identity, IResolvedIdentity resolvedIdentity);
    [CompilerGeneratedAttribute]
private IResolvedIdentity <ResolveIdentitiesAsync>b__20_7(Identity identity);
}
public interface Omnia.Fx.Identities.IIdentityCacheHandler {
    public abstract virtual ICacheDependencyResult`1<IResolvedIdentity> GetIdentityCache(Identity identity);
    public abstract virtual ICacheDependencyResult`1<IResolvedIdentity> GetOrSetIdentityCache(Identity identity, Func`2<IOmniaDependencyCacheEntry, IResolvedIdentity> setItemFactory);
    public abstract virtual ResolvedUserIdentity GetResolvedUserIdentity(string username);
    public abstract virtual ResolvedUserIdentity GetOrSetResolvedUserIdentity(string username, Func`1<ResolvedUserIdentity> setItemFactory);
    public abstract virtual void InvalidateIdentityCache(Identity identity);
}
public interface Omnia.Fx.Identities.IIdentityCreationRequestService {
    public abstract virtual ValueTask`1<BusinessProfileIdentityCreationRequestSettings> GetBusinessProfileIdentityCreationRequestSettingsAsync(Guid businessProfileId);
    public abstract virtual Task`1<IdentityCreationRequestCreatedResponse> CreateAsync(IdentityCreationRequest request);
    public abstract virtual Task`1<IdentityCreationRequestConfirmEmailResult> GetConfirmEmailStatusAsync(IdentityEmailConfirmationRequest request);
    public abstract virtual ValueTask`1<IdentityCreationRequestQueryResult> QueryAsync(IdentityCreationRequestQuery query);
    public abstract virtual ValueTask`1<IdentityCreationRequest> ApproveOrRejectAsync(IdentityCreationRequestApproval approvalRequest);
    public abstract virtual ValueTask`1<IdentityCreationRequest> UpdateAsync(IdentityCreationRequestUpdate updatedRequest);
    public abstract virtual ValueTask`1<IdentityCreationRequestCreatedResponse> ResendConfirmationEmailAsync(IdentityCreationRequestCreatedResponse earlierResponse);
    public abstract virtual Task`1<ValueTuple`2<bool, string>> ConfirmEmailAsync(Guid requestId, string redirectUrl);
    public abstract virtual Task`1<ValueTuple`2<bool, string>> ConfirmEmailAsync(Guid requestId, string redirectUrl, bool skipSendingEmail);
}
public interface Omnia.Fx.Identities.IIdentityHelper {
    public abstract virtual bool IsIdentitySupportSharePointProfile(ResolvedUserIdentity resolvedIdentity);
}
public interface Omnia.Fx.Identities.IIdentityProvider {
    public Guid Id { get; }
    public string DisplayName { get; }
    public IList`1<IdentityTypes> SupportedIdentities { get; }
    public abstract virtual Guid get_Id();
    public abstract virtual string get_DisplayName();
    public abstract virtual IList`1<IdentityTypes> get_SupportedIdentities();
    public abstract virtual IdentityProviderData CreateProviderDataFromAuthInformation(string username, UserAuthenticationInformation authenticationInformation);
}
public interface Omnia.Fx.Identities.IIdentityProviderRegistrationService {
    public abstract virtual List`1<IIdentityProvider> GetRegisteredProviders();
    public abstract virtual IIdentityProvider GetIdentityProvider(Guid providerId);
}
public interface Omnia.Fx.Identities.IIdentityProviderRunLogService {
    public abstract virtual Task Upsert(IdentityProviderRunLog providerRun);
    public abstract virtual Task`1<IdentityProviderRunLog> GetById(Guid id);
    public abstract virtual Task`1<ValueTuple`2<IList`1<IdentityProviderRunLog>, int>> GetAll(Nullable`1<Guid> providerId, int pageNr, int pageSize, string sortColumn, bool sortDesc);
    public abstract virtual Task`1<IdentityProviderRunLog> GetLastByProviderId(Guid providerId);
}
public interface Omnia.Fx.Identities.IIdentityProviderService {
    public abstract virtual Task EnsureProvidedSetupAsync(IIdentityProviderWithSynchronization identityProvider);
    public abstract virtual Task`1<T> GetSyncStateAsync();
    public abstract virtual Task`1<IIdentityProviderSynchronizationRun> CreateSyncRunInstance(IIdentityProviderWithSynchronization provider, IdentitySyncRunInformation syncRunInformation, CancellationToken cancellationToken);
    public abstract virtual Nullable`1<DateTime> GetNextScheduleRunDateTime(string cronExpression, Nullable`1<DateTime> dateTimeUtc);
    public abstract virtual Task`1<TSettings> LoadSettingsAsync(Guid providerId);
    public abstract virtual Task SaveSettingsAsync(Guid providerId, TSettings providerSettings);
    public abstract virtual Task`1<IdentityProviderAutoFailoverSettings> LoadAutFailoverSettingsAsync(Guid providerId);
    public abstract virtual Task SaveAutoFailoverSettingsAsync(Guid providerId, IdentityProviderAutoFailoverSettings providerSettings);
    public abstract virtual Task`1<ValueTuple`2<IList`1<IdentityProviderRunLog>, int>> GetLogsAsync(Nullable`1<Guid> providerId, int pageNr, int pageSize, string sortColumn, bool sortDesc);
    public abstract virtual Task`1<TSettings> ForceFullSyncAsync(Guid providerId);
    public abstract virtual Task`1<TSettings> ActivateFullLog(Guid providerId);
    public abstract virtual Task`1<TSettings> TogglePauseAsync(Guid providerId);
    public abstract virtual Task`1<TSettings> ForceFullUserSyncAsync(Guid providerId);
    public abstract virtual Task`1<LanguageTag> GetTenantDefaultLanguage(LanguageTag defaultLanguage);
    public abstract virtual Task RemoveSyncStateAsync();
}
public interface Omnia.Fx.Identities.IIdentityProviderWithSynchronization {
    [TupleElementNamesAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public ValueTuple`2<UserBuiltinSyncBindings, GroupBuiltinSyncBindings> SyncBindingsConfiguration { get; }
    public IList`1<GroupType> ProvidedGroupTypes { get; }
    public abstract virtual ValueTuple`2<UserBuiltinSyncBindings, GroupBuiltinSyncBindings> get_SyncBindingsConfiguration();
    public abstract virtual IList`1<GroupType> get_ProvidedGroupTypes();
    public abstract virtual Task StartAsync(CancellationToken cancellationToken);
}
public interface Omnia.Fx.Identities.IIdentityService {
    public abstract virtual Task`1<ItemQueryResult`1<IResolvedIdentity>> QueryAsync(IdentityQuery query);
    public abstract virtual Task`1<ItemQueryResult`1<IResolvedIdentity>> QueryUsersAsync(UserIdentityQuery query);
    public abstract virtual Task`1<ResolvedUserIdentity> ResolveUserIdentityWithUsernameAsync(string username);
    public abstract virtual Task`1<IDictionary`2<string, ResolvedUserIdentity>> ResolveUserIdentitiesWithUsernamesAsync(IEnumerable`1<string> usernames);
    public abstract virtual Task`1<IResolvedIdentity> ResolveIdentityAsync(Identity identity);
    public abstract virtual Task`1<IDictionary`2<Identity, IResolvedIdentity>> ResolveIdentitiesAsync(IEnumerable`1<Identity> identities);
    public abstract virtual Task`1<ResolvedGroupIdentity> ResolveGroupIdentityAsync(GroupIdentity identity);
    public abstract virtual Task`1<IDictionary`2<GroupIdentity, ResolvedGroupIdentity>> ResolveGroupIdentitiesAsync(IEnumerable`1<GroupIdentity> identities);
    public abstract virtual Task`1<ResolvedExtensionIdentity> ResolveExtensionIdentityAsync(ExtensionIdentity identity);
    public abstract virtual Task`1<ResolvedAnonymousIdentity> ResolveAnonymousIdentityAsync(AnonymousIdentity identity);
    public abstract virtual Task`1<IDictionary`2<AnonymousIdentity, ResolvedAnonymousIdentity>> ResolveAnonymousIdentitiesAsync(IEnumerable`1<AnonymousIdentity> identities);
    public abstract virtual Task`1<IDictionary`2<ExtensionIdentity, ResolvedExtensionIdentity>> ResolveExtensionIdentitiesAsync(IEnumerable`1<ExtensionIdentity> identities);
    public abstract virtual Task`1<ResolvedUserIdentity> ResolveUserIdentityAsync(UserIdentity identity);
    public abstract virtual Task`1<IDictionary`2<UserIdentity, ResolvedUserIdentity>> ResolveUserIdentitiesAsync(IEnumerable`1<UserIdentity> identities);
    public abstract virtual Task`1<ResolvedDynamicGroupIdentity> ResolveDynamicGroupIdentityAsync(DynamicGroupIdentity identity);
    public abstract virtual Task`1<IDictionary`2<DynamicGroupIdentity, ResolvedDynamicGroupIdentity>> ResolveDynamicGroupIdentitiesAsync(IEnumerable`1<DynamicGroupIdentity> identities);
    public abstract virtual Task`1<IList`1<GroupIdentity>> GetUserGroupsAsync(UserIdentity userIdentity, bool includeTransitiveGroups);
    public abstract virtual Task`1<IDictionary`2<GroupIdentity, bool>> CheckUserMemberOfGroupsAsync(UserIdentity userIdentity, IEnumerable`1<GroupIdentity> groupIdentities);
    public abstract virtual Task`1<IList`1<DynamicGroupIdentity>> GetUserDynamicGroupsAsync(UserIdentity userIdentity);
    public abstract virtual Task`1<IList`1<DynamicGroupIdentity>> GetAnonymousDynamicGroupsAsync(AnonymousIdentity anonymousIdentity);
    public abstract virtual Task`1<IDictionary`2<DynamicGroupIdentity, DynamicGroupRuleSet>> GetDynamicGroupWithRuleSetAsync(DynamicGroupIdentity[] dynamicGroupIdentities);
    public abstract virtual Task`1<GroupMembers> GetGroupMembersAsync(GroupIdentity groupIdentity);
    public abstract virtual Task`1<IDictionary`2<GroupIdentity, GroupMembers>> GetGroupsMembersAsync(IEnumerable`1<GroupIdentity> groupIdentities);
    public abstract virtual Task`1<IDictionary`2<GroupIdentity, IList`1<UserIdentity>>> GetGroupsUsersAsync(IEnumerable`1<GroupIdentity> groupIdentites, bool includeTransitiveUsers);
    [ObsoleteAttribute("This method is only used for 7.0 Data Migration only.")]
public abstract virtual Task`1<IDictionary`2<string, Identity>> GetIdentityWithOldIdentifiersAsync(IEnumerable`1<string> loginNames);
    public abstract virtual Task`1<IDictionary`2<string, Identity>> GetIdentitiesWithProviderIdentitiesAsync(Guid providerId, String[] providerIdentities);
    public abstract virtual Task`1<IDictionary`2<string, Identity>> GetIdentitiesWithUniqueNamesAsync(Guid providerId, String[] uniqueNames);
    public abstract virtual IOmniaPropertyBag`1<UserPropertyBagModel> GetUserPropertyBag(UserIdentity userIdentity);
    public abstract virtual Task`1<IDictionary`2<string, ResolvedUserIdentity>> ResolveUserIdentitiesWithEmailsAsync(IEnumerable`1<string> emails);
    public abstract virtual Task`1<bool> CheckCurrentUserIsOmniaUser();
    public abstract virtual Task`1<IList`1<AnonymousIdentity>> GetAnonymousIdentitiesAsync();
    public abstract virtual Task`1<ResolvedUserIdentity> SetCurrentUserUiLanguageAsync(LanguageTagPropertyValue uiLanguage);
    public abstract virtual Task`1<ResolvedUserIdentity> RemoveCurrentUserUiLanguageAsync();
    public abstract virtual Task`1<bool> CheckCurrentUserIsGroupOwnerAsync(GroupIdentity groupIdentity);
}
[ExtensionAttribute]
public static class Omnia.Fx.Identities.OmniaResolveUserIdentityExtension : object {
    [ExtensionAttribute]
public static bool IsOmniaUser(ResolvedUserIdentity identity);
}
internal class Omnia.Fx.Identities.UserIdentityPropertyBagService : object {
    [CompilerGeneratedAttribute]
private IConfiguredHttpClient`1<OmniaServiceApi> <OmniaHttpClient>k__BackingField;
    [CompilerGeneratedAttribute]
private OmniaTargetedSynchronizedMemoryCache <OmniaSynchronizedMemoryCache>k__BackingField;
    private IConfiguredHttpClient`1<OmniaServiceApi> OmniaHttpClient { get; }
    private OmniaTargetedSynchronizedMemoryCache OmniaSynchronizedMemoryCache { get; }
    public UserIdentityPropertyBagService(IConfiguredHttpClient`1<OmniaServiceApi> omniaHttpClient, OmniaTargetedSynchronizedMemoryCache omniaSynchronizedMemoryCache);
    [CompilerGeneratedAttribute]
private IConfiguredHttpClient`1<OmniaServiceApi> get_OmniaHttpClient();
    [CompilerGeneratedAttribute]
private OmniaTargetedSynchronizedMemoryCache get_OmniaSynchronizedMemoryCache();
    public IOmniaPropertyBag`1<UserPropertyBagModel> GetPropertyBag(UserIdentity userIdentity);
}
public interface Omnia.Fx.ImageProcessing.IImageProcessingService {
    public abstract virtual ValueTask CropAndSaveImageFileAsync(string sourceFilePath, string targetFilePath, CropArea cropArea);
    public abstract virtual ValueTask`1<MemoryStream> CropImageAsync(string sourceFilePath, CropArea cropArea);
    public abstract virtual ValueTask`1<Tuple`2<MemoryStream, CropArea>> CropImageByRatioAsync(string sourceFilePath, int x, int y);
    public abstract virtual ValueTask`1<Tuple`2<MemoryStream, string>> ResizeImage(Stream imageStream, ScalingSettings scalingSettings);
    public abstract virtual ValueTask`1<ImageDataInfo> ResizeImageAsBase64String(Stream imageStream, ScalingSettings scalingSettings);
    public abstract virtual ValueTask`1<ImageDataInfo> CropImageAsBase64String(Stream imageStream, int width, int height, int x, int y);
    public abstract virtual bool ValidateFileType(string imageFormat);
}
public class Omnia.Fx.ImageProcessing.ImageProcessingService : object {
    private int DefaultJpegQualityCompression;
    [AsyncStateMachineAttribute("Omnia.Fx.ImageProcessing.ImageProcessingService/<CropAndSaveImageFileAsync>d__2")]
public sealed virtual ValueTask CropAndSaveImageFileAsync(string sourceFilePath, string targetFilePath, CropArea cropArea);
    [AsyncStateMachineAttribute("Omnia.Fx.ImageProcessing.ImageProcessingService/<CropImageAsync>d__3")]
public sealed virtual ValueTask`1<MemoryStream> CropImageAsync(string sourceFilePath, CropArea cropArea);
    [AsyncStateMachineAttribute("Omnia.Fx.ImageProcessing.ImageProcessingService/<CropImageByRatioAsync>d__4")]
public sealed virtual ValueTask`1<Tuple`2<MemoryStream, CropArea>> CropImageByRatioAsync(string sourceFilePath, int x, int y);
    [AsyncStateMachineAttribute("Omnia.Fx.ImageProcessing.ImageProcessingService/<ResizeImage>d__5")]
public sealed virtual ValueTask`1<Tuple`2<MemoryStream, string>> ResizeImage(Stream imageStream, ScalingSettings scalingSettings);
    private Tuple`2<int, int> GetTargetDimensions(Image sourceImage, int maxDimension);
    private CropArea FigureOutCropArea(int sourceImageWidth, int sourceImageHeight, int x, int y);
    private static ValueTuple`2<RotateMode, FlipMode> GetRotateFlipMode(string exifOrientation);
    [AsyncStateMachineAttribute("Omnia.Fx.ImageProcessing.ImageProcessingService/<ResizeImageAsBase64String>d__9")]
public sealed virtual ValueTask`1<ImageDataInfo> ResizeImageAsBase64String(Stream imageStream, ScalingSettings scalingSettings);
    [AsyncStateMachineAttribute("Omnia.Fx.ImageProcessing.ImageProcessingService/<CropImageAsBase64String>d__10")]
public sealed virtual ValueTask`1<ImageDataInfo> CropImageAsBase64String(Stream imageStream, int width, int height, int x, int y);
    public sealed virtual bool ValidateFileType(string imageFormat);
}
public class Omnia.Fx.Json.ContractResolvers.CamelCaseExceptDictionaryKeysResolver : CamelCasePropertyNamesContractResolver {
    protected virtual JsonDictionaryContract CreateDictionaryContract(Type objectType);
}
public class Omnia.Fx.Layouts.AttachableLayoutBuilder`1 : object {
    [CompilerGeneratedAttribute]
private Layout <Layout>k__BackingField;
    private TAttachableTo _attachableInstance;
    public Layout Layout { get; private set; }
    public AttachableLayoutBuilder`1(TAttachableTo attachableInstance, Guid ownerLayoutId);
    public AttachableLayoutBuilder`1(TAttachableTo attachableInstance, string fromJson);
    public AttachableLayoutBuilder`1(TAttachableTo attachableInstance, Layout layoutData);
    [CompilerGeneratedAttribute]
public Layout get_Layout();
    [CompilerGeneratedAttribute]
private void set_Layout(Layout value);
    private sealed virtual override TAttachableTo Omnia.Fx.Layouts.IFluentAttachableLayoutBuilder<TAttachableTo>.Attach();
    private void Setup(Guid ownerLayoutId);
    public IFluentAttachableLayoutBuilder`1<TAttachableTo> WithLayoutBuilder();
    public sealed virtual IFluentAttachableLayoutBuilder`1<TAttachableTo> WithColumnedSection(Guid id, Action`1<IFluentLayoutColumnedSectionBuilder> sectionBuilder);
    public sealed virtual IFluentAttachableLayoutBuilder`1<TAttachableTo> WithTabbedSection(Guid id, Action`1<IFluentLayoutTabbedSectionBuilder> sectionBuilder);
    public sealed virtual IFluentAttachableLayoutBuilder`1<TAttachableTo> WithAccordionedSection(Guid id, Action`1<IFluentLayoutAccordionedSectionBuilder> sectionBuilder);
    public sealed virtual IFluentAttachableLayoutBuilder`1<TAttachableTo> WithSteppedSection(Guid id, Action`1<IFluentLayoutSteppedSectionBuilder> sectionBuilder);
    public IFluentAttachableLayoutBuilder`1<TAttachableTo> Attach();
    public sealed virtual IFluentAttachableLayoutBuilder`1<TAttachableTo> FindLayoutItem(Guid id, Func`2<TLayoutItem, TLayoutItem> itemModifier);
    [CompilerGeneratedAttribute]
private void <FindLayoutItem>g__RecursiveFindLayoutItem|16_0(List`1<LayoutItem> items, <>c__DisplayClass16_0`1& );
    [CompilerGeneratedAttribute]
private void <FindLayoutItem>g__RecursiveFindBlock|16_1(LayoutItem item, <>c__DisplayClass16_0`1& );
}
public class Omnia.Fx.Layouts.FluentLayoutAccordionBuilder : object {
    private Layout _layout;
    [CompilerGeneratedAttribute]
private SectionItem`1<AccordionedSectionItemSettings> <Accordion>k__BackingField;
    public SectionItem`1<AccordionedSectionItemSettings> Accordion { get; private set; }
    public FluentLayoutAccordionBuilder(Guid id, Guid ownerLayoutId, LayoutItem parent, Layout layout);
    [CompilerGeneratedAttribute]
public sealed virtual SectionItem`1<AccordionedSectionItemSettings> get_Accordion();
    [CompilerGeneratedAttribute]
private void set_Accordion(SectionItem`1<AccordionedSectionItemSettings> value);
    public sealed virtual IFluentLayoutAccordionBuilder AddBlock(Guid id, Func`2<TBlock, TBlock> blockFunc);
    public sealed virtual IFluentLayoutAccordionBuilder AddColumnedSection(Guid id, Action`1<IFluentLayoutColumnedSectionBuilder> sectionBuilder);
    public sealed virtual IFluentLayoutAccordionBuilder AddTabbedSection(Guid id, Action`1<IFluentLayoutTabbedSectionBuilder> tabbedSectionBuilder);
    public sealed virtual IFluentLayoutAccordionBuilder AddAccordionedSection(Guid id, Action`1<IFluentLayoutAccordionedSectionBuilder> accordionedSectionBuilder);
}
public class Omnia.Fx.Layouts.FluentLayoutAccordionedSectionBuilder : object {
    private Layout _layout;
    [CompilerGeneratedAttribute]
private Section`1<AccordionedSectionSettings> <Section>k__BackingField;
    public Section`1<AccordionedSectionSettings> Section { get; private set; }
    public FluentLayoutAccordionedSectionBuilder(Guid id, Guid ownerLayoutId, LayoutItem parent, Layout layoutData);
    [CompilerGeneratedAttribute]
public sealed virtual Section`1<AccordionedSectionSettings> get_Section();
    [CompilerGeneratedAttribute]
private void set_Section(Section`1<AccordionedSectionSettings> value);
    public sealed virtual IFluentLayoutAccordionedSectionBuilder AddAccordion(Guid id, Action`1<IFluentLayoutAccordionBuilder> accordionBuilder);
}
public class Omnia.Fx.Layouts.FluentLayoutColumnBuilder : object {
    private Layout _layout;
    [CompilerGeneratedAttribute]
private SectionItem`1<ColumnedSectionItemSettings> <Column>k__BackingField;
    public SectionItem`1<ColumnedSectionItemSettings> Column { get; private set; }
    public FluentLayoutColumnBuilder(Guid id, Guid ownerLayoutId, LayoutItem parent, Layout layoutData);
    [CompilerGeneratedAttribute]
public sealed virtual SectionItem`1<ColumnedSectionItemSettings> get_Column();
    [CompilerGeneratedAttribute]
private void set_Column(SectionItem`1<ColumnedSectionItemSettings> value);
    public sealed virtual IFluentLayoutColumnBuilder AddBlock(Guid id, Func`2<TBlock, TBlock> blockFunc);
    public sealed virtual IFluentLayoutColumnBuilder AddColumnedSection(Guid id, Action`1<IFluentLayoutColumnedSectionBuilder> sectionBuilder);
    public sealed virtual IFluentLayoutColumnBuilder AddTabbedSection(Guid id, Action`1<IFluentLayoutTabbedSectionBuilder> tabbedSectionBuilder);
    public sealed virtual IFluentLayoutColumnBuilder AddAccordionedSection(Guid id, Action`1<IFluentLayoutAccordionedSectionBuilder> accordionedSectionBuilder);
}
public class Omnia.Fx.Layouts.FluentLayoutColumnedSectionBuilder : object {
    private Layout _layoutData;
    [CompilerGeneratedAttribute]
private Section`1<ColumnedSectionSettings> <Section>k__BackingField;
    public Section`1<ColumnedSectionSettings> Section { get; private set; }
    public FluentLayoutColumnedSectionBuilder(Guid id, Guid ownerLayoutId, LayoutItem parent, Layout layoutData);
    [CompilerGeneratedAttribute]
public sealed virtual Section`1<ColumnedSectionSettings> get_Section();
    [CompilerGeneratedAttribute]
private void set_Section(Section`1<ColumnedSectionSettings> value);
    public sealed virtual IFluentLayoutColumnedSectionBuilder AddColumn(Guid id, Action`1<IFluentLayoutColumnBuilder> columnBuilder);
}
public class Omnia.Fx.Layouts.FluentLayoutSteppedSectionBuilder : object {
    private Layout _layout;
    [CompilerGeneratedAttribute]
private Section`1<SteppedSectionSettings> <Section>k__BackingField;
    public Section`1<SteppedSectionSettings> Section { get; private set; }
    public FluentLayoutSteppedSectionBuilder(Guid id, Guid ownerLayoutId, LayoutItem parent, Layout layoutData);
    [CompilerGeneratedAttribute]
public sealed virtual Section`1<SteppedSectionSettings> get_Section();
    [CompilerGeneratedAttribute]
private void set_Section(Section`1<SteppedSectionSettings> value);
    public sealed virtual IFluentLayoutSteppedSectionBuilder AddStepper(Guid id, Action`1<IFluentLayoutStepperBuilder> stepperBuilder);
}
public class Omnia.Fx.Layouts.FluentLayoutStepperBuilder : object {
    private Layout _layout;
    [CompilerGeneratedAttribute]
private SectionItem`1<SteppedSectionItemSettings> <Stepper>k__BackingField;
    public SectionItem`1<SteppedSectionItemSettings> Stepper { get; private set; }
    public FluentLayoutStepperBuilder(Guid id, Guid ownerLayoutId, LayoutItem parent, Layout layoutData);
    [CompilerGeneratedAttribute]
public sealed virtual SectionItem`1<SteppedSectionItemSettings> get_Stepper();
    [CompilerGeneratedAttribute]
private void set_Stepper(SectionItem`1<SteppedSectionItemSettings> value);
    public sealed virtual IFluentLayoutStepperBuilder AddBlock(Guid id, Func`2<TBlock, TBlock> blockFunc);
    public sealed virtual IFluentLayoutStepperBuilder AddColumnedSection(Guid id, Action`1<IFluentLayoutColumnedSectionBuilder> sectionBuilder);
    public sealed virtual IFluentLayoutStepperBuilder AddTabbedSection(Guid id, Action`1<IFluentLayoutTabbedSectionBuilder> tabbedSectionBuilder);
    public sealed virtual IFluentLayoutStepperBuilder AddAccordionedSection(Guid id, Action`1<IFluentLayoutAccordionedSectionBuilder> accordionedSectionBuilder);
    public sealed virtual IFluentLayoutStepperBuilder AddSteppedSection(Guid id, Action`1<IFluentLayoutSteppedSectionBuilder> steppedSectionBuilder);
}
public class Omnia.Fx.Layouts.FluentLayoutTabbedSectionBuilder : object {
    private Layout _layout;
    [CompilerGeneratedAttribute]
private Section`1<TabbedSectionSettings> <Section>k__BackingField;
    public Section`1<TabbedSectionSettings> Section { get; private set; }
    public FluentLayoutTabbedSectionBuilder(Guid id, Guid ownerLayoutId, LayoutItem parent, Layout layoutData);
    [CompilerGeneratedAttribute]
public sealed virtual Section`1<TabbedSectionSettings> get_Section();
    [CompilerGeneratedAttribute]
private void set_Section(Section`1<TabbedSectionSettings> value);
    public sealed virtual IFluentLayoutTabbedSectionBuilder AddTab(Guid id, Action`1<IFluentLayoutTabBuilder> tabBuilder);
}
public class Omnia.Fx.Layouts.FluentLayoutTabBuilder : object {
    private Layout _layout;
    [CompilerGeneratedAttribute]
private SectionItem`1<TabbedSectionItemSettings> <Tab>k__BackingField;
    public SectionItem`1<TabbedSectionItemSettings> Tab { get; private set; }
    public FluentLayoutTabBuilder(Guid id, Guid ownerLayoutId, LayoutItem parent, Layout layout);
    [CompilerGeneratedAttribute]
public sealed virtual SectionItem`1<TabbedSectionItemSettings> get_Tab();
    [CompilerGeneratedAttribute]
private void set_Tab(SectionItem`1<TabbedSectionItemSettings> value);
    public sealed virtual IFluentLayoutTabBuilder AddBlock(Guid id, Func`2<TBlock, TBlock> blockFunc);
    public sealed virtual IFluentLayoutTabBuilder AddColumnedSection(Guid id, Action`1<IFluentLayoutColumnedSectionBuilder> sectionBuilder);
    public sealed virtual IFluentLayoutTabBuilder AddTabbedSection(Guid id, Action`1<IFluentLayoutTabbedSectionBuilder> tabbedSectionBuilder);
    public sealed virtual IFluentLayoutTabBuilder AddAccordionedSection(Guid id, Action`1<IFluentLayoutAccordionedSectionBuilder> accordionedSectionBuilder);
}
public interface Omnia.Fx.Layouts.IFluentAttachableLayoutBuilder`1 {
    public abstract virtual IFluentAttachableLayoutBuilder`1<TAttachableTo> WithColumnedSection(Guid id, Action`1<IFluentLayoutColumnedSectionBuilder> sectionBuilder);
    public abstract virtual IFluentAttachableLayoutBuilder`1<TAttachableTo> WithTabbedSection(Guid id, Action`1<IFluentLayoutTabbedSectionBuilder> sectionBuilder);
    public abstract virtual IFluentAttachableLayoutBuilder`1<TAttachableTo> WithAccordionedSection(Guid id, Action`1<IFluentLayoutAccordionedSectionBuilder> sectionBuilder);
    public abstract virtual IFluentAttachableLayoutBuilder`1<TAttachableTo> WithSteppedSection(Guid id, Action`1<IFluentLayoutSteppedSectionBuilder> sectionBuilder);
    public abstract virtual IFluentAttachableLayoutBuilder`1<TAttachableTo> FindLayoutItem(Guid id, Func`2<TBlock, TBlock> blockModifier);
    public abstract virtual TAttachableTo Attach();
}
public interface Omnia.Fx.Layouts.IFluentLayoutAccordionBuilder {
    public SectionItem`1<AccordionedSectionItemSettings> Accordion { get; }
    public abstract virtual SectionItem`1<AccordionedSectionItemSettings> get_Accordion();
    public abstract virtual IFluentLayoutAccordionBuilder AddBlock(Guid id, Func`2<TBlock, TBlock> block);
    public abstract virtual IFluentLayoutAccordionBuilder AddColumnedSection(Guid id, Action`1<IFluentLayoutColumnedSectionBuilder> sectionBuilder);
    public abstract virtual IFluentLayoutAccordionBuilder AddTabbedSection(Guid id, Action`1<IFluentLayoutTabbedSectionBuilder> tabbedSectionBuilder);
    public abstract virtual IFluentLayoutAccordionBuilder AddAccordionedSection(Guid id, Action`1<IFluentLayoutAccordionedSectionBuilder> accordionedSectionBuilder);
}
public interface Omnia.Fx.Layouts.IFluentLayoutAccordionedSectionBuilder {
    public Section`1<AccordionedSectionSettings> Section { get; }
    public abstract virtual Section`1<AccordionedSectionSettings> get_Section();
    public abstract virtual IFluentLayoutAccordionedSectionBuilder AddAccordion(Guid id, Action`1<IFluentLayoutAccordionBuilder> accordionBuilder);
}
public interface Omnia.Fx.Layouts.IFluentLayoutColumnBuilder {
    public SectionItem`1<ColumnedSectionItemSettings> Column { get; }
    public abstract virtual SectionItem`1<ColumnedSectionItemSettings> get_Column();
    public abstract virtual IFluentLayoutColumnBuilder AddBlock(Guid id, Func`2<TBlock, TBlock> block);
    public abstract virtual IFluentLayoutColumnBuilder AddColumnedSection(Guid id, Action`1<IFluentLayoutColumnedSectionBuilder> sectionBuilder);
    public abstract virtual IFluentLayoutColumnBuilder AddTabbedSection(Guid id, Action`1<IFluentLayoutTabbedSectionBuilder> tabbedSectionBuilder);
    public abstract virtual IFluentLayoutColumnBuilder AddAccordionedSection(Guid id, Action`1<IFluentLayoutAccordionedSectionBuilder> accordionedSectionBuilder);
}
public interface Omnia.Fx.Layouts.IFluentLayoutColumnedSectionBuilder {
    public Section`1<ColumnedSectionSettings> Section { get; }
    public abstract virtual Section`1<ColumnedSectionSettings> get_Section();
    public abstract virtual IFluentLayoutColumnedSectionBuilder AddColumn(Guid id, Action`1<IFluentLayoutColumnBuilder> columnBuilder);
}
public interface Omnia.Fx.Layouts.IFluentLayoutIdBuilder {
    public abstract virtual IFluentLayoutRootBuilder WithId(Guid layoutId);
}
public interface Omnia.Fx.Layouts.IFluentLayoutRootBuilder {
    public abstract virtual IFluentAttachableLayoutBuilder`1<IFluentLayoutRootBuilder> WithLayout();
    public abstract virtual Layout AsLayout();
    public abstract virtual string AsJson();
}
public interface Omnia.Fx.Layouts.IFluentLayoutSteppedSectionBuilder {
    public Section`1<SteppedSectionSettings> Section { get; }
    public abstract virtual Section`1<SteppedSectionSettings> get_Section();
    public abstract virtual IFluentLayoutSteppedSectionBuilder AddStepper(Guid id, Action`1<IFluentLayoutStepperBuilder> stepperBuilder);
}
public interface Omnia.Fx.Layouts.IFluentLayoutStepperBuilder {
    public SectionItem`1<SteppedSectionItemSettings> Stepper { get; }
    public abstract virtual SectionItem`1<SteppedSectionItemSettings> get_Stepper();
    public abstract virtual IFluentLayoutStepperBuilder AddBlock(Guid id, Func`2<TBlock, TBlock> block);
    public abstract virtual IFluentLayoutStepperBuilder AddColumnedSection(Guid id, Action`1<IFluentLayoutColumnedSectionBuilder> sectionBuilder);
    public abstract virtual IFluentLayoutStepperBuilder AddTabbedSection(Guid id, Action`1<IFluentLayoutTabbedSectionBuilder> tabbedSectionBuilder);
    public abstract virtual IFluentLayoutStepperBuilder AddAccordionedSection(Guid id, Action`1<IFluentLayoutAccordionedSectionBuilder> accordionedSectionBuilder);
    public abstract virtual IFluentLayoutStepperBuilder AddSteppedSection(Guid id, Action`1<IFluentLayoutSteppedSectionBuilder> steppedSectionBuilder);
}
public interface Omnia.Fx.Layouts.IFluentLayoutTabbedSectionBuilder {
    public Section`1<TabbedSectionSettings> Section { get; }
    public abstract virtual Section`1<TabbedSectionSettings> get_Section();
    public abstract virtual IFluentLayoutTabbedSectionBuilder AddTab(Guid id, Action`1<IFluentLayoutTabBuilder> tabBuilder);
}
public interface Omnia.Fx.Layouts.IFluentLayoutTabBuilder {
    public SectionItem`1<TabbedSectionItemSettings> Tab { get; }
    public abstract virtual SectionItem`1<TabbedSectionItemSettings> get_Tab();
    public abstract virtual IFluentLayoutTabBuilder AddBlock(Guid id, Func`2<TBlock, TBlock> block);
    public abstract virtual IFluentLayoutTabBuilder AddColumnedSection(Guid id, Action`1<IFluentLayoutColumnedSectionBuilder> sectionBuilder);
    public abstract virtual IFluentLayoutTabBuilder AddTabbedSection(Guid id, Action`1<IFluentLayoutTabbedSectionBuilder> tabbedSectionBuilder);
    public abstract virtual IFluentLayoutTabBuilder AddAccordionedSection(Guid id, Action`1<IFluentLayoutAccordionedSectionBuilder> accordionedSectionBuilder);
}
public class Omnia.Fx.Layouts.LayoutBuilder : object {
    private Layout _layoutData;
    private Guid _layoutId;
    public static IFluentLayoutIdBuilder Define();
    public sealed virtual IFluentLayoutRootBuilder WithId(Guid layoutId);
    public sealed virtual IFluentAttachableLayoutBuilder`1<IFluentLayoutRootBuilder> WithLayout();
    public sealed virtual Layout AsLayout();
    public sealed virtual string AsJson();
}
internal class Omnia.Fx.Layouts.PrivateBlockCaster : Block`1<BlockSettings> {
}
public abstract class Omnia.Fx.Localization.BaseLocalizationProvider : object {
    private static UInt32 DefaultLcid;
    [CompilerGeneratedAttribute]
private IOmniaScopedContext <OmniaScopedContext>k__BackingField;
    [CompilerGeneratedAttribute]
private ILocalizationProviderCacheHandler <CacheHandler>k__BackingField;
    [CompilerGeneratedAttribute]
private Dictionary`2<UInt32, Dictionary`2<string, string>> <LocalizationResources>k__BackingField;
    [CompilerGeneratedAttribute]
private IEnumerable`1<UserdefinedLocalizationProperty> <UserdefinedLocalizationProperties>k__BackingField;
    private IOmniaScopedContext OmniaScopedContext { get; }
    private ILocalizationProviderCacheHandler CacheHandler { get; }
    private Dictionary`2<UInt32, Dictionary`2<string, string>> LocalizationResources { get; private set; }
    private IEnumerable`1<UserdefinedLocalizationProperty> UserdefinedLocalizationProperties { get; private set; }
    public BaseLocalizationProvider(IOmniaScopedContext omniaScopedContext, ILocalizationProviderCacheHandler cacheHandler);
    [CompilerGeneratedAttribute]
private IOmniaScopedContext get_OmniaScopedContext();
    [CompilerGeneratedAttribute]
private ILocalizationProviderCacheHandler get_CacheHandler();
    [CompilerGeneratedAttribute]
private Dictionary`2<UInt32, Dictionary`2<string, string>> get_LocalizationResources();
    [CompilerGeneratedAttribute]
private void set_LocalizationResources(Dictionary`2<UInt32, Dictionary`2<string, string>> value);
    [CompilerGeneratedAttribute]
private IEnumerable`1<UserdefinedLocalizationProperty> get_UserdefinedLocalizationProperties();
    [CompilerGeneratedAttribute]
private void set_UserdefinedLocalizationProperties(IEnumerable`1<UserdefinedLocalizationProperty> value);
    [AsyncStateMachineAttribute("Omnia.Fx.Localization.BaseLocalizationProvider/<GetLocalizedValueAsync>d__16")]
public sealed virtual ValueTask`1<string> GetLocalizedValueAsync(string localizedKey, Nullable`1<UInt32> lcid);
    [AsyncStateMachineAttribute("Omnia.Fx.Localization.BaseLocalizationProvider/<GetUserdefinedLocalizationPropertiesAsync>d__17")]
public sealed virtual ValueTask`1<IEnumerable`1<UserdefinedLocalizationProperty>> GetUserdefinedLocalizationPropertiesAsync();
    [AsyncStateMachineAttribute("Omnia.Fx.Localization.BaseLocalizationProvider/<EnsureLocalizationResourcesAsync>d__18")]
protected virtual ValueTask`1<Dictionary`2<UInt32, Dictionary`2<string, string>>> EnsureLocalizationResourcesAsync();
    protected abstract virtual ValueTask`1<Dictionary`2<int, OmniaLocalizationData>> GetLocalizationDictionaryAsync();
    protected abstract virtual ValueTask`1<IEnumerable`1<UserdefinedLocalizationProperty>> GetUserdefinedLocalizationPropertiesByCurrentExtensionAsync();
    [AsyncStateMachineAttribute("Omnia.Fx.Localization.BaseLocalizationProvider/<GetLanguageResourcesAsync>d__21")]
private ValueTask`1<Dictionary`2<string, string>> GetLanguageResourcesAsync(Nullable`1<UInt32> lcid);
    private Nullable`1<UInt32> GetLanguageLcid(Nullable`1<UInt32> lcid);
    private string GetLocalizedKey(string localizedKey);
    [AsyncStateMachineAttribute("Omnia.Fx.Localization.BaseLocalizationProvider/<<EnsureLocalizationResourcesAsync>b__18_0>d")]
[CompilerGeneratedAttribute]
private Task`1<Dictionary`2<UInt32, Dictionary`2<string, string>>> <EnsureLocalizationResourcesAsync>b__18_0(IOmniaCacheEntry cacheEntry);
}
internal class Omnia.Fx.Localization.DefaultLocalizationProvider : BaseLocalizationProvider {
    private IConfiguredHttpClient`1<OmniaServiceApi> _omniaService;
    public DefaultLocalizationProvider(IConfiguredHttpClient`1<OmniaServiceApi> omniaService, IOmniaScopedContext omniaScopedContext, ILocalizationProviderCacheHandler cacheHandler);
    [AsyncStateMachineAttribute("Omnia.Fx.Localization.DefaultLocalizationProvider/<GetLocalizationDictionaryAsync>d__2")]
protected virtual ValueTask`1<Dictionary`2<int, OmniaLocalizationData>> GetLocalizationDictionaryAsync();
    [AsyncStateMachineAttribute("Omnia.Fx.Localization.DefaultLocalizationProvider/<GetUserdefinedLocalizationPropertiesByCurrentExtensionAsync>d__3")]
protected virtual ValueTask`1<IEnumerable`1<UserdefinedLocalizationProperty>> GetUserdefinedLocalizationPropertiesByCurrentExtensionAsync();
}
public interface Omnia.Fx.Localization.ILocalizationProvider {
    public abstract virtual ValueTask`1<string> GetLocalizedValueAsync(string localizedKey, Nullable`1<UInt32> lcid);
    public abstract virtual ValueTask`1<IEnumerable`1<UserdefinedLocalizationProperty>> GetUserdefinedLocalizationPropertiesAsync();
}
public interface Omnia.Fx.Localization.ILocalizationProviderCacheHandler {
    public abstract virtual IOmniaCache GetCache();
    public abstract virtual string GetLocalizationCacheKey();
    public abstract virtual Dictionary`2<UInt32, Dictionary`2<string, string>> GetLocalizationResources(Dictionary`2<int, OmniaLocalizationData> localizationDictionary);
}
internal class Omnia.Fx.Localization.LocalizationProviderCacheHandler : object {
    private static string LocalizationCacheKey;
    [CompilerGeneratedAttribute]
private IMessageBus <MessageBus>k__BackingField;
    [CompilerGeneratedAttribute]
private IOmniaCacheWithKeyHelper`1<IOmniaCache> <CacheHelper>k__BackingField;
    private IMessageBus MessageBus { get; }
    private IOmniaCacheWithKeyHelper`1<IOmniaCache> CacheHelper { get; }
    public LocalizationProviderCacheHandler(IMessageBus messageBus, IOmniaCache cache);
    [CompilerGeneratedAttribute]
private IMessageBus get_MessageBus();
    [CompilerGeneratedAttribute]
private IOmniaCacheWithKeyHelper`1<IOmniaCache> get_CacheHelper();
    [AsyncStateMachineAttribute("Omnia.Fx.Localization.LocalizationProviderCacheHandler/<RunAsStartupAsync>d__8")]
public sealed virtual ValueTask RunAsStartupAsync();
    public sealed virtual IOmniaCache GetCache();
    public sealed virtual string GetLocalizationCacheKey();
    public sealed virtual Dictionary`2<UInt32, Dictionary`2<string, string>> GetLocalizationResources(Dictionary`2<int, OmniaLocalizationData> localizationDictionary);
    private Dictionary`2<string, string> GetLocalizationContentByKeys(string localziationJson);
    private void BuildLocalizationContentByKeysDictionary(Dictionary`2<string, string> localizationContentByKeys, JObject parentObject, string parentKey);
    private string BuildJsonKey(string parentKey, string propertyName);
    [AsyncStateMachineAttribute("Omnia.Fx.Localization.LocalizationProviderCacheHandler/<<RunAsStartupAsync>b__8_0>d")]
[CompilerGeneratedAttribute]
private Task <RunAsStartupAsync>b__8_0(object arg);
}
public class Omnia.Fx.Localization.OmniaLocalizationData : HashableJsonString {
}
public interface Omnia.Fx.Logger.IOmniaLogger {
    public abstract virtual void LogTrace(Func`1<string> messageFunc);
    public abstract virtual void LogDebug(Func`1<string> messageFunc);
    public abstract virtual void LogInformation(Func`1<string> messageFunc);
    public abstract virtual void LogWarning(Func`1<string> messageFunc);
    public abstract virtual void LogWarning(Exception exception, Func`1<string> messageFunc);
    public abstract virtual void LogError(Func`1<string> messageFunc);
    public abstract virtual void LogError(Exception exception, Func`1<string> messageFunc);
    public abstract virtual void LogCritical(Func`1<string> messageFunc);
    public abstract virtual void Log(LogLevel logLevel, Func`1<string> messageFunc, Exception exception);
}
public interface Omnia.Fx.Logger.IOmniaLogger`1 {
}
public class Omnia.Fx.Logger.OmniaLogger`1 : object {
    private ILogger`1<T> _logger;
    public OmniaLogger`1(ILogger`1<T> logger);
    public sealed virtual void LogTrace(Func`1<string> messageFunc);
    public sealed virtual void LogDebug(Func`1<string> messageFunc);
    public sealed virtual void LogInformation(Func`1<string> messageFunc);
    public sealed virtual void LogWarning(Func`1<string> messageFunc);
    public sealed virtual void LogWarning(Exception exception, Func`1<string> messageFunc);
    public sealed virtual void LogError(Func`1<string> messageFunc);
    public sealed virtual void LogError(Exception exception, Func`1<string> messageFunc);
    public sealed virtual void LogCritical(Func`1<string> messageFunc);
    public sealed virtual void Log(LogLevel logLevel, Func`1<string> messageFunc, Exception exception);
}
public static class Omnia.Fx.LoginLogs.HttpContract : object {
}
public interface Omnia.Fx.LoginLogs.ILoginLogService {
    public abstract virtual Task`1<ItemQueryResult`1<LoginLogItem>> QueryAsync(LoginLogFilter loginLogFilter);
    public abstract virtual Task`1<LoginLogItem> AddAsync(LoginLogItemBase loginLogItemBase);
}
public class Omnia.Fx.MediaPicker.HttpContract : object {
    private static string BaseRoute;
}
public interface Omnia.Fx.MediaPicker.IMediaPickerService {
}
public interface Omnia.Fx.MediaPicker.IMediaPickerServiceBase {
    public abstract virtual ValueTask`1<MediaPickerImage> GetImageAsync(int mediaPickerImageId);
    public abstract virtual ValueTask`1<MediaPickerPersistedImage> GetPersistedImageAsync(int mediaPickerImageId);
    public abstract virtual ValueTask`1<MediaPickerImage> UpdatePersistedImageInformationAsync(int mediaPickerImageId, MediaPickerPersistedImageInformation mediaPickerImageDetail);
    public abstract virtual ValueTask`1<List`1<MediaPickerImageRatio>> GetAllImageRatiosAsync();
    public abstract virtual ValueTask`1<MediaPickerImageRatio> CreateImageRatioAsync(IMediaPickerImageRatioDefinition ratioDefinition);
    public abstract virtual ValueTask`1<MediaPickerImageRatio> UpdateImageRatioAsync(MediaPickerImageRatio ratioToUpdate, MultilingualString newTitle, bool enableInRollup);
    public abstract virtual ValueTask DeleteImageRatioAsync(MediaPickerImageRatio ratioToDelete);
    public abstract virtual ValueTask`1<List`1<MediaPickerImageScaling>> GetAllImageScalingsAsync();
    public abstract virtual ValueTask`1<MediaPickerImageScaling> CreateImageScalingAsync(IMediaPickerImageScalingDefinition imageScalingDefinition);
    public abstract virtual ValueTask`1<MediaPickerImageScaling> UpdateImageScalingAsync(MediaPickerImageScaling imageScalingToUpdate, IMediaPickerImageScalingDefinition newImageScalingDefinition);
    public abstract virtual ValueTask DeleteImageScalingAsync(MediaPickerImageScaling imageScalingToDelete);
}
[ExtensionAttribute]
public static class Omnia.Fx.MediaPicker.IMediaPickerServiceExtensions : object {
    [AsyncStateMachineAttribute("Omnia.Fx.MediaPicker.IMediaPickerServiceExtensions/<FindAndReplaceImagesInJsonAsync>d__0")]
[ExtensionAttribute]
public static Task FindAndReplaceImagesInJsonAsync(IMediaPickerService service, JToken jToken, Func`2<MediaPickerImage, ValueTask`1<MediaPickerImage>> replaceActionAsync);
    [AsyncStateMachineAttribute("Omnia.Fx.MediaPicker.IMediaPickerServiceExtensions/<ReplaceAsync>d__1")]
[ExtensionAttribute]
private static Task`1<string> ReplaceAsync(Regex regex, string input, Func`2<Match, Task`1<string>> replacementFn);
    [AsyncStateMachineAttribute("Omnia.Fx.MediaPicker.IMediaPickerServiceExtensions/<WalkNodeAsync>d__2")]
private static Task WalkNodeAsync(JToken node, Func`2<JObject, Task> objectAction, Func`2<JValue, Task> propertyAction);
    private static MediaPickerImage DeserializeIfValidImage(string jsonMatchingImage);
    private static string AsCamelCase(string value);
}
public interface Omnia.Fx.MediaPicker.Internal.IInternalMediaPickerService {
    public abstract virtual ValueTask`1<MediaPickerImage> AddPersistedImageInformationAsync(Guid omniaServiceId, MediaPickerPersistedImageInformation mediaPickerImageDetail, IList`1<MediaPickerImageMetadata> imageMetadata);
    public abstract virtual ValueTask`1<MediaPickerImage> RemovePersistedImageAsync(int mediaPickerImageId);
}
internal class Omnia.Fx.MediaPicker.MediaPickerRouteService : object {
    [CompilerGeneratedAttribute]
private IConfiguredHttpClient`1<OmniaServiceApi> <OmniaHttpClient>k__BackingField;
    [CompilerGeneratedAttribute]
private IMediaPickerStorageRouteService <MediaPickerStorageRouteService>k__BackingField;
    [CompilerGeneratedAttribute]
private IInternalMediaPickerService <InternalMediaPickerService>k__BackingField;
    [CompilerGeneratedAttribute]
private IOmniaCacheWithKeyHelper`1<IOmniaSynchronizedMemoryCache> <CacheHelper>k__BackingField;
    private IConfiguredHttpClient`1<OmniaServiceApi> OmniaHttpClient { get; }
    private IMediaPickerStorageRouteService MediaPickerStorageRouteService { get; }
    private IInternalMediaPickerService InternalMediaPickerService { get; }
    private IOmniaCacheWithKeyHelper`1<IOmniaSynchronizedMemoryCache> CacheHelper { get; }
    private bool IsReadOnlyCache { get; }
    public MediaPickerRouteService(IInternalMediaPickerService internalMediaPickerService, OmniaTargetedSynchronizedMemoryCache omniaSynchronizedCache, IConfiguredHttpClient`1<OmniaServiceApi> omniaHttpClient, IMediaPickerStorageRouteService mediaPickerStorageRouteService);
    [CompilerGeneratedAttribute]
private IConfiguredHttpClient`1<OmniaServiceApi> get_OmniaHttpClient();
    [CompilerGeneratedAttribute]
private IMediaPickerStorageRouteService get_MediaPickerStorageRouteService();
    [CompilerGeneratedAttribute]
private IInternalMediaPickerService get_InternalMediaPickerService();
    [CompilerGeneratedAttribute]
private IOmniaCacheWithKeyHelper`1<IOmniaSynchronizedMemoryCache> get_CacheHelper();
    private bool get_IsReadOnlyCache();
    [AsyncStateMachineAttribute("Omnia.Fx.MediaPicker.MediaPickerRouteService/<GetImageAsync>d__16")]
public sealed virtual ValueTask`1<MediaPickerImage> GetImageAsync(int mediaPickerImageId);
    [AsyncStateMachineAttribute("Omnia.Fx.MediaPicker.MediaPickerRouteService/<GetPersistedImageAsync>d__17")]
public sealed virtual ValueTask`1<MediaPickerPersistedImage> GetPersistedImageAsync(int mediaPickerImageId);
    [AsyncStateMachineAttribute("Omnia.Fx.MediaPicker.MediaPickerRouteService/<GetAllImageRatiosAsync>d__18")]
public sealed virtual ValueTask`1<List`1<MediaPickerImageRatio>> GetAllImageRatiosAsync();
    [AsyncStateMachineAttribute("Omnia.Fx.MediaPicker.MediaPickerRouteService/<CreateImageRatioAsync>d__19")]
public sealed virtual ValueTask`1<MediaPickerImageRatio> CreateImageRatioAsync(IMediaPickerImageRatioDefinition ratioDefinition);
    [AsyncStateMachineAttribute("Omnia.Fx.MediaPicker.MediaPickerRouteService/<UpdateImageRatioAsync>d__20")]
public sealed virtual ValueTask`1<MediaPickerImageRatio> UpdateImageRatioAsync(MediaPickerImageRatio ratioToUpdate, MultilingualString newTitle, bool enableInRollup);
    [AsyncStateMachineAttribute("Omnia.Fx.MediaPicker.MediaPickerRouteService/<DeleteImageRatioAsync>d__21")]
public sealed virtual ValueTask DeleteImageRatioAsync(MediaPickerImageRatio ratioToDelete);
    [AsyncStateMachineAttribute("Omnia.Fx.MediaPicker.MediaPickerRouteService/<GetAllImageScalingsAsync>d__22")]
public sealed virtual ValueTask`1<List`1<MediaPickerImageScaling>> GetAllImageScalingsAsync();
    [AsyncStateMachineAttribute("Omnia.Fx.MediaPicker.MediaPickerRouteService/<CreateImageScalingAsync>d__23")]
public sealed virtual ValueTask`1<MediaPickerImageScaling> CreateImageScalingAsync(IMediaPickerImageScalingDefinition imageScalingDefinition);
    [AsyncStateMachineAttribute("Omnia.Fx.MediaPicker.MediaPickerRouteService/<UpdateImageScalingAsync>d__24")]
public sealed virtual ValueTask`1<MediaPickerImageScaling> UpdateImageScalingAsync(MediaPickerImageScaling imageScalingToUpdate, IMediaPickerImageScalingDefinition newImageScalingDefinition);
    [AsyncStateMachineAttribute("Omnia.Fx.MediaPicker.MediaPickerRouteService/<DeleteImageScalingAsync>d__25")]
public sealed virtual ValueTask DeleteImageScalingAsync(MediaPickerImageScaling imageScalingToDelete);
    [AsyncStateMachineAttribute("Omnia.Fx.MediaPicker.MediaPickerRouteService/<AddPersistedImageInformationAsync>d__26")]
public sealed virtual ValueTask`1<MediaPickerImage> AddPersistedImageInformationAsync(Guid omniaServiceId, MediaPickerPersistedImageInformation mediaPickerImageDetail, IList`1<MediaPickerImageMetadata> imageMetadata);
    [AsyncStateMachineAttribute("Omnia.Fx.MediaPicker.MediaPickerRouteService/<UpdatePersistedImageInformationAsync>d__27")]
public sealed virtual ValueTask`1<MediaPickerImage> UpdatePersistedImageInformationAsync(int mediaPickerImageId, MediaPickerPersistedImageInformation mediaPickerImageDetail);
    [AsyncStateMachineAttribute("Omnia.Fx.MediaPicker.MediaPickerRouteService/<RemovePersistedImageAsync>d__28")]
public sealed virtual ValueTask`1<MediaPickerImage> RemovePersistedImageAsync(int mediaPickerImageId);
    public sealed virtual ValueTask`1<MediaPickerImage> AddNewImageAsync(MediaPickerBase64Image originalImage, TProviderContext providerContext);
    public sealed virtual ValueTask`1<MediaPickerImage> AddNewImageAsync(MediaPickerBase64Image originalImage, TProviderContext providerContext, MediaPickerTransformedBase64Image transformedImage, List`1<MediaPickerRenditionData> renditionData);
    public sealed virtual ValueTask`1<MediaPickerImage> UpdateImageAsync(MediaPickerImage mediaPickerImage, MediaPickerTransformedBase64Image transformedImage, List`1<MediaPickerRenditionData> renditionData);
    public sealed virtual ValueTask`1<MediaPickerImage> CopyImageAsync(MediaPickerImage sourceMediaPickerImage, TTargetProviderContext targetProviderContext);
    public sealed virtual ValueTask`1<Stream> GetImageAsync(MediaPickerImage mediaPickerImage, Nullable`1<int> rendition, Nullable`1<int> scalingId);
    public sealed virtual ValueTask`1<Stream> GetOriginalImageAsync(MediaPickerImage mediaPickerImage);
    public sealed virtual ValueTask EnsureRenditionsAsync(MediaPickerImage mediaPickerImage);
    public sealed virtual ValueTask`1<MediaPickerImage> RemoveImageAsync(MediaPickerImage mediaPickerImage);
    private string GetMediaPickerImageRatiosCacheKey();
    private string GetMediaPickerImageScalingsCacheKey();
    private IInternalMediaPickerService GetCorrectMediaPickerImplementation();
    [AsyncStateMachineAttribute("Omnia.Fx.MediaPicker.MediaPickerRouteService/<<GetAllImageRatiosAsync>b__18_0>d")]
[CompilerGeneratedAttribute]
private Task`1<List`1<MediaPickerImageRatio>> <GetAllImageRatiosAsync>b__18_0(IOmniaDependencyCacheEntry cacheEntry);
    [AsyncStateMachineAttribute("Omnia.Fx.MediaPicker.MediaPickerRouteService/<<GetAllImageScalingsAsync>b__22_0>d")]
[CompilerGeneratedAttribute]
private Task`1<List`1<MediaPickerImageScaling>> <GetAllImageScalingsAsync>b__22_0(IOmniaDependencyCacheEntry cacheEntry);
}
public class Omnia.Fx.MediaPicker.StorageProvider.HttpContract : object {
}
public interface Omnia.Fx.MediaPicker.StorageProvider.IMediaPickerFileStorageService {
}
public interface Omnia.Fx.MediaPicker.StorageProvider.IMediaPickerStorageProvider {
    public abstract virtual ValueTask`1<ValueTuple`2<IList`1<MediaPickerImageMetadata>, string>> GetPersistantStorageInformationAsync(TProviderContext providerContext);
    public abstract virtual ValueTask`1<bool> CheckUserWritePermissionAsync(TProviderContext providerContext);
    public abstract virtual ValueTask`1<bool> CheckUserUpdatePermissionAsync(MediaPickerPersistedImage imageToUpdate);
    public abstract virtual ValueTask`1<bool> CheckUserReadPermissionAsync(MediaPickerPersistedImage imageToRead);
}
internal interface Omnia.Fx.MediaPicker.StorageProvider.IMediaPickerStorageRouteService {
}
public interface Omnia.Fx.MediaPicker.StorageProvider.IMediaPickerStorageServiceBase`2 {
    public abstract virtual ValueTask`1<MediaPickerImage> AddNewImageAsync(MediaPickerBase64Image originalImage, TProviderContext providerContext);
    public abstract virtual ValueTask`1<MediaPickerImage> AddNewImageAsync(MediaPickerBase64Image originalImage, TProviderContext providerContext, MediaPickerTransformedBase64Image transformedImage, List`1<MediaPickerRenditionData> renditionData);
    public abstract virtual ValueTask`1<MediaPickerImage> UpdateImageAsync(TypeImageRef mediaPickerImage, MediaPickerTransformedBase64Image transformedImage, List`1<MediaPickerRenditionData> renditionData);
    public abstract virtual ValueTask`1<MediaPickerImage> CopyImageAsync(TypeImageRef sourceMediaPickerImage, TTargetProviderContext targetProviderContext);
    public abstract virtual ValueTask`1<MediaPickerImage> RemoveImageAsync(TypeImageRef imageToRemove);
    public abstract virtual ValueTask`1<TypeStreamResult> GetImageAsync(TypeImageRef mediaPickerImage, Nullable`1<int> rendition, Nullable`1<int> scalingId);
    public abstract virtual ValueTask`1<TypeStreamResult> GetOriginalImageAsync(TypeImageRef mediaPickerImage);
    public abstract virtual ValueTask EnsureRenditionsAsync(TypeImageRef mediaPickerImage);
}
internal class Omnia.Fx.MediaPicker.StorageProvider.MediaPickerStorageRouteService : object {
    [CompilerGeneratedAttribute]
private IOmniaServiceHttpClientFactory <OmniaServiceHttpClientFactory>k__BackingField;
    [CompilerGeneratedAttribute]
private IMediaPickerFileStorageService <MediaPickerFileStorageService>k__BackingField;
    [CompilerGeneratedAttribute]
private IOmniaServices <OmniaServices>k__BackingField;
    private IOmniaServiceHttpClientFactory OmniaServiceHttpClientFactory { get; }
    private IMediaPickerFileStorageService MediaPickerFileStorageService { get; }
    private IOmniaServices OmniaServices { get; }
    public MediaPickerStorageRouteService(IOmniaServiceHttpClientFactory omniaServiceHttpClientFactory, IMediaPickerFileStorageService mediaPickerFileStorageService, IOmniaServices omniaServices);
    [CompilerGeneratedAttribute]
private IOmniaServiceHttpClientFactory get_OmniaServiceHttpClientFactory();
    [CompilerGeneratedAttribute]
private IMediaPickerFileStorageService get_MediaPickerFileStorageService();
    [CompilerGeneratedAttribute]
private IOmniaServices get_OmniaServices();
    [AsyncStateMachineAttribute("Omnia.Fx.MediaPicker.StorageProvider.MediaPickerStorageRouteService/<AddNewImageAsync>d__10`1")]
public sealed virtual ValueTask`1<MediaPickerImage> AddNewImageAsync(MediaPickerBase64Image originalImage, TProviderContext providerContext);
    [AsyncStateMachineAttribute("Omnia.Fx.MediaPicker.StorageProvider.MediaPickerStorageRouteService/<AddNewImageAsync>d__11`1")]
public sealed virtual ValueTask`1<MediaPickerImage> AddNewImageAsync(MediaPickerBase64Image originalImage, TProviderContext providerContext, MediaPickerTransformedBase64Image transformedImage, List`1<MediaPickerRenditionData> renditionData);
    [AsyncStateMachineAttribute("Omnia.Fx.MediaPicker.StorageProvider.MediaPickerStorageRouteService/<UpdateImageAsync>d__12")]
public sealed virtual ValueTask`1<MediaPickerImage> UpdateImageAsync(MediaPickerImage mediaPickerImage, MediaPickerTransformedBase64Image transformedImage, List`1<MediaPickerRenditionData> renditionData);
    [AsyncStateMachineAttribute("Omnia.Fx.MediaPicker.StorageProvider.MediaPickerStorageRouteService/<CopyImageAsync>d__13`1")]
public sealed virtual ValueTask`1<MediaPickerImage> CopyImageAsync(MediaPickerImage sourceImage, TTargetProviderContext targetProviderContext);
    [AsyncStateMachineAttribute("Omnia.Fx.MediaPicker.StorageProvider.MediaPickerStorageRouteService/<EnsureRenditionsAsync>d__14")]
public sealed virtual ValueTask EnsureRenditionsAsync(MediaPickerImage mediaPickerImage);
    [AsyncStateMachineAttribute("Omnia.Fx.MediaPicker.StorageProvider.MediaPickerStorageRouteService/<GetImageAsync>d__15")]
public sealed virtual ValueTask`1<Stream> GetImageAsync(MediaPickerImage mediaPickerImage, Nullable`1<int> renditionId, Nullable`1<int> scalingId);
    [AsyncStateMachineAttribute("Omnia.Fx.MediaPicker.StorageProvider.MediaPickerStorageRouteService/<GetOriginalImageAsync>d__16")]
public sealed virtual ValueTask`1<Stream> GetOriginalImageAsync(MediaPickerImage mediapickerImage);
    [AsyncStateMachineAttribute("Omnia.Fx.MediaPicker.StorageProvider.MediaPickerStorageRouteService/<RemoveImageAsync>d__17")]
public sealed virtual ValueTask`1<MediaPickerImage> RemoveImageAsync(MediaPickerImage imageToRemove);
    [AsyncStateMachineAttribute("Omnia.Fx.MediaPicker.StorageProvider.MediaPickerStorageRouteService/<HandleMediaPickerStorageRequestAsync>d__18")]
private ValueTask HandleMediaPickerStorageRequestAsync(Guid serviceId, Func`2<MediaPickerStorageSerivceHttpClient, ValueTask> externalAction, Func`1<ValueTask> internalAction);
    private MediaPickerStorageSerivceHttpClient GetHttpClient(IOmniaServiceHttpClientFactory omniaServiceHttpClientFactory, Guid serviceId);
}
public interface Omnia.Fx.Messaging.IMessageBus {
    public abstract virtual ValueTask`1<SubscriptionToken> SubscribeAsync(Topic`1<TMessage> topic, Func`2<TMessage, Task> action);
    public abstract virtual ValueTask`1<SubscriptionToken> SubscribeAsync(Topic`2<TMessage, TMetadata> topic, Func`3<TMessage, TMetadata, Task> action);
    public abstract virtual ValueTask`1<SubscriptionToken> SubscribeOnceAsync(Topic`1<TMessage> topic, Func`2<TMessage, Task> action);
    public abstract virtual ValueTask`1<SubscriptionToken> SubscribeOnceAsync(Topic`2<TMessage, TMetadata> topic, Func`3<TMessage, TMetadata, Task> action);
    public abstract virtual Task PublishAsync(Topic`1<TMessage> topic, TMessage message, MessageSettings messageSettings);
    public abstract virtual Task PublishAsync(Topic`2<TMessage, TMetadata> topic, TMessage message, TMetadata metadata, MessageSettings messageSettings);
    public abstract virtual void Unsubscribe(SubscriptionToken token);
    public abstract virtual Task PublishHeartbeat();
}
public interface Omnia.Fx.Messaging.IMessageBusFactory {
    public abstract virtual IMessageBus Create(string topic);
    public abstract virtual IMessageBus Create(string connectionString, string topic);
}
public interface Omnia.Fx.MicrosoftSearch.IMicrosoftSearchService {
    public abstract virtual ValueTask`1<MSSearchResult> GetMicrosoftSearchResultAsync(MSSearchRequestBody searchRequestBody);
}
internal class Omnia.Fx.MicrosoftSearch.MicrosoftSearchService : object {
    [CompilerGeneratedAttribute]
private IConfiguredHttpClient`1<Office365GraphServiceApi> <GraphService>k__BackingField;
    private static string BaseRoute;
    private IConfiguredHttpClient`1<Office365GraphServiceApi> GraphService { get; }
    public MicrosoftSearchService(IConfiguredHttpClient`1<Office365GraphServiceApi> graphService);
    [CompilerGeneratedAttribute]
private IConfiguredHttpClient`1<Office365GraphServiceApi> get_GraphService();
    [AsyncStateMachineAttribute("Omnia.Fx.MicrosoftSearch.MicrosoftSearchService/<GetMicrosoftSearchResultAsync>d__5")]
public sealed virtual ValueTask`1<MSSearchResult> GetMicrosoftSearchResultAsync(MSSearchRequestBody searchRequestBody);
}
[ExtensionAttribute]
public static class Omnia.Fx.Models.Security.UserCredentialInfoExtensions : object {
    [ExtensionAttribute]
public static string GetHashString(UserCredentialInfo userCredential);
}
public interface Omnia.Fx.MultilingualTexts.IMultilingualHelper {
    public abstract virtual ValueTask`1<string> GetDafaultValue(MultilingualString multilingualString, Nullable`1<Guid> profileId);
    public abstract virtual ValueTask`1<string> GetValue(MultilingualString multilingualString, LanguageTag desiredlanguage, Nullable`1<Guid> profileId);
    public abstract virtual ValueTask`1<MultilingualSettings> GetTenantSettingsAsync();
    public abstract virtual ValueTask`1<MultilingualSettings> GetProfileSettingsAsync(Guid profileId);
}
internal class Omnia.Fx.MultilingualTexts.MultilingualHelper : object {
    [CompilerGeneratedAttribute]
private Dictionary`2<Guid, MultilingualSettings> <Settings>k__BackingField;
    [CompilerGeneratedAttribute]
private ITenantService <TenantService>k__BackingField;
    [CompilerGeneratedAttribute]
private IBusinessProfilesService <BusinessProfileService>k__BackingField;
    private Dictionary`2<Guid, MultilingualSettings> Settings { get; private set; }
    private ITenantService TenantService { get; }
    private IBusinessProfilesService BusinessProfileService { get; }
    public MultilingualHelper(ITenantService tenantService, IBusinessProfilesService businessProfileService);
    [CompilerGeneratedAttribute]
private Dictionary`2<Guid, MultilingualSettings> get_Settings();
    [CompilerGeneratedAttribute]
private void set_Settings(Dictionary`2<Guid, MultilingualSettings> value);
    [CompilerGeneratedAttribute]
private ITenantService get_TenantService();
    [CompilerGeneratedAttribute]
private IBusinessProfilesService get_BusinessProfileService();
    [AsyncStateMachineAttribute("Omnia.Fx.MultilingualTexts.MultilingualHelper/<GetDafaultValue>d__11")]
public sealed virtual ValueTask`1<string> GetDafaultValue(MultilingualString multilingualString, Nullable`1<Guid> profileId);
    [AsyncStateMachineAttribute("Omnia.Fx.MultilingualTexts.MultilingualHelper/<GetValue>d__12")]
public sealed virtual ValueTask`1<string> GetValue(MultilingualString multilingualString, LanguageTag desiredlanguage, Nullable`1<Guid> profileId);
    [AsyncStateMachineAttribute("Omnia.Fx.MultilingualTexts.MultilingualHelper/<GetProfileSettingsAsync>d__13")]
public sealed virtual ValueTask`1<MultilingualSettings> GetProfileSettingsAsync(Guid profileId);
    [AsyncStateMachineAttribute("Omnia.Fx.MultilingualTexts.MultilingualHelper/<GetTenantSettingsAsync>d__14")]
public sealed virtual ValueTask`1<MultilingualSettings> GetTenantSettingsAsync();
    private string GetValueFromMultilingualString(MultilingualString multilingualString, Nullable`1<LanguageTag> desiredLanguage, MultilingualSettings settings);
    private string TryToGetMultilingualValue(MultilingualString multilingualString, Nullable`1<LanguageTag> desiredLanguage, MultilingualSettings settings);
    [AsyncStateMachineAttribute("Omnia.Fx.MultilingualTexts.MultilingualHelper/<EnsureSettingsAsync>d__17")]
private ValueTask`1<MultilingualSettings> EnsureSettingsAsync(Nullable`1<Guid> profileId);
    [AsyncStateMachineAttribute("Omnia.Fx.MultilingualTexts.MultilingualHelper/<EnsureTenantSettingsAsync>d__18")]
private ValueTask`1<MultilingualSettings> EnsureTenantSettingsAsync();
    [AsyncStateMachineAttribute("Omnia.Fx.MultilingualTexts.MultilingualHelper/<EnsureProfileSettingsAsync>d__19")]
private ValueTask`1<MultilingualSettings> EnsureProfileSettingsAsync(Guid profileId);
    [AsyncStateMachineAttribute("Omnia.Fx.MultilingualTexts.MultilingualHelper/<GetTenantSettingsInternalAsync>d__20")]
private ValueTask`1<MultilingualSettings> GetTenantSettingsInternalAsync();
    [AsyncStateMachineAttribute("Omnia.Fx.MultilingualTexts.MultilingualHelper/<GetProfileSettingsInternalAsync>d__21")]
private ValueTask`1<MultilingualSettings> GetProfileSettingsInternalAsync(Guid profileId);
    private MultilingualSettings ParseSettings(IList`1<LanguageSettings> languages);
}
public interface Omnia.Fx.OmniaCloudSyncTracking.IOmniaCloudSyncTrackingService {
    public abstract virtual Task`1<OmniaCloudSyncTrackingDefinition> EnsureSyncDefinitionAsync(Guid id, string title);
    public abstract virtual Task`1<OmniaCloudSyncTrackingInstance> AddLastSyncInstanceAsync(OmniaCloudSyncTrackingInstanceAddOrUpdateRequest trackingInstanceAddRequest, List`1<string> contacts);
    public abstract virtual Task`1<TenantContact> GetTenantContactsAsync();
}
public class Omnia.Fx.OmniaCloudSyncTracking.OmniaCloudSyncTrackingService : object {
    [CompilerGeneratedAttribute]
private IOptionsMonitor`1<OmniaServicesDnsSettings> <OmniaServiceDnsMapping>k__BackingField;
    [CompilerGeneratedAttribute]
private IConfiguredHttpClient`1<OmniaCloudServiceApi> <OmniaApiService>k__BackingField;
    [CompilerGeneratedAttribute]
private IOptionsMonitor`1<OmniaAppSettings> <OmniaAppSettings>k__BackingField;
    private IOptionsMonitor`1<OmniaServicesDnsSettings> OmniaServiceDnsMapping { get; }
    private IConfiguredHttpClient`1<OmniaCloudServiceApi> OmniaApiService { get; }
    private IOptionsMonitor`1<OmniaAppSettings> OmniaAppSettings { get; }
    public OmniaCloudSyncTrackingService(IOptionsMonitor`1<OmniaServicesDnsSettings> omniaServiceDnsMapping, IConfiguredHttpClient`1<OmniaCloudServiceApi> omniaApiService, IOptionsMonitor`1<OmniaAppSettings> omniaAppSettings);
    [CompilerGeneratedAttribute]
private IOptionsMonitor`1<OmniaServicesDnsSettings> get_OmniaServiceDnsMapping();
    [CompilerGeneratedAttribute]
private IConfiguredHttpClient`1<OmniaCloudServiceApi> get_OmniaApiService();
    [CompilerGeneratedAttribute]
private IOptionsMonitor`1<OmniaAppSettings> get_OmniaAppSettings();
    [AsyncStateMachineAttribute("Omnia.Fx.OmniaCloudSyncTracking.OmniaCloudSyncTrackingService/<EnsureSyncDefinitionAsync>d__10")]
public sealed virtual Task`1<OmniaCloudSyncTrackingDefinition> EnsureSyncDefinitionAsync(Guid id, string title);
    [AsyncStateMachineAttribute("Omnia.Fx.OmniaCloudSyncTracking.OmniaCloudSyncTrackingService/<AddLastSyncInstanceAsync>d__11")]
public sealed virtual Task`1<OmniaCloudSyncTrackingInstance> AddLastSyncInstanceAsync(OmniaCloudSyncTrackingInstanceAddOrUpdateRequest trackingInstanceAddRequest, List`1<string> contacts);
    [AsyncStateMachineAttribute("Omnia.Fx.OmniaCloudSyncTracking.OmniaCloudSyncTrackingService/<GetTenantContactsAsync>d__12")]
public sealed virtual Task`1<TenantContact> GetTenantContactsAsync();
    private HttpRequestConfigurationHeaders GetOmniaCloudConfigurationHeaders();
    private string GetOmniaDns();
}
public interface Omnia.Fx.Organization.IOrganizationService {
    public abstract virtual ValueTask`1<Organization> GetAsync();
}
internal class Omnia.Fx.Organization.OrganizationService : object {
    [CompilerGeneratedAttribute]
private IConfiguredHttpClient`1<Office365GraphServiceApi> <GraphService>k__BackingField;
    [CompilerGeneratedAttribute]
private IOmniaContext <OmniaContext>k__BackingField;
    private IConfiguredHttpClient`1<Office365GraphServiceApi> GraphService { get; }
    private IOmniaContext OmniaContext { get; }
    public OrganizationService(IOmniaContext omniaContext, IConfiguredHttpClient`1<Office365GraphServiceApi> graphService);
    [CompilerGeneratedAttribute]
private IConfiguredHttpClient`1<Office365GraphServiceApi> get_GraphService();
    [CompilerGeneratedAttribute]
private IOmniaContext get_OmniaContext();
    [AsyncStateMachineAttribute("Omnia.Fx.Organization.OrganizationService/<GetAsync>d__9")]
public sealed virtual ValueTask`1<Organization> GetAsync();
}
public class Omnia.Fx.Post.HttpContract : object {
}
public interface Omnia.Fx.Queries.IFilterExpression {
    public abstract virtual IFilterValueExpression Property(string internalName);
    public abstract virtual IFilterValueExpression Property(Expression`1<Func`2<TItem, object>> expression);
}
public interface Omnia.Fx.Queries.IFilterLogicalExpression {
    public abstract virtual IFilterLogicalExpression And(Action`1<IFilterExpression> configure);
    public abstract virtual IFilterLogicalExpression Or(Action`1<IFilterExpression> configure);
}
public interface Omnia.Fx.Queries.IFilterValueExpression {
    public abstract virtual IFilterLogicalExpression Equal(object value);
    public abstract virtual IFilterLogicalExpression NotEqual(object value);
    public abstract virtual IFilterLogicalExpression LessThan(object value);
    public abstract virtual IFilterLogicalExpression GreaterThan(object value);
    public abstract virtual IFilterLogicalExpression LessOrEqual(object value);
    public abstract virtual IFilterLogicalExpression GreaterOrEqual(object value);
    public abstract virtual IFilterLogicalExpression In(T2[] values);
    public abstract virtual IFilterLogicalExpression Like(string value);
    public abstract virtual IFilterLogicalExpression IsNull();
    public abstract virtual IFilterLogicalExpression IsNotNull();
    public abstract virtual IFilterLogicalExpression IsTrue();
    public abstract virtual IFilterLogicalExpression IsFalse();
    public abstract virtual IFilterLogicalExpression BitwiseAnd(int value);
    public abstract virtual IFilterValueExpression RawQuery();
}
public interface Omnia.Fx.Queries.IOmniaBatchQueryContext`2 {
    public IEnumerable`1<TQuery> Queries { get; }
    public abstract virtual IEnumerable`1<TQuery> get_Queries();
    public abstract virtual IOmniaQueryable`1<TQuery> AddQuery();
}
public interface Omnia.Fx.Queries.IOmniaQuery`1 {
    public TQuery Query { get; }
    public abstract virtual TQuery get_Query();
    public abstract virtual string ToString();
    public abstract virtual IOmniaQuery`1<TQuery> IncludeTotal();
    public abstract virtual IOmniaQuery`1<TQuery> OrderBy(string propertyName);
    public abstract virtual IOmniaQuery`1<TQuery> OrderBy(Expression`1<Func`2<TItem, object>> expression);
    public abstract virtual IOmniaQuery`1<TQuery> OrderByDescending(string propertyName);
    public abstract virtual IOmniaQuery`1<TQuery> OrderByDescending(Expression`1<Func`2<TItem, object>> expression);
    public abstract virtual IOmniaQuery`1<TQuery> Take(int itemLimit);
    public abstract virtual IOmniaQuery`1<TQuery> Skip(int skip);
}
public interface Omnia.Fx.Queries.IOmniaQueryable`1 {
    public abstract virtual IOmniaWhereQueryable`1<TQuery> Where(Func`2<IFilterExpression, IFilterLogicalExpression> configure);
}
public interface Omnia.Fx.Queries.IOmniaQueryContext`1 {
    public abstract virtual ValueTask`1<TResult> GetResultAsync();
}
public interface Omnia.Fx.Queries.IOmniaSingleQueryContext`2 {
    public IOmniaQueryable`1<TQuery> Builder { get; }
    public abstract virtual IOmniaQueryable`1<TQuery> get_Builder();
}
public interface Omnia.Fx.Queries.IOmniaWhereQueryable`1 {
    public abstract virtual IOmniaWhereQueryable`1<TQuery> AndWhere(Func`2<IFilterExpression, IFilterLogicalExpression> configure);
    public abstract virtual IOmniaWhereQueryable`1<TQuery> OrWhere(Func`2<IFilterExpression, IFilterLogicalExpression> configure);
}
public interface Omnia.Fx.Queries.IQueryFilterResolver {
    public abstract virtual QueryPropertyInfo GetPropertyInfo(string propertyName);
    public abstract virtual IQueryFilterValueHandler GetFilterValueHandler(QueryPropertyInfo propertyInfo, QueryFilter queryFilter);
}
public class Omnia.Fx.Queries.Models.QueryPropertyInfo : object {
    [CompilerGeneratedAttribute]
private string <InternalName>k__BackingField;
    [CompilerGeneratedAttribute]
private string <FilterColumnName>k__BackingField;
    [CompilerGeneratedAttribute]
private EnterprisePropertyDefinition <EnterpriseProperty>k__BackingField;
    [CompilerGeneratedAttribute]
private IQueryFilterValueHandler <FilterValueHandler>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <UseBaseQuery>k__BackingField;
    public string InternalName { get; public set; }
    public string FilterColumnName { get; public set; }
    public EnterprisePropertyDefinition EnterpriseProperty { get; public set; }
    public IQueryFilterValueHandler FilterValueHandler { get; public set; }
    public bool UseBaseQuery { get; public set; }
    [CompilerGeneratedAttribute]
public string get_InternalName();
    [CompilerGeneratedAttribute]
public void set_InternalName(string value);
    [CompilerGeneratedAttribute]
public string get_FilterColumnName();
    [CompilerGeneratedAttribute]
public void set_FilterColumnName(string value);
    [CompilerGeneratedAttribute]
public EnterprisePropertyDefinition get_EnterpriseProperty();
    [CompilerGeneratedAttribute]
public void set_EnterpriseProperty(EnterprisePropertyDefinition value);
    [CompilerGeneratedAttribute]
public IQueryFilterValueHandler get_FilterValueHandler();
    [CompilerGeneratedAttribute]
public void set_FilterValueHandler(IQueryFilterValueHandler value);
    [CompilerGeneratedAttribute]
public bool get_UseBaseQuery();
    [CompilerGeneratedAttribute]
public void set_UseBaseQuery(bool value);
}
public class Omnia.Fx.Queries.QueryBuilder : QueryBuilder`1<ItemQuery> {
    public QueryBuilder(IQueryFilterResolver queryFilterResolver);
}
public class Omnia.Fx.Queries.QueryBuilder`1 : object {
    [CompilerGeneratedAttribute]
private IQueryFilterResolver <QueryFilterResolver>k__BackingField;
    [CompilerGeneratedAttribute]
private TQuery <Query>k__BackingField;
    protected IQueryFilterResolver QueryFilterResolver { get; }
    public TQuery Query { get; }
    public QueryBuilder`1(TQuery query, IQueryFilterResolver queryFilterResolver);
    [CompilerGeneratedAttribute]
protected IQueryFilterResolver get_QueryFilterResolver();
    [CompilerGeneratedAttribute]
public sealed virtual TQuery get_Query();
    public virtual string ToString();
    public sealed virtual IOmniaWhereQueryable`1<TQuery> Where(Func`2<IFilterExpression, IFilterLogicalExpression> configure);
    public sealed virtual IOmniaWhereQueryable`1<TQuery> AndWhere(Func`2<IFilterExpression, IFilterLogicalExpression> configure);
    public sealed virtual IOmniaWhereQueryable`1<TQuery> OrWhere(Func`2<IFilterExpression, IFilterLogicalExpression> configure);
    public sealed virtual IOmniaQuery`1<TQuery> IncludeTotal();
    public sealed virtual IOmniaQuery`1<TQuery> OrderBy(string propertyName);
    public sealed virtual IOmniaQuery`1<TQuery> OrderBy(Expression`1<Func`2<TItem, object>> expression);
    public sealed virtual IOmniaQuery`1<TQuery> OrderByDescending(Expression`1<Func`2<TItem, object>> expression);
    public sealed virtual IOmniaQuery`1<TQuery> OrderByDescending(string propertyName);
    public sealed virtual IOmniaQuery`1<TQuery> Take(int itemLimit);
    public sealed virtual IOmniaQuery`1<TQuery> Skip(int skip);
}
public class Omnia.Fx.Queries.QueryContext`1 : QueryContext`2<ItemQuery, TResult> {
    public QueryContext`1(Func`2<ItemQuery, ValueTask`1<TResult>> getSingleResultFunc, IQueryFilterResolver queryFilterResolver);
    public QueryContext`1(Func`2<List`1<ItemQuery>, ValueTask`1<TResult>> getBatchResultFunc, IQueryFilterResolver queryFilterResolver);
}
public class Omnia.Fx.Queries.QueryContext`2 : object {
    [CompilerGeneratedAttribute]
private List`1<IOmniaQueryable`1<TQuery>> <QueryBuilders>k__BackingField;
    [CompilerGeneratedAttribute]
private Func`2<TQuery, ValueTask`1<TResult>> <GetSingleResultFunc>k__BackingField;
    [CompilerGeneratedAttribute]
private Func`2<List`1<TQuery>, ValueTask`1<TResult>> <GetBatchResultFunc>k__BackingField;
    [CompilerGeneratedAttribute]
private Func`1<IOmniaQueryable`1<TQuery>> <CreateBuilderFunc>k__BackingField;
    [CompilerGeneratedAttribute]
private Func`1<TQuery> <CreateQueryFunc>k__BackingField;
    [CompilerGeneratedAttribute]
private IQueryFilterResolver <QueryFilterResolver>k__BackingField;
    protected List`1<IOmniaQueryable`1<TQuery>> QueryBuilders { get; }
    protected Func`2<TQuery, ValueTask`1<TResult>> GetSingleResultFunc { get; }
    protected Func`2<List`1<TQuery>, ValueTask`1<TResult>> GetBatchResultFunc { get; }
    protected Func`1<IOmniaQueryable`1<TQuery>> CreateBuilderFunc { get; }
    protected Func`1<TQuery> CreateQueryFunc { get; }
    protected IQueryFilterResolver QueryFilterResolver { get; }
    protected Exception InvalidParamException { get; }
    public IEnumerable`1<TQuery> Queries { get; }
    public IOmniaQueryable`1<TQuery> Builder { get; }
    public QueryContext`2(Func`2<TQuery, ValueTask`1<TResult>> getSingleResultFunc, Func`1<TQuery> createQueryFunc, IQueryFilterResolver queryFilterResolver);
    public QueryContext`2(Func`2<TQuery, ValueTask`1<TResult>> getSingleResultFunc, Func`1<IOmniaQueryable`1<TQuery>> createBuilderFunc);
    public QueryContext`2(Func`2<List`1<TQuery>, ValueTask`1<TResult>> getBatchResultFunc, Func`1<TQuery> createQueryFunc, IQueryFilterResolver queryFilterResolver);
    public QueryContext`2(Func`2<List`1<TQuery>, ValueTask`1<TResult>> getBatchResultFunc, Func`1<IOmniaQueryable`1<TQuery>> createBuilderFunc);
    [CompilerGeneratedAttribute]
protected List`1<IOmniaQueryable`1<TQuery>> get_QueryBuilders();
    [CompilerGeneratedAttribute]
protected Func`2<TQuery, ValueTask`1<TResult>> get_GetSingleResultFunc();
    [CompilerGeneratedAttribute]
protected Func`2<List`1<TQuery>, ValueTask`1<TResult>> get_GetBatchResultFunc();
    [CompilerGeneratedAttribute]
protected Func`1<IOmniaQueryable`1<TQuery>> get_CreateBuilderFunc();
    [CompilerGeneratedAttribute]
protected Func`1<TQuery> get_CreateQueryFunc();
    [CompilerGeneratedAttribute]
protected IQueryFilterResolver get_QueryFilterResolver();
    protected Exception get_InvalidParamException();
    public sealed virtual IEnumerable`1<TQuery> get_Queries();
    public sealed virtual IOmniaQueryable`1<TQuery> get_Builder();
    public sealed virtual IOmniaQueryable`1<TQuery> AddQuery();
    [AsyncStateMachineAttribute("Omnia.Fx.Queries.QueryContext`2/<GetResultAsync>d__29")]
public virtual ValueTask`1<TResult> GetResultAsync();
}
internal class Omnia.Fx.Queries.QueryFilterBuilder : object {
    [CompilerGeneratedAttribute]
private QueryFilter <QueryFilter>k__BackingField;
    [CompilerGeneratedAttribute]
private IQueryFilterResolver <QueryFilterResolver>k__BackingField;
    private QueryFilter QueryFilter { get; }
    protected IQueryFilterResolver QueryFilterResolver { get; }
    public QueryFilterBuilder(QueryFilter queryFilter, IQueryFilterResolver queryFilterResolver);
    [CompilerGeneratedAttribute]
private QueryFilter get_QueryFilter();
    [CompilerGeneratedAttribute]
protected IQueryFilterResolver get_QueryFilterResolver();
    public sealed virtual IFilterValueExpression Property(string internalName);
    public sealed virtual IFilterValueExpression Property(Expression`1<Func`2<TItem, object>> expression);
}
internal class Omnia.Fx.Queries.QueryFilterLogicalBuilder : object {
    [CompilerGeneratedAttribute]
private QueryFilter <QueryFilter>k__BackingField;
    [CompilerGeneratedAttribute]
private IQueryFilterResolver <QueryFilterResolver>k__BackingField;
    private QueryFilter QueryFilter { get; }
    protected IQueryFilterResolver QueryFilterResolver { get; }
    public QueryFilterLogicalBuilder(QueryFilter queryFilter, IQueryFilterResolver queryFilterResolver);
    [CompilerGeneratedAttribute]
private QueryFilter get_QueryFilter();
    [CompilerGeneratedAttribute]
protected IQueryFilterResolver get_QueryFilterResolver();
    public sealed virtual IFilterLogicalExpression And(Action`1<IFilterExpression> configure);
    public sealed virtual IFilterLogicalExpression Or(Action`1<IFilterExpression> configure);
}
public class Omnia.Fx.Queries.QueryFilterResolver : object {
    [CompilerGeneratedAttribute]
private IList`1<EnterprisePropertyDefinition> <EnterprisePropertyDefinitions>k__BackingField;
    [CompilerGeneratedAttribute]
private IList`1<string> <SpecialPropertyNames>k__BackingField;
    [CompilerGeneratedAttribute]
private Dictionary`2<string, string> <PropertiesMappings>k__BackingField;
    protected IList`1<EnterprisePropertyDefinition> EnterprisePropertyDefinitions { get; }
    protected IList`1<string> SpecialPropertyNames { get; }
    protected Dictionary`2<string, string> PropertiesMappings { get; }
    public QueryFilterResolver(IList`1<EnterprisePropertyDefinition> enterprisePropertyDefinitions, IList`1<string> specialPropertyNames, Dictionary`2<string, string> propertiesMappings);
    public QueryFilterResolver(IList`1<EnterprisePropertyDefinition> enterprisePropertyDefinitions, Dictionary`2<string, string> propertiesMappings);
    [CompilerGeneratedAttribute]
protected IList`1<EnterprisePropertyDefinition> get_EnterprisePropertyDefinitions();
    [CompilerGeneratedAttribute]
protected IList`1<string> get_SpecialPropertyNames();
    [CompilerGeneratedAttribute]
protected Dictionary`2<string, string> get_PropertiesMappings();
    public virtual QueryPropertyInfo GetPropertyInfo(string propertyName);
    public virtual IQueryFilterValueHandler GetFilterValueHandler(QueryPropertyInfo propertyInfo, QueryFilter queryFilter);
    protected virtual EnterprisePropertyDefinition GetEnterpriseProperty(string propertyName);
    protected virtual string GetFilterColumnName(string propertyName);
}
internal class Omnia.Fx.Queries.QueryFilterValueBuilder : object {
    [CompilerGeneratedAttribute]
private QueryFilter <QueryFilter>k__BackingField;
    [CompilerGeneratedAttribute]
private IQueryFilterResolver <QueryFilterResolver>k__BackingField;
    [CompilerGeneratedAttribute]
private QueryPropertyInfo <QueryPropertyInfo>k__BackingField;
    private QueryFilter QueryFilter { get; }
    protected IQueryFilterResolver QueryFilterResolver { get; }
    private QueryPropertyInfo QueryPropertyInfo { get; }
    public QueryFilterValueBuilder(QueryFilter queryFilter, IQueryFilterResolver queryFilterResolver, QueryPropertyInfo queryPropertyInfo);
    [CompilerGeneratedAttribute]
private QueryFilter get_QueryFilter();
    [CompilerGeneratedAttribute]
protected IQueryFilterResolver get_QueryFilterResolver();
    [CompilerGeneratedAttribute]
private QueryPropertyInfo get_QueryPropertyInfo();
    public sealed virtual IFilterLogicalExpression Equal(object value);
    public sealed virtual IFilterLogicalExpression NotEqual(object value);
    public sealed virtual IFilterLogicalExpression LessThan(object value);
    public sealed virtual IFilterLogicalExpression GreaterThan(object value);
    public sealed virtual IFilterLogicalExpression LessOrEqual(object value);
    public sealed virtual IFilterLogicalExpression GreaterOrEqual(object value);
    public sealed virtual IFilterLogicalExpression In(T2[] values);
    public sealed virtual IFilterLogicalExpression Like(string value);
    public sealed virtual IFilterLogicalExpression IsNull();
    public sealed virtual IFilterLogicalExpression IsNotNull();
    public sealed virtual IFilterLogicalExpression IsTrue();
    public sealed virtual IFilterLogicalExpression IsFalse();
    public sealed virtual IFilterLogicalExpression BitwiseAnd(int value);
    public IFilterLogicalExpression BitwiseNotAnd(int value);
    public sealed virtual IFilterValueExpression RawQuery();
    private IFilterLogicalExpression AddFilterValue(FilterOperator operatorValue, T2[] values);
}
public class Omnia.Fx.Queries.ValueTypes.BaseQueryFilterValueHandler : object {
    [CompilerGeneratedAttribute]
private string <InternalName>k__BackingField;
    [CompilerGeneratedAttribute]
private QueryFilter <QueryFilter>k__BackingField;
    [CompilerGeneratedAttribute]
private IList`1<string> <SpecialPropertyNames>k__BackingField;
    protected string InternalName { get; }
    protected QueryFilter QueryFilter { get; }
    protected IList`1<string> SpecialPropertyNames { get; }
    public BaseQueryFilterValueHandler(string internalName, QueryFilter queryFilter, IList`1<string> specialPropertyNames);
    [CompilerGeneratedAttribute]
protected string get_InternalName();
    [CompilerGeneratedAttribute]
protected QueryFilter get_QueryFilter();
    [CompilerGeneratedAttribute]
protected IList`1<string> get_SpecialPropertyNames();
    public sealed virtual void HandleFilterValue(FilterOperator operatorValue, T[] values);
    protected virtual void AddFitlerValue(FilterOperator operatorValue, T[] values);
    protected virtual List`1<object> GetValidValues(T[] values);
    protected virtual object GetValidValue(object value);
    protected virtual string GetCorrectDateTimeFormat(DateTime value);
    protected virtual void ValidateOperator(FilterOperator operatorValue);
    protected virtual void ValidateValues(FilterOperator operatorValue, T[] values);
    protected virtual IList`1<FilterOperator> GetSupportedOperators();
}
public class Omnia.Fx.Queries.ValueTypes.BooleanQueryFilterValueHandler : BaseQueryFilterValueHandler {
    public BooleanQueryFilterValueHandler(string internalName, QueryFilter queryFilter, IList`1<string> specialPropertyNames);
    protected virtual void AddFitlerValue(FilterOperator operatorValue, T[] values);
    protected virtual void ValidateValues(FilterOperator operatorValue, T[] values);
    protected virtual IList`1<FilterOperator> GetSupportedOperators();
}
public class Omnia.Fx.Queries.ValueTypes.DateTimeQueryFilterValueHandler : BaseQueryFilterValueHandler {
    public DateTimeQueryFilterValueHandler(string internalName, QueryFilter queryFilter, IList`1<string> specialPropertyNames);
    protected virtual void AddFitlerValue(FilterOperator operatorValue, T[] values);
    protected virtual void ValidateValues(FilterOperator operatorValue, T[] values);
    protected virtual IList`1<FilterOperator> GetSupportedOperators();
}
public interface Omnia.Fx.Queries.ValueTypes.IQueryFilterValueHandler {
    public abstract virtual void HandleFilterValue(FilterOperator operatorValue, T[] values);
}
public class Omnia.Fx.Queries.ValueTypes.LanguageQueryFilterValueHandler : TaxonomyQueryFilterValueHandler {
    public LanguageQueryFilterValueHandler(string internalName, QueryFilter queryFilter, IList`1<string> specialPropertyNames);
    protected virtual void ValidateValues(FilterOperator operatorValue, T[] values);
}
public class Omnia.Fx.Queries.ValueTypes.NumberQueryFilterValueHandler : BaseQueryFilterValueHandler {
    public NumberQueryFilterValueHandler(string internalName, QueryFilter queryFilter, IList`1<string> specialPropertyNames);
    protected virtual void ValidateValues(FilterOperator operatorValue, T[] values);
    protected virtual IList`1<FilterOperator> GetSupportedOperators();
}
public class Omnia.Fx.Queries.ValueTypes.PersonQueryFilterValueHandler : BaseQueryFilterValueHandler {
    public PersonQueryFilterValueHandler(string internalName, QueryFilter queryFilter, IList`1<string> specialPropertyNames);
    protected virtual void AddFitlerValue(FilterOperator operatorValue, T[] values);
    protected virtual void ValidateValues(FilterOperator operatorValue, T[] values);
    private Identity GetIdentity(T value);
    protected virtual IList`1<FilterOperator> GetSupportedOperators();
    protected virtual string GetPropertyValue(string value);
}
public class Omnia.Fx.Queries.ValueTypes.TaxonomyQueryFilterValueHandler : PersonQueryFilterValueHandler {
    public TaxonomyQueryFilterValueHandler(string internalName, QueryFilter queryFilter, IList`1<string> specialPropertyNames);
    protected virtual void AddFitlerValue(FilterOperator operatorValue, T[] values);
    protected virtual void ValidateValues(FilterOperator operatorValue, T[] values);
    protected virtual IList`1<QueryFilter> GetSubFiltersForInOperator(T[] values);
}
public class Omnia.Fx.Queries.ValueTypes.TextQueryFilterValueHandler : BaseQueryFilterValueHandler {
    public TextQueryFilterValueHandler(string internalName, QueryFilter queryFilter, IList`1<string> specialPropertyNames);
    protected virtual IList`1<FilterOperator> GetSupportedOperators();
}
public class Omnia.Fx.Queues.HttpContract : object {
}
public interface Omnia.Fx.Queues.IQueueBus {
    public abstract virtual ValueTask`1<Guid> EnqueueAsync(Queue`1<TMessage> queue, TMessage message, MessageSettings messageSettings);
    public abstract virtual ValueTask`1<Guid> EnqueueAsync(Queue`2<TMessage, TMetadata> queue, TMessage message, TMetadata metadata, MessageSettings messageSettings);
    public abstract virtual ValueTask`1<Guid> EnqueueAsync(Queue`1<TMessage> queue, TMessage message, Guid extensionId, MessageSettings messageSettings);
    public abstract virtual ValueTask`1<Guid> EnqueueAsync(Queue`2<TMessage, TMetadata> queue, TMessage message, TMetadata metadata, Guid extensionId, MessageSettings messageSettings);
    public abstract virtual IQueueBus DequeueAsync(Queue`1<TMessage> queue, Func`2<TMessage, Task> action);
    public abstract virtual IQueueBus DequeueAsync(Queue`2<TMessage, TMetadata> queue, Func`3<TMessage, TMetadata, Task> action);
    public abstract virtual ValueTask`1<QueueMessageProgress> GetProgress(Guid queueMessageId);
}
public interface Omnia.Fx.Queues.IQueueService {
    public abstract virtual ValueTask`1<QueueMessage> CreateQueueMessageAsync(QueueMessage queueMessage);
    public abstract virtual ValueTask`1<QueueMessage> GetQueueMessageAsync(Guid id);
    public abstract virtual ValueTask UpdateQueueMessageProgressAsync(Guid id, QueueMessageProgress status);
    public abstract virtual ValueTask`1<QueueMessageProgress> GetQueueMessageProgressAsync(Guid id);
}
internal class Omnia.Fx.Queues.QueueServiceOverHttp : object {
    [CompilerGeneratedAttribute]
private QueueServiceHttpClient <QueueHttpClient>k__BackingField;
    private QueueServiceHttpClient QueueHttpClient { get; }
    public QueueServiceOverHttp(IConfiguredHttpClient`1<OmniaServiceApi> omniaHttpClient);
    [CompilerGeneratedAttribute]
private QueueServiceHttpClient get_QueueHttpClient();
    [AsyncStateMachineAttribute("Omnia.Fx.Queues.QueueServiceOverHttp/<CreateQueueMessageAsync>d__5")]
public sealed virtual ValueTask`1<QueueMessage> CreateQueueMessageAsync(QueueMessage queueMessage);
    [AsyncStateMachineAttribute("Omnia.Fx.Queues.QueueServiceOverHttp/<GetQueueMessageAsync>d__6")]
public sealed virtual ValueTask`1<QueueMessage> GetQueueMessageAsync(Guid id);
    [AsyncStateMachineAttribute("Omnia.Fx.Queues.QueueServiceOverHttp/<UpdateQueueMessageProgressAsync>d__7")]
public sealed virtual ValueTask UpdateQueueMessageProgressAsync(Guid id, QueueMessageProgress status);
    [AsyncStateMachineAttribute("Omnia.Fx.Queues.QueueServiceOverHttp/<GetQueueMessageProgressAsync>d__8")]
public sealed virtual ValueTask`1<QueueMessageProgress> GetQueueMessageProgressAsync(Guid id);
}
public class Omnia.Fx.Search.HttpContract : object {
}
[ObsoleteAttribute]
public interface Omnia.Fx.Search.IOmniaSearch {
}
internal interface Omnia.Fx.Search.IOmniaSearchAdministration {
}
[ObsoleteAttribute]
public interface Omnia.Fx.Search.IOmniaSearchIndex {
    public abstract virtual Task`1<SearchTask> CreateIndexAsync(Index index, bool overWrite);
    public abstract virtual Task`1<IndexSettings> GetIndexAsync(Index index);
    public abstract virtual Task`1<SearchTask> UpdateIndexAsync(IndexSettings indexSettings);
    public abstract virtual Task`1<IEnumerable`1<SearchTask>> AddOrReplaceDocumentsAsync(Index index, IEnumerable`1<TIndexedDocument> documents, int batchInsertSize);
    public abstract virtual Task`1<IEnumerable`1<SearchTask>> UpdateDocumentsAsync(Index index, IEnumerable`1<TIndexedDocument> documents, int batchInsertSize);
    public abstract virtual Task`1<SearchTask> DeleteDocumentsAsync(Index index, SearchQuery query);
    public abstract virtual Task`1<ISearchResult`1<TIndexedDocument>> SearchAsync(Index index, SearchQuery query);
    public abstract virtual Task`1<IPagedResult`2<IPagedSearchResult`1<TIndexedDocument>, IPagedSearchResultToken>> SearchAsync(Index index, SearchQuery query, int pageSize);
    public abstract virtual Task`1<IPagedResult`2<IPagedSearchResult`1<TIndexedDocument>, IPagedSearchResultToken>> SearchAsync(IPagedSearchResultToken next);
}
public interface Omnia.Fx.Search.IOmniaSearchUserService {
    public abstract virtual Task`1<SearchTask> DeleteUsersAsync(IEnumerable`1<ExternalIdentityId> toDelete);
    public abstract virtual Task`1<IList`1<SearchTask>> EnsureSourceAsync(List`1<PropertySource> propertySources);
    public abstract virtual Task`1<UpsertUsersResult> UpsertUsersAsync(PropertySource propertySource, IEnumerable`1<UserIdentityProperties> userProperties);
    public abstract virtual Task`1<IList`1<SearchUserIdentity>> GetUserIdentitiesByTargetingAsync(IList`1<IList`1<SourceRelatedOmniaSearchProperty>> targeting);
    public abstract virtual Task`1<PagedOmniaSearchResult`1<SearchUserIdentity>> SearchPagedUsersAsync(SearchUserQuery targetingSearchQuery);
    public abstract virtual Task`1<List`1<SearchTask>> EnsureExternalIdentityAsync(string externalId);
}
[ObsoleteAttribute]
public interface Omnia.Fx.Search.ISearchTaskOpertations {
    public abstract virtual Task`1<SearchTask> WaitForTaskAsync(SearchTaskIdentifier taskIdentifier, int maxWaitTimeMs, int intervalMs);
}
public class Omnia.Fx.Search.OmniaSearch : object {
    [CompilerGeneratedAttribute]
private static Guid <OmniaSearchServiceId>k__BackingField;
    [CompilerGeneratedAttribute]
private OmniaSearchHttpWrapper <SearchHttpClient>k__BackingField;
    private static Guid OmniaSearchServiceId { get; }
    private OmniaSearchHttpWrapper SearchHttpClient { get; }
    public OmniaSearch(IOmniaServiceHttpClientFactory omniaServiceHttpClientFactory);
    private static OmniaSearch();
    [CompilerGeneratedAttribute]
private static Guid get_OmniaSearchServiceId();
    [CompilerGeneratedAttribute]
private OmniaSearchHttpWrapper get_SearchHttpClient();
    [AsyncStateMachineAttribute("Omnia.Fx.Search.OmniaSearch/<CreateIndexAsync>d__14")]
public sealed virtual Task`1<SearchTask> CreateIndexAsync(Index index, bool overWrite);
    [AsyncStateMachineAttribute("Omnia.Fx.Search.OmniaSearch/<WaitForTaskAsync>d__15")]
public sealed virtual Task`1<SearchTask> WaitForTaskAsync(SearchTaskIdentifier taskIdentifier, int maxWaitTimeMs, int intervalMs);
    [AsyncStateMachineAttribute("Omnia.Fx.Search.OmniaSearch/<GetIndexAsync>d__16")]
public sealed virtual Task`1<IndexSettings> GetIndexAsync(Index index);
    [AsyncStateMachineAttribute("Omnia.Fx.Search.OmniaSearch/<UpdateIndexAsync>d__17")]
public sealed virtual Task`1<SearchTask> UpdateIndexAsync(IndexSettings indexSettings);
    [AsyncStateMachineAttribute("Omnia.Fx.Search.OmniaSearch/<AddOrReplaceDocumentsAsync>d__18`1")]
public sealed virtual Task`1<IEnumerable`1<SearchTask>> AddOrReplaceDocumentsAsync(Index index, IEnumerable`1<TIndexedDocument> documents, int batchInsertSize);
    [AsyncStateMachineAttribute("Omnia.Fx.Search.OmniaSearch/<UpdateDocumentsAsync>d__19`1")]
public sealed virtual Task`1<IEnumerable`1<SearchTask>> UpdateDocumentsAsync(Index index, IEnumerable`1<TIndexedDocument> documents, int batchInsertSize);
    [AsyncStateMachineAttribute("Omnia.Fx.Search.OmniaSearch/<DeleteDocumentsAsync>d__20")]
public sealed virtual Task`1<SearchTask> DeleteDocumentsAsync(Index index, SearchQuery query);
    [AsyncStateMachineAttribute("Omnia.Fx.Search.OmniaSearch/<SearchAsync>d__21`1")]
public sealed virtual Task`1<ISearchResult`1<TIndexedDocument>> SearchAsync(Index index, SearchQuery query);
    [AsyncStateMachineAttribute("Omnia.Fx.Search.OmniaSearch/<SearchAsync>d__22`1")]
public sealed virtual Task`1<IPagedResult`2<IPagedSearchResult`1<TIndexedDocument>, IPagedSearchResultToken>> SearchAsync(Index index, SearchQuery query, int pageSize);
    [AsyncStateMachineAttribute("Omnia.Fx.Search.OmniaSearch/<SearchAsync>d__23`1")]
public sealed virtual Task`1<IPagedResult`2<IPagedSearchResult`1<TIndexedDocument>, IPagedSearchResultToken>> SearchAsync(IPagedSearchResultToken next);
}
public class Omnia.Fx.Search.OmniaSearchUserService : object {
    [CompilerGeneratedAttribute]
private static Guid <OmniaSearchServiceId>k__BackingField;
    [CompilerGeneratedAttribute]
private OmniaSearchHttpWrapper <SearchHttpClient>k__BackingField;
    private static Guid OmniaSearchServiceId { get; }
    private OmniaSearchHttpWrapper SearchHttpClient { get; }
    public OmniaSearchUserService(IOmniaServiceHttpClientFactory omniaServiceHttpClientFactory);
    private static OmniaSearchUserService();
    [CompilerGeneratedAttribute]
private static Guid get_OmniaSearchServiceId();
    [CompilerGeneratedAttribute]
private OmniaSearchHttpWrapper get_SearchHttpClient();
    [AsyncStateMachineAttribute("Omnia.Fx.Search.OmniaSearchUserService/<DeleteUsersAsync>d__8")]
public sealed virtual Task`1<SearchTask> DeleteUsersAsync(IEnumerable`1<ExternalIdentityId> toDelete);
    [AsyncStateMachineAttribute("Omnia.Fx.Search.OmniaSearchUserService/<EnsureExternalIdentityAsync>d__9")]
public sealed virtual Task`1<List`1<SearchTask>> EnsureExternalIdentityAsync(string externalId);
    [AsyncStateMachineAttribute("Omnia.Fx.Search.OmniaSearchUserService/<EnsureSourceAsync>d__10")]
public sealed virtual Task`1<IList`1<SearchTask>> EnsureSourceAsync(List`1<PropertySource> propertySources);
    [AsyncStateMachineAttribute("Omnia.Fx.Search.OmniaSearchUserService/<GetUserIdentitiesByTargetingAsync>d__11")]
public sealed virtual Task`1<IList`1<SearchUserIdentity>> GetUserIdentitiesByTargetingAsync(IList`1<IList`1<SourceRelatedOmniaSearchProperty>> targeting);
    [AsyncStateMachineAttribute("Omnia.Fx.Search.OmniaSearchUserService/<SearchPagedUsersAsync>d__12")]
public sealed virtual Task`1<PagedOmniaSearchResult`1<SearchUserIdentity>> SearchPagedUsersAsync(SearchUserQuery targetingSearchQuery);
    [AsyncStateMachineAttribute("Omnia.Fx.Search.OmniaSearchUserService/<UpsertUsersAsync>d__13")]
public sealed virtual Task`1<UpsertUsersResult> UpsertUsersAsync(PropertySource propertySource, IEnumerable`1<UserIdentityProperties> userProperties);
}
public static class Omnia.Fx.Security.AuthEndpoints : object {
}
internal class Omnia.Fx.Security.AuthProviders.AzureAdAuthProvider : object {
    [CompilerGeneratedAttribute]
private IIdentityService <IdentityService>k__BackingField;
    [CompilerGeneratedAttribute]
private AzureAdAuthServiceHttpClient <AuthHttpClient>k__BackingField;
    private IIdentityService IdentityService { get; }
    private AzureAdAuthServiceHttpClient AuthHttpClient { get; }
    public AzureAdAuthProvider(IConfiguredHttpClient`1<OmniaServiceApi> omniaHttpClient, IIdentityService identityService, ILogger`1<AzureAdAuthProvider> logger);
    [CompilerGeneratedAttribute]
private IIdentityService get_IdentityService();
    [CompilerGeneratedAttribute]
private AzureAdAuthServiceHttpClient get_AuthHttpClient();
    public sealed virtual IAzureAdAuthProviderService CreateAuthProviderService(IAuthServiceHelper authServiceHelper);
}
public interface Omnia.Fx.Security.AuthProviders.IAuthProvider`1 {
    public abstract virtual T CreateAuthProviderService(IAuthServiceHelper authServiceHelper);
}
internal interface Omnia.Fx.Security.AuthProviders.IAzureAdAuthProvider {
}
public interface Omnia.Fx.Security.AuthProviders.IAzureAdAuthProviderService {
    public abstract virtual ValueTask`1<AuthValidationResult> AuthenticateWithExternalAzureAdAppAsync(string externalAppAccessToken);
    public abstract virtual ValueTask`1<AuthValidationResult> AuthenticateWithUserCredentialAsync(UserCredentialInfo userCredential);
    public abstract virtual ValueTask`1<AccessTokenInfo> GetAccessTokenWithUserCredentialAsync(UserCredentialInfo userCredential, AccessTokenResourceTypes resourceType);
    public abstract virtual ValueTask`1<IEnumerable`1<AccessTokenInfo>> GetAccessTokensWithUserCredentialAsync(UserCredentialInfo userCredential, IEnumerable`1<AccessTokenResourceTypes> resourceTypes);
    public abstract virtual ValueTask`1<AccessTokenInfo> GetAccessTokenWithUserCredentialAsync(UserCredentialInfo userCredential, string resource);
    public abstract virtual ValueTask`1<IEnumerable`1<AccessTokenInfo>> GetAccessTokensWithUserCredentialAsync(UserCredentialInfo userCredential, IEnumerable`1<string> resources);
}
internal interface Omnia.Fx.Security.AuthProviders.IOmniaAuthProvider {
}
public interface Omnia.Fx.Security.AuthProviders.IOmniaAuthProviderService {
    public abstract virtual ValueTask UpdatePasswordAsync(UserIdentity userIdentity, string password, bool bypassValidation);
    public abstract virtual Task UpdateAuthInfoAsync(UserIdentity userIdentity, UserAuthenticationInformation authInfo);
    public abstract virtual Task`1<UserAuthenticationInformation> GetAuthInfoAsync(UserIdentity userIdentity);
}
internal class Omnia.Fx.Security.AuthProviders.OmniaAuthProvider : object {
    [CompilerGeneratedAttribute]
private OmniaAuthServiceHttpClient <AuthHttpClient>k__BackingField;
    private OmniaAuthServiceHttpClient AuthHttpClient { get; }
    public OmniaAuthProvider(IConfiguredHttpClient`1<OmniaServiceApi> omniaHttpClient, ILogger`1<AzureAdAuthProvider> logger);
    [CompilerGeneratedAttribute]
private OmniaAuthServiceHttpClient get_AuthHttpClient();
    public sealed virtual IOmniaAuthProviderService CreateAuthProviderService(IAuthServiceHelper authServiceHelper);
}
internal class Omnia.Fx.Security.AuthService : AuthServiceBase {
    protected static string ClientSecretsCacheKeyPrefix;
    [CompilerGeneratedAttribute]
private AuthServiceHttpClient <AuthHttpClient>k__BackingField;
    private AuthServiceHttpClient AuthHttpClient { get; }
    public IAzureAdAuthProviderService AzureAdProvider { get; }
    public IOmniaAuthProviderService OmniaProvider { get; }
    public AuthService(IConfiguredHttpClient`1<OmniaServiceApi> omniaHttpClient, IOmniaSynchronizedMemoryCache synchronizedCache, IOmniaMemoryCache memoryCache, ILogger`1<AuthService> logger, IMessageBus messageBus, IServiceProvider serviceProvider, IAuthTokenHelper authTokenHelper, IOptionsMonitor`1<OmniaAppSettings> omniaAppSettings, IOptionsMonitor`1<OmniaServicesDnsSettings> omniaServiceDnsMapping);
    [CompilerGeneratedAttribute]
private AuthServiceHttpClient get_AuthHttpClient();
    public sealed virtual IAzureAdAuthProviderService get_AzureAdProvider();
    public sealed virtual IOmniaAuthProviderService get_OmniaProvider();
    [AsyncStateMachineAttribute("Omnia.Fx.Security.AuthService/<InvalidateAppOnlyAccessTokensAsync>d__10")]
public virtual ValueTask InvalidateAppOnlyAccessTokensAsync();
    [AsyncStateMachineAttribute("Omnia.Fx.Security.AuthService/<InvalidateOmniaTokenAsync>d__11")]
public sealed virtual ValueTask InvalidateOmniaTokenAsync(string tokenKey);
    [AsyncStateMachineAttribute("Omnia.Fx.Security.AuthService/<InvalidateTokensForUserAsync>d__12")]
public sealed virtual ValueTask InvalidateTokensForUserAsync(Identity userIdentity);
    [AsyncStateMachineAttribute("Omnia.Fx.Security.AuthService/<InvalidateAllTokensAsync>d__13")]
public sealed virtual ValueTask InvalidateAllTokensAsync();
    [AsyncStateMachineAttribute("Omnia.Fx.Security.AuthService/<CreateRefreshedTokenAsync>d__14")]
public sealed virtual ValueTask`1<OmniaRefreshedToken> CreateRefreshedTokenAsync(string tokenKey);
    [AsyncStateMachineAttribute("Omnia.Fx.Security.AuthService/<AuthenticateWithRefreshedTokenAsync>d__15")]
public sealed virtual ValueTask`1<AuthValidationResult> AuthenticateWithRefreshedTokenAsync(string refreshedToken);
    [AsyncStateMachineAttribute("Omnia.Fx.Security.AuthService/<ValidateClientIdAndSecretAsync>d__16")]
protected virtual ValueTask`1<bool> ValidateClientIdAndSecretAsync(Guid clientId, string clientSecret);
    protected virtual Task`1<AuthValidationResult> RefreshTokenAsync(AuthValidationSuccessResult authResult, string redirectUrl);
    [AsyncStateMachineAttribute("Omnia.Fx.Security.AuthService/<GetAppOnlyAccessTokensInternalAsync>d__18")]
protected virtual ValueTask`1<IEnumerable`1<AccessTokenInfo>> GetAppOnlyAccessTokensInternalAsync(IEnumerable`1<string> resources, bool ignoreSystemAccount);
    [AsyncStateMachineAttribute("Omnia.Fx.Security.AuthService/<GetAccessTokensWithOmniaTokenKeyInternalAsync>d__19")]
protected virtual ValueTask`1<IEnumerable`1<AccessTokenInfo>> GetAccessTokensWithOmniaTokenKeyInternalAsync(AuthValidationSuccessResult authResult, IEnumerable`1<string> resources);
    protected virtual Task`1<IEnumerable`1<AuthenticationInvalidation>> GetAuthInvalidationsWithoutCacheAsync();
    [CompilerGeneratedAttribute]
private IAzureAdAuthProviderService <get_AzureAdProvider>b__7_0(IServiceProvider serviceProvider);
    [CompilerGeneratedAttribute]
private IOmniaAuthProviderService <get_OmniaProvider>b__9_0(IServiceProvider serviceProvider);
    [CompilerGeneratedAttribute]
[DebuggerHiddenAttribute]
private ValueTask <>n__0();
}
public abstract class Omnia.Fx.Security.AuthServiceBase : object {
    protected static int InvalidResultCacheExpiredSeconds;
    protected static int TokenRefreshedResultCacheExpiredMinutes;
    private Dictionary`2<Type, IAuthProviderService> _authProviderServiceByProviderServiceType;
    [CompilerGeneratedAttribute]
private AuthServiceCacheHandler <CacheHandler>k__BackingField;
    [CompilerGeneratedAttribute]
private IServiceProvider <ServiceProvider>k__BackingField;
    [CompilerGeneratedAttribute]
private IMessageBus <MessageBus>k__BackingField;
    [CompilerGeneratedAttribute]
private IOptionsMonitor`1<OmniaAppSettings> <OmniaAppSettings>k__BackingField;
    [CompilerGeneratedAttribute]
private IOptionsMonitor`1<OmniaServicesDnsSettings> <OmniaServiceDnsMapping>k__BackingField;
    [CompilerGeneratedAttribute]
private IOmniaCacheWithKeyHelper`1<IOmniaMemoryCache> <MemoryCacheHelper>k__BackingField;
    [CompilerGeneratedAttribute]
private IAuthTokenHelper <AuthTokenHelper>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsMaster>k__BackingField;
    public static TimeSpan FadingExpiration { get; }
    protected AuthServiceCacheHandler CacheHandler { get; }
    protected IServiceProvider ServiceProvider { get; }
    protected IMessageBus MessageBus { get; }
    protected IOptionsMonitor`1<OmniaAppSettings> OmniaAppSettings { get; }
    protected IOptionsMonitor`1<OmniaServicesDnsSettings> OmniaServiceDnsMapping { get; }
    protected IOmniaCacheWithKeyHelper`1<IOmniaMemoryCache> MemoryCacheHelper { get; }
    protected IAuthTokenHelper AuthTokenHelper { get; }
    protected bool IsMaster { get; }
    public AuthServiceBase(IOmniaSynchronizedMemoryCache synchronizedCache, IOmniaMemoryCache memoryCache, IServiceProvider serviceProvider, IOptionsMonitor`1<OmniaAppSettings> omniaAppSettings, IOptionsMonitor`1<OmniaServicesDnsSettings> omniaServiceDnsMapping, IMessageBus messageBus, IAuthTokenHelper authTokenHelper, bool isMaster);
    public static TimeSpan get_FadingExpiration();
    [CompilerGeneratedAttribute]
protected AuthServiceCacheHandler get_CacheHandler();
    [CompilerGeneratedAttribute]
protected IServiceProvider get_ServiceProvider();
    [CompilerGeneratedAttribute]
protected IMessageBus get_MessageBus();
    [CompilerGeneratedAttribute]
protected IOptionsMonitor`1<OmniaAppSettings> get_OmniaAppSettings();
    [CompilerGeneratedAttribute]
protected IOptionsMonitor`1<OmniaServicesDnsSettings> get_OmniaServiceDnsMapping();
    [CompilerGeneratedAttribute]
protected IOmniaCacheWithKeyHelper`1<IOmniaMemoryCache> get_MemoryCacheHelper();
    [CompilerGeneratedAttribute]
protected IAuthTokenHelper get_AuthTokenHelper();
    [CompilerGeneratedAttribute]
protected bool get_IsMaster();
    [AsyncStateMachineAttribute("Omnia.Fx.Security.AuthServiceBase/<AuthenticateWithAppContextAsync>d__31")]
public virtual ValueTask`1<AuthValidationResult> AuthenticateWithAppContextAsync(Guid clientId, string clientSecret);
    public virtual ValueTask`1<AuthValidationResult> AuthenticateWithTokenKeyAsync(string tokenKey, bool ignoreSpecialTokenKey, string redirectUrl);
    [AsyncStateMachineAttribute("Omnia.Fx.Security.AuthServiceBase/<CreateAnonymousValidationResult>d__33")]
public virtual Task`1<AuthValidationResult> CreateAnonymousValidationResult();
    [AsyncStateMachineAttribute("Omnia.Fx.Security.AuthServiceBase/<GetAccessTokenAndThrowIfInvalidAsync>d__34")]
public virtual Task`1<AccessTokenInfo> GetAccessTokenAndThrowIfInvalidAsync(string resource, Func`1<ValueTask`1<AccessTokenInfo>> getAccessTokenFunc);
    [AsyncStateMachineAttribute("Omnia.Fx.Security.AuthServiceBase/<GetAccessTokensAndThrowIfInvalidAsync>d__35")]
public virtual Task`1<IEnumerable`1<AccessTokenInfo>> GetAccessTokensAndThrowIfInvalidAsync(IEnumerable`1<string> resources, Func`1<ValueTask`1<IEnumerable`1<AccessTokenInfo>>> getAccessTokensFunc);
    [AsyncStateMachineAttribute("Omnia.Fx.Security.AuthServiceBase/<GetAccessTokenWithOmniaTokenKeyAsync>d__36")]
public sealed virtual ValueTask`1<AccessTokenInfo> GetAccessTokenWithOmniaTokenKeyAsync(string tokenKey, AccessTokenResourceTypes resourceType);
    [AsyncStateMachineAttribute("Omnia.Fx.Security.AuthServiceBase/<GetAccessTokensWithOmniaTokenKeyAsync>d__37")]
public sealed virtual ValueTask`1<IEnumerable`1<AccessTokenInfo>> GetAccessTokensWithOmniaTokenKeyAsync(string tokenKey, IEnumerable`1<AccessTokenResourceTypes> resourceTypes);
    [AsyncStateMachineAttribute("Omnia.Fx.Security.AuthServiceBase/<GetAccessTokenWithOmniaTokenKeyAsync>d__38")]
public sealed virtual ValueTask`1<AccessTokenInfo> GetAccessTokenWithOmniaTokenKeyAsync(string tokenKey, string resource);
    [AsyncStateMachineAttribute("Omnia.Fx.Security.AuthServiceBase/<GetAccessTokensWithOmniaTokenKeyAsync>d__39")]
public virtual ValueTask`1<IEnumerable`1<AccessTokenInfo>> GetAccessTokensWithOmniaTokenKeyAsync(string tokenKey, IEnumerable`1<string> resources);
    [AsyncStateMachineAttribute("Omnia.Fx.Security.AuthServiceBase/<GetAppOnlyAccessTokenAsync>d__40")]
public sealed virtual ValueTask`1<AccessTokenInfo> GetAppOnlyAccessTokenAsync(AccessTokenResourceTypes resourceType, bool ignoreSystemAccount);
    [AsyncStateMachineAttribute("Omnia.Fx.Security.AuthServiceBase/<GetAppOnlyAccessTokensAsync>d__41")]
public sealed virtual ValueTask`1<IEnumerable`1<AccessTokenInfo>> GetAppOnlyAccessTokensAsync(IEnumerable`1<AccessTokenResourceTypes> resourceTypes, bool ignoreSystemAccount);
    [AsyncStateMachineAttribute("Omnia.Fx.Security.AuthServiceBase/<GetAppOnlyAccessTokenAsync>d__42")]
public sealed virtual ValueTask`1<AccessTokenInfo> GetAppOnlyAccessTokenAsync(string resource, bool ignoreSystemAccount);
    [AsyncStateMachineAttribute("Omnia.Fx.Security.AuthServiceBase/<GetAppOnlyAccessTokensAsync>d__43")]
public virtual ValueTask`1<IEnumerable`1<AccessTokenInfo>> GetAppOnlyAccessTokensAsync(IEnumerable`1<string> resources, bool ignoreSystemAccount);
    [AsyncStateMachineAttribute("Omnia.Fx.Security.AuthServiceBase/<InvalidateAppOnlyAccessTokensAsync>d__44")]
public virtual ValueTask InvalidateAppOnlyAccessTokensAsync();
    public virtual Uri GetAuthenticationUrl(string redirectUrl);
    [AsyncStateMachineAttribute("Omnia.Fx.Security.AuthServiceBase/<GetOrSetAccessTokensCacheAsync>d__46")]
public virtual ValueTask`1<IEnumerable`1<AccessTokenInfo>> GetOrSetAccessTokensCacheAsync(string cacheKey, IEnumerable`1<string> resources, Func`2<IEnumerable`1<string>, ValueTask`1<ValueTuple`2<IEnumerable`1<AccessTokenInfo>, ResolvedUserIdentity>>> getAccessTokensWithoutCacheFunc);
    protected TAuthProviderService GetOrSetAuthProviderService(Func`2<IServiceProvider, TAuthProviderService> createAuthProviderService);
    protected TAuthProvider GetAuthProvider();
    [AsyncStateMachineAttribute("Omnia.Fx.Security.AuthServiceBase/<GetAuthValidationResultAsync>d__49")]
protected virtual ValueTask`1<AuthValidationResult> GetAuthValidationResultAsync(string tokenKey, bool ignoreSpecialTokenKey, string redirectUrl);
    protected virtual AuthValidationSuccessResult CreateAppOnlyAuthValidationResult(Nullable`1<Guid> clientId);
    protected virtual AuthValidationFailedResult CreateAuthValidationFailedResult(string redirectUrl, string reason);
    protected virtual ValueTuple`2<List`1<AccessTokenInfo>, List`1<string>> GetAccessTokensFromCache(Func`2<string, AccessTokenInfo> getAccessTokenCacheByResourceFunc, IEnumerable`1<string> resources);
    protected virtual List`1<string> GetResourcesWithHostOnly(IEnumerable`1<string> resources);
    protected abstract virtual ValueTask`1<bool> ValidateClientIdAndSecretAsync(Guid clientId, string clientSecret);
    protected abstract virtual ValueTask`1<IEnumerable`1<AccessTokenInfo>> GetAppOnlyAccessTokensInternalAsync(IEnumerable`1<string> resources, bool ignoreSystemAccount);
    protected abstract virtual ValueTask`1<IEnumerable`1<AccessTokenInfo>> GetAccessTokensWithOmniaTokenKeyInternalAsync(AuthValidationSuccessResult authResult, IEnumerable`1<string> resources);
    [AsyncStateMachineAttribute("Omnia.Fx.Security.AuthServiceBase/<ValidateTokenAsync>d__57")]
protected Task`1<AuthValidationResult> ValidateTokenAsync(string tokenKey, string redirectUrl, bool failIfExpired);
    public ValueTask`1<IEnumerable`1<AuthenticationInvalidation>> GetAuthInvalidationsAsync();
    protected abstract virtual Task`1<AuthValidationResult> RefreshTokenAsync(AuthValidationSuccessResult authResult, string redirectUrl);
    protected abstract virtual Task`1<IEnumerable`1<AuthenticationInvalidation>> GetAuthInvalidationsWithoutCacheAsync();
}
public class Omnia.Fx.Security.AuthTokenHelper : object {
    protected static string FailedResultReason;
    private RSA _rsaProvider;
    protected IServiceProvider _serviceProvider;
    protected IOptionsMonitor`1<OmniaAppSettings> _omniaAppSettings;
    public AuthTokenHelper(IServiceProvider serviceProvider, IOptionsMonitor`1<OmniaAppSettings> omniaAppSettings);
    [AsyncStateMachineAttribute("Omnia.Fx.Security.AuthTokenHelper/<ValidateTokenAsync>d__5")]
public sealed virtual Task`1<AuthValidationResult> ValidateTokenAsync(string token, IEnumerable`1<AuthenticationInvalidation> invalidations, Func`2<string, AuthValidationFailedResult> createFailedResultFunc);
    public sealed virtual bool IsEnvironmentForDevIntent();
    [AsyncStateMachineAttribute("Omnia.Fx.Security.AuthTokenHelper/<EnsureRsaSigningKeyAsync>d__7")]
protected virtual Task`1<RsaSecurityKey> EnsureRsaSigningKeyAsync();
    [AsyncStateMachineAttribute("Omnia.Fx.Security.AuthTokenHelper/<GetEncryptionKeyAsync>d__8")]
protected virtual Task`1<string> GetEncryptionKeyAsync();
    protected virtual bool IsTokenValid(long tokenIssuedAt, OmniaTokenValidity tokenValidity);
    protected virtual OmniaTokenValidity GetTokenValidity(AuthValidationSuccessResult authResult, IEnumerable`1<AuthenticationInvalidation> invalidations);
    protected virtual AuthValidationSuccessResult MapToAuthResult(string tokenKey, TokenValidationResult tokenResult, AuthValidationStatus successStatus);
    protected Nullable`1<long> GetInvalidationIntDate(AuthenticationInvalidation invalidation);
}
public interface Omnia.Fx.Security.AzureAdResourceProviders.IAzureAdResourceProvider {
    public string Id { get; }
    public IEnumerable`1<string> PrimaryResources { get; }
    public abstract virtual string get_Id();
    public abstract virtual IEnumerable`1<string> get_PrimaryResources();
}
internal class Omnia.Fx.Security.AzureAdResourceProviders.M365GraphResourceProvider : object {
    public string Id { get; }
    public IEnumerable`1<string> PrimaryResources { get; }
    public sealed virtual string get_Id();
    public sealed virtual IEnumerable`1<string> get_PrimaryResources();
}
internal class Omnia.Fx.Security.AzureAdResources : object {
    [CompilerGeneratedAttribute]
private IServiceProvider <ServiceProvider>k__BackingField;
    private IServiceProvider ServiceProvider { get; }
    private IEnumerable`1<IAzureAdResourceProvider> ResourceProviders { get; }
    public AzureAdResources(IServiceProvider serviceProvider);
    [CompilerGeneratedAttribute]
private IServiceProvider get_ServiceProvider();
    private IEnumerable`1<IAzureAdResourceProvider> get_ResourceProviders();
    public sealed virtual String[] GetPrimaryResources();
    public sealed virtual String[] GetPrimaryResources(string providerId);
}
public abstract class Omnia.Fx.Security.BaseResourceEvaluator : object {
    [CompilerGeneratedAttribute]
private IScopedContextResolver <ScopedContextResolver>k__BackingField;
    protected IScopedContextResolver ScopedContextResolver { get; }
    public BaseResourceEvaluator(IScopedContextResolver scopedContextResolver);
    [CompilerGeneratedAttribute]
protected IScopedContextResolver get_ScopedContextResolver();
    [AsyncStateMachineAttribute("Omnia.Fx.Security.BaseResourceEvaluator/<GetRoleResourceAsync>d__4")]
public sealed virtual ValueTask`1<string> GetRoleResourceAsync(Dictionary`2<string, string> context);
    [AsyncStateMachineAttribute("Omnia.Fx.Security.BaseResourceEvaluator/<GetConnectedAppInstanceIdAsync>d__5")]
public sealed virtual ValueTask`1<Nullable`1<Guid>> GetConnectedAppInstanceIdAsync(Dictionary`2<string, string> context);
    private Dictionary`2<string, string> GetParamContext(Dictionary`2<string, string> context);
    public abstract virtual ValueTask`1<string> GetRoleResourceAsync();
    protected abstract virtual Dictionary`2<string, ServiceParamTypes> GetParamInfo();
    protected abstract virtual ValueTask`1<string> GetRoleResourceWithContextAsync(Dictionary`2<string, string> context);
    public abstract virtual ValueTask`1<Nullable`1<Guid>> GetConnectedAppInstanceIdAsync();
    protected abstract virtual ValueTask`1<Nullable`1<Guid>> GetConnectedAppInstanceIdWithContextAsync(Dictionary`2<string, string> context);
}
public class Omnia.Fx.Security.DefaultRoleResourceResolver : object {
    private IRoleEvaluatorResolver _roleEvaluatorResolver;
    [CompilerGeneratedAttribute]
private ILogger`1<DefaultRoleResourceResolver> <Logger>k__BackingField;
    private ILogger`1<DefaultRoleResourceResolver> Logger { get; }
    public DefaultRoleResourceResolver(IRoleEvaluatorResolver roleEvaluatorResolver, ILogger`1<DefaultRoleResourceResolver> logger);
    [CompilerGeneratedAttribute]
private ILogger`1<DefaultRoleResourceResolver> get_Logger();
    [AsyncStateMachineAttribute("Omnia.Fx.Security.DefaultRoleResourceResolver/<GetResourceInfoAsync>d__5")]
public sealed virtual ValueTask`1<RoleEvaluationResult> GetResourceInfoAsync(OmniaRole role, Dictionary`2<Guid, OmniaRole> apiRolesDictionary, Dictionary`2<string, string> context);
    [AsyncStateMachineAttribute("Omnia.Fx.Security.DefaultRoleResourceResolver/<GetGlobalRoleResourceAsync>d__6")]
protected virtual ValueTask`1<RoleEvaluationResult> GetGlobalRoleResourceAsync(OmniaRole role, Dictionary`2<Guid, OmniaRole> apiRolesDictionary, Dictionary`2<string, string> context);
    [AsyncStateMachineAttribute("Omnia.Fx.Security.DefaultRoleResourceResolver/<GetTenantRoleResourceAsync>d__7")]
protected virtual ValueTask`1<RoleEvaluationResult> GetTenantRoleResourceAsync(OmniaRole role, Dictionary`2<Guid, OmniaRole> apiRolesDictionary, Dictionary`2<string, string> context);
    [AsyncStateMachineAttribute("Omnia.Fx.Security.DefaultRoleResourceResolver/<GetCustomRoleResourceAsync>d__8")]
protected virtual ValueTask`1<RoleEvaluationResult> GetCustomRoleResourceAsync(OmniaRole role, Dictionary`2<Guid, OmniaRole> apiRolesDictionary, Dictionary`2<string, string> context);
    [AsyncStateMachineAttribute("Omnia.Fx.Security.DefaultRoleResourceResolver/<GetParentRoleResourceAsync>d__9")]
protected virtual ValueTask`1<RoleEvaluationResult> GetParentRoleResourceAsync(OmniaRole role, Dictionary`2<Guid, OmniaRole> apiRolesDictionary, Dictionary`2<string, string> context);
    [AsyncStateMachineAttribute("Omnia.Fx.Security.DefaultRoleResourceResolver/<GetSecurityRulesRoleResourceAsync>d__10")]
protected virtual ValueTask`1<Dictionary`2<Guid, RoleEvaluationResult>> GetSecurityRulesRoleResourceAsync(OmniaRole role, Dictionary`2<Guid, OmniaRole> apiRolesDictionary, Dictionary`2<string, string> context);
    [AsyncStateMachineAttribute("Omnia.Fx.Security.DefaultRoleResourceResolver/<GetEditableRolesResourceAsync>d__11")]
protected virtual ValueTask`1<Dictionary`2<Guid, RoleEvaluationResult>> GetEditableRolesResourceAsync(OmniaRole role, Dictionary`2<Guid, OmniaRole> apiRolesDictionary, Dictionary`2<string, string> context);
    [AsyncStateMachineAttribute("Omnia.Fx.Security.DefaultRoleResourceResolver/<GetCustomRoleResourceFromEvaluatorAsync>d__12")]
protected virtual ValueTask`1<string> GetCustomRoleResourceFromEvaluatorAsync(OmniaRole role, Dictionary`2<string, string> context);
    [AsyncStateMachineAttribute("Omnia.Fx.Security.DefaultRoleResourceResolver/<GetCustomRoleAppInstanceIdFromEvaluatorAsync>d__13")]
protected virtual ValueTask`1<Nullable`1<Guid>> GetCustomRoleAppInstanceIdFromEvaluatorAsync(OmniaRole role, Dictionary`2<string, string> context);
}
public interface Omnia.Fx.Security.Evaluators.IUserResourceEvaluator {
}
internal class Omnia.Fx.Security.Evaluators.UserResourceEvaluator : object {
    public sealed virtual ValueTask`1<string> GetRoleResourceAsync();
    public sealed virtual ValueTask`1<string> GetRoleResourceAsync(Dictionary`2<string, string> context);
    [AsyncStateMachineAttribute("Omnia.Fx.Security.Evaluators.UserResourceEvaluator/<GetConnectedAppInstanceIdAsync>d__3")]
public sealed virtual ValueTask`1<Nullable`1<Guid>> GetConnectedAppInstanceIdAsync();
    [AsyncStateMachineAttribute("Omnia.Fx.Security.Evaluators.UserResourceEvaluator/<GetConnectedAppInstanceIdAsync>d__4")]
public sealed virtual ValueTask`1<Nullable`1<Guid>> GetConnectedAppInstanceIdAsync(Dictionary`2<string, string> context);
}
public class Omnia.Fx.Security.HttpContract : object {
}
public interface Omnia.Fx.Security.IAuthProviderService {
}
public interface Omnia.Fx.Security.IAuthService {
    public IAzureAdAuthProviderService AzureAdProvider { get; }
    public IOmniaAuthProviderService OmniaProvider { get; }
    public abstract virtual IAzureAdAuthProviderService get_AzureAdProvider();
    public abstract virtual IOmniaAuthProviderService get_OmniaProvider();
    public abstract virtual ValueTask`1<AuthValidationResult> AuthenticateWithAppContextAsync(Guid clientId, string clientSecret);
    public abstract virtual ValueTask`1<AuthValidationResult> AuthenticateWithTokenKeyAsync(string tokenKey, bool ignoreSpecialTokenKey, string redirectUrl);
    public abstract virtual ValueTask`1<OmniaRefreshedToken> CreateRefreshedTokenAsync(string tokenKey);
    public abstract virtual ValueTask`1<AuthValidationResult> AuthenticateWithRefreshedTokenAsync(string refreshedToken);
    public abstract virtual Task`1<AuthValidationResult> CreateAnonymousValidationResult();
    public abstract virtual ValueTask`1<AccessTokenInfo> GetAccessTokenWithOmniaTokenKeyAsync(string tokenKey, AccessTokenResourceTypes resourceType);
    public abstract virtual ValueTask`1<IEnumerable`1<AccessTokenInfo>> GetAccessTokensWithOmniaTokenKeyAsync(string tokenKey, IEnumerable`1<AccessTokenResourceTypes> resourceTypes);
    public abstract virtual ValueTask`1<AccessTokenInfo> GetAccessTokenWithOmniaTokenKeyAsync(string tokenKey, string resource);
    public abstract virtual ValueTask`1<IEnumerable`1<AccessTokenInfo>> GetAccessTokensWithOmniaTokenKeyAsync(string tokenKey, IEnumerable`1<string> resources);
    public abstract virtual ValueTask`1<AccessTokenInfo> GetAppOnlyAccessTokenAsync(AccessTokenResourceTypes resourceType, bool ignoreSystemAccount);
    public abstract virtual ValueTask`1<IEnumerable`1<AccessTokenInfo>> GetAppOnlyAccessTokensAsync(IEnumerable`1<AccessTokenResourceTypes> resources, bool ignoreSystemAccount);
    public abstract virtual ValueTask`1<AccessTokenInfo> GetAppOnlyAccessTokenAsync(string resource, bool ignoreSystemAccount);
    public abstract virtual ValueTask`1<IEnumerable`1<AccessTokenInfo>> GetAppOnlyAccessTokensAsync(IEnumerable`1<string> resources, bool ignoreSystemAccount);
    public abstract virtual ValueTask InvalidateOmniaTokenAsync(string tokenKey);
    public abstract virtual ValueTask InvalidateTokensForUserAsync(Identity userIdentity);
    public abstract virtual ValueTask InvalidateAllTokensAsync();
    public abstract virtual ValueTask InvalidateAppOnlyAccessTokensAsync();
    public abstract virtual Task`1<AccessTokenInfo> GetAccessTokenAndThrowIfInvalidAsync(string resource, Func`1<ValueTask`1<AccessTokenInfo>> getAccessTokenFunc);
    public abstract virtual Task`1<IEnumerable`1<AccessTokenInfo>> GetAccessTokensAndThrowIfInvalidAsync(IEnumerable`1<string> resources, Func`1<ValueTask`1<IEnumerable`1<AccessTokenInfo>>> getAccessTokensFunc);
}
public interface Omnia.Fx.Security.IAuthServiceHelper {
    public abstract virtual ValueTask`1<IEnumerable`1<AccessTokenInfo>> GetOrSetAccessTokensCacheAsync(string cacheKey, IEnumerable`1<string> resources, Func`2<IEnumerable`1<string>, ValueTask`1<ValueTuple`2<IEnumerable`1<AccessTokenInfo>, ResolvedUserIdentity>>> getAccessTokensWithoutCacheFunc);
}
public interface Omnia.Fx.Security.IAuthTokenHelper {
    public abstract virtual Task`1<AuthValidationResult> ValidateTokenAsync(string token, IEnumerable`1<AuthenticationInvalidation> invalidations, Func`2<string, AuthValidationFailedResult> createFailedResultFunc);
    public abstract virtual bool IsEnvironmentForDevIntent();
}
public interface Omnia.Fx.Security.IAzureAdResources {
    public abstract virtual String[] GetPrimaryResources();
    public abstract virtual String[] GetPrimaryResources(string providerId);
}
public interface Omnia.Fx.Security.IOmniaAuthorizationService {
    public abstract virtual ValueTask`1<bool> AuthorizeAsync(Guid[] requiredRoles);
    public abstract virtual ValueTask`1<bool> AuthorizeAsync(Identity identity, Guid[] requiredRoles);
    public abstract virtual ValueTask`1<Dictionary`2<Guid, RoleEvaluationResult>> GetAuthorizedRolesAsync(Guid[] requiredRoles);
    public abstract virtual ValueTask`1<ValueTuple`2<IList`1<Guid>, Dictionary`2<Guid, RoleEvaluationResult>>> CheckAuthorizationToAddOrUpdateRolesAsync(Guid[] requiredRoles);
    public abstract virtual ValueTask`1<IList`1<PermissionBinding>> GetIdentityRelatedBindingsByAppInstanceIdsAsync(Identity identity, IEnumerable`1<Guid> appInstanceIds, IEnumerable`1<Guid> requiredRoles);
    public abstract virtual ValueTask`1<IList`1<PermissionBinding>> GetOverridenRulesBindingsAsync(IEnumerable`1<Guid> appInstanceIds);
    public abstract virtual ValueTask`1<IList`1<Guid>> GetAllExtensionRoleIds();
}
public interface Omnia.Fx.Security.IPermissionChangedContext {
    public bool IsAuthorized { get; }
    public IEnumerable`1<Guid> RelatedRoleIds { get; }
    public RolePermissionSettingWithContextParam PermissionSettingsWithContext { get; }
    public abstract virtual bool get_IsAuthorized();
    public abstract virtual IEnumerable`1<Guid> get_RelatedRoleIds();
    public abstract virtual RolePermissionSettingWithContextParam get_PermissionSettingsWithContext();
    public abstract virtual ValueTask`1<PermissionBindingsChangeInfo> UpdateAsync();
}
public interface Omnia.Fx.Security.IPermissionResourceStore {
    public abstract virtual ValueTask`1<ValueTuple`2<bool, Dictionary`2<Guid, RoleEvaluationResult>>> ResolveAsync(Identity identity, IList`1<OmniaRole> requiredRoles, Dictionary`2<Guid, OmniaRole> allRoles, ICacheDependency roleDefinitionDependency, bool refreshCache);
    public abstract virtual ValueTuple`2<IList`1<OmniaRole>, IList`1<OmniaRole>> SplitWithEvaluableRoles(IList`1<OmniaRole> roles);
}
public interface Omnia.Fx.Security.IPermissionResourceStoreHelper {
    public abstract virtual ValueTask`1<ValueTuple`2<bool, Dictionary`2<Guid, RoleEvaluationResult>>> GetUnevaluableRolesResultAsync(List`1<Guid> roleIds, Guid serviceId, Dictionary`2<string, string> contextParams);
}
public interface Omnia.Fx.Security.IPermissionStore {
    public abstract virtual ValueTask`1<IList`1<OmniaRole>> GetAllRolesAsync();
    public abstract virtual ValueTask`1<IList`1<OmniaRole>> GetRolesByIdsAsync(Guid[] roleIds);
    public abstract virtual ValueTask`1<ICacheDependencyResult`1<IList`1<OmniaRole>>> GetAllRolesCacheAsync();
    public abstract virtual ValueTask`1<IList`1<PermissionBinding>> GetIdentityBindingsAsync(Identity identity, IEnumerable`1<Guid> appInstanceIds, List`1<Guid> relatedRoleIds);
    public abstract virtual ValueTask`1<IList`1<PermissionBinding>> GetIdentityGroupBindingsAsync(Identity identity, IEnumerable`1<Guid> appInstanceIds, List`1<Guid> relatedRoleIds);
    public abstract virtual ValueTask`1<IList`1<PermissionBinding>> GetIdentityDynamicGroupBindingsAsync(Identity identity, IEnumerable`1<Guid> appInstanceIds, List`1<Guid> relatedRoleIds);
    public abstract virtual ValueTask`1<IList`1<PermissionBinding>> GetOverridenRulesBindingsAsync(IEnumerable`1<Guid> appInstanceIds, List`1<Guid> relatedRoleIds);
    public abstract virtual ValueTask`1<IList`1<PermissionBinding>> GetIdentityRelatedBindingsAsync(Identity identity, IEnumerable`1<Guid> appInstanceIds, List`1<Guid> relatedRoleIds);
    public abstract virtual ValueTask`1<IList`1<PermissionBinding>> GetAppInstanceBindingsAsync(List`1<Guid> appInstanceIds, List`1<Guid> relatedRoleIds, List`1<string> relatedResources);
    public abstract virtual ValueTask`1<PermissionBindingsChangeInfo> AddOrUpdatePermissionsForCurrentExtensionAsync(IPermissionBindingsUpdateInput updateInput);
    public abstract virtual ValueTask`1<PermissionBindingsChangeInfo> UpdatePermissionStateAsync(IPermissionBindingStateUpdateInput updateInput);
    public abstract virtual ValueTask`1<IEnumerable`1<Identity>> GetAuthorizedIdentitiesAsync(Guid[] roleIds, String[] resources);
    public abstract virtual ValueTask EnsureLatestCacheInSession(bool includeNonAppInstanceScopedBindings, Guid[] appInstanceIds);
    public abstract virtual ValueTask EnsureLatestCacheInSession(PermissionBindingsChangeInfo changeInfo);
}
public interface Omnia.Fx.Security.IPermissionStoreChangedHelper {
    public abstract virtual ValueTask`1<PermissionBindingsChangeInfo> AddOrUpdatePermissionsAsync(IPermissionBindingsUpdateInput updateInput);
    public abstract virtual ValueTask`1<PermissionBindingsChangeInfo> UpdatePermissionStateAsync(IPermissionBindingStateUpdateInput updateInput);
    public abstract virtual ValueTask`1<PermissionBindingsChangeInfo> MapPermissionInheritanceAsync(PermissionInheritanceMappingInput mappingInput);
    public abstract virtual ValueTask`1<PermissionBindingsChangeInfo> UnmapPermissionInheritanceAsync(PermissionInheritanceMappingInput mappingInput);
}
public interface Omnia.Fx.Security.IPermissionStoreChangedHelperForCurrentIdentity {
    public abstract virtual ValueTask`1<IPermissionChangedContext> InitUpdateAsync(RolePermissionSettingWithContextParam permissionSettingsWithContext);
}
public interface Omnia.Fx.Security.IPermissionStoreChangedHelperOverHttp {
    public abstract virtual ValueTask`1<PermissionBindingsChangeInfo> AddOrUpdatePermissionsByCurrentIdentityAsync(RolePermissionSettingWithContextParam permissionSettingsWithContext, Dictionary`2<Guid, RoleEvaluationResult> roleResources);
}
public interface Omnia.Fx.Security.IPermissionStoreHelper {
    public abstract virtual ValueTask`1<IList`1<OmniaRole>> GetAllRolesAsync();
    public abstract virtual ValueTask`1<IList`1<PermissionBinding>> GetPermissionBindingsAsync(PermissionBindingsQueryInput queryInput);
    public abstract virtual ValueTask`1<IList`1<GroupIdentity>> GetAllRelatedGroupIdentitiesAsync();
}
public interface Omnia.Fx.Security.IRoleEvaluator {
}
public interface Omnia.Fx.Security.IRoleEvaluatorResolver {
    public abstract virtual T GetEvaluator(string evaluatorTypeFullName);
    public abstract virtual T TryGetEvaluator(string evaluatorTypeFullName);
}
public interface Omnia.Fx.Security.IRolePermissionEvaluator {
    public abstract virtual ValueTask`1<bool> EvaluateRoleAsync();
}
public interface Omnia.Fx.Security.IRoleResourceEvaluator {
    public abstract virtual ValueTask`1<string> GetRoleResourceAsync();
    public abstract virtual ValueTask`1<string> GetRoleResourceAsync(Dictionary`2<string, string> context);
    public abstract virtual ValueTask`1<Nullable`1<Guid>> GetConnectedAppInstanceIdAsync();
    public abstract virtual ValueTask`1<Nullable`1<Guid>> GetConnectedAppInstanceIdAsync(Dictionary`2<string, string> context);
}
public interface Omnia.Fx.Security.IRoleResourceResolver {
    public abstract virtual ValueTask`1<RoleEvaluationResult> GetResourceInfoAsync(OmniaRole role, Dictionary`2<Guid, OmniaRole> apiRolesDictionary, Dictionary`2<string, string> context);
}
public interface Omnia.Fx.Security.ISecretsService {
    public abstract virtual ValueTask`1<Secret> GetSecretAsync(string key, Guid serviceId, Nullable`1<Guid> profileId);
    public abstract virtual ValueTask`1<Secret> GetSecretExcludeMaskedFieldValuesAsync(string key, Guid serviceId, Nullable`1<Guid> profileId);
    public abstract virtual ValueTask SetSecretAsync(Secret secret, Nullable`1<Guid> profileId);
    public abstract virtual ValueTask RemoveSecretAsync(string key, Guid serviceId, Nullable`1<Guid> profileId);
}
public interface Omnia.Fx.Security.IUnevaluableRolesResolver {
    public abstract virtual ValueTask`1<ValueTuple`2<bool, Dictionary`2<Guid, RoleEvaluationResult>>> ResolveAsync(IList`1<OmniaRole> requiredRoles, string contextParamsHash, bool removeCache);
}
internal class Omnia.Fx.Security.OmniaAuthorizationService : object {
    [CompilerGeneratedAttribute]
private IOmniaContext <OmniaContext>k__BackingField;
    [CompilerGeneratedAttribute]
private IScopedContextResolver <ScopedContextResolver>k__BackingField;
    [CompilerGeneratedAttribute]
private IPermissionStore <PermissionStore>k__BackingField;
    [CompilerGeneratedAttribute]
private IPermissionResourceStore <PermissionResourceStore>k__BackingField;
    [CompilerGeneratedAttribute]
private IRoleEvaluatorResolver <RoleEvaluatorResolver>k__BackingField;
    [CompilerGeneratedAttribute]
private ILogger <Logger>k__BackingField;
    private IOmniaContext OmniaContext { get; }
    private IScopedContextResolver ScopedContextResolver { get; }
    private IPermissionStore PermissionStore { get; }
    private IPermissionResourceStore PermissionResourceStore { get; }
    private IRoleEvaluatorResolver RoleEvaluatorResolver { get; }
    private ILogger Logger { get; }
    public OmniaAuthorizationService(IOmniaContext omniaContext, IScopedContextResolver scopedContextResolver, IPermissionStore permissionStore, IPermissionResourceStore permissionResourceStore, IRoleEvaluatorResolver roleEvaluatorResolver, ILogger`1<OmniaAuthorizationService> logger);
    [CompilerGeneratedAttribute]
private IOmniaContext get_OmniaContext();
    [CompilerGeneratedAttribute]
private IScopedContextResolver get_ScopedContextResolver();
    [CompilerGeneratedAttribute]
private IPermissionStore get_PermissionStore();
    [CompilerGeneratedAttribute]
private IPermissionResourceStore get_PermissionResourceStore();
    [CompilerGeneratedAttribute]
private IRoleEvaluatorResolver get_RoleEvaluatorResolver();
    [CompilerGeneratedAttribute]
private ILogger get_Logger();
    [AsyncStateMachineAttribute("Omnia.Fx.Security.OmniaAuthorizationService/<AuthorizeAsync>d__20")]
public sealed virtual ValueTask`1<bool> AuthorizeAsync(Identity identity, Guid[] requiredRoles);
    [AsyncStateMachineAttribute("Omnia.Fx.Security.OmniaAuthorizationService/<EvaluateRelatedSystemDifinedRoleAsync>d__21")]
private ValueTask`1<Nullable`1<bool>> EvaluateRelatedSystemDifinedRoleAsync(Identity identity, RelatedSystemDefinedRole relatedSystemDefinedRole, Dictionary`2<Guid, OmniaRole> allRoles);
    [AsyncStateMachineAttribute("Omnia.Fx.Security.OmniaAuthorizationService/<AuthorizeAsync>d__22")]
public sealed virtual ValueTask`1<bool> AuthorizeAsync(Guid[] requiredRoles);
    [AsyncStateMachineAttribute("Omnia.Fx.Security.OmniaAuthorizationService/<GetAuthorizedRolesAsync>d__23")]
public sealed virtual ValueTask`1<Dictionary`2<Guid, RoleEvaluationResult>> GetAuthorizedRolesAsync(Guid[] requiredRoles);
    [AsyncStateMachineAttribute("Omnia.Fx.Security.OmniaAuthorizationService/<GetAllExtensionRoleIds>d__24")]
public sealed virtual ValueTask`1<IList`1<Guid>> GetAllExtensionRoleIds();
    [AsyncStateMachineAttribute("Omnia.Fx.Security.OmniaAuthorizationService/<CheckAuthorizationToAddOrUpdateRolesAsync>d__25")]
public sealed virtual ValueTask`1<ValueTuple`2<IList`1<Guid>, Dictionary`2<Guid, RoleEvaluationResult>>> CheckAuthorizationToAddOrUpdateRolesAsync(Guid[] requiredRoles);
    [AsyncStateMachineAttribute("Omnia.Fx.Security.OmniaAuthorizationService/<GetIdentityRelatedBindingsByAppInstanceIdsAsync>d__26")]
public sealed virtual ValueTask`1<IList`1<PermissionBinding>> GetIdentityRelatedBindingsByAppInstanceIdsAsync(Identity identity, IEnumerable`1<Guid> appInstanceIds, IEnumerable`1<Guid> requiredRoles);
    [AsyncStateMachineAttribute("Omnia.Fx.Security.OmniaAuthorizationService/<GetOverridenRulesBindingsAsync>d__27")]
public sealed virtual ValueTask`1<IList`1<PermissionBinding>> GetOverridenRulesBindingsAsync(IEnumerable`1<Guid> appInstanceIds);
    [AsyncStateMachineAttribute("Omnia.Fx.Security.OmniaAuthorizationService/<GetRelatedRolesAsync>d__28")]
private ValueTask`1<ValueTuple`2<Dictionary`2<Guid, OmniaRole>, RelatedSystemDefinedRole>> GetRelatedRolesAsync(IEnumerable`1<Guid> requiredRoles, Dictionary`2<Guid, OmniaRole> allRoles);
    private void AddSystemDefinedRoleWithParentRecursive(RelatedSystemDefinedRole relatedSystemDefinedRole, Guid roleIdToAdd, Dictionary`2<Guid, OmniaRole> allRoles);
    private void AddRelatedRolesRecursive(Dictionary`2<Guid, OmniaRole> relatedRequiredRoles, IEnumerable`1<Guid> requiredRoles, Dictionary`2<Guid, OmniaRole> allRoles);
    private List`1<OmniaRole> MergeRelatedRoles(Dictionary`2<Guid, OmniaRole> relatedRequiredRoles, Dictionary`2<Guid, OmniaRole> relatedRolesForRules);
    private Dictionary`2<Guid, RoleEvaluationResult> MergeWithUnevaluableRoleResources(Dictionary`2<Guid, RoleEvaluationResult> roleResources, Dictionary`2<Guid, RoleEvaluationResult> unevaluableRoleResources);
    [AsyncStateMachineAttribute("Omnia.Fx.Security.OmniaAuthorizationService/<EvaluateRolesAsync>d__33")]
private ValueTask`1<Nullable`1<bool>> EvaluateRolesAsync(Identity identity, Dictionary`2<Guid, OmniaRole> relatedRequiredRoles, Dictionary`2<Guid, OmniaRole> allRoles, Dictionary`2<Guid, RoleEvaluationResult> roleResources, bool endWhenAuthorized);
    [AsyncStateMachineAttribute("Omnia.Fx.Security.OmniaAuthorizationService/<EvaluateRoleAsync>d__34")]
private ValueTask`1<Nullable`1<bool>> EvaluateRoleAsync(Guid roleId, Dictionary`2<Guid, OmniaRole> allRoles, Dictionary`2<Guid, RoleEvaluationResult> roleResources, bool recursive);
    private Nullable`1<bool> EvaluateWithPermissionBindings(Dictionary`2<Guid, OmniaRole> relatedRequiredRoles, IEnumerable`1<PermissionBinding> permissionBindings, Dictionary`2<Guid, RoleEvaluationResult> roleResources, bool endWhenAuthorized);
    [AsyncStateMachineAttribute("Omnia.Fx.Security.OmniaAuthorizationService/<EvaluateWithOverridenRulesBindingsAsync>d__36")]
private ValueTask`1<Nullable`1<bool>> EvaluateWithOverridenRulesBindingsAsync(Dictionary`2<Guid, OmniaRole> relatedRequiredRoles, IEnumerable`1<PermissionBinding> definedRulesBindings, Dictionary`2<Guid, OmniaRole> allRoles, Dictionary`2<Guid, RoleEvaluationResult> roleResources, bool endWhenAuthorized);
    [AsyncStateMachineAttribute("Omnia.Fx.Security.OmniaAuthorizationService/<EvaluateRequiredRolesAsync>d__37")]
private ValueTask`1<Nullable`1<bool>> EvaluateRequiredRolesAsync(Dictionary`2<Guid, OmniaRole> relatedRequiredRoles, Dictionary`2<Guid, OmniaRole> allRoles, Dictionary`2<Guid, RoleEvaluationResult> roleResources, bool endWhenAuthorized);
    [AsyncStateMachineAttribute("Omnia.Fx.Security.OmniaAuthorizationService/<EvaluateSecurityRulesAsync>d__38")]
private ValueTask`1<Nullable`1<bool>> EvaluateSecurityRulesAsync(IList`1<SecurityRule> rules, Dictionary`2<Guid, OmniaRole> allRoles, Func`2<Guid, ValueTask`1<Nullable`1<bool>>> evaluateRoleFunc);
    private bool EvaluateBooleanStringExpression(string expression);
    [AsyncStateMachineAttribute("Omnia.Fx.Security.OmniaAuthorizationService/<EvaluateCustomPermissionEvaluatorRoleAsync>d__40")]
private ValueTask`1<Nullable`1<bool>> EvaluateCustomPermissionEvaluatorRoleAsync(OmniaRole role);
    [AsyncStateMachineAttribute("Omnia.Fx.Security.OmniaAuthorizationService/<GetAuthorizedRolesInternalAsync>d__41")]
private ValueTask`1<Dictionary`2<Guid, RoleEvaluationResult>> GetAuthorizedRolesInternalAsync(Identity identity, Guid[] requiredRoles, bool refreshResourceCache);
    private List`1<Guid> GetRelatedRolesForAddOrUpdate(Guid[] requiredRoles, Dictionary`2<Guid, OmniaRole> allRoles);
    private bool IsAuthorizedToAddOrUpdate(OmniaRole role, Dictionary`2<Guid, RoleEvaluationResult> evaluationResult);
    private Nullable`1<Guid> GetAppInstanceIdFromContext();
    private Nullable`1<Guid> GetProfileIdFromContext();
}
public class Omnia.Fx.Security.PermissionResourceStore : object {
    [CompilerGeneratedAttribute]
private IRoleEvaluatorResolver <RoleEvaluatorResolver>k__BackingField;
    [CompilerGeneratedAttribute]
private IRoleResourceResolver <RoleResourceResolver>k__BackingField;
    [CompilerGeneratedAttribute]
private IScopedContextResolver <ScopedContextResolver>k__BackingField;
    [CompilerGeneratedAttribute]
private IOmniaCacheWithKeyHelper`1<IOmniaMemoryDependencyCache> <CacheHelper>k__BackingField;
    [CompilerGeneratedAttribute]
private IPermissionResourceStoreHelper <StoreHelper>k__BackingField;
    [CompilerGeneratedAttribute]
private ILogger <Logger>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IgnoreUnevaluableRoles>k__BackingField;
    protected IRoleEvaluatorResolver RoleEvaluatorResolver { get; }
    protected IRoleResourceResolver RoleResourceResolver { get; }
    protected IScopedContextResolver ScopedContextResolver { get; }
    protected IOmniaCacheWithKeyHelper`1<IOmniaMemoryDependencyCache> CacheHelper { get; }
    protected IPermissionResourceStoreHelper StoreHelper { get; }
    protected ILogger Logger { get; }
    protected bool IgnoreUnevaluableRoles { get; protected set; }
    public PermissionResourceStore(IRoleEvaluatorResolver roleEvaluatorResolver, IRoleResourceResolver roleResourceResolver, IScopedContextResolver scopedContextResolver, IOmniaMemoryDependencyCache cache, IPermissionResourceStoreHelper storeHelper, ILogger`1<PermissionResourceStore> logger);
    [CompilerGeneratedAttribute]
protected IRoleEvaluatorResolver get_RoleEvaluatorResolver();
    [CompilerGeneratedAttribute]
protected IRoleResourceResolver get_RoleResourceResolver();
    [CompilerGeneratedAttribute]
protected IScopedContextResolver get_ScopedContextResolver();
    [CompilerGeneratedAttribute]
protected IOmniaCacheWithKeyHelper`1<IOmniaMemoryDependencyCache> get_CacheHelper();
    [CompilerGeneratedAttribute]
protected IPermissionResourceStoreHelper get_StoreHelper();
    [CompilerGeneratedAttribute]
protected ILogger get_Logger();
    [CompilerGeneratedAttribute]
protected bool get_IgnoreUnevaluableRoles();
    [CompilerGeneratedAttribute]
protected void set_IgnoreUnevaluableRoles(bool value);
    [AsyncStateMachineAttribute("Omnia.Fx.Security.PermissionResourceStore/<ResolveAsync>d__24")]
public sealed virtual ValueTask`1<ValueTuple`2<bool, Dictionary`2<Guid, RoleEvaluationResult>>> ResolveAsync(Identity identity, IList`1<OmniaRole> requiredRoles, Dictionary`2<Guid, OmniaRole> allRoles, ICacheDependency roleDefinitionsDependency, bool refreshCache);
    public sealed virtual ValueTuple`2<IList`1<OmniaRole>, IList`1<OmniaRole>> SplitWithEvaluableRoles(IList`1<OmniaRole> roles);
    protected bool IsRoleResourceEvaluable(OmniaRole role);
    protected bool IsRolePermissionEvaluable(OmniaRole role);
    protected bool IsEvaluableRole(OmniaRole role);
    [AsyncStateMachineAttribute("Omnia.Fx.Security.PermissionResourceStore/<GetUnevaluableRolesResultAsync>d__29")]
protected ValueTask`1<ValueTuple`2<bool, Dictionary`2<Guid, RoleEvaluationResult>>> GetUnevaluableRolesResultAsync(Identity identity, IList`1<OmniaRole> unevaluableRoles, Dictionary`2<Guid, OmniaRole> allRoles, ICacheDependency roleDefinitionDependency, bool refreshCache);
    [AsyncStateMachineAttribute("Omnia.Fx.Security.PermissionResourceStore/<GetUnevaluableRolesEvaluationFromServiceAsync>d__30")]
protected ValueTask`1<ValueTuple`2<bool, Dictionary`2<Guid, RoleEvaluationResult>>> GetUnevaluableRolesEvaluationFromServiceAsync(Identity identity, IList`1<OmniaRole> unevaluableRoles, Dictionary`2<Guid, OmniaRole> allRoles, ICacheDependency roleDefinitionDependency, bool refreshCache);
    protected Dictionary`2<Guid, List`1<OmniaRole>> GroupRelatedRolesByServiceId(IList`1<OmniaRole> unevaluableRoles, Dictionary`2<Guid, OmniaRole> allRoles);
    [AsyncStateMachineAttribute("Omnia.Fx.Security.PermissionResourceStore/<GetUnevaluableRolesEvaluationFromServiceAsync>d__32")]
protected ValueTask`1<ValueTuple`2<bool, Dictionary`2<Guid, RoleEvaluationResult>>> GetUnevaluableRolesEvaluationFromServiceAsync(Identity identity, Guid serviceId, IList`1<OmniaRole> roles, Dictionary`2<Guid, OmniaRole> allRoles, ICacheDependency roleDefinitionCacheDependency, bool refreshCache);
    protected Dictionary`2<string, string> GetContextParams(IList`1<OmniaRole> roles);
    protected List`1<string> GetContextParamNames(IList`1<OmniaRole> roles);
    protected string GetUnevaluableRolesResultCacheKey(Guid serviceId, string contextParamsHash);
    protected string GetIdentityUnevaluableRolesResultCacheKey(Identity identity, Guid serviceId, string contextParamsHash);
    protected string GetContextParamsHash(Dictionary`2<string, string> contextParams);
    [AsyncStateMachineAttribute("Omnia.Fx.Security.PermissionResourceStore/<GetUnevaluableRolesResultCacheAsync>d__38")]
protected ValueTask`1<ValueTuple`2<bool, Dictionary`2<Guid, RoleEvaluationResult>>> GetUnevaluableRolesResultCacheAsync(string cacheKey, ICacheDependency roleDefinitionCacheDependency, List`1<Guid> roleIds, Guid serviceId, Dictionary`2<string, string> contextParams, Func`2<Dictionary`2<Guid, RoleEvaluationResult>, Dictionary`2<Guid, RoleEvaluationResult>> handleRequestResultFunc);
    protected Dictionary`2<Guid, RoleEvaluationResult> HandleUnevaluableResourceRolesResult(Identity identity, Guid serviceId, string contextParamsHash, Dictionary`2<Guid, RoleEvaluationResult> roleResources, Dictionary`2<Guid, OmniaRole> allRoles);
    protected Dictionary`2<Guid, RoleEvaluationResult> CloneRoleEvaluationValue(Dictionary`2<Guid, RoleEvaluationResult> evaluationResult);
}
internal class Omnia.Fx.Security.PermissionResourceStoreHelper : object {
    [CompilerGeneratedAttribute]
private IOmniaServiceHttpClientFactory <OmniaServiceHttpClientFactory>k__BackingField;
    [CompilerGeneratedAttribute]
private ILogger <Logger>k__BackingField;
    protected IOmniaServiceHttpClientFactory OmniaServiceHttpClientFactory { get; }
    protected ILogger Logger { get; }
    public PermissionResourceStoreHelper(IOmniaServiceHttpClientFactory omniaServiceHttpClientFactory, ILogger`1<PermissionResourceStoreHelper> logger);
    [CompilerGeneratedAttribute]
protected IOmniaServiceHttpClientFactory get_OmniaServiceHttpClientFactory();
    [CompilerGeneratedAttribute]
protected ILogger get_Logger();
    [AsyncStateMachineAttribute("Omnia.Fx.Security.PermissionResourceStoreHelper/<GetUnevaluableRolesResultAsync>d__7")]
public sealed virtual ValueTask`1<ValueTuple`2<bool, Dictionary`2<Guid, RoleEvaluationResult>>> GetUnevaluableRolesResultAsync(List`1<Guid> roleIds, Guid serviceId, Dictionary`2<string, string> contextParams);
}
internal class Omnia.Fx.Security.PermissionStore : object {
    private bool _doesGetSessionCacheState;
    [CompilerGeneratedAttribute]
private IPermissionStoreHelper <StoreHelper>k__BackingField;
    [CompilerGeneratedAttribute]
private IPermissionStoreChangedHelper <StoreChangedHelper>k__BackingField;
    [CompilerGeneratedAttribute]
private IIdentityService <IdentityService>k__BackingField;
    [CompilerGeneratedAttribute]
private PermissionStoreCacheHandler <CacheHandler>k__BackingField;
    [CompilerGeneratedAttribute]
private ISessionCacheStateManager <SessionCacheStateManager>k__BackingField;
    private IPermissionStoreHelper StoreHelper { get; }
    private IPermissionStoreChangedHelper StoreChangedHelper { get; }
    private IIdentityService IdentityService { get; }
    private PermissionStoreCacheHandler CacheHandler { get; }
    private ISessionCacheStateManager SessionCacheStateManager { get; }
    public PermissionStore(IPermissionStoreHelper storeHelper, IPermissionStoreChangedHelper storeChangedHelper, IIdentityService identityService, PermissionStoreCacheHandler cacheHandler, ISessionCacheStateManager sessionCacheStateManager);
    [CompilerGeneratedAttribute]
private IPermissionStoreHelper get_StoreHelper();
    [CompilerGeneratedAttribute]
private IPermissionStoreChangedHelper get_StoreChangedHelper();
    [CompilerGeneratedAttribute]
private IIdentityService get_IdentityService();
    [CompilerGeneratedAttribute]
private PermissionStoreCacheHandler get_CacheHandler();
    [CompilerGeneratedAttribute]
private ISessionCacheStateManager get_SessionCacheStateManager();
    public sealed virtual ValueTask`1<IList`1<OmniaRole>> GetAllRolesAsync();
    [AsyncStateMachineAttribute("Omnia.Fx.Security.PermissionStore/<GetRolesByIdsAsync>d__18")]
public sealed virtual ValueTask`1<IList`1<OmniaRole>> GetRolesByIdsAsync(Guid[] roleIds);
    public sealed virtual ValueTask`1<ICacheDependencyResult`1<IList`1<OmniaRole>>> GetAllRolesCacheAsync();
    [AsyncStateMachineAttribute("Omnia.Fx.Security.PermissionStore/<GetIdentityBindingsAsync>d__20")]
public sealed virtual ValueTask`1<IList`1<PermissionBinding>> GetIdentityBindingsAsync(Identity identity, IEnumerable`1<Guid> appInstanceIds, List`1<Guid> relatedRoleIds);
    [AsyncStateMachineAttribute("Omnia.Fx.Security.PermissionStore/<GetIdentityGroupBindingsAsync>d__21")]
public sealed virtual ValueTask`1<IList`1<PermissionBinding>> GetIdentityGroupBindingsAsync(Identity identity, IEnumerable`1<Guid> appInstanceIds, List`1<Guid> relatedRoleIds);
    [AsyncStateMachineAttribute("Omnia.Fx.Security.PermissionStore/<GetIdentityDynamicGroupBindingsAsync>d__22")]
public sealed virtual ValueTask`1<IList`1<PermissionBinding>> GetIdentityDynamicGroupBindingsAsync(Identity identity, IEnumerable`1<Guid> appInstanceIds, List`1<Guid> relatedRoleIds);
    public sealed virtual ValueTask`1<IList`1<PermissionBinding>> GetOverridenRulesBindingsAsync(IEnumerable`1<Guid> appInstanceIds, List`1<Guid> relatedRoleIds);
    [AsyncStateMachineAttribute("Omnia.Fx.Security.PermissionStore/<GetIdentityRelatedBindingsAsync>d__24")]
public sealed virtual ValueTask`1<IList`1<PermissionBinding>> GetIdentityRelatedBindingsAsync(Identity identity, IEnumerable`1<Guid> appInstanceIds, List`1<Guid> relatedRoleIds);
    [AsyncStateMachineAttribute("Omnia.Fx.Security.PermissionStore/<GetAppInstanceBindingsAsync>d__25")]
public sealed virtual ValueTask`1<IList`1<PermissionBinding>> GetAppInstanceBindingsAsync(List`1<Guid> appInstanceIds, List`1<Guid> relatedRoleIds, List`1<string> relatedResources);
    [AsyncStateMachineAttribute("Omnia.Fx.Security.PermissionStore/<AddOrUpdatePermissionsForCurrentExtensionAsync>d__26")]
public sealed virtual ValueTask`1<PermissionBindingsChangeInfo> AddOrUpdatePermissionsForCurrentExtensionAsync(IPermissionBindingsUpdateInput updateInput);
    [AsyncStateMachineAttribute("Omnia.Fx.Security.PermissionStore/<UpdatePermissionStateAsync>d__27")]
public sealed virtual ValueTask`1<PermissionBindingsChangeInfo> UpdatePermissionStateAsync(IPermissionBindingStateUpdateInput updateInput);
    [AsyncStateMachineAttribute("Omnia.Fx.Security.PermissionStore/<GetAuthorizedIdentitiesAsync>d__28")]
public sealed virtual ValueTask`1<IEnumerable`1<Identity>> GetAuthorizedIdentitiesAsync(Guid[] roleIds, String[] resources);
    [AsyncStateMachineAttribute("Omnia.Fx.Security.PermissionStore/<EnsureLatestCacheInSession>d__29")]
public sealed virtual ValueTask EnsureLatestCacheInSession(bool includeNonAppInstanceScopedBindings, Guid[] appInstanceIds);
    [AsyncStateMachineAttribute("Omnia.Fx.Security.PermissionStore/<EnsureLatestCacheInSession>d__30")]
public sealed virtual ValueTask EnsureLatestCacheInSession(PermissionBindingsChangeInfo changeInfo);
    private ValueTuple`2<List`1<PermissionBinding>, List`1<PermissionBinding>> SplitWithOverridenRulesBindingIdentity(IList`1<PermissionBinding> permissionBindings);
    [AsyncStateMachineAttribute("Omnia.Fx.Security.PermissionStore/<EnsurePermissionBindingsCacheAsync>d__32")]
private ValueTask EnsurePermissionBindingsCacheAsync(IEnumerable`1<Guid> appInstanceIds, bool ensureLatestCacheInSession, bool ignoreNonAppInstanceScopedBindings);
    [AsyncStateMachineAttribute("Omnia.Fx.Security.PermissionStore/<GetAllPermissionBindingsAsync>d__33")]
private ValueTask`1<List`1<PermissionBinding>> GetAllPermissionBindingsAsync(IEnumerable`1<Guid> appInstanceIds);
    [AsyncStateMachineAttribute("Omnia.Fx.Security.PermissionStore/<GetIdentityMemberOfGroupsAsync>d__34")]
private ValueTask`1<IList`1<GroupIdentity>> GetIdentityMemberOfGroupsAsync(Identity identity, ICacheDependencyResult`1<IList`1<GroupIdentity>> allRelatedGroupIdentitiesCache);
    [AsyncStateMachineAttribute("Omnia.Fx.Security.PermissionStore/<GetIdentityMemberOfDynamicGroupsAsync>d__35")]
private ValueTask`1<HashSet`1<DynamicGroupIdentity>> GetIdentityMemberOfDynamicGroupsAsync(Identity identity, List`1<DynamicGroupIdentity> dynamicGroupIdentities);
    [AsyncStateMachineAttribute("Omnia.Fx.Security.PermissionStore/<GetIdentityMemberOfDynamicGroupsInternalAsync>d__36")]
private ValueTask`1<HashSet`1<DynamicGroupIdentity>> GetIdentityMemberOfDynamicGroupsInternalAsync(List`1<DynamicGroupIdentity> dynamicGroupIdentities, Func`2<DynamicGroupRuleSet, bool> evaluateFunc);
}
internal class Omnia.Fx.Security.PermissionStoreCacheHandler : object {
    [CompilerGeneratedAttribute]
private IMessageBus <MessageBus>k__BackingField;
    [CompilerGeneratedAttribute]
private IOmniaCacheWithKeyHelper`1<IOmniaMemoryDependencyCache> <CacheHelper>k__BackingField;
    [CompilerGeneratedAttribute]
private CacheHandler`1<IList`1<OmniaRole>> <AllRolesCache>k__BackingField;
    [CompilerGeneratedAttribute]
private CacheHandler`1<Nullable`1<bool>> <PermissionBaseCache>k__BackingField;
    [CompilerGeneratedAttribute]
private CacheHandler`1<Nullable`1<bool>> <UserGroupMembershipBaseCache>k__BackingField;
    [CompilerGeneratedAttribute]
private CacheHandler`1<IList`1<GroupIdentity>> <UserGroupMembershipCache>k__BackingField;
    [CompilerGeneratedAttribute]
private CacheHandler`1<Nullable`1<bool>> <DynamicGroupsBaseCache>k__BackingField;
    [CompilerGeneratedAttribute]
private CacheHandler`1<DynamicGroupRuleSet> <DynamicGroupsCache>k__BackingField;
    [CompilerGeneratedAttribute]
private CacheHandler`1<List`1<PermissionBinding>> <PermissionBindingsCache>k__BackingField;
    [CompilerGeneratedAttribute]
private CacheHandler`1<IList`1<GroupIdentity>> <AllRelatedGroupIdentitiesCache>k__BackingField;
    private IMessageBus MessageBus { get; }
    private IOmniaCacheWithKeyHelper`1<IOmniaMemoryDependencyCache> CacheHelper { get; }
    private CacheHandler`1<IList`1<OmniaRole>> AllRolesCache { get; }
    private CacheHandler`1<Nullable`1<bool>> PermissionBaseCache { get; }
    private CacheHandler`1<Nullable`1<bool>> UserGroupMembershipBaseCache { get; }
    private CacheHandler`1<IList`1<GroupIdentity>> UserGroupMembershipCache { get; }
    private CacheHandler`1<Nullable`1<bool>> DynamicGroupsBaseCache { get; }
    private CacheHandler`1<DynamicGroupRuleSet> DynamicGroupsCache { get; }
    private CacheHandler`1<List`1<PermissionBinding>> PermissionBindingsCache { get; }
    private CacheHandler`1<IList`1<GroupIdentity>> AllRelatedGroupIdentitiesCache { get; }
    private string NonAppInstanceBindingsCacheKey { get; }
    public PermissionStoreCacheHandler(IMessageBus messageBus, IOmniaMemoryDependencyCache cache);
    [CompilerGeneratedAttribute]
private IMessageBus get_MessageBus();
    [CompilerGeneratedAttribute]
private IOmniaCacheWithKeyHelper`1<IOmniaMemoryDependencyCache> get_CacheHelper();
    [CompilerGeneratedAttribute]
private CacheHandler`1<IList`1<OmniaRole>> get_AllRolesCache();
    [CompilerGeneratedAttribute]
private CacheHandler`1<Nullable`1<bool>> get_PermissionBaseCache();
    [CompilerGeneratedAttribute]
private CacheHandler`1<Nullable`1<bool>> get_UserGroupMembershipBaseCache();
    [CompilerGeneratedAttribute]
private CacheHandler`1<IList`1<GroupIdentity>> get_UserGroupMembershipCache();
    [CompilerGeneratedAttribute]
private CacheHandler`1<Nullable`1<bool>> get_DynamicGroupsBaseCache();
    [CompilerGeneratedAttribute]
private CacheHandler`1<DynamicGroupRuleSet> get_DynamicGroupsCache();
    [CompilerGeneratedAttribute]
private CacheHandler`1<List`1<PermissionBinding>> get_PermissionBindingsCache();
    [CompilerGeneratedAttribute]
private CacheHandler`1<IList`1<GroupIdentity>> get_AllRelatedGroupIdentitiesCache();
    [AsyncStateMachineAttribute("Omnia.Fx.Security.PermissionStoreCacheHandler/<RunAsStartupAsync>d__32")]
public sealed virtual ValueTask RunAsStartupAsync();
    [AsyncStateMachineAttribute("Omnia.Fx.Security.PermissionStoreCacheHandler/<GetOrSetAllRolesAsync>d__33")]
public ValueTask`1<IList`1<OmniaRole>> GetOrSetAllRolesAsync(Func`1<ValueTask`1<IList`1<OmniaRole>>> getValuesFunc);
    public ValueTask`1<ICacheDependencyResult`1<IList`1<OmniaRole>>> GetOrSetAllRolesCacheAsync(Func`1<ValueTask`1<IList`1<OmniaRole>>> getValuesFunc);
    public List`1<PermissionBinding> GetPermissionBindings();
    public List`1<PermissionBinding> GetPermissionBindings(Nullable`1<Guid> appInstanceId);
    public void SetPermissionBindings(List`1<PermissionBinding> permissionBindings, ISessionCacheStateManager sessionCacheStateManager);
    public void SetPermissionBindings(Guid appInstanceId, List`1<PermissionBinding> permissionBindings, ISessionCacheStateManager sessionCacheStateManager);
    public ValueTask`1<ICacheDependencyResult`1<IList`1<GroupIdentity>>> GetOrSetAllRelatedGroupIdentitiesCacheAsync(Func`1<ValueTask`1<IList`1<GroupIdentity>>> getValuesFunc);
    public IList`1<GroupIdentity> GetUserGroupMembership(UserIdentity identity);
    public ICacheDependencyResult`1<IList`1<GroupIdentity>> GetUserGroupMembershipCache(UserIdentity identity);
    public void SetUserGroupMembership(UserIdentity identity, IList`1<GroupIdentity> userGroupMembership, ICacheDependencyResult`1<IList`1<GroupIdentity>> allRelatedGroupIdentitiesCache);
    public DynamicGroupRuleSet GetDynamicGroup(DynamicGroupIdentity identity);
    public ICacheDependencyResult`1<DynamicGroupRuleSet> GetDynamicGroupCache(DynamicGroupIdentity identity);
    public void SetDynamicGroup(DynamicGroupIdentity identity, DynamicGroupRuleSet ruleSet);
    private ICacheDependencyResult`1<List`1<PermissionBinding>> GetPermissionBindingsCache(string permissionBindingsCacheKey);
    private string get_NonAppInstanceBindingsCacheKey();
    [CompilerGeneratedAttribute]
private Task <RunAsStartupAsync>b__32_0(ServiceManifestChangedEventArg eventArg);
    [CompilerGeneratedAttribute]
private Task <RunAsStartupAsync>b__32_1(PermissionBindingsChangeInfo changeInfo);
}
internal class Omnia.Fx.Security.PermissionStoreChangedHelper : object {
    [CompilerGeneratedAttribute]
private PermissionStoreChangedHelperOverHttp <PermissionStoreChangedHelperHttpClient>k__BackingField;
    private PermissionStoreChangedHelperOverHttp PermissionStoreChangedHelperHttpClient { get; }
    public PermissionStoreChangedHelper(IConfiguredHttpClient`1<OmniaServiceApi> omniaService);
    [CompilerGeneratedAttribute]
private PermissionStoreChangedHelperOverHttp get_PermissionStoreChangedHelperHttpClient();
    [AsyncStateMachineAttribute("Omnia.Fx.Security.PermissionStoreChangedHelper/<AddOrUpdatePermissionsAsync>d__5")]
public sealed virtual ValueTask`1<PermissionBindingsChangeInfo> AddOrUpdatePermissionsAsync(IPermissionBindingsUpdateInput updateInput);
    [AsyncStateMachineAttribute("Omnia.Fx.Security.PermissionStoreChangedHelper/<UpdatePermissionStateAsync>d__6")]
public sealed virtual ValueTask`1<PermissionBindingsChangeInfo> UpdatePermissionStateAsync(IPermissionBindingStateUpdateInput updateInput);
    [AsyncStateMachineAttribute("Omnia.Fx.Security.PermissionStoreChangedHelper/<MapPermissionInheritanceAsync>d__7")]
public sealed virtual ValueTask`1<PermissionBindingsChangeInfo> MapPermissionInheritanceAsync(PermissionInheritanceMappingInput mappingInput);
    [AsyncStateMachineAttribute("Omnia.Fx.Security.PermissionStoreChangedHelper/<UnmapPermissionInheritanceAsync>d__8")]
public sealed virtual ValueTask`1<PermissionBindingsChangeInfo> UnmapPermissionInheritanceAsync(PermissionInheritanceMappingInput mappingInput);
    [AsyncStateMachineAttribute("Omnia.Fx.Security.PermissionStoreChangedHelper/<AddOrUpdatePermissionsByCurrentIdentityAsync>d__9")]
public sealed virtual ValueTask`1<PermissionBindingsChangeInfo> AddOrUpdatePermissionsByCurrentIdentityAsync(RolePermissionSettingWithContextParam permissionSettingsWithContext, Dictionary`2<Guid, RoleEvaluationResult> roleResources);
}
internal class Omnia.Fx.Security.PermissionStoreChangedHelperForCurrentIdentity : PermissionStoreChangedHelperForCurrentIdentityBase {
    [CompilerGeneratedAttribute]
private IPermissionStoreChangedHelperOverHttp <StoreChangedHelper>k__BackingField;
    private IPermissionStoreChangedHelperOverHttp StoreChangedHelper { get; }
    public PermissionStoreChangedHelperForCurrentIdentity(IOmniaAuthorizationService authorizationService, IDynamicScopedContextProvider dynamicScopedContextProvider, IPermissionStoreChangedHelperOverHttp storedChangeHelper);
    [CompilerGeneratedAttribute]
private IPermissionStoreChangedHelperOverHttp get_StoreChangedHelper();
    [AsyncStateMachineAttribute("Omnia.Fx.Security.PermissionStoreChangedHelperForCurrentIdentity/<AddOrUpdatePermissionsInternalAsync>d__4")]
protected virtual ValueTask`1<PermissionBindingsChangeInfo> AddOrUpdatePermissionsInternalAsync(RolePermissionSettingWithContextParam permissionSettingsWithContext, Dictionary`2<Guid, RoleEvaluationResult> roleResources);
}
public abstract class Omnia.Fx.Security.PermissionStoreChangedHelperForCurrentIdentityBase : object {
    [CompilerGeneratedAttribute]
private IOmniaAuthorizationService <AuthorizationService>k__BackingField;
    [CompilerGeneratedAttribute]
private IDynamicScopedContextProvider <DynamicScopedContextProvider>k__BackingField;
    protected IOmniaAuthorizationService AuthorizationService { get; }
    protected IDynamicScopedContextProvider DynamicScopedContextProvider { get; }
    public PermissionStoreChangedHelperForCurrentIdentityBase(IOmniaAuthorizationService authorizationService, IDynamicScopedContextProvider dynamicScopedContextProvider);
    [CompilerGeneratedAttribute]
protected IOmniaAuthorizationService get_AuthorizationService();
    [CompilerGeneratedAttribute]
protected IDynamicScopedContextProvider get_DynamicScopedContextProvider();
    [AsyncStateMachineAttribute("Omnia.Fx.Security.PermissionStoreChangedHelperForCurrentIdentityBase/<InitUpdateAsync>d__8")]
public sealed virtual ValueTask`1<IPermissionChangedContext> InitUpdateAsync(RolePermissionSettingWithContextParam permissionSettingsWithContext);
    protected abstract virtual ValueTask`1<PermissionBindingsChangeInfo> AddOrUpdatePermissionsInternalAsync(RolePermissionSettingWithContextParam permissionSettingsWithContext, Dictionary`2<Guid, RoleEvaluationResult> roleResources);
    private bool CheckIfRemoveAllTenantAdministrators(IEnumerable`1<RolePermissionSetting> settings);
}
internal class Omnia.Fx.Security.PermissionStoreHelper : object {
    [CompilerGeneratedAttribute]
private PermissionStoreHelperOverHttp <PermissionStoreHelperHttpClient>k__BackingField;
    private PermissionStoreHelperOverHttp PermissionStoreHelperHttpClient { get; }
    public PermissionStoreHelper(IConfiguredHttpClient`1<OmniaServiceApi> omniaService);
    [CompilerGeneratedAttribute]
private PermissionStoreHelperOverHttp get_PermissionStoreHelperHttpClient();
    [AsyncStateMachineAttribute("Omnia.Fx.Security.PermissionStoreHelper/<GetAllRolesAsync>d__5")]
public sealed virtual ValueTask`1<IList`1<OmniaRole>> GetAllRolesAsync();
    [AsyncStateMachineAttribute("Omnia.Fx.Security.PermissionStoreHelper/<GetPermissionBindingsAsync>d__6")]
public sealed virtual ValueTask`1<IList`1<PermissionBinding>> GetPermissionBindingsAsync(PermissionBindingsQueryInput queryInput);
    [AsyncStateMachineAttribute("Omnia.Fx.Security.PermissionStoreHelper/<GetAllRelatedGroupIdentitiesAsync>d__7")]
public sealed virtual ValueTask`1<IList`1<GroupIdentity>> GetAllRelatedGroupIdentitiesAsync();
}
internal class Omnia.Fx.Security.RoleEvaluatorResolver : object {
    private IDictionary`2<string, Type> _evaluatorTypeDictionary;
    [CompilerGeneratedAttribute]
private IServiceProvider <ServiceProvider>k__BackingField;
    [CompilerGeneratedAttribute]
private IOmniaCacheWithKeyHelper`1<IOmniaMemoryCache> <CacheHelper>k__BackingField;
    private IServiceProvider ServiceProvider { get; }
    private IOmniaCacheWithKeyHelper`1<IOmniaMemoryCache> CacheHelper { get; }
    public IDictionary`2<string, Type> EvaluatorTypeDictionary { get; }
    public RoleEvaluatorResolver(IServiceProvider serviceProvider, IOmniaMemoryCache cache);
    [CompilerGeneratedAttribute]
private IServiceProvider get_ServiceProvider();
    [CompilerGeneratedAttribute]
private IOmniaCacheWithKeyHelper`1<IOmniaMemoryCache> get_CacheHelper();
    public IDictionary`2<string, Type> get_EvaluatorTypeDictionary();
    public sealed virtual T GetEvaluator(string evaluatorTypeFullName);
    public sealed virtual T TryGetEvaluator(string evaluatorTypeFullName);
    private IDictionary`2<string, Type> GetEvaluatorTypeDictionary();
    private T CreateRoleEvaluator(Type evaluatorType);
}
internal class Omnia.Fx.Security.SecretsServiceOverHttp : object {
    [CompilerGeneratedAttribute]
private SecretServiceHttpClient <HttpSecretServiceClient>k__BackingField;
    private SecretServiceHttpClient HttpSecretServiceClient { get; }
    public SecretsServiceOverHttp(IConfiguredHttpClient`1<OmniaServiceApi> omniaHttpClient);
    [CompilerGeneratedAttribute]
private SecretServiceHttpClient get_HttpSecretServiceClient();
    [AsyncStateMachineAttribute("Omnia.Fx.Security.SecretsServiceOverHttp/<GetSecretAsync>d__5")]
public sealed virtual ValueTask`1<Secret> GetSecretAsync(string key, Guid serviceId, Nullable`1<Guid> profileId);
    [AsyncStateMachineAttribute("Omnia.Fx.Security.SecretsServiceOverHttp/<GetSecretExcludeMaskedFieldValuesAsync>d__6")]
public sealed virtual ValueTask`1<Secret> GetSecretExcludeMaskedFieldValuesAsync(string key, Guid serviceId, Nullable`1<Guid> profileId);
    [AsyncStateMachineAttribute("Omnia.Fx.Security.SecretsServiceOverHttp/<SetSecretAsync>d__7")]
public sealed virtual ValueTask SetSecretAsync(Secret secret, Nullable`1<Guid> profileId);
    [AsyncStateMachineAttribute("Omnia.Fx.Security.SecretsServiceOverHttp/<RemoveSecretAsync>d__8")]
public sealed virtual ValueTask RemoveSecretAsync(string key, Guid serviceId, Nullable`1<Guid> profileId);
}
public class Omnia.Fx.SEO.HttpContract : object {
}
public interface Omnia.Fx.SEO.ISeoService {
    public abstract virtual Task AddOrUpdateAsync(string url);
}
internal class Omnia.Fx.SEO.SeoServiceOverHttp : object {
    [CompilerGeneratedAttribute]
private SeoServiceHttpClient <SeoHttpClient>k__BackingField;
    private SeoServiceHttpClient SeoHttpClient { get; }
    public SeoServiceOverHttp(IConfiguredHttpClient`1<OmniaServiceApi> omniaHttpClient);
    [CompilerGeneratedAttribute]
private SeoServiceHttpClient get_SeoHttpClient();
    public sealed virtual Task AddOrUpdateAsync(string url);
}
public class Omnia.Fx.ServicePropertyBag.HttpContract : object {
}
public interface Omnia.Fx.ServicePropertyBag.IBagValues`1 {
    public IList`1<NamedModel> Values { get; }
    public abstract virtual IList`1<NamedModel> get_Values();
    public abstract virtual TypedModel GetModel();
    public abstract virtual IList`1<NamedModel> GetServiceValues(Guid omniaServiceId);
}
public interface Omnia.Fx.ServicePropertyBag.IOmniaPropertyBag`1 {
    public abstract virtual ValueTask`1<IList`1<NamedModel>> AddOrUpdateAsync(NamedModel[] properties);
    public abstract virtual ValueTask`1<IBagValues`1<NamedModel>> GetAllValuesAsync();
    public abstract virtual Task RemoveValuesAsync(NamedModel[] propertiesToRemove);
    public abstract virtual Task RemoveOmniaServiceValuesAsync(Guid omniaServiceId);
    public abstract virtual Task RemoveAllValuesAsync();
}
public interface Omnia.Fx.ServicePropertyBag.IOmniaPropertyBagRepository`1 {
    public abstract virtual ValueTask`1<IList`1<NamedModel>> AddOrUpdateAsync(IList`1<NamedModel> properties);
    public abstract virtual ValueTask`1<IList`1<NamedModel>> GetAllValuesAsync();
    public abstract virtual Task RemoveOmniaServiceValuesAsync(Guid omniaServiceId);
    public abstract virtual Task RemoveValuesAsync(IList`1<NamedModel> propertiesToRemove);
    public abstract virtual Task RemoveAllValuesAsync();
    public abstract virtual string GetAttachmentPointCacheKey();
}
public interface Omnia.Fx.ServicePropertyBag.IOmniaPropertyBagRepositoryHelper`1 {
    public abstract virtual string SerializeProperty(IOmniaNamedModel property);
    public abstract virtual IList`1<NamedModel> CreateFromEntites(IList`1<StorageEntity> entities, Func`2<StorageEntity, string> getSerializedValueFromEntityFunc);
}
public abstract class Omnia.Fx.ServicePropertyBag.OmniaPropertyBagBase`1 : object {
    [CompilerGeneratedAttribute]
private IOmniaPropertyBagRepository`1<NamedModel> <Repo>k__BackingField;
    [CompilerGeneratedAttribute]
private IOmniaCacheWithKeyHelper`1<IOmniaSynchronizedMemoryCache> <CacheHelper>k__BackingField;
    [CompilerGeneratedAttribute]
private OmniaPropertyBagOperationMode <Mode>k__BackingField;
    [CompilerGeneratedAttribute]
private string <AttachementPointCacheKey>k__BackingField;
    private IOmniaPropertyBagRepository`1<NamedModel> Repo { get; }
    private IOmniaCacheWithKeyHelper`1<IOmniaSynchronizedMemoryCache> CacheHelper { get; }
    private OmniaPropertyBagOperationMode Mode { get; }
    private string AttachementPointCacheKey { get; }
    public OmniaPropertyBagBase`1(IOmniaPropertyBagRepository`1<NamedModel> repo, IOmniaSynchronizedMemoryCache omniaSynchronizedMemoryCache, OmniaPropertyBagOperationMode mode);
    [CompilerGeneratedAttribute]
private IOmniaPropertyBagRepository`1<NamedModel> get_Repo();
    [CompilerGeneratedAttribute]
private IOmniaCacheWithKeyHelper`1<IOmniaSynchronizedMemoryCache> get_CacheHelper();
    [CompilerGeneratedAttribute]
private OmniaPropertyBagOperationMode get_Mode();
    [CompilerGeneratedAttribute]
private string get_AttachementPointCacheKey();
    [AsyncStateMachineAttribute("Omnia.Fx.ServicePropertyBag.OmniaPropertyBagBase`1/<AddOrUpdateAsync>d__14")]
public virtual ValueTask`1<IList`1<NamedModel>> AddOrUpdateAsync(NamedModel[] properties);
    [AsyncStateMachineAttribute("Omnia.Fx.ServicePropertyBag.OmniaPropertyBagBase`1/<GetAllValuesAsync>d__15")]
public sealed virtual ValueTask`1<IBagValues`1<NamedModel>> GetAllValuesAsync();
    [AsyncStateMachineAttribute("Omnia.Fx.ServicePropertyBag.OmniaPropertyBagBase`1/<RemoveOmniaServiceValuesAsync>d__16")]
public sealed virtual Task RemoveOmniaServiceValuesAsync(Guid omniaServiceId);
    [AsyncStateMachineAttribute("Omnia.Fx.ServicePropertyBag.OmniaPropertyBagBase`1/<RemoveValuesAsync>d__17")]
public sealed virtual Task RemoveValuesAsync(NamedModel[] propertiesToRemove);
    [AsyncStateMachineAttribute("Omnia.Fx.ServicePropertyBag.OmniaPropertyBagBase`1/<RemoveAllValuesAsync>d__18")]
public sealed virtual Task RemoveAllValuesAsync();
    [AsyncStateMachineAttribute("Omnia.Fx.ServicePropertyBag.OmniaPropertyBagBase`1/<InvalidateCache>d__19")]
private Task InvalidateCache();
    [AsyncStateMachineAttribute("Omnia.Fx.ServicePropertyBag.OmniaPropertyBagBase`1/<GetCacheDependenciesAsync>d__20")]
protected virtual ValueTask`1<IList`1<ICacheDependency>> GetCacheDependenciesAsync();
    protected IBagValues`1<NamedModel> CreateBagValues(IList`1<NamedModel> values);
    [AsyncStateMachineAttribute("Omnia.Fx.ServicePropertyBag.OmniaPropertyBagBase`1/<<GetAllValuesAsync>b__15_0>d")]
[CompilerGeneratedAttribute]
private Task`1<IList`1<NamedModel>> <GetAllValuesAsync>b__15_0(IOmniaDependencyCacheEntry cacheEntry);
}
public enum Omnia.Fx.ServicePropertyBag.OmniaPropertyBagOperationMode : Enum {
    public int value__;
    public static OmniaPropertyBagOperationMode Slave;
    public static OmniaPropertyBagOperationMode Master;
}
internal class Omnia.Fx.ServicePropertyBag.OmniaPropertyBagRepositoryHelper`1 : object {
    public sealed virtual IList`1<NamedModel> CreateFromEntites(IList`1<StorageEntity> entities, Func`2<StorageEntity, string> getSerializedValueFromEntityFunc);
    public sealed virtual string SerializeProperty(IOmniaNamedModel property);
}
public interface Omnia.Fx.Settings.ISettingsService {
    public abstract virtual ValueTask AddUpdateValueAsync(Setting setting);
    public abstract virtual ValueTask`1<object> GetSettingValueAsync(string key);
    public abstract virtual ValueTask`1<T> GetSettingValueAsync(string key);
    public abstract virtual ValueTask`1<Dictionary`2<string, SettingKeyInformation>> GetKeyHashWithKeyInformationAsync();
    [ObsoleteAttribute]
public abstract virtual ValueTask DeleteSettingAsync(string key);
}
internal class Omnia.Fx.Settings.SettingsService : SettingsServiceBase {
    private IConfiguredHttpClient`1<OmniaServiceApi> _omniaService;
    public SettingsService(IConfiguredHttpClient`1<OmniaServiceApi> omniaService);
    [AsyncStateMachineAttribute("Omnia.Fx.Settings.SettingsService/<AddUpdateValueAsync>d__2")]
public sealed virtual ValueTask AddUpdateValueAsync(Setting setting);
    [AsyncStateMachineAttribute("Omnia.Fx.Settings.SettingsService/<GetKeyHashWithKeyInformationAsync>d__3")]
public sealed virtual ValueTask`1<Dictionary`2<string, SettingKeyInformation>> GetKeyHashWithKeyInformationAsync();
    [AsyncStateMachineAttribute("Omnia.Fx.Settings.SettingsService/<GetSettingValueAsync>d__4")]
public virtual ValueTask`1<object> GetSettingValueAsync(string key);
    [AsyncStateMachineAttribute("Omnia.Fx.Settings.SettingsService/<DeleteSettingAsync>d__5")]
[ObsoleteAttribute]
public sealed virtual ValueTask DeleteSettingAsync(string key);
}
public abstract class Omnia.Fx.Settings.SettingsServiceBase : object {
    public abstract virtual ValueTask`1<object> GetSettingValueAsync(string key);
    [AsyncStateMachineAttribute("Omnia.Fx.Settings.SettingsServiceBase/<GetSettingValueAsync>d__1`1")]
public sealed virtual ValueTask`1<T> GetSettingValueAsync(string key);
}
public class Omnia.Fx.SystemEmail.HttpContract : object {
}
public interface Omnia.Fx.SystemEmail.ISystemEmailService {
    public abstract virtual Task SendAsync(EmailMessage msg);
}
internal class Omnia.Fx.SystemEmail.SystemEmailServiceOverHttp : object {
    [CompilerGeneratedAttribute]
private SystemEmailServiceHttpClient <CloudEmailService>k__BackingField;
    private SystemEmailServiceHttpClient CloudEmailService { get; }
    public SystemEmailServiceOverHttp(IConfiguredHttpClient`1<OmniaCloudServiceApi> cloudServiceApi, ILogger`1<SystemEmailServiceOverHttp> logger);
    [CompilerGeneratedAttribute]
private SystemEmailServiceHttpClient get_CloudEmailService();
    [AsyncStateMachineAttribute("Omnia.Fx.SystemEmail.SystemEmailServiceOverHttp/<SendAsync>d__5")]
public sealed virtual Task SendAsync(EmailMessage emailMessage);
}
public class Omnia.Fx.Tags.HttpContract : object {
}
public interface Omnia.Fx.Tags.ITagsService {
    public abstract virtual ValueTask`1<IEnumerable`1<Tag>> EnsureAsync(List`1<string> tagNames);
    public abstract virtual ValueTask`1<IEnumerable`1<Tag>> FindAsync(string name, int pageNumber, int pageSize);
    public abstract virtual Task RemoveAsync(List`1<string> tagNames);
}
internal class Omnia.Fx.Tags.TagsServiceOverHttp : object {
    [CompilerGeneratedAttribute]
private TagsServiceHttpClient <TagsHttpClient>k__BackingField;
    private TagsServiceHttpClient TagsHttpClient { get; }
    public TagsServiceOverHttp(IConfiguredHttpClient`1<OmniaServiceApi> omniaServiceApi);
    [CompilerGeneratedAttribute]
private TagsServiceHttpClient get_TagsHttpClient();
    [AsyncStateMachineAttribute("Omnia.Fx.Tags.TagsServiceOverHttp/<EnsureAsync>d__5")]
public sealed virtual ValueTask`1<IEnumerable`1<Tag>> EnsureAsync(List`1<string> tagNames);
    [AsyncStateMachineAttribute("Omnia.Fx.Tags.TagsServiceOverHttp/<FindAsync>d__6")]
public sealed virtual ValueTask`1<IEnumerable`1<Tag>> FindAsync(string name, int pageNumber, int pageSize);
    [AsyncStateMachineAttribute("Omnia.Fx.Tags.TagsServiceOverHttp/<RemoveAsync>d__7")]
public sealed virtual Task RemoveAsync(List`1<string> tagNames);
}
public class Omnia.Fx.TargetingProperties.HttpContract : object {
}
public interface Omnia.Fx.TargetingProperties.ITargetingHelper {
    public abstract virtual ValueTask`1<IEnumerable`1<T>> GetTargetingItemsAsync(IEnumerable`1<T> items, Func`2<T, TargetingFilterData> getTargetingFilterFactory);
}
public interface Omnia.Fx.TargetingProperties.ITargetingPropertyService {
    public abstract virtual ValueTask`1<ValueTuple`2<List`1<ITargetingProperty>, ICacheDependencyResult`1<List`1<ITargetingProperty>>>> GetAllAsync();
    public abstract virtual ValueTask`1<List`1<ITargetingPropertyResult>> GetUserTargetingPropertyResultAsync();
    public abstract virtual ValueTask`1<TargetingPropertyResultWithStatus> GetUserTargetingPropertyResultWithStatusAsync(AuthenticatableIdentity identity);
    public abstract virtual ValueTask EnsureTargetingPropertiesTypeValidAsync();
}
public interface Omnia.Fx.TargetingProperties.ITargetingPropertyServiceWithoutCache {
    public abstract virtual ValueTask`1<List`1<ITargetingProperty>> GetAllAsync();
    public abstract virtual ValueTask`1<ITargetingProperty> GetByIdAsync(Guid id);
    public abstract virtual ValueTask`1<ITargetingProperty> CreatePropertyAsync(ITargetingProperty property);
    public abstract virtual ValueTask`1<ITargetingProperty> UpdatePropertyAsync(ITargetingProperty property);
    public abstract virtual Task RemovePropertyAsync(Guid id);
    public abstract virtual ValueTask`1<List`1<ITargetingPropertyResult>> GetUserTargetingPropertyResultAsync(ITargetingPropertyService targetingPropertyService, bool forceRefreshCache);
    public abstract virtual ValueTask`1<TargetingPropertyResultWithStatus> GetUserTargetingPropertyResultWithStatusAsync(ITargetingPropertyService targetingPropertyService, AuthenticatableIdentity userIdentity, bool forceRefreshCache);
    public abstract virtual ValueTask InvalidateUserTargetingPropertyResultCacheAsync(AuthenticatableIdentity userIdentity);
    public abstract virtual Task TerminatePropertyAsync(Guid id);
    public abstract virtual ValueTask`1<ITargetingProperty> RestorePropertyAsync(Guid id);
}
internal class Omnia.Fx.TargetingProperties.TargetingHelper : object {
    [CompilerGeneratedAttribute]
private IEnterprisePropertyService <EnterprisePropertyService>k__BackingField;
    [CompilerGeneratedAttribute]
private ITargetingPropertyService <TargetingPropertyService>k__BackingField;
    [CompilerGeneratedAttribute]
private IOmniaContext <OmniaContext>k__BackingField;
    [CompilerGeneratedAttribute]
private ILogger`1<TargetingHelper> <Logger>k__BackingField;
    private IEnterprisePropertyService EnterprisePropertyService { get; }
    private ITargetingPropertyService TargetingPropertyService { get; }
    private IOmniaContext OmniaContext { get; }
    public ILogger`1<TargetingHelper> Logger { get; }
    public TargetingHelper(IEnterprisePropertyService enterprisePropertyService, ITargetingPropertyService targetingPropertyService, IOmniaContext omniaContext, ILogger`1<TargetingHelper> logger);
    [CompilerGeneratedAttribute]
private IEnterprisePropertyService get_EnterprisePropertyService();
    [CompilerGeneratedAttribute]
private ITargetingPropertyService get_TargetingPropertyService();
    [CompilerGeneratedAttribute]
private IOmniaContext get_OmniaContext();
    [CompilerGeneratedAttribute]
public ILogger`1<TargetingHelper> get_Logger();
    [AsyncStateMachineAttribute("Omnia.Fx.TargetingProperties.TargetingHelper/<GetTargetingItemsAsync>d__13`1")]
public sealed virtual ValueTask`1<IEnumerable`1<T>> GetTargetingItemsAsync(IEnumerable`1<T> items, Func`2<T, TargetingFilterData> getTargetingFilterFactory);
    private bool IsTargetingMatched(Dictionary`2<Guid, ITargetingPropertyResult> userTargetingPropertyResult, TargetingFilterData targetingFilter, Dictionary`2<string, EnterprisePropertyDefinition> enterprisePropertiesDict);
    private ValueTuple`2<IList`1<TargetingPropertyQuery>, IDictionary`2<Guid, ITargetingPropertyFlatResult>> ResolveTargetingFilterData(TargetingFilterData targetingFilter, Dictionary`2<string, EnterprisePropertyDefinition> enterprisePropertiesDict);
    private Dictionary`2<Guid, ITargetingPropertyFlatResult> GetFlatUserTargetingPropertyResult(Dictionary`2<Guid, ITargetingPropertyResult> userTargetingPropertyResult, IList`1<TargetingPropertyQuery> queries);
    private List`1<Guid> GetFlatValues(List`1<TermCache> values, bool includeChildTerms);
}
internal class Omnia.Fx.TargetingProperties.TargetingPropertyService : object {
    [CompilerGeneratedAttribute]
private ITargetingPropertyServiceWithoutCache <TargetingPropertyServiceWithoutCache>k__BackingField;
    [CompilerGeneratedAttribute]
private TargetingPropertyServiceCacheHandler <CacheHandler>k__BackingField;
    [CompilerGeneratedAttribute]
private IEnterprisePropertyService <EnterprisePropertyService>k__BackingField;
    [CompilerGeneratedAttribute]
private IOmniaContext <OmniaContext>k__BackingField;
    [CompilerGeneratedAttribute]
private IMessageBus <MessageBus>k__BackingField;
    [CompilerGeneratedAttribute]
private ISessionCacheStateManager <SessionCacheStateManager>k__BackingField;
    private ITargetingPropertyServiceWithoutCache TargetingPropertyServiceWithoutCache { get; }
    private TargetingPropertyServiceCacheHandler CacheHandler { get; }
    private IEnterprisePropertyService EnterprisePropertyService { get; }
    private IOmniaContext OmniaContext { get; }
    private IMessageBus MessageBus { get; }
    private ISessionCacheStateManager SessionCacheStateManager { get; }
    public TargetingPropertyService(ITargetingPropertyServiceWithoutCache targetingPropertyServiceWithoutCache, IEnterprisePropertyService enterprisePropertyService, TargetingPropertyServiceCacheHandler cacheHandler, IOmniaContext omniaContext, IMessageBus messageBus, ISessionCacheStateManager sessionCacheStateManager);
    [CompilerGeneratedAttribute]
private ITargetingPropertyServiceWithoutCache get_TargetingPropertyServiceWithoutCache();
    [CompilerGeneratedAttribute]
private TargetingPropertyServiceCacheHandler get_CacheHandler();
    [CompilerGeneratedAttribute]
private IEnterprisePropertyService get_EnterprisePropertyService();
    [CompilerGeneratedAttribute]
private IOmniaContext get_OmniaContext();
    [CompilerGeneratedAttribute]
private IMessageBus get_MessageBus();
    [CompilerGeneratedAttribute]
private ISessionCacheStateManager get_SessionCacheStateManager();
    [AsyncStateMachineAttribute("Omnia.Fx.TargetingProperties.TargetingPropertyService/<EnsureTargetingPropertiesDependencyCache>d__19")]
private ValueTask`1<ICacheDependencyResult`1<bool>> EnsureTargetingPropertiesDependencyCache();
    [AsyncStateMachineAttribute("Omnia.Fx.TargetingProperties.TargetingPropertyService/<GetAllAsync>d__20")]
public sealed virtual ValueTask`1<ValueTuple`2<List`1<ITargetingProperty>, ICacheDependencyResult`1<List`1<ITargetingProperty>>>> GetAllAsync();
    [AsyncStateMachineAttribute("Omnia.Fx.TargetingProperties.TargetingPropertyService/<GetUserTargetingPropertyResultAsync>d__21")]
public sealed virtual ValueTask`1<List`1<ITargetingPropertyResult>> GetUserTargetingPropertyResultAsync();
    [AsyncStateMachineAttribute("Omnia.Fx.TargetingProperties.TargetingPropertyService/<GetUserTargetingPropertyResultWithStatusAsync>d__22")]
public sealed virtual ValueTask`1<TargetingPropertyResultWithStatus> GetUserTargetingPropertyResultWithStatusAsync(AuthenticatableIdentity userIdentity);
    [AsyncStateMachineAttribute("Omnia.Fx.TargetingProperties.TargetingPropertyService/<InvalidateUserTargetingPropertyResultCacheAsync>d__23")]
public sealed virtual ValueTask InvalidateUserTargetingPropertyResultCacheAsync(AuthenticatableIdentity userIdentity);
    [AsyncStateMachineAttribute("Omnia.Fx.TargetingProperties.TargetingPropertyService/<GetByIdAsync>d__24")]
public sealed virtual ValueTask`1<ITargetingProperty> GetByIdAsync(Guid id);
    [AsyncStateMachineAttribute("Omnia.Fx.TargetingProperties.TargetingPropertyService/<RemovePropertyAsync>d__25")]
public sealed virtual Task RemovePropertyAsync(Guid id);
    [AsyncStateMachineAttribute("Omnia.Fx.TargetingProperties.TargetingPropertyService/<CreatePropertyAsync>d__26")]
public sealed virtual ValueTask`1<ITargetingProperty> CreatePropertyAsync(ITargetingProperty property);
    [AsyncStateMachineAttribute("Omnia.Fx.TargetingProperties.TargetingPropertyService/<UpdatePropertyAsync>d__27")]
public sealed virtual ValueTask`1<ITargetingProperty> UpdatePropertyAsync(ITargetingProperty property);
    [AsyncStateMachineAttribute("Omnia.Fx.TargetingProperties.TargetingPropertyService/<Omnia-Fx-TargetingProperties-ITargetingPropertyServiceWithoutCache-GetAllAsync>d__28")]
private sealed virtual override ValueTask`1<List`1<ITargetingProperty>> Omnia.Fx.TargetingProperties.ITargetingPropertyServiceWithoutCache.GetAllAsync();
    private sealed virtual override ValueTask`1<List`1<ITargetingPropertyResult>> Omnia.Fx.TargetingProperties.ITargetingPropertyServiceWithoutCache.GetUserTargetingPropertyResultAsync(ITargetingPropertyService targetingPropertyService, bool forceRefreshCache);
    private sealed virtual override ValueTask`1<TargetingPropertyResultWithStatus> Omnia.Fx.TargetingProperties.ITargetingPropertyServiceWithoutCache.GetUserTargetingPropertyResultWithStatusAsync(ITargetingPropertyService targetingPropertyService, AuthenticatableIdentity userIdentity, bool forceRefreshCache);
    [AsyncStateMachineAttribute("Omnia.Fx.TargetingProperties.TargetingPropertyService/<TerminatePropertyAsync>d__31")]
public sealed virtual Task TerminatePropertyAsync(Guid id);
    [AsyncStateMachineAttribute("Omnia.Fx.TargetingProperties.TargetingPropertyService/<RestorePropertyAsync>d__32")]
public sealed virtual ValueTask`1<ITargetingProperty> RestorePropertyAsync(Guid id);
    [AsyncStateMachineAttribute("Omnia.Fx.TargetingProperties.TargetingPropertyService/<EnsureTargetingPropertiesTypeValidAsync>d__33")]
public sealed virtual ValueTask EnsureTargetingPropertiesTypeValidAsync();
    [AsyncStateMachineAttribute("Omnia.Fx.TargetingProperties.TargetingPropertyService/<<EnsureTargetingPropertiesDependencyCache>b__19_0>d")]
[CompilerGeneratedAttribute]
private Task`1<bool> <EnsureTargetingPropertiesDependencyCache>b__19_0(IOmniaDependencyCacheEntry cacheEntry);
    [AsyncStateMachineAttribute("Omnia.Fx.TargetingProperties.TargetingPropertyService/<<GetAllAsync>b__20_0>d")]
[CompilerGeneratedAttribute]
private Task`1<List`1<ITargetingProperty>> <GetAllAsync>b__20_0(IOmniaDependencyCacheEntry cacheEntry);
}
internal class Omnia.Fx.TargetingProperties.TargetingPropertyServiceCacheHandler : object {
    [CompilerGeneratedAttribute]
private IMessageBus <MessageBus>k__BackingField;
    [CompilerGeneratedAttribute]
private IOmniaCacheWithKeyHelper`1<IOmniaMemoryDependencyCache> <CacheHelper>k__BackingField;
    private IMessageBus MessageBus { get; }
    private IOmniaCacheWithKeyHelper`1<IOmniaMemoryDependencyCache> CacheHelper { get; }
    public IOmniaMemoryDependencyCache Instance { get; }
    public TargetingPropertyServiceCacheHandler(IMessageBus messageBus, IOmniaMemoryDependencyCache cache);
    [CompilerGeneratedAttribute]
private IMessageBus get_MessageBus();
    [CompilerGeneratedAttribute]
private IOmniaCacheWithKeyHelper`1<IOmniaMemoryDependencyCache> get_CacheHelper();
    [AsyncStateMachineAttribute("Omnia.Fx.TargetingProperties.TargetingPropertyServiceCacheHandler/<RunAsStartupAsync>d__8")]
public sealed virtual ValueTask RunAsStartupAsync();
    public IOmniaMemoryDependencyCache get_Instance();
    public string GetTargetingPropertiesDependencyCacheKey();
    public string GetUserTargetingPropertyResultCacheKey(AuthenticatableIdentity userIdentity);
    public void RemoveTargetingPropertiesDependencyCache();
    public void RemoveUserTargetingPropertyResultCache(ISessionCacheStateManager cacheStateManager, AuthenticatableIdentity[] userIdentities);
    public string GetTargetingPropertiesCacheKey();
    [AsyncStateMachineAttribute("Omnia.Fx.TargetingProperties.TargetingPropertyServiceCacheHandler/<<RunAsStartupAsync>b__8_0>d")]
[CompilerGeneratedAttribute]
private Task <RunAsStartupAsync>b__8_0(TargetingProperty`1<TargetingPropertyData> property);
    [AsyncStateMachineAttribute("Omnia.Fx.TargetingProperties.TargetingPropertyServiceCacheHandler/<<RunAsStartupAsync>b__8_1>d")]
[CompilerGeneratedAttribute]
private Task <RunAsStartupAsync>b__8_1(TargetingProperty`1<TargetingPropertyData> property);
    [AsyncStateMachineAttribute("Omnia.Fx.TargetingProperties.TargetingPropertyServiceCacheHandler/<<RunAsStartupAsync>b__8_2>d")]
[CompilerGeneratedAttribute]
private Task <RunAsStartupAsync>b__8_2(TargetingProperty`1<TargetingPropertyData> property);
    [AsyncStateMachineAttribute("Omnia.Fx.TargetingProperties.TargetingPropertyServiceCacheHandler/<<RunAsStartupAsync>b__8_3>d")]
[CompilerGeneratedAttribute]
private Task <RunAsStartupAsync>b__8_3(List`1<AuthenticatableIdentity> userIdentities);
}
internal class Omnia.Fx.TargetingProperties.TargetingPropertyServiceWithoutCache : object {
    [CompilerGeneratedAttribute]
private TargetingPropertyServiceHttpClient <TargetingPropertyHttpClient>k__BackingField;
    private TargetingPropertyServiceHttpClient TargetingPropertyHttpClient { get; }
    public TargetingPropertyServiceWithoutCache(IConfiguredHttpClient`1<OmniaServiceApi> omniaHttpClient);
    [CompilerGeneratedAttribute]
private TargetingPropertyServiceHttpClient get_TargetingPropertyHttpClient();
    [AsyncStateMachineAttribute("Omnia.Fx.TargetingProperties.TargetingPropertyServiceWithoutCache/<GetAllAsync>d__5")]
public sealed virtual ValueTask`1<List`1<ITargetingProperty>> GetAllAsync();
    [AsyncStateMachineAttribute("Omnia.Fx.TargetingProperties.TargetingPropertyServiceWithoutCache/<GetByIdAsync>d__6")]
public sealed virtual ValueTask`1<ITargetingProperty> GetByIdAsync(Guid id);
    [AsyncStateMachineAttribute("Omnia.Fx.TargetingProperties.TargetingPropertyServiceWithoutCache/<CreatePropertyAsync>d__7")]
public sealed virtual ValueTask`1<ITargetingProperty> CreatePropertyAsync(ITargetingProperty property);
    [AsyncStateMachineAttribute("Omnia.Fx.TargetingProperties.TargetingPropertyServiceWithoutCache/<UpdatePropertyAsync>d__8")]
public sealed virtual ValueTask`1<ITargetingProperty> UpdatePropertyAsync(ITargetingProperty property);
    [AsyncStateMachineAttribute("Omnia.Fx.TargetingProperties.TargetingPropertyServiceWithoutCache/<RemovePropertyAsync>d__9")]
public sealed virtual Task RemovePropertyAsync(Guid id);
    [AsyncStateMachineAttribute("Omnia.Fx.TargetingProperties.TargetingPropertyServiceWithoutCache/<GetUserTargetingPropertyResultAsync>d__10")]
public sealed virtual ValueTask`1<List`1<ITargetingPropertyResult>> GetUserTargetingPropertyResultAsync(ITargetingPropertyService targetingPropertyService, bool forceRefreshCache);
    [AsyncStateMachineAttribute("Omnia.Fx.TargetingProperties.TargetingPropertyServiceWithoutCache/<GetUserTargetingPropertyResultWithStatusAsync>d__11")]
public sealed virtual ValueTask`1<TargetingPropertyResultWithStatus> GetUserTargetingPropertyResultWithStatusAsync(ITargetingPropertyService targetingPropertyService, AuthenticatableIdentity userIdentity, bool forceRefreshCache);
    [AsyncStateMachineAttribute("Omnia.Fx.TargetingProperties.TargetingPropertyServiceWithoutCache/<InvalidateUserTargetingPropertyResultCacheAsync>d__12")]
public sealed virtual ValueTask InvalidateUserTargetingPropertyResultCacheAsync(AuthenticatableIdentity userIdentity);
    [AsyncStateMachineAttribute("Omnia.Fx.TargetingProperties.TargetingPropertyServiceWithoutCache/<TerminatePropertyAsync>d__13")]
public sealed virtual Task TerminatePropertyAsync(Guid id);
    [AsyncStateMachineAttribute("Omnia.Fx.TargetingProperties.TargetingPropertyServiceWithoutCache/<RestorePropertyAsync>d__14")]
public sealed virtual ValueTask`1<ITargetingProperty> RestorePropertyAsync(Guid id);
}
public class Omnia.Fx.Teams.HttpContract : object {
}
public interface Omnia.Fx.Teams.ITeamService {
    public abstract virtual ValueTask`1<TeamModel> CreateTeamAsync(string groupId);
}
internal class Omnia.Fx.Teams.TeamService : object {
    [CompilerGeneratedAttribute]
private TeamServiceHttpClient <TeamHttpClient>k__BackingField;
    private TeamServiceHttpClient TeamHttpClient { get; }
    public TeamService(IConfiguredHttpClient`1<OmniaServiceApi> omniaServiceApi);
    [CompilerGeneratedAttribute]
private TeamServiceHttpClient get_TeamHttpClient();
    [AsyncStateMachineAttribute("Omnia.Fx.Teams.TeamService/<CreateTeamAsync>d__5")]
public sealed virtual ValueTask`1<TeamModel> CreateTeamAsync(string groupId);
}
public class Omnia.Fx.Tenant.HttpContract : object {
}
public interface Omnia.Fx.Tenant.IOmniaExtensions {
    public OmniaExtension Current { get; }
    public IList`1<OmniaExtension> All { get; }
    public abstract virtual OmniaExtension get_Current();
    public abstract virtual IList`1<OmniaExtension> get_All();
}
public interface Omnia.Fx.Tenant.IOmniaServiceLocator {
    public abstract virtual string GetUrl(Guid serviceId);
    public abstract virtual string GetExternalUrl(Guid serviceId);
    public abstract virtual string GetToken(Guid serviceId);
    public abstract virtual string ReplaceTokenWithUrl(string content, bool useExternalUrl);
    public abstract virtual string ReplaceUrlWithToken(string content);
    public abstract virtual Nullable`1<Guid> GetExtensionIdByServiceId(Guid serviceId);
    public abstract virtual List`1<Guid> GetRelatedServiceIds(Guid extensionIdOrServiceId);
}
public interface Omnia.Fx.Tenant.IOmniaServices {
    public IOmniaServiceDefinition Current { get; }
    public IList`1<IOmniaServiceDefinition> All { get; }
    public abstract virtual IOmniaServiceDefinition get_Current();
    public abstract virtual IList`1<IOmniaServiceDefinition> get_All();
    public abstract virtual IList`1<IOmniaServiceDefinition> GetByExtension(OmniaExtension extension);
    public abstract virtual IOmniaServiceDefinition GetById(Guid omniaServiceId);
}
public interface Omnia.Fx.Tenant.ITenantService {
    public abstract virtual IOmniaPropertyBag`1<TenantPropertyBagModel> GetPropertyBag();
    public abstract virtual ValueTask`1<Language> GetDefaultTenantLanguageAsync();
}
internal class Omnia.Fx.Tenant.TenantServiceOverHttp : object {
    [CompilerGeneratedAttribute]
private IOmniaSynchronizedMemoryCache <OmniaSynchronizedMemoryCache>k__BackingField;
    [CompilerGeneratedAttribute]
private IConfiguredHttpClient`1<OmniaServiceApi> <OmniaHttpClient>k__BackingField;
    [CompilerGeneratedAttribute]
private TenantServiceHttpClient <TenantHttpClient>k__BackingField;
    private IOmniaSynchronizedMemoryCache OmniaSynchronizedMemoryCache { get; }
    private IConfiguredHttpClient`1<OmniaServiceApi> OmniaHttpClient { get; }
    private TenantServiceHttpClient TenantHttpClient { get; }
    public TenantServiceOverHttp(IConfiguredHttpClient`1<OmniaServiceApi> omniaHttpClient, OmniaTargetedSynchronizedMemoryCache omniaSynchronizedMemoryCache);
    [CompilerGeneratedAttribute]
private IOmniaSynchronizedMemoryCache get_OmniaSynchronizedMemoryCache();
    [CompilerGeneratedAttribute]
private IConfiguredHttpClient`1<OmniaServiceApi> get_OmniaHttpClient();
    [CompilerGeneratedAttribute]
private TenantServiceHttpClient get_TenantHttpClient();
    public sealed virtual IOmniaPropertyBag`1<TenantPropertyBagModel> GetPropertyBag();
    [AsyncStateMachineAttribute("Omnia.Fx.Tenant.TenantServiceOverHttp/<GetDefaultTenantLanguageAsync>d__14")]
public sealed virtual ValueTask`1<Language> GetDefaultTenantLanguageAsync();
}
public class Omnia.Fx.TransactionLogs.HttpContract : object {
}
public interface Omnia.Fx.TransactionLogs.ITransactionLogsPageToken {
}
public interface Omnia.Fx.TransactionLogs.ITransactionLogsService {
    public abstract virtual ValueTask`1<TransactionLog> AddOrUpdateTransactionLogAsync(TransactionLog transactionLog, bool updateData, bool updateMessage);
    public abstract virtual ValueTask`1<IList`1<TransactionLog>> GetTransactionLogsAsync(Guid transactionId, string region);
    public abstract virtual ValueTask`1<IList`1<TransactionLog>> GetTransactionLogsAsync(string region);
    public abstract virtual ValueTask`1<TransactionLog> GetTransactionLogAsync(Guid transactionId, string name);
    public abstract virtual ValueTask`1<IList`1<TransactionLog>> GetByTransactionIdAsync(Guid transactionId);
    public abstract virtual ValueTask`1<IList`1<string>> GetRegions();
    public abstract virtual ValueTask`1<IList`1<TransactionLog>> GetTransactionLogsByFilterAsync(TransactionLogFilter transactionLogFilter);
}
internal class Omnia.Fx.TransactionLogs.TransactionLogsServiceOverHttp : object {
    [CompilerGeneratedAttribute]
private TransactionLogsServiceHttpClient <TransactionLogHttpClient>k__BackingField;
    private TransactionLogsServiceHttpClient TransactionLogHttpClient { get; }
    public TransactionLogsServiceOverHttp(IConfiguredHttpClient`1<OmniaServiceApi> omniaServiceApi);
    [CompilerGeneratedAttribute]
private TransactionLogsServiceHttpClient get_TransactionLogHttpClient();
    [AsyncStateMachineAttribute("Omnia.Fx.TransactionLogs.TransactionLogsServiceOverHttp/<GetTransactionLogsByFilterAsync>d__5")]
public sealed virtual ValueTask`1<IList`1<TransactionLog>> GetTransactionLogsByFilterAsync(TransactionLogFilter transactionLogFilter);
    [AsyncStateMachineAttribute("Omnia.Fx.TransactionLogs.TransactionLogsServiceOverHttp/<GetRegions>d__6")]
public sealed virtual ValueTask`1<IList`1<string>> GetRegions();
    [AsyncStateMachineAttribute("Omnia.Fx.TransactionLogs.TransactionLogsServiceOverHttp/<AddOrUpdateTransactionLogAsync>d__7")]
public sealed virtual ValueTask`1<TransactionLog> AddOrUpdateTransactionLogAsync(TransactionLog transactionLog, bool updateData, bool updateMessage);
    [AsyncStateMachineAttribute("Omnia.Fx.TransactionLogs.TransactionLogsServiceOverHttp/<GetTransactionLogAsync>d__8")]
public sealed virtual ValueTask`1<TransactionLog> GetTransactionLogAsync(Guid transactionId, string name);
    [AsyncStateMachineAttribute("Omnia.Fx.TransactionLogs.TransactionLogsServiceOverHttp/<GetByTransactionIdAsync>d__9")]
public sealed virtual ValueTask`1<IList`1<TransactionLog>> GetByTransactionIdAsync(Guid transactionId);
    [AsyncStateMachineAttribute("Omnia.Fx.TransactionLogs.TransactionLogsServiceOverHttp/<GetTransactionLogsAsync>d__10")]
public sealed virtual ValueTask`1<IList`1<TransactionLog>> GetTransactionLogsAsync(Guid transactionId, string region);
    [AsyncStateMachineAttribute("Omnia.Fx.TransactionLogs.TransactionLogsServiceOverHttp/<GetTransactionLogsAsync>d__11")]
public sealed virtual ValueTask`1<IList`1<TransactionLog>> GetTransactionLogsAsync(string region);
}
public class Omnia.Fx.Translation.HttpContract : object {
}
public interface Omnia.Fx.Translation.ITranslatorTextService {
    public abstract virtual ValueTask`1<IList`1<TranslationResult>> TranslateAsync(TranslationRequest request);
    public abstract virtual ValueTask`1<TranslatorProviderSettings> GetTranslationSettingsAsync();
}
internal class Omnia.Fx.Translation.TranslatorTextService : object {
    [CompilerGeneratedAttribute]
private TranslatorTextServiceHttpClient <TranslatorTextHttpClient>k__BackingField;
    private TranslatorTextServiceHttpClient TranslatorTextHttpClient { get; }
    public TranslatorTextService(IConfiguredHttpClient`1<OmniaServiceApi> omniaHttpClient);
    [CompilerGeneratedAttribute]
private TranslatorTextServiceHttpClient get_TranslatorTextHttpClient();
    [AsyncStateMachineAttribute("Omnia.Fx.Translation.TranslatorTextService/<TranslateAsync>d__4")]
public sealed virtual ValueTask`1<IList`1<TranslationResult>> TranslateAsync(TranslationRequest request);
    [AsyncStateMachineAttribute("Omnia.Fx.Translation.TranslatorTextService/<GetTranslationSettingsAsync>d__5")]
public sealed virtual ValueTask`1<TranslatorProviderSettings> GetTranslationSettingsAsync();
}
public class Omnia.Fx.Users.HttpContract : object {
}
public interface Omnia.Fx.Users.IEncryptionUserTokenProvider {
    public abstract virtual string GetEncryptedToken();
    public abstract virtual OmniaToken GetDecryptedToken(string encryptedToken);
}
public interface Omnia.Fx.Users.IOmniaUserTokenProvider {
    public OmniaToken Token { get; public set; }
    public OmniaToken OriginalToken { get; }
    public abstract virtual OmniaToken get_Token();
    public abstract virtual void set_Token(OmniaToken value);
    public abstract virtual OmniaToken get_OriginalToken();
    public abstract virtual bool IsAppOnlyToken(OmniaToken token);
    public abstract virtual void InvalidateToken();
}
public interface Omnia.Fx.Users.IUserContextHandler {
    public abstract virtual ValueTask ApplyUserCredentialAsync(string encryptedUserToken);
    public abstract virtual ValueTask ApplyUserCredentialAsync(OmniaToken userToken);
}
internal class Omnia.Fx.Users.UserContextHandler : object {
    [CompilerGeneratedAttribute]
private IOmniaUserTokenProvider <OmniaUserTokenProvider>k__BackingField;
    [CompilerGeneratedAttribute]
private IEncryptionUserTokenProvider <EncryptionUserTokenProvider>k__BackingField;
    [CompilerGeneratedAttribute]
private IAuthService <AuthService>k__BackingField;
    [CompilerGeneratedAttribute]
private IOmniaContext <OmniaContext>k__BackingField;
    private IOmniaUserTokenProvider OmniaUserTokenProvider { get; }
    private IEncryptionUserTokenProvider EncryptionUserTokenProvider { get; }
    private IAuthService AuthService { get; }
    private IOmniaContext OmniaContext { get; }
    public UserContextHandler(IOmniaUserTokenProvider omniaUserTokenProvider, IEncryptionUserTokenProvider encryptionUserTokenProvider, IAuthService authService, IOmniaContext omniaContext);
    [CompilerGeneratedAttribute]
private IOmniaUserTokenProvider get_OmniaUserTokenProvider();
    [CompilerGeneratedAttribute]
private IEncryptionUserTokenProvider get_EncryptionUserTokenProvider();
    [CompilerGeneratedAttribute]
private IAuthService get_AuthService();
    [CompilerGeneratedAttribute]
private IOmniaContext get_OmniaContext();
    [AsyncStateMachineAttribute("Omnia.Fx.Users.UserContextHandler/<ApplyUserCredentialAsync>d__13")]
public sealed virtual ValueTask ApplyUserCredentialAsync(string encryptedUserToken);
    [AsyncStateMachineAttribute("Omnia.Fx.Users.UserContextHandler/<ApplyUserCredentialAsync>d__14")]
public sealed virtual ValueTask ApplyUserCredentialAsync(OmniaToken userToken);
    [AsyncStateMachineAttribute("Omnia.Fx.Users.UserContextHandler/<UpdateOmniaContextAsync>d__15")]
private ValueTask UpdateOmniaContextAsync(string tokenKey);
}
public class Omnia.Fx.Utilities.ApiUtils : object {
    private static string UnAuthoriedMessage;
    public static ApiResponse CreateErrorResponse(string message, ApiResponseCodes status);
    public static ApiResponse CreateErrorResponse(Exception exception);
    public static ApiResponse`1<T> CreateErrorResponse(string message, ApiResponseCodes status);
    public static ApiResponse CreateUnauthorizedResponse();
    public static ApiResponse`1<T> CreateUnauthorizedResponse();
    public static ApiResponse`1<T> CreateUnauthorizedResponse(UnauthorizedAccessException exception);
    public static ApiResponse`1<T> CreateErrorResponse(Exception exception);
    public static ApiResponse`1<T> CreateSuccessResponse(T Response);
    public static ApiResponse CreateSuccessResponse();
}
public class Omnia.Fx.Utilities.AppDomainUtils : object {
    private static List`1<Type> _types;
    private static object _lock;
    public static List`1<Type> AllTypes { get; }
    private static AppDomainUtils();
    public static List`1<Type> get_AllTypes();
    private static List`1<Type> GetTypesWithEnsuringReferencedAssemblies();
    private static List`1<Assembly> LoadAllAssemblies(bool includeFramework);
    [CompilerGeneratedAttribute]
internal static bool <LoadAllAssemblies>g__NotNetFramework|5_1(string assemblyName);
}
internal class Omnia.Fx.Utilities.BaseTimerPollingState`1 : object {
    [CompilerGeneratedAttribute]
private DateTimeOffset <StartTime>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <ShouldStop>k__BackingField;
    [CompilerGeneratedAttribute]
private Exception <Exception>k__BackingField;
    [CompilerGeneratedAttribute]
private T <Result>k__BackingField;
    public DateTimeOffset StartTime { get; }
    public bool ShouldStop { get; public set; }
    public Exception Exception { get; public set; }
    public T Result { get; public set; }
    [CompilerGeneratedAttribute]
public DateTimeOffset get_StartTime();
    [CompilerGeneratedAttribute]
public sealed virtual bool get_ShouldStop();
    [CompilerGeneratedAttribute]
public sealed virtual void set_ShouldStop(bool value);
    [CompilerGeneratedAttribute]
public Exception get_Exception();
    [CompilerGeneratedAttribute]
public void set_Exception(Exception value);
    [CompilerGeneratedAttribute]
public sealed virtual T get_Result();
    [CompilerGeneratedAttribute]
public sealed virtual void set_Result(T value);
}
public class Omnia.Fx.Utilities.CommonUtils : object {
    public static string CreateMd5Hash(string input);
    public static string CreateMd5Hash(object inputObj);
    public static string GetLocalizedText(string input);
    public static string MakeFriendlyUrl(string str, bool collapseAndTrimDashes, string whiteSpaceChar);
}
public class Omnia.Fx.Utilities.CultureUtils : object {
    private static List`1<int> ExcludeLcids;
    private static List`1<Language> AllLanguages;
    private static CultureUtils();
    public static Language GetCultureInfo(LanguageTag name);
    public static Language GetCultureInfo(int culture);
    public static List`1<Language> GetAllTenantLanguages();
}
[ExtensionAttribute]
public static class Omnia.Fx.Utilities.EnumUtils : object {
    [ExtensionAttribute]
public static string GetEnumMemberValue(T value);
}
[ExtensionAttribute]
[ObsoleteAttribute("Use OmniaBackendRuntimes.IsBackendM365() and OmniaBackendRuntimes.IsBackendSharePointServer() instead")]
public static class Omnia.Fx.Utilities.EnvironmentUtils : object {
    [ObsoleteAttribute]
public static bool IsOnprem(IOmniaContext omniaContext);
    [ObsoleteAttribute]
public static bool IsOnline(IOmniaContext omniaContext);
    [ExtensionAttribute]
[ObsoleteAttribute("Use OmniaBackendRuntimes.IsBackendSharePointServer() instead")]
public static bool IsBackendSharePointServer(OmniaEnvironmentContext omniaEnvironmentContext);
    [ExtensionAttribute]
[ObsoleteAttribute("Use OmniaBackendRuntimes.IsBackendM365() instead")]
public static bool IsBackendM365(OmniaEnvironmentContext omniaEnvironmentContext);
}
public static class Omnia.Fx.Utilities.ExpressionUtils : object {
    public static string GetExpressionTextFromType(Expression`1<Func`2<T, object>> expression);
    public static string GetExpressionText(LambdaExpression expression);
    private static string GetMemberName(MemberInfo member);
    private static void InsertIndexerInvocationText(StringBuilder builder, Expression indexExpression, LambdaExpression parentExpression);
    public static bool IsSingleArgumentIndexer(Expression expression);
}
public static class Omnia.Fx.Utilities.FileUtils : object {
    [AsyncStateMachineAttribute("Omnia.Fx.Utilities.FileUtils/<ReadAllTextWithoutLockAsync>d__0")]
public static ValueTask`1<string> ReadAllTextWithoutLockAsync(string path);
    public static string FormatFileName(string fileName);
    [AsyncStateMachineAttribute("Omnia.Fx.Utilities.FileUtils/<ReadAllTextWithoutLockAsync>d__2")]
public static ValueTask`1<string> ReadAllTextWithoutLockAsync(string path, Encoding encoding);
}
public abstract class Omnia.Fx.Utilities.HtmlSanitizer.BaseHtmlSanitizer : object {
    [CompilerGeneratedAttribute]
private static bool <DefaultKeepChildNodes>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <KeepChildNodes>k__BackingField;
    [CompilerGeneratedAttribute]
private static Func`1<HtmlParser> <DefaultHtmlParserFactory>k__BackingField;
    [CompilerGeneratedAttribute]
private Func`1<HtmlParser> <HtmlParserFactory>k__BackingField;
    [CompilerGeneratedAttribute]
private static IMarkupFormatter <DefaultOutputFormatter>k__BackingField;
    [CompilerGeneratedAttribute]
private IMarkupFormatter <OutputFormatter>k__BackingField;
    [CompilerGeneratedAttribute]
private ISet`1<CssRuleType> <CssAtRules>k__BackingField;
    [CompilerGeneratedAttribute]
private static ISet`1<CssRuleType> <DefaultCssAtRules>k__BackingField;
    [CompilerGeneratedAttribute]
private ISet`1<string> <HttpSchemes>k__BackingField;
    [CompilerGeneratedAttribute]
private ISet`1<string> <DefaultHttpSchemes>k__BackingField;
    [CompilerGeneratedAttribute]
private ISet`1<string> <HtmlTags>k__BackingField;
    [CompilerGeneratedAttribute]
private ISet`1<string> <DefaultHtmlTags>k__BackingField;
    [CompilerGeneratedAttribute]
private ISet`1<string> <HtmlAttributes>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <AllowDataAttributes>k__BackingField;
    [CompilerGeneratedAttribute]
private ISet`1<string> <DefaultHtmlAttributes>k__BackingField;
    [CompilerGeneratedAttribute]
private ISet`1<string> <_uriAttributes>k__BackingField;
    [CompilerGeneratedAttribute]
private ISet`1<string> <DefaultUriAttributes>k__BackingField;
    [CompilerGeneratedAttribute]
private ISet`1<string> <CssProperties>k__BackingField;
    [CompilerGeneratedAttribute]
private ISet`1<string> <DefaultCssProperties>k__BackingField;
    private Regex _disallowedCssPropertyValue;
    private Regex _disallowHttpSchemeValue;
    [CompilerGeneratedAttribute]
private static ISet`1<string> <DefaultCssClasses>k__BackingField;
    [CompilerGeneratedAttribute]
private ISet`1<string> <CssClasses>k__BackingField;
    [CompilerGeneratedAttribute]
private EventHandler`1<PostProcessDomEventArgs> PostProcessDom;
    [CompilerGeneratedAttribute]
private EventHandler`1<PostProcessNodeEventArgs> PostProcessNode;
    [CompilerGeneratedAttribute]
private EventHandler`1<RemovingTagEventArgs> RemovingTag;
    [CompilerGeneratedAttribute]
private EventHandler`1<RemovingAttributeEventArgs> RemovingAttribute;
    [CompilerGeneratedAttribute]
private EventHandler`1<RemovingStyleEventArgs> RemovingStyle;
    [CompilerGeneratedAttribute]
private EventHandler`1<RemovingAtRuleEventArgs> RemovingAtRule;
    [CompilerGeneratedAttribute]
private EventHandler`1<RemovingCommentEventArgs> RemovingComment;
    [CompilerGeneratedAttribute]
private EventHandler`1<RemovingCssClassEventArgs> RemovingCssClass;
    [CompilerGeneratedAttribute]
private EventHandler`1<FilterUrlEventArgs> FilterUrl;
    public static Regex DefaultDisallowedCssPropertyValue;
    public static Regex DefaultDisallowHttpSchemeValue;
    protected static Regex CssUnicodeEscapes;
    protected static Regex CssComments;
    protected static Regex CssExpression;
    protected static Regex CssUrl;
    protected static Regex SchemeRegex;
    public static bool DefaultKeepChildNodes { get; public set; }
    public bool KeepChildNodes { get; public set; }
    public static Func`1<HtmlParser> DefaultHtmlParserFactory { get; public set; }
    public Func`1<HtmlParser> HtmlParserFactory { get; public set; }
    public static IMarkupFormatter DefaultOutputFormatter { get; public set; }
    public IMarkupFormatter OutputFormatter { get; public set; }
    public ISet`1<CssRuleType> CssAtRules { get; private set; }
    public static ISet`1<CssRuleType> DefaultCssAtRules { get; }
    public ISet`1<string> HttpSchemes { get; private set; }
    public ISet`1<string> DefaultHttpSchemes { get; }
    public ISet`1<string> HtmlTags { get; private set; }
    public ISet`1<string> DefaultHtmlTags { get; }
    public ISet`1<string> HtmlAttributes { get; private set; }
    public bool AllowDataAttributes { get; public set; }
    public ISet`1<string> DefaultHtmlAttributes { get; }
    private ISet`1<string> _uriAttributes { get; private set; }
    public ISet`1<string> UriAttributes { get; public set; }
    public ISet`1<string> DefaultUriAttributes { get; }
    public ISet`1<string> CssProperties { get; private set; }
    public ISet`1<string> DefaultCssProperties { get; }
    public Regex DisallowCssPropertyValue { get; public set; }
    public Regex DisallowHttpSchemeValue { get; public set; }
    public static ISet`1<string> DefaultCssClasses { get; }
    public ISet`1<string> CssClasses { get; private set; }
    public BaseHtmlSanitizer(IEnumerable`1<string> tags, IEnumerable`1<string> httpSchemes, IEnumerable`1<string> htmlAttributes, IEnumerable`1<string> cssProperties);
    private static BaseHtmlSanitizer();
    [CompilerGeneratedAttribute]
public static bool get_DefaultKeepChildNodes();
    [CompilerGeneratedAttribute]
public static void set_DefaultKeepChildNodes(bool value);
    [CompilerGeneratedAttribute]
public sealed virtual bool get_KeepChildNodes();
    [CompilerGeneratedAttribute]
public sealed virtual void set_KeepChildNodes(bool value);
    [CompilerGeneratedAttribute]
public static Func`1<HtmlParser> get_DefaultHtmlParserFactory();
    [CompilerGeneratedAttribute]
public static void set_DefaultHtmlParserFactory(Func`1<HtmlParser> value);
    [CompilerGeneratedAttribute]
public sealed virtual Func`1<HtmlParser> get_HtmlParserFactory();
    [CompilerGeneratedAttribute]
public sealed virtual void set_HtmlParserFactory(Func`1<HtmlParser> value);
    [CompilerGeneratedAttribute]
public static IMarkupFormatter get_DefaultOutputFormatter();
    [CompilerGeneratedAttribute]
public static void set_DefaultOutputFormatter(IMarkupFormatter value);
    [CompilerGeneratedAttribute]
public sealed virtual IMarkupFormatter get_OutputFormatter();
    [CompilerGeneratedAttribute]
public sealed virtual void set_OutputFormatter(IMarkupFormatter value);
    [CompilerGeneratedAttribute]
public sealed virtual ISet`1<CssRuleType> get_CssAtRules();
    [CompilerGeneratedAttribute]
private void set_CssAtRules(ISet`1<CssRuleType> value);
    [CompilerGeneratedAttribute]
public static ISet`1<CssRuleType> get_DefaultCssAtRules();
    [CompilerGeneratedAttribute]
public sealed virtual ISet`1<string> get_HttpSchemes();
    [CompilerGeneratedAttribute]
private void set_HttpSchemes(ISet`1<string> value);
    [CompilerGeneratedAttribute]
public virtual ISet`1<string> get_DefaultHttpSchemes();
    [CompilerGeneratedAttribute]
public sealed virtual ISet`1<string> get_HtmlTags();
    [CompilerGeneratedAttribute]
private void set_HtmlTags(ISet`1<string> value);
    [CompilerGeneratedAttribute]
public virtual ISet`1<string> get_DefaultHtmlTags();
    [CompilerGeneratedAttribute]
public sealed virtual ISet`1<string> get_HtmlAttributes();
    [CompilerGeneratedAttribute]
private void set_HtmlAttributes(ISet`1<string> value);
    [CompilerGeneratedAttribute]
public sealed virtual bool get_AllowDataAttributes();
    [CompilerGeneratedAttribute]
public sealed virtual void set_AllowDataAttributes(bool value);
    [CompilerGeneratedAttribute]
public virtual ISet`1<string> get_DefaultHtmlAttributes();
    [CompilerGeneratedAttribute]
private ISet`1<string> get__uriAttributes();
    [CompilerGeneratedAttribute]
private void set__uriAttributes(ISet`1<string> value);
    public sealed virtual ISet`1<string> get_UriAttributes();
    public void set_UriAttributes(ISet`1<string> value);
    [CompilerGeneratedAttribute]
public virtual ISet`1<string> get_DefaultUriAttributes();
    [CompilerGeneratedAttribute]
public sealed virtual ISet`1<string> get_CssProperties();
    [CompilerGeneratedAttribute]
private void set_CssProperties(ISet`1<string> value);
    [CompilerGeneratedAttribute]
public virtual ISet`1<string> get_DefaultCssProperties();
    public sealed virtual Regex get_DisallowCssPropertyValue();
    public sealed virtual void set_DisallowCssPropertyValue(Regex value);
    public sealed virtual Regex get_DisallowHttpSchemeValue();
    public sealed virtual void set_DisallowHttpSchemeValue(Regex value);
    [CompilerGeneratedAttribute]
public static ISet`1<string> get_DefaultCssClasses();
    [CompilerGeneratedAttribute]
public sealed virtual ISet`1<string> get_CssClasses();
    [CompilerGeneratedAttribute]
private void set_CssClasses(ISet`1<string> value);
    [CompilerGeneratedAttribute]
public sealed virtual void add_PostProcessDom(EventHandler`1<PostProcessDomEventArgs> value);
    [CompilerGeneratedAttribute]
public sealed virtual void remove_PostProcessDom(EventHandler`1<PostProcessDomEventArgs> value);
    [CompilerGeneratedAttribute]
public sealed virtual void add_PostProcessNode(EventHandler`1<PostProcessNodeEventArgs> value);
    [CompilerGeneratedAttribute]
public sealed virtual void remove_PostProcessNode(EventHandler`1<PostProcessNodeEventArgs> value);
    [CompilerGeneratedAttribute]
public sealed virtual void add_RemovingTag(EventHandler`1<RemovingTagEventArgs> value);
    [CompilerGeneratedAttribute]
public sealed virtual void remove_RemovingTag(EventHandler`1<RemovingTagEventArgs> value);
    [CompilerGeneratedAttribute]
public sealed virtual void add_RemovingAttribute(EventHandler`1<RemovingAttributeEventArgs> value);
    [CompilerGeneratedAttribute]
public sealed virtual void remove_RemovingAttribute(EventHandler`1<RemovingAttributeEventArgs> value);
    [CompilerGeneratedAttribute]
public sealed virtual void add_RemovingStyle(EventHandler`1<RemovingStyleEventArgs> value);
    [CompilerGeneratedAttribute]
public sealed virtual void remove_RemovingStyle(EventHandler`1<RemovingStyleEventArgs> value);
    [CompilerGeneratedAttribute]
public sealed virtual void add_RemovingAtRule(EventHandler`1<RemovingAtRuleEventArgs> value);
    [CompilerGeneratedAttribute]
public sealed virtual void remove_RemovingAtRule(EventHandler`1<RemovingAtRuleEventArgs> value);
    [CompilerGeneratedAttribute]
public sealed virtual void add_RemovingComment(EventHandler`1<RemovingCommentEventArgs> value);
    [CompilerGeneratedAttribute]
public sealed virtual void remove_RemovingComment(EventHandler`1<RemovingCommentEventArgs> value);
    [CompilerGeneratedAttribute]
public sealed virtual void add_RemovingCssClass(EventHandler`1<RemovingCssClassEventArgs> value);
    [CompilerGeneratedAttribute]
public sealed virtual void remove_RemovingCssClass(EventHandler`1<RemovingCssClassEventArgs> value);
    [CompilerGeneratedAttribute]
public void add_FilterUrl(EventHandler`1<FilterUrlEventArgs> value);
    [CompilerGeneratedAttribute]
public void remove_FilterUrl(EventHandler`1<FilterUrlEventArgs> value);
    protected virtual void OnPostProcessDom(PostProcessDomEventArgs e);
    protected virtual void OnPostProcessNode(PostProcessNodeEventArgs e);
    protected virtual void OnRemovingTag(RemovingTagEventArgs e);
    protected virtual void OnRemovingAttribute(RemovingAttributeEventArgs e);
    protected virtual void OnRemovingStyle(RemovingStyleEventArgs e);
    protected virtual void OnRemovingAtRule(RemovingAtRuleEventArgs e);
    protected virtual void OnRemovingComment(RemovingCommentEventArgs e);
    protected virtual void OnRemovingCssClass(RemovingCssClassEventArgs e);
    protected virtual void OnFilteringUrl(FilterUrlEventArgs e);
    [IteratorStateMachineAttribute("Omnia.Fx.Utilities.HtmlSanitizer.BaseHtmlSanitizer/<GetAllNodes>d__127")]
protected static IEnumerable`1<INode> GetAllNodes(INode dom);
    public sealed virtual string Sanitize(string html, string baseUrl, IMarkupFormatter outputFormatter);
    public sealed virtual IHtmlDocument SanitizeDom(string html, string baseUrl);
    public sealed virtual string SanitizeDocument(string html, string baseUrl, IMarkupFormatter outputFormatter);
    public string SanitizeDocument(Stream html, string baseUrl, IMarkupFormatter outputFormatter);
    protected static HtmlParser CreateParser();
    private void RemoveComments(INode context);
    private void DoSanitize(IHtmlDocument dom, IParentNode context, string baseUrl);
    private void SanitizeStyleSheets(IHtmlDocument dom, string baseUrl);
    private bool SanitizeStyleRule(ICssRule rule, IElement styleTag, string baseUrl);
    private void DoPostProcess(IHtmlDocument dom, INode context);
    protected virtual bool IsUriAttribute(IAttr attribute);
    protected virtual bool IsAllowedTag(IElement tag);
    protected virtual bool IsAllowCssAttribute(ICssProperty style);
    protected virtual bool IsAllowHttpScheme(string scheme);
    protected virtual bool IsAllowedAttribute(IAttr attribute);
    protected void SanitizeStyle(IElement element, string baseUrl);
    private void SanitizeStyleDeclaration(IElement element, ICssStyleDeclaration styles, string baseUrl);
    protected static string DecodeCss(string css);
    protected Iri GetSafeIri(string url);
    protected virtual string SanitizeUrl(string url, string baseUrl);
    private void RemoveTag(IElement tag, RemoveReason reason);
    private void RemoveAttribute(IElement tag, IAttr attribute, RemoveReason reason);
    private void RemoveStyle(IElement tag, ICssStyleDeclaration styles, ICssProperty style, RemoveReason reason);
    private bool RemoveAtRule(IElement tag, ICssRule rule);
    private void RemoveCssClass(IElement tag, string cssClass, RemoveReason reason);
    [CompilerGeneratedAttribute]
private bool <DoSanitize>b__134_0(IElement t);
    [CompilerGeneratedAttribute]
private bool <DoSanitize>b__134_1(IAttr a);
}
public class Omnia.Fx.Utilities.HtmlSanitizer.BlackListHtmlSanitizer : BaseHtmlSanitizer {
    public ISet`1<string> DefaultHtmlTags { get; }
    public ISet`1<string> DefaultHttpSchemes { get; }
    public ISet`1<string> DefaultUriAttributes { get; }
    public ISet`1<string> DefaultHtmlAttributes { get; }
    public BlackListHtmlSanitizer(IEnumerable`1<string> invalidTags, IEnumerable`1<string> invalidHttpSchemes, IEnumerable`1<string> invalidHtmlAttributes, IEnumerable`1<string> invalidCssProperties);
    public virtual ISet`1<string> get_DefaultHtmlTags();
    public virtual ISet`1<string> get_DefaultHttpSchemes();
    public virtual ISet`1<string> get_DefaultUriAttributes();
    public virtual ISet`1<string> get_DefaultHtmlAttributes();
    protected virtual bool IsAllowCssAttribute(ICssProperty style);
    protected virtual bool IsAllowedTag(IElement tag);
    protected virtual bool IsAllowHttpScheme(string scheme);
    protected virtual bool IsAllowedAttribute(IAttr attribute);
}
public class Omnia.Fx.Utilities.HtmlSanitizer.FilterUrlEventArgs : EventArgs {
    [CompilerGeneratedAttribute]
private string <OriginalUrl>k__BackingField;
    [CompilerGeneratedAttribute]
private string <SanitizedUrl>k__BackingField;
    public string OriginalUrl { get; public set; }
    public string SanitizedUrl { get; public set; }
    [CompilerGeneratedAttribute]
public string get_OriginalUrl();
    [CompilerGeneratedAttribute]
public void set_OriginalUrl(string value);
    [CompilerGeneratedAttribute]
public string get_SanitizedUrl();
    [CompilerGeneratedAttribute]
public void set_SanitizedUrl(string value);
}
internal class Omnia.Fx.Utilities.HtmlSanitizer.HtmlFormatter : HtmlMarkupFormatter {
    public static HtmlFormatter Instance;
    private static HtmlFormatter();
    protected virtual string Attribute(IAttr attr);
}
public enum Omnia.Fx.Utilities.HtmlSanitizer.HtmlSanitizerType : Enum {
    public int value__;
    public static HtmlSanitizerType WhiteList;
    public static HtmlSanitizerType BlackList;
}
public static class Omnia.Fx.Utilities.HtmlSanitizer.HtmlSanitizerUtils : object {
    public static IHtmlSanitizer GetInstance(HtmlSanitizerType type, IEnumerable`1<string> tags, IEnumerable`1<string> httpSchemes, IEnumerable`1<string> htmlAttributes, IEnumerable`1<string> cssProperties, bool allowDataAttributes);
}
public interface Omnia.Fx.Utilities.HtmlSanitizer.IHtmlSanitizer {
    public bool KeepChildNodes { get; public set; }
    public Func`1<HtmlParser> HtmlParserFactory { get; public set; }
    public IMarkupFormatter OutputFormatter { get; public set; }
    public ISet`1<CssRuleType> CssAtRules { get; }
    public ISet`1<string> HttpSchemes { get; }
    public ISet`1<string> HtmlTags { get; }
    public ISet`1<string> HtmlAttributes { get; }
    public bool AllowDataAttributes { get; public set; }
    public ISet`1<string> UriAttributes { get; }
    public ISet`1<string> CssProperties { get; }
    public Regex DisallowCssPropertyValue { get; public set; }
    public Regex DisallowHttpSchemeValue { get; public set; }
    public ISet`1<string> CssClasses { get; }
    public abstract virtual bool get_KeepChildNodes();
    public abstract virtual void set_KeepChildNodes(bool value);
    public abstract virtual Func`1<HtmlParser> get_HtmlParserFactory();
    public abstract virtual void set_HtmlParserFactory(Func`1<HtmlParser> value);
    public abstract virtual IMarkupFormatter get_OutputFormatter();
    public abstract virtual void set_OutputFormatter(IMarkupFormatter value);
    public abstract virtual ISet`1<CssRuleType> get_CssAtRules();
    public abstract virtual ISet`1<string> get_HttpSchemes();
    public abstract virtual ISet`1<string> get_HtmlTags();
    public abstract virtual ISet`1<string> get_HtmlAttributes();
    public abstract virtual bool get_AllowDataAttributes();
    public abstract virtual void set_AllowDataAttributes(bool value);
    public abstract virtual ISet`1<string> get_UriAttributes();
    public abstract virtual ISet`1<string> get_CssProperties();
    public abstract virtual Regex get_DisallowCssPropertyValue();
    public abstract virtual void set_DisallowCssPropertyValue(Regex value);
    public abstract virtual Regex get_DisallowHttpSchemeValue();
    public abstract virtual void set_DisallowHttpSchemeValue(Regex value);
    public abstract virtual ISet`1<string> get_CssClasses();
    [CompilerGeneratedAttribute]
public abstract virtual void add_PostProcessDom(EventHandler`1<PostProcessDomEventArgs> value);
    [CompilerGeneratedAttribute]
public abstract virtual void remove_PostProcessDom(EventHandler`1<PostProcessDomEventArgs> value);
    [CompilerGeneratedAttribute]
public abstract virtual void add_PostProcessNode(EventHandler`1<PostProcessNodeEventArgs> value);
    [CompilerGeneratedAttribute]
public abstract virtual void remove_PostProcessNode(EventHandler`1<PostProcessNodeEventArgs> value);
    [CompilerGeneratedAttribute]
public abstract virtual void add_RemovingTag(EventHandler`1<RemovingTagEventArgs> value);
    [CompilerGeneratedAttribute]
public abstract virtual void remove_RemovingTag(EventHandler`1<RemovingTagEventArgs> value);
    [CompilerGeneratedAttribute]
public abstract virtual void add_RemovingAttribute(EventHandler`1<RemovingAttributeEventArgs> value);
    [CompilerGeneratedAttribute]
public abstract virtual void remove_RemovingAttribute(EventHandler`1<RemovingAttributeEventArgs> value);
    [CompilerGeneratedAttribute]
public abstract virtual void add_RemovingStyle(EventHandler`1<RemovingStyleEventArgs> value);
    [CompilerGeneratedAttribute]
public abstract virtual void remove_RemovingStyle(EventHandler`1<RemovingStyleEventArgs> value);
    [CompilerGeneratedAttribute]
public abstract virtual void add_RemovingAtRule(EventHandler`1<RemovingAtRuleEventArgs> value);
    [CompilerGeneratedAttribute]
public abstract virtual void remove_RemovingAtRule(EventHandler`1<RemovingAtRuleEventArgs> value);
    [CompilerGeneratedAttribute]
public abstract virtual void add_RemovingComment(EventHandler`1<RemovingCommentEventArgs> value);
    [CompilerGeneratedAttribute]
public abstract virtual void remove_RemovingComment(EventHandler`1<RemovingCommentEventArgs> value);
    [CompilerGeneratedAttribute]
public abstract virtual void add_RemovingCssClass(EventHandler`1<RemovingCssClassEventArgs> value);
    [CompilerGeneratedAttribute]
public abstract virtual void remove_RemovingCssClass(EventHandler`1<RemovingCssClassEventArgs> value);
    public abstract virtual string Sanitize(string html, string baseUrl, IMarkupFormatter outputFormatter);
    public abstract virtual IHtmlDocument SanitizeDom(string html, string baseUrl);
    public abstract virtual string SanitizeDocument(string html, string baseUrl, IMarkupFormatter outputFormatter);
}
public class Omnia.Fx.Utilities.HtmlSanitizer.Iri : object {
    [CompilerGeneratedAttribute]
private string <Value>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Scheme>k__BackingField;
    public string Value { get; public set; }
    public bool IsAbsolute { get; }
    public string Scheme { get; public set; }
    [CompilerGeneratedAttribute]
public string get_Value();
    [CompilerGeneratedAttribute]
public void set_Value(string value);
    public bool get_IsAbsolute();
    [CompilerGeneratedAttribute]
public string get_Scheme();
    [CompilerGeneratedAttribute]
public void set_Scheme(string value);
}
public class Omnia.Fx.Utilities.HtmlSanitizer.PostProcessDomEventArgs : EventArgs {
    [CompilerGeneratedAttribute]
private IHtmlDocument <Document>k__BackingField;
    public IHtmlDocument Document { get; public set; }
    [CompilerGeneratedAttribute]
public IHtmlDocument get_Document();
    [CompilerGeneratedAttribute]
public void set_Document(IHtmlDocument value);
}
public class Omnia.Fx.Utilities.HtmlSanitizer.PostProcessNodeEventArgs : EventArgs {
    [CompilerGeneratedAttribute]
private IHtmlDocument <Document>k__BackingField;
    [CompilerGeneratedAttribute]
private INode <Node>k__BackingField;
    [CompilerGeneratedAttribute]
private IList`1<INode> <ReplacementNodes>k__BackingField;
    public IHtmlDocument Document { get; public set; }
    public INode Node { get; public set; }
    public IList`1<INode> ReplacementNodes { get; private set; }
    [CompilerGeneratedAttribute]
public IHtmlDocument get_Document();
    [CompilerGeneratedAttribute]
public void set_Document(IHtmlDocument value);
    [CompilerGeneratedAttribute]
public INode get_Node();
    [CompilerGeneratedAttribute]
public void set_Node(INode value);
    [CompilerGeneratedAttribute]
public IList`1<INode> get_ReplacementNodes();
    [CompilerGeneratedAttribute]
private void set_ReplacementNodes(IList`1<INode> value);
}
public enum Omnia.Fx.Utilities.HtmlSanitizer.RemoveReason : Enum {
    public int value__;
    public static RemoveReason NotAllowedTag;
    public static RemoveReason NotAllowedAttribute;
    public static RemoveReason NotAllowedStyle;
    public static RemoveReason NotAllowedUrlValue;
    public static RemoveReason NotAllowedValue;
    public static RemoveReason NotAllowedCssClass;
    public static RemoveReason ClassAttributeEmpty;
    public static RemoveReason StyleAttributeEmpty;
}
public class Omnia.Fx.Utilities.HtmlSanitizer.RemovingAtRuleEventArgs : CancelEventArgs {
    [CompilerGeneratedAttribute]
private IElement <Tag>k__BackingField;
    [CompilerGeneratedAttribute]
private ICssRule <Rule>k__BackingField;
    public IElement Tag { get; public set; }
    public ICssRule Rule { get; public set; }
    [CompilerGeneratedAttribute]
public IElement get_Tag();
    [CompilerGeneratedAttribute]
public void set_Tag(IElement value);
    [CompilerGeneratedAttribute]
public ICssRule get_Rule();
    [CompilerGeneratedAttribute]
public void set_Rule(ICssRule value);
}
public class Omnia.Fx.Utilities.HtmlSanitizer.RemovingAttributeEventArgs : CancelEventArgs {
    [CompilerGeneratedAttribute]
private IElement <Tag>k__BackingField;
    [CompilerGeneratedAttribute]
private IAttr <Attribute>k__BackingField;
    [CompilerGeneratedAttribute]
private RemoveReason <Reason>k__BackingField;
    public IElement Tag { get; public set; }
    public IAttr Attribute { get; public set; }
    public RemoveReason Reason { get; public set; }
    [CompilerGeneratedAttribute]
public IElement get_Tag();
    [CompilerGeneratedAttribute]
public void set_Tag(IElement value);
    [CompilerGeneratedAttribute]
public IAttr get_Attribute();
    [CompilerGeneratedAttribute]
public void set_Attribute(IAttr value);
    [CompilerGeneratedAttribute]
public RemoveReason get_Reason();
    [CompilerGeneratedAttribute]
public void set_Reason(RemoveReason value);
}
public class Omnia.Fx.Utilities.HtmlSanitizer.RemovingCommentEventArgs : CancelEventArgs {
    [CompilerGeneratedAttribute]
private IComment <Comment>k__BackingField;
    public IComment Comment { get; public set; }
    [CompilerGeneratedAttribute]
public IComment get_Comment();
    [CompilerGeneratedAttribute]
public void set_Comment(IComment value);
}
public class Omnia.Fx.Utilities.HtmlSanitizer.RemovingCssClassEventArgs : CancelEventArgs {
    [CompilerGeneratedAttribute]
private IElement <Tag>k__BackingField;
    [CompilerGeneratedAttribute]
private string <CssClass>k__BackingField;
    [CompilerGeneratedAttribute]
private RemoveReason <Reason>k__BackingField;
    public IElement Tag { get; public set; }
    public string CssClass { get; public set; }
    public RemoveReason Reason { get; public set; }
    [CompilerGeneratedAttribute]
public IElement get_Tag();
    [CompilerGeneratedAttribute]
public void set_Tag(IElement value);
    [CompilerGeneratedAttribute]
public string get_CssClass();
    [CompilerGeneratedAttribute]
public void set_CssClass(string value);
    [CompilerGeneratedAttribute]
public RemoveReason get_Reason();
    [CompilerGeneratedAttribute]
public void set_Reason(RemoveReason value);
}
public class Omnia.Fx.Utilities.HtmlSanitizer.RemovingStyleEventArgs : CancelEventArgs {
    [CompilerGeneratedAttribute]
private IElement <Tag>k__BackingField;
    [CompilerGeneratedAttribute]
private ICssProperty <Style>k__BackingField;
    [CompilerGeneratedAttribute]
private RemoveReason <Reason>k__BackingField;
    public IElement Tag { get; public set; }
    public ICssProperty Style { get; public set; }
    public RemoveReason Reason { get; public set; }
    [CompilerGeneratedAttribute]
public IElement get_Tag();
    [CompilerGeneratedAttribute]
public void set_Tag(IElement value);
    [CompilerGeneratedAttribute]
public ICssProperty get_Style();
    [CompilerGeneratedAttribute]
public void set_Style(ICssProperty value);
    [CompilerGeneratedAttribute]
public RemoveReason get_Reason();
    [CompilerGeneratedAttribute]
public void set_Reason(RemoveReason value);
}
public class Omnia.Fx.Utilities.HtmlSanitizer.RemovingTagEventArgs : CancelEventArgs {
    [CompilerGeneratedAttribute]
private IElement <Tag>k__BackingField;
    [CompilerGeneratedAttribute]
private RemoveReason <Reason>k__BackingField;
    public IElement Tag { get; public set; }
    public RemoveReason Reason { get; public set; }
    [CompilerGeneratedAttribute]
public IElement get_Tag();
    [CompilerGeneratedAttribute]
public void set_Tag(IElement value);
    [CompilerGeneratedAttribute]
public RemoveReason get_Reason();
    [CompilerGeneratedAttribute]
public void set_Reason(RemoveReason value);
}
public class Omnia.Fx.Utilities.HtmlSanitizer.WhiteListHtmlSanitizer : BaseHtmlSanitizer {
    public ISet`1<string> DefaultHttpSchemes { get; }
    public ISet`1<string> DefaultHtmlTags { get; }
    public ISet`1<string> DefaultHtmlAttributes { get; }
    public ISet`1<string> DefaultCssProperties { get; }
    public WhiteListHtmlSanitizer(IEnumerable`1<string> validTags, IEnumerable`1<string> validHttpSchemes, IEnumerable`1<string> validHtmlAttributes, IEnumerable`1<string> validCssProperties);
    public virtual ISet`1<string> get_DefaultHttpSchemes();
    public virtual ISet`1<string> get_DefaultHtmlTags();
    public virtual ISet`1<string> get_DefaultHtmlAttributes();
    public virtual ISet`1<string> get_DefaultCssProperties();
}
public static class Omnia.Fx.Utilities.HttpUtils : object {
    [AsyncStateMachineAttribute("Omnia.Fx.Utilities.HttpUtils/<EnsureErrorLoggedWithInnerExceptionMessage>d__0`1")]
public static ValueTask`1<T> EnsureErrorLoggedWithInnerExceptionMessage(ILogger logger, string message, Func`1<ValueTask`1<T>> func);
    [AsyncStateMachineAttribute("Omnia.Fx.Utilities.HttpUtils/<EnsureErrorLogged>d__1`1")]
public static ValueTask`1<T> EnsureErrorLogged(ILogger logger, string message, Func`1<ValueTask`1<T>> func);
    [AsyncStateMachineAttribute("Omnia.Fx.Utilities.HttpUtils/<EnsureErrorLogged>d__2")]
public static ValueTask EnsureErrorLogged(ILogger logger, string message, Func`1<ValueTask> func);
    [AsyncStateMachineAttribute("Omnia.Fx.Utilities.HttpUtils/<EnsureApiErrorLogged>d__3`1")]
public static ValueTask`1<ApiResponse`1<T>> EnsureApiErrorLogged(ILogger logger, string message, Func`1<ValueTask`1<ApiResponse`1<T>>> func);
    [AsyncStateMachineAttribute("Omnia.Fx.Utilities.HttpUtils/<EnsureApiErrorLogged>d__4")]
public static ValueTask`1<ApiResponse> EnsureApiErrorLogged(ILogger logger, string message, Func`1<ValueTask`1<ApiResponse>> func);
}
public interface Omnia.Fx.Utilities.IBaseTimerPollingState`1 {
    public bool ShouldStop { get; public set; }
    public T Result { get; public set; }
    public abstract virtual bool get_ShouldStop();
    public abstract virtual void set_ShouldStop(bool value);
    public abstract virtual T get_Result();
    public abstract virtual void set_Result(T value);
}
public interface Omnia.Fx.Utilities.ILogFileService {
    public abstract virtual ILogFileWriter CreateWriter(string logCategory);
}
public interface Omnia.Fx.Utilities.ILogFileWriter {
    public string LogCategory { get; }
    public abstract virtual string get_LogCategory();
    public abstract virtual void WriteLine(string value);
    public abstract virtual bool TryWriteLine(Func`1<string> getWriteContentFunc);
}
public interface Omnia.Fx.Utilities.ILogPersistentDiskProvider {
    public Nullable`1<Guid> ResourceId { get; }
    public abstract virtual Nullable`1<Guid> get_ResourceId();
}
public static class Omnia.Fx.Utilities.ImageUtils : object {
    private static string allImageSignaturesKey;
    private static Dictionary`2<string, List`1<Byte[]>> _fileSignature;
    private static ImageUtils();
    public static bool ImagesValidation(string fileName, string fileBase64);
    public static PersistentDiskResource GetPersistentDiskResource(Guid resourceId, IOptionsMonitor`1<OmniaAppSettings> OmniaAppSettings);
    public static string GetImageUrl(IOmniaServiceLocator omniaServiceLocator, Guid serviceId, int mediaPickerImageId, string friendlyUrl, int imageRatioId, int scalingId, bool useExternalUrl);
    public static string GetOriginalImageUrl(IOmniaServiceLocator omniaServiceLocator, Guid serviceId, int mediaPickerImageId, bool useExternalUrl);
    public static string GetFilePath(string fileName, string storagePath, string folderPath, bool overwrite);
    private static string GetDNS(IOmniaServiceLocator omniaServiceLocator, Guid serviceId, bool useExternalUrl);
    private static string BuildImageUrl(string dns, int mediaPickerImageId, string friendlyUrl, int imageRatioId, int scalingId);
    private static string BuildOriginalImageUrl(string dns, int mediaPickerImageId);
    private static bool FileExtensionValidation(string fileName);
    private static bool FileSignatureValidation(string fileName, string fileBase64);
    private static bool checkValidSignatures(List`1<Byte[]> signatures, Byte[] headerBytes);
}
[ExtensionAttribute]
public static class Omnia.Fx.Utilities.LanguageUtils : object {
    [ExtensionAttribute]
public static string GetLanguageCode(LanguageTag languageTag);
}
public static class Omnia.Fx.Utilities.LayoutUtils : object {
    public static LayoutItem GetLayoutItem(LayoutItem layoutItem, Guid id, bool throwIfNotFound);
    public static LayoutItem GetLayoutItem(LayoutItem layoutItem, Guid id, string expectedItemType, bool throwIfNotFound);
    public static string GetBlockElementName(LayoutItem layoutItem, Guid blockId, bool throwIfNotFound);
    private static LayoutItem GetLayoutItemRecursively(LayoutItem layoutItem, Guid id);
}
public static class Omnia.Fx.Utilities.ListUtil : object {
    public static List`1<List`1<T>> SplitToSubLists(List`1<T> source, int subListMaxValue, Func`2<T, int> itemValuePredicate);
}
public class Omnia.Fx.Utilities.LogFileService : object {
    private static ConcurrentDictionary`2<string, ConcurrentQueue`1<string>> _textToWrite;
    private CancellationTokenSource _source;
    private CancellationToken _token;
    [CompilerGeneratedAttribute]
private IOptionsMonitor`1<OmniaAppSettings> <OmniaAppSettings>k__BackingField;
    [CompilerGeneratedAttribute]
private ILogPersistentDiskProvider <PersistentDiskProvider>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsLoggingFullyEnabled>k__BackingField;
    [CompilerGeneratedAttribute]
private List`1<string> <LogCategories>k__BackingField;
    private IOptionsMonitor`1<OmniaAppSettings> OmniaAppSettings { get; }
    private ILogPersistentDiskProvider PersistentDiskProvider { get; }
    private bool IsLoggingFullyEnabled { get; private set; }
    private List`1<string> LogCategories { get; private set; }
    public LogFileService(IOptionsMonitor`1<OmniaAppSettings> omniaAppSettings, ILogPersistentDiskProvider persistentDiskProvider);
    private static LogFileService();
    [CompilerGeneratedAttribute]
private IOptionsMonitor`1<OmniaAppSettings> get_OmniaAppSettings();
    [CompilerGeneratedAttribute]
private ILogPersistentDiskProvider get_PersistentDiskProvider();
    [CompilerGeneratedAttribute]
private bool get_IsLoggingFullyEnabled();
    [CompilerGeneratedAttribute]
private void set_IsLoggingFullyEnabled(bool value);
    [CompilerGeneratedAttribute]
private List`1<string> get_LogCategories();
    [CompilerGeneratedAttribute]
private void set_LogCategories(List`1<string> value);
    public sealed virtual ILogFileWriter CreateWriter(string logCategory);
    [AsyncStateMachineAttribute("Omnia.Fx.Utilities.LogFileService/<WriteToFile>d__20")]
private void WriteToFile();
    private string GetLogRootFolderPath();
    private void CheckLoggingEnvironmentVariables();
}
public class Omnia.Fx.Utilities.LogPersistentDiskProvider : object {
    [CompilerGeneratedAttribute]
private Nullable`1<Guid> <ResourceId>k__BackingField;
    public Nullable`1<Guid> ResourceId { get; }
    public LogPersistentDiskProvider(Guid persistentDiskResourceId);
    [CompilerGeneratedAttribute]
public sealed virtual Nullable`1<Guid> get_ResourceId();
}
public static class Omnia.Fx.Utilities.MessageTopicUtils : object {
    public static Topic`1<TMessage> GetMessageTopic(string topicFullName);
    public static Topic`2<TMessage, TMetadata> GetMessageTopicWithMetadata(string topicFullName);
    public static string GetMessageTopicFullName(Topic`2<TMessage, TMetadata> topic);
    private static TTopic GetMessageTopic(string topicFullName, Func`3<string, string, TTopic> createTopicFunc);
}
public class Omnia.Fx.Utilities.PollingTimerCallback`1 : MulticastDelegate {
    public PollingTimerCallback`1(object object, IntPtr method);
    public virtual Task Invoke(IBaseTimerPollingState`1<T> timerState);
    public virtual IAsyncResult BeginInvoke(IBaseTimerPollingState`1<T> timerState, AsyncCallback callback, object object);
    public virtual Task EndInvoke(IAsyncResult result);
}
public class Omnia.Fx.Utilities.QueryFilterValidator : object {
    private static string AlwaysTrue;
    private static string AlwaysFalse;
    [CompilerGeneratedAttribute]
private List`1<QueryFilterValidator> <Validators>k__BackingField;
    [CompilerGeneratedAttribute]
private FilterLogicalOperator <LogicalOperator>k__BackingField;
    [CompilerGeneratedAttribute]
private FilterOperator <Operator>k__BackingField;
    [CompilerGeneratedAttribute]
private string <FieldName>k__BackingField;
    [CompilerGeneratedAttribute]
private IList`1<object> <FieldValues>k__BackingField;
    public List`1<QueryFilterValidator> Validators { get; public set; }
    public FilterLogicalOperator LogicalOperator { get; public set; }
    public FilterOperator Operator { get; public set; }
    public string FieldName { get; public set; }
    public IList`1<object> FieldValues { get; public set; }
    public QueryFilterValidator(QueryFilter queryFilter);
    public QueryFilterValidator(List`1<QueryFilter> queryFilters, FilterLogicalOperator wrapperLogicalOperator);
    [CompilerGeneratedAttribute]
public List`1<QueryFilterValidator> get_Validators();
    [CompilerGeneratedAttribute]
public void set_Validators(List`1<QueryFilterValidator> value);
    [CompilerGeneratedAttribute]
public FilterLogicalOperator get_LogicalOperator();
    [CompilerGeneratedAttribute]
public void set_LogicalOperator(FilterLogicalOperator value);
    [CompilerGeneratedAttribute]
public FilterOperator get_Operator();
    [CompilerGeneratedAttribute]
public void set_Operator(FilterOperator value);
    [CompilerGeneratedAttribute]
public string get_FieldName();
    [CompilerGeneratedAttribute]
public void set_FieldName(string value);
    [CompilerGeneratedAttribute]
public IList`1<object> get_FieldValues();
    [CompilerGeneratedAttribute]
public void set_FieldValues(IList`1<object> value);
    private void Init(QueryFilter queryFilter);
    public bool Validate(EnterprisePropertyDictionary enterprisePropertyDict, List`1<EnterprisePropertyDefinition> enterprisePropertyDefinitions);
    private string GetValidateExpression(QueryFilterValidator validator, bool appendLogicalOperator, PropertyStore propertyStore);
    private string GetLogicalOperatorString(FilterLogicalOperator filterLogicalOperator);
    private string ValidateSingleValueOperator(QueryFilterValidator validator, PropertyStore propertyStore);
    private bool ValidateSingleValueOperatorAsBoolean(QueryFilterValidator validator, PropertyStore propertyStore, bool requireValue);
    private bool ValidateSingleValueOperatorAsDateTime(QueryFilterValidator validator, PropertyStore propertyStore, DateTimeOffset requireValue);
    private bool ValidateSingleValueOperatorAsNumber(QueryFilterValidator validator, PropertyStore propertyStore, int requireValue);
    private bool ValidateSingleValueOperatorAsText(QueryFilterValidator validator, PropertyStore propertyStore, string requireValue);
    private string ValidateContainsOperator(QueryFilterValidator validator, PropertyStore propertyStore);
    private string GetValidateExpression(List`1<QueryFilterValidator> validators, PropertyStore propertyStore);
    private bool IsNumber(object value);
    private Identity ParseToIdentityId(object value);
}
public static class Omnia.Fx.Utilities.RSAUtils : object {
    public static RSAParameters GetParametersFromXmlString(RSA rsa, string xmlString);
    public static string ToXmlString(RSA rsa, bool includePrivateParameters);
}
public static class Omnia.Fx.Utilities.SecurityUtils : object {
    private static int Keysize;
    private static int DerivationIterations;
    public static string Encrypt(string plainText, string passPhrase);
    public static string Decrypt(string cipherText, string passPhrase);
    public static string GenerateSecret();
    public static string GenerateTokenKey();
    public static string GetOmniaGlobalRoleResource();
    public static string GetOmniaTenantRoleResource();
    public static string GenerateRandomString(bool useSHA512, Nullable`1<int> charLength);
    private static Byte[] Generate128BitsOfRandomEntropy();
    public static T DecryptSecureString(SecureString secureString, Func`2<string, T> action);
    public static string ComputeSha256Hash(string rawData);
    public static SecureString BuildSecureString(string rawStr);
    public static bool ValidatePassword(string rawPassword);
}
public static class Omnia.Fx.Utilities.TimerUtils : object {
    [AsyncStateMachineAttribute("Omnia.Fx.Utilities.TimerUtils/<PollingForActionCompletedAsync>d__0`1")]
public static ValueTask`1<T> PollingForActionCompletedAsync(PollingTimerCallback`1<T> timerCallback, int intervalSeconds, int timeoutSeconds, int delaySeconds);
}
public class Omnia.Fx.Utilities.TimezoneProvider : object {
    private static string DefaultTimezoneId;
    public static List`1<TimeZone> WindowTimeZones;
    private static TimezoneProvider();
    public static TimeZoneInfo GetTimeZoneInfo(int timeZoneId, ILogger logger);
    public static TimeZoneInfo GetTimeZoneInfo(string timeZoneDisplayName, ILogger logger);
    private static TimeZone TryGetTimeZone(string timeZoneDisplayName, ILogger logger);
    private static TimeZone GetDefaultTimezone();
    private static TimeZone GetTimeZone(string timeZoneDisplayName);
}
public class Omnia.Fx.Utilities.TokenUtils : object {
    public static bool IsExpired(long expiresOn);
    public static long GetIntDate(TimeSpan timespan);
    public static long GetIntDate(DateTime time);
    public static DateTime GetDateTime(long intDate);
    public static Nullable`1<TimeSpan> GetExpiredTimespan(long expiresOn);
    public static string CreateJwtTokenString(Dictionary`2<string, string> headers, Dictionary`2<string, string> payload, X509Certificate2 cert);
}
public static class Omnia.Fx.Utilities.UrlUtils : object {
    public static string EnsureTrailingSlash(string url);
    public static string AddOrUpdateQueryStringParameter(string uri, string param, string value);
    public static string BuildQuerystringParameters(NameValueCollection parameters, bool includeQuestionMark);
    public static Dictionary`2<string, string> GetQueryStringParams(string uri);
    public static string BuildRequestFormBody(NameValueCollection parameters);
    public static string GetUrlWithHostOnly(string absoluteUrl);
    public static string GetRelativeUrl(string absoluteUrl);
}
public static class Omnia.Fx.Utilities.VersionUtils : object {
    [AsyncStateMachineAttribute("Omnia.Fx.Utilities.VersionUtils/<UpgradeForSpecificVersionAsync>d__0")]
public static ValueTask`1<bool> UpgradeForSpecificVersionAsync(string fromVersion, string needUpgradeVersion, Func`1<Task> upgradeActionAsync);
    public static bool IsNewer(string version1, string version2);
}
public abstract class Omnia.Fx.Velcron.Components.VelcronAppComponent`2 : VelcronComponent`3<VelcronAppDefinition, TRenderResult, TStyling> {
    protected VelcronAppComponent`2(VelcronStyleParser`1<TStyling> styleParser, VelcronNode`2<TRenderResult, TStyling> vnode);
    public VelcronComponent`3<VelcronAppDefinition, TRenderResult, TStyling> Initialize(VelcronAppDefinition definition, VelcronServerRenderContext renderContext, bool rootApp);
}
public abstract class Omnia.Fx.Velcron.Components.VelcronComponent`3 : object {
    [CompilerGeneratedAttribute]
private VelcronDataParser <DataParser>k__BackingField;
    [CompilerGeneratedAttribute]
private VelcronStyleParser`1<TStyling> <StyleParser>k__BackingField;
    [CompilerGeneratedAttribute]
private VelcronNode`2<TRenderResult, TStyling> <VNode>k__BackingField;
    [CompilerGeneratedAttribute]
private TDefinition <Definition>k__BackingField;
    [CompilerGeneratedAttribute]
private VelcronServerRenderContext <RenderContext>k__BackingField;
    private List`1<Action> _initializationHooks;
    protected VelcronDataParser DataParser { get; }
    protected VelcronStyleParser`1<TStyling> StyleParser { get; }
    protected VelcronNode`2<TRenderResult, TStyling> VNode { get; }
    protected TDefinition Definition { get; private set; }
    protected VelcronServerRenderContext RenderContext { get; private set; }
    protected VelcronComponent`3(VelcronStyleParser`1<TStyling> styleParser, VelcronNode`2<TRenderResult, TStyling> vnode);
    [CompilerGeneratedAttribute]
protected VelcronDataParser get_DataParser();
    [CompilerGeneratedAttribute]
protected VelcronStyleParser`1<TStyling> get_StyleParser();
    [CompilerGeneratedAttribute]
protected VelcronNode`2<TRenderResult, TStyling> get_VNode();
    [CompilerGeneratedAttribute]
protected TDefinition get_Definition();
    [CompilerGeneratedAttribute]
private void set_Definition(TDefinition value);
    [CompilerGeneratedAttribute]
protected VelcronServerRenderContext get_RenderContext();
    [CompilerGeneratedAttribute]
private void set_RenderContext(VelcronServerRenderContext value);
    public VelcronComponent`3<TDefinition, TRenderResult, TStyling> Initialize(TDefinition definition, VelcronServerRenderContext renderContext);
    protected void AddInitializationHook(Action action);
    public abstract virtual TRenderResult Render();
}
public abstract class Omnia.Fx.Velcron.Components.VelcronFlexColumnComponent`2 : VelcronComponent`3<VelcronFlexColumnDefinition, TRenderResult, TStyling> {
    protected VelcronFlexColumnComponent`2(VelcronStyleParser`1<TStyling> styleParser, VelcronNode`2<TRenderResult, TStyling> vnode);
}
public abstract class Omnia.Fx.Velcron.Components.VelcronFlexComponent`2 : VelcronComponent`3<VelcronFlexDefinition, TRenderResult, TStyling> {
    protected VelcronFlexComponent`2(VelcronStyleParser`1<TStyling> styleParser, VelcronNode`2<TRenderResult, TStyling> vnode);
}
public abstract class Omnia.Fx.Velcron.Components.VelcronFlexRowComponent`2 : VelcronComponent`3<VelcronFlexRowDefinition, TRenderResult, TStyling> {
    protected VelcronFlexRowComponent`2(VelcronStyleParser`1<TStyling> styleParser, VelcronNode`2<TRenderResult, TStyling> vnode);
}
public abstract class Omnia.Fx.Velcron.Components.VelcronImageComponent`2 : VelcronComponent`3<VelcronImageDefinition, TRenderResult, TStyling> {
    protected VelcronImageComponent`2(VelcronStyleParser`1<TStyling> styleParser, VelcronNode`2<TRenderResult, TStyling> vnode);
}
public abstract class Omnia.Fx.Velcron.Components.VelcronTextComponent`2 : VelcronComponent`3<VelcronTextDefinition, TRenderResult, TStyling> {
    [CompilerGeneratedAttribute]
private VelcronTextComponentState <State>k__BackingField;
    protected VelcronTextComponentState State { get; }
    protected VelcronTextComponent`2(VelcronStyleParser`1<TStyling> styleParser, VelcronNode`2<TRenderResult, TStyling> vnode);
    [CompilerGeneratedAttribute]
protected VelcronTextComponentState get_State();
    private void BindProperties();
}
public class Omnia.Fx.Velcron.Components.VelcronTextComponentState : object {
    [CompilerGeneratedAttribute]
private string <Value>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ColorSchemaType>k__BackingField;
    [CompilerGeneratedAttribute]
private string <WordBreak>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Size>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<bool> <Toned>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<int> <LineClamp>k__BackingField;
    public string Value { get; public set; }
    public string ColorSchemaType { get; public set; }
    public string WordBreak { get; public set; }
    public string Size { get; public set; }
    public Nullable`1<bool> Toned { get; public set; }
    public Nullable`1<int> LineClamp { get; public set; }
    [CompilerGeneratedAttribute]
public string get_Value();
    [CompilerGeneratedAttribute]
public void set_Value(string value);
    [CompilerGeneratedAttribute]
public string get_ColorSchemaType();
    [CompilerGeneratedAttribute]
public void set_ColorSchemaType(string value);
    [CompilerGeneratedAttribute]
public string get_WordBreak();
    [CompilerGeneratedAttribute]
public void set_WordBreak(string value);
    [CompilerGeneratedAttribute]
public string get_Size();
    [CompilerGeneratedAttribute]
public void set_Size(string value);
    [CompilerGeneratedAttribute]
public Nullable`1<bool> get_Toned();
    [CompilerGeneratedAttribute]
public void set_Toned(Nullable`1<bool> value);
    [CompilerGeneratedAttribute]
public Nullable`1<int> get_LineClamp();
    [CompilerGeneratedAttribute]
public void set_LineClamp(Nullable`1<int> value);
}
public class Omnia.Fx.Velcron.FromVelcronAttribute : FromKeyedServicesAttribute {
    public FromVelcronAttribute(Guid key);
}
public abstract class Omnia.Fx.Velcron.Implementations.Html.Components.VelcronHtmlAppComponent : VelcronAppComponent`2<string, VelcronCssStyling> {
    protected VelcronHtmlAppComponent(VelcronStyleParser`1<VelcronCssStyling> styleParser, VelcronNode`2<string, VelcronCssStyling> vnode);
}
public abstract class Omnia.Fx.Velcron.Implementations.Html.Components.VelcronHtmlFlexColumnComponent : VelcronFlexColumnComponent`2<string, VelcronCssStyling> {
    protected VelcronHtmlFlexColumnComponent(VelcronStyleParser`1<VelcronCssStyling> styleParser, VelcronNode`2<string, VelcronCssStyling> vnode);
}
public abstract class Omnia.Fx.Velcron.Implementations.Html.Components.VelcronHtmlFlexComponent : VelcronFlexComponent`2<string, VelcronCssStyling> {
    protected VelcronHtmlFlexComponent(VelcronStyleParser`1<VelcronCssStyling> styleParser, VelcronNode`2<string, VelcronCssStyling> vnode);
}
public abstract class Omnia.Fx.Velcron.Implementations.Html.Components.VelcronHtmlFlexRowComponent : VelcronFlexRowComponent`2<string, VelcronCssStyling> {
    protected VelcronHtmlFlexRowComponent(VelcronStyleParser`1<VelcronCssStyling> styleParser, VelcronNode`2<string, VelcronCssStyling> vnode);
}
public abstract class Omnia.Fx.Velcron.Implementations.Html.Components.VelcronHtmlImageComponent : VelcronImageComponent`2<string, VelcronCssStyling> {
    protected VelcronHtmlImageComponent(VelcronStyleParser`1<VelcronCssStyling> styleParser, VelcronNode`2<string, VelcronCssStyling> vnode);
}
public abstract class Omnia.Fx.Velcron.Implementations.Html.Components.VelcronHtmlTextComponent : VelcronTextComponent`2<string, VelcronCssStyling> {
    protected VelcronHtmlTextComponent(VelcronStyleParser`1<VelcronCssStyling> styleParser, VelcronNode`2<string, VelcronCssStyling> vnode);
}
public class Omnia.Fx.Velcron.Implementations.Html.FromVelcronHtmlAttribute : FromVelcronAttribute {
    public static Guid Id;
    private static FromVelcronHtmlAttribute();
}
internal static class Omnia.Fx.Velcron.Implementations.Html.Models.VelcronCssProperties : object {
    public static string Width;
    public static string MinWidth;
    public static string MaxWidth;
    public static string Height;
    public static string MinHeight;
    public static string MaxHeight;
    public static string Position;
    public static string BoxSizing;
    public static string Display;
    public static string Color;
    public static string BackgroundColor;
    public static string TextWrap;
    public static string Overflow;
    public static string OverflowX;
    public static string OverflowY;
    public static string BorderTop;
    public static string BorderRight;
    public static string BorderBottom;
    public static string BorderLeft;
    public static string BorderWidth;
    public static string BorderTopLeftRadius;
    public static string BorderTopRightRadius;
    public static string BorderBottomRightRadius;
    public static string BorderBottomLeftRadius;
    public static string BorderTopStyle;
    public static string BorderTopColor;
    public static string BorderRightStyle;
    public static string BorderRightColor;
    public static string BorderBottomStyle;
    public static string BorderBottomColor;
    public static string BorderLeftStyle;
    public static string BorderLeftColor;
    public static string Margin;
    public static string MarginTop;
    public static string MarginRight;
    public static string MarginBottom;
    public static string MarginLeft;
    public static string Padding;
    public static string PaddingTop;
    public static string PaddingRight;
    public static string PaddingBottom;
    public static string PaddingLeft;
    public static string Flex;
    public static string FlexDirection;
    public static string FlexWrap;
    public static string FlexBasis;
    public static string FlexGrow;
    public static string JustifyContent;
    public static string AlignItems;
    public static string AlignSelf;
    public static string RowGap;
    public static string ColumnGap;
}
[IsReadOnlyAttribute]
internal class Omnia.Fx.Velcron.Implementations.Html.Models.VelcronCssPropertyValue : ValueType {
    [CompilerGeneratedAttribute]
private string <Value>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <Important>k__BackingField;
    public string Value { get; public set; }
    public bool Important { get; public set; }
    public VelcronCssPropertyValue(string Value);
    [CompilerGeneratedAttribute]
public string get_Value();
    [CompilerGeneratedAttribute]
public Void modreq(System.Runtime.CompilerServices.IsExternalInit) set_Value(string value);
    [CompilerGeneratedAttribute]
public bool get_Important();
    [CompilerGeneratedAttribute]
public Void modreq(System.Runtime.CompilerServices.IsExternalInit) set_Important(bool value);
    [CompilerGeneratedAttribute]
public virtual string ToString();
    [CompilerGeneratedAttribute]
private bool PrintMembers(StringBuilder builder);
    [CompilerGeneratedAttribute]
public static bool op_Inequality(VelcronCssPropertyValue left, VelcronCssPropertyValue right);
    [CompilerGeneratedAttribute]
public static bool op_Equality(VelcronCssPropertyValue left, VelcronCssPropertyValue right);
    [CompilerGeneratedAttribute]
public virtual int GetHashCode();
    [CompilerGeneratedAttribute]
public virtual bool Equals(object obj);
    [CompilerGeneratedAttribute]
public sealed virtual bool Equals(VelcronCssPropertyValue other);
    [CompilerGeneratedAttribute]
public void Deconstruct(String& Value);
}
public class Omnia.Fx.Velcron.Implementations.Html.Models.VelcronCssStyling : object {
    public static VelcronCssStyling Default;
    private Dictionary`2<string, VelcronCssPropertyValue> _styles;
    public VelcronCssStyling(VelcronStyling styling);
    private static VelcronCssStyling();
    public string ToInlineStyle();
    private VelcronCssStyling SetProperty(string property, string value, bool important);
    public VelcronCssStyling With(string name, string value, bool important);
    public VelcronCssStyling WithWidth(string value, bool important);
    public VelcronCssStyling WithMinWidth(string value, bool important);
    public VelcronCssStyling WithMaxWidth(string value, bool important);
    public VelcronCssStyling WithHeight(string value, bool important);
    public VelcronCssStyling WithMinHeight(string value, bool important);
    public VelcronCssStyling WithMaxHeight(string value, bool important);
    public VelcronCssStyling WithMargin(string value, bool important);
    public VelcronCssStyling WithMarginTop(string value, bool important);
    public VelcronCssStyling WithMarginRight(string value, bool important);
    public VelcronCssStyling WithMarginBottom(string value, bool important);
    public VelcronCssStyling WithMarginLeft(string value, bool important);
    public VelcronCssStyling WithPadding(string value, bool important);
    public VelcronCssStyling WithPaddingTop(string value, bool important);
    public VelcronCssStyling WithPaddingRight(string value, bool important);
    public VelcronCssStyling WithPaddingBottom(string value, bool important);
    public VelcronCssStyling WithPaddingLeft(string value, bool important);
    public VelcronCssStyling WithColor(string value, bool important);
    public VelcronCssStyling WithBackgroundColor(string value, bool important);
    public VelcronCssStyling WithTextWrap(string value, bool important);
    public VelcronCssStyling WithOverflow(string value, bool important);
    public VelcronCssStyling WithOverflowX(string value, bool important);
    public VelcronCssStyling WithOverflowY(string value, bool important);
    public VelcronCssStyling WithBorderTop(string value, bool important);
    public VelcronCssStyling WithBorderRight(string value, bool important);
    public VelcronCssStyling WithBorderBottom(string value, bool important);
    public VelcronCssStyling WithBorderLeft(string value, bool important);
    public VelcronCssStyling WithBorderWidth(string value, bool important);
    public VelcronCssStyling WithBorderTopLeftRadius(string value, bool important);
    public VelcronCssStyling WithBorderTopRightRadius(string value, bool important);
    public VelcronCssStyling WithBorderBottomRightRadius(string value, bool important);
    public VelcronCssStyling WithBorderBottomLeftRadius(string value, bool important);
    public VelcronCssStyling WithBorderTopStyle(string value, bool important);
    public VelcronCssStyling WithBorderTopColor(string value, bool important);
    public VelcronCssStyling WithBorderRightStyle(string value, bool important);
    public VelcronCssStyling WithBorderRightColor(string value, bool important);
    public VelcronCssStyling WithBorderBottomStyle(string value, bool important);
    public VelcronCssStyling WithBorderBottomColor(string value, bool important);
    public VelcronCssStyling WithBorderLeftStyle(string value, bool important);
    public VelcronCssStyling WithBorderLeftColor(string value, bool important);
    public VelcronCssStyling WithBoxSizing(string value, bool important);
    public VelcronCssStyling WithPosition(string value, bool important);
    public VelcronCssStyling WithDisplay(string value, bool important);
    public VelcronCssStyling WithFlex(string value, bool important);
    public VelcronCssStyling WithFlexDirection(string value, bool important);
    public VelcronCssStyling WithFlexWrap(string value, bool important);
    public VelcronCssStyling WithFlexBasis(string value, bool important);
    public VelcronCssStyling WithFlexGrow(string value, bool important);
    public VelcronCssStyling WithJustifyContent(string value, bool important);
    public VelcronCssStyling WithAlignItems(string value, bool important);
    public VelcronCssStyling WithAlignSelf(string value, bool important);
    public VelcronCssStyling WithRowGap(string value, bool important);
    public VelcronCssStyling WithColumnGap(string value, bool important);
}
public class Omnia.Fx.Velcron.Implementations.Html.Parsers.VelcronCssStyleParser : VelcronStyleParser`1<VelcronCssStyling> {
    public VelcronCssStyleParser(VelcronStyleProvider`1<VelcronCssStyling> styleProvider, VelcronUnitProvider unitProvider);
    public virtual VelcronCssStyling Create(VelcronDefinition definition, VelcronServerRenderContext renderContext);
    private void StyleText(VelcronTextDefinition textDefinition, VelcronServerRenderContext renderContext, VelcronCssStyling styleBase);
    private void StyleFlex(VelcronFlexDefinition flexDefinition, VelcronServerRenderContext renderContext, VelcronCssStyling styleBase);
    private void StyleRow(VelcronFlexRowDefinition rowDefinition, VelcronServerRenderContext renderContext, VelcronCssStyling styleBase);
    private void StyleColumn(VelcronFlexColumnDefinition columnDefinition, VelcronServerRenderContext renderContext, VelcronCssStyling styleBase);
    private void InsertBackgroundColor(VelcronCssStyling styleBase, IVelcronColorStyling color, VelcronServerRenderContext renderContext);
    private void InsertBorderStyles(VelcronCssStyling styleBase, VelcronBorder borderSettings, VelcronServerRenderContext renderContext);
    private void InsertBorderRadiusStyles(VelcronCssStyling styleBase, VelcronDimensions settings);
    private void ApplyOverflow(IVelcronDefinitionHasOverflow definition, VelcronServerRenderContext renderContext, VelcronCssStyling styleBase);
    private void ApplySpacingStyles(VelcronBindableProperty`1<T> spacing, VelcronServerRenderContext renderContext, VelcronCssStyling styleBase, SpacingDefinition spacingDef, string styleType, Action`1<T> objectIsDatabound, Dictionary`2<string, string> additionalPropsToDataBind);
}
public class Omnia.Fx.Velcron.Implementations.Html.Providers.VelcronCssStyleProvider : VelcronStyleProvider`1<VelcronCssStyling> {
    public virtual VelcronCssStyling Apply(VelcronCssStyling styleBase, VelcronDefinition definition, VelcronServerRenderContext renderContext);
}
public class Omnia.Fx.Velcron.Implementations.Html.Providers.VelcronCssUnitProvider : VelcronUnitProvider {
    public virtual string FormatDimension(string value);
    public virtual string FormatDimension(int value);
    public virtual string FormatDimension(double value);
    public virtual string FormatFontSize(string value);
    public virtual string FormatFontSize(int value);
    public virtual string FormatFontSize(double value);
    public virtual int SafeGetNumber(string value);
}
public class Omnia.Fx.Velcron.Implementations.Html.VelcronHtmlNode : VelcronNode`2<string, VelcronCssStyling> {
    public VelcronHtmlNode(IServiceProvider serviceProvider);
    public virtual string Create(bool condition, Func`1<string> func);
    public virtual string Create(IEnumerable`1<T> items, Func`2<T, string> func);
    protected virtual string CreateUnknownComponent(T definition, VelcronServerRenderContext renderContext);
}
public abstract class Omnia.Fx.Velcron.Implementations.Html.VelcronHtmlRenderer : VelcronRenderer`2<string, VelcronCssStyling> {
    protected VelcronHtmlRenderer(VelcronStyleParser`1<VelcronCssStyling> styleParser, VelcronNode`2<string, VelcronCssStyling> vnode);
}
internal class Omnia.Fx.Velcron.Implementations.HtmlMail.Components.VelcronHtmlMailAppComponent : VelcronHtmlAppComponent {
    public VelcronHtmlMailAppComponent(VelcronStyleParser`1<VelcronCssStyling> styleParser, VelcronNode`2<string, VelcronCssStyling> vnode);
    public virtual string Render();
    [CompilerGeneratedAttribute]
private string <Render>b__1_0(VelcronDefinition item);
}
internal class Omnia.Fx.Velcron.Implementations.HtmlMail.Components.VelcronHtmlMailFlexColumnComponent : VelcronHtmlFlexColumnComponent {
    public VelcronHtmlMailFlexColumnComponent(VelcronStyleParser`1<VelcronCssStyling> styleParser, VelcronNode`2<string, VelcronCssStyling> vnode);
    public virtual string Render();
    [CompilerGeneratedAttribute]
private string <Render>b__1_0(VelcronDefinition item);
}
internal class Omnia.Fx.Velcron.Implementations.HtmlMail.Components.VelcronHtmlMailFlexComponent : VelcronHtmlFlexComponent {
    public VelcronHtmlMailFlexComponent(VelcronStyleParser`1<VelcronCssStyling> styleParser, VelcronNode`2<string, VelcronCssStyling> vnode);
    public virtual string Render();
    [CompilerGeneratedAttribute]
private string <Render>b__1_0(VelcronDefinition item);
}
internal class Omnia.Fx.Velcron.Implementations.HtmlMail.Components.VelcronHtmlMailFlexRowComponent : VelcronHtmlFlexRowComponent {
    public VelcronHtmlMailFlexRowComponent(VelcronStyleParser`1<VelcronCssStyling> styleParser, VelcronNode`2<string, VelcronCssStyling> vnode);
    public virtual string Render();
    [CompilerGeneratedAttribute]
private string <Render>b__1_0(VelcronDefinition item);
}
internal class Omnia.Fx.Velcron.Implementations.HtmlMail.Components.VelcronHtmlMailImageComponent : VelcronHtmlImageComponent {
    public VelcronHtmlMailImageComponent(VelcronStyleParser`1<VelcronCssStyling> styleParser, VelcronNode`2<string, VelcronCssStyling> vnode);
    public virtual string Render();
}
internal class Omnia.Fx.Velcron.Implementations.HtmlMail.Components.VelcronHtmlMailTextComponent : VelcronHtmlTextComponent {
    public VelcronHtmlMailTextComponent(VelcronStyleParser`1<VelcronCssStyling> styleParser, VelcronNode`2<string, VelcronCssStyling> vnode);
    public virtual string Render();
}
internal class Omnia.Fx.Velcron.Implementations.HtmlMail.FromVelcronHtmlMailAttribute : FromVelcronAttribute {
    public static Guid Id;
    private static FromVelcronHtmlMailAttribute();
}
internal class Omnia.Fx.Velcron.Implementations.HtmlMail.VelcronHtmlMailRenderer : VelcronHtmlRenderer {
    protected Guid RendererImplementationKey { get; }
    public VelcronHtmlMailRenderer(VelcronStyleParser`1<VelcronCssStyling> styleParser, VelcronNode`2<string, VelcronCssStyling> vnode);
    protected virtual Guid get_RendererImplementationKey();
    public virtual string Render();
    [CompilerGeneratedAttribute]
private string <Render>b__3_0();
}
public class Omnia.Fx.Velcron.Models.VelcronColorSchema : object {
    [CompilerGeneratedAttribute]
private Guid <Id>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ColorSchemaType>k__BackingField;
    [CompilerGeneratedAttribute]
private ColorDefinition <Base>k__BackingField;
    [CompilerGeneratedAttribute]
private ColorDefinition <OnBase>k__BackingField;
    [CompilerGeneratedAttribute]
private ColorDefinition <Container>k__BackingField;
    [CompilerGeneratedAttribute]
private ColorDefinition <OnContainer>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsContainer>k__BackingField;
    [CompilerGeneratedAttribute]
private VelcronTheming <Theming>k__BackingField;
    public Guid Id { get; private set; }
    public string Name { get; private set; }
    public string ColorSchemaType { get; private set; }
    public ColorDefinition Base { get; private set; }
    public ColorDefinition OnBase { get; private set; }
    public ColorDefinition Container { get; private set; }
    public ColorDefinition OnContainer { get; private set; }
    public bool IsContainer { get; private set; }
    public VelcronTheming Theming { get; private set; }
    public VelcronColorSchema(VelcronTheming theming, string colorSchemaType, bool container);
    [CompilerGeneratedAttribute]
public Guid get_Id();
    [CompilerGeneratedAttribute]
private void set_Id(Guid value);
    [CompilerGeneratedAttribute]
public string get_Name();
    [CompilerGeneratedAttribute]
private void set_Name(string value);
    [CompilerGeneratedAttribute]
public string get_ColorSchemaType();
    [CompilerGeneratedAttribute]
private void set_ColorSchemaType(string value);
    [CompilerGeneratedAttribute]
public ColorDefinition get_Base();
    [CompilerGeneratedAttribute]
private void set_Base(ColorDefinition value);
    [CompilerGeneratedAttribute]
public ColorDefinition get_OnBase();
    [CompilerGeneratedAttribute]
private void set_OnBase(ColorDefinition value);
    [CompilerGeneratedAttribute]
public ColorDefinition get_Container();
    [CompilerGeneratedAttribute]
private void set_Container(ColorDefinition value);
    [CompilerGeneratedAttribute]
public ColorDefinition get_OnContainer();
    [CompilerGeneratedAttribute]
private void set_OnContainer(ColorDefinition value);
    [CompilerGeneratedAttribute]
public bool get_IsContainer();
    [CompilerGeneratedAttribute]
private void set_IsContainer(bool value);
    [CompilerGeneratedAttribute]
public VelcronTheming get_Theming();
    [CompilerGeneratedAttribute]
private void set_Theming(VelcronTheming value);
    public ColorDefinition GetColor(string colorType);
    private void SetColorSchema(string colorSchemaType, bool container);
}
public class Omnia.Fx.Velcron.Models.VelcronRenderContext : object {
    [CompilerGeneratedAttribute]
private object <RootContext>k__BackingField;
    [CompilerGeneratedAttribute]
private object <CurrentContext>k__BackingField;
    [CompilerGeneratedAttribute]
private VelcronAppDefinition <BaseDefinition>k__BackingField;
    [CompilerGeneratedAttribute]
private VelcronTheming <Theming>k__BackingField;
    [CompilerGeneratedAttribute]
private VelcronColorSchema <Colors>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <SubApp>k__BackingField;
    public object RootContext { get; public set; }
    public object CurrentContext { get; public set; }
    public VelcronAppDefinition BaseDefinition { get; public set; }
    public VelcronTheming Theming { get; public set; }
    public VelcronColorSchema Colors { get; public set; }
    public bool SubApp { get; public set; }
    [CompilerGeneratedAttribute]
public object get_RootContext();
    [CompilerGeneratedAttribute]
public Void modreq(System.Runtime.CompilerServices.IsExternalInit) set_RootContext(object value);
    [CompilerGeneratedAttribute]
public object get_CurrentContext();
    [CompilerGeneratedAttribute]
public Void modreq(System.Runtime.CompilerServices.IsExternalInit) set_CurrentContext(object value);
    [CompilerGeneratedAttribute]
public VelcronAppDefinition get_BaseDefinition();
    [CompilerGeneratedAttribute]
public Void modreq(System.Runtime.CompilerServices.IsExternalInit) set_BaseDefinition(VelcronAppDefinition value);
    [CompilerGeneratedAttribute]
public VelcronTheming get_Theming();
    [CompilerGeneratedAttribute]
public Void modreq(System.Runtime.CompilerServices.IsExternalInit) set_Theming(VelcronTheming value);
    [CompilerGeneratedAttribute]
public VelcronColorSchema get_Colors();
    [CompilerGeneratedAttribute]
public Void modreq(System.Runtime.CompilerServices.IsExternalInit) set_Colors(VelcronColorSchema value);
    [CompilerGeneratedAttribute]
public bool get_SubApp();
    [CompilerGeneratedAttribute]
public Void modreq(System.Runtime.CompilerServices.IsExternalInit) set_SubApp(bool value);
}
public class Omnia.Fx.Velcron.Models.VelcronServerRenderContext : VelcronRenderContext {
    [CompilerGeneratedAttribute]
private Guid <RendererImplementationKey>k__BackingField;
    public Guid RendererImplementationKey { get; public set; }
    [CompilerGeneratedAttribute]
public Guid get_RendererImplementationKey();
    [CompilerGeneratedAttribute]
public Void modreq(System.Runtime.CompilerServices.IsExternalInit) set_RendererImplementationKey(Guid value);
}
public class Omnia.Fx.Velcron.Models.VelcronTheming : object {
    [CompilerGeneratedAttribute]
private ThemeDefinitionV2 <CurrentTheme>k__BackingField;
    public ThemeDefinitionV2 CurrentTheme { get; private set; }
    public VelcronTheming(ThemeDefinitionV2 theme);
    [CompilerGeneratedAttribute]
public ThemeDefinitionV2 get_CurrentTheme();
    [CompilerGeneratedAttribute]
private void set_CurrentTheme(ThemeDefinitionV2 value);
    public void SetTheme(ThemeDefinitionV2 newTheme);
    public SpacingDefinition GetSpacing(VelcronDefinition definition);
    public ColorSchema GetColorSchema(string colorSchemaType);
}
public class Omnia.Fx.Velcron.Parsers.VelcronDataParser : object {
    public static VelcronDataParser Instance;
    private static JsonSerializerOptions JsonSerializerOptions;
    private static VelcronDataParser();
    public T DataBind(VelcronServerRenderContext renderContext, VelcronBindableProperty`1<T> bindTo);
    public Nullable`1<T> DataBind(VelcronServerRenderContext renderContext, VelcronBindablePrimitiveProperty`1<T> bindTo);
    public string DataBind(VelcronServerRenderContext renderContext, string bindTo);
    private static VelcronWrapProperty`1<T> DataBindInternal(VelcronServerRenderContext renderContext, string bindTo);
    public bool IsBindable(VelcronBindableProperty`1<T> bindable);
    private static List`1<string> GetTokens(string template, bool removeBrackets);
    private static T GetOrSet(VelcronServerRenderContext renderContext, string path);
    private static T GetOrSetObjectByPath(object object, string path);
    private static T UnwrapObject(object object);
    private static object UnwrapJsonElement(JsonElement element);
}
public abstract class Omnia.Fx.Velcron.Parsers.VelcronStyleParser`1 : object {
    [CompilerGeneratedAttribute]
private VelcronDataParser <DataParser>k__BackingField;
    [CompilerGeneratedAttribute]
private VelcronStyleProvider`1<TStyling> <StyleProvider>k__BackingField;
    [CompilerGeneratedAttribute]
private VelcronUnitProvider <UnitProvider>k__BackingField;
    protected VelcronDataParser DataParser { get; }
    protected VelcronStyleProvider`1<TStyling> StyleProvider { get; }
    protected VelcronUnitProvider UnitProvider { get; }
    protected VelcronStyleParser`1(VelcronStyleProvider`1<TStyling> styleProvider, VelcronUnitProvider unitProvider);
    [CompilerGeneratedAttribute]
protected VelcronDataParser get_DataParser();
    [CompilerGeneratedAttribute]
protected VelcronStyleProvider`1<TStyling> get_StyleProvider();
    [CompilerGeneratedAttribute]
protected VelcronUnitProvider get_UnitProvider();
    public abstract virtual TStyling Create(VelcronDefinition definition, VelcronServerRenderContext renderContext);
}
public abstract class Omnia.Fx.Velcron.Providers.VelcronStyleProvider`1 : object {
    public abstract virtual TStyling Apply(TStyling styleBase, VelcronDefinition definition, VelcronServerRenderContext renderContext);
}
public abstract class Omnia.Fx.Velcron.Providers.VelcronUnitProvider : object {
    public abstract virtual string FormatFontSize(string value);
    public abstract virtual string FormatFontSize(int value);
    public abstract virtual string FormatFontSize(double value);
    public abstract virtual string FormatDimension(string value);
    public abstract virtual string FormatDimension(int value);
    public abstract virtual string FormatDimension(double value);
    public abstract virtual int SafeGetNumber(string value);
}
public abstract class Omnia.Fx.Velcron.VelcronNode`2 : object {
    [CompilerGeneratedAttribute]
private IServiceProvider <ServiceProvider>k__BackingField;
    protected IServiceProvider ServiceProvider { get; }
    protected VelcronNode`2(IServiceProvider serviceProvider);
    [CompilerGeneratedAttribute]
protected IServiceProvider get_ServiceProvider();
    public abstract virtual TRenderResult Create(bool condition, Func`1<TRenderResult> func);
    public abstract virtual TRenderResult Create(IEnumerable`1<T> items, Func`2<T, TRenderResult> func);
    protected abstract virtual TRenderResult CreateUnknownComponent(T definition, VelcronServerRenderContext renderContext);
    public TRenderResult Create(T definition, VelcronServerRenderContext renderContext);
    public TRenderResult CreateApp(VelcronAppDefinition definition, VelcronServerRenderContext renderContext, bool rootApp);
    private TRenderResult CreateComponent(TDefinition concretedDefinition, VelcronServerRenderContext renderContext);
}
public class Omnia.Fx.Velcron.VelcronOptionBuilder : object {
    [CompilerGeneratedAttribute]
private IServiceCollection <Services>P;
    public VelcronOptionBuilder(IServiceCollection Services);
    public VelcronOptionBuilder AddRendering(Guid key, Action`1<VelcronRendererOptionBuilder`2<TRenderResult, TStyling>> options);
    public VelcronOptionBuilder AddRenderingBasedOnHtml(Guid key, Action`1<VelcronRendererOptionBuilder`2<string, VelcronCssStyling>> options);
    public VelcronOptionBuilder AddHtmlMailRendering();
}
public abstract class Omnia.Fx.Velcron.VelcronRenderer`2 : object {
    [CompilerGeneratedAttribute]
private VelcronAppDefinition <Definition>k__BackingField;
    [CompilerGeneratedAttribute]
private VelcronServerRenderContext <RenderContext>k__BackingField;
    [CompilerGeneratedAttribute]
private VelcronDataParser <DataParser>k__BackingField;
    [CompilerGeneratedAttribute]
private VelcronStyleParser`1<TStyling> <StyleParser>k__BackingField;
    [CompilerGeneratedAttribute]
private VelcronNode`2<TRenderResult, TStyling> <VNode>k__BackingField;
    protected Guid RendererImplementationKey { get; }
    protected VelcronAppDefinition Definition { get; private set; }
    protected VelcronServerRenderContext RenderContext { get; private set; }
    protected VelcronDataParser DataParser { get; }
    protected VelcronStyleParser`1<TStyling> StyleParser { get; }
    protected VelcronNode`2<TRenderResult, TStyling> VNode { get; }
    public VelcronRenderer`2(VelcronStyleParser`1<TStyling> styleParser, VelcronNode`2<TRenderResult, TStyling> vnode);
    protected abstract virtual Guid get_RendererImplementationKey();
    [CompilerGeneratedAttribute]
protected VelcronAppDefinition get_Definition();
    [CompilerGeneratedAttribute]
private void set_Definition(VelcronAppDefinition value);
    [CompilerGeneratedAttribute]
protected VelcronServerRenderContext get_RenderContext();
    [CompilerGeneratedAttribute]
private void set_RenderContext(VelcronServerRenderContext value);
    [CompilerGeneratedAttribute]
protected VelcronDataParser get_DataParser();
    [CompilerGeneratedAttribute]
protected VelcronStyleParser`1<TStyling> get_StyleParser();
    [CompilerGeneratedAttribute]
protected VelcronNode`2<TRenderResult, TStyling> get_VNode();
    public VelcronRenderer`2<TRenderResult, TStyling> Initialize(VelcronAppDefinition definition, ThemeDefinitionV2 theming, string colorSchemaType, bool container);
    public abstract virtual TRenderResult Render();
}
public class Omnia.Fx.Velcron.VelcronRendererOptionBuilder`2 : object {
    [CompilerGeneratedAttribute]
private IServiceCollection <Services>P;
    [CompilerGeneratedAttribute]
private Guid <Key>P;
    public VelcronRendererOptionBuilder`2(IServiceCollection Services, Guid Key);
    public VelcronRendererOptionBuilder`2<TRenderResult, TStyling> AddUnitProvider();
    public VelcronRendererOptionBuilder`2<TRenderResult, TStyling> AddStyleProvider();
    public VelcronRendererOptionBuilder`2<TRenderResult, TStyling> AddStyleParser();
    public VelcronRendererOptionBuilder`2<TRenderResult, TStyling> AddVirtualNode();
    public VelcronRendererOptionBuilder`2<TRenderResult, TStyling> AddRenderer();
    public VelcronRendererOptionBuilder`2<TRenderResult, TStyling> AddAppComponent();
    public VelcronRendererOptionBuilder`2<TRenderResult, TStyling> AddFlexComponentt();
    public VelcronRendererOptionBuilder`2<TRenderResult, TStyling> AddFlexRowComponent();
    public VelcronRendererOptionBuilder`2<TRenderResult, TStyling> AddFlexColumnComponent();
    public VelcronRendererOptionBuilder`2<TRenderResult, TStyling> AddImageComponent();
    public VelcronRendererOptionBuilder`2<TRenderResult, TStyling> AddTextComponent();
}
[ExtensionAttribute]
public static class Omnia.Fx.Velcron.VelcronServiceCollectionExtensions : object {
    [ExtensionAttribute]
public static IServiceCollection AddVelcron(IServiceCollection services, Action`1<VelcronOptionBuilder> options);
    private static void SetDefaultImplementations(VelcronOptionBuilder builder);
}
public class Omnia.Fx.VersionedLayouts.HttpContract : object {
}
public interface Omnia.Fx.VersionedLayouts.IVersionedLayoutService {
    public abstract virtual ValueTask`1<IList`1<VersionedLayout>> GetLayoutsByAppIdAndDefinitionAsync(Guid appInstanceId, VersionedLayoutDefinition layoutDefinition);
    public abstract virtual ValueTask`1<IList`1<VersionedLayout>> GetLayoutsByAppIdAsync(Guid appInstanceId);
    public abstract virtual ValueTask`1<IList`1<VersionedLayout>> GetLayoutsByProfileAndTypeIdAsync(Guid businessProfileId, Guid layoutTypeId);
    public abstract virtual ValueTask`1<IList`1<VersionedLayout>> GetLayoutsByTypeIdsAsync(IList`1<Guid> layoutTypeIds);
    public abstract virtual ValueTask`1<IList`1<VersionedLayout>> GetLayoutsByIdsAsync(IList`1<VersionedLayoutId> versionedLayoutIds);
    public abstract virtual ValueTask`1<IList`1<VersionedLayout>> GetTenantScopedLayoutsAsync();
    public abstract virtual ValueTask`1<IList`1<VersionedLayout>> GetTenantScopedLayoutsByDefinitionAsync(VersionedLayoutDefinition layoutDefinition);
    public abstract virtual ValueTask`1<VersionedLayout> GetLayoutByIdAsync(VersionedLayoutId id);
    public abstract virtual ValueTask`1<VersionedLayout> GetLayoutByIdentifierAsync(IVersionedDataIdentifier identifier);
    public abstract virtual ValueTask`1<IVersionedData`1<VersionedLayoutDefinition>> GetLayoutDefinitionVersion(int versionId);
    public abstract virtual ValueTask`1<ValueTuple`4<IVersionReference, IVersionReference, IVersionReference, IVersionReference>> GetLayoutDefinitionLatestRef(IVersionedDataIdentifier layoutDataIdentifider);
    public abstract virtual ValueTask`1<ValueTuple`2<VersionedLayout, ICheckedoutVersionedData`1<VersionedLayoutDefinition>>> CreateAppScopedLayoutAsync(Guid appInstanceId, string urlSegment, VersionedLayoutDefinition layoutDefinition, VersionedLayoutId parentLayoutId);
    public abstract virtual ValueTask`1<ValueTuple`2<VersionedLayout, ICheckedoutVersionedData`1<VersionedLayoutDefinition>>> CreateBusinessProfileScopedLayoutAsync(Guid businessProfileId, string urlSegment, VersionedLayoutDefinition layoutDefinition, VersionedLayoutId parentLayoutId);
    public abstract virtual ValueTask`1<ValueTuple`2<VersionedLayout, ICheckedoutVersionedData`1<VersionedLayoutDefinition>>> CreateTenantScopedLayoutAsync(string urlSegment, VersionedLayoutDefinition layoutDefinition, VersionedLayoutId parentLayoutId);
    public abstract virtual ValueTask`1<ValueTuple`3<VersionedLayout, VersionedAlternateLayout, ICheckedoutVersionedData`1<VersionedLayoutDefinition>>> CreateAlternateLayoutAsync(VersionedLayout versionedLayout, string title, VersionedLayoutDefinition alternateLayoutDefinition);
    public abstract virtual ValueTask`1<VersionedLayout> UpdateLayoutAsync(VersionedLayout versionedLayout);
    public abstract virtual ValueTask`1<VersionedLayout> UpdateAlternateLayoutAsync(VersionedAlternateLayout alternateLayout);
    public abstract virtual ValueTask DeleteLayoutAsync(VersionedLayout versionedLayout);
    public abstract virtual ValueTask`1<VersionedLayout> DeleteAlternateLayoutAsync(VersionedAlternateLayout appInstanceAlternateLayout);
    public abstract virtual ValueTask`1<ValueTuple`2<VersionedLayout, IVersionedData`1<VersionedLayoutDefinition>>> PublishLayoutDefinitionAsync(IVersionedData`1<VersionedLayoutDefinition> versionToPublish);
    public abstract virtual ValueTask`1<ICheckedoutVersionedData`1<VersionedLayoutDefinition>> UpdateLayoutDefinitionAsync(ICheckedoutVersionedData`1<VersionedLayoutDefinition> versionToUpdate);
    public abstract virtual ValueTask`1<IVersionedData`1<VersionedLayoutDefinition>> CheckInLayoutDefinitionAsync(ICheckedoutVersionedData`1<VersionedLayoutDefinition> versionToCheckIn);
    public abstract virtual ValueTask`1<ICheckedoutVersionedData`1<VersionedLayoutDefinition>> CheckOutLayoutDefinitionAsync(IVersionedDataIdentifier layoutDataIdentifider, bool takeOver);
    public abstract virtual ValueTask`1<IVersionedData`1<VersionedLayoutDefinition>> DiscardLayoutDefinitionAsync(ICheckedoutVersionedData`1<VersionedLayoutDefinition> versionToDiscard);
    public abstract virtual ValueTask`1<IList`1<IVersionInformation>> GetLayoutDefinitionVersionInformationAsync(IVersionedDataIdentifier layoutDataIdentifier);
    public abstract virtual ValueTask SetDisplayBreakpointAlternateLayoutMappingAsync(VersionedLayoutId versionedLayoutId, DisplayBreakpointVersionedAlternateLayoutMapping mapping);
    public abstract virtual ValueTask`1<IDictionary`2<VersionedLayoutId, DisplayBreakpointVersionedAlternateLayoutMapping>> GetDisplayBreakpointAlternateLayoutMappingAsync(VersionedLayoutId[] versionedLayoutIds);
    public abstract virtual ValueTask`1<bool> ValidateLayoutUrlAsync(AppScopedVersionedLayoutUrlValidationRequest request);
    public abstract virtual ValueTask SetDefaultAppLayoutInPublicListingAsync(VersionedLayoutId versionedLayoutId, Guid appInstanceId);
}
internal class Omnia.Fx.VersionedLayouts.VersionedLayoutService : object {
    [CompilerGeneratedAttribute]
private VersionedLayoutHttpClientService <VersionedLayoutHttpClient>k__BackingField;
    [CompilerGeneratedAttribute]
private IOmniaCacheWithKeyHelper`1<IOmniaMemoryCache> <CacheHelper>k__BackingField;
    private VersionedLayoutHttpClientService VersionedLayoutHttpClient { get; }
    private IOmniaCacheWithKeyHelper`1<IOmniaMemoryCache> CacheHelper { get; }
    public VersionedLayoutService(IConfiguredHttpClient`1<OmniaServiceApi> omniaService, IOmniaMemoryCache omniaMemoryCache);
    [CompilerGeneratedAttribute]
private VersionedLayoutHttpClientService get_VersionedLayoutHttpClient();
    [CompilerGeneratedAttribute]
private IOmniaCacheWithKeyHelper`1<IOmniaMemoryCache> get_CacheHelper();
    [AsyncStateMachineAttribute("Omnia.Fx.VersionedLayouts.VersionedLayoutService/<CheckInLayoutDefinitionAsync>d__8")]
public sealed virtual ValueTask`1<IVersionedData`1<VersionedLayoutDefinition>> CheckInLayoutDefinitionAsync(ICheckedoutVersionedData`1<VersionedLayoutDefinition> versionToCheckIn);
    [AsyncStateMachineAttribute("Omnia.Fx.VersionedLayouts.VersionedLayoutService/<CheckOutLayoutDefinitionAsync>d__9")]
public sealed virtual ValueTask`1<ICheckedoutVersionedData`1<VersionedLayoutDefinition>> CheckOutLayoutDefinitionAsync(IVersionedDataIdentifier layoutDataIdentifier, bool takeOver);
    [AsyncStateMachineAttribute("Omnia.Fx.VersionedLayouts.VersionedLayoutService/<CreateAppScopedLayoutAsync>d__10")]
public sealed virtual ValueTask`1<ValueTuple`2<VersionedLayout, ICheckedoutVersionedData`1<VersionedLayoutDefinition>>> CreateAppScopedLayoutAsync(Guid appInstanceId, string urlSegment, VersionedLayoutDefinition layoutDefinition, VersionedLayoutId parentLayoutId);
    [AsyncStateMachineAttribute("Omnia.Fx.VersionedLayouts.VersionedLayoutService/<CreateBusinessProfileScopedLayoutAsync>d__11")]
public sealed virtual ValueTask`1<ValueTuple`2<VersionedLayout, ICheckedoutVersionedData`1<VersionedLayoutDefinition>>> CreateBusinessProfileScopedLayoutAsync(Guid businessProfileId, string urlSegment, VersionedLayoutDefinition layoutDefinition, VersionedLayoutId parentLayoutId);
    [AsyncStateMachineAttribute("Omnia.Fx.VersionedLayouts.VersionedLayoutService/<CreateTenantScopedLayoutAsync>d__12")]
public sealed virtual ValueTask`1<ValueTuple`2<VersionedLayout, ICheckedoutVersionedData`1<VersionedLayoutDefinition>>> CreateTenantScopedLayoutAsync(string urlSegment, VersionedLayoutDefinition layoutDefinition, VersionedLayoutId parentLayoutId);
    [AsyncStateMachineAttribute("Omnia.Fx.VersionedLayouts.VersionedLayoutService/<CreateAlternateLayoutAsync>d__13")]
public sealed virtual ValueTask`1<ValueTuple`3<VersionedLayout, VersionedAlternateLayout, ICheckedoutVersionedData`1<VersionedLayoutDefinition>>> CreateAlternateLayoutAsync(VersionedLayout versionedLayout, string title, VersionedLayoutDefinition alternateLayoutDefinition);
    [AsyncStateMachineAttribute("Omnia.Fx.VersionedLayouts.VersionedLayoutService/<DeleteLayoutAsync>d__14")]
public sealed virtual ValueTask DeleteLayoutAsync(VersionedLayout versionedLayout);
    [AsyncStateMachineAttribute("Omnia.Fx.VersionedLayouts.VersionedLayoutService/<DeleteAlternateLayoutAsync>d__15")]
public sealed virtual ValueTask`1<VersionedLayout> DeleteAlternateLayoutAsync(VersionedAlternateLayout versionedAlternateLayout);
    [AsyncStateMachineAttribute("Omnia.Fx.VersionedLayouts.VersionedLayoutService/<DiscardLayoutDefinitionAsync>d__16")]
public sealed virtual ValueTask`1<IVersionedData`1<VersionedLayoutDefinition>> DiscardLayoutDefinitionAsync(ICheckedoutVersionedData`1<VersionedLayoutDefinition> versionToDiscard);
    [AsyncStateMachineAttribute("Omnia.Fx.VersionedLayouts.VersionedLayoutService/<GetLayoutByIdAsync>d__17")]
public sealed virtual ValueTask`1<VersionedLayout> GetLayoutByIdAsync(VersionedLayoutId id);
    [AsyncStateMachineAttribute("Omnia.Fx.VersionedLayouts.VersionedLayoutService/<GetLayoutByIdentifierAsync>d__18")]
public sealed virtual ValueTask`1<VersionedLayout> GetLayoutByIdentifierAsync(IVersionedDataIdentifier identifier);
    [AsyncStateMachineAttribute("Omnia.Fx.VersionedLayouts.VersionedLayoutService/<GetLayoutDefinitionLatestRef>d__19")]
public sealed virtual ValueTask`1<ValueTuple`4<IVersionReference, IVersionReference, IVersionReference, IVersionReference>> GetLayoutDefinitionLatestRef(IVersionedDataIdentifier layoutDataIdentifier);
    [AsyncStateMachineAttribute("Omnia.Fx.VersionedLayouts.VersionedLayoutService/<GetLayoutDefinitionVersion>d__20")]
public sealed virtual ValueTask`1<IVersionedData`1<VersionedLayoutDefinition>> GetLayoutDefinitionVersion(int versionId);
    [AsyncStateMachineAttribute("Omnia.Fx.VersionedLayouts.VersionedLayoutService/<GetLayoutDefinitionVersionInformationAsync>d__21")]
public sealed virtual ValueTask`1<IList`1<IVersionInformation>> GetLayoutDefinitionVersionInformationAsync(IVersionedDataIdentifier layoutDataIdentifier);
    [AsyncStateMachineAttribute("Omnia.Fx.VersionedLayouts.VersionedLayoutService/<GetLayoutsByAppIdAndDefinitionAsync>d__22")]
public sealed virtual ValueTask`1<IList`1<VersionedLayout>> GetLayoutsByAppIdAndDefinitionAsync(Guid appInstanceId, VersionedLayoutDefinition layoutDefinition);
    [AsyncStateMachineAttribute("Omnia.Fx.VersionedLayouts.VersionedLayoutService/<GetLayoutsByAppIdAsync>d__23")]
public sealed virtual ValueTask`1<IList`1<VersionedLayout>> GetLayoutsByAppIdAsync(Guid appInstanceId);
    [AsyncStateMachineAttribute("Omnia.Fx.VersionedLayouts.VersionedLayoutService/<GetLayoutsByProfileAndTypeIdAsync>d__24")]
public sealed virtual ValueTask`1<IList`1<VersionedLayout>> GetLayoutsByProfileAndTypeIdAsync(Guid businessProfileId, Guid layoutTypeId);
    [AsyncStateMachineAttribute("Omnia.Fx.VersionedLayouts.VersionedLayoutService/<GetLayoutsByTypeIdsAsync>d__25")]
public sealed virtual ValueTask`1<IList`1<VersionedLayout>> GetLayoutsByTypeIdsAsync(IList`1<Guid> layoutTypeIds);
    [AsyncStateMachineAttribute("Omnia.Fx.VersionedLayouts.VersionedLayoutService/<GetTenantScopedLayoutsByDefinitionAsync>d__26")]
public sealed virtual ValueTask`1<IList`1<VersionedLayout>> GetTenantScopedLayoutsByDefinitionAsync(VersionedLayoutDefinition layoutDefinition);
    [AsyncStateMachineAttribute("Omnia.Fx.VersionedLayouts.VersionedLayoutService/<GetTenantScopedLayoutsAsync>d__27")]
public sealed virtual ValueTask`1<IList`1<VersionedLayout>> GetTenantScopedLayoutsAsync();
    [AsyncStateMachineAttribute("Omnia.Fx.VersionedLayouts.VersionedLayoutService/<PublishLayoutDefinitionAsync>d__28")]
public sealed virtual ValueTask`1<ValueTuple`2<VersionedLayout, IVersionedData`1<VersionedLayoutDefinition>>> PublishLayoutDefinitionAsync(IVersionedData`1<VersionedLayoutDefinition> versionToPublish);
    [AsyncStateMachineAttribute("Omnia.Fx.VersionedLayouts.VersionedLayoutService/<UpdateLayoutDefinitionAsync>d__29")]
public sealed virtual ValueTask`1<ICheckedoutVersionedData`1<VersionedLayoutDefinition>> UpdateLayoutDefinitionAsync(ICheckedoutVersionedData`1<VersionedLayoutDefinition> versionToUpdate);
    [AsyncStateMachineAttribute("Omnia.Fx.VersionedLayouts.VersionedLayoutService/<GetDisplayBreakpointAlternateLayoutMappingAsync>d__30")]
public sealed virtual ValueTask`1<IDictionary`2<VersionedLayoutId, DisplayBreakpointVersionedAlternateLayoutMapping>> GetDisplayBreakpointAlternateLayoutMappingAsync(VersionedLayoutId[] versionedLayoutIds);
    [AsyncStateMachineAttribute("Omnia.Fx.VersionedLayouts.VersionedLayoutService/<SetDisplayBreakpointAlternateLayoutMappingAsync>d__31")]
public sealed virtual ValueTask SetDisplayBreakpointAlternateLayoutMappingAsync(VersionedLayoutId versionedLayoutId, DisplayBreakpointVersionedAlternateLayoutMapping mapping);
    [AsyncStateMachineAttribute("Omnia.Fx.VersionedLayouts.VersionedLayoutService/<SetDefaultAppLayoutInPublicListingAsync>d__32")]
public sealed virtual ValueTask SetDefaultAppLayoutInPublicListingAsync(VersionedLayoutId versionedLayoutId, Guid appInstanceId);
    [AsyncStateMachineAttribute("Omnia.Fx.VersionedLayouts.VersionedLayoutService/<UpdateAlternateLayoutAsync>d__33")]
public sealed virtual ValueTask`1<VersionedLayout> UpdateAlternateLayoutAsync(VersionedAlternateLayout alternateLayout);
    [AsyncStateMachineAttribute("Omnia.Fx.VersionedLayouts.VersionedLayoutService/<UpdateLayoutAsync>d__34")]
public sealed virtual ValueTask`1<VersionedLayout> UpdateLayoutAsync(VersionedLayout versionedLayout);
    [AsyncStateMachineAttribute("Omnia.Fx.VersionedLayouts.VersionedLayoutService/<ValidateLayoutUrlAsync>d__35")]
public sealed virtual ValueTask`1<bool> ValidateLayoutUrlAsync(AppScopedVersionedLayoutUrlValidationRequest request);
    [AsyncStateMachineAttribute("Omnia.Fx.VersionedLayouts.VersionedLayoutService/<GetLayoutsByIdsAsync>d__36")]
public sealed virtual ValueTask`1<IList`1<VersionedLayout>> GetLayoutsByIdsAsync(IList`1<VersionedLayoutId> versionedLayoutIds);
}
[ExtensionAttribute]
public static class System.ApiResponseExtensions : object {
    [ExtensionAttribute]
public static ApiResponse`1<T> AsApiResponse(T result);
}
[ExtensionAttribute]
public static class System.IEnumerableExtensions : object {
    [ExtensionAttribute]
public static bool None(IEnumerable`1<TSource> source);
    [ExtensionAttribute]
public static bool None(IEnumerable`1<TSource> source, Func`2<TSource, bool> predicate);
}
[ExtensionAttribute]
public static class System.Net.Http.Headers.HttpRequestHeadersExtensions : object {
    [ExtensionAttribute]
public static void AddOmniaUserAgent(HttpRequestHeaders headers);
}
[ExtensionAttribute]
public static class System.Net.Http.HttpContentExtensions : object {
    [AsyncStateMachineAttribute("System.Net.Http.HttpContentExtensions/<ReadAsJsonAsync>d__0`1")]
[ExtensionAttribute]
public static ValueTask`1<T> ReadAsJsonAsync(HttpContent content);
}
[ExtensionAttribute]
public static class System.Net.Http.HttpResponseMessageExtensions : object {
    [AsyncStateMachineAttribute("System.Net.Http.HttpResponseMessageExtensions/<ValidateAsync>d__0`1")]
[ExtensionAttribute]
public static ValueTask`1<T> ValidateAsync(HttpResponseMessage response, string methodName);
    [AsyncStateMachineAttribute("System.Net.Http.HttpResponseMessageExtensions/<ValidateAndGetResponseAsStringAsync>d__1")]
[ExtensionAttribute]
public static ValueTask`1<string> ValidateAndGetResponseAsStringAsync(HttpResponseMessage response, string methodName);
    [AsyncStateMachineAttribute("System.Net.Http.HttpResponseMessageExtensions/<ValidateAsync>d__2")]
[ExtensionAttribute]
public static ValueTask ValidateAsync(HttpResponseMessage response, string methodName);
    [AsyncStateMachineAttribute("System.Net.Http.HttpResponseMessageExtensions/<ValidateAsApiResponseAsync>d__3`1")]
[ExtensionAttribute]
public static ValueTask`1<T> ValidateAsApiResponseAsync(HttpResponseMessage response, string methodName);
    [AsyncStateMachineAttribute("System.Net.Http.HttpResponseMessageExtensions/<ValidateAsApiResponseAsync>d__4")]
[ExtensionAttribute]
public static ValueTask ValidateAsApiResponseAsync(HttpResponseMessage response, string methodName);
    [AsyncStateMachineAttribute("System.Net.Http.HttpResponseMessageExtensions/<ValidateAndGetApiResponseAsync>d__5`1")]
[ExtensionAttribute]
public static ValueTask`1<ApiResponse`1<T>> ValidateAndGetApiResponseAsync(HttpResponseMessage response, string methodName);
    [AsyncStateMachineAttribute("System.Net.Http.HttpResponseMessageExtensions/<ValidateAndGetApiResponseAsync>d__6")]
[ExtensionAttribute]
public static ValueTask`1<ApiResponse> ValidateAndGetApiResponseAsync(HttpResponseMessage response, string methodName);
    [AsyncStateMachineAttribute("System.Net.Http.HttpResponseMessageExtensions/<ValidateAsApiResponseInternalAsync>d__7`1")]
[ExtensionAttribute]
private static ValueTask`1<T> ValidateAsApiResponseInternalAsync(HttpResponseMessage response, string methodName);
}
[ExtensionAttribute]
public static class System.Text.Json.JsonSerializerExtensions : object {
    [ExtensionAttribute]
public static T Deserialize(string data, JsonSerializerOptions jsonSerializerOptions);
    [ExtensionAttribute]
public static string Serialize(T data, JsonSerializerOptions jsonSerializerOptions);
}
[ExtensionAttribute]
public static class System.Threading.Tasks.TaskExtensions : object {
    [AsyncStateMachineAttribute("System.Threading.Tasks.TaskExtensions/<SafeFireAndForget>d__0")]
[ExtensionAttribute]
public static void SafeFireAndForget(Task task, Action`1<Exception> errorHandler);
    [AsyncStateMachineAttribute("System.Threading.Tasks.TaskExtensions/<SafeFireAndForget>d__1")]
[ExtensionAttribute]
public static void SafeFireAndForget(ValueTask task, Action`1<Exception> errorHandler);
}
